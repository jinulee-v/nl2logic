{"id": "entailmentbank_validation_0", "nl": "the sun rising / setting occurs once per day.", "fol": "", "prediction": ["all x y.((Sun(x) & Day(y)) -> (Rising(x,y) | Setting(x,y)))", "all x.((SunRising(x) & Setting(x)) -> OccursOncePerDay(x))", "all x.((SunRising(x) & SunSetting(x)) -> OccursOncePerDay(x))", "all x y.((Sun(x) & Day(y)) -> (SunRising(x,y) | SunSetting(x,y)))", "all x y.((Sun(x) & Day(y) & Rises(x,y)) -> Sets(x,y))", "all x y.((Sun(x) & Day(y)) -> (Receives(x,y) | Sets(x,y)))", "all x.((Sun(x) & SunRising(x) & SunSetting(x)) -> OccursOncePerDay(x))", "all x.(SunRising(x) -> SettingOfDay(x))", "all x y.((Sun(x) & Day(y)) -> (Rising(x,y) & Setting(x,y)))", "all x.((Sun(x) & Rising(x) & Setting(x)) -> OccursOncePerDay(x))", "all x y.((Sun(x) & Day(y)) -> (Reaching(x,y) | Setting(x,y)))", "all x.(SunRising(x) -> Setting(x))", "all x y.((Sun(x) & Day(y)) -> (SunRising(x,y) | Setting(x,y)))", "all x y.((Sun(x) & Day(y)) -> (Receives(x,y) & Sets(x,y)))", "all x y.((Sun(x) & Day(y)) -> OccursOnce(x,y))", "all x.(SunRising(x) | SunSetting(x))"]}
{"id": "entailmentbank_validation_1", "nl": "the sun rising is a kind of event.", "fol": "", "prediction": ["all x.(SunRising(x) -> Event(x))", "all x.((SunRising(x) & Event(x)) -> Event(x))", "all x.(RisingSun(x) -> Event(x))", "all x y.((SunRising(x) & Sun(y)) -> Event(x))", "all x y.((Sun(x) & Rising(y)) -> Event(x))", "all x.((SunRising(x) & Event(x)) -> Events(x))", "all x.((Sun(x) & Rising(x)) -> Event(x))", "all x.(SunReaching(x) -> Event(x))", "all x y.((Sun(x) & Rising(y)) -> Event(x,y))", "all x.((SunRising(x) & ArtOfEvent(x)) -> Event(x))", "all x.((SunRising(x) & Event(x)) -> Is(x,y))", "all x.((SunRising(x) & Event(x)) -> KindOfEvent(x))", "all x.((SunRising(x) & Event(x)) -> ArtOf(x))", "all x.((SunRising(x) & Event(x)) -> ArtOfEvent(x))", "all x.((SunRising(x) & Events(x)) -> Event(x))", "all x.(SunReceiving(x) -> Event(x))"]}
{"id": "entailmentbank_validation_2", "nl": "the sun setting is a kind of event.", "fol": "", "prediction": ["all x.(SunSetting(x) -> Event(x))", "all x.((SunSetting(x) & Event(x)) -> Event(x))", "all x y.((SunSetting(x) & Event(y)) -> Event(x))", "all x y.((SunSetting(x) & Event(y)) -> Event(x,y))", "all x y.((SunSetting(x) & Sun(y)) -> Event(x))", "all x y.((SunSetting(x) & Event(y)) -> ArtOf(x,y))", "all x.(SunSetting(x) -> Events(x))", "all x y.((SunSetting(x) & Event(y)) -> Is(x,y))", "all x y.((SunSetting(x) & Event(y)) -> KindOfEvent(x,y))", "all x.(SunSetting(x) -> Event(x))", "all x.(SunSetting(x) -> ArtOfEvent(x))", "all x.(SettingSun(x) -> Event(x))", "all x.((SunSetting(x) & Event(x)) -> KindOfEvent(x))", "all x y.((SunSetting(x) & Event(y)) -> KindOf(x,y))", "all x y.((SunSetting(x) & Event(y)) -> Sets(x,y))", "all x y.((SunSetting(x) & Event(y)) -> Event(y))"]}
{"id": "entailmentbank_validation_3", "nl": "the sun rising and setting is the event that occurs once per day.", "fol": "", "prediction": ["all x.((SunRising(x) & Setting(x)) -> OccursOncePerDay(x))", "all x.((SunRising(x) & SunSetting(x)) -> OccursOncePerDay(x))", "all x.(SunRisingAndSetting(x) -> OccursOncePerDay(x))", "all x.((Sun(x) & Rising(x) & Setting(x)) -> OccursOncePerDay(x))", "all x.((Sun(x) & Rises(x) & Sets(x)) -> OccursOncePerDay(x))", "all x.((Sun(x) & SunRising(x) & SunSetting(x)) -> OccursOncePerDay(x))", "all x.((Sun(x) & Rising(x) & Setting(x)) -> OccursOncePerDay(x))", "all x.((SunRising(x) & Setting(x)) -> OccursEachDay(x))", "all x.((SunRising(x) & Sets(x)) -> OccursOncePerDay(x))", "all x.(SunRising(x) & Setting(x)) -> OccursOncePerDay(x))", "all x.((SunRising(x) & SunSetting(x)) -> OccursEachDay(x))", "all x.((SunReaching(x) & Setting(x)) -> OccursOncePerDay(x))", "all x.((SunRising(x) & Setting(x)) -> OccursOnePerDay(x))", "all x.((SunRising(x) & Setting(x)) -> OccursOncePerDay(x))", "all x.((SunRising(x) & SunSetting(x)) -> OccursOnePerDay(x))", "all x.((SunRising(x) & SunSetting(x)) -> OccursOfDay(x))"]}
{"id": "entailmentbank_validation_4", "nl": "a star produces light and heat.", "fol": "", "prediction": ["all x.(Star(x) -> (ProducesLight(x) & ProducesHeat(x)))", "all x y.((Star(x) & Light(y) & Heat(y)) -> Produces(x,y))", "all x.(Star(x) -> (ProducesLight(x) & ProducesHeat(x)))", "all x y z.((Star(x) & Light(y) & Heat(z)) -> (Produces(x,y) & Produces(x,z)))", "all x y.((Star(x) & Light(y) & Heat(z)) -> Produces(x,y,z))", "all x y.((Star(x) & Light(y)) -> (Produces(x,y) & Produces(x,y)))", "all x.(Star(x) -> exists y.(Light(y) & Heat(y) & Produces(x,y)))", "all x y.((Star(x) & Light(y)) -> Produces(x,y))", "all x y.((Star(x) & Light(y)) -> (Produces(x,y) & Produces(x,z) & Heat(z)))", "all x.((Star(x) & ProducesLight(x) & ProducesHeat(x)) -> ProducesHeat(x))", "all x y z.((Star(x) & Light(y) & Heat(z)) -> Produces(x,y,z))", "all x.(Star(x) -> (ProduceLight(x) & ProduceHeat(x)))", "all x y.((Star(x) & Light(y) & Heat(z)) -> Produces(x,y))", "all x.(Star(x) -> ProducesLight(x) & ProducesHeat(x))", "exists x.(Star(x) & ProducesLight(x) & ProducesHeat(x))", "all x.(Star(x) -> exists y.(Light(y) & Heat(y) & Produces(x,y))))"]}
{"id": "entailmentbank_validation_5", "nl": "a source of something emits / produces / generates / provides that something.", "fol": "", "prediction": ["all x y.((Source(x) & Something(y)) -> (Emits(x,y) & Produces(x,y) & Generates(x,y) & Provides(x,y)))", "all x y.((SourceOf(x,y) & Something(y)) -> (Emits(x,y) & Produces(x,y) & Generates(x,y) & Provides(x,y)))", "all x y.((Source(x) & Something(y)) -> (EmitsProducesGenerates(x,y) & Provides(x,y)))", "all x.((SourceOf(x) & Something(x)) -> (Emits(x) & Produces(x) & Generates(x) & Provides(x)))", "all x y.((Source(x) & Something(y)) -> (Emits(x,y) | Produces(x,y) | Generates(x,y) | Provides(x,y)))", "all x y.((Source(x) & Something(y)) -> (Emits(x,y) & Produces(x,y) & Generates(x,y)))", "all x y.((Source(x) & Something(y)) -> (Emits(x,y) | Produces(x,y) | Generates(x,y)))", "all x.(Source(x) -> (Emits(x) & Produces(x) & Generates(x) & Provides(x)))", "all x y.((SourceOf(x,y) & Something(y)) -> (EmitsProducesGenerates(x,y) & Provides(x,y)))", "all x y.((Source(x) & Something(y)) -> (EmitsProducesGeneratesProvides(x,y)))", "all x y.((SourceOf(x,y) & Something(y)) -> (Emits(x,y) | Produces(x,y) | Generates(x,y) | Provides(x,y)))", "all x y.((Source(x) & Something(y) & EmitsProducesGeneratesProvides(x,y)) -> SourceOf(x,y))", "all x y.((SourceOf(x,y) & Something(y)) -> (Emits(x,y) & Produces(x,y) & Generates(x,y)))", "all x y z.((SourceOf(x,y) & Something(z)) -> (EmitsProducesGenerates(x,z) & Provides(x,z)))", "all x y.((SourceOf(x,y) & Something(y)) -> (Emits(x,y) | Produces(x,y) | Generates(x,y)))", "all x y.((SourceOf(x,y) & Something(y)) -> (EmitsProducesGeneratesProvides(x,y)))"]}
{"id": "entailmentbank_validation_6", "nl": "a star is a source of light.", "fol": "", "prediction": ["all x.(Star(x) -> SourceOfLight(x))", "all x.(Star(x) -> SourceOfLight(x))", "all x y.((Star(x) & SourceOfLight(y)) -> SourceOfLight(x))", "all x y.((Star(x) & LightSource(y)) -> SourceOf(x,y))", "all x y.((Star(x) & SourceOfLight(y)) -> SourceOfLight(x,y))", "all x.((Star(x) & SourceOfLight(x)) -> SourceOfLight(x))", "all x y.((Star(x) & SourceOfLight(x)) -> SourceOfLight(y))", "all x.(Star(x) -> LightSource(x))", "all x y.((Star(x) & SourceOfLight(x)) -> SourceOfLight(x))", "all x y z.((Star(x) & LightSource(y) & LightSource(z)) -> SourceOf(x,y,z))", "all x y.((Star(x) & LightSource(y)) -> Source(x,y))", "all x y.((Star(x) & SourceOfLight(y)) -> LightSource(x))", "all x y.((Star(x) & SourceOfLight(y)) -> LightSource(x,y))", "all x y.((Star(x) & SourceOfLight(x)) -> SourceOfLight(x,y))", "all x y.((Star(x) & Star(y)) -> SourceOfLight(x,y))", "all x.exists y.(Star(x) & SourceOfLight(y) & SourceOfLight(x,y))"]}
{"id": "entailmentbank_validation_7", "nl": "as the source of light becomes closer, that source of light will appear brighter.", "fol": "", "prediction": ["all x.((SourceOfLight(x) & Closer(x)) -> AppearsBrighter(x))", "all x.((SourceOfLight(x) & Closer(x)) -> AppearBrighter(x))", "all x.((SourceOfLight(x) & Closer(x)) -> AppearsBrighter(x))", "all x.((SourceOfLight(x) & Closer(x)) -> Brighter(x))", "all x.((SourceOfLight(x) & CloserToSourceOfLight(x)) -> AppearsBrighter(x))", "all x.((SourceOfLight(x) & CloserToSourceOfLight(x)) -> AppearsBrighter(x))", "all x.((SourceOfLight(x) & Closer(x)) -> AppearsBrighter(x))", "all x y.((SourceOfLight(x) & Closer(x)) -> AppearsBrighter(y))", "all x.((SourceOfLight(x) & CloserToSourceOfLight(x)) -> AppearBrighter(x))", "all x.((SourceOfLight(x) & Closer(x)) -> ApearsBrighter(x))", "all x y.((SourceOfLight(x) & Closer(x)) -> AppearsBrighter(x))", "all x y.((SourceOfLight(x) & Closer(x)) -> AppearBrighter(y))", "all x y.((SourceOfLight(x) & Closer(x)) -> AppearsBrighter(y))", "all x y.((SourceOfLight(x) & Closer(x)) -> AppearsBrighter(x))", "all x.((SourceOfLight(x) & Closer(x)) -> LooksBrighter(x))", "all x y.((SourceOfLight(x) & Closer(x)) -> AppearsBrighter(x,y))"]}
{"id": "entailmentbank_validation_8", "nl": "distance is a property of space and includes ordered values of close / far.", "fol": "", "prediction": ["all x.(Distance(x) -> (PropertyOfSpace(x) & IncludesOrderedValuesOfClose(x) & IncludesOrderedValuesOfFar(x)))", "all x.(Distance(x) -> (PropertyOfSpace(x) & IncludesOrderedValues(x,close,far)))", "all x.(Distance(x) -> (PropertyOfSpace(x) & IncludesOrderedValues(x,close) & IncludesOrderedValues(x,far)))", "all x.(Distance(x) -> (PropertyOfSpace(x) & IncludesOrderedValuesOfCloseFar(x)))", "all x.(Distance(x) -> (PropertyOfSpace(x) & OrderedValuesOfClose(x) & OrderedValuesOfFar(x)))", "all x.(Distance(x) -> (PropertyOfSpace(x) & IncludesOrderedValuesOfClose(x) & IncludesOrderedValuesOfFar(x)))", "all x.(Distance(x) -> (PropertyOfSpace(x) & IncludesOrderedValues(x,Close) & IncludesOrderedValues(x,Far)))", "all x.(Distance(x) -> (PropertyOfSpace(x) & IncludesOrderedValues(x,Close,Far)))", "all x.(Distance(x) -> (PropertyOfSpace(x) & IncludesOrderedValuesOfClose(x) | IncludesOrderedValuesOfFar(x)))", "all x.(Distance(x) -> (PropertyOfSpace(x) & IncludesOrderedValues(x,close,far)))", "all x.(Distance(x) -> (PropertyOfSpace(x) & OrderedValues(x,close,far)))", "all x.(Distance(x) -> (PropertyOfSpace(x) & IncludesOrderedValues(x,close) | Far(x)))", "all x.(Distance(x) -> (PropertyOfSpace(x) & IncludesOrderedValuesOfCloseAndFar(x)))", "all x y.((Distance(x) & Space(y)) -> (PropertyOf(x,y) & IncludesOrderedValues(x,Close) & IncludesOrderedValues(x,Far)))", "all x y.((Distance(x) & Space(y)) -> (PropertyOf(x,y) & IncludesOrderedValues(x,close) & IncludesOrderedValues(x,far)))", "all x.(Distance(x) -> (PropertyOfSpace(x) & OrderedValuesOfCloseFar(x)))"]}
{"id": "entailmentbank_validation_9", "nl": "as the distance of the star to earth decreases, the star will appear brighter.", "fol": "", "prediction": ["all x y.((Star(x) & Distance(y) & Decreases(x,y)) -> AppearsBrighter(x))", "all x.((Star(x) & DistanceDecreases(x)) -> AppearsBrighter(x))", "all x.((Star(x) & DistanceDecreases(x)) -> AppearsBrighter(x))", "all x y z.((Star(x) & Distance(y) & Earth(z) & Decreases(x,y)) -> AppearsBrighter(x))", "all x y.((Star(x) & Distance(y) & Decreases(x,y)) -> AppearsBrighter(x))", "all x y.((Star(x) & Earth(y) & DecreasesDistance(x,y)) -> AppearsBrighter(x))", "all x y z.((Star(x) & Distance(y) & Earth(z) & Decreases(y,z)) -> AppearsBrighter(x))", "all x y.((Star(x) & Earth(y) & DistanceDecreases(x,y)) -> AppearsBrighter(x))", "all x.((Star(x) & DistanceDecreases(x)) -> StarAppearsBrighter(x))", "all x.(DecreasedDistance(x) -> StarAppearsBrighter(x))", "all x y.((Star(x) & Earth(y) & DecreasedDistance(x,y)) -> AppearsBrighter(x))", "all x y z.((Star(x) & Distance(y) & Earth(z) & Decreases(x,y,z)) -> AppearsBrighter(x))", "all x y.((Star(x) & Earth(y) & DistanceDecreases(x,y)) -> AppearsBrighter(x))", "all x y z.((Star(x) & Distance(y) & Earth(z) & Decreases(x,y)) -> AppearsBrighter(x))", "all x y.((Star(x) & Earth(y) & DecreasesDistance(x,y)) -> AppearsBrighter(x))", "all x y z.((Star(x) & Distance(y) & Earth(z) & Decreases(x,y)) -> AppearsBrighter(x,z))"]}
{"id": "entailmentbank_validation_10", "nl": "a star is a kind of celestial object / celestial body.", "fol": "", "prediction": ["all x.(Star(x) -> (CelestialObject(x) & CelestialBody(x)))", "all x.(Star(x) -> (CelestialObject(x) | CelestialBody(x)))", "all x.(Star(x) -> (CelestialObject(x) & CelestialBody(x)))", "all x y.((Star(x) & CelestialObject(y)) -> CelestialBody(x))", "all x.(Star(x) -> (CelestialObject(x) | CelestialBody(x)))", "all x y.((Star(x) & CelestialObject(y)) -> CelestialBody(x,y))", "all x.(Star(x) -> CelestialObject(x))", "all x y z.((Star(x) & CelestialObject(y) & CelestialBody(z)) -> (CelestialObject(x,y) & CelestialBody(x,z)))", "all x.(Star(x) -> CelestialObject(x) & CelestialBody(x))", "all x y z.((Star(x) & CelestialObject(y) & CelestialBody(z)) -> (CelestialObject(y) & CelestialBody(z)))", "all x y z.((Star(x) & CelestialObject(y) & CelestialBody(z)) -> (CelestialObject(x) & CelestialBody(x)))", "all x y z.((Star(x) & CelestialObject(y) & CelestialBody(z)) -> (CelestialObject(x,y) | CelestialBody(x,z)))", "all x y.((Star(x) & CelestialObject(y) & CelestialBody(x)) -> CelestialObject(x,y))", "all x y.((Star(x) & CelestialObject(y) & CelestialBody(x)) -> (CelestialObject(x) & CelestialBody(y)))", "all x y z.((Star(x) & CelestialObject(y) & CelestialBody(z)) -> (CelestialObject(x) | CelestialBody(x)))", "all x y z.((Star(x) & CelestialObject(y) & CelestialBody(z)) -> CelestialObject(x,y,z))"]}
{"id": "entailmentbank_validation_11", "nl": "apparent magnitude is a measure of the brightness of a celestial object / celestial body as observed on earth.", "fol": "", "prediction": ["all x y.((ApparentMagnitude(x) & CelestialObject(y) & CelestialBody(y)) -> MeasuresBrightnessAsObservedOnEarth(x,y))", "all x.(ApparentMagnitude(x) -> (MeasuresBrightness(x) & CelestialObject(x) & CelestialBody(x) & ObservedOnEarth(x)))", "all x y.((ApparentMagnitude(x) & CelestialObject(y) & CelestialBody(y)) -> MeasuresBrightness(x,y))", "all x y z.((ApparentMagnitude(x) & CelestialObject(y) & CelestialBody(z) & ObservedOnEarth(x,y,z)) -> MeasuresBrightness(x,y,z))", "all x.(ApparentMagnitude(x) -> (MeasuresBrightnessOfCelestialObject(x) & MeasuresBrightnessOfCelestialBody(x) & ObservedOnEarth(x)))", "all x y.((ApparentMagnitude(x) & CelestialObject(y) & CelestialBody(y) & ObservedOnEarth(x,y)) -> MeasuresBrightness(x,y))", "all x y z.((ApparentMagnitude(x) & CelestialObject(y) & CelestialBody(z)) -> MeasuresBrightness(x,y,z))", "all x y z.((ApparentMagnitude(x) & CelestialObject(y) & CelestialBody(z)) -> MeasuresBrightnessAsObservedOnEarth(x,y,z))", "all x.(ApparentMagnitude(x) -> (MeasuresBrightness(x) & CelestialObject(x) & CelestialBody(x) & ObservedOnEarth(x)))", "all x y z.((ApparentMagnitude(x) & CelestialObject(y) & CelestialBody(z) & ObservedOnEarth(x)) -> MeasuresBrightness(x,y,z))", "all x y z.((ApparentMagnitude(x) & CelestialObject(y) & CelestialBody(z)) -> (MeasuresBrightness(x,y,z) & ObservedOnEarth(x)))", "all x y.((AppearingMagnitude(x) & CelestialObject(y) & CelestialBody(y)) -> MeasuresBrightnessAsObservedOnEarth(x,y))", "all x.(ApparentMagnitude(x) -> (MeasuresBrightnessOfCelestialObject(x) & ObservedOnEarth(x)))", "all x y.((AppearingMagnitude(x) & CelestialObject(y) & CelestialBody(y)) -> MeasuresBrightness(x,y))", "all x.(ApparentMagnitude(x) -> (MeasuresBrightness(x) & ObservedOnEarth(x)))", "all x y.((ApparentMagnitude(x) & CelestialObject(y) & CelestialBody(z)) -> MeasuresBrightness(x,y,z))"]}
{"id": "entailmentbank_validation_12", "nl": "apparent magnitude is a measure of the brightness of a star as observed on earth.", "fol": "", "prediction": ["all x.(ApparentMagnitude(x) -> (MeasuresBrightnessOfStar(x) & ObservedOnEarth(x)))", "all x y.((ApparentMagnitude(x) & Star(y) & ObservedOnEarth(x,y)) -> MeasuresBrightness(x,y))", "all x y.((AppearingMagnitude(x) & Star(y) & ObservedOnEarth(x,y)) -> MeasuresBrightness(x,y))", "all x y.((ApparentMagnitude(x) & Star(y) & ObservedOnEarth(y)) -> MeasuresBrightness(x,y))", "all x y.((AppearingMagnitude(x) & Star(y) & ObservedOnEarth(y)) -> MeasuresBrightness(x,y))", "all x y z.((ApparentMagnitude(x) & Star(y) & Earth(z)) -> MeasuresBrightness(x,y,z))", "all x y z.((AppearingMagnitude(x) & Star(y) & Earth(z)) -> MeasuresBrightness(x,y,z))", "all x.(ApparentMagnitude(x) -> (MeasuresBrightnessOfStar(x) & ObservedOnEarth(x)))", "all x y.((AppearingMagnitude(x) & Star(y)) -> MeasuresBrightnessAsObservedOnEarth(x,y))", "all x.(AppearingMagnitude(x) -> (MeasuresBrightnessOfStar(x) & ObservedOnEarth(x)))", "all x.(ApparentMagnitude(x) -> MeasuresBrightnessOfStar(x))", "all x y.((AppearingMagnitude(x) & Star(y) & ObservedOnEarth(y,x)) -> MeasuresBrightness(x,y))", "all x y.((AppearingMagnitude(x) & Star(y)) -> MeasuresBrightness(x,y))", "all x.(ApparentMagnitude(x) -> (MeasuresBrightness(x) & ObservedOnEarth(x)))", "all x y.((AppealingMagnitude(x) & Star(y) & ObservedOnEarth(y)) -> MeasuresBrightness(x,y))", "all x y z.((ApparentMagnitude(x) & Star(y) & Earth(z)) -> MeasuresBrightnessAsObserved(x,y,z))"]}
{"id": "entailmentbank_validation_13", "nl": "united states is located in the northern hemisphere.", "fol": "", "prediction": ["all x y.((UnitedStates(x) & NorthernHemisphere(y)) -> LocatedIn(x,y))", "all x.(UnitedStates(x) -> LocatedInNorthernHemisphere(x))", "all x y.((UnitedStates(x) & NorthernHemispheric(y)) -> LocatedIn(x,y))", "all x y.((UnitedStates(x) & NorthernHemisphere(y)) -> LocatedIn(x,y))", "all x.(UnitedStates(x) -> NorthernHemisphere(x))", "all x.(UnitedStates(x) -> LocatedInNorthernHemispheric(x))", "all x.(UnitedStates(x) -> LocatedInNorthernHemisphere(x))", "all x y.((UnitedStates(x) & NorthernHemispheric(y)) -> LocatedIn(x,y))", "all x.(UnitedStates(x) -> LocationInNorthernHemisphere(x))", "all x.(UnitedStates(x) -> LocatedInNorthernHemisphere(x))", "all x.(UnitedStates(x) -> LocatedInNorthernHemispheric(x))", "all x y.((UnitedStates(x) & NorthernHemisphere(y)) -> LocatesIn(x,y))", "all x.((UnitedStates(x) & NorthernHemisphere(x)) -> LocatedIn(x,y))", "all x y.((UnitedStates(x) & NorthernHemisphere(y)) -> LocalizedIn(x,y))", "all x y.((UnitedStates(x) & NorthernHemisphere(y)) -> FoundIn(x,y))", "all x.(UnitedStates(x) -> NorthernHemispheric(x))"]}
{"id": "entailmentbank_validation_14", "nl": "new york / new york state is a state located in the united states of america.", "fol": "", "prediction": ["all x.((State(x) & NewYork(x)) -> LocatedInUnitedStatesOfAmerica(x))", "all x.((State(x) & NewYork(x)) -> UnitedStatesOfAmerica(x))", "all x.(NewYork(x) -> (State(x) & UnitedStatesOfAmerica(x)))", "all x.(NewYork(x) -> (State(x) & LocatedInUnitedStatesOfAmerica(x)))", "all x.((State(x) & NewYork(x)) -> (LocatedInUnitedStatesOfAmerica(x) & LocatedIn(x,UnitedStatesOfAmerica)))", "all x.(NewYorkState(x) -> (LocatedInUnitedStatesOfAmerica(x) & NewYorkState(x)))", "all x.((State(x) & NewYork(x)) -> StateLocatedInUnitedStatesOfAmerica(x))", "all x.((State(x) & NewYork(x)) -> (LocatedInUnitedStatesOfAmerica(x) & LocatedIn(x,UnitedStatesOfAmerica(x)))", "all x y z.((NewYork(x) & NewYorkState(y) & UnitedStatesOfAmerica(z)) -> StateLocatedIn(x,y,z))", "all x.(NewYork(x) -> (State(x) & LocatedInUnitedStates(x)))", "all x y z.((NewYork(x) & NewYorkState(y) & UnitedStatesOfAmerica(z)) -> StateLocatedIn(x,y,z))", "all x y.((NewYork(x) & NewYork(y)) -> (State(x,y) & UnitedStatesOfAmerica(x)))", "all x y z.((NewYork(x) & NewYorkState(y) & UnitedStatesOfAmerica(z)) -> LocatedIn(x,y,z))", "all x y z.((NewYork(x) & NewYorkState(y) & UnitedStatesOfAmerica(z)) -> State(x,y,z))", "all x.((State(x) & NewYork(x)) -> (LocatedInUnitedStatesOfAmerica(x) & UnitedStatesOfAmerica(x)))", "all x y.((NewYork(x) & NewYorkState(y)) -> (LocatedInUnitedStatesOfAmerica(x,y)))"]}
{"id": "entailmentbank_validation_15", "nl": "new york state is located in the northern hemisphere.", "fol": "", "prediction": ["all x.(NewYorkState(x) -> LocatedInNorthernHemisphere(x))", "all x y.((NewYorkState(x) & NorthernHemisphere(y)) -> LocatedIn(x,y))", "all x.(NewYorkState(x) -> (LocatedInNorthernHemisphere(x) | LocatedInNorthernHemisphere(x)))", "all x.((NewYorkState(x) & NorthernHemisphere(x)) -> LocatedIn(x,y))", "all x y.((NewYorkState(x) & NorthernHemispheric(y)) -> LocatedIn(x,y))", "all x.(NewYorkState(x) -> NorthernHemisphere(x))", "all x.(NewYorkState(x) -> LocatedInNorthernHemisphere(x))", "all x y z.((NewYorkState(x) & NorthernHemisphere(y) & NorthernHemisphere(z)) -> LocatedIn(x,y,z))", "all x.(NewYorkState(x) -> LocatedInNorthernHemispheric(x))", "all x y.((NewYorkState(x) & NorthernHemisphere(y)) -> LocatedIn(x,y))", "all x.((NewYorkState(x) & NorthernHemisphere(y)) -> LocatedIn(x,y))", "all x.(NewYorkState(x) -> (LocatedInNorthernHemisphere(x) & LocatedInNorthernHemisphere(x)))", "all x y.((NewYork(x) & NorthernHemisphere(y)) -> LocatedIn(x,y))", "all x.(NewYorkState(x) -> (NorthernHemisphere(x) & LocatedIn(x,y)))", "all x.(NewYorkState(x) -> LocationInNorthernHemisphere(x))", "all x y.((NewYorkState(x) & NorthernHemisphere(y)) -> LocatesIn(x,y))"]}
{"id": "entailmentbank_validation_16", "nl": "december is during the winter in the northern hemisphere.", "fol": "", "prediction": ["all x.(December(x) -> WinterInNorthernHemisphere(x))", "all x y.((December(x) & NorthernHemisphere(y)) -> Winter(x,y))", "all x y.((December(x) & NorthernHemisphere(y)) -> DuringWinter(x,y))", "all x y z.((December(x) & NorthernHemisphere(y) & NorthernHemisphere(z)) -> Winter(x,y,z))", "all x y.((December(x) & NorthernHemisphere(y)) -> WinterIn(x,y))", "all x y.((December(x) & NorthernHemispheric(y)) -> Winter(x,y))", "all x.(December(x) -> Winter(x))", "all x y z.((December(x) & NorthernHemisphere(y) & NorthernHemisphere(z)) -> WinterIn(x,y,z))", "all x.((December(x) & NorthernHemisphere(x)) -> Winter(x))", "all x.(December(x) -> WinterInNorthernHemispheric(x))", "all x y z.((December(x) & NorthernHemisphere(y) & NorthernHemisphere(z)) -> DuringWinter(x,y,z))", "all x y z.((December(x) & NorthernHemisphere(y) & Winter(z)) -> Winter(x,y,z))", "all x y z.((December(x) & NorthernHemisphere(y) & NorthernHemisphere(z)) -> Winter(x,y))", "all x.(December(x) -> WinterInNorthernHemisphere(x))", "all x y z.((December(x) & NorthernHemisphere(y) & Winter(z)) -> During(x,y,z))", "all x y z.((December(x) & NorthernHemisphere(y) & Winter(z)) -> WinterIn(x,y,z))"]}
{"id": "entailmentbank_validation_17", "nl": "december is during the winter for new york state.", "fol": "", "prediction": ["all x y.((December(x) & NewYorkState(y)) -> Winter(x,y))", "all x.((December(x) & Winter(x)) -> NewYorkState(y))", "all x.((December(x) & WinterForNewYorkState(x)) -> WinterForNewYorkState(x))", "all x.((December(x) & Winter(x)) -> NewYorkState(x))", "all x.((December(x) & NewYorkState(y)) -> Winter(x,y))", "all x y.((December(x) & NewYorkState(y)) -> DuringWinter(x,y))", "all x y.((December(x) & NewYorkState(y)) -> WinterFor(x,y))", "all x.(December(x) -> WinterForNewYorkState(x))", "all x.((December(x) & WinterForNewYork(x)) -> WinterForNewYork(x))", "all x y.((December(x) & NewYorkState(y)) -> Winter(y))", "all x y z.((December(x) & NewYorkState(y) & Winter(z)) -> Winter(y,z))", "all x y z.((December(x) & NewYorkState(y) & Winter(z)) -> During(x,y,z))", "all x y.((December(x) & NewYork(y)) -> Winter(x,y))", "all x.((December(x) & WinterForNewYorkState(x)) -> Winter(x))", "all x.((December(x) & Winter(y)) -> NewYorkState(x,y))", "all x.((December(x) & NewYorkState(y)) -> WinterFor(x,y))"]}
{"id": "entailmentbank_validation_18", "nl": "winter has the least sunlight.", "fol": "", "prediction": ["all x.(Winter(x) -> LessSunlight(x))", "all x.(Winter(x) -> -LeastSunlight(x))", "all x.(Winter(x) -> HasLeastSunlight(x))", "all x.(Winter(x) -> LeastSunlight(x))", "all x.(Winter(x) -> (LeastSunlight(x)))", "all x.(Winter(x) -> TheLeastSunlight(x))", "all x y.((Winter(x) & Sunlight(y)) -> LessSunlight(x,y))", "all x.((Winter(x) & LessSunlight(x)) -> HasLeastSunlight(x))", "all x.((Winter(x) & -Sunlight(x)) -> HasLeastSunlight(x))", "all x.(Winter(x) -> -LessSunlight(x))", "all x.(Winter(x) & LessSunlight(x))", "all x y.((Winter(x) & Summer(y)) -> LessSunlight(x,y))", "all x.(Winter(x) & -LeastSunlight(x))", "all x.(Winter(x) -> (LessSunlight(x)))", "all x y.((Winter(x) & Sunlight(y)) -> -LeastSunlight(x,y))", "all x.((Winter(x) & -Sunlight(x)) -> LessSunlight(x))"]}
{"id": "entailmentbank_validation_19", "nl": "new york state has the least sunlight during december.", "fol": "", "prediction": ["all x y.((NewYorkState(x) & December(y)) -> HasLeastSunlight(x,y))", "all x y.((NewYorkState(x) & December(y)) -> LessSunlight(x,y))", "all x.(NewYorkState(x) -> HasLeastSunlightDuringDecember(x))", "all x y.((NewYorkState(x) & December(y)) -> -LeastSunlight(x,y))", "all x.((NewYorkState(x) & LastSunlight(x,December)) -> HasLeastSunlight(x,December))", "all x y.((NewYorkState(x) & December(y)) -> (LeastSunlight(x,y)))", "all x y.((NewYorkState(x) & December(y)) -> LeastSunlight(x,y))", "all x.(NewYorkState(x) -> LessSunlightDuringDecember(x))", "all x.(NewYorkState(x) -> (LeastSunlightDuringDecember(x) & NewYorkStateLeastSunlightDuringDecember(x)))", "all x.((NewYorkState(x) & -SunlightDuringDecember(x)) -> HasLeastSunlightDuringDecember(x))", "all x.((NewYorkState(x) & LastSunlight(x,December)) -> -LeastSunlight(x,December))", "all x.(NewYorkState(x) -> (LeastSunlightDuringDecember(x) | -LeastSunlightDuringDecember(x)))", "all x.((NewYorkState(x) & -SunlightDuringDecember(x)) -> HasLeastSunlight(x))", "all x.((NewYorkState(x) & LastSunlight(x,December)) -> LessSunlight(x,December))", "all x.((NewYorkState(x) & LastSunlight(x,December)) -> LeastSunlight(x,December))", "all x y z.((NewYorkState(x) & December(y) & Sunlight(z)) -> HasLeastSunlight(x,y,z))"]}
{"id": "entailmentbank_validation_20", "nl": "earth is a kind of planet.", "fol": "", "prediction": ["all x.(Earth(x) -> Planet(x))", "all x.(Earth(x) -> Planet(x))", "all x y.((Earth(x) & Planet(y)) -> Is(x,y))", "all x y.((Earth(x) & Planet(y)) -> Planet(x))", "all x y.((Earth(x) & Planet(y)) -> TypeOf(x,y))", "all x.((Earth(x) & Planet(x)) -> Planet(x))", "all x y.((Earth(x) & Planet(y)) -> SortOf(x,y))", "all x.(Earth(x) -> Planet(x))", "all x.(Planet(x) -> Earth(x))", "all x.(Earth(x) -> TypeOfPlanet(x))", "all x.(Earth(x) -> (Planet(x) & Planet(x)))", "all x y.((Earth(x) & Planet(y)) -> Planet(x,y))", "all x y.((Earth(x) & Planet(y)) -> Earth(x))", "all x.(Earth(x) -> PartOfPlanet(x))", "all x.(Earth(x) -> (Planet(x) & -Planet(x)))", "all x y.((Earth(x) & Planet(y)) -> KindOf(x,y))"]}
{"id": "entailmentbank_validation_21", "nl": "the earth rotates on its tilted axis.", "fol": "", "prediction": ["all x.(Earth(x) -> RotatesOnTiltedAxis(x))", "all x y.((Earth(x) & TiltedAxis(y)) -> RotatesOn(x,y))", "all x y.((Earth(x) & TiltedAxis(y)) -> Rotates(x,y))", "all x y z.((Earth(x) & TiltedAxis(y) & Earth(z)) -> RotatesOn(x,y,z))", "all x y.((Earth(x) & TippedAxis(y)) -> RotatesOn(x,y))", "all x.((Earth(x) & TiltedAxis(x)) -> RotatesOn(x,y))", "all x.((Earth(x) & TiltedAxis(x)) -> Rotates(x))", "all x y z.((Earth(x) & TippedAxis(y) & Earth(z)) -> RotatesOn(x,y,z))", "all x y z.((Earth(x) & TiltedAxis(y) & Earth(z)) -> RotatesOn(x,z))", "all x y.((Earth(x) & TiedAxis(y)) -> RotatesOn(x,y))", "all x y.((Earth(x) & TidedAxis(y)) -> RotatesOn(x,y))", "all x y z.((Earth(x) & TiltedAxis(y) & Earth(z)) -> Rotates(x,y,z))", "all x y.((Earth(x) & TailedAxis(y)) -> RotatesOn(x,y))", "all x y.((Earth(x) & TippedAxis(y)) -> Rotates(x,y))", "all x y.((Earth(x) & TipedAxis(y)) -> RotatesOn(x,y))", "all x.(TiltedAxis(x) -> EarthRotates(x))"]}
{"id": "entailmentbank_validation_22", "nl": "earth is a planet that rotates on its tilted axis.", "fol": "", "prediction": ["all x.(Earth(x) -> (Planet(x) & RotatesOnTiltedAxis(x)))", "all x.(Earth(x) -> (Planet(x) & RotatesOnTiltedAxis(x)))", "all x.(Earth(x) -> RotatesOnTiltedAxis(x))", "all x y.((Earth(x) & Planet(y)) -> RotatesOnTiltedAxis(x,y))", "all x y.((Planet(x) & Earth(y)) -> RotatesOnTiltedAxis(x,y))", "all x.(Earth(x) -> (Planet(x) & TiltedAxis(x)))", "all x.((Planet(x) & RotatesOnTiltedAxis(x)) -> Earth(x))", "all x.((Planet(x) & TiltedAxis(x)) -> RotatesOn(x,y))", "all x.(Earth(x) -> (Planet(x) & TiltedAxis(x)))", "all x y z.((Earth(x) & Planet(y) & TiltedAxis(z)) -> RotatesOn(x,y,z))", "all x y.((Earth(x) & Planet(y)) -> RotatesOnTiltedAxis(y,x))", "all x y.((Planet(x) & Planet(y)) -> RotatesOnTiltedAxis(x,y))", "all x.(Earth(x) -> RotatesOnTiltedAxis(x))", "all x.((Earth(x) & RotatesOnTiltedAxis(x)) -> Planet(x))", "all x.((Planet(x) & TiltedAxis(x)) -> RotatesOn(x,TiltedAxis))", "all x y.((Earth(x) & Planet(y)) -> RotatesOnTiltedAxis(y))"]}
{"id": "entailmentbank_validation_23", "nl": "rotation is the circular movement of an object around a center / axis.", "fol": "", "prediction": ["all x y.((Rotation(x) & Object(y)) -> CircularMovementAroundCenterAxis(x,y))", "all x y z.((Rotation(x) & Object(y) & CenterAxis(z)) -> CircularMovementAround(x,y,z))", "all x y z.((Rotation(x) & Object(y) & Center(z)) -> CircularMovementAroundAxis(x,y,z))", "all x y z.((Rotation(x) & Object(y) & CenterAxis(z)) -> CircularMovement(x,y,z))", "all x y z.((Rotation(x) & Object(y) & Center(z) & Axis(z)) -> CircularMovementAround(x,y,z))", "all x y z.((Rotation(x) & Object(y) & Center(z)) -> CircularMovement(x,y,z))", "all x.(Rotation(x) -> (CircularMovement(x) & ObjectAroundCenterAxis(x)))", "all x y z.((Rotation(x) & Object(y) & Center(z)) -> CircularMovementAround(x,y,z))", "all x y.((Rotation(x) & Object(y) & CenterAxis(y)) -> CircularMovementAround(x,y))", "all x.(Rotation(x) -> (CircularMovementOfObject(x) & AroundCenterAxis(x)))", "all x y z.((Rotation(x) & Object(y) & CenterAxis(z)) -> CircularMovementAround(x,y,z))", "all x y z.((Rotation(x) & Object(y) & Center(z) & Axis(z)) -> CircularMovement(x,y,z))", "all x y.((Rotation(x) & Object(y) & CenterAxis(y)) -> CircularMovement(x,y))", "all x y.((Rotation(x) & Object(y)) -> CircularMovementAroundCenterAxis(x,y))", "all x y z.((Rotation(x) & Object(y) & Center(z)) -> CircularMovementAroundAxis(x,y,z))", "all x y z.((Rotation(x) & Object(y) & CenterAxis(z)) -> CircularMovement(x,y,z))"]}
{"id": "entailmentbank_validation_24", "nl": "a planet rotating causes cycles of day and night on that planet.", "fol": "", "prediction": ["all x.((Planet(x) & Rotating(x)) -> CausesCyclesOfDayAndNight(x))", "all x y.((Planet(x) & Rotating(x) & Planet(y)) -> CausesCyclesOfDayAndNight(x,y))", "all x y.((Planet(x) & Rotating(x)) -> CausesCyclesOfDayAndNight(x,y))", "all x y z.((Planet(x) & Rotating(x) & Day(y) & Night(z)) -> CausesCycles(x,y,z))", "all x.((Planet(x) & Rotating(x)) -> CausesCycles(x,Day,Night))", "all x.((Planet(x) & Rotating(x)) -> (CausesDay(x) & CausesNight(x)))", "all x.((Planet(x) & Rotating(x)) -> CausesDayAndNightCycles(x))", "all x y.((Planet(x) & Rotating(x) & Planet(y)) -> (CausesCycles(x,y) & CausesCycles(x,y)))", "all x y.((Planet(x) & Planet(y) & Rotating(x,y)) -> CausesCyclesOfDayAndNight(x,y))", "all x y.((Planet(x) & Rotating(x,y)) -> CausesCyclesOfDayAndNight(x,y))", "all x y.((Planet(x) & Rotating(x) & Planet(y)) -> CausesCycles(x,y))", "all x y.((Planet(x) & Rotating(x)) -> (CausesCycles(x,y) & CausesCycles(x,y)))", "all x y.((Planet(x) & Rotating(x)) -> CausesCycles(x,y))", "all x y.((Planet(x) & Rotating(y)) -> CausesCyclesOfDayAndNight(x,y))", "all x y.((Planet(x) & Rotating(x) & Planet(y)) -> CausesCycle(x,y))", "all x y z.((Planet(x) & Rotating(x) & Day(y) & Night(z)) -> CausesCycle(x,y,z))"]}
{"id": "entailmentbank_validation_25", "nl": "earth rotating on its axis causes the cycle of day and night on earth.", "fol": "", "prediction": ["all x.((Earth(x) & RotatingOnAxis(x)) -> CausesCycleOfDayAndNight(x))", "all x.((Earth(x) & RotatingOnAxis(x)) -> (CycleOfDayAndNight(x)))", "all x.((Earth(x) & RotatingOnAxis(x)) -> (CycleOfDay(x) & CycleOfNight(x)))", "all x.((Earth(x) & RotatingOnAxis(x)) -> CausesCycle(x,Day,Night))", "all x.((Earth(x) & RotatingOnAxis(x)) -> CausesCycleOfDayAndNightOnEarth(x))", "all x y.((Earth(x) & Earth(y) & RotatingOnAxis(x,y)) -> CausesCycleOfDayAndNight(x,y))", "all x.((Earth(x) & RotatesOnAxis(x)) -> CausesCycleOfDayAndNight(x))", "all x y.((Earth(x) & RotatingOnAxis(x,y)) -> (CycleOfDayAndNight(y)))", "all x y.((Earth(x) & RotatingOnAxis(x,y)) -> CausesCycleOfDayAndNight(x))", "all x y.((Earth(x) & Earth(y) & RotatingOnAxis(x,y)) -> (CycleOfDayAndNight(x)))", "all x y.((Earth(x) & Earth(y)) -> (RotatingOnAxis(x,y) & CausesCycleOfDayAndNight(x,y)))", "all x y.((Earth(x) & Earth(y) & RotatingOnAxis(x,y)) -> CausesCycleOfDayAndNight(x))", "all x y z.((Earth(x) & RotatingOnAxis(x,y) & Earth(z)) -> (CycleOfDayAndNight(x,z)))", "all x y.((Earth(x) & Earth(y)) -> (RotatingOnAxis(x,y) & CausesCycleOfDayAndNight(x)))", "all x y.((Earth(x) & RotatingOnAxis(x,y)) -> (CycleOfDayAndNight(x)))", "all x y.((Earth(x) & Earth(y) & RotatingOnAxis(x,y)) -> (CycleOfDay(x) & CycleOfNight(x)))"]}
{"id": "entailmentbank_validation_26", "nl": "gradens contain plants.", "fol": "", "prediction": ["all x.(Graden(x) -> ContainsPlants(x))", "all x y.((Graden(x) & Plant(y)) -> Contains(x,y))", "all x.(Graden(x) -> ContainsPlant(x))", "all x.(GradeNumber(x) -> ContainsPlants(x))", "all x y z.((Graden(x) & Plant(y) & Plant(z)) -> Contains(x,y,z))", "all x y z.((Graden(x) & Plant(y) & Grade(z)) -> Contains(x,y,z))", "all x y z.((Graden(x) & Plant(y) & Graden(z)) -> Contains(x,y,z))", "all x y.((Gradein(x) & Plant(y)) -> Contains(x,y))", "all x y.((Gradeen(x) & Plant(y)) -> Contains(x,y))", "all x y.((Graden(x) & Plant(y)) -> Contain(x,y))", "all x y.((Graden(x) & Plant(y) & Contains(x,y)) -> Contains(x,y))", "all x.(Grade(x) -> ContainsPlants(x))", "all x.(Ggraden(x) -> ContainsPlants(x))", "all x y.((Graden(x) & Plant(y)) -> Incorporates(x,y))", "all x y z.((Graden(x) & Plant(y) & Plant(z)) -> Contains(x,y))", "all x.(Graden(x) -> (ContainsPlants(x) & ContainsPlants(x)))"]}
{"id": "entailmentbank_validation_27", "nl": "gardens are located outside.", "fol": "", "prediction": ["all x.(Garden(x) -> LocatedOutside(x))", "all x.(Garden(x) -> LocationOutside(x))", "all x.(Garden(x) -> Outside(x))", "all x.(Garden(x) -> LocatedOutside(x))", "all x.(Garden(x) -> (LocatedOutside(x) | LocatedOutside(x)))", "all x y.((Garden(x) & Garden(y)) -> LocatedOutside(x,y))", "all x y.((Garden(x) & Outside(y)) -> Located(x,y))", "all x.(Garden(x) -> (LocatedOutside(x) & LocatedOutside(x)))", "all x.(Garden(x) -> (LocatedOutside(x) | LocatedInside(x)))", "all x y.((Garden(x) & Outside(y)) -> Located(x,y))", "all x.(Garden(x) -> exists y.(Outdoor(y) & LocatedIn(x,y)))", "all x y.((Garden(x) & Garden(y)) -> LocatedOutside(x,y))", "all x.(Garden(x) -> (LocatedOutside(x) & LocatedInside(x)))", "all x y.((Garden(x) & Outside(y)) -> LocatedIn(x,y))", "all x.(Garden(x) -> exists y.(Outdoor(y) & LocatedIn(x,y))))", "all x y.((Garden(x) & Garden(y)) -> LocatedOutside(x))"]}
{"id": "entailmentbank_validation_28", "nl": "the plants in the gardens are located outside.", "fol": "", "prediction": ["all x y.((Plant(x) & Garden(y)) -> LocatedOutside(x,y))", "all x y.((Plant(x) & Garden(y)) -> Outside(x,y))", "all x y z.((Plant(x) & Garden(y) & Garden(z)) -> LocatedOutside(x,y,z))", "all x y.((Garden(x) & Plant(y)) -> LocatedOutside(y))", "all x y.((Garden(x) & Plant(y)) -> LocatedOutside(y,x))", "all x y.((Plant(x) & Garden(y) & InGarden(x,y)) -> LocatedOutside(x))", "all x.((Plant(x) & InGarden(x)) -> LocatedOutside(x))", "all x y.((Garden(x) & Plant(y) & InGarden(x,y)) -> LocatedOutside(y))", "all x y.((Plant(x) & Garden(y)) -> LocatedOutside(x,y))", "all x.((Plant(x) & InGardens(x)) -> LocatedOutside(x))", "all x y z.((Plant(x) & Garden(y) & Garden(z)) -> Outside(x,y,z))", "all x y.((Garden(x) & Plant(y)) -> Outside(y))", "all x y.((Plant(x) & Garden(y)) -> Outside(x))", "all x y z.((Garden(x) & Plant(y) & Garden(z)) -> LocatedOutside(y,z))", "all x.(Garden(x) -> (PlantsInGarden(x) & LocatedOutside(x)))", "all x.((Plant(x) & Garden(x)) -> LocatedOutside(x))"]}
{"id": "entailmentbank_validation_29", "nl": "if something is outside during the day then that something will receive sunlight.", "fol": "", "prediction": ["all x.((Outside(x) & Day(x)) -> ReceivesSunlight(x))", "all x.((OutsideDuringDay(x) & OutsideDuringDay(x)) -> ReceivesSunlight(x))", "all x.((Outdoor(x) & Day(x)) -> ReceivesSunlight(x))", "all x.((OutsideDuringDay(x) & Day(x)) -> ReceivesSunlight(x))", "all x y.((Outside(x) & Day(y)) -> ReceivesSunlight(x,y))", "all x.((OutsideDuringDay(x) & DuringDay(x)) -> ReceivesSunlight(x))", "all x y.((Exterior(x) & Day(y) & Outside(x,y)) -> ReceivesSunlight(x))", "all x.((Exterior(x) & Day(x)) -> ReceivesSunlight(x))", "all x y.((Outdoor(x) & Day(y)) -> ReceivesSunlight(x,y))", "all x.(OutsideDuringDay(x) -> ReceivesSunlight(x))", "all x y.((Outside(x) & Day(y) & Outside(x,y)) -> ReceivesSunlight(x))", "all x y.((Outside(x) & Day(y)) -> ReceivesSunlight(x))", "all x y.((Exterior(x) & Day(y)) -> ReceivesSunlight(x,y))", "all x y.((Exterior(x) & Day(y) & Outside(x,y)) -> ReceivesSunlight(x,y))", "all x.((OutsideDuringDay(x) & ReceivesSunlight(x)) -> OutsideDuringDay(x))", "all x.((OutsideDuringDay(x)) -> ReceivesSunlight(x))"]}
{"id": "entailmentbank_validation_30", "nl": "the plants in the gardens will receive sunlight during the day.", "fol": "", "prediction": ["all x y.((Plant(x) & Garden(y)) -> ReceivesSunlight(x,y))", "all x y.((Plant(x) & Garden(y)) -> ReceivesSunlightDuringDay(x,y))", "all x y z.((Plant(x) & Garden(y) & Day(z)) -> ReceivesSunlight(x,y,z))", "all x.((Plant(x) & InGardens(x)) -> ReceivesSunlightDuringDay(x))", "all x y.((Plant(x) & Garden(y) & InGarden(x,y)) -> ReceivesSunlightDuringDay(x,y))", "all x.((Plant(x) & InGarden(x)) -> ReceivesSunlightDuringDay(x))", "all x y.((Plant(x) & Garden(y) & InGarden(x,y)) -> ReceivesSunlight(x,y))", "all x.((Plant(x) & InGardens(x)) -> ReceivesSunlight(x))", "all x.((Plant(x) & InGarden(x)) -> ReceivesSunlight(x))", "all x y.((Plant(x) & Garden(y) & InGarden(x,y)) -> ReceivesSunlight(x))", "all x y.((Plant(x) & Garden(y) & InGarden(x,y)) -> ReceivesSunlightDuringDay(x))", "all x y z.((Plant(x) & Garden(y) & Day(z) & InGarden(x,y,z)) -> ReceivesSunlight(x,y,z))", "all x y z.((Plant(x) & Garden(y) & Day(z)) -> ReceivesSunlightDuring(x,y,z))", "all x y z.((Plant(x) & Garden(y) & Garden(z)) -> ReceivesSunlight(x,y,z))", "all x y.((Plant(x) & Garden(y) & ReceivesSunlight(x,y)) -> InGarden(x,y))", "all x y z.((Plant(x) & Garden(y) & Day(z) & InGarden(x,y)) -> ReceivesSunlight(x,z))"]}
{"id": "entailmentbank_validation_31", "nl": "a plant requires sunlight to grow.", "fol": "", "prediction": ["all x.((Plant(x) & RequiresSunlight(x)) -> Grows(x))", "all x.(Plant(x) -> RequiresSunlightToGrow(x))", "all x.(Plant(x) -> RequiresSunlight(x))", "all x y.((Plant(x) & Sunlight(y)) -> RequiresToGrow(x,y))", "all x y.((Plant(x) & Sunlight(y)) -> Requires(x,y))", "all x.((Plant(x) & RequiresSunlight(x)) -> Grow(x))", "all x y.((Plant(x) & Sunlight(y)) -> RequiresForGrowth(x,y))", "all x.((Plant(x) & RequiresSunlightToGrow(x)) -> RequiresSunlight(x))", "all x y z.((Plant(x) & Sunlight(y) & Sunlight(z)) -> RequiresToGrow(x,y,z))", "all x.((Plant(x) & RequiresSunlightToGrow(x)) -> Grow(x))", "all x.((Plant(x) & NeedsSunlight(x)) -> Grows(x))", "all x.((Plant(x) & RequiresSunlightToGrow(x)) -> Grows(x))", "all x y z.((Plant(x) & Sunlight(y) & Sunlight(z)) -> RequiresForGrowth(x,y,z))", "all x y.((Plant(x) & Sunlight(y) & Requires(x,y)) -> Grows(x))", "all x y z.((Plant(x) & Sunlight(y) & Sunlight(z)) -> Requires(x,y,z))", "all x.((Plant(x) & RequiresSunlight(x)) -> CanGrow(x))"]}
{"id": "entailmentbank_validation_32", "nl": "the plants in the gardens will receive sunlight to grow during the day.", "fol": "", "prediction": ["all x y.((Plant(x) & Garden(y)) -> ReceivesSunlight(x,y))", "all x y.((Plant(x) & Garden(y)) -> ReceivesSunlightToGrowDuringDay(x,y))", "all x y.((Plant(x) & Garden(y)) -> ReceivesSunlightToGrow(x,y))", "all x.((Plant(x) & InGardens(x)) -> ReceivesSunlightToGrowDuringDay(x))", "all x y z.((Plant(x) & Garden(y) & Day(z)) -> ReceivesSunlight(x,y,z))", "all x y z.((Plant(x) & Garden(y) & Day(z)) -> ReceivesSunlightToGrow(x,y,z))", "all x y.((Plant(x) & Garden(y) & InGarden(x,y)) -> ReceivesSunlightToGrow(x,y))", "all x y.((Plant(x) & Garden(y) & ReceivesSunlight(x,y)) -> GrowsDuringDay(x,y))", "all x y.((Plant(x) & Garden(y) & InGarden(x,y)) -> ReceivesSunlightToGrowDuringDay(x,y))", "all x y.((Plant(x) & Garden(y)) -> (ReceivesSunlight(x,y) & GrowsDuringDay(x,y)))", "all x.((Plant(x) & InGardens(x)) -> ReceivesSunlight(x))", "all x.((Plant(x) & InGarden(x)) -> ReceivesSunlightToGrowDuringDay(x))", "all x y.((Plant(x) & Garden(y) & InGarden(x,y)) -> ReceivesSunlight(x,y))", "all x.((Plant(x) & InGardens(x)) -> ReceivesSunlightToGrow(x))", "all x y.((Plant(x) & Garden(y) & InGarden(x,y)) -> ReceivesSunlightToGrowDuringDay(x))", "all x y.((Plant(x) & Garden(y)) -> (ReceivesSunlight(x,y) & GrowsDuringDay(x)))"]}
{"id": "entailmentbank_validation_33", "nl": "summer has the most sunlight.", "fol": "", "prediction": ["all x.(Summer(x) -> MostSunlight(x))", "all x.(Summer(x) -> HasMostSunlight(x))", "all x y.((Summer(x) & Summer(y)) -> MostSunlight(x,y))", "all x y.((Summer(x) & Sunlight(y)) -> MostSunlight(x,y))", "all x.((Summer(x) & MostSunlight(x)) -> HasSunlight(x))", "all x y.((Summer(x) & Sunlight(y)) -> HasMost(x,y))", "all x y.((Summer(x) & Summer(y)) -> HasMostSunlight(x,y))", "all x.((Summer(x) & MostSunlight(x)) -> MostSunlight(x))", "all x.((Summer(x) & Sunlight(x)) -> MostSunlight(x))", "all x.(Summer(x) -> Sunlight(x))", "all x.((Summer(x) & MostSunlight(x)) -> Has(x,y))", "all x y.((Summer(x) & Sunlight(y)) -> MostHas(x,y))", "all x.((Summer(x) & MostSunlight(x)) -> Has(x,Sunlight))", "all x.(Summer(x) -> (HasMostSunlight(x)))", "all x.(Summer(x) -> HasMoreSunlight(x))", "all x.(Summer(x) -> MoreSunlight(x))"]}
{"id": "entailmentbank_validation_34", "nl": "the plants in the gardens will receive the most sunlight in summer to grow during the day.", "fol": "", "prediction": ["all x y.((Plant(x) & Garden(y)) -> (ReceivesMostSunlightInSummer(x,y) & GrowsDuringDay(x,y)))", "all x y.((Plant(x) & Garden(y)) -> MostSunlightInSummer(x,y))", "all x y.((Plant(x) & Garden(y) & ReceivesMostSunlightInSummer(x,y)) -> GrowsDuringDay(x,y))", "all x y.((Plant(x) & Garden(y)) -> ReceivesMostSunlightInSummer(x,y))", "all x.((Plant(x) & InGardens(x)) -> MostSunlightInSummer(x))", "all x y.((Plant(x) & Garden(y)) -> (ReceivesMostSunlight(x,y) & GrowsDuringDay(x,y)))", "all x y.((Plant(x) & Garden(y) & InGarden(x,y)) -> ReceivesMostSunlightInSummer(x,y))", "all x y.((Plant(x) & Garden(y) & InGarden(x,y)) -> MostSunlightInSummer(x,y))", "all x.((Plant(x) & InGardens(x)) -> ReceivesMostSunlightInSummer(x))", "all x y.((Plant(x) & Garden(y)) -> (ReceivesMostSunlightInSummer(x,y) & GrowsDuringDay(x)))", "all x y.((Plant(x) & Garden(y) & InGarden(x,y)) -> ReceivesMostSunlightInSummerToGrowDuringDay(x,y))", "all x y.((Plant(x) & Garden(y) & ReceivesMostSunlight(x,y)) -> GrowsDuringDay(x,y))", "all x y.((Plant(x) & Garden(y)) -> (ReceivesMostSunlight(x,y) & GrowsDuringDay(x)))", "all x.((Plant(x) & InGardens(x)) -> MostSunlightInSummerToGrowDuringDay(x))", "all x y.((Plant(x) & Garden(y)) -> ReceivesMostSunlightInSummerToGrowDuringDay(x,y))", "all x y.((Plant(x) & Garden(y) & InGarden(x,y)) -> MostSunlightInSummerToGrowDuringDay(x,y))"]}
{"id": "entailmentbank_validation_35", "nl": "andy lives in southern hemisphere.", "fol": "", "prediction": ["andy lives in southern hemisphere.", "all x.(Andy(x) -> LivesInSouthernHemisphere(x))", "all x.(Andy(x) -> LivesInSouthernHemisphere(x))", "all x.(Andy(x) -> LivesInSouthHemisphere(x))", "all x.(Andy(x) -> LivesInSouthernHemispheric(x))", "all x.(Andy(x) -> LivesInSouthernHemispheric(x))", "(LivesInSouthernHemisphere(Andy) & -LivesInSouthernHemisphere(Andy))", "(LivesInSouthernHemisphere(Andy) -> LivesInSouthernHemisphere(Andy))", "andy lives in southern Hemisphere.", "(LivesInSouthernHemisphere(andy) -> LivesInSouthernHemisphere(andy))", "andy lives in southernHemisphere.", "andy lives in southernHemisphere(andy)", "(LivesInSouthernHemisphere(Andy) & -LivesInSouthernHemisphere(Andy))", "(LivesInSouthernHemisphere(Andy) & LivesInSouthernHemisphere(Andy))", "(LivesInSouthernHemisphere(andy) -> LivesInSouthernHemisphere(andy)))", "andy lives in southernHemisphere(Andy)"]}
{"id": "entailmentbank_validation_36", "nl": "it is august.", "fol": "", "prediction": ["all x.(Autumn(x) -> -Autumn(x))", "all x.(Autumn(x) -> Is(x,y))", "all x.(Autumn(x) -> IsAutumn(x))", "all x.(Autumn(x) -> Summer(x))", "all x.(Autumn(x) -> -(Autumn(x) & -Autumn(x)))", "all x.(Autumn(x) -> -(Autumn(x) | August(x)))", "all x.(Autumn(x) -> -(Autumn(x) & -Autumn(x))))", "all x.(Autumn(x) -> August(x))", "all x.(Autumn(x) -> -(Autumn(x) | Autumn(x))))", "all x.(Autumn(x) ->.", "all x.(Autumn(x) -> -(Autumn(x) | August(x))))", "all x.(Autumn(x) -> LocatedIn(x,Autumn))", "all x.((Autumn(x) & August(x)) -> -Autumn(x))", "all x.(Autumn(x) -> -(Autumn(x) | -Autumn(x)))", "all x.(Autumn(x) -> -(Autumn(x) | -Autumn(x))))", "all x.(Autumn(x) -> Is(x,y))"]}
{"id": "entailmentbank_validation_37", "nl": "august is during the winter in the southern hemisphere.", "fol": "", "prediction": ["all x y.((Autumn(x) & SouthernHemisphere(y)) -> Winter(x,y))", "all x.((Autumn(x) & SouthernHemisphere(x)) -> Winter(x))", "all x y.((August(x) & SouthernHemisphere(y)) -> Winter(x,y))", "all x.((August(x) & SouthernHemisphere(x)) -> Winter(x))", "all x y z.((Autumn(x) & SouthernHemisphere(y) & SouthernHemisphere(z)) -> Winter(x,y,z))", "all x y.((Autumn(x) & SouthernHemisphere(y)) -> DuringWinter(x,y))", "all x y.((Autumn(x) & SouthernHemisphere(y)) -> WinterIn(x,y))", "all x y.((Augment(x) & SouthernHemisphere(y)) -> Winter(x,y))", "all x.(Autumn(x) -> WinterInSouthernHemisphere(x))", "all x.(Autumn(x) -> WinterInSouthernHemisphere(x))", "all x y z.((Autumn(x) & SouthernHemisphere(y) & SouthernHemisphere(z)) -> DuringWinter(x,y,z))", "all x y z.((Autumn(x) & SouthernHemisphere(y) & SouthernHemisphere(z)) -> WinterIn(x,y,z))", "all x y.((August(x) & SouthernHemisphere(y)) -> DuringWinter(x,y))", "all x y.((August(x) & SouthernHemisphere(y)) -> WinterIn(x,y))", "all x.((Autumn(x) & SouthernHemisphere(x)) -> DuringWinter(x))", "all x.((Autumn(x) & SouthernHemisphere(x)) -> WinterInHemisphere(x))"]}
{"id": "entailmentbank_validation_38", "nl": "andy will experience winter in southern hemisphere in august.", "fol": "", "prediction": ["all x y.((Andy(x) & SouthernHemisphere(y)) -> ExperiencesWinter(x,y))", "andy will experience winter in southern hemisphere in august.", "all x y.((Andy(x) & SouthernHemisphere(y)) -> ExperiencesWinterInAug(x,y))", "all x y.((Andy(x) & SouthernHemispheric(y)) -> ExperiencesWinter(x,y))", "all x y.((Andy(x) & SouthernHemisphere(y)) -> ExperiencesWinterInAutumn(x,y))", "all x y z.((Andy(x) & SouthernHemisphere(y) & Winter(z)) -> ExperiencesInAutumn(x,y,z))", "all x y.((Andy(x) & SouthernHemispheric(y)) -> ExperiencesWinterInAug(x,y))", "all x.(Andy(x) -> ExperiencesWinterInSouthernHemisphere(x))", "andy experiences winter in southern hemisphere in august.", "all x y z.((Andy(x) & SouthernHemisphere(y) & Winter(z)) -> ExperiencesInAug(x,y,z))", "all x y.((Andy(x) & SouthernHemisphere(y)) -> ExperiencesWinterInAugust(x,y))", "all x y.((Andy(x) & SouthernHemispheric(y)) -> ExperiencesWinterInAutumn(x,y))", "all x y.((Andy(x) & SouthernHemisphere(y)) -> ExperiencesWinterInAugust(x,y))", "all x y.((Andy(x) & SouthernHemisphere(y)) -> ExperiencesWinterIn(x,y))", "all x.(Andy(x) -> ExperiencesWinterInSouthernHemisphere(x))", "all x y.((Andy(x) & SouthernHemisphere(y)) -> WinterInAug(x,y))"]}
{"id": "entailmentbank_validation_39", "nl": "the sun is a kind of star.", "fol": "", "prediction": ["all x.(Sun(x) -> Star(x))", "all x y.((Sun(x) & Star(y)) -> Star(x))", "all x y.((Sun(x) & Star(y)) -> Is(x,y))", "all x y.((Sun(x) & Star(y)) -> Star(x,y))", "all x y.((Sun(x) & Star(y)) -> Like(x,y))", "exists x.(Sun(x) & Star(x))", "all x.(Sun(x) -> Star(x))", "all x.((Sun(x) & Star(x)) -> Star(x))", "all x y.((Sun(x) & Star(y)) -> KindOf(x,y))", "all x y.((Sun(x) & Star(y)) -> TypeOf(x,y))", "all x y.((Sun(x) & Star(y)) -> SortOf(x,y))", "all x y.((Sun(x) & Star(y)) -> HasSun(x,y))", "all x.((Sun(x) & Star(x)) -> Is(x,y))", "all x y.((Sun(x) & Star(y)) -> IsStar(x,y))", "all x y.((Sun(x) & Star(y)) -> InSun(x,y))", "all x y.((Sun(x) & Star(y)) -> Has(x,y))"]}
{"id": "entailmentbank_validation_40", "nl": "the earth revolves around the sun.", "fol": "", "prediction": ["all x y.((Earth(x) & Sun(y)) -> RevolvesAround(x,y))", "all x y.((Earth(x) & Sun(y)) -> RevolvesAround(x,y))", "all x y z.((Earth(x) & Sun(y) & Sun(z)) -> RevolvesAround(x,y,z))", "all x y z.((Earth(x) & Sun(y) & Sun(z)) -> RevolvesAround(x,y,z))", "all x y z.((Earth(x) & Sun(y) & Earth(z)) -> RevolvesAround(x,y,z))", "all x y z.((Earth(x) & Sun(y) & Earth(z)) -> RevolvesAround(x,y,z))", "all x.(Earth(x) -> RevolvesAroundSun(x))", "all x y.((Earth(x) & Sun(y)) -> RevolutesAround(x,y))", "all x y.((Earth(x) & Sun(y)) -> RotatesAround(x,y))", "all x.(Earth(x) -> RevolvesAroundSun(x))", "all x y z.((Earth(x) & Sun(y) & Sun(z)) -> RevolvesAround(x,z))", "all x y z.((Earth(x) & Sun(y) & Sun(z)) -> RevolversAround(x,y,z))", "all x y.((Earth(x) & Sun(y)) -> RevolveAround(x,y))", "all x y z.((Earth(x) & Sun(y) & Sun(z)) -> RevolutesAround(x,y,z))", "all x y.((Earth(x) & Sun(y)) -> RevolversAround(x,y))", "all x y.((Earth(x) & Sun(y)) -> RevoltsAround(x,y))"]}
{"id": "entailmentbank_validation_41", "nl": "earth revolving the sun is an example of a planet revolving around its star.", "fol": "", "prediction": ["all x.((Earth(x) & RevolvingSun(x)) -> PlanetRevolvingAroundStar(x))", "all x.((Earth(x) & RevolvesSun(x)) -> PlanetRevolvingAroundStar(x))", "all x y.((Earth(x) & Sun(y) & Revolving(x,y)) -> PlanetRevolvingAroundStar(x))", "all x y.((Earth(x) & Sun(y) & Revolving(x,y)) -> PlanetRevolvingAroundStar(x,y))", "all x y.((Earth(x) & Sun(y)) -> RevolvingAround(x,y))", "all x y z.((Earth(x) & Sun(y) & Star(z)) -> RevolvingAround(x,y,z))", "all x.((Earth(x) & RevolvingSun(x)) -> RevolvingAroundStar(x))", "all x y.((Earth(x) & Sun(y) & Revolving(x,y)) -> RevolvingAroundStar(x,y))", "all x y.((Earth(x) & Sun(y) & Revolving(x,y)) -> RevolvingAroundStar(x))", "all x y.((Earth(x) & Sun(y) & Revolving(x,y)) -> Planet(x))", "all x y.((Earth(x) & Sun(y) & Revolves(x,y)) -> PlanetRevolvingAroundStar(x))", "all x.((Planet(x) & RevolvingSun(x)) -> RevolvingAroundStar(x))", "all x.((Earth(x) & RevolvesSun(x)) -> RevolvingAroundStar(x))", "all x y.((Earth(x) & Sun(y) & Revolving(x,y)) -> RevolvingAround(x,y))", "all x y.((Earth(x) & Sun(y) & Revolves(x,y)) -> PlanetRevolvingAroundStar(x,y))", "all x y.((Earth(x) & Sun(y) & RevolvingAround(x,y)) -> Planet(x))"]}
{"id": "entailmentbank_validation_42", "nl": "a complete revolution / orbit of a planet around its star takes 1 / one planetary year.", "fol": "", "prediction": ["all x.((Planet(x) & CompleteRevolution(x) & Orbit(x)) -> TakesOnePlanetaryYear(x))", "all x y.((Planet(x) & Planet(y) & CompleteRevolutionOrbit(x,y)) -> TakesOnePlanetaryYear(x,y))", "all x.((Planet(x) & CompleteRevolution(x) & CompleteOrbit(x)) -> TakesOnePlanetaryYear(x))", "all x y.((Planet(x) & Planet(y) & CompleteRevolution(x) & CompleteOrbit(x,y)) -> TakesOnePlanetaryYear(x,y))", "all x y.((Planet(x) & Planet(y) & CompleteRevolution(x,y) & Orbit(x,y)) -> TakesOnePlanetaryYear(x,y))", "all x y.((Planet(x) & Planet(y) & CompleteRevolution(x,y) & CompleteOrbit(x,y)) -> TakesOnePlanetaryYear(x,y))", "all x.((Planet(x) & CompleteRevolution(x) & OrbitAroundStar(x)) -> TakesOnePlanetaryYear(x))", "all x y.((Planet(x) & Planet(y) & CompleteRevolution(x,y)) -> OrbitsAroundStar(x,y))", "all x y.((Planet(x) & Planet(y) & CompleteRevolution(x) & CompleteOrbit(x,y)) -> TakesOnePlanetaryYear(x))", "all x y.((Planet(x) & Planet(y) & CompleteRevolution(x) & CompleteOrbit(x)) -> TakesOnePlanetaryYear(x,y))", "all x y.((Planet(x) & Planet(y) & CompleteRevolution(x,y) & Orbit(x,y)) -> TakesOnePlanetaryYear(x))", "all x y.((Planet(x) & Planet(y) & CompleteRevolution(x,y) & CompleteOrbit(x,y)) -> TakesOnePlanetaryYear(x))", "all x y.((Planet(x) & Planet(y) & CompleteRevolutionOrbit(x,y)) -> TakesOnePlanetaryYear(x))", "all x y.((Planet(x) & Planet(y) & CompleteRevolution(x,y)) -> OrbitAroundStar(x,y))", "all x y.((Planet(x) & Planet(y) & CompleteRevolution(x) & Orbit(x,y)) -> TakesOnePlanetaryYear(x,y))", "all x y z.((CompleteRevolution(x) & Orbit(y) & Planet(z) & Star(z)) -> TakesOnePlanetaryYear(x,y,z))"]}
{"id": "entailmentbank_validation_43", "nl": "a complete revolution of earth around the sun takes an earth year.", "fol": "", "prediction": ["all x y.((CompleteRevolutionOfEarth(x) & Sun(y)) -> TakesEarthYear(x,y))", "all x.((RevolutionOfEarth(x) & Sun(x)) -> TakesEarthYear(x))", "all x y.((RevolutionOfEarth(x) & Sun(y)) -> TakesEarthYear(x,y))", "all x y z.((CompleteRevolutionOfEarth(x) & Sun(y) & EarthYear(z)) -> Takes(x,y,z))", "all x y.((Revolution(x) & Earth(y) & Sun(z)) -> TakesEarthYear(x,y,z))", "all x y.((CompleteRevolutionOfEarthAroundSun(x) & EarthYear(y)) -> Takes(x,y))", "all x y.((Revolution(x) & Earth(y) & AroundSun(x,y)) -> TakesEarthYear(x))", "all x y z.((Revolution(x) & Earth(y) & Sun(z)) -> TakesEarthYear(x,y,z))", "all x.((CompleteRevolutionOfEarth(x) & Sun(x)) -> TakesEarthYear(x))", "all x.((Revolution(x) & EarthAroundSun(x)) -> TakesEarthYear(x))", "all x.((RevolutionOfEarth(x) & AroundSun(x)) -> TakesEarthYear(x))", "all x y z.((RevolutionOfEarth(x) & Sun(y) & EarthYear(z)) -> Takes(x,y,z))", "all x y.((Revolution(x) & Earth(y) & AroundSun(x,y)) -> TakesEarthYear(x,y))", "all x y z.((CompleteRevolutionOfEarth(x) & Sun(y) & EarthYear(z)) -> Takes(x,z))", "all x.((CompleteRevolutionOfEarth(x) & AroundSun(x)) -> TakesEarthYear(x))", "all x y.((CompleteRevolutionOfEarth(x) & Sun(y)) -> TakesEarthYear(x))"]}
{"id": "entailmentbank_validation_44", "nl": "earth rotating on its tilted axis occurs once per day.", "fol": "", "prediction": ["all x.((Earth(x) & TiltedAxis(x)) -> OccursOncePerDay(x))", "all x y.((Earth(x) & TiltedAxis(y)) -> OccursOncePerDay(x,y))", "all x.((Earth(x) & TiltedAxis(x)) -> OccursOnePerDay(x))", "all x y.((Earth(x) & TiltedAxis(y)) -> OccursOnePerDay(x,y))", "all x y.((Earth(x) & TiltedAxis(y)) -> RotatesOn(x,y))", "all x y z.((Earth(x) & TiltedAxis(y) & Earth(z)) -> RotatesOn(x,y,z))", "all x.((EarthRotatingOnTiltedAxis(x) & OccursOncePerDay(x)) -> RotatesOnTiltedAxis(x))", "all x.(EarthRotatingOnTiltedAxis(x) -> OccursOncePerDay(x))", "all x y.((Earth(x) & TiltedAxis(y)) -> OccursOn(x,y))", "all x y.((Earth(x) & TippedAxis(y)) -> OccursOncePerDay(x,y))", "all x.((EarthRotation(x) & TiltedAxis(x)) -> OccursOncePerDay(x))", "all x y.((Earth(x) & TiltedAxis(y)) -> OccursOncePerDay(x))", "all x.((Earth(x) & TippedAxis(x)) -> OccursOncePerDay(x))", "all x.(TiltedAxis(x) -> EarthRotatingOn(x,y))", "all x y.((Earth(x) & TiltedAxis(y)) -> OccursOnce(x,y))", "all x.(TiltedAxis(x) -> EarthRotatingOn(x,Day))"]}
{"id": "entailmentbank_validation_45", "nl": "the earth is a planet that rotates on its tilted axis once per day.", "fol": "", "prediction": ["all x.(Earth(x) -> (Planet(x) & RotatesOnTiltedAxis(x) & OncePerDay(x)))", "all x.(Earth(x) -> (Planet(x) & RotatesOnTiltedAxis(x)))", "all x.(Earth(x) -> (Planet(x) & RotatesOnTiltedAxis(x) & OncePerDay(x)))", "all x y.((Earth(x) & Planet(y)) -> RotatesOnTiltedAxis(x,y))", "all x.(Earth(x) -> RotatesOnTiltedAxis(x))", "all x.(Earth(x) -> (Planet(x) & RotatesOnTiltedAxis(x)))", "all x y.((Earth(x) & Planet(y)) -> RotatesOnTiltedAxis(y,x))", "all x y.((Planet(x) & Earth(y)) -> RotatesOnTiltedAxis(x,y))", "all x.(Earth(x) -> (Planet(x) & RotatesOnTiltedAxis(x) & TwistedAxis(x)))", "all x.((Planet(x) & RotatesOnTiltedAxis(x)) -> Earth(x))", "all x.((Earth(x) & RotatesOnTiltedAxis(x)) -> RotatesOnTiltedAxis(x))", "all x y z.((Earth(x) & Planet(y) & TiltedAxis(z)) -> RotatesOn(x,y,z))", "all x.(Earth(x) -> (Planet(x) & RotatesOnTiltedAxis(x) & TwistedAxis(x)))", "all x y.((Earth(x) & Planet(y)) -> (RotatesOnTiltedAxis(x,y) & OncePerDay(y)))", "all x y.((Earth(x) & Planet(y)) -> (RotatesOnTiltedAxis(y,x) & OncePerDay(y)))", "all x.(Earth(x) -> (Planet(x) & RotatesOnTiltedAxis(x) & OnePerDay(x)))"]}
{"id": "entailmentbank_validation_46", "nl": "the earth rotating on its tilted axis causes the cycles of day and night on earth.", "fol": "", "prediction": ["all x.((Earth(x) & RotatingOnTiltedAxis(x)) -> CausesCyclesOfDayAndNight(x))", "all x y.((EarthRotatingOnTiltedAxis(x) & Earth(y)) -> CausesCyclesOfDayAndNight(x,y))", "all x y.((Earth(x) & TiltedAxis(y)) -> CausesCyclesOfDayAndNight(x,y))", "all x y.((Earth(x) & TiltedAxis(x) & Earth(y)) -> CausesCyclesOfDayAndNight(x,y))", "all x.((Earth(x) & RotatingOnTiltedAxis(x)) -> CausesCyclesOfDayAndNightOnEarth(x))", "all x.(TiltedAxis(x) -> (EarthRotatingOnTiltedAxis(x) & CausesCyclesOfDayAndNight(x)))", "all x y.((EarthRotatingOnTiltedAxis(x) & Earth(y)) -> CausesCycles(x,y))", "all x y.((Earth(x) & TiltedAxis(y) & Earth(x)) -> CausesCyclesOfDayAndNight(x,y))", "all x.((Earth(x) & TiltedAxis(x)) -> CausesCyclesOfDayAndNight(x))", "all x.((Earth(x) & RotatingOnTiltedAxis(x)) -> CausesCycles(x,Day,Night))", "all x.((EarthRotatingOnTiltedAxis(x) & CausesCyclesOfDayAndNight(x)) -> CausesCyclesOfNight(x))", "all x.((EarthRotatingOnTiltedAxis(x) & CausesCyclesOfDayAndNight(x)) -> CausesCyclesOnEarth(x))", "all x y.((Earth(x) & TiltedAxis(y)) -> CausesCycles(x,y))", "all x.((EarthRotatingOnTiltedAxis(x) & CausesCycles(x,Day,Night)) -> CausesCycles(x,Night))", "all x y.((Earth(x) & TiltedAxis(x) & Earth(y)) -> CausesCycles(x,y))", "all x.((EarthRotatingOnTiltedAxis(x) & CausesCyclesOfDayAndNight(x)) -> Earth(x))"]}
{"id": "entailmentbank_validation_47", "nl": "mercury is located in the solar system.", "fol": "", "prediction": ["all x.(Mercury(x) -> LocatedInSolarSystem(x))", "all x y.((Mercury(x) & SolarSystem(y)) -> LocatedIn(x,y))", "all x.(Mercury(x) -> LocatedInSolarSystem(x))", "all x y.((Mercury(x) & SolarSystem(y)) -> LocatedIn(x,y))", "all x y z.((Mercury(x) & SolarSystem(y) & SolarSystem(z)) -> LocatedIn(x,y,z))", "all x y z.((Mercury(x) & SolarSystem(y) & SolarSystem(z)) -> LocatedIn(x,y,z))", "all x.(Mercury(x) -> LocalizedInSolarSystem(x))", "all x y z.((Mercury(x) & SolarSystem(y) & SolarSystem(z)) -> LocatesIn(x,y,z))", "all x.(Mercury(x) -> SolarSystem(x))", "all x y.((Mercury(x) & SolarSystem(y)) -> LocatesIn(x,y))", "all x y.((Mercury(x) & SolarSystem(y)) -> LocalizedIn(x,y))", "all x y z.((Mercury(x) & SolarSystem(y) & SolarSystem(z)) -> LocalizedIn(x,y,z))", "all x.(Mercury(x) -> FoundInSolarSystem(x))", "all x y z.((Mercury(x) & SolarSystem(y) & SolarSystem(z)) -> FoundIn(x,y,z))", "all x y z.((Mercury(x) & SolarSystem(y) & SolarSystem(z)) -> LocatedIn(x,y))", "all x.(Mercury(x) -> (LocatedInSolarSystem(x) & LocatedInSolarSystem(x)))"]}
{"id": "entailmentbank_validation_48", "nl": "mercury is a kind of planet.", "fol": "", "prediction": ["all x.(Mercury(x) -> Planet(x))", "all x.(Quecksilber(x) -> Planet(x))", "all x.(Quercus(x) -> Planet(x))", "all x.(Quecksilver(x) -> Planet(x))", "all x.(Mercury(x) -> Planet(x))", "all x.(M mercury(x) -> Planet(x))", "all x.(Methane(x) -> Planet(x))", "all x.(Quercetin(x) -> Planet(x))", "all x.(McCarbon(x) -> Planet(x))", "all x.(Mixture(x) -> Planet(x))", "all x.(Quarry(x) -> Planet(x))", "all x y.((Mercury(x) & Planet(y)) -> Planet(x))", "all x.(Mercury(x) -> Planet(x))", "all x.(HasPlanet(x) -> Mercury(x))", "all x.(Microwave(x) -> Planet(x))", "all x.(Magnetic(x) -> Planet(x))"]}
{"id": "entailmentbank_validation_49", "nl": "mercury is a planet in the solar system.", "fol": "", "prediction": ["all x.(Mercury(x) -> PlanetInSolarSystem(x))", "all x.(Quercus(x) -> PlanetInSolarSystem(x))", "all x y.((Mercury(x) & SolarSystem(y)) -> Planet(x,y))", "all x.(Mercury(x) -> PlanetInSolarSystem(x))", "all x.(Mercury(x) -> (Planet(x) & InSolarSystem(x)))", "all x y.((Mercury(x) & SolarSystem(y)) -> PlanetIn(x,y))", "all x y.((Mercury(x) & SolarSystem(y)) -> PlanetInSolarSystem(x,y))", "all x.(Mercury(x) -> PlanetInSolarSystem(x))", "all x.(Mercury(x) -> Planet(x))", "all x y.((Quercus(x) & SolarSystem(y)) -> Planet(x,y))", "all x y.((Mercury(x) & SolarSystem(y)) -> PlanetInSystem(x,y))", "all x.(McCarbon(x) -> PlanetInSolarSystem(x))", "all x.(Quecksilber(x) -> PlanetInSolarSystem(x))", "all x.(Mercury(x) -> (PlanetInSolarSystem(x) & InSolarSystem(x)))", "all x.(M mercury(x) -> PlanetInSolarSystem(x))", "all x y.((Quercus(x) & SolarSystem(y)) -> PlanetInSolarSystem(x,y))"]}
{"id": "entailmentbank_validation_50", "nl": "planets in the solar system orbit the sun.", "fol": "", "prediction": ["all x.((Planet(x) & SolarSystem(x)) -> OrbitsSun(x))", "all x y.((Planet(x) & SolarSystem(y)) -> Orbits(x,y))", "all x y.((Planet(x) & SolarSystem(y)) -> OrbitsSun(x,y))", "all x y z.((Planet(x) & SolarSystem(y) & Sun(z)) -> Orbits(x,y,z))", "all x y.((Planet(x) & SolarSystem(y)) -> OrbitSun(x,y))", "all x y z.((Planet(x) & SolarSystem(y) & SolarSystem(z)) -> Orbits(x,y,z))", "all x.((Planet(x) & InSolarSystem(x)) -> OrbitsSun(x))", "all x.((Planet(x) & SolarSystem(x)) -> Orbits(x,sun))", "all x.((Planet(x) & SolarSystem(x)) -> OrbitSun(x))", "all x.(Planet(x) -> OrbitsSun(x))", "all x y.((Planet(x) & SolarSystem(y) & InSolarSystem(x,y)) -> OrbitsSun(x,y))", "all x y.((Planet(x) & SolarSystem(y) & InSolarSystem(x,y)) -> Orbits(x,y))", "all x y z.((Planet(x) & SolarSystem(y) & Sun(z)) -> Orbits(x,z))", "all x y.((Planet(x) & SolarSystem(y)) -> Orbit(x,y))", "all x y z.((Planet(x) & SolarSystem(y) & Sun(z)) -> Orbit(x,y,z))", "all x y.((Planet(x) & SolarSystem(y) & InSolarSystem(x,y)) -> OrbitsSun(x))"]}
{"id": "entailmentbank_validation_51", "nl": "mercury is a planet orbits the sun in the solar system.", "fol": "", "prediction": ["all x.(Mercury(x) -> (Planet(x) & OrbitsSun(x)))", "all x.(Mercury(x) -> (Planet(x) & OrbitsSun(x) & InSolarSystem(x)))", "all x.(Mercury(x) -> (Planet(x) & OrbitsSun(x) & SolarSystem(x)))", "all x y z.((Mercury(x) & Sun(y) & SolarSystem(z)) -> Orbits(x,y,z))", "all x y.((Mercury(x) & Sun(y)) -> OrbitsInSolarSystem(x,y))", "all x y z.((Mercury(x) & Sun(y) & SolarSystem(z)) -> OrbitsIn(x,y,z))", "all x.(Mercury(x) -> (Planet(x) & OrbitsSunInSolarSystem(x)))", "all x.(Mercury(x) -> (Planet(x) & OrbitsSun(x)))", "all x y.((Planet(x) & Sun(y)) -> OrbitsInSolarSystem(x,y))", "all x.(Mercury(x) -> (Planet(x) & OrbitsSun(x) & InSolarSystem(x)))", "all x.(Mercury(x) -> (Planet(x) & OrbitsSun(x)))", "all x.(Mercury(x) -> (Planet(x) & OrbitsSun(x) & InSolarSystem(x)))", "all x.(Mercury(x) -> (Planet(x) & OrbitsSun(x) & SolarSystem(x)))", "all x.(Mercury(x) -> (Planet(x) & OrbitsSun(x) & SolarSystem(x)))", "all x.(Quercus(x) -> (Planet(x) & OrbitsSun(x)))", "all x.(Quercus(x) -> (Planet(x) & OrbitsSun(x) & InSolarSystem(x)))"]}
{"id": "entailmentbank_validation_52", "nl": "a complete orbit of mercury around the sun takes one mercury year.", "fol": "", "prediction": ["all x.((CompleteOrbitOfMercury(x) & AroundSun(x)) -> TakesOneMercuryYear(x))", "all x y.((CompleteOrbitOfMercury(x) & Sun(y)) -> TakesOneMercuryYear(x,y))", "all x.((CompleteOrbitOfMercury(x) & Sun(x)) -> TakesOneMercuryYear(x))", "all x.((CompleteOrbitOfMercuryAroundSun(x)) -> TakesOneMercuryYear(x))", "all x y.((CompleteOrbitOfMercury(x) & Sun(y)) -> TakesOneMercuryYear(x,y))", "all x y.((CompleteOrbitOfMercury(x,y) & Sun(y)) -> TakesOneMercuryYear(x,y))", "all x.((CompleteOrbitOfMercuryAroundSun(x) & TakesOneMercuryYear(x)) -> TakesOneYear(x))", "all x.((CoralOrbitOfMercury(x) & Sun(x)) -> TakesOneMercuryYear(x))", "all x y.((CompleteOrbitOfMercury(x) & Sun(y)) -> TakesOneMercuryYear(x))", "all x.((CompleteOrbitOfMercury(x) & Sun(x)) -> TakesOneMercuryYear(x))", "all x.(CompleteOrbitOfMercuryAroundSun(x) -> TakesOneMercuryYear(x))", "all x.((CompleteOrbit(x) & MercuryAroundSun(x)) -> TakesOneMercuryYear(x))", "all x y z.((CompleteOrbitOfMercury(x) & Sun(y) & MercuryYear(z)) -> TakesOneYear(x,z))", "all x y.((CompleteOrbitOfMercury(x) & Sun(y)) -> TakesOneMormonYear(x,y))", "all x y z.((CompleteOrbitOfMercury(x) & Sun(y) & MercuryYear(z)) -> TakesOne(x,z))", "all x.((CompleteOrbitOfMercuryAroundSun(x) & TakesOneMercuryYear(x)) -> MercuryYear(x))"]}
{"id": "entailmentbank_validation_53", "nl": "one mercury year is about 88 earth days.", "fol": "", "prediction": ["all x.(MercuryYear(x) -> EarthDays(x,88))", "all x.(MercuryYear(x) -> EarthDay(x,88))", "all x.(MormonYear(x) -> EarthDays(x,88))", "all x.(QuercusYear(x) -> EarthDays(x,88))", "all x.(QuarryYear(x) -> EarthDays(x,88))", "all x.(MercuryYear(x) -> EarthDays(x,88))", "all x.(MormonYear(x) -> EarthDay(x,88))", "all x.(MercuryYear(x) -> EarthDays(x,88))", "all x.((MercuryYear(x) & EarthDay(x,88)) -> MercuryYear(x))", "all x.((MercuryYear(x) & EarthDays(x)) -> About88(x))", "all x.((MercuryYear(x) & EarthDay(x)) -> About88(x))", "all x.(QuercetinYear(x) -> EarthDays(x,88))", "all x y.((MercuryYear(x) & EarthDay(y)) -> About88(x,y))", "all x.(GoldenYear(x) -> EarthDays(x,88))", "all x y.((MercuryYear(x) & EarthDay(y)) -> About(x,y))", "all x.(QuercusYear(x) -> EarthDay(x,88))"]}
{"id": "entailmentbank_validation_54", "nl": "a complete orbit of mercury around the sun takes around 88 earth days.", "fol": "", "prediction": ["all x.((CompleteOrbitOfMercury(x) & Sun(x)) -> TakesEarthDays(x,88))", "all x y.((CompleteOrbitOfMercury(x) & Sun(y)) -> TakesEarthDays(x,88))", "all x y.((CompleteOrbitOfMercury(x) & Sun(y)) -> TakesAbout88EarthDays(x,y))", "all x y.((CompleteOrbitOfMercury(x) & Sun(y)) -> TakesEarthDays(x,y))", "all x.((CompleteOrbitOfMercury(x) & AroundSun(x)) -> TakesEarthDays(x,88))", "all x y z.((CompleteOrbitOfMercury(x) & Sun(y) & EarthDay(z)) -> TakesAround(x,y,z))", "all x.((CoralOrbitOfMercury(x) & Sun(x)) -> TakesEarthDays(x,88))", "all x y z.((CompleteOrbitOfMercury(x) & Sun(y) & EarthDay(z)) -> TakesAbout88(x,y,z))", "all x.((CompleteOrbitOfMercury(x) & Sun(x)) -> TakesAbout88EarthDays(x))", "all x y.((CompleteOrbitOfMercury(x) & Sun(y)) -> TakesAbout88EarthDays(x))", "all x y z.((CompleteOrbitOfMercury(x) & Sun(y) & EarthDay(z)) -> TakesAbout(x,y,z))", "all x y.((CompleteOrbitOfMercury(x) & Sun(y)) -> TakesAround(x,88))", "all x.((OrbitOfMercury(x) & Sun(x)) -> TakesEarthDays(x,88))", "all x y z.((CompleteOrbitOfMercury(x) & Sun(y) & EarthDay(z)) -> TakesAbout(x,88,z))", "all x y.((CompleteOrbitOfMercury(x) & Sun(y)) -> TakesEarthDays(x,88))", "all x y.((CoralOrbitOfMercury(x) & Sun(y)) -> TakesEarthDays(x,88))"]}
{"id": "entailmentbank_validation_55", "nl": "the new moon is when the dark half of the moon faces the earth.", "fol": "", "prediction": ["all x.(NewMoon(x) -> (DarkHalfOfMoon(x) & FacesEarth(x)))", "all x y z.((NewMoon(x) & DarkHalf(y) & Earth(z)) -> Faces(x,y,z))", "all x.((Moon(x) & DarkHalfFacesEarth(x)) -> NewMoon(x))", "all x y z.((NewMoon(x) & DarkHalfOfMoon(y) & Earth(z)) -> Faces(x,y,z))", "all x y.((NewMoon(x) & DarkHalf(y) & FacesEarth(y)) -> NewMoon(x))", "all x.(NewMoon(x) -> (DarkHalfOfMoon(x) & FacesEarth(x)))", "all x.((Moon(x) & DarkHalf(x) & FacesEarth(x)) -> NewMoon(x))", "all x y z.((NewMoon(x) & DarkHalf(y) & Earth(z) & Faces(x,y,z)) -> NewMoon(x))", "all x y.((NewMoon(x) & DarkHalfOfMoon(y) & FacesEarth(y)) -> NewMoon(x))", "all x y z.((NewMoon(x) & DarkHalf(y) & Earth(z) & Faces(y,z)) -> NewMoon(x))", "all x y.((NewMoon(x) & DarkHalfOfMoon(y)) -> FacesEarth(x,y))", "all x y.((NewMoon(x) & DarkHalf(y) & FacesEarth(y)) -> NewMoon(x,y))", "all x y.((NewMoon(x) & DarkHalfOfMoon(y) & FacesEarth(x,y)) -> NewMoon(x))", "all x.((NewMoon(x) & DarkHalfOfMoon(x)) -> FacesEarth(x))", "all x.((Moon(x) & DarkHalf(x)) -> FacesEarth(x))", "all x y.((Moon(x) & DarkHalf(y) & FacesEarth(y)) -> NewMoon(x))"]}
{"id": "entailmentbank_validation_56", "nl": "the new moon is when the moon is in between the sun and the earth.", "fol": "", "prediction": ["all x y z.((Moon(x) & Sun(y) & Earth(z)) -> InBetween(x,y,z))", "all x y.((Moon(x) & Sun(y) & Earth(y)) -> InBetween(x,y))", "all x.((Moon(x) & Sun(x) & Earth(x)) -> NewMoon(x))", "all x y z.((Moon(x) & Sun(y) & Earth(z) & InBetween(x,y,z)) -> NewMoon(x))", "all x.(NewMoon(x) -> MoonInBetweenSunAndEarth(x))", "all x y.((Moon(x) & Sun(y) & Earth(z)) -> InBetween(x,y,z))", "all x.(NewMoon(x) -> (MoonInBetweenSunAndEarth(x)))", "all x.((Moon(x) & SunInBetween(x,Sun,Earth)) -> NewMoon(x))", "all x.((Moon(x) & SunBetween(x,sun,earth)) -> NewMoon(x))", "all x.((Moon(x) & SunBetween(x,y) & Earth(y)) -> NewMoon(x))", "all x y.((Moon(x) & Sun(y) & Earth(y)) -> InBetween(x,y,z))", "all x.(NewMoon(x) -> MoonInBetweenSunAndEarth(x))", "all x.(NewMoon(x) -> MoonBetweenSunAndEarth(x))", "all x.(NewMoon(x) -> (MoonBetweenSunAndEarth(x)))", "all x y.((Moon(x) & Sun(y) & Earth(y)) -> InBetween(x,y,y))", "all x y.((Moon(x) & Sun(y)) -> InBetween(x,y))"]}
{"id": "entailmentbank_validation_57", "nl": "the new moon is when the moon could block the earth from the sun.", "fol": "", "prediction": ["all x.((Moon(x) & BlocksEarthFromSun(x)) -> NewMoon(x))", "all x y.((Moon(x) & Earth(y)) -> BlocksFromSun(x,y))", "all x y.((Moon(x) & Earth(y) & BlocksFromSun(x,y)) -> NewMoon(x))", "all x.((Moon(x) & MoonBlocksEarthFromSun(x)) -> NewMoon(x))", "all x y z.((Moon(x) & Earth(y) & Sun(z)) -> BlocksFrom(x,y,z))", "all x y.((Moon(x) & Earth(y) & Blocks(x,y)) -> NewMoon(x))", "all x y.((Moon(x) & Moon(y)) -> BlocksEarthFromSun(x,y))", "all x y z.((Moon(x) & Earth(y) & Sun(z) & Blocks(x,y,z)) -> NewMoon(x))", "all x y z.((Moon(x) & Earth(y) & Sun(z)) -> Blocks(x,y,z))", "all x y z.((NewMoon(x) & Moon(y) & Earth(z)) -> BlocksFromSun(y,z))", "all x y z.((NewMoon(x) & Moon(y) & Earth(z) & BlocksFromSun(y,z)) -> BlocksFromSun(y,z))", "all x y.((Moon(x) & Moon(y) & BlocksEarthFromSun(x,y)) -> NewMoon(x))", "all x y.((Moon(x) & Moon(y)) -> BlocksEarthFromSun(y,x))", "all x y.((Moon(x) & Moon(y) & BlocksEarthFromSun(y,x)) -> NewMoon(x))", "all x y z.((Moon(x) & Earth(y) & Sun(z)) -> CouldBlock(x,y,z))", "all x.(NewMoon(x) -> BlocksEarthFromSun(x))"]}
{"id": "entailmentbank_validation_58", "nl": "a solar eclipse is when the moon blocks the earth from the sun.", "fol": "", "prediction": ["all x.(SolarEclipse(x) -> MoonBlocksEarthFromSun(x))", "all x y z.((SolarEclipse(x) & Moon(y) & Earth(z)) -> BlocksFromSun(y,z))", "all x.(SolarEclipse(x) -> MoonBlocksEarthFromSun(x))", "all x y.((SolarEclipse(x) & Moon(y)) -> BlocksEarthFromSun(y,x))", "all x y.((Moon(x) & Earth(y) & BlocksFromSun(x,y)) -> SolarEclipse(x))", "all x y z.((SolarEclipse(x) & Moon(y) & Earth(z)) -> BlocksFrom(y,z))", "all x y z.((SolarEclipse(x) & Moon(y) & Earth(z) & BlocksFromSun(y,z)) -> SolarEclipse(x))", "all x y.((SolarEclipse(x) & Moon(y) & BlocksEarthFromSun(y,x)) -> BlocksEarthFromSun(x,y))", "all x y.((SolarEclipse(x) & Moon(y) & BlocksEarthFromSun(y,x)) -> BlocksEarthFromSun(y,x))", "all x y.((Moon(x) & Earth(y) & Blocks(x,y)) -> SolarEclipse(x))", "all x y.((Moon(x) & Earth(y) & BlocksFrom(x,y)) -> SolarEclipse(x))", "all x y.((Moon(x) & Earth(y)) -> BlocksFromSun(x,y))", "all x y z.((SolarEclipse(x) & Moon(y) & Earth(z) & BlocksFrom(y,z)) -> SolarEclipse(x))", "all x y z.((SolarEclipse(x) & Moon(y) & Earth(z) & BlocksFromSun(y,z)) -> BlocksFromSun(y,z))", "all x y.((SolarEclipse(x) & Moon(y) & BlocksEarthFromSun(y,x)) -> SolarEclipse(x))", "all x.((Moon(x) & BlocksEarthFromSun(x)) -> SolarEclipse(x))"]}
{"id": "entailmentbank_validation_59", "nl": "a solar eclipse could only happen during the new moon.", "fol": "", "prediction": ["all x y.((SolarEclipse(x) & NewMoon(y)) -> CanOccur(x,y))", "all x.(SolarEclipse(x) -> NewMoon(x))", "all x.(SolarEclipse(x) -> CouldOccurDuringNewMoon(x))", "all x.(SolarEclipse(x) -> CanOccurDuringNewMoon(x))", "all x y.((SolarEclipse(x) & NewMoon(y)) -> CanOccurDuring(x,y))", "all x y.((SolarEclipse(x) & NewMoon(y)) -> CouldOccur(x,y))", "all x.((SolarEclipse(x) & NewMoon(x)) -> CanOccur(x))", "all x.(SolarEclipse(x) -> HappensDuringNewMoon(x))", "all x y.((SolarEclipse(x) & NewMoon(y)) -> CanCause(x,y))", "all x.(SolarEclipse(x) -> OnlyDuringNewMoon(x))", "all x y.((SolarEclipse(x) & NewMoon(y)) -> CouldOccurDuring(x,y))", "all x.(SolarEclipse(x) -> -NewMoon(x))", "all x.(SolarEclipse(x) -> exists y.(NewMoon(y) & HappensDuring(x,y))))", "all x y.((SolarEclipse(x) & NewMoon(y)) -> CanOccursDuring(x,y))", "all x y.((SolarEclipse(x) & NewMoon(y)) -> CanOnlyOccur(x,y))", "all x y.((SolarEclipse(x) & NewMoon(y)) -> OnlyOccursDuring(x,y))"]}
{"id": "entailmentbank_validation_60", "nl": "objects generally are made of ice in the kuiper belt.", "fol": "", "prediction": ["all x y.((Object(x) & KuiperBelt(y)) -> MadeOfIce(x,y))", "all x.((Object(x) & MadeOfIce(x)) -> KuiperBelt(x))", "all x.((Object(x) & MadeOfIce(x) & KuiperBelt(x)) -> MadeOfIce(x))", "all x.(MadeOfIce(x) -> KuiperBelt(x))", "all x y z.((Object(x) & KuiperBelt(y) & Ice(z)) -> MadeOf(x,y,z))", "all x y.((Object(x) & KuiperBelt(y)) -> MadeOfIceIn(x,y))", "all x y.((Object(x) & KuiperBelt(y)) -> MadeOf(x,y))", "all x y z.((Object(x) & KuiperBelt(y) & Ice(z)) -> MadeOf(x,z))", "all x.((Object(x) & MadeOfIceInKuiperBelt(x)) -> MadeOfIce(x))", "all x.((Object(x) & MadeOfIce(x) & KuiperBelt(x)) -> MakesOfIce(x))", "all x.(KuiperBelt(x) -> MadeOfIce(x))", "all x y.((Object(x) & KuiperBelt(y)) -> MadeOfIceInBelt(x,y))", "all x.((Object(x) & MadeOfIce(x)) -> InKuiperBelt(x))", "all x.((Object(x) & MadeOfIce(x) & InKuiperBelt(x)) -> MadeOfIce(x))", "all x.(Ice(x) -> InKuiperBelt(x))", "all x y.((Object(x) & KuiperBelt(y)) -> MakesOfIce(x,y))"]}
{"id": "entailmentbank_validation_61", "nl": "icy can be used to describe objects that are made of ice.", "fol": "", "prediction": ["all x.(Ice(x) -> DefinesMadeOfIce(x))", "all x y.((Ice(x) & Object(y) & MadeOfIce(y)) -> CanBeDescribed(x,y))", "all x y.((Ice(x) & Object(y)) -> DefinesMadeOfIce(x,y))", "all x.(Ice(x) -> DefinesObjectsMadeOfIce(x))", "all x.(Ice(x) -> (DepictsIce(x) & MadeOfIce(x)))", "all x.(Ice(x) -> (DepictsObjects(x) & MadeOfIce(x)))", "all x y.((Ice(x) & Object(y)) -> Defines(x,y))", "all x y.((Ice(x) & Object(y) & MadeOfIce(y)) -> UsedToDepict(x,y))", "all x y.((Ice(x) & Object(y)) -> MadeOfIce(y))", "all x.(Ice(x) -> (DepictsMadeOfIce(x)))", "all x y.((Ice(x) & Object(y)) -> UsedToDepict(x,y))", "all x y.((Ice(x) & Object(y)) -> DefinesMadeOfIce(y,x))", "all x.(Ice(x) -> DescribesMadeOfIce(x))", "all x y z.((Ice(x) & Object(y) & Ice(z)) -> Defines(x,y,z))", "all x y.((Ice(x) & Object(y)) -> DescriptionMadeOfIce(y,x))", "all x.(Ice(x) -> (MadeOfIce(x) & DescribesObjects(x)))"]}
{"id": "entailmentbank_validation_62", "nl": "objects in kuiper belt are icy.", "fol": "", "prediction": ["all x.((Object(x) & KuiperBelt(x)) -> Icy(x))", "all x.((Object(x) & KuiperBelt(x)) -> Ice(x))", "all x y.((Object(x) & KuiperBelt(y)) -> Icy(x,y))", "all x y.((Object(x) & KuiperBelt(y)) -> Icy(x))", "all x.(KuiperBelt(x) -> Icy(x))", "all x y.((Object(x) & KuiperBelt(y)) -> Ice(x))", "all x.((Objects(x) & KuiperBelt(x)) -> Icy(x))", "all x y.((Object(x) & KuiperBelt(y) & InBelt(x,y)) -> Icy(x))", "all x y z.((Object(x) & KuiperBelt(y) & KuiperBelt(z)) -> Icy(x,y,z))", "all x y.((Object(x) & KuiperBelt(y) & In(x,y)) -> Icy(x))", "all x.(KuiperBelt(x) -> Ice(x))", "all x y z.((Object(x) & KuiperBelt(y) & KuiperBelt(z)) -> Icy(x))", "all x.((Object(x) & InKuiperBelt(x)) -> Icy(x))", "all x.((ObjectInKuiperBelt(x) & Icy(x)) -> Icy(x))", "all x.((Object(x) & KuiperBelt(x)) -> Ice(x))", "all x y.((Object(x) & KuiperBelt(y) & InBelt(x,y)) -> Ice(x))"]}
{"id": "entailmentbank_validation_63", "nl": "a comet orbit occurs usually once per 1000 years.", "fol": "", "prediction": ["all x.(CometOrbit(x) -> OccursOncePer1000Years(x))", "all x.(CometOrbit(x) -> OccursOncePer1000Years(x))", "all x.(CometOrbit(x) -> UsuallyOccursOncePer1000Years(x))", "all x y.((CometOrbit(x) & Orbit(y)) -> OccursOncePer1000Years(x,y))", "all x.(CometOrbit(x) -> OccursOf1000Years(x))", "all x y.((CometOrbit(x) & Orbit(y)) -> OccursOncePer1000Years(x))", "all x.(CometOrbit(x) -> (OccursOncePer1000Years(x)))", "all x.(CometOrbit(x) -> OccursLastPer1000Years(x))", "all x y.((CometOrbit(x) & Period(y)) -> OccursOncePer1000Years(x,y))", "all x y.((CometOrbit(x) & Year(y)) -> OccursOncePer1000(x,y))", "all x.(CometOrbit(x) -> OccursOnce(x,1000))", "all x.((CometOrbit(x) & OccursOncePer1000Years(x)) -> CometOrbit(x))", "all x y.((CometOrbit(x) & Year(y)) -> OccursOncePer1000Years(x,y))", "all x.(CometOrbit(x) -> (OccursOncePer1000Years(x) | OccursOncePer1000Years(x)))", "all x.(CometOrbitOccursOncePer1000Years(x) -> CometOrbit(x))", "all x.(CometOrbit(x) -> OccursOnce(x,1000Years))"]}
{"id": "entailmentbank_validation_64", "nl": "a comet is a kind of celestial object.", "fol": "", "prediction": ["all x.(Comet(x) -> CelestialObject(x))", "all x.(Comet(x) -> CelestialObject(x))", "all x.(Comet(x) -> CelestialObject(x))", "all x y.((Comet(x) & CelestialObject(y)) -> Is(x,y))", "all x y.((Comet(x) & CelestialObject(y)) -> CelestialObject(x))", "all x y.((Comet(x) & CelestialObject(y)) -> CelestialObject(x))", "all x y.((Comet(x) & CelestialObject(y)) -> (CelestialObject(x) & CelestialObject(y)))", "all x y.((Comet(x) & CelestialObject(y)) -> Object(x,y))", "all x y z.((Comet(x) & CelestialObject(y) & CelestialObject(z)) -> Is(x,y,z))", "all x y.((Comet(x) & CelestialObject(y)) -> (CelestialObject(x) & -CelestialObject(y)))", "all x y.((Comet(x) & CelestialObject(y)) -> (CelestialObject(x) & CelestialObject(x)))", "all x y.((Comet(x) & CelestialObject(y)) -> (CelestialObject(x) & -CelestialObject(x)))", "all x y.((Comet(x) & CelestialObject(y)) -> CelestialObject(x,y))", "all x y.((Comet(x) & CelestialObject(y)) -> Like(x,y))", "all x y.((Comet(x) & CelestialObject(y)) -> Comet(x))", "all x y.((Comet(x) & CelestialObject(y)) -> HasCelestialObject(x,y))"]}
{"id": "entailmentbank_validation_65", "nl": "comet orbits are elliptical.", "fol": "", "prediction": ["all x.(CometOrbit(x) -> Elliptical(x))", "all x y.((CometOrbit(x) & Orbit(y)) -> Elliptical(x))", "all x.(CometOrbit(x) -> Ellipse(x))", "all x y.((CometOrbit(x) & Comet(y)) -> Elliptical(x))", "all x y.((CometOrbit(x) & Orbit(y)) -> Elliptical(x,y))", "all x.(CometOrbit(x) -> Elliptic(x))", "all x y.((CometOrbit(x) & Comet(y)) -> Elliptical(x,y))", "all x.(CometOrbit(x) -> Elliptical(x))", "all x y.((Comet(x) & Orbit(y)) -> Elliptical(x))", "all x y.((Comet(x) & Orbit(y)) -> Elliptical(x,y))", "all x y.((CometOrbit(x) & Orbit(y)) -> Elliptical(y))", "all x y.((Comet(x) & Orbit(y)) -> Elliptical(y))", "all x.(CometOrbit(x) -> Eliptical(x))", "all x.(Comet(x) -> EllipticalOrbit(x))", "all x.(CometOrbit(x) -> Ellipsoidal(x))", "all x.(CometOrbit(x) -> Illliptical(x))"]}
{"id": "entailmentbank_validation_66", "nl": "comets are the kind of celestial object that has a highly elliptical orbit and has a period of over 1000 years.", "fol": "", "prediction": ["all x.(Comet(x) -> (CelestialObject(x) & HighlyEllipticalOrbit(x) & HasPeriodOver1000Years(x)))", "all x.(Comet(x) -> (CelestialObject(x) & HighlyEllipticalOrbit(x) & PeriodOver1000Years(x)))", "all x.(Comet(x) -> (CelestialObject(x) & HighlyEllipticalOrbit(x) & PeriodOver1000Years(x)))", "all x.(Comet(x) -> (CelestialObject(x) & HighlyEllipticalOrbit(x) & HasPeriodOver1000Years(x)))", "all x.(Comet(x) -> (CelestialObject(x) & HighlyEllipticalOrbit(x) & PeriodOfOver1000Years(x)))", "all x.(Comet(x) -> (CelestialObject(x) & HighlyEllipticalOrbit(x) & HasPeriodOfOver1000Years(x)))", "all x.(Comet(x) -> (CelestialObject(x) & HighlyEllipticalOrbit(x) & HasPeriodOver1000Years(x)))", "all x.(Comet(x) -> (CelestialObject(x) & HighlyEllipticalOrbit(x) & PeriodOver1000Years(x)))", "all x.(Comet(x) -> (CelestialObject(x) & HighlyEllipticalOrbit(x) & Over1000YearsPeriod(x)))", "all x.(Comet(x) -> (CelestialObject(x) & HighlyEllipticalOrbit(x) & PeriodOver1000Years(x)))", "all x.(Comet(x) -> (CelestialObject(x) & EllipticalOrbit(x) & HasPeriodOver1000Years(x)))", "all x.(Comet(x) -> (CelestialObject(x) & EllipticalOrbit(x) & PeriodOver1000Years(x)))", "all x.(Comet(x) -> (CelestialObject(x) & HighlyEllipticalOrbit(x) & PeriodOver1000Years(x)))", "all x.(Comet(x) -> (CelestialObject(x) & HighlyEllipticalOrbit(x) & HasPeriod(x,1000)))", "all x.(Comet(x) -> (CelestialObject(x) & HighlyEllipticalOrbit(x) & DurationOver1000Years(x)))", "all x.(Comet(x) -> (CelestialObject(x) & EllipticalOrbit(x) & PeriodOver1000Years(x)))"]}
{"id": "entailmentbank_validation_67", "nl": "the milky way galaxy appears as a glowing band across the night sky.", "fol": "", "prediction": ["all x.(MilkyWayGalaxy(x) -> AppearsAsGlowingBandAcrossNightSky(x))", "all x y.((MilkyWayGalaxy(x) & NightSky(y)) -> AppearsAsGlowingBand(x,y))", "all x y z.((MilkyWayGalaxy(x) & MilkyWayGalaxy(y) & NightSky(z)) -> AppearsAsGlowingBand(x,y,z))", "all x.(MilkyWayGalaxy(x) -> AppearsAsGlowingBandAcrossNightSky(x))", "all x y.((MilkyWayGalaxy(x) & NightSky(y)) -> AppearsAsGlowingBand(x,y))", "all x y z.((MilkyWayGalaxy(x) & MilkyWayGalaxy(y) & NightSky(z)) -> AppearsAsGlowingBand(x,y,z))", "all x.(MilkyWayGalaxy(x) -> appearsAsGlowingBandAcrossNightSky(x))", "all x y.((MilkyWayGalaxy(x) & MilkyWayGalaxy(y)) -> AppearsAsGlowingBandAcrossNightSky(x,y))", "all x.(MilkyWayGalaxy(x) -> (AppearsAsGlowingBandAcrossNightSky(x)))", "all x.(MilkyWayGalaxy(x) -> AppearsAsGlowingBand(x))", "all x.(MilkyWeaveGalaxy(x) -> AppearsAsGlowingBandAcrossNightSky(x))", "all x y z.((MilkyWayGalaxy(x) & MilkyWayGalaxy(y) & NightSky(z)) -> AppearsAsGlowingBandAcross(x,y,z))", "all x y.((MilkyWayGalaxy(x) & MilkyWayGalaxy(y)) -> AppearsAsGlowingBandAcrossNightSky(x,y))", "all x.(MilkyHowGalaxy(x) -> AppearsAsGlowingBandAcrossNightSky(x))", "all x y z.((MilkyWayGalaxy(x) & MilkyWayGalaxy(y) & NightSky(z)) -> (AppearsAsGlowingBand(x,y,z)))", "all x y.((MilkyWayGalaxy(x) & MilkyWayGalaxy(y)) -> AppearsAsGlowingBand(x,y))"]}
{"id": "entailmentbank_validation_68", "nl": "a student observes a glowing band across the night sky.", "fol": "", "prediction": ["all x y.((Student(x) & Student(y)) -> ObservesGlowingBand(x,y))", "all x y.((Student(x) & Student(y)) -> ObservesGlowingBandAcrossNightSky(x,y))", "all x y z.((Student(x) & GlowingBand(y) & NightSky(z)) -> ObservesAcross(x,y,z))", "all x y z.((Student(x) & GlowingBand(y) & NightSky(z)) -> Observes(x,y,z))", "all x y.((Student(x) & GlowingBand(y)) -> ObservesAcrossNightSky(x,y))", "all x y z.((Student(x) & GlowingBand(y) & NightSky(z)) -> ObservesAcross(x,y,z))", "all x y z.((Student(x) & Band(y) & NightSky(z)) -> ObservesGlowing(x,y,z))", "all x y.((Student(x) & GlowingBand(y)) -> ObservesAcrossNightSky(x,y))", "all x y z.((Student(x) & GlowingBand(y) & NightSky(z)) -> Observes(x,y,z))", "all x.(Student(x) -> ObservesGlowingBandAcrossNightSky(x))", "all x y z.((Student(x) & GlowingBand(y) & NightSky(z)) -> Observes(x,y))", "all x y z.((Student(x) & Band(y) & NightSky(z)) -> ObservesGlowingAcross(x,y,z))", "all x y z.((Student(x) & GlowingBand(y) & NightSky(z) & Observes(x,y)) -> OvernightSky(x,z))", "all x y z.((Student(x) & LuminousBand(y) & NightSky(z)) -> Observes(x,y,z))", "all x y z.((Student(x) & Band(y) & NightSky(z)) -> Observes(x,y,z))", "all x y.((Student(x) & GlowingBand(y) & NightSky(y)) -> Observes(x,y))"]}
{"id": "entailmentbank_validation_69", "nl": "the student observes the milky way galaxy at night.", "fol": "", "prediction": ["all x y.((Student(x) & MilkyWayGalaxy(y)) -> ObservesAtNight(x,y))", "all x y z.((Student(x) & MilkyWayGalaxy(y) & Night(z)) -> ObservesAt(x,y,z))", "all x y.((Student(x) & MilkyWayGalaxie(y)) -> ObservesAtNight(x,y))", "all x y.((Student(x) & MilkyWay(y)) -> ObservesAtNight(x,y))", "all x y z.((Student(x) & MilkyWayGalaxy(y) & Night(z)) -> Observes(x,y,z))", "all x.((Student(x) & MilkyWayGalaxy(x)) -> ObservesAtNight(x))", "all x.(Student(x) -> ObservesMilkyWayGalaxyAtNight(x))", "all x y.((Student(x) & MilkyWayGalaxy(y) & ObservesAtNight(x,y)) -> MilkyWayGalaxy(x))", "all x y.((Student(x) & MilkyWeaveGalaxy(y)) -> ObservesAtNight(x,y))", "all x y z.((Student(x) & MilkyWayGalaxy(y) & Night(z)) -> ObservesAtNight(x,y,z))", "all x y.((Student(x) & MilkyWayGalaxy(y) & ObservesAtNight(x,y)) -> MilkyWayGalaxy(x,y))", "all x y.((Student(x) & MilkyHowGalaxy(y)) -> ObservesAtNight(x,y))", "all x y.((Student(x) & MilkyWeave(y)) -> ObservesAtNight(x,y))", "all x y.((Student(x) & MilkyWareGalaxy(y)) -> ObservesAtNight(x,y))", "all x y.((Student(x) & MilkyWeayGalaxy(y)) -> ObservesAtNight(x,y))", "all x y z.((Student(x) & MilkyWayGalaxy(y) & Night(z)) -> Observes(x,y))"]}
{"id": "entailmentbank_validation_70", "nl": "looking at bright objects has a negative impact on the eyes.", "fol": "", "prediction": ["all x.(BrightObject(x) -> NegativeImpactOnEyes(x))", "all x y.((BrightObject(x) & Eye(y)) -> NegativeImpact(x,y))", "all x y.((BrightObject(x) & Eyes(y)) -> NegativeImpact(x,y))", "all x y.((BrightObject(x) & Eye(y)) -> NegativeImpactOn(x,y))", "all x.((LooksAtBrightObjects(x) & NegativeImpactOnEyes(x)) -> NegativeImpactOnEyes(x))", "all x.((LookingAtBrightObjects(x) & NegativeImpactOnEyes(x)) -> NegativeImpactOnEyes(x))", "all x.(BrightObjects(x) -> NegativeImpactOnEyes(x))", "all x.((LooksAtBrightObjects(x) & NegativeImpactOnEyes(x)) -> LooksAtBrightObjects(x))", "all x y z.((BrightObject(x) & Eye(y) & Eye(z)) -> NegativeImpact(x,y,z))", "all x.(LooksAtBrightObjects(x) -> NegativeImpactOnEyes(x))", "all x.((LookingAtBrightObjects(x) & NegativeImpactOnEyes(x)) -> LookAtBrightObjects(x))", "all x y.((BrightObject(x) & Eye(y) & LookingAt(x,y)) -> NegativeImpactOn(x,y))", "all x.((LooksAtBrightObjects(x) & NegativeImpactOnEyes(x)) -> BrightObjects(x))", "all x y.((BrightObject(x) & Eyes(y)) -> NegativeImpactOn(x,y))", "all x.((BrightObject(x) & LookingAt(x,y)) -> NegativeImpactOnEyes(x))", "all x y.((BrightObject(x) & Eyes(y) & LookingAt(x,y)) -> NegativeImpactOn(x,y))"]}
{"id": "entailmentbank_validation_71", "nl": "the moon is less bright than the sun.", "fol": "", "prediction": ["all x y.((Moon(x) & Sun(y)) -> LessBright(x,y))", "all x y.((Moon(x) & Sun(y)) -> LessBrightThan(x,y))", "all x y z.((Moon(x) & Sun(y) & Moon(z)) -> LessBright(x,y,z))", "all x y z.((Moon(x) & Sun(y) & Moon(z)) -> LessBright(x,z))", "all x.(Moon(x) -> LessBrightThanSun(x))", "all x y z.((Moon(x) & Sun(y) & Moon(z)) -> LessBrightThan(x,y,z))", "all x y.((Moon(x) & Sun(y)) -> (LessBright(x,y)))", "all x y z.((Moon(x) & Sun(y) & Moon(z)) -> LessBrightThan(x,z))", "all x y.((Moon(x) & Sun(y) & LessBright(x,y)) -> LessBright(x,y))", "all x y z.((Moon(x) & Sun(y) & Moon(z)) -> (LessBright(x,z) | LessBright(x,y)))", "all x y.((Moon(x) & Sun(y)) -> (LessBright(x,y) & LessBright(x,y)))", "all x y z.((Moon(x) & Sun(y) & Moon(z)) -> LessBrightThan(z,y))", "exists x y.(Moon(x) & Sun(y) & LessBright(x,y))", "all x y z.((Moon(x) & Sun(y) & Moon(z)) -> (LessBright(x,y) & LessBright(x,z)))", "all x y z.((Moon(x) & Sun(y) & Sun(z)) -> LessBright(x,y,z))", "all x y z.((Moon(x) & Sun(y) & Moon(z)) -> (LessBright(x,z) & -Bright(x,y)))"]}
{"id": "entailmentbank_validation_72", "nl": "looking at the moon has less of a negative impact on the eyes.", "fol": "", "prediction": ["all x.(LooksAtMoon(x) -> LessNegativeImpactOnEyes(x))", "all x.(LookingAtMoon(x) -> LessNegativeImpactOnEyes(x))", "all x y.((Moon(x) & Eyes(y)) -> LessNegativeImpact(x,y))", "all x y.((LookingAtMoon(x) & Eyes(y)) -> LessNegativeImpact(x,y))", "all x.(LookingAtMoon(x) -> LessOfNegativeImpactOnEyes(x))", "all x.(LooksAtMoon(x) -> LessOfNegativeImpactOnEyes(x))", "all x y.((Moon(x) & Eye(y)) -> LessNegativeImpact(x,y))", "all x y.((LooksAtMoon(x) & Moon(y)) -> LessNegativeImpactOnEyes(x,y))", "all x y.((LooksAtMoon(x) & Eyes(y)) -> LessNegativeImpact(x,y))", "all x y.((LookingAtMoon(x) & Eyes(y)) -> LessOfNegativeImpact(x,y))", "all x y.((Moon(x) & Eyes(y)) -> LessOfNegativeImpact(x,y))", "all x.((LookingAtMoon(x) & LessNegativeImpactOnEyes(x)) -> LessNegativeImpactOnEyes(x))", "all x.((LookingAtMoon(x) & LessNegativeImpactOnEyes(x)) -> LessOfNegativeImpactOnEyes(x))", "all x y.((Moon(x) & Eyes(y)) -> LessNegativeImpactOn(x,y))", "all x y.((LookingAtMoon(x) & Eye(y)) -> LessNegativeImpact(x,y))", "all x y.((Moon(x) & Eye(y)) -> LessNegativeImpactOn(x,y))"]}
{"id": "entailmentbank_validation_73", "nl": "the surface of the earth contains mountains.", "fol": "", "prediction": ["all x.(EarthSurface(x) -> ContainsMountains(x))", "all x y.((EarthSurface(x) & Mountain(y)) -> Contains(x,y))", "all x y.((Earth(x) & Surface(y)) -> ContainsMountains(x,y))", "all x y.((Surface(x) & Earth(y)) -> ContainsMountains(x,y))", "all x.((EarthSurface(x) & ContainsMountains(x)) -> ContainsMountains(x))", "all x y z.((Earth(x) & Surface(y) & Mountain(z)) -> Contains(y,z))", "all x y.((EarthSurface(x) & Mountains(y)) -> Contains(x,y))", "all x y z.((EarthSurface(x) & Mountain(y) & Surface(z)) -> Contains(x,y,z))", "all x y z.((Earth(x) & Surface(y) & Mountain(z)) -> Contains(x,y,z))", "all x y.((Earth(x) & Surface(y)) -> ContainsMountains(y))", "all x.(SurfaceOfEarth(x) -> ContainsMountains(x))", "all x y z.((Surface(x) & Earth(y) & Mountain(z)) -> Contains(x,y,z))", "all x y.((EarthSurface(x) & Earth(y)) -> ContainsMountains(x,y))", "all x y z.((EarthSurface(x) & Mountain(y) & Mountain(z)) -> Contains(x,y,z))", "all x y.((Earth(x) & Earth(y)) -> ContainsMountains(x,y))", "all x.(Earth(x) -> ContainsMountains(x))"]}
{"id": "entailmentbank_validation_74", "nl": "the surface of the moon contains mountains.", "fol": "", "prediction": ["all x.(MoonSurface(x) -> ContainsMountains(x))", "all x y.((Moon(x) & Surface(y)) -> ContainsMountains(x,y))", "all x y.((MoonSurface(x) & Mountain(y)) -> Contains(x,y))", "all x.(Moon(x) -> ContainsMountains(x))", "all x y.((MoonSurface(x) & Moon(y)) -> ContainsMountains(x,y))", "all x y.((Moon(x) & Moon(y)) -> ContainsMountains(x,y))", "all x y z.((MoonSurface(x) & Mountain(y) & Moon(z)) -> Contains(x,y,z))", "all x y.((Moon(x) & Surface(y)) -> ContainsMountains(y))", "all x y.((Moon(x) & MoonSurface(y)) -> ContainsMountains(x,y))", "all x y z.((Moon(x) & Surface(y) & Mountain(z)) -> Contains(y,z))", "all x y z.((Moon(x) & Surface(y) & Mountain(z)) -> Contains(x,y,z))", "all x y.((MoonSurface(x) & Mountains(y)) -> Contains(x,y))", "all x y.((Moon(x) & Surface(y) & ContainsMountains(x,y)) -> ContainsMountains(x,y))", "all x.((MoonSurface(x) & ContainsMountains(x)) -> ContainsMountains(x))", "all x y z.((MoonSurface(x) & Mountain(y) & Moon(z)) -> Contains(x,y))", "all x y z.((MoonSurface(x) & Mountain(y) & MoonSurface(z)) -> Contains(x,y,z))"]}
{"id": "entailmentbank_validation_75", "nl": "both the surface of the moon and the surface of the earth contain mountains.", "fol": "", "prediction": ["all x y.((MoonSurface(x) & EarthSurface(y)) -> ContainsMountains(x,y))", "all x.((MoonSurface(x) & EarthSurface(x)) -> ContainsMountains(x))", "all x y.((Moon(x) & Earth(y)) -> ContainsMountains(x,y))", "all x y.((MoonSurface(x) & EarthSurface(y)) -> ContainsMountains(x))", "(exists x.(MoonSurface(x) & ContainsMountains(x)) & exists y.(EarthSurface(y) & ContainsMountains(y)))", "all x y z.((MoonSurface(x) & EarthSurface(y) & MountainSurface(z)) -> Contains(x,y,z))", "all x y.((Moon(x) & Earth(y)) -> (ContainsMountains(x,y) & ContainsMountains(x,y)))", "all x.((SurfaceOfMoon(x) & SurfaceOfEarth(x)) -> ContainsMountains(x))", "all x y z.((MoonSurface(x) & EarthSurface(y) & MoonSurface(z)) -> ContainsMountains(x,y,z))", "all x y.((Surface(x,y) & Moon(y) & Earth(y)) -> ContainsMountains(x,y))", "all x y.((MoonSurface(x) & EarthSurface(y)) -> (ContainsMountains(x,y) & ContainsMountains(x,y)))", "all x y.((SurfaceOfMoon(x) & SurfaceOfEarth(y)) -> ContainsMountains(x,y))", "all x y.((MoonSurface(x) & EarthSurface(y)) -> (ContainsMountains(x) & ContainsMountains(y)))", "all x y.((Surface(x) & Moon(y) & Earth(y)) -> ContainsMountains(x,y))", "all x y z.((MoonSurface(x) & EarthSurface(y) & MountainSurface(z)) -> (Contains(x,y) & Contains(y,z)))", "all x y z.((MoonSurface(x) & EarthSurface(y) & MoonSurface(z)) -> ContainsMountains(x,z))"]}
{"id": "entailmentbank_validation_76", "nl": "the asteroid belt is located between mars and jupiter.", "fol": "", "prediction": ["all x y z.((AsteroidBelt(x) & Mars(y) & Jupiter(z)) -> LocatedBetween(x,y,z))", "all x y z.((AsteroidBelt(x) & Mars(y) & Jupiter(z)) -> LocatedBetween(x,y,z))", "all x y.((AsteroidBelt(x) & Mars(y) & Jupiter(y)) -> LocatedBetween(x,y))", "all x.(AsteroidBelt(x) -> (LocatedBetweenMarsAndJupiter(x)))", "all x y.((AsteroidBelt(x) & Mars(y) & Jupiter(z)) -> LocatedBetween(x,y,z))", "all x y.((AsteroidBelt(x) & Mars(y) & Jupiter(z)) -> LocatedBetween(x,y,z))", "all x y z.((AsteroidBelt(x) & Mars(y) & Jupiter(z)) -> LocatesBetween(x,y,z))", "all x.(AsteroidBelt(x) -> (BetweenMarsAndJupiter(x)))", "all x y.((AsteroidBelt(x) & Mars(y) & Jupiter(y)) -> LocatedBetween(x,y))", "all x.(AsteroidBelt(x) -> (LocatedBetweenMarsAndJupiter(x)))", "all x y.((AsteroidBelt(x) & Mars(y) & Jupiter(z)) -> LocatesBetween(x,y,z))", "all x.(AsteroidBelt(x) -> (BetweenMarsAndJupiter(x)))", "all x.(AsteroidBelt(x) -> (Mars(x) | Jupiter(x)))", "all x y.((AsteroidBelt(x) & Mars(y)) -> LocatedBetween(x,y))", "all x y.((AsteroidBelt(x) & Mars(y) & Jupiter(y)) -> LocatesBetween(x,y))", "all x y.((AsteroidBelt(x) & Mar(y) & Jupiter(y)) -> LocatedBetween(x,y))"]}
{"id": "entailmentbank_validation_77", "nl": "the asteroid belt contains the largest concentration of asteroids in the solar system.", "fol": "", "prediction": ["all x y.((AsteroidBelt(x) & SolarSystem(y)) -> ContainsLargestConcentrationOfAsteroids(x,y))", "all x y.((AsteroidBelt(x) & SolarSystem(y)) -> ContainsLargestConcentrationOfAsteroids(x,y))", "all x y z.((AsteroidBelt(x) & Asteroids(y) & SolarSystem(z)) -> ContainsLargestConcentration(x,y,z))", "all x.(AsteroidBelt(x) -> ContainsLargestConcentrationOfAsteroids(x))", "all x y.((AsteroidBelt(x) & SolarSystem(y)) -> LargestConcentrationOfAsteroids(x,y))", "all x.(AsteroidBelt(x) -> LargestConcentrationOfAsteroidsInSolarSystem(x))", "all x.(AsteroidBelt(x) -> ContainsLargestConcentrationOfAsteroidsInSolarSystem(x))", "all x y z.((AsteroidBelt(x) & Asteroids(y) & SolarSystem(z)) -> LargestConcentration(x,y,z))", "all x y.((AsteroidBelt(x) & SolarSystem(y)) -> LargestConcentrationOfAsteroids(x,y))", "all x.(AsteroidBelt(x) -> ContainsLargestConcentrationOfAsteroids(x))", "all x.(AsteroidBelt(x) -> ContainsLargestConcentrationOfAsteroidsInSolarSystem(x))", "all x.(AsteroidBelt(x) -> LargestConcentrationOfAsteroids(x))", "all x.(AsteroidBelt(x) -> LargestConcentrationOfAsteroidsInSolarSystem(x))", "all x.(AsteroidBelt(x) -> LargestConcentrationOfAsteroids(x))", "all x y.((AsteroidBelt(x) & Asteroids(y)) -> ContainsLargestConcentration(x,y))", "all x y.((AsteroidBelt(x) & Asteroids(y)) -> ContainsLargestConcentrationInSolarSystem(x,y))"]}
{"id": "entailmentbank_validation_78", "nl": "the asteroid belt that contains the most asteroids is located between mars and jupiter.", "fol": "", "prediction": ["all x.((AsteroidBelt(x) & ContainsMostAsteroids(x)) -> (LocatedBetweenMarsAndJupiter(x)))", "all x.((AsteroidBelt(x) & ContainsMostAsteroids(x)) -> (BetweenMarsAndJupiter(x)))", "all x.((AsteroidBelt(x) & ContainsMostAsteroids(x)) -> (LocatedBetweenMarsAndJupiter(x)))", "all x.((AsteroidBelt(x) & ContainsMostAsteroids(x)) -> (BetweenMarsAndJupiter(x)))", "all x.((AsteroidBelt(x) & ContainsMostAsteroids(x)) -> LocatedBetweenMarsAndJupiter(x))", "all x.((AsteroidBelt(x) & ContainsMostAsteroids(x)) -> (LocatedBetweenMarsAndJupiter(x)))", "all x.((AsteroidBelt(x) & ContainsMostAsteroids(x)) -> (BetweenMarsAndJupiter(x)))", "all x.((AsteroidBelt(x) & ContainsMostAsteroids(x)) -> LocatedBetweenMarsAndJupiter(x))", "all x.((AsteroidBelt(x) & ContainsMostAsteroids(x)) -> (LocatedBetweenMarsAndJupiter(x)))", "all x.((AsteroidBelt(x) & ContainsMostAsteroids(x)) -> (BetweenMarsAndJupiter(x)))", "all x.((AsteroidBelt(x) & ContainsMostAsteroids(x)) -> LocatedBetweenMarsAndJupiter(x))", "all x.((AsteroidBelt(x) & ContainsMostAsteroids(x)) -> LocatedBetweenMarsAndJupiter(x))", "all x.((AsteroidBelt(x) & ContainsMostAsteroids(x)) -> LocatedBetweenMarsAndJupiter(x))", "all x.((AsteroidBelt(x) & ContainsMostAsteroids(x)) -> LocatedBetweenMarsAndJupiter(x))", "all x.((AsteroidBelt(x) & ContainsMostAsteroids(x)) -> LocatedBetweenMarsAndJupiter(x))", "all x y z.((AsteroidBelt(x) & Asteroids(y) & Mars(z) & Jupiter(z)) -> ContainsMost(x,y,z))"]}
{"id": "entailmentbank_validation_79", "nl": "the sun is average in temperature for a star in our galaxy.", "fol": "", "prediction": ["all x y.((Sun(x) & Star(y)) -> AverageTemperature(x,y))", "all x y z.((Sun(x) & Star(y) & Galaxy(z)) -> AverageTemperature(x,y,z))", "all x y.((Sun(x) & Star(y) & InGalaxy(x,y)) -> AverageTemperature(x,y))", "all x y.((Sun(x) & Star(y) & InGalaxies(x,y)) -> AverageTemperature(x,y))", "all x y.((Sun(x) & Star(y)) -> AverageTemperatureInGalaxy(x,y))", "all x.(Sun(x) -> AverageTemperature(x))", "all x y z.((Sun(x) & Star(y) & Galaxie(z)) -> AverageTemperature(x,y,z))", "all x y z.((Sun(x) & Star(y) & Galaxy(z)) -> AverageTemperatureIn(x,y,z))", "all x y z.((Sun(x) & Star(y) & Galaxy(z) & AverageTemperature(x,y,z)) -> InGalaxy(x,y,z))", "all x y.((Sun(x) & Star(y) & InGalaxy(x,y)) -> AverageTemperatureInGalaxy(x,y))", "all x y.((Sun(x) & Star(y) & InGalaxy(y,x)) -> AverageTemperature(x,y))", "all x y.((Sun(x) & Star(y) & Galaxy(y)) -> AverageTemperature(x,y))", "all x y z.((Sun(x) & Star(y) & Galaxy(z) & AverageTemperature(x,y)) -> InGalaxy(x,z))", "all x y z.((Sun(x) & Star(y) & Galaxy(z)) -> AverageTemperatureInGalaxy(x,y,z))", "all x y z.((Sun(x) & Star(y) & Galaxy(z)) -> AverageTemperatureFor(x,y,z))", "all x y.((Sun(x) & Star(y) & Galaxy(z)) -> AverageTemperature(x,y,z))"]}
{"id": "entailmentbank_validation_80", "nl": "the sun is average in size for a star in our galaxy.", "fol": "", "prediction": ["all x y.((Sun(x) & Star(y)) -> AverageSize(x,y))", "all x y z.((Sun(x) & Star(y) & Galaxy(z)) -> AverageSize(x,y,z))", "all x y.((Sun(x) & Star(y) & InGalaxy(x,y)) -> AverageSize(x,y))", "all x y.((Sun(x) & Star(y) & InGalaxies(x,y)) -> AverageSize(x,y))", "all x y.((Sun(x) & Star(y)) -> AverageSizeInGalaxy(x,y))", "all x y z.((Sun(x) & Star(y) & Galaxy(z) & AverageSize(x,y,z)) -> AverageSize(x,y,z))", "all x.(Sun(x) -> AverageSizeForStar(x))", "all x.(Sun(x) -> AverageSize(x))", "all x y.((Sun(x) & Star(y)) -> AverageSizeInGalaxies(x,y))", "all x y.((Sun(x) & Star(y) & InGalaxy(x,y)) -> AverageSizeInGalaxy(x,y))", "all x y z.((Sun(x) & Star(y) & Galaxy(z)) -> AverageSizeInGalaxy(x,y,z))", "all x y z.((Sun(x) & Star(y) & Galaxy(z)) -> AverageSizeFor(x,y,z))", "all x y z.((Sun(x) & Star(y) & Galaxy(z) & AverageSize(x,y,z)) -> InGalaxy(x,y,z))", "all x y.((Sun(x) & Star(y) & InGalaxies(x,y)) -> AverageSizeInGalaxies(x,y))", "all x y.((Sun(x) & Star(y)) -> AverageSizeInGalaxie(x,y))", "all x y z.((Sun(x) & Star(y) & Galaxy(z) & AverageSize(x,y)) -> InGalaxy(x,z))"]}
{"id": "entailmentbank_validation_81", "nl": "the sun is average in siza and average in temperature in our galaxy.", "fol": "", "prediction": ["all x y.((Sun(x) & Galaxy(y)) -> (AverageInSiza(x) & AverageInTemperature(x,y)))", "all x y.((Sun(x) & Galaxy(y)) -> (AverageInSiza(x,y) & AverageInTemperature(x,y)))", "all x y.((Sun(x) & Galaxy(y)) -> (AverageInSiza(x) & AverageInTemperature(x)))", "all x.(Sun(x) -> (AverageInSiza(x) & AverageInTemperature(x)))", "all x y z.((Sun(x) & Siza(y) & Galaxy(z)) -> (AverageIn(x,y) & AverageIn(x,z)))", "all x.(Sun(x) -> (AverageInSiza(x) & AverageInTemperatureInGalaxy(x)))", "all x y z.((Sun(x) & Siza(y) & Galaxy(z)) -> (AverageIn(x,y) & AverageInTemperature(x,z)))", "all x y z.((Sun(x) & Siza(y) & Galaxy(z)) -> (AverageInSiza(x,y) & AverageInTemperature(x,z)))", "all x y z.((Sun(x) & Siza(y) & Galaxy(z)) -> (Average(x,y) & Average(x,z)))", "all x.(Sun(x) -> (AverageInSiza(x) & AverageInTemperature(x)))", "all x.(Sun(x) -> (AverageInSiza(x) & AverageInTemperature(x) & InGalaxy(x)))", "all x y.((Sun(x) & Galaxy(y)) -> (AverageInSiza(x,y) | AverageInTemperature(x,y)))", "all x y z.((Sun(x) & Siza(y) & Galaxy(z)) -> (AverageIn(x,y) & AverageIn(x,z)))", "all x y.((Sun(x) & Galaxy(y)) -> (AverageInSiza(x,y) & AverageInTemperature(x,y)))", "all x y.((Sun(x) & Galaxy(y)) -> (AverageInSiza(x) | AverageInTemperature(x,y)))", "all x y.((Sun(x) & Galaxy(y)) -> (AverageInSiza(x) & AverageInTemperature(x,y)))"]}
{"id": "entailmentbank_validation_82", "nl": "as the mass of a celestial object decreases, the surface gravity of that celestial object weakens.", "fol": "", "prediction": ["all x.((CelestialObject(x) & MassDecreases(x)) -> SurfaceGravityWeakens(x))", "all x.((CelestialObject(x) & MassDecrease(x)) -> SurfaceGravityWeakens(x))", "all x y z.((CelestialObject(x) & Mass(y) & Mass(z) & Decreases(y,z)) -> WeakensSurfaceGravity(x))", "all x y.((CelestialObject(x) & MassDecreases(x)) -> SurfaceGravityWeakens(y))", "all x y.((CelestialObject(x) & MassDecrease(x)) -> SurfaceGravityWeakens(y))", "all x y.((CelestialObject(x) & CelestialObject(y) & MassDecreases(x,y)) -> SurfaceGravityWeakens(x,y))", "all x y z.((CelestialObject(x) & Mass(y) & Mass(z) & Decreases(y,z)) -> WeaksSurfaceGravity(x))", "all x y.((CelestialObject(x) & MassDecrease(x,y)) -> SurfaceGravityWeakens(x,y))", "all x y.((CelestialObject(x) & MassDecrease(x)) -> SurfaceGravityWeakens(x,y))", "all x y.((CelestialObject(x) & MassDecreases(x)) -> SurfaceGravityWeakens(x,y))", "all x.((CelestialObject(x) & MassDecreases(x)) -> SurfaceGravityWildens(x))", "all x y.((CelestialObject(x) & MassDecrease(x)) -> SurfaceGravityWeakens(x))", "all x y.((CelestialObject(x) & MassDecreases(x,y)) -> SurfaceGravityWeakens(x,y))", "all x y.((CelestialObject(x) & MassDecreases(x)) -> SurfaceGravityWeakens(x))", "all x y.((CelestialObject(x) & CelestialObject(y) & MassDecreases(x,y)) -> WeakensSurfaceGravity(x,y))", "all x y.((CelestialObject(x) & DecreasesMass(x)) -> WeakensSurfaceGravity(y))"]}
{"id": "entailmentbank_validation_83", "nl": "as the force of gravity decreases, the weight of the object will decrease.", "fol": "", "prediction": ["all x.((ForceOfGravity(x) & DecreasesForceOfGravity(x)) -> WeightDecreases(x))", "all x.((ForceOfGravity(x) & Decreases(x)) -> WeightDecreases(x))", "all x.(DecreasesForceOfGravity(x) -> WeightDecreases(x))", "all x y.((Object(x) & ForceOfGravity(y) & Decreases(x,y)) -> WeightDecreases(x,y))", "all x y.((ForceOfGravity(x) & Object(y) & DecreasesForceOfGravity(x,y)) -> WeightDecreases(y))", "all x y.((ForceOfGravity(x) & Object(y) & DecreasesForceOfGravity(x,y)) -> DecreasesWeight(x,y))", "all x y.((Object(x) & ForceOfGravity(y) & Decreases(x,y)) -> WeightDecreases(x))", "all x y.((ForceOfGravity(x) & Object(y) & DecreasesForceOfGravity(x,y)) -> WeightDecreases(x,y))", "all x.((ForceOfGravity(x) & DecreasesForceOfGravity(x)) -> WeightDecrease(x))", "all x y.((ForceOfGravity(x) & Object(y) & DecreasesForceOfGravity(x)) -> WeightDecreases(y))", "all x y.((ForceOfGravity(x) & Object(y) & DecreasesForceOfGravity(x,y)) -> WeightDecreases(y,x))", "all x y.((ForceOfGravity(x) & Object(y) & DecreasesForceOfGravity(x)) -> DecreasesWeight(y))", "all x.((ForceOfGravity(x) & Decreases(x)) -> WeightDecrease(x))", "all x.((ForceOfGravity(x) & DecreasesForceOfGravity(x)) -> DecreasesWeightOfObject(x))", "all x y.((ForceOfGravity(x) & Object(y) & DecreasesForceOfGravity(x,y)) -> DecreasesWeight(y))", "all x.(DecreasesForceOfGravity(x) -> DecreasesWeightOfObject(x))"]}
{"id": "entailmentbank_validation_84", "nl": "as the mass of a celestial object decreases, the weight of an object on that celestial object will decrease.", "fol": "", "prediction": ["all x y.((CelestialObject(x) & CelestialObject(y) & MassDecreases(x,y)) -> WeightDecreases(x,y))", "all x y.((CelestialObject(x) & CelestialObject(y) & MassDecrease(x,y)) -> WeightDecrease(x,y))", "all x.((CelestialObject(x) & MassDecreases(x)) -> WeightDecreases(x))", "all x y.((CelestialObject(x) & MassDecrease(x)) -> WeightDecrease(y))", "all x y.((CelestialObject(x) & CelestialObject(y) & DecreasesMass(x,y)) -> DecreasesWeight(x,y))", "all x y.((CelestialObject(x) & CelestialObject(y) & DecreasesMass(x,y)) -> WeightDecreases(x,y))", "all x y.((CelestialObject(x) & CelestialObject(y) & MassDecreases(x)) -> WeightDecreases(x,y))", "all x y.((CelestialObject(x) & MassDecrease(x,y)) -> WeightDecrease(x,y))", "all x y.((CelestialObject(x) & CelestialObject(y)) -> (MassDecreases(x,y) & WeightDecreases(x,y)))", "all x.((CelestialObject(x) & MassDecrease(x)) -> WeightDecrease(x))", "all x y.((CelestialObject(x) & CelestialObject(y) & MassDecreases(x,y)) -> WeightDecrease(x,y))", "all x y.((CelestialObject(x) & CelestialObject(y) & MassDecreases(x,y)) -> WeightDecreases(y,x))", "all x y.((CelestialObject(x) & CelestialObject(y) & MassDecreases(x,y)) -> WeightDecreasesOn(x,y))", "all x y.((CelestialObject(x) & CelestialObject(y) & MassDecrease(x)) -> WeightDecrease(x,y))", "all x y.((CelestialObject(x) & MassDecreases(x)) -> WeightDecreases(y))", "all x y.((CelestialObject(x) & CelestialObject(y) & MassDecreases(x,y)) -> WeightDecreases(y))"]}
{"id": "entailmentbank_validation_85", "nl": "the earth has more mass than the moon.", "fol": "", "prediction": ["all x y.((Earth(x) & Moon(y)) -> MoreMass(x,y))", "all x y.((Earth(x) & Moon(y)) -> HasMoreMass(x,y))", "all x y z.((Earth(x) & Moon(y) & Earth(z)) -> MoreMass(x,y,z))", "all x y z.((Earth(x) & Moon(y) & Earth(z)) -> HasMoreMass(x,z))", "all x y z.((Earth(x) & Moon(y) & Earth(z)) -> MoreMass(x,z))", "all x y z.((Earth(x) & Moon(y) & Earth(z)) -> HasMoreMass(x,y,z))", "all x y.((Earth(x) & Moon(y)) -> (HasMoreMass(x,y) & HasMoreMass(x,y)))", "all x.((Earth(x) & Moon(x)) -> MoreMass(x,y))", "all x y z.((Earth(x) & Moon(y) & Earth(z)) -> (HasMoreMass(x,z) & HasMoreMass(x,y)))", "all x y.((Earth(x) & Moon(y) & MoreMass(x,y)) -> MoreMass(x,y))", "all x y z.((Earth(x) & Moon(y) & Earth(z)) -> (HasMoreMass(x,z) | HasMoreMass(x,y)))", "all x y.((Earth(x) & Moon(y)) -> (HasMoreMass(x,y) | HasMoreMass(x,y)))", "all x y.((Earth(x) & Moon(y)) -> (MoreMass(x,y) & MoreMass(x,y)))", "all x y z.((Earth(x) & Moon(y) & Earth(z) & MoreMass(x,z)) -> MoreMass(x,y,z))", "all x y.((Earth(x) & Moon(y)) -> (HasMoreMass(x,y)))", "all x.((Earth(x) & Moon(x)) -> HasMoreMass(x,y))"]}
{"id": "entailmentbank_validation_86", "nl": "an object weighs more on earth than on the moon because earth has more mass than the moon.", "fol": "", "prediction": ["all x y.((Object(x) & Earth(y) & Moon(z)) -> WeighsMore(x,y,z))", "all x y.((Object(x) & Earth(y) & Moon(y)) -> WeighsMore(x,y))", "all x y z.((Object(x) & Earth(y) & Moon(z)) -> WeighsMore(x,y,z))", "all x y z.((Object(x) & Earth(y) & Moon(z) & HasMoreMass(x,y,z)) -> WeighsMore(x,y,z))", "all x y.((Object(x) & Earth(y) & Moon(z) & HasMoreMass(x,y,z)) -> WeighsMore(x,y,z))", "all x y.((Object(x) & Earth(y) & Moon(z)) -> WeighsMoreOn(x,y,z))", "all x y.((Object(x) & Earth(y) & Moon(z) & MoreMass(x,y,z)) -> WeighsMore(x,y,z))", "all x y.((Object(x) & Earth(y) & Moon(x)) -> WeighsMore(x,y))", "all x y.((Object(x) & Earth(y) & Moon(z) & HasMoreMass(x,z)) -> WeighsMore(x,y,z))", "all x y z.((Object(x) & Earth(y) & Moon(z) & HasMoreMass(x,y,z)) -> WeighsMoreOn(x,y,z))", "all x y.((Object(x) & Earth(y) & Moon(y)) -> WeighsMoreOn(x,y))", "all x y.((Object(x) & Earth(y) & Moon(z) & MoreMass(x,y)) -> WeighsMore(x,y,z))", "all x y z.((Object(x) & Earth(y) & Moon(z)) -> WeighsMoreOn(x,y,z))", "all x y z.((Object(x) & Earth(y) & Moon(z) & MoreMass(x,y,z)) -> WeighsMore(x,y,z))", "all x y.((Object(x) & Earth(y) & Moon(z) & HasMoreMass(x,y,z)) -> WeighsMoreOn(x,y,z))", "all x y z.((Object(x) & Earth(y) & Moon(z) & EarthMass(x,y,z)) -> WeighsMore(x,y,z))"]}
{"id": "entailmentbank_validation_87", "nl": "less is the opposite of more.", "fol": "", "prediction": ["all x.(Less(x) -> OppositeOfMore(x))", "all x y.((Less(x) & More(y)) -> OppositeOf(x,y))", "all x.(LessThanMore(x) -> OppositeOfMore(x))", "all x.((Less(x) & More(x)) -> OppositeOf(x,y))", "all x.(LessIsOppositeOfMore(x) -> OppositeOfMore(x))", "all x.(Lower(x) -> OppositeOfMore(x))", "all x.(LessIsOpposeOfMore(x) -> OppositeOfMore(x))", "all x.(Loss(x) -> OppositeOfMore(x))", "all x.(Least(x) -> OppositeOfMore(x))", "all x.(Limit(x) -> OppositeOfMore(x))", "all x.(LessThanMore(x) -> OppositeOfMore(x))", "all x.(LessThin(x) -> OppositeOfMore(x))", "all x.(LessThing(x) -> OppositeOfMore(x))", "all x.(LessThan(x) -> OppositeOfMore(x))", "all x.(Lesser(x) -> OppositeOfMore(x))", "all x.((Less(x) & More(x)) -> OppositeOf(x,More))"]}
{"id": "entailmentbank_validation_88", "nl": "an object will weigh less on the moon than on the earth because the moon has less mass than the earth.", "fol": "", "prediction": ["all x y z.((Object(x) & Moon(y) & Earth(z) & HasLessMass(x,y,z)) -> WeighsLessOn(x,y,z))", "all x y z.((Object(x) & Moon(y) & Earth(z) & HasLessMass(x,y,z)) -> WeighsLess(x,y,z))", "all x y.((Object(x) & Moon(y) & Earth(y)) -> WeighsLess(x,y))", "all x y.((Object(x) & Moon(y) & Earth(z) & HasLessMass(x,y,z)) -> WeighsLessOn(x,y,z))", "all x y.((Object(x) & Moon(y) & Earth(y)) -> WeighsLessOn(x,y))", "all x y.((Object(x) & Moon(y) & Earth(z) & HasLessMass(x,y,z)) -> WeighsLess(x,y,z))", "all x y z.((Object(x) & Moon(y) & Earth(z)) -> WeighsLessOn(x,y,z))", "all x y.((Object(x) & Moon(y) & Earth(z)) -> WeighsLessOn(x,y,z))", "all x y.((Object(x) & Moon(y) & Earth(z)) -> WeighsLess(x,y,z))", "all x y z.((Object(x) & Moon(y) & Earth(z) & HasLessMass(x,y,z)) -> WeighLessOn(x,y,z))", "all x y z.((Object(x) & Moon(y) & Earth(z)) -> WeighsLess(x,y,z))", "all x y.((Object(x) & Moon(y) & Earth(y) & HasLessMass(x,y)) -> WeighsLess(x,y))", "all x y.((Object(x) & Moon(y) & Earth(y) & HasLessMass(x,y)) -> WeighsLessOn(x,y))", "all x y.((Moon(x) & Earth(y)) -> WeighsLess(x,y))", "all x y z.((Object(x) & Moon(y) & Earth(z) & HasLessMass(x,y)) -> WeighsLessOn(x,y,z))", "all x y.((Moon(x) & Earth(y) & MoonLessMass(x,y)) -> WeighsLess(x,y))"]}
{"id": "entailmentbank_validation_89", "nl": "an astronaut is a kind of object.", "fol": "", "prediction": ["all x.(Astronaut(x) -> Object(x))", "all x.(Astronaut(x) -> Object(x))", "all x.(Astronaut(x) -> IsObject(x))", "all x y.((Astronaut(x) & Object(y)) -> Object(x))", "all x.((Astronaut(x) & Object(x)) -> Object(x))", "all x y.((Astronaut(x) & Object(y)) -> Is(x,y))", "all x.(Astronaut(x) -> ArtOfObject(x))", "all x.(Astronaut(x) -> (Object(x) & Object(x)))", "all x y.((Astronaut(x) & Object(y)) -> Object(x,y))", "all x y.((Astronaut(x) & Object(y)) -> TypeOf(x,y))", "all x.(Astronaut(x) -> TypeOfObject(x))", "all x y.((Astronaut(x) & Object(y)) -> KindOf(x,y))", "all x y.((Astronaut(x) & Object(y)) -> ArtOf(x,y))", "exists x.(Astronaut(x) & Object(x))", "all x y.((Astronaut(x) & Object(y)) -> SortOf(x,y))", "all x y.((Astronaut(x) & Object(y)) -> Like(x,y))"]}
{"id": "entailmentbank_validation_90", "nl": "an astronaut will weigh less on the moon than on earth because the moon has less mass than the earth.", "fol": "", "prediction": ["all x y z.((Astronaut(x) & Moon(y) & Earth(z)) -> WeighsLessOn(x,y,z))", "all x y.((Astronaut(x) & Moon(y) & Earth(z)) -> WeighsLessOn(x,y,z))", "all x y z.((Astronaut(x) & Moon(y) & Earth(z) & HasLessMass(x,y,z)) -> WeighsLessOn(x,y,z))", "all x y.((Astronaut(x) & Moon(y) & Earth(y)) -> WeighsLessOn(x,y))", "all x y.((Astronaut(x) & Moon(y) & Earth(y)) -> WeighsLess(x,y))", "all x y z.((Astronaut(x) & Moon(y) & Earth(z)) -> WeighsLess(x,y,z))", "all x y.((Astronaut(x) & Moon(y) & Earth(z)) -> WeighsLess(x,y,z))", "all x y z.((Astronaut(x) & Moon(y) & Earth(z) & HasLessMass(x,y,z)) -> WeighsLess(x,y,z))", "all x y.((Astronaut(x) & Moon(y) & Earth(z) & HasLessMass(x,y,z)) -> WeighsLessOn(x,y,z))", "all x y.((Astronaut(x) & Moon(y) & Earth(z) & HasLessMass(x,y,z)) -> WeighsLess(x,y,z))", "all x y z.((Astronaut(x) & Moon(y) & Earth(z)) -> WeighLessOn(x,y,z))", "all x y.((Astronaut(x) & Moon(y) & Earth(y)) -> WeighLessOn(x,y))", "all x y z.((Astronaut(x) & Moon(y) & Earth(z) & HasLessMass(x,y,z)) -> WeighLessOn(x,y,z))", "all x y.((Astronaut(x) & Moon(y) & Earth(y)) -> WeighLess(x,y))", "all x y.((Astronaut(x) & Moon(y) & Earth(z)) -> WeighLessOn(x,y,z))", "all x y z.((Astronaut(x) & Moon(y) & Earth(z) & HasLessMass(x,y,z)) -> WeighLess(x,y,z))"]}
{"id": "entailmentbank_validation_91", "nl": "using a telescope to photograph solar events requires a light filter.", "fol": "", "prediction": ["all x.((Telescope(x) & PhotographsSolarEvents(x)) -> RequiresLightFilter(x))", "all x.((Telescope(x) & PhotographSolarEvents(x)) -> RequiresLightFilter(x))", "all x y.((Telescope(x) & SolarEvent(y) & Photograph(x,y)) -> RequiresLightFilter(x))", "all x y.((Telescope(x) & SolarEvent(y) & Photographs(x,y)) -> RequiresLightFilter(x))", "all x y.((Telescope(x) & SolarEvent(y)) -> RequiresLightFilter(x,y))", "all x.((Telescope(x) & UsesToPhotographSolarEvents(x)) -> RequiresLightFilter(x))", "all x y.((Telescope(x) & SolarEvent(y)) -> RequiresLightFilter(x))", "all x y.((Telescope(x) & SolarEvent(y) & Uses(x,y)) -> RequiresLightFilter(x))", "all x.((UsingTelescope(x) & PhotographSolarEvents(x)) -> RequiresLightFilter(x))", "all x.((UsingTelescope(x) & PhotographsSolarEvents(x)) -> RequiresLightFilter(x))", "all x.((Telescope(x) & PhotographySolarEvents(x)) -> RequiresLightFilter(x))", "all x y z.((Telescope(x) & SolarEvent(y) & LightFilter(z)) -> Requires(x,y,z))", "all x y.((Telescope(x) & SolarEvent(y) & Photograph(x,y)) -> RequiresLightFilter(x,y))", "all x y.((Telescope(x) & PhotographSolarEvents(y)) -> RequiresLightFilter(x))", "all x y.((Telescope(x) & SolarEvent(y) & Photographs(x,y)) -> RequiresLightFilter(x,y))", "all x y.((Telescope(x) & PhotographSolarEvents(y)) -> RequiresLightFilter(x,y))"]}
{"id": "entailmentbank_validation_92", "nl": "a solar flare is a kind of solar event.", "fol": "", "prediction": ["all x.(SolarFlash(x) -> SolarEvent(x))", "all x y.((SolarFlash(x) & SolarEvent(y)) -> SolarEvent(x))", "all x y.((SolarFlash(x) & SolarEvent(y)) -> SolarEvent(x,y))", "all x.(SolarFlare(x) -> SolarEvent(x))", "all x.((SolarFlash(x) & SolarEvent(x)) -> SolarEvent(x))", "all x.(SolarFlame(x) -> SolarEvent(x))", "all x.(SolarFlash(x) -> SolarEvent(x))", "all x y z.((SolarFlash(x) & SolarEvent(y) & SolarEvent(z)) -> SolarEvent(x,y,z))", "all x.(SolarFlare(x) -> SolarEvent(x))", "all x y z.((SolarFlash(x) & SolarEvent(y) & Event(z)) -> SolarEvent(x,y,z))", "all x y z.((SolarFlash(x) & SolarEvent(y) & SolarEvent(z)) -> SolarEvent(x))", "all x y.((SolarFlare(x) & SolarEvent(y)) -> SolarEvent(x,y))", "all x y.((SolarFlare(x) & SolarEvent(y)) -> SolarEvent(x))", "all x y.((SolarFlash(x) & Event(y)) -> SolarEvent(x,y))", "all x y z.((SolarFlash(x) & SolarEvent(y) & SolarEvent(z)) -> SolarEvent(y))", "exists x.(SolarFlash(x) & SolarEvent(x))"]}
{"id": "entailmentbank_validation_93", "nl": "a solar prominence is a kind of solar event.", "fol": "", "prediction": ["all x.(SolarProminence(x) -> SolarEvent(x))", "all x.(SolarPresence(x) -> SolarEvent(x))", "all x.((SolarProminence(x) & SolarEvent(x)) -> SolarEvent(x))", "all x y.((SolarProminence(x) & SolarEvent(y)) -> SolarEvent(x))", "all x.(SolarPredominance(x) -> SolarEvent(x))", "all x.(SolarProminence(x) -> SolarEvent(x))", "all x y.((SolarProminence(x) & SolarEvent(y)) -> SolarEvent(x,y))", "all x.((SolarPresence(x) & SolarEvent(x)) -> SolarEvent(x))", "all x y.((SolarPresence(x) & SolarEvent(y)) -> SolarEvent(x))", "all x y.((SolarPresence(x) & SolarEvent(y)) -> SolarEvent(x,y))", "all x.(SolarProfessess(x) -> SolarEvent(x))", "all x.(SolarProfessement(x) -> SolarEvent(x))", "all x.(SolarPresence(x) -> SolarEvent(x))", "all x.(SolarPresidence(x) -> SolarEvent(x))", "all x.((SolarProminence(x) & SolarEvent(x)) -> IsSolarEvent(x))", "all x y.((SolarProminence(x) & SolarEvent(y)) -> SolarEvent(y))"]}
{"id": "entailmentbank_validation_94", "nl": "using a telescope to photograph a solar prominence and a solar flare requires a light filter.", "fol": "", "prediction": ["all x y.((Telescope(x) & SolarProminence(y) & SolarFlash(x)) -> (Photographs(x,y) & RequiresLightFilter(x)))", "all x y.((Telescope(x) & SolarFlash(y)) -> (PhotographsSolarProminence(x) & RequiresLightFilter(y)))", "all x y z.((Telescope(x) & SolarProminence(y) & SolarFlash(z)) -> (Photographs(x,y) & RequiresLightFilter(z)))", "all x y.((Telescope(x) & SolarProminence(y)) -> (Photographs(x,y) & RequiresLightFilter(x)))", "all x y.((Telescope(x) & SolarFlash(y)) -> (PhotographsSolarProminence(x,y) & RequiresLightFilter(y,x)))", "all x y z.((Telescope(x) & SolarProminence(y) & SolarFlash(z)) -> (Photographs(x,y) & RequiresLightFilter(x,z)))", "all x y.((Telescope(x) & SolarProminence(y) & SolarFlash(y)) -> (Photographs(x,y) & RequiresLightFilter(y)))", "all x y.((Telescope(x) & SolarProminence(y) & SolarFlash(z)) -> (Photographs(x,y) & RequiresLightFilter(z)))", "all x y.((Telescope(x) & SolarProminence(y)) -> Photographs(x,y)) & (SolarFlash(x) -> RequiresLightFilter(x)))", "all x y.((Telescope(x) & SolarProminence(y) & SolarFlash(y)) -> (Photographs(x,y) & RequiresLightFilter(x)))", "all x y.((Telescope(x) & SolarFlash(y)) -> (PhotographsSolarProminence(x,y) & RequiresLightFilter(y)))", "all x y z.((Telescope(x) & SolarProminence(y) & SolarFlash(z)) -> (Photographs(x,y) & RequiresLightFilter(x)))", "all x y z.((Telescope(x) & SolarProminence(y) & SolarFlash(z)) -> (Photographs(x,y) & RequiresLightFilter(z,y)))", "all x y.((Telescope(x) & SolarProminence(y) & SolarFlash(z)) -> (Photographs(x,y) & RequiresLightFilter(x,z)))", "all x y.((Telescope(x) & SolarFlash(y)) -> (PhotographsSolarProminence(x,y) & RequiresLightFilter(x,y)))", "all x y.((Telescope(x) & SolarProminence(y)) -> Photograph(x,y)) & (SolarFlash(x) -> RequiresLightFilter(x)))"]}
{"id": "entailmentbank_validation_95", "nl": "if something is required for something else then that something allows that something else.", "fol": "", "prediction": ["all x y.((RequiredFor(x,y) & Other(y)) -> Allows(x,y))", "all x y.((RequiredFor(x,y) & RequiredFor(x,y)) -> Allows(x,y))", "all x.((RequiredForAnother(x) & AllowsAnother(x)) -> AllowsAnother(x))", "all x y.((RequiredFor(x,y) & SomethingOther(y)) -> Allows(x,y))", "all x.((RequiredFor(x,y) & Other(y)) -> Allows(x,y))", "all x y.((Required(x) & Other(y)) -> Allows(x,y))", "all x.((RequiredForAnother(x)) -> AllowsAnother(x))", "all x.((RequiredFor(x) & Allows(x)) -> Allows(x))", "all x y.((RequiredFor(x,y) & RequiredFor(y,x)) -> Allows(x,y))", "all x y z.((RequiredFor(x,y) & Other(z)) -> Allows(x,z))", "all x y.((RequiredFor(x,y) & Other(x)) -> Allows(x,y))", "all x y.((RequiredFor(x,y) & Something(y)) -> Allows(x,y))", "all x y.((RequiredFor(x,y) & Something(x)) -> Allows(x,y))", "all x y.((RequiredFor(x,y)) -> Allows(x,y))", "all x.((RequiredFor(x) & Allows(x,y)) -> Allows(x,y))", "all x y.((RequiredFor(x,y) & Something(y)) -> Allows(y,x))"]}
{"id": "entailmentbank_validation_96", "nl": "detailed observation of celestial objects requires a telescope.", "fol": "", "prediction": ["all x.(DetailedObservationOfCelestialObjects(x) -> RequiresTelescope(x))", "all x.((DetailedObservationOfCelestialObjects(x) & RequiresTelescope(x)) -> RequiresTelescope(x))", "all x y.((DetailedObservationOfCelestialObjects(x) & Telescope(y)) -> Requires(x,y))", "all x.((DetailedObservationOfCelestialObjects(x) & RequiresTelescope(x)) -> Requires(x))", "all x y.((DetailedObservation(x) & CelestialObject(y)) -> RequiresTelescope(x,y))", "all x.((DetailedObservationOfCelestialObjects(x) & RequiresTelescope(x)) -> Requires(x,y))", "all x y.((DetailedObservation(x) & CelestialObject(y)) -> RequiresTelescope(x))", "all x y.((CelestialObject(x) & Telescope(y)) -> Requires(x,y))", "all x.((DetailedObservation(x) & CelestialObject(x)) -> RequiresTelescope(x))", "all x y.((DetailedObservation(x) & CelestialObject(y) & RequiresTelescope(x,y)) -> Requires(x,y))", "all x.(DetailledObservationOfCelestialObjects(x) -> RequiresTelescope(x))", "all x.(DetailedObservationOfCelestialObjectsRequiresTelescope(x) -> RequiresTelescope(x))", "all x.((DetailedObservationOfCelestialObjects(x) & RequiresTelescope(x)) -> Requires(x,Telescope))", "all x y.((DetailedObservationOf(x,y) & CelestialObject(y)) -> RequiresTelescope(x))", "all x y.((DetailedObservation(x) & CelestialObject(y) & RequiresTelescope(x)) -> Requires(x,y))", "all x.((DetailedObservationOfCelestialObjects(x)) -> RequiresTelescope(x))"]}
{"id": "entailmentbank_validation_97", "nl": "telescopes allow the detailed observation of celestial objects.", "fol": "", "prediction": ["all x.(Telescope(x) -> AllowsDetailedObservationOfCelestialObjects(x))", "all x y.((Telescope(x) & CelestialObject(y)) -> AllowsDetailedObservation(x,y))", "all x y z.((Telescope(x) & CelestialObject(y) & CelestialObject(z)) -> AllowsDetailedObservation(x,y,z))", "all x y z.((Telescope(x) & CelestialObject(y) & Object(z)) -> AllowsDetailedObservation(x,y,z))", "all x.(Telescope(x) -> AllowsDetailedObservation(x))", "all x y.((Telescope(x) & CelestialObject(y) & AllowsDetailedObservation(x,y)) -> AllowsDetailedObservation(x,y))", "all x y z.((Telescope(x) & CelestialObject(y) & CelestialObject(z) & AllowsDetailedObservation(x,y,z)) -> AllowsDetailedObservation(x,y,z))", "all x.(Telescope(x) -> AllowsDetailledObservationOfCelestialObjects(x))", "all x.(Telescope(x) -> (AllowsDetailedObservationOfCelestialObjects(x) & AllowsDetailedObservationOfCelestialObjects(x)))", "all x y z.((Telescope(x) & CelestialObject(y) & Object(z) & AllowsDetailedObservation(x,y,z)) -> AllowsDetailedObservation(x,y,z))", "all x y z.((Telescope(x) & CelestialObject(y) & Telescope(z)) -> AllowsDetailedObservation(x,y,z))", "all x.(Telescope(x) -> AllowsDetailsObservationOfCelestialObjects(x))", "all x y z.((Telescope(x) & CelestialObject(y) & CelestialObject(z) & AllowsDetailedObservation(x,y,z)) -> AllowsDetailedObservation(x,y))", "all x y z.((Telescope(x) & CelestialObject(y) & Object(z) & AllowsDetailedObservation(x,y,z)) -> AllowsDetailedObservation(x,y))", "all x.(Telescope(x) -> AllowsDetailedObservation(x,CelestialObjects))", "all x y z.((Telescope(x) & CelestialObject(y) & CelestialObject(z) & AllowsDetailedObservation(x,y)) -> AllowsDetailedObservation(x,z))"]}
{"id": "entailmentbank_validation_98", "nl": "a planet is a kind of celestial object / celestial body.", "fol": "", "prediction": ["all x.(Planet(x) -> (CelestialObject(x) & CelestialBody(x)))", "all x.(Planet(x) -> (CelestialObject(x) | CelestialBody(x)))", "all x.(Planet(x) -> (CelestialObject(x) & CelestialBody(x)))", "all x y.((Planet(x) & CelestialObject(y)) -> CelestialBody(x))", "all x.(Planet(x) -> (CelestialObject(x) | CelestialBody(x)))", "all x y.((Planet(x) & CelestialObject(y)) -> CelestialBody(x,y))", "all x.(Planet(x) -> CelestialObject(x))", "all x y z.((Planet(x) & CelestialObject(y) & CelestialBody(z)) -> (CelestialObject(x,y) & CelestialBody(x,z)))", "all x y z.((Planet(x) & CelestialObject(y) & CelestialBody(z)) -> (CelestialObject(y) & CelestialBody(z)))", "all x.(Planet(x) -> (exists y.(CelestialObject(y) & LocatedIn(x,y))) & exists z.(CelestialBody(z) & LocatedIn(x,z)))))", "all x y z.((Planet(x) & CelestialObject(y) & CelestialBody(z)) -> (CelestialObject(x) & CelestialBody(x)))", "all x.(Planet(x) -> (exists y.(CelestialObject(y) & LocatedIn(x,y))) & exists z.(CelestialBody(z) & LocatedIn(x,z))))", "all x y z.((Planet(x) & CelestialObject(y) & CelestialBody(z)) -> CelestialObject(x,y,z))", "all x.(Planet(x) -> CelestialObject(x) & CelestialBody(x))", "all x y z.((Planet(x) & CelestialObject(y) & CelestialBody(z)) -> (CelestialObject(x,y) | CelestialBody(x,z)))", "all x y.((Planet(x) & CelestialObject(y) & CelestialBody(x)) -> CelestialObject(x,y))"]}
{"id": "entailmentbank_validation_99", "nl": "telescopes allow the detailed observation of planets.", "fol": "", "prediction": ["all x.(Telescope(x) -> AllowsDetailedObservationOfPlanets(x))", "all x y.((Telescope(x) & Planet(y)) -> AllowsDetailedObservation(x,y))", "all x y z.((Telescope(x) & Planet(y) & Planet(z)) -> AllowsDetailedObservation(x,y,z))", "all x.(Telescope(x) -> AllowsDetailedObservation(x))", "all x y.((Telescope(x) & Planet(y) & AllowsDetailedObservation(x,y)) -> AllowsDetailedObservation(x,y))", "all x y z.((Telescope(x) & Planet(y) & Planet(z) & AllowsDetailedObservation(x,y,z)) -> AllowsDetailedObservation(x,y,z))", "all x.(Telescope(x) -> AllowsDetailedObservation(x,Planets))", "all x.(Telescope(x) -> AllowsDetailledObservationOfPlanets(x))", "all x y z.((Telescope(x) & Planet(y) & Planet(z) & AllowsDetailedObservation(x,y,z)) -> AllowsDetailedObservation(x,y))", "all x.(Telescope(x) -> AllowsDetailedObservationOfPlanet(x))", "all x y.((Telescope(x) & Planet(y)) -> AllowsDetailedObservationOf(x,y))", "all x.(Telescope(x) -> (AllowsDetailedObservationOfPlanets(x) & AllowsDetailedObservationOfPlanets(x)))", "all x y z.((Telescope(x) & Planet(y) & Planet(z) & AllowsDetailedObservation(x,y)) -> AllowsDetailedObservation(x,z))", "all x.(Telescope(x) -> AllowsDetailedObservation(x,Planet))", "all x y z.((Telescope(x) & Planet(y) & Planet(z)) -> AllowsDetailedObservation(x,y))", "all x y z.((Telescope(x) & Planet(y) & Planet(z)) -> AllowsDetailsObservation(x,y,z))"]}
{"id": "entailmentbank_validation_100", "nl": "gravity causes orbits.", "fol": "", "prediction": ["all x.(Gravity(x) -> CausesOrbits(x))", "all x y.((Gravity(x) & Orbit(y)) -> Causes(x,y))", "all x.(GravityCausesOrbits(x) -> GravityCausesOrbits(x))", "all x y z.((Gravity(x) & Orbit(y) & Gravity(z)) -> Causes(x,y,z))", "all x y z.((Gravity(x) & Orbit(y) & Gravity(z)) -> Causes(x,y))", "all x.(GravityCausesOrbits(x) -> CausesOrbits(x))", "all x.(Germination(x) -> CausesOrbits(x))", "all x.(GravityCausesOrbits(x) -> Gravity(x))", "all x.((Gravity(x) & CausesOrbits(x)) -> GravityCausesOrbits(x))", "all x y z.((Gravity(x) & Orbit(y) & Orbit(z)) -> Causes(x,y,z))", "all x y.((Gravity(x) & Orbit(y)) -> Cause(x,y))", "all x y.((Germination(x) & Orbit(y)) -> Causes(x,y))", "all x y.((Gravity(x) & Orbit(y)) -> CausedBy(x,y))", "all x y z.((Gravity(x) & Orbit(y) & Gravity(z)) -> Cause(x,y,z))", "all x y.((Gravity(x) & Orbit(y)) -> Causes(x,y))", "all x y z.((Gravity(x) & Orbit(y) & Gravitational(z)) -> Causes(x,y,z))"]}
{"id": "entailmentbank_validation_101", "nl": "gravity causes the earth to revolve around the sun.", "fol": "", "prediction": ["all x y z.((Gravity(x) & Earth(y) & Sun(z)) -> CausesRevolvesAround(y,z))", "all x y z.((Gravity(x) & Earth(y) & Sun(z)) -> CausesRevolvesAround(x,y,z))", "all x y z.((Gravity(x) & Earth(y) & Sun(z)) -> CausesToRevokeAround(x,y,z))", "all x y z.((Gravity(x) & Earth(y) & Sun(z)) -> CausesToRevokeAround(y,z))", "all x y.((Gravity(x) & Earth(y)) -> RevolveAroundSun(x,y))", "all x y z.((Gravity(x) & Earth(y) & Sun(z)) -> RevolvesAround(y,z))", "all x y.((Gravity(x) & Earth(y)) -> RevolveAround(y,x))", "all x y z.((Gravity(x) & Earth(y) & Sun(z)) -> RevolveAround(y,z))", "all x y.((Gravity(x) & Earth(y)) -> RevolveAroundSun(y,x))", "all x y z.((Gravity(x) & Earth(y) & Sun(z)) -> RevolvesAround(y,z))", "all x y.((Gravity(x) & Earth(y)) -> RevolvesAroundSun(x,y))", "all x y.((Gravity(x) & Earth(y)) -> RevolveAround(x,y))", "all x y z.((Gravity(x) & Earth(y) & Sun(z)) -> CausesToRevolveAround(x,y,z))", "all x y z.((Gravity(x) & Earth(y) & Sun(z)) -> CausesRevolvingAround(y,z))", "all x.(GravityCausesEarthToRevokeAroundSun(x) -> EarthRevolvesAroundSun(x))", "all x y z.((Gravity(x) & Earth(y) & Sun(z)) -> CausesToRevolveAround(y,z))"]}
{"id": "entailmentbank_validation_102", "nl": "the moon orbits the earth.", "fol": "", "prediction": ["all x y.((Moon(x) & Earth(y)) -> Orbits(x,y))", "all x.(Moon(x) -> OrbitsEarth(x))", "all x y z.((Moon(x) & Earth(y) & Earth(z)) -> Orbits(x,y,z))", "all x y z.((Moon(x) & Earth(y) & Orbits(x,y)) -> Orbits(x,z))", "all x y z.((Moon(x) & Earth(y) & Orbits(x,y)) -> Orbits(x,y))", "all x y z.((Moon(x) & Earth(y) & Orbits(x,z)) -> Orbits(x,y))", "all x y z.((Moon(x) & Earth(y) & Earth(z)) -> Orbits(x,y))", "all x y z.((Moon(x) & Earth(y)) -> Orbits(x,y))", "all x y z.((Moon(x) & Earth(y) & Earth(z) & Orbits(x,y,z)) -> Orbits(x,y,z))", "all x y z.((Moon(x) & Earth(y) & Orbits(x,z)) -> Orbits(x,y,z))", "exists x y.(Moon(x) & Earth(y) & Orbits(x,y))", "all x y.((Moon(x) & Earth(y) & Orbits(x,y)) -> Orbits(x,y))", "all x y.((Moon(x) & Earth(y)) -> Orbit(x,y))", "all x y z.((Moon(x) & Earth(y) & Moon(z)) -> Orbits(x,y,z))", "all x y z.((Moon(x) & Earth(y) & Earth(z)) -> Orbits(x,z))", "all x y z.((Moon(x) & Earth(y) & Earth(z) & Orbits(x,y,z)) -> Orbits(x,y))"]}
{"id": "entailmentbank_validation_103", "nl": "gravity causes the moon to orbit the earth.", "fol": "", "prediction": ["all x y.((Moon(x) & Gravity(y)) -> OrbitsEarth(x,y))", "all x y z.((Moon(x) & Gravity(y) & Earth(z)) -> CausesOrbit(x,y,z))", "all x y.((Moon(x) & Gravity(y)) -> CausesOrbit(x,y))", "all x y z.((Moon(x) & Gravity(y) & Earth(z)) -> Orbits(x,y,z))", "all x y.((Moon(x) & Gravity(y)) -> Orbits(x,y))", "all x y z.((Moon(x) & Gravity(y) & Earth(z)) -> CausesToOrbit(x,y,z))", "all x y.((Moon(x) & Gravity(y) & Causes(x,y)) -> OrbitsEarth(x))", "all x y z.((Moon(x) & Gravity(y) & Earth(z)) -> CausesMoonToOrbit(x,y,z))", "all x.((Moon(x) & Gravity(x)) -> OrbitsEarth(x))", "all x y z.((Moon(x) & Gravity(y) & Earth(z)) -> Orbit(x,y,z))", "all x y z.((Moon(x) & Gravity(y) & Earth(z) & Causes(x,y,z)) -> Orbits(x,y,z))", "all x y z.((Moon(x) & Gravity(y) & Earth(z)) -> CausesOrbiting(x,y,z))", "all x y.((Moon(x) & Gravity(y)) -> OrbitEarth(x,y))", "all x y z.((Moon(x) & Gravity(y) & Earth(z) & Causes(x,y)) -> Orbits(x,z))", "all x y.((Moon(x) & Gravity(x) & Earth(y)) -> Orbits(x,y))", "all x y.((Moon(x) & Gravity(y)) -> Orbit(x,y))"]}
{"id": "entailmentbank_validation_104", "nl": "gravity causes both the orbit of the earth around the sun and the orbit of the moon around the earth.", "fol": "", "prediction": ["all x y z.((Gravity(x) & Earth(y) & Moon(z)) -> (Orbit(x,y) & Orbit(x,z)))", "all x y z.((Gravity(x) & Earth(y) & Moon(z)) -> (CausesOrbit(x,y) & CausesOrbit(x,z)))", "all x y z.((Gravity(x) & Earth(y) & Moon(z)) -> (OrbitOf(x,y) & OrbitOf(x,z)))", "all x y.((Gravity(x) & Earth(y)) -> (Orbit(x,y) & Orbit(x,y)))", "all x y.((Gravity(x) & Earth(y)) -> (OrbitOfSun(x,y) & OrbitOfMoon(x,y)))", "all x y.((Gravity(x) & Earth(y)) -> (OrbitAroundSun(x,y) & OrbitAroundMoon(x,y)))", "all x y.((Gravity(x) & Earth(y)) -> (OrbitOf(x,y) & OrbitOf(x,y)))", "all x y z.((Gravity(x) & Earth(y) & Moon(z)) -> (OrbitAround(y,z) & OrbitAround(z,y)))", "all x.(Gravity(x) -> (OrbitOfEarthAroundSun(x) & OrbitOfMoonAroundEarth(x)))", "all x y z.((Gravity(x) & Earth(y) & Moon(z)) -> (Orbit(x,y) & Orbit(z,y)))", "all x y.((Gravity(x) & Earth(y)) -> (Orbit(x,y) & Orbit(x,y) & Orbit(x,y)))", "all x y z.((Gravity(x) & Earth(y) & Moon(z)) -> (Orbit(y,x) & Orbit(z,y)))", "all x y.((Gravity(x) & Earth(y) & Moon(z)) -> (Orbit(x,y) & Orbit(x,z)))", "all x y z.((Gravity(x) & Earth(y) & Moon(z)) -> (Orbit(y,z) & Orbit(z,y)))", "all x y.((Gravity(x) & Earth(y)) -> (OrbitOf(x,y) & OrbitOfMoon(x,y)))", "all x y z.((Gravity(x) & Earth(y) & Moon(z)) -> (Orbit(x,y) & Orbit(y,z)))"]}
{"id": "entailmentbank_validation_105", "nl": "spring tide is when the distance between high tide and low tide is the greatest.", "fol": "", "prediction": ["all x y.((SpringTidal(x) & HighTidal(y) & LowTidal(y)) -> DistanceGreatest(x,y))", "all x y z.((SpringTidal(x) & HighTidal(y) & LowTidal(z)) -> DistanceGreatest(x,y,z))", "all x.((HighTidal(x) & LowTidal(x)) -> GreatestDistance(x))", "all x.((HighTidal(x) & LowTidal(x)) -> DistanceGreatest(x))", "all x.((HighTide(x) & LowTide(x)) -> DistanceGreatest(x))", "all x y.((SpringTidal(x) & HighTidal(y) & LowTidal(y)) -> GreatestDistance(x,y))", "all x.((HighTide(x) & LowTide(x)) -> GreatestDistance(x))", "all x y.((SpringTide(x) & HighTide(y) & LowTide(y)) -> DistanceGreatest(x,y))", "all x y z.((SpringTide(x) & HighTide(y) & LowTide(z)) -> DistanceGreatest(x,y,z))", "all x.((HighTiece(x) & LowTiece(x)) -> DistanceGreatest(x))", "all x y.((SpringTidal(x) & HighTidal(y) & LowTidal(z)) -> DistanceGreatest(x,y,z))", "all x y.((SpringTide(x) & HighTidal(y) & LowTidal(y)) -> DistanceGreatest(x,y))", "all x y.((SpringTidal(x) & HighTide(y) & LowTidal(y)) -> DistanceGreatest(x,y))", "all x y z.((SpringTidal(x) & HighTidal(y) & LowTidal(z)) -> DistanceGreatest(y,z))", "all x y.((SpringTide(x) & HighTide(y) & LowTide(y)) -> GreatestDistance(x,y))", "all x y z.((SpringTidal(x) & HighTidal(y) & LowTidal(z)) -> DistanceGreatest(x,y))"]}
{"id": "entailmentbank_validation_106", "nl": "spring tides occur during a full moon.", "fol": "", "prediction": ["all x y.((SpringTidal(x) & FullMoon(y)) -> OccursDuring(x,y))", "all x y.((SpringTide(x) & FullMoon(y)) -> OccursDuring(x,y))", "all x y z.((SpringTidal(x) & FullMoon(y) & FullMoon(z)) -> OccursDuring(x,y,z))", "all x y z.((SpringTide(x) & FullMoon(y) & FullMoon(z)) -> OccursDuring(x,y,z))", "all x.(SpringTide(x) -> OccursDuringFullMoon(x))", "all x.((SpringTide(x) & FullMoon(x)) -> OccursDuring(x,y))", "all x.((SpringTidal(x) & FullMoon(x)) -> OccursDuring(x,y))", "all x.(SpringTidal(x) -> OccursDuringFullMoon(x))", "all x y.((SpringTidy(x) & FullMoon(y)) -> OccursDuring(x,y))", "all x y.((FullMoon(x) & SpringTidal(y)) -> OccursDuring(y,x))", "all x.((SpringTidal(x) & FullMoon(x)) -> OccursDuring(x))", "all x y.((SpringTide(x) & FullMoon(y)) -> Occurs(x,y))", "all x.(SpringTidal(x) -> OccursDuringFullMoon(x))", "all x y.((SpringTidal(x) & FullMoon(y)) -> Occurs(x,y))", "all x.((SpringTidal(x) & FullMoon(x)) -> Occurs(x))", "all x.((SpringTide(x) & FullMoon(x)) -> Occurs(x))"]}
{"id": "entailmentbank_validation_107", "nl": "the highest tides occur during a full moon.", "fol": "", "prediction": ["all x.((Tide(x) & FullMoon(x)) -> Highest(x))", "all x y.((Tide(x) & FullMoon(y)) -> Highest(x,y))", "all x y.((Tidal(x) & FullMoon(y)) -> Highest(x,y))", "all x y.((HighestTide(x) & FullMoon(y)) -> OccursDuring(x,y))", "all x y.((HighestTidal(x) & FullMoon(y)) -> OccursDuring(x,y))", "all x.((Tidal(x) & FullMoon(x)) -> Highest(x))", "all x y.((Tide(x) & FullMoon(y)) -> HighestDuring(x,y))", "all x y z.((Tide(x) & FullMoon(y) & FullMoon(z)) -> Highest(x,y,z))", "all x y z.((Tide(x) & FullMoon(y) & FullMoon(z)) -> Highest(x,y))", "all x y z.((Tidal(x) & FullMoon(y) & FullMoon(z)) -> Highest(x,y,z))", "all x.((HighestTide(x) & FullMoon(x)) -> OccursDuring(x,y))", "all x y z.((Tidal(x) & FullMoon(y) & FullMoon(z)) -> Highest(x,y))", "all x y.((Tidal(x) & FullMoon(y)) -> HighestDuring(x,y))", "all x y.((Tide(x) & FullMoon(y) & OccursDuring(x,y)) -> Highest(x,y))", "all x.((Tidest(x) & FullMoon(x)) -> OccursDuring(x,y))", "all x.((HighestTidal(x) & FullMoon(x)) -> OccursDuring(x,y))"]}
{"id": "entailmentbank_validation_108", "nl": "marine fossils means fossils of marine animals.", "fol": "", "prediction": ["all x y.((MarineFossil(x) & MarineAnimal(y)) -> MeansFossil(x,y))", "all x y z.((MarineFossil(x) & MarineAnimal(y) & MarineAnimal(z)) -> MeansFossil(x,y,z))", "all x.(MarineFossil(x) -> MeansFossilOfMarineAnimals(x))", "all x y.((MarineFossil(x) & MarineAnimal(y)) -> Fossil(x,y))", "all x y.((MarineFossil(x) & MarineAnimal(y)) -> Means(x,y))", "all x y z.((MarineFossil(x) & MarineAnimal(y) & MarineAnimal(z)) -> Means(x,y,z))", "all x.(MarineFossil(x) -> MeansFossil(x))", "all x y z.((MarineFossil(x) & MarineAnimal(y) & MarineAnimal(z)) -> Fossil(x,y,z))", "all x y.((MarineFossil(x) & MarineAnimal(y)) -> MeansFossils(x,y))", "all x.(MarineFossil(x) -> MeansFossil(x,MarineAnimals))", "all x.(MarineFossil(x) -> MeansFossilsOfMarineAnimals(x))", "all x y.((MarineFossil(x) & MarineAnimal(y)) -> (MeansFossil(x,y) & MarineAnimal(y)))", "all x.((MarineFossil(x) & MarineAnimal(y)) -> MeansFossil(x,y))", "all x y z.((MarineFossil(x) & MarineAnimal(y) & MarineAnimal(z)) -> MeansFossils(x,y,z))", "all x y z.((MarineFossil(x) & MarineAnimal(y) & MarineAnimal(z)) -> MeansFossil(x,y))", "all x y.((MarineFossil(x) & MarineAnimal(y)) -> MeansFossilOf(x,y))"]}
{"id": "entailmentbank_validation_109", "nl": "marine animals are water animals.", "fol": "", "prediction": ["all x.(MarineAnimal(x) -> WaterAnimal(x))", "all x y.((MarineAnimal(x) & WaterAnimal(y)) -> WaterAnimal(x))", "all x y.((MarineAnimal(x) & WaterAnimal(y)) -> WaterAnimal(x,y))", "all x y.((MarineAnimal(x) & AquaticAnimal(y)) -> WaterAnimal(x))", "all x.((MarineAnimal(x) & WaterAnimal(x)) -> WaterAnimal(x))", "all x y.((MarineAnimal(x) & MarineAnimal(y)) -> WaterAnimal(x))", "all x y.((MarineAnimal(x) & Animal(y)) -> Water(x))", "all x.(MarineAnimal(x) -> WaterAnimal(x))", "all x.(MountainAnimal(x) -> WaterAnimal(x))", "all x y.((MarineAnimal(x) & Animal(y)) -> WaterAnimal(x))", "all x y.((MarineAnimal(x) & Aquatic(y)) -> WaterAnimal(x))", "all x y.((MarineAnimal(x) & AquaticAnimal(y)) -> WaterAnimal(x,y))", "all x y.((MarineAnimal(x) & WaterAnimal(y)) -> AquaticAnimal(x))", "all x y.((MarineAnimal(x) & MarineAnimal(y)) -> WaterAnimal(x,y))", "all x.(MarineAnimal(x) -> AquaticAnimal(x))", "all x y.((MarineAnimal(x) & WaterAnimal(y)) -> Animal(x,y))"]}
{"id": "entailmentbank_validation_110", "nl": "marine fossils are fossils of water animals.", "fol": "", "prediction": ["all x.(MarineFossil(x) -> FossilOfWaterAnimals(x))", "all x y.((MarineFossil(x) & WaterAnimal(y)) -> Fossil(x,y))", "all x.(MarineFossil(x) -> WaterAnimalFossil(x))", "all x.(MarineFossil(x) -> (FossilOfWaterAnimals(x)))", "all x y z.((MarineFossil(x) & WaterAnimal(y) & WaterAnimal(z)) -> Fossil(x,y,z))", "all x.(MarineFossil(x) -> WaterAnimal(x))", "all x.(MarineFossil(x) -> (Fossil(x) & WaterAnimal(x)))", "all x.(MarineFossil(x) -> (FossilOfWaterAnimals(x) & -FossilOfWaterAnimals(x)))", "all x.(MarineFossil(x) -> (WaterAnimalFossil(x) & WaterAnimalFossil(x)))", "all x.(MarineFossil(x) -> (FossilOfWaterAnimals(x) | FossilOfWaterAnimals(x)))", "all x y.((MarineFossil(x) & WaterAnimal(y)) -> FossilOf(x,y))", "all x.(MarineFossil(x) -> (FossilOfWaterAnimals(x) & FossilOfWaterAnimals(x)))", "all x.(MarineFossil(x) -> (FossilOfWaterAnimals(x) & WaterAnimal(x)))", "all x.(MarineFossil(x) -> (Fossil(x,waterAnimal) & Fossil(x,waterAnimal)))", "all x.(MarineFossil(x) -> (FossilOfWaterAnimals(x) & WaterAnimals(x)))", "all x.(MarineFossil(x) -> (WaterAnimal(x) & Fossil(x)))"]}
{"id": "entailmentbank_validation_111", "nl": "marine fossils are found in mountains.", "fol": "", "prediction": ["all x.(MarineFossil(x) -> FoundInMountains(x))", "all x y.((MarineFossil(x) & Mountain(y)) -> FoundIn(x,y))", "all x y z.((MarineFossil(x) & Mountain(y) & Mountain(z)) -> FoundIn(x,y,z))", "all x y.((MarineFossil(x) & Mountains(y)) -> FoundIn(x,y))", "all x.(MarineFossil(x) -> FoundInMountain(x))", "all x.(MarineFossil(x) -> FoundIn(x,Mountains))", "all x y z.((MarineFossil(x) & Mountain(y) & Mountains(z)) -> FoundIn(x,y,z))", "all x y z.((MarineFossil(x) & Mountain(y) & Mountain(z)) -> FoundIn(x,y))", "all x.(MarineFossil(x) -> FoundInMountains(x))", "all x y z.((MarineFossil(x) & Mountains(y) & Mountain(z)) -> FoundIn(x,y,z))", "all x y.((Mountain(x) & MarineFossil(y)) -> FoundIn(y,x))", "all x y.((MarineFossil(x) & Mountain(y) & FoundIn(x,y)) -> FoundIn(x,y))", "all x y z.((MarineFossil(x) & Mountain(y) & Mount(z)) -> FoundIn(x,y,z))", "all x y z.((MarineFossil(x) & Mountain(y)) -> FoundIn(x,y))", "all x y.((MarineFossil(x) & Mount(y)) -> FoundIn(x,y))", "all x y z.((MarineFossil(x) & Mountain(y) & Mountains(z)) -> FoundIn(x,y))"]}
{"id": "entailmentbank_validation_112", "nl": "fossils of water animals are found in mountains.", "fol": "", "prediction": ["all x.((Fossil(x) & WaterAnimal(x)) -> FoundInMountains(x))", "all x y z.((Fossil(x) & WaterAnimal(y) & Mountain(z)) -> FoundIn(x,y,z))", "all x.(Fossil(x) -> FoundInMountains(x))", "all x y.((Fossil(x) & WaterAnimal(y)) -> FoundInMountains(x,y))", "all x y.((Fossil(x) & WaterAnimal(y)) -> FoundInMountain(x,y))", "all x y.((WaterAnimal(x) & Mountain(y)) -> FoundIn(x,y))", "all x y.((Fossil(x) & WaterAnimal(y) & FoundIn(x,y)) -> FoundIn(x,y))", "all x y.((Fossil(x) & WaterAnimal(y)) -> FoundIn(x,y))", "all x.((Fossil(x) & WaterAnimal(x)) -> FoundInMountain(x))", "all x y.((Fossil(x) & WaterAnimal(y) & Mountain(y)) -> FoundIn(x,y))", "all x y.((Fossil(x) & WaterAnimal(y) & Mountain(z)) -> FoundIn(x,y,z))", "all x.(Fossil(x) -> (WaterAnimal(x) & FoundInMountains(x)))", "all x y.((Fossil(x) & WaterAnimal(y)) -> FoundInMountains(x))", "all x y.((Fossil(x) & WaterAnimal(y) & FoundInMountains(x,y)) -> FoundIn(x,y))", "all x y.((Fossil(x) & WaterAnimal(y) & FoundInMountain(x,y)) -> FoundIn(x,y))", "all x y.((Fossil(x) & WaterAnimal(y) & FoundIn(x,y)) -> FoundInMountains(x))"]}
{"id": "entailmentbank_validation_113", "nl": "if fossils of a water animal or plant are found in a place then that place used to be covered by water in the past.", "fol": "", "prediction": ["all x y.((Fossil(x) & WaterAnimalOrPlant(y) & FoundInPlace(x,y)) -> UsedToBeCoveredByWater(x,y))", "all x y.((Fossil(x) & WaterAnimalOrPlant(y) & FoundInPlace(x,y)) -> UsedToBeCoveredByWaterInPast(x))", "all x y z.((Fossil(x) & WaterAnimalOrPlant(y) & Place(z) & FoundIn(x,y,z)) -> UsedToBeCoveredByWater(z))", "all x y.((Fossil(x) & WaterAnimalOrPlant(y) & FoundInPlace(x,y)) -> UsedToBeCoveredByWater(x))", "all x y z.((Fossil(x) & WaterAnimalOrPlant(y) & Place(z) & FoundIn(x,y,z)) -> UsedToBeCoveredByWater(x,z))", "all x y.((Fossil(x) & WaterAnimalOrPlant(y) & FoundInPlace(x,y)) -> UsedToBeCoveredByWater(y))", "all x y z.((Fossil(x) & WaterAnimalOrPlant(y) & Place(z) & FoundIn(x,y)) -> UsedToBeCoveredByWater(z))", "all x y z.((Fossil(x) & WaterAnimalOrPlant(y) & Place(z) & FoundIn(x,y,z)) -> CoveredByWater(z))", "all x y.((Fossil(x) & WaterAnimalOrPlant(y) & FoundInPlace(x,y)) -> UsedToBeCoveredByWaterInPast(x,y))", "all x y.((Fossil(x) & WaterAnimalOrPlant(y) & FoundInPlace(x,y)) -> CoveredByWater(x,y))", "all x y z.((Fossil(x) & WaterAnimalOrPlant(y) & Place(z) & FoundIn(x,z)) -> UsedToBeCoveredByWater(z))", "all x y.((WaterAnimalOrPlant(x) & Place(y) & FoundIn(x,y)) -> UsedToBeCoveredByWater(y))", "all x y.((Fossil(x) & WaterAnimalOrPlant(x) & FoundInPlace(x,y)) -> UsedToBeCoveredByWater(y))", "all x y.((Fossil(x) & WaterAnimalOrPlant(y) & FoundInPlace(x,y)) -> UsedToBeCoveredByWater(x,y))", "all x y.((Fossil(x) & WaterAnimalOrPlant(y) & FoundInPlace(x,y)) -> CoveredByWater(y))", "all x y z.((Fossil(x) & WaterAnimalOrPlant(y) & Place(z) & FoundIn(x,y)) -> CoveredByWater(z))"]}
{"id": "entailmentbank_validation_114", "nl": "the mountains used to be covered by water in the past.", "fol": "", "prediction": ["all x.(Mountain(x) -> UsedToBeCoveredByWater(x))", "all x.(Mountain(x) -> CoveredByWater(x))", "all x y.((Mountain(x) & Water(y)) -> UsedToBeCovered(x,y))", "all x y.((Mountain(x) & Water(y)) -> CoveredBy(x,y))", "all x.(Mountain(x) -> UsedToBeCoveredByWater(x))", "all x y.((Mountain(x) & Past(y)) -> CoveredByWater(x,y))", "all x y.((Mountain(x) & Water(y)) -> CoveredInPast(x,y))", "all x y.((Mountain(x) & Water(y)) -> UsedToBeCoveredInPast(x,y))", "all x y z.((Mountain(x) & Water(y) & Past(z)) -> CoveredBy(x,y,z))", "all x.((Mountain(x) & CoveredByWater(x)) -> CoveredByWater(x))", "all x y.((Mountain(x) & Water(y)) -> UsedToBeCoveredInThePast(x,y))", "all x.(Mountain(x) -> UsedToBeCoveredByWaterInPast(x))", "all x y.((Mountain(x) & Water(y)) -> UsedToBeCoveredBy(x,y))", "all x.(Mountain(x) -> UsedToBeCoveredByWaterInThePast(x))", "all x y z.((Mountain(x) & Water(y) & Water(z)) -> UsedToBeCovered(x,y,z))", "all x.((Mountain(x) & CoveredByWater(x)) -> UsedToBe(x))"]}
{"id": "entailmentbank_validation_115", "nl": "a mountain is a kind of environment.", "fol": "", "prediction": ["all x.(Mountain(x) -> Environment(x))", "all x.(Mountain(x) -> Environment(x))", "all x y.((Mountain(x) & Environment(y)) -> Environment(x))", "all x.(Mountain(x) -> Environmental(x))", "all x y.((Mountain(x) & Environment(y)) -> Environment(x,y))", "all x.(Mountain(x) -> Environment(x))", "all x y.((Mountain(x) & Environment(y)) -> KindOf(x,y))", "exists x.(Mountain(x) & Environment(x))", "all x y.((Mountain(x) & Environment(y)) -> Environment(x))", "all x.(Mountain(x) -> KindOfEnvironment(x))", "all x y.((Mountain(x) & Environment(y)) -> Environmental(x))", "all x y.((Mountain(x) & Environment(y)) -> Is(x,y))", "all x y.((Mountain(x) & Environment(y)) -> Environment(x,y))", "all x.((Mountain(x) & Environment(x)) -> Environment(x))", "all x y.((Mountain(x) & Environment(y)) -> KindOfEnvironment(x))", "all x.exists y.(Mountain(x) & Environment(y) & LocatedIn(x,y))"]}
{"id": "entailmentbank_validation_116", "nl": "if something used to be in the past then that something has changed.", "fol": "", "prediction": ["all x.((Past(x) & UsedToBe(x)) -> Changed(x))", "all x.((Something(x) & UsedToBeInPast(x)) -> Changed(x))", "all x.((Something(x) & UsedToBeInThePast(x)) -> Changed(x))", "all x.((Something(x) & UsedToBe(x)) -> Changed(x))", "all x.((UsedToBe(x) & Past(x)) -> Changed(x))", "all x.((UsedToBeInThePast(x) & Changed(x)) -> Changed(x))", "all x.((UsedToBeInPast(x) & Changed(x)) -> Changed(x))", "all x.(((Past(x) & UsedToBe(x)) -> Changed(x))", "all x.((InPast(x) & UsedToBe(x)) -> Changed(x))", "all x.((Past(x) & UsedToBe(x)) -> HasChanged(x))", "all x.((InThePast(x) & UsedToBe(x)) -> Changed(x))", "all x.((Past(x) & UsedToBeIn(x)) -> Changed(x))", "all x.((UsedToBe(x) & InPast(x)) -> Changed(x))", "all x.((Past(x) & WasInPast(x)) -> Changed(x))", "all x y.((Past(x) & Past(y)) -> Changed(x,y))", "all x.((Past(x) & Changed(x)) -> UsedToBe(x))"]}
{"id": "entailmentbank_validation_117", "nl": "a body of water is a kind of environment.", "fol": "", "prediction": ["all x.(BodyOfWater(x) -> Environment(x))", "all x.((BodyOfWater(x) & Environment(x)) -> Environment(x))", "all x.((BodyOfWater(x) & Environment(x)) -> Environmental(x))", "all x.((BodyOfWater(x) & Environment(x)) -> Environment(x))", "all x y.((BodyOfWater(x) & Environment(y)) -> Environment(x))", "all x.(BodyOfWater(x) -> Environment(x))", "all x.(BodyOfWater(x) -> Environmental(x))", "all x.((BodyOfWater(x) & Environment(x)) -> KindOfEnvironment(x))", "all x.(BodyOfWater(x) -> Environment(x))", "all x.(WaterBody(x) -> Environment(x))", "all x y.((BodyOfWater(x) & Environment(y)) -> Environmental(x))", "all x y.((BodyOfWater(x) & Environment(y)) -> Environment(x))", "all x.((BodyOfWater(x) & -Environment(x)) -> Environment(x))", "all x y.((BodyOfWater(x) & Environment(y)) -> Environment(x,y))", "all x.((BodyOfWater(x) & Environment(x)) -> Environment(x))", "all x.((BodyOfWater(x) & Environment(x)) -> -Environment(x))"]}
{"id": "entailmentbank_validation_118", "nl": "the environment has changed from a body of water to mountains.", "fol": "", "prediction": ["all x y.((Environment(x) & BodyOfWater(y)) -> ChangedToMountains(x))", "all x y z.((Environment(x) & BodyOfWater(y) & Mountain(z)) -> ChangedFromTo(x,y,z))", "all x y.((Environment(x) & BodyOfWater(y)) -> Mountain(x))", "all x.((Environment(x) & BodyOfWater(x)) -> Mountain(x))", "all x y.((Environment(x) & BodyOfWater(y)) -> ChangedToMountains(x,y))", "all x.(EnvironmentChange(x) -> (BodyOfWater(x) & Mountain(x)))", "all x.(EnvironmentChange(x) -> (BodyOfWater(x) & Mountains(x)))", "all x.((Environment(x) & BodyOfWater(x)) -> ChangedToMountains(x))", "all x.(Environment(x) -> (BodyOfWater(x) & Mountain(x)))", "all x y.((Environment(x) & BodyOfWater(y) & Mountain(y)) -> ChangedFromTo(x,y))", "all x y.((Environment(x) & BodyOfWater(y) & Mountain(z)) -> ChangedFromTo(x,y,z))", "all x y z.((Environment(x) & BodyOfWater(y) & Mountain(z)) -> ChangedFrom(x,y,z))", "all x y z.((Environment(x) & BodyOfWater(y) & Mountain(z)) -> ChangedTo(x,y,z))", "all x.(Environment(x) -> (BodyOfWater(x) & Mountains(x)))", "all x y.((Environment(x) & BodyOfWater(y) & Mountain(y)) -> ChangedTo(x,y))", "all x y z.((Environment(x) & BodyOfWater(y) & Mountain(z)) -> Changed(x,y,z))"]}
{"id": "entailmentbank_validation_119", "nl": "environments are found on the crustal surface of earth.", "fol": "", "prediction": ["all x.(Environment(x) -> FoundOnCrustalSurfaceOfEarth(x))", "all x y.((Environment(x) & Earth(y)) -> FoundOnCrustalSurface(x,y))", "all x.(Environment(x) -> FoundOnCrustalSurface(x))", "all x.(Environment(x) -> exists y.(CrustalSurface(y) & FoundOn(x,y)))", "all x y z.((Environment(x) & CrustalSurface(y) & Earth(z)) -> FoundOn(x,y,z))", "all x.(Environment(x) -> exists y.(CrustalSurface(y) & FoundOn(x,y))))", "all x y z.((Environment(x) & Earth(y) & CrustalSurface(z)) -> FoundOn(x,y,z))", "all x y.((Environment(x) & CrustalSurface(y)) -> FoundOn(x,y))", "all x.(Environment(x) -> exists y.(CrustalSurfaceOfEarth(y) & FoundOn(x,y)))", "all x y.((Environment(x) & Earth(y) & FoundOnCrustalSurface(x,y)) -> FoundOnCrustalSurface(x,y))", "all x y.((Environment(x) & Earth(y)) -> CrustalSurface(x,y))", "all x y.((Environment(x) & Earth(y) & FoundOnCrustalSurface(x,y)) -> FoundOn(x,y))", "all x y z.((Environment(x) & Earth(y) & CrasstalSurface(z)) -> FoundOn(x,y,z))", "all x.(Environment(x) -> FoundOnCrustalSurfaceOfEarth(x))", "all x.(Environment(x) -> CrustalSurfaceOfEarth(x))", "all x.(Environment(x) -> exists y.(CrustalSurfaceOfEarth(y) & FoundOn(x,y))))"]}
{"id": "entailmentbank_validation_120", "nl": "the environments on the crustal surface of earth have changed from a body of water to mountains.", "fol": "", "prediction": ["all x.((Environment(x) & CrustalSurfaceOfEarth(x)) -> ChangedFromBodyOfWaterToMountains(x))", "all x.((Environment(x) & OnCrustalSurfaceOfEarth(x)) -> ChangedFromBodyOfWaterToMountains(x))", "all x y.((CrustalSurface(x) & Earth(y) & ChangedEnvironment(x,y)) -> ChangedFromBodyOfWaterToMountains(x))", "all x y.((CrustalSurface(x) & Earth(y)) -> ChangedEnvironment(x,y))", "all x.((Environment(x) & CrustalSurface(x)) -> ChangedFromBodyOfWaterToMountains(x))", "all x y z.((Environment(x) & CrustalSurface(y) & Earth(z)) -> ChangedFromBodyOfWaterToMountains(x,y,z))", "all x.((Environment(x) & CrustalSurfaceOfEarth(x)) -> ChangedFromWaterToMountains(x))", "all x y.((Environment(x) & CrustalSurfaceOfEarth(y)) -> ChangedFromBodyOfWaterToMountains(x,y))", "all x y.((Environment(x) & CrustalSurface(y)) -> ChangedFromBodyOfWaterToMountains(x))", "all x y.((Environment(x) & CrustalSurfaceOfEarth(y)) -> ChangedFromBodyOfWaterToMountains(x))", "all x y.((Environment(x) & CrustalSurface(y)) -> ChangedFromBodyOfWaterToMountains(x,y))", "all x y.((CrustalSurface(x) & Earth(y) & ChangedEnvironment(x,y)) -> ChangedFromWaterToMountains(x))", "all x y z.((Environment(x) & CrustalSurface(y) & Earth(z)) -> (ChangedFromBodyOfWaterToMountains(x,y,z)))", "all x y.((CrustalSurface(x) & BodyOfWater(y)) -> ChangedEnvironment(x,y))", "all x y.((CrustalSurface(x) & Earth(y) & ChangedEnvironment(x,y)) -> ChangedFromBodyOfWaterToMountains(x,y))", "all x y.((CrustalSurfaceOfEarth(x) & BodyOfWater(y)) -> ChangedEnvironment(x,y))"]}
{"id": "entailmentbank_validation_121", "nl": "organisms remains can be preserved in sedimentary rock.", "fol": "", "prediction": ["all x.(Organism(x) -> CanBePreservedInSedimentaryRock(x))", "all x y.((Organism(x) & SedimentaryRock(y)) -> CanPreserve(x,y))", "all x.(Organism(x) -> PreservedInSedimentaryRock(x))", "all x.(OrganismRemains(x) -> CanBePreservedInSedimentaryRock(x))", "all x y.((Organism(x) & SedimentaryRock(y)) -> CanBePreservedIn(x,y))", "all x y.((Organism(x) & SedimentaryRock(y)) -> CanPreserveRemains(x,y))", "all x y.((Organism(x) & SedimentaryRock(y)) -> CanBePreserved(x,y))", "all x.(Organism(x) -> CanPreserveInSedimentaryRock(x))", "all x.(OrganismsRemains(x) -> CanBePreservedInSedimentaryRock(x))", "all x y.((Organism(x) & SedimentaryRock(y)) -> PreservedIn(x,y))", "all x y z.((Organism(x) & SedimentaryRock(y) & Remains(z)) -> CanBePreservedIn(x,y,z))", "all x.(Organism(x) -> exists y.(SedimentaryRock(y) & PreservedIn(x,y)))", "all x y z.((Organism(x) & SedimentaryRock(y) & Remains(z)) -> CanBePreserved(x,y,z))", "all x y.((Organism(x) & SedimentaryRock(y)) -> CanPreserveIn(x,y))", "all x y.((Organism(x) & Remains(y)) -> CanBePreservedInSedimentaryRock(x,y))", "all x.(OrganismRemains(x) -> PreservedInSedimentaryRock(x))"]}
{"id": "entailmentbank_validation_122", "nl": "fossils are the remains of organisms or part of organisms.", "fol": "", "prediction": ["all x.(Fossil(x) -> (RemainsOfOrganisms(x) | PartOfOrganisms(x)))", "all x.(Fossil(x) -> (Organism(x) | OrganismPartOfOrganism(x)))", "all x y.((Fossil(x) & Organism(y)) -> (RemainsOfOrganism(x,y) | PartOfOrganism(x,y)))", "all x y.((Fossil(x) & Organism(y)) -> (RemainsOf(x,y) | PartOf(x,y)))", "all x.(Fossil(x) -> (Organism(x) | PartOfOrganism(x)))", "all x y.((Fossil(x) & Organism(y)) -> (RemainsOfOrganisms(x,y) | PartOfOrganisms(x,y)))", "all x.(Fossil(x) -> (RemainsOfOrganism(x) | PartOfOrganism(x)))", "all x.(Fossil(x) -> (RemainsOfOrganisms(x) | PartOfOrganisms(x)))", "all x.(Fossil(x) -> (Organism(x) | Organism(x)))", "all x.(Fossil(x) -> (OrganismRemains(x) | OrganismPartOfOrganisms(x)))", "all x.(Fossil(x) -> (OrganismRemains(x) | PartOfOrganisms(x)))", "all x y z.((Fossil(x) & Organism(y) & Organism(z)) -> (RemainsOfOrganism(x,y) | PartOfOrganism(x,z)))", "all x y.((Fossil(x) & Organism(y)) -> (Remains(x,y) | PartOfOrganism(x,y)))", "all x y.((Fossil(x) & Organism(y)) -> (Remains(x,y) | PartOf(x,y)))", "all x y z.((Fossil(x) & Organism(y) & Organism(z)) -> (RemainsOf(x,y) | PartOf(x,z)))", "all x.(Fossil(x) -> (Organism(x) | OrganismPartOfOrganism(x)))"]}
{"id": "entailmentbank_validation_123", "nl": "fossils are mostly found in sedimentary rock.", "fol": "", "prediction": ["all x.(Fossil(x) -> FoundInSedimentaryRock(x))", "all x y.((Fossil(x) & SedimentaryRock(y)) -> FoundIn(x,y))", "all x y z.((Fossil(x) & SedimentaryRock(y) & SedimentaryRock(z)) -> FoundIn(x,y,z))", "all x.(Fossil(x) -> (FoundInSedimentaryRock(x) | FoundInSedimentaryRock(x)))", "all x.(Fossil(x) -> (FoundInSedimentaryRock(x) & MostlyFoundInSedimentaryRock(x)))", "all x.(Fossil(x) -> (FoundInSedimentaryRock(x) & MostlyInSedimentaryRock(x)))", "all x.(Fossil(x) -> exists y.(SedimentaryRock(y) & FoundIn(x,y))))", "all x.(Fossil(x) -> exists y.(SedimentaryRock(y) & FoundIn(x,y)))", "all x.(Fossil(x) -> (FoundInSedimentaryRock(x) & FoundInSedimentaryRock(x)))", "all x.(Fossil(x) -> MostlyFoundInSedimentaryRock(x))", "all x.(Fossil(x) -> FoundInSedimentaryRock(x))", "all x y z.((Fossil(x) & SedimentaryRock(y) & SedimentaryRock(z)) -> FoundIn(x,y))", "all x y.((Fossil(x) & SedimentaryRock(y)) -> MostlyFoundIn(x,y))", "all x.(Fossil(x) -> (exists y.(SedimentaryRock(y) & FoundIn(x,y))))", "all x.(Fossil(x) -> (FindsInSedimentaryRock(x) & MostlyInSedimentaryRock(x)))", "all x.(Fossil(x) -> (FoundInSedimentaryRock(x) & MostlyFoundIn(x,SedimentaryRock)))"]}
{"id": "entailmentbank_validation_124", "nl": "a mineral usually has a crystal structure.", "fol": "", "prediction": ["all x.(Mineral(x) -> HasCrystalStructure(x))", "all x.(Mineral(x) -> UsuallyHasCrystalStructure(x))", "all x y.((Mineral(x) & CrystalStructure(y)) -> Has(x,y))", "all x.(Mineral(x) -> HasCrystallStructure(x))", "all x.(Mineral(x) -> CrystalStructure(x))", "all x.(Mineral(x) -> HasKrystalStructure(x))", "all x.(Mineral(x) -> UsuallyHasCrystallStructure(x))", "all x.(Mineral(x) -> UsuallyHasKrystalStructure(x))", "all x.(Mineral(x) -> (HasCrystalStructure(x) & HasCrystalStructure(x)))", "all x.((Mineral(x) & CrystalStructure(x)) -> Has(x,y))", "all x y.((Mineral(x) & CrystalStructure(y)) -> UsuallyHas(x,y))", "all x.(Mineral(x) -> (HasCrystalStructure(x) & UsuallyHasCrystalStructure(x)))", "all x.(Mineral(x) -> (HasCrystalStructure(x) | HasCrystalStructure(x)))", "all x.(Mineral(x) -> HasKrisisStructure(x))", "all x.(Mineral(x) -> TypicallyHasCrystalStructure(x))", "all x.(Mineral(x) -> (HasCrystalStructure(x) | -HasCrystalStructure(x)))"]}
{"id": "entailmentbank_validation_125", "nl": "a quartz is made of six-sided transparent crystals.", "fol": "", "prediction": ["all x.(Quarz(x) -> MadeOfSixSidedTransparentCrystals(x))", "all x y.((Quarz(x) & SixSidedTransparentCrystals(y)) -> MadeOf(x,y))", "all x.(Quarz(x) -> (MadeOfSixSidedTransparentCrystals(x)))", "all x.(Quarz(x) -> (MadeOfSixSidedTransparentCrystals(x)))", "all x.(Quarz(x) -> MadeOfSixSidedTransparentCrystals(x))", "all x.(Quarz(x) -> SixSidedTransparentCrystals(x))", "all x.(Quarz(x) -> (SixSidedTransparentCrystals(x) & MadeOf(x,y)))", "all x.(Quarz(x) -> MakesOfSixSidedTransparentCrystals(x))", "all x.(Quarz(x) -> (SixSidedTransparentCrystals(x) & MadeOf(x,6)))", "all x.(Quarz(x) -> (SixSidedTransparentCrystals(x) & MadeOf(x,6)))", "all x.(Quarz(x) -> (SixSidedTransparentCrystals(x) & MadeOf(x,y)))", "all x.(Quarry(x) -> MadeOfSixSidedTransparentCrystals(x))", "all x.(Quarz(x) -> (MadeOfSixSidedTransparentCrystals(x) & MadeOf(x,6)))", "all x.(Quarz(x) -> (MadeOfSixSidedTransparentCrystals(x) & MadeOf(x,6)))", "all x y.((Quarz(x) & SixSidedTransparentCrystals(x)) -> MadeOf(x,y))", "all x.(Quarz(x) -> (MadeOfSixSidedTransparentCrystals(x) & TransparentCrystals(x)))"]}
{"id": "entailmentbank_validation_126", "nl": "quartz is a kind of mineral.", "fol": "", "prediction": ["all x.(Quarz(x) -> Mineral(x))", "all x.(Quarry(x) -> Mineral(x))", "all x.(Quarz(x) -> Mineral(x))", "all x y.((Quarz(x) & Mineral(y)) -> Mineral(x))", "all x y.((Quarz(x) & Mineral(y)) -> Mineral(x,y))", "all x y.((Quarz(x) & Mineral(y)) -> SortOf(x,y))", "all x y.((Quarz(x) & Mineral(y)) -> KindOf(x,y))", "all x y.((Quarz(x) & Mineral(y)) -> Is(x,y))", "all x.(Quarz(x) -> (Mineral(x) & Mineral(x)))", "all x y.((Quarry(x) & Mineral(y)) -> Mineral(x))", "all x y.((Quarz(x) & Mineral(y)) -> (Mineral(x) & Mineral(y)))", "all x y.((Quarz(x) & Mineral(y)) -> Mineral(x))", "exists x.(Quarz(x) & Mineral(x))", "all x.(Quarry(x) -> Mineral(x))", "all x y.((Quarz(x) & Mineral(y)) -> Mineral(x,y))", "all x.(Quarz.(x) -> Mineral(x))"]}
{"id": "entailmentbank_validation_127", "nl": "different classes of rocks are formed by different methods.", "fol": "", "prediction": ["all x y.((RockClass(x) & Method(y)) -> FormedBy(x,y))", "all x y z.((Rock(x) & Class(y) & Method(z)) -> FormedBy(x,y,z))", "all x y.((Rock(x) & Class(y)) -> FormedBy(x,y))", "all x y.((Rock(x) & Class(y)) -> FormedByDifferentMethods(x,y))", "all x y z.((RockClass(x) & Method(y) & Method(z)) -> FormedBy(x,y,z))", "all x y.((Rock(x) & Class(y)) -> FormedByVariousMethods(x,y))", "all x.(Rock(x) -> FormedByDifferentMethods(x))", "all x y z.((Rock(x) & Method(y) & Method(z)) -> FormedBy(x,y,z))", "all x y.((Rock(x) & Class(y) & FormedBy(x,y)) -> DifferentMethods(x))", "all x y.((Rock(x) & Class(y)) -> FormedByMethod(x,y))", "all x y.((Rock(x) & Method(y)) -> FormedBy(x,y))", "all x.(Rock(x) -> FormedByVariousMethods(x))", "all x y.((Rock(x) & Class(y)) -> FormedByMethods(x,y))", "all x y.((Rock(x) & Class(y)) -> FormedByMeasure(x,y))", "all x y.((Rock(x) & Class(y)) -> FormedByVariousMethods(x))", "all x y.((Rock(x) & Class(y)) -> FormedByMeasures(x,y))"]}
{"id": "entailmentbank_validation_128", "nl": "class is a measure of how a rock is formed.", "fol": "", "prediction": ["all x y.((Rock(x) & Class(y)) -> MeasuresFormation(x,y))", "all x.(Class(x) -> MeasuresFormationOfRock(x))", "all x y.((RockClass(x) & Rock(y)) -> MeasuresFormation(x,y))", "all x y.((Rock(x) & Rock(y)) -> MeasuresFormation(x,y))", "all x.(Class(x) -> MeasuresRockFormation(x))", "all x.(Class(x) -> MeasuresHowRockFormed(x))", "all x.((Rock(x) & MeasuresFormation(x)) -> Forms(x))", "all x y.((Rock(x) & Class(y)) -> MeasuresFormation(y,x))", "all x y z.((Rock(x) & Class(y) & Rock(z)) -> MeasuresFormation(y,z))", "all x y z.((Rock(x) & Class(y) & Rock(z)) -> MeasuresFormation(x,y,z))", "all x.((Rock(x) & MeasuresFormation(x)) -> Class(x))", "all x.((Rock(x) & Formed(x)) -> Measures(x))", "all x.((RockClass(x) & MeasuresFormation(x)) -> Forms(x))", "all x.((Rock(x) & Class(x)) -> MeasuresFormation(x))", "all x.((Rock(x) & Formed(x)) -> MeasuresClass(x))", "all x.((RockClass(x) & Formed(x)) -> Measures(x))"]}
{"id": "entailmentbank_validation_129", "nl": "the method by which a rock is formed can be used to classify rocks.", "fol": "", "prediction": ["all x.((Method(x) & RockFormed(x)) -> ClassifyRocks(x))", "all x.((Method(x) & RockFormed(x)) -> ClassifiesRocks(x))", "all x y.((Method(x) & Rock(y) & FormedBy(x,y)) -> ClassifiesRocks(x,y))", "all x y.((Method(x) & Rock(y) & FormedBy(x,y)) -> ClassifiesRocks(x))", "all x y.((Method(x) & Rock(y) & FormedBy(x,y)) -> ClassifyRocks(x))", "all x.((Method(x) & FormedRock(x)) -> ClassifiesRocks(x))", "all x y.((Method(x) & Rock(y) & FormedBy(x,y)) -> ClassifyRocks(x,y))", "all x y.((Method(x) & Rock(y) & Formed(x,y)) -> ClassifiesRocks(x,y))", "all x.((Method(x) & FormedRock(x)) -> ClassifyRocks(x))", "all x y.((Method(x) & Rock(y) & Formed(x,y)) -> ClassifyRocks(x,y))", "all x y.((Method(x) & Rock(y) & Formed(x,y)) -> ClassifiesRocks(x))", "all x y.((Method(x) & Rock(y) & Formed(x,y)) -> ClassifyRocks(x))", "all x y.((Method(x) & Rock(y) & FormedBy(x,y)) -> ClassifiesRock(x,y))", "all x y.((Method(x) & Rock(y) & FormedBy(x,y)) -> CanBeClassified(x,y))", "all x y.((Method(x) & Rock(y) & FormedBy(y,x)) -> ClassifiesRocks(x))", "all x.((Method(x) & RockFormed(x)) -> ClassifyRock(x))"]}
{"id": "entailmentbank_validation_130", "nl": "the origin of a rock means the method by which a rock is formed.", "fol": "", "prediction": ["all x.((Rock(x) & Origin(x)) -> FormedByMethod(x))", "all x.((Rock(x) & Origin(x)) -> FormedBy(x,rock))", "all x.((Rock(x) & Origin(x)) -> FormsRock(x))", "all x y.((Rock(x) & Rock(y)) -> OriginMethod(x,y))", "all x y.((Rock(x) & Rock(y)) -> Origin(x,y))", "all x y.((Rock(x) & Origin(y)) -> FormedBy(x,y))", "all x.((Rock(x) & OriginMethod(x)) -> FormedBy(x,rock))", "all x y.((Rock(x) & Origin(y)) -> (MethodBy(x,y) & FormedBy(x,y)))", "all x y z.((Rock(x) & Origin(y) & Method(z)) -> FormedBy(x,y,z))", "all x.((Rock(x) & Origin(x)) -> FormedBy(x,Rock))", "all x y.((Rock(x) & Origin(y)) -> (MethodBy(x,y) & FormedBy(y,x)))", "all x y.((Rock(x) & Rock(y)) -> OriginMethodBy(x,y))", "all x y.((Rock(x) & Origin(x,y)) -> FormedBy(x,y))", "all x y.((Rock(x) & Origin(x,y)) -> FormedBy(y,x))", "all x y.((Rock(x) & Origin(y)) -> (FormedBy(x,y) & Rock(y)))", "all x y.((Rock(x) & Rock(y) & Origin(x,y)) -> FormedMethod(x,y))"]}
{"id": "entailmentbank_validation_131", "nl": "the origin of rocks can be used to classify rocks.", "fol": "", "prediction": ["all x y.((Rock(x) & Origin(y)) -> Classifies(x,y))", "all x y.((Rock(x) & Origin(y)) -> Classify(x,y))", "all x y.((Rock(x) & Origin(y)) -> Classified(x,y))", "all x.((Rock(x) & Origin(x)) -> ClassifyRocks(x))", "all x y.((Rock(x) & Origin(y)) -> ClassifyRocks(x,y))", "all x y.((Rock(x) & Origin(y)) -> CanBeClassified(x,y))", "all x.((Rock(x) & Origin(x)) -> ClassifiesRocks(x))", "all x y.((Rock(x) & Origin(y)) -> ClassifiesRocks(x,y))", "all x y.((Rock(x) & Origin(y)) -> ClassifyRocks(x))", "all x y z.((Rock(x) & Origin(y) & Rock(z)) -> Classifies(x,z))", "all x y.((Rock(x) & Origin(y)) -> ClassifyRock(x,y))", "all x y z.((Rock(x) & Origin(y) & Rock(z)) -> Classifies(x,y,z))", "all x y.((Rock(x) & Origin(y)) -> CanClassify(x,y))", "all x y z.((Rock(x) & Origin(y) & Rock(z)) -> Classify(x,z))", "all x.(Rock(x) -> ClassifyRocks(x))", "all x.(Rock(x) -> CanBeClassified(x))"]}
{"id": "entailmentbank_validation_132", "nl": "rock formation can be used to study the history of rocks on earth.", "fol": "", "prediction": ["all x y z.((RockFormation(x) & Rock(y) & Earth(z)) -> CanBeUsedToStudy(x,y,z))", "all x y.((RockFormation(x) & Rock(y)) -> CanBeUsedToStudy(x,y))", "all x y z.((RockFormation(x) & Rock(y) & Earth(z)) -> CanBeUsedToStudyHistory(x,y,z))", "all x y.((RockFormation(x) & Rock(y)) -> CanBeUsedToStudyHistory(x,y))", "all x.(RockFormation(x) -> CanBeUsedToStudyRocksOnEarth(x))", "all x.(RockFormation(x) -> CanBeUsedToStudyRockHistory(x))", "all x.(RockFormation(x) -> (StudiesRockHistory(x) & OnEarth(x)))", "all x y.((RockFormation(x) & Earth(y)) -> CanBeUsedToStudyRockHistory(x,y))", "all x.(RockFormation(x) -> CanBeUsedToStudyRocks(x))", "all x y.((RockFormation(x) & Earth(y)) -> CanBeUsedToStudy(x,y))", "all x y z.((RockFormation(x) & Rock(y) & Earth(z)) -> UsedToStudyHistory(x,y,z))", "all x y.((RockFormation(x) & Earth(y)) -> CanBeUsedToStudyRocks(x,y))", "all x y z.((RockFormation(x) & Rock(y) & Earth(z)) -> StudiesHistory(x,y,z))", "all x y.((RockFormation(x) & Earth(y)) -> CanBeUsedToStudyHistory(x,y))", "all x y.((RockFormation(x) & Rock(y)) -> (StudiesHistory(x,y) | StudiesHistory(x,y)))", "all x y z.((RockFormation(x) & Rock(y) & Earth(z)) -> CanBeUsedFormation(x,y,z))"]}
{"id": "entailmentbank_validation_133", "nl": "the formation of something is a kind of process.", "fol": "", "prediction": ["all x.(Formation(x) -> Process(x))", "all x y.((Formation(x) & Something(y)) -> Process(x))", "all x.(FormationOf(x) -> Process(x))", "all x y.((Formation(x) & Something(y)) -> Process(x,y))", "all x y.((FormationOf(x,y) & Something(y)) -> Process(x))", "all x.(FormationOfSomething(x) -> Process(x))", "all x.((FormationOf(x) & Something(x)) -> Process(x))", "all x.(FormationOf(x,y) -> Process(x))", "all x y z.((Formation(x) & Something(y) & Process(z)) -> Forms(x,y,z))", "all x.(FormationOf(x,y) -> Process(y))", "all x.((Formation(x) & Something(x)) -> Process(x))", "all x y z.((Formation(x) & Something(y) & Process(z)) -> Forms(x,y))", "all x y.((Formation(x,y) & Something(y)) -> Process(x))", "all x y.((FormationOf(x,y) & Something(y)) -> Process(x,y))", "all x y.((Formation(x) & Something(y)) -> SortOfProcess(x,y))", "all x y z.((Formation(x) & Something(y) & Process(z)) -> Process(x,y,z))"]}
{"id": "entailmentbank_validation_134", "nl": "studying rock formations can mean studying the history and processes of earth.", "fol": "", "prediction": ["all x y.((RockFormation(x) & Earth(y)) -> (StudiesHistory(x,y) & StudiesProcesses(x,y)))", "all x.(StudiesRockFormations(x) -> (StudiesEarthHistory(x) & StudiesEarthProcesses(x)))", "all x.(StudyingRockFormation(x) -> (StudiesEarthHistory(x) & StudiesEarthProcesses(x)))", "all x y.((RockFormation(x) & Earth(y)) -> (StudiesHistoryAndProcesses(x,y)))", "all x.(StudyingRockFormations(x) -> (StudiesEarthHistory(x) & StudiesEarthProcesses(x)))", "all x.(StudiesRockFormation(x) -> (StudiesEarthHistory(x) & StudiesEarthProcesses(x)))", "all x y.((RockFormation(x) & Earth(y)) -> StudiesHistoryAndProcesses(x,y))", "all x.(StudyRockFormation(x) -> (StudiesEarthHistory(x) & StudiesEarthProcesses(x)))", "all x.(StudiesRockFormations(x) -> (StudiesHistory(x) & StudiesProcessesOfEarth(x)))", "all x y.((RockFormation(x) & Earth(y)) -> (StudiesHistory(x) & StudiesProcesses(x,y)))", "all x.(StudyingRockFormations(x) -> (StudiesHistory(x) & StudiesProcessesOfEarth(x)))", "all x y.((RockFormation(x) & Earth(y)) -> (StudiesHistory(x,y) | StudiesProcesses(x,y)))", "all x.(StudyingRockFormation(x) -> (StudiesHistory(x) & StudiesProcessesOfEarth(x)))", "all x y.((RockFormation(x) & Earth(y)) -> (StudiesHistory(x,y) & StudiesProcessesOf(x,y)))", "all x y z.((RockFormation(x) & History(y) & EarthProcesses(z)) -> Studies(x,y,z))", "all x.(StudiesRockFormations(x) -> (StudiesHistoryAndProcessesOfEarth(x)))"]}
{"id": "entailmentbank_validation_135", "nl": "structural geologists study rock formations.", "fol": "", "prediction": ["all x y.((StructuralGeologist(x) & RockFormation(y)) -> Studies(x,y))", "all x.(StructuralGeologist(x) -> StudiesRockFormations(x))", "all x y z.((StructuralGeologist(x) & RockFormation(y) & RockFormation(z)) -> Studies(x,y,z))", "all x y z.((StructuralGeologist(x) & RockFormation(y) & Structure(z)) -> Studies(x,y,z))", "all x y z.((StructuralGeologist(x) & RockFormation(y) & Formation(z)) -> Studies(x,y,z))", "all x y z.((StructuralGeologist(x) & RockFormation(y) & RockFormation(z)) -> Studies(x,y))", "all x y z.((StructuralGeologist(x) & RockFormation(y) & Structure(z)) -> Studies(x,y))", "all x y z.((StructuralGeologist(x) & RockFormation(y) & Formation(z)) -> Studies(x,y))", "all x y.((StructuralGeologist(x) & RockFormation(y)) -> Study(x,y))", "all x.(StructuralGeologist(x) -> StudiesRockFormation(x))", "all x y z.((StructuralGeologist(x) & RockFormation(y) & RockFormation(z)) -> Study(x,y,z))", "all x y z w.((StructuralGeologist(x) & RockFormation(y) & RockFormation(z)) -> Studies(x,y,z))", "all x y z.((StructuralGeologist(x) & RockFormation(y) & StructuredGeologist(z)) -> Studies(x,y,z))", "all x.((StructuralGeologist(x) & RockFormation(y)) -> Studies(x,y))", "all x y.((StructuralGeologists(x) & RockFormation(y)) -> Studies(x,y))", "all x y z.((StructuralGeologist(x) & RockFormation(y) & Formation(z)) -> Study(x,y,z))"]}
{"id": "entailmentbank_validation_136", "nl": "structural geologists study the history and processes of earth.", "fol": "", "prediction": ["all x y.((StructuralGeologist(x) & Earth(y)) -> StudiesHistoryAndProcesses(x,y))", "all x.(StructuralGeologist(x) -> StudiesEarthHistoryAndProcesses(x))", "all x.(StructuralGeologist(x) -> (StudiesEarthHistory(x) & StudiesEarthProcesses(x)))", "all x y z.((StructuralGeologist(x) & Earth(y) & HistoryAndProcesses(z)) -> Studies(x,y,z))", "all x y.((StructuralGeologist(x) & Earth(y)) -> (StudiesHistory(x,y) & StudiesProcesses(x,y)))", "all x y z.((StructuralGeologist(x) & Earth(y) & History(z)) -> StudiesAndProcesses(x,y,z))", "all x y z.((StructuralGeologist(x) & Earth(y) & History(z)) -> Studies(x,y,z))", "all x y.((StructuralGeologist(x) & Earth(y)) -> (StudiesHistoryAndProcesses(x,y)))", "all x.(StructuralGeologist(x) -> (StudiesHistory(x) & StudiesProcessesOfEarth(x)))", "all x.(StructuralGeologist(x) -> StudiesHistoryAndProcessesOfEarth(x))", "all x y z.((StructuralGeologist(x) & Earth(y) & History(z) & Processes(z)) -> Studies(x,y,z))", "all x y.((StructuralGeologist(x) & Earth(y)) -> Studies(x,y))", "all x y z.((StructuralGeologist(x) & Earth(y) & Earth(z)) -> StudiesHistoryAndProcesses(x,y,z))", "all x y z.((StructuralGeologist(x) & Earth(y) & HistoryAndProcesses(z)) -> Studies(x,y))", "all x y z.((StructuralGeologist(x) & Earth(y) & History(z)) -> Studies(x,y))", "all x.(StructuralGeologist(x) -> (StudiesHistory(x) & StudiesProcesses(x)))"]}
{"id": "entailmentbank_validation_137", "nl": "how earth's environment changed is a part of the history of earth's environment.", "fol": "", "prediction": ["all x y.((EarthsEnvironment(x) & EarthsEnvironment(y)) -> Changed(x,y))", "all x y.((EarthsEnvironment(x) & EarthsEnvironment(y)) -> PartOfHistory(x,y))", "all x.((EarthsEnvironment(x) & Changed(x)) -> PartOfHistoryOfEarthsEnvironment(x))", "all x y.((EarthsEnvironment(x) & EarthsEnvironment(y)) -> Changes(x,y))", "all x.((EarthsEnvironment(x) & EarthsEnvironment(x)) -> PartOfHistory(x))", "all x.((EarthsEnvironment(x) & Changed(x)) -> PartOfEnvironmentHistory(x))", "all x.((EarthsEnvironment(x) & Changed(x)) -> PartOfHistory(x))", "all x y.((EarthsEnvironment(x) & Environment(y)) -> Changed(x,y))", "all x.((EarthsEnvironment(x) & ChangedEnvironment(x)) -> PartOfHistory(x))", "all x.((EarthsEnvironment(x) & EarthsEnvironment(y)) -> PartOfHistory(x,y))", "all x.((EarthsEnvironment(x) & HowEarthsEnvironmentChange(x)) -> PartOfHistoryOfEarthsEnvironment(x))", "all x y.((EarthsEnvironment(x) & Environment(y)) -> PartOfHistory(x,y))", "all x y.((EarthsEnvironment(x) & EarthsEnvironment(y)) -> History(x,y))", "all x y z.((EarthsEnvironment(x) & Environment(y) & Environment(z)) -> Changed(x,y,z))", "all x.((EarthsEnvironment(x) & ChangedEnvironment(x)) -> PartOfHistoryOfEarthsEnvironment(x))", "all x y.((EarthsEnvironment(x) & Environment(y)) -> Changes(x,y))"]}
{"id": "entailmentbank_validation_138", "nl": "fossils can be used to study the history of organisms and environments on earth.", "fol": "", "prediction": ["all x.(Fossil(x) -> (StudiesOrganismsAndEnvironments(x) & OnEarth(x)))", "all x y.((Fossil(x) & Organism(y) & Environment(y)) -> CanBeUsedToStudy(x,y))", "all x y z.((Fossil(x) & Organism(y) & Environment(z)) -> CanBeUsedToStudy(x,y,z))", "all x y z.((Fossil(x) & Organism(y) & Environment(z)) -> (StudiesHistory(x,y,z) & OnEarth(x)))", "all x y z.((Fossil(x) & Organism(y) & Environment(z)) -> CanBeUsedToStudyHistory(x,y,z))", "all x.(Fossil(x) -> (UsedToStudyOrganismsAndEnvironments(x) & OnEarth(x)))", "all x y z.((Fossil(x) & Organism(y) & Environment(z)) -> StudiesHistoryOnEarth(x,y,z))", "all x.(Fossil(x) -> (StudiesOrganisms(x) & StudiesEnvironments(x)))", "all x y.((Fossil(x) & Organism(y)) -> (StudiesHistory(x,y) & StudiesEnvironment(x,y)))", "all x y.((Fossil(x) & Organism(y)) -> CanBeUsedToStudy(x,y))", "all x y.((Fossil(x) & Organism(y) & Environment(y)) -> StudiesHistoryOnEarth(x,y))", "all x y.((Fossil(x) & Organism(y) & Environment(y)) -> CanBeUsedToStudyHistory(x,y))", "all x.(Fossil(x) -> (StudiesOrganismsAndEnvironments(x)))", "all x y.((Fossil(x) & Organism(y)) -> StudiesHistoryOnEarth(x,y))", "all x y z.((Fossil(x) & Organism(y) & Environment(z)) -> (StudiesHistory(x,y) & OnEarth(x,z)))", "all x y z.((Fossil(x) & Organism(y) & Environment(z)) -> (StudiesHistory(x,y,z) | StudiesHistory(x,z)))"]}
{"id": "entailmentbank_validation_139", "nl": "studying fossils in rock formations can mean studying the history and processes of earth.", "fol": "", "prediction": ["all x.((StudiesFossil(x) & RockFormation(x)) -> StudiesEarthHistoryAndProcesses(x))", "all x.((StudiesFossil(x) & RockFormation(x)) -> (StudiesHistory(x) & StudiesProcessesOfEarth(x)))", "all x.((StudiesFossil(x) & RockFormation(x)) -> (StudiesEarthHistory(x) & StudiesEarthProcesses(x)))", "all x.((StudiesFossil(x) & InRockFormation(x)) -> StudiesEarthHistoryAndProcesses(x))", "all x.((StudiesFossil(x) & InRockFormation(x)) -> (StudiesHistory(x) & StudiesProcessesOfEarth(x)))", "all x y z.((Fossil(x) & RockFormation(y) & RockFormation(z)) -> (StudiesHistoryAndProcessesOfEarth(x,y,z)))", "all x y z.((Fossil(x) & RockFormation(y) & RockFormation(z)) -> (StudiesHistory(x,y) & StudiesProcessesOfEarth(x,z)))", "all x y.((StudiesFossil(x) & RockFormation(y)) -> (StudiesHistory(x,y) & StudiesProcessesOfEarth(x,y)))", "all x y.((StudyFossil(x) & RockFormation(y)) -> (StudiesHistory(x,y) & StudiesProcessesOfEarth(x,y)))", "all x y z.((Fossil(x) & RockFormation(y) & RockFormation(z)) -> (StudiesHistory(x,y) & StudiesProcesses(x,z)))", "all x y.((Fossil(x) & RockFormation(y)) -> (StudiesHistory(x,y) & StudiesProcessesOfEarth(x,y)))", "all x y.((StudiesFossil(x) & RockFormation(y)) -> (StudiesHistory(x,y) & StudiesProcesses(x,y)))", "all x y.((StudyFossil(x) & RockFormation(y)) -> (StudiesHistory(x,y) & StudiesProcesses(x,y)))", "all x y.((Fossil(x) & RockFormation(y)) -> (StudiesHistory(x,y) & StudiesProcesses(x,y)))", "all x.((StudyFossil(x) & RockFormation(x)) -> StudiesEarthHistoryAndProcesses(x))", "all x.((StudiesFossil(x) & RockFormation(x)) -> (StudiesHistory(x) & StudiesProcesses(x)))"]}
{"id": "entailmentbank_validation_140", "nl": "paleontologists study fossils in rock formations.", "fol": "", "prediction": ["all x y z.((Paleontologist(x) & RockFormation(y) & Fossil(z)) -> StudiesIn(x,y,z))", "all x y.((Paleontologist(x) & RockFormation(y)) -> StudiesFossil(x,y))", "all x y z.((Paleontologist(x) & RockFormation(y) & Fossil(z)) -> StudiesIn(x,y,z))", "all x y.((Paleontologist(x) & RockFormation(y)) -> StudiesFossil(x,y))", "all x y z.((Paleontologist(x) & Fossil(y) & RockFormation(z)) -> StudiesIn(x,y,z))", "all x y.((Paleontologist(x) & RockFormation(y)) -> StudiesFossilsIn(x,y))", "all x y.((Paleontologist(x) & RockFormation(y)) -> StudiesFossilIn(x,y))", "all x y z.((Paleontologist(x) & RockFormation(y) & Fossil(z)) -> StudiesIn(x,z))", "all x y z.((Paleontologist(x) & RockFormation(y) & Fossil(z)) -> Studies(x,y,z))", "all x y.((Paleontologist(x) & RockFormation(y)) -> StudiesFossils(x,y))", "all x y z.((Pleontologist(x) & RockFormation(y) & Fossil(z)) -> StudiesIn(x,y,z))", "all x y z.((Pelagontologist(x) & RockFormation(y) & Fossil(z)) -> StudiesIn(x,y,z))", "all x y.((Paeontologist(x) & RockFormation(y)) -> StudiesFossil(x,y))", "all x y z.((Paleontologist(x) & RockFormation(y) & Fossil(z)) -> StudiesIn(x,y))", "all x y z.((Paleontologist(x) & RockFormation(y) & Fossil(z)) -> StudiesIn(x,z))", "all x y.((Paleontologist(x) & RockFormation(y)) -> StudiesFossilsIn(x,y))"]}
{"id": "entailmentbank_validation_141", "nl": "paleontologists study the history and processes of earth.", "fol": "", "prediction": ["all x y.((Paleontologist(x) & Earth(y)) -> StudiesHistoryAndProcesses(x,y))", "all x y.((Paleontologist(x) & Earth(y)) -> StudiesHistoryAndProcesses(x,y))", "all x.(Paleontologist(x) -> (StudiesEarthHistory(x) & StudiesEarthProcesses(x)))", "all x y.((Paleontologist(x) & Earth(y)) -> (StudiesHistory(x,y) & StudiesProcesses(x,y)))", "all x.(Paleontologist(x) -> (StudiesEarthHistory(x) & StudiesEarthProcesses(x)))", "all x y z.((Paleontologist(x) & Earth(y) & History(z)) -> StudiesAndProcesses(x,y,z))", "all x y.((Paeontologist(x) & Earth(y)) -> StudiesHistoryAndProcesses(x,y))", "all x.(Paleontologist(x) -> StudiesEarthHistoryAndProcesses(x))", "all x.(Paeontologist(x) -> (StudiesEarthHistory(x) & StudiesEarthProcesses(x)))", "all x y z.((Paleontologist(x) & Earth(y) & History(z)) -> Studies(x,y,z))", "all x.(Paleontologist(x) -> StudiesEarthHistoryAndProcesses(x))", "all x.(Paleontologist(x) -> (StudiesHistory(x) & StudiesProcessesOfEarth(x)))", "all x y z.((Paleontologist(x) & Earth(y) & HistoryAndProcesses(z)) -> Studies(x,y,z))", "all x y z.((Paleontologist(x) & Earth(y) & History(z)) -> StudiesAndProcesses(x,y,z))", "all x.(Paleontologist(x) -> (StudiesHistory(x) & StudiesProcessesOfEarth(x)))", "all x y.((Paleontologist(x) & Earth(y)) -> Studies(x,y))"]}
{"id": "entailmentbank_validation_142", "nl": "structural geologists and paleontologists both study the history and processes of earth.", "fol": "", "prediction": ["all x y.((StructuralGeologist(x) & Paleontologist(y)) -> (StudiesEarthHistory(x) & StudiesEarthProcesses(y)))", "all x y.((StructuralGeologist(x) & Paleontologist(y)) -> (StudiesHistoryAndProcessesOfEarth(x) & StudiesEarth(y)))", "all x y.((StructuralGeologist(x) & Paleontologist(y)) -> StudiesEarthHistoryAndProcesses(x,y))", "all x.((StructuralGeologist(x) & Paleontologist(x)) -> StudiesEarthHistoryAndProcesses(x))", "all x.((StructuralGeologist(x) & Paleontologist(x)) -> (StudiesEarthHistory(x) & StudiesEarthProcesses(x)))", "all x.((StructuralGeologist(x) | Paleontologist(x)) -> StudiesEarthHistoryAndProcesses(x))", "all x y z.((StructuralGeologist(x) & Paleontologist(y) & Earth(z)) -> (StudiesHistory(x,z) & StudiesProcesses(y,z)))", "all x y.((StructuralGeologist(x) & Paleontologist(y)) -> (StudiesHistory(x) & StudiesProcessesOfEarth(y)))", "all x y.((StructuralGeologist(x) & Paleontologist(y)) -> (StudiesEarth(x) & StudiesEarthHistory(y) & StudiesEarthProcesses(y)))", "all x y.((StructuralGeologist(x) & Paleontologist(y)) -> (StudiesEarth(x) & StudiesEarth(y)))", "all x y.((StructuralGeologist(x) & Paleontologist(y)) -> (StudiesHistoryAndProcessesOfEarth(x) | StudiesEarth(y)))", "all x y z.((StructuralGeologist(x) & Paleontologist(y) & Earth(z)) -> (StudiesHistoryAndProcesses(x,z) | StudiesHistoryAndProcesses(y,z)))", "all x y.((StructuralGeologist(x) & Paleontologist(y)) -> (StudiesEarthHistoryAndProcesses(x,y)))", "all x y.((StructuralGeologist(x) & Paleontologist(y)) -> (StudiesEarthHistory(x) & StudiesEarthProcesses(x)))", "all x y.((StructuralGeologist(x) & Paleontologist(y)) -> (StudiesHistory(x,y) & StudiesProcessesOfEarth(y)))", "all x y.((StructuralGeologist(x) & Paleontologist(y)) -> (StudiesEarthHistory(x,y) & StudiesEarthProcesses(y)))"]}
{"id": "entailmentbank_validation_143", "nl": "metamorphic rocks do not contain fossils.", "fol": "", "prediction": ["all x.(MetamorphicRock(x) -> -ContainsFossil(x))", "all x.(MetamorphicRock(x) -> -ContainsFossils(x))", "all x y.((MetamorphicRock(x) & Fossil(y)) -> -Contains(x,y))", "all x.((MetamorphicRock(x) & -ContainsFossil(x)) -> -ContainsFossil(x))", "all x.(MetamorphicRock(x) -> -ContainFossil(x))", "all x.(MetomorphicRock(x) -> -ContainsFossil(x))", "all x.(MetamorphicRock(x) -> -ContainFossils(x))", "all x.(MetamorphicRock(x) -> -ContainsFossil(x))", "all x.(MetamorphicRock(x) -> -ContainsFossils(x))", "all x.((MetamorphicRock(x) & -ContainsFossil(x)) -> -ContainsFossils(x))", "all x.(MetamorphicRock(x) -> -ContainsFossil(x))", "all x y.((MetamorphicRock(x) & Fossil(y)) -> -Contain(x,y))", "all x.(MetomorphicRock(x) -> -ContainsFossils(x))", "all x.(MetamorphicRock(x) -> -ContainsFlossiles(x))", "all x.(MetamorphicRock(x) -> -Fossil(x))", "(all x.(MetamorphicRock(x) -> -ContainsFossil(x)))"]}
{"id": "entailmentbank_validation_144", "nl": "nearly all fossils are found in sedimentary rock.", "fol": "", "prediction": ["all x.(Fossil(x) -> FoundInSedimentaryRock(x))", "all x y.((Fossil(x) & SedimentaryRock(y)) -> FoundIn(x,y))", "all x y z.((Fossil(x) & SedimentaryRock(y) & SedimentaryRock(z)) -> FoundIn(x,y,z))", "all x.(Fossil(x) -> FoundInSedimentaryRock(x))", "all x y z.((Fossil(x) & SedimentaryRock(y) & SedimentaryRock(z)) -> FoundIn(x,y))", "(exists x.(Fossil(x) & FoundInSedimentaryRock(x)))", "all x.((Fossil(x) & FoundInSedimentaryRock(x)) -> FoundIn(x))", "all x.(Fossil(x) -> exists y.(SedimentaryRock(y) & FoundIn(x,y)))", "all x.((Fossil(x) & FoundInSedimentaryRock(x)) -> FoundInSedimentaryRock(x))", "all x y.((Fossil(x) & SedimentaryRock(y) & FoundIn(x,y)) -> FoundIn(x,y))", "Almost all x.(Fossil(x) -> FoundInSedimentaryRock(x))", "all x.(Fossil(x) -> exists y.(SedimentaryRock(y) & FoundIn(x,y))))", "all x y z.((Fossil(x) & SedimentaryRock(y) & SedimentaryRock(z) & FoundIn(x,y,z)) -> FoundIn(x,y))", "all x y z.((Fossil(x) & SedimentaryRock(y) & SedimentaryRock(z) & FoundIn(x,y)) -> FoundIn(x,z))", "all x y z.((Fossil(x) & SedimentaryRock(y) & SedimentaryRock(z) & FoundIn(x,y,z)) -> FoundIn(x,y,z))", "all x.((Fossil(x) & FoundInSedimentaryRock(x)) -> FoundIn(x,y))"]}
{"id": "entailmentbank_validation_145", "nl": "fossils are lost / destroyed when sedimentary rock changes to metamorphic rock.", "fol": "", "prediction": ["all x.((Fossil(x) & SedimentaryRockChangesToMetamorphicRock(x)) -> LostOrDestroyed(x))", "all x.((Fossil(x) & SedimentaryRockChangesToMetamorphicRock(x)) -> Lost(x))", "all x.((Fossil(x) & SedimentaryRockChange(x) & MetamorphicRockChange(x)) -> Lost(x))", "all x.((Fossil(x) & SedimentaryRockChange(x) & MetamorphicRockChange(x)) -> LostOrDestroyed(x))", "all x.((Fossil(x) & SedimentaryRockChangesToMetamorphicRock(x)) -> LostOrDestroyed(x))", "all x y.((Fossil(x) & SedimentaryRock(y) & ChangesToMetamorphicRock(y)) -> LostOrDestroyed(x,y))", "all x.((Fossil(x) & SedimentaryRock(x) & MetamorphicRock(x)) -> Lost(x))", "all x.((Fossil(x) & SedimentaryRock(x) & MetamorphicRock(x)) -> LostOrDestroyed(x))", "all x y.((Fossil(x) & SedimentaryRock(y) & MetamorphicRock(y)) -> LostOrDestroyed(x,y))", "all x.((Fossil(x) & SedimentaryRockChange(x) & MetamorphicRockChange(x)) -> LostOrDestroyed(x))", "all x y.((Fossil(x) & SedimentaryRock(y) & ChangesToMetamorphicRock(y)) -> Lost(x))", "all x y.((Fossil(x) & SedimentaryRock(y) & ChangesToMetamorphicRock(y)) -> Lost(x,y))", "all x y.((Fossil(x) & SedimentaryRock(y) & ChangesToMetamorphicRock(y)) -> LostOrDestroyed(x,y))", "all x y.((Fossil(x) & SedimentaryRock(y) & MetamorphicRock(y)) -> LostOrDestroyed(x,y))", "all x.((Fossil(x) & SedimentaryRock(x) & MetamorphicRock(x)) -> LostOrDestroyed(x))", "all x y.((Fossil(x) & SedimentaryRock(y) & MetamorphicRock(y)) -> Lost(x,y))"]}
{"id": "entailmentbank_validation_146", "nl": "if fossils are destroyed in rock transition, then there will be gaps in the fossil record.", "fol": "", "prediction": ["all x.((Fossil(x) & DestroyedInRockTransition(x)) -> GapsInFossilRecord(x))", "all x y.((Fossil(x) & RockTransition(y) & DestroyedIn(x,y)) -> GapsInFossilRecord(x))", "all x.((Fossil(x) & DestroyedInRockTransition(x)) -> exists y.(FossilRecord(y) & Gaps(y)))", "all x.((Fossil(x) & DestroyedInRockTransition(x)) -> exists y.(FossilRecord(y) & Gaps(y))))", "all x.((Fossil(x) & DestroyedInRockTransition(x)) -> ThereWaysInFossilRecord(x))", "all x.((Fossil(x) & DestroyedInRockTransition(x)) -> exists y.(FossilRecord(y) & GapsIn(y,x)))", "all x.((Fossil(x) & DestroyedInRockTransition(x)) -> exists y.(FossilRecord(y) & GapsIn(y,x))))", "all x.((Fossil(x) & DestroyedInRockTransition(x)) -> ThereBegapsInFossilRecord(x))", "all x.((Fossil(x) & DestroyedInRockTransition(x)) -> exists y.(FossilRecord(y) & GapsIn(x,y))))", "all x y.((Fossil(x) & RockTransition(y) & Destroyed(x,y)) -> GapsInFossilRecord(x))", "all x.((Fossil(x) & DestroyedInRockTransition(x)) -> exists y.(FossilRecord(y) & Gap(y)))", "all x.((Fossil(x) & DestroyedInRockTransition(x)) -> ThereAreGapsInFossilRecord(x))", "all x.((Fossil(x) & DestroyedInRockTransition(x)) -> exists y.(FossilRecord(y) & Gaps(x,y))))", "all x.((Fossil(x) & DestroyedInRockTransition(x)) -> ExistsGapsInFossilRecord(x))", "all x.((Fossil(x) & DestroyedInRockTransition(x)) -> exists y.(FossilRecord(y) & GapsIn(y))))", "all x.((Fossil(x) & DestroyedInRockTransition(x)) -> exists y.(FossilRecord(y) & GapsIn(y)))"]}
{"id": "entailmentbank_validation_147", "nl": "sedimentary rock changing to metamorphic rock causes gaps in the fossil record.", "fol": "", "prediction": ["all x.((SedimentaryRock(x) & MetamorphicRock(x)) -> CausesGapsInFossilRecord(x))", "all x y.((SedimentaryRock(x) & MetamorphicRock(y)) -> CausesGapsInFossilRecord(x,y))", "all x y.((SedimentaryRock(x) & MetamorphicRock(y)) -> CausesGapsInFossilRecord(x))", "all x y z.((SedimentaryRock(x) & MetamorphicRock(y) & FossilRecord(z)) -> CausesGaps(x,y,z))", "all x y.((SedimentaryRock(x) & MetamorphicRock(y) & ChangesTo(x,y)) -> CausesGapsInFossilRecord(x))", "all x y z.((SedimentaryRock(x) & MetamorphicRock(y) & FossilRecord(z)) -> CausesGapsIn(x,y,z))", "all x y z.((SedimentaryRock(x) & MetamorphicRock(y) & FossilRecord(z)) -> CausesGaps(x,z))", "all x y z.((SedimentaryRock(x) & MetamorphicRock(y) & FossilRecord(z) & ChangesTo(x,y)) -> CausesGaps(x,z))", "all x.((SedimentaryRockChange(x) & MetamorphicRock(x)) -> CausesGapsInFossilRecord(x))", "all x y.((SedimentaryRock(x) & MetamorphicRock(x)) -> CausesGapsInFossilRecord(y))", "all x y.((SedimentaryRock(x) & MetamorphicRock(y) & ChangedTo(x,y)) -> CausesGapsInFossilRecord(x))", "all x y.((SedimentaryRock(x) & MetamorphicRock(y)) -> CausesGaps(x,y))", "all x y.((SedimentaryRock(x) & MetamorphicRock(y) & ChangesTo(x,y)) -> CausesGapsInFossilRecord(x,y))", "all x y.((SedimentaryRockChange(x) & MetamorphicRock(y)) -> CausesGapsInFossilRecord(x,y))", "all x.((SedimentaryRock(x) & MetamorphicRock(x)) -> CausesGaps(x))", "all x.((SedimentaryRock(x) & MetamorphicRock(x)) -> CausesGapsInFossilRecord(x))"]}
{"id": "entailmentbank_validation_148", "nl": "heat is a kind of energy.", "fol": "", "prediction": ["all x.(Heat(x) -> Energy(x))", "all x y.((Heat(x) & Energy(y)) -> Energy(x,y))", "all x y.((Heat(x) & Energy(y)) -> Energy(x))", "all x.(Heat(x) -> Energy(x))", "all x y z.((Heat(x) & Energy(y) & Energy(z)) -> Energy(x,y,z))", "all x y.((Heat(x) & Energy(y)) -> Is(x,y))", "all x y.((Heat(x) & Energy(y)) -> (Energy(x) & Energy(y)))", "all x y.((Heat(x) & Energy(y)) -> KindOf(x,y))", "all x.(Heat(x) -> (Energy(x) & Energy(x)))", "all x y z.((Heat(x) & Energy(y) & Energy(z)) -> Energy(x))", "all x y.((Heat(x) & Energy(y)) -> TypeOf(x,y))", "all x y.((Heat(x) & Energy(y)) -> IsEnergy(x,y))", "all x y z.((Heat(x) & Energy(y) & Energy(z)) -> Is(x,y,z))", "all x y z.((Heat(x) & Energy(y) & Energy(z)) -> Energy(x,y))", "all x y.((Heat(x) & Energy(y)) -> (Energy(x) & Energy(x)))", "all x y.((Heat(x) & Energy(y)) -> ArtOf(x,y))"]}
{"id": "entailmentbank_validation_149", "nl": "metamorphic rocks are formed by rocks being exposed to extreme heat and pressure.", "fol": "", "prediction": ["all x.(MetamorphicRock(x) -> (ExposedToExtremeHeat(x) & ExposedToExtremePressure(x)))", "all x.(MetamorphicRock(x) -> (ExposedToExtremeHeat(x) & ExposedToExtremePressure(x)))", "all x.(MetamorphicRock(x) -> (FormedByExposedRocksToExtremeHeat(x) & ExposedToExtremePressure(x)))", "all x.(MetamorphicRock(x) -> (FormedByExposedRocks(x) & ExposedToExtremeHeat(x) & ExposedToExtremePressure(x)))", "all x y.((MetamorphicRock(x) & Rock(y)) -> (ExposedToExtremeHeat(y) & ExposedToExtremePressure(y)))", "all x.(MetamorphicRock(x) -> (FormedByExposedRocksToExtremeHeatAndPressure(x)))", "all x y.((MetamorphicRock(x) & Rock(y) & ExposedToExtremeHeat(y) & ExposedToExtremePressure(y)) -> FormedBy(x,y))", "all x.(MetamorphicRock(x) -> (FormedByExposedRocks(x) & ExtremeHeat(x) & ExtremePressure(x)))", "all x.(MetamorphicRock(x) -> (FormedByExposedRocks(x) & ExposedToExtremeHeatAndPressure(x)))", "all x.((Rock(x) & ExposedToExtremeHeat(x) & ExposedToExtremePressure(x)) -> Metamorphic(x))", "all x y.((MetamorphicRock(x) & Rock(y) & ExposedToExtremeHeat(y,x) & ExposedToExtremePressure(y,x)) -> FormedBy(x,y))", "all x.(MetamorphicRock(x) -> (FormedByExposedRocksToExtremeHeat(x) & FormedByExposedRocksToExtremePressure(x)))", "all x.(MetamorphicRock(x) -> (FormedByExposedRocksToExtremeHeat(x) & ExposedToExtremePressure(x)))", "all x.(MetamorphicRock(x) -> (FormedByExposedRocks(x) & ExposedToExtremeHeat(x) & ExposedToExtremePressure(x)))", "all x y.((MetamorphicRock(x) & Rock(y) & ExposedToExtremeHeatAndPressure(y)) -> FormedBy(x,y))", "all x.(MetamorphicRock(x) -> FormedByExposedRocksToExtremeHeatAndPressure(x))"]}
{"id": "entailmentbank_validation_150", "nl": "heat energy can change igneous rock into metamorphic rock.", "fol": "", "prediction": ["all x y.((HeatEnergy(x) & IgneousRock(y)) -> ChangesIntoMetamorphicRock(x,y))", "all x.((HeatEnergy(x) & IgneousRock(x)) -> MetamorphicRock(x))", "all x y.((HeatEnergy(x) & IgneousRock(y) & MetamorphicRock(y)) -> ChangesInto(x,y))", "all x y.((HeatEnergy(x) & IgneousRock(y)) -> CanChangeIntoMetamorphicRock(x,y))", "all x y z.((HeatEnergy(x) & IgneousRock(y) & MetamorphicRock(z)) -> ChangesInto(x,y,z))", "all x y z.((HeatEnergy(x) & IgneousRock(y) & MetamorphicRock(z)) -> CanChange(x,y,z))", "all x.(HeatEnergy(x) -> (ChangesIgneousRock(x) & ChangesMetamorphicRock(x)))", "all x.(HeatEnergy(x) -> ChangesIgneousRockIntoMetamorphicRock(x))", "all x.(HeatEnergy(x) -> CanChangeIgneousRockToMetamorphicRock(x))", "all x.(HeatEnergy(x) -> ChangesIgneousRockToMetamorphicRock(x))", "all x y.((HeatEnergy(x) & IgneousRock(y) & MetamorphicRock(y)) -> CanChange(x,y))", "all x y.((HeatEnergy(x) & IgneousRock(y)) -> ChangesToMetamorphicRock(x,y))", "all x.(HeatEnergy(x) -> CanChangeIgneousRockIntoMetamorphicRock(x))", "all x y.((HeatEnergy(x) & IgneousRock(y)) -> CanChangeToMetamorphicRock(x,y))", "all x y z.((HeatEnergy(x) & IgneousRock(y) & MetamorphicRock(z)) -> CanChangeInto(x,y,z))", "all x y.((HeatEnergy(x) & IgneousRock(y) & MetamorphicRock(y)) -> CanChangeInto(x,y))"]}
{"id": "entailmentbank_validation_151", "nl": "a tree is a kind of habitat.", "fol": "", "prediction": ["all x.(Tree(x) -> Habitat(x))", "all x y.((Tree(x) & Habitat(y)) -> Habitat(x))", "all x y.((Tree(x) & Habitat(y)) -> Habitat(x,y))", "all x.(Tree(x) -> Habitat(x))", "exists x.(Tree(x) & Habitat(x))", "all x y z.((Tree(x) & Habitat(y) & Habitat(z)) -> Habitat(x,y,z))", "all x.((Tree(x) & Habitat(x)) -> Habitat(x))", "all x y z.((Tree(x) & Habitat(y) & Habitat(z)) -> Habitat(x))", "all x y z.((Tree(x) & Habitat(y) & Habitat(z)) -> Habitat(x,y))", "all x y.((Tree(x) & Habitat(y)) -> Is(x,y))", "all x y.((Tree(x) & Habitat(y)) -> KindOf(x,y))", "all x y.((Tree(x) & Habitat(y)) -> Exists z.((Tree(z) & Habitat(z))))", "all x.exists y.(Tree(x) & Habitat(y) & Habitat(x,y))", "all x.exists y.(Tree(x) & Habitat(y) & LocatedIn(x,y))", "all x.exists y.(Tree(x) & Habitat(y) & Exists z.(Tree(z) & Habitat(z))))", "all x y.((Tree(x) & Habitat(y)) -> Exists z.(Habitat(z) & Habitat(z))))"]}
{"id": "entailmentbank_validation_152", "nl": "cutting down trees in a forest causes the number of trees to decrease in that forest.", "fol": "", "prediction": ["all x y z.((CuttingDownTrees(x) & Forest(y) & Forest(z)) -> DecreasesNumberOfTrees(x,y,z))", "all x y.((CuttingDownTrees(x) & Forest(y)) -> DecreasesNumberOfTrees(x,y))", "all x y z.((CuttingDownTrees(x) & Forest(y) & Forest(z)) -> DecreasesNumberOfTrees(y,z))", "all x y z.((CuttingDownTreesInForest(x) & Forest(y) & Forest(z)) -> DecreasesNumberOfTrees(x,y,z))", "all x y z.((ClearingDownTrees(x) & Forest(y) & Forest(z)) -> DecreasesNumberOfTrees(x,y,z))", "all x y.((ClearingDownTrees(x) & Forest(y)) -> DecreasesNumberOfTrees(x,y))", "all x y.((CuttingDownTreesInForest(x) & Forest(y)) -> DecreasesNumberOfTrees(x,y))", "all x y z.((CuttingDownTrees(x) & Forest(y) & Forest(z)) -> DecreasesNumberOfTreesIn(x,y,z))", "all x y.((Tree(x) & Forest(y) & CutsDown(x,y)) -> DecreasesNumberOfTrees(x,y))", "all x y z.((CuttingDownTreesInForest(x) & Forest(y) & Forest(z)) -> DecreasesNumberOfTreesInForest(x,y,z))", "all x y z.((CuttingDownTrees(x) & Forest(y) & Forest(z)) -> DecreasedNumberOfTrees(x,y,z))", "all x y.((CuttingDownTrees(x) & Forest(y) & InForest(x,y)) -> DecreasesNumberOfTrees(x,y))", "all x y z.((CuttingDownTrees(x) & Forest(y) & Forest(z)) -> NumberOfTreesDecrease(x,y,z))", "all x y z.((ClearingDownTrees(x) & Forest(y) & Forest(z)) -> DecreasesNumberOfTrees(y,z))", "all x y.((CuttingDownTreesInForest(x) & Forest(y)) -> DecreasesNumberOfTreesInForest(x,y))", "all x y z.((CuttingDownTreesInForest(x) & Forest(y) & Forest(z)) -> NumberOfTreesDecrease(x,y,z))"]}
{"id": "entailmentbank_validation_153", "nl": "cutting down trees in a forest causes the number of habitat to decrease.", "fol": "", "prediction": ["all x y.((CuttingDownTrees(x) & Forest(y)) -> DecreasesHabitat(x,y))", "all x y.((Tree(x) & Forest(y) & CutsDown(x,y)) -> DecreasesHabitat(x))", "all x y z.((CuttingDownTrees(x) & Forest(y) & Forest(z)) -> DecreasesHabitat(x,y,z))", "all x y.((CuttingDownTrees(x) & Forest(y)) -> DecreasesHabitatNumber(x,y))", "all x.((CuttingDownTrees(x) & Forest(x)) -> NumberOfHabitatDecrease(x))", "all x y.((CuttingDownTrees(x) & Forest(y)) -> NumberOfHabitatDecrease(x,y))", "all x y.((Tree(x) & Forest(y) & CutsDown(x,y)) -> NumberOfHabitatDecrease(x))", "all x y.((ClearingDownTrees(x) & Forest(y)) -> DecreasesHabitat(x,y))", "all x y.((Tree(x) & Forest(y) & CutsDown(x,y)) -> DecreasesHabitat(x,y))", "all x y.((CuttingDownTrees(x) & Forest(y) & InForest(x,y)) -> DecreasesHabitat(x))", "all x y.((Field(x) & Forest(y) & CutsDownTrees(x,y)) -> DecreasesHabitat(x))", "all x y.((CuttingDownTrees(x) & Forest(y) & InForest(x,y)) -> NumberOfHabitatDecrease(x))", "all x y.((Tree(x) & Forest(y) & CutsDown(x,y)) -> NumberOfHabitatDecreases(x))", "all x y.((Tree(x) & Forest(y) & CutsDownIn(x,y)) -> DecreasesHabitat(x))", "all x y.((CuttingDownTreesInForest(x) & Forest(y)) -> DecreasesHabitat(x,y))", "all x.((CuttingDownTrees(x) & Forest(x)) -> DecreasesHabitat(x))"]}
{"id": "entailmentbank_validation_154", "nl": "an animal requires a habitat for survival.", "fol": "", "prediction": ["all x.(Animal(x) -> RequiresHabitatForSurvival(x))", "all x.(Animal(x) -> RequiresHabitat(x))", "all x y.((Animal(x) & Habitat(y)) -> RequiresForSurvival(x,y))", "all x.((Animal(x) & RequiresHabitat(x)) -> Survival(x))", "all x.((Animal(x) & Habitat(x)) -> RequiresForSurvival(x))", "all x.((Animal(x) & RequiresHabitatForSurvival(x)) -> RequiresHabitat(x))", "all x.((Animal(x) & Habitat(y)) -> RequiresForSurvival(x,y))", "all x.((Animal(x) & RequiresHabitat(x)) -> Survival(x))", "all x.((Animal(x) & RequiresHabitat(x)) -> RequiresHabitat(x))", "all x.((Animal(x) & RequiresHabitat(x)) -> RequiresHabitatForSurvival(x))", "all x.((Animal(x) & RequiresHabitatForSurvival(x)) -> RequiresHabitatForSurvival(x))", "all x y.((Animal(x) & Habitat(y)) -> Requires(x,y))", "all x.((Animal(x) & RequiresHabitat(x)) -> Survives(x))", "all x.((Animal(x) & RequiresHabitat(x)) -> SurvivalHabitat(x))", "all x.((Animal(x) & RequiresHabitat(x)) -> SurvivesInHabitat(x))", "all x.((Animal(x) & Habitat(x)) -> Requires(x,survival))"]}
{"id": "entailmentbank_validation_155", "nl": "cutting down trees in a forest causes the number of habitat required by animals for survival to decrease.", "fol": "", "prediction": ["all x y.((Tree(x) & Forest(y) & CutsDown(x,y)) -> DecreasesHabitatRequiredByAnimalsForSurvival(x))", "all x y.((Tree(x) & Forest(y) & CutsDown(x,y)) -> DecreasesHabitat(x,y))", "all x y.((Tree(x) & Forest(y) & CutsDown(x,y)) -> DecreasesHabitatRequiredByAnimals(x))", "all x y.((Tree(x) & Forest(y) & CutsDown(x,y)) -> DecreasesNumberOfHabitat(x,y))", "all x y z.((Tree(x) & Forest(y) & Animal(z) & CutsDown(x,y)) -> DecreasesHabitatRequiredForSurvival(x,z))", "all x y.((Tree(x) & Forest(y) & CutsDown(x,y)) -> DecreasedHabitat(x,y))", "all x y.((Tree(x) & Forest(y) & CutsDown(x,y)) -> DecreasesHabitatRequiredByAnimals(x,y))", "all x y.((CuttingDownTrees(x) & Forest(y)) -> DecreasesHabitatRequiredByAnimals(x,y))", "all x y.((Tree(x) & Forest(y) & CutsDown(x,y)) -> DecreasesHabitat(x))", "all x y.((Tree(x) & Forest(y) & CutsDown(x,y)) -> DecreasesHabitatRequiredByAnimalsForSurvival(x,y))", "all x y.((CuttingDownTrees(x) & Forest(y) & InForest(x,y)) -> DecreasesHabitatRequiredByAnimalsForSurvival(x))", "all x y.((CuttingDownTrees(x) & Forest(y)) -> DecreasesHabitat(x,y))", "all x y z.((Tree(x) & Forest(y) & Animal(z) & CutsDown(x,y)) -> DecreasesHabitat(x,z))", "all x y.((Tree(x) & Forest(y) & CutsDown(x,y)) -> DecreasesNumberOfHabitatRequiredByAnimalsForSurvival(x))", "all x y.((Tree(x) & Forest(y) & CutsDownIn(x,y)) -> DecreasesHabitatRequiredByAnimalsForSurvival(x))", "all x y.((CuttingDownTrees(x) & Forest(y) & InForest(x,y)) -> DecreasesHabitatRequiredByAnimals(x))"]}
{"id": "entailmentbank_validation_156", "nl": "humans changing ecosystems usually has a negative impact on an ecosystem / organisms living in an ecosystem.", "fol": "", "prediction": ["all x y.((Human(x) & Ecosystem(y) & Changes(x,y)) -> NegativeImpact(x,y))", "all x y.((Human(x) & Ecosystem(y) & Changes(x,y)) -> NegativeImpactOn(x,y))", "all x y.((Human(x) & Ecosystem(y)) -> (Changes(x,y) & NegativeImpactOn(x,y)))", "all x y z.((Human(x) & Ecosystem(y) & Ecosystem(z)) -> (Changes(x,y) & NegativeImpactOn(x,z)))", "all x y.((Human(x) & Ecosystem(y)) -> (Changes(x,y) & NegativeImpact(x,y)))", "all x y.((Human(x) & Ecosystem(y) & Changes(x,y)) -> NegativeImpact(x))", "all x y z.((Human(x) & Ecosystem(y) & Ecosystem(z)) -> (Changes(x,y) & NegativeImpact(x,z)))", "all x y z.((Human(x) & Ecosystem(y) & Ecosystem(z) & Changes(x,y)) -> NegativeImpact(x,z))", "all x y.((Human(x) & Ecosystem(y) & Changes(x,y)) -> NegativeImpactOnEcosystemOrganisms(x,y))", "all x y z.((Human(x) & Ecosystem(y) & Ecosystem(z) & Changes(x,y)) -> NegativeImpactOn(x,z))", "all x y.((Human(x) & Ecosystem(y)) -> (Changes(x,y) & NegativeImpactOnEcosystem(x) & NegativeImpactOnOrganisms(x)))", "all x y z.((Human(x) & Ecosystem(y) & Organism(z)) -> (Changes(x,y) & NegativeImpactOn(x,z)))", "all x y z.((Human(x) & Ecosystem(y) & Ecosystem(z) & Changes(x,y)) -> NegativeImpact(x,y,z))", "all x y.((Human(x) & Ecosystem(y) & Changes(x,y)) -> NegativeImpactOnEcosystemOrganisms(x))", "all x y.((Human(x) & Ecosystem(y)) -> (Changes(x,y) & NegativeImpact(x)))", "all x y z.((Human(x) & Ecosystem(y) & Organism(z)) -> (Changes(x,y) & NegativeImpact(x,z)))"]}
{"id": "entailmentbank_validation_157", "nl": "humans building homes in an ecosystem causes that ecosystem to change.", "fol": "", "prediction": ["all x y.((Human(x) & Ecosystem(y) & BuildsHomesIn(x,y)) -> CausesChange(x,y))", "all x y.((Human(x) & Ecosystem(y) & BuildsHomesIn(x,y)) -> CausesEcosystemChange(x,y))", "all x y.((Human(x) & Ecosystem(y) & BuildsHome(x,y)) -> CausesChange(x,y))", "all x y.((Human(x) & Ecosystem(y)) -> CausesChange(x,y))", "all x y.((Human(x) & Ecosystem(y) & BuildsHomesIn(x,y)) -> CausesEcosystemToChange(x,y))", "all x y.((Human(x) & Ecosystem(y) & BuildsHomes(x,y)) -> CausesChange(x,y))", "all x y.((Human(x) & Ecosystem(y) & BuildsHomeIn(x,y)) -> CausesChange(x,y))", "all x y z.((Human(x) & Ecosystem(y) & Ecosystem(z) & BuildsHomesIn(x,y,z)) -> CausesChange(x,y,z))", "all x y z.((Human(x) & Ecosystem(y) & Ecosystem(z) & BuildingHomesIn(x,y,z)) -> CausesChange(x,y,z))", "all x y z.((Human(x) & Ecosystem(y) & Ecosystem(z)) -> BuildsHomesIn(x,y,z))", "all x y.((Human(x) & Ecosystem(y) & BuildsHomeIn(x,y)) -> CausesEcosystemChange(x,y))", "all x y z.((Human(x) & Ecosystem(y) & Ecosystem(z)) -> CausesChange(x,y,z))", "all x y z.((Human(x) & Ecosystem(y) & Ecosystem(z) & BuildsHomesIn(x,y,z)) -> CausesChange(y,z))", "all x y z.((Human(x) & Ecosystem(y) & Ecosystem(z) & BuildsHomeIn(x,y,z)) -> CausesChange(x,y,z))", "all x y z.((Human(x) & Ecosystem(y) & Ecosystem(z) & BuildingHomesIn(x,y,z)) -> CausesChange(y,z))", "all x y z.((Human(x) & Ecosystem(y) & Ecosystem(z) & BuildsHomesIn(x,y)) -> CausesChange(x,z))"]}
{"id": "entailmentbank_validation_158", "nl": "humans building homes in an ecosystem has a negative impact on an ecosystem and organisms living in the ecosystem.", "fol": "", "prediction": ["all x y.((Human(x) & Ecosystem(y) & BuildsHomesIn(x,y)) -> NegativeImpactOn(x,y))", "all x y.((Human(x) & Ecosystem(y) & BuildsHomesIn(x,y)) -> NegativeImpact(x,y))", "all x y.((Human(x) & Ecosystem(y) & BuildsHomesIn(x,y)) -> NegativeImpactOnEcosystemAndOrganisms(x,y))", "all x y z.((Human(x) & Ecosystem(y) & Ecosystem(z) & BuildsHomesIn(x,y)) -> NegativeImpactOn(x,z))", "all x y z.((Human(x) & Ecosystem(y) & Ecosystem(z) & BuildsHomesIn(x,y,z)) -> NegativeImpactOn(x,y,z))", "all x y.((Human(x) & Ecosystem(y) & BuildsHomes(x,y)) -> NegativeImpactOn(x,y))", "all x y z.((Human(x) & Ecosystem(y) & Ecosystem(z) & BuildsHomesIn(x,y)) -> NegativeImpact(x,z))", "all x y z.((Human(x) & Ecosystem(y) & Ecosystem(z) & BuildingHomesIn(x,y)) -> NegativeImpactOn(x,z))", "all x y z.((Human(x) & Ecosystem(y) & Ecosystem(z) & BuildsHomesIn(x,y)) -> NegativeImpactOn(x,y,z))", "all x y z.((Human(x) & Ecosystem(y) & Ecosystem(z) & BuildingHomesIn(x,y,z)) -> NegativeImpactOn(x,y,z))", "all x y.((Human(x) & Ecosystem(y) & BuildsHomesIn(x,y)) -> NegativeImpactOnEcosystemAndOrganisms(x))", "all x y.((Human(x) & Ecosystem(y) & BuildingHomesIn(x,y)) -> NegativeImpactOn(x,y))", "all x y.((Human(x) & Ecosystem(y) & BuildsHomeIn(x,y)) -> NegativeImpactOn(x,y))", "all x y.((Human(x) & Ecosystem(y) & BuildsHomes(x,y)) -> NegativeImpact(x,y))", "all x y z.((Human(x) & Ecosystem(y) & Ecosystem(z)) -> BuildsHomesIn(x,y,z))", "all x y.((Human(x) & Ecosystem(y) & BuildsHome(x,y)) -> NegativeImpactOn(x,y))"]}
{"id": "entailmentbank_validation_159", "nl": "a wetland is a kind of ecosystem.", "fol": "", "prediction": ["all x.(Wetland(x) -> Ecosystem(x))", "all x.(Wetland(x) -> Ecosystem(x))", "all x y.((Wetland(x) & Ecosystem(y)) -> Exists z.((Wetland(z) & Ecosystem(z)) & Exists w.(Wetland(w) & Ecosystem(w)) & Exists w.(Wetland(w) & Ecosystem(w)) & Exists w.(Wetland(w) & Ecosystem(w)))", "all x y.((Wetland(x) & Ecosystem(y)) -> Exists z.(Wetland(z) & -exists w.(Wetland(w) & Ecosystem(w) & -exists w.(Wetland(w) & Ecosystem(w)) & -exists w.(Wetland(w) & Ecosystem(w) & Ecosystem(w))))", "all x y.((Wetland(x) & Ecosystem(y)) -> Exists z.(Wetland(z) & -exists w.(Wetland(w) & Ecosystem(w) & -exists w.(Wetland(w) & Ecosystem(w)) & -exists w.(Wetland(w) & Ecosystem(w))))", "all x y.((Wetland(x) & Ecosystem(y)) -> Exists z.(Wetland(z) & -exists w.(Wetland(w) & Ecosystem(w) & -exists w.(Wetland(w) & Ecosystem(w)) & -exists w.(Wetland(w) & Ecosystem(w) & Ecosystem(w) & Ecosystem(w))))", "all x y.((Wetland(x) & Ecosystem(y)) -> Exists z.((Wetland(z) & Ecosystem(z)) & Exists w.(Wetland(w) & Ecosystem(w)) & Exists w.(Wetland(w) & Ecosystem(w)) & Exists w.(Wetland(w) & Ecosystem(w))))", "all x y.((Wetland(x) & Ecosystem(y)) -> Exists z.(Wetland(z) & -exists w.(Wetland(w) & Ecosystem(w) & -exists w.(Wetland(w) & Ecosystem(w)) & -exists w.(Wetland(w) & Ecosystem(w)) & Ecosystem(w)))", "all x y.((Wetland(x) & Ecosystem(y)) -> Exists z.(Wetland(z) & -exists w.(Wetland(w) & Ecosystem(w)) & exists w.(Wetland(w) & Ecosystem(w)) & exists w.(Wetland(w) & Ecosystem(w) & Ecosystem(w))))", "all x y.((Wetland(x) & Ecosystem(y)) -> Exists z.((Wetland(z) & Ecosystem(z)) & Exists w.(Wetland(w) & Ecosystem(w)) & Exists w.(Wetland(w) & Ecosystem(w)) & Exists w.(Wetland(w) & Ecosystem(w) & Ecosystem(w))))", "all x y.((Wetland(x) & Ecosystem(y)) -> Exists z.((Wetland(z) & Ecosystem(z)) & Exists w.((Wetland(w) & Ecosystem(w)) & Exists w.(Wetland(w) & Ecosystem(w)) & Exists w.(Wetland(w) & Ecosystem(w))))", "all x y.((Wetland(x) & Ecosystem(y)) -> Exists z.(Wetland(z) & -exists w.(Wetland(w) & Ecosystem(w) & -exists w.(Wetland(w) & Ecosystem(w) & Ecosystem(w) & Ecosystem(w) & Ecosystem(w) & Ecosystem(w))))", "all x y.((Wetland(x) & Ecosystem(y)) -> Exists z.((Wetland(z) & Ecosystem(z)) & Exists w.(Wetland(w) & Ecosystem(w)) & Exists w.(Wetland(w) & Ecosystem(w)) & Exists w.(Wetland(w) & Ecosystem(w)) & Ecosystem(w)))", "all x y.((Wetland(x) & Ecosystem(y)) -> Exists z.(Wetland(z) & -exists w.(Wetland(w) & Ecosystem(w) & -exists w.(Wetland(w) & Ecosystem(w) & -exists w.(Wetland(w) & Ecosystem(w) & Ecosystem(w))))", "all x y.((Wetland(x) & Ecosystem(y)) -> Exists z.((Wetland(z) & Ecosystem(z)) & Exists w.(Wetland(w) & Ecosystem(w)) & Exists w.(Wetland(w) & Ecosystem(w) & Ecosystem(w) & Ecosystem(w))))", "all x y.((Wetland(x) & Ecosystem(y)) -> Exists z.((Wetland(z) & Ecosystem(z)) & Exists w.(Wetland(w) & Ecosystem(w)) & Exists w.(Wetland(w) & Ecosystem(w) & Ecosystem(w))))"]}
{"id": "entailmentbank_validation_160", "nl": "humans building homes in a wetland has a negative impact on a wetland and organisms living in the wetland.", "fol": "", "prediction": ["all x y.((Human(x) & Wetland(y) & BuildsHomesIn(x,y)) -> NegativeImpactOnWetlandAndOrganisms(x,y))", "all x y.((Human(x) & Wetland(y) & BuildsHomesIn(x,y)) -> NegativeImpactOnWetlandAndOrganisms(x))", "all x y.((Human(x) & Wetland(y) & BuildsHomesIn(x,y)) -> NegativeImpact(x,y))", "all x y.((Human(x) & Wetland(y) & BuildsHomeIn(x,y)) -> NegativeImpactOnWetlandAndOrganisms(x,y))", "all x y.((Human(x) & Wetland(y) & BuildingHomesIn(x,y)) -> NegativeImpactOnWetlandAndOrganisms(x,y))", "all x y.((Human(x) & Wetland(y) & BuildsHome(x,y)) -> NegativeImpactOnWetlandAndOrganisms(x,y))", "all x y z.((Human(x) & Wetland(y) & Wetland(z) & BuildingHomesIn(x,y,z)) -> NegativeImpactOn(x,y,z))", "all x y z.((Human(x) & Wetland(y) & Wetland(z) & BuildsHomesIn(x,y,z)) -> NegativeImpactOn(x,y,z))", "all x y.((Human(x) & Wetland(y) & BuildsHomesIn(x,y)) -> NegativeImpactOn(x,y))", "all x y z.((Human(x) & Wetland(y) & Wetland(z) & BuildingHomesIn(x,y,z)) -> NegativeImpactOnWetlandAndOrganisms(x,y,z))", "all x y z.((Human(x) & Wetland(y) & Wetland(z) & BuildingHomesIn(x,y,z)) -> NegativeImpact(x,y,z))", "all x y z.((Human(x) & Wetland(y) & Wetland(z) & BuildsHomesIn(x,y,z)) -> NegativeImpactOnWetlandAndOrganisms(x,y,z))", "all x y.((Human(x) & Wetland(y) & BuildsHomeIn(x,y)) -> NegativeImpactOnWetlandAndOrganisms(x))", "all x y z.((Human(x) & Wetland(y) & Wetland(z) & BuildsHomesIn(x,y,z)) -> NegativeImpact(x,y,z))", "all x y z.((Human(x) & Wetland(y) & Wetland(z) & BuildingHomesIn(x,y,z)) -> NegativeImpactOnWetlandAndOrganisms(x))", "all x y z.((Human(x) & Wetland(y) & Wetland(z) & BuildsHomesIn(x,y,z)) -> NegativeImpactOnWetlandAndOrganisms(x))"]}
{"id": "entailmentbank_validation_161", "nl": "if an animal eats other animals for food, then the animal will be the predator.", "fol": "", "prediction": ["all x y.((Animal(x) & Animal(y) & EatsForFood(x,y)) -> Predator(x))", "all x y.((Animal(x) & Animal(y) & EatsForFood(x,y)) -> Predator(x,y))", "all x y z.((Animal(x) & Animal(y) & Animal(z) & EatsForFood(x,y,z)) -> Predator(x))", "all x y.((Animal(x) & Animal(y) & Eats(x,y)) -> Predator(x))", "all x y z.((Animal(x) & Animal(y) & Animal(z) & EatsForFood(x,y,z)) -> Predator(x,y))", "all x y z.((Animal(x) & Animal(y) & Animal(z) & EatsForFood(x,y)) -> Predator(x,z))", "all x y.((Animal(x) & Animal(y) & Eats(x,y)) -> Predator(x,y))", "all x y z.((Animal(x) & Animal(y) & Animal(z) & EatsForFood(x,y)) -> Predator(x))", "all x.((Animal(x) & EatsOtherAnimals(x)) -> Predator(x))", "all x y z.((Animal(x) & Animal(y) & Animal(z) & EatsForFood(x,y,z)) -> Predator(x,y,z))", "all x y z.((Animal(x) & Animal(y) & Animal(z) & EatsForFood(x,z)) -> Predator(x))", "all x y z.((Animal(x) & Animal(y) & Food(z) & EatsFor(x,y,z)) -> Predator(x))", "all x y z.((Animal(x) & Animal(y) & Animal(z) & Eats(x,y,z)) -> Predator(x))", "all x.((Animal(x) & EatsAnimals(x)) -> Predator(x))", "all x.((Animal(x) & EatsAnimalsForFood(x)) -> Predator(x))", "all x y z.((Animal(x) & Animal(y) & Food(z) & Eats(x,y,z)) -> Predator(x))"]}
{"id": "entailmentbank_validation_162", "nl": "tuna eat fish.", "fol": "", "prediction": ["all x.(Tuna(x) -> EatsFish(x))", "all x y.((Tuna(x) & Fish(y)) -> Eats(x,y))", "all x y.((Tuna(x) & Fish(y)) -> Eat(x,y))", "all x y z.((Tuna(x) & Fish(y) & Fish(z)) -> Eats(x,y,z))", "all x.((Tuna(x) & Fish(y)) -> Eats(x,y))", "all x.(Tunnel(x) -> EatsFish(x))", "all x y.((Tunnel(x) & Fish(y)) -> Eats(x,y))", "all x y z.((Tuna(x) & Fish(y) & Fish(z)) -> Eat(x,y,z))", "all x y z.((Tuna(x) & Fish(y) & Fish(z)) -> Eats(x,y))", "all x.(Tuna(x) -> EatFish(x))", "all x y.((Tuna(x) & Fish(y) & Eats(x,y)) -> Eats(x,y))", "all x.(Thun(x) -> EatsFish(x))", "all x.(Tuna(x) -> Eats(x,fish))", "all x y.((Tuna(x) & Fish(y)) -> Eats(x,y))", "all x y z.((Tuna(x) & Fish(y) & Food(z)) -> Eats(x,y,z))", "all x y z.((Tuna(x) & Fish(y) & Seafood(z)) -> Eats(x,y,z))"]}
{"id": "entailmentbank_validation_163", "nl": "tuna is a kind of predator.", "fol": "", "prediction": ["all x.(Tuna(x) -> Predator(x))", "all x.(Tunnel(x) -> Predator(x))", "all x y.((Tuna(x) & Predator(y)) -> Predator(x))", "all x.(Tuna(x) -> Predator(x))", "all x y.((Tuna(x) & Predator(y)) -> Predator(x,y))", "all x.((Tuna(x) & Predator(x)) -> Predator(x))", "all x y.((Tunnel(x) & Predator(y)) -> Predator(x))", "all x y.((Tuna(x) & Predator(y)) -> Is(x,y))", "all x y.((Tuna(x) & Predator(y)) -> (Predator(x) & Predator(y)))", "all x y.((Tuna(x) & Predator(y)) -> Like(x,y))", "all x y.((Tuna(x) & Predator(y)) -> Has(x,y))", "all x y.((Tuna(x) & Predator(y)) -> Species(x,y))", "all x.(Tongue(x) -> Predator(x))", "all x y.((Tunnel(x) & Predator(y)) -> Predator(x,y))", "all x.((Tuna(x) & Predator(x)) -> Tuna(x))", "all x y.((Tuna(x) & Predator(y)) -> Eats(x,y))"]}
{"id": "entailmentbank_validation_164", "nl": "tuna is a kind of fish.", "fol": "", "prediction": ["all x.(Tuna(x) -> Fish(x))", "all x.(Tunnel(x) -> Fish(x))", "all x y.((Tuna(x) & Fish(y)) -> Fish(x))", "all x.(Tuna(x) -> Fish(x))", "all x.((Tuna(x) & Fish(x)) -> Fish(x))", "all x y.((Tuna(x) & Fish(y)) -> Fish(x,y))", "all x.(Thun(x) -> Fish(x))", "all x.(Tongue(x) -> Fish(x))", "all x y.((Tuna(x) & Fish(y)) -> (Fish(x) & Fish(y)))", "all x.((Tunnel(x) & Fish(x)) -> Fish(x))", "all x.(Tunnel(x) -> Fish(x))", "all x y.((Tuna(x) & Fish(y)) -> Is(x,y))", "all x y.((Tuna(x) & Fish(y)) -> SpeciesOf(x,y))", "all x y.((Tuna(x) & Fish(y)) -> (Fish(x) | Fish(y)))", "all x y.((Tuna(x) & Fish(y)) -> Species(x,y))", "all x y.((Tuna(x) & Fish(y)) -> (Fish(x) & Fish(x)))"]}
{"id": "entailmentbank_validation_165", "nl": "tuna is a kind of predatory fish.", "fol": "", "prediction": ["all x.(Tuna(x) -> PredatoryFish(x))", "all x.(Tunnel(x) -> PredatoryFish(x))", "all x.(Tuna(x) -> PredatoryFish(x))", "all x y.((Tuna(x) & Fish(y)) -> Predatory(x,y))", "all x.(Tuna(x) -> PredatoryFish(x))", "all x.(Tuna(x) -> (PredatoryFish(x) & Fish(x)))", "all x.((Tuna(x) & PredatoryFish(x)) -> Tuna(x))", "all x y.((Tuna(x) & Fish(y)) -> Predatory(x))", "all x y.((Tuna(x) & Fish(y)) -> Predator(x,y))", "all x.(Tuna(x) -> (PredatoryFish(x) | PredatoryFish(x)))", "all x.((Tuna(x) & PredatoryFish(x)) -> Fish(x))", "all x.(Tuna(x) -> PredatoryFish(x))", "all x.(Tunnel(x) -> PredatoryFish(x))", "all x.(Thun(x) -> PredatoryFish(x))", "all x.(Tuna(x) -> (PredatoryFish(x) & PredatoryFish(x)))", "all x y.((Tuna(x) & Fish(y)) -> Predator(x))"]}
{"id": "entailmentbank_validation_166", "nl": "commercial harvesting from the ocean has caused populations of large predatory fish to decrease.", "fol": "", "prediction": ["all x y.((CommercialHarvestingFromOcean(x) & LargePredatoryFish(y)) -> PopulationDecrease(x,y))", "all x.((CommercialHarvestingFromOcean(x) & LargePredatoryFish(x)) -> PopulationDecrease(x))", "all x y.((CommercialHarvesting(x) & Ocean(y) & LargePredatoryFish(x)) -> PopulationDecrease(x,y))", "all x y z.((CommercialHarvesting(x) & Ocean(y) & LargePredatoryFish(z)) -> PopulationDecrease(x,z))", "all x y.((CommercialHarvesting(x) & Ocean(y)) -> (CausedPopulationDecrease(x,y) & LargePredatoryFish(x)))", "all x y.((CommercialHarvestingFromOcean(x) & LargePredatoryFish(y)) -> CausedPopulationDecrease(x,y))", "all x y.((CommercialHarvestingFromOcean(x) & LargePredatoryFish(y)) -> PopulationDecrease(y))", "all x y z.((CommercialHarvesting(x) & Ocean(y) & LargePredatoryFish(z)) -> PopulationDecrease(z))", "all x y.((CommercialHarvesting(x) & Ocean(y) & LargePredatoryFish(x,y)) -> PopulationDecrease(x,y))", "all x y.((CommercialHarvesting(x) & Ocean(y)) -> (LargePredatoryFishPopulationsDecrease(x,y)))", "all x y.((CommercialHarvestingFromOcean(x) & LargePredatoryFish(y)) -> DecreasedPopulations(x,y))", "all x y.((CommercialHarvesting(x) & Ocean(y) & LargePredatoryFish(z)) -> PopulationDecrease(x,z))", "all x y.((CommercialHarvestingFromOcean(x) & LargePredatoryFish(y)) -> PopulationDecrease(x))", "all x y z.((CommercialHarvestingFromOcean(x) & LargePredatoryFish(y) & Ocean(z)) -> PopulationDecrease(y,z))", "all x y z.((CommercialHarvestingFromOcean(x) & LargePredatoryFish(y) & Population(z)) -> Decreases(z))", "all x y z.((CommercialHarvestingFromOcean(x) & LargePredatoryFish(y) & Population(z)) -> Decreased(z))"]}
{"id": "entailmentbank_validation_167", "nl": "commercial harvesting from the ocean has caused the populations of tuna to decrease.", "fol": "", "prediction": ["all x y.((CommercialHarvestingFromOcean(x) & TunaPopulation(y)) -> Decreased(y))", "all x y.((CommercialHarvesting(x) & Ocean(y)) -> PopulationDecrease(x,y))", "all x y.((CommercialHarvestingFromOcean(x) & TunaPopulation(y)) -> CausedDecrease(x,y))", "all x y z.((CommercialHarvestingFromOcean(x) & TunaPopulation(y) & Ocean(z)) -> CausedDecrease(y,z))", "all x.((CommercialHarvesting(x) & FromOcean(x)) -> PopulationDecrease(x))", "all x y.((CommercialHarvesting(x) & Ocean(y)) -> CausesTunaPopulationDecrease(x,y))", "all x y.((CommercialHarvesting(x) & Ocean(y)) -> CausedPopulationDecrease(x,y))", "all x y z.((CommercialHarvestingFromOcean(x) & TunaPopulation(y) & Ocean(z)) -> CausesDecrease(y,z))", "all x y.((CommercialHarvestingFromOcean(x) & TunaPopulation(y)) -> Decreases(y))", "all x y z.((CommercialHarvesting(x) & Ocean(y) & TunaPopulation(z)) -> Decreased(z))", "all x y z.((CommercialHarvesting(x) & Ocean(y) & TunaPopulation(z)) -> CausedDecrease(z))", "all x y.((CommercialHarvestingFromOcean(x) & TunaPopulation(y)) -> CausesDecrease(x,y))", "all x y z.((CommercialHarvesting(x) & Ocean(y) & TunaPopulation(z)) -> CausedDecrease(x,z))", "all x y.((CommercialHarvestingFromOcean(x) & TunaPopulation(y)) -> CausedDecrease(y,y))", "all x y z.((CommercialHarvesting(x) & Ocean(y) & TunaPopulation(z)) -> CausedDecrease(z,y))", "all x y.((CommercialHarvestingFromOcean(x) & TunaPopulation(y)) -> CausedDecrease(y,x))"]}
{"id": "entailmentbank_validation_168", "nl": "an organism becoming extinct causes a change in the organism's food web.", "fol": "", "prediction": ["all x.((Organism(x) & Extinct(x)) -> CausesChangeInFoodWeb(x))", "all x.((Organism(x) & Extinct(x)) -> ChangeInFoodWeb(x))", "all x y.((Organism(x) & Extinct(x)) -> CausesChangeInFoodWeb(x,y))", "all x y.((Organism(x) & Extinct(x)) -> CausesChangeInFoodWeb(y))", "all x.((Organism(x) & Extinct(x)) -> CausesFoodWebChange(x))", "all x.((Organism(x) & Extinct(x)) -> ChangesFoodWeb(x))", "all x y.((Organism(x) & Extinct(y)) -> CausesChangeInFoodWeb(x,y))", "all x y z.((Organism(x) & Extinct(x) & FoodWeb(y) & FoodWeb(z)) -> CausesChange(x,y,z))", "all x.((Organism(x) & EndingExtinct(x)) -> CausesChangeInFoodWeb(x))", "all x y.((Organism(x) & Extinct(x)) -> ChangeInFoodWeb(y))", "all x y.((Organism(x) & Extinct(x) & FoodWeb(y)) -> CausesChange(x,y))", "all x y z.((Organism(x) & Extinct(y) & FoodWeb(z)) -> CausesChange(x,y,z))", "all x.((Organism(x) & EndingExtinct(x)) -> ChangeInFoodWeb(x))", "all x y.((Organism(x) & Extinct(x) & FoodWebChange(y)) -> CausesChange(x,y))", "all x y.((Organism(x) & Extinct(x)) -> CausesChangeInFoodWeb(y,x))", "all x y.((Organism(x) & Extinct(x)) -> ChangeInFoodWeb(x,y))"]}
{"id": "entailmentbank_validation_169", "nl": "a change in a food web can cause damage to an ecosystem.", "fol": "", "prediction": ["all x y.((ChangeInFoodWeb(x) & Ecosystem(y)) -> CausesDamage(x,y))", "all x y.((FoodWebChange(x) & Ecosystem(y)) -> CausesDamage(x,y))", "all x y.((ChangeInFoodWeb(x) & Ecosystem(y)) -> CanCauseDamage(x,y))", "all x y.((FoodWebChange(x) & Ecosystem(y)) -> CanCauseDamage(x,y))", "all x.(ChangeInFoodWeb(x) -> CausesDamageToEcosystem(x))", "all x y z.((ChangeInFoodWeb(x) & Ecosystem(y) & Ecosystem(z)) -> CausesDamage(x,y,z))", "all x y z.((ChangeInFoodWeb(x) & Ecosystem(y) & FoodWeb(z)) -> CausesDamage(x,y,z))", "all x y.((ChangeInFoodWeb(x) & Ecosystem(y)) -> CausesDamageTo(x,y))", "all x y z.((ChangeInFoodWeb(x) & Ecosystem(y) & FoodWeb(z)) -> CanCauseDamage(x,y,z))", "all x y z.((ChangeInFoodWeb(x) & Ecosystem(y) & ChangeInFoodWeb(z)) -> CausesDamage(x,y,z))", "all x y z.((FoodWebChange(x) & Ecosystem(y) & FoodWeb(z)) -> CausesDamage(x,y,z))", "all x y z.((ChangeInFoodWeb(x) & Ecosystem(y) & Environment(z)) -> CausesDamage(x,y,z))", "all x.((FoodWebChange(x) & ChangeInFoodWeb(x)) -> CausesDamageToEcosystem(x))", "all x y.((ChangInFoodWeb(x) & Ecosystem(y)) -> CausesDamage(x,y))", "all x.(ChangeInFoodWeb(x) -> CanCauseDamageToEcosystem(x))", "all x y z.((ChangeInFoodWeb(x) & Ecosystem(y) & FoodWeb(z)) -> CausesDamageTo(x,y,z))"]}
{"id": "entailmentbank_validation_170", "nl": "extinctions of organisms can cause damage to an ecosystem by changing the food web.", "fol": "", "prediction": ["all x y z.((Organism(x) & Extinction(y) & Ecosystem(z) & ChangesFoodWeb(z)) -> CausesDamage(x,y,z))", "all x y.((Organism(x) & Extinction(y)) -> CausesDamage(x,y))", "all x y.((ExtinctionOfOrganisms(x) & Ecosystem(y) & ChangesFoodWeb(x,y)) -> CausesDamage(x,y))", "all x y.((Organism(x) & Extinction(y)) -> CausesDamageToEcosystem(x,y))", "all x y z.((Extinction(x) & Organism(y) & Ecosystem(z) & ChangesFoodWeb(z)) -> CausesDamage(x,y,z))", "all x y.((Extinction(x) & Organism(y)) -> (CausesDamage(x,y) & ChangesFoodWeb(x,y)))", "all x y z.((Extinction(x) & Organism(y) & Ecosystem(z) & ChangesFoodWeb(x,z)) -> CausesDamage(x,y,z))", "all x y.((Extinction(x) & Organism(y)) -> CausesDamageToEcosystem(x,y))", "all x y.((Extinction(x) & Organism(y)) -> CausesDamage(x,y))", "all x y.((Organism(x) & Extinction(y)) -> (CausesDamage(x,y) & ChangesFoodWeb(x,y)))", "all x y.((Extinction(x) & Organism(y)) -> (CausesDamage(x,y) & ChangesFoodWeb(x)))", "all x y.((Organism(x) & Extinction(y)) -> (CausesDamage(x,y) & ChangesFoodWeb(x)))", "all x y.((ExtinctionOfOrganisms(x) & Ecosystem(y) & ChangesFoodWeb(x)) -> CausesDamage(x,y))", "all x y z.((Extinction(x) & Organism(y) & Ecosystem(z)) -> CausesDamage(x,y,z))", "all x.((Organism(x) & Extinction(x)) -> CausesDamageToEcosystem(x))", "all x y.((Organism(x) & Extinction(y)) -> CanCauseDamage(x,y))"]}
{"id": "entailmentbank_validation_171", "nl": "california is located on the boundary of two tectonic plates.", "fol": "", "prediction": ["all x y.((California(x) & TectonicPlate(y)) -> LocatedOnBoundary(x,y))", "all x y z.((California(x) & TectonicPlate(y) & TectonicPlate(z)) -> LocatedOnBoundary(x,y,z))", "all x.(California(x) -> LocatedOnBoundaryOfTwoTectonicPlates(x))", "all x y z.((California(x) & TectonicPlate(y) & TectonicPlate(z)) -> LocatedOnBoundary(x,y,z))", "all x y.((California(x) & TectonicPlate(y)) -> LocatedOnBoundary(x,y))", "all x.(California(x) -> exists y.(TectonicPlate(y) & TectonicPlate(z) & LocatedOnBoundary(x,y,z)))", "all x y z.((California(x) & TectonicPlate(y) & TectonicPlate(z)) -> LocalizedOnBoundary(x,y,z))", "all x y z.((California(x) & TectonicPlate(y) & TectonicPlate(z)) -> LocationOnBoundary(x,y,z))", "all x y z.((California(x) & TectonicPlate(y) & TectonicPlate(z)) -> LocatesOnBoundary(x,y,z))", "all x y.((California(x) & TectonicPlate(y)) -> LocalizedOnBoundary(x,y))", "all x.(California(x) -> exists y.(TectonicPlate(y) & LocatedOnBoundary(x,y)))", "all x y z.((California(x) & TectonicPlate(y) & TectonicPlate(z)) -> LocatedOnBoundaryOf(x,y,z))", "all x.(California(x) -> exists y.(TectonicPlate(y) & TectonicPlate(z) & LocatedOnBoundary(x,y,z))))", "all x y z.((California(x) & TectonicPlate(y) & TectonicPlate(z)) -> Boundary(x,y,z))", "all x y.((California(x) & TectonicPlate(y)) -> LocatedOnBoundaryOf(x,y))", "all x.(California(x) -> exists y.(TectonicPlate(y) & TectonicPlate(y) & LocatedOnBoundary(x,y)))"]}
{"id": "entailmentbank_validation_172", "nl": "earthquakes are most common along tectonic plate boundaries.", "fol": "", "prediction": ["all x.(Earthquake(x) -> MostCommonAlongTectonicPlateBoundaries(x))", "all x y.((Earthquake(x) & TectonicPlateBoundaries(y)) -> MostCommonAlong(x,y))", "all x y.((Earthquake(x) & TectonicPlateBoundaries(y)) -> MostCommon(x,y))", "all x y.((Earthquake(x) & TectonicPlateBoundary(y)) -> MostCommonAlong(x,y))", "all x y.((Earthquake(x) & TectonicPlateBoundary(y)) -> MostCommon(x,y))", "all x y z.((Earthquake(x) & TectonicPlateBoundaries(y) & TectonicPlateBoundaries(z)) -> MostCommon(x,y,z))", "all x y z.((Earthquake(x) & TectonicPlateBoundary(y) & TectonicPlateBoundary(z)) -> MostCommon(x,y,z))", "all x y z.((Earthquake(x) & TectonicPlateBoundaries(y) & TectonicPlateBoundaries(z)) -> MostCommonAlong(x,y,z))", "all x y z.((Earthquake(x) & TectonicPlateBoundary(y) & TectonicPlateBoundary(z)) -> MostCommonAlong(x,y,z))", "all x.(Earthquake(x) -> CommonAlongTectonicPlateBoundaries(x))", "all x.(Earthquake(x) -> (MostCommonAlongTectonicPlateBoundaries(x)))", "all x y.((Earthquake(x) & TectonicPlateBoundaries(y)) -> CommonAlong(x,y))", "all x.(Earthquake(x) -> (CommonAlongTectonicPlateBoundaries(x)))", "all x.(Earthquake(x) -> LocatedAlongTectonicPlateBoundaries(x))", "all x.(Earthquake(x) -> MostlyCommonAlongTectonicPlateBoundaries(x))", "all x y z.((Earthquake(x) & TectonicPlateBoundary(y) & TectonicPlateBoundaries(z)) -> MostCommon(x,y,z))"]}
{"id": "entailmentbank_validation_173", "nl": "massachusetts is not located on the boundary of two tectonic plates.", "fol": "", "prediction": ["all x.(Massachusetts(x) -> -LocatedOnBoundaryOfTwoTectonicPlates(x))", "all x y.((Massachusetts(x) & TectonicPlate(y)) -> -LocatedOnBoundary(x,y))", "all x y z.((Massachusetts(x) & TectonicPlate(y) & TectonicPlate(z)) -> -LocatedOnBoundary(x,y,z))", "all x.(Massachusetts(x) -> -LocatedOnBoundaryOfTwoTectonicPlates(x))", "all x y.((Massachusetts(x) & TectonicPlate(y)) -> -LocatedOnBoundary(x,y))", "all x.(Massachusetts(x) -> -LocatedOnBoundaryOfTectonicPlates(x))", "all x y z.((Massachusetts(x) & TectonicPlate(y) & TectonicPlate(z)) -> -LocatedOnBoundary(x,y,z))", "all x y z.((Massachusetts(x) & TectonicPlate(y) & TectonicPlate(z) & LocatedOnBoundary(x,y,z)) -> -LocatedOnBoundary(x,y,z))", "all x y z.((Massachusetts(x) & TectonicPlate(y) & TectonicPlate(z) & LocatedOnBoundary(x,y,z)) -> -LocatedOnBoundary(x,y,z))", "all x.(Massachusetts(x) -> -SituatedOnBoundaryOfTwoTectonicPlates(x))", "all x.(Massachusetts(x) -> -BelongsOnBoundaryOfTwoTectonicPlates(x))", "all x y.((Massachusetts(x) & TectonicPlateBoundary(y)) -> -LocatedOnBoundary(x,y))", "all x y.((Massachusetts(x) & TectonicPlate(y) & TectonicPlate(z)) -> -LocatedOnBoundary(x,y,z))", "all x y.((Massachusetts(x) & TectonicPlate(y) & TectonicPlate(y)) -> -LocatedOnBoundary(x,y))", "all x y.((Massachusetts(x) & TectonicPlate(y)) -> -BelongsOnBoundary(x,y))", "all x y z.((Massachusetts(x) & TectonicPlate(y) & TectonicPlate(z)) -> -BelongsOnBoundary(x,y,z))"]}
{"id": "entailmentbank_validation_174", "nl": "earthquakes are more likely to occur in california than in massachusetts.", "fol": "", "prediction": ["all x y.((Earthquake(x) & California(y)) -> MoreLikelyToOccur(x,y))", "all x y.((Earthquake(x) & California(y)) -> MoreLikelyToOccurIn(x,y))", "all x y.((Earthquake(x) & California(y)) -> MoreLikelyIn(x,y))", "all x y.((Earthquake(x) & California(y) & Massachusetts(z)) -> MoreLikelyToOccur(x,y,z))", "all x y.((Earthquake(x) & California(y) & Massachusetts(z)) -> MoreLikelyToOccurIn(x,y,z))", "all x y.((Earthquake(x) & California(y) & Massachusetts(y)) -> MoreLikelyToOccur(x,y))", "all x y z.((Earthquake(x) & California(y) & Massachusetts(z)) -> MoreLikelyToOccurIn(x,y,z))", "all x y.((Earthquake(x) & California(y) & Massachusetts(y)) -> MoreLikelyToOccurIn(x,y))", "all x y.((Earthquake(x) & California(y)) -> MoreLikely(x,y))", "all x y z.((Earthquake(x) & California(y) & Massachusetts(z)) -> MoreLikelyToOccur(x,y,z))", "all x y.((Earthquake(x) & (California(y) | Massachusetts(y))) -> MoreLikelyToOccur(x,y))", "all x y.((Earthquake(x) & California(y) & Massachusetts(z)) -> MoreLikelyIn(x,y,z))", "all x y.((Earthquake(x) & California(y) & Massachusetts(y)) -> MoreLikelyToOccur(x,y))", "all x y.((Earthquake(x) & California(y) & Massachusetts(y)) -> MoreLikelyIn(x,y))", "all x y.((Earthquake(x) & California(y) & Massachusetts(x)) -> MoreLikelyToOccur(x,y))", "all x y.((Earthquake(x) & California(y) & Massachusetts(z)) -> MoreLikely(x,y,z))"]}
{"id": "entailmentbank_validation_175", "nl": "the oceanic plate is a kind of tectonic plate.", "fol": "", "prediction": ["all x.(OceanPlate(x) -> TectonicPlate(x))", "all x.(OceanicPlate(x) -> TectonicPlate(x))", "all x.(OceanPlate(x) -> (TectonicPlate(x) & TectonicPlate(x)))", "all x.(OceanicPlate(x) -> (TectonicPlate(x) & TectonicPlate(x)))", "all x.(OceanPlate(x) -> (TectonicPlate(x) & -TectonicPlate(x)))", "all x.(OceanPlate(x) -> (TectonicPlate(x) & TectonicPlate(x)))", "all x.(OceanPiece(x) -> TectonicPlate(x))", "all x y.((OceanPlate(x) & TectonicPlate(y)) -> Is(x,y))", "all x y.((OceanPlate(x) & TectonicPlate(y)) -> TectonicPlate(x))", "all x.(OceanPlastic(x) -> TectonicPlate(x))", "all x.(OceanPiece(x) -> TectonicPiece(x))", "all x.(OceanicPlate(x) -> (TectonicPlate(x) & -TectonicPlate(x)))", "all x.(OceanPlate(x) -> TectonicPlate(x))", "all x.(OceanPlate(x) -> (TectonicPlate(x)))", "all x.(OceanPlatte(x) -> TectonicPlate(x))", "all x.(OceanPlace(x) -> TectonicPlate(x))"]}
{"id": "entailmentbank_validation_176", "nl": "the subduction of tectonic plates may cause magma to surface from underneath.", "fol": "", "prediction": ["all x.(SubductionOfTectonicPlates(x) -> MayCauseMagmaToSurface(x))", "all x.(SubductionOfTectonicPlates(x) -> MayCauseMagmaToSurfaceFromUnderside(x))", "all x y.((SubductionOfTectonicPlates(x) & TectonicPlate(y)) -> MayCauseMagmaToSurface(x,y))", "all x y.((SubductionOfTectonicPlates(x) & Magma(y)) -> MayCauseSurfaceFromUnderside(x,y))", "all x y.((SubductionOfTectonicPlates(x) & MagmaSurface(y)) -> MayCause(x,y))", "all x y.((SubductionOfTectonicPlates(x) & Magma(y)) -> MayCauseSurface(x,y))", "all x y.((TectonicPlate(x) & Subduction(y)) -> MayCauseMagmaToSurface(x,y))", "all x y.((SubductionOfTectonicPlates(x) & Magma(y)) -> MayCause(x,y))", "all x y.((SubductionOfTectonicPlates(x) & TectonicPlates(y)) -> MayCauseMagmaToSurface(x,y))", "all x y.((SubductionOfTectonicPlates(x) & TectonicPlate(y)) -> MayCauseMagmaToSurfaceFromUnderside(x,y))", "all x.((SubductionOfTectonicPlates(x) & MayCauseMagmaToSurface(x)) -> MayCauseMagmaToSurface(x))", "all x y z.((SubductionOfTectonicPlates(x) & Magma(y) & SubductionOfTectonicPlates(z)) -> MayCauseSurfaceFromUnderside(y,z))", "all x y z.((SubductionOfTectonicPlates(x) & Magma(y) & SubductionOfTectonicPlates(z)) -> MayCauseSurface(y,z))", "all x y z.((SubductionOfTectonicPlates(x) & Magma(y) & SubductionOfTectonicPlates(z)) -> MayCause(x,y,z))", "all x.((SubductionOfTectonicPlates(x) & MagmaSurface(x)) -> MayCause(x,MagmaSurface))", "all x y.((Subduction(x) & TectonicPlate(y)) -> MayCauseMagmaToSurface(x,y))"]}
{"id": "entailmentbank_validation_177", "nl": "the subduction of an oceanic plate may cause magma to surface from underneath.", "fol": "", "prediction": ["all x y.((SubductionOceanPlate(x) & OceanicPlate(y)) -> MayCauseMagmaToSurface(x,y))", "all x y.((SubductionOceanPlate(x) & OceanicPlate(y)) -> MayCauseMagmaToSurfaceFromUnderside(x,y))", "all x.(SubductionOfOceanPlate(x) -> MayCauseMagmaToSurface(x))", "all x y.((SubductionOceanPlate(x) & OceanicPlate(y)) -> MayCauseMagma(x,y))", "all x y.((SubductionOceanPlate(x) & OceanicPlate(y)) -> CausesMagmaToSurface(x,y))", "all x y.((SubductionOfOceanPlate(x) & OceanicPlate(y)) -> MayCauseMagmaToSurface(x,y))", "all x y.((SubductionOceanPlate(x) & OceanicPlate(y)) -> MayCauseMagmaSurface(x,y))", "all x.((SubductionOceanPlate(x) & OceanicPlate(x)) -> MayCauseMagmaToSurface(x))", "all x y.((SubductionOceanPlate(x) & OceanicPlate(y) & SubductionOf(x,y)) -> MayCauseMagmaToSurface(x,y))", "all x.((SubductionOceanPlate(x) & OceanicPlate(y)) -> MayCauseMagmaToSurface(x,y))", "all x y z.((SubductionOceanPlate(x) & OceanicPlate(y) & Magma(z)) -> MayCauseSurface(x,y,z))", "all x y.((SubductionOceanPlate(x) & OceanicPlate(y)) -> CanCauseMagmaToSurface(x,y))", "all x y.((SubductionOcean(x) & OceanicPlate(y)) -> MayCauseMagmaToSurface(x,y))", "all x y z.((SubductionOfOceanPlate(x) & OceanicPlate(y) & Magma(z)) -> MayCauseSurface(x,y,z))", "all x.(SubductionOceanPlate(x) -> MayCauseMagmaToSurface(x))", "all x y.((SubductionOceanPlate(x) & OceanicPlate(y)) -> (MagmaSurface(x,y)))"]}
{"id": "entailmentbank_validation_178", "nl": "magma cools down when it comes to the surface from underneath.", "fol": "", "prediction": ["all x.((Magma(x) & SurfaceFromUnderside(x)) -> CoolsDown(x))", "all x y.((Magma(x) & Surface(y) & FromUnderside(x,y)) -> CoolsDown(x))", "all x y z.((Magma(x) & Surface(y) & Underside(z) & ComesTo(x,y,z)) -> CoolsDown(x))", "all x.((Magma(x) & ComesToSurfaceFromUnderside(x)) -> CoolsDown(x))", "all x y.((Magma(x) & Surface(y) & Underside(y)) -> CoolsDown(x,y))", "all x y z.((Magma(x) & Surface(y) & Underside(z)) -> CoolsDown(x,y,z))", "all x.((Magma(x) & Surface(x) & Underside(x)) -> CoolsDown(x))", "all x y.((Magma(x) & Surface(y) & FromUnderside(x)) -> CoolsDown(x))", "all x.((Magma(x) & SurfaceFromBottom(x)) -> CoolsDown(x))", "all x y.((Magma(x) & Surface(y) & FromUnderside(x)) -> CoolsDown(x,y))", "all x y.((Magma(x) & Surface(y) & FromBottom(x,y)) -> CoolsDown(x))", "all x y.((Magma(x) & Surface(y) & FromUnderside(x,y)) -> CoolsDown(x,y))", "all x y.((Magma(x) & Surface(y) & Underside(x,y)) -> CoolsDown(x))", "all x y.((Magma(x) & Surface(y) & Underside(z)) -> CoolsDown(x,y,z))", "all x y.((Magma(x) & Surface(y) & Underside(x)) -> CoolsDown(x,y))", "all x y z.((Magma(x) & Surface(y) & Underside(z) & ComesTo(x,y)) -> CoolsDown(x))"]}
{"id": "entailmentbank_validation_179", "nl": "the subduction of an oceanic plate will cause magma to surface and cool down.", "fol": "", "prediction": ["all x y.((SubductionOceanPlate(x) & OceanicPlate(y)) -> (CausesMagmaToSurface(x,y) & CoolsDown(x,y)))", "all x y.((SubductionOceanPlate(x) & OceanicPlate(y)) -> (MagmaSurface(x,y) & CoolDown(x,y)))", "all x.(SubductionOceanPlate(x) -> (MagmaSurface(x) & CoolDown(x)))", "all x y.((SubductionOceanPlate(x) & OceanicPlate(y)) -> CausesMagmaToSurfaceAndCoolDown(x,y))", "all x.((OceanPlate(x) & Subduction(x)) -> (MagmaSurface(x) & CoolDown(x)))", "all x.(SubductionOceanPlate(x) -> (MagmaSurface(x) & CoolsDown(x)))", "all x y.((SubductionOceanPlate(x) & OceanicPlate(y)) -> (MagmaSurface(x) & CoolDown(x)))", "all x y.((OceanPlate(x) & Subduction(x,y)) -> (MagmaSurface(y) & CoolDown(y)))", "all x.(SubductionOceanPlate(x) -> (CausesMagmaToSurface(x) & CoolsDown(x)))", "all x y.((SubductionOceanPlate(x) & OceanicPlate(y)) -> (MagmaSurface(x,y) & CoolsDown(x,y)))", "all x y.((OceanPlate(x) & Subduction(y)) -> (MagmaSurface(x,y) & CoolDown(x,y)))", "all x y.((SubductionOceanPlate(x) & OceanicPlate(y)) -> (MagmaSurface(y) & CoolDown(y)))", "all x y.((SubductionOceanPlate(x) & OceanicPlate(y)) -> (MagmaSurface(x,y) & CoolDown(x)))", "all x y.((OceanPlate(x) & Subduction(y)) -> (MagmaSurface(y) & CoolDown(y)))", "all x y.((SubductionOceanPlate(x) & OceanicPlate(y)) -> (CausesMagmaToSurface(x,y) & CoolsDown(x)))", "all x y.((SubductionOceanPlate(x) & OceanicPlate(y) & CausesMagmaToSurface(x,y)) -> CoolsDown(x,y))"]}
{"id": "entailmentbank_validation_180", "nl": "magma cooling can form volcanic mountains.", "fol": "", "prediction": ["all x.(MagmaCooling(x) -> CanFormVolcanicMountains(x))", "all x.(MagmaCooling(x) -> FormsVolcanicMountains(x))", "all x y.((MagmaCooling(x) & VolcanicMountain(y)) -> CanForm(x,y))", "all x y.((MagmaCooling(x) & VolcanicMountain(y)) -> Forms(x,y))", "all x y z.((MagmaCooling(x) & VolcanicMountain(y) & Magma(z)) -> CanForm(x,y,z))", "all x y.((MagmaCooling(x) & VolcanicMountain(y)) -> Form(x,y))", "all x y.((MagmaClimate(x) & VolcanicMountain(y)) -> CanForm(x,y))", "all x y z.((MagmaCooling(x) & VolcanicMountain(y) & Magma(z)) -> Forms(x,y,z))", "all x y.((Magma(x) & VolcanicMountain(y)) -> CanForm(x,y))", "all x.(MagmaClimate(x) -> CanFormVolcanicMountains(x))", "all x.(MagmaCooling(x) -> CanFormVulcanicMountains(x))", "all x y z.((MagmaCooling(x) & VolcanicMountain(y) & Magma(z)) -> CanForm(x,y))", "all x.(MagmaCooling(x) -> FormVolcanicMountains(x))", "all x.(MagmaCooling(x) -> CanFormVolcanicMountains(x))", "all x y z.((MagmaCooling(x) & VolcanicMountain(y) & Magma(z)) -> Form(x,y,z))", "all x.(MagmaCooling(x) -> FormsVolcanicMountain(x))"]}
{"id": "entailmentbank_validation_181", "nl": "the subduction of an oceanic plate can form volcanic mountians.", "fol": "", "prediction": ["all x y.((SubductionOceanPlate(x) & OceanicPlate(y)) -> CanFormVolcanicMountainians(x,y))", "all x y z.((SubductionOceanPlate(x) & OceanicPlate(y) & VolcanicMountain(z)) -> CanForm(x,y,z))", "all x.((SubductionOceanPlate(x) & OceanicPlate(x)) -> CanFormVolcanicMountainians(x))", "all x y.((SubductionOceanPlate(x) & OceanicPlate(y)) -> CanFormVolcanicMountains(x,y))", "all x.((SubductionOceanPlate(x) & OceanicPlate(x)) -> FormsVolcanicMountainians(x))", "all x y.((SubductionOceanPlate(x) & OceanicPlate(y)) -> CanFormVolcanicMountainians(x))", "all x y.((SubductionOceanPlate(x) & OceanicPlate(y)) -> FormsVolcanicMountainians(x,y))", "all x y.((SubductionOceanPlate(x) & OceanicPlate(y)) -> FormsVolcanicMountainians(x))", "all x.((SubductionOceanPlate(x) & OceanicPlate(x)) -> CanFormVolcanicMountains(x))", "all x.(SubductionOceanPlate(x) -> CanFormVolcanicMountainians(x))", "all x y z.((SubductionOceanPlate(x) & OceanicPlate(y) & VolcanicMountain(z)) -> Forms(x,y,z))", "all x.(SubductionOceanPlate(x) -> FormsVolcanicMountainians(x))", "all x y.((SubductionOceanPlate(x) & OceanicPlate(y)) -> CanFormVolcanicMountians(x,y))", "all x.(SubductionOceanPlate(x) -> CanFormVolcanicMountains(x))", "all x.((SubductionOceanPlate(x) & OceanicPlate(x)) -> CanFormVolcanicMountians(x))", "all x.((SubductionOceanPlate(x) & OceanicPlate(y)) -> CanFormVolcanicMountainians(x))"]}
{"id": "entailmentbank_validation_182", "nl": "emitting sulfur dioxide causes acid rain.", "fol": "", "prediction": ["all x.(EmittingSulfurDioxide(x) -> CausesAcidRain(x))", "all x.((EmittingSulfurDioxide(x) & CausesAcidRain(x)) -> CausesAcidRain(x))", "all x y.((EmittingSulfurDioxide(x) & AcidRain(y)) -> Causes(x,y))", "all x.((EmitsSulfurDioxide(x) & CausesAcidRain(x)) -> CausesAcidRain(x))", "all x.((EmittingSulfurDioxide(x) & AcidRain(x)) -> Causes(x,AcidRain))", "all x.(EmitsSulfurDioxide(x) -> CausesAcidRain(x))", "all x.((EmittingSulfurDioxide(x) & CausesAcidRain(x)) -> CausesRain(x))", "all x.((EmitsSulfurDioxide(x) & CausesAcidRain(x)) -> CausesRain(x))", "all x.((EmittingSulfurDioxide(x) & AcidRain(x)) -> Causes(x))", "all x y.((EmitsSulfurDioxide(x) & AcidRain(y)) -> Causes(x,y))", "all x.((SulfurDioxide(x) & Emits(x,Sulfur)) -> CausesAcidRain(x))", "all x.((EmitsSulfurDioxide(x) & CausesAcidRain(x)) -> AcidRain(x))", "all x.((EmittingSulfurDioxide(x) & AcidRain(x)) -> Causes(x,acid))", "all x.((EmittingSulfurDioxide(x) & AcidRain(x)) -> Causes(x,acidrain))", "all x.((EmittingSulfurDioxide(x) & AcidRain(x)) -> Causes(x,acidRain))", "all x.((EmittingSulfurDioxide(x) & AcidRain(x)) -> Causes(x,y))"]}
{"id": "entailmentbank_validation_183", "nl": "volcanic ash in the atmosphere decreases the temperature by blocking the sun.", "fol": "", "prediction": ["all x y.((VolcanicAsh(x) & Atmosphere(y)) -> DecreasesTemperatureByBlockingSun(x,y))", "all x.((VolcanicAsh(x) & Atmosphere(x)) -> DecreasesTemperatureByBlockingSun(x))", "all x y.((VolcanicAsh(x) & Atmosphere(y)) -> (DecreasesTemperatureByBlockingSun(x,y)))", "all x y.((VolcanicAsh(x) & Atmosphere(y)) -> (DecreasesTemperature(x,y) & BlocksSun(x,y)))", "all x y z.((VolcanicAsh(x) & Atmosphere(y) & Sun(z)) -> DecreasesTemperatureByBlocking(x,y,z))", "all x y.((VolcanicAsh(x) & Atmosphere(y)) -> (DecreasesTemperature(x,y) & BlocksSun(x)))", "all x y.((VolcanicAsh(x) & Atmosphere(y) & BlocksSun(x,y)) -> DecreasesTemperature(x,y))", "all x y.((VolcanicAsh(x) & Atmosphere(y)) -> ReducesTemperatureByBlockingSun(x,y))", "all x.((VolcanicAsh(x) & Atmosphere(x)) -> (DecreasesTemperature(x) & BlocksSun(x)))", "all x y z.((VolcanicAsh(x) & Atmosphere(y) & Sun(z)) -> (DecreasesTemperatureByBlocking(x,y,z)))", "all x y.((VolcanicAsh(x) & Atmosphere(y) & BlocksSun(x,y)) -> DecreasesTemperatureByBlockingSun(x,y))", "all x y.((VolcanicAsh(x) & Atmosphere(y)) -> (DecreasesTemperature(x,y) & BlocksSun(y)))", "all x.((VolcanicAsh(x) & Atmosphere(x)) -> (DecreasesTemperatureByBlockingSun(x)))", "all x.((VolcanicAsh(x) & InAtmosphere(x)) -> DecreasesTemperatureByBlockingSun(x))", "all x y.((VolcanicAsh(x) & Atmosphere(y)) -> (DecreasesTemperature(x) & BlocksSun(x)))", "all x y z.((VolcanicAsh(x) & Atmosphere(y) & Temperature(z)) -> DecreasesByBlockingSun(x,y,z))"]}
{"id": "entailmentbank_validation_184", "nl": "an erupting volcano releases sulfur gas and ash into the atmosphere.", "fol": "", "prediction": ["all x.((Volcano(x) & Erupting(x)) -> (ReleasesSulfurGas(x) & ReleasesAsh(x)))", "all x.(EruptingVolcano(x) -> (ReleasesSulfurGas(x) & ReleasesAsh(x)))", "all x.((Volcano(x) & Erupting(x)) -> ReleasesSulfurGasAndAsh(x))", "all x y.((EruptingVolcano(x) & SulfurGas(y) & Ash(y)) -> ReleasesIntoAtmosphere(x,y))", "all x y z.((EruptingVolcano(x) & SulfurGas(y) & Ash(z)) -> ReleasesIntoAtmosphere(x,y,z))", "all x.((Volcano(x) & Erupting(x)) -> ReleasesSulfurGasAndAshIntoAtmosphere(x))", "all x.(EruptingVolcano(x) -> ReleasesSulfurGasAndAshIntoAtmosphere(x))", "all x.(EruptingVolcano(x) -> ReleasesSulfurGasAndAsh(x))", "all x.((Volcano(x) & Erupting(x)) -> (ReleasesSulfurGas(x) & ReleasesAshIntoAtmosphere(x)))", "all x.((EruptingVolcano(x) & ReleasesSulfurGas(x) & ReleasesAsh(x)) -> Atmosphere(x))", "all x.(EruptingVolcano(x) -> (ReleasesSulfurGas(x) & ReleasesAshIntoAtmosphere(x)))", "all x y.((EruptingVolcano(x) & SulfurGas(y) & Ash(z)) -> ReleasesIntoAtmosphere(x,y,z))", "all x.((EruptingVolcano(x) & ReleasesSulfurGas(x) & ReleasesAsh(x)) -> ReleasesIntoAtmosphere(x))", "all x.((EruptingVolcano(x) & ReleasesSulfurGas(x) & ReleasesAsh(x)) -> InAtmosphere(x))", "all x y.((EruptingVolcano(x) & SulfurGas(x) & Ash(y)) -> ReleasesIntoAtmosphere(x,y))", "all x.((EruptingVolcano(x) & ReleasesSulfurGasAndAsh(x)) -> ReleasesIntoAtmosphere(x))"]}
{"id": "entailmentbank_validation_185", "nl": "a volcanic eruption can cause acid rain and decrease the temperature.", "fol": "", "prediction": ["all x.(VolcanicEruption(x) -> (CausesAcidRain(x) & DecreasesTemperature(x)))", "all x y.((VolcanicEruption(x) & AcidRain(y)) -> (Causes(x,y) & DecreasesTemperature(x)))", "all x y z.((VolcanicEruption(x) & AcidRain(y) & Temperature(z)) -> (Causes(x,y) & Decreases(x,z)))", "all x.(VolcanicEruption(x) -> (CanCauseAcidRain(x) & DecreaseTemperature(x)))", "all x.(VolcanicEruption(x) -> (CanCauseAcidRain(x) & CanDecreaseTemperature(x)))", "all x.((VolcanicEruption(x) & CausesAcidRain(x) & DecreasesTemperature(x)) -> CanCause(x,AcidRain))", "all x y.((VolcanicEruption(x) & CausesAcidRain(x) & DecreasesTemperature(y)) -> CanCause(x,y))", "all x y.((VolcanicEruption(x) & CausesAcidRain(x) & DecreasesTemperature(x)) -> CanCause(x,y))", "all x.((VolcanicEruption(x) & CausesAcidRain(x) & DecreasesTemperature(x)) -> CanCauseAndDecreaseTemperature(x))", "all x.(VolcanicEruption(x) -> (CausesAcidRain(x) & ReducesTemperature(x)))", "all x y.((VolcanicEruption(x) & AcidRain(y)) -> (Causes(x,y) & DecreasesTemperature(x,y)))", "all x.((VolcanicEruption(x) & CausesAcidRain(x) & DecreasesTemperature(x)) -> CanDecreaseTemperature(x))", "all x y.((VolcanicEruption(x) & AcidRain(y)) -> CanCauseAndDecreaseTemperature(x,y))", "all x y.((VolcanicEruption(x) & CausesAcidRain(x) & DecreasesTemperature(y)) -> CanCauseAndDecreaseTemperature(x,y))", "all x.(VulcanicEruption(x) -> (CausesAcidRain(x) & DecreasesTemperature(x)))", "all x.((VolcanicEruption(x) & CausesAcidRain(x) & DecreasesTemperature(x)) -> CanCause(x,acidRain))"]}
{"id": "entailmentbank_validation_186", "nl": "europe was unusally cold and had acid rain in 1783.", "fol": "", "prediction": ["all x.(Europe(x) -> (UnusallyCold(x) & AcidRain(x)))", "all x.((Europe(x) & UnusallyCold(x) & AcidRain(x)) -> 1783(x))", "all x.(Europe(x) -> (UnusallyCold(x) & AcidRain(x) & 1783(x)))", "all x.(Europe(x) -> (UnusallyCold(x) & AcidRain(x) & In(x,1783)))", "all x.((Europe(x) & UnusallyCold(x) & AcidRain(x)) -> In1783(x))", "all x.((Europe(x) & UnusallyCold(x) & AcidRain(x,1783)) -> UnusallyCold(x))", "all x.(Europe(x) -> (UnusallyCold(x) & AcidRain(x,1783)))", "all x.((Europe(x) & UnusallyCold(x) & AcidRain(x)) -> In(x,1783))", "all x.((Europe(x) & UnusallyCold(x) & AcidRain(x)) -> UnusallyCold(x))", "all x.((European(x) & UnusallyCold(x) & AcidRain(x)) -> 1783(x))", "all x.((Europe(x) & UnusallyCold(x) & AcidRain(x,1783)) -> Cold(x))", "all x.(Europe(x) -> (UnusallyCold(x) & AcidRainIn(x,1783)))", "all x.(Europe(x) & UnusallyCold(x) & AcidRain(x))", "all x.(Europe(x) -> (UnusallyCold(x) & AcidRain(x) & In1783(x)))", "all x.((Europe(x) & UnusallyCold(x) & AcidRainIn(x,1783)) -> UnusallyCold(x))", "all x.((European(x) & UnusallyCold(x) & AcidRain(x)) -> In1783(x))"]}
{"id": "entailmentbank_validation_187", "nl": "a volcanic eruption may have happened to cause the cold weather and acid rain.", "fol": "", "prediction": ["all x.(VolcanicEruption(x) -> (CausedColdWeather(x) & AcidRain(x)))", "all x.(VolcanicEruption(x) -> (CausesColdWeather(x) & CausesAcidRain(x)))", "all x.(VolcanicEruption(x) -> (CausedColdWeather(x) & CausedAcidRain(x)))", "all x.(VolcanicEruption(x) -> (OccursToCauseColdWeather(x) & CausesAcidRain(x)))", "all x y.((VolcanicEruption(x) & ColdWeather(y) & AcidRain(y)) -> HappenedToCause(x,y))", "all x.(VolcanicEruption(x) -> (ColdWeather(x) & AcidRain(x)))", "all x y.((VolcanicEruption(x) & ColdWeather(y) & AcidRain(y)) -> OccursToCause(x,y))", "all x y.((VolcanicEruption(x) & ColdWeather(y) & AcidRain(y)) -> CouldHaveCaused(x,y))", "all x y.((VolcanicEruption(x) & ColdWeather(y) & AcidRain(y)) -> CouldOccur(x,y))", "all x.(VolcanicEruption(x) -> (CausesColdWeather(x) & AcidRain(x)))", "exists x.(VolcanicEruption(x) & ColdWeather(x) & AcidRain(x))", "all x.((VolcanicEruption(x) & ColdWeather(x) & AcidRain(x)) -> HappenedToCause(x,y))", "all x y.((VolcanicEruption(x) & ColdWeather(y) & AcidRain(y)) -> MayHaveCaused(x,y))", "all x y.((VolcanicEruption(x) & ColdWeather(y) & AcidRain(y)) -> Occurs(x,y))", "all x y.((VolcanicEruption(x) & ColdWeather(y) & AcidRain(y)) -> CouldHaveGaredToCause(x,y))", "all x y.((VolcanicEruption(x) & ColdWeather(y) & AcidRain(y)) -> MayHaveGaredToCause(x,y))"]}
{"id": "entailmentbank_validation_188", "nl": "the earth's atmosphere is made of 78 percent nitrogen by mass.", "fol": "", "prediction": ["all x.((EarthsAtmosphere(x) & MadeOf(x,78)) -> NitrogenByMass(x))", "all x.(EarthsAtmosphere(x) -> MadeOf(x,78))", "all x y.((EarthsAtmosphere(x) & 78PercentNitrogen(y)) -> MadeOf(x,y))", "all x.((EarthsAtmosphere(x) & 78PercentNitrogenByMass(x)) -> MadeOf(x,78))", "all x.((EarthsAtmosphere(x) & 78PercentNitrogenByMass(x)) -> MadeOf(x,y))", "all x.((EarthsAtmosphere(x) & 78PercentNitrogen(x)) -> MadeOfByMass(x))", "all x y z.((EarthsAtmosphere(x) & Nitrogen(y) & Mass(z)) -> MadeOf(x,y,z))", "all x y.((EarthsAtmosphere(x) & Nitrogen(y)) -> MadeOf(x,y))", "all x y.((EarthsAtmosphere(x) & 78PercentNitrogenByMass(y)) -> MadeOf(x,y))", "all x.(EarthsAtmosphere(x) -> 78PercentNitrogenByMass(x))", "all x.((EarthsAtmosphere(x) & 78PercentNitrogen(x)) -> MadeOf(x,y))", "all x.(EarthsAtmosphere(x) -> MadeOf78PercentNitrogenByMass(x))", "all x.((EarthsAtmosphere(x) & MadeOf78PercentNitrogenByMass(x)) -> MadeOf78PercentNitrogen(x))", "all x y.((EarthsAtmosphere(x) & 78PercentNitrogenByMass(x)) -> MadeOf(x,y))", "all x y.((EarthsAtmosphere(x) & 78PercentNitrogen(y)) -> MadeOfByMass(x,y))", "all x.((EarthsAtmosphere(x) & MadeOf78PercentNitrogen(x)) -> MadeOf78PercentNitrogenByMass(x))"]}
{"id": "entailmentbank_validation_189", "nl": "most means over 50% of something.", "fol": "", "prediction": ["all x.(MeansOver50%OfSomething(x) -> MostMeansOver50%OfSomething(x))", "all x y.((MeansOver50%(x) & Something(y)) -> MostMeansOver50%(x,y))", "all x.(MeansOver50%OfSomething(x) -> MeansOver50%OfSomething(x))", "all x.(MeansOver50%(x) -> MostMeansOver50%(x))", "all x y.((More(x,y) & Something(y)) -> MeansOver50%(x,y))", "all x.((MeansOver50%(x)) -> MostMeansOver50%(x))", "all x.((MeansOver50%(x) & Something(x)) -> MostMeansOver50%(x))", "all x y.((MeansOver50%(x) & Something(y)) -> MostMeans(x,y))", "all x.(MeansOver50%OfSomething(x) -> Means(x))", "all x.(MeansOver50%(x) -> Means(x))", "all x y.((Means(x,y) & Something(y)) -> Over50Percent(x))", "all x.(MeansOver50%OfSomething(x) -> MostMeansOver50%(x))", "all x y.((More(x,y) & Something(y)) -> Over50Percent(x,y))", "all x.((MeansOver50%(x)) -> Means(x))", "all x y.((Means(x,y) & Something(y)) -> Over50Percent(x,y))", "all x.(MeansOver50%(x) -> MostMeans(x))"]}
{"id": "entailmentbank_validation_190", "nl": "the earth's atmosphere is made of mostly nitrogen.", "fol": "", "prediction": ["all x.(EarthsAtmosphere(x) -> MadeOfNitrogen(x))", "all x y.((EarthsAtmosphere(x) & Nitrogen(y)) -> MadeOf(x,y))", "all x.(EarthsAtmosphere(x) -> (MadeOfNitrogen(x) & MostlyNitrogen(x)))", "all x y z.((EarthsAtmosphere(x) & Nitrogen(y) & Nitrogen(z)) -> MadeOf(x,y,z))", "all x y.((Earth(x) & Atmosphere(y)) -> MadeOfNitrogen(x,y))", "all x.((EarthsAtmosphere(x) & MadeOfNitrogen(x)) -> MadeOfNitrogen(x))", "all x.(EarthsAtmosphere(x) -> (MadeOfNitrogen(x)))", "all x.(EarthAtmosphere(x) -> MadeOfNitrogen(x))", "all x.((EarthsAtmosphere(x) & MostlyNitrogen(x)) -> MadeOf(x,y))", "all x.((EarthsAtmosphere(x) & MadeOfNitrogen(x)) -> MostlyNitrogen(x))", "all x.((EarthsAtmosphere(x) & MostlyNitrogen(x)) -> MadeOf(x))", "all x.(EarthsAtmosphere(x) -> MostlyNitrogen(x))", "all x.(EarthsAtmosphere(x) -> MakesOfNitrogen(x))", "all x.(EarthsAtmosphere(x) -> MainlyNitrogen(x))", "all x.(EarthsAtmosphere(x) -> MadeOfMostlyNitrogen(x))", "all x.((EarthsAtmosphere(x) & MostlyNitrogen(x)) -> MadeOf(x,nitrogen))"]}
{"id": "entailmentbank_validation_191", "nl": "oceans cover 70% of the surface of the earth.", "fol": "", "prediction": ["all x y.((Ocean(x) & Earth(y)) -> CoversSurface(x,y))", "all x y.((Ocean(x) & Earth(y)) -> Covers70%(x,y))", "all x y.((Ocean(x) & Earth(y)) -> Covers(x,y))", "all x.(Ocean(x) -> CoversSurface(x,70))", "all x y.((Ocean(x) & Earth(y)) -> Covers70%OfSurface(x,y))", "all x y z.((Ocean(x) & Earth(y) & Surface(z)) -> Covers(x,y,z))", "all x.(Ocean(x) -> Covers70%OfEarthSurface(x))", "all x y.((Ocean(x) & EarthSurface(y)) -> Covers70%(x,y))", "all x y z.((Ocean(x) & Earth(y) & Surface(z)) -> Covers70%(x,y,z))", "all x y z.((Ocean(x) & Earth(y) & Surface(z)) -> CoversSurface(x,y,z))", "all x.(Ocean(x) -> Covers70%OfSurface(x))", "all x y z.((Ocean(x) & EarthSurface(y) & Surface(z)) -> Covers(x,y,z))", "all x.(Ocean(x) -> CoversSurfaceOfEarth(x,70))", "all x y.((Ocean(x) & EarthSurface(y)) -> Covers(x,y))", "all x y z.((Ocean(x) & EarthSurface(y) & Surface(z)) -> Covers70%(x,y,z))", "all x.(Ocean(x) -> Covers70%OfEarth(x))"]}
{"id": "entailmentbank_validation_192", "nl": "oceans cover most of earth's surface.", "fol": "", "prediction": ["all x.(Ocean(x) -> CoversMostOfEarthSurface(x))", "all x.(Ocean(x) -> CoversMostOfEarthsSurface(x))", "all x y.((Ocean(x) & EarthSurface(y)) -> Covers(x,y))", "all x y.((Ocean(x) & EarthSurface(y)) -> CoversMost(x,y))", "all x y.((Ocean(x) & Earth(y)) -> CoversMostOfSurface(x,y))", "all x y.((Ocean(x) & EarthsSurface(y)) -> Covers(x,y))", "all x.(Ocean(x) -> CoversMostOfEarth(x))", "all x y z.((Ocean(x) & EarthSurface(y) & Surface(z)) -> Covers(x,y,z))", "all x y z.((Ocean(x) & EarthSurface(y) & EarthSurface(z)) -> Covers(x,y,z))", "all x.(Ocean(x) -> CoversEarthSurface(x))", "all x y.((Ocean(x) & Earth(y)) -> CoversMost(x,y))", "all x y.((Ocean(x) & EarthsSurface(y)) -> CoversMost(x,y))", "all x y z.((Ocean(x) & Earth(y) & Surface(z)) -> Covers(x,y,z))", "all x y.((Ocean(x) & EarthSurface(y)) -> CoversMostOf(x,y))", "all x y.((Ocean(x) & Earth(y)) -> Covers(x,y))", "all x.(Ocean(x) -> (CoversMostOfEarthSurface(x)))"]}
{"id": "entailmentbank_validation_193", "nl": "an ocean is a kind of body of water.", "fol": "", "prediction": ["all x.(Ocean(x) -> BodyOfWater(x))", "all x.(Ocean(x) -> BodyOfWater(x))", "all x.(Ocean(x) -> (BodyOfWater(x)))", "all x y.((Ocean(x) & BodyOfWater(y)) -> Is(x,y))", "all x y.((Ocean(x) & BodyOfWater(y)) -> Water(x))", "all x.exists y.(Ocean(x) & BodyOfWater(y) & InOcean(x,y))", "all x.(Ocean(x) -> (BodyOfWater(x)))", "all x.exists y.(Ocean(x) & BodyOfWater(y) & LocatedIn(x,y))", "all x.(Ocean(x) -> (BodyOfWater(x) & -BodyOfWater(x)))", "all x y.((Ocean(x) & Ocean(y)) -> BodyOfWater(x,y))", "all x y.((Ocean(x) & Ocean(y)) -> BodyOfWater(x))", "all x.(Ocean(x) -> TypeOfWater(x))", "all x y.((Ocean(x) & Water(y)) -> BodyOfWater(x,y))", "all x.(Ocean(x) -> (BodyOfWater(x) & BodyOfWater(x)))", "all x y.((Ocean(x) & Water(y)) -> BodyOfWater(x))", "all x y.((Ocean(x) & BodyOfWater(y)) -> Like(x,y))"]}
{"id": "entailmentbank_validation_194", "nl": "water covers most of earth's surface.", "fol": "", "prediction": ["all x.(Water(x) -> CoversMostOfEarthSurface(x))", "all x y.((Water(x) & EarthSurface(y)) -> Covers(x,y))", "all x.(Water(x) -> CoversMostOfEarthsSurface(x))", "all x y.((Water(x) & EarthsSurface(y)) -> Covers(x,y))", "all x.(Water(x) -> CoversEarthSurface(x))", "all x y z.((Water(x) & EarthSurface(y) & Surface(z)) -> Covers(x,y,z))", "all x y.((Water(x) & EarthSurface(y)) -> CoversMost(x,y))", "all x y.((Water(x) & Earth(y)) -> CoversMostOfSurface(x,y))", "all x y z.((Water(x) & Earth(y) & Surface(z)) -> Covers(x,y,z))", "all x y.((Water(x) & Earth(y)) -> Covers(x,y))", "all x.(Water(x) -> CoversMostOfEarth(x))", "all x y.((Water(x) & Earth(y)) -> CoversSurface(x,y))", "all x y.((Water(x) & Earth(y)) -> CoversMost(x,y))", "all x y.((Water(x) & EarthSurface(y) & Covers(x,y)) -> Covers(x,y))", "all x.(Water(x) -> CoversEarthsSurface(x))", "all x y.((Water(x) & Earth(y)) -> CoversMostSurface(x,y))"]}
{"id": "entailmentbank_validation_195", "nl": "oceans contain most of earth's water.", "fol": "", "prediction": ["all x.(Ocean(x) -> ContainsMostOfEarthsWater(x))", "all x.(Ocean(x) -> (ContainsMostOfEarthsWater(x)))", "all x y.((Ocean(x) & EarthsWater(y)) -> Contains(x,y))", "all x y.((Ocean(x) & Earth(y)) -> ContainsMostOfWater(x,y))", "all x y.((Ocean(x) & EarthsWater(y)) -> ContainsMost(x,y))", "all x.(Ocean(x) -> ContainsEarthsWater(x))", "all x.(Ocean(x) -> ContainsMuchOfEarthsWater(x))", "all x y z.((Ocean(x) & EarthsWater(y) & Water(z)) -> Contains(x,y,z))", "all x y.((Ocean(x) & Earth(y)) -> ContainsMost(x,y))", "all x y z.((Ocean(x) & EarthsWater(y) & EarthsWater(z)) -> Contains(x,y,z))", "all x y.((Ocean(x) & Earth(y)) -> ContainsMuchOfWater(x,y))", "all x.(Ocean(x) -> MostOfEarthsWater(x))", "all x.(Ocean(x) -> (ContainsEarthsWater(x) & ContainsEarthsWater(x)))", "all x y.((Ocean(x) & EarthsWater(y)) -> ContainsMostOf(x,y))", "all x y z.((Ocean(x) & EarthsWater(y) & Water(z)) -> ContainsMost(x,y,z))", "all x.(Ocean(x) -> (ContainMostOfEarthsWater(x)))"]}
{"id": "entailmentbank_validation_196", "nl": "water is made of hydrogen and oxygen.", "fol": "", "prediction": ["all x.(Water(x) -> (MadeOfHydrogen(x) & MadeOfOxygen(x)))", "all x.(Water(x) -> (Hydrogen(x) & Oxygen(x)))", "all x.(Water(x) -> (MadeOf(x,Hydrogen) & MadeOf(x,Oxygen)))", "all x.(Water(x) -> (HasHydrogen(x) & HasOxygen(x)))", "all x.(Water(x) -> (MadeOf(x,hydrogen) & MadeOf(x,oxygen)))", "all x.(Water(x) -> (MadeOfHydrogen(x) & MadeOfOxygen(x)))", "all x y z.((Water(x) & Hydrogen(y) & Oxygen(z)) -> (MadeOf(x,y) & MadeOf(x,z)))", "all x y.((Water(x) & Hydrogen(y) & Oxygen(y)) -> MadeOf(x,y))", "all x.(Water(x) -> (MadeOfHydrogen(x) | MadeOfOxygen(x)))", "all x.(Water(x) -> (madeOfHydrogen(x) & MadeOfOxygen(x)))", "all x.(Water(x) -> (MakesOfHydrogen(x) & MakesOfOxygen(x)))", "all x y.((Water(x) & Hydrogen(y) & Oxygen(z)) -> MadeOf(x,y,z))", "all x.(Water(x) -> (MadeOf(x,hydrogen) & MadeOf(x,oxygen)))", "all x y z.((Water(x) & Hydrogen(y) & Oxygen(z)) -> MadeOf(x,y,z))", "all x.(Water(x) -> (MadeOf(x,hydrogen) & MadeOf(x,Oxygen)))", "all x y.((Water(x) & Hydrogen(y)) -> MadeOf(x,y))"]}
{"id": "entailmentbank_validation_197", "nl": "ocean water is made of hydrogen and oxygen.", "fol": "", "prediction": ["all x.(OceanWater(x) -> (MadeOfHydrogen(x) & MadeOfOxygen(x)))", "all x.(OceanWater(x) -> (Hydrogen(x) & Oxygen(x)))", "all x.(OceanWater(x) -> (MadeOf(x,Hydrogen) & MadeOf(x,Oxygen)))", "all x.(OceanWater(x) -> (MadeOfHydrogen(x) & MadeOfOxygen(x)))", "all x.(OceanWater(x) -> (MadeOf(x,hydrogen) & MadeOf(x,oxygen)))", "all x.(OceanWater(x) -> (HasHydrogen(x) & HasOxygen(x)))", "all x.(OceanWater(x) -> (madeOfHydrogen(x) & MadeOfOxygen(x)))", "all x y.((OceanWater(x) & Hydrogen(y) & Oxygen(y)) -> MadeOf(x,y))", "all x y z.((OceanWater(x) & Hydrogen(y) & Oxygen(z)) -> (MadeOf(x,y) & MadeOf(x,z)))", "all x.(OceanWater(x) -> (MadeOfHydrogen(x) | MadeOfOxygen(x)))", "all x y z.((OceanWater(x) & Hydrogen(y) & Oxygen(z)) -> MadeOf(x,y,z))", "all x.(OceanWater(x) -> (MakesOfHydrogen(x) & MakesOfOxygen(x)))", "all x y.((OceanWater(x) & Hydrogen(y) & Oxygen(z)) -> MadeOf(x,y,z))", "all x.(OceanWater(x) -> MadeOfHydrogen(x) & MadeOfOxygen(x))", "all x y z.((OceanWater(x) & Hydrogen(y) & Oxygen(z)) -> MadeOfAndMadeOf(x,y,z))", "all x y.((OceanWater(x) & Hydrogen(y)) -> MadeOf(x,y))"]}
{"id": "entailmentbank_validation_198", "nl": "oxygen is more common than hydrogen on earth.", "fol": "", "prediction": ["all x y.((Oxygen(x) & Hydrogen(y)) -> MoreCommonOnEarth(x,y))", "all x.((Oxygen(x) & Hydrogen(x)) -> MoreCommonOnEarth(x))", "all x y.((Oxygen(x) & Hydrogen(y)) -> MoreCommon(x,y))", "all x.(Oxygen(x) -> MoreCommonThanHydrogen(x))", "all x y.((Oxygen(x) & Hydroxygen(y)) -> MoreCommonOnEarth(x,y))", "all x.((Oxygen(x) & Hydrogen(y)) -> MoreCommonOnEarth(x,y))", "all x y z.((Oxygen(x) & Hydrogen(y) & Earth(z)) -> MoreCommon(x,y,z))", "all x.((Oxygen(x) & Hydrogen(x)) -> MoreCommonOnEarth(x,y))", "all x y z.((Oxygen(x) & Hydrogen(y) & Earth(z)) -> MoreCommonOn(x,y,z))", "all x y z.((Oxygen(x) & Hydrogen(y) & Earth(z)) -> MoreCommonThan(x,y,z))", "all x y.((Oxygen(x) & Hydrogen(y)) -> CommonOnEarth(x,y))", "all x y.((Oxygen(x) & Hydrogen(y)) -> MoreCommonOnEarth(x,y))", "all x y.((Oxygen(x) & Hydrogen(y)) -> MoreCommonThan(x,y))", "all x.((Oxygen(x) & Hydroxygen(x)) -> MoreCommonOnEarth(x))", "all x.((Oxygen(x) & Hydrogen(x)) -> MoreCommon(x,Earth))", "all x y.((Oxygen(x) & Hydroxygen(y)) -> MoreCommon(x,y))"]}
{"id": "entailmentbank_validation_199", "nl": "oxygen is the most common element found in the compounds that make up ocean water.", "fol": "", "prediction": ["all x.(Oxygen(x) -> (MostCommonElement(x) & FoundInCompounds(x) & MakesUpOceanWater(x)))", "all x y.((Oxygen(x) & Compound(y) & MakesUpOceanWater(x,y)) -> MostCommonElement(x,y))", "all x.(Oxygen(x) -> (CommonElement(x) & FoundInCompounds(x) & MakesUpOceanWater(x)))", "all x.(Oxygen(x) -> (MostCommonElementInCompounds(x) & MakesUpOceanWater(x)))", "all x y z.((Oxygen(x) & Compound(y) & OceanWater(z)) -> MostCommonElement(x,y,z))", "all x y.((Oxygen(x) & Compound(y) & MakesUpOceanWater(x)) -> MostCommonElement(x,y))", "all x.(Oxygen(x) -> MostCommonElementInCompounds(x))", "all x y.((Oxygen(x) & Compound(y)) -> MostCommonElement(x,y))", "all x y.((Oxygen(x) & Compound(y) & MakesUpOceanWater(x,y)) -> CommonElement(x,y))", "all x.(Oxygen(x) -> (MostCommonElement(x) & FoundInCompounds(x) & MakesOceanWater(x)))", "all x y.((Oxygen(x) & Compound(y) & MakesUpOceanWater(y)) -> MostCommonElement(x,y))", "all x y z.((Oxygen(x) & Compound(y) & OceanWater(z)) -> (MostCommonElement(x,y) & FoundIn(x,z)))", "all x y z.((Oxygen(x) & Compound(y) & OceanWater(z)) -> (MostCommonElement(x,y,z) & FoundIn(x,y)))", "all x y.((Oxygen(x) & OceanWater(y)) -> MostCommonElement(x,y))", "all x y.((Oxygen(x) & Compound(y) & MakesUpOceanWater(x,y)) -> MostCommonElementFoundIn(x,y))", "all x y.((Oxygen(x) & Compound(y) & MakesUpOceanWater(x,y)) -> MostCommonElementInCompound(x,y))"]}
{"id": "entailmentbank_validation_200", "nl": "if something is permeable, then the water will flow through something easily.", "fol": "", "prediction": ["all x.((Permeable(x) & WaterFlowsEasily(x)) -> Permeable(x))", "all x.(Permeable(x) -> WaterFlowsEasily(x))", "all x.((Water(x) & Permeable(x)) -> FlowsEasily(x))", "all x.((Permeable(x) -> WaterFlowsEasily(x))", "all x.((Water(x) & Permeable(x)) -> WaterFlowsEasily(x))", "all x y.((Permeable(x) & Permeable(y)) -> WaterFlowsEasily(x,y))", "all x.((Permeable(x) & WaterFlowsEasily(x)) -> Permeable(x))", "all x y.((Permeable(x) & Water(y)) -> FlowsEasily(y))", "all x.((Permeable(x) & Water(x)) -> FlowsEasily(x))", "all x y.((Permeable(x) & Water(y)) -> FlowsEasily(y,x))", "all x.((Permeable(x) & WaterFlowsThrough(x)) -> EasyFlow(x))", "all x y.((Permeable(x) & Water(y)) -> WaterFlowsEasily(y))", "all x.((Permeable(x) & WaterFlowsThrough(x)) -> Easily(x))", "all x.(Permeable(x) -> WaterFlowsEfficiently(x))", "all x.((Permeable(x) & WaterFlows(x)) -> EasyFlow(x))", "all x y.((Permeable(x) & Permeable(y)) -> WaterFlowsEasily(x))"]}
{"id": "entailmentbank_validation_201", "nl": "soil is permeable.", "fol": "", "prediction": ["all x.(Soil(x) -> Permeable(x))", "all x.(Soil(x) -> Permeable(x))", "all x y.((Soil(x) & Permeable(y)) -> Permeable(x))", "all x y.((Soil(x) & Permeable(y)) -> Permeable(x,y))", "all x.((Soil(x) & Permeable(x)) -> Permeable(x))", "all x y.((Soil(x) & Permeable(x)) -> Permeable(y))", "exists x.(Soil(x) & Permeable(x))", "all x y.((Soil(x) & Permeable(y)) -> Permeable(y))", "all x y.((Soil(x) & Permeable(x)) -> Permeable(x))", "all x y.((Soil(x) & Permeable(y)) -> Permeable(z))", "all x.(Soil(x) -> Permeable(x))", "All x.(Soil(x) -> Permeable(x))", "all x.exists y.(Soil(x) & Permeable(y))", "all x y.((Soil(x) & Permeable(x)) -> Permeable(x,y))", "all x y.((Soil(x) & Permeable(x,y)) -> Permeable(y))", "all x.(Soil(x) -> Permable(x))"]}
{"id": "entailmentbank_validation_202", "nl": "water will flow through soil easily.", "fol": "", "prediction": ["all x y.((Water(x) & Soil(y)) -> FlowsEasily(x,y))", "all x y z.((Water(x) & Soil(y) & Soil(z)) -> FlowsEasily(x,y,z))", "all x y.((Water(x) & Soil(y)) -> WillFlowEasily(x,y))", "all x.(Water(x) -> (FlowsThroughSoil(x) & Easily(x)))", "all x.((Water(x) & Soil(y)) -> FlowsEasily(x,y))", "all x.(Water(x) -> FlowsEasily(x))", "all x.(Water(x) -> FlowsEasilyThroughSoil(x))", "all x.(Water(x) -> FlowsThroughSoil(x))", "all x y.((Water(x) & Soil(y)) -> FliesEasily(x,y))", "all x y z.((Water(x) & Soil(y) & Soil(z)) -> WillFlowEasily(x,y,z))", "all x y.((Water(x) & Soil(y)) -> FlowsEfficiently(x,y))", "all x.(Water(x) -> FlowsThroughSoilEasily(x))", "all x y.((Water(x) & Soil(y)) -> EasilyFlowsThrough(x,y))", "all x y.((Water(x) & Soil(y)) -> (FlowsThrough(x,y) & Easily(x)))", "all x y.((Water(x) & Soil(y)) -> WaterFlowsEasily(x,y))", "all x y.((Water(x) & Soil(y)) -> FlowsEasilyThrough(x,y))"]}
{"id": "entailmentbank_validation_203", "nl": "color of the soil can be used to indicate the soil component.", "fol": "", "prediction": ["all x.((Soil(x) & ColorOfSoil(x)) -> IndicatesSoilComponent(x))", "all x y.((Soil(x) & Color(y)) -> IndicatesSoilComponent(x,y))", "all x y.((Soil(x) & SoilComponent(y)) -> CanIndicate(x,y))", "all x.((SoilComponent(x) & ColorOfSoil(x)) -> IndicatesSoilComponent(x))", "all x.((Soil(x) & Color(x)) -> IndicatesSoilComponent(x))", "all x y.((Soil(x) & SoilComponent(y)) -> Indicates(x,y))", "all x y.((SoilComponent(x) & SoilColor(y)) -> Indicates(x,y))", "all x y.((SoilComponent(x) & SoilColor(y)) -> IndicatesSoilComponent(x,y))", "all x y z.((Soil(x) & Color(y) & SoilComponent(z)) -> Indicates(x,y,z))", "all x y z.((Soil(x) & SoilComponent(y) & Color(z)) -> Indicates(x,y,z))", "all x y.((Soil(x) & SoilComponent(y)) -> CanBeIndicated(x,y))", "all x.(SoilColor(x) -> IndicatesSoilComponent(x))", "all x y.((Soil(x) & SoilComponent(y)) -> Color(x,y))", "all x y z.((Soil(x) & Color(y) & SoilComponent(z)) -> CanIndicate(x,y,z))", "all x y.((SoilComponent(x) & Color(y)) -> IndicatesSoilComponent(x,y))", "all x y.((Soil(x) & SoilComponent(y)) -> ColorIndicated(x,y))"]}
{"id": "entailmentbank_validation_204", "nl": "high humus content causes the soil to be brown.", "fol": "", "prediction": ["all x.(HighHumusContent(x) -> BrownSoil(x))", "all x.(HighHumusContent(x) -> SoilBrown(x))", "all x y.((HighHumusContent(x) & Soil(y)) -> Brown(y))", "all x.(HighHumidContent(x) -> BrownSoil(x))", "all x.(HighHumidContent(x) -> SoilBrown(x))", "all x.(HighHumorContent(x) -> BrownSoil(x))", "all x.(HighHumorContent(x) -> SoilBrown(x))", "all x.((HighHumusContent(x) & SoilBrown(x)) -> Causes(x,y))", "all x.((HighHumusContent(x) & SoilBrown(x)) -> High(x))", "all x.((HumusContent(x) & High(x)) -> BrownSoil(x))", "all x.(HighHumusContent(x) -> CausesSoilToBeBrown(x))", "all x.((HighHumidContent(x) & SoilBrown(x)) -> Causes(x,y))", "all x.((HighHumorContent(x) & SoilBrown(x)) -> Causes(x,y))", "all x.(HighHumusContent(x) -> BrownSoil(x))", "all x.((HighHumusContent(x) & BrownSoil(x)) -> Causes(x,Soil))", "all x.((HighHumusContent(x) & SoilBrown(x)) -> CausesBrown(x))"]}
{"id": "entailmentbank_validation_205", "nl": "brown is a kind of color.", "fol": "", "prediction": ["all x.(Brown(x) -> Color(x))", "all x.((Brown(x) & Color(x)) -> Color(x))", "all x.(Brown(x) -> Color(x))", "all x y.((Brown(x) & Color(y)) -> Color(x,y))", "all x y.((Brown(x) & Color(y)) -> Color(x))", "all x.(Bronze(x) -> Color(x))", "exists x.(Brown(x) & Color(x))", "all x y.((Brown(x) & Color(y)) -> Color(y))", "all x.(Brown(x) -> Colour(x))", "all x.(Color(x) -> Brown(x))", "all x.((Brown(x) & Color(x)) -> Brown(x))", "all x y.((Brown(x) & Color(y)) -> Color(z))", "all x.((Brown(x) & Color(x)) -> Colour(x))", "all x y.((Brown(x) & Color(y)) -> Colour(x,y))", "all x.((Brown(x) & Color(x)) -> IsColor(x))", "all x.((Brown(x) & Color(x)) -> KindOfColor(x))"]}
{"id": "entailmentbank_validation_206", "nl": "if the soil has high humus content, then the soil will be brown in color.", "fol": "", "prediction": ["all x.((Soil(x) & HighHumusContent(x)) -> BrownColor(x))", "all x.((Soil(x) & HighHumorContent(x)) -> BrownColor(x))", "all x.((Soil(x) & HighHumidContent(x)) -> BrownColor(x))", "all x.((Soil(x) & HighHumusContent(x)) -> BrownColor(x))", "all x.((Soil(x) & HighHumanContent(x)) -> BrownColor(x))", "all x.((Soil(x) & HighHumusContent(x)) -> BrownInColor(x))", "all x.((Soil(x) & HighHumusContent(x)) -> BrownColorSoil(x))", "all x.((Soil(x) & HighHumusContent(x)) -> BrownColor(x))", "all x y.((Soil(x) & HighHumusContent(x)) -> BrownColor(y))", "all x.((Soil(x) & HighHumusContent(x)) -> BrownColor(x))", "all x.((Soil(x) & HighHumorContent(x)) -> BrownInColor(x))", "all x.((Soil(x) & HighHumorContent(x)) -> BrownColorSoil(x))", "all x.((Soil(x) & HighHumorContent(x)) -> BrownColor(x))", "all x.(HighHumusContent(x) -> BrownColor(x))", "all x.((Soil(x) & HighHumor(x)) -> BrownColor(x))", "all x.((Soil(x) & HighHumurContent(x)) -> BrownColor(x))"]}
{"id": "entailmentbank_validation_207", "nl": "mountains can cause the water in the air mass to condense.", "fol": "", "prediction": ["all x y z.((Mountain(x) & Water(y) & AirMass(z)) -> CanCondense(x,y,z))", "all x.(Mountain(x) -> CausesWaterCondense(x))", "all x y.((Mountain(x) & Water(y)) -> CanCondense(x,y))", "all x y.((Mountain(x) & Water(y)) -> CausesCondense(x,y))", "all x y z.((Mountain(x) & Water(y) & AirMass(z)) -> CausesCondense(x,y,z))", "all x y.((Mountain(x) & AirMass(y)) -> CausesWaterCondense(x,y))", "all x y z.((Mountain(x) & Water(y) & AirMass(z)) -> CausesCondensation(x,y,z))", "all x y.((Mountain(x) & AirMass(y)) -> CausesWaterCondensation(x,y))", "all x y.((Mountain(x) & Water(y)) -> CausesCondensation(x,y))", "all x y.((Mountain(x) & AirMass(y)) -> CanCondenseWater(x,y))", "all x.(Mountain(x) -> CausesWaterCondensation(x))", "all x y z.((Mountain(x) & Water(y) & AirMass(z)) -> Condenses(x,y,z))", "all x y.((Mountain(x) & AirMass(y)) -> WaterCondenses(x,y))", "all x y.((Mountain(x) & Water(y)) -> Condenses(x,y))", "all x y z.((Mountain(x) & Water(y) & AirMass(z)) -> CanCondense(y,z))", "all x y.((Mountain(x) & AirMass(y)) -> WaterCondense(x,y))"]}
{"id": "entailmentbank_validation_208", "nl": "mountain is a kind of geographic obstacles.", "fol": "", "prediction": ["all x.(Mountain(x) -> GeographicObstacle(x))", "all x.(Mountain(x) -> GeospatialObstacle(x))", "all x.(Mountain(x) -> GeographicalObstacle(x))", "all x.(Mountain(x) -> GeographicObstacle(x))", "all x.(Mountain(x) -> GeopoliticalObstacle(x))", "all x.(Mountain(x) -> IsGeographicObstacle(x))", "all x.(Mountain(x) -> GeometricObstacle(x))", "all x.(Mountain(x) -> (GeographicObstacle(x) | GeographicObstacle(x)))", "all x.(Mountain(x) -> (GeographicObstacle(x) & LocatedIn(x,y)))", "all x y.((Mountain(x) & GeographicObstacle(y)) -> GeographicObstacle(x,y))", "all x y.((Mountain(x) & GeographicObstacle(y)) -> Is(x,y))", "all x.(Mountain(x) -> (GeographicObstacle(x) & -GeographicObstacle(x)))", "all x.(Mountain(x) -> (GeographicObstacle(x) | -GeographicObstacle(x)))", "all x y.((Mountain(x) & GeographicObstacle(y)) -> -GeographicObstacle(x,y))", "all x.(Mountain(x) -> (GeographicalObstacle(x) | GeographicObstacle(x)))", "all x y.((Mountain(x) & GeographicObstacle(y)) -> -GeographicalObstacle(x,y))"]}
{"id": "entailmentbank_validation_209", "nl": "mountain is the geographic obstacle that can cause the water in the air mass to condense.", "fol": "", "prediction": ["all x.(Mountain(x) -> (GeographicObstacle(x) & CausesWaterCondense(x)))", "all x.(Mountain(x) -> (GeographicObstacle(x) & CausesWaterCondensation(x)))", "all x.(Mountain(x) -> CausesWaterCondense(x))", "all x y.((Mountain(x) & AirMass(y)) -> CausesWaterCondense(x,y))", "all x.(Mountain(x) -> (GeographicObstacle(x) & CanCondenseWater(x)))", "all x.(Mountain(x) -> (GeographicalObstacle(x) & CausesWaterCondense(x)))", "all x y z.((Mountain(x) & Water(y) & AirMass(z)) -> CausesCondense(x,y,z))", "all x y.((Mountain(x) & Water(y)) -> CausesCondense(x,y))", "all x y.((Mountain(x) & AirMass(y)) -> CausesWaterCondensation(x,y))", "all x y.((Mountain(x) & AirMass(y)) -> (GeographicObstacle(x,y) & CausesWaterCondense(x,y)))", "all x y.((Mountain(x) & AirMass(y)) -> (GeographicObstacle(x,y) & CausesWaterCondensation(x,y)))", "all x.(Mountain(x) -> CausesWaterCondensation(x))", "all x y z.((Mountain(x) & Water(y) & AirMass(z)) -> CausesCondensation(x,y,z))", "all x.(Mountain(x) -> (GeographicalObstacle(x) & CausesWaterCondensation(x)))", "all x.(Mountain(x) -> (GeographicObstacle(x) & CausesCondensation(x)))", "all x.(Mountain(x) -> (GeographicObstacle(x) & CausesWaterCondense(x)))"]}
{"id": "entailmentbank_validation_210", "nl": "if something causes a process then that something is required for that process.", "fol": "", "prediction": ["all x y.((CausesProcess(x) & Process(y)) -> Requires(x,y))", "all x y.((CausesProcess(x,y) & Process(y)) -> Requires(x,y))", "all x y.((CausesProcess(x) & CausesProcess(y)) -> RequiresProcess(x,y))", "all x y.((CausesProcess(x) & Process(y)) -> RequiresProcess(x,y))", "all x y.((CausesProcess(x) & Process(y)) -> RequiredForProcess(x,y))", "all x y.((CausesProcess(x) & CausesProcess(y)) -> RequiredForProcess(x,y))", "all x.(CausesProcess(x) -> RequiresProcess(x))", "all x y.((Causes(x,y) & Process(y)) -> Requires(x,y))", "all x y.((CausesProcess(x) & CausesProcess(y)) -> Requires(x,y))", "all x y.((CausesProcess(x) & Process(y)) -> RequiresForProcess(x,y))", "all x y.((CausesProcess(x) & CausesProcess(y)) -> RequiresForProcess(x,y))", "all x.((CausesProcess(x) & RequiresProcess(x)) -> CausesProcess(x))", "all x.((CausesProcess(x) & RequiresProcess(x)) -> RequiresProcess(x))", "all x y.((CausesProcess(x,y) & Process(y)) -> RequiredForProcess(x,y))", "all x y.((CausesProcess(x) & Process(y)) -> RequiredFor(x,y))", "all x y z.((CausesProcess(x) & Process(y) & Process(z)) -> Requires(x,y,z))"]}
{"id": "entailmentbank_validation_211", "nl": "condensation causes clouds to form.", "fol": "", "prediction": ["all x.(Condensation(x) -> CausesCloudsToForm(x))", "all x y.((Condensation(x) & Cloud(y)) -> CausesToForm(x,y))", "all x y.((Condensation(x) & Cloud(y)) -> CausesFormation(x,y))", "all x y.((Condensation(x) & Cloud(y)) -> Forms(x,y))", "all x y z.((Condensation(x) & Cloud(y) & Cloud(z)) -> CausesToForm(x,y,z))", "all x.(Condensation(x) -> CloudsForm(x))", "all x y z.((Condensation(x) & Cloud(y) & Condensation(z)) -> CausesToForm(x,y,z))", "all x y.((Condensation(x) & Cloud(y)) -> Form(x,y))", "all x.(Condensation(x) -> CausesClouds(x))", "all x y z.((Condensation(x) & Cloud(y) & Cloud(z)) -> CausesFormation(x,y,z))", "all x y.((Condensation(x) & Cloud(y)) -> Causes(x,y))", "all x y z.((Condensation(x) & Cloud(y) & Condensation(z)) -> CausesFormation(x,y,z))", "all x y z.((Condensation(x) & Cloud(y) & Condensation(z)) -> CausesToForm(y,z))", "all x.(Condensation(x) -> CausesCloudFormation(x))", "all x y z.((Condensation(x) & Cloud(y) & Condensation(z)) -> Causes(x,y,z))", "all x y z.((Condensation(x) & Cloud(y) & Cloud(z)) -> Forms(x,y,z))"]}
{"id": "entailmentbank_validation_212", "nl": "condensation is required for clouds to form.", "fol": "", "prediction": ["all x.(Condensation(x) -> CloudsForm(x))", "all x y.((Cloud(x) & Condensation(y)) -> RequiresFormation(x,y))", "all x.(Condensation(x) -> CloudForm(x))", "all x y.((Cloud(x) & Condensation(y)) -> Requires(x,y))", "all x y.((Cloud(x) & Condensation(y)) -> RequiredForFormation(x,y))", "all x y.((Cloud(x) & Cloud(y)) -> CondensationRequired(x,y))", "all x y z.((Cloud(x) & Condensation(y) & Cloud(z)) -> RequiresFormation(y,z))", "all x y z.((Cloud(x) & Condensation(y) & Cloud(z)) -> RequiresFormation(x,y,z))", "all x.((Condensation(x) & Cloud(y)) -> Form(x,y))", "all x.((Cloud(x) & CondensationRequired(x)) -> Form(x))", "all x.(Cloud(x) -> CondensationRequired(x))", "all x y.((Cloud(x) & Cloud(y)) -> CondensationRequiredForFormation(x,y))", "all x.(Cloud(x) -> CondensationRequiredForFormation(x))", "all x y z.((Cloud(x) & Condensation(y) & Cloud(z)) -> Requires(y,z))", "all x y.((Cloud(x) & Cloud(y)) -> RequiresCondensation(x,y))", "all x y.((Cloud(x) & Condensation(y)) -> RequiresForm(x,y))"]}
{"id": "entailmentbank_validation_213", "nl": "erosion is when wind transports sediments from one place to another place for a long distance.", "fol": "", "prediction": ["all x y z.((Wind(x) & Sediment(y) & Place(z) & TransportsForLongDistance(x,y,z)) -> Erosion(x))", "all x y z.((Wind(x) & Sediment(y) & Place(z)) -> TransportsForLongDistance(x,y,z))", "all x y z.((Erosion(x) & Wind(y) & Place(z) & TransportsSediments(y,z)) -> LongDistance(x))", "all x y z.((Erosion(x) & Wind(y) & Place(z)) -> TransportsSedimentsForLongDistance(y,z))", "all x y z.((Wind(x) & Sediment(y) & Place(z) & Transports(x,y,z)) -> LongDistance(x))", "all x y z.((Erosion(x) & Wind(y) & Place(z)) -> TransportsSediments(y,z))", "all x y z.((Wind(x) & Sediment(y) & Place(z) & Transports(x,y,z)) -> Erosion(x))", "all x y z.((Erosion(x) & Wind(y) & Place(z)) -> TransportsSedimentsForLongDistance(x,y,z))", "all x y z.((Erosion(x) & Wind(y) & Place(z) & TransportsSediments(y,z)) -> LongDistance(x))", "all x y.((Wind(x) & Sediment(y)) -> TransportsForLongDistance(x,y))", "all x y z.((Erosion(x) & Wind(y) & Place(z) & TransportsSediments(y,z)) -> LongDistance(x,y,z))", "all x y z.((Erosion(x) & Wind(y) & Place(z)) -> TransportsSedimentsForLongDistance(y,z))", "all x y.((Wind(x) & Sediment(y) & Place(z)) -> TransportsForLongDistance(x,y,z))", "all x.(Erosion(x) -> (WindTransportsSediments(x) & LongDistance(x)))", "all x y z.((Wind(x) & Sediment(y) & Place(z) & Transports(x,y,z)) -> LongDistance(x,y,z))", "all x y z.((Erosion(x) & Wind(y) & Place(z)) -> TransportsSedimentsForLongDistance(x,y,z))"]}
{"id": "entailmentbank_validation_214", "nl": "sand dunes / arches are formed by the wind transporting and depositing sand.", "fol": "", "prediction": ["all x.((SandDune(x) & Arches(x)) -> (FormedByWind(x) & TransportsAndDepositsSand(x)))", "all x y.((SandDune(x) & Arches(y)) -> (FormedByWind(x,y) & TransportsAndDepositsSand(x)))", "all x.((SandDune(x) & Arches(x)) -> (FormedByWind(x) & TransportsSand(x) & DepositsSand(x)))", "all x y.((SandDune(x) & Arches(y)) -> (FormedByWind(x) & TransportsAndDepositsSand(x)))", "all x.((SandDunes(x) & Arches(x)) -> (FormedByWind(x) & TransportsAndDepositsSand(x)))", "all x y.((SandDunes(x) & Arches(y)) -> (FormedByWind(x,y) & TransportsAndDepositsSand(x)))", "all x.((SandDune(x) | Arches(x)) -> (FormedByWind(x) & TransportsAndDepositsSand(x)))", "all x y.((SandDune(x) & Arch(y)) -> (FormedByWind(x,y) & TransportsAndDepositsSand(x)))", "all x.((SandDunes(x) & Arches(x)) -> (FormedByWind(x) & TransportsAndDepositsSand(x)))", "all x y.((SandDune(x) & Arch(y)) -> (FormedByWind(x) & TransportsAndDepositsSand(x)))", "all x y.((SandDunes(x) & Arches(y)) -> (FormedByWind(x) & TransportsAndDepositsSand(x)))", "all x.(SandDunes(x) -> (FormedByWind(x) & TransportsAndDepositsSand(x)))", "all x.((SandDune(x) & Arches(x)) -> FormedByWindTransportingAndDepositingSand(x))", "all x.(SandDune(x) -> (FormedByWind(x) & TransportsAndDepositsSand(x)))", "all x.((SandDune(x) & Arches(x)) -> (FormedByWindTransportingAndDepositingSand(x)))", "all x.(SandDunes(x) -> (FormedByWind(x) & TransportsAndDepositsSand(x)))"]}
{"id": "entailmentbank_validation_215", "nl": "wind erosion can form sand dunes and arches.", "fol": "", "prediction": ["all x.(WindErosion(x) -> (FormsSandDunes(x) | FormsArches(x)))", "all x.(WindErosion(x) -> (FormsSandDunes(x) & FormsArches(x)))", "all x.(WindErosion(x) -> (FormsSandDunes(x) | FormsArches(x)))", "all x.(WindErosion(x) -> (FormsSandDunes(x) & FormsArches(x)))", "all x.(WindErosion(x) -> (FormsSandDunes(x) & FormsArches(x)))", "all x y.((WindErosion(x) & SandDune(y)) -> (Forms(x,y) | Forms(x,y)))", "all x y.((WindErosion(x) & SandDune(y)) -> (Forms(x,y) & Forms(x,y)))", "all x y z.((WindErosion(x) & SandDune(y) & Arches(z)) -> (Forms(x,y) & Forms(x,z)))", "all x.(WindErosion(x) -> (FormsSandDunes(x) | FormsArches(x)))", "all x.(WindErosion(x) -> (FormSandDunes(x) | FormArches(x)))", "all x.(WindErosion(x) -> (FormsSandDunes(x) & FormsArches(x)))", "all x y z.((WindErosion(x) & SandDune(y) & Arches(z)) -> (Forms(x,y) | Forms(x,z)))", "all x.(WindErosion(x) -> (FormsSandDunes(x) | FormsArrches(x)))", "all x y.((WindErosion(x) & SandDune(y)) -> (Forms(x,y) & Forms(x,z)))", "all x.(WindErosion(x) -> (FormsSandDunes(x) & FormsArrches(x)))", "all x y z.((WindErosion(x) & SandDune(y) & Arches(z)) -> Forms(x,y,z))"]}
{"id": "entailmentbank_validation_216", "nl": "rain causes erosion.", "fol": "", "prediction": ["all x.(Rain(x) -> CausesErosion(x))", "all x y.((Rain(x) & Erosion(y)) -> Causes(x,y))", "all x y z.((Rain(x) & Erosion(y) & Rain(z)) -> Causes(x,y,z))", "all x y.((Rain(x) & Erosion(y)) -> Cause(x,y))", "all x y.((Rain(x) & Rain(y)) -> CausesErosion(x,y))", "all x y.((Rain(x) & CausesErosion(y)) -> Causes(x,y))", "all x y z.((Rain(x) & Erosion(y) & Rain(z)) -> Causes(x,z))", "all x y z.((Rain(x) & Erosion(y) & Rain(z)) -> Causes(x,y))", "all x y.((Rain(x) & Erosion(y)) -> Causes(x,y))", "all x y.((Rain(x) & Weather(y)) -> CausesErosion(x,y))", "all x y z.((Rain(x) & Erosion(y) & Rain(z)) -> Cause(x,y,z))", "all x y z.((Rain(x) & Erosion(y) & Weather(z)) -> Causes(x,y,z))", "all x y.((Rain(x) & Erosia(y)) -> Causes(x,y))", "all x y.((Rain(x) & -Rain(y)) -> CausesErosion(x,y))", "all x y.((Rain(x) & CausesErosion(x)) -> Causes(x,y))", "all x y.((Rain(x) & Erosions(y)) -> Causes(x,y))"]}
{"id": "entailmentbank_validation_217", "nl": "erosion sometimes decreases the amount of nutrients in soil.", "fol": "", "prediction": ["all x y.((Erosion(x) & Soil(y)) -> DecreasesNutrients(x,y))", "all x y.((Erosion(x) & Soil(y)) -> (DecreasesNutrients(x,y)))", "all x y.((Erosion(x) & Soil(y)) -> OftenDecreasesNutrients(x,y))", "all x y.((Erosion(x) & Soil(y)) -> SometimesDecreasesNutrients(x,y))", "all x y.((Erosion(x) & Soil(y)) -> DecreasesNutrientAmount(x,y))", "all x.(Erosion(x) -> (DecreasesNutrients(x) & InSoil(x)))", "all x y z.((Erosion(x) & Nutrients(y) & Soil(z)) -> DecreasesAmount(x,y,z))", "all x.(Erosion(x) -> DecreasesNutrientsInSoil(x))", "all x y z.((Erosion(x) & Nutrients(y) & Soil(z)) -> Decreases(x,y,z))", "all x y.((Erosion(x) & Soil(y)) -> (DecreasesNutrients(x,y) | DecreasesNutrients(x,y)))", "all x y z.((Erosion(x) & Nutrient(y) & Soil(z)) -> DecreasesAmount(x,y,z))", "all x y z.((Erosion(x) & Soil(y) & Nutrients(z)) -> DecreasesAmount(x,y,z))", "all x.(Erosion(x) -> DecreasesNutrients(x))", "all x y.((Erosion(x) & Soil(y)) -> DecreasedNutrients(x,y))", "all x y.((Erosion(x) & Soil(y)) -> (DecreasesNutrients(x,y) | ReducesNutrients(x,y)))", "all x y.((Erosion(x) & Soil(y)) -> DefeatsNutrients(x,y))"]}
{"id": "entailmentbank_validation_218", "nl": "rain can decrease the amount of nutrients in soil.", "fol": "", "prediction": ["all x y.((Rain(x) & Soil(y)) -> DecreasesNutrients(x,y))", "all x y.((Rain(x) & Soil(y)) -> CanDecreaseNutrients(x,y))", "all x.(Rain(x) -> DecreasesNutrientsInSoil(x))", "all x y.((Rain(x) & Soil(y)) -> DecreasesNutrientAmount(x,y))", "all x y.((Rain(x) & Soil(y)) -> (DecreasesNutrients(x,y)))", "all x y.((Rain(x) & Soil(y)) -> ReducesNutrients(x,y))", "all x y z.((Rain(x) & Nutrients(y) & Soil(z)) -> CanDecrease(x,y,z))", "all x.(Rain(x) -> DecreasesNutrients(x))", "all x y z.((Rain(x) & Soil(y) & Nutrients(z)) -> CanDecrease(x,y,z))", "all x y z.((Rain(x) & Nutrients(y) & Soil(z)) -> Decreases(x,y,z))", "all x y z.((Rain(x) & Soil(y) & Nutrients(z)) -> DecreasesAmount(x,y,z))", "all x.(Rain(x) -> CanDecreaseNutrientsInSoil(x))", "all x y z.((Rain(x) & Nutrients(y) & Soil(z)) -> DecreasesAmount(x,y,z))", "all x.(Rain(x) -> (DecreasesNutrients(x) & InSoil(x)))", "all x y z.((Rain(x) & Soil(y) & Nutrients(z)) -> CanDecrease(x,z))", "all x.(Rain(x) -> CanDecreaseNutrients(x))"]}
{"id": "entailmentbank_validation_219", "nl": "as the availability of water decreases, the environment will become more dry.", "fol": "", "prediction": ["all x y.((WaterAvailability(x) & Environment(y) & Decreases(x,y)) -> MoreDry(y))", "all x.((WaterAvailabilityDecreases(x) & EnvironmentDecreases(x)) -> MoreDry(x))", "all x y.((WaterAvailability(x) & Environment(y) & Decreases(x)) -> MoreDry(y))", "all x.((WaterAvailabilityDecreases(x) & EnvironmentDecreased(x)) -> MoreDry(x))", "all x.((AvailabilityOfWater(x) & Decreases(x)) -> EnvironmentMoreDry(x))", "all x.((WaterAvailabilityDecreases(x) & Environment(x)) -> MoreDry(x))", "all x.((WaterAvailabilityDecrease(x) & EnvironmentDecreased(x)) -> MoreDry(x))", "all x y z.((WaterAvailability(x) & Environment(y) & WaterAvailability(z) & Decreases(x,z)) -> MoreDry(y))", "all x y.((WaterAvailability(x) & Environment(y)) -> Decreases(x,y))", "all x.((WaterAvailability(x) & Decreases(x)) -> EnvironmentMoreDry(x))", "all x y.((WaterAvailabilityDecrease(x) & Environment(y)) -> MoreDry(y))", "all x.((AvailabilityOfWater(x) & Decreases(x)) -> EnvironmentDecreases(x))", "all x.(DecreasedWaterAvailability(x) -> MoreDryEnvironment(x))", "all x.((WaterAvailabilityDecreases(x) & EnvironmentDry(x)) -> MoreDry(x))", "all x.(DecreasedAvailabilityOfWater(x) -> MoreDryEnvironment(x))", "all x y z.((WaterAvailability(x) & Environment(y) & WaterAvailability(z) & Decreases(y,z)) -> MoreDry(y))"]}
{"id": "entailmentbank_validation_220", "nl": "drought is when available water decreases in an environment.", "fol": "", "prediction": ["all x y.((Drought(x) & Environment(y)) -> DecreasesWater(x,y))", "all x y.((Drought(x) & Environment(y)) -> AvailableWaterDecrease(x,y))", "all x y.((Drought(x) & Environment(y)) -> AvailableWaterDecreases(x,y))", "all x y.((Drought(x) & Environment(y)) -> DecreasedWater(x,y))", "all x y z.((Drought(x) & Water(y) & Environment(z)) -> Decreases(x,y,z))", "all x y.((Drought(x) & Environment(y)) -> DecreasesWaterAvailability(x,y))", "all x y.((Drought(x) & Environment(y)) -> WaterDecrease(x,y))", "all x y.((Drought(x) & Environment(y) & AvailableWaterDecrease(x,y)) -> Decrease(x,y))", "all x y z.((Drought(x) & Water(y) & Environment(z)) -> DecreasesIn(x,y,z))", "all x y.((Drought(x) & Environment(y)) -> WaterDecreases(x,y))", "all x y z.((Drought(x) & Water(y) & Environment(z)) -> AvailableDecreases(x,y,z))", "all x y z.((Drought(x) & Water(y) & Environment(z)) -> Decreases(y,z))", "all x.(Drought(x) -> (DecreasedWater(x) & Environment(x)))", "all x y.((Drought(x) & Environment(y) & DecreasesWater(x,y)) -> DecreasesWater(x,y))", "all x y z.((Drought(x) & Water(y) & Environment(z)) -> AvailableDecrease(x,y,z))", "all x.(Drought(x) -> (DecreasesWater(x) & Environment(x)))"]}
{"id": "entailmentbank_validation_221", "nl": "drought causes the environment to be dry.", "fol": "", "prediction": ["all x.(Drought(x) -> EnvironmentDry(x))", "all x y.((Drought(x) & Environment(y)) -> CausesDry(x,y))", "all x.(Drought(x) -> CausesEnvironmentToBeDry(x))", "all x y z.((Drought(x) & Environment(y) & Environment(z)) -> CausesDry(x,y,z))", "all x.(Drought(x) -> CausesEnvironmentToBeDry(x))", "all x.(Drought(x) -> EnvironmentDry(x))", "all x y.((Drought(x) & Environment(y)) -> CausesToBeDry(x,y))", "all x y z.((Drought(x) & Environment(y) & Environment(z)) -> CausesToBeDry(x,y,z))", "all x y.((Drought(x) & Environment(y) & CausesDry(x,y)) -> CausesDry(x,y))", "all x y.((Drought(x) & Environment(y)) -> CausesDry(x,y))", "all x y.((Drought(x) & Environment(y)) -> CausedToBeDry(x,y))", "all x y z.((Drought(x) & Environment(y) & Environment(z)) -> CausesDry(x,y))", "all x y z.((Drought(x) & Environment(y) & Environment(z) & CausesDry(x,y,z)) -> CausesDry(y,z))", "all x.((Drought(x) & Environment(y)) -> CausesDry(x,y))", "all x y z.((Drought(x) & Environment(y) & Environment(z)) -> CausedToBeDry(x,y,z))", "all x y z.((Drought(x) & Environment(y) & Environment(z) & CausesDry(x,y)) -> CausesDry(x,z))"]}
{"id": "entailmentbank_validation_222", "nl": "dry conditions can cause fire.", "fol": "", "prediction": ["all x.(DryConditions(x) -> CanCauseFire(x))", "all x.(DryConditions(x) -> CausesFire(x))", "all x.((DryConditions(x) & CanCauseFire(x)) -> CanCauseFire(x))", "all x.(DryCondition(x) -> CanCauseFire(x))", "all x.((DryCondition(x) & CanCauseFire(x)) -> CanCauseFire(x))", "all x.((DryConditions(x) & CausesFire(x)) -> CanCauseFire(x))", "all x y.((DryCondition(x) & DryCondition(y)) -> CanCauseFire(x,y))", "all x.((DryCondition(x) & CausesFire(x)) -> CanCauseFire(x))", "all x.(DryCondition(x) -> CausesFire(x))", "all x y.((DryCondition(x) & Fire(y)) -> CanCause(x,y))", "all x.((DryConditions(x) & CausesFire(x)) -> CanCause(x,Fire))", "all x y.((DryCondition(x) & DryCondition(y)) -> CausesFire(x,y))", "all x y.((DryConditions(x) & Fire(y)) -> CanCause(x,y))", "all x.((DryCondition(x) & CausesFire(x)) -> CanCause(x,Fire))", "all x.((DryConditions(x) & CanCauseFire(x)) -> CausesFire(x))", "all x y.((DryCondition(x) & DryCondition(y)) -> CanCauseFire(x))"]}
{"id": "entailmentbank_validation_223", "nl": "drought may cause wildfires.", "fol": "", "prediction": ["all x.(Drought(x) -> MayCauseWildfires(x))", "all x y.((Drought(x) & Wildfire(y)) -> MayCause(x,y))", "all x.(Drought(x) -> MayCauseWildfires(x))", "all x.(Drought(x) -> MayCauseWildfire(x))", "all x.(Drought(x) -> (CausesWildfires(x)))", "all x.(Drought(x) -> CanCauseWildfires(x))", "all x.(Drought(x) -> (MayCauseWildfires(x)))", "all x y.((Drought(x) & Wildfire(y)) -> CanCause(x,y))", "all x.(Drought(x) -> MayCause(x,wildfires))", "all x.(Drought(x) -> CouldCauseWildfires(x))", "all x y z.((Drought(x) & Wildfire(y) & Drought(z)) -> MayCause(x,y,z))", "all x.(Drought(x) -> (CausesWildfires(x) & -CausesWildfires(x)))", "all x y z.((Drought(x) & Wildfire(y) & Drought(z)) -> MayCause(x,y,z))", "all x.((Drought(x) & Wildfire(x)) -> MayCause(x,y))", "all x y z.((Drought(x) & Wildfire(y) & Fire(z)) -> MayCause(x,y,z))", "all x.(Drought(x) -> (CausesWildfires(x) | CausesWildfires(x)))"]}
{"id": "entailmentbank_validation_224", "nl": "a prairie is a kind of ecosystem.", "fol": "", "prediction": ["all x.(Prairie(x) -> Ecosystem(x))", "all x.(Prairie(x) -> Ecosystem(x))", "all x.(Primary(x) -> Ecosystem(x))", "all x y.((Prairie(x) & Ecosystem(y)) -> Is(x,y))", "all x y.((Prairie(x) & Ecosystem(y)) -> Ecosystem(x))", "all x.(Presbytery(x) -> Ecosystem(x))", "all x y.((Prairie(x) & Ecosystem(y)) -> KindOf(x,y))", "all x y.((Prairie(x) & Ecosystem(y)) -> SpeciesOf(x,y))", "all x y.((Prairie(x) & Ecosystem(y)) -> Like(x,y))", "all x y.((Prairie(x) & Ecosystem(y)) -> Ecosystem(x,y))", "all x y.((Prairie(x) & Ecosystem(y)) -> Exists z.((Prairie(z) & Ecosystem(z))))", "all x.exists y.(Prairie(x) & Ecosystem(y) & LocatedIn(x,y))", "all x.((Prairie(x) & Ecosystem(x)) -> Ecosystem(x))", "all x.(Presby(x) -> Ecosystem(x))", "all x.((Prairie(x) & Ecosystem(x)) -> Is(x,y))", "exists x.(Prairie(x) & Ecosystem(x))"]}
{"id": "entailmentbank_validation_225", "nl": "drought may cause wildfires to a prairie.", "fol": "", "prediction": ["all x y.((Drought(x) & Prairie(y)) -> MayCauseWildfires(x,y))", "all x y z.((Drought(x) & Prairie(y) & Wildfire(z)) -> MayCause(x,y,z))", "all x y.((Drought(x) & Prairie(y)) -> CanCauseWildfires(x,y))", "all x y.((Drought(x) & Prairie(y)) -> MayCauseWildfiresTo(x,y))", "all x y.((Drought(x) & Prairie(y)) -> CausesWildfires(x,y))", "all x y.((Drought(x) & Prairie(y)) -> (CausesWildfires(x,y) | CausesWildfires(x,y)))", "all x y.((Drought(x) & Prairie(y)) -> MayCauseWildfire(x,y))", "all x y z.((Drought(x) & Prairie(y) & Wildfire(z)) -> MayCauseTo(x,y,z))", "all x y z.((Drought(x) & Prairie(y) & Wildfire(z)) -> CanCause(x,y,z))", "all x y z.((Drought(x) & Prairie(y) & Wildfire(z)) -> CausesTo(x,y,z))", "all x y.((Drought(x) & Prairie(y)) -> CausesWildfiresTo(x,y))", "all x.(Drought(x) -> (CausesWildfires(x) & ToPrairie(x)))", "all x.(Drought(x) -> MayCauseWildfiresToPrairie(x))", "all x y.((Drought(x) & Prairie(y)) -> (CausesWildfires(x,y) & To(x,y)))", "all x y.((Drought(x) & Prairie(y)) -> CouldCauseWildfires(x,y))", "all x y.((Drought(x) & Prairie(y)) -> CanCauseWildfiresTo(x,y))"]}
{"id": "entailmentbank_validation_226", "nl": "a barometer is a kind of instrument.", "fol": "", "prediction": ["all x.(Barometer(x) -> Instrument(x))", "all x.(Barometer(x) -> Instrument(x))", "all x y.((Barometer(x) & Instrument(y)) -> Instrument(x))", "all x y.((Barometer(x) & Instrument(y)) -> Instrument(x,y))", "all x y.((Barometer(x) & Instrument(y)) -> Is(x,y))", "all x y.((Barometer(x) & Instrument(y)) -> (Instrument(x) & Instrument(y)))", "all x.exists y.(Barometer(x) & Instrument(y) & UsedFor(x,y))", "all x y.((Barometer(x) & Instrument(y)) -> KindOf(x,y))", "all x y.((Barometer(x) & Instrument(y)) -> TypeOf(x,y))", "all x y.((Barometer(x) & Instrument(y)) -> (Instrument(x) & Instrument(y)))", "all x.exists y.(Barometer(x) & Instrument(y) & UsedBy(x,y))", "all x.exists y.(Barometer(x) & Instrument(y) & DesignedFor(x,y))", "all x y.((Barometer(x) & Instrument(y)) -> (Instrument(x,y) | Instrument(x,y)))", "all x y.((Barometer(x) & Instrument(y)) -> Instrument(x,y))", "all x.(Barometer(x) -> (Instrument(x) & Instrument(x)))", "all x y z.((Barometer(x) & Instrument(y) & Instrument(z)) -> Instrument(x,y,z))"]}
{"id": "entailmentbank_validation_227", "nl": "a barometer is used to measure air pressure.", "fol": "", "prediction": ["all x.(Barometer(x) -> MeasuresAirPressure(x))", "all x y.((Barometer(x) & AirPressure(y)) -> Measures(x,y))", "all x y.((Barometer(x) & AirPressure(y)) -> UsedToMeasure(x,y))", "all x.(Barometer(x) -> UsedToMeasureAirPressure(x))", "all x y z.((Barometer(x) & AirPressure(y) & AirPressure(z)) -> Measures(x,y,z))", "all x y z.((Barometer(x) & AirPressure(y) & AirPressure(z)) -> UsedToMeasure(x,y,z))", "all x y z.((Barometer(x) & AirPressure(y) & Pressure(z)) -> Measures(x,y,z))", "all x y.((Barometer(x) & AirPressure(y)) -> Measure(x,y))", "all x y z.((Barometer(x) & AirPressure(y) & Pressure(z)) -> UsedToMeasure(x,y,z))", "all x y z.((Barometer(x) & AirPressure(y) & AirPressure(z)) -> Measure(x,y,z))", "all x y.((Barometer(x) & AirPressure(y)) -> UsedForMeasurement(x,y))", "all x y.((Barometer(x) & AirPressure(y) & Measures(x,y)) -> UsedToMeasure(x,y))", "all x y z.((Barometer(x) & AirPressure(y) & AirPressure(z)) -> Measures(x,y))", "all x y.((Barometer(x) & AirPressure(y)) -> Measured(x,y))", "all x.(Barometer(x) -> MeasureAirPressure(x))", "all x y z.((Barometer(x) & AirPressure(y) & Temperature(z)) -> Measures(x,y,z))"]}
{"id": "entailmentbank_validation_228", "nl": "a barometer is an instrument used to measure air pressure.", "fol": "", "prediction": ["all x.(Barometer(x) -> MeasuresAirPressure(x))", "all x.(Barometer(x) -> MeasuresAirPressure(x))", "all x y.((Barometer(x) & AirPressure(y)) -> Measures(x,y))", "all x.(Barometer(x) -> (MeasuresAirPressure(x) & MeasuresAirPressure(x)))", "all x.(Barometer(x) -> (Instrument(x) & MeasuresAirPressure(x)))", "all x y z.((Barometer(x) & AirPressure(y) & AirPressure(z)) -> Measures(x,y,z))", "all x.(Barometer(x) -> UsedToMeasureAirPressure(x))", "all x.(Barometer(x) -> MeasureAirPressure(x))", "all x y z.((Barometer(x) & AirPressure(y) & Instrument(z)) -> Measures(x,y,z))", "all x y.((Barometer(x) & AirPressure(y)) -> UsedToMeasure(x,y))", "all x.(Barometer(x) -> (Instrument(x) & MeasuresAirPressure(x)))", "all x.(Barometer(x) -> (MeasuresAirPressure(x) & MeasuresAirPressure(x)))", "all x.(Barometer(x) -> (MeasuresAirPressure(x) & UsedToMeasureAirPressure(x)))", "all x y.((Barometer(x) & Instrument(y)) -> MeasuresAirPressure(x,y))", "all x.(Barometer(x) -> (MeasuresAirPressure(x) | MeasuresAirPressure(x)))", "all x.(Barometer(x) -> (MeasuresAirPressure(x) & MeasuresPressure(x)))"]}
{"id": "entailmentbank_validation_229", "nl": "a property is a kind of information.", "fol": "", "prediction": ["all x.(Property(x) -> Information(x))", "all x.((Property(x) & Information(x)) -> Information(x))", "all x y.((Property(x) & Information(y)) -> Information(x))", "all x y.((Property(x) & Information(y)) -> Information(x,y))", "all x.(Property(x) -> Information(x))", "all x y z.((Property(x) & Information(y) & Information(z)) -> Information(x,y,z))", "exists x.(Property(x) & Information(x))", "all x y z.((Property(x) & Information(y) & Information(z)) -> Information(x))", "all x y.((Property(x) & Information(y)) -> KindOf(x,y))", "all x y.((Property(x) & Information(y)) -> Is(x,y))", "all x y.((Property(x) & Information(y)) -> TypeOf(x,y))", "all x.((Property(x) & Information(x)) -> KindOfInformation(x))", "all x y z.((Property(x) & Information(y) & Information(z)) -> Information(x,y))", "all x.exists y.(Property(x) & Information(y) & Contains(x,y))", "all x y.((Property(x) & Information(y)) -> FormOf(x,y))", "all x y.((Property(x) & Information(y)) -> KindOfInformation(x))"]}
{"id": "entailmentbank_validation_230", "nl": "temperature is a property of weather.", "fol": "", "prediction": ["all x.(Temperature(x) -> WeatherProperty(x))", "all x y.((Temperature(x) & Weather(y)) -> PropertyOf(x,y))", "all x.(Temperature(x) -> PropertyOfWeather(x))", "all x y z.((Temperature(x) & Weather(y) & Weather(z)) -> PropertyOf(x,y,z))", "all x.(Temperature(x) -> WeatherProperty(x))", "all x y.((Temperature(x) & Weather(y)) -> Property(x,y))", "all x y.((Temperature(x) & Weather(y)) -> PropertiesOf(x,y))", "all x y z.((Temperature(x) & Weather(y) & Weather(z)) -> PropertyOf(x,y))", "all x y.((Temperature(x) & Weather(y) & PropertyOf(x,y)) -> PropertyOf(x,y))", "all x y z.((Temperature(x) & Weather(y) & Temperature(z)) -> PropertyOf(x,y,z))", "all x y z.((Temperature(x) & Weather(y) & Weather(z)) -> PropertiesOf(x,y,z))", "all x.(Temperature(x) -> Weather(x))", "all x y z.((Temperature(x) & Weather(y) & Weather(z)) -> Property(x,y,z))", "all x y.((Temperature(x) & Weather(y) & Property(x,y)) -> PropertyOf(x,y))", "all x.exists y.(Temperature(x) & Weather(y) & PropertyOf(x,y))", "all x.(Temperature(x) -> (PropertyOfWeather(x)))"]}
{"id": "entailmentbank_validation_231", "nl": "temperature is a kindof information about weather.", "fol": "", "prediction": ["all x.(Temperature(x) -> WeatherInformation(x))", "all x.(Temperature(x) -> InformationAboutWeather(x))", "all x y.((Temperature(x) & Weather(y)) -> InformationAbout(x,y))", "all x y z.((Temperature(x) & Weather(y) & Weather(z)) -> InformationAbout(x,y,z))", "all x.(Temperature(x) -> (InformationAboutWeather(x)))", "all x y.((Temperature(x) & Weather(y)) -> Information(x,y))", "all x.(Temperature(x) -> WeatherInfo(x))", "all x y.((Temperature(x) & Weather(y)) -> IsInformation(x,y))", "all x y z.((Temperature(x) & Weather(y) & Weather(z)) -> Information(x,y,z))", "all x.(Temperature(x) -> WeatherInformation(x))", "all x y.((Temperature(x) & Weather(y)) -> KindofInformation(x,y))", "all x.(Temperature(x) -> (InformationAboutWeather(x) & -InformationAboutWeather(x)))", "all x y.((Temperature(x) & Weather(y)) -> Informative(x,y))", "all x.(Temperature(x) -> KindofInformationAboutWeather(x))", "all x y z.((Temperature(x) & Weather(y) & Weather(z)) -> IsInformation(x,y,z))", "all x.(Temperature(x) -> InformationAboutWeather(x))"]}
{"id": "entailmentbank_validation_232", "nl": "a thermometer is used to measure temperature.", "fol": "", "prediction": ["all x.(Thermometer(x) -> MeasuresTemperature(x))", "all x y.((Thermometer(x) & Temperature(y)) -> Measures(x,y))", "all x.(Thermometer(x) -> UsedToMeasureTemperature(x))", "all x y.((Thermometer(x) & Temperature(y)) -> UsedToMeasure(x,y))", "all x y z.((Thermometer(x) & Temperature(y) & Temperature(z)) -> Measures(x,y,z))", "all x y z.((Thermometer(x) & Temperature(y) & Temperature(z)) -> UsedToMeasure(x,y,z))", "all x y z.((Thermometer(x) & Temperature(y) & Temperature(z)) -> Measure(x,y,z))", "all x y.((Thermometer(x) & Temperature(y)) -> Measure(x,y))", "all x y z.((Thermometer(x) & Temperature(y) & Temperature(z) & Measures(x,y,z)) -> UsedToMeasure(x,y,z))", "all x y.((Thermometer(x) & Temperature(y) & Measures(x,y)) -> UsedToMeasure(x,y))", "all x y z.((Thermometer(x) & Temperature(y) & Temperature(z)) -> Measures(x,y))", "all x y z.((Thermometer(x) & Temperature(y) & Temperature(z)) -> Measured(x,y,z))", "all x y z.((Thermometer(x) & Temperature(y) & Temperature(z) & Measures(x,y,z)) -> UsedToMeasure(x,y))", "all x y.((Thermometer(x) & Temperature(y) & UsedToMeasure(x,y)) -> Measures(x,y))", "all x y z.((Thermometer(x) & Temperature(y) & Temperature(z) & Measures(x,y)) -> UsedToMeasure(x,z))", "all x y.((Thermometer(x) & TemperatureMeasurement(y)) -> UsedToMeasure(x,y))"]}
{"id": "entailmentbank_validation_233", "nl": "a thermometer is used to measure the information about weather on temperature.", "fol": "", "prediction": ["all x.(Thermometer(x) -> MeasuresWeatherInformationOnTemperature(x))", "all x.(Thermometer(x) -> MeasuresWeatherInformation(x))", "all x y.((Thermometer(x) & WeatherInformation(y)) -> MeasuresOnTemperature(x,y))", "all x y.((Thermometer(x) & Weather(y)) -> MeasuresInformationOnTemperature(x,y))", "all x y z.((Thermometer(x) & WeatherInformation(y) & Temperature(z)) -> MeasuresOn(x,y,z))", "all x y z.((Thermometer(x) & Weather(y) & Temperature(z)) -> MeasuresInformationOn(x,y,z))", "all x y.((Thermometer(x) & WeatherInfo(y)) -> MeasuresOnTemperature(x,y))", "all x y z.((Thermometer(x) & WeatherInformation(y) & Temperature(z)) -> Measures(x,y,z))", "all x y.((Thermometer(x) & WeatherInformation(y)) -> Measures(x,y))", "all x.(Thermometer(x) -> MeasuresWeatherInfoOnTemperature(x))", "all x y z.((Thermometer(x) & Weather(y) & Temperature(z)) -> MeasuresInformation(x,y,z))", "all x y.((Thermometer(x) & WeatherInformation(y)) -> MeasuredOnTemperature(x,y))", "all x y z.((Thermometer(x) & WeatherInformation(y) & Temperature(z)) -> MeasuredOn(x,y,z))", "all x y.((Thermometer(x) & Weather(y)) -> MeasuresInformation(x,y))", "all x y.((Thermometer(x) & Weather(y)) -> MeasuresOnTemperature(x,y))", "all x y.((Thermometer(x) & Temperature(y)) -> MeasuresWeatherInformation(x,y))"]}
{"id": "entailmentbank_validation_234", "nl": "wind direction is a property of weather.", "fol": "", "prediction": ["all x.(WindDirection(x) -> WeatherProperty(x))", "all x y.((WindDirection(x) & Weather(y)) -> PropertyOf(x,y))", "all x.(WindDirection(x) -> PropertyOfWeather(x))", "all x y z.((WindDirection(x) & Weather(y) & Weather(z)) -> PropertyOf(x,y,z))", "all x.(WindDirection(x) -> WeatherProperty(x))", "all x y.((WindDirection(x) & Weather(y)) -> Property(x,y))", "all x y z.((WindDirection(x) & Weather(y) & Wind(z)) -> PropertyOf(x,y,z))", "all x y z.((WindDirection(x) & Weather(y) & WindDirection(z)) -> PropertyOf(x,y,z))", "all x y.((WindDirection(x) & WeatherProperty(y)) -> PropertyOf(x,y))", "all x y z.((WindDirection(x) & Weather(y) & Weather(z)) -> PropertyOf(x,y))", "all x y.((WindDirection(x) & Weather(y)) -> PropertiesOf(x,y))", "all x y z.((WindDirection(x) & Weather(y) & Temperature(z)) -> PropertyOf(x,y,z))", "all x.(WoodDirection(x) -> WeatherProperty(x))", "all x y z.((WindDirection(x) & Weather(y) & Weather(z)) -> Property(x,y,z))", "all x y.((WindDirection(x) & Weather(y) & Property(x,y)) -> PropertyOf(x,y))", "all x y z.((WindDirection(x) & Weather(y) & Weather(z)) -> PropertiesOf(x,y,z))"]}
{"id": "entailmentbank_validation_235", "nl": "wind direction is a kind of information about weather.", "fol": "", "prediction": ["all x.(WindDirection(x) -> InformationAboutWeather(x))", "all x.(WindDirection(x) -> WeatherInformation(x))", "all x y.((WindDirection(x) & Weather(y)) -> InformationAbout(x,y))", "all x y z.((WindDirection(x) & Weather(y) & Weather(z)) -> InformationAbout(x,y,z))", "all x y.((WindDirection(x) & Weather(y)) -> Information(x,y))", "all x.(WindDirection(x) -> InformationAboutWeather(x))", "all x y z.((WindDirection(x) & Weather(y) & Weather(z)) -> Information(x,y,z))", "all x.(WindDirection(x) -> (InformationAboutWeather(x)))", "all x y.((WindDirection(x) & Weather(y)) -> Informative(x,y))", "all x.(WoodDirection(x) -> InformationAboutWeather(x))", "all x.(WindDirection(x) -> WeatherInformation(x))", "all x y.((WindDirection(x) & Weather(y)) -> IsInformation(x,y))", "all x.(WindDirection(x) -> InformationOnWeather(x))", "all x y z.((WindDirection(x) & Weather(y) & Weather(z)) -> InformationAbout(x,y))", "all x y z.((WindDirection(x) & Weather(y) & Weather(z)) -> Information(x,y))", "all x y z.((WindDirection(x) & Weather(y) & Weather(z)) -> Informative(x,y,z))"]}
{"id": "entailmentbank_validation_236", "nl": "a station model is used for displaying information about weather in a particular point and time.", "fol": "", "prediction": ["all x y.((StationModel(x) & PointAndTime(y)) -> DisplaysWeatherInformation(x,y))", "all x y.((StationModel(x) & PointAndTime(y)) -> DisplaysInformationAboutWeather(x,y))", "all x y z.((StationModel(x) & WeatherInformation(y) & PointAndTime(z)) -> DisplaysInformation(x,y,z))", "all x y.((StationModel(x) & Point(y) & Time(y)) -> DisplaysWeatherInformation(x,y))", "all x y z.((StationModel(x) & Information(y) & PointAndTime(z)) -> DisplaysInformationAboutWeather(x,y,z))", "all x y z.((StationModel(x) & Information(y) & PointAndTime(z)) -> DisplaysInformation(x,y,z))", "all x y.((StationModel(x) & Point(y) & Time(y)) -> DisplaysInformationAboutWeather(x,y))", "all x.(StationModel(x) -> DisplaysInformationAboutWeather(x))", "all x y z.((StationModel(x) & Weather(y) & PointAndTime(z)) -> DisplaysInformation(x,y,z))", "all x.(StationModel(x) -> DisplaysWeatherInformation(x))", "all x y z.((StationModel(x) & Information(y) & Point(z) & Time(z)) -> DisplaysInformationAboutWeather(x,y,z))", "all x y.((StationModel(x) & Information(y)) -> DisplaysInformationAboutWeather(x,y))", "all x y.((StationModel(x) & Point(y) & Time(z)) -> DisplaysWeatherInformation(x,y,z))", "all x y z.((StationModel(x) & PointAndTime(y) & WeatherInformation(z)) -> DisplaysInformation(x,y,z))", "all x y.((StationModel(x) & PointAndTime(y)) -> DisplaysWeatherInfo(x,y))", "all x y z.((StationModel(x) & Information(y) & Point(z) & Time(z)) -> DisplaysInformation(x,y,z))"]}
{"id": "entailmentbank_validation_237", "nl": "wind direction in a particular point and time is displayed in a station model.", "fol": "", "prediction": ["all x y z.((WindDirection(x) & PointAndTime(y) & StationModel(z)) -> DisplayedIn(x,y,z))", "all x y.((WindDirection(x) & Point(y) & Time(y)) -> DisplayedInStationModel(x,y))", "all x y.((WindDirection(x) & PointAndTime(y)) -> DisplayedInStationModel(x,y))", "all x y z.((WindDirection(x) & Point(y) & Time(z)) -> DisplayedInStationModel(x,y,z))", "all x y.((WindDirection(x) & StationModel(y)) -> DisplayedIn(x,y))", "all x y z.((WindDirection(x) & Point(y) & Time(z) & StationModel(x)) -> DisplayedIn(x,y,z))", "all x.((WindDirection(x) & PointAndTime(x)) -> DisplayedInStationModel(x))", "all x y z.((WindDirection(x) & PointAndTime(y) & StationModel(z)) -> DisplayedIn(x,z))", "all x.((WindDirection(x) & Point(x) & Time(x)) -> DisplayedInStationModel(x))", "all x y z.((WindDirection(x) & Point(y) & Time(z)) -> DisplayedInStationModel(x))", "all x y.((WindDirection(x) & Point(y) & Time(y)) -> DisplayedInStationModel(x))", "all x y.((StationModel(x) & WindDirection(y)) -> DisplayedIn(x,y))", "all x y.((WoodDirection(x) & Point(y) & Time(y)) -> DisplayedInStationModel(x,y))", "all x y z.((WindDirection(x) & PointAndTime(y) & StationModel(z) & DisplayedIn(x,y,z)) -> WindDirection(x,y,z))", "all x y z.((WindDirection(x) & Point(y) & Time(z) & StationModel(z)) -> DisplayedIn(x,y,z))", "all x y.((WindDirection(x) & PointAndTime(y)) -> DisplayedInStationModel(x))"]}
{"id": "entailmentbank_validation_238", "nl": "sleet is a kind of precipitation.", "fol": "", "prediction": ["all x.(Sleet(x) -> Precipitation(x))", "all x y.((Sleet(x) & Precipitation(y)) -> Precipitation(x,y))", "all x.(Sleet(x) -> Precipitation(x))", "all x y.((Sleet(x) & Precipitation(y)) -> Precipitation(x))", "all x.((Sleet(x) & Precipitation(x)) -> Precipitation(x))", "all x y z.((Sleet(x) & Precipitation(y) & Snow(z)) -> Precipitation(x,y,z))", "all x y.((Sleet(x) & Precipitation(y)) -> Precipitation(y))", "all x y z.((Sleet(x) & Precipitation(y) & Weather(z)) -> Precipitation(x,y,z))", "all x y z.((Sleet(x) & Precipitation(y) & Ice(z)) -> Precipitation(x,y,z))", "all x y.((Sleet(x) & Precipitation(y)) -> Is(x,y))", "all x y.((Sleet(x) & Precipitation(y)) -> (Precipitation(x) & Precipitation(y)))", "all x y.((Sleet(x) & Precipitation(x)) -> Precipitation(y))", "all x y z.((Sleet(x) & Precipitation(y) & Snow(z)) -> Precipitation(y,z))", "all x y.((Sleet(x) & Precipitation(y)) -> Precipitation(z))", "all x y z.((Sleet(x) & Precipitation(y) & Snow(z)) -> Precipitation(x,z))", "all x y z.((Sleet(x) & Precipitation(y) & Snow(z)) -> Precipitation(x))"]}
{"id": "entailmentbank_validation_239", "nl": "hail is a kind of precipitation.", "fol": "", "prediction": ["all x.(Hail(x) -> Precipitation(x))", "all x y.((Hail(x) & Precipitation(y)) -> Precipitation(x,y))", "all x.(Hail(x) -> Precipitation(x))", "all x y.((Hail(x) & Precipitation(y)) -> Precipitation(x))", "all x y.((Hail(x) & Precipitation(y)) -> Is(x,y))", "all x y z.((Hail(x) & Precipitation(y) & Precipitation(z)) -> Precipitation(x,y,z))", "all x y z.((Hail(x) & Precipitation(y) & Weather(z)) -> Precipitation(x,y,z))", "all x y.((Hail(x) & Precipitation(y)) -> Precipitation(y))", "all x y.((Hail(x) & Precipitation(y)) -> KindOf(x,y))", "all x.(Hole(x) -> Precipitation(x))", "all x y.((Hail(x) & Precipitation(y)) -> (Precipitation(x) & Precipitation(y)))", "all x y.((Hail(x) & Precipitation(y)) -> SortOf(x,y))", "all x y.((Hail(x) & Precipitation(y)) -> IsPrecipitation(x,y))", "all x y.((Hail(x) & Precipitation(y)) -> FormOf(x,y))", "all x y.((Hail(x) & Precipitation(y)) -> Precipitation(z))", "all x y.((Hail(x) & Precipitation(y)) -> Has(x,y))"]}
{"id": "entailmentbank_validation_240", "nl": "hail and sleet are different kinds of precipitation.", "fol": "", "prediction": ["all x.((Hail(x) | Sleet(x)) -> Precipitation(x))", "all x y.((Hail(x) & Sleet(y)) -> Precipitation(x,y))", "(all x.(Hail(x) -> Precipitation(x)) & all y.(Sleet(y) -> Precipitation(y)))", "all x.(Hail(x) | Sleet(x)) -> Precipitation(x))", "all x y.((Hail(x) & Sleet(y)) -> Precipitation(x))", "all x.((Hail(x) & Sleet(x)) -> Precipitation(x))", "all x.((Hail(x) | Snow(x)) -> Precipitation(x))", "all x.(Hail(x) & Sleet(x)) -> Precipitation(x))", "all x.((Hail(x) | Sleet(x)) -> DifferentPrecipitation(x))", "(all x.(Hail(x) | All y.(Sleet(y))) -> Precipitation(x,y)))", "(all x.(Hail(x) | All y.(Sleet(y))) -> Precipitation(x)))", "(DifferentPrecipitation(Hail) & DifferentPrecipitation(Sleet))", "all x.(Precipitation(x) -> (Hail(x) | Sleet(x)))", "(all x.(Hail(x) -> Precipitation(x)) & all y.(Sleet(y) -> Precipitation(x)))", "(all x.(Hail(x) -> Precipitation(x)) & all y.(Sleet(y) -> Precipitation(y))))", "all x y z.((Hail(x) & Sleet(y) & Precipitation(z)) -> Precipitation(x,y,z))"]}
{"id": "entailmentbank_validation_241", "nl": "when one kind of energy changes into another kind of energy, the total amount of energy is constant.", "fol": "", "prediction": ["all x y.((Energy(x) & Energy(y) & ChangesInto(x,y)) -> TotalAmountOfEnergyConstant(x))", "all x y.((Energy(x) & Energy(y) & ChangesInto(x,y)) -> TotalAmountOfEnergyConstant(x,y))", "all x y.((Energy(x) & Energy(y) & ChangesInto(x,y)) -> TotalEnergyConstant(x))", "all x y.((Energy(x) & Energy(y) & ChangesInto(x,y)) -> TotalAmountConstant(x))", "all x.((Energy(x) & ChangesIntoEnergy(x)) -> TotalAmountOfEnergyConstant(x))", "all x y z.((Energy(x) & Energy(y) & Energy(z) & ChangesInto(x,y,z)) -> TotalAmountOfEnergyConstant(x))", "all x y.((Energy(x) & Energy(y) & ChangesInto(x,y)) -> TotalAmount(x,y))", "all x y z.((Energy(x) & Energy(y) & Energy(z) & ChangesInto(x,y,z)) -> TotalAmountOfEnergyConstant(x,y,z))", "all x y.((Energy(x) & Energy(y) & ChangesInto(x,y)) -> TotalAmountConstant(x,y))", "all x y z.((Energy(x) & Energy(y) & Energy(z)) -> ChangesInto(x,y,z))", "all x y.((Energy(x) & Energy(y) & ChangesInto(x,y)) -> Constant(x))", "all x y z.((Energy(x) & Energy(y) & Energy(z) & ChangesInto(x,y,z)) -> TotalAmountOfEnergyConstant(x,y))", "all x y z.((Energy(x) & Energy(y) & Energy(z) & ChangesInto(x,y,z)) -> TotalEnergyConstant(x))", "all x y.((Energy(x) & Energy(y) & ChangesInto(x,y)) -> TotalAmountEnergyConstant(x))", "all x y.((Energy(x) & Energy(y)) -> ChangesInto(x,y))", "all x y.((Energy(x) & Energy(y) & ChangesInto(x,y)) -> TotalEnergyConstant(x,y))"]}
{"id": "entailmentbank_validation_242", "nl": "energy transformation means one kind of energy changes into another kind of energy.", "fol": "", "prediction": ["all x y.((EnergyTransformation(x) & Energy(y)) -> ChangesInto(x,y))", "all x y z.((EnergyTransformation(x) & Energy(y) & Energy(z)) -> ChangesInto(x,y,z))", "all x y z.((EnergyTransformation(x) & Energy(y) & Energy(z)) -> Changes(x,y,z))", "all x y.((EnergyTransformation(x) & Energy(y)) -> (ChangesInto(x,y) | ChangesInto(x,y)))", "all x y.((EnergyTransformation(x) & Energy(y)) -> Changes(x,y))", "all x y z.((EnergyTransformation(x) & EnergyType(y) & EnergyType(z)) -> ChangesInto(x,y,z))", "all x.(EnergyTransformation(x) -> (EnergyChange(x) & EnergyChange(x)))", "all x y.((EnergyTransformation(x) & Energy(y) & Energy(z)) -> ChangesInto(x,y,z))", "all x y.((EnergyTransformation(x) & EnergyType(y)) -> ChangesInto(x,y))", "all x y z.((EnergyTransformation(x) & Energy(y) & Energy(z)) -> (ChangesInto(x,y,z)))", "all x y z.((EnergyTransformation(x) & Energy(y) & Energy(z)) -> ChangesInto(y,z))", "all x y z.((EnergyTransformation(x) & Energy(y) & Energy(z)) -> ChangesTo(x,y,z))", "all x y.((EnergyTransformation(x) & Energy(y)) -> (Changes(x,y) | Changes(x,y)))", "all x y z.((EnergyTransformation(x) & Energy(y) & Energy(z)) -> TransformsInto(x,y,z))", "all x y.((EnergyTransformation(x) & Energy(y)) -> ChangesTo(x,y))", "all x y z.((EnergyTransformation(x) & Energy(y) & Energy(z)) -> EnergyChange(x,y,z))"]}
{"id": "entailmentbank_validation_243", "nl": "when energy transformation happens, the total amount of energy is constant.", "fol": "", "prediction": ["all x.(EnergyTransformation(x) -> TotalAmountOfEnergyConstant(x))", "all x.(EnergyTransformation(x) -> TotalEnergyConstant(x))", "all x y.((EnergyTransformation(x) & Energy(y)) -> TotalAmountConstant(x,y))", "all x.((EnergyTransformation(x) & Happens(x)) -> TotalAmountOfEnergyConstant(x))", "all x.((EnergyTransformation(x) & Happens(x)) -> TotalEnergyConstant(x))", "all x.((EnergyTransformation(x) & TotalAmountOfEnergy(x)) -> Constant(x))", "all x.((EnergyTransformation(x) & TotalEnergy(x)) -> Constant(x))", "all x y.((EnergyTransformation(x) & EnergyTransformation(y)) -> TotalAmountConstant(x,y))", "all x y z.((EnergyTransformation(x) & Energy(y) & Energy(z)) -> TotalAmountConstant(x,y,z))", "all x.((EnergyTransformation(x) & Occurs(x)) -> TotalAmountOfEnergyConstant(x))", "all x y.((EnergyTransformation(x) & Energy(y) & Happens(x,y)) -> TotalAmountConstant(x,y))", "all x.((EnergyTransformation(x) & TotalEnergyConstant(x)) -> EnergyTransformation(x))", "all x y.((EnergyTransformation(x) & Energy(y)) -> Constant(x,y))", "all x y.((EnergyTransformation(x) & Energy(y)) -> TotalAmountConstant(y,x))", "all x y.((EnergyTransformation(x) & Energy(y)) -> TotalAmountConstant(y))", "all x y z.((EnergyTransformation(x) & Energy(y) & Energy(z)) -> TotalAmountConstant(y,z))"]}
{"id": "entailmentbank_validation_244", "nl": "energy transformation means energy conversion.", "fol": "", "prediction": ["all x.(EnergyTransformation(x) -> EnergyConversion(x))", "all x.(EnergyTransformation(x) -> MeansEnergyConversion(x))", "all x y.((EnergyTransformation(x) & EnergyConversion(y)) -> Means(x,y))", "all x.((EnergyTransformation(x) & EnergyConversion(x)) -> EnergyTransformation(x))", "all x y.((EnergyTransformation(x) & EnergyConversion(y)) -> EnergyTransformation(x,y))", "all x.(EnergyTransformation(x) -> Means(x,EnergyConversion))", "all x y z.((EnergyTransformation(x) & EnergyConversion(y) & Energy(z)) -> Means(x,y,z))", "all x.((EnergyTransformation(x) & EnergyConversion(x)) -> Means(x,y))", "all x y.((EnergyTransformation(x) & EnergyConversion(y)) -> EnergyTransformation(x))", "all x.(EnergyTransformation(x) -> EnergyConversion(x))", "all x y.((EnergyTransformation(x) & EnergyConversion(y)) -> EnergyConversion(x,y))", "all x y.((EnergyTransformation(x) & EnergyConversion(y)) -> EnergyConversion(x))", "all x.(EnergyTransformation(x) -> MeansEnergyConversion(x))", "all x.((EnergyTransformation(x) & EnergyConversion(x)) -> EnergyConversion(x))", "all x y.((EnergyTransformation(x) & EnergyConversion(y)) -> Energy(x,y))", "all x y.((EnergyTransformation(x) & EnergyConversion(y)) -> Enables(x,y))"]}
{"id": "entailmentbank_validation_245", "nl": "when energy conversion happens, the total amount of energy is constant.", "fol": "", "prediction": ["all x.(EnergyConversion(x) -> TotalAmountOfEnergyConstant(x))", "all x.((EnergyConversion(x) & Happens(x)) -> TotalAmountOfEnergyConstant(x))", "all x.((EnergyConversion(x) & Happens(x)) -> TotalEnergyConstant(x))", "all x.(EnergyConversion(x) -> TotalEnergyConstant(x))", "all x.((EnergyConversion(x) & TotalAmountOfEnergy(x)) -> Constant(x))", "all x y.((EnergyConversion(x) & Energy(y)) -> TotalAmountConstant(x,y))", "all x y.((EnergyConversion(x) & EnergyConversion(y)) -> TotalAmountConstant(x,y))", "all x.((EnergyConversion(x) & TotalEnergy(x)) -> Constant(x))", "all x.((EnergyConversion(x) & EnergyConversion(x)) -> TotalAmountConstant(x))", "all x.((EnergyConversion(x) & EnergyConversion(x)) -> Constant(x))", "all x y.((EnergyConversion(x) & Energy(y)) -> Constant(x,y))", "all x y.((EnergyConversion(x) & EnergyConversion(y)) -> Constant(x,y))", "all x.((EnergyConversion(x) & TotalEnergyConstant(x)) -> EnergyConversion(x))", "all x y.((EnergyConversion(x) & TotalEnergy(y)) -> Constant(y))", "all x y.((EnergyConversion(x) & EnergyConversion(y)) -> TotalAmountConstant(y))", "all x y.((EnergyConversion(x) & Energy(y)) -> Constant(y))"]}
{"id": "entailmentbank_validation_246", "nl": "solid is a kind of state of matter.", "fol": "", "prediction": ["all x.(Solid(x) -> StateOfMatter(x))", "all x.(Solid(x) -> StateOfMatter(x))", "all x.(StateOfMatter(x) -> Solid(x))", "all x y.((Solid(x) & StateOfMatter(y)) -> Is(x,y))", "all x.(StayOfMatter(x) -> Solid(x))", "all x.(Solid(x) -> KindOfMatter(x))", "all x.(StateOfMatter(x) -> Solid(x))", "all x.(Solid(x) -> KindOfStateOfMatter(x))", "all x y.((Solid(x) & StateOfMatter(y)) -> KindOf(x,y))", "all x y.((Solid(x) & StateOfMatter(y)) -> StateOfMatter(x,y))", "all x.(Solid(x) -> ArtOfMatter(x))", "all x.(Solid(x) -> IsStateOfMatter(x))", "all x.((Solid(x) & StateOfMatter(x)) -> Solid(x))", "all x.(StandOfMatter(x) -> Solid(x))", "all x y.((Solid(x) & StateOfMatter(y)) -> Solid(x))", "all x.(Solid(x) -> (StateOfMatter(x)))"]}
{"id": "entailmentbank_validation_247", "nl": "heat energy can change the state of matter.", "fol": "", "prediction": ["all x.(HeatEnergy(x) -> ChangesStateOfMatter(x))", "all x.(HeatEnergy(x) -> CanChangeStateOfMatter(x))", "all x.(HeatEnergy(x) -> ChangeStateOfMatter(x))", "all x y.((HeatEnergy(x) & StateOfMatter(y)) -> CanChange(x,y))", "all x.(HeatEnergy(x) -> ChangesMatterState(x))", "all x y.((HeatEnergy(x) & StateOfMatter(y)) -> Changes(x,y))", "all x.(HeatEnergy(x) -> CanChangeMatter(x))", "all x y.((HeatEnergy(x) & Matter(y)) -> CanChange(x,y))", "all x y.((HeatEnergy(x) & Matter(y)) -> ChangesState(x,y))", "all x y.((HeatEnergy(x) & StateOfMatter(y)) -> ChangesStateOfMatter(x,y))", "all x y z.((HeatEnergy(x) & StateOfMatter(y) & HeatEnergy(z)) -> CanChange(x,y,z))", "all x y.((HeatEnergy(x) & StateOfMatter(y)) -> Change(x,y))", "all x y.((HeatEnergy(x) & Matter(y)) -> ChangesStateOf(x,y))", "all x.(HeatEnergy(x) -> ChangesMatter(x))", "all x y.((HeatEnergy(x) & Matter(y)) -> CanChangeState(x,y))", "all x.((HeatEnergy(x) & ChangesStateOfMatter(x)) -> CanChangeStateOfMatter(x))"]}
{"id": "entailmentbank_validation_248", "nl": "liquid is a kind of state of matter.", "fol": "", "prediction": ["all x.(Liquid(x) -> StateOfMatter(x))", "all x.(Liquid(x) -> StateOfMatter(x))", "all x y.((Liquid(x) & StateOfMatter(y)) -> Is(x,y))", "all x.(Liquid(x) -> (StateOfMatter(x)))", "all x.((Liquid(x) & StateOfMatter(x)) -> Liquid(x))", "all x.((Liquid(x) & StateOfMatter(x)) -> StateOfMatter(x))", "exists x.(Liquid(x) & StateOfMatter(x))", "all x.(Liquid(x) -> IsStateOfMatter(x))", "all x y.((Liquid(x) & StateOfMatter(y)) -> StateOfMatter(x,y))", "all x.(Liquid(x) -> (StateOfMatter(x) & -StateOfMatter(x)))", "all x y.((Liquid(x) & Liquid(y)) -> StateOfMatter(x))", "all x.(Liquid(x) -> KindOfMatter(x))", "all x y.((Liquid(x) & StateOfMatter(y)) -> StateOfMatter(x))", "all x y.((Liquid(x) & Liquid(y)) -> StateOfMatter(x,y))", "all x.((Liquid(x) & StateOfMatter(x)) -> -StateOfMatter(x))", "all x.(Liquid(x) -> ArtOfMatter(x))"]}
{"id": "entailmentbank_validation_249", "nl": "heat can change a substance from a solid to liquid.", "fol": "", "prediction": ["all x y.((Substance(x) & Heat(y)) -> CanChangeFromSolidToLiquid(x,y))", "all x y.((Substance(x) & Heat(x)) -> CanChangeFromSolidToLiquid(x,y))", "all x y.((Substance(x) & Heat(y)) -> ChangesFromSolidToLiquid(x,y))", "all x y z.((Substance(x) & Heat(y) & Solid(z) & Liquid(z)) -> CanChange(x,y,z))", "all x y z.((Heat(x) & Substance(y) & Solid(z) & Liquid(z)) -> CanChange(x,y,z))", "all x y z.((Substance(x) & Heat(y) & Solid(z) & Liquid(z)) -> CanChangeFromTo(x,y,z))", "all x y.((Heat(x) & Substance(y)) -> CanChangeFromSolidToLiquid(x,y))", "all x y.((Substance(x) & Heat(x)) -> ChangesFromSolidToLiquid(x,y))", "all x y z.((Substance(x) & Heat(y) & Solid(z)) -> CanChangeToLiquid(x,y,z))", "all x y.((Substance(x) & Heat(x) & Solid(y)) -> Liquid(x,y))", "all x y.((Substance(x) & Heat(y)) -> (ChangesFromSolidToLiquid(x,y)))", "all x y z.((Substance(x) & Heat(y) & Solid(z) & Liquid(z)) -> ChangesFromTo(x,y,z))", "all x.(Heat(x) -> CanChangeSubstanceFromSolidToLiquid(x))", "all x y.((Substance(x) & Heat(x)) -> CanChangeFromSolidToLiquid(x))", "all x y.((Substance(x) & Heat(x) & Solid(y)) -> Liquid(y))", "all x y z.((Heat(x) & Substance(y) & Solid(z) & Liquid(z)) -> CanChangeFromTo(x,y,z))"]}
{"id": "entailmentbank_validation_250", "nl": "melting means a substance changes from a solid into a liquid by increasing heat energy.", "fol": "", "prediction": ["all x.(Melting(x) -> (ChangesFromSolidToLiquid(x) & IncreasesHeatEnergy(x)))", "all x.(Melting(x) -> (ChangesFromSolidIntoLiquid(x) & IncreasesHeatEnergy(x)))", "all x.(Melting(x) -> (ChangesFromSolidToLiquid(x) & IncreasesHeatEnergy(x)))", "all x y.((Substance(x) & Solid(y) & Liquid(y)) -> ChangesByIncreasedHeatEnergy(x,y))", "all x y z.((Substance(x) & Solid(y) & Liquid(z)) -> (ChangesFromTo(x,y,z) & IncreasesHeatEnergy(x)))", "all x y z.((Substance(x) & Solid(y) & Liquid(z)) -> ChangesByIncreasedHeatEnergy(x,y,z))", "all x y z.((Substance(x) & Solid(y) & Liquid(z)) -> ChangesFromTo(x,y,z))", "all x y z.((Substance(x) & Solid(y) & Liquid(z) & IncreasesHeatEnergy(x,y,z)) -> ChangesFromTo(x,y,z))", "all x y z.((Substance(x) & Solid(y) & Liquid(z)) -> (ChangesFromTo(x,y,z) & IncreasesHeatEnergy(x,z)))", "all x y.((Substance(x) & Solid(y)) -> ChangesToLiquid(x,y))", "all x y.((Substance(x) & Solid(y) & Liquid(y)) -> ChangesByIncreasingHeatEnergy(x,y))", "all x y.((Substance(x) & Solid(y) & Liquid(y)) -> Changes(x,y))", "all x y z.((Substance(x) & Solid(y) & Liquid(z) & IncreasesHeatEnergy(x,y,z)) -> Changes(x,y,z))", "all x y z.((Substance(x) & Solid(y) & Liquid(z)) -> Changes(x,y,z))", "all x y.((Substance(x) & Solid(y) & Liquid(y)) -> ChangesFromTo(x,y))", "all x y z.((Substance(x) & Solid(y) & Liquid(z) & IncreasesHeatEnergy(x,z)) -> ChangesFromTo(x,y,z))"]}
{"id": "entailmentbank_validation_251", "nl": "heat can cause a solid substance to melt.", "fol": "", "prediction": ["all x y.((SolidSubstance(x) & Heat(y)) -> Melts(x,y))", "all x.((SolidSubstance(x) & Heat(x)) -> Melts(x))", "all x y.((SolidSubstance(x) & Heat(y)) -> CanMelt(x,y))", "all x.((SolidSubstance(x) & Heat(x)) -> Melt(x))", "all x y.((SolidSubstance(x) & Heat(y)) -> Melt(x,y))", "all x.((Heat(x) & SolidSubstance(x)) -> Melts(x))", "all x y.((SolidSubstance(x) & Heat(y)) -> Melts(y))", "all x y.((SolidSubstance(x) & Heat(y)) -> Melts(x))", "all x y.((SolidSubstance(x) & Heat(y) & CausesToMelt(x,y)) -> CanMelt(x,y))", "all x.(Heat(x) -> CanCauseSolidSubstanceToMelt(x))", "all x y z.((SolidSubstance(x) & Heat(y) & Heat(z)) -> CanMelt(x,y,z))", "all x y.((SolidSubstance(x) & Heat(y) & CausesMelt(x,y)) -> CanMelt(x,y))", "all x y.((SolidSubstance(x) & SolidSubstance(y)) -> Melts(x,y))", "all x y.((SolidSubstance(x) & Heat(y)) -> Melt(y))", "all x y.((SolidSubstance(x) & Heat(y)) -> CanMelt(y,x))", "all x y z.((SolidSubstance(x) & Heat(y) & Heat(z)) -> Melts(x,y,z))"]}
{"id": "entailmentbank_validation_252", "nl": "ice is a kind of solid.", "fol": "", "prediction": ["all x.(Ice(x) -> Solid(x))", "all x y.((Ice(x) & Solid(y)) -> Is(x,y))", "all x.(Ice(x) -> Solid(x))", "all x y.((Ice(x) & Solid(y)) -> Solid(x))", "all x y.((Ice(x) & Solid(y)) -> Ice(x))", "all x y.((Ice(x) & Solid(y)) -> Solid(x,y))", "all x y.((Ice(x) & Solid(y)) -> Has(x,y))", "exists x.(Ice(x) & Solid(x))", "all x y.((Ice(x) & Solid(y)) -> CanBe(x,y))", "all x y.((Ice(x) & Solid(y)) -> Icy(x))", "all x y.((Ice(x) & Solid(y)) -> Like(x,y))", "all x y.((Ice(x) & Solid(y)) -> Hard(x))", "all x.((Ice(x) & Solid(x)) -> Solid(x))", "all x y.((Ice(x) & Solid(y)) -> Ice(x))", "all x.((Ice(x) & Solid(x)) -> Ice(x))", "all x y.((Ice(x) & Solid(y)) -> IsSolid(x))"]}
{"id": "entailmentbank_validation_253", "nl": "heat can cause ice to melt.", "fol": "", "prediction": ["all x.(Heat(x) -> CausesIceToMelt(x))", "all x.(Heat(x) -> CanCauseIceToMelt(x))", "all x y.((Heat(x) & Ice(y)) -> CanMelt(x,y))", "all x y.((Heat(x) & Ice(y)) -> Melts(x,y))", "all x y.((Heat(x) & Ice(y)) -> CanMelt(y,x))", "all x y.((Heat(x) & Ice(y)) -> Melts(y))", "all x y.((Heat(x) & Ice(y)) -> Melts(y,x))", "all x y.((Heat(x) & Ice(y)) -> Melt(x,y))", "all x y.((Heat(x) & Ice(y)) -> Melt(y))", "all x y.((Heat(x) & Ice(y)) -> CanCauseMelt(x,y))", "all x y.((Heat(x) & Ice(y)) -> CausesToMelt(x,y))", "all x.(Heat(x) -> CanMeltIce(x))", "all x y.((Heat(x) & Ice(y)) -> CausesMelt(x,y))", "all x y.((Heat(x) & Ice(y)) -> Melt(y,x))", "all x.(Heat(x) -> (CausesIceToMelt(x)))", "all x y.((Heat(x) & Ice(y)) -> CanMelt(y))"]}
{"id": "entailmentbank_validation_254", "nl": "the sun is a source of radiation / heat called sunlight.", "fol": "", "prediction": ["all x.(Sun(x) -> (SourceOfRadiation(x) & SourceOfHeat(x)))", "all x.(Sun(x) -> (SourceOfRadiation(x) & SourceOfHeat(x) & Sunlight(x)))", "all x.(Sun(x) -> (SourceOfRadiation(x) | SourceOfHeat(x)))", "all x.((Sun(x) & SourceOfRadiation(x) & SourceOfHeat(x)) -> Sunlight(x))", "all x.(Sun(x) -> SourceOfRadiation(x) & SourceOfHeat(x))", "all x y.((Sun(x) & SourceOfRadiation(y) & SourceOfHeat(x,y)) -> Sunlight(x))", "all x y.((Sun(x) & Sunlight(y)) -> (SourceOfRadiation(x,y) & SourceOfHeat(x,y)))", "all x.(Sun(x) -> (SourceOfRadiation(x) | SourceOfHeat(x)) & Sunlight(x)))", "all x y.((Sun(x) & SourceOfRadiation(x) & SourceOfHeat(y)) -> Sunlight(x))", "all x y.((Sun(x) & SourceOfRadiation(x) & SourceOfHeat(x)) -> Sunlight(y))", "all x y.((Sun(x) & SourceOfRadiation(x,y) & SourceOfHeat(x,y)) -> Sunlight(x))", "all x y.((Sun(x) & Sunlight(y)) -> (SourceOfRadiation(x,y) | SourceOfHeat(x,y)))", "all x y.((Sun(x) & SourceOfRadiation(y) & SourceOfHeat(y)) -> Sunlight(x))", "all x.(Sun(x) -> SourceOfRadiationHeat(x))", "all x y.((Sun(x) & SourceOfRadiation(y) & SourceOfHeat(x)) -> Sunlight(x))", "all x.(Sun(x) -> (SourceOfRadiationHeat(x) & Sunlight(x)))"]}
{"id": "entailmentbank_validation_255", "nl": "the heat energy from the sunlight cause ice to melt.", "fol": "", "prediction": ["all x y.((HeatEnergy(x) & Sunlight(y)) -> CausesIceToMelt(x,y))", "all x.((HeatEnergy(x) & Sunlight(x)) -> CausesIceToMelt(x))", "all x y z.((HeatEnergy(x) & Sunlight(y) & Ice(z)) -> Melts(z))", "all x y.((HeatEnergy(x) & Sunlight(y)) -> CausesIceToMelt(x))", "all x y.((HeatEnergy(x) & Sunlight(y) & Ice(z)) -> Melts(z))", "all x.(HeatEnergyFromSunlight(x) -> CausesIceToMelt(x))", "all x y z.((HeatEnergy(x) & Sunlight(y) & Ice(z)) -> CausesMelt(z))", "all x y z.((HeatEnergy(x) & Sunlight(y) & Ice(z)) -> Melt(z))", "all x y.((HeatEnergy(x) & Sunlight(y)) -> CausesIceMelt(x,y))", "all x y z.((HeatEnergy(x) & Sunlight(y) & Ice(z)) -> CausesMelt(x,z))", "all x y z.((HeatEnergy(x) & Sunlight(y) & Ice(z)) -> Melts(x,z))", "all x y.((HeatEnergy(x) & Sunlight(y) & Ice(z)) -> Melt(z))", "all x.((HeatEnergy(x) & Sunlight(x)) -> IceMelt(x))", "all x y.((HeatEnergy(x) & Sunlight(y) & Ice(y)) -> Melts(y))", "all x y.((HeatEnergy(x) & Sunlight(y) & Ice(z)) -> Melts(x,z))", "all x y z.((HeatEnergy(x) & Sunlight(y) & Ice(z)) -> CausesToMelt(z))"]}
{"id": "entailmentbank_validation_256", "nl": "a wagon is a kind of vehicle.", "fol": "", "prediction": ["all x.(Wagon(x) -> Vehicle(x))", "all x.(Wagon(x) -> Vehicle(x))", "all x y.((Wagon(x) & Vehicle(y)) -> Vehicle(x))", "all x.(Wag(x) -> Vehicle(x))", "all x.(Wave(x) -> Vehicle(x))", "all x y.((Wagon(x) & Vehicle(y)) -> Vehicle(x,y))", "all x.(Vehicle(x) -> Wagon(x))", "all x.((Wagon(x) & Vehicle(x)) -> Vehicle(x))", "exists x.(Wagon(x) & Vehicle(x))", "all x y.((Wagon(x) & Vehicle(y)) -> KindOf(x,y))", "all x y.((Wagon(x) & Vehicle(y)) -> TypeOf(x,y))", "all x.(Way(x) -> Vehicle(x))", "all x.(Wheel(x) -> Vehicle(x))", "all x y.((Wagon(x) & Vehicle(y)) -> Is(x,y))", "all x.(Vehicle(x) -> Wagon(x))", "all x y.((Wagon(x) & Vehicle(y)) -> Cargo(x))"]}
{"id": "entailmentbank_validation_257", "nl": "a vehicle is a kind of object.", "fol": "", "prediction": ["all x.(Vehicle(x) -> Object(x))", "all x.(Vehicle(x) -> ArtOfObject(x))", "all x.(Vehicle(x) -> TypeOfObject(x))", "all x.(Vehicle(x) -> Object(x))", "all x y.((Vehicle(x) & Object(y)) -> Object(x))", "all x y.((Vehicle(x) & Object(y)) -> TypeOf(x,y))", "all x y.((Vehicle(x) & Object(y)) -> Is(x,y))", "all x.(Vehicle(x) -> SortOfObject(x))", "all x y.((Vehicle(x) & Object(y)) -> KindOf(x,y))", "all x y.((Vehicle(x) & Object(y)) -> Object(x,y))", "all x.(Vehicle(x) -> IsObject(x))", "all x.(Vehicle(x) -> KindOfObject(x))", "all x.(Vehicle(x) -> (Object(x) & Object(x)))", "all x y.((Vehicle(x) & Object(y)) -> SortOf(x,y))", "all x.((Vehicle(x) & Object(x)) -> Object(x))", "all x y.((Vehicle(x) & Object(y)) -> ArtOf(x,y))"]}
{"id": "entailmentbank_validation_258", "nl": "a wagon is a kind of object.", "fol": "", "prediction": ["all x.(Wagon(x) -> Object(x))", "all x.(Wagon(x) -> Object(x))", "all x.(Wagon(x) -> ArtOfObject(x))", "all x.(Wave(x) -> Object(x))", "all x.(Wagon(x) -> IsObject(x))", "all x.(Wagon(x) -> SortOfObject(x))", "all x.(Wagon(x) -> TypeOfObject(x))", "all x y.((Wagon(x) & Object(y)) -> Object(x))", "all x.(Wagon(x) -> (Object(x) & Object(x)))", "all x y.((Wagon(x) & Object(y)) -> KindOf(x,y))", "all x y.((Wagon(x) & Object(y)) -> Object(x,y))", "all x.(Wagon(x) -> KindOfObject(x))", "all x.(Wag(x) -> Object(x))", "all x y.((Wagon(x) & Object(y)) -> Is(x,y))", "all x y.((Wagon(x) & Object(y)) -> SortOf(x,y))", "exists x.(Wagon(x) & Object(x))"]}
{"id": "entailmentbank_validation_259", "nl": "rolling is a kind of motion.", "fol": "", "prediction": ["all x.(Rolling(x) -> Motion(x))", "all x y.((Rolling(x) & Motion(y)) -> Motion(x,y))", "all x y.((Rolling(x) & Motion(y)) -> Motion(x))", "all x.(Rolling(x) -> Motion(x))", "all x y.((Rolling(x) & Motion(y)) -> KindOf(x,y))", "all x y.((Rolling(x) & Motion(y)) -> Is(x,y))", "all x y z.((Rolling(x) & Motion(y) & Motion(z)) -> Motion(x,y,z))", "all x y.((Rolling(x) & Motion(y)) -> FormOf(x,y))", "all x y.((Rolling(x) & Motion(y)) -> KindOfMotion(x,y))", "all x.(Rolling(x) -> Motion(x))", "all x y.((Rolling(x) & Motion(y)) -> SortOf(x,y))", "all x y.((Rolling(x) & Motion(y)) -> IsMotion(x,y))", "all x y.((Rolling(x) & Motion(y)) -> ArtOf(x,y))", "all x y z.((Rolling(x) & Motion(y) & Motion(z)) -> KindOf(x,y,z))", "all x y z.((Rolling(x) & Motion(y) & Motion(z)) -> Motion(x))", "all x y z.((Rolling(x) & Motion(y) & Motion(z)) -> Is(x,y,z))"]}
{"id": "entailmentbank_validation_260", "nl": "a wagon rolling is an example of an object in motion.", "fol": "", "prediction": ["all x.(WagonRolling(x) -> ObjectInMotion(x))", "all x.(RollingWagon(x) -> ObjectInMotion(x))", "all x.((WagonRolling(x) & ObjectInMotion(x)) -> Example(x))", "all x.((WagonRolling(x) & ObjectInMotion(x)) -> ObjectInMotion(x))", "all x.((WagonRolling(x) & ObjectInMotion(x)) -> ExampleOf(x,y))", "all x.((WagonRolling(x) & ObjectInMotion(x)) -> InMotion(x))", "all x.((WagonRolling(x) & ObjectInMotion(x)) -> ExamplesOf(x,y))", "all x y.((WagonRolling(x) & ObjectInMotion(y)) -> ExampleOf(x,y))", "all x y.((WagonRolling(x) & Object(y)) -> InMotion(x,y))", "all x y.((WagonRolling(x) & ObjectInMotion(y)) -> Example(x,y))", "all x y.((WagonRolling(x) & Object(y)) -> InMotion(x))", "all x y.((WagonRolling(x) & ObjectInMotion(y)) -> ExamplesOf(x,y))", "all x.((WagonRolling(x) & ObjectInMotion(x)) -> ExampleOfMotion(x))", "all x.((WagonRolling(x) & ObjectInMotion(x)) -> ExamplesOfMotion(x))", "all x.((WagonRolling(x) & ObjectInMotion(x)) -> ExampleOf(x,WagonRolling))", "all x.((WagonRolling(x) & ObjectInMotion(x)) -> ExampleOf(x,movement))"]}
{"id": "entailmentbank_validation_261", "nl": "an example of mechanical energy is an object in motion.", "fol": "", "prediction": ["all x.(MechanicalEnergy(x) -> ObjectInMotion(x))", "all x.(MechanicalEnergy(x) -> ObjectInMotion(x))", "all x.(MechanicalEnergyExample(x) -> ObjectInMotion(x))", "all x.((MechanicalEnergy(x) & ObjectInMotion(x)) -> MechanicalEnergy(x))", "all x.(MechanicalEnergyExample(x) -> ObjectInMotion(x))", "all x.(MechanicalEnergy(x) -> (ObjectInMotion(x)))", "all x.((MechanicalEnergyExample(x) & ObjectInMotion(x)) -> MechanicalEnergy(x))", "all x.(MechanicalEnergyExemple(x) -> ObjectInMotion(x))", "all x.((MechanicalEnergy(x) & ObjectInMotion(x)) -> Example(x))", "all x y.((MechanicalEnergy(x) & ObjectInMotion(y)) -> MechanicalEnergy(x))", "all x.((MechanicalEnergy(x) & ObjectInMotion(x)) -> InMotion(x))", "all x y.((MechanicalEnergy(x) & ObjectInMotion(y)) -> Example(x,y))", "all x.(Motion(x) -> MechanicalEnergy(x))", "all x.(MechanicalEnergy(x) -> (ObjectInMotion(x)))", "all x.((MechanicalEnergy(x) & ObjectInMotion(x)) -> ObjectInMotion(x))", "all x y.((MechanicalEnergy(x) & ObjectInMotion(y)) -> MechanicalEnergy(x,y))"]}
{"id": "entailmentbank_validation_262", "nl": "a wagon rolling is an example of mechanical energy.", "fol": "", "prediction": ["all x.(WagonRolling(x) -> MechanicalEnergy(x))", "all x.((WagonRolling(x) & MechanicalEnergy(x)) -> MechanicalEnergy(x))", "all x.(RollingWagon(x) -> MechanicalEnergy(x))", "all x.((WagonRolling(x) & MechanicalEnergy(x)) -> Example(x))", "all x.((WagonRolling(x) & MechanicalEnergy(x)) -> Examples(x))", "all x.((WagonRolling(x) & MechanicalEnergy(x)) -> ExamplesOf(x,y))", "all x.((WagonRolling(x) & MechanicalEnergy(x)) -> Mechanical(x))", "all x y.((WagonRolling(x) & Wagon(y)) -> MechanicalEnergy(x))", "all x.((WagonRolling(x) & MechanicalEnergy(x)) -> ExampleOf(x,y))", "all x y.((WagonRolling(x) & Rolling(y)) -> MechanicalEnergy(x))", "all x y.((WagonRolling(x) & MechanicalEnergy(y)) -> MechanicalEnergy(x))", "all x.((Wagon(x) & Rolling(x)) -> MechanicalEnergy(x))", "all x.((WagboardRolling(x) & MechanicalEnergy(x)) -> MechanicalEnergy(x))", "all x y.((Wagon(x) & Rolling(y)) -> MechanicalEnergy(x))", "all x y.((WagonRolling(x) & Wagon(y)) -> MechanicalEnergy(x,y))", "all x.((WagonRolling(x) & MechanicalEnergy(x)) -> Exception(x))"]}
{"id": "entailmentbank_validation_263", "nl": "loud means high in sound energy / sound intensity.", "fol": "", "prediction": ["all x.(Loud(x) -> (HighSoundEnergy(x) & HighSoundIntensity(x)))", "all x.(Loud(x) -> (HighInSoundEnergy(x) & HighInSoundIntensity(x)))", "all x.(Loud(x) -> (HighSoundEnergy(x) | HighSoundIntensity(x)))", "all x.(Loud(x) -> (HighSoundEnergy(x) & HighSoundIntensity(x)))", "all x.(Loud(x) -> (HighSoundEnergy(x) & HighSoundIntense(x)))", "all x.(Loud(x) -> (HighInSoundEnergy(x) | HighInSoundIntensity(x)))", "all x.(Loud(x) -> (HighInSoundEnergy(x) & HighInSoundIntensity(x)))", "all x y.((Loud(x) & SoundEnergy(y)) -> HighInIntensity(x,y))", "all x.(Loud(x) -> (HighInSoundEnergy(x) & HighInSoundIntense(x)))", "all x.(Loud(x) -> (HighEnoughSoundEnergy(x) & HighIntensity(x)))", "all x.(Loud(x) -> (HighSoundEnergy(x) | HighSoundIntense(x)))", "all x.(Loud(x) -> (HighSoundEnergy(x) & HighSoundIntegrity(x)))", "all x.(Loud(x) -> HighInSoundEnergy(x))", "all x.(Loud(x) -> HighSoundEnergy(x) & HighSoundIntensity(x))", "all x.(Loud(x) -> (HighSoundEnergy(x) | HighSoundIntensity(x)))", "all x.(Loud(x) -> (HighEnergy(x) & HighIntensity(x)))"]}
{"id": "entailmentbank_validation_264", "nl": "sound is a kind of energy.", "fol": "", "prediction": ["all x.(Sound(x) -> Energy(x))", "all x.(Sound(x) -> Energy(x))", "all x y.((Sound(x) & Energy(y)) -> Energy(x))", "all x y.((Sound(x) & Energy(y)) -> KindOf(x,y))", "all x.(Sound(x) -> KindOfEnergy(x))", "all x y.((Sound(x) & Energy(y)) -> Energy(x,y))", "all x.(Sound(x) -> (Energy(x) & Energy(x)))", "all x y.((Sound(x) & Energy(y)) -> Is(x,y))", "all x y.((Sound(x) & Energy(y)) -> SortOf(x,y))", "all x y.((Sound(x) & Energy(y)) -> (Energy(x) & Energy(y)))", "all x.(Sound(x) -> IsEnergy(x))", "all x y.((Sound(x) & Energy(y)) -> TypeOf(x,y))", "all x.(Sound(x) -> (Energy(x) & -Energy(x)))", "all x.((Sound(x) & Energy(x)) -> Energy(x))", "all x y.((Sound(x) & Energy(y)) -> Affects(x,y))", "all x.(Sound(x) -> (Energy(x) & Energy(x)))"]}
{"id": "entailmentbank_validation_265", "nl": "a classroom is a kind of area.", "fol": "", "prediction": ["all x.(Classroom(x) -> Area(x))", "all x.((Classroom(x) & Area(x)) -> KindOf(x))", "all x.(Classroom(x) -> KindOfArea(x))", "all x y.((Classroom(x) & Area(y)) -> KindOf(x,y))", "all x.((Classroom(x) & Area(x)) -> KindOfArea(x))", "all x.(Classroom(x) -> Area(x))", "all x.exists y.(Classroom(x) & Area(y) & InClassroom(x,y))", "all x y.((Classroom(x) & Area(y)) -> Is(x,y))", "all x.((Classroom(x) & Area(x)) -> Is(x,y))", "all x y.((Classroom(x) & Area(y)) -> KindOfArea(x,y))", "all x y.((Classroom(x) & Classroom(y)) -> Area(x))", "all x y.((Classroom(x) & Area(y)) -> SortOf(x,y))", "all x.exists y.(Classroom(x) & Area(y) & LocatedIn(x,y))", "all x.exists y.(Classroom(x) & Area(y) & In(x,y))", "all x.((Classroom(x) & Area(x)) -> SortOf(x))", "all x y.((Classroom(x) & Area(y)) -> KindOfArea(x))"]}
{"id": "entailmentbank_validation_266", "nl": "the sound in a loud class room is an example of high sound energy.", "fol": "", "prediction": ["all x.((Sound(x) & LoudClassRoom(x)) -> HighSoundEnergy(x))", "all x.((SoundInLoudClassRoom(x) & HighSoundEnergy(x)) -> HighSoundEnergy(x))", "all x y.((Sound(x) & LoudClassRoom(y)) -> HighSoundEnergy(x))", "all x y.((Sound(x) & LoudClassRoom(y) & InClassRoom(x,y)) -> HighSoundEnergy(x))", "all x y.((Sound(x) & LoudClassRoom(y)) -> HighSoundEnergy(x,y))", "all x.(LoudClassRoom(x) -> HighSoundEnergy(x))", "all x y.((SoundInLoudClassRoom(x) & ClassRoom(y)) -> HighSoundEnergy(x))", "all x.((SoundInLoudClassRoom(x) & ExampleOfHighSoundEnergy(x)) -> HighSoundEnergy(x))", "all x y z.((Sound(x) & LoudClassRoom(y) & ClassRoom(z) & In(x,y,z)) -> HighSoundEnergy(x))", "all x y.((SoundInLoudClassRoom(x) & LoudClassRoom(y)) -> HighSoundEnergy(x))", "all x.((SoundInLoudClassRoom(x) & HighSoundEnergy(x)) -> ExampleOf(x,y))", "all x y.((Sound(x) & LoudClassRoom(y) & HighSoundEnergy(x)) -> HighSoundEnergy(x))", "all x.((SoundInLoudClassRoom(x) & LoudClassRoom(x)) -> HighSoundEnergy(x))", "all x.((SoundInLoudClassRoom(x) & HighSoundEnergy(x)) -> ExamplesOf(x,y))", "all x.((SoundInLoudClassRoom(x) & InClassRoom(x)) -> HighSoundEnergy(x))", "all x.((SoundInLoudClassRoom(x) & HighSoundEnergy(x)) -> Example(x))"]}
{"id": "entailmentbank_validation_267", "nl": "if an object / something is in the sunlight then that object / that something will absorb solar energy.", "fol": "", "prediction": ["all x.((Object(x) & Something(x) & InSunlight(x)) -> AbsorbsSolarEnergy(x))", "all x.((Object(x) & SomethingInSunlight(x)) -> AbsorbsSolarEnergy(x))", "all x y.((Object(x) & Something(y) & InSunlight(x,y)) -> AbsorbsSolarEnergy(x,y))", "all x y.((Object(x) & Something(y) & InSunlight(x)) -> AbsorbsSolarEnergy(x,y))", "all x.((Object(x) & InSunlight(x)) -> AbsorbsSolarEnergy(x))", "all x.((Object(x) | Something(x)) & InSunlight(x)) -> AbsorbsSolarEnergy(x))", "all x y.((Object(x) & Something(y) & InSunlight(x,y)) -> AbsorbsSolarEnergy(x))", "all x.((Object(x) | Something(x)) -> InSunlight(x))", "all x.((Object(x) | SomethingInSunlight(x)) -> AbsorbsSolarEnergy(x))", "all x.(Sunlight(x) -> AbsorbsSolarEnergy(x))", "all x y.((Object(x) & Something(y) & InSunlight(x)) -> AbsorbsSolarEnergy(x))", "all x.((Object(x) & Object(x) & InSunlight(x)) -> AbsorbsSolarEnergy(x))", "all x y.((Object(x) & Something(y) & InSunlight(x,y)) -> AbsorbsSolarEnergy(y,x))", "all x.((Object(x) & Something(x) & InSunlight(x)) -> AbsorbSolarEnergy(x))", "all x.((Object(x) | Something(x) & InSunlight(x)) -> AbsorbsSolarEnergy(x))", "all x y.((Object(x) & Something(y) & InSunlight(x)) -> AbsorbsSolarEnergy(y,x))"]}
{"id": "entailmentbank_validation_268", "nl": "a sidewalk is located outside.", "fol": "", "prediction": ["all x.(Standard(x) -> LocatedOutside(x))", "all x.(Standard(x) -> LocatedOutside(x))", "all x.(Sidewalk(x) -> LocatedOutside(x))", "all x.(Sidewalk(x) -> LocatedOutside(x))", "all x.(Standard(x) -> LocationOutside(x))", "all x.(Standard(x) -> Outside(x))", "exists x.(Standard(x) & LocatedOutside(x))", "all x y.((Standard(x) & Outside(y)) -> Located(x,y))", "all x y.((Standard(x) & Street(y)) -> LocatedOutside(x,y))", "all x y.((Sidewalk(x) & Outside(y)) -> Located(x,y))", "all x y.((Standard(x) & Street(y)) -> LocatedOutside(x,y))", "exists x.(Sidewalk(x) & LocatedOutside(x))", "all x.(Sidewalk(x) -> LocationOutside(x))", "all x.(Scene(x) -> LocatedOutside(x))", "all x.(Scene(x) -> LocatedOutside(x))", "all x y.((Sidewalk(x) & Outside(y)) -> LocatedOutside(x,y))"]}
{"id": "entailmentbank_validation_269", "nl": "a sidewalk located outside will absorb solar energy.", "fol": "", "prediction": ["all x.((Standard(x) & LocatedOutside(x)) -> AbsorbsSolarEnergy(x))", "all x.((Sidewalk(x) & LocatedOutside(x)) -> AbsorbsSolarEnergy(x))", "all x.((Standard(x) & LocatedOutside(x)) -> AbsorbSolarEnergy(x))", "all x y.((Standard(x) & LocatedOutside(x)) -> AbsorbsSolarEnergy(x,y))", "all x y.((Standard(x) & LocatedOutside(x)) -> AbsorbsSolarEnergy(x))", "all x.((Standard(x) & Outside(x)) -> AbsorbsSolarEnergy(x))", "all x.((Scene(x) & LocatedOutside(x)) -> AbsorbsSolarEnergy(x))", "all x y.((Standard(x) & LocatedOutside(x)) -> AbsorbsSolarEnergy(y))", "all x.((Standard(x) & LocatedOutside(x)) -> AbsorbsSolarEnergy(x))", "all x.((Sidewalk(x) & LocatedOutside(x)) -> AbsorbSolarEnergy(x))", "all x y.((Standard(x) & Outside(y)) -> AbsorbsSolarEnergy(x,y))", "all x y.((Sidewalk(x) & LocatedOutside(x)) -> AbsorbsSolarEnergy(x,y))", "all x.(Standard(x) -> AbsorbsSolarEnergy(x))", "all x y.((Sidewalk(x) & LocatedOutside(x)) -> AbsorbsSolarEnergy(x))", "all x y.((Standard(x) & LocatedOutside(x,y)) -> AbsorbsSolarEnergy(x))", "all x.((Sidewalk(x) & Outside(x)) -> AbsorbsSolarEnergy(x))"]}
{"id": "entailmentbank_validation_270", "nl": "absorbing sunlight causes objects to heat.", "fol": "", "prediction": ["all x.(AbsorbingSunlight(x) -> CausesHeat(x))", "all x.(AbsorbsSunlight(x) -> CausesHeat(x))", "all x.((Sunlight(x) & Absorbs(x,Sunlight)) -> CausesHeat(x))", "all x y.((Sunlight(x) & Sunlight(y)) -> CausesHeat(x,y))", "all x y.((Sunlight(x) & Object(y)) -> AbsorbsHeat(x,y))", "all x y.((Sunlight(x) & Object(y)) -> Absorbs(x,y))", "all x y.((Sunlight(x) & Object(y)) -> AbsorbsToHeat(x,y))", "all x y.((AbsorbsSunlight(x) & Object(y)) -> CausesHeat(x,y))", "all x y.((Sunlight(x) & Sunlight(y)) -> CausesToHeat(x,y))", "all x y.((AbsorbingSunlight(x) & Object(y)) -> CausesToHeat(x,y))", "all x y.((AbsorbsSunlight(x) & Object(y)) -> CausesToHeat(x,y))", "all x.((Sunlight(x) & Absorbs(x,sunlight)) -> CausesHeat(x))", "all x y.((AbsorbingSunlight(x) & Object(y)) -> CausesHeat(x,y))", "all x y.((Sunlight(x) & Object(y)) -> CausesToHeat(x,y))", "all x.((Sunlight(x) & Absorbs(x)) -> CausesHeat(x))", "all x y.((Sunlight(x) & Object(y) & Absorbs(x,y)) -> Heat(y))"]}
{"id": "entailmentbank_validation_271", "nl": "the sidewalk located outsie will heat.", "fol": "", "prediction": ["all x.((Standard(x) & LocatedOutsie(x)) -> Heats(x))", "all x.((Standard(x) & LocatedOutsie(x)) -> Heat(x))", "all x.((Sidewalk(x) & LocatedOutsie(x)) -> Heats(x))", "all x.((Sidewalk(x) & LocatedOutsie(x)) -> Heat(x))", "all x y.((Standard(x) & Outsie(y)) -> Heats(x,y))", "all x.((Standard(x) & LocatedOutsie(x)) -> Heats(x))", "all x.((Standard(x) & LocatedOutsie(x)) -> Heat(x))", "all x.((Standard(x) & Outsie(x)) -> Heats(x))", "all x.((Standard(x) & LocatedInOutsie(x)) -> Heats(x))", "all x y.((Standard(x) & LocatedOutsie(y)) -> Heats(x,y))", "all x.((Standard(x) & locatedOutsie(x)) -> Heats(x))", "all x y.((Standard(x) & LocatedOutsie(x)) -> Heats(y))", "all x y.((Sidewalk(x) & Outsie(y)) -> Heats(x,y))", "all x y.((Standard(x) & LocatedOutsie(x)) -> Heat(y))", "all x.((Standard(x) & Outsie(x)) -> Heat(x))", "all x.((Standard(x) & locatedOutsie(x)) -> Heat(x))"]}
{"id": "entailmentbank_validation_272", "nl": "if something heat, it will feel hot.", "fol": "", "prediction": ["all x.(Heat(x) -> FeelHot(x))", "all x.(Heat(x) -> FeelsHot(x))", "all x.(Heats(x) -> FeelsHot(x))", "all x.((Heat(x) & FeelsHot(x)) -> Heat(x))", "all x.((Heat(x) & FeelHot(x)) -> Heat(x))", "all x.((Heat(x) & FeelHot(x)) -> FeelHot(x))", "all x.((Heats(x) & FeelsHot(x)) -> FeelsHot(x))", "all x y.((Heat(x) & Hot(y)) -> Feels(x,y))", "all x.((Heats(x) & FeelsHot(x)) -> Heats(x))", "all x y.((Heat(x) & Heat(y)) -> FeelsHot(x))", "all x y.((Heat(x) & Heat(y)) -> FeelsHot(x,y))", "all x.((Heat(x) & FeelsHot(x)) -> FeelsHot(x))", "all x y.((Heat(x) & FeelHot(y)) -> Heat(x))", "all x.((Heats(x) & FeelsHot(x)) -> Hot(x))", "all x.((Heat(x) & FeelsHot(x)) -> Heats(x))", "all x y.((Heat(x) & Heat(y)) -> FeelHot(x))"]}
{"id": "entailmentbank_validation_273", "nl": "the sidewalk located outside will feel hot.", "fol": "", "prediction": ["all x.((Standard(x) & LocatedOutside(x)) -> FeelsHot(x))", "all x.((Standard(x) & Outside(x)) -> FeelsHot(x))", "all x.((Sidewalk(x) & LocatedOutside(x)) -> FeelsHot(x))", "all x.((Sidewalk(x) & Outside(x)) -> FeelsHot(x))", "all x.((Standard(x) & LocatedOutside(x)) -> FeelHot(x))", "all x y.((Standard(x) & Outside(y)) -> FeelsHot(x,y))", "all x.((Standard(x) & Outside(x)) -> FeelHot(x))", "all x.((Standard(x) & LocationOutside(x)) -> FeelsHot(x))", "all x y.((Standard(x) & LocatedOutside(x)) -> FeelsHot(x))", "all x.((Sidewalk(x) & LocatedOutside(x)) -> FeelHot(x))", "all x.((Scene(x) & LocatedOutside(x)) -> FeelsHot(x))", "all x y.((Standard(x) & LocatedOutside(x)) -> FeelsHot(y))", "all x y.((Standard(x) & Outside(y)) -> FeelsHot(x))", "all x y.((Sidewalk(x) & Outside(y)) -> FeelsHot(x,y))", "all x.(Standard(x) & LocatedOutside(x)) -> FeelsHot(x))", "all x.((Sidewalk(x) & Outside(x)) -> FeelHot(x))"]}
{"id": "entailmentbank_validation_274", "nl": "there is a person in a dark room looking out a window in the day.", "fol": "", "prediction": ["exists x y.(Person(x) & DarkRoom(y) & LooksOutWindow(x,y))", "exists x.(Person(x) & DarkRoom(x) & LooksOutWindow(x))", "exists x y.(Person(x) & DarkRoom(y) & LookingOutWindow(x,y))", "exists x.(Person(x) & DarkRoom(x) & LookingOutWindow(x))", "all x y z.((Person(x) & DarkRoom(y) & Window(z)) -> LooksOut(x,y,z))", "exists x y z.(Person(x) & DarkRoom(y) & Window(z) & In(x,y) & LookingOut(x,z))", "exists x.(Person(x) & DarkRoom(x) & LooksOutWindowInDay(x))", "exists x y.(Person(x) & DarkRoom(y) & LooksOutWindowInDay(x,y))", "exists x y z.(Person(x) & DarkRoom(y) & Window(z) & LookingOut(x,z))", "all x y.((Person(x) & DarkRoom(y) & LooksOutWindow(x,y)) -> LooksOutWindow(x,y))", "all x y z.((Person(x) & DarkRoom(y) & Window(z)) -> LookingOut(x,y,z))", "exists x y z.(Person(x) & DarkRoom(y) & Window(z) & LooksOut(x,y,z))", "exists x y z.(Person(x) & DarkRoom(y) & Window(z) & LooksOut(x,z))", "all x y.((Person(x) & DarkRoom(y) & LooksOutWindow(x,y)) -> InDay(x,y))", "all x y.((Person(x) & DarkRoom(y) & LookingOutWindow(x,y)) -> LooksOutWindow(x,y))", "exists x.(PersonInDarkRoom(x) & LooksOutWindow(x))"]}
{"id": "entailmentbank_validation_275", "nl": "if something is in a dark place, then that something will not reflect enough light to be seen.", "fol": "", "prediction": ["all x.(DarkPlace(x) -> -ReflectsEnoughLightToBeSeen(x))", "all x.(DarkPlace(x) -> -ReflectsEnoughLight(x))", "all x y.((DarkPlace(x) & DarkPlace(y)) -> -ReflectsEnoughLightToBeSeen(x,y))", "all x y.((DarkPlace(x) & DarkPlace(y)) -> -ReflectsEnoughLight(x,y))", "all x.((DarkPlace(x) & InDarkPlace(x)) -> -ReflectsEnoughLightToBeSeen(x))", "all x.((DarkPlace(x) & In(x,DarkPlace)) -> -ReflectsEnoughLightToBeSeen(x))", "all x.(DarkPlace(x) -> -ReflectsEnoughLightForSight(x))", "all x.((DarkPlace(x) & DarkPlace(x)) -> -ReflectsEnoughLightToBeSeen(x))", "all x y.((DarkPlace(x) & DarkPlace(y)) -> -ReflectsEnoughLightForSight(x,y))", "all x.((DarkPlace(x) & In(x,y)) -> -ReflectsEnoughLightToBeSeen(x))", "all x y.((DarkPlace(x) & DarkPlace(y)) -> -ReflectsEnoughLightToBeSeen(x))", "all x.((DarkPlace(x) & In(x,DarkPlace)) -> -ReflectsEnoughLight(x))", "all x.((DarkPlace(x) & InDarkPlace(x)) -> -ReflectsEnoughLight(x))", "all x.((DarkPlace(x) & InDarkPlace(x)) -> -ReflectsEnoughLightForSight(x))", "all x.((DarkPlace(x) & DarkPlace(x)) -> -ReflectsEnoughLight(x))", "all x.((DarkPlace(x) & In(x,DarkPlace)) -> -ReflectsEnoughLightForSight(x))"]}
{"id": "entailmentbank_validation_276", "nl": "the person in the dark room will not reflect enough light to be seen.", "fol": "", "prediction": ["all x.(DarkRoom(x) -> -ReflectsEnoughLightToBeSeen(x))", "all x.((Person(x) & DarkRoom(x)) -> -ReflectsEnoughLightToBeSeen(x))", "all x y.((Person(x) & DarkRoom(y)) -> -ReflectsEnoughLightToBeSeen(x,y))", "all x.(DarkRoom(x) -> -ReflectsEnoughLight(x))", "all x y.((Person(x) & DarkRoom(y)) -> -ReflectsEnoughLight(x,y))", "all x.((Person(x) & DarkRoom(x)) -> -ReflectsEnoughLight(x))", "all x y.((Person(x) & DarkRoom(y) & InDarkRoom(x,y)) -> -ReflectsEnoughLightToBeSeen(x))", "all x y.((Person(x) & DarkRoom(y) & InDarkRoom(x,y)) -> -ReflectsEnoughLightToBeSeen(x,y))", "all x y.((Person(x) & DarkRoom(y)) -> -ReflectsEnoughLightForSight(x,y))", "all x y.((Person(x) & DarkRoom(y) & InDarkRoom(x,y)) -> -ReflectsEnoughLight(x,y))", "all x.((Person(x) & DarkRoom(x)) -> -ReflectsEnoughLightForSight(x))", "all x.(DarkRoom(x) -> -ReflectsEnoughLightForSight(x))", "all x y.((PersonInDarkRoom(x) & PersonInDarkRoom(y)) -> -ReflectsEnoughLightToBeSeen(x,y))", "all x y.((Person(x) & DarkRoom(y) & In(x,y)) -> -ReflectsEnoughLightToBeSeen(x))", "all x y.((Person(x) & DarkRoom(y) & -ReflectsEnoughLight(x,y)) -> -ReflectsEnoughLight(x,y))", "all x.((PersonInDarkRoom(x) & -ReflectsEnoughLightToBeSeen(x)) -> -ReflectsEnoughLightToBeSeen(x))"]}
{"id": "entailmentbank_validation_277", "nl": "there is a person outside in the day looking into the dark room.", "fol": "", "prediction": ["exists x.(Person(x) & OutsideInDay(x) & LooksIntoDarkRoom(x))", "exists x.(Outside(x) & Day(x) & LooksIntoDarkRoom(x))", "all x y.((Person(x) & Outside(x) & Day(y)) -> LooksIntoDarkRoom(x,y))", "exists x.(Person(x) & Outside(x) & Day(x) & LooksIntoDarkRoom(x))", "exists x.(OutsideInDay(x) & LooksIntoDarkRoom(x))", "exists x y.(Person(x) & Outside(x,y) & Day(y) & LooksIntoDarkRoom(x,y))", "all x y z.((Person(x) & Day(y) & DarkRoom(z) & Outside(x,y)) -> LooksInto(x,z))", "all x y.((Person(x) & OutsideInDay(x) & DarkRoom(y)) -> LooksInto(x,y))", "all x y.((Person(x) & Outside(x,y) & Day(y)) -> LooksIntoDarkRoom(x,y))", "exists x.(PersonOutside(x) & Day(x) & LooksIntoDarkRoom(x))", "all x y.((Person(x) & Outside(y) & Day(y)) -> LooksIntoDarkRoom(x,y))", "all x y z.((Person(x) & Day(y) & DarkRoom(z)) -> OutsideLookingInto(x,y,z))", "exists x.(PersonOutsideInDay(x) & LooksIntoDarkRoom(x))", "all x.(OutsideInDay(x) -> LooksIntoDarkRoom(x))", "all x y z.((Person(x) & Day(y) & DarkRoom(z)) -> OutsideInDayLookingInto(x,y,z))", "exists x.(Person(x) & OutsideInDay(x) & LookingIntoDarkRoom(x))"]}
{"id": "entailmentbank_validation_278", "nl": "the person outside cannot see the person in the dark room.", "fol": "", "prediction": ["all x y.((Person(x) & Outside(y)) -> -CanSeeInDarkRoom(x,y))", "all x y.((Person(x) & Outside(x) & DarkRoom(y)) -> -SeesIn(x,y))", "all x y.((Person(x) & Outside(x) & DarkRoom(y)) -> -CanSeeIn(x,y))", "all x y.((Person(x) & Outside(y)) -> -SeesInDarkRoom(x,y))", "all x y.((Person(x) & Outside(x) & DarkRoom(y)) -> -CanSee(x,y))", "all x y.((Person(x) & Outside(x) & DarkRoom(y)) -> -SeenIn(x,y))", "all x y.((Person(x) & Outside(x) & DarkRoom(y)) -> -SeePerson(x,y))", "all x y.((Person(x) & Outside(x) & DarkRoom(y)) -> -Sees(x,y))", "all x y z.((Person(x) & Outside(y) & DarkRoom(z)) -> -CanSeeIn(x,y,z))", "all x y.((Person(x) & Outside(x)) -> -SeesInDarkRoom(x,y))", "all x y.((Person(x) & Outside(x)) -> -CanSeeInDarkRoom(x,y))", "all x y.((Person(x) & Outside(x,y)) -> -CanSeeInDarkRoom(x,y))", "all x y z.((Person(x) & Outside(y) & DarkRoom(z)) -> -CanSee(x,y,z))", "all x y.((Person(x) & Outside(x) & DarkRoom(y)) -> -SeeIn(x,y))", "all x y.((Person(x) & Outside(x,y)) -> -SeesInDarkRoom(x,y))", "all x y.((Person(x) & Outside(x) & DarkRoom(y)) -> -See(x,y))"]}
{"id": "entailmentbank_validation_279", "nl": "a prism refracts light.", "fol": "", "prediction": ["all x.(Prism(x) -> RefractsLight(x))", "all x y.((Prism(x) & Light(y)) -> Refracts(x,y))", "all x.(Prism(x) -> RefractsLight(x))", "all x y z.((Prism(x) & Light(y) & Light(z)) -> Refracts(x,y,z))", "all x.(Primum(x) -> RefractsLight(x))", "all x y.((Prism(x) & Light(y)) -> Refracts(x,y))", "all x.((Prism(x) & RefractsLight(x)) -> RefractsLight(x))", "all x y z.((Prism(x) & Light(y) & Light(z)) -> Refracts(x,y))", "all x y z.((Prism(x) & Light(y) & Light(z) & Refracts(x,y,z)) -> Refracts(x,y,z))", "all x y z.((Prism(x) & Light(y) & Light(z) & Refracts(x,y)) -> Refracts(x,z))", "all x y z.((Prism(x) & Light(y) & Light(z) & Refracts(x,y,z)) -> Refracts(x,y))", "all x.(Prism(x) -> RefractsLight(x))", "all x.(Prime(x) -> RefractsLight(x))", "all x y z.((Prism(x) & Light(y) & Light(z)) -> Refracts(x,z))", "all x y z.((Prism(x) & Light(y) & Refracts(x,y)) -> Refracts(x,z))", "all x y z.((Prism(x) & Light(y) & Light(z) & Refracts(x,z)) -> Refracts(x,y,z))"]}
{"id": "entailmentbank_validation_280", "nl": "refracting sunlight / light causes sunlight / light to split into different colors.", "fol": "", "prediction": ["all x y.((RefractingSunlight(x) & Sunlight(y)) -> CausesSunlightToSplitIntoDifferentColors(x,y))", "all x.((RefractingSunlight(x) & RefractingLight(x)) -> CausesSunlightToSplitIntoDifferentColors(x))", "all x y.((RefractingSunlight(x) & Light(y)) -> CausesSunlightToSplitIntoDifferentColors(x,y))", "all x y.((RefractingSunlight(x) & Sunlight(y)) -> CausesSunlight(x,y))", "all x.(RefractingSunlight(x) -> CausesSunlightToSplitIntoDifferentColors(x))", "all x y z.((RefractingSunlight(x) & Light(y) & Sunlight(z)) -> CausesSplitting(x,y,z))", "all x y.((RefractingSunlight(x) & Light(y)) -> CausesSunlight(x,y))", "all x y.((RefractingSunlight(x) & RefractingLight(y)) -> CausesSunlightToSplitIntoDifferentColors(x,y))", "all x.((RefractingSunlight(x) & RefractingLight(x)) -> CausesSunlight(x))", "all x y z.((RefractingSunlight(x) & Light(y) & Sunlight(z)) -> CausesSplitIntoDifferentColors(x,y,z))", "all x y.((RefractingSunlight(x) & RefractingLight(x)) -> CausesSunlightToSplitIntoDifferentColors(x,y))", "all x y.((RefractingSunlight(x) & Sunlight(y)) -> CausesSunlightToSplitIntoColors(x,y))", "all x y.((RefractingSunlight(x) & RefractingLight(x)) -> CausesSunlightToSplitIntoDifferentColors(y))", "all x.(RefractingSunlight(x) -> CausesSunlight(x))", "all x.((RefractingSunlight(x) & RefractingLight(x)) -> CausesSunlightSplitting(x))", "all x y z.((RefractingSunlight(x) & Light(y) & Sunlight(z)) -> CausesSplitIntoColors(x,y,z))"]}
{"id": "entailmentbank_validation_281", "nl": "a prism can refract light and split the light into different colors.", "fol": "", "prediction": ["all x.(Prism(x) -> (RefractsLight(x) & SplitsLightIntoDifferentColors(x)))", "all x.(Prism(x) -> (RefractLight(x) & SplitLightIntoDifferentColors(x)))", "all x y.((Prism(x) & Light(y)) -> (Refracts(x,y) & SplitsIntoDifferentColors(x,y)))", "all x y.((Prism(x) & Light(y)) -> (Refracts(x,y) & SplitsIntoColors(x,y)))", "all x.(Prism(x) -> (RefractsLight(x) & SplitsLightIntoColors(x)))", "all x y z.((Prism(x) & Light(y) & Color(z)) -> (Refracts(x,y) & SplitsInto(x,z)))", "all x.(Prism(x) -> (RefractsLight(x) & SplitsLightIntoDifferentColors(x)))", "all x.(Prism(x) -> (RefractsLight(x) & SplitsLight(x)))", "all x y.((Prism(x) & Light(y)) -> (Refracts(x,y) & Splits(x,y)))", "all x y z.((Prism(x) & Light(y) & Color(z)) -> (Refracts(x,y) & Splits(x,z)))", "all x y.((Prism(x) & Light(y)) -> (Refracts(x,y) & SplitsIntoDifferentColors(x)))", "all x.(Prism(x) -> (CanRefractLight(x) & CanSplitLightIntoDifferentColors(x)))", "all x.(Primum(x) -> (RefractsLight(x) & SplitsLightIntoDifferentColors(x)))", "all x y z.((Prism(x) & Light(y) & Color(z)) -> (Refracts(x,y) & SplitsInto(x,y,z)))", "all x.(Prism(x) -> (RefractsLight(x) & SplitsLightIntoDifferentColors(x)))", "all x y.((Prism(x) & Light(y)) -> (RefractLight(x,y) & SplitLightIntoDifferentColors(x,y)))"]}
{"id": "entailmentbank_validation_282", "nl": "white light is made of all colors of visible light combined.", "fol": "", "prediction": ["all x.(WhiteLight(x) -> MadeOfAllColorsOfVisibleLight(x))", "all x.(WhiteLight(x) -> MadeOfVisibleLight(x))", "all x y.((WhiteLight(x) & VisibleLight(y)) -> MadeOf(x,y))", "all x.(WhiteLight(x) -> AllColorsOfVisibleLight(x))", "all x.(WhiteLight(x) -> (ColorsOfVisibleLight(x) & ColorsOfVisibleLight(x)))", "all x.(WhiteLight(x) -> AllColorsOfVisibleLightCombined(x))", "all x.(WhiteLight(x) -> MadeOfAllColorsOfVisibleLightCombined(x))", "all x y.((WhiteLight(x) & Color(y) & VisibleLight(y)) -> MadeOf(x,y))", "all x y.((WhiteLight(x) & Color(y)) -> MadeOf(x,y))", "all x.(WhiteLight(x) -> (Color(x,VisibleLight) & Color(x,VisibleLight) & Color(x,VisibleLight) & Color(x,VisibleLight)))", "all x.(WhiteLight(x) -> (ColorsOfVisibleLight(x) & ColorsOfVisibleLight(x) & ColorsOfVisibleLight(x)))", "all x.(WhiteLight(x) -> (ColorsOfVisibleLight(x) & ColorsOfVisibleLight(x)))", "all x.(WhiteLight(x) -> (Color(x,VisibleLight) & Color(x,VisibleLight) & Color(x,VisibleLight)))", "all x.(WhiteLight(x) -> (Color(x,VisibleLight) & Color(x,VisibleLight)))", "all x.(WhiteLight(x) -> (AllColorsOfVisibleLight(x) & Combined(x)))", "all x.(WhiteLight(x) -> (AllColorsOfVisibleLightCombined(x)))"]}
{"id": "entailmentbank_validation_283", "nl": "a prism can refract white light and split the light into all colors of visible light.", "fol": "", "prediction": ["all x.(Prism(x) -> (RefractsWhiteLight(x) & SplitsLightIntoAllColorsOfVisibleLight(x)))", "all x.(Prism(x) -> (RefractsWhiteLight(x) & SplitsLightIntoAllColors(x)))", "all x.(Prism(x) -> (RefractsWhiteLight(x) & SplitsLightIntoAllColorsVisibleLight(x)))", "all x.(Prism(x) -> (RefractsWhiteLight(x) & SplitsLightIntoVisibleLight(x)))", "all x.(Prism(x) -> (RefractWhiteLight(x) & SplitLightIntoAllColorsOfVisibleLight(x)))", "all x.(Prism(x) -> (RefractsWhiteLight(x) & SplitsLightIntoAllColorsOfVisibleLight(x)))", "all x y.((Prism(x) & WhiteLight(y)) -> (Refracts(x,y) & SplitsLightIntoAllColors(x,y)))", "all x.(Prism(x) -> (RefractWhiteLight(x) & SplitLightIntoAllColors(x)))", "all x y.((Prism(x) & WhiteLight(y)) -> (Refracts(x,y) & SplitsIntoAllColors(x,y)))", "all x y.((Prism(x) & WhiteLight(y)) -> (Refracts(x,y) & SplitsLightIntoAllColorsOfVisibleLight(x)))", "all x y z.((Prism(x) & WhiteLight(y) & VisibleLight(z)) -> (Refracts(x,y) & SplitsInto(x,z)))", "all x y.((Prism(x) & WhiteLight(y)) -> (Refracts(x,y) & SplitsLightIntoAllColors(x)))", "all x.(Prism(x) -> (RefractsWhiteLight(x) & SplitsLightIntoAllColors(x,VisibleLight)))", "all x y.((Prism(x) & WhiteLight(y)) -> (Refracts(x,y) & SplitsIntoAllColorsOfVisibleLight(x)))", "all x.(Prism(x) -> (RefractsWhiteLight(x) & SplitsLightIntoAllColors(x)))", "all x y z.((Prism(x) & WhiteLight(y) & VisibleLight(z)) -> (Refracts(x,y) & Splits(x,z)))"]}
{"id": "entailmentbank_validation_284", "nl": "a vacuum has no matter in it.", "fol": "", "prediction": ["all x.(Vacuum(x) -> NoMatterInVacuum(x))", "all x.(Vacuum(x) -> -MatterInVacuum(x))", "all x.(Vacuum(x) -> NoMatter(x))", "all x.(Vacuum(x) -> NoMatterIn(x))", "all x.(Vacuum(x) -> -exists y.(Matter(y) & InVacuum(x,y)))", "all x.(Vacuum(x) -> -MatterIn(x))", "all x.(Vacuum(x) -> -exists y.(Matter(y) & InVacuum(x,y))))", "all x y.((Vacuum(x) & Vacuum(y)) -> -MatterIn(x,y))", "all x y.((Vacuum(x) & Vacuum(y)) -> NoMatterIn(x,y))", "all x.(Vacuum(x) -> -HasMatterInVacuum(x))", "all x.(Vacuum(x) -> HasNoMatter(x))", "all x.(Vacuum(x) -> HasNoMatterIn(x))", "all x y.((Vacuum(x) & Vacuum(y)) -> -HasMatterIn(x,y))", "all x.(Vacuum(x) -> -HasMatterIn(x))", "all x.(Vacuum(x) -> NoMatterInIt(x))", "all x.(Vacuum(x) -> -exists y.(MatterInVacuum(y) & InVacuum(x,y)))"]}
{"id": "entailmentbank_validation_285", "nl": "sound requires matter to travel.", "fol": "", "prediction": ["all x.(Sound(x) -> RequiresMatterToTravel(x))", "all x.(Sound(x) -> RequiresMatter(x))", "all x y.((Sound(x) & Matter(y)) -> RequiresToTravel(x,y))", "all x y z.((Sound(x) & Matter(y) & Matter(z)) -> RequiresToTravel(x,y,z))", "all x.(SoundRequiresMatterToTravel(x) -> RequiresMatter(x))", "all x y.((Sound(x) & Matter(y) & RequiresToTravel(x,y)) -> RequiresToTravel(x,y))", "all x.(Sound(x) -> RequiresMatterForTravel(x))", "all x y.((Sound(x) & Matter(y)) -> RequiresForTravel(x,y))", "all x.((Sound(x) & RequiresMatter(x)) -> Travels(x))", "all x y z.((Sound(x) & Matter(y) & Sound(z)) -> RequiresToTravel(x,y,z))", "all x.(SoundRequiresMatterToTravel(x) -> SoundRequiresMatter(x))", "all x.(SoundRequiresMatter(x) -> Travels(x))", "all x y.((Sound(x) & Matter(y)) -> Requires(x,y))", "all x.(SoundRequiresMatter(x) -> Travel(x))", "all x.((Sound(x) & RequiresMatter(x)) -> Travel(x))", "all x y.((Sound(x) & Matter(y) & Requires(x,y)) -> Travels(x))"]}
{"id": "entailmentbank_validation_286", "nl": "sound cannot travel through a vacuum.", "fol": "", "prediction": ["all x.(Sound(x) -> -TravelsThroughVacuum(x))", "all x y.((Sound(x) & Vacuum(y)) -> -TravelsThrough(x,y))", "all x.(Sound(x) -> -CanTravelThroughVacuum(x))", "all x y.((Sound(x) & Vacuum(y)) -> -CanTravel(x,y))", "all x.(Sound(x) -> -TravelsThroughVapor(x))", "all x y.((Sound(x) & Vacuum(y)) -> -CanTravelThrough(x,y))", "all x.(Sound(x) -> -CanTravelThroughVapor(x))", "all x y.((Sound(x) & Vacuum(y)) -> -TravelThrough(x,y))", "all x.(Sound(x) -> -exists y.(Vacuum(y) & TravelsThrough(x,y))))", "all x.(Sound(x) -> -exists y.(Vacuum(y) & TravelsThrough(x,y)))", "all x y.((Sound(x) & Vacuum(y)) -> -Travel(x,y))", "all x.(Sound(x) -> -TravelThroughVacuum(x))", "all x.(Sound(x) -> -TransportsThroughVacuum(x))", "all x.(Sound(x) -> -TreatsThroughVacuum(x))", "all x y.((Sound(x) & Vacuum(y)) -> -TreatsThrough(x,y))", "all x y.((Sound(x) & Vacuum(y)) -> -TransportsThrough(x,y))"]}
{"id": "entailmentbank_validation_287", "nl": "metal is a thermal / thermal energy conductor.", "fol": "", "prediction": ["all x.(Metal(x) -> ThermalEnergyConductor(x))", "all x.(Metal(x) -> Thermal(x) & ThermalEnergyConductor(x))", "all x.(Metal(x) -> ThermalConductor(x))", "all x.(Metal(x) -> (ThermalConductor(x) | ThermalEnergyConductor(x)))", "all x.(Metal(x) -> (Thermal(x) | ThermalEnergyConductor(x)))", "all x.(Metal(x) -> (TerminalEnergyConductor(x) | ThermalEnergyConductor(x)))", "all x.(Metal(x) -> (ThermalEnergyConductor(x) & ThermalEnergyConductor(x)))", "all x.(Metal(x) -> (ThermalConductor(x) | ThermalConductor(x)))", "all x.(Metal(x) -> (TemperatureConductor(x) | ThermalEnergyConductor(x)))", "all x.(Metal(x) -> (ThermalConductor(x) & ThermalEnergyConductor(x)))", "all x.(Metal(x) -> (ThermalConductor(x) & ThermalConductor(x)))", "all x.(Metal(x) -> (Thermal(x) & ThermalEnergyConductor(x)))", "all x.(Metal(x) -> Thermal/ThermalEnergyConductor(x))", "all x y.((Metal(x) & Thermal(y)) -> ThermalEnergyConductor(x))", "all x.(Metal(x) -> (Terminal(x) | ThermalEnergyConductor(x)))", "all x y.((Metal(x) & ThermalEnergyConductor(y)) -> Conducts(x,y))"]}
{"id": "entailmentbank_validation_288", "nl": "a spoon sometimes is made of metal.", "fol": "", "prediction": ["exists x.(Spoon(x) & MadeOfMetal(x))", "all x.(Spoon(x) -> MadeOfMetal(x))", "exists x.(Spoon(x) & MadeOf(x,Metal))", "all x y.((Spoon(x) & Metal(y)) -> MadeOf(x,y))", "exists x y.(Spoon(x) & Spoon(y) & MadeOfMetal(x))", "all x.(Spoon(x) -> (MadeOfMetal(x) & OftenMadeOfMetal(x)))", "exists x y.(Spoon(x) & Metal(y) & MadeOf(x,y))", "all x.(Spoon(x) -> (MadeOfMetal(x) & SometimesMadeOfMetal(x)))", "all x.(Spoon(x) -> (MadeOfMetal(x) | MadeOfMetal(x)))", "all x.(Spoon(x) -> SometimesMadeOfMetal(x))", "all x.(Spoon(x) -> (MadeOfMetal(x) | -MadeOfMetal(x)))", "exists x y.(Spoon(x) & Spoon(y) & MadeOfMetal(x,y))", "all x.(Spoon(x) -> (MadeOfMetal(x) & OccasionallyMadeOfMetal(x)))", "all x y.((Spoon(x) & Metal(y)) -> SometimesMadeOf(x,y))", "exists x y.(Spoon(x) & Spoon(y) & MadeOf(x,Metal))", "all x.(Spoon(x) -> (MadeOfMetal(x) & -MadeOfMetal(x)))"]}
{"id": "entailmentbank_validation_289", "nl": "a metal spoon is a thermal conductor.", "fol": "", "prediction": ["all x.(MetalSpoon(x) -> ThermalConductor(x))", "all x.((MetalSpoon(x) & Spoon(x)) -> ThermalConductor(x))", "all x.(MetalSpoken(x) -> ThermalConductor(x))", "all x y.((MetalSpoon(x) & Spoon(y)) -> ThermalConductor(x))", "all x.((MetalSpoon(x) & Scoop(x)) -> ThermalConductor(x))", "all x y.((MetalSpoon(x) & Scoop(y)) -> ThermalConductor(x))", "all x.((MetalSpoon(x) & Stove(x)) -> ThermalConductor(x))", "all x.((MetalSpoon(x) & ThermalConductor(x)) -> ThermalConductor(x))", "all x y.((MetalSpoon(x) & Snack(y)) -> ThermalConductor(x))", "all x.((MetalSpoon(x) & Spoon(y)) -> ThermalConductor(x))", "all x y.((MetalSpoon(x) & Spoon(y)) -> ThermalConductor(x,y))", "all x y.((MetalSpoon(x) & ThermalConductor(y)) -> Conductor(x,y))", "all x y.((MetalSpoon(x) & ThermalConductor(y)) -> ThermalConductor(x))", "all x.(MetalSpoke(x) -> ThermalConductor(x))", "all x.((MetalSpoon(x) & ThermalConductor(x)) -> MetalSpoon(x))", "all x y.((MetalSpoon(x) & Scoop(y)) -> ThermalConductor(x,y))"]}
{"id": "entailmentbank_validation_290", "nl": "a hot substance is a source of heat.", "fol": "", "prediction": ["all x.(HotSubstance(x) -> SourceOfHeat(x))", "all x.((HotSubstance(x) & SourceOfHeat(x)) -> SourceOfHeat(x))", "all x y.((HotSubstance(x) & HotSubstance(y)) -> SourceOfHeat(x,y))", "all x.(HotSubstance(x) -> HeatSource(x))", "all x y.((HotSubstance(x) & HeatSource(y)) -> SourceOf(x,y))", "all x y.((HotSubstance(x) & HotSubstance(y)) -> SourceOfHeat(x))", "all x.((HotSubstance(x) & SourceOfHeat(x)) -> HeatSource(x))", "all x y.((HotSubstance(x) & HeatSource(y)) -> SourceOfHeat(x,y))", "all x y.((HotSubstance(x) & SourceOfHeat(y)) -> SourceOfHeat(x,y))", "all x y.((HotSubstance(x) & Heat(y)) -> SourceOf(x,y))", "all x.(HotSubstance(x) -> SourceOfHeat(x))", "all x.(HasHotSubstance(x) -> SourceOfHeat(x))", "all x y.((HotSubstance(x) & Heat(y)) -> SourceOfHeat(x,y))", "all x.((HotSubstance(x) & HeatSource(x)) -> SourceOf(x,Heat))", "all x.((HotSubstance(x) & HeatSource(x)) -> HeatSource(x))", "all x y.((HotSubstance(x) & HeatSource(y)) -> Source(x,y))"]}
{"id": "entailmentbank_validation_291", "nl": "a metal spoon is placed in a pot of hot soup.", "fol": "", "prediction": ["all x y.((MetalSpoon(x) & PotOfHotSoup(y)) -> PlacedIn(x,y))", "all x y z.((MetalSpoon(x) & PotOfHotSoup(y) & PotOfSoup(z)) -> PlacedIn(x,y,z))", "all x y.((MetalSpoon(x) & HotSoupPot(y)) -> PlacedIn(x,y))", "all x y.((MetalSpoke(x) & PotOfHotSoup(y)) -> PlacedIn(x,y))", "all x y z.((MetalSpoon(x) & PotOfHotSoup(y) & PotOfHotSoup(z)) -> PlacedIn(x,y,z))", "all x y z.((MetalSpoon(x) & HotSoupPot(y) & Pot(z)) -> PlacedIn(x,y,z))", "all x y z.((MetalSpoon(x) & PotOfHotSoup(y) & PotOf(z)) -> PlacedIn(x,y,z))", "all x y z.((MetalSpoon(x) & PotOfHotSoup(y) & HotSoup(z)) -> PlacedIn(x,y,z))", "all x y z.((MetalSpoke(x) & PotOfHotSoup(y) & PotOfSoup(z)) -> PlacedIn(x,y,z))", "all x y.((MetalSpoon(x) & HotSoupPot(y)) -> PlacedInPot(x,y))", "all x y z.((MetalSpoon(x) & HotSoup(y) & Pot(z)) -> PlacedIn(x,y,z))", "all x y.((MetalSpoon(x) & HotSoup(y)) -> PlacedInPot(x,y))", "all x y z.((MetalSpoon(x) & PotOfHotSoup(y) & PotOfSoup(z) & PlacedIn(x,y,z)) -> HotSoupPot(x))", "all x y z.((MetalSpoon(x) & Pot(y) & HotSoup(z)) -> PlacedIn(x,y,z))", "all x y z.((MetalSpoon(x) & PotOfHotSoup(y) & PotOfSoup(z)) -> PlacedIn(x,y))", "all x y z.((MetalSpoon(x) & PotOfHotSoup(y) & PotOf(z)) -> PlacedIn(x,y))"]}
{"id": "entailmentbank_validation_292", "nl": "the hot soup will be a source of heat for the metal spoon.", "fol": "", "prediction": ["all x y.((HotSoup(x) & MetalSpoon(y)) -> SourceOfHeat(x,y))", "all x y.((HotSoup(x) & MetalSpoon(y)) -> HeatSource(x,y))", "all x.(HotSoup(x) -> SourceOfHeatForMetalSpoon(x))", "all x y.((HotSoup(x) & MetalSpoon(y)) -> SourceOfHeatFor(x,y))", "all x.(HotSoup(x) -> HeatSourceForMetalSpoon(x))", "all x y.((HotSoup(x) & MetalSpoon(y)) -> HeatSourceFor(x,y))", "all x y.((HotSoup(x) & MetalSpoke(y)) -> SourceOfHeat(x,y))", "all x y z.((HotSoup(x) & MetalSpoon(y) & Spoon(z)) -> SourceOfHeat(x,y,z))", "all x.((HotSoup(x) & MetalSpoon(x)) -> SourceOfHeat(x))", "all x y z.((HotSoup(x) & MetalSpoon(y) & Soup(z)) -> SourceOfHeat(x,y,z))", "all x y z.((HotSoup(x) & MetalSpoon(y) & MetalSpoon(z)) -> SourceOfHeat(x,y,z))", "all x.(HotSoup(x) -> SourceOfHeat(x))", "all x.(HotSoup(x) -> SourceOfHeat(x,MetalSpoon))", "all x y.((HotSupply(x) & MetalSpoon(y)) -> SourceOfHeat(x,y))", "all x.(HotSoup(x) -> HeatSource(x))", "all x y z.((HotSoup(x) & MetalSpoon(y) & Spoon(z)) -> HeatSource(x,y,z))"]}
{"id": "entailmentbank_validation_293", "nl": "if a thermal conductor is exposed to a source of heat, then thermal conduction will make the thermal conductor become hot.", "fol": "", "prediction": ["all x.((ThermalConductor(x) & ExposedToHeatSource(x)) -> ThermalConductionMakesThermalConductorHot(x))", "all x y.((ThermalConductor(x) & SourceOfHeat(y) & ExposedTo(x,y)) -> ThermalConductionMakesThermalConductorHot(x))", "all x y.((ThermalConductor(x) & HeatSource(y) & ExposedTo(x,y)) -> ThermalConductionMakesThermalConductorHot(x))", "all x.((ThermalConductor(x) & ExposedToHeat(x)) -> ThermalConductionMakesThermalConductorHot(x))", "all x y.((ThermalConductor(x) & ExposedToHeat(x,y)) -> ThermalConductionMakesThermalConductorHot(x))", "all x y.((ThermalConductor(x) & ExposedToHeat(x)) -> ThermalConductionMakesThermalConductorHot(x))", "all x y z.((ThermalConductor(x) & SourceOfHeat(y) & ExposedTo(x,y)) -> ThermalConductionMakesThermalConductorHot(x))", "all x y.((ThermalConductor(x) & ExposedToHeat(x)) -> ThermalConductionMakesThermalConductorHot(y))", "all x y.((ThermalConductor(x) & ExposedToHeatSource(x)) -> ThermalConductionMakesThermalConductorHot(x))", "all x y.((ThermalConductor(x) & ExposedToHeatSource(x,y)) -> ThermalConductionMakesThermalConductorHot(x))", "all x y.((ThermalConductor(x) & ExposedToHeatSource(x)) -> ThermalConductionMakesThermalConductorHot(y))", "all x y.((ThermalConductor(x) & SourceOfHeat(y) & ExposedTo(x,y)) -> ThermalConductionMakesTemperaryConductorHot(x))", "all x y z.((ThermalConductor(x) & SourceOfHeat(y) & ExposedTo(x,y)) -> ThermalConductionMakesThermalConductorHot(z))", "all x y z.((ThermalConductor(x) & HeatSource(y) & ExposedTo(x,y)) -> ThermalConductionMakesThermalConductorHot(x))", "all x y.((ThermalConductor(x) & SourceOfHeat(y) & ExposedTo(x,y)) -> ThermalConduction(x))", "all x y.((ThermalConductor(x) & HeatSource(y) & ExposedTo(x,y)) -> ThermalConduction(x))"]}
{"id": "entailmentbank_validation_294", "nl": "the metal spoon will be heated up by thermal conduction.", "fol": "", "prediction": ["all x.(MetalSpoon(x) -> HeatsUpByThermalConduction(x))", "all x y.((MetalSpoon(x) & ThermalConduction(y)) -> HeatsUp(x,y))", "all x.(MetalSpoon(x) -> HeatableByThermalConduction(x))", "all x.(MetalSpoon(x) -> HeatedByThermalConduction(x))", "all x.((MetalSpoon(x) & HeatsUpByThermalConduction(x)) -> HeatsUpByThermalConduction(x))", "all x.(MetalSpoon(x) -> HeatedUpByThermalConduction(x))", "all x y.((MetalSpoon(x) & ThermalConduction(y)) -> HeatedUpBy(x,y))", "all x y.((MetalSpoon(x) & ThermalConduction(y)) -> HeatsUpBy(x,y))", "all x y.((MetalSpoon(x) & ThermalConduction(y)) -> HeatedUp(x,y))", "all x.((MetalSpoon(x) & ThermalConduction(x)) -> HeatsUp(x))", "all x.(MetalSpoon(x) -> HeatedByThermalConduction(x))", "all x.(MetalSpoon(x) -> Heater(x,thermalConduction))", "all x.(MetalSpoon(x) -> HeaterByThermalConduction(x))", "all x y z.((MetalSpoon(x) & ThermalConduction(y) & ThermalConduction(z)) -> HeatsUp(x,y,z))", "all x y.((MetalSpoon(x) & ThermalConduction(y)) -> HeatedUpBy(x,y))", "all x.((MetalSpoon(x) & ThermalConduction(x)) -> HeatedUp(x))"]}
{"id": "entailmentbank_validation_295", "nl": "thermal conduction is when heat flows from warmer object to cooler object.", "fol": "", "prediction": ["all x y z.((ThermalConduction(x) & WarmerObject(y) & CoolerObject(z)) -> HeatFlowsFromTo(x,y,z))", "all x y z.((TemperatureConduction(x) & WarmerObject(y) & CoolerObject(z)) -> HeatFlowsFromTo(x,y,z))", "all x y.((ThermalConduction(x) & WarmerObject(y) & CoolerObject(y)) -> HeatFlowsFromTo(x,y))", "all x.(ThermalConduction(x) -> HeatFlowsFromWarmerObjectToCoolerObject(x))", "all x y.((TemperatureConduction(x) & WarmerObject(y) & CoolerObject(y)) -> HeatFlowsFromTo(x,y))", "all x y z.((ThermalConduction(x) & WarmerObject(y) & CoolerObject(z)) -> HeatFlow(x,y,z))", "all x y z.((ThermalConduction(x) & WarmerObject(y) & CoolerObject(z)) -> HeatFlows(x,y,z))", "all x y.((ThermalConduction(x) & WarmerObject(y)) -> HeatFlowsFromTo(x,y))", "all x y.((ThermalConduction(x) & WarmerObject(y)) -> HeatFlowsFromToCoolerObject(x,y))", "all x.(ThermalConduction(x) -> HeatFlowsFromWarmerObjectToColderObject(x))", "all x y z.((TemperatureConduction(x) & WarmerObject(y) & CoolerObject(z)) -> HeatFlow(x,y,z))", "all x y.((TemperatureConduction(x) & WarmerObject(y)) -> HeatFlowsFromToCoolerObject(x,y))", "all x y z.((TemperatureConduction(x) & WarmerObject(y) & CoolerObject(z)) -> HeatFlows(x,y,z))", "all x y.((ThermalConduction(x) & WarmerObject(y) & CoolerObject(z)) -> HeatFlowsFromTo(x,y,z))", "all x y.((TemperatureConduction(x) & WarmerObject(y)) -> HeatFlowsFromTo(x,y))", "all x y.((ThermalConduction(x) & WarmerObject(y)) -> HeatFlowsFromToColderObject(x,y))"]}
{"id": "entailmentbank_validation_296", "nl": "thermal conduction is when materials conduct heat through those materials through collision of particles.", "fol": "", "prediction": ["all x y.((Material(x) & Material(y) & ConductsHeat(x,y) & CollisionOfParticles(x)) -> ThermalConduction(x))", "all x y.((Material(x) & Material(y) & ConductsHeat(x,y)) -> CollisionOfParticles(x))", "all x.((Material(x) & ConductsHeat(x) & CollisionOfParticles(x)) -> ThermalConduction(x))", "all x y.((Material(x) & Material(y) & ConductsHeat(x,y)) -> CollisionOfParticles(x,y))", "all x y.((Material(x) & Material(y) & ConductsHeat(x,y) & CollisionOfParticles(x,y)) -> ThermalConduction(x))", "all x y.((Material(x) & Material(y) & ConductsHeatThrough(x,y) & CollisionOfParticles(x)) -> ThermalConduction(x))", "all x y.((Material(x) & Material(y) & ConductsHeatThrough(x,y)) -> CollisionOfParticles(x))", "all x y z.((Material(x) & Material(y) & Material(z) & ConductsHeat(x,y,z)) -> CollisionOfParticles(x))", "all x y.((Material(x) & Material(y) & ConductsHeat(x,y) & CollisionOfParticles(x)) -> ThermalConduction(x,y))", "all x.((Materials(x) & ConductsHeat(x) & CollisionOfParticles(x)) -> ThermalConduction(x))", "all x y.((Material(x) & Material(y) & ConductsHeatThrough(x,y) & CollisionOfParticles(x,y)) -> ThermalConduction(x))", "all x y.((Material(x) & Material(y) & ConductsHeat(x,y) & Collision(x,y)) -> ThermalConduction(x))", "all x y z.((Material(x) & Material(y) & Material(z) & ConductsHeat(x,y,z) & CollisionOfParticles(x)) -> ThermalConduction(x))", "all x y z.((Material(x) & Material(y) & Material(z) & ConductsHeat(x,y,z)) -> CollisionOfParticles(x,y,z))", "all x y.((Material(x) & Material(y) & ConductsHeatThrough(x,y)) -> CollisionOfParticles(x,y))", "all x.(ThermalConduction(x) -> (ConductsHeatThroughMaterials(x) & CollisionOfParticles(x)))"]}
{"id": "entailmentbank_validation_297", "nl": "thermal conduction is a heat exchange process involving the collision of particles.", "fol": "", "prediction": ["all x.(ThermalConduction(x) -> (HeatExchangeProcess(x) & CollisionOfParticles(x)))", "all x.(ThermalConduction(x) -> (HeatExchangeProcess(x) & InvolvesCollisionOfParticles(x)))", "all x.(ThermalConduction(x) -> (HeatExchangeProcess(x) & CollisionOfParticles(x)))", "all x.(ThermalConduction(x) -> (HeatExchangeProcess(x) & InvolvesCouplingOfParticles(x)))", "all x.(ThermalConduction(x) -> (HeatExchangeProcess(x) & InvolvesCollisionOfParticles(x)))", "all x.((ThermalConduction(x) & HeatExchangeProcess(x) & CollisionOfParticles(x)) -> HeatExchange(x))", "all x.((ThermalConduction(x) & HeatExchangeProcess(x) & CollisionOfParticles(x)) -> HeatExchangeProcess(x))", "all x.(ThermalConduction(x) -> (HeatExchangeProcess(x) & InvolvesCollisionOfParticles(x)))", "all x.(ThermalConduction(x) -> HeatExchangeProcess(x))", "all x y.((ThermalConduction(x) & HeatExchangeProcess(y)) -> CollisionOfParticles(x,y))", "all x.(ThermalConduction(x) -> (HeatExchange(x) & CollisionOfParticles(x)))", "all x.(ThermalConduction(x) -> (HeatExchangeProcess(x) & InvolvesCollusionOfParticles(x)))", "all x.(ThermalConduction(x) -> (HeatExchangeProcess(x) & InvolvesCollapseOfParticles(x)))", "all x.(ThermalConduction(x) -> (HeatExchangeProcess(x) & InvolvesCombitationOfParticles(x)))", "all x.(ThermalConduction(x) -> (HeatExchangeProcess(x) & InvolvesCollectionOfParticles(x)))", "all x y.((ThermalConduction(x) & HeatExchangeProcess(y)) -> InvolvesCollisionOfParticles(x,y))"]}
{"id": "entailmentbank_validation_298", "nl": "longitudinal waves travel through pattern of compressions and rarefactions.", "fol": "", "prediction": ["all x.(LanguageWaves(x) -> (TravelsThroughCompressions(x) & TravelsThroughRarefactions(x)))", "all x y.((LanguageWaves(x) & PatternOfCompressions(y) & Rarefactions(y)) -> TravelsThrough(x,y))", "all x y z.((LanguageWaves(x) & PatternOfCompressions(y) & Rarefactions(z)) -> TravelsThrough(x,y,z))", "all x y.((LanguageWaves(x) & PatternOfCompressions(y) & Rarefactions(z)) -> TravelsThrough(x,y,z))", "all x y.((LanguageWaves(x) & PatternOfCompressionsAndRarefactions(y)) -> TravelsThrough(x,y))", "all x.(LentalWaves(x) -> (TravelsThroughCompressions(x) & TravelsThroughRarefactions(x)))", "all x.(LongitudinalWaves(x) -> (TravelsThroughCompressions(x) & TravelsThroughRarefactions(x)))", "all x.((LanguageWaves(x) & PatternOfCompressions(x) & Rarefactions(x)) -> TravelsThrough(x))", "all x y z.((LanguageWaves(x) & Compression(y) & Rarefaction(z)) -> TravelsThrough(x,y,z))", "all x y.((LanguageWaves(x) & PatternOfCompressions(y) & Rarefactions(x)) -> TravelsThrough(x,y))", "all x.(LanguageWaves(x) -> TravelsThroughCompressionsAndRarefactions(x))", "all x.(LanguageWaves(x) -> (TravelsThrough(x,Compressions) & TravelsThrough(x,Rarefactions)))", "all x y.((LongitudinalWaves(x) & PatternOfCompressions(y) & Rarefactions(y)) -> TravelsThrough(x,y))", "all x.(LentilWaves(x) -> (TravelsThroughCompressions(x) & TravelsThroughRarefactions(x)))", "all x.(LanguageWaves(x) -> (TravelsThroughCompression(x) & TravelsThroughRarefaction(x)))", "all x.(LanguageWaves(x) -> (TravelsThroughCompressions(x) | TravelsThroughRarefactions(x)))"]}
{"id": "entailmentbank_validation_299", "nl": "compression waves produces compressions and rarefactions.", "fol": "", "prediction": ["all x.(CompressionWaves(x) -> (ProducesCompressions(x) & ProducesRarefactions(x)))", "all x y.((CompressionWaves(x) & Compression(y)) -> (Produces(x,y) & Produces(x,y)))", "all x y z.((CompressionWaves(x) & Compression(y) & Rarefaction(z)) -> (Produces(x,y) & Produces(x,z)))", "all x.(CompressionWaves(x) -> (ProducesCompression(x) & ProducesRarefaction(x)))", "all x.(Compression(x) -> (ProducesCompressions(x) & ProducesRarefactions(x)))", "all x.(CompressionWaves(x) -> (ProducesCompressions(x) | ProducesRarefactions(x)))", "all x.(CompressionWaves(x) -> (ProducesCompression(x) & ProducesRarefactions(x)))", "all x y z.((CompressionWaves(x) & Compression(y) & Rarefaction(z)) -> Produces(x,y,z))", "all x y.((CompressionWaves(x) & Compression(y)) -> Produces(x,y))", "all x y.((CompressionWaves(x) & Compression(y)) -> (ProducesCompressions(x,y) & ProducesRarefactions(x,y)))", "all x y.((CompressionWaves(x) & Compression(y)) -> (Produces(x,y) & Rarefaction(x)))", "all x y.((CompressionWaves(x) & Compression(y)) -> (Produces(x,y) & Produces(x,y) & Produces(x,y)))", "all x y.((CompressionWaves(x) & Compression(y)) -> (Produces(x,y) & Rarefactions(x)))", "all x.(CompressionWaves(x) -> (ProducesCompressions(x) & ProducesRareFactions(x)))", "all x.(CompressionWaves(x) -> (ProducesCompressions(x) & ProducesRarefactions(x)))", "all x.(CompressionWell(x) -> (ProducesCompressions(x) & ProducesRarefactions(x)))"]}
{"id": "entailmentbank_validation_300", "nl": "longitudinal waves are also called compression waves.", "fol": "", "prediction": ["all x.(LanguageWaves(x) -> CompressionWaves(x))", "all x.(LanguageWaves(x) -> (CompressionWaves(x)))", "all x.((LanguageWaves(x) & LongitudinalWaves(x)) -> CompressionWaves(x))", "all x.(LanguageWaves(x) -> (CompressionWaves(x) | LongitudinalWaves(x)))", "all x.(LengthlessWaves(x) -> CompressionWaves(x))", "all x.(LongitudinalWaves(x) -> CompressionWaves(x))", "all x y.((LanguageWaves(x) & LongitudinalWaves(y)) -> CompressionWaves(x))", "all x.(LanguageWaves(x) -> CompactionWaves(x))", "all x.(LengthlessWaves(x) -> (CompressionWaves(x) | LongitudinalWaves(x)))", "all x.(LongitudinalWaves(x) -> (CompressionWaves(x) | LongitudinalWaves(x)))", "all x.(LanguageWaves(x) -> AlsoKnownAsCompressionWaves(x))", "all x.((LanguageWaves(x) & CompressionWaves(x)) -> LongitudinalWaves(x))", "all x.(LanguageWaves(x) -> (CompressionWaves(x) & LongitudinalWaves(x)))", "all x y.((LanguageWaves(x) & LongitudinalWaves(y)) -> (CompressionWaves(x)))", "all x.(LongitudinalWaves(x) -> (CompressionWaves(x)))", "all x.(LengthlessWaves(x) -> (CompressionWaves(x) & LongitudinalWaves(x)))"]}
{"id": "entailmentbank_validation_301", "nl": "longitudinal waves cause object to move in the same direction of the wave.", "fol": "", "prediction": ["all x y.((LanguageWaves(x) & Object(y)) -> MovesInSameDirection(y,x))", "all x y.((LanguageWaves(x) & Object(y)) -> MoveInSameDirection(y,x))", "all x.(LanguageWaves(x) -> CausesObjectToMoveInSameDirectionOfWaves(x))", "all x.(LanguageWaves(x) -> CausesObjectToMoveInSameDirection(x))", "all x y.((LanguageWaves(x) & Object(y)) -> CausesMovementInSameDirection(y,x))", "all x y.((LongitudinalWaves(x) & Object(y)) -> MovesInSameDirection(y,x))", "all x y.((LanguageWaves(x) & Object(y)) -> CausesToMoveInSameDirection(y,x))", "all x y z.((LanguageWaves(x) & Object(y) & DirectionOfWaves(z)) -> CausesMovementInSameDirection(y,z))", "all x y.((LanguageWaves(x) & Object(y)) -> MovesInSameDirection(x,y))", "all x y.((LanguageWaves(x) & Object(y)) -> MovesInSameDirectionOfWaves(y,x))", "all x y z.((LanguageWaves(x) & Object(y) & DirectionOfWaves(z)) -> CausesToMoveInSameDirection(y,z))", "all x y z.((LanguageWaves(x) & Object(y) & DirectionOfWaves(z)) -> CausesMovement(y,z))", "all x y.((LanguageWaves(x) & Object(y)) -> CausesMovementInSameDirection(x,y))", "all x y.((LanguageWaves(x) & Object(y)) -> CausesMovement(x,y))", "all x y.((LanguageWaves(x) & Object(y)) -> CausesToMoveInSameDirection(x,y))", "all x y.((LengthlessWaves(x) & Object(y)) -> MovesInSameDirection(y,x))"]}
{"id": "entailmentbank_validation_302", "nl": "compression waves cause object to move in the same direction of the wave.", "fol": "", "prediction": ["all x y.((CompressionWaves(x) & Object(y)) -> MovesInSameDirection(y,x))", "all x y.((CompressionWaves(x) & Object(y)) -> MoveInSameDirection(y,x))", "all x.(CompressionWaves(x) -> CausesObjectToMoveInSameDirection(x))", "all x y.((CompressionWaves(x) & Object(y)) -> MovesInSameDirection(x,y))", "all x.(CompressionWaves(x) -> CausesObjectToMoveInSameDirectionOfWaves(x))", "all x y.((CompressionWaves(x) & Object(y)) -> CausesToMoveInSameDirection(x,y))", "all x y.((CompressionWaves(x) & Object(y)) -> MoveInSameDirection(x,y))", "all x y z.((CompressionWaves(x) & Object(y) & Direction(z)) -> MovesInSameDirection(y,z))", "all x y.((CompressionWaves(x) & Object(y)) -> MovesInSameDirectionOfWaves(y,x))", "all x y.((CompressionWaves(x) & Object(y)) -> CausesToMoveInSameDirection(y,x))", "all x y.((CompressionWaves(x) & Object(y)) -> MovesInSameDirectionOfWaves(x,y))", "all x y.((CompressionWaves(x) & Object(y)) -> CausesMovementInSameDirection(x,y))", "all x y.((CompressionWaves(x) & Object(y)) -> CausesToMoveInSameDirectionOfWaves(x,y))", "all x y.((CompressionWaves(x) & Object(y)) -> CausesMovementInSameDirection(y,x))", "all x y.((CompressionWaves(x) & Object(y)) -> CausesMovement(x,y))", "all x y.((CompressionWaves(x) & Object(y)) -> MoveInSameDirectionOfWaves(y,x))"]}
{"id": "entailmentbank_validation_303", "nl": "a surface is a part of an object.", "fol": "", "prediction": ["all x y.((Surface(x) & Object(y)) -> PartOf(x,y))", "all x.(Surface(x) -> PartOfObject(x))", "all x y z.((Surface(x) & Object(y) & PartOf(x,y)) -> PartOf(x,z))", "all x y.((Surface(x) & Object(y) & PartOf(x,y)) -> PartOf(x,y))", "all x y z.((Surface(x) & Object(y) & Object(z)) -> PartOf(x,y,z))", "all x y z.((Surface(x) & Object(y) & PartOf(x,y)) -> PartOf(x,y))", "all x y z.((Surface(x) & Object(y) & Surface(z)) -> PartOf(x,y,z))", "all x y z.((Surface(x) & Object(y) & Material(z)) -> PartOf(x,y,z))", "all x.((Surface(x) & PartOfObject(x)) -> PartOfObject(x))", "all x y z.((Surface(x) & Object(y) & Object(z) & PartOf(x,y,z)) -> PartOf(x,y,z))", "all x y z.((Surface(x) & Object(y) & PartOf(x,y) & Object(z)) -> PartOf(x,z))", "exists x y.(Surface(x) & Object(y) & PartOf(x,y))", "all x y z.((Surface(x) & Object(y) & PartOf(x,y) & PartOf(x,z)) -> PartOf(x,y))", "all x y z.((Surface(x) & Object(y) & Object(z) & PartOf(x,y,z)) -> PartOf(x,y))", "all x y z.((Surface(x) & Object(y) & Surface(z) & PartOf(x,y,z)) -> PartOf(x,y))", "all x y z.((Surface(x) & Object(y) & Substance(z)) -> PartOf(x,y,z))"]}
{"id": "entailmentbank_validation_304", "nl": "friction occurs when two object's surfaces move against each other.", "fol": "", "prediction": ["all x y.((Object(x) & Surface(y) & MovesAgainst(x,y)) -> FrictionOccurs(x))", "all x y.((Object(x) & Surface(y) & MoveAgainst(x,y)) -> FrictionOccurs(x))", "all x y.((Object(x) & Surface(y) & MoveAgainst(x,y)) -> FrictionOccurs(x,y))", "all x y.((Object(x) & Surface(y) & MovesAgainst(x,y)) -> FrictionOccurs(x,y))", "all x y z.((Object(x) & Surface(y) & Surface(z)) -> MovesAgainst(x,y,z))", "all x y z.((Object(x) & Surface(y) & Surface(z) & MoveAgainst(x,y,z)) -> FrictionOccurs(x))", "all x y z.((Object(x) & Surface(y) & Surface(z) & MoveAgainst(x,y,z)) -> FrictionOccurs(x,y,z))", "all x y z.((Object(x) & Surface(y) & Surface(z) & MovesAgainst(x,y,z)) -> FrictionOccurs(x))", "all x y z.((Object(x) & Surface(y) & Surface(z) & MovesAgainst(x,y,z)) -> FrictionOccurs(x,y,z))", "all x y.((Object(x) & Surface(y) & MovesAgainst(x,y)) -> FrictionOccurs(x))", "all x y.((Object(x) & Surface(y) & MovesAgainst(x,y)) -> FrictionOf(x,y))", "all x y.((ObjectSurface(x) & Surface(y) & MoveAgainst(x,y)) -> FrictionOccurs(x))", "all x y.((ObjectSurface(x) & Surface(y) & MovesAgainst(x,y)) -> FrictionOccurs(x))", "all x y.((Object(x) & Surface(y) & MoveAgainst(x,y)) -> FrictionOf(x,y))", "all x y.((Object(x) & Surface(y)) -> MovesAgainst(x,y))", "all x y z.((Object(x) & Surface(y) & Surface(z) & MoveAgainst(y,z)) -> FrictionOccurs(x,y,z))"]}
{"id": "entailmentbank_validation_305", "nl": "skidding is when the tire of a vehicle slides on the road without rotating.", "fol": "", "prediction": ["all x y.((Vehicle(x) & Tire(y) & SlidesOnRoad(y,x)) -> Skidding(x))", "all x.(Skidding(x) -> (TireSlidesOnRoad(x) & -Rotating(x)))", "all x y z.((Vehicle(x) & Tire(y) & Road(z) & SlidesOn(y,z)) -> -Rotating(y,z))", "all x y.((Tire(x) & Vehicle(y) & SlidesOnRoad(x,y)) -> Skidding(x))", "all x.(Skidding(x) -> (TireOfVehicle(x) & SlidesOnRoad(x) & -Rotating(x)))", "all x y.((Vehicle(x) & Tire(y) & SlidesOnRoad(y,x) & -Rotating(y)) -> Skidding(x))", "all x.(Skidding(x) -> (TireSlidsOnRoad(x) & -Rotating(x)))", "all x y.((Vehicle(x) & Tire(y) & SlidesOnRoad(y) & -Rotating(y)) -> Skidding(x))", "all x y.((Vehicle(x) & Tire(y) & SlidesOnRoad(y,x)) -> Skidding(x,y))", "all x.(Skidding(x) -> (TireSlidesOnRoad(x) & -Rotating(x)))", "all x y.((Vehicle(x) & Tire(y) & SlidesOnRoad(y) & -Rotating(y)) -> Skidding(x,y))", "all x y z.((Vehicle(x) & Tire(y) & Road(z) & SlidesOn(y,z) & -Rotating(y,z)) -> Skidding(x))", "all x y.((Vehicle(x) & Tire(y) & SlidesOnRoadWithoutRotating(y,x)) -> Skidding(x))", "all x y.((Vehicle(x) & Tire(y)) -> SlidesOnRoad(y,x))", "all x y.((Tire(x) & Vehicle(y) & SlidesOnRoad(x,y) & -Rotating(x)) -> Skidding(x))", "all x y.((Vehicle(x) & Tire(y) & SlidesOnRoadWithoutRotating(y)) -> Skidding(x))"]}
{"id": "entailmentbank_validation_306", "nl": "a tire is a kind of object.", "fol": "", "prediction": ["all x.(Tire(x) -> Object(x))", "all x.(Tire(x) -> Object(x))", "all x.(Tire(x) -> ArtOfObject(x))", "all x y.((Tire(x) & Object(y)) -> Object(x))", "all x y.((Tire(x) & Object(y)) -> Object(x,y))", "all x.(Tire(x) -> IsObject(x))", "all x y.((Tire(x) & Object(y)) -> Is(x,y))", "all x.(Tire(x) -> TypeOfObject(x))", "all x.(Tire(x) -> (Object(x) & Object(x)))", "all x.(Tire(x) -> SortOfObject(x))", "all x y.((Tire(x) & Object(y)) -> SortOf(x,y))", "all x y.((Tire(x) & Object(y)) -> TypeOf(x,y))", "all x y.((Tire(x) & Object(y)) -> ArtOf(x,y))", "all x y.((Tire(x) & Object(y)) -> KindOf(x,y))", "exists x.(Tire(x) & Object(x))", "all x.(Tire(x) -> KindOfObject(x))"]}
{"id": "entailmentbank_validation_307", "nl": "skidding causes friction between the tire and the road.", "fol": "", "prediction": ["all x y z.((Skidding(x) & Tire(y) & Road(z)) -> CausesFriction(x,y,z))", "all x y.((Skidding(x) & Tire(y)) -> CausesFriction(x,y))", "all x.(Skidding(x) -> CausesFrictionBetweenTireAndRoad(x))", "all x y z.((Skid(x) & Tire(y) & Road(z)) -> CausesFriction(x,y,z))", "all x y.((Skidding(x) & Tire(y) & Road(y)) -> CausesFriction(x,y))", "all x y z.((Skidding(x) & Tire(y) & Road(z)) -> CausesFrictionBetween(x,y,z))", "all x y.((Skidding(x) & Tire(y) & Road(z)) -> CausesFriction(x,y,z))", "all x y.((Skidding(x) & Tire(y)) -> CausesFrictionBetween(x,y))", "all x y z.((Skidding(x) & Tire(y) & Road(z) & CausesFriction(x,y,z)) -> CausesFriction(x,y,z))", "all x.(Skidding(x) -> CausesFriction(x,Tire,Road))", "all x y z.((Skid(x) & Tire(y) & Road(z)) -> CausesFrictionBetween(x,y,z))", "all x y.((Skidding(x) & Tire(y) & Road(z)) -> CausesFrictionBetween(x,y,z))", "all x y z w.((Skidding(x) & Tire(y) & Road(z)) -> CausesFriction(x,y,z))", "all x y.((Skidding(x) & Tire(y) & Road(y)) -> CausesFrictionBetween(x,y))", "all x y z w.((Skidding(x) & Tire(y) & Road(z) & CausesFriction(x,y,z)) -> CausesFriction(x,y,z))", "all x.(Skidding(x) -> CausesFriction(x))"]}
{"id": "entailmentbank_validation_308", "nl": "friction causes the temperature of an object to increase.", "fol": "", "prediction": ["all x y.((Friction(x) & Object(y)) -> IncreasesTemperature(x,y))", "all x y.((Friction(x) & Object(y)) -> CausesTemperatureToIncrease(x,y))", "all x y.((Friction(x) & Object(y)) -> CausesTemperatureIncrease(x,y))", "all x y.((Friction(x) & Object(y)) -> TemperatureIncrease(x,y))", "all x y z.((Friction(x) & Object(y) & Temperature(z)) -> CausesToIncrease(x,y,z))", "all x y.((Friction(x) & Object(y)) -> IncreasedTemperature(x,y))", "all x.((Friction(x) & Object(y)) -> IncreasesTemperature(x,y))", "all x y.((Friction(x) & Object(y)) -> CausesTemperature(x,y))", "all x y z.((Friction(x) & Object(y) & Temperature(z)) -> Increases(y,z))", "all x.(Friction(x) -> CausesTemperatureToIncrease(x))", "all x y z.((Friction(x) & Object(y) & Temperature(z)) -> CausesToIncrease(y,z))", "all x.((Friction(x) & Object(y)) -> CausesTemperatureToIncrease(x,y))", "all x y z.((Friction(x) & Object(y) & Temperature(z)) -> Increases(x,y,z))", "all x.((Friction(x) & Object(y)) -> TemperatureIncrease(x,y))", "all x y.((Friction(x) & Object(y)) -> IncreasesTemperature(y))", "all x.((Friction(x) & Object(y)) -> CausesTemperatureIncrease(x,y))"]}
{"id": "entailmentbank_validation_309", "nl": "friction causes the temperature of the tire to increase.", "fol": "", "prediction": ["all x y.((Tire(x) & Friction(y)) -> IncreasesTemperature(x,y))", "all x y.((Tire(x) & Friction(y)) -> TemperatureIncrease(x,y))", "all x y.((Tire(x) & Friction(y)) -> CausesTemperatureToIncrease(x,y))", "all x y.((Tire(x) & Friction(y)) -> IncreasedTemperature(x,y))", "all x y.((Tire(x) & Friction(y)) -> CausesTemperatureIncrease(x,y))", "all x.((Tire(x) & Friction(x)) -> TemperatureIncrease(x))", "all x y z.((Tire(x) & Friction(y) & Temperature(z)) -> CausesToIncrease(x,y,z))", "all x y.((Tire(x) & Friction(y)) -> TemperatureIncrease(y,x))", "all x.(Friction(x) -> CausesTemperatureToIncrease(x))", "all x.((Tire(x) & Friction(x)) -> IncreasesTemperature(x))", "all x y.((Tire(x) & Friction(y)) -> CausesTemperatureToIncrease(y,x))", "all x y z.((Tire(x) & Friction(y) & Temperature(z)) -> Increases(x,y,z))", "all x y z.((Tire(x) & Friction(y) & Temperature(z)) -> Increases(x,z))", "all x y z.((Tire(x) & Friction(y) & Temperature(z)) -> CausesToIncrease(x,z))", "all x y z.((Tire(x) & Friction(y) & Temperature(z)) -> CausesToIncrease(y,z))", "all x y.((Tire(x) & Friction(y)) -> CausesTemperatureIncrease(y,x))"]}
{"id": "entailmentbank_validation_310", "nl": "if the tire overheats, some chemical in the tire will vaporized.", "fol": "", "prediction": ["all x.((Tire(x) & Overheats(x)) -> Vaporized(x))", "all x.((Tire(x) & Overheats(x)) -> ChemicalInTireVaporized(x))", "all x.((Tire(x) & Overheats(x)) -> (ChemicalInTire(x) & Vaporized(x)))", "all x.((TireOverheats(x) & ChemicalInTire(x)) -> Vaporized(x))", "all x y.((Tire(x) & Overheats(x)) -> (ChemicalInTire(y) & Vaporized(y)))", "all x.((Tire(x) & Overheats(x)) -> ChemicalInTire(x))", "all x y.((Tire(x) & Overheats(x)) -> Vaporized(y))", "all x.((Tire(x) & Overheats(x)) -> ChemicalVaporized(x))", "all x.((Tire(x) & Overheats(x)) -> Chemical(x))", "all x y.((Tire(x) & Overheats(x)) -> ChemicalInTire(y))", "all x.((Tire(x) & Overheats(x)) -> SomeChemicalInTire(x))", "all x y.((Tire(x) & Overheats(x)) -> Chemical(y))", "all x y.((Tire(x) & Overheats(x) & Chemical(y)) -> Vaporized(y))", "all x y z.((Tire(x) & Overheats(x) & Chemical(y) & Tire(z)) -> Vaporized(y,z))", "all x y.((Tire(x) & Tire(y) & Overheats(x)) -> Vaporized(y))", "all x y z.((Tire(x) & Overheats(x) & Chemical(y) & Tire(z)) -> Vaporized(y))"]}
{"id": "entailmentbank_validation_311", "nl": "if the temperature of the tire keeps increasing, the tire will overheat.", "fol": "", "prediction": ["all x.((Tire(x) & KeepsIncreasingTemperature(x)) -> Overheats(x))", "all x.((Tire(x) & KeepsIncreasingTemperature(x)) -> Overheat(x))", "all x.((Tire(x) & KeepsIncreasingTemperature(x)) -> Overheats(x))", "all x.((Tire(x) & KeepsIncreasingTemperature(x)) -> Overheat(x))", "all x.((Tire(x) & KeepsIncreasingTemperature(x)) -> WillOverheat(x))", "all x.((Tire(x) & TemperatureIncreasing(x)) -> Overheat(x))", "all x.((Tire(x) & TemperatureIncreasing(x)) -> Overheats(x))", "all x.((Tire(x) & TemperatureIncreases(x)) -> Overheats(x))", "all x.((Tire(x) & TemperatureIncreases(x)) -> TireOverheats(x))", "all x y.((Tire(x) & Temperature(y) & KeepsIncreasing(x,y)) -> Overheats(x))", "all x.((Tire(x) & TemperatureIncreasing(x)) -> TireOverheats(x))", "all x.((Tire(x) & ContinuesToIncreaseTemperature(x)) -> Overheats(x))", "all x.((Tire(x) & TemperatureIncreases(x)) -> Overheat(x))", "all x.((Tire(x) & IncreasesTemperature(x)) -> Overheats(x))", "all x.((Tire(x) & IncreasedTemperature(x)) -> Overheat(x))", "all x y.((Tire(x) & Temperature(y) & KeepsIncreasing(x,y)) -> Overheat(x))"]}
{"id": "entailmentbank_validation_312", "nl": "if the temperature of the tire keeps increasing, some chemical in the tire will be vaporized.", "fol": "", "prediction": ["all x.((Tire(x) & KeepsIncreasingTemperature(x)) -> Vaporized(x))", "all x.((TireTemperature(x) & KeepsIncreasing(x)) -> Vaporized(x))", "all x.((Tire(x) & KeepsIncreasingTemperature(x)) -> Vaporized(x))", "all x y.((Tire(x) & TemperatureIncreasing(x) & ChemicalInTire(y)) -> Vaporized(y))", "all x y z.((Tire(x) & Temperature(y) & Chemical(z) & KeepsIncreasing(x,y)) -> Vaporized(z))", "all x y z.((Tire(x) & Temperature(y) & Chemical(z) & KeepsIncreasing(x,y)) -> Vaporized(z))", "all x y.((Tire(x) & Temperature(y) & KeepsIncreasing(x,y)) -> Vaporized(x))", "all x.((Tire(x) & TemperatureIncreases(x)) -> Vaporized(x))", "all x.((TireTemperature(x) & KeepsIncreasing(x)) -> Vaporized(x))", "all x.((Tire(x) & TemperatureIncreasing(x)) -> Vaporized(x))", "all x y.((Tire(x) & TireTemperature(y) & KeepsIncreasing(x,y)) -> Vaporized(x))", "all x.((Tire(x) & KeepsIncreasingTemperature(x)) -> VaporizedChemical(x))", "all x y z.((Tire(x) & Temperature(y) & Chemical(z) & KeepsIncreasing(x)) -> Vaporized(z))", "all x y z.((Tire(x) & Temperature(y) & Chemical(z) & KeepsIncreasing(x,y)) -> Vaporized(z,y))", "all x y.((Tire(x) & TemperatureIncreasing(x)) -> Vaporized(y))", "all x.((Tire(x) & IncreasedTemperature(x)) -> Vaporized(x))"]}
{"id": "entailmentbank_validation_313", "nl": "friction causes some chemicals in the tire to vaporize.", "fol": "", "prediction": ["all x y.((Friction(x) & Tire(y)) -> CausesChemicalsToVaporize(x,y))", "all x y.((Tire(x) & Chemical(y)) -> CausesToVaporize(x,y))", "all x y z.((Friction(x) & Chemical(y) & Tire(z)) -> CausesToVaporize(x,y,z))", "all x y.((Tire(x) & Chemicals(y)) -> CausesToVaporize(x,y))", "all x y.((Tire(x) & Chemical(y)) -> CausesToVaporize(y,x))", "all x y.((Friction(x) & Tire(y)) -> CausesToVaporize(x,y))", "all x y z.((Friction(x) & Tire(y) & Chemical(z)) -> CausesToVaporize(x,y,z))", "all x y.((Tire(x) & Friction(y)) -> CausesChemicalsToVaporize(y,x))", "all x.(Friction(x) -> CausesChemicalsToVaporize(x))", "all x y.((Tire(x) & Friction(y)) -> CausesChemicalsToVaporize(x,y))", "all x y z.((Friction(x) & Tire(y) & Chemicals(z)) -> CausesToVaporize(x,y,z))", "all x.(Friction(x) -> CausesChemicalsInTireToVaporize(x))", "all x y z.((Tire(x) & Chemical(y) & Friction(z)) -> CausesToVaporize(x,y,z))", "all x y z.((Friction(x) & Chemical(y) & Tire(z)) -> CausesToVaporize(y,z))", "all x y z.((Friction(x) & Tire(y) & Chemical(z)) -> CausesToVaporize(x,z))", "all x y.((Tire(x) & Chemical(y)) -> CausesVaporization(x,y))"]}
{"id": "entailmentbank_validation_314", "nl": "vaporizing a substance causes smoke.", "fol": "", "prediction": ["all x y.((Substance(x) & Vaporizing(x,y)) -> CausesSmoke(x))", "all x.((Substance(x) & Vaporizes(x)) -> CausesSmoke(x))", "all x y.((Substance(x) & Vaporizing(x,y)) -> CausesSmoke(y))", "all x y.((Substance(x) & Vaporizes(x,y)) -> CausesSmoke(x))", "all x y.((Substance(x) & Vaporizing(x,y)) -> CausesSmoke(x,y))", "all x y.((Substance(x) & Vaporizing(x)) -> CausesSmoke(y))", "all x y z.((Substance(x) & Vaporizing(x,y) & Substance(z)) -> CausesSmoke(x,z))", "all x y.((Substance(x) & Vaporize(x,y)) -> CausesSmoke(x))", "all x.(VaporizingSubstance(x) -> CausesSmoke(x))", "all x y.((Substance(x) & Vaporizing(x)) -> CausesSmoke(x))", "all x.((Substance(x) & Vaporize(x)) -> CausesSmoke(x))", "all x y.((Substance(x) & Vaporizing(x)) -> CausesSmoke(x,y))", "all x y.((Substance(x) & Vaporizing(y)) -> CausesSmoke(x,y))", "all x y.((Substance(x) & Vaporizes(x,y)) -> CausesSmoke(y))", "all x y z.((Substance(x) & Vaporizing(y) & Substance(z)) -> CausesSmoke(x,y,z))", "all x.((Substance(x) & Vaporizing(x)) -> CausesSmoke(x))"]}
{"id": "entailmentbank_validation_315", "nl": "friction causes the tire to produce smoke.", "fol": "", "prediction": ["all x y.((Tire(x) & Friction(y)) -> ProducesSmoke(x,y))", "all x.(Friction(x) -> CausesTireToProduceSmoke(x))", "all x y z.((Tire(x) & Friction(y) & Smoke(z)) -> Produces(x,y,z))", "all x.((Tire(x) & Friction(x)) -> ProducesSmoke(x))", "all x y z.((Tire(x) & Friction(y) & Smoke(z)) -> CausesToProduce(x,y,z))", "all x y.((Tire(x) & Friction(y)) -> CausesToProduceSmoke(x,y))", "all x y.((Tire(x) & Friction(y)) -> ProducesSmoke(x))", "all x.(Friction(x) -> ProducesSmoke(x))", "all x.((Tire(x) & FrictionCausesToProduceSmoke(x)) -> ProducesSmoke(x))", "all x y.((Tire(x) & Friction(y) & CausesToProduceSmoke(x,y)) -> ProducesSmoke(x))", "all x y.((Tire(x) & Friction(y) & CausesSmoke(x,y)) -> Produces(x,y))", "all x y.((Tire(x) & Friction(y) & CausesToProduceSmoke(x,y)) -> ProducesSmoke(x,y))", "all x.(Tire(x) -> ProducesSmoke(x))", "all x y.((Tire(x) & Friction(x) & Smoke(y)) -> Produces(x,y))", "all x y.((Tire(x) & Tire(y)) -> ProducesSmoke(x,y))", "all x y.((Tire(x) & Friction(y)) -> CausesSmoke(x,y))"]}
{"id": "entailmentbank_validation_316", "nl": "as the friction increases, the resistance on the object to move will increase.", "fol": "", "prediction": ["all x y.((Friction(x) & Object(y) & IncreasedFriction(x)) -> IncreasedResistance(y))", "all x y.((Friction(x) & Object(y)) -> IncreasesResistance(x,y))", "all x y.((Friction(x) & Object(y)) -> IncreasedResistance(x,y))", "all x y.((Friction(x) & Object(y) & IncreasedFriction(x)) -> IncreasedResistance(x,y))", "all x y.((Friction(x) & Object(y) & Increases(x,y)) -> IncreasesResistance(x,y))", "all x.((Friction(x) & Increases(x)) -> IncreasesResistanceOnObjectToMove(x))", "all x.((FrictionIncreases(x) & IncreasedResistanceOnObject(x)) -> IncreasedResistanceOnObject(x))", "all x.((FrictionIncreases(x) & IncreasesResistanceOnObject(x)) -> IncreasesResistanceOnObject(x))", "all x y.((Friction(x) & Object(y)) -> IncreasesResistanceOnMovement(x,y))", "all x y.((Friction(x) & Object(y) & IncreasesFriction(x,y)) -> IncreasesResistance(x,y))", "all x.((Friction(x) & Increases(x)) -> IncreasesResistance(x))", "all x y.((Friction(x) & Object(y) & IncreasedFriction(x)) -> IncreasedResistanceOnMovement(x,y))", "all x y.((Friction(x) & Object(y) & Increases(x,y)) -> IncreasesResistanceOnMovement(x,y))", "all x y.((Friction(x) & Object(y) & IncreasesFriction(x)) -> IncreasesResistanceOnMovement(x,y))", "all x y.((Friction(x) & Object(y) & IncreasedFriction(x)) -> IncreasedResistance(y,x))", "all x y.((Friction(x) & Object(y) & IncreasesFriction(x)) -> IncreasesResistance(y))"]}
{"id": "entailmentbank_validation_317", "nl": "as roughness of a surface increases, friction will increase.", "fol": "", "prediction": ["all x y.((Roughness(x) & Surface(y) & Increases(x,y)) -> IncreasesFriction(x))", "all x y.((Surface(x) & Surface(y) & IncreasesRoughness(x,y)) -> IncreasesFriction(x))", "all x y.((Roughness(x) & Surface(y)) -> IncreasesFriction(x,y))", "all x y.((Surface(x) & Surface(y) & IncreasesRoughness(x,y)) -> IncreasesFriction(x,y))", "all x y.((Roughness(x) & Surface(y) & Increases(x,y)) -> FrictionIncreases(x))", "all x y.((Roughness(x) & Surface(y) & Increases(x,y)) -> IncreasesFriction(x,y))", "all x y.((Roughness(x) & Surface(y) & Increased(x,y)) -> IncreasedFriction(x))", "all x.((Surface(x) & IncreasedRoughness(x)) -> IncreasedFriction(x))", "all x y.((Surface(x) & Surface(y) & IncreasedRoughness(x,y)) -> IncreasedFriction(x))", "all x.((Surface(x) & IncreasesRoughness(x)) -> IncreasesFriction(x))", "all x y.((Surface(x) & Roughness(y) & Increases(x,y)) -> FrictionIncreases(x))", "all x y z.((Roughness(x) & Surface(y) & Friction(z)) -> Increases(x,y,z))", "all x y.((Surface(x) & Surface(y) & IncreasedRoughness(x,y)) -> IncreasedFriction(x,y))", "all x y.((Roughness(x) & Surface(y) & Increases(x,y)) -> IncreasesFriction(y))", "all x y.((Roughness(x) & Surface(y)) -> IncreasesFriction(x))", "all x y z.((Roughness(x) & Surface(y) & Friction(z)) -> Increases(x,y))"]}
{"id": "entailmentbank_validation_318", "nl": "as the roughness of a surface increases, the resistance on the object to move will increase.", "fol": "", "prediction": ["all x y.((Roughness(x) & Surface(y) & Increases(x,y)) -> IncreasesResistance(x,y))", "all x y.((Roughness(x) & Surface(y) & Increases(x,y)) -> IncreasesResistanceOnMovement(x))", "all x y.((Surface(x) & Surface(y) & IncreasedRoughness(x,y)) -> IncreasedResistance(x,y))", "all x y.((Surface(x) & Surface(y) & IncreasesRoughness(x,y)) -> IncreasesResistance(x,y))", "all x y.((Roughness(x) & Surface(y) & Increases(x,y)) -> IncreasesResistanceOnObjectToMove(x))", "all x y.((Roughness(x) & Surface(y) & Increases(x,y)) -> IncreasedResistance(x,y))", "all x y.((Roughness(x) & Surface(y) & Increased(x,y)) -> IncreasedResistance(x,y))", "all x y.((Roughness(x) & Surface(y) & Increases(x,y)) -> IncreasesResistanceOnMovement(x,y))", "all x y.((Surface(x) & Surface(y) & IncreasesRoughness(x,y)) -> IncreasesResistanceOnMovement(x,y))", "all x y.((Roughness(x) & Surface(y) & Increases(x,y)) -> IncreasesResistanceOnObjectToMove(x,y))", "all x y.((Roughness(x) & Surface(y) & Increases(x,y)) -> IncreasesResistance(x))", "all x y.((Roughness(x) & Surface(y) & Increases(x,y)) -> IncreasesResistanceOnObject(x,y))", "all x y.((Roughness(x) & Surface(y) & Increases(x,y)) -> IncreasedResistance(x))", "all x y.((Roughness(x) & Surface(y) & Increases(x,y)) -> IncreasedResistanceOnObjectToMove(x))", "all x y.((Roughness(x) & Surface(y) & Increases(x,y)) -> IncreasedResistanceOnMovement(x))", "all x y.((Surface(x) & Surface(y) & IncreasesRoughness(x,y)) -> IncreasesResistanceOnMovement(x))"]}
{"id": "entailmentbank_validation_319", "nl": "carpet has a rough surface.", "fol": "", "prediction": ["all x.(Carpet(x) -> RoughSurface(x))", "all x.(Kitchen(x) -> RoughSurface(x))", "all x.(Carpet(x) -> HasRoughSurface(x))", "all x.(Kitchen(x) -> HasRoughSurface(x))", "all x.(Cedar(x) -> RoughSurface(x))", "all x.(Cedar(x) -> HasRoughSurface(x))", "all x.(Candle(x) -> RoughSurface(x))", "all x.(Marble(x) -> RoughSurface(x))", "all x.(Candle(x) -> HasRoughSurface(x))", "all x.(Marble(x) -> HasRoughSurface(x))", "all x y.((Kitchen(x) & Rug(y)) -> RoughSurface(x,y))", "all x y.((Kitchen(x) & Rug(y)) -> HasRoughSurface(x,y))", "all x y.((Kitchen(x) & Rug(y)) -> RoughSurface(x))", "all x y.((Kitchen(x) & Rug(y)) -> RoughSurface(y))", "all x.(Cathedral(x) -> RoughSurface(x))", "all x y.((Carpet(x) & Rug(y)) -> HasRoughSurface(x,y))"]}
{"id": "entailmentbank_validation_320", "nl": "wood has a smooth surface.", "fol": "", "prediction": ["all x.(Wood(x) -> SmoothSurface(x))", "all x.(Wood(x) -> HasSmoothSurface(x))", "all x.(Wooden(x) -> SmoothSurface(x))", "all x.(Wood(x) -> SmoothSurface(x))", "all x y.((Wood(x) & SmoothSurface(y)) -> Has(x,y))", "all x y.((Wood(x) & Surface(y)) -> Smooth(x,y))", "all x y.((Wood(x) & SmoothSurface(y)) -> Wood(x))", "all x y.((Wood(x) & Surface(y)) -> Smooth(x))", "all x.(Wood(x) & SmoothSurface(x))", "all x.((Wood(x) & SmoothSurface(x)) -> Wood(x))", "all x y z.((Wood(x) & Surface(y) & Surface(z)) -> Smooth(x,y,z))", "all x.((Wood(x) & SmoothSurface(x)) -> Has(x,y))", "all x.((Wood(x) & SmoothSurface(x)) -> Has(x,Wood))", "all x y.((Wood(x) & Wood(y)) -> SmoothSurface(x,y))", "all x y.((Wood(x) & Surface(y)) -> SmoothSurface(x,y))", "all x y z.((Wood(x) & Surface(y) & Surface(z)) -> Smooth(x,y))"]}
{"id": "entailmentbank_validation_321", "nl": "the resistance on the object to move on the carpet will be larger than on the wood.", "fol": "", "prediction": ["all x y.((Object(x) & Carpet(y) & Wood(y)) -> LargerResistance(x,y))", "all x y z.((Object(x) & Carpet(y) & Wood(z)) -> LargerResistance(x,y,z))", "all x y z.((Object(x) & Carpet(y) & Wood(z)) -> LargerResistanceOn(x,y,z))", "all x y.((Object(x) & Carpet(y) & Carpet(y)) -> LargerResistance(x,y))", "all x y.((Object(x) & Carpet(y) & Wood(y)) -> LargerResistanceOn(x,y))", "all x y.((Object(x) & Carpet(y)) -> LargerResistance(x,y))", "all x y z.((Object(x) & Carpet(y) & Wood(z)) -> LargerResistanceOnResistance(x,y,z))", "all x y.((Object(x) & Carpet(y) & Wood(y)) -> WiderResistance(x,y))", "all x y.((Object(x) & Carpet(y) & Wood(z)) -> LargerResistance(x,y,z))", "all x y.((Object(x) & Carpet(y)) -> LargerResistanceOnWood(x,y))", "all x y.((Object(x) & Carpet(y) & Object(x,y)) -> LargerResistance(x,y))", "all x y.((Object(x) & Carpet(y) & Wood(y)) -> LargerResistanceOnResistance(x,y))", "all x y.((Object(x) & Carpet(y) & Wood(y)) -> ResistanceLarger(x,y))", "all x y z.((Object(x) & Carpet(y) & Wood(z)) -> ResistanceLarger(x,y,z))", "all x y.((Object(x) & Carpet(y) & ResistantOn(x,y)) -> LargerThanWood(x))", "all x y.((Object(x) & Carpet(y) & ResistantOn(x,y)) -> LargerThanWood(x,y))"]}
{"id": "entailmentbank_validation_322", "nl": "a toy car is a kind of object.", "fol": "", "prediction": ["all x.(ToyCar(x) -> Object(x))", "all x.(ToyCar(x) -> ArtOfObject(x))", "all x.(ToyCar(x) -> IsObject(x))", "all x y.((ToyCar(x) & Object(y)) -> Object(x))", "all x.(ToyCar(x) -> (Object(x) & Object(x)))", "all x.((ToyCar(x) & Object(x)) -> Object(x))", "all x y.((ToyCar(x) & Object(y)) -> Is(x,y))", "all x y.((ToyCar(x) & Object(y)) -> Object(x,y))", "all x y.((ToyCar(x) & Object(y)) -> KindOf(x,y))", "all x.(ToyCar(x) -> KindOfObject(x))", "all x.(ToyCar(x) -> TypeOfObject(x))", "all x.(ToyCar(x) -> SortOfObject(x))", "all x y.((ToyCar(x) & Object(y)) -> ArtOf(x,y))", "all x.(ToyCar(x) -> Object(x))", "all x.(Tycar(x) -> Object(x))", "all x y.((ToyCar(x) & Object(y)) -> TypeOf(x,y))"]}
{"id": "entailmentbank_validation_323", "nl": "the resistance on the toy car to move on the carpet is larger than on the wood.", "fol": "", "prediction": ["all x y z.((ToyCar(x) & Carpet(y) & Wood(z)) -> LargerResistance(x,y,z))", "all x y z.((ToyCar(x) & Carpet(y) & Wood(z)) -> (ResistanceOnToyCar(x,y) & ResistanceOnWood(x,z)))", "all x y z.((ToyCar(x) & Carpet(y) & Wood(z)) -> LargerResistanceToMove(x,y,z))", "all x y z.((ToyCar(x) & Carpet(y) & Wood(z)) -> LargerResistanceToMoveOn(x,y,z))", "all x y.((ToyCar(x) & Carpet(y)) -> ResistanceLargerThanWood(x,y))", "all x y z.((ToyCar(x) & Carpet(y) & Wood(z)) -> (ResistanceOnToyCar(x,y) & ResistanceOnWood(x,z)))", "all x y z.((ToyCar(x) & Carpet(y) & Wood(z)) -> (ResistanceOn(x,y) & ResistanceOn(x,z)))", "all x y.((ToyCar(x) & Carpet(y)) -> LargerResistance(x,y))", "all x y.((ToyCar(x) & Carpet(y) & Wood(y)) -> LargerResistance(x,y))", "all x y.((ToyCar(x) & Wood(y)) -> LargerResistanceToMoveOnCarpet(x,y))", "all x y z.((ToyCar(x) & Carpet(y) & Wood(z)) -> LargerResistanceOnToyCar(x,y,z))", "all x y z.((ToyCar(x) & Carpet(y) & Wood(z)) -> (ResistanceOnToyCar(x,y) & ResistanceOnToyCar(x,z)))", "all x y.((ToyCar(x) & Carpet(y) & Wood(z)) -> LargerResistance(x,y,z))", "all x y z.((ToyCar(x) & Carpet(y) & Wood(z)) -> ResistanceLarger(x,y,z))", "all x y.((ToyCar(x) & Carpet(y) & Wood(y)) -> LargerResistanceToMove(x,y))", "all x y.((ToyCar(x) & Wood(y)) -> LargerResistance(x,y))"]}
{"id": "entailmentbank_validation_324", "nl": "as the resistance on the object to move increase, the object will move slower.", "fol": "", "prediction": ["all x.((Object(x) & IncreasedResistance(x)) -> MovesSlower(x))", "all x.((Object(x) & IncreasedResistanceOnMovement(x)) -> MovesSlower(x))", "all x.((Object(x) & IncreasedResistance(x)) -> MoveSlower(x))", "all x.((Object(x) & IncreasesResistanceOnMovement(x)) -> MovesSlower(x))", "all x.((Object(x) & IncreasesResistance(x)) -> MovesSlower(x))", "all x.((Object(x) & IncreasedResistanceOnMovement(x)) -> MoveSlower(x))", "all x y.((Object(x) & IncreasedResistance(x) & IncreasedResistance(y)) -> MovesSlower(x))", "all x.((Object(x) & IncreasedResistance(x)) -> SlowerMovement(x))", "all x y.((Object(x) & Resistance(y) & Increases(x,y)) -> MovesSlower(x))", "all x.((Object(x) & IncreasedResistance(x)) -> MovesSlowly(x))", "all x y.((Object(x) & IncreasedResistance(x) & IncreasedResistance(y)) -> MovesSlower(x,y))", "all x.((Object(x) & ResistanceIncrease(x)) -> MoveSlower(x))", "all x.((Object(x) & IncreasedResistanceOnMovement(x)) -> MovesSlowly(x))", "all x.((Object(x) & IncreasedResistanceToMove(x)) -> MovesSlower(x))", "all x.((Object(x) & ResistanceIncrease(x)) -> MovesSlower(x))", "all x y.((Object(x) & IncreasedResistance(x) & IncreasedResistance(x)) -> MovesSlower(x))"]}
{"id": "entailmentbank_validation_325", "nl": "the toy car will move slower on the carpet than on the wood.", "fol": "", "prediction": ["all x y.((ToyCar(x) & Carpet(y)) -> MovesSlowerOn(x,y))", "all x y.((ToyCar(x) & Carpet(y)) -> MovesSlower(x,y))", "all x y.((ToyCar(x) & Carpet(y)) -> MoveSlowerOn(x,y))", "all x y z.((ToyCar(x) & Carpet(y) & Wood(z)) -> MovesSlowerOn(x,y,z))", "all x y.((ToyCar(x) & Carpet(y) & Wood(y)) -> MovesSlower(x,y))", "all x y.((ToyCar(x) & Carpet(y) & Wood(y)) -> MovesSlowerOn(x,y))", "all x y z.((ToyCar(x) & Carpet(y) & Wood(z)) -> MovesSlower(x,y,z))", "all x y z.((ToyCar(x) & Carpet(y) & Wood(z)) -> MoveSlowerOn(x,y,z))", "all x y.((ToyCar(x) & Carpet(y)) -> MoveSlower(x,y))", "all x y.((ToyCar(x) & Carpet(y) & Wood(z)) -> MovesSlowerOn(x,y,z))", "all x y.((ToyCar(x) & Carpet(y) & Wood(y)) -> MoveSlowerOn(x,y))", "all x y.((ToyCar(x) & Carpet(y) & Wood(z)) -> MovesSlower(x,y,z))", "all x y.((ToyCar(x) & Carpet(y)) -> MovesSlowerOnWood(x,y))", "all x y.((ToyCar(x) & Carpet(y)) -> SlowerMovement(x,y))", "all x y z.((ToyCar(x) & Carpet(y) & Wood(z)) -> MoveSlower(x,y,z))", "all x y.((ToyCar(x) & Carpet(y) & Wood(y)) -> MoveSlower(x,y))"]}
{"id": "entailmentbank_validation_326", "nl": "a glider is a kind of object.", "fol": "", "prediction": ["all x.(Glider(x) -> Object(x))", "all x.(Glider(x) -> Object(x))", "all x.(Glider(x) -> ArtOfObject(x))", "all x.(Glider(x) -> Object(x))", "all x.(Glider(x) -> (Object(x) & Object(x)))", "all x.(Glider(x) -> TypeOfObject(x))", "all x.(Glider(x) -> IsObject(x))", "all x y.((Glider(x) & Object(y)) -> Object(x))", "all x.(Glider(x) -> SortOfObject(x))", "all x y.((Glider(x) & Object(y)) -> Is(x,y))", "all x y.((Glider(x) & Object(y)) -> TypeOf(x,y))", "all x y.((Glider(x) & Object(y)) -> Object(x,y))", "all x y.((Glider(x) & Object(y)) -> KindOf(x,y))", "all x y.((Glider(x) & Object(y)) -> SortOf(x,y))", "all x.(Glower(x) -> Object(x))", "all x.(Glider(x) -> ArtOfObject(x))"]}
{"id": "entailmentbank_validation_327", "nl": "flying an object requires lift to oppose the object's weight.", "fol": "", "prediction": ["all x y.((Flying(x) & Object(y)) -> RequiresLiftToOpposeWeight(x,y))", "all x y.((Flying(x) & Object(y) & RequiresLift(x,y)) -> OpposesWeight(x,y))", "all x.((FlyingObject(x) & RequiresLift(x)) -> OpposesWeight(x))", "all x y.((Flying(x) & Object(y)) -> RequiresLift(x,y))", "all x.(FlyingObject(x) -> RequiresLiftToOpposeWeight(x))", "all x y z.((Flying(x) & Object(y) & Lift(z)) -> RequiresToOpposeWeight(x,y,z))", "all x y.((Flying(x) & Object(y) & RequiresLift(x,y)) -> OpposesWeight(y,x))", "all x.((Object(x) & RequiresLift(x)) -> OpposesWeight(x))", "all x.((Flying(x) & RequiresLift(x)) -> OpposesWeight(x))", "all x y z.((FlyingObject(x) & Lift(y) & Weight(z)) -> RequiresToOppose(x,y,z))", "all x y z.((Flying(x) & Object(y) & Lift(z)) -> RequiresToOpposeWeight(y,z))", "all x y.((Flying(x) & Object(y)) -> RequiresLiftToOpposeWeight(y,x))", "all x y.((FlyingObject(x) & Weight(y)) -> RequiresLiftToOppose(x,y))", "all x y.((FlyingObject(x) & RequiresLift(x,y)) -> OpposesWeight(x,y))", "all x y.((Object(x) & RequiresLift(x,y)) -> OpposesWeight(x,y))", "all x y.((Flying(x) & Object(y) & RequiresLift(x,y)) -> OpposesWeight(y))"]}
{"id": "entailmentbank_validation_328", "nl": "flying a glider requires lift to oppose the weight of the glider.", "fol": "", "prediction": ["all x y.((Glider(x) & Glider(y)) -> RequiresLiftToOpposeWeight(x,y))", "all x y.((Glider(x) & Glider(y)) -> RequiresLift(x,y))", "all x y z.((Glider(x) & Glider(y) & Lift(z)) -> RequiresToOpposeWeight(x,y,z))", "all x y.((Glider(x) & Glider(y)) -> (RequiresLift(x,y) & OpposesWeight(x,y)))", "all x.((Glider(x) & RequiresLift(x)) -> OpposesWeight(x))", "all x y.((Glider(x) & Glider(y) & RequiresLift(x,y)) -> OpposesWeight(x,y))", "all x y z.((Glider(x) & Glider(y) & Weight(z)) -> RequiresLiftToOppose(x,y,z))", "all x y.((Glider(x) & Glider(y)) -> RequiresLiftToOpposeWeight(y,x))", "all x y z.((Glider(x) & Glider(y) & Lift(z) & Flying(x,y)) -> RequiresToOpposeWeight(x,y,z))", "all x y.((Glider(x) & Glider(y)) -> (RequiresLift(x,y) & OpposesWeight(y,x)))", "all x y z.((Glider(x) & Glider(y) & Lift(z)) -> RequiresToOpposeWeight(y,z))", "all x y.((Glider(x) & Glider(y)) -> RequiresLiftToObstacleWeight(x,y))", "all x y z.((Glider(x) & Glider(y) & Lift(z)) -> RequiresToObstacleWeight(x,y,z))", "all x.(Glider(x) -> (RequiresLift(x) & OpposesWeight(x)))", "all x y z.((Glider(x) & Glider(y) & Lift(z)) -> Requires(x,y,z))", "all x y z.((Glider(x) & Glider(y) & Weight(z)) -> RequiresLift(x,y,z))"]}
{"id": "entailmentbank_validation_329", "nl": "pedals are part of a bicycle for pedalling.", "fol": "", "prediction": ["all x.(Pedals(x) -> PartOfBicycle(x))", "all x.(Pedals(x) -> PartOfBicycleForPedaling(x))", "all x y.((Pedal(x) & Bicycle(y)) -> ForPedaling(x,y))", "all x y.((Pedal(x) & Bicycle(y)) -> PartOf(x,y))", "all x y.((Pedal(x) & Bicycle(y)) -> PartOfForPedaling(x,y))", "all x y.((Pedal(x) & Bicycle(y) & PartOf(x,y)) -> ForPedaling(x))", "all x.(Pedals(x) -> (PartOfBicycle(x) & ForPedaling(x)))", "all x y.((Pedal(x) & Bicycle(y) & PartOf(x,y)) -> ForPedaling(x,y))", "all x y z.((Pedal(x) & Bicycle(y) & Bicycle(z)) -> PartOfForPedaling(x,y,z))", "all x.(Pedals(x) -> ForPedaling(x))", "all x y z.((Pedal(x) & Bicycle(y) & Bicycle(z)) -> PartOf(x,y,z))", "all x y.((Pedals(x) & Bicycle(y)) -> ForPedaling(x,y))", "all x.(Pedal(x) -> PartOfBicycle(x))", "all x y.((Pedals(x) & Bicycle(y)) -> PartOfForPedaling(x,y))", "all x y.((Pedals(x) & Bicycle(y)) -> PartOf(x,y))", "all x y.((Pedal(x) & Bicycle(y) & ForPedaling(x,y)) -> PartOf(x,y))"]}
{"id": "entailmentbank_validation_330", "nl": "pedalling a bicycle requires moving the pedals in a circular motion.", "fol": "", "prediction": ["all x.(PedalingBicycle(x) -> RequiresMovingPedalsInCircularMotion(x))", "all x.(PedalingBicycle(x) -> RequiresCircularMotion(x))", "all x y.((Bicycle(x) & Bicycle(y)) -> RequiresCircularMotion(x,y))", "all x y.((Bicycle(x) & Bicycle(y)) -> RequiresMovingPedalsInCircularMotion(x,y))", "all x y.((Bicycle(x) & Bicycle(y)) -> MovesPedalsInCircularMotion(x,y))", "all x y.((Bicycle(x) & Bicycle(y)) -> (MovesPedalsInCircularMotion(x,y)))", "all x y.((Bicycle(x) & Bicycle(y)) -> (MovingPedals(x,y) & CircularMotion(x,y)))", "all x.(PedalingBicycle(x) -> MovesPedalsInCircularMotion(x))", "all x y.((Pedaling(x) & Bicycle(y)) -> RequiresCircularMotion(x,y))", "all x y.((Bicycle(x) & Bicycle(y)) -> (MovingPedalsInCircularMotion(x,y)))", "all x y.((Bicycle(x) & Bicycle(y)) -> (MovingPedals(x,y) & CircularMotion(x)))", "all x y.((Pedaling(x) & Bicycle(y)) -> RequiresMovingPedalsInCircularMotion(x,y))", "all x y.((Bicycle(x) & Bicycle(y)) -> (RequiresCircularMotion(x,y) & MovesPedals(x,y)))", "all x y.((PedalingBicycle(x) & Bicycle(y)) -> RequiresCircularMotion(x,y))", "all x y.((Bicycle(x) & Pedaling(y)) -> RequiresCircularMotion(x,y))", "all x y.((Bicycle(x) & Bicycle(y)) -> (MovesPedals(x,y) & CircularMotion(x,y)))"]}
{"id": "entailmentbank_validation_331", "nl": "the pedals are the part of a bicycle that moves in circular motion.", "fol": "", "prediction": ["all x y.((Pedals(x) & Bicycle(y)) -> MovesInCircularMotion(x,y))", "all x.(Pedals(x) -> MovesInCircularMotion(x))", "all x y.((Pedals(x) & Bicycle(y) & MovesInCircularMotion(x,y)) -> PartOf(x,y))", "all x y z.((Pedals(x) & Bicycle(y) & CircularMotion(z)) -> MovesIn(x,y,z))", "all x y z.((Pedals(x) & Bicycle(y) & CircularMotion(z)) -> PartOf(x,y,z))", "all x.(Pedals(x) -> (MovesInCircularMotion(x) & Bicycle(x)))", "all x y.((Pedals(x) & Bicycle(y) & MovesInCircularMotion(y)) -> PartOf(x,y))", "all x y.((Pedal(x) & Bicycle(y)) -> MovesInCircularMotion(x,y))", "all x y.((Pedals(x) & Bicycle(y) & MovesInCircularMotion(x,y)) -> MovesInCircularMotion(x,y))", "all x y.((Pedals(x) & Bicycle(y) & CircularMotion(y)) -> MovesIn(x,y))", "all x y.((Pedal(x) & Bicycle(y) & MovesInCircularMotion(x,y)) -> PartOf(x,y))", "all x y.((Pedals(x) & Bicycle(y) & MovesInCircularMotion(x)) -> PartOf(x,y))", "all x y z.((Pedals(x) & Bicycle(y) & CircularMotion(z)) -> Moves(x,y,z))", "all x y.((Pedals(x) & Bicycle(y) & MovesInCircularMotion(y,x)) -> PartOf(x,y))", "all x y.((Pedals(x) & Bicycle(y) & MovesInCircularMotion(x,y)) -> PartOfMovement(x,y))", "all x y.((Pedals(x) & Bicycle(y)) -> MovesInCircularMotion(y,x))"]}
{"id": "entailmentbank_validation_332", "nl": "north / northward is a kind of direction.", "fol": "", "prediction": ["all x.((North(x) & Northward(x)) -> Direction(x))", "all x.((North(x) | Northward(x)) -> Direction(x))", "all x.(North(x) -> Northward(x))", "all x.((North(x) & Northward(x)) -> Direction(x))", "all x y.((North(x) & Northward(y)) -> Direction(x))", "all x.((Direction(x) & North(x) & Northward(x)) -> Direction(x))", "all x y.((North(x) & Northward(y)) -> Direction(x,y))", "all x.((Direction(x) & North(x)) -> Northward(x))", "all x.((North(x) & Northward(x)) -> Direction(x))", "all x.((North(x) | Northward(x)) -> Direction(x))", "all x.((Nord(x) & Northward(x)) -> Direction(x))", "all x.((North(x) | Northward(x)) -> Direction(x))", "all x y.((North(x) & Northward(y)) -> Direction(x))", "all x.((Direction(x) & North(x)) -> North(x))", "all x.((North(x) & Northward(x)) -> Direction(x))", "all x.(North(x) -> Northward(x))"]}
{"id": "entailmentbank_validation_333", "nl": "velocity is a measure of a speed in a direction.", "fol": "", "prediction": ["all x.(Velocity(x) -> MeasuresSpeedInDirection(x))", "all x y.((Velocity(x) & Direction(y)) -> MeasuresSpeedInDirection(x,y))", "all x y.((Velocity(x) & Direction(y)) -> MeasuresSpeed(x,y))", "all x.(Vibration(x) -> MeasuresSpeedInDirection(x))", "all x y.((Vibration(x) & Direction(y)) -> MeasuresSpeedInDirection(x,y))", "all x.(Velocity(x) -> MeasuresSpeedInDirection(x))", "all x y.((Velocity(x) & Direction(y)) -> MeasuresSpeedIn(x,y))", "all x y z.((Velocity(x) & Direction(y) & Speed(z)) -> MeasuresInDirection(x,z))", "all x y z.((Velocity(x) & Direction(y) & Speed(z)) -> MeasuresInDirection(x,y,z))", "all x y z.((Velocity(x) & Speed(y) & Direction(z)) -> MeasuresIn(x,y,z))", "all x y z.((Velocity(x) & Direction(y) & Speed(z)) -> MeasuresIn(x,y,z))", "all x y z.((Vibration(x) & Speed(y) & Direction(z)) -> MeasuresIn(x,y,z))", "all x y.((Vibration(x) & Direction(y)) -> MeasuresSpeed(x,y))", "all x.(Velocity(x) -> (MeasuresSpeed(x) & InDirection(x)))", "all x y z.((Velocity(x) & Speed(y) & Direction(z)) -> MeasuresInDirection(x,y,z))", "all x y z.((Vibration(x) & Speed(y) & Direction(z)) -> MeasuresInDirection(x,y,z))"]}
{"id": "entailmentbank_validation_334", "nl": "40 m/s describes the speed of an object.", "fol": "", "prediction": ["all x.((Object(x) & Speed(x,40)) -> Description(x,40))", "all x.((Object(x) & Speed(x,40)) -> DescribesSpeed(x,40))", "all x y.((40M/s(x) & Object(y)) -> DefinesSpeed(x,y))", "all x.((Object(x) & Speed(x,40)) -> DefinesSpeed(x,40))", "all x y.((Fast(x,y) & Object(y)) -> Description(x,y))", "all x.(40M/s(x) -> DescribesSpeedOfObject(x))", "all x y.((40M/s(x) & Object(y)) -> DescribesSpeed(x,y))", "all x.((Object(x) & Speed(x,40)) -> Describes(x,40))", "all x y.((Object(x) & Object(y)) -> Description(x,y))", "all x.(40M/s(x) -> DefinesSpeedOfObject(x))", "all x y.((Object(x) & Object(y)) -> Speed(x,y))", "all x.((40M/s) & Object(x)) -> DefinesSpeed(x))", "all x.((40M/s) & Object(x)) -> DescribesSpeed(x))", "all x y.((Fast(x,y) & Object(y)) -> DescriptionOfSpeed(x,y))", "all x.((Object(x) & Speed(x,40)) -> Defines(x,40))", "all x.((40M/s) & Object(x)) -> DefinesSpeed(x,y))"]}
{"id": "entailmentbank_validation_335", "nl": "40 m/s north describes the velocity of an object.", "fol": "", "prediction": ["all x.((40M/sNorth(x) & Object(y)) -> DescribesVelocity(x,y))", "all x.((40M/sNorth(x) & Object(y)) -> DescriptionOfVelocity(x,y))", "all x.((40M/sNorth(x) & Object(y)) -> DefinesVelocity(x,y))", "all x y.((40M/sNorth(x) & Object(y)) -> DescribesVelocity(x,y))", "all x y.((40M/sNorth(x) & Object(y)) -> DescriptionOfVelocity(x,y))", "all x y.((40M/sNorth(x) & Object(y)) -> DefinesVelocity(x,y))", "all x y z.((40M/sNorth(x) & Object(y) & Object(z)) -> DescribesVelocity(x,y,z))", "all x.((40M/sNorth(x) & Object(y)) -> DescribesVibration(x,y))", "all x.((40M/sNorth(x) & Object(y)) -> DescriptionOfVibration(x,y))", "all x y z.((40M/sNorth(x) & Object(y) & Object(z)) -> DescriptionOfVelocity(x,y,z))", "all x y z.((40M/sNorth(x) & Object(y) & Object(z)) -> DefinesVelocity(x,y,z))", "all x y.((40M/sNorth(x) & Object(y)) -> DescribesVibration(x,y))", "all x y.((40M/sNorth(x) & Object(y)) -> DescriptionOfVibration(x,y))", "all x y.((Object(x) & Object(y) & 40M/sNorth(x)) -> DescribesVelocity(x,y))", "all x.((40M/sNorth(x) & Object(x)) -> DescribesVelocity(x))", "all x y z.((40M/sNorth(x) & Object(y) & Object(z)) -> DescribesVibration(x,y,z))"]}
{"id": "entailmentbank_validation_336", "nl": "inherited characteristics can deterimne the structure of an organism's anatomy.", "fol": "", "prediction": ["all x y.((EarnedCharacteristics(x) & Organism(y)) -> DeterimneStructure(x,y))", "all x y.((EarnedCharacteristics(x) & Organism(y)) -> CanDeterimneStructure(x,y))", "all x y.((EarnedCharacteristics(x) & Organism(y)) -> CanDeterimneAnatomy(x,y))", "all x y.((ErasedCharacteristics(x) & Organism(y)) -> DeterimneStructure(x,y))", "all x y.((EarnedCharacteristics(x) & Organism(y)) -> DeterimneAnatomy(x,y))", "all x y.((ErasedCharacteristics(x) & Organism(y)) -> CanDeterimneStructure(x,y))", "all x.(EarnedCharacteristics(x) -> DeterimneStructureOfOrganism(x))", "all x y z.((EarnedCharacteristics(x) & Organism(y) & Anatomy(z)) -> CanDeterimne(x,y,z))", "all x y.((ErinheritedCharacteristics(x) & Organism(y)) -> DeterimneStructure(x,y))", "all x.(EarnedCharacteristics(x) -> CanDeterimneAnatomy(x))", "all x y.((ErasedCharacteristics(x) & Organism(y)) -> CanDeterimneAnatomy(x,y))", "all x y z.((EarnedCharacteristics(x) & Organism(y) & Anatomy(z)) -> DeterimneStructure(x,y,z))", "all x y.((ErasedCharacteristics(x) & Organism(y)) -> DeterimneAnatomy(x,y))", "all x y.((EarnedCharacteristics(x) & Organism(y)) -> DeterimneStructureOfAnatomy(x,y))", "all x y.((ErinheritedCharacteristics(x) & Organism(y)) -> CanDeterimneStructure(x,y))", "all x.(EarnedCharacteristics(x) -> CanDeterimneStructureOfOrganism(x))"]}
{"id": "entailmentbank_validation_337", "nl": "the structure of an organism's anatomy is used to classify the organism into the appropriate taxonomic rank.", "fol": "", "prediction": ["all x y z.((Organism(x) & AnatomicStructure(y) & TaxonomicRank(z)) -> ClassifiedInto(x,y,z))", "all x y z.((Organism(x) & AnatomicStructure(y) & TaxonomicRank(z)) -> ClassifiesInto(x,y,z))", "all x y z.((Organism(x) & Anatomy(y) & TaxonomicRank(z)) -> ClassifiesInto(x,y,z))", "all x y.((Organism(x) & Anatomy(y)) -> ClassifiesIntoTaxonomicRank(x,y))", "all x y.((Organism(x) & Anatomy(y)) -> ClassifiesIntoAppropriateTaxonomicRank(x,y))", "all x y.((Organism(x) & AnatomicStructure(x) & TaxonomicRank(y)) -> ClassifiedInto(x,y))", "all x y.((Organism(x) & Anatomy(y) & Structure(x,y)) -> ClassifiesIntoTaxonomicRank(x,y))", "all x y.((Organism(x) & Anatomy(y) & Structure(x,y)) -> ClassifiesIntoAppropriateTaxonomicRank(x,y))", "all x y z.((Organism(x) & Anatomy(y) & Anatomy(z)) -> ClassifiesIntoTaxonomicRank(x,y,z))", "all x y.((Organism(x) & AnatomicStructure(y)) -> ClassifiedIntoTaxonomicRank(x,y))", "all x y.((Organism(x) & Anatomy(y) & Structure(x,y)) -> ClassifiedIntoTaxonomicRank(x,y))", "all x y.((Organism(x) & AnatomicStructure(y)) -> ClassifiesIntoAppropriateTaxonomicRank(x,y))", "all x y.((Organism(x) & Anatomy(y)) -> ClassifiedIntoTaxonomicRank(x,y))", "all x y.((Organism(x) & AnatomicStructure(y)) -> ClassifiesIntoTaxonomicRank(x,y))", "all x y z.((Organism(x) & Anatomy(y) & TaxonomicRank(z)) -> ClassifiedInto(x,y,z))", "all x y.((Organism(x) & AnatomicStructure(x) & TaxonomicRank(y)) -> ClassifiesInto(x,y))"]}
{"id": "entailmentbank_validation_338", "nl": "inherited characteristics can be used to classify an oganism into the apropriate taxonomic rank.", "fol": "", "prediction": ["all x y.((EarnedCharacteristics(x) & oganism(y)) -> ClassifiesIntoApropriateTaxonomicRank(x,y))", "all x.((Gaganist(x) & ErasedCharacteristics(x)) -> ClassifiesIntoApropriateTaxonomicRank(x))", "all x.((Gaganist(x) & ErasedCharacteristics(x)) -> ClassifiedIntoApropriateTaxonomicRank(x))", "all x y.((Gaganist(x) & ErasedCharacteristics(y)) -> ClassifiesIntoApropriateTaxonomicRank(x,y))", "all x y.((EarnedCharacteristics(x) & Gongan(y)) -> ClassifiesIntoApropriateTaxonomicRank(x,y))", "all x y.((EarnedCharacteristics(x) & Agnostic(y)) -> ClassifiesIntoApropriateTaxonomicRank(x,y))", "all x y.((EarnedCharacteristics(x) & Gonianism(y)) -> ClassifiesIntoApropriateTaxonomicRank(x,y))", "all x y.((EarnedCharacteristics(x) & oganism(y)) -> CanClassifyIntoApropriateTaxonomicRank(x,y))", "all x y.((EarnedCharacteristics(x) & oganism(y)) -> ClassifiesIntoApropriateTaxonomicRank(y,x))", "all x y.((Gaganist(x) & ErasedCharacteristics(x)) -> ClassifiesIntoApropriateTaxonomicRank(x,y))", "all x y.((EarnedCharacteristics(x) & Agninism(y)) -> ClassifiesIntoApropriateTaxonomicRank(x,y))", "all x y.((ErasedCharacteristics(x) & Agnostic(y)) -> ClassifiesIntoApropriateTaxonomicRank(x,y))", "all x y.((EarnedCharacteristics(x) & oganism(y)) -> ClassifiedIntoApropriateTaxonomicRank(x,y))", "all x y.((EarnedCharacteristics(x) & oganism(y)) -> ClassifyIntoApropriateTaxonomicRank(x,y))", "all x y.((EarnedCharacteristics(x) & Ogoninism(y)) -> ClassifiesIntoApropriateTaxonomicRank(x,y))", "all x.((Gaganist(x) & ErasedCharacteristics(x)) -> ClassifyIntoApropriateTaxonomicRank(x))"]}
{"id": "entailmentbank_validation_339", "nl": "genes are able to determine the inherited characteristics of a living thing.", "fol": "", "prediction": ["all x y.((Gene(x) & LivingThing(y)) -> DeterminesEarnedCharacteristics(x,y))", "all x y.((Gene(x) & LivingThing(y)) -> DeterminesHeritageCharacteristics(x,y))", "all x.(Genes(x) -> DeterminesEarnedCharacteristicsOfLivingThing(x))", "all x y z.((Gene(x) & LivingThing(y) & Gene(z)) -> DeterminesEarnedCharacteristics(x,y,z))", "all x y.((Genes(x) & LivingThing(y)) -> DeterminesEarnedCharacteristics(x,y))", "all x y.((Gene(x) & LivingThing(y)) -> DeterminesErasedCharacteristics(x,y))", "all x y.((Gene(x) & LivingThing(y)) -> DeterminesHereditaryCharacteristics(x,y))", "all x y z.((Gene(x) & LivingThing(y) & LivingThing(z)) -> DeterminesEarnedCharacteristics(x,y,z))", "all x y.((Gene(x) & LivingThing(y)) -> DeterminesEarnedCaracteristics(x,y))", "all x.(Genes(x) -> DeterminesEarnedCharacteristics(x))", "all x y z.((Gene(x) & LivingThing(y) & Gene(z)) -> DeterminesHeritageCharacteristics(x,y,z))", "all x y.((Genes(x) & LivingThing(y)) -> DeterminesHeritageCharacteristics(x,y))", "all x y z.((Gene(x) & LivingThing(y) & Gene(z)) -> DeterminesEarnedCharacteristics(x,y))", "all x y.((Gene(x) & LivingThing(y)) -> DeterminesEarnestCharacteristics(x,y))", "all x y z.((Gene(x) & LivingThing(y) & LivingThing(z)) -> DeterminesHeritageCharacteristics(x,y,z))", "all x y.((Gene(x) & LivingThing(y)) -> DeterminesElectedCharacteristics(x,y))"]}
{"id": "entailmentbank_validation_340", "nl": "genes can be used for classifying organisms.", "fol": "", "prediction": ["all x y.((Gene(x) & Organism(y)) -> Classifies(x,y))", "all x.(Gene(x) -> ClassifiesOrganisms(x))", "all x.(Gene(x) -> ClassifiesOrganism(x))", "all x y.((Gene(x) & Organism(y)) -> Classified(x,y))", "all x.(Gene(x) -> CanBeUsedForClassifyingOrganisms(x))", "all x y.((Gene(x) & Organism(y)) -> CanBeClassified(x,y))", "all x y z.((Gene(x) & Organism(y) & Organism(z)) -> Classifies(x,y,z))", "all x y.((Gene(x) & Organism(y)) -> CanBeUsedForClassifying(x,y))", "all x y.((Gene(x) & Organism(y)) -> Classify(x,y))", "all x y.((Gene(x) & Organism(y)) -> Classifying(x,y))", "all x y z.((Gene(x) & Organism(y) & Organism(z)) -> CanBeClassified(x,y,z))", "all x y z.((Gene(x) & Organism(y) & Organism(z)) -> Classified(x,y,z))", "all x.(Gene(x) -> ClassifiedOrganism(x))", "all x y.((Gene(x) & Organism(y)) -> ClassifiedFor(x,y))", "all x y z.((Gene(x) & Organism(y) & Gene(z)) -> Classifies(x,y,z))", "all x y.((Gene(x) & Organism(y)) -> CanBeUsedForClassification(x,y))"]}
{"id": "entailmentbank_validation_341", "nl": "genes are made of dna.", "fol": "", "prediction": ["all x.(Gene(x) -> MadeOfDna(x))", "all x.(Genes(x) -> MadeOfDna(x))", "all x y.((Gene(x) & Dna(y)) -> MadeOf(x,y))", "all x.(Gain(x) -> MadeOfDna(x))", "all x.(Gather(x) -> MadeOfDna(x))", "all x.((Gene(x) & MadeOfDna(x)) -> MadeOf(x,Dna))", "all x.(Gas(x) -> MadeOfDna(x))", "all x.(Ganes(x) -> MadeOfDna(x))", "all x.((Gene(x) & MadeOfDna(x)) -> MakesOf(x,Dna))", "all x.((Gene(x) & MadeOfDna(x)) -> MadeOf(x,dna))", "all x.((Gene(x) & MadeOfDna(x)) -> MadeOfDna(x))", "all x.((Gene(x) & MadeOfDna(x)) -> MakesOf(x,dna))", "all x.(Dna(x) -> MadeOfGenes(x))", "all x y.((Gene(x) & Dna(y)) -> MakesOf(x,y))", "all x.((Gene(x) & MadeOfDna(x)) -> Genes(x))", "all x.((Gene(x) & MadeOfDna(x)) -> MadeOf(x))"]}
{"id": "entailmentbank_validation_342", "nl": "dna can be used for classifying organisms.", "fol": "", "prediction": ["all x.(Dna(x) -> ClassifiesOrganisms(x))", "all x y.((Dna(x) & Organism(y)) -> Classifies(x,y))", "all x.(Dna(x) -> CanBeUsedForClassifyingOrganisms(x))", "all x y.((Dna(x) & Organism(y)) -> Classified(x,y))", "all x y.((Dna(x) & Organism(y)) -> CanBeClassified(x,y))", "all x.(Dna(x) -> ClassifyOrganisms(x))", "all x y z.((Dna(x) & Organism(y) & Organism(z)) -> Classifies(x,y,z))", "all x.(Dna(x) -> ClassifyingOrganisms(x))", "all x.(Dna(x) -> ClassifiedOrganisms(x))", "all x y.((Dna(x) & Organism(y)) -> Classifying(x,y))", "all x y z.((Dna(x) & Organism(y) & Organism(z)) -> CanBeClassified(x,y,z))", "all x y.((Dna(x) & Organism(y)) -> Classify(x,y))", "all x y z.((Dna(x) & Organism(y) & Organism(z)) -> Classified(x,y,z))", "all x y.((Dna(x) & Organism(y)) -> CanClassify(x,y))", "all x.(Dna(x) -> ClassifiesOrganism(x))", "all x y.((Dna(x) & Organism(y)) -> ClassifiedFor(x,y))"]}
{"id": "entailmentbank_validation_343", "nl": "dna is a kind of molecule.", "fol": "", "prediction": ["all x.(Dna(x) -> Molecule(x))", "all x y.((Dna(x) & Molecule(y)) -> Molecule(x))", "all x y.((Dna(x) & Molecule(y)) -> Molecule(x,y))", "all x.(Dna(x) -> Molecule(x))", "all x y.((Dna(x) & Molecule(y)) -> Is(x,y))", "all x.(Dna(x) -> Molecule(x))", "all x y z.((Dna(x) & Molecule(y) & Molecule(z)) -> Molecule(x,y,z))", "all x y.((Dna(x) & Molecule(y)) -> Molecule(x))", "all x y z.((Dna(x) & Molecule(y) & Molecule(z)) -> Molecule(x))", "all x y.((Dna(x) & Molecule(y)) -> Molecular(x))", "all x.(Dna(x) -> Molecular(x))", "all x y z.((Dna(x) & Molecule(y) & Molecule(z)) -> Molecule(x,y))", "all x y.((Dna(x) & Molecule(y)) -> Like(x,y))", "all x y.((Dna(x) & Molecule(y)) -> Molecule(x,y))", "all x y z.((Dna(x) & Molecule(y) & Molecule(z)) -> Is(x,y,z))", "all x y.((Dna(x) & Molecule(y)) -> TypeOf(x,y))"]}
{"id": "entailmentbank_validation_344", "nl": "molecules are used for classifying organisms.", "fol": "", "prediction": ["all x y.((Molecule(x) & Organism(y)) -> Classified(x,y))", "all x y.((Molecule(x) & Organism(y)) -> ClassifiedFor(x,y))", "all x.(Molecule(x) -> ClassifiedOrganism(x))", "all x.(Molecule(x) -> ClassifiesOrganisms(x))", "all x y z.((Molecule(x) & Organism(y) & Organism(z)) -> Classified(x,y,z))", "all x y z.((Molecule(x) & Organism(y) & Organism(z)) -> ClassifiedFor(x,y,z))", "all x y.((Molecule(x) & Organism(y)) -> Classifies(x,y))", "all x.(Molecule(x) -> ClassifiesOrganism(x))", "all x y.((Molecule(x) & Organism(y)) -> UsedForClassifying(x,y))", "all x y z.((Molecule(x) & Organism(y) & Organism(z)) -> Classifies(x,y,z))", "all x y.((Molecular(x) & Organism(y)) -> Classified(x,y))", "all x.(Molecule(x) -> ClassifiedOrganisms(x))", "all x y.((Molecule(x) & Organism(y)) -> UsedForClassification(x,y))", "all x y.((Molecule(x) & Organism(y)) -> ClassifiedForClassification(x,y))", "all x.(Molecular(x) -> ClassifiesOrganisms(x))", "all x y z.((Molecule(x) & Organism(y) & Organism(z)) -> UsedForClassifying(x,y,z))"]}
{"id": "entailmentbank_validation_345", "nl": "a frog is a kind of amphibian.", "fol": "", "prediction": ["all x.(Frog(x) -> Amphibian(x))", "all x y.((Frog(x) & Amphibian(y)) -> Amphibian(x))", "all x.(Frog(x) -> Amphibian(x))", "all x y.((Frog(x) & Amphibian(y)) -> (Amphibian(x) & Amphibian(y)))", "all x y.((Frog(x) & Amphibian(y)) -> Is(x,y))", "all x.((Frog(x) & Amphibian(x)) -> Amphibian(x))", "all x y.((Frog(x) & amphibian(y)) -> Amphibian(x))", "all x.(Frog(x) -> (Amphibian(x) & Amphibian(x)))", "all x y.((Frog(x) & Amphibian(y)) -> Species(x,y))", "all x y.((Frog(x) & Amphibian(y)) -> Amphibian(x,y))", "all x y z.((Frog(x) & Amphibian(y) & Amphibian(z)) -> Amphibian(x))", "all x y z.((Frog(x) & Amphibian(y) & Amphibian(z)) -> (Amphibian(x) & Amphibian(y)))", "all x y.((Frog(x) & Amphibian(y)) -> (Amphibian(x) & Amphibian(x)))", "all x y z.((Frog(x) & Amphibian(y) & Frog(z)) -> Amphibian(x))", "all x y z.((Frog(x) & Amphibian(y) & Amphibian(z)) -> Is(x,y,z))", "all x y z.((Frog(x) & Amphibian(y) & Amphibian(z)) -> (Amphibian(x) | Amphibian(y)))"]}
{"id": "entailmentbank_validation_346", "nl": "a tadpole is a kind of young / baby frog.", "fol": "", "prediction": ["all x.(Tadpole(x) -> (YoungFrog(x) | BabyFrog(x)))", "all x.(Tadpole(x) -> (YoungFrog(x) & BabyFrog(x)))", "all x.(Tadpole(x) -> (Frog(x) & Young(x) & Baby(x)))", "all x.(Tadpole(x) -> (Young(x) | Baby(x)))", "all x.(Tadpole(x) -> (YoungBabyFrog(x) & Frog(x)))", "all x.(Tadpole(x) -> (YoungFrog(x) | BabyFrog(x)))", "all x.(Tadpole(x) -> (YearlyFrog(x) | BabyFrog(x)))", "all x.(Tadpole(x) -> (Young(x) & Baby(x) & Frog(x)))", "all x.(Tadpole(x) -> (Young(x) & Baby(x)))", "all x.(Tadpole(x) -> (YearFrog(x) | BabyFrog(x)))", "all x.(Tadpole(x) -> YoungFrog(x))", "all x.(Tadpole(x) -> (Young(x) & BabyFrog(x)))", "all x.(Tadpole(x) -> (Yearly(x) | BabyFrog(x)))", "all x.(Tadpole(x) -> (YearLittleFrog(x) | BabyFrog(x)))", "all x.(Tadpole(x) -> (Young(x) | BabyFrog(x)))", "all x.(Tadpole(x) -> (Yearly(x) & BabyFrog(x)))"]}
{"id": "entailmentbank_validation_347", "nl": "a tadpole is a kind of young amphibian.", "fol": "", "prediction": ["all x.(Tadpole(x) -> YoungAmphibian(x))", "all x.(Tadpole(x) -> YoungAmphibian(x))", "all x.(Tadpole(x) -> YoungAmphibian(x))", "all x.(Tadpole(x) -> (YoungAmphibian(x) & YoungAmphibian(x)))", "all x y.((Tadpole(x) & Amphibian(y)) -> Young(x,y))", "all x y.((Tadpole(x) & YoungAmphibian(y)) -> YoungAmphibian(x))", "all x.((Tadpole(x) & YoungAmphibian(x)) -> YoungAmphibian(x))", "all x y.((Tadpole(x) & Amphibian(y)) -> Young(x))", "all x.(Tadpole(x) -> (YearlyAmphibian(x) & YoungAmphibian(x)))", "all x.(Tadpole(x) -> (YoungAmphibian(x) & YoungAmphibian(x)))", "all x y.((Tadpole(x) & YoungAmphibian(y)) -> Is(x,y))", "all x y.((Tadpole(x) & YoungAmphibian(y)) -> YoungAmphibian(x,y))", "all x.(Tadpole(x) -> (YoungAmphibian(x) & -YoungAmphibian(x)))", "all x.(Tadpole(x) -> YoungAmphibian(x))", "all x.(Tadpole(x) -> KindOfYoungAmphibian(x))", "all x.(Tadpole(x) -> (YoungAmphibian(x) | YoungAmphibian(x)))"]}
{"id": "entailmentbank_validation_348", "nl": "metamorphosis is when an amphibian changes from an immature form to an adult form.", "fol": "", "prediction": ["all x.((Amphibian(x) & ImmatureForm(x) & AdultForm(x)) -> Metamorphosis(x))", "all x.(Metamorphosis(x) -> (Amphibian(x) & ImmatureForm(x) & AdultForm(x)))", "all x y.((Amphibian(x) & ImmatureForm(y) & AdultForm(x)) -> Metamorphosis(x))", "all x.(Metamorphosis(x) -> (AmphibianChange(x) & ImmatureForm(x) & AdultForm(x)))", "all x y.((Amphibian(x) & ImmatureForm(y) & AdultForm(x)) -> Metamorphosis(x,y))", "all x.(Metamorphosis(x) -> (AmphibianChange(x) & ImmatureForm(x) & AdultForm(x)))", "all x.(Metamorphosis(x) -> (Amphibian(x) & ImmatureForm(x) & AdultForm(x)))", "all x y z.((Amphibian(x) & ImmatureForm(y) & AdultForm(z)) -> ChangesFromTo(x,y,z))", "all x.((Amphibian(x) & ImmatureForm(x)) -> AdultForm(x))", "all x.((Amphibian(x) & ImmatureForm(x) & AdultForm(x)) -> Metamorphosis(x))", "all x y.((Amphibian(x) & ImmatureForm(y)) -> ChangesToAdultForm(x,y))", "all x y z.((Amphibian(x) & ImmatureForm(y) & AdultForm(z)) -> ChangesForm(x,y,z))", "all x y.((Amphibian(x) & ImmatureForm(y) & AdultForm(x,y)) -> Metamorphosis(x))", "all x y.((Amphibian(x) & ImmatureForm(y) & AdultForm(y)) -> Metamorphosis(x,y))", "all x y z.((Amphibian(x) & ImmatureForm(y) & AdultForm(z)) -> Metamorphosis(x,y,z))", "all x y z.((Amphibian(x) & ImmatureForm(y) & AdultForm(z)) -> ChangesFrom(x,y,z))"]}
{"id": "entailmentbank_validation_349", "nl": "an example of metamorphosis is when a tadpole changes from a an immature form to and adult form.", "fol": "", "prediction": ["all x.((Tadpole(x) & ImmatureForm(x) & AdultForm(x)) -> Metamorphosis(x))", "all x.(Metamorphosis(x) -> (TadpoleChange(x) & ImmatureForm(x) & AdultForm(x)))", "all x.(Metamorphosis(x) -> (TadpoleChangesFromImmatureToAdult(x)))", "all x y.((Tadpole(x) & ImmatureForm(y) & AdultForm(x)) -> Metamorphosis(x))", "all x y z.((Tadpole(x) & ImmatureForm(y) & AdultForm(z)) -> ChangesForm(x,y,z))", "all x.((Tadpole(x) & ChangesFromImmatureToAdult(x)) -> Metamorphosis(x))", "all x.(Metamorphosis(x) -> (TadpoleChangesFromImmatureToAdultForm(x)))", "all x y.((Tadpole(x) & ImmatureForm(x) & AdultForm(y)) -> Metamorphosis(x))", "all x y.((Tadpole(x) & ImmatureForm(y) & AdultForm(x)) -> Metamorphosis(x,y))", "all x.(Metamorphosis(x) -> (TadpoleChange(x) & ImmatureForm(x) & AdultForm(x)))", "all x.(Metamorphosis(x) -> (TadpoleChangesFromImmatureToAdult(x)))", "all x y.((Tadpole(x) & ImmatureForm(y) & ChangesForm(x,y)) -> AdultForm(x))", "all x.((Tadpole(x) & ImmatureForm(x)) -> AdultForm(x))", "all x y.((Tadpole(x) & ImmatureForm(y) & AdultForm(y)) -> Metamorphosis(x))", "all x y z.((Tadpole(x) & ImmatureForm(y) & AdultForm(z)) -> ChangesFromTo(x,y,z))", "all x y.((Tadpole(x) & ImmatureForm(y) & AdultForm(x,y)) -> Metamorphosis(x))"]}
{"id": "entailmentbank_validation_350", "nl": "the immature form of a frog is called a tadpole.", "fol": "", "prediction": ["all x.((Frog(x) & ImmatureForm(x)) -> Tadpole(x))", "all x.(Frog(x) -> Tadpole(x))", "all x.((Frog(x) & Immature(x)) -> Tadpole(x))", "all x.(ImmatureFormOfFrog(x) -> Tadpole(x))", "all x.((Frog(x) & ImmatureForm(x)) -> Tadpole(x))", "all x.((Frog(x) & ImmatureForm(x) & Tadpole(x)) -> ImmatureForm(x))", "all x.((Frog(x) & ImmatureForm(x)) -> Tadpole(x))", "all x.(Frog(x) & ImmatureForm(x)) -> Tadpole(x))", "all x.((Frog(x) & ImmatureForm(x) & Tadpole(x)) -> Tadpole(x))", "all x.(ImmatureFrog(x) -> Tadpole(x))", "all x y.((Frog(x) & ImmatureForm(x,y)) -> Tadpole(x))", "all x y.((Frog(x) & ImmatureForm(x,y) & Frog(y)) -> Tadpole(x))", "all x y.((Frog(x) & ImmatureForm(x) & Frog(y)) -> Tadpole(x))", "all x.((Frog(x) & ImmatureForm(x) & Tadpole(x)) -> IsFrog(x))", "all x.((Frog(x) & ImmatureForm(x) & Tadpole(x)) -> ImmatureForm(x))", "all x.(Frog(x) -> (ImmatureForm(x) & Tadpole(x)))"]}
{"id": "entailmentbank_validation_351", "nl": "the adult form of a tadpole is called a frog.", "fol": "", "prediction": ["all x.(Tadpole(x) -> Frog(x))", "all x.((Tadpole(x) & AdultForm(x)) -> Frog(x))", "all x.((Tadpole(x) & Adult(x)) -> Frog(x))", "all x.((AdultTadpole(x) & AdultForm(x)) -> Frog(x))", "all x.(AdultTadpole(x) -> Frog(x))", "all x.((TadpoleTadpole(x) & AdultForm(x)) -> Frog(x))", "all x.((AdultTadpole(x) & Adult(x)) -> Frog(x))", "all x y.((Tadpole(x) & Adult(y)) -> Frog(x))", "all x y.((Tadpole(x) & Adult(x) & Tadpole(y)) -> Frog(x))", "all x.((Tadpole(x) & AdultForm(x) & Tadpole(x)) -> Frog(x))", "all x.(TadpoleTadpole(x) -> Frog(x))", "all x.((TadpoleTadpole(x) & Adult(x)) -> Frog(x))", "all x y.((Tadpole(x) & AdultForm(x,y)) -> Frog(x))", "all x.((Adult(x) & Tadpole(x)) -> Frog(x))", "all x y.((Tadpole(x) & Adult(y) & Tadpole(x)) -> Frog(x))", "all x.(Tadpole(x) -> (AdultForm(x) & Frog(x)))"]}
{"id": "entailmentbank_validation_352", "nl": "the imature form of a frog is called a tadpole and the adult form of a tadpole is called a frog.", "fol": "", "prediction": ["all x y.((Frog(x) & ImatureForm(x) & AdultForm(y)) -> (Tadpole(x) & Frog(y)))", "all x y.((Frog(x) & Imature(x) & Adult(y)) -> (Tadpole(x) & Frog(y)))", "(all x.(Frog(x) -> Tadpole(x)) & all y.(Tadpole(y) -> Frog(y)))", "all x y.((Frog(x) & ImatureForm(x) & AdultForm(y)) -> (Tadpole(x) | Frog(y)))", "all x y.((Frog(x) & ImmatureForm(x) & AdultForm(y)) -> (Tadpole(x) & Frog(y)))", "all x y.((Frog(x) & ImatureForm(x) & AdultForm(y)) -> (Tadpole(x) & Frog(y)))", "(all x.((Frog(x) & ImatureForm(x)) -> Tadpole(x)) & all y.((Tadpole(y) & AdultForm(y)) -> Frog(y)))", "(all x.((Frog(x) & ImatureForm(x)) -> Tadpole(x)) & all y.((Frog(y) & AdultForm(y)) -> Frog(y)))", "(all x.(Frog(x) -> Tadpole(x)) & (Tadpole(x) -> Frog(x)))", "all x y.((Frog(x) & Imature(x) & Adult(y)) -> (Tadpole(x) | Frog(y)))", "all x y.((Frog(x) & ImmatureForm(x) & AdultForm(y)) -> (Tadpole(x) | Frog(y)))", "all x y.((Frog(x) & ImatureForm(x) & Tadpole(y)) -> (AdultForm(x) & Frog(x)))", "all x y.((Frog(x) & ImatureForm(x) & AdultForm(y)) -> (Tadpole(x) | Frog(y)))", "all x y.((Frog(x) & Frog(y)) -> (ImatureForm(x) & Tadpole(x) & AdultForm(y) & Frog(y)))", "all x y.((Frog(x) & ImatureForm(x) & Tadpole(y)) -> (Tadpole(x) & AdultForm(x) & Frog(x)))", "(all x.(Frog(x) -> Tadpole(x)) & (Tadpole(x) -> Adult(x)))"]}
{"id": "entailmentbank_validation_353", "nl": "an example of metamorphosis is when a tadpole changes from a tadpole into a frog.", "fol": "", "prediction": ["all x.(Metamorphosis(x) -> (TadpoleChangesFromTadpoleToFrog(x)))", "all x.((Tadpole(x) & ChangesFromTadpoleToFrog(x)) -> Metamorphosis(x))", "all x y z.((Tadpole(x) & Tadpole(y) & Frog(z)) -> ChangesFromTo(x,y,z))", "all x y z.((Tadpole(x) & Tadpole(y) & Frog(z) & ChangesFromTo(x,y,z)) -> Metamorphosis(x))", "all x.(Metamorphosis(x) -> (TadpoleChange(x) & FromTadpoleToFrog(x)))", "all x.((Tadpole(x) & Tadpole(x) & Frog(x)) -> Metamorphosis(x))", "all x y.((Tadpole(x) & Tadpole(y) & ChangesToFrog(x,y)) -> Metamorphosis(x))", "all x y z.((Tadpole(x) & Tadpole(y) & Frog(z)) -> ChangesInto(x,y,z))", "all x y z.((Tadpole(x) & Tadpole(y) & Frog(z)) -> ChangesFromTo(x,y,z))", "all x y.((Tadpole(x) & Tadpole(y) & ChangesIntoFrog(x,y)) -> Metamorphosis(x))", "all x y.((Tadpole(x) & Frog(y)) -> ChangesFromTadpoleToFrog(x,y))", "all x y.((Tadpole(x) & Tadpole(y)) -> ChangesIntoFrog(x,y))", "all x y z.((Tadpole(x) & Tadpole(y) & Frog(z)) -> ChangesTo(x,y,z))", "all x.(Metamorphosis(x) -> (TadpoleChangesFromTadpoleToFrog(x)))", "all x y.((Tadpole(x) & Tadpole(y)) -> ChangesToFrog(x,y))", "all x.((Tadpole(x) & Tadpole(x)) -> ChangesIntoFrog(x))"]}
{"id": "entailmentbank_validation_354", "nl": "reproduction occurs during adulthood.", "fol": "", "prediction": ["all x.(Reproduction(x) -> Adulthood(x))", "all x y.((Reproduction(x) & Adulthood(y)) -> OccursDuring(x,y))", "all x.(Reproduction(x) -> Adulthood(x))", "all x.(ReproductionOfAdulthood(x) -> OccursDuringAdulthood(x))", "all x y.((Adulthood(x) & Adulthood(y)) -> ReproductionOccurs(x,y))", "all x y z.((Reproduction(x) & Adulthood(y) & Adult(z)) -> OccursDuring(x,y,z))", "all x.(ReproductionOfAdulthood(x) -> OccursDuring(x,Adulthood))", "all x y.((Reproduction(x) & Adulthood(y)) -> Occurs(x,y))", "all x y.((Adulthood(x) & Adult(y)) -> ReproductionOccurs(x,y))", "all x.(ReproductionOfAdulthood(x) -> OccursDuring(x,adulthood))", "all x.((Reproduction(x) & Adulthood(x)) -> OccursDuring(x,y))", "all x y z.((Reproduction(x) & Adulthood(y) & Adulthood(z)) -> OccursDuring(x,y,z))", "all x.((Reproduction(x) & Adulthood(x)) -> Occurs(x))", "all x.(ReproductionOfAdulthood(x) -> Adulthood(x))", "all x.(ReproductionOf(x,adulthood) -> OccursDuring(x,adulthood))", "all x.(ReproductionOccursDuringAdulthood(x) -> Adulthood(x))"]}
{"id": "entailmentbank_validation_355", "nl": "an example of reproduction is laying eggs.", "fol": "", "prediction": ["all x.(Reproduction(x) -> LayingEggs(x))", "all x.(Reproduction(x) -> LayingEggs(x))", "all x.(Reproduction(x) -> LaysEggs(x))", "all x.(Reproduction(x) -> LaysEggs(x))", "all x.((LaysEggs(x) & Reproduction(x)) -> Reproduction(x))", "all x y.((Reproduction(x) & Egg(y)) -> Lays(x,y))", "all x.((LaysEggs(x) & Eggs(x)) -> Reproduction(x))", "all x.((Reproduction(x) & LayingEggs(x)) -> Reproduction(x))", "all x.((Reproduction(x) & LaysEggs(x)) -> Reproduction(x))", "all x.((LaysEggs(x)) -> Reproduction(x))", "all x.((LayingEggs(x) & Reproduction(x)) -> Reproduction(x))", "all x y.((Reproduction(x) & Egg(y)) -> Laying(x,y))", "all x.((LayingEggs(x)) -> Reproduction(x))", "exists x.(Reproduction(x) & LayingEggs(x))", "all x.((LaysEggs(x) & Eggs(x)) -> ReproductionExample(x))", "exists x.(Reproduction(x) & LaysEggs(x))"]}
{"id": "entailmentbank_validation_356", "nl": "laying eggs occurs during adulthood.", "fol": "", "prediction": ["all x.(LayingEggs(x) -> Adulthood(x))", "all x.(LaysEggs(x) -> Adulthood(x))", "all x y.((Egg(x) & Adulthood(y)) -> Lays(x,y))", "all x y.((Egg(x) & Adulthood(y)) -> LaysDuring(x,y))", "all x y.((ElatingEggs(x) & Adulthood(y)) -> OccursDuring(x,y))", "all x.(ElatingEggs(x) -> Adulthood(x))", "all x y z.((Egg(x) & Adulthood(y) & Adulthood(z)) -> Lays(x,y,z))", "all x.((Egg(x) & Adulthood(x)) -> Lays(x,Eggs))", "all x.((Eggs(x) & Adulthood(x)) -> Lays(x))", "all x.((Egg(x) & Adulthood(x)) -> Lays(x))", "all x.((Egg(x) & Adulthood(x)) -> Lays(x,y))", "all x.((Egg(x) & Adulthood(x)) -> Lays(x,eggs))", "all x.(LivingEggs(x) -> Adulthood(x))", "all x.(LaysEggs(x) -> Adulthood(x))", "all x y z.((Egg(x) & Adulthood(y) & Adulthood(z)) -> LaysDuring(x,y,z))", "all x.(LayingEggs(x) -> Adulthood(x))"]}
{"id": "entailmentbank_validation_357", "nl": "adulthood is a stage in the life cycle process.", "fol": "", "prediction": ["all x.(Adult(x) -> StageInLifeCycleProcess(x))", "all x.(Adult(x) -> LifeCycleProcess(x))", "all x.(Adulthood(x) -> StageInLifeCycleProcess(x))", "all x y.((Adult(x) & LifeCycleProcess(y)) -> StageInProcess(x,y))", "all x.(Adult(x) -> StageInLifeCycle(x))", "all x.(Adulthood(x) -> LifeCycleProcess(x))", "all x y.((Adult(x) & LifeCycleProcess(y)) -> StageIn(x,y))", "all x.(Adulthood(x) -> StageInLifeCycle(x))", "all x.((Adult(x) & LifeCycleProcess(x)) -> StageInProcess(x))", "all x y.((Adult(x) & LifeCycleProcess(y)) -> Stage(x,y))", "all x.(Adult(x) -> StageInLifeCycleProcess(x))", "all x y.((Adult(x) & StageInLifeCycle(y)) -> StageInLifeCycle(x,y))", "all x.(Adult(x) -> LifeCycleStage(x))", "all x.((Adult(x) & LifeCycleProcess(x)) -> StageIn(x,y))", "all x y.((Adult(x) & LifeCycleProcess(y)) -> StageInCycle(x,y))", "all x.(Adulthood(x) -> StageInLifeCycleProcess(x))"]}
{"id": "entailmentbank_validation_358", "nl": "laying eggs occurs during the adult stage in the life cycle.", "fol": "", "prediction": ["all x y.((Egg(x) & AdultStage(y)) -> Lays(x,y))", "all x y z.((Egg(x) & AdultStage(y) & LifeCycle(z)) -> Lays(x,y,z))", "all x.((Egg(x) & AdultStage(x)) -> Lays(x))", "all x y.((Egg(x) & AdultStage(y)) -> LaysDuringLifeCycle(x,y))", "all x y z.((Egg(x) & AdultStage(y) & LifeCycle(z)) -> LaysDuring(x,y,z))", "all x y z.((Egg(x) & AdultStage(y) & LifeCycle(z)) -> Lays(x,y))", "all x y.((Egg(x) & AdultStage(y) & LifeCycle(y)) -> Lays(x,y))", "all x.((Eggs(x) & AdultStage(x)) -> Lays(x))", "all x y.((Egg(x) & AdultStage(y) & LifeCycle(z)) -> Lays(x,y,z))", "all x.(LayingEggs(x) -> AdultStage(x))", "all x.(LayingEggs(x) -> AdultStageInLifeCycle(x))", "all x.(LaysEggs(x) -> AdultStage(x))", "all x y.((Egg(x) & AdultStage(y)) -> LaysInLifeCycle(x,y))", "all x y.((Egg(x) & AdultStage(y) & LifeCycle(x)) -> Lays(x,y))", "all x.(LaysEggs(x) -> AdultStageInLifeCycle(x))", "all x.((Egg(x) & AdultStage(x)) -> LaysDuringLifeCycle(x))"]}
{"id": "entailmentbank_validation_359", "nl": "a female insect lays eggs.", "fol": "", "prediction": ["all x.(FemaleInsect(x) -> LaysEggs(x))", "all x.((FemaleInsect(x) & LaysEggs(x)) -> FemaleInsect(x))", "all x y.((FemaleInsect(x) & Egg(y)) -> Lays(x,y))", "exists x.(FemaleInsect(x) & LaysEggs(x))", "all x.((FemaleInsect(x) & LaysEggs(x)) -> Insect(x))", "all x.((Insect(x) & Female(x)) -> LaysEggs(x))", "all x y z.((FemaleInsect(x) & Egg(y) & Egg(z)) -> Lays(x,y,z))", "all x.((FemaleInsect(x) & LaysEggs(x)) -> LaysEggs(x))", "all x.((FemaleInsect(x) & LaysEggs(x)) -> Female(x))", "all x y.((Insect(x) & Female(y)) -> LaysEggs(x,y))", "all x.(Insect(x) -> LaysEggs(x))", "all x y z.((FemaleInsect(x) & Egg(y) & Insect(z)) -> Lays(x,y,z))", "all x y z.((FemaleInsect(x) & Egg(y) & Egg(z)) -> Lays(x,y))", "all x y.((FemaleInsect(x) & Egg(y) & Lays(x,y)) -> Lays(x,y))", "all x.(SheetInsect(x) -> LaysEggs(x))", "all x y z.((FemaleInsect(x) & Egg(y) & Insect(z)) -> Lays(x,y))"]}
{"id": "entailmentbank_validation_360", "nl": "a female insect lays eggs during the adult stage of an insect's life cycle.", "fol": "", "prediction": ["all x y.((FemaleInsect(x) & Insect(y)) -> LaysEggsDuringAdultStage(x,y))", "all x y.((FemaleInsect(x) & AdultStage(y)) -> LaysEggs(x,y))", "all x y z.((FemaleInsect(x) & Egg(y) & AdultStage(z)) -> LaysDuringLifeCycle(x,y,z))", "all x.((FemaleInsect(x) & LaysEggsDuringAdultStage(x)) -> InsectLifeCycle(x))", "all x y.((FemaleInsect(x) & Insect(y)) -> LaysEggsDuringAdultStageOfLifeCycle(x,y))", "all x y z.((FemaleInsect(x) & Egg(y) & AdultStage(z) & InsectLifeCycle(z)) -> LaysDuring(x,y,z))", "all x y z.((FemaleInsect(x) & Egg(y) & AdultStageOfLifeCycle(z)) -> LaysDuring(x,y,z))", "all x y.((FemaleInsect(x) & Insect(y) & LaysEggsDuringAdultStage(x,y)) -> InsectLifeCycle(x,y))", "all x y.((FemaleInsect(x) & AdultStageOfLifeCycle(y)) -> LaysEggs(x,y))", "all x y z.((FemaleInsect(x) & Egg(y) & AdultStageOfInsectLifeCycle(z)) -> LaysDuring(x,y,z))", "all x y.((FemaleInsect(x) & Insect(y) & LaysEggs(x,y)) -> AdultStageOfLifeCycle(x,y))", "all x y.((FemaleInsect(x) & AdultStage(y)) -> LaysEggsDuringLifeCycle(x,y))", "all x y.((FemaleInsect(x) & Insect(y) & LaysEggsDuringAdultStage(x,y)) -> InsectLifeCycle(x))", "all x y.((FemaleInsect(x) & Egg(y)) -> LaysDuringAdultStageOfLifeCycle(x,y))", "all x y.((FemaleInsect(x) & Insect(y) & LaysEggsDuringAdultStage(x,y)) -> InsectLifeCycle(y))", "all x y.((FemaleInsect(x) & Insect(y)) -> LaysEggsAtAdultStage(x,y))"]}
{"id": "entailmentbank_validation_361", "nl": "a cat is a kind of mammal.", "fol": "", "prediction": ["all x.(Cat(x) -> Mammal(x))", "all x y.((Cat(x) & Mammal(y)) -> Mammal(x))", "exists x.(Cat(x) & Mammal(x))", "all x.(Cat(x) -> Mammal(x))", "all x y.((Cat(x) & Mammal(y)) -> Mammal(x,y))", "all x y z.((Cat(x) & Mammal(y) & Mammal(z)) -> Mammal(x))", "all x y z.((Cat(x) & Mammal(y) & Mammal(z)) -> Mammal(x,y,z))", "all x y.((Cat(x) & Mammal(y)) -> Is(x,y))", "all x y.((Cat(x) & Mammal(y)) -> KindOf(x,y))", "all x y z.((Cat(x) & Mammal(y) & Mammal(z)) -> Mammal(x,y))", "all x.exists y.(Cat(x) & Mammal(y) & Mammal(x))", "all x.((Cat(x) & Mammal(x)) -> Mammal(x))", "all x.(Cat(x) -> (Mammal(x) & Mammal(x)))", "all x y z.((Cat(x) & Mammal(y) & Mammal(z)) -> Is(x,y,z))", "all x y.((Cat(x) & Mammal(y)) -> Species(x,y))", "all x.exists y.(Cat(x) & Mammal(y) & Mammal(x) & Mammal(y))"]}
{"id": "entailmentbank_validation_362", "nl": "mammals give birth to live young.", "fol": "", "prediction": ["all x.(Mammal(x) -> GivesBirthToLiveYoung(x))", "all x y.((Mammal(x) & Mammal(y)) -> GivesBirthToLiveYoung(x,y))", "all x.(Mammal(x) -> GiveBirthToLiveYoung(x))", "all x y.((Mammal(x) & Mammal(y) & GivesBirthToLiveYoung(x,y)) -> GivesBirthToLiveYoung(x,y))", "all x y z.((Mammal(x) & Mammal(y) & LiveYoung(z)) -> GivesBirthTo(x,y,z))", "all x y z.((Mammal(x) & Mammal(y) & Mammal(z)) -> GivesBirthToLiveYoung(x,y,z))", "all x y.((Mammal(x) & LiveYoung(y)) -> GivesBirthTo(x,y))", "all x y z.((Mammal(x) & LiveYoung(y) & Mammal(z)) -> GivesBirthTo(x,y,z))", "all x.((Mammal(x) & GivesBirthToLiveYoung(x)) -> GivesBirthToLiveYoung(x))", "all x y.((Mammal(x) & Mammal(y)) -> GivesBirthToLiveYoung(x))", "all x y.((Mammal(x) & Mammal(y) & GivesBirthToLiveYoung(x)) -> GivesBirthToLiveYoung(x,y))", "all x y.((Mammal(x) & GivesBirthToLiveYoung(y)) -> GivesBirthToLiveYoung(x,y))", "all x y.((Mammal(x) & GivesBirthToLiveYoung(x,y)) -> GivesBirthToLiveYoung(x,y))", "all x y.((Mammal(x) & Mammal(y) & GivesBirthToLiveYoung(x,y)) -> GivesBirthToLiveYoung(x))", "all x y.((Mammal(x) & Mammal(y)) -> GiveBirthToLiveYoung(x,y))", "all x y.((Mammal(x) & GivesBirthToLiveYoung(x)) -> GivesBirthToLiveYoung(x,y))"]}
{"id": "entailmentbank_validation_363", "nl": "a cat gives birth to live young.", "fol": "", "prediction": ["all x.(Cat(x) -> GivesBirthToLiveYoung(x))", "all x y.((Cat(x) & GivesBirthToLiveYoung(x)) -> GivesBirthToLiveYoung(x))", "all x y.((Cat(x) & GivesBirthToLiveYoung(x)) -> GivesBirthToLiveYoung(x,y))", "all x y.((Cat(x) & LiveYoung(y)) -> GivesBirthTo(x,y))", "all x y.((Cat(x) & GivesBirthToLiveYoung(x)) -> GivesBirthToLiveYoung(y))", "all x.((Cat(x) & GivesBirthToLiveYoung(x)) -> GivesBirthToLiveYoung(x))", "all x y.((Cat(x) & GivesBirthToLiveYoung(y)) -> GivesBirthToLiveYoung(x,y))", "all x y.((Cat(x) & Young(y)) -> GivesBirthTo(x,y))", "all x y.((Cat(x) & GivesBirthToLiveYoung(x,y)) -> GivesBirthToLiveYoung(x,y))", "all x y.((Cat(x) & Cat(y)) -> GivesBirthToLiveYoung(x,y))", "all x y.((Cat(x) & Child(y)) -> GivesBirthToLiveYoung(x,y))", "all x y.((Cat(x) & Kid(y)) -> GivesBirthToLiveYoung(x,y))", "all x y.((Cat(x) & GivesBirthToLiveYoung(x,y)) -> GivesBirthToLiveYoung(x))", "exists x.(Cat(x) & GivesBirthToLiveYoung(x))", "all x y.((Cat(x) & Baby(y)) -> GivesBirthToLiveYoung(x,y))", "all x y.((Cat(x) & GivesBirthToLiveYoung(x,y)) -> GivesBirthToLiveYoung(y))"]}
{"id": "entailmentbank_validation_364", "nl": "to give birth to live young means to undergo live birth.", "fol": "", "prediction": ["all x.((GivesBirthToLiveYoung(x) & UndergoesLiveBirth(x)) -> GivesBirthToLiveYoung(x))", "all x.((GivesBirthToLiveYoung(x) & UndergoesLiveBirth(x)) -> LiveBirth(x))", "all x.(GivesBirthToLiveYoung(x) -> UndergoesLiveBirth(x))", "all x.((GiveBirthToLiveYoung(x) & UndergoLiveBirth(x)) -> GiveBirthToLiveYoung(x))", "all x.((GivesBirthToLiveYoung(x) & LiveBirth(x)) -> UndergoesLiveBirth(x))", "all x.((GivesBirthToLiveYoung(x)) -> UndergoesLiveBirth(x))", "all x y.((GivesBirthToLiveYoung(x) & LiveBirth(y)) -> UndergoesLiveBirth(x))", "all x y.((GivesBirthToLiveYoung(x) & GivesBirthToLiveYoung(x)) -> UndergoesLiveBirth(y))", "all x.((GiveBirthToLiveYoung(x)) -> UndergoesLiveBirth(x))", "all x.((GivesBirthToLiveYoung(x) & UndergoesLiveBirth(x)) -> UndergoesLiveBirth(x))", "all x.((GiveBirthToLiveYoung(x) & LiveBirth(x)) -> UndergoesLiveBirth(x))", "all x y.((GivesBirthToLiveYoung(x) & LiveBirth(y)) -> UndergoesLiveBirth(x,y))", "all x.((GiveBirthToLiveYoung(x) & UndergoLiveBirth(x)) -> LiveBirth(x))", "all x y.((GiveBirthToLiveYoung(x) & LiveBirth(y)) -> UndergoesLiveBirth(x))", "all x y.((GiveBirthToLiveYoung(x) & GiveBirthToLiveYoung(x)) -> UndergoesLiveBirth(y))", "all x y.((GiveBirthToLiveYoung(x) & GiveBirthToLiveYoung(y)) -> UndergoesLiveBirth(x))"]}
{"id": "entailmentbank_validation_365", "nl": "a cat undergoes live birth.", "fol": "", "prediction": ["all x.(Cat(x) -> UndergoesLiveBirth(x))", "all x y.((Cat(x) & LiveBirth(y)) -> Undergoes(x,y))", "all x.(Cat(x) -> LiveBirth(x))", "all x.((Cat(x) & UndergoesLiveBirth(x)) -> UndergoesLiveBirth(x))", "all x y.((Cat(x) & Cat(y)) -> UndergoesLiveBirth(x,y))", "all x y z.((Cat(x) & LiveBirth(y) & Cat(z)) -> Undergoes(x,y,z))", "all x y z.((Cat(x) & LiveBirth(y) & Cat(z)) -> Undergoes(x,y))", "all x.((Cat(x) & LiveBirth(x)) -> Undergoes(x,y))", "all x.(Cat(x) -> UndergoesLiveBirth(x))", "all x.((Cat(x) & UndergoesLiveBirth(x)) -> LiveBirth(x))", "all x.exists y.(Cat(x) & LiveBirth(y) & Undergoes(x,y))", "all x.((Cat(x) & LiveBirth(x)) -> Undergoes(x))", "all x y.((Cat(x) & LiveBirth(x)) -> Undergoes(x,y))", "all x y.((Cat(x) & UndergoesLiveBirth(x)) -> UndergoesLiveBirth(y))", "all x y.((Cat(x) & UndergoesLiveBirth(x)) -> UndergoesLiveBirth(x))", "all x y.((Cat(x) & Cat(y)) -> UndergoesLiveBirth(x))"]}
{"id": "entailmentbank_validation_366", "nl": "live birth means developing inside the mother instead of an egg.", "fol": "", "prediction": ["all x y.((LiveBirth(x) & Mother(y)) -> (DevelopsInside(x,y) & -Egg(y)))", "all x.(LiveBirth(x) -> (DevelopsInsideMother(x) & -Egg(x)))", "all x.(LiveBirth(x) -> (DevelopsInsideMother(x) & -Egg(x)))", "all x y z.((LiveBirth(x) & Mother(y) & Egg(z)) -> (DevelopsInside(x,y) & -DevelopsInside(x,z)))", "all x y.((LiveBirth(x) & Mother(y)) -> (DevelopsInside(x,y) & -Egg(y)))", "all x y z.((LiveBirth(x) & Mother(y) & Egg(z)) -> (DevelopsInside(x,y,z) & -DevelopsInside(x,y)))", "all x.(LiveBirth(x) -> (DevelopsInsideMother(x) & -InsideEgg(x)))", "all x y z.((LiveBirth(x) & Mother(y) & Egg(z)) -> (DevelopsInside(x,y) & -DevelopsInside(x,z)))", "all x y z.((LiveBirth(x) & Mother(y) & Egg(z)) -> (DevelopsInside(x,y,z) & -DevelopsInside(x,y)))", "all x y.((LiveBirth(x) & Mother(y)) -> (DevelopsInside(x,y) & -Egg(x)))", "all x y z.((LiveBirth(x) & Mother(y) & Egg(z)) -> (DevelopsInside(x,y,z) & -DevelopsInside(x,y,z)))", "all x y z.((LiveBirth(x) & Mother(y) & Egg(z)) -> (DevelopsInside(x,y,z) & -DevelopsInside(x,y,z)))", "all x y.((LiveBirth(x) & Mother(y)) -> (DevelopsInside(x,y) & -Inside(x,y)))", "all x y.((LiveBirth(x) & Mother(y)) -> (DevelopsInside(x,y) & -Inside(x,y)))", "all x y.((LiveBirth(x) & Mother(y)) -> (DevelopsInside(x,y) & -Egg(x)))", "all x.(LiveBirth(x) -> (DevelopsInsideMother(x) & -InsideEgg(x)))"]}
{"id": "entailmentbank_validation_367", "nl": "a cat develops inside its mother.", "fol": "", "prediction": ["all x.(Cat(x) -> DevelopsInsideMother(x))", "all x y.((Cat(x) & Mother(y)) -> DevelopsInside(x,y))", "all x y z.((Cat(x) & Mother(y) & Mother(z)) -> DevelopsInside(x,y,z))", "all x.(Cat(x) -> exists y.(Mother(y) & DevelopsInside(x,y))))", "all x.(Cat(x) -> DevelopsInside(x))", "all x.(Cat(x) -> exists y.(Mother(y) & DevelopsInside(x,y)))", "all x y z.((Cat(x) & Mother(y) & Parent(z)) -> DevelopsInside(x,y,z))", "all x y.((Cat(x) & Mom(y)) -> DevelopsInside(x,y))", "all x y z.((Cat(x) & Mother(y) & Mother(z)) -> DevelopsInside(x,y))", "all x.((Cat(x) & Mother(y)) -> DevelopsInside(x,y))", "all x.((Cat(x) & Mother(x)) -> DevelopsInside(x))", "all x y z.((Cat(x) & Mother(y) & Mom(z)) -> DevelopsInside(x,y,z))", "all x y.((Cat(x) & Mother(y) & DevelopsInside(x,y)) -> DevelopsInside(x,y))", "all x.(Cat(x) -> DevelopsInsideMammal(x))", "all x y.((Cat(x) & Mother(y)) -> DevelopsItself(x,y))", "all x y z.((Cat(x) & Mother(y) & Mother(z)) -> DevelopsInside(x,z))"]}
{"id": "entailmentbank_validation_368", "nl": "the opposite of the same is different.", "fol": "", "prediction": ["all x.((OppositeOfSame(x) & OppositeOfSame(x)) -> Different(x))", "all x.(OppositeOfSame(x) -> Different(x))", "all x.((OpponentOfSame(x) & OppositeOfSame(x)) -> Different(x))", "all x.((OppositeOfSame(x) & OppositeOfSame(x)) -> Different(x))", "all x.((OppositeOfSame(x) & Different(x)) -> OppositeOfSame(x))", "all x.((OppositeOfSame(x) & OppositeOfSame(x)) -> Distinct(x))", "all x y.((OppositeOfSame(x) & OppositeOfSame(y)) -> Different(x))", "all x.((OpposeOfSame(x) & OppositeOfSame(x)) -> Different(x))", "all x.((OppositeOfSame(x) & Different(x)) -> OppositeOfSame(x))", "all x y.((OppositeOfSame(x) & OppositeOfSame(x,y)) -> Different(x))", "all x.((OppositionOfSame(x) & OppositeOfSame(x)) -> Different(x))", "all x y.((OppositeOfSame(x) & OppositeOfSame(y)) -> Different(x,y))", "all x.(OppositeOfSame(x) -> Different(x))", "all x.((OppositeOfSame(x) & OppositeOfSame(x)) -> Different(x))", "all x.((OppositeOfSame(x) & OppositeOfSame(x)) -> Diverse(x))", "all x.((OppositeOfSame(x)) -> Different(x))"]}
{"id": "entailmentbank_validation_369", "nl": "two birds are not in the same taxonomic family.", "fol": "", "prediction": ["all x.(Bird(x) -> -TaxonomicFamily(x))", "all x.(Bird(x) -> -SameTaxonomicFamily(x))", "all x y.((Bird(x) & Bird(y)) -> -TaxonomicFamily(x,y))", "all x.(Bird(x) -> -(TaxonomicFamily(x) & TaxonomicFamily(x)))", "all x y.((Bird(x) & Bird(y)) -> -(TaxonomicFamily(x,y) & TaxonomicFamily(x,y)))", "all x.(Bird(x) -> -TaxinomicalFamily(x))", "all x y.((Bird(x) & Bird(y)) -> -SameTaxonomicFamily(x,y))", "all x.(Bird(x) -> -TaxinomianFamily(x))", "all x y.((Bird(x) & Bird(y)) -> -InTaxonomicFamily(x,y))", "all x.(Bird(x) -> -InTaxonomicFamily(x))", "all x y.((Bird(x) & Bird(y)) -> -TaxinomianFamily(x,y))", "all x y.((Bird(x) & Bird(y)) -> -TaxinomicalFamily(x,y))", "all x.(Bird(x) -> -(TaxonomicFamily(x) | TaxonomicFamily(x)))", "all x y.((Bird(x) & Bird(y)) -> -(TaxonomicFamily(x,y) & TaxonomicFamily(y)))", "all x.(Bird(x) -> -SameTreatmentFamily(x))", "all x y.((Bird(x) & Bird(y)) -> -(TaxonomicFamily(x,y) & TaxonomicFamily(x,y))))"]}
{"id": "entailmentbank_validation_370", "nl": "two birds are in different taxonomic families.", "fol": "", "prediction": ["all x y.((Bird(x) & Bird(y)) -> TaxonomicFamily(x,y))", "all x y.((Bird(x) & Bird(y)) -> DifferentTaxonomicFamily(x,y))", "all x.(Bird(x) -> DifferentTaxonomicFamilies(x))", "all x y.((Bird(x) & Bird(y)) -> DifferentTaxonomicFamilies(x,y))", "all x.(Bird(x) -> DifferentTaxonomicFamily(x))", "all x y z.((Bird(x) & Bird(y) & TaxonomicFamily(z)) -> Different(x,y,z))", "all x.(Bird(x) -> (DifferentTaxonomicFamilies(x) & DifferentTaxonomicFamilies(x)))", "all x y z.((Bird(x) & Bird(y) & TaxonomicFamily(z)) -> DifferentFamily(x,y,z))", "all x.(Bird(x) -> (DifferentTaxonomicFamilies(x) | DifferentTaxonomicFamilies(x)))", "all x.(Bird(x) -> TaxonomicFamily(x))", "all x y z.((Bird(x) & Bird(y) & TaxonomicFamily(z)) -> InDifferentFamilies(x,y,z))", "all x y.((Bird(x) & Bird(y) & TaxonomicFamily(x,y)) -> DifferentFamily(x,y))", "all x y z.((Bird(x) & Bird(y) & TaxonomicFamily(z)) -> InDifferentFamily(x,y,z))", "all x y.((Bird(x) & Bird(y)) -> InDifferentTaxonomicFamilies(x,y))", "all x y.((Bird(x) & Bird(y) & TaxonomicFamily(x,y)) -> Different(x,y))", "all x y.((Bird(x) & Bird(y)) -> DifferentThan(x,y))"]}
{"id": "entailmentbank_validation_371", "nl": "environments with similar characteristics place similar environmental pressures on the organisms in them.", "fol": "", "prediction": ["all x.((Environment(x) & SimilarCharacteristics(x)) -> PlacesSameEnvironmentalPressuresOnOrganisms(x))", "all x y.((Environment(x) & SimilarCharacteristics(x) & Organism(y)) -> PlacesSameEnvironmentalPressure(x,y))", "all x y.((Environment(x) & SimilarCharacteristics(x) & Organism(y)) -> PlacesSameEnvironmentalPressures(x,y))", "all x.((Environment(x) & SimilarCharacteristics(x)) -> PlacesSameEnvironmentalPressionsOnOrganisms(x))", "all x.((Environment(x) & SimilarCharacteristics(x)) -> PlacesSameEnvironmentalPressure(x))", "all x y.((Environment(x) & SimilarCharacteristics(x) & Organism(y)) -> PlacesSameEnvironmentalPressions(x,y))", "all x.((Environment(x) & SimilarCharacteristics(x)) -> PlacesSameEnvironmentalPressures(x))", "all x y.((Environment(x) & Environment(y) & SimilarCharacteristics(x)) -> PlacesSameEnvironmentalPressure(x,y))", "all x y.((Environment(x) & Environment(y) & SimilarCharacteristics(x)) -> PlacesSameEnvironmentalPressuresOnOrganisms(x,y))", "all x y.((Environment(x) & Environment(y) & SimilarCharacteristics(x,y)) -> PlacesSameEnvironmentalPressuresOnOrganisms(x,y))", "all x.((Environment(x) & SimilarCharacteristics(x)) -> PlacesSameEnvironmentalPressions(x))", "all x y.((Environment(x) & Environment(y) & SimilarCharacteristics(x)) -> PlacesSameEnvironmentalPressures(x,y))", "all x y.((Environment(x) & Environment(y) & SimilarCharacteristics(x,y)) -> PlacesSameEnvironmentalPressure(x,y))", "all x y.((Environment(x) & SimilarCharacteristics(x) & Organism(y)) -> PlacesSimilarEnvironmentalPressures(x,y))", "all x y.((Environment(x) & SimilarCharacteristics(x)) -> PlacesSameEnvironmentalPressure(x,y))", "all x y.((Environment(x) & SimilarCharacteristics(x)) -> PlacesSameEnvironmentalPressures(x,y))"]}
{"id": "entailmentbank_validation_372", "nl": "two birds live in environments with similar characteristics.", "fol": "", "prediction": ["all x y.((Bird(x) & Environment(y) & SimilarCharacteristics(x,y)) -> LivesIn(x,y))", "all x y.((Bird(x) & Environment(y) & SimilarCharacteristics(y)) -> LivesIn(x,y))", "all x y z.((Bird(x) & Environment(y) & Environment(z) & SimilarCharacteristics(x,y,z)) -> LivesIn(x,y,z))", "all x y.((Bird(x) & Environment(y) & SimilarCharacteristics(x)) -> LivesIn(x,y))", "all x.(Bird(x) -> LivesInSameEnvironment(x))", "all x y z.((Bird(x) & Environment(y) & Environment(z) & SimilarCharacteristics(z)) -> LivesIn(x,y,z))", "all x y z.((Bird(x) & Environment(y) & Environment(z)) -> LivesIn(x,y,z))", "all x y z.((Bird(x) & Environment(y) & Environment(z) & SimilarCharacteristics(y,z)) -> LivesIn(x,y,z))", "all x y.((Bird(x) & Environment(y)) -> LivesIn(x,y))", "all x y z.((Bird(x) & Environment(y) & Environment(z) & SimilarCharacteristics(y)) -> LivesIn(x,y,z))", "all x.(Bird(x) -> (LivesInEnvironment(x) & SimilarCharacteristics(x)))", "all x y.((Bird(x) & Environment(y) & SimilarCharacteristics(y,x)) -> LivesIn(x,y))", "all x y z.((Bird(x) & Environment(y) & Environment(z) & SimilarCharacteristics(x,y)) -> LivesIn(x,z))", "all x y z.((Bird(x) & Environment(y) & Environment(z) & SimilarCharacteristics(x)) -> LivesIn(x,y,z))", "all x.((Bird(x) & Environment(x) & SimilarCharacteristics(x)) -> LivesIn(x,y))", "all x.(Bird(x) -> exists y.(Environment(y) & SimilarCharacteristics(x,y)))"]}
{"id": "entailmentbank_validation_373", "nl": "two birds developed under similar environmental pressures.", "fol": "", "prediction": ["all x y.((Bird(x) & Bird(y)) -> SimilarEnvironmentalPressures(x,y))", "all x y.((Bird(x) & Bird(y)) -> SimilarEnvironmentalPressions(x,y))", "all x y.((Bird(x) & Bird(y)) -> SimilarEnvironmentalPressure(x,y))", "all x.(Bird(x) -> (DevelopedUnderSameEnvironmentalPressures(x) & DevelopedUnderSameEnvironmentalPressures(x)))", "all x y.((Bird(x) & Bird(y)) -> DevelopedUnderSameEnvironmentalPressures(x,y))", "all x.(Bird(x) -> (DevelopedUnderSameEnvironmentalPressions(x) & DevelopedUnderSameEnvironmentalPressures(x)))", "all x y.((Bird(x) & Bird(y)) -> DevelopedUnderSameEnvironmentalPressions(x,y))", "all x.((Bird(x) & Bird(x)) -> SimilarEnvironmentalPressures(x))", "all x y z.((Bird(x) & Bird(y) & EnvironmentalPressure(z)) -> Similar(x,y,z))", "all x y.((Bird(x) & Bird(y)) -> (DevelopedUnderSameEnvironmentalPressures(x,y)))", "all x.(Bird(x) -> (DevelopedUnderSameEnvironmentalPressions(x) & DevelopedUnderSameEnvironmentalPressions(x)))", "all x.((Bird(x) & Bird(y)) -> SimilarEnvironmentalPressures(x,y))", "all x.(Bird(x) -> (DevelopedUnderSameEnvironmentalPressures(x) & SimilarEnvironmentalPressures(x)))", "all x y.((Bird(x) & Bird(y)) -> (DevelopedUnderSameEnvironmentalPressions(x,y)))", "all x.((Bird(x) & Bird(x)) -> SimilarEnvironmentalPressions(x))", "all x.((Bird(x) & Bird(y)) -> SimilarEnvironmentalPressions(x,y))"]}
{"id": "entailmentbank_validation_374", "nl": "two birds developed thousands of miles apart.", "fol": "", "prediction": ["all x y.((Bird(x) & Bird(y)) -> DevelopedThousandsOfMilesApart(x,y))", "all x.((Bird(x) & Bird(y)) -> DevelopedThousandsOfMilesApart(x,y))", "all x y.((Bird(x) & Bird(y)) -> (DevelopedThousandsOfMilesApart(x,y)))", "all x y.((Bird(x) & Bird(y)) -> DevelopedMillionsOfMilesApart(x,y))", "all x.(Bird(x) -> DevelopedThousandsOfMilesApart(x))", "all x.((Bird(x) & Bird(x)) -> DevelopedThousandsOfMilesApart(x))", "all x y z.((Bird(x) & Bird(y) & Bird(z)) -> (DevelopedThousandsOfMilesApart(x,y,z)))", "all x y.((Bird(x) & Bird(y)) -> DevelopedMilesAway(x,y))", "all x.((Bird(x) & Bird(y)) -> DevelopedMillionsOfMilesApart(x,y))", "all x y z.((Bird(x) & Bird(y) & Bird(z)) -> (DevelopedThousandsOfMilesApart(x,y) & DevelopedThousandsOfMilesApart(y,z)))", "all x.(Bird(x) -> (DevelopedThousandsOfMilesApart(x) & Bird(x)))", "all x.(Bird(x) -> DevelopedMillionsOfMilesApart(x))", "all x y z.((Bird(x) & Bird(y) & Bird(z)) -> (DevelopedThousandsOfMilesApart(x,y) | DevelopedThousandsOfMilesApart(y,z)))", "all x y.((Bird(x) & Bird(y)) -> (DevelopedThousandsOfMilesApart(x,y) | DevelopedThousandsOfMilesApart(x,y)))", "all x y.((Bird(x) & Bird(y)) -> DevelopedKindsApart(x,y))", "all x y.((Bird(x) & Bird(y)) -> (DevelopedThousandsOfMilesApart(x) & DevelopedThousandsOfMilesApart(y)))"]}
{"id": "entailmentbank_validation_375", "nl": "if two things are thousands of miles apart then those two things are separate from each other.", "fol": "", "prediction": ["all x.((TwoThings(x) & ThousandsOfMilesApart(x)) -> SeparateFromEachOther(x))", "all x.((TwoThings(x) & ThousandOfMilesApart(x)) -> SeparateFromEachOther(x))", "all x.((TwoThings(x) & ThousandsOfMilesAbove(x)) -> SeparateFromEachOther(x))", "all x.((TwoThings(x) & TausendsOfMilesApart(x)) -> SeparateFromEachOther(x))", "all x.((TwoThings(x) & ThousandOfMilesAbove(x)) -> SeparateFromEachOther(x))", "all x.((TwoThings(x) & ThousandsOfMilesApart(x)) -> SeparateFrom(x,y))", "all x y.((TwoThings(x) & ThousandOfMilesApart(x)) -> SeparateFrom(x,y))", "all x y.((TwoThings(x) & ThousandsOfMilesApart(x)) -> SeparateFrom(x,y))", "all x.((TwoThings(x) & ThousandsOfMilesAbove(x)) -> SeparateFrom(x,y))", "all x y.((TwoThings(x) & ThousandOfMilesApart(x)) -> SeparateFromEachOther(x,y))", "all x y.((TwoThings(x) & ThousandOfMilesApart(x)) -> SeparateFromEachOther(y))", "all x.((TwoThings(x) & ThousandOfMilesApart(x)) -> SeparateFrom(x,y))", "all x y.((TwoThings(x) & ThousandsOfMilesApart(x)) -> SeparateFromEachOther(y))", "all x y.((TwoThings(x) & ThousandsOfMilesApart(x)) -> SeparateFromEachOther(x,y))", "all x.((TwoThings(x) & ThousandOfMilesAbove(x)) -> SeparateFrom(x,y))", "all x y.((TwoThings(x) & ThousandOfMilesAbove(x,y)) -> SeparateFrom(x,y))"]}
{"id": "entailmentbank_validation_376", "nl": "two birds developed separate from each other.", "fol": "", "prediction": ["all x y.((Bird(x) & Bird(y)) -> DevelopedSeparateFrom(x,y))", "all x y.((Bird(x) & Bird(y)) -> DevelopsSeparately(x,y))", "all x y.((Bird(x) & Bird(y)) -> DevelopedSeparately(x,y))", "all x y.((Bird(x) & Bird(y)) -> DevelopedSeparate(x,y))", "all x y.((Bird(x) & Bird(y)) -> (DevelopedSeparateFrom(x,y)))", "all x y z.((Bird(x) & Bird(y) & Bird(z)) -> (DevelopedSeparateFrom(x,y,z)))", "all x y z.((Bird(x) & Bird(y) & Bird(z)) -> DevelopsSeparately(x,y,z))", "all x y z.((Bird(x) & Bird(y) & Bird(z)) -> DevelopedSeparateFrom(x,y,z))", "all x.(Bird(x) -> (DevelopedSeparateFrom(x,y) & Bird(y)))", "all x y.((Bird(x) & Bird(y)) -> (DevelopedSeparately(x,y) & DevelopedSeparately(x,y)))", "all x y.((Bird(x) & Bird(y)) -> (DevelopedSeparate(x,y) & DevelopedSeparate(x,y)))", "all x y z.((Bird(x) & Bird(y) & Bird(z)) -> (DevelopedSeparately(x,y,z)))", "all x y z.((Bird(x) & Bird(y) & Bird(z)) -> DevelopedSeparate(x,y,z))", "all x y z.((Bird(x) & Bird(y) & Bird(z)) -> DevelopedSeparately(x,y,z))", "all x y.((Bird(x) & Bird(y)) -> (DevelopedSeparately(x,y) | DevelopedSeparately(x,y)))", "all x y z.((Bird(x) & Bird(y) & Bird(z)) -> (DevelopedSeparate(x,y,z)))"]}
{"id": "entailmentbank_validation_377", "nl": "two birds developed in separate environments under similar environmental pressures.", "fol": "", "prediction": ["all x y.((Bird(x) & Bird(y)) -> (DevelopedInSeparateEnvironments(x,y) & SimilarEnvironmentalPressures(y)))", "all x.(Bird(x) -> (DevelopedInSeparateEnvironments(x) & SimilarEnvironmentalPressures(x)))", "all x y.((Bird(x) & Bird(y)) -> (DevelopedInSeparateEnvironments(x,y) & SimilarEnvironmentalPressions(y)))", "all x y.((Bird(x) & Bird(y)) -> (DevelopedInSeparateEnvironments(x,y) & SimilarEnvironmentalPressures(x,y)))", "all x.(Bird(x) -> (DevelopedInSeparateEnvironments(x) & SimilarEnvironmentalPressions(x)))", "all x.(Bird(x) -> (DevelopedInSeparateEnvironments(x) & UnderSameEnvironmentalPressures(x)))", "all x y.((Bird(x) & Bird(y)) -> (DevelopedInSeparateEnvironments(x,y) & SimilarEnvironmentalPressions(x,y)))", "all x.(Bird(x) -> (DevelopedInSeparateEnvironments(x) & UnderSameEnvironmentalPressions(x)))", "all x y.((Bird(x) & Bird(y)) -> (DevelopedInSeparateEnvironments(x,y) & SimilarEnvironmentalPressures(x)))", "all x y.((Bird(x) & Bird(y)) -> (DevelopedInSeparateEnvironments(x,y) & SimilarEnvironmentalPressure(x,y)))", "all x y.((Bird(x) & Bird(y)) -> (DevelopedInSeparateEnvironments(x,y) & SimilarEnvironmentalPressions(x)))", "all x y.((Bird(x) & Bird(y)) -> (DevelopedInSeparateEnvironments(x) & SimilarEnvironmentalPressures(y)))", "all x y.((Bird(x) & Bird(y)) -> (DevelopedInSeparateEnvironments(x,y) & UnderSameEnvironmentalPressures(y)))", "all x y.((Bird(x) & Bird(y)) -> (DevelopedInSeparateEnvironments(x,y) & SimilarEnvironmentalPressure(y)))", "all x y.((Bird(x) & Bird(y)) -> (DevelopedInSeparateEnvironments(x,y) & UnderSameEnvironmentalPressions(y)))", "all x y.((Bird(x) & Bird(y)) -> (DevelopedInSeparateEnvironments(x,y) & UnderSameEnvironmentalPressures(x,y)))"]}
{"id": "entailmentbank_validation_378", "nl": "two birds from different taxonomic families developed in separate environments under similar environmental pressures.", "fol": "", "prediction": ["all x y z.((Bird(x) & TaxonomicFamily(y) & TaxonomicFamily(z) & FromDifferentFamily(x,y,z)) -> (DevelopedInSeparateEnvironments(x) & SimilarEnvironmentalPressures(x)))", "all x y.((Bird(x) & Bird(y) & TaxonomicFamily(x) & TaxonomicFamily(y)) -> (DevelopedInSeparateEnvironments(x,y) & SimilarEnvironmentalPressures(x,y)))", "all x y z.((Bird(x) & TaxonomicFamily(y) & TaxonomicFamily(z) & FromDifferentFamilies(x,y,z)) -> (DevelopedInSeparateEnvironments(x) & SimilarEnvironmentalPressures(x)))", "all x y.((Bird(x) & Bird(y) & TaxonomicFamily(x) & TaxonomicFamily(y)) -> (DevelopedInSeparateEnvironments(x,y) & SimilarEnvironmentalPressions(x,y)))", "all x y z.((Bird(x) & TaxonomicFamily(y) & TaxonomicFamily(z) & Different(x,y,z)) -> (DevelopedInSeparateEnvironments(x) & SimilarEnvironmentalPressures(x)))", "all x y z.((Bird(x) & TaxonomicFamily(y) & TaxonomicFamily(z) & FromDifferentFamilies(x,y,z)) -> (DevelopedInSeparateEnvironments(x) & SimilarEnvironmentalPressions(x)))", "all x y z.((Bird(x) & TaxonomicFamily(y) & TaxonomicFamily(z) & FromDifferentFamily(x,y,z)) -> (DevelopedInSeparateEnvironments(x) & SimilarEnvironmentalPressions(x)))", "all x y.((Bird(x) & Bird(y) & TaxonomicFamily(x,y) & TaxonomicFamily(y)) -> (DevelopedInSeparateEnvironments(x,y) & SimilarEnvironmentalPressures(x,y)))", "all x y.((Bird(x) & Bird(y) & TaxonomicFamily(x) & TaxonomicFamily(y)) -> (DevelopedInSeparateEnvironments(x) & SimilarEnvironmentalPressures(x)))", "all x y.((Bird(x) & Bird(y) & TaxonomicFamily(x,y) & TaxonomicFamily(y)) -> (DevelopedInSeparateEnvironments(x) & SimilarEnvironmentalPressures(x)))", "all x y.((Bird(x) & Bird(y) & TaxonomicFamily(x) & TaxonomicFamily(y)) -> (DevelopedInSeparateEnvironments(x,y) & SimilarEnvironmentalPressures(x)))", "all x y.((Bird(x) & Bird(y) & TaxonomicFamily(x,y)) -> (DevelopedInSeparateEnvironments(x,y) & SimilarEnvironmentalPressures(x,y)))", "all x y z.((Bird(x) & TaxonomicFamily(y) & TaxonomicFamily(z) & Different(x,y)) -> (DevelopedInSeparateEnvironments(x) & SimilarEnvironmentalPressures(x)))", "all x y.((Bird(x) & Bird(y) & TaxonomicFamily(x,y)) -> (DevelopedInSeparateEnvironments(x) & SimilarEnvironmentalPressures(x)))", "all x y z.((Bird(x) & TaxonomicFamily(y) & TaxonomicFamily(z) & Different(x,y,z)) -> (DevelopedInSeparateEnvironments(x) & SimilarEnvironmentalPressions(x)))", "all x y.((Bird(x) & Bird(y) & TaxonomicFamily(x) & TaxonomicFamily(y)) -> (DevelopedInSeparateEnvironments(x,y) & SimilarEnvironmentalPressions(x)))"]}
{"id": "entailmentbank_validation_379", "nl": "convergent evolution is when two species in different taxonomic families develop in different places under similar environmental pressures.", "fol": "", "prediction": ["all x y.((Species(x) & TaxonomicFamily(y) & Different(x,y)) -> ConvergentEvolution(x))", "all x y.((Species(x) & TaxonomicFamily(y) & DevelopsInDifferentPlaces(x,y)) -> ConvergentEvolution(x))", "all x y z.((Species(x) & TaxonomicFamily(y) & TaxonomicFamily(z) & DevelopsInDifferentPlaces(x,y,z)) -> ConvergentEvolution(x))", "all x y z.((Species(x) & TaxonomicFamily(y) & TaxonomicFamily(z) & DevelopInDifferentPlaces(x,y,z)) -> ConvergentEvolution(x))", "all x y.((Species(x) & TaxonomicFamily(y) & DevelopsInDifferentPlaces(x,y) & SimilarEnvironmentalPressures(x)) -> ConvergentEvolution(x))", "all x y z.((Species(x) & TaxonomicFamily(y) & TaxonomicFamily(z) & DifferentPlaces(x,y,z)) -> ConvergentEvolution(x))", "all x y z.((Species(x) & TaxonomicFamily(y) & TaxonomicFamily(z) & DevelopsInDifferentPlaces(x,z)) -> ConvergentEvolution(x))", "all x y z.((Species(x) & TaxonomicFamily(y) & TaxonomicFamily(z) & DifferentPlaces(x,z)) -> ConvergentEvolution(x))", "all x y.((Species(x) & TaxonomicFamily(y) & DevelopsInDifferentPlaces(x,y) & SimilarEnvironmentalPressures(x,y)) -> ConvergentEvolution(x))", "all x y.((Species(x) & TaxonomicFamily(y) & DevelopsInDifferentPlaces(x,y) & SimilarEnvironmentalPressions(x)) -> ConvergentEvolution(x))", "all x y z.((Species(x) & TaxonomicFamily(y) & TaxonomicFamily(z) & DevelopsInDifferentPlaces(x,y,z)) -> ConvergencentEvolution(x))", "all x y z.((Species(x) & TaxonomicFamily(y) & TaxonomicFamily(z) & DifferentPlaces(x) & SimilarEnvironmentalPressures(x)) -> ConvergentEvolution(x))", "all x y z.((Species(x) & TaxonomicFamily(y) & TaxonomicFamily(z) & DifferentPlaces(x) & SimilarEnvironmentalPressures(x)) -> ConvergentEvolution(x,y,z))", "all x y z.((Species(x) & TaxonomicFamily(y) & TaxonomicFamily(z) & DevelopsInDifferentPlaces(x,y,z)) -> ConvergentEvolution(x,y,z))", "all x y.((Species(x) & TaxonomicFamily(y) & Different(x,y)) -> ConvergentEvolution(x,y))", "all x y.((Species(x) & TaxonomicFamily(y) & Different(y)) -> ConvergentEvolution(x,y))"]}
{"id": "entailmentbank_validation_380", "nl": "an example of convergent evolution is two birds from different taxonomic families developing in separate environments under similar environmental pressures.", "fol": "", "prediction": ["all x.((Bird(x) & TaxonomicFamily(x) & TaxonomicFamily(x) & SeparateEnvironments(x) & SimilarEnvironmentalPressures(x)) -> ConvergentEvolution(x))", "all x.((Bird(x) & TaxonomicFamily(x) & TaxonomicFamily(x) & SeparateEnvironments(x) & SimilarEnvironmentalPressions(x)) -> ConvergentEvolution(x))", "all x.((Bird(x) & TaxonomicFamily(x) & TaxonomicFamily(x) & SeparateEnvironments(x)) -> ConvergentEvolution(x))", "all x.((Bird(x) & TaxonomicFamily(x) & DifferentFamily(x) & SeparateEnvironments(x) & SimilarEnvironmentalPressures(x)) -> ConvergentEvolution(x))", "all x.((Bird(x) & TaxonomicFamily(x) & TaxonomicFamily(x) & SeparateEnvironments(x) & SimilarEnvironmentPressures(x)) -> ConvergentEvolution(x))", "all x.((Bird(x) & TaxonomicFamily(x) & TaxonomicFamily(x) & SeparateEnvironment(x) & SimilarEnvironmentPressure(x)) -> ConvergentEvolution(x))", "all x.((Bird(x) & TaxonomicFamily(x) & DifferentFamily(x) & SeparateEnvironments(x) & SimilarEnvironmentalPressions(x)) -> ConvergentEvolution(x))", "all x.((Bird(x) & TaxonomicFamily(x) & TaxonomicFamily(x) & SeparateEnvironment(x) & SimilarEnvironmentPressures(x)) -> ConvergentEvolution(x))", "all x y.((Bird(x) & Bird(y) & TaxonomicFamily(x,y)) -> ConvergentEvolution(x))", "all x y.((Bird(x) & Bird(y) & TaxonomicFamily(x,y) & TaxonomicFamily(y)) -> ConvergentEvolution(x))", "all x y.((Bird(x) & Bird(y) & TaxonomicFamily(x) & TaxonomicFamily(y)) -> ConvergentEvolution(x,y))", "all x y.((Bird(x) & Bird(y) & TaxonomicFamily(x,y) & TaxonomicFamily(x,y)) -> ConvergentEvolution(x))", "all x y z.((Bird(x) & TaxonomicFamily(y) & TaxonomicFamily(z) & FromDifferentFamilies(x,y,z)) -> ConvergentEvolution(x))", "all x y.((Bird(x) & Bird(y) & TaxonomicFamily(x) & TaxonomicFamily(y) & SeparateEnvironments(x,y)) -> ConvergentEvolution(x))", "all x y.((Bird(x) & Bird(y) & TaxonomicFamily(x) & TaxonomicFamily(y)) -> ConvergentEvolution(x))", "all x y.((Bird(x) & Bird(y) & TaxonomicFamily(x,y) & TaxonomicFamily(y)) -> ConvergentEvolution(x,y))"]}
{"id": "entailmentbank_validation_381", "nl": "winter is a kind of season.", "fol": "", "prediction": ["all x.(Winter(x) -> Season(x))", "all x y.((Winter(x) & Season(y)) -> Season(x,y))", "all x.(Winter(x) -> Season(x))", "all x.((Winter(x) & Season(x)) -> Season(x))", "all x y.((Winter(x) & Season(y)) -> SortOf(x,y))", "all x y.((Winter(x) & Season(y)) -> Season(x))", "all x y.((Winter(x) & Season(y)) -> KindOf(x,y))", "all x y z.((Winter(x) & Season(y) & Season(z)) -> Season(x,y,z))", "all x y.((Winter(x) & Season(y)) -> Is(x,y))", "all x y z.((Winter(x) & Season(y) & Season(z)) -> SortOf(x,y,z))", "all x y z.((Winter(x) & Season(y) & Season(z)) -> Is(x,y,z))", "all x y.((Winter(x) & Season(y)) -> SeasonOf(x,y))", "all x y z.((Winter(x) & Season(y) & Season(z)) -> KindOf(x,y,z))", "all x y.((Winter(x) & Season(y)) -> FormOf(x,y))", "all x y z.((Winter(x) & Season(y) & Season(z)) -> Season(x,y))", "all x y.((Winter(x) & Season(y)) -> TypeOf(x,y))"]}
{"id": "entailmentbank_validation_382", "nl": "seasons cause change to the environment.", "fol": "", "prediction": ["all x y.((Season(x) & Environment(y)) -> CausesChange(x,y))", "all x.(Season(x) -> CausesChangeToEnvironment(x))", "all x y z.((Season(x) & Environment(y) & Season(z)) -> CausesChange(x,y,z))", "all x.(Seasons(x) -> CausesChangeToEnvironment(x))", "all x y z.((Season(x) & Environment(y) & Environment(z)) -> CausesChange(x,y,z))", "all x.(Season(x) -> CausesEnvironmentChange(x))", "all x y.((Seasons(x) & Environment(y)) -> CausesChange(x,y))", "all x.(Season(x) -> CausesChange(x))", "all x y z.((Season(x) & Environment(y) & Season(z)) -> CausesChangeTo(x,y,z))", "all x y.((Season(x) & Environment(y)) -> CausesChangeTo(x,y))", "all x y.((Season(x) & Environment(y) & CausesChange(x,y)) -> CausesChange(x,y))", "all x y z.((Season(x) & Environment(y) & Season(z)) -> CausesChange(x,z))", "all x y z.((Season(x) & Environment(y) & Weather(z)) -> CausesChange(x,y,z))", "all x.(Season(x) -> CausesEnvironmentalChange(x))", "all x y z.((Season(x) & Environment(y) & Season(z)) -> CausesChange(x,y))", "all x.(Season(x) -> CausesChange(x,Environment))"]}
{"id": "entailmentbank_validation_383", "nl": "the winter season can cause change to the environment.", "fol": "", "prediction": ["all x y.((WinterSeason(x) & Environment(y)) -> CanCauseChange(x,y))", "all x.(WinterSeason(x) -> CanCauseChangeToEnvironment(x))", "all x y.((WinterSeason(x) & Environment(y)) -> CausesChange(x,y))", "all x.(WinterSeason(x) -> CanCauseChange(x))", "all x y z.((WinterSeason(x) & Environment(y) & Environment(z)) -> CanCauseChange(x,y,z))", "all x.((WinterSeason(x) & Environment(y)) -> CanCauseChange(x,y))", "all x.(WinterSeason(x) -> CausesChangeToEnvironment(x))", "all x.(WinterSeason(x) -> CanCauseEnvironmentChange(x))", "all x.(WinterSeason(x) -> CausesEnvironmentChange(x))", "all x.((WinterSeason(x) & EnvironmentChange(x)) -> CanCause(x,y))", "all x.(WinterSeason(x) -> CausesEnvironmentalChange(x))", "all x.(WinterSeason(x) -> CanCauseChange(x,Environment))", "all x y z.((WinterSeason(x) & Environment(y) & Environment(z)) -> CausesChange(x,y,z))", "all x.((WinterSeason(x) & Environment(y)) -> CausesChange(x,y))", "all x.((WinterSeason(x) & Environment(x)) -> CanCauseChange(x))", "all x.(WinterSeason(x) -> CanCauseEnvironmentalChange(x))"]}
{"id": "entailmentbank_validation_384", "nl": "usually plants die or become dormant during the winter.", "fol": "", "prediction": ["all x.(Plant(x) -> (Dies(x) | Dormant(x)))", "all x.((Plant(x) & Winter(x)) -> (Dies(x) | Dormant(x)))", "all x.((Plant(x) & Winter(x)) -> (Die(x) | Dormant(x)))", "all x y.((Plant(x) & Winter(y)) -> (Dies(x,y) | Dormant(x,y)))", "all x.(Plant(x) -> (DiesDuringWinter(x) | DormantDuringWinter(x)))", "all x y.((Plant(x) & Winter(y)) -> (Die(x,y) | Dormant(x,y)))", "all x.((Plant(x) & Winter(y)) -> (Dies(x,y) | Dormant(x,y)))", "all x.(Plant(x) -> (DiesInWinter(x) | DormantDuringWinter(x)))", "all x.(Plant(x) -> (Die(x) | Dormant(x)))", "all x y.((Plant(x) & Winter(y)) -> (Dies(x) | Dormant(x)))", "all x.((Plant(x) & Winter(x)) -> (Dead(x) | Dormant(x)))", "all x.(Plant(x) -> (Dead(x) | Dormant(x)))", "all x.((Plant(x) & Winter(y)) -> (Dies(x) | Dormant(x)))", "all x.((Plant(x) & Winter(x)) -> (Derive(x) | Dormant(x)))", "all x.(Plant(x) -> (DiesInWinter(x) | DormantInWinter(x)))", "all x y.((Plant(x) & Winter(y)) -> (Die(x) | Dormant(x)))"]}
{"id": "entailmentbank_validation_385", "nl": "an example of a seasonal change is plants dying or becoming dormant in the winter.", "fol": "", "prediction": ["all x.((Plant(x) & (DyingInWinter(x) | DormantInWinter(x))) -> SeasonalChange(x))", "all x.((Plant(x) & (Dying(x) | Dormant(x))) -> SeasonalChange(x))", "all x.((Plant(x) & (DieseInWinter(x) | DormantInWinter(x))) -> SeasonalChange(x))", "all x.((Plant(x) & (Dead(x) | Dormant(x))) -> SeasonalChange(x))", "all x.(SeasonalChange(x) -> (PlantsDiedInWinter(x) | PlantsBecomeDormantInWinter(x)))", "all x.(SeasonalChange(x) -> (PlantsDiedInWinter(x) | PlantsBecomeDormantInWinter(x)))", "all x.(SeasonalChange(x) -> (PlantsDiedInWinter(x) | PlantsBecomeDormantInWinter(x)))", "all x.(SeasonalChange(x) -> (PlantsDiedInWinter(x) | PlantsBecomeDormantInWinter(x)))", "all x.(SeasonalChange(x) -> (PlantsDeriveInWinter(x) | PlantsBecomeDormantInWinter(x)))", "all x.(SeasonalChange(x) -> (PlantsDied(x) | PlantsBecomeDormant(x)))", "all x.(SeasonalChange(x) -> (PlantsDeriveInWinter(x) | PlantsBecomeDormantInWinter(x)))", "all x.(SeasonalChange(x) -> (PlantsDeadInWinter(x) | PlantsBecomeDormantInWinter(x)))", "all x.(SeasonalChange(x) -> (PlantsDied(x) | PlantsBecomeDormant(x)))", "all x.(SeasonalChange(x) -> (PlantsDied(x) | PlantsBecomeDormant(x)))", "all x.(SeasonalChange(x) -> (PlantsDied(x) | PlantsBecomeDormant(x)))", "all x.(SeasonalChange(x) -> (PlantsDying(x) | PlantsDormant(x)))"]}
{"id": "entailmentbank_validation_386", "nl": "an animal requires enough nutrients to survive.", "fol": "", "prediction": ["all x.((Animal(x) & RequiresEnoughNutrients(x)) -> Survives(x))", "all x.(Animal(x) -> RequiresEnoughNutrientsToSurvive(x))", "all x.(Animal(x) -> RequiresEnoughNutrients(x))", "all x.((Animal(x) & RequiresEnoughNutrientsToSurvive(x)) -> RequiresEnoughNutrients(x))", "all x.((Animal(x) & RequiresEnoughNutrients(x)) -> Survives(x))", "all x.((Animal(x) & RequiresEnoughNutrients(x)) -> Survive(x))", "all x.(Animal(x) -> RequiresEnoughNutrientsForSurvival(x))", "all x.((Animal(x) & RequiresEnoughNutrientsForSurvival(x)) -> RequiresEnoughNutrients(x))", "all x.((Animal(x) & RequiresSufficientNutrients(x)) -> Survives(x))", "all x y.((Animal(x) & Nutrients(y)) -> RequiresEnoughForSurvival(x,y))", "all x.((Animal(x) & RequiresEnoughNutrientsToSurvive(x)) -> RequiresEnoughNutrientsToSurvive(x))", "all x y.((Animal(x) & Nutrient(y)) -> RequiresEnoughForSurvival(x,y))", "all x y.((Animal(x) & Nutrients(y)) -> RequiresEnoughToSurvive(x,y))", "all x y.((Animal(x) & Nutrient(y)) -> RequiresEnoughToSurvive(x,y))", "all x.((Animal(x) & RequiresEnoughNutrientsForSurvival(x)) -> RequiresEnoughNutrientsForSurvival(x))", "all x.((Animal(x) & NeedsEnoughNutrients(x)) -> Survives(x))"]}
{"id": "entailmentbank_validation_387", "nl": "eating food is used to get nutrients by animals.", "fol": "", "prediction": ["all x y.((EatingFood(x) & Animal(y)) -> GetsNutrients(x,y))", "all x y.((EatingFood(x) & Animal(y)) -> UsedToGetNutrients(x,y))", "all x y.((EatsFood(x) & Animal(y)) -> GetsNutrients(x,y))", "all x y.((EatingFood(x) & Animal(y)) -> GetNutrients(x,y))", "all x y z.((EatingFood(x) & Animal(y) & Nutrient(z)) -> UsedToGet(x,y,z))", "all x y z.((EatingFood(x) & Animal(y) & Nutrients(z)) -> UsedToGet(x,y,z))", "all x y.((EatingFood(x) & Animal(y)) -> GetsNutrientsBy(x,y))", "all x y.((EatsFood(x) & Animal(y)) -> UsedToGetNutrients(x,y))", "all x y.((EatingFood(x) & Animal(y)) -> UsesToGetNutrients(x,y))", "all x.(EatingFood(x) -> UsedToGetNutrientsByAnimals(x))", "all x y z.((EatingFood(x) & Animal(y) & Nutrients(z)) -> Gets(x,y,z))", "all x.((EatingFood(x) & Animal(y)) -> GetsNutrients(x,y))", "all x y.((EatsFood(x) & Animal(y)) -> GetsNutrientsBy(x,y))", "all x y z.((EatingFood(x) & Animal(y) & Nutrient(z)) -> Gets(x,y,z))", "all x.(EatingFood(x) -> UsedToGetNutrients(x))", "all x y z.((EatingFood(x) & Animal(y) & Nutrient(z)) -> UsedToGet(y,z))"]}
{"id": "entailmentbank_validation_388", "nl": "an animal needs to eat food for nutrients.", "fol": "", "prediction": ["all x.(Animal(x) -> NeedsToEatFoodForNutrients(x))", "all x y.((Animal(x) & Food(y)) -> NeedsToEatForNutrients(x,y))", "all x.(Animal(x) -> NeedsFoodForNutrients(x))", "all x.(Animal(x) -> NeedsToEatFood(x))", "all x.(Animal(x) -> NeedsToEatForNutrients(x))", "all x y.((Animal(x) & Food(y)) -> NeedsToEat(x,y))", "all x.((Animal(x) & NeedsFood(x)) -> NeedsNutrients(x))", "all x.((Animal(x) & NeedsFood(x)) -> EatsForNutrients(x))", "all x.((Animal(x) & NeedsFoodForNutrients(x)) -> EatsForNutrients(x))", "all x.((Animal(x) & NeedsFoodForNutrients(x)) -> NeedsFoodForNutrients(x))", "all x y z.((Animal(x) & Food(y) & Nutrients(z)) -> NeedsToEat(x,y,z))", "all x y.((Animal(x) & Food(y)) -> NeedsForNutrients(x,y))", "all x y z.((Animal(x) & Food(y) & Nutrients(z)) -> NeedsToEatFor(x,y,z))", "all x y z.((Animal(x) & Food(y) & Nutrients(z)) -> NeedsToEatForNutrients(x,y,z))", "all x.(Animal(x) -> NeedsFood(x))", "all x.((Animal(x) & NeedsNutrients(x)) -> EatsFoodForNutrients(x))"]}
{"id": "entailmentbank_validation_389", "nl": "plants are a source of food for animals.", "fol": "", "prediction": ["all x y.((Plant(x) & Animal(y)) -> SourceOfFood(x,y))", "all x y z.((Plant(x) & Animal(y) & Animal(z)) -> SourceOfFood(x,y,z))", "all x.(Plant(x) -> SourceOfFoodForAnimals(x))", "all x.(Plant(x) -> SourceOfFood(x))", "all x y.((Plant(x) & Animal(y)) -> SourceOfFoodFor(x,y))", "all x.(Plant(x) -> FoodSourceForAnimals(x))", "all x y z.((Plant(x) & Animal(y) & Animal(z)) -> SourceOfFoodFor(x,y,z))", "all x y z.((Plant(x) & Animal(y) & Animal(z)) -> FoodSource(x,y,z))", "all x.(Plant(x) -> SourceOfFood(x,Animals))", "all x y z.((Plant(x) & Animal(y) & FoodSource(z)) -> SourceOf(x,y,z))", "all x y.((Plant(x) & Animal(y)) -> FoodSource(x,y))", "all x.((Plant(x) & Animal(y)) -> SourceOfFood(x,y))", "all x y z.((Plant(x) & Animal(y) & FoodSource(z)) -> SourceOfFood(x,y,z))", "all x y z.((Plant(x) & Animal(y) & Animal(z)) -> SourceOfFood(x,z))", "all x y.((Plant(x) & Animal(y) & SourceOfFood(x,y)) -> SourceOfFood(x,y))", "all x y.((Plant(x) & Animal(y) & SourceOfFood(x,y)) -> FoodSource(x,y))"]}
{"id": "entailmentbank_validation_390", "nl": "an animal can eat plants for nutrients.", "fol": "", "prediction": ["all x y.((Animal(x) & Plant(y)) -> CanEatForNutrients(x,y))", "all x.(Animal(x) -> CanEatPlants(x))", "all x.(Animal(x) -> CanEatPlantsForNutrients(x))", "all x y.((Animal(x) & Plant(y)) -> CanEat(x,y))", "all x y.((Animal(x) & Plant(y)) -> EatsForNutrients(x,y))", "all x y z.((Animal(x) & Plant(y) & Nutrient(z)) -> CanEatForNutrients(x,y,z))", "all x y.((Animal(x) & Plant(y) & EatsForNutrients(x,y)) -> CanEatForNutrients(x,y))", "all x y z.((Animal(x) & Plant(y) & Nutrients(z)) -> CanEatForNutrients(x,y,z))", "all x y z.((Animal(x) & Plant(y) & Nutrient(z)) -> CanEat(x,y,z))", "all x y z.((Animal(x) & Plant(y) & Nutrients(z)) -> CanEat(x,y,z))", "all x.(Animal(x) -> EatsPlantsForNutrients(x))", "all x y z.((Animal(x) & Plant(y) & Nutrient(z)) -> EatsForNutrients(x,y,z))", "all x y z.((Animal(x) & Plant(y) & Nutrient(z)) -> CanEatForNutrient(x,y,z))", "all x y z.((Animal(x) & Plant(y) & Nutrients(z)) -> EatsForNutrients(x,y,z))", "all x y.((Animal(x) & Plant(y)) -> EatForNutrients(x,y))", "all x.(Animal(x) -> EatsPlants(x))"]}
{"id": "entailmentbank_validation_391", "nl": "an example of seasonal change is some animals' food dying in the winter.", "fol": "", "prediction": ["all x.((Animal(x) & DiedInWinter(x)) -> SeasonalChange(x))", "all x.((AnimalFood(x) & DiedInWinter(x)) -> SeasonalChange(x))", "all x y.((Animal(x) & Winter(y)) -> DiesIn(x,y))", "all x.((Animal(x) & FoodDiesingInWinter(x)) -> SeasonalChange(x))", "all x.((Animal(x) & WinterFoodDeath(x)) -> SeasonalChange(x))", "all x.((Animal(x) & WinterFood(x)) -> SeasonalChange(x))", "all x y.((Animal(x) & SeasonalChange(y)) -> DiesInWinter(x,y))", "all x y.((Animal(x) & SeasonalChange(x) & Winter(y)) -> DiesIn(x,y))", "all x.(SeasonalChange(x) -> (AnimalsFoodDiesingInWinter(x)))", "all x.((Animal(x) & SeasonalChange(x)) -> DiesInWinter(x))", "all x.((AnimalFood(x) & Winter(x)) -> SeasonalChange(x))", "all x y.((Animal(x) & Winter(y)) -> DiedIn(x,y))", "all x y.((Animal(x) & SeasonalChange(x)) -> DiesInWinter(x,y))", "all x.(SeasonalChange(x) -> (AnimalsFoodDeadInWinter(x)))", "all x.(SeasonalChange(x) -> (AnimalFoodDeadInWinter(x)))", "all x.((Animal(x) & Winter(x)) -> DiesIn(x,y))"]}
{"id": "entailmentbank_validation_392", "nl": "an example of preparing is storing something for use later.", "fol": "", "prediction": ["all x.(Preparing(x) -> StoresForUseLater(x))", "all x.((Preparing(x) & StoresForUseLater(x)) -> PreparesForUse(x))", "all x.((ExempleOfPreparing(x) & StoresForUseLater(x)) -> PreparesForUse(x))", "all x.((Preparing(x) & StoresForUseLater(x)) -> Prepares(x))", "all x.(Preparing(x) -> StoresForUseLater(x))", "all x y.((Preparing(x) & Object(y)) -> StoresForUseLater(x,y))", "all x.((Preparing(x) & StoresForUse(x)) -> PreparesForUse(x))", "all x y.((Preparing(x) & Product(y)) -> StoresForUseLater(x,y))", "all x.(Preparing(x) -> StoresForUse(x))", "all x y.((Preparing(x) & Object(y)) -> StoresForUse(x,y))", "all x.((ExempleOfPreparing(x) & StoresForUseLater(x)) -> Prepares(x))", "all x y.((Preparing(x) & Product(y)) -> StoresForUse(x,y))", "all x.(Prepares(x) -> StoresForUseLater(x))", "all x.((Preparing(x) & StoresForUse(x)) -> Prepares(x))", "all x.((ExempleOfPreparing(x) & StoresForUse(x)) -> PreparesForUse(x))", "all x.((Preparing(x) & Stores(x)) -> UsesLater(x))"]}
{"id": "entailmentbank_validation_393", "nl": "if an animal relies on plants for food then that animal must store enough food to last through the winter.", "fol": "", "prediction": ["all x.((Animal(x) & ReliesOnPlants(x)) -> StoresEnoughFoodForWinter(x))", "all x.((Animal(x) & ReliesOnPlantsForFood(x)) -> StoresEnoughFoodForWinter(x))", "all x.((Animal(x) & ReliesOnPlants(x)) -> StoresEnoughFood(x))", "all x y.((Animal(x) & Plant(y) & ReliesOnForFood(x,y)) -> StoresEnoughFoodForWinter(x,y))", "all x y.((Animal(x) & Plant(y) & ReliesOnForFood(x,y)) -> StoresEnoughFood(x,y))", "all x y.((Animal(x) & Plant(y) & ReliesOnForFood(x,y)) -> StoresEnoughFoodForWinter(x))", "all x.((Animal(x) & ReliesOnPlantsForFood(x)) -> StoresEnoughFood(x))", "all x y.((Animal(x) & ReliesOnPlants(x) & Winter(y)) -> StoresEnoughFood(x,y))", "all x y.((Animal(x) & ReliesOnPlants(x)) -> StoresEnoughFood(x,y))", "all x y z.((Animal(x) & Plant(y) & Winter(z)) -> ReliesOnForFood(x,y,z))", "all x y.((Animal(x) & Plant(y)) -> ReliesOnForFood(x,y))", "all x y.((Animal(x) & ReliesOnPlants(x)) -> StoresEnoughFoodForWinter(x,y))", "all x.(ReliesOnPlantsForFood(x) -> StoresEnoughFoodForWinter(x))", "all x y.((Animal(x) & ReliesOnPlants(x,y)) -> StoresEnoughFood(x,y))", "all x y.((Animal(x) & ReliesOnPlantsForFood(x)) -> StoresEnoughFoodForWinter(x,y))", "all x y.((Animal(x) & ReliesOnPlantsForFood(x)) -> StoresEnoughFood(x,y))"]}
{"id": "entailmentbank_validation_394", "nl": "an example of preparing is an animal storing food to last through the winter.", "fol": "", "prediction": ["all x y.((Animal(x) & Winter(y)) -> StoresFood(x,y))", "all x.(Preparing(x) -> (Animal(x) & StoresFood(x) & LastsThroughWinter(x)))", "all x.((Animal(x) & StoresFood(x)) -> PreparesForWinter(x))", "all x.((Animal(x) & StoresFood(x) & LastsThroughWinter(x)) -> PreparesForWinter(x))", "all x.(Preparing(x) -> (Animal(x) & StoresFood(x) & LastsThroughWinter(x)))", "all x.((Animal(x) & StoresFood(x) & LastsThroughWinter(x)) -> Prepares(x))", "all x.(Preparing(x) -> (Animal(x) & StoresFood(x) & LastsThroughoutWinter(x)))", "all x.(Preparing(x) -> (AnimalStoresFood(x) & LastsThroughWinter(x)))", "all x.(Preparing(x) -> (Animal(x) & StoresFood(x) & LastsWinter(x)))", "all x y.((Animal(x) & Animal(y) & StoresFood(x,y)) -> PreparesForWinter(x))", "all x.((Animal(x) & StoresFood(x) & LastsThroughoutWinter(x)) -> PreparesForWinter(x))", "all x y z.((Animal(x) & Food(y) & Winter(z)) -> StoresForWinter(x,y,z))", "all x y.((Animal(x) & Winter(y) & StoresFood(x,y)) -> Prepares(x,y))", "all x.(Preparing(x) -> (AnimalStoresFood(x) & LastsThroughWinter(x)))", "all x.((Animal(x) & StoresFood(x) & LastsWinter(x)) -> PreparesForWinter(x))", "all x y.((Animal(x) & Winter(y) & StoresFood(x,y)) -> PreparesForWinter(x))"]}
{"id": "entailmentbank_validation_395", "nl": "an example of preparing for seasonal change is an animal storing food for the winter.", "fol": "", "prediction": ["all x.((Animal(x) & StoresFoodForWinter(x)) -> PreparesForSeasonalChange(x))", "all x y.((Animal(x) & Winter(y)) -> PreparesForSeasonalChange(x,y))", "all x.((Animal(x) & StoresFoodForWinter(x)) -> PreparesForSeasonalChange(x))", "all x.((Animal(x) & StoresFoodForWinter(x)) -> PreparingForSeasonalChange(x))", "all x y.((Animal(x) & Winter(y)) -> PreparingForSeasonalChange(x,y))", "all x.((Animal(x) & StoresFood(x,Winter)) -> PreparesForSeasonalChange(x))", "all x.((Animal(x) & StoresFood(x)) -> PreparesForSeasonalChange(x))", "all x.(PreparingForSeasonalChange(x) -> (Animal(x) & StoresFoodForWinter(x)))", "all x.((Animal(x) & StoresFood(x,winter)) -> PreparesForSeasonalChange(x))", "all x.(PreparingForSeasonalChange(x) -> (AnimalStoresFoodForWinter(x)))", "all x y z.((Animal(x) & SeasonalChange(y) & Winter(z)) -> StoresFoodFor(x,y,z))", "all x y.((Animal(x) & Animal(y) & StoresFoodForWinter(x,y)) -> PreparesForSeasonalChange(x))", "all x y.((Animal(x) & Animal(y) & StoresFoodForWinter(x,y)) -> PreparesForSeasonalChange(x,y))", "all x y.((Animal(x) & WinterFood(y)) -> PreparesForSeasonalChange(x,y))", "all x.(PreparingForSeasonalChange(x) -> (AnimalStoresFoodForWinter(x)))", "all x y.((Animal(x) & Winter(y)) -> PreparesForSeasonalChange(x,y))"]}
{"id": "entailmentbank_validation_396", "nl": "a squirrel is a kind of animal.", "fol": "", "prediction": ["all x.(Squirrel(x) -> Animal(x))", "all x.(Squirrel(x) -> Animal(x))", "all x y.((Squirrel(x) & Animal(y)) -> Animal(x))", "all x.(Spider(x) -> Animal(x))", "exists x.(Squirrel(x) & Animal(x))", "all x y.((Squirrel(x) & Animal(y)) -> Animal(x,y))", "all x.((Squirrel(x) & Animal(x)) -> Animal(x))", "all x.(Sparrow(x) -> Animal(x))", "all x y.((Squirrel(x) & Animal(y)) -> (Animal(x) & Animal(y)))", "all x y.((Squirrel(x) & Animal(y)) -> KindOf(x,y))", "all x.exists y.(Squirrel(x) & Animal(y) & LivesIn(x,y))", "all x y.((Squirrel(x) & Animal(y)) -> Is(x,y))", "all x y.((Squirrel(x) & Animal(y)) -> SortOf(x,y))", "all x.(Snake(x) -> Animal(x))", "all x.(Squash(x) -> Animal(x))", "all x y.((Squirrel(x) & Animal(y)) -> Animal(x))"]}
{"id": "entailmentbank_validation_397", "nl": "an example of preparing for seasonal change is a squirrel storing food for the winter.", "fol": "", "prediction": ["all x.((Squirrel(x) & StoresFoodForWinter(x)) -> PreparesForSeasonalChange(x))", "all x.(PreparingForSeasonalChange(x) -> (Squirrel(x) & StoresFoodForWinter(x)))", "all x.((Squirrel(x) & StoresFoodForWinter(x)) -> PreparesForSeasonalChange(x))", "all x.((Squirrel(x) & StoresFoodForWinter(x)) -> PreparingForSeasonalChange(x))", "all x y.((Squirrel(x) & Squirrel(y) & StoresFoodForWinter(x,y)) -> PreparesForSeasonalChange(x))", "all x y.((Squirrel(x) & StoresFoodForWinter(x,y)) -> PreparesForSeasonalChange(x))", "all x.((Squirrel(x) & StoresFood(x)) -> PreparesForSeasonalChange(x))", "all x y.((Squirrel(x) & StoresFood(x,y)) -> PreparesForSeasonalChange(x))", "all x y.((Squirrel(x) & StoresFoodForWinter(x)) -> PreparesForSeasonalChange(x))", "all x y.((Squirrel(x) & Winter(y)) -> PreparesForSeasonalChange(x,y))", "all x y.((Squirrel(x) & StoresFoodForWinter(x)) -> PreparesForSeasonalChange(x,y))", "all x.((Squirrel(x) & StoresFood(x,Winter)) -> PreparesForSeasonalChange(x))", "all x y.((Squirrel(x) & Food(y) & StoresForWinter(x,y)) -> PreparesForSeasonalChange(x))", "all x.(PreparingForSeasonalChange(x) -> (Squirrel(x) & StoresFoodForWinter(x)))", "all x y.((Squirrel(x) & Squirrel(y) & StoresFoodForWinter(x,y)) -> PreparesForSeasonalChange(x,y))", "all x y.((Squirrel(x) & Squirrel(y) & StoresFoodForWinter(x)) -> PreparesForSeasonalChange(x,y))"]}
{"id": "entailmentbank_validation_398", "nl": "nut is a kind of food.", "fol": "", "prediction": ["all x.(Nut(x) -> Food(x))", "all x.(Nutty(x) -> Food(x))", "all x y.((Nut(x) & Food(y)) -> Food(x))", "all x y.((Nut(x) & Food(y)) -> Food(x,y))", "all x.(Not(x) -> Food(x))", "all x.(Nut(x) -> Food(x))", "all x.((Nut(x) & Food(x)) -> Food(x))", "exists x.(Nut(x) & Food(x))", "all x.(Nut(x) -> Food(x))", "all x y.((Nut(x) & Food(y)) -> Is(x,y))", "all x y.((Nut(x) & Food(y)) -> Food(y))", "all x y.((Nut(x) & Food(y)) -> (Food(x) & Food(y)))", "all x y.((Nut(x) & Food(y)) -> KindOf(x,y))", "all x y.((Nut(x) & Food(y)) -> TypeOf(x,y))", "all x y.((Nut(x) & Food(y)) -> SortOf(x,y))", "all x y.((Nut(x) & Food(y)) -> Food(z))"]}
{"id": "entailmentbank_validation_399", "nl": "an example of preparing for seasonal change is an squirrel storing nuts for the winter.", "fol": "", "prediction": ["all x.((Squirrel(x) & StoresNutsForWinter(x)) -> PreparesForSeasonalChange(x))", "all x.((Squirrel(x) & StoresNuts(x)) -> PreparesForSeasonalChange(x))", "all x y.((Squirrel(x) & StoresNuts(x,y)) -> PreparesForSeasonalChange(x))", "all x.((Squirrel(x) & StoresNutsForWinter(x)) -> PreparesForSeasonalChange(x))", "all x.((Squirrel(x) & StoresNuts(x) & Winter(x)) -> PreparesForSeasonalChange(x))", "all x y.((Squirrel(x) & Squirrel(y) & StoresNutsForWinter(x,y)) -> PreparesForSeasonalChange(x))", "all x.(PreparingForSeasonalChange(x) -> (Squirrel(x) & StoresNutsForWinter(x)))", "all x y.((Squirrel(x) & Squirrel(y) & StoresNuts(x,y)) -> PreparesForSeasonalChange(x))", "all x.((Squirrel(x) & StoresNuts(x,Winter)) -> PreparesForSeasonalChange(x))", "all x y z.((Squirrel(x) & SeasonalChange(y) & Nuts(z)) -> StoresForWinter(x,y,z))", "all x.((Squirrel(x) & StoresNutsForWinter(x)) -> PreparingForSeasonalChange(x))", "all x y.((Squirrel(x) & StoresNuts(x,y)) -> PreparesForSeasonalChange(x,y))", "all x y.((Squirrel(x) & Squirrel(y) & StoresNutsForWinter(x,y)) -> PreparesForSeasonalChange(x,y))", "all x y z.((Squirrel(x) & SeasonalChange(y) & Nuts(z) & StoresForWinter(x,z)) -> PreparesFor(x,y))", "all x.((Squirrel(x) & StoresNuts(x)) -> PreparesForSeasonalChange(x))", "all x y.((Squirrel(x) & StoresNutsForWinter(x)) -> PreparesForSeasonalChange(x,y))"]}
{"id": "entailmentbank_validation_400", "nl": "an animal requires warmth for survival.", "fol": "", "prediction": ["all x.(Animal(x) -> RequiresWarmthForSurvival(x))", "all x.((Animal(x) & RequiresWarmthForSurvival(x)) -> RequiresWarmthForSurvival(x))", "all x.((Animal(x) & RequiresWarmth(x)) -> Survival(x))", "all x.((Animal(x) & RequiresWarmthForSurvival(x)) -> RequiresWarmth(x))", "all x y.((Animal(x) & Animal(y)) -> RequiresWarmthForSurvival(x,y))", "all x.(Animal(x) -> RequiresWarmth(x))", "all x.((Animal(x) & RequiresWarmth(x)) -> RequiresWarmthForSurvival(x))", "all x.((Animal(x) & RequiresWarmth(x)) -> Survival(x))", "all x.((Animal(x) & RequiresWarmth(x)) -> RequiresWarmth(x))", "all x.(RequiresWarmthForSurvival(x) -> Animal(x))", "all x.((Animal(x) & RequiresWarmth(x)) -> Survives(x))", "all x y.((Animal(x) & Warmth(y)) -> RequiresForSurvival(x,y))", "all x y.((Animal(x) & Temperature(y)) -> RequiresForSurvival(x,y))", "all x.((Animal(x) & RequiresWarmth(x)) -> RequiresForSurvival(x))", "all x y.((Animal(x) & Animal(y)) -> RequiresWarmth(x,y))", "all x.((Animal(x) & RequiresWarmth(x)) -> Survives(x))"]}
{"id": "entailmentbank_validation_401", "nl": "winter has cold temperatures / weather.", "fol": "", "prediction": ["all x.(Winter(x) -> (ColdTemperatures(x) & ColdWeather(x)))", "all x.(Winter(x) -> (ColdTemperatures(x) | ColdWeather(x)))", "all x.(Winter(x) -> ColdTemperatures(x))", "all x y.((Winter(x) & ColdTemperatures(y)) -> ColdWeather(x))", "all x y.((Winter(x) & ColdTemperatures(y)) -> ColdWeather(x,y))", "all x y.((Winter(x) & Winter(y)) -> (ColdTemperatures(x,y) & ColdWeather(x,y)))", "all x.((Winter(x) & ColdTemperatures(x)) -> ColdWeather(x))", "all x.(Winter(x) -> (ColdTemperatures(x) & ColdWeather(x)))", "all x y.((Winter(x) & ColdTemperatures(y) & ColdWeather(x)) -> Has(x,y))", "all x y.((Winter(x) & Winter(y)) -> (ColdTemperatures(x,y) | ColdWeather(x,y)))", "all x y.((Winter(x) & Winter(y)) -> (ColdTemperatures(x) & ColdWeather(x)))", "all x.(Winter(x) -> ColdTemperaturesAndWeather(x))", "all x y.((Winter(x) & ColdTemperatures(y) & ColdWeather(x)) -> ColdTemperatures(x,y))", "all x.(Winter(x) -> (ColdTemperatures(x) & ColdWeather(x)))", "exists x.(Winter(x) & ColdTemperatures(x) & ColdWeather(x))", "all x y.((Winter(x) & ColdTemperatures(y) & ColdWeather(y)) -> Has(x,y))"]}
{"id": "entailmentbank_validation_402", "nl": "some animals must move to warmer climates in the winter.", "fol": "", "prediction": ["exists x.(Animal(x) & MovesToWarmerClimates(x))", "exists x.(Animal(x) & MovesToWarmerClimate(x))", "exists x.(Animal(x) & MovesToWarmerClimatesInWinter(x))", "exists x y.(Animal(x) & Winter(y) & MovesToWarmerClimates(x,y))", "exists x.(Animal(x) & Winter(x) & MovesToWarmerClimates(x))", "exists x y.(Animal(x) & Winter(y) & MovesToWarmerClimate(x,y))", "exists x.(Animal(x) & MustMoveToWarmerClimates(x))", "exists x.(Animal(x) & MustMoveToWarmerClimate(x))", "exists x.(Animal(x) & Winter(y) & MovesToWarmerClimates(x,y))", "exists x.(Animal(x) & MustMoveToWarmerClimatesInWinter(x))", "exists x.(Animal(x) & MoveToWarmerClimates(x))", "exists x.(Animal(x) & Winter(x) & MovesToWarmerClimate(x))", "exists x.(Animal(x) & MoveToWarmerClimate(x))", "exists x.(Animal(x) & MovesToWarmerClimates(x,winter))", "exists x.(Animal(x) & MovesToWarmerClimates(x) & Winter(x))", "exists x.(Animal(x) & MovesToWarmerClimate(x,winter))"]}
{"id": "entailmentbank_validation_403", "nl": "migration is when animals move themselves from a cooler climate to a warmer climate for the winter.", "fol": "", "prediction": ["all x y z.((Animal(x) & CoolerClimate(y) & WarmerClimate(z)) -> MigratesForWinter(x,y,z))", "all x y.((Animal(x) & CoolerClimate(y) & WarmerClimate(y)) -> MigratesForWinter(x,y))", "all x y.((Animal(x) & CoolerClimate(y) & WarmerClimate(x,y)) -> MigratesForWinter(x,y))", "all x y.((Animal(x) & CoolerClimate(y) & WarmerClimate(z)) -> MigratesForWinter(x,y,z))", "all x y z.((Animal(x) & CoolerClimate(y) & WarmerClimate(z)) -> MigrateForWinter(x,y,z))", "all x y.((Animal(x) & CoolerClimate(y) & WarmerClimate(x)) -> MigratesForWinter(x,y))", "all x y.((Animal(x) & CoolerClimate(y) & WarmerClimate(x,y)) -> MigratesForWinter(x))", "all x y z.((Animal(x) & CoolerClimate(y) & WarmerClimate(z)) -> MovesForWinter(x,y,z))", "all x y.((Animal(x) & CoolerClimate(y) & WarmerClimate(y)) -> MigrateForWinter(x,y))", "all x y.((Animal(x) & CoolerClimate(y)) -> MovesToWarmerClimate(x,y))", "all x y z.((Animal(x) & CoolerClimate(y) & WarmerClimate(z)) -> Migrate(x,y,z))", "all x y z.((Animal(x) & CoolerClimate(y) & WarmerClimate(z)) -> MigratesForWinter(x,y))", "all x y.((Animal(x) & CoolerClimate(y) & WarmerClimate(y)) -> MovesForWinter(x,y))", "all x y z.((Animal(x) & CoolerClimate(y) & WarmerClimate(z)) -> MigratesToForWinter(x,y,z))", "all x y.((Animal(x) & CoolerClimate(y)) -> WarmerClimate(x,y))", "all x.(Migration(x) -> (AnimalsMoveFromColderClimateToWarmerClimate(x)))"]}
{"id": "entailmentbank_validation_404", "nl": "an example of migration is moving to a warmer climate in the winter.", "fol": "", "prediction": ["all x.(Migration(x) -> (MovingToWarmerClimate(x) & Winter(x)))", "all x.(Migration(x) -> (MovingToWarmerClimate(x) & Winter(x)))", "all x y z.((Migratation(x) & WarmerClimate(y) & Winter(z)) -> MovingTo(x,y,z))", "all x y.((Migratation(x) & Winter(y)) -> MovesToWarmerClimate(x,y))", "all x.(Migratation(x) -> (MovingToWarmerClimate(x) & Winter(x)))", "all x.(Migratation(x) -> (MovingToWarmerClimate(x) & Winter(x)))", "all x y z.((Migratation(x) & WarmerClimate(y) & Winter(z)) -> MovesTo(x,y,z))", "all x y.((Migratation(x) & WarmerClimate(y)) -> MovesInWinter(x,y))", "all x.(Migration(x) -> (MovingToWarmerClimateInWinter(x)))", "all x.(Migration(x) -> (MovingToWarmerClimateInWinter(x)))", "all x.(Migration(x) -> (MovesToWarmerClimate(x) & Winter(x)))", "all x y.((Migratation(x) & WarmerClimate(y) & Winter(y)) -> MovingTo(x,y))", "all x y.((Migratation(x) & WarmerClimate(y) & Winter(y)) -> MovesTo(x,y))", "all x y.((Migratation(x) & WarmerClimate(y)) -> MovingInWinter(x,y))", "all x y.((Migrating(x) & WarmerClimate(y)) -> MovesInWinter(x,y))", "all x y z.((Migratation(x) & WarmerClimate(y) & Winter(z)) -> MigratingTo(x,y,z))"]}
{"id": "entailmentbank_validation_405", "nl": "some birds fly south for the winter.", "fol": "", "prediction": ["exists x.(Bird(x) & FliesSouthForWinter(x))", "exists x.(Bird(x) & FlySouthForWinter(x))", "exists x.(Bird(x) & FliesSouth(x))", "exists x.(Bird(x) & FlySouth(x))", "exists x.(Bird(x) & FlySouthForWinter(x))", "exists x.(Bird(x) & FlySouth(x))", "exists x.(Bird(x) & Fly(x) & SouthForWinter(x))", "exists x.(Bird(x) & FliesSouthForWinter(x))", "exists x.(Bird(x) & FlySouth(x) & Winter(x))", "exists x.(Bird(x) & FloatsSouthForWinter(x))", "exists x.(Bird(x) & Fly(x,y) & Winter(y))", "exists x.(Bird(x) & FlysSouthForWinter(x))", "exists x y.(Bird(x) & Bird(y) & FlySouthForWinter(x,y))", "exists x.(Bird(x) & FliesSouth(x))", "exists x y.(Bird(x) & Bird(y) & FliesSouthForWinter(x,y))", "exists x.(Bird(x) & Fly(x,y) & SouthForWinter(y))"]}
{"id": "entailmentbank_validation_406", "nl": "an example of migration is birds flying south in the winter.", "fol": "", "prediction": ["all x.((Bird(x) & FlyingSouthInWinter(x)) -> Migration(x))", "all x.((Bird(x) & FlyingSouthInWinter(x)) -> MigrationExample(x))", "all x.((Bird(x) & FlyingSouthInWinter(x)) -> Migratation(x))", "all x.((Bird(x) & FlyingSouthInWinter(x)) -> Migratory(x))", "all x.(Migration(x) -> (Birds(x) & FlyingSouthInWinter(x)))", "all x.((Bird(x) & FlyingSouthInWinter(x)) -> Migration(x))", "all x.(Migration(x) -> (Birds(x) & FlyingSouthInWinter(x)))", "all x.((Bird(x) & FlyingSouth(x)) -> Migration(x))", "all x y.((Bird(x) & Winter(y) & FlyingSouth(x,y)) -> Migration(x))", "all x.(Migration(x) -> (Birds(x) & FlyingSouthInWinter(x)))", "all x.(Migration(x) -> (Birds(x) & FlySouthInWinter(x)))", "all x.(Migration(x) -> (Birds(x) & FlyingSouthInWinter(x)))", "all x.((Bird(x) & FlyingSouth(x)) -> Migratation(x))", "all x y.((Bird(x) & Winter(y) & FlyingSouth(x,y)) -> Migratation(x))", "all x.((Bird(x) & FlyingSouth(x)) -> Migratory(x))", "all x.((Bird(x) & FlyingSouth(x) & Winter(x)) -> Migration(x))"]}
{"id": "entailmentbank_validation_407", "nl": "migration is a kind of adaptation.", "fol": "", "prediction": ["all x.(Migration(x) -> Adaptation(x))", "all x.(Migration(x) -> Adaptation(x))", "all x.(Migratation(x) -> Adaptation(x))", "all x.(Migratory(x) -> Adaptation(x))", "all x.(Migration(x) -> Adaptation(x))", "all x.(Migration(x) -> (Adaptation(x) & Adaptation(x)))", "all x y.((Migration(x) & Adaptation(y)) -> Adaptation(x,y))", "all x y.((Migration(x) & Adaptation(y)) -> Requires(x,y))", "all x y.((Migration(x) & Adaptation(y)) -> KindOf(x,y))", "all x y.((Migration(x) & Adaptation(y)) -> Is(x,y))", "all x.(Migration(x) -> (Adaptation(x) | Adaptation(x)))", "all x y.((Migration(x) & Adaptation(y)) -> Adaptation(x))", "all x y.((Migration(x) & Adaptation(y)) -> TypeOf(x,y))", "all x.(Migration(x) -> Adaptation(x))", "all x y.((Migration(x) & Adaptation(y)) -> (Adaptation(x,y)))", "all x.(Migration(x) -> (Adaptation(x) & Adaptation(x)))"]}
{"id": "entailmentbank_validation_408", "nl": "an example of an adaptation is birds migrating south in the winter.", "fol": "", "prediction": ["all x.(Adaptation(x) -> (BirdsMigratingSouthInWinter(x)))", "all x.(Adaptation(x) -> (BirdsMigratingSouth(x) & Winter(x)))", "all x.(Adaptation(x) -> (BirdsMigratingSouthInWinter(x)))", "all x.((Bird(x) & MigratingSouthInWinter(x)) -> Adaptation(x))", "all x.((Bird(x) & MigratingSouth(x)) -> Adaptation(x))", "all x.(Adaptation(x) -> (BirdsMigratingSouth(x) & Winter(x)))", "all x y.((Bird(x) & Winter(y) & MigratingSouth(x,y)) -> Adaptation(x))", "all x.((Bird(x) & MigratesSouthInWinter(x)) -> Adaptation(x))", "all x.((Bird(x) & MigratesSouth(x)) -> Adaptation(x))", "all x.(Adaptation(x) -> (BirdsMigratingSouthInWinter(x)))", "all x y.((Bird(x) & Winter(y) & MigratingSouth(x,y)) -> Adaptation(x,y))", "all x y.((Bird(x) & MigratingSouth(x,y)) -> Adaptation(x))", "all x.(Adaptation(x) -> (Bird(x) & MigratingSouthInWinter(x)))", "all x y.((Bird(x) & MigratingSouth(x) & Winter(y)) -> Adaptation(x))", "all x y.((Bird(x) & MigratingSouth(x) & Winter(y)) -> Adaptation(x,y))", "all x.(Adaptation(x) -> (Bird(x) & MigratesSouthInWinter(x)))"]}
{"id": "entailmentbank_validation_409", "nl": "wasp's stinger contains poison.", "fol": "", "prediction": ["all x.(WaspStinger(x) -> ContainsPoison(x))", "all x y.((Wasp(x) & Stinger(y)) -> ContainsPoison(x,y))", "all x.(Wasp(x) -> ContainsPoison(x))", "all x.((Wasp(x) & Stinger(x)) -> ContainsPoison(x))", "all x y.((WaspStinger(x) & Wasp(y)) -> ContainsPoison(x,y))", "all x.(WaspsStinger(x) -> ContainsPoison(x))", "all x.((WaspStinger(x) & ContainsPoison(x)) -> ContainsPoison(x))", "all x.(Stinger(x) -> ContainsPoison(x))", "all x y.((Wasp(x) & Stinger(y)) -> ContainsPoison(y))", "all x y.((Wasp(x) & Stinger(y) & ContainsPoison(x,y)) -> ContainsPoison(x,y))", "all x y.((Wasp(x) & Stinger(y) & ContainsPoison(y)) -> ContainsPoison(x,y))", "all x y.((Wasp(x) & Stinger(y) & ContainsPoison(y)) -> Contains(x,y))", "all x y.((Wasp(x) & Stinger(y) & ContainsPoison(x,y)) -> Contains(x,y))", "all x y.((Wasp(x) & Stinger(y) & ContainsPoison(x,y)) -> ContainsPoison(y))", "all x y.((WaspStinger(x) & Wasp(y)) -> ContainsPoison(x))", "all x.((WaspStinger(x) & ContainsPoison(x)) -> Contains(x,Poison))"]}
{"id": "entailmentbank_validation_410", "nl": "poison causes harm to living things.", "fol": "", "prediction": ["all x.(Poison(x) -> CausesHarmToLivingThings(x))", "all x y.((Poison(x) & LivingThing(y)) -> CausesHarm(x,y))", "all x y.((Poison(x) & LivingThing(y)) -> CausesHarmTo(x,y))", "all x y z.((Poison(x) & LivingThing(y) & LivingThing(z)) -> CausesHarm(x,y,z))", "all x y z.((Poison(x) & LivingThing(y) & LivingThing(z)) -> CausesHarmTo(x,y,z))", "all x y z.((Poison(x) & LivingThing(y) & LivingThing(z)) -> CausesHarm(x,y))", "all x y z.((Poison(x) & LivingThing(y) & LivingThing(z) & CausesHarm(x,y,z)) -> CausesHarm(x,y,z))", "all x y z.((Poison(x) & LivingThing(y) & LivedThing(z)) -> CausesHarm(x,y,z))", "all x y z.((Poison(x) & LivingThing(y) & LivingThing(z) & CausesHarm(x,y,z)) -> CausesHarm(x,y))", "all x y z.((Poison(x) & LivingThing(y) & LivingThing(z) & CausesHarm(x,y)) -> CausesHarm(x,z))", "all x y z.((Poison(x) & LivingThing(y) & LivedThing(z)) -> CausesHarmTo(x,y,z))", "all x y z.((Poison(x) & LivingThing(y) & Object(z)) -> CausesHarm(x,y,z))", "all x.(Poison(x) -> CausesHarmToLivingThings(x))", "all x y z.((Poison(x) & LivingThing(y) & LivingThing(z)) -> CausesHarm(x,z))", "all x.(Poison(x) -> CausesHarmToLivedThings(x))", "all x y z.((Poison(x) & LivingThing(y) & Object(z)) -> CausesHarmTo(x,y,z))"]}
{"id": "entailmentbank_validation_411", "nl": "a wasp's stinger can be used to cause harm to living things.", "fol": "", "prediction": ["all x y.((WaspStinger(x) & LivingThing(y)) -> CausesHarm(x,y))", "all x y.((WaspStinger(x) & LivingThing(y)) -> CanCauseHarm(x,y))", "all x.(WaspStinger(x) -> CausesHarmToLivingThings(x))", "all x.((WaspStinger(x) & CausesHarmToLivingThings(x)) -> CanBeUsedToCause(x,livingThings))", "all x y.((WaspStinger(x) & LivingThing(y)) -> CausesHarmTo(x,y))", "all x.((WaspStinger(x) & CausesHarmToLivingThings(x)) -> CanBeUsedToCauseHarmToLivingThings(x))", "all x.(Stinger(x) -> CausesHarmToLivingThings(x))", "all x y.((WaspsStinger(x) & LivingThing(y)) -> CausesHarm(x,y))", "all x.(WaspStinger(x) -> CanCauseHarmToLivingThings(x))", "all x y.((WaspsStinger(x) & LivingThing(y)) -> CanCauseHarm(x,y))", "all x.((WaspsStinger(x) & CausesHarmToLivingThings(x)) -> CanBeUsedToCauseHarmToLivingThings(x))", "all x.((WaspsStinger(x) & CausesHarmToLivingThings(x)) -> CanBeUsedToCause(x,livingThings))", "all x.(Stinger(x) -> CanCauseHarmToLivingThings(x))", "all x y.((WaspStinger(x) & LivingThing(y)) -> CanCauseHarmTo(x,y))", "all x y.((Wasp(x) & Stinger(y)) -> CausesHarmToLivingThings(x,y))", "all x y.((WaspsStinger(x) & LivingThing(y)) -> CausesHarmTo(x,y))"]}
{"id": "entailmentbank_validation_412", "nl": "harming is a kind of defense.", "fol": "", "prediction": ["all x.(Harming(x) -> Defense(x))", "all x.(HasDefense(x) -> KindOfDefense(x))", "all x.(HasDamage(x) -> Defense(x))", "all x.(HasDefense(x) -> Harming(x))", "all x.(Hazarding(x) -> Defense(x))", "all x.(HasDefense(x) -> Harms(x))", "all x y.((Harming(x) & Defense(y)) -> FormOf(x,y))", "all x y.((Harming(x) & Defense(y)) -> Is(x,y))", "all x.(Has(x) -> Defense(x))", "all x y.((Harming(x) & Defense(y)) -> KindOfDefense(x))", "all x.(HasHazard(x) -> Defense(x))", "all x.(Harming(x) -> Defense(x))", "all x.((Harming(x) & Defense(x)) -> KindOfDefense(x))", "all x.((Harming(x) & Defense(x)) -> Defense(x))", "all x y.((Harming(x) & Defense(y)) -> KindOf(x,y))", "all x.(HasDefense(x) -> Harms(x))"]}
{"id": "entailmentbank_validation_413", "nl": "a stinger is used for defense by a wasp.", "fol": "", "prediction": ["all x y.((Stinger(x) & Wasp(y)) -> UsedForDefense(x,y))", "all x y z.((Stinger(x) & Wasp(y) & Wasp(z)) -> UsedForDefense(x,y,z))", "all x y.((Stinger(x) & Wasp(y)) -> UsedForDefenseBy(x,y))", "all x y z.((Stinger(x) & Wasp(y) & Defense(z)) -> UsedFor(x,y,z))", "all x y.((Stinger(x) & Wasp(y) & UsedForDefense(x,y)) -> UsedForDefense(x,y))", "all x y z.((Stinger(x) & Wasp(y) & UsedForDefense(x,y)) -> UsedForDefense(x,y))", "all x y.((Stinger(x) & Wasp(y)) -> UsedForDefense(x,y))", "all x y.((Sstinger(x) & Wasp(y)) -> UsedForDefense(x,y))", "all x y z.((Stinger(x) & Wasp(y) & UsedForDefense(x,y)) -> UsedForDefense(x,z))", "all x y z.((Stinger(x) & Wasp(y) & Defense(z)) -> UsedBy(x,y,z))", "all x y z.((Stinger(x) & Wasp(y) & Wasp(z)) -> UsedForDefense(x,y))", "all x.((Stinger(x) & Wasp(y)) -> UsedForDefense(x,y))", "all x y z.((Stinger(x) & Wasp(y) & UsesForDefense(x,y)) -> UsedForDefense(x,y))", "all x.(Stinger(x) -> UsedForDefenseByWasp(x))", "all x y z.((Stinger(x) & Wasp(y) & Wasp(z)) -> UsedForDefenseBy(x,y,z))", "all x y.((Stinger(x) & Wasp(y)) -> UsesForDefense(x,y))"]}
{"id": "entailmentbank_validation_414", "nl": "color is a property of an organism that describes what it looks like.", "fol": "", "prediction": ["all x y.((Organism(x) & Organism(y)) -> ColorProperty(x,y))", "all x.(Color(x) -> (PropertyOfOrganism(x) & DescriptionOfLooksAlike(x)))", "all x.(Color(x) -> (PropertyOfOrganism(x) & DepictsLook(x)))", "all x y.((Organism(x) & Color(y)) -> DescriptionOfLooksAlike(x,y))", "all x.(Color(x) -> (PropertyOfOrganism(x) & DescribesLooksAlike(x)))", "all x.(Color(x) -> (PropertyOfOrganism(x) & DefinesLook(x)))", "all x.(Color(x) -> (PropertyOfOrganism(x) & DescribesLook(x)))", "all x y.((Organism(x) & Organism(y)) -> DescriptionOfColor(x,y))", "all x.(Color(x) -> (DescribesLooksAlike(x) & Organism(x)))", "all x.(Color(x) -> (PropertyOfOrganism(x) & DepictsLooksAlike(x)))", "all x y.((Organism(x) & Organ(y)) -> ColorProperty(x,y))", "all x y.((Organism(x) & Color(y)) -> DescriptionOfLooksAlike(y,x))", "all x y.((Organism(x) & Color(y)) -> DescribesLooksAlike(x,y))", "all x.(Color(x) -> (PropertyOfOrganism(x) & DescriptionOfLooks(x)))", "all x y.((Organism(x) & Color(y)) -> (Property(x,y) & Description(x,y)))", "all x y.((Organism(x) & Color(y)) -> (Property(x,y) & DescribesLook(x,y)))"]}
{"id": "entailmentbank_validation_415", "nl": "an example of camouflage is an organism looking like its environment.", "fol": "", "prediction": ["all x.((Organism(x) & LooksAlikeEnvironment(x)) -> Camouflage(x))", "all x.(Camouflage(x) -> (OrganismLookingAlikeEnvironment(x)))", "all x.(Camouflage(x) -> LooksAlikeEnvironment(x))", "all x.(Camouflage(x) -> LooksAlikeEnvironment(x))", "all x y.((Organism(x) & Environment(y)) -> LooksAlike(x,y))", "all x y.((Organism(x) & Environment(y) & LooksAlike(x,y)) -> Camouflage(x))", "all x.((Organism(x) & LooksLikeEnvironment(x)) -> Camouflage(x))", "all x.(Camouflage(x) -> (OrganismLookingAlikeEnvironment(x)))", "all x.(Cambolage(x) -> (OrganismLookingAlikeEnvironment(x)))", "all x.(Camouflage(x) -> (OrganismLooksAlikeEnvironment(x)))", "all x.((Organism(x) & Camouflage(x)) -> LooksAlikeEnvironment(x))", "all x.(Camouflage(x) -> (OrganismLookingLikeEnvironment(x)))", "all x.(Chamouflage(x) -> (OrganismLookingAlikeEnvironment(x)))", "all x.(Camouflage(x) -> exists y.(Organism(y) & LooksAlikeEnvironment(y)))", "all x.(Camouflage(x) -> OrganismLookingAlikeEnvironment(x))", "all x.((OrganismLookingAlikeEnvironment(x)) -> Camouflage(x))"]}
{"id": "entailmentbank_validation_416", "nl": "an example of camouflage is organism having the same color as its environment.", "fol": "", "prediction": ["all x.((Organism(x) & Camouflage(x)) -> SameColorAsEnvironment(x))", "all x.(Camouflage(x) -> (Organism(x) & SameColorAsEnvironment(x)))", "all x.((Organism(x) & SameColorAsEnvironment(x)) -> Camouflage(x))", "all x y.((Organism(x) & Environment(y) & SameColor(x,y)) -> Camouflage(x))", "all x.(Camouflage(x) -> (Organism(x) & SameColorAsEnvironment(x)))", "all x y.((Organism(x) & Environment(y)) -> SameColor(x,y))", "all x.((Organism(x) & SameColor(x,Environment)) -> Camouflage(x))", "all x.(Camouflage(x) -> (Organism(x) & SameColor(x) & Environment(x)))", "all x.((Organism(x) & SameColor(x)) -> Camouflage(x))", "all x.((Organism(x) & Camouflage(x)) -> HasSameColorAsEnvironment(x))", "all x.((Organism(x) & Camouflage(x)) -> SameColor(x))", "all x.(Camouflage(x) -> (Organism(x) & SameColor(x,Environment)))", "all x.(Camouflage(x) -> (Organism(x) & SameColor(x)))", "all x.((Organism(x) & SameColorEnvironment(x)) -> Camouflage(x))", "all x.((Organism(x) & Camouflage(x)) -> SameColor(x,Environment))", "all x.((Organism(x) & Camouflage(x)) -> SameColorEnvironment(x))"]}
{"id": "entailmentbank_validation_417", "nl": "if an animal's skin is a certain color then that animal is that color.", "fol": "", "prediction": ["all x.((Animal(x) & SkinColor(x)) -> Color(x))", "all x y.((Animal(x) & SkinColor(y) & CertainColor(x,y)) -> Color(x,y))", "all x y.((Animal(x) & Skin(y) & CertainColor(y)) -> Color(x,y))", "all x y.((Animal(x) & Skin(y) & CertainColor(x,y)) -> Color(x,y))", "all x y.((Animal(x) & SkinColor(y)) -> Color(x,y))", "all x y.((Animal(x) & Skin(y) & Color(y)) -> Color(x,y))", "all x y.((Animal(x) & Skin(y) & Color(x,y)) -> Color(x,y))", "all x.((Animal(x) & CertainColorSkin(x)) -> Color(x))", "all x.((Animal(x) & SkinColour(x)) -> Color(x))", "all x.((Animal(x) & SkinColor(x) & CertainColor(x)) -> Color(x))", "all x y.((Animal(x) & SkinColor(y) & CertainColor(x,y)) -> Color(x))", "all x.((Animal(x) & SkinColor(x)) -> ColorColor(x))", "all x.((Animal(x) & SkinColor(x,y)) -> Color(x,y))", "all x y.((Animal(x) & SkinColor(x,y)) -> Color(x,y))", "all x.((Animal(x) & SkinColor(x)) -> Color(x,y))", "all x y.((Animal(x) & SkinColor(y) & CertainColor(x,y)) -> Color(y))"]}
{"id": "entailmentbank_validation_418", "nl": "an example of camouflage is an animal's skin having the same color as its environment.", "fol": "", "prediction": ["all x.(Camouflage(x) -> (AnimalSkin(x) & SameColorAsEnvironment(x)))", "all x.((Animal(x) & Skin(x) & SameColorAsEnvironment(x)) -> Camouflage(x))", "all x y.((Animal(x) & Environment(y) & HasSameColor(x,y)) -> Camouflage(x))", "all x y z.((Animal(x) & Skin(y) & Environment(z) & HasSameColor(x,y,z)) -> Camouflage(x))", "all x y z.((Animal(x) & Skin(y) & Environment(z) & SameColor(y,z)) -> Camouflage(x))", "all x.((Animal(x) & Camouflage(x)) -> SameColorSkinAsEnvironment(x))", "all x.(Camouflage(x) -> (AnimalSkin(x) & SameColorEnvironment(x)))", "all x y z.((Animal(x) & Skin(y) & Environment(z) & HasSameColor(y,z)) -> Camouflage(x))", "all x y.((Animal(x) & Skin(y) & SameColorAsEnvironment(y)) -> Camouflage(x,y))", "all x y z.((Animal(x) & Skin(y) & Environment(z)) -> Camouflage(x,y,z))", "all x.((Animal(x) & Skin(x) & SameColor(x)) -> Camouflage(x))", "all x y.((Animal(x) & Skin(y) & SameColor(y,x)) -> Camouflage(x))", "all x.(Camouflage(x) -> (AnimalSkin(x) & SameColor(x) & Environment(x)))", "all x y z.((Animal(x) & Skin(y) & Environment(z) & SameColor(y,z)) -> Camouflage(x,y))", "all x y.((Animal(x) & Skin(y) & Camouflage(x)) -> SameColorAsEnvironment(y))", "all x y.((Animal(x) & Environment(y) & HasSameColor(x,y)) -> Camouflage(x,y))"]}
{"id": "entailmentbank_validation_419", "nl": "camouflage is a kind of adaptation for hiding in an environment.", "fol": "", "prediction": ["all x.(Camouflage(x) -> AdaptationForHidingInEnvironment(x))", "all x y.((Camouflage(x) & Environment(y)) -> AdaptationForHiding(x,y))", "all x.(Camouflage(x) -> (AdaptationForHiding(x) & InEnvironment(x)))", "all x.(Camouflage(x) -> (AdaptationForHidingInEnvironment(x) & AdaptationForHidingInEnvironment(x)))", "all x.(Camouflage(x) -> (AdaptationForHidingInEnvironment(x)))", "all x y.((Camouflage(x) & Environment(y)) -> AdaptationForHunting(x,y))", "all x y z.((Camouflage(x) & Environment(y) & Environment(z)) -> AdaptationForHiding(x,y,z))", "all x.(Camouflage(x) -> AdaptationForHiding(x))", "all x.(Camouflage(x) -> (AdaptationForHunting(x) & InEnvironment(x)))", "all x.(Camouflage(x) -> (AdaptationForHiding(x) & Environment(x)))", "all x y z.((Camouflage(x) & Environment(y) & Environment(z)) -> AdaptationFor(x,y,z))", "all x.(Camouflage(x) -> (AdaptationForHiding(x) & InEnvironment(x)))", "all x y z.((Camouflage(x) & Environment(y) & Environment(z)) -> AdaptationForHunting(x,y,z))", "all x y.((Camouflage(x) & Environment(y)) -> AdaptationForHitting(x,y))", "all x y.((Camouflage(x) & Environment(y)) -> AdaptationForHidingIn(x,y))", "all x.(Camouflage(x) -> AdaptationForHuntingInEnvironment(x))"]}
{"id": "entailmentbank_validation_420", "nl": "an animal having the same skin color as its environment is an adaptation for hiding in an environment.", "fol": "", "prediction": ["all x.((Animal(x) & SameSkinColor(x) & Environment(x)) -> AdaptationForHidingInEnvironment(x))", "all x.((Animal(x) & SameSkinColor(x) & Environment(x)) -> AdaptationForHuntingInEnvironment(x))", "all x.((Animal(x) & SameSkinColor(x) & Environment(x)) -> AdaptationForHiding(x))", "all x y.((Animal(x) & Environment(y) & SameSkinColor(x,y)) -> AdaptationForHiding(x,y))", "all x.((Animal(x) & SameSkinColor(x) & Environment(x)) -> AdaptationForHunting(x))", "all x y.((Animal(x) & Environment(y) & SameSkinColor(x,y)) -> AdaptationForHunting(x,y))", "all x.((Animal(x) & SameSkinColorAsEnvironment(x)) -> AdaptationForHidingInEnvironment(x))", "all x y.((Animal(x) & Environment(y) & SameSkinColor(x,y)) -> AdaptationForHidingInEnvironment(x,y))", "all x y.((Animal(x) & SameSkinColor(x,y) & Environment(y)) -> AdaptationForHidingInEnvironment(x))", "all x y.((Animal(x) & Environment(y) & SameSkinColor(x,y)) -> AdaptationForHidingInEnvironment(x))", "all x y.((Animal(x) & SameSkinColor(x,y) & Environment(y)) -> AdaptationForHidingInEnvironment(x,y))", "all x.((Animal(x) & SameSkinColor(x,Environment)) -> AdaptationForHidingInEnvironment(x))", "all x y.((Animal(x) & SameSkinColor(x,y) & Environment(y)) -> AdaptationForHiding(x,y))", "all x.((Animal(x) & SameSkinColorAsEnvironment(x)) -> AdaptationForHuntingInEnvironment(x))", "all x y.((Animal(x) & SameSkinColor(x,y) & Environment(y)) -> AdaptationForHunting(x,y))", "all x y.((Animal(x) & Environment(y) & SameSkinColor(x,y)) -> AdaptationForHuntingInEnvironment(x,y))"]}
{"id": "entailmentbank_validation_421", "nl": "predators usually must see their prey in order to catch them.", "fol": "", "prediction": ["all x y.((Predator(x) & Prey(y)) -> MustSee(x,y))", "all x y.((Predator(x) & Prey(y)) -> (MustSee(x,y) & Catch(x,y)))", "all x y.((Predator(x) & Prey(y)) -> Sees(x,y))", "all x y.((Predator(x) & Prey(y)) -> (Sees(x,y) & Catches(x,y)))", "all x y.((Predator(x) & Prey(y)) -> (MustSee(x,y) & CanCatch(x,y)))", "all x y z.((Predator(x) & Prey(y) & Prey(z)) -> MustSee(x,y,z))", "all x y.((Predator(x) & Prey(y)) -> SeesInOrCatch(x,y))", "all x y.((Predator(x) & Prey(y)) -> (Sees(x,y) & Catches(x,y)))", "all x y z.((Predator(x) & Prey(y) & Prey(z)) -> (MustSee(x,y,z) & Catch(x,y)))", "all x y.((Predator(x) & Prey(y)) -> (MustSee(x,y) & Catches(x,y)))", "all x y.((Predator(x) & Prey(y)) -> SeesForCatch(x,y))", "all x y.((Predator(x) & Prey(y)) -> SeesToCatch(x,y))", "all x y.((Predator(x) & Prey(y)) -> MustSeeToCatch(x,y))", "all x y z.((Predator(x) & Prey(y) & Prey(z)) -> (Sees(x,y) & Catches(x,z)))", "all x y z.((Predator(x) & Prey(y) & Prey(z)) -> (MustSee(x,y) & Catch(x,z)))", "all x y z.((Predator(x) & Prey(y) & Prey(z) & MustSee(x,y,z)) -> Catch(x,y))"]}
{"id": "entailmentbank_validation_422", "nl": "hiding means visibility / ability to be seen decreases for camouflage.", "fol": "", "prediction": ["all x y.((Hunting(x) & Camouflage(y)) -> (Visibility(x,y) | AbilityToBeSeen(x,y)))", "all x y.((Hunting(x) & Camouflage(y)) -> (VisibilityDecreases(x,y) | AbilityToBeSeenDecreases(x,y)))", "all x y.((Hunting(x) & Camouflage(y)) -> (Visibility(x,y) & AbilityToBeSeen(x,y)))", "all x.(Hunting(x) -> (DecreasesVisibility(x) & DecreasesAbilityToBeSeen(x)))", "all x y.((Hunting(x) & Camouflage(y)) -> (DecreasesVisibility(x,y) & DecreasesAbilityToBeSeen(x,y)))", "all x y.((Hunting(x) & Camouflage(y)) -> (VisibilityDecreases(x,y) & AbilityToBeSeenDecreases(x,y)))", "all x.((Hunting(x) & Camouflage(x)) -> VisibilityDecreases(x))", "all x y.((Hunting(x) & Camouflage(y)) -> (VisibilityDecrease(x,y) | AbilityToBeSeenDecrease(x,y)))", "all x y.((Hunting(x) & Camouflage(y)) -> (VisibilityDecreases(x,y) | AbilityToBeSeen(x,y)))", "all x.(Hunting(x) -> (DecreasesVisibility(x) & DecreasesAbilityToBeSeen(x)))", "all x.((Hunting(x) & Camouflage(x)) -> (DecreasesVisibility(x) & DecreasesAbilityToBeSeen(x)))", "all x.(hiding(x) -> (DecreasesVisibility(x) & DecreasesAbilityToBeSeen(x)))", "all x y.((Hunting(x) & Camouflage(y)) -> (DecreasesVisibility(x,y) & ReducesAbilityToBeSeen(x,y)))", "all x y.((Hunting(x) & Camouflage(y)) -> (DecreasesVisibility(x,y) | DecreasesAbilityToBeSeen(x,y)))", "all x y.((Hunting(x) & Camouflage(y)) -> (VisibilityDecrease(x,y) | AbilityToBeSeen(x,y)))", "all x y.((Hunting(x) & Camouflage(y)) -> VisibilityDecreases(x,y))"]}
{"id": "entailmentbank_validation_423", "nl": "hiding can be used to avoid being seen by predators.", "fol": "", "prediction": ["all x y.((Hunting(x) & Predator(y)) -> AvoidsSighting(x,y))", "all x y z.((Hunting(x) & Predator(y) & Predator(z)) -> AvoidsSighting(x,y,z))", "all x y z.((Hunting(x) & Predator(y) & Predator(z)) -> Avoids(x,y,z))", "all x y z.((Hunting(x) & Predator(y) & Predator(z)) -> CanBeUsedToAvoid(x,y,z))", "all x y.((Hunting(x) & Predator(y)) -> CanBeUsedToAvoid(x,y))", "all x y.((Hunting(x) & Predator(y)) -> -SeenBy(x,y))", "all x y.((Hunting(x) & Predator(y)) -> AvoidsSeeing(x,y))", "all x y.((Hunting(x) & Predator(y)) -> AvoidsSight(x,y))", "all x y.((Hunting(x) & Predator(y)) -> Avoids(x,y))", "all x.(Hunting(x) -> AvoidsPredators(x))", "all x y.((Hunting(x) & Predator(y)) -> CanBeUsedToAvoidSight(x,y))", "all x.(Hunting(x) -> -SeenByPredators(x))", "all x y.((Hunting(x) & Predator(y)) -> AvoidsSeenBy(x,y))", "all x y z.((Hunting(x) & Predator(y) & Predator(z)) -> -SeenBy(x,y,z))", "all x y z.((Hunting(x) & Predator(y) & Predator(z)) -> CanAvoid(x,y,z))", "all x y z.((Hunting(x) & Predator(y) & Predator(z)) -> UsedToAvoid(x,y,z))"]}
{"id": "entailmentbank_validation_424", "nl": "not being seen by predators is a kind of protection against predators.", "fol": "", "prediction": ["all x.((Predator(x) & -SeedBy(x,y)) -> ProtectionAgainst(x,z))", "all x.((Predator(x) & -SeenBy(x,y)) -> ProtectionAgainst(x,z))", "all x.((Predator(x) & -SeedBy(x,y)) -> ProtectionAgainst(x,y))", "all x y.((Predator(x) & -SeedBy(x,y)) -> ProtectionAgainst(x,y))", "all x.((Predator(x) & -SeenBy(x,y)) -> ProtectionAgainst(x,y))", "all x y.((Predator(x) & -SeenBy(x,y)) -> ProtectionAgainst(x,y))", "all x.((Predator(x) & -SeedBy(x,y)) -> ProtectiveAgainst(x,z))", "all x.((Predator(x) & -SeededBy(x,y)) -> ProtectionAgainst(x,z))", "all x.((Predator(x) & -SeedBy(x,y)) -> ProtectiveAgainst(x,y))", "all x.((Predator(x) & -SeenBy(x,y)) -> ProtectiveAgainst(x,z))", "all x.((Predator(x) & -SeedBy(x,y)) -> PredatorProtection(x))", "all x y.((Predator(x) & -SeedBy(x,y)) -> ProtectiveAgainst(x,y))", "all x.((Predator(x) & -SeenBy(x,y)) -> ProtectiveAgainst(x,y))", "all x.((Predator(x) & -SeedBy(x,x)) -> ProtectionAgainst(x,predators))", "all x.((Predator(x) & -SeededBy(x,y)) -> ProtectionAgainst(x,y))", "all x y.((Predator(x) & Predator(y)) -> Protective(x,y))"]}
{"id": "entailmentbank_validation_425", "nl": "hiding is a kind of protection against predators.", "fol": "", "prediction": ["all x.(Hunting(x) -> ProtectionAgainstPredators(x))", "all x y.((Hunting(x) & Predator(y)) -> ProtectsAgainst(x,y))", "all x y.((Hunting(x) & Predator(y)) -> ProtectionAgainst(x,y))", "all x.(Hunting(x) -> PredatorProtection(x))", "all x.(Hunting(x) -> ProtectsAgainstPredators(x))", "all x.(Hunting(x) -> ProtectiveAgainstPredators(x))", "all x y.((Hunting(x) & Predator(y)) -> Protective(x,y))", "all x y.((Hiding(x) & Predator(y)) -> ProtectsAgainst(x,y))", "all x.(Hiding(x) -> ProtectionAgainstPredators(x))", "all x y.((Hiding(x) & Predator(y)) -> ProtectionAgainst(x,y))", "all x y.((Hunting(x) & Predator(y)) -> Protection(x,y))", "all x.(Hiding(x) -> PredatorProtection(x))", "all x y.((Hunting(x) & Predator(y)) -> ProtectiveAgainst(x,y))", "all x.(Hiding(x) -> ProtectsAgainstPredators(x))", "all x y.((Hiding(x) & Predator(y)) -> Protective(x,y))", "all x.(Hunting(x) -> PredatorsProtection(x))"]}
{"id": "entailmentbank_validation_426", "nl": "an animal having the same skin color as its environment is a kind of protection against predators.", "fol": "", "prediction": ["all x.((Animal(x) & SameSkinColor(x) & Environment(x)) -> ProtectionAgainstPredators(x))", "all x y.((Animal(x) & SameSkinColor(x,y) & Environment(y)) -> ProtectionAgainstPredators(x))", "all x.((Animal(x) & SameSkinColor(x) & SameEnvironment(x)) -> ProtectionAgainstPredators(x))", "all x y.((Animal(x) & Environment(y) & SameSkinColor(x,y)) -> ProtectionAgainstPredators(x))", "all x.((Animal(x) & SameSkinColor(x) & Environment(x)) -> ProtectiveAgainstPredators(x))", "all x.((Animal(x) & SameSkinColor(x) & Environment(x)) -> PredatorProtection(x))", "all x.((Animal(x) & SameSkinColorAsEnvironment(x)) -> ProtectionAgainstPredators(x))", "all x y z.((Animal(x) & SkinColor(y) & Environment(z) & SameSkinColor(x,y,z)) -> ProtectionAgainstPredators(x))", "all x y.((Animal(x) & SkinColor(x,y) & Environment(y)) -> ProtectionAgainstPredators(x))", "all x y.((Animal(x) & SameSkinColor(x,y) & Environment(y)) -> ProtectionAgainstPredators(x,y))", "all x.((Animal(x) & SameSkinColor(x,Environment)) -> ProtectionAgainstPredators(x))", "all x y.((Animal(x) & SameSkinColor(x,y) & Environment(y)) -> ProtectiveAgainstPredators(x))", "all x y z.((Animal(x) & SkinColor(y) & Environment(z) & SameSkinColor(x,y) & Environment(x,z)) -> ProtectionAgainstPredators(x))", "all x y z.((Animal(x) & SkinColor(y) & Environment(z) & SameColor(x,y,z)) -> ProtectionAgainstPredators(x))", "all x y z.((Animal(x) & SkinColor(y) & Environment(z) & SameSkinColor(x,y)) -> ProtectionAgainstPredators(x))", "all x.((Animal(x) & SameSkinColor(x) & Environment(x)) -> ProtectsAgainstPredators(x))"]}
{"id": "entailmentbank_validation_427", "nl": "hiding means ability to be seen decreases for camouflage.", "fol": "", "prediction": ["all x y.((Hunting(x) & Camouflage(y)) -> AbilityToBeSeenDecreases(x,y))", "all x.((Hunting(x) & Camouflage(x)) -> AbilityToBeSeenDecreases(x))", "all x y.((HuntingMeasure(x) & Camouflage(y)) -> AbilityToBeSeenDecreases(x,y))", "all x y.((HuntingMeasure(x) & Camouflage(y)) -> DecreasesAbilityToBeSeen(x,y))", "all x.((HuntingMeasures(x) & Camouflage(x)) -> DecreasesAbilityToBeSeen(x))", "all x.((HuntingMeasures(x) & Camouflage(x)) -> DecreasesAbilityToBeSeen(x))", "all x y.((HuntingMeasure(x) & Camouflage(y)) -> AbilityDecreases(x,y))", "all x y.((HuntingMeasure(x) & Camouflage(y)) -> DecreasesAbilityToBeSeen(x,y))", "all x y.((Hunting(x) & Camouflage(y)) -> AbilityDecreases(x,y))", "all x.((HuntingMeasure(x) & Camouflage(x)) -> DecreasesAbilityToBeSeen(x))", "all x.((HuntingMeasure(x) & Camouflage(x)) -> AbilityToBeSeenDecreases(x))", "all x.((Hunting(x) & Camouflage(x)) -> AbilityDecreases(x))", "all x.((HuntingMeasure(x) & Camouflage(x)) -> DecreasesAbilityToBeSeen(x))", "all x.((HuntingMeasures(x) & Camouflage(x)) -> DecreasesAptitudeToBeSeen(x))", "all x.((Hunting(x) & Camouflage(x)) -> DecreasesAbilityToBeSeen(x))", "all x.((HuntingMeasure(x) & Camouflage(x)) -> AbilityDecreases(x))"]}
{"id": "entailmentbank_validation_428", "nl": "to blend into something means ability to be seen decreases when around that something.", "fol": "", "prediction": ["all x y.((BlendedInto(x,y) & Something(y)) -> AbilityToBeSeenDecreasesWhenAround(x,y))", "all x y.((BlendedInto(x,y) & Something(y)) -> AbilityDecreasesWhenAround(x,y))", "all x.((BlendedInto(x) & Something(x)) -> AbilityToBeSeenDecreasesWhenAround(x,y))", "all x y.((BlendedInto(x,y) & Something(y)) -> AbilityToBeSeenDecreases(x,y))", "all x y.((BlendedInto(x,y) & Something(y)) -> DecreasesAbilityToBeSeen(x,y))", "all x.((BlendedInto(x) & Something(x)) -> AbilityToBeSeenDecreases(x))", "all x.((BlendedInto(x) & Something(x)) -> AbilityDecreasesWhenAround(x,y))", "all x y.((BlendedInto(x,y) & Something(y)) -> DecreasedAbilityToBeSeen(x,y))", "all x y.((BlendedInto(x,y) & Something(y)) -> AbilityDecreasesAround(x,y))", "all x y.((BlendedInto(x,y) & Something(y)) -> AbilityToBeSeenDecreasesAround(x,y))", "all x y.((BlendedInto(x,y) & Something(y)) -> AbilityDecreases(x,y))", "all x y.((BlendInto(x,y) & Something(y)) -> AbilityToBeSeenDecreasesWhenAround(x,y))", "all x y.((BlendInto(x,y) & Something(y)) -> DecreasesAbilityToBeSeen(x,y))", "all x y.((BlendedInto(x,y) & Something(y)) -> DecreasedAptitudeToBeSeen(x,y))", "all x.((BlendedInto(x) & Something(x)) -> AbilityToBeSeenDecreasesAround(x,y))", "all x.((BlendedInto(x) & Something(x)) -> AbilityDecreasesAround(x,y))"]}
{"id": "entailmentbank_validation_429", "nl": "to blend into something means to hide in something.", "fol": "", "prediction": ["all x y.((BlendInto(x,y) & Something(y)) -> HideIn(x,y))", "all x y.((BlendedInto(x,y) & Something(y)) -> HideIn(x,y))", "all x y.((BloodInto(x,y) & Something(y)) -> HideIn(x,y))", "all x y.((BlenderInto(x,y) & Something(y)) -> HideIn(x,y))", "all x y.((BlendInto(x) & Something(y)) -> HideIn(x,y))", "all x y.((BlendInto(x,y) & Something(y)) -> HiddenIn(x,y))", "all x y.((BlendedInto(x,y) & Something(y)) -> HiddenIn(x,y))", "all x y.((BlendedInto(x) & Something(y)) -> HideIn(x,y))", "all x y.((BlendInto(x,y) & Something(y)) -> HidesIn(x,y))", "all x y.((BlendedInto(x,y) & Something(y)) -> HidesIn(x,y))", "all x y.((BlendInto(x,y) & Something(y)) -> (HuntIn(x,y)))", "all x.((BlendInto(x) & Something(x)) -> HideIn(x))", "all x.(BloodInto(x) -> HideIn(x))", "all x.((BlendedInto(x) & Something(x)) -> HideIn(x))", "all x.(BlendInto(x) -> HideIn(x))", "all x.(BlendedInto(x) -> HideIn(x))"]}
{"id": "entailmentbank_validation_430", "nl": "white fur blends into snow.", "fol": "", "prediction": ["all x.(WhiteFur(x) -> BlendsIntoSnow(x))", "all x y.((WhiteFur(x) & Snow(y)) -> BlendsInto(x,y))", "all x y z.((WhiteFur(x) & Snow(y) & Snow(z)) -> BlendsInto(x,y,z))", "all x y z.((WhiteFur(x) & Snow(y) & Snow(z) & BlendsInto(x,y,z)) -> BlendsInto(x,y,z))", "all x y z.((WhiteFur(x) & Snow(y) & WhiteFur(z)) -> BlendsInto(x,y,z))", "all x y z.((WhiteFur(x) & Snow(y) & White(z)) -> BlendsInto(x,y,z))", "all x y z.((WhiteFur(x) & Snow(y) & Fur(z)) -> BlendsInto(x,y,z))", "all x y.((WhiteFur(x) & Snow(y) & BlendsInto(x,y)) -> BlendsInto(x,y))", "all x y z.((WhiteFur(x) & Snow(y) & Snow(z)) -> BlendsInto(x,z))", "all x y z w.((WhiteFur(x) & Snow(y) & Snow(z)) -> BlendsInto(x,y,z))", "all x y z.((WhiteFur(x) & Snow(y) & Snow(z) & BlendsInto(x,y,z)) -> BlendsInto(x,y))", "all x y z.((WhiteFur(x) & Snow(y) & Snow(z)) -> BlendsInto(x,y))", "all x y z.((WhiteFur(x) & Snow(y) & Fur(z)) -> BlendsInto(x,z))", "all x y z.((WhiteFur(x) & Snow(y) & Snow(z)) -> Blend(x,y,z))", "all x y.((WhiteFur(x) & Snow(y)) -> BlendedInto(x,y))", "all x y.((WhiteFur(x) & Snow(y)) -> Blend(x,y))"]}
{"id": "entailmentbank_validation_431", "nl": "an example of hiding is white fur blending in with snow.", "fol": "", "prediction": ["all x y.((WhiteFur(x) & Snow(y)) -> BlendsIn(x,y))", "all x.((WhiteFur(x) & Snow(x)) -> Hidden(x))", "all x y.((WhiteFur(x) & Snow(y)) -> Hidden(x))", "all x.((WhiteFur(x) & BlendsInWithSnow(x)) -> Hidden(x))", "all x.(Hunting(x) -> (WhiteFur(x) & BlendsInWithSnow(x)))", "all x y z.((WhiteFur(x) & Snow(y) & BlendsIn(x,y)) -> Hidden(x))", "all x.((WhiteFur(x) & BlendsWithSnow(x)) -> Hidden(x))", "all x.((WhiteFur(x) & BlendingWithSnow(x)) -> Hidden(x))", "all x y z.((WhiteFur(x) & Snow(y) & WhiteFur(z)) -> BlendsIn(x,y,z))", "all x y.((WhiteFur(x) & Snow(y)) -> BlendingIn(x,y))", "all x.((WhiteFur(x) & BlendedInWithSnow(x)) -> Hidden(x))", "all x y.((WhiteFur(x) & Snow(y)) -> Hide(x,y))", "all x y.((WhiteFur(x) & Snow(y)) -> BlendsInWith(x,y))", "all x y z.((WhiteFur(x) & Snow(y) & BlendsIn(x,z)) -> Hidden(x))", "all x.((WhiteFur(x) & BlendedWithSnow(x)) -> Hidden(x))", "all x.((WhiteFur(x) & BlendingInWithSnow(x)) -> Hidden(x))"]}
{"id": "entailmentbank_validation_432", "nl": "an example of camouflage is white fur blending in with snow.", "fol": "", "prediction": ["all x.((WhiteFur(x) & BlendsInWithSnow(x)) -> Camouflage(x))", "all x y.((WhiteFur(x) & Snow(y)) -> BlendsIn(x,y))", "all x.((WhiteFur(x) & BlendsWithSnow(x)) -> Camouflage(x))", "all x.((WhiteFur(x) & BlendingWithSnow(x)) -> Camouflage(x))", "all x.((WhiteFur(x) & BlendedInWithSnow(x)) -> Camouflage(x))", "all x.((WhiteFur(x) & BlendedWithSnow(x)) -> Camouflage(x))", "all x.((WhiteFur(x) & Snow(x)) -> Camouflage(x))", "all x.(Camouflage(x) -> (WhiteFur(x) & BlendsInWithSnow(x)))", "all x.((WhiteFur(x) & BlendingInWithSnow(x)) -> Camouflage(x))", "all x y z.((WhiteFur(x) & Snow(y) & BlendsIn(x,y)) -> Camouflage(x))", "all x.(Camouflage(x) -> (WhiteFur(x) & BlendsWithSnow(x)))", "all x.(Camouflage(x) -> (WhiteFur(x) & BlendsInWithSnow(x)))", "all x y.((WhiteFur(x) & Snow(y)) -> BlendingIn(x,y))", "all x.(Camouflage(x) -> (WhiteFur(x) & BlendsWithSnow(x)))", "all x y.((WhiteFur(x) & Snow(y)) -> BlendedIn(x,y))", "all x.(Camouflage(x) -> (WhiteFur(x) & BlendedInWithSnow(x)))"]}
{"id": "entailmentbank_validation_433", "nl": "some leaves have a speckled brown color.", "fol": "", "prediction": ["exists x.(Leaves(x) & SpckledBrownColor(x))", "exists x.(Leaves(x) & SpeckledBrownColor(x))", "exists x.(Leaves(x) & SpoiledBrownColor(x))", "exists x.(Leaves(x) & SpockledBrownColor(x))", "exists x.(Leaves(x) & SpangledBrownColor(x))", "exists x.(Leaves(x) & SpikerdBrownColor(x))", "exists x.(Leaves(x) & SpezckledBrownColor(x))", "exists x.(Leaves(x) & SpikeckledBrownColor(x))", "exists x.(Leaves(x) & SpewedBrownColor(x))", "exists x.(Leaves(x) & speckledBrownColor(x))", "exists x.(Leaves(x) & HasSpeckledBrownColor(x))", "exists x.(Leaf(x) & SpckledBrownColor(x))", "exists x.(Leaves(x) & SpunkedBrownColor(x))", "exists x.(Leaves(x) & SpechtBrownColor(x))", "exists x.(Leaves(x) & SpckledBrown(x))", "exists x.(Leaves(x) & SpoiledBrown(x))"]}
{"id": "entailmentbank_validation_434", "nl": "some birds have a speckled brown color.", "fol": "", "prediction": ["exists x.(Bird(x) & SpckledBrownColor(x))", "exists x.(Bird(x) & SpeckledBrownColor(x))", "exists x.(Bird(x) & SpoiledBrownColor(x))", "exists x.(Bird(x) & SpockledBrownColor(x))", "exists x.(Bird(x) & SpangledBrownColor(x))", "exists x.(Bird(x) & HasSpeckledBrownColor(x))", "exists x.(Bird(x) & SpewedBrownColor(x))", "exists x.(Bird(x) & SpikerdBrownColor(x))", "exists x.(Bird(x) & SpezckledBrownColor(x))", "exists x.(Bird(x) & SpikeckledBrownColor(x))", "exists x.(Bird(x) & speckledBrownColor(x))", "exists x.(Bird(x) & SpckledBronzeColor(x))", "exists x.(Bird(x) & SpilledBrownColor(x))", "exists x.(Bird(x) & SpckledBrown(x))", "exists x.(Bird(x) & SpoiledBrown(x))", "exists x.(Bird(x) & SpckledColor(x))"]}
{"id": "entailmentbank_validation_435", "nl": "some birds look like leaves.", "fol": "", "prediction": ["exists x.(Bird(x) & LooksAlikeLeaves(x))", "exists x.(Bird(x) & LooksAlike(x,Leaves))", "exists x.(Bird(x) & LookslikeLeaves(x))", "exists x.(Bird(x) & LooksLikeLeaves(x))", "exists x.(Bird(x) & LooksAlike(x,leaves))", "exists x.(Bird(x) & LooksAlikeLaws(x))", "exists x.(Bird(x) & Looks(x,Leaves))", "exists x.(Bird(x) & LooksForLeaves(x))", "exists x.(Bird(x) & LooksLike(x,Leaves))", "exists x.(Bird(x) & Lookslike(x,Leaves))", "exists x.(Bird(x) & LooksAboveLeaves(x))", "exists x y.(Bird(x) & LooksAlike(x,y))", "exists x.(Bird(x) & LooksSoLikeLeaves(x))", "exists x.(Bird(x) & LooksOfLeaves(x))", "exists x.(Bird(x) & LookAlikeLeaves(x))", "exists x.(Bird(x) & Looks(x,leaves))"]}
{"id": "entailmentbank_validation_436", "nl": "something that looks like another thing is difficult to distinguish from that thing.", "fol": "", "prediction": ["all x y.((Thing(x) & LooksAlike(x,y)) -> DifficultToDistinctFrom(x,y))", "all x y.((Thing(x) & LooksAlike(x,y)) -> DifficultToDistractFrom(x,y))", "all x y.((Thing(x) & LooksAlike(x,y)) -> DifficultToDistinct(x,y))", "all x y z.((Thing(x) & LooksAlike(x,y) & Thing(z)) -> DifficultToDistinctFrom(x,z))", "all x y.((Task(x) & LooksAlike(x,y)) -> DifficultToDistinctFrom(x,y))", "all x y.((Thing(x) & LooksAlike(x,y)) -> DifficultToDistract(x,y))", "all x y.((Thing(x) & LooksAlike(x,y)) -> DifficultToDistort(x,y))", "all x y.((Thing(x) & LooksAlike(x,y)) -> DistinctFrom(x,y))", "all x y.((Task(x) & LooksAlike(x,y)) -> DifficultToDistractFrom(x,y))", "all x y z.((Thing(x) & LooksAlike(x,y) & Thing(z)) -> DifficultToDistractFrom(x,z))", "all x y.((Tax(x) & LooksAlike(x,y)) -> DifficultToDistinctFrom(x,y))", "all x.((LooksAlike(x,y) & Thing(y)) -> DifficultToDistinctFrom(x,y))", "all x y z.((Thing(x) & LooksAlike(x,y) & Thing(z)) -> DifficultToDistinct(x,z))", "all x.((LooksAlike(x,y) & AnotherThing(y)) -> DifficultToDistinctFrom(x,y))", "all x y.((Thing(x) & LooksAlike(x,y)) -> DifficultToDiffertFrom(x,y))", "all x y.((Dog(x) & LooksAlike(x,y)) -> DifficultToDistinctFrom(x,y))"]}
{"id": "entailmentbank_validation_437", "nl": "some birds are difficult to distinguish from leaves.", "fol": "", "prediction": ["exists x.(Bird(x) & DifficultToDistinctFromLeaves(x))", "exists x.(Bird(x) & DifficultToDistractFromLeaves(x))", "exists x.(Bird(x) & DifficultToDistortFromLeaves(x))", "exists x.(Bird(x) & DistinctFromLeaves(x))", "exists x.(Bird(x) & DifficultToDiffertFromLeaves(x))", "exists x.(Bird(x) & DifficultToDiffersFromLeaves(x))", "exists x.(Bird(x) & HardToDistinctFromLeaves(x))", "exists x.(Bird(x) & -DifficultToDistinctFromLeaves(x))", "exists x.(Bird(x) & DifficultToDistingFromLeaves(x))", "exists x y.(Bird(x) & Leave(y) & DifficultToDistinct(x,y))", "exists x y.(Bird(x) & Leave(y) & DifficultToDistinctFrom(x,y))", "exists x.(Bird(x) & DifficultToDisciplineFromLeaves(x))", "exists x.(Bird(x) & DifficultToDiscoverFromLeaves(x))", "exists x.(Bird(x) & DifficultToDifferFromLeaves(x))", "exists x.(Bird(x) & DifficultToDiffer(x))", "exists x.(Bird(x) & DifficultToDistinct(x))"]}
{"id": "entailmentbank_validation_438", "nl": "difficult to distinguish can mean difficult to see in something else.", "fol": "", "prediction": ["all x.(DifficultToDistinct(x) -> DifficultToSee(x))", "all x y.((DifficultToDistinct(x) & SomethingOther(y)) -> DifficultToSee(x,y))", "all x y.((DifficultToDistinct(x) & SomethingOther(y)) -> MeansDifficultToSee(x,y))", "all x.(DifficultToDistinct(x) -> MeansDifficultToSee(x))", "all x y.((DifficultToDistinct(x) & Other(y)) -> DifficultToSee(x,y))", "all x y.((DifficultToDistinct(x) & DifficultToSee(y)) -> DifficultToSee(x,y))", "all x y.((DifficultToDistinct(x) & (DifficultToSee(y) | DifficultToSee(y))) -> DifficultToSee(x,y))", "all x.(DifficultToDistinct(x) -> -DifficultToSee(x))", "all x y.((DifficultToDistinct(x) & (DifficultToSee(y) | DifficultToSee(y))) -> Distinct(x,y))", "all x.(DifficultToDistinct(x) -> HardToSee(x))", "all x y.((DifficultToDistinct(x) & SomethingOther(y)) -> HardToSee(x,y))", "all x.(DifficultToDistinct(x) -> (DifficultToSee(x) & SomethingOther(x)))", "all x.(DifficultToDifferent(x) -> DifficultToSee(x))", "all x y.((DifficultToDistinct(x) & SomethingOther(y)) -> DifficultToSeeIn(x,y))", "all x.(DifficultToDistinct(x) -> (DifficultToSee(x) & InOther(x)))", "all x y.((DifficultToDistinct(x) & SomethingOther(y)) -> Distinct(x,y))"]}
{"id": "entailmentbank_validation_439", "nl": "some birds are difficult to see in leaves.", "fol": "", "prediction": ["exists x.(Bird(x) & DifficultToSeeInLeaves(x))", "exists x.(Bird(x) & HardToSeeInLeaves(x))", "exists x.(Bird(x) & DifficultToSelectInLeaves(x))", "exists x.(Bird(x) & DistinctToSeeInLeaves(x))", "exists x.(Bird(x) & DifficultToSee(x))", "exists x.(Bird(x) & DifficultToSightInLeaves(x))", "exists x.(Bird(x) & -DifficultToSeeInLeaves(x))", "exists x.(Bird(x) & DifficultToSee(x,Leaves))", "exists x.(Bird(x) & DifficultToSewInLeaves(x))", "exists x.(Bird(x) & DifficultToViewInLeaves(x))", "exists x.(Bird(x) & DizzyToSeeInLeaves(x))", "exists x.(Bird(x) & DistractToSeeInLeaves(x))", "exists x.(Bird(x) & DifficultToSelect(x))", "exists x.(Bird(x) & DifficultToSee(x,leaves))", "exists x.(Bird(x) & DiligentToSeeInLeaves(x))", "exists x.(Bird(x) & DistantToSeeInLeaves(x))"]}
{"id": "entailmentbank_validation_440", "nl": "an example of camouflage is a bird looking like leaves.", "fol": "", "prediction": ["all x.((Bird(x) & LooksAlikeLeaves(x)) -> Camouflage(x))", "all x.((Bird(x) & LooksLikeLeaves(x)) -> Camouflage(x))", "all x.(Camouflage(x) -> (BirdLookingAlikeLeaves(x)))", "all x.((Bird(x) & LookslikeLeaves(x)) -> Camouflage(x))", "all x.(Camouflage(x) -> (Bird(x) & LooksAlikeLeaves(x)))", "all x.(Camouflage(x) -> (BirdLookingAlikeLeaves(x)))", "all x.(Camouflage(x) -> (BirdLookingLikeLeaves(x)))", "all x.((Bird(x) & LookingAlikeLeaves(x)) -> Camouflage(x))", "all x y.((Bird(x) & Leaf(y)) -> LooksAlike(x,y))", "all x y.((Bird(x) & Leaf(y)) -> Camouflage(x,y))", "all x.(Camouflage(x) -> (BirdLooksAlikeLeaves(x)))", "all x y.((Bird(x) & LooksAlikeLeaves(x)) -> Camouflage(x))", "all x y.((Bird(x) & Leaf(y)) -> Camouflage(x))", "all x.(Cambolage(x) -> (BirdLookingAlikeLeaves(x)))", "all x y.((Bird(x) & Leaves(y)) -> Camouflage(x))", "all x.(Camouflage(x) -> LooksAlikeLeaves(x))"]}
{"id": "entailmentbank_validation_441", "nl": "camouflage is used for hiding by animals from predators.", "fol": "", "prediction": ["all x y z.((Camouflage(x) & Animal(y) & Predator(z)) -> UsedForHiding(x,y,z))", "all x y z.((Camouflage(x) & Animal(y) & Predator(z)) -> UsedForHunting(x,y,z))", "all x y z.((Camouflage(x) & Animal(y) & Predator(z)) -> UsedForHitting(x,y,z))", "all x y.((Camouflage(x) & Animal(y)) -> UsedForHunting(x,y))", "all x y.((Camouflage(x) & Animal(y)) -> UsedForHiding(x,y))", "all x y.((Animal(x) & Predator(y)) -> Camouflage(x,y))", "all x y.((Camouflage(x) & Animal(y)) -> UsedForHitting(x,y))", "all x y.((Camouflage(x) & Animal(y)) -> UsedForHuntingFromPredators(x,y))", "all x y.((Camouflage(x) & Animal(y)) -> UsedForHidingFromPredators(x,y))", "all x y z.((Camouflage(x) & Animal(y) & Predator(z)) -> UsedFor(x,y,z))", "all x y.((Camouflage(x) & Animal(y)) -> HiddenFromPredators(x,y))", "all x y z.((Cambolage(x) & Animal(y) & Predator(z)) -> UsedForHunting(x,y,z))", "all x y z.((Cambolage(x) & Animal(y) & Predator(z)) -> UsedForHiding(x,y,z))", "all x y z.((Camouflage(x) & Animal(y) & Predator(z)) -> UsedForShelter(x,y,z))", "all x y z.((Camouflage(x) & Animal(y) & Predator(z)) -> UsedForHidingFrom(x,y,z))", "all x y z.((Cambolage(x) & Animal(y) & Predator(z)) -> UsedForHitting(x,y,z))"]}
{"id": "entailmentbank_validation_442", "nl": "looking like leaves can be used by birds for hiding from predators.", "fol": "", "prediction": ["all x.(LookingAlikeLeaves(x) -> CanBeUsedByBirdsForHuntingFromPredators(x))", "all x.((LookingAlikeLeaves(x) & Bird(x)) -> CanBeUsedForHuntingFromPredators(x))", "all x y.((Bird(x) & LooksAlikeLeaves(x)) -> CanHideFromPredators(x,y))", "all x.(LookingAlikeLeaves(x) -> CanBeUsedByBirdsForHidingFromPredators(x))", "all x y.((Bird(x) & LooksAlikeLeaves(x)) -> CanHuntFromPredators(x,y))", "all x.(LooksAlikeLeaves(x) -> CanBeUsedByBirdsForHuntingFromPredators(x))", "all x y.((Bird(x) & LooksAlikeLeaves(x) & Predator(y)) -> CanHideFrom(x,y))", "all x.((LookingAlikeLeaves(x) & Bird(x)) -> CanBeUsedForHidingFromPredators(x))", "all x y.((Bird(x) & LooksAlikeLeaves(x) & Predator(y)) -> CanHuntFrom(x,y))", "all x y.((Bird(x) & LooksAlikeLeaves(x,y)) -> CanHideFromPredators(x,y))", "all x y.((Bird(x) & Leaf(y) & LooksAlike(x,y)) -> CanHideFromPredators(x,y))", "all x.((LookingAlikeLeaves(x) & Bird(x)) -> CanHideFromPredators(x))", "all x y.((Bird(x) & LooksAlikeLeaves(x) & Predator(y)) -> CanShelterFrom(x,y))", "all x y.((Bird(x) & LooksAlikeLeaves(x)) -> CanBeUsedForHunting(x,y))", "all x.((LookingAlikeLeaves(x) & Bird(x)) -> CanHuntFromPredators(x))", "all x y.((Bird(x) & LooksAlikeLeaves(x) & Predator(y)) -> UsedForHunting(x,y))"]}
{"id": "entailmentbank_validation_443", "nl": "hiding can be used to avoid something.", "fol": "", "prediction": ["all x y.((Hunting(x) & Something(y)) -> CanBeUsedToAvoid(x,y))", "all x.(Hunting(x) -> CanBeUsedToAvoid(x))", "all x y.((Hunting(x) & Object(y)) -> CanBeUsedToAvoid(x,y))", "all x y.((Hunting(x) & Something(y)) -> UsedToAvoid(x,y))", "all x.((Hunting(x) & Avoids(x)) -> CanBeUsedToAvoid(x))", "all x y.((Hunting(x) & Something(y)) -> Avoids(x,y))", "all x y.((Hunting(x) & Something(y)) -> CanAvoid(x,y))", "all x.(HasHunting(x) -> CanBeUsedToAvoid(x))", "all x y.((Hunting(x) & Object(y)) -> CanAvoid(x,y))", "all x.(Hunting(x) -> CanBeUsedToAvoidSomething(x))", "all x y.((Hunting(x) & Object(y)) -> Avoids(x,y))", "all x y.((HasHunting(x) & Something(y)) -> CanBeUsedToAvoid(x,y))", "all x y.((Hunting(x) & Something(y)) -> Avoid(x,y))", "all x y.((Hunting(x) & Object(y)) -> UsedToAvoid(x,y))", "all x.(Hiding(x) -> CanBeUsedToAvoid(x))", "all x.(Hunting(x) -> CanAvoid(x))"]}
{"id": "entailmentbank_validation_444", "nl": "looking like leaves can be used by birds for avoiding predators.", "fol": "", "prediction": ["all x.((LookingAlikeLeaves(x) & Bird(x)) -> AvoidsPredators(x))", "all x.(LookingAlikeLeaves(x) -> CanBeUsedByBirdsForAvoidingPredators(x))", "all x.(LooksAlikeLeaves(x) -> CanBeUsedByBirdsForAvoidingPredators(x))", "all x y.((Bird(x) & LooksAlikeLeaves(x)) -> AvoidsPredators(x,y))", "all x.((LooksAlikeLeaves(x) & Bird(x)) -> AvoidsPredators(x))", "all x.((Bird(x) & LooksAlikeLeaves(x)) -> AvoidsPredators(x))", "all x y.((Bird(x) & LooksAlikeLeaves(x)) -> AvoidsPredators(y))", "all x y.((Bird(x) & Leaf(y) & LooksAlike(x,y)) -> AvoidsPredators(x,y))", "all x.((LookingAlikeLeaves(x) & Bird(x)) -> CanBeUsedForAvoidingPredators(x))", "all x y.((Bird(x) & LooksAlikeLeaves(x) & Predator(y)) -> Avoids(x,y))", "all x y.((Bird(x) & LooksAlikeLeaves(x,y)) -> AvoidsPredators(x,y))", "all x y.((Bird(x) & Leaf(y) & LooksAlike(x,y)) -> AvoidsPredators(x))", "all x y.((Bird(x) & Leaf(y)) -> AvoidsPredators(x,y))", "all x y.((Bird(x) & LooksAlikeLeaves(x,y)) -> AvoidsPredators(x))", "all x y.((Bird(x) & LooksAlikeLeaves(x) & Predator(y)) -> CanUseFor(x,y))", "all x y.((Bird(x) & LooksAlikeLeaves(x) & Predator(y)) -> CanBeUsedFor(x,y))"]}
{"id": "entailmentbank_validation_445", "nl": "keeping warm is the opposite of becoming cold.", "fol": "", "prediction": ["all x y.((KeepsWarm(x) & Cold(y)) -> OppositeOf(x,y))", "all x.(KeepsWarm(x) -> OppositeOfBecomingCold(x))", "all x.(KeepsWarm(x) -> OppositeOfCold(x))", "all x.(KeepingWarm(x) -> OppositeOfBeingCold(x))", "all x.(KeepingWarm(x) -> OppositeOfBecomingCold(x))", "all x y.((KeepingWarm(x) & Cold(y)) -> OppositeOf(x,y))", "all x.(KeepWarm(x) -> OppositeOfCold(x))", "all x y.((KeepWarm(x) & Cold(y)) -> OppositeOf(x,y))", "all x.(KeepsWarm(x) -> OppositeOfBeingCold(x))", "all x y.((KeepsWarm(x) & Cold(y)) -> Opposite(x,y))", "all x.(KeepWarm(x) -> OppositeOfBecomingCold(x))", "all x.(KeepsWarm(x) -> OppositeOfBecomesCold(x))", "all x.(KeepingWarm(x) -> OppositeOfCold(x))", "all x y.((KeepsWarm(x) & Cold(y)) -> OppositeOfKeepingWarm(x,y))", "all x.(KeepsWarm(x) -> OppositeOfCleaning(x))", "all x y.((KeepsWarm(x) & Cold(y)) -> OppositeTo(x,y))"]}
{"id": "entailmentbank_validation_446", "nl": "if a living thing becomes too cold then that living thing will die.", "fol": "", "prediction": ["all x.((LivingThing(x) & TooCold(x)) -> Die(x))", "all x.((LivingThing(x) & TooCold(x)) -> Dies(x))", "all x.((LivingThing(x) & TooCold(x)) -> WillDie(x))", "all x y.((LivingThing(x) & TooCold(x)) -> Die(y))", "all x y.((LivingThing(x) & TooCold(x)) -> Dies(y))", "all x y.((LivingThing(x) & TooCold(x)) -> WillDie(y))", "all x.((LivingDing(x) & TooCold(x)) -> Dies(x))", "all x.((LivingDing(x) & TooCold(x)) -> Die(x))", "all x.((LivingThing(x) & TooCold(x)) -> Death(x))", "all x.((LivingThing(x) & TooCold(x)) -> WillDestroy(x))", "all x y.((LivingThing(x) & TooCold(x)) -> WillDie(x))", "all x y.((LivingThing(x) & TooCold(x)) -> WillDie(x,y))", "all x.((LivingThing(x) & TooCold(x)) -> Dead(x))", "all x y.((LivingThing(x) & TooCold(x)) -> Dies(x))", "all x.((LivingThing(x) & TooCold(x)) -> Dies(x))", "all x.((LivingDing(x) & TooCold(x)) -> WillDie(x))"]}
{"id": "entailmentbank_validation_447", "nl": "an animal usually requires warmth for survival.", "fol": "", "prediction": ["all x.(Animal(x) -> RequiresWarmthForSurvival(x))", "all x.((Animal(x) & RequiresWarmthForSurvival(x)) -> RequiresWarmthForSurvival(x))", "all x.((Animal(x) & RequiresWarmth(x)) -> RequiresWarmthForSurvival(x))", "all x y.((Animal(x) & Animal(y)) -> RequiresWarmthForSurvival(x,y))", "all x.((Animal(x) & RequiresWarmthForSurvival(x)) -> RequiresWarmth(x))", "all x.((Animal(x) & RequiresWarmth(x)) -> Survival(x))", "all x.((Animal(x) & RequiresWarmthForSurvival(x)) -> UsuallyRequiresWarmthForSurvival(x))", "all x.(Animal(x) -> RequiresWarmth(x))", "all x.((Animal(x) & RequiresWarmth(x)) -> RequiresWarmth(x))", "all x y.((Animal(x) & Warmth(y)) -> RequiresForSurvival(x,y))", "all x.((Animal(x) & RequiresWarmth(x)) -> UsuallyForSurvival(x))", "all x.((Animal(x) & RequiresWarmth(x)) -> UsuallyRequiresWarmthForSurvival(x))", "all x y.((Animal(x) & Temperature(y)) -> RequiresForSurvival(x,y))", "all x.((Animal(x) & RequiresWarmthForSurvival(x)) -> TypicallyRequiresWarmthForSurvival(x))", "all x.((Animal(x) & RequiresWarmthForSurvival(x)) -> NormallyRequiresWarmthForSurvival(x))", "all x.((Animal(x) & RequiresWarmth(x)) -> Survival(x))"]}
{"id": "entailmentbank_validation_448", "nl": "if the environmental temperature is too cold then an animal in that environment may become cold.", "fol": "", "prediction": ["all x.((Environment(x) & TooCold(x)) -> MayBecomeCold(x))", "all x.((EnvironmentalTemperature(x) & TooCold(x)) -> MayBecomeCold(x))", "all x y.((Animal(x) & Environment(y) & TooCold(y)) -> MayBecomeCold(x,y))", "all x.((Environment(x) & TooCold(x)) -> MayBeCold(x))", "all x.((EnvironmentalTemperature(x) & TooCold(x)) -> MayBecomeCold(x))", "all x y.((Animal(x) & EnvironmentalTemperature(y) & TooCold(y)) -> MayBecomeCold(x,y))", "all x.((Animal(x) & EnvironmentalTemperatureTooCold(x)) -> MayBecomeCold(x))", "all x.((Environment(x) & TooCold(x)) -> MayBecomeCold(x))", "all x y.((Environment(x) & Environment(y) & TooCold(x,y)) -> MayBecomeCold(x,y))", "all x y.((Environment(x) & Environment(y) & TooCold(x)) -> MayBecomeCold(x,y))", "all x.((EnvironmentalTemperatureTooCold(x)) -> MayBecomeCold(x))", "all x y.((Environment(x) & EnvironmentalTemperature(y) & TooCold(y)) -> MayBecomeCold(x,y))", "all x y.((Environment(x) & Environment(y) & TooCold(x)) -> MayBecomeCold(x))", "all x.((EnvironmentalTemperatureTooCold(x)) -> MayBecomeCold(x))", "all x y.((Environment(x) & Environment(y) & TooCold(x)) -> MayBecomeCold(y))", "all x.((Environment(x) & TooCold(x)) -> CanBecomeCold(x))"]}
{"id": "entailmentbank_validation_449", "nl": "an animal requires warmth in cold temperatures.", "fol": "", "prediction": ["all x.((Animal(x) & ColdTemperatures(x)) -> RequiresWarmth(x))", "all x.((Animal(x) & ColdTemperature(x)) -> RequiresWarmth(x))", "all x y.((Animal(x) & ColdTemperature(y)) -> RequiresWarmth(x,y))", "all x y.((Animal(x) & ColdTemperatures(y)) -> RequiresWarmth(x,y))", "all x.(RequiresWarmthInColdTemperatures(x) -> Animal(x))", "all x.(RequiresWarmth(x) -> ColdTemperatures(x))", "all x y z.((Animal(x) & ColdTemperature(y) & ColdTemperature(z)) -> RequiresWarmth(x,y,z))", "all x y z.((Animal(x) & ColdTemperature(y) & Temperature(z)) -> RequiresWarmth(x,y,z))", "all x.((Animal(x) & ColdTemperatures(x)) -> RequiresWarmthIn(x,y))", "all x.(Animal(x) -> RequiresWarmthInColdTemperatures(x))", "all x.(RequiresWarmth(x) -> ColdTemperatures(x))", "all x.((Animal(x) & ColdTemperature(y)) -> RequiresWarmth(x,y))", "all x y.((Animal(x) & ColdTemperature(y)) -> RequiresWarmthIn(x,y))", "all x.((Animal(x) & ColdTemperatures(y)) -> RequiresWarmth(x,y))", "all x y.((Animal(x) & ColdTemperatures(y)) -> RequiresWarmthIn(x,y))", "all x y z.((Animal(x) & ColdTemperature(y) & ColdTemperature(z)) -> RequiresWarmth(x,y))"]}
{"id": "entailmentbank_validation_450", "nl": "thick fur can be used for keeping warm.", "fol": "", "prediction": ["all x.(ThickFur(x) -> KeepsWarm(x))", "all x.(ThickFur(x) -> CanKeepWarm(x))", "all x.(ThickFur(x) -> CanBeUsedForWarming(x))", "all x.((ThickFur(x) & KeepsWarm(x)) -> CanBeUsedFor(x))", "all x y.((ThickFur(x) & Warm(y)) -> CanBeUsedFor(x,y))", "all x.(ThickFur(x) -> UsedForWarming(x))", "all x.(ThickFur(x) -> CanBeUsedForWarm(x))", "all x.(ThickFur(x) -> CanBeUsedForKeepingWarm(x))", "all x.(ThickFur(x) -> (KeepsWarm(x) | KeepsWarm(x)))", "all x.((ThickFur(x) & KeepsWarm(x)) -> CanBeUsedFor(x,y))", "all x.((ThickFur(x) & UsedForWarming(x)) -> CanBeUsedForWarming(x))", "all x.((ThickFur(x) & KeepsWarm(x)) -> CanBeUsedForWarm(x))", "all x.((ThickFur(x) & KeepsWarm(x)) -> UsesForWarm(x))", "all x.(ThickFur(x) -> CanBeUsedForKeepingWarm(x))", "all x.(ThickFur(x) -> (KeepsWarm(x) & UsesForWarm(x)))", "all x.((ThickFur(x) & KeepsWarm(x)) -> CanBeUsed(x))"]}
{"id": "entailmentbank_validation_451", "nl": "thick fur can be used by animals for survival in cold temperatures.", "fol": "", "prediction": ["all x y z.((ThickFur(x) & Animal(y) & ColdTemperature(z)) -> CanUseForSurvival(x,y,z))", "all x y.((ThickFur(x) & Animal(y)) -> CanUseForSurvivalInColdTemperatures(x,y))", "all x y z.((ThickFur(x) & Animal(y) & ColdTemperature(z)) -> CanUseForSurvival(y,z))", "all x.(ThickFur(x) -> UsedForSurvivalInColdTemperatures(x))", "all x y.((Animal(x) & ThickFur(y)) -> CanUseForSurvivalInColdTemperatures(x,y))", "all x.(ThickFur(x) -> CanBeUsedByAnimalsForSurvivalInColdTemperatures(x))", "all x y.((ThickFur(x) & Animal(y)) -> CanUseForSurvivalInColdTemperatures(y,x))", "all x y.((ThickFur(x) & Animal(y)) -> CanUseForSurvival(x,y))", "all x y.((ThickFur(x) & Animal(y)) -> CanBeUsedForSurvivalInColdTemperatures(x,y))", "all x y.((ThickFur(x) & Animal(y)) -> UsedForSurvivalInColdTemperatures(x,y))", "all x.(ThickFur(x) -> CanBeUsedForSurvivalInColdTemperatures(x))", "all x y.((ThickFur(x) & Animal(y)) -> UsesForSurvivalInColdTemperatures(x,y))", "all x y z.((ThickFur(x) & Animal(y) & ColdTemperature(z)) -> UsesForSurvival(x,y,z))", "all x y.((ThickFur(x) & Animal(y) & ColdTemperature(y)) -> CanUseForSurvival(x,y))", "all x y z.((ThickFur(x) & Animal(y) & ColdTemperature(z)) -> CanBeUsedForSurvival(x,y,z))", "all x y.((Animal(x) & ThickFur(y)) -> UsesForSurvivalInColdTemperatures(x,y))"]}
{"id": "entailmentbank_validation_452", "nl": "winter has cold temperatures.", "fol": "", "prediction": ["all x.(Winter(x) -> ColdTemperatures(x))", "all x y.((Winter(x) & ColdTemperatures(y)) -> ColdTemperatures(x,y))", "all x y.((Winter(x) & ColdTemperatures(y)) -> Has(x,y))", "all x y.((Winter(x) & Winter(y)) -> ColdTemperatures(x,y))", "all x.((Winter(x) & ColdTemperatures(x)) -> ColdTemperatures(x))", "all x y.((Winter(x) & ColdTemperatures(y)) -> ColdTemperatures(x))", "all x y.((Winter(x) & Winter(y)) -> ColdTemperatures(x))", "all x y.((Winter(x) & Temperature(y)) -> Cold(x,y))", "all x.(Winter(x) -> ColdTemperatures(x))", "all x.(Winter(x) -> HasColdTemperatures(x))", "all x y.((Winter(x) & Temperature(y)) -> Cold(x))", "all x.(Winter(x) -> ColdTemperature(x))", "all x.(Winter(x) & ColdTemperatures(x))", "all x.(Winter(x) -> ColdTemperatures(x))", "exists x.(Winter(x) & ColdTemperatures(x))", "all x.((Winter(x) & ColdTemperatures(x)) -> Has(x,y))"]}
{"id": "entailmentbank_validation_453", "nl": "thick fur can be used by animals for survival survival during winter.", "fol": "", "prediction": ["all x y.((ThickFur(x) & Animal(y)) -> CanUseForSurvivalDuringWinter(x,y))", "all x y z.((ThickFur(x) & Animal(y) & Winter(z)) -> CanUseForSurvival(x,y,z))", "all x y.((ThickFur(x) & Animal(y)) -> CanUseForSurvival(x,y))", "all x.(ThickFur(x) -> CanBeUsedByAnimalsForSurvivalDuringWinter(x))", "all x y.((ThickFur(x) & Animal(y)) -> CanUseForSurvivalDuringWinter(y,x))", "all x y.((ThickFur(x) & Animal(y)) -> CanBeUsedForSurvivalDuringWinter(x,y))", "all x y.((ThickFur(x) & Animal(y)) -> UsedForSurvivalDuringWinter(x,y))", "all x y.((ThickFur(x) & Animal(y)) -> UsesForSurvivalDuringWinter(x,y))", "all x y z.((ThickFur(x) & Animal(y) & Winter(z)) -> CanUseForSurvival(y,z))", "all x.(ThickFur(x) -> UsedForSurvivalDuringWinter(x))", "all x y z.((ThickFur(x) & Animal(y) & Winter(z)) -> UsesForSurvival(x,y,z))", "all x.(ThickFur(x) -> CanBeUsedForSurvivalDuringWinter(x))", "all x y.((ThickFur(x) & Animal(y)) -> UsesForSurvival(x,y))", "all x y.((ThickFur(x) & Animal(y)) -> CanBeUsedForSurvival(x,y))", "all x.(ThickFur(x) -> UsedByAnimalsForSurvivalDuringWinter(x))", "all x.(ThickFur(x) -> CanBeUsedByAnimalsForSurvival(x))"]}
{"id": "entailmentbank_validation_454", "nl": "a bear is a kind of animal.", "fol": "", "prediction": ["all x.(Bear(x) -> Animal(x))", "all x.(Bear(x) -> Animal(x))", "all x y.((Bear(x) & Animal(y)) -> Animal(x))", "exists x.(Bear(x) & Animal(x))", "all x y.((Bear(x) & Animal(y)) -> Animal(x,y))", "all x.(Bear(x) -> Animal(x))", "all x.((Bear(x) & Animal(x)) -> Animal(x))", "all x y.((Bear(x) & Animal(y)) -> KindOf(x,y))", "all x.(Beard(x) -> Animal(x))", "all x y.((Bear(x) & Animal(y)) -> (Animal(x) & Animal(y)))", "all x y.((Bear(x) & Animal(y)) -> SortOf(x,y))", "all x y.((Bear(x) & Animal(y)) -> Is(x,y))", "all x.(Bear(x) -> (Animal(x) & Animal(x)))", "all x y.((Bear(x) & Animal(y)) -> Animal(x))", "all x.exists y.(Bear(x) & Animal(y) & Breed(x,y))", "all x.(Bear(x) -> KindOfAnimal(x))"]}
{"id": "entailmentbank_validation_455", "nl": "thick fur can be used by bears for survival during winter.", "fol": "", "prediction": ["all x y.((ThickFur(x) & Bear(y)) -> CanUseForSurvivalDuringWinter(x,y))", "all x y.((ThickFur(x) & Bear(y)) -> CanUseForSurvival(x,y))", "all x y z.((ThickFur(x) & Bear(y) & Winter(z)) -> CanUseForSurvival(x,y,z))", "all x y.((ThickFur(x) & Bear(y)) -> CanBeUsedForSurvivalDuringWinter(x,y))", "all x.((ThickFur(x) & Bear(x)) -> CanUseForSurvivalDuringWinter(x))", "all x.((ThickFur(x) & Bear(y)) -> CanUseForSurvivalDuringWinter(x,y))", "all x y.((Bear(x) & ThickFur(y)) -> CanUseForSurvivalDuringWinter(x,y))", "all x y.((ThickFur(x) & Bear(y)) -> CanUseForSurvivalDuringWinter(y,x))", "all x y.((ThickFur(x) & Bear(y)) -> UsesForSurvivalDuringWinter(x,y))", "all x.((ThickFur(x) & Bear(x)) -> UsesForSurvivalDuringWinter(x))", "all x y z.((ThickFur(x) & Bear(y) & Winter(z)) -> CanUseForSurvival(y,z))", "all x.(ThickFur(x) -> CanBeUsedByBearsForSurvivalDuringWinter(x))", "all x y.((ThickFur(x) & Bear(y)) -> CanBeUsedForSurvival(x,y))", "all x y.((Bear(x) & ThickFur(y)) -> CanUseForSurvival(x,y))", "all x.((ThickFur(x) & Bear(y)) -> CanUseForSurvival(x,y))", "all x y.((ThickFur(x) & Bear(y)) -> UsesForSurvival(x,y))"]}
{"id": "entailmentbank_validation_456", "nl": "hunting is a kind of method for obtaining food.", "fol": "", "prediction": ["all x.(Hunting(x) -> ObtainsFood(x))", "all x.(Hunting(x) -> (ObtainsFood(x) & ObtainsFood(x)))", "all x y.((Hunting(x) & Food(y)) -> Obtains(x,y))", "all x y.((Hunting(x) & Food(y)) -> MethodForObtaining(x,y))", "all x.(Hunting(x) -> exists y.(Food(y) & Obtains(x,y))))", "all x.(Hunting(x) -> exists y.(Food(y) & Obtains(x,y)))", "all x.(Hunting(x) -> AffordsFood(x))", "all x y.((Hunting(x) & Food(y)) -> Affords(x,y))", "all x.(Hunting(x) -> (ObtentionMethod(x) & Food(x)))", "all x.(Hunting(x) -> (ObtainedFood(x) | ObtainedFood(x)))", "all x y.((Hunting(x) & Food(y)) -> Affordable(x,y))", "all x.(Hunting(x) -> (ObstaclesFood(x) & ObtainsFood(x)))", "all x y.((Hunting(x) & Food(y)) -> Obtained(x,y))", "all x y.((Hunting(x) & Food(y)) -> Occurs(x,y))", "all x.(Hunting(x) -> (ObtainsFood(x) & Food(x)))", "all x.(Hunting(x) -> (ObstacleForFood(x) & ObtainsFood(x)))"]}
{"id": "entailmentbank_validation_457", "nl": "animals require food for survival.", "fol": "", "prediction": ["all x.(Animal(x) -> RequiresFoodForSurvival(x))", "all x y.((Animal(x) & Food(y)) -> RequiresForSurvival(x,y))", "all x.(Animal(x) -> RequiresFood(x))", "all x.((Animal(x) & RequiresFoodForSurvival(x)) -> RequiresFoodForSurvival(x))", "all x.((Animal(x) & RequiresFood(x)) -> RequiresFoodForSurvival(x))", "all x.((Animal(x) & RequiresFoodForSurvival(x)) -> RequiresFood(x))", "all x y.((Animal(x) & Animal(y)) -> RequiresFoodForSurvival(x,y))", "all x y.((Animal(x) & Food(y)) -> Requires(x,y))", "all x.((Animal(x) & RequiresFood(x)) -> Survival(x))", "all x.(Animal(x) -> (RequiresFood(x) & RequiresFood(x)))", "all x y z.((Animal(x) & Food(y) & Survival(z)) -> RequiresFor(x,y,z))", "all x.(Animal(x) -> (RequiresFood(x) & ForSurvival(x)))", "all x y z.((Animal(x) & Food(y) & Survival(z)) -> Requires(x,y,z))", "all x.(Animal(x) -> (RequiresFood(x) & RequiresFoodForSurvival(x)))", "all x.((Animal(x) & RequiresFood(x)) -> Survival(x))", "all x.((Animal(x) & RequiresFood(x)) -> RequiresFood(x))"]}
{"id": "entailmentbank_validation_458", "nl": "some animals must hunt to survive.", "fol": "", "prediction": ["exists x.(Animal(x) & MustHunt(x))", "exists x.(Animal(x) & Hunts(x))", "exists x.(Animal(x) & HuntsToSurvive(x))", "exists x.(Animal(x) & Hunt(x))", "exists x.(Animal(x) & MustHuntToSurvive(x))", "exists x.(Animal(x) & HuntToSurvive(x))", "exists x.(Animal(x) & HuntsForSurvival(x))", "exists x y.(Animal(x) & Hunt(y) & Survives(x,y))", "exists x y.(Animal(x) & Animal(y) & HuntsToSurvive(x,y))", "exists x y.(Animal(x) & Animal(y) & MustHunt(x,y))", "exists x.(Animal(x) & Hunter(x))", "exists x y.(Animal(x) & Animal(y) & MustHuntToSurvive(x,y))", "exists x.(Animal(x) & HasHunt(x))", "exists x.(Animal(x) & MustHuntForSurvival(x))", "exists x y.(Animal(x) & Animal(y) & Hunts(x,y))", "exists x.(Animal(x) & HasToHunt(x))"]}
{"id": "entailmentbank_validation_459", "nl": "hunting requires sensing prey.", "fol": "", "prediction": ["all x.(Hunting(x) -> RequiresSensingPrey(x))", "all x y.((Hunting(x) & Prey(y)) -> RequiresSensing(x,y))", "all x y.((Hunting(x) & Prey(y)) -> RequiresSense(x,y))", "all x y z.((Hunting(x) & Prey(y) & Prey(z)) -> RequiresSensing(x,y,z))", "all x.(Hunting(x) -> RequiresSenseingPrey(x))", "all x y.((Hunting(x) & Prey(y)) -> RequiresSenseing(x,y))", "all x y.((Hunting(x) & Prey(y)) -> RequiresSensement(x,y))", "all x y z.((Hunting(x) & Prey(y) & Prey(z)) -> RequiresSense(x,y,z))", "all x y.((Hunting(x) & Prey(y)) -> RequiresSenses(x,y))", "all x.(Hooting(x) -> RequiresSensingPrey(x))", "all x y z.((Hunting(x) & Prey(y) & Presence(z)) -> RequiresSensing(x,y,z))", "all x y.((Hunting(x) & Prey(y)) -> Requires(x,y))", "all x.(Hunting(x) -> RequiresSensesPrey(x))", "all x y z.((Hunting(x) & Prey(y) & Prey(z)) -> RequiresSensing(x,y))", "all x y z.((Hunting(x) & Prey(y) & Prey(z)) -> Requires(x,y,z))", "all x.(Hunting(x) -> RequiresSensing(x))"]}
{"id": "entailmentbank_validation_460", "nl": "better senses have a positive impact on an animal's survival.", "fol": "", "prediction": ["all x y.((BetterSenses(x) & Animal(y)) -> PositiveImpactOnSurvival(x,y))", "all x.(BetterSenses(x) -> PositiveImpactOnAnimalSurvival(x))", "all x.(BetterSenses(x) -> PositiveImpactOnSurvival(x))", "all x y.((BetterSenses(x) & Animal(y)) -> PositiveImpact(x,y))", "all x y.((Sense(x) & Animal(y)) -> PositiveImpactOnSurvival(x,y))", "all x y.((BetterSense(x) & Animal(y)) -> PositiveImpactOnSurvival(x,y))", "all x.((BetterSenses(x) & Animal(y)) -> PositiveImpactOnSurvival(x,y))", "all x y.((Sense(x) & Animal(y) & Better(x,y)) -> PositiveImpactOnSurvival(x,y))", "all x y z.((BetterSenses(x) & Animal(y) & Survival(z)) -> PositiveImpact(x,y,z))", "all x y z.((BetterSenses(x) & Animal(y) & Survival(z)) -> PositiveImpact(x,y,z))", "all x y.((BetterSenses(x) & Animal(y)) -> PositiveInfluenceOnSurvival(x,y))", "all x y z.((BetterSenses(x) & Animal(y) & Survival(z)) -> PositiveImpactOn(x,y,z))", "all x y z.((BetterSenses(x) & Animal(y) & Survival(z)) -> PositiveImpactOn(x,y,z))", "all x y.((Senses(x) & Animal(y)) -> PositiveImpactOnSurvival(x,y))", "all x.((BetterSenses(x) & Animal(x)) -> PositiveImpactOnSurvival(x))", "all x.((Sense(x) & Better(x)) -> PositiveImpactOnSurvival(x))"]}
{"id": "entailmentbank_validation_461", "nl": "hearing is used for sensing sound by animals.", "fol": "", "prediction": ["all x y.((Hearing(x) & Animal(y)) -> SensingSound(x,y))", "all x y.((Hearing(x) & Animal(y)) -> UsedForSensingSound(x,y))", "all x.(Hearing(x) -> SensingSoundByAnimals(x))", "all x y z.((Hearing(x) & Animal(y) & Sound(z)) -> Sensing(x,y,z))", "all x y.((Hearing(x) & Animal(y)) -> SensitsSound(x,y))", "all x y.((Hearing(x) & Animal(y)) -> SenseSound(x,y))", "all x y z.((Hearing(x) & Animal(y) & Sound(z)) -> UsedForSensing(x,y,z))", "all x y.((HasHearing(x) & Animal(y)) -> SensingSound(x,y))", "all x y z.((Hearing(x) & Animal(y) & Sound(z)) -> Sense(x,y,z))", "all x y.((Hearing(x) & Animal(y)) -> SensingSoundBy(x,y))", "all x y z.((Hearing(x) & Animal(y) & Animal(z)) -> SensingSound(x,y,z))", "all x.(Hearing(x) -> UsedForSensingSoundByAnimals(x))", "all x y.((HasHearing(x) & Animal(y)) -> UsedForSensingSound(x,y))", "all x y.((Hearing(x) & Animal(y)) -> SenseSoundBy(x,y))", "all x.(Hearing(x) -> SensingSound(x))", "all x y.((Hearing(x) & Animal(y)) -> Sense(x,y))"]}
{"id": "entailmentbank_validation_462", "nl": "better hearing has a positive impact on an animal's survival.", "fol": "", "prediction": ["all x y.((BetterHearing(x) & Animal(y)) -> PositiveImpactOnSurvival(x,y))", "all x.(BetterHearing(x) -> PositiveImpactOnAnimalSurvival(x))", "all x y.((Animal(x) & BetterHearing(x) & Animal(y)) -> PositiveImpactOnSurvival(x,y))", "all x y.((Animal(x) & BetterHearing(x)) -> PositiveImpactOnSurvival(x,y))", "all x.(BetterHearing(x) -> PositiveImpactOnSurvival(x))", "all x y.((Animal(x) & BetterHearing(x)) -> PositiveImpactOnSurvival(y))", "all x y.((Animal(x) & BetterHearing(x,y)) -> PositiveImpactOnSurvival(x,y))", "all x y.((MoreHearing(x) & Animal(y)) -> PositiveImpactOnSurvival(x,y))", "all x.((Animal(x) & BetterHearing(x)) -> PositiveImpactOnSurvival(x))", "all x y.((BestHearing(x) & Animal(y)) -> PositiveImpactOnSurvival(x,y))", "all x y.((Animal(x) & BetterHearing(y)) -> PositiveImpactOnSurvival(x,y))", "all x y.((Animal(x) & Animal(y)) -> BetterHearing(x,y))", "all x y.((Animal(x) & BetterHearing(y)) -> PositiveImpactOnSurvival(y,x))", "all x.((BetterHearing(x) & Animal(y)) -> PositiveImpactOnSurvival(x,y))", "all x.((Hearing(x) & Animal(x)) -> PositiveImpactOnSurvival(x))", "all x.((Hearing(x) & Animal(y)) -> PositiveImpactOnSurvival(x,y))"]}
{"id": "entailmentbank_validation_463", "nl": "senses are passed down from parent to offspring.", "fol": "", "prediction": ["all x y z.((Sensor(x) & Offspring(y) & Parent(z)) -> PassedDown(x,y,z))", "all x y z.((Sense(x) & Parent(y) & Offspring(z)) -> PassedDown(x,y,z))", "all x y.((Sensor(x) & Offspring(y)) -> PassedDown(x,y))", "all x y z.((Senses(x) & Parent(y) & Offspring(z)) -> PassedDown(x,y,z))", "all x y.((Sensor(x) & Offspring(y)) -> PassedFromParentToOffspring(x,y))", "all x y z.((Sensor(x) & Offspring(y) & Parent(z)) -> PassesDown(x,y,z))", "all x y z.((Sense(x) & Parent(y) & Offspring(z)) -> PassedDown(x,y,z))", "all x y.((Parent(x) & Offspring(y)) -> PassedSenses(x,y))", "all x y z.((Sensor(x) & Parent(y) & Offspring(z)) -> PassedDown(x,y,z))", "all x y z.((Sensor(x) & Offspring(y) & Parent(z)) -> PassedFromTo(x,y,z))", "all x y z.((Sensor(x) & Offspring(y) & Parent(z)) -> PassedDownFromTo(x,y,z))", "all x y z.((Sensor(x) & Offspring(y) & Parent(z)) -> PassedDown(x,z))", "all x y.((Sensor(x) & Offspring(y)) -> PassedDownFromParentToOffspring(x,y))", "all x y z.((Sense(x) & Parent(y) & Offspring(z)) -> PassedFromTo(x,y,z))", "all x y z.((Sensor(x) & Offspring(y) & Parent(z)) -> PassedDeep(x,y,z))", "all x y z.((Sense(x) & Parent(y) & Offspring(z)) -> PassedDownFromTo(x,y,z))"]}
{"id": "entailmentbank_validation_464", "nl": "inheriting is when an inherited characteristic is passed from parent to offspring by genetics / dna.", "fol": "", "prediction": ["all x y z.((Inheriting(x) & Parent(y) & Offspring(z) & Genetics(y) & Dna(z)) -> PassesCharacteristic(x,y,z))", "all x y z.((Inheriting(x) & Parent(y) & Offspring(z) & Genetics(x) & Dna(x)) -> PassesCharacteristic(x,y,z))", "all x y z.((EmbeddedCharacteristic(x) & Parent(y) & Offspring(z) & Genetics(x) & Dna(x)) -> PassedBy(x,y,z))", "all x y z.((Earning(x) & Parent(y) & Offspring(z) & Genetics(x) & Dna(x)) -> PassesCharacteristic(x,y,z))", "all x y z.((Inheriting(x) & Parent(y) & Offspring(z) & Genetics(y) & Dna(z)) -> PassedCharacteristic(x,y,z))", "all x y z.((Inheriting(x) & Parent(y) & Offspring(z) & Genetics(x) & Dna(x)) -> PassedCharacteristic(x,y,z))", "all x y z.((Earning(x) & Parent(y) & Offspring(z) & Genetics(x) & Dna(x)) -> PassedCharacteristic(x,y,z))", "all x y z.((Earning(x) & Parent(y) & Offspring(z) & Genetics(y) & Dna(z)) -> PassesCharacteristic(x,y,z))", "all x y z.((Heritage(x) & Parent(y) & Offspring(z) & Genetics(x) & Dna(x)) -> PassesCharacteristic(x,y,z))", "all x y z.((Earning(x) & Parent(y) & Offspring(z)) -> (PassedByGenetics(x,y,z) & PassedByDna(x,z)))", "all x y z.((Earning(x) & Parent(y) & Offspring(z) & Genetics(y) & Dna(z)) -> PassedCharacteristic(x,y,z))", "all x y z.((Earning(x) & Parent(y) & Offspring(z)) -> (PassedByGenetics(x,y,z) & PassedByDna(x,y,z)))", "all x y z.((Inheriting(x) & Parent(y) & Offspring(z) & GeneticsDna(x)) -> PassesCharacteristic(x,y,z))", "all x y z.((Inheriting(x) & Parent(y) & Offspring(z) & Genetics(x) & Dna(x)) -> PassedCharacteristic(y,z))", "all x y z.((Earning(x) & Parent(y) & Offspring(z)) -> (PassedByGenetics(x,y,z) & PassedByDna(x,y)))", "all x y z.((EmbeddedCharacteristic(x) & Parent(y) & Offspring(z)) -> PassedBy(x,y,z))"]}
{"id": "entailmentbank_validation_465", "nl": "senses are an inherited characteristic.", "fol": "", "prediction": ["all x.(Sense(x) -> ErasedCharacteristic(x))", "all x.(Senses(x) -> ErasedCharacteristic(x))", "all x.(Sense(x) -> ErasedCharacteristic(x))", "all x.(Sense(x) -> InheritableCharacteristic(x))", "all x.(Sense(x) -> HealedCharacteristic(x))", "all x.(Sense(x) -> inheritedCharacteristic(x))", "all x.(Sense(x) -> ErasedCaracteristic(x))", "all x.(Senses(x) -> HealedCharacteristic(x))", "all x.(Senses(x) -> InheritableCharacteristic(x))", "all x.(Sense(x) -> GenealogicalCharacteristic(x))", "all x.(Sense(x) -> HedgedCharacteristic(x))", "all x.(Senses(x) -> inheritedCharacteristic(x))", "all x.(Sense(x) -> ShedgedCharacteristic(x))", "all x.(Senses(x) -> ErasedCaracteristic(x))", "all x.(Sense(x) -> HeardCharacteristic(x))", "all x.(Senses(x) -> HeardCharacteristic(x))"]}
{"id": "entailmentbank_validation_466", "nl": "hearing is an inherited characteristic.", "fol": "", "prediction": ["all x.(Hearing(x) -> ErasedCharacteristic(x))", "all x.(HasHearing(x) -> ErasedCharacteristic(x))", "all x.(Hearing(x) -> HealedCharacteristic(x))", "all x.((Hearing(x) & ErasedCharacteristic(x)) -> HasHearing(x))", "all x.(Hearing(x) -> ErasedCharacteristic(x))", "all x.(Hearing(x) -> InheritableCharacteristic(x))", "all x.((Hearing(x) & ErasedCharacteristic(x)) -> Hearing(x))", "all x.(HasHearingCharacteristic(x) -> HasHearing(x))", "all x.((Hearing(x) & ErasedCharacteristic(x)) -> HasHasHearing(x))", "All x.(Hearing(x) -> ErasedCharacteristic(x))", "all x.(Hearing(x) -> ErasedCaracteristic(x))", "all x.(Hearing(x) -> GenealogicalCharacteristic(x))", "all x.(HasHearingCharacteristic(x) -> ErasedCharacteristic(x))", "all x.(Hearing(x) -> inheritedCharacteristic(x))", "all x.(Hearing(x) -> HasHearingCharacteristic(x))", "all x.((Hearing(x) & ErasedCharacteristic(x)) -> Has(x,Hearing))"]}
{"id": "entailmentbank_validation_467", "nl": "better hearing is an inherited characteristic that has a positive impact on an animal's survival.", "fol": "", "prediction": ["all x.(BetterHearing(x) -> (EarnedCharacteristic(x) & PositiveImpactOnSurvival(x)))", "all x y.((BetterHearing(x) & Animal(y)) -> (ErasedCharacteristic(x) & PositiveImpactOnSurvival(x,y)))", "all x.(BetterHearing(x) -> (ErasedCharacteristic(x) & PositiveImpactOnAnimalSurvival(x)))", "all x.(BetterHearing(x) -> (EarnedCharacteristic(x) & PositiveImpactOnAnimalSurvival(x)))", "all x.(BetterHearing(x) -> (ErasedCharacteristic(x) & PositiveImpactOnSurvival(x)))", "all x y.((BetterHearing(x) & Animal(y)) -> (EarnedCharacteristic(x) & PositiveImpactOnSurvival(x,y)))", "all x.(BetterHearing(x) -> (HasPositiveImpactOnAnimalSurvival(x) & HasPositiveImpactOnAnimalSurvival(x)))", "all x y.((BetterHearing(x) & Animal(y)) -> (ErasedCharacteristic(x,y) & PositiveImpactOnSurvival(x,y)))", "all x.(BetterHearing(x) -> (EarnedCharacteristic(x) & PositiveImpactOnSurvival(x)))", "all x.(BetterHearing(x) -> (EarnedCharacteristic(x) & PositiveImpactOnAnimalSurvival(x)))", "all x y.((BetterHearing(x) & Animal(y)) -> (HasPositiveImpactOnSurvival(x,y)))", "all x.(BetterHearing(x) -> (HasPositiveImpactOnAnimalSurvival(x) & ErasedCharacteristic(x)))", "all x.(BetterHearing(x) -> (ErasedCharacteristic(x) & PositiveImpactOnAnimalSurvival(x)))", "all x y.((BetterHearing(x) & Animal(y)) -> (ErasedCharacteristic(x,y) & PositiveImpactOnSurvival(x)))", "all x y.((BetterHearing(x) & Animal(y)) -> (ErasedCharacteristic(x) & PositiveImpactOnSurvival(x)))", "all x.(BetterHearing(x) -> (ErasedCharacteristic(x) & PositiveImpactOnSurvival(x)))"]}
{"id": "entailmentbank_validation_468", "nl": "as the ability of a living thing to survive / to reproduce increases, the likelihood of passing on its traits to its decendents will increase.", "fol": "", "prediction": ["all x.((LivingThing(x) & AbilityToSurvive(x) & AbilityToReproduce(x)) -> ProbabilityOfPassingOnTraitsToDecendents(x))", "all x.((LivingThing(x) & AbilityToSurvive(x) & AbilityToReproduce(x)) -> ProbabilityOfPassingOnTraitsToDecendents(x))", "all x.((LivingThing(x) & AbilityToSurvive(x) & AbilityToReproduce(x)) -> ProbabilityOfPassingOnTreatmentsToDecendents(x))", "all x.((LivingThing(x) & AbilityToSurvive(x) & AbilityToReproduce(x)) -> ProbabilityToPassOnTraitsToDecendents(x))", "all x y.((LivingThing(x) & AbilityToSurvive(x) & AbilityToReproduce(x)) -> ProbabilityOfPassingOnTraitsToDecendents(y))", "all x.((LivingThing(x) & AbilityToSurvive(x) & AbilityToReproduce(x)) -> ProbabilityOfPassingTreatmentsToDecendents(x))", "all x y.((LivingThing(x) & AbilityToSurvive(x) & AbilityToReproduce(x)) -> ProbabilityOfPassingOnTraitsToDecendents(y))", "all x y.((LivingThing(x) & AbilityToSurvive(x) & AbilityToReproduce(x)) -> ProbabilityOfPassingOnTreatmentsToDecendents(y))", "all x.((LivingThing(x) & AbilityToSurvive(x) & AbilityToReproduce(x)) -> ProbabilityToPassOnTraits(x))", "all x y.((LivingThing(x) & AbilityToSurvive(x) & AbilityToReproduce(x)) -> ProbabilityOfPassingTreatmentsToDecendents(y))", "all x.((LivingThing(x) & AbilityToSurvive(x) & AbilityToReproduce(x)) -> ProbabilityOfPassingOnTraits(x))", "all x y.((LivingThing(x) & AbilityToSurvive(x) & AbilityToReproduce(x)) -> IncreasedLikelihoodOfPassingOnTraitsToDecendents(y))", "all x y.((LivingThing(x) & AbilityToSurvive(x,y) & AbilityToReproduce(x,y)) -> ProbabilityOfPassingOnTraitsToDecendents(x,y))", "all x.((LivingThing(x) & AbilityToSurvive(x) & AbilityToReproduce(x)) -> ProbabilityOfPassingOnTreatments(x))", "all x y.((LivingThing(x) & AbilityToSurvive(x,y) & AbilityToReproduce(x,y)) -> ProbabilityOfPassingOnTreatmentsToDecendents(x,y))", "all x y.((LivingThing(x) & AbilityToSurvive(x) & AbilityToReproduce(x)) -> ProbabilityOfPassingOnTraits(y,x))"]}
{"id": "entailmentbank_validation_469", "nl": "animals with traits that positively impact their survival have a greater ability to survive / reproduce.", "fol": "", "prediction": ["all x.((Animal(x) & PositivelyImpactsSurvival(x)) -> GreaterAbilityToSurvive(x))", "all x.((Animal(x) & PositiveSurvivalTraits(x)) -> GreaterAbilityToSurvive(x))", "all x.((Animal(x) & PositivelyImpactsSurvival(x)) -> GreaterAbilityToSurviveOrReproduce(x))", "all x.((Animal(x) & PositiveSurvivalTreatments(x)) -> GreaterAbilityToSurvive(x))", "all x.((Animal(x) & PositiveSurvivalTraits(x)) -> GreaterAbilityToSurviveOrReproduce(x))", "all x.((Animal(x) & PositivelyImpactsSurvival(x)) -> GreaterAbilityToSurviveAndReproduce(x))", "all x.((Animal(x) & PositiveTreatments(x) & PositiveSurvival(x)) -> GreaterAbilityToSurvive(x))", "all x.((Animal(x) & PositiveTreatment(x) & PositiveSurvival(x)) -> GreaterAbilityToSurvive(x))", "all x.((Animal(x) & PositiveSurvivalTraits(x)) -> GreaterAbilityToSurviveAndReproduce(x))", "all x.((Animal(x) & PositiveTraits(x) & PositiveSurvival(x)) -> GreaterAbilityToSurvive(x))", "all x.((Animal(x) & PositivelyImpactsSurvivalTraits(x)) -> GreaterAbilityToSurvive(x))", "all x.((Animal(x) & PositivelyImpactsSurvival(x)) -> GreaterAbilityToSurvive(x))", "all x.((Animal(x) & PositiveTreatments(x) & PositiveSurvival(x)) -> GreaterAbilityToSurviveOrReproduce(x))", "all x.((Animal(x) & PositiveTreatment(x) & PositiveSurvival(x)) -> GreaterAbilityToSurviveOrReproduce(x))", "all x.((Animal(x) & PositiveTreatments(x) & PositiveSurvival(x)) -> GreaterAbilityToSurviveAndReproduce(x))", "all x.((Animal(x) & PositiveTreatmentImpactsSurvival(x)) -> GreaterAbilityToSurvive(x))"]}
{"id": "entailmentbank_validation_470", "nl": "the decendants of an animal with traits that positively impacted their survival will also have traits that positivley impact their survival.", "fol": "", "prediction": ["all x y.((Decendant(x) & Animal(y) & PositivelyImpactsSurvival(x,y)) -> PositivelyImpactsSurvival(x,y))", "all x y.((Decendant(x) & Animal(y) & PositivelyImpactsSurvivalTraits(x,y)) -> PositivelyImpactsSurvivalTraits(x,y))", "all x.((Decendant(x) & Animal(x) & PositivelyImpactsSurvival(x)) -> PositivelyImpactsSurvival(x))", "all x y.((Decendant(x) & Animal(y) & PositivelyInfluentialTraits(x,y)) -> PositivelyInfluentialTraits(x,y))", "all x y.((Decendant(x) & Animal(y) & PositivelyInfluencedSurvivalTraits(x,y)) -> PositivelyInfluencedSurvivalTraits(x,y))", "all x y.((Decendant(x) & Animal(y) & PositiveTreatment(x,y) & PositiveTreatment(x,y)) -> PositiveTreatment(x,y))", "all x y.((Decendant(x) & Animal(y) & PositivelyInfluencedSurvival(x,y)) -> PositivelyInfluencedSurvival(x,y))", "all x y.((Decendant(x) & Animal(y) & PositivelyInfluentialTreatments(x,y)) -> PositivelyInfluentialTreatments(x,y))", "all x y.((Decendant(x) & Animal(y) & PositivelyImpactsSurvival(y)) -> PositivelyImpactsSurvival(x,y))", "all x y.((Decendant(x) & Animal(y) & PositivelyImpactsSurvival(x,y)) -> PositivelyImpactsSurvival(y,x))", "all x y.((Decendant(x) & Animal(y) & PositivelyInfluentialTraits(x,y)) -> PositivelyInfluentialTraits(x,y))", "all x y.((Decendant(x) & Animal(y) & PositivelyInfluencedSurvivalTraits(x,y)) -> PositivelyImpactsSurvivalTraits(x,y))", "all x y.((Decendant(x) & Animal(y) & PositivelyImpactsSurvival(x)) -> PositivelyImpactsSurvival(x,y))", "all x y.((Decendant(x) & Animal(y) & PositivelyImpactsSurvival(x,y)) -> PositivelyImpactsSurvival(y))", "all x y.((Decendant(x) & Animal(y) & PositivelyInfluencesSurvival(x,y)) -> PositivelyInfluencesSurvival(x,y))", "all x y.((Decendant(x) & Animal(y) & PositivelyInfluentialTraits(x,y)) -> PositivelyImpactsSurvival(x,y))"]}
{"id": "entailmentbank_validation_471", "nl": "the decendants of an animal with better hearing will also have better hearing.", "fol": "", "prediction": ["all x y.((Decendant(x) & Animal(y) & BetterHearing(y)) -> BetterHearing(x,y))", "all x.((Decendant(x) & Animal(x) & BetterHearing(x)) -> BetterHearing(x))", "all x y.((Decendant(x) & Animal(y) & BetterHearing(y)) -> BetterHearing(y))", "all x.((Animal(x) & Decendant(x) & BetterHearing(x)) -> BetterHearing(x))", "all x y.((Animal(x) & Decendant(y) & BetterHearing(y)) -> BetterHearing(y))", "all x y.((Decendant(x) & Animal(y) & BetterHearing(x,y)) -> BetterHearing(x,y))", "all x y.((Animal(x) & Decendant(x) & Animal(y) & BetterHearing(x,y)) -> BetterHearing(x,y))", "all x y.((Animal(x) & Decendant(x,y) & BetterHearing(y)) -> BetterHearing(x,y))", "all x y.((Animal(x) & Decendant(x) & Animal(y) & BetterHearing(y)) -> BetterHearing(x,y))", "all x y.((Animal(x) & Decendant(y) & BetterHearing(x)) -> BetterHearing(y))", "all x y.((Animal(x) & Decendant(y) & BetterHearing(y)) -> BetterHearing(x,y))", "all x.((Animal(x) & DecendantOfBetterHearing(x)) -> BetterHearing(x))", "all x y.((Animal(x) & Decendant(x) & Animal(y) & BetterHearing(x)) -> BetterHearing(y))", "all x y.((Decendant(x) & Animal(y) & BetterHearing(y,x)) -> BetterHearing(x,y))", "all x y.((Animal(x) & Decendant(x) & Animal(y) & BetterHearing(x)) -> BetterHearing(x))", "all x y.((Decendant(x) & Animal(y) & BetterHearing(y)) -> BetterHearing(x))"]}
{"id": "entailmentbank_validation_472", "nl": "mosquitos can sense carbon dioxide in the air.", "fol": "", "prediction": ["all x.(Mosquito(x) -> CanSenseCarbonDioxide(x))", "all x.(Mosquito(x) -> (SensesCarbonDioxide(x) & InAir(x)))", "all x.(Mosquito(x) -> CanSenseCarbonDioxideInAir(x))", "all x y.((Mosquito(x) & Air(y)) -> CanSenseCarbonDioxide(x,y))", "all x y.((Moskito(x) & Air(y)) -> CanSenseCarbonDioxide(x,y))", "all x.(Moskito(x) -> (SensesCarbonDioxide(x) & InAir(x)))", "all x.(Moskito(x) -> CanSenseCarbonDioxide(x))", "all x y.((Mosquito(x) & Air(y)) -> SensitsCarbonDioxide(x,y))", "all x.(Moskito(x) -> CanSenseCarbonDioxideInAir(x))", "all x.(Mosquito(x) -> (SensesCarbonDioxideInAir(x)))", "all x y.((Mosquito(x) & Air(y)) -> SenseCarbonDioxide(x,y))", "all x y.((Mosquito(x) & CarbonDioxide(y)) -> CanSense(x,y))", "all x.(Mosquito(x) -> SensitsCarbonDioxide(x))", "all x.(Mosquito(x) -> (SensesCarbonDioxide(x) & Air(x)))", "all x.(Mouse(x) -> CanSenseCarbonDioxide(x))", "all x y.((Mosquito(x) & CarbonDioxide(y)) -> CanSenseInAir(x,y))"]}
{"id": "entailmentbank_validation_473", "nl": "animals are a source of carbon dioxide by exhaling.", "fol": "", "prediction": ["all x.(Animal(x) -> SourceOfCarbonDioxideByExhaling(x))", "all x.(Animal(x) -> SourceOfCarbonDioxide(x))", "all x y.((Animal(x) & Exhaling(y)) -> SourceOfCarbonDioxide(x,y))", "all x.((Animal(x) & Exhale(x)) -> SourceOfCarbonDioxide(x))", "all x.((Animal(x) & Exhaling(x)) -> SourceOfCarbonDioxide(x))", "all x y.((Animal(x) & CarbonDioxide(y)) -> SourceByExhaling(x,y))", "all x.((Animal(x) & Exhales(x)) -> SourceOfCarbonDioxide(x))", "all x.(Animal(x) -> SourceOfCO2ByExhaling(x))", "all x y z.((Animal(x) & CarbonDioxide(y) & Exhaling(z)) -> Source(x,y,z))", "all x y.((Animal(x) & CarbonDioxide(y)) -> Source(x,y))", "all x.(Animal(x) -> (SourceOfCarbonDioxide(x) & Exhale(x)))", "all x y.((Animal(x) & CarbonDioxide(y) & Exhaling(x)) -> Source(x,y))", "all x y.((Animal(x) & CarbonDioxide(y)) -> Exhales(x,y))", "all x.(Animal(x) -> CarbonDioxideSource(x))", "all x y z.((Animal(x) & CarbonDioxide(y) & Exhaling(z)) -> SourceOf(x,y,z))", "all x.(Animal(x) -> (SourceOfCarbonDioxide(x) & Exhales(x)))"]}
{"id": "entailmentbank_validation_474", "nl": "mosquitos sense animals by sensing their carbon dioxide emissions.", "fol": "", "prediction": ["all x.(Mosquito(x) -> (SensesAnimals(x) & SensingCarbonDioxideEmissions(x)))", "all x.(Mosquito(x) -> (SensesAnimals(x) & SensitsCarbonDioxideEmissions(x)))", "all x.(Moskito(x) -> (SensesAnimals(x) & SensingCarbonDioxideEmissions(x)))", "all x y.((Mosquito(x) & Animal(y) & SensingCarbonDioxideEmissions(x,y)) -> Sense(x,y))", "all x.(Mosquito(x) -> (SensesAnimals(x) & SentsCarbonDioxideEmissions(x)))", "all x y z.((Mosquito(x) & Animal(y) & CarbonDioxideEmission(z)) -> Sense(x,y,z))", "all x y z.((Mosquito(x) & Animal(y) & CarbonDioxideEmissions(z)) -> Sense(x,y,z))", "all x y.((Mosquito(x) & Animal(y)) -> SensingCarbonDioxideEmissions(x,y))", "all x.(Moskito(x) -> (SensesAnimals(x) & SensitsCarbonDioxideEmissions(x)))", "all x y.((Moskito(x) & Animal(y) & SensingCarbonDioxideEmissions(x,y)) -> Sense(x,y))", "all x.(Mouse(x) -> (SensesAnimals(x) & SensingCarbonDioxideEmissions(x)))", "all x y z.((Mouse(x) & Animal(y) & CarbonDioxideEmission(z)) -> Sense(x,y,z))", "all x y.((Mosquito(x) & Animal(y) & SensingCarbonDioxideEmissions(x,y)) -> Sensors(x,y))", "all x y z.((Mouse(x) & Animal(y) & CarbonDioxideEmissions(z)) -> Sense(x,y,z))", "all x y z.((Mosquito(x) & Animal(y) & CarbonDioxide(z)) -> Sense(x,y,z))", "all x y.((Mosquito(x) & Animal(y) & SensingCarbonDioxideEmissions(x)) -> Sense(x,y))"]}
{"id": "entailmentbank_validation_475", "nl": "living things eat their food source.", "fol": "", "prediction": ["all x.(LivingThing(x) -> EatsFoodSource(x))", "all x y.((LivingThing(x) & FoodSource(y)) -> Eats(x,y))", "all x.((LivingThing(x) & EatsFoodSource(x)) -> EatsFoodSource(x))", "all x y z.((LivingThing(x) & FoodSource(y) & FoodSource(z)) -> Eats(x,y,z))", "all x.((LivingThing(x) & FoodSource(x)) -> Eats(x,y))", "all x.((LivingThing(x) & FoodSource(x)) -> Eats(x))", "all x.((LivingThing(x) & EatsFoodSource(x)) -> LivesIn(x))", "all x.((LivingThing(x) & FoodSource(y)) -> Eats(x,y))", "all x y.((LivingThing(x) & FoodSource(y)) -> Eat(x,y))", "all x y.((Living(x) & FoodSource(y)) -> Eats(x,y))", "all x.((LivingThing(x) & EatsFoodSource(x)) -> LivingThing(x))", "all x y.((LivingThing(x) & FoodSource(y) & Eats(x,y)) -> Eats(x,y))", "all x y z.((LivingThing(x) & FoodSource(y) & FoodSource(z)) -> Eats(x,y))", "all x.(LivingThing(x) -> EatFoodSource(x))", "all x y z.((LivingThing(x) & FoodSource(y) & FoodSource(z)) -> Eat(x,y,z))", "all x.((LivingThing(x) & EatsFoodSource(x)) -> LivingThingEatsFoodSource(x))"]}
{"id": "entailmentbank_validation_476", "nl": "mosquitos eat blood of animals.", "fol": "", "prediction": ["all x y.((Mosquito(x) & Animal(y)) -> EatsBlood(x,y))", "all x.(Mosquito(x) -> EatsBloodOfAnimals(x))", "all x y.((Mouse(x) & Animal(y)) -> EatsBlood(x,y))", "all x y z.((Mosquito(x) & Animal(y) & Blood(z)) -> Eats(x,y,z))", "all x y z.((Mouse(x) & Animal(y) & Blood(z)) -> Eats(x,y,z))", "all x y.((Moskito(x) & Animal(y)) -> EatsBlood(x,y))", "all x.(Mouse(x) -> EatsBloodOfAnimals(x))", "all x.(Moskito(x) -> EatsBloodOfAnimals(x))", "all x y.((Mosquito(x) & Animal(y)) -> EatsBloodOf(x,y))", "all x.(Mosquito(x) -> EatsBlood(x))", "all x y.((Mosquito(x) & Animal(y)) -> Eats(x,y))", "all x y z.((Mosquito(x) & Animal(y) & Blood(z)) -> Eat(x,y,z))", "all x y z.((Mosquito(x) & Animal(y) & Blood(z)) -> Eats(x,y))", "all x y z.((Mouse(x) & Animal(y) & Blood(z)) -> Eat(x,y,z))", "all x y z.((Mouse(x) & Animal(y) & Blood(z)) -> Eats(x,y))", "all x.(Mosquito(x) -> (EatsBloodOfAnimals(x)))"]}
{"id": "entailmentbank_validation_477", "nl": "animals are a source of food for mosquitos.", "fol": "", "prediction": ["all x y.((Animal(x) & Mosquito(y)) -> SourceOfFood(x,y))", "all x y.((Animal(x) & Mosquito(y)) -> SourceOfFoodFor(x,y))", "all x.(Animal(x) -> SourceOfFoodForMouses(x))", "all x y z.((Animal(x) & Mosquito(y) & Mosquito(z)) -> SourceOfFood(x,y,z))", "all x.(Animal(x) -> SourceOfFoodForMosquitos(x))", "all x.(Animal(x) -> SourceOfFood(x))", "all x y z.((Animal(x) & Mosquito(y) & FoodSource(z)) -> SourceOf(x,y,z))", "all x y.((Animal(x) & Moskito(y)) -> SourceOfFood(x,y))", "all x.(Animal(x) -> SourceOfFood(x,Mosquitos))", "all x y z.((Animal(x) & Mosquito(y) & FoodSource(z)) -> SourceOfFood(x,y,z))", "all x y z.((Animal(x) & Mosquito(y) & Moskito(z)) -> SourceOfFood(x,y,z))", "all x y z.((Animal(x) & Mosquito(y) & FoodSource(z)) -> Source(x,y,z))", "all x y.((Animal(x) & Mosquito(y)) -> FoodSource(x,y))", "all x y z.((Animal(x) & Mosquito(y) & Mosquito(z)) -> SourceOfFoodFor(x,y,z))", "all x.(Animal(x) -> SourceOfFood(x,Mouses))", "all x.(Animal(x) -> SourceOfFoodForMoskitos(x))"]}
{"id": "entailmentbank_validation_478", "nl": "sensing food has a positive impact on finding food.", "fol": "", "prediction": ["all x.(SensingFood(x) -> PositiveImpactOnFindingFood(x))", "all x y.((SensingFood(x) & Food(y)) -> PositiveImpactOnFinding(x,y))", "all x y.((SensingFood(x) & Food(y)) -> PositiveImpactOnFindingFood(x,y))", "all x y.((SensingFood(x) & Food(y)) -> PositiveImpact(x,y))", "all x y z.((SensingFood(x) & Food(y) & Food(z)) -> PositiveImpactOnFinding(x,y,z))", "all x.(SensingFood(x) -> PositiveImpactOnFollowingFood(x))", "all x y.((SensesFood(x) & Food(y)) -> PositiveImpactOnFinding(x,y))", "all x.(SensingFood(x) -> PositiveImpactOnFollowingFood(x))", "all x y z.((SensingFood(x) & Food(y) & Food(z)) -> PositiveImpact(x,y,z))", "all x y.((SensingFood(x) & Food(y)) -> PositiveImpactOnFollowing(x,y))", "all x y.((SensingFood(x) & Food(y)) -> PositiveImpactOnFunctioning(x,y))", "all x.(SensesFood(x) -> PositiveImpactOnFindingFood(x))", "all x y.((SensingFood(x) & Food(y)) -> PositiveImpactOnFollowing(x,y))", "all x.((SensingFood(x) & PositiveImpactOnFindingFood(x)) -> PositiveImpactOnFindingFood(x))", "all x.(SensingFood(x) -> PositiveImpactOnFood(x))", "all x.(SensingFood(x) -> PositiveImpactOnFunctioningFood(x))"]}
{"id": "entailmentbank_validation_479", "nl": "sensing animals has a positive impact on a mosquito's ability to find food.", "fol": "", "prediction": ["all x y.((SensingAnimals(x) & Mosquito(y)) -> PositiveImpactOnFindingFood(x,y))", "all x y.((SensingAnimals(x) & Mosquito(y)) -> PositiveImpactOnFacilityToFindFood(x,y))", "all x y z.((SensingAnimals(x) & Mosquito(y) & Food(z)) -> PositiveImpact(x,y,z))", "all x y.((SensingAnimals(x) & Mosquito(y)) -> PositiveImpact(x,y))", "all x y z.((SensingAnimals(x) & Mosquito(y) & Food(z)) -> PositiveImpactOn(x,y,z))", "all x y.((SensingAnimals(x) & Mosquito(y)) -> PositiveImpactOnFindingFood(y,x))", "all x y.((SensingAnimals(x) & Mosquito(y)) -> PositiveImpactOnFood(x,y))", "all x y.((SensingAnimals(x) & Mosquito(y)) -> PositiveImpactOnFacility(x,y))", "all x y.((SensingAnimals(x) & Mosquito(y)) -> PositiveImpactOnFacilityToFindFood(y,x))", "all x y.((SensingAnimals(x) & Mosquito(y)) -> PositiveImpactOnAbilityToFindFood(x,y))", "all x y.((SensingAnimals(x) & Mosquito(y)) -> PositiveImpactOnFacilities(x,y))", "all x y.((SensingAnimals(x) & Mosquito(y)) -> PositiveImpactOnFindFood(x,y))", "all x y.((SensesAnimals(x) & Mosquito(y)) -> PositiveImpactOnFindingFood(x,y))", "all x y.((SensingAnimals(x) & Mosquito(y)) -> PositiveImpactOnFollowingFood(x,y))", "all x y.((SensingAnimals(x) & Mosquito(y)) -> PositiveImpactOnFacilitation(x,y))", "all x y z.((SensingAnimals(x) & Mosquito(y) & Food(z)) -> PositiveImpactOn(y,z))"]}
{"id": "entailmentbank_validation_480", "nl": "sensing carbon dioxide has a positive impact on a mosquito's ability to find food.", "fol": "", "prediction": ["all x y.((SensingCarbonDioxide(x) & Mosquito(y)) -> PositiveImpactOnFacilityToFindFood(x,y))", "all x y.((SensingCarbonDioxide(x) & Mosquito(y)) -> PositiveImpactOnFindingFood(x,y))", "all x y z.((SensingCarbonDioxide(x) & Mosquito(y) & Food(z)) -> PositiveImpact(x,y,z))", "all x y.((SensingCarbonDioxide(x) & Mosquito(y)) -> PositiveImpact(x,y))", "all x y z.((SensingCarbonDioxide(x) & Mosquito(y) & Food(z)) -> PositiveImpactOn(x,y,z))", "all x y.((SensingCarbonDioxide(x) & Mosquito(y)) -> PositiveImpactOnFood(x,y))", "all x y.((SensingCarbonDioxide(x) & Mosquito(y)) -> PositiveImpactOnFacility(x,y))", "all x y.((SensingCarbonDioxide(x) & Mosquito(y)) -> PositiveImpactOnFindFood(x,y))", "all x y.((SensingCarbonDioxide(x) & Mosquito(y)) -> PositiveImpactOnFacilities(x,y))", "all x y.((SensingCarbonDioxide(x) & Mosquito(y)) -> PositiveImpactOnFacilityToFindFood(x,y))", "all x y.((SensingCarbonDioxide(x) & Mosquito(y)) -> PositiveImpactOnAbilityToFindFood(x,y))", "all x y.((SensingCarbonDioxide(x) & Mosquito(y)) -> PositiveImpactOnFacilitation(x,y))", "all x.(SensingCarbonDioxide(x) -> PositiveImpactOnMouse(x))", "all x y.((SensingCarbonDioxide(x) & Moskito(y)) -> PositiveImpactOnFacilityToFindFood(x,y))", "all x y z.((SensingCarbonDioxide(x) & Moskito(y) & Food(z)) -> PositiveImpact(x,y,z))", "all x y.((SensingCarbonDioxide(x) & Mosquito(y)) -> PositiveImpactOnFoodFinding(x,y))"]}
{"id": "entailmentbank_validation_481", "nl": "if a living thing requires something then that something has a positive impact on that living thing.", "fol": "", "prediction": ["all x y.((LivingThing(x) & Requires(x,y)) -> PositiveImpact(x,y))", "all x y.((LivingThing(x) & LivingThing(y) & Requires(x,y)) -> PositiveImpact(x,y))", "all x.((LivingThing(x) & Requires(x)) -> PositiveImpact(x))", "all x y.((LivingThing(x) & Requires(x,y)) -> HasPositiveImpact(x,y))", "all x y.((LivingThing(x) & LivingThing(y)) -> Requires(x,y))", "all x y.((LivingThing(x) & LivingThing(y) & Requires(x,y)) -> HasPositiveImpact(x,y))", "all x y.((LivingThing(x) & Requires(x,y)) -> PositiveImpact(y))", "all x y.((LivingThing(x) & Requires(x,y)) -> PositiveImpactOn(x,y))", "all x y.((LivingThing(x) & LivingThing(y) & Requires(x,y)) -> PositiveImpactOn(x,y))", "all x y.((LivingThing(x) & Requires(x,y)) -> PositiveImpact(x))", "all x y.((LivingThing(x) & Requires(x,y)) -> HasPositiveImpactOn(x,y))", "all x y.((LivingThing(x) & Requires(x,y)) -> PositiveImpact(y,x))", "all x.((LivingThing(x) & Requires(x)) -> PositiveImpactOn(x,livingThing))", "all x y z.((LivingThing(x) & Requires(x,y) & LivingThing(z)) -> HasPositiveImpact(x,z))", "all x y z.((LivingThing(x) & Requires(x,y) & LivingThing(z)) -> PositiveImpact(x,z))", "all x.((LivingThing(x) & Requires(x)) -> PositiveImpactOnLivingThing(x))"]}
{"id": "entailmentbank_validation_482", "nl": "a living things require water for survival.", "fol": "", "prediction": ["all x.(LivingThing(x) -> RequiresWaterForSurvival(x))", "all x y.((LivingThing(x) & Water(y)) -> RequiresForSurvival(x,y))", "all x.((LivingThing(x) & RequiresWaterForSurvival(x)) -> RequiresWaterForSurvival(x))", "all x.((LivingThing(x) & RequiresWater(x)) -> RequiresWaterForSurvival(x))", "all x.(LivingThing(x) -> RequiresWater(x))", "all x.((LivingThing(x) & RequiresWaterForSurvival(x)) -> RequiresWater(x))", "all x.((LivingThing(x) & RequiresWater(x)) -> Survival(x))", "all x.((LivingThing(x) & RequiresWater(x)) -> RequiresWater(x))", "all x.((LivingThing(x) & Water(y)) -> RequiresForSurvival(x,y))", "all x.((LivingThing(x) & RequiresWater(x)) -> RequiresSurvival(x))", "all x y.((LivingThing(x) & Water(y)) -> RequiresForSurvival(x))", "all x.(LivingTree(x) -> RequiresWaterForSurvival(x))", "all x.((LivingThing(x) & RequiresWater(x)) -> Survive(x))", "all x.(LivingThing(x) -> RequiresWaterForSurvival(x))", "all x.((LivingThing(x) & RequiresWater(x)) -> SurvivalRequirement(x))", "all x y.((LivingThing(x) & Water(y)) -> Requires(x,y))"]}
{"id": "entailmentbank_validation_483", "nl": "water has a positive impact on a living thing's survival.", "fol": "", "prediction": ["all x y.((Water(x) & LivingThing(y)) -> PositiveImpactOnSurvival(x,y))", "all x.((Water(x) & LivingThing(x)) -> PositiveImpactOnSurvival(x))", "all x.((Water(x) & LivingThing(y)) -> PositiveImpactOnSurvival(x,y))", "all x.(Water(x) -> PositiveImpactOnLivingThingSurvival(x))", "all x y.((Water(x) & LivingThing(y) & PositiveImpactOnSurvival(x,y)) -> PositiveImpactOnSurvival(x,y))", "all x.(Water(x) -> PositiveImpactOnSurvival(x))", "all x y.((Water(x) & LivingThing(y)) -> PositiveInfluenceOnSurvival(x,y))", "all x y.((Water(x) & LivingThing(y)) -> PositiveImpact(x,y))", "all x.(Water(x) -> PositiveImpactOnLivingThingsSurvival(x))", "all x y z.((Water(x) & LivingThing(y) & Water(z)) -> PositiveImpactOnSurvival(x,y,z))", "all x y z.((Water(x) & LivingThing(y) & Survival(z)) -> PositiveImpactOn(x,y,z))", "all x y.((Water(x) & LivingThing(y)) -> HasPositiveImpactOnSurvival(x,y))", "all x.((Water(x) & PositiveImpactOnSurvival(x)) -> LivingThing(x))", "all x y.((Water(x) & LivingThing(y) & PositiveImpactOnSurvival(x,y)) -> PositiveImpact(x,y))", "all x y.((LivingThing(x) & Water(y)) -> PositiveImpactOnSurvival(y,x))", "all x y.((Water(x) & LivingThing(y) & PositiveImpactOnSurvival(x,y)) -> PositiveImpactOn(x,y))"]}
{"id": "entailmentbank_validation_484", "nl": "increasing the availability of something that has a positive impact on a living thing's survivial can have a positive impact on that living thing's survival.", "fol": "", "prediction": ["all x y.((IncreasingAvailability(x) & LivingThing(y) & PositiveImpactOnSurvivial(x,y)) -> PositiveImpactOnSurvivial(x,y))", "all x y.((IncreasedAvailability(x) & LivingThing(y) & PositiveImpactOnSurvivial(x,y)) -> PositiveImpactOnSurvivial(x,y))", "all x.((IncreasingAvailabilityOfSomething(x) & PositiveImpactOnLivingThingsSurvivial(x)) -> PositiveImpactOnLivingThingsSurvivial(x))", "all x y.((IncreasingAvailabilityOfPositiveImpact(x) & LivingThing(y) & PositiveImpactOnSurvivial(x,y)) -> PositiveImpactOnSurvivial(x,y))", "all x y.((IncreasingAvailability(x) & LivingThing(y) & PositiveImpactOnSurvival(x,y)) -> PositiveImpactOnSurvival(x,y))", "all x y.((IncreasingAvailability(x) & PositiveImpactOnSurvivial(x,y) & LivingThing(y)) -> PositiveImpactOnSurvivial(x,y))", "all x.((IncreasingAvailabilityOfSomething(x) & PositiveImpactOnLivingThingSurvivial(x)) -> PositiveImpactOnLivingThingSurvivial(x))", "all x.((IncreasingAvailabilityOfSomething(x) & PositiveImpactOnLivedThingsSurvivial(x)) -> PositiveImpactOnLivedThingsSurvivial(x))", "all x.((IncreasingAvailability(x) & PositiveImpactOnSurvivial(x)) -> PositiveImpactOnSurvivial(x))", "all x.((IncreasingAvailabilityOfSomething(x) & PositiveImpactOnLivedThingSurvivial(x)) -> PositiveImpactOnLivedThingSurvivial(x))", "all x.((IncreasingAvailability(x) & PositiveImpactOnLivedThingSurvivial(x)) -> PositiveImpactOnLivedThingSurvivial(x))", "all x y.((IncreasingAvailabilityOf(x,y) & PositiveImpactOnSurvivial(x,y)) -> PositiveImpactOnSurvivial(x,y))", "all x y.((IncreasingAvailability(x) & LivingThing(y) & PositiveImpactOnSurvival(x,y)) -> PositiveImpactOnSurvivial(x,y))", "all x y.((IncreasingAvailabilityOfSomething(x) & PositiveImpactOnLivingThingsSurvivial(x)) -> PositiveImpactOnLivingThingsSurvivial(y))", "all x.((IncreasingAvailabilityOfSomething(x) & PositiveImpactOnLivedThingsSurvivial(x)) -> PositiveImpactOnLivingThingsSurvivial(x))", "all x y.((LivingThing(x) & PositiveImpactOnSurvivial(x,y)) -> PositiveImpactOnSurvivial(x,y))"]}
{"id": "entailmentbank_validation_485", "nl": "increasing the availability of water for a living thing has a positive impact on that living thing's survival.", "fol": "", "prediction": ["all x y.((LivingThing(x) & LivingThing(y) & IncreasesWaterAvailability(x,y)) -> PositiveImpactOnSurvival(x,y))", "all x y.((LivingThing(x) & LivingThing(y) & IncreasedWaterAvailability(x,y)) -> PositiveImpactOnSurvival(x,y))", "all x y.((LivingThing(x) & LivingThing(y)) -> PositiveImpactOnSurvival(x,y))", "all x y.((LivingThing(x) & LivingThing(y)) -> IncreasesWaterAvailability(x,y))", "all x y.((LivingThing(x) & LivingThing(y)) -> IncreasesWaterAvailabilityPositiveImpactOnSurvival(x,y))", "all x y.((LivingThing(x) & LivingThing(y)) -> (IncreasesWaterAvailability(x,y) & PositiveImpactOnSurvival(x,y)))", "all x y.((LivingThing(x) & LivingThing(y)) -> IncreasedWaterAvailabilityPositiveImpactOnSurvival(x,y))", "all x.((LivingThing(x) & IncreasedWaterAvailability(x)) -> PositiveImpactOnSurvival(x))", "all x.((IncreasingWaterAvailability(x) & LivingThing(x)) -> PositiveImpactOnSurvival(x))", "all x y z.((LivingThing(x) & Water(y) & LivingThing(z) & IncreasesAvailability(x,y)) -> PositiveImpactOnSurvival(x,z))", "all x y.((LivingThing(x) & LivingThing(y)) -> IncreasesWaterAvailabilityPositiveImpact(x,y))", "all x y.((LivingThing(x) & LivingThing(y) & IncreasesWaterAvailability(x,y)) -> PositiveImpactOnSurvival(x))", "all x y z.((LivingThing(x) & WaterAvailability(y) & LivingThing(z) & Increases(x,y)) -> PositiveImpactOnSurvival(x,z))", "all x.((IncreasedWaterAvailability(x) & LivingThing(x)) -> PositiveImpactOnSurvival(x))", "all x y.((LivingThing(x) & WaterAvailability(y)) -> PositiveImpactOnSurvival(x,y))", "all x y.((LivingThing(x) & LivingThing(y)) -> IncreasedWaterAvailabilityPositiveImpact(x,y))"]}
{"id": "entailmentbank_validation_486", "nl": "storing something is a kind of method for increasing the availability of something.", "fol": "", "prediction": ["all x y.((Stores(x) & Something(y)) -> IncreasesAvailability(x,y))", "all x y.((Stores(x) & Something(y)) -> IncreasesAvailabilityOf(x,y))", "all x y.((Stores(x,y) & Something(y)) -> IncreasesAvailability(x,y))", "all x.(Stores(x) -> IncreasesAvailabilityOfSomething(x))", "all x y.((Stores(x,y) & Something(y)) -> IncreasesAvailabilityOf(x,y))", "all x.(StoresSomething(x) -> IncreasesAvailabilityOfSomething(x))", "all x.(Stores(x) -> IncreasesAvailability(x))", "all x y.((Stores(x) & Something(y)) -> IncreasedAvailability(x,y))", "all x.(Stores(x) -> IncreasesAvailabilityOf(x))", "all x y.((Storing(x) & Something(y)) -> IncreasesAvailability(x,y))", "all x y.((Stores(x) & Something(y)) -> IncreasedAvailabilityOf(x,y))", "all x y z.((Stores(x,y) & Something(z)) -> IncreasesAvailability(x,z))", "all x y.((Stores(x,y) & Something(y)) -> IncreasedAvailability(x,y))", "all x.(Stores(x) -> IncreasesAvailabilityOf(x,y))", "all x y.((Storing(x) & Something(y)) -> IncreasesAvailabilityOf(x,y))", "all x y.((Storage(x) & Something(y)) -> IncreasesAvailability(x,y))"]}
{"id": "entailmentbank_validation_487", "nl": "storing water has a positive impact on a living thing's survival by increasing the availability of water.", "fol": "", "prediction": ["all x y.((StoresWater(x) & LivingThing(y) & IncreasesWaterAvailability(x,y)) -> PositiveImpactOnSurvival(x,y))", "all x y.((StoresWater(x) & LivingThing(y)) -> (PositiveImpactOnSurvival(x,y) & IncreasesWaterAvailability(x,y)))", "all x y.((StoresWater(x) & LivingThing(y)) -> PositiveImpactOnSurvival(x,y))", "all x y.((StoresWater(x) & LivingThing(y)) -> (PositiveImpactOnSurvival(x,y) & IncreasesAvailabilityOfWater(x,y)))", "all x y.((StoresWater(x) & LivingThing(y) & IncreasesWaterAvailability(x)) -> PositiveImpactOnSurvival(x,y))", "all x y.((StoresWater(x) & LivingThing(y)) -> (PositiveImpactOnSurvival(x,y) & IncreasedAvailabilityOfWater(x,y)))", "all x y.((StoresWater(x) & LivingThing(y)) -> PositiveImpactOnSurvivalByIncreasingWaterAvailability(x,y))", "all x.(StoresWater(x) -> (PositiveImpactOnLivingThingSurvival(x) & IncreasesWaterAvailability(x)))", "all x y.((StoresWater(x) & LivingThing(y)) -> (PositiveImpactOnSurvival(x,y) & IncreasesWaterAvailability(x)))", "all x y z.((StoresWater(x) & LivingThing(y) & Water(z)) -> (PositiveImpactOnSurvival(x,y) & IncreasesAvailability(x,z)))", "all x y.((StoresWater(x) & LivingThing(y)) -> (PositiveImpact(x,y) & IncreasesWaterAvailability(x,y)))", "all x y.((StoresWater(x) & LivingThing(y)) -> (PositiveImpactOnSurvival(x,y) & IncreasedWaterAvailability(x,y)))", "all x y.((StoresWater(x) & LivingThing(y)) -> (PositiveImpactOnSurvival(x,y) & IncreasesAvailabilityOfWater(x)))", "all x y.((StoresWater(x) & LivingThing(y)) -> IncreasesWaterAvailability(x,y))", "all x.(StoresWater(x) -> (PositiveImpactOnLivingThingSurvival(x) & IncreasesAvailabilityOfWater(x)))", "all x y.((StoredWater(x) & LivingThing(y)) -> (PositiveImpactOnSurvival(x,y) & IncreasesWaterAvailability(x,y)))"]}
{"id": "entailmentbank_validation_488", "nl": "dry means low in amount of water.", "fol": "", "prediction": ["all x.(Dry(x) -> LowInWater(x))", "all x.(Dry(x) -> LowWaterAmount(x))", "all x.(Dry(x) -> LowAmountOfWater(x))", "all x y.((Dry(x) & Water(y)) -> Low(x,y))", "all x.(Dry(x) -> LowEnoughWater(x))", "all x y.((Dry(x) & Water(y)) -> LowInAmount(x,y))", "all x.(Dry(x) -> LowInAmountOfWater(x))", "all x.(Dry(x) -> LowInWater(x))", "all x y.((Dry(x) & Water(y)) -> LowAmount(x,y))", "all x.((Dry(x) & LowWaterAmount(x)) -> LowWaterAmount(x))", "all x.(Dry(x) -> LowAmountOfWater(x))", "all x.(Dry(x) -> LowWaterAmount(x))", "all x.(Dry(x) -> LowInWaterAmount(x))", "all x.((Dry(x) & LowWaterAmount(x)) -> Dry(x))", "all x.(Dry(x) -> LowWater(x))", "all x.(Dry(x) -> LowMinimumWater(x))"]}
{"id": "entailmentbank_validation_489", "nl": "as dryness increases in an environment, the available water in that environment will decrease.", "fol": "", "prediction": ["all x y.((Environment(x) & Environment(y) & IncreasedDryness(x,y)) -> DecreasedWater(x,y))", "all x y.((Environment(x) & Environment(y) & IncreasesDryness(x,y)) -> DecreasesAvailableWater(x,y))", "all x y.((Environment(x) & Environment(y) & IncreasedDryness(x,y)) -> DecreasedAvailableWater(x,y))", "all x y.((Environment(x) & Environment(y) & IncreasesDryness(x,y)) -> DecreasesWaterAvailability(x,y))", "all x y.((Dryness(x) & Environment(y) & Increases(x,y)) -> DecreasesWater(x,y))", "all x y.((Environment(x) & Environment(y) & IncreasedDryness(x,y)) -> DecreasedWaterAvailability(x,y))", "all x y.((Environment(x) & Environment(y) & IncreasesDryness(x,y)) -> DecreasesWater(x,y))", "all x y.((Dryness(x) & Environment(y) & Increases(x,y)) -> DecreasesWaterAvailability(x,y))", "all x y.((Environment(x) & Environment(y) & IncreasedDryness(x)) -> DecreasedWater(x,y))", "all x y.((Environment(x) & Environment(y) & IncreasesDryness(x,y)) -> DecreasesAvailabilityOfWater(x,y))", "all x y.((Environment(x) & Environment(y) & IncreasedDryness(x,y)) -> DecreasedAvailabilityOfWater(x,y))", "all x y.((Environment(x) & Environment(y) & IncreasedDryness(x,y)) -> DecreasedWater(x))", "all x y.((Dryness(x) & Environment(y) & Increased(x,y)) -> DecreasedWater(x,y))", "all x y z.((Dryness(x) & Environment(y) & Environment(z) & Increases(x,y)) -> DecreasesWater(y,z))", "all x y.((Dryness(x) & Environment(y) & Increases(x,y)) -> DecreasesWater(x))", "all x y z.((Dryness(x) & Environment(y) & Environment(z) & Increases(x,y)) -> DecreasesWater(x,z))"]}
{"id": "entailmentbank_validation_490", "nl": "a dry environment is low in availability of water.", "fol": "", "prediction": ["all x.(DryEnvironment(x) -> LowWaterAvailability(x))", "all x.(DryEnvironment(x) -> LowAvailabilityOfWater(x))", "all x.((DryEnvironment(x) & LowAvailabilityOfWater(x)) -> LowAvailabilityOfWater(x))", "all x y.((DryEnvironment(x) & Water(y)) -> LowAvailability(x,y))", "all x.((DryEnvironment(x) & LowWaterAvailability(x)) -> Low(x))", "all x.((DryEnvironment(x) & LowWaterAvailability(x)) -> LowWaterAvailability(x))", "all x y.((DryEnvironment(x) & WaterAvailability(y)) -> Low(x,y))", "all x.(DryEnvironment(x) -> LowInWaterAvailability(x))", "all x.((DryEnvironment(x) & LowWaterAvailability(x)) -> LowAvailability(x))", "all x.((DryEnvironment(x) & LowWaterAvailability(x)) -> LowEnvironment(x))", "all x.(DryEnvironment(x) -> LowInAvailabilityOfWater(x))", "all x.(DryEnvironment(x) -> LowAvailabilityOfWater(x))", "all x.((DryEnvironment(x) & LowWaterAvailability(x)) -> LowInAvailability(x))", "all x y.((DryEnvironment(x) & WaterAvailability(y)) -> Low(x))", "all x.((DryEnvironment(x) & LowWaterAvailability(x)) -> LowDryEnvironment(x))", "all x y.((DryEnvironment(x) & Water(y)) -> LowInAvailability(x,y))"]}
{"id": "entailmentbank_validation_491", "nl": "storing water increases the water available to organisms in a dry environment.", "fol": "", "prediction": ["all x y.((StoresWater(x) & Organism(y)) -> IncreasesWaterAvailableInDryEnvironment(x,y))", "all x y.((StoresWater(x) & Organism(y) & DryEnvironment(y)) -> IncreasesWaterAvailability(x,y))", "all x y.((StoresWater(x) & Organism(y) & DryEnvironment(y)) -> IncreasesWaterAvailability(x,y))", "all x y.((StoresWater(x) & Organism(y) & DryEnvironment(y)) -> IncreasesWaterAvailable(x,y))", "all x y z.((StoresWater(x) & Organism(y) & DryEnvironment(z)) -> IncreasesWaterAvailability(x,y,z))", "all x y z.((StoresWater(x) & Organism(y) & DryEnvironment(z)) -> IncreasesWaterAvailable(x,y,z))", "all x y.((StoresWater(x) & Organism(y)) -> IncreasesWaterAvailability(x,y))", "all x y.((StoresWater(x) & Organism(y)) -> IncreasesWaterAvailable(x,y))", "all x y.((StoresWater(x) & Organism(y)) -> IncreasesWaterAvailability(x,y))", "all x y z.((StoresWater(x) & Organism(y) & DryEnvironment(z)) -> IncreasesWater(x,y,z))", "all x y z.((StoresWater(x) & Organism(y) & DryEnvironment(z)) -> IncreasesWaterAvailability(x,y,z))", "all x y.((StoresWater(x) & Organism(y)) -> IncreasesWaterAvailabilityInDryEnvironment(x,y))", "all x y.((StoresWater(x) & Organism(y) & DryEnvironment(y)) -> IncreasesWater(x,y))", "all x y.((StoresWater(x) & Organism(y)) -> IncreasesWaterAvailabilityInDryEnvironment(x,y))", "all x y.((StoresWater(x) & Organism(y)) -> IncreasesWater(x,y))", "all x.(StoresWater(x) -> IncreasesWaterAvailableToOrganismsInDryEnvironment(x))"]}
{"id": "entailmentbank_validation_492", "nl": "adapting is when a living thing responds to a change in an environment.", "fol": "", "prediction": ["all x y.((LivingThing(x) & Environment(y) & RespondsToChange(x,y)) -> Adapting(x))", "all x y.((LivingThing(x) & Environment(y)) -> RespondsToChange(x,y))", "all x.(Adapting(x) -> (LivingThing(x) & RespondsToChangeInEnvironment(x)))", "all x y z.((LivingThing(x) & Environment(y) & Environment(z) & RespondsToChange(x,y,z)) -> Adapting(x))", "all x.(Adapting(x) -> (LivingThing(x) & RespondsToChange(x)))", "all x.(Adapting(x) -> (LivingThing(x) & RespondsToChange(x)))", "all x y.((LivingThing(x) & Environment(y) & RespondsToChange(x,y)) -> Adapts(x))", "all x.(Adapting(x) -> (LivingThing(x) & RespondsToChangeInEnvironment(x)))", "all x y.((LivingThing(x) & Environment(y) & RespondsToChange(x,y)) -> Adapting(x,y))", "all x y z.((LivingThing(x) & Environment(y) & Environment(z)) -> RespondsToChange(x,y,z))", "all x y.((LivingThing(x) & Environment(y) & RespondsToChange(x,y)) -> Adapts(x,y))", "all x y z.((LivingThing(x) & Environment(y) & Change(z) & RespondsTo(x,y,z)) -> Adapting(x))", "all x y z.((LivingThing(x) & Environment(y) & Change(z)) -> RespondsTo(x,y,z))", "all x y.((LivingThing(x) & EnvironmentChange(y)) -> RespondsTo(x,y))", "all x y z.((LivingThing(x) & Environment(y) & Change(z) & RespondsTo(x,z)) -> Adapting(x))", "all x y z.((LivingThing(x) & Environment(y) & Environment(z) & RespondsToChange(x,y)) -> Adapting(x))"]}
{"id": "entailmentbank_validation_493", "nl": "storing water is an adaptation to a dry environment.", "fol": "", "prediction": ["all x.(StoresWater(x) -> AdaptationToDryEnvironment(x))", "all x.((StoresWater(x) & DryEnvironment(x)) -> AdaptationTo(x,y))", "all x y.((StoresWater(x) & DryEnvironment(y)) -> AdaptationTo(x,y))", "all x.(StoringWater(x) -> AdaptationToDryEnvironment(x))", "all x.((StoresWater(x) & DryEnvironment(x)) -> Adaptation(x))", "all x.((StoresWater(x) & DryEnvironment(x)) -> AdaptationTo(x))", "all x.(StoresWater(x) -> DryEnvironmentAdaptation(x))", "all x y.((StoresWater(x) & DryEnvironment(y)) -> Adaptation(x,y))", "all x y.((Water(x) & DryEnvironment(y)) -> AdaptationTo(x,y))", "all x y.((StoringWater(x) & DryEnvironment(y)) -> AdaptationTo(x,y))", "all x.((StoresWater(x) & DryEnvironment(y)) -> AdaptationTo(x,y))", "all x.((StoringWater(x) & DryEnvironment(x)) -> AdaptationTo(x,y))", "all x.((StoresWater(x) & DryEnvironment(x)) -> AdaptationTo(x,dryEnvironment))", "all x.((StoresWater(x) & DryEnvironment(x)) -> AdaptationTo(x,DryEnvironment))", "all x y.((StoredWater(x) & DryEnvironment(y)) -> AdaptationTo(x,y))", "all x.((StoresWater(x) & DryEnvironment(x)) -> AdaptationTo(x,dry))"]}
{"id": "entailmentbank_validation_494", "nl": "as the available water in an environment increases, the populations of organisms in that environment will increase.", "fol": "", "prediction": ["all x y.((Environment(x) & AvailableWater(x) & Environment(y)) -> PopulationIncrease(x,y))", "all x y.((WaterAvailability(x) & Environment(y) & Increases(x,y)) -> PopulationInEnvironment(x,y))", "all x y.((AvailableWater(x) & Environment(y) & Increases(x,y)) -> PopulationInEnvironment(x,y))", "all x y.((Environment(x) & AvailableWater(x) & Environment(y) & Increases(x,y)) -> PopulationInEnvironment(x,y))", "all x y z.((AvailableWater(x) & Environment(y) & Organism(z) & Increases(x,y)) -> PopulationInEnvironment(x,z))", "all x y.((WaterAvailability(x) & Environment(y) & Increases(x,y)) -> PopulationsInEnvironment(x,y))", "all x y.((Environment(x) & AvailableWater(x) & Environment(y) & Increases(x,y)) -> PopulationsInEnvironment(x,y))", "all x.((WaterAvailabilityInEnvironment(x) & Increases(x)) -> PopulationInEnvironment(x))", "all x y.((AvailableWater(x) & Environment(y) & Increases(x,y)) -> PopulationsInEnvironment(x,y))", "all x y.((Environment(x) & AvailableWaterInEnvironment(x,y)) -> PopulationInEnvironment(y))", "all x y z.((AvailableWater(x) & Environment(y) & Organism(z) & Increases(x,y)) -> PopulationInEnvironment(z,y))", "all x y.((Environment(x) & AvailableWaterInEnvironment(x,y)) -> PopulationInEnvironment(x,y))", "all x y.((Environment(x) & AvailableWater(x,y)) -> PopulationIncrease(x,y))", "all x y z.((AvailableWater(x) & Environment(y) & Organism(z) & Increases(x,y)) -> PopulationsInEnvironment(x,z))", "all x y z.((AvailableWater(x) & Environment(y) & Organism(z) & Increases(x,y)) -> PopulationInEnvironment(y,z))", "all x y.((Environment(x) & AvailableWater(x,y) & Increases(x,y)) -> PopulationsInEnvironment(x,y))"]}
{"id": "entailmentbank_validation_495", "nl": "an aquatic animal requires great amounts of water to thrive.", "fol": "", "prediction": ["all x.(AquaticAnimal(x) -> RequiresGreatAmountsOfWater(x))", "all x.(AquaticAnimal(x) -> RequiresGreatAmountsOfWaterToThrive(x))", "all x.((AquaticAnimal(x) & GreatAmountsOfWater(x)) -> Thrives(x))", "all x.((AquaticAnimal(x) & RequiresGreatAmountsOfWater(x)) -> Thrives(x))", "all x.(AquaticAnimal(x) -> GreatAmountsOfWater(x))", "all x.(AquaticAnimal(x) -> GreatAmountsOfWaterToThrive(x))", "all x.(AquaticAnimal(x) -> (RequiresGreatAmountsOfWater(x) & Thrives(x)))", "all x y.((AquaticAnimal(x) & Water(y)) -> RequiresGreatAmounts(x,y))", "all x y.((AquaticAnimal(x) & AquaticAnimal(y)) -> RequiresGreatAmountsOfWater(x,y))", "all x y.((AquaticAnimal(x) & Water(y)) -> RequiresGreatAmountsToThrive(x,y))", "all x y z.((AquaticAnimal(x) & Water(y) & Water(z)) -> RequiresToThrive(x,y,z))", "all x y.((AquaticAnimal(x) & Water(y)) -> RequiresToThrive(x,y))", "all x.((AquaticAnimal(x) & AquaticAnimal(x)) -> RequiresGreatAmountsOfWater(x))", "all x y.((AquaticAnimal(x) & GreatAmountsOfWater(y)) -> Thrives(x,y))", "all x y.((AquaticAnimal(x) & GreatAmountsOfWater(y)) -> Thrives(x))", "all x.(AquaticAnimal(x) -> RequiresGreatAmountsOfWater(x))"]}
{"id": "entailmentbank_validation_496", "nl": "as water increases in an environment, the population of aquatic animals will increase.", "fol": "", "prediction": ["all x.((WaterInEnvironment(x) & IncreasesInEnvironment(x)) -> PopulationIncreases(x))", "all x y.((Water(x) & Environment(y) & Increases(x,y)) -> PopulationIncreases(x,y))", "all x y.((WaterInEnvironment(x) & AquaticAnimalPopulation(y)) -> Increases(y))", "all x y z.((Water(x) & Environment(y) & AquaticAnimal(z)) -> IncreasesPopulation(z))", "all x y.((WaterInEnvironment(x) & AquaticAnimal(y)) -> IncreasesPopulation(x,y))", "all x y z.((Water(x) & Environment(y) & AquaticAnimal(z) & Increases(x,y)) -> PopulationIncreases(z,y))", "all x y z.((Water(x) & Environment(y) & AquaticAnimal(z) & IncreasesInEnvironment(x,y)) -> PopulationIncreases(z,y))", "all x y.((Water(x) & Environment(y)) -> IncreasesPopulationOfAquaticAnimals(x,y))", "all x y.((WaterInEnvironment(x) & AquaticAnimal(y)) -> IncreasedPopulation(x,y))", "all x y.((Water(x) & Environment(y) & IncreasesIn(x,y)) -> PopulationIncreases(x,y))", "all x y.((WaterInEnvironment(x) & AquaticAnimal(y)) -> IncreasesPopulation(y,x))", "all x y z.((Water(x) & Environment(y) & AquaticAnimal(z)) -> IncreasedPopulation(z))", "all x y z.((Water(x) & Environment(y) & AquaticAnimal(z)) -> IncreasesPopulation(z,y))", "all x y.((Water(x) & Environment(y) & IncreasesInEnvironment(x,y)) -> PopulationIncreases(x,y))", "all x y z.((Water(x) & Environment(y) & AquaticAnimal(z) & Increases(x,y)) -> PopulationIncreases(x,z))", "all x y z.((Water(x) & Environment(y) & AquaticAnimal(z) & IncreasesInEnvironment(x,y)) -> PopulationIncreases(x,z))"]}
{"id": "entailmentbank_validation_497", "nl": "a salamander is a kind of aquatic animal.", "fol": "", "prediction": ["all x.(Salamander(x) -> AquaticAnimal(x))", "all x.(Salamander(x) -> AquaticAnimal(x))", "all x y.((Salamander(x) & AquaticAnimal(y)) -> AquaticAnimal(x))", "all x y.((Salamander(x) & AquaticAnimal(y)) -> AquaticAnimal(x,y))", "all x.((Salamander(x) & AquaticAnimal(x)) -> AquaticAnimal(x))", "all x y.((Salamander(x) & AquaticAnimal(y)) -> Aquatic(x))", "all x y.((Salamander(x) & AquaticAnimal(y)) -> Animal(x))", "all x y.((Salamander(x) & AquaticAnimal(y)) -> Is(x,y))", "all x y.((Salamander(x) & AquaticAnimal(y)) -> (AquaticAnimal(x) & AquaticAnimal(y)))", "exists x.(Salamander(x) & AquaticAnimal(x))", "all x y z.((Salamander(x) & AquaticAnimal(y) & Animal(z)) -> Aquatic(x,y,z))", "all x y z.((Salamander(x) & AquaticAnimal(y) & Animal(z)) -> Aquatic(x))", "all x y.((Salamander(x) & AquaticAnimal(y)) -> (AquaticAnimal(x) & AquaticAnimal(x)))", "all x y.((Salamander(x) & AquaticAnimal(y)) -> Animal(x,y))", "all x y.((Salamander(x) & AquaticAnimal(x)) -> AquaticAnimal(y))", "all x y.((Salamander(x) & AquaticAnimal(y)) -> Waterfowl(x))"]}
{"id": "entailmentbank_validation_498", "nl": "as water increases in an environment, the population of salamanders may increase.", "fol": "", "prediction": ["all x.((WaterInEnvironment(x) & IncreasesInEnvironment(x)) -> PopulationIncreases(x))", "all x.((WaterInEnvironment(x) & IncreasesInEnvironment(x)) -> PopulationIncrease(x))", "all x y.((Water(x) & Environment(y) & Increases(x,y)) -> PopulationIncreases(x,y))", "all x.((WaterInEnvironment(x) & IncreasesInEnvironment(x)) -> IncreasesPopulationOfSalamanders(x))", "all x.((WaterIncrease(x) & Environment(x)) -> PopulationIncrease(x))", "all x y z.((Water(x) & Environment(y) & Salamander(z) & IncreasesInEnvironment(x,y)) -> PopulationIncreases(z,y))", "all x y.((Water(x) & Environment(y) & Increases(x,y)) -> PopulationIncreases(x))", "all x y z.((Water(x) & Environment(y) & Salamander(z) & Increases(x,y)) -> PopulationIncreases(z,y))", "all x y.((Water(x) & Environment(y) & Increases(x,y)) -> PopulationIncrease(x,y))", "all x.((WaterIncreases(x) & Environment(x)) -> PopulationIncreases(x))", "all x y z.((Water(x) & Environment(y) & Salamander(z) & IncreasesInEnvironment(x,y)) -> MayIncreasePopulation(z,y))", "all x.((WaterInEnvironment(x) & Increases(x)) -> PopulationIncreases(x))", "all x y z.((Water(x) & Environment(y) & Salamander(z) & IncreasesInEnvironment(x,y)) -> IncreasesPopulation(z,y))", "all x y.((Water(x) & Environment(y) & IncreasesIn(x,y)) -> PopulationIncreases(x))", "all x y z.((Water(x) & Environment(y) & Salamander(z)) -> IncreasesPopulation(z))", "all x y.((Water(x) & Environment(y) & Increases(x,y)) -> IncreasesPopulation(x,y))"]}
{"id": "entailmentbank_validation_499", "nl": "when a body of water receives more water than it can hold, a flood occurs.", "fol": "", "prediction": ["all x.((BodyOfWater(x) & ReceivesMoreWaterThanCanHold(x)) -> FloodOccurs(x))", "all x.((BodyOfWater(x) & ReceivesMoreWater(x) & CanHoldMoreWater(x)) -> FloodOccurs(x))", "all x y.((BodyOfWater(x) & ReceivesMoreWater(x,y) & CanHold(x,y)) -> FloodOccurs(x))", "all x.((BodyOfWater(x) & ReceivesMoreWater(x)) -> FloodOccurs(x))", "all x y.((BodyOfWater(x) & ReceivesMoreWaterThanCanHold(x,y)) -> FloodOccurs(x))", "all x.((BodyOfWater(x) & ReceivesMoreWater(x) & CanHold(x)) -> FloodOccurs(x))", "all x y.((BodyOfWater(x) & BodyOfWater(y) & ReceivesMoreWaterThanCanHold(x,y)) -> FloodOccurs(x))", "all x y.((BodyOfWater(x) & ReceivesMoreWater(x,y) & CanHold(y)) -> FloodOccurs(x))", "all x y.((BodyOfWater(x) & BodyOfWater(y) & ReceivesMoreWater(x,y)) -> FloodOccurs(x))", "all x y.((BodyOfWater(x) & ReceivesMoreWater(x,y) & CanHoldMoreWater(x,y)) -> FloodOccurs(x))", "all x y z.((BodyOfWater(x) & ReceivesMoreWater(x,y) & CanHold(x,z)) -> FloodOccurs(x))", "all x.((BodyOfWater(x) & ReceivesMoreWaterThanCanHost(x)) -> FloodOccurs(x))", "all x y.((BodyOfWater(x) & ReceivesMoreWater(x,y) & CanHold(x,y)) -> Flood(x))", "all x y.((BodyOfWater(x) & ReceivesMoreWater(x,y) & CanHold(y,x)) -> FloodOccurs(x))", "all x.((BodyOfWater(x) & ReceivesMoreWater(x) & HoldsMoreWater(x)) -> FloodOccurs(x))", "all x y.((BodyOfWater(x) & ReceivesMoreWater(x,y)) -> FloodOccurs(x))"]}
{"id": "entailmentbank_validation_500", "nl": "as the amount of water in a body of water increases, the water levels will increase especially at the edge of that body of water.", "fol": "", "prediction": ["all x y.((BodyOfWater(x) & BodyOfWater(y) & IncreasesWaterAmount(x,y)) -> WaterLevelsIncrease(x,y))", "all x y.((BodyOfWater(x) & BodyOfWater(y) & IncreasesAmountOfWater(x,y)) -> WaterLevelsIncrease(x,y))", "all x y.((BodyOfWater(x) & BodyOfWater(y) & IncreasesWaterAmount(x,y)) -> WaterLevelsAtEdge(x,y))", "all x y.((BodyOfWater(x) & WaterAmount(y) & Increases(x,y)) -> WaterLevelsIncrease(x,y))", "all x y.((BodyOfWater(x) & BodyOfWater(y) & IncreasesWaterAmount(x,y)) -> IncreasesWaterLevelsAtEdge(x,y))", "all x y.((BodyOfWater(x) & BodyOfWater(y)) -> IncreasesWaterLevels(x,y))", "all x y.((BodyOfWater(x) & BodyOfWater(y) & IncreasesWaterAmount(x,y)) -> IncreasesWaterLevels(x,y))", "all x y.((BodyOfWater(x) & BodyOfWater(y) & IncreasesAmountOfWater(x,y)) -> IncreasesWaterLevelsAtEdge(x,y))", "all x y.((BodyOfWater(x) & BodyOfWater(y) & IncreasesAmountOfWater(x,y)) -> WaterLevelsAtEdge(x,y))", "all x y.((BodyOfWater(x) & WaterAmount(y) & Increases(x,y)) -> WaterLevelsAtEdge(x,y))", "all x y.((BodyOfWater(x) & BodyOfWater(y) & IncreasesAmountOfWater(x,y)) -> IncreasesWaterLevels(x,y))", "all x y.((BodyOfWater(x) & WaterAmount(y) & Increases(x,y)) -> WaterLevelsIncrease(x))", "all x y.((BodyOfWater(x) & BodyOfWater(y) & IncreasesWaterAmount(x)) -> WaterLevelsIncrease(x,y))", "all x y.((BodyOfWater(x) & WaterLevel(y)) -> IncreasesAtEdge(y,x))", "all x y.((BodyOfWater(x) & BodyOfWater(y) & IncreasedWaterAmount(x,y)) -> IncreasedWaterLevels(x,y))", "all x.((BodyOfWater(x) & IncreasesAmountOfWater(x)) -> WaterLevelsIncrease(x))"]}
{"id": "entailmentbank_validation_501", "nl": "a flood is a result of a large increase of water in a body of water.", "fol": "", "prediction": ["all x y.((Flood(x) & BodyOfWater(y)) -> LargeIncreaseOfWater(x,y))", "all x y.((Flood(x) & BodyOfWater(y)) -> LargeIncreaseInWater(x,y))", "all x y.((Flood(x) & BodyOfWater(y)) -> LargeIncreaseOfWaterIn(x,y))", "all x y.((Flood(x) & BodyOfWater(y) & LargeIncreaseOfWater(x,y)) -> Flood(x))", "all x y.((Flood(x) & BodyOfWater(y)) -> LargeWaterIncrease(x,y))", "all x.(Flood(x) -> (LargeIncreaseOfWater(x) & BodyOfWater(x)))", "all x y z.((Flood(x) & Water(y) & BodyOfWater(z)) -> LargeIncrease(x,y,z))", "all x.(Flood(x) -> (LargeIncreaseOfWater(x) & InBodyOfWater(x)))", "all x y z.((Flood(x) & LargeIncreaseOfWater(y) & BodyOfWater(z)) -> ResultsOf(x,y,z))", "all x.(Flood(x) -> (LargeIncreaseOfWater(x) & InBodyOfWater(x)))", "all x.(Flood(x) -> (LargeIncreaseOfWater(x) & BodyOfWater(x)))", "all x y z.((Flood(x) & LargeIncreaseOfWater(y) & BodyOfWater(z)) -> Flood(x))", "all x y z.((Flood(x) & LargeIncreaseOfWater(y) & BodyOfWater(z)) -> FloodResult(x,y,z))", "all x y z.((Flood(x) & LargeIncreaseOfWater(y) & BodyOfWater(z)) -> ResultOf(x,y,z))", "all x y z.((Flood(x) & Water(y) & BodyOfWater(z)) -> LargeIncreaseIn(x,y,z))", "all x y.((Flood(x) & BodyOfWater(y)) -> LargeIncrease(x,y))"]}
{"id": "entailmentbank_validation_502", "nl": "a body of water is a part of some environments.", "fol": "", "prediction": ["all x.(BodyOfWater(x) -> PartOfEnvironments(x))", "all x y.((BodyOfWater(x) & Environment(y)) -> PartOf(x,y))", "all x.((BodyOfWater(x) & PartOfEnvironments(x)) -> PartOfEnvironments(x))", "exists x.(BodyOfWater(x) & PartOfEnvironments(x))", "all x.(BodyOfWater(x) -> PartOfEnvironment(x))", "all x.((BodyOfWater(x) & PartOfEnvironment(x)) -> PartOfEnvironment(x))", "all x.(BodyOfWater(x) -> PartOfSomeEnvironments(x))", "all x y z.((BodyOfWater(x) & Environment(y) & Environment(z)) -> PartOf(x,y,z))", "all x.((BodyOfWater(x) & PartOfSomeEnvironments(x)) -> PartOfEnvironments(x))", "all x.((BodyOfWater(x) & PartOfSomeEnvironments(x)) -> PartOfSomeEnvironments(x))", "exists x.(BodyOfWater(x) & PartOfEnvironment(x))", "all x.((BodyOfWater(x) & PartOfEnvironments(x)) -> PartOfEnvironment(x))", "exists x y.(BodyOfWater(x) & Environment(y) & PartOf(x,y))", "all x.((BodyOfWater(x) & Environment(x)) -> PartOf(x,y))", "all x.((BodyOfWater(x) & PartOfEnvironment(x)) -> PartOfEnvironments(x))", "all x y.((BodyOfWater(x) & Environment(y)) -> PartOfEnvironment(x,y))"]}
{"id": "entailmentbank_validation_503", "nl": "a flood is a result of a large increase of water in an environment.", "fol": "", "prediction": ["all x y.((Flood(x) & Environment(y)) -> LargeIncreaseOfWater(x,y))", "all x y z.((Flood(x) & Water(y) & Environment(z)) -> LargeIncrease(x,y,z))", "all x y.((Flood(x) & Environment(y)) -> LargeIncreaseInWater(x,y))", "all x.(Flood(x) -> (LargeIncreaseOfWater(x) & InEnvironment(x)))", "all x y.((Flood(x) & Environment(y)) -> LargeWaterIncrease(x,y))", "all x y.((Flood(x) & Environment(y) & LargeIncreaseOfWater(x,y)) -> Flood(x))", "all x.(Flood(x) -> LargeIncreaseOfWaterInEnvironment(x))", "all x.(Flood(x) -> LargeIncreaseOfWater(x))", "all x.(Flood(x) -> (LargeIncreaseOfWater(x) & InEnvironment(x)))", "all x.(Flood(x) -> (LargeIncreaseOfWater(x) & Environment(x)))", "all x y z.((Flood(x) & Water(y) & Environment(z)) -> LargeIncrease(x,y))", "all x y z.((Flood(x) & Water(y) & Environment(z)) -> LargeIncreaseIn(x,y,z))", "all x y.((Flood(x) & Environment(y)) -> LargeIncreaseOfWaterInEnvironment(x,y))", "all x y.((Flood(x) & Environment(y) & LargeIncreaseInWater(x,y)) -> Flood(x))", "all x.(Flood(x) -> LargeIncreaseOfWaterInEnvironment(x))", "all x y.((Flood(x) & Environment(y) & LargeWaterIncrease(x,y)) -> Flood(x))"]}
{"id": "entailmentbank_validation_504", "nl": "a flood may cause the population of salamander to increase in an environment.", "fol": "", "prediction": ["all x y.((Flood(x) & SalamanderPopulation(y)) -> IncreasesInEnvironment(x,y))", "all x y.((Flood(x) & Salamander(y)) -> MayIncreasePopulation(x,y))", "all x y.((Flood(x) & SalamanderPopulation(y)) -> IncreasesInEnvironment(y))", "all x y.((Flood(x) & SalamanderPopulation(y)) -> IncreasesInEnvironment(y,x))", "all x y z.((Flood(x) & SalamanderPopulation(y) & Environment(z)) -> MayIncrease(y,z))", "all x y.((Flood(x) & Salamander(y)) -> MayIncreasePopulationInEnvironment(x,y))", "all x y.((Flood(x) & Salamander(y)) -> IncreasesPopulationInEnvironment(x,y))", "all x y z.((Flood(x) & Salamander(y) & Environment(z)) -> MayIncreasePopulation(y,z))", "all x y.((Flood(x) & Salamander(y)) -> MayIncreasePopulationInEnvironment(y,x))", "all x y.((Flood(x) & Salamander(y)) -> IncreasedPopulationInEnvironment(x,y))", "all x y.((Flood(x) & Salamander(y)) -> IncreasedPopulation(x,y))", "all x y.((Flood(x) & SalamanderPopulation(y)) -> IncreasedInEnvironment(y))", "all x y z.((Flood(x) & Salamander(y) & Environment(z)) -> IncreasedPopulation(y,z))", "all x y z.((Flood(x) & Salamander(y) & Environment(z)) -> CausesPopulationIncrease(y,z))", "all x y z.((Flood(x) & Salamander(y) & Environment(z)) -> IncreasesPopulation(y,z))", "all x y.((Flood(x) & Salamander(y)) -> IncreasesPopulationInEnvironment(y,x))"]}
{"id": "entailmentbank_validation_505", "nl": "frogs / turtles / fish / mice / birds are kinds of animals.", "fol": "", "prediction": ["all x.((Frog(x) | Turtle(x) | Fish(x) | Mouse(x) | Bird(x)) -> Animal(x))", "all x.((Frog(x) & Turtle(x) & Fish(x) & Mouse(x) & Bird(x)) -> Animal(x))", "all x.((Frog(x) | Turtle(x) | Fish(x) | Mice(x) | Bird(x)) -> Animal(x))", "all x.((Frog(x) & Turtle(x) & Fish(x) & Mouse(x)) -> Animal(x))", "all x.((Frog(x) & Turtle(x) & Fish(x)) | Mouse(x) | Bird(x)) -> Animal(x))", "all x.((Frog(x) & Turtle(x) & Fish(x) & Mice(x) & Bird(x)) -> Animal(x))", "all x.(Frog(x) -> (Turtle(x) & Fish(x) & Mouse(x) & Bird(x)))", "all x.(Frog(x) | Turtle(x) | Fish(x) | Mouse(x) | Bird(x))", "all x y z.((Frog(x) & Turtle(y) & Fish(z) & Mouse(x) & Bird(x)) -> Animal(x))", "all x.(Animal(x) -> (Frog(x) | Turtle(x) | Fish(x) | Mouse(x) | Bird(x)))", "all x.(Frog(x) & (Turtle(x) | Fish(x) | Mouse(x) | Bird(x)))", "all x y.((Frog(x) | Turtle(x) | Fish(y) | Mouse(y) | Bird(y)) -> Animal(x))", "all x.((Frog(x) & Turtle(x) & Fish(x) & Mice(x)) -> Animal(x))", "all x.((Frog(x) | Turtle(x) | Fish(x) | Mouse(x) | Bird(x)) -> AnimalType(x))", "all x.((Frog(x) | Turtle(x) | Fish(x) | Mouse(x)) -> Animal(x))", "all x y.((Frog(x) & Turtle(y) & Fish(x) & Mouse(x) & Bird(x)) -> Animal(x))"]}
{"id": "entailmentbank_validation_506", "nl": "alligators eat frogs / turtles / fish / mice / birds.", "fol": "", "prediction": ["all x.(Alligator(x) -> (EatsFrogs(x) & EatsTurtles(x) & EatsFish(x) & EatsMouses(x) & EatsBirds(x)))", "all x.(Alligator(x) -> (EatsFrogs(x) | EatsTurtles(x) | EatsFish(x) | EatsMouses(x) | EatsBirds(x)))", "all x.(Alligator(x) -> (EatsFrogs(x) & EatsTurtles(x) & EatsFish(x) & EatsMice(x) & EatsBirds(x)))", "all x.(Alligator(x) -> (EatsFrogs(x) & EatsTurtles(x) & EatsFish(x) & EatsMouse(x) & EatsBirds(x)))", "all x.(Alligator(x) -> (EatsFrogs(x) & EatsTurtles(x) & EatsFish(x) & EatsMouses(x)))", "all x.(Alligator(x) -> (EatsFrogs(x) | EatsTurtles(x) | EatsFish(x) | EatsMice(x) | EatsBirds(x)))", "all x.(Alligator(x) -> (EatFrogs(x) & EatTurtles(x) & EatFish(x) & EatMouses(x) & EatBirds(x)))", "all x.(Alligator(x) -> (EatsFrogs(x) | EatsTurtles(x) | EatsFish(x) | EatsMouse(x) | EatsBirds(x)))", "all x y z.((Alligator(x) & Frog(y) & Turtle(z)) -> Eats(x,y,z))", "all x.(Alligator(x) -> (EatsFrogs(x) & EatsTurtle(x) & EatsFish(x) & EatsMouse(x) & EatsBirds(x)))", "all x y.((Alligator(x) & Frog(y)) | Turtle(y) | Fish(y) | Mouse(y) | Bird(y)))", "all x.(Alligator(x) -> (EatsFrogs(x) | EatsTurtles(x) | EatsFish(x) | EatsMouses(x)))", "all x.(Alligator(x) -> (EatFrogs(x) & EatTurtles(x) & EatFish(x) & EatMice(x) & EatBirds(x)))", "all x.(Alligator(x) -> (EatsFrogs(x) & EatsTurtle(x) & EatsFish(x) & EatsMouses(x) & EatsBirds(x)))", "all x.(Alligator(x) -> (EatFrogs(x) & EatTurtles(x) & EatFish(x) & EatMouse(x) & EatBirds(x)))", "all x y.((Alligator(x) & (Frog(y) | Turtle(y) | Fish(y) | Mouse(y) | Bird(y))) -> Eats(x,y))"]}
{"id": "entailmentbank_validation_507", "nl": "alligators eat animals.", "fol": "", "prediction": ["all x.(Alligator(x) -> EatsAnimals(x))", "all x y.((Alligator(x) & Animal(y)) -> Eats(x,y))", "all x.(Alligator(x) -> EatAnimals(x))", "all x y z.((Alligator(x) & Animal(y) & Animal(z)) -> Eats(x,y,z))", "all x y.((Alligator(x) & Animal(y)) -> Eat(x,y))", "all x y z.((Alligator(x) & Animal(y) & Animal(z)) -> Eat(x,y,z))", "all x y z.((Alligator(x) & Animal(y) & Animal(z)) -> Eats(x,y))", "all x y.((Aligator(x) & Animal(y)) -> Eats(x,y))", "all x y.((Alligator(x) & Animal(y) & Eats(x,y)) -> Eats(x,y))", "all x.((Alligator(x) & Animal(y)) -> Eats(x,y))", "all x y z.((Alligator(x) & Animal(y) & Animal(z) & Eats(x,y,z)) -> Eats(x,y,z))", "all x y z.((Alligator(x) & Animal(y) & Animal(z) & Eats(x,y,z)) -> Eats(x,y))", "all x y z.((Alligator(x) & Animal(y) & Animal(z) & Eats(x,y)) -> Eats(x,z))", "all x.(Alligator(x) -> EatsAnimal(x))", "all x.(Aligator(x) -> EatsAnimals(x))", "all x y z.((Alligator(x) & Animal(y) & Animal(z)) -> Eat(x,y))"]}
{"id": "entailmentbank_validation_508", "nl": "a predator eats other animals for food.", "fol": "", "prediction": ["all x y.((Predator(x) & Animal(y)) -> EatsForFood(x,y))", "all x y z.((Predator(x) & Animal(y) & Animal(z)) -> EatsForFood(x,y,z))", "all x y z.((Predator(x) & Animal(y) & Food(z)) -> EatsForFood(x,y,z))", "all x y.((Predator(x) & Animal(y) & EatsForFood(x,y)) -> EatsForFood(x,y))", "all x y z.((Predator(x) & Animal(y) & Animal(z) & EatsForFood(x,y,z)) -> EatsForFood(x,y,z))", "all x y z.((Predator(x) & Animal(y) & Food(z)) -> EatsFor(x,y,z))", "all x y z.((Predator(x) & Animal(y) & Food(z)) -> Eats(x,y,z))", "all x y z.((Predator(x) & Animal(y) & Animal(z) & EatsForFood(x,y,z)) -> EatsForFood(x,y))", "all x y.((Predator(x) & Animal(y)) -> Eats(x,y))", "all x y z.((Predator(x) & Animal(y) & Animal(z)) -> Eats(x,y,z))", "all x y z.((Predator(x) & Animal(y) & Animal(z) & EatsForFood(x,z)) -> EatsForFood(x,y,z))", "all x y z.((Predator(x) & Animal(y) & Animal(z) & EatsForFood(x,y)) -> EatsForFood(x,z))", "all x y z.((Predator(x) & Animal(y) & Animal(z)) -> EatsForFood(x,z))", "all x y z.((Predator(x) & Animal(y) & Food(z) & Eats(x,y,z)) -> EatsForFood(x,y,z))", "all x y z.((Predator(x) & Animal(y) & Animal(z)) -> EatsForFood(x,y))", "all x y z.((Predator(x) & Animal(y) & Animal(z) & EatsForFood(x,y,z)) -> Eats(x,y,z))"]}
{"id": "entailmentbank_validation_509", "nl": "alligators are a kind of predator.", "fol": "", "prediction": ["all x.(Alligator(x) -> Predator(x))", "all x y.((Alligator(x) & Predator(y)) -> Predator(x))", "all x y.((Alligator(x) & Predator(y)) -> Predator(x,y))", "all x.(Alligator(x) -> Predator(x))", "all x.((Alligator(x) & Predator(x)) -> Predator(x))", "all x y z.((Alligator(x) & Predator(y) & Predator(z)) -> Predator(x,y,z))", "all x.(Aligator(x) -> Predator(x))", "all x y z.((Alligator(x) & Predator(y) & Predator(z)) -> Predator(x))", "all x y.((Alligator(x) & Predator(y)) -> (Predator(x) & Predator(y)))", "all x y z.((Alligator(x) & Predator(y) & Animal(z)) -> Predator(x,y,z))", "all x y z.((Alligator(x) & Predator(y) & Predator(z)) -> Predator(x,y))", "all x.exists y.((Alligator(x) & Predator(y)) -> Predator(x))", "all x.(Alligator(x) -> (Predator(x) & Predator(x)))", "all x y.((Alligator(x) & Predator(y)) -> (Predator(x) | Predator(y)))", "all x y.((Alligator(x) & Predator(y)) -> (Predator(x) & Predator(x)))", "all x y.((Alligator(x) & Predator(y)) -> (Predator(x,y) & Predator(x,y)))"]}
{"id": "entailmentbank_validation_510", "nl": "as the population of prey decreases, competition between predators will increase.", "fol": "", "prediction": ["all x.((Predator(x) & PopulationDecrease(x)) -> CompetitionIncrease(x))", "all x.((Predator(x) & PopulationDecreases(x)) -> CompetitionIncreases(x))", "all x y.((Predator(x) & Prey(y)) -> (DecreasesPopulation(x,y) & IncreasesCompetition(x,y)))", "all x y.((Predator(x) & Prey(y)) -> (DecreasedPopulation(x,y) & IncreasedCompetition(x,y)))", "all x y.((Predator(x) & Prey(y) & PopulationDecrease(x,y)) -> CompetitionIncrease(x,y))", "all x y.((Predator(x) & Prey(y) & DecreasesPopulation(x,y)) -> IncreasesCompetition(x,y))", "all x y.((Predator(x) & Prey(y) & PopulationDecreases(x,y)) -> CompetitionIncreases(x,y))", "all x y.((Predator(x) & Prey(y) & PopulationDecrease(x,y)) -> IncreasedCompetition(x,y))", "all x y.((Predator(x) & Prey(y) & PopulationDecreases(x,y)) -> IncreasesCompetition(x,y))", "all x y.((Predator(x) & Prey(y) & PopulationDecreases(x,y)) -> IncreasedCompetition(x,y))", "all x y.((Predator(x) & Prey(y)) -> (DecreasesPopulation(x,y) & IncreasesCompetition(x)))", "all x y.((Predator(x) & Prey(y) & PopulationDecrease(x,y)) -> CompetitionIncrease(x))", "all x y.((Predator(x) & Prey(y)) -> DecreasesPopulation(x,y))", "all x y.((Predator(x) & Prey(y) & PopulationDecrease(x,y)) -> IncreasedCompetition(x))", "all x y.((Predator(x) & Prey(y) & DecreasesPopulation(x,y)) -> IncreasesCompetition(x))", "all x y.((Predator(x) & Prey(y) & PopulationDecreases(x,y)) -> CompetitionIncreases(x))"]}
{"id": "entailmentbank_validation_511", "nl": "as the population of prey decreases, competition between alligators will increase.", "fol": "", "prediction": ["all x.((PreyPopulation(x) & PopulationDecrease(x)) -> CompetitionIncrease(x))", "all x y.((Prey(x) & Alligator(y)) -> (DecreasesPopulation(x,y) & IncreasesCompetition(y,x)))", "all x y.((Prey(x) & Alligator(y)) -> (DecreasedPopulation(x,y) & IncreasedCompetition(y,x)))", "all x y.((Prey(x) & Alligator(y)) -> (DecreasesPopulation(x) & IncreasesCompetition(y)))", "all x.((PreyPopulationDecrease(x) & AlligatorCompetition(x)) -> Increase(x))", "all x.((PreyPopulation(x) & PopulationDecreases(x)) -> CompetitionIncreases(x))", "all x y.((Prey(x) & Alligator(y)) -> (DecreasesPopulation(x,y) & IncreasesCompetition(y)))", "all x.(DecreasedPreyPopulation(x) -> IncreasedCompetition(x))", "all x y.((Prey(x) & Alligator(y)) -> (DecreasedPopulation(x) & IncreasedCompetition(y)))", "all x y.((PreyPopulation(x) & Alligator(y)) -> (Decreases(x,y) & IncreasesCompetition(y,x)))", "all x y.((Prey(x) & Alligator(y)) -> (DecreasedPopulation(x,y) & IncreasedCompetition(y)))", "all x y.((PreyPopulation(x) & Alligator(y)) -> (Decreases(x,y) & IncreasesCompetition(y)))", "all x.((Prey(x) & PopulationDecrease(x)) -> CompetitionIncrease(x))", "all x y.((Prey(x) & Alligator(y)) -> (DecreasesPopulation(x,y) & IncreasesCompetition(y,y)))", "all x.((PreyPopulationDecrease(x) & AlligatorCompetition(x)) -> Increased(x))", "all x.((PreyPopulation(x) & Decreases(x)) -> IncreasesCompetition(x))"]}
{"id": "entailmentbank_validation_512", "nl": "competition may cause animals to act aggressively towards members of their own species.", "fol": "", "prediction": ["all x y z.((Competition(x) & Animal(y) & MemberOfSpecies(z)) -> AggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressive(AggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressive", "all x y z.((Competition(x) & Animal(y) & MemberOfSpecies(z)) -> AggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressive(AggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressive", "all x y z.((Competition(x) & Animal(y) & MemberOfSpecies(z)) -> AggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveA", "all x y z.((Competition(x) & Animal(y) & MemberOfSpecies(z)) -> AggressivelyAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressive(AggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressive", "all x y z.((Competition(x) & Animal(y) & MemberOfSpecies(z)) -> AggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressive", "all x y z.((Competition(x) & Animal(y) & MemberOfSpecies(z)) -> AggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressive(AggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressive", "all x y z.((Competition(x) & Animal(y) & MemberOfSpecies(z)) -> AggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggress(AggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveA", "all x y z.((Competition(x) & Animal(y) & MemberOfSpecies(z)) -> AggressivelyAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressive(AggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressive", "all x y z.((Competition(x) & Animal(y) & MemberOfSpecies(z)) -> AggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressive(AggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressive", "all x y z.((Competition(x) & Animal(y) & MemberOfSpecies(z)) -> AggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggress(AggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveA", "all x y z.((Competition(x) & Animal(y) & MemberOfSpecies(z)) -> AggressivelyAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggress(AggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveA", "all x y z.((Competition(x) & Animal(y) & MemberOfSpecies(z)) -> AggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressive(AggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressive(AggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggress", "all x y z.((Competition(x) & Animal(y) & MemberOfSpecies(z)) -> AggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressive(AggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressive(AggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggress", "all x y z.((Competition(x) & Animal(y) & MemberOfSpecies(z)) -> AggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressive(AggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressive(AggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggress", "all x y z.((Competition(x) & Animal(y) & MemberOfSpecies(z)) -> AggressivelyAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressive", "all x y z.((Competition(x) & Animal(y) & MemberOfSpecies(z)) -> AggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressive(AggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggress(AggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressiveAggressive"]}
{"id": "entailmentbank_validation_513", "nl": "as the population of prey decreases, agression between alligators will increase.", "fol": "", "prediction": ["all x y.((Prey(x) & Alligator(y)) -> (DecreasesPopulation(x,y) & IncreasesAgression(y,x)))", "all x.(DecreasedPreyPopulation(x) -> IncreasedAgression(x))", "all x y.((Prey(x) & Alligator(y)) -> (DecreasedPopulation(x,y) & IncreasedAgression(y,x)))", "all x y.((Prey(x) & Alligator(y)) -> (DecreasesPopulation(x,y) & IncreasesAgression(y)))", "all x y.((Prey(x) & Alligator(y)) -> (DecreasesPopulation(x) & IncreasesAgression(y)))", "all x y.((Prey(x) & Alligator(y)) -> (DecreasedPopulation(x,y) & IncreasedAgression(y)))", "all x y.((Prey(x) & Alligator(y)) -> (DecreasedPopulation(x) & IncreasedAgression(y)))", "all x y.((Prey(x) & Alligator(y)) -> (DecreasesPopulation(x,y) & IncreasesAgression(x,y)))", "all x.(DecreasesPreyPopulation(x) -> IncreasesAgression(x))", "all x.((PreyPopulation(x) & PopulationDecrease(x)) -> Aggression(x))", "all x.((PreyPopulation(x) & PopulationDecreases(x)) -> Aggression(x))", "all x y.((Prey(x) & Alligator(y)) -> (DecreasesPopulation(x,y) & IncreasesAgression(y,y)))", "all x y.((Prey(x) & Alligator(y)) -> (DecreasesPopulation(x,y) & IncreasesAgression(y,z)))", "all x y.((PreyPopulation(x) & AlligatorAgression(y)) -> Decreases(x,y))", "all x y.((PreyPopulation(x) & Alligator(y)) -> (Decreases(x,y) & IncreasesAgression(y,x)))", "all x y.((Prey(x) & Alligator(y)) -> (DecreasedPopulation(x,y) & IncreasedAgression(x,y)))"]}
{"id": "entailmentbank_validation_514", "nl": "a drought occurs over a period of months / years.", "fol": "", "prediction": ["all x y z.((Drought(x) & Month(y) & Year(z)) -> OccursOver(x,y,z))", "all x y z.((Drought(x) & Months(y) & Years(z)) -> OccursOver(x,y,z))", "all x.(Drought(x) -> OccursOverMonthsYears(x))", "all x y.((Drought(x) & Months(y) & Years(y)) -> OccursOver(x,y))", "all x y.((Drought(x) & Months(y)) -> OccursOver(x,y))", "all x y.((Drought(x) & Month(y)) -> OccursOver(x,y))", "all x y.((Drought(x) & Months(y) & Years(z)) -> OccursOver(x,y,z))", "all x y.((Drought(x) & Months(y) & Years(y)) -> Occurs(x,y))", "all x y.((Drought(x) & Months(y)) -> Occurs(x,y))", "all x y z.((Drought(x) & Month(y) & Years(z)) -> OccursOver(x,y,z))", "all x y.((Drought(x) & Month(y)) -> OccursOverPeriod(x,y))", "all x.(Drought(x) -> OccursOverMonthsAndYears(x))", "all x.(Drought(x) -> (OccursOverMonths(x) & OccursOverYears(x)))", "all x y.((Drought(x) & Month(y) & Year(y)) -> OccursOver(x,y))", "all x y z.((Drought(x) & Months(y) & Years(z)) -> Occurs(x,y,z))", "all x y z.((Drought(x) & Month(y) & Year(z)) -> Occurs(x,y,z))"]}
{"id": "entailmentbank_validation_515", "nl": "drought is when available water decreases in an environment over a period of months / years.", "fol": "", "prediction": ["all x y.((Drought(x) & Environment(y)) -> DecreasesWater(x,y))", "all x y.((Drought(x) & Environment(y) & AvailableWaterDecreases(x,y)) -> DurationOfMonthsYears(x))", "all x y.((Drought(x) & Environment(y)) -> AvailableWaterDecreases(x,y))", "all x y.((Drought(x) & Environment(y) & AvailableWaterDecreases(x,y)) -> DurationOfMonthsYears(x,y))", "all x y.((Drought(x) & Environment(y) & AvailableWaterDecreases(x,y)) -> DurationOfMonthsAndYears(x))", "all x y.((Drought(x) & Environment(y) & AvailableWaterDecreases(x,y)) -> OverMonthsYears(x))", "all x y.((Drought(x) & Environment(y) & AvailableWaterDecrease(x,y)) -> DurationOfMonthsYears(x))", "all x y.((Drought(x) & Environment(y) & AvailableWaterDecrease(x,y)) -> OverMonthsYears(x))", "all x y.((Drought(x) & Environment(y)) -> AvailableWaterDecreasesOverMonthsYears(x,y))", "all x y.((Drought(x) & Environment(y) & AvailableWaterDecreases(x,y)) -> DurationOfMonthsAndYears(x,y))", "all x y.((Drought(x) & Environment(y) & AvailableWaterDecreases(x,y)) -> PeriodOfMonthsYears(x))", "all x y.((Drought(x) & Environment(y) & AvailableWaterDecreases(x,y)) -> DurationOfMonths(x,y))", "all x y.((Drought(x) & Environment(y) & AvailableWaterDecrease(x,y)) -> DurationOfMonthsYears(x,y))", "all x y.((Drought(x) & Environment(y) & AvailableWaterDecreases(x,y)) -> OverPeriodOfMonthsYears(x))", "all x y.((Drought(x) & Environment(y) & AvailableWaterDecreases(x,y)) -> OverMonthsYearsPeriod(x))", "all x y.((Drought(x) & Environment(y)) -> AvailableWaterDecrease(x,y))"]}
{"id": "entailmentbank_validation_516", "nl": "as available water decreases, the population of plants will decrease.", "fol": "", "prediction": ["all x.((AvailableWater(x) & Decreases(x)) -> PopulationDecreases(x))", "all x.((AvailabilityWater(x) & Decreases(x)) -> PopulationDecreases(x))", "all x y.((AvailableWater(x) & Plant(y)) -> DecreasesPopulation(x,y))", "all x y.((AvailableWater(x) & Plant(y)) -> DecreasesPopulation(y))", "all x.((AvailableWater(x) & Decreases(x)) -> DecreasesPopulationOfPlants(x))", "all x y.((AvailableWater(x) & Plant(y) & Decreases(x,y)) -> PopulationDecreases(y))", "all x y.((AvailableWater(x) & Plant(y)) -> DecreasesPopulation(y,x))", "all x y.((Plant(x) & AvailableWater(y) & Decreases(x,y)) -> PopulationDecreases(x))", "all x y.((AvailableWater(x) & Plant(y)) -> DecreasedPopulation(y))", "all x.((AvailableWater(x) & Decreases(x)) -> DecreasesPopulation(x))", "all x y.((AvailableWater(x) & Plant(y)) -> DecreasedPopulation(x,y))", "all x y.((Plant(x) & AvailableWater(y) & Decreases(x,y)) -> PopulationDecreases(x,y))", "all x.((WaterDecrease(x) & Available(x)) -> PopulationDecrease(x))", "all x y z.((AvailableWater(x) & Plant(y) & Population(z)) -> Decreases(y,z))", "all x y.((AvailableWater(x) & PlantPopulation(y)) -> Decreases(y))", "all x.((WaterDecrease(x) & AvailableWaterDecrease(x)) -> PopulationDecrease(x))"]}
{"id": "entailmentbank_validation_517", "nl": "a drought that occurs over a period of months / years may cause the population of plants in an environment to decrease.", "fol": "", "prediction": ["all x.((Drought(x) & OccursOverMonths(x) & OccursOverYears(x)) -> MayCauseDecreasedPopulation(x))", "all x y.((Drought(x) & OccursOverMonths(x) & OccursOverYears(x)) -> MayCauseDecreasedPopulation(y))", "all x.((Drought(x) & OccursOverMonths(x) & OccursOverYears(x)) -> MayDecreasePopulation(x))", "all x y.((Drought(x) & OccursOverMonths(x) & OccursOverYears(x)) -> MayDecreasePopulation(y))", "all x.((Drought(x) & OccursOverMonths(x) & OccursOverYears(x)) -> MayCauseDecreasedPopulationOfPlants(x))", "all x.((Drought(x) & OccursOverMonths(x) & OccursOverYears(x)) -> MayCauseDecrementInEnvironment(x))", "all x.((Drought(x) & OccursOverMonths(x) & OccursOverYears(x)) -> MayDecreasePopulationOfPlants(x))", "all x y.((Drought(x) & OccursOverMonths(x) & OccursOverYears(x)) -> MayCauseDecreasedPopulationOfPlants(y))", "all x.((Drought(x) & OccursOverMonths(x) & OccursOverYears(x)) -> DecreasesPopulationOfPlants(x))", "all x y.((Drought(x) & OccursOverMonths(x) & OccursOverYears(x)) -> MayCauseDecrementInEnvironment(y))", "all x.((Drought(x) & OccursOverMonths(x) & OccursOverYears(x)) -> MayCauseDecreasedPopulationInEnvironment(x))", "all x.((Drought(x) & OccursOverMonths(x) & OccursOverYears(x)) -> PopulationDecrease(x))", "all x.((Drought(x) & OccursOverMonths(x) & OccursOverYears(x)) -> DecreasedPopulation(x))", "all x y.((Drought(x) & OccursOverMonths(x) & OccursOverYears(x)) -> DecreasedPopulation(y))", "all x y.((Drought(x) & OccursOverMonths(x) & OccursOverYears(x)) -> DecreasesPopulation(y))", "all x y.((Drought(x) & OccursOverMonths(x) & OccursOverYears(x)) -> MayCauseDecreasedPopulation(x,y))"]}
{"id": "entailmentbank_validation_518", "nl": "a marsh willow herb is a kind of plant.", "fol": "", "prediction": ["all x.(MarshWildowHerb(x) -> Plant(x))", "all x.(MarshWillowHerb(x) -> Plant(x))", "all x.(MarshWillowHerb(x) -> Plant(x))", "all x.(MarshWildowHerb(x) -> Plant(x))", "all x.(MarshWitchHerb(x) -> Plant(x))", "all x.(MarshWillowHerb(x) -> Plant(x))", "all x.(MarshWildow(x) -> Plant(x))", "all x y.((MarshWildowHerb(x) & Plant(y)) -> Plant(x))", "all x.(MarshWaldowHerb(x) -> Plant(x))", "all x.(MarshWillow(x) -> Plant(x))", "all x y.((MarshWildowHerb(x) & Herb(y)) -> Plant(x))", "all x.(MarshWallowHerb(x) -> Plant(x))", "all x y.((MarshWillowHerb(x) & Herb(y)) -> Plant(x))", "all x y.((MarshWillowHerb(x) & Marsh(y)) -> Plant(x))", "all x y.((MarshWildowHerb(x) & Marsh(y)) -> Plant(x))", "all x.(MarshWoodHerb(x) -> Plant(x))"]}
{"id": "entailmentbank_validation_519", "nl": "a drought that occurs over a period of months / years may cause the population of marsh willow herb in an environment to decrease.", "fol": "", "prediction": ["all x.((Drought(x) & OccursOverMonths(x) & OccursOverYears(x)) -> PopulationDecrease(x))", "all x.((Drought(x) & OccursOverMonths(x) & OccursOverYears(x)) -> MayCauseDecreasedPopulation(x))", "all x.((Drought(x) & OccursOverMonths(x) & OccursOverYears(x)) -> MayCauseDecreasedPopulationOfMarshWillowHerb(x))", "all x y.((Drought(x) & OccursOverMonths(x) & OccursOverYears(x)) -> MayCauseDecreasedPopulation(y))", "all x.((Drought(x) & OccursOverMonths(x) & OccursOverYears(x)) -> MayCauseDecreasedPopulationOfMarshWildowHerb(x))", "all x.((Drought(x) & OccursOverMonths(x) & OccursOverYears(x)) -> CausesDecreasedPopulation(x))", "all x.((Drought(x) & OccursOverMonths(x) & OccursOverYears(x)) -> CausesDecreasedPopulationOfMarshWillowHerb(x))", "all x.((Drought(x) & OccursOverMonths(x) & OccursOverYears(x)) -> CausesDecreasedPopulationOfMarshWildowHerb(x))", "all x.((Drought(x) & OccursOverMonths(x) & OccursOverYears(x)) -> MayCauseDecreasedPopulationOfMarshWillowHerbInEnvironment(x))", "all x y.((Drought(x) & OccursOverMonths(x) & OccursOverYears(x)) -> CausesDecreasedPopulation(y))", "all x.((Drought(x) & OccursOverMonths(x) & OccursOverYears(x)) -> MayCauseDecreasedPopulationOfMarshWildowHerbInEnvironment(x))", "all x.((Drought(x) & OccursOverMonths(x) & OccursOverYears(x)) -> MayDecreasePopulationOfMarshWillowHerb(x))", "all x y.((Drought(x) & OccursOverMonths(x) & OccursOverYears(x)) -> PopulationDecrease(y))", "all x y.((Drought(x) & OccursOverMonths(x) & OccursOverYears(x)) -> MayCauseDecreasedPopulationOfMarshWillowHerb(y))", "all x.((Drought(x) & OccursOverMonths(x) & OccursOverYears(x)) -> CausesDecreasedPopulationOfMarshWillowHerbInEnvironment(x))", "all x.((Drought(x) & OccursOverMonths(x) & OccursOverYears(x)) -> MayDecreasePopulationOfMarshWildowHerb(x))"]}
{"id": "entailmentbank_validation_520", "nl": "sweat is used for adjusting to hot temperatures by some animals.", "fol": "", "prediction": ["exists x.(Animal(x) & Sweat(x) & AdjustsToHotTemperatures(x))", "exists x y.(Animal(x) & Sweat(y) & AdjustsToHotTemperatures(x,y))", "all x y.((Animal(x) & Sweat(y)) -> AdjustsToHotTemperatures(x,y))", "exists x.(Animal(x) & UsesSweatForAdaptingToHotTemperatures(x))", "exists x y.(Animal(x) & Sweat(y) & UsedForAdjustingToHotTemperatures(x,y))", "exists x.(Animal(x) & UsesSweatForAdjustingToHotTemperatures(x))", "exists x y.(Animal(x) & Sweat(y) & UsedForAdaptingToHotTemperatures(x,y))", "exists x.(Animal(x) & Sweat(x) & UsedForAdjustingToHotTemperatures(x))", "all x.((Animal(x) & Sweat(x)) -> AdjustsToHotTemperatures(x))", "all x y.((Animal(x) & Sweat(y)) -> AdjustsToHotTemperatures(y,x))", "exists x.(Animal(x) & UsedForAdaptingToHotTemperatures(x))", "exists x.(Animal(x) & UsedForAdjustingToHotTemperatures(x))", "exists x.(Animal(x) & Sweat(x) & UsedForAdaptingToHotTemperatures(x))", "exists x y.(Animal(x) & Animal(y) & Sweat(x) & AdjustsToHotTemperatures(x,y))", "all x y.((Animal(x) & Animal(y)) -> AdjustsToHotTemperatures(x,y))", "exists x y.(Animal(x) & Sweat(y) & AdjustsToHotTemperatures(y,x))"]}
{"id": "entailmentbank_validation_521", "nl": "sweat cools a body.", "fol": "", "prediction": ["all x y.((Sweat(x) & Body(y)) -> Cools(x,y))", "all x.(Sweat(x) -> CoolsBody(x))", "all x y z.((Sweat(x) & Body(y) & Body(z)) -> Cools(x,y,z))", "all x y.((Sweat(x) & Body(y) & Cools(x,y)) -> Cools(x,y))", "all x y z.((Sweat(x) & Body(y) & Body(z) & Cools(x,y,z)) -> Cools(x,y,z))", "all x y.((Sweet(x) & Body(y)) -> Cools(x,y))", "all x y z.((Sweat(x) & Body(y) & Body(z)) -> Cools(x,y))", "all x y z.((Sweat(x) & Body(y) & Body(z) & Cools(x,y,z)) -> Cools(x,y))", "all x y z.((Sweat(x) & Body(y) & Body(z) & Cools(x,y)) -> Cools(x,z))", "all x y z.((Sweet(x) & Body(y) & Body(z)) -> Cools(x,y,z))", "all x y.((Sweat(x) & Body(y)) -> Cool(x,y))", "all x y z.((Sweat(x) & Body(y) & Body(z) & Cools(x,y,z)) -> Cools(y,z))", "all x y z.((Sweat(x) & Body(y) & Body(z) & Cools(x,y)) -> Cools(x,y,z))", "all x.((Sweat(x) & CoolsBody(x)) -> CoolsBody(x))", "all x y z.((Sweat(x) & Body(y) & Body(z) & Cools(x,y)) -> Cools(y,z))", "all x y z.((Sweat(x) & Body(y) & Body(z)) -> Cool(x,y,z))"]}
{"id": "entailmentbank_validation_522", "nl": "when the body is hot, sweat is used to cool the body.", "fol": "", "prediction": ["all x.((Body(x) & Hot(x)) -> UsedToCool(x))", "all x y.((Body(x) & Body(y) & Hot(x)) -> UsedToCool(x,y))", "all x.((Body(x) & Hot(x)) -> Sweat(x))", "all x y.((Body(x) & Body(y) & Hot(x)) -> UsedToCool(y,x))", "all x.((Body(x) & Hot(x)) -> UsedToCool(x,sweat))", "all x.((Body(x) & Hot(x)) -> CoolsBody(x))", "all x.((Body(x) & Hot(x)) -> UsedToCool(x,Sweat))", "all x y.((Body(x) & Body(y) & Hot(x) & Sweat(y)) -> CoolsBody(y))", "all x y.((Body(x) & Body(y) & Hot(x)) -> Sweat(y))", "all x y.((Body(x) & Body(y) & Hot(x)) -> Sweat(x))", "all x y.((Body(x) & Body(y) & Hot(x)) -> Cool(y))", "all x y.((Body(x) & Body(y) & Hot(x) & Sweat(y)) -> Cools(y,x))", "all x y.((Body(x) & Body(y) & Hot(x) & Sweat(y)) -> Cool(y))", "all x y.((Body(x) & BodyHot(x) & Sweat(y)) -> CoolsBody(y))", "all x y.((Body(x) & Body(y) & Hot(x)) -> CoolsBody(y))", "all x y.((Body(x) & BodyHot(x) & Sweat(y)) -> Cools(y,x))"]}
{"id": "entailmentbank_validation_523", "nl": "panting is when an animal's body is cooled by hanging out their tongue.", "fol": "", "prediction": ["all x y.((Animal(x) & Body(y)) -> CooledByHangingOutTongue(x,y))", "all x y.((Animal(x) & Body(y) & HangsOutTongue(x,y)) -> CooledBy(x,y))", "all x y z.((Animal(x) & Body(y) & Tongue(z)) -> CooledByHangingOut(x,y,z))", "all x y.((Animal(x) & Body(y) & HangsOutTongue(x,y)) -> CoolsBy(x,y))", "all x y.((Animal(x) & Body(y) & HangsOutTongue(x,y)) -> CooledByPanting(x,y))", "all x y.((Animal(x) & Body(y) & HangingOutTongue(x,y)) -> CooledBy(x,y))", "all x.(Pant(x) -> (Animal(x) & CooledByHangingOutTongue(x)))", "all x y.((Animal(x) & Body(y) & CooledByHangingOutTongue(x,y)) -> Panting(x))", "all x y.((Animal(x) & Body(y) & HangsOutTongue(x,y)) -> CooledByPantting(x,y))", "all x.(Pant(x) -> (Animal(x) & CooledByHangingOutTongue(x)))", "all x.((Animal(x) & BodyCooledByHangingOutTongue(x)) -> Panting(x))", "all x y.((Animal(x) & Body(y) & HangsOutTongue(x,y)) -> CooledByPanting(x))", "all x y.((Animal(x) & Body(y) & HangedOutTongue(x,y)) -> CooledBy(x,y))", "all x y.((Animal(x) & Body(y) & HangsOutTongue(x)) -> CooledByPanting(x,y))", "all x.(Panting(x) -> (Animal(x) & CooledByHangingOutTongue(x)))", "all x y.((Animal(x) & Body(y) & HangingOutTongue(x,y)) -> CoolsBy(x,y))"]}
{"id": "entailmentbank_validation_524", "nl": "panting and sweating are used to cool the body.", "fol": "", "prediction": ["all x.((Pantting(x) | Sweating(x)) -> CoolsBody(x))", "all x.((Pants(x) | Sweating(x)) -> CoolsBody(x))", "all x.((Panting(x) | Sweating(x)) -> CoolsBody(x))", "all x.((Pantting(x) | Sweeping(x)) -> CoolsBody(x))", "all x y.((Pantting(x) & Sweating(y)) -> CoolsBody(x,y))", "all x.((Pants(x) | Sweats(x)) -> CoolsBody(x))", "all x.((Panting(x) | Sweeping(x)) -> CoolsBody(x))", "all x.((Pants(x) | Sweeping(x)) -> CoolsBody(x))", "all x y.((Pants(x) & Sweating(y)) -> CoolsBody(x,y))", "all x y.((Pantting(x) & Sweating(y)) -> CoolsBody(x))", "all x y.((Pantting(x) & Sweeping(y)) -> CoolsBody(x,y))", "all x y.((Pants(x) & Sweating(y)) -> CoolsBody(x,y))", "all x y.((Panting(x) & Sweating(y)) -> CoolsBody(x,y))", "all x.((Pantting(x) | Sweating(x)) -> CoolBody(x))", "all x.((Pants(x) | Sweating(x)) -> CoolsBody(x))", "all x y.((Pantting(x) & Sweeping(y)) -> CoolsBody(x))"]}
{"id": "entailmentbank_validation_525", "nl": "cooling means decreasing heat / temperature.", "fol": "", "prediction": ["all x.(Cooling(x) -> (DecreasesHeat(x) & DecreasesTemperature(x)))", "all x.(Cooling(x) -> (DecreasesHeat(x) & ReducesTemperature(x)))", "all x.(Cooling(x) -> (DecreasesHeat(x) | DecreasesTemperature(x)))", "all x.(Cooling(x) -> (DecreasesHeat(x) | ReducesTemperature(x)))", "all x.(Cooling(x) -> DecreasesHeat(x))", "all x y.((Cooling(x) & Heat(y)) -> DecreasesTemperature(x,y))", "all x y.((Cooling(x) & Heat(y)) -> Decreases(x,y))", "all x y z.((Cooling(x) & Heat(y) & Temperature(z)) -> Decreases(x,y,z))", "all x.(Cooling(x) -> (DecreasedHeat(x) & DecreasedTemperature(x)))", "all x y.((Cooling(x) & Heat(y) & Temperature(y)) -> Decreases(x,y))", "all x y.((Cooling(x) & Heat(y) & Temperature(z)) -> Decreases(x,y,z))", "all x.(Climate(x) -> (DecreasesHeat(x) & DecreasesTemperature(x)))", "all x.(Cooling(x) -> (DecreasedHeat(x) | DecreasedTemperature(x)))", "all x.(Cooling(x) -> (DecreasedHeat(x) & ReducedTemperature(x)))", "all x.(Cooling(x) -> (DecreasesHeat(x) & DecreasingTemperature(x)))", "all x.(Climate(x) -> (DecreasesHeat(x) & ReducesTemperature(x)))"]}
{"id": "entailmentbank_validation_526", "nl": "if an animal becomes too hot then that animal may die.", "fol": "", "prediction": ["all x.((Animal(x) & TooHot(x)) -> MayDie(x))", "all x.((Animal(x) & TooHot(x)) -> MayDeath(x))", "all x.((Animal(x) & TooHot(x)) -> MayDie(x))", "all x y.((Animal(x) & TooHot(x)) -> MayDie(y))", "all x.((Animal(x) & BecomesTooHot(x)) -> MayDie(x))", "all x y.((Animal(x) & TooHot(x)) -> MayDie(x,y))", "all x.((Animal(x) & TooHot(x)) -> MayDerive(x))", "all x y.((Animal(x) & Hot(y)) -> MayDie(x,y))", "all x.((Animal(x) & TooHot(x)) -> MayDestroy(x))", "all x y.((Animal(x) & TooHot(x)) -> MayDie(x))", "all x.((Animal(x) & TooHot(x)) -> MayDead(x))", "all x.((Animal(x) & Hot(x)) -> MayDie(x))", "all x y.((Animal(x) & Animal(y) & TooHot(x)) -> MayDie(y))", "all x y.((Animal(x) & Hot(x)) -> MayDie(y))", "all x y.((Animal(x) & BecomesTooHot(x)) -> MayDie(y))", "all x y.((Animal(x) & BecomesTooHot(x)) -> MayDie(x,y))"]}
{"id": "entailmentbank_validation_527", "nl": "cooling can be used by an animal for survival.", "fol": "", "prediction": ["all x y.((Animal(x) & Cooling(y)) -> CanUseForSurvival(x,y))", "all x y.((Animal(x) & Animal(y)) -> UsesCoolingForSurvival(x,y))", "all x y.((Animal(x) & Animal(y)) -> CanUseCoolingForSurvival(x,y))", "all x y.((Animal(x) & Animal(y)) -> UsedForSurvival(x,y))", "all x y.((Animal(x) & Cooling(y)) -> UsedForSurvival(x,y))", "all x.((Animal(x) & Cooling(x)) -> UsesForSurvival(x))", "all x y z.((Animal(x) & Cooling(y) & Survival(z)) -> CanUseFor(x,y,z))", "all x y.((Animal(x) & Cooling(y)) -> UsesForSurvival(x,y))", "all x.((Animal(x) & Cooling(x)) -> UsedForSurvival(x))", "all x y.((Animal(x) & Animal(y)) -> Cooling(x,y))", "all x.((Animal(x) & Cooling(x)) -> CanUseForSurvival(x))", "all x y.((Animal(x) & Animal(y)) -> CoolingUsedForSurvival(x,y))", "all x y z.((Animal(x) & Cooling(y) & Survival(z)) -> CanUse(x,y,z))", "all x y z.((Animal(x) & Cooling(y) & Survival(z)) -> UsedFor(x,y,z))", "all x y.((Animal(x) & Animal(y)) -> CanUseCooling(x,y))", "all x y.((Animal(x) & Animal(y) & Cooling(x,y)) -> UsesForSurvival(x,y))"]}
{"id": "entailmentbank_validation_528", "nl": "if the environmental temperature is too hot then an animal in that environment may become hot.", "fol": "", "prediction": ["all x.((Environment(x) & TooHot(x)) -> MayBecomeHot(x))", "all x.((EnvironmentalTemperature(x) & TooHot(x)) -> MayBecomeHot(x))", "all x y.((Animal(x) & Environment(y) & TooHot(y)) -> MayBecomeHot(x,y))", "all x y.((Animal(x) & EnvironmentalTemperature(y) & TooHot(y)) -> MayBecomeHot(x,y))", "all x.((EnvironmentalTemperature(x) & TooHot(x)) -> MayBecomeHot(x))", "all x.((Environment(x) & TooHot(x)) -> MayBecomeHot(x))", "all x.((Animal(x) & EnvironmentalTemperatureTooHot(x)) -> MayBecomeHot(x))", "all x.((Environment(x) & TooHot(x)) -> (AnimalInEnvironment(x) & MayBecomeHot(x)))", "all x.((Environment(x) & TooHot(x)) -> CouldBecomeHot(x))", "all x.((Environment(x) & TooHot(x)) -> CanBecomeHot(x))", "all x.((Environment(x) & TooHot(x)) -> MayBeHot(x))", "all x y.((Animal(x) & Environment(y) & TooHot(x,y)) -> MayBecomeHot(x,y))", "all x.((Environment(x) & TooHot(x)) -> BecomesHot(x))", "all x.((EnvironmentalTemperatureTooHot(x)) -> MayBecomeHot(x))", "all x y.((Environment(x) & Environment(y) & TooHot(x)) -> MayBecomeHot(x,y))", "all x y.((Animal(x) & Environment(y) & TooHot(x)) -> MayBecomeHot(x,y))"]}
{"id": "entailmentbank_validation_529", "nl": "if the temperature of an animal's environment becomes too hot then that animal must cool itself.", "fol": "", "prediction": ["all x.((Animal(x) & TooHotTemperature(x)) -> CoolsItself(x))", "all x.((Animal(x) & TemperatureTooHot(x)) -> CoolsItself(x))", "all x y.((Animal(x) & Temperature(y) & TooHot(y)) -> CoolsItself(x,y))", "all x y.((Animal(x) & Temperature(y) & TooHot(y)) -> MustCool(x,y))", "all x y.((Animal(x) & Temperature(y) & TooHot(y)) -> Cools(x,y))", "all x.((Animal(x) & TooHotTemperature(x)) -> MustCool(x))", "all x.((Animal(x) & TooHot(x)) -> CoolsItself(x))", "all x.((Animal(x) & TemperatureTooHot(x)) -> MustCool(x))", "all x y.((Animal(x) & Environment(y) & TooHot(x,y)) -> Cools(x,y))", "all x y.((Animal(x) & Environment(y) & TooHot(x,y)) -> MustCool(x,y))", "all x y z.((Animal(x) & Temperature(y) & Environment(z) & TooHot(y)) -> MustCool(x,z))", "all x y.((Animal(x) & Temperature(y) & TooHot(y)) -> CoolsItself(x))", "all x.((Animal(x) & TooHotTemperature(x)) -> Cools(x))", "all x y.((Animal(x) & Environment(y) & TooHot(x,y)) -> CoolsItself(x,y))", "all x y z.((Animal(x) & Temperature(y) & Environment(z) & TooHot(y)) -> Cools(x,z))", "all x y.((Animal(x) & Environment(y) & TooHot(y)) -> Cools(x,y))"]}
{"id": "entailmentbank_validation_530", "nl": "an animal cooling itself is an adaptation to hot temperatures.", "fol": "", "prediction": ["all x.((Animal(x) & Cooling(x)) -> HotTemperaturesAdaptation(x))", "all x.((Animal(x) & Cooling(x)) -> AdaptationToHotTemperatures(x))", "all x.((Animal(x) & Cooling(x)) -> HotTemperatureAdaptation(x))", "all x.(Cooling(x) -> HotTemperaturesAdaptation(x))", "all x.((Animal(x) & CoolsItself(x)) -> HotTemperaturesAdaptation(x))", "all x.((Animal(x) & CoolsItself(x)) -> AdaptationToHotTemperatures(x))", "all x.((Animal(x) & Cools(x)) -> HotTemperaturesAdaptation(x))", "all x.((Animal(x) & Cools(x)) -> AdaptationToHotTemperatures(x))", "all x.((Animal(x) & CoolingItself(x)) -> HotTemperaturesAdaptation(x))", "all x.((Animal(x) & CoolsItself(x)) -> HotTemperatureAdaptation(x))", "all x.((Animal(x) & Cools(x)) -> HotTemperatureAdaptation(x))", "all x y.((Animal(x) & Cooling(y)) -> HotTemperaturesAdaptation(x,y))", "all x.((Animal(x) & Cooling(x)) -> HeatAdaptation(x))", "all x.((Animal(x) & CoolingSelf(x)) -> HotTemperaturesAdaptation(x))", "all x.((Animal(x) & CoolsSelf(x)) -> HotTemperaturesAdaptation(x))", "all x.(Climate(x) -> HotTemperaturesAdaptation(x))"]}
{"id": "entailmentbank_validation_531", "nl": "an example of adaptations to hot temperatures are panting and sweating.", "fol": "", "prediction": ["all x.(AdaptationsToHotTemperatures(x) -> (Pantting(x) | Sweeping(x)))", "all x.(AdaptationsToHotTemperatures(x) -> (Pants(x) | Sweats(x)))", "all x.(AdaptationsToHotTemperatures(x) -> (Pantting(x) | Sweating(x)))", "all x.((AdaptationToHotTemperatures(x) & Panting(x) & Sweeping(x)) -> AdaptationToHotTemperatures(x))", "all x.(AdaptationsToHotTemperatures(x) -> (Panting(x) | Sweating(x)))", "all x.(AdaptationsToHotTemperatures(x) -> (Panting(x) | Sweeping(x)))", "all x.(Adaptation(x) -> (HotTemperatures(x) & Panting(x) & Sweeping(x)))", "all x.(AdaptationToHotTemperatures(x) -> (Pantting(x) | Sweeping(x)))", "all x.(AdaptationsToHotTemperatures(x) -> (Panting(x) | Sweeping(x)))", "all x.(AdaptationToHotTemperatures(x) -> (Pantting(x) | Sweating(x)))", "all x.(AdaptationToHotTemperatures(x) -> (Pants(x) | Sweats(x)))", "all x.(AdaptationsToHotTemperatures(x) -> (Panding(x) | Sweeping(x)))", "all x.(AdaptationsToHotTemperatures(x) -> (Pants(x) | Sweating(x)))", "all x.(AdaptationToHotTemperatures(x) -> (Panting(x) | Sweating(x)))", "all x.(AdaptationsToHotTemperatures(x) -> (Pants(x) | Sweeping(x)))", "all x.(AdaptationsToHotTemperatures(x) -> (Panting(x) | Sweating(x)))"]}
{"id": "entailmentbank_validation_532", "nl": "cellular respiration is when a cell converts from oxygen and carbohydrates into carbon dioxide, water, and energy.", "fol": "", "prediction": ["all x.(CellularRespiration(x) -> (ConvertsOxygenAndCarbohydrates(x) & CarbonDioxideWaterEnergy(x)))", "all x.(CellularRespiration(x) -> (ConvertsOxygenAndCarbohydrates(x) & CarbonDioxideWaterEnergy(x)))", "all x.((CellularRespiration(x) & ConvertsOxygenAndCarbohydrates(x) & CarbonDioxideWaterEnergy(x)) -> CellularRespiration(x))", "all x.((CellularRespiration(x) & CellConvertsOxygenAndCarbohydrates(x) & CarbonDioxideWaterEnergy(x)) -> CellularRespiration(x))", "all x.((CellularRespiration(x) & CellConvertsOxygenAndCarbohydrates(x)) -> (CarbonDioxideWaterEnergy(x)))", "all x.((CellularRespiration(x) & CellConvertsOxygenAndCarbohydrates(x)) -> (CarbonDioxide(x) & Water(x) & Energy(x)))", "all x.((CellularRespiration(x) & CellConvertsOxygenAndCarbohydrates(x) & CarbonDioxideWaterEnergy(x)) -> CellConversion(x))", "all x.(CellularRespiration(x) -> (ConvertsFromOxygenAndCarbohydrates(x) & CarbonDioxideWaterEnergy(x)))", "all x.(CellularRespiration(x) -> (ConvertsFromOxygenAndCarbohydrates(x) & CarbonDioxideWaterEnergy(x)))", "all x.((CellularRespiration(x) & ConvertsOxygenAndCarbohydrates(x)) -> (CarbonDioxideWaterEnergy(x)))", "all x y.((CellularRespiration(x) & Cell(y)) -> (ConvertsOxygenAndCarbohydrates(x,y) & CarbonDioxideWaterEnergy(y)))", "all x.(CellularRespiration(x) -> (ConvertsOxygenAndCarbohydratesToCarbonDioxideWaterEnergy(x)))", "all x.(CellularRespiration(x) -> (ConvertsOxygenAndCarbohydratesToCarbonDioxideWaterEnergy(x)))", "all x y.((CellularRespiration(x) & Cell(y)) -> (ConvertsOxygenAndCarbohydrates(y,x) & CarbonDioxideWaterEnergy(y,x)))", "all x y.((CellularRespiration(x) & Cell(y)) -> (ConvertsOxygenAndCarbohydrates(y,x) & CarbonDioxideWaterEnergy(y)))", "all x y.((CellularRespiration(x) & Cell(y)) -> (ConvertsOxygenAndCarbohydrates(x,y) & CarbonDioxideWaterEnergy(x)))"]}
{"id": "entailmentbank_validation_533", "nl": "living things require respiration to use energy.", "fol": "", "prediction": ["all x.(LivingThing(x) -> RequiresRespirationToUseEnergy(x))", "all x.(LivingThing(x) -> RequiresRespiration(x))", "all x.((LivingThing(x) & RequiresRespiration(x)) -> UsesEnergy(x))", "all x y.((LivingThing(x) & Respiration(y)) -> RequiresToUseEnergy(x,y))", "all x y.((LivingThing(x) & RequiresRespiration(y)) -> UsesEnergy(x,y))", "all x.(RequiresRespiration(x) -> UsesEnergy(x))", "all x y.((LivingThing(x) & RequiresRespiration(x)) -> UsesEnergy(y))", "all x y.((LivingThing(x) & RequiresRespiration(x) & UsesEnergy(y)) -> RequiresRespiration(x,y))", "all x y.((LivingThing(x) & RequiresRespiration(x,y)) -> UsesEnergy(x,y))", "all x y.((LivingThing(x) & Respiration(y)) -> Requires(x,y))", "all x.((LivingThing(x) & RequiresRespiration(x) & UsesEnergy(x)) -> RequiresRespiration(x))", "all x y.((LivingThing(x) & RequiresRespiration(x,y)) -> UsesEnergy(y))", "all x y.((LivingThing(x) & RequiresRespiration(x)) -> UsesEnergy(x,y))", "all x y z.((LivingThing(x) & Respiration(y) & Energy(z)) -> RequiresToUse(x,y,z))", "all x y.((LivingThing(x) & RequiresRespiration(x)) -> UsesEnergy(x))", "all x y.((LivingThing(x) & RequiresRespiration(x,y)) -> UsesEnergy(x))"]}
{"id": "entailmentbank_validation_534", "nl": "living things must convert oxygen into carbon dioxide to use energy.", "fol": "", "prediction": ["all x.(LivingThing(x) -> ConvertsOxygenToCarbonDioxide(x))", "all x y.((LivingThing(x) & Oxygen(y)) -> ConvertsToCarbonDioxide(x,y))", "all x.(LivingThing(x) -> (ConvertsOxygenToCarbonDioxide(x) & UsesEnergy(x)))", "all x.((LivingThing(x) & Oxygen(x)) -> ConvertsToCarbonDioxide(x))", "all x.((LivingThing(x) & Oxygen(x) & CarbonDioxide(x)) -> UsesEnergy(x))", "all x y z.((LivingThing(x) & Oxygen(y) & CarbonDioxide(z)) -> ConvertsToUseEnergy(x,y,z))", "all x.(LivingThing(x) -> (ConvertsOxygenIntoCarbonDioxide(x) & UsesEnergy(x)))", "all x.((LivingThing(x) & ConvertsOxygenToCarbonDioxide(x)) -> UsesEnergy(x))", "all x.(LivingThing(x) -> ConvertsOxygenToCarbonDioxideToUseEnergy(x))", "all x y.((LivingThing(x) & Oxygen(y)) -> ConvertsToCarbonDioxideToUseEnergy(x,y))", "all x.((LivingThing(x) & OxygenConversion(x)) -> UsesEnergy(x))", "all x.(LivingThing(x) -> ConvertsOxygenIntoCarbonDioxide(x))", "all x.((LivingThing(x) & OxygenConversion(x) & CarbonDioxide(x)) -> UsesEnergy(x))", "all x.((LivingThing(x) & Oxygen(x)) -> ConvertsToCarbonDioxideToUseEnergy(x))", "all x y.((LivingThing(x) & Oxygen(y)) -> ConvertsIntoCarbonDioxide(x,y))", "all x.((LivingThing(x) & Oxygen(y)) -> ConvertsToCarbonDioxide(x,y))"]}
{"id": "entailmentbank_validation_535", "nl": "breathing is when animals convert oxygen into carbon dioxide.", "fol": "", "prediction": ["all x y.((Animal(x) & Oxygen(y)) -> ConvertsToCarbonDioxide(x,y))", "all x.(Breathing(x) -> ConvertsOxygenToCarbonDioxide(x))", "all x.(Breathing(x) -> (Animal(x) & ConvertsOxygenToCarbonDioxide(x)))", "all x.(Breathing(x) -> ConvertsOxygenToCarbonDioxide(x))", "all x y z.((Animal(x) & Oxygen(y) & CarbonDioxide(z)) -> ConvertsTo(x,y,z))", "all x.(Breathing(x) -> (Animal(x) & ConvertsOxygenToCarbonDioxide(x)))", "all x y.((Animal(x) & Oxygen(y)) -> ConvertsIntoCarbonDioxide(x,y))", "all x.(Breathing(x) -> (AnimalsConvertOxygenToCarbonDioxide(x)))", "all x y.((Animal(x) & Oxygen(y) & ConvertsToCarbonDioxide(x,y)) -> Breathes(x))", "all x.(Breathing(x) -> (AnimalConvertsOxygenToCarbonDioxide(x)))", "all x.(Breathing(x) -> (AnimalConvertsOxygenToCarbonDioxide(x)))", "all x y.((Animal(x) & Oxygen(y) & ConvertsToCarbonDioxide(x,y)) -> Breathes(x,y))", "all x y.((Animal(x) & Oxygen(y) & ConvertsToCarbonDioxide(x,y)) -> Breathing(x))", "all x.(Breathing(x) -> (AnimalsConvertOxygenToCarbonDioxide(x)))", "all x y z.((Animal(x) & Oxygen(y) & CarbonDioxide(z)) -> ConvertsInto(x,y,z))", "all x y.((Animal(x) & Oxygen(y) & CarbonDioxide(z)) -> ConvertsTo(x,y,z))"]}
{"id": "entailmentbank_validation_536", "nl": "living things must breathe to use energy.", "fol": "", "prediction": ["all x.(LivingThing(x) -> BreathesToUseEnergy(x))", "all x.((LivingThing(x) & Breathes(x)) -> UsesEnergy(x))", "all x.((LivingThing(x) & Breathe(x)) -> UsesEnergy(x))", "all x y.((LivingThing(x) & Breathes(x,y)) -> UsesEnergy(x))", "all x y.((LivingThing(x) & Breathe(y)) -> UsesEnergy(x,y))", "all x.((LivingThing(x) & BreathesToUseEnergy(x)) -> UsesEnergy(x))", "all x.(LivingThing(x) -> MustBreatheToUseEnergy(x))", "all x y.((LivingThing(x) & Breathes(y)) -> UsesEnergy(x,y))", "all x.(LivingThing(x) -> Breathes(x))", "all x y.((LivingThing(x) & Breathes(x)) -> UsesEnergy(y))", "all x y.((LivingThing(x) & Breathes(x)) -> UsesEnergy(x))", "all x.(LivingThing(x) -> BreathesForEnergy(x))", "all x y.((LivingThing(x) & Breathes(x,y)) -> UsesEnergy(x,y))", "all x y.((LivingThing(x) & Breathes(x)) -> UsesEnergy(x,y))", "all x.((LivingThing(x) & BreathesForEnergy(x)) -> UsesEnergy(x))", "all x y.((LivingThing(x) & Breathes(y)) -> UsesEnergy(x))"]}
{"id": "entailmentbank_validation_537", "nl": "breathing out is when animals exhale carbon dioxide from their lungs into the air.", "fol": "", "prediction": ["all x.(BreathingOut(x) -> (ExhalesCarbonDioxide(x) & FromLungsIntoAir(x)))", "all x.(BreathingOut(x) -> (ExhalesCarbonDioxide(x) & FromLungsIntoAir(x)))", "all x y.((Animal(x) & Air(y)) -> ExhalesCarbonDioxide(x,y))", "all x y z.((Animal(x) & CarbonDioxide(y) & Air(z)) -> ExhalesFromLungsIntoAir(x,y,z))", "all x.((Animal(x) & ExhalesCarbonDioxide(x)) -> BreathesOut(x))", "all x y z.((Animal(x) & CarbonDioxide(y) & Air(z) & ExhalesFromLungs(x,y,z)) -> BreathesOut(x))", "all x.(BreathingOut(x) -> (AnimalsExhaleCarbonDioxide(x) & FromLungsIntoAir(x)))", "all x y z.((Animal(x) & CarbonDioxide(y) & Air(z) & ExhalesFromLungs(x,y,z)) -> BreathesOut(x,y,z))", "all x y.((Animal(x) & Air(y) & ExhalesCarbonDioxide(x,y)) -> BreathesOut(x,y))", "all x y z.((Animal(x) & CarbonDioxide(y) & Air(z)) -> ExhalesFromLungsInto(x,y,z))", "all x.((Animal(x) & ExhalesCarbonDioxide(x) & FromLungsIntoAir(x)) -> BreathesOut(x))", "all x y.((Animal(x) & Air(y) & ExhalesCarbonDioxide(x,y)) -> BreathesOut(x))", "all x.(BreathingOut(x) -> ExhalesCarbonDioxide(x))", "all x y z.((Animal(x) & CarbonDioxide(y) & Air(z) & ExhalesFromLungs(x,y)) -> BreathesOut(x,y,z))", "all x y.((Animal(x) & Air(y)) -> ExhalesCarbonDioxideFromLungs(x,y))", "all x y z.((Animal(x) & CarbonDioxide(y) & Air(z) & Exhales(x,y,z)) -> BreathesOut(x))"]}
{"id": "entailmentbank_validation_538", "nl": "animals are a source of carbon dioxide by breathing.", "fol": "", "prediction": ["all x.(Animal(x) -> SourceOfCarbonDioxideByBreathing(x))", "all x.(Animal(x) -> SourceOfCarbonDioxide(x))", "all x y.((Animal(x) & Breathing(y)) -> SourceOfCarbonDioxide(x,y))", "all x.(Animal(x) -> (SourceOfCarbonDioxide(x) & Breathes(x)))", "all x y.((Animal(x) & CarbonDioxide(y)) -> SourceByBreathing(x,y))", "all x.((Animal(x) & SourceOfCarbonDioxide(x) & Breathes(x)) -> SourceOfCarbonDioxide(x))", "all x.(Animal(x) -> SourceOfCO2ByBreathing(x))", "all x.(Animal(x) -> SourceOfCarbonDioxideByBreathing(x))", "all x y z.((Animal(x) & CarbonDioxide(y) & Breathing(z)) -> Source(x,y,z))", "all x y.((Animal(x) & CarbonDioxide(y)) -> Source(x,y))", "all x.(Animal(x) -> SourceOfCharbonDioxideByBreathing(x))", "all x y.((Animal(x) & CarbonDioxide(y) & Breathes(x)) -> Source(x,y))", "all x.((Animal(x) & SourceOfCarbonDioxideByBreathing(x)) -> SourceOfCarbonDioxideByBreathing(x))", "all x.((Animal(x) & SourceOfCarbonDioxide(x)) -> Breathes(x))", "all x.(Animal(x) -> CarbonDioxideSourceByBreathing(x))", "all x y.((Animal(x) & CarbonDioxide(y) & Breathes(x,y)) -> Source(x,y))"]}
{"id": "entailmentbank_validation_539", "nl": "a source of something produces that something.", "fol": "", "prediction": ["all x y.((Source(x) & Something(y)) -> Produces(x,y))", "all x y.((Source(x) & Source(y)) -> Produces(x,y))", "all x y.((SourceOf(x,y) & Something(y)) -> Produces(x,y))", "all x y z.((Source(x) & Something(y) & Source(z)) -> Produces(x,y,z))", "all x.((SourceOf(x,y) & Something(y)) -> Produces(x,y))", "all x.(SourceOf(x,y) -> Produces(x,y))", "all x.((Source(x) & Something(x)) -> Produces(x,y))", "all x.((SourceOf(x) & Something(x)) -> Produces(x,y))", "all x y.((Source(x) & Something(y) & Produces(x,y)) -> SourceOf(x,y))", "all x y z.((Source(x) & Something(y) & Source(z)) -> Produces(x,y))", "all x y.((Source(x,y) & Something(y)) -> Produces(x,y))", "all x y.((Source(x) & SourceOf(x,y)) -> Produces(x,y))", "all x y z.((Source(x) & Something(y) & Source(z) & Produces(x,y,z)) -> Produces(x,y,z))", "all x y z.((SourceOf(x,y) & Something(z)) -> Produces(x,z))", "all x y z.((Source(x) & Something(y) & Source(z) & Produces(x,y,z)) -> Produces(x,y))", "all x y.((Source(x) & Something(y) & Produces(x,y)) -> Source(x,y))"]}
{"id": "entailmentbank_validation_540", "nl": "animals produce carbon dioxide by breathing.", "fol": "", "prediction": ["all x.(Animal(x) -> ProducesCarbonDioxideByBreathing(x))", "all x.(Animal(x) -> (ProducesCarbonDioxide(x) & Breathes(x)))", "all x y.((Animal(x) & CarbonDioxide(y)) -> ProducesByBreathing(x,y))", "all x.(Animal(x) -> (ProducesCarbonDioxideByBreathing(x)))", "all x.(Animal(x) -> ProducesCarbonDioxide(x))", "all x.((Animal(x) & Breathes(x)) -> ProducesCarbonDioxide(x))", "all x y z.((Animal(x) & CarbonDioxide(y) & Breathing(z)) -> ProducesBy(x,y,z))", "all x.(Animal(x) -> exists y.(Breathing(y) & ProducesCarbonDioxide(x,y)))", "all x.(Animal(x) -> ProduceCarbonDioxideByBreathing(x))", "all x y.((Animal(x) & CarbonDioxide(y)) -> ProduceByBreathing(x,y))", "all x.((Animal(x) & Breathe(x)) -> ProducesCarbonDioxide(x))", "all x y z.((Animal(x) & CarbonDioxide(y) & Breathing(z)) -> Produces(x,y,z))", "all x y.((Animal(x) & CarbonDioxide(y) & Breathes(x)) -> ProducesBy(x,y))", "all x.(Animal(x) -> exists y.(CarbonDioxide(y) & ProducesByBreathing(x,y)))", "all x y.((Animal(x) & CarbonDioxide(y) & Breathes(x,y)) -> ProducesBy(x,y))", "all x y.((Animal(x) & CarbonDioxide(y) & Breathes(x)) -> Produces(x,y))"]}
{"id": "entailmentbank_validation_541", "nl": "animals produce carbon dioxide by using energy.", "fol": "", "prediction": ["all x.(Animal(x) -> ProducesCarbonDioxideByEnergy(x))", "all x.(Animal(x) -> (ProducesCarbonDioxide(x) & UsesEnergy(x)))", "all x.(Animal(x) -> ProducesCarbonDioxide(x))", "all x.((Animal(x) & UsesEnergy(x)) -> ProducesCarbonDioxide(x))", "all x y.((Animal(x) & CarbonDioxide(y)) -> ProducesByEnergy(x,y))", "all x y.((Animal(x) & Energy(y)) -> ProducesCarbonDioxide(x,y))", "all x.(Animal(x) -> ProducesCarbonDioxideByUsingEnergy(x))", "all x y z.((Animal(x) & CarbonDioxide(y) & Energy(z)) -> ProducesBy(x,y,z))", "all x.(Animal(x) -> (ProducesCarbonDioxide(x) & UtilizesEnergy(x)))", "all x.((Animal(x) & ProducesCarbonDioxide(x)) -> UsesEnergy(x))", "all x y.((Animal(x) & CarbonDioxide(y)) -> Produces(x,y))", "all x y.((Animal(x) & CarbonDioxide(y) & UsesEnergy(x)) -> Produces(x,y))", "all x.(Animal(x) -> ProducesCarbonDioxideByUsingEnergy(x))", "all x.((Animal(x) & ProducesCarbonDioxide(x) & UsesEnergy(x)) -> UsesEnergy(x))", "all x y.((Animal(x) & CarbonDioxide(y) & UsesEnergy(x,y)) -> Produces(x,y))", "all x.((Animal(x) & ProducesCarbonDioxide(x) & UsesEnergy(x)) -> ProducesCarbonDioxide(x))"]}
{"id": "entailmentbank_validation_542", "nl": "carbohydrates are used for storing energy.", "fol": "", "prediction": ["all x.(Carbohydrate(x) -> UsedForStoringEnergy(x))", "all x.(Carbohydrate(x) -> StoresEnergy(x))", "all x y.((Carbohydrate(x) & Energy(y)) -> UsedFor(x,y))", "all x y.((Carbohydrate(x) & Energy(y)) -> UsedForStoring(x,y))", "all x y z.((Carbohydrate(x) & Energy(y) & Energy(z)) -> UsedFor(x,y,z))", "all x.(Carbohydrate(x) -> UsedForStoreingEnergy(x))", "all x y.((Carbohydrate(x) & Energy(y)) -> Stores(x,y))", "all x.(Carbohydrate(x) -> UsedForStoredEnergy(x))", "all x y.((Carbohydrate(x) & Carbohydrate(y)) -> UsedForStoringEnergy(x,y))", "all x y z.((Carbohydrate(x) & Energy(y) & Energy(z)) -> UsedForStoring(x,y,z))", "all x y z.((Carbohydrate(x) & Energy(y) & Energy(z)) -> Stores(x,y,z))", "all x.(Carbohydrate(x) -> UsedFor(x,Energy))", "all x.(Carbohydrate(x) -> StoredForEnergy(x))", "all x y.((Carbohydrate(x) & Energy(y)) -> StoredFor(x,y))", "all x.(Carbohydrate(x) -> UsedForEnergy(x))", "all x y.((Carbohydrate(x) & Carbohydrate(y)) -> StoresEnergy(x,y))"]}
{"id": "entailmentbank_validation_543", "nl": "photosynthesis makes energy for the plant by converting carbon dioxide, water, and sunlight into carbohydrates.", "fol": "", "prediction": ["all x.(Photosynthesis(x) -> (MakesEnergyForPlant(x) & ConvertsCarbonDioxideWaterSunlightToCarbohydrates(x)))", "all x y z.((Photosynthesis(x) & Plant(y) & CarbonDioxide(z) & Water(z) & Sunlight(z)) -> MakesEnergy(x,y,z))", "all x y z.((Photosynthesis(x) & Plant(y) & CarbonDioxide(z) & Water(z) & Sunlight(z)) -> ConvertsToCarbohydrates(x,y,z))", "all x y z.((Photosynthesis(x) & Plant(y) & CarbonDioxide(z) & Water(z) & Sunlight(z)) -> MakesEnergyForPlant(x,y,z))", "all x y.((Photosynthesis(x) & Plant(y)) -> (ConvertsCarbonDioxide(x,y) & ConvertsWater(x,y) & ConvertsSunlight(x,y)))", "all x.(Photosynthesis(x) -> (MakesEnergyForPlant(x) & ConvertsCarbonDioxideWaterSunlight(x)))", "all x y.((Photosynthesis(x) & Plant(y)) -> (ConvertsCarbonDioxideWaterSunlight(x,y) & ProducesCarbohydrates(x,y)))", "all x y z.((Photosynthesis(x) & Plant(y) & CarbonDioxide(z) & Water(z) & Sunlight(z)) -> ProducesEnergy(x,y,z))", "all x y.((Photosynthesis(x) & Plant(y)) -> (ConvertsCarbonDioxideWaterSunlightToCarbohydrates(x,y)))", "all x y z.((Photosynthesis(x) & Plant(y) & CarbonDioxide(z) & Water(z) & Sunlight(z)) -> MakesEnergyFor(x,y,z))", "all x.(Photosynthesis(x) -> (MakesEnergy(x) & ConvertsCarbonDioxideWaterSunlightToCarbohydrates(x)))", "all x.(Photosynthesis(x) -> (MakesEnergyForPlant(x) & ConvertsCarbonDioxideWaterSunlightIntoCarbohydrates(x)))", "all x y z.((Photosynthesis(x) & Plant(y) & CarbonDioxide(z) & Water(z) & Sunlight(z)) -> ConvertsIntoCarbohydrates(x,y,z))", "all x y z.((Photosynthesis(x) & Plant(y) & CarbonDioxide(z) & Water(z)) -> ConvertsToCarbohydrates(x,y,z))", "all x y.((Photosynthesis(x) & Plant(y)) -> (MakesEnergy(x,y) & ConvertsCarbonDioxideWaterSunlightToCarbohydrates(x)))", "all x y.((Photosynthesis(x) & Plant(y) & CarbonDioxide(x) & Water(x) & Sunlight(x)) -> MakesEnergy(x,y))"]}
{"id": "entailmentbank_validation_544", "nl": "photosynthesis stores energy.", "fol": "", "prediction": ["all x.(Photosynthesis(x) -> StoresEnergy(x))", "all x y.((Photosynthesis(x) & Energy(y)) -> Stores(x,y))", "all x.(PhotosynthesisStoresEnergy(x) -> StoresEnergy(x))", "all x.(PhotosynthesisStoresEnergy(x) -> PhotosynthesisStoresEnergy(x))", "all x y z.((Photosynthesis(x) & Energy(y) & Energy(z)) -> Stores(x,y,z))", "all x.(PhotosynthesisStoresEnergy(x) -> Photosynthesis(x))", "all x y.((Photosynthesis(x) & EnergyStore(y)) -> Stores(x,y))", "all x y z.((Photosynthesis(x) & Energy(y) & Energy(z) & Stores(x,y,z)) -> Stores(x,y,z))", "all x y z.((Photosynthesis(x) & Energy(y) & Energy(z)) -> Stores(x,y))", "all x.(PhotosynthesisStoresEnergy(x) -> -PhotosynthesisStoresEnergy(x))", "all x.(PhotosynthesisStoresEnergy(x) -> Photosynthetic(x))", "all x y z.((Photosynthesis(x) & Energy(y) & Energy(z) & Stores(x,y,z)) -> Stores(x,y))", "all x y z.((Photosynthesis(x) & Energy(y) & Energy(z) & Stores(x,y)) -> Stores(x,z))", "all x y z.((Photosynthesis(x) & Energy(y) & Energy(z)) -> Store(x,y,z))", "all x y.((Photosynthesis(x) & EnergyStore(y)) -> Store(x,y))", "all x y.((Photosynthesis(x) & Energy(y)) -> Store(x,y))"]}
{"id": "entailmentbank_validation_545", "nl": "if something is required to use something else then that something is a source of that something else.", "fol": "", "prediction": ["all x y.((RequiredToUse(x,y) & Other(y)) -> SourceOf(x,y))", "all x.((RequiredToUse(x) & SourceOf(x,y)) -> SourceOf(x,y))", "all x y.((RequiredToUse(x,y) & SomethingOther(y)) -> SourceOf(x,y))", "all x y.((RequiredToUse(x,y) & RequiredToUse(x,y)) -> SourceOf(x,y))", "all x y.((RequiredToUse(x,y) & Uses(x,y)) -> SourceOf(x,y))", "all x y.((RequiredToUse(x,y) & SourceOf(x,y)) -> SourceOf(x,y))", "all x y.((RequiredToUse(x,y) & UsedToUse(x,y)) -> SourceOf(x,y))", "all x y.((RequiredToUse(x,y) & Something(y)) -> SourceOf(x,y))", "all x y.((RequiredToUse(x,y) & Use(y)) -> SourceOf(x,y))", "all x y.((RequiredToUse(x,y) & Something(x)) -> SourceOf(x,y))", "all x y.((RequiredToUse(x,y) & Something(y)) -> SourceOf(y,x))", "all x.((RequiredToUse(x) & SourceOf(x,y)) -> SourceOf(y,z))", "all x.((RequiredToUse(x) & Uses(x)) -> SourceOf(x,y))", "all x y.((RequiredToUse(x,y) & Uses(y)) -> SourceOf(x,y))", "all x.((RequiredToUse(x) & SomethingOther(x)) -> SourceOf(x,y))", "all x y.((RequiredToUse(x,y) & Something(y)) -> SourceOf(y,z))"]}
{"id": "entailmentbank_validation_546", "nl": "respiration is a source of energy for living things.", "fol": "", "prediction": ["all x.(Respiration(x) -> SourceOfEnergyForLivingThings(x))", "all x y.((Respiration(x) & LivingThing(y)) -> SourceOfEnergy(x,y))", "all x.(Respiration(x) -> SourceOfEnergy(x))", "all x y.((Respiration(x) & LivingThing(y)) -> SourceOfEnergyFor(x,y))", "all x y z.((Respiration(x) & LivingThing(y) & EnergySource(z)) -> SourceOf(x,y,z))", "all x.(Respiration(x) -> (SourceOfEnergy(x) & ForLivingThings(x)))", "all x.(Respiration(x) -> exists y.(LivingThing(y) & SourceOfEnergy(x,y)))", "all x y.((Respiration(x) & LivingThing(y)) -> SourceOfEnergy(x))", "all x y z.((Respiration(x) & LivingThing(y) & EnergySource(z)) -> Respiration(x,y,z))", "all x.(Respiration(x) -> (SourceOfEnergyForLivingThings(x)))", "all x.((Respiration(x) & LivingThing(x)) -> SourceOfEnergy(x))", "all x.(Respiration(x) -> EnergySourceForLivingThings(x))", "all x.(Respiration(x) -> SourceOfEnergy(x,livingThings))", "all x.(Rapiration(x) -> SourceOfEnergyForLivingThings(x))", "all x.(Respiration(x) -> SourceOfEnergyForLivingThings(x))", "all x.((Respiration(x) & SourceOfEnergy(x)) -> LivingThing(x))"]}
{"id": "entailmentbank_validation_547", "nl": "if something releases something else then that something is the source of that something else.", "fol": "", "prediction": ["all x y.((Releases(x,y) & Something(y)) -> SourceOf(x,y))", "all x y.((Releases(x,y) & Releases(x,y)) -> SourceOf(x,y))", "all x y.((Releases(x,y) & SomethingOther(y)) -> SourceOf(x,y))", "all x y.((Releases(x,y) & Something(y)) -> SourceOf(y,x))", "all x y.((Releases(x,y) & Something(x)) -> SourceOf(x,y))", "all x.((Releases(x) & Releases(x)) -> SourceOf(x,y))", "all x y.((Releases(x,y) & Releases(y,x)) -> SourceOf(x,y))", "all x.((Releases(x,y) & Releases(x,y)) -> SourceOf(x,y))", "all x y z.((Releases(x,y) & Something(z)) -> SourceOf(x,z))", "all x.((Releases(x) & SomethingOther(x)) -> SourceOf(x,y))", "all x y.((Release(x,y) & Something(y)) -> SourceOf(x,y))", "all x y.((Releases(x,y) & Releases(y)) -> SourceOf(x,y))", "all x y.((Releases(x,y) & SomethingOther(x)) -> SourceOf(x,y))", "all x y.((Release(x) & Release(y)) -> SourceOf(x,y))", "all x.(Releases(x,y) -> SourceOf(x,y))", "all x y.((Release(x,y) & Release(y)) -> SourceOf(x,y))"]}
{"id": "entailmentbank_validation_548", "nl": "respiration releases energy.", "fol": "", "prediction": ["all x.(Respiration(x) -> ReleasesEnergy(x))", "all x y.((Respiration(x) & Energy(y)) -> Releases(x,y))", "all x.((Respiration(x) & ReleasesEnergy(x)) -> ReleasesEnergy(x))", "all x y z.((Respiration(x) & Energy(y) & Energy(z)) -> Releases(x,y,z))", "all x.(Rapiration(x) -> ReleasesEnergy(x))", "all x y.((Respiration(x) & Energy(y)) -> Release(x,y))", "all x.(Respiration(x) -> ReleasesEnergy(x))", "all x y z.((Respiration(x) & Energy(y) & Energy(z)) -> Releases(x,y))", "all x y.((Respiration(x) & Respiration(y)) -> ReleasesEnergy(x,y))", "all x y.((Rapiration(x) & Energy(y)) -> Releases(x,y))", "all x.(Respiration(x) -> ReleasesEnergy(x))", "all x.((Respiration(x) & ReleasesEnergy(x)) -> Respiration(x))", "all x y z.((Respiration(x) & Energy(y) & Energy(z)) -> Release(x,y,z))", "all x y z.((Respiration(x) & Energy(y) & Respiration(z)) -> Releases(x,y,z))", "all x y.((Respiration(x) & Energy(y)) -> Releases(x,y))", "all x.(Rainfall(x) -> ReleasesEnergy(x))"]}
{"id": "entailmentbank_validation_549", "nl": "photosynthesis stores energy and respiration releases energy.", "fol": "", "prediction": ["all x y.((Photosynthesis(x) & Respiration(y)) -> (StoresEnergy(x) & ReleasesEnergy(y)))", "(all x.(Photosynthesis(x) -> StoresEnergy(x)) & all y.(Respiration(y) -> ReleasesEnergy(y)))", "all x y.((Photosynthesis(x) & Respiration(y)) -> (StoresEnergy(x) & ReleasesEnergy(y)))", "all x y.((Photosynthesis(x) & respiration(y)) -> (StoresEnergy(x) & ReleasesEnergy(y)))", "(all x.(Photosynthesis(x) -> StoresEnergy(x)) & (Respiration(x) -> ReleasesEnergy(x)))", "all x.((Photosynthesis(x) & Respiration(x)) -> (StoresEnergy(x) & ReleasesEnergy(x)))", "all x y z.((Photosynthesis(x) & Respiration(y) & Energy(z)) -> (Stores(x,z) & Releases(y,z)))", "(all x y.((Photosynthesis(x) & Energy(y)) -> Stores(x,y)) & ((Respiration(x) & Energy(y)) -> Releases(x,y)))", "all x.((Photosynthesis(x) -> StoresEnergy(x)) & (Respiration(x) -> ReleasesEnergy(x)))", "all x.(Photosynthesis(x) -> StoresEnergy(x)) & (Respiration(x) -> ReleasesEnergy(x)))", "all x y z.((Photosynthesis(x) & Respiration(y) & Energy(z)) -> (Stores(x,y) & Releases(y,z)))", "all x y.((Photosynthesis(x) & Rationation(y)) -> (StoresEnergy(x) & ReleasesEnergy(y)))", "all x.((Photosynthesis(x) & Respiration(x)) -> (StoresEnergy(x) & ReleasesEnergy(x)))", "all x y z.((Photosynthesis(x) & Respiration(y) & Energy(z)) -> (StoresEnergy(x) & ReleasesEnergy(y,z)))", "all x y.((Photosynthesis(x) & Respiration(y)) -> (StoresEnergy(x,y) & ReleasesEnergy(y,x)))", "all x y z.((Photosynthesis(x) & Respiration(y) & Energy(z)) -> (Stores(x,z) & Releases(y,z)))"]}
{"id": "entailmentbank_validation_550", "nl": "digestion is when stomach acid breaks down food.", "fol": "", "prediction": ["all x y.((StomachAcid(x) & Food(y)) -> BreaksDown(x,y))", "all x.((StomachAcid(x) & BreaksDownFood(x)) -> Digestive(x))", "all x.(Digestion(x) -> BreaksDownFood(x))", "all x.(Digestion(x) -> BreaksDownFood(x))", "all x.((StomachAcid(x) & BreaksDownFood(x)) -> Digestion(x))", "all x.(Digestion(x) -> (StomachAcidBreaksDownFood(x)))", "all x y z.((StomachAcid(x) & Food(y) & Food(z)) -> BreaksDown(x,y,z))", "all x y.((StomachAcid(x) & Food(y) & BreaksDown(x,y)) -> Digestive(x))", "all x y z.((StomachAcid(x) & Food(y) & Food(z) & BreaksDown(x,y,z)) -> Digestive(x))", "all x.(Digestion(x) -> (StomachAcid(x) & BreaksDownFood(x)))", "all x y.((StomachAcid(x) & Food(y) & BreaksDown(x,y)) -> Digestion(x))", "all x y z.((StomachAcid(x) & Food(y) & Food(z) & BreaksDown(x,y,z)) -> Digestion(x))", "all x.(Digestration(x) -> BreaksDownFood(x))", "all x.(Digestion(x) -> (StomachAcidBreaksDownFood(x)))", "all x.(StomachAcidBreaksDownFood(x) -> Digestive(x))", "all x y z.((StomachAcid(x) & Food(y) & Food(z) & BreaksDown(x,y)) -> Digestive(x))"]}
{"id": "entailmentbank_validation_551", "nl": "the digestive system digests food for the body.", "fol": "", "prediction": ["all x y z.((DigestiveSystem(x) & Food(y) & Body(z)) -> DigestsFor(x,y,z))", "all x y.((DigestiveSystem(x) & Body(y)) -> DigestsFood(x,y))", "all x y.((DigestiveSystem(x) & Body(y)) -> DigestsFoodFor(x,y))", "all x y.((DigestiveSystem(x) & Food(y)) -> DigestsForBody(x,y))", "all x y z.((DigestiveSystem(x) & Food(y) & Body(z)) -> Digests(x,y,z))", "all x.(DigestiveSystem(x) -> DigestsFoodForBody(x))", "all x y.((DigestiveSystem(x) & Food(y)) -> DigestsFor(x,y))", "all x y z.((DigestiveSystem(x) & Food(y) & Body(z) & DigestsFor(x,y,z)) -> DigestsFor(x,y,z))", "all x y.((DigestiveSystem(x) & Body(y)) -> DigestsFoodForBody(x,y))", "all x y.((DigestiveSystem(x) & Food(y)) -> Digests(x,y))", "all x y.((DigestiveSystem(x) & Body(y)) -> DigestsFor(x,y))", "all x y z.((DigestiveSystem(x) & Food(y) & Body(z)) -> DigestsForBody(x,y,z))", "all x y z.((DigestiveSystem(x) & Food(y) & Body(z) & Digests(x,y,z)) -> DigestsFor(x,y,z))", "all x y z.((DigestiveSystem(x) & Food(y) & Body(z) & Digests(x,y,z)) -> Digests(x,y,z))", "all x.(DigestiveSystem(x) -> DigestsFood(x))", "all x y z.((DigestiveSystem(x) & Body(y) & Food(z)) -> DigestsFor(x,y,z))"]}
{"id": "entailmentbank_validation_552", "nl": "the digestive system breaks down food.", "fol": "", "prediction": ["all x.(DigestiveSystem(x) -> BreaksDownFood(x))", "all x y.((DigestiveSystem(x) & Food(y)) -> BreaksDown(x,y))", "all x y z.((DigestiveSystem(x) & Food(y) & Food(z)) -> BreaksDown(x,y,z))", "all x.((DigestiveSystem(x) & BreaksDownFood(x)) -> BreaksDownFood(x))", "all x y.((DigestiveSystem(x) & Food(y) & BreaksDown(x,y)) -> BreaksDown(x,y))", "all x y z.((DigestiveSystem(x) & Food(y) & Food(z) & BreaksDown(x,y,z)) -> BreaksDown(x,y,z))", "all x y z.((DigestiveSystem(x) & Food(y) & DigestiveSystem(z)) -> BreaksDown(x,y,z))", "all x y z.((DigestiveSystem(x) & Food(y) & Food(z) & BreaksDown(x,y,z)) -> BreaksDown(x,y))", "all x y z.((DigestiveSystem(x) & Food(y) & Food(z)) -> BreaksDown(x,y))", "all x y.((GastralSystem(x) & Food(y)) -> BreaksDown(x,y))", "all x y z.((DigestiveSystem(x) & Food(y) & Food(z) & BreaksDown(x,y)) -> BreaksDown(x,z))", "all x.(BreaksDownFood(x) -> DigestiveSystem(x))", "all x.(DigestiveSystemBreaksDownFood(x) -> BreaksDownFood(x))", "all x y z.((DigestiveSystem(x) & Food(y) & Food(z) & BreaksDown(x,y,z)) -> BreaksDown(x))", "all x y z.((DigestiveSystem(x) & Food(y) & Food(z) & BreaksDown(x,y)) -> BreaksDown(x,y,z))", "all x y z.((DigestiveSystem(x) & Food(y) & DigestiveSystem(z) & BreaksDown(x,y,z)) -> BreaksDown(x,y))"]}
{"id": "entailmentbank_validation_553", "nl": "if something is made of something else then that something can be broken down into that something else.", "fol": "", "prediction": ["all x y.((MadeOf(x,y) & MadeOf(x,y)) -> BrokenDownInto(x,y))", "all x.((MadeOf(x,y) & MadeOf(x,y)) -> BrokenDownInto(x,y))", "all x y.((MadeOf(x,y) & MadeOf(x,y)) -> CanBeBreakdownInto(x,y))", "all x y.((MadeOf(x,y) & MadeOf(x,y)) -> BreaksDownInto(x,y))", "all x y.((MadeOf(x,y) & MadeOf(x,y)) -> CanBeBrokenDownInto(x,y))", "all x y.((MadeOf(x,y) & MadeOf(y,x)) -> BrokenDownInto(x,y))", "all x y.((MadeOf(x,y) & MadeOf(x,y)) -> CanBreakDownInto(x,y))", "all x y.((MadeOf(x,y) & MakesOf(x,y)) -> BrokenDownInto(x,y))", "all x y.((MadeOf(x,y) & MadeOf(x,y)) -> BreakableInto(x,y))", "all x y.((MadeOf(x,y) & MadeOf(y)) -> BrokenDownInto(x,y))", "all x y.((MadeOf(x,y) & MakesOf(x,y)) -> BreaksDownInto(x,y))", "all x.((MadeOf(x,y) & MadeOf(x,y)) -> CanBeBreakdownInto(x,y))", "all x.((MadeOf(x,y) & MadeOf(y)) -> BrokenDownInto(x,y))", "all x y.((MadeOf(x,y) & MadeOf(y,x)) -> CanBeBreakdownInto(x,y))", "all x y.((MadeOf(x,y) & MakesOf(x,y)) -> CanBeBreakdownInto(x,y))", "all x.((MadeOf(x,y) & MadeOf(y,z)) -> BrokenDownInto(x,z))"]}
{"id": "entailmentbank_validation_554", "nl": "if something is made of something else then that something contains that something else.", "fol": "", "prediction": ["all x y.((MadeOf(x,y) & MadeOf(x,y)) -> Contains(x,y))", "all x.((MadeOf(x,y) & MadeOf(x,y)) -> Contains(x,y))", "all x y.((MadeOf(x,y) & MadeOf(y,x)) -> Contains(x,y))", "all x y.((MadeOf(x,y) & MakesOf(x,y)) -> Contains(x,y))", "all x y.((MadeOf(x,y) & MadeOf(y)) -> Contains(x,y))", "all x.((MadeOf(x,y) & MadeOf(y)) -> Contains(x,y))", "all x.((MadeOf(x,y) & MakesOf(x,y)) -> Contains(x,y))", "all x.((MadeOf(x,y) & MadeOf(y,x)) -> Contains(x,y))", "all x y.((MadeOf(x,y) & Other(y)) -> Contains(x,y))", "all x y.((MadeOf(x,y) & MakingOf(x,y)) -> Contains(x,y))", "all x.((MadeOf(x,y) & MadeOf(y,z)) -> Contains(x,z))", "all x.((MadeOf(x,y) & Other(y)) -> Contains(x,y))", "all x.((MadeOf(x,y) & MadeOf(x,z)) -> Contains(x,z))", "all x y.((MadeOf(x,y) & MadeOf(x,y)) -> Contains(y,z))", "all x.((MadeOf(x,y) & MadeOf(x,z)) -> Contains(x,y))", "all x y z.((MadeOf(x,y) & MadeOf(y,z)) -> Contains(x,z))"]}
{"id": "entailmentbank_validation_555", "nl": "if something contains something else then that something can be broken down into that something else.", "fol": "", "prediction": ["all x y.((Content(x) & Contains(x,y)) -> CanBeBreakdownInto(x,y))", "all x y.((Content(x) & Contains(x,y)) -> BrokenDownInto(x,y))", "all x y.((Content(x) & Contains(x,y)) -> CanBeBrokenDownInto(x,y))", "all x y.((Content(x) & Contains(x,y)) -> BreaksDownInto(x,y))", "all x y.((Content(x) & Contains(x,y)) -> CanBeBreakdown(x,y))", "all x y.((Content(x) & Contains(x,y)) -> CanBreakDownInto(x,y))", "all x y.((Contains(x,y) & Contains(x,y)) -> BrokenDownInto(x,y))", "all x y.((Content(x) & Contains(x,y)) -> BreakableInto(x,y))", "all x y.((Contains(x,y) & Contains(x,y)) -> CanBeBreakdownInto(x,y))", "all x y.((Content(x,y) & Contains(x,y)) -> CanBeBreakdownInto(x,y))", "all x y.((Contains(x,y) & Contains(x,y)) -> CanBeBrokenDownInto(x,y))", "all x y.((Information(x) & Contains(x,y)) -> CanBeBreakdownInto(x,y))", "all x y.((Information(x) & Contains(x,y)) -> BrokenDownInto(x,y))", "all x y.(((Content(x) & Contains(x,y)) -> BrokenDownInto(x,y))", "all x y.((Contains(x,y) & Contains(x,y)) -> CanBeBreakdown(x,y))", "all x y.(((Content(x) & Contains(x,y)) -> CanBeBreakdownInto(x,y))"]}
{"id": "entailmentbank_validation_556", "nl": "the digestive system breaks down food into the substances it contains.", "fol": "", "prediction": ["all x y.((DigestiveSystem(x) & Food(y)) -> BreaksDownIntoSubstances(x,y))", "all x y z.((DigestiveSystem(x) & Food(y) & Substance(z)) -> BreaksDownInto(x,y,z))", "all x y.((DigestiveSystem(x) & Food(y) & Contains(x,y)) -> BreaksDownIntoSubstances(x,y))", "all x y z.((DigestiveSystem(x) & Food(y) & Substance(z) & BreaksDownInto(x,y,z)) -> Contains(x,y,z))", "all x y.((DigestiveSystem(x) & Substance(y)) -> BreaksDownInto(x,y))", "all x y z.((DigestiveSystem(x) & Food(y) & Substances(z)) -> BreaksDownInto(x,y,z))", "all x y z.((DigestiveSystem(x) & Food(y) & Substance(z)) -> BreaksDown(x,y,z))", "all x y z.((DigestiveSystem(x) & Food(y) & Substance(z) & BreaksDownInto(x,y,z)) -> Contains(x,y))", "all x y z.((GastralSystem(x) & Food(y) & Substance(z)) -> BreaksDownInto(x,y,z))", "all x y z.((DigestiveSystem(x) & Food(y) & Substance(z) & BreaksDown(x,y,z)) -> Contains(x,y,z))", "all x y z.((DigestiveSystem(x) & Substance(y) & Food(z)) -> BreaksDownInto(x,y,z))", "all x y.((DigestiveSystem(x) & Food(y)) -> BreaksIntoSubstances(x,y))", "all x y.((DigestiveSystem(x) & FoodSubstance(y)) -> BreaksDownInto(x,y))", "all x y z.((DigestiveSystem(x) & Food(y) & Substance(z) & BreaksDown(x,y,z)) -> Contains(x,y))", "all x y z.((DigestiveSystem(x) & Food(y) & Substance(z)) -> BreaksDownTo(x,y,z))", "all x.(DigestiveSystem(x) -> BreaksDownIntoSubstances(x))"]}
{"id": "entailmentbank_validation_557", "nl": "food contains nutrients for living things.", "fol": "", "prediction": ["all x.(Food(x) -> ContainsNutrientsForLivingThings(x))", "all x y.((Food(x) & LivingThing(y)) -> ContainsNutrients(x,y))", "all x.(Food(x) -> ContainsNutrients(x))", "all x.(Food(x) -> ContainsNutrientsForLiving(x))", "all x.(Food(x) -> (ContainsNutrients(x) & ForLivingThings(x)))", "all x y.((Food(x) & LivingThing(y)) -> ContainsNutrientsFor(x,y))", "all x.(Food(x) -> exists y.(LivingThing(y) & ContainsNutrients(x,y)))", "all x y z.((Food(x) & Nutrient(y) & LivingThing(z)) -> Contains(x,y,z))", "all x y z.((Food(x) & Nutrients(y) & LivingThing(z)) -> Contains(x,y,z))", "all x y z.((Food(x) & Nutrient(y) & LivingThing(z)) -> ContainsFor(x,y,z))", "all x y z.((Food(x) & Nutrients(y) & LivingThing(z)) -> ContainsFor(x,y,z))", "all x.(Food(x) -> (ContainsNutrientsForLivingThings(x)))", "all x.(Food(x) -> ContainsNutrients(x,livingThings))", "all x y z.((Food(x) & LivingThing(y) & Nutrients(z)) -> Contains(x,y,z))", "all x y z.((Food(x) & LivingThing(y) & Nutrients(z)) -> ContainsFor(x,y,z))", "all x.(Food(x) -> ContainsNutrientsForLivingTrees(x))"]}
{"id": "entailmentbank_validation_558", "nl": "the digestive system breaks down food into nutrients for the body.", "fol": "", "prediction": ["all x y z.((DigestiveSystem(x) & Food(y) & Body(z)) -> BreaksDownIntoNutrients(x,y,z))", "all x y.((DigestiveSystem(x) & Food(y)) -> BreaksDownIntoNutrients(x,y))", "all x y.((DigestiveSystem(x) & Body(y)) -> BreaksDownFoodIntoNutrients(x,y))", "all x y z.((DigestiveSystem(x) & Food(y) & Nutrients(z)) -> BreaksDownInto(x,y,z))", "all x y z.((DigestiveSystem(x) & Food(y) & Nutrients(z)) -> BreaksDownForBody(x,y,z))", "all x y.((DigestiveSystem(x) & Food(y)) -> BreaksDownIntoNutrientsForBody(x,y))", "all x y z.((DigestiveSystem(x) & Food(y) & Body(z)) -> BreaksDownToNutrients(x,y,z))", "all x y.((DigestiveSystem(x) & Body(y)) -> BreaksDownIntoNutrients(x,y))", "all x.(DigestiveSystem(x) -> BreaksDownFoodIntoNutrients(x))", "all x y.((DigestiveSystem(x) & Food(y)) -> BreaksDownToNutrients(x,y))", "all x y z.((DigestiveSystem(x) & Food(y) & Body(z)) -> BreaksIntoNutrients(x,y,z))", "all x y z.((DigestiveSystem(x) & Food(y) & Nutrients(z)) -> BreaksDownIntoForBody(x,y,z))", "all x y z.((DigestiveSystem(x) & Food(y) & Nutrient(z)) -> BreaksDownInto(x,y,z))", "all x y z.((GastralSystem(x) & Food(y) & Body(z)) -> BreaksDownIntoNutrients(x,y,z))", "all x y z.((DigestiveSystem(x) & Food(y) & Nutrients(z)) -> BreaksDown(x,y,z))", "all x y z.((DigestiveSystem(x) & Food(y) & Nutrition(z)) -> BreaksDownInto(x,y,z))"]}
{"id": "entailmentbank_validation_559", "nl": "scales are a covering around the body of a scaled animal.", "fol": "", "prediction": ["all x y.((Scales(x) & ScaledAnimal(y)) -> CoveringAroundBody(x,y))", "all x y z.((Scales(x) & ScaledAnimal(y) & Body(z)) -> CoversAround(x,y,z))", "all x y z.((Scales(x) & ScaledAnimal(y) & Body(z)) -> CoveringAround(x,y,z))", "all x y.((Scales(x) & ScaledAnimal(y)) -> CoversAroundBody(x,y))", "all x y z.((Scales(x) & ScaledAnimal(y) & Body(z)) -> Covering(x,y,z))", "all x y.((Scales(x) & ScaledAnimal(y)) -> CoversBody(x,y))", "all x y.((Scales(x) & ScaledAnimal(y)) -> CoveringAboveBody(x,y))", "all x y.((Scales(x) & ScaledAnimal(y)) -> CoversAboutBody(x,y))", "all x y z.((Scales(x) & ScaledAnimal(y) & Body(z)) -> Covers(x,y,z))", "all x y.((Scales(x) & ScaledAnimal(y)) -> CoversAboveBody(x,y))", "all x y.((Scales(x) & ScaledAnimal(y)) -> CoveringAround(x,y))", "all x y.((Scales(x) & ScaledAnimal(y)) -> CoversAbout(x,y))", "all x y.((Scales(x) & ScaledAnimal(y)) -> CoveringAboutBody(x,y))", "all x y.((Scales(x) & ScaledAnimal(y)) -> Covering(x,y))", "all x y.((Scales(x) & ScaledAnimal(y)) -> CoversAround(x,y))", "all x y z.((Scales(x) & ScalpedAnimal(y) & Body(z)) -> CoversAround(x,y,z))"]}
{"id": "entailmentbank_validation_560", "nl": "a fish is a kind of scaled animal.", "fol": "", "prediction": ["all x.(Fish(x) -> ScaledAnimal(x))", "all x.(Fish(x) -> ScalpedAnimal(x))", "all x y.((Fish(x) & ScaledAnimal(y)) -> ScaledAnimal(x))", "all x.(Fish(x) -> ScaledAnimal(x))", "all x.((Fish(x) & ScaledAnimal(x)) -> ScaledAnimal(x))", "all x y.((Fish(x) & ScalpedAnimal(y)) -> ScaledAnimal(x))", "all x y.((Fish(x) & ScaledAnimal(y)) -> ScaledAnimal(x,y))", "all x.((Fish(x) & ScalpedAnimal(x)) -> ScaledAnimal(x))", "all x y.((Fish(x) & ScaledAnimal(x)) -> ScaledAnimal(y))", "all x.(Fish(x) -> ScaledAnimal(x))", "all x.(Fish(x) -> ScalpedAnimal(x))", "all x y.((Fish(x) & ScaledAnimal(y)) -> ScalpedAnimal(x))", "all x.(Fish(x) -> ScallopedAnimal(x))", "all x y.((Fish(x) & ScaledAnimal(x)) -> ScaledAnimal(x))", "all x.exists y.(Fish(x) & ScaledAnimal(y) & ScaledAnimal(x))", "all x.((Fish(x) & ScaledAnimal(x)) -> ScalpedAnimal(x))"]}
{"id": "entailmentbank_validation_561", "nl": "fish is a kind of scaled animal with scales covering around the body.", "fol": "", "prediction": ["all x.(Fish(x) -> (Scales(x) & Scales(x) & CoversBody(x)))", "all x.(Fish(x) -> (Scales(x) & HasScales(x) & CoversBody(x)))", "all x.(Fish(x) -> (Scales(x) & CoversBody(x)))", "all x.(Fish(x) -> (Scales(x) & ScalesCoveringBody(x)))", "all x.(Fish(x) -> (Scales(x) & ScalesCovering(x)))", "all x.(Fish(x) -> (ScaledAnimal(x) & ScalesCoveringAroundBody(x)))", "all x.(Fish(x) -> (ScaledAnimal(x) & HasScales(x) & CoversBody(x)))", "all x.(Fish(x) -> (ScaledAnimal(x) & ScalesCoveredAroundBody(x)))", "all x.(Fish(x) -> (Scales(x) & Scales(x) & CoverBody(x)))", "all x.(Fish(x) -> (Scales(x) & ScalesCoverBody(x)))", "all x.(Fish(x) -> (Scales(x) & ScalesCoveredAroundBody(x)))", "all x.(Fish(x) -> (Scales(x) & Scales(x) & CoversBody(x)))", "all x.(Fish(x) -> (Scales(x) & ScalesCover(x)))", "all x.(Fish(x) -> (Scales(x) & Scales(x) & CoversAroundBody(x)))", "all x.(Fish(x) -> (ScaledAnimal(x) & ScalesCover(x)))", "all x.(Fish(x) -> (Scales(x) & Scales(x) & CoveringBody(x)))"]}
{"id": "entailmentbank_validation_562", "nl": "scales are used for protection by scaled animals.", "fol": "", "prediction": ["all x y.((Scales(x) & ScaledAnimal(y)) -> UsedForProtection(x,y))", "all x y z.((Scales(x) & ScaledAnimal(y) & ScaledAnimal(z)) -> UsedForProtection(x,y,z))", "all x.(Scales(x) -> UsedForProtection(x))", "all x y z.((Scales(x) & Scale(y) & ScaledAnimal(z)) -> UsedForProtection(x,y,z))", "all x.(Scales(x) -> UsedForProtectionByScaledAnimals(x))", "all x.(Scales(x) -> UsedForProtection(x,scaledAnimals))", "all x y.((Scales(x) & ScalpedAnimal(y)) -> UsedForProtection(x,y))", "all x.(Scales(x) -> UsedForProtectionByScales(x))", "all x y.((Scale(x) & ScaledAnimal(y)) -> UsedForProtection(x,y))", "all x y.((Scales(x) & Scale(y)) -> UsedForProtection(x,y))", "all x.(Scales(x) -> UsedForProtectionByScalpedAnimals(x))", "all x y.((Scales(x) & ScaledAnimal(y)) -> UsedForProtectionBy(x,y))", "all x y z.((Scales(x) & ScaledAnimal(y) & ScaledAnimal(z)) -> UsedForProtection(x,y))", "all x y z.((Scales(x) & ScaledAnimal(y) & Scale(z)) -> UsedForProtection(x,y,z))", "all x y z.((Scales(x) & ScaledAnimal(y) & ScaledAnimal(z)) -> UsesForProtection(x,y,z))", "all x y.((Scales(x) & Scale(y)) -> UsedForProtectionBy(x,y))"]}
{"id": "entailmentbank_validation_563", "nl": "scales are used for protection by fish.", "fol": "", "prediction": ["all x y.((Scales(x) & Fish(y)) -> UsedForProtection(x,y))", "all x.(Scales(x) -> UsedForProtectionByFish(x))", "all x.(Scales(x) -> UsedForProtection(x))", "all x.(Scales(x) -> UsedForProtection(x,fish))", "all x y z.((Scales(x) & Fish(y) & Fish(z)) -> UsedForProtection(x,y,z))", "all x y.((Scale(x) & Fish(y)) -> UsedForProtection(x,y))", "all x y z.((Scales(x) & Fish(y) & Scale(z)) -> UsedForProtection(x,y,z))", "all x.(Scales(x) -> UsedForProtection(x,Fish))", "all x y.((Scales(x) & Fish(y) & UsedForProtection(x,y)) -> UsedForProtection(x,y))", "all x.(Scale(x) -> UsedForProtectionByFish(x))", "all x y.((Scales(x) & Fisher(y)) -> UsedForProtection(x,y))", "all x y.((Scales(x) & Fish(y)) -> UsesForProtection(x,y))", "all x y z.((Scales(x) & Fish(y) & Scales(z)) -> UsedForProtection(x,y,z))", "all x y z.((Scales(x) & Fish(y) & Fish(z)) -> UsesForProtection(x,y,z))", "all x.(Scale(x) -> UsedForProtection(x))", "all x y z.((Scales(x) & Fish(y) & Scale(z)) -> UsedForProtection(x,y))"]}
{"id": "entailmentbank_validation_564", "nl": "a human is a kind of animal.", "fol": "", "prediction": ["all x.(Human(x) -> Animal(x))", "all x y.((Human(x) & Animal(y)) -> Animal(x))", "all x.(Human(x) -> Animal(x))", "exists x.(Human(x) & Animal(x))", "all x y.((Human(x) & Animal(y)) -> Animal(x,y))", "all x y z.((Human(x) & Animal(y) & Animal(z)) -> Animal(x))", "all x y z.((Human(x) & Animal(y) & Animal(z)) -> Animal(x,y,z))", "all x y.((Human(x) & Animal(y)) -> KindOf(x,y))", "all x y.((Human(x) & Animal(y)) -> (Animal(x) & Animal(y)))", "all x.exists y.(Human(x) & Animal(y) & LivesIn(x,y))", "all x.exists y.(Human(x) & Animal(y) & Animal(x))", "all x y.((Human(x) & Animal(y)) -> Is(x,y))", "all x y z.((Human(x) & Animal(y) & Animal(z)) -> Animal(x,y))", "all x.(Habitat(x) -> Animal(x))", "all x.exists y.(Human(x) & Animal(y) & Animal(x) & Animal(y))", "all x y.((Human(x) & Animal(y)) -> SortOf(x,y))"]}
{"id": "entailmentbank_validation_565", "nl": "an animal is a kind of living thing.", "fol": "", "prediction": ["all x.(Animal(x) -> LivingThing(x))", "all x.(Animal(x) -> LivesThing(x))", "all x y.((Animal(x) & LivingThing(y)) -> LivingThing(x))", "all x.(Animal(x) -> LivingThing(x))", "all x.((Animal(x) & LivingThing(x)) -> LivingThing(x))", "all x.(Animal(x) -> LivedThing(x))", "all x y.((Animal(x) & LivingThing(y)) -> LivesIn(x,y))", "all x.(Animal(x) -> LivingDing(x))", "all x.exists y.(Animal(x) & LivingThing(y) & LivesIn(x,y))", "all x y.((Animal(x) & LivingThing(x)) -> LivingThing(x))", "all x y.((Animal(x) & LivingThing(y)) -> LivingThing(x,y))", "all x y.((Animal(x) & LivingThing(x)) -> LivingThing(y))", "exists x.(Animal(x) & LivingThing(x))", "all x.exists y.(Animal(x) & LivingThing(y) & LivingThing(x))", "all x.exists y.(Animal(x) & LivingThing(y))", "all x.exists y.(Animal(x) & LivingThing(y) & LivingThing(x,y))"]}
{"id": "entailmentbank_validation_566", "nl": "a human is a kind of living thing.", "fol": "", "prediction": ["all x.(Human(x) -> LivingThing(x))", "all x.(Human(x) -> LivesThing(x))", "all x.(Human(x) -> LivingThing(x))", "all x y.((Human(x) & LivingThing(y)) -> LivingThing(x))", "all x y.((Human(x) & LivingThing(y)) -> LivesIn(x,y))", "exists x.(Human(x) & LivingThing(x))", "all x y.((Human(x) & LivingThing(y)) -> LivingThing(x,y))", "all x.(Human(x) -> exists y.(LivingThing(y) & LivesIn(x,y)))", "all x.(Human(x) -> exists y.(LivingThing(y) & LivingThing(x)))", "all x.(Human(x) -> LivedThing(x))", "all x.(Human(x) -> LivingDing(x))", "all x.(Human(x) -> exists y.(LivingThing(y) & LivingThing(x,y)))", "all x y.((Human(x) & LivingThing(x)) -> LivingThing(y))", "all x.(Human(x) -> exists y.(LivingThing(y) & LivingThing(y)))", "all x.(Human(x) -> LivesThing(x))", "all x y.((Human(x) & LivingThing(x)) -> LivingThing(x))"]}
{"id": "entailmentbank_validation_567", "nl": "a plant is a kind of living thing.", "fol": "", "prediction": ["all x.(Plant(x) -> LivingThing(x))", "all x y.((Plant(x) & LivingThing(y)) -> LivingThing(x))", "all x.((Plant(x) & LivingThing(x)) -> LivingThing(x))", "all x.(Plant(x) -> LivingThing(x))", "all x.(Plant(x) -> LivesThing(x))", "exists x.(Plant(x) & LivingThing(x))", "all x y.((Plant(x) & LivingThing(y)) -> LivesIn(x,y))", "all x y.((Plant(x) & LivingThing(y)) -> LivingThing(x,y))", "all x y.((Plant(x) & Plant(y)) -> LivingThing(x))", "all x y.((Plant(x) & LivingThing(x)) -> LivingThing(y))", "all x.exists y.(Plant(x) & LivingThing(y) & LivesIn(x,y))", "all x.exists y.(Plant(x) & LivingThing(y) & LivingThing(x))", "all x y.((Plant(x) & LivingThing(x)) -> LivingThing(x))", "all x.(Plant(x) -> LivingDing(x))", "all x.exists y.(Plant(x) & LivingThing(y) & LivingThing(x,y))", "all x.(Plant(x) -> LivedThing(x))"]}
{"id": "entailmentbank_validation_568", "nl": "an apple tree is a kind of plant.", "fol": "", "prediction": ["all x.(AppleTree(x) -> Plant(x))", "all x y.((AppleTree(x) & Plant(y)) -> Plant(x))", "all x.(AppleTree(x) -> Plant(x))", "all x y z.((AppleTree(x) & Plant(y) & Plant(z)) -> Plant(x))", "all x y.((AppleTree(x) & Plant(y)) -> Plant(x,y))", "all x y.((AppleTree(x) & Plant(y)) -> SortOf(x,y))", "exists x.(AppleTree(x) & Plant(x))", "all x y z.((AppleTree(x) & Plant(y) & Plant(z)) -> Plant(x,y,z))", "all x.((AppleTree(x) & Plant(x)) -> Plant(x))", "all x.exists y.(AppleTree(x) & Plant(y) & GrowsIn(x,y))", "all x y.((AppleTree(x) & Plant(y)) -> Is(x,y))", "all x y.((AppleTree(x) & Plant(y)) -> Plant(y))", "all x y z.((AppleTree(x) & Plant(y) & Plant(z)) -> Plant(x,y))", "all x y.((AppleTree(x) & Plant(y)) -> TypeOf(x,y))", "all x.(AppleTree(x) -> (Plant(x) & Plant(x)))", "all x y.((AppleTree(x) & Plant(y)) -> KindOf(x,y))"]}
{"id": "entailmentbank_validation_569", "nl": "an apple tree is a kind of living thing.", "fol": "", "prediction": ["all x.(AppleTree(x) -> LivingThing(x))", "all x y.((AppleTree(x) & LivingThing(y)) -> LivingThing(x))", "all x.(AppleTree(x) -> LivingThing(x))", "all x.(AppleTree(x) -> LivesThing(x))", "all x y.((AppleTree(x) & LivingThing(y)) -> LivesIn(x,y))", "all x y.((AppleTree(x) & LivingThing(x)) -> LivingThing(x))", "all x.(AppleTree(x) -> LivedThing(x))", "all x y.((AppleTree(x) & LivingThing(x)) -> LivingThing(y))", "all x y.((AppleTree(x) & LivingThing(y)) -> LivingThing(x,y))", "exists x.(AppleTree(x) & LivingThing(x))", "all x.((AppleTree(x) & LivingThing(x)) -> LivingThing(x))", "all x.(AppleTree(x) -> LivingDing(x))", "all x y.((AppleTree(x) & LivingThing(y)) -> Is(x,y))", "all x y.((AppleTree(x) & LivingThing(y)) -> LivedThing(x))", "all x.exists y.(AppleTree(x) & LivingThing(y) & LivesIn(x,y))", "all x.(AppleTree(x) -> LivingTree(x))"]}
{"id": "entailmentbank_validation_570", "nl": "all living things are made of cells according to the cell theory.", "fol": "", "prediction": ["all x.(LivingThing(x) -> MadeOfCells(x))", "all x y.((LivingThing(x) & CellTheory(y)) -> MadeOfCells(x,y))", "all x.((LivingThing(x) & CellTheory(x)) -> MadeOfCells(x))", "all x.((LivingThing(x) & MadeOfCells(x)) -> CellTheory(x))", "all x y.((LivingThing(x) & CellTheory(y)) -> MadeOf(x,y))", "all x y.((LivingThing(x) & CellTheory(y)) -> MadeOfCells(x))", "all x y z.((LivingThing(x) & CellTheory(y) & CellTheory(z)) -> MadeOfCells(x,y,z))", "all x y z.((LivingThing(x) & CellTheory(y) & Cell(z)) -> MadeOfCells(x,y,z))", "all x.(LivingThing(x) -> (MadeOfCells(x) & CellTheory(x)))", "all x y z.((LivingThing(x) & CellTheory(y) & CellTheory(z)) -> MadeOf(x,y,z))", "all x.(LivingThing(x) -> MadeOfCellsAccordingToCellTheory(x))", "all x.(LivingThing(x) -> MakesOfCells(x))", "all x y z.((LivingThing(x) & CellTheory(y) & Cell(z)) -> MadeOf(x,y,z))", "all x y.((LivingThing(x) & CellTheory(y)) -> MakesOfCells(x,y))", "all x.(CellTheory(x) -> MadeOfCells(x))", "all x.((LivingThing(x) & MakesOfCells(x)) -> CellTheory(x))"]}
{"id": "entailmentbank_validation_571", "nl": "both the human and the apple tree are made of cells.", "fol": "", "prediction": ["all x.((Human(x) & AppleTree(x)) -> MadeOfCells(x))", "all x.((Human(x) | AppleTree(x)) -> MadeOfCells(x))", "all x y.((Human(x) & AppleTree(y)) -> MadeOfCells(x))", "all x y.((Human(x) & AppleTree(y)) -> (MadeOfCells(x) & MadeOfCells(y)))", "all x.((HumanTree(x) & AppleTree(x)) -> MadeOfCells(x))", "all x y.((Human(x) & AppleTree(y)) -> MadeOfCells(x,y))", "all x y.((Human(x) & AppleTree(y)) -> (MadeOfCells(x) | MadeOfCells(y)))", "all x y.((HumanTree(x) & AppleTree(y)) -> (MadeOfCells(x) & MadeOfCells(y)))", "(MadeOfCells(Human) & MadeOfCells(AppleTree))", "all x y.((HumanTree(x) & AppleTree(y)) -> MadeOfCells(x))", "all x y.((HumanTree(x) & AppleTree(y)) -> (MadeOfCells(x) | MadeOfCells(y)))", "all x y z.((Human(x) & AppleTree(y) & Cell(z)) -> (MadeOf(x,y) & MadeOf(y,z)))", "all x.(Human(x) & AppleTree(x) -> MadeOfCells(x))", "all x y z.((Human(x) & AppleTree(y) & Cell(z)) -> MadeOf(x,y,z))", "all x y.((HumanTree(x) & AppleTree(y)) -> MadeOfCells(x,y))", "all x.((Human(x) & Apple(x)) -> MadeOfCells(x))"]}
{"id": "entailmentbank_validation_572", "nl": "a plant cell is a kind of cell.", "fol": "", "prediction": ["all x.(PlantCell(x) -> Cell(x))", "all x.(PlantCell(x) -> Cell(x))", "all x y.((PlantCell(x) & Plant(y)) -> Cell(x))", "all x y.((PlantCell(x) & Cell(y)) -> Cell(x))", "all x.((PlantCell(x) & Cell(x)) -> Cell(x))", "all x y.((PlantCell(x) & Cell(y)) -> SortOf(x,y))", "all x.(PlantCell(x) -> SortOfCell(x))", "all x y.((PlantCell(x) & Cell(y)) -> Cell(x,y))", "all x y.((PlantCell(x) & PlantCell(y)) -> Cell(x))", "all x y.((PlantCell(x) & Plant(y)) -> Cell(x,y))", "all x y.((PlantCell(x) & Cell(y)) -> KindOf(x,y))", "all x y.((PlantCell(x) & Cell(y)) -> TypeOf(x,y))", "all x.(PlantCell(x) -> TypeOfCell(x))", "all x y.((PlantCell(x) & Cell(y)) -> Is(x,y))", "exists x.(PlantCell(x) & Cell(x))", "all x y.((PlantCell(x) & PlantCell(y)) -> Cell(x,y))"]}
{"id": "entailmentbank_validation_573", "nl": "a cell nucleus is a part of a cell.", "fol": "", "prediction": ["all x y.((CellNucleus(x) & Cell(y)) -> PartOf(x,y))", "all x.(CellNucleus(x) -> PartOfCell(x))", "all x y z.((CellNucleus(x) & Cell(y) & Cell(z)) -> PartOf(x,y,z))", "all x.((CellNucleus(x) & PartOfCell(x)) -> PartOfCell(x))", "all x y.((CellNucleus(x) & Cell(y)) -> PartOfCell(x,y))", "all x y.((CellNucleus(x) & Cell(y) & PartOf(x,y)) -> PartOf(x,y))", "all x y z.((CellNucleus(x) & Cell(y) & Cell(z) & PartOf(x,y,z)) -> PartOf(x,y,z))", "all x y z.((CellNucleus(x) & Cell(y) & Cell(z) & PartOf(x,y,z)) -> PartOf(x,y))", "all x.((CellNucleus(x) & Cell(y)) -> PartOf(x,y))", "all x y z.((CellNucleus(x) & Cell(y) & Cell(z) & PartOf(x,y)) -> PartOf(x,z))", "all x y z.((CellNucleus(x) & Cell(y) & PartOf(x,y)) -> PartOf(x,z))", "all x y z.((CellNucleus(x) & Cell(y) & PartOf(x,z)) -> PartOf(x,y))", "all x y z.((CellNucleus(x) & Cell(y) & Cell(z)) -> PartOf(x,y))", "all x.((CellNucleus(x) & Cell(x)) -> PartOf(x,cell))", "all x y z.((CellNucleus(x) & Cell(y) & Cell(z)) -> PartOfCell(x,y,z))", "all x y z.((CellNucleus(x) & Cell(y) & Cell(z) & PartOf(x,y)) -> PartOf(x,y,z))"]}
{"id": "entailmentbank_validation_574", "nl": "a cell nucleus is a part of a plant cell.", "fol": "", "prediction": ["all x y.((CellNucleus(x) & PlantCell(y)) -> PartOf(x,y))", "all x.(CellNucleus(x) -> PartOfPlantCell(x))", "all x y z.((CellNucleus(x) & PlantCell(y) & PlantCell(z)) -> PartOf(x,y,z))", "all x.((CellNucleus(x) & PlantCell(x)) -> PartOf(x,y))", "all x.((CellNucleus(x) & PlantCell(x)) -> PartOf(x,PlantCell))", "all x y z.((CellNucleus(x) & PlantCell(y) & PlantCell(z) & PartOf(x,y,z)) -> PartOf(x,y,z))", "all x y z.((CellNucleus(x) & PlantCell(y) & PartOf(x,y)) -> PartOf(x,z))", "all x y.((CellNucleus(x) & PlantCell(y) & PartOf(x,y)) -> PartOf(x,y))", "all x.((CellNucleus(x) & PartOfPlantCell(x)) -> PartOfPlantCell(x))", "all x y z.((CellNucleus(x) & PlantCell(y) & Cell(z)) -> PartOf(x,y,z))", "all x.((CellNucleus(x) & PlantCell(x)) -> PartOf(x,plantCell))", "all x y.((CellNucleus(x) & PlantCell(y)) -> PartOfCell(x,y))", "all x y z.((CellNucleus(x) & PlantCell(y) & PlantCell(z) & PartOf(x,y,z)) -> PartOf(x,y))", "all x.(CellNucleus(x) -> PartOfPlantCell(x))", "all x y z.((CellNucleus(x) & PlantCell(y) & PartOf(x,y)) -> PartOf(x,y))", "all x y z.((CellNucleus(x) & PlantCell(y) & PartOf(x,y,z)) -> PartOf(x,y))"]}
{"id": "entailmentbank_validation_575", "nl": "a cell wall is a part of a plant cell for supporting and protecting the cell membrane.", "fol": "", "prediction": ["all x.(CellWall(x) -> (PartOfPlantCell(x) & SupportsAndProtectsCellMembrane(x)))", "all x y.((CellWall(x) & PlantCell(y)) -> (PartOf(x,y) & SupportsAndProtectsCellMembrane(x)))", "all x.(CellWall(x) -> (PartOfPlantCell(x) & SupportsCellMembrane(x) & ProtectsCellMembrane(x)))", "all x y.((CellWall(x) & PlantCell(y)) -> SupportsAndProtectsCellMembrane(x,y))", "all x y.((CellWall(x) & PlantCell(y)) -> (PartOf(x,y) & SupportsAndProtectsCellMembrane(x,y)))", "all x.(CellWall(x) -> (PartOfPlantCell(x) & SupportsMembrane(x) & ProtectsMembrane(x)))", "all x y z.((CellWall(x) & PlantCell(y) & CellMembrane(z)) -> (PartOf(x,y) & SupportsAndProtects(x,z)))", "all x y.((CellWall(x) & PlantCell(y)) -> SupportsAndProtectsMembrane(x,y))", "all x y.((CellWall(x) & PlantCell(y)) -> (PartOf(x,y) & SupportsCellMembrane(x) & ProtectsCellMembrane(x)))", "all x y z.((CellWall(x) & PlantCell(y) & CellMembrane(z)) -> (PartOf(x,y,z) & SupportsAndProtects(x,y,z)))", "all x y.((CellWall(x) & PlantCell(y) & PartOf(x,y)) -> SupportsAndProtectsCellMembrane(x,y))", "all x y.((CellWall(x) & PlantCell(y)) -> (PartOf(x,y) & SupportsMembrane(x,y) & ProtectsMembrane(x,y)))", "all x y.((CellWall(x) & PlantCell(y)) -> (PartOf(x,y) & Supports(x,y) & Protects(x,y)))", "all x y.((CellWall(x) & PlantCell(y)) -> (PartOf(x,y) & SupportsMembrane(x) & ProtectsMembrane(x)))", "all x y z.((CellWall(x) & PlantCell(y) & PlantCell(z)) -> (PartOf(x,y,z) & SupportsAndProtectsCellMembrane(x)))", "all x y.((CellWall(x) & PlantCell(y)) -> (PartOf(x,y) & SupportsAndProtects(x,y)))"]}
{"id": "entailmentbank_validation_576", "nl": "chloroplast is a part of a plant cell.", "fol": "", "prediction": ["all x.(Chlorophyll(x) -> PartOfPlantCell(x))", "all x y.((Chlorophyll(x) & PlantCell(y)) -> PartOf(x,y))", "all x.(Chlorophyll(x) -> PlantCell(x))", "all x y z.((Chlorophyll(x) & PlantCell(y) & PlantCell(z)) -> PartOf(x,y,z))", "all x.(Chlorophyll(x) -> PartOfPlantCell(x))", "all x.(Clorophyll(x) -> PartOfPlantCell(x))", "all x y.((Clorophyll(x) & PlantCell(y)) -> PartOf(x,y))", "all x y z.((Chlorophyll(x) & PlantCell(y) & Plant(z)) -> PartOf(x,y,z))", "all x.(Chloroplast(x) -> PartOfPlantCell(x))", "all x.(Chlorophyll(x) -> PlantCell(x))", "all x y z.((Chlorophyll(x) & PlantCell(y) & Cell(z)) -> PartOf(x,y,z))", "all x y.((Chloroplast(x) & PlantCell(y)) -> PartOf(x,y))", "all x y z.((Chlorophyll(x) & PlantCell(y) & Chlorophyll(z)) -> PartOf(x,y,z))", "all x y z.((Chlorophyll(x) & PlantCell(y) & PartOf(x,y)) -> Chlorophyll(x))", "all x y.((Chlorophyll(x) & PlantCell(y) & PartOf(x,y)) -> PartOf(x,y))", "all x y z.((Chlorophyll(x) & PlantCell(y) & PartOf(x,y)) -> PartOf(x,z))"]}
{"id": "entailmentbank_validation_577", "nl": "a cell nucleus, chloroplast and a cell wall are part of a plant cell.", "fol": "", "prediction": ["all x.((CellNucleus(x) & Chlorophyll(x) & CellWall(x)) -> PlantCell(x))", "all x.((CellNucleus(x) | Chlorophyll(x) | CellWall(x)) -> PlantCell(x))", "all x y z.((CellNucleus(x) & Chlorophyll(y) & CellWall(z)) -> PartOfPlantCell(x))", "all x y z.((CellNucleus(x) & Chlorophyll(y) & CellWall(z)) -> (PartOfPlantCell(x) & PartOfPlantCell(x)))", "all x y z.((CellNucleus(x) & Chlorophyll(y) & CellWall(z)) -> (PartOfPlantCell(x) & PartOfPlantCell(y)))", "all x y z.((CellNucleus(x) & Chlorophyll(y) & CellWall(z)) -> PartOfPlantCell(x,y,z))", "all x y.((CellNucleus(x) & Chlorophyll(y) & CellWall(y)) -> PlantCell(x))", "all x y z.((CellNucleus(x) & Chlorophyll(y) & CellWall(z)) -> (PartOfPlantCell(x,y) & PartOfPlantCell(x,z)))", "all x y z.((CellNucleus(x) & Chlorophyll(y) & CellWall(z)) -> PlantCell(x))", "all x y.((CellNucleus(x) & Chlorophyll(y) & CellWall(y)) -> PartOfPlantCell(x))", "all x y z.((CellNucleus(x) & Chlorophyll(y) & CellWall(z)) -> (PartOfPlantCell(x) & PartOfPlantCell(y,z)))", "all x y z.((CellNucleus(x) & Chlorophyll(y) & CellWall(z)) -> (PartOfPlantCell(x,y,z) & PartOfPlantCell(x)))", "all x y z.((CellNucleus(x) & Chlorophyll(y) & CellWall(z)) -> (PartOfPlantCell(x) | PartOfPlantCell(y)))", "all x y z.((CellNucleus(x) & Chlorophyll(y) & CellWall(z)) -> (PartOfPlantCell(x) | PartOfPlantCell(x)))", "all x y z.((CellNucleus(x) & Chlorophyll(y) & CellWall(z)) -> (PartOf(x,y) & PartOf(x,z)))", "all x y z.((CellNucleus(x) & Chlorophyll(y) & CellWall(z)) -> (PartOfPlantCell(x,y) & PartOfPlantCell(x)))"]}
{"id": "entailmentbank_validation_578", "nl": "a computer room is used to control the assembly process in a factory.", "fol": "", "prediction": ["all x y.((ComputerRoom(x) & Factory(y)) -> ControlsAssemblyProcess(x,y))", "all x y.((ComputerRoom(x) & Factory(y)) -> ControlsAssemblyProcessIn(x,y))", "all x y z.((ComputerRoom(x) & Factory(y) & AssemblyProcess(z)) -> UsedToControl(x,y,z))", "all x y.((ComputerRoom(x) & Factory(y)) -> UsedToControlAssemblyProcess(x,y))", "all x y z.((ComputerRoom(x) & Factory(y) & AssemblyProcess(z)) -> ControlsIn(x,y,z))", "all x y z.((ComputerRoom(x) & Factory(y) & AssemblyProcess(z)) -> ControlledIn(x,y,z))", "all x y.((ComputerRoom(x) & Factory(y)) -> UsedToControlAssemblyProcessIn(x,y))", "all x y z.((ComputerRoom(x) & Factory(y) & AssemblyProcess(z)) -> Controls(x,y,z))", "all x y z.((ComputerRoom(x) & Factory(y) & AssemblyProcess(z)) -> UsedToControlIn(x,y,z))", "all x y.((ComputerRoom(x) & Factory(y)) -> ControlsAssembly(x,y))", "all x y z.((ComputerRoom(x) & Factory(y) & Factory(z)) -> ControlsAssemblyProcess(x,y,z))", "all x y.((ComputerRoom(x) & Factory(y)) -> UsedToControlAssembly(x,y))", "all x y z.((ComputerRoom(x) & Factory(y) & AssemblingProcess(z)) -> UsedToControl(x,y,z))", "all x y z.((ComputerRoom(x) & AssemblyProcess(y) & Factory(z)) -> UsedToControl(x,y,z))", "all x y.((ComputerRoom(x) & Factory(y) & UsedToControlAssemblyProcess(x,y)) -> UsedIn(x,y))", "all x y z.((ComputerRoom(x) & AssemblyProcess(y) & Factory(z)) -> ControlsIn(x,y,z))"]}
{"id": "entailmentbank_validation_579", "nl": "the cell nucleus controls many of the functions of the cell.", "fol": "", "prediction": ["all x y.((CellNucleus(x) & Cell(y)) -> ControlsFunctions(x,y))", "all x y z.((CellNucleus(x) & Cell(y) & Function(z)) -> Controls(x,y,z))", "all x.(CellNucleus(x) -> ControlsFunctionsOfCell(x))", "all x.(CellNucleus(x) -> ControlsFunctions(x))", "all x.((CellNucleus(x) & Cell(y)) -> ControlsFunctions(x,y))", "all x y z.((CellNucleus(x) & Cell(y) & Cell(z)) -> ControlsFunctions(x,y,z))", "all x y z.((CellNucleus(x) & Cell(y) & Function(z) & Controls(x,y,z)) -> Controls(x,y,z))", "all x y.((CellNucleus(x) & Cell(y) & ControlsFunctions(x,y)) -> ControlsFunctions(x,y))", "all x y.((CellNucleus(x) & Cell(y)) -> ControlsFunction(x,y))", "all x y.((CellNucleus(x) & Cell(y)) -> Controls(x,y))", "all x y z.((CellNucleus(x) & Function(y) & Cell(z)) -> Controls(x,y,z))", "all x y.((CellNucleus(x) & Cell(y)) -> ControlsFunctionsOf(x,y))", "all x y z.((CellNucleus(x) & Cell(y) & Functions(z)) -> Controls(x,y,z))", "all x y z.((CellNucleus(x) & Cell(y) & Function(z) & Controls(x,y,z)) -> Controls(x,y))", "all x y z.((CellNucleus(x) & Cell(y) & Function(z)) -> Controls(x,y))", "all x y z.((CellNucleus(x) & Cell(y) & Function(z)) -> ControlsFunctions(x,y,z))"]}
{"id": "entailmentbank_validation_580", "nl": "controlling is a kind of function.", "fol": "", "prediction": ["all x.(Controlling(x) -> Function(x))", "all x.(Controlling(x) -> Function(x))", "all x y.((Controlling(x) & Function(y)) -> Function(x,y))", "all x.(Controlling(x) -> Functional(x))", "all x.(Controlling(x) -> FunctionalFunction(x))", "all x.(Controlling(x) -> SortOfFunction(x))", "all x.(Controlling(x) -> FormOfFunction(x))", "all x.(Controlling(x) -> Function(x))", "all x y.((Controlling(x) & Function(y)) -> Function(x))", "all x.(Controlling(x) -> (Function(x) & Function(x)))", "all x y.((Controlling(x) & Function(y)) -> SortOf(x,y))", "all x y.((Controlling(x) & Function(y)) -> FormOf(x,y))", "all x y.((Controlling(x) & Function(y)) -> IsFunction(x,y))", "all x y.((Controlling(x) & Function(y)) -> Is(x,y))", "all x.(Controlling(x) -> IsFunction(x))", "all x.(Controlling(x) -> TypeOfFunction(x))"]}
{"id": "entailmentbank_validation_581", "nl": "a computer room in a factory has a similar function to the cell nucleus in controlling the functions.", "fol": "", "prediction": ["all x y.((ComputerRoom(x) & Factory(y) & InFactory(x,y)) -> SimilarFunctionToCellNucleus(x,y))", "all x y.((ComputerRoom(x) & Factory(y) & InFactory(x,y)) -> SimilarFunctionToCellNucleus(x))", "all x y z.((ComputerRoom(x) & Factory(y) & CellNucleus(z)) -> SimilarFunction(x,y,z))", "all x y.((ComputerRoom(x) & Factory(y)) -> SimilarFunctionToCellNucleus(x,y))", "all x y.((ComputerRoom(x) & Factory(y) & InFactory(x,y)) -> SimilarFunction(x,y))", "all x y.((ComputerRoom(x) & Factory(y) & ControlsFunctions(x,y)) -> SimilarFunctionToCellNucleus(x,y))", "all x y.((ComputerRoom(x) & Factory(y) & InFabric(x,y)) -> SimilarFunctionToCellNucleus(x,y))", "all x y.((ComputerRoom(x) & Factory(y) & InFabric(x,y)) -> SimilarFunctionToCellNucleus(x))", "all x y.((ComputerRoom(x) & Factory(y) & ControlsFunctions(x,y)) -> SimilarFunctionToCellNucleus(x))", "all x y z.((ComputerRoom(x) & Factory(y) & CellNucleus(z) & ControlsFunctions(x,z)) -> SimilarFunction(x,y,z))", "all x y z.((ComputerRoom(x) & Factory(y) & CellNucleus(z)) -> SimilarFunction(x,z))", "all x y z.((ComputerRoom(x) & Factory(y) & CellNucleus(z) & ControlsFunctions(x,z)) -> SimilarFunctionTo(x,y,z))", "all x y z.((ComputerRoom(x) & Factory(y) & CellNucleus(z) & ControlsFunctions(x,y,z)) -> SimilarFunctionTo(x,z))", "all x y.((ComputerRoom(x) & Factory(y) & InFactory(x,y)) -> SimilarFunctionToCellNucleusInControllingFunctions(x,y))", "all x y.((ComputerRoom(x) & Factory(y) & InFabric(x,y)) -> SimilarFunction(x,y))", "all x y z.((ComputerRoom(x) & Factory(y) & CellNucleus(z) & ControlsFunctions(x,z)) -> SimilarFunctionTo(x,z))"]}
{"id": "entailmentbank_validation_582", "nl": "if something does not contain something else, then that something else cannot be found in that something.", "fol": "", "prediction": ["all x.((DoesNotContain(x) & -Contain(x)) -> -CanBeFoundIn(x))", "all x.((DoesNotContain(x) & -Contain(x)) -> -CanBeFoundIn(x,y))", "all x y.((DoesNotContain(x,y) & Contains(x,y)) -> -CanBeFoundIn(x,y))", "all x.((DoesNotContain(x) & -Contains(x)) -> -CanBeFoundIn(x))", "all x y.((DoesNotContain(x,y) & SomethingOther(y)) -> -CanBeFoundIn(x,y))", "all x y.((DoesNotContain(x,y) & -Contains(x,y)) -> -CanBeFoundIn(x,y))", "all x.((DoesNotContain(x) & -Contains(x)) -> -CanBeFoundIn(x,y))", "all x.((DoesNotContainSomething(x) & -ContainSomething(x)) -> -CanBeFoundIn(x,y))", "all x y.((DoesNotContain(x,y) & Contains(y,x)) -> -CanBeFoundIn(x,y))", "all x.((DoesNotContain(x) & -Contain(x)) -> -CanBeFindedIn(x))", "all x.((DoesNotContain(x) & -Contain(x)) -> -Contain(x))", "all x.((DoesNotContain(x) & -Contain(x)) -> -CanBeFound(x))", "all x.((DoesNotContainSomething(x) & -ContainSomething(x)) -> -CanBeFoundIn(x))", "all x.((Property(x) & -Contains(x,y)) -> -CanBeFoundIn(x,y))", "all x.((DoesNotContainSomething(x) & -ContainsSomething(x)) -> -CanBeFoundIn(x,y))", "all x y.((DoesNotContain(x,y) & Contains(y,x)) -> -CanBeFoundIn(y,x))"]}
{"id": "entailmentbank_validation_583", "nl": "a prokaryotic cell does not contain a nucleus.", "fol": "", "prediction": ["all x.(ProkaryoticCell(x) -> -ContainsNucleus(x))", "all x.(ProkaryoticCell(x) -> -ContainNucleus(x))", "all x.((ProkaryoticCell(x) & -ContainsNucleus(x)) -> -ContainsNucleus(x))", "all x.((Cell(x) & Prokaryotic(x)) -> -ContainsNucleus(x))", "all x y.((ProkaryoticCell(x) & Nucleus(y)) -> -Contains(x,y))", "all x.(ProkaryoticCell(x) -> -HasNucleus(x))", "all x.((ProkaryoticCell(x) & -ContainNucleus(x)) -> -ContainNucleus(x))", "all x.((ProkaryoticCell(x) & -ContainNucleus(x)) -> -ContainsNucleus(x))", "all x.((Cell(x) & Prokaryotic(x)) -> -ContainNucleus(x))", "all x y.((ProkaryoticCell(x) & Nucleus(y)) -> -Contain(x,y))", "all x.((Cell(x) & Prokaryotic(x)) -> -HasNucleus(x))", "all x.(ProkaryoticCell(x) -> -ContainsNucleus(x))", "all x.(ProkaryoticCell(x) -> -ContentsNucleus(x))", "all x.((ProkaryoticCell(x) & -ContainsNucleus(x)) -> -ContainNucleus(x))", "all x.(ProkaryoticCell(x) -> -IncludesNucleus(x))", "all x.(ProkaryoticCell(x) -> -Nucleus(x))"]}
{"id": "entailmentbank_validation_584", "nl": "a nucleus cannot be found in prokaryotic cells.", "fol": "", "prediction": ["all x y.((Nucleus(x) & ProkaryoticCell(y)) -> -FoundIn(x,y))", "all x.(Nucleus(x) -> -FoundInProkaryoticCells(x))", "all x y.((Nucleus(x) & ProkaryoticCell(y)) -> -FindsIn(x,y))", "all x.(Nucleus(x) -> -exists y.(ProkaryoticCell(y) & FoundIn(x,y)))", "all x y.((Nucleus(x) & ProkaryoticCell(y)) -> -CanBeFoundIn(x,y))", "all x y.((Nucleus(x) & ProkaryoticCell(y)) -> -FindableIn(x,y))", "all x y z.((Nucleus(x) & ProkaryoticCell(y) & ProkaryoticCell(z)) -> -FoundIn(x,y,z))", "all x.(Nucleus(x) -> -exists y.(ProkaryoticCell(y) & FoundIn(x,y))))", "all x y z.((Nucleus(x) & ProkaryoticCell(y) & ProkaryoticCell(z)) -> -FindsIn(x,y,z))", "all x.(Nucleus(x) -> -FindsInProkaryoticCells(x))", "all x y.((Nucleus(x) & ProkaryoticCell(y)) -> -exists z.(ProkaryoticCell(z) & FoundIn(x,z))))", "all x y z.((Nucleus(x) & ProkaryoticCell(y) & ProkaryoticCell(z)) -> -CanBeFoundIn(x,y,z))", "all x y.((Nucleus(x) & ProkaryoticCell(y)) -> -CanFoundIn(x,y))", "all x y.((Nucleus(x) & ProkaryoticCell(y)) -> -FindIn(x,y))", "all x.(Nucleus(x) -> -CanBeFoundInProkaryoticCells(x))", "all x y.((Nucleus(x) & ProkaryoticCell(y)) -> -CanBeFound(x,y))"]}
{"id": "entailmentbank_validation_585", "nl": "photosynthesis makes food for the plant.", "fol": "", "prediction": ["all x y.((Photosynthesis(x) & Plant(y)) -> MakesFood(x,y))", "all x y.((Photosynthesis(x) & Plant(y)) -> MakesFoodFor(x,y))", "all x.(Photosynthesis(x) -> MakesFoodForPlant(x))", "all x y z.((Photosynthesis(x) & Plant(y) & Food(z)) -> MakesFor(x,y,z))", "all x y z.((Photosynthesis(x) & Plant(y) & Food(z)) -> Makes(x,y,z))", "all x y z.((Photosynthesis(x) & Plant(y) & Plant(z)) -> MakesFoodFor(x,y,z))", "all x y z.((Photosynthesis(x) & Plant(y) & Plant(z)) -> MakesFood(x,y,z))", "all x y z.((Photosynthesis(x) & Plant(y) & Photosynthesis(z)) -> MakesFoodFor(x,y,z))", "all x.(Photosynthesis(x) -> MakesFood(x))", "all x y z.((Photosynthesis(x) & Plant(y) & Photosynthesis(z)) -> MakesFood(x,y,z))", "all x y.((Photosynthesis(x) & Plant(y) & MakesFood(x,y)) -> MakesFood(x,y))", "all x.(Photosynthesis(x) -> MakesFood(x,Plant))", "all x y z.((Photosynthesis(x) & Plant(y) & Food(z)) -> Makes(x,z))", "all x y z.((Photosynthesis(x) & Plant(y) & Flower(z)) -> MakesFoodFor(x,y,z))", "all x y.((Plant(x) & Photosynthesis(y)) -> MakesFood(y,x))", "all x y z.((Photosynthesis(x) & Plant(y) & Food(z)) -> Makes(x,y))"]}
{"id": "entailmentbank_validation_586", "nl": "a leaf performs photosynthesis / gas exchange.", "fol": "", "prediction": ["all x.(Leaf(x) -> PerformsPhotosynthesis(x))", "all x.(Leaf(x) -> (PerformsPhotosynthesis(x) | PerformsGasExchange(x)))", "all x.(Leaf(x) -> (PerformsPhotosynthesis(x) & PerformsGasExchange(x)))", "all x.(Leaf(x) -> (Photosynthesis(x) | GasExchange(x)))", "all x y.((Leaf(x) & Photosynthesis(y)) -> GasExchange(x,y))", "all x.(Leaf(x) -> PerformsPhotosynthesisAndGasExchange(x))", "all x.(Leaf(x) -> PerformsPhotosynthesis/GasExchange(x))", "all x.(Leaf(x) -> PerformsPhotosynthesis(x) & PerformsGasExchange(x))", "all x.((Leaf(x) & PerformsPhotosynthesis(x)) -> PerformsGasExchange(x))", "all x y.((Leaf(x) & Photosynthesis(y) & GasExchange(y)) -> Performs(x,y))", "all x.(Leaf(x) -> PerformsPhotosynthesisOrGasExchange(x))", "all x y z.((Leaf(x) & Photosynthesis(y) & GasExchange(z)) -> Performs(x,y,z))", "all x.((Leaf(x) & PerformsPhotosynthesis(x) & PerformsGasExchange(x)) -> PerformsPhotosynthesis(x))", "all x y.((Leaf(x) & Photosynthesis(y)) -> GasExchange(x))", "all x.((Leaf(x) & Photosynthesis(x) & GasExchange(x)) -> Performs(x,y))", "all x y.((Leaf(x) & Leaf(y)) -> PerformsPhotosynthesis(x,y))"]}
{"id": "entailmentbank_validation_587", "nl": "a leaf makes food for the plant by performing photosynthesis.", "fol": "", "prediction": ["all x y.((Leaf(x) & Plant(y) & PerformsPhotosynthesis(x,y)) -> MakesFoodFor(x,y))", "all x y.((Leaf(x) & Plant(y)) -> MakesFood(x,y))", "all x y z.((Leaf(x) & Plant(y) & Photosynthesis(z)) -> MakesFoodFor(x,y,z))", "all x y.((Leaf(x) & Plant(y) & PerformsPhotosynthesis(x,y)) -> MakesFood(x,y))", "all x y z.((Leaf(x) & Plant(y) & Photosynthesis(z)) -> MakesFood(x,y,z))", "all x y.((Leaf(x) & Plant(y) & PerformsPhotosynthesis(x)) -> MakesFoodFor(x,y))", "all x y.((Leaf(x) & Plant(y)) -> MakesFoodByPhotosynthesis(x,y))", "all x y.((Leaf(x) & Plant(y)) -> MakesFoodFor(x,y))", "all x y.((Leaf(x) & Plant(y) & PerformsPhotosynthesis(x,y)) -> MakesFoodForPlant(x,y))", "all x y.((Leaf(x) & Plant(y)) -> (MakesFood(x,y) & PerformsPhotosynthesis(x,y)))", "all x y.((Leaf(x) & Plant(y) & PerformsPhotosynthesis(x)) -> MakesFood(x,y))", "all x y.((Leaf(x) & Plant(y) & MakesFood(x,y)) -> PerformsPhotosynthesis(x,y))", "all x y.((Leaf(x) & Plant(y) & Photosynthesis(x,y)) -> MakesFoodFor(x,y))", "all x y z.((Leaf(x) & Plant(y) & Photosynthesis(z) & MakesFoodFor(x,y,z)) -> Photosynthesis(x,y,z))", "all x y z.((Leaf(x) & Plant(y) & Photosynthesis(z) & MakesFoodFor(x,y,z)) -> Photosynthesis(x,y))", "all x y.((Leaf(x) & Plant(y) & MakesFood(x,y)) -> PerformsPhotosynthesis(x))"]}
{"id": "entailmentbank_validation_588", "nl": "providing food is a kind of specific life process.", "fol": "", "prediction": ["all x.(ProvidesFood(x) -> LifeProcess(x))", "all x.(ProvidesFood(x) -> SpecificLifeProcess(x))", "all x y.((ProvidesFood(x) & LifeProcess(y)) -> Specific(x,y))", "all x.(FoodProvides(x) -> LifeProcess(x))", "all x.(ProvidingFood(x) -> LifeProcess(x))", "all x.(ProvideFood(x) -> LifeProcess(x))", "all x.(ProvidesFood(x) -> LifeProcess(x))", "all x y.((FoodProcess(x) & FoodProcess(y)) -> SpecificLifeProcess(x))", "all x y.((FoodProcess(x) & FoodProcess(y)) -> SpecificLifeProcess(x,y))", "all x.(FoodProduction(x) -> LifeProcess(x))", "all x.(ProvidingFood(x) -> LifeProcess(x))", "all x.(FoodProvidesLifeProcess(x) -> SpecificLifeProcess(x))", "all x.(FoodProvider(x) -> LifeProcess(x))", "all x y.((ProvidesFood(x) & LifeProcess(y)) -> SpecificProcess(x,y))", "all x.(FoodProduct(x) -> LifeProcess(x))", "all x y.((ProvidesFood(x) & LifeProcess(y)) -> Specific(x))"]}
{"id": "entailmentbank_validation_589", "nl": "a leaf performs a specific life process of making food for the plants.", "fol": "", "prediction": ["all x y.((Leaf(x) & Plant(y)) -> PerformsLifeProcess(x,y))", "all x y.((Leaf(x) & Plant(y)) -> PerformsLifeProcessOfMakingFood(x,y))", "all x y z.((Leaf(x) & LifeProcess(y) & Plant(z)) -> Performs(x,y,z))", "all x y z.((Leaf(x) & LifeProcess(y) & Plant(z)) -> Performs(x,y))", "all x y.((Leaf(x) & Plant(y)) -> PerformsSpecificLifeProcessOfMakingFood(x,y))", "all x y z.((Leaf(x) & LifeProcess(y) & Plant(z) & Performs(x,y)) -> MakesFoodFor(x,z))", "all x y.((Leaf(x) & Plant(y)) -> PerformsLifeProcessOfMakingFoodFor(x,y))", "all x y.((Leaf(x) & Plant(y)) -> PerformsLifeProcessOfFeeding(x,y))", "all x y.((Leaf(x) & Plant(y)) -> PerformsSpecificLifeProcess(x,y))", "all x y z.((Leaf(x) & LifeProcess(y) & Plant(z)) -> PerformsSpecificLifeProcessOfMakingFood(x,y,z))", "all x y.((Leaf(x) & Plant(y) & PerformsLifeProcess(x,y)) -> MakesFoodForPlants(x,y))", "all x y z.((Leaf(x) & LifeProcess(y) & Plant(z) & Performs(x,y)) -> MakesFood(x,z))", "all x y z.((Leaf(x) & LifeProcess(y) & Plant(z)) -> PerformsSpecificLifeProcess(x,y,z))", "all x y.((Leaf(x) & Plant(y)) -> PerformsLifeProcessOfMakesFood(x,y))", "all x y z.((Leaf(x) & LifeProcess(y) & Plant(z) & Performs(x,y,z)) -> MakesFoodFor(x,y,z))", "all x y z.((Leaf(x) & LifeProcess(y) & Plant(z)) -> PerformsProcessOfMakingFood(x,y,z))"]}
{"id": "entailmentbank_validation_590", "nl": "organs perform specific life process in organisms.", "fol": "", "prediction": ["all x y z.((Organ(x) & Organism(y) & LifeProcess(z)) -> PerformsIn(x,y,z))", "all x y.((Organ(x) & Organism(y)) -> PerformsLifeProcessIn(x,y))", "all x y.((Organ(x) & Organism(y)) -> PerformsLifeProcessInOrganism(x,y))", "all x y.((Organ(x) & Organism(y)) -> PerformsLifeProcess(x,y))", "all x y.((Organ(x) & Organism(y)) -> PerformsSpecificLifeProcess(x,y))", "all x y.((Organ(x) & Organism(y)) -> PerformsSpecificLifeProcessIn(x,y))", "all x y.((Organ(x) & Organism(y)) -> PerformsSpecificLifeProcessInOrganism(x,y))", "all x y z.((Organ(x) & Organism(y) & LifeProcess(z)) -> Performs(x,y,z))", "all x y z.((Organism(x) & Organism(y) & LifeProcess(z)) -> PerformsIn(x,y,z))", "all x y z.((Organ(x) & Organism(y) & LifeProcess(z) & PerformsIn(x,y,z)) -> PerformsIn(x,y,z))", "all x y z.((Organ(x) & Organism(y) & LifeProcess(z)) -> PerformIn(x,y,z))", "all x.(Organ(x) -> PerformsLifeProcessInOrganisms(x))", "all x y.((Organism(x) & Organism(y)) -> PerformsLifeProcessInOrganism(x,y))", "all x y z.((Organ(x) & Organism(y) & LifeProcess(z)) -> PerformsInOrganism(x,y,z))", "all x y.((Organ(x) & Organism(y) & PerformsLifeProcess(x,y)) -> PerformsLifeProcessInOrganism(x,y))", "all x.(Organ(x) -> PerformsSpecificLifeProcessInOrganisms(x))"]}
{"id": "entailmentbank_validation_591", "nl": "a leaf in a plant is performing like an organ in organisms.", "fol": "", "prediction": ["all x y z.((Leaf(x) & Plant(y) & Organism(z)) -> PerformsAsOrgan(x,y,z))", "all x y.((Leaf(x) & Plant(y) & InPlant(x,y)) -> PerformsAsOrgan(x,y))", "all x y.((Leaf(x) & Plant(y)) -> PerformsAsOrgan(x,y))", "all x y.((Leaf(x) & Plant(y) & InPlant(x,y)) -> PerformsAsOrganInOrganisms(x))", "all x y.((Leaf(x) & Plant(y)) -> PerformsAsOrganInOrganisms(x,y))", "all x y.((Leaf(x) & Plant(y) & InPlant(x,y)) -> PerformsAsOrganInOrganisms(x,y))", "all x y.((Leaf(x) & Plant(y) & InPlant(x,y)) -> PerformsLikeOrgan(x,y))", "all x y z.((Leaf(x) & Plant(y) & Organism(z) & InPlant(x,y,z)) -> PerformsAsOrgan(x,y,z))", "all x y z.((Leaf(x) & Plant(y) & Organism(z)) -> PerformsAsOrganInOrganism(x,y,z))", "all x y.((Leaf(x) & Plant(y) & InPlant(x,y)) -> PerformsAsOrganInOrganism(x,y))", "all x y.((Leaf(x) & Plant(y)) -> PerformsLikeOrgan(x,y))", "all x y z.((Leaf(x) & Plant(y) & Organism(z) & InPlant(x,y)) -> PerformsAsOrgan(x,z))", "all x y z.((Leaf(x) & Plant(y) & Organism(z)) -> PerformsLikeOrgan(x,y,z))", "all x y z.((Leaf(x) & Plant(y) & Organism(z)) -> PerformsLike(x,y,z))", "all x y.((LeafInPlant(x) & Organism(y)) -> PerformsAsOrgan(x,y))", "all x y z.((Leaf(x) & Plant(y) & Organism(z)) -> PerformsAsOrganIn(x,y,z))"]}
{"id": "entailmentbank_validation_592", "nl": "taking in carbon dioxide is a stage in the photosynthesis process.", "fol": "", "prediction": ["all x.(TakesInCarbonDioxide(x) -> PhotosynthesisProcess(x))", "all x.((StageInPhotosynthesis(x) & TakesInCarbonDioxide(x)) -> PhotosynthesisProcess(x))", "all x.((Stage(x) & TakesInCarbonDioxide(x)) -> PhotosynthesisProcess(x))", "all x.((TakesInCarbonDioxide(x) & PhotosynthesisProcess(x)) -> StageInProcess(x))", "all x.((TakesInCarbonDioxide(x) & PhotosynthesisProcess(x)) -> StageInPhotosynthesis(x))", "all x y.((TakesInCarbonDioxide(x) & PhotosynthesisProcess(y)) -> StageInProcess(x,y))", "all x.((PhotosynthesisProcess(x) & TakesInCarbonDioxide(x)) -> StageInProcess(x))", "all x.((PhotosynthesisProcess(x) & TakesInCarbonDioxide(x)) -> StageInPhotosynthesisProcess(x))", "all x.(TakingInCarbonDioxide(x) -> PhotosynthesisProcess(x))", "all x.((PhotosynthesisProcess(x) & TakesInCarbonDioxide(x)) -> StageInPhotosynthesis(x))", "all x y.((PhotosynthesisProcess(x) & CarbonDioxide(y)) -> StageInProcess(x,y))", "all x.((StageInPhotosynthesis(x) & TakesInCarbonDioxide(x)) -> Photosynthesis(x))", "all x y.((TakesInCarbonDioxide(x) & PhotosynthesisProcess(y)) -> StageInPhotosynthesis(x,y))", "all x y.((PhotosynthesisProcess(x) & CarbonDioxide(y)) -> StageIn(x,y))", "all x.((Photosynthesis(x) & TakesInCarbonDioxide(x)) -> StageInProcess(x))", "all x.(TakesInCarbonDioxide(x) -> PhotosynthesisStage(x))"]}
{"id": "entailmentbank_validation_593", "nl": "absorbing something is a kind of method for taking something in.", "fol": "", "prediction": ["all x y.((Absorbs(x,y) & Something(y)) -> TakesIn(x,y))", "all x.(Absorbing(x) -> TakesIn(x))", "all x.(Absorbs(x) -> TakesIn(x))", "all x y.((Absorbs(x) & Something(y)) -> TakesIn(x,y))", "all x y.((Absorbing(x) & Something(y)) -> TakesIn(x,y))", "all x y.((Absorbing(x,y) & Something(y)) -> TakesIn(x,y))", "all x y z.((Absorbs(x,y) & Something(z)) -> TakesIn(x,z))", "all x y.((Absorbs(x,y) & Object(y)) -> TakesIn(x,y))", "all x.((Absorbs(x) & Something(x)) -> TakesIn(x))", "all x.(AbsorbingSomething(x) -> TakesInSomething(x))", "all x y.((Absorbs(x,y) & Something(y)) -> TakesIn(y,x))", "all x y.((Absorbing(x) & Something(y)) -> TakeIn(x,y))", "all x.((Absorbs(x) & TakesIn(x)) -> TakesIn(x))", "all x.(Absorbing(x) -> TakeIn(x))", "all x.((Absorbing(x) & Something(x)) -> TakesIn(x))", "all x.(AbsorbsSomething(x) -> TakesInSomething(x))"]}
{"id": "entailmentbank_validation_594", "nl": "absorbing carbon dioxide is a stage in the photosynthesis process.", "fol": "", "prediction": ["all x.(AbsorbingCarbonDioxide(x) -> PhotosynthesisProcess(x))", "all x.(AbsorbsCarbonDioxide(x) -> PhotosynthesisProcess(x))", "all x.((AbsorbsCarbonDioxide(x) & PhotosynthesisProcess(x)) -> StageInProcess(x))", "all x y.((Stage(x) & PhotosynthesisProcess(y)) -> AbsorbsCarbonDioxide(x,y))", "all x.((AbsorbingCarbonDioxide(x) & PhotosynthesisProcess(x)) -> StageInProcess(x))", "all x y.((AbsorbsCarbonDioxide(x) & PhotosynthesisProcess(y)) -> StageInProcess(x,y))", "all x.((AbsorbsCarbonDioxide(x) & Photosynthesis(x)) -> StageInProcess(x))", "all x.((PhotosynthesisProcess(x) & AbsorbsCarbonDioxide(x)) -> StageInProcess(x))", "all x.((PhotosynthesisProcess(x) & AbsorbsCarbonDioxide(x)) -> StageInPhotosynthesisProcess(x))", "all x.((AbsorbingCarbonDioxide(x) & Photosynthesis(x)) -> StageInProcess(x))", "all x.(AbsorbingCarbonDioxide(x) -> PhotosynthesisStage(x))", "all x.((AbsorbsCarbonDioxide(x) & PhotosynthesisProcess(x)) -> StageInPhotosynthesis(x))", "all x.((Photosynthesis(x) & AbsorbsCarbonDioxide(x)) -> StageInProcess(x))", "all x.(AbsorbsCarbonDioxide(x) -> PhotosynthesisStage(x))", "all x.((PhotosynthesisProcess(x) & AbsorbsCarbonDioxide(x)) -> StageInPhotosynthesis(x))", "all x.((AbsorbingCarbonDioxide(x) & PhotosynthesisProcess(x)) -> StageInPhotosynthesis(x))"]}
{"id": "entailmentbank_validation_595", "nl": "carbon dioxide can be found in the air.", "fol": "", "prediction": ["all x.(CarbonDioxide(x) -> FoundInAir(x))", "all x y.((CarbonDioxide(x) & Air(y)) -> FoundIn(x,y))", "all x.(CarbonDioxide(x) -> CanBeFoundInAir(x))", "all x y z.((CarbonDioxide(x) & Air(y) & Air(z)) -> FoundIn(x,y,z))", "all x y.((CarbonDioxide(x) & Air(y)) -> CanBeFound(x,y))", "all x y.((CarbonDioxide(x) & Air(y)) -> CanFound(x,y))", "all x.(CarbonDioxide(x) -> CanFoundInAir(x))", "all x y.((CarbonDioxide(x) & Air(y)) -> CanBeFoundIn(x,y))", "all x y z.((CarbonDioxide(x) & Air(y) & Air(z)) -> CanFound(x,y,z))", "all x y.((CarbonDioxide(x) & Air(y)) -> CanFind(x,y))", "all x.((CarbonDioxide(x) & Air(y)) -> FoundIn(x,y))", "all x y z.((CarbonDioxide(x) & Air(y) & Air(z)) -> CanBeFound(x,y,z))", "all x y z.((CarbonDioxide(x) & Air(y) & Air(z)) -> CanFind(x,y,z))", "exists x.(CarbonDioxide(x) & FoundInAir(x))", "all x.(CarbonDioxide(x) -> CanBeFindedInAir(x))", "all x y.((CarbonDioxide(x) & Air(y)) -> CanFoundIn(x,y))"]}
{"id": "entailmentbank_validation_596", "nl": "absorbing carbon dioxide from the air is a stage in the photosynthesis process.", "fol": "", "prediction": ["all x.((AbsorbsCarbonDioxide(x) & FromAir(x)) -> PhotosynthesisProcess(x))", "all x.(AbsorbingCarbonDioxideFromAir(x) -> PhotosynthesisProcess(x))", "all x y.((Stage(x) & PhotosynthesisProcess(y)) -> AbsorbsCarbonDioxideFromAir(x,y))", "all x.((AbsorbsCarbonDioxideFromAir(x) & PhotosynthesisProcess(x)) -> StageInPhotosynthesis(x))", "all x.((AbsorbingCarbonDioxide(x) & FromAir(x)) -> PhotosynthesisProcess(x))", "all x.(AbsorbsCarbonDioxideFromAir(x) -> PhotosynthesisProcess(x))", "all x.(AbsorbsCarbonDioxide(x) -> PhotosynthesisProcess(x))", "all x.(AbsorbingCarbonDioxide(x) -> PhotosynthesisProcess(x))", "all x.((AbsorbingCarbonDioxideFromAir(x) & PhotosynthesisProcess(x)) -> StageInPhotosynthesis(x))", "all x y.((AbsorbsCarbonDioxide(x) & Air(y)) -> PhotosynthesisProcess(x))", "all x.((AbsorbsCarbonDioxideFromAir(x) & PhotosynthesisProcess(x)) -> StageInProcess(x))", "all x.((AbsorbsCarbonDioxide(x) & Air(x)) -> PhotosynthesisProcess(x))", "all x.((AbsorbingCarbonDioxide(x) & Air(x)) -> PhotosynthesisProcess(x))", "all x y.((AbsorbsCarbonDioxide(x) & Air(y)) -> PhotosynthesisProcess(x,y))", "all x y.((Stage(x) & PhotosynthesisProcess(y)) -> AbsorbsCarbonDioxide(x,y))", "all x y.((StageInPhotosynthesis(x) & AbsorbsCarbonDioxide(x,y)) -> PhotosynthesisProcess(x))"]}
{"id": "entailmentbank_validation_597", "nl": "plants perform photosynthesis.", "fol": "", "prediction": ["all x.(Plant(x) -> PerformsPhotosynthesis(x))", "all x y.((Plant(x) & Photosynthesis(y)) -> Performs(x,y))", "all x y z.((Plant(x) & Photosynthesis(y) & Photosynthesis(z)) -> Performs(x,y,z))", "all x y.((Plant(x) & Plant(y)) -> PerformsPhotosynthesis(x,y))", "all x.((Plant(x) & PerformsPhotosynthesis(x)) -> PerformsPhotosynthesis(x))", "all x y z.((Plant(x) & Photosynthesis(y) & Photosynthesis(z)) -> Performs(x,y))", "all x y.((Plant(x) & Photosynthesis(y) & Performs(x,y)) -> Performs(x,y))", "all x y z.((Plant(x) & Photosynthesis(y) & Photosynthesis(z) & Performs(x,y)) -> Performs(x,z))", "all x y.((Plant(x) & Photosynthesis(y)) -> Perform(x,y))", "all x y z.((Plant(x) & Photosynthesis(y) & Photosynthesis(z) & Performs(x,y,z)) -> Performs(x,y))", "all x y z.((Plant(x) & Photosynthesis(y) & Photosynthesis(z) & Performs(x,y,z)) -> Performs(x,y,z))", "all x y.((Plant(x) & Plant(y) & PerformsPhotosynthesis(x,y)) -> PerformsPhotosynthesis(x,y))", "all x y z.((Plant(x) & Photosynthesis(y) & Photosynthesis(z)) -> Perform(x,y,z))", "all x.(Plant(x) -> PerformPhotosynthesis(x))", "all x y.((Plant(x) & Flower(y)) -> PerformsPhotosynthesis(x,y))", "all x.(Plant(x) -> Photosynthesis(x))"]}
{"id": "entailmentbank_validation_598", "nl": "a plant absorbs carbon dioxide from the air to perform photosynthesis.", "fol": "", "prediction": ["all x y z.((Plant(x) & CarbonDioxide(y) & Air(z)) -> AbsorbsToPerformPhotosynthesis(x,y,z))", "all x y.((Plant(x) & CarbonDioxide(y)) -> AbsorbsToPerformPhotosynthesis(x,y))", "all x y z.((Plant(x) & CarbonDioxide(y) & Air(z) & Absorbs(x,y,z)) -> PerformsPhotosynthesis(x))", "all x.((Plant(x) & AbsorbsCarbonDioxide(x)) -> PerformsPhotosynthesis(x))", "all x y z.((Plant(x) & CarbonDioxide(y) & Air(z)) -> AbsorbsForPhotosynthesis(x,y,z))", "all x y z.((Plant(x) & CarbonDioxide(y) & Air(z) & AbsorbsFrom(x,y,z)) -> PerformsPhotosynthesis(x))", "all x.((Plant(x) & AbsorbsCarbonDioxide(x) & PerformsPhotosynthesis(x)) -> Photosynthesis(x))", "all x y.((Plant(x) & CarbonDioxide(y) & Air(z)) -> AbsorbsToPerformPhotosynthesis(x,y,z))", "all x y z.((Plant(x) & CarbonDioxide(y) & Air(z)) -> AbsorbsToPhotosynthesis(x,y,z))", "all x y z.((Plant(x) & CarbonDioxide(y) & Air(z) & Absorbs(x,y)) -> PerformsPhotosynthesis(x))", "all x y.((Plant(x) & CarbonDioxide(y)) -> AbsorbsForPhotosynthesis(x,y))", "all x y z.((Plant(x) & CarbonDioxide(y) & Air(z) & AbsorbsForPhotosynthesis(x,y,z)) -> PerformsPhotosynthesis(x))", "all x y.((Plant(x) & CarbonDioxide(y) & Air(y)) -> AbsorbsToPerformPhotosynthesis(x,y))", "all x y z.((Plant(x) & CarbonDioxide(y) & Air(z) & AbsorbsToPerformPhotosynthesis(x,y,z)) -> PerformsPhotosynthesis(x))", "all x y.((Plant(x) & Air(y)) -> AbsorbsCarbonDioxide(x,y))", "all x.((Plant(x) & AbsorbsCarbonDioxideFromAir(x)) -> PerformsPhotosynthesis(x))"]}
{"id": "entailmentbank_validation_599", "nl": "when carbon dioxide in the atmosphere is absorbed by plants, the amount of carbon dioxide in the atmosphere is reduced in the atmosphere.", "fol": "", "prediction": ["all x y.((CarbonDioxide(x) & Atmosphere(y) & AbsorbedByPlants(x,y)) -> ReducedAmountOfCarbonDioxide(x,y))", "all x y.((CarbonDioxide(x) & Atmosphere(y) & AbsorbedByPlants(x,y)) -> ReducedAtmosphereAmount(x,y))", "all x y.((CarbonDioxide(x) & Atmosphere(y) & AbsorbedByPlants(x,y)) -> ReducedAtmosphere(x,y))", "all x y.((CarbonDioxide(x) & Atmosphere(y) & AbsorbedByPlants(x,y)) -> ReducedAmountOfCarbonDioxideInAtmosphere(x,y))", "all x y.((CarbonDioxide(x) & Atmosphere(y) & AbsorbedByPlants(x,y)) -> ReducedAmountOfCarbonDioxideInAtmosphere(x))", "all x y.((CarbonDioxideInAtmosphere(x) & AbsorbedByPlants(x)) -> ReducedAtmosphereAmount(y))", "all x y.((CarbonDioxide(x) & Atmosphere(y) & AbsorbedByPlants(x,y)) -> CarbonDioxideReducedInAtmosphere(x,y))", "all x.((CarbonDioxideInAtmosphere(x) & AbsorbedByPlants(x)) -> ReducedAtmosphereAmount(x))", "all x y.((CarbonDioxide(x) & Atmosphere(y) & AbsorbedByPlants(x,y)) -> CarbonDioxideReducedInAtmosphere(x))", "all x.((CarbonDioxideInAtmosphere(x) & AbsorbedByPlants(x)) -> ReducedAmountOfCarbonDioxideInAtmosphere(x))", "all x y.((CarbonDioxide(x) & Atmosphere(y) & AbsorbedByPlants(x,y)) -> ReducedAmountOfCarbonDioxide(x))", "all x y.((CarbonDioxide(x) & Atmosphere(y) & AbsorbedByPlants(x,y)) -> ReducedAmount(x,y))", "all x y.((CarbonDioxide(x) & Atmosphere(y) & AbsorbedByPlants(x,y)) -> ReducedAtmosphere(x))", "all x y.((CarbonDioxideInAtmosphere(x) & AbsorbedByPlants(x)) -> ReducedAmountOfCarbonDioxideInAtmosphere(y))", "all x.((CarbonDioxide(x) & AbsorbedByPlants(x)) -> ReducedAmountOfCarbonDioxide(x))", "all x y.((CarbonDioxide(x) & Atmosphere(y) & AbsorbedByPlants(x,y)) -> ReducedAtmosphereAmount(x))"]}
{"id": "entailmentbank_validation_600", "nl": "plant photosynthesis reduces the amount of carbon dioxide in the air.", "fol": "", "prediction": ["all x.(PlantPhotosynthesis(x) -> ReducesCarbonDioxide(x))", "all x.(PlantPhotosynthesis(x) -> ReducesCarbonDioxideInAir(x))", "all x y z.((PlantPhotosynthesis(x) & CarbonDioxide(y) & Air(z)) -> Reduces(x,y,z))", "all x y.((PlantPhotosynthesis(x) & CarbonDioxide(y)) -> Reduces(x,y))", "all x y.((PlantPhotosynthesis(x) & CarbonDioxide(y)) -> ReducesInAir(x,y))", "all x y z.((PlantPhotosynthesis(x) & CarbonDioxide(y) & Air(z)) -> ReducesAmount(x,y,z))", "all x y.((PlantPhotosynthesis(x) & CarbonDioxide(y)) -> ReducesAmountInAir(x,y))", "all x y.((PlantPhotosynthesis(x) & CarbonDioxide(y)) -> ReducesAmount(x,y))", "all x y z.((Plant(x) & Photosynthesis(y) & CarbonDioxide(z)) -> ReducesInAir(x,y,z))", "all x y z.((Plant(x) & Photosynthesis(y) & CarbonDioxide(z)) -> Reduces(x,y,z))", "all x y z.((Plant(x) & Photosynthesis(y) & CarbonDioxide(z)) -> ReducesAmountInAir(x,y,z))", "all x y.((Plant(x) & Photosynthesis(y)) -> ReducesCarbonDioxide(x,y))", "all x y.((Plant(x) & Photosynthesis(y)) -> ReducesCarbonDioxideInAir(x,y))", "all x y.((PlantPhotosynthesis(x) & CarbonDioxide(y)) -> ReducesAirAmount(x,y))", "all x y z.((Plant(x) & Photosynthesis(y) & CarbonDioxide(z)) -> ReducesAmount(x,y,z))", "all x y.((PlantPhotosynthesis(x) & CarbonDioxideInAir(y)) -> Reduces(x,y))"]}
{"id": "entailmentbank_validation_601", "nl": "sunlight is a kind of solar energy.", "fol": "", "prediction": ["all x.(Sunlight(x) -> SolarEnergy(x))", "all x y.((Sunlight(x) & SolarEnergy(y)) -> SolarEnergy(x,y))", "all x y.((Sunlight(x) & SolarEnergy(y)) -> SolarEnergy(x))", "all x.(Sunlight(x) -> SolarEnergy(x))", "all x.((Sunlight(x) & SolarEnergy(x)) -> SolarEnergy(x))", "all x y.((Sunlight(x) & Sunlight(y)) -> SolarEnergy(x))", "all x y.((Sunlight(x) & Sunlight(y)) -> SolarEnergy(x,y))", "all x y.((Sunlight(x) & SolarEnergy(y)) -> (SolarEnergy(x) & SolarEnergy(y)))", "all x y.((Sunlight(x) & SolarEnergy(y)) -> Is(x,y))", "all x y.((Sunlight(x) & SolarEnergy(x)) -> SolarEnergy(y))", "all x y.((Sunlight(x) & SolarEnergy(y)) -> (SolarEnergy(x) & SolarEnergy(x)))", "all x y.((Sunlight(x) & SolarEnergy(y)) -> SortOf(x,y))", "all x y.((Sunlight(x) & Wind(y)) -> SolarEnergy(x))", "all x y.((Sunlight(x) & Wind(y)) -> SolarEnergy(x,y))", "all x.(Sunlight(x) -> (SolarEnergy(x) & SolarEnergy(x)))", "all x y.((Sunlight(x) & SolarEnergy(y)) -> Solar(x))"]}
{"id": "entailmentbank_validation_602", "nl": "photosynthesis means green plants convert from carbon dioxide and water and solar energy into carbohydrates and food and oxygen for themselves.", "fol": "", "prediction": ["all x.((GreenPlant(x) & CarbonDioxide(x) & Water(x) & SolarEnergy(x)) -> (ConvertsFromCarbohydrates(x) & ProducesCarbohydrates(x) & ProducesFood(x) & ProducesOxygen(x)))", "all x.(Photosynthesis(x) -> (GreenPlantsConvertFromCarbonDioxideAndWaterAndSolarEnergy(x) & CarbohydratesAndFoodAndOxygen(x)))", "all x y.((GreenPlant(x) & CarbonDioxide(y) & Water(y) & SolarEnergy(x)) -> (ConvertsFromCarbohydrates(x,y) & ProducesCarbohydrates(x,y) & ProducesFood(x,y) & ProducesOxygen(x,y)))", "all x y.((GreenPlant(x) & CarbonDioxide(y) & Water(y) & SolarEnergy(x)) -> (ConvertsFromCarbohydrates(x,y) & ProducesCarbohydrates(x,y) & ProducesFoodAndOxygen(x,y)))", "all x.((GreenPlant(x) & CarbonDioxide(x) & Water(x) & SolarEnergy(x)) -> (ConvertsToCarbohydrates(x) & ProducesFood(x) & ProducesOxygen(x)))", "all x y z.((GreenPlant(x) & CarbonDioxide(y) & Water(z) & SolarEnergy(x)) -> (ConvertsFrom(x,y,z) & Carbohydrates(x) & FoodAndOxygen(x)))", "all x.((GreenPlant(x) & CarbonDioxide(x) & Water(x) & SolarEnergy(x)) -> (ConvertsCarbohydrates(x) & ProducesFood(x) & ProducesOxygen(x)))", "all x.((GreenPlant(x) & CarbonDioxide(x) & Water(x) & SolarEnergy(x)) -> (ConvertsFromCarbohydrates(x) & ProducesCarbohydrates(x) & ProducesFoodAndOxygen(x)))", "all x.((GreenPlant(x) & CarbonDioxide(x) & Water(x) & SolarEnergy(x)) -> (ConvertsToCarbohydrates(x) & ProducesFoodAndOxygen(x)))", "all x.((GreenPlant(x) & CarbonDioxide(x) & Water(x) & SolarEnergy(x)) -> (ConvertsCarbohydrates(x) & ProducesFoodAndOxygen(x)))", "all x y z.((GreenPlant(x) & CarbonDioxide(y) & Water(z) & SolarEnergy(x)) -> (Converts(x,y,z) & Carbohydrates(x) & FoodAndOxygen(x)))", "all x y.((GreenPlant(x) & CarbonDioxide(y) & Water(y) & SolarEnergy(x)) -> (Converts(x,y) & Carbohydrates(x) & FoodAndOxygen(x)))", "all x y z.((GreenPlant(x) & CarbonDioxide(y) & Water(z) & SolarEnergy(x) & Carbohydrates(x) & FoodAndOxygen(x)) -> Photosynthesis(x))", "all x y z.((GreenPlant(x) & CarbonDioxide(y) & Water(z) & SolarEnergy(x) & Carbohydrates(x) & Food(x) & Oxygen(x)) -> Photosynthesis(x))", "all x y.((GreenPlant(x) & CarbonDioxide(y) & Water(y) & SolarEnergy(x)) -> (Converts(x,y) & Carbohydrates(x) & Food(x) & Oxygen(x)))", "all x y z.((GreenPlant(x) & CarbonDioxide(y) & Water(z) & SolarEnergy(x)) -> (ConvertsFrom(x,y,z) & Carbohydrates(x) & Food(x) & Oxygen(x)))"]}
{"id": "entailmentbank_validation_603", "nl": "photosynthesis means plants convert carbon dioxide and water and sunlight into carbohydrates and food and oxygen.", "fol": "", "prediction": ["all x.(Photosynthesis(x) -> (ConvertsCarbonDioxideAndWaterAndSunlight(x) & CarbohydratesAndFoodAndOxygen(x)))", "all x.(Photosynthesis(x) -> (ConvertsCarbonDioxideAndWaterAndSunlightIntoCarbohydratesAndFoodAndOxygen(x)))", "all x.(Photosynthesis(x) -> (ConvertsCarbonDioxide(x) & ConvertsWater(x) & ConvertsSunlight(x) & ProducesCarbohydrates(x) & ProducesFood(x) & ProducesOxygen(x)))", "all x y z.((Plant(x) & CarbonDioxide(y) & Water(z) & Sunlight(x)) -> (Converts(x,y,z) & Carbohydrates(x) & FoodAndOxygen(x)))", "all x.(Photosynthesis(x) -> (ConvertsCarbonDioxide(x) & ConvertsWater(x) & ConvertsSunlight(x) & ProducesCarbohydrates(x) & ProducesFoodAndOxygen(x)))", "all x.(Photosynthesis(x) -> (ConvertsCarbonDioxideAndWaterAndSunlightToCarbohydratesAndFoodAndOxygen(x)))", "all x.(Photosynthesis(x) -> (ConvertsCarbonDioxideAndWaterAndSunlight(x) & Carbohydrates(x) & FoodAndOxygen(x)))", "all x y z.((Plant(x) & CarbonDioxide(y) & Water(z)) -> (Converts(x,y,z) & Carbohydrates(x) & FoodAndOxygen(x)))", "all x y z.((Plant(x) & CarbonDioxide(y) & Water(z) & Sunlight(x)) -> (Converts(x,y,z) & Carbohydrates(x) & Food(x) & Oxygen(x)))", "all x y z.((Plant(x) & CarbonDioxide(y) & Water(z)) -> (Converts(x,y,z) & ProducesCarbohydrates(x) & ProducesFoodAndOxygen(x)))", "all x y z.((Plant(x) & CarbonDioxide(y) & Water(z)) -> (Converts(x,y,z) & Carbohydrates(x) & Food(x) & Oxygen(x)))", "all x.(Photosynthesis(x) -> (ConvertsCarbonDioxideAndWaterAndSunlight(x) & ProducesCarbohydratesAndFoodAndOxygen(x)))", "all x y.((Plant(x) & CarbonDioxide(y) & Water(y) & Sunlight(y)) -> (Converts(x,y) & Carbohydrates(x) & FoodAndOxygen(x)))", "all x.(Photosynthesis(x) -> (ConvertsCarbonDioxideAndWaterAndSunlight(x) & ProducesCarbohydrates(x) & ProducesFoodAndOxygen(x)))", "all x.(Photosynthesis(x) -> (PlantsConvertCarbonDioxideAndWaterAndSunlight(x) & CarbohydratesAndFoodAndOxygen(x)))", "all x y.((Plant(x) & CarbonDioxide(y) & Water(y) & Sunlight(z)) -> (Converts(x,y,z) & Carbohydrates(x) & FoodAndOxygen(x)))"]}
{"id": "entailmentbank_validation_604", "nl": "if an orgnism uses a process to convert something into something else, then that something is used for that process.", "fol": "", "prediction": ["all x y.((Organnism(x) & Process(y) & ConvertsInto(x,y)) -> UsedFor(x,y))", "all x y.((Organnism(x) & Process(y) & ConvertsInto(x,y)) -> UsedForProcess(x,y))", "all x y.((Orgnism(x) & Process(y) & ConvertsInto(x,y)) -> UsedFor(x,y))", "all x y.((Orgnism(x) & Process(y) & ConvertsInto(x,y)) -> UsedForProcess(x,y))", "all x y.((Organnism(x) & Process(y) & ConvertsTo(x,y)) -> UsedFor(x,y))", "all x y.((Organnism(x) & Process(y) & Converts(x,y)) -> UsedForProcess(x,y))", "all x y z.((Organnism(x) & Process(y) & Process(z) & ConvertsInto(x,y,z)) -> UsedFor(x,y,z))", "all x y.((Organnism(x) & Process(y) & ConvertsProcess(x,y)) -> UsedForProcess(x,y))", "all x y.((Organnism(x) & Process(y) & Converts(x,y)) -> UsedFor(x,y))", "all x y.((Orgnism(x) & Process(y) & ConvertsTo(x,y)) -> UsedFor(x,y))", "all x y.((Organnism(x) & Process(y) & ConvertsTo(x,y)) -> UsedForProcess(x,y))", "all x y.((Orgnism(x) & Process(y) & Converts(x,y)) -> UsedForProcess(x,y))", "all x y z.((Orgnism(x) & Process(y) & Process(z) & ConvertsInto(x,y,z)) -> UsedFor(x,y,z))", "all x y.((Orgnism(x) & Process(y) & ConvertsProcess(x,y)) -> UsedForProcess(x,y))", "all x y.((Organnism(x) & Process(y) & UsesToConvert(x,y)) -> UsedForProcess(x,y))", "all x y.((Orgnism(x) & Process(y) & Converts(x,y)) -> UsedFor(x,y))"]}
{"id": "entailmentbank_validation_605", "nl": "a plant uses sunlight for photosynthesis.", "fol": "", "prediction": ["all x.(Plant(x) -> UsesSunlightForPhotosynthesis(x))", "all x y.((Plant(x) & Sunlight(y)) -> UsesForPhotosynthesis(x,y))", "all x.((Plant(x) & UsesSunlightForPhotosynthesis(x)) -> UsesSunlightForPhotosynthesis(x))", "all x.((Plant(x) & UsesSunlight(x)) -> Photosynthesis(x))", "all x y z.((Plant(x) & Sunlight(y) & Photosynthesis(z)) -> UsesFor(x,y,z))", "all x y z.((Plant(x) & Sunlight(y) & Photosynthesis(z)) -> Uses(x,y,z))", "all x y.((Plant(x) & Sunlight(y)) -> UsedForPhotosynthesis(x,y))", "all x y.((Plant(x) & Sunlight(y) & UsesForPhotosynthesis(x,y)) -> UsesForPhotosynthesis(x,y))", "all x.((Plant(x) & UsesSunlightForPhotosynthesis(x)) -> UsesSunlight(x))", "all x.((Plant(x) & Sunlight(x)) -> UsesForPhotosynthesis(x))", "all x.((Plant(x) & Sunlight(y)) -> UsesForPhotosynthesis(x,y))", "all x.((Plant(x) & UsesSunlightForPhotosynthesis(x)) -> Photosynthesis(x))", "all x y z.((Plant(x) & Sunlight(y) & Photosynthesis(z)) -> UsesForPhotosynthesis(x,y,z))", "all x y z.((Plant(x) & Sunlight(y) & Photosynthesis(z)) -> Uses(x,y))", "all x y z.((Plant(x) & Sunlight(y) & Photosynthesis(z) & Uses(x,y)) -> Uses(x,z))", "all x y z.((Plant(x) & Sunlight(y) & Photosynthesis(z) & Uses(x,y)) -> Photosynthesis(x,z))"]}
{"id": "entailmentbank_validation_606", "nl": "in the photosynthesis process sunlight has the role of raw material.", "fol": "", "prediction": ["all x.((Sunlight(x) & PhotosynthesisProcess(x)) -> RawMaterial(x))", "all x y.((PhotosynthesisProcess(x) & Sunlight(y)) -> HasRoleOfRawMaterial(y,x))", "all x y.((Sunlight(x) & PhotosynthesisProcess(y)) -> HasRoleOfRawMaterial(x,y))", "all x.((Sunlight(x) & PhotosynthesisProcess(x)) -> HasRoleOfRawMaterial(x))", "all x y z.((Sunlight(x) & PhotosynthesisProcess(y) & RawMaterial(z)) -> HasRoleOf(x,y,z))", "all x y.((PhotosynthesisProcess(x) & Sunlight(y)) -> HasRoleOfRawMaterial(x,y))", "all x y z.((PhotosynthesisProcess(x) & Sunlight(y) & RawMaterial(z)) -> HasRoleOf(y,z))", "all x y.((Sunlight(x) & PhotosynthesisProcess(y)) -> RawMaterial(x,y))", "all x y.((PhotosynthesisProcess(x) & Sunlight(y)) -> RawMaterial(y))", "all x y.((PhotosynthesisProcess(x) & Sunlight(y)) -> HasRoleOfRawMaterial(y))", "all x.((Sunlight(x) & Photosynthesis(x)) -> RawMaterial(x))", "all x y z.((Sunlight(x) & PhotosynthesisProcess(y) & RawMaterial(z)) -> HasRoleOf(x,z))", "all x y z.((PhotosynthesisProcess(x) & Sunlight(y) & RawMaterial(z)) -> HasRoleOf(x,y,z))", "all x.((Sunlight(x) & Photosynthesis(x)) -> HasRoleOfRawMaterial(x))", "all x y.((PhotosynthesisProcess(x) & Sunlight(y)) -> RawMaterial(x,y))", "all x y z.((PhotosynthesisProcess(x) & Sunlight(y) & RawMaterial(z)) -> HasRole(y,z))"]}
{"id": "entailmentbank_validation_607", "nl": "a plant uses the raw material sunlight for photosynthesis.", "fol": "", "prediction": ["all x y z.((Plant(x) & RawMaterial(y) & Sunlight(z)) -> UsesForPhotosynthesis(x,y,z))", "all x y.((Plant(x) & RawMaterial(y)) -> UsesForPhotosynthesis(x,y))", "all x y.((Plant(x) & RawMaterial(y) & Sunlight(y)) -> UsesForPhotosynthesis(x,y))", "all x.((Plant(x) & RawMaterialSunlight(x)) -> UsesForPhotosynthesis(x))", "all x y.((Plant(x) & RawMaterial(y) & Sunlight(z)) -> UsesForPhotosynthesis(x,y,z))", "all x y.((Plant(x) & RawMaterialSunlight(y)) -> UsesForPhotosynthesis(x,y))", "all x y.((Plant(x) & RawMaterial(y)) -> UsesSunlightForPhotosynthesis(x,y))", "all x.(Plant(x) -> UsesRawMaterialSunlightForPhotosynthesis(x))", "all x y.((Plant(x) & RawSunlight(y)) -> UsesForPhotosynthesis(x,y))", "all x y z.((Plant(x) & RawMaterial(y) & Sunlight(z) & UsesForPhotosynthesis(x,y,z)) -> UsesForPhotosynthesis(x,y,z))", "all x y z.((Plant(x) & RawMaterial(y) & Sunlight(z)) -> UsedForPhotosynthesis(x,y,z))", "all x y z.((Plant(x) & RawMaterial(y) & Sunlight(z) & UsedForPhotosynthesis(x,y,z)) -> UsesForPhotosynthesis(x,y,z))", "all x y.((Plant(x) & RawMaterial(y)) -> UsedForPhotosynthesis(x,y))", "all x y z.((Plant(x) & RawMaterial(y) & Sunlight(z) & UsesForPhotosynthesis(x,y,z)) -> Photosynthesis(x))", "all x.((Plant(x) & UsesRawMaterialSunlight(x)) -> Photosynthesis(x))", "all x y.((Plant(x) & RawMaterial(y) & Sunlight(y)) -> UsedForPhotosynthesis(x,y))"]}
{"id": "entailmentbank_validation_608", "nl": "using a raw material sometimes requires absorbing that raw material.", "fol": "", "prediction": ["all x y.((UsesRawMaterial(x) & RawMaterial(y)) -> RequiresAbsorbing(x,y))", "all x y.((RawMaterial(x) & RawMaterial(y)) -> RequiresAbsorbing(x,y))", "all x y.((UsesRawMaterial(x) & RawMaterial(y)) -> SometimesRequiresAbsorbing(x,y))", "all x.((RawMaterial(x) & Uses(x,RawMaterial)) -> RequiresAbsorbing(x,RawMaterial))", "all x.((UsesRawMaterial(x) & RequiresAbsorbingRawMaterial(x)) -> RequiresAbsorbingRawMaterial(x))", "all x y.((UseRawMaterial(x) & RawMaterial(y)) -> RequiresAbsorbing(x,y))", "all x y.((UsesRawMaterial(x) & RawMaterial(y)) -> RequiresAbsorption(x,y))", "all x.((UsesRawMaterial(x) & UsesRawMaterial(x)) -> RequiresAbsorbingRawMaterial(x))", "all x y.((RawMaterial(x) & RawMaterial(y)) -> RequiresAbsorption(x,y))", "all x y.((UsingRawMaterial(x) & RawMaterial(y)) -> RequiresAbsorbing(x,y))", "all x y z.((RawMaterial(x) & RawMaterial(y) & RawMaterial(z)) -> RequiresAbsorbing(x,y,z))", "all x y.((RawMaterial(x) & RawMaterial(y)) -> SometimesRequiresAbsorbing(x,y))", "all x.((UsesRawMaterial(x) & SometimesRequiresAbsorbingRawMaterial(x)) -> RequiresAbsorbingRawMaterial(x))", "all x y.((UseRawMaterial(x) & RawMaterial(y)) -> SometimesRequiresAbsorbing(x,y))", "all x y.((Use(x,y) & RawMaterial(y)) -> RequiresAbsorbing(x,y))", "all x y.((Uses(x,y) & RawMaterial(y)) -> RequiresAbsorbing(x,y))"]}
{"id": "entailmentbank_validation_609", "nl": "a plant absorbs sunlight to perform photosynthesis.", "fol": "", "prediction": ["all x y.((Plant(x) & Sunlight(y)) -> AbsorbsToPerformPhotosynthesis(x,y))", "all x.((Plant(x) & AbsorbsSunlight(x)) -> PerformsPhotosynthesis(x))", "all x.((Plant(x) & AbsorbsSunlight(x) & PerformsPhotosynthesis(x)) -> Photosynthesis(x))", "all x y z.((Plant(x) & Sunlight(y) & Photosynthesis(z)) -> AbsorbsToPerform(x,y,z))", "all x.((Plant(x) & AbsorbsSunlight(x) & PerformsPhotosynthesis(x)) -> AbsorbsSunlight(x))", "all x y.((Plant(x) & Sunlight(y)) -> AbsorbsForPhotosynthesis(x,y))", "all x y.((Plant(x) & Sunlight(y) & Absorbs(x,y)) -> PerformsPhotosynthesis(x))", "all x.(Plant(x) -> AbsorbsSunlightToPerformPhotosynthesis(x))", "all x.((Plant(x) & AbsorbsSunlight(x) & PerformsPhotosynthesis(x)) -> AbsorbsSunlightToPerformPhotosynthesis(x))", "all x y z.((Plant(x) & Sunlight(y) & Photosynthesis(z) & Absorbs(x,y)) -> Performs(x,z))", "all x.((Plant(x) & AbsorbsSunlight(x) & PerformsPhotosynthesis(x)) -> PerformsPhotosynthesis(x))", "all x.((Plant(x) & AbsorbsSunlight(x) & PerformsPhotosynthesis(x)) -> Photosynthetic(x))", "all x y.((Plant(x) & Sunlight(y)) -> Absorbs(x,y))", "all x y z.((Plant(x) & Sunlight(y) & Sunlight(z)) -> AbsorbsToPerformPhotosynthesis(x,y,z))", "all x.((Plant(x) & AbsorbsSunlight(x) & Photosynthesis(x)) -> Performs(x,Photosynthesis))", "all x.(Plant(x) -> (AbsorbsSunlight(x) & PerformsPhotosynthesis(x)))"]}
{"id": "entailmentbank_validation_610", "nl": "a leaf absorbs sunlight to perform photosynthesis.", "fol": "", "prediction": ["all x.(Leaf(x) -> AbsorbsSunlightToPerformPhotosynthesis(x))", "all x y.((Leaf(x) & Sunlight(y)) -> AbsorbsToPerformPhotosynthesis(x,y))", "all x.(Leaf(x) -> AbsorbsSunlight(x))", "all x.(Leaf(x) -> (AbsorbsSunlight(x) & PerformsPhotosynthesis(x)))", "all x.((Leaf(x) & AbsorbsSunlight(x)) -> PerformsPhotosynthesis(x))", "all x y z.((Leaf(x) & Sunlight(y) & Photosynthesis(z)) -> AbsorbsToPerform(x,y,z))", "all x y.((Leaf(x) & Sunlight(y)) -> AbsorbsForPhotosynthesis(x,y))", "all x y z.((Leaf(x) & Sunlight(y) & Sunlight(z)) -> AbsorbsToPerformPhotosynthesis(x,y,z))", "all x y.((Leaf(x) & Sunlight(y) & Absorbs(x,y)) -> PerformsPhotosynthesis(x))", "all x y.((Leaf(x) & Sunlight(y)) -> Absorbs(x,y))", "all x.(Leaf(x) -> AbsorbsSunlightForPhotosynthesis(x))", "all x.((Leaf(x) & AbsorbsSunlight(x) & PerformsPhotosynthesis(x)) -> Photosynthesis(x))", "all x y.((Leaf(x) & Sunlight(y)) -> AbsorbsToPhotosynthesis(x,y))", "all x y z.((Leaf(x) & Sunlight(y) & Photosynthesis(z)) -> Absorbs(x,y,z))", "all x y z.((Leaf(x) & Sunlight(y) & Photosynthesis(z)) -> AbsorbsForPhotosynthesis(x,y,z))", "all x y.((Leaf(x) & Sunlight(y)) -> AbsorbsAndPerformsPhotosynthesis(x,y))"]}
{"id": "entailmentbank_validation_611", "nl": "chlorophyll is found in the cells of leaves.", "fol": "", "prediction": ["all x.(Chlorophyll(x) -> FoundInLeavesCells(x))", "all x.(Chlorophyll(x) -> FoundInLeaves(x))", "all x y.((Chlorophyll(x) & Leaf(y)) -> FoundInCells(x,y))", "all x y z.((Chlorophyll(x) & Leaf(y) & Cell(z)) -> FoundIn(x,y,z))", "all x y.((Chlorophyll(x) & Leaves(y)) -> FoundInCells(x,y))", "all x y.((Chlorophyll(x) & LeafCell(y)) -> FoundIn(x,y))", "all x y.((Chlorophyll(x) & Leave(y)) -> FoundInCells(x,y))", "all x y.((Chlorophyll(x) & Leaf(y)) -> FoundIn(x,y))", "all x y z.((Chlorophyll(x) & Leave(y) & Cell(z)) -> FoundIn(x,y,z))", "all x y z.((Chlorophyll(x) & Leaves(y) & Cell(z)) -> FoundIn(x,y,z))", "all x y.((Chlorophyll(x) & Leave(y)) -> FoundIn(x,y))", "all x y.((Chlorophyll(x) & Leaves(y)) -> FoundIn(x,y))", "all x.(Chlorophyll(x) -> FoundInLeavesCells(x))", "all x y.((Chlorophyll(x) & Leaf(y)) -> FoundInCell(x,y))", "all x y.((Clorophyll(x) & Leaf(y)) -> FoundInCells(x,y))", "all x y z.((Chlorophyll(x) & Leaves(y) & Cell(z)) -> FoundIn(x,z))"]}
{"id": "entailmentbank_validation_612", "nl": "chlorophyll is found in the cells of parts of plants that absorb sunlight to perform photosynthesis.", "fol": "", "prediction": ["all x.(Chlorophyll(x) -> (FoundInCells(x) & AbsorbsSunlight(x) & PerformsPhotosynthesis(x)))", "all x.(Chlorophyll(x) -> (FoundInCellsOfPlantParts(x) & AbsorbsSunlight(x) & PerformsPhotosynthesis(x)))", "all x.(Chlorophyll(x) -> (FoundInCellsOfPlants(x) & AbsorbsSunlight(x) & PerformsPhotosynthesis(x)))", "all x.(Chlorophyll(x) -> (FindsInCells(x) & AbsorbsSunlight(x) & PerformsPhotosynthesis(x)))", "all x y.((Chlorophyll(x) & PlantPart(y) & AbsorbsSunlight(x,y)) -> FoundInCells(x,y))", "all x.(Chlorophyll(x) -> (FindsInCellsOfPlantParts(x) & AbsorbsSunlight(x) & PerformsPhotosynthesis(x)))", "all x y.((Chlorophyll(x) & PlantPart(y)) -> (AbsorbsSunlight(x,y) & PerformsPhotosynthesis(x,y)))", "all x.(Chlorophyll(x) -> (FoundInCells(x) & AbsorbsSunlight(x) & PerformsPhotosynthesis(x)))", "all x.(Chlorophyll(x) -> (FoundInCells(x) & AbsorbsSunlight(x) & Photosynthesis(x)))", "all x y.((Chlorophyll(x) & PlantPart(y)) -> AbsorbsSunlightToPerformPhotosynthesis(x,y))", "all x.(Chlorophyll(x) -> (FoundInCellsOfPlants(x) & AbsorbSunlight(x) & PerformPhotosynthesis(x)))", "all x.(Chlorophyll(x) -> (FoundInCellsOfPlantParts(x) & AbsorbsSunlightToPerformPhotosynthesis(x)))", "all x.(Chlorophyll(x) -> (FoundInCellsOfPlants(x) & AbsorbsSunlight(x) & Photosynthesis(x)))", "all x.(Chlorophyll(x) -> (FoundInCellsOfPlantParts(x) & AbsorbsSunlight(x) & Photosynthesis(x)))", "all x y.((Chlorophyll(x) & PlantPart(y) & AbsorbsSunlight(x,y)) -> FoundInCellsOf(x,y))", "all x.(Chlorophyll(x) -> FoundInCellsOfPlantParts(x))"]}
{"id": "entailmentbank_validation_613", "nl": "chlorophyll is used for absorbing sunlight by plants.", "fol": "", "prediction": ["all x y.((Chlorophyll(x) & Plant(y)) -> AbsorbsSunlight(x,y))", "all x.(Chlorophyll(x) -> AbsorbsSunlight(x))", "all x y.((Clorophyll(x) & Plant(y)) -> AbsorbsSunlight(x,y))", "all x y z.((Chlorophyll(x) & Plant(y) & Sunlight(z)) -> AbsorbsBy(x,y,z))", "all x y.((Chlorophyll(x) & Plant(y)) -> UsedForAbsorbingSunlight(x,y))", "all x.(Chlorophyll(x) -> UsedForAbsorbingSunlight(x))", "all x y z.((Chlorophyll(x) & Plant(y) & Sunlight(z)) -> Absorbs(x,y,z))", "all x.(Chlorophyll(x) -> AbsorbsSunlightByPlants(x))", "all x y.((Chlorophyll(x) & Plant(y)) -> AbsorbsSunlightBy(x,y))", "all x.(Clorophyll(x) -> AbsorbsSunlight(x))", "all x y z.((Chlorophyll(x) & Plant(y) & Sunlight(z)) -> UsedForAbsorbing(x,y,z))", "all x.(Chlorophyll(x) -> UsedForAbsorbingSunlightByPlants(x))", "all x y z.((Chlorophyll(x) & Plant(y) & Sunlight(z)) -> Absorbs(x,z))", "all x y.((Clorophyll(x) & Plant(y)) -> UsedForAbsorbingSunlight(x,y))", "all x y z.((Clorophyll(x) & Plant(y) & Sunlight(z)) -> AbsorbsBy(x,y,z))", "all x.(Chlorophyll(x) -> AbsorbsSunlight(x,Plants))"]}
{"id": "entailmentbank_validation_614", "nl": "sunlight is a kind of light.", "fol": "", "prediction": ["all x.(Sunlight(x) -> Light(x))", "all x y.((Sunlight(x) & Light(y)) -> Light(x))", "all x y.((Sunlight(x) & Light(y)) -> Light(x,y))", "all x.(Sunlight(x) -> Light(x))", "all x y.((Sunlight(x) & Light(y)) -> Is(x,y))", "all x.((Sunlight(x) & Light(x)) -> Light(x))", "all x y z.((Sunlight(x) & Light(y) & Light(z)) -> Light(x,y,z))", "all x y.((Sunlight(x) & Light(y)) -> KindOf(x,y))", "all x y z.((Sunlight(x) & Light(y) & Light(z)) -> Is(x,y,z))", "exists x.(Sunlight(x) & Light(x))", "all x.(Sunlight(x) -> KindOfLight(x))", "all x y.((Sunlight(x) & Light(y)) -> SortOf(x,y))", "all x y z.((Sunlight(x) & Light(y) & Light(z)) -> Light(x))", "all x y.((Sunlight(x) & Light(y)) -> (Light(x) & Light(y)))", "all x.(Sunlight(x) -> IsLight(x))", "all x y.((Sunlight(x) & Light(y)) -> IsLight(x,y))"]}
{"id": "entailmentbank_validation_615", "nl": "light is a kind of energy.", "fol": "", "prediction": ["all x.(Light(x) -> Energy(x))", "all x y.((Light(x) & Energy(y)) -> Energy(x))", "all x.((Light(x) & Energy(x)) -> Energy(x))", "all x y.((Light(x) & Energy(y)) -> Energy(x,y))", "all x.(Light(x) -> Energy(x))", "all x y z.((Light(x) & Energy(y) & Energy(z)) -> Energy(x,y,z))", "all x y.((Light(x) & Energy(y)) -> Is(x,y))", "all x y.((Light(x) & Energy(y)) -> KindOf(x,y))", "all x y.((Light(x) & Energy(y)) -> (Energy(x) & Energy(y)))", "all x.(Light(x) -> (Energy(x) & Energy(x)))", "all x y z.((Light(x) & Energy(y) & Energy(z)) -> Energy(x))", "all x y.((Light(x) & Energy(y)) -> TypeOf(x,y))", "all x.(Light(x) -> KindOfEnergy(x))", "all x y z.((Light(x) & Energy(y) & Energy(z)) -> Is(x,y,z))", "all x y z.((Light(x) & Energy(y) & Energy(z)) -> Energy(x,y))", "all x y.((Light(x) & Energy(y)) -> ArtOf(x,y))"]}
{"id": "entailmentbank_validation_616", "nl": "sunlight is a kind of light energy.", "fol": "", "prediction": ["all x.(Sunlight(x) -> LightEnergy(x))", "all x y.((Sunlight(x) & LightEnergy(y)) -> LightEnergy(x,y))", "all x y.((Sunlight(x) & LightEnergy(y)) -> LightEnergy(x))", "all x.(Sunlight(x) -> LightEnergy(x))", "all x y.((Sunlight(x) & LightEnergy(y)) -> Light(x))", "all x.((Sunlight(x) & LightEnergy(x)) -> LightEnergy(x))", "all x y.((Sunlight(x) & LightEnergy(y)) -> Light(x,y))", "all x y z.((Sunlight(x) & LightEnergy(y) & LightEnergy(z)) -> LightEnergy(x,y,z))", "all x y.((Sunlight(x) & LightEnergy(y)) -> Is(x,y))", "all x y.((Sunlight(x) & LightEnergy(x)) -> LightEnergy(y))", "all x y.((Sunlight(x) & LightEnergy(y)) -> (LightEnergy(x) & LightEnergy(y)))", "all x y.((Sunlight(x) & LightEnergy(y)) -> (LightEnergy(x) & LightEnergy(x)))", "all x y z.((Sunlight(x) & LightEnergy(y) & LightEnergy(z)) -> LightEnergy(x))", "all x y.((Sunlight(x) & LightEnergy(y)) -> (LightEnergy(x) & -LightEnergy(y)))", "all x y.((Sunlight(x) & LightEnergy(y)) -> (LightEnergy(x) & -LightEnergy(x)))", "all x.((Sunlight(x) & LightEnergy(x)) -> Light(x))"]}
{"id": "entailmentbank_validation_617", "nl": "chlorophyll is used for absorbing light energy by plants.", "fol": "", "prediction": ["all x y.((Chlorophyll(x) & Plant(y)) -> AbsorbsLightEnergy(x,y))", "all x.(Chlorophyll(x) -> AbsorbsLightEnergy(x))", "all x.(Chlorophyll(x) -> AbsorbsLightEnergyByPlants(x))", "all x y.((Clorophyll(x) & Plant(y)) -> AbsorbsLightEnergy(x,y))", "all x.(Chlorophyll(x) -> UsedForAbsorbingLightEnergy(x))", "all x y z.((Chlorophyll(x) & Plant(y) & LightEnergy(z)) -> Absorbs(x,y,z))", "all x y.((Chlorophyll(x) & Plant(y)) -> UsedForAbsorbingLightEnergy(x,y))", "all x.(Chlorophyll(x) -> UsedForAbsorbingLightEnergyByPlants(x))", "all x y.((Chlorophyll(x) & Plant(y)) -> AbsorbsLightEnergyBy(x,y))", "all x y z.((Chlorophyll(x) & Plant(y) & LightEnergy(z)) -> AbsorbsBy(x,y,z))", "all x y z.((Chlorophyll(x) & Plant(y) & LightEnergy(z)) -> Absorbs(x,z))", "all x y z.((Chlorophyll(x) & Plant(y) & LightEnergy(z)) -> UsedForAbsorbing(x,y,z))", "all x.(Chlorophyll(x) -> AbsorbsLightEnergy(x,Plants))", "all x.(Clorophyll(x) -> AbsorbsLightEnergy(x))", "all x y.((Clorophyll(x) & Plant(y)) -> UsedForAbsorbingLightEnergy(x,y))", "all x.(Clorophyll(x) -> AbsorbsLightEnergyByPlants(x))"]}
{"id": "entailmentbank_validation_618", "nl": "some microorganisms have a positive impact on human body.", "fol": "", "prediction": ["exists x.(Microorganism(x) & PositiveImpactOnHumanBody(x))", "exists x y.(Microorganism(x) & HumanBody(y) & PositiveImpact(x,y))", "exists x.(Microorganism(x) & PositiveImpact(x))", "exists x.(Microorganism(x) & PositiveInfluenceOnHumanBody(x))", "exists x y.(Microorganism(x) & HumanBody(y) & PositiveImpactOn(x,y))", "exists x.(Microorganism(x) & HasPositiveImpactOnHumanBody(x))", "exists x y.(Microorganism(x) & HumanBody(y) & HasPositiveImpact(x,y))", "exists x y.(Microorganism(x) & Microorganism(y) & PositiveImpactOnHumanBody(x,y))", "exists x y.((Microorganism(x) & HumanBody(y)) -> PositiveImpact(x,y))", "exists x y.(Microorganism(x) & HumanBody(y) & PositiveImpact(x))", "exists x y.(Microorganism(x) & Microorganism(y) & PositiveImpactOnHumanBody(x))", "exists x.(Microorganism(x) & PositiveImpact(x) & HumanBody(x))", "exists x.(Miniorganism(x) & PositiveImpactOnHumanBody(x))", "exists x.(Microorganism(x) & PositiveImpact(x) & OnHumanBody(x))", "exists x y.(Microorganism(x) & HumanBody(y) & PositiveInfluence(x,y))", "exists x.(Microorganism(x) & HasPositiveImpact(x))"]}
{"id": "entailmentbank_validation_619", "nl": "if something has a positive impact on another thing, then the relationship is benificial.", "fol": "", "prediction": ["all x.((PositiveImpact(x) & PositiveImpact(x)) -> BenificialRelationship(x))", "all x.((PositiveImpact(x) & PositiveImpactOnAnotherThing(x)) -> BenificialRelationship(x))", "all x y.((PositiveImpact(x) & PositiveImpact(y)) -> BenificialRelationship(x))", "all x y.((PositiveImpact(x) & PositiveImpact(y)) -> BenificialRelationship(x,y))", "all x y.((PositiveImpact(x,y) & PositiveImpact(x,y)) -> BenificialRelationship(x))", "all x y.((PositiveImpact(x,y) & PositiveImpact(y)) -> BenificialRelationship(x))", "all x y.((PositiveImpact(x,y) & PositiveImpact(y)) -> BenificialRelationship(x,y))", "all x y.((PositiveImpact(x) & PositiveImpact(y) & PositiveImpact(x,y)) -> BenificialRelationship(x))", "all x.((PositiveImpact(x) & PositiveImpactOnOtherThing(x)) -> BenificialRelationship(x))", "all x y.((PositiveImpact(x) & PositiveImpact(x) & PositiveImpact(y)) -> BenificialRelationship(x))", "all x.(PositiveImpact(x) -> BenificialRelationship(x))", "all x y.((PositiveImpact(x,y) & PositiveImpact(x,y)) -> BenificialRelationship(x,y))", "all x y.((PositiveImpact(x) & PositiveImpact(x,y)) -> BenificialRelationship(x))", "all x.((PositiveImpact(x) & PositiveImpact(x)) -> BenificialRelationship(x))", "all x y.((PositiveImpact(x) & PositiveImpact(x) & PositiveImpact(y)) -> BenificialRelationship(x,y))", "all x y.((PositiveImpact(x) & PositiveImpactOn(y,x)) -> BenificialRelationship(x))"]}
{"id": "entailmentbank_validation_620", "nl": "some microorganisms are benificial to human body.", "fol": "", "prediction": ["exists x.(Microorganism(x) & BenificialToHumanBody(x))", "exists x.(Microorganism(x) & BenificialToHumanBody(x))", "exists x y.(Microorganism(x) & HumanBody(y) & BenificialTo(x,y))", "exists x y.(Microorganism(x) & HumanBody(y) & BenificialTo(x,y))", "exists x.(Microorganism(x) & BeenificialToHumanBody(x))", "exists x y.(Microorganism(x) & HumanBody(y) & Benificial(x,y))", "exists x y.((Microorganism(x) & HumanBody(y)) -> BenificialTo(x,y))", "exists x y.(Microorganism(x) & HumanBody(y) & Benificial(x,y))", "exists x.(Miniorganism(x) & BenificialToHumanBody(x))", "exists x.(Microorganism(x) & NeonificialToHumanBody(x))", "exists x.(Microorganism(x) & B\u00e9nificialToHumanBody(x))", "exists x.(Microorganism(x) & BinificialToHumanBody(x))", "exists x.(Microorganism(x) & Benificial(x))", "exists x.(Microorganism(x) & BenificialToHumanBody(x))", "exists x.(MicrobialOrganism(x) & BenificialToHumanBody(x))", "exists x y.((Microorganism(x) & HumanBody(y)) -> BenificialTo(x,y))"]}
{"id": "entailmentbank_validation_621", "nl": "disease-causing microbes have a negative impact on the body.", "fol": "", "prediction": ["all x.((Microbe(x) & DiseaseCausing(x)) -> NegativeImpactOnBody(x))", "all x.(DiseaseCausingMicrobe(x) -> NegativeImpactOnBody(x))", "all x.(Microbe(x) -> (DiseaseCausing(x) & NegativeImpactOnBody(x)))", "all x y.((DiseaseCausingMicrobe(x) & Body(y)) -> NegativeImpact(x,y))", "all x.((Microbe(x) & DiseaseCausing(x)) -> NegativeImpact(x))", "all x.(DiseaseCausingMicrobes(x) -> NegativeImpactOnBody(x))", "all x y.((Microbe(x) & DiseaseCausing(x) & Body(y)) -> NegativeImpact(x,y))", "all x.((Microbe(x) & CausesDisease(x)) -> NegativeImpactOnBody(x))", "all x.(Microbe(x) -> (DiseaseCausing(x) & NegativeImpact(x)))", "all x y.((Microbe(x) & DiseaseCausing(x)) -> NegativeImpactOnBody(x))", "all x y.((Microbe(x) & DiseaseCausing(x)) -> NegativeImpactOnBody(x,y))", "all x y.((Microbe(x) & DiseaseCausing(x)) -> NegativeImpactOnBody(y))", "all x y.((DiseaseCausingMicrobe(x) & Body(y)) -> NegativeImpactOn(x,y))", "all x y.((Microbe(x) & DiseaseCausing(x,y)) -> NegativeImpactOnBody(x))", "all x.(DiseaseCausingMicrobe(x) -> NegativeImpact(x))", "all x.((DiseaseCausingMicrobe(x) & NegativeImpactOnBody(x)) -> Microbe(x))"]}
{"id": "entailmentbank_validation_622", "nl": "if something has a negative impact on another thing, then the relationship is harmful.", "fol": "", "prediction": ["all x.((NegativeImpact(x) & NegativeImpact(x)) -> HarmfulRelationship(x))", "all x.((NegativeImpact(x) & NegativeImpactOnAnotherThing(x)) -> HarmfulRelationship(x))", "all x y.((NegativeImpact(x) & NegativeImpact(y)) -> HarmfulRelationship(x,y))", "all x.((PositiveImpact(x) & NegativeImpact(x)) -> HarmfulRelationship(x))", "all x y.((PositiveImpact(x) & NegativeImpact(y)) -> HarmfulRelationship(x,y))", "all x y.((NegativeImpact(x,y) & NegativeImpact(x,y)) -> HarmfulRelationship(x))", "all x y.((NegativeImpact(x,y) & NegativeImpact(y)) -> HarmfulRelationship(x))", "all x y.((NegativeImpact(x,y) & NegativeImpact(y)) -> HarmfulRelationship(x,y))", "all x y.((NegativeImpact(x) & NegativeImpact(y)) -> HarmfulRelationship(x))", "all x y.((Relationship(x) & NegativeImpact(x,y)) -> Harmful(x))", "all x y.((PositiveImpact(x,y) & NegativeImpact(x,y)) -> HarmfulRelationship(x))", "all x y.((NegativeImpact(x,y) & NegativeImpact(x,y)) -> HarmfulRelationship(x,y))", "all x y.((Relationship(x) & NegativeImpact(x) & NegativeImpact(y)) -> Harmful(x))", "all x y.((PositiveImpact(x) & NegativeImpact(y)) -> HarmfulRelationship(x))", "all x y.((PositiveImpact(x,y) & NegativeImpact(y)) -> HarmfulRelationship(x))", "all x y.((PositiveImpact(x,y) & NegativeImpact(y)) -> HarmfulRelationship(x,y))"]}
{"id": "entailmentbank_validation_623", "nl": "some disease-causing microbes are harmful to human body.", "fol": "", "prediction": ["exists x.(DiseaseCausingMicrobe(x) & HarmfulToHumanBody(x))", "exists x.(Microbe(x) & DiseaseCausing(x) & HarmfulToHumanBody(x))", "exists x.(Microbe(x) & CausesDisease(x) & HarmfulToHumanBody(x))", "exists x.((Microbe(x) & DiseaseCausing(x)) -> HarmfulToHumanBody(x))", "exists x.(DiseaseCausing(x) & Microbe(x) & HarmfulToHumanBody(x))", "exists x y.(DiseaseCausingMicrobe(x) & HumanBody(y) & HarmfulTo(x,y))", "exists x y.(Microbe(x) & DiseaseCausing(x) & HumanBody(y) & HarmfulTo(x,y))", "exists x.(DiseaseCausingMicrobe(x) & HarmfulToHumanBody(x))", "exists x.(DiseaseCausingMinibe(x) & HarmfulToHumanBody(x))", "exists x.(Microbial(x) & DiseaseCausing(x) & HarmfulToHumanBody(x))", "exists x.(Microbe(x) & DiseaseCausing(x) & HarmfulToHumanBody(x))", "exists x y.(Microbe(x) & DiseaseCausing(x,y) & HumanBody(y) & HarmfulTo(x,y))", "exists x.(DeathCausingMicrobe(x) & HarmfulToHumanBody(x))", "exists x y.(DiseaseCausingMicrobe(x) & HumanBody(y) & Harmful(x,y))", "exists x.(DiseaseCausingMicrobes(x) & HarmfulToHumanBody(x))", "exists x y.(Microbe(x) & DiseaseCausing(x) & HumanBody(y) & Harmful(x,y))"]}
{"id": "entailmentbank_validation_624", "nl": "the relationship between human and microorganisms is sometimes beneficial and sometimes harmful.", "fol": "", "prediction": ["all x y.((Human(x) & Microorganism(y)) -> (BeneficialRelationship(x,y) | HarmfulRelationship(x,y)))", "all x.((Relationship(x) & Human(x) & Microorganism(x)) -> (Beneficial(x) | Harmful(x)))", "all x.((Human(x) & Microorganism(x)) -> (BeneficialRelationship(x) | HarmfulRelationship(x)))", "all x.((Relationship(x) & Human(x) & Microorganism(x)) -> (Benefitful(x) | Harmful(x)))", "all x y.((Human(x) & Microorganism(y)) -> (BenefitfulRelationship(x,y) | HarmfulRelationship(x,y)))", "all x y.((Human(x) & Microorganism(y)) -> (Benefitful(x) | Harmful(x)))", "all x.((Human(x) & Microorganism(x)) -> (Beneficial(x) | Harmful(x)))", "all x.((Human(x) & Microorganism(x)) -> (BenefitfulRelationship(x) | HarmfulRelationship(x)))", "all x.((Human(x) & Microorganism(x)) -> (Benefitful(x) | Harmful(x)))", "all x y z.((Human(x) & Microorganism(y) & Relationship(z)) -> (Beneficial(z) | Harmful(z)))", "all x y.((Human(x) & Microorganism(y)) -> (Beneficial(x) | Harmful(x)))", "all x y.((Human(x) & Microorganism(y)) -> (BeneficialRelationship(x) | HarmfulRelationship(x)))", "all x y z.((Human(x) & Microorganism(y) & Relationship(z)) -> (Benefitful(z) | Harmful(z)))", "all x y.((Human(x) & Microorganism(y)) -> (BenefitfulRelationship(x) | HarmfulRelationship(x)))", "all x y.((Human(x) & Microorganism(y) & Relationship(x,y)) -> (Beneficial(x) | Harmful(x)))", "all x y.((Human(x) & Microorganism(y) & Relationship(x,y)) -> (Benefitful(x) | Harmful(x)))"]}
{"id": "entailmentbank_validation_625", "nl": "water is a kind of nonliving thing.", "fol": "", "prediction": ["all x.(Water(x) -> NonlivingThing(x))", "all x.(Water(x) -> NonLivingThing(x))", "all x.((Water(x) & NonLivingThing(x)) -> NonLivingThing(x))", "all x.((Water(x) & NonlivingThing(x)) -> NonlivingThing(x))", "all x.((Water(x) & NonLivingThing(x)) -> NonlivingThing(x))", "all x.(Water(x) -> NonlivingThing(x))", "all x y.((Water(x) & NonlivingThing(y)) -> NonlivingThing(x))", "all x.(Water(x) -> -LivingThing(x))", "all x.(Water(x) -> NonLivingThing(x))", "all x y.((Water(x) & NonLivingThing(y)) -> NonLivingThing(x))", "all x y.((Water(x) & NonLivingThing(y)) -> NonlivingThing(x))", "all x.((Water(x) & NonlivingThing(x)) -> NonLivingThing(x))", "all x y.((Water(x) & NonlivingThing(y)) -> NonlivingThing(x,y))", "all x.((Water(x) & NonLivingThing(x)) -> -LivingThing(x))", "all x y.((Water(x) & NonLivingThing(y)) -> NonLivingThing(x,y))", "all x.((Water(x) & NonlivingThing(x)) -> -LivingThing(x))"]}
{"id": "entailmentbank_validation_626", "nl": "a river is a kind of body of water.", "fol": "", "prediction": ["all x.(River(x) -> BodyOfWater(x))", "all x.(River(x) -> BodyOfWater(x))", "all x.(River(x) -> (BodyOfWater(x)))", "all x.(River(x) -> TypeOfWater(x))", "all x y.((River(x) & BodyOfWater(y)) -> Is(x,y))", "all x.(River(x) -> (BodyOfWater(x) & -BodyOfWater(x)))", "all x y.((River(x) & BodyOfWater(y)) -> Water(x))", "all x y.((River(x) & Water(y)) -> BodyOfWater(x,y))", "all x.(River(x) -> (BodyOfWater(x)))", "all x.(River(x) -> (BodyOfWater(x) & Water(x)))", "all x.(River(x) -> (BodyOfWater(x) & BodyOfWater(x)))", "all x y.((River(x) & Water(y)) -> BodyOfWater(x))", "all x.(River(x) -> IsBodyOfWater(x))", "all x.(River(x) -> exists y.(BodyOfWater(y) & LocatedIn(x,y))))", "all x y.((River(x) & BodyOfWater(y)) -> Water(x,y))", "all x.(River(x) -> (BodyOfWater(x) & -BodyOfWater(x)))"]}
{"id": "entailmentbank_validation_627", "nl": "a river is a nonliving thing.", "fol": "", "prediction": ["all x.(River(x) -> NonlivingThing(x))", "all x.(River(x) -> NonLivingThing(x))", "all x.(River(x) -> NonLivingThing(x))", "all x.(River(x) -> -LivingThing(x))", "all x.(River(x) -> NonlivingThing(x))", "all x.((River(x) & NonLivingThing(x)) -> NonLivingThing(x))", "all x.((River(x) & NonLivingThing(x)) -> -LivingThing(x))", "all x.((River(x) & NonLivingThing(x)) -> NonlivingThing(x))", "all x y.((River(x) & NonLivingThing(y)) -> -LivingThing(x))", "all x y.((River(x) & NonLivingThing(y)) -> NonLivingThing(x))", "all x.(River(x) -> NonLivingDing(x))", "all x y.((River(x) & NonLivingThing(x)) -> -LivingThing(y))", "all x y.((River(x) & NonLivingThing(x)) -> NonLivingThing(y))", "all x.((River(x) & NonLivingThing(x)) -> NotLivingThing(x))", "all x.(River(x) -> NonlivingDing(x))", "all x y.((River(x) & NonLivingThing(x)) -> NonLivingThing(x))"]}
{"id": "entailmentbank_validation_628", "nl": "preferences are generally learned characteristics.", "fol": "", "prediction": ["all x.(Preference(x) -> LearnedCharacteristics(x))", "all x.(Preferences(x) -> LearnedCharacteristics(x))", "all x.(Preference(x) -> LearnedCharacteristic(x))", "all x.((Preference(x) & LearnedCharacteristics(x)) -> LearnedCharacteristics(x))", "all x.(Preference(x) -> LearnedCaracteristics(x))", "all x.(Private(x) -> LearnedCharacteristics(x))", "all x.(Preferred(x) -> LearnedCharacteristics(x))", "all x y.((Preference(x) & Preference(y)) -> LearnedCharacteristics(x))", "all x y.((Preference(x) & Preference(y)) -> LearnedCharacteristics(x,y))", "all x.(Preferentials(x) -> LearnedCharacteristics(x))", "all x.(Privacy(x) -> LearnedCharacteristics(x))", "all x.((Preference(x) & LearnedCharacteristics(x)) -> Learned(x))", "all x.(Preferences(x) -> LearnedCharacteristic(x))", "all x.(Prefers(x) -> LearnedCharacteristics(x))", "all x.(Preference(x) -> LearnedCaracteristic(x))", "all x.((Preference(x) & LearnedCharacteristics(x)) -> LearnedCaracteristics(x))"]}
{"id": "entailmentbank_validation_629", "nl": "a food preference is a kind of preference.", "fol": "", "prediction": ["all x.(FoodPreference(x) -> Preference(x))", "all x.((FoodPreference(x) & Preference(x)) -> Preference(x))", "all x.(FoodPreference(x) -> Preference(x))", "all x.(FoodPreferred(x) -> Preference(x))", "all x y.((FoodPreference(x) & Food(y)) -> Preference(x,y))", "all x y.((FoodPreference(x) & Preference(y)) -> Preference(x,y))", "all x.(FoodPurpose(x) -> Preference(x))", "all x.(FoodPath(x) -> Preference(x))", "all x.(FoodPriority(x) -> Preference(x))", "all x y.((FoodPreference(x) & Food(y)) -> Preference(x))", "exists x.(FoodPreference(x) & Preference(x))", "all x.(FoodPr\u00e4ference(x) -> Preference(x))", "all x.(FoodPreference(x) -> Preferential(x))", "all x.(FoodPreference(x) -> SortOfPreference(x))", "all x.exists y.(FoodPreference(x) & Food(y) & Preference(x,y))", "all x y.((FoodPreference(x) & Preference(y)) -> Preference(x))"]}
{"id": "entailmentbank_validation_630", "nl": "food preference is a kind of learned characteristics.", "fol": "", "prediction": ["all x.(FoodPreference(x) -> LearnedCharacteristics(x))", "all x.(FoodPreference(x) -> LearnedCharacteristics(x))", "all x.(FoodPreference(x) -> LearntCharacteristics(x))", "all x.(FoodPreferred(x) -> LearnedCharacteristics(x))", "all x.((FoodPreference(x) & LearnedCharacteristics(x)) -> LearnedCharacteristics(x))", "all x.(FoodPreference(x) -> LearningCharacteristics(x))", "all x.(FoodPriority(x) -> LearnedCharacteristics(x))", "all x.(FoodPurpose(x) -> LearnedCharacteristics(x))", "all x.(FoodPreference(x) -> LearnedCharacteristic(x))", "all x.((FoodPreference(x) & LearnedCharacteristics(x)) -> LearningCharacteristics(x))", "all x.((FoodPreference(x) & LearnedCharacteristics(x)) -> LearnedCaracteristics(x))", "all x y.((FoodPreference(x) & LearnedCharacteristics(y)) -> LearnedCharacteristics(x))", "all x y.((FoodPreference(x) & LearnedCharacteristics(y)) -> LearnedCharacteristics(x,y))", "all x.((FoodPreference(x) & LearnedCharacteristics(x)) -> Learned(x))", "all x.(FoodPreferred(x) -> LearnedCharacteristics(x))", "all x.(FoodPreferential(x) -> LearnedCharacteristics(x))"]}
{"id": "entailmentbank_validation_631", "nl": "learned characteristics are similar to acquired characteristics.", "fol": "", "prediction": ["all x y.((LevedCharacteristic(x) & AcquiredCharacteristic(y)) -> SimilarTo(x,y))", "all x y.((LevedCharacteristics(x) & AcquiredCharacteristics(y)) -> SimilarTo(x,y))", "all x.(LearningCharacteristics(x) -> SimilarToAcquiredCharacteristics(x))", "all x y.((LevedCharacteristics(x) & AcquiredCharacteristics(y)) -> Similar(x,y))", "all x y.((LearnedCharacteristics(x) & AcquiredCharacteristics(y)) -> SimilarTo(x,y))", "all x y.((LearntCharacteristics(x) & AcquiredCharacteristics(y)) -> SimilarTo(x,y))", "all x y.((LearnedCharacteristic(x) & AcquiredCharacteristic(y)) -> SimilarTo(x,y))", "all x y.((LevedCharacteristic(x) & AcquiredCharacteristic(y)) -> Similar(x,y))", "all x y.((LevenedCharacteristics(x) & AcquiredCharacteristics(y)) -> SimilarTo(x,y))", "all x y.((LecturedCharacteristics(x) & AcquiredCharacteristics(y)) -> SimilarTo(x,y))", "all x.((LevedCharacteristics(x) & AcquiredCharacteristics(x)) -> SimilarTo(x,AcquiredCharacteristics))", "all x.((LevedCharacteristics(x) & AcquiredCharacteristics(x)) -> Similar(x))", "all x y.((LearntCharacteristic(x) & AcquiredCharacteristic(y)) -> SimilarTo(x,y))", "all x y.((LevedCharacteristic(x) & AcquiredCharacteristics(y)) -> SimilarTo(x,y))", "all x y.((Lecture(x) & AcquiredCharacteristics(y)) -> SimilarTo(x,y))", "all x.((LevedCharacteristics(x) & AcquiredCharacteristics(x)) -> SimilarTo(x,acquiredCharacteristics))"]}
{"id": "entailmentbank_validation_632", "nl": "food preference is a kind of acquired characteristics.", "fol": "", "prediction": ["all x.(FoodPreference(x) -> AcquiredCharacteristics(x))", "all x.(FoodPreference(x) -> AcquiredCharacteristics(x))", "all x.(FoodPreference(x) -> AchievedCharacteristics(x))", "all x.(FoodPreference(x) -> AcquiredCharacteristics(x))", "all x.(FoodPreference(x) -> AppropriateCharacteristics(x))", "all x.(FoodPreferred(x) -> AcquiredCharacteristics(x))", "all x.(FoodPreference(x) -> AwakenedCharacteristics(x))", "all x.(FoodPriority(x) -> AcquiredCharacteristics(x))", "all x.(FoodPreference(x) -> AppointedCharacteristics(x))", "all x.(FoodPreference(x) -> AcquiredCaracteristics(x))", "all x.(FoodPreference(x) -> AquiredCharacteristics(x))", "all x.(FoodPreference(x) -> AchievedCharacteristics(x))", "all x.(FoodPreference(x) -> HasAcquiredCharacteristics(x))", "all x.(FoodPreference(x) -> AcquiredCharacteristics(x))", "exists x.(FoodPreference(x) & AcquiredCharacteristics(x))", "all x.((FoodPreference(x) & AcquiredCharacteristics(x)) -> Appropriate(x))"]}
{"id": "entailmentbank_validation_633", "nl": "an animal is a kind of organism.", "fol": "", "prediction": ["all x.(Animal(x) -> Organism(x))", "all x y.((Animal(x) & Organism(y)) -> Organism(x))", "all x y.((Animal(x) & Organism(y)) -> Organism(x,y))", "all x.(Animal(x) -> Organism(x))", "all x y z.((Animal(x) & Organism(y) & Organism(z)) -> Organism(x))", "all x y z.((Animal(x) & Organism(y) & Organism(z)) -> Organism(x,y,z))", "all x.exists y.(Animal(x) & Organism(y) & Organism(x,y))", "all x.exists y.(Animal(x) & Organism(y) & Organism(x))", "all x.((Animal(x) & Organism(x)) -> Organism(x))", "all x y z.((Animal(x) & Organism(y) & Organism(z)) -> Organism(x,y))", "all x.exists y.(Animal(x) & Organism(y) & Organism(x) & Organism(y))", "all x.exists y.(Animal(x) & Organism(y) & Organism(y))", "all x y.((Animal(x) & Organism(y)) -> SortOf(x,y))", "exists x.(Animal(x) & Organism(x))", "all x y.((Animal(x) & Organism(y)) -> Organospheric(x))", "all x.(Animal(x) -> Organospheric(x))"]}
{"id": "entailmentbank_validation_634", "nl": "a dog is a kind of animal.", "fol": "", "prediction": ["all x.(Dog(x) -> Animal(x))", "all x y.((Dog(x) & Animal(y)) -> Animal(x))", "all x.(Dog(x) -> Animal(x))", "all x y.((Dog(x) & Animal(y)) -> Animal(x,y))", "exists x.(Dog(x) & Animal(x))", "all x y z.((Dog(x) & Animal(y) & Animal(z)) -> Animal(x))", "all x y z.((Dog(x) & Animal(y) & Animal(z)) -> Animal(x,y,z))", "all x.exists y.(Dog(x) & Animal(y) & Breed(x,y))", "all x y.((Dog(x) & Animal(y)) -> KindOf(x,y))", "all x.exists y.(Dog(x) & Animal(y) & Dog(x) & Animal(y))", "all x.exists y.(Dog(x) & Animal(y) & Animated(x))", "all x y z.((Dog(x) & Animal(y) & Animal(z)) -> Animal(x,y))", "all x.exists y.(Dog(x) & Animal(y) & Animal(y))", "all x.exists y.(Dog(x) & Animal(y) & Animal(x))", "all x.exists y.(Dog(x) & Animal(y) & Animal(x,y))", "all x.exists y.(Dog(x) & Animal(y) & Has(x,y))"]}
{"id": "entailmentbank_validation_635", "nl": "a dog is a kind of organism.", "fol": "", "prediction": ["all x.(Dog(x) -> Organism(x))", "all x y.((Dog(x) & Organism(y)) -> Organism(x))", "all x.(Dog(x) -> Organism(x))", "all x y.((Dog(x) & Organism(y)) -> Organism(x,y))", "exists x.(Dog(x) & Organism(x))", "all x y z.((Dog(x) & Organism(y) & Organism(z)) -> Organism(x,y,z))", "all x y z.((Dog(x) & Organism(y) & Organism(z)) -> Organism(x))", "all x y.((Dog(x) & Organism(y)) -> SortOf(x,y))", "all x y.((Dog(x) & Organism(y)) -> Organospheric(x))", "all x y.((Dog(x) & Organism(y)) -> KindOf(x,y))", "all x.(Dog(x) -> Organospheric(x))", "all x y.((Dog(x) & Organism(y)) -> Is(x,y))", "all x y z.((Dog(x) & Organism(y) & Organism(z)) -> Organism(x,y))", "all x.exists y.(Dog(x) & Organism(y) & Organism(x,y))", "all x y.((Dog(x) & Organism(y)) -> Animal(x))", "all x y.((Dog(x) & Organism(y)) -> Organospheric(x,y))"]}
{"id": "entailmentbank_validation_636", "nl": "an organism's environment affects that organism's acquired characteristics.", "fol": "", "prediction": ["all x y.((Organism(x) & Environment(y)) -> AffectsAcquiredCharacteristics(x,y))", "all x y z.((Organism(x) & Environment(y) & AcquiredCharacteristics(z)) -> Affects(x,y,z))", "all x y z.((Organism(x) & Environment(y) & AcquiredCharacteristics(z)) -> Affects(x,y,z))", "all x y.((Organism(x) & Environment(y) & AffectsAcquiredCharacteristics(x,y)) -> AffectsAcquiredCharacteristics(x,y))", "all x y.((Organism(x) & Environment(y)) -> AffectsApprovedCharacteristics(x,y))", "all x y.((Organism(x) & Environment(y)) -> AffectsAcquiredCharacteristics(y,x))", "all x y.((Organism(x) & Environment(y)) -> AffectsAppropriateCharacteristics(x,y))", "all x.((Organism(x) & Environment(x)) -> AffectsAcquiredCharacteristics(x))", "all x y z.((Organism(x) & Environment(y) & AcquiredCharacteristics(z)) -> Affects(y,z))", "all x y.((Organism(x) & Environment(y)) -> AffectsAcquiredCaracteristics(x,y))", "all x y.((Organism(x) & Environment(y) & AcquiredCharacteristics(x,y)) -> Affects(x,y))", "all x y.((Organism(x) & Environment(x,y)) -> AffectsAcquiredCharacteristics(x,y))", "all x y z.((Organism(x) & Environment(y) & AcquiredCharacteristics(z)) -> AffectsAcquiredCharacteristics(x,y,z))", "all x y.((Organism(x) & Environment(y) & AffectedCharacteristics(x,y)) -> Affects(x,y))", "all x y z.((Organism(x) & Environment(y) & AcquiredCharacteristics(z)) -> AffectsAcquiredCharacteristics(x,y,z))", "all x y z.((Organism(x) & Environment(y) & AcquiredCharacteristics(z)) -> Affects(y,z))"]}
{"id": "entailmentbank_validation_637", "nl": "the food preference of a dog is affected by its environment.", "fol": "", "prediction": ["all x y.((Dog(x) & Environment(y)) -> FoodPreferenceAffectedBy(x,y))", "all x y.((Dog(x) & Environment(y)) -> AffectedByFoodPreference(x,y))", "all x.(Dog(x) -> AffectedByEnvironment(x))", "all x y z.((Dog(x) & FoodPreference(y) & Environment(z)) -> AffectedBy(x,y,z))", "all x y.((Dog(x) & FoodPreference(y)) -> AffectedByEnvironment(x,y))", "all x.((Dog(x) & FoodPreference(x)) -> AffectedByEnvironment(x))", "all x y.((Dog(x) & Environment(y)) -> FoodPreferenceAffected(x,y))", "all x y.((Dog(x) & Environment(y)) -> FoodPreferred(x,y))", "all x.((Dog(x) & FoodPreferenceAffectedByEnvironment(x)) -> AffectedByEnvironment(x))", "all x y z.((Dog(x) & Environment(y) & FoodPreference(z)) -> AffectedBy(x,y,z))", "all x y.((Dog(x) & Environment(y)) -> FoodPriorityAffectedBy(x,y))", "all x.((Dog(x) & FoodPreferred(x)) -> AffectedByEnvironment(x))", "all x y z.((Dog(x) & Environment(y) & FoodPreference(z)) -> AffectedBy(x,z))", "all x y.((Dog(x) & Environment(y)) -> FoodPr\u00e4ferenceAffectedBy(x,y))", "all x.(Dog(x) -> FoodPreferenceAffectedByEnvironment(x))", "all x y.((Dog(x) & Environment(y)) -> FoodPreference(x,y))"]}
{"id": "entailmentbank_validation_638", "nl": "following orders is a learned characteristic.", "fol": "", "prediction": ["all x.((Order(x) & FollowingOrder(x)) -> LearnedCharacteristic(x))", "all x.((Order(x) & Follows(x)) -> LearnedCharacteristic(x))", "all x.((Order(x) & Following(x)) -> LearnedCharacteristic(x))", "all x.((Order(x) & FollowingOrders(x)) -> LearnedCharacteristic(x))", "all x.(LearntCharacteristic(x) -> FollowingOrders(x))", "all x y.((Order(x) & Order(y)) -> LearnedCharacteristic(x))", "all x.((Order(x) & Followed(x)) -> LearnedCharacteristic(x))", "all x.(LearntCharacteristic(x) -> FollowsOrders(x))", "all x y.((Order(x) & Order(y)) -> LearnedCharacteristic(x,y))", "all x.(LearntCharacteristic(x) -> FollowsOrders(x))", "all x.(LearntCharacteristic(x) -> FollowingOrders(x))", "all x.((Order(x) & Follows(x,y)) -> LearnedCharacteristic(x))", "all x.((Order(x) & FollowingOrder(x)) -> LearntCharacteristic(x))", "all x.((Orders(x) & Following(x)) -> LearnedCharacteristic(x))", "all x.((Order(x) & Follows(x)) -> LearntCharacteristic(x))", "all x.((Order(x) & Following(x)) -> LearntCharacteristic(x))"]}
{"id": "entailmentbank_validation_639", "nl": "an example of following orders is coming when called.", "fol": "", "prediction": ["all x.((ExempleOfFollowingOrders(x) & Called(x)) -> Coming(x))", "all x.((ExempleOfFollowingOrders(x) & Called(x)) -> Coming(x))", "all x.((ExempleOfFollowingOrders(x) & Called(x)) -> Coming(x))", "all x.((ExempleOfFollowingOrders(x) & Called(x)) -> Coming(x))", "all x.((ExempleOfFollingOrders(x) & Called(x)) -> Coming(x))", "all x.((ExempleOfFollingOrders(x) & Called(x)) -> Coming(x))", "all x.((Exemple(x) & Called(x)) -> FollowingOrders(x))", "all x.((Exemple(x) & FollowsOrders(x)) -> ComingWhenCalled(x))", "all x y.((Exemple(x) & Call(y) & FollowingOrders(x,y)) -> Coming(x))", "all x y.((Exemple(x) & Call(y) & FollowsOrders(x,y)) -> Coming(x))", "all x.((ExempleOfFollowingOrders(x) & Called(x)) -> ComingWhenCalled(x))", "all x.((ExempleOfFollowingOrders(x) & Called(x)) -> ComingWhenCalled(x))", "all x y.((Exemple(x) & Order(y) & Called(x)) -> Following(x,y))", "all x.((Exemple(x) & Called(x)) -> FollowsOrders(x))", "all x y.((Exemple(x) & Order(y) & Called(x)) -> Following(x,y))", "all x y.((Exemple(x) & Call(y)) -> FollowingOrders(x,y))"]}
{"id": "entailmentbank_validation_640", "nl": "a dog coming when called is a kind of learned characteristic.", "fol": "", "prediction": ["all x.((Dog(x) & ComesWhenCalled(x)) -> LearnedCharacteristic(x))", "all x.((Dog(x) & ComingWhenCalled(x)) -> LearnedCharacteristic(x))", "all x.((Dog(x) & ComesWhenCalled(x)) -> LearnedCharacteristic(x))", "all x.((Dog(x) & Called(x)) -> LearnedCharacteristic(x))", "all x.((Dog(x) & ComingWhenCall(x)) -> LearnedCharacteristic(x))", "all x.(ComingWhenCalled(x) -> LearnedCharacteristic(x))", "all x.((Dog(x) & ComesWhenCall(x)) -> LearnedCharacteristic(x))", "all x.((Dog(x) & ComingWhenCalled(x)) -> LearnedCharacteristic(x))", "all x.(ComesWhenCalled(x) -> LearnedCharacteristic(x))", "all x y.((Dog(x) & ComingWhenCalled(x)) -> LearnedCharacteristic(y))", "all x.((Dog(x) & ComesWhenCalled(x)) -> LearntCharacteristic(x))", "all x.((Dog(x) & ComesWhenCalled(x)) -> LearningCharacteristic(x))", "all x.((Dog(x) & ComingWhenCalled(x)) -> LearningCharacteristic(x))", "all x.((Dog(x) & ComingWhenCalled(x)) -> LearntCharacteristic(x))", "all x y.((Dog(x) & ComesWhenCalled(x)) -> LearnedCharacteristic(y))", "all x.((Dog(x) & ComesWhenCalled(x)) -> LearnedCaracteristic(x))"]}
{"id": "entailmentbank_validation_641", "nl": "hunting is a kind of skill.", "fol": "", "prediction": ["all x.(Hunting(x) -> Skill(x))", "all x.(Hunting(x) -> Skill(x))", "all x y.((Hunting(x) & Skill(y)) -> Skill(x))", "all x y.((Hunting(x) & Skill(y)) -> Skill(x,y))", "all x.(Hooting(x) -> Skill(x))", "all x.(Hounting(x) -> Skill(x))", "all x y.((Hunting(x) & Skill(y)) -> Skill(y))", "all x.((Hunting(x) & Skill(x)) -> Skill(x))", "all x.(HuntingSkill(x) -> Skill(x))", "all x y.((Hunting(x) & Skill(y)) -> ArtOf(x,y))", "all x y.((Hunting(x) & Skill(y)) -> Skill(z))", "all x.(Hunting(x) -> Skills(x))", "all x.(Hunting(x) -> ArtOfSkill(x))", "all x.(Hiking(x) -> Skill(x))", "all x y.((Hunting(x) & Skill(y)) -> Skills(x))", "all x y.((Hunting(x) & Skill(x)) -> Skill(y))"]}
{"id": "entailmentbank_validation_642", "nl": "skills are learned characteristics / behaviors.", "fol": "", "prediction": ["all x.(Skill(x) -> (LecturedCharacteristics(x) | LearnedBehaviors(x)))", "all x.(Skill(x) -> LearnedCharacteristics(x))", "all x.(Skill(x) -> (LecturedCharacteristics(x) & LearnedBehaviors(x)))", "all x.(Skill(x) -> (LesserCharacteristics(x) & LesserBehaviors(x)))", "all x.(Skill(x) -> (LearnedCharacteristics(x) & LearnedBehaviors(x)))", "all x.(Skill(x) -> (LearnedCharacteristics(x) | LearnedBehaviors(x)))", "all x.(Skill(x) -> LearnedCharacteristicsOrBehaviors(x))", "all x y.((Skill(x) & LearnedCharacteristics(y)) -> LearnedBehaviors(x,y))", "all x.(Skill(x) -> (LearnsCharacteristics(x) & LearnsBehaviors(x)))", "all x.(Skill(x) -> (LearntCharacteristics(x) & LearnedBehaviors(x)))", "all x.(Skill(x) -> (LearnsCharacteristics(x) | LearnsBehaviors(x)))", "all x.(Skill(x) -> (LevedCharacteristics(x) | LearnedBehaviors(x)))", "all x.(Skill(x) -> (LecturedCharacteristics(x) & LecturedBehaviors(x)))", "all x.(Skill(x) -> (LearntCharacteristics(x) | LearnedBehaviors(x)))", "all x.(Skill(x) -> (LearnedCharacteristics(x) & LearnedBehaviors(x)))", "all x.((Skill(x) & LearnedCharacteristics(x)) -> LearnedBehaviors(x))"]}
{"id": "entailmentbank_validation_643", "nl": "hunting is a kind of learned behaviors.", "fol": "", "prediction": ["all x.(Hunting(x) -> LearnedBehavior(x))", "all x.(Hunting(x) -> LearnedBehaviors(x))", "all x.(Hunting(x) -> LearnedBehavior(x))", "all x.(Hunting(x) -> LearnedBodies(x))", "all x.(Hooting(x) -> LearnedBehavior(x))", "all x.(Hunting(x) -> LearningBehavior(x))", "all x.(Hunting(x) -> LearntBehavior(x))", "all x y.((Hunting(x) & LearnedBehavior(y)) -> LearnedBehavior(x,y))", "all x y.((Hunting(x) & LearnedBehavior(y)) -> LearnedBehavior(x))", "all x.((Hunting(x) & LearnedBehavior(x)) -> LearnedBehavior(x))", "all x.(Hunting(x) -> LearnedBehaviors(x))", "all x y.((Hunting(x) & LearningBehavior(y)) -> LearnedBehavior(x))", "all x y.((Hunting(x) & LearningBehavior(y)) -> LearnedBehavior(x,y))", "all x.(Hunting(x) -> LearnedBehavioral(x))", "all x.(Hunting(x) -> LearnedBehaviorals(x))", "all x y.((Hunting(x) & LearningBehavior(y)) -> LearningBehavior(x,y))"]}
{"id": "entailmentbank_validation_644", "nl": "inherited characteristics are the opposite of learned characteristics.", "fol": "", "prediction": ["all x y.((EarnedCharacteristics(x) & LearnedCharacteristics(y)) -> OppositeOf(x,y))", "all x y.((ErasedCharacteristics(x) & LearnedCharacteristics(y)) -> OppositeOf(x,y))", "all x.(EarnedCharacteristics(x) -> OppositeOfLevedCharacteristics(x))", "all x.(EarnedCharacteristics(x) -> OppositeOfLecturedCharacteristics(x))", "all x.((EarnedCharacteristics(x) & LearnedCharacteristics(x)) -> Opposite(x))", "all x.(EarnedCharacteristics(x) -> OppositeOfLearntCharacteristics(x))", "all x y.((EarnedCharacteristics(x) & LearnedCharacteristics(y)) -> Opposite(x,y))", "all x.((EarnedCharacteristics(x) & LearnedCharacteristics(x)) -> OppositeOf(x,LearningCharacteristics))", "all x.(EarnedCharacteristics(x) -> OppositeOfLedgedCharacteristics(x))", "all x.((EarnedCharacteristics(x) & LearnedCharacteristics(x)) -> OppositeOf(x,learningCharacteristics))", "all x.((ErasedCharacteristics(x) & LearnedCharacteristics(x)) -> Opposite(x))", "all x y.((EarnedCharacteristic(x) & LearnedCharacteristic(y)) -> OppositeOf(x,y))", "all x y.((ErasedCharacteristics(x) & LearnedCharacteristics(y)) -> Opposite(x,y))", "all x y.((ErasedCharacteristic(x) & LearnedCharacteristic(y)) -> OppositeOf(x,y))", "all x.((ErasedCharacteristics(x) & LearnedCharacteristics(x)) -> OppositeOf(x,LearningCharacteristics))", "all x.(EarnedCharacteristics(x) -> OppositeOfLesserCharacteristics(x))"]}
{"id": "entailmentbank_validation_645", "nl": "learned characteristics are not inherited from parents.", "fol": "", "prediction": ["all x.(LearningCharacteristics(x) -> -EarnedFromParents(x))", "all x.(LearningCharacteristics(x) -> -ErasedFromParents(x))", "all x y.((LevedCharacteristics(x) & Parent(y)) -> -EarnedFrom(x,y))", "all x.(LearningCharacteristics(x) -> -HeritagedFromParents(x))", "all x y.((LevedCharacteristics(x) & Parent(y)) -> -ErasedFrom(x,y))", "all x.(LecturedCharacteristics(x) -> -EarnedFromParents(x))", "all x y.((LearntCharacteristics(x) & Parent(y)) -> -EarnedFrom(x,y))", "all x.(LecturedCharacteristics(x) -> -ErasedFromParents(x))", "all x y.((LearnedCharacteristics(x) & Parent(y)) -> -ErasedFrom(x,y))", "all x.(LecturedCharacteristics(x) -> -HeritagedFromParents(x))", "all x y.((LevedCharacteristics(x) & Parent(y)) -> -inheritedFrom(x,y))", "all x.(LearningCharacteristics(x) -> -inheritedFromParents(x))", "all x y.((LevedCharacteristics(x) & Parent(y)) -> -HeritagedFrom(x,y))", "all x.(LevedCharacteristics(x) -> -HeritagedFromParents(x))", "all x.(LearningCharacteristics(x) -> -EarnedFromParent(x))", "all x y.((LearntCharacteristics(x) & Parent(y)) -> -HeritagedFrom(x,y))"]}
{"id": "entailmentbank_validation_646", "nl": "food preference is not inherited from parents.", "fol": "", "prediction": ["all x.(FoodPreference(x) -> -ErasedFromParents(x))", "all x.(FoodPreference(x) -> -EarnedFromParents(x))", "all x y.((FoodPreference(x) & Parent(y)) -> -ErasedFrom(x,y))", "all x y.((FoodPreference(x) & Parent(y)) -> -EarnedFrom(x,y))", "all x.(FoodPreference(x) -> -inheritedFromParents(x))", "all x y.((FoodPreference(x) & Parent(y)) -> -inheritedFrom(x,y))", "all x.(FoodPreference(x) -> -HeritagedFromParents(x))", "all x.(FoodPreference(x) -> -EarnedFromParent(x))", "all x y.((FoodPreference(x) & Parent(y)) -> -HeritagedFrom(x,y))", "all x.(FoodPreference(x) -> -HeritageFromParents(x))", "all x.(FoodPreference(x) -> -ErasedFromParent(x))", "all x.(FoodPreference(x) -> -InheritableFromParents(x))", "all x y.((FoodPreference(x) & Parent(y)) -> -InheritableFrom(x,y))", "all x y.((FoodPreference(x) & Parent(y)) -> -HasInheritance(x,y))", "all x y.((FoodPreference(x) & Parent(y)) -> -EinheritedFrom(x,y))", "all x.(FoodPreference(x) -> -InheritanceFromParents(x))"]}
{"id": "entailmentbank_validation_647", "nl": "the intelligence of animals is an acquired characteristic.", "fol": "", "prediction": ["all x.((Animal(x) & Intelligence(x)) -> AcquiredCharacteristic(x))", "all x.((AnimalIntelligence(x) & AcquiredCharacteristic(x)) -> Intelligence(x))", "all x y.((Animal(x) & Intelligence(y)) -> AcquiredCharacteristic(x,y))", "all x.(IntelligenceOfAnimals(x) -> AcquiredCharacteristic(x))", "all x.(IllnessOfAnimals(x) -> AcquiredCharacteristic(x))", "all x.(AnimalIntelligence(x) -> AcquiredCharacteristic(x))", "all x y.((Animal(x) & Intelligence(y)) -> AcquiredCharacteristic(x))", "all x.((Animal(x) & Intelligence(x)) -> AcquiredCaracteristic(x))", "all x.((AnimalIntelligence(x) & AcquiredCharacteristic(x)) -> Intelligence(x))", "all x y.((Animal(x) & Animal(y)) -> IntelligenceAcquiredCharacteristic(x,y))", "all x y z.((Animal(x) & Intelligence(y) & Animal(z)) -> AcquiredCharacteristic(x,y,z))", "all x.((AnimalIntelligence(x) & AcquiredCharacteristic(x)) -> AppropriateCharacteristic(x))", "all x.((Animal(x) & Intelligence(x)) -> AcquiredCharacteristic(x))", "all x.((AnimalIntelligence(x) & AcquiredCharacteristic(x)) -> AcquiredCharacteristic(x))", "all x y.((Animal(x) & Intelligence(y)) -> AcquiredCharacteristic(x,y))", "all x.((AnimalIntelligence(x) & AcquiredCharacteristic(x)) -> HasIntelligence(x))"]}
{"id": "entailmentbank_validation_648", "nl": "the intelligence of a human is an acquired characteristic.", "fol": "", "prediction": ["all x.(HumanIntelligence(x) -> AcquiredCharacteristic(x))", "all x.((Human(x) & Intelligence(x)) -> AcquiredCharacteristic(x))", "all x y.((Human(x) & Intelligence(y)) -> AcquiredCharacteristic(x,y))", "all x y.((Human(x) & Human(y)) -> AcquiredCharacteristic(x,y))", "all x y.((Human(x) & Human(y)) -> AcquiredCharacteristic(x,y))", "all x.((Human(x) & AcquiredCharacteristic(x)) -> Intelligence(x))", "all x y.((Human(x) & Human(y)) -> AppropriateCharacteristic(x,y))", "all x y.((Human(x) & Intelligence(y)) -> AcquiredCharacteristic(x))", "all x.(Human(x) -> AcquiredCharacteristic(x))", "all x.(Human(x) -> AcquiredCharacteristic(x))", "all x y.((Human(x) & Human(y)) -> IntelligenceAcquiredCharacteristic(x,y))", "all x y.((Human(x) & Intelligence(y)) -> AcquiredCharacteristic(x,y))", "all x y.((Human(x) & Intelligence(y)) -> AcquiredCaracteristic(x,y))", "all x.((Human(x) & Intelligence(x)) -> AcquiredCaracteristic(x))", "all x.(AcquiredCharacteristic(x) -> IntelligenceOfHuman(x))", "all x.(AcquiredCharacteristic(x) -> IntelligenceOfHuman(x))"]}
{"id": "entailmentbank_validation_649", "nl": "inherited characteristics are the opposite of acquired characteristics.", "fol": "", "prediction": ["all x.(EarnedCharacteristics(x) -> OppositeOfAcquiredCharacteristics(x))", "all x y.((EarnedCharacteristics(x) & AcquiredCharacteristics(y)) -> OppositeOf(x,y))", "all x.((EarnedCharacteristics(x) & AcquiredCharacteristics(x)) -> OppositeOf(x,AcquiredCharacteristics))", "all x.((EarnedCharacteristics(x) & AcquiredCharacteristics(x)) -> Opposite(x))", "all x y.((EarnedCharacteristics(x) & AcquiredCharacteristics(y)) -> Opposite(x,y))", "all x.(ErasedCharacteristics(x) -> OppositeOfAcquiredCharacteristics(x))", "all x.((EarnedCharacteristics(x) & AcquiredCharacteristics(x)) -> OppositeOf(x,acquiredCharacteristics))", "all x y.((ErasedCharacteristics(x) & AcquiredCharacteristics(y)) -> OppositeOf(x,y))", "all x y.((ErasedCharacteristics(x) & AcquiredCharacteristics(y)) -> Opposite(x,y))", "all x.((ErasedCharacteristics(x) & AcquiredCharacteristics(x)) -> Opposite(x))", "all x.(inheritedCharacteristics(x) -> OppositeOfAcquiredCharacteristics(x))", "all x.((ErasedCharacteristics(x) & AcquiredCharacteristics(x)) -> OppositeOf(x,AcquiredCharacteristics))", "all x.((EarnedCharacteristics(x) & AcquiredCharacteristics(x)) -> Opposite(x,acquiredCharacteristics))", "all x.((EarnedCharacteristics(x) & AcquiredCharacteristics(x)) -> Opposite(x,AcquiredCharacteristics))", "all x.(EarnedCharacteristics(x) -> OppositeOfAppropriateCharacteristics(x))", "all x.((EarnedCharacteristics(x) & AcquiredCharacteristics(x)) -> OppositeOf(x,CachedCharacteristics))"]}
{"id": "entailmentbank_validation_650", "nl": "the intelligence of a human is not an inherited characteristic.", "fol": "", "prediction": ["all x.(Human(x) -> -EarnedCharacteristic(x))", "all x y.((Human(x) & Human(y)) -> -EarnedCharacteristic(x,y))", "all x y.((Human(x) & Human(y)) -> -Intelligence(x,y))", "all x y.((Human(x) & Human(y)) -> -HasIntelligence(x,y))", "all x y.((Human(x) & Human(y)) -> -ErasedCharacteristic(x,y))", "all x.(Human(x) -> -Intelligence(x))", "all x.((Human(x) & Intelligence(x)) -> -EarnedCharacteristic(x))", "all x y.((Human(x) & Human(y)) -> -HasEarnedCharacteristic(x,y))", "all x.(Human(x) -> -HadEarnedCharacteristic(x))", "all x y.((Human(x) & Human(y)) -> Intelligence(x,y))", "all x y.((Human(x) & Human(y)) -> -HadEarnedCharacteristic(x,y))", "all x.((Human(x) & Intelligence(x)) -> -HadEarnedCharacteristic(x))", "all x y.((Human(x) & Human(y)) -> -HeritageCharacteristic(x,y))", "all x.(Human(x) -> -ErasedCharacteristic(x))", "all x.(Human(x) -> -inheritedCharacteristic(x))", "all x.((Human(x) & Intelligence(x)) -> -HasEarnedCharacteristic(x))"]}
{"id": "entailmentbank_validation_651", "nl": "genes is a vehicle for passing inherited characteristics from parent to offspring.", "fol": "", "prediction": ["all x.(Genes(x) -> (PassesEarnedCharacteristics(x) & FromParentToOffspring(x)))", "all x.(Genes(x) -> VehicleForPassingEarnedCharacteristics(x))", "all x y z.((Gene(x) & Parent(y) & Offspring(z)) -> VehicleForPassingEarnedCharacteristics(x,y,z))", "all x y z.((Genes(x) & Parent(y) & Offspring(z)) -> VehicleForPassingEarnedCharacteristics(x,y,z))", "all x y z.((Gene(x) & Parent(y) & Offspring(z)) -> PassesEarnedCharacteristics(x,y,z))", "all x y z.((Genes(x) & Parent(y) & Offspring(z)) -> PassesEarnedCharacteristics(x,y,z))", "all x y.((Genes(x) & Offspring(y)) -> PassesEarnedCharacteristics(x,y))", "all x y.((Genes(x) & Parent(y) & Offspring(z)) -> VehicleForPassingEarnedCharacteristics(x,y,z))", "all x y.((Genes(x) & Offspring(y)) -> VehicleForPassingEarnedCharacteristics(x,y))", "all x y.((Genes(x) & Parent(y)) -> PassesEarnedCharacteristics(x,y))", "all x y z.((Gene(x) & Parent(y) & Offspring(z)) -> PassesHeritageCharacteristics(x,y,z))", "all x y z.((Genes(x) & Parent(y) & Offspring(z)) -> PassesHeritageCharacteristics(x,y,z))", "all x.(Genes(x) -> PassesEarnedCharacteristics(x))", "all x.(Genes(x) -> PassesEarnedCharacteristicsFromParentToOffspring(x))", "all x y z.((Genes(x) & Parent(y) & Offspring(z)) -> VehicleForPassing(x,y,z))", "all x y z.((Gene(x) & Parent(y) & Offspring(z)) -> PassesEarnedCharacteristicsFromTo(x,y,z))"]}
{"id": "entailmentbank_validation_652", "nl": "a father is a kind of male parent.", "fol": "", "prediction": ["all x.(Father(x) -> MaleParent(x))", "all x.(Parent(x) -> MaleParent(x))", "all x.(Parent(x) -> Male(x))", "all x.(Daughter(x) -> MaleParent(x))", "all x.((Parent(x) & Father(x)) -> MaleParent(x))", "all x.((Father(x) & MaleParent(x)) -> Parent(x))", "all x.((Parent(x) & Male(x)) -> Father(x))", "all x.(Father(x) -> MaleParent(x))", "all x.((Daughter(x) & MaleParent(x)) -> Parent(x))", "all x.((Father(x) & MaleParent(x)) -> MaleParent(x))", "all x.((Father(x) & MaleParent(x)) -> Father(x))", "all x.(Head(x) -> MaleParent(x))", "all x.(Pastor(x) -> MaleParent(x))", "all x.(Parent(x) -> MaleParent(x))", "all x.((Parent(x) & Father(x)) -> Male(x))", "all x.((Daughter(x) & MaleParent(x)) -> MaleParent(x))"]}
{"id": "entailmentbank_validation_653", "nl": "a mother is a kind of female parent.", "fol": "", "prediction": ["all x.(Mother(x) -> FemaleParent(x))", "all x.(Mother(x) -> FeminineParent(x))", "all x.(Mother(x) -> FemaleParent(x))", "all x y.((Mother(x) & FemaleParent(y)) -> FemaleParent(x))", "all x.((Mother(x) & FemaleParent(x)) -> FemaleParent(x))", "all x.((Mother(x) & FemaleParent(x)) -> Parent(x))", "exists x.(Mother(x) & FemaleParent(x))", "all x y.((Mother(x) & FemaleParent(y)) -> FemaleParent(x,y))", "all x y.((Mother(x) & FemaleParent(y)) -> Female(x))", "all x y.((Mother(x) & Mother(y)) -> FemaleParent(x))", "all x y.((Mother(x) & FemaleParent(y)) -> KindOf(x,y))", "all x y.((Mother(x) & FemaleParent(y)) -> Parent(x,y))", "all x y.((Mother(x) & Parent(y)) -> Female(x))", "all x y.((Mother(x) & FemaleParent(y)) -> Is(x,y))", "all x y.((Mother(x) & FemaleParent(y)) -> FeminineParent(x))", "all x y.((Mother(x) & Mother(y)) -> FemaleParent(x,y))"]}
{"id": "entailmentbank_validation_654", "nl": "genes are a vehicle for passing inherited characteristics from a mother and a father to offspring.", "fol": "", "prediction": ["all x y.((Gene(x) & Mother(y) & Father(y)) -> PassesEarnedCharacteristicsToOffspring(x,y))", "all x y z.((Gene(x) & Mother(y) & Father(z)) -> PassesEarnedCharacteristicsToOffspring(x,y,z))", "all x y z.((Gene(x) & Mother(y) & Father(z)) -> VehicleForPassingEarnedCharacteristics(x,y,z))", "all x y.((Genes(x) & Mother(y) & Father(y)) -> PassesEarnedCharacteristicsToOffspring(x,y))", "all x y z.((Gene(x) & Mother(y) & Father(z)) -> (PassesEarnedCharacteristics(x,y,z) & Offspring(x)))", "all x.(Genes(x) -> (PassesEarnedCharacteristics(x) & FromMotherToOffspring(x)))", "all x y z.((Gene(x) & Mother(y) & Father(z)) -> PassesEarnedCharacteristics(x,y,z))", "all x y.((Gene(x) & Mother(y) & Father(y)) -> PassesEarnedCharacteristics(x,y))", "all x y z.((Gene(x) & Mother(y) & Father(z)) -> (PassesEarnedCharacteristics(x,y,z) & ToOffspring(x)))", "all x y.((Gene(x) & Mother(y) & Father(y)) -> VehicleForPassingEarnedCharacteristics(x,y))", "all x y z.((Gene(x) & Mother(y) & Father(z)) -> VehicleForPassingEarnedCharacteristicsToOffspring(x,y,z))", "all x y.((Gene(x) & Mother(y) & Father(z)) -> VehicleForPassingEarnedCharacteristics(x,y,z))", "all x y z.((Gene(x) & Mother(y) & Father(z)) -> (PassesEarnedCharacteristics(x,y,z) & FromToOffspring(x,y,z)))", "all x y.((Gene(x) & Mother(y) & Father(y)) -> VehicleForPassingEarnedCharacteristicsToOffspring(x,y))", "all x y.((Gene(x) & Mother(y) & Father(z)) -> VehicleForPassingEarnedCharacteristicsToOffspring(x,y,z))", "all x y z.((Gene(x) & Mother(y) & Father(z)) -> (PassesEarnedCharacteristics(x,y,z) & ToOffspring(x,offspring)))"]}
{"id": "entailmentbank_validation_655", "nl": "in sexual reproduction sperm is a vehicle for the genes from the father to the offspring.", "fol": "", "prediction": ["all x y.((Ssperm(x) & SexualReproduction(y)) -> (VehicleForGenes(x,y) & FromFatherToOffspring(x)))", "all x y.((Ssperm(x) & SexualReproduction(y)) -> VehicleForGenes(x,y))", "all x y.((Ssperm(x) & SexualReproduction(y)) -> (VehicleForGenes(x,y) & FromPastorToOffspring(x)))", "all x y.((Ssperm(x) & SexualReproduction(y)) -> (VehicleForGenes(x,y) & FromParentToOffspring(x)))", "all x y.((Ssperm(x) & SexualReproduction(y)) -> (VehicleForGenes(x,y) & FromFatherToOffspring(x,y)))", "all x y.((SexualReproduction(x) & Sperm(y)) -> (VehicleForGenes(y,x) & FromFatherToOffspring(y)))", "all x.((Ssperm(x) & SexualReproduction(x)) -> VehicleForGenes(x))", "all x y.((Sparrow(x) & SexualReproduction(y)) -> (VehicleForGenes(x,y) & FromFatherToOffspring(x)))", "all x y.((Ssperm(x) & SexualReproduction(y)) -> (VehicleForGenes(x,y) & FromPastorToOffspring(x,y)))", "all x y.((SexualReproduction(x) & Sperm(y)) -> (VehicleForGenes(y,x) & FromFatherToOffspring(y,x)))", "all x y z.((Ssperm(x) & SexualReproduction(y) & Gene(z)) -> (VehicleForGenes(x,y,z) & FromFatherToOffspring(x)))", "all x y z.((Ssperm(x) & SexualReproduction(y) & Gene(z)) -> (VehicleForGenes(x,z) & FromPastorToOffspring(x)))", "all x y.((Sparrow(x) & SexualReproduction(y)) -> VehicleForGenes(x,y))", "all x y.((SexualReproduction(x) & Sperm(y)) -> (VehicleForGenes(y,x) & FromPastorToOffspring(y)))", "all x y z.((Ssperm(x) & SexualReproduction(y) & Gene(z)) -> (VehicleForGenes(x,y,z) & FromPastorToOffspring(x)))", "all x y.((Ssperm(x) & SexualReproduction(y)) -> (VehicleForGenes(x,y) & FromParentToOffspring(x,y)))"]}
{"id": "entailmentbank_validation_656", "nl": "in sexual reproduction the egg is a vehicle for the genes from the mother to the offspring.", "fol": "", "prediction": ["all x y.((Egg(x) & SexualReproduction(y)) -> (VehicleForGenes(x,y) & FromMotherToOffspring(x)))", "all x y.((Egg(x) & SexualReproduction(y)) -> (VehicleForGenes(x,y) & FromMotherToOffspring(x,y)))", "all x y.((Egg(x) & SexualReproduction(y)) -> VehicleForGenes(x,y))", "all x y z.((Egg(x) & SexualReproduction(y) & Gene(z)) -> (VehicleForGenes(x,y,z) & FromMotherToOffspring(x)))", "all x y.((Egg(x) & SexualReproduction(y)) -> VehicleForGenesFromMotherToOffspring(x,y))", "all x y z.((Egg(x) & SexualReproduction(y) & Gene(z)) -> VehicleForGenesFromMotherToOffspring(x,y,z))", "all x y z.((Egg(x) & SexualReproduction(y) & Mother(z) & Offspring(z)) -> VehicleForGenes(x,y,z))", "all x y.((Egg(x) & SexualReproduction(y)) -> (VehicleForGenes(x,y) & FromMotherToOffspring(y)))", "all x y z.((Egg(x) & SexualReproduction(y) & Gene(z) & FromMotherToOffspring(x,z)) -> VehicleForGenes(x,y,z))", "all x y z.((Egg(x) & SexualReproduction(y) & Gene(z)) -> (VehicleForGenes(x,z) & FromMotherToOffspring(x)))", "all x y.((Egg(x) & SexualReproduction(y) & FromMotherToOffspring(x,y)) -> VehicleForGenes(x,y))", "all x y z.((Egg(x) & SexualReproduction(y) & Gene(z)) -> (VehicleForGenes(x,y,z) & FromMotherToOffspring(x,y)))", "all x y z.((Egg(x) & SexualReproduction(y) & Genes(z)) -> VehicleForGenesFromMotherToOffspring(x,y,z))", "all x y z.((Egg(x) & SexualReproduction(y) & Genes(z)) -> (VehicleForGenes(x,y,z) & FromMotherToOffspring(x)))", "all x y z.((Egg(x) & SexualReproduction(y) & Genes(z) & FromMotherToOffspring(x,z)) -> VehicleForGenes(x,y,z))", "all x y z.((Egg(x) & SexualReproduction(y) & Mother(z)) -> VehicleForGenes(x,y,z))"]}
{"id": "entailmentbank_validation_657", "nl": "genes are passed from a mother and a father to offspring through the egg and sperm.", "fol": "", "prediction": ["all x y z.((Gene(x) & Mother(y) & Father(z)) -> (PassedFromToOffspring(x,y,z) & ThroughEggAndSperm(x)))", "all x y z.((Gene(x) & Mother(y) & Father(z)) -> (PassedFromToOffspring(x,y,z) & ThroughEgg(x) & ThroughSperm(x)))", "all x y z.((Gene(x) & Mother(y) & Father(z)) -> PassedToOffspring(x,y,z))", "all x y z.((Gene(x) & Mother(y) & Father(z)) -> (PassedFromToOffspring(x,y,z) & Egg(x) & Sperm(x)))", "all x y z.((Gene(x) & Mother(y) & Father(z)) -> (PassedToOffspring(x,y,z) & ThroughEggAndSperm(x)))", "all x y z.((Gene(x) & Mother(y) & Father(z)) -> (PassedToOffspring(x,y,z) & ThroughEgg(x) & ThroughSperm(x)))", "all x y z.((Gene(x) & Mother(y) & Father(z)) -> PassedFromToOffspring(x,y,z))", "all x y z.((Gene(x) & Mother(y) & Father(z) & Offspring(x) & Egg(x) & Sperm(x)) -> PassedFromTo(x,y,z))", "all x y z.((Genes(x) & Mother(y) & Father(z)) -> (PassedFromToOffspring(x,y,z) & ThroughEggAndSperm(x)))", "all x y z.((Gene(x) & Mother(y) & Father(z)) -> (PassedFromToOffspring(x,y,z)))", "all x y z.((Gene(x) & Mother(y) & Father(z)) -> (Passed(x,y,z) & Offspring(x)))", "all x y z.((Gene(x) & Mother(y) & Father(z) & Offspring(x) & Egg(x) & Sperm(x)) -> Passed(x,y,z))", "all x y.((Genes(x) & Mother(y) & Father(y)) -> PassedToOffspring(x,y))", "all x y z.((Gene(x) & Mother(y) & Father(z)) -> (PassedFromToOffspring(x,y,z) & EggAndSperm(x)))", "all x y z.((Gene(x) & Mother(y) & Father(z) & Offspring(x) & Egg(x) & Sperm(x)) -> PassedTo(x,y,z))", "all x y z.((Gene(x) & Mother(y) & Father(z)) -> (PassedFrom(x,y,z) & Offspring(x)))"]}
{"id": "entailmentbank_validation_658", "nl": "genes determine the traits for the living things.", "fol": "", "prediction": ["all x y.((Gene(x) & LivingThing(y)) -> DeterminesTraits(x,y))", "all x y.((Gene(x) & LivingThing(y)) -> DeterminesTreatments(x,y))", "all x y.((Gene(x) & LivingThing(y)) -> DeterminesTraits(x,y))", "all x y.((Gene(x) & LivingThing(y)) -> DeterminesTreatmentsFor(x,y))", "all x y.((Gene(x) & LivingThing(y)) -> DeterminesTraitsFor(x,y))", "all x y.((Gene(x) & LivingThing(y)) -> DeterminesTraitsFor(x,y))", "all x y z.((Gene(x) & LivingThing(y) & Trait(z)) -> DeterminesFor(x,y,z))", "all x y z.((Gene(x) & LivingThing(y) & Traits(z)) -> Determines(x,y,z))", "all x y z.((Gene(x) & LivingThing(y) & Trait(z)) -> Determines(x,y,z))", "all x y.((Gene(x) & LivingThing(y)) -> DeterminesTreatment(x,y))", "all x y.((Gene(x) & LivingThing(y)) -> DeterminesTays(x,y))", "all x y z.((Gene(x) & LivingThing(y) & Trait(z)) -> Determines(x,z))", "all x y.((Gene(x) & LivingThing(y)) -> DeterminesTraits(x,y))", "all x y z.((Gene(x) & LivingThing(y) & Traits(z)) -> DeterminesFor(x,y,z))", "all x y.((Gene(x) & LivingThing(y)) -> DetermineTreatments(x,y))", "all x y.((Gene(x) & LivingThing(y)) -> DetermineTraits(x,y))"]}
{"id": "entailmentbank_validation_659", "nl": "traits are passed from a mother and a father to offspring through the egg and sperm.", "fol": "", "prediction": ["all x y z.((Mother(x) & Father(y) & Offspring(z) & Egg(z) & Sperm(z)) -> TraitsPassed(x,y,z))", "all x y z.((Mother(x) & Father(y) & Offspring(z)) -> (PassedThroughEgg(x,z) & PassedThroughSperm(x,z)))", "all x y z.((Mother(x) & Father(y) & Offspring(z) & Egg(z) & Sperm(z)) -> (PassedFromTo(x,y,z) & Through(x,z)))", "all x y z.((Mother(x) & Father(y) & Offspring(z) & Egg(z) & Sperm(z)) -> TraitsPassedFromTo(x,y,z))", "all x y z.((Mother(x) & Father(y) & Offspring(z) & Egg(z) & Sperm(z)) -> TraitsPassedTo(x,y,z))", "all x y.((Mother(x) & Father(y) & Offspring(x,y)) -> (PassedThroughEgg(x,y) & PassedThroughSperm(x,y)))", "all x y z.((Mother(x) & Father(y) & Offspring(z)) -> (PassedThroughEgg(x,y,z) & PassedThroughSperm(x,z)))", "all x y z.((Mother(x) & Father(y) & Offspring(z) & Egg(z) & Sperm(z)) -> PassedTreatments(x,y,z))", "all x y z.((Mother(x) & Father(y) & Offspring(z) & Egg(z) & Sperm(z)) -> Traits(x,y,z))", "all x y z.((Mother(x) & Father(y) & Offspring(z) & Egg(z) & Sperm(z)) -> PassedThrough(x,y,z))", "all x y z.((Mother(x) & Father(y) & Offspring(z) & Egg(z) & Sperm(z)) -> (PassedThrough(x,y,z) & PassedThrough(x,y,z)))", "all x y z.((Mother(x) & Father(y) & Offspring(z) & Egg(z) & Sperm(z)) -> (PassedThrough(x,y,z) & PassedThrough(x,z)))", "all x y z.((Mother(x) & Father(y) & Offspring(z) & Egg(z) & Sperm(z)) -> PassesTreatments(x,y,z))", "all x y z.((Mother(x) & Father(y) & Offspring(z) & Egg(z) & Sperm(z)) -> (PassedThrough(x,y,z) & Through(x,z)))", "all x y z.((Mother(x) & Father(y) & Offspring(z) & Egg(z)) -> (PassedThrough(x,y,z) & PassedThrough(x,z)))", "all x y z.((Mother(x) & Father(y) & Offspring(z) & Egg(z) & Sperm(z)) -> (PassedFromTo(x,y,z) & Through(x,y,z)))"]}
{"id": "entailmentbank_validation_660", "nl": "dna is a kind of nucleic acid.", "fol": "", "prediction": ["all x.(Dna(x) -> NucleicAcid(x))", "all x y.((Dna(x) & NucleicAcid(y)) -> NucleicAcid(x))", "all x.(Dna(x) -> NucleicAcid(x))", "all x y.((Dna(x) & NucleicAcid(y)) -> Is(x,y))", "all x y.((Dna(x) & NucleicAcid(y)) -> NucleicAcid(x,y))", "all x y z.((Dna(x) & NucleicAcid(y) & NucleicAcid(z)) -> NucleicAcid(x))", "all x.(Dna(x) -> (NucleicAcid(x) & NucleicAcid(x)))", "all x y z.((Dna(x) & NucleicAcid(y) & NucleicAcid(z)) -> Is(x,y,z))", "all x y.((Dna(x) & NucleicAcid(y)) -> IsNucleicAcid(x,y))", "all x y.((Dna(x) & NucleicAcid(y)) -> (NucleicAcid(x) & NucleicAcid(y)))", "all x y z.((Dna(x) & NucleicAcid(y) & NucleicAcid(z)) -> NucleicAcid(x,y,z))", "all x.((Dna(x) & NucleicAcid(x)) -> NucleicAcid(x))", "all x y.((Dna(x) & NucleicAcid(y)) -> (NucleicAcid(x) & NucleicAcid(x)))", "all x y.((Dna(x) & NucleicAcid(y)) -> Has(x,y))", "all x y.((Dna(x) & NucleicAcid(y)) -> IsNucleicAcid(x))", "all x.(Dna(x) -> (NucleicAcid(x) & -NucleicAcid(x)))"]}
{"id": "entailmentbank_validation_661", "nl": "thymine is found in dna.", "fol": "", "prediction": ["all x.(Thymine(x) -> FoundInDna(x))", "all x y.((Thymine(x) & Dna(y)) -> FoundIn(x,y))", "all x y z.((Thymine(x) & Dna(y) & Dna(z)) -> FoundIn(x,y,z))", "all x y z.((Thymine(x) & Dna(y) & Dna(z)) -> FoundIn(x,y))", "all x y.((Thymine(x) & DNA(y)) -> FoundIn(x,y))", "exists x.(Thymine(x) & FoundInDna(x))", "all x y z.((Thymine(x) & Dna(y) & DNA(z)) -> FoundIn(x,y,z))", "all x y.((Thymine(x) & Dna(y) & FoundIn(x,y)) -> FoundIn(x,y))", "all x y.((Thymine(x) & dna(y)) -> FoundIn(x,y))", "all x.(Thymine(x) -> FoundInDNA(x))", "all x y z.((Thymine(x) & Dna(y) & Dna(z) & FoundIn(x,y)) -> FoundIn(x,z))", "all x y z.((Thymine(x) & Dna(y) & Dna(z) & FoundIn(x,y,z)) -> FoundIn(x,y))", "all x.(Thymine(x) -> FoundInDna(x))", "all x y z.((Thymine(x) & Dna(y) & Thymine(z)) -> FoundIn(x,y,z))", "all x y z.((Thymine(x) & Dna(y) & (Dna(z) | Dna(z))) -> FoundIn(x,y,z))", "all x y z.((Thymine(x) & Dna(y) & Dna(z) & FoundIn(x,y,z)) -> FoundIn(x,y,z))"]}
{"id": "entailmentbank_validation_662", "nl": "thymine cannot be found in rna.", "fol": "", "prediction": ["all x.(Thymine(x) -> -FoundInRna(x))", "all x y.((Thymine(x) & Rna(y)) -> -FoundIn(x,y))", "all x.(Thymine(x) -> -FindsInRna(x))", "all x y.((Thymine(x) & Rhna(y)) -> -FoundIn(x,y))", "all x y.((Thymine(x) & Rna(y)) -> -FindsIn(x,y))", "all x.(Thymine(x) -> -exists y.(Rna(y) & FoundIn(x,y)))", "all x.(Thymine(x) -> -exists y.(Rna(y) & FoundIn(x,y))))", "all x y.((Thymine(x) & Rna(y)) -> -Finds(x,y))", "-exists x.(Thymine(x) & -InRna(x))", "all x y.((Thymine(x) & Rhna(y)) -> -FindsIn(x,y))", "all x y.((Thymine(x) & Rna(y)) -> -FindableIn(x,y))", "all x y.((Thymine(x) & Rna(y)) -> -Found(x,y))", "all x.(Thymine(x) -> -CanBeFoundInRna(x))", "all x y.((Thymine(x) & Rna(y)) -> -CanBeFoundIn(x,y))", "-exists x.(Thymine(x) & InRna(x))", "all x y.((Thymine(x) & Rna(y)) -> -CanBeFound(x,y))"]}
{"id": "entailmentbank_validation_663", "nl": "if thymine is found in a strand of nucleic acid, then the nucleic acid is dna.", "fol": "", "prediction": ["all x.((Thymine(x) & FoundInNucleicAcid(x)) -> Dna(x))", "all x y.((Thymine(x) & NucleicAcidString(y) & FoundIn(x,y)) -> Dna(x))", "all x y.((Thymine(x) & NucleicAcid(y) & FoundInString(x,y)) -> Dna(x))", "all x y.((Thymine(x) & NucleicAcid(y) & FoundIn(x,y)) -> Dna(x))", "all x.((Thymine(x) & FoundInNucleicAcidString(x)) -> Dna(x))", "all x y.((Thymine(x) & NucleicAcid(y) & FoundInSstrand(x,y)) -> Dna(x))", "all x y.((Thymine(x) & StrandOfNucleicAcid(y) & FoundIn(x,y)) -> Dna(x))", "all x y z.((Thymine(x) & NucleicAcidString(y) & NucleicAcid(z) & FoundIn(x,y)) -> Dna(x))", "all x y.((Thymine(x) & NucleicAcidSstrand(y) & FoundIn(x,y)) -> Dna(x))", "all x.((Thymine(x) & FoundInStringOfNucleicAcid(x)) -> Dna(x))", "all x y.((Thymine(x) & NucleicAcidString(y)) -> Dna(x))", "all x y z.((Thymine(x) & NucleicAcidString(y) & NucleicAcid(z) & FoundIn(x,y,z)) -> Dna(x))", "all x y z.((Thymine(x) & NucleicAcidString(y) & NucleicAcidString(z) & FoundIn(x,y)) -> Dna(x))", "all x y z.((Thymine(x) & NucleicAcid(y) & Strand(z) & FoundIn(x,y,z)) -> Dna(x))", "all x.((Thymine(x) & FoundInNucleicAcid(x)) -> NucleicAcidDna(x))", "all x y z.((Thymine(x) & NucleicAcid(y) & Strand(z) & FoundIn(x,y)) -> Dna(x))"]}
{"id": "entailmentbank_validation_664", "nl": "a researcher found thymine in a strand of nucleic acid.", "fol": "", "prediction": ["all x y z.((Researcher(x) & Thymine(y) & NucleicAcid(z)) -> FoundInString(x,y,z))", "all x y.((Researcher(x) & Thymine(y)) -> FoundInNucleicAcid(x,y))", "all x y z.((Researcher(x) & Thymine(y) & NucleicAcid(z)) -> FoundIn(x,y,z))", "all x y z.((Researcher(x) & Thymine(y) & NucleicAcid(z)) -> FoundInSstrand(x,y,z))", "all x y z.((Researcher(x) & Thymine(y) & NucleicAcidString(z)) -> FoundIn(x,y,z))", "all x y z.((Researcher(x) & Thymine(y) & NucleicAcid(z)) -> FoundInStringOf(x,y,z))", "all x y.((Researcher(x) & Thymine(y)) -> FoundInNucleicAcidString(x,y))", "all x y z.((Researcher(x) & Thymine(y) & NucleicAcidSstrand(z)) -> FoundIn(x,y,z))", "all x y.((Researcher(x) & Thymine(y) & NucleicAcid(z)) -> FoundInString(x,y,z))", "all x y.((Researcher(x) & Thymine(y)) -> FoundInStringOfNucleicAcid(x,y))", "all x y.((Researcher(x) & Thymine(y) & NucleicAcid(y)) -> FoundInString(x,y))", "all x y.((Researcher(x) & Thymine(y)) -> FoundInNucleicAcidSstrand(x,y))", "all x y.((Researcher(x) & Thymine(y)) -> FoundInSstrandOfNucleicAcid(x,y))", "all x y z.((Researcher(x) & Thymine(y) & NucleicAcid(z) & FoundInString(x,y,z)) -> FoundIn(x,y,z))", "all x y z.((Researcher(x) & Thymine(y) & StringOfNucleicAcid(z)) -> FoundIn(x,y,z))", "all x y z.((Researcher(x) & Thymine(y) & NucleicAcid(z) & Strand(x,z)) -> FoundIn(x,y,z))"]}
{"id": "entailmentbank_validation_665", "nl": "the researcher found a strand of dna.", "fol": "", "prediction": ["all x y.((Researcher(x) & StrandOfDna(y)) -> Found(x,y))", "all x y.((Researcher(x) & Dna(y)) -> FoundString(x,y))", "all x y.((Researcher(x) & strandOfDna(y)) -> Found(x,y))", "all x y.((Researcher(x) & Dna(y)) -> FoundSstrand(x,y))", "all x y z.((Researcher(x) & Dna(y) & Strand(z)) -> Found(x,y,z))", "all x y.((Researcher(x) & Dna(y)) -> FoundStringOf(x,y))", "all x y.((Researcher(x) & Dna(y)) -> Found(x,y))", "all x y.((Researcher(x) & DnaString(y)) -> Found(x,y))", "all x y z.((Researcher(x) & StrandOfDna(y) & Researcher(z)) -> Found(x,y,z))", "all x y.((Researcher(x) & dna(y)) -> FoundString(x,y))", "all x.((Researcher(x) & StrandOfDna(x)) -> Found(x,dna))", "all x.((Researcher(x) & StrandOfDna(x)) -> Found(x,Dna))", "all x.((Researcher(x) & FoundDna(x)) -> FoundDna(x))", "all x y.((Researcher(x) & Drone(y)) -> FoundStringOf(x,y))", "all x.(Researcher(x) -> FoundDnaString(x))", "all x y z.((Researcher(x) & StrandOfDna(y) & Researcher(z)) -> Found(x,y))"]}
{"id": "entailmentbank_validation_666", "nl": "if a pure dominant organism is crossed a recessive organism, then the offspring will have a 100% probability of being heterozygous dominant.", "fol": "", "prediction": ["all x.((PureDominantOrganism(x) & CrossedRecessiveOrganism(x)) -> 100%ProbabilityOfHeterozygousDominantOffspring(x))", "all x y.((PureDominantOrganism(x) & RecessiveOrganism(y) & Crossed(x,y)) -> 100%ProbabilityOfHeterozygousDominantOffspring(x))", "all x y.((PureDominantOrganism(x) & RecessiveOrganism(y) & Crossed(x,y)) -> HeterozygousDominantOffspring(x))", "all x y.((PureDominantOrganism(x) & RecessiveOrganism(y) & Crossed(x,y)) -> Has100%ProbabilityOfHeterozygousDominantOffspring(x))", "all x y.((PureDominantOrganism(x) & RecessiveOrganism(y) & Crossed(x,y)) -> 100%ProbabilityOfHeterozygousDominant(x))", "all x.((PureDominantOrganism(x) & CrossedRecessiveOrganism(x)) -> HeterozygousDominantOffspring(x))", "all x.((PureDominantOrganism(x) & CrossedRecessiveOrganism(x)) -> Has100%ProbabilityOfHeterozygousDominantOffspring(x))", "all x y.((PureDominantOrganism(x) & RecessiveOrganism(y) & Crossed(x,y)) -> HeterozygousDistantOffspring(x))", "all x y.((PureDominantOrganism(x) & RecessiveOrganism(y) & Crossed(x,y)) -> Has100%ProbabilityOfHeterozygousDominant(x))", "all x.((PureDominantOrganism(x) & CrossedRecessiveOrganism(x)) -> 100%ProbabilityOfHeterozygousDominant(x))", "all x.((PureDominantOrganism(x) & CrossedRecessiveOrganism(x)) -> 100%ProbabilityOfHeterozygousDistantOffspring(x))", "all x y.((PurpleDominantOrganism(x) & RecessiveOrganism(y) & Crossed(x,y)) -> 100%ProbabilityOfHeterozygousDominantOffspring(x))", "all x.((PureDominantOrganism(x) & CrossedRecessiveOrganism(x)) -> HeterozygousDistantOffspring(x))", "all x y.((PureDominantOrganism(x) & RecessiveOrganism(y) & Crossed(x,y)) -> 100%ProbabilityOfHeterozygousDistantOffspring(x))", "all x y.((PureDominantOrganism(x) & RecessiveOrganism(y) & Crossed(x,y)) -> 100%ProbabilityOfHeterozygousDominantOffspring(x))", "all x.((PurpleDominantOrganism(x) & CrossedRecessiveOrganism(x)) -> 100%ProbabilityOfHeterozygousDominantOffspring(x))"]}
{"id": "entailmentbank_validation_667", "nl": "a scientist crosses a red-flowered plant with a white-flowered plant, and all offspring have red flowers.", "fol": "", "prediction": ["all x y z.((Scientist(x) & RedFloweredPlant(y) & WhiteFloweredPlant(z)) -> (Crosses(x,y,z) & AllOffspringHaveRedFlowers(x)))", "all x y z.((Scientist(x) & RedFloweredPlant(y) & WhiteFloweredPlant(z)) -> (Crosses(x,y,z) & OffspringHaveRedFlowers(x)))", "all x y z.((Scientist(x) & RedFloweredPlant(y) & WhiteFloweredPlant(z)) -> (Crosses(x,y) & AllOffspringHaveRedFlowers(x)))", "all x y z.((Scientist(x) & RedFloweredPlant(y) & WhiteFloweredPlant(z)) -> (Crosses(x,y,z) & HasRedFlowers(x)))", "all x y z.((Scientist(x) & RedFloweredPlant(y) & WhiteFloweredPlant(z)) -> (Crosses(x,y) & OffspringHaveRedFlowers(x)))", "all x y z.((Scientist(x) & RedFloweredPlant(y) & WhiteFloweredPlant(z)) -> (Crosses(x,y) & HasRedFlowers(x)))", "all x y z.((Scientist(x) & RedFloweredPlant(y) & WhiteFloweredPlant(z)) -> Crosses(x,y,z))", "all x y z.((Scientist(x) & RedFloweredPlant(y) & WhiteFloweredPlant(z)) -> (Crosses(x,y,z) & RedFlowers(x)))", "all x y z.((Scientist(x) & RedFloweredPlant(y) & WhiteFloweredPlant(z)) -> (Crosses(x,y) & HasRedFlowers(x,z)))", "all x y.((Scientist(x) & RedFloweredPlant(y) & WhiteFloweredPlant(y)) -> HasRedFlowers(x,y))", "all x y z.((Scientist(x) & RedFloweredPlant(y) & WhiteFloweredPlant(z)) -> (Crosses(x,y,z) & AllOffspringHasRedFlowers(x)))", "all x y z.((Scientist(x) & RedFloweredPlant(y) & WhiteFloweredPlant(z)) -> (Crosses(x,y) & AllOffspringHaveRedFlowers(x,z)))", "all x y.((Scientist(x) & RedFloweredPlant(y)) -> CrossesWithWhiteFloweredPlant(x,y))", "all x y z.((Scientist(x) & RedFloweredPlant(y) & WhiteFloweredPlant(z)) -> (Crosses(x,y) & OffspringHaveRedFlowers(x,z)))", "all x y.((Scientist(x) & RedFloweredPlant(y) & WhiteFloweredPlant(y)) -> (Crosses(x,y) & AllOffspringHaveRedFlowers(x)))", "all x y z.((Scientist(x) & RedFloweredPlant(y) & WhiteFloweredPlant(z)) -> (Crosses(x,y) & RedFlowers(x,z)))"]}
{"id": "entailmentbank_validation_668", "nl": "all the offspring with red flowers are heterozygous dominant.", "fol": "", "prediction": ["all x.((Offspring(x) & RedFlower(x)) -> HeterozygousDominant(x))", "all x.((Offspring(x) & RedFlowers(x)) -> HeterozygousDominant(x))", "all x.((Offspring(x) & HasRedFlowers(x)) -> HeterozygousDominant(x))", "all x.((Offspring(x) & RedFlower(x)) -> HeterozygousDistant(x))", "all x.((Offspring(x) & RedFlowers(x)) -> HeterozygousDistant(x))", "all x.((Offspring(x) & HasRedFlowers(x)) -> HeterozygousDistant(x))", "all x.((Offspring(x) & HasRedFlower(x)) -> HeterozygousDominant(x))", "all x.((Offspring(x) & RedFlower(x)) -> HeterozygousDisruptive(x))", "all x.((Offspring(x) & RedFlower(x)) -> HeterozygousDistinct(x))", "all x.((OffspringWithRedFlowers(x) & HasRedFlowers(x)) -> HeterozygousDominant(x))", "all x.((Offspring(x) & RedFlower(x)) -> Heterozygousdominant(x))", "all x.((Offspring(x) & RedFlowers(x)) -> HeterozygousDisruptive(x))", "all x.((Offspring(x) & RedFlower(x)) -> HeterozygousDescendant(x))", "all x.((Offspring(x) & RedFlowers(x)) -> Heterozygousdominant(x))", "all x.((Offspring(x) & HasRedFlowers(x)) -> HeterozygousDisruptive(x))", "all x.((Offspring(x) & RedFlowers(x)) -> HeterozygousDistinct(x))"]}
{"id": "entailmentbank_validation_669", "nl": "the offspring with red flowers are crossed with pure recessive white flowered plants.", "fol": "", "prediction": ["all x.((Offspring(x) & RedFlowers(x)) -> CrossedWithRecessiveWhiteFloweredPlants(x))", "all x y.((Offspring(x) & RedFlowers(x) & WhiteFloweredPlant(y)) -> CrossedWith(x,y))", "all x y.((Offspring(x) & RedFlower(x) & WhiteFloweredPlant(y)) -> CrossedWith(x,y))", "all x.((Offspring(x) & RedFlower(x)) -> CrossedWithRecessiveWhiteFloweredPlants(x))", "all x y.((Offspring(x) & RedFlowers(x)) -> CrossedWithRecessiveWhiteFloweredPlants(y))", "all x y.((Offspring(x) & RedFlowers(x) & WhiteFloweredPlant(y)) -> Crossed(x,y))", "all x y.((Offspring(x) & RedFlower(x) & WhiteFloweredPlant(y)) -> Crossed(x,y))", "all x y.((Offspring(x) & RedFlower(y)) -> CrossedWithRecessiveWhiteFloweredPlants(x,y))", "all x.((Offspring(x) & RedFlowers(x)) -> CrossedWithWhiteFloweredPlants(x))", "all x y z.((Offspring(x) & RedFlower(y) & WhiteFloweredPlant(z)) -> CrossedWith(x,y,z))", "all x y.((Offspring(x) & RedFlowers(y)) -> CrossedWithRecessiveWhiteFloweredPlants(x,y))", "all x y.((Offspring(x) & RedFlower(x)) -> CrossedWithRecessiveWhiteFloweredPlants(y))", "all x y.((Offspring(x) & RedFlowers(x) & WhiteFloweredPlants(y)) -> CrossedWith(x,y))", "all x y z.((Offspring(x) & RedFlowers(y) & WhiteFloweredPlant(z)) -> CrossedWith(x,y,z))", "all x y.((Offspring(x) & RedFlowers(x)) -> CrossedWithRecessiveWhiteFloweredPlants(x))", "all x y.((Offspring(x) & RedFlower(y)) -> CrossedWithRecessiveWhiteFloweredPlants(x))"]}
{"id": "entailmentbank_validation_670", "nl": "heterozygous dominant red flowered plants are crossed with pure recessive white flowered plants.", "fol": "", "prediction": ["all x.(HeterozygousDominantRedFloweredPlants(x) -> CrossedWithRecessiveWhiteFloweredPlants(x))", "all x.((HeterozygousDominantRedFloweredPlants(x) & CrossedWithRecessiveWhiteFloweredPlants(x)) -> HeterozygousDominantRedFloweredPlants(x))", "all x.((HeterozygousDominantRedFloweredPlants(x) & RecessiveWhiteFloweredPlants(x)) -> Crossed(x))", "all x y.((HeterozygousDominantRedFloweredPlant(x) & HeterozygousDominantRedFloweredPlant(y)) -> CrossedWithRecessiveWhiteFloweredPlant(x,y))", "all x y z.((HeterozygousDominantRedFloweredPlant(x) & HeterozygousDominantRedFloweredPlant(y) & RecessiveWhiteFloweredPlant(z)) -> Crossed(x,y,z))", "all x y z.((HeterozygousDominantRedFloweredPlant(x) & HeterozygousDominantRedFloweredPlant(y) & WhiteFloweredPlant(z)) -> CrossedWith(x,y,z))", "all x y.((HeterozygousDominantRedFloweredPlant(x) & HeterozygousDominantRedFloweredPlant(y)) -> CrossedWithRecessiveWhiteFloweredPlant(x))", "all x y z.((HeterozygousDominantRedFloweredPlant(x) & HeterozygousDominantRedFloweredPlant(y) & RecessiveWhiteFloweredPlant(z)) -> CrossedWith(x,y,z))", "all x.((Heterozygous(x) & PredominantRedFloweredPlant(x)) -> CrossedWithRecessiveWhiteFloweredPlant(x))", "all x y.((HeterozygousDominantRedFloweredPlants(x) & HeterozygousDominantRedFloweredPlants(y)) -> CrossedWithRecessiveWhiteFloweredPlants(x))", "all x.((HeterozygousDominantRedFloweredPlants(x) & CrossedWithRecessiveWhiteFloweredPlants(x)) -> HeterozygousDistantRedFloweredPlants(x))", "all x y.((HeterozygousDominantRedFloweredPlants(x) & HeterozygousDominantRedFloweredPlants(y)) -> CrossedWithRecessiveWhiteFloweredPlants(x,y))", "all x y.((HeterozygousDominantRedFloweredPlant(x) & HeterozygousRedFloweredPlant(y)) -> CrossedWithRecessiveWhiteFloweredPlant(x,y))", "all x y z.((HeterozygousDominantRedFloweredPlant(x) & HeterozygousDominantRedFloweredPlant(y) & WhiteFloweredPlant(z)) -> Crossed(x,y,z))", "all x.((HeterozygousDominantRedFloweredPlants(x) & CrossedWithRecessiveWhiteFloweredPlants(x)) -> HeterozygousDistinctRedFloweredPlants(x))", "all x y.((Heterozygous(x) & PredominantRedFloweredPlant(y) & CrossedWith(x,y)) -> RecessiveWhiteFloweredPlant(x))"]}
{"id": "entailmentbank_validation_671", "nl": "crossing a heterozygous dominant organism with a homozygous recessive organism causes their offspring to be dominant or recessive with either of 50% probability.", "fol": "", "prediction": ["all x y.((HomozygousDominantOrganism(x) & HomozygousRecessiveOrganism(y)) -> (Crosses(x,y) & (DominantOrRecessiveOrganism(x) | RecessiveOrganism(x))))", "all x y.((Crossing(x,y) & HeterozygousDominantOrganism(x) & HomozygousRecessiveOrganism(y)) -> (CausesOffspring(x,y) & (Dominant(y) | Recessive(y))))", "all x y.((Crossing(x,y) & HeterozygousDominantOrganism(x) & HomozygousRecessiveOrganism(y)) -> (DominantOrRecessive(x) | 50%Probability(x)))", "all x y.((HomozygousDominantOrganism(x) & HomozygousRecessiveOrganism(y)) -> (Crosses(x,y) & (Dominant(x) | Recessive(x))))", "all x y.((Crossing(x,y) & HeterozygousDominantOrganism(y) & HomozygousRecessiveOrganism(x)) -> (DominantOrRecessive(x) | 50%Probability(x)))", "all x y z.((HomozygousDominantOrganism(x) & HomozygousRecessiveOrganism(y) & Crossing(x,y,z)) -> (CausesOffspringToBeDominantOrRecessive(z) & 50%Probability(z)))", "all x y.((Crossing(x,y) & HeterozygousDominantOrganism(x) & HomozygousRecessiveOrganism(y)) -> (CausesOffspringToBeDominantOrRecessive(x,y) & 50%Probability(x)))", "all x y z.((HomozygousDominantOrganism(x) & HomozygousRecessiveOrganism(y) & Crossing(x,y,z)) -> (CausesOffspringToBeDominantOrRecessive(z,50%)))", "all x y.((Crossing(x,y) & HeterozygousDominantOrganism(x) & HomozygousRecessiveOrganism(y)) -> (CausesOffspringToBeDominantOrRecessive(x) & 50%Probability(x)))", "all x y.((Crossing(x,y) & HomozygousDominantOrganism(x) & HomozygousRecessiveOrganism(y)) -> (DominantOrRecessive(x) | 50%Probability(x)))", "all x y.((Crossing(x,y) & HeterozygousDominantOrganism(x) & HomozygousRecessiveOrganism(y)) -> (DominantOrRecessiveOffspring(x) | 50%Probability(x)))", "all x y.((Crossing(x,y) & HeterozygousDominantOrganism(y) & HomozygousRecessiveOrganism(x)) -> (DominantOrRecessive(y) & 50%Probability(y)))", "all x y z.((Crossing(x,y) & HeterozygousDominantOrganism(y) & HomozygousRecessiveOrganism(z)) -> (CausesOffspring(x,z) & (Dominant(z) | Recessive(z)))))", "all x y z.((Crossing(x,y) & HeterozygousDominantOrganism(y) & HomozygousRecessiveOrganism(z)) -> (CausesOffspringToBeDominantOrRecessive(x,z) | 50%Probability(x,z)))", "all x y.((Crossing(x,y) & HeterozygousDominantOrganism(x) & HomozygousRecessiveOrganism(y)) -> (DominantOrRecessive(x) & 50%Probability(x)))", "all x y z.((Crossing(x,y) & HeterozygousDominantOrganism(y) & HomozygousRecessiveOrganism(z)) -> (CausesOffspringToBeDominantOrRecessive(x,z) & 50%Probability(x)))"]}
{"id": "entailmentbank_validation_672", "nl": "the offspring will have either dominant red flowers or recessive white flowers with either of 50% probability.", "fol": "", "prediction": ["all x.(Offspring(x) -> (DominantRedFlowers(x) | RecessiveWhiteFlowers(x)))", "all x.(Offspring(x) -> ((DominantRedFlowers(x) | RecessiveWhiteFlowers(x)) & (FiftyProbability(x) | 50%Probability(x))))", "all x.(Offspring(x) -> (HasDominantRedFlowers(x) | HasRecessiveWhiteFlowers(x)))", "all x.(Offspring(x) -> ((DominantRedFlowers(x) | RecessiveWhiteFlowers(x)) & 50%Probability(x)))", "all x.(Offspring(x) -> ((DistinctRedFlowers(x) | RecessiveWhiteFlowers(x)) & (FiftyProbability(x) | 50%Probability(x))))", "all x.(Offspring(x) -> ((DistantRedFlowers(x) | RecessiveWhiteFlowers(x)) & (FiftyProbability(x) | 50%Probability(x))))", "all x.(Offspring(x) -> ((DistinctRedFlowers(x) | ResistiveWhiteFlowers(x)) & (FiftyProbability(x) | 50%Probability(x))))", "all x.(Offspring(x) -> ((DominantRedFlowers(x) | ResponsiveWhiteFlowers(x)) & (FiftyProbability(x) | 50%Probability(x))))", "all x.(Offspring(x) -> ((DistantRedFlowers(x) | ResponsiveWhiteFlowers(x)) & (FiftyProbability(x) | 50%Probability(x))))", "all x.(Offspring(x) -> (DominantRedFlowers(x) | ResistiveWhiteFlowers(x)))", "all x.(Offspring(x) -> (DominantRedFlowers(x) | ResponsiveWhiteFlowers(x)))", "all x.(Offspring(x) -> ((DistinctRedFlowers(x) | RecessiveWhiteFlowers(x)) & 50%Probability(x)))", "all x.(Offspring(x) -> ((DistantRedFlowers(x) | RecessiveWhiteFlowers(x)) & 50%Probability(x)))", "all x.(Offspring(x) -> ((DominantRedFlowers(x) | RecessiveWhiteFlowers(x)) & (50PercentProbability(x) | 50PercentProbability(x))))", "all x.(Offspring(x) -> (DistinctRedFlowers(x) | RecessiveWhiteFlowers(x)))", "all x.(Offspring(x) -> ((DisruptiveRedFlowers(x) | RecessiveWhiteFlowers(x)) & (FiftyProbability(x) | 50%Probability(x))))"]}
{"id": "entailmentbank_validation_673", "nl": "each parent carries one sickle cell allele.", "fol": "", "prediction": ["all x.(Parent(x) -> CarriesSickleCellAllele(x))", "all x y.((Parent(x) & SickleCellAllele(y)) -> Carries(x,y))", "all x.(Parent(x) -> CarriesSilentCellAllele(x))", "all x y.((Parent(x) & Parent(y)) -> CarriesSickleCellAllele(x,y))", "all x.(Parent(x) -> CarriesSickleCellAllele(x))", "all x y z.((Parent(x) & SickleCellAllele(y) & Parent(z)) -> Carries(x,y,z))", "all x y z.((Parent(x) & SickleCellAllele(y) & Allele(z)) -> Carries(x,y,z))", "all x y.((Parent(x) & SickleCell(y)) -> Carries(x,y))", "all x y.((Parent(x) & Parent(y)) -> CarriesSilentCellAllele(x,y))", "all x.((Parent(x) & CarriesSickleCellAllele(x)) -> CarriesSickleCellAllele(x))", "all x y.((Parent(x) & Child(y)) -> CarriesSickleCellAllele(x,y))", "all x.(Parent(x) -> CarriesSickleCell(x))", "all x.(Parent(x) -> CarriesSilentCellAllele(x))", "all x y.((Parent(x) & Allele(y)) -> CarriesSickleCell(x,y))", "all x y.((Parent(x) & SickleCellAllele(y)) -> Carries(x,y))", "all x y.((Parent(x) & Allele(y)) -> Carries(x,y))"]}
{"id": "entailmentbank_validation_674", "nl": "sickle cell anemia is a recessive trait in human.", "fol": "", "prediction": ["all x.(SickleCellAnemia(x) -> RecessiveTraitInHuman(x))", "all x.(SickleCellAnemia(x) -> RecessiveTraitInHuman(x))", "all x.(SickleCellAnemia(x) -> RecessiveTrait(x))", "all x.(SickleCellAnemia(x) -> RecessiveTrait(x))", "all x y.((SickleCellAnemia(x) & Human(y)) -> RecessiveTrait(x,y))", "all x.(SickleCellAnemia(x) -> RecessiveTreatmentInHuman(x))", "all x y.((SickleCellAnemia(x) & Human(y)) -> RecessiveTrait(x,y))", "all x.(SickleCellAnemia(x) -> RecessiveTreatment(x))", "all x.(SilentCellAnemia(x) -> RecessiveTraitInHuman(x))", "all x.(SilentCellAnemia(x) -> RecessiveTraitInHuman(x))", "all x y.((SickleCellAnemia(x) & Human(y)) -> RecessiveTreatment(x,y))", "all x y.((SickleCellAnemia(x) & Human(y)) -> RecessiveTrait(x))", "all x.(SickleCellAnemia(x) -> (RecessiveTrait(x) & InHuman(x)))", "all x.(SickleCellAnemia(x) -> ResponsiveTraitInHuman(x))", "all x.(SickleCellAnemia(x) -> RecessiveTraitInHuman(x))", "all x y.((SickleCellAnemia(x) & Human(y)) -> RecessiveTrait(x,y))"]}
{"id": "entailmentbank_validation_675", "nl": "each parent has one dominant gene and a recessive gene for sickle cell anemia.", "fol": "", "prediction": ["all x.(Parent(x) -> (HasDominantGene(x) & HasRecessiveGene(x)))", "all x y.((Parent(x) & Parent(y)) -> (HasDominantGene(x,y) & HasRecessiveGene(x,y)))", "all x.(Parent(x) -> (HasDominantGene(x) & HasRecessiveGene(x) & ForSickleCellAnemia(x)))", "all x y.((Parent(x) & Parent(y)) -> (DominantGene(x,y) & RecessiveGene(x,y)))", "all x y.((Parent(x) & Parent(y)) -> (HasDominantGene(x,y) & HasRecessiveGene(x,y) & ForSickleCellAnemia(x)))", "all x y.((Parent(x) & Parent(y)) -> (HasDominantGene(x,y) & HasRecessiveGene(x,y) & ForSickleCellAnemia(x,y)))", "all x.(Parent(x) -> (exists y.(DominantGene(y) & Has(x,y)) & exists z.(RecessiveGene(z) & Has(x,z)))))", "all x y z.((Parent(x) & Parent(y) & SickleCellAnemia(z)) -> (HasDominantGene(x,y) & HasRecessiveGene(x,z)))", "all x y.((Parent(x) & Parent(y) & HasDominantGene(x,y) & HasRecessiveGene(x,y)) -> SickleCellAnemia(x))", "all x.(Parent(x) -> (HasDominantGene(x) & HasRecessiveGeneForSickleCellAnemia(x)))", "all x y.((Parent(x) & Parent(y)) -> (DominantGene(x,y) & ResponsiveGene(x,y)))", "all x y.((Parent(x) & Parent(y)) -> (DominantGene(x,y) & RecessiveGene(x,y) & ForSickleCellAnemia(x,y)))", "all x y z.((Parent(x) & Parent(y) & Parent(z)) -> (HasDominantGene(x,y) & HasRecessiveGene(x,z)))", "all x y.((Parent(x) & Parent(y)) -> (DominantGene(x,y) & ResistiveGene(x,y)))", "all x y.((Parent(x) & Parent(y)) -> (DominantGene(x,y) & RecessiveGene(x,y) & ForSickleCellAnemia(x)))", "all x.(Parent(x) -> (HasDisruptiveGene(x) & HasRecessiveGene(x)))"]}
{"id": "entailmentbank_validation_676", "nl": "heterozygous dominant organisms have one dominant gene and one recessive gene.", "fol": "", "prediction": ["all x.(HeterozygousDominantOrganism(x) -> (HasDominantGene(x) & HasRecessiveGene(x)))", "all x.(HomozygousDominantOrganism(x) -> (HasDominantGene(x) & HasRecessiveGene(x)))", "all x.(HeterozygousDominantOrganism(x) -> (exists y.(DominantGene(y) & Has(x,y))) & exists z.(RecessiveGene(z) & Has(x,z))))", "all x.((Organism(x) & HeterozygousDominant(x)) -> (HasDominantGene(x) & HasRecessiveGene(x)))", "all x.((Organism(x) & Heterozygous(x)) -> (HasDominantGene(x) & HasRecessiveGene(x)))", "all x.(HeterozygousDistantOrganism(x) -> (HasDominantGene(x) & HasRecessiveGene(x)))", "all x.(HeterozygousDisruptiveOrganism(x) -> (HasDominantGene(x) & HasRecessiveGene(x)))", "all x.(HeterozygousDominantOrganism(x) -> (exists y.(DominantGene(y) & Has(x,y)) & exists z.(RecessiveGene(z) & Has(x,z)))))", "all x.(HybridDominantOrganism(x) -> (HasDominantGene(x) & HasRecessiveGene(x)))", "all x.(HydrogousDominantOrganism(x) -> (HasDominantGene(x) & HasRecessiveGene(x)))", "all x.(HydrozygousDominantOrganism(x) -> (HasDominantGene(x) & HasRecessiveGene(x)))", "all x.(HeterozygousDominantOrganism(x) -> (exists y.(DominantGene(y) & Has(x,y))) & exists z.(RecessiveGene(z) & Has(x,z)))))", "all x.(HygrozygousDominantOrganism(x) -> (HasDominantGene(x) & HasRecessiveGene(x)))", "all x.(HeterozygousDominatingOrganism(x) -> (HasDominantGene(x) & HasRecessiveGene(x)))", "all x.(HybridOrganism(x) -> (HasDominantGene(x) & HasRecessiveGene(x)))", "all x.(HeterozygousDominantOrganism(x) -> (HasOneDominantGene(x) & HasOneRecessiveGene(x)))"]}
{"id": "entailmentbank_validation_677", "nl": "both parents are heterozygous dominant for sickle cell anemia.", "fol": "", "prediction": ["all x y.((Parent(x) & Parent(y)) -> HeterozygousDominantForSickleCellAnemia(x,y))", "all x y.((Parent(x) & Parent(y)) -> HeterozygousDominantForSickleCellAnemia(x))", "all x.((Parent(x) & HeterozygousDominant(x)) -> SickleCellAnemia(x))", "all x.((Parent(x) & HeterozygousDominantForSickleCellAnemia(x)) -> HeterozygousDominantForSickleCellAnemia(x))", "all x y.((Parent(x) & Parent(y)) -> (HeterozygousDominantForSickleCellAnemia(x) & HeterozygousDominantForSickleCellAnemia(x)))", "all x.((Parent(x) & HeterozygousDominantForSickleCellAnemia(x)) -> BothParentsDominantForSickleCellAnemia(x))", "all x y.((Parent(x) & Parent(y)) -> (HeterozygousDominantForSickleCellAnemia(x) & HeterozygousDominantForSickleCellAnemia(y)))", "all x.((Parent(x) & HeterozygousDominantForSickleCellAnemia(x)) -> DistinctForSickleCellAnemia(x))", "all x y.((Parent(x) & Parent(y)) -> HeterozygousDisruptiveForSickleCellAnemia(x,y))", "all x y.((Parent(x) & Parent(y)) -> HeterozygousDominantForSilentCellAnemia(x,y))", "all x.((Parent(x) & Parent(x)) -> HeterozygousDominantForSickleCellAnemia(x))", "all x y.((Parent(x) & Parent(y) & HeterozygousDominantForSickleCellAnemia(x)) -> HeterozygousDominantForSickleCellAnemia(x))", "all x y.((Parent(x) & Parent(y) & HeterozygousDominantForSickleCellAnemia(x,y)) -> HeterozygousDominantForSickleCellAnemia(x,y))", "all x y z.((Parent(x) & Parent(y) & SickleCellAnemia(z)) -> HeterozygousDominant(x,y,z))", "all x y.((Parent(x) & Parent(y)) -> HeterozygousDisruptiveForSickleCellAnemia(x))", "all x y.((Parent(x) & Parent(y) & HeterozygousDominantForSickleCellAnemia(x,y)) -> HeterozygousDominantForSickleCellAnemia(x))"]}
{"id": "entailmentbank_validation_678", "nl": "if a heterozygous dominant organism is crossed with a heterozygous dominant organism, then the offspring will have a 25% probability of being homozygous recessive.", "fol": "", "prediction": ["all x y.((HeterozygousDominantOrganism(x) & Crossed(x,y) & HeterozygousDominantOrganism(y)) -> Has25PercentProbabilityOfHomozygousRecessive(x))", "all x.((HeterozygousDominantOrganism(x) & CrossedWithHeterozygousDominantOrganism(x)) -> 25%ProbabilityOfHomozygousRecessiveOffspring(x))", "all x.((HeterozygousDominantOrganism(x) & CrossedWithHeterozygousDominantOrganism(x)) -> Has25PercentProbabilityOfHomozygousRecessive(x))", "all x.((HeterozygousDominantOrganism(x) & CrossedWithHeterozygousDominantOrganism(x)) -> 25%ProbabilityOfHomozygousRecessive(x))", "all x.((HeterozygousDominantOrganism(x) & CrossedWithHeterozygousDominantOrganism(x)) -> Has25PercentProbabilityOfHomozygousRecessiveOffspring(x))", "all x y.((HeterozygousDominantOrganism(x) & CrossedWithHeterozygousDominantOrganism(x)) -> Has25PercentProbabilityOfHomozygousRecessive(y))", "all x y.((HeterozygousDominantOrganism(x) & Crossed(x,y) & HeterozygousDominantOrganism(y)) -> 25%ProbabilityOfHomozygousRecessive(x))", "all x y.((HeterozygousDominantOrganism(x) & HeterozygousDominantOrganism(y) & Crossed(x,y)) -> Has25PercentProbabilityOfHomozygousRecessive(x))", "all x y.((HeterozygousDominantOrganism(x) & Crossed(x,y) & HeterozygousDominantOrganism(y)) -> Has25PercentProbabilityOfHomozygousRecessiveOffspring(x))", "all x y.((HeterozygousDominantOrganism(x) & Crossed(x,y) & HeterozygousDominantOrganism(y)) -> HasProbabilityOfHomozygousRecessive(x,y))", "all x y.((HeterozygousDominantOrganism(x) & Crossed(x,y) & HeterozygousDominantOrganism(y)) -> 25%ProbabilityOfHomozygousRecessiveOffspring(x))", "all x y.((HeterozygousDominantOrganism(x) & Crossed(x,y) & HeterozygousDominantOrganism(x)) -> Has25PercentProbabilityOfHomozygousRecessive(x))", "all x y.((HeterozygousDominantOrganism(x) & HeterozygousDominantOrganism(y) & CrossedWith(x,y)) -> Has25PercentProbabilityOfHomozygousRecessive(x))", "all x y z.((HeterozygousDominantOrganism(x) & HeterozygousDominantOrganism(y) & Offspring(z) & Crossed(x,y,z)) -> 25%ProbabilityOfHomozygousRecessive(z))", "all x y.((HeterozygousDominantOrganism(x) & CrossedWith(x,y) & HeterozygousDominantOrganism(y)) -> Has25PercentProbabilityOfHomozygousRecessive(x))", "all x y.((HeterozygousDominantOrganism(x) & CrossedWithHeterozygousDominantOrganism(x)) -> Has25PercentProbabilityOfHomozygousRecessive(x))"]}
{"id": "entailmentbank_validation_679", "nl": "the offspring of heterozygous dominant parents will have 25% probability of being homozygous recessive for sickle cell anemia.", "fol": "", "prediction": ["all x.((Offspring(x) & HeterozygousDominantParents(x)) -> 25%ProbabilityOfHomozygousRecessiveForSickleCellAnemia(x))", "all x.((OffspringOfHeterozygousDominantParents(x) & 25%ProbabilityOfHomozygousRecessiveForSickleCellAnemia(x)) -> HomozygousRecessiveForSickleCellAnemia(x))", "all x.((Offspring(x) & HomozygousDominantParents(x)) -> 25%ProbabilityOfHomozygousRecessiveForSickleCellAnemia(x))", "all x.((Offspring(x) & HeterozygousDominantParents(x)) -> Has25PercentProbabilityOfHomozygousRecessiveForSickleCellAnemia(x))", "all x.((OffspringOfHeterozygousDominantParents(x) & 25%ProbabilityOfHomozygousRecessiveForSickleCellAnemia(x)) -> HomozygousRecessive(x))", "all x.((OffspringOfHeterozygousDominantParents(x) & 25%ProbabilityOfHomozygousRecessive(x)) -> SickleCellAnemia(x))", "all x.((OffspringOfHeterozygousDominantParents(x) & 25%ProbabilityOfSickleCellAnemia(x)) -> HomozygousRecessiveForSickleCellAnemia(x))", "all x.((Offspring(x) & HeterozygousDominantParents(x)) -> Has25%ProbabilityOfHomozygousRecessiveForSickleCellAnemia(x))", "all x.((Offspring(x) & HomozygousDominantParents(x)) -> Has25PercentProbabilityOfHomozygousRecessiveForSickleCellAnemia(x))", "all x.((Offspring(x) & HeterozygousDominantParents(x)) -> HasMagnitudeOfHomozygousRecessiveForSickleCellAnemia(x,25))", "all x.((OffspringOfHeterozygousDominantParents(x) & 25%ProbabilityOfSickleCellAnemia(x)) -> HomozygousRecessive(x))", "all x.((OffspringOfHeterozygousDominantParents(x) & 25%ProbabilityOfHomozygousRecessiveForSickleCellAnemia(x)) -> HeterozygousDominantParents(x))", "all x.((OffspringOfHeterozygousDominantParents(x) & 25%ProbabilityOfHomozygousRecessiveSickleCellAnemia(x)) -> HomozygousRecessiveForSickleCellAnemia(x))", "all x.((Offspring(x) & HeterozygousDominantParents(x)) -> HasProbabilityOfHomozygousRecessiveForSickleCellAnemia(x,25))", "all x.((Offspring(x) & HeterozygousDominantParents(x)) -> 25%ProbabilityOfHomozygousRecessive(x))", "all x.((OffspringOfHeterozygousDominantParents(x) & 25%ProbabilityOfHomozygousRecessiveSickleCellAnemia(x)) -> HomozygousRecessiveSickleCellAnemia(x))"]}
{"id": "entailmentbank_validation_680", "nl": "homozygous recessive organisms will show the recessive trait.", "fol": "", "prediction": ["all x.(HomozygousRecessiveOrganism(x) -> ShowsRecessiveTrait(x))", "all x.(HomozygousRecessiveOrganism(x) -> ShowsRecessiveTrait(x))", "all x y.((HomozygousRecessiveOrganism(x) & HomozygousRecessiveOrganism(y)) -> ShowsRecessiveTrait(x,y))", "all x.((HomozygousRecessiveOrganism(x) & HomozygousRecessiveOrganism(x)) -> ShowsRecessiveTrait(x))", "all x.(HomozygousRecessiveOrganism(x) -> ShowRecessiveTrait(x))", "all x y.((HomozygousRecessiveOrganism(x) & HomozygousRecessiveOrganism(y)) -> ShowsRecessiveTrait(x,y))", "all x.(HomozygousRecessiveOrganism(x) -> ShowsRecessiveTreatment(x))", "all x.(HomozygousRecessiveOrganism(x) -> ShowRecessiveTrait(x))", "all x.((HomozygousRecessiveOrganism(x) & HomozygousRecessiveOrganism(x)) -> ShowsRecessiveTrait(x))", "all x.((Homozygous(x) & RecessiveOrganism(x)) -> ShowsRecessiveTrait(x))", "all x.((HomozygousRecessiveOrganism(x) & ShowsRecessiveTrait(x)) -> ShowsRecessiveTrait(x))", "all x.((HomozygousRecessiveOrganism(x) & ShowsRecessiveTrait(x)) -> ShowsRecessiveTrait(x))", "all x.((Homozygous(x) & RecessiveOrganism(x)) -> ShowsRecessiveTrait(x))", "all x.((HomozygousRecessiveOrganism(x) & HomozygousRecessiveOrganism(x)) -> ShowRecessiveTrait(x))", "all x y.((HomozygousRecessiveOrganism(x) & HomozygousRecessiveOrganism(y)) -> ShowRecessiveTrait(x,y))", "all x y.((Homozygous(x) & RecessiveOrganism(y)) -> ShowsRecessiveTrait(x,y))"]}
{"id": "entailmentbank_validation_681", "nl": "the offspring of heterozygous dominant parents will have 25% probability of having sickle cell anemia.", "fol": "", "prediction": ["all x.((Offspring(x) & HeterozygousDominantParents(x)) -> 25%ProbabilityOfSickleCellAnemia(x))", "all x.((Offspring(x) & HeterozygousDominantParent(x)) -> 25%ProbabilityOfSickleCellAnemia(x))", "all x.((Offspring(x) & HeterozygousDominantParents(x)) -> 25%ProbabilityOfSilentCellAnemia(x))", "all x.((Offspring(x) & HomozygousDominantParents(x)) -> 25%ProbabilityOfSickleCellAnemia(x))", "all x.((Offspring(x) & HeterozygousDominantParents(x)) -> 50%ProbabilityOfSickleCellAnemia(x))", "all x.((Offspring(x) & HeterozygousDominantParents(x)) -> HasSickleCellAnemia(x,25))", "all x.((OffspringOfHeterozygousDominantParents(x) & 25%ProbabilityOfSickleCellAnemia(x)) -> HeterozygousDominantParents(x))", "all x y.((Offspring(x) & HeterozygousDominantParent(y)) -> 25%ProbabilityOfSickleCellAnemia(x,y))", "all x.((Offspring(x) & HeterozygousDominantParent(x)) -> 25%ProbabilityOfSilentCellAnemia(x))", "all x.((OffspringOfHeterozygousDominantParents(x) & HasSickleCellAnemia(x,25)) -> HasSickleCellAnemia(x))", "all x.((OffspringOfHeterozygousDominantParents(x) & HasSickleCellAnemia(x)) -> 25%Probability(x))", "all x.((OffspringOfHeterozygousDominantParents(x) & 25%ProbabilityOfSickleCellAnemia(x)) -> HasSickleCellAnemia(x))", "all x.((Offspring(x) & HeterozygousDominantParents(x)) -> SickleCellAnemia(x,25))", "all x y.((Offspring(x) & HeterozygousDominantParent(y)) -> 25%ProbabilityOfSickleCellAnemia(x))", "all x.((OffspringOfHeterozygousDominantParents(x) & HasSickleCellAnemia(x,25)) -> HasSickleCellAnemia(x,25))", "all x.((OffspringOfHeterozygousDominantParents(x) & 25%ProbabilityOfSickleCellAnemia(x)) -> DominantParents(x))"]}
{"id": "entailmentbank_validation_682", "nl": "one in four is the same as 25%.", "fol": "", "prediction": ["all x.((OneInFour(x) & SameAt25(x)) -> SameAt25(x))", "all x.((InFour(x) & SameAt25(x)) -> SameAt25(x))", "all x.((OneInFour(x) & SameAt25Percent(x)) -> SameAt25Percent(x))", "all x.(OneInFour(x) -> SameAs25Percent(x))", "all x.(OneInFour(x) -> SameAt25(x))", "all x.(OneInFour(x) -> SameAt25Percent(x))", "all x.((InFour(x) & SameAverage(x,25%)) -> SameAverage(x,4))", "all x y.((OneInFour(x) & 25%(y)) -> Same(x,y))", "all x.((InFour(x) & SameAverage(x,25%)) -> SameAverage(x,25%))", "all x.((OneInFour(x) & SameAt25%)) -> SameAt25%(x))", "all x y.((InFour(x) & OneInFour(y)) -> SameAt25(x,y))", "all x y.((InFour(x) & OneInFour(y)) -> SameAs25(x,y))", "all x.((OneInFour(x) & Same(x,25%)) -> Same(x,25%))", "all x.((InFour(x) & Same(x,25%)) -> Same(x,25%))", "all x.((OneInFour(x) & 25%(x)) -> Same(x))", "all x.(OneInFour(x) -> SameAs25(x))"]}
{"id": "entailmentbank_validation_683", "nl": "one in four of the offspring of heterozygous dominant parents will have sickle cell anemia.", "fol": "", "prediction": ["all x.((Offspring(x) & HeterozygousDominantParent(x)) -> HasSickleCellAnemia(x))", "all x.((Offspring(x) & HeterozygousDominantParents(x)) -> HasSickleCellAnemia(x))", "all x.((Offspring(x) & HeterozygousDominantParent(x)) -> SickleCellAnemia(x))", "all x.((Offspring(x) & HomozygousDominantParent(x)) -> HasSickleCellAnemia(x))", "all x.((Offspring(x) & HeterozygousDominantParents(x)) -> SickleCellAnemia(x))", "all x.((Offspring(x) & HomozygousDominantParents(x)) -> HasSickleCellAnemia(x))", "all x.((OffspringOfHeterozygousDominantParents(x) & HeterozygousDominantParents(x)) -> HasSickleCellAnemia(x))", "all x y.((Offspring(x) & HeterozygousDominantParent(y)) -> HasSickleCellAnemia(x,y))", "all x y.((Offspring(x) & HomozygousDominantParent(y)) -> HasSickleCellAnemia(x,y))", "all x.((Offspring(x) & HomozygousDominantParent(x)) -> SickleCellAnemia(x))", "all x y.((Offspring(x) & HeterozygousDominantParent(y) & Offspring(x,y)) -> HasSickleCellAnemia(x))", "all x y z.((Offspring(x) & HeterozygousDominantParent(y) & HeterozygousDominantParent(z)) -> HasSickleCellAnemia(x,y,z))", "all x.((Offspring(x) & HomozygousDominantParents(x)) -> SickleCellAnemia(x))", "all x.((Offspring(x) & HeterozygousDominantParent(x)) -> HasSilentCellAnemia(x))", "all x.((OffspringOfHeterozygousDominantParents(x) & HeterozygousDominantParents(x)) -> SickleCellAnemia(x))", "all x.((Offspring(x) & HeterozygousDominantParents(x)) -> HasSilentCellAnemia(x))"]}
{"id": "entailmentbank_validation_684", "nl": "a plant is a kind of organism.", "fol": "", "prediction": ["all x.(Plant(x) -> Organism(x))", "all x y.((Plant(x) & Organism(y)) -> Organism(x))", "all x.(Plant(x) -> Organism(x))", "all x y.((Plant(x) & Organism(y)) -> Organism(x,y))", "all x.((Plant(x) & Organism(x)) -> Organism(x))", "all x y.((Plant(x) & Organism(y)) -> SortOf(x,y))", "all x y z.((Plant(x) & Organism(y) & Organism(z)) -> Organism(x))", "all x y z.((Plant(x) & Organism(y) & Organism(z)) -> Organism(x,y,z))", "exists x.(Plant(x) & Organism(x))", "all x y z.((Plant(x) & Organism(y) & Plant(z)) -> Organism(x,y,z))", "all x y z.((Plant(x) & Organism(y) & Plant(z)) -> Organism(x))", "all x y.((Plant(x) & Organism(y)) -> Organospheric(x))", "all x.exists y.(Plant(x) & Organism(y) & GrowsIn(x,y))", "all x y z.((Plant(x) & Organism(y) & Organism(z)) -> Organism(x,y))", "all x.exists y.(Plant(x) & Organism(y) & Organism(x,y))", "all x y.((Plant(x) & Organism(y)) -> Is(x,y))"]}
{"id": "entailmentbank_validation_685", "nl": "flower is a part of a plant.", "fol": "", "prediction": ["all x.(Flower(x) -> PartOfPlant(x))", "all x y.((Flower(x) & Plant(y)) -> PartOf(x,y))", "all x y z.((Flower(x) & Plant(y) & Plant(z)) -> PartOf(x,y,z))", "all x y z.((Flower(x) & Plant(y) & Plant(z) & PartOf(x,y,z)) -> PartOf(x,y,z))", "all x y z.((Flower(x) & Plant(y) & PartOf(x,y)) -> PartOf(x,z))", "all x y.((Flower(x) & Plant(y) & PartOf(x,y)) -> PartOf(x,y))", "all x y z.((Flower(x) & Plant(y) & Plant(z) & PartOf(x,y,z)) -> PartOf(x,y))", "all x y z.((Flower(x) & Plant(y) & Plant(z) & PartOf(x,y)) -> PartOf(x,z))", "all x.(Flower(x) -> PartOfPlant(x))", "all x y z.((Flower(x) & Plant(y) & Plant(z)) -> PartOf(x,y))", "all x y z.((Flower(x) & Plant(y) & PartOf(x,y)) -> PartOf(x,y))", "all x y z.((Flower(x) & Plant(y) & PartOf(x,z)) -> PartOf(x,y))", "all x y.((Flowering(x) & Plant(y)) -> PartOf(x,y))", "all x y z.((Flower(x) & Plant(y) & Plant(z) & PartOf(x,y)) -> PartOf(x,y,z))", "all x y z.((Flower(x) & Plant(y) & Flower(z)) -> PartOf(x,y,z))", "all x.exists y.(Flower(x) & Plant(y) & PartOf(x,y))"]}
{"id": "entailmentbank_validation_686", "nl": "the colors of parts of an organism are inherited characteristics.", "fol": "", "prediction": ["all x.((Color(x) & PartOfOrganism(x)) -> ErasedCharacteristics(x))", "all x y.((Organism(x) & Color(y)) -> ErasedCharacteristics(x,y))", "all x.((PartOfOrganism(x) & Color(x)) -> ErasedCharacteristics(x))", "all x.((PartOfOrganism(x) & ColorsOfPartsOfOrganism(x)) -> ErasedCharacteristics(x))", "all x.((PartOfOrganism(x) & Colors(x)) -> ErasedCharacteristics(x))", "all x.((Colors(x) & PartsOfOrganism(x)) -> ErasedCharacteristics(x))", "all x.((PiecesOfOrganism(x) & ColorsOfPartsOfOrganism(x)) -> ErasedCharacteristics(x))", "all x.((Organism(x) & Colors(x)) -> ErasedCharacteristics(x))", "all x y.((Organism(x) & Color(y)) -> ErasedCharacteristics(x))", "all x y.((PartOfOrganism(x) & Color(y)) -> ErasedCharacteristics(x,y))", "all x.((Organism(x) & Color(x)) -> ErasedCharacteristics(x))", "all x.((Color(x) & Organ(x)) -> ErasedCharacteristics(x))", "all x y.((Organism(x) & Color(y) & PartOf(x,y)) -> ErasedCharacteristics(x))", "all x y.((Organism(x) & Colors(y)) -> ErasedCharacteristics(x,y))", "all x.((PiecesOfOrganism(x) & ColorsOfParts(x)) -> ErasedCharacteristics(x))", "all x y.((OrganismPart(x) & Color(y)) -> ErasedCharacteristics(x,y))"]}
{"id": "entailmentbank_validation_687", "nl": "the color of plants' flowers is a kind of inherited characteristic.", "fol": "", "prediction": ["all x.((FlowerColor(x) & Plant(x)) -> ErasedCharacteristic(x))", "all x y.((Plant(x) & Flower(y) & Color(x,y)) -> ErasedCharacteristic(x))", "all x.((Plant(x) & FlowerColor(x)) -> ErasedCharacteristic(x))", "all x y.((Plant(x) & Flower(y) & Color(x,y)) -> ErasedCharacteristic(x,y))", "all x y.((Plant(x) & Flower(y)) -> (Color(x,y) & ErasedCharacteristic(x)))", "all x y.((Plant(x) & Flower(y)) -> ColorEarnedCharacteristic(x,y))", "all x y.((Plant(x) & Flower(y)) -> (Color(x,y) & ErasedCharacteristic(x,y)))", "all x y.((Plant(x) & Flower(y)) -> (Color(x,y) & inheritedCharacteristic(x,y)))", "all x y.((Plant(x) & Flower(y)) -> (Color(x,y) & inheritedCharacteristic(x)))", "all x y.((Plant(x) & Flower(y)) -> (Colored(x,y) & ErasedCharacteristic(x)))", "all x.((ColorOfFlowers(x) & Plant(x)) -> ErasedCharacteristic(x))", "all x y.((Plant(x) & Flower(y)) -> InheritableCharacteristic(x,y))", "all x y.((Plant(x) & Flower(y)) -> (Color(x,y) & InheritableCharacteristic(x,y)))", "all x y.((Plant(x) & Flower(y) & Color(x,y)) -> inheritedCharacteristic(x))", "all x y.((Plant(x) & Flower(y)) -> (Colored(x,y) & ErasedCharacteristic(x,y)))", "all x.((Plant(x) & Flowers(x)) -> ErasedCharacteristic(x))"]}
{"id": "entailmentbank_validation_688", "nl": "inheriting is when an inherited characteristic is passed down from parent to offspring by genetics / dna.", "fol": "", "prediction": ["all x y z.((Inheriting(x) & Parent(y) & Offspring(z) & Genetics(x) & Dna(x)) -> PassedDown(x,y,z))", "all x y z.((Earning(x) & Parent(y) & Offspring(z) & Genetics(x) & Dna(x)) -> PassedDown(x,y,z))", "all x y z.((Inheriting(x) & Parent(y) & Offspring(z) & Genetics(y) & Dna(z)) -> PassedDown(x,y,z))", "all x y z.((EmbeddedCharacteristic(x) & Parent(y) & Offspring(z) & Genetics(x) & Dna(x)) -> PassedDown(x,y,z))", "all x y z.((Earning(x) & Parent(y) & Offspring(z) & Genetics(y) & Dna(z)) -> PassedDown(x,y,z))", "all x y z.((Inheriting(x) & Parent(y) & Offspring(z) & GeneticsDna(x)) -> PassedDown(x,y,z))", "all x y z.((Earning(x) & Parent(y) & Offspring(z) & GeneticsDna(x)) -> PassedDown(x,y,z))", "all x y z.((Inheriting(x) & Parent(y) & Offspring(z) & GeneticsDna(y)) -> PassedDown(x,y,z))", "all x y z.((EmbeddedCharacteristic(x) & Parent(y) & Offspring(z) & Genetics(x) & Dna(x)) -> PassedDownBy(x,y,z))", "all x y z.((Inheriting(x) & Parent(y) & Offspring(z) & Genetics(y) & Dna(z)) -> PassesCharacteristic(x,y,z))", "all x y z.((Inheriting(x) & Parent(y) & Offspring(z) & Genetics(y) & Dna(y)) -> PassedDown(x,y,z))", "all x y z.((Inheriting(x) & Parent(y) & Offspring(z) & Genetics(x) & Dna(x)) -> PassesCharacteristic(x,y,z))", "all x y z.((Earning(x) & Parent(y) & Offspring(z) & Genetics(x) & Dna(x)) -> PassedDownBy(x,y,z))", "all x y z.((Inheriting(x) & Parent(y) & Offspring(z) & Genetics(z)) -> PassedDownBy(x,y,z))", "all x y z.((Inheriting(x) & Parent(y) & Offspring(z) & Genetics(x) & Dna(x)) -> PassedDownBy(x,y,z))", "all x y.((Inheriting(x) & Parent(y) & Offspring(y)) -> PassedDownByGenetics(x,y))"]}
{"id": "entailmentbank_validation_689", "nl": "plants offspring can inherit the flower color from their parents.", "fol": "", "prediction": ["all x y.((Plant(x) & Offspring(y)) -> (InheritsFlowerColor(y,x) & FromParents(y,x)))", "all x y.((Plant(x) & Offspring(y)) -> (EmbearsFlowerColor(y,x) & FromParents(y,x)))", "all x y z.((Plant(x) & Offspring(y) & FlowerColor(z)) -> CanEmbear(y,z))", "all x y.((Plant(x) & Offspring(y)) -> ShedsFlowerColor(y,x))", "all x y.((Plant(x) & Offspring(y)) -> (HeadsFlowerColor(y,x) & FromParents(y,x)))", "all x y z.((Plant(x) & Offspring(y) & FlowerColor(z)) -> ShedsFromParents(y,z))", "all x y z.((Plant(x) & Offspring(y) & FlowerColor(z)) -> CanHerit(y,z))", "all x y.((Plant(x) & Offspring(y)) -> (HeritsFlowerColor(y,x) & FromParents(y,x)))", "all x y z.((Plant(x) & Offspring(y) & FlowerColor(z)) -> ShedsFromParent(y,z))", "all x y z.((Plant(x) & Offspring(y) & FlowerColor(z) & Parent(z)) -> CanEmbear(y,z))", "all x y.((Plant(x) & Offspring(y)) -> (InheritsFlowerColor(y,x) & FromParent(y,x)))", "all x y z.((Plant(x) & Offspring(y) & FlowerColor(z) & Parent(z)) -> CanHerit(y,z))", "all x y.((Plant(x) & Offspring(y)) -> (EmbearsFlowerColor(y,x) & FromParent(y,x)))", "all x y z.((Plant(x) & Offspring(y) & FlowerColor(z) & Parents(z)) -> CanEmbear(y,z))", "all x y.((Plant(x) & Offspring(y)) -> (HeadsFlowerColor(y,x) & FromParent(y,x)))", "all x y.((Plant(x) & Offspring(y)) -> (HeadsFlowerColor(y,x) & Parents(y)))"]}
{"id": "entailmentbank_validation_690", "nl": "yellow is a kind of color.", "fol": "", "prediction": ["all x.(Yellow(x) -> Color(x))", "all x.((Yellow(x) & Color(x)) -> Color(x))", "all x y.((Yellow(x) & Color(y)) -> Color(x,y))", "all x.(Yellow(x) -> Color(x))", "all x.((Yellow(x) & Color(y)) -> Color(x,y))", "all x y.((Yellow(x) & Color(y)) -> Color(x))", "all x.((Yellow(x) & Color(y)) -> Color(x))", "all x.((Yellow(x) & Colour(x)) -> Color(x))", "all x y.((Yellow(x) & Color(y)) -> Color(y))", "all x.((Yellow(x) & Color(x)) -> Color(x,y))", "all x.((Yellow(x) & Color(x)) -> Colour(x))", "exists x.(Yellow(x) & Color(x))", "all x.((Yellow(x) & Color(y)) -> Color(y))", "all x.(Yellow(x) -> Colour(x))", "all x.((Yellow(x) & Color(x)) -> IsColor(x))", "all x.((Yellow(x) & Color(x)) -> KindOf(x,y))"]}
{"id": "entailmentbank_validation_691", "nl": "the plant offspring has yellow flowers.", "fol": "", "prediction": ["all x.(PlantOffspring(x) -> HasYellowFlowers(x))", "all x.((PlantOffspring(x) & YellowFlowers(x)) -> Has(x,y))", "all x.((PlantOffspring(x) & YellowFlowers(x)) -> Has(x))", "all x.(PlantOffspring(x) -> YellowFlowers(x))", "all x y.((PlantOffspring(x) & Plant(y)) -> HasYellowFlowers(x,y))", "all x.((PlantOffspring(x) & HasYellowFlowers(x)) -> HasYellowFlowers(x))", "all x y.((PlantOffspring(x) & YellowFlowers(y)) -> Has(x,y))", "all x y.((PlantOffspring(x) & Plant(y)) -> YellowFlowers(x))", "all x y.((PlantOffspring(x) & Plant(y)) -> HasYellowFlowers(x))", "all x.((PlantOffspring(x) & YellowFlowers(x)) -> Has(x,x))", "all x y.((PlantOffspring(x) & Plant(y)) -> YellowFlowers(x,y))", "all x.((PlantOffspring(x) & YellowFlowers(x)) -> Hats(x))", "all x.(PestOffspring(x) -> HasYellowFlowers(x))", "all x.((PlantOffspring(x) & YellowFlower(x)) -> Has(x,y))", "all x.(PlantOffspringHasYellowFlowers(x) -> HasYellowFlowers(x))", "all x y.((PlantOffspring(x) & YellowFlower(y)) -> Has(x,y))"]}
{"id": "entailmentbank_validation_692", "nl": "the parents of the plant are likely to have yellow flowers.", "fol": "", "prediction": ["all x.((Parent(x) & Plant(x)) -> YellowFlowers(x))", "all x.(Parent(x) -> YellowFlowers(x))", "all x y.((Plant(x) & Parent(y)) -> YellowFlowers(y))", "all x y.((Plant(x) & Parent(y)) -> YellowFlowers(x))", "all x y.((Plant(x) & Parent(y)) -> YellowFlowers(x,y))", "all x.((PlantParent(x) & HasYellowFlowers(x)) -> LikelyHasYellowFlowers(x))", "all x.((PlantParent(x) & HasYellowFlowers(x)) -> HasYellowFlowers(x))", "all x y.((Plant(x) & Parent(y)) -> HasYellowFlowers(x,y))", "all x.((PlantParent(x) & YellowFlowers(x)) -> LikelyHas(x,y))", "all x y.((Parent(x) & Plant(y)) -> YellowFlowers(y))", "all x.((Parent(x) & Plant(y)) -> YellowFlowers(y))", "all x.((Parent(x) & Plant(x)) -> HasYellowFlowers(x))", "all x.((PlantParent(x) & HasYellowFlowers(x)) -> LikelyToHaveYellowFlowers(x))", "all x y.((Parent(x) & Plant(y)) -> YellowFlowers(x,y))", "all x.(Parent(x) -> HasYellowFlowers(x))", "all x y.((PlantParent(x) & Plant(y)) -> YellowFlowers(x,y))"]}
{"id": "entailmentbank_validation_693", "nl": "a newly hatched sea turtle walks toward the ocean.", "fol": "", "prediction": ["all x y.((NewlyHatchedSeaTurtle(x) & Ocean(y)) -> WalksTowards(x,y))", "all x.((NewlyHatchedSeaTurtle(x) & SeaTurtle(x)) -> WalksTowardsOcean(x))", "all x.((NewlyHatchedSeaTurtle(x) & WalksTowardsOcean(x)) -> SeaTurtle(x))", "all x.(NewlyHatchedSeaTurtle(x) -> WalksTowardsOcean(x))", "all x y.((NewlyHatchedSeaTurtle(x) & Ocean(y)) -> WalksToward(x,y))", "all x.((NewlyHatched(x) & SeaTurtle(x)) -> WalksTowardsOcean(x))", "all x.((SeaTurtle(x) & HasHatched(x)) -> WalksTowardsOcean(x))", "all x y.((NewlyHatchedSeaTurtle(x) & Ocean(y)) -> WalksTo(x,y))", "all x y z.((NewlyHatchedSeaTurtle(x) & Ocean(y) & Ocean(z)) -> WalksTowards(x,y,z))", "all x y.((NewlyHatched(x) & SeaTurtle(y)) -> WalksTowardsOcean(y))", "all x.((NewlyHatchedSeaTurtle(x) & WalksTowardOcean(x)) -> SeaTurtle(x))", "all x.((NewlyHatchedSeaTurtle(x) & Ocean(y)) -> WalksTowards(x,y))", "all x y.((RecentlyHatchedSeaTurtle(x) & Ocean(y)) -> WalksTowards(x,y))", "all x y z.((NewlyHatchedSeaTurtle(x) & Ocean(y) & Ocean(z)) -> WalksToward(x,y,z))", "all x.((NewlyHatchedSeaTurtle(x) & SeaTurtle(x)) -> WalksTowardOcean(x))", "all x.((SeaTurtle(x) & Hatched(x)) -> WalksTowardsOcean(x))"]}
{"id": "entailmentbank_validation_694", "nl": "if an animal hatches from an egg then that animal is born.", "fol": "", "prediction": ["all x y.((Animal(x) & Egg(y) & HatchesFrom(x,y)) -> Born(x))", "all x y.((Animal(x) & Egg(y) & HatchesFrom(x,y)) -> Born(x,y))", "all x.((Animal(x) & HatchesFromEgg(x)) -> Born(x))", "all x y z.((Animal(x) & Egg(y) & HatchesFrom(x,y)) -> Born(x))", "all x y z.((Animal(x) & Egg(y) & HatchesFrom(x,y)) -> Born(x,z))", "all x y z.((Animal(x) & Egg(y) & Egg(z) & HatchesFrom(x,y)) -> Born(x,z))", "all x y z.((Animal(x) & Egg(y) & HatchesFrom(x,y)) -> Born(z))", "all x y z.((Animal(x) & Egg(y) & HatchesFrom(x,y)) -> Born(x,y))", "all x y z.((Animal(x) & Egg(y) & Egg(z) & HatchesFrom(x,y,z)) -> Born(x))", "all x y z.((Animal(x) & Egg(y) & Egg(z) & HatchesFrom(x,y,z)) -> Born(x,y))", "all x y.((Animal(x) & HatchesFromEgg(x,y)) -> Born(x))", "all x y.((Animal(x) & HatchesFromEgg(x)) -> Born(y))", "all x y.((Animal(x) & HatchesFromEgg(x,y)) -> Born(x,y))", "all x y.((Animal(x) & Egg(y) & HatchesFrom(x,y)) -> Baptized(x))", "all x y z.((Animal(x) & Egg(y) & Egg(z) & HatchesFrom(x,y)) -> Born(x))", "all x y.((Animal(x) & Egg(y) & HatchesFrom(x,y)) -> Born(z))"]}
{"id": "entailmentbank_validation_695", "nl": "a sea turtle that is just born walks toward the ocean.", "fol": "", "prediction": ["all x.((SeaTurtle(x) & JustBirth(x)) -> WalksTowardsOcean(x))", "all x.((SeaTurtle(x) & JustBorn(x)) -> WalksTowardsOcean(x))", "all x.((SeaTurtle(x) & Born(x)) -> WalksTowardsOcean(x))", "all x.((SeaTurtle(x) & JustBirth(x)) -> WalksTowardOcean(x))", "all x.((SeaTurtle(x) & JustBirth(x)) -> WalksToOcean(x))", "all x.((SeaTurtle(x) & JustBorn(x)) -> WalksTowardOcean(x))", "all x.((SeaTurtle(x) & Born(x)) -> WalksTowardOcean(x))", "all x y.((SeaTurtle(x) & JustBirth(x)) -> WalksTowardsOcean(x))", "all x.((SeaTurtle(x) & JustBirth(x)) -> WalksAtOcean(x))", "all x y.((SeaTurtle(x) & JustBirth(x)) -> WalksTowardsOcean(x,y))", "all x y.((SeaTurtle(x) & JustBirth(x)) -> WalksTowardsOcean(y))", "all x.((SeaTurtle(x) & JustBird(x)) -> WalksTowardsOcean(x))", "all x.((SeaTurtle(x) & JustBorn(x)) -> WalksToOcean(x))", "all x.((SeaTurtle(x) & JustBirth(x)) -> WalksAttooToOcean(x))", "all x.((SeaTurtle(x) & JustBirth(x)) -> WalksAttooTowardsOcean(x))", "all x.((SeaTurtle(x) & Born(x)) -> WalksToOcean(x))"]}
{"id": "entailmentbank_validation_696", "nl": "an animal knows how to do instinctive behaviors when it is born.", "fol": "", "prediction": ["all x.((Animal(x) & Born(x)) -> KnowsHowToDoInstinctiveBehaviors(x))", "all x.((Animal(x) & Born(x)) -> KnowsInstinctiveBehaviors(x))", "all x y.((Animal(x) & Born(y)) -> KnowsHowToDoInstinctiveBehaviors(x,y))", "all x y.((Animal(x) & Born(y)) -> KnowsInstinctiveBehaviors(x,y))", "all x.((Animal(x) & Born(x)) -> KnowsHowToDoInstinctiveBehaviors(x))", "all x.((Animal(x) & Born(x)) -> KnowsHowToDoInstinctiveBodies(x))", "all x.((Animal(x) & Born(x)) -> KnowsInstinctiveBodies(x))", "all x.((Animal(x) & Born(x)) -> KnowHowToDoInstinctiveBehaviors(x))", "all x y.((Animal(x) & Born(x)) -> KnowsHowToDoInstinctiveBehaviors(x,y))", "all x.((Animal(x) & Born(x)) -> KnowsHowToDoInstinctiveBehaviorals(x))", "all x.((Animal(x) & Born(x)) -> DoesInstinctiveBehaviors(x))", "all x y.((Animal(x) & Born(x)) -> KnowsInstinctiveBehaviors(x,y))", "all x.((Animal(x) & Born(x)) -> KnowledgesInstinctiveBehaviors(x))", "all x.((Animal(x) & Born(x)) -> DoseInstinctiveBehaviors(x))", "all x.((Animal(x) & Born(x)) -> KnowsInstinctiveBehavior(x))", "all x.((Animal(x) & Born(x)) -> KnowsInstinctiveBehaviorals(x))"]}
{"id": "entailmentbank_validation_697", "nl": "walking toward the ocean is sea turtles' instinct behavior.", "fol": "", "prediction": ["all x y.((SeaTurtle(x) & Ocean(y)) -> InstinctBehavior(x,y))", "all x.(WalkingTowardsOcean(x) -> SeaTurtleInstinctBehavior(x))", "all x.((WalkingTowardsOcean(x) & SeaTurtle(x)) -> InstinctBehavior(x))", "all x.((SeaTurtle(x) & WalkingTowardsOcean(x)) -> InstinctBehavior(x))", "all x y.((SeaTurtle(x) & Ocean(y)) -> Instinct(x,y))", "all x.(WalkingTowardsOcean(x) -> SeaTurtleInstinct(x))", "all x y.((SeaTurtle(x) & Ocean(y) & WalkingTowards(x,y)) -> InstinctBehavior(x,y))", "all x y.((SeaTurtle(x) & Ocean(y) & WalkingTowards(x,y)) -> InstinctBehavior(x))", "all x y z.((SeaTurtle(x) & Ocean(y) & Ocean(z)) -> InstinctBehavior(x,y,z))", "all x.(WalkingTowardsOcean(x) -> InstinctBehavior(x))", "all x.((SeaTurtle(x) & WalksTowardsOcean(x)) -> InstinctBehavior(x))", "all x y.((SeaTurtle(x) & Ocean(y) & WalksTowards(x,y)) -> InstinctBehavior(x,y))", "all x y.((SeaTurtle(x) & Ocean(y)) -> InstinctBody(x,y))", "all x.((WalkingTowardsOcean(x) & SeaTurtle(y)) -> InstinctBehavior(x,y))", "all x y.((SeaTurtle(x) & Ocean(y) & WalksTowards(x,y)) -> InstinctBehavior(x))", "all x.((WalkingTowardsOcean(x) & SeaTurtle(y)) -> InstinctBehavior(y))"]}
{"id": "entailmentbank_validation_698", "nl": "a chicken is a kind of bird.", "fol": "", "prediction": ["all x.(Chicken(x) -> Bird(x))", "all x.(Chick(x) -> Bird(x))", "all x.(Child(x) -> Bird(x))", "all x.(Chicken(x) -> Bird(x))", "all x y.((Chicken(x) & Bird(y)) -> Bird(x))", "exists x.(Chicken(x) & Bird(x))", "all x.((Chicken(x) & Bird(x)) -> Bird(x))", "all x.(Circle(x) -> Bird(x))", "all x y.((Chicken(x) & Bird(y)) -> KindOf(x,y))", "all x y.((Chicken(x) & Bird(y)) -> Bird(x,y))", "all x y.((Chicken(x) & Bird(y)) -> Is(x,y))", "all x.(Cicken(x) -> Bird(x))", "all x y.((Chicken(x) & Bird(y)) -> SortOf(x,y))", "all x.((Chicken(x) & Bird(x)) -> Chicken(x))", "all x.(Child(x) -> Bird(x))", "all x y.((Chicken(x) & Bird(y)) -> TypeOf(x,y))"]}
{"id": "entailmentbank_validation_699", "nl": "a chick is a kind of young / baby chicken.", "fol": "", "prediction": ["all x.(Chick(x) -> (YoungChick(x) | BabyChick(x)))", "all x.(Chick(x) -> (Young(x) | Baby(x)))", "all x.(Chick(x) -> (YoungChicken(x) | BabyChicken(x)))", "all x.(Chick(x) -> (YoungChild(x) | BabyChild(x)))", "all x.(Chick(x) -> (YoungChick(x) & BabyChick(x)))", "all x.(Chick(x) -> (Young(x) & Baby(x)))", "all x.(Chick(x) -> (YoungChild(x) & BabyChild(x)))", "all x.(Chick(x) -> (YoungChicken(x) & BabyChicken(x)))", "all x.(Chick(x) -> (YoungChicken(x) | BabyChick(x)))", "all x.(Chick(x) -> (Chick(x) & Young(x) & Baby(x)))", "all x.(Chick(x) -> (YoungChick(x) | BabyChick(x)))", "all x.(Chick(x) -> (Yearly(x) | Baby(x)))", "all x.(Chick(x) -> (YearLittleChick(x) | BabyChick(x)))", "all x.(Chick(x) -> (Year(x) | Baby(x)))", "all x.(Chick(x) -> (Year(x) & Baby(x)))", "all x.(Chick(x) -> Young(x) & BabyChick(x))"]}
{"id": "entailmentbank_validation_700", "nl": "a chick is a kind of baby bird.", "fol": "", "prediction": ["all x.(Chick(x) -> BabyBird(x))", "all x.(Chick(x) -> BabyBird(x))", "all x y.((Chick(x) & BabyBird(y)) -> BabyBird(x))", "all x y.((Chick(x) & BabyBird(y)) -> KindOf(x,y))", "exists x.(Chick(x) & BabyBird(x))", "all x.(Chick(x) -> KindOfBird(x))", "all x y.((Chick(x) & BabyBird(y)) -> BabyBird(x,y))", "all x y.((Chick(x) & BabyBird(y)) -> Is(x,y))", "all x.(Chick(x) -> (BabyBird(x) & BabyBird(x)))", "all x.(Chick(x) -> (BabyBird(x)))", "all x y.((Chick(x) & BabyBird(y)) -> SortOf(x,y))", "all x y.((Chick(x) & BabyBird(x)) -> BabyBird(y))", "all x y.((Chick(x) & BabyBird(y)) -> CanBe(x,y))", "all x y.((Chick(x) & BabyBird(y)) -> -Bird(x))", "all x y.((Chick(x) & BabyBird(y)) -> CanBeBird(x,y))", "all x.(Chick(x) -> KindOfBabyBird(x))"]}
{"id": "entailmentbank_validation_701", "nl": "an example of an instinctive behavior is a baby bird pecking at its shell to hatch.", "fol": "", "prediction": ["all x.((BabyBird(x) & PecksAtShell(x)) -> InstinctiveBehavior(x))", "all x y.((BabyBird(x) & Shell(y) & PecksAt(x,y)) -> InstinctiveBehavior(x))", "all x.(InstinctiveBehavior(x) -> (BabyBird(x) & PecksAtShell(x) & Hatches(x)))", "all x.((BabyBird(x) & PeckingAtShell(x)) -> InstinctiveBehavior(x))", "all x.(InstinctiveBehavior(x) -> (BabyBird(x) & PecksAtShell(x) & Hatches(x)))", "all x.((BabyBird(x) & PecksAtShell(x) & Hatches(x)) -> InstinctiveBehavior(x))", "all x.(InstinctiveBehavior(x) -> (BabyBird(x) & PecksAtShell(x) & Hatch(x)))", "all x y.((BabyBird(x) & Shell(y) & PeckingAt(x,y)) -> InstinctiveBehavior(x))", "all x.((BabyBird(x) & PecksAtShell(x) & Hatch(x)) -> InstinctiveBehavior(x))", "all x.(InstinctiveBehavior(x) -> (BabyBird(x) & PecksAtShell(x) & HatchesShell(x)))", "all x.(InstinctiveBehavior(x) -> (BabyBird(x) & PecksAtShell(x) & Hatch(x)))", "all x.((BabyBird(x) & PecksAtShellToHatch(x)) -> InstinctiveBehavior(x))", "all x.(InstinctiveBehavior(x) -> (BabyBird(x) & PecksAtShell(x) & HatchesShell(x)))", "all x.(InstinctiveBehavior(x) -> (BabyBird(x) & PecksAtShellToHatch(x)))", "all x.(InstinctiveBehavior(x) -> (BabyBird(x) & PecksAtShell(x)))", "all x.((BabyBird(x) & PecksAtShellToHat(x)) -> InstinctiveBehavior(x))"]}
{"id": "entailmentbank_validation_702", "nl": "a chick pecking at its shell to hatch is an example of an instictive behavior.", "fol": "", "prediction": ["all x.((Chick(x) & PecksAtShell(x) & Hatches(x)) -> InstictiveBehavior(x))", "all x.((Chick(x) & PecksAtShell(x) & Hatch(x)) -> InstictiveBehavior(x))", "all x.((Chick(x) & PecksAtShellToHatch(x)) -> InstictiveBehavior(x))", "all x.((Chick(x) & PecksAtShellToHat(x)) -> InstictiveBehavior(x))", "all x.((Chick(x) & PecksAtShell(x) & HatchesShell(x)) -> InstictiveBehavior(x))", "all x y.((Chick(x) & Shell(y) & PecksAt(x,y)) -> InstictiveBehavior(x))", "all x y.((Chick(x) & Shell(y) & PecksAtToHatch(x,y)) -> InstictiveBehavior(x))", "all x.((Chick(x) & PecksAtShellToHave(x)) -> InstictiveBehavior(x))", "all x y.((Chick(x) & Shell(y) & PecksToHatch(x,y)) -> InstictiveBehavior(x))", "all x y z.((Chick(x) & Shell(y) & Shell(z) & PecksAtToHatch(x,y,z)) -> InstictiveBehavior(x))", "all x y.((Chick(x) & Shell(y) & PecksAt(x,y) & Hatch(x)) -> InstictiveBehavior(x))", "all x.((Chick(x) & PecksShell(x) & HatchesShell(x)) -> InstictiveBehavior(x))", "all x.((Chick(x) & PecksAtShellToHark(x)) -> InstictiveBehavior(x))", "all x.((Chick(x) & PecksAtShellToHash(x)) -> InstictiveBehavior(x))", "all x.((Chick(x) & PecksShellToHatch(x)) -> InstictiveBehavior(x))", "all x.((Chick(x) & PecksAtShell(x)) -> InstictiveBehavior(x))"]}
{"id": "entailmentbank_validation_703", "nl": "receiving the recessive gene for a trait from each parent causes the offspring to have that recessive trait.", "fol": "", "prediction": ["all x y.((Parent(x) & Parent(y) & ReceivesRecessiveGene(x,y)) -> HasRecessiveTrait(x,y))", "all x y.((Parent(x) & Parent(y) & ReceivesRecessiveGene(x,y)) -> OffspringHasRecessiveTrait(x,y))", "all x y.((Parent(x) & Parent(y) & ReceivesRecessiveGene(x,y)) -> OffspringHasRecessiveTrait(x,y))", "all x y.((Parent(x) & Parent(y) & ReceivesRecessiveGene(x,y)) -> HasRecessiveTrait(x,y))", "all x y.((Parent(x) & Parent(y) & ReceivesRecessiveGene(x,y)) -> CausesRecessiveTrait(x,y))", "all x y z.((RecessiveGene(x) & Trait(y) & Parent(z)) -> CausesOffspringToHaveRecessiveTrait(x,y,z))", "all x y z.((RecessiveGene(x) & Trait(y) & Parent(z)) -> CausesOffspringToHaveRecessiveTrait(x,y,z))", "all x y.((RecessiveGene(x) & Trait(y)) -> CausesOffspringToHaveRecessiveTrait(x,y))", "all x y.((Parent(x) & Parent(y) & ReceivesRecessiveGene(x,y)) -> RecessiveTrait(x,y))", "all x y.((Parent(x) & Parent(y) & ReceivesRecessiveGene(x,y)) -> CausesRecessiveTrait(x,y))", "all x y.((RecessiveGene(x) & ParentTrait(y)) -> CausesOffspringToHaveRecessiveTrait(x,y))", "all x y.((Parent(x) & Parent(y) & ReceivesRecessiveGeneForTrait(x,y)) -> HasRecessiveTrait(x,y))", "all x y.((Parent(x) & Parent(y) & ReceivesRecessiveGene(x,y)) -> CausesOffspringToHaveRecessiveTrait(x,y))", "all x y.((Parent(x) & Parent(y) & ReceivingRecessiveGene(x,y)) -> HasRecessiveTrait(x,y))", "all x y.((Parent(x) & Parent(y) & RecessiveGene(x,y)) -> HasRecessiveTrait(x,y))", "all x y.((Parent(x) & Parent(y) & ReceivesRecessiveGene(x,y)) -> OffspringRecessiveTrait(x,y))"]}
{"id": "entailmentbank_validation_704", "nl": "blue eye is a recessive trait in human.", "fol": "", "prediction": ["all x.(BlueEye(x) -> RecessiveTrait(x))", "all x.(BlueEye(x) -> RecessiveTraitInHuman(x))", "all x.(BlueEye(x) -> RecessiveTrait(x))", "all x.(BlueEye(x) -> RecessiveTraitInHuman(x))", "all x y.((BlueEye(x) & Human(y)) -> RecessiveTrait(x,y))", "all x y.((BlueEye(x) & Human(y)) -> RecessiveTrait(x,y))", "all x.(BlueEye(x) -> RecessiveTreatmentInHuman(x))", "all x.(BlueEye(x) -> RecessiveTreatment(x))", "all x.(BlueEye(x) -> (RecessiveTrait(x) & InHuman(x)))", "all x.(BlueEye(x) -> (RecessiveTrait(x) & InHuman(x)))", "all x.(BlueEye(x) -> (RecessiveTrait(x) & Human(x)))", "all x.(BlueEye(x) -> RecessiveTait(x))", "all x.(BlueEye(x) -> (RecessiveTrait(x) & Human(x)))", "all x y.((BlueEye(x) & Human(y)) -> RecessiveTreatment(x,y))", "all x.(BlueEye(x) -> RecessiveTrait(x))", "all x.(BlueEye(x) -> RecessiveTraitInHuman(x))"]}
{"id": "entailmentbank_validation_705", "nl": "to have blue eyes requires receiving the recessive gene from each parent.", "fol": "", "prediction": ["all x.(BlueEyes(x) -> RequiresRecessiveGene(x))", "all x y.((HasBlueEyes(x) & Parent(y)) -> RequiresRecessiveGene(x,y))", "all x y.((Patient(x) & Parent(y)) -> RequiresRecessiveGene(x,y))", "all x.(BlueEyes(x) -> ReceivesRecessiveGene(x))", "all x y.((Parent(x) & Parent(y)) -> RequiresRecessiveGene(x,y))", "all x y.((Patient(x) & Parent(y) & RecessiveGene(x,y)) -> BlueEyes(x))", "all x.(BlueEyes(x) -> RequiresRecessiveGene(x))", "all x y.((Parent(x) & Parent(y) & RecessiveGene(x,y)) -> BlueEyes(x))", "all x y z.((BlueEyes(x) & Parent(y) & Gene(z)) -> RequiresRecessiveGene(x,y,z))", "all x.(BlueEyes(x) -> RequiresRecessiveGene(x,Parent))", "all x.(BloodEyes(x) -> RequiresRecessiveGene(x))", "all x y z.((BlueEyes(x) & Parent(y) & Gene(z)) -> RequiresRecessive(x,y,z))", "all x y.((Patient(x) & Parent(y) & RecessiveGene(x,y)) -> BlueEyes(x,y))", "all x.(BlueEyes(x) -> RequiresRecessiveGeneFromParent(x))", "all x.(BloodedEyes(x) -> RequiresRecessiveGene(x))", "all x y.((Parent(x) & Parent(y) & RecessiveGene(x,y)) -> BlueEyes(x,y))"]}
{"id": "entailmentbank_validation_706", "nl": "an egg cell is a kind of sex cell.", "fol": "", "prediction": ["all x.(EggCell(x) -> SexCell(x))", "all x.(EggCell(x) -> SexualCell(x))", "all x.(EggCell(x) -> SexCell(x))", "all x.(EggCell(x) -> sexCell(x))", "all x.(EggCell(x) -> SortOfSexCell(x))", "all x.(EggCell(x) -> (SexCell(x) & -SexCell(x)))", "all x y.((EggCell(x) & SexCell(y)) -> Is(x,y))", "all x.(EggCell(x) -> SexCell(x))", "all x.(EggCell(x) -> (SexCell(x) & SexualCell(x)))", "all x y.((EggCell(x) & SexCell(y)) -> SexCell(x))", "all x y.((EggCell(x) & SexCell(y)) -> SortOf(x,y))", "all x.(EggCell(x) -> (SexCell(x) & HasSexCell(x)))", "all x.(EggCell(x) -> SpexCell(x))", "all x.(EggCell(x) -> (SexCell(x) | SexualCell(x)))", "all x.(EggCell(x) -> (SexCell(x) | -SexCell(x)))", "all x y.((EggCell(x) & SexualCell(y)) -> Is(x,y))"]}
{"id": "entailmentbank_validation_707", "nl": "a sperm cell is a kind of sex cell.", "fol": "", "prediction": ["all x.(SpermCell(x) -> SexCell(x))", "all x.(SspermCell(x) -> SexCell(x))", "all x.(SpermCell(x) -> SexualCell(x))", "all x.(SpermCell(x) -> sexCell(x))", "all x.(SporeCell(x) -> SexCell(x))", "all x.(SspermCell(x) -> SexualCell(x))", "all x.(SpermCell(x) -> SortOfSexCell(x))", "all x.(SspermCell(x) -> sexCell(x))", "all x.((SpermCell(x) & SexCell(x)) -> SexCell(x))", "all x.(SporeCell(x) -> SexualCell(x))", "all x.(SpermCell(x) -> SexCell(x))", "all x.((SspermCell(x) & SexCell(x)) -> SexCell(x))", "all x.(SpermCell(x) -> (SexCell(x) & -SexCell(x)))", "all x.((SpermCell(x) & SexCell(x)) -> -SexCell(x))", "all x.((SpermCell(x) & SexCell(x)) -> HasSexCell(x))", "all x.((SpermCell(x) & SexCell(x)) -> Is(x,y))"]}
{"id": "entailmentbank_validation_708", "nl": "a mutation in the sex cells of a parent can cause a new trait to appear in the parent's offspring.", "fol": "", "prediction": ["all x y.((MutationInSexCells(x) & Parent(y)) -> CanCauseNewTrait(x,y))", "all x y.((MutationInSexCells(x) & Parent(y)) -> NewTrait(x,y))", "all x y.((MutationInSexCells(x,y) & Parent(y)) -> CanCauseNewTrait(x,y))", "all x y z.((MutationInSexCells(x) & Parent(y) & Offspring(z)) -> CanCauseNewTrait(x,y,z))", "all x y z.((MutationInSexCells(x) & Parent(y) & Offspring(z)) -> NewTrait(x,y,z))", "all x y.((MutationInSexCells(x) & Parent(y)) -> NewTrait(x,y))", "all x y.((MutationInSexCells(x,y) & Parent(y)) -> NewTrait(x,y))", "all x y.((MutationInSexCells(x) & Parent(y)) -> CanCauseNewTrait(x,y))", "all x y z.((MutationInSexCells(x) & Parent(y) & Offspring(z)) -> NewTrait(x,y,z))", "all x y.((MutationInSexCellsOfParent(x) & ParentOffspring(y)) -> NewTrait(x,y))", "all x y z.((MutationInSexCells(x) & Parent(y) & Offspring(z)) -> CanCauseNewTrait(x,y,z))", "all x y.((MutationInSexCellsOfParent(x) & ParentOffspring(y)) -> CanCauseNewTrait(x,y))", "all x y.((MutationInSexCells(x,y) & Parent(y)) -> CanCauseNewTrait(x,y))", "all x y z.((MutationInSexCells(x) & Parent(y) & ParentOffspring(z)) -> CanCauseNewTrait(x,y,z))", "all x y z.((MutationInSexCells(x) & Parent(y) & Offspring(z)) -> CausesNewTrait(x,y,z))", "all x y.((MutationInSexCells(x,y) & Parent(y)) -> NewTrait(x,y))"]}
{"id": "entailmentbank_validation_709", "nl": "a mutation in sperm or egg of a parent can cause a new trait to appear in the parent's offspring.", "fol": "", "prediction": ["all x y.((Mutation(x) & Parent(y) & (Ssperm(y) | Egg(y))) -> NewTrait(x,y))", "all x y.((MutationInSspermOrEgg(x) & Parent(y)) -> NewTrait(x,y))", "all x y.((Mutation(x) & Parent(y) & (Ssperm(y) | Egg(y))) -> NewTrait(x,y))", "all x y.((MutationInSspermOrEgg(x) & Parent(y)) -> CanCauseNewTrait(x,y))", "all x y.((MutationInSspermOrEgg(x) & Parent(y)) -> NewTrait(x,y))", "all x y z.((Mutation(x) & SpermOrEgg(y) & Parent(z)) -> CanCauseNewTrait(x,y,z))", "all x y.((MutationInSspermOrEgg(x,y) & Parent(y)) -> CanCauseNewTrait(x,y))", "all x y z.((MutationInSspermOrEgg(x) & Parent(y) & Parent(z)) -> CanCauseNewTrait(x,y,z))", "all x y.((MutationInSspermOrEgg(x,y) & Parent(y)) -> NewTrait(x,y))", "all x y z.((MutationInSspermOrEgg(x) & Parent(y) & ParentOffspring(z)) -> CanCauseNewTrait(x,y,z))", "all x y.((Mutation(x) & Parent(y) & (Ssperm(y) | Egg(y))) -> NewTraitInOffspring(x,y))", "all x y z.((Mutation(x) & SpermOrEgg(y) & Parent(z)) -> CanCauseNewTrait(x,y,z))", "all x y.((Mutation(x) & Parent(y) & SpermOrEgg(x,y)) -> NewTrait(x,y))", "all x y z.((Mutation(x) & SpermOrEgg(y) & Parent(z)) -> NewTrait(x,y,z))", "all x y z.((MutationInSspermOrEgg(x) & Parent(y) & Parent(z)) -> CanCauseNewTrait(x,y,z))", "all x y z.((Mutation(x) & SpermOrEgg(y) & Parent(z)) -> CanCauseNewTrait(x,z))"]}
{"id": "entailmentbank_validation_710", "nl": "smaller dogs have genetic trait of smaller size.", "fol": "", "prediction": ["all x.(SmallerDog(x) -> HasGeneticTraitOfSmallerSize(x))", "all x.(SmallerDog(x) -> HasGeneticTreatmentOfSmallerSize(x))", "all x.((Dog(x) & Smaller(x)) -> GeneticTreatmentOfSmallerSize(x))", "all x.(SmallerDog(x) -> GeneticTreatmentOfSmallerSize(x))", "all x.((Dog(x) & Smaller(x)) -> HasGeneticTraitOfSmallerSize(x))", "all x.(SmallerDog(x) -> GeneticTreatmentSmallerSize(x))", "all x.((Dog(x) & Smaller(x)) -> HasGeneticTreatmentOfSmallerSize(x))", "all x.(SmallerDog(x) -> HasGeneticTrait(x,SmallerSize))", "all x.(SmallerDog(x) -> HasGeneticTraitSmallerSize(x))", "all x.((Dog(x) & Smaller(x)) -> HasGeneticTrait(x,SmallerSize))", "all x.(SmallerDog(x) -> GeneticTraitSmallerSize(x))", "all x.((Dog(x) & Smaller(x)) -> GeneticTreatment(x,SmallerSize))", "all x.((Dog(x) & Smaller(x)) -> GeneticTreatmentSmaller(x))", "all x.((Dog(x) & SmallerSize(x)) -> GeneticTreatment(x,SmallerSize))", "all x.((Dog(x) & SmallerSize(x)) -> HasGeneticTrait(x,SmallerSize))", "all x.((Dog(x) & Smaller(x)) -> GeneticTraitSmaller(x))"]}
{"id": "entailmentbank_validation_711", "nl": "human are breeding german shepherd dogs to other smaller dogs.", "fol": "", "prediction": ["all x y.((Human(x) & ShepherdDog(y)) -> BreedsToSmallerDogs(x,y))", "all x y z.((Human(x) & ShepherdDog(y) & SmallerDog(z)) -> BreedsTo(x,y,z))", "all x y.((Human(x) & ShepherdDog(y)) -> BreedingToSmallerDogs(x,y))", "all x y.((Human(x) & Shepherd(y)) -> BreedsToSmallerDogs(x,y))", "all x y z.((Human(x) & Shepherd(y) & SmallerDog(z)) -> BreedsTo(x,y,z))", "all x y z.((Human(x) & ShepherdDog(y) & SmallerDog(z)) -> BreedingTo(x,y,z))", "all x y.((Human(x) & Shepherd(y)) -> BreedingToSmallerDogs(x,y))", "all x y.((Human(x) & ShepherdDog(y)) -> BreedsTo(x,y))", "all x y z.((Human(x) & ShepherdDog(y) & Dog(z)) -> BreedsTo(x,y,z))", "all x y z.((Human(x) & ShepherdDog(y) & SmallerDog(z)) -> Breeding(x,y,z))", "all x y z.((Human(x) & Shepherd(y) & SmallerDog(z)) -> BreedingTo(x,y,z))", "all x y.((Human(x) & ShepherdDog(y)) -> BreedingTo(x,y))", "all x y.((Human(x) & Dog(y)) -> BreedsTo(x,y))", "all x y z.((Human(x) & Shepherd(y) & SmallerDog(z)) -> Breeding(x,y,z))", "all x y.((Human(x) & Shepherd(y)) -> BreedsTo(x,y))", "all x y z.((Human(x) & ShepherdDog(y) & Dog(z)) -> BreedingTo(x,y,z))"]}
{"id": "entailmentbank_validation_712", "nl": "human are breeding german shepherd dogs with dogs with genetic trait of smaller size.", "fol": "", "prediction": ["all x y z.((Human(x) & ShepherdDog(y) & Dog(z) & GeneticTreatment(z) & SmallerSize(z)) -> Breeding(x,y,z))", "all x y z.((Human(x) & ShepherdDog(y) & Dog(z) & GeneticTreatment(z) & SmallerSize(z)) -> BreedsWith(x,y,z))", "all x y z.((Human(x) & GermanSheepdog(y) & Dog(z) & GeneticTreatment(z) & SmallerSize(z)) -> Breeding(x,y,z))", "all x y z.((Human(x) & GermanSheepdog(y) & Dog(z) & GeneticTreatment(z) & SmallerSize(z)) -> BreedsWith(x,y,z))", "all x y z.((Human(x) & ShepherdDog(y) & Dog(z) & GeneticTreatment(z) & SmallerSize(z)) -> Breeds(x,y,z))", "all x y z.((Human(x) & GermanSheepdog(y) & Dog(z) & GeneticTraitSmallerSize(z)) -> Breeding(x,y,z))", "all x y z.((Human(x) & GermanSheepdog(y) & Dog(z) & GeneticTreatment(z) & SmallerSize(z)) -> Breeds(x,y,z))", "all x y z.((Human(x) & ShepherdDog(y) & Dog(z) & GeneticTraitSmallerSize(z)) -> Breeding(x,y,z))", "all x y z.((Human(x) & GermanSheepdog(y) & Dog(z) & GeneticTreatmentSmallerSize(z)) -> Breeding(x,y,z))", "all x y z.((Human(x) & ShepherdDog(y) & Dog(z) & GeneticTraitSmallerSize(z)) -> BreedsWith(x,y,z))", "all x y z.((Human(x) & GermanSheepdog(y) & Dog(z) & GeneticTraitSmallerSize(z)) -> BreedsWith(x,y,z))", "all x y z.((Human(x) & ShepherdDog(y) & Dog(z) & GeneticTreatmentSmallerSize(z)) -> Breeding(x,y,z))", "all x y z.((Human(x) & GermanSheepdog(y) & Dog(z) & GeneticTrait(z) & SmallerSize(z)) -> Breeding(x,y,z))", "all x y z.((Human(x) & GermanSheepdog(y) & Dog(z) & GeneticTreat(z) & SmallerSize(z)) -> Breeding(x,y,z))", "all x y z.((Human(x) & GermanSheepdog(y) & Dog(z) & GeneticTreatmentSmallerSize(z)) -> BreedsWith(x,y,z))", "all x y z.((Human(x) & ShepherdDog(y) & Dog(z) & GeneticTreatmentSmallerSize(z)) -> BreedsWith(x,y,z))"]}
{"id": "entailmentbank_validation_713", "nl": "selective breeding is when an organism receives selective genetic traits from its parents by human design.", "fol": "", "prediction": ["all x.((Organism(x) & ReceivesSelectiveGeneticTreatments(x) & HumanDesign(x)) -> SelectiveBreeding(x))", "all x y.((Organism(x) & Parent(y) & ReceivesSelectiveGeneticTreatments(x,y) & HumanDesign(x)) -> SelectiveBreeding(x))", "all x.((Organism(x) & ReceivesSelectiveGeneticTreatments(x) & HumanDesign(x)) -> SelectiveBreeding(x))", "all x.((Organism(x) & ReceivesSelectiveGeneticTraits(x) & HumanDesign(x)) -> SelectiveBreeding(x))", "all x y.((Organism(x) & Organism(y) & ReceivesSelectiveGeneticTreatments(x,y) & HumanDesign(x)) -> SelectiveBreeding(x))", "all x y.((Organism(x) & Organism(y) & ReceivesSelectiveGeneticTreatments(x,y) & HumanDesign(y)) -> SelectiveBreeding(x))", "all x.((Organism(x) & ReceivesSelectiveGeneticTreatmentsByHumanDesign(x)) -> SelectiveBreeding(x))", "all x.((Organism(x) & ReceivesSelectiveGeneticTreatments(x) & HumanDesigned(x)) -> SelectiveBreeding(x))", "all x y.((Organism(x) & HumanDesign(y) & ReceivesSelectiveGeneticTreatments(x,y)) -> SelectiveBreeding(x))", "all x y.((Organism(x) & Organism(y) & ReceivesSelectiveGeneticTreatments(x,y) & HumanDesign(y)) -> SelectiveBreeding(x,y))", "all x y z.((Organism(x) & Parent(y) & HumanDesign(z) & ReceivesSelectiveGeneticTreatments(x,y,z)) -> SelectiveBreeding(x))", "all x y.((Organism(x) & Organism(y) & ReceivesSelectiveGeneticTreatments(x,y) & HumanDesign(x)) -> SelectiveBreeding(x,y))", "all x y.((Organism(x) & HumanDesign(y)) -> ReceivesSelectiveGeneticTreatments(x,y))", "all x y.((Organism(x) & Parent(y) & HumanDesign(x)) -> ReceivesSelectiveGeneticTreatments(x,y))", "all x y z.((Organism(x) & Parent(y) & HumanDesign(z)) -> ReceivesSelectiveGeneticTreatments(x,y,z))", "all x y.((Organism(x) & Parent(y) & ReceivesSelectiveGeneticTreatments(x,y)) -> HumanDesigned(x))"]}
{"id": "entailmentbank_validation_714", "nl": "human breeding german shepherd dogs with dogs with genetic trait of smaller size is an example of selective breeding.", "fol": "", "prediction": ["all x.((Human(x) & BreedsGermanSheepherdDogs(x) & BreedsDogsWithSmallerGeneticTrait(x)) -> SelectiveBreeding(x))", "all x.((Human(x) & BreedsGermanSheepherdDogs(x) & BreedsDogsWithSmallerGeneticTreat(x)) -> SelectiveBreeding(x))", "all x.((Human(x) & BreedsGermanSheepdogs(x) & BreedsDogs(x) & GeneticTreatmentSmallerSize(x)) -> SelectiveBreeding(x))", "all x.((Human(x) & BreedsGermanSheepherdDogs(x) & BreedsDogs(x) & GeneticTreatmentSmallerSize(x)) -> SelectiveBreeding(x))", "all x.((Human(x) & BreedsGermanSheepherdDogs(x) & BreedsDogsWithSmallerGeneticTreatment(x)) -> SelectiveBreeding(x))", "all x.((Human(x) & BreedsGermanSheepdogs(x) & BreedsDogs(x) & GeneticTraitSmallerSize(x)) -> SelectiveBreeding(x))", "all x.((Human(x) & BreedsGermanSheepherdDogs(x) & BreedsDogs(x) & GeneticTraitSmallerSize(x)) -> SelectiveBreeding(x))", "all x.((Human(x) & BreedsGermanSheepdogs(x) & BreedsSmallerSizeDogs(x)) -> SelectiveBreeding(x))", "all x.((Human(x) & BreedsGermanSheepdogs(x) & BreedsDogsWithSmallerGeneticTrait(x)) -> SelectiveBreeding(x))", "all x.((Human(x) & BreedingGermanSheepherdDogs(x) & BreedingDogsWithSmallerGeneticTrait(x)) -> SelectiveBreeding(x))", "all x.((Human(x) & BreedsGermanSheepdogs(x) & BreedsDogsWithSmallerTreatment(x)) -> SelectiveBreeding(x))", "all x.((Human(x) & BreedsGermanSheepdogs(x) & BreedsDogsWithSmallerGeneticTreat(x)) -> SelectiveBreeding(x))", "all x.((Human(x) & BreedingGermanSheepherdDogs(x) & BreedingDogsWithSmallerGeneticTreat(x)) -> SelectiveBreeding(x))", "all x.((Human(x) & BreedsGermanSheepherdDogs(x) & BreedsDogsWithSmallerTreat(x)) -> SelectiveBreeding(x))", "all x y z.((Human(x) & GermanSheepdog(y) & Dog(z) & GeneticTraitSmallerSize(z) & Breeding(x,y,z)) -> SelectiveBreeding(x))", "all x.((Human(x) & BreedsGermanSheepdogs(x) & BreedsGermanSheepdogs(x) & BreedsDogsWithSmallerSizeTreatment(x)) -> SelectiveBreeding(x))"]}
{"id": "entailmentbank_validation_715", "nl": "sexual reproduction requires both sperm and egg.", "fol": "", "prediction": ["all x.(SexualReproduction(x) -> (RequiresSsperm(x) & RequiresEgg(x)))", "all x.(SexualReproduction(x) -> (Requires(x,sperm) & Requires(x,egg)))", "all x.(SexualReproduction(x) -> (RequiresSperm(x) & RequiresEgg(x)))", "all x y.((SexualReproduction(x) & Sperm(y) & Egg(y)) -> Requires(x,y))", "all x.(SexualReproduction(x) -> (RequiresSpore(x) & RequiresEgg(x)))", "all x.((SexualReproduction(x) & Sperm(x) & Egg(x)) -> Requires(x,sperm,egg))", "all x y z.((SexualReproduction(x) & Sperm(y) & Egg(z)) -> Requires(x,y,z))", "all x y z.((SexualReproduction(x) & Sperm(y) & Egg(z)) -> (Requires(x,y) & Requires(x,z)))", "all x.(SexualReproduction(x) -> (RequiresSsperm(x) & RequiresEgg(x)))", "all x y.((SexualReproduction(x) & Sperm(y) & Egg(z)) -> Requires(x,y,z))", "all x.(SexualReproduction(x) -> (RequiresPsperm(x) & RequiresEgg(x)))", "all x.(SexualReproduction(x) -> (RequiresSporex(x) & RequiresEgg(x)))", "all x y.((SexualReproduction(x) & Sperm(y)) -> Requires(x,y))", "all x.((SexualReproduction(x) & Sperm(x) & Egg(x)) -> Requires(x,sperm) & Requires(x,egg))", "all x.(SexualReproduction(x) -> (RequiresSterm(x) & RequiresEgg(x)))", "all x.(SexualReproduction(x) -> (RequiresSporem(x) & RequiresEgg(x)))"]}
{"id": "entailmentbank_validation_716", "nl": "the sperm production is prevented in male insects.", "fol": "", "prediction": ["all x y.((MaleInsect(x) & MaleInsect(y)) -> PreventsSpermProduction(x,y))", "all x.((MaleInsect(x) & MaleInsect(x)) -> PreventsSpermProduction(x))", "all x y.((MaleInsect(x) & MaleInsect(y)) -> PreventsSspermProduction(x,y))", "all x y.((MammalInsect(x) & MaleInsect(y)) -> PreventsSpermProduction(x,y))", "all x.((MaleInsect(x) & MaleInsect(x)) -> PreventsSspermProduction(x))", "all x y.((MammalInsect(x) & MaleInsect(y)) -> PreventsSspermProduction(x,y))", "all x y.((Insect(x) & MaleInsect(y)) -> PreventsSpermProduction(x,y))", "all x y.((Insect(x) & Male(y)) -> PreventsSpermProduction(x,y))", "all x.((MammalInsect(x) & MaleInsect(x)) -> PreventsSpermProduction(x))", "all x y.((MammalInsect(x) & SpermProduction(y)) -> Prevents(x,y))", "all x.((Insect(x) & MaleInsect(x)) -> PreventsSpermProduction(x))", "all x.((MaleInsect(x) & MaleInsect(y)) -> PreventsSpermProduction(x,y))", "all x y.((Man(x) & MaleInsect(y)) -> PreventsSpermProduction(x,y))", "all x y.((MammalInsect(x) & Sperm(y)) -> PreventsProduction(x,y))", "all x.((Insect(x) & Male(x)) -> PreventsSpermProduction(x))", "all x.((Man(x) & MaleInsect(x)) -> PreventsSpermProduction(x))"]}
{"id": "entailmentbank_validation_717", "nl": "if something required for a process is not produced then that process is prevented from occurring.", "fol": "", "prediction": ["all x y.((Process(x) & RequiredFor(x,y) & -Produced(y)) -> PreventsOccurrence(x,y))", "all x y.((Process(x) & Process(y) & -Produced(x,y)) -> PreventsOccurrence(x,y))", "all x.((RequiredForProcess(x) & -Produced(x)) -> PreventsProcessFromOccurring(x))", "all x.((RequiredForProcess(x) & -Produced(x)) -> PreventsProcess(x))", "all x.((RequiredForProcess(x) & -Produced(x)) -> PreventsProcessOfOccurringProcess(x))", "all x.((Process(x) & RequiredForProcess(x) & -Produced(x)) -> PreventsOccurrence(x))", "all x y.((Process(x) & RequiredFor(x,y) & -Produced(x)) -> PreventsOccurrence(y))", "all x y.((Process(x) & RequiredFor(x,y) & -Produced(x)) -> PreventsOccurrence(x,y))", "all x y.((Process(x) & Process(y) & -RequiredFor(x,y)) -> PreventsOccurrence(x,y))", "all x.((RequiredForProcess(x) & -Produced(x)) -> PreventsOccurrence(x))", "all x.((RequiredForProcess(x) & -Produced(x)) -> PreventsProcessOccurrence(x))", "all x y.((RequiredForProcess(x) & Process(y) & -Produced(x,y)) -> PreventsOccurrence(x,y))", "all x y.((Process(x) & RequiredForProcess(x,y) & -Produced(y)) -> PreventsOccurrence(x,y))", "all x.((RequiredForProcess(x) & -Produced(x)) -> PreventsProcessOfOccurrence(x))", "all x.((RequiredForProcess(x) & -Produced(x)) -> PreventsProcessOfOccurring(x))", "all x y.((Process(x) & RequiredFor(x,y) & -Produced(y)) -> PreventsOccurrence(x))"]}
{"id": "entailmentbank_validation_718", "nl": "the sexual reproduction process is prevented in the insects.", "fol": "", "prediction": ["all x y.((Insect(x) & Insect(y)) -> PreventsSexualReproduction(x,y))", "all x y.((Insect(x) & Insect(y)) -> PreventsSexualReproductionProcess(x,y))", "all x y z.((Insect(x) & SexualReproductionProcess(y) & Insect(z)) -> Prevents(x,y,z))", "all x y z.((Insect(x) & Insect(y) & SexualReproductionProcess(z)) -> Prevents(x,z))", "all x.(Insect(x) -> PreventsSexualReproduction(x))", "all x y.((Insect(x) & SexualReproductionProcess(y)) -> Prevents(x,y))", "all x y.((Insect(x) & Insect(y)) -> -ProcessForSexualReproduction(x,y))", "all x y z.((Insect(x) & Insect(y) & SexualReproductionProcess(z)) -> Prevents(x,y,z))", "all x.((Insect(x) & PreventsSexualReproduction(x)) -> PreventsSexualReproduction(x))", "all x y z.((Insect(x) & SexualReproductionProcess(y) & Insect(z)) -> Prevents(x,y))", "all x y.((Insect(x) & Insect(y)) -> PreventsReproduction(x,y))", "all x.(Insect(x) -> PreventsSexualReproductionProcess(x))", "all x.((Insect(x) & Insect(x)) -> PreventsSexualReproduction(x))", "all x y z.((Insect(x) & SexualReproductionProcess(y) & Insect(z)) -> -Prevents(x,y,z))", "all x.((Insect(x) & PreventsSexualReproduction(x)) -> Insect(x))", "all x.((Insect(x) & Insect(x)) -> PreventsSexualReproductionProcess(x))"]}
{"id": "entailmentbank_validation_719", "nl": "preventing reproduction decreases the rate of reproduction.", "fol": "", "prediction": ["all x.(PreventsReproduction(x) -> DecreasesRateOfReproduction(x))", "all x.(PreventsReproduction(x) -> DecreasesReproductionRate(x))", "all x.((PreventsReproduction(x) & ReducesRateOfReproduction(x)) -> DecreasesRateOfReproduction(x))", "all x.((PreventsReproduction(x) & DecreasesRateOfReproduction(x)) -> ReducesRateOfReproduction(x))", "all x.((PreventsReproduction(x) & ReducesRateOfReproduction(x)) -> ReducesRateOfReproduction(x))", "all x.(PreventsReproduction(x) -> ReducesRateOfReproduction(x))", "all x.((PreventsReproduction(x) & DecreasesRateOfReproduction(x)) -> DecreasesRateOfReproduction(x))", "all x y.((PreventsReproduction(x) & Reproduction(y)) -> DecreasesRate(x,y))", "all x.(PreventsReproduction(x) -> ReducesReproductionRate(x))", "all x y.((PreventsReproduction(x) & ReproductionRate(y)) -> Decreases(x,y))", "all x.((PreventsReproduction(x) & ReducesReproductionRate(x)) -> DecreasesReproductionRate(x))", "all x.((PreventsReproduction(x) & ReducesReproduction(x)) -> DecreasesReproduction(x))", "all x y.((PreventsReproduction(x) & Reproduction(y)) -> ReducesRate(x,y))", "all x.((PreventsReproduction(x) & DecreasesReproductionRate(x)) -> DecreasesReproductionRate(x))", "all x.((PreventsReproduction(x) & DecreasesReproduction(x)) -> DecreasesReproduction(x))", "all x y.((PreventsReproduction(x) & Reproduction(y)) -> Decreases(x,y))"]}
{"id": "entailmentbank_validation_720", "nl": "sexual reproduction is a kind of reproduction.", "fol": "", "prediction": ["all x.(SexualReproduction(x) -> Reproduction(x))", "all x.((SexualReproduction(x) & Reproduction(x)) -> Reproduction(x))", "all x.(SexualReproduction(x) -> Reproduction(x))", "all x y.((SexualReproduction(x) & SexualReproduction(y)) -> Reproduction(x))", "all x y.((SexualReproduction(x) & Reproduction(y)) -> Reproduction(x))", "all x.((SexualReproduction(x) & TypeOfReproduction(x)) -> Reproduction(x))", "all x.((SexualReproduction(x) & KindOfReproduction(x)) -> Reproduction(x))", "all x y.((SexualReproduction(x) & Reproduction(y)) -> Reproduction(x,y))", "all x y.((SexualReproduction(x) & SexualReproduction(y)) -> Reproduction(x,y))", "all x.((SexualReproduction(x) & FormOfReproduction(x)) -> Reproduction(x))", "all x.((SexualReproduction(x) & -Reproduction(x)) -> Reproduction(x))", "all x.(SexualReproduction(x) -> (Reproduction(x) & Reproduction(x)))", "all x.(Reproduction(x) -> Sexual(x))", "all x y.((SexualReproduction(x) & Person(y)) -> Reproduction(x))", "all x.((SexualReproduction(x) & Reproduction(y)) -> Reproduction(x))", "all x y.((SexualReproduction(x) & Person(y)) -> Reproduction(x,y))"]}
{"id": "entailmentbank_validation_721", "nl": "the reproduction rate in the insects will decrease.", "fol": "", "prediction": ["all x y.((Insect(x) & Insect(y)) -> ReproductionRateDecrease(x,y))", "all x y.((Insect(x) & Insect(y)) -> DecreasesReproductionRate(x,y))", "all x y.((Insect(x) & Insect(y)) -> DecreasedReproductionRate(x,y))", "all x y.((Insect(x) & Insect(y)) -> ReproductionRateDecreased(x,y))", "all x.(Insect(x) -> DecreasedReproductionRate(x))", "all x y.((Insect(x) & Insect(y)) -> DecreaseReproductionRate(x,y))", "all x.(Insect(x) -> DecreasesReproductionRate(x))", "all x y.((Insect(x) & Insect(y)) -> ReproductionRateDecreases(x,y))", "all x.((Insect(x) & Insect(x)) -> ReproductionRateDecrease(x))", "all x.(Insect(x) -> DecreaseReproductionRate(x))", "all x.(Insect(x) -> ReproductionRateDecrease(x))", "all x.((Insect(x) & Insect(x)) -> DecreasedReproductionRate(x))", "all x.((Insect(x) & Insect(x)) -> DecreasesReproductionRate(x))", "all x y.((Insect(x) & Insect(y)) -> ReducesReproductionRate(x,y))", "all x.((Insect(x) & Insect(y)) -> ReproductionRateDecrease(x,y))", "all x.((Insect(x) & Insect(x)) -> DecreaseReproductionRate(x))"]}
{"id": "entailmentbank_validation_722", "nl": "as the rate of reproduction decreases, the population will decrease.", "fol": "", "prediction": ["all x.((RateOfReproduction(x) & Decreases(x)) -> PopulationDecreases(x))", "all x.((RateOfReproduction(x) & Decreases(x)) -> PopulationDecrease(x))", "all x.((ReproductionRate(x) & Decreases(x)) -> PopulationDecreases(x))", "all x y.((RateOfReproduction(x) & Population(y)) -> Decreases(y))", "all x y.((RateOfReproduction(x) & Population(y) & Decreases(x)) -> Decreases(y))", "all x y.((RateOfReproduction(x) & Population(y) & Decreases(x,y)) -> Decreases(y))", "all x y.((RateOfReproduction(x) & Population(y) & Decreases(x,y)) -> PopulationDecreases(y))", "all x y.((RateOfReproduction(x) & Population(y)) -> Decrease(y))", "all x y.((RateOfReproduction(x) & Population(y) & Decreases(x,y)) -> Decreases(y,x))", "all x.((RateOfReproduction(x) & Decrease(x)) -> PopulationDecrease(x))", "all x y z.((RateOfReproduction(x) & Population(y) & RateOfReproduction(z) & Decreases(y,z)) -> Decreases(y,z))", "all x y.((RateOfReproduction(x) & Population(y) & Decreases(x)) -> PopulationDecreases(y))", "all x.((RateOfReproductionDecreases(x) & PopulationDecreases(x)) -> PopulationDecreases(x))", "all x.((RateOfReproduction(x) & Decreases(x)) -> PopulationDecline(x))", "all x.((RateOfReproduction(x) & Decreases(x)) -> DecreasesPopulation(x))", "all x.((RateOfReproduction(x) & Decreased(x)) -> PopulationDecrease(x))"]}
{"id": "entailmentbank_validation_723", "nl": "the population of the insects will decrease.", "fol": "", "prediction": ["all x.(Insect(x) -> PopulationDecrease(x))", "all x y.((Insect(x) & Population(y)) -> Decreases(x,y))", "all x y.((Insect(x) & Population(y)) -> Decreased(x,y))", "all x y.((Insect(x) & Insect(y)) -> PopulationDecrease(x,y))", "all x y.((Insect(x) & Population(y)) -> Decrease(x,y))", "all x.(Insect(x) -> PopulationDecreases(x))", "all x y z.((Insect(x) & Population(y) & Population(z)) -> Decreases(x,y,z))", "all x.(Insect(x) -> PopulationDecline(x))", "all x y.((Insect(x) & Population(y)) -> PopulationDecrease(x,y))", "all x.(Insects(x) -> PopulationDecrease(x))", "all x y.((Insect(x) & Insect(y)) -> PopulationDecreases(x,y))", "all x.(Insect(x) -> DecreasedPopulation(x))", "all x y z.((Insect(x) & Population(y) & Population(z)) -> Decrease(x,y,z))", "all x y.((Insect(x) & Population(y)) -> Decreased(x))", "all x y z.((Insect(x) & Population(y) & Population(z)) -> Decreased(x,y,z))", "all x y.((Insect(x) & PopulationDecrease(y)) -> PopulationDecrease(x,y))"]}
{"id": "entailmentbank_validation_724", "nl": "a hammer often is made of metal.", "fol": "", "prediction": ["all x.(Hammer(x) -> MadeOfMetal(x))", "all x y.((Hammer(x) & Metal(y)) -> MadeOf(x,y))", "all x.(Hammer(x) -> (MadeOfMetal(x) & OftenMadeOfMetal(x)))", "all x.(Hammer(x) -> OftenMadeOfMetal(x))", "all x.(Hammer(x) -> MakesOfMetal(x))", "all x.(Hammer(x) -> (MadeOfMetal(x) & MadeOfMetal(x)))", "all x.(Hammer(x) -> MadeOfMetal(x))", "all x.(Hammer(x) -> (MadeOfMetal(x) | MadeOfMetal(x)))", "all x.(Hammer(x) -> (MadeOfMetal(x)))", "all x.(Hammer(x) -> (MadeOfMetal(x) & Often(x)))", "all x y.((Hammer(x) & Metal(y)) -> MakesOf(x,y))", "all x.(Hammer(x) -> (MadeOfMetal(x) & OftenMadeOfMetal(x)))", "all x.(Hammer(x) -> (MadeOfMetal(x) & MakesOfMetal(x)))", "all x y.((Hammer(x) & Metal(y)) -> OftenMadeOf(x,y))", "exists x.(Hammer(x) & MadeOfMetal(x))", "all x.(Hammer(x) -> (MadeOfMetal(x) & HasMadeOfMetal(x)))"]}
{"id": "entailmentbank_validation_725", "nl": "when a metal rusts, that metal becomes flaky on the surface.", "fol": "", "prediction": ["all x.((Metal(x) & Rusts(x)) -> FlakyOnSurface(x))", "all x y.((Metal(x) & Rusts(x)) -> FlakyOnSurface(y))", "all x y.((Metal(x) & Rusts(x) & Metal(y)) -> FlakyOnSurface(y))", "all x.((Metal(x) & Ruins(x)) -> FlakyOnSurface(x))", "all x y.((Metal(x) & Rusts(x)) -> FlakyOnSurface(x))", "all x y z.((Metal(x) & Rusts(x) & Metal(y) & Surface(z)) -> Flaky(y))", "all x y z.((Metal(x) & Rusts(x) & Metal(y) & Surface(z)) -> Flaky(y,z))", "all x y z.((Metal(x) & Rusts(x) & Metal(y) & Surface(z)) -> FlakyOn(y,z))", "all x.((Metal(x) & Rusts(x)) -> Flaky(x))", "all x y.((Metal(x) & Rusts(x)) -> Flaky(y))", "all x y.((Metal(x) & Rusts(x)) -> FlakySurface(y))", "all x.((Metal(x) & Rusts(x)) -> FlakySurface(x))", "all x y.((Metal(x) & Metal(y) & Rusts(x)) -> FlakyOnSurface(y))", "all x y.((Metal(x) & Rusts(x)) -> FlakyOnSurface(x,y))", "all x y.((Metal(x) & Rusts(x) & Metal(y)) -> Flaky(y))", "all x.(Rots(x) -> FlakyOnSurface(x))"]}
{"id": "entailmentbank_validation_726", "nl": "when a hammer rusts, the hammer will becom flaky on the surface.", "fol": "", "prediction": ["all x.((Hammer(x) & Rusts(x)) -> FlakyOnSurface(x))", "all x y.((Hammer(x) & Rusts(x)) -> FlakyOnSurface(x))", "all x y.((Hammer(x) & Rusts(x)) -> FlakyOnSurface(y))", "all x.((Hammer(x) & Ruins(x)) -> FlakyOnSurface(x))", "all x.((Hammer(x) & Rusts(x)) -> Flaky(x))", "all x y z.((Hammer(x) & Rusts(x) & Surface(y) & Surface(z)) -> Flaky(x,y,z))", "all x.((Hammer(x) & Rusts(x)) -> FlakySurface(x))", "all x y.((Hammer(x) & Rusts(x) & Surface(y)) -> Flaky(x,y))", "all x y.((Hammer(x) & Rusts(x) & Surface(y)) -> Flaky(x))", "all x y z.((Hammer(x) & Rusts(x) & Surface(y) & Surface(z)) -> Flaky(x))", "all x y.((Hammer(x) & Rusts(x)) -> Flaky(y))", "all x y.((Hammer(x) & Rusts(x)) -> FlakySurface(y))", "all x y.((Hammer(x) & Rusts(x)) -> FlakyOnSurface(x,y))", "all x y.((Hammer(x) & Rusts(x)) -> Flaky(x))", "all x y z.((Hammer(x) & Rusts(x) & Surface(y) & Surface(z)) -> Flaky(x,y))", "all x y z.((Hammer(x) & Rusts(x) & Surface(y) & Surface(z)) -> FlakyOn(x,y,z))"]}
{"id": "entailmentbank_validation_727", "nl": "kim's hammer is flaky on the surface.", "fol": "", "prediction": ["all x.(Hammer(x) -> FlakyOnSurface(x))", "all x y.((Hammer(x) & Kim(y)) -> FlakyOnSurface(x,y))", "all x.(KimsHammer(x) -> FlakyOnSurface(x))", "all x y.((Hammer(x) & Kim(y)) -> FlakyOnSurface(y))", "all x.((Hammer(x) & FlakyOnSurface(x)) -> Kim(x))", "all x y.((Hammer(x) & Kim(y)) -> FlakyOnSurface(x))", "all x.(Kim'sHammer(x) -> FlakyOnSurface(x))", "all x.((Hammer(x) & FlakyOnSurface(x)) -> Kims(x))", "all x.(KimHammer(x) -> FlakyOnSurface(x))", "all x.((Hammer(x) & Kim(x)) -> FlakyOnSurface(x))", "all x.(Kim(x) -> FlakyHammer(x))", "all x.((Hammer(x) & FlakyOnSurface(x)) -> KimHammer(x))", "all x y.((Hammer(x) & Kim(y)) -> FlakyOnSurface(y,x))", "all x y.((Kim(x) & Hammer(y)) -> FlakyOnSurface(x,y))", "all x.((Hammer(x) & FlakyOnSurface(x)) -> KimsHammer(x))", "all x.(Hammer(x) & FlakyOnSurface(x))"]}
{"id": "entailmentbank_validation_728", "nl": "the hammer has rusted.", "fol": "", "prediction": ["all x.(Hammer(x) -> Rusted(x))", "all x.(Hammer(x) -> Rusted(x))", "all x y.((Hammer(x) & Hammer(y)) -> Rusted(x,y))", "all x y.((Hammer(x) & Hammer(y)) -> Rusted(x))", "all x y.((Hammer(x) & Hammer(y)) -> Rusted(x))", "all x y.((Hammer(x) & Hammer(y)) -> Rusted(x,y))", "all x.(Hammer(x) -> HasRusted(x))", "all x y.((Hammer(x) & Hammer(y)) -> Rusted(y))", "all x.(Hammer(x) -> Rusty(x))", "all x y.((Hammer(x) & Hammer(y)) -> Rusted(y))", "all x.(Hammer(x) -> Rubbed(x))", "all x.(Hammer(x) -> Rosted(x))", "all x.(Hummer(x) -> Rusted(x))", "all x y.((Hammer(x) & Hammer(y)) -> Rubbed(x,y))", "all x y.((Hammer(x) & Hammer(y)) -> HasRusted(x,y))", "all x.(Hummer(x) -> Rusted(x))"]}
{"id": "entailmentbank_validation_729", "nl": "rust forming is a kind of chemical change.", "fol": "", "prediction": ["all x.(RustForming(x) -> ChemicalChange(x))", "all x.(RoseForming(x) -> ChemicalChange(x))", "all x y.((RustForming(x) & ChemicalChange(y)) -> ChemicalChange(x))", "all x y.((RoseForming(x) & ChemicalChange(y)) -> ChemicalChange(x))", "all x y.((RustForming(x) & ChemicalChange(y)) -> ChemicalChange(x,y))", "all x.(RustFormation(x) -> ChemicalChange(x))", "all x.(RustForming(x) -> ChemicalChange(x))", "all x.(RoseFormation(x) -> ChemicalChange(x))", "all x y.((RoseForming(x) & ChemicalChange(y)) -> ChemicalChange(x,y))", "all x.(RoseForming(x) -> ChemicalChange(x))", "all x.((RustForming(x) & ChemicalChange(x)) -> ChemicalChange(x))", "all x y.((RustForming(x) & ChemicalChange(y)) -> Forms(x,y))", "all x y.((RustForming(x) & ChemicalChange(x)) -> ChemicalChange(y))", "all x y.((RoseForming(x) & ChemicalChange(y)) -> Forms(x,y))", "all x y.((RustForming(x) & ChemicalChange(y)) -> ChemicalChange(y))", "all x y.((RoseForming(x) & ChemicalChange(x)) -> ChemicalChange(y))"]}
{"id": "entailmentbank_validation_730", "nl": "the hammer has undergone a chemical change.", "fol": "", "prediction": ["all x.(Hammer(x) -> ChemicalChange(x))", "all x.(Hammer(x) -> UndergoneChemicalChange(x))", "all x y.((Hammer(x) & ChemicalChange(y)) -> UndergoneChange(x,y))", "all x y.((Hammer(x) & ChemicalChange(y)) -> Undergone(x,y))", "all x.(Hammer(x) -> UndergoneChange(x))", "all x y z.((Hammer(x) & ChemicalChange(y) & ChemicalChange(z)) -> Undergone(x,y,z))", "all x y.((Hammer(x) & ChemicalChange(y)) -> UndergoneChemicalChange(x,y))", "all x y z.((Hammer(x) & ChemicalChange(y) & Hammer(z)) -> UndergoneChange(x,z))", "all x y.((Hammer(x) & ChemicalChange(y)) -> UnderwentChange(x,y))", "all x y z.((Hammer(x) & ChemicalChange(y) & Hammer(z)) -> UndergoneChange(x,y,z))", "all x y z.((Hammer(x) & ChemicalChange(y) & ChemicalChange(z)) -> UndergoneChange(x,y,z))", "all x y.((Hammer(x) & ChemicalChange(y)) -> HasUndergone(x,y))", "all x y z.((Hammer(x) & ChemicalChange(y) & ChemicalChange(z)) -> Undergone(x,y))", "all x y.((Hammer(x) & ChemicalChange(y)) -> Underwent(x,y))", "all x.(Hammer(x) -> HasChange(x))", "all x y.((Hammer(x) & ChemicalChange(y)) -> Undergoes(x,y))"]}
{"id": "entailmentbank_validation_731", "nl": "element 3 turns to a greenish color.", "fol": "", "prediction": ["all x.(Element3(x) -> GreenishColor(x))", "all x.(Element3(x) -> TurnsToGreenishColor(x))", "all x.(Element(x) -> GreenishColor(x))", "all x.(Element(x) -> TurnsToGreenishColor(x))", "all x.((Element3) & GreenishColor(x)) -> TurnsTo(x,3))", "all x.((Element3) & GreenishColor(x)) -> TurnsTo(x))", "all x y.((Element(x) & Element(y)) -> TurnsToGreenishColor(x,y))", "all x.(Element3) -> GreenishColor(x))", "all x y.((Element(x) & Element3(y)) -> TurnsToGreenishColor(x,y))", "all x y.((Element(x) & Element3) & GreenishColor(y)) -> TurnsTo(x,y))", "all x y.((Element(x) & Element(y)) -> GreenishColor(x,y))", "all x.((Element3) & GreenishColor(x)) -> TurnsTo(x,Element3))", "all x y.((Element(x) & Element3(y)) -> GreenishColor(x,y))", "all x.((Element3) & GreenishColor(x)) -> TurnsTo(x,y))", "all x.(Element3) -> TurnsToGreenishColor(x))", "all x.((Element3) & TurnsToGreenishColor(x)) -> GreenishColor(x))"]}
{"id": "entailmentbank_validation_732", "nl": "an element is a kind of substance.", "fol": "", "prediction": ["all x.(Element(x) -> Substance(x))", "all x y.((Element(x) & Substance(y)) -> SortOf(x,y))", "all x.((Element(x) & Substance(x)) -> Substance(x))", "all x y.((Element(x) & Substance(y)) -> KindOf(x,y))", "all x y.((Element(x) & Substance(y)) -> Is(x,y))", "all x y.((Element(x) & Substance(y)) -> TypeOf(x,y))", "all x y.((Element(x) & Substance(y)) -> Substance(x))", "all x.exists y.(Element(x) & Substance(y) & Contains(x,y))", "all x.(Element(x) -> Substance(x))", "all x.((Element(x) & Substance(x)) -> Material(x))", "all x.((Element(x) & Substance(x)) -> SortOf(x))", "all x y.((Element(x) & Substance(y)) -> Substance(x,y))", "exists x.(Element(x) & Substance(x))", "all x.((Element(x) & Substance(x)) -> KindOf(x))", "all x y.((Element(x) & Substance(y)) -> Material(x))", "all x.((Element(x) & Substance(x)) -> Is(x,y))"]}
{"id": "entailmentbank_validation_733", "nl": "element 3 turning green is an example of a substance turning green.", "fol": "", "prediction": ["all x.(TurningGreen(x) -> Substance(x))", "all x.((Element3 & TurningGreen(x)) -> TurningGreen(x))", "all x.((Element3(x) & TurningGreen(x)) -> TurningGreen(x))", "all x.((Element3(x) & TurnsGreen(x)) -> TurnsGreen(x))", "all x.((Element3) & TurningGreen(x)) -> TurningGreen(x))", "all x.((Substance(x) & Element3TurningGreen(x)) -> TurningGreen(x))", "all x.(TurningGreen(x) -> SubstanceTurningGreen(x))", "all x.((Element(x) & TurningGreen(x)) -> TurningGreen(x))", "all x.((Element(x) & TurnsGreen(x)) -> TurnsGreen(x))", "all x.((Element3) & TurnsGreen(x)) -> TurnsGreen(x))", "all x.((Element3 & TurnsGreen(x)) -> TurnsGreen(x))", "all x y.((Element(x) & Substance(y) & TurnsGreen(x)) -> TurnsGreen(x))", "all x y.((Element(x) & Substance(y) & TurnsGreen(x,y)) -> TurnsGreen(x))", "all x y.((Element(x) & Substance(y) & TurningGreen(x,y)) -> TurningGreen(x))", "all x.((Element3 & TurningGreen(x)) -> TurnsGreen(x))", "all x y.((Element(x) & Substance(y) & TurningGreen(x)) -> TurningGreen(x))"]}
{"id": "entailmentbank_validation_734", "nl": "if the color of a substance changes then a chemical change may have occurred.", "fol": "", "prediction": ["all x.((Substance(x) & ColorChange(x)) -> ChemicalChangeOccurred(x))", "all x.((Substance(x) & ColorChange(x)) -> ChemicalChangeOccurs(x))", "all x.((Substance(x) & ColorChange(x)) -> ChemicalChange(x))", "all x y.((Substance(x) & ColorChange(x,y)) -> ChemicalChangeOccurred(x))", "all x y.((Substance(x) & ColorChange(x,y)) -> ChemicalChangeOccurs(x))", "all x y.((Substance(x) & ColorChange(x) & ChemicalChange(y)) -> MayOccurred(x,y))", "all x.((Substance(x) & ChangesColor(x)) -> ChemicalChangeOccurred(x))", "all x y.((Substance(x) & ColorChange(x,y)) -> ChemicalChange(x))", "all x y.((Substance(x) & ColorChange(x,y)) -> ChemicalChangeOccurred(x,y))", "all x y.((Substance(x) & ColorChange(x,y)) -> ChemicalChangeOccurred(y))", "all x y.((Substance(x) & ColorChange(x,y)) -> ChemicalChangeOccurs(x,y))", "all x y.((Substance(x) & ColorChange(x)) -> ChemicalChange(y))", "all x y.((Substance(x) & Substance(y) & ColorChange(x,y)) -> ChemicalChangeOccurred(x))", "all x y.((Substance(x) & ColorChange(x)) -> ChemicalChangeOccurred(y))", "all x y.((Substance(x) & ColorChange(x) & Substance(y)) -> ChemicalChangeOccurred(x))", "all x y.((Substance(x) & ColorChange(x) & Substance(y)) -> ChemicalChangeOccurred(x,y))"]}
{"id": "entailmentbank_validation_735", "nl": "a chemical change may occur to element 3.", "fol": "", "prediction": ["all x y.((ChemicalChange(x) & Element3(y)) -> MayOccur(x,y))", "all x y.((Element3(x) & ChemicalChange(y)) -> MayOccur(x,y))", "all x y z.((ChemicalChange(x) & Element3(y) & Element3(z)) -> MayOccur(x,y,z))", "all x y.((Element(x) & ChemicalChange(y)) -> MayOccur(x,y))", "all x y z.((Element(x) & ChemicalChange(y) & Element3(z)) -> MayOccur(x,y,z))", "all x.(ChemicalChange(x) -> MayOccurToElement3(x))", "all x y z.((ChemicalChange(x) & Element(y) & Element(z)) -> MayOccur(x,y,z))", "all x y.((Element(x) & ChemicalChange(y)) -> MayOccurTo(x,y))", "all x y z.((Element3(x) & ChemicalChange(y) & Element3(z)) -> MayOccur(x,y,z))", "all x y.((ChemicalChange(x) & Element3(y)) -> MayOccurTo(x,y))", "all x.((Element3(x) & ChemicalChange(x)) -> MayOccur(x))", "all x y.((Element3(x) & ChemicalChange(y)) -> MayOccurTo(x,y))", "all x y z.((Element(x) & ChemicalChange(y) & Element3(z)) -> MayOccurTo(x,y,z))", "all x y z.((ChemicalChange(x) & Element(y) & Element(z)) -> MayOccurTo(x,y,z))", "all x y z.((ChemicalChange(x) & Element3(y) & Element3(z)) -> MayOccurTo(x,y,z))", "all x y z.((Element(x) & ChemicalChange(y) & Element(z)) -> MayOccur(x,y,z))"]}
{"id": "entailmentbank_validation_736", "nl": "fire is a kind of chemical reaction.", "fol": "", "prediction": ["all x.(Fire(x) -> ChemicalReaction(x))", "all x.(Fire(x) -> ChemicalReaction(x))", "all x y.((Fire(x) & ChemicalReaction(y)) -> ChemicalReaction(x))", "all x y.((Fire(x) & ChemicalReaction(y)) -> ChemicalReaction(x,y))", "all x y.((Fire(x) & ChemicalReaction(y)) -> Chemical(x))", "all x y.((Fire(x) & ChemicalReaction(y)) -> Is(x,y))", "all x y z.((Fire(x) & ChemicalReaction(y) & ChemicalReaction(z)) -> ChemicalReaction(x,y,z))", "all x y.((Fire(x) & ChemicalReaction(y)) -> Chemical(x,y))", "all x y z.((Fire(x) & ChemicalReaction(y) & ChemicalReaction(z)) -> Is(x,y,z))", "all x y z.((Fire(x) & ChemicalReaction(y) & ChemicalReaction(z)) -> ChemicalReaction(x))", "all x y.((Fire(x) & ChemicalReaction(y)) -> Has(x,y))", "all x y z.((Fire(x) & ChemicalReaction(y) & Chemical(z)) -> ChemicalReaction(x,y,z))", "all x y.((Fire(x) & ChemicalReaction(y)) -> SortOf(x,y))", "all x.((Fire(x) & ChemicalReaction(x)) -> ChemicalReaction(x))", "all x y z.((Fire(x) & ChemicalReaction(y) & Chemical(z)) -> Is(x,y,z))", "all x y z.((Fire(x) & ChemicalReaction(y) & ChemicalReaction(z)) -> Chemical(x,y,z))"]}
{"id": "entailmentbank_validation_737", "nl": "fire causes burning.", "fol": "", "prediction": ["all x.(Fire(x) -> CausesBurning(x))", "all x y.((Fire(x) & Burning(y)) -> Causes(x,y))", "all x y z.((Fire(x) & Burning(y) & Fire(z)) -> Causes(x,y,z))", "all x y.((Fire(x) & Fire(y)) -> CausesBurning(x,y))", "all x.(Fire(x) -> CausesFire(x))", "all x y.((Fire(x) & Burning(y)) -> Cause(x,y))", "all x y z.((Fire(x) & Burning(y) & Burning(z)) -> Causes(x,y,z))", "all x y z.((Fire(x) & Burning(y) & Fire(z)) -> Causes(x,z))", "all x y z.((Fire(x) & Burning(y) & Fire(z)) -> Causes(x,y))", "all x y.((Fire(x) & Burning(y)) -> Causes(x,y))", "all x y z.((Fire(x) & Burning(y)) -> Causes(x,y))", "all x y z.((Fire(x) & Burning(y) & Fire(z)) -> Cause(x,y,z))", "all x.(Fire(x) -> Causes(x,burning))", "all x y z.((Fire(x) & Burning(y) & Burning(z)) -> Causes(x,y))", "all x y.((Fire(x) & Fire(y)) -> Causes(x,y))", "all x y.((Fire(x) & Burning(y)) -> CausedBy(x,y))"]}
{"id": "entailmentbank_validation_738", "nl": "burning something with fire is a kind of chemical reaction.", "fol": "", "prediction": ["all x.((Burning(x) & Fire(x)) -> ChemicalReaction(x))", "all x y.((Burning(x) & Fire(y)) -> ChemicalReaction(x))", "all x.((BurningWithFire(x) & ChemicalReaction(x)) -> ChemicalReaction(x))", "all x y.((Burning(x,y) & Fire(y)) -> ChemicalReaction(x))", "all x.((Burning(x) & WithFire(x)) -> ChemicalReaction(x))", "all x.((BurningWithFire(x) & SomethingWithFire(x)) -> ChemicalReaction(x))", "all x y.((BurningWithFire(x) & Something(y)) -> ChemicalReaction(x))", "all x.(BurningWithFire(x) -> ChemicalReaction(x))", "all x y.((Burning(x) & Fire(y)) -> ChemicalReaction(x,y))", "all x y.((BurningWithFire(x) & Fire(y)) -> ChemicalReaction(x))", "all x y z.((Burning(x) & Fire(y) & Something(z)) -> ChemicalReaction(x))", "all x.((Burning(x) & HasFire(x)) -> ChemicalReaction(x))", "all x y.((BurningWithFire(x) & SomethingWithFire(y)) -> ChemicalReaction(x))", "all x.((Burning(x) & UsingFire(x)) -> ChemicalReaction(x))", "all x y.((Burning(x,y) & Fire(y)) -> ChemicalReaction(x,y))", "all x y.((BurningWithFire(x) & Something(y)) -> ChemicalReaction(x,y))"]}
{"id": "entailmentbank_validation_739", "nl": "a lit candle is a source of fire.", "fol": "", "prediction": ["all x.(LitCandle(x) -> SourceOfFire(x))", "all x.((Candle(x) & Lit(x)) -> SourceOfFire(x))", "all x.((LitCandle(x) & SourceOfFire(x)) -> SourceOfFire(x))", "all x y.((LitCandle(x) & Candle(y)) -> SourceOfFire(x,y))", "all x y.((LitCandle(x) & Candle(y)) -> SourceOfFire(x))", "all x.((LitCandle(x) & -LitCandle(x)) -> SourceOfFire(x))", "all x y.((Candle(x) & Lit(x)) -> SourceOfFire(x))", "all x.((LiteCandle(x) & SourceOfFire(x)) -> SourceOfFire(x))", "all x y.((Candle(x) & Lit(x)) -> SourceOfFire(y))", "all x.((LitCandle(x) & FireSource(x)) -> SourceOf(x))", "all x.((LitCandle(x) & Candle(x)) -> SourceOfFire(x))", "all x.((LitCandle(x) & FireSource(x)) -> SourceOf(x,y))", "all x.(Candle(x) -> SourceOfFire(x))", "all x.(LiteCandle(x) -> SourceOfFire(x))", "all x y.((Candle(x) & Lit(y)) -> SourceOfFire(x))", "all x.((LitCandle(x) & SourceOfFire(x)) -> FireSource(x))"]}
{"id": "entailmentbank_validation_740", "nl": "burning something with a lit candle is a kind of chemical reaction.", "fol": "", "prediction": ["all x.((Burning(x) & LitCandle(x)) -> ChemicalReaction(x))", "all x y.((Burning(x,y) & LitCandle(y)) -> ChemicalReaction(x))", "all x y.((Burning(x) & LitCandle(y)) -> ChemicalReaction(x))", "all x.((Burning(x) & LightedCandle(x)) -> ChemicalReaction(x))", "all x.((BurningWithLitCandle(x) & SomethingWithLitCandle(x)) -> ChemicalReaction(x))", "all x.((BurningWithLitCandle(x) & Something(x)) -> ChemicalReaction(x))", "all x y.((Burning(x) & LitCandle(y)) -> ChemicalReaction(x,y))", "all x y.((Burning(x) & LitCandle(y) & With(x,y)) -> ChemicalReaction(x))", "all x y.((BurningWithLitCandle(x) & Something(y)) -> ChemicalReaction(x))", "all x y.((Burning(x) & Candle(y) & Lit(y)) -> ChemicalReaction(x))", "all x.((Burns(x) & LitCandle(x)) -> ChemicalReaction(x))", "all x y.((Burning(x,y) & LitCandle(x)) -> ChemicalReaction(x))", "all x y.((Burning(x) & LightedCandle(y)) -> ChemicalReaction(x))", "all x.((Burn(x) & LitCandle(x)) -> ChemicalReaction(x))", "all x y.((Burning(x,y) & LitCandle(y)) -> ChemicalReaction(x,y))", "all x y.((Burning(x,y) & LitCandle(x)) -> ChemicalReaction(y))"]}
{"id": "entailmentbank_validation_741", "nl": "magnesium is a kind of substance.", "fol": "", "prediction": ["all x.(Magnesium(x) -> Substance(x))", "all x.(Magnesium(x) -> SortOfSubstance(x))", "all x.(Magnesium(x) -> Substance(x))", "all x.(Magnetic(x) -> Substance(x))", "all x.(Magnesium(x) -> TypeOfSubstance(x))", "all x.(Magnesium(x) -> ArtOfSubstance(x))", "all x.(Magnesium(x) -> SpeciesOfSubstance(x))", "all x y.((Magnesium(x) & Substance(y)) -> SortOf(x,y))", "all x y.((Magnesium(x) & Substance(y)) -> Is(x,y))", "all x.(Magnesium(x) -> Material(x))", "all x.(Magnesium(x) -> IsSubstance(x))", "all x y.((Magnesium(x) & Substance(y)) -> Substance(x,y))", "all x.(Magnesium(x) -> KindOfSubstance(x))", "all x.(Melium(x) -> Substance(x))", "all x y.((Magnesium(x) & Substance(y)) -> KindOf(x,y))", "all x.(Magnesium(x) -> (Substance(x) | Substance(x)))"]}
{"id": "entailmentbank_validation_742", "nl": "burning magnesium with a lit candle is a kind of chemical reaction.", "fol": "", "prediction": ["all x.((BurningMagnesium(x) & LitCandle(x)) -> ChemicalReaction(x))", "all x.((BurningMagnesiumWithLitCandle(x)) -> ChemicalReaction(x))", "all x y.((BurningMagnesium(x) & LitCandle(y)) -> ChemicalReaction(x))", "all x.((BurnsMagnesium(x) & LitCandle(x)) -> ChemicalReaction(x))", "all x.((BurningMagnesiumWithLitCandle(x) & HasChemicalReaction(x)) -> ChemicalReaction(x))", "all x.((BoilingMagnesium(x) & LitCandle(x)) -> ChemicalReaction(x))", "all x y.((BurningMagnesium(x) & LitCandle(y)) -> ChemicalReaction(x,y))", "all x y.((Burning(x,y) & LitCandle(y)) -> ChemicalReaction(x))", "all x.((BurningMagnesiumWithCandle(x) & LitCandle(x)) -> ChemicalReaction(x))", "all x y z.((BurningMagnesium(x) & LitCandle(y) & Candle(z)) -> ChemicalReaction(x))", "all x y.((BurnsMagnesium(x) & LitCandle(y)) -> ChemicalReaction(x))", "all x.((Burning(x,Magnesium) & LitCandle(x)) -> ChemicalReaction(x))", "all x y z.((BurningMagnesium(x) & LitCandle(y) & LitCandle(z)) -> ChemicalReaction(x))", "all x.((BoilingMagnesiumWithLitCandle(x)) -> ChemicalReaction(x))", "all x y.((Burning(x,y) & LitCandle(x)) -> ChemicalReaction(x))", "all x y.((BurningMagnesiumWithLitCandle(x) & Candle(y)) -> ChemicalReaction(x))"]}
{"id": "entailmentbank_validation_743", "nl": "chemical reactions cause chemical change.", "fol": "", "prediction": ["all x.(ChemicalReaction(x) -> CausesChemicalChange(x))", "all x y.((ChemicalReaction(x) & ChemicalChange(y)) -> Causes(x,y))", "all x.(ChemicalReaction(x) -> CausesChange(x))", "all x y.((ChemicalReaction(x) & ChemicalChange(y)) -> CausesChemicalChange(x,y))", "all x.(ChemicalReaction(x) -> ChemicalChange(x))", "all x y z.((ChemicalReaction(x) & ChemicalReaction(y) & ChemicalChange(z)) -> Causes(x,y,z))", "all x y z.((ChemicalReaction(x) & ChemicalChange(y) & ChemicalReaction(z)) -> Causes(x,y,z))", "all x y.((ChemicalReaction(x) & ChemicalReaction(y)) -> CausesChange(x,y))", "all x y.((ChemicalReaction(x) & ChemicalReaction(y)) -> CausesChemicalChange(x,y))", "all x y.((ChemicalReaction(x) & ChemicalChange(y)) -> CausesChange(x,y))", "all x.(ChemicalReaction(x) -> CauseChemicalChange(x))", "all x y.((ChemicalReaction(x) & ChemicalChange(y)) -> Cause(x,y))", "all x y z.((ChemicalReaction(x) & ChemicalChange(y) & Chemical(z)) -> Causes(x,y,z))", "all x y.((ChemicalReaction(x) & ChemicalChemicalChange(y)) -> Causes(x,y))", "all x y.((ChemicalReaction(x) & Chemical(y)) -> CausesChange(x,y))", "all x.(ChemicalReaction(x) -> CausesChemicalChange(x))"]}
{"id": "entailmentbank_validation_744", "nl": "burning magnesium with fire will lead to a chemical change.", "fol": "", "prediction": ["all x y.((BurningMagnesiumWithFire(x) & ChemicalChange(y)) -> LeadsTo(x,y))", "all x.((BurningMagnesiumWithFire(x) & ChemicalChange(x)) -> LeadsTo(x,y))", "all x.((BurningMagnesium(x) & Fire(x)) -> ChemicalChange(x))", "all x.((BurningMagnesiumWithFire(x) & LeadsToChemicalChange(x)) -> ChemicalChange(x))", "all x.((BurningMagnesiumWithFire(x) & ChemicalChange(x)) -> ChemicalChange(x))", "all x.((BoilingMagnesiumWithFire(x) & ChemicalChange(x)) -> LeadsTo(x,y))", "all x.((BurningMagnesiumWithFire(x)) -> ChemicalChange(x))", "all x.((BurningMagnesiumWithFire(x) & ChemicalChange(x)) -> LeadsToChange(x))", "all x y.((BoilingMagnesiumWithFire(x) & ChemicalChange(y)) -> LeadsTo(x,y))", "all x y.((BurningMagnesium(x) & Fire(y)) -> ChemicalChange(x))", "all x.((BurningMagnesiumWithFire(x) & ChemicalChange(x)) -> LeadsTo(x,Magnesium,Fire))", "all x.((BoilingMagnesiumWithFire(x) & LeadsToChemicalChange(x)) -> ChemicalChange(x))", "all x.((BoilingMagnesium(x) & Fire(x)) -> ChemicalChange(x))", "all x y.((BurningMagnesium(x) & Fire(y)) -> ChemicalChange(x,y))", "all x y z.((BurningMagnesium(x) & Fire(y) & ChemicalChange(z)) -> LeadsTo(x,y,z))", "all x.((BurningMagnesiumWithFire(x) & ChemicalChange(x)) -> LeadsTo(x,ChemicalChange))"]}
{"id": "entailmentbank_validation_745", "nl": "chemical reactions cause new materials to form.", "fol": "", "prediction": ["all x.(ChemicalReaction(x) -> CausesNewMaterials(x))", "all x y.((ChemicalReaction(x) & Material(y)) -> CausesFormation(x,y))", "all x y.((ChemicalReaction(x) & Material(y)) -> CausesToForm(x,y))", "all x y z.((ChemicalReaction(x) & Material(y) & Material(z)) -> CausesToForm(x,y,z))", "all x y z.((ChemicalReaction(x) & Material(y) & Material(z)) -> CausesFormation(x,y,z))", "all x.(ChemicalReaction(x) -> CausesNewMaterialsToForm(x))", "all x y.((ChemicalReaction(x) & Material(y)) -> Causes(x,y))", "all x y z.((ChemicalReaction(x) & Material(y) & Material(z)) -> Causes(x,y,z))", "all x y.((ChemicalReaction(x) & Material(y)) -> CausesToForm(x,y))", "all x y z.((ChemicalReaction(x) & Material(y) & ChemicalReaction(z)) -> CausesFormation(x,y,z))", "all x y z.((ChemicalReaction(x) & Material(y) & ChemicalReaction(z)) -> CausesToForm(x,y,z))", "all x y.((ChemicalReaction(x) & Material(y)) -> CausesNew(x,y))", "all x y z.((ChemicalReaction(x) & Material(y) & Material(z)) -> CausesToForm(x,y,z))", "all x.(ChemicalReaction(x) -> CausesNewMaterials(x))", "all x y.((ChemicalReaction(x) & Material(y) & Causes(x,y)) -> Forms(x,y))", "all x y.((ChemicalReaction(x) & Material(y)) -> CausesNewMaterials(x,y))"]}
{"id": "entailmentbank_validation_746", "nl": "chemical change is a kind of chemical reaction.", "fol": "", "prediction": ["all x.(ChemicalChange(x) -> ChemicalReaction(x))", "all x y.((ChemicalChange(x) & ChemicalReaction(y)) -> ChemicalChange(x))", "all x.(ChemicalChange(x) -> ChemicalReaction(x))", "all x y.((ChemicalChange(x) & ChemicalReaction(y)) -> ChemicalChange(x,y))", "all x.(Change(x) -> ChemicalReaction(x))", "all x.((ChemicalChange(x) & ChemicalReaction(x)) -> ChemicalChange(x))", "all x y.((ChemicalChange(x) & ChemicalReaction(y)) -> Chemical(x))", "all x y z.((ChemicalChange(x) & ChemicalReaction(y) & Chemical(z)) -> ChemicalChange(x,y,z))", "all x y z.((ChemicalChange(x) & ChemicalReaction(y) & ChemicalChange(z)) -> ChemicalChange(x,y,z))", "all x y.((ChemicalChange(x) & ChemicalReaction(y)) -> ChemicalReaction(x,y))", "all x y z.((ChemicalChange(x) & ChemicalReaction(y) & Chemical(z)) -> ChemicalChange(x))", "all x y z.((ChemicalChange(x) & ChemicalReaction(y) & ChemicalReaction(z)) -> ChemicalChange(x,y,z))", "all x y.((ChemicalChange(x) & ChemicalReaction(y)) -> ChemicalReaction(x))", "all x y.((ChemicalChange(x) & ChemicalReaction(y)) -> Chemical(x,y))", "all x y z.((ChemicalChange(x) & ChemicalReaction(y) & ChemicalChange(z)) -> ChemicalReaction(x,y,z))", "all x y z.((ChemicalChange(x) & ChemicalReaction(y) & Chemical(z)) -> ChemicalChange(x,y))"]}
{"id": "entailmentbank_validation_747", "nl": "chemical changes cause new materials to form.", "fol": "", "prediction": ["all x.(ChemicalChange(x) -> CausesNewMaterials(x))", "all x y.((ChemicalChange(x) & Material(y)) -> CausesFormation(x,y))", "all x.(ChemicalChange(x) -> CausesNewMaterialsToForm(x))", "all x y.((ChemicalChange(x) & Material(y)) -> CausesToForm(x,y))", "all x y z.((ChemicalChange(x) & Material(y) & Material(z)) -> CausesFormation(x,y,z))", "all x y z.((ChemicalChange(x) & Material(y) & Material(z)) -> CausesToForm(x,y,z))", "all x.(ChemicalChange(x) -> NewMaterialsForm(x))", "all x y.((ChemicalChange(x) & Material(y)) -> CausesForm(x,y))", "all x y z.((ChemicalChange(x) & Material(y) & ChemicalChange(z)) -> CausesFormation(x,y,z))", "all x.(ChemicalChange(x) -> (CausesNewMaterials(x) & FormsNewMaterials(x)))", "all x y.((ChemicalChange(x) & Material(y)) -> CausesFormation(x,y))", "all x y.((ChemicalChange(x) & ChemicalChange(y)) -> CausesNewMaterials(x,y))", "all x y.((ChemicalChange(x) & ChemicalChange(y)) -> CausesNewMaterialsToForm(x,y))", "all x y.((ChemicalChange(x) & Material(y)) -> CausesForming(x,y))", "all x y z.((ChemicalChange(x) & Material(y) & ChemicalChange(z)) -> CausesToForm(x,y,z))", "all x y.((ChemisticalChange(x) & Material(y)) -> CausesFormation(x,y))"]}
{"id": "entailmentbank_validation_748", "nl": "an example of a chemical property is the elements making up a compound.", "fol": "", "prediction": ["all x.((Elements(x) & Compound(x)) -> ChemicalProperty(x))", "all x y.((ChemicalProperty(x) & Compound(y)) -> ElementsMakingUp(x,y))", "all x.((ElementsMakingUpCompound(x)) -> ChemicalProperty(x))", "all x y.((ChemicalProperty(x) & Compound(y)) -> ElementsMakingUp(x,y))", "all x y z.((ChemicalProperty(x) & Compound(y) & Elements(z)) -> MakesUp(x,y,z))", "all x.(ChemicalProperty(x) -> ElementsMakingUpCompound(x))", "all x y.((ChemicalProperty(x) & Compound(y)) -> Elements(x,y))", "all x.(ChemicalProperty(x) -> (ElementsMakingUpCompound(x)))", "all x.(ChemicalProperty(x) -> ElementsMakingUpCompound(x))", "all x y z.((ChemicalProperty(x) & Compound(y) & Compound(z)) -> ElementsMakingUp(x,y,z))", "all x.((ChemicalProperty(x) & Compound(x)) -> ElementsMakingUp(x))", "all x y.((ChemicalProperty(x) & Compound(y)) -> CompoundElements(x,y))", "all x.(ChemicalProperty(x) -> Compound(x))", "all x.(ChemicalProperty(x) -> Compound(x))", "all x y.((Elements(x) & Compound(y)) -> ChemicalProperty(x,y))", "all x y.((ChemicalProperty(x) & Compound(y)) -> ElementsMakeup(x,y))"]}
{"id": "entailmentbank_validation_749", "nl": "water is a kind of compound.", "fol": "", "prediction": ["all x.(Water(x) -> Compound(x))", "all x y.((Water(x) & Compound(y)) -> Compound(x))", "all x.((Water(x) & Compound(x)) -> Compound(x))", "all x y.((Water(x) & Compound(y)) -> Compound(x,y))", "all x.(Water(x) -> Compound(x))", "all x y z.((Water(x) & Compound(y) & Compound(z)) -> Compound(x,y,z))", "all x y z.((Water(x) & Compound(y) & Compound(z)) -> Compound(x))", "all x y.((Water(x) & Compound(y)) -> (Compound(x) & Compound(y)))", "all x y.((Water(x) & Compound(y)) -> Is(x,y))", "all x y z.((Water(x) & Compound(y) & Compound(z)) -> Compound(x,y))", "all x.((Water(x) & Compound(x)) -> HasCompound(x))", "all x y.((Water(x) & Compound(y)) -> HasCompound(x,y))", "all x y.((Water(x) & Compound(y)) -> Composite(x))", "all x y.((Water(x) & Compound(y)) -> Compound(y))", "all x y.((Water(x) & Compound(y)) -> (Compound(x) & Compound(x)))", "all x y.((Water(x) & Compound(y)) -> (Compound(x,y) & Compound(x,y)))"]}
{"id": "entailmentbank_validation_750", "nl": "an example of chemical property is the elements making up water.", "fol": "", "prediction": ["all x.((Elements(x) & Water(x)) -> ChemicalProperty(x))", "all x.(ChemicalProperty(x) -> ElementsMakingUpWater(x))", "all x.(ChemicalProperty(x) -> ElementsMakingUpWater(x))", "all x.((Elements(x) & MakingUpWater(x)) -> ChemicalProperty(x))", "all x.((Elements(x) & MakesUpWater(x)) -> ChemicalProperty(x))", "all x.((Elements(x) & MakeUpWater(x)) -> ChemicalProperty(x))", "all x.(ChemicalProperty(x) -> (ElementsMakingUpWater(x)))", "all x y.((Element(x) & Water(y)) -> ChemicalProperty(x,y))", "all x y.((Elements(x) & Water(y)) -> ChemicalProperty(x,y))", "all x.(ChemicalProperty(x) -> ElementsMakeUpWater(x))", "all x.(ChemicalProperty(x) -> ElementsMakeUpWater(x))", "all x.(ChemicalProperty(x) -> MakesUpWater(x))", "all x.((ElementsMakingUpWater(x)) -> ChemicalProperty(x))", "all x y.((Elements(x) & Water(y)) -> ChemicalProperty(x))", "all x y.((Element(x) & Water(y)) -> ChemicalProperty(x))", "all x.(ChemicalProperty(x) -> MakesUpWater(x))"]}
{"id": "entailmentbank_validation_751", "nl": "a chemical property of water is that it is made of hydrogen and oxygen.", "fol": "", "prediction": ["all x.((Water(x) & MadeOfHydrogen(x) & MadeOfOxygen(x)) -> ChemicalProperty(x))", "all x.(ChemicalPropertyOfWater(x) -> (MadeOfHydrogen(x) & MadeOfOxygen(x)))", "all x.(ChemicalPropertyOfWater(x) -> (MadeOfHydrogen(x) & MadeOfOxygen(x)))", "all x.(Water(x) -> (MadeOfHydrogen(x) & MadeOfOxygen(x)))", "all x.((ChemicalPropertyOfWater(x) & MadeOfHydrogen(x) & MadeOfOxygen(x)) -> MadeOfWater(x))", "all x.((Water(x) & MadeOf(x,Hydrogen) & MadeOf(x,Oxygen)) -> ChemicalProperty(x))", "all x.((ChemicalPropertyOfWater(x) & MadeOfHydrogen(x) & MadeOfOxygen(x)) -> MadeOfWaterAndOxygen(x))", "all x.((ChemicalProperty(x) & Water(x)) -> (MadeOfHydrogen(x) & MadeOfOxygen(x)))", "all x.((WaterProperty(x) & MadeOfHydrogen(x) & MadeOfOxygen(x)) -> ChemicalProperty(x))", "all x.((ChemicalPropertyOfWater(x) & MadeOfHydrogen(x) & MadeOfOxygen(x)) -> MadeOf(x,Hydrogen,Oxygen))", "all x.(ChemicalPropertyOfWater(x) -> (Hydrogen(x) & Oxygen(x)))", "all x.((Water(x) & MakesOfHydrogen(x) & MakesOfOxygen(x)) -> ChemicalProperty(x))", "all x.((Water(x) & MadeOfHydrogen(x) & MadeOfOxygen(x)) -> ChemicalPropertyOf(x,Water))", "all x.((ChemicalPropertyOfWater(x) & MadeOfHydrogen(x) & MadeOfOxygen(x)) -> ChemicalPropertyOfWater(x))", "all x.(ChemicalPropertyOfWater(x) -> (Hydrogen(x) & Oxygen(x)))", "all x.((Water(x) & MadeOf(x,hydrogen) & MadeOf(x,oxygen)) -> ChemicalProperty(x))"]}
{"id": "entailmentbank_validation_752", "nl": "a compound can be chemically separated into the elements that it is made of.", "fol": "", "prediction": ["all x.(Compound(x) -> ChemicallySeparatedIntoElements(x))", "all x.(Compound(x) -> CanBeChemicallySeparatedIntoElements(x))", "all x y.((Compound(x) & Element(y)) -> CanBeChemicallySeparated(x,y))", "all x y.((Compound(x) & Element(y)) -> ChemicallySeparated(x,y))", "all x.(Compound(x) -> CanBeChemicallySeparated(x))", "all x y z.((Compound(x) & Element(y) & Element(z)) -> CanBeChemicallySeparated(x,y,z))", "all x y z.((Compound(x) & Element(y) & Element(z)) -> ChemicallySeparated(x,y,z))", "all x y.((Compound(x) & Element(y)) -> ChemicallySeparatedInto(x,y))", "all x y.((Compound(x) & Compound(y)) -> CanBeChemicallySeparatedIntoElements(x,y))", "all x y.((Compound(x) & Element(y) & MadeOf(x,y)) -> ChemicallySeparated(x,y))", "all x y.((Compound(x) & Element(y)) -> CanBeChemicallySeparatedInto(x,y))", "all x y.((Compound(x) & Elements(y)) -> CanBeChemicallySeparated(x,y))", "all x y.((Compound(x) & Compound(y)) -> ChemicallySeparatedIntoElements(x,y))", "all x y z.((Compound(x) & Element(y) & Compound(z)) -> CanBeChemicallySeparated(x,y,z))", "all x.(Compound(x) -> (ChemicallySeparatedIntoElements(x) & MadeOf(x)))", "all x y.((Compound(x) & Elements(y)) -> ChemicallySeparated(x,y))"]}
{"id": "entailmentbank_validation_753", "nl": "water can be separated into hydrogen and oxygen.", "fol": "", "prediction": ["all x.(Water(x) -> (SeparatedIntoHydrogen(x) & SeparatedIntoOxygen(x)))", "all x.(Water(x) -> (SeparatedIntoHydrogen(x) | SeparatedIntoOxygen(x)))", "all x.(Water(x) -> (SeparatedInto(x,Hydrogen) & SeparatedInto(x,Oxygen)))", "all x.(Water(x) -> (SeparatedIntoHydrogen(x) & SeparatedIntoOxygen(x)))", "all x y.((Water(x) & Hydrogen(y)) -> SeparatedInto(x,y))", "all x.(Water(x) -> (SeparatedInto(x,hydrogen) & SeparatedInto(x,oxygen)))", "all x.(Water(x) -> (Hydrogen(x) | Oxygen(x)))", "all x.(Water(x) -> (SeparatedIntoHydrogen(x) | SeparatedIntoOxygen(x)))", "all x.(Water(x) -> (SeparatedInto(x,Hydrogen) & SeparatedInto(x,Oxygen)))", "all x y z.((Water(x) & Hydrogen(y) & Oxygen(z)) -> SeparatedInto(x,y,z))", "all x.(Water(x) -> (SeparatedInto(x,Hydrogen) | SeparatedInto(x,Oxygen)))", "all x.(Water(x) -> (SeparatedInto(x,hydrogen) & SeparatedInto(x,oxygen)))", "all x y.((Water(x) & Hydrogen(y) & Oxygen(y)) -> SeparatedInto(x,y))", "all x.(Water(x) -> (SeparatedInto(x,hydrogen) | SeparatedInto(x,oxygen)))", "all x.(Water(x) -> (Separate(x,hydrogen) & Separate(x,oxygen)))", "all x.(Water(x) -> (Hydrogen(x) & Oxygen(x)))"]}
{"id": "entailmentbank_validation_754", "nl": "carbon dioxide is a new substance produced by sodium bicarbonate.", "fol": "", "prediction": ["all x.(CarbonDioxide(x) -> (NewSubstance(x) & ProducedBySodiumBicarbonate(x)))", "all x.(CarbonDioxide(x) -> ProducedBySodiumBicarbonate(x))", "all x.(CarbonDioxide(x) -> (NaturalSubstance(x) & ProducedBySodiumBicarbonate(x)))", "all x.(CarbonDioxide(x) -> (ProducedBySodiumBicarbonate(x) & NewSubstance(x)))", "all x.((CarbonDioxide(x) & ProducedBySodiumBicarbonate(x)) -> NewSubstance(x))", "all x.(CarbonDioxide(x) -> (NewSubstance(x) & ProducedBySodiumBicarbonate(x)))", "all x.(CarbonDioxide(x) -> (NaturalSubstance(x) & ProducedBySodiumBicarbonate(x)))", "all x.(CarbonDioxide(x) -> (SodiumBicarbonate(x) & NewSubstance(x)))", "all x.(CarbonDioxide(x) -> (ProducedBySodiumBicarbonate(x) & NewSubstance(x)))", "all x y.((CarbonDioxide(x) & Substance(y)) -> ProducedBySodiumBicarbonate(x))", "all x.(CarbonDioxide(x) -> (ProducedBySodiumBicarbonate(x) | ProducedBySodiumBicarbonate(x)))", "all x y.((CarbonDioxide(x) & Substance(y)) -> ProducedBySodiumBicarbonate(x,y))", "all x.(CarbonDioxide(x) -> ProducedBySodiumBicarbonate(x))", "all x.((CarbonDioxide(x) & NewSubstance(x) & ProducedBySodiumBicarbonate(x)) -> CarbonDioxide(x))", "all x y.((CarbonDioxide(x) & Substance(y) & ProducedBySodiumBicarbonate(x)) -> NewSubstance(x,y))", "all x y.((CarbonDioxide(x) & Substance(y) & ProducedBySodiumBicarbonate(y)) -> NewSubstance(x,y))"]}
{"id": "entailmentbank_validation_755", "nl": "chemical reactions cause new substances to form.", "fol": "", "prediction": ["all x y.((ChemicalReaction(x) & Substance(y)) -> CausesFormation(x,y))", "all x.(ChemicalReaction(x) -> CausesNewSubstances(x))", "all x y.((ChemicalReaction(x) & Substance(y)) -> CausesToForm(x,y))", "all x y z.((ChemicalReaction(x) & Substance(y) & Substance(z)) -> CausesFormation(x,y,z))", "all x y z.((ChemicalReaction(x) & Substance(y) & Substance(z)) -> CausesToForm(x,y,z))", "all x y z.((ChemicalReaction(x) & Substance(y) & ChemicalReaction(z)) -> CausesFormation(x,y,z))", "all x y z.((ChemicalReaction(x) & Substance(y) & ChemicalReaction(z)) -> CausesToForm(x,y,z))", "all x y.((ChemicalReaction(x) & Substance(y)) -> Causes(x,y))", "all x.(ChemicalReaction(x) -> CausesNewSubstancesToForm(x))", "all x y.((ChemicalReaction(x) & Substance(y) & Causes(x,y)) -> Forms(x,y))", "all x y.((ChemicalReaction(x) & Substance(y)) -> Forms(x,y))", "all x y z.((ChemicalReaction(x) & Substance(y) & Substance(z)) -> Causes(x,y,z))", "all x y.((ChemicalReaction(x) & Substance(y)) -> CausesFormation(x,y))", "all x y z.((ChemicalReaction(x) & Substance(y) & Substance(z)) -> CausesFormation(x,y))", "all x y z.((ChemicalReaction(x) & Substance(y) & ChemicalReaction(z)) -> CausesFormation(x,y))", "all x y z.((ChemicalReaction(x) & Substance(y) & ChemicalReaction(z)) -> Causes(x,y,z))"]}
{"id": "entailmentbank_validation_756", "nl": "sodium bicarbonate releasing carbon dioxide is a chemical reaction.", "fol": "", "prediction": ["all x.((SodiumBicarbonate(x) & ReleasesCarbonDioxide(x)) -> ChemicalReaction(x))", "all x y.((SodiumBicarbonate(x) & CarbonDioxide(y)) -> ChemicalReaction(x))", "all x.((SodiumBicarbonate(x) & CarbonDioxide(x)) -> ChemicalReaction(x))", "all x y.((SodiumBicarbonate(x) & CarbonDioxide(y)) -> ChemicalReaction(x,y))", "all x y.((SodiumBicarbonate(x) & CarbonDioxide(y) & Releases(x,y)) -> ChemicalReaction(x))", "all x y z.((SodiumBicarbonate(x) & CarbonDioxide(y) & CarbonDioxide(z)) -> ChemicalReaction(x))", "all x.(SodiumBicarbonateReleasesCarbonDioxide(x) -> ChemicalReaction(x))", "all x.((SaltBicarbonate(x) & ReleasesCarbonDioxide(x)) -> ChemicalReaction(x))", "all x.((SodiumBicarbonate(x) & ReleaseCarbonDioxide(x)) -> ChemicalReaction(x))", "all x.((SalicylicBicarbonate(x) & ReleasesCarbonDioxide(x)) -> ChemicalReaction(x))", "all x y z.((SodiumBicarbonate(x) & CarbonDioxide(y) & CarbonDioxide(z) & Releases(x,y,z)) -> ChemicalReaction(x))", "all x y z.((SodiumBicarbonate(x) & CarbonDioxide(y) & CarbonDioxide(z)) -> ChemicalReaction(x,y,z))", "all x y z.((SodiumBicarbonate(x) & CarbonDioxide(y) & ChemicalReaction(z)) -> Releases(x,y,z))", "all x.((SodiumBicarbonate(x) & CarbonDioxideRelease(x)) -> ChemicalReaction(x))", "all x.(SodiumBicarbonate(x) -> ReleasesCarbonDioxide(x))", "all x y z.((SodiumBicarbonate(x) & CarbonDioxide(y) & ChemicalReaction(z)) -> Releases(x,y))"]}
{"id": "entailmentbank_validation_757", "nl": "an example of a chemical property is how a material reacts chemically.", "fol": "", "prediction": ["all x.((Material(x) & ReactsChemically(x)) -> ChemicalProperty(x))", "all x.((Material(x) & ChemicalProperty(x)) -> ReactsChemically(x))", "all x.(ChemicalProperty(x) -> (ReactsChemically(x) & Material(x)))", "all x.((Material(x) & ReactsChemically(x)) -> ChemicalProperty(x))", "all x.(ChemicalProperty(x) -> ReactsChemically(x))", "all x y.((Material(x) & Material(y) & ReactsChemically(x,y)) -> ChemicalProperty(x))", "all x y.((Material(x) & Material(y)) -> ReactsChemically(x,y))", "all x y.((Material(x) & ChemicalProperty(y)) -> ReactsChemically(x,y))", "all x.(ChemicalProperty(x) -> ReactsChemically(x))", "all x y.((Material(x) & Material(y) & ReactsChemically(x,y)) -> ChemicalProperty(x,y))", "all x.(ChemicalProperty(x) -> (ReactsChemically(x) & Material(x)))", "all x.((Material(x) & ChemicalProperty(x)) -> ReactsChemically(x))", "all x y.((Material(x) & Material(y) & ReactsChemically(x)) -> ChemicalProperty(x))", "all x.(ChemicalProperty(x) -> HowMaterialReactsChemically(x))", "all x y.((Material(x) & Material(y) & ReactsChemically(x)) -> ChemicalProperty(x,y))", "all x y.((Material(x) & ChemicalProperty(x)) -> ReactsChemically(x,y))"]}
{"id": "entailmentbank_validation_758", "nl": "releasing carbon dioxide is a kind of chemical property of sodium bicarbonate.", "fol": "", "prediction": ["all x.(ReleasesCarbonDioxide(x) -> ChemicalPropertyOfSodiumBicarbonate(x))", "all x.(ReleasingCarbonDioxide(x) -> ChemicalPropertyOfSodiumBicarbonate(x))", "all x.((ReleasesCarbonDioxide(x) & SodiumBicarbonate(x)) -> ChemicalProperty(x))", "all x.((ReleasesCarbonDioxide(x) & NatriumBicarbonate(x)) -> ChemicalProperty(x))", "all x.(ReleasingCarbonDioxide(x) -> ChemicalPropertyOfSodiumBicarbonate(x))", "all x.((ReleasesCarbonDioxide(x) & SaltyBicarbonate(x)) -> ChemicalProperty(x))", "all x.((ReleasesCarbonDioxide(x)) -> ChemicalPropertyOfSodiumBicarbonate(x))", "all x.((ReleasingCarbonDioxide(x) & NatriumBicarbonate(x)) -> ChemicalProperty(x))", "all x.((ReleasingCarbonDioxide(x) & SodiumBicarbonate(x)) -> ChemicalProperty(x))", "all x.((ReleasesCarbonDioxide(x) & SolubleBicarbonate(x)) -> ChemicalProperty(x))", "all x.((ReleasesCarbonDioxide(x) & ChemicalPropertyOfSodiumBicarbonate(x)) -> ReleasesCarbonDioxide(x))", "all x y.((ReleasesCarbonDioxide(x) & NatriumBicarbonate(y)) -> ChemicalProperty(x,y))", "all x.((ReleasesCarbonDioxide(x) & HydrogenBicarbonate(x)) -> ChemicalProperty(x))", "all x.((ReleasesCarbonDioxide(x) & ChemicalPropertyOfSodiumBicarbonate(x)) -> ChemicalPropertyOfSodiumBicarbonate(x))", "all x.((ReleasesCarbonDioxide(x) & SodiumBicarbonate(x)) -> ChemicalPropertyOf(x,y))", "all x.((ReleasesCarbonDioxide(x) & ChemicalPropertyOfSodiumBicarbonate(x)) -> Releases(x,CarbonDioxide))"]}
{"id": "entailmentbank_validation_759", "nl": "a pencil is a kind of object.", "fol": "", "prediction": ["all x.(Pencil(x) -> Object(x))", "all x.(Pencil(x) -> ArtOfObject(x))", "all x y.((Pencil(x) & Pencil(y)) -> Object(x))", "all x.(Pencil(x) -> Object(x))", "all x.(Pencil(x) -> TypeOfObject(x))", "all x y.((Pencil(x) & Pencil(y)) -> Object(x,y))", "all x.(Pencil(x) -> IsObject(x))", "all x.(Pencil(x) -> (Object(x) & Object(x)))", "all x y.((Pencil(x) & Object(y)) -> Object(x))", "all x.((Pencil(x) & Object(x)) -> Object(x))", "all x.(Pencil(x) -> SortOfObject(x))", "all x.(Pencil(x) -> KindOfObject(x))", "all x y.((Pencil(x) & Object(y)) -> Object(x,y))", "exists x.(Pencil(x) & Object(x))", "all x y.((Pencil(x) & Object(y)) -> KindOf(x,y))", "all x y.((Pencil(x) & Pencil(y)) -> ArtOfObject(x))"]}
{"id": "entailmentbank_validation_760", "nl": "sharpening a pencil changes the shape of the pencil.", "fol": "", "prediction": ["all x y.((Pencil(x) & Sharpening(x,y)) -> ChangesShape(x,y))", "all x y.((Pencil(x) & Sharpening(x)) -> ChangesShape(x,y))", "all x y.((Pencil(x) & Sharpening(x,y)) -> ChangesShapeOf(x,y))", "all x.(SharpeningPencil(x) -> ChangesShapeOfPencil(x))", "all x y.((Pencil(x) & Sharpening(x) & Pencil(y)) -> ChangesShape(x,y))", "all x y.((Pencil(x) & Sharpening(x)) -> ChangesShapeOf(x,y))", "all x y.((Pencil(x) & Sharpening(x)) -> ChangesShape(y))", "all x y z.((Pencil(x) & Sharpening(x,y) & Pencil(z)) -> ChangesShape(x,z))", "all x y.((Pencil(x) & Sharpening(y)) -> ChangesShape(x,y))", "all x y z.((Pencil(x) & Sharpening(y) & Pencil(z)) -> ChangesShape(x,z))", "all x y z.((Pencil(x) & Sharpening(y) & Pencil(z)) -> ChangesShape(x,y,z))", "all x y.((Pencil(x) & Sharpening(x,y)) -> ChangesShape(y,x))", "all x y z.((Pencil(x) & Sharpening(x) & Pencil(y) & Shape(z)) -> ChangesShape(x,y,z))", "all x y z.((Pencil(x) & Sharpening(x) & Pencil(y) & Shape(z)) -> Changes(x,y,z))", "all x y.((Pencil(x) & Sharpening(x,y)) -> ChangesShapeOf(y,x))", "all x.(Sharpening(x) -> ChangesShapeOfPencil(x))"]}
{"id": "entailmentbank_validation_761", "nl": "sharpening a pencil changes the shape of an object.", "fol": "", "prediction": ["all x y.((Pencil(x) & Sharpening(x)) -> ChangesShapeOfObject(y))", "all x y.((Pencil(x) & Sharpening(x,y)) -> ChangesShapeOfObject(y))", "all x y.((Pencil(x) & Sharpening(x,y)) -> ChangesShapeOfObject(x,y))", "all x.((Pencil(x) & Sharpens(x)) -> ChangesShapeOfObject(x))", "all x.(SharpeningPencil(x) -> ChangesShapeOfObject(x))", "all x y.((Pencil(x) & Sharpening(x,y)) -> ChangesShapeOfObject(x))", "all x y.((Pencil(x) & Sharpening(x,y)) -> ChangesShapeOfObject(y,x))", "all x y z.((Pencil(x) & Sharpening(x,y) & Object(z)) -> ChangesShape(x,z))", "all x y z.((Pencil(x) & Sharpening(y) & Object(z)) -> ChangesShape(x,y,z))", "all x y.((Pencil(x) & Sharpening(y)) -> ChangesShapeOfObject(x,y))", "all x y.((Pencil(x) & Sharpening(x)) -> ChangesShapeOfObject(x,y))", "all x.((Pencil(x) & Sharpening(x)) -> ChangesShapeOfObject(x))", "all x y.((Pencil(x) & Sharpening(x) & Object(y)) -> ChangesShape(x,y))", "all x y z.((Pencil(x) & Sharpening(y) & Object(z)) -> ChangesShape(x,z))", "all x y z.((Pencil(x) & Sharpening(y) & Object(z)) -> ChangesShape(y,z))", "all x y.((Pencil(x) & Sharpening(x,y) & Object(y)) -> ChangesShape(x,y))"]}
{"id": "entailmentbank_validation_762", "nl": "tearing paper changes the shape of the paper.", "fol": "", "prediction": ["all x y.((TornPaper(x) & Paper(y)) -> ChangesShape(x,y))", "all x.(TornPaper(x) -> ChangesShapeOfPaper(x))", "all x y z.((TornPaper(x) & Paper(y) & Paper(z)) -> ChangesShape(x,y,z))", "all x y.((TearingPaper(x) & Paper(y)) -> ChangesShape(x,y))", "all x.(TorningPaper(x) -> ChangesShapeOfPaper(x))", "all x.(TearingPaper(x) -> ChangesShapeOfPaper(x))", "all x y.((TornPaper(x) & Paper(y)) -> ChangesShapeOf(x,y))", "all x y.((TrippingPaper(x) & Paper(y)) -> ChangesShape(x,y))", "all x.(TrippingPaper(x) -> ChangesShapeOfPaper(x))", "all x y z.((TornPaper(x) & Paper(y) & Shape(z)) -> Changes(x,y,z))", "all x y z.((Paper(x) & Tear(y) & Paper(z)) -> ChangesShape(x,z))", "all x.(TtearingPaper(x) -> ChangesShapeOfPaper(x))", "all x y z.((Paper(x) & Tear(y) & Paper(z)) -> ChangesShape(x,y,z))", "all x y.((TornPaper(x) & Paper(y)) -> ChangeShape(x,y))", "all x y.((Paper(x) & Tear(y)) -> ChangesShape(x,y))", "all x y z.((TornPaper(x) & Paper(y) & Shape(z)) -> ChangesShape(x,y,z))"]}
{"id": "entailmentbank_validation_763", "nl": "paper is a kind of object.", "fol": "", "prediction": ["all x.(Paper(x) -> Object(x))", "all x.(Paper(x) -> ArtOfObject(x))", "all x y.((Paper(x) & Object(y)) -> Object(x,y))", "all x y.((Paper(x) & Object(y)) -> Is(x,y))", "all x y.((Paper(x) & Object(y)) -> Object(x))", "all x.(Paper(x) -> IsObject(x))", "all x.(Paper(x) -> Object(x))", "all x.(Paper(x) -> (Object(x) & Object(x)))", "all x y.((Paper(x) & Object(y)) -> ArtOf(x,y))", "all x y.((Paper(x) & Object(y)) -> KindOf(x,y))", "all x y.((Paper(x) & Object(y)) -> SortOf(x,y))", "all x y.((Paper(x) & Object(y)) -> TypeOf(x,y))", "all x.(Paper(x) -> TypeOfObject(x))", "all x.(Paper(x) -> SortOfObject(x))", "exists x.(Paper(x) & Object(x))", "all x.((Paper(x) & Object(x)) -> Object(x))"]}
{"id": "entailmentbank_validation_764", "nl": "tearing paper changes the shape of an object.", "fol": "", "prediction": ["all x y.((TornPaper(x) & Object(y)) -> ChangesShape(x,y))", "all x y.((TearingPaper(x) & Object(y)) -> ChangesShape(x,y))", "all x y.((TorningPaper(x) & Object(y)) -> ChangesShape(x,y))", "all x y.((TornsPaper(x) & Object(y)) -> ChangesShape(x,y))", "all x y z.((TornPaper(x) & Object(y) & Shape(z)) -> Changes(x,y,z))", "all x y z.((TornPaper(x) & Object(y) & Object(z)) -> ChangesShape(x,y,z))", "all x.(TorningPaper(x) -> ChangesShapeOfObject(x))", "all x y.((TorningPaper(x) & Object(y)) -> ChangesShape(x,y))", "all x y.((TtearingPaper(x) & Object(y)) -> ChangesShape(x,y))", "all x y.((TearsPaper(x) & Object(y)) -> ChangesShape(x,y))", "all x.(TornPaper(x) -> ChangesShapeOfObject(x))", "all x y z.((TornPaper(x) & Object(y) & Shape(z)) -> ChangesShape(x,y,z))", "all x y.((TornPaper(x) & Object(y)) -> ChangesShapeOf(x,y))", "all x y.((TrippingPaper(x) & Object(y)) -> ChangesShape(x,y))", "all x y z.((TearingPaper(x) & Object(y) & Shape(z)) -> Changes(x,y,z))", "all x y.((TornPaper(x) & Object(y)) -> ChangeShape(x,y))"]}
{"id": "entailmentbank_validation_765", "nl": "sharpening a pencil and tearing paper both change the shape of the object.", "fol": "", "prediction": ["all x y.((Pencil(x) & Paper(y)) -> (Sharpening(x,y) & Torning(x,y)))", "all x y.((Pencil(x) & Paper(y)) -> (Sharpening(x,y) & Tearing(x,y)))", "all x y.((Pencil(x) & Paper(y)) -> (Sharpening(x,y) & Tears(x,y)))", "all x y.((Pencil(x) & Paper(y)) -> (Sharpening(x,y) & Torn(x,y)))", "all x y.((Pencil(x) & Paper(y)) -> (Sharpening(x) & Torning(x,y)))", "all x y.((Pencil(x) & Paper(y)) -> (Sharpening(x,y) & Torning(x,y)))", "all x y.((Pencil(x) & Paper(y)) -> (Sharpening(x,y) | Torning(x,y)))", "all x y.((Pencil(x) & Paper(y)) -> (Sharpening(x) & Torn(x,y)))", "all x y.((Pencil(x) & Paper(y)) -> (Sharpening(x,y) | Torning(x,y)))", "all x y z.((Sharpening(x) & Pencil(y) & Paper(z)) -> (ChangesShape(x,y) | ChangesShape(x,z)))", "all x y z.((Sharpening(x) & Pencil(y) & Paper(z)) -> (ChangesShape(x,y,z) & ChangesShape(x,z)))", "all x y z.((Sharpening(x) & Pencil(y) & Paper(z)) -> (ChangesShape(x,y,z) & ChangesShape(y,z)))", "all x y z.((Pencil(x) & Paper(y) & Sharpening(x,y) & Tears(x,z)) -> ChangesShapeOfObject(x))", "all x y z.((Pencil(x) & Paper(y) & Sharpening(x,y) & Torn(x,z)) -> ChangesShapeOfObject(x))", "all x y.((Pencil(x) & Paper(y)) -> (Sharpening(x) & Tears(x,y)))", "all x y.((Pencil(x) & Paper(y)) -> (Sharpening(x) & Tearing(x,y)))"]}
{"id": "entailmentbank_validation_766", "nl": "shape is a property of the appearance of an object.", "fol": "", "prediction": ["all x y.((Shape(x) & Object(y)) -> PropertyOfAppearance(x,y))", "all x y.((Shape(x) & Object(y)) -> AppearanceProperty(x,y))", "all x y z.((Shape(x) & Object(y) & Appearance(z)) -> PropertyOf(x,y,z))", "all x.(Shape(x) -> PropertyOfAppearance(x))", "all x.(Shape(x) -> PropertyOfAppearanceOfObject(x))", "all x y.((Shape(x) & Object(y)) -> PropertiesOfAppearance(x,y))", "all x y.((Shape(x) & Appearance(y)) -> PropertyOf(x,y))", "all x y z.((Shape(x) & Appearance(y) & Object(z)) -> PropertyOf(x,y,z))", "all x y.((Shape(x) & Object(y)) -> Appearance(x,y))", "all x y z.((Shape(x) & Object(y) & Appearance(z)) -> PropertiesOf(x,y,z))", "all x.(Shape(x) -> AppearanceOfObject(x))", "all x y.((Shape(x) & Object(y) & Appearance(x,y)) -> PropertyOf(x,y))", "all x y z.((Shape(x) & Object(y) & Appearance(z)) -> PropertyOfAppearance(x,y,z))", "all x y.((Shape(x) & Object(y)) -> (PropertyOfAppearance(x,y)))", "all x y.((Shape(x) & Object(y)) -> AffectsAppearance(x,y))", "all x y z.((Shape(x) & Appearance(y) & Object(z)) -> PropertyOfAppearance(x,y,z))"]}
{"id": "entailmentbank_validation_767", "nl": "sharpening a pencil and tearing paper both change the appearance of the object.", "fol": "", "prediction": ["all x y.((Pencil(x) & Paper(y)) -> (Sharpening(x,y) & Tears(x,y)))", "all x y.((Pencil(x) & Paper(y)) -> (Sharpening(x,y) & Torn(x,y)))", "all x y.((Pencil(x) & Paper(y)) -> (Sharpening(x,y) & Tearing(x,y)))", "all x y.((Pencil(x) & Paper(y)) -> (Sharpening(x,y) & Torning(x,y)))", "all x y.((Pencil(x) & Paper(y)) -> (Sharpening(x) & Torn(x,y)))", "all x y.((Pencil(x) & Paper(y)) -> (Sharpening(x) & Tears(x,y)))", "all x y.((Pencil(x) & Paper(y)) -> (Sharpening(x,y) | Torning(x,y)))", "all x y.((Pencil(x) & Paper(y)) -> (Sharpening(x,y) & Torning(x,y)))", "all x y.((Pencil(x) & Paper(y)) -> (Sharpening(x) & Torning(x,y)))", "all x y.((Pencil(x) & Paper(y)) -> (Sharpening(x) & Tearing(x,y)))", "all x y z.((Pencil(x) & Paper(y) & Sharpening(x,y) & Tears(x,z)) -> ChangesAppearance(x))", "all x y z.((Pencil(x) & Paper(y) & Sharpening(x,y) & Torn(x,z)) -> ChangesAppearance(x))", "all x y z.((Sharpening(x) & Pencil(y) & Paper(z)) -> (ChangesAppearance(x,y) | ChangesAppearance(x,z)))", "all x y z.((Pencil(x) & Paper(y) & Sharpening(x,y) & Tears(x,z)) -> ChangesAppearance(x,y))", "all x y z.((Pencil(x) & Paper(y) & Sharpening(x,y) & Torn(x,z)) -> ChangesAppearance(x,y))", "all x y.((Pencil(x) & Paper(y)) -> (Sharpening(x,y) | Torning(x,y)))"]}
{"id": "entailmentbank_validation_768", "nl": "appearance is a kind of physical property.", "fol": "", "prediction": ["all x.(Appearance(x) -> PhysicalProperty(x))", "all x y.((Appearance(x) & PhysicalProperty(y)) -> PhysicalProperty(x,y))", "all x.(Appearance(x) -> PhysicalProperty(x))", "all x y.((Appearance(x) & PhysicalProperty(y)) -> PhysicalProperty(x))", "all x.((Appearance(x) & PhysicalProperty(x)) -> PhysicalProperty(x))", "all x.(Appears(x) -> PhysicalProperty(x))", "all x.exists y.(PhysicalProperty(x) & Appearance(y) & PhysicalProperty(x,y))", "all x y.((Appearance(x) & PhysicalProperty(y)) -> Physical(x))", "exists x.(Appearance(x) & PhysicalProperty(x))", "all x.(PhysicalProperty(x) -> Appearance(x))", "all x y.((Appearance(x) & PhysicalProperty(y)) -> Physical(x,y))", "all x.exists y.((Appearance(x) & PhysicalProperty(y)) -> PhysicalProperty(x,y))", "all x.exists y.(PhysicalProperty(x) & Appearance(y) & PhysicalProperty(x))", "all x.exists y.((Appearance(x) & PhysicalProperty(y)) -> PhysicalProperty(x))", "all x.exists y.(Appearance(x) & PhysicalProperty(y) & PhysicalProperty(x,y))", "all x y.((Appearance(x) & PhysicalProperty(x)) -> PhysicalProperty(y))"]}
{"id": "entailmentbank_validation_769", "nl": "sharpending a pencil and tearing paper both change the physical property of the object.", "fol": "", "prediction": ["all x y.((Pencil(x) & Paper(y)) -> (Sharpending(x,y) & Torning(x,y)))", "all x y.((Pencil(x) & Paper(y)) -> (Sharpending(x,y) & Torn(x,y)))", "all x y z.((Sharpending(x) & Pencil(y) & Paper(z)) -> (ChangesPhysicalProperty(x,y) & ChangesPhysicalProperty(x,z)))", "all x y z.((Sharpending(x) & Pencil(y) & Paper(z)) -> (ChangesPhysicalProperty(x,y,z) & ChangesPhysicalProperty(x,y,z)))", "all x y z.((Sharpending(x) & Pencil(y) & Paper(z)) -> (ChangesPhysicalProperty(x,y,z) & ChangesPhysicalProperty(x,z)))", "all x y.((Pencil(x) & Paper(y)) -> (Sharpending(x,y) & Torning(x,y)))", "all x y z.((Sharpending(x) & Pencil(y) & Paper(z)) -> (ChangesPhysicalProperty(x,y,z) & ChangesPhysicalProperty(y,z)))", "all x y z.((Sharpending(x) & Pencil(y) & Paper(z)) -> (ChangesPhysicalProperty(x,y,z) & ChangesPhysicalProperty(x,y)))", "all x y z.((Sharpending(x) & Pencil(y) & Paper(z)) -> (ChangePhysicalProperty(x,y) & ChangePhysicalProperty(x,z)))", "all x.((Sharpending(x) & TornPaper(x)) -> (ChangesPhysicalProperty(x) & ChangesPhysicalProperty(x)))", "all x y z.((Sharpending(x) & Pencil(y) & Paper(z)) -> (ChangesPhysicalProperty(x,y) | ChangesPhysicalProperty(x,z)))", "all x y.((Pencil(x) & Paper(y)) -> (Sharpending(x,y) & Tearing(x,y)))", "all x y z.((Sharpending(x) & Pencil(y) & Paper(z)) -> (ChangesPhysicalProperty(x,y) & ChangesPhysicalProperty(y,z)))", "all x y z.((Sharpending(x) & Pencil(y) & Paper(z)) -> (ChangePhysicalProperty(x,y,z) & ChangePhysicalProperty(y,z)))", "all x y z.((Sharpending(x) & Pencil(y) & Paper(z)) -> (ChangePhysicalProperty(x,y,z) & ChangePhysicalProperty(x,z)))", "all x y z.((Sharpending(x) & Pencil(y) & Paper(z)) -> (ChangePhysicalProperty(x,y,z) & ChangePhysicalProperty(x,y,z)))"]}
{"id": "entailmentbank_validation_770", "nl": "if something undergoes a physical change then the physical properties of that something will change.", "fol": "", "prediction": ["all x.((PropertiesChange(x) & UndergoesPhysicalChange(x)) -> PhysicalPropertiesChange(x))", "all x.((Properties(x) & UndergoesPhysicalChange(x)) -> PhysicalPropertiesChange(x))", "all x.(UndergoesPhysicalChange(x) -> PhysicalPropertiesChange(x))", "all x.((Something(x) & UndergoesPhysicalChange(x)) -> PhysicalPropertiesChange(x))", "all x y.((Properties(x) & PhysicalChange(y) & Undergoes(x,y)) -> PhysicalPropertiesChange(x,y))", "all x.((UndergoesPhysicalChange(x) & PhysicalPropertiesChange(x)) -> PhysicalPropertiesChange(x))", "all x.((SubjectsPhysicalChange(x) & PhysicalPropertiesChange(x)) -> PhysicalPropertiesChange(x))", "all x y.((SubjectsPhysicalChange(x) & PhysicalProperties(y)) -> PhysicalPropertiesChange(x,y))", "all x y.((PhysicalProperties(x) & UndergoesPhysicalChange(x)) -> PhysicalPropertiesChange(y))", "all x.((Change(x) & UndergoesPhysicalChange(x)) -> PhysicalPropertiesChange(x))", "all x.((PhysicalChange(x) & UndergoesChange(x)) -> PhysicalPropertiesChange(x))", "all x y.((UndergoesPhysicalChange(x) & Something(y)) -> PhysicalPropertiesChange(x,y))", "all x y.((UndergoesPhysicalChange(x) & PhysicalProperties(y)) -> PhysicalPropertiesChange(x,y))", "all x y.((SubjectsPhysicalChange(x) & Something(y)) -> PhysicalPropertiesChange(x,y))", "all x.((SubjectsPhysicalChange(x) & PhysicalPropertiesChange(x)) -> Change(x))", "all x.((UndergoesPhysicalChange(x) & PhysicalPropertiesChange(x)) -> Change(x))"]}
{"id": "entailmentbank_validation_771", "nl": "pencil and paper underwent a physical change.", "fol": "", "prediction": ["all x y.((Pencil(x) & Paper(y)) -> UnderwentPhysicalChange(x,y))", "all x.((Pencil(x) & Paper(x)) -> UnderwentPhysicalChange(x))", "all x y z.((Pencil(x) & Paper(y) & PhysicalChange(z)) -> UnderwentChange(x,y,z))", "all x.((Pencil(x) & Paper(x)) -> PhysicalChange(x))", "all x.((Pencil(x) | Paper(x)) -> UnderwentPhysicalChange(x))", "all x y.((Pencil(x) & Paper(y)) -> UnderwentPhysicalChange(x))", "all x.((Pencil(x) | Paper(x)) -> PhysicalChange(x))", "all x y.((Pencil(x) & Paper(y)) -> PhysicalChange(x,y))", "all x y z.((Pencil(x) & Paper(y) & PhysicalChange(z)) -> Underwent(x,y,z))", "all x y z.((Pencil(x) & Paper(y) & PhysicalChange(z)) -> UnderwentChange(x,z))", "all x y.((Pencil(x) & Paper(y)) -> PhysicalChange(x))", "all x y z.((Pencil(x) & Paper(y) & PhysicalChange(z)) -> UnderwentChange(x,y))", "all x y z.((Pencil(x) & Paper(y) & PhysicalChange(z)) -> UnderwentPhysicalChange(x,y,z))", "all x y z.((Pencil(x) & Paper(y) & Change(z)) -> UnderwentPhysicalChange(x,y,z))", "all x y.((Pencil(x) & Paper(y)) -> UndergoesPhysicalChange(x,y))", "all x y z.((Pencil(x) & Paper(y) & PhysicalChange(z)) -> Underwent(x,z))"]}
{"id": "entailmentbank_validation_772", "nl": "heat means temperature increases.", "fol": "", "prediction": ["all x.(Heat(x) -> TemperatureIncrease(x))", "all x y.((Heat(x) & Temperature(y)) -> Increases(x,y))", "all x.(Heat(x) -> IncreasesTemperature(x))", "all x.(Heat(x) -> TemperatureIncreases(x))", "all x.(Heat(x) -> MeansTemperatureIncreases(x))", "all x y.((Heat(x) & Temperature(y)) -> Increase(x,y))", "all x.(Heat(x) -> MeansTemperatureIncrease(x))", "all x.(Heat(x) -> MeansTemperature(x))", "all x y.((Heat(x) & Temperature(y)) -> Increased(x,y))", "all x.(Heat(x) -> IncreasedTemperature(x))", "all x y.((Heat(x) & Temperature(y)) -> TemperatureIncrease(x,y))", "all x.(Heat(x) -> HeatIncrease(x))", "all x.(Heat(x) -> Temperature(x))", "all x.(Heat(x) -> TemperatureAccroissement(x))", "all x.(Heat(x) -> Heat(x))", "all x y.((Heat(x) & Temperature(y)) -> Heat(x,y))"]}
{"id": "entailmentbank_validation_773", "nl": "a solid is heated.", "fol": "", "prediction": ["all x.(Solid(x) -> Heated(x))", "all x.(Solid(x) -> Heated(x))", "all x.((Solid(x) & Heats(x)) -> Heats(x))", "all x.(Solid(x) -> Heats(x))", "all x.((Solid(x) & Heated(x)) -> Heats(x))", "all x.(Solid(x) -> Heatened(x))", "all x.((Solid(x) & Heated(x)) -> Heats(x))", "all x.(Solid(x) -> Heater(x))", "all x y.((Solid(x) & Solid(y)) -> Heats(x,y))", "all x.((Solid(x) & Heated(x)) -> Heated(x))", "all x.((Solid(x) & Heated(x)) -> Heater(x))", "all x y.((Solid(x) & Solid(y)) -> Heated(x))", "all x y.((Solid(x) & Solid(y)) -> Heated(x,y))", "all x.((Solid(x) & Heatened(x)) -> Heats(x))", "all x.((Solid(x) & Heats(x)) -> Heated(x))", "all x.((Solid(x) & Heater(x)) -> Heats(x))"]}
{"id": "entailmentbank_validation_774", "nl": "the temperature of the solid increases.", "fol": "", "prediction": ["all x y.((Solid(x) & Solid(y)) -> IncreasesTemperature(x,y))", "all x.((Solid(x) & Temperature(x)) -> Increases(x))", "all x y.((Solid(x) & Solid(y)) -> TemperatureIncreases(x,y))", "all x y.((Solid(x) & Temperature(y)) -> Increases(x,y))", "all x.((Solid(x) & IncreasesTemperature(x)) -> IncreasesTemperature(x))", "all x y.((Solid(x) & Solid(y)) -> TemperatureIncrease(x,y))", "all x y z.((Solid(x) & Temperature(y) & Solid(z)) -> Increases(x,y,z))", "all x y.((Solid(x) & Solid(y)) -> IncreasedTemperature(x,y))", "all x y z.((Solid(x) & Temperature(y) & Solid(z)) -> Increases(y,z))", "all x y.((Standard(x) & Solid(y)) -> IncreasesTemperature(x,y))", "all x.((Solid(x) & Temperature(x,y)) -> Increases(x,y))", "all x.((Solid(x) & Temperature(x,y)) -> Increases(y))", "all x.((Solid(x) & TemperatureIncreases(x)) -> Increases(x))", "all x.((Solid(x) & Temperature(x,Solid)) -> Increases(x))", "all x.(Solid(x) -> IncreasesTemperature(x))", "all x.((Solid(x) & Temperature(x,y)) -> Increases(x))"]}
{"id": "entailmentbank_validation_775", "nl": "a solid is a kind of substance.", "fol": "", "prediction": ["all x.(Solid(x) -> Substance(x))", "all x.(Solid(x) -> Substance(x))", "all x.(Solid(x) -> KindOfSubstance(x))", "all x.(Solid(x) -> SortOfSubstance(x))", "all x.(Solid(x) -> TypeOfSubstance(x))", "all x y.((Solid(x) & Substance(y)) -> SortOf(x,y))", "all x.(Solid(x) -> Material(x))", "all x.(Solid(x) -> (Substance(x) & HasSubstance(x)))", "all x y.((Solid(x) & Substance(y)) -> KindOf(x,y))", "all x.(Solid(x) -> (Substance(x) & Substance(x)))", "all x.(Solid(x) -> ArtOfSubstance(x))", "all x y.((Solid(x) & Substance(y)) -> TypeOf(x,y))", "all x y.((Solid(x) & Substance(y)) -> Is(x,y))", "all x.(Solid(x) -> (Substance(x) | Substance(x)))", "all x.(Solid(x) -> (Substance(x) & Contains(x)))", "all x.(Solid(x) -> FormOfSubstance(x))"]}
{"id": "entailmentbank_validation_776", "nl": "the temperature of the solid substance increases.", "fol": "", "prediction": ["all x y.((SolidSubstance(x) & SolidSubstance(y)) -> IncreasesTemperature(x,y))", "all x y.((SolidSubstance(x) & Temperature(y)) -> Increases(x,y))", "all x.((SolidSubstance(x) & TemperatureIncreases(x)) -> Increases(x))", "all x.((SolidSubstance(x) & IncreasesTemperature(x)) -> IncreasesTemperature(x))", "all x.((SolidSubstance(x) & Temperature(x)) -> Increases(x))", "all x.((SolidSubstance(x) & IncreasedTemperature(x)) -> IncreasedTemperature(x))", "all x y.((SolidSubstance(x) & SolidSubstance(y)) -> TemperatureIncreases(x,y))", "all x.((SolidSubstance(x) & TemperatureIncreases(x)) -> TemperatureIncreases(x))", "all x.((SolidSubstance(x) & TemperatureIncrease(x)) -> Increases(x))", "all x y z.((SolidSubstance(x) & Temperature(y) & SolidSubstance(z)) -> Increases(y,z))", "all x y.((SolidSubstance(x) & SolidSubstance(y)) -> IncreasedTemperature(x,y))", "all x.((SolidSubstance(x) & TemperatureIncrease(x)) -> TemperatureIncrease(x))", "all x y.((SolidSubstance(x) & SolidSubstance(y)) -> TemperatureIncrease(x,y))", "all x y z.((SolidSubstance(x) & Temperature(y) & SolidSubstance(z)) -> Increases(x,y,z))", "all x.((SolidSubstance(x) & TemperatureIncrease(x)) -> Increase(x))", "all x y.((SolidSubstance(x) & Temperature(y)) -> Increases(y))"]}
{"id": "entailmentbank_validation_777", "nl": "as the temperature of a substance increases, the molecules in that substance will move faster.", "fol": "", "prediction": ["all x.((Substance(x) & TemperatureIncrease(x)) -> MoleculesMoveFaster(x))", "all x y.((Substance(x) & TemperatureIncrease(x,y)) -> MoleculesMoveFaster(x,y))", "all x y.((Substance(x) & Temperature(y) & Increases(x,y)) -> MoleculesMoveFaster(x,y))", "all x y.((Substance(x) & TemperatureIncrease(x)) -> MoleculesMoveFaster(y))", "all x y.((Substance(x) & Temperature(y) & Increases(x,y)) -> MoleculesMoveFaster(x,y))", "all x y.((Substance(x) & TemperatureIncrease(x,y)) -> MoleculesMoveFaster(x,y))", "all x.((Substance(x) & IncreasesTemperature(x)) -> MovesFaster(x))", "all x y.((Substance(x) & Temperature(y) & Increases(y)) -> MoleculesMoveFaster(x,y))", "all x y.((Substance(x) & Temperature(y) & Increases(x,y)) -> MoleculesMoveFaster(x))", "all x y.((Substance(x) & Temperature(y) & Increases(y,x)) -> MoleculesMoveFaster(x,y))", "all x y z.((Substance(x) & Temperature(y) & Molecule(z) & Increases(y,x)) -> MovesFaster(z,x))", "all x y.((Substance(x) & Temperature(y) & Increases(x,y)) -> MoleculesMoveFaster(x))", "all x y.((Substance(x) & Temperature(y) & Increases(y,x)) -> MoleculesMoveFaster(x))", "all x y.((Substance(x) & IncreasedTemperature(x)) -> MoveFaster(y))", "all x y z.((Substance(x) & Temperature(y) & Molecules(z) & Increases(y)) -> MovesFaster(z))", "all x y z.((Substance(x) & Temperature(y) & Molecule(z) & Increases(y)) -> MovesFaster(z))"]}
{"id": "entailmentbank_validation_778", "nl": "the molecules in the solid substance moves faster.", "fol": "", "prediction": ["all x y.((Molecule(x) & SolidSubstance(y)) -> MovesFaster(x,y))", "all x.((Molecules(x) & SolidSubstance(x)) -> MovesFaster(x))", "all x.((Molecule(x) & SolidSubstance(x)) -> MovesFaster(x))", "all x y z.((Molecule(x) & SolidSubstance(y) & SolidSubstance(z)) -> MovesFaster(x,y,z))", "all x y.((Molecule(x) & SolidSubstance(y) & MovesFaster(x,y)) -> MovesFaster(x,y))", "all x y.((Molecules(x) & SolidSubstance(y)) -> MovesFaster(x,y))", "all x y z.((Molecule(x) & SolidSubstance(y) & Molecule(z)) -> MovesFaster(x,y,z))", "all x.((Moleculars(x) & SolidSubstance(x)) -> MovesFaster(x))", "all x y.((Molecular(x) & SolidSubstance(y)) -> MovesFaster(x,y))", "all x y z.((Molecule(x) & SolidSubstance(y) & SolidSubstance(z) & MovesFaster(x,y,z)) -> MovesFaster(x,y,z))", "all x y z.((Molecule(x) & SolidSubstance(y) & SolidSubstance(z)) -> MovesFaster(x,z))", "all x.(Molecules(x) -> MovesFaster(x))", "all x.(Molecule(x) -> MovesFaster(x))", "all x y z.((Molecule(x) & SolidSubstance(y) & SolidSubstance(z)) -> MovesFaster(x,y))", "all x y z.((Molecule(x) & SolidSubstance(y) & SolidSubstance(z) & MovesFaster(x,y)) -> MovesFaster(x,z))", "all x.(MoleculesInSolidSubstance(x) -> MovesFaster(x))"]}
{"id": "entailmentbank_validation_779", "nl": "faster means an increase / higher in speed.", "fol": "", "prediction": ["all x.(Fast(x) -> (IncreaseSpeed(x) | HigherSpeed(x)))", "all x.(Faster(x) -> (IncreaseSpeed(x) | HigherSpeed(x)))", "all x y.((Speed(x) & Speed(y)) -> (Increase(x,y) | Higher(x,y)))", "all x.(Faster(x) -> (IncreaseInSpeed(x) | HigherInSpeed(x)))", "all x y.((Fast(x) & Speed(y)) -> (Increase(x,y) | Higher(x,y)))", "all x.(Faster(x) -> (IncreaseInSpeed(x) & HigherInSpeed(x)))", "all x.(Faster(x) -> IncreaseInSpeed(x))", "all x.(Faster(x) -> (IncreaseSpeed(x) & HigherSpeed(x)))", "all x.(Faster(x) -> (IncreasesSpeed(x) | HigherSpeed(x)))", "all x.(Faster(x) -> IncreasedSpeed(x))", "all x.(Faster(x) -> IncreasesSpeed(x))", "all x.(Faster(x) -> (Increase(x) | HigherSpeed(x)))", "all x.(Fast(x) -> (IncreaseSpeed(x) & HigherSpeed(x)))", "all x.(Faster(x) -> (Increase(x) & HigherSpeed(x)))", "all x.(Faster(x) -> (IncreasesSpeed(x) & HigherSpeed(x)))", "all x.(Faster(x) -> (IncreaseSpeed(x) | HigherSpeed(x)))"]}
{"id": "entailmentbank_validation_780", "nl": "the molecules in the solid substance increases in speed.", "fol": "", "prediction": ["all x y.((Molecule(x) & SolidSubstance(y)) -> IncreasesSpeed(x,y))", "all x.((Molecules(x) & SolidSubstance(x)) -> IncreasesSpeed(x))", "all x y.((Molecule(x) & SolidSubstance(y) & IncreasesSpeed(x,y)) -> IncreasesSpeed(x,y))", "all x.((Molecule(x) & SolidSubstance(x)) -> IncreasesSpeed(x))", "all x y z.((Molecule(x) & SolidSubstance(y) & SolidSubstance(z)) -> IncreasesSpeed(x,y,z))", "all x y.((Molecules(x) & SolidSubstance(y)) -> IncreasesSpeed(x,y))", "all x.((MoleculesInSolidSubstance(x) & IncreasesSpeed(x)) -> IncreasesSpeed(x))", "all x y.((Molecule(x) & SolidSubstance(y)) -> IncreasesSpeedIn(x,y))", "all x.((Moleculars(x) & SolidSubstance(x)) -> IncreasesSpeed(x))", "all x y.((Molecule(x) & SolidSubstance(y)) -> IncreasedSpeed(x,y))", "all x y z.((Molecule(x) & SolidSubstance(y) & SolidSubstance(z) & IncreasesSpeed(x,y)) -> IncreasesSpeed(x,z))", "all x y z.((Molecule(x) & SolidSubstance(y) & Molecule(z)) -> IncreasesSpeed(x,y,z))", "all x.(MoleculesInSolidSubstance(x) -> IncreasesSpeed(x))", "all x y z.((Molecule(x) & SolidSubstance(y) & SolidSubstance(z)) -> IncreasesSpeed(x,y))", "all x y.((Molecular(x) & SolidSubstance(y)) -> IncreasesSpeed(x,y))", "all x.((MoleculesInSolidSubstance(x)) -> IncreasesSpeed(x))"]}
{"id": "entailmentbank_validation_781", "nl": "proton is a kind of subatomic particles.", "fol": "", "prediction": ["all x.(Proton(x) -> SubatomicParticle(x))", "all x.(Proton(x) -> SubatomicParticles(x))", "all x y.((Proton(x) & SubatomicParticle(y)) -> SubatomicParticle(x,y))", "all x.(Proton(x) -> (SubatomicParticle(x) & SubatomicParticle(x)))", "all x.(Proton(x) -> SubatomicParticle(x))", "all x y.((Proton(x) & SubatomicParticle(y)) -> SubatomicParticle(x))", "all x.(Proton(x) -> SubatomicParticles(x))", "all x.(Proton(x) -> (SubatomicParticles(x) & SubatomicParticles(x)))", "all x y.((Proton(x) & SubatomicParticle(y)) -> Subatomic(x,y))", "all x.(Proton(x) -> (SubatomicParticles(x)))", "all x.(Proton(x) -> (SubatomicParticle(x) | SubatomicParticle(x)))", "all x y.((Proton(x) & SubatomicParticle(y)) -> IsSubatomic(x,y))", "all x y.((Proton(x) & SubatomicParticle(y)) -> Subatomic(x))", "all x.(Proton(x) -> SubatomicParticipants(x))", "all x.(Proton(x) -> (SubatomicParticles(x) & -SubatomicParticles(x)))", "all x y.((Proton(x) & SubatomicParticle(y)) -> Is(x,y))"]}
{"id": "entailmentbank_validation_782", "nl": "neutrons are a kind of subatomic particle.", "fol": "", "prediction": ["all x.(Neutron(x) -> SubatomicParticle(x))", "all x y.((Neutron(x) & SubatomicParticle(y)) -> SubatomicParticle(x,y))", "all x y.((Neutron(x) & SubatomicParticle(y)) -> SubatomicParticle(x))", "all x.(Nitrogen(x) -> SubatomicParticle(x))", "all x.(Neutron(x) -> SubatomicParticipation(x))", "all x.(Neutron(x) -> SubatomicParticle(x))", "all x.(Neutron(x) -> (SubatomicParticle(x) & SubatomicParticle(x)))", "all x.((Neutron(x) & SubatomicParticle(x)) -> SubatomicParticle(x))", "all x y.((Neutron(x) & SubatomicParticle(y)) -> Subatomic(x))", "all x y.((Neutron(x) & SubatomicParticle(y)) -> Subatomic(x,y))", "all x y.((Neutron(x) & SubatomicParticle(y)) -> (SubatomicParticle(x) & SubatomicParticle(y)))", "all x.(Nucleon(x) -> SubatomicParticle(x))", "all x y.((Neutron(x) & SubatomicParticle(y)) -> (SubatomicParticle(x) & SubatomicParticle(x)))", "all x.(Neutron(x) -> (SubatomicParticle(x) | SubatomicParticle(x)))", "all x.(Netron(x) -> SubatomicParticle(x))", "all x.(Nucleus(x) -> SubatomicParticle(x))"]}
{"id": "entailmentbank_validation_783", "nl": "atomic mass is determined by the sum of protons and neutrons numbers in an atom.", "fol": "", "prediction": ["all x y z.((AtomicMass(x) & SumOfProtonsAndNeutrons(y) & Atom(z)) -> DeterminedBy(x,y,z))", "all x y z.((AtomicMass(x) & Protons(y) & Neutrons(z)) -> DeterminedBySum(x,y,z))", "all x y.((AtomicMass(x) & Atom(y) & SumOfProtonsAndNeutrons(x,y)) -> DeterminedBy(x,y))", "all x y.((AtomicMass(x) & Atom(y)) -> DeterminedBySumOfProtonsAndNeutrons(x,y))", "all x y.((AtomicMass(x) & Atom(y)) -> SumOfProtonsAndNeutrons(x,y))", "all x y z.((AtomicMass(x) & Protons(y) & Neutrons(z)) -> DeterminedBy(x,y,z))", "all x y z.((AtomicMass(x) & ProtonsAndNeutrons(y) & Atom(z)) -> DeterminedBySum(x,y,z))", "all x y.((AtomicMass(x) & Protons(y) & Neutrons(y)) -> DeterminedBySum(x,y))", "all x y z.((AtomicMass(x) & Proton(y) & Neutron(z)) -> DeterminedBySum(x,y,z))", "all x y.((AtomicMass(x) & SumOfProtonsAndNeutrons(y)) -> DeterminedBy(x,y))", "all x y z.((AtomicMass(x) & Protons(y) & Neutrons(z)) -> DeterminedBySum(x,y,z))", "all x y z.((AtomicMass(x) & Protons(y) & Neutrons(z)) -> DeterminedBySumInAtom(x,y,z))", "all x y z.((AtomicMass(x) & ProtonsAndNeutrons(y) & Atom(z)) -> DeterminedBy(x,y,z))", "all x.(AtomicMass(x) -> DeterminedBySumOfProtonsAndNeutrons(x))", "all x.((AtomicMass(x) & SumOfProtonsAndNeutrons(x)) -> DeterminedBy(x,y))", "all x y z.((AtomicMass(x) & SumOfProtonsAndNeutrons(y) & Atom(z)) -> DeterminedBySum(x,y,z))"]}
{"id": "entailmentbank_validation_784", "nl": "atomic mass is determined by the sum of protons and neutrons particle numbers.", "fol": "", "prediction": ["all x y z.((AtomicMass(x) & Protons(y) & Neutrons(z)) -> DeterminedBySum(x,y,z))", "all x y.((AtomicMass(x) & Protons(y) & Neutrons(y)) -> DeterminedBySum(x,y))", "all x.((AtomicMass(x) & SumOfProtonsAndNeutrons(x)) -> DeterminedByParticleNumbers(x))", "all x.(AtomicMass(x) -> (DeterminedBySumOfProtons(x) & DeterminedBySumOfNeutrons(x)))", "all x y.((AtomicMass(x) & Protons(y) & Neutrons(z)) -> DeterminedBySum(x,y,z))", "all x.((AtomicMass(x) & SumOfProtons(x) & SumOfNeutrons(x)) -> DeterminedByParticleNumbers(x))", "all x y.((AtomicMass(x) & SumOfProtonsAndNeutrons(y)) -> DeterminedBy(x,y))", "all x.((AtomicMass(x) & SumOfProtonsAndNeutrons(x)) -> DeterminedBySum(x))", "all x.(AtomicMass(x) -> DeterminedBySumOfProtonsAndNeutrons(x))", "all x.(AtomicMass(x) -> (SumOfProtons(x) & SumOfNeutrons(x)))", "all x y z.((AtomicMass(x) & Protons(y) & Neutrons(z)) -> DeterminedBySumParticleNumbers(x,y,z))", "all x.((AtomicMass(x) & SumOfProtons(x) & SumOfNeutrons(x)) -> DeterminedBySum(x))", "all x y.((AtomicMass(x) & Protons(y) & Neutrons(y)) -> DeterminedBySumParticleNumbers(x,y))", "all x y z.((AtomicMass(x) & Protons(y) & Neutrons(z)) -> DeterminedBySum(x,y,z))", "all x y.((AtomicMass(x) & SumOfProtons(y) & SumOfNeutrons(x,y)) -> DeterminedBy(x,y))", "all x y z.((AtomicMass(x) & Protons(y) & Neutrons(z)) -> DeterminedBy(x,y,z))"]}
{"id": "entailmentbank_validation_785", "nl": "a proton has a positive 1 electric charge.", "fol": "", "prediction": ["all x.(Proton(x) -> PositiveElectricCharge(x,1))", "all x y.((Proton(x) & ElectricCharge(y)) -> Positive(x,y))", "all x.(Proton(x) -> Positive1ElectricCharge(x))", "all x.(Proton(x) -> Positive(x,1))", "all x.(Proton(x) -> HasPositiveElectricCharge(x,1))", "all x.(Proton(x) -> HasPositive1ElectricCharge(x))", "all x.(Proton(x) -> PositiveElectricCharge(x,1))", "all x.(Proton(x) -> PositiveElectricCharge(x))", "all x y.((Proton(x) & ElectricCharge(y) & Positive(x,y)) -> Positive(x,y))", "all x.(Proton(x) -> PositiveOneElectricCharge(x))", "all x.(Proton(x) -> PositivePositiveElectricCharge(x,1))", "all x.(Proton(x) -> PositiveCurrent(x,1))", "all x.(Proton(x) -> HasPositive(x,1))", "all x y.((Proton(x) & ElectricCharge(y) & Positive(x,y)) -> Has(x,y))", "all x.(Proton(x) -> PositiveII ElectricCharge(x))", "all x.(Proton(x) -> PositiveEnergyCharge(x,1))"]}
{"id": "entailmentbank_validation_786", "nl": "a electron has a negative -1 electric charge.", "fol": "", "prediction": ["all x.(Electron(x) -> NegativeElectricCharge(x,1))", "all x y.((Electron(x) & ElectricCharge(y)) -> Negative(x,y))", "all x.(Electron(x) -> Negative(x,1))", "all x.(Electron(x) -> HasNegativeElectricCharge(x,1))", "all x.(Electron(x) -> NegativeElectricCharge(x))", "all x.(Electron(x) -> NegativeElectricCharge(x,1).)", "all x.(Electron(x) -> NegativeEnergyCharge(x,1))", "all x y.((Electron(x) & ElectricCharge(y) & Negative(x,y)) -> ElectricCharge(x,y))", "all x.(Electron(x) -> Negative-1ElectricCharge(x))", "all x y.((Electron(x) & ElectricCharge(y) & Negative(x,y)) -> Negative(x,y))", "all x.(Electron(x) -> NegativeElectricalCharge(x,1))", "all x.(Electron(x) -> NegativeCurrent(x,1))", "all x y.((Electron(x) & ElectricCharge(y) & Negative(x,y)) -> Has(x,y))", "all x.(Electron(x) -> NegativeElectricCharge(x,1,2))", "all x y.((Electron(x) & ElectricCharge(y) & Negative(x,y)) -> Positive(x,y))", "all x.(Electron(x) -> NegativeElectricCharge(x,0))"]}
{"id": "entailmentbank_validation_787", "nl": "equal numbers of protons and electrons result in a neutral 0 electric charge.", "fol": "", "prediction": ["all x.((EqualNumbersOfProtons(x) & EqualNumbersOfElectrons(x)) -> Neutral0ElectricCharge(x))", "all x.((EqualNumbersOfProtons(x) & EqualNumbersOfElectrons(x)) -> NeutralElectricCharge(x))", "all x y.((Proton(x) & Electron(y) & EqualNumbers(x,y)) -> Neutral0ElectricCharge(x))", "all x.((EqualNumbersOfProtons(x) & EqualNumbersOfElectrons(x)) -> NeutralElectricCharge(x,0))", "all x.(EqualNumbersOfProtonsAndElectrons(x) -> Neutral0ElectricCharge(x))", "all x.((Proton(x) & Electron(x)) -> Neutral(x))", "all x.((Proton(x) & Electron(x)) -> Neutral0ElectricCharge(x))", "all x y z.((Proton(x) & Electron(y) & ElectricCharge(z) & Equal(x,y,z)) -> Neutral(x,z))", "all x y.((Proton(x) & Electron(y) & EqualNumbers(x,y)) -> NeutralElectricCharge(x,y))", "all x y z.((Proton(x) & Electron(y) & ElectricCharge(z)) -> (EqualNumbers(x,y,z) & Neutral(x,z)))", "all x.(EqualNumbersOfProtonsAndElectrons(x) -> NeutralElectricCharge(x))", "all x y z.((Proton(x) & Electron(y) & ElectricCharge(z) & Equal(x,y)) -> Neutral(x,z))", "all x y z.((Proton(x) & Electron(y) & ElectricCharge(z) & EqualNumbers(x,y,z)) -> Neutral(x,z))", "all x y z.((Proton(x) & Electron(y) & ElectricCharge(z)) -> (EqualNumbers(x,y) & Neutral(x,z)))", "all x y.((Proton(x) & Electron(y) & Equal(x,y)) -> Neutral0ElectricCharge(x))", "all x.((Proton(x) & Electron(x) & EqualNumbers(x)) -> Neutral0ElectricCharge(x))"]}
{"id": "entailmentbank_validation_788", "nl": "a neutron has a neutral electric charge.", "fol": "", "prediction": ["all x.(Neutron(x) -> HasNeutralElectricCharge(x))", "all x.(Neutron(x) -> NeutralElectricCharge(x))", "all x y.((Neutron(x) & ElectricCharge(y)) -> HasNeutral(x,y))", "all x y.((Neutron(x) & ElectricCharge(y)) -> Neutral(x,y))", "all x y.((Neutron(x) & ElectricCharge(y)) -> Neutral(x))", "all x.(Neutron(x) -> HasNeutralElectricCharge(x))", "all x.(Neutron(x) -> HasNeutralElectricalCharge(x))", "all x.(Neutron(x) -> NeutralElectricalCharge(x))", "all x.((Neutron(x) & NeutralElectricCharge(x)) -> Has(x,y))", "all x.((Neutron(x) & NeutralElectricCharge(x)) -> Has(x,neutral))", "all x.(Neutron(x) -> neutralElectricCharge(x))", "all x.(Nutriton(x) -> HasNeutralElectricCharge(x))", "all x.(Neutron(x) -> NeutralElectricCharge(x))", "all x.(Neutron(x) -> (NeutralElectricCharge(x)))", "all x.(Netron(x) -> HasNeutralElectricCharge(x))", "all x y.((Neutron(x) & ElectricCharge(y)) -> neutral(x,y))"]}
{"id": "entailmentbank_validation_789", "nl": "equal numbers of protons and electrons and any number of neutrons result in a neutral 0 electric charge.", "fol": "", "prediction": ["all x.((EqualNumbersOfProtons(x) & EqualNumbersOfElectrons(x) & AnyNumberOfNeutrons(x)) -> Neutral0ElectricCharge(x))", "all x.((EqualNumbersOfProtonsAndElectrons(x) & AnyNumberOfNeutrons(x)) -> Neutral0ElectricCharge(x))", "all x y.((EqualNumbersOfProtons(x) & EqualNumbersOfElectrons(x) & AnyNumberOfNeutrons(y)) -> Neutral0ElectricCharge(x))", "all x.((EqualNumbersOfProtons(x) & EqualNumbersOfElectrons(x) & AnyNumberOfNeutrons(x)) -> NeutralElectricCharge(x))", "all x.((EqualProtons(x) & EqualElectrons(x) & AnyNumberOfNeutrons(x)) -> Neutral0ElectricCharge(x))", "all x.((EqualNumbersOfProtons(x) & EqualNumbersOfElectrons(x) & EqualNumbersOfNeutrons(x)) -> Neutral0ElectricCharge(x))", "all x.((EqualNumbersOfProtons(x) & EqualNumbersOfElectrons(x) & AnyNumberOfNeutrons(x)) -> NeutralElectricCharge(x,0))", "all x.((EqualNumbersOfProtons(x) & EqualNumbersOfElectrons(x) & AnyNumberOfNeutrons(x)) -> Neutral(x))", "all x y.((EqualNumbersOfProtonsAndElectrons(x) & AnyNumberOfNeutrons(y)) -> Neutral0ElectricCharge(x))", "all x.((EqualNumbersOfProtons(x) & EqualNumbersOfElectrons(x) & AnyNumberOfNeutrons(x)) -> NeutralZeroElectricCharge(x))", "all x.((NumberOfProtons(x) & NumberOfElectrons(x) & AnyNumberOfNeutrons(x)) -> Neutral0ElectricCharge(x))", "all x y.((EqualNumbersOfProtons(x) & EqualNumbersOfElectrons(x) & AnyNumberOfNeutrons(y)) -> Neutral0ElectricCharge(y))", "all x y.((EqualNumbersOfProtons(x) & EqualNumbersOfElectrons(x) & AnyNumberOfNeutrons(y)) -> NeutralElectricCharge(x,y))", "all x y z.((Proton(x) & Electron(y) & Neutron(z)) -> (EqualNumbers(x,y) & EqualNumbers(x,z)))", "all x.((Proton(x) | Electron(x)) & AnyNumberOfNeutrons(x)) -> Neutral0ElectricCharge(x))", "all x y.((EqualNumbersOfProtons(x) & EqualNumbersOfElectrons(x) & AnyNumberOfNeutrons(y)) -> Neutral0ElectricCharge(x,y))"]}
{"id": "entailmentbank_validation_790", "nl": "an atom is made of protons / neutrons / electrons.", "fol": "", "prediction": ["all x.(Atom(x) -> (MadeOfProtons(x) | MadeOfNeutrons(x) | MadeOfElectrons(x)))", "all x.(Atom(x) -> (MadeOfProtons(x) & MadeOfNeutrons(x) & MadeOfElectrons(x)))", "all x.(Atom(x) -> (MadeOf(x,Protons) & MadeOf(x,Neutrons) & MadeOf(x,Electrons)))", "all x.(Atom(x) -> (MadeOf(x,Protons) | MadeOf(x,Neutrons) | MadeOf(x,Electrons)))", "all x.(Atom(x) -> (MadeOf(x,protons) & MadeOf(x,neutrons) & MadeOf(x,electrons)))", "all x.(Atom(x) -> (MadeOf(x,protons) | MadeOf(x,neutrons) | MadeOf(x,electrons)))", "all x.(Atom(x) -> (MadeOfProtons(x) | MadeOfNeutrons(x) | MadeOfElectrons(x)))", "all x.((Atom(x) & MadeOfProtons(x) & MadeOfNeutrons(x)) -> MadeOfElectrons(x))", "all x y z.((Atom(x) & Protons(y) & Neutrons(z)) -> MadeOf(x,y,z))", "all x.(Atom(x) -> (MadeOfProtons(x) & MadeOfNeutrons(x) & MadeOfElectrons(x)))", "all x.(Atom(x) -> (MadeOfProtons(x) & MadeOfNeutrons(x) & MadeOfElectrons(x)))", "all x.(Atom(x) -> (MadeOf(x,Protons) & MadeOf(x,Neutrons)))", "all x.(Atom(x) -> (MadeOfProtons(x) | MadeOfNeutrons(x) | MadeOfElectrons(x)))", "all x.(Atom(x) -> (MadeOfProtons(x) & MadeOfNeutrons(x)))", "all x.((Atom(x) & MadeOfProtons(x)) -> MadeOfNeutrons(x))", "all x y.((Atom(x) & Protons(y) & Neutrons(y)) -> MadeOf(x,y))"]}
{"id": "entailmentbank_validation_791", "nl": "if an atom has an equal number of protons and electrons, then the atom will have a neutral charge.", "fol": "", "prediction": ["all x.((Atom(x) & EqualProtons(x) & EqualElectrons(x)) -> NeutralCharge(x))", "all x.((Atom(x) & EqualNumberOfProtons(x) & EqualNumberOfElectrons(x)) -> NeutralCharge(x))", "all x.((Atom(x) & EqualNumberOfProtonsAndElectrons(x)) -> NeutralCharge(x))", "all x y.((Atom(x) & EqualProtons(x,y) & EqualElectrons(x,y)) -> NeutralCharge(x))", "all x y.((Atom(x) & EqualNumberOfProtons(x,y) & EqualNumberOfElectrons(x,y)) -> NeutralCharge(x))", "all x y.((Atom(x) & Atom(y) & EqualProtons(x,y) & EqualElectrons(x,y)) -> NeutralCharge(x))", "all x y.((Atom(x) & EqualProtons(x) & EqualElectrons(x)) -> NeutralCharge(y))", "all x y.((Atom(x) & Atom(y) & EqualProtons(x,y) & EqualElectrons(x,y)) -> NeutralCharge(y))", "all x.((Atom(x) & EqualProtonsAndElectrons(x)) -> NeutralCharge(x))", "all x y.((Atom(x) & Atom(y) & EqualProtons(x,y) & EqualElectrons(x,y)) -> NeutralCharge(x,y))", "all x.((Atom(x) & EqualProtons(x) & EqualElectrons(x)) -> HasNeutralCharge(x))", "all x.((Atom(x) & EqualNumberOfProtons(x) & EqualNumberOfElectrons(x)) -> HasNeutralCharge(x))", "all x y.((Atom(x) & EqualProtons(x) & EqualElectrons(x)) -> NeutralCharge(x))", "all x.(EqualNumberOfProtonsAndElectrons(x) -> NeutralCharge(x))", "all x y z.((Atom(x) & Protons(y) & Electrons(z) & Equal(x,y,z)) -> NeutralCharge(x))", "all x y.((Atom(x) & EqualProtons(x,y) & EqualElectrons(y)) -> NeutralCharge(x))"]}
{"id": "entailmentbank_validation_792", "nl": "an normal atom has a neutral electric charge.", "fol": "", "prediction": ["all x.((Atom(x) & Normal(x)) -> NeutralElectricCharge(x))", "all x.((Atom(x) & Normal(x)) -> HasNeutralElectricCharge(x))", "all x.(NormalAtom(x) -> HasNeutralElectricCharge(x))", "all x.(NormalAtom(x) -> NeutralElectricCharge(x))", "all x y.((NormalAtom(x) & NormalAtom(y)) -> HasNeutralElectricCharge(x,y))", "all x.((Atom(x) & Normal(x)) -> neutralElectricCharge(x))", "all x y.((Atom(x) & Normal(y)) -> HasNeutralElectricCharge(x,y))", "all x y.((NormalAtom(x) & NormalAtom(y)) -> NeutralElectricCharge(x,y))", "all x y.((Atom(x) & Normal(x)) -> HasNeutralElectricCharge(x,y))", "all x y.((NormalAtom(x) & NormalAtom(y)) -> NeutralElectricCharge(x))", "all x.((NormalAtom(x) & NeutralElectricCharge(x)) -> Has(x,y))", "all x.(Atom(x) -> HasNeutralElectricCharge(x))", "all x y.((Atom(x) & Normal(x)) -> HasNeutralElectricCharge(x))", "all x.((Atom(x) & Normal(x)) -> NeutralCharge(x))", "all x y.((NormalAtom(x) & NormalAtom(y)) -> HasNeutralElectricCharge(x))", "all x.((Atom(x) & Normal(x)) -> NeutralElectricalCharge(x))"]}
{"id": "entailmentbank_validation_793", "nl": "that atom has an equal number of protons and electrons.", "fol": "", "prediction": ["all x.(Atom(x) -> (EqualNumberOfProtons(x) & EqualNumberOfElectrons(x)))", "all x.(Atom(x) -> (EqualProtons(x) & EqualElectrons(x)))", "all x y.((Atom(x) & Atom(y)) -> (EqualNumberOfProtons(x,y) & EqualNumberOfElectrons(x,y)))", "all x.(Atom(x) -> (HasEqualProtons(x) & HasEqualElectrons(x)))", "all x.(Atom(x) -> (HasEqualNumberOfProtons(x) & HasEqualNumberOfElectrons(x)))", "all x y.((Atom(x) & Atom(y)) -> (EqualProtons(x,y) & EqualElectrons(x,y)))", "all x y.((Atom(x) & Atom(y)) -> (HasEqualProtons(x,y) & HasEqualElectrons(x,y)))", "all x.((Atom(x) & EqualProtons(x) & EqualElectrons(x)) -> Atom(x))", "all x.(Atom(x) -> (EqualNumberOfProtons(x) & EqualNumberOfElectrons(x)))", "all x y z.((Atom(x) & Protons(y) & Electrons(z)) -> EqualNumber(x,y,z))", "all x.((Atom(x) & EqualNumberOfProtons(x) & EqualNumberOfElectrons(x)) -> Atom(x))", "all x y.((Atom(x) & Protons(y) & Electrons(y)) -> EqualNumber(x,y))", "all x y.((Atom(x) & Protons(y) & Electrons(z)) -> EqualNumber(x,y,z))", "all x.((Atom(x) & EqualProtons(x) & EqualElectrons(x)) -> Atomic(x))", "all x.(Atom(x) -> (EqualProtons(x) & EqualElectrons(x)))", "all x.((Atom(x) & EqualNumberOfProtons(x) & EqualNumberOfElectrons(x)) -> Atomic(x))"]}
{"id": "entailmentbank_validation_794", "nl": "iron in contact with water and oxygen will rust.", "fol": "", "prediction": ["all x.((Iron(x) & InContactWithWater(x) & InContactWithOxygen(x)) -> Rust(x))", "all x.((Iron(x) & InContactWithWater(x) & InContactWithOxygen(x)) -> Rusts(x))", "all x.((Iron(x) & ContactsWater(x) & ContactsOxygen(x)) -> Rust(x))", "all x.((Iron(x) & Water(x) & Oxygen(x)) -> Rust(x))", "all x.((Iron(x) & ContactsWater(x) & ContactsOxygen(x)) -> Rusts(x))", "all x.((Iron(x) & ContactWithWater(x) & ContactWithOxygen(x)) -> Rust(x))", "all x.((Iron(x) & InWater(x) & InOxygen(x)) -> Rust(x))", "all x.((Iron(x) & InContactWithWater(x) & InContactWithOxygen(x)) -> WillRust(x))", "all x y.((Iron(x) & Water(y) & Oxygen(y)) -> Rust(x))", "all x.((Iron(x) & InContactWithWaterAndOxygen(x)) -> Rust(x))", "all x.((Iron(x) & Water(x) & Oxygen(x)) -> Rusts(x))", "all x y z.((Iron(x) & Water(y) & Oxygen(z) & InContactWith(x,y,z)) -> Rust(x))", "all x.((Iron(x) & inContactWithWater(x) & InContactWithOxygen(x)) -> Rust(x))", "all x.((IronInContactWithWater(x) & InContactWithOxygen(x)) -> Rust(x))", "all x y.((Iron(x) & Water(y) & Oxygen(z)) -> Rust(x))", "all x y.((Iron(x) & InContactWithWater(x) & InContactWithOxygen(x)) -> Rust(x))"]}
{"id": "entailmentbank_validation_795", "nl": "iron in contact with water and oxygen causes a chemical change.", "fol": "", "prediction": ["all x.((Iron(x) & InContactWithWater(x) & InContactWithOxygen(x)) -> ChemicalChange(x))", "all x.((Iron(x) & Water(x) & Oxygen(x)) -> ChemicalChange(x))", "all x.((Iron(x) & InContactWithWater(x) & InContactWithOxygen(x)) -> CausesChemicalChange(x))", "all x.((Iron(x) & ContactsWater(x) & ContactsOxygen(x)) -> ChemicalChange(x))", "all x.((Iron(x) & ContactsWater(x) & ContactsOxygen(x)) -> CausesChemicalChange(x))", "all x.((Iron(x) & Water(x) & Oxygen(x)) -> CausesChemicalChange(x))", "all x.((Iron(x) & ContactWithWater(x) & ContactWithOxygen(x)) -> ChemicalChange(x))", "all x y z.((Iron(x) & Water(y) & Oxygen(z) & InContact(x,y,z)) -> ChemicalChange(x))", "all x y z.((Iron(x) & Water(y) & Oxygen(z) & InContactWith(x,y,z)) -> ChemicalChange(x))", "all x.((Iron(x) & InContactWithWaterAndOxygen(x)) -> ChemicalChange(x))", "all x y.((Iron(x) & Water(y) & Oxygen(y)) -> CausesChemicalChange(x,y))", "all x y.((Iron(x) & Water(y) & Oxygen(y)) -> ChemicalChange(x,y))", "all x y.((Iron(x) & Water(y) & Oxygen(z)) -> ChemicalChange(x,y,z))", "all x y.((Iron(x) & Water(y) & Oxygen(y)) -> ChemicalChange(x))", "all x y.((Iron(x) & Water(y) & Oxygen(z)) -> CausesChemicalChange(x,y,z))", "all x.((Iron(x) & InWater(x) & InOxygen(x)) -> ChemicalChange(x))"]}
{"id": "entailmentbank_validation_796", "nl": "iron in contact with water and oxygen is an example of chemical reactions.", "fol": "", "prediction": ["all x.((Iron(x) & InContactWithWater(x) & InContactWithOxygen(x)) -> ChemicalReaction(x))", "all x.((Iron(x) & ContactsWater(x) & ContactsOxygen(x)) -> ChemicalReaction(x))", "all x.((Iron(x) & Water(x) & Oxygen(x)) -> ChemicalReaction(x))", "all x.((Iron(x) & ContactWithWater(x) & ContactWithOxygen(x)) -> ChemicalReaction(x))", "all x.((Iron(x) & InContactWithWaterAndOxygen(x)) -> ChemicalReaction(x))", "all x.((Iron(x) & InContactWithWater(x) & InContactWithOxygen(x)) -> ChemicalReactions(x))", "all x.((IronInContactWithWater(x) & InContactWithOxygen(x)) -> ChemicalReaction(x))", "all x y z.((Iron(x) & Water(y) & Oxygen(z) & InContactWith(x,y,z)) -> ChemicalReaction(x))", "all x y.((Iron(x) & Water(y) & Oxygen(y)) -> ChemicalReaction(x))", "all x.((IronInContact(x) & Water(x) & Oxygen(x)) -> ChemicalReaction(x))", "all x.((Iron(x) & inContactWithWater(x) & InContactWithOxygen(x)) -> ChemicalReaction(x))", "all x y.((Iron(x) & Water(y) & Oxygen(y)) -> ChemicalReaction(x,y))", "all x y z.((Iron(x) & Water(y) & Oxygen(z) & InContact(x,y,z)) -> ChemicalReaction(x))", "all x.((Iron(x) & ContactsWater(x) & ContactsOxygen(x)) -> ChemicalReactions(x))", "all x y.((Iron(x) & Water(y) & Oxygen(x)) -> ChemicalReaction(x))", "all x.((IronInContactWithWater(x) & Oxygen(x)) -> ChemicalReaction(x))"]}
{"id": "entailmentbank_validation_797", "nl": "alkaline earth metals are highly chemically reactive.", "fol": "", "prediction": ["all x.(AlkalineEarthMetal(x) -> HighlyChemicallyReactive(x))", "all x.(AlkalineEarthMetal(x) -> HighlyChemicallyReactive(x))", "all x.((AlkalineEarthMetal(x) & HighlyChemicallyReactive(x)) -> HighlyAlkalineMetal(x))", "all x.((AlkalineEarthMetal(x) & HighlyChemicallyReactive(x)) -> HighlyReactive(x))", "all x.(AlkalineEarthMetal(x) -> ChemicallyReactive(x))", "all x.((AlkalineEarthMetal(x) & HighlyChemicallyReactive(x)) -> HighlyChemicallyReactive(x))", "all x.((AlkalineEarthMetal(x) & HighlyChemicallyReactive(x)) -> HighlyAlkalineEarthMetal(x))", "all x.((AlkalineEarthMetal(x) & HighlyChemicallyReactive(x)) -> Highly(x))", "all x.((AlkalineEarthMetal(x) & HighlyChemicallyReactive(x)) -> HighlyAlkalineMetal(x))", "all x.((AlkalineEarthMetal(x) & HighlyChemicallyReactive(x)) -> HighlyAlkaline(x))", "all x.((AlkalineEarthMetal(x) & HighlyChemicallyReactive(x)) -> HighlyChemical(x))", "all x y.((AlkalineEarthMetal(x) & ChemicallyReactive(y)) -> Highly(x,y))", "all x.((AlkalineEarthMetal(x) & HighlyChemicallyReactive(x)) -> HighlyEarthMetal(x))", "all x.((AlkalineEarthMetal(x) & HighlyChemicallyReactive(x)) -> HighlyChemicalReactive(x))", "all x.((AlkalineEarthMetal(x) & ChemicallyReactive(x)) -> Highly(x))", "all x.((AlkalineEarthMetal(x) & HighlyChemicallyReactive(x)) -> HighlyReactive(x))"]}
{"id": "entailmentbank_validation_798", "nl": "elements from the same group in the periodic table are chemically reactive in a similar way.", "fol": "", "prediction": ["all x y.((Element(x) & Element(y) & SameGroup(x,y)) -> ChemicallyReactive(x,y))", "all x.((Elements(x) & SameGroup(x) & PeriodicTable(x)) -> ChemicallyReactive(x))", "all x y.((Element(x) & Element(y) & SameGroup(x,y)) -> ChemicallyReactive(x))", "all x.((Elements(x) & SameGroupInPeriodicTable(x)) -> ChemicallyReactive(x))", "all x y.((Element(x) & Element(y) & SameGroupInPeriodicTable(x,y)) -> ChemicallyReactive(x,y))", "all x.((Element(x) & SameGroup(x) & PeriodicTable(x)) -> ChemicallyReactive(x))", "all x.((Elements(x) & SameGroup(x) & PeriodicalTable(x)) -> ChemicallyReactive(x))", "all x y.((Element(x) & Element(y) & SameGroupInPeriodicTable(x,y)) -> ChemicallyReactive(x))", "all x.((Element(x) & SameGroupInPeriodicTable(x)) -> ChemicallyReactive(x))", "all x y.((Element(x) & Element(y) & SameGroup(x,y) & PeriodicTable(x)) -> ChemicallyReactive(x))", "all x y.((Element(x) & Element(y) & SameGroup(x,y)) -> ChemicallyReactiveInSameManner(x,y))", "all x.((Elements(x) & SameGroup(x) & PeriodicTable(x)) -> ChemicallyReactiveInSameManner(x))", "all x y.((Element(x) & Element(y) & SameGroup(x,y) & PeriodicTable(x)) -> ChemicallyReactive(x,y))", "all x.((Element(x) & SameGroup(x) & PeriodicalTable(x)) -> ChemicallyReactive(x))", "all x y.((Element(x) & Element(y) & SameGroupInPeriodicalTable(x,y)) -> ChemicallyReactive(x,y))", "all x y.((Element(x) & Element(y) & SameGroup(x,y) & PeriodicalTable(x)) -> ChemicallyReactive(x))"]}
{"id": "entailmentbank_validation_799", "nl": "elements that belong to alkaline earth metals are highly chemically reactive.", "fol": "", "prediction": ["all x.((Element(x) & AlkalineEarthMetal(x)) -> HighlyChemicallyReactive(x))", "all x.((Element(x) & AlkalineEarthMetal(x)) -> HighlyChemicallyReactive(x))", "all x.((Elements(x) & AlkalineEarthMetal(x)) -> HighlyChemicallyReactive(x))", "all x y.((Element(x) & AlkalineEarthMetal(y) & BelongsTo(x,y)) -> HighlyChemicallyReactive(x))", "all x y.((Element(x) & AlkalineEarthMetal(y)) -> HighlyChemicallyReactive(x))", "all x.((Elements(x) & AlkalineEarthMetal(x)) -> HighlyChemicallyReactive(x))", "all x.((Element(x) & AlkalineEarthMetal(x)) -> ChemicallyReactive(x))", "all x y.((Element(x) & AlkalineEarthMetal(y)) -> HighlyChemicallyReactive(x,y))", "all x.((Elements(x) & AlkalineEarthMetals(x)) -> HighlyChemicallyReactive(x))", "all x y.((Element(x) & AlkalineEarthMetal(y) & BelongsTo(x,y)) -> HighlyChemicallyReactive(x))", "all x.((Element(x) & BelongsToAlkalineEarthMetals(x)) -> HighlyChemicallyReactive(x))", "all x.((Element(x) & BelongsToAlkalineEarthMetal(x)) -> HighlyChemicallyReactive(x))", "all x y.((Element(x) & AlkalineEarthMetal(y)) -> HighlyChemicallyReactive(x))", "all x.((Element(x) & AlkalineEarthMetallic(x)) -> HighlyChemicallyReactive(x))", "all x.((Element(x) & AlkalineEarthMetals(x)) -> HighlyChemicallyReactive(x))", "all x y.((Element(x) & AlkalineEarthMetal(y)) -> HighlyChemicallyReactive(x,y))"]}
{"id": "entailmentbank_validation_800", "nl": "magnesium belongs to alkaline earth metal family, group 2 on the periodic table.", "fol": "", "prediction": ["all x.(Magnesium(x) -> (AlkalineEarthMetal(x) & Group2OnPeriodicTable(x)))", "all x.(Magnesium(x) -> (AlkalineEarthMetalFamily(x) & Group2OnPeriodicTable(x)))", "all x.(Magnesium(x) -> (AlphalineEarthMetal(x) & Group2OnPeriodicTable(x)))", "all x.(Magnesium(x) -> (AlphalineEarthMetalFamily(x) & Group2OnPeriodicTable(x)))", "all x.(Magnesium(x) -> (AlkalineEarthMetal(x) & Group2(x)))", "all x.(Magnesium(x) -> (AlkalineEarthMetal(x) & Group2OnPeriodicalTable(x)))", "all x.(Magnesium(x) -> (AlkalineEarthMetalFamily(x) & Group2OnPeriodicalTable(x)))", "all x.(Magnesium(x) -> (AlphalineEarthMetal(x) & Group2(x)))", "all x.(Magnesium(x) -> (AlphalineEarthMetal(x) & Group2OnPeriodicalTable(x)))", "all x.(Magnesium(x) -> AlkalineEarthMetalFamily(x))", "all x.(Magnesium(x) -> (AlkalineEarthMetalFamily(x) & Group2(x)))", "all x y.((Magnesium(x) & AlkalineEarthMetal(y)) -> Group2OnPeriodicTable(x,y))", "all x.(Magnesium(x) -> (AlphalineEarthMetalFamily(x) & Group2OnPeriodicalTable(x)))", "all x.(Magnesium(x) -> AlkalineEarthMetal(x))", "all x.(Magnesium(x) -> (AlphalineEarthMetalFamily(x) & Group2(x)))", "all x.(Magnesium(x) -> AlkalineEarthMetalFamily(x,2))"]}
{"id": "entailmentbank_validation_801", "nl": "magnesium is highly chemically reactive.", "fol": "", "prediction": ["all x.(Magnesium(x) -> HighlyChemicallyReactive(x))", "all x.(Magnesium(x) -> HighlyChemicallyReactive(x))", "all x.(Magnetic(x) -> HighlyChemicallyReactive(x))", "all x y.((Magnesium(x) & ChemicallyReactive(y)) -> Highly(x,y))", "all x.(Magnesium(x) -> ChemicallyReactive(x))", "all x.(Magnetic(x) -> HighlyChemicallyReactive(x))", "all x.(Melium(x) -> HighlyChemicallyReactive(x))", "all x.(Magnesium(x) -> HighlyChemicallyReactive(x))", "all x.(Magenta(x) -> HighlyChemicallyReactive(x))", "All x.(Magnesium(x) -> HighlyChemicallyReactive(x))", "all x y.((Magnesium(x) & ChemicallyReactive(y)) -> HighlyReactive(x,y))", "all x.(Magnesium(x) -> HighlyChemicallyReactive(x))", "all x.(Magnesium(x) -> HighlyChemicalReactive(x))", "all x y.((Magnesium(x) & ChemicallyReactive(x)) -> Highly(x,y))", "all x.(Magnesium(x) -> HighlyChemisticallyReactive(x))", "all x.(Magn\u00e9sium(x) -> HighlyChemicallyReactive(x))"]}
{"id": "entailmentbank_validation_802", "nl": "an element cannot be decomposed into two or more different substances by simple chemical methods.", "fol": "", "prediction": ["all x.(Element(x) -> -DecomposedBySimpleChemicalMethods(x))", "all x y.((Element(x) & Substance(y)) -> -DecomposedBySimpleChemicalMethods(x,y))", "all x.((Element(x) & -DecomposedBySimpleChemicalMethods(x)) -> -DecomposedBySimpleChemicalMethods(x))", "all x y.((Element(x) & Substance(y) & DecomposedBySimpleChemicalMethods(x,y)) -> -DecomposedBySimpleChemicalMethods(x,y))", "all x.(Element(x) -> -CanBeDecomposedBySimpleChemicalMethods(x))", "all x y.((Element(x) & Substance(y)) -> -CanBeDecomposedBySimpleChemicalMethods(x,y))", "all x y z.((Element(x) & Substance(y) & Substance(z)) -> -DecomposedBySimpleChemicalMethods(x,y,z))", "all x.((Element(x) & -DecomposedBySimpleChemicalMethods(x)) -> -DifferentSubstances(x))", "all x y.((Element(x) & Substance(y) & DecomposedBySimpleChemicalMethods(x,y)) -> -CanBeDecomposedBySimpleChemicalMethods(x,y))", "all x y.((Element(x) & Substance(y) & DecomposedBySimpleChemicalMethods(x)) -> -DecomposedBySimpleChemicalMethods(x,y))", "all x y z.((Element(x) & Substance(y) & Substance(z)) -> -CanBeDecomposedBySimpleChemicalMethods(x,y,z))", "all x.((Element(x) & -DecomposedBySimpleChemicalMethods(x)) -> -ComposedBySimpleChemicalMethods(x))", "all x y.((Element(x) & Substance(y) & DecomposedBySimpleChemicalMethods(x,y)) -> -DecomposedBySimpleChemicalMethods(x))", "all x.((Element(x) & -DecomposedBySimpleChemicalMethods(x)) -> -SimpleChemicalMethods(x))", "all x.((Element(x) & -DecomposedBySimpleChemicalMethods(x)) -> -(DifferentSubstances(x) & DecomposedBySimpleChemicalMethods(x)))", "all x y.((Element(x) & Substance(y) & DecomposedBySimpleChemicalMethods(x,y)) -> -(DecomposedBySimpleChemicalMethods(x,y)))"]}
{"id": "entailmentbank_validation_803", "nl": "sulfur cannot be decomposed into different substances by simple chemical methods.", "fol": "", "prediction": ["all x.(Sulfur(x) -> -DecomposedBySimpleChemicalMethods(x))", "all x.(Sulfur(x) -> -CanBeDecomposedBySimpleChemicalMethods(x))", "all x y.((Sulfur(x) & Substance(y)) -> -DecomposedBySimpleChemicalMethods(x,y))", "all x y.((Sulfur(x) & Substance(y)) -> -CanBeDecomposedBySimpleChemicalMethods(x,y))", "all x.(Sulfur(x) -> -(DecomposedBySimpleChemicalMethods(x) | DecomposedBySimpleChemicalMethods(x)))", "all x.(Sulfur(x) -> -(DecomposedBySimpleChemicalMethods(x) & DifferentSubstances(x)))", "all x y.((Sulfur(x) & Substance(y)) -> -CanBeDecomposedBySimpleChemicalMethods(x))", "all x y.((Sulfur(x) & Substance(y)) -> -DecomposedBySimpleChemicalMethods(x))", "all x.(Sulfur(x) -> -(DecomposedBySimpleChemicalMethods(x) & DecomposedBySimpleChemicalMethods(x)))", "all x y.((Sulfur(x) & Substance(y)) -> -CanBeDecomposed(x,y))", "all x y.((Sulfur(x) & Substance(y) & SimpleChemicalMethod(x)) -> -DecomposedBy(x,y))", "all x y z.((Sulfur(x) & Substance(y) & SimpleChemicalMethod(z)) -> -DecomposedBy(x,y,z))", "all x y.((Sulfur(x) & Substance(y) & SimpleChemicalMethods(x)) -> -DecomposedBy(x,y))", "all x.(Sulfur(x) -> -CanBeDecomposed(x))", "all x y z.((Sulfur(x) & Substance(y) & SimpleChemicalMethod(z)) -> -CanBeDecomposed(x,y,z))", "all x y.((Sulfur(x) & SimpleChemicalMethod(y)) -> -DecomposedBy(x,y))"]}
{"id": "entailmentbank_validation_804", "nl": "sulfur is a kind of element.", "fol": "", "prediction": ["all x.(Sulfur(x) -> Element(x))", "all x.(Sulfur(x) -> Elements(x))", "all x.(Sulfur(x) -> IsElement(x))", "all x y.((Sulfur(x) & Element(y)) -> Is(x,y))", "all x.(Sulfur(x) -> Element(x))", "all x.((Sulfur(x) & Element(x)) -> Element(x))", "all x.(Sulfur(x) -> KindOfElement(x))", "all x.((Sulfur(x) & Element(x)) -> Elements(x))", "all x y.((Sulfur(x) & Element(y)) -> KindOf(x,y))", "all x y.((Sulfur(x) & Element(y)) -> Element(x,y))", "all x.((Sulfur(x) & Element(x)) -> Is(x,y))", "all x y.((Sulfur(x) & Element(y)) -> SortOf(x,y))", "all x.(Sulfur(x) -> Elements(x))", "all x y.((Sulfur(x) & Element(y)) -> Elements(x))", "all x y.((Sulfur(x) & Element(y)) -> Elements(x,y))", "all x.(Sulfur(x) -> SortOfElement(x))"]}
{"id": "entailmentbank_validation_805", "nl": "iron is a kind of element.", "fol": "", "prediction": ["all x.(Iron(x) -> Element(x))", "all x.(Iron(x) -> Elements(x))", "all x.(Iron(x) -> IsElement(x))", "all x.(Iron(x) -> Element(x))", "all x.(Iron(x) -> KindOfElement(x))", "all x.(Element(x) -> Iron(x))", "all x y.((Iron(x) & Element(y)) -> Is(x,y))", "all x.(Iron(x) -> SortOfElement(x))", "all x y.((Iron(x) & Element(y)) -> KindOf(x,y))", "all x.(Iron(x) -> TypeOfElement(x))", "all x.((Iron(x) & Element(x)) -> Element(x))", "all x y.((Iron(x) & Element(y)) -> SortOf(x,y))", "all x y.((Iron(x) & Element(y)) -> Element(x,y))", "all x.((Iron(x) & Element(x)) -> KindOf(x))", "all x.(Iron(x) -> SpeciesOfElement(x))", "all x.(Iron(x) -> ArtOfElement(x))"]}
{"id": "entailmentbank_validation_806", "nl": "the chemical symbol for iron is fe.", "fol": "", "prediction": ["all x.((ChemicalSymbol(x) & Iron(x)) -> Fe(x))", "all x.((ChemicalSymbol(x) & Iron(x)) -> Fe(x))", "all x.((ChemicalSymbol(x) & ForIron(x)) -> Fe(x))", "all x y.((ChemicalSymbol(x) & Iron(y)) -> Fe(x))", "all x.(ChemicalSymbol(x) -> Iron(x))", "all x.((ChemicalSymbolForIron(x) & Fe(x)) -> ChemicalSymbolForIron(x))", "all x.(Iron(x) -> ChemicalSymbol(x))", "all x.(Iron(x) -> ChemicalSymbol(x,fe))", "all x y.((ChemicalSymbol(x) & Iron(y)) -> Fe(x,y))", "all x y.((ChemicalSymbol(x) & Iron(y)) -> (Fe(x) | Fe(x)))", "all x.(ChemicalSymbolForIron(x) -> Fe(x))", "all x y.((ChemicalSymbol(x) & Iron(y)) -> Fe(x))", "all x.((ChemicalSymbolForIron(x) & Iron(x)) -> Fe(x))", "all x.((ChemicalSymbol(x) & Iron(x)) -> fe(x))", "all x.(Fe(x) -> ChemicalSymbolForIron(x))", "all x.((ChemicalSymbolForIron(x) & Fe(x)) -> ChemicalSymbolForIron(x))"]}
{"id": "entailmentbank_validation_807", "nl": "fe is the chemical symbol for iron element.", "fol": "", "prediction": ["all x.(Fe(x) -> ChemicalSymbolForIronElement(x))", "all x y.((Fe(x) & IronElement(y)) -> ChemicalSymbol(x,y))", "all x.(Fe(x) -> ChemicalSymbol(x))", "all x.(Fe(x) -> ChemicalSymbolForIronElement(x))", "all x y.((Fe(x) & IronElement(y)) -> ChemicalSymbolFor(x,y))", "all x.(Fe(x) -> ChemicalSymbolForIronElement(x))", "(ChemicalSymbolForIronElement(fe) & ChemicalSymbolForIronElement(fe))", "all x.((Fe(x) & IronElement(x)) -> ChemicalSymbol(x))", "(ChemicalSymbol(fe) & IronElement(f))", "all x.(Fe(x) -> ChemicalSymbolForIron(x))", "(ChemicalSymbol(fe) & IronElement(fe))", "all x.(Fe(x) -> ChemicalSymbolForIronElement(x))", "all x y.((Fe(x) & IronElement(y)) -> ChemicalSymbol(x,y))", "all x.(Fe(x) -> ChemicalSymbolOfIronElement(x))", "all x y.((Fe(x) & IronElement(y)) -> ChemicalSymbol(x,y))", "(ChemicalSymbol(fe) & ForIronElement(fe))"]}
{"id": "entailmentbank_validation_808", "nl": "if a substance is made of one element, then the substance is called an element.", "fol": "", "prediction": ["all x.((Substance(x) & MadeOfOneElement(x)) -> Element(x))", "all x.((Substance(x) & MadeOfOneElement(x)) -> Elements(x))", "all x.((Substance(x) & MadeOfElement(x)) -> Element(x))", "all x.((Substance(x) & MadeOfElement(x)) -> Elements(x))", "all x y.((Substance(x) & Element(y) & MadeOf(x,y)) -> Element(x))", "all x.((Substance(x) & MakesOfOneElement(x)) -> Element(x))", "all x.((Substance(x) & MakesOfOneElement(x)) -> Elements(x))", "all x y.((Substance(x) & Element(y) & MadeOf(x,y)) -> Elements(x))", "all x y.((Substance(x) & Elements(y) & MadeOf(x,y)) -> Elements(x))", "all x.((Substance(x) & MadeOfAnElement(x)) -> Element(x))", "all x.((Substance(x) & MadeOfOneElement(x)) -> Substance(x))", "all x y.((Substance(x) & Elements(y) & MadeOf(x,y)) -> Element(x))", "all x.((Substance(x) & MadeOf(x,oneElement)) -> Element(x))", "all x.((Substance(x) & MakesOfElement(x)) -> Element(x))", "all x.(MadeOfOneElement(x) -> Element(x))", "all x.(MadeOfOneElement(x) -> Elements(x))"]}
{"id": "entailmentbank_validation_809", "nl": "oxygen gas is made of only oxygen element.", "fol": "", "prediction": ["all x.(OxygenGas(x) -> MadeOfOxygenElement(x))", "all x.(OxygenGas(x) -> MadeOfOfOxygenElement(x))", "all x.(OxygenGas(x) -> (MadeOfOxygenElement(x) & -MadeOfOxygenElement(x)))", "all x y.((OxygenGas(x) & OxygenElement(y)) -> MadeOf(x,y))", "all x.(OxygenGas(x) -> MadeOfOnlyOxygenElement(x))", "all x.(OxygenGas(x) -> MadeOfOxygenElement(x))", "all x.(OxygenGas(x) -> exists y.(OxygenElement(y) & MadeOf(x,y))))", "all x.(OxygenGas(x) -> MadeOf(x,OxygenElement))", "all x.(OxygenGas(x) -> (MadeOfOxygenElement(x) & MadeOfOxygenElement(x)))", "all x.(OxygenGas(x) -> exists y.(OxygenElement(y) & MadeOf(x,y)))", "all x.(OxygenGas(x) -> (OxygenElement(x) & MadeOf(x,Oxygen)))", "all x.(OxygenGas(x) -> (MadeOfOxygenElement(x) & ContainsOxygenElement(x)))", "all x.(OxygenGas(x) -> (MadeOfOxygenElement(x) | MadeOfOxygenElement(x)))", "all x.(OxygenGas(x) -> MadeOfOxygen(x))", "all x.(OxygenGas(x) -> MakesOfOxygenElement(x))", "all x.(OxygenGas(x) -> (MadeOfOxygenElement(x) & OnlyOxygenElement(x)))"]}
{"id": "entailmentbank_validation_810", "nl": "oxygen gas is an element.", "fol": "", "prediction": ["all x.(OxygenGas(x) -> Element(x))", "all x.(OxygenGas(x) -> Elements(x))", "all x y.((OxygenGas(x) & Element(y)) -> Is(x,y))", "all x y.((OxygenGas(x) & Element(y)) -> Element(x,y))", "all x.(OxygenGasElement(x) -> Element(x))", "all x y.((OxygenGas(x) & Element(y)) -> Element(x))", "All x.(OxygenGas(x) -> Element(x))", "all x.((OxygenGas(x) & Element(x)) -> Element(x))", "all x y.((OxygenGas(x) & Element(y)) -> IsElement(x,y))", "all x.(OxygenGasElement(x) -> Is(x,y))", "all x.(OxygenGas(x) -> Element(x))", "exists x.(OxygenGas(x) & Element(x))", "all x.((OxygenGas(x) & Element(x)) -> Is(x,y))", "all x.(OxygenGasElement(x) -> IsElement(x))", "all x.(OxygenGas(x) -> IsElement(x))", "all x.(OxygenGasElement(x) -> Elements(x))"]}
{"id": "entailmentbank_validation_811", "nl": "o2 is a chemical formula for oxygen gas.", "fol": "", "prediction": ["all x.(O2(x) -> ChemicalFormationForOxygenGas(x))", "all x.(O2(x) -> ChemicalFormationForOxygen(x))", "all x y.((O2(x) & OxygenGas(y)) -> ChemicalFormation(x,y))", "all x y.((O2(x) & OxygenGas(y)) -> ChemicalForm(x,y))", "all x.(O2(x) -> ChemicalFormation(x))", "all x.(O2(x) -> ChemicalForm(x))", "all x.(O2(x) -> (ChemicalFormation(x) & ForOxygenGas(x)))", "all x y.((O2(x) & OxygenGas(y)) -> ChemicalFormula(x,y))", "all x.(O2(x) -> ChemicalFormulaForOxygenGas(x))", "all x y.((O2(x) & OxygenGas(y)) -> ChemicalFormationFor(x,y))", "all x.(O2(x) -> ChemicalFormulaForOxygen(x))", "all x.(O2(x) -> (ChemicalFormation(x) & OxygenGas(x)))", "all x.(O2(x) -> ChemicalFormula(x))", "all x.((O2(x) & OxygenGas(x)) -> ChemicalFormation(x))", "all x.(O2(x) -> OxygenGasFormation(x))", "all x y.((O2(x) & Oxygen(y)) -> ChemicalFormation(x,y))"]}
{"id": "entailmentbank_validation_812", "nl": "o2 is an element.", "fol": "", "prediction": ["all x.(O2(x) -> Element(x))", "all x.(O2Element(x) -> Element(x))", "all x.(O2(x) -> Elements(x))", "all x.(O2Element(x) -> Elements(x))", "all x y.((O2Element(x) & Element(y)) -> Is(x,y))", "all x y.((O2(x) & Element(y)) -> Is(x,y))", "all x y.((O2Element(x) & Element(y)) -> Element(x))", "All x.(O2(x) -> Element(x))", "all x y.((O2Element(x) & Element(y)) -> Element(x,y))", "all x y.((O2(x) & Element(y)) -> Element(x,y))", "all x.(O2Element(x) -> Is(x))", "all x.(O2Element(x) -> IsElement(x))", "all x.(O2Element(x) -> Is(x,y))", "all x y.((O2(x) & Element(y)) -> Element(x))", "all x.((O2Element(x)) -> Element(x))", "all x.((O2(x) & Element(x)) -> Element(x))"]}
{"id": "entailmentbank_validation_813", "nl": "the chemical symbol for tellurium is te.", "fol": "", "prediction": ["all x.(Tellurium(x) -> ChemicalSymbol(x))", "all x.((ChemicalSymbol(x) & Tellurium(x)) -> Te(x))", "all x.(ChemicalSymbol(x) -> Tellurium(x))", "all x.(ChemicalSymbolForTellurium(x) -> Te(x))", "all x.(Te(x) -> ChemicalSymbolForTellurium(x))", "all x y.((ChemicalSymbol(x) & Tellurium(y)) -> Te(x))", "all x.(ChemicalSymbol(x) -> Te(x))", "all x y.((ChemicalSymbol(x) & Tellurium(y)) -> Te(x,y))", "all x y.((ChemicalSymbol(x) & Tellurium(y)) -> (Te(x) | Te(x)))", "all x y.((ChemicalSymbol(x) & Tellurium(y)) -> (Te(x) & ChemicalSymbol(x,y)))", "all x.(Tellurium(x) -> ChemicalSymbolTe(x))", "all x y.((ChemicalSymbol(x) & Tellurium(y)) -> (Te(x) & Contains(x,y)))", "all x y.((ChemicalSymbol(x) & Tellurium(y)) -> (Te(x) & Te(x)))", "all x y.((ChemicalSymbol(x) & Tellurium(y)) -> (Te(x,y)))", "all x y.((ChemicalSymbol(x) & Tellurium(y)) -> Te(x))", "all x.(ChemicalSymbol(x) & Tellurium(x))"]}
{"id": "entailmentbank_validation_814", "nl": "tellurium is a kind of metalloid.", "fol": "", "prediction": ["all x.(Tellurium(x) -> Metalloid(x))", "all x.(Tellurium(x) -> Metalloid(x))", "all x.(Tellurium(x) -> (Metalloid(x) & Metalloid(x)))", "all x y.((Tellurium(x) & Metalloid(y)) -> Is(x,y))", "all x y.((Tellurium(x) & Metalloid(y)) -> Metalloid(x))", "all x.(Teacherium(x) -> Metalloid(x))", "all x.(Tetrium(x) -> Metalloid(x))", "all x.(Tellurium(x) -> (Metalloid(x) & Metalloid(x)))", "all x y.((Tellurium(x) & Metalloid(y)) -> Contains(x,y))", "all x.(Tellurum(x) -> Metalloid(x))", "all x.(Tellurium(x) -> (Metalloid(x) & HasMetalloid(x)))", "exists x.(Tellurium(x) & Metalloid(x))", "all x.(Tellurium(x) -> (Metalloid(x) & -Metalloid(x)))", "all x y.((Tellurium(x) & Metalloid(y)) -> Has(x,y))", "all x.(Tellurium(x) -> (Metalloid(x) & Contains(x,y)))", "all x y.((Tellurium(x) & Metalloid(y)) -> -Metalloid(x))"]}
{"id": "entailmentbank_validation_815", "nl": "te is a kind of metalloid.", "fol": "", "prediction": ["all x.(Te(x) -> Metalloid(x))", "all x.((Te(x) & Metalloid(x)) -> Metalloid(x))", "all x y.((Te(x) & Metalloid(y)) -> Metalloid(x))", "exists x.(Te(x) & Metalloid(x))", "all x.(Te(x) -> Metalloid(x))", "all x.(Te(x) -> (Metalloid(x) & Metalloid(x)))", "all x y.((Te(x) & Metalloid(y)) -> Is(x,y))", "all x y.((Te(x) & Metalloid(y)) -> Metalloid(x,y))", "all x.((Te(x) & Metalloid(x)) -> -Metalloid(x))", "all x.((Te(x) & Metalloid(x)) -> Is(x,y))", "all x.((Te(x) & Metalloid(x)) -> HasMetalloid(x))", "all x y.((Te(x) & Metalloid(y)) -> Has(x,y))", "all x.(Te(x) -> (Metalloid(x)))", "all x y.((Te(x) & Metalloid(y)) -> -Metalloid(x))", "all x.(TE(x) -> Metalloid(x))", "all x.((Te(x) & Metalloid(x)) -> Is(x,Metalloid))"]}
{"id": "entailmentbank_validation_816", "nl": "antimony is a kind of metalloid.", "fol": "", "prediction": ["all x.(Antimony(x) -> Metalloid(x))", "all x.(Antimony(x) -> Metalloid(x))", "all x y.((Antimony(x) & Metalloid(y)) -> Metalloid(x))", "all x.(Antimony(x) -> (Metalloid(x) & Metalloid(x)))", "all x y.((Antimony(x) & Metalloid(y)) -> Is(x,y))", "all x y.((Antimony(x) & Metalloid(y)) -> (Metalloid(x) & Metalloid(y)))", "all x y.((Antimony(x) & Metalloid(y)) -> Metalloid(x,y))", "all x y z.((Antimony(x) & Metalloid(y) & Metalloid(z)) -> Metalloid(x))", "all x.(Antimony(x) -> (Metalloid(x) & Metalloid(x)))", "all x y z.((Antimony(x) & Metalloid(y) & Metalloid(z)) -> Metalloid(x,y,z))", "all x y z.((Antimony(x) & Metalloid(y) & Metalloid(z)) -> Is(x,y,z))", "all x.((Antimony(x) & Metalloid(x)) -> Metalloid(x))", "all x y.((Antimony(x) & Metalloid(y)) -> Has(x,y))", "all x.(Antimony(x) -> (Metalloid(x) & -Metalloid(x)))", "all x y.((Antimony(x) & Metalloid(y)) -> (Metalloid(x) & Metalloid(x)))", "all x.(Antimony(x) -> (Metalloid(x) & HasMetalloid(x)))"]}
{"id": "entailmentbank_validation_817", "nl": "the chemical symbol for antimony is sb.", "fol": "", "prediction": ["all x.(Antimony(x) -> ChemicalSymbol(x))", "all x.(Antimony(x) -> ChemicalSymbol(x,sb))", "all x.((ChemicalSymbol(x) & Antimony(x)) -> sb(x))", "all x.((ChemicalSymbol(x) & Antimony(x)) -> Sb(x))", "all x.(Antimony(x) -> ChemicalSymbol(x,Sb))", "all x y.((ChemicalSymbol(x) & Antimony(y)) -> (Sb(x) & Antimony(y)))", "all x y.((ChemicalSymbol(x) & Antimony(y)) -> (Sb(x) & ChemicalSymbol(x,y)))", "all x y.((ChemicalSymbol(x) & Antimony(y)) -> (Sb(x) | Sb(x)))", "all x y.((ChemicalSymbol(x) & Antimony(y)) -> (Sb(x)))", "all x.(Antimony(x) -> ChemicalSymbol(x,y))", "all x y.((ChemicalSymbol(x) & Antimony(y)) -> (Sb(x,y)))", "all x y.((ChemicalSymbol(x) & Antimony(y)) -> Sb(x))", "all x.((ChemicalSymbol(x) & Antimony(x)) -> (Sb(x)))", "all x y.((ChemicalSymbol(x) & Antimony(y)) -> (Sb(x) | -Sb(x)))", "all x y.((ChemicalSymbol(x) & Antimony(y)) -> (Sb(x) & Symbol(x,y)))", "all x y.((ChemicalSymbol(x) & Antimony(y)) -> Sb(x,y))"]}
{"id": "entailmentbank_validation_818", "nl": "sb is a kind of metalloid.", "fol": "", "prediction": ["all x.(Sb(x) -> Metalloid(x))", "all x.(Sb(x) -> Metalloid(x))", "all x.((Sb(x) & Metalloid(x)) -> Metalloid(x))", "all x y.((Sb(x) & Metalloid(y)) -> Metalloid(x))", "all x.(Sb(x) -> (Metalloid(x) & Metalloid(x)))", "all x.(SB(x) -> Metalloid(x))", "all x y.((Sb(x) & Metalloid(y)) -> Is(x,y))", "exists x.(Sb(x) & Metalloid(x))", "all x.(Sb(x) -> (Metalloid(x) & Metalloid(x)))", "all x.((Sb(x) & Metalloid(x)) -> -Metalloid(x))", "all x y.((Sb(x) & Metalloid(y)) -> Metalloid(x,y))", "all x y.((Sb(x) & Metalloid(y)) -> Has(x,y))", "all x.(Sb(x) -> (Metalloid(x) & -Metalloid(x)))", "all x y.((Sb(x) & Metalloid(y)) -> TypeOf(x,y))", "all x y.((Sb(x) & Metalloid(y)) -> -Metalloid(x))", "all x.((Sb(x) & Metalloid(x)) -> Is(x,y))"]}
{"id": "entailmentbank_validation_819", "nl": "sb and te are both metalloids.", "fol": "", "prediction": ["(Metalloid(sb) & Metalloid(te))", "all x.((Sb(x) | Tee(x)) -> Metalloid(x))", "all x.((Sb(x) & -Te(x)) -> Metalloid(x))", "all x.((Sb(x) | Te(x)) -> Metalloid(x))", "all x.((Sb(x) & Tee(x)) -> Metalloid(x))", "all x.((Sb(x) & Te(x)) -> Metalloid(x))", "all x y.((Sb(x) & Tee(y)) -> Metalloid(x))", "all x y.((Sb(x) & Te(y)) -> Metalloid(x))", "all x.(Metalloid(x) -> (Sb(x) | Te(x)))", "(Metalloids(sb) & Metalloids(te))", "(Metalloids(sb) & Metalloid(te))", "(Metalloid(Sb) & Metalloid(Te))", "all x.(Metalloid(x) -> (Sb(x) & Te(x)))", "((Sb(Sb) & -Te(Te)) -> Metalloid(s))", "((Sb(sb) & -Te(s)) -> Metalloid(s))", "all x.(Metalloid(x) -> (Sb(x) | Tee(x)))"]}
{"id": "entailmentbank_validation_820", "nl": "helium / neon / argon / krypton / xenon / radon belongs to noble gases family, group 18 on the periodic table.", "fol": "", "prediction": ["all x.((Helium(x) & Neon(x) & Argon(x) & Krypton(x) & Xenon(x) & Radon(x)) -> NobleGasesFamily(x))", "all x.((Helium(x) | Neon(x) | Argon(x) | Krypton(x) | Xenon(x) | Radon(x)) -> NobleGasesFamily(x))", "all x.((Helium(x) & Neon(x) & Argon(x) & Krypton(x) & Xenon(x) & Radon(x)) -> NobleGasFamily(x))", "all x.((Helium(x) | Neon(x) | Argon(x) | Krypton(x) | Xenon(x) | Radon(x)) -> NobleGasFamily(x))", "all x.((Helium(x) & Neon(x) & Argon(x) & Krypton(x) & Xenon(x) & Radon(x)) -> NobleGasesFamily(x,18))", "all x.((Helium(x) & Neon(x) & Argon(x) & Krypton(x) & Xenon(x) & Radon(x)) -> NobleGases(x))", "all x.((Helium(x) & Neon(x) & Argon(x) & Krypton(x) & Xenon(x)) -> NobleGasFamily(x))", "all x.((Helium(x) & Neon(x) & Argon(x) & Krypton(x) & Xenon(x)) -> NobleGasesFamily(x))", "all x.((Helium(x) & Neon(x) & Argon(x) & Krypton(x) & Xenon(x) & Radon(x)) -> NobleGasFamily(x,18))", "all x y z.((Helium(x) & Neon(y) & Argon(z) & Krypton(z) & Xenon(x) & Radon(x)) -> NobleGasesFamily(x,y,z))", "all x.((Hydro(x) & Neon(x) & Argon(x) & Krypton(x) & Xenon(x) & Radon(x)) -> NobleGasesFamily(x))", "all x.((Holeum(x) & Neon(x) & Argon(x) & Krypton(x) & Xenon(x) & Radon(x)) -> NobleGasesFamily(x))", "all x.((Helium(x) | Neon(x) | Argon(x) | Krypton(x) | Xenon(x) | Radon(x)) -> NobleGases(x))", "all x.((Helium(x) & Neon(x) & Argon(x) & Krypton(x) & Xenon(x) & Radon(x)) -> NobleGasesFamily(x))", "all x.((Helium(x) & Neon(x) & Argon(x) & Krypton(x) & Xenon(x)) -> NobleGases(x))", "all x y z.((Helium(x) & Neon(y) & Argon(z) & Krypton(x) & Xenon(x) & Radon(x)) -> NobleGasesFamily(x,y,z))"]}
{"id": "entailmentbank_validation_821", "nl": "elements in group 18 have complete outer electron shells on the periodic table of elements.", "fol": "", "prediction": ["all x.((Element(x) & Group18(x)) -> CompleteOuterElectronShells(x))", "all x.((ElementsInGroup18(x) & CompleteOuterElectronShells(x)) -> PeriodicTableOfElements(x))", "all x.((Element(x) & Group18(x)) -> CompleteOuterElectronShellsOnPeriodicTableOfElements(x))", "all x.((ElementsInGroup18(x) & CompleteOuterElectronShells(x)) -> PeriodicalTableOfElements(x))", "all x.((Element(x) & Group18(x)) -> CompleteOuterElectronShellsOnPeriodicalTableOfElements(x))", "all x.((Element(x) & Group18) & CompleteOuterElectronShells(x)) -> PeriodicTableOfElements(x))", "all x.((ElementsInGroup18(x) & CompleteOuterElectronShell(x)) -> PeriodicTableOfElements(x))", "all x.((Elements(x) & Group18(x)) -> CompleteOuterElectronShells(x))", "all x.((Element(x) & Group18) & CompleteOuterElectronShells(x)) -> PeriodicalTableOfElements(x))", "all x.((Element(x) & Group18(x)) -> CompleteOuterElectronShellsOnPeriodicTable(x))", "all x.((Element(x) & Group18(x)) -> CompleteOuterElectronShell(x))", "all x y.((Element(x) & Group18(y)) -> CompleteOuterElectronShells(x,y))", "all x.((Elements(x) & Group18(x)) -> CompleteOuterElectronShellsOnPeriodicTableOfElements(x))", "all x.((Element(x) & Group18(x)) -> (CompleteOuterElectronShells(x) & PeriodicTableOfElements(x)))", "all x y.((Element(x) & Group18(y)) -> CompleteOuterElectronShellsOnPeriodicTableOfElements(x,y))", "all x.((ElementsInGroup18(x) & CompleteOuterElectronShell(x)) -> PeriodicalTableOfElements(x))"]}
{"id": "entailmentbank_validation_822", "nl": "helium, neon, argon, krypton, xenon, and radon have complete outer electron shells.", "fol": "", "prediction": ["all x.((Helium(x) | Neon(x) | Argon(x) | Krypton(x) | Xenon(x) | Radon(x)) -> CompleteOuterElectronShells(x))", "all x.((Helium(x) | Neon(x) | Argon(x) | Krypton(x) | Xenon(x) | Radon(x))) -> CompleteOuterElectronShells(x))", "(CompleteOuterElectronShells(helium) & CompleteOuterElectronShells(neon) & CompleteOuterElectronShells(argon) & CompleteOuterElectronShells(krypton) & CompleteOuterElectronShells(xenon) & CompleteOuterElectronShells(radon))", "all x.((Helium(x) | Neon(x) | Argon(x) | Krypton(x) | Xenon(x) | Radon(x)) -> CompleteOuterElectronShell(x))", "all x.((Helium(x) | Neon(x) | Argon(x) | Krypton(x) | Xenon(x) | Radon(x))) -> CompleteOuterElectronShell(x))", "all x.((Helium(x) & Neon(x) & Argon(x) & Krypton(x) & Xenon(x) & Radon(x)) -> CompleteOuterElectronShells(x))", "all x.((Hydro(x) | Neon(x) | Argon(x) | Krypton(x) | Xenon(x) | Radon(x)) -> CompleteOuterElectronShells(x))", "all x.((Hydro(x) & Neon(x) & Argon(x) & Krypton(x) & Xenon(x) & Radon(x)) -> CompleteOuterElectronShells(x))", "all x.((Holium(x) | Neon(x) | Argon(x) | Krypton(x) | Xenon(x) | Radon(x)) -> CompleteOuterElectronShells(x))", "all x.((Hydro(x) | Neon(x) | Argon(x) | Krypton(x) | Xenon(x) | Radon(x))) -> CompleteOuterElectronShells(x))", "all x.((Helium(x) | Neo(x) | Argon(x) | Krypton(x) | Xenon(x) | Radon(x)) -> CompleteOuterElectronShells(x))", "all x.((Helium(x) & Neon(x) & Argon(x) & Krypton(x) & Xenon(x) & Radon(x)) -> CompleteOuterElectronShell(x))", "all x.((Helium(x) | Neon(x) | Argon(x) | Kraypton(x) | Xenon(x) | Radon(x)) -> CompleteOuterElectronShells(x))", "all x y.((Helium(x) & Neon(y) & Argon(y) & Krypton(y) & Xenon(y) & Radon(z)) -> CompleteOuterElectronShells(x))", "all x.((Holeum(x) | Neon(x) | Argon(x) | Krypton(x) | Xenon(x) | Radon(x)) -> CompleteOuterElectronShells(x))", "all x.((Helium(x) | Neon(x) | Argon(x) | Krypton(x) | xenon(x) | Radon(x)) -> CompleteOuterElectronShells(x))"]}
{"id": "entailmentbank_validation_823", "nl": "if the outermost electron shell of an atom is complete, then the element of those atoms will not react with other elements easily.", "fol": "", "prediction": ["all x y.((OutermostElectronShell(x) & Atom(y) & Complete(x,y)) -> -ReactsWithElementsEasily(x,y))", "all x y.((OutermostElectronShell(x) & Atom(y) & Complete(x,y)) -> -ReactsWithElements(x,y))", "all x y.((OutermostElectronShell(x) & Atom(y) & Complete(x)) -> -ReactsWithElementsEasily(x,y))", "all x.((OutermostElectronShell(x) & Complete(x)) -> -ReactsWithOtherElementsEasily(x))", "all x y.((OutermostElectronShell(x) & Atom(y) & Complete(x)) -> -ReactsWithElements(x,y))", "all x y.((OutermostElectronShell(x) & Atom(y) & Complete(x,y)) -> -ReactsWithElementsEasily(y,x))", "all x.((OutermostElectronShell(x) & Complete(x)) -> -ReactsWithElementsEasily(x))", "all x y.((OutermostElectronShell(x) & Atom(y) & Complete(x,y)) -> -ReactsWithElementsEasily(y))", "all x y.((OutermostElectronShell(x) & Atom(y) & Complete(x,y)) -> -ReactsWithOtherElementsEasily(x,y))", "all x y.((OutermostElectronShell(x) & Atom(y) & Complete(x)) -> -ReactsWithElementsEasily(y))", "all x y.((OutermostElectronShell(x) & Atom(y) & Complete(x)) -> -ReactsWithOtherElementsEasily(x,y))", "all x y.((OutermostElectronShell(x) & Atom(y) & Complete(x,y)) -> -ReactsWithOtherElements(x,y))", "all x y.((OutermostElectronShell(x) & Atom(y) & Complete(x,y)) -> -ReactsEasilyWithElements(x,y))", "all x y.((OutermostElectronShell(x) & Atom(y) & Complete(x,y)) -> -ReactsEasilyWithOtherElements(x,y))", "all x.((OutermostElectronShell(x) & Complete(x)) -> Element(x))", "all x y.((OutermostElectronShell(x) & Atom(y) & Complete(x)) -> -ReactsWithElementsEasily(y,x))"]}
{"id": "entailmentbank_validation_824", "nl": "helium, neon, argon, krypton, xenon, and radon will not react with other elements easily.", "fol": "", "prediction": ["all x.((Helium(x) | Neon(x) | Argon(x) | Krypton(x) | Xenon(x) | Radon(x))) -> -ReactsWithElementsEasily(x))", "all x.((Helium(x) | Neon(x) | Argon(x) | Krypton(x) | Xenon(x) | Radon(x))) -> -ReactsEasilyWithElements(x))", "all x.((Helium(x) | Neon(x) | Argon(x) | Krypton(x) | Xenon(x) | Radon(x)) -> -ReactsWithElementsEasily(x))", "all x.((Helium(x) & Neon(x) & Argon(x) & Krypton(x) & Xenon(x) & Radon(x)) -> -ReactsWithElementsEasily(x))", "all x.((Helium(x) | Neon(x) | Argon(x) | Krypton(x) | Xenon(x) | Radon(x))) -> -ReactsEasily(x))", "all x.((Helium(x) | Neon(x) | Argon(x) | Krypton(x) | Xenon(x) | Radon(x))) -> -ReactsEasilyWithOtherElements(x))", "all x.((Helium(x) | Neon(x) | Argon(x) | Krypton(x) | Xenon(x) | Radon(x))) -> -ReactsWithOtherElementsEasily(x))", "all x.((Hydro(x) | Neon(x) | Argon(x) | Krypton(x) | Xenon(x) | Radon(x))) -> -ReactsWithElementsEasily(x))", "all x.((Helium(x) | Neon(x) | Argon(x) | Krypton(x) | Xenon(x) | Radon(x))) -> -ReactsWithElements(x))", "all x.((Helium(x) | Neon(x) | Argon(x) | Krypton(x) | Xenon(x) | Radon(x)) -> -ReactsEasilyWithElements(x))", "all x y.((Helium(x) & Neon(y) & Argon(y) & Krypton(y) & Xenon(y) & Radon(y)) -> -ReactsWithElementsEasily(x,y))", "all x.((Helium(x) & Neon(x) & Argon(x) & Krypton(x) & Xenon(x) & Radon(x)) -> -ReactsEasilyWithElements(x))", "all x.((Hydro(x) & Neon(x) & Argon(x) & Krypton(x) & Xenon(x) & Radon(x)) -> -ReactsWithElementsEasily(x))", "all x y.((Helium(x) & Neon(y) & Argon(y) & Krypton(y) & Xenon(y) & Radon(z)) -> -ReactsWithElementsEasily(x,y,z))", "all x.((Helium(x) | Neon(x) | Argon(x) | Krypton(x) | Xenon(x) | Radon(x))) -> -ReactsWithElement(x))", "all x y.((Helium(x) & Neon(y) & Argon(y) & Krypton(y) & Xenon(y) & Radon(y)) -> -ReactsWithElementsEasily(x))"]}
{"id": "entailmentbank_validation_825", "nl": "water is a kind of substance.", "fol": "", "prediction": ["all x.(Water(x) -> Substance(x))", "all x.(Water(x) -> Substance(x))", "all x.((Water(x) & Substance(x)) -> Substance(x))", "all x y.((Water(x) & Substance(y)) -> Substance(x,y))", "all x y.((Water(x) & Substance(y)) -> SortOf(x,y))", "all x y.((Water(x) & Substance(y)) -> Is(x,y))", "all x y.((Water(x) & Substance(y)) -> Substance(x))", "all x y.((Water(x) & Substance(y)) -> KindOf(x,y))", "all x y.((Water(x) & Substance(y)) -> TypeOf(x,y))", "all x.(Water(x) -> TypeOfSubstance(x))", "all x.(Water(x) -> (Substance(x) & Substance(x)))", "all x.(Water(x) -> SortOfSubstance(x))", "all x.(Water(x) -> SpeciesOfSubstance(x))", "all x y.((Water(x) & Substance(y)) -> Like(x,y))", "all x.(Water(x) -> (Substance(x) | Substance(x)))", "all x.((Water(x) & Substance(x)) -> HasSubstance(x))"]}
{"id": "entailmentbank_validation_826", "nl": "boiling means matter / a substance changes from a liquid into a gas by increasing heat energy.", "fol": "", "prediction": ["all x y.((Boiling(x) & Substance(y)) -> (ChangesFromLiquidToGas(y,x) & IncreasesHeatEnergy(y,x)))", "all x y.((Boiling(x) & Substance(y)) -> (ChangesFromLiquidToGas(y) & IncreasesHeatEnergy(y)))", "all x.(BoilingMatter(x) -> (ChangesFromLiquidToGas(x) & IncreasesHeatEnergy(x)))", "all x y.((Boiling(x) & Substance(y)) -> (ChangesFromLiquidToGas(x,y) & IncreasesHeatEnergy(x,y)))", "all x y.((Boiling(x) & Substance(y)) -> (ChangesFromLiquidToGas(x,y) & IncreasesHeatEnergy(y)))", "all x y.((BoilingMatter(x) & Substance(y)) -> (ChangesFromLiquidToGas(y) & IncreasesHeatEnergy(y)))", "all x y.((BoilingMatter(x) & Substance(y)) -> (ChangesFromLiquidToGas(y,x) & IncreasesHeatEnergy(y,x)))", "all x y.((Boiling(x) & Substance(y)) -> (ChangesFromLiquidIntoGas(y,x) & IncreasesHeatEnergy(y,x)))", "all x y.((Boiling(x) & Substance(y)) -> (ChangesFromLiquidIntoGas(y) & IncreasesHeatEnergy(y)))", "all x y.((Boiling(x) & Substance(y)) -> (ChangesFromLiquidToGas(y,x) & IncreasesHeatEnergy(x)))", "all x y.((Boiling(x) & Substance(y)) -> (ChangesFromLiquidToGas(y) & IncreasesHeatEnergy(x,y)))", "all x y.((BoilingMatter(x) & Substance(y)) -> (ChangesFromLiquidToGas(x,y) & IncreasesHeatEnergy(y)))", "all x y.((Boiling(x) & Substance(y)) -> (ChangesFromLiquidIntoGas(x,y) & IncreasesHeatEnergy(x,y)))", "all x y.((Boiling(x) & Substance(y)) -> (ChangesFromLiquidToGas(x,y) & IncreasesHeatEnergy(x)))", "all x y.((Boiling(x) & Substance(y)) -> (ChangesFromLiquidIntoGas(x,y) & IncreasesHeatEnergy(y)))", "all x.(BoilingMatter(x) -> (ChangesFromLiquidIntoGas(x) & IncreasesHeatEnergy(x)))"]}
{"id": "entailmentbank_validation_827", "nl": "water boiling is when water changes from a liquid into a gas.", "fol": "", "prediction": ["all x.((Water(x) & Liquid(x) & Gas(x)) -> Boiling(x))", "all x.(WaterBoiling(x) -> WaterChangesFromLiquidToGas(x))", "all x.(WaterBoiling(x) -> (WaterChangesFromLiquidToGas(x)))", "all x.((Water(x) & WaterChangesFromLiquidToGas(x)) -> Boiling(x))", "all x y.((Water(x) & Liquid(y)) -> ChangesToGas(x,y))", "all x.(WaterBoiling(x) -> (WaterChangesFromLiquidToGas(x)))", "all x y.((Water(x) & Liquid(y) & Gas(z)) -> ChangesTo(x,y,z))", "all x.((WaterBoiling(x) & Liquid(x)) -> Gas(x))", "all x y z.((Water(x) & Liquid(y) & Gas(z)) -> ChangesTo(x,y,z))", "all x.((Water(x) & Liquid(x)) -> Gas(x))", "all x y.((Water(x) & Liquid(y) & Gas(z)) -> ChangesInto(x,y,z))", "all x.(WaterBoiling(x) -> WaterChangesFromLiquidToGas(x))", "all x y.((Water(x) & Liquid(y) & Gas(z)) -> ChangesFromTo(x,y,z))", "all x y z.((Water(x) & Liquid(y) & Gas(z)) -> ChangesFromTo(x,y,z))", "all x.(WaterBoiling(x) -> ChangesFromLiquidToGas(x))", "all x y.((Water(x) & Liquid(y) & Gas(y)) -> ChangesTo(x,y))"]}
{"id": "entailmentbank_validation_828", "nl": "water is in the gas state, called water vapor / steam, for temperatures above 100 c.", "fol": "", "prediction": ["all x.((Water(x) & GasState(x) & TemperatureAbove100C(x)) -> WaterVaporSteam(x))", "all x.((Water(x) & GasState(x)) -> (WaterVapor(x) | WaterSteam(x)))", "all x.((Water(x) & WaterVapor(x) & WaterSteam(x)) -> TemperatureAbove100C(x))", "all x.((Water(x) & GasState(x) & WaterVapor(x) & WaterSteam(x)) -> TemperatureAbove100C(x))", "all x.((Water(x) & GasState(x) & TemperaturesAbove100C(x)) -> WaterVaporSteam(x))", "all x.((Water(x) & GasState(x)) -> (WaterVapor(x) | WaterSteam(x)) & TemperaturesAbove100C(x)))", "all x.((Water(x) & GasState(x) & WaterVapor(x) & WaterSteam(x)) -> TemperaturesAbove100C(x))", "all x.((Water(x) & WaterVapor(x) & WaterSteam(x)) -> ForTemperaturesAbove100C(x))", "all x.(Water(x) -> (InGasState(x) & WaterVapor(x) & WaterSteam(x) & TemperaturesAbove100C(x)))", "all x.((Water(x) & GasState(x)) -> (WaterVapor(x) & WaterSteam(x)))", "all x.((Water(x) & Gas(x)) -> (WaterVapor(x) | WaterSteam(x)))", "all x.((Water(x) & GasState(x) & ForTemperaturesAbove100C(x)) -> WaterVaporSteam(x))", "all x.(Water(x) -> (InGasState(x) & WaterVapor(x) & WaterSteam(x) & TemperatureAbove100C(x)))", "all x.((Water(x) & GasState(x)) -> (WaterVapor(x) | WaterSteam(x)) & TemperatureAbove100C(x)))", "all x.((Water(x) & GasState(x)) -> (WaterVapor(x) | WaterSteam(x)) & ForTemperaturesAbove100C(x)))", "all x.((Water(x) & GasState(x)) -> (WaterVaporSteam(x) & TemperatureAbove100C(x)))"]}
{"id": "entailmentbank_validation_829", "nl": "water is in the liquid state, called liquid water, for temperatures between 0 c and 100 c.", "fol": "", "prediction": ["all x.((Water(x) & LiquidState(x) & TemperaturesBetween(x,0,100)) -> LiquidWater(x))", "all x.((Water(x) & LiquidState(x) & TemperaturesBetween(x,0) & TemperaturesBetween(x,100)) -> LiquidWater(x))", "all x.((Water(x) & LiquidState(x) & Temperature(x,0,100)) -> LiquidWater(x))", "all x.((Water(x) & LiquidState(x) & TemperatureBetween(x,0,100)) -> LiquidWater(x))", "all x.((Water(x) & LiquidState(x)) -> (TemperaturesBetween(x,0) & TemperaturesBetween(x,100)))", "all x.((Water(x) & LiquidState(x) & Temperature(x,0) & Temperature(x,100)) -> LiquidWater(x))", "all x.((Water(x) & LiquidState(x) & TemperaturesBetween0CAnd100C(x)) -> LiquidWater(x))", "all x.((Water(x) & LiquidState(x) & TemperaturesBetween0Cand100C(x)) -> LiquidWater(x))", "all x.((Water(x) & LiquidState(x)) -> (TemperatureBetween(x,0) & TemperatureBetween(x,100)))", "all x.((Water(x) & LiquidState(x)) -> TemperaturesBetween(x,0,100))", "all x.((Water(x) & LiquidState(x)) -> ForTemperaturesBetween(x,0,100))", "all x.((Water(x) & LiquidState(x)) -> (Temperature(x,0) & Temperature(x,100)))", "all x.((Water(x) & LiquidState(x)) -> (Temperature(x,0) | Temperature(x,100)))", "all x.((Water(x) & LiquidState(x)) -> (TemperaturesBetween(x,0,100)))", "all x.((Water(x) & LiquidState(x) & TemperaturesBetween(x,0) & TemperaturesBetween(x,100)) -> InLiquidState(x))", "all x.((Water(x) & LiquidState(x) & TemperaturesBetween(x,0) & TemperaturesBetween(x,100)) -> LiquidState(x))"]}
{"id": "entailmentbank_validation_830", "nl": "water boiling is when water changes from liquid water to water vapor.", "fol": "", "prediction": ["all x.((Water(x) & LiquidWater(x) & WaterVapor(x)) -> Boiling(x))", "all x.(WaterBoiling(x) -> WaterChangesFromLiquidWaterToWaterVapor(x))", "all x y.((Water(x) & LiquidWater(y) & WaterVapor(z)) -> ChangesTo(x,y,z))", "all x.(WaterBoiling(x) -> ChangesFromLiquidWaterToWaterVapor(x))", "all x.(WaterBoiling(x) -> WaterChangesFromLiquidWaterToWaterVapor(x))", "all x.(WaterBoiling(x) -> (WaterChangesFromLiquidWaterToWaterVapor(x)))", "all x y z.((Water(x) & LiquidWater(y) & WaterVapor(z)) -> ChangesTo(x,y,z))", "all x y.((Water(x) & LiquidWater(y) & WaterVapor(y)) -> ChangesTo(x,y))", "all x.(WaterBoiling(x) -> ChangesFromLiquidWaterToWaterVapor(x))", "all x.(WaterBoiling(x) -> ChangesLiquidWaterToWaterVapor(x))", "all x.(WaterBoiling(x) -> (WaterChangesFromLiquidWaterToWaterVapor(x)))", "all x.((Water(x) & ChangesFromLiquidWaterToWaterVapor(x)) -> Boiling(x))", "all x.((Water(x) & LiquidWater(x)) -> WaterVapor(x))", "all x y.((Water(x) & LiquidWater(y)) -> ChangesToWaterVapor(x,y))", "all x.((Water(x) & ChangesFromLiquidWaterToWaterVapor(x)) -> BoilingWater(x))", "all x.((Water(x) & ChangesLiquidWaterToWaterVapor(x)) -> BoilingWater(x))"]}
{"id": "entailmentbank_validation_831", "nl": "water boiling is when water changes from a liquid into a gas by increasing heat energy.", "fol": "", "prediction": ["all x.(WaterBoiling(x) -> (WaterChangesFromLiquidToGas(x) & IncreasesHeatEnergy(x)))", "all x.(WaterBoiling(x) -> (WaterChangesFromLiquidToGas(x) & IncreasesHeatEnergy(x)))", "all x.((Water(x) & Liquid(x) & Gas(x) & IncreasesHeatEnergy(x)) -> Boiling(x))", "all x.((WaterBoiling(x) & Liquid(x) & Gas(x)) -> IncreasesHeatEnergy(x))", "all x.(WaterBoiling(x) -> (WaterChangesFromLiquidToGasByIncreasingHeatEnergy(x)))", "all x.(WaterBoiling(x) -> (WaterChangesFromLiquidToGasByIncreasingHeatEnergy(x)))", "all x.((WaterBoiling(x) & Liquid(x) & Gas(x) & IncreasesHeatEnergy(x)) -> WaterChanges(x))", "all x.(WaterBoiling(x) -> (WaterChangesFromLiquidToGasByIncreasedHeatEnergy(x)))", "all x.(WaterBoiling(x) -> (WaterChangesFromLiquidToGasByIncreasingHeatEnergy(x)))", "all x y z.((Water(x) & Liquid(y) & Gas(z) & IncreasesHeatEnergy(x,y,z)) -> Boiling(x))", "all x.((Water(x) & Liquid(x) & Gas(x) & IncreasesHeatEnergy(x)) -> BoilingWater(x))", "all x y z.((Water(x) & Liquid(y) & Gas(z) & IncreasesHeatEnergy(x)) -> Boiling(x))", "all x y z.((Water(x) & Liquid(y) & Gas(z) & IncreasesHeatEnergy(x,z)) -> Boiling(x))", "all x.((WaterBoiling(x) & Liquid(x) & Gas(x) & IncreasesHeatEnergy(x)) -> Changes(x))", "all x y z.((Water(x) & Liquid(y) & Gas(z) & IncreasesHeatEnergy(x,y)) -> Boiling(x))", "all x.((WaterBoiling(x) & Liquid(x) & Gas(x) & IncreasesHeatEnergy(x)) -> WaterChangesFromTo(x,y))"]}
{"id": "entailmentbank_validation_832", "nl": "a puddle is a kind of body of water.", "fol": "", "prediction": ["all x.(Puddle(x) -> BodyOfWater(x))", "all x.(Puddle(x) -> BodyOfWater(x))", "all x.(Puddle(x) -> (BodyOfWater(x)))", "all x.(Puddle(x) -> TypeOfWater(x))", "all x.(Puddle(x) -> (BodyOfWater(x)))", "all x y.((Puddle(x) & Water(y)) -> BodyOfWater(x,y))", "all x y.((Puddle(x) & BodyOfWater(y)) -> Water(x))", "all x y.((Puddle(x) & BodyOfWater(y)) -> Is(x,y))", "all x.(Puddle(x) -> exists y.(BodyOfWater(y) & InPuddle(x,y)))", "all x y.((Puddle(x) & Water(y)) -> BodyOfWater(x))", "all x.(Puddle(x) -> (BodyOfWater(x) & -BodyOfWater(x)))", "all x.(Puddle(x) -> exists y.(BodyOfWater(y) & BodyOfWater(x,y)))", "all x.(Puddle(x) -> WaterBody(x))", "all x.(Puddle(x) -> (BodyOfWater(x) & BodyOfWater(x)))", "exists x.(Puddle(x) & BodyOfWater(x))", "all x.(Puddle(x) -> (BodyOfWater(x) & Water(x)))"]}
{"id": "entailmentbank_validation_833", "nl": "being in the sun will cause the puddle to absorb heat energy.", "fol": "", "prediction": ["all x y.((Puddle(x) & Sun(y)) -> AbsorbsHeatEnergy(x,y))", "all x.((Puddle(x) & InSun(x)) -> AbsorbsHeatEnergy(x))", "all x y.((Puddle(x) & Sun(y) & In(x,y)) -> AbsorbsHeatEnergy(x))", "all x.(InSun(x) -> AbsorbsHeatEnergy(x))", "all x y.((Puddle(x) & Sun(y) & In(x,y)) -> AbsorbsHeatEnergy(x,y))", "all x.(Sun(x) -> AbsorbsHeatEnergy(x))", "all x y.((Puddle(x) & Sun(y) & InSun(x,y)) -> AbsorbsHeatEnergy(x,y))", "all x.(SunInPuddle(x) -> AbsorbsHeatEnergy(x))", "all x.((InSun(x) & Puddle(x)) -> AbsorbsHeatEnergy(x))", "all x y.((Sun(x) & Puddle(y)) -> AbsorbsHeatEnergy(y,x))", "all x.((Sun(x) & InPuddle(x)) -> AbsorbsHeatEnergy(x))", "all x y z.((Puddle(x) & Sun(y) & Sun(z)) -> AbsorbsHeatEnergy(x,y,z))", "all x y.((Puddle(x) & Sun(y) & InSun(x,y)) -> AbsorbsHeatEnergy(x))", "all x y.((Puddle(x) & Sun(y)) -> AbsorbHeatEnergy(x,y))", "all x y.((Puddle(x) & Sun(y)) -> AbsorbsHeatEnergy(x))", "all x.((Sun(x) & Puddle(x)) -> AbsorbsHeatEnergy(x))"]}
{"id": "entailmentbank_validation_834", "nl": "the puddle will evaporate.", "fol": "", "prediction": ["all x.(Puddle(x) -> Evaporates(x))", "all x.(Puddle(x) -> Evaporate(x))", "all x y.((Puddle(x) & Puddle(y)) -> Evaporates(x,y))", "all x y.((Puddle(x) & Puddle(y)) -> Evaporates(x))", "all x y.((Puddle(x) & Puddle(y)) -> Evaporate(x,y))", "all x y.((Puddle(x) & Puddle(y)) -> Evaporate(x))", "all x.(Puddle(x) -> WillEvaporate(x))", "all x y z.((Puddle(x) & Puddle(y) & Puddle(z)) -> Evaporates(x,y,z))", "all x y.((Puddle(x) & Puddle(y)) -> WillEvaporate(x,y))", "all x.((Puddle(x) & Evaporates(x)) -> Evaporates(x))", "all x y z.((Puddle(x) & Puddle(y) & Puddle(z)) -> Evaporate(x,y,z))", "all x y.((Puddle(x) & Puddle(y)) -> Evaporates(y))", "all x y z.((Puddle(x) & Puddle(y) & Puddle(z)) -> Evaporates(x,y))", "all x.((Puddle(x) & Evaporate(x)) -> Evaporates(x))", "all x.(Puddle(x) -> Evaporated(x))", "all x y z.((Puddle(x) & Puddle(y) & Puddle(z)) -> Evaporates(x))"]}
{"id": "entailmentbank_validation_835", "nl": "an example of evaporation is a body of water drying up by absorbing heat energy.", "fol": "", "prediction": ["all x.((BodyOfWater(x) & DryingUpByAbsorbingHeatEnergy(x)) -> Evaporation(x))", "all x.(Evaporation(x) -> (BodyOfWater(x) & DrysUpByAbsorbingHeatEnergy(x)))", "all x.(Evaporation(x) -> (BodyOfWater(x) & DryingUpByAbsorbingHeatEnergy(x)))", "all x.((BodyOfWater(x) & DrysUpByAbsorbingHeatEnergy(x)) -> Evaporation(x))", "all x.(Evaporation(x) -> (BodyOfWater(x) & DrysUpByAbsorbingHeatEnergy(x)))", "all x.(Evaporation(x) -> (BodyOfWater(x) & DryingUpByAbsorbingHeatEnergy(x)))", "all x.((BodyOfWater(x) & DryingUp(x) & AbsorbsHeatEnergy(x)) -> Evaporation(x))", "all x y.((BodyOfWater(x) & HeatEnergy(y) & Absorbs(x,y)) -> Evaporation(x))", "all x.(Evaporation(x) -> (BodyOfWater(x) & DriesUpByAbsorbingHeatEnergy(x)))", "all x.(Evaporation(x) -> (BodyOfWater(x) & DryingUp(x) & AbsorbsHeatEnergy(x)))", "all x.(Evaporation(x) -> (BodyOfWater(x) & DryingUp(x) & AbsorbingHeatEnergy(x)))", "all x.((BodyOfWater(x) & DriesUpByAbsorbingHeatEnergy(x)) -> Evaporation(x))", "all x.(Evaporation(x) -> (BodyOfWater(x) & DrysUp(x) & AbsorbsHeatEnergy(x)))", "all x.((BodyOfWater(x) & AbsorbsHeatEnergy(x)) -> Evaporation(x))", "all x y.((BodyOfWater(x) & HeatEnergy(y)) -> DryingUpByAbsorbing(x,y))", "all x.(Evaporation(x) -> (BodyOfWater(x) & DrysUpByAbsorbingHeat(x)))"]}
{"id": "entailmentbank_validation_836", "nl": "a puddle drying in the sun is an example of evaporation.", "fol": "", "prediction": ["all x.((Puddle(x) & DryingInSun(x)) -> Evaporation(x))", "all x y.((Puddle(x) & Sun(y) & DryingIn(x,y)) -> Evaporation(x))", "all x y.((Puddle(x) & Sun(y) & DrysIn(x,y)) -> Evaporation(x))", "all x.((Puddle(x) & DrysInSun(x)) -> Evaporation(x))", "all x y z.((Puddle(x) & Sun(y) & Sun(z) & DryingIn(x,y,z)) -> Evaporation(x))", "all x.((Puddle(x) & DriesInSun(x)) -> Evaporation(x))", "all x y z.((Puddle(x) & Sun(y) & Sun(z) & DrysIn(x,y,z)) -> Evaporation(x))", "all x y z.((Puddle(x) & Sun(y) & Sun(z)) -> DryingIn(x,y,z))", "all x y.((Puddle(x) & Sun(y)) -> DryingIn(x,y))", "all x y z.((Puddle(x) & Sun(y) & Sun(z) & DryingIn(x,y)) -> Evaporation(x))", "all x y.((Puddle(x) & Sun(y) & Drying(x,y)) -> Evaporation(x))", "all x y.((Puddle(x) & Sun(y) & DriesIn(x,y)) -> Evaporation(x))", "all x y z.((Puddle(x) & Sun(y) & Sun(z) & DrysIn(x,y)) -> Evaporation(x))", "all x y z.((Puddle(x) & Sun(y) & Sun(z)) -> DrysIn(x,y,z))", "all x.((Puddle(x) & DryingInSun(x)) -> ExampleOfEvaporation(x))", "all x y z.((Puddle(x) & Sun(y) & Sun(z) & Drying(x,y,z)) -> Evaporation(x))"]}
{"id": "entailmentbank_validation_837", "nl": "if something is in the sunlight then that something will absorb solar energy.", "fol": "", "prediction": ["all x.((Sunlight(x) & InSunlight(x)) -> AbsorbsSolarEnergy(x))", "all x.(Sunlight(x) -> AbsorbsSolarEnergy(x))", "all x.((InSunlight(x) & InSunlight(x)) -> AbsorbsSolarEnergy(x))", "all x.((Sunlight(x) & In(x,Sunlight)) -> AbsorbsSolarEnergy(x))", "all x.((Sunlight(x) & InSunlight(x)) -> AbsorbSolarEnergy(x))", "all x y.((Sunlight(x) & InSunlight(x)) -> AbsorbsSolarEnergy(y))", "all x.((InSunlight(x) & AbsorbsSolarEnergy(x)) -> InSunlight(x))", "all x y.((Sunlight(x) & Sunlight(y)) -> AbsorbsSolarEnergy(x,y))", "all x.((Sunlight(x) & inSunlight(x)) -> AbsorbsSolarEnergy(x))", "all x.(InSunlight(x) -> AbsorbsSolarEnergy(x))", "all x.((Sunlight(x) & AbsorbsSolarEnergy(x)) -> InSunlight(x))", "all x y.((Sunlight(x) & InSunlight(y)) -> AbsorbsSolarEnergy(x,y))", "all x.((InSunlight(x) & InSunlight(x)) -> AbsorbSolarEnergy(x))", "all x.(Sunlight(x) -> AbsorbSolarEnergy(x))", "all x y.((Sunlight(x) & In(x,y)) -> AbsorbsSolarEnergy(x))", "all x.((Sunlight(x) & In(x,sunlight)) -> AbsorbsSolarEnergy(x))"]}
{"id": "entailmentbank_validation_838", "nl": "a bucket of water in in the sunlight.", "fol": "", "prediction": ["all x y.((BootOfWater(x) & Sunlight(y)) -> In(x,y))", "all x y.((PoolOfWater(x) & Sunlight(y)) -> In(x,y))", "all x.((BootOfWater(x) & InSunlight(x)) -> InSunlight(x))", "all x.((PoolOfWater(x) & InSunlight(x)) -> InSunlight(x))", "all x y.((BoatOfWater(x) & Sunlight(y)) -> In(x,y))", "all x y.((BootOfWater(x) & Sunlight(y)) -> InIn(x,y))", "all x y.((PoolOfWater(x) & Sunlight(y)) -> InIn(x,y))", "all x.((BoatOfWater(x) & InSunlight(x)) -> InSunlight(x))", "all x y z.((BootOfWater(x) & Sunlight(y) & In(x,y)) -> In(x,z))", "all x y.((BoonOfWater(x) & Sunlight(y)) -> In(x,y))", "all x y.((HootOfWater(x) & Sunlight(y)) -> In(x,y))", "all x y.((BoatOfWater(x) & Sunlight(y)) -> InIn(x,y))", "exists x.(BootOfWater(x) & InSunlight(x))", "all x y.((Pool(x) & Water(y)) -> InSunlight(x,y))", "all x y z.((PoolOfWater(x) & Sunlight(y) & In(x,y)) -> In(x,z))", "all x.(PoolOfWater(x) -> InSunlight(x))"]}
{"id": "entailmentbank_validation_839", "nl": "the water in the bucket will absorb solar energy.", "fol": "", "prediction": ["all x y.((Water(x) & Bucket(y)) -> AbsorbsSolarEnergy(x,y))", "all x.((Water(x) & Bucket(x)) -> AbsorbsSolarEnergy(x))", "all x y.((WaterInBoot(x) & Bucket(y)) -> AbsorbsSolarEnergy(x,y))", "all x y z.((Water(x) & Bucket(y) & Bucket(z)) -> AbsorbsSolarEnergy(x,y,z))", "all x.((WaterInBoot(x) & AbsorbsSolarEnergy(x)) -> WaterInBoot(x))", "all x y.((Water(x) & Bucket(y)) -> AbsorbsSolarEnergy(y,x))", "all x y z.((Water(x) & Bucket(y) & Water(z)) -> AbsorbsSolarEnergy(x,y,z))", "all x y.((Water(x) & Bucket(y)) -> AbsorbSolarEnergy(x,y))", "all x.(Boot(x) -> AbsorbsSolarEnergy(x))", "all x y.((Water(x) & Bucket(y) & In(x,y)) -> AbsorbsSolarEnergy(x))", "all x.((Water(x) & Bucket(x)) -> AbsorbSolarEnergy(x))", "all x.(WaterInBoot(x) -> AbsorbsSolarEnergy(x))", "all x y.((Boot(x) & Water(y)) -> AbsorbsSolarEnergy(y,x))", "all x y.((Water(x) & Bucket(y) & In(x,y)) -> AbsorbsSolarEnergy(x,y))", "all x y z.((Water(x) & Bucket(y) & Bucket(z)) -> AbsorbsSolarEnergy(y,z))", "all x.((Water(x) & Bucket(y)) -> AbsorbsSolarEnergy(x,y))"]}
{"id": "entailmentbank_validation_840", "nl": "if a substance absorbs solar energy then that substance will increase in temperature.", "fol": "", "prediction": ["all x.((Substance(x) & AbsorbsSolarEnergy(x)) -> IncreasesTemperature(x))", "all x.((Substance(x) & AbsorbsSolarEnergy(x)) -> IncreasedTemperature(x))", "all x y.((Substance(x) & AbsorbsSolarEnergy(x)) -> IncreasesTemperature(y))", "all x.(AbsorbsSolarEnergy(x) -> IncreasesTemperature(x))", "all x.((Substance(x) & AbsorbsSolarEnergy(x)) -> IncreaseInTemperature(x))", "all x y.((Substance(x) & AbsorbsSolarEnergy(x)) -> IncreasedTemperature(y))", "all x y.((Substance(x) & AbsorbsSolarEnergy(x,y)) -> IncreasesTemperature(x,y))", "all x y.((Substance(x) & AbsorbsSolarEnergy(x)) -> IncreasesTemperature(x))", "all x.(AbsorbsSolarEnergy(x) -> IncreasedTemperature(x))", "all x y.((Substance(x) & AbsorbsSolarEnergy(x) & Substance(y)) -> IncreasesTemperature(y))", "all x y.((Substance(x) & AbsorbsSolarEnergy(x)) -> IncreaseInTemperature(y))", "all x y.((Substance(x) & AbsorbsSolarEnergy(x)) -> IncreasesTemperature(x,y))", "all x y.((Substance(x) & AbsorbsSolarEnergy(x,y)) -> IncreasesTemperature(x))", "all x y.((Substance(x) & AbsorbsSolarEnergy(x,y)) -> IncreasedTemperature(x,y))", "all x y.((Substance(x) & AbsorbsSolarEnergy(x,y)) -> IncreasesTemperature(y))", "all x y.((Substance(x) & AbsorbsSolarEnergy(x) & Material(y)) -> IncreasesTemperature(y))"]}
{"id": "entailmentbank_validation_841", "nl": "the water in the bucket will increase in temperature.", "fol": "", "prediction": ["all x.((Water(x) & Bucket(x)) -> IncreasesTemperature(x))", "all x y.((Water(x) & Bucket(y)) -> IncreasesTemperature(x,y))", "all x.((Water(x) & Bucket(x)) -> IncreasedTemperature(x))", "all x y.((Water(x) & Bucket(y)) -> IncreasedTemperature(x,y))", "all x y.((Boot(x) & Water(y)) -> IncreasesTemperature(x,y))", "all x y.((Boot(x) & Water(y)) -> IncreasesTemperature(y,x))", "all x.((Boot(x) & WaterInBoot(x)) -> IncreasesTemperature(x))", "all x.((WaterInBoot(x) & IncreasesTemperature(x)) -> WaterInBoot(x))", "all x y.((Boot(x) & Water(y)) -> IncreasesTemperature(y))", "all x y.((Boot(x) & Water(y)) -> IncreasedTemperature(x,y))", "all x.((Water(x) & Bucket(x)) -> IncreaseInTemperature(x))", "all x.((Boot(x) & WaterInBoot(x)) -> IncreasedTemperature(x))", "all x.((Water(x) & Bucket(y)) -> IncreasesTemperature(x,y))", "all x y.((Boot(x) & Water(y)) -> IncreasedTemperature(y))", "all x y.((Boot(x) & Water(y)) -> IncreasedTemperature(y,x))", "all x.((Water(x) & Bucket(x)) -> TemperatureIncrease(x))"]}
{"id": "entailmentbank_validation_842", "nl": "evaporation means a substance changes from a liquid into a gas by increasing heat energy.", "fol": "", "prediction": ["all x.(Evaporation(x) -> (ChangesFromLiquidToGas(x) & IncreasesHeatEnergy(x)))", "all x.(Evaporation(x) -> (ChangesFromLiquidIntoGas(x) & IncreasesHeatEnergy(x)))", "all x y z.((Substance(x) & Liquid(y) & Gas(z) & IncreasesHeatEnergy(x,y,z)) -> Evaporation(x))", "all x y z.((Substance(x) & Liquid(y) & Gas(z) & IncreasesHeatEnergy(x)) -> Evaporation(x))", "all x.(Evaporation(x) -> (ChangesFromLiquidToGas(x) & IncreasesHeatEnergy(x)))", "all x y z.((Substance(x) & Liquid(y) & Gas(z)) -> ChangesFromTo(x,y,z))", "all x y z.((Substance(x) & Liquid(y) & Gas(z)) -> Evaporation(x))", "all x.(Evaporation(x) -> (ChangesFromLiquidToGasByIncreasedHeatEnergy(x)))", "all x y z.((Substance(x) & Liquid(y) & Gas(z) & IncreasesHeatEnergy(x,y,z)) -> ChangesFromTo(x,y,z))", "all x y z.((Substance(x) & Liquid(y) & Gas(z) & IncreasesHeatEnergy(x,y)) -> Evaporation(x))", "all x.(Evaporation(x) -> (ChangesFromLiquidToGasByIncreasingHeatEnergy(x)))", "all x y z.((Substance(x) & Liquid(y) & Gas(z) & IncreasedHeatEnergy(x)) -> Evaporation(x))", "all x y z.((Substance(x) & Liquid(y) & Gas(z) & IncreasedHeatEnergy(x)) -> ChangesFromTo(x,y,z))", "all x y.((Substance(x) & Liquid(y) & Gas(z)) -> ChangesFromTo(x,y,z))", "all x y z.((Substance(x) & Liquid(y) & Gas(z) & IncreasesHeatEnergy(x,z)) -> Evaporation(x))", "all x y.((Substance(x) & Liquid(y) & Gas(y)) -> Evaporation(x))"]}
{"id": "entailmentbank_validation_843", "nl": "the water in the bucket will evaporate.", "fol": "", "prediction": ["all x.((Water(x) & Bucket(x)) -> Evaporates(x))", "all x y.((Water(x) & Bucket(y)) -> Evaporates(x,y))", "all x.((Water(x) & Bucket(x)) -> Evaporate(x))", "all x y z.((Water(x) & Bucket(y) & Bucket(z)) -> Evaporates(x,y,z))", "all x y.((Water(x) & Bucket(y)) -> Evaporate(x,y))", "all x y.((Water(x) & Bucket(y)) -> Evaporates(y))", "all x y.((Water(x) & Bucket(y)) -> WillEvaporate(x,y))", "all x y.((WaterInBoot(x) & Bucket(y)) -> Evaporates(x,y))", "all x.((Water(x) & Bucket(y)) -> Evaporates(x,y))", "all x y z.((Water(x) & Bucket(y) & Bucket(z)) -> Evaporates(y,z))", "all x.((WaterInBoot(x) & Evaporates(x)) -> WaterInBoot(x))", "all x y.((Boot(x) & Water(y)) -> Evaporates(x,y))", "all x y.((Water(x) & Bucket(y)) -> Evaporates(y,x))", "all x.((WaterInBoot(x)) -> Evaporates(x))", "all x y z.((Water(x) & Bucket(y) & Bucket(z)) -> Evaporate(x,y,z))", "all x y.((Boot(x) & Water(y)) -> Evaporates(y))"]}
{"id": "entailmentbank_validation_844", "nl": "gas is a kind of substance.", "fol": "", "prediction": ["all x.(Gas(x) -> Substance(x))", "all x.(Gas(x) -> Substance(x))", "all x.(Gas(x) -> (Substance(x) | Substance(x)))", "all x y.((Gas(x) & Substance(y)) -> Is(x,y))", "all x y.((Gas(x) & Substance(y)) -> Substance(x))", "all x y.((Gas(x) & Substance(y)) -> Substance(x,y))", "all x y.((Gas(x) & Substance(y)) -> SortOf(x,y))", "all x.(Gas(x) -> TypeOfSubstance(x))", "all x y.((Gas(x) & Substance(y)) -> KindOf(x,y))", "all x.(Gas(x) -> SpeciesOfSubstance(x))", "exists x.(Gas(x) & Substance(x))", "all x y.((Gas(x) & Substance(y)) -> TypeOf(x,y))", "all x.(Gas(x) -> Material(x))", "all x y.((Gas(x) & Substance(y)) -> HasSubstance(x,y))", "all x y.((Gas(x) & Substance(y)) -> FormOf(x,y))", "all x.(Gas(x) -> IsSubstance(x))"]}
{"id": "entailmentbank_validation_845", "nl": "substances are made of molecules.", "fol": "", "prediction": ["all x.(Substance(x) -> MadeOfMolecules(x))", "all x y.((Substance(x) & Molecule(y)) -> MadeOf(x,y))", "all x y z.((Substance(x) & Molecule(y) & Molecule(z)) -> MadeOf(x,y,z))", "all x y.((Substance(x) & Molecule(y)) -> MadeOf(x,y))", "all x.(Substance(x) -> MadeOfMoleculars(x))", "all x y z.((Substance(x) & Molecule(y) & Molecule(z)) -> MadeOf(x,y,z))", "all x y z.((Substance(x) & Molecule(y) & Molecule(z)) -> MadeOf(x,y,z))", "all x.exists y.(Substance(x) & Molecule(y) & MadeOf(x,y))", "all x y z.((Substance(x) & Molecule(y) & Molecule(z)) -> MadeOf(x,y))", "all x y z.((Substance(x) & Molecule(y) & Molecular(z)) -> MadeOf(x,y,z))", "all x y z.((Substance(x) & Molecule(y) & Molecule(z) & MadeOf(x,y,z)) -> MadeOf(x,y,z))", "all x y z.((Substance(x) & Molecule(y) & Substance(z)) -> MadeOf(x,y,z))", "all x.(Substance(x) -> MakesOfMolecules(x))", "all x y.((Substance(x) & Molecule(y) & MadeOf(x,y)) -> MadeOf(x,y))", "all x y z.((Substance(x) & Molecule(y) & Molecule(z)) -> MadeOf(x,y,z))", "all x.(Substance(x) -> MadeOfMolecules(x))"]}
{"id": "entailmentbank_validation_846", "nl": "a gas is made of its molecules.", "fol": "", "prediction": ["all x.(Gas(x) -> MadeOfMolecules(x))", "all x.(Gas(x) -> MadeOfMoleculars(x))", "all x y.((Gas(x) & Molecule(y)) -> MadeOf(x,y))", "all x y z.((Gas(x) & Molecule(y) & Molecule(z)) -> MadeOf(x,y,z))", "all x y.((Gas(x) & Molecules(y)) -> MadeOf(x,y))", "all x.(Gas(x) -> MadeOfMolecules(x))", "all x y.((Gas(x) & Molecule(y)) -> MadeOf(x,y))", "all x y.((Gas(x) & Molecule(y) & MadeOf(x,y)) -> MadeOf(x,y))", "all x y z.((Gas(x) & Molecule(y) & Molecule(z) & MadeOf(x,y,z)) -> MadeOf(x,y,z))", "all x.(Gas(x) -> MakesOfMolecules(x))", "all x.(Gas(x) -> MadeOfMolecularMolecules(x))", "all x y z.((Gas(x) & Molecule(y) & Molecule(z)) -> MadeOf(x,y,z))", "all x y z.((Gas(x) & Molecules(y) & Molecule(z)) -> MadeOf(x,y,z))", "all x y z.((Gas(x) & Molecule(y) & Molecule(z)) -> MadeOf(x,y))", "all x y z.((Gas(x) & Molecule(y) & Molecule(z) & MadeOf(x,y,z)) -> MadeOf(x,y))", "all x y z.((Gas(x) & Molecule(y) & Molecule(z) & MadeOf(x,y)) -> MadeOf(x,z))"]}
{"id": "entailmentbank_validation_847", "nl": "a gas is heated and its temperature increases.", "fol": "", "prediction": ["all x.(Gas(x) -> (Heated(x) & TemperatureIncreases(x)))", "all x.(Gas(x) -> (Heated(x) & TemperatureIncrease(x)))", "all x.(Gas(x) -> (Heated(x) & TemperatureIncreased(x)))", "all x.(Gas(x) -> (Heated(x) & IncreasedTemperature(x)))", "all x.(Gas(x) -> (Heated(x) & TemperatureAccro\u00eets(x)))", "all x.(Gas(x) -> (Heated(x) & IncreasesTemperature(x)))", "all x y.((Gas(x) & Gas(y)) -> (Heated(x) & IncreasedTemperature(y)))", "all x y.((Gas(x) & Gas(y)) -> (Heated(x,y) & IncreasedTemperature(x,y)))", "all x y.((Gas(x) & Gas(y)) -> (Heated(x,y) & TemperatureIncreases(x,y)))", "all x y.((Gas(x) & Gas(y)) -> (Heated(x) & TemperatureIncreased(y)))", "all x y.((Gas(x) & Gas(y)) -> (Heated(x) & TemperatureIncreases(y)))", "all x y.((Gas(x) & Gas(y)) -> (Heated(x,y) & TemperatureIncrease(x,y)))", "all x y.((Gas(x) & Gas(y)) -> HeatsAndTemperatureIncreases(x,y))", "all x y.((Gas(x) & Gas(y)) -> (Heated(x,y) & TemperatureIncreased(x,y)))", "all x.((Gas(x) & Heated(x)) -> TemperatureIncreases(x))", "all x.(Gas(x) -> HeatsAndTemperatureIncreases(x))"]}
{"id": "entailmentbank_validation_848", "nl": "as the temperature of a substance increases, the molecules in that substance will move faster / farther apart.", "fol": "", "prediction": ["all x y.((Substance(x) & Temperature(y) & Increases(x,y)) -> MoleculesMoveFaster(x,y))", "all x.((Substance(x) & TemperatureIncreases(x)) -> MoleculesMoveFaster(x))", "all x y.((Substance(x) & TemperatureIncrease(x,y)) -> MoleculesMoveFaster(x,y))", "all x y.((Substance(x) & Temperature(y) & Increases(x,y)) -> MoleculesMoveFaster(x,y))", "all x.((Substance(x) & IncreasedTemperature(x)) -> MoveMoleculesFaster(x))", "all x y z.((Substance(x) & Temperature(y) & Molecules(z)) -> (Increases(x,y) & MovesFaster(z) & FartherApart(z)))", "all x y z.((Substance(x) & Temperature(y) & Molecules(z)) -> (Increases(x,y) & MovesFaster(z,x)))", "all x y z.((Substance(x) & Temperature(y) & Molecules(z)) -> (Increases(x,y) & MovesFaster(z,x) & FartherApart(z)))", "all x y z.((Substance(x) & Temperature(y) & Molecule(z)) -> (Increases(x,y) & MovesFaster(z,x)))", "all x y z.((Substance(x) & Temperature(y) & Molecule(z)) -> (Increases(x,y) & MovesFaster(z) & FartherApart(z)))", "all x y z.((Substance(x) & Temperature(y) & Molecules(z)) -> (Increases(x,y) & MovesFaster(z,x) & FartherApart(z,x)))", "all x y z.((Substance(x) & Temperature(y) & Molecule(z)) -> (Increases(x,y) & MovesFaster(z,x) & FartherApart(z)))", "all x y z.((Substance(x) & Temperature(y) & Molecule(z)) -> (Increases(x,y) & MovesFaster(z,x) & FartherApart(z,x)))", "all x y z.((Substance(x) & Temperature(y) & Molecule(z)) -> (Increases(y,x) & MovesFaster(z,x) & FartherApart(z,x)))", "all x.((Substance(x) & IncreasesTemperature(x)) -> MovesFaster(x))", "all x y z.((Substance(x) & Temperature(y) & Molecules(z)) -> (Increases(y,x) & MovesFaster(z,x) & FartherApart(z,x)))"]}
{"id": "entailmentbank_validation_849", "nl": "the molecules in the gas will move faster.", "fol": "", "prediction": ["all x y.((Molecule(x) & Gas(y)) -> MovesFaster(x,y))", "all x y.((Molecule(x) & Gas(y)) -> MoveFaster(x,y))", "all x y z.((Molecule(x) & Gas(y) & Gas(z)) -> MovesFaster(x,y,z))", "all x y z.((Molecule(x) & Gas(y) & Gas(z)) -> MoveFaster(x,y,z))", "all x y.((Molecular(x) & Gas(y)) -> MovesFaster(x,y))", "all x.((Molecules(x) & Gas(y)) -> MoveFaster(x,y))", "all x.((Molecules(x) & Gas(x)) -> MoveFaster(x))", "all x.((Molecule(x) & Gas(x)) -> MoveFaster(x))", "all x y.((Molecular(x) & Gas(y)) -> MoveFaster(x,y))", "all x y.((Molecules(x) & Gas(y)) -> MoveFaster(x,y))", "all x.((Molecule(x) & Gas(y)) -> MoveFaster(x,y))", "all x.(Molecules(x) -> MoveFaster(x))", "all x.(Molecule(x) -> MoveFaster(x))", "all x y.((Molecule(x) & Gas(y)) -> MovingFaster(x,y))", "all x.((Molecule(x) & Gas(y)) -> MovesFaster(x,y))", "all x y z.((Molecular(x) & Gas(y) & Gas(z)) -> MovesFaster(x,y,z))"]}
{"id": "entailmentbank_validation_850", "nl": "comparing a property of two objects requires knowing the property of each object.", "fol": "", "prediction": ["all x y z.((Property(x) & Property(y) & Object(z) & Comparing(x,y,z)) -> RequiresKnowingProperty(x,y,z))", "all x y z.((Property(x) & Property(y) & Object(z) & Compares(x,y,z)) -> RequiresKnowingProperty(x,y,z))", "all x y z.((Property(x) & Property(y) & Object(z) & Comparing(x,y,z)) -> KnowsPropertyOf(x,y,z))", "all x y z.((Property(x) & Property(y) & Object(z) & Compares(x,y,z)) -> KnowsPropertyOf(x,y,z))", "all x y z.((Property(x) & Property(y) & Object(z) & Compares(x,y,z)) -> KnowsProperty(x,y,z))", "all x y z.((Property(x) & Property(y) & Object(z) & Comparing(x,y,z)) -> RequiresKnowingPropertyOf(x,y,z))", "all x y z.((Property(x) & Property(y) & Object(z) & Comparing(x,y,z)) -> KnowsProperty(x,y,z))", "all x y z.((Property(x) & Property(y) & Object(z)) -> (Compares(x,y,z) & KnowsProperty(x,y,z)))", "all x y.((Property(x,y) & Object(y)) -> KnowsPropertyOf(x,y))", "all x y.((Property(x,y) & Object(y)) -> KnowsProperty(x,y))", "all x y z.((Property(x) & Property(y) & Object(z) & Comparing(x,y,z)) -> RequiresKnowing(x,y,z))", "all x y z.((Property(x) & Property(y) & Object(z) & Compare(x,y,z)) -> RequiresKnowingProperty(x,y,z))", "all x y.((Property(x) & Property(y) & Object(z) & Comparing(x,y,z)) -> RequiresKnowingProperty(x,y,z))", "all x y.((Property(x) & Property(y) & Object(z) & Compares(x,y,z)) -> KnowsPropertyOf(x,y,z))", "all x y z.((Property(x) & Property(y) & Object(z) & Comparing(x,y,z)) -> KnowledgeOfProperty(x,y,z))", "all x y.((Property(x) & Property(y) & Object(z) & Comparing(x,y,z)) -> KnowsPropertyOf(x,y,z))"]}
{"id": "entailmentbank_validation_851", "nl": "a rock is a kind of object.", "fol": "", "prediction": ["all x.(Rock(x) -> Object(x))", "all x.(Rock(x) -> ArtOfObject(x))", "all x y.((Rock(x) & Object(y)) -> Object(x))", "all x y.((Rock(x) & Object(y)) -> Object(x,y))", "all x.(Rock(x) -> Object(x))", "all x y.((Rock(x) & Object(y)) -> Is(x,y))", "all x.(Rock(x) -> IsObject(x))", "all x.(Rock(x) -> TypeOfObject(x))", "all x.(Rock(x) -> (Object(x) & Object(x)))", "all x y.((Rock(x) & Object(y)) -> ArtOf(x,y))", "all x y.((Rock(x) & Object(y)) -> TypeOf(x,y))", "all x.(Rock(x) -> SortOfObject(x))", "all x y.((Rock(x) & Object(y)) -> SortOf(x,y))", "all x y.((Rock(x) & Object(y)) -> KindOf(x,y))", "exists x.(Rock(x) & Object(x))", "all x.(Rock(x) -> KindOfObject(x))"]}
{"id": "entailmentbank_validation_852", "nl": "mass is a property of objects / matter.", "fol": "", "prediction": ["all x.(Mass(x) -> (PropertyOfObjects(x) & PropertyOfMatter(x)))", "all x.(Mass(x) -> PropertyOfObjectsMatter(x))", "all x.(Mass(x) -> PropertyOfObjects(x))", "all x y.((Mass(x) & Object(y)) -> PropertyOfMatter(x,y))", "all x y z.((Mass(x) & Object(y) & Matter(z)) -> PropertyOf(x,y,z))", "all x y.((Mass(x) & Object(y) & Matter(y)) -> PropertyOf(x,y))", "all x.(Mass(x) -> (PropertyOfObjects(x) & PropertyOfMatter(x)))", "all x.(Mass(x) -> (PropertyOfObjects(x) | PropertyOfMatter(x)))", "all x y.((Mass(x) & Object(y)) -> PropertyOf(x,y))", "all x.(Mass(x) -> PropertyOfObjectsOrMatter(x))", "all x.(Mass(x) -> PropertyOfObjectsAndMatter(x))", "all x y.((Mass(x) & Object(y) & Matter(z)) -> PropertyOf(x,y,z))", "all x.(Mass(x) -> (PropertyOfObjects(x) | PropertyOfMatter(x)))", "all x y z.((Mass(x) & Object(y) & Matter(z)) -> PropertiesOf(x,y,z))", "all x y.((Mass(x) & Object(y) & Matter(x)) -> PropertyOf(x,y))", "all x y.((Mass(x) & Object(y)) -> Property(x,y))"]}
{"id": "entailmentbank_validation_853", "nl": "comparing the mass of two rocks requires knowing the mass of each rock.", "fol": "", "prediction": ["all x y.((Rock(x) & Rock(y) & ComparingMass(x,y)) -> KnowsMass(x,y))", "all x y.((Rock(x) & Rock(y) & ComparesMass(x,y)) -> KnowsMass(x,y))", "all x y.((Rock(x) & Rock(y)) -> (CompareMass(x,y) & KnowMass(x,y)))", "all x y z.((Rock(x) & Rock(y) & Rock(z) & ComparingMass(x,y,z)) -> KnowsMass(x,y,z))", "all x y.((Rock(x) & Rock(y)) -> (ComparesMass(x,y) & KnowsMass(x,y)))", "all x y.((Rock(x) & Rock(y)) -> ComparesMass(x,y))", "all x y z.((Rock(x) & Rock(y) & Rock(z)) -> ComparesMass(x,y,z))", "all x y z.((Rock(x) & Rock(y) & Rock(z) & ComparesMass(x,y,z)) -> KnowsMass(x,y,z))", "all x y.((Rock(x) & Rock(y)) -> CompareMass(x,y))", "all x y z.((Rock(x) & Rock(y) & Rock(z) & ComparingMass(x,y,z)) -> RequiresKnowingMass(x,y,z))", "all x y z.((Rock(x) & Rock(y) & Rock(z)) -> (ComparesMass(x,y,z) & KnowsMass(x,y)))", "all x y z.((Rock(x) & Rock(y) & Rock(z)) -> (ComparesMass(x,y,z) & KnowsMass(x,y,z)))", "all x y.((Rock(x) & Rock(y) & ComparingMass(x,y)) -> RequiresKnowingMass(x,y))", "all x y.((Rock(x) & Rock(y) & ComparingMass(x,y)) -> KnowsMassOf(x,y))", "all x y z.((Rock(x) & Rock(y) & Rock(z)) -> (CompareMass(x,y,z) & KnowMass(x,y)))", "all x y z.((Rock(x) & Rock(y) & Rock(z) & ComparingMass(x,y,z)) -> KnowsMass(x,y))"]}
{"id": "entailmentbank_validation_854", "nl": "student is trying to compare the mass of two small rocks.", "fol": "", "prediction": ["all x y.((Student(x) & SmallRock(y)) -> CompareMass(x,y))", "all x y z.((Student(x) & SmallRock(y) & SmallRock(z)) -> CompareMass(x,y,z))", "all x y.((Student(x) & SmallRock(y)) -> ComparingMass(x,y))", "all x y z.((Student(x) & SmallRock(y) & SmallRock(z)) -> ComparingMass(x,y,z))", "all x y z.((Student(x) & SmallRock(y) & SmallRock(z)) -> ComparesMass(x,y,z))", "all x y.((Student(x) & SmallRock(y) & CompareMass(x,y)) -> TrysToCompareMass(x,y))", "all x y z.((Student(x) & SmallRock(y) & SmallRock(z) & CompareMass(x,y,z)) -> TrysToCompareMass(x,y,z))", "all x y.((Student(x) & SmallRock(y)) -> ComparesMass(x,y))", "all x y z.((Student(x) & SmallRock(y) & SmallRock(z) & ComparingMass(x,y,z)) -> TrysToCompareMass(x,y,z))", "all x y z.((Student(x) & SmallRock(y) & SmallRock(z) & CompareMass(x,y,z)) -> TryToCompareMass(x,y,z))", "all x y z.((Student(x) & SmallRock(y) & SmallRock(z)) -> TrysToCompareMass(x,y,z))", "all x y.((Student(x) & SmallRock(y)) -> TrysToCompareMass(x,y))", "all x y.((Student(x) & SmallRock(y) & ComparingMass(x,y)) -> TrysToCompareMass(x,y))", "all x y.((Student(x) & Student(y)) -> ComparesMassOfSmallRocks(x,y))", "all x y z.((Student(x) & SmallRock(y) & SmallRock(z)) -> ComparesMass(x,y,z))", "all x y.((Student(x) & SmallRock(y) & CompareMass(x,y)) -> TryToCompareMass(x,y))"]}
{"id": "entailmentbank_validation_855", "nl": "the student has to know the mass of each rock to compare them.", "fol": "", "prediction": ["all x y.((Student(x) & Rock(y)) -> KnowsMassToCompare(x,y))", "all x y.((Student(x) & Rock(y)) -> KnowsMass(x,y))", "all x y.((Student(x) & Rock(y) & KnowsMass(x,y)) -> Compares(x,y))", "all x y z.((Student(x) & Rock(y) & Rock(z)) -> KnowsMassToCompare(x,y,z))", "all x y z.((Student(x) & Rock(y) & Mass(z)) -> KnowsMassToCompare(x,y,z))", "all x y.((Student(x) & Rock(y)) -> KnowMassToCompare(x,y))", "all x y.((Student(x) & Rock(y) & KnowsMass(x,y)) -> ComparesMass(x,y))", "all x y.((Student(x) & Rock(y)) -> (KnowsMass(x,y) & ComparesMass(x,y)))", "all x y.((Student(x) & Rock(y) & KnowsMass(x,y)) -> Compares(x,y))", "all x y.((Student(x) & Rock(y) & KnowsMass(x,y)) -> ComparesMass(x,y))", "all x y z.((Student(x) & Rock(y) & Mass(z) & KnowsMass(x,y,z)) -> Compares(x,y,z))", "all x y.((Student(x) & Rock(y) & KnowsMass(x,y)) -> Compare(x,y))", "all x y z.((Student(x) & Rock(y) & Rock(z)) -> KnowsMass(x,y,z))", "all x y z.((Student(x) & Rock(y) & Rock(z)) -> KnowMassToCompare(x,y,z))", "all x y z.((Student(x) & Rock(y) & Rock(z) & KnowsMass(x,y,z)) -> Compares(x,y,z))", "all x y z.((Student(x) & Rock(y) & Rock(z) & KnowsMass(x,y,z)) -> ComparesMass(x,y,z))"]}
{"id": "entailmentbank_validation_856", "nl": "a balance is used for measuring mass / weight of an object / of a substance.", "fol": "", "prediction": ["all x y z.((Balance(x) & Mass(y) & Weight(z)) -> Measures(x,y,z))", "all x.(Balance(x) -> (MeasuresMass(x) & MeasuresWeight(x) & MeasuresSubstance(x)))", "all x y z.((Balance(x) & Object(y) & Substance(z)) -> MeasuresMassAndWeight(x,y,z))", "all x y.((Balance(x) & Object(y)) -> MeasuresMassAndWeight(x,y))", "all x y z.((Balance(x) & Object(y) & Substance(z)) -> (MeasuresMass(x,y) & MeasuresWeight(x,z)))", "all x y z.((Balance(x) & Object(y) & Substance(z)) -> MeasuresMassOrWeight(x,y,z))", "all x y.((Balance(x) & Object(y)) -> (MeasuresMass(x,y) & MeasuresWeight(x,y)))", "all x y.((Balance(x) & Object(y)) -> (MeasuresMass(x,y) | MeasuresWeight(x,y)))", "all x y.((Balance(x) & Object(y) & Substance(y)) -> MeasuresMassAndWeight(x,y))", "all x y z.((Balance(x) & Mass(y) & Weight(z)) -> UsedForMeasuring(x,y,z))", "all x y z.((Balance(x) & Object(y) & Substance(z)) -> (MeasuresMass(x,y) & MeasuresWeight(x,y,z)))", "all x y.((Balance(x) & Object(y)) -> MeasuresMass(x,y))", "all x y z.((Balance(x) & Object(y) & Substance(z)) -> (MeasuresMass(x,y) | MeasuresWeight(x,z)))", "all x y z.((Balance(x) & Object(y) & Substance(z)) -> (MeasuresMass(x,y) | MeasuresWeight(x,y,z)))", "all x y z.((Balance(x) & Object(y) & Substance(z)) -> MeasuresMassWeight(x,y,z))", "all x y.((Balance(x) & Object(y)) -> MeasuresMassOrWeight(x,y))"]}
{"id": "entailmentbank_validation_857", "nl": "a balance is a kind of instrument.", "fol": "", "prediction": ["all x.(Balance(x) -> Instrument(x))", "all x.(Balance(x) -> Instrument(x))", "all x y.((Balance(x) & Instrument(y)) -> Instrument(x))", "all x y.((Balance(x) & Instrument(y)) -> Is(x,y))", "all x y.((Balance(x) & Instrument(y)) -> Instrument(x,y))", "all x.((Balance(x) & Instrument(x)) -> Instrument(x))", "all x y.((Balance(x) & Instrument(y)) -> SortOf(x,y))", "all x y.((Balance(x) & Instrument(y)) -> KindOf(x,y))", "all x y.((Balance(x) & Instrument(y)) -> (Instrument(x) & Instrument(y)))", "all x y.((Balance(x) & Instrument(y)) -> KindOfInstrument(x,y))", "all x.(Balance(x) -> (Instrument(x) & Instrument(x)))", "all x.exists y.(Balance(x) & Instrument(y) & UsedFor(x,y))", "all x y.((Balance(x) & Instrument(y)) -> Instrument(x,y))", "all x y.((Balance(x) & Instrument(y)) -> Instrument(x))", "all x.exists y.(Balance(x) & Instrument(y) & DesignedFor(x,y))", "all x y.((Balance(x) & Instrument(y)) -> KindOfInstrument(x))"]}
{"id": "entailmentbank_validation_858", "nl": "the student can use balance to know the mass of each rock to compare them.", "fol": "", "prediction": ["all x y.((Student(x) & Rock(y)) -> (UsesBalance(x,y) & KnowsMass(x,y)))", "all x y z.((Student(x) & Rock(y) & Rock(z)) -> (UsesBalance(x,y) & KnowsMass(x,z) & ComparesMass(x,y,z)))", "all x y.((Student(x) & Rock(y)) -> (UsesBalance(x,y) & KnowsMass(x,y) & ComparesMass(x,y)))", "all x y z.((Student(x) & Rock(y) & Rock(z)) -> CanUseBalanceToKnowMass(x,y,z))", "all x y.((Student(x) & Rock(y)) -> CanUseBalanceToKnowMass(x,y))", "all x y z.((Student(x) & Rock(y) & Rock(z)) -> (KnowsMass(x,y,z) & ComparesMass(x,y,z)))", "all x y z.((Student(x) & Rock(y) & Rock(z)) -> (UsesBalance(x,y) & KnowsMass(x,z)))", "all x y z.((Student(x) & Rock(y) & Rock(z)) -> (UsesBalance(x,y,z) & KnowsMass(x,y) & ComparesMass(x,y,z)))", "all x y.((Student(x) & Rock(y)) -> UsesBalanceToKnowMass(x,y))", "all x y.((Student(x) & Rock(y) & UsesBalance(x,y)) -> KnowsMassToCompare(x,y))", "all x y.((Student(x) & Rock(y)) -> (KnowsMass(x,y) & ComparesMass(x,y)))", "all x y z.((Student(x) & Rock(y) & Rock(z)) -> (UsesBalance(x,y,z) & KnowsMass(x,y,z)))", "all x y.((Student(x) & Rock(y)) -> (UsesBalance(x,y) & KnowsMass(x,y) & Compares(x,y)))", "all x y z.((Student(x) & Rock(y) & Rock(z) & UsesBalance(x,y,z)) -> KnowsMassToCompare(x,y,z))", "all x y z.((Student(x) & Rock(y) & Rock(z)) -> (UsesBalance(x,y,z) & KnowsMass(x,y)))", "all x y.((Student(x) & Rock(y)) -> CanUseBalance(x,y))"]}
{"id": "entailmentbank_validation_859", "nl": "a balance is used for measuring mass of a substance.", "fol": "", "prediction": ["all x y.((Balance(x) & Substance(y)) -> MeasuresMass(x,y))", "all x y.((Balance(x) & Substance(y)) -> UsedForMeasuringMass(x,y))", "all x y z.((Balance(x) & Substance(y) & Mass(z)) -> UsedForMeasuring(x,y,z))", "all x y z.((Balance(x) & Substance(y) & Mass(z)) -> Measures(x,y,z))", "all x y.((Balance(x) & Substance(y)) -> MeasuresMassOf(x,y))", "all x.(Balance(x) -> MeasuresMassOfSubstance(x))", "all x y.((Balance(x) & Substance(y) & UsedForMeasuringMass(x,y)) -> MeasuresMass(x,y))", "all x y z.((Balance(x) & Substance(y) & Mass(z) & Measures(x,y,z)) -> UsedFor(x,y,z))", "all x y.((Balance(x) & Substance(y) & UsedForMeasuringMass(x,y)) -> UsedForMeasuringMass(x,y))", "all x y.((Balance(x) & Substance(y) & MeasuresMass(x,y)) -> UsedFor(x,y))", "all x y.((Balance(x) & Substance(y)) -> UsedForMeasuringMassOf(x,y))", "all x y z.((Balance(x) & Substance(y) & MeasuresMass(x,y)) -> UsedFor(x,z))", "all x y z.((Balance(x) & Substance(y) & Material(z)) -> MeasuresMass(x,y,z))", "all x y z.((Balance(x) & Substance(y) & Mass(z) & Measures(x,y,z)) -> UsedFor(x,y))", "all x y.((Balance(x) & Substance(y)) -> MeasureMass(x,y))", "all x.(Balance(x) -> UsedForMeasuringMassOfSubstance(x))"]}
{"id": "entailmentbank_validation_860", "nl": "sand is a kind of substance.", "fol": "", "prediction": ["all x.(Sand(x) -> Substance(x))", "all x y.((Sand(x) & Substance(y)) -> KindOf(x,y))", "all x y.((Sand(x) & Substance(y)) -> SortOf(x,y))", "all x.(Sand(x) -> Substance(x))", "all x y.((Sand(x) & Substance(y)) -> Substance(x,y))", "all x y.((Sand(x) & Substance(y)) -> Is(x,y))", "all x y.((Sand(x) & Substance(y)) -> Substance(x))", "all x y.((Sand(x) & Substance(y)) -> HasSubstance(x,y))", "all x y.((Sand(x) & Substance(y)) -> FormOf(x,y))", "all x y.((Sand(x) & Substance(y)) -> TypeOf(x,y))", "all x y.((Sand(x) & Substance(y)) -> Contains(x,y))", "all x y.((Sand(x) & Substance(y)) -> Like(x,y))", "all x.(Sand(x) -> SortOfSubstance(x))", "exists x.(Sand(x) & Substance(x))", "all x.((Sand(x) & Substance(x)) -> Substance(x))", "all x.(Sand(x) -> Material(x))"]}
{"id": "entailmentbank_validation_861", "nl": "a balance can be used for measure the mass of sand.", "fol": "", "prediction": ["all x.(Balance(x) -> MeasuresMassOfSand(x))", "all x y.((Balance(x) & Sand(y)) -> MeasuresMass(x,y))", "all x y.((Balance(x) & Sand(y)) -> MeasureMass(x,y))", "all x y.((Balance(x) & Sand(y)) -> CanMeasureMass(x,y))", "all x y z.((Balance(x) & Sand(y) & Mass(z)) -> Measures(x,y,z))", "all x.(Balance(x) -> MeasureMassOfSand(x))", "all x y.((Balance(x) & Sand(y) & MeasuresMass(x,y)) -> CanBeUsedFor(x,y))", "all x.((Balance(x) & MeasuresMassOfSand(x)) -> CanBeUsedForSand(x))", "all x y.((Balance(x) & Sand(y)) -> CanBeMeasured(x,y))", "all x y z.((Balance(x) & Sand(y) & Mass(z)) -> Measure(x,y,z))", "all x y.((Balance(x) & Sand(y)) -> MeasureMath(x,y))", "all x y z.((Balance(x) & Sand(y) & Mass(z)) -> CanBeMeasured(x,y,z))", "all x.((Balance(x) & MeasureMassOfSand(x)) -> CanBeUsedForSand(x))", "all x y.((Balance(x) & Sand(y)) -> UsedForMeasureMass(x,y))", "all x y.((Balance(x) & Sand(y)) -> MeasureMassOf(x,y))", "all x y z.((Balance(x) & Sand(y) & Mass(z)) -> MeasuresMass(x,y,z))"]}
{"id": "entailmentbank_validation_862", "nl": "determining something often requires measuring that something.", "fol": "", "prediction": ["all x y.((Determining(x) & Something(y)) -> RequiresMeasuring(x,y))", "all x y.((Determining(x,y) & Something(y)) -> RequiresMeasuring(x,y))", "all x.((Determining(x) & Something(x)) -> RequiresMeasuring(x))", "all x.(Determining(x) -> RequiresMeasuring(x))", "all x.((Determining(x) & Something(y)) -> RequiresMeasuring(x,y))", "all x y.((Determining(x) & Something(y)) -> RequiresMeasuring(x,y))", "all x y.((Determines(x,y) & Something(y)) -> RequiresMeasuring(x,y))", "all x y.((Determining(x) & Something(y) & RequiresMeasuring(x,y)) -> RequiresMeasuring(x,y))", "all x y.((Determining(x) & Something(y)) -> RequiresMeasurement(x,y))", "all x y.((Defining(x) & Something(y)) -> RequiresMeasuring(x,y))", "all x y.((Does(x,y) & Something(y)) -> RequiresMeasuring(x,y))", "all x y z.((Determining(x) & Something(y) & Measurement(z)) -> Requires(x,y,z))", "all x y.((Determining(x,y) & Something(y)) -> RequiresMeasurement(x,y))", "all x.(DeterminingSomething(x) -> RequiresMeasuring(x))", "all x.((Determining(x) & Something(x)) -> RequiresMeasurement(x))", "all x y.((Determining(x) & Something(y)) -> RequiresMeasuring(y,x))"]}
{"id": "entailmentbank_validation_863", "nl": "determining the mass of the sand requires using a balance to measure the mass of the sand.", "fol": "", "prediction": ["all x y.((Sand(x) & Balance(y)) -> DeterminesMass(x,y))", "all x y.((Sand(x) & Balance(y)) -> MeasuresMass(x,y))", "all x y.((Sand(x) & Balance(y)) -> DeterminesMassOf(x,y))", "all x y.((Sand(x) & Balance(y)) -> MeasureMass(x,y))", "all x y z.((Sand(x) & Balance(y) & Mass(z)) -> DeterminesMass(x,y,z))", "all x y.((Sand(x) & Balance(y) & MeasuresMass(x,y)) -> DeterminesMass(x,y))", "all x y z.((Sand(x) & Balance(y) & Sand(z)) -> DeterminesMass(x,y,z))", "all x y.((Sand(x) & Balance(y) & DeterminesMass(x,y)) -> MeasuresMass(x,y))", "all x y.((Sand(x) & Balance(y) & DeterminesMass(x,y)) -> MeasuresMass(y,x))", "all x y.((Sand(x) & Balance(y)) -> MeasureMass(x,y))", "all x y.((Sand(x) & Balance(y)) -> MeasuresMass(y,x))", "all x.((Sand(x) & Balance(y)) -> DeterminesMass(x,y))", "all x y z.((Sand(x) & Balance(y) & Sand(z)) -> DeterminesMassOf(x,y,z))", "all x.((Sand(x) & Balance(x)) -> DeterminesMass(x,sand))", "all x y z.((Sand(x) & Balance(y) & Mass(z)) -> DeterminesMassOf(x,y,z))", "all x y.((Sand(x) & Balance(y)) -> DetermineMass(x,y))"]}
{"id": "entailmentbank_validation_864", "nl": "a balance is used for measuring the mass of an object.", "fol": "", "prediction": ["all x y.((Balance(x) & Object(y)) -> MeasuresMass(x,y))", "all x y.((Balance(x) & Object(y)) -> UsedForMeasuringMass(x,y))", "all x y z.((Balance(x) & Object(y) & Mass(z)) -> Measures(x,y,z))", "all x y z.((Balance(x) & Object(y) & Mass(z)) -> UsedForMeasuring(x,y,z))", "all x y.((Balance(x) & Object(y) & UsedForMeasuringMass(x,y)) -> MeasuresMass(x,y))", "all x.(Balance(x) -> MeasuresMassOfObject(x))", "all x y.((Balance(x) & Object(y) & MeasuresMass(x,y)) -> UsedFor(x,y))", "all x y z.((Balance(x) & Object(y) & Mass(z) & Measures(x,y,z)) -> UsedFor(x,y,z))", "all x y.((Balance(x) & Object(y) & UsedForMeasuringMass(x,y)) -> UsedForMeasuringMass(x,y))", "all x y.((Balance(x) & Object(y)) -> MeasuringMass(x,y))", "all x y z.((Balance(x) & Object(y) & Mass(z) & Measures(x,y,z)) -> UsedFor(x,y))", "all x y z.((Balance(x) & Object(y) & Mass(z)) -> MeasuresMass(x,y,z))", "all x y.((Balance(x) & Object(y)) -> MeasureMass(x,y))", "all x y z.((Balance(x) & Object(y) & Object(z)) -> MeasuresMass(x,y,z))", "all x y.((Balance(x) & Object(y)) -> MeasuresMassOf(x,y))", "all x y z.((Balance(x) & Object(y) & Mass(z)) -> Measure(x,y,z))"]}
{"id": "entailmentbank_validation_865", "nl": "density can be calculated by measuring the mass of an object divided by the volume of that object.", "fol": "", "prediction": ["all x.((Object(x) & Mass(x) & Volume(x)) -> DensityCalculated(x))", "all x.((Object(x) & MeasuresMass(x) & DividedByVolume(x)) -> DensityCalculated(x))", "all x y z.((Density(x) & Mass(y) & Volume(z) & Measures(x,y,z)) -> CalculatedBy(x,y,z))", "all x y z.((Density(x) & Mass(y) & Volume(z)) -> CalculatedByMeasuring(x,y,z))", "all x y.((Object(x) & Mass(y) & Volume(y)) -> CalculatedByMeasuring(x,y))", "all x.(Density(x) -> (MeasuresMass(x) & DividedByVolume(x)))", "all x y.((Object(x) & Mass(y) & Volume(z)) -> CalculatedByMeasuring(x,y,z))", "all x y.((Object(x) & MeasuresMass(x,y) & DividedByVolume(x,y)) -> DensityCalculated(x))", "all x y.((Object(x) & Mass(y) & DivisibleByVolume(x,y)) -> CalculatedDensity(x,y))", "all x y.((Object(x) & Mass(y) & DividedByVolume(x,y)) -> DensityCalculated(x,y))", "all x y.((Object(x) & MeasuresMass(x,y) & DividedByVolume(x,y)) -> DensityCalculated(x,y))", "all x y z.((Object(x) & Mass(y) & Volume(z)) -> CalculatedByMeasuring(x,y,z))", "all x y.((Object(x) & Mass(y) & Volume(y)) -> DensityCalculated(x,y))", "all x.(Density(x) -> (MeasuresMass(x) & DivisibleByVolume(x)))", "all x y.((Object(x) & Mass(y) & DividedByVolume(x,y)) -> DensityCalculated(x))", "all x y z.((Density(x) & Mass(y) & Volume(z) & Measures(x,y)) -> CalculatedBy(x,z))"]}
{"id": "entailmentbank_validation_866", "nl": "a graduated cylinder is used to measure volume of an object.", "fol": "", "prediction": ["all x y.((GraduatedCylinder(x) & Object(y)) -> MeasuresVolume(x,y))", "all x y.((GraduatedCylinder(x) & Object(y)) -> UsedToMeasureVolume(x,y))", "all x y z.((GraduatedCylinder(x) & Object(y) & Object(z)) -> MeasuresVolume(x,y,z))", "all x y.((GraduatedCylinder(x) & Object(y)) -> MeasuresVolumeOf(x,y))", "all x.((Cylinder(x) & Graduated(x)) -> MeasuresVolumeOfObject(x))", "all x.(GraduatedCylinder(x) -> MeasuresVolumeOfObject(x))", "all x y.((GradedCylinder(x) & Object(y)) -> MeasuresVolume(x,y))", "all x y z.((GraduatedCylinder(x) & Object(y) & MeasuresVolume(x,y)) -> UsedToMeasure(x,z))", "all x y.((GraduatedCylinder(x) & Object(y)) -> MeasuredVolume(x,y))", "all x.((Cylinder(x) & Gradient(x)) -> MeasuresVolumeOfObject(x))", "all x y.((GraduatedCylinder(x) & Object(y) & MeasuresVolume(x,y)) -> UsedToMeasureVolume(x,y))", "all x y.((GraduatedCylinder(x) & Object(y) & MeasuresVolume(x,y)) -> UsedToMeasure(x,y))", "all x y z.((GraduatedCylinder(x) & Object(y) & MeasuresVolume(z)) -> UsedToMeasure(x,y,z))", "all x y z.((GraduatedCylinder(x) & Object(y) & Object(z)) -> UsedToMeasureVolume(x,y,z))", "all x y z.((GraduatedCylinder(x) & Object(y) & Object(z)) -> MeasuresVolumeOf(x,y,z))", "all x.((Cylinder(x) & Graduated(x)) -> MeasuresVolume(x))"]}
{"id": "entailmentbank_validation_867", "nl": "the density of an object can be measured using a graduated cylinder and a balance.", "fol": "", "prediction": ["all x y.((Object(x) & GradientCylinder(y) & Balance(y)) -> MeasuresDensity(x,y))", "all x.((Object(x) & GraduatedCylinder(x) & Balance(x)) -> DensityMeasured(x))", "all x y z.((Object(x) & GradientCylinder(y) & Balance(z)) -> DensityMeasured(x,y,z))", "all x y.((Object(x) & GraduatedCylinder(y) & Balance(y)) -> MeasuresDensity(x,y))", "all x y.((Object(x) & GraduatedCylinder(y) & Balance(y)) -> DensityMeasured(x,y))", "all x y.((Object(x) & GradientCylinder(y) & Balance(y)) -> DensityMeasured(x,y))", "all x y z.((Object(x) & GraduatedCylinder(y) & Balance(z)) -> DensityMeasured(x,y,z))", "all x.((Object(x) & GradientCylinder(x) & Balance(x)) -> DensityMeasured(x))", "all x y z.((Object(x) & GradientCylinder(y) & Balance(z)) -> MeasuresDensity(x,y,z))", "all x y.((Object(x) & GradientCylinder(y) & Balance(y)) -> MeasuresDensity(x,y))", "all x y z.((Object(x) & GraduatedCylinder(y) & Balance(z)) -> MeasuresDensity(x,y,z))", "all x y z.((Object(x) & GradientCylinder(y) & Balance(z)) -> DensityMeasuredUsing(x,y,z))", "all x.((Object(x) & GraduatedCylinder(x) & Balance(x)) -> MeasuresDensity(x))", "all x y.((Object(x) & GradientCylinder(y) & Balance(y)) -> MeasurableDensity(x,y))", "all x y.((Object(x) & GraduatedCylinder(y) & Balance(y)) -> MeasuresDensity(x,y))", "all x.((Object(x) & GradientCylinder(x) & Balance(x)) -> MeasuresDensity(x))"]}
{"id": "entailmentbank_validation_868", "nl": "a marble is a kind of object.", "fol": "", "prediction": ["all x.(Marble(x) -> Object(x))", "all x.(Marble(x) -> ArtOfObject(x))", "all x.(Marble(x) -> Object(x))", "all x.(Marble(x) -> IsObject(x))", "all x y.((Marble(x) & Object(y)) -> Object(x))", "all x y.((Marble(x) & Object(y)) -> Object(x,y))", "all x.(Marble(x) -> (Object(x) & Object(x)))", "all x.(Marble(x) -> TypeOfObject(x))", "all x.(Marble(x) -> SortOfObject(x))", "all x y.((Marble(x) & Object(y)) -> ArtOf(x,y))", "all x y.((Marble(x) & Object(y)) -> Is(x,y))", "all x y.((Marble(x) & Object(y)) -> SortOf(x,y))", "all x y.((Marble(x) & Object(y)) -> KindOf(x,y))", "exists x.(Marble(x) & Object(x))", "all x.(Mahogany(x) -> Object(x))", "all x y.((Marble(x) & Object(y)) -> TypeOf(x,y))"]}
{"id": "entailmentbank_validation_869", "nl": "the density of a marble can be measured using a graduated cylinder and a balance.", "fol": "", "prediction": ["all x.((Marble(x) & GraduatedCylinder(x) & Balance(x)) -> DensityMeasured(x))", "all x y.((Marble(x) & GraduatedCylinder(y) & Balance(y)) -> DensityMeasured(x,y))", "all x y z.((Marble(x) & GraduatedCylinder(y) & Balance(z)) -> DensityMeasured(x,y,z))", "all x y.((Marble(x) & GradientCylinder(y) & Balance(y)) -> DensityMeasured(x,y))", "all x.((Marble(x) & GradientCylinder(x) & Balance(x)) -> DensityMeasured(x))", "all x y z.((Marble(x) & GradientCylinder(y) & Balance(z)) -> DensityMeasured(x,y,z))", "all x y.((Marble(x) & GraduatedCylinder(y) & Balance(y)) -> MeasuresDensity(x,y))", "all x y.((Marble(x) & GradientCylinder(y) & Balance(y)) -> MeasuresDensity(x,y))", "all x y z.((Marble(x) & GraduatedCylinder(y) & Balance(z)) -> DensityMeasuredUsing(x,y,z))", "all x y z.((Marble(x) & GraduatedCylinder(y) & Balance(z)) -> MeasuresDensity(x,y,z))", "all x.((Marble(x) & GraduatedCylinder(x) & Balance(x)) -> MeasuresDensity(x))", "all x y.((Marble(x) & GraduatedCylinder(y) & Balance(x)) -> DensityMeasured(x,y))", "all x y z.((Marble(x) & GradientCylinder(y) & Balance(z)) -> MeasuresDensity(x,y,z))", "all x y z.((Marble(x) & GradientCylinder(y) & Balance(z)) -> DensityMeasuredUsing(x,y,z))", "all x y.((Marble(x) & GraduatedCylinder(y) & Balance(y)) -> DensityMeasuredUsing(x,y))", "all x y.((Marble(x) & GraduatedCylinder(y) & Balance(y)) -> MeasuresDensity(x,y))"]}
{"id": "entailmentbank_validation_870", "nl": "if a unit of for something is being measured, then it requires a measurement tool for measuring that something.", "fol": "", "prediction": ["all x.((UnitOfForSomething(x) & Measuring(x)) -> RequiresMeasurementTool(x))", "all x.((UnitOfForSomething(x) & Measured(x)) -> RequiresMeasurementTool(x))", "all x.((UnitOf(x) & Measured(x)) -> RequiresMeasurementTool(x))", "all x.((UnitOfForSomething(x) & Measured(x)) -> RequiresMeasurementTool(x))", "all x y.((UnitOf(x,y) & Measured(y)) -> RequiresMeasurementTool(x,y))", "all x y.((UnitOfFor(x,y) & Measured(y)) -> RequiresMeasurementTool(x,y))", "all x.((UnitOfForSomething(x) & Measurable(x)) -> RequiresMeasurementTool(x))", "all x y.((UnitOfFor(x,y) & Measured(x,y)) -> RequiresMeasurementTool(x,y))", "all x y.((UnitOf(x,y) & Measured(x,y)) -> RequiresMeasurementTool(x,y))", "all x.((UnitOf(x) & ForSomething(x) & Measuring(x)) -> RequiresMeasurementTool(x))", "all x.((UnitOfFor(x) & Measured(x)) -> RequiresMeasurementTool(x))", "all x.((UnitOfForSomething(x) & Measuring(x)) -> RequiresMeasuringTool(x))", "all x y.((UnitOfFor(x,y) & Measured(x)) -> RequiresMeasurementTool(y))", "all x y.((UnitOfFor(x,y) & Measured(x)) -> RequiresMeasurementTool(x,y))", "all x y.((UnitOf(x,y) & Measured(x)) -> RequiresMeasurementTool(x,y))", "all x.((UnitOf(x) & ForSomething(x)) -> RequiresMeasurementTool(x))"]}
{"id": "entailmentbank_validation_871", "nl": "milliliters ml are a metric unit used for measuring volume.", "fol": "", "prediction": ["all x.(MillilitersMl(x) -> MeasuresVolume(x))", "all x.(MillilitersMl(x) -> MetricUnit(x))", "all x.(Milliliters(x) -> MeasuresVolume(x))", "all x.(Milliliters(x) -> MetricUnit(x))", "all x.(MillilitersMl(x) -> MetricUnitForMeasuringVolume(x))", "all x.(MillilitersMl(x) -> UsedForMeasuringVolume(x))", "all x.((Milliliters(x) & MetricUnit(x)) -> UsedForMeasuringVolume(x))", "all x.(MillilitersMl(x) -> (MetalUnit(x) & UsedForMeasuringVolume(x)))", "all x.((Milliliters(x) & MetricUnit(x)) -> MeasuresVolume(x))", "all x.(Milliliters(x) -> (MetalUnit(x) & UsedForMeasuringVolume(x)))", "all x.(MillilitersMl(x) -> (MetalUnit(x) & MeasuresVolume(x)))", "all x.(Milliliters(x) -> (MetalUnit(x) & MeasuresVolume(x)))", "all x.(Milliliters(x) -> UsedForMeasuringVolume(x))", "all x.(Milliliters(x) & MetricUnit(x) & UsedForMeasuringVolume(x))", "all x y.((Milliliters(x) & Ml(y)) -> MeasuresVolume(x,y))", "all x.(Milliliters(x) -> MeasuresVolume(x))"]}
{"id": "entailmentbank_validation_872", "nl": "measuring milliliters requires a tool for measuring volume.", "fol": "", "prediction": ["all x.(MeasuresMilliliters(x) -> RequiresToolForMeasuringVolume(x))", "all x y.((MeasuresMilliliters(x) & MeasuresVolume(y)) -> RequiresTool(x,y))", "all x.(MeasuringMilliliters(x) -> RequiresToolForMeasuringVolume(x))", "all x.(MeasuresMilliliters(x) -> MeasuresVolume(x))", "all x y.((MeasuresMilliliters(x) & MeasuresVolume(y)) -> RequiresToolForMeasuringVolume(x,y))", "all x.(MeasuresMilliliters(x) -> RequiresMeasuresVolume(x))", "all x.((MeasuresMilliliters(x) & MeasuresVolume(x)) -> RequiresTool(x))", "all x.(MeasuringMilliliters(x) -> RequiresMeasuringVolume(x))", "all x.(MeasuresMilliliters(x) -> NeedsToolForMeasuringVolume(x))", "all x.(MeasuresMilliliters(x) -> RequiresMeasurementTool(x))", "all x.(MeasuresMilliliters(x) -> (RequiresToolForMeasuringVolume(x)))", "all x.((MeasuresMilliliters(x) & MeasuresVolume(x)) -> RequiresToolForMeasuringVolume(x))", "all x.(MeasuringMilliliters(x) -> MeasuresVolume(x))", "all x y.((MeasuringMilliliters(x) & MeasuresVolume(y)) -> RequiresTool(x,y))", "all x.(MeasuresMilliliters(x) -> HasToolForMeasuringVolume(x))", "all x y.((MeasuresMilliliters(x) & MeasuresVolume(y)) -> RequiresToolFor(x,y))"]}
{"id": "entailmentbank_validation_873", "nl": "measuring milliliters requires a graduated cylinder.", "fol": "", "prediction": ["all x.(MeasuresMilliliters(x) -> RequiresGraduatedCylinder(x))", "all x.(MeasurementMilliliters(x) -> RequiresGraduatedCylinder(x))", "all x y.((MeasuresMilliliters(x) & GradientCylinder(y)) -> Requires(x,y))", "all x.(MeasuringMilliliters(x) -> RequiresGraduatedCylinder(x))", "all x y.((MeasuresMilliliters(x) & GraduatedCylinder(y)) -> Requires(x,y))", "all x.((MeasuresMilliliters(x) & GradientCylinder(x)) -> Requires(x,y))", "all x.(MeasuresMilliliters(x) -> RequiresGraduateCylinder(x))", "all x.(Measurement(x,milliliters) -> RequiresGraduatedCylinder(x))", "all x.((MeasuresMilliliters(x) & GraduatedCylinder(x)) -> Requires(x,y))", "all x.(MeasuresMilliliters(x) -> RequiresGraduatedCylinder(x))", "all x.((MeasuresMilliliters(x) & GraduatedCylinder(x)) -> Requires(x))", "all x.((MeasuresMilliliters(x) & GradientCylinder(x)) -> Requires(x))", "all x.(MeasuresMilliliters(x) -> RequiresGradedCylinder(x))", "all x.(MeasureMilliliters(x) -> RequiresGraduatedCylinder(x))", "all x.(MeasurementsMilliliters(x) -> RequiresGraduatedCylinder(x))", "all x.(Measures(x,milliliters) -> RequiresGraduatedCylinder(x))"]}
{"id": "entailmentbank_validation_874", "nl": "a sample in a cylindrical container has a cylindrical shape and a fixed volume.", "fol": "", "prediction": ["all x.((Sample(x) & CylindricalContainer(x)) -> (CylindricalShape(x) & FixedVolume(x)))", "all x y.((Sample(x) & CylindricalContainer(y)) -> (CylindricalShape(x,y) & FixedVolume(x,y)))", "all x y.((Sample(x) & CylindricalContainer(y)) -> (CylindricalShape(x) & FixedVolume(x)))", "all x.((Sample(x) & InCylindricalContainer(x)) -> (CylindricalShape(x) & FixedVolume(x)))", "all x y.((Sample(x) & CylindricalContainer(y)) -> (HasCylindricalShape(x,y) & HasFixedVolume(x,y)))", "all x y.((Sample(x) & CylindricalContainer(y) & InCylindricalContainer(x,y)) -> (CylindricalShape(x) & FixedVolume(x)))", "all x y.((Sample(x) & CylindricalContainer(y)) -> (HasCylindricalShape(x) & HasFixedVolume(x)))", "all x.((Sample(x) & CylindricalContainer(x)) -> (CylindricalShape(x) & FixedVolume(x)))", "all x y z.((Sample(x) & CylindricalContainer(y) & CylindricalShape(z)) -> (HasCylindricalShape(x,y) & HasFixedVolume(x,z)))", "all x y.((Sample(x) & CylindricalContainer(y) & In(x,y)) -> (CylindricalShape(x) & FixedVolume(x)))", "all x y.((Sample(x) & CylindricalContainer(y) & InContainer(x,y)) -> (CylindricalShape(x) & FixedVolume(x)))", "all x.((Sample(x) & CylindricalContainer(x)) -> (HasCylindricalShape(x) & HasFixedVolume(x)))", "all x.((Sample(x) & CrystalContainer(x)) -> (CylindricalShape(x) & FixedVolume(x)))", "all x y z.((Sample(x) & CylindricalContainer(y) & CylindricalShape(z)) -> (HasCylindricalShape(x,z) & HasFixedVolume(x,y)))", "all x.(CylindricalContainer(x) -> (HasCylindricalShape(x) & HasFixedVolume(x)))", "all x y.((Sample(x) & CylindricalContainer(y)) -> (CylindricalShape(x,y) & FixedVolume(x)))"]}
{"id": "entailmentbank_validation_875", "nl": "a sample is a kind of matter.", "fol": "", "prediction": ["all x.(Sample(x) -> Matter(x))", "all x.(Sample(x) -> KindOfMatter(x))", "all x.(Sample(x) -> Material(x))", "all x.(Sample(x) -> SortOfMatter(x))", "all x.(Sample(x) -> TypeOfMatter(x))", "all x.(Sample(x) -> ArtOfMatter(x))", "all x.(Sampling(x) -> KindOfMatter(x))", "all x.(Sample(x) -> IsMatter(x))", "all x.(Sampling(x) -> Matter(x))", "all x.((Sample(x) & KindOfMatter(x)) -> Material(x))", "all x y.((Sample(x) & Sample(y)) -> KindOfMatter(x,y))", "all x.((Sample(x) & TypeOfMatter(x)) -> Material(x))", "all x y.((Sample(x) & Sample(y)) -> Matter(x))", "all x.((Sample(x) & Matter(x)) -> KindOf(x))", "all x.((Sample(x) & Matter(x)) -> SortOf(x))", "all x y.((Sample(x) & Sample(y)) -> Matter(x,y))"]}
{"id": "entailmentbank_validation_876", "nl": "the matter has the same shape as the container and fixed volume.", "fol": "", "prediction": ["all x.((Matter(x) & SameShapeAsContainer(x) & FixedVolume(x)) -> HasSameShapeAsContainer(x))", "all x y.((Matter(x) & Container(y)) -> (SameShape(x,y) & FixedVolume(x,y)))", "all x y.((Matter(x) & Container(y)) -> SameShape(x,y) & FixedVolume(x,y))", "all x.(Matter(x) -> (SameShapeAsContainer(x) & FixedVolume(x)))", "all x.((Matter(x) & SameShapeAsContainer(x) & FixedVolume(x)) -> HasSameShapeAndFixedVolume(x))", "all x y z.((Matter(x) & Container(y) & Container(z)) -> (SameShape(x,y) & FixedVolume(x,z)))", "all x y.((Matter(x) & Container(y) & SameShape(x,y) & FixedVolume(x,y)) -> SameShape(x,y))", "all x y.((Matter(x) & Container(y)) -> (SameShape(x,y) & SameVolume(x,y)))", "all x y.((Matter(x) & Container(y) & SameShape(x,y) & FixedVolume(x,y)) -> HasSameShape(x,y))", "all x.((Matter(x) & SameShapeAsContainer(x) & FixedVolume(x)) -> SameShapeAsContainer(x))", "all x y.((Matter(x) & Container(y)) -> (SameShape(x,y) & FixedVolume(x)))", "all x y.((Matter(x) & Container(y) & SameShape(x,y) & FixedVolume(x,y)) -> HasSameShapeAndFixedVolume(x,y))", "all x y.((Matter(x) & Container(y) & SameShape(x,y) & FixedVolume(x)) -> SameShape(x,y))", "all x y.((Matter(x) & Container(y) & SameShape(x,y) & FixedVolume(x,y)) -> SameShapeAndFixedVolume(x,y))", "all x y.((Matter(x) & Container(y)) -> SameShapeAndFixedVolume(x,y))", "all x y.((Matter(x) & Container(y) & SameShape(x,y) & FixedVolume(x)) -> HasSameShape(x,y))"]}
{"id": "entailmentbank_validation_877", "nl": "matter with variable shape changes shape in different container.", "fol": "", "prediction": ["all x.((Matter(x) & VariableShapeChange(x)) -> DifferentContainer(x))", "all x.((Matter(x) & VariableShapeChange(x) & DifferentContainer(x)) -> VariableShapeChange(x))", "all x.((Matter(x) & VariableShapeChange(x) & DifferentContainer(x)) -> ChangesShape(x))", "all x.((Matter(x) & VariableShapeChange(x) & DifferentContainer(x)) -> ShapeChange(x))", "all x y z.((Matter(x) & VariableShapeChange(y) & Container(z)) -> ChangesShape(x,y,z))", "all x y.((Matter(x) & Container(y) & VariableShapeChange(x,y)) -> ChangesShape(x,y))", "all x.((Matter(x) & VariableShapeChange(x)) -> ChangesShapeInDifferentContainer(x))", "all x y.((Matter(x) & Container(y) & VariableShapeChange(x,y)) -> VariableShapeChange(x,y))", "all x y.((Matter(x) & Container(y) & VariableShapeChange(x,y)) -> ShapeChange(x,y))", "all x y z.((Matter(x) & VariableShapeChange(y) & Container(z)) -> ShapeChange(x,y,z))", "all x.((Matter(x) & VariableShapeChanges(x)) -> DifferentContainer(x))", "all x y z.((Matter(x) & VariableShapeChange(y) & Container(z)) -> ChangesShapeIn(x,y,z))", "all x y.((Matter(x) & Container(y) & VariableShapeChange(x,y)) -> ChangesShapeInDifferentContainer(x,y))", "all x y.((Matter(x) & VariableShapeChange(y)) -> ChangesShapeInDifferentContainer(x,y))", "all x.((Matter(x) & VariableShapeChange(x) & DifferentContainer(x)) -> ChangesShapeInContainer(x))", "all x y.((Matter(x) & Container(y) & VariableShapeChange(x,y)) -> ChangesShapeInContainer(x,y))"]}
{"id": "entailmentbank_validation_878", "nl": "the matter may have a variable shape and a fixed volume.", "fol": "", "prediction": ["all x.(Matter(x) -> (VariableShape(x) & FixedVolume(x)))", "exists x.(Matter(x) & VariableShape(x) & FixedVolume(x))", "all x.((Matter(x) & VariableShape(x) & FixedVolume(x)) -> Has(x,y))", "all x.((Matter(x) & VariableShape(x) & FixedVolume(x)) -> VariableShape(x))", "all x.((Matter(x) & VariableShape(x) & FixedVolume(x)) -> Variable(x))", "all x.((Matter(x) & VariableShape(x) & FixedVolume(x)) -> HasVariableShape(x))", "all x.((Matter(x) & VariableShape(x) & FixedVolume(x)) -> CanHave(x,y))", "all x.((Matter(x) & VariableShape(x) & FixedVolume(x)) -> HasMatter(x,y))", "all x y.((Matter(x) & VariableShape(x) & FixedVolume(y)) -> Has(x,y))", "all x.((Matter(x) & VariableShape(x) & FixedVolume(x)) -> -VariableShape(x))", "all x.((Matter(x) & VariableShape(x) & FixedVolume(x)) -> VariableShapeAndFixedVolume(x))", "all x.((Matter(x) & VariableShape(x) & FixedVolume(x)) -> HasVariableShapeAndFixedVolume(x))", "all x.((Matter(x) & VariableShape(x) & FixedVolume(x)) -> FixedVolume(x))", "all x.((Matter(x) & VariableShape(x) & FixedVolume(x)) -> CanHave(x,variableShape))", "all x.((Matter(x) & VariableShape(x) & FixedVolume(x)) -> HasShapeAndVolume(x))", "all x.(Matter(x) -> (HasVariableShape(x) & HasFixedVolume(x)))"]}
{"id": "entailmentbank_validation_879", "nl": "the matter may have a fixed shape and a fixed volume.", "fol": "", "prediction": ["all x.(Matter(x) -> (FixedShape(x) & FixedVolume(x)))", "all x.((Matter(x) & FixedShape(x) & FixedVolume(x)) -> Fixed(x))", "all x.(Matter(x) -> (HasFixedShape(x) & HasFixedVolume(x)))", "exists x.(Matter(x) & FixedShape(x) & FixedVolume(x))", "all x.(Matter(x) -> (FobbedShape(x) & FixedVolume(x)))", "all x.(Matter(x) -> (FobbyShape(x) & FixedVolume(x)))", "all x.(Matter(x) -> (FastShape(x) & FixedVolume(x)))", "all x.(Matter(x) -> (FoggedShape(x) & FixedVolume(x)))", "all x.((Matter(x) & FixedShape(x) & FixedVolume(x)) -> CanHave(x,Shape))", "all x.(Matter(x) -> (FastShape(x) & FixableVolume(x)))", "all x.((Matter(x) & FixedShape(x) & FixedVolume(x)) -> HasFixed(x))", "all x.((Matter(x) & FixedShape(x) & FixedVolume(x)) -> Has(x,y))", "all x y.((Matter(x) & FixedShape(x) & FixedVolume(y)) -> Has(x,y))", "all x.((Matter(x) & FixedShape(x) & FixedVolume(x)) -> CanHave(x,y))", "all x.(Matter(x) -> (FixedShape(x) & FixedVolume(x)))", "all x.((Matter(x) & FixedShape(x)) -> FixedVolume(x))"]}
{"id": "entailmentbank_validation_880", "nl": "the matter may have a fixed or variable shape and fixed volume.", "fol": "", "prediction": ["all x.(Matter(x) -> (FixedShape(x) | VariableShape(x) | FixedVolume(x)))", "all x.(Matter(x) -> (FixedShape(x) | VariableShape(x) & FixedVolume(x)))", "all x.((Matter(x) & (FixedShape(x) | VariableShape(x)) & FixedVolume(x)) -> Fixed(x))", "all x.((Matter(x) & (FixedShape(x) | VariableShape(x)) & FixedVolume(x)) -> FixedVolume(x))", "all x.((Matter(x) & FixedShape(x) & VariableShape(x) & FixedVolume(x)) -> FixedVolume(x))", "all x.((Matter(x) & FixedShape(x)) | VariableShape(x)) & FixedVolume(x)) -> FixedVolume(x))", "all x.(Matter(x) -> ((FixedShape(x) | VariableShape(x)) & FixedVolume(x))))", "all x.(Matter(x) -> (FobbedShape(x) | VariableShape(x) & FixedVolume(x)))", "all x.((Matter(x) & FixedShape(x) & VariableShape(x) & FixedVolume(x)) -> Fixed(x))", "all x.((Matter(x) & FixedShape(x) & FixedVolume(x)) -> VariableShape(x))", "all x.((Matter(x) & FixedShape(x)) | VariableShape(x)) & FixedVolume(x))", "all x.((Matter(x) & (FixedShape(x) | VariableShape(x)) & FixedVolume(x)) -> FixedMatter(x))", "all x.(Matter(x) -> (FobbedShape(x) | VariableShape(x) | FixedVolume(x)))", "all x.(Matter(x) -> (FixedShape(x) | VariableShape(x)) & FixedVolume(x)))", "all x.((Matter(x) & (FixedShape(x) | VariableShape(x) | FixedVolume(x))) -> Fixed(x))", "all x.((Matter(x) & (FixedShape(x) | VariableShape(x)) & FixedVolume(x)) -> FixedVariable(x))"]}
{"id": "entailmentbank_validation_881", "nl": "matter in the solid phase has definite shape.", "fol": "", "prediction": ["all x.((Matter(x) & SolidPhase(x)) -> DefiniteShape(x))", "all x.((Matter(x) & SolidPhase(x)) -> HasDefiniteShape(x))", "all x.((Matter(x) & SolidPhase(x)) -> HasDefinedShape(x))", "all x y.((Matter(x) & SolidPhase(y)) -> DefiniteShape(x,y))", "all x y.((Matter(x) & SolidPhase(y)) -> HasDefiniteShape(x,y))", "all x y.((Matter(x) & SolidPhase(y)) -> HasDefinedShape(x,y))", "all x.((MatterInSolidPhase(x) & DefiniteShape(x)) -> HasShape(x))", "all x.((Matter(x) & SolidPhase(x)) -> HasDefinableShape(x))", "all x.(SolidPhase(x) -> HasDefiniteShape(x))", "all x.(SolidPhase(x) -> DefiniteShape(x))", "all x.((MatterInSolidPhase(x) & HasDefiniteShape(x)) -> HasShape(x))", "all x y.((Matter(x) & SolidPhase(y)) -> HasDefinableShape(x,y))", "all x.((MatterInSolidPhase(x) & DefiniteShape(x)) -> HasMatterInSolidPhase(x))", "all x.((Matter(x) & SolidPhase(x)) -> DefinableShape(x))", "all x.((MatterInSolidPhase(x) & HasDefinedShape(x)) -> HasDefinedShape(x))", "all x.(SolidPhase(x) -> HasDefinedShape(x))"]}
{"id": "entailmentbank_validation_882", "nl": "matter in the solid phase has definite volume.", "fol": "", "prediction": ["all x.((Matter(x) & SolidPhase(x)) -> DefiniteVolume(x))", "all x.((Matter(x) & SolidPhase(x)) -> HasDefiniteVolume(x))", "all x.((Matter(x) & SolidPhase(x)) -> HasDefinedVolume(x))", "all x y.((Matter(x) & SolidPhase(y)) -> DefiniteVolume(x,y))", "all x y.((Matter(x) & SolidPhase(y)) -> HasDefiniteVolume(x,y))", "all x y.((Matter(x) & SolidPhase(y)) -> HasDefinedVolume(x,y))", "all x.((MatterInSolidPhase(x) & DefiniteVolume(x)) -> Has(x,y))", "all x.((MatterInSolidPhase(x) & HasDefinedVolume(x)) -> HasDefinedVolume(x))", "all x.((Matter(x) & SolidPhase(x)) -> HasDefinableVolume(x))", "all x.(SolidPhase(x) -> DefiniteVolume(x))", "all x.(SolidPhase(x) -> HasDefiniteVolume(x))", "all x.((MatterInSolidPhase(x) & DefiniteVolume(x)) -> HasMatterInSolidPhase(x))", "all x.((MatterInSolidPhase(x) & HasDefinedVolume(x)) -> HasDefiniteVolume(x))", "all x.((Matter(x) & SolidPhase(x)) -> DefinableVolume(x))", "all x.((MatterInSolidPhase(x) & HasDefiniteVolume(x)) -> HasDefiniteVolume(x))", "all x.((MatterInSolidPhase(x) & HasDefiniteVolume(x)) -> HasVolume(x))"]}
{"id": "entailmentbank_validation_883", "nl": "matter in solid phase has definite volume and definite shape.", "fol": "", "prediction": ["all x.((Matter(x) & SolidPhase(x)) -> (DefiniteVolume(x) & DefiniteShape(x)))", "all x.(SolidPhase(x) -> (DefiniteVolume(x) & DefiniteShape(x)))", "all x y.((Matter(x) & SolidPhase(y)) -> (DefiniteVolume(x,y) & DefiniteShape(x,y)))", "all x.((Matter(x) & SolidPhase(x)) -> (DefinedVolume(x) & DefiniteShape(x)))", "all x.((MatterInSolidPhase(x) & DefiniteVolume(x) & DefiniteShape(x)) -> DefiniteMatter(x))", "all x.((Matter(x) & SolidPhase(x)) -> (DeterminedVolume(x) & DeterminedShape(x)))", "all x.((MatterInSolidPhase(x) & DefiniteVolume(x) & DefiniteShape(x)) -> Definite(x))", "all x.((MatterInSolidPhase(x) & DefiniteVolume(x) & DefiniteShape(x)) -> DefiniteVolumeAndDefiniteShape(x))", "all x.((MatterInSolidPhase(x) & DefiniteVolume(x) & DefiniteShape(x)) -> DefiniteVolume(x))", "all x.((MatterInSolidPhase(x) & SolidPhase(x)) -> (DefiniteVolume(x) & DefiniteShape(x)))", "all x.((MatterInSolidPhase(x) & DefiniteVolume(x) & DefiniteShape(x)) -> DefiniteShape(x))", "all x.((Matter(x) & SolidPhase(x)) -> (HasDefinedVolume(x) & HasDefinedShape(x)))", "all x.((Matter(x) & SolidPhase(x)) -> (HasDefiniteVolume(x) & HasDefiniteShape(x)))", "all x.((Matter(x) & SolidPhase(x)) -> (DefinedVolume(x) & DefinedShape(x)))", "all x.((MatterInSolidPhase(x)) -> (DefiniteVolume(x) & DefiniteShape(x)))", "all x.(SolidPhaseMatter(x) -> (DefiniteVolume(x) & DefiniteShape(x)))"]}
{"id": "entailmentbank_validation_884", "nl": "matter in the liquid phase has variable shape.", "fol": "", "prediction": ["all x.((Matter(x) & LiquidPhase(x)) -> VariableShape(x))", "all x.(LiquidPhase(x) -> VariableShape(x))", "all x y.((Matter(x) & LiquidPhase(y)) -> VariableShape(x,y))", "all x.((MatterInLiquidPhase(x) & VariableShape(x)) -> Has(x,y))", "all x y z.((Matter(x) & LiquidPhase(y) & LiquidPhase(z)) -> VariableShape(x,y,z))", "all x y.((MatterInLiquidPhase(x) & LiquidPhase(y)) -> VariableShape(x,y))", "all x.(LiquidPhaseMatter(x) -> VariableShape(x))", "all x.((MatterInLiquidPhase(x) & VariableShape(x)) -> HasMatterInLiquidPhase(x))", "all x y.((Matter(x) & LiquidPhase(y)) -> VariableShape(x))", "all x.((MatterInLiquidPhase(x)) -> VariableShape(x))", "all x y.((Matter(x) & LiquidPhase(y) & VariableShape(x,y)) -> Has(x,y))", "all x.((MatterInLiquidPhase(x) & VariableShape(x)) -> Has(x,LiquidPhase))", "all x.((Matter(x) & InLiquidPhase(x)) -> VariableShape(x))", "all x y z.((Matter(x) & LiquidPhase(y) & LiquidPhase(z)) -> VariableShape(x,y))", "all x y z.((Matter(x) & LiquidPhase(y) & LiquidPhase(z)) -> VariableShape(x,z))", "all x y.((MatterInLiquidPhase(x) & LiquidPhase(y)) -> VariableShape(x))"]}
{"id": "entailmentbank_validation_885", "nl": "matter in the liquid phase has definite volume.", "fol": "", "prediction": ["all x.((Matter(x) & LiquidPhase(x)) -> DefiniteVolume(x))", "all x.(LiquidPhase(x) -> DefiniteVolume(x))", "all x.((Matter(x) & LiquidPhase(x)) -> HasDefinedVolume(x))", "all x.((Matter(x) & LiquidPhase(x)) -> HasDefiniteVolume(x))", "all x y.((Matter(x) & LiquidPhase(y)) -> DefiniteVolume(x,y))", "all x y.((Matter(x) & LiquidPhase(y)) -> HasDefinedVolume(x,y))", "all x y.((Matter(x) & LiquidPhase(y)) -> HasDefiniteVolume(x,y))", "all x.(LiquidPhase(x) -> HasDefiniteVolume(x))", "all x.(LiquidPhase(x) -> HasDefinedVolume(x))", "all x.((MatterInLiquidPhase(x) & DefiniteVolume(x)) -> Has(x,y))", "all x.((Matter(x) & LiquidPhase(x)) -> HasDefinableVolume(x))", "all x.((MatterInLiquidPhase(x) & HasDefinedVolume(x)) -> HasDefinedVolume(x))", "all x.((MatterInLiquidPhase(x) & DefiniteVolume(x)) -> HasVolume(x))", "all x.((MatterInLiquidPhase(x) & HasDefinedVolume(x)) -> HasDefiniteVolume(x))", "all x y.((Matter(x) & LiquidPhase(y)) -> HasDefinableVolume(x,y))", "all x.((MatterInLiquidPhase(x) & HasDefiniteVolume(x)) -> HasDefiniteVolume(x))"]}
{"id": "entailmentbank_validation_886", "nl": "matter in the liquid phase has a variable shape and definite volume.", "fol": "", "prediction": ["all x.((Matter(x) & LiquidPhase(x)) -> (VariableShape(x) & DefiniteVolume(x)))", "all x.(LiquidPhase(x) -> (VariableShape(x) & DefiniteVolume(x)))", "all x y.((Matter(x) & LiquidPhase(y)) -> (VariableShape(x,y) & DefiniteVolume(x,y)))", "all x.((MatterInLiquidPhase(x) & VariableShape(x) & DefiniteVolume(x)) -> VariableShapeAndDefiniteVolume(x))", "all x y.((Matter(x) & LiquidPhase(y)) -> (VariableShape(x) & DefiniteVolume(x)))", "all x.((Matter(x) & LiquidPhase(x)) -> (VariableShape(x) & DefinableVolume(x)))", "all x.(LiquidPhaseMatter(x) -> (VariableShape(x) & DefiniteVolume(x)))", "all x.((MatterInLiquidPhase(x) & VariableShape(x) & DefiniteVolume(x)) -> VariableShape(x))", "all x.((Matter(x) & LiquidPhase(x)) -> (VariableShape(x) & DefinitiveVolume(x)))", "all x.((Matter(x) & LiquidPhase(x)) -> (VariableShape(x) & DecidedVolume(x)))", "all x.((MatterInLiquidPhase(x) & VariableShape(x) & DefiniteVolume(x)) -> HasVariableShapeAndDefiniteVolume(x))", "all x.((Matter(x) & LiquidPhase(x)) -> (VolatileShape(x) & DefiniteVolume(x)))", "all x.((MatterInLiquidPhase(x) & VariableShape(x) & DefiniteVolume(x)) -> Variable(x))", "all x.((MatterInLiquidPhase(x) & VariableShape(x) & DefiniteVolume(x)) -> Has(x,y))", "all x y.((Matter(x) & LiquidPhase(y)) -> (VariableShape(x,y) & DefinableVolume(x,y)))", "all x.(LiquidPhase(x) -> (VariableShape(x) & DefinitiveVolume(x)))"]}
{"id": "entailmentbank_validation_887", "nl": "the matter may be in solid phase or in liquid phase.", "fol": "", "prediction": ["all x.(Matter(x) -> (SolidPhase(x) | LiquidPhase(x)))", "exists x.(Matter(x) & (SolidPhase(x) | LiquidPhase(x)))", "all x.(Matter(x) -> (InSolidPhase(x) | InLiquidPhase(x)))", "all x.(Matter(x) -> (StillPhase(x) | LiquidPhase(x)))", "all x.((Matter(x) & SolidPhase(x)) | LiquidPhase(x))", "all x y.((Matter(x) & SolidPhase(y)) | LiquidPhase(x,y))", "all x.((Matter(x) & (SolidPhase(x) | LiquidPhase(x))) -> InMatter(x))", "all x.(Matter(x) -> ((SolidPhase(x) | LiquidPhase(x))))", "exists x.(Matter(x) & (InSolidPhase(x) | InLiquidPhase(x)))", "all x.(Matter(x) -> (SolidPhase(x) | LiquidPhase(x)))", "all x.(Matter(x) -> (Solid(x) | Liquid(x)))", "all x.(Matter(x) -> (SilentPhase(x) | LiquidPhase(x)))", "all x.((Matter(x) & (SolidPhase(x) | LiquidPhase(x))) -> SolidPhase(x))", "all x.(Minute(x) -> (SolidPhase(x) | LiquidPhase(x)))", "all x y.((Matter(x) & SolidPhase(y)) | LiquidPhase(y))", "all x y.((Matter(x) & SolidPhase(y)) | LiquidPhase(x))"]}
{"id": "entailmentbank_validation_888", "nl": "seeing small things with bare eyes is difficult.", "fol": "", "prediction": ["all x.((SmallThing(x) & BareEyes(x)) -> DifficultToSee(x))", "all x.((SmallThing(x) & BareEyes(x)) -> Difficult(x))", "all x y.((SmallThing(x) & BareEyes(y)) -> DifficultToSee(x,y))", "all x.((SmallThings(x) & BareEyes(x)) -> DifficultToSee(x))", "all x.((SmallThing(x) & BareEyes(x)) -> DifficultToSelect(x))", "all x.((SmallThing(x) & BareEyes(x)) -> DifficultToSeeWith(x,y))", "all x y.((SmallThing(x) & BareEyes(y)) -> DifficultToSeeWith(x,y))", "all x y.((SmallThing(x) & BareEyes(y)) -> DifficultToSelect(x,y))", "all x.((SmallThings(x) & BareEyes(x)) -> Difficult(x))", "all x y.((SmallThing(x) & BareEyes(y)) -> Difficult(x))", "all x.((SmallThing(x) & BareEyes(x)) -> DifficultToSeen(x))", "all x.((SmallThing(x) & BareEyes(x)) -> DifficultToSee(x))", "all x y.((SmallThing(x) & BareEyes(y)) -> DifficultToSee(x,y))", "all x.((SeenWithBareEyes(x) & SmallThings(x)) -> Difficult(x))", "all x.((SmallTree(x) & BareEyes(x)) -> DifficultToSee(x))", "all x.((SmallThing(x) & BareEyes(x)) -> DifficultToSeeWith(x))"]}
{"id": "entailmentbank_validation_889", "nl": "an insect usually has a small size.", "fol": "", "prediction": ["all x.(Insect(x) -> SmallSize(x))", "all x.(Insect(x) -> HasSmallSize(x))", "all x.(Insect(x) -> UsuallyHasSmallSize(x))", "all x y.((Insect(x) & Insect(y)) -> SmallSize(x))", "all x.(Insect(x) -> (HasSmallSize(x) | HasSmallSize(x)))", "all x.(Insect(x) -> (HasSmallSize(x) & HasSmallSize(x)))", "all x y.((Insect(x) & Insect(y)) -> HasSmallSize(x,y))", "all x.(Insect(x) -> (HasSmallSize(x)))", "all x y.((Insect(x) & SmallSize(y)) -> Has(x,y))", "all x.(Insect(x) -> (SmallSize(x) | SmallSize(x)))", "all x y.((Insect(x) & Insect(y)) -> SmallSize(x,y))", "all x y.((Insect(x) & Insect(y)) -> UsuallyHasSmallSize(x,y))", "all x.(Insect(x) -> (HasSmallSize(x) & UsuallyHasSmallSize(x)))", "all x.(Insect(x) -> UsuallySmallSize(x))", "all x y.((Insect(x) & SmallSize(y)) -> HasSmallSize(x,y))", "all x.(Insect(x) -> (SmallSize(x) & HasSmallSize(x)))"]}
{"id": "entailmentbank_validation_890", "nl": "seeing an insect with bare eyes is difficult.", "fol": "", "prediction": ["all x.((Insect(x) & BareEyes(x)) -> DifficultToSee(x))", "all x.((Insect(x) & BareEyes(x)) -> DifficultToSeen(x))", "all x.((Insect(x) & BareEyes(x)) -> Difficult(x))", "all x y.((Insect(x) & BareEyes(y)) -> DifficultToSee(x,y))", "all x.((Insect(x) & HasBareEyes(x)) -> DifficultToSee(x))", "all x.((Insect(x) & BareEyes(x)) -> DifficultToSight(x))", "all x.((Insect(x) & HasBareEyes(x)) -> DifficultToSee(x))", "all x.((Insect(x) & HasBareEyes(x)) -> DifficultToSeen(x))", "all x.((Insect(x) & BareEyes(x)) -> DifficultToSelect(x))", "all x.((Insect(x) & HasBarbedEyes(x)) -> DifficultToSee(x))", "all x y.((Insect(x) & BareEyes(y)) -> DifficultToSeen(x,y))", "all x y.((Insect(x) & Insect(y) & BareEyes(x)) -> DifficultToSee(x,y))", "all x.((Insect(x) & BareEyes(x)) -> DifficultToSee(x,y))", "all x.((Insect(x) & HasBareEyes(x)) -> DifficultToSeen(x))", "all x.((Insect(x) & HasBareEyes(x)) -> Difficult(x))", "all x.((Insect(x) & HasBarbedEyes(x)) -> DifficultToSeen(x))"]}
{"id": "entailmentbank_validation_891", "nl": "magnifying glass is used to see small things by making objects appear bigger.", "fol": "", "prediction": ["all x.(MagnifyingGlass(x) -> (SeesSmallThings(x) & MakesObjectsAppearBigger(x)))", "all x.(MagnifyingGlass(x) -> (SeeSmallThings(x) & MakesObjectsAppearBigger(x)))", "all x.(MagnifyingGlass(x) -> (UsedToSeeSmallThings(x) & MakesObjectsAppearBigger(x)))", "all x y.((MagnifyingGlass(x) & SmallThing(y)) -> UsedToSee(x,y))", "all x.(MagnifyingGlass(x) -> (SeesSmallThings(x) & MakesObjectsAppearLarger(x)))", "all x y z.((MagnifyingGlass(x) & SmallThing(y) & Object(z)) -> SeesByAppearingBigger(x,y,z))", "all x y.((MagnifyingGlass(x) & SmallThing(y)) -> SeesByAppearingBigger(x,y))", "all x.(MagnifyingGlass(x) -> (SeesSmallThings(x) & MakesObjectsAppearsBigger(x)))", "all x.(MagnifyingGlass(x) -> (SeeSmallThings(x) & MakesObjectsAppearLarger(x)))", "all x.(MagnifyingGlass(x) -> (UsedToSeeSmallThings(x) & MakesObjectsAppearLarger(x)))", "all x y.((MagnifyingGlass(x) & SmallThing(y)) -> UsedToSeeByAppearingBigger(x,y))", "all x y.((MagnifyingGlass(x) & SmallThing(y)) -> (UsedToSee(x,y) & MakesObjectsAppearBigger(x)))", "all x y.((MagnifyingGlass(x) & SmallThing(y)) -> UsedToSeeBy(x,y))", "all x.(MagnifyingGlass(x) -> (SmallThings(x) & MakesObjectsAppearBigger(x)))", "all x y z.((MagnifyingGlass(x) & SmallThing(y) & Object(z)) -> UsedToSee(x,y,z))", "all x.(MagnifyingGlass(x) -> SeesSmallThings(x))"]}
{"id": "entailmentbank_validation_892", "nl": "magnifying glass can be used to see an insect by making it appear bigger.", "fol": "", "prediction": ["all x y.((MagnifyingGlass(x) & Insect(y)) -> CanBeUsedToSee(x,y))", "all x y.((MagnifyingGlass(x) & Insect(y) & AppearsBigger(y)) -> CanSee(x,y))", "all x y.((MagnifyingGlass(x) & Insect(y)) -> CanBeUsedToSeeByAppearingBigger(x,y))", "all x y.((MagnifyingGlass(x) & Insect(y)) -> CanSeeByAppearingBigger(x,y))", "all x y.((MagnifyingGlass(x) & Insect(y)) -> SeesByAppearingBigger(x,y))", "all x y.((MagnifyingGlass(x) & Insect(y)) -> CanSee(x,y))", "all x y.((MagnifyingGlass(x) & Insect(y)) -> SeesByAppearingBigger(y,x))", "all x y.((MagnifyingGlass(x) & Insect(y) & AppearsBigger(x,y)) -> CanSee(x,y))", "all x y.((MagnifyingGlass(x) & Insect(y) & AppearsBigger(y)) -> CanSee(x,y))", "all x y z.((MagnifyingGlass(x) & Insect(y) & Insect(z)) -> CanBeUsedToSee(x,y,z))", "all x y.((MagnifyingGlass(x) & Insect(y)) -> CanSeeByAppearingBigger(y,x))", "all x y z.((MagnifyingGlass(x) & Insect(y) & Insect(z)) -> SeesByAppearingBigger(x,y,z))", "all x y z.((MagnifyingGlass(x) & Insect(y) & Insect(z)) -> CanSeeByAppearingBigger(x,y,z))", "all x y z.((MagnifyingGlass(x) & Insect(y) & Insect(z)) -> CanSee(x,y,z))", "all x y.((MagnifyingGlass(x) & Insect(y)) -> (Sees(x,y) & AppearsBigger(y)))", "all x y.((MagnifyingGlass(x) & Insect(y) & AppearsBigger(y,x)) -> CanSee(x,y))"]}
{"id": "entailmentbank_validation_893", "nl": "a hand lens is a kind of magnifying glass.", "fol": "", "prediction": ["all x.(HandLens(x) -> MagnifyingGlass(x))", "all x y.((HandLens(x) & MagnifyingGlass(y)) -> MagnifyingGlass(x))", "all x.(HandLens(x) -> MagnifyingGlass(x))", "all x y.((HandLens(x) & MagnifyingGlass(y)) -> MagnifyingGlass(x,y))", "all x y.((HandLens(x) & HandLens(y)) -> MagnifyingGlass(x))", "all x.(HandLens(x) -> MagnificentGlass(x))", "all x y.((HandLens(x) & MagnifyingGlass(y)) -> Magnifies(x,y))", "all x.((HandLens(x) & MagnifyingGlass(x)) -> MagnifyingGlass(x))", "all x y.((HandLens(x) & HandLens(y)) -> MagnifyingGlass(x,y))", "all x y z.((HandLens(x) & MagnifyingGlass(y) & Glass(z)) -> MagnifyingGlass(x,y,z))", "all x y z.((HandLens(x) & MagnifyingGlass(y) & Glass(z)) -> MagnifyingGlass(x))", "all x y.((HandLens(x) & Glass(y)) -> Magnifying(x,y))", "all x y z.((HandLens(x) & MagnifyingGlass(y) & Glass(z)) -> Magnifies(x,y,z))", "all x y.((HandLens(x) & MagnifyingGlass(x)) -> MagnifyingGlass(y))", "all x y.((HandLens(x) & MagnifyingGlass(y)) -> MagnifiesGlass(x))", "all x y.((HandLens(x) & MagnifyingGlass(y)) -> MagnificentGlass(x))"]}
{"id": "entailmentbank_validation_894", "nl": "a hand lens can help seeing the insect by magnifying the insect.", "fol": "", "prediction": ["all x y.((HandLens(x) & Insect(y) & Magnifies(x,y)) -> HelpsSee(x,y))", "all x y.((HandLens(x) & Insect(y) & Magnifies(x,y)) -> HelpsSeeing(x,y))", "all x y.((HandLens(x) & Insect(y)) -> (HelpsSeeing(x,y) & Magnifies(x,y)))", "all x.(HandLens(x) -> (HelpsSeeingInsect(x) & MagnifiesInsect(x)))", "all x y.((HandLens(x) & Insect(y)) -> (HelpsSeeing(x,y) & Magnifies(x,y)))", "all x y.((HandLens(x) & Insect(y) & Magnifies(x,y)) -> HelpsSeeing(x,y))", "all x.(HandLens(x) -> (HelpsSeeingInsect(x) & MagnifiesInsect(x)))", "all x y.((HandLens(x) & Insect(y) & Magnifies(x,y)) -> HelpsSeeSeeing(x,y))", "all x y.((HandLens(x) & Insect(y)) -> CanHelpSeeingByMagnifying(x,y))", "all x y.((HandLens(x) & Insect(y)) -> HelpsSee(x,y))", "all x y z.((HandLens(x) & Insect(y) & Insect(z) & Magnifies(x,y,z)) -> HelpsSee(x,y,z))", "all x y.((HandLens(x) & Insect(y)) -> HelpsSeeingByMagnifying(x,y))", "all x y.((HandLens(x) & Insect(y)) -> CanHelpSeeingByMagnifying(x,y))", "all x y z.((HandLens(x) & Insect(y) & Insect(z) & Magnifies(x,y)) -> HelpsSee(x,y,z))", "all x y z.((HandLens(x) & Insect(y) & Insect(z)) -> (HelpsSeeing(x,y) & Magnifies(x,z)))", "all x y z.((HandLens(x) & Insect(y) & Insect(z)) -> (HelpsSeeing(x,y,z) & Magnifies(x,y)))"]}
{"id": "entailmentbank_validation_895", "nl": "building a doghouse requires cutting materials into a fixed size.", "fol": "", "prediction": ["all x.(Doghouse(x) -> RequiresCuttingMaterials(x))", "all x.(Doghouse(x) -> RequiresCuttingMaterialsIntoFixedSize(x))", "all x y.((Doghouse(x) & Doghouse(y)) -> RequiresCuttingMaterials(x,y))", "all x.(Doghouse(x) -> (RequiresCuttingMaterials(x) & FixedSize(x)))", "all x y.((Doghouse(x) & Doghouse(y)) -> RequiresCuttingMaterialsIntoFixedSize(x,y))", "all x.(Doghouse(x) -> (RequiresCuttingMaterials(x) & FixesSize(x)))", "all x.(Doghouse(x) -> RequiresCuttingMaterialsToFixedSize(x))", "all x y.((Doghouse(x) & Doghouse(y)) -> CutsMaterialsIntoFixedSize(x,y))", "all x y.((Doghouse(x) & Doghouse(y)) -> RequiresCuttingMaterialsToFixedSize(x,y))", "all x.((Doghouse(x) & CutsMaterials(x)) -> FixedSize(x))", "all x.(Doghouse(x) -> (RequiresCuttingMaterials(x) & FixableSize(x)))", "all x.(Doghouse(x) -> (RequiresCuttingMaterials(x) & HasFixedSize(x)))", "all x.(Doghouse(x) -> (CutsMaterials(x) & FixesSize(x)))", "all x.(Doghouse(x) -> CutsMaterialsIntoFixedSize(x))", "all x.(Doghouse(x) -> (CuttingMaterials(x) & FixedSize(x)))", "all x.((Doghouse(x) & Building(x)) -> RequiresCuttingMaterials(x))"]}
{"id": "entailmentbank_validation_896", "nl": "cutting a material usually requires measuring length.", "fol": "", "prediction": ["all x y.((Material(x) & Material(y) & Cuts(x,y)) -> RequiresMeasuringLength(x,y))", "all x.(CuttingMaterial(x) -> RequiresMeasuringLength(x))", "all x y.((Material(x) & Material(y)) -> RequiresMeasuringLength(x,y))", "all x y.((Material(x) & Material(y) & Cuts(x,y)) -> RequiresMeasuringLength(x))", "all x y.((Material(x) & Material(y)) -> MeasuringLength(x,y))", "all x y.((Material(x) & Material(y)) -> CutsRequiresMeasuringLength(x,y))", "all x y.((Material(x) & Material(y)) -> (MeasuresLength(x,y) | MeasuresLength(x,y)))", "all x y.((Material(x) & Material(y)) -> (CuttingRequiresMeasuringLength(x,y)))", "all x y.((Material(x) & Material(y)) -> UsuallyRequiresMeasuringLength(x,y))", "all x y.((Material(x) & Material(y) & Cuts(x,y)) -> RequiresMeasurementLength(x,y))", "all x y.((Material(x) & Material(y)) -> (Cutting(x,y) & RequiresMeasuringLength(x,y)))", "all x y.((Material(x) & Material(y)) -> MeasuresLength(x,y))", "all x.(Cutting(x) -> RequiresMeasuringLength(x))", "all x y.((Material(x) & Material(y)) -> (RequiresMeasuringLength(x,y)))", "all x y.((Material(x) & Material(y)) -> (Cutting(x,y) & MeasuringLength(x,y)))", "all x y.((Material(x) & Material(y)) -> RequiresMeasurementLength(x,y))"]}
{"id": "entailmentbank_validation_897", "nl": "cutting a material when building a doghouse  requires measuring length.", "fol": "", "prediction": ["all x.((CuttingMaterial(x) & BuildingDoghouse(x)) -> RequiresMeasuringLength(x))", "all x y.((Doghouse(x) & Doghouse(y)) -> (CuttingMaterial(x,y) & RequiresMeasuringLength(x,y)))", "all x y.((Doghouse(x) & Doghouse(y) & CutsMaterial(x,y)) -> RequiresMeasuringLength(x,y))", "all x y.((Doghouse(x) & Doghouse(y)) -> (CuttingMaterial(x,y) & MeasuringLength(x,y)))", "all x y.((Doghouse(x) & Doghouse(y)) -> (CuttingMaterial(x,y) & RequiresMeasuringLength(x)))", "all x y.((Doghouse(x) & Doghouse(y) & CutsMaterial(x,y)) -> RequiresMeasuringLength(x))", "all x.((Doghouse(x) & CutsMaterial(x)) -> RequiresMeasuringLength(x))", "all x y z.((Doghouse(x) & Material(y) & Doghouse(z)) -> (Cutting(x,y) & RequiresMeasuringLength(x,z)))", "all x y.((Doghouse(x) & Doghouse(y)) -> RequiresMeasuringLength(x,y))", "all x y.((Doghouse(x) & CutsMaterial(x,y) & Builds(x,y)) -> RequiresMeasuringLength(x))", "all x.((Cutting(x) & BuildingDoghouse(x)) -> RequiresMeasuringLength(x))", "all x y.((Doghouse(x) & Doghouse(y)) -> (CutsMaterial(x,y) & RequiresMeasuringLength(x,y)))", "all x y.((Doghouse(x) & Doghouse(y)) -> MeasuresLength(x,y))", "all x.((BuildsDoghouse(x) & CutsMaterial(x)) -> RequiresMeasuringLength(x))", "all x y.((Doghouse(x) & Doghouse(y)) -> (CuttingMaterial(x,y) & RequiresMeasurementLength(x,y)))", "all x.((CuttingMaterial(x) & BuildingDoghouse(x)) -> RequiresMeasurementLength(x))"]}
{"id": "entailmentbank_validation_898", "nl": "a tape can be used to measure length.", "fol": "", "prediction": ["all x.(Tape(x) -> MeasuresLength(x))", "all x.(Tape(x) -> MeasureLength(x))", "all x.((Tape(x) & MeasureLength(x)) -> CanBeUsedToMeasureLength(x))", "all x.((Tape(x) & MeasuresLength(x)) -> CanBeUsedToMeasureLength(x))", "all x y.((Tape(x) & MeasureLength(y)) -> CanBeUsedToMeasureLength(x,y))", "all x.(Tape(x) -> CanMeasureLength(x))", "all x.((Teeth(x) & MeasureLength(x)) -> CanBeUsedToMeasureLength(x))", "all x.((Tape(x) & MeasuresLength(x)) -> CanBeUsed(x))", "all x.((Teeth(x) & MeasuresLength(x)) -> CanBeUsedToMeasureLength(x))", "all x y.((Tape(x) & Tape(y)) -> MeasuresLength(x,y))", "all x.((Tape(x) & MeasureLength(x)) -> CanBeUsed(x))", "all x.(Tape(x) -> UsedToMeasureLength(x))", "all x y.((Tape(x) & Tape(y)) -> MeasureLength(x,y))", "all x.(Tape(x) -> CanBeUsedToMeasureLength(x))", "all x y.((Teeth(x) & Tape(y)) -> MeasuresLength(x,y))", "all x y.((Tape(x) & Tape(y)) -> CanMeasureLength(x,y))"]}
{"id": "entailmentbank_validation_899", "nl": "cutting wood when building a doghouse requires using a tape.", "fol": "", "prediction": ["all x y.((Doghouse(x) & Doghouse(y)) -> (CuttingWood(x,y) & RequiresTape(x)))", "all x y.((Doghouse(x) & Doghouse(y)) -> RequiresTape(x,y))", "all x y.((Doghouse(x) & Doghouse(y) & CutsWood(x,y)) -> RequiresTape(x))", "all x y.((Doghouse(x) & Doghouse(y)) -> (CuttingWood(x,y) & RequiresTape(x,y)))", "all x y.((Doghouse(x) & Doghouse(y)) -> (CutsWood(x,y) & RequiresTape(x)))", "all x y.((Doghouse(x) & Doghouse(y) & Building(x,y)) -> RequiresTape(x))", "all x.((CuttingWood(x) & BuildingDoghouse(x)) -> RequiresTape(x))", "all x.((Doghouse(x) & CutsWood(x)) -> RequiresTape(x))", "all x.((Doghouse(x) & Building(x)) -> RequiresTape(x))", "all x y.((Doghouse(x) & Doghouse(y) & CutsWood(x,y)) -> RequiresTape(x,y))", "all x y.((Doghouse(x) & Doghouse(y) & Builds(x,y)) -> RequiresTape(x))", "all x.((Doghouse(x) & Builds(x,Doghouse)) -> RequiresTape(x))", "all x y.((Doghouse(x) & Doghouse(y)) -> (CutsWood(x,y) & RequiresTape(x,y)))", "all x y z.((Doghouse(x) & Doghouse(y) & Tape(z)) -> RequiresCuttingWood(x,y,z))", "all x.((Doghouse(x) & Doghouse(x)) -> RequiresTape(x))", "all x y.((Doghouse(x) & Doghouse(y)) -> (CuttingWood(x,y) & RequiresTape(y)))"]}
{"id": "entailmentbank_validation_900", "nl": "food is a kind of substance.", "fol": "", "prediction": ["all x.(Food(x) -> Substance(x))", "all x y.((Food(x) & Substance(y)) -> SortOf(x,y))", "all x y.((Food(x) & Substance(y)) -> Substance(x))", "all x y.((Food(x) & Substance(y)) -> KindOf(x,y))", "all x y.((Food(x) & Substance(y)) -> Is(x,y))", "all x y.((Food(x) & Substance(y)) -> Substance(x,y))", "all x.(Food(x) -> Substance(x))", "all x y.((Food(x) & Substance(y)) -> TypeOf(x,y))", "all x y.((Food(x) & Substance(y)) -> FormOf(x,y))", "all x.exists y.(Food(x) & Substance(y) & Contains(x,y))", "all x y.((Food(x) & Substance(y)) -> HasSubstance(x,y))", "all x y.((Food(x) & Substance(y)) -> Affects(x,y))", "all x.exists y.(Food(x) & Substance(y) & InFood(x,y))", "all x y.((Food(x) & Substance(y)) -> Like(x,y))", "all x.(Food(x) -> (Substance(x) | Substance(x)))", "exists x.(Food(x) & Substance(x))"]}
{"id": "entailmentbank_validation_901", "nl": "candy is a kind of food.", "fol": "", "prediction": ["all x.(Candy(x) -> Food(x))", "all x.(Chocolate(x) -> Food(x))", "all x.((Candy(x) & Food(x)) -> Food(x))", "all x y.((Candy(x) & Food(y)) -> Food(x))", "all x y.((Candy(x) & Food(y)) -> Food(x,y))", "all x.(Candy(x) -> Food(x))", "all x.(Condit(x) -> Food(x))", "all x y.((Candy(x) & Food(y)) -> Is(x,y))", "exists x.(Candy(x) & Food(x))", "all x.((Candy(x) & Food(x)) -> Is(x,y))", "all x y.((Candy(x) & Food(y)) -> KindOf(x,y))", "all x.(Cocoa(x) -> Food(x))", "all x.(Cardio(x) -> Food(x))", "all x y.((Candy(x) & Food(y)) -> SortOf(x,y))", "all x.(Condiment(x) -> Food(x))", "all x.((Candy(x) & Food(x)) -> KindOf(x))"]}
{"id": "entailmentbank_validation_902", "nl": "candy is a kind of substance.", "fol": "", "prediction": ["all x.(Candy(x) -> Substance(x))", "all x.(Chocolate(x) -> Substance(x))", "all x y.((Candy(x) & Substance(y)) -> SortOf(x,y))", "all x y.((Candy(x) & Substance(y)) -> KindOf(x,y))", "all x y.((Candy(x) & Substance(y)) -> Is(x,y))", "all x.(Candy(x) -> Substance(x))", "all x.(Candy(x) -> (Substance(x) | Substance(x)))", "all x.(Candy(x) -> SortOfSubstance(x))", "all x.(Candy(x) -> Material(x))", "all x.(Condit(x) -> Substance(x))", "all x.(Candy(x) -> (Substance(x) & Contains(x)))", "all x.((Candy(x) & Substance(x)) -> Is(x,y))", "all x.((Candy(x) & Substance(x)) -> KindOf(x))", "all x.(Candy(x) -> IsSubstance(x))", "all x y.((Candy(x) & Substance(y)) -> Substance(x))", "all x.((Candy(x) & Substance(x)) -> SortOf(x))"]}
{"id": "entailmentbank_validation_903", "nl": "a thermometer is used to measure temperature of substance.", "fol": "", "prediction": ["all x y.((Thermometer(x) & Substance(y)) -> MeasuresTemperature(x,y))", "all x.(Thermometer(x) -> MeasuresTemperatureOfSubstance(x))", "all x y z.((Thermometer(x) & Substance(y) & Temperature(z)) -> Measures(x,y,z))", "all x y.((Thermometer(x) & Substance(y)) -> UsedToMeasureTemperature(x,y))", "all x y.((Thermometer(x) & Substance(y)) -> MeasuresTemperatureOf(x,y))", "all x y z.((Thermometer(x) & Substance(y) & Substance(z)) -> MeasuresTemperature(x,y,z))", "all x.(Thermometer(x) -> MeasuresTemperature(x))", "all x.(Thermometer(x) -> UsedToMeasureTemperatureOfSubstance(x))", "all x y z.((Thermometer(x) & Substance(y) & Temperature(z)) -> UsedToMeasure(x,y,z))", "all x y z.((Thermometer(x) & Substance(y) & Material(z)) -> MeasuresTemperature(x,y,z))", "all x y.((Thermometer(x) & Substance(y) & MeasuresTemperature(x,y)) -> UsedToMeasure(x,y))", "all x y z.((Thermometer(x) & Substance(y) & MeasuresTemperature(x,y)) -> UsedToMeasure(x,z))", "all x y z.((Thermometer(x) & Substance(y) & Temperature(z)) -> Measured(x,y,z))", "all x y z.((Thermometer(x) & Substance(y) & Temperature(z)) -> Measure(x,y,z))", "all x y z.((Thermometer(x) & Substance(y) & Temperature(z)) -> Measures(x,y))", "all x y.((Thermometer(x) & Substance(y)) -> MeasuresTemperature(x,y))"]}
{"id": "entailmentbank_validation_904", "nl": "a thermometer is used to measure the temperautre of the candy.", "fol": "", "prediction": ["all x y.((Thermometer(x) & Candy(y)) -> MeasuresTemperature(x,y))", "all x.(Thermometer(x) -> MeasuresTemperatureOfCandy(x))", "all x y.((Thermometer(x) & Candy(y)) -> MeasuresTemperatureOf(x,y))", "all x y z.((Thermometer(x) & Candy(y) & Tempestautre(z)) -> Measures(x,y,z))", "all x y z.((Thermometer(x) & Candy(y) & Temperance(z)) -> Measures(x,y,z))", "all x y z.((Thermometer(x) & Candy(y) & Candy(z)) -> MeasuresTemperature(x,y,z))", "all x y.((Thermometer(x) & Candy(y) & MeasuresTemperature(x,y)) -> UsedToMeasure(x,y))", "all x y.((Thermometer(x) & Candy(y)) -> UsedToMeasureTemperature(x,y))", "all x y.((Thermometer(x) & Candy(y) & MeasuresTemperature(x,y)) -> MeasuresTemperature(x,y))", "all x y z.((Thermometer(x) & Candy(y) & Temperature(z)) -> Measures(x,y,z))", "all x y.((Thermometer(x) & Candy(y)) -> MeasuresTemperautre(x,y))", "all x.(Thermometer(x) -> MeasuresTemperature(x))", "all x y z.((Thermometer(x) & Candy(y) & Candy(z)) -> MeasuresTemperatureOf(x,y,z))", "all x y.((Thermometer(x) & Candy(y) & MeasuresTemperature(x,y)) -> UsedFor(x,y))", "all x y z.((Thermometer(x) & Candy(y) & TemperanceAnother(z)) -> Measures(x,y,z))", "all x y.((Thermometer(x) & Candy(y)) -> MeasuresTemperature(x,y))"]}
{"id": "entailmentbank_validation_905", "nl": "a string is short in length.", "fol": "", "prediction": ["all x.(String(x) -> ShortLength(x))", "all x.(String(x) -> ShortInLength(x))", "exists x.(String(x) & ShortLength(x))", "all x.((String(x) & ShortLength(x)) -> ShortLength(x))", "all x y.((String(x) & String(y)) -> ShortLength(x,y))", "all x y.((String(x) & String(y)) -> ShortLength(x))", "all x.(String(x) -> ShortLength(x))", "all x y.((String(x) & ShortLength(y)) -> ShortLength(x))", "all x y.((String(x) & ShortLength(x)) -> ShortLength(y))", "all x y.((String(x) & ShortLength(y)) -> ShortLength(x,y))", "all x y.((String(x) & String(y)) -> ShortInLength(x,y))", "all x.(String(x) -> ShortEndLength(x))", "all x y.((String(x) & ShortLength(x)) -> ShortLength(x))", "all x y.((String(x) & String(y)) -> ShortInLength(x))", "all x.((String(x) & ShortLength(x)) -> Short(x))", "all x.((String(x) & ShortLength(x)) -> ShortInLength(x))"]}
{"id": "entailmentbank_validation_906", "nl": "centimeter is usually used to measure short length.", "fol": "", "prediction": ["all x.(Centimeter(x) -> UsedToMeasureShortLength(x))", "all x.(Centimeter(x) -> MeasuresShortLength(x))", "all x.((Centimeter(x) & ShortLength(x)) -> UsedToMeasure(x,y))", "all x.(Centrimeter(x) -> UsedToMeasureShortLength(x))", "all x y.((Centimeter(x) & ShortLength(y)) -> UsedToMeasure(x,y))", "all x.(Centric(x) -> UsedToMeasureShortLength(x))", "all x.(Centimeter(x) -> UsedForShortLength(x))", "all x.((Centimeter(x) & ShortLength(x)) -> UsedToMeasure(x))", "all x.(Centrimeter(x) -> MeasuresShortLength(x))", "all x.((Centimeter(x) & ShortLength(x)) -> Measures(x,y))", "all x y.((Centimeter(x) & ShortLength(y)) -> Measures(x,y))", "all x.((Centimeter(x) & ShortLength(x)) -> UsedForMeasurement(x))", "all x.(Centric(x) -> MeasuresShortLength(x))", "all x.(Centimeter(x) -> MeasuresShortLength(x))", "all x.((Centrimeter(x) & ShortLength(x)) -> UsedToMeasure(x,y))", "all x.(Cencimeter(x) -> UsedToMeasureShortLength(x))"]}
{"id": "entailmentbank_validation_907", "nl": "centimeter is a better unit to measure the length of the string.", "fol": "", "prediction": ["all x.(Centimeter(x) -> BetterUnitToMeasureLengthOfString(x))", "all x.((Centimeter(x) & String(y)) -> BetterUnitToMeasureLength(x,y))", "all x.(Centimeter(x) -> BetterUnitToMeasureStringLength(x))", "all x.((Centimeter(x) & MeasuresStringLength(x)) -> BetterUnit(x))", "all x y.((Centimeter(x) & String(y)) -> BetterUnitToMeasureLength(x,y))", "all x.((Centimeter(x) & MeasuresLengthOfString(x)) -> BetterUnit(x))", "all x.((Centimeter(x) & MeasureLengthOfString(x)) -> BetterUnit(x))", "all x.((Centimeter(x) & MeasuresStringLength(x)) -> BetterUnitToMeasureStringLength(x))", "all x.(Centimeter(x) -> BetterUnitToMeasureLength(x))", "all x.((Centimeter(x) & String(y)) -> MeasuresLength(x,y))", "all x.(Centimeter(x) -> BetterUnitForMeasuringStringLength(x))", "all x.((Centimeter(x) & String(y)) -> BetterUnitForMeasuringLength(x,y))", "all x.((Centimeter(x) & MeasureLengthOfString(x)) -> BetterUnitToMeasureLengthOfString(x))", "all x.((Centimeter(x) & MeasuresLengthOfString(x)) -> BetterUnitToMeasureLengthOfString(x))", "all x.((Centimeter(x) & MeasuresStringLength(x)) -> BetterUnitForString(x))", "all x.((Centimeter(x) & MeasureLengthOfString(x)) -> BetterUnitToMeasureLength(x))"]}
{"id": "entailmentbank_validation_908", "nl": "meters m are a metric / si unit used for measuring length.", "fol": "", "prediction": ["all x.(MeasuresLength(x) -> (MeasuresLength(x) & MeasuresLength(x)))", "all x.(Meter(x) -> (MeasuresLength(x) & MeasuresLength(x)))", "all x.(Measurement(x) -> (MetalUnit(x) & SiUnit(x) & UsedForMeasuringLength(x)))", "all x.(Meter(x) -> (Meter(x) & SiUnit(x) & UsedForMeasuringLength(x)))", "all x.(Measurement(x) -> (MeasuresLength(x) & MeasuresLength(x)))", "all x.(Meter(x) -> (Meter(x) & SiUnit(x) & MeasuresLength(x)))", "all x.(MeasuresLength(x) -> (MetalUnit(x) & SiUnit(x)))", "all x.(Measurement(x) -> (MetalUnit(x) & SiUnit(x) & MeasuresLength(x)))", "all x.(MeasuresLength(x) -> (MeasuresLength(x) | MeasuresLength(x)))", "all x.(Meter(x) -> (MeterUnit(x) & SiUnit(x) & MeasuresLength(x)))", "all x.(Meter(x) -> (MeasuresLength(x) | MeasuresLength(x)))", "all x.(MeasuresLength(x) -> (MetalUnit(x) | SiUnit(x)))", "all x.(MeasuresLength(x) -> (MeasuresLength(x) & MeasuresLength(x)))", "all x.(Measurement(x) -> (Measurement(x) & Measurement(x) & Measurement(x)))", "all x.(Meter(x) -> (MeterUnit(x) & MeasuringLength(x)))", "all x.(Meter(x) -> (MeterUnit(x) & MeasuresLength(x)))"]}
{"id": "entailmentbank_validation_909", "nl": "yard is an imperial unit used for measuring length.", "fol": "", "prediction": ["all x.(MeasuresLength(x) -> ImperialUnit(x))", "all x.(Garden(x) -> (ImperialUnit(x) & UsedForMeasuringLength(x)))", "all x.(Garden(x) -> (ImperialUnit(x) & MeasuresLength(x)))", "all x.(Garage(x) -> (ImperialUnit(x) & UsedForMeasuringLength(x)))", "all x.(Garage(x) -> (ImperialUnit(x) & MeasuresLength(x)))", "all x.((Garden(x) & ImperialUnit(x)) -> UsedForMeasuringLength(x))", "all x.((Garden(x) & ImperialUnit(x) & UsedForMeasuringLength(x)) -> MeasuresLength(x))", "all x.((Garden(x) & ImperialUnit(x) & UsedForMeasuringLength(x)) -> UsedForMeasuringLength(x))", "all x.(MeasuresLength(x) -> ImperialUnit(x))", "all x y.((Garden(x) & ImperialUnit(y)) -> UsedForMeasuringLength(x,y))", "all x.((Garden(x) & ImperialUnit(x) & MeasuresLength(x)) -> MeasuresLength(x))", "all x y.((Garden(x) & ImperialUnit(y)) -> MeasuresLength(x,y))", "all x.(Garden(x) -> (ImperialUnit(x) & UsedForMetaphoringLength(x)))", "all x.((Garden(x) & ImperialUnit(x)) -> MeasuresLength(x))", "all x.((Garage(x) & ImperialUnit(x)) -> UsedForMeasuringLength(x))", "all x.(MeasureLength(x) -> ImperialUnit(x))"]}
{"id": "entailmentbank_validation_910", "nl": "yard and meter are both unit used for measuring length.", "fol": "", "prediction": ["(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength))))", "(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength))))", "(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength))))", "(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength))))", "(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength))))", "(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength)))", "(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength))", "(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength)))", "(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength))", "(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength))))", "(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength)MeasuresLength)MeasuresLength)MeasuresLength)MeasuresLength)MeasuresLength)MeasuresLength)", "(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength)MeasuresLength)MeasuresLength)MeasuresLength)MeasuresLength)MeasuresLength)MeasuresLength)", "(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength))", "(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength)MeasuresLength)MeasuresLength)MeasuresLength)MeasuresLength)MeasuresLength)MeasuresLength)MeasuresLength)", "(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength)MeasuresLength)MeasuresLength)MeasuresLength)MeasuresLength)MeasuresLength)MeasuresLength)MeasuresLength)", "(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength(MeasuresLength)))"]}
{"id": "entailmentbank_validation_911", "nl": "1 yard equals to 09 meter.", "fol": "", "prediction": ["all x.((Garden(x) & Yard(x)) -> 9Meter(x))", "all x.((Garden(x) & Yard(x)) -> NumberOfMeter(x,9))", "all x.((Garden(x) & Yard(x)) -> (09Meter(x)))", "all x y.((Garden(x) & Yard(y)) -> EquivalentTo(x,y))", "all x.((Garage(x) & Yard(x)) -> 9Meter(x))", "all x.((Garden(x) & Yard(x,9)) -> Equivalent(x,9))", "all x y.((Garage(x) & Yard(y)) -> EquivalentTo(x,y))", "all x.((Garden(x) & Yard(x)) -> EquivalentTo(x,09))", "all x.((Garage(x) & Yard(x,9)) -> Equivalent(x,9))", "all x.((Garden(x) & Yard(x)) -> EquivalentTo(x,9))", "all x.((Garden(x) & Yard(x,9)) -> Meter(x,9))", "all x y.((Garden(x) & Yard(y)) -> Equals(x,y))", "all x y.((Garden(x) & Yard(y)) -> Equivalent(x,y))", "all x.((Garden(x) & Yard(x)) -> NumberOfMeter(x,09))", "all x.((Garden(x) & Yard(x)) -> Equivalent(x,09))", "all x.((Garden(x) & Yard(x,09)) -> Equivalent(x,9))"]}
{"id": "entailmentbank_validation_912", "nl": "meter is the metric unit that is the most similar to yard.", "fol": "", "prediction": ["all x y.((Meter(x) & Yard(y)) -> MostSameUnit(x,y))", "all x y.((Meter(x) & Yard(y)) -> Similar(x,y))", "all x y.((Meter(x) & Yard(y)) -> MostSimilarTo(x,y))", "all x y.((Meter(x) & Yard(y)) -> SimilarTo(x,y))", "all x y.((Meter(x) & Yard(y)) -> MOSTSameUnit(x,y))", "all x y z.((Meter(x) & Yard(y) & MetricUnit(z)) -> SimilarTo(x,y,z))", "all x.(Meter(x) -> (MetalUnit(x) & MostSameToGarden(x)))", "all x y z.((Meter(x) & Yard(y) & MetricUnit(z)) -> MostSameTo(x,y,z))", "all x.(Meter(x) -> (MetricUnit(x) & MostSameToGarden(x)))", "all x.(Meter(x) -> SimilarToGarden(x))", "all x y.((Meter(x) & Yard(y)) -> MostSameMeter(x,y))", "all x y.((Meter(x) & Yard(y)) -> MostSame(x,y))", "all x.(Meter(x) -> (MeterUnit(x) & MostSameToGarden(x)))", "all x y z.((Meter(x) & Yard(y) & MetricUnit(z)) -> MostSimilarTo(x,y,z))", "all x.(Meter(x) -> (MetalUnit(x) & SimilarToGarden(x)))", "all x.(Meter(x) -> (MetalUnit(x) & MostSimilarToGarden(x)))"]}
{"id": "entailmentbank_validation_913", "nl": "zinc is a kind of metal.", "fol": "", "prediction": ["all x.(Zinc(x) -> Metal(x))", "all x y.((Zinc(x) & Metal(y)) -> Metal(x))", "all x y.((Zinc(x) & Metal(y)) -> Metal(x,y))", "all x.(Zinc(x) -> Metal(x))", "all x.((Zinc(x) & Metal(x)) -> Metal(x))", "all x y z.((Zinc(x) & Metal(y) & Metal(z)) -> Metal(x,y,z))", "all x y z.((Zinc(x) & Metal(y) & Metal(z)) -> Metal(x))", "all x y.((Zinc(x) & Metal(y)) -> Metal(z))", "all x.(Zinc(x) -> (Metal(x) & Metal(x)))", "exists x.(Zinc(x) & Metal(x))", "all x y z.((Zinc(x) & Metal(y) & Metal(z)) -> Metal(x,y))", "all x y z.((Zinc(x) & Metal(y) & Metal(z)) -> Metal(y))", "all x y.((Zinc(x) & Metal(y)) -> (Metal(x) & Metal(y)))", "all x y.((Zinc(x) & Metal(y)) -> Metal(y))", "all x y z.((Zinc(x) & Metal(y) & Metal(z)) -> Metal(z))", "(all x.(Zinc(x) -> Metal(x)))"]}
{"id": "entailmentbank_validation_914", "nl": "copper is a kind of metal.", "fol": "", "prediction": ["all x.(Cuivre(x) -> Metal(x))", "all x.(Cuircon(x) -> Metal(x))", "all x.(Copper(x) -> Metal(x))", "all x.(Cuid(x) -> Metal(x))", "all x y.((Cuivre(x) & Metal(y)) -> Metal(x))", "all x.(Cuirc(x) -> Metal(x))", "all x.(Cuiper(x) -> Metal(x))", "all x.(Cuivre(x) -> Metal(x))", "all x y.((Cuir(x) & Metal(y)) -> Metal(x))", "all x.(Cuircone(x) -> Metal(x))", "all x y.((Cuivre(x) & Metal(y)) -> Metal(x,y))", "all x y.((Cuir(x) & Metal(y)) -> Metal(x,y))", "all x.(Cuir(x) -> Metal(x))", "all x.(Cuip(x) -> Metal(x))", "all x.(Cupulb(x) -> Metal(x))", "all x.(Cuircon(x) -> Metal(x))"]}
{"id": "entailmentbank_validation_915", "nl": "copper and zinc are two metals.", "fol": "", "prediction": ["all x.((Metal(x) & Copper(x) & Zinc(x)) -> Metal(x))", "all x.((Metal(x) & Metal(x)) -> (Copper(x) & Zinc(x)))", "all x.((Metal(x) & Metal(x) & Copper(x) & Zinc(x)) -> Metal(x))", "all x.((Metal(x) & Metal(x)) -> (Cuid(x) & Zinc(x)))", "all x.((Metal(x) & Metal(x)) -> (Copper(x) | Zinc(x)))", "all x y.((Metal(x) & Metal(y) & Copper(x) & Zinc(y)) -> Metal(x,y))", "all x.((Metal(x) & Metal(x)) -> (Cuid(x) | Zinc(x)))", "(Metal(copper) & Metal(zinc))", "all x.((Metal(x) & Metal(x)) -> (Cuivre(x) | Zinc(x)))", "all x.((Metal(x) & Metal(x)) -> (Cuircon(x) & Metal(x) & Zinc(x)))", "all x.((Metal(x) & Metal(x)) -> (Cuivre(x) & Metal(x) & Metal(x)))", "all x.((Metal(x) & Metal(x)) -> (Cuiper(x) & Zinc(x)))", "all x.((Metal(x) & Metal(x)) -> (Cuirc(x) & Zinc(x)))", "all x.((Metal(x) & Metal(x)) -> (Cuircon(x) & Zinc(x)))", "all x y.((Metal(x) & Metal(y)) -> (Cuid(x) & Zinc(y)))", "(Material(copper) & Metal(zinc))"]}
{"id": "entailmentbank_validation_916", "nl": "brass is made of copper and zinc.", "fol": "", "prediction": ["all x.(Brass(x) -> (MadeOfCopper(x) & MadeOfZinc(x)))", "all x.(Brass(x) -> (MadeOf(x,Copper) & MadeOf(x,Zinc)))", "all x.(Brass(x) -> (MadeOfCuid(x) & MadeOfZinc(x)))", "all x.(Brass(x) -> (MadeOf(x,Cuid) & MadeOf(x,Zinc)))", "all x.(Brass(x) -> (MadeOf(x,Cuir) & MadeOf(x,Zinc)))", "all x.(Brass(x) -> (MadeOf(x,Cuid,Zinc) & MadeOf(x,Zinc)))", "all x.(Brass(x) -> (MadeOf(x,Copper) & MadeOf(x,Zinc)))", "all x.(Brass(x) -> (MadeOf(x,copper) & MadeOf(x,zinc)))", "all x.(Brass(x) -> (MadeOf(x,Cuiper) & MadeOf(x,Zinc)))", "all x.(Brass(x) -> (MadeOfCopper(x) & MadeOfZinc(x)))", "all x y.((Brass(x) & Copper(y) & Zinc(z)) -> MadeOf(x,y,z))", "all x.(Brass(x) -> (MadeOfCuid(x) & MadeOfZinc(x)))", "all x.(Brass(x) -> (MadeOfCuiper(x) & MadeOfZinc(x)))", "all x.(Brass(x) -> (MadeOf(x,Cuid) & MadeOf(x,Zinc)))", "all x.(Brass(x) -> (MadeOf(x,Cuid,Zinc)))", "all x.(Brass(x) -> (Copper(x) & Zinc(x)))"]}
{"id": "entailmentbank_validation_917", "nl": "brass is made of two metals.", "fol": "", "prediction": ["all x.(Brass(x) -> MadeOfTwoMetals(x))", "all x y.((Brass(x) & Metal(y)) -> MadeOf(x,y))", "all x y z.((Brass(x) & Metal(y) & Metal(z)) -> MadeOf(x,y,z))", "all x.(Brass(x) -> exists y.(Metal(y) & Metal(z) & MadeOf(x,y,z)))", "all x.(Brass(x) -> (MadeOfTwoMetals(x)))", "all x.(Ball(x) -> MadeOfTwoMetals(x))", "all x.(Brass(x) -> exists y.(Metal(y) & Metal(z) & MadeOf(x,y,z))))", "all x.(Brass(x) -> MadeOfTwoMetal(x))", "all x.(Brass(x) -> exists y.(Metal(y) & Metal(z)) & MadeOf(x,y,z)))", "all x.(Brass(x) -> (MadeOfTwoMetals(x) & MadeOfTwoMetals(x)))", "all x.(Brass(x) -> MadeOfTwoMetals(x))", "all x.(Brass(x) -> MadeOfMetals(x,2))", "all x.(Balloy(x) -> MadeOfTwoMetals(x))", "all x.(Brass(x) -> exists y.(Metal(y) & Metal(z) & MadeOf(x,z))))", "all x.(Brass(x) -> (MadeOf(x,2) & MadeOf(x,2)))", "all x.(Brass(x) -> (MadeOfMetals(x) & MadeOfMetals(x)))"]}
{"id": "entailmentbank_validation_918", "nl": "an alloy is made of two or more metals.", "fol": "", "prediction": ["all x.(Alloy(x) -> exists y.(Metal(y) & MadeOf(x,y))))", "all x.(Alloy(x) -> (MadeOfMetals(x,2) | MadeOfMetals(x,3)))", "all x y.((Alloy(x) & Metal(y)) -> MadeOf(x,y))", "all x.(Alloy(x) -> (MadeOfTwoOrMoreMetals(x)))", "all x.(Alloy(x) -> exists y.(Metal(y) & Metal(z) & MadeOf(x,y,z))))", "all x.(Alloy(x) -> exists y.(Metal(y) & MadeOf(x,y)))", "all x.(Alloy(x) -> exists y z.(Metal(y) & Metal(z) & MadeOf(x,y,z))))", "all x y z.((Alloy(x) & Metal(y) & Metal(z)) -> MadeOf(x,y,z))", "all x.(Alloy(x) -> (MadeOfMetals(x,2) | MadeOfMetals(x,3)))", "all x.(Alloy(x) -> (MadeOfMetals(x,2) | MadeOfMoreMetals(x,3)))", "all x.(Alloy(x) -> MadeOfTwoOrMoreMetals(x))", "all x.(Alloy(x) -> (MadeOfMetal(x,2) | MadeOfMetal(x,3)))", "all x.(Alloy(x) -> exists y.(Metal(y) & MadeOf(x,y))))", "all x.(Alloy(x) -> exists y.(Metal(y) & Metal(y) & MadeOf(x,y))))", "all x.(Alloy(x) -> (MadeOfTwoOrMoreMetals(x)))", "all x.(Alloy(x) -> exists y.(Metal(y) & Metal(z) & MadeOf(x,y,z)))"]}
{"id": "entailmentbank_validation_919", "nl": "brass is a kind of alloy.", "fol": "", "prediction": ["all x.(Brass(x) -> Alloy(x))", "all x.(Balloy(x) -> Alloy(x))", "all x y.((Brass(x) & Alloy(y)) -> Alloy(x,y))", "all x.(Brass(x) -> Alloy(x))", "all x.((Brass(x) & Alloy(x)) -> Alloy(x))", "all x y.((Brass(x) & Alloy(y)) -> Alloy(x))", "all x.(Bross(x) -> Alloy(x))", "all x y.((Brass(x) & Alloy(y)) -> Is(x,y))", "all x y.((Brass(x) & Alloy(y)) -> Alloy(y))", "all x.(Balloy(x) -> Alloy(x))", "all x.(Brost(x) -> Alloy(x))", "all x.(Bulb(x) -> Alloy(x))", "all x.(Brass(x) -> (Alloy(x) & Alloy(x)))", "all x y.((Brass(x) & Alloy(y)) -> Alloy(z))", "all x y.((Brass(x) & Alloy(x)) -> Alloy(y))", "all x.(Blend(x) -> Alloy(x))"]}
{"id": "entailmentbank_validation_920", "nl": "a rough surface can absorb sound.", "fol": "", "prediction": ["all x.(RoughSurface(x) -> CanAbsorbSound(x))", "all x.(RoughSurface(x) -> AbsorbsSound(x))", "all x.(RoughSurface(x) -> AbsorbSound(x))", "all x.((RoughSurface(x) & AbsorbsSound(x)) -> CanAbsorbSound(x))", "all x y.((RoughSurface(x) & Sound(y)) -> CanAbsorb(x,y))", "all x.((RoughSurface(x) & CanAbsorbSound(x)) -> CanAbsorbSound(x))", "all x.((RoughSurface(x) & AbsorbSound(x)) -> CanAbsorbSound(x))", "all x y.((RoughSurface(x) & Sound(y)) -> Absorbs(x,y))", "all x y z.((RoughSurface(x) & Sound(y) & Sound(z)) -> CanAbsorb(x,y,z))", "all x y z.((RoughSurface(x) & Sound(y) & Sound(z)) -> Absorbs(x,y,z))", "all x y.((RoughSurface(x) & Sound(y) & Absorbs(x,y)) -> CanAbsorb(x,y))", "all x y.((RoughSurface(x) & Sound(y)) -> Absorb(x,y))", "all x.((RoughSurface(x) & AbsorbsSound(x)) -> AbsorbsSound(x))", "all x y.((RoughSurface(x) & Sound(y) & CanAbsorb(x,y)) -> CanAbsorb(x,y))", "all x y.((RoughSurface(x) & Sound(y) & Absorb(x,y)) -> CanAbsorb(x,y))", "all x.((RoughSurface(x) & CanAbsorbSound(x)) -> AbsorbSound(x))"]}
{"id": "entailmentbank_validation_921", "nl": "a carpet can absorb sound.", "fol": "", "prediction": ["all x.(Cedar(x) -> CanAbsorbSound(x))", "all x.(Cedar(x) -> AbsorbsSound(x))", "all x.(Carpet(x) -> CanAbsorbSound(x))", "all x.(Kitchen(x) -> CanAbsorbSound(x))", "all x.(Carpet(x) -> AbsorbsSound(x))", "all x.(Tread(x) -> CanAbsorbSound(x))", "all x.(Kitchen(x) -> AbsorbsSound(x))", "all x.(Marble(x) -> CanAbsorbSound(x))", "all x.(Tread(x) -> AbsorbsSound(x))", "all x.(Marble(x) -> AbsorbsSound(x))", "all x.((Marble(x) & AbsorbsSound(x)) -> CanAbsorbSound(x))", "all x.((Marble(x) & AbsorbsSound(x)) -> Carpet(x))", "all x.(Candle(x) -> CanAbsorbSound(x))", "all x.(Cathedral(x) -> CanAbsorbSound(x))", "all x.(Cathedral(x) -> AbsorbsSound(x))", "all x.(Candle(x) -> AbsorbsSound(x))"]}
{"id": "entailmentbank_validation_922", "nl": "if sound is absorbed, then sound can not reflect off the surface.", "fol": "", "prediction": ["all x.((SoundAbsorbed(x) & SoundCannotReflectOffSurface(x)) -> -ReflectOffSurface(x))", "all x.((SoundAbsorbed(x) & SoundCannotReflectOffSurface(x)) -> -ReflectsOffSurface(x))", "all x.((SoundAbsorbed(x) & SoundCannotReflectOffSurface(x)) -> -ReflectOffSurface(x))", "all x.((Sound(x) & Absorbed(x)) -> SoundCannotReflectOffSurface(x))", "all x.((SoundAbsorbed(x) & SoundCannotReflectOffSurface(x)) -> -CanReflectOffSurface(x))", "all x.((SoundAbsorbed(x) & -ReflectsOffSurface(x)) -> SoundCannotReflectOffSurface(x))", "all x.((Sound(x) & Absorbed(x)) -> -ReflectsOffSurface(x))", "all x.((SoundAbsorbed(x) & -ReflectOffSurface(x)) -> SoundCannotReflectOffSurface(x))", "all x.((SoundAbsorbed(x) & SoundCannotReflectOffSurface(x)) -> -Reflect(x))", "all x.((SoundAbsorbed(x) & SoundReflectsOffSurface(x)) -> -ReflectsOffSurface(x))", "all x.((SoundAbsorbed(x) & SoundCannotReflectOffSurface(x)) -> -ReflectOfSurface(x))", "all x.((SoundAbsorbed(x) & SoundCannotReflectOffSurface(x)) -> -ReflectOnSurface(x))", "all x.((SoundAbsorbed(x) & SoundCannotReflectOffSurface(x)) -> -SoundReflectsOffSurface(x))", "all x.((SoundAbsorbed(x) & SoundCannotReflectOffSurface(x)) -> -ReflectSurface(x))", "all x y.((Sound(x) & Absorbed(x)) -> -ReflectsOffSurface(y))", "all x.((SoundAbsorbed(x)) -> SoundCannotReflectOffSurface(x))"]}
{"id": "entailmentbank_validation_923", "nl": "sound cannot reflect off the surface of a carpet.", "fol": "", "prediction": ["all x y.((Sound(x) & Carpet(y)) -> -ReflectsOffSurface(x,y))", "all x.((Sound(x) & Carpet(y)) -> -ReflectsOffSurface(x,y))", "all x y z.((Sound(x) & Carpet(y) & Surface(z)) -> -ReflectsOff(x,y,z))", "all x y.((Sound(x) & Carpet(y)) -> -ReflectOffSurface(x,y))", "all x.((Sound(x) & Carpet(x)) -> -ReflectsOffSurface(x))", "all x.((Sound(x) & CarpetSurface(x)) -> -ReflectsOffSurface(x))", "all x.((Sound(x) & CarpetSurface(x)) -> -ReflectsOff(x,y))", "all x y.((Sound(x) & CarpetSurface(y)) -> -ReflectsOff(x,y))", "all x y.((Sound(x) & CarpetSurface(y)) -> -ReflectsOffSurface(x,y))", "all x.((Sound(x) & Carpet(y)) -> -ReflectOffSurface(x,y))", "all x y.((Sound(x) & Carpet(y)) -> -Reflect(x,y))", "all x y.((Sound(x) & Carpet(y)) -> CannotReflectOffSurface(x,y))", "all x y z.((Sound(x) & Carpet(y) & Surface(z)) -> -ReflectOff(x,y,z))", "all x y.((Sound(x) & Carpet(y)) -> -ReflectsOff(x,y))", "all x.((Sound(x) & CarpetSurface(x)) -> -ReflectsOff(x))", "all x.((Sound(x) & CarpetSurface(x)) -> -ReflectOffSurface(x))"]}
{"id": "entailmentbank_validation_924", "nl": "echo is when sound reflects off a smooth surface.", "fol": "", "prediction": ["all x y.((Echo(x) & Sound(y)) -> ReflectsOffSmoothSurface(x,y))", "all x.(Echo(x) -> (SoundReflectsOffSmoothSurface(x)))", "all x.(Echo(x) -> ReflectsSoundOffSmoothSurface(x))", "all x y z.((Echo(x) & Sound(y) & SmoothSurface(z)) -> ReflectsOff(x,y,z))", "all x.(Echo(x) -> ReflectsSoundOffSmoothSurface(x))", "all x y.((Echo(x) & Sound(y) & SmoothSurface(y)) -> ReflectsOff(x,y))", "all x y.((Echo(x) & Sound(y) & SmoothSurface(z)) -> ReflectsOff(x,y,z))", "all x.(Echo(x) -> SoundReflectsOffSmoothSurface(x))", "all x.(Echo(x) -> ReflectsOffSmoothSurface(x))", "all x.(Echo(x) -> ReflectsOffSmoothSurface(x))", "all x y z.((Echo(x) & Sound(y) & SmoothSurface(z)) -> ReflectsOff(y,z))", "all x y.((Sound(x) & SmoothSurface(y)) -> ReflectsOff(x,y))", "all x.(Echo(x) -> (ReflectsSoundOffSmoothSurface(x)))", "all x y.((Echo(x) & Sound(y)) -> ReflectsOffSmoothSurface(y,x))", "all x.(Echo(x) -> SoundReflectsOffSmoothSurface(x))", "all x.(Echo(x) -> (SoundReflectsOffSmoothSurface(x)))"]}
{"id": "entailmentbank_validation_925", "nl": "echo will not be produced.", "fol": "", "prediction": ["all x.(Echo(x) -> -Produced(x))", "all x.((Echo(x) & -Produced(x)) -> -Produced(x))", "(all x.(Echo(x) -> -Produced(x)))", "all x y.((Echo(x) & -Produced(y)) -> -Produced(x,y))", "all x y.((Echo(x) & Product(y)) -> -Produced(x,y))", "all x.(Echo(x) -> -Produced(x))", "All x.(Echo(x) -> -Produced(x))", "all x.(Echo(x) -> -(Produced(x) | Produced(x)))", "all x y.((Echo(x) & -Produced(y)) -> -Produced(x))", "all x y.((Echo(x) & Product(y)) -> -Produced(x))", "all x.(Echo(x) -> -(Produced(x) & Produced(x)))", "all x.(Echo(x) -> -(Produced(x) | Produced(x))))", "exists x.(Echo(x) & -Produced(x))", "ALL x.(Echo(x) -> -Produced(x))", "all x.(Echo(x) -> -produced(x))", "all x y.((Echo(x) & -Produced(y)) -> -Produced(y))"]}
{"id": "entailmentbank_validation_926", "nl": "helium is less in density than air.", "fol": "", "prediction": ["all x y.((Helium(x) & Air(y)) -> LessDensity(x,y))", "all x y.((Helium(x) & Air(y)) -> LessInDensity(x,y))", "all x.(Helium(x) -> LessDensityThanAir(x))", "all x.(Helium(x) -> LessInDensityThanAir(x))", "all x y.((Helium(x) & Air(y)) -> LessDensityThan(x,y))", "all x y.((Helium(x) & Air(y)) -> LessInDensityThan(x,y))", "all x y z.((Helium(x) & Air(y) & Density(z)) -> LessInDensity(x,y,z))", "all x.(Helium(x) -> LessInDensity(x))", "all x.(Helium(x) -> LessDensity(x))", "all x y.((Hylium(x) & Air(y)) -> LessDensity(x,y))", "all x y.((Hylium(x) & Air(y)) -> LessInDensity(x,y))", "all x.(Helium(x) -> LessDensity(x,Air))", "all x y z.((Helium(x) & Air(y) & Density(z)) -> LessInDensity(x,z))", "all x y z.((Helium(x) & Air(y) & Density(z)) -> LessThan(x,y,z))", "all x y.((Helium(x) & Air(y)) -> LessDensityInDensity(x,y))", "all x y.((Helium(x) & Air(y)) -> DensityLessThan(x,y))"]}
{"id": "entailmentbank_validation_927", "nl": "a balloon is a kind of container.", "fol": "", "prediction": ["all x.(Balloon(x) -> Container(x))", "all x y.((Balloon(x) & Container(y)) -> Container(x))", "all x.(Balloon(x) -> Container(x))", "exists x.(Balloon(x) & Container(x))", "all x y.((Balloon(x) & Container(y)) -> Container(x,y))", "all x y z.((Balloon(x) & Container(y) & Container(z)) -> Container(x,y,z))", "all x y z.((Balloon(x) & Container(y) & Container(z)) -> Container(x))", "all x.((Balloon(x) & Container(x)) -> Container(x))", "all x y.((Balloon(x) & Container(y)) -> Is(x,y))", "all x y.((Balloon(x) & Container(y)) -> CanContainer(x))", "all x y z.((Balloon(x) & Container(y) & Container(z)) -> Container(x,y))", "all x y.((Balloon(x) & Container(y)) -> TypeOf(x,y))", "all x y.((Balloon(x) & Container(y)) -> Contains(x,y))", "all x y.((Balloon(x) & Container(y)) -> CanBe(x,y))", "all x.exists y.(Balloon(x) & Container(y) & Contains(x,y))", "all x y.((Balloon(x) & Container(y)) -> Has(x,y))"]}
{"id": "entailmentbank_validation_928", "nl": "a balloon filled with helium is an example of a container contains a substance with less density than air.", "fol": "", "prediction": ["all x.((Balloon(x) & FilledWithHelium(x)) -> ContainerContainsSubstanceWithLessDensityThanAir(x))", "all x.((Balloon(x) & FilledWithHelium(x)) -> ContainerContainsSubstanceWithLessDensityThanAir(x))", "all x y.((Balloon(x) & FilledWithHelium(x) & Container(y)) -> ContainsSubstanceWithLessDensityThanAir(y))", "all x y.((Balloon(x) & FilledWithHelium(x)) -> Container(y))", "all x y.((Balloon(x) & FilledWithHelium(x)) -> ContainerContainsSubstanceWithLessDensityThanAir(y))", "all x.((Balloon(x) & FilledWithHelium(x)) -> ContainerContainsSubstanceWithLowerDensityThanAir(x))", "all x.((Balloon(x) & FilledWithHelium(x)) -> ContainsSubstanceWithLessDensityThanAir(x))", "all x.((Balloon(x) & FilledWithHelium(x)) -> ContainerContainsLessDensityThanAir(x))", "all x.((Balloon(x) & FilledWithHelium(x)) -> ContainerContainsSubstanceWithLowerDensityThanAir(x))", "all x.((Balloon(x) & FilledWithHelium(x)) -> ContainerContainsLowerDensityThanAir(x))", "all x.((Balloon(x) & FilledWithHelium(x)) -> ContainsSubstanceWithLessDensityThanAir(x))", "all x.((Balloon(x) & FilledWithHelium(x)) -> ContainerContainsSubstanceWithLessDensity(x))", "all x y z.((Balloon(x) & FilledWithHelium(x) & Container(y) & Substance(z) & LessDensityThanAir(z)) -> Contains(y,z))", "all x.((Balloon(x) & FilledWithHelium(x)) -> ContainerContainsSubstanceLessDensityThanAir(x))", "all x y.((Balloon(x) & FilledWithHelium(x) & Container(y)) -> ContainsSubstanceWithLessDensityThanAir(y,x))", "all x y.((Balloon(x) & FilledWithHelium(x) & Container(y)) -> ContainsSubstanceWithLowerDensityThanAir(y))"]}
{"id": "entailmentbank_validation_929", "nl": "if a container contains a substance with less density than air then that container may move upward.", "fol": "", "prediction": ["all x.((Container(x) & ContainsSubstanceWithLessDensityThanAir(x)) -> MayMoveUpward(x))", "all x y.((Container(x) & Substance(y) & LessDensityThanAir(y)) -> MayMoveUpward(x,y))", "all x.((Container(x) & ContainsSubstanceWithLowerDensityThanAir(x)) -> MayMoveUpward(x))", "all x.((Container(x) & ContainsSubstance(x) & LessDensityThanAir(x)) -> MayMoveUpward(x))", "all x y.((Container(x) & Substance(y) & LessDensityThanAir(y)) -> MayMoveUpward(x))", "all x y.((Container(x) & ContainsSubstance(x,y) & LessDensityThanAir(y)) -> MayMoveUpward(x))", "all x.((Container(x) & ContainsSubstanceWithLessDensity(x,air)) -> MayMoveUpward(x))", "all x.((Container(x) & ContainsLessDensityThanAir(x)) -> MayMoveUpward(x))", "all x.((Container(x) & ContainsSubstanceWithLessDensity(x,Air)) -> MayMoveUpward(x))", "all x y.((Container(x) & Container(y) & ContainsSubstanceWithLessDensityThanAir(x,y)) -> MayMoveUpward(x))", "all x y.((Container(x) & Substance(y) & Contains(x,y) & LessDensityThanAir(y)) -> MayMoveUpward(x))", "all x y.((Container(x) & ContainsSubstanceWithLessDensityThanAir(x,y)) -> MayMoveUpward(x))", "all x y.((Container(x) & Container(y) & ContainsSubstanceWithLessDensityThanAir(x,y)) -> MayMoveUpward(x,y))", "all x y.((Container(x) & Substance(y) & ContainsLessDensityThanAir(x,y)) -> MayMoveUpward(x))", "all x y.((Container(x) & Container(y) & ContainsSubstanceWithLessDensityThanAir(x,y)) -> MayMoveUpward(y))", "all x.((Container(x) & ContainsSubstanceWithLessDensityOfAir(x)) -> MayMoveUpward(x))"]}
{"id": "entailmentbank_validation_930", "nl": "the balloon filled with helium may move upward if released.", "fol": "", "prediction": ["all x.((Balloon(x) & FilledWithHelium(x)) -> MayMoveUpward(x))", "all x.((Balloon(x) & FilledWithHelium(x)) -> MayMoveUpward(x))", "all x.((BalloonFilledWithHelium(x) & Released(x)) -> MayMoveUpward(x))", "all x.((Balloon(x) & FilledWithHelium(x)) -> MovesUpward(x))", "all x.((Balloon(x) & FullOfHelium(x)) -> MayMoveUpward(x))", "all x.((Balloon(x) & FilledWithHelium(x)) -> MoveUpward(x))", "all x y.((Balloon(x) & Helium(y) & FilledWith(x,y)) -> MayMoveUpward(x))", "all x.((Balloon(x) & FulfilledWithHelium(x)) -> MayMoveUpward(x))", "all x.((Balloon(x) & FilledWithHelium(x)) -> MayMoveUpwardIfReleased(x))", "all x.((Balloon(x) & FilledWithHelium(x)) -> CanMoveUpward(x))", "all x y.((Balloon(x) & FilledWithHelium(x) & Released(y)) -> MayMoveUpward(x,y))", "all x.((Balloon(x) & FilledWithHelium(x)) -> MayMoveAhead(x))", "all x.((Balloon(x) & FilledWithHelium(x)) -> MovesUpward(x))", "all x.((Balloon(x) & ContainsHelium(x)) -> MayMoveUpward(x))", "all x.((Balloon(x) & ServedWithHelium(x)) -> MayMoveUpward(x))", "all x.((Balloon(x) & FilledWithHelium(x)) -> MayMoveAbove(x))"]}
{"id": "entailmentbank_validation_931", "nl": "a white object reflects all visible light.", "fol": "", "prediction": ["all x.(WhiteObject(x) -> ReflectsVisibleLight(x))", "all x y.((WhiteObject(x) & VisibleLight(y)) -> Reflects(x,y))", "all x.(WhiteObject(x) -> ReflectsAllVisibleLight(x))", "all x.(WhiteObject(x) -> ReflectsVisibleLight(x))", "all x.(WhiteObject(x) -> ReflectsVisibleLight(x))", "all x.((WhiteObject(x) & ReflectsVisibleLight(x)) -> ReflectsVisibleLight(x))", "all x y.((WhiteObject(x) & VisibleLight(y)) -> ReflectsLight(x,y))", "all x y z.((WhiteObject(x) & VisibleLight(y) & Reflects(x,y)) -> Reflects(x,z))", "all x y.((WhiteObject(x) & VisibleLight(y) & Reflects(x,y)) -> Reflects(x,y))", "all x y z.((WhiteObject(x) & VisibleLight(y) & Light(z)) -> Reflects(x,y,z))", "all x.(White(x) -> ReflectsVisibleLight(x))", "all x y z.((WhiteObject(x) & VisibleLight(y) & VisibleLight(z)) -> Reflects(x,y,z))", "all x y.((WhiteObject(x) & Light(y)) -> Reflects(x,y))", "all x y z.((WhiteObject(x) & VisibleLight(y) & Reflects(x,z)) -> Reflects(x,y))", "all x y z.((WhiteObject(x) & VisibleLight(y) & Reflects(x,y)) -> Reflects(x,y))", "all x y.((WhiteObject(x) & Light(y)) -> ReflectsVisible(x,y))"]}
{"id": "entailmentbank_validation_932", "nl": "the floor is a kind of object.", "fol": "", "prediction": ["all x.(Floor(x) -> Object(x))", "all x y.((Floor(x) & Object(y)) -> Object(x))", "all x y.((Floor(x) & Floor(y)) -> Object(x))", "all x y.((Floor(x) & Object(y)) -> Object(x,y))", "all x y.((Floor(x) & Floor(y)) -> Object(x,y))", "all x.((Floor(x) & Object(x)) -> Object(x))", "all x.(Floor(x) -> ArtOfObject(x))", "all x y.((Floor(x) & Object(y)) -> Is(x,y))", "all x y.((Floor(x) & Object(y)) -> ArtOf(x,y))", "all x.(Floor(x) -> Object(x))", "all x y.((Floor(x) & Object(y)) -> KindOf(x,y))", "all x y z.((Floor(x) & Object(y) & Floor(z)) -> Object(x,y,z))", "all x y.((Floor(x) & Object(y)) -> TypeOf(x,y))", "all x y.((Floor(x) & Object(y)) -> SortOf(x,y))", "all x y.((Floor(x) & Object(y)) -> Like(x,y))", "all x y z.((Floor(x) & Object(y) & Object(z)) -> Object(x,y,z))"]}
{"id": "entailmentbank_validation_933", "nl": "a white door will reflect all visible light.", "fol": "", "prediction": ["all x.(WhiteDoor(x) -> ReflectsVisibleLight(x))", "all x.(WhiteDoor(x) -> ReflectsAllVisibleLight(x))", "all x y.((WhiteDoor(x) & VisibleLight(y)) -> Reflects(x,y))", "all x.(WhiteDoor(x) -> ReflectsVisibleLight(x))", "all x y.((WhiteDoor(x) & WhiteDoor(y)) -> ReflectsVisibleLight(x,y))", "all x.(WhiteDoor(x) -> ReflectsVisibleLight(x))", "all x.(WhiteDoor(x) -> ReflectAllVisibleLight(x))", "all x y.((WhiteDoor(x) & Light(y)) -> Reflects(x,y))", "all x y.((WhiteDoor(x) & VisibleLight(y) & Reflects(x,y)) -> Reflects(x,y))", "all x y z.((WhiteDoor(x) & VisibleLight(y) & Light(z)) -> Reflects(x,y,z))", "all x y.((WhiteDoor(x) & VisibleLight(y)) -> ReflectsLight(x,y))", "all x y z.((WhiteDoor(x) & VisibleLight(y) & WhiteDoor(z)) -> Reflects(x,y,z))", "all x y.((WhiteDoor(x) & WhiteDoor(y)) -> ReflectsAllVisibleLight(x,y))", "all x.(WhiteDoor(x) -> ReflectsLight(x))", "all x.(WhiteDoor(x) -> ReflectVisibleLight(x))", "all x y.((WhiteDoor(x) & WhiteDoor(y)) -> ReflectsVisibleLight(x))"]}
{"id": "entailmentbank_validation_934", "nl": "the ice melts.", "fol": "", "prediction": ["all x.(Ice(x) -> Melts(x))", "all x y.((Ice(x) & Ice(y)) -> Melts(x,y))", "all x y z.((Ice(x) & Ice(y) & Ice(z)) -> Melts(x,y,z))", "all x y.((Ice(x) & Ice(y)) -> Melts(x))", "all x y z.((Ice(x) & Ice(y) & Ice(z)) -> Melts(x,y))", "all x y.((Ice(x) & Ice(y) & Melts(x,y)) -> Melts(x,y))", "exists x.(Ice(x) & Melts(x))", "all x y.((Ice(x) & IceMelts(y)) -> Melts(x,y))", "all x.(IceMelts(x) -> Melts(x))", "all x y z.((Ice(x) & Ice(y) & Ice(z) & Melts(x,y)) -> Melts(y,z))", "all x y.((Ice(x) & Melts(y)) -> Melts(x,y))", "all x.((Ice(x) & Melts(x)) -> Melts(x))", "all x y z.((Ice(x) & Ice(y) & Ice(z) & Melts(x,y,z)) -> Melts(y,z))", "all x.(IceMelts(x) -> IceMelts(x))", "all x y z.((Ice(x) & Ice(y) & Ice(z) & Melts(x,y)) -> Melts(x,z))", "all x y.((Ice(x) & IceMelt(y)) -> Melts(x,y))"]}
{"id": "entailmentbank_validation_935", "nl": "melting is a kind of phase change.", "fol": "", "prediction": ["all x.(Melting(x) -> PhaseChange(x))", "all x.(Melting(x) -> PhaseChange(x))", "all x y.((Melting(x) & PhaseChange(y)) -> PhaseChange(x))", "all x y.((Melting(x) & PhaseChange(y)) -> PhaseChange(x,y))", "all x.(Melting(x) -> PartOfPhaseChange(x))", "all x y.((Melting(x) & PhaseChange(y)) -> TypeOf(x,y))", "all x.(Melting(x) -> TypeOfPhaseChange(x))", "all x.((Melting(x) & PhaseChange(x)) -> PhaseChange(x))", "all x y.((Melting(x) & PhaseChange(y)) -> PartOf(x,y))", "all x y.((Melting(x) & PhaseChange(y)) -> IsPhaseChange(x,y))", "all x y.((Melting(x) & PhaseChange(y)) -> KindOf(x,y))", "all x y.((Melting(x) & PhaseChange(y)) -> SortOf(x,y))", "all x y.((Melting(x) & PhaseChange(x)) -> PhaseChange(y))", "all x y.((Melting(x) & PhaseChange(y)) -> Like(x,y))", "all x y.((Melting(x) & PhaseChange(y)) -> Is(x,y))", "All x.(Melting(x) -> PhaseChange(x))"]}
{"id": "entailmentbank_validation_936", "nl": "the ice undergoes a phase change.", "fol": "", "prediction": ["all x.(Ice(x) -> UndergoesPhaseChange(x))", "all x y.((Ice(x) & PhaseChange(y)) -> Undergoes(x,y))", "all x y z.((Ice(x) & PhaseChange(y) & PhaseChange(z)) -> Undergoes(x,y,z))", "all x.((Ice(x) & UndergoesPhaseChange(x)) -> UndergoesPhaseChange(x))", "all x.(Ice(x) -> PhaseChange(x))", "all x.((Ice(x) & UndergoesPhaseChange(x)) -> PhaseChange(x))", "all x y z.((Ice(x) & PhaseChange(y) & PhaseChange(z)) -> Undergoes(x,y))", "all x y.((Ice(x) & PhaseChange(x)) -> Undergoes(x,y))", "all x.(Ice(x) -> SubmitsPhaseChange(x))", "all x y.((Ice(x) & PhaseChange(y) & Undergoes(x,y)) -> Undergoes(x,y))", "all x y z.((Ice(x) & PhaseChange(y) & Ice(z)) -> Undergoes(x,y,z))", "all x y.((Ice(x) & PhaseChange(y)) -> UndergoesChange(x,y))", "all x.((Ice(x) & PhaseChange(x)) -> Undergoes(x,y))", "all x y.((Ice(x) & PhaseChange(y)) -> Submits(x,y))", "all x y.((Ice(x) & PhaseChange(y)) -> UndergoesPhaseChange(x,y))", "all x y z.((Ice(x) & PhaseChange(y) & Phase(z)) -> Undergoes(x,y,z))"]}
{"id": "entailmentbank_validation_937", "nl": "phase changes do not change mass.", "fol": "", "prediction": ["all x.(PhaseChange(x) -> -ChangeMass(x))", "all x y.((PhaseChange(x) & Phase(y)) -> -ChangeMass(x,y))", "all x.((PhaseChange(x) & -ChangeMass(x)) -> -ChangeMass(x))", "all x y.((PhaseChange(x) & PhaseChange(y)) -> -ChangeMass(x,y))", "all x.((PhaseChange(x) & -ChangeMass(x)) -> PhaseChange(x))", "all x y.((PhaseChange(x) & MassChange(y)) -> -Change(x,y))", "all x.(PhaseChange(x) -> -(ChangeMass(x) | ChangeMass(x))))", "all x.(PhaseChange(x) -> -ChangesMass(x))", "all x.(Change(x) -> -ChangeMass(x))", "all x y.((PhaseChange(x) & Phase(y)) -> -ChangeMass(x))", "all x.((PhaseChange(x) & -ChangeMass(x)) -> ChangesMass(x))", "all x y.((PhaseChange(x) & Phase(y)) -> -ChangesMass(x,y))", "all x y.((PhaseChange(x) & MassChange(y)) -> -ChangeMass(x,y))", "all x y.((PhaseChange(x) & Phase(y)) -> -ChangeMass(y))", "all x y.((PhaseChange(x) & MassChange(y)) -> -Changes(x,y))", "all x.(PhaseChange(x) -> -ChangeMass(x))"]}
{"id": "entailmentbank_validation_938", "nl": "the mass of the ice will not change.", "fol": "", "prediction": ["all x.(Ice(x) -> -ChangeMass(x))", "all x y.((Ice(x) & Mass(y)) -> -Change(x,y))", "all x.(IceMass(x) -> -Change(x))", "all x.(Ice(x) -> -MassChange(x))", "all x.(IceMass(x) -> -ChangesMass(x))", "all x y.((Ice(x) & Mass(y)) -> -ChangesMass(x,y))", "all x y.((Ice(x) & Mass(y)) -> -ChangeMass(x,y))", "all x.(IceMass(x) -> -ChangeMass(x))", "all x y z.((Ice(x) & Mass(y) & Mass(z)) -> -Change(x,y,z))", "all x.((Ice(x) & MassChange(x)) -> -ChangeMass(x))", "all x.(Ice(x) -> MassChange(x))", "all x.((Ice(x) & MassChange(x)) -> -Change(x))", "all x y z.((Ice(x) & Mass(y) & Mass(z)) -> -ChangesMass(x,y,z))", "all x y.((Ice(x) & Mass(y)) -> -ChangeMass(x,y))", "all x y.((Ice(x) & Mass(y) & -Change(x,y)) -> -Change(x,y))", "all x.(IceMass(x) -> -ChangeMath(x))"]}
{"id": "entailmentbank_validation_939", "nl": "a bubble is made of pockets of gas trapped inside a liquid or solid.", "fol": "", "prediction": ["all x.(Bubble(x) -> (PotsOfGas(x) & CapturedInLiquidOrSolid(x)))", "all x.(Bubble(x) -> (PotsOfGas(x) & CapturedInLiquidOrSolid(x)))", "all x y.((Bubble(x) & (Liquid(y) | Solid(y))) -> MadeOfPotsOfGas(x,y))", "all x.(Bubble(x) -> (MadeOfPotsOfGas(x) & CapturedInLiquidOrSolid(x)))", "all x y.((Bubble(x) & (Liquid(y) | Solid(y))) -> PocketsOfGas(x,y))", "all x.(Bubble(x) -> (PotsOfGas(x) & TrappedInLiquidOrSolid(x)))", "all x.(Bubble(x) -> (MadeOfPotsOfGas(x) & TrappedInLiquidOrSolid(x)))", "all x.(Bubble(x) -> (PotsOfGas(x) & TrappedInLiquidOrSolid(x)))", "all x.(Bubble(x) -> (PotsOfGas(x) & LocatedInLiquidOrSolid(x)))", "all x.(Bubble(x) -> (PotsOfGas(x) & CaughtInLiquidOrSolid(x)))", "all x.(Bubble(x) -> (MadeOfPotsOfGas(x) & CapturedInLiquidOrSolid(x)))", "all x y.((Bubble(x) & (Liquid(y) | Solid(y))) -> PocketsOfGasCapturedInside(x,y))", "all x.(Bubble(x) -> (PotsOfGas(x) & LocatedInLiquidOrSolid(x)))", "all x y.((Bubble(x) & (Liquid(y) | Solid(y))) -> PocketsOfGasCaughtInside(x,y))", "all x.(Bubble(x) -> (MadeOfPotsOfGas(x) & EmbeddedInLiquidOrSolid(x)))", "all x y.((Bubble(x) & (Liquid(y) | Solid(y))) -> PocketsOfGasPouch(x,y))"]}
{"id": "entailmentbank_validation_940", "nl": "soap bubbles are made of air trapped inside soap liquid.", "fol": "", "prediction": ["all x.(SoapBall(x) -> (MadeOfAir(x) & TrappedInSoapLiquid(x)))", "all x.(SoapBall(x) -> (MadeOfAir(x) & CapturedInSoapLiquid(x)))", "all x.(SoapBolt(x) -> (MadeOfAir(x) & TrappedInSoapLiquid(x)))", "all x.(SoapBall(x) -> MadeOfAirCapturedInSoapLiquid(x))", "all x.(SoapBolt(x) -> (MadeOfAir(x) & CapturedInSoapLiquid(x)))", "all x.(SoapBubble(x) -> (MadeOfAir(x) & TrappedInSoapLiquid(x)))", "all x.(SoapBlood(x) -> (MadeOfAir(x) & TrappedInSoapLiquid(x)))", "all x y.((SoapBall(x) & SoapLiquid(y)) -> MadeOfAirCapturedInside(x,y))", "all x.(SoapBubble(x) -> (MadeOfAir(x) & CapturedInSoapLiquid(x)))", "all x.(SoapBolt(x) -> MadeOfAirCapturedInSoapLiquid(x))", "all x y.((SoapBall(x) & SoapLiquid(y)) -> MadeOfAir(x,y))", "all x.(SoapBall(x) -> (MadeOfAir(x) & TrappedInSoapLiquid(x)))", "all x.(SoapBall(x) -> (MadeOfAir(x) & CapturedInSoapLiquid(x)))", "all x y.((SoapBall(x) & SoapLiquid(y)) -> MadeOf(x,y))", "all x.(SoapBlood(x) -> MadeOfAirCapturedInSoapLiquid(x))", "all x y.((SoapBall(x) & SoapLiquid(y)) -> MadeOfAirCaughtInside(x,y))"]}
{"id": "entailmentbank_validation_941", "nl": "air is inside the soap bubbles.", "fol": "", "prediction": ["all x y.((SoapBalloon(x) & SoapBalloon(y)) -> Inside(x,y))", "all x y.((SoapBalloon(x) & SoapBalloon(y)) -> Inside(x,y))", "all x y.((SoapBubble(x) & SoapBubble(y)) -> Inside(x,y))", "all x y.((SoapBubble(x) & SoapBubble(y)) -> Inside(x,y))", "all x y.((SoapBalloon(x) & Air(y)) -> Inside(x,y))", "all x y.((SoapBalloon(x) & SoapBubble(y)) -> Inside(x,y))", "all x y.((SoapBalloon(x) & SoapBubble(y)) -> Inside(x,y))", "all x y.((SoapBalloon(x) & Air(y)) -> Inside(x,y))", "all x y.((SoapBubble(x) & Air(y)) -> Inside(x,y))", "all x y.((SoapBubble(x) & Air(y)) -> Inside(x,y))", "all x y.((SoapBubble(x) & Air(y)) -> Inside(y,x))", "all x y.((SoapBalloon(x) & SoapBalloon(y)) -> AirInside(x,y))", "all x y.((SoapBalloon(x) & Air(y)) -> Inside(y,x))", "all x y.((SoapBalloon(x) & SoapBalloon(y)) -> AirInside(x,y))", "all x.(SoapBalloon(x) -> InsideSoapBalloon(x))", "all x y.((SoapBalloon(x) & Air(y)) -> Inside(y,x))"]}
{"id": "entailmentbank_validation_942", "nl": "matter in the liquid phase has definite volume and variable shape.", "fol": "", "prediction": ["all x.((Matter(x) & LiquidPhase(x)) -> (DefiniteVolume(x) & VariableShape(x)))", "all x.(LiquidPhase(x) -> (DefiniteVolume(x) & VariableShape(x)))", "all x y.((Matter(x) & LiquidPhase(y)) -> (DefiniteVolume(x,y) & VariableShape(x,y)))", "all x.((Matter(x) & LiquidPhase(x)) -> (DefinedVolume(x) & VariableShape(x)))", "all x.(LiquidPhase(x) -> (DefinedVolume(x) & VariableShape(x)))", "all x.((Matter(x) & LiquidPhase(x)) -> (DeterminedVolume(x) & VariableShape(x)))", "all x.(LiquidPhaseMatter(x) -> (DefiniteVolume(x) & VariableShape(x)))", "all x.((MatterInLiquidPhase(x) & DefiniteVolume(x) & VariableShape(x)) -> Has(x,y))", "all x y.((Matter(x) & LiquidPhase(y)) -> (DefinedVolume(x,y) & VariableShape(x,y)))", "all x y.((Matter(x) & LiquidPhase(y)) -> (DefiniteVolume(x) & VariableShape(x)))", "all x.((MatterInLiquidPhase(x) & DefiniteVolume(x) & VariableShape(x)) -> HasVariableShape(x))", "all x.(LiquidPhase(x) -> (DeterminedVolume(x) & VariableShape(x)))", "all x.(LiquidPhase(x) -> (HasDefiniteVolume(x) & HasVariableShape(x)))", "all x.((MatterInLiquidPhase(x) & DefiniteVolume(x) & VariableShape(x)) -> DefiniteVolume(x))", "all x.(LiquidPhase(x) -> (HasDefinedVolume(x) & HasVariableShape(x)))", "all x.((Matter(x) & LiquidPhase(x)) -> (HasDefiniteVolume(x) & HasVariableShape(x)))"]}
{"id": "entailmentbank_validation_943", "nl": "indefinite means variable.", "fol": "", "prediction": ["all x.(IndefiniteMeanVariable(x) -> Variable(x))", "all x.(IndefiniteMeanVariable(x) -> IndefiniteMeanVariable(x))", "all x.(IndefiniteMeansVariable(x) -> Variable(x))", "all x.(IndefiniteMeansVariable(x) -> IndefiniteVariable(x))", "all x.(IndefiniteMeanVariable(x) -> IndefiniteVariable(x))", "all x.(IndefiniteMeanVariable(x) -> Indefinite(x))", "all x y.((IndefiniteMeanVariable(x) & IndefiniteMeanVariable(y)) -> Variable(x,y))", "all x.(IndefiniteMean(x) -> Variable(x))", "all x.(IndefiniteMeansVariable(x) -> IndefiniteMeansVariable(x))", "all x.(IndefiniteMeansVariable(x) -> Indefinite(x))", "all x.(IndefiniteMediumVariable(x) -> Variable(x))", "all x.(IndefiniteMeaningsVariable(x) -> IndefiniteVariable(x))", "all x.(IndefiniteMeaningsVariable(x) -> Variable(x))", "all x y.((IndefiniteMeanVariable(x) & IndefiniteMeanVariable(y)) -> IndefiniteMeanVariable(x,y))", "all x y.((IndefiniteMeanVariable(x) & IndefiniteMeanVariable(y)) -> Variable(x))", "all x y.((IndefiniteMeanVariable(x) & Indefinite(y)) -> Variable(x,y))"]}
{"id": "entailmentbank_validation_944", "nl": "matter in the liquid phase has definite volume and indefinite shape.", "fol": "", "prediction": ["all x.((Matter(x) & LiquidPhase(x)) -> (DefiniteVolume(x) & IndefiniteShape(x)))", "all x.(LiquidPhase(x) -> (DefiniteVolume(x) & IndefiniteShape(x)))", "all x y.((Matter(x) & LiquidPhase(y)) -> (DefiniteVolume(x,y) & IndefiniteShape(x,y)))", "all x.((Matter(x) & LiquidPhase(x)) -> (DefinedVolume(x) & IndefiniteShape(x)))", "all x.((MatterInLiquidPhase(x) & DefiniteVolume(x) & DefiniteShape(x)) -> IndefiniteShape(x))", "all x.((Matter(x) & LiquidPhase(x)) -> (DeterminedVolume(x) & IndefiniteShape(x)))", "all x.(LiquidPhaseMatter(x) -> (DefiniteVolume(x) & IndefiniteShape(x)))", "all x.((Matter(x) & LiquidPhase(x)) -> (DefiniteVolume(x) & DefiniteShape(x)))", "all x y.((Matter(x) & LiquidPhase(y)) -> (DefiniteVolume(x) & IndefiniteShape(x)))", "all x.(LiquidPhase(x) -> (DefinedVolume(x) & IndefiniteShape(x)))", "all x.((Matter(x) & LiquidPhase(x)) -> (HasDefiniteVolume(x) & HasIndefiniteShape(x)))", "all x y.((Matter(x) & LiquidPhase(y)) -> (DefiniteVolume(x,y) & IndefiniteShape(x)))", "all x.((MatterInLiquidPhase(x) & DefiniteVolume(x) & DefiniteShape(x)) -> DefiniteShape(x))", "all x.((MatterInLiquidPhase(x) & DefiniteVolume(x) & IndefiniteShape(x)) -> DefiniteVolume(x))", "all x.((MatterInLiquidPhase(x)) -> (DefiniteVolume(x) & IndefiniteShape(x)))", "all x.(LiquidPhase(x) -> (HasDefiniteVolume(x) & HasIndefiniteShape(x)))"]}
{"id": "entailmentbank_validation_945", "nl": "substances are made of matter.", "fol": "", "prediction": ["all x.(Substance(x) -> MadeOfMatter(x))", "all x y.((Substance(x) & Material(y)) -> MadeOf(x,y))", "all x y.((Substance(x) & Matter(y)) -> MadeOf(x,y))", "all x.exists y.(Substance(x) & Material(y) & MadeOf(x,y))", "all x y z.((Substance(x) & Material(y) & Material(z)) -> MadeOf(x,y,z))", "all x.exists y.(Substance(x) & Matter(y) & MadeOf(x,y))", "all x.((Substance(x) & MadeOfMatter(x)) -> MadeOfMatter(x))", "all x.(Substance(x) -> MadeOfMatter(x))", "all x y.((Substance(x) & Substance(y)) -> MadeOfMatter(x,y))", "all x y.((Substance(x) & Matrix(y)) -> MadeOf(x,y))", "exists x.(Substance(x) & MadeOfMatter(x))", "all x y z.((Substance(x) & Material(y) & Material(z)) -> MadeOf(x,y))", "all x.(Substance(x) -> MakesOfMatter(x))", "all x.(Sufficient(x) -> MadeOfMatter(x))", "all x.((Substance(x) & MadeOfMatter(x)) -> MadeOf(x,Matter))", "all x.exists y.(Substance(x) & Material(y)) -> MadeOf(x,y))"]}
{"id": "entailmentbank_validation_946", "nl": "a compound is a kind of substance.", "fol": "", "prediction": ["all x.(Compound(x) -> Substance(x))", "all x y.((Compound(x) & Substance(y)) -> SortOf(x,y))", "all x.(Compound(x) -> SortOfSubstance(x))", "all x.(Compound(x) -> TypeOfSubstance(x))", "all x.(Compound(x) -> Material(x))", "all x.(Compound(x) -> Substance(x))", "all x.(Compound(x) -> KindOfSubstance(x))", "all x y.((Compound(x) & Substance(y)) -> KindOf(x,y))", "all x y.((Compound(x) & Substance(y)) -> TypeOf(x,y))", "all x.(Compound(x) -> FormOfSubstance(x))", "all x y.((Compound(x) & Substance(y)) -> Is(x,y))", "all x y.((Compound(x) & Substance(y)) -> FormOf(x,y))", "all x.(Compound(x) -> (Substance(x) & HasSubstance(x)))", "all x.(Compound(x) -> SpeciesOfSubstance(x))", "all x.(Compound(x) -> (Substance(x) | Substance(x)))", "all x.(Compound(x) -> ArtOfSubstance(x))"]}
{"id": "entailmentbank_validation_947", "nl": "a compound is made of matter.", "fol": "", "prediction": ["all x.(Compound(x) -> MadeOfMatter(x))", "all x y.((Compound(x) & Matter(y)) -> MadeOf(x,y))", "all x y.((Compound(x) & Material(y)) -> MadeOf(x,y))", "all x.(Compound(x) -> MadeOfMatter(x))", "all x.exists y.(Compound(x) & Matter(y) & MadeOf(x,y))", "all x.exists y.(Compound(x) & Material(y) & MadeOf(x,y))", "exists x.(Compound(x) & MadeOfMatter(x))", "all x.exists y.(Compound(x) & Compound(y) & MadeOfMatter(x,y))", "all x y.((Compound(x) & Compound(y)) -> MadeOfMatter(x,y))", "all x y z.((Compound(x) & Matter(y) & Material(z)) -> MadeOf(x,y,z))", "all x y z.((Compound(x) & Matter(y) & Matter(z)) -> MadeOf(x,y,z))", "all x y z.((Compound(x) & Material(y) & Material(z)) -> MadeOf(x,y,z))", "all x y z.((Compound(x) & Matter(y) & Compound(z)) -> MadeOf(x,y,z))", "all x.(Compound(x) -> MakesOfMatter(x))", "all x.exists y.(Compound(x) & Compound(y) & MadeOf(x,y))", "all x y z.((Compound(x) & Matter(y) & Material(z)) -> MadeOf(x,y))"]}
{"id": "entailmentbank_validation_948", "nl": "a compound in the liquid phase has definite volume and indefinite shape.", "fol": "", "prediction": ["all x.((Compound(x) & LiquidPhase(x)) -> (DefiniteVolume(x) & IndefiniteShape(x)))", "all x.((Compound(x) & LiquidPhase(x)) -> (DefinedVolume(x) & IndefiniteShape(x)))", "all x y.((Compound(x) & LiquidPhase(y)) -> (DefiniteVolume(x,y) & IndefiniteShape(x,y)))", "all x.((Compound(x) & InLiquidPhase(x)) -> (DefiniteVolume(x) & IndefiniteShape(x)))", "all x.(Compound(x) -> (LiquidPhase(x) & DefiniteVolume(x) & IndefiniteShape(x)))", "all x.((Compound(x) & LiquidPhase(x)) -> (HasDefiniteVolume(x) & HasIndefiniteShape(x)))", "all x.((Compound(x) & LiquidPhase(x)) -> (HasDefinedVolume(x) & HasIndefiniteShape(x)))", "all x.(Compound(x) -> (LiquidPhase(x) & DefiniteVolume(x) & DefiniteShape(x)))", "all x.((Compound(x) & LiquidPhase(x)) -> (DefiniteVolume(x) & DefiniteShape(x)))", "all x.((Compound(x) & LiquidPhase(x)) -> (DeterminedVolume(x) & IndefiniteShape(x)))", "all x y.((Compound(x) & LiquidPhase(y)) -> (DefiniteVolume(x) & IndefiniteShape(x)))", "all x.((Compound(x) & LiquidPhase(x)) -> (DefinitiveVolume(x) & IndefiniteShape(x)))", "all x y.((Compound(x) & LiquidPhase(y)) -> (DefiniteVolume(x,y) & IndefiniteShape(x)))", "all x.((Compound(x) & InLiquidPhase(x)) -> (DefinedVolume(x) & IndefiniteShape(x)))", "all x.((Compound(x) & LiquidPhase(x)) -> (HasDefinedVolume(x) & HasDefinedShape(x)))", "all x.((Compound(x) & LiquidPhase(x)) -> (TerminalVolume(x) & IndefiniteShape(x)))"]}
{"id": "entailmentbank_validation_949", "nl": "water is in the solid state, called ice.", "fol": "", "prediction": ["all x.(Water(x) -> SolidState(x))", "all x.((Water(x) & SolidState(x)) -> Ice(x))", "all x.(Water(x) -> (SolidState(x) & Ice(x)))", "all x y.((Water(x) & SolidState(y)) -> Ice(x))", "all x.(Water(x) -> SolidState(x,Ice))", "all x.(Water(x) -> (InSolidState(x) & Ice(x)))", "all x y z.((Water(x) & SolidState(y) & Ice(z)) -> In(x,y,z))", "all x.(Water(x) -> (SolidState(x) | Ice(x)))", "all x.(Water(x) -> SolidState(x,ice))", "all x y z.((Water(x) & SolidState(y) & Ice(z)) -> InState(x,y,z))", "all x.(Water(x) -> SolidStateIce(x))", "all x.(Water(x) -> Solid(x))", "all x.(Water(x) -> InSolidState(x))", "all x y.((Water(x) & SolidState(y)) -> Ice(x))", "all x.((Water(x) & SolidState(x)) -> Ice(x))", "all x y z.((Water(x) & SolidState(y) & Ice(z)) -> Is(x,y,z))"]}
{"id": "entailmentbank_validation_950", "nl": "hail is a kind of ice.", "fol": "", "prediction": ["all x.(Hail(x) -> Ice(x))", "all x.(Hail(x) -> Ice(x))", "all x y.((Hail(x) & Ice(y)) -> Is(x,y))", "all x.(Hail(x) -> Ice(x))", "all x y.((Hail(x) & Ice(y)) -> Ice(x))", "all x y.((Hail(x) & Ice(y)) -> KindOf(x,y))", "all x.(Hail(x) -> Icy(x))", "all x.(Hail(x) -> KindOfIce(x))", "all x y.((Hail(x) & Ice(y)) -> Ice(x))", "all x y.((Hail(x) & Ice(y)) -> Icy(x))", "all x y.((Hail(x) & Ice(y)) -> Ice(x,y))", "all x y.((Hail(x) & Ice(y)) -> Has(x,y))", "all x y.((Hail(x) & Ice(y)) -> Icing(x))", "all x y.((Hail(x) & Ice(y)) -> SortOf(x,y))", "all x.(Hail(x) -> Ice(x))", "all x y.((Hail(x) & Ice(y)) -> Icy(x,y))"]}
{"id": "entailmentbank_validation_951", "nl": "hail is water in solid ice.", "fol": "", "prediction": ["all x.(Hail(x) -> WaterInSolidIce(x))", "all x y.((Hail(x) & SolidIce(y)) -> WaterIn(x,y))", "all x.(Hail(x) -> (WaterInSolidIce(x)))", "all x.(Hail(x) -> (Water(x) & SolidIce(x)))", "all x y.((Hail(x) & SolidIce(y)) -> Water(x,y))", "all x.(Hail(x) -> WaterInSolidIce(x))", "all x.(Hail(x) -> Water(x))", "all x.(Hail(x) -> WaterInStandingIce(x))", "all x.(Hail(x) -> (WaterInSolidIce(x)))", "all x y.((Hail(x) & SolidIce(y)) -> WaterInIce(x,y))", "all x.(Hail(x) -> (Water(x) & SolidIce(x)))", "all x.(Hail(x) -> (Water(x) & InSolidIce(x)))", "all x y.((Hail(x) & SolidIce(y)) -> Water(x))", "all x.(Hail(x) -> WaterInStillIce(x))", "all x.(Hail(x) -> WaterInStandardIce(x))", "all x.(Hail(x) -> exists y.(SolidIce(y) & Water(x,y)))"]}
{"id": "entailmentbank_validation_952", "nl": "an airplane is used for moving people to far away places.", "fol": "", "prediction": ["all x y.((Airplane(x) & Person(y)) -> MovesToFarAwayPlaces(x,y))", "all x y.((Airplane(x) & Person(y)) -> UsedForMovingToFarAwayPlaces(x,y))", "all x.(Airplane(x) -> MovesPeopleToFarAwayPlaces(x))", "all x.(Airplane(x) -> UsedForMovingPeopleToFarAwayPlaces(x))", "all x.(Airplane(x) -> MovesToFarAwayPlaces(x))", "all x.(Airplane(x) -> UsedForMovingToFarAwayPlaces(x))", "all x y z.((Airplane(x) & Person(y) & FarAwayPlace(z)) -> MovesTo(x,y,z))", "all x y z.((Airplane(x) & Person(y) & Place(z)) -> MovesTo(x,y,z))", "all x y z.((Airplane(x) & Person(y) & FarAwayPlace(z)) -> UsedForMovingTo(x,y,z))", "all x y.((Airplane(x) & Person(y) & FarAwayPlace(y)) -> UsedForMovingTo(x,y))", "all x y z.((Airplane(x) & Person(y) & Place(z)) -> MovesToFarAway(x,y,z))", "all x y z.((Airplane(x) & Person(y) & Place(z)) -> UsedForMovingTo(x,y,z))", "all x y.((Airplane(x) & Person(y)) -> UsedForMovingToFarAwayPlaces(x))", "all x y.((Airplane(x) & People(y)) -> MovesToFarAwayPlaces(x,y))", "all x y z.((Airplane(x) & Person(y) & Place(z)) -> MovesToFarAwayPlaces(x,y,z))", "all x y.((Airplane(x) & People(y)) -> UsedForMovingToFarAwayPlaces(x,y))"]}
{"id": "entailmentbank_validation_953", "nl": "an airplane is fast in speed.", "fol": "", "prediction": ["all x.(Airplane(x) -> FastSpeed(x))", "all x.(Airplane(x) -> FastInSpeed(x))", "all x y.((Airplane(x) & Speed(y)) -> Fast(x,y))", "all x y.((Airplane(x) & Speed(y)) -> Fast(x))", "all x.((Airplane(x) & FastSpeed(x)) -> FastSpeed(x))", "all x y z.((Airplane(x) & Speed(y) & Speed(z)) -> Fast(x,y,z))", "all x y.((Airplane(x) & Speed(y)) -> FastInSpeed(x,y))", "all x y z.((Airplane(x) & Speed(y) & Speed(z)) -> Fast(x,y))", "all x y.((Airplane(x) & Airplane(y)) -> FastSpeed(x,y))", "all x y.((Airplane(x) & Airplane(y)) -> FastSpeed(x))", "all x y.((Airplane(x) & FastSpeed(y)) -> FastSpeed(x,y))", "all x y z.((Airplane(x) & Speed(y) & Speed(z)) -> FastInSpeed(x,y,z))", "all x y z.((Airplane(x) & Speed(y) & Speed(z)) -> Fast(x))", "all x y z.((Airplane(x) & Speed(y) & Speed(z)) -> FastIn(x,y,z))", "all x y.((Airplane(x) & FastSpeed(y)) -> FastSpeed(x))", "all x.(Airplane(x) -> FastSpeed(x))"]}
{"id": "entailmentbank_validation_954", "nl": "an airplane can move people to far away places quickly.", "fol": "", "prediction": ["all x y.((Airplane(x) & Person(y)) -> MovesToFarAwayPlacesQuickly(x,y))", "all x y.((Airplane(x) & Person(y)) -> CanMoveToFarAwayPlacesQuickly(x,y))", "all x.(Airplane(x) -> MovesPeopleToFarAwayPlacesQuickly(x))", "all x.(Airplane(x) -> MovesToFarAwayPlacesQuickly(x))", "all x.(Airplane(x) -> CanMoveToFarAwayPlacesQuickly(x))", "all x y.((Airplane(x) & Person(y) & FarAwayPlace(y)) -> MovesQuickly(x,y))", "all x y.((Airplane(x) & Person(y)) -> MoveToFarAwayPlacesQuickly(x,y))", "all x y.((Airplane(x) & Person(y)) -> MovesToFarAwayPlaces(x,y))", "all x.(Airplane(x) -> CanMovePeopleToFarAwayPlacesQuickly(x))", "all x y z.((Airplane(x) & Person(y) & Place(z)) -> MovesToFarAwayPlacesQuickly(x,y,z))", "all x y.((Airplane(x) & Person(y) & FarAwayPlace(y)) -> MovesToQuickly(x,y))", "all x y z.((Airplane(x) & Person(y) & FarAwayPlace(z)) -> MovesToQuickly(x,y,z))", "all x y.((Airplane(x) & Person(y)) -> MovesToFarAwayPlacesQuickly(x))", "all x y z.((Airplane(x) & Person(y) & Place(z)) -> CanMoveToFarAwayPlacesQuickly(x,y,z))", "all x y z.((Airplane(x) & Person(y) & Place(z)) -> MovesToFarAway(x,y,z))", "all x y.((Airplane(x) & People(y)) -> MovesToFarAwayPlacesQuickly(x,y))"]}
{"id": "entailmentbank_validation_955", "nl": "a cake is a kind of baked product.", "fol": "", "prediction": ["all x.(Cake(x) -> BakedProduct(x))", "all x.(Cake(x) -> BakedProduct(x))", "all x y.((Cake(x) & BakedProduct(y)) -> BakedProduct(x))", "all x.((Cake(x) & BakedProduct(x)) -> BakedProduct(x))", "all x y.((Cake(x) & BakedProduct(y)) -> Baked(x))", "exists x.(Cake(x) & BakedProduct(x))", "all x y.((Cake(x) & BakedProduct(y)) -> BakedProduct(x,y))", "all x y.((Cake(x) & BakedProduct(y)) -> Baked(x,y))", "all x.((Cake(x) & BakedProduct(x)) -> Baked(x))", "all x y.((Cake(x) & Cake(y)) -> BakedProduct(x))", "all x y.((Cake(x) & Product(y)) -> Baked(x))", "all x y z.((Cake(x) & BakedProduct(y) & Product(z)) -> Baked(x,y,z))", "all x y.((Cake(x) & Product(y)) -> Baked(x,y))", "all x y.((Cake(x) & BakingProduct(y)) -> Baked(x))", "all x.exists y.(Cake(x) & BakedProduct(y) & BakedProduct(x,y))", "all x y z.((Cake(x) & BakedProduct(y) & Product(z)) -> Baked(x))"]}
{"id": "entailmentbank_validation_956", "nl": "baking is when a human makes food by adding heat.", "fol": "", "prediction": ["all x y.((Human(x) & Food(y) & AddsHeat(x,y)) -> Bakes(x))", "all x.((Human(x) & MakesFood(x) & AddsHeat(x)) -> Bakes(x))", "all x y.((Human(x) & Food(y)) -> MakesByAdditingHeat(x,y))", "all x.((Human(x) & MakesFoodByAdditingHeat(x)) -> Bakes(x))", "all x y.((Human(x) & Food(y) & AddsHeat(x,y)) -> Bakes(x,y))", "all x.(Baking(x) -> (Human(x) & MakesFood(x) & AddsHeat(x)))", "all x.(Baking(x) -> (Human(x) & MakesFoodByAdditingHeat(x)))", "all x.((Human(x) & MakesFoodByAdditingHeat(x)) -> Baking(x))", "all x.(Baking(x) -> (Human(x) & MakesFood(x) & AddsHeat(x)))", "all x.((Human(x) & MakesFood(x) & AddsHeat(x)) -> Baking(x))", "all x y.((Human(x) & Food(y)) -> MakesByAdditiveHeat(x,y))", "all x y.((Human(x) & Heat(y)) -> MakesFood(x,y))", "all x.(Baking(x) -> (HumanMakesFood(x) & AddsHeat(x)))", "all x y z.((Human(x) & Food(y) & Heat(z)) -> MakesBy(x,y,z))", "all x.(Baking(x) -> (HumanMakesFood(x) & AddsHeat(x)))", "all x.(Baking(x) -> (Human(x) & MakesFoodByAdditingHeat(x)))"]}
{"id": "entailmentbank_validation_957", "nl": "a cake is a product made by human adding heat to it.", "fol": "", "prediction": ["all x y.((Cake(x) & Human(y)) -> AddsHeatTo(x,y))", "all x y.((Cake(x) & Human(y)) -> AddsHeat(x,y))", "all x.(Cake(x) -> (MadeByHuman(x) & AddsHeat(x)))", "all x y.((Cake(x) & Human(y) & AddsHeat(x,y)) -> MadeBy(x,y))", "all x.(Cake(x) -> (MadeByHuman(x) & AddsHeat(x)))", "all x y z.((Cake(x) & Human(y) & Heat(z)) -> MadeByAddition(x,y,z))", "all x y.((Cake(x) & Human(y)) -> AddsHeatTo(y,x))", "all x.(Cake(x) -> (MadeByHuman(x) & AddsHeatTo(x)))", "all x y z.((Cake(x) & Human(y) & Heat(z)) -> AddsTo(x,y,z))", "all x.(Cake(x) -> MadeByHumanAddingHeat(x))", "all x.(Cake(x) -> MadeByHumanAdditionOfHeat(x))", "all x.(Cake(x) -> (HumanMade(x) & AddsHeat(x)))", "all x.(Cake(x) -> (MadeByHuman(x) & AddsHeatTo(x)))", "all x.(Cake(x) -> (MadeByHumanAddingHeat(x) & MadeByHuman(x)))", "all x.(Cake(x) -> MadeByHumanAddition(x))", "all x y.((Cake(x) & Human(y) & AddsHeat(y,x)) -> MadeBy(x,y))"]}
{"id": "entailmentbank_validation_958", "nl": "transportation technology is a kind of system for moving people and products.", "fol": "", "prediction": ["all x.(TransportationTechnology(x) -> (MovingPeople(x) & MovingProducts(x)))", "all x.(TransportationTechnology(x) -> (MovesPeople(x) & MovesProducts(x)))", "all x y.((TransportationTechnology(x) & Person(y) & Product(y)) -> Moves(x,y))", "all x.(TransportationTechnology(x) -> (SystemForMovingPeople(x) & SystemForMovingProducts(x)))", "all x y.((TransportationTechnology(x) & Person(y) & Product(y)) -> MovingSystem(x,y))", "all x.(TransportationTechnology(x) -> (MovingPeopleAndProducts(x) & MovingProducts(x)))", "all x.(TransportationTechnology(x) -> (ForMovingPeople(x) & ForMovingProducts(x)))", "all x y.((TransportationTechnology(x) & Person(y) & Product(y)) -> SystemForMoving(x,y))", "all x y z.((TransportationTechnology(x) & Person(y) & Product(z)) -> Moves(x,y,z))", "all x.(TransportationTechnology(x) -> (MovingPeople(x) & MovingProducts(x)))", "all x.(TransportationTechnology(x) -> (MovementSystem(x) & MovesPeople(x) & MovesProducts(x)))", "all x y z.((TransportationTechnology(x) & Person(y) & Product(z)) -> MovingSystem(x,y,z))", "all x.(TransportationTechnology(x) -> (MovingPersons(x) & MovingProducts(x)))", "all x.(TransportationTechnology(x) -> (MovementSystem(x) & MovesPeopleAndProducts(x)))", "all x y.((TransportationTechnology(x) & People(y) & Products(y)) -> Moves(x,y))", "all x.(TransportationTechnology(x) -> (SystemForMovingPeopleAndProducts(x)))"]}
{"id": "entailmentbank_validation_959", "nl": "transportation technology is used for moving people / products.", "fol": "", "prediction": ["all x y.((TransportationTechnology(x) & Person(y) & Product(y)) -> UsedForMoving(x,y))", "all x y z.((TransportationTechnology(x) & Person(y) & Product(z)) -> UsedForMoving(x,y,z))", "all x y.((TransportationTechnology(x) & Person(y)) -> UsedForMoving(x,y))", "all x.(TransportationTechnology(x) -> (MovingPeople(x) | MovingProducts(x)))", "all x.(TransportationTechnology(x) -> (UsedForMovingPeople(x) | UsedForMovingProducts(x)))", "all x.(TransportationTechnology(x) -> UsedForMovingPeopleOrProducts(x))", "all x.(TransportationTechnology(x) -> (MovesPeople(x) | MovesProducts(x)))", "all x y.((TransportationTechnology(x) & Person(y)) | Product(y)) -> UsedForMoving(x,y))", "all x.(TransportationTechnology(x) -> (UsedForMovingPeople(x) & UsedForMovingProducts(x)))", "all x y.((TransportationTechnology(x) & (Person(y) | Product(y))) -> UsedForMoving(x,y))", "all x.(TransportationTechnology(x) -> UsedForMovingPeople(x) & UsedForMovingProducts(x))", "all x.(TransportationTechnology(x) -> UsedForMovingPeople(x))", "all x.(TransportationTechnology(x) -> UsedForMovingPeopleAndProducts(x))", "all x y.((TransportationTechnology(x) & Person(y) & Product(y)) -> UsedForMovement(x,y))", "all x y z.((TransportationTechnology(x) & Person(y) & Product(z)) -> UsedFor(x,y,z))", "all x y.((TransportationTechnology(x) & Person(y)) -> UsedForMovingProducts(x,y))"]}
{"id": "entailmentbank_validation_960", "nl": "transportation technology is a system that moves people and products.", "fol": "", "prediction": ["all x.(TransportationTechnology(x) -> (MovesPeople(x) & MovesProducts(x)))", "all x y.((TransportationTechnology(x) & Person(y) & Product(y)) -> Moves(x,y))", "all x y z.((TransportationTechnology(x) & Person(y) & Product(z)) -> Moves(x,y,z))", "all x.(TransportationTechnology(x) -> (System(x) & MovesPeople(x) & MovesProducts(x)))", "all x.(TransportationTechnology(x) -> (MovesPeople(x) & MovesProducts(x)))", "all x.(TransportationTechnology(x) -> MovesPeopleAndProducts(x))", "all x.(TransportationTechnology(x) -> (MovesPeopleAndProducts(x) & MovesProducts(x)))", "all x.(TransportationTechnology(x) -> (MovesPersons(x) & MovesProducts(x)))", "all x.(TransportationTechnology(x) -> (System(x) & MovesPeople(x) & MovesProducts(x)))", "all x y z.((TransportationTechnology(x) & Person(y) & Product(z)) -> (Moves(x,y,z) & Moves(x,y,z)))", "all x.(TransportationTechnology(x) -> (MovesPeopleAndProducts(x) & MovesPeopleAndProducts(x)))", "all x y.((TransportationTechnology(x) & People(y) & Products(y)) -> Moves(x,y))", "all x.(TransportationTechnology(x) -> (MovesPeople(x) & MovesProducts(x)))", "all x y z.((TransportationTechnology(x) & Person(y) & Product(z)) -> (Moves(x,y) & Moves(x,z)))", "all x y z.((TransportationTechnology(x) & Person(y) & Product(z)) -> (Moves(x,y,z) & Moves(x,y)))", "all x.(TransportationTechnology(x) -> (System(x) & MovesPeopleAndProducts(x)))"]}
{"id": "entailmentbank_validation_961", "nl": "a refrigerator is used for keeping food fresh for a long period of time.", "fol": "", "prediction": ["all x.(Refrigerator(x) -> (KeepsFoodFresh(x) & LongPeriodOfTime(x)))", "all x.(Refrigerator(x) -> (KeepsFoodFresh(x) & LongPeriod(x)))", "all x.(Refrigerator(x) -> (UsedForKeepingFoodFresh(x) & LongPeriodOfTime(x)))", "all x.(Refrigerator(x) -> (KeepFoodFresh(x) & LongPeriodOfTime(x)))", "all x y.((Refrigerator(x) & Food(y)) -> UsedForKeepingFreshForLongPeriod(x,y))", "all x y.((Refrigerator(x) & Food(y)) -> KeepsFreshForLongPeriod(x,y))", "all x.(Refrigerator(x) -> (KeepsFoodFresh(x) & LongPeriodOfTime(x)))", "all x.(Refrigerator(x) -> UsedForKeepingFoodFreshForLongPeriod(x))", "all x.(Refrigerator(x) -> (KeepsFoodFresh(x) & ForLongPeriod(x)))", "all x.(Refrigerator(x) -> UsedForKeepingFoodFresh(x))", "all x.(Refrigerator(x) -> (MaintainsFoodFresh(x) & LongPeriodOfTime(x)))", "all x y.((Refrigerator(x) & Food(y)) -> UsedForKeepsFreshForLongPeriod(x,y))", "all x y.((Refrigerator(x) & Food(y)) -> UsedForKeepingFresh(x,y))", "all x.(Refrigerator(x) -> (KeepsFoodFresh(x) & ForLongPeriodOfTime(x)))", "all x y.((Refrigerator(x) & Food(y)) -> UsedForKeepingForLongPeriodOfTime(x,y))", "all x.(Refrigerator(x) -> (KeepFoodFresh(x) & LongPeriod(x)))"]}
{"id": "entailmentbank_validation_962", "nl": "the invention of the refrigerator with self-contained unit occurred in 1923.", "fol": "", "prediction": ["all x y.((Refrigerator(x) & SelfContainedUnit(y)) -> Invention(x,y))", "all x.((Refrigerator(x) & SelfContainedUnit(x)) -> OccursIn1923(x))", "all x y z.((Refrigerator(x) & SelfContainedUnit(y) & 1923(z)) -> Invention(x,y,z))", "all x.((Refrigerator(x) & SelfContainedUnit(x)) -> Invention(x,1923))", "all x.((Refrigerator(x) & SelfContainedUnit(x)) -> InventedIn1923(x))", "all x.((Refrigerator(x) & SelfContainedUnit(x)) -> Invention(x))", "all x.((Refrigerator(x) & SelfContainedUnit(x)) -> OccursIn(x,1923))", "all x y z.((Refrigerator(x) & SelfContainedUnit(y) & 1923(z)) -> InventionOf(x,y,z))", "all x y.((Refrigerator(x) & SelfContainedUnit(y) & Invention(x,y)) -> OccursIn(x,y))", "all x y.((Refrigerator(x) & SelfContainedUnit(y)) -> InventedIn1923(x,y))", "all x y.((Refrigerator(x) & SelfContainedUnit(y)) -> InventedIn1923(x))", "all x y.((Refrigerator(x) & SelfContainedUnit(y) & Invention(x,y)) -> OccursIn1923(x))", "all x y.((Refrigerator(x) & SelfContainedUnit(y)) -> OccursIn(x,y))", "all x.((Refrigerator(x) & SelfContainedUnit(x)) -> InventionOf(x,1923))", "all x y z.((Refrigerator(x) & SelfContainedUnit(y) & Invention(z)) -> OccursIn(x,y,z))", "all x y.((Refrigerator(x) & SelfContainedUnit(y)) -> InventedIn(x,y))"]}
{"id": "entailmentbank_validation_963", "nl": "refrigerator is the invention that can keep food fresh for a long period of time.", "fol": "", "prediction": ["all x.(Refrigerator(x) -> (Invention(x) & KeepsFoodFresh(x) & LongPeriodOfTime(x)))", "all x.(Refrigerator(x) -> (Invention(x) & CanKeepFoodFresh(x) & LongPeriodOfTime(x)))", "all x.(Refrigerator(x) -> (KeepsFoodFresh(x) & LongPeriodOfTime(x)))", "all x.(Refrigerator(x) -> (Invention(x) & KeepsFoodFresh(x) & LongPeriodOfTime(x)))", "all x.(Refrigerator(x) -> (Invention(x) & KeepFoodFresh(x) & LongPeriodOfTime(x)))", "all x.(Refrigerator(x) -> (Invention(x) & KeepsFoodFreshForLongPeriod(x)))", "all x.(Refrigerator(x) -> (Invention(x) & CanKeepFoodFreshForLongPeriod(x)))", "all x.(Refrigerator(x) -> (Invention(x) & KeepsFoodFresh(x) & LongPeriod(x)))", "all x.(Refrigerator(x) -> (Invention(x) & CanKeepFoodFresh(x) & LongPeriodOfTime(x)))", "all x.(Refrigerator(x) -> (Invention(x) & CanKeepFoodFresh(x) & LongPeriod(x)))", "all x y.((Refrigerator(x) & Food(y)) -> (KeepsFresh(x,y) & LongPeriodOfTime(x)))", "all x.(Refrigerator(x) -> (KeepFoodFresh(x) & LongPeriodOfTime(x)))", "all x y.((Refrigerator(x) & Food(y)) -> CanKeepFreshForLongPeriod(x,y))", "all x y.((Refrigerator(x) & Food(y)) -> KeepsFreshForLongPeriod(x,y))", "all x.(Refrigerator(x) -> (Invention(x) & KeepsFoodFresh(x) & ForLongPeriod(x)))", "all x.(Refrigerator(x) -> (KeepsFoodFresh(x) & LongPeriodOfTime(x)))"]}
{"id": "entailmentbank_validation_964", "nl": "radio station broadcasting is a source of radio waves.", "fol": "", "prediction": ["all x.(RadioStation(x) -> RadioWavesSource(x))", "all x.((RadioStation(x) & Broadcasting(x)) -> SourceOfRadioWaves(x))", "all x y.((RadioStation(x) & Broadcasting(y)) -> SourceOfRadioWaves(x,y))", "all x.(RadioStationBroadcasting(x) -> SourceOfRadioWaves(x))", "all x y z.((RadioStation(x) & Broadcasting(y) & RadioWaves(z)) -> SourceOf(x,y,z))", "all x y.((RadioStation(x) & RadioStation(y)) -> BroadcastingSourceOfWaves(x,y))", "all x y.((RadioStation(x) & RadioStation(y)) -> BroadcastingSourceOfRadioWaves(x,y))", "all x.((RadioStation(x) & Broadcasting(x)) -> RadioWavesSource(x))", "all x.(RadioStation(x) -> (Broadcasting(x) & SourceOfRadioWaves(x)))", "all x y z.((RadioStation(x) & RadioStation(y) & Broadcasting(z)) -> SourceOfRadioWaves(x,y,z))", "all x y.((RadioStation(x) & RadioStation(y)) -> Broadcasting(x,y))", "all x.(RadioStation(x) -> SourceOfRadioWaves(x))", "all x y.((RadioStation(x) & Broadcasting(y)) -> RadioWavesSource(x,y))", "all x y.((RadioStation(x) & RadioStation(y)) -> (Broadcasting(x,y) & SourceOfRadioWaves(x)))", "all x y.((RadioStation(x) & RadioStation(y) & Broadcasting(x)) -> SourceOfRadioWaves(x,y))", "all x y z.((RadioStation(x) & RadioStation(y) & RadioWaves(z)) -> BroadcastingSource(x,y,z))"]}
{"id": "entailmentbank_validation_965", "nl": "a source of something emits that something.", "fol": "", "prediction": ["all x y.((Source(x) & Something(y)) -> Emits(x,y))", "all x y z.((Source(x) & Something(y) & Source(z)) -> Emits(x,y,z))", "all x y.((SourceOf(x,y) & Something(y)) -> Emits(x,y))", "all x y.((Source(x) & Source(y)) -> Emits(x,y))", "all x.((Source(x) & Something(x)) -> Emits(x,y))", "all x y.((Source(x) & Something(y) & Emits(x,y)) -> SourceOf(x,y))", "all x.((SourceOf(x,y) & Something(y)) -> Emits(x,y))", "all x.((SourceOf(x) & Something(x)) -> Emits(x,y))", "all x y z.((Source(x) & Something(y) & Source(z) & Emits(x,y,z)) -> Emits(x,y,z))", "all x y.((Source(x) & Something(y) & Emits(x,y)) -> Source(x,y))", "all x y z.((Source(x) & Something(y) & Source(z)) -> Emits(x,y))", "all x y z.((Source(x) & Something(y) & Source(z) & Emits(x,y,z)) -> Emits(x,y))", "all x y.((Source(x) & Something(y) & Emits(x,y)) -> Emits(x,y))", "all x.(SourceOf(x,y) -> Emits(x,y))", "all x y z.((Source(x) & Something(y) & Source(z) & Emits(x,y)) -> Emits(x,z))", "all x y.((Source(x) & Something(y) & Source(x,y)) -> Emits(x,y))"]}
{"id": "entailmentbank_validation_966", "nl": "radio station broadcasting emits radio waves.", "fol": "", "prediction": ["all x.(RadioStation(x) & Broadcasting(x) -> EmitsRadioWaves(x))", "all x.((RadioStation(x) & Broadcasting(x)) -> EmitsRadioWaves(x))", "all x y.((RadioStation(x) & RadioStation(y) & Broadcasting(x)) -> EmitsRadioWaves(x,y))", "all x y.((RadioStation(x) & Broadcasting(y)) -> EmitsRadioWaves(x,y))", "all x.(RadioStation(x) & Broadcasting(x)) -> EmitsRadioWaves(x))", "all x y.((RadioStation(x) & RadioStation(y)) -> BroadcastingEmitsRadioWaves(x,y))", "all x y.((RadioStation(x) & RadioStation(y) & Broadcasting(x)) -> EmitsRadioWaves(x))", "all x.(RadioStation(x) & Broadcasting(x) & EmitsRadioWaves(x))", "all x y.((RadioStation(x) & RadioStation(y) & Broadcasting(x,y)) -> EmitsRadioWaves(x))", "all x.(RadioStation(x) -> BroadcastingEmitsRadioWaves(x))", "all x y z.((RadioStation(x) & RadioStation(y) & RadioWaves(z)) -> BroadcastingEmits(x,y,z))", "all x y.((RadioStation(x) & RadioStation(y) & Broadcasting(x,y)) -> EmitsRadioWaves(x,y))", "all x y.((RadioStation(x) & RadioStation(y)) -> BroadcastingEmitsRadioWaves(x))", "all x y z.((RadioStation(x) & Broadcasting(y) & RadioWaves(z)) -> Emits(x,y,z))", "all x y.((RadioStation(x) & RadioStation(y)) -> BroadcastsEmitsRadioWaves(x,y))", "all x y.((RadioStation(x) & RadioStation(y) & Broadcasting(x) & RadioWaves(y)) -> Emits(x,y))"]}
{"id": "entailmentbank_validation_967", "nl": "radio transmitter emits radio waves.", "fol": "", "prediction": ["all x.(RadioTransmitter(x) -> EmitsRadioWaves(x))", "all x.(RadioSender(x) -> EmitsRadioWaves(x))", "all x y.((RadioTransmitter(x) & RadioWaves(y)) -> Emits(x,y))", "all x y.((RadioSender(x) & RadioWaves(y)) -> Emits(x,y))", "all x y z.((RadioTransmitter(x) & RadioWaves(y) & RadioWaves(z)) -> Emits(x,y,z))", "all x y z.((RadioSender(x) & RadioWaves(y) & RadioWaves(z)) -> Emits(x,y,z))", "all x y z.((RadioTransmitter(x) & RadioWaves(y) & Radio(z)) -> Emits(x,y,z))", "all x.(RadioTransmitter(x) -> EmitRadioWaves(x))", "all x y z.((RadioTransmitter(x) & RadioWaves(y) & RadioWaves(z)) -> Emits(x,y))", "all x y z.((RadioSender(x) & RadioWaves(y) & Radio(z)) -> Emits(x,y,z))", "all x.(RadioSender(x) -> EmitRadioWaves(x))", "all x y z.((RadioSender(x) & RadioWaves(y) & RadioWaves(z)) -> Emits(x,y))", "all x y.((RadioTransmitter(x) & Radio(y)) -> Emits(x,y))", "all x y.((RadioTransmitter(x) & RadioWaves(y) & Emits(x,y)) -> Emits(x,y))", "all x y.((RadioSender(x) & RadioWaves(y)) -> Emits(x,y))", "all x y z.((RadioTransmitter(x) & RadioWaves(y) & Radio(z)) -> Emits(x,y))"]}
{"id": "entailmentbank_validation_968", "nl": "radio station is a radio transmitter.", "fol": "", "prediction": ["all x.(RadioStation(x) -> RadioTransmitter(x))", "all x y.((RadioStation(x) & RadioTransmitter(y)) -> RadioStation(x))", "all x.(RadioStation(x) -> RadioSender(x))", "all x y.((RadioStation(x) & RadioSender(y)) -> RadioTransmitter(x))", "all x.(RadioStation(x) -> RadioTransmitter(x))", "all x.((RadioStation(x) & RadioTransmitter(x)) -> RadioStation(x))", "all x y.((RadioStation(x) & RadioTransmitter(y)) -> RadioStation(x,y))", "all x y.((RadioStation(x) & RadioSender(y)) -> RadioTransmitter(x,y))", "all x y.((RadioStation(x) & RadioStation(y)) -> RadioTransmitter(x))", "all x y.((RadioStation(x) & RadioTransmitter(y)) -> Radio(x))", "all x.(RadiationStation(x) -> RadioTransmitter(x))", "all x.(RadioStation(x) & RadioTransmitter(x))", "all x y.((RadioStation(x) & RadioStation(y)) -> RadioTransmitter(x,y))", "all x y.((RadioStation(x) & RadioSender(y)) -> RadioSender(x))", "all x y.((RadioStation(x) & RadioSender(y)) -> RadioSender(x,y))", "all x y.((RadioStation(x) & RadioTransmitter(x)) -> RadioStation(y))"]}
{"id": "entailmentbank_validation_969", "nl": "pliers are a kind of hand tool.", "fol": "", "prediction": ["all x.(Plier(x) -> HandTool(x))", "all x y.((Plier(x) & HandTool(y)) -> HandTool(x))", "all x.(Plier(x) -> HandTool(x))", "all x y.((Plier(x) & Tool(y)) -> HandTool(x))", "all x y.((Plier(x) & HandTool(y)) -> HandTool(x,y))", "all x y z.((Plier(x) & HandTool(y) & Tool(z)) -> HandTool(x,y,z))", "all x y z.((Plier(x) & HandTool(y) & Tool(z)) -> HandTool(x))", "all x y.((Plier(x) & HandTool(y)) -> (HandTool(x) & HandTool(y)))", "all x y.((Plier(x) & Tool(y)) -> Hand(x))", "all x y.((Plier(x) & Tool(y)) -> HandTool(x,y))", "all x.(Plier(x) -> (HandTool(x) & HandTool(x)))", "all x y.((Plier(x) & HandTool(y)) -> Is(x,y))", "all x y.((Plier(x) & HandTool(y)) -> UsedFor(x,y))", "all x y z.((Plier(x) & HandTool(y) & Tool(z)) -> HandTool(x,y))", "all x y.((Plier(x) & HandTool(y)) -> (HandTool(x) & HandTool(x)))", "all x.((Plier(x) & HandTool(x)) -> HandTool(x))"]}
{"id": "entailmentbank_validation_970", "nl": "pliers are made of two levers for gripping.", "fol": "", "prediction": ["all x y.((Plier(x) & Lever(y)) -> MadeOf(x,y))", "all x y z.((Plier(x) & Lever(y) & Lever(z)) -> MadeOf(x,y,z))", "all x.(Plier(x) -> (HasTwoLevers(x) & ForGripping(x)))", "all x.(Plier(x) -> (HasTwoLens(x) & ForGripping(x)))", "all x.(Plier(x) -> exists y.(Lever(y) & Lever(z) & MadeOf(x,y,z)))", "all x y z.((Plier(x) & Lever(y) & Lever(z)) -> MadeOfForGripping(x,y,z))", "all x.(Plier(x) -> exists y.(Lever(y) & Lever(y) & MadeOf(x,y)))", "all x y.((Plier(x) & Lever(y)) -> MadeOfForGripping(x,y))", "all x.(Plier(x) -> MadeOfTwoLevers(x))", "all x.(Plier(x) -> exists y.(Lever(y) & Lever(z) & MadeOf(x,y,z))))", "all x.(Plier(x) -> (MadeOfTwoLevers(x) & ForGripping(x)))", "all x.(Plier(x) -> (MadeOfTwoLens(x) & ForGripping(x)))", "all x.(Plier(x) -> MadeOfTwoLens(x))", "all x.(Plier(x) -> (HasTwoLevers(x) & ForGripping(x)))", "all x.(Plier(x) -> (HasTwoLens(x) & ForGripping(x)))", "all x.(Plier(x) -> (HasTwoLevers(x) & ForGripping(x)))"]}
{"id": "entailmentbank_validation_971", "nl": "pliers are a tool made of two levers for gripping.", "fol": "", "prediction": ["all x.(Plier(x) -> (Tool(x) & MadeOfTwoLevers(x) & ForGripping(x)))", "all x.(Plier(x) -> (ToolMadeOfTwoLevers(x) & ForGripping(x)))", "all x.(Plier(x) -> (MadeOfTwoLevers(x) & ForGripping(x)))", "all x.(Plier(x) -> (HasTwoLevers(x) & ForGripping(x)))", "all x.(Plier(x) -> (Tool(x) & MadeOfTwoLens(x) & ForGripping(x)))", "all x.(Plier(x) -> (HasTwoLens(x) & ForGripping(x)))", "all x y.((Plier(x) & Lever(y)) -> (MadeOf(x,y) & MadeOf(x,y)))", "all x y.((Plier(x) & Lever(y)) -> MadeOf(x,y))", "all x.(Plier(x) -> (ToolMadeOfTwoLens(x) & ForGripping(x)))", "all x.(Plier(x) -> (MadeOfTwoLens(x) & ForGripping(x)))", "all x.(Plier(x) -> (Tool(x) & TwoLevers(x) & ForGripping(x)))", "all x.(Plier(x) -> (Tool(x) & MadeOfTwoLevers(x) & ForGripping(x)))", "all x y.((Plier(x) & Lever(y)) -> (MadeOf(x,y) & MadeOf(x,y) & ForGripping(x)))", "all x.(Plier(x) -> (Tool(x) & MadeOfTwoLevers(x)))", "all x.(Plier(x) -> (ToolMadeOfTwoLevers(x) & ForGripping(x)))", "all x y z.((Plier(x) & Lever(y) & Lever(z)) -> MadeOfForGripping(x,y,z))"]}
{"id": "entailmentbank_validation_972", "nl": "gripping produces gripping force.", "fol": "", "prediction": ["all x.(Gripping(x) -> ProducesGrippingForce(x))", "all x.(Gripping(x) -> ProducesGrippingForce(x))", "all x y.((Gripping(x) & GrippingForce(y)) -> Produces(x,y))", "all x.(Gripping(x) -> ProducesGrippingForce(x))", "all x.(Gripping(x) -> ProducesGrippingForce(x))", "all x.(Gripping(x) -> ProducesGrippingForce(x))", "all x.(Gripping(x) -> ProducesGrippingForce(x))", "all x y.((Gripping(x) & Force(y)) -> Produces(x,y))", "all x.(Gripping(x) -> ProducesGrippingForce(x))", "all x y.((Gripping(x) & GrippingForce(y)) -> Produces(x,y))", "all x y.((Gripping(x) & Gripping(y)) -> ProducesGrippingForce(x,y))", "all x y.((Gripping(x) & Gripping(y)) -> ProducesGrippingForce(x,y))", "all x.(Grapping(x) -> ProducesGrippingForce(x))", "all x.(Gripping(x) -> ProducesGrippingForce(x))", "all x.(Gripping(x) -> ProducesGrabbingForce(x))", "all x.(GrippingForce(x) -> ProducesGrippingForce(x))"]}
{"id": "entailmentbank_validation_973", "nl": "pliers are a tool that can produce gripping force.", "fol": "", "prediction": ["all x.(Plier(x) -> (Tool(x) & ProducesGrippingForce(x)))", "all x.(Plier(x) -> (Tool(x) & ProducesGrippingForce(x)))", "all x.(Plier(x) -> (ProducesGrippingForce(x) & CanProduceGrippingForce(x)))", "all x.(Plier(x) -> (ProducesGrippingForce(x) | ProducesGrippingForce(x)))", "all x.(Plier(x) -> (Tool(x) & ProducesGrippingForce(x)))", "all x.(Plier(x) -> (ProducesGrippingForce(x) & CanProduceGrippingForce(x)))", "all x.(Plier(x) -> (ProducesGrippingForce(x) & ProducesGrippingForce(x)))", "all x.(Plier(x) -> (ProducesGrippingForce(x) & ProducesGrippingForce(x)))", "all x.(Plier(x) -> (ProduceGrippingForce(x) & CanProduceGrippingForce(x)))", "all x y.((Plier(x) & Tool(y)) -> ProducesGrippingForce(x,y))", "all x.(Plier(x) -> ProducesGrippingForce(x))", "all x y.((Plier(x) & Tool(y)) -> ProducesGrippingForce(x,y))", "all x.(Plier(x) -> ProducesGrippingForce(x))", "all x.(Plier(x) -> (ProducesGrippingForce(x) & CanProduceGrippingForce(x)))", "all x.(Plier(x) -> (ProducesGrippingForce(x) & CanProduceGrippingForce(x)))", "all x y.((Plier(x) & Tool(y)) -> ProducesGrippingForce(x,y))"]}
{"id": "entailmentbank_validation_974", "nl": "a gripping force can be used to tighten a mechanical fastener.", "fol": "", "prediction": ["all x y.((GrippingForce(x) & MechanicalFastener(y)) -> Tightens(x,y))", "all x y.((GrippingForce(x) & MechanicalFastener(y)) -> Tighten(x,y))", "all x.(GrippingForce(x) -> TightensMechanicalFastener(x))", "all x y z.((GrippingForce(x) & MechanicalFastener(y) & MechanicalFastener(z)) -> Tightens(x,y,z))", "all x y.((GrippingForce(x) & MechanicalFastener(y)) -> Tightens(x,y))", "all x y.((GrippingForce(x) & MechanicalFastener(y)) -> Tightens(x,y))", "all x y z.((GrippingForce(x) & MechanicalFastener(y) & MechanicalFastener(z)) -> Tighten(x,y,z))", "all x y.((GrippingForce(x) & MechanicalFastener(y)) -> CanTighten(x,y))", "all x y z.((GrippingForce(x) & MechanicalFastener(y) & MechanicalFastener(z)) -> Tightens(x,y,z))", "all x y.((GrippingForce(x) & MechanicalFastener(y)) -> Tightens(x,y))", "all x y.((GrippingForce(x) & MechanicalFastener(y)) -> Tighten(x,y))", "all x y z.((GrippingForce(x) & MechanicalFastener(y) & MechanicalFastener(z)) -> Tightens(x,y,z))", "all x y.((GrippingForce(x) & MechanicalFastener(y)) -> Tighten(x,y))", "all x y z.((GrippingForce(x) & MechanicalFastener(y) & MechanicalFastener(z)) -> Tighten(x,y,z))", "all x y z.((GrippingForce(x) & MechanicalFastener(y) & MechanicalFastener(z)) -> CanTighten(x,y,z))", "all x y.((GrippingForce(x) & MechanicalFastener(y) & UsedToTighten(x,y)) -> Tighten(x,y))"]}
{"id": "entailmentbank_validation_975", "nl": "pliers can be used to tighten a mechanical fastener.", "fol": "", "prediction": ["all x y.((Plier(x) & MechanicalFastener(y)) -> Tightens(x,y))", "all x y.((Plier(x) & MechanicalFastener(y)) -> Tighten(x,y))", "all x y.((Plier(x) & MechanicalFastener(y)) -> Tighten(x,y))", "all x y.((Plier(x) & MechanicalFastener(y)) -> Tightens(x,y))", "all x.(Plier(x) -> TightensMechanicalFastener(x))", "all x y z.((Plier(x) & MechanicalFastener(y) & MechanicalFastener(z)) -> Tighten(x,y,z))", "all x y z.((Plier(x) & MechanicalFastener(y) & MechanicalFastener(z)) -> Tightens(x,y,z))", "all x y z.((Plier(x) & MechanicalFastener(y) & MechanicalFastener(z)) -> Tighten(x,y,z))", "all x y z.((Plier(x) & MechanicalFastener(y) & MechanicalFastener(z)) -> Tightens(x,y,z))", "all x y.((Plier(x) & MechanicalFastener(y)) -> CanTighten(x,y))", "all x y.((Plier(x) & MechanicalFastener(y)) -> CanTighten(x,y))", "all x y z.((Plier(x) & MechanicalFastener(y) & MechanicalFastener(z)) -> CanTighten(x,y,z))", "all x y.((Plier(x) & MechanicalFastener(y) & UsedToTighten(x,y)) -> Tighten(x,y))", "all x y.((Plier(x) & MechanicalFastener(y)) -> UsedToTighten(x,y))", "all x y z.((Plier(x) & MechanicalFastener(y) & Fastener(z)) -> Tighten(x,y,z))", "all x.(Plier(x) -> TightensMechanicalFastener(x))"]}
{"id": "entailmentbank_validation_976", "nl": "advances in technology sometimes cause human jobs to be replaced by more efficient machines.", "fol": "", "prediction": ["all x y.((AdvancesInTechnology(x) & HumanJob(y)) -> ReplacedByMoreEfficientMachines(x,y))", "all x y.((AdvancesInTechnology(x) & HumanJob(y)) -> ReplacedByMoreEfficientMachines(y,x))", "all x y.((AdvancesInTechnology(x) & HumanJob(y)) -> ReplacedByMoreEfficientMachines(y))", "all x y.((AdvancesInTechnology(x) & HumanJob(y)) -> ReplacedByEfficientMachines(x,y))", "all x y.((AdvancesInTechnology(x) & HumanJob(y)) -> ReplacedByEfficientMachines(y,x))", "all x y.((TechnologyAdvances(x) & HumanJob(y)) -> ReplacedByMoreEfficientMachines(x,y))", "all x y.((AdvancementInTechnology(x) & HumanJob(y)) -> ReplacedByMoreEfficientMachines(x,y))", "all x y.((TechnologyAdvancement(x) & HumanJob(y)) -> ReplacedByMoreEfficientMachines(x,y))", "all x y.((AdvancesInTechnology(x) & HumanJob(y)) -> CausesReplacement(x,y))", "all x y z.((AdvancesInTechnology(x) & HumanJob(y) & Machine(z)) -> ReplacedBy(y,z))", "all x y.((AdvancesInTechnology(x) & HumanJob(y)) -> ReplacedByEfficientMachines(y))", "all x y.((AdvancementInTechnology(x) & HumanJob(y)) -> ReplacedByMoreEfficientMachines(y,x))", "all x y.((TechnologyAdvances(x) & HumanJob(y)) -> ReplacedByMoreEfficientMachines(y,x))", "all x.((TechnologyAdvances(x) & HumanJob(y)) -> ReplacedByMoreEfficientMachines(x,y))", "all x y.((TechnologyAdvance(x) & HumanJob(y)) -> ReplacedByMoreEfficientMachines(x,y))", "all x y.((TechnologyAdvances(x) & HumanJob(y)) -> ReplacedByEfficientMachines(x,y))"]}
{"id": "entailmentbank_validation_977", "nl": "replacing something decreases that something.", "fol": "", "prediction": ["all x y.((Replacement(x) & Something(y)) -> Decreases(x,y))", "all x y.((Replacement(x,y) & Something(y)) -> Decreases(x,y))", "all x y.((Replacing(x,y) & Something(y)) -> Decreases(x,y))", "all x y.((Replacing(x) & Something(y)) -> Decreases(x,y))", "all x y.((Replaces(x,y) & Something(y)) -> Decreases(x,y))", "all x.((Replacing(x) & Something(x)) -> Decreases(x,y))", "all x y.((Placing(x,y) & Something(y)) -> Decreases(x,y))", "all x.((Replacement(x) & Something(x)) -> Decreases(x,y))", "all x y z.((Replacement(x) & Something(y) & Something(z)) -> Decreases(y,z))", "all x y z.((Replacement(x) & Something(y) & Something(z)) -> Decreases(x,y,z))", "all x y.((Provides(x,y) & Something(y)) -> Decreases(x,y))", "all x y.((Placing(x) & Something(y)) -> Decreases(x,y))", "all x.((Replaces(x,y) & Something(y)) -> Decreases(x,y))", "all x.((Replacement(x) & Something(y)) -> Decreases(x,y))", "all x.((Replacing(x) & Something(x)) -> Decreases(x))", "all x.((Replacement(x) & Something(x)) -> Decreases(x))"]}
{"id": "entailmentbank_validation_978", "nl": "advances in technology decrease human jobs by replacing them with efficient machines.", "fol": "", "prediction": ["all x y.((AdvancesInTechnology(x) & HumanJob(y)) -> (Decreases(x,y) & ReplacesWithEfficientMachines(x,y)))", "all x y.((AdvancesInTechnology(x) & HumanJob(y)) -> (Decreases(x,y) & ReplacesWithEfficientMachines(x)))", "all x y.((AdvancesInTechnology(x) & HumanJob(y) & ReplacedWithEfficientMachines(x,y)) -> Decreases(x,y))", "all x y z.((AdvancesInTechnology(x) & HumanJob(y) & Machine(z)) -> (Decreases(x,y) & Replaces(x,z)))", "all x y.((AdvancesInTechnology(x) & HumanJob(y)) -> (Decreases(x,y) & Replaces(x,y)))", "all x y z.((AdvancesInTechnology(x) & HumanJob(y) & Machine(z)) -> (Decreases(x,y) & ReplacesWith(x,z)))", "all x y.((TechnologyAdvances(x) & HumanJob(y)) -> (Decreases(x,y) & ReplacesWithEfficientMachines(x,y)))", "all x y.((ProgressesInTechnology(x) & HumanJob(y)) -> (Decreases(x,y) & ReplacesWithEfficientMachines(x,y)))", "all x y.((TechnologyAdvances(x) & HumanJob(y) & ReplacedWithEfficientMachines(x,y)) -> Decreases(x,y))", "all x y.((TechnologicalAdvances(x) & HumanJob(y)) -> (Decreases(x,y) & ReplacesWithEfficientMachines(x,y)))", "all x y.((ProgressesInTechnology(x) & HumanJob(y)) -> (Decreases(x,y) & ReplacesWithEfficientMachines(x)))", "all x y.((TechnologyAdvances(x) & HumanJob(y)) -> (Decreases(x,y) & ReplacesWithEfficientMachines(x)))", "all x y.((AdvancesInTechnology(x) & HumanJobs(y) & ReplacedWithEfficientMachines(x,y)) -> Decreases(x,y))", "all x y.((AdvancesInTechnology(x) & HumanJobs(y)) -> (Decreases(x,y) & ReplacesWithEfficientMachines(x,y)))", "all x y.((AdvancesInTechnology(x) & HumanJob(y)) -> (Decreases(x,y) & ReplacesWithEfficientMachines(y)))", "all x y.((TechnologicalAdvances(x) & HumanJob(y) & ReplacedWithEfficientMachines(x,y)) -> Decreases(x,y))"]}
{"id": "entailmentbank_validation_979", "nl": "having a job has a positive impact on a human.", "fol": "", "prediction": ["all x.(Job(x) -> PositiveImpactOnHuman(x))", "all x y.((Job(x) & Human(y)) -> PositiveImpact(x,y))", "all x.((Job(x) & Human(y)) -> PositiveImpact(x,y))", "all x.(HasJob(x) -> PositiveImpactOnHuman(x))", "all x y.((Job(x) & Human(y)) -> PositiveImpactOn(x,y))", "all x.((Job(x) & PositiveImpactOnHuman(x)) -> HasJob(x))", "all x y z.((Job(x) & Human(y) & Job(z)) -> PositiveImpact(x,y,z))", "all x.((Job(x) & Human(x)) -> PositiveImpact(x))", "all x.((Job(x) & PositiveImpactOnHuman(x)) -> Job(x))", "all x y z.((Job(x) & Human(y) & Human(z)) -> PositiveImpact(x,y,z))", "all x y z.((Job(x) & Human(y) & Job(z)) -> PositiveImpactOn(x,y,z))", "all x y.((Job(x) & Human(y) & Has(x,y)) -> PositiveImpact(x,y))", "all x.(Job(x) -> PositiveImpact(x))", "all x y.((Job(x) & Human(y)) -> HasPositiveImpact(x,y))", "all x.((Job(x) & PositiveImpact(x)) -> Human(x))", "all x.((Job(x) & PositiveImpactOnHuman(x)) -> Has(x,Human))"]}
{"id": "entailmentbank_validation_980", "nl": "decreasing something positive has a negative impact on a thing.", "fol": "", "prediction": ["all x y.((Positive(x) & Positive(y)) -> NegativeImpact(x,y))", "all x y.((Positive(x) & Thing(y)) -> NegativeImpact(x,y))", "all x y z.((Positive(x) & Positive(y) & Thing(z)) -> NegativeImpact(x,y,z))", "all x y.((Positive(x) & Positive(y) & Positive(y)) -> NegativeImpact(x,y))", "all x y z.((Positive(x) & Positive(y) & Thing(z) & Decreases(x,y)) -> NegativeImpact(x,z))", "all x y.((Positive(x) & Positive(y)) -> NegativeImpactOnThing(x,y))", "all x.(DecreasingPositive(x) -> NegativeImpactOnThing(x))", "all x y z.((Positive(x) & Positive(y) & Thing(z) & Decreasing(x,y)) -> NegativeImpact(x,z))", "all x y z.((Positive(x) & Positive(y) & Thing(z) & Decreases(x,y)) -> NegativeImpact(y,z))", "all x y.((DecreasesPositive(x) & Thing(y)) -> NegativeImpact(x,y))", "all x.((Positive(x) & Positive(x)) -> NegativeImpact(x))", "all x.(DecreasingPositive(x) -> NegativeImpact(x))", "all x y z.((Positive(x) & Positive(y) & Thing(z)) -> NegativeImpact(y,z))", "all x y.((Positive(x) & Positive(y) & Positive(y)) -> NegativeImpactOnThing(x,y))", "all x y z.((Positive(x) & Positive(y) & Thing(z) & Decreases(x,y)) -> NegativeImpactOn(x,z))", "all x y z.((Positive(x) & Positive(y) & Thing(z) & Decreased(x,y)) -> NegativeImpact(x,z))"]}
{"id": "entailmentbank_validation_981", "nl": "advances in technology decreasing human jobs by more efficient machines has a negative impact on human.", "fol": "", "prediction": ["all x.((AdvancesInTechnology(x) & DecreasesHumanJobs(x) & MoreEfficientMachines(x)) -> NegativeImpactOnHuman(x))", "all x.((ProgressesInTechnology(x) & DecreasesHumanJobs(x) & MoreEfficientMachines(x)) -> NegativeImpactOnHuman(x))", "all x.((TechnologyAdvances(x) & DecreasesHumanJobs(x) & MoreEfficientMachines(x)) -> NegativeImpactOnHuman(x))", "all x y.((AdvancesInTechnology(x) & HumanJobs(y) & MoreEfficientMachines(x)) -> NegativeImpactOnHuman(x,y))", "all x.((AdvancementsInTechnology(x) & DecreasesHumanJobs(x) & MoreEfficientMachines(x)) -> NegativeImpactOnHuman(x))", "all x.((TechnologyAdvancements(x) & DecreasesHumanJobs(x) & MoreEfficientMachines(x)) -> NegativeImpactOnHuman(x))", "all x y.((AdvancesInTechnology(x) & HumanJobs(y) & MoreEfficientMachines(x)) -> NegativeImpactOnHuman(x))", "all x.((TechnologyAdvances(x) & HumanJobs(x) & MoreEfficientMachines(x)) -> NegativeImpactOnHuman(x))", "all x.((TechnologyAdvancements(x) & HumanJobs(x) & MoreEfficientMachines(x)) -> NegativeImpactOnHuman(x))", "all x y.((ProgressesInTechnology(x) & HumanJobs(y) & MoreEfficientMachines(x)) -> NegativeImpactOnHuman(x,y))", "all x y.((AdvancesInTechnology(x) & HumanJobs(y) & MoreEfficientMachines(z)) -> NegativeImpactOnHuman(x,y,z))", "all x y.((AdvancesInTechnology(x) & HumanJobs(y) & MoreEfficientMachines(x,y)) -> NegativeImpactOnHuman(x))", "all x y.((TechnologyAdvances(x) & HumanJobs(y) & MoreEfficientMachines(x)) -> NegativeImpactOnHuman(x,y))", "all x y.((AdvancementsInTechnology(x) & HumanJobs(y) & MoreEfficientMachines(x)) -> NegativeImpactOnHuman(x,y))", "all x y.((ProgressesInTechnology(x) & HumanJobs(y) & MoreEfficientMachines(x)) -> NegativeImpactOnHuman(x))", "all x y.((AdvancesInTechnology(x) & HumanJobs(y) & MoreEfficientMachines(x)) -> NegativeImpact(x,y))"]}
{"id": "entailmentbank_validation_982", "nl": "days are a kind of unit for measuring time.", "fol": "", "prediction": ["all x.(Day(x) -> MeasuresTime(x))", "all x.(Day(x) -> MeasuringTime(x))", "all x.(Day(x) -> UnitForMeasuringTime(x))", "all x y.((Day(x) & Day(y)) -> MeasuresTime(x,y))", "all x.(Day(x) -> (MeasuresTime(x) & MeasuresTime(x)))", "all x.(Days(x) -> MeasuresTime(x))", "all x y.((Day(x) & Time(y)) -> Measures(x,y))", "all x.(Day(x) -> MeasuresTime(x))", "all x.(Day(x) -> (MeasuresTime(x) | MeasuresTime(x)))", "all x y.((Day(x) & Day(y)) -> MeasuringTime(x,y))", "all x y.((Day(x) & Day(y)) -> UnitForMeasuringTime(x,y))", "all x.(Day(x) -> MeasuresTimeUnit(x))", "all x.(Day(x) -> UsedForMeasuringTime(x))", "all x.(Day(x) -> MeasuringTimeUnit(x))", "all x y.((Day(x) & Day(y)) -> (MeasuresTime(x,y)))", "all x.(Day(x) -> MeasuringTime(x))"]}
{"id": "entailmentbank_validation_983", "nl": "a student wants to record the data of the growth of a vine over a period of a day.", "fol": "", "prediction": ["all x y.((Student(x) & Vine(y)) -> WantsToRecordDataOfGrowthOverDay(x,y))", "all x y z.((Student(x) & Vine(y) & Day(z)) -> WantsToRecordDataOfGrowth(x,y,z))", "all x y z.((Student(x) & Vine(y) & DayPeriod(z)) -> WantsToRecordDataOfGrowth(x,y,z))", "all x y z.((Student(x) & Vine(y) & Day(z)) -> WantsToRecordDataOfGrowthOverPeriod(x,y,z))", "all x y.((Student(x) & Vine(y)) -> WantsToRecordDataOfGrowth(x,y))", "all x y.((Student(x) & Vine(y)) -> WantsToRecordGrowthOverDay(x,y))", "all x y z.((Student(x) & Vine(y) & DayPeriod(z)) -> WantsToRecordDataOfGrowthOverDay(x,y,z))", "all x y z.((Student(x) & Grape(y) & Day(z)) -> WantsToRecordDataOfGrowth(x,y,z))", "all x y z.((Student(x) & Vine(y) & Day(z) & WantsToRecordDataOfGrowth(x,y,z)) -> WantsToRecordData(x,y,z))", "all x y.((Student(x) & Vine(y) & WantsToRecordDataOfGrowthOverDay(x,y)) -> WantsToRecordData(x,y))", "all x y z.((Student(x) & Vine(y) & DayPeriod(z) & WantsToRecordDataOfGrowth(x,y,z)) -> WantsToRecordData(x,y,z))", "all x y z.((Student(x) & Vine(y) & DayPeriod(z)) -> WantsToRecordDataOfGrowthOverPeriod(x,y,z))", "all x y z.((Student(x) & Grape(y) & DayPeriod(z)) -> WantsToRecordDataOfGrowth(x,y,z))", "all x y z.((Student(x) & Vine(y) & Day(z) & WantsToRecordDataOfGrowth(x,y,z)) -> WantsToRecordDataOfGrowth(x,y,z))", "all x y z.((Student(x) & Vine(y) & Day(z)) -> WantsToRecordGrowth(x,y,z))", "all x y z.((Student(x) & Vein(y) & Day(z)) -> WantsToRecordDataOfGrowth(x,y,z))"]}
{"id": "entailmentbank_validation_984", "nl": "the student wants to record the data of the growth of a vine over a period of time.", "fol": "", "prediction": ["all x y.((Student(x) & Vine(y)) -> WantsToRecordDataOfGrowthOverPeriod(x,y))", "all x y z.((Student(x) & Vine(y) & TimePeriod(z)) -> WantsToRecordDataOfGrowth(x,y,z))", "all x y z.((Student(x) & Vine(y) & Time(z)) -> WantsToRecordDataOfGrowth(x,y,z))", "all x y.((Student(x) & Vine(y)) -> WantsToRecordDataOfGrowth(x,y))", "all x y z.((Student(x) & Vine(y) & PeriodOfTime(z)) -> WantsToRecordDataOfGrowth(x,y,z))", "all x y.((Student(x) & Vine(y) & WantsToRecordDataOfGrowthOverPeriod(x,y)) -> WantsToRecordData(x,y))", "all x y z.((Student(x) & Vine(y) & TimePeriod(z)) -> WantsToRecordDataOfGrowthOverTime(x,y,z))", "all x y.((Student(x) & Vine(y) & WantsToRecordDataOfGrowth(x,y)) -> WantsToRecordData(x,y))", "all x y z.((Student(x) & Vine(y) & TimePeriod(z) & WantsToRecordDataOfGrowth(x,y,z)) -> WantsToRecordData(x,y,z))", "all x y z.((Student(x) & Vine(y) & Time(z)) -> WantsToRecordDataOfGrowthOverTime(x,y,z))", "all x y.((Student(x) & Vine(y)) -> WantsToRecordDataOfGrowthOverPeriodOfTime(x,y))", "all x y z.((Student(x) & Vine(y) & PeriodOfTime(z)) -> WantsToRecordDataOfGrowthOverTime(x,y,z))", "all x y z.((Student(x) & Vine(y) & Time(z) & WantsToRecordDataOfGrowth(x,y,z)) -> WantsToRecordData(x,y,z))", "all x y z.((Student(x) & Vine(y) & PeriodOfTime(z)) -> WantsToRecordDataOfGrowth(x,y,z))", "all x y.((Student(x) & Vine(y)) -> WantsToRecordDataOfGrowthOverTime(x,y))", "all x y.((Student(x) & Vine(y) & WantsToRecordDataOfGrowthOverPeriod(x,y)) -> WantsToRecordDataOfGrowthOverPeriod(x,y))"]}
{"id": "entailmentbank_validation_985", "nl": "a line graph is used for showing change / data over time.", "fol": "", "prediction": ["all x y.((LineGraph(x) & Change(y) & Data(y)) -> ShowsOverTime(x,y))", "all x.(LineGraph(x) -> ShowsChange(x))", "all x y.((LineGraph(x) & Change(y)) -> ShowsOverTime(x,y))", "all x y z.((LineGraph(x) & Change(y) & Data(z)) -> ShowsOverTime(x,y,z))", "all x y.((LineGraph(x) & Change(y) & Data(z)) -> ShowsOverTime(x,y,z))", "all x.(LineGraph(x) -> (ShowsChange(x) & ShowsData(x)))", "all x.(LineGraph(x) -> ShowsChangeOverTime(x))", "all x.(LineGraph(x) -> (ShowsChange(x) | ShowsData(x)))", "all x y.((LineGraph(x) & Change(y) & Data(y)) -> Shows(x,y))", "all x y.((LineGraph(x) & Change(y) & Data(y)) -> UsedForShowing(x,y))", "all x.(LineGraph(x) -> (ShowsChange(x) & ShowsData(x) & OverTime(x)))", "all x y.((LineGraph(x) & Change(y)) -> Shows(x,y))", "all x y z.((LineGraph(x) & Change(y) & Data(z)) -> Shows(x,y,z))", "all x.(LineGraph(x) -> ShowsChangeAndData(x))", "all x y z.((LineGraph(x) & Change(y) & Data(z)) -> UsedForShowing(x,y,z))", "all x y.((LineGraph(x) & Change(y) & Data(y)) -> UsedFor(x,y))"]}
{"id": "entailmentbank_validation_986", "nl": "a line graph an be used to show the data of the growth of the vine over a period of time.", "fol": "", "prediction": ["all x y.((LineGraph(x) & Vine(y)) -> ShowsDataOfGrowthOverPeriod(x,y))", "all x y z.((LineGraph(x) & Vine(y) & PeriodOfTime(z)) -> ShowsDataOfGrowth(x,y,z))", "all x y.((LineGraph(x) & Vine(y)) -> ShowsDataOfGrowth(x,y))", "all x y z.((LineGraph(x) & Vine(y) & TimePeriod(z)) -> ShowsDataOfGrowth(x,y,z))", "all x y z.((LineGraph(x) & Vine(y) & Time(z)) -> ShowsDataOfGrowth(x,y,z))", "all x y z.((LineGraph(x) & Vine(y) & PeriodOfTime(z)) -> ShowsDataOfGrowthOverTime(x,y,z))", "all x y.((LineGraph(x) & Vine(y)) -> ShowsDataOfGrowthOverTime(x,y))", "all x y.((LineGraph(x) & Vine(y) & TimePeriod(y)) -> ShowsDataOfGrowth(x,y))", "all x y z.((LineGraph(x) & Vine(y) & TimePeriod(z)) -> ShowsDataOfGrowthOverTime(x,y,z))", "all x y z.((LineGraph(x) & Vine(y) & Time(z)) -> ShowsDataOfGrowthOverTime(x,y,z))", "all x y.((LineGraph(x) & Vine(y) & PeriodOfTime(y)) -> ShowsDataOfGrowth(x,y))", "all x y.((LineGraph(x) & Vine(y) & PeriodOfTime(y)) -> ShowsDataOfGrowth(x,y))", "all x y z.((LineGraph(x) & Vine(y) & TimePeriod(z)) -> ShowsData(x,y,z))", "all x y z.((LineGraph(x) & Vine(y) & Time(z)) -> ShowsDataOfGrowthOverPeriod(x,y,z))", "all x y z.((LineGraph(x) & Vine(y) & PeriodOfTime(z)) -> ShowsDataOfGrowth(x,y,z))", "all x y.((LineGraph(x) & Vine(y) & PeriodOfTime(y)) -> ShowsDataOfGrowthOverTime(x,y))"]}
