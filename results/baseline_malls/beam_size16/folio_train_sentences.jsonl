{"id": "folio_train_0", "nl": "All people who regularly drink coffee are dependent on caffeine.", "fol": "all x.(RegularlyDrinkCoffee(x) -> DependentOnCaffeine(x))", "prediction": ["all x.((Person(x) & RegularDrinksCoffee(x)) -> DependentOnCaffeine(x))", "all x.((Person(x) & RegularlyDrinksCoffee(x)) -> DependentOnCaffeine(x))", "all x.((Person(x) & RegularDrinksCoffee(x)) -> DependsOnCaffeine(x))", "all x.((Person(x) & DrinksCoffeeRegularly(x)) -> DependentOnCaffeine(x))", "all x.(RegularDrinksCoffee(x) -> DependentOnCaffeine(x))", "all x.((Person(x) & RegularlyDrinksCoffee(x)) -> DependsOnCaffeine(x))", "all x.((Person(x) & DrinksCoffeeRegularly(x)) -> DependsOnCaffeine(x))", "all x.((People(x) & RegularlyDrinksCoffee(x)) -> DependentOnCaffeine(x))", "all x.((Person(x) & DrinksCoffee(x)) -> DependentOnCaffeine(x))", "all x.(RegularDrinksCoffee(x) -> DependsOnCaffeine(x))", "all x.((People(x) & RegularDrinksCoffee(x)) -> DependentOnCaffeine(x))", "all x.((Person(x) & RegularDrinkCoffee(x)) -> DependentOnCaffeine(x))", "all x.((Person(x) & DrinksCoffee(x)) -> DependsOnCaffeine(x))", "all x.((People(x) & RegularlyDrinksCoffee(x)) -> DependsOnCaffeine(x))", "all x.((People(x) & DrinksCoffeeRegularly(x)) -> DependentOnCaffeine(x))", "all x.(RegularDrinkCoffee(x) -> DependentOnCaffeine(x))"]}
{"id": "folio_train_1", "nl": "People either regularly drink coffee or joke about being addicted to caffeine.", "fol": "all x.((RegularlyDrinkCoffee(x) & -JokesAboutAddiction(x)) | (-RegularlyDrinkCoffee(x) & JokesAboutAddiction(x)))", "prediction": ["exists x.(Person(x) & (RegularDrinksCoffee(x) | AddictsToCaffeine(x)))", "all x.((Person(x) & (RegularDrinksCoffee(x) | AddictsToCaffeine(x))) -> (Person(x) & AddictsToCaffeine(x)))", "all x.(Person(x) -> (RegularDrinksCoffee(x) | AddictsToCaffeine(x)))", "all x y.((Person(x) & Coffee(y)) -> (RegularDrink(x,y) | AddictToCaffeine(x,y)))", "exists x.(Person(x) & ((RegularDrinksCoffee(x) | AddictsToCaffeine(x))) | AddictsToCaffeine(x)))", "all x.(People(x) -> (RegularDrinksCoffee(x) | AddictsToCaffeine(x)))", "exists x.(People(x) & (RegularDrinksCoffee(x) | AddictsToCaffeine(x)))", "all x.((Person(x) & (RegularDrinksCoffee(x) | AddictsToCaffeine(x))) -> AddictsToCaffeine(x))", "all x.(Person(x) -> ((RegularDrinksCoffee(x) | AddictsToCaffeine(x))))", "exists x.(Person(x) & (RegularDrinksCoffee(x) | AddictedToCaffeine(x)))", "all x.((Person(x) & (RegularDrinksCoffee(x) | AddictedToCaffeine(x))) -> AddictedToCaffeine(x))", "all x.((Person(x) & (RegularDrinksCoffee(x) | AddictsToCaffeine(x))) -> Drinks(x,Coffee))", "all x.((Person(x) & (RegularDrinksCoffee(x) | AddictsToCaffeine(x))) -> (Person(x) | AddictsToCaffeine(x))))", "exists x.(Person(x) & ((RegularDrinksCoffee(x) | AddictedToCaffeine(x))) | AddictedToCaffeine(x)))", "all x.((People(x) & (RegularDrinksCoffee(x) | AddictsToCaffeine(x))) -> AddictsToCaffeine(x))", "all x.((Person(x) & (RegularDrinksCoffee(x) | AddictsToCaffeine(x))) -> DrinksCoffee(x))"]}
{"id": "folio_train_2", "nl": "No one who jokes about being addicted to caffeine is unaware that caffeine is a drug.", "fol": "all x.(JokesAboutAddiction(x) -> -UnawareOfCaffeineDrug(x))", "prediction": ["all x.((Joke(x) & AddictsToCaffeine(x)) -> UnknownDrug(x))", "all x.((Person(x) & JokesAboutAddictionToCaffeine(x)) -> UnknownDrug(x))", "all x.((Joke(x) & AddictsToCaffeine(x)) -> Unknown(x))", "all x.((JokesAboutCaffeine(x) & AddictsToCaffeine(x)) -> UnknownDrug(x))", "all x.((Joke(x) & AddictedToCaffeine(x)) -> UnknownDrug(x))", "all x.((Joke(x) & AddictsToCaffeine(x)) -> UnawareOfDrug(x))", "all x.((Person(x) & JokesAboutAddictionToCaffeine(x)) -> UnawareOfDrug(x))", "all x.((Person(x) & JokesAboutAddictionToCaffeine(x)) -> UnknownCaffeineDrug(x))", "all x.((JokesAboutAddictionToCaffeine(x)) -> UnknownDrug(x))", "all x.((Person(x) & JokesAboutAddictionToCaffeine(x)) -> Unknown(x))", "all x.((Person(x) & JokesAboutAddictedToCaffeine(x)) -> UnknownDrug(x))", "all x.((JocketsAboutCaffeine(x) & AddictsToCaffeine(x)) -> UnknownDrug(x))", "all x.((JokesAboutCaffeine(x) & AddictsTo(x,Caffeine)) -> UnknownDrug(x))", "all x.((Joke(x) & AddictedToCaffeine(x)) -> Unknown(x))", "all x.((JokesAboutAddiction(x) & Cocaine(x)) -> Drug(x))", "all x.((JokesAboutCaffeine(x) & AddictsToCaffeine(x)) -> Unknown(x))"]}
{"id": "folio_train_3", "nl": "Rina is either a student and unaware that caffeine is a drug, or neither a student nor unaware that caffeine is a drug.", "fol": "((IsStudent(Rina) & UnawareOfCaffeineDrug(Rina) & (IsStudent(Rina) | UnawareOfCaffeineDrug(Rina))) | (-(IsStudent(Rina) & UnawareOfCaffeineDrug(Rina)) & -(IsStudent(Rina) | UnawareOfCaffeineDrug(Rina))))", "prediction": ["all x.(Rina(x) -> ((Student(x) & UnconsciousOfCaffeine(x)) | (-Student(x) & UnconsciousOfCaffeine(x)))))", "((Student(Rina) & UnconsciousOfCaffeine(Rina)) | (-Student(Rina) & UnconsciousOfCaffeine(Rina))))", "all x.(Rina(x) -> ((Student(x) & UnconsciousOfCaffeine(x)) | -Student(x) & UnconsciousOfCaffeine(x))))", "(all x.(Rina(x) -> (Student(x) & UnconsciousOfCaffeine(x)) | (-Student(x) & UnconsciousOfCaffeine(x)))))", "all x.((Rina(x) & (Student(x) & UnconsciousOfCaffeine(x)) | (-Student(x) & UnconsciousOfCaffeine(x)))))", "all x.(Rina(x) -> ((Student(x) & UnawareOfCaffeine(x)) | (-Student(x) & UnawareOfCaffeine(x)))))", "(Student(Rina) & UnconsciousOfCaffeine(Rina)) | (-Student(Rina) & UnconsciousOfCaffeine(Rina))))", "all x.(Rina(x) -> ((Student(x) & UnconsciousOfCaffeine(x)) | (-Student(x) & UnconsciousOfCaffeine(x)))))", "all x.(Rina(x) -> ((Student(x) & Unknown(x) & CaffeineDrug(x)) | (-Student(x) & Unknown(x) & CaffeineDrug(x)))))", "all x.(Rina(x) -> ((Student(x) & Unknown(x) & CaffeineDrug(x)) | (-Student(x) & Unknown(x) & CaffeineDrug(x))))", "(all x.(Rina(x) -> (Student(x) & UnconsciousOfCaffeine(x))) | (-Student(x) & UnconsciousOfCaffeine(x)))))", "all x.((Rina(x) & (Student(x) & UnconsciousOfCaffeine(x)) | -Student(x) & UnconsciousOfCaffeine(x)))", "all x.(Rina(x) -> ((Student(x) & Unconscious(x) & CaffeineDrug(x)) | (-Student(x) & Unconscious(x) & CaffeineDrug(x)))))", "all x.(Rina(x) -> ((Student(x) & Unconscious(x) & CaffeineDrug(x)) | (-Student(x) & Unconscious(x) & CaffeineDrug(x))))", "((Student(Rina) & Unknown(Rina,Caffeine)) | (-Student(Rina,Caffeine) & Unknown(Rina,Caffeine))))", "all x.(Rina(x) -> ((Student(x) & Unknown(x) & CaffeineDrug(x)) | -Student(x) & Unknown(x) & CaffeineDrug(x))))"]}
{"id": "folio_train_4", "nl": "If Rina is not a person dependent on caffeine and a student, then Rina is either a person dependent on caffeine and a student, or neither a person dependent on caffeine nor a student. ", "fol": "(((-(DependentOnCaffeine(Rina) & IsStudent(Rina)) -> (DependentOnCaffeine(Rina) & IsStudent(Rina))) & (DependentOnCaffeine(Rina) | IsStudent(Rina))) | (-(-(DependentOnCaffeine(Rina) & IsStudent(Rina)) -> (DependentOnCaffeine(Rina) & IsStudent(Rina))) & -(DependentOnCaffeine(Rina) | IsStudent(Rina))))", "prediction": ["all x.((Rina(x) & -DependsOnCaffeine(x) & DependsOnStudent(x)) -> ((PersonDependsOnCaffeine(x) & DependsOnStudent(x)) | (-PersonDependsOnCaffeine(x) & DependsOnStudent(x)))))", "all x.((Person(x) & -DependsOnCaffeine(x) & DependsOnStudent(x)) -> ((Person(x) & DependsOnCaffeine(x) & -DependsOnStudent(x)) | (-DependsOnCaffeine(x) & DependsOnStudent(x)))))", "all x.((Person(x) & -DependsOnCaffeine(x) & DependsOnStudent(x)) -> ((Person(x) & DependsOnCaffeine(x) & -DependsOnStudent(x)) | (-Person(x) & DependsOnCaffeine(x) & DependsOnStudent(x)))))", "all x.((Person(x) & -DependsOnCaffeine(x) & -DependsOnStudent(x)) -> ((Person(x) & DependsOnCaffeine(x) & -DependsOnStudent(x)) | (-DependsOnCaffeine(x) & DependsOnStudent(x)))))", "all x.((Person(x) & -DependsOnCaffeine(x) & DependsOnStudent(x)) -> ((Person(x) & DependsOnCaffeine(x) & -DependsOnStudent(x)) | -DependsOnCaffeine(x) & DependsOnStudent(x))))", "all x.((Rina(x) & -DependsOnCaffeine(x) & DependsOnStudent(x)) -> ((PersonDependsOnCaffeine(x) & DependsOnStudent(x)) | -PersonDependsOnCaffeine(x) & DependsOnStudent(x))))", "all x.((Person(x) & -DependantOnCaffeine(x) & -DependantOnStudent(x)) -> ((Person(x) & DependentOnCaffeine(x) & DependentOnStudent(x)) | (-DependantOnCaffeine(x) & DependentOnStudent(x)))))", "all x.((Person(x) & -DependantOnCaffeine(x) & -DependantOnStudent(x)) -> ((Person(x) & DependentOnCaffeine(x) & DependentOnStudent(x)) | -DependantOnCaffeine(x) & DependentOnStudent(x))))", "all x.((Person(x) & -DependsOnCaffeine(x) & DependsOnStudent(x)) -> ((Person(x) & DependsOnCaffeine(x) & DependsOnStudent(x)) | -DependsOnCaffeine(x) & DependsOnStudent(x))))", "all x.((Rina(x) & -DependsOnCaffeine(x) & DependsOnStudent(x)) -> ((PersonDependsOnCaffeine(x) & DependsOnStudent(x)) | -DependsOnCaffeine(x) & DependsOnStudent(x))))", "all x.((Rina(x) & -DependsOnCaffeine(x) & DependsOnStudent(x)) -> (PersonDependsOnCaffeine(x) | -DependsOnCaffeine(x) | -DependsOnStudent(x)))", "all x.((Rina(x) & -DependantOnCaffeine(x) & DependentOnStudent(x)) -> ((PersonDependantOnCaffeine(x) & DependentOnStudent(x)) | (-PersonDependantOnCaffeine(x) & DependentOnStudent(x)))))", "all x.((Rina(x) & -DependantOnCaffeine(x) & -DependantOnStudent(x)) -> ((DependantOnCaffeine(x) & -DependantOnStudent(x)) | (-DependantOnCaffeine(x) & -DependantOnStudent(x)))))", "all x.((Person(x) & -DependsOnCaffeine(x) & DependsOnStudent(x)) -> (Person(x) & DependsOnCaffeine(x) & -DependsOnStudent(x)))", "all x.((Person(x) & -DependsOnCaffeine(x) & DependsOnStudent(x)) -> ((Person(x) & DependsOnCaffeine(x) & -DependsOnStudent(x)) | (-DependsOnCaffeine(x) & DependsOnStudent(x))))", "all x.((Rina(x) & -DependantOnCaffeine(x) & -DependantOnStudent(x)) -> ((PersonDependantOnCaffeine(x) & Student(x)) | (-PersonDependantOnCaffeine(x) & Student(x)))))"]}
{"id": "folio_train_5", "nl": "Rina is a person who jokes about being addicted to caffeine or unaware that caffeine is a drug.", "fol": "(JokesAboutAddiction(Rina) | UnawareOfCaffeineDrug(Rina))", "prediction": ["all x.(Rina(x) -> (Person(x) & (AddictedToCaffeine(x) | UnknowinglyAddictedToCaffeine(x))))", "all x.(Rina(x) -> (AddictedToCaffeine(x) | UnknowinglyDrug(x)))", "all x.(Rina(x) -> (JokesAboutAddictedToCaffeine(x) | UnknowinglyAddictedToCaffeine(x)))", "all x.(Rina(x) -> (JokesAboutCaffeine(x) | UnknowinglyCaffeineDrug(x)))", "all x.(Rina(x) -> (Person(x) & (AddictedToCaffeine(x) | UnconsciousOfCaffeine(x))))", "all x.(Rina(x) -> (JokesAbstinenceToCaffeine(x) | UnknowinglyCaffeineDrug(x)))", "all x.(Rina(x) -> (JokesAboutAddictionToCaffeine(x) | UnknownAboutCaffeine(x)))", "all x.(Rina(x) -> (Person(x) & (AddictedToCaffeine(x) | UnconsciousOfCaffeine(x)))))", "all x y.((Person(x) & Rina(y)) -> (AddictedToCaffeine(x) | UnknowinglyDrug(y)))", "all x.(Rina(x) -> (Person(x) & (AddictedToCaffeine(x) | UnknowinglyDrug(x))))", "all x.(Rina(x) -> (AddictedToCaffeine(x) | UnconsciousOfCaffeine(x)))", "all x.(Rina(x) -> (Person(x) & (AddictedToCaffeine(x) | UnconcernedOfCaffeine(x))))", "all x.(Rina(x) -> (JokesAboutAddictionToCaffeine(x) | UnknowinglyDrug(x)))", "all x.(Rina(x) -> (Person(x) & (AddictedToCaffeine(x) | UnknowinglyAddictedToCaffeine(x)))))", "all x.(Rina(x) -> (Person(x) & (AddictedToCaffeine(x) | UnconsciousOfDrug(x))))", "all x.(Rina(x) -> (Person(x) & (AddictedToCaffeine(x) | Unknown(x))))"]}
{"id": "folio_train_6", "nl": "Rina is either a person who jokes about being addicted to caffeine or is unaware that caffeine is a drug.", "fol": "(JokesAboutAddiction(Rina) | UnawareOfCaffeineDrug(Rina))", "prediction": ["all x.(Rina(x) -> ((JokesAboutCaffeine(x) | UnconsciousOfCaffeine(x))))", "all x.(Rina(x) -> ((JokesAboutCaffeine(x) | UnknownAboutCaffeine(x))))", "all x.(Rina(x) -> (JokesAboutCaffeine(x) | UnknowinglyCaffeineDrug(x)))", "all x.(Rina(x) -> (JokesAboutCaffeine(x) | UnconsciousOfCaffeine(x)))", "all x.(Rina(x) -> (JokesAboutAddictionToCaffeine(x) | UnconsciousOfCaffeineDrug(x)))", "all x.(Rina(x) -> (JokesAboutCaffeine(x) | UnknownDrug(x)))", "all x.(Rina(x) -> ((JokesAboutCaffeine(x) | UnknownDrug(x))))", "all x.(Rina(x) -> ((JokesAboutAddictionToCaffeine(x) | UnknownAboutCaffeine(x))))", "all x.(Rina(x) -> (JokesAboutAddictionToCaffeine(x) | UnknownDrug(x)))", "all x.(Rina(x) -> (JokesAboutAddictionToCaffeine(x) | UnknowinglyDrug(x)))", "all x.(Rina(x) -> (JokesAboutCaffeine(x) | UnconsciousOfCaffeineDrug(x)))", "all x.(Rina(x) -> ((JokesAboutCaffeine(x) | UnconsciousOfCaffeineDrug(x))))", "all x.(Rina(x) -> (JokesAboutCaffeine(x) | UnknowinglyDrug(x)))", "all x.(Rina(x) -> ((JokesAboutCaffeine(x) | UnknowinglyDrug(x))))", "all x.(Rina(x) -> (JokesAboutAddictionToCaffeine(x) | UnconsciousOfCaffeine(x)))", "all x.(Rina(x) -> ((JokesAboutAddictionToCaffeine(x) | UnknownDrug(x))))"]}
{"id": "folio_train_7", "nl": "Rina is either a person who regularly drinks coffee or a person who is unaware that caffeine is a drug.", "fol": "(RegularlyDrinkCoffee(Rina) | UnawareOfCaffeineDrug(Rina))", "prediction": ["all x.(Rina(x) -> ((Person(x) & RegularlyDrinksCoffee(x)) | UnknowinglyDrug(x))))", "all x.(Rina(x) -> ((RegularDrinksCoffee(x) | UnknowinglyDrug(x))))", "all x.(Rina(x) -> ((RegularDrinksCoffee(x) | UnconsciousOfCaffeine(x))))", "all x.(Rina(x) -> ((Person(x) & RegularlyDrinksCoffee(x)) | UnconsciousOfCaffeine(x))))", "all x.(Rina(x) -> ((Person(x) & RegularDrinksCoffee(x)) | UnknowinglyDrug(x))))", "all x.(Rina(x) -> ((Person(x) & RegularlyDrinksCoffee(x)) | Unknown(x) & CaffeineDrug(x))))", "all x y.((Person(x) & Rina(y)) -> (RegularDrinksCoffee(x) | UnknowinglyDrug(y)))", "all x.(Rina(x) -> ((RegularDrinksCoffee(x) | UnknowinglyDrug(x))))", "all x.(Rina(x) -> (RegularDrinksCoffee(x) | UnknowinglyDrug(x)))", "all x.(Rina(x) -> ((Person(x) & RegularlyDrinksCoffee(x)) | (-UnconsciousOfCaffeine(x) & Drug(x))))", "all x.(Rina(x) -> ((Person(x) & RegularlyDrinksCoffee(x)) | (-UnderstandsCaffeine(x) & Drug(x))))", "all x.(Rina(x) -> ((RegularDrinksCoffee(x) | UnknownDrug(x))))", "all x.(Rina(x) -> ((Person(x) & RegularlyDrinksCoffee(x)) | UnknowinglyDrug(x)))", "all x y.((Person(x) & Rina(y)) -> (RegularDrinksCoffee(x) | UnconsciousOfCaffeine(y)))", "all x.(Rina(x) -> ((Person(x) & RegularlyDrinksCoffee(x)) | (-UnconsciousOfCaffeine(x) & Drug(x)))))", "all x.(Rina(x) -> ((Person(x) & RegularlyDrinksCoffee(x)) | (-UnderstandsCaffeineDrug(x)))))"]}
{"id": "folio_train_8", "nl": "If Rina is either a person who jokes about being addicted to caffeine and a person who is unaware that caffeine is a drug, or neither a person who jokes about being addicted to caffeine nor a person who is unaware that caffeine is a drug, then Rina jokes about being addicted to caffeine and regularly drinks coffee.", "fol": "(((JokesAboutAddiction(Rina) & UnawareOfCaffeineDrug(Rina) & (JokesAboutAddiction(Rina) | UnawareOfCaffeineDrug(Rina))) | (-(JokesAboutAddiction(Rina) & UnawareOfCaffeineDrug(Rina)) & -(JokesAboutAddiction(Rina) | UnawareOfCaffeineDrug(Rina)))) -> (JokesAboutAddiction(Rina) & RegularlyDrinkCoffee(Rina)))", "prediction": ["all x.((Person(x) & JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffe", "all x.((Person(x) & JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffe", "all x.((Person(x) & JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffe", "all x.((Person(x) & JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffe", "all x.((Person(x) & JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffe", "all x.((Person(x) & JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffe", "all x.((Person(x) & JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffe", "all x.((Person(x) & JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffef", "all x.((Person(x) & JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffef", "all x.((Person(x) & JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffe", "all x.((Person(x) & JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffe", "all x.((Person(x) & JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffe", "all x.((Person(x) & JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffe", "all x.((Person(x) & JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffe", "all x.((Person(x) & JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffef", "all x.((Person(x) & JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeineCaffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffeffe"]}
{"id": "folio_train_9", "nl": "Miroslav Venhoda was a Czech choral conductor who specialized in the performance of Renaissance and Baroque music.", "fol": "(IsCzech(Miroslav) & IsChoralConductor(Miroslav) & SpecializesIn(Miroslav,Renaissance) & SpecializesIn(Miroslav,Baroque))", "prediction": ["all x.((CzechChoralConductor(x) & SpecializedInRenaissanceAndBaroqueMusic(x)) -> MiroslavVenhoda(x))", "all x.((CzechChoralConductor(x) & SpecializedInRenaissance(x) & SpecializedInBaroque(x)) -> MiroslavVenhoda(x))", "(CzechChoralConductor(MiroslavVenhoda) & SpecializedInRenaissanceAndBaroqueMusic(MiroslavVenhoda))", "all x.((CzechChoralConductor(x) & SpecializedInRenaissance(x) & SpecializedInBaroqueMusic(x)) -> MiroslavVenhoda(x))", "all x.(MiroslavVenhoda(x) -> (CzechChoralConductor(x) & SpecializedInRenaissanceAndBaroqueMusic(x)))", "all x.(Venhoda(x) -> (CzechChoralConductor(x) & SpecializedInRenaissanceAndBaroqueMusic(x)))", "Miroslav Venhoda (CzechChoralConductor) & SpecializedInRenaissanceAndBaroqueMusic(Venhoda,Czech))", "all x.(Venhoda(x) -> (CzechChoralConductor(x) & SpecializedInRenaissance(x) & SpecializedInBaroque(x)))", "all x.(MiroslavVenhoda(x) -> (CzechChoralConductor(x) & SpecializedInRenaissance(x) & SpecializedInBaroque(x)))", "(CzechChoralConductor(Miroslav Venhoda) & SpecializedInRenaissanceAndBaroqueMusic(MiroslavVenhoda))", "Miroslav Venhoda (CzechChoralConductor) & SpecializedInRenaissanceAndBaroqueMusic(Venhoda)", "Miroslav Venhoda (CzechChoralConductor) & SpecializedInPerformanceOfRenaissanceAndBaroqueMusic(Venhoda,Czech))", "all x.(Venhoda(x) -> (CzechChoralConductor(x) & SpecializedInRenaissance(x) & SpecializedInBaroqueMusic(x)))", "all x.(MiroslavVenhoda(x) -> (CzechChoralConductor(x) & SpecializedInRenaissance(x) & SpecializedInBaroqueMusic(x)))", "Miroslav Venhoda (CzechChoralConductor) & SpecializedInRenaissanceAndBaroqueMusic(Czech))", "(CzechChoralConductor(MiroslavVenhoda) & SpecializedInRenaissanceAndBaroqueMusic(MiroslavVenhoda,Czech))"]}
{"id": "folio_train_10", "nl": "Any choral conductor is a musician.", "fol": "all x.(IsChoralConductor(x) -> IsMusician(x))", "prediction": ["all x.(ChoralConductor(x) -> Musician(x))", "all x.(CoralConductor(x) -> Musician(x))", "all x.(choralConductor(x) -> Musician(x))", "all x.((CoralConductor(x) & ChoralConductor(x)) -> Musician(x))", "all x.(CoralConductor(x) -> Musician(x))", "all x.(ChoralConductor(x) -> Musician(x))", "all x.(ChorralConductor(x) -> Musician(x))", "all x.((ChoralConductor(x) & ChoralConductor(x)) -> Musician(x))", "all x y.((ChoralConductor(x) & ChoralConductor(y)) -> Musician(x))", "all x.((ChoralConductor(x) & Musician(x)) -> Conductor(x))", "all x.((ChoralConductor(x) & ConductsChoral(x)) -> Musician(x))", "all x.((ChoralConductor(x) & Musician(x)) -> Musician(x))", "all x.((ChoralConductor(x) & Conducts(x)) -> Musician(x))", "all x y.((ChoralConductor(x) & Choral(y)) -> Musician(x))", "all x.(CorralConductor(x) -> Musician(x))", "all x.(CorralConductor(x) -> Musician(x))"]}
{"id": "folio_train_11", "nl": "Some musicians love music.", "fol": "exists x.(IsMusician(x) -> Loves(x,Music))", "prediction": ["exists x.(Musician(x) & LovesMusic(x))", "exists x.(Musician(x) & Loves(x,music))", "exists x y.(Musician(x) & Music(y) & Loves(x,y))", "exists x.(Musician(x) & LoveMusic(x))", "exists x.(Musician(x) & Loves(x,Music))", "exists x.(Musician(x) & Love(x,music))", "exists x y.(Musician(x) & Music(y) & Love(x,y))", "exists x.(Musician(x) & Love(x,Music))", "exists x.(Musician(x) & Love(x))", "exists x.(Musician(x) & LovesMusique(x))", "exists x.(Musician(x) & LoveMusique(x))", "exists x.(Musician(x) & Loves(x))", "exists x.(Musician(x) & LoveSong(x))", "exist x.(Musician(x) & LovesMusic(x))", "exists x.(Musician(x) & LovesMusic(x))", "exists x.(Musician(x) & LOVESMusic(x))"]}
{"id": "folio_train_12", "nl": "Miroslav Venhoda published a book in 1946 called Method of Studying Gregorian Chant.", "fol": "(IsBook(MethodOfStudyingGregorianChant) & IsAuthorOf(Miroslav,MethodOfStudyingGregorianChant) & PublishedInYear(MethodOfStudyingGregorianChant,Year1946))", "prediction": ["Miroslav Venhoda published a book in 1946 called MethodOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(Momento", "Miroslav Venhoda published a book in 1946 called MethodOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(Momento", "Miroslav Venhoda published a book in 1946 called MethodOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStuding(Momento", "Miroslav Venhoda published a book in 1946 called MethodOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant))", "Miroslav Venhoda published a book in 1946 called MethodOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(m)))", "Miroslav Venhoda published a book in 1946 called MethodOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStuding(Momento(Momento(Momento(Momento(Momento(Momento(Momento(Momento(Momento(Momento(Momento(Momento(Momento)))))", "Miroslav Venhoda published a book in 1946 called MethodOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStuding(Momento(Momento(Momento(Momento(Momento(Momento(Momento(Momento(Momento(Momento(Momento(Momento(Momento(Momento)))))", "Miroslav Venhoda published a book in 1946 called MethodOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStuding(Momento(Momento(Momento(Momento(Momento(Momento(Momento(Momento(Momento(Momento(Momento(Momento(Momento(Momento(Momento(Momento)))))", "Miroslav Venhoda published a book in 1946 called MethodOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStuding(MomentOfStuding(Momento", "Miroslav Venhoda published a book in 1946 called MethodOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudingChant(Momento", "Miroslav Venhoda published a book in 1946 called MethodOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStuding(Momento(Momento(Momento(Momento(Momento(Momento(Momento(Momento(Momento(Momento(Momento(Momento(Momento(Momento(Momento)))))", "Miroslav Venhoda published a book in 1946 called MethodOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStuding(Momento(Momento(Momento(Momento(Momento(Momento(Momento(Momento(Momento(Momento(Momento)))))", "Miroslav Venhoda published a book in 1946 called MethodOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStuding(Momento(Momento(Momento(Momento(Momento(Momento(Momento(Momento(Momento(Momento(Momento(Momento(Momento(Momento(Momento(Momento(Momento)))))", "Miroslav Venhoda published a book in 1946 called MethodOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOf)))", "Miroslav Venhoda published a book in 1946 called MethodOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStuding(Momento(Momento(Momento(Momento(Momento(Momento(Momento(Momento(Momento(Momento(Momento(Momento)))))", "Miroslav Venhoda published a book in 1946 called MethodOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(Momento"]}
{"id": "folio_train_13", "nl": "Miroslav Venhoda loved music.", "fol": "Loves(Miroslav,Music)", "prediction": ["Miroslav Venhoda lovedMusic(Miroslav Venhoda)", "Miroslav Venhoda lovedMusic(MiroslavVenhoda)", "Miroslav Venhoda lovedMusic(Venhoda)", "Miroslav Venhoda lovedMusic(Venhoda,Miroslav))", "Miroslav Venhoda lovedMusic(Miroslav)", "Miroslav Venhoda lovedMusic(Miroslav Venhoda,Music)", "Miroslav Venhoda lovedMusic(Venhoda,Music)", "Miroslav Venhoda lovedMusic(MiroslavVenhoda,Music)", "Miroslav Venhoda lovedMusic(Venhoda,Miroslav)", "Miroslav Venhoda lovedMusic.", "Miroslav Venhoda lovedMusic(v)", "Miroslav Venhoda liebteMusic(Miroslav Venhoda)", "Miroslav Venhoda lovedMusic(Mr.Venhoda)", "Miroslav Venhoda lovedMusic(m)", "Miroslav Venhoda LovedMusic(Miroslav Venhoda)", "Miroslav Venhoda liebteMusic(MiroslavVenhoda)"]}
{"id": "folio_train_14", "nl": "A Czech person wrote a book in 1946.", "fol": "exists x.(IsCzech(x) & exists y.(IsBook(y) & IsAuthorOf(x,y) & PublishedInYear(y,Year1946)))", "prediction": ["all x y.((CzechPerson(x) & Book(y)) -> WrittenIn(x,y))", "all x y.((CzechPerson(x) & Book(y)) -> WrittenInSugar(x,y))", "all x y.((CzechPerson(x) & Book(y)) -> WrittenInSummer(x,y))", "all x y z.((CzechPerson(x) & Book(y) & 1946(z)) -> WrittenIn(x,y,z))", "all x y.((CzechPerson(x) & Book(y) & WrittenInSugar(x,y)) -> WrittenInSugar(x,y))", "all x y.((CzechPerson(x) & Book(y)) -> WrittenInSu46(x,y))", "all x y z.((CzechPerson(x) & Book(y) & 1946(z)) -> WritesIn(x,y,z))", "all x y z.((CzechPerson(x) & Book(y) & Book(z)) -> WrittenIn(x,y,z))", "all x y.((CzechPerson(x) & Book(y)) -> WrittenInSuffrage(x,y))", "all x y.((CzechPerson(x) & Book(y) & WrittenIn(x,y)) -> WrittenIn(x,y))", "all x y.((CzechPerson(x) & Book(y)) -> WrittenInSuedia(x,y))", "all x y.((CzechPerson(x) & Book(y)) -> WrittenInSupply(x,y))", "all x y.((CzechPerson(x) & Book(y)) -> WrittenInSecond(x,y))", "all x y.((CzechPerson(x) & Book(y)) -> WrittenInSuzanne(x,y))", "all x y.((CzechPerson(x) & Book(y) & WrittenIn(x,y)) -> 1946(x))", "all x y z.((CzechPerson(x) & Book(y) & Book(z)) -> WrittenInSugar(x,y,z))"]}
{"id": "folio_train_15", "nl": "No choral conductor specialized in the performance of Renaissance.", "fol": "-exists x.(IsChoralConductor(x) & SpecializesIn(x,Renaissance))", "prediction": ["-exists x.(ChoralConductor(x) & SpecializedInRenaissancePerformance(x))", "-exists x.(ChoralConductor(x) & RenaissancePerformance(x))", "-exists x.(ChoralConductor(x) & SpecializedInRenaissance(x))", "-exists x.(ChoralConductor(x) & SpecializedInPerformanceOfRenaissance(x))", "-exists x.(CoralConductor(x) & RenaissancePerformance(x))", "-exists x.(CoralConductor(x) & SpecializedInRenaissancePerformance(x))", "-exists x.(ChoralConductor(x) & SpecializedIn(x,Renaissance))", "-exists x.(ChoralConductor(x) & SpecializesInRenaissancePerformance(x))", "-exists x.(ChoralConductor(x) & RenaissancePerformanceSpecialized(x))", "-exists x.(ChoralConductor(x) & SpecializedInRevival(x))", "-exists x.(CoralConductor(x) & SpecializedInRenaissance(x))", "-exists x y.(ChoralConductor(x) & RenaissancePerformance(y) & SpecializedIn(x,y))", "-exists x.(ChoralConductor(x) & SpecializesInRenaissance(x))", "-exists x.(CoralConductor(x) & SpecializedInPerformanceOfRenaissance(x))", "-exists x.(ChoralConductor(x) & SpecializesInPerformanceOfRenaissance(x))", "-exists x.(ChoralConductor(x) & SpecializedIn(x,renaissance))"]}
{"id": "folio_train_16", "nl": "All eels are fish. ", "fol": "all x.(IsEel(x) -> IsFish(x))", "prediction": ["all x.(Elef(x) -> Fish(x))", "all x.(Eel(x) -> Fish(x))", "all x.(Elm(x) -> Fish(x))", "all x.(Elk(x) -> Fish(x))", "all x.(Eal(x) -> Fish(x))", "all x y.((Elef(x) & Fish(y)) -> Fish(x))", "all x.(Eagle(x) -> Fish(x))", "all x.(Elef(x) -> Fish(x))", "all x.(Elephant(x) -> Fish(x))", "all x.(Eel(x) -> Fish(x))", "all x.(Elem(x) -> Fish(x))", "all x.(Eale(x) -> Fish(x))", "all x y.((Elef(x) & Fish(y)) -> Fish(x,y))", "all x.(Elf(x) -> Fish(x))", "all x y.((Elef(x) & Fish(y)) -> Is(x,y))", "all x.(Eels(x) -> Fish(x))"]}
{"id": "folio_train_17", "nl": "No fish are plants. ", "fol": "all x.(IsFish(x) -> -IsPlant(x))", "prediction": ["-exists x.(Fish(x) & Plant(x))", "all x.(Fish(x) -> -Plant(x))", "all x y.((Fish(x) & Plant(y)) -> -exists z.(Fish(z) & Plant(z) & -exists w.(Fish(w) & Plant(w) & -exists w.(Fish(w) & Plant(w) & -exists w.(Fish(w) & Plant(w)))))", "all x y.((Fish(x) & Plant(y)) -> -exists z.(Fish(z) & Plant(z) & -exists w.(Fish(w) & Plant(w) & -exists w.(Fish(w) & Plant(w)) & -exists w.(Fish(w) & Plant(w)))))", "all x y.((Fish(x) & Plant(y)) -> -exists z.(Fish(z) & Plant(z)) & -exists w.(Fish(w) & Plant(w) & -exists w.(Fish(w) & Plant(w) & -exists w.(Fish(w) & Plant(w)))))", "all x y.((Fish(x) & Plant(y)) -> -exists z.(Fish(z) & Plant(z) & -exists w.(Fish(w) & Plant(w) & -exists w.(Fish(w) & Plant(w)))))", "all x y.((Fish(x) & Plant(y)) -> -exists z.(Fish(z) & Plant(z) & -exists w.(Fish(w) & Plant(w)) & -exists w.(Fish(w) & Plant(w) & -exists w.(Fish(w) & Plant(w)))))", "all x y.((Fish(x) & Plant(y)) -> -exists z.(Fish(z) & Plant(z) & -exists w.(Fish(w) & Plant(w) & -exists w.(Fish(w) & Plant(w) & -exists w.(Fish(w) & Plant(w) & -exists w.(Fish(x,w)))))", "all x y.((Fish(x) & Plant(y)) -> -exists z.(Fish(z) & Plant(z) & -exists w.(Fish(w) & Plant(w) & -exists w.(Fish(w) & Plant(w)) & -exists w.(Fish(w) & Plant(w))))", "all x y.((Fish(x) & Plant(y)) -> -exists z.(Fish(z) & Plant(z) & -exists w.(Fish(w) & Plant(w) & -exists w.(Fish(w) & Plant(w) & -exists w.(Fish(w) & Plant(w) & Plant(w))))", "all x y.((Fish(x) & Plant(y)) -> -exists z.(Fish(z) & Plant(z) & -exists w.(Fish(w) & Plant(w) & -exists w.(Fish(w) & -exists w.(Fish(w) & Plant(w)))))", "all x y.((Fish(x) & Plant(y)) -> -exists z.(Fish(z) & Plant(z) & -exists w.(Fish(w) & Plant(w) & -exists w.(Fish(w) & Plant(w) & -exists w.(Fish(w) & Plant(w)) & -exists w.(Fish(w))))", "all x y.((Fish(x) & Plant(y)) -> -exists z.(Fish(z) & Plant(z) & -exists w.(Fish(w) & Plant(w) & -exists w.(Fish(w) & Plant(w) & -exists w.(Fish(w) & Plant(w) & -exists w.(Fish(w)))))", "all x y.((Fish(x) & Plant(y)) -> -exists z.(Fish(z) & Plant(z) & -exists w.(Fish(w) & Plant(w) & -exists w.(Fish(w) & Plant(w)) & -exists w.(Fish(w) & Plant(w) & Plant(w))))", "all x y.((Fish(x) & Plant(y)) -> -exists z.(Fish(z) & Plant(z) & -exists w.(Fish(w) & Plant(w) & -exists w.(Fish(w) & Plant(w) & -exists w.(Fish(w) & Plant(w)) & -exists w.(Fish(w) & Plant(w))))", "all x y.((Fish(x) & Plant(y)) -> -exists z.(Fish(z) & Plant(z) & -exists w.(Fish(w) & Plant(w) & -exists w.(Fish(w) & Plant(w) & -exists w.(Fish(w) & Plant(w)) & -exists w.(Fish(z) & Plant(w))))"]}
{"id": "folio_train_18", "nl": "A thing is either a plant or animal.", "fol": "all x.(IsPlant(x) | IsAnimal(x))", "prediction": ["all x.(Thing(x) -> (Plant(x) | Animal(x)))", "all x.(Ding(x) -> (Plant(x) | Animal(x)))", "exists x.(Thing(x) & (Plant(x) | Animal(x)))", "all x.(Tea(x) -> (Plant(x) | Animal(x)))", "all x.(Tree(x) -> (Plant(x) | Animal(x)))", "all x.(Dog(x) -> (Plant(x) | Animal(x)))", "all x.(Tad(x) -> (Plant(x) | Animal(x)))", "all x.(Thing(x) -> (Plant(x) | Animal(x)))", "exists x.(Ding(x) & (Plant(x) | Animal(x)))", "all x.(Tax(x) -> (Plant(x) | Animal(x)))", "all x.((Thing(x) & (Plant(x) | Animal(x))) -> Animal(x))", "all x.((Thing(x) & (Plant(x) | Animal(x))) -> Plant(x))", "all x.(Word(x) -> (Plant(x) | Animal(x)))", "all x.(What(x) -> (Plant(x) | Animal(x)))", "all x.((Thing(x) & Plant(x)) | Animal(x))", "all x.(Matter(x) -> (Plant(x) | Animal(x)))"]}
{"id": "folio_train_19", "nl": "Nothing that breathes is paper. ", "fol": "all x.(CanBreathe(x) -> -IsPaper(x))", "prediction": ["all x.((Breathes(x) & -Breathes(x)) -> Paper(x))", "all x.(Breathes(x) -> Paper(x))", "all x.((Breathes(x) & -Bubbles(x)) -> Paper(x))", "all x.((Breathes(x) & -IsPaper(x)) -> -IsPaper(x))", "-exists x.(Breathes(x) & Paper(x))", "all x.((Breathes(x) & Breathes(x)) -> Paper(x))", "-all x.((Breathes(x) & Breathes(x)) -> Paper(x))", "-all x.((Breathes(x) & -Breathes(x)) -> Paper(x))", "-exists x.((Breathes(x) & -Breathes(x)) -> Paper(x))", "all x.((Breathes(x) & -Brothers(x)) -> Paper(x))", "all x.((Breathes(x) & -Paint(x)) -> Paper(x))", "all x.((Breathes(x) & -Paper(x)) -> -Breathes(x))", "all x.((Breathes(x) & -BreathesIn(x)) -> Paper(x))", "-all x.(Breathes(x) -> Paper(x))", "all x.((Breathes(x) & Paper(x)) -> -Breathes(x))", "all x.((Breathes(x) & -Paper(x)) -> -Paper(x))"]}
{"id": "folio_train_20", "nl": "All animals breathe.", "fol": "all x.(IsAnimal(x) -> CanBreathe(x))", "prediction": ["all x.(Animal(x) -> Breathes(x))", "all x.(Animal(x) -> Breathe(x))", "all x y.((Animal(x) & Breathes(x)) -> Breathes(x))", "all x y.((Animal(x) & Breathes(x)) -> Breathes(y))", "all x y.((Animal(x) & Breathe(y)) -> Breathe(x,y))", "all x y.((Animal(x) & Breathes(x,y)) -> Breathes(x,y))", "all x y.((Animal(x) & Breathes(y)) -> Breathes(x,y))", "all x y.((Animal(x) & Breathe(y)) -> Breathes(x,y))", "all x y.((Animal(x) & Breathes(x)) -> Breathes(x,y))", "all x y.((Animal(x) & Animal(y)) -> Breathes(x,y))", "all x.((Animal(x) & Breathes(x)) -> Breathes(x))", "(all x.(Animal(x) -> Breathes(x)))", "all x y.((Animal(x) & Breathes(x,y)) -> Breathes(x))", "all x y.((Animal(x) & Breathes(y)) -> Breathes(x))", "all x y.((Animal(x) & Breathes(x,y)) -> Breathes(y))", "all x y.((Animal(x) & Breathe(y)) -> Breathe(x))"]}
{"id": "folio_train_21", "nl": "If a sea eel is either an eel or a plant, then a sea eel is an eel or an animal.", "fol": "((((IsEel(SeaEel) & -IsPlant(SeaEel)) | (-IsEel(SeaEel) & IsPlant(SeaEel))) -> IsEel(SeaEel)) | IsAnimal(SeaEel))", "prediction": ["all x.((SeaEel(x) & (Eel(x) | Plant(x))) -> (Eel(x) | Animal(x)))", "all x.((SeaEel(x) & (IsEel(x) | IsPlant(x))) -> (IsEel(x) | IsAnimal(x)))", "all x.(SeaEel(x) -> ((Eel(x) | Plant(x)) & (Eel(x) | Animal(x))))", "all x.((SeaEel(x) & (Eel(x) | Plant(x))) -> (Eel(x) | Animal(x))))", "all x.((SeaEel(x) & (Eel(x) | Plant(x))) -> (IsEel(x) | IsAnimal(x)))", "all x.((SeaEel(x) & (Eel(x) | Plant(x))) -> ((Eel(x) | Animal(x))))", "all x y.((SeaEel(x) & (Eel(y) | Plant(y))) -> (Eel(x) | Animal(x)))", "all x.((SeedEel(x) & (Eel(x) | Plant(x))) -> (Eel(x) | Animal(x)))", "all x.((SeaEel(x) & IsEel(x) | IsPlant(x)) -> (IsEel(x) | IsAnimal(x)))", "all x.(SeaEel(x) -> ((Eel(x) | Plant(x))) | Animal(x)))", "all x.((SeaEel(x) & Eel(x)) | Plant(x)) -> (Eel(x) | Animal(x)))", "all x y.((SeaEel(x) & (Eel(x) | Plant(x))) -> (Eel(x) | Animal(x)))", "all x.((SeaEel(x) & (Eel(x) | Plant(x))) -> (Animal(x) | Eel(x)))", "all x.((SeaEel(x) & Eel(x) | Plant(x)) -> (Eel(x) | Animal(x)))", "all x.((Eel(x) | Plant(x)) -> (Eel(x) | Animal(x)))", "all x.(SeaEel(x) -> ((Eel(x) | Plant(x))) | (Animal(x) & Eel(x))))"]}
{"id": "folio_train_22", "nl": "Sea eel is an eel.", "fol": "IsEel(SeaEel)", "prediction": ["all x.(SeaEel(x) -> Eel(x))", "all x y.((SeaEel(x) & Eel(y)) -> Is(x,y))", "All x.(SeaEel(x) -> Eel(x))", "all x.(SeaEel(x) -> IsEel(x))", "all x.(SeaEel(x) -> Eel(x))", "all x.(Eel(x) -> SeaEel(x))", "all x.(SeeEel(x) -> Eel(x))", "all x y.((SeaEel(x) & Eel(y)) -> SeaEel(x))", "all x y.((SeaEel(x) & Eel(y)) -> (Eel(x) & Eel(y)))", "all x y.((SeaEel(x) & Eel(y)) -> Eel(x))", "all x.((SeaEel(x) & Eel(x)) -> SeaEel(x))", "all x y.((SeaEel(x) & Eel(y)) -> (Eel(x) & -Eel(y)))", "all x y.((SeaEel(x) & Eel(y)) -> (Eel(x) & Eel(x)))", "all x y.((SeaEel(x) & Eel(y)) -> (Eel(x) & SeaEel(x)))", "all x y.((SeaEel(x) & Eel(y)) -> -Eel(x))", "all x y.((SeaEel(x) & Eel(y)) -> (Eel(x) & LivesIn(x,y)))"]}
{"id": "folio_train_23", "nl": "Sea eel is a paper.", "fol": "IsPaper(SeaEel)", "prediction": ["all x.(SeaEel(x) -> Paper(x))", "all x.(SeaEel(x) -> Paper(x))", "all x y.((SeaEel(x) & Paper(y)) -> Is(x,y))", "all x.(SeeEel(x) -> Paper(x))", "all x y.((SeaEel(x) & Paper(y)) -> SeaEel(x))", "all x.((SeaEel(x) & Paper(x)) -> SeaEel(x))", "all x y.((SeaEel(x) & Paper(y)) -> Paper(x))", "all x y.((SeaEel(x) & Paper(y)) -> Contains(x,y))", "all x y.((SeaEel(x) & Paper(y)) -> Has(x,y))", "all x y.((SeaEel(x) & Paper(y)) -> Produces(x,y))", "All x.(SeaEel(x) -> Paper(x))", "all x y.((SeaEel(x) & Paper(y)) -> UsedFor(x,y))", "all x.((SeaEel(x) & Paper(x)) -> Paper(x))", "exists x.(SeaEel(x) & Paper(x))", "all x.(Eel(x) -> Paper(x))", "all x y.((SeaEel(x) & Paper(y)) -> SeaEel(x,y))"]}
{"id": "folio_train_24", "nl": "Sea eel breathes or is a paper.", "fol": "(CanBreathe(SeaEel) | IsPaper(SeaEel))", "prediction": ["all x.(SeaEel(x) -> (Breathes(x) | Paper(x)))", "all x.(SeaEel(x) -> (Breathes(x) | IsPaper(x)))", "all x.(SeaEel(x) -> (Breaths(x) | Paper(x)))", "all x.(SeaEel(x) -> (Breathes(x) | Paper(x)))", "all x y.((SeaEel(x) & (Breathes(x) | Paper(x))) -> Breathes(x))", "all x y.((SeaEel(x) & Paper(y)) -> BreathesOrIs(x,y))", "all x.(SeeEel(x) -> (Breathes(x) | Paper(x)))", "all x.(SeaEel(x) -> (Bubbles(x) | Paper(x)))", "all x y.((SeaEel(x) & (Breathes(x,y) | Paper(x))) -> Breathes(x,y))", "all x.(SeaEel(x) -> (Breathes(x) | isPaper(x)))", "all x y.((SeaEel(x) & (Breathes(x,y) | Paper(y))) -> Breathes(x,y))", "all x.(SeaEel(x) -> (Breathes(x) | IsPaper(x)))", "all x.(SeaEel(x) -> (Breathes(x) | Paper(x)))", "all x y.((SeaEel(x) & (Breathes(x,y) | Paper(x))) -> Breathes(x))", "all x y.((SeaEel(x) & (Breathes(x,y) | Paper(x,y))) -> Breathes(x,y))", "all x y.((SeaEel(x) & (Breathes(x) | Paper(y))) -> Breathes(x))"]}
{"id": "folio_train_25", "nl": "The Blake McFall Company Building is a commercial warehouse listed on the National Register of Historic Places.", "fol": "all x.(BlakeMcFallCompanyBuilding(x) -> IsBuilding(x))", "prediction": ["all x.((BlakeMcFallCompanyBuilding(x) & CommercialWarehouse(x)) -> ListedOnNationalRegisterOfHistoricalPlaces(x))", "all x.(BlakeMcFallCompanyBuilding(x) -> (CommercialWarehouse(x) & ListedOnNationalRegisterOfHistoricalPlaces(x)))", "all x y.((BlakeMcFallCompanyBuilding(x) & CommercialWarehouse(y)) -> ListedOnNationalRegisterOfHistoricalPlaces(x,y))", "all x.((BlakeMcFallCompanyBuilding(x) & CommercialWarehouse(x) & ListedOnNationalRegisterOfHistoricalPlaces(x)) -> Building(x))", "all x.((BlakeMcFallCompanyBuilding(x) & CommercialWarehouse(x)) -> ListedOnNationalRegistryOfHistoricalPlaces(x))", "all x.((BlakeMcFallCompanyBuilding(x) & CommercialWarehouse(x) & ListedOnNationalRegisterOfHistoricalPlaces(x)) -> BuiltByBlakeMcFallCompanyBuilding(x))", "all x.((Building(x) & BlakeMcFallCompany(x)) -> CommercialWarehouseListedOnNationalRegisterOfHistoricalPlaces(x))", "all x.(BlakeMcFallCompanyBuilding(x) -> (CommercialWarehouse(x) & ListedOnNationalRegistryOfHistoricalPlaces(x)))", "all x.((BlakeMcFallCompanyBuilding(x) & CommercialWarehouse(x) & ListedOnNationalRegisterOfHistoricalPlaces(x)) -> BuiltByBlakeMcFallCompany(x))", "all x.((BlakeMcFallCompanyBuilding(x) & CommercialWarehouse(x) & ListedOnNationalRegisterOfHistoricalPlaces(x)) -> BlakeMcFallCompanyBuilding(x))", "all x.((BlakeMcFallCompanyBuilding(x) & CommercialWarehouse(x) & ListedOnNationalRegistryOfHistoricalPlaces(x)) -> BuiltByBlakeMcFallCompanyBuilding(x))", "all x y.((BlakeMcFallCompanyBuilding(x) & CommercialWarehouse(y)) -> ListedOnNationalRegistryOfHistoricalPlaces(x,y))", "all x.((BlakeMcFallCompanyBuilding(x) & CommercialWarehouse(x) & ListedOnNationalRegistryOfHistoricalPlaces(x)) -> Building(x))", "all x.(Building(x) -> (BlakeMcFallCompanyBuilding(x) & CommercialWarehouse(x) & ListedOnNationalRegisterOfHistoricalPlaces(x)))", "all x.((BlakeMcFallCompanyBuilding(x) & CommercialWarehouse(x) & ListedOnNationalRegistryOfHistoricalPlaces(x)) -> BuiltByBlakeMcFallCompany(x))", "all x y.((BlakeMcFallCompanyBuilding(x) & CommercialWarehouse(y)) -> ListedOnNationalRegisterOfHistoricalPlaces(x))"]}
{"id": "folio_train_26", "nl": "The Blake McFall Company Building was added to the National Register of Historic Places in 1990.", "fol": "all x.(BlakeMcFallCompanyBuilding(x) -> ListedAsHistoric(x,Year1990))", "prediction": ["all x.((Building(x) & BlakeMcFallCompany(x)) -> AddedToNationalRegisterOfHistoricalPlaces(x,90))", "all x.((Building(x) & BlakeMcFallCompany(x)) -> NationalRegisterOfHistoricalPlaces(x))", "(AddedToNationalRegisterOfHistoricalPlaces(BlakeMcFallCompanyBuilding) & In(BlakeMcFallCompany(BlakeMcFall) & In(BlakeMcFallCompany(BlakeMcFall) & In(BlakeMcFallCompany(BlakeMcFall))", "The BlakeMcFallCompanyBuilding(BlakeMcFall) was added to NationalRegisterOfHistoricalPlaces(BlakeMcFall) in 1990.", "(AddedToNationalRegisterOfHistoricalPlaces(BlakeMcFallCompanyBuilding) & In(BlakeMcFallCompany(BlakeMcFall) & In(BlakeMcFallCompany(BlakeMcFall) & In(BlakeMcFallCompany(BlakeMcFall) & In(BlakeMcFallCompany(BlakeMcFall)))", "The BlakeMcFallCompanyBuilding(BlakeMcFall) was added to NationalRegistryOfHistoricalPlaces(BlakeMcFall) in 1990.", "all x y.((BlakeMcFallCompanyBuilding(x) & NationalRegisterOfHistoricalPlaces(y)) -> AddedTo(x,y))", "all x.((Building(x) & BlakeMcFallCompany(x)) -> AddedToNationalRegisterOfHistoricalPlaces(x))", "(AddedToNationalRegisterOfHistoricalPlaces(BlakeMcFallCompanyBuilding) & In(BlakeMcFallCompany(BlakeMcFallCompany) & In(BlakeMcFallCompany(BlakeMcFallCompany) & In(BlakeMcFallCompany(BlakeMcFallCompany))", "(AddedToNationalRegisterOfHistoricalPlaces(BlakeMcFallCompanyBuilding) & In(BlakeMcFallCompany(BlakeMcFall) & In(BlakeMcFallCompany(BlakeMcFall))", "(AddedToNationalRegisterOfHistoricalPlaces(BlakeMcFallCompanyBuilding) & In(BlakeMcFallCompany(BlakeMcFallCompany) & In(BlakeMcFallCompany(BlakeMcFallCompany) & In(BlakeMcFallCompany(BlakeMcFallCompany) & In(BlakeMcFallCompany))", "all x.((Building(x) & BlakeMcFallCompany(x)) -> AddedToNationalRegisterOfHistoricalPlaces(x))", "(AddedToNationalRegisterOfHistoricalPlaces(BlakeMcFallCompanyBuilding) & In(BlakeMcFallCompany(BlakeMcFallCompany) & In(BlakeMcFallCompany(BlakeMcFallCompany) & In(BlakeMcFallCompany) & In(BlakeMcFallCompany(BlakeMcFallCompany))", "(AddedToNationalRegisterOfHistoricalPlaces(BlakeMcFallCompanyBuilding) & In(BlakeMcFallCompany(BlakeMcFall) & In(BlakeMcFallCompany(BlakeMcFall) & In(BlakeMcFallCompany(BlakeMcFall)))", "(AddedToNationalRegisterOfHistoricalPlaces(BlakeMcFallCompanyBuilding) & In(BlakeMcFallCompany(BlakeMcFallCompany(BlakeMcFall) & In(BlakeMcFallCompany(BlakeMcFall) & In(BlakeMcFallCompany(BlakeMcFall)))", "(AddedToNationalRegisterOfHistoricalPlaces(BlakeMcFallCompanyBuilding) & In(BlakeMcFallCompany(BlakeMcFallCompany) & In(BlakeMcFallCompany(BlakeMcFallCompany) & In(BlakeMcFallCompany) & In(BlakeMcFallCompany) & In(BlakeMcFallCompany))"]}
{"id": "folio_train_27", "nl": "The Emmet Building is a five-story building in Portland, Oregon.", "fol": "all x.((EmmetBuilding(x) -> IsBuilding(x)) & IsFiveStory(x) & LocatedIn(x,Portland))", "prediction": ["all x.(EmmetBuilding(x) -> (Building(x) & FiveStory(x) & InPortland(x) & InOregon(x)))", "all x.(EmmetBuilding(x) -> (FiveStoryBuilding(x) & InPortland(x) & InOregon(x)))", "all x y.((EmmetBuilding(x) & Portland(y)) -> FiveStoryBuilding(x,y))", "all x.(EmmetBuilding(x) -> (Building(x) & FiveStory(x) & InPortland(x)))", "all x.(EmmetBuilding(x) -> (Building(x) & FiveStoryBuilding(x) & InPortland(x) & InOregon(x)))", "All x.(EmmetBuilding(x) -> (Building(x) & FiveStory(x) & InPortland(x) & InOregon(x)))", "all x.(EmmetBuilding(x) -> (Building(x) & FiveStory(x) & InPortland(x) & InOregon(x)))", "all x.(EmmetBuilding(x) -> (Building(x) & FiveStory(x) & InPortland(x) & Oregon(x)))", "all x.(EmmetBuilding(x) -> (Building(x) & FiveStory(x) & InPortland(x) & InOregon(x)))", "all x.(EmmetBuilding(x) -> (HasFiveStoryBuilding(x) & InPortland(x) & InOregon(x)))", "All x.(EmmetBuilding(x) -> (FiveStoryBuilding(x) & InPortland(x) & InOregon(x)))", "all x.(EmmetBuilding(x) -> (FiveStoryBuilding(x) & InPortland(x) & InOregon(x)))", "all x.(EmmetBuilding(x) -> (Building(x) & FiveStory(x) & Portland(x) & Oregon(x)))", "all x y z.((EmmetBuilding(x) & Portland(y) & Oregon(z)) -> FiveStoryBuilding(x,y,z))", "all x.(EmmetBuilding(x) -> (Building(x) & FiveStory(x) & Portland(x)))", "all x.(EmmetBuilding(x) -> (Building(x) & FiveStory(x) & In(x,Portland) & In(x,Oregon)))"]}
{"id": "folio_train_28", "nl": "The Emmet Building was built in 1915.", "fol": "all x.(EmmetBuilding(x) -> BuiltInYear(x,Year1915))", "prediction": ["All x.(EmmetBuilding(x) -> BuiltIn1915(x))", "all x.(EmmetBuilding(x) -> BuiltIn1915(x))", "(BurnedIn1915(EmmetBuilding) & BuiltIn1915(EmmetBuilding))", "The EmmetBuilding was built in 1915.", "Das EmmetBuilding(e) & BuiltIn1915(e))", "(Building(Emmet) & BuiltIn1915(Emmet))", "Das EmmetBuilding(EmmetBuilding) & BuiltIn1915(EmmetBuilding))", "The Emmet Building was built in 1915.", "All x.(EmmetBuilding(x) -> BuiltIn(x,1915))", "All x.(EmmetBuilding(x) -> BuiltIn1915(x))", "all x.(EmmetBuilding(x) -> BuiltIn1915(x))", "The EmmetBuilding was builtin1915.", "Der EmmetBuilding(e) & BuiltIn1915(e))", "Das EmmetBuilding(e) & BuiltIn1915(e) & BuiltIn1915(e))", "(Building(Emmet) & BuiltIn1915(EmmetBuilding))", "Der EmmetBuilding(e) & BuiltIn1915(e) & BuiltIn1915(e))"]}
{"id": "folio_train_29", "nl": "The Emmet Building is another name for the Blake McFall Company Building.", "fol": "all x.(EmmetBuilding(x) <-> BlakeMcFallCompanyBuilding(x))", "prediction": ["All x.(EmmetBuilding(x) -> BlakeMcFallCompanyBuilding(x))", "all x.(EmmetBuilding(x) -> BlakeMcFallCompanyBuilding(x))", "(BlakeMcFallBuilding(EmmetBuilding) & BlakeMcFallBuilding(EmmetBuilding))", "(BlakeMcFallCompanyBuilding(EmmetBuilding) & BlakeMcFallBuilding(EmmetBuilding))", "all x y.((EmmetBuilding(x) & BlakeMcFallCompanyBuilding(y)) -> NameFor(x,y))", "(exists x.(EmmetBuilding(x) & BlakeMcFallCompanyBuilding(x)))", "All x.(EmmetBuilding(x) -> BlakeMcFallBuilding(x))", "all x y.((EmmetBuilding(x) & BlakeMcFallCompanyBuilding(y)) -> BuildingName(x,y))", "(AnotherNameForBlakeMcFallCompanyBuilding(EmmetBuilding) & BlakeMcFallBuilding(EmmetBuilding))", "all x.(EmmetBuilding(x) -> BlakeMcFallCompanyBuilding(x))", "all x.(EmmetBuilding(x) -> BlakeMcFallBuilding(x))", "all x y.((EmmetBuilding(x) & BlakeMcFallCompanyBuilding(y)) -> AnotherNameFor(x,y))", "all x y.((EmmetBuilding(x) & BlakeMcFallCompanyBuilding(y)) -> BuiltBy(x,y))", "all x y.((EmmetBuilding(x) & BlakeMcFallCompanyBuilding(y)) -> Building(x,y))", "The EmmetBuilding is another name for the BlakeMcFallCompanyBuilding(EmmetBuilding)", "(BlakeMcFallCompanyBuilding(EmmetBuilding) & BlakeMcFallCompanyBuilding(EmmetBuilding))"]}
{"id": "folio_train_30", "nl": "John works at the Emmet Building.", "fol": "exists x.(EmmetBuilding(x) & WorksAt(John,x))", "prediction": ["all x y.((John(x) & EmmetBuilding(y)) -> WorksAt(x,y))", "all x.(John(x) -> WorksAtEmmetBuilding(x))", "(WorksAtEmmetBuilding(John))", "John works at EmmetBuilding.", "(WorksAtEmmetBuilding(John) & EmmetBuilding(John))", "All x.(John(x) -> WorksAtEmmetBuilding(x))", "(WorksAtEmmetBuilding(John) & -WorksAtEmmetBuilding(John))", "all x y.((John(x) & EmmetBuilding(y)) -> Works(x,y))", "(WorksAtEmmetBuilding(John) | WorksAtEmmetBuilding(John)))", "(WorksAtEmmetBuilding(John) & WorksAtEmmetBuilding(John))", "John works at the EmmetBuilding.", "exists x.(John(x) & WorksAtEmmetBuilding(x))", "(WorksAtEmmetBuilding(John) -> WorksAtBuilding(John))", "(WorksAtEmmetBuilding(John) -> WorksAtEmmetBuilding(John))", "all x y.((John(x) & EmmetBuilding(y)) -> WorksIn(x,y))", "(WorksAtEmmetBuilding(John,EmmetBuilding))"]}
{"id": "folio_train_31", "nl": "A five-story building is built in 1915.", "fol": "exists x.(IsFiveStory(x) & BuiltInYear(x,Year1915))", "prediction": ["all x.((Building(x) & BuiltIn1915(x)) -> FiveStory(x))", "all x.((Building(x) & BuiltIn1915(x)) -> FiveStoryBuilding(x))", "all x.((Building(x) & FiveStory(x)) -> BuiltIn1915(x))", "all x y.((Building(x) & Building(y) & BuiltIn1915(x,y)) -> FiveStory(x))", "all x y.((Building(x) & Building(y) & BuiltIn1915(x,y)) -> FiveStoryBuilding(x))", "all x y.((Building(x) & Building(y) & BuiltIn1915(x)) -> FiveStory(x))", "all x.(FiveStoryBuilding(x) -> BuiltIn1915(x))", "all x y.((Building(x) & Building(y) & BuiltIn(x,y)) -> BuiltIn(x,y))", "all x y.((Building(x) & Building(y) & BuiltIn1915(x)) -> FiveStory(x,y))", "all x y.((Building(x) & Building(y) & BuiltIn(x,1915)) -> FiveStory(x))", "all x y.((Building(x) & Building(y) & BuiltIn1915(x)) -> FiveStoryBuilding(x,y))", "all x y.((Building(x) & Building(y) & BuiltIn1915(x,y)) -> FiveStoryBuilding(x,y))", "all x.((Building(x) & BuiltIn(x,1915)) -> FiveStory(x))", "all x y.((Building(x) & Building(y)) -> BuiltIn1915(x,y))", "all x y.((Building(x) & Building(y) & BuiltIn1915(x,y)) -> FiveStory(x,y))", "all x y.((Building(x) & Building(y) & BuiltIn1915(x)) -> FiveStoryBuilding(x))"]}
{"id": "folio_train_32", "nl": "The Blake McFall Company Building is located in Portland, Oregon.", "fol": "all x.(BlakeMcFallCompanyBuilding(x) -> LocatedIn(x,Portland))", "prediction": ["All x.(BlakeMcFallCompanyBuilding(x) -> LocatedInPortland(x))", "All x.(BlakeMcFallCompanyBuilding(x) -> (LocatedInPortland(x) | LocatedInOregon(x)))", "The BlakeMcFallCompanyBuilding(BlakeMcFall) is located in Portland, Oregon.", "All x.(BlakeMcFallCompanyBuilding(x) -> (LocatedInPortland(x) | LocatedInOregon(x)))", "(Building(BlakeMcFall) & LocatedInPortland(BlakeMcFall))", "all x.(BlakeMcFallCompanyBuilding(x) -> LocatedInPortland(x))", "all x.(BlakeMcFallCompanyBuilding(x) -> (LocatedInPortland(x) | LocatedInOregon(x)))", "All x.(BlakeMcFallCompanyBuilding(x) -> (LocatedInPortland(x) | LocatedInPortland(x)))", "all x.(BlakeMcFallCompanyBuilding(x) -> (LocatedInPortland(x) | LocatedInOregon(x)))", "All x.(BlakeMcFallCompanyBuilding(x) -> LocatedIn(x,Portland,Oregon))", "All x.(BlakeMcFallCompanyBuilding(x) -> (LocatedInPortland(x) & LocatedInOregon(x)))", "All x.(BlakeMcFallCompanyBuilding(x) -> (LocatedInPortland(x) & LocatedInOregon(x)))", "All x.(BlakeMcFallCompanyBuilding(x) -> LocatedIn(x,Portland,Oregon))", "all x.(BlakeMcFallCompanyBuilding(x) -> (LocatedInPortland(x) & LocatedInOregon(x)))", "all x.(BlakeMcFallCompanyBuilding(x) -> (LocatedInPortland(x) | LocatedInPortland(x)))", "all x.(BlakeMcFallCompanyBuilding(x) -> (LocatedInPortland(x) & LocatedInOregon(x)))"]}
{"id": "folio_train_33", "nl": "John started his current job in 1990.", "fol": "exists y.(Job(y) & Start(John,y,Year1990))", "prediction": ["John started his current job in 1990.", "(StartedJob(John,90) & CurrentJob(John,90))", "(StartedJob(John,1990) & CurrentJob(John,1990))", "(StartedJob(John,90) -> CurrentJob(John,90))", "(StartedJobIn90(John) & CurrentJob(John))", "(StartedJob(John,1990) & CurrentJob(John,90))", "(StartedJob(John,1990) -> CurrentJob(John,1990))", "(StartedJobIn90(John) -> CurrentJob(John))", "(StartedJob(John) & CurrentJob(John) & 1990(John))", "(StartedJobIn90(John) & CurrentJobIn90(John))", "(StartedJob(John,1990) -> CurrentJob(John,90))", "(StartedJob(John,90) & CurrentlyWorking(John,90))", "(StartedJob(John,90) & CurrentlyJob(John,90))", "(StartedJob(John,1990) & CurrentJob(John))", "(StartedJob(John,1990) & CurrentJob(John,1996))", "(StartedJobIn90(John) -> CurrentJob(John)))"]}
{"id": "folio_train_34", "nl": "William Dickinson was a British politician who sat in the House of Commons", "fol": "(IsBritishPolitician(Williamdickinson) & SitsInHouseOfCommons(Williamdickinson))", "prediction": ["(BritishPolitician(WilliamDickinson) & SitsInHouseOfCommons(WilliamDickinson))", "all x.((BritishPolitician(x) & WilliamDickinson(x)) -> SitsInHouseOfCommons(x))", "all x y.((BritishPolitician(x) & WilliamDickinson(y)) -> SitsInHouseOfCommons(x,y))", "William Dickinson (BritishPolitician(William Dickinson) & SitsInHouseOfCommons(William Dickinson))", "all x.(WilliamDickinson(x) -> (BritishPolitician(x) & SitsInHouseOfCommons(x)))", "William Dickinson (BritishPolitician(WilliamDickinson) & SitsInHouseOfCommons(WilliamDickinson))", "(BritishPolitician(WilliamDickinson) & SitsInHouseOfCommons(WilliamDickinson,HouseOfCommons))", "all x y z.((BritishPolitician(x) & WilliamDickinson(y) & HouseOfCommons(z)) -> SitsIn(x,y,z))", "William Dickinson (BritishPolitician(WilliamDickinson) & SitsInHouseOfCommons(William Dickinson))", "William Dickinson (BritishPolitician) & SitsInHouseOfCommons(WilliamDickinson))", "all x.((BritishPolitician(x) & WilliamDickinson(x)) -> SittingInHouseOfCommons(x))", "all x y.((BritishPolitician(x) & WilliamDickinson(y)) -> SitsInHouseOfCommons(y,x))", "all x y z.((BritishPolitician(x) & WilliamDickinson(y) & HouseOfCommons(z)) -> SitsIn(y,z))", "William Dickinson (BritishPolitician) & SitsInHouseOfCommons(WilliamDickinson,HouseOfCommons))", "William Dickinson (BritishPolitician(William Dickinson) & SitsInHouseOfCommons(William Dickinson,HouseOfCommons))", "all x y z.((BritishPolitician(x) & WilliamDickinson(y) & HouseOfCommons(z)) -> SittingIn(x,y,z))"]}
{"id": "folio_train_35", "nl": "William Dickinson attended Westminster school for high school and then the University of Edinburgh.", "fol": "(AttendedSchool(Williamdickinson,Westminster) & IsHighSchool(Westminster) & AttendedSchool(Williamdickinson,Universityofedinburgh))", "prediction": ["all x y.((WilliamDickinson(x) & WestminsterSchool(y)) -> (Attended(x,y) & HighSchool(y) & UniversityOfEdinburgh(y)))", "all x y.((WilliamDickinson(x) & WestminsterSchool(y)) -> (Attended(x,y) & HighSchool(y) & UniversityOfEdinburgh(x)))", "all x y.((WilliamDickinson(x) & WestminsterSchool(y)) -> (Attended(x,y) & HighSchool(y) & UniversityOfEdinburgh(z)))", "all x.((WilliamDickinson(x) & WestminsterSchool(x)) -> (AttendedHighSchool(x) & AttendedUniversityOfEdinburgh(x)))", "all x y z.((WilliamDickinson(x) & WestminsterSchool(y) & UniversityOfEdinburgh(z)) -> (Attended(x,y) & HighSchool(y) & UniversityOfEdinburgh(z)))", "all x y z.((WilliamDickinson(x) & WestminsterSchool(y) & UniversityOfEdinburgh(z)) -> (AttendedForHighSchool(x,y) & AttendedForHighSchool(x,z)))", "all x y z.((WilliamDickinson(x) & WestminsterSchool(y) & UniversityOfEdinburgh(z)) -> (Attended(x,y) & Attended(x,z)))", "all x y z.((WilliamDickinson(x) & WestminsterSchool(y) & UniversityOfEdinburgh(z)) -> (AttendedForHighSchool(x,y) & AttendedForUniversityOfEdinburgh(x,z)))", "all x y.((WilliamDickinson(x) & WestminsterSchool(y)) -> (AttendedForHighSchool(x,y) & AttendedForUniversityOfEdinburgh(x,y)))", "all x y z.((WilliamDickinson(x) & WestminsterSchool(y) & UniversityOfEdinburgh(z)) -> (Attended(x,y) & HighSchool(y) & Attended(x,z)))", "all x y z.((WilliamDickinson(x) & WestminsterSchool(y) & UniversityOfEdinburgh(z)) -> (Attended(x,y) & HighSchool(y)))", "all x y.((WilliamDickinson(x) & WestminsterSchool(y)) -> (Attended(x,y) & HighSchool(x) & UniversityOfEdinburgh(x)))", "all x y z.((WilliamDickinson(x) & WestminsterSchool(y) & UniversityOfEdinburgh(z)) -> (AttendedForHighSchool(x,y) & AttendedForHighSchool(x,z)))", "all x y.((WilliamDickinson(x) & WestminsterSchool(y)) -> (Attended(x,y) & HighSchool(z) & UniversityOfEdinburgh(x)))", "all x y.((WilliamDickinson(x) & WestminsterSchool(y)) -> (AttendedForHighSchool(x,y) & AttendedForUniversityOfEdinburgh(x)))", "all x y.((WilliamDickinson(x) & WestminsterSchool(y)) -> (Attended(x,y) & HighSchool(x) & UniversityOfEdinburgh(y)))"]}
{"id": "folio_train_36", "nl": "The University of Edinburgh is a university located in the United Kingdom.", "fol": "(IsLocatedIn(Universityofedinburgh,Unitedkingdom) & IsUniversity(Universityofedinburgh))", "prediction": ["all x.(UniversityOfEdinburgh(x) -> UniversityLocatedInUnitedKingdom(x))", "all x.((UniversityOfEdinburgh(x) & LocatedInUnitedKingdom(x)) -> UniversityOfEdinburgh(x))", "all x.(UniversityOfEdinburgh(x) -> (University(x) & LocatedInUnitedKingdom(x)))", "all x.(UniversityOfEdinburgh(x) -> LocatedInUnitedKingdom(x))", "all x y.((University(x) & University(y)) -> (LocatedIn(x,y) & United Kingdom(y)))", "all x.(UniversityOfEdinburgh(x) -> UniversityLivingInUnitedKingdom(x))", "all x.(UniversityOfEdinburgh(x) -> UniversityLocatedInUnitedKingdom(x))", "all x y.((University(x) & University(y) & United Kingdom(y)) -> LocatedIn(x,y))", "all x y.((University(x) & University(y) & LocatedIn(x,y)) -> UnitedKingdom(x))", "all x.(UniversityOfEdinburgh(x) -> (UniversityLocatedInUnitedKingdom(x) & LocatedInUnitedKingdom(x)))", "all x y.((University(x) & University(y)) -> (LocatedIn(x,y) & UnitedKingdom(x)))", "all x.(UniversityOfEdmonton(x) -> UniversityLocatedInUnitedKingdom(x))", "all x.(University(x) -> (University(x) & LocatedInUnitedKingdom(x)))", "all x y.((University(x) & University(y)) -> (LocatedIn(x,y) & UnitedKingdom(y)))", "all x.((UniversityOfEdinburgh(x) & LocatedInUnitedKingdom(x)) -> University(x))", "all x y.((University(x) & University(y)) -> LocatedIn(x,y))"]}
{"id": "folio_train_37", "nl": "William Dickinson supported the Portland Whigs.", "fol": "Supports(Williamdickinson,Portlandwhigs)", "prediction": ["all x y.((WilliamDickinson(x) & PortlandWhisgs(y)) -> Supported(x,y))", "all x y.((WilliamDickinson(x) & PortlandWhiskers(y)) -> Supported(x,y))", "all x y.((WilliamDickinson(x) & PortlandWhisg(y)) -> Supported(x,y))", "all x.((WilliamDickinson(x) & PortlandWhisgs(x)) -> Supported(x,Whisgs))", "all x.((WilliamDickinson(x) & PortlandWhisgs(y)) -> Supported(x,y))", "all x y.((WilliamDickinson(x) & PortlandWhisgs(y)) -> Supports(x,y))", "all x.((WilliamDickinson(x) & PortlandWhisgs(x)) -> Supported(x,y))", "all x y.((WilliamDickinson(x) & PortlandWhigs(y)) -> Supported(x,y))", "all x y.((WilliamDickinson(x) & PortlandWigs(y)) -> Supported(x,y))", "all x y.((WilliamDickinson(x) & PortlandWhists(y)) -> Supported(x,y))", "all x y.((WilliamDickinson(x) & PortlandWhiskers(y)) -> Supports(x,y))", "(SupportsPortlandWhisgs(WilliamDickinson))", "all x.((WilliamDickinson(x) & PortlandWhiskers(y)) -> Supported(x,y))", "all x.((WilliamDickinson(x) & PortlandWhiskers(x)) -> Supported(x,Whiskers))", "all x.((WilliamDickinson(x) & PortlandWhisgs(x)) -> Supported(x))", "all x.((WilliamDickinson(x) & PortlandWhisgs(x)) -> Supports(x,y))"]}
{"id": "folio_train_38", "nl": "People who supported the Portland Whigs did not get a seat in the Parliament.", "fol": "all x.(Supports(x,Portlandwhigs) -> -HasSeatInParliament(x))", "prediction": ["all x.((Person(x) & SupportedPortlandWhisgs(x)) -> -SeatInParliament(x))", "all x.((People(x) & SupportedPortlandWhisgs(x)) -> -SeatInParliament(x))", "all x.((Person(x) & SupportedPortlandWhisgs(x)) -> -HasSeatInParliament(x))", "all x.((People(x) & SupportedPortlandWhisgs(x)) -> -HasSeatInParliament(x))", "all x y.((Person(x) & PortlandWhisgs(y) & Supported(x,y)) -> -SeatInParliament(x))", "all x.((Person(x) & SupportedPortlandWhisgs(x)) -> -GatherSeatInParliament(x))", "all x.((Person(x) & SupportedPortlandWhists(x)) -> -SeatInParliament(x))", "all x.((Person(x) & SupportedPortlandWigs(x)) -> -SeatInParliament(x))", "all x.((Person(x) & SupportedPortlandWhiskers(x)) -> -SeatInParliament(x))", "all x.((People(x) & SupportedPortlandWigs(x)) -> -SeatInParliament(x))", "all x y.((Person(x) & PortlandWhisgs(y) & Supported(x,y)) -> -HasSeatInParliament(x))", "all x y.((People(x) & PortlandWhisgs(y) & Supported(x,y)) -> -SeatInParliament(x))", "all x y.((Person(x) & PortlandWhisgs(y)) -> -SeatInParliament(x,y))", "all x.(SupportsPortlandWhisgs(x) -> -SeatInParliament(x))", "all x.((SupportsPortlandWhisgs(x)) -> -SeatInParliament(x))", "all x y.((Person(x) & SupportedPortlandWhisgs(x)) -> -SeatInParliament(y))"]}
{"id": "folio_train_39", "nl": "William Dickinson did not get a seat in the Parliament.", "fol": "-HasSeatInParliament(Williamdickinson)", "prediction": ["all x.((WilliamDickinson(x) & -SeatInParliament(x)) -> -SeatInParliament(x))", "all x.((WilliamDickinson(x) & -HasSeatInParliament(x)) -> -HasSeatInParliament(x))", "all x.((WilliamDickinson(x) & -GiveSeatInParliament(x)) -> -GiveSeatInParliament(x))", "all x.((WilliamDickinson(x) & -GatherSeatInParliament(x)) -> -GatherSeatInParliament(x))", "all x.((WilliamDickinson(x) & -SeatInParliament(x)) -> -SittingInParliament(x))", "all x.((WilliamDickinson(x) & -GetsSeatInParliament(x)) -> -GetsSeatInParliament(x))", "(-SeatInParliament(WilliamDickinson))", "all x.((WilliamDickinson(x) & -HasSeat(x)) -> -HasSeatInParliament(x))", "all x.((WilliamDickinson(x) & -SeatInParliament(x)) -> -GetsSeatInParliament(x))", "all x.((WilliamDickinson(x) & -SeatInParliament(x)) -> -SeatedInParliament(x))", "all x.((WilliamDickinson(x) & -SeatInParliament(x)) -> -HasSeatInParliament(x))", "all x.((WilliamDickinson(x) & -SeatInParliament(x)) -> -SituationInParliament(x))", "all x y.((WilliamDickinson(x) & Parliament(y)) -> -HasSeat(x,y))", "all x.((WilliamDickinson(x) & -SeatInParliament(x)) -> -SituatedInParliament(x))", "all x.(WilliamDickinson(x) -> -HasSeatInParliament(x))", "(-(WilliamDickinson(William Dickinson) & Parliament(William Dickinson)))"]}
{"id": "folio_train_40", "nl": "William Dickinson went to schools located in the United Kingdom for both high school and university.", "fol": "(exists h.(AttendedSchool(Williamdickinson,h) & IsHighSchool(h) & IsLocatedIn(h,Unitedkingdom)) & exists u.(AttendedSchool(Williamdickinson,u) & IsUniversity(u) & IsLocatedIn(u,Unitedkingdom)))", "prediction": ["all x y.((WilliamDickinson(x) & School(y)) -> (GoesTo(x,y) & HighSchool(y) & University(y)))", "all x y.((WilliamDickinson(x) & School(y)) -> (GoesTo(x,y) & (HighSchool(y) | University(y))))", "all x y z.((WilliamDickinson(x) & School(y) & (HighSchool(z) | University(z))) -> GoesTo(x,y,z))", "all x.((WilliamDickinson(x) & School(y)) -> (GoesTo(x,y) & HighSchool(y) & University(y)))", "all x y.((WilliamDickinson(x) & School(y)) -> (GoesTo(x,y) & In(x,y)))", "all x y.((WilliamDickinson(x) & School(y) & United Kingdom(y)) -> (GoesTo(x,y) & (HighSchool(y) | University(y))))", "all x y z.((WilliamDickinson(x) & School(y) & School(z)) -> (GoesTo(x,y,z) & HighSchool(y) & University(z)))", "all x y.((WilliamDickinson(x) & School(y)) -> (GoesTo(x,y) & LocatedIn(x,y)))", "all x y.((WilliamDickinson(x) & School(y) & United Kingdom(y)) -> (GoesTo(x,y) & HighSchool(y) & University(y)))", "all x.((WilliamDickinson(x) & School(y)) -> (GoesTo(x,y) & (HighSchool(y) | University(y))))", "all x y.((WilliamDickinson(x) & School(y)) -> (GoesTo(x,y) & HighSchool(x) & University(y)))", "all x y z.((WilliamDickinson(x) & School(y) & School(z)) -> (GoesTo(x,y,z) & HighSchool(z) & University(z)))", "all x y.((WilliamDickinson(x) & School(y)) -> (GoedTo(x,y) & HighSchool(y) & University(y)))", "all x y.((WilliamDickinson(x) & School(y)) -> (GoesTo(x,y) & HighSchool(x) & University(x)))", "all x y.((WilliamDickinson(x) & School(y) & United Kingdom(y)) -> (GoesTo(x,y) & (HighSchool(x) | University(x))))", "all x y z.((WilliamDickinson(x) & School(y) & UnitedKingdom(z)) -> (GoesTo(x,y,z) & (HighSchool(y) | University(y))))"]}
{"id": "folio_train_41", "nl": "William Dickinson attended university in the United Kingdom.", "fol": "exists u.(AttendedSchool(Williamdickinson,u) & IsUniversity(u) & IsLocatedIn(u,Unitedkingdom))", "prediction": ["William Dickinson attended university in the United Kingdom.", "all x y z.((WilliamDickinson(x) & University(y) & United Kingdom(z)) -> Attended(x,y,z))", "all x y.((WilliamDickinson(x) & University(y)) -> Attends(x,y))", "all x y.((WilliamDickinson(x) & University(y)) -> Attended(x,y))", "all x y z.((WilliamDickinson(x) & University(y) & United Kingdom(z)) -> Attended(x,y,z))", "William Dickinson attendedUniversityInUnitedKingdom(WilliamDickinson)", "all x y.((WilliamDickinson(x) & University(y)) -> Attended(x,y))", "all x y.((WilliamDickinson(x) & University(y)) -> AttendedInUnitedKingdom(x,y))", "all x y.((WilliamDickinson(x) & University(y)) -> AttendedInUnitedKingdom(x,y))", "all x y z.((WilliamDickinson(x) & University(y) & UnitedKingdom(z)) -> Attended(x,y,z))", "all x y z.((WilliamDickinson(x) & University(y) & United Kingdom(z)) -> Attends(x,y,z))", "all x y.((WilliamDickinson(x) & University(y)) -> AttendsInUnitedKingdom(x,y))", "all x y z.((WilliamDickinson(x) & University(y) & UnitedKingdom(z)) -> Attended(x,y,z))", "all x y z.((WilliamDickinson(x) & University(y) & United Kingdom(z)) -> AttendedIn(x,y,z))", "all x y.((WilliamDickinson(x) & University(y)) -> AttendedIn(x,y))", "(AttendedUniversity(WilliamDickinson) & United Kingdom(WilliamDickinson))"]}
{"id": "folio_train_42", "nl": "William Dickinson sat in the House of Commons.", "fol": "SitsInHouseOfCommons(Williamdickinson)", "prediction": ["William Dickinson sat in HouseOfCommons.", "all x y.((WilliamDickinson(x) & HouseOfCommons(y)) -> SitsIn(x,y))", "all x y z.((WilliamDickinson(x) & HouseOfCommons(y) & HouseOfCommons(z)) -> SitsIn(x,y,z))", "all x.((WilliamDickinson(x) & HouseOfCommons(x)) -> SitsIn(x,commons))", "all x.((WilliamDickinson(x) & HouseOfCommons(x)) -> SitsIn(x,Commons))", "all x.((WilliamDickinson(x) & HouseOfCommons(x)) -> SitsIn(x,Commons))", "all x y z.((WilliamDickinson(x) & HouseOfCommons(y) & HouseOfCommunities(z)) -> SitsIn(x,y,z))", "all x y.((WilliamDickinson(x) & HouseOfCommons(y)) -> SatIn(x,y))", "all x y.((WilliamDickinson(x) & HouseOfCommons(y)) -> SittingIn(x,y))", "all x.(WilliamDickinson(x) -> SitsInHouseOfCommons(x))", "all x y z.((WilliamDickinson(x) & HouseOfCommons(y) & HouseOfCommons(z)) -> SatIn(x,y,z))", "all x y z.((WilliamDickinson(x) & HouseOfCommons(y) & HouseOfCommons(z)) -> SittingIn(x,y,z))", "all x.((WilliamDickinson(x) & HouseOfCommons(x)) -> SittingIn(x,commons))", "all x y z.((WilliamDickinson(x) & HouseOfCommons(y) & HouseOfCommons(z)) -> SitsIn(x,y))", "all x y.((WilliamDickinson(x) & HouseOfCommons(y)) -> SatIn(x,y))", "all x y z.((WilliamDickinson(x) & HouseOfCommons(y) & HouseOfCommons(z)) -> SatIn(x,y,z))"]}
{"id": "folio_train_43", "nl": "LanguageA is a universal language", "fol": "IsUniversalLanguage(LanguageA)", "prediction": ["all x.(LanguageA(x) -> UniversalLanguage(x))", "all x.(LanguageA(x) -> (UniversalLanguage(x) & UniversalLanguage(x) & UniversalLanguage(x) & UniversalLanguage(x) & UniversalLanguage(x) & UniversalLanguage(x) & UniversalLanguage(x) & UniversalLanguage(x) & UniversalLanguage(x) & UniversalLanguage(x)))", "all x.(LanguageA(x) -> (UniversalLanguage(x) & UniversalLanguage(x) & UniversalLanguage(x) & UniversalLanguage(x) & UniversalLanguage(x) & UniversalLanguage(x) & UniversalLanguage(x) & UniversalLanguage(x) & UniversalLanguage(x)))", "all x.(LanguageA(x) -> (UniversalLanguage(x) & UniversalLanguage(x) & UniversalLanguage(x) & UniversalLanguage(x) & UniversalLanguage(x) & UniversalLanguage(x) & UniversalLanguage(x) & UniversalLanguage(x) & UniversalLanguage(x) & UniversalLanguage(x) & UniversalLanguage(x)))", "LanguageA (UniversalLanguage(Language) & UniversalLanguage(Language) & UniversalLanguage(Language) & UniversalLanguage(Language) & UniversalLanguage(Language) & UniversalLanguage(Language) & UniversalLanguage(Language) & UniversalLanguage(Language) & UniversalLanguage(Language)", "all x.(LanguageA(x) -> (UniversalLanguage(x) & UniversalLanguage(x) & UniversalLanguage(x) & UniversalLanguage(x) & UniversalLanguage(x) & UniversalLanguage(x) & UniversalLanguage(x) & UniversalLanguage(x)))", "LanguageA (UniversalLanguage(Language) & UniversalLanguage(Language) & UniversalLanguage(Language) & UniversalLanguage(Language) & UniversalLanguage(Language) & UniversalLanguage(Language) & UniversalLanguage(Language) & UniversalLanguage(Language))", "LanguageA (UniversalLanguage(Language) & UniversalLanguage(Language))", "LanguageA (UniversalLanguage(Language) & UniversalLanguage(Language) & UniversalLanguage(Language) & UniversalLanguage(Language) & UniversalLanguage(Language) & UniversalLanguage(Language) & UniversalLanguage(Language))", "LanguageA (UniversalLanguage(Language) & UniversalLanguage(Language) & UniversalLanguage(Language) & UniversalLanguage(Language) & UniversalLanguage(Language) & UniversalLanguage(Language))", "LanguageA (UniversalLanguage(Language) & UniversalLanguage(Language) & UniversalLanguage(Language) & UniversalLanguage(Language) & UniversalLanguage(Language) & UniversalLanguage(Language) & UniversalLanguage(Language) & UniversalLanguage(Language) & UniversalLanguage(Language(Language)", "all x.(LanguageA(x) -> (UniversalLanguage(x) & UniversalLanguage(x) & UniversalLanguage(x) & UniversalLanguage(x) & UniversalLanguage(x) & UniversalLanguage(x) & UniversalLanguage(x)))", "all x.((LanguageA) & UniversalLanguage(x)) -> LanguageA(x))", "all x.(LanguageA(x) -> (UniversalLanguage(x) & UniversalLanguage(x) & UniversalLanguage(x) & UniversalLanguage(x) & UniversalLanguage(x) & UniversalLanguage(x) & UniversalLanguage(x) & UniversalLanguage(x) & UniversalLanguage(x) & UniversalLanguage(x)))", "LanguageA (UniversalLanguage(Language) & UniversalLanguage(Language) & UniversalLanguage(Language) & UniversalLanguage(Language) & UniversalLanguage(Language))", "all x.(LanguageA(x) -> (UniversalLanguage(x) & UniversalLanguage(x)))"]}
{"id": "folio_train_44", "nl": "If a universal language exists, then for every two people if they both know the same universal language they can communicate.", "fol": "all x y.(exists z.(KnowsLanguage(x,z) & KnowsLanguage(y,z) & IsUniversalLanguage(z)) -> CanCommunicate(x,y))", "prediction": ["all x y.((UniversalLanguage(x) & Person(y) & KnowsUniversalLanguage(y,x)) -> Communicate(y,x))", "all x y.((UniversalLanguage(x) & Person(y) & KnowsSameUniversalLanguage(y,x)) -> Communicate(y,x))", "all x.exists y.((UniversalLanguage(x) & Person(y) & KnowsUniversalLanguage(y,x)) -> Communicate(y,x))", "all x y.((UniversalLanguage(x) & Person(y) & KnowsUniversalLanguage(y,x)) -> CanCommunicate(y,x))", "all x.exists y.((UniversalLanguage(x) & Person(y) & KnowsUniversalLanguage(y,x)) -> CanCommunicate(y,x))", "all x y.((UniversalLanguage(x) & Person(y) & KnowsSameUniversalLanguage(y,x)) -> CanCommunicate(y,x))", "all x y.((UniversalLanguage(x) & Person(y) & KnowsSameUniversalLanguage(y,x)) -> CanCommunicate(x,y))", "all x.exists y.((UniversalLanguage(x) & Person(y) & KnowsUniversalLanguage(y,x)) -> Communicates(y,x))", "all x.((UniversalLanguage(x) & exists y.(Person(y) & Person(y) & KnowsUniversalLanguage(y,x))) -> CanCommunicate(y,x))", "all x y.((UniversalLanguage(x) & Person(y) & KnowsSameUniversalLanguage(y,x)) -> Communicate(x,y))", "all x y.((UniversalLanguage(x) & Person(y) & KnowsUniversalLanguage(y,x)) -> Communicates(y,x))", "all x.((UniversalLanguage(x) & exists y.(Person(y) & Person(y) & KnowsUniversalLanguage(y,x))) -> Communicate(y,x))", "all x.((UniversalLanguage(x) & exists y.(Person(y) & Person(y) & KnowsUniversalLanguage(y,x))) -> CanCommunicate(x,y))", "all x.exists y.((UniversalLanguage(x) & Person(y) & KnowsSameUniversalLanguage(y,x)) -> Communicate(y,x))", "all x.exists y.((UniversalLanguage(x) & Person(y) & KnowsSameUniversalLanguage(y,x)) -> CanCommunicate(x,y))", "all x y z.((UniversalLanguage(x) & Person(y) & Person(z) & KnowsUniversalLanguage(y,z)) -> Communicate(y,z))"]}
{"id": "folio_train_45", "nl": "Katya cannot communicate with Danil.", "fol": "KnowsLanguage(Katya,LanguageA)", "prediction": ["all x y.((Katya(x) & Danil(y)) -> -Communicate(x,y))", "all x y.((Katya(x) & Danil(y)) -> -Communicates(x,y))", "all x y.((Katya(x) & Danil(y)) -> CannotCommunicate(x,y))", "all x y.((Katya(x) & Danil(y)) -> -Communicates(x,y))", "all x y.((Katya(x) & Danil(y)) -> -CanCommunicate(x,y))", "all x.((Katya(x) & Danil(x)) -> -Communicate(x,y))", "all x.((Katya(x) & Danil(x)) -> -Communicates(x,y))", "all x y.((Katya(x) & Danil(y)) -> CannotCommunicate(x,y))", "all x y.((Katya(x) & Danil(y)) -> CannotCommunicate(x,y))", "all x.((Katya(x) & Danil(x)) -> CannotCommunicate(x,y))", "all x y.((Katya(x) & Danil(y)) -> -CommunicatesWith(x,y))", "all x.((Katya(x) & Danil(y)) -> -Communicate(x,y))", "all x.((Katya(x) & Danil(y)) -> -Communicates(x,y))", "all x.((Katya(x) & Danil(x)) -> -Communicates(x,y))", "all x.((Katya(x) & Danil(x)) -> CannotCommunicate(x,y))", "-(Katya(Katya) & Danil(Danil))"]}
{"id": "folio_train_46", "nl": "Katya knows LanguageA. ", "fol": "-CanCommunicate(Katya,Danil)", "prediction": ["all x.(Katya(x) -> KnowsLanguageA(x))", "(Katya knowsLanguageA(Katya) & KnowsLanguageA(Katya))", "all x y.((Katya(x) & LanguageA(y)) -> Knows(x,y))", "exists x.(Katya(x) & LanguageA(x))", "(knowsLanguageA(Katya) & KnowsLanguageA(Katya))", "All x.(Katya(x) -> KnowsLanguageA(x))", "Katya knowsLanguageA.", "(KatyaKnowsLanguageA(Katya) & KnowsLanguageA(Katya))", "all x.(Katya(x) -> KnowledgesLanguageA(x))", "exists x.(Katya(x) & KnowsLanguageA(x))", "(knowsLanguageA(Katya) & knowsLanguageA(Katya))", "exists x.(Katya(x) & KnowledgesLanguageA(x))", "(Katya knowsLanguageA(Katya))", "(Katya knowsLanguageA(Katya) & KnowsLanguageA(Katya)))", "(Katya KnowsLanguageA(Katya) & KnowsLanguageA(Katya))", "all x.(Katya(x) -> knowsLanguageA(x))"]}
{"id": "folio_train_47", "nl": "Danil knows LanguageA.", "fol": "KnowsLanguage(Danil,LanguageA)", "prediction": ["Danil knowsLanguageA.", "Danil knowsLanguageA(Danil)", "(KnowsLanguageA(Danil) & KnowsLanguageA(Danil))", "Danil knowsLanguageA(d) & KnowsLanguageA(d) & KnowsLanguageA(d))", "(KnowsLanguageA(Danil) -> KnowsLanguageA(Danil))", "Danil knowsLanguageA(d) & KnowsLanguageA(d))", "Danil KnowsLanguageA.", "Danil knowsLanguageA(d) & knowsLanguageA(d) & knowsLanguageA(d))", "(Knows(Daniel,LanguageA) & DanilKnows(Daniel,LanguageA))", "(KnowsLanguageA(Daniel) & KnowsLanguageA(Daniel))", "(Knows(Danil,LanguageA) & Danil knows(Danil,LanguageA))", "(knowsLanguageA(Danil) & KnowsLanguageA(Danil))", "Danil knowsLanguageA(Danil) -> KnowsLanguageA(Danil))", "Danil knowsLanguageA(Danil) & KnowsLanguageA(Danil))", "(Knows(Daniel,LanguageA) & Danil knows(Daniel,LanguageA))", "Danil knowsLanguageA(Daniel,Language(Daniel,LanguageA))"]}
{"id": "folio_train_48", "nl": "All customers who are subscribed to AMC List are available to watch 3 movies every week without any additional fees. ", "fol": "all x.(SubscribedToAMCList(x) -> AvailableToWatch3Movies(x))", "prediction": ["all x.((Customer(x) & SubscribedToAMCList(x)) -> AvailableToWatch3Movies(x))", "all x.((Customer(x) & SubscribedToAMCList(x)) -> AvailableToWatchMoviesWithoutAdditionalFees(x))", "all x.((Customer(x) & SubscribedToAMCList(x)) -> AvailableToWatchMovies(x,3))", "all x.((Customer(x) & SubscribedToAMCList(x)) -> AvailableToWatch3MoviesEveryWeek(x))", "all x.((Customer(x) & SubscribedToAMCList(x)) -> AvailableToWatchMoviesWithoutAdditionalFees(x,3))", "all x.((Customer(x) & SubscribedToAMCList(x)) -> AvailableToWatchMovies(x,3) & -AdditionalFees(x))", "all x.((Customer(x) & SubscribedToAMCList(x)) -> AvailableToWatchMoviesEveryWeek(x,3))", "all x.((Customer(x) & SubscribedToAMCList(x)) -> AvailableToWatchMovies(x,3))", "all x.((Customer(x) & SubscribedToAMCList(x)) -> AvailableToWatch3MoviesWithoutAdditionalFees(x))", "all x.((Customer(x) & SubscribedToAMCList(x)) -> AvailableToWatchMoviesEveryWeek(x))", "all x.((Customer(x) & SubscribedToAMCList(x)) -> WatchesMoviesEveryWeek(x,3))", "all x.((Customer(x) & SubscribedToAMCList(x)) -> AvailableToWatchMovies(x,3/Week))", "all x.((Customer(x) & SubscribedToAMCList(x)) -> AvailableToWatchMovies(x,3) & -AdditionalFees(x))", "all x.((Customer(x) & SubscribedToAMCList(x)) -> AvailableToWatch3Movies(x))", "all x.((Customer(x) & SubscribedToAMCList(x)) -> AvailableToWatchMoviesEachWeek(x,3))", "all x.((Customer(x) & SubscribedToAMCList(x)) -> AvailableToWatchMoviesEveryWeek(x,3))"]}
{"id": "folio_train_49", "nl": "Some customers go to cinemas every week", "fol": "exists x.GoToCinemaEveryWeek(x)", "prediction": ["exists x.(Customer(x) & GoesToCinema(x) & EveryWeek(x))", "exists x y.(Customer(x) & Cinema(y) & GoesTo(x,y))", "exists x y.(Customer(x) & Cinema(y) & GoesToEveryWeek(x,y))", "exists x.(Customer(x) & GoesToCinema(x))", "exists x.(Customer(x) & GoesToCinemaEveryWeek(x))", "exists x.(Customer(x) & GoesToCinemasEveryWeek(x))", "exists x y z.(Customer(x) & Cinema(y) & Week(z) & GoesTo(x,y,z))", "exists x.(Customer(x) & GoToCinema(x) & EveryWeek(x))", "exists x y.(Customer(x) & Cinema(y) & GoesTo(x,y) & EveryWeek(x))", "exists x y z.(Customer(x) & Cinema(y) & Cinema(z) & GoesTo(x,y,z))", "exists x y.((Customer(x) & Cinema(y)) -> GoesTo(x,y))", "exists x y.(Client(x) & Cinema(y) & GoesTo(x,y))", "exists x y.(Customer(x) & Cinema(y) & GoTo(x,y))", "exists x y.(Customer(x) & Cinema(y) & GoesTo(x,y) & EveryWeek(y))", "exists x y.((Customer(x) & Cinema(y)) -> GoesToEveryWeek(x,y))", "exists x y.((Customer(x) & Cinema(y) & GoesTo(x,y)) -> EveryWeek(x))"]}
{"id": "folio_train_50", "nl": "Customers either subscribe to AMC service or HBO service. ", "fol": "all x.(SubscribedToAMCList(x) | SubscribedToHBOService(x))", "prediction": ["all x.(Customer(x) -> (SubscribesToAMCService(x) | SubscribesToHBOsService(x)))", "all x.(Customer(x) -> (SubscribesToAMCService(x) | SubscribesToHBOService(x)))", "all x.(Customer(x) -> (SubscribesTo(x,AMC) | SubscribesTo(x,HBOY)))", "all x.(Customer(x) -> (SubscribesToAMC(x) | SubscribesToHBOY(x)))", "all x.(Customer(x) -> (SubscribesToAMCService(x) | SubscribesToHoneyService(x)))", "all x.(Customer(x) -> (SubscribesToAMCService(x) | SubscribesToHOBoardService(x)))", "all x.(Customer(x) -> (SubscribesToAMCService(x) | SubscribesToHobbyService(x)))", "all x.(Customer(x) -> (Subscribes(x,AMC) | Subscribes(x,HBOY)))", "all x.(Customer(x) -> (SubscribesToAMCService(x) | SubscribesToHBOXService(x)))", "all x y.((Customer(x) & (AMCService(y) | HBOService(y))) -> SubscribesTo(x,y))", "all x.(Customer(x) -> (SubscribesToAMCService(x) | SubscribesToHBOYService(x)))", "all x y.((Customer(x) & (AMCService(y) | HBOService(y))) -> Subscribes(x,y))", "all x.(Customer(x) -> (SubscribesToAMCService(x) | SubscribesToHBOSecurity(x)))", "all x.(Customer(x) -> (Subscribe(x,AMC) | Subscribe(x,HBOY)))", "all x y.((Customer(x) & (AMCService(y) | HBOService(y))) -> SubscribesTo(x,y))", "all x.(Customer(x) -> (SubscribesToAMCService(x) | SubscribesToHBOYSecurity(x)))"]}
{"id": "folio_train_51", "nl": "Customers who prefer TV series more and will not watch TV series in cinemas.", "fol": "all x.(PrefersTVSeries(x) -> -WatchesTVSeriesInCinema(x))", "prediction": ["all x.((Customer(x) & PrefersTVSeriesMore(x) & -WatchesTVSeriesInCinemas(x)) -> -WatchesTVSeriesInCinemas(x))", "all x.((Customer(x) & PrefersTVSeriesMore(x) & -WatchesTVSeriesInCinemas(x)) -> -PrefersTVSeriesMore(x))", "all x.((Customer(x) & PrefersTVSeriesMore(x) & -WatchesTVSeriesInCinemas(x)) -> -PrefersTVSeriesInCinemas(x))", "all x.((Customer(x) & PrefersTVSeriesMore(x) & -WatchesTVSeriesInCinemas(x)) -> -PrefersTVSeriesMore(x))", "all x.((Customer(x) & PrefersTVSeriesMore(x) & -WatchesTVSeriesInCinemas(x)) -> -PrefersTVSeries(x))", "all x.((Customer(x) & PrefersTVSeriesMore(x) & -WatchesTVSeriesInCinemas(x)) -> -PrefersTVSeriesInCinemas(x))", "all x.((Customer(x) & PrefersTVSeriesMore(x) & -WatchesTVSeriesInCinemas(x)) -> -PrefersTVSeries(x))", "all x.((Customer(x) & PrefersTVSeriesMore(x) & -WatchTVSeriesInCinemas(x)) -> -PrefersTVSeriesMore(x))", "all x.((Customer(x) & PrefersTVSeriesMore(x) & -WatchTVSeriesInCinemas(x)) -> -PrefersTVSeriesInCinemas(x))", "all x y.((Customer(x) & TVSeries(y) & PrefersMore(x,y) & -WatchesInCinemas(x,y)) -> -PrefersMore(x,y))", "all x.((Customer(x) & PrefersTVSeriesMore(x) & -WatchTVSeriesInCinemas(x)) -> -WatchTVSeriesInCinemas(x))", "all x.((Customer(x) & PrefersTVSeriesMore(x) & -WatchesInCinemas(x)) -> -WatchesInCinemas(x))", "all x.((Customer(x) & PrefersTVSeriesMore(x) & -WatchTVSeriesInCinemas(x)) -> -PrefersTVSeries(x))", "all x y.((Customer(x) & TVSeries(y) & PrefersMore(x,y) & -WatchesInCinemas(x)) -> -PrefersMore(x,y))", "all x.((Customer(x) & PrefersTVSeriesMore(x) & -WatchesTVSeriesInCinemas(x)) -> -PrefersTVSeriesInCinemas(x))", "all x y.((Customer(x) & TVSeries(y) & PrefersMore(x,y) & -WatchesInCinemas(x,y)) -> -WatchesInCinemas(x,y))"]}
{"id": "folio_train_52", "nl": "All customers who subscribe to HBO services prefer TV series to movies. ", "fol": "all x.(SubscribedToHBOService(x) -> PrefersTVSeries(x))", "prediction": ["all x.((Customer(x) & SubscribesToHBO(x)) -> (PrefersTVSeries(x) & PrefersMovies(x)))", "all x.((Customer(x) & SubscribesToHBO(x)) -> PrefersTVSeriesToMovies(x))", "all x.((Customer(x) & SubscribesToHBO(x)) -> (PrefersTVSeries(x) | PrefersMovies(x)))", "all x.((Customer(x) & SubscribesToHoneyServices(x)) -> (PrefersTVSeries(x) & PrefersMovies(x)))", "all x.((Customer(x) & SubscribesToHBO(x)) -> (PrefersTVSeries(x) & PrefersMovies(x)))", "all x.((Customer(x) & SubscribesToHoneyServices(x)) -> PrefersTVSeriesToMovies(x))", "all x.((Customer(x) & SubscribesToHobbyServices(x)) -> (PrefersTVSeries(x) & PrefersMovies(x)))", "all x.((Customer(x) & SubscribesToHBO(x)) -> PrefersTVSeriesToMovies(x))", "all x y.((Customer(x) & SubscribesToHBO(x)) -> (PrefersTVSeries(x,y) & PrefersMovies(x,y)))", "all x.((Customer(x) & SubscribesToHoneyServices(x)) -> (PrefersTVSeries(x) & PrefersMovies(x)))", "all x.((Customer(x) & SubscribesToHBO(x)) -> (PrefersTVSeries(x) | PrefersMovies(x)))", "all x.((Customer(x) & SubscribesToHoneyServices(x)) -> (PrefersTVSeries(x) | PrefersMovies(x)))", "all x.((Customer(x) & SubscribesToHBO(x)) -> PrefersTVSeriesToMovies(x))", "all x.((Customer(x) & SubscribesToHobbyServices(x)) -> PrefersTVSeriesToMovies(x))", "all x.((Customer(x) & SubscribesToHoneyServices(x)) -> PrefersTVSeriesToMovies(x))", "all x.((Customer(x) & SubscribesTo HBOServices(x)) -> PrefersTVSeriesToMovies(x))"]}
{"id": "folio_train_53", "nl": "James watches TV series in cinemas. ", "fol": "WatchesTVSeriesInCinema(James)", "prediction": ["all x y.((James(x) & TVSeries(y)) -> WatchesInCinemas(x,y))", "all x y z.((James(x) & TVSeries(y) & Cinema(z)) -> WatchesIn(x,y,z))", "all x y.((James(x) & TVSeries(y)) -> WatchesInCinema(x,y))", "all x y z.((James(x) & TVSeries(y) & Cinema(z)) -> Watches(x,y,z))", "all x.(James(x) -> WatchesTVSeriesInCinemas(x))", "all x y.((James(x) & TelevisionSeries(y)) -> WatchesInCinemas(x,y))", "all x y.((James(x) & TVSeries(y)) -> Watches(x,y))", "all x y z.((James(x) & TelevisionSeries(y) & Cinema(z)) -> WatchesIn(x,y,z))", "all x y.((James(x) & TVSeries(y) & Cinema(z)) -> WatchesIn(x,y,z))", "all x y.((Jimmy(x) & TVSeries(y)) -> WatchesInCinemas(x,y))", "all x y z.((James(x) & TVSeries(y) & Cinema(z)) -> Watches(x,y))", "all x y z.((James(x) & TVSeries(y) & Cinema(z)) -> WatchesIn(x,y))", "all x y.((James(x) & TVSeries(y)) -> WatchesInCinesis(x,y))", "all x y.((James(x) & TVSeries(y)) -> WatchesInCinemats(x,y))", "all x y.((James(x) & TelevisionSeries(y)) -> WatchesInCinema(x,y))", "all x y.((James(x) & TVSeries(y) & Cinema(y)) -> WatchesIn(x,y))"]}
{"id": "folio_train_54", "nl": "James goes to cinemas every week.", "fol": "GoToCinemaEveryWeek(James)", "prediction": ["all x y.((James(x) & Cinema(y)) -> GoesTo(x,y))", "all x.(James(x) -> GoesToCinema(x))", "all x.((James(x) & Cinema(y)) -> GoesTo(x,y))", "all x y.((James(x) & Cinema(y)) -> GoesToEveryWeek(x,y))", "all x.(James(x) -> GoesToCinemasEveryWeek(x))", "all x y z.((James(x) & Cinema(y) & Week(z)) -> GoesTo(x,y,z))", "all x.((James(x) & Cinema(y)) -> GoesToEveryWeek(x,y))", "all x y.((Jimmy(x) & Cinema(y)) -> GoesTo(x,y))", "all x.(James(x) -> GoesToCinemas(x))", "all x y.((Jimmy(x) & Cinema(y)) -> GoesToEveryWeek(x,y))", "all x y.((James(x) & Cinema(y)) -> GoesToWeekly(x,y))", "all x.((Jimmy(x) & Cinema(y)) -> GoesTo(x,y))", "all x y z.((James(x) & Cinema(y) & Week(z)) -> GoesTo(x,y))", "all x.((James(x) & Cinema(x)) -> GoesToEveryWeek(x))", "all x.((Jimmy(x) & Cinema(y)) -> GoesToEveryWeek(x,y))", "all x.((James(x) & Cinema(y)) -> GoesToWeekend(x,y))"]}
{"id": "folio_train_55", "nl": "James does not go to cinemas every week.", "fol": "-GoToCinemaEveryWeek(James)", "prediction": ["all x.(James(x) -> -GoesToCinemasEveryWeek(x))", "all x.((James(x) & Cinema(y)) -> -GoesTo(x,y))", "all x.((James(x) & -GoesToCinema(x)) -> -EveryWeek(x))", "all x.(James(x) -> -GoesToCinema(x))", "all x y.((James(x) & Cinema(y)) -> -GoesTo(x,y))", "all x.((James(x) & Cinema(y)) -> -GoesToEveryWeek(x,y))", "all x.((James(x) & -GoesToCinema(x)) -> -GoesToCinema(x))", "all x.((James(x) & -GoesToCinemasEveryWeek(x)) -> -GoesToCinemasEveryWeek(x))", "all x.((James(x) & Movie(y)) -> -GoesTo(x,y))", "all x.((James(x) & -GoesToCinemasEveryWeek(x)) -> -GoesToCinema(x))", "all x.((James(x) & Cinema(y)) -> -GoesToWeekend(x,y))", "all x y.((James(x) & Cinema(y)) -> -GoesToEveryWeek(x,y))", "all x.(James(x) -> -GoesToCinemasEveryWeek(x))", "all x.((Jimmy(x) & Cinema(y)) -> -GoesTo(x,y))", "all x.((James(x) & -GoesToCinemasEveryWeek(x)) -> -GoesToCinemas(x))", "all x.(James(x) -> -GoesToCinemaEveryWeek(x))"]}
{"id": "folio_train_56", "nl": "James goes to cinemas every week or watches 3 movies every week without any additional fees.", "fol": "(GoesToCinemasEveryWeek(James) | AvailableToWatch3Movies(James))", "prediction": ["all x.(James(x) -> (GoesToCinemasEveryWeek(x) | Watches3MoviesEveryWeek(x)))", "all x y.((James(x) & Cinema(y)) -> (GoesTo(x,y) | Watches(x,y)))", "all x.(James(x) -> (GoesToCinemasEveryWeek(x) | WatchesMoviesEveryWeek(x)))", "all x.(James(x) -> (GoesToCinemasEveryWeek(x) | WatchesThreeMoviesEveryWeek(x)))", "all x y z.((James(x) & Cinema(y) & Movie(z)) -> (GoesTo(x,y) | Watches(x,z)))", "all x y z.((James(x) & Cinema(y) & Movie(z)) -> (GoesTo(x,y) | Watches(x,z))))", "all x.(James(x) -> (GoesToCinemasEveryWeek(x) | WatchesMoviesEveryWeek(x) & -AdditionalFees(x)))", "all x y.((James(x) & Cinema(y)) -> (GoesTo(x,y) & (Watches(x,y) | Watches(x,y))))", "all x.(Jimmy(x) -> (GoesToCinemasEveryWeek(x) | Watches3MoviesEveryWeek(x)))", "all x.(James(x) -> (GoesToCinema(x) | Watches3Movies(x)))", "all x.(James(x) -> (GoesToCinemasEveryWeek(x) | Watches3MoviesEveryWeek(x) & -AdditionalFees(x)))", "all x.(James(x) -> (GoesToCinema(x) | WatchesMovies(x)))", "all x.(James(x) -> (GoesToCinemas(x) | Watches3Movies(x)))", "all x.((James(x) & Cinema(y)) -> (GoesTo(x,y) | Watches(x,y)))", "all x.(James(x) -> (GoesToCinemasEveryWeek(x) | WatchesFourMoviesEveryWeek(x)))", "all x y.((Jimmy(x) & Cinema(y)) -> (GoesTo(x,y) | Watches(x,y)))"]}
{"id": "folio_train_57", "nl": "If James does not both go to cinemas every week and subscribe to HBO service, then James is either available to watch 3 movies every week without any additional fees or he prefers TV more.", "fol": "(-(GoToCinemaEveryWeek(James) & SubscribedToHBOService(James)) -> (AvailableToWatch3Movies(James) | PrefersTVSeries(James)))", "prediction": ["all x.((James(x) & -GoesToCinemasEveryWeek(x) & SubscribesToHBO(x)) -> (AvailableToWatch3MoviesEveryWeek(x) | PrefersTVMore(x)))", "all x.((James(x) & -GoesToCinemasEveryWeek(x) & SubscribesToHBO(x)) -> (AvailableToWatch3Movies(x) | PrefersTVMore(x)))", "all x.((James(x) & -(GoesToCinemasEveryWeek(x) & SubscribesToHBO(x))) -> (AvailableToWatch3MoviesEveryWeek(x) | PrefersTVMore(x))))", "all x.((James(x) & -(GoesToCinemasEveryWeek(x) & SubscribesToHBO(x))) -> (AvailableToWatch3MoviesEveryWeek(x) | PrefersTVMore(x)))", "all x.((James(x) & -(GoesToCinemasEveryWeek(x) & SubscribesToHBO(x))) -> (AvailableToWatch3Movies(x) | PrefersTVMore(x)))", "all x.((James(x) & -GoesToCinemasEveryWeek(x) & SubscribesToHBO(x)) -> (AvailableToWatch3MoviesEveryWeek(x) | PrefersTVMore(x)))", "all x.((James(x) & -(GoesToCinemasEveryWeek(x) & SubscribesToHorizonService(x))) -> (AvailableToWatch3MoviesEveryWeek(x) | PrefersTVMore(x)))", "all x.((James(x) & -GoesToCinemasEveryWeek(x) & SubscribesToHBO(x)) -> (AvailableToWatchMoviesEveryWeek(x) | PrefersTVMore(x)))", "all x.((James(x) & -(GoesToCinemasEveryWeek(x) & SubscribesTo HBOService(x))) -> (AvailableToWatch3MoviesEveryWeek(x) | PrefersTVMore(x)))", "all x.((James(x) & -(GoesToCinemasEveryWeek(x) & SubscribesToHBO(x))) -> (AvailableToWatch3Movies(x) | PrefersTVMore(x))))", "all x.((James(x) & -(GoesToCinemasEveryWeek(x) & SubscribesToHorizon(x))) -> (AvailableToWatch3MoviesEveryWeek(x) | PrefersTVMore(x)))", "all x.((James(x) & -(GoesToCinemasEveryWeek(x) & SubscribesToHorizon(x))) -> (AvailableToWatch3MoviesEveryWeek(x) | PrefersTVMore(x))))", "all x.((James(x) & -(GoesToCinemasEveryWeek(x) & SubscribesToHBO(x))) -> (AvailableToWatch3MoviesEveryWeek(x) | PrefersTVMore(x)))", "all x.((James(x) & -(GoesToCinemasEveryWeek(x) & SubscribesToHorizonService(x))) -> (AvailableToWatch3MoviesEveryWeek(x) | PrefersTVMore(x))))", "all x.((James(x) & -(GoesToCinemasEveryWeek(x) & SubscribesToHBO(x))) -> (AvailableToWatchMoviesEveryWeek(x) | PrefersTVMore(x)))", "all x.((James(x) & -(GoesToCinemasEveryWeek(x) & SubscribesTo HBOService(x))) -> (AvailableToWatch3Movies(x) | PrefersTVMore(x)))"]}
{"id": "folio_train_58", "nl": "If James is available to watch 3 movies every week without any additional fees and he watches TV series in cinemas, then he goes to cinemas every week and prefers TV series more.", "fol": "((AvailableToWatch3Movies(James) & WatchesTVSeriesInCinema(James)) -> (GoToCinemaEveryWeek(James) & PrefersTVSeries(James)))", "prediction": ["all x.((James(x) & AvailableToWatch3MoviesEveryWeek(x) & WatchesTVSeriesInCinemas(x)) -> (GoesToCinemasEveryWeek(x) & PrefersTVSeriesMore(x)))", "all x.((James(x) & AvailableToWatch3MoviesEveryWeek(x) & WatchesTVSeriesInCinemas(x)) -> (GoesToCinemasEveryWeek(x) & PrefersTVSeriesMore(x)))", "all x.((James(x) & WatchesMoviesEveryWeek(x,3) & WatchesTVSeriesInCinemas(x)) -> (GoesToCinemasEveryWeek(x) & PrefersTVSeriesMore(x)))", "all x.((James(x) & WatchesMoviesEveryWeek(x,3) & WatchesTVSeriesInCinemas(x)) -> (GoesToCinemasEveryWeek(x) & PrefersTVSeriesMore(x)))", "all x.((James(x) & AvailableToWatchMoviesEveryWeek(x) & WatchesTVSeriesInCinemas(x)) -> (GoesToCinemasEveryWeek(x) & PrefersTVSeriesMore(x)))", "all x.((James(x) & AvailableToWatchMoviesEveryWeek(x) & WatchesTVSeriesInCinemas(x)) -> (GoesToCinemasEveryWeek(x) & PrefersTVSeriesMore(x)))", "all x.((James(x) & WatchesMoviesEveryWeek(x) & WatchesTVSeriesInCinemas(x)) -> (GoesToCinemasEveryWeek(x) & PrefersTVSeriesMore(x)))", "all x.((James(x) & WatchesMoviesEveryWeek(x) & WatchesTVSeriesInCinemas(x)) -> (GoesToCinemasEveryWeek(x) & PrefersTVSeriesMore(x)))", "all x.((James(x) & AvailableToWatchMoviesEveryWeek(x) & WatchTVSeriesInCinemas(x)) -> (GoesToCinemasEveryWeek(x) & PrefersTVSeriesMore(x)))", "all x.((James(x) & AvailableToWatchMoviesEveryWeek(x) & WatchTVSeriesInCinemas(x)) -> (GoesToCinemasEveryWeek(x) & PrefersTVSeriesMore(x)))", "all x.((James(x) & AvailableToWatchMovies(x,3) & WatchTVSeriesInCinemas(x)) -> (GoesToCinemas(x) & PrefersTVSeriesMore(x)))", "all x.((James(x) & AvailableToWatchMovies(x,3) & WatchTVSeriesInCinemas(x)) -> (GoesToCinemasEveryWeek(x) & PrefersTVSeriesMore(x)))", "all x.((James(x) & AvailableToWatchMovies(x,3) & WatchTVSeriesInCinemas(x)) -> (GoesToCinemasEveryWeek(x) & PrefersTVSeriesMore(x)))", "all x.((James(x) & WatchesMovies(x,3) & WatchesTVSeriesInCinemas(x)) -> (GoesToCinemas(x) & PrefersTVSeriesMore(x)))", "all x.((James(x) & AvailableToWatchMovies(x,3) & WatchTVSeriesInCinemas(x)) -> (GoesToCinemas(x) & PrefersTVSeriesMore(x)))", "all x.((James(x) & WatchesMovies(x,3) & WatchesTVSeriesInCinemas(x)) -> (GoesToCinemas(x) & PrefersTVSeries(x)))"]}
{"id": "folio_train_59", "nl": "A La Liga soccer team ranks higher than another if it receives more points.", "fol": "all x y.((IsLaLigaTeam(x) & IsLaLigaTeam(y) & HasMorePointsThan(x,y)) -> RanksHigherThan(x,y))", "prediction": ["all x y.((La LigaSoccerTeam(x) & Team(y) & MorePoints(x,y)) -> HigherRank(x,y))", "all x y.((La LigaSoccerTeam(x) & Team(y) & MorePoints(x)) -> HigherRank(x,y))", "all x y.((La LigaSoccerTeam(x) & La LigaSoccerTeam(y) & MorePoints(x,y)) -> HigherRank(x,y))", "all x y.((La LigaSoccerTeam(x) & Team(y) & MorePoints(x,y)) -> RankingHigher(x,y))", "all x y.((La LigaSoccerTeam(x) & Team(y) & MorePoints(x,y)) -> RangHigher(x,y))", "all x y.((LaLigaSoccerTeam(x) & Team(y) & MorePoints(x,y)) -> HigherRank(x,y))", "all x y.((La LigaSoccerTeam(x) & La LigaSoccerTeam(y) & MorePoints(y)) -> HigherRank(x,y))", "all x y.((La LigaSoccerTeam(x) & La LigaSoccerTeam(y) & MorePoints(x)) -> HigherRank(x,y))", "all x y.((La LigaSoccerTeam(x) & La LigaSoccerTeam(y) & MorePoints(x,y)) -> RankingHigher(x,y))", "all x y.((LaLigaSoccerTeam(x) & Team(y) & MorePoints(x)) -> HigherRank(x,y))", "all x y.((La LigaSoccerTeam(x) & La LigaSoccerTeam(y) & MorePoints(x,y)) -> RangHigher(x,y))", "all x y.((La LigaSoccerTeam(x) & Team(y) & ReceivesMorePoints(x,y)) -> RankingHigher(x,y))", "all x y.((La Liga(x) & La Liga(y) & MorePoints(x,y)) -> HigherRank(x,y))", "all x.((La LigaSoccerTeam(x) & MorePoints(x)) -> HigherRank(x))", "all x y.((La LigaSoccerTeam(x) & Team(y) & MorePoints(y)) -> HigherRank(x,y))", "all x y.((La LigaSoccerTeam(x) & Team(y) & MorePoints(x,y)) -> HigherRanking(x,y))"]}
{"id": "folio_train_60", "nl": "If two La Liga soccer teams recieve the same points, the team which recieves more points from the games between the two teams ranks higher.", "fol": "all x y.((IsLaLigaTeam(x) & IsLaLigaTeam(y) & -HasMorePointsThan(x,y) & -HasMorePointsThan(y,x) & PointsInGameBetween(x,y)) -> RanksHigherThan(x,y))", "prediction": ["all x y.((La LigaSoccerTeam(x) & La LigaSoccerTeam(y) & SamePoints(x,y)) -> RangHigher(x,y))", "all x y.((La LigaSoccerTeam(x) & La LigaSoccerTeam(y) & SamePoints(x,y)) -> RangHigher(x))", "all x y.((LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & SamePoints(x,y)) -> RangHigher(x))", "all x y.((LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & SamePoints(x,y)) -> RangHigher(x,y))", "all x y.((La LigaSoccerTeam(x) & La LigaSoccerTeam(y) & ReceivesSamePoints(x,y)) -> RangHigher(x))", "all x y.((La LigaSoccerTeam(x) & La LigaSoccerTeam(y) & ReceivesSamePoints(x,y)) -> RangHigher(x,y))", "all x y.((La LigaSoccerTeam(x) & La LigaSoccerTeam(y) & SamePoints(x,y)) -> ReceivesMorePoints(x,y))", "all x y.((LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & ReceivesSamePoints(x,y)) -> RangHigher(x))", "all x y.((LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & ReceivesSamePoints(x,y)) -> RangHigher(x,y))", "all x y.((La LigaSoccerTeam(x) & La LigaSoccerTeam(y) & ReceivesSamePoints(x,y)) -> RangHigher(x,y))", "all x y.((La LigaSoccerTeam(x) & La LigaSoccerTeam(y) & SamePoints(x,y)) -> RaisesHigher(x,y))", "all x y.((La LigaSoccerTeam(x) & La LigaSoccerTeam(y) & ReceivesSamePoints(x,y)) -> RangHigher(x))", "all x y.((LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & ReceivesSamePoints(x,y)) -> RangHigher(x))", "all x y.((LaLigaSoccerTeam(x) & LaLigaSoccerTeam(y) & ReceivesSamePoints(x,y)) -> RangHigher(x,y))", "all x y.((La LigaSoccerTeam(x) & La LigaSoccerTeam(y) & SamePoints(x,y)) -> MorePoints(x,y))", "all x y.((La LigaSoccerTeam(x) & La LigaSoccerTeam(y) & SamePoints(x,y)) -> HigherRank(x,y))"]}
{"id": "folio_train_61", "nl": "If one team ranks higher than the other team, its reverse does not suffice.", "fol": "all x y.(RanksHigherThan(x,y) -> -RanksHigherThan(y,x))", "prediction": ["all x y.((Team(x) & Team(y)) -> (RanksHigher(x,y) & -RanksHigher(x,y)))", "all x y.((Team(x) & Team(y) & HigherRank(x,y)) -> -SufficientReverse(x))", "all x y.((Team(x) & Team(y) & HigherRank(x,y)) -> -SufficientReverse(x,y))", "all x y.((Team(x) & Team(y) & HigherRank(x,y)) -> -Sufficiency(x,y))", "all x y.((Team(x) & Team(y) & HigherRank(x,y)) -> -SufficiencyReverse(x))", "all x y.((Team(x) & Team(y) & HigherRank(x,y)) -> -SufficiencyReverse(x,y))", "all x y.((Team(x) & Team(y)) -> (RanksHigher(x,y) & -RanksHigher(y,x)))", "all x y.((Team(x) & Team(y) & HigherRank(x,y)) -> -Sufficiency(x))", "all x y.((Team(x) & Team(y) & HigherRank(x,y)) -> -SuppliesReverse(x,y))", "all x y.((Team(x) & Team(y) & HigherRank(x,y)) -> -SufficesReverse(x))", "all x y.((Team(x) & Team(y) & LowerRank(x,y)) -> -Sufficiency(x,y))", "all x y.((Team(x) & Team(y) & RankingHigher(x,y)) -> -SufficiencyReverse(x))", "all x y.((Team(x) & Team(y) & RangHigher(x,y)) -> -SufficiencyReverse(x))", "all x y.((Team(x) & Team(y) & RanksHigher(x,y)) -> -SufficiencyReverse(x))", "all x y.((Team(x) & Team(y) & ranksHigher(x,y)) -> -SufficiencyReverse(x))", "all x y.((Team(x) & Team(y) & RankingHigher(x,y)) -> -SufficiencyReverse(x,y))"]}
{"id": "folio_train_62", "nl": "Real Madrid and Barcelona are both La Liga soccer teams.", "fol": "(IsLaLigaTeam(RealMadrid) & IsLaLigaTeam(Barcelona))", "prediction": ["(La LigaSoccerTeam(RealMadrid) & La LigaSoccerTeam(Barcelona))", "(La Liga(RealMadrid) & La Liga(Barcelona))", "(La LigaSoccer(RealMadrid) & La LigaSoccer(Barcelona))", "(La Liga SoccerTeam(RealMadrid) & La LigaSoccerTeam(Barcelona))", "all x.((RealMadrid(x) & Barcelona(x)) -> LaLigaSoccerTeam(x))", "((RealMadrid(Real) & Barcelona(Barcelona)) -> LaLigaSoccerTeam(RealMadrid(RealMadrid) & LaLigaSoccerTeam(Barcelona))", "(LaLigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona))", "(La LigaSoccerTeam(RealMadrid) & LaLigaSoccerTeam(Barcelona))", "((RealMadrid(Real) & Barcelona(Barcelona)) -> LaLigaSoccerTeam(RealMadrid(RealMadrid) & LaLigaSoccerTeam(Barcelona)))", "(La LigaSoccerTeam(realMadrid) & La LigaSoccerTeam(Barcelona))", "(LaLiga(RealMadrid) & LaLiga(Barcelona))", "all x.((RealMadrid(x) & Barcelona(x)) -> La LigaSoccerTeam(x))", "((RealMadrid(Real) & Barcelona(Barcelona)) -> LaLigaSoccerTeam(RealMadrid(RealMadrid) & Barcelona(Barcelona))", "all x.((RealMadrid(x) | Barcelona(x)) -> LaLigaSoccerTeam(x))", "(LaLigaSoccer(RealMadrid) & LaLigaSoccer(Barcelona))", "((RealMadrid(Real) & Barcelona(Barcelona)) -> LaLigaSoccerTeam(RealMadrid(RealMadrid) & BarcelonaSoccerTeam(Barcelona))"]}
{"id": "folio_train_63", "nl": "In La Liga 2021-2022, Real Madrid recieves 86 points and Barcelon recieves 73 points.", "fol": "HasMorePointsThan(RealMadrid,Barcelona)", "prediction": ["(all x.(LaLiga(x) -> RealMadrid(x)) & (Barcelon(x) -> Barcelon(x)))", "all x y.((LaLiga(x) & RealMadrid(y) & Barcelon(y)) -> (Receives86Points(y,x) & Receives73Points(y,x)))", "(all x.(LaLiga(x) -> Receives86Points(x)) & (Barcelon(x) -> Receives73Points(x)))", "(all x y.((LaLiga(x) & RealMadrid(y)) -> Receives86Points(y,x)) & ((Barcelon(y) & Receives73Points(y,x)) -> Receives73Points(y,x)))", "all x y.((LaLiga(x) & RealMadrid(y) & Barcelon(z)) -> (Receives86Points(y,x) & Receives73Points(z,x)))", "all x y.((LaLiga(x) & RealMadrid(y) & Barcelon(y)) -> (Receives86Points(y,x) | Receives73Points(y,x)))", "(all x.(LaLiga(x) -> Receives86Points(x)) & all y.(Barcelon(y) -> Receives73Points(y)))", "(all x y.((LaLiga(x) & RealMadrid(y)) -> Receives(y,86)) & ((Barcelon(y) & Receives(y,73)) -> Receives(y,73)))", "(all x y.((LaLiga(x) & RealMadrid(y)) -> ReceivesPoints(y,86)) & ((Barcelon(y) & ReceivesPoints(y,73)) -> ReceivesPoints(y,73)))", "(all x.(LaLiga(x) -> RealMadrid(x)) & all y.(Barcelon(y) -> Barcelon(y)))", "all x y.((LaLiga(x) & RealMadrid(y) & Barcelon(z)) -> (Receives86Points(y,x) | Receives73Points(z,x)))", "all x y.((La Liga(x) & RealMadrid(y) & Barcelon(y)) -> (Receives86Points(y,x) & Receives73Points(y,x)))", "(all x y.((LaLiga(x) & RealMadrid(y)) -> Receives(y,86)) & ((Barcelon(y) & Receives(y,73)) -> Receives(y,73)))", "(all x.(LaLiga(x) -> Receives(x,86)) & (Barcelon(x) -> Receives(x,73)))", "(all x.(LaLiga(x) -> 86Points(x)) & (Barcelon(x) -> 73Points(x)))", "all x y.((LaLiga(x) & RealMadrid(y) & Barcelon(y)) -> (Receives86Points(y) & Receives73Points(y)))"]}
{"id": "folio_train_64", "nl": "In La Liga 2021-2022, Real Madrid and Barcelona both recieve 3 points from the games between them.", "fol": "(-PointsInGameBetween(RealMadrid,Barcelona) & -PointsInGameBetween(Barcelona,RealMadrid))", "prediction": ["all x y.((LaLiga(x) & RealMadrid(y) & Barcelona(y)) -> Receives3Points(y,x))", "all x y.((LaLiga(x) & RealMadrid(y) & Barcelona(y)) -> ReceivesThreePoints(y,x))", "all x y.((La Liga(x) & RealMadrid(y) & Barcelona(y)) -> Receives3Points(y,x))", "all x y.((LaLiga(x) & RealMadrid(y) & Barcelona(y)) -> Receives3Points(y,x))", "all x y z.((LaLiga(x) & RealMadrid(y) & Barcelona(z)) -> (Receives3Points(y,z) & BetweenGames(z,x)))", "all x y.((LaLiga(x) & RealMadrid(y) & Barcelona(y)) -> (Receives3Points(y,x) | Receives3Points(y,x)))", "all x y.((LaLiga(x) & RealMadrid(y) & Barcelona(z)) -> Receives3Points(y,x))", "all x y z.((LaLiga(x) & RealMadrid(y) & Barcelona(z)) -> (Receives3Points(y,x) | Receives3Points(z,x)))", "all x y.((LaLiga(x) & RealMadrid(y) & Barcelona(y)) -> ReceivesPoints(y,x))", "all x y z.((LaLiga(x) & RealMadrid(y) & Barcelona(z)) -> (Receives3Points(y,x) & BetweenGames(z,x)))", "all x y.((LaLiga(x) & RealMadrid(y) & Barcelona(y)) -> ReceivesPointsFromGames(y,x))", "all x y.((LaLiga(x) & RealMadrid(y) & Barcelona(y)) -> ReceivesPoints(x,y))", "all x y z.((LaLiga(x) & RealMadrid(y) & Barcelona(z)) -> Receives3Points(y,z))", "all x y z.((LaLiga(x) & RealMadrid(y) & Barcelona(z)) -> (Receives3Points(y,x) & InLaLiga(y,x)))", "all x y.((LaLiga(x) & RealMadrid(y) & Barcelona(y)) -> ReceivesPointsFromGames(x,y))", "all x y.((LaLiga(x) & RealMadrid(y) & Barcelona(y)) -> (Receives3Points(y,x) & InLaLiga(y,x)))"]}
{"id": "folio_train_65", "nl": "In La Liga 2021-2022, Real Madrid ranks higher than Barcelona.", "fol": "RanksHigherThan(RealMadrid,Barcelona)", "prediction": ["(RanksHigherInLaLiga(RealMadrid,LaLiga) & HigherInLaLiga(RealMadrid,LaLiga))", "(RanksHigherInLaLiga(RealMadrid,LaLiga) & LowerInLaLiga(RealMadrid,LaLiga))", "(RanksHigherInLaLiga(RealMadrid,LaLiga2021) & HigherInLaLiga(RealMadrid,LaLiga2022))", "all x y.((LaLiga(x) & RealMadrid(y)) -> (RanksHigherInLaLiga(y,x) & HigherInLaLiga(y,x)))", "(RanksHigherInLaLiga(RealMadrid,LaLiga) & HigherInLaLiga(RealMadrid,LaLiga) & HigherInLaLiga(RealMadrid,LaLiga))", "(RanksHigherInLaLiga(RealMadrid,LaLiga(RealMadrid,LaLiga) & HigherInLaLiga(RealMadrid,LaLiga))", "All x y.((LaLiga(x) & RealMadrid(y)) -> (RanksHigherInLaLiga(y,x) & HigherInLaLiga(y,x)))", "all x y.((LaLiga(x) & RealMadrid(y)) -> (RanksHigherInLaLiga(y,x) & LowerInLaLiga(y,x)))", "(RanksHigherInLaLiga(RealMadrid) & HigherInLaLiga(RealMadrid))", "(RanksHigherInLa Liga(RealMadrid,LaLiga) & HigherInLaLiga(RealMadrid,LaLiga))", "all x y.((LaLiga(x) & RealMadrid(y)) -> (RanksHigher(y,x) & Barcelona(y)))", "(RanksHigher(RealMadrid,LaLiga) & Higher(RealMadrid,LaLiga))", "all x y.((LaLiga(x) & RealMadrid(y) & Barcelona(y)) -> HigherRank(y,x))", "All x y.((LaLiga(x) & RealMadrid(y)) -> (RanksHigherInLaLiga(y,x) & LowerInLaLiga(y,x)))", "all x y.((LaLiga(x) & RealMadrid(y)) -> (RanksHigher(y,x) & InLaLiga(y,x)))", "all x y.((LaLiga(x) & RealMadrid(y)) -> (RanksHigher(y,x) & Higher(y,x)))"]}
{"id": "folio_train_66", "nl": "In La Liga 2021-2022, Barcelona ranks higher than Real Madrid.", "fol": "RanksHigherThan(Barcelona,RealMadrid)", "prediction": ["all x y.((LaLiga(x) & RealMadrid(y)) -> HigherRank(x,y))", "all x y.((LaLiga(x) & RealMadrid(y)) -> (RanksHigher(x,y) & InLaLiga(x,y)))", "all x y.((LaLiga(x) & RealMadrid(y)) -> (RanksHigherInLaLiga(x,y) & HigherInLaLiga(x,y)))", "all x y.((LaLiga(x) & RealMadrid(y)) -> HigherRankInLaLiga(x,y))", "All x y.((LaLiga(x) & RealMadrid(y)) -> HigherRank(x,y))", "(RanksHigherInLaLiga(Barcelona,LaLiga) & HigherInLaLiga(Barcelona,LaLiga))", "all x y.((LaLiga(x) & RealMadrid(y)) -> (RanksHigher(x,y) & InLaLiga(x,z)))", "all x y.((La Liga(x) & RealMadrid(y)) -> HigherRank(x,y))", "(RanksHigher(Barcelona,LaLiga) & Higher(Barcelona,RealMadrid))", "all x y.((LaLiga(x) & RealMadrid(y)) -> (RanksHigherInLaLiga(x,y) & LowerInLaLiga(x,y)))", "All x y.((LaLiga(x) & RealMadrid(y)) -> (RanksHigher(x,y) & InLaLiga(x,y)))", "all x y.((LaLiga(x) & RealMadrid(y)) -> (RanksHigher(x,y) | RanksHigher(x,y)))", "all x y.((LaLiga(x) & LaLiga(y) & RealMadrid(y)) -> HigherRank(x,y))", "all x y.((La Liga(x) & RealMadrid(y)) -> (RanksHigher(x,y) & InLa Liga(x,y)))", "(RanksHigherInLaLiga(Barcelona,LaLiga) & HigherInLaLiga(Barcelona,LaLiga) & HigherInLaLiga(Barcelona,LaLiga))", "all x y.((LaLiga(x) & RealMadrid(y)) -> (RanksHigherInLaLiga(x,y) & HigherInLaLiga(y,x)))"]}
{"id": "folio_train_67", "nl": "Lawton Park is a neighbourhood in Seattle. ", "fol": "IsNeighbourhoodOf(LawtonPark,Seattle)", "prediction": ["(Neighborhood(LawtonPark) & InSeattle(LawtonPark))", "all x.(LawtonPark(x) -> NeighborhoodInSeattle(x))", "(Neighborhood(LawtonPark) & LocatedInSeattle(LawtonPark))", "(Neighborhood(LawtonPark) & Seattle(LawtonPark))", "(Neighborhood(LawtonPark,Seattle) & LocatedIn(LawtonPark,Seattle))", "(Neighbourhood(LawtonPark) & InSeattle(LawtonPark))", "(NeighborhoodInSeattle(LawtonPark) & LocatedIn(LawtonPark,Seattle))", "all x.(LawtonPark(x) -> NeighborhoodInSeattle(x))", "(NeighborhoodInSeattle(LawtonPark) & LocatedIn(LawtonPark))", "(Neighborhood(LawtonPark) & inSeattle(LawtonPark))", "All x.(LawtonPark(x) -> NeighborhoodInSeattle(x))", "(NeighborhoodInSeattle(LawtonPark) & InSeattle(LawtonPark))", "LawtonPark is a neighbourhood in Seattle.", "(Neighborhood(LawtonPark) & InSeattle(LawtonPark,Seattle))", "(NeighborhoodInSeattle(LawtonPark) & LocatedInSeattle(LawtonPark))", "(Neighborhood(LawtonPark) & LocatedInSeattle(LawtonPark,Seattle))"]}
{"id": "folio_train_68", "nl": "All citizens of Lawton Park use the zip code 98199. ", "fol": "all x.(IsCitizenOf(x,LawtonPark) -> UsesZipCode(x,Number98199))", "prediction": ["all x.(Citizen(x) -> UsesZipCode(x,98199))", "all x.((Citizen(x) & LawtonPark(x)) -> UsesZipCode(x,98199))", "all x.((Citizen(x) & LawtonPark(x)) -> UsesZipCode98199(x))", "all x.(CitizenOfLawtonPark(x) -> UsesZipCode(x,98199))", "all x.(Citizen(x) -> UsesZIPCode(x,98199))", "all x.(CitizenOfLawtonPark(x) -> UsesZipCode98199(x))", "all x y.((Citizen(x) & LawtonPark(y)) -> UsesZipCode(x,y))", "all x.((Citizen(x) & LawtonPark(x)) -> UsesZIPCode98199(x))", "all x y.((Citizen(x) & City(y) & LawtonPark(y)) -> UsesZipCode(x,y))", "all x.((Citizen(x) & LawtonPark(x)) -> UsesZIPCode(x,98199))", "all x y.((Citizen(x) & Citizen(y) & LawtonPark(y)) -> UsesZipCode(x,y))", "all x.((Citizen(x) & CityOfLawtonPark(x)) -> UsesZipCode(x,98199))", "all x.(Citizen(x) & LawtonPark(x) -> UsesZipCode(x,98199))", "all x.(Citizen(x) -> (UsesZipCode(x,98199)))", "all x.(Citizen(x) & LawtonParkCitizen(x) -> UsesZipCode(x,98199))", "all x.((Citizen(x) & CityOfLawtonPark(x)) -> UsesZipCode98199(x))"]}
{"id": "folio_train_69", "nl": "Tom is a citizen of Lawton Park.", "fol": "IsCitizenOf(Tom,LawtonPark)", "prediction": ["all x.((Tom(x) & CitizenOfLawtonPark(x)) -> CitizenOfLawtonPark(x))", "(CitizenOfLawtonPark(Tom) | CitizenOfLawtonPark(Tom)))", "all x.((Tom(x) & CitizenOfLawtonPark(x)) -> CitizensOfLawtonPark(x))", "(CitizenOfLawtonPark(Tom) & CitizenOfLawtonPark(Tom))", "(Citizen(Tom) & CitizenOfLawtonPark(Tom))", "(CitizenOfLawtonPark(Tom))", "(Citizen(Tom) & CitizensOfLawtonPark(Tom))", "all x.((Tom(x) & CitizensOfLawtonPark(x)) -> CitizenOfLawtonPark(x))", "(CitizenOfLawtonPark(Tom) & CitizensOfLawtonPark(Tom))", "(Citizen(Tom,LawtonPark) & CitizenOf(Tom,LawtonPark))", "all x.(Tom(x) -> CitizenOfLawtonPark(x))", "all x.((Tom(x) & CitizenOfLawtonPark(x)) -> CitizenOfLawtonPark(x))", "(CitizenOfLawtonPark(Tom) -> CitizenOfLawtonPark(Tom))", "all x.((Tom(x) & CitizenOfLawtonPark(x)) -> CitizenOf(x,LawtonPark))", "all x.((Tom(x) & CitizensOfLawtonPark(x)) -> CitizensOfLawtonPark(x))", "(Citizen(Tom,LawtonPark) & Citizen(Tom,LawtonPark))"]}
{"id": "folio_train_70", "nl": "Daniel uses the zip code 98199. ", "fol": "UsesZipCode(Daniel,Number98199)", "prediction": ["all x.((Daniel(x) & ZipCode(x,98199)) -> Uses(x,98199))", "all x y.((Daniel(x) & ZipCode(y)) -> Uses(x,y))", "all x.((Dan(x) & ZipCode(x,98199)) -> Uses(x,98199))", "all x y.((Daniel(x) & ZipCode(y) & 98199(y)) -> Uses(x,y))", "all x.(Daniel(x) -> UsesZipCode(x,98199))", "(UsesZIPCode(Daniel,98199))", "all x y.((Daniel(x) & ZipCode(y) & 98199(x)) -> Uses(x,y))", "all x y.((Daniel(x) & ZipCode(y) & 98199(z)) -> Uses(x,y,z))", "all x y.((Daniel(x) & ZipCode(y) & 98199(z)) -> Uses(x,y))", "(UsesZipCode(Daniel) & ZipCode(Daniel,98199))", "(UsesZIPCode(Daniel) & ZipCode(Daniel,98199))", "all x.((Daniel(x) & ZipCode(x,98199)) -> Uses(x,Daniel))", "(UsesZipCode(Daniel,98199))", "all x.(Daniel(x) -> UsesZIPCode(x,98199))", "all x.((Daniel(x) & ZipCode98199(x)) -> Uses(x,Daniel))", "(UsesZipCode(Daniel) & ZipCode(Daniel) & 98199(Daniel))"]}
{"id": "folio_train_71", "nl": "Tom uses the zip code 98199.", "fol": "UsesZipCode(Tom,Number98199)", "prediction": ["all x.((Tom(x) & ZipCode(x,98199)) -> Uses(x,98199))", "all x y.((Tom(x) & ZipCode(y)) -> Uses(x,y))", "all x.(Tom(x) -> UsesZipCode(x,98199))", "all x y.((Tom(x) & ZipCode(y) & 98199(y)) -> Uses(x,y))", "all x.((Tom(x) & ZipCode98199(x)) -> Uses(x,y))", "all x y.((Tom(x) & ZipCode(y) & 98199(x)) -> Uses(x,y))", "all x.((Tom(x) & ZipCode98199(x)) -> Uses(x,98199))", "all x.((Tom(x) & ZipCode98199(x)) -> Uses(x,Tom))", "all x.((Tom(x) & ZipCode98199(x)) -> Uses(x))", "all x y.((Tom(x) & ZipCode(y,98199)) -> Uses(x,y))", "all x.(Tom(x) -> UsesZIPCode(x,98199))", "(UsesZipCode(Tom) & ZipCode(Tom,98199))", "all x.((Tom(x) & ZipCode98199(x)) -> Uses(x,tom))", "all x y.((Tom(x) & ZipCode(y,x)) -> Uses(x,y))", "all x.((Tom(x) & ZipCode(x,98199)) -> Uses(x,1998))", "all x.(Tom(x) -> ZipCode(x,98199))"]}
{"id": "folio_train_72", "nl": "Tom doesn't use the zip code 98199.", "fol": "-UsesZipCode(Tom,Number98199)", "prediction": ["all x.((Tom(x) & -UsesZipCode(x,98199)) -> -UsesZipCode(x,98199))", "all x.((Tom(x) & ZipCode(x,98199)) -> -Uses(x,98199))", "all x.((Tom(x) & -ZipCode(x,98199)) -> -UsesZipCode(x,98199))", "all x.((Tom(x) & -ZipCode98199(x)) -> -UsesZipCode98199(x))", "all x.((Tom(x) & -UsesZipCode98199(x)) -> -UsesZipCode98199(x))", "all x.((Tom(x) & -UsesZIPCode(x,98199)) -> -UsesZIPCode(x,98199))", "all x.((Tom(x) & -ZIPCode98199(x)) -> -UsesZIPCode98199(x))", "(-UsesZipCode(Tom,98199))", "all x.((Tom(x) & -ZipCode(x,98199)) -> -Uses(x,98199))", "all x.((Tom(x) & -ZipCode(x,98199)) -> -UsesZIPCode(x,98199))", "all x.((Tom(x) & -ZipCode(x,98199)) -> -ZipCode(x,98199))", "all x.((Tom(x) & -ZipCode98199(x)) -> -ZipCode98199(x))", "all x.((Tom(x) & -ZipCode98199(x)) -> -UsesZIPCode98199(x))", "all x.((Tom(x) & -UsesZipCode(x,98199)) -> -UsesZipCode(x,98198))", "exists x.(Tom(x) & -UsesZipCode(x,98199))", "all x.((Tom(x) & -UsesZipCode(x,98199)) -> -UsesZipCode(x,1998))"]}
{"id": "folio_train_73", "nl": "Tom is a citizen of Washington.", "fol": "IsCitizenOf(Tom,Washington)", "prediction": ["(CitizenOfWashington(Tom) & CitizenOfWashington(Tom))", "(CitizenOfWashington(Tom) & CitizensOfWashington(Tom))", "(CitizenOfWashington(Tom) | CitizenOfWashington(Tom)))", "(CitizenOfWashington(Tom) & -CitizenOfWashington(Tom))", "all x.((Tom(x) & CitizenOfWashington(x)) -> CitizenOfWashington(x))", "all x.((Tom(x) & CitizensOfWashington(x)) -> CitizenOfWashington(x))", "(CitizenOfWashington(Tom) -> CitizenOfWashington(Tom))", "(CitizenOfWashington(Tom) & LivesIn(Tom,Washington))", "(CitizenOfWashington(Tom) & BornInWashington(Tom))", "all x.(Tom(x) -> CitizenOfWashington(x))", "all x.((Tom(x) & CitizenOfWashington(x)) -> CitizensOfWashington(x))", "all x.((Tom(x) & CitizenOfWashington(x)) -> CitizenOf(x,Washington))", "all x.((Tom(x) & CitizenOfWashington(x)) -> CitizenOfWashington(x))", "all x.((Tom(x) & CitizensOfWashington(x)) -> CitizenOf(x,Washington))", "all x.((Tom(x) & CitizensOfWashington(x)) -> CitizensOfWashington(x))", "(CitizenOfWashington(Tom) & CitizensOf(Tom,Washington))"]}
{"id": "folio_train_74", "nl": "Daniel is a citizen of Lawton Park.", "fol": "IsCitizenOf(Daniel,LawtonPark)", "prediction": ["all x.((Daniel(x) & CitizenOfLawtonPark(x)) -> CitizenOfLawtonPark(x))", "(Citizen(Daniel) & CitizenOfLawtonPark(Daniel))", "all x.((Daniel(x) & CitizenOfLawtonPark(x)) -> CitizensOfLawtonPark(x))", "(CitizenOfLawtonPark(Daniel)", "(Citizen(Daniel) & CitizensOfLawtonPark(Daniel))", "all x.((Daniel(x) & CitizensOfLawtonPark(x)) -> CitizenOfLawtonPark(x))", "(CitizenOfLawtonPark(Daniel) & CitizenOfLawtonPark(Daniel))", "all x.((Daniel(x) & CitizenOfLawtonPark(x)) -> CitizenOf(x,LawtonPark))", "all x.((Daniel(x) & CitizensOfLawtonPark(x)) -> CitizensOfLawtonPark(x))", "all x.((Daniel(x) & CitizenOfLawtonPark(x)) -> CitizensOf(x,LawtonPark))", "(Citizen(Daniel,LawtonPark) & CitizenOf(Daniel,LawtonPark))", "all x.((Daniel(x) & CitizenOfLawtonPark(x)) -> CitizenOfLawtonPark(x))", "(CitizenOfLawtonPark(Dan) & CitizenOfLawtonPark(Dan))", "(Citizen(Daniel) | CitizenOfLawtonPark(Daniel)))", "all x.(Daniel(x) -> CitizenOfLawtonPark(x))", "(Citizen(Daniel,LawtonPark) & Citizen(Daniel,LawtonPark))"]}
{"id": "folio_train_75", "nl": "If a legislator is found guilty of stealing government funds, they will be suspended from office.", "fol": "all x.((LegislatorStatus(x) & GuiltyOfStealingFunds(x)) -> SuspendedFromOffice(x))", "prediction": ["all x.((Lawmaker(x) & FoundCaughtOfStolenGovernmentFunds(x)) -> SuspendedFromOffice(x))", "all x.((Legislator(x) & FoundCaughtOfStolenGovernmentFunds(x)) -> SuspendedFromOffice(x))", "all x.((Lawmaker(x) & FoundCaughtOfStoppingGovernmentFunds(x)) -> SuspendedFromOffice(x))", "all x.((Leader(x) & FoundCaughtOfStolenGovernmentFunds(x)) -> SuspendedFromOffice(x))", "all x.((Lawmaker(x) & FoundCommittedOfStolenGovernmentFunds(x)) -> SuspendedFromOffice(x))", "all x.((Legislator(x) & FoundCaughtOfStoppingGovernmentFunds(x)) -> SuspendedFromOffice(x))", "all x.((Legislator(x) & FoundCommittedOfStolenGovernmentFunds(x)) -> SuspendedFromOffice(x))", "all x.((Lawmaker(x) & FoundCompulsibleOfStolenGovernmentFunds(x)) -> SuspendedFromOffice(x))", "all x.((Lawmaker(x) & FoundConviciousOfStolenGovernmentFunds(x)) -> SuspendedFromOffice(x))", "all x.((Legislator(x) & FoundCompulsibleOfStolenGovernmentFunds(x)) -> SuspendedFromOffice(x))", "all x.((Lawmaker(x) & FoundComedyOfStolenGovernmentFunds(x)) -> SuspendedFromOffice(x))", "all x.((Lawmaker(x) & FoundCaughtOfStolenGovFunds(x)) -> SuspendedFromOffice(x))", "all x.((Legislator(x) & FoundCriminalOfStolenGovernmentFunds(x)) -> SuspendedFromOffice(x))", "all x.((Lawmaker(x) & FoundCommittedOfStoppingGovernmentFunds(x)) -> SuspendedFromOffice(x))", "all x.((Legislator(x) & FoundComedyOfStolenGovernmentFunds(x)) -> SuspendedFromOffice(x))", "all x y.((Lawmaker(x) & FoundCaughtOfStolenGovernmentFunds(x)) -> SuspendedFromOffice(x))"]}
{"id": "folio_train_76", "nl": "Tiffany T. Alston was a legislator in Maryland's House of Delegates from 2011 to 2013.", "fol": "LegislatorStatus(TiffanyTAlston)", "prediction": ["all x y z.((TiffanyT.Alston(x) & HouseOfDelegates(y) & HouseOfDelegates(z)) -> Legislator(x,y,z))", "all x y z.((TiffanyT.Alston(x) & MarylandHouseOfDelegates(y) & HouseOfDelegates(z)) -> Legislator(x,y,z))", "all x y.((TiffanyT.Alston(x) & HouseOfDelegates(y)) -> Legislator(x,y))", "all x y z.((TiffanyT.Alston(x) & HouseOfDelegates(y) & HouseOfDelegates(z)) -> LegislatorIn(x,y,z))", "all x y z.((TiffanyT.Alston(x) & HouseOfDelegates(y) & HouseOfDelegates(z) & 2011-2013) -> Legislator(x,y,z))", "all x y z.((TiffanyT.Alston(x) & HouseOfDelegates(y) & HouseOfDelegates(z)) -> LegislatorInDelegates(x,y,z))", "all x y z.((TiffanyT.Alston(x) & MarylandHouseOfDelegates(y) & HouseOfDelegates(z)) -> LegislatorFrom2011To2013(x,y,z))", "all x y.((TiffanyT.Alston(x) & MarylandHouseOfDelegates(y)) -> Legislator(x,y))", "all x y z.((TiffanyT.Alston(x) & MarylandHouseOfDelegates(y) & HouseOfDelegates(z) & 2011-2013) -> Legislator(x,y,z))", "all x y.((TiffanyT.Alston(x) & HouseOfDelegates(y)) -> LegislatorIn(x,y))", "all x y z.((TiffanyT.Alston(x) & HouseOfDelegates(y) & HouseOfDelegates(z) & 2011-2013) -> LegislatorIn(x,y,z))", "all x y z.((TiffanyT.Alston(x) & HouseOfDelegates(y) & HouseOfDelegates(z) & 2011-2013)) -> Legislator(x,y,z))", "all x y z.((TiffanyT.Alston(x) & HouseOfDelegates(y) & HouseOfDelegates(z)) -> Legislative(x,y,z))", "all x y z.((TiffanyT.Alston(x) & HouseOfDelegates(y) & HouseOfDelegates(z)) -> LegislatorInMaryland(x,y,z))", "all x y.((TiffanyT.Alston(x) & MarylandHouseOfDelegates(y)) -> LegislatorFrom2011To2013(x,y))", "all x y z.((TiffanyT.Alston(x) & HouseOfDelegates(y) & HouseOfDelegates(z)) -> Legislator(x,y))"]}
{"id": "folio_train_77", "nl": "Tiffany T. Alston was found guilty of stealing government funds in 2012.", "fol": "GuiltyOfStealingFunds(TiffanyTAlston)", "prediction": ["all x y.((TiffanyT.Alston(x) & GovernmentFunds(y)) -> Stolen(x,y))", "all x.((TiffanyT.Alston(x) & FoundCriminalOfStolenGovernmentFunds(x)) -> FoundCriminalOfStolenGovernmentFunds(x))", "(StolenByTiffanyT.Alston(TiffanyT.Alston) & GovernmentFunds(TiffanyT.Alston))", "all x y z.((TiffanyT.Alston(x) & GovernmentFunds(y) & 2012(z)) -> Stolen(x,y,z))", "all x y.((TiffanyT.Alston(x) & GovernmentFunds(y)) -> FoundStolen(x,y))", "all x y.((TiffanyT.Alston(x) & GovernmentFunds(y)) -> FoundCommittedOfStolen(x,y))", "all x y.((TiffanyT.Alston(x) & GovernmentFunds(y)) -> FoundCaughtStolen(x,y))", "all x.((TiffanyT.Alston(x) & FoundCaughtOfStolenGovernmentFunds(x)) -> FoundCaughtOfStolenGovernmentFunds(x))", "all x y z.((TiffanyT.Alston(x) & GovernmentFunds(y) & 2012(z)) -> FoundCommittedOfStolen(x,y,z))", "all x y z.((TiffanyT.Alston(x) & GovernmentFunds(y) & 2012(z)) -> FoundStolen(x,y,z))", "Tiffany T. Alston was found guilty of stealinggovernmentFunds(TiffanyT.Alston,2012)", "all x y z.((TiffanyT.Alston(x) & GovernmentFunds(y) & 2012(z)) -> FoundCaughtOfStolen(x,y,z))", "all x y z.((TiffanyT.Alston(x) & GovernmentFunds(y) & 2012(z)) -> FoundCaughtStolen(x,y,z))", "all x.((TiffanyT.Alston(x) & FoundCriminalOfStolenGovernmentFunds(x)) -> FoundCriminalOfStolenGovernmentFundsIn2012(x))", "all x.((TiffanyT.Alston(x) & FelonyOfStolenGovernmentFunds(x)) -> FoundCommittedOfStolenGovernmentFunds(x))", "all x y.((T TiffanyT.Alston(x) & GovernmentFunds(y)) -> Stolen(x,y))"]}
{"id": "folio_train_78", "nl": "Tiffany T. Alston was suspended from the Maryland House of Delegates.", "fol": "SuspendedFromOffice(TiffanyTAlston)", "prediction": ["all x y.((TiffanyT.Alston(x) & MarylandHouseOfDelegates(y)) -> Suspended(x,y))", "all x.((TiffanyT.Alston(x) & MarylandHouseOfDelegates(x)) -> Suspended(x))", "All x y.((TiffanyT.Alston(x) & MarylandHouseOfDelegates(y)) -> Suspended(x,y))", "All x.((TiffanyT.Alston(x) & MarylandHouseOfDelegates(x)) -> Suspended(x))", "all x y.((TiffanyT.Alston(x) & MarylandHouseOfDelegates(y)) -> SuspendedFrom(x,y))", "All x y.((TiffanyT.Alston(x) & MarylandHouseOfDelegates(y)) -> SuspendedFrom(x,y))", "Tiffany T. Alston was suspended from Maryland HouseOfDelegates.", "All x.(TiffanyT.Alston(x) -> SuspendedFromMdHouseOfDelegates(x))", "all x.((TiffanyT.Alston(x) & MarylandHouseOfDelegates(x)) -> SuspendedFrom(x,y))", "All x.(TiffanyT.Alston(x) -> SuspendedFromMarylandHouseOfDelegates(x))", "All x.((TiffanyT.Alston(x) & MarylandHouseOfDelegates(x)) -> SuspendedFrom(x,y))", "all x.((TiffanyT.Alston(x) & MarylandHouseOfDelegates(x)) -> Suspended(x,y))", "All x.((TiffanyT.Alston(x) & MarylandHouseOfDelegates(x)) -> Suspended(x,y))", "All x y.((TiffanyT.Alston(x) & HouseOfDelegates(y)) -> SuspendedFrom(x,y))", "(SuspendedFromMdHouseOfDelegates(TiffanyT.Alston))", "all x.((TiffanyT.Alston(x) & MarylandHouseOfDelegates(y)) -> Suspended(x,y))"]}
{"id": "folio_train_79", "nl": "Tiffany T. Alston was not suspended from the Maryland House of Delegates.", "fol": "-SuspendedFromOffice(TiffanyTAlston)", "prediction": ["all x.((TiffanyT.Alston(x) & MarylandHouseOfDelegates(x)) -> -Suspended(x))", "All x.((TiffanyT.Alston(x) & MarylandHouseOfDelegates(x)) -> -Suspended(x))", "all x.((TiffanyT.Alston(x) & MarylandHouseOfDelegates(x)) -> -SuspendedFrom(x,y))", "All x.(TiffanyT.Alston(x) -> -SuspendedFromMarylandHouseOfDelegates(x))", "All x.(TiffanyT.Alston(x) -> -SuspendedFromMdHouseOfDelegates(x))", "(-SuspendedFromMdHouseOfDelegates(TiffanyT.Alston))", "All x.((TiffanyT.Alston(x) & MarylandHouseOfDelegates(x)) -> -SuspendedFrom(x,y))", "(-SuspendedFromMarylandHouseOfDelegates(TiffanyT.Alston))", "Tiffany T. Alston was not suspended from Maryland HouseOfDelegates.", "all x.((TiffanyT.Alston(x) & MarylandHouseOfDelegates(x)) -> -Suspended(x,y))", "all x.((TiffanyT.Alston(x) & MarylandDelegates(x)) -> -Suspended(x))", "all x.(TiffanyT.Alston(x) -> -SuspendedFromMarylandHouseOfDelegates(x))", "All x.((TiffanyT.Alston(x) & HouseOfDelegates(x,Maryland)) -> -Suspended(x,Maryland))", "All x.(TiffanyT.Alston(x) -> -SuspendedFromDelegates(x))", "All x.((TiffanyT.Alston(x) & HouseOfDelegates(x)) -> -Suspended(x))", "All x.(TiffanyT.Alston(x) -> -SuspendedFromDelegates(x,Maryland))"]}
{"id": "folio_train_80", "nl": "Tiffany T. Alston went to prison for stealing government funds.", "fol": "WentToPrison(TiffanyTAlston)", "prediction": ["all x y.((TiffanyT.Alston(x) & Prison(y)) -> StolenGovernmentFunds(x,y))", "all x y.((TiffanyT.Alston(x) & Prison(y)) -> StoleGovernmentFunds(x,y))", "all x.((TiffanyT.Alston(x) & StolenGovernmentFunds(x)) -> GoesToPenitentiary(x))", "all x y z.((TiffanyT.Alston(x) & Prison(y) & GovernmentFunds(z)) -> Stolen(x,y,z))", "all x.((TiffanyT.Alston(x) & StealingGovernmentFunds(x)) -> GoesToPenitentiary(x))", "all x.((TiffanyT.Alston(x) & StolenGovernmentFunds(x)) -> Prison(x))", "all x y.((TiffanyT.Alston(x) & Prison(y)) -> StealedGovernmentFunds(x,y))", "all x y z.((TiffanyT.Alston(x) & Prison(y) & GovernmentFunds(z)) -> Stole(x,y,z))", "all x y.((TiffanyT.Alston(x) & Prison(y)) -> StealingGovernmentFunds(x,y))", "all x.(TiffanyT.Alston(x) -> StolenGovernmentFunds(x))", "all x y.((T TiffanyT.Alston(x) & Prison(y)) -> StolenGovernmentFunds(x,y))", "all x.(TiffanyT.Alston(x) -> (StoleGovernmentFunds(x) & GoesToPenitentiary(x)))", "all x.((TiffanyT.Alston(x) & StolenGovernmentFunds(x)) -> GoesToPententiary(x))", "all x.((TiffanyT.Alston(x) & StealingGovernmentFunds(x)) -> Prison(x))", "all x.((TiffanyT.Alston(x) & StealingGovernmentFunds(x)) -> GoesToPententiary(x))", "all x.((TiffanyT.Alston(x) & GovernmentFunds(x)) -> GoesToPenitentiary(x))"]}
{"id": "folio_train_81", "nl": "Some fish may sting.", "fol": "exists x y.(IsFish(x) -> Sting(x,y))", "prediction": ["exists x.(Fish(x) & Sting(x))", "exists x.(Fish(x) & MaySting(x))", "exists x.(Fish(x) & Stings(x))", "exists x.(Fish(x) & (Sting(x) | Sting(x)))", "exists x.(Fish(x) & CanSting(x))", "exists x.(Fish(x) & PossiblySting(x))", "exists x.(Fish(x) & (Stings(x) | Stings(x)))", "exists x.(Fish(x) & Fish(x) & Sting(x))", "exists x.(Fish(x) & -Sting(x))", "exists x.(Fish(x) & (Sting(x) | Sting(x)))", "exists x.(Fish(x) & (Sting(x) | Sting(x))))", "exists x.(Fish(x) & MightSting(x))", "exists x.(Fish(x) & (Sting(x) | -Sting(x)))", "exists x.(Fish(x) & Fish(y) & Sting(x))", "exists x.(Fish(x) & MayStung(x))", "exists x.(Fish(x) & Fish(x) & Stings(x))"]}
{"id": "folio_train_82", "nl": "Stonefish is a fish.", "fol": "IsFish(Stonefish)", "prediction": ["all x.(Stonefish(x) -> Fish(x))", "all x.(Stonefish(x) -> Fish(x))", "all x y.((Stonefish(x) & Fish(y)) -> Fish(x))", "all x.((Stonefish(x) & Fish(x)) -> Fish(x))", "All x.(Stonefish(x) -> Fish(x))", "all x y.((Stonefish(x) & Fish(y)) -> Fish(x,y))", "all x y.((Stonefish(x) & Fish(y)) -> (Fish(x) & Fish(y)))", "exists x.(Stonefish(x) & Fish(x))", "(Fish(stonefish) & Fish(stonefish))", "all x.(Stonefish(x) -> Fish(x))", "all x.(Steepfish(x) -> Fish(x))", "all x y.((Stonefish(x) & Fish(y)) -> (Fish(x) & Fish(x)))", "all x y.((Stonefish(x) & Fish(y)) -> Fish(x))", "all x y.((Stonefish(x) & Fish(y)) -> Is(x,y))", "all x.(Steelfish(x) -> Fish(x))", "all x y.((Stonefish(x) & Fish(x)) -> Fish(y))"]}
{"id": "folio_train_83", "nl": "It stings to step on a stonefish.", "fol": "all x.(StepOnFish(Stonefish,x) -> Sting(Stonefish,x))", "prediction": ["all x.(StepOnStonefish(x) -> Stings(x))", "all x y.((Stonefish(x) & Stonefish(y)) -> StingsOn(x,y))", "all x y.((Stonefish(x) & Stonefish(y)) -> StingsToStepOn(x,y))", "all x y.((Stonefish(x) & Stonefish(y)) -> Stings(x,y))", "all x y.((StepOnStonefish(x) & Stonefish(y)) -> Stings(x,y))", "all x y.((StepOnStonefish(x) & Stonefish(y)) -> Stings(x))", "all x y.((Stonefish(x) & Stonefish(y)) -> Stings(x))", "all x.(SteepOnStonefish(x) -> Stings(x))", "all x y z.((Stonefish(x) & Stonefish(y) & Stonefish(z)) -> StingsOn(x,y,z))", "all x y.((StepOn(x,y) & Stonefish(y)) -> Stings(x))", "all x y.((StepOn(x,y) & Stonefish(y)) -> Stings(x,y))", "all x y z.((Stonefish(x) & Stonefish(y) & Stonefish(z)) -> StingsToStepOn(x,y,z))", "all x y z.((Stonefish(x) & Stonefish(y) & Stonefish(z)) -> Stings(x,y,z))", "all x y.((StepOn(x) & Stonefish(y)) -> Stings(x,y))", "all x y.((Stonefish(x) & Stonefish(y) & StingsOn(x,y)) -> StingsOn(x,y))", "all x y.((Stonefish(x) & Stonefish(y) & StepOn(x,y)) -> Stings(x))"]}
{"id": "folio_train_84", "nl": "Stonefish stings cause death if not treated.", "fol": "all x.((Sting(Stonefish,x) & -IsTreated(x)) -> CausesDeath(x))", "prediction": ["all x.((Stonefish(x) & -Treated(x)) -> CausesDeath(x))", "all x.((Stonefish(x) & Stings(x) & -Treated(x)) -> CausesDeath(x))", "all x.((Stonefish(x) & -Treatment(x)) -> CausesDeath(x))", "all x.((Stonefish(x) & Sting(x) & -Treated(x)) -> CausesDeath(x))", "all x.((Stonefish(x) & Stings(x) & -Treatment(x)) -> CausesDeath(x))", "all x y.((Stonefish(x) & Sting(y) & -Treated(y)) -> CausesDeath(x,y))", "all x y.((Stonefish(x) & Sting(y) & -Treated(x)) -> CausesDeath(x,y))", "all x.((Stonefish(x) & Stings(x)) -> CausesDeath(x))", "all x.((Stonefish(x) & NotTreated(x)) -> CausesDeath(x))", "all x.((Stonefish(x) & Sting(x) & -Treatment(x)) -> CausesDeath(x))", "all x.(Stonefish(x) -> (CausesDeath(x) & -Treated(x)))", "all x y.((Stonefish(x) & Stings(y) & -Treated(x)) -> CausesDeath(x,y))", "all x y.((Stonefish(x) & Sting(y) & -Treated(x,y)) -> CausesDeath(x,y))", "all x.(Stonefish(x) -> CausesDeath(x))", "all x y.((Stonefish(x) & Sting(y) & -Treated(x,y)) -> CausesDeath(x))", "all x.((Stonefish(x) & -Treatable(x)) -> CausesDeath(x))"]}
{"id": "folio_train_85", "nl": "To treat stonefish stings, apply heat to the affected area or use an antivenom.", "fol": "all x.((Sting(Stonefish,x) & (ApplyHeatToArea(x) | UseAntivenom(x))) -> IsTreated(x))", "prediction": ["all x.(TreatStonefishStings(x) -> (AppliesHeatToAffectedArea(x) | UsesAtivenom(x)))", "all x.(TreatStonefishStings(x) -> (AppliesHeatToAffectedArea(x) | UsesAntivenom(x)))", "all x.((TreatStonefishStings(x) & (AppliesHeat(x) | UsesAntivenom(x))) -> TreatsStonefishStings(x))", "all x.((StonefishStings(x) & (AppliesHeat(x) | UsesAntivenom(x))) -> Treats(x,StonefishStings))", "all x.(TreatStonefishStings(x) -> (ApplyHeatToAffectedArea(x) | UseAntivenom(x)))", "all x.(TreatsStonefishStings(x) -> (AppliesHeatToAffectedArea(x) | UsesAtivenom(x)))", "all x.(TreatsStonefishStings(x) -> (AppliesHeatToAffectedArea(x) | UsesAntivenom(x)))", "all x.(TreatStonefishStings(x) -> (ApplyHeatToAffectedArea(x) | UseAtivenom(x)))", "all x.((StonefishStings(x) & (AppliesHeatToAffectedArea(x) | UsesAtivenom(x))) -> Treats(x,StonefishStings))", "all x.((TreatsStonefishStings(x)) -> (AppliesHeatToAffectedArea(x) | UsesAntivenom(x)))", "all x.((StonefishSting(x) & (AppliesHeat(x) | UsesAntivenom(x))) -> Treats(x,StonefishStings))", "all x.((StonefishStings(x) & (AppliesHeat(x) | UsesAntivenom(x))) -> Treats(x))", "all x.((TreatsStonefishStings(x)) -> (AppliesHeatToAffectedArea(x) | UsesAtivenom(x)))", "all x.((TreatStonefishStings(x) & (AppliesHeat(x) | UsesAntivenom(x))) -> TreatStonefishStings(x))", "all x.((StonefishStings(x) & (AppliesHeat(x) | UsesAtivenom(x))) -> Treats(x,StonefishStings))", "all x.(TreatStonefishStings(x) -> (AppliesHeat(x) | UsesAntivenom(x)))"]}
{"id": "folio_train_86", "nl": "If you step on a stonefish and don\u2019t use an antivenom, it will cause death.", "fol": "all x.((StepOnFish(Stonefish,x) & -UseAntivenom(x)) -> CausesDeath(x))", "prediction": ["all x.((StepOnStonefish(x) & -UsesAtivenom(x)) -> CausesDeath(x))", "all x.((StepOnStonefish(x) & -UsesAntivenom(x)) -> CausesDeath(x))", "all x.((StepOnStonefish(x) & -UseAtivenom(x)) -> CausesDeath(x))", "all x y.((StepOnStonefish(x) & Stonefish(y) & -UsesAtivenom(x)) -> CausesDeath(x,y))", "all x y.((StepOnStonefish(x) & Stonefish(y) & -UsesAntivenom(x)) -> CausesDeath(x,y))", "all x.((StepOnStonefish(x) & -UseAntivenom(x)) -> CausesDeath(x))", "all x y.((StepOnStonefish(x) & Stonefish(y) & -UsesAtivenom(x,y)) -> CausesDeath(x))", "all x y.((StepOnStonefish(x) & Stonefish(y) & -UsesAtivenom(x,y)) -> CausesDeath(x,y))", "all x y.((Stonefish(x) & Stonefish(y) & StepOn(x,y) & -UsesAtivenom(x)) -> CausesDeath(x))", "all x y.((StepOnStonefish(x) & Stonefish(y) & -UsesAtivenom(x)) -> CausesDeath(x))", "all x y.((StepOnStonefish(x) & Stonefish(y) & -UsesAntivenom(x,y)) -> CausesDeath(x))", "all x.((StepsOnStonefish(x) & -UsesAtivenom(x)) -> CausesDeath(x))", "all x y.((StepOnStonefish(x) & Stonefish(y) & -UsesAntivenom(x,y)) -> CausesDeath(x,y))", "all x.(StepOnStonefish(x) & -UsesAtivenom(x)) -> CausesDeath(x))", "all x y.((StepOnStonefish(x) & Stonefish(y) & -UsesAntivenom(x)) -> CausesDeath(x))", "all x.(StepOnStonefish(x) & -UsesAntivenom(x)) -> CausesDeath(x))"]}
{"id": "folio_train_87", "nl": "Stings of some fish can cause death if not treated.", "fol": "exists x y.((IsFish(x) & Sting(x,y) & -IsTreated(y)) -> CausesDeath(y))", "prediction": ["all x.((Fish(x) & -Treated(x)) -> CausesDeath(x))", "all x y.((Fish(x) & Sting(y) & -Treated(y)) -> CausesDeath(x,y))", "all x.((Fish(x) & Sting(x) & -Treated(x)) -> CausesDeath(x))", "all x.((Fish(x) & -Treatment(x)) -> CausesDeath(x))", "all x.((Fish(x) & Sting(x)) -> CausesDeath(x))", "all x.((Fish(x) & -Treated(x)) -> CanCauseDeath(x))", "all x y.((Fish(x) & Sting(y) & -Treated(y)) -> CanCauseDeath(x,y))", "all x.((Fish(x) & Sting(x)) -> CanCauseDeath(x))", "all x y.((Fish(x) & Sting(y)) -> CanCauseDeath(x,y))", "all x.((Fish(x) & StingsOf(x)) -> CausesDeath(x))", "all x.((Fish(x) & Sting(x) & -Treated(x)) -> CanCauseDeath(x))", "all x.((Fish(x) & StingsOf(x)) -> CanCauseDeath(x))", "all x.((Fish(x) & StingsOf(x,y)) -> CausesDeath(x))", "all x.((Fish(x) & StingsOf(x,y)) -> CanCauseDeath(x))", "all x y.((Fish(x) & Sting(y)) -> CausesDeath(x,y))", "all x.((Fish(x) & Stings(x)) -> CausesDeath(x))"]}
{"id": "folio_train_88", "nl": "If you step on a stonefish and apply heat to the affected area, stings will cause death.", "fol": "all x.((StepOnFish(Stonefish,x) & ApplyHeatToArea(x)) -> (Sting(Stonefish,x) -> CausesDeath(x)))", "prediction": ["all x.((StepOnStonefish(x) & ApplyHeatToAffectedArea(x)) -> StingsCauseDeath(x))", "all x y.((StepOnStonefish(x) & Stonefish(y) & ApplyHeatToAffectedArea(x,y)) -> CausesDeath(x,y))", "all x y.((StepOnStonefish(x) & Stonefish(y) & ApplyHeatToAffectedArea(x,y)) -> StingsCauseDeath(x))", "all x y.((StepOnStonefish(x) & Stonefish(y) & ApplyHeatToAffectedArea(x,y)) -> CausesDeath(x))", "all x y.((StepOnStonefish(x) & Stonefish(y) & AppliesHeatToAffectedArea(x,y)) -> CausesDeath(x,y))", "all x y.((StepOnStonefish(x) & Stonefish(y) & AppliesHeatToAffectedArea(x,y)) -> StingsCauseDeath(x))", "all x.(StepOnStonefishAndApplyHeatToAffectedArea(x) -> StingsCauseDeath(x))", "all x y.((StepOnStonefish(x) & Stonefish(y) & ApplyHeatToAffectedArea(x,y)) -> StingsCauseDeath(x,y))", "all x.((StepOnStonefish(x) & ApplyHeatToAffectedArea(x)) -> CausesDeath(x))", "all x y.((StepOnStonefish(x) & Stonefish(y) & ApplyHeat(x,y)) -> CausesDeath(x,y))", "all x y.((StepOnStonefish(x) & Stonefish(y) & AppliesHeatToAffectedArea(x,y)) -> CausesDeath(x))", "all x y.((StepOnStonefish(x) & Stonefish(y) & AppliesHeat(x,y)) -> CausesDeath(x,y))", "all x y.((StepOnStonefish(x) & Stonefish(y) & ApplyHeat(x,y)) -> CausesDeath(x))", "all x y.((StepOnStonefish(x) & Stonefish(y) & AppliesHeat(x,y)) -> CausesDeath(x))", "all x y.((StepOnStonefish(x) & Stonefish(y) & AppliesHeatToAffectedArea(x,y)) -> StingsCauseDeath(x,y))", "all x y.((Stonefish(x) & Stonefish(y) & StepOn(x,y) & ApplyHeatToAffectedArea(x)) -> StingsCauseDeath(x))"]}
{"id": "folio_train_89", "nl": "Some monitors produced by LG have a type-c port.", "fol": "exists x.(ProducedByLG(x) & HasTypeCPort(x))", "prediction": ["exists x.(Monitor(x) & ProducedByLG(x) & HasTypeCPort(x))", "exists x.(Monitor(x) & LGProduced(x) & HasTypeCPort(x))", "exists x.(Monitor(x) & LG(x) & HasTypeCPort(x))", "exists x.(Monitor(x) & ProducedByLG(x) & TypeCPort(x))", "exists x.(Monitor(x) & ProducedByLG(x)) -> HasTypeCPort(x))", "exists x.(Monitor(x) & LGProduced(x) & TypeCPort(x))", "exists x y.(Monitor(x) & LG(y) & ProducedBy(x,y)) -> HasTypeCPort(x))", "exists x y.((Monitor(x) & LG(y) & ProducedBy(x,y)) -> HasTypeCPort(x))", "exists x.(Monitor(x) & LGProduces(x) & HasTypeCPort(x))", "exists x y.(Monitor(x) & LG(y) & ProducedBy(x,y)) -> TypeCPort(x))", "exists x.(Monitor(x) & LG(x) & ProducedBy(x,y)) -> HasTypeCPort(x))", "exists x y.(Monitor(x) & LG(y) & ProducedBy(x,y) & HasTypeCPort(x))", "exists x.(Monitor(x) & LG(x) & TypeCPort(x))", "exists x.(Monitor(x) & ProducedByLG(x)) -> TypeCPort(x))", "exists x.(Monitor(x) & LG(y) & ProducedBy(x,y)) -> HasTypeCPort(x))", "exists x.(Monitor(x) & LGProduce(x) & HasTypeCPort(x))"]}
{"id": "folio_train_90", "nl": "If the monitor has a type-c port, then it is not produced by AOC.", "fol": "all x.(HasTypeCPort(x) -> -ProducedByAOC(x))", "prediction": ["all x.((Monitor(x) & TypeCPort(x)) -> -ProducedByAOC(x))", "all x.((Monitor(x) & HasTypeCPort(x)) -> -ProducedByAOC(x))", "all x.(TypeCPort(x) -> -ProducedByAOC(x))", "all x.(HasTypeCPort(x) -> -ProducedByAOC(x))", "all x.((Monitor(x) & TypeCPort(x)) -> -ProducedByAOC(x))", "all x y.((Monitor(x) & TypeCPort(x)) -> -ProducedByAOC(y))", "all x.((Monitor(x) & TypeCPort(x)) -> -ProducedByAO(x))", "all x y.((Monitor(x) & TypeCPort(x) & Has(x,y)) -> -ProducedByAOC(x))", "all x.((Monitor(x) & TypeCPort(x)) -> -AOCProduced(x))", "all x.((Monitor(x) & HasTypeCPort(x)) -> -ProducedByAOC(x))", "all x y.((Monitor(x) & TypeCPort(x)) -> -ProducedByAOC(x))", "all x.((Monitor(x) & TypeCPort(x)) -> -producedByAOC(x))", "all x.((Screen(x) & TypeCPort(x)) -> -ProducedByAOC(x))", "(all x.((Monitor(x) & TypeCPort(x)) -> -ProducedByAOC(x)))", "all x.((Monitor(x) & PortTypeC(x)) -> -ProducedByAOC(x))", "all x.((Monitor(x) & TypeCPort(x)) -> -ProduitByAOC(x))"]}
{"id": "folio_train_91", "nl": "All monitors in the library are produced by AOC. ", "fol": "all x.(InLibrary(x) -> ProducedByAOC(x))", "prediction": ["all x.(Monitor(x) -> ProducedByAOC(x))", "all x.((Monitor(x) & InLibrary(x)) -> ProducedByAOC(x))", "all x y.((Monitor(x) & Library(y)) -> ProducedByAOC(x,y))", "all x y.((Monitor(x) & Library(y)) -> ProducedBy(x,y))", "all x y z.((Monitor(x) & Library(y) & AOC(z)) -> ProducedBy(x,y,z))", "all x y.((Monitor(x) & Library(y)) -> ProducedByAOC(x))", "all x y.((Monitor(x) & Library(y) & ProducedBy(x,y)) -> ProducedBy(x,y))", "all x y.((Monitor(x) & Library(y) & ProducedByAOC(x,y)) -> ProducedByAOC(x,y))", "all x y.((Monitor(x) & Library(y) & ProducedByAOC(x,y)) -> ProducedByAOC(x))", "all x.(Monitor(x) -> (ProducedByAOC(x) & InLibrary(x)))", "all x y z.((Monitor(x) & Library(y) & Library(z)) -> ProducedBy(x,y,z))", "all x y.((Monitor(x) & Library(y) & ProducedByAOC(x,y)) -> ProducedBy(x,y))", "all x.((Monitor(x) & inLibrary(x)) -> ProducedByAOC(x))", "all x y z.((Monitor(x) & Library(y) & Library(z)) -> ProducedByAOC(x,y,z))", "all x y.((Monitor(x) & Library(y) & ProducedByAOC(x)) -> ProducedByAOC(x,y))", "all x.(MonitorInLibrary(x) -> ProducedByAOC(x))"]}
{"id": "folio_train_92", "nl": "L-2021 is either in the library or has a type-c port.", "fol": "((InLibrary(L2021) & -HasTypeCPort(L2021)) | (-InLibrary(L2021) & HasTypeCPort(L2021)))", "prediction": ["all x.(L-2021(x) -> (InLibrary(x) | HasTypeCPort(x)))", "all x.(L2021(x) -> (InLibrary(x) | HasTypeCPort(x)))", "all x.(L-2021(x) -> (InLibrary(x) | TypeCPort(x)))", "all x.(L2021(x) -> (InLibrary(x) | TypeCPort(x)))", "all x.(L-2021(x) -> ((InLibrary(x) | HasTypeCPort(x))))", "all x y.((L-2021(x) & Library(y)) -> (InLibrary(x,y) | HasTypeCPort(x,y)))", "all x.((L-2021(x) & (InLibrary(x) | HasTypeCPort(x))) -> InLibrary(x))", "all x.(L-2021(x) -> (exists y.(Library(y) & InLibrary(x,y)) | exists z.(TypeCPort(z) & InLibrary(x,z)))))", "all x.(L-2021(x) -> (exists y.(Library(y) & InLibrary(x,y)) | HasTypeCPort(x,y))))", "all x.(L-2021(x) -> (exists y.(Library(y) & InLibrary(x,y)) | exists z.(TypeCPort(z) & InLibrary(z,z)))))", "all x.(L2021(x) -> ((InLibrary(x) | HasTypeCPort(x))))", "all x.((L-2021(x) & (InLibrary(x) | HasTypeCPort(x))) -> (InLibrary(x) | HasTypeCPort(x)))", "all x.(L-2021(x) -> (exists y.(Library(y) & InLibrary(x,y)) | exists z.(TypeCPort(z) & InLibrary(z,x)))))", "all x.(L-2021(x) -> ((InLibrary(x) | TypeCPort(x))))", "all x y.((L-2021(x) & Library(y)) -> (InLibrary(x,y) | TypeCPort(x,y)))", "all x.(L-2021(x) -> (exists y.(Library(y) & InLibrary(x,y)) | exists z.(TypeCPort(z) & InLibrary(z)))))"]}
{"id": "folio_train_93", "nl": "L-2021 is either produced by AOC and produced by LG, or neither produced by AOC nor produced by LG.", "fol": "-((ProducedByAOC(L2021) & -ProducedByLG(L2021)) | (-ProducedByAOC(L2021) & ProducedByLG(L2021)))", "prediction": ["all x.(L-2021(x) -> (ProducedByAOC(x) & ProducedByLG(x)) | (-ProducedByAOC(x) & ProducedByLG(x))))", "all x.(L-2021(x) -> (ProducedByAOC(x) & ProducedByLG(x)) | -ProducedByAOC(x) & ProducedByLG(x)))", "all x.(L2021(x) -> (ProducedByAOC(x) & ProducedByLG(x)) | (-ProducedByAOC(x) & ProducedByLG(x))))", "all x.(L-2021(x) -> ((ProducedByAOC(x) & ProducedByLG(x)) | (-ProducedByAOC(x) & ProducedByLG(x))))", "all x.(L2021(x) -> (ProducedByAOC(x) & ProducedByLG(x)) | -ProducedByAOC(x) & ProducedByLG(x)))", "(all x.(L-2021(x) -> (ProducedByAOC(x) & ProducedByLG(x))) | (-ProducedByAOC(x) & ProducedByLG(x))))", "all x.(L-2021(x) -> ((ProducedByAOC(x) & ProducedByLG(x)) | -ProducedByAOC(x) & ProducedByLG(x)))", "all x.(L-2021(x) -> (ProducedByAOC(x) & ProducedByLG(x)) | -ProducedByAOC(x) & -ProducedByLG(x)))", "all x.(L-2021(x) -> ((ProducedByAOC(x) & ProducedByLG(x)) | -ProducedByAOC(x) & ProducedByLG(x))))", "all x.(L2021(x) -> ((ProducedByAOC(x) & ProducedByLG(x)) | (-ProducedByAOC(x) & ProducedByLG(x))))", "(all x.(L2021(x) -> (ProducedByAOC(x) & ProducedByLG(x))) | (-ProducedByAOC(x) & ProducedByLG(x))))", "all x.(L-2021(x) -> ((ProducedByAOC(x) & ProducedByLG(x)) | (-ProducedByAOC(x) & ProducedByLG(x)))))", "all x.(L2021(x) -> ((ProducedByAOC(x) & ProducedByLG(x)) | -ProducedByAOC(x) & ProducedByLG(x)))", "all x.(L2021(x) -> (ProducedByAOC(x) & ProducedByLG(x)) | -ProducedByAOC(x) & -ProducedByLG(x)))", "all x.(L-2021(x) -> (ProducedBy(x,AOC) & ProducedBy(x,LG)) | (-ProducedBy(x,AOC) & ProducedBy(x,LG))))", "all x.(L2021(x) -> ((ProducedByAOC(x) & ProducedByLG(x)) | -ProducedByAOC(x) & ProducedByLG(x))))"]}
{"id": "folio_train_94", "nl": "L-2021 is in the library.", "fol": "InLibrary(L2021)", "prediction": ["all x.(L-2021(x) -> InLibrary(x))", "all x.(L2021(x) -> InLibrary(x))", "(InLibrary(L-2021) -> InLibrary(L-2021))", "All x.(L-2021(x) -> InLibrary(x))", "all x y.((L-2021(x) & Library(y)) -> InLibrary(x,y))", "all x.((L-2021(x) & InLibrary(x)) -> InLibrary(x))", "all x y.((L-2021(x) & Library(y)) -> In(x,y))", "(InLibrary(L-2021) -> InLibrary(L2021))", "exists x.(L-2021(x) & InLibrary(x))", "(InLibrary(L2021) -> InLibrary(L2021))", "All x.(L2021(x) -> InLibrary(x))", "all x.((L-2021(x) & Library(x)) -> InLibrary(x))", "exists x.(L2021(x) & InLibrary(x))", "(InLibrary(L-2021) -> InLibrary(L))", "L-2021 is in the library.", "all x y.((L-2021(x) & Library(y)) -> InBook(x,y))"]}
{"id": "folio_train_95", "nl": "L-2021 is either in the library or produced by LG.", "fol": "(InLibrary(L2021) | ProducedByLG(L2021))", "prediction": ["all x.(L-2021(x) -> (InLibrary(x) | ProducedByLG(x)))", "all x.(L2021(x) -> (InLibrary(x) | ProducedByLG(x)))", "all x.(L-2021(x) -> (InLibrary(x) | ProducedBy(x)))", "all x.(L-2021(x) -> (InLibrary(x) | ProducedBy(x,LG)))", "all x.(L2021(x) -> (InLibrary(x) | ProducedBy(x)))", "all x.((L-2021(x) & (InLibrary(x) | ProducedByLG(x))) -> (InLibrary(x) | ProducedByLG(x)))", "all x.((L-2021(x) & (InLibrary(x) | ProducedByLG(x))) -> InLibrary(x))", "all x.(L2021(x) -> (InLibrary(x) | ProducedBy(x,LG)))", "all x y.((L-2021(x) & Library(y)) | ProducedBy(x,y))", "all x.(L-2021(x) -> (InLibrary(x) | ProducedByLg(x)))", "all x.(L-2021(x) -> (InLibrary(x) | ProducedByLGLibrary(x)))", "all x y.((L2021(x) & Library(y)) | ProducedBy(x,y))", "all x y.((L-2021(x) & Library(y)) | ProducedBy(x,y)) -> (InLibrary(x) | ProducedBy(x,y)))", "all x.((L-2021(x) & (InLibrary(x) | ProducedByLG(x))) -> (InLibrary(x) | ProducedByLG(x))))", "all x.(L2021(x) -> (InLibrary(x) | ProducedByLg(x)))", "all x y.((L2021(x) & Library(y)) | ProducedBy(x,y)) -> (InLibrary(x) | ProducedBy(x,y)))"]}
{"id": "folio_train_96", "nl": "L-2021 either has a type-c port or is produced by LG.", "fol": "(HasTypeCPort(L2021) | ProducedByLG(L2021))", "prediction": ["all x.(L-2021(x) -> (HasTypeCPort(x) | ProducedByLG(x)))", "all x.(L2021(x) -> (HasTypeCPort(x) | ProducedByLG(x)))", "all x.(L-2021(x) -> (TypeCPort(x) | LGProduced(x)))", "all x.(L2021(x) -> (TypeCPort(x) | LGProduced(x)))", "all x.(L-2021(x) -> (TypeCPort(x) | LGProducedBy(x)))", "all x.(L2021(x) -> (TypeCPort(x) | LGProducedBy(x)))", "all x.(L-2021(x) -> (TypeCPort(x) | ProducedByLG(x)))", "all x.(L2021(x) -> (TypeCPort(x) | ProducedByLG(x)))", "all x.(L-2021(x) -> (TypeCPort(x) | LGProduces(x)))", "all x.(L2021(x) -> (TypeCPort(x) | LGProduces(x)))", "all x y.((L-2021(x) & LG(y)) -> (TypeCPort(x) | ProducedBy(x,y)))", "all x.(L-2021(x) -> (TypeCPort(x) | LGProducer(x)))", "(exists x.(L2021(x) & TypeCPort(x)) | ProducedBy(x,LG)))", "(exists x.(L-2021(x) & TypeCPort(x)) | ProducedBy(x,LG)))", "all x.(L-2021(x) -> (TypeCPort(x) | LGProducedBy(x)))", "all x y.((L-2021(x) & LG(y)) -> (TypeCPort(x) | LGProducedBy(x,y)))"]}
{"id": "folio_train_97", "nl": "If L-2021 is either in the library and produced by LG, or neither in the library nor produced by LG,  then L-2021 neither has a type-c port nor is produced by LG.", "fol": "(((InLibrary(L2021) & ProducedByLG(L2021)) | (-InLibrary(L2021) & -ProducedByLG(L2021))) -> (-HasTypeCPort(L2021) & -ProducedByLG(L2021)))", "prediction": ["all x.((L-2021(x) & (InLibrary(x) & ProducedByLG) | -(InLibrary(x) & ProducedByLG)))) -> -TypeCPort(x) & -ProducedByLG(x)))", "all x.((L-2021(x) & (InLibrary(x) & ProducedByLG(x) | -InLibrary(x) & ProducedByLG(x))) -> -TypeCPort(x) & -ProducedByLG(x))", "all x.((L-2021(x) & (InLibrary(x) | -InLibrary(x) | -ProducedByLG(x))) -> -TypeCPort(x) & -ProducedByLG(x))", "all x.((L-2021(x) & (InLibrary(x) & ProducedByLG) | (-InLibrary(x) & ProducedByLG)))) -> -TypeCPort(x) & -ProducedByLG(x)))", "all x.((L-2021(x) & (InLibrary(x) & ProducedByLG(x)) | -(InLibrary(x) & ProducedByLG(x)))) -> -TypeCPort(x) & -ProducedByLG(x)))", "all x.((L-2021(x) & (InLibrary(x) & ProducedByLG(x) | -InLibrary(x) & -ProducedByLG(x))) -> -TypeCPort(x) & -ProducedByLG(x))", "all x.((L-2021(x) & (InLibrary(x) & ProducedByLG) | -InLibrary(x) & ProducedByLG))) -> -TypeCPort(x) & -ProducedByLG(x))", "all x.((L-2021(x) & (InLibrary(x) & ProducedByLG(x) | -(InLibrary(x) & ProducedByLG(x)))) -> -TypeCPort(x) & -ProducedByLG(x)))", "all x.((L-2021(x) & ((InLibrary(x) & ProducedByLG) | -InLibrary(x) & ProducedByLG))) -> -TypeCPort(x) & -ProducedByLG(x)))", "all x.((L-2021(x) & (InLibrary(x) & ProducedByLG) | -(InLibrary(x) & ProducedByLG)))) -> -TypeCPort(x) & -ProducedByLG(x))", "all x.((L-2021(x) & (InLibrary(x) & ProducedByLG) | -InLibrary(x) & -ProducedByLG))) -> -TypeCPort(x) & -ProducedByLG(x))", "all x.((L-2021(x) & (InLibrary(x) & ProducedByLG) | -(InLibrary(x) & ProducedByLG)))) -> (-TypeCPort(x) & -ProducedByLG(x)))", "all x.((L-2021(x) & ((InLibrary(x) & ProducedByLG)) | -(InLibrary(x) & ProducedByLG)))) -> -TypeCPort(x) & -ProducedByLG(x)))", "all x.((L-2021(x) & (InLibrary(x) & ProducedByLG) | -(InLibrary(x) & ProducedByLG)))) -> (-TypeCPort(x) | ProducedByLG(x)))", "all x.((L-2021(x) & (InLibrary(x) & ProducedByLG(x) | -InLibrary(x) & ProducedByLG(x))) -> (-TypeCPort(x) & -ProducedByLG(x)))", "all x.((L-2021(x) & (InLibrary(x) & ProducedByLG) | -(InLibrary(x) & ProducedByLG)))) -> (-TypeCPort(x) | ProducedByLG(x))))"]}
{"id": "folio_train_98", "nl": "If L-2021 is either produced by LG and produced by AOC or neither produced by LG nor produced by AOC,  then L-2021 is either in the library or produced by LG.", "fol": "(((ProducedByAOC(L2021) & ProducedByLG(L2021)) | (-ProducedByAOC(L2021) & -ProducedByLG(L2021))) -> (InLibrary(L2021) | ProducedByLG(L2021)))", "prediction": ["all x.((L-2021(x) & (ProducedByLG(x) | ProducedByAOC(x)) | -ProducedByLG(x) | -ProducedByAOC(x))) -> (InLibrary(x) | ProducedByLG(x)))", "all x.((L-2021(x) & (ProducedByLG(x) | ProducedByAOC(x) | -ProducedByLG(x) | -ProducedByAOC(x))) -> (InLibrary(x) | ProducedByLG(x)))", "all x.((L-2021(x) & (ProducedByLG(x) | ProducedByAOC(x) | -ProducedByLG(x) | ProducedByAOC(x))) -> (InLibrary(x) | ProducedByLG(x)))", "all x.((L-2021(x) & (ProducedByLG(x) | ProducedByAOC(x))) | -ProducedByLG(x) | -ProducedByAOC(x)))", "all x.((L-2021(x) & (ProducedByLG(x) & ProducedByAOC(x) | -ProducedByLG(x) & ProducedByAOC(x))) -> (InLibrary(x) | ProducedByLG(x)))", "all x.((L-2021(x) & (ProducedByLG(x) & ProducedByAOC(x)) | -ProducedByLG(x) & ProducedByAOC(x))) -> (InLibrary(x) | ProducedByLG(x)))", "all x.((L-2021(x) & (ProducedByLG(x) | ProducedByAOC(x)) | -ProducedByLG(x) | ProducedByAOC(x))) -> (InLibrary(x) | ProducedByLG(x)))", "all x.((L-2021(x) & (ProducedByLG(x) | ProducedByAOC(x)) | (-ProducedByLG(x) & ProducedByAOC(x)))) -> (InLibrary(x) | ProducedByLG(x)))", "all x.((L-2021(x) & (ProducedByLG(x) & ProducedByAOC(x)) | -ProducedByLG(x) & -ProducedByAOC(x))) -> (InLibrary(x) | ProducedByLG(x)))", "all x.((L2021(x) & (ProducedByLG(x) | ProducedByAOC(x)) | -ProducedByLG(x) | -ProducedByAOC(x))) -> (InLibrary(x) | ProducedByLG(x)))", "all x.((L-2021(x) & (ProducedByLG(x) | ProducedByAOC(x)) | -ProducedByLG(x) | -ProducedByAOC(x))) -> (InLibrary(x) | ProducedByLG(x)))", "all x.((L-2021(x) & (ProducedByLG(x) | ProducedByAOC(x)) | -ProducedByLG(x) & ProducedByAOC(x))) -> (InLibrary(x) | ProducedByLG(x)))", "all x.((L-2021(x) & ((ProducedByLG(x) & ProducedByAOC(x)) | -ProducedByLG(x) & ProducedByAOC(x))) -> (InLibrary(x) | ProducedByLG(x))))", "all x.((L-2021(x) & (ProducedByLG(x) | ProducedByAOC(x)) | (-ProducedByLG(x) | ProducedByAOC(x)))) -> (InLibrary(x) | ProducedByLG(x)))", "all x.((L-2021(x) & (ProducedByLG(x) | ProducedByAOC(x))) | (-ProducedByLG(x) & ProducedByAOC(x))))", "all x.((L-2021(x) & (ProducedByLG(x) | ProducedByAOC(x) | -ProducedByLG(x) | -ProducedByAOC(x))) -> (InLibrary(x) | ProducedByLG(x)))"]}
{"id": "folio_train_99", "nl": "People eat meat regularly or are vegetation.", "fol": "all x.(EatsMeatRegularly(x) | IsVegetarian(x))", "prediction": ["all x.(People(x) -> (EatsMeatRegularly(x) | Vegetation(x)))", "all x.(Person(x) -> (EatsMeatRegularly(x) | Vegetation(x)))", "exists x.(Person(x) & (EatsMeatRegularly(x) | Vegetation(x)))", "exists x.(People(x) & (EatsMeatRegularly(x) | Vegetation(x)))", "all x.((Person(x) & (EatsMeatRegularly(x) | Vegetation(x))) -> EatsMeat(x))", "all x.(Population(x) -> (EatsMeatRegularly(x) | Vegetation(x)))", "all x.((People(x) & (EatsMeatRegularly(x) | Vegetation(x))) -> EatsMeat(x))", "all x.(Popular(x) -> (EatsMeatRegularly(x) | Vegetation(x)))", "exists x.(Population(x) & (EatsMeatRegularly(x) | Vegetation(x)))", "all x.((Person(x) & (EatsMeatRegularly(x) | Vegetation(x))) -> Eating(x))", "all x.((Person(x) & (EatsMeatRegularly(x) | Vegetation(x))) -> Eating(x,Meat))", "all x.((People(x) & (EatsMeatRegularly(x) | Vegetation(x))) -> Eating(x))", "all x.(People(x) -> (EatMeatRegularly(x) | Vegetation(x)))", "all x.((Person(x) & (EatsMeatRegularly(x) | Vegetation(x))) -> EatingMeat(x))", "all x.((Person(x) & EatsMeatRegularly(x)) | Vegetation(x))", "all x.((People(x) & (EatsMeatRegularly(x) | Vegetation(x))) -> Eating(x,Meat))"]}
{"id": "folio_train_100", "nl": "If people eat meat regularly, then they enjoy eating hamburgers and steaks.", "fol": "all x.(EatsMeatRegularly(x) -> EnjoysHamburgers(x))", "prediction": ["all x.((People(x) & EatsMeatRegularly(x)) -> (EnjoysEating(x,burgers) & EnjoysEating(x,steaks)))", "all x.((Person(x) & EatsMeatRegularly(x)) -> (EnjoysEating(x,burgers) & EnjoysEating(x,steaks)))", "all x.((People(x) & EatsMeatRegularly(x)) -> (EnjoysEating(x,burgers) & EnjoysEating(x,steaks)))", "all x.(EatsMeatRegularly(x) -> (EnjoysEating(x,burgers) & EnjoysEating(x,steaks)))", "all x.((EatsMeatRegularly(x)) -> (EnjoysEating(x,burgers) & EnjoysEating(x,steaks)))", "all x.((People(x) & EatsMeatRegularly(x)) -> (EnjoysEatingHaburgers(x) & EnjoysEatingSteaks(x)))", "all x.((People(x) & EatsMeatRegularly(x)) -> (EnjoysEatingMeat(x) & EnjoysEatingSteaks(x)))", "all x.((Person(x) & EatsMeatRegularly(x)) -> (EnjoysEating(x,burgers) & EnjoysEating(x,steaks)))", "all x.((People(x) & EatsMeatRegularly(x)) -> (EnjoysEatingHabitats(x) & EnjoysEatingSteaks(x)))", "all x.((People(x) & EatsMeatRegularly(x)) -> (EnjoysEating(x, hamburgers) & EnjoysEating(x,steaks)))", "all x.((People(x) & EatsMeatRegularly(x)) -> (EnjoysEating(x,Haburgers) & EnjoysEating(x,Steaks)))", "all x.((People(x) & EatsMeatRegularly(x)) -> (EnjoysEating(x,Meat) & EnjoysEating(x,Steaks)))", "all x.((EatsMeatRegularly(x) & People(x)) -> (EnjoysEating(x,burgers) & EnjoysEating(x,steaks)))", "all x.(EatsRegularMeat(x) -> (EnjoysEating(x,burgers) & EnjoysEating(x,steaks)))", "all x.((EatsMeatRegularly(x) & EatsMeat(x)) -> (EnjoysEating(x,burgers) & EnjoysEating(x,steaks)))", "all x.((People(x) & EatsMeatRegularly(x)) -> (EnjoysEating(x,burgers,steaks)))"]}
{"id": "folio_train_101", "nl": "All people who are vegetarian are conscious of the environment or their health.", "fol": "all x.(IsVegetarian(x) -> IsConsciousOfEnvironmentOrHealth(x))", "prediction": ["all x.(Vegetarian(x) -> (ConsciousOfEnvironment(x) | ConsciousOfHealth(x)))", "all x.(Vegetarian(x) -> (ConsciousOfEnvironment(x) | ConciousOfHealth(x)))", "all x.(Vegetarian(x) -> (ConsciousOfEnvironment(x) | ConsciousOfHealth(x)))", "all x.(Vegetarian(x) -> (ConscientiousOfEnvironment(x) | ConsciousOfHealth(x)))", "all x.((Person(x) & Vegetarian(x)) -> (ConsciousOfEnvironment(x) | ConsciousOfHealth(x)))", "all x.(Vegetarian(x) -> (ConcernedOfEnvironment(x) | ConcernedOfHealth(x)))", "all x.(Vegetarian(x) -> (ConsidersEnvironment(x) | ConsciousOfHealth(x)))", "all x.(Vegetarian(x) -> (ConsciousOfEnvironment(x) | ConscientiousOfHealth(x)))", "all x.(Vegetarian(x) -> ((ConsciousOfEnvironment(x) | ConsciousOfHealth(x))))", "all x.(Vegetarian(x) -> (ConscientiousOfEnvironment(x) | ConscientiousOfHealth(x)))", "all x.(Vegetarian(x) -> (ConsciousOfEnvironment(x) | ConsciousOfHealth(x)))", "all x.(Vegetarian(x) -> (CognitiveOfEnvironment(x) | ConsciousOfHealth(x)))", "all x.(Vegetarian(x) -> (ConsciousOfEnvironment(x) | ConsciousOfHealth(x)))", "all x.(Vegetarian(x) -> (ConcernedOfEnvironment(x) | ConsciousOfHealth(x)))", "all x.(Vegetarian(x) -> (ConsciousOfEnvironment(x) | ConciousOfHealth(x)))", "all x.(Vegetarian(x) -> (ConsciousOfEnvironmentOrHealth(x)))"]}
{"id": "folio_train_102", "nl": "If people are conscious about the environment or their health, then they do not go to fast food places often.", "fol": "all x.(IsConsciousOfEnvironmentOrHealth(x) -> -GoesToFastFoodPlaces(x))", "prediction": ["all x.((ConsciousOfEnvironment(x) | ConsciousOfHealth(x)) -> -FastFoodPlaces(x))", "all x.((ConsciousAboutEnvironment(x) | ConsciousAboutHealth(x)) -> -FastFoodPlaces(x))", "all x.((ConsciousAboutEnvironmentOrHealth(x)) -> -FastFoodPlaces(x))", "all x.(ConsciousOfEnvironmentOrHealth(x) -> -FastFoodPlaces(x))", "all x.(ConsciousAboutEnvironmentOrHealth(x) -> -FastFoodPlaces(x))", "all x.((ConsciousOfEnvironment(x) | ConciousOfHealth(x)) -> -FastFoodPlaces(x))", "all x.((Conscious(x) & (Environment(x) | Health(x))) -> -FastFoodPlaces(x))", "all x.((ConsciousAboutEnvironment(x) | ConciousAboutHealth(x)) -> -FastFoodPlaces(x))", "all x.((ConsciousOfEnvironment(x) | ConsciousOfHealth(x)) -> -FastFoodPlacesOfFastFood(x))", "all x.((ConsciousOfEnvironmentOrHealth(x)) -> -FastFoodPlaces(x))", "all x.((ConsciousAboutEnvironment(x) | ConsciousAboutHealth(x)) -> -FastFoodPlacesOfFastFood(x))", "all x.((ConsciousOfEnvironment(x) | ConsciousOfHealth(x)) -> -FastFoodPlace(x))", "all x.((ConsciousAboutEnvironment(x) & ConsciousAboutHealth(x)) -> -FastFoodPlaces(x))", "all x.((ConsciousAboutEnvironment(x) | ConsciousAboutHealth(x)) -> -FastFoodPlace(x))", "all x.((ConsciousAboutEnvironment(x) | ConsciousAboutHealth(x)) -> -FastFoodPlacesOften(x))", "all x.((ConsciousOfEnvironment(x) & ConsciousOfHealth(x)) -> -FastFoodPlaces(x))"]}
{"id": "folio_train_103", "nl": "If people have busy schedules without time to cook, then they go to fast food places often.", "fol": "all x.(HasBusySchedule(x) -> GoesToFastFoodPlaces(x))", "prediction": ["all x.((Person(x) & BusySchedules(x) & -TimeToCook(x)) -> GoToFastFoodPlaces(x))", "all x.((Person(x) & BusySchedules(x) & -TimeToCook(x)) -> GoesToFastFoodPlaces(x))", "all x.((Person(x) & BusySchedules(x) & -TimeToCook(x)) -> FastFoodPlaces(x))", "all x.((People(x) & BusySchedules(x) & -TimeToCook(x)) -> GoToFastFoodPlaces(x))", "all x.((Person(x) & BusySchedules(x) & -TimeToCook(x)) -> GoToFastFoodPlacesOften(x))", "all x.((Person(x) & BusySchedules(x) & -TimeToCook(x)) -> GoesToFastFoodPlacesOften(x))", "all x.((Person(x) & BusySchedules(x) & -TimeToCook(x)) -> FastFoodPlace(x))", "all x.((People(x) & BusySchedules(x) & -TimeToCook(x)) -> FastFoodPlaces(x))", "all x.((Person(x) & BusySchedule(x) & -TimeToCook(x)) -> GoToFastFoodPlaces(x))", "all x.((Person(x) & BusySchedule(x) & -TimeToCook(x)) -> GoesToFastFoodPlaces(x))", "all x.((People(x) & BusySchedules(x) & -TimeToCook(x)) -> GoesToFastFoodPlaces(x))", "all x.((Person(x) & BusySchedules(x) & -HasTimeToCook(x)) -> GoesToFastFoodPlaces(x))", "all x.((Person(x) & BusySchedules(x) & -TimeToCook(x)) -> GoToFastFoodPlacesOften(x))", "all x.((BusySchedules(x) & -TimeToCook(x)) -> GoToFastFoodPlaces(x))", "all x.((BusySchedules(x) & -TimeToCook(x)) -> GoesToFastFoodPlaces(x))", "all x.((Person(x) & BusySchedule(x) & -TimeToCook(x)) -> FastFoodPlace(x))"]}
{"id": "folio_train_104", "nl": "If Jeremy does not both go to fast food places often and is conscious about the environment or their health, then he goes to fast food places often.", "fol": "(-(GoesToFastFoodPlaces(Jeremy) & IsConsciousOfEnvironmentOrHealth(Jeremy)) -> GoesToFastFoodPlaces(Jeremy))", "prediction": ["all x.((Jeremy(x) & -(GoesToFastFood(x) & ConsciousAboutEnvironment(x) & ConsciousAboutHealth(x))) -> GoesToFastFood(x))", "all x.((Jeremy(x) & -(GoesToFastFoodPlaces(x) & ConsciousAboutEnvironment(x) & ConsciousAboutHealth(x))) -> GoesToFastFoodPlaces(x))", "all x.((Jeremy(x) & -(GoesToFastFood(x) & ConsciousOfEnvironment(x) | ConsciousOfHealth(x))) -> GoesToFastFood(x))", "all x.((Jeremy(x) & -(GoesToFastFoodPlacesOften(x) & ConsciousAboutEnvironment(x) & ConsciousAboutHealth(x))) -> GoesToFastFoodPlacesOften(x))", "all x.((Jeremy(x) & -(GoesToFastFoodPlaces(x) & ConsciousOfEnvironment(x) & ConsciousOfHealth(x))) -> GoesToFastFoodPlaces(x))", "all x.((Jeremy(x) & -(GoesToFastFoodPlacesOften(x) & ConsciousOfEnvironment(x) & ConsciousOfHealth(x))) -> GoesToFastFoodPlacesOfFastFoodPlacesOfFastFoodPlacesOfFastFoodPlacesOfFastFoodPlacesOfHealth(x)))", "all x.((Jeremy(x) & -(GoesToFastFood(x) & ConsciousOfEnvironment(x) & ConsciousOfHealth(x))) -> GoesToFastFood(x))", "all x.((Jeremy(x) & -(GoesToFastFoodPlacesOften(x) & ConsciousOfEnvironment(x) & ConsciousOfHealth(x))) -> GoesToFastFoodPlacesOften(x))", "all x.((Jeremy(x) & -(GoesToFastFoodPlacesOften(x) & ConsciousOfEnvironment(x) & ConsciousOfHealth(x))) -> GoesToFastFoodPlacesOften(x))", "all x.((Jeremy(x) & -(GoesToFastFoodPlacesOften(x) & ConsciousOfEnvironment(x) | ConsciousOfHealth(x))) -> GoesToFastFoodPlacesOfFastFoodPlacesOfFastFoodPlacesOfFastFoodPlacesOfFastFoodPlacesOfFastFoodPlacesOfHealth(x))", "all x.((Jeremy(x) & -(GoesToFastFood(x) & ConsciousAboutEnvironment(x) | ConsciousAboutHealth(x))) -> GoesToFastFood(x))", "all x.((Jeremy(x) & -(GoesToFastFoodPlacesOften(x) & ConsciousOfEnvironment(x) | ConsciousOfHealth(x))) -> GoesToFastFoodPlacesOften(x))", "all x.((Jeremy(x) & -(GoesToFastFoodPlaces(x) & ConsciousOfEnvironment(x) | ConsciousOfHealth(x))) -> GoesToFastFoodPlaces(x))", "all x.((Jeremy(x) & -(GoesToFastFoodPlacesOften(x) & ConsciousOfEnvironment(x) & ConsciousOfHealth(x))) -> GoesToFastFoodPlacesOfFastFoodPlacesOfFastFoodPlacesOfFastFoodPlacesOfFastFoodPlacesOfFastFoodPlacesOfHealth(x))", "all x.((Jeremy(x) & -(GoesToFastFoodPlacesOfFastFoodPlacesOfFastFoodPlacesOfFastFoodPlacesOfFastFoodPlacesOfFastFoodPlaces(x) & ConsciousOfEnvironmentOrHealth(x))) -> GoesToFastFoodPlacesOfFastFoodPlacesOfFastFoodPlacesOfF", "all x.((Jeremy(x) & -FastFoodPlaces(x) & (ConsciousOfEnvironment(x) | ConsciousOfHealth(x))) -> GoesToFastFoodPlaces(x))"]}
{"id": "folio_train_105", "nl": "Jeremy has a busy schedule without time to cook.", "fol": "HasBusySchedule(Jeremy)", "prediction": ["all x.(Jeremy(x) -> (BusySchedule(x) & -TimeToCook(x)))", "all x.((Jeremy(x) & BusySchedule(x) & -TimeToCook(x)) -> -TimeToCook(x))", "all x.(Jerry(x) -> (BusySchedule(x) & -TimeToCook(x)))", "all x.((Jeremy(x) & BusySchedule(x)) -> -TimeToCook(x))", "all x.((Jeremy(x) & BusySchedule(x) & -TimeToCook(x)) -> Has(x,y))", "all x.(Jeffrey(x) -> (BusySchedule(x) & -TimeToCook(x)))", "all x.((Jeremy(x) & BusySchedule(x) & -TimeToCook(x)) -> NoTimeToCook(x))", "all x.((Jeremy(x) & BusySchedule(x)) -> -HasTimeToCook(x))", "all x.((Jeremy(x) & BusySchedule(x) & -TimeToCook(x)) -> -HasTimeToCook(x))", "all x.(Jeremy(x) -> (BusySchedule(x) & -HasTimeToCook(x)))", "all x.((Jeremy(x) & BusySchedule(x) & -TimeToCook(x)) -> NotHasTimeToCook(x))", "all x.((Jeremy(x) & BusySchedule(x) & -TimeToCook(x)) -> CanCook(x))", "(BusySchedule(Jeremy) & -TimeToCook(Jeremy))", "all x.((Jeremy(x) & BusySchedule(x) & -TimeToCook(x)) -> -BusySchedule(x))", "all x.(Jeremy(x) -> (BusySchedule(x) & NoTimeToCook(x)))", "all x.((Jeremy(x) & BusySchedule(x) & -TimeToCook(x)) -> Cook(x))"]}
{"id": "folio_train_106", "nl": "Jeremy has a busy schedule without time to cook or enjoy eating hamburgers and steaks.", "fol": "(HasBusySchedule(Jeremy) | EnjoysHamburgers(Jeremy))", "prediction": ["all x.(Jeremy(x) -> (BusySchedule(x) & -(TimeToCook(x) | TimeToEnjoyEating(x)))))", "all x.((Jeremy(x) & BusySchedule(x)) -> (-Cooks(x) & -EnjoysEating(x,burgers) & -EnjoysEating(x,steaks)))", "all x.((Jeremy(x) & BusySchedule(x)) -> (-TimeToCook(x) | TimeToEnjoyEating(x)))", "all x.((Jeremy(x) & BusySchedule(x) & -(TimeToCook(x) | TimeToEnjoyEating(x))))", "all x.((Jeremy(x) & BusySchedule(x) & -(TimeToCook(x) | TimeToEnjoyEating(x)))) -> -(TimeToEat(x) & TimeToEnjoyEating(x)))", "all x.((Jeremy(x) & BusySchedule(x)) -> (-TimeToCook(x) & -TimeToEnjoyEating(x,burgers) & -TimeToEnjoyEating(x,steaks)))", "all x.((Jeremy(x) & BusySchedule(x)) -> (-Cooks(x) | EnjoysEating(x,burgers) & EnjoysEating(x,steaks)))", "all x.((Jeremy(x) & BusySchedule(x)) -> (-Cooks(x) & -EnjoysEating(x,burgers,steaks)))", "all x.(Jeremy(x) -> (BusySchedule(x) & -(TimeToCook(x) | TimeToEnjoyEating(x)) & -(TimeToEat(x) & TimeToEat(x)))))", "all x.(Jeremy(x) -> (BusySchedule(x) & -(TimeToCook(x) | TimeToEnjoy(x)))))", "all x.(Jeremy(x) -> (BusySchedule(x) & -(TimeToCook(x) | TimeToEnjoyEating(x)) & -(TimeToEat(x) & TimeToEnjoyEating(x)))))", "all x.((Jeremy(x) & BusySchedule(x)) -> (-Cooks(x) | EnjoysEating(x,burgers,steaks)))", "all x.((Jeremy(x) & BusySchedule(x)) -> (-TimeToCook(x) & -TimeToEnjoyEating(x,burgers,steaks)))", "all x.((Jeremy(x) & BusySchedule(x)) -> (-TimeToCook(x) & -TimeToEnjoyEating(x)))", "all x.((Jeremy(x) & BusySchedule(x)) -> (-Cooks(x) & -EnjoysEating(x,burgers) & EnjoysEating(x,steaks)))", "all x.((Jeremy(x) & BusySchedule(x) & -(TimeToCook(x) | TimeToEnjoyEating(x)))) -> -TimeToEnjoyEating(x))"]}
{"id": "folio_train_107", "nl": "If Jeremy has a busy schedule without time to cook or enjoy eating hamburgers and steaks, then Jeremy neither has a busy schedule without having time to cook nor enjoys eating hamburgers and steaks.", "fol": "((HasBusySchedule(Jeremy) | EnjoysHamburgers(Jeremy)) -> (-HasBusySchedule(Jeremy) & -EnjoysHamburgers(Jeremy)))", "prediction": ["all x.((Jeremy(x) & BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x)) | EnjoysEating(x)))))", "all x.((Jeremy(x) & BusySchedule(x) & -(HasTimeToCook(x) | EnjoysEating(x,burgers) & EnjoysEating(x,steaks))) -> -(HasTimeToCook(x) & EnjoysEating(x,burgers) & EnjoysEating(x,steaks)))", "all x.((Jeremy(x) & BusySchedule(x) & -(HasTimeToCook(x) | EnjoysEating(x,burgers) & EnjoysEating(x,steaks))) -> -(HasTimeToCook(x) & EnjoysEating(x,burgers) & EnjoysEating(x,steaks))))", "all x.((Jeremy(x) & BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) | EnjoysEating(x))))))", "all x.((Jeremy(x) & BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) | EnjoysEating(x)))))", "all x.((Jeremy(x) & BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) & -Bust(x)))))", "all x.((Jeremy(x) & BusySchedule(x) & -(BuiltSchedule(x) & -(BuiltSchedule(x) & -(BuiltSchedule(x) & -(BuiltSchedule(x) & -(BuiltSchedule(x) & -(BuiltSchedule(x) & -(BuiltSchedule(x))))))", "all x.((Jeremy(x) & BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) & -(Busts(x))))))", "all x.((Jeremy(x) & BusySchedule(x) & -(BuiltSchedule(x) & -(BuiltSchedule(x) & -(BuiltSchedule(x) & -(BuiltSchedule(x) & -(BuiltSchedule(x) & -(BuiltSchedule(x) & -BuiltSchedule(x)))))", "all x.((Jeremy(x) & BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) & -Busts(x)))))", "all x.((Jeremy(x) & BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) | EnjoysEating(x))))))", "all x.((Jeremy(x) & BusySchedule(x) & -(BuiltSchedule(x) & -(BuiltSchedule(x) & -(BuiltSchedule(x) & -(BuiltSchedule(x) & -(BuiltSchedule(x) & -(BuiltSchedule(x) & -BuiltSchedule(x))))))", "all x.((Jeremy(x) & BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x))))))", "all x.((Jeremy(x) & BusySchedule(x) & -(BuiltSchedule(x) & -(BuiltSchedule(x) & -(BuiltSchedule(x) & -(BuiltSchedule(x) & -(BuiltSchedule(x) & -(BuiltSchedule(x) & -BuiltSchedule(x) & -(BuiltSchedule(x))))))", "all x.((Jeremy(x) & BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) & -Busts(x) & -Busts(x)))))", "all x.((Jeremy(x) & BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) & -(BusySchedule(x) & -(Bustues(x) & -(Bustues(x))))))"]}
{"id": "folio_train_108", "nl": "Sam is doing a project.", "fol": "exists x.(ProjectExists(x) & IsDoing(Sam,x))", "prediction": ["all x y.((Sam(x) & Project(y)) -> Doing(x,y))", "all x.(Sam(x) -> DoingProject(x))", "all x.((Sam(x) & Project(x)) -> Doing(x))", "all x.((Sam(x) & Project(x)) -> Doing(x,Sam))", "all x.((Sam(x) & Project(x)) -> Doing(x,y))", "all x.((Sam(x) & Project(y)) -> Doing(x,y))", "all x y.((Sam(x) & Project(y)) -> Does(x,y))", "(DoingProject(Sam) -> DoingProject(Sam))", "all x.((Sam(x) & Project(x)) -> Doing(x,sam))", "exists x.(Sam(x) & DoingProject(x))", "(DoingProject(Sam) | DoingProject(Sam)))", "all x.((Sam(x) & Project(x)) -> Does(x,Sam))", "all x.((Sam(x) & Project(x)) -> Does(x,y))", "(DoingProject(Sam) -> Doing(Sam))", "all x.(DoingProject(x) -> SamDoes(x))", "all x.((Sam(x) & DoingProject(x)) -> DoingProject(x))"]}
{"id": "folio_train_109", "nl": "A project is written either in C++ or in Python.", "fol": "all x.(ProjectExists(x) -> ((IsWrittenIn(x,PythonLanguage) & -IsWrittenIn(x,CPlusPlus)) | (-IsWrittenIn(x,PythonLanguage) & IsWrittenIn(x,CPlusPlus))))", "prediction": ["all x.(Project(x) -> (WrittenInC++(x) | WrittenInPython(x)))", "all x.(Project(x) -> (WrittenIn(x,C++) | WrittenIn(x,Python)))", "all x.(Project(x) -> ((WrittenInC++(x) | WrittenInPython(x))))", "all x y.((Project(x) & (C++(y) | Python(y))) -> WrittenIn(x,y))", "all x.(Project(x) -> (WrittenInC++(x) | WrittenInPython(x)))", "all x.(Project(x) -> (writtenInC++(x) | WrittenInPython(x)))", "exists x.(Project(x) & (WrittenInC++(x) | WrittenInPython(x)))", "all x y.((Project(x) & (C++(x) | Python(x))) -> WrittenIn(x,y))", "all x y.((Project(x) & C++(y)) | Python(y)) -> WrittenIn(x,y))", "all x.((Project(x) & (C++(x) | Python(x))) -> WrittenIn(x))", "all x.(Project(x) -> (WrittenInC++(x) | WrittenInPython(x)))", "all x.(Project(x) -> (C++(x) | Python(x)))", "all x.(Project(x) -> (WritesInC++(x) | WritesInPython(x)))", "all x.(Project(x) -> (Written(x,C++) | Written(x,Python)))", "all x.((Project(x) & (C++(x) | Python(x))) -> WrittenIn(x,C++))", "all x.(Project(x) -> (Python(x) | C++(x)))"]}
{"id": "folio_train_110", "nl": "If Sam does a project written in Python, he will not use a Mac.", "fol": "all x.((ProjectExists(x) & IsWrittenIn(x,PythonLanguage) & IsDoing(Sam,x)) -> -IsUsing(Sam,MacComputer))", "prediction": ["all x.((Project(x) & WrittenInPython(x)) -> -UsesMac(x))", "all x.((DoesProject(x) & WrittenInPython(x)) -> -UsesMac(x))", "all x y.((Project(x) & WrittenInPython(x) & Sam(y)) -> -UsesMac(y))", "all x.((Sam(x) & ProjectWrittenInPython(x)) -> -UsesMac(x))", "all x y.((Project(x) & WrittenInPython(x) & SamDoes(x,y)) -> -UsesMac(x))", "all x.((Sam(x) & WritesInPython(x)) -> -UsesMac(x))", "all x.((Sam(x) & Project(x) & WrittenInPython(x)) -> -UsesMac(x))", "all x.(((Project(x) & WrittenInPython(x)) -> -UsesMac(x))", "all x y.((Sam(x) & Project(y) & WrittenInPython(x,y)) -> -UsesMac(x))", "all x y.((Project(x) & WrittenInPython(x) & SamDoes(x,y)) -> -UsesMac(y))", "all x y.((Project(x) & WrittenInPython(x)) -> -UsesMac(y))", "all x.((Sam(x) & WrittenInPython(x)) -> -UsesMac(x))", "all x.((PythonProject(x) & SamDoes(x)) -> -UsesMac(x))", "all x y.((Project(x) & Sam(y) & WrittenInPython(x,y)) -> -UsesMac(y))", "all x y.((Sam(x) & Project(y) & WrittenInPython(y)) -> -UsesMac(x))", "all x.((Sam(x) & PythonProject(x)) -> -UsesMac(x))"]}
{"id": "folio_train_111", "nl": "Sam is using a Mac.", "fol": "IsUsing(Sam,MacComputer)", "prediction": ["all x.(Sam(x) -> UsesMac(x))", "all x y.((Sam(x) & Mac(y)) -> Uses(x,y))", "all x.((Sam(x) & Mac(x)) -> Uses(x,Mac))", "all x.((Sam(x) & Mac(y)) -> Uses(x,y))", "(UsesMac(Sam) & -UsesMac(Sam))", "all x.((Sam(x) & Mac(x)) -> Uses(x))", "(UsesMac(Sam) & UsesMac(Sam))", "all x y.((Sam(x) & Mac(y)) -> UsedBy(x,y))", "all x.((Sam(x) & UsesMac(x)) -> UsesMac(x))", "all x.((Sam(x) & Mac(x)) -> Uses(x,Sam))", "all x.((Sam(x) & Mac(x)) -> Uses(x,y))", "(UsesMac(Sam) -> UsesMac(Sam))", "all x y.((Sam(x) & Mac(y)) -> Using(x,y))", "all x.((Sam(x) & Mac(y)) -> UsedBy(x,y))", "all x.((Sam(x) & Mac(x)) -> Using(x,Mac))", "all x.((Sam(x) & Mac(y)) -> Using(x,y))"]}
{"id": "folio_train_112", "nl": "If Sam uses a Mac, he will play a song.", "fol": "(IsUsing(Sam,MacComputer) -> exists x.(SongExists(x) & Plays(Sam,x)))", "prediction": ["all x.((Sam(x) & UsesMac(x)) -> PlaysSong(x))", "all x.((Mac(x) & Uses(x,Mac)) -> PlaysSong(x))", "all x.((Mac(x) & SamUses(x)) -> PlaysSong(x))", "all x.((Sam(x) & UsesMac(x)) -> PlaySong(x))", "all x.((Mac(x) & SamUses(x)) -> PlaySong(x))", "all x.((Mac(x) & Uses(x,Mac)) -> PlaySong(x))", "all x.((Mac(x) & SamUses(x,Mac)) -> PlaysSong(x))", "all x y.((Mac(x) & Sam(y)) -> PlaysSong(y,x))", "all x.((Mac(x) & Uses(x,Mac)) -> PlaysSong(x,Sam))", "all x.((Mac(x) & Uses(x)) -> PlaysSong(x))", "all x.(UsesMac(x) -> PlaysSong(x))", "all x.((UsesMac(x) & Sam(x)) -> PlaysSong(x))", "all x y.((Mac(x) & Sam(y)) -> PlaysSong(y))", "all x.((Mac(x) & Uses(x,Sam)) -> PlaysSong(x))", "all x.((Mac(x) & Uses(x,Mac)) -> PlaysSong(x,Mac))", "all x.((Mac(x) & SamUses(x,Mac)) -> PlaySong(x))"]}
{"id": "folio_train_113", "nl": "If a song is not \"Perfect\", Sam will never play it.", "fol": "all x.(-Is(x,PerfectSong) -> -Plays(Sam,x))", "prediction": ["all x.((Song(x) & -Perfect(x)) -> SamNeverPlays(x))", "all x.((Song(x) & -Perfect(x)) -> -Plays(x,Sam))", "all x.((Song(x) & -Perfect(x)) -> -Plays(x))", "all x.((Song(x) & -Perfect(x)) -> SamWon'tPlay(x))", "all x.((Song(x) & -Perfect(x)) -> NeverPlay(x))", "all x.((Song(x) & -Perfect(x)) -> NeverPlays(x))", "all x.((Song(x) & -Perfect(x)) -> -Play(x,Sam))", "all x.((Song(x) & -Perfect(x)) -> -Plays(x,sam))", "all x.((Song(x) & -Perfect(x)) -> -Play(x))", "all x.((Song(x) & -Perfect(x)) -> SamWontPlay(x))", "all x.((Song(x) & -Perfect(x)) -> SamWon'tPlay(x,Sam))", "all x.((Song(x) & -Perfect(x)) -> -Play(x,sam))", "all x.((Song(x) & -Perfect(x)) -> SamWon'tPlay(x,y))", "all x.((Song(x) & -Perfect(x)) -> WillNotPlay(x))", "all x.((Song(x) & -Perfect(x)) -> -Perfect(x))", "all x.((Song(x) & -Perfect(x)) -> WillNeverPlay(x))"]}
{"id": "folio_train_114", "nl": "The project Sam is doing is written in C++.", "fol": "exists x.(ProjectExists(x) & IsDoing(Sam,x) & IsWrittenIn(x,CPlusPlus))", "prediction": ["all x.((Project(x) & Sam(x)) -> WrittenInC++(x))", "all x.((Project(x) & SamDoes(x)) -> WrittenInC++(x))", "all x.((Project(x) & SamDoing(x)) -> WrittenInC++(x))", "all x.(Project(x) -> WrittenInC++(x))", "all x.((Project(x) & Doing(x)) -> WrittenInC++(x))", "all x y.((Project(x) & Sam(y)) -> WrittenInC++(y))", "all x y.((Project(x) & Sam(y)) -> WrittenInC++(x,y))", "all x y.((Project(x) & Sam(y)) -> WrittenInC++(x))", "all x.((Project(x) & WrittenInC++(x)) -> Doing(x))", "all x.((Project(x) & SamDoing(x)) -> WrittenInC++(x))", "all x y.((Project(x) & Sam(y)) -> WrittenInC++(y,x))", "all x y z.((Project(x) & Sam(y) & C++(z)) -> WrittenIn(y,z))", "all x.(SamProject(x) -> WrittenInC++(x))", "all x.((Project(x) & Sam(s)) -> WrittenInC++(x))", "all x.((Project(x) & WrittenInC++(x)) -> SamDoes(x))", "all x y z.((Project(x) & Sam(y) & C++(z)) -> WrittenIn(x,y,z))"]}
{"id": "folio_train_115", "nl": "The song Sam is playing is \"Perfect\".", "fol": "exists x.(SongExists(x) & Plays(Sam,x) & Is(x,PerfectSong))", "prediction": ["all x.((Song(x) & SamPlaying(x)) -> Perfect(x))", "All x.((Song(x) & SamPlaying(x)) -> Perfect(x))", "All x.((Song(x) & SamPlays(x)) -> Perfect(x))", "all x.((Song(x) & SamPlays(x)) -> Perfect(x))", "(PerfectSong(Sam) & Playing(Sam))", "All x.((Song(x) & Playing(x)) -> Perfect(x))", "all x.((Song(x) & Playing(x)) -> Perfect(x))", "(PerfectSong(Sam) & Playing(Sam,Sam))", "all x.((Song(x) & SamPlaying(x)) -> \"Perfect(x)\")", "All x.(Sam(x) -> PlayingSong(x,Perfect))", "All x.((Song(x) & SamPlaying(x)) -> \"Perfect(x)\")", "(Perfect(Sam) & Song(Sam))", "all x.((Song(x) & SamPlays(x)) -> \"Perfect(x)\")", "all x.((Song(x) & SamPlaying(x)) -> Perfect(x))", "All x.((Song(x) & SamPlaying(x)) -> Perfect(x))", "All x.(Sam(x) -> Playing(x,Perfect))"]}
{"id": "folio_train_116", "nl": "If a song is \"Perfect\", Sam will play it.", "fol": "all x.(Is(x,PerfectSong) -> Plays(Sam,x))", "prediction": ["all x.((Song(x) & Perfect(x)) -> Plays(x,Sam))", "all x.((Song(x) & Perfect(x)) -> Play(x,Sam))", "all x.((Song(x) & Perfect(x)) -> Plays(x))", "all x.((Song(x) & Perfect(x)) -> Plays(x,Sam))", "all x.((Song(x) & Perfect(x)) -> Play(x,Sam))", "all x.((Song(x) & Perfect(x)) -> Play(x))", "all x.((Song(x) & Perfect(x)) -> Plays(x,sam))", "all x.((Song(x) & Perfect(x)) -> Plays(x))", "all x.(Perfect(x) -> SamPlays(x))", "all x.((Song(x) & Perfect(x)) -> Plays(x,sam))", "all x.((Song(x) & Perfect(x)) -> Play(x,sam))", "all x.(Perfect(x) -> PlaySam(x))", "all x.((Song(x) & Perfect(x)) -> Play(x))", "all x.((Song(x) & Perfect(x)) -> Play(x,sam))", "all x.((Song(x) & Perfect(x)) -> PlaySam(x))", "all x.((Song(x) & Perfect(x)) -> SamPlays(x))"]}
{"id": "folio_train_117", "nl": "All rabbits have fur", "fol": "all x.(IsRabbit(x) -> HasFur(x))", "prediction": ["all x.(Rabbit(x) -> HasFur(x))", "all x y.((Rabbit(x) & Rabbit(y)) -> HasFur(x,y))", "all x.((Rabbit(x) & HasFur(x)) -> HasFur(x))", "all x y z.((Rabbit(x) & Fur(y) & Fur(z)) -> HasFur(x,y,z))", "all x y z.((Rabbit(x) & Fur(y) & Fur(z)) -> Has(x,y,z))", "all x y.((Rabbit(x) & HasFur(x,y)) -> HasFur(x,y))", "all x.(Rabbit(x) -> HasFur(x))", "all x y z.((Rabbit(x) & Fur(y) & Fur(z)) -> Has(x,y))", "all x y z.((Rabbit(x) & Fur(y) & Rabbit(z)) -> HasFur(x,y,z))", "all x y z.((Rabbit(x) & Fur(y) & Has(x,y)) -> Has(x,z))", "all x y.((Rabbit(x) & Fur(y)) -> HasFur(x,y))", "all x y.((Rabbit(x) & Rabbit(y)) -> HasFur(y))", "all x y.((Rabbit(x) & Rabbit(y) & HasFur(x,y)) -> HasFur(x,y))", "all x y.((Rabbit(x) & HasFur(x,y)) -> HasFur(y))", "all x.(Bat(x) -> HasFur(x))", "all x y.((Rabbit(x) & Rabbit(y)) -> HasFur(y,x))"]}
{"id": "folio_train_118", "nl": "Some pets are rabbits.", "fol": "exists x.(IsPet(x) & IsReptile(x))", "prediction": ["exists x.(Pet(x) & Rabbit(x))", "exists x.(Pet(x) & Rabbit(x))", "exists x y.(Pet(x) & Rabbit(y))", "exists x.(Pup(x) & Rabbit(x))", "exists x.(Pet(x) & Rattling(x))", "(exists x.(Pet(x) & Rabbit(x)))", "exists x.(Pet(x) & Rattan(x))", "exists x.(Animal(x) & Rabbit(x))", "exists x y.(Pet(x) & Rabbit(y) & Pet(x))", "exists x.(Puppet(x) & Rabbit(x))", "exists x y.(Pet(x) & Rabbit(y) & Pet(x,y))", "exists x.((Pet(x) & Rabbit(x))", "exist x.(Pet(x) & Rabbit(x))", "exists x.(Pet(x) & Rabbit(x) & -Pet(x))", "all x.(Pet(x) -> Rabbit(x))", "exists x.(Pet(x) & Rabbit(y))"]}
{"id": "folio_train_119", "nl": "Some pets do not have fur.", "fol": "exists x.(IsPet(x) & -HasFur(x))", "prediction": ["exists x.(Pet(x) & -HasFur(x))", "exists x y.(Pet(x) & Pet(y) & -HasFur(x,y))", "exists x y.(Pet(x) & Pet(y) & -HasFur(x))", "exists x.(Pet(x) & -HasFur(x))", "exists x.(Pet(x) & Pet(x) & -HasFur(x))", "exists x.(Animal(x) & -HasFur(x))", "exists x.(Pet(x) & -(HasFur(x) | HasFur(x))))", "exists x.(Pet(x) & DoesNotHaveFur(x))", "exists x.(Pet(x) & -(HasFur(x) | HasFur(x)))", "exists x y.(Pet(x) & Pet(y) & -HasFur(y))", "exists x.(Pet(x) & -HasFire(x))", "exists x.((Pet(x) & -HasFur(x)) -> -HasFur(x))", "(exists x.(Pet(x) & -HasFur(x)))", "exists x.(Pet(x) & -(HasFur(x) | -HasFur(x)))", "exists x.(Pet(x) & -(HasFur(x) | Pet(x))))", "exists x.((Pet(x) & -HasFur(x)))"]}
{"id": "folio_train_120", "nl": "All video applications are software.", "fol": "all x.(VideoApplication(x) -> SoftwareApplication(x))", "prediction": ["all x.(VideoApplication(x) -> Software(x))", "all x y.((VideoApplication(x) & Software(y)) -> Software(x))", "all x.(VisualApplication(x) -> Software(x))", "all x.(ViolenceApplication(x) -> Software(x))", "all x.(VioloApplication(x) -> Software(x))", "all x.((VideoApplication(x) & Software(x)) -> Software(x))", "all x.exists y.(VideoApplication(x) & Software(y) & UsedBy(x,y))", "all x y.((VideoApplication(x) & Software(y)) -> Software(x,y))", "all x.(VideoApplication(x) -> Software(x))", "all x y.((VideoApplication(x) & VideoApplication(y)) -> Software(x))", "all x.exists y.(VideoApplication(x) & Software(y) & RunsOn(x,y))", "all x y.((VideoApplication(x) & Video(y)) -> Software(x))", "all x.exists y.(VideoApplication(x) & Software(y) & Uses(x,y))", "all x.(VideoApp(x) -> Software(x))", "all x.exists y.(VideoApplication(x) & Software(y) & InstalledIn(x,y))", "all x.exists y.(VideoApplication(x) & Software(y) & AppliedTo(x,y))"]}
{"id": "folio_train_121", "nl": "All YouTube-related applications are video applications. ", "fol": "all x.(RelatedToYoutube(x) -> VideoApplication(x))", "prediction": ["all x.(YouTubeApplication(x) -> VideoApplication(x))", "all x.((YouTubeApplication(x) & RelatedTo(x,y)) -> VideoApplication(x))", "all x.((YouTubeApplication(x) & RelatedTo(x,YouTube)) -> VideoApplication(x))", "all x.((YouTubeApplication(x) & RelatedToYouTube(x)) -> VideoApplication(x))", "all x.((YouTubeApplication(x) & Related(x)) -> VideoApplication(x))", "all x.((YouTube(x) & RelatedApplication(x)) -> VideoApplication(x))", "all x.((YouTubeApplication(x) & RelatedTo(x,youTube)) -> VideoApplication(x))", "all x.((YouTubeApplication(x) & VideoApplication(x)) -> VideoApplication(x))", "all x.(YouTubeRelatedApplication(x) -> VideoApplication(x))", "all x.((YouTubeApplication(x) & RelatedTo(x,y)) -> VideoApplication(y))", "all x.((YoutubeApplication(x) & RelatedTo(x,y)) -> VideoApplication(x))", "all x.((YouTubeApplication(x) & VideoApplication(x)) -> RelatedTo(x))", "all x.((YouTubeApplication(x) & VideoApplication(x)) -> RelatedTo(x,y))", "all x.((YouTubeApplication(x) & VideoApplication(x)) -> HasApplication(x))", "all x.((YouTubeApplication(x) & RelatedTo(x,Y)) -> VideoApplication(x))", "all x.(YouTube(x) -> VideoApplication(x))"]}
{"id": "folio_train_122", "nl": "An APP is either related to YouTube or Instagram.", "fol": "all x.(RelatedToYoutube(x) | RelatedToInstagram(x))", "prediction": ["all x.(APP(x) -> (RelatedToYouTube(x) | RelatedToInstagram(x)))", "all x.(App(x) -> (RelatedToYouTube(x) | RelatedToInstagram(x)))", "all x.(APP(x) -> (RelatedToYoutube(x) | RelatedToInstagram(x)))", "all x.(App(x) -> (RelatedToYoutube(x) | RelatedToInstagram(x)))", "all x.(APP(x) -> (RelatedTo(x,YouTube) | RelatedTo(x,Instagram)))", "all x.(App(x) -> (RelatedTo(x,YouTube) | RelatedTo(x,Instagram)))", "all x.(APP(x) -> (RelatedToYouTube(x) | RelatedToInstagram(x)))", "all x.(APP(x) -> (RelatedToYou Tube(x) | RelatedToInstagram(x)))", "all x.(App(x) -> (RelatedToYouTube(x) | RelatedToInstagram(x)))", "all x.(App(x) -> (RelatedToYou Tube(x) | RelatedToInstagram(x)))", "all x.(APP(x) -> (RelatedToYoutube(x) | RelatedToInstagram(x)))", "all x.(APP(x) -> (LinkedToYouTube(x) | RelatedToInstagram(x)))", "all x.(APP(x) -> (RelatedTo(x,y) | RelatedTo(x,z)))", "all x.(App(x) -> (RelatedTo(x,y) | RelatedTo(x,z)))", "all x.(APP(x) -> (RelatedToYoutube(x) | RelatedTo Instagram(x)))", "all x.(APP(x) -> (RelatedTo(x,y) | RelatedTo(x,y)))"]}
{"id": "folio_train_123", "nl": "All Instagram is entertainment. ", "fol": "all x.(RelatedToInstagram(x) -> EntertainmentCategory(x))", "prediction": ["all x.(Instagram(x) -> Entertainment(x))", "all x.((Instagram(x) & Entertainment(x)) -> Entertainment(x))", "all x.( Instagram(x) -> Entertainment(x))", "All x.(Instagram(x) -> Entertainment(x))", "all x.(IsInstagram(x) -> Entertainment(x))", "all x y.((Instagram(x) & Entertainment(y)) -> Entertainment(x))", "all x.(Italian(x) -> Entertainment(x))", "all x.(Instagram(x) -> Entertainment(x))", "all x.(Italy(x) -> Entertainment(x))", "all x y.((Instagram(x) & Entertainment(y)) -> Entertainment(x,y))", "all x.(( Instagram(x) & Entertainment(x)) -> Entertainment(x))", "all x.((Instagram(x) & Entertainment(x)) -> Is(x,y))", "all x.(Photogram(x) -> Entertainment(x))", "all x.(Is(x,Instagram) -> Entertainment(x))", "all x.((Instagram(x) & Entertainment(x)) -> All(x))", "(all x.(Instagram(x) -> Entertainment(x)))"]}
{"id": "folio_train_124", "nl": "All software is programmed. ", "fol": "all x.(SoftwareApplication(x) -> IsProgrammed(x))", "prediction": ["all x.(Software(x) -> Programmable(x))", "all x.(Software(x) -> Programmed(x))", "all x.(Software(x) -> Programmed(x))", "all x.(Software(x) -> Programmed(x))", "all x.(Software(x) -> Programed(x))", "all x y.((Software(x) & Software(y)) -> Programmable(x))", "all x y.((Software(x) & Software(y)) -> Programmed(x))", "all x y.((Software(x) & Software(y)) -> Programmable(x,y))", "all x y.((Software(x) & Software(y)) -> Programmed(x))", "all x y.((Software(x) & Software(y)) -> Programmed(x))", "all x.(Software(x) -> Programming(x))", "All x.(Software(x) -> Programmable(x))", "all x y.((Software(x) & Software(y)) -> Programmed(x,y))", "all x.(Software(x) -> programmable(x))", "all x y.((Software(x) & Software(y)) -> Programmed(x,y))", "all x y.((Software(x) & Software(y)) -> Programmed(x,y))"]}
{"id": "folio_train_125", "nl": "All entertainments are interesting.", "fol": "all x.(EntertainmentCategory(x) -> IsInteresting(x))", "prediction": ["all x.(Entertainment(x) -> Interesting(x))", "all x y.((Entertainment(x) & Entertainment(y)) -> Interesting(x))", "all x.((Entertainment(x) & Interesting(x)) -> Interesting(x))", "all x y.((Entertainment(x) & Entertainment(y)) -> Interesting(x,y))", "all x.(Entertainment(x) -> Interesting(x))", "all x.exists y.(Entertainment(x) & Entertainment(y) & Interesting(x,y))", "all x.exists y.(Entertainment(x) & Entertainment(y) & Interesting(x))", "all x.((Entertainment(x) & Interesting(x)) -> Interesting(x))", "all x.exists y.(Entertainment(x) & Entertainment(y) & Interesting(y))", "all x y.((Entertainment(x) & Entertainment(y)) -> Interesting(y))", "all x.exists y.(Entertainment(x) & Interesting(y))", "all x.exists y.(Entertainment(x) & Entertainment(y) & Interesting(x,y))", "all x y.((Entertainment(x) & Entertainment(y) & Interesting(x)) -> Interesting(y))", "all x.(Entertainment(x) -> Interesting(x))", "(all x.(Entertainment(x) -> Interesting(x)))", "all x.((Entertainment(x) & Interesting(x)) -> (Interesting(x) | Interesting(x)))"]}
{"id": "folio_train_126", "nl": "If something is interesting, then it is good.", "fol": "all x.(IsInteresting(x) -> IsGood(x))", "prediction": ["all x.(Interesting(x) -> Good(x))", "all x.((Interesting(x) & Good(x)) -> Interesting(x))", "all x.((Interesting(x) & Good(x)) -> Good(x))", "all x.((Interesting(x) & Good(x)) -> Interesting(x))", "all x.((Interesting(x) & Good(x)) -> (Interesting(x) & Good(x)))", "all x.((Interesting(x) & Good(x)) -> Excellent(x))", "all x.((Interesting(x) & Good(x)) -> Interessant(x))", "all x.((Interesting(x) -> Good(x))", "all x.((Interesting(x) & Good(x)) -> Intersting(x))", "all x.((Interesting(x) & Good(x)) -> -Interesting(x))", "all x.((Interesting(x) & Good(x)) -> Interested(x))", "all x.((Interesting(x) & Good(x)) -> Intriguing(x))", "all x.((Interesting(x) & Good(x)) -> Relevant(x))", "all x.((Interesting(x) & Good(x)) -> Is(x))", "all x y.((Interesting(x) & Interesting(y)) -> Good(x))", "all x.((Interesting(x) & Good(x)) -> Important(x))"]}
{"id": "folio_train_127", "nl": "TikTok is not good.", "fol": "-IsGood(TikTok)", "prediction": ["all x.(TikTok(x) -> -Good(x))", "exists x.(TikTok(x) & -Good(x))", "(-Good(TikTok))", "All x.(TikTok(x) -> -Good(x))", "all x.(TikiTok(x) -> -Good(x))", "(-GoodTikTok(TikTok))", "all x.(TitkTok(x) -> -Good(x))", "(-Good(TikTok) -> -Good(TikTok))", "-(TikTok(Tik) & Good(Tik))", "-GoodTikTok(TikTok)", "(-Good(TikTok) & -Good(TikTok))", "(-Good(TikTok) -> -Good(TikTok)))", "all x.(TikTok(x) -> NotGood(x))", "(-Good(TikTok) -> -Good(TikTok)))", "(-Good(TikTok) -> -Good(TikTok))", "-Good(TikTok)"]}
{"id": "folio_train_128", "nl": "Tiktok is a program.", "fol": "IsProgrammed(TikTok)", "prediction": ["all x.(Tiktok(x) -> Program(x))", "(Program(Tiktok) | Program(Tiktok)))", "all x.(Titktok(x) -> Program(x))", "all x.(Tiktok(x) -> Program(x))", "All x.(Tiktok(x) -> Program(x))", "exists x.(Tiktok(x) & Program(x))", "all x.(Tikitok(x) -> Program(x))", "all x.(Tiktok(x) -> Programm(x))", "all x y.((Tiktok(x) & Program(y)) -> Program(x))", "all x.(Ticktok(x) -> Program(x))", "all x y.((Tiktok(x) & Program(y)) -> Is(x,y))", "all x.(Tikiktok(x) -> Program(x))", "(Program(Tiktok) | -Program(Tiktok)))", "(Program(Tiktok) -> Program(Tiktok))", "all x y.((Tiktok(x) & Program(y)) -> Program(x,y))", "all x y.((Tiktok(x) & Program(y)) -> IsProgram(x,y))"]}
{"id": "folio_train_129", "nl": "Tiktok is either good or a program.", "fol": "(IsGood(TikTok) | IsProgrammed(TikTok))", "prediction": ["all x.(Tiktok(x) -> (Good(x) | Program(x)))", "all x.(Titktok(x) -> (Good(x) | Program(x)))", "exists x.(Tiktok(x) & (Good(x) | Program(x)))", "all x.(Tikitok(x) -> (Good(x) | Program(x)))", "all x.(Tikiktok(x) -> (Good(x) | Program(x)))", "all x.(Ticktok(x) -> (Good(x) | Program(x)))", "all x.(Tiktok(x) -> (Good(x) | Program(x)))", "all x.(Tiktok(x) -> (Good(x) | Programm(x)))", "exists x.(Tiktok(x) & (Good(x) | Program(x))))", "all x.(Tikitok(x) -> (Good(x) | Program(x)))", "(Good(Tiktok) | Program(Tiktok))", "all x.(Tiktok(x) -> (Good(x) | Programmable(x)))", "all x.(Tikik(x) -> (Good(x) | Program(x)))", "all x.(Tictok(x) -> (Good(x) | Program(x)))", "all x.(Tiktok(x) -> (Good(x) | Programming(x)))", "all x y.((Tiktok(x) & Good(y)) | Program(y))"]}
{"id": "folio_train_130", "nl": "Tiktok is not both related to youtube and a program.", "fol": "-(RelatedToYoutube(TikTok) & IsProgrammed(TikTok))", "prediction": ["all x.(Tiktok(x) -> -(RelatedToYoutube(x) & RelatedToProgram(x)))", "all x.(Tiktok(x) -> -(RelatedToYoutube(x) & RelatedToProgram(x)))", "exists x.(Tiktok(x) & -(RelatedToYoutube(x) & RelatedToProgram(x)))", "all x.(Tiktok(x) -> (-RelatedToYoutube(x) & RelatedToProgram(x)))", "all x.(Tiktok(x) -> (-RelatedToYoutube(x) & RelatedToProgram(x)))", "all x.(Tiktok(x) -> (-RelatedToYoutube(x) & -RelatedToProgram(x)))", "all x.(Tikitok(x) -> -(RelatedToYoutube(x) & RelatedToProgram(x)))", "(-(RelatedToYoutube(Tiktok) & RelatedToProgram(Tiktok)))", "exists x.(Tiktok(x) & -(RelatedToYoutube(x) & RelatedToProgram(x)))", "(-(RelatedToYoutube(Tiktok) & RelatedToProgram(Tiktok)))", "all x.(Tikitok(x) -> -(RelatedToYoutube(x) & RelatedToProgram(x)))", "all x.(Titktok(x) -> -(RelatedToYoutube(x) & RelatedToProgram(x)))", "all x.(Tiktok(x) -> (-(RelatedToYoutube(x) & RelatedToProgram(x))))", "exists x.(Tikitok(x) & -(RelatedToYoutube(x) & RelatedToProgram(x)))", "exists x.(Tiktok(x) & -(RelatedToYoutube(x) & RelatedToProgram(x))))", "all x.(Tikitok(x) -> -(RelatedToYoutube(x) & RelatedToProgram(x)))"]}
{"id": "folio_train_131", "nl": "Tiktok is either related to youtube or a program.", "fol": "(RelatedToYoutube(TikTok) | IsProgrammed(TikTok))", "prediction": ["all x.(Tiktok(x) -> (RelatedToYoutube(x) | RelatedToProgram(x)))", "all x.(Tiktok(x) -> (RelatedToYoutube(x) | RelatedToProgram(x)))", "exists x.(Tiktok(x) & (RelatedToYoutube(x) | RelatedToProgram(x)))", "all x.(Tikitok(x) -> (RelatedToYoutube(x) | RelatedToProgram(x)))", "all x.(Titktok(x) -> (RelatedToYoutube(x) | RelatedToProgram(x)))", "all x.(Ticktok(x) -> (RelatedToYoutube(x) | RelatedToProgram(x)))", "all x.(Tikiktok(x) -> (RelatedToYoutube(x) | RelatedToProgram(x)))", "all x.(Tiktok(x) -> (RelatedToYoutube(x) | RelatedToProgram(x)))", "all x.(Tikitok(x) -> (RelatedToYoutube(x) | RelatedToProgram(x)))", "all x.(Tikitok(x) -> (RelatedToYoutube(x) | RelatedToProgram(x)))", "exists x.(Tiktok(x) & (RelatedToYoutube(x) | RelatedToProgram(x)))", "all x.(Tiktok(x) -> (RelatedToYoutube(x) | RelationshipToProgram(x)))", "exists x.(Tikitok(x) & (RelatedToYoutube(x) | RelatedToProgram(x)))", "exists x.(Tiktok(x) & (RelatedToYoutube(x) | RelatedToProgram(x))))", "all x.(Tiktok(x) -> (RelatedToYoutube(x) | ProgramRelatedTo(x)))", "all x.(Tiktok(x) -> (RelatedTo(x,youtube) | RelatedTo(x,Program)))"]}
{"id": "folio_train_132", "nl": "Ordinary is an unincorporated community.", "fol": "IsUnincorporatedCommunity(Ordinary)", "prediction": ["all x.(Ordinary(x) -> UnincorporatedCommunity(x))", "all x.(Ordinary(x) -> UnincorporatedCommunity(x))", "all x.(Ordinary(x) -> -IncorporatedCommunity(x))", "all x.(Ordinary(x) -> (UnincorporatedCommunity(x) & -IncorporatedCommunity(x)))", "all x.(Ordinary(x) -> (UnincorporatedCommunity(x) & -IncorporatedCommunity(x)))", "all x.(Ordinary(x) -> UnincorporatedCompany(x))", "all x y.((Ordinary(x) & Community(y)) -> Unincorporated(x))", "All x.(Ordinary(x) -> UnincorporatedCommunity(x))", "all x y.((Ordinary(x) & Community(y)) -> Unincorporated(x,y))", "all x.(Ordinary(x) -> (UnincorporatedCommunity(x) & UnincorporatedCommunity(x)))", "all x.(Ordinary(x) -> (UnincorporatedCommunity(x) & UnincorporatedCommunity(x)))", "all x y.((Ordinary(x) & Community(y)) -> -Incorporated(x,y))", "all x.(Ordinary(x) -> (UnincorporatedCommunity(x) & Community(x)))", "all x y.((Ordinary(x) & Community(y)) -> -Incorporated(x))", "all x.(Ordinary(x) -> (UnincorporatedCommunity(x) & -IncorporatedCommunity(x)))", "all x.(Ordinary(x) -> (UnincorporatedCommunity(x) & Community(x)))"]}
{"id": "folio_train_133", "nl": "Located within Elliot County, Ordinary is on Kentucky Route 32.", "fol": "(LocatedIn(Ordinary,Elliotcounty) & LocatedOnRoute(Ordinary,Kentuckyroute32))", "prediction": ["All x.(Ordinary(x) -> (LocatedInElliotCounty(x) & OnKentuckyRoute32(x)))", "all x.(Ordinary(x) -> (LocatedInElliotCounty(x) & OnKentuckyRoute32(x)))", "(LocatedInElliotCounty(Ordinary) & KentuckyRoute32(Ordinary))", "All x.(Ordinary(x) -> (LocatedInElliotCountry(x) & OnKentuckyRoute32(x)))", "All x.(Ordinary(x) -> (LocatedInElliotCounty(x) & OnKentuckyRoute32(x)))", "(LocatedInElliotCounty(Ordinary) & OnKentuckyRoute32(Ordinary))", "All x.(Ordinary(x) -> (LocatedWithinElliotCounty(x) & OnKentuckyRoute32(x)))", "All x.((Ordinary(x) & ElliotCounty(x)) -> OnKentuckyRoute32(x))", "(LocatedWithinElliotCounty(Ordinary) & KentuckyRoute32(Ordinary))", "(LocatedWithinElliotCounty(Ordinary) & OnKentuckyRoute32(Ordinary))", "All x.(Ordinary(x) -> (LocatedInElliotCounty(x) & KentuckyRoute32(x)))", "All x y.((Ordinary(x) & ElliotCounty(y)) -> OnKentuckyRoute32(x))", "All x y.((Ordinary(x) & ElliotCounty(y)) -> OnKentuckyRoute32(x,y))", "(LocatedInElliotCounty(Ordinary) & OnKentuckyRoute32(Ordinary))", "located within ElliotCounty, Ordinary is on KentuckyRoute32.", "(LocatedInElliotCounty(Normary) & OnKentuckyRoute32(Ordinary))"]}
{"id": "folio_train_134", "nl": "Ordinary is located northwest of Sandy Hook.", "fol": "LocatedNorthwestOf(Ordinary,Sandyhook)", "prediction": ["all x.(Ordinary(x) -> LocatedNorthwestOfSandyHook(x))", "all x y.((Ordinary(x) & SandyHook(y)) -> LocatedNorthwestOf(x,y))", "Ordinary is located northwest of SandyHook.", "Ordinary is located northwest of Sandy Hook.", "all x.(Ordinary(x) -> (LocatedNorthwestOfSandyHook(x)))", "all x.(Ordinary(x) -> NorthwestOfSandyHook(x))", "all x y.((Ordinary(x) & SandyHook(y)) -> LocatedNorthwest(x,y))", "All x.(Ordinary(x) -> LocatedNorthwestOfSandyHook(x))", "all x y.((Ordinary(x) & SandyHook(y)) -> LocatedNorthwestOf(x,y))", "all x.(Ordinary(x) -> LocatedNorthwestOfSandyHook(x))", "All x.(Ordinary(x) -> NorthwestOfSandyHook(x))", "all x.(Ordinary(x) -> NorthwestOfSandyHook(x))", "all x y.((Ordinary(x) & SandyHook(y)) -> LocatedNorthwest(x,y))", "All x.(Ordinary(x) -> (LocatedNorthwestOfSandyHook(x)))", "all x y.((Ordinary(x) & SandyHocker(y)) -> LocatedNorthwestOf(x,y))", "all x.(Ordinary(x) -> (LocatedNorthwestOfSandyHook(x) & SandyHook(x)))"]}
{"id": "folio_train_135", "nl": "There are no unincorporated communities along Kentucky Route 32.", "fol": "-exists x.(IsUnincorporatedCommunity(x) & LocatedOnRoute(x,Kentuckyroute32))", "prediction": ["-exists x.(UnincorporatedCommunity(x) & AlongKentuckyRoute32(x))", "-exists x.(UnincorporatedCommunity(x) & KentuckyRoute32(x))", "-exists x.(UnincorporatedCommunity(x) & Along(x,KentuckyRoute32))", "-exists x.(UnincorporatedCommunity(x) & LocatedAlongKentuckyRoute32(x))", "-exists x.(UnincorporatedCommunity(x) & Route32(x))", "-exists x.(UnincorporatedCommunity(x) & AlongRoute32(x))", "(-exists x.(UnincorporatedCommunity(x) & AlongKentuckyRoute32(x)))", "Exists x.(UnincorporatedCommunity(x) & KentuckyRoute32(x))", "-exists x.(KentuckyRoute32(x) & UnincorporatedCommunity(x))", "Exists x.(UnincorporatedCommunity(x) & AlongKentuckyRoute32(x))", "(-exists x.(UnincorporatedCommunity(x) & KentuckyRoute32(x)))", "-exists x.(UnincorporatedCommunity(x) & AlongKentuckyRoad32(x))", "-exists x.(UnincorporatedCommunity(x) & LexingtonRoute32(x))", "-exists x.(UnincorporatedCommunity(x) & KYRoute32(x))", "KeenUnincorporatedCommunity(ke) & AlongKentuckyRoute32(ke))", "There are no unincorporatedCommunities(KentuckyRoute32)"]}
{"id": "folio_train_136", "nl": "There is an unincorporated community in Elliot County.", "fol": "exists x.(IsUnincorporatedCommunity(x) & LocatedIn(x,Elliotcounty))", "prediction": ["exists x.(UnincorporatedCommunity(x) & ElliotCounty(x))", "exists x.(UnincorporatedCommunity(x) & InElliotCounty(x))", "exists x.(UnincorporatedCommunity(x) & ElliotCountry(x))", "exists x.(UnincorporatedCommunity(x) & InElliotCountry(x))", "Exists x.(UnincorporatedCommunity(x) & InElliotCounty(x))", "Exists x.(UnincorporatedCommunity(x) & ElliotCounty(x))", "exists x.(UnincorporatedCommunity(x) & ElliotCounty(y))", "exists x y.(UnincorporatedCommunity(x) & ElliotCounty(y))", "exists x.(UnincorporatedCommunity(x) & inElliotCounty(x))", "exists x.(UnincorporatedCommunity(x) & ElliotCounsey(x))", "exists x.(UnincorporatedCommunity(x) & LocatedInElliotCounty(x))", "exist x.(UnincorporatedCommunity(x) & ElliotCounty(x))", "all x.(UnincorporatedCommunity(x) -> ElliotCounty(x))", "exists x.(UnincorporatedCommunity(x) & ElliotCouncil(x))", "exists x.(UnincorporatedCompany(x) & ElliotCounty(x))", "exists x y.(UnincorporatedCommunity(x) & County(y) & Elliot(x))"]}
{"id": "folio_train_137", "nl": "All young adults go on a diet.", "fol": "all x.(IsYoungAdult(x) -> FollowsDiet(x))", "prediction": ["all x.(YoungAdult(x) -> GoesOnDiet(x))", "all x.(YoungAdult(x) -> Diet(x))", "all x.(YoungAdult(x) -> OnDiet(x))", "all x.((YoungAdult(x) & Diet(x)) -> GoesOn(x))", "all x y.((YoungAdult(x) & Diet(y)) -> GoesOn(x,y))", "all x.(YearAdult(x) -> GoesOnDiet(x))", "all x.((YoungAdult(x) & GoesOnDiet(x)) -> GoesOnDiet(x))", "all x.((YoungAdult(x) & GoesOnDiet(x)) -> YoungAdult(x))", "all x.((YoungAdult(x) & Diet(x)) -> GoesOn(x,y))", "all x.(YearlyAdult(x) -> GoesOnDiet(x))", "all x.(Youngadult(x) -> GoesOnDiet(x))", "all x.((YoungAdult(x) & GoesOnDiet(x)) -> HasDiet(x))", "all x.(YoungAdult(x) -> GoOnDiet(x))", "all x.(YoungAdult(x) -> GoesOnDiet(x))", "all x.(YearOldAdult(x) -> GoesOnDiet(x))", "all x.(YearoldAdult(x) -> GoesOnDiet(x))"]}
{"id": "folio_train_138", "nl": "All college students are young adults.", "fol": "all x.(IsCollegeStudent(x) -> IsYoungAdult(x))", "prediction": ["all x.(CollegeStudent(x) -> YoungAdult(x))", "all x.((CollegeStudent(x) & YoungAdult(x)) -> YoungAdult(x))", "all x y.((CollegeStudent(x) & YoungAdult(y)) -> YoungAdult(x))", "all x.(CollegeStudent(x) -> YoungAdult(x))", "all x y.((CollegeStudent(x) & College(y)) -> YoungAdult(x))", "all x.(CollegiateStudent(x) -> YoungAdult(x))", "all x y.((CollegeStudent(x) & CollegeStudent(y)) -> YoungAdult(x))", "all x y.((CollegeStudent(x) & YoungAdult(y)) -> YoungAdult(x,y))", "all x.(CollegeStudent(x) -> Youngadult(x))", "all x y.((CollegeStudent(x) & College(y)) -> YoungAdult(x,y))", "all x y.((CollegeStudent(x) & Student(y)) -> YoungAdult(x))", "all x y.((CollegeStudent(x) & CollegeStudent(y)) -> YoungAdult(x,y))", "all x.(CouncilStudent(x) -> YoungAdult(x))", "all x y.((CollegeStudent(x) & YoungAdult(x)) -> YoungAdult(y))", "(all x.(CollegeStudent(x) -> YoungAdult(x)))", "all x.exists y.(CollegeStudent(x) & YoungAdult(y) & YoungAdult(x))"]}
{"id": "folio_train_139", "nl": "All Yale students are college students.", "fol": "all x.(IsYaleStudent(x) -> IsCollegeStudent(x))", "prediction": ["all x.(YaleStudent(x) -> CollegeStudent(x))", "all x.((Student(x) & Yale(x)) -> CollegeStudent(x))", "all x.(Yale(x) -> CollegeStudent(x))", "all x.(Student(x) -> CollegeStudent(x))", "all x.(YamahaStudent(x) -> CollegeStudent(x))", "all x.(YoungStudent(x) -> CollegeStudent(x))", "all x.(YaleahStudent(x) -> CollegeStudent(x))", "all x.(YaleUser(x) -> CollegeStudent(x))", "all x.(JamesStudent(x) -> CollegeStudent(x))", "all x.(NewYorkStudent(x) -> CollegeStudent(x))", "all x.(Yale Student(x) -> CollegeStudent(x))", "all x.( YaleStudent(x) -> CollegeStudent(x))", "all x.(JewishStudent(x) -> CollegeStudent(x))", "all x.((Student(x) & Yale)) -> CollegeStudent(x))", "all x.(YaleAcademic(x) -> CollegeStudent(x))", "all x.(YaleStudent(x) -> CollegeStudent(x))"]}
{"id": "folio_train_140", "nl": "Someone is either a Yale student or a Harvard student.", "fol": "all x.(IsYaleStudent(x) | IsHarvardStudent(x))", "prediction": ["all x.((Student(x) & YaleStudent(x)) | HarvardStudent(x))", "exists x.(Student(x) & (YaleStudent(x) | HarvardStudent(x)))", "all x.(Student(x) -> (YaleStudent(x) | HarvardStudent(x)))", "exists x.(Student(x) & ((YaleStudent(x) & YaleStudent(x)) | HarvardStudent(x))))", "exists x.(Student(x) & YaleStudent(x) & HarvardStudent(x))", "exists x.(Student(x) & ((YaleStudent(x) & -HarvardStudent(x)) | (-YaleStudent(x) & HarvardStudent(x)))))", "all x.(Student(x) -> (YamahaStudent(x) | HarvardStudent(x)))", "all x.((Student(x) & Yale(x)) | HarvardStudent(x))", "exists x.(Student(x) & (YamahaStudent(x) | HarvardStudent(x)))", "all x.((Student(x) & (YaleStudent(x) | HarvardStudent(x))) -> (YaleStudent(x) | HarvardStudent(x)))", "all x.((Student(x) & Yale(x)) | Harvard(x))", "exists x.(Student(x) & ((YaleStudent(x) | HarvardStudent(x))) -> (YaleStudent(x) | HarvardStudent(x))))", "exists x.(Student(x) & ((YaleStudent(x) & -HarvardStudent(x)) | (-YaleStudent(x) & HarvardStudent(x))))", "all x.((YoungStudent(x) | HarvardStudent(x)) -> (YaleStudent(x) | HarvardStudent(x)))", "all x.((Student(x) & (YaleStudent(x) | HarvardStudent(x))) -> Student(x))", "exists x.(Student(x) & ((YaleStudent(x) | HarvardStudent(x))) -> YaleStudent(x)) | HarvardStudent(x)))"]}
{"id": "folio_train_141", "nl": "All Harvard students are diligent.", "fol": "all x.(IsHarvardStudent(x) -> IsDiligent(x))", "prediction": ["all x.(HarvardStudent(x) -> Diligent(x))", "all x.((Student(x) & Harvard(x)) -> Diligent(x))", "all x.(HarvardStudent(x) -> Disciplined(x))", "all x.(Student(x) -> Diligent(x))", "all x.(HasHarvardStudent(x) -> Diligent(x))", "all x y.((Student(x) & Harvard(y)) -> Diligent(x,y))", "all x.((Student(x) & HarvardStudent(x)) -> Diligent(x))", "all x.((HarvardStudent(x) & Diligent(x)) -> Disciplined(x))", "all x.((Student(x) & Harvard(x)) -> Disciplined(x))", "all x.(HarvardStudent(x) -> Discipline(x))", "all x y.((HarvardStudent(x) & HarvardStudent(y)) -> Diligent(x,y))", "all x.(HarrisStudent(x) -> Diligent(x))", "all x y.((HarvardStudent(x) & HarvardStudent(y)) -> Diligent(x))", "all x y.((Student(x) & Harvard(y)) -> Diligent(x))", "all x.(HudsonStudent(x) -> Diligent(x))", "all x.(HarvardStudent(x) -> Diligent(x))"]}
{"id": "folio_train_142", "nl": "If Susan is a Harvard student, then she is a young adult.", "fol": "(IsHarvardStudent(Susan) -> IsYoungAdult(Susan))", "prediction": ["all x.((Student(x) & Harvard(x)) -> YoungAdult(x))", "all x.((Student(x) & HarvardStudent(x)) -> YoungAdult(x))", "all x.((Susan(x) & HarvardStudent(x)) -> YoungAdult(x))", "all x.((HarvardStudent(x) & Susan(x)) -> YoungAdult(x))", "all x.(HarvardStudent(x) -> YoungAdult(x))", "all x.((Student(x) & Harvard(x)) -> Youngadult(x))", "all x.((HasHarvardStudent(x) & YoungAdult(x)) -> YoungAdult(x))", "all x.(HasHarvardStudent(x) -> YoungAdult(x))", "all x.((StudentInHarvard(x) & Harvard(x)) -> YoungAdult(x))", "all x.((Shannon(x) & HarvardStudent(x)) -> YoungAdult(x))", "all x.((Student(x) & Harvard(x) & YoungAdult(x)) -> YoungAdult(x))", "all x.(((Student(x) & Harvard(x)) -> YoungAdult(x))", "all x.((Student(x) & HarvardStudent(x)) -> Youngadult(x))", "all x.((StudentInHarvard(x) & Susan(x)) -> YoungAdult(x))", "all x.((HasHarvardStudent(x) & YoungAdult(x)) -> Susan(x))", "all x.((HasHarvardStudent(x) & YoungAdult(x)) -> SusanAdult(x))"]}
{"id": "folio_train_143", "nl": "If Susan is a Yale student, then she does not go on a diet.", "fol": "(IsYaleStudent(Susan) -> -FollowsDiet(Susan))", "prediction": ["all x.((Susan(x) & YaleStudent(x)) -> -Diet(x))", "all x.((Student(x) & Yale(x)) -> -Diet(x))", "all x.((YaleStudent(x) & Susan(x)) -> -Diet(x))", "all x.((Student(x) & Yale(x)) -> -GoesOnDiet(x))", "all x.((Susan(x) & YaleStudent(x)) -> -GoesOnDiet(x))", "all x.((Student(x) & YaleStudent(x)) -> -Diet(x))", "all x.((Susan(x) & YaleStudent(x)) -> -DietOn(x))", "all x.((Susan(x) & YaleStudent(x)) -> -OnDiet(x))", "all x.(YaleStudent(x) -> -Diet(x))", "all x.((Student(x) & Yale(x)) -> -OnDiet(x))", "all x.(((Susan(x) & YaleStudent(x)) -> -Diet(x))", "all x.((Susan(x) & YaleStudent(x)) -> -DietOrDiet(x))", "all x.((Susan(x) & YaleStudent(x)) -> -DietOf(x,y))", "all x.((Scholar(x) & YaleStudent(x)) -> -Diet(x))", "all x.((Susan(x) & YaleStudent(x)) -> -DietOf(x))", "all x.((Student(x) & Yale(x)) -> -Digest(x))"]}
{"id": "folio_train_144", "nl": "Susan is a college student.", "fol": "IsCollegeStudent(Susan)", "prediction": ["all x.((Susan(x) & CollegeStudent(x)) -> CollegeStudent(x))", "(CollegeStudent(Susan) & CollegeStudent(Susan))", "all x.((Susan(x) & CollegeStudent(x)) -> Student(x))", "all x.((Susan(x) & CollegeStudent(x)) -> Graduate(x))", "all x.((Susan(x) & CollegeStudent(x)) -> -CollegeStudent(x))", "Susan is a college student.", "(CollegeStudent(Susan) & -CollegeStudent(Susan))", "all x.(CollegeStudent(x) -> Susan(x))", "(CollegeStudent(Susan) -> CollegeStudent(Susan))", "all x.((Susan(x) & CollegeStudent(x)) -> Is(x,y))", "all x.((Susan(x) & CollegeStudent(x)) -> (Student(x) & CollegeStudent(x)))", "all x.((Susan(x) & CollegeStudent(x)) -> (Student(x) & Student(x)))", "(CollegeStudent(Susan) | CollegeStudent(Susan))", "all x.(Susan(x) -> CollegeStudent(x))", "all x.((Susan(x) & CollegeStudent(x)) -> Graduates(x))", "all x.((Susan(x) & CollegeStudent(x)) -> Becomes(x))"]}
{"id": "folio_train_145", "nl": "Susan goes on a diet and is diligent.", "fol": "(FollowsDiet(Susan) & IsDiligent(Susan))", "prediction": ["all x.(Susan(x) -> (GoesOnDiet(x) & Diligent(x)))", "all x.((Susan(x) & Diet(x)) -> Diligent(x))", "all x y.((Susan(x) & Diet(y)) -> Diligent(x,y))", "all x.(Susan(x) -> (Diet(x) & Diligent(x)))", "all x y.((Susan(x) & Diet(y)) -> (GoesOn(x,y) & Diligent(x)))", "all x y.((Susan(x) & Diet(y)) -> Diligent(x))", "all x.((Susan(x) & Diet(y)) -> Diligent(x))", "all x y z.((Susan(x) & Diet(y) & Diligent(z)) -> (GoesOn(x,y) & Diligent(x,z)))", "all x y z.((Susan(x) & Diet(y) & Diligent(z)) -> (GoesOn(x,y) & Diligent(z)))", "(GoesOnDiet(Susan) & Diligent(Susan))", "all x y z.((Susan(x) & Diet(y) & Diligent(z)) -> (GoesOn(x,y) & Diligent(x)))", "all x y z.((Susan(x) & Diet(y) & Diligent(z)) -> GoesOn(x,y))", "all x.(Susan(x) -> (GoesOnDiet(x) & Disciplined(x)))", "all x.(Susan(x) -> (GoesOnDiet(x) & Diligent(x)))", "all x y.((Susan(x) & Diet(y) & Diligent(x)) -> GoesOn(x,y))", "all x.((Susan(x) & Diet(y)) -> Diligent(x,y))"]}
{"id": "folio_train_146", "nl": "Susan does not go on a diet and is diligent.", "fol": "(-FollowsDiet(Susan) & IsDiligent(Susan))", "prediction": ["all x.((Susan(x) & -Diet(x)) -> Diligent(x))", "all x.(Susan(x) -> (-Diet(x) & Diligent(x)))", "(-GoesOnDiet(Susan) & Diligent(Susan))", "all x.(Susan(x) -> (-GoesOnDiet(x) & Diligent(x)))", "(-Diet(Susan) & Diligent(Susan))", "all x y.((Susan(x) & Diet(y)) -> (-GoesOn(x,y) & Diligent(x)))", "all x.((Susan(x) & -Diet(x) & Diligent(x)) -> -Diet(x))", "all x.((Susan(x) & -Diet(x) & Diligent(x)) -> -GoesOn(x,y))", "all x.((Susan(x) & -GoesOnDiet(x)) -> Diligent(x))", "all x.((Susan(x) & -Diet(x) & Diligent(x)) -> -GoesOn(x))", "all x.((Susan(x) & -Diet(x)) -> Disciplined(x))", "all x.((Susan(x) & -diet(x)) -> Diligent(x))", "exists x.(Susan(x) & -Diet(x) & Diligent(x))", "exists x.(Susan(x) & -GoesOnDiet(x) & Diligent(x))", "all x y.((Susan(x) & Diet(y)) -> (-Diet(x,y) & Diligent(x,y)))", "all x y.((Susan(x) & Diet(y)) -> (-Diet(x,y) & Diligent(x)))"]}
{"id": "folio_train_147", "nl": "Vic DiCara plays guitar and bass.", "fol": "(PlaysInstrument(Vicdicara,Guitar) & PlaysInstrument(Vicdicara,Bass))", "prediction": ["all x.(VicDiCara(x) -> (PlaysGuitar(x) & PlaysBass(x)))", "(PlaysGuitar(vicDiCara) & PlaysBass(vicDiCara))", "(PlaysGuitar(VicDiCara) & PlaysBass(VicDiCara))", "(PlaysGuitar(VictorDiCara) & PlaysBass(VictorDiCara))", "all x.(VicDiCara(x) -> (PlaysGuitar(x) | PlaysBass(x)))", "all x.(VicDiacara(x) -> (PlaysGuitar(x) & PlaysBass(x)))", "all x y.((VicDiCara(x) & Guitar(y)) -> (Plays(x,y) & Plays(x,y)))", "all x.(Vic(x) -> (PlaysGuitar(x) & PlaysBass(x)))", "(playsGuitar(vicDiCara) & PlaysBass(vicDiCara))", "all x y.((VicDiCara(x) & Guitar(y)) -> (Plays(x,y) & Plays(x,z)))", "(playsGuitar(VicDiCara) & PlaysBass(VicDiCara))", "all x y.((VicDiCara(x) & Guitar(y)) -> (Plays(x,y) | Plays(x,y)))", "(PlaysGuitar(vic-diCara) & PlaysBass(vic-diCara))", "exists x.(VicDiCara(x) & PlaysGuitar(x) & PlaysBass(x))", "(Plays(VicDiCara,Guitar) & Plays(VicDiCara,Bass))", "all x y.((VicDiCara(x) & Guitar(y)) -> Plays(x,y))"]}
{"id": "folio_train_148", "nl": "The only style of music Vic DiCara plays is punk music.", "fol": "-exists x.(PlaysMusicStyle(Vicdicara,Punk) & PlaysMusicStyle(Vicdicara,x))", "prediction": ["all x.((MusicStyle(x) & VicDiCaraPlays(x)) -> PunkMusic(x))", "all x.((MusicStyle(x) & VicDiCaraPlays(x)) -> Punk(x))", "all x.((MusicStyle(x) & VicDiCaraPlays(x)) -> PunkMusic(x))", "all x y.((MusicStyle(x) & VicDiCara(y)) -> PlaysPunk(y))", "all x.((MusicStyle(x) & VicDiCaraPlays(x)) -> PlaysPunk(x))", "all x.((MusicStyle(x) & VicDiCara(x)) -> PlaysPunk(x))", "all x.((MusicStyle(x) & PlaysPunk(x)) -> VicDiCaraPlays(x))", "all x y.((MusicStyle(x) & MusicStyle(y) & VicDiCara(x)) -> PlaysPunk(x,y))", "all x y.((MusicStyle(x) & VicDiCara(y) & Plays(x,y)) -> PunkMusic(y))", "all x.((MusicStyle(x) & VicDiCara(x)) -> PunkMusic(x))", "all x.((MusicStyle(x) & VicDiaraPlays(x)) -> PunkMusic(x))", "All x.((MusicStyle(x) & VicDiCaraPlays(x)) -> PunkMusic(x))", "all x.((MusicStyle(x) & VicDiCaraPlays(x)) -> PlaysPunkMusic(x))", "all x.((MusicalStyle(x) & VicDiCaraPlays(x)) -> PunkMusic(x))", "all x y.((MusicStyle(x) & VicDiCara(y)) -> PlaysPunk(x,y))", "all x y.((MusicStyle(x) & MusicStyle(y) & VicDiCara(x)) -> PlaysPunk(x))"]}
{"id": "folio_train_149", "nl": "Vic DiCara played in the band Inside Out.", "fol": "PlayedInBand(Vicdicara,InsideOut)", "prediction": ["all x y.((VicDiCara(x) & Band(y)) -> PlayedInInsideOut(x,y))", "all x.(VicDiCara(x) -> PlayedInInsideOut(x))", "all x y.((VicDiCara(x) & Band(y)) -> PlayedIn(x,y))", "all x y.((VicDiCara(x) & BandInsideOut(y)) -> PlayedIn(x,y))", "all x y z.((VicDiCara(x) & Band(y) & Band(z)) -> PlayedIn(x,y,z))", "all x y z.((VicDiCara(x) & Band(y) & Band(z)) -> PlayedInInsideOut(x,y,z))", "all x y z.((VicDiCara(x) & Band(y) & InsideOut(z)) -> PlayedIn(x,y,z))", "all x y z.((VicDiCara(x) & Band(y) & InsideOut(z)) -> PlayedIn(x,y,z))", "all x.(VicDiCara(x) -> PlayedInBandInsideOut(x))", "all x y.((VicDiCara(x) & Band(y)) -> PlayedInInsideOut(x))", "all x y z.((VicDiCara(x) & Band(y) & OutsideOut(z)) -> PlayedIn(x,y,z))", "all x y z.((VicDiCara(x) & Band(y) & Band(z)) -> PlayedInInsideOut(x,y))", "all x.((VicDiCara(x) & BandInsideOut(x)) -> PlayedIn(x,InsideOut))", "(InsideOut(VicDiCara) -> PlayedIn(VicDiCara))", "all x y z.((VicDiCara(x) & Band(y) & Band(z)) -> PlayedIn(x,y))", "all x.((VicDiCara(x) & BandInsideOut(x)) -> PlayedIn(x,y))"]}
{"id": "folio_train_150", "nl": "Inside Out was a punk band.", "fol": "PunkBand(InsideOut)", "prediction": ["InsideOut was a punk band.", "All x.(InsideOut(x) -> PunkBand(x))", "all x.(InsideOut(x) -> PunkBand(x))", "InsideOut was a punkband.", "All x.(InsideOut(x) -> PunkBand(x))", "InsideOut (PunkBand)", "all x.(InsideOut(x) -> PunkBand(x))", "All x.((InsideOut(x) & PunkBand(x)) -> InsideOut(x))", "All x.((InsideOut(x) & PunkBand(x)) -> InsideOut(x))", "All x.((InsideOut(x) & PunkBand(x)) -> PunkBand(x))", "All x.((InsideOut(x) & PunkBand(x)) -> PunkBand(x))", "All x.((InsideOut(x) & PunkBand(x)) -> -PunkBand(x))", "InsideOut(x) -> PunkBand(x))", "All x.((InsideOut(x) & PunkBand(x)) -> -PunkBand(x))", "All x.(InsideOut(x) -> PunkBand(x))", "InsideOut(insideout) -> PunkBand(insideout))"]}
{"id": "folio_train_151", "nl": "A musician of Inside Out plays bass.", "fol": "exists x.(PlayedInBand(x,InsideOut) & PlaysInstrument(x,Bass))", "prediction": ["all x.(InsideOutMusician(x) -> PlaysBass(x))", "all x.((Musician(x) & InsideOut(x)) -> PlaysBass(x))", "all x y.((Musician(x) & InsideOut(y)) -> PlaysBass(x,y))", "all x.(InsideOut(x) -> PlaysBass(x))", "exists x.(Musician(x) & InsideOut(x) & PlaysBass(x))", "all x y z.((Musician(x) & InsideOut(y) & Bass(z)) -> Plays(x,y,z))", "all x y z.((Musician(x) & InsideOut(y) & Bass(z)) -> Plays(x,z))", "all x y.((Musician(x) & InsideOut(y) & PlaysBass(x,y)) -> Plays(x,y))", "all x y z.((Musician(x) & InsideOut(y) & Bass(z)) -> Plays(x,y))", "all x y.((Musician(x) & InsideOut(y)) -> PlaysBass(x))", "all x.((MusicianOfInsideOut(x)) -> PlaysBass(x))", "All x.((Musician(x) & InsideOut(x)) -> PlaysBass(x))", "all x y.((Musician(x) & InsideOut(y)) -> PlaysBass(y))", "all x y.((Musician(x) & InsideOut(y) & PlaysBass(x)) -> Plays(x,y))", "all x.((MusicianOfInsideOut(x) & PlaysBass(x)) -> Plays(x))", "all x y.((Musician(x) & InsideOut(y) & Bass(y)) -> Plays(x,y))"]}
{"id": "folio_train_152", "nl": "All athletes are good at sports.", "fol": "all x.(IsAthlete(x) -> IsGoodAtSports(x))", "prediction": ["all x.(Athlete(x) -> GoodAtSport(x))", "all x.(Athlete(x) -> GoodAtSports(x))", "all x y.((Athlete(x) & Sport(y)) -> GoodAt(x,y))", "all x.((Athlete(x) & GoodAtSport(x)) -> GoodAtSport(x))", "all x y.((Athlete(x) & Sports(y)) -> GoodAt(x,y))", "all x.exists y.(Athlete(x) & Sport(y) & GoodAt(x,y))", "all x.((Athlete(x) & GoodAtSports(x)) -> GoodAtSports(x))", "all x.(Athlete(x) -> GoodAtSoccer(x))", "all x.(Athlete(x) -> GoodAtSport(x))", "all x.((Athlete(x) & GoodAtSports(x)) -> GoodAtSport(x))", "exists x.(Athlete(x) & GoodAtSport(x))", "all x.(Athlete(x) -> GoodAt(x,Sports))", "all x.(Athlete(x) -> GoodAt(x))", "all x.(Athlete(x) -> GoodAtStanding(x))", "(all x.(Athlete(x) -> GoodAtSport(x)))", "all x.(Athlete(x) -> GoodAt(x,Sport))"]}
{"id": "folio_train_153", "nl": "All Olympic gold medal winners are good athletes.", "fol": "all x.(IsOlympicGoldMedalWinner(x) -> IsAthlete(x))", "prediction": ["all x.(OlympicGoldMedalWinner(x) -> GoodAthlete(x))", "all x.((OlympicGoldMedalWinner(x) & GoodAthlete(x)) -> GoodAthlete(x))", "all x.(OlympicGoldMedalWinning(x) -> GoodAthlete(x))", "all x.(GoldMedalWinner(x) -> GoodAthlete(x))", "all x.((OlympicGoldMedalWinner(x) & GoodAthlete(x)) -> Good(x))", "all x.((OlympicGoldMedalWinner(x) & GoodAthlete(x)) -> GreatAthlete(x))", "all x.((OlympicGoldMedalWinner(x) & GoodAthlete(x)) -> ExcellentAthlete(x))", "all x.(OlympicGoldMedalWinner(x) -> GoodAthlete(x))", "all x.((OlympicGoldMedalWinning(x) & GoodAthlete(x)) -> GoodAthlete(x))", "all x.(OlympicGoldMedalWinner(x) -> (GoodAthlete(x) & GoodAthlete(x)))", "all x.((OlympicGoldMedalWinner(x) & GoodAthlete(x)) -> Athlete(x))", "all x y.((OlympicGoldMedalWinner(x) & OlympicGoldMedal(y)) -> GoodAthlete(x))", "all x.((OlympicGoldMedalWinner(x) & GoodAthlete(x)) -> -GoodAthlete(x))", "all x.(OlympicGoldMedalWinner(x) -> GoodAthletes(x))", "all x.((OlympicGoldMedalWinner(x) & GoodAthlete(x)) -> GoldMedal(x))", "all x.(OlympicGoldMedalWonder(x) -> GoodAthlete(x))"]}
{"id": "folio_train_154", "nl": "No scientists are good at sports.", "fol": "all x.(IsScientist(x) -> -IsGoodAtSports(x))", "prediction": ["-exists x.(Scientist(x) & GoodAtSport(x))", "-exists x.(Scientist(x) & GoodAtSports(x))", "all x.(Scientist(x) -> -GoodAtSports(x))", "all x.(Scientist(x) -> -GoodAtSport(x))", "-all x.(Scientist(x) -> GoodAtSports(x))", "-all x.(Scientist(x) -> GoodAtSport(x))", "(-exists x.(Scientist(x) & GoodAtSports(x)))", "(-exists x.(Scientist(x) & GoodAtSport(x)))", "-exists x.(Scientist(x) & GoodAt(x,Sports))", "all x.(Scientist(x) -> GoodAtSports(x))", "-exists x.(Scientist(x) & GoodAtSoccer(x))", "\u2013exists x.(Scientist(x) & GoodAtSport(x))", "all x.(Scientist(x) -> GoodAtSport(x))", "\u2013exists x.(Scientist(x) & GoodAtSports(x))", "\u2013 exists x.(Scientist(x) & GoodAtSport(x))", "-exists x.(Scientist(x) & GoodAt(x,sports))"]}
{"id": "folio_train_155", "nl": "All Nobel laureates are scientists.", "fol": "all x.(IsNobelLaureate(x) -> IsScientist(x))", "prediction": ["all x.(NobelLaureate(x) -> Scientist(x))", "all x.(NobelLaureat(x) -> Scientist(x))", "all x.(NobelLaureate(x) -> Scientist(x))", "all x.( NobelLaureate(x) -> Scientist(x))", "all x.((NobelLaureate(x) & Scientist(x)) -> NobelLaureate(x))", "all x.(NobelLaureate(x) -> Scientist(x))", "all x.(NelsonLaureate(x) -> Scientist(x))", "all x.(PrincipalLaureate(x) -> Scientist(x))", "all x.(NobelLaureate(x) -> Science(x))", "all x.((NobelLaureate(x) & Scientist(x)) -> NobelLaureate(x))", "all x.((NobelLaureate(x) & Scientist(x)) -> Laureate(x))", "all x.((NobelLaureate(x) & Scientist(x)) -> -Scientist(x))", "all x y.((NobelLaureate(x) & Scientist(y)) -> Becomes(x,y))", "all x.(NovalleLaureate(x) -> Scientist(x))", "all x y.((NobelLaureate(x) & Scientist(y)) -> Is(x,y))", "all x.(NobelLaureate(x) -> Scientist(x))"]}
{"id": "folio_train_156", "nl": "Amy is good at sports or Amy is an Olympic gold medal winner.", "fol": "(IsGoodAtSports(Amy) | IsOlympicGoldMedalWinner(Amy))", "prediction": ["(all x.(Amy(x) -> GoodAtSports(x)) | (Amy(x) -> OlympicGoldMedalWinner(x))))", "(all x.(Amy(x) -> (GoodAtSports(x) | OlympicGoldMedalWinner(x))))", "(exists x.(Amy(x) & GoodAtSports(x)) | exists y.(Amy(y) & OlympicGoldMedalWinner(y))))", "all x.((Amy(x) & (GoodAtSports(x) | OlympicGoldMedalWinner(x))) -> GoodAtSports(x))", "(all x.((Amy(x) & GoodAtSports(x)) | (Amy(x) & OlympicGoldMedalWinner(x))))", "(all x.(Amy(x) -> GoodAtSports(x)) | (Amy(x) -> OlympicGoldMedalWinner(x))))", "(all x.(Amy(x) -> GoodAtSport(x)) | (Amy(x) -> OlympicGoldMedalWinner(x))))", "(exists x.(Amy(x) & (GoodAtSports(x) | OlympicGoldMedalWinner(x))))", "all x.(Amy(x) -> (GoodAtSports(x) | OlympicGoldMedalWinner(x)))", "(all x.(Amy(x) -> GoodAtSports(x)) | (Amy(x) & OlympicGoldMedalWinner(x))))", "exists x.(Amy(x) & ((GoodAtSports(x) | OlympicGoldMedalWinner(x))) -> GoodAtSports(x)))", "(all x.((Amy(x) & GoodAtSports(x)) | OlympicGoldMedalWinner(x))) -> GoodAtSports(x))", "exists x.(Amy(x) & (GoodAtSports(x) | OlympicGoldMedalWinner(x)))", "(all x.(Amy(x) -> (GoodAtSports(x) | OlympicGoldMedalWinner(x))))", "all x.(Amy(x) -> ((GoodAtSports(x) | OlympicGoldMedalWinner(x))))", "exists x.(Amy(x) & (GoodAtSports(x) | OlympicGoldMedalWinner(x))))"]}
{"id": "folio_train_157", "nl": "If Amy is not a Nobel laureate, then Amy is not an Olympic gold medal winner.", "fol": "(-IsNobelLaureate(Amy) -> -IsOlympicGoldMedalWinner(Amy))", "prediction": ["all x.((Amy(x) & -NobelLaureate(x)) -> -OlympicGoldMedalWinner(x))", "all x.((Amy(x) & -NobelLaureate(x)) -> -OlympicGoldMedalWinner(x))", "all x.((NobelLaureate(x) & -NobelLaureate(x)) -> -OlympicGoldMedalWinner(x))", "all x.((Amy(x) & -NobelLaureate(x)) -> -OlympicGoldMedalWinner(x))", "all x.((NobelLaureate(x) & -OlympicGoldMedalWinner(x)) -> -OlympicGoldMedalWinner(x))", "all x.((Amy(x) & NobelLaureate(x)) -> -OlympicGoldMedalWinner(x))", "all x.(((Amy(x) & -NobelLaureate(x)) -> -OlympicGoldMedalWinner(x))", "all x.((Amy(x) & -NobelLaureate(x)) -> -OlympicGoldMedalWonder(x))", "all x.((Amy(x) & -NobelLaureat(x)) -> -OlympicGoldMedalWinner(x))", "all x.((Amy(x) & -NovallegeLaureate(x)) -> -OlympicGoldMedalWinner(x))", "all x.((Amy(x) & - NobelLaureate(x)) -> -OlympicGoldMedalWinner(x))", "all x.((Amy(x) & -PrincipalLaureate(x)) -> -OlympicGoldMedalWinner(x))", "all x.((Amy(x) & NobelLaureate(x)) -> -OlympicGoldMedalWinner(x))", "all x.((Amy(x) & -Novallumber(x)) -> -OlympicGoldMedalWinner(x))", "all x.((Amy(x) & -NobelLaureate(x)) -> -OlympicGoldMedalWonner(x))", "all x.((NobelLaureate(x) & -OlympicGoldMedalWinner(x)) -> -Amy(x))"]}
{"id": "folio_train_158", "nl": "Amy is an athlete.", "fol": "IsAthlete(Amy)", "prediction": ["all x.(Athlete(x) -> Amy(x))", "All x.(Athlete(x) -> Amy(x))", "(Athlete(Amy) & Athlete(Amy))", "(Athlete(Amy) & Athlete(Amy))", "(Athlete(Amy) & -Athlete(Amy))", "all x.(Athlete(x) -> Amy(x))", "Amy is an athlete.", "Amy is an Athlete(Amy)", "(Athlete(Amy) -> Athlete(Amy))", "All x.(Athlete(x) -> Amy(x))", "Amy is an Athlete.", "Amy is an Athlete(a)", "(Athlete(Amy) & Athlete(Amy))", "(Athlete(Amy) & LivesIn(Amy,Amy))", "(Athlete(Amy) -> Athlete(Amy))", "(Athlete(Amy) & Athlete(Amy,Amy))"]}
{"id": "folio_train_159", "nl": "Amy is neither a scientist nor an Olympic gold medal winner.", "fol": "(-IsScientist(Amy) & -IsOlympicGoldMedalWinner(Amy))", "prediction": ["all x.(Amy(x) -> (-Scientist(x) & -OlympicGoldMedalWinner(x)))", "all x.((Amy(x) & -(Scientist(x) | OlympicGoldMedalWinner(x))) -> -(Scientist(x) & -OlympicGoldMedalWinner(x)))", "(-(Scientist(Amy) & -OlympicGoldMedalWinner(Amy)) | (-Scientist(Amy) & OlympicGoldMedalWinner(Amy))))", "all x.((Amy(x) & -(Scientist(x) | OlympicGoldMedalWinner(x))) -> -Scientist(x))", "all x.((Amy(x) & -Scientist(x) & -OlympicGoldMedalWinner(x)) -> -Scientist(x))", "(-(Scientist(Amy) & -OlympicGoldMedalWinner(Amy)) | (-Scientist(Amy) & -OlympicGoldMedalWinner(Amy))))", "(-(Scientist(Amy) & -OlympicGoldMedalWinner(Amy)) | (Scientist(Amy) & -OlympicGoldMedalWinner(Amy))))", "all x.((Amy(x) & -(Scientist(x) | OlympicGoldMedalWinner(x))) -> -(Scientist(x) & OlympicGoldMedalWinner(x)))", "all x.((Amy(x) & -(Scientist(x) | OlympicGoldMedalWinner(x))) -> -(Scientist(x) & -OlympicGoldMedalWinner(x))))", "all x.((Amy(x) & -(Scientist(x) | OlympicGoldMedalWinner(x))) -> -(Scientist(x) | OlympicGoldMedalWinner(x)))", "(-(Scientist(Amy) & -OlympicGoldMedalWinner(Amy)) -> -Scientist(Amy))", "-(Scientist(Amy) & -OlympicGoldMedalWinner(Amy))", "(-(Scientist(Amy) & -OlympicGoldMedalWinner(Amy)) | (Scientist(Amy) & OlympicGoldMedalWinner(Amy))))", "(-(Scientist(Amy) & -OlympicGoldMedalWinner(Amy)) | -(Scientist(Amy) & OlympicGoldMedalWinner(Amy))))", "(-(Scientist(Amy) & -OlympicGoldMedalWinner(Amy)) | (-Scientist(Amy) & OlympicGoldMedalWinner(Amy))))", "all x.((Amy(x) & -(Scientist(x) | OlympicGoldMedalWinner(x))) -> -(Scientist(x) | OlympicGoldMedalWinner(x))))"]}
{"id": "folio_train_160", "nl": "If Amy is not an Olympic gold medal winner, then Amy is a Nobel laureate.", "fol": "(-IsOlympicGoldMedalWinner(Amy) -> IsNobelLaureate(Amy))", "prediction": ["all x.((Amy(x) & -OlympicGoldMedalWinner(x)) -> NobelLaureate(x))", "all x.((Amy(x) & -OlympicGoldMedalWinner(x)) -> NobelLaureate(x))", "all x.(((Amy(x) & -OlympicGoldMedalWinner(x)) -> NobelLaureate(x))", "all x.((Amy(x) & -OlympicGoldMedalWinner(x)) -> NobelLaureate(x))", "all x.((Amy(x) & -OlympicGoldMedalWonder(x)) -> NobelLaureate(x))", "all x.((Amy(x) & -OlympicGoldMedalWinner(x) & OlympicGoldMedalWinner(x)) -> NobelLaureate(x))", "all x.((Amy(x) & -OlympicGoldMedalWinning(x)) -> NobelLaureate(x))", "all x.((Amy(x) & -OlympicGoldMedalWonner(x)) -> NobelLaureate(x))", "all x.((Amazon(x) & -OlympicGoldMedalWinner(x)) -> NobelLaureate(x))", "all x.((Amy(x) & -OlympicGoldMedalWarrior(x)) -> NobelLaureate(x))", "all x.((Amber(x) & -OlympicGoldMedalWinner(x)) -> NobelLaureate(x))", "all x.((Amy(x) & -OlympicGoldMedalWINner(x)) -> NobelLaureate(x))", "all x.((Amy(x) & -OlympicGoldMedalWinner(x)) -> NobelLaureat(x))", "All x.((Amy(x) & -OlympicGoldMedalWinner(x)) -> NobelLaureate(x))", "all x.((Apple(x) & -OlympicGoldMedalWinner(x)) -> NobelLaureate(x))", "all x.((Person(x) & -OlympicGoldMedalWinner(x)) -> NobelLaureate(x))"]}
{"id": "folio_train_161", "nl": "All fruits with the color red contain a large amount of vitamin C.", "fol": "all x.(FruitsWithColorRed(x) -> ContainsLargeAmountOfVitaminC(x))", "prediction": ["all x.((Fruit(x) & ColorRed(x)) -> ContainsLargeAmountOfVitaminC(x))", "all x.((Fruit(x) & ColorRed(x)) -> LargeAmountOfVitaminC(x))", "all x.((Fruit(x) & RedColor(x)) -> ContainsLargeAmountOfVitaminC(x))", "all x.((Fruit(x) & RedColor(x)) -> LargeAmountOfVitaminC(x))", "all x.((Fruit(x) & HasColorRed(x)) -> ContainsLargeAmountOfVitaminC(x))", "all x.((Fruit(x) & ColorRed(x)) -> HasLargeAmountOfVitaminC(x))", "all x.((Fruit(x) & ColorRed(x)) -> (ContainsLargeAmountOfVitaminC(x)))", "all x.((Fruit(x) & ColorRed(x)) -> HugeAmountOfVitaminC(x))", "all x.((Fruit(x) & ColorRed(x)) -> ContainLargeAmountOfVitaminC(x))", "all x.((Fruit(x) & HasColorRed(x)) -> LargeAmountOfVitaminC(x))", "all x y.((Fruit(x) & ColorRed(x)) -> ContainsLargeAmountOfVitaminC(y))", "all x y.((Fruit(x) & ColorRed(x) & Fruit(y)) -> ContainsLargeAmountOfVitaminC(y))", "all x.(Fruit(x) & ColorRed(x) -> ContainsLargeAmountOfVitaminC(x))", "all x.((Fruit(x) & ColorRed(x)) -> LongAmountOfVitaminC(x))", "all x.((Fruit(x) & ColorRed(x)) -> HighVitaminC(x))", "all x y.((Fruit(x) & ColorRed(x) & Fruit(y)) -> ContainsLargeAmountOfVitaminC(x,y))"]}
{"id": "folio_train_162", "nl": "All apples are fruits with the color red.", "fol": "all x.(IsApple(x) -> FruitsWithColorRed(x))", "prediction": ["all x.(Apple(x) -> Fruit(x) & ColorRed(x))", "all x.(Apple(x) -> (Fruit(x) & ColorRed(x)))", "all x.(Apple(x) -> Fruit(x) & HasColorRed(x))", "all x.(Apple(x) -> FruitWithColorRed(x))", "all x.(Apple(x) -> (Fruit(x) & HasColorRed(x)))", "all x.(Apple(x) -> Fruit(x) & RedColor(x))", "all x.(Apple(x) -> Fruit(x,Red))", "all x.(Apple(x) -> (Fruit(x) & RedColor(x)))", "all x.(Apple(x) -> (Fruit(x) & Red(x)))", "all x.(Apple(x) -> Fruit(x))", "all x.(Apple(x) -> (Fruit(x) & ColorRed(x)))", "all x.(Apple(x) -> Fruit(x) & Color(x,red))", "all x.(Apple(x) -> Fruit(x) & Color(x,Red))", "all x.(Apple(x) -> Fruit(x) & HasColor(x,Red))", "all x.(Apple(x) -> (Fruit(x) & Color(x,red)))", "all x.(Apple(x) -> Fruit(x,y) & ColorRed(y))"]}
{"id": "folio_train_163", "nl": "All fruits containing a large amount of vitamin C are beneficial to people. ", "fol": "all x.(ContainsLargeAmountOfVitaminC(x) -> IsBeneficialToPeople(x))", "prediction": ["all x.((Fruit(x) & LargeAmountOfVitaminC(x)) -> BeneficialToPeople(x))", "all x.((Fruit(x) & ContainsLargeAmountOfVitaminC(x)) -> BeneficialToPeople(x))", "all x.((Fruit(x) & LargeAmountOfVitaminC(x)) -> BeneficialToPerson(x))", "all x.((Fruit(x) & ContainsLargeAmountOfVitaminC(x)) -> BeneficialToPerson(x))", "all x.((Fruit(x) & LargeAmountOfVitaminC(x)) -> BeneficialForPeople(x))", "all x.((Fruit(x) & ContainsLargeAmountOfVitaminC(x)) -> BeneficialForPeople(x))", "all x y.((Fruit(x) & LargeAmountOfVitaminC(x) & Contains(x,y)) -> BeneficialToPeople(x))", "all x.((Fruit(x) & HasLargeAmountOfVitaminC(x)) -> BeneficialToPeople(x))", "all x.((Fruit(x) & HugeAmountOfVitaminC(x)) -> BeneficialToPeople(x))", "all x.((Fruit(x) & LargeAmountOfVitaminC(x)) -> BeneficialToPopulation(x))", "all x y.((Fruit(x) & ContainsLargeAmountOfVitaminC(x)) -> BeneficialToPeople(y))", "all x.((Fruit(x) & LargeAmountOfVitaminC(x)) -> BeneficialForPerson(x))", "all x.((Fruit(x) & ContainsLargeAmountOfVitaminC(x)) -> BeneficialToPopulation(x))", "all x y.((Fruit(x) & LargeAmountOfVitaminC(x)) -> BeneficialToPeople(y))", "all x.((Fruit(x) & ContainsLargeAmountOfVitaminC)) -> BeneficialToPeople(x))", "all x.((Fruit(x) & LongAmountOfVitaminC(x)) -> BeneficialToPeople(x))"]}
{"id": "folio_train_164", "nl": "No fruits that are beneficial to people are on a warning list.", "fol": "all x.(IsBeneficialToPeople(x) -> -IsOnWarningList(x))", "prediction": ["all x.((Fruit(x) & BeneficialToPeople(x)) -> WarningList(x))", "all x.((Fruit(x) & BeneficialToPeople(x)) -> -WarningList(x))", "all x.((Fruit(x) & BeneficialToPerson(x)) -> WarningList(x))", "all x.((Fruit(x) & BeneficialToPeople(x)) -> NoWarningList(x))", "all x.((Fruit(x) & BeneficialForPeople(x)) -> WarningList(x))", "all x y.((Fruit(x) & BeneficialToPeople(x)) -> -WarningList(y))", "-exists x.(Fruit(x) & BeneficialToPeople(x))", "all x.((Fruit(x) & BeneficialToPerson(x)) -> -WarningList(x))", "all x y.((Fruit(x) & BeneficialToPeople(x)) -> -WarningList(x))", "all x.((Fruit(x) & BenefitfulToPeople(x)) -> WarningList(x))", "all x.((Fruit(x) & BeneficialForPeople(x)) -> -WarningList(x))", "all x.((Fruit(x) & BeneficialToPeople(x)) -> NotOnWarningList(x))", "-all x.((Fruit(x) & BeneficialToPeople(x)) -> WarningList(x))", "all x y.((Fruit(x) & BeneficialToPeople(x)) -> -WarningList(x,y))", "all x.((Fruit(x) & BeneficialForPerson(x)) -> WarningList(x))", "all x y.((Fruit(x) & BeneficialToPeople(x)) -> WarningList(y))"]}
{"id": "folio_train_165", "nl": "If K is not beneficial to people and also not an apple, then it is a fruit with the color red.", "fol": "(-(IsBeneficialToPeople(k) & IsApple(k)) -> FruitsWithColorRed(k))", "prediction": ["all x.((K(x) & -BeneficialToPeople(x) & -Apple(x)) -> FruitWithColorRed(x))", "all x.((K(x) & -BeneficialToPeople(x) & -Apple(x)) -> Fruit(x) & ColorRed(x))", "all x.((Fruit(x) & -BeneficialToPeople(x) & -Apple(x)) -> FruitWithColorRed(x))", "all x.((K) & -BeneficialToPeople(x) & -Apple(x)) -> FruitWithColorRed(x))", "all x.((K(x) & -BeneficialToPeople(x) & -Apple(x)) -> Fruit(x))", "all x.((K(x) & -BeneficialToPeople(x) & -Apple(x)) -> FruitRed(x))", "all x.((K) & -BeneficialToPeople(x) & -Apple(x)) -> Fruit(x) & ColorRed(x))", "all x.((Fruit(x) & -BeneficialToPeople(x) & -Apple(x)) -> HasColorRed(x))", "all x.((Fruit(x) & -BeneficialToPeople(x) & -Apple(x)) -> ColorRed(x))", "all x.((K(x) & -BeneficialToPeople(x) & -Apple(x)) -> FruitWithColourRed(x))", "all x.((K(x) & -BenefitfulToPeople(x) & -Apple(x)) -> FruitWithColorRed(x))", "all x.((K(x) & -BeneficialToPeople(x) & -Apple(x)) -> FruitWithRedColor(x))", "all x.((K(x) & -BeneficialToPeople(x) & -Apple(x)) -> FruitOfColorRed(x))", "all x.((Fruit(x) & -BeneficialToPeople(x) & -Apple(x)) -> Fruit(x) & ColorRed(x))", "all x.((K(x) & -BeneficialToPeople(x) & -Apple(x)) -> Fruit(x) & RedColor(x))", "all x.((K(x) & -BeneficialToPeople(x) & -Apple(x)) -> FruitColorRed(x))"]}
{"id": "folio_train_166", "nl": "K is an apple.", "fol": "IsApple(k)", "prediction": ["all x.(Apple(x) -> Apple(x))", "all x.(Apple(x) -> K(x))", "All x.(Apple(x) -> Apple(x))", "all x.(Apple(x) -> -Apple(x))", "exists x.(Apple(x) & Apple(x))", "all x.(Apple(x) -> Apple(x))", "All x.(Apple(x) -> K(x))", "all x y.((Apple(x) & Apple(y)) -> Is(x,y))", "all x y.((Apple(x) & Apple(y)) -> Apple(x))", "all x.(Apple(x) -> (Apple(x) & Apple(x)))", "all x.((Apple(x) & Apple(x)) -> K(x))", "all x y.((Apple(x) & Apple(y)) -> Has(x,y))", "all x.(Apple(x) -> Is(x,y))", "all x.(K(x) -> Apple(x))", "(Apple(K) & Apple(K))", "all x.(Apple(x) -> K.(Apple(x)))"]}
{"id": "folio_train_167", "nl": "K either contains a large amount of vitamin C or is on a warning list.", "fol": "(ContainsLargeAmountOfVitaminC(k) | IsOnWarningList(k))", "prediction": ["all x.(K(x) -> (ContainsLargeAmountOfVitaminC(x) | OnWarningList(x)))", "all x.(K) -> (ContainsLargeAmountOfVitaminC(x) | OnWarningList(x)))", "all x.(K(x) -> (LargeAmountOfVitaminC(x) | WarningList(x)))", "all x.((K) & (LargeAmountOfVitaminC(x) | WarningList(x))) -> Contains(x,VitaminC))", "all x.((K) & (ContainsLargeAmountOfVitaminC(x) | OnWarningList(x))) -> ContainsLargeAmountOfVitaminC(x))", "all x.(K) -> (LargeAmountOfVitaminC(x) | WarningList(x)))", "all x.(K(x) -> (ContainsLargeAmountOfVitaminC(x) | WarningList(x)))", "all x y.((K(x) & VitaminC(y)) -> (ContainsLargeAmount(x,y) | OnWarningList(x,y)))", "all x.((K(x) & (ContainsLargeAmountOfVitaminC(x) | OnWarningList(x))) -> ContainsLargeAmountOfVitaminC(x))", "all x.((K(x) & LargeAmountOfVitaminC(x)) | WarningList(x))", "all x.((K) & (LargeAmountOfVitaminC(x) | WarningList(x))) -> Contains(x,y))", "all x.((K) & (ContainsLargeAmountOfVitaminC(x) | OnWarningList(x))) -> (ContainsLargeAmountOfVitaminC(x)))", "all x.(K(x) -> (LargeAmountOfVitaminC(x) | OnWarningList(x)))", "all x.((K(x) & (LargeAmountOfVitaminC(x) | WarningList(x))) -> Contains(x,VitaminC))", "all x.((K(x) & (ContainsLargeAmountOfVitaminC(x) | OnWarningList(x))) -> (ContainsLargeAmountOfVitaminC(x)))", "all x.((K) & (LargeAmountOfVitaminC(x) | WarningList(x))) -> (ContainsLargeAmountOfVitaminC(x)))"]}
{"id": "folio_train_168", "nl": "K is either on a warning list or with the color red.", "fol": "(IsOnWarningList(k) | FruitsWithColorRed(k))", "prediction": ["all x.(K(x) -> (OnWarningList(x) | ColorRed(x)))", "all x.(K(x) -> (WarningList(x) | ColorRed(x)))", "all x.(K(x) -> (OnWarningList(x) | WithColorRed(x)))", "all x.(K(x) -> (OnWarningList(x) | HasColorRed(x)))", "all x.(K) -> (WarningList(x) | ColorRed(x)))", "all x.(K) -> (OnWarningList(x) | ColorRed(x)))", "all x.(K(x) -> (WarningList(x) | RedColor(x)))", "all x y.((K(x) & WarningList(y)) | ColorRed(y)) -> (OnWarningList(x,y) | OnWarningList(x,y)))", "all x.(K(x) -> (OnWarningList(x) | WithRedColor(x)))", "all x.((K) & (OnWarningList(x) | ColorRed(x))) -> OnWarningList(x))", "all x y.((K(x) & WarningList(y)) | ColorRed(x)) -> (OnWarningList(x,y) | OnWarningList(x,y)))", "all x.(K(x) -> (OnWarningList(x) | WithColourRed(x)))", "all x.(K) -> (OnWarningList(x) | WithColorRed(x)))", "all x.((K) & (OnWarningList(x) | ColorRed(x))) -> (OnWarningList(x) | OnWarningList(x)))", "all x.((K) & (WarningList(x) | ColorRed(x))) -> (OnWarningList(x) | OnWarningList(x)))", "all x y.((K(x) & WarningList(y)) | ColorRed(y)) -> (OnWarningList(x,y) | OnColorRed(x,y)))"]}
{"id": "folio_train_169", "nl": "If K is either beneficial to people or on a warning list, then it is not red.", "fol": "((IsBeneficialToPeople(k) | IsOnWarningList(k)) -> -FruitsWithColorRed(k))", "prediction": ["all x.((BeneficialToPeople(x) | WarningList(x)) -> -Red(x))", "all x.((BeneficialToPeople(x) | OnWarningList(x)) -> -Red(x))", "all x.((K(x) & BeneficialToPeople(x)) | OnWarningList(x)) -> -Red(x))", "all x.((K(x) & BeneficialToPeople(x)) | WarningList(x)) -> -Red(x))", "all x.((K(x) & (BeneficialToPeople(x) | WarningList(x))) -> -Red(x))", "all x.((BenefitfulToPeople(x) | WarningList(x)) -> -Red(x))", "all x.((Beneficial(x) | WarningList(x)) -> -Red(x))", "all x.((K(x) & (BeneficialToPeople(x) | OnWarningList(x))) -> -Red(x))", "all x.((BeneficialToPersons(x) | WarningList(x)) -> -Red(x))", "all x.((BeneficialToPersons(x) | OnWarningList(x)) -> -Red(x))", "all x.((K(x) & BeneficialToPeople(x) & WarningList(x)) -> -Red(x))", "all x.((K) & (BeneficialToPeople(x) | WarningList(x))) -> -Red(x))", "all x.((BeneficialToPeople(x) | WarningList(x)) -> -Rose(x))", "all x.((Beneficial(x) | OnWarningList(x)) -> -Red(x))", "all x.(((BeneficialToPeople(x) | WarningList(x))) -> -Red(x))", "all x.((K(x) & BeneficialToPeople(x)) | OnWarningList(x)) -> -Rose(x))"]}
{"id": "folio_train_170", "nl": "If K is either on a warning list or with the color red, then it is not beneficial to people and does not contain a large amount of vitamin C.", "fol": "((WarnList(k) | FruitsWithColorRed(k)) -> (-IsBeneficialToPeople(k) & -ContainsLargeAmountOfVitaminC(k)))", "prediction": ["all x.((K(x) & (OnWarningList(x) | ColorRed(x))) -> (-BeneficialToPeople(x) & -ContainsLargeAmountOfVitaminC(x)))", "all x.((K(x) & (WarningList(x) | ColorRed(x))) -> (-BeneficialToPeople(x) & -ContainsLargeAmountOfVitaminC(x)))", "all x.((WarningList(x) | ColorRed(x)) -> (-BeneficialToPeople(x) & -ContainsLargeAmountOfVitaminC(x)))", "all x.((K(x) & (OnWarningList(x) | ColorRed(x))) -> -BeneficialToPeople(x) & -ContainsLargeAmountOfVitaminC(x)))", "all x.((K(x) & (WarningList(x) | ColorRed(x))) -> (-BeneficialToPeople(x) & -LargeAmountOfVitaminC(x)))", "all x.((K(x) & (OnWarningList(x) | ColorRed(x))) -> (-BeneficialToPeople(x) & -ContainLargeAmountOfVitaminC(x)))", "all x.((K(x) & (WarningList(x) | ColorRed(x))) -> -BeneficialToPeople(x) & -ContainsLargeAmountOfVitaminC(x)))", "all x.((K(x) & (WarningList(x) | ColorRed(x))) -> (-BeneficialToPeople(x) & -ContainLargeAmountOfVitaminC(x)))", "all x.((K(x) & (OnWarningList(x) | WithColorRed(x))) -> (-BeneficialToPeople(x) & -ContainsLargeAmountOfVitaminC(x)))", "all x.((K(x) & (OnWarningList(x) | ColorRed(x))) -> (-BeneficialToPeople(x) & -LargeAmountOfVitaminC(x)))", "all x.((WarningList(x) | ColorRed(x)) -> (-BeneficialToPeople(x) & -ContainLargeAmountOfVitaminC(x)))", "all x.((K(x) & (OnWarningList(x) | ColorRed(x))) -> -BeneficialToPeople(x) & -ContainsLargeAmountOfVitaminC(x))", "all x.((K(x) & (OnWarningList(x) | ColorRed(x))) -> -BeneficialToPeople(x) & -ContainLargeAmountOfVitaminC(x)))", "all x.((K(x) & (WarningList(x) | ColorRed(x))) -> -BeneficialToPeople(x) & -ContainsLargeAmountOfVitaminC(x))", "all x.((WarningList(x) | ColorRed(x)) -> (-BeneficialToPeople(x) & -LargeAmountOfVitaminC(x)))", "all x.((K(x) & (WarningList(x) | ColorRed(x))) -> -BeneficialToPeople(x) & -ContainLargeAmountOfVitaminC(x)))"]}
{"id": "folio_train_171", "nl": "Everyone working at Meta has a high income. ", "fol": "all x.(WorksAtMeta(x) -> HasHighIncome(x))", "prediction": ["all x.(WorkingAtMeta(x) -> HighIncome(x))", "all x.(WorksAtMeta(x) -> HighIncome(x))", "all x.((WorkingAtMeta(x) & HighIncome(x)) -> WorksAtMeta(x))", "all x y.((WorkingAtMeta(x) & Meta(y)) -> HighIncome(x,y))", "all x.((WorkingAtMeta(x) & HighIncome(x)) -> HighIncome(x))", "all x.((WorkingAtMeta(x) & HighIncome(x)) -> WorkingAtMeta(x))", "all x.((WorkingAtMeta(x) & HighIncome(x)) -> WorkAtMeta(x))", "all x.((WorksAtMeta(x) & HighIncome(x)) -> WorksAtMeta(x))", "all x.(WorkingAtMeta(x) -> HasHighIncome(x))", "all x y.((WorkingAtMeta(x) & WorkingAtMeta(y)) -> HighIncome(x,y))", "all x y.((WorkingAtMeta(x) & HighIncome(y)) -> WorksAtMeta(x))", "all x y.((WorkingAtMeta(x) & Meta(y)) -> HighIncome(x))", "all x y.((WorkingAtMeta(x) & HighIncome(y)) -> WorksAtMeta(x,y))", "all x.((WorksAtMeta(x) & HighIncome(x)) -> HighIncome(x))", "all x y.((WorksAtMeta(x) & Meta(y)) -> HighIncome(x,y))", "all x.(WorksAtMeta(x) -> HasHighIncome(x))"]}
{"id": "folio_train_172", "nl": "If a person has a high income, then he/she will not take a bus to their destination.", "fol": "all x.(HasHighIncome(x) -> -TakesBus(x))", "prediction": ["all x.((Person(x) & HighIncome(x)) -> -TakeBusToDestination(x))", "all x.(HighIncome(x) -> -TakeBusToDestination(x))", "all x.((Person(x) & HighIncome(x)) -> -TakesBusToDestination(x))", "all x.(HighIncome(x) -> -BusToDestination(x))", "all x.((Person(x) & HighIncome(x)) -> -BusToDestination(x))", "all x.(HighIncome(x) -> -TakesBusToDestination(x))", "all x.(HasHighIncome(x) -> -TakeBusToDestination(x))", "all x.((Person(x) & HighIncome(x)) -> -TakeBuseToDestination(x))", "all x.(HighIncome(x) -> (-TakeBusToDestination(x)))", "all x.((HighIncome(x) & Person(x)) -> -TakeBusToDestination(x))", "all x.((Person(x) & HighIncome(x)) -> (-TakeBusToDestination(x)))", "all x.((Person(x) & HighIncome(x)) -> -TakeBus(x))", "all x y.((Person(x) & HighIncome(x)) -> -TakeBusToDestination(x,y))", "all x.((Person(x) & HasHighIncome(x)) -> -TakeBusToDestination(x))", "all x y.((Person(x) & HighIncome(x)) -> -TakeBusToDestination(y))", "all x.((Person(x) & HighIncome(x)) -> -TakeBUSToDestination(x))"]}
{"id": "folio_train_173", "nl": "People will either take a bus or drive to their destination. ", "fol": "all x.(TakesBus(x) | DrivesToDestination(x))", "prediction": ["all x.(Person(x) -> (TakeBus(x) | DriveToDestination(x)))", "all x.(Person(x) -> (TakesBus(x) | DrivesToDestination(x)))", "all x y.((Person(x) & Bus(y)) -> (Takes(x,y) | DrivesToDestination(x,y)))", "all x y.((Person(x) & Bus(y)) -> (Takes(x,y) | DrivesTo(x,y)))", "all x y.((Person(x) & Bus(y)) -> (Take(x,y) | Drive(x,y)))", "all x y z.((Person(x) & Bus(y) & Destination(z)) -> (Take(x,y) | Drive(x,z)))", "all x y.((Person(x) & Bus(y)) -> (Take(x,y) | DriveToDestination(x,y)))", "all x.(People(x) -> (TakeBus(x) | DriveToDestination(x)))", "all x y.((Person(x) & Bus(y)) -> (Takes(x,y) | Drives(x,y)))", "all x y.((Person(x) & Bus(y)) -> (Take(x,y) | DriveTo(x,y)))", "all x y z.((Person(x) & Bus(y) & Destination(z)) -> (Takes(x,y) | DrivesTo(x,z)))", "all x y.((Person(x) & Bus(y)) -> (Takes(x,y) | DrivesToDestination(x)))", "all x y z.((Person(x) & Bus(y) & Destination(z)) -> (Takes(x,y) | Drives(x,z)))", "all x.(Person(x) -> (TakeBus(x) | Drive(x)))", "all x y.((Person(x) & Bus(y) & Destination(z)) -> (Take(x,y) | Drive(x,z)))", "all x y.((Person(x) & Bus(y) & Destination(z)) -> (Takes(x,y) | DrivesTo(x,z)))"]}
{"id": "folio_train_174", "nl": "Everyone who has a car will choose to drive to their destination. ", "fol": "all x.(OwnsCar(x) -> DrivesToDestination(x))", "prediction": ["all x.(HasCar(x) -> ChoosesToDrive(x))", "all x.(HasCar(x) -> ChoosesDriveToDestination(x))", "all x.((HasCar(x) & DrivesToDestination(x)) -> ChoosesToDestination(x))", "all x.(HasCar(x) -> ChoosesToDriveToDestination(x))", "all x.((HasCar(x) & DrivesToDestination(x)) -> ChoosesDestination(x))", "all x.(HasCar(x) -> DrivesToDestination(x))", "all x.(HasCar(x) -> ChoosesDestination(x))", "all x.((HasCar(x) & DrivesToDestination(x)) -> ChoosesToDrive(x))", "all x.(HasCar(x) -> DriveToDestination(x))", "all x y.((HasCar(x) & Destination(y)) -> ChoosesToDrive(x,y))", "all x.((HasCar(x) & ChoosesDestination(x)) -> DrivesToDestination(x))", "all x.(HasCar(x) -> WillDriveToDestination(x))", "all x.(HasCar(x) -> (DriveToDestination(x) | DriveToDestination(x)))", "all x y.((HasCar(x) & Destination(y)) -> ChoosesToDriveTo(x,y))", "all x.((HasCar(x) & DriveToDestination(x)) -> ChoosesToDestination(x))", "all x y.((HasCar(x) & Destination(y)) -> ChoosesDriveTo(x,y))"]}
{"id": "folio_train_175", "nl": "No students drive to their destination. ", "fol": "all x.(IsStudent(x) -> -DrivesToDestination(x))", "prediction": ["-exists x.(Student(x) & DrivesToDestination(x))", "-exists x.(Student(x) & DrivesTo(x,Destination))", "all x.(Student(x) -> -DrivesToDestination(x))", "all x y.((Student(x) & Destination(y)) -> -DrivesTo(x,y))", "-exists x.(Student(x) & DriveToDestination(x))", "-exists x y.(Student(x) & Destination(y) & DrivesTo(x,y))", "-all x.(Student(x) -> DrivesToDestination(x))", "-exists x.(Student(x) & DrivesTo(x,destination))", "all x y.((Student(x) & Destination(y)) -> -DrivingTo(x,y))", "-exists x.(Student(x) & DrivesTo(x))", "all x.(Student(x) -> -DriveToDestination(x))", "all x.(Student(x) -> -DrivingToDestination(x))", "-exists x.(Student(x) & DrivesToDomain(x))", "-exists x.(Student(x) & DriveTo(x,Destination))", "all x y.((Student(x) & Destination(y)) -> -Drive(x,y))", "all x y.((Student(x) & Destination(y)) -> -DriveTo(x,y))"]}
{"id": "folio_train_176", "nl": "James has a car or works at Meta.", "fol": "(OwnsCar(James) | WorksAtMeta(James))", "prediction": ["all x.(James(x) -> (HasCar(x) | WorksAtMeta(x)))", "exists x.(James(x) & (HasCar(x) | WorksAtMeta(x)))", "all x.((James(x) & (HasCar(x) | WorksAtMeta(x))) -> HasCar(x))", "(HasCar(James) | WorksAtMeta(James)))", "(HasCar(James) | WorksAtMeta(James))", "all x.((James(x) & (HasCar(x) | WorksAtMeta(x))) -> WorksAtMeta(x))", "(exists x.(James(x) & Car(x)) | exists y.(Meta(y) & WorksAt(x,y))))", "all x y.((James(x) & Car(y)) | WorksAtMeta(x,y)) -> Has(x,y))", "(exists x.(James(x) & Car(x)) | WorksAtMeta(x)))", "(exists x.(James(x) & (HasCar(x) | WorksAtMeta(x))))", "all x.((James(x) & (HasCar(x) | WorksAtMeta(x))) -> HasCarOrWorksAtMeta(x))", "all x.(Jimmy(x) -> (HasCar(x) | WorksAtMeta(x)))", "(HasCar(James,James) | WorksAtMeta(James,James)))", "(HasCar(Jimmy) | WorksAtMeta(Jimmy)))", "(exists x.(JamesCar(x) | WorksAtMeta(x)))", "(exists x.(James(x) & Car(x)) | exists y.(Meta(y) & WorksAt(x,y)))))"]}
{"id": "folio_train_177", "nl": "James has a high income.", "fol": "HasHighIncome(James)", "prediction": ["all x.(James(x) -> HighIncome(x))", "all x.((James(x) & HighIncome(x)) -> HighIncome(x))", "all x.((James(x) & HighIncome(x)) -> Has(x,y))", "all x.(JamesHasHighIncome(x) -> HighIncome(x))", "all x y.((James(x) & Income(y)) -> High(x,y))", "all x.((Jimmy(x) & HighIncome(x)) -> HighIncome(x))", "all x.(Jimmy(x) -> HighIncome(x))", "all x.(James(x) -> HasHighIncome(x))", "All x.(James(x) -> HighIncome(x))", "exists x.(James(x) & HighIncome(x))", "all x.((James(x) & HighIncome(x)) -> Has(x,James))", "all x.(James(x) -> HighIncome(x))", "all x.(JamesHasHighIncome(x) -> HasHighIncome(x))", "(HighIncome(James) & HighIncome(James))", "(HighIncome(James) -> HighIncome(James))", "all x.((James(x) & HighIncome(x)) -> Income(x))"]}
{"id": "folio_train_178", "nl": "James does not have a high income.", "fol": "-HasHighIncome(James)", "prediction": ["all x.(James(x) -> -HighIncome(x))", "all x.((James(x) & -HighIncome(x)) -> -HighIncome(x))", "all x.((James(x) & HighIncome(x)) -> -HighIncome(x))", "all x.((James(x) & HighIncome(x)) -> -HasHighIncome(x))", "all x.((James(x) & -HighIncome(x)) -> -HasHighIncome(x))", "all x.((James(x) & HighIncome(x)) -> -Has(x,y))", "all x.((James(x) & -HighIncome(x)) -> -(HighIncome(x) & HighIncome(x))))", "all x.((James(x) & LowIncome(x)) -> -HighIncome(x))", "all x.((James(x) & -HighIncome(x)) -> -(HighIncome(x) & HighIncome(x)))", "all x.(James(x) -> -HasHighIncome(x))", "(HasHighIncome(James) & James -HasHighIncome(James))", "all x.((James(x) & LowIncome(x)) -> -HasHighIncome(x))", "all x.((James(x) & -HighIncome(x)) -> DoesNotHaveHighIncome(x))", "all x.((James(x) & -HighIncome(x)) -> NotHasHighIncome(x))", "(HasHighIncome(James) & -HasHighIncome(James))", "all x.((James(x) & -HighIncome(x)) -> -HasHireIncome(x))"]}
{"id": "folio_train_179", "nl": "James is a student.", "fol": "IsStudent(James)", "prediction": ["all x.(James(x) -> Student(x))", "(Student(James) & -Student(James))", "all x.((James(x) & Student(x)) -> Is(x,y))", "all x.((James(x) & Student(x)) -> Student(x))", "all x.((James(x) & Student(x)) -> (Student(x) & Student(x)))", "(Student(James) & Student(James))", "all x.((James(x) & Student(x)) -> -Student(x))", "James is Student(James)", "(Student(Jim) & -Student(Jim))", "all x.((Jimmy(x) & Student(x)) -> Is(x,y))", "all x.(Student(x) -> James(x))", "all x.((James(x) & Student(x)) -> Student(x))", "(Student(Jimmy) & Student(Jimmy))", "all x.((Jimmy(x) & Student(x)) -> Student(x))", "all x.((James(x) & Student(x)) -> (Student(x) | Student(x)))", "all x.((James(x) & Student(x)) -> College(x))"]}
{"id": "folio_train_180", "nl": "James drives to his destination or he is a student.", "fol": "(DrivesToDestination(James) | IsStudent(James))", "prediction": ["all x.(James(x) -> (DrivesToDestination(x) | Student(x)))", "(DrivesToDestination(James) | Student(James)))", "exists x.(James(x) & (DrivesToDestination(x) | Student(x)))", "all x.((James(x) & (DrivesToDestination(x) | Student(x))) -> DrivesTo(x))", "all x.((James(x) & (DrivesToDestination(x) | Student(x))) -> DrivesToDestination(x))", "all x y.((James(x) & Destination(y)) -> (DrivesTo(x,y) | Student(x)))", "all x.((James(x) & (DrivesToDestination(x) | Student(x))) -> DrivesTo(x,Destination))", "all x.((James(x) & (DrivesToDestination(x) | Student(x))) -> Drives(x))", "all x.((James(x) & (DrivesToDestination(x) | Student(x))) -> (DrivesToDestination(x)))", "all x.((James(x) & (DrivesTo(x,Destination) | Student(x))) -> DrivesTo(x,Destination))", "all x.(JamesDrivesToDestination(x) | Student(x))", "all x.(James(x) -> (DrivesTo(x,Destination) | Student(x)))", "all x y.((James(x) & Destination(y)) -> (DrivesTo(x,y) | Student(x,y)))", "exists x.(James(x) & (DrivesToDestination(x) | Student(x))))", "exists x.(James(x) & (DrivesTo(x,Destination) | Student(x)))", "(DrivingToDestination(James) | Student(James)))"]}
{"id": "folio_train_181", "nl": "James either drives to their destination or is a student.", "fol": "(DrivesToDestination(James) | IsStudent(James))", "prediction": ["all x.(James(x) -> (DrivesToDestination(x) | Student(x)))", "all x.((James(x) & DrivesToDestination(x)) | Student(x))", "all x y.((James(x) & Destination(y)) -> (DrivesTo(x,y) | Student(x)))", "all x y.((James(x) & Destination(y)) -> (DrivesTo(x,y) | Student(x,y)))", "all x.((James(x) & (DrivesToDestination(x) | Student(x))) -> DrivesToDestination(x))", "all x.(James(x) -> (DrivingToDestination(x) | Student(x)))", "exists x.(James(x) & (DrivesToDestination(x) | Student(x)))", "all x.((James(x) & (DrivesToDestination(x) | Student(x))) -> DrivesTo(x))", "all x.(Jimmy(x) -> (DrivesToDestination(x) | Student(x)))", "all x.(James(x) -> (DrivesToDestination(x) | Student(x)))", "all x.(James(x) -> (DrivesTo(x,Destination) | Student(x)))", "all x.((James(x) & DrivesToDestination(x)) | Student(x)) -> DrivesToDestination(x))", "all x.((James(x) & (DrivesToDestination(x) | Student(x))) -> DrivesTo(x,Destination))", "all x.((James(x) & DrivesToDestination(x) | Student(x))) -> DrivesToDestination(x))", "all x.((James(x) & (DrivesToDestination(x) | Student(x))) -> -DrivesToDestination(x))", "all x.(James(x) -> (DrivesTo(x) | Student(x)))"]}
{"id": "folio_train_182", "nl": "If James either drives to his destination or is a student, then he has a high income and is a student.", "fol": "((DrivesToDestination(James) | IsStudent(James)) -> (HasHighIncome(James) & IsStudent(James)))", "prediction": ["all x.((James(x) & (DrivesToDestination(x) | Student(x))) -> (HighIncome(x) & Student(x)))", "all x.((DrivesToDestination(x) | Student(x)) -> (HighIncome(x) & Student(x)))", "all x.((DrivingToDestination(x) | Student(x)) -> (HighIncome(x) & Student(x)))", "all x.((James(x) & (DrivesToDestination(x) | Student(x))) -> (HasHighIncome(x) & Student(x)))", "all x.((James(x) & DrivesToDestination(x)) | Student(x)) -> (HighIncome(x) & Student(x)))", "all x.((James(x) & (DrivesToDestination(x) | Student(x))) -> HighIncome(x) & Student(x))", "all x.((Jimmy(x) & (DrivesToDestination(x) | Student(x))) -> (HighIncome(x) & Student(x)))", "all x.(((James(x) & (DrivesToDestination(x) | Student(x))) -> (HighIncome(x) & Student(x)))", "all x.((James(x) & (DrivingToDestination(x) | Student(x))) -> (HighIncome(x) & Student(x)))", "all x.(((James(x) & DrivesToDestination(x)) | Student(x)) -> (HighIncome(x) & Student(x)))", "all x.((JamesDrivesToDestination(x) | Student(x)) -> (HighIncome(x) & Student(x)))", "all x.((DrivesToDestination(x) | Student(x)) -> (HasHighIncome(x) & Student(x)))", "all x.((RidesToDestination(x) | Student(x)) -> (HighIncome(x) & Student(x)))", "all x.((Driving(x) | Student(x)) -> (HighIncome(x) & Student(x)))", "all x.((James(x) & (DrivesToDestination(x) | Student(x))) -> HighIncome(x))", "all x.(DrivesToDestination(x) | Student(x)) -> (HighIncome(x) & Student(x)))"]}
{"id": "folio_train_183", "nl": "Students either go to the park or go to the movies. ", "fol": "all x.((GoesToPark(x) & -GoesToMovies(x)) | (-GoesToPark(x) & GoesToMovies(x)))", "prediction": ["all x.(Student(x) -> (GoesToPark(x) | GoesToMovies(x)))", "all x.(Student(x) -> (GoToPark(x) | GoToMovies(x)))", "all x y.((Student(x) & Park(y)) | Movie(y)) -> (GoesTo(x,y) | GoesTo(x,y)))", "all x y z.((Student(x) & Park(y) & Movie(z)) -> (GoesTo(x,y) | GoesTo(x,z)))", "all x y.((Student(x) & (Park(y) | Movie(y))) -> (GoesTo(x,y) | GoesTo(x,y)))", "all x y z.((Student(x) & Park(y) & Movie(z)) -> (GoTo(x,y) | GoTo(x,z)))", "all x y.((Student(x) & Park(y)) | Movie(y))", "all x y.((Student(x) & Park(y)) | Movie(y)) -> (GoTo(x,y) | GoTo(x,y)))", "all x y.((Student(x) & Park(y)) | Movie(x,y)) -> (GoesTo(x,y) | GoesTo(x,y)))", "all x y z.((Student(x) & Park(y) & Movie(z)) -> (GoesTo(x,y) | GoesTo(x,z))))", "all x.(Student(x) -> (GosToPark(x) | GoesToMovies(x)))", "all x y.((Student(x) & (Park(y) | Movie(y))) -> (GoTo(x,y) | GoTo(x,y)))", "all x y.((Student(x) & (Park(y) | Movie(y))) -> GoesTo(x,y))", "all x y z.((Student(x) & Park(y) & Movie(z)) -> (GoTo(x,y) | GoTo(x,z))))", "exists x.(Student(x) & (GoesToPark(x) | GoesToMovies(x)))", "all x.(Student(x) -> (GosToPark(x) | GosToMovies(x)))"]}
{"id": "folio_train_184", "nl": "No student who enjoys nature has free time during the weekend. ", "fol": "all x.(EnjoysNature(x) -> -HasFreeTime(x))", "prediction": ["all x.((Student(x) & EnjoysNature(x)) -> FreeTimeDuringWeekend(x))", "-exists x.(Student(x) & EnjoysNature(x) & FreeTime(x))", "-exists x.(Student(x) & EnjoysNature(x) & FreeTimeDuringWeekend(x))", "all x.((Student(x) & EnjoysNature(x)) -> FreeTime(x))", "all x.((Student(x) & EnjoysNature(x)) -> HasFreeTimeDuringWeekend(x))", "-exists x.(Student(x) & EnjoysNature(x) & WeekendFreeTime(x))", "-all x.((Student(x) & EnjoysNature(x)) -> FreeTimeDuringWeekend(x))", "-exists x.(Student(x) & EnjoysNature(x) & HasFreeTimeDuringWeekend(x))", "-exists x.(Student(x) & EnjoysNature(x) & HasFreeTime(x))", "all x.((Student(x) & EnjoysNature(x)) -> FreeTimeWeekend(x))", "all x.((Student(x) & EnjoysNature(x)) -> HasFreeTime(x))", "-all x.((Student(x) & EnjoysNature(x)) -> HasFreeTimeDuringWeekend(x))", "-exists x.(Student(x) & EnjoysNature(x) & HasFreeTime(x,Weekend))", "-all x.((Student(x) & EnjoysNature(x)) -> FreeTime(x))", "-exists x.(Student(x) & EnjoysNature(x) & FreeTime(x) & Weekend(x))", "-exists x.(Student(x) & EnjoysNature(x) & HasFreeTime(x,weekend))"]}
{"id": "folio_train_185", "nl": "All students who go to the movies enjoy nature. ", "fol": "all x.(GoesToMovies(x) -> EnjoysNature(x))", "prediction": ["all x.((Student(x) & GoesToMovies(x)) -> EnjoysNature(x))", "all x.((Student(x) & GoToMovies(x)) -> EnjoysNature(x))", "all x.((Student(x) & GoesToMovie(x)) -> EnjoysNature(x))", "all x y.((Student(x) & Movie(y) & GoesTo(x,y)) -> EnjoysNature(x))", "all x.((Student(x) & GoesToMovies(x)) -> EnjoyNature(x))", "all x y.((Student(x) & Movie(y)) -> EnjoysNature(x,y))", "all x y.((Student(x) & Movie(y) & GoTo(x,y)) -> EnjoysNature(x))", "all x y.((Student(x) & Movie(y) & GoesTo(x,y)) -> EnjoysNature(x,y))", "all x y.((Student(x) & GoesToMovies(x)) -> EnjoysNature(x))", "all x.((Student(x) & GoToMovie(x)) -> EnjoysNature(x))", "all x y.((Student(x) & Movie(y)) -> Enjoys(x,y))", "all x.((Student(x) & GoesToMovies(x)) -> Enjoy(x,nature))", "all x.((Student(x) & GoToMovies(x)) -> EnjoyNature(x))", "all x y.((Student(x) & GoesToMovies(x)) -> EnjoysNature(x,y))", "all x.(GoesToMovies(x) -> EnjoysNature(x))", "all x.((Student(x) & GoesToMovies(x)) -> Enjoys(x,nature))"]}
{"id": "folio_train_186", "nl": "All students who do not have class during the weekend have free time during the weekend. ", "fol": "all x.(DoesNotHaveClass(x) -> HasFreeTime(x))", "prediction": ["all x.((Student(x) & -HasClassDuringWeekend(x)) -> HasFreeTimeDuringWeekend(x))", "all x.((Student(x) & -HasClassDuringWeekend(x)) -> FreeTimeDuringWeekend(x))", "all x.((Student(x) & -HasClass(x,Weekend)) -> HasFreeTime(x,Weekend))", "all x.((Student(x) & -HasClass(x,Weekend)) -> FreeTime(x,Weekend))", "all x.((Student(x) & -HasClassDuringWeekend(x)) -> HasFreeTime(x))", "all x.((Student(x) & -HasClassDuringWeekend(x)) -> FreeTime(x))", "all x.((Student(x) & -HasClass(x,weekend)) -> HasFreeTime(x,weekend))", "all x.((Student(x) & -HasClass(x,Weekend)) -> FreeTimeDuringWeekend(x))", "all x.((Student(x) & -HasClass(x,Weekend)) -> HasFreeTimeDuringWeekend(x))", "all x y.((Student(x) & Weekend(y) & -HasClass(x,y)) -> HasFreeTime(x,y))", "all x.((Student(x) & -HasClass(x,Weekend)) -> FreeTime(x))", "all x.((Student(x) & -HasClass(x,weekend)) -> FreeTime(x,weekend))", "all x y.((Student(x) & Weekend(y) & -HasClass(x,y)) -> FreeTime(x,y))", "all x.((Student(x) & -HasClass(x)) -> HasFreeTime(x))", "all x.((Student(x) & -HasClass(x)) -> HasFreeTimeDuringWeekend(x))", "all x.((Student(x) & -HasClass(x)) -> FreeTimeDuringWeekend(x))"]}
{"id": "folio_train_187", "nl": "All students not in summer camp do not have class during the weekend. ", "fol": "all x.(InSummerCamp(x) -> DoesNotHaveClass(x))", "prediction": ["all x.((Student(x) & -SummerCamp(x)) -> -HasClassDuringWeekend(x))", "all x.((Student(x) & -InSummerCamp(x)) -> -HasClassDuringWeekend(x))", "all x.((Student(x) & -SummerCamp(x)) -> -HasClass(x,Weekend))", "all x.((Student(x) & -SummerCamp(x)) -> -HasClass(x))", "all x.((Student(x) & -SummerCamp(x)) -> -HasClass(x,weekend))", "all x.((Student(x) & -SummerCamp(x)) -> -HasClass(x,winter))", "all x.((Student(x) & -InSummerCamp(x)) -> -HasClass(x,Weekend))", "all x.((Student(x) & -SummerCamp(x)) -> -ClassDuringWeekend(x))", "all x.((Student(x) & -InSummerCamp(x)) -> -HasClass(x))", "all x.((Student(x) & -SummerCamp(x)) -> -HasClassAtWeekend(x))", "all x.((Student(x) & SummerCamp(x)) -> -HasClassDuringWeekend(x))", "all x.((Student(x) & -InSummerCamp(x)) -> -HasClass(x,weekend))", "all x.((Student(x) & -EnSummerCamp(x)) -> -HasClassDuringWeekend(x))", "all x.((Student(x) & -StudentInSummerCamp(x)) -> -HasClassDuringWeekend(x))", "all x.((Student(x) & -InSummerCamp(x)) -> -HasClass(x,winter))", "all x.((Student(x) & -SummerCamp(x)) -> -HasClassWeekend(x))"]}
{"id": "folio_train_188", "nl": "James does not have class during the weekend.", "fol": "DoesNotHaveClass(James)", "prediction": ["all x.((James(x) & Weekend(x)) -> -HasClass(x,Weekend))", "all x.((James(x) & Weekend(x)) -> -HasClass(x))", "all x.((James(x) & Weekend(x)) -> -HasClass(x,weekend))", "all x y.((James(x) & Weekend(y)) -> -HasClass(x,y))", "all x.((James(x) & Weekend(y)) -> -HasClass(x,y))", "all x.(James(x) -> -HasClassDuringWeekend(x))", "all x.((James(x) & Weekend(x)) -> -HasClass(x,w))", "all x.((James(x) & Weekend(x)) -> -HasClass(x,y))", "all x.((James(x) & Weekend(x)) -> -HasClass(x,weekend))", "all x.((James(x) & Weekend(x)) -> -HasClassDuring(x,Weekend))", "all x.(James(x) -> -HasClass(x,Weekend))", "all x.((James(x) & Weekend(x)) -> -HasClassDuring(x,weekend))", "(-HasClass(James,Weekend))", "all x.((James(x) & Weekend(x)) -> -HasClass(x,Weekend))", "all x.((James(x) & Weekend(x)) -> -HasClass(x))", "all x.((James(x) & Weekend(x)) -> -HasClass(x,x))"]}
{"id": "folio_train_189", "nl": "James is in summer camp.", "fol": "InSummerCamp(James)", "prediction": ["all x.(James(x) -> SummerCamp(x))", "all x.((James(x) & SummerCamp(x)) -> In(x,y))", "all x.((James(x) & SummerCamp(x)) -> InCamp(x))", "All x.(James(x) -> SummerCamp(x))", "James is in SummerCamp(James)", "James is in summercamp.", "all x.((James(x) & SummerCamp(x)) -> InSummerCamp(x))", "(SummerCamp(James) & In(James,James))", "(SummerCamp(James) & InCamp(James))", "(SummerCamp(James) & -SummerCamp(James))", "(SummerCamp(James) & InSummerCamp(James))", "all x.(Jim(x) -> SummerCamp(x))", "all x.((James(x) & SummerCamp(x)) -> IsIn(x,y))", "(SummerCamp(Jim) & InCamp(Jim))", "James is in SummerCamp.", "(SummerCamp(Jim) & InSummerCamp(Jim))"]}
{"id": "folio_train_190", "nl": "James goes to the park or is in summer camp.", "fol": "(GoesToPark(James) | InSummerCamp(James))", "prediction": ["all x.(James(x) -> (GoesToPark(x) | InSummerCamp(x)))", "all x.(James(x) -> (GoesToPark(x) | SummerCamp(x)))", "exists x.(James(x) & (GoesToPark(x) | InSummerCamp(x)))", "all x y.((James(x) & Park(y)) -> (GoesTo(x,y) | InSummerCamp(x,y)))", "all x y.((James(x) & Park(y)) | SummerCamp(x,y)) -> (GoesTo(x,y) | In(x,y)))", "all x y.((James(x) & Park(y)) | SummerCamp(x)) -> (GoesTo(x,y) | In(x,y)))", "all x y.((James(x) & (Park(y) | SummerCamp(y))) -> (GoesTo(x,y) | In(x,y)))", "(GoesToPark(James) | InSummerCamp(James)))", "all x.(Jimmy(x) -> (GoesToPark(x) | InSummerCamp(x)))", "all x y.((James(x) & Park(y)) | SummerCamp(x,y)) -> GoesTo(x,y))", "all x y.((James(x) & (Park(y) | SummerCamp(y))) -> GoesTo(x,y))", "all x y.((James(x) & Park(y)) -> (GoesTo(x,y) | SummerCamp(x,y)))", "all x y.((James(x) & Park(y)) | SummerCamp(x)) -> GoesTo(x,y))", "all x.(James(x) -> (GivesToPark(x) | InSummerCamp(x)))", "all x.(Jim(x) -> (GoesToPark(x) | InSummerCamp(x)))", "all x y.((James(x) & (Park(y) | SummerCamp(y))) -> (GoesTo(x,y) | In(x,y))))"]}
{"id": "folio_train_191", "nl": "No television stars are certified public accountants.", "fol": "all x.(IsTelevisionStar(x) -> -IsCertifiedPublicAccountant(x))", "prediction": ["-exists x.(TelevisionStar(x) & CertifiedPublicAccountant(x))", "-exists x.(TVStar(x) & CertifiedPublicAccountant(x))", "all x.(TelevisionStar(x) -> -CertifiedPublicAccountant(x))", "(-exists x.(TelevisionStar(x) & CertifiedPublicAccountant(x)))", "-exists x.(TelevisionStar(x) & PublicAccountant(x))", "all x.(TelevisionStar(x) -> -PublicAccountant(x))", "-exists x y.(TelevisionStar(x) & PublicAccountant(y) & Certified(x,y))", "-exists x.(TelevisionStar(x) & CertifiedPublicAccountant(x))", "-exists x.(Star(x) & Television(x) & CertifiedPublicAccountant(x))", "-exists x.(TelevisionStar(x) & CertifiedPublicAccountant(x) & -CertifiedPublicAccountant(x))", "\u2013exists x.(TelevisionStar(x) & CertifiedPublicAccountant(x))", "exists x.(TelevisionStar(x) & -CertifiedPublicAccountant(x))", "-all x.(TelevisionStar(x) -> CertifiedPublicAccountant(x))", "all x.(TVStar(x) -> -CertifiedPublicAccountant(x))", "(-all x.(TelevisionStar(x) -> CertifiedPublicAccountant(x)))", "(-exists x.(TVStar(x) & CertifiedPublicAccountant(x)))"]}
{"id": "folio_train_192", "nl": "All certified public accountants have good business sense.", "fol": "all x.(IsCertifiedPublicAccountant(x) -> HasGoodBusinessSense(x))", "prediction": ["all x.(CertifiedPublicAccountant(x) -> GoodBusinessSense(x))", "all x.(CertifiedPublicAccountant(x) -> HasGoodBusinessSense(x))", "all x.(CertifiedPublicAccountant(x) -> BusinessSense(x))", "all x.((PublicAccountant(x) & Certified(x)) -> GoodBusinessSense(x))", "all x.((CertifiedPublicAccountant(x) & GoodBusinessSense(x)) -> CertifiedPublicAccountant(x))", "all x.(PublicAccountant(x) -> GoodBusinessSense(x))", "all x.((PublicAccountant(x) & Certified(x)) -> BusinessSense(x))", "all x y.((CertifiedPublicAccountant(x) & CertifiedPublicAccountant(y)) -> GoodBusinessSense(x))", "all x.((PublicAccountant(x) & Certified(x)) -> HasGoodBusinessSense(x))", "all x y.((CertifiedPublicAccountant(x) & CertifiedPublicAccountant(y)) -> GoodBusinessSense(x,y))", "all x.((CertifiedPublicAccountant(x) & GoodBusinessSense(x)) -> CertifiedPublicAccountant(x))", "all x.(CertifiedPublicAccountant(x) -> GoodBusinessSense(x))", "all x.((CertifiedPublicAccountant(x) & HasGoodBusinessSense(x)) -> GoodBusinessSense(x))", "all x.((CertifiedPublicAccountant(x) & HasGoodBusinessSense(x)) -> HasGoodBusinessSense(x))", "all x.((PublicAccountant(x) & CPA(x)) -> GoodBusinessSense(x))", "all x.((CertifiedPublicAccountant(x) & BusinessSense(x)) -> HasGoodBusinessSense(x))"]}
{"id": "folio_train_193", "nl": "All television stars have good business sense.", "fol": "all x.(IsTelevisionStar(x) -> HasGoodBusinessSense(x))", "prediction": ["all x.(TelevisionStar(x) -> GoodBusinessSense(x))", "all x.(TelevisionStar(x) -> HasGoodBusinessSense(x))", "all x.(TelevisionStar(x) -> BusinessSense(x))", "all x.(TVStar(x) -> GoodBusinessSense(x))", "all x.(TVStar(x) -> HasGoodBusinessSense(x))", "all x y.((TelevisionStar(x) & BusinessSense(y)) -> Good(x,y))", "all x.(TelevisionStar(x) -> (GoodBusinessSense(x) & BusinessSense(x)))", "all x y.((TelevisionStar(x) & TelevisionStar(y)) -> GoodBusinessSense(x))", "all x y.((TelevisionStar(x) & BusinessSense(y)) -> HasGood(x,y))", "all x.((TelevisionStar(x) & GoodBusinessSense(x)) -> GoodBusinessSense(x))", "all x.exists y.(TelevisionStar(x) & BusinessSense(y) & Good(x,y))", "all x y.((TelevisionStar(x) & TelevisionStar(y)) -> GoodBusinessSense(x,y))", "all x y.((TelevisionStar(x) & TelevisionStar(y)) -> HasGoodBusinessSense(x,y))", "all x.exists y.(TelevisionStar(x) & BusinessSense(y) & Has(x,y))", "all x.(TelevisionStar(x) -> (GoodBusinessSense(x) & HasBusinessSense(x)))", "all x.((TelevisionStar(x) & GoodBusinessSense(x)) -> HasGoodBusinessSense(x))"]}
{"id": "folio_train_194", "nl": "Some students good at math are good at chemistry.", "fol": "exists x.(GoodAtMath(x) & GoodAtChemistry(x))", "prediction": ["exists x.(Student(x) & GoodAtMath(x) & GoodAtChemistry(x))", "exists x.(Student(x) & GoodAtMathematics(x) & GoodAtChemistry(x))", "exists x.(Student(x) & GoodAtMath(x) & GoodAtChemical(x))", "exists x.(Student(x) & GoodAt(x,Math) & GoodAt(x,Chemistry))", "exists x.(Student(x) & GoodAtMath(x)) & GoodAtChemistry(x))", "exists x.(Student(x) & GoodAt(x,math) & GoodAt(x,chemistry))", "exists x.(Student(x) & GoodAt(x,Math) & GoodAt(x,Chemical))", "exists x.(Student(x) & GoodAt(x,Math)) & GoodAt(x,Chemistry))", "exists x y.(Student(x) & Student(y) & GoodAtMath(x) & GoodAtChemistry(y))", "exists x.(Student(x) & GoodAt(x,Mathematics) & GoodAt(x,Chemistry))", "exists x.(Student(x) & GoodAt(x,Math)) & GoodAt(x,Chemical))", "exists x.(Student(x) & GoodAt(x,math)) & GoodAt(x,chemistry))", "exists x y.(Student(x) & Student(y) & GoodAt(x,Math) & GoodAt(y,Chemistry))", "exists x.(Student(x) & GoodAtMathematics(x) & GoodAtChemicals(x))", "exists x y.(Student(x) & Student(y) & GoodAt(x,Math) & GoodAt(y,Chemical))", "all x.((Student(x) & GoodAtMath(x)) -> GoodAtChemistry(x))"]}
{"id": "folio_train_195", "nl": "All students good at chemistry enjoy conducting experiments. ", "fol": "all x.(GoodAtChemistry(x) -> EnjoysConductingExperiments(x))", "prediction": ["all x.((Student(x) & GoodAtChemistry(x)) -> EnjoysConductingExperiments(x))", "all x.((Student(x) & GoodAtChemical(x)) -> EnjoysConductingExperiments(x))", "all x.((Student(x) & GoodAtChemistry(x)) -> EnjoysExperiments(x))", "all x.(GoodAtChemistry(x) -> EnjoysConductingExperiments(x))", "all x.((Student(x) & GoodAtChemistry(x)) -> EnjoyConductingExperiments(x))", "all x y.((Student(x) & GoodAtChemistry(x)) -> EnjoysConductingExperiments(x))", "all x.((Student(x) & GoodAtChemical(x)) -> EnjoysExperiments(x))", "all x y.((Student(x) & GoodAtChemistry(x) & Chemistry(y)) -> EnjoysConductingExperiments(x,y))", "all x.((Student(x) & GoodAtChemistry(x)) -> EnjoysConductingExpectations(x))", "all x.((Student(x) & GoodAtChemicals(x)) -> EnjoysConductingExperiments(x))", "all x y.((Student(x) & GoodAtChemistry(x)) -> EnjoysConductingExperiments(x,y))", "all x y.((Student(x) & GoodAtChemistry(x) & Chemistry(y)) -> EnjoysConductingExperiments(x))", "all x.((Student(x) & GoodAtChemistry(x)) -> EnjoysConductingExpeditions(x))", "all x.((Student(x) & GoodAtChemical(x)) -> EnjoyConductingExperiments(x))", "all x.((Student(x) & GoodInChemistry(x)) -> EnjoysConductingExperiments(x))", "all x.((Student(x) & GoodAtChemistry(x)) -> EnjoysConductingExpects(x))"]}
{"id": "folio_train_196", "nl": "All students that enjoy conducting experiments are good at planning. ", "fol": "all x.(EnjoysConductingExperiments(x) -> GoodAtPlanning(x))", "prediction": ["all x.((Student(x) & EnjoysConductingExperiments(x)) -> GoodAtPlanning(x))", "all x.((Student(x) & EnjoysExperiments(x)) -> GoodAtPlanning(x))", "all x.((Student(x) & EnjoysExperiment(x)) -> GoodAtPlanning(x))", "all x.((Student(x) & EnjoysExperimentConducting(x)) -> GoodAtPlanning(x))", "all x.(EnjoysConductingExperiments(x) -> GoodAtPlanning(x))", "all x.((Student(x) & EnjoysConductingExpectations(x)) -> GoodAtPlanning(x))", "all x.((Student(x) & EnjoyConductingExperiments(x)) -> GoodAtPlanning(x))", "all x.((Student(x) & EnjoysConductingExperiment(x)) -> GoodAtPlanning(x))", "all x y.((Student(x) & EnjoysConductingExperiments(x)) -> GoodAtPlanning(x))", "all x y.((Student(x) & EnjoysConductingExperiments(x)) -> GoodAtPlanning(y))", "all x.((Student(x) & EnjoysConductingExpeditions(x)) -> GoodAtPlanning(x))", "all x.((Student(x) & EnjoysConductingExpercises(x)) -> GoodAtPlanning(x))", "all x.((Student(x) & EnjoysExperimenting(x)) -> GoodAtPlanning(x))", "all x.((Student(x) & EnjoyesConductingExperiments(x)) -> GoodAtPlanning(x))", "all x.((Student(x) & EnjoyExperiments(x)) -> GoodAtPlanning(x))", "all x.((Student(x) & EnjoysConductingExpects(x)) -> GoodAtPlanning(x))"]}
{"id": "folio_train_197", "nl": "No student good at planning is awarded the Dean's List. ", "fol": "all x.(GoodAtPlanning(x) -> -AwardedDeansList(x))", "prediction": ["-exists x.(Student(x) & GoodAtPlanning(x) & AwardedDeansList(x))", "all x.((Student(x) & GoodAtPlanning(x)) -> DeansList(x))", "all x.((Student(x) & GoodAtPlanning(x)) -> AwardedDeansList(x))", "-exists x.(Student(x) & GoodAtPlanning(x) & -AwardedDeansList(x))", "-exists x.(Student(x) & GoodAtPlanning(x) & AwardedDeansList(x))", "-exists x.(Student(x) & GoodAtPlanning(x) & AcquiredDeansList(x))", "all x.((Student(x) & GoodAtPlanning(x)) -> AwardedDeansList(x))", "-exists x.(Student(x) & GoodAtPlanning(x) & DeansList(x))", "-exists x.(Student(x) & GoodAtPlanning(x) & AllocatedDeansList(x))", "-exists x.(Student(x) & GoodAtPlanning(x) & AwardedDean'sList(x))", "-all x.((Student(x) & GoodAtPlanning(x)) -> DeansList(x))", "-exists x.(Student(x) & GoodAtPlanning(x))", "-exists x.(Student(x) & GoodAtPlanning(x) & AppointedDeansList(x))", "all x.((Student(x) & GoodAtPlanning(x)) -> -AwardedDeansList(x))", "all x.((Student(x) & GoodAtPlanning(x)) -> DeansListAward(x))", "-exists x.(Student(x) & GoodAtPlanning(x) & AwardedDeanStatus(x))"]}
{"id": "folio_train_198", "nl": "James is either good at chemistry and awarded the Dean's List, or neither good at chemistry nor awarded the Dean's List.", "fol": "-((GoodAtChemistry(James) & -AwardedDeansList(James)) | (-GoodAtChemistry(James) & AwardedDeansList(James)))", "prediction": ["(all x.(James(x) -> (GoodAtChemistry(x) & AwardedDeansList(x))) | (-GoodAtChemistry(x) & AwardedDeansList(x))))", "all x.(James(x) -> ((GoodAtChemistry(x) & AwardedDeansList(x)) | (-GoodAtChemistry(x) & AwardedDeansList(x))))", "(all x.(James(x) -> (GoodAtChemistry(x) & AwardDeansList(x))) | (-GoodAtChemistry(x) & AwardDeansList(x))))", "all x.(James(x) -> ((GoodAtChemistry(x) & AwardedDeansList(x)) | (-GoodAtChemistry(x) & AwardedDeansList(x))))", "all x.(James(x) -> ((GoodAtChemistry(x) & AwardedDeansList(x)) | (-GoodAtChemistry(x) & AwardedDeansList(x)))))", "all x.(James(x) -> ((GoodAtChemistry(x) & AwardedDeansList(x)) | (-GoodAtChemistry(x) & AwardedDeansList(x)))))", "all x.(James(x) -> (GoodAtChemistry(x) & AwardedDeansList(x)) | (-GoodAtChemistry(x) & AwardedDeansList(x))))", "all x.(James(x) -> ((GoodAtChemistry(x) & AwardedDeansList(x)) | -(GoodAtChemistry(x) & AwardedDeansList(x)))))", "(all x.(James(x) -> (GoodAtChemistry(x) & AwardedDeansList(x)) | (-GoodAtChemistry(x) & AwardedDeansList(x))))", "(all x.(James(x) -> (GoodAtChemistry(x) & AwardedDeansList(x))) | (-GoodAtChemistry(x) & AwardedDeansList(x))))", "all x.(James(x) -> (GoodAtChemistry(x) & AwardedDeansList(x)) | (-GoodAtChemistry(x) & AwardedDeansList(x))))", "all x.(James(x) -> ((GoodAtChemistry(x) & AwardedDeansList(x)) | -(GoodAtChemistry(x) & AwardedDeansList(x))))", "all x.(James(x) -> ((GoodAtChemistry(x) & AwardDeansList(x)) | (-GoodAtChemistry(x) & AwardDeansList(x))))", "all x.(James(x) -> ((GoodAtChemistry(x) & AwardDeansList(x)) | (-GoodAtChemistry(x) & AwardDeansList(x)))))", "(all x.(James(x) -> (GoodAtChemistry(x) & AwardDeansList(x)) | (-GoodAtChemistry(x) & AwardDeansList(x))))", "all x.(James(x) -> (GoodAtChemistry(x) & AwardDeansList(x)) | (-GoodAtChemistry(x) & AwardDeansList(x))))"]}
{"id": "folio_train_199", "nl": "James is good at planning.", "fol": "GoodAtPlanning(James)", "prediction": ["all x.(James(x) -> GoodAtPlanning(x))", "all x.((James(x) & GoodAtPlanning(x)) -> GoodAtPlanning(x))", "all x.((James(x) & Planning(x)) -> GoodAt(x))", "all x.(Jimmy(x) -> GoodAtPlanning(x))", "all x.((James(x) & Planning(x)) -> GoodAt(x,y))", "exists x.(James(x) & GoodAtPlanning(x))", "all x y.((James(x) & Planning(y)) -> GoodAt(x,y))", "all x.((Jimmy(x) & Planning(x)) -> GoodAt(x))", "All x.(James(x) -> GoodAtPlanning(x))", "all x.((James(x) & Planning(x)) -> GoodAt(x))", "(GoodAtPlanning(James) -> GoodAtPlanning(James))", "all x.((James(x) & Planes(x)) -> GoodAt(x))", "all x.(Jim(x) -> GoodAtPlanning(x))", "all x.((James(x) & Planing(x)) -> GoodAt(x))", "all x.((James(x) & Planning(x)) -> Good(x))", "all x.((James(x) & GoodAtPlanning(x)) -> ExcellentAtPlanning(x))"]}
{"id": "folio_train_200", "nl": "James is either good at planning or good at math.", "fol": "(GoodAtPlanning(James) | GoodAtMath(James))", "prediction": ["all x.(James(x) -> (GoodAtPlanning(x) | GoodAtMath(x)))", "all x.(James(x) -> (GoodAtPlanning(x) | GoodAtMathematics(x)))", "all x.((James(x) & (GoodAtPlanning(x) | GoodAtMath(x))) -> GoodAtPlanning(x))", "(GoodAtPlanning(James) | GoodAtMath(James))", "all x.((James(x) & (GoodAtPlanning(x) | GoodAtMath(x))) -> GoodAt(x))", "exists x.(James(x) & (GoodAtPlanning(x) | GoodAtMath(x)))", "all x.((James(x) & (GoodAtPlanning(x) | GoodAtMathematics(x))) -> GoodAtPlanning(x))", "all x.((James(x) & (GoodAtPlanning(x) | GoodAtMath(x))) -> (GoodAtPlanning(x) | GoodAtMath(x)))", "all x.(Jimmy(x) -> (GoodAtPlanning(x) | GoodAtMath(x)))", "all x.((James(x) & (GoodAtPlanning(x) | GoodAtMath(x))) -> (GoodAtPlanning(x) & GoodAtMath(x)))", "all x.(James(x) -> (GoodAtPlanning(x) | GoodAtMath(x)))", "all x.((James(x) & (GoodAtPlanning(x) | GoodAtMath(x))) -> GoodAtMath(x))", "all x.((James(x) & (GoodAtPlanning(x) | GoodAtMathematics(x))) -> (GoodAtPlanning(x) | GoodAtMathematics(x)))", "all x.(Jim(x) -> (GoodAtPlanning(x) | GoodAtMath(x)))", "all x.((James(x) & (GoodAtPlanning(x) | GoodAtMath(x))) -> (GoodAtPlanning(x) | GoodAtMath(x))))", "all x.((Jimmy(x) & (GoodAtPlanning(x) | GoodAtMath(x))) -> GoodAtPlanning(x))"]}
{"id": "folio_train_201", "nl": "James is either good at chemistry or good at math.", "fol": "(GoodAtChemistry(James) | GoodAtMath(James))", "prediction": ["all x.(James(x) -> (GoodAtChemistry(x) | GoodAtMath(x)))", "all x.(James(x) -> (GoodAtChemistry(x) | GoodAtMathematics(x)))", "all x.(James(x) -> (GoodAtChemical(x) | GoodAtMath(x)))", "all x.(James(x) -> (GoodAtChemical(x) | GoodAtMathematics(x)))", "all x.((James(x) & (GoodAtChemistry(x) | GoodAtMath(x))) -> GoodAt(x))", "all x.((James(x) & (GoodAtChemistry(x) | GoodAtMath(x))) -> (GoodAtChemistry(x) | GoodAtMath(x)))", "(GoodAtChemistry(James) | GoodAtMath(James))", "exists x.(James(x) & (GoodAtChemistry(x) | GoodAtMath(x)))", "all x.((James(x) & (GoodAtChemistry(x) | GoodAtMathematics(x))) -> (GoodAtChemistry(x) | GoodAtMathematics(x)))", "all x.((James(x) & (GoodAtChemistry(x) | GoodAtMathematics(x))) -> GoodAt(x))", "all x.((James(x) & GoodAtChemistry(x)) | GoodAtMath(x))", "(GoodAtChemistry(James) | GoodAtMathematics(James))", "exists x.(James(x) & (GoodAtChemistry(x) | GoodAtMathematics(x)))", "all x.((James(x) & (GoodAtChemistry(x) | GoodAtMath(x))) -> (GoodAtChemistry(x) | GoodAtMath(x))))", "all x.((James(x) & (GoodAtChemistry(x) | GoodAtMathematics(x))) -> (GoodAtChemistry(x) | GoodAtMathematics(x))))", "all x.((James(x) & (GoodAtChemistry(x) | GoodAtMathematics(x))) -> GoodAtChemistry(x))"]}
{"id": "folio_train_202", "nl": "If James is good at Chemistry or gets awarded the Dean's List, then James is either good at planning or good at math.", "fol": "((GoodAtChemistry(James) | AwardedDeansList(James)) -> (GoodAtPlanning(James) | GoodAtMath(James)))", "prediction": ["all x.((James(x) & (GoodAtChemistry(x) | AwardedDeansList(x))) -> (GoodAtPlanning(x) | GoodAtMath(x)))", "all x.((James(x) & (GoodAtChemistry(x) | AcquiredDeansList(x))) -> (GoodAtPlanning(x) | GoodAtMath(x)))", "all x.((James(x) & (GoodAtChemistry(x) | AwardedDeansList(x))) -> (GoodAtPlanning(x) | GoodAtMathematics(x)))", "all x.((James(x) & (GoodAtChemistry(x) | AwardedDeansList(x))) -> (GoodAtPlanning(x) | GoodAtMath(x)))", "all x.((James(x) & GoodAtChemistry(x) | AwardedDeansList(x)) -> (GoodAtPlanning(x) | GoodAtMath(x)))", "all x.((James(x) & (GoodAtChemistry(x) | AgreedDeansList(x))) -> (GoodAtPlanning(x) | GoodAtMath(x)))", "all x.((James(x) & GoodAtChemistry(x)) | AwardedDeansList(x)) -> (GoodAtPlanning(x) | GoodAtMath(x)))", "all x.((James(x) & (GoodAtChemistry(x) | AcquiredDeansList(x))) -> (GoodAtPlanning(x) | GoodAtMathematics(x)))", "all x.((James(x) & (GoodAtChemistry(x) | GetsAwardedDeansList(x))) -> (GoodAtPlanning(x) | GoodAtMath(x)))", "all x.((James(x) & (GoodAtChemistry(x) | AlignedDeansList(x))) -> (GoodAtPlanning(x) | GoodAtMath(x)))", "all x.((James(x) & (GoodAtChemistry(x) | AppointedDeansList(x))) -> (GoodAtPlanning(x) | GoodAtMath(x)))", "all x.(((James(x) & GoodAtChemistry(x)) | AwardedDeansList(x)) -> (GoodAtPlanning(x) | GoodAtMath(x)))", "all x.((James(x) & (GoodAtChemistry(x) | AwardsDeansList(x))) -> (GoodAtPlanning(x) | GoodAtMath(x)))", "all x.((James(x) & GoodAtChemistry(x)) | (AwardedDeansList(x) & GoodAtPlanning(x)) | GoodAtMath(x)))", "all x.((James(x) & (GoodAtChemistry(x) | AllocatedDeansList(x))) -> (GoodAtPlanning(x) | GoodAtMath(x)))", "all x.((James(x) & GoodAtChemistry(x) | AwardedDeansList(x)) -> (GoodAtPlanning(x) | GoodAtMathematics(x)))"]}
{"id": "folio_train_203", "nl": "If a Leetcode problem is at the easy level, then its AC rate is lower than 20 percent. ", "fol": "all x.(IsEasyLevel(x) -> ACRateLowerThan20(x))", "prediction": ["all x.((LeetcodeProblem(x) & EasyLevel(x)) -> ACRateLowerThan20Percent(x))", "all x.((LeetcodeProblem(x) & EasyLevel(x)) -> ACRateLowerThan(x,20))", "all x.((LeetcodeProblem(x) & EasyLevel(x)) -> LowerACRateThan20Percent(x))", "all x.((LeetcodeProblem(x) & EasyLevel(x)) -> LowerACRateThan(x,20))", "all x.((LeetcodeProblem(x) & EasyLevel(x)) -> ACRateLessThan20Percent(x))", "all x.((LeetcodeProblem(x) & EasyLevel(x)) -> LowerACRate(x,20))", "all x.((LeetcodeProblem(x) & EasyLevel(x)) -> LowerAACRateThan20Percent(x))", "all x.((LeetcodeProblem(x) & EasyLevel(x)) -> ACRateLowerThan-20Percent(x))", "all x.((LeetcodeProblem(x) & EasyLevel(x)) -> ACRateLessThan(x,20))", "all x.((LeetcodeProblem(x) & EasyLevel(x)) -> LowerAACRateThan(x,20))", "all x.((LeetcodeProblem(x) & EasyLevel(x)) -> LowerAACRate(x,20))", "all x.((LeetcodeProblem(x) & EasyLevel(x)) -> ACRateLaterThan20Percent(x))", "all x.((LeetcodeProblem(x) & EasyLevel(x)) -> LowerACRate(x,y))", "all x.((LeetcodeProblem(x) & EasyLevel(x)) -> LowACRate(x,20))", "all x.((LeetcodeProblem(x) & EasyLevel(x)) -> LowerAACRate(x,y))", "all x.((LeetcodeProblem(x) & EasyLevel(x)) -> ACRateLowerThan(x,20%))"]}
{"id": "folio_train_204", "nl": "All Leetcode problems that are recommended to novices are easy. ", "fol": "all x.(IsRecommendedToNovices(x) -> IsEasyLevel(x))", "prediction": ["all x.((LeetcodeProblem(x) & RecommendedToNovees(x)) -> Easy(x))", "all x.((LeetcodeProblem(x) & RecommendedToNovels(x)) -> Easy(x))", "all x.((LeetcodeProblem(x) & RecommendedToNoveals(x)) -> Easy(x))", "all x.((LeetcodeProblem(x) & RecommendedToNinjas(x)) -> Easy(x))", "all x.((LeetcodeProblem(x) & RecommendedToNewbies(x)) -> Easy(x))", "all x.((LeetcodeProblem(x) & RecommendedToNovegars(x)) -> Easy(x))", "all x.((LeetcodeProblem(x) & RecommendedToNovells(x)) -> Easy(x))", "all x.((LeetcodeProblem(x) & RecommendatedToNoveals(x)) -> Easy(x))", "all x.((LeetcodeProblem(x) & RecommendedToNovears(x)) -> Easy(x))", "all x.((LeetcodeProblem(x) & RecommendedToNoveles(x)) -> Easy(x))", "all x.((LeetcodeProblem(x) & RecommendatedToNovels(x)) -> Easy(x))", "all x.((LeetcodeProblem(x) & RecommendedToNoveau(x)) -> Easy(x))", "all x.((LeetcodeProblem(x) & RecommendatedToNovees(x)) -> Easy(x))", "all x.((LeetcodeProblem(x) & RecommendableToNoveals(x)) -> Easy(x))", "all x.((LeetcodeProblem(x) & RecommendationToNoveals(x)) -> Easy(x))", "all x.(LeetcodeProblem(x) -> Easy(x))"]}
{"id": "folio_train_205", "nl": "A Leetode problem is either easy or hard.", "fol": "all x.((IsEasyLevel(x) & -IsHardLevel(x)) | (-IsEasyLevel(x) & IsHardLevel(x)))", "prediction": ["all x.(LeetodeProblem(x) -> (Easy(x) | Hard(x)))", "all x.(LeatodeProblem(x) -> (Easy(x) | Hard(x)))", "all x.(LeetodeProblem(x) -> (Easy(x) | Hard(x)))", "all x.(LeathetodeProblem(x) -> (Easy(x) | Hard(x)))", "exists x.(LeetodeProblem(x) & (Easy(x) | Hard(x)))", "all x.(LeetodeProblem(x) -> ((Easy(x) | Hard(x))))", "all x.(LetodeProblem(x) -> (Easy(x) | Hard(x)))", "all x.(LeetodeProblem(x) -> (IsEasy(x) | IsHard(x)))", "all x.(LeathodeProblem(x) -> (Easy(x) | Hard(x)))", "all x.(Leetode(x) -> (Easy(x) | Hard(x)))", "all x.(LeaftodeProblem(x) -> (Easy(x) | Hard(x)))", "all x.(LeaetodeProblem(x) -> (Easy(x) | Hard(x)))", "all x.(LeaguetodeProblem(x) -> (Easy(x) | Hard(x)))", "all x.(LeetodeProblem(x) -> (Ease(x) | Hard(x)))", "all x.(LaetodeProblem(x) -> (Easy(x) | Hard(x)))", "all x y.((LeetodeProblem(x) & Easy(y)) | Hard(y))"]}
{"id": "folio_train_206", "nl": "Leetcode problems that are starred by more than 1 thousand users are hard.", "fol": "all x.(IsStarredByUsers(x) -> IsHardLevel(x))", "prediction": ["all x.((LeetcodeProblem(x) & StartedByMoreThan1000Users(x)) -> Hard(x))", "all x.((LeetcodeProblem(x) & StartedByMoreThan(x,1000)) -> Hard(x))", "all x.((LeetcodeProblem(x) & StartedByMoreThanOneTen(x)) -> Hard(x))", "all x y.((LeetcodeProblem(x) & StartedByMoreThan(x,y)) -> Hard(x))", "all x y.((LeetcodeProblem(x) & StartedBy(x,y) & MoreThan(y,x)) -> Hard(x))", "all x.((LeetcodeProblem(x) & StartedByOver1000Users(x)) -> Hard(x))", "all x y.((LeetcodeProblem(x) & StartedByMoreThan1000Users(x)) -> Hard(y))", "all x.((LeetcodeProblem(x) & StartedByMoreThan(x,1)) -> Hard(x))", "all x.((LeetcodeProblem(x) & StartedByMoreThan(x,y)) -> Hard(x))", "all x.((LeetcodeProblem(x) & StartedByMoreThan1000(x)) -> Hard(x))", "all x.((LeetcodeProblem(x) & StartedByMoreThan(x,2000)) -> Hard(x))", "all x y.((LeetcodeProblem(x) & StartedByMoreThan1000Users(y)) -> Hard(x))", "all x.((LeetcodeProblem(x) & StartedBy(x,y) & MoreThan1000Users(y)) -> Hard(x))", "all x y.((LeetcodeProblem(x) & StartedByMoreThan1000Users(x)) -> Hard(x))", "all x.((LeetcodeProblem(x) & StartedByMoreThanTen(x)) -> Hard(x))", "all x.((LeetcodeProblem(x) & StartedBy(x,y) & MoreThan(y,x)) -> Hard(x))"]}
{"id": "folio_train_207", "nl": "2Sum is recommended to novices. ", "fol": "IsRecommendedToNovices(Twosum)", "prediction": ["all x.((2Sum(x) & Novice(x)) -> RecommendedTo(x,y))", "all x.(2Sum(x) -> RecommendedToNovees(x))", "all x.((Sum(x) & Novice(x)) -> RecommendedTo(x,y))", "all x.((Sum(x) & Novice(x)) -> RecommendedTo(x,2))", "all x.((Sum(x) & Novice(y)) -> RecommendedTo(x,y))", "all x.((2Sum(x) & Novice(y)) -> RecommendedTo(x,y))", "all x.((2Sum(x) & Newbie(x)) -> RecommendedTo(x,y))", "all x.(2Sum(x) -> RecommendedToNovels(x))", "all x.((Sum(x) & Newbie(x)) -> RecommendedTo(x,2))", "all x.((Sum(x) & Newbie(y)) -> RecommendedTo(x,y))", "all x.(2Sum(x) -> RecommendedToNoveles(x))", "all x.((Sum(x) & Newbie(x)) -> RecommendedTo(x,y))", "all x.((Sum(x) & Noob(x)) -> RecommendedTo(x,y))", "all x.((Sum(x) & Nomad(x)) -> RecommendedTo(x,y))", "all x.((2Sum(x) & Noob(x)) -> RecommendedTo(x,y))", "all x.((2Sum(x) & Newbie(x)) -> RecommendedTo(x))"]}
{"id": "folio_train_208", "nl": "4Sum is starred by more than 1 thousand users.", "fol": "IsStarredByUsers(Foursum)", "prediction": ["all x.((4Sum(x) & StartedByMoreThan1000Users(x)) -> StartedBy(x))", "all x.(4Sum(x) -> StartedByMoreThan1000Users(x))", "all x.(4Sum(x) -> StartedByMoreThan(x,1000))", "all x y.((4Sum(x) & User(y)) -> StartedBy(x,y))", "all x.((Sum(x) & StartedByMoreThan1000Users(x)) -> StartedBy(x))", "all x.((4Sum(x) & StartedByMoreThan(x,1000)) -> StartedBy(x,1))", "all x.((4Sum(x) & StartedByMoreThan(x,1000)) -> StartedBy(x))", "all x.((4Sum(x) & StartedByMoreThan1000Users(x)) -> Started(x))", "all x.((4Sum(x) & StartedByMoreThan1000Users(x)) -> StartedBy(x,y))", "all x.(Sum(x) -> StartedByMoreThan1000Users(x))", "all x y.((Sum(x) & User(y)) -> StartedBy(x,y))", "all x.((Sum(x) & StartedByMoreThan(x,1000)) -> StartedBy(x,1))", "all x.((Sum(x) & StartedByMoreThan1000Users(x)) -> Started(x))", "all x.(Sum(x) -> StartedByMoreThan(x,1000))", "all x.((Sum(x) & StartedByMoreThan(x,1000)) -> StartedBy(x))", "all x.((4Sum(x) & StartedByMoreThan(x,1000)) -> StartedBy(x,4))"]}
{"id": "folio_train_209", "nl": "2Sum is a Leetcode problem with an easy level.", "fol": "IsEasyLevel(Twosum)", "prediction": ["all x.((LeetcodeProblem(x) & EasyLevel(x)) -> 2Sum(x))", "all x.(2Sum(x) -> (LeetcodeProblem(x) & EasyLevel(x)))", "all x.(Sum(x) -> (LeetcodeProblem(x) & EasyLevel(x)))", "2Sum is a LeetcodeProblem(x) & EasyLevel(x))", "all x.((Sum(x) & LeetcodeProblem(x) & EasyLevel(x)) -> LeetcodeProblem(x))", "2Sum(x) -> (LeetcodeProblem(x) & EasyLevel(x)))", "all x.((Sum(x) & LeetcodeProblem(x) & EasyLevel(x)) -> 2Sum(x))", "2Sum(x) -> (LeetcodeProblem(x) & EasyLevel(x)))", "all x.(Sum(x) -> LeetcodeProblem(x) & EasyLevel(x))", "all x.(2Sum(x) -> LeetcodeProblem(x) & EasyLevel(x))", "all x.(LeetcodeProblem(x) & EasyLevel(x)) -> 2Sum(x))", "2Sum is LeetcodeProblem(x) & EasyLevel(x))", "2Sum is a LeetcodeProblemWithEasyLevel(x))", "2Sum (LeetcodeProblem(x) & EasyLevel(x))", "all x.((Sum(x) & LeetcodeProblem(x) & EasyLevel(x)) -> Leetcode(x))", "(LeetcodeProblem(2Sum) & EasyLevel(2Sum))"]}
{"id": "folio_train_210", "nl": "4Sum is a Leetcode problem recommended to the novice.", "fol": "(LeetcodeProblem(Foursum) & IsRecommendedToNovices(Foursum))", "prediction": ["all x.((LeetcodeProblem(x) & Novice(x)) -> 4Sum(x))", "all x.((LeetcodeProblem(x) & Newbie(x)) -> 4Sum(x))", "all x.(4Sum(x) -> LeetcodeProblem(x))", "all x.((LeetcodeProblem(x) & RecommendedToNovel(x)) -> 4Sum(x))", "all x.((LeetcodeProblem(x) & Novice(x)) -> 4SumRecommended(x))", "all x.((LeetcodeProblem(x) & RecommendedToNovee(x)) -> 4Sum(x))", "all x.((LeetcodeProblem(x) & Noob(x)) -> 4Sum(x))", "all x.(4Sum(x) -> LeetcodeProblemRecommendedToNovel(x))", "all x y.((LeetcodeProblem(x) & Novice(y)) -> RecommendedTo(x,y))", "all x.(4Sum(x) -> (LeetcodeProblem(x) & RecommendedToNovel(x)))", "all x.(4Sum(x) -> (LeetcodeProblem(x) & RecommendedToNovee(x)))", "all x.((LeetcodeProblem(x) & Newcomer(x)) -> 4Sum(x))", "all x.(LeetcodeProblem(x) -> RecommendedToNovel(x))", "all x.((LeetcodeProblem(x) & Novice(x)) -> LeetcodeProblem(x))", "all x.((LeetcodeProblem(x) & Novice(x)) -> 4SumProblem(x))", "all x.((LeetcodeProblem(x) & Newbie(x)) -> 4SumRecommended(x))"]}
{"id": "folio_train_211", "nl": "2Sum has an AC rate higher than 20 percent.", "fol": "-ACRateLowerThan20(Twosum)", "prediction": ["all x.(2Sum(x) -> HasACRateHigherThan(x,20))", "all x.((Sum(x) & ACRateHigherThan(x,20)) -> Has(x,20))", "all x.((Sum(x) & ACRateHigherThan(x,20)) -> HigherThan(x,20))", "all x.(2Sum(x) -> ACRateHigherThan(x,20))", "all x.(2Sum(x) -> HasACRateHigherThan20Percent(x))", "all x.((Sum(x) & ACRateHigherThan(x,20)) -> HigherThan(x,20))", "all x.((Sum(x) & ACRateHigherThan20Percent(x)) -> HigherThan20Percent(x))", "all x.(Sum(x) -> ACRateHigherThan(x,20))", "all x.(Sum(x) -> HasACRateHigherThan(x,20))", "all x y.((Sum(x) & ACRate(y) & HigherThan(x,y)) -> HigherThan(x,y))", "all x.((2Sum(x) & ACRateHigherThan20Percent(x)) -> HasACRateHigherThan20Percent(x))", "all x.((Sum(x) & ACRateHigherThan20Percent(x)) -> HigherThan20Percent(x))", "all x.((2Sum(x) & ACRateHigherThan(x,20)) -> Has(x,20))", "all x.(Sum(x) -> HasACRateHigherThan20Percent(x))", "all x.(2Sum(x) -> ACRateHigherThan20Percent(x))", "all x y.((Sum(x) & ACRate(y)) -> HigherThan(x,y))"]}
{"id": "folio_train_212", "nl": "All rental cars cost the renter money.", "fol": "all x.(RentCar(x,Car) -> CostToRenter(x,Money))", "prediction": ["all x.(RentalCar(x) -> CostsRenterMoney(x))", "all x y.((RentalCar(x) & Renter(y)) -> CostsMoney(x,y))", "all x y.((Car(x) & Renter(y)) -> CostsMoney(x,y))", "all x.((RentalCar(x) & Renter(y)) -> CostsMoney(x,y))", "all x y.((RentingCar(x) & Renter(y)) -> CostsMoney(x,y))", "all x y z.((RentalCar(x) & Renter(y) & Money(z)) -> Costs(x,y,z))", "all x y z.((RentalCar(x) & Renter(y) & Renter(z)) -> CostsMoney(x,y,z))", "all x.(RentingCar(x) -> CostsRenterMoney(x))", "all x.((Car(x) & Renter(y)) -> CostsMoney(x,y))", "all x.((RentalCar(x) & Renter(x)) -> CostsMoney(x))", "all x y z.((Car(x) & Renter(y) & Renter(z)) -> CostsMoney(x,y,z))", "all x.(RentalCar(x) -> CostsMortgage(x))", "all x.((Car(x) & Renter(x)) -> CostsMoney(x))", "all x.(RentalCar(x) -> CostsMoney(x))", "all x y.((RentalCar(x) & Renter(y)) -> CostsMoney(y,x))", "all x y z.((Car(x) & Renter(y) & Rental(z)) -> CostsMoney(x,y,z))"]}
{"id": "folio_train_213", "nl": "Whenever Sarah goes to Vermont, Sarah drives there.", "fol": "(GoesToLocation(Sarah,Vermont) -> DriveToLocation(Sarah,Vermont))", "prediction": ["all x y.((Sarah(x) & Vermont(y)) -> Drives(x,y))", "all x y.((Sarah(x) & Vermont(y)) -> DrivesTo(x,y))", "all x y.((Sarah(x) & Vermont(y)) -> DrivesThere(x,y))", "all x y z.((Sarah(x) & Vermont(y) & Vermont(z)) -> Drives(x,y,z))", "all x.((Sarah(x) & GoesTo(x,VT)) -> DrivesTo(x,VT))", "all x y.((SarahGoesTo(x,y) & Vermont(y)) -> DrivesThere(x,y))", "all x.((Sarah(x) & GoesTo(x,Venice)) -> DrivesTo(x,Venice))", "all x.((Sarah(x) & GoesToVT(x)) -> DrivesThere(x))", "all x y z.((Sarah(x) & Vermont(y) & Vermont(z)) -> DrivesTo(x,y,z))", "all x y.((SarahGoesTo(x,y) & Vermont(y)) -> Drives(x,y))", "all x y.((SarahGoesTo(x,y) & Vermont(y)) -> DrivesTo(x,y))", "all x.((Sarah(x) & GoesTo(x,VT)) -> DrivesThere(x,VT))", "all x.((SarahGoesTo(x,VT)) -> DrivesTo(x,VT))", "all x.((Sarah(x) & GoesTo(x,Venice)) -> DrivesThere(x))", "all x.((Sarah(x) & GoesTo(x,VT)) -> DrivesThere(x))", "all x.((Sarah(x) & GoesToVenice(x)) -> DrivesThere(x))"]}
{"id": "folio_train_214", "nl": "For someone who does not own a car to drive somewhere, they must either borrow a car or rent a car.", "fol": "all x y.((((-OwnCar(x,Car) & DriveToLocation(x,y)) -> BorrowCar(x,Car)) & -RentCar(x,Car)) | (-((-OwnCar(x,Car) & DriveToLocation(x,y)) -> BorrowCar(x,Car)) & RentCar(x,Car)))", "prediction": ["all x.((Person(x) & -OwnsCar(x)) -> (BorrowCar(x) | RentCar(x)))", "all x.((Person(x) & -OwnsCar(x)) -> (BorrowsCar(x) | RentsCar(x)))", "all x.((Person(x) & -OwnsCar(x) & DrivesSomewhere(x)) -> (BorrowsCar(x) | RentsCar(x)))", "all x.((Person(x) & -OwnsCar(x) & DrivesSomewhere(x)) -> (BorrowCar(x) | RentCar(x)))", "all x.((Person(x) & -OwnCar(x)) -> (BorrowCar(x) | RentCar(x)))", "all x.((Person(x) & -OwnsCar(x)) -> ((BorrowCar(x) | RentCar(x))))", "all x.((Person(x) & -OwnsCar(x)) -> (DrivesSomewhere(x) & (BorrowsCar(x) | RentsCar(x))))", "all x.((DoesNotOwnCar(x) & DrivesSomewhere(x)) -> (BorrowCar(x) | RentCar(x)))", "all x.((DoesNotOwnCar(x) & DrivesSomewhere(x)) -> (BorrowsCar(x) | RentsCar(x)))", "all x.(((Person(x) & -OwnsCar(x)) -> (BorrowCar(x) | RentCar(x)))", "all x.((Person(x) & -OwnsCar(x)) -> ((BorrowsCar(x) | RentsCar(x))))", "all x y.((Person(x) & -OwnsCar(x) & DrivesSomewhere(x)) -> (BorrowsCar(x,y) | RentsCar(x,y)))", "all x.((Person(x) & -OwnsCar(x)) -> (BorrowsCar(x) | RentCar(x)))", "all x y.((Person(x) & -OwnsCar(x) & DrivesSomewhere(x)) -> (BorrowsCar(x) | RentsCar(x)))", "all x.((Person(x) & -OwnsCar(x)) -> (BuysCar(x) | RentsCar(x)))", "all x y.((Person(x) & -OwnsCar(x) & DrivesSomewhere(x)) -> (BorrowCar(x,y) | RentCar(x,y)))"]}
{"id": "folio_train_215", "nl": "Sarah doesn\u2019t own a car.", "fol": "-OwnCar(Sarah,Car)", "prediction": ["all x.((Sarah(x) & -OwnsCar(x)) -> -OwnsCar(x))", "all x.(Sarah(x) -> -OwnsCar(x))", "all x.((Sarah(x) & -OwnCar(x)) -> -OwnsCar(x))", "exists x.(Sarah(x) & -OwnsCar(x))", "all x.((Sarah(x) & -OwnCar(x)) -> -OwnCar(x))", "all x y.((Sarah(x) & Car(y)) -> -Owns(x,y))", "all x.((Sarah(x) & -OwnsCar(x)) -> -HasCar(x))", "all x.((Sarah(x) & -HasCar(x)) -> -Owns(x,Sarah))", "all x.(Sarah(x) -> -OwnCar(x))", "(-OwnsCar(Sarah))", "all x y.((Sarah(x) & Car(y)) -> -Own(x,y))", "-exists x.(Sarah(x) & OwnsCar(x))", "all x.((Sarah(x) & -HasCar(x)) -> -HasCar(x))", "All x.(Sarah(x) -> -OwnsCar(x))", "exists x.(Sarah(x) & -OwnCar(x))", "all x.((Sarah(x) & -OwnCar(x)) -> -HasCar(x))"]}
{"id": "folio_train_216", "nl": "Sarah never borrows a car to go camping.", "fol": "all x.(GoingCamping(Sarah,x) -> -BorrowCar(Sarah,Car))", "prediction": ["all x.((Sarah(x) & Car(y)) -> -Borrows(x,y))", "all x.((Sarah(x) & Car(y)) -> -BorrowsToGoCamping(x,y))", "all x y.((Sarah(x) & Car(y)) -> -Borrows(x,y))", "all x y.((Sarah(x) & Car(y)) -> -BorrowsToGoCamping(x,y))", "all x.((Sarah(x) & Car(y)) -> -BorrowsForCamping(x,y))", "all x.((Sarah(x) & Car(y)) -> NeverBorrows(x,y))", "all x.((Sarah(x) & Car(y)) -> NeverBorrowsToGoCamping(x,y))", "all x.((Sarah(x) & Car(y)) -> -BorrowsToCamping(x,y))", "all x y z.((Sarah(x) & Car(y) & Camping(z)) -> -Borrows(x,y,z))", "all x y.((Sarah(x) & Car(y)) -> -BorrowsForCamping(x,y))", "all x y.((Sarah(x) & Car(y)) -> NeverBorrows(x,y))", "all x y.((Sarah(x) & Car(y)) -> NeverBorrowsToGoCamping(x,y))", "all x y z.((Sarah(x) & Car(y) & Camping(z)) -> -Borrows(x,y))", "all x y z.((Sarah(x) & Car(y) & Camping(z)) -> -BorrowsToGo(x,y,z))", "all x.((Sarah(x) & Car(x)) -> -BorrowsToGoCamping(x))", "all x.((Sarah(x) & -BorrowsCar(x)) -> -GoesCamping(x))"]}
{"id": "folio_train_217", "nl": "Sarah is going to go camping in Vermont this weekend.", "fol": "GoingCamping(Sarah,Vermont)", "prediction": ["all x y.((Sarah(x) & Vermont(y)) -> GoingToCamp(x,y))", "all x y.((Sarah(x) & Vermont(y)) -> GoingToGoCamping(x,y))", "all x y.((Sarah(x) & Vermont(y)) -> Camping(x,y))", "all x y.((Sarah(x) & Vermont(y)) -> CampingWeekend(x,y))", "all x y.((Sarah(x) & Vermont(y)) -> GoingToCamping(x,y))", "all x y z.((Sarah(x) & Vermont(y) & Camping(z)) -> GoingToGo(x,y,z))", "all x y z.((Sarah(x) & Vermont(y) & Weekend(z)) -> CampingIn(x,y,z))", "all x y z.((Sarah(x) & Vermont(y) & Weekend(z)) -> Camping(x,y,z))", "all x y z.((Sarah(x) & Vermont(y) & Weekend(z)) -> GoingToGoCamping(x,y,z))", "all x y.((Sarah(x) & Vermont(y)) -> GoesCamping(x,y))", "Sarah is going to go camping in Vermont this weekend.", "all x y.((Sarah(x) & Vermont(y)) -> GoingToCampThisWeekend(x,y))", "all x y.((Sarah(x) & Vermont(y)) -> CampingThisWeekend(x,y))", "all x y.((Sarah(x) & Vermont(y)) -> CampingIn(x,y))", "all x y.((Sarah(x) & Vermont(y)) -> GoingCamping(x,y))", "all x y.((Sarah(x) & Vermont(y)) -> GoingToCampIn(x,y))"]}
{"id": "folio_train_218", "nl": "To go camping somewhere, you must go to that place.", "fol": "all x y.(GoingCamping(x,y) -> GoesToLocation(x,y))", "prediction": ["all x y.((CampingPlace(x) & Place(y)) -> GoTo(x,y))", "all x y.((CampingPlace(x) & Place(y)) -> MustGoTo(x,y))", "all x y.((CampingPlace(x) & Place(y)) -> MustGo(x,y))", "all x.(Camping(x) -> exists y.(Place(y) & GoTo(x,y))))", "all x y.((CampingPlace(x) & CampingPlace(y)) -> GoTo(x,y))", "all x y.((CampingPlace(x) & Place(y)) -> Go(x,y))", "all x y.((CampingPlace(x) & CampingPlace(y)) -> MustGoTo(x,y))", "all x.(Camping(x) -> GoToPlace(x))", "all x.(Camping(x) -> MustGoToPlace(x))", "all x y.((CampingPlace(x) & CampingPlace(y)) -> MustGo(x,y))", "all x y z.((CampingPlace(x) & Place(y) & Place(z)) -> GoTo(x,y,z))", "all x y z.((CampingPlace(x) & Place(y) & CampingPlace(z)) -> GoTo(x,y,z))", "all x y z.((CampingPlace(x) & Place(y) & CampingPlace(z)) -> MustGoTo(x,y,z))", "all x y.((CampingPlace(x) & Place(y)) -> GoesTo(x,y))", "all x y.((Camping(x) & Place(y)) -> GoTo(x,y))", "all x.(Camping(x) -> exists y.(Place(y) & GoesTo(x,y))))"]}
{"id": "folio_train_219", "nl": "Sarah will spend money this weekend.", "fol": "CostToRenter(Sarah,Money)", "prediction": ["all x y.((Sarah(x) & Weekend(y)) -> SpendsMoney(x,y))", "all x.(Sarah(x) -> SpendsMoneyThisWeekend(x))", "all x.(Sarah(x) -> SpendsMoney(x))", "all x.((Sarah(x) & SpendsMoney(x)) -> ThisWeekend(x))", "all x.((Sarah(x) & Weekend(x)) -> SpendsMoney(x))", "all x.((Sarah(x) & SpendsMoney(x)) -> Weekend(x))", "all x y.((Sarah(x) & Weekend(y)) -> SpendMoney(x,y))", "all x.((Sarah(x) & Weekend(x)) -> SpendsMoney(x))", "all x.(Sarah(x) -> SpendsMonthThisWeekend(x))", "All x.(Sarah(x) -> SpendsMoneyThisWeekend(x))", "all x.(Sarah(x) -> SpendMoneyThisWeekend(x))", "all x.(Sarah(x) -> SpendsMoney(x,Weekend))", "all x.((Sarah(x) & SpendsMoney(x)) -> Weekend(x))", "all x.((Sarah(x) & SpendMoney(x)) -> ThisWeekend(x))", "all x.((Sarah(x) & Weekend(x)) -> SpendsMoney(x,y))", "all x.((Sarah(x) & SpendsMoney(x)) -> SpendsWeekend(x))"]}
{"id": "folio_train_220", "nl": "All people who attend weddings are getting married or have friends who are getting married.", "fol": "all x.(AttendWeddings(x) -> IsGettingMarried(x))", "prediction": ["all x.((Person(x) & AttendsWeddings(x)) -> (GettingMarried(x) | HasFriends(x) & GettingMarried(x)))", "all x.((Person(x) & AttendsWeddings(x)) -> (GettingMarried(x) | HasFriends(x) & GetsMarried(x)))", "all x.((Person(x) & AttendsWeddings(x)) -> (GettingMarried(x) | HasFriendsGettingMarried(x)))", "all x.((Person(x) & AttendsWeddings(x)) -> (GettingMarried(x) | HasFriends(x)))", "all x.(AttendsWeddings(x) -> (GettingMarried(x) | HasFriendsGettingMarried(x)))", "all x.((Person(x) & AttendsWeddings(x)) -> (GetsMarried(x) | HasFriends(x) & GetsMarried(x)))", "all x.((Person(x) & AttendsWedding(x)) -> (GettingMarried(x) | HasFriends(x) & GettingMarried(x)))", "all x.((People(x) & AttendsWeddings(x)) -> (GettingMarried(x) | HasFriends(x) & GettingMarried(x)))", "all x.((Person(x) & AttendsWeddings(x)) -> (GettingMarried(x) | HasFamilies(x) & GettingMarried(x)))", "all x.((Person(x) & AttendsWeddings(x)) -> (GettingMarried(x) | FriendsGettingMarried(x)))", "all x.(AttendsWeddings(x) -> (GettingMarried(x) | HasFriends(x) & GettingMarried(x)))", "all x.((Person(x) & AttendsWedding(x)) -> (GettingMarried(x) | HasFriends(x) & GetsMarried(x)))", "all x.((Person(x) & AttendsWeddings(x)) -> (GettingMarried(x) | HavingFriends(x) & GettingMarried(x)))", "all x.(AttendsWedding(x) -> (GettingMarried(x) | HasFriendsGettingMarried(x)))", "all x.((Person(x) & AttendsWeddings(x)) -> (GettingMarried(x) | HasFamily(x) & GettingMarried(x)))", "all x.((Person(x) & AttendsWeddings(x)) -> (GetsMarried(x) | HasFriendsGettingMarried(x)))"]}
{"id": "folio_train_221", "nl": "No preteens and other young children are getting married or have friends who are getting married.", "fol": "all x.(IsPreTeen(x) -> -IsGettingMarried(x))", "prediction": ["all x.((Preteen(x) & YoungChild(x)) -> (-GettingMarried(x) | HasFriendsGettingMarried(x)))", "all x.((Preteen(x) & YoungChild(x)) -> (-GetsMarried(x) | HasFriends(x) & GetsMarried(x)))", "all x.((Preteen(x) & YoungChild(x)) -> (-GettingMarried(x) | HasFriends(x) & GettingMarried(x)))", "all x.((Preteen(x) & YoungChild(x)) -> (-GettingMarried(x) | HasFriends(x) & Married(x)))", "all x.((Preteen(x) & YoungChild(x)) -> (-Married(x) | HasFriendsMarried(x)))", "all x.((Preteen(x) & YoungChild(x)) -> (-GettingMarried(x) | HasFriends(x) & GetsMarried(x)))", "all x.((Preteen(x) & YoungChild(x)) -> (-GettingMarried(x) | HasFriends(x)))", "all x y.((Preteen(x) & YoungChild(y)) -> (-GettingMarried(x) | HasFriends(x,y)))", "all x.((Preteen(x) & YoungChild(x)) -> (-GettingMarried(x) | HasFriendsGetMarried(x)))", "all x.((Preteen(x) & YoungChild(x)) -> (-GettingMarried(x) | HasFriends(x,Married)))", "all x.((Preteen(x) | YoungChild(x)) -> (-GettingMarried(x) | HasFriendsGettingMarried(x)))", "all x.((Preteen(x) | YoungChild(x)) -> (-GettingMarried(x) | HasFriends(x)))", "all x.((Preteen(x) & YoungChild(x)) -> (-GettingMarried(x) | HasFriends(x,married)))", "all x.((Preteen(x) & YoungChild(x)) -> (-GettingMarried(x) | HasFriends(x))))", "all x.((Preteen(x) & YoungChild(x)) -> (-GetsMarried(x) | HasFriends(x)))", "all x y.((Preteen(x) & YoungChild(y)) -> (-GetsMarried(x) | HasFriends(x,y)))"]}
{"id": "folio_train_222", "nl": "If people enjoy celebrating life milestone events with other people, then they attend weddings.", "fol": "all x.(EnjoyCelebratingMilestones(x) -> AttendWeddings(x))", "prediction": ["all x y.((Person(x) & Person(y) & EnjoysCelebratingLifeMilestoneEvents(x,y)) -> AttendsWeddings(x))", "all x.((People(x) & EnjoysCelebratingLifeMilestoneEvents(x)) -> AttendsWeddings(x))", "all x y.((Person(x) & Person(y) & CelebratesLifeMilestoneEvents(x,y)) -> AttendsWedding(x))", "all x y.((Person(x) & Person(y) & CelebratesLifeMilestoneEvents(x,y)) -> AttendsWeddings(x))", "all x y.((Person(x) & Person(y) & EnjoysCelebratingLifeMilestoneEvents(x,y)) -> AttendsWedding(x))", "all x.((Person(x) & EnjoysCelebratingLifeMilestoneEvents(x) & OtherPeople(x)) -> AttendsWeddings(x))", "all x.((People(x) & EnjoysCelebratingLifeMilestoneEvents(x) & OtherPeople(x)) -> AttendsWeddings(x))", "all x.((Person(x) & EnjoysCelebratingLifeMilestoneEvents(x)) -> AttendsWeddings(x))", "all x.((People(x) & CelebrateLifeMilestoneEvents(x) & OtherPeople(x)) -> AttendWeddings(x))", "all x y.((Person(x) & Person(y) & CelebratesLifeMilestoneEvents(x,y)) -> AttendsWedding(x,y))", "all x.((Person(x) & CelebratesLifeMilestoneEvents(x) & OtherPeople(x)) -> AttendsWeddings(x))", "all x y.((Person(x) & Person(y) & EnjoysCelebratingLifeMilestoneEvents(x,y)) -> AttendsWedding(x,y))", "all x y.((People(x) & Person(y) & EnjoysCelebratingLifeMilestoneEvents(x,y)) -> AttendsWeddings(x))", "all x y.((Person(x) & Person(y) & CelebratesLifeMilestoneEventsWith(x,y)) -> AttendsWedding(x))", "all x y.((Person(x) & Person(y) & CelebratesLifeMilestoneEventsWith(x,y)) -> AttendsWeddings(x))", "all x y.((Person(x) & Person(y) & EnjoysCelebratingMilestoneEvents(x,y)) -> AttendsWeddings(x))"]}
{"id": "folio_train_223", "nl": "If people are fond of large organized group functions, then they enjoy celebrating life milestone events with other people.", "fol": "all x.(FondOfLargeGatherings(x) -> EnjoyCelebratingMilestones(x))", "prediction": ["all x.((Person(x) & FondOfLargeOrganizedGroupFunctions(x)) -> EnjoysCelebratingLifeMilestoneEvents(x))", "all x.((Person(x) & FondOfLargeOrganizedGroupFunctions(x)) -> EnjoysCelebratingLifeMilestoneEventsWithOtherPeople(x))", "all x.((People(x) & FondOfLargeOrganizedGroupFunctions(x)) -> EnjoysCelebratingLifeMilestoneEvents(x))", "all x.((People(x) & FondOfLargeOrganizedGroupFunctions(x)) -> EnjoysCelebratingLifeMilestoneEventsWithOtherPeople(x))", "all x.((Person(x) & FondOfLargeOrganizedGroupFunctions(x)) -> EnjoysCelebratingLifeMilestoneEventsWithOthers(x))", "all x.((Person(x) & FondOfLargeOrganizedGroupFunctions(x)) -> CelebrateLifeMilestoneEventsWithOtherPeople(x))", "all x.(FavoriteOfLargeOrganizedGroupFunctions(x) -> EnjoysCelebratingLifeMilestoneEventsWithOtherPeople(x))", "all x.((Person(x) & FondOfLargeOrganizedGroupFunctions(x)) -> CelebratesLifeMilestoneEventsWithOtherPeople(x))", "all x.(FavoriteOfLargeOrganizedGroupFunctions(x) -> CelebrateLifeMilestoneEventsWithOtherPeople(x))", "all x.((People(x) & FondOfLargeOrganizedGroupFunctions(x)) -> EnjoysCelebratingLifeMilestoneEventsWithOthers(x))", "all x.(FavoriteOfLargeOrganizedGroupFunctions(x) -> EnjoysCelebratingLifeMilestoneEvents(x))", "all x.((People(x) & FondOfLargeOrganizedGroupFunctions(x)) -> CelebrateLifeMilestoneEventsWithOtherPeople(x))", "all x.((Person(x) & FondOfLargeOrganizedGroupFunctions(x)) -> EnjoysCelebratingLifeMeasurementEvents(x))", "all x.((Person(x) & FondOfLargeOrganizedGroupFunctions(x)) -> CelebrateLifeMilestoneEventsWithOthers(x))", "all x.((Person(x) & FondOfLargeOrganizedGroupFunctions(x)) -> EnjoysCelebratingLifeMeasurementEventsWithOtherPeople(x))", "all x.((Person(x) & FondOfOrganizedGroupFunctions(x)) -> EnjoysCelebratingLifeMilestoneEvents(x))"]}
{"id": "folio_train_224", "nl": "All people who are outgoing and very spirited are fond of large organized group functions.", "fol": "all x.(IsOutgoing(x) -> FondOfLargeGatherings(x))", "prediction": ["all x.((Outgoing(x) & VeryTidy(x)) -> FondOfLargeOrganizedGroupFunctions(x))", "all x.((Person(x) & Outgoing(x) & VeryTidy(x)) -> FondOfLargeOrganizedGroupFunctions(x))", "all x.((Outgoing(x) & VeryStylish(x)) -> FondOfLargeOrganizedGroupFunctions(x))", "all x.((Person(x) & Outgoing(x) & VeryStylish(x)) -> FondOfLargeOrganizedGroupFunctions(x))", "all x.((Person(x) & Outgoing(x) & VeryThirsty(x)) -> FondOfLargeOrganizedGroupFunctions(x))", "all x.((Outgoing(x) & VeryThirsty(x)) -> FondOfLargeOrganizedGroupFunctions(x))", "all x.((Outgoing(x) & VeryStirring(x)) -> FondOfLargeOrganizedGroupFunctions(x))", "all x.((People(x) & Outgoing(x) & VeryTidy(x)) -> FondOfLargeOrganizedGroupFunctions(x))", "all x.((Outgoing(x) & VeryStirred(x)) -> FondOfLargeOrganizedGroupFunctions(x))", "all x.((Person(x) & Outgoing(x) & VeryStirring(x)) -> FondOfLargeOrganizedGroupFunctions(x))", "all x.((Outgoing(x) & VeryTiefy(x)) -> FondOfLargeOrganizedGroupFunctions(x))", "all x.((Person(x) & Outgoing(x) & VerySspirited(x)) -> FondOfLargeOrganizedGroupFunctions(x))", "all x.((Person(x) & Outgoing(x) & VeryStirred(x)) -> FondOfLargeOrganizedGroupFunctions(x))", "all x.((Outgoing(x) & VeryTithed(x)) -> FondOfLargeOrganizedGroupFunctions(x))", "all x.((Outgoing(x) & VerySspirited(x)) -> FondOfLargeOrganizedGroupFunctions(x))", "all x.((Outgoing(x) & VeryTspirited(x)) -> FondOfLargeOrganizedGroupFunctions(x))"]}
{"id": "folio_train_225", "nl": "If Carol is not both a pre-teen or other young child and attends weddings, then Carol is not getting married or has friends who are getting married.  ", "fol": "(-(IsPreTeen(Carol) & AttendWeddings(Carol)) -> -IsGettingMarried(Carol))", "prediction": ["all x.((Preteen(x) | YoungChild(x)) & AttendsWeddings(x)) -> (-GettingMarried(x) | HasFriendsGettingMarried(x)))", "all x.((Preteen(x) | YoungChild(x) & AttendsWeddings(x)) -> (-GettingMarried(x) | HasFriendsGettingMarried(x)))", "all x.((Preteen(x) | YoungChild(x)) & AttendsWeddings(x)) -> (-GettingMarried(x) | HasFriends(x)))", "all x.((Carol(x) & -(Preteen(x) | YoungChild(x)) & AttendsWeddings(x))) -> (-GettingMarried(x) | HasFriendsGettingMarried(x)))", "all x.(((Preteen(x) | YoungChild(x)) & AttendsWeddings(x)) -> (-GettingMarried(x) | HasFriendsGettingMarried(x)))", "all x.((Carol(x) & -(Preteen(x) | YoungChild(x)) & AttendsWeddings(x))) -> (-GettingMarried(x) | HasFriends(x))))", "all x.((Preteen(x) | YoungChild(x)) & AttendsWeddings(x)) -> (-GettingMarried(x) | HasFriendsGetMarried(x)))", "all x.((Preteen(x) | YoungChild(x)) & AttendsWeddings(x)) -> (-GettingMarried(x) | HasFriendsGoingMarried(x)))", "all x.((Preteen(x) & YoungChild(x) & AttendsWeddings(x)) -> (-GettingMarried(x) | HasFriendsGettingMarried(x)))", "all x.((Preteen(x) | YoungChild(x) & AttendsWeddings(x)) -> (-GettingMarried(x) | HasFriends(x)))", "all x.((Preteen(x) | YoungChild(x)) & AttendsWeddings(x)) -> (-GetsMarried(x) | HasFriendsGettingMarried(x)))", "all x.((Caroline(x) & -(Preteen(x) | YoungChild(x)) & AttendsWeddings(x))) -> (-GettingMarried(x) | HasFriendsGettingMarried(x)))", "all x.((Preteen(x) | YoungChild(x) & AttendsWeddings(x)) -> (-GettingMarried(x) | HasFriendsGetMarried(x)))", "all x.((Carol(x) & -(Preteen(x) | YoungChild(x)) & AttendsWeddings(x))) -> (-GettingMarried(x) | HasFriends(x)))", "all x.((Carol(x) & -(Preteen(x) | YoungChild(x)) & AttendsWeddings(x))) -> (-GettingMarried(x) | HasFriendsGetMarried(x)))", "all x.((Caroline(x) & -(Preteen(x) | YoungChild(x)) & AttendsWeddings(x))) -> (-GettingMarried(x) | HasFriends(x))))"]}
{"id": "folio_train_226", "nl": "Carol is outgoing and very spirited.", "fol": "(IsOutgoing(Carol) & Spirited(Carol))", "prediction": ["all x.(Caroline(x) -> (Outgoing(x) & VeryStirring(x)))", "all x.(Caroline(x) -> (Outgoing(x) & VerySturdy(x)))", "all x.(Caroline(x) -> (Outgoing(x) & VeryStylish(x)))", "all x.(Carolyn(x) -> (Outgoing(x) & VeryStirring(x)))", "all x.(Caroline(x) -> (Outgoing(x) & VeryTidy(x)))", "all x.(Carolyn(x) -> (Outgoing(x) & VerySturdy(x)))", "all x.(Carolyn(x) -> (Outgoing(x) & VeryStylish(x)))", "all x.(Caroline(x) -> (Outgoing(x) & VeryStolen(x)))", "all x.(Caroline(x) -> (Outgoing(x) & VerySpiritual(x)))", "all x.(Carole(x) -> (Outgoing(x) & VeryStirring(x)))", "all x.(Caroline(x) -> (Outgoing(x) & VeryStoic(x)))", "all x.(Carol(x) -> (Outgoing(x) & VeryStirring(x)))", "all x.(Carol(x) -> (Outgoing(x) & VerySturdy(x)))", "all x.(Carole(x) -> (Outgoing(x) & VerySturdy(x)))", "all x.(Carolyn(x) -> (Outgoing(x) & VeryTidy(x)))", "all x.(Caroline(x) -> (Outgoing(x) & VeryStirred(x)))"]}
{"id": "folio_train_227", "nl": "Carol is either a preteen or other young child.", "fol": "(IsPreTeen(Carol) | YoungChild(Carol))", "prediction": ["all x.(Carol(x) -> (Preteen(x) | YoungChild(x)))", "all x.(Caroline(x) -> (Preteen(x) | YoungChild(x)))", "all x.(Carolyn(x) -> (Preteen(x) | YoungChild(x)))", "exists x.(Carol(x) & (Preteen(x) | YoungChild(x)))", "all x.((Carol(x) & (Preteen(x) | YoungChild(x))) -> YoungChild(x))", "all x.((Caroline(x) & (Preteen(x) | YoungChild(x))) -> YoungChild(x))", "all x.((Carol(x) & Preteen(x)) | YoungChild(x)) -> YoungChild(x))", "all x.((Carol(x) & Preteen(x)) | YoungChild(x))", "all x.((Caroline(x) & Preteen(x)) | YoungChild(x))", "exists x.(Caroline(x) & (Preteen(x) | YoungChild(x)))", "all x.(Carole(x) -> (Preteen(x) | YoungChild(x)))", "all x.((Caroline(x) & Preteen(x)) | YoungChild(x)) -> YoungChild(x))", "all x.(Color(x) -> (Preteen(x) | YoungChild(x)))", "all x.((Carolyn(x) & Preteen(x)) | YoungChild(x))", "all x.((Carol(x) & (Preteen(x) | YoungChild(x))) -> Child(x))", "all x.((Carolyn(x) & Preteen(x)) | YoungChild(x)) -> YoungChild(x))"]}
{"id": "folio_train_228", "nl": "Carol neither enjoys celebrating life milestone events with other people nor is outgoing and very spirited.", "fol": "(-EnjoyCelebratingMilestones(Carol) & -IsOutgoing(Carol))", "prediction": ["all x.((Caroline(x) & -(EnjoysCelebratingLifeMilestoneEvents(x) | Outgoing(x) & VeryStylish(x))) -> -(EnjoysCelebratingLifeMilestoneEvents(x) & -(EnjoysCelebratingLifeMilestoneEvents(x) & VeryStylish(x))))", "all x.((Caroline(x) & -(EnjoysCelebratingLifeMilestoneEvents(x) | Outgoing(x) & VerySturdy(x))) -> -(EnjoysCelebratingLifeMilestoneEvents(x) & -EnjoysCelebratingLifeMilestoneEvents(x))))", "all x.((Caroline(x) & -(EnjoysCelebratingLifeMilestoneEvents(x) | Outgoing(x) & VerySturdy(x))) -> -(EnjoysCelebratingLifeMilestoneEvents(x) & -EnjoysCelebratingLifeMilestoneEvents(x)))", "all x.((Caroline(x) & -(EnjoysCelebratingLifeMilestoneEvents(x) | Outgoing(x) & VerySturdy(x))) -> -(EnjoysCelebratingLifeMilestoneEvents(x) & Outgoing(x)))", "all x.((Caroline(x) & -(EnjoysCelebratingLifeMilestoneEvents(x) | Outgoing(x) & VeryStylish(x))) -> -(EnjoysCelebratingLifeMilestoneEvents(x) & VeryStylish(x)))", "all x.((Caroline(x) & -(EnjoysCelebratingLifeMilestoneEvents(x) | Outgoing(x) & VeryStylish(x))) -> -(EnjoysCelebratingLifeMilestoneEvents(x) & -EnjoysCelebratingLifeMilestoneEvents(x))))", "all x.((Caroline(x) & -(EnjoysCelebratingLifeMilestoneEvents(x) | Outgoing(x) & VeryStylish(x))) -> -(EnjoysCelebratingLifeMilestoneEvents(x) & Outgoing(x)))", "all x.((Caroline(x) & -(EnjoysCelebratingLifeMilestoneEvents(x) | Outgoing(x) & VerySturdy(x))) -> -(EnjoysCelebratingLifeMilestoneEvents(x) & -(EnjoysCelebratingLifeMilestoneEvents(x) & VerySturdy(x))))", "all x.((Caroline(x) & -(EnjoysCelebratingLifeMilestoneEvents(x) | Outgoing(x) & VeryStylish(x))) -> -(EnjoysCelebratingLifeMilestoneEvents(x) & -EnjoysCelebratingLifeMilestoneEvents(x)))", "all x.((Caroline(x) & -(EnjoysCelebratingLifeMilestoneEventsWithOthers(x) | Outgoing(x) & VerySturdy(x))) -> -(EnjoysCelebratingLifeMilestoneEventsWithOthers(x) & -EnjoysCelebratingLifeMilestoneEventsWithOthers(x))))", "all x.((Caroline(x) & -(EnjoysCelebratingLifeMilestoneEvents(x) | Outgoing(x) & VeryStylish(x))) -> -(EnjoysCelebratingLifeMilestoneEvents(x) & VeryStylish(x))))", "all x.((Caroline(x) & -(EnjoysCelebratingLifeMilestoneEvents(x) | Outgoing(x) & VerySturdy(x))) -> -EnjoysCelebratingLifeMilestoneEvents(x))", "all x.((Caroline(x) & -(EnjoysCelebratingLifeMilestoneEvents(x) | Outgoing(x) & VeryStylish(x))) -> -(EnjoysCelebratingLifeMilestoneEvents(x) & -(EnjoysCelebratingLifeMilestoneEvents(x) & VeryStylish(x)))))", "all x.((Caroline(x) & -(EnjoysCelebratingLifeMilestoneEvents(x) | Outgoing(x) & VeryStylish(x))) -> -(EnjoysCelebratingLifeMilestoneEvents(x) & -(EnjoysCelebratingLifeMilestoneEvents(x) | VeryStylish(x)))))", "all x.((Caroline(x) & -(EnjoysCelebratingLifeMilestoneEvents(x) | Outgoing(x) & VeryTidy(x))) -> -(EnjoysCelebratingLifeMilestoneEvents(x) & -EnjoysCelebratingLifeMilestoneEvents(x))))", "all x.((Caroline(x) & -(EnjoysCelebratingLifeMilestoneEvents(x) | Outgoing(x) & VeryStirring(x))) -> -(EnjoysCelebratingLifeMilestoneEvents(x) & -EnjoysCelebratingLifeMilestoneEvents(x))))"]}
{"id": "folio_train_229", "nl": "All Republicans are anti-abortion.", "fol": "all x.(IsRepublican(x) -> OpposesAbortion(x))", "prediction": ["all x.(Republican(x) -> AntiAbortion(x))", "all x.(Republican(x) -> AntiAbortion(x))", "all x y.((Republican(x) & Republican(y)) -> AntiAbortion(x))", "all x.((Republican(x) & AntiAbortion(x)) -> AntiAbortion(x))", "all x y.((Republican(x) & Republican(y)) -> AntiAbortion(x,y))", "all x.(Republican(x) -> AntiAbortion(x))", "all x.(Republican(x) -> Antiabortion(x))", "(all x.(Republican(x) -> AntiAbortion(x)))", "all x y.((Republican(x) & Republican(y)) -> AntiAbortion(x))", "all x y.((Republican(x) & Republican(y)) -> AntiAbortion(x,y))", "all x.(Republican(x) -> Anti-Abortion(x))", "all x.((Republican(x) & AntiAbortion(x)) -> -Abortion(x))", "all x y.((Republican(x) & Republican(y)) -> AntiAbortion(x))", "all x y.((Republican(x) & Republican(y)) -> AntiAbortion(x,y))", "All x.(Republican(x) -> AntiAbortion(x))", "all x y.((Republican(x) & Republican(y)) -> AntiAbortion(y))"]}
{"id": "folio_train_230", "nl": "Either Republicans or Democrats. ", "fol": "all x.(IsRepublican(x) | IsDemocrat(x))", "prediction": ["all x.(Republican(x) | Democratic(x))", "all x.(Republican(x) | Democrat(x))", "((Republican(republican) | Democrat(republican)))", "((Republican(republican) | Democratic(republican)))", "all x y.((Republican(x) | Democrat(y)) -> (Republican(x) | Democratic(x)))", "all x y.((Republican(x) | Democrat(y)) -> (Republican(x) | Democratic(y)))", "(Republican(republican) | Democratic(republican))", "exists x.(Republican(x) | Democratic(x))", "all x.((Republican(x) | Democrat(x)) -> (Republican(x) | Democratic(x)))", "all x y.((Republican(x) | Democrat(y)) -> (Republican(x) | Democrat(y)))", "all x y.((Republican(x) | Democratic(y)) -> (Republican(x) | Democratic(y)))", "all x.((Republican(x) | Democratic(x)) -> (Republican(x) | Democratic(x)))", "((Republican(x) | Democrat(x)))", "all x.(Republican(x) | Democrat(x))", "all x.((Republican(x) | Democrat(x)) -> (Republican(x) | Democrat(x)))", "all x y.((Republican(x) | Democrat(y)) -> (Republican(x) | Democrat(x)))"]}
{"id": "folio_train_231", "nl": "No Democrats are conservative.", "fol": "all x.(IsDemocrat(x) -> -IsConservative(x))", "prediction": ["-exists x.(Democrat(x) & Conservative(x))", "-exists x.(Democracy(x) & Conservative(x))", "all x.(Democrat(x) -> -Conservative(x))", "all x.(Democracy(x) -> -Conservative(x))", "-exists x.(Democrat(x) & Conservative(x))", "-exists x.(Democrat(x) & Conservatism(x))", "(-exists x.(Democrat(x) & Conservative(x)))", "-exists x.(Democracy(x) & Conservative(x))", "-exists x.(Democrat(x) & Conservator(x))", "-exists x.(Democrat(x) & Conservative(x))", "(-exists x.(Democracy(x) & Conservative(x)))", "-exists x.(Democracy(x) & Conservatism(x))", "-(Democrat(x) & Conservative(x))", "-exists x.(Democracy(x) & Conservator(x))", "-(Democracy(x) & Conservative(x))", "-all x.(Democrat(x) -> Conservative(x))"]}
{"id": "folio_train_232", "nl": "Either conservative or liberal. ", "fol": "all x.(IsConservative(x) | IsLiberal(x))", "prediction": ["all x.(Conservative(x) | Liberal(x))", "(Conservative(x) | Liberal(x))", "exists x.(Conservative(x) | Liberal(x))", "all x.((Conservative(x) | Liberal(x)) -> (Conservative(x) | Liberal(x)))", "all x.((Conservative(x) | Liberal(x)) -> -Conservative(x))", "all x y.((Conservative(x) | Liberal(y)) -> (Conservative(x) | Liberal(y)))", "all x.((Conservative(x) | Liberal(x)) -> -(Conservative(x) | Liberal(x)))", "all x.((Conservative(x) | Liberal(x)) -> ((Conservative(x) | Liberal(x))))", "all x y.((Conservative(x) | Liberal(y)) -> (Conservative(x) | Liberal(x)))", "all x.((Conservative(x) | Liberal(x)) -> -(Conservative(x) | Liberal(x))))", "all x.((Conservative(x) | Liberal(x)) -> Available(x))", "all x y.((Conservative(x) | Liberal(y)) -> -Conservative(x) & Liberal(y))", "all x.((Conservative(x) | Liberal(x)) -> NoConservative(x))", "all x.((Conservative(x) | Liberal(x)) -> ((Conservative(x) & Liberal(x))))", "all x y.((Conservative(x) | Liberal(y)) -> -Conservative(x))", "all x.((Conservative(x) | Liberal(x)) -> CanBe(x))"]}
{"id": "folio_train_233", "nl": "A U.S government official is either conservative or a Republican.", "fol": "((IsConservative(AnUSGovernmentOfficial) & -IsRepublican(AnUSGovernmentOfficial)) | (-IsConservative(AnUSGovernmentOfficial) & IsRepublican(AnUSGovernmentOfficial)))", "prediction": ["all x.((Official(x) & U.S.Government(x)) -> (Conservative(x) | Republican(x)))", "all x.(U.S.GovernmentOfficial(x) -> (Conservative(x) | Republican(x)))", "all x.(Official(x) -> (Conservative(x) | Republican(x)))", "all x.((Official(x) & U.SGovernment(x)) -> (Conservative(x) | Republican(x)))", "all x.(U.S.GovernmentOfficier(x) -> (Conservative(x) | Republican(x)))", "all x.((Official(x) & USGovernment(x)) -> (Conservative(x) | Republican(x)))", "all x.(GovernmentOfficial(x) -> (Conservative(x) | Republican(x)))", "all x.((Official(x) & U.S Government(x)) -> (Conservative(x) | Republican(x)))", "all x.((U.S.GovernmentOfficial(x) & Conservative(x)) | Republican(x))", "all x.(U.S.Official(x) -> (Conservative(x) | Republican(x)))", "all x.(GovernmentOfGovernment(x) -> (Conservative(x) | Republican(x)))", "all x.(U.SGovernmentOfficial(x) -> (Conservative(x) | Republican(x)))", "all x.((U.S.GovernmentOfficier(x) & Conservative(x)) | Republican(x))", "all x.(USGovernmentOfficial(x) -> (Conservative(x) | Republican(x)))", "all x.((U.S.GovernmentOfficial(x) & Conservative(x) | Republican(x))) -> Official(x))", "all x.((GovernmentOfGovernment(x) & Conservative(x)) | Republican(x))"]}
{"id": "folio_train_234", "nl": "A U.S government official is a Democrat.", "fol": "Democrat(AnUSGovernmentOfficial)", "prediction": ["all x.((Official(x) & U.S.Government(x)) -> Democratic(x))", "all x.((Official(x) & U.S.Government(x)) -> Democrat(x))", "all x.(Democrat(x) -> U.SGovernmentOfficial(x))", "all x.((U.S.GovernmentOfficial(x) & Democratic(x)) -> Official(x))", "all x.((U.S.GovernmentOfficier(x) & Democratic(x)) -> Official(x))", "all x.((Official(x) & U.S.Government(x)) -> Democrat(x))", "all x.(Democrat(x) -> U.S.GovernmentOfficial(x))", "all x.((U.S.GovernmentOfficial(x) & Democrat(x)) -> Official(x))", "all x.(U.S.GovernmentOfficial(x) -> Democratic(x))", "all x.((U.S.GovernmentOfficier(x) & Democrat(x)) -> Official(x))", "all x.((U.S.GovernmentOfficial(x) & Democratic(x)) -> Democrat(x))", "all x.((U.S.GovernmentOfficial(x) & Democrat(x)) -> Official(x))", "all x.((Official(x) & U.SGovernment(x)) -> Democratic(x))", "all x.(Democrat(x) -> U.SGovernmentOfficial(x))", "all x.((U.S.GovernmentOfficiant(x) & Democratic(x)) -> Official(x))", "all x.((U.S.GovernmentOfficier(x) & Democrat(x)) -> Official(x))"]}
{"id": "folio_train_235", "nl": "A U.S government official is anti-abortion and a liberal.", "fol": "(OpposesAbortion(AnUSGovernmentOfficial) & IsLiberal(AnUSGovernmentOfficial))", "prediction": ["all x.((Official(x) & U.S.Government(x)) -> (AntiAbortion(x) & Liberal(x)))", "all x.(U.S.GovernmentOfficial(x) -> (AntiAbortion(x) & Liberal(x)))", "all x.((U.S.GovernmentOfficial(x) & AntiAbortion(x) & Liberal(x)) -> Official(x))", "all x.((Official(x) & U.S.Government(x)) -> (AntiAbortion(x) & Liberal(x)))", "all x.((U.S.GovernmentOfficial(x) & AntiAbortion(x)) -> Liberal(x))", "all x.((Official(x) & U.SGovernment(x)) -> (AntiAbortion(x) & Liberal(x)))", "all x.(Official(x) -> (AntiAbortion(x) & Liberal(x)))", "all x.(U.S.GovernmentOfficial(x) -> (AntiAbortion(x) & Liberal(x)))", "all x.((U.S.GovernmentOfficier(x) & AntiAbortion(x) & Liberal(x)) -> Official(x))", "all x.((U.S.GovernmentOfficial(x) & AntiAbortion(x) & Liberal(x)) -> Official(x))", "all x.(U.S.Official(x) -> (AntiAbortion(x) & Liberal(x)))", "all x.((U.S.GovernmentOfficier(x) & AntiAbortion(x)) -> Liberal(x))", "all x.((U.S.GovernmentOfficial(x) & AntiAbortion(x)) -> Liberal(x))", "all x.((GovernmentOfU.S.(x) & AntiAbortion(x)) -> Liberal(x))", "all x.((GovernmentOfGovernment(x) & AntiAbortion(x) & Liberal(x)) -> Official(x))", "all x.((GovernmentOfficial(x) & AntiAbortion(x) & Liberal(x)) -> Official(x))"]}
{"id": "folio_train_236", "nl": "A U.S government official is either anti-abortion or a liberal.", "fol": "(OpposesAbortion(AnUSGovernmentOfficial) | IsLiberal(AnUSGovernmentOfficial))", "prediction": ["all x.((Official(x) & U.S.Government(x)) -> (AntiAbortion(x) | Liberal(x)))", "all x.(U.S.GovernmentOfficial(x) -> (AntiAbortion(x) | Liberal(x)))", "all x.((Official(x) & U.S.Government(x)) -> (AntiAbortion(x) | Liberal(x)))", "all x.((U.S.GovernmentOfficial(x) & AntiAbortion(x)) | Liberal(x))", "all x.(Official(x) -> (U.S.Government(x) & (AntiAbortion(x) | Liberal(x))))", "all x.((Official(x) & U.SGovernment(x)) -> (AntiAbortion(x) | Liberal(x)))", "all x.(Official(x) -> (AntiAbortion(x) | Liberal(x)))", "all x.((Official(x) & U.S Government(x)) -> (AntiAbortion(x) | Liberal(x)))", "all x.((Officier(x) & U.S.Government(x)) -> (AntiAbortion(x) | Liberal(x)))", "all x.(U.S.GovernmentOfficial(x) -> (AntiAbortion(x) | Liberal(x)))", "all x.((Official(x) & USGovernment(x)) -> (AntiAbortion(x) | Liberal(x)))", "all x.(U.S.GovernmentOfficier(x) -> (AntiAbortion(x) | Liberal(x)))", "all x.((U.S.GovernmentOfficier(x) & AntiAbortion(x)) | Liberal(x))", "all x.(GovernmentOfficial(x) -> (AntiAbortion(x) | Liberal(x)))", "all x.(U.S.Official(x) -> (AntiAbortion(x) | Liberal(x)))", "all x.((GovernmentOfU.S.(x) & AntiAbortion(x)) | Liberal(x))"]}
{"id": "folio_train_237", "nl": "If a U.S government official is not anti-abortion and a Republican, then a U.S government official is neither anti-abortion nor a liberal.", "fol": "all x.((-OpposesAbortion(x) & IsRepublican(x)) -> (-OpposesAbortion(x) & -IsLiberal(x)))", "prediction": ["all x.((U.S.GovernmentOfficial(x) & -AntiAbortion(x) & Republican(x)) -> (-AntiAbortion(x) & -Liberal(x)))", "all x.((U.S.GovernmentOfficial(x) & -AntiAbortion(x) & Republican(x)) -> -(AntiAbortion(x) | Liberal(x)))", "all x.((U.S.GovernmentOfficial(x) & -AntiAbortion(x) & Republican(x)) -> -AntiAbortion(x) & -Liberal(x))", "all x.((U.S.GovernmentOfficier(x) & -AntiAbortion(x) & Republican(x)) -> (-AntiAbortion(x) & -Liberal(x)))", "all x.((U.S.GovernmentOfficiant(x) & -AntiAbortion(x) & Republican(x)) -> (-AntiAbortion(x) & -Liberal(x)))", "all x.((U.S.GovernmentOfficio(x) & -AntiAbortion(x) & Republican(x)) -> (-AntiAbortion(x) & -Liberal(x)))", "all x.((U.S.GovernmentOfficier(x) & -AntiAbortion(x) & Republican(x)) -> -(AntiAbortion(x) | Liberal(x)))", "all x.((U.S GovernmentOfficial(x) & -AntiAbortion(x) & Republican(x)) -> (-AntiAbortion(x) & -Liberal(x)))", "all x.((U.S governmentofficial(x) & -AntiAbortion(x) & Republican(x)) -> (-AntiAbortion(x) & -Liberal(x)))", "all x.((U.S.GovernmentOfficiant(x) & -AntiAbortion(x) & Republican(x)) -> -(AntiAbortion(x) | Liberal(x)))", "all x.((U.S.GovernmentOfficial(x) & -AntiAbortion(x) & Republican(x)) -> -(AntiAbortion(x) | Liberal(x))))", "all x.((U.S.GovernmentOfficial(x) & -AntiAbortion(x) & Republican(x)) -> (-AntiAbortion(x) | Liberal(x)))", "all x.((U.S.GovernmentOfficio(x) & -AntiAbortion(x) & Republican(x)) -> -(AntiAbortion(x) | Liberal(x)))", "all x.((Official(x) & -AntiAbortion(x) & Republican(x)) -> (-AntiAbortion(x) & -Liberal(x)))", "all x.((U.S government official(x) & -AntiAbortion(x) & Republican(x)) -> (-AntiAbortion(x) & -Liberal(x)))", "all x.((U.S GovernmentOfficial(x) & -AntiAbortion(x) & Republican(x)) -> -(AntiAbortion(x) | Liberal(x)))"]}
{"id": "folio_train_238", "nl": "If a U.S government official is anti-abortion and a liberal, then a U.S government official is either a Republican or a liberal.", "fol": "((OpposesAbortion(AnUSGovernmentOfficial) & IsLiberal(AnUSGovernmentOfficial)) -> (IsRepublican(AnUSGovernmentOfficial) | IsLiberal(AnUSGovernmentOfficial)))", "prediction": ["all x.((U.S.GovernmentOfficial(x) & AntiAbortion(x) & Liberal(x)) -> (Republican(x) | Liberal(x)))", "all x.((U.S.GovernmentOfficial(x) & AntiAbortion(x) & Liberal(x)) -> (Republican(x) | Liberal(x)))", "all x.((U.S.GovernmentOfficiant(x) & AntiAbortion(x) & Liberal(x)) -> (Republican(x) | Liberal(x)))", "all x.((U.S.GovernmentOfficier(x) & AntiAbortion(x) & Liberal(x)) -> (Republican(x) | Liberal(x)))", "all x.((U.S GovernmentOfficial(x) & AntiAbortion(x) & Liberal(x)) -> (Republican(x) | Liberal(x)))", "all x.((U.S government official(x) & AntiAbortion(x) & Liberal(x)) -> (Republican(x) | Liberal(x)))", "all x.((U.S governmentofficial(x) & AntiAbortion(x) & Liberal(x)) -> (Republican(x) | Liberal(x)))", "all x.((U.S.GovernmentOfficio(x) & AntiAbortion(x) & Liberal(x)) -> (Republican(x) | Liberal(x)))", "all x.((U.SgovernmentOfficial(x) & AntiAbortion(x) & Liberal(x)) -> (Republican(x) | Liberal(x)))", "all x.((U.S.Official(x) & AntiAbortion(x) & Liberal(x)) -> (Republican(x) | Liberal(x)))", "all x.((Official(x) & AntiAbortion(x) & Liberal(x)) -> (Republican(x) | Liberal(x)))", "all x.((U.S.GovermentOfficial(x) & AntiAbortion(x) & Liberal(x)) -> (Republican(x) | Liberal(x)))", "all x.((U.S.Gov.(x) & AntiAbortion(x) & Liberal(x)) -> (Republican(x) | Liberal(x)))", "all x.((U.S.governmentOfficial(x) & AntiAbortion(x) & Liberal(x)) -> (Republican(x) | Liberal(x)))", "all x.((U.S.GovernmentOfficial(x) & AntiAbortion(x) & Liberal(x)) -> (Republican(x) | Liberal(x))))", "all x.((U.S.GovernmentOfficial(x) & AntiAbortion(x) & Liberal(x)) -> ((Republican(x) | Liberal(x))))"]}
{"id": "folio_train_239", "nl": "If a U.S government official is either a conservative or anti-abortion, then a U.S government official is either a conservative and a liberal or neither a conservative nor a liberal.", "fol": "all x.((IsConservative(x) | OpposesAbortion(x)) -> ((IsConservative(x) & IsLiberal(x)) | (-IsConservative(x) & -IsLiberal(x))))", "prediction": ["all x.((U.S.GovernmentOfficial(x) & (Conservative(x) | AntiAbortion(x))) -> (Conservative(x) & Liberal(x)) | -Conservative(x) & Liberal(x)))", "all x.((U.S.GovernmentOfficial(x) & (Conservative(x) | AntiAbortion(x))) -> (Conservative(x) & Liberal(x)) | (-Conservative(x) & Liberal(x))))", "all x.((U.S.GovernmentOfficial(x) & (Conservative(x) | AntiAbortion(x))) -> (Conservative(x) & Liberal(x)))", "all x.((U.S government official(x) & (Conservative(x) | AntiAbortion(x))) -> (Conservative(x) & Liberal(x)) | -Conservative(x) & Liberal(x)))", "all x.((U.S government official(x) & (Conservative(x) | AntiAbortion(x))) -> (Conservative(x) & Liberal(x)) | (-Conservative(x) & Liberal(x))))", "all x.((U.S.GovernmentOfficiant(x) & (Conservative(x) | AntiAbortion(x))) -> (Conservative(x) & Liberal(x)) | -Conservative(x) & Liberal(x)))", "all x.((U.S.GovernmentOfficiant(x) & (Conservative(x) | AntiAbortion(x))) -> (Conservative(x) & Liberal(x)) | (-Conservative(x) & Liberal(x))))", "all x.((U.S.GovernmentOfficial(x) & (Conservative(x) | AntiAbortion(x))) -> (Conservative(x) & Liberal(x) | -Conservative(x) & Liberal(x)))", "all x.((U.S.GovernmentOfficier(x) & (Conservative(x) | AntiAbortion(x))) -> (Conservative(x) & Liberal(x)) | (-Conservative(x) & Liberal(x))))", "all x.((U.S.GovernmentOfficier(x) & (Conservative(x) | AntiAbortion(x))) -> (Conservative(x) & Liberal(x)) | -Conservative(x) & Liberal(x)))", "all x.((U.S.GovernmentOfficial(x) & (Conservative(x) | AntiAbortion(x))) -> (Conservative(x) & Liberal(x) & -Conservative(x) & Liberal(x)))", "all x.((U.S GovernmentOfficial(x) & (Conservative(x) | AntiAbortion(x))) -> (Conservative(x) & Liberal(x)) | -Conservative(x) & Liberal(x)))", "all x.((U.S.GovernmentOfficial(x) & (Conservative(x) | AntiAbortion(x))) -> ((Conservative(x) & Liberal(x)) | -Conservative(x) & Liberal(x))))", "all x.((U.S.GovernmentOfficial(x) & (Conservative(x) | AntiAbortion(x))) -> ((Conservative(x) & Liberal(x)) | (-Conservative(x) & Liberal(x)))))", "all x.((U.S governmentofficial(x) & (Conservative(x) | AntiAbortion(x))) -> (Conservative(x) & Liberal(x)) | -Conservative(x) & Liberal(x)))", "all x.((U.S.GovernmentOfficial(x) & (Conservative(x) | AntiAbortion(x))) -> (Conservative(x) & Liberal(x) & -Conservative(x) & -Liberal(x)))"]}
{"id": "folio_train_240", "nl": "If a U.S government official is either a conservative or anti-abortion, then a U.S government official is neither a Democrat or a liberal.", "fol": "all x.((IsConservative(x) | OpposesAbortion(x)) -> (-IsDemocrat(x) & -IsLiberal(x)))", "prediction": ["all x.((U.S.GovernmentOfficial(x) & (Conservative(x) | AntiAbortion(x))) -> (-Democrat(x) | Liberal(x)))", "all x.((U.S.GovernmentOfficial(x) & (Conservative(x) | AntiAbortion(x))) -> -Democrat(x) & -Liberal(x))", "all x.((U.S.GovernmentOfficial(x) & (Conservative(x) | AntiAbortion(x))) -> (-Democrat(x) & -Liberal(x)))", "all x.((U.S.GovernmentOfficiant(x) & (Conservative(x) | AntiAbortion(x))) -> (-Democrat(x) | Liberal(x)))", "all x.((U.S.GovernmentOfficiant(x) & (Conservative(x) | AntiAbortion(x))) -> -Democrat(x) & -Liberal(x))", "all x.((U.S government official(x) & (Conservative(x) | AntiAbortion(x))) -> -Democrat(x) & -Liberal(x))", "all x.((U.S.GovernmentOfficier(x) & (Conservative(x) | AntiAbortion(x))) -> (-Democrat(x) | Liberal(x)))", "all x.((U.S.GovernmentOfficier(x) & (Conservative(x) | AntiAbortion(x))) -> -Democrat(x) & -Liberal(x))", "all x.((U.S.GovernmentOfficial(x) & (Conservative(x) | AntiAbortion(x))) -> -Democrat(x) -Liberal(x))", "all x.((Official(x) & (Conservative(x) | AntiAbortion(x))) -> -Democrat(x) & -Liberal(x))", "all x.((U.S.GovernmentOfficiant(x) & (Conservative(x) | AntiAbortion(x))) -> (-Democrat(x) & -Liberal(x)))", "all x.((U.S government official(x) & (Conservative(x) | AntiAbortion(x))) -> (-Democrat(x) | Liberal(x)))", "all x.((Official(x) & (Conservative(x) | AntiAbortion(x))) -> (-Democrat(x) | Liberal(x)))", "all x.((U.S.GovernmentOfficier(x) & (Conservative(x) | AntiAbortion(x))) -> (-Democrat(x) & -Liberal(x)))", "all x.((U.S GovernmentOfficial(x) & (Conservative(x) | AntiAbortion(x))) -> -Democrat(x) & -Liberal(x))", "all x.((U.S GovernmentOfficial(x) & (Conservative(x) | AntiAbortion(x))) -> (-Democrat(x) | Liberal(x)))"]}
{"id": "folio_train_241", "nl": "If an U.S government official is anti-abortion or a liberal, then a U.S government official is either anti-abortion or a liberal.", "fol": "((OpposesAbortion(AnUSGovernmentOfficial) | IsLiberal(AnUSGovernmentOfficial)) -> (OpposesAbortion(AnUSGovernmentOfficial) | IsLiberal(AnUSGovernmentOfficial)))", "prediction": ["all x.((U.S.GovernmentOfficial(x) & (AntiAbortion(x) | Liberal(x))) -> (AntiAbortion(x) | Liberal(x)))", "all x.((U.S.GovernmentOfficiant(x) & (AntiAbortion(x) | Liberal(x))) -> (AntiAbortion(x) | Liberal(x)))", "all x.((U.S governmentofficial(x) & (AntiAbortion(x) | Liberal(x))) -> (AntiAbortion(x) | Liberal(x)))", "all x.((U.S.GovernmentOfficier(x) & (AntiAbortion(x) | Liberal(x))) -> (AntiAbortion(x) | Liberal(x)))", "all x.((U.S GovernmentOfficial(x) & (AntiAbortion(x) | Liberal(x))) -> (AntiAbortion(x) | Liberal(x)))", "all x.((U.S government official(x) & (AntiAbortion(x) | Liberal(x))) -> (AntiAbortion(x) | Liberal(x)))", "all x.((U.SgovernmentOfficial(x) & (AntiAbortion(x) | Liberal(x))) -> (AntiAbortion(x) | Liberal(x)))", "all x.((U.S.GovernmentOfficio(x) & (AntiAbortion(x) | Liberal(x))) -> (AntiAbortion(x) | Liberal(x)))", "all x.((U.S.governmentOfficial(x) & (AntiAbortion(x) | Liberal(x))) -> (AntiAbortion(x) | Liberal(x)))", "all x.((U.S.GovernmentOfficial(x) & (AntiAbortion(x) | Liberal(x))) -> (AntiAbortion(x) | Liberal(x)))", "all x.((U.S.Official(x) & (AntiAbortion(x) | Liberal(x))) -> (AntiAbortion(x) | Liberal(x)))", "all x.((U.S.GovermentOfficial(x) & (AntiAbortion(x) | Liberal(x))) -> (AntiAbortion(x) | Liberal(x)))", "all x.((Official(x) & (AntiAbortion(x) | Liberal(x))) -> (AntiAbortion(x) | Liberal(x)))", "all x.((U.S.Gov.(x) & (AntiAbortion(x) | Liberal(x))) -> (AntiAbortion(x) | Liberal(x)))", "all x.((U.S.GovernmentOfficial(x) & (AntiAbortion(x) | Liberal(x))) -> (AntiAbortion(x) | Liberal(x)))", "all x.((U.S.GovernmentOfficial(x) & AntiAbortion(x) | Liberal(x)) -> (AntiAbortion(x) | Liberal(x)))"]}
{"id": "folio_train_242", "nl": "All advocates of high tariff rates are Republicans.", "fol": "all x.(SupportsHighTariffRates(x) -> IsRepublican(x))", "prediction": ["all x.(AdvocatesHighTargetRates(x) -> Republicans(x))", "all x.(AdvocatesHighTargetRates(x) -> Republican(x))", "all x.((Advocate(x) & HighTargetRate(x)) -> Republican(x))", "all x.((Advocate(x) & HighTargetRates(x)) -> Republican(x))", "all x.((Advocate(x) & HighTargetRates(x)) -> Republicans(x))", "all x.(AdvocatesHighTargetRates(x) -> Republicans(x))", "all x.((Advocate(x) & HighTargetRate(x)) -> Republicans(x))", "all x.(AdvocatesHighTargetRates(x) -> Republican(x))", "all x.((Advocates(x) & HighTargetRates(x)) -> Republicans(x))", "all x.((Advocates(x) & HighTargetRates(x)) -> Republican(x))", "all x.(HighTargetRates(x) -> Republican(x))", "all x.(HighTargetRates(x) -> Republicans(x))", "all x.((Advocate(x) & HighTarget(x)) -> Republican(x))", "all x.(AdvocatesHighTarifRates(x) -> Republicans(x))", "all x.((Advocate(x) & HighTarget(x)) -> Republicans(x))", "all x.((AdvocatesHighTargetRates(x)) -> Republican(x))"]}
{"id": "folio_train_243", "nl": "Some Republicans are not conservatives.", "fol": "exists x.(IsRepublican(x) & -IsConservative(x))", "prediction": ["exists x.(Republican(x) & -Conservative(x))", "(exists x.(Republican(x) & -Conservative(x)))", "exists x.(Republican(x) & -Republican(x))", "exists x.(Republican(x) & -Conservative(x))", "exists x y.(Republican(x) & Conservative(y) & -Conservative(x))", "exists x y.(Republican(x) & Republican(y) & -Conservative(x))", "exists x y.(Republican(x) & Republican(y) & -Conservative(y))", "exists x.(Republician(x) & -Conservative(x))", "exists x y.(Republican(x) & Conservative(y) & -Conservative(y))", "all x.(Republican(x) -> -Conservative(x))", "exists x y.(Republican(x) & Conservative(y))", "exists x y.(Republican(x) & Conservative(y) & -Conservative(x,y))", "exists x.(Republicant(x) & -Conservative(x))", "exists x.(Republican(x) & -Conservatism(x))", "exists x y.(Republican(x) & Conservative(y) & -Conservative(z))", "exists x.(Republican(x) & -Tory(x))"]}
{"id": "folio_train_244", "nl": "Some conservatives are advocates of high tariff rates.", "fol": "exists x.(IsConservative(x) & SupportsHighTariffRates(x))", "prediction": ["exists x.(Conservative(x) & AdvocateOfHighTarif(x))", "exists x.(Conservative(x) & AdvocateOfHighTargetRates(x))", "exists x.(Conservative(x) & AdvocateOfHighTarget(x))", "exists x.(Conservative(x) & AdvocateOfHighTarifRates(x))", "exists x.(Conservative(x) & AdvocateOfHighTariffRates(x))", "exists x.(Conservative(x) & AdvocateOfHighTariff(x))", "exists x.(Conservative(x) & Advocate(x,HighTargetRates))", "exists x.(Conservative(x) & Advocate(x,highTargetRates))", "exists x.(Conservative(x) & Advocate(x,highTarifRates))", "exists x.(Conservative(x) & Advocate(x,HighTarifRates))", "exists x.(Conservative(x) & Advocate(x) & HighTargetRates(x))", "exists x.(Conservative(x) & Advocate(x,highTariffRates))", "exists x.(Conservative(x) & Advocate(x,HighTariffRates))", "exists x.(Conservative(x) & Advocate(x,HighTarget(x))", "exists x.(Conservative(x) & Advocate(x) & HighTarifRates(x))", "exists x.(Conservative(x) & Advocate(x) & HighTarget(x))"]}
{"id": "folio_train_245", "nl": "No athletes are slow runners. ", "fol": "all x.(IsAthlete(x) -> -IsSlowRunner(x))", "prediction": ["-exists x.(Athlete(x) & SlowRunner(x))", "all x.(Athlete(x) -> -SlowRunner(x))", "(-exists x.(Athlete(x) & SlowRunner(x)))", "-all x.(Athlete(x) -> SlowRunner(x))", "all x.(Athlete(x) -> SlowRunner(x))", "\u2013exists x.(Athlete(x) & SlowRunner(x))", "-exists x.(Athlete(x) & SlowRunner(x))", "(exists x.(Athlete(x) & SlowRunner(x)))", "-exists x.(Athlete(x) & SlowRunder(x))", "all x.(Athlete(x) -> NoSlowRunner(x))", "exists x.(Athlete(x) & SlowRunner(x))", "\u2013 exists x.(Athlete(x) & SlowRunner(x))", "-exists x.(Athlete(x) & SlowRunner(y))", "all x.(Athlete(x) -> -LowRunner(x))", "-exists x.(Athlete(x) & SlowRuner(x))", "-(Athlete(a) & SlowRunner(b))"]}
{"id": "folio_train_246", "nl": "All professional basketball players are athletes. ", "fol": "all x.(IsProfessionalBasketballPlayer(x) -> IsAthlete(x))", "prediction": ["all x.(ProfessionalBasketballPlayer(x) -> Athlete(x))", "all x.((ProfessionalBasketballPlayer(x) & Athlete(x)) -> Athlete(x))", "all x.((BasketballPlayer(x) & Professional(x)) -> Athlete(x))", "all x.(BasketballPlayer(x) -> Athlete(x))", "all x.(ProfessionalBasketballPlayer(x) -> Athletic(x))", "all x.((ProfessionalBasketballPlayer(x) & Athlete(x)) -> Professional(x))", "all x y.((ProfessionalBasketballPlayer(x) & Player(y)) -> Athlete(x))", "all x y.((ProfessionalBasketballPlayer(x) & Athlete(y)) -> Athlete(x))", "all x.((BasketballPlayer(x) & Athlete(x)) -> Professional(x))", "all x.(BalloonPlayer(x) -> Athlete(x))", "all x.(ProffessionalBasketballPlayer(x) -> Athlete(x))", "all x.(ProfessionalBasketballPlayer(x) -> Athlete(x))", "all x.(Player(x) -> Athlete(x))", "all x.(ProfessionalBallroomballPlayer(x) -> Athlete(x))", "all x.(ProfessionalBalloonPlayer(x) -> Athlete(x))", "all x.((ProfessionalBasketballPlayer(x) & Athlete(x)) -> Athletic(x))"]}
{"id": "folio_train_247", "nl": "All NBA players are professional basketball players. ", "fol": "all x.(IsNBAPlayer(x) -> IsProfessionalBasketballPlayer(x))", "prediction": ["all x.(NBAPlayer(x) -> ProfessionalBasketballPlayer(x))", "all x.(NBAPlayer(x) -> ProfessionalBallroomPlayer(x))", "all x.(NBAPlayer(x) -> ProfessionalBalloonPlayer(x))", "all x.(NBAPlayer(x) -> ProfessionalBadmintonPlayer(x))", "all x.(NBAPlayer(x) -> Professional(x))", "all x.(NBAPlayer(x) -> ProfessionalBallroomplayer(x))", "all x.((NBAPlayer(x) & ProfessionalBasketballPlayer(x)) -> ProfessionalPlayer(x))", "all x.(NBAPlayer(x) -> ProfessionalPlayer(x))", "all x.((NBAPlayer(x) & ProfessionalBasketballPlayer(x)) -> Professional(x))", "all x.((NBAPlayer(x) & Professional(x)) -> Professional(x))", "all x.((NBAPlayer(x) & Professional(x)) -> ProfessionalBasketballPlayer(x))", "all x.(NBAPlayer(x) -> ProfessionalBasketballPlayer(x))", "all x.(NBAPlayer(x) -> ProfessionalBalladPlayer(x))", "all x.(NBAPlayer(x) -> ProfessionalBalladballPlayer(x))", "all x.(NBAPlayer(x) -> ProfessionalHockeyPlayer(x))", "all x.(NBAPlayer(x) -> ProfessionalBoycottagePlayer(x))"]}
{"id": "folio_train_248", "nl": "All Knicks players are NBA players. ", "fol": "all x.(IsKnicksPlayer(x) -> IsNBAPlayer(x))", "prediction": ["all x.(KnicksPlayer(x) -> NBAPlayer(x))", "all x y.((KnicksPlayer(x) & NBAPlayer(y)) -> NBAPlayer(x))", "all x.(KnicksPilot(x) -> NBAPlayer(x))", "(all x.(KnicksPlayer(x) -> NBAPlayer(x)))", "all x.(KnicksPerson(x) -> NBAPlayer(x))", "all x y.((KnicksPlayer(x) & NBAPlayer(y)) -> NBAPlayer(x,y))", "all x.(Knicks(x) -> NBAPlayer(x))", "All x.(KnicksPlayer(x) -> NBAPlayer(x))", "all x.(KnicksPilot(x) -> NBAPilot(x))", "all x.((KnicksPlayer(x) & NBAPlayer(x)) -> NBAPlayer(x))", "all x y.((KnicksPlayer(x) & NBAPlayer(y)) -> Player(x,y))", "all x y.((KnicksPlayer(x) & NBAPlayer(y)) -> PlayedBy(x,y))", "all x.((KnicksPlayer(x) & NBAPlayer(x)) -> Player(x))", "(all x.(KnicksPlayer(x) -> NBAPlayer(x))", "all x.(KnicksPace(x) -> NBAPlayer(x))", "all x.(KnicksPlayer(x) -> NBAPlayer(x))"]}
{"id": "folio_train_249", "nl": "Jim is either not a professional basketball player or not a slow runner. ", "fol": "-((IsProfessionalBasketballPlayer(Jim) & -IsSlowRunner(Jim)) | (-IsProfessionalBasketballPlayer(Jim) & IsSlowRunner(Jim)))", "prediction": ["(-ProfessionalBasketballPlayer(Jim) | SlowRunner(Jim)))", "all x.(Jim(x) -> (-ProfessionalBasketballPlayer(x) | -SlowRunner(x)))", "all x.((Jim(x) & -ProfessionalBasketballPlayer(x)) | -SlowRunner(x))", "all x.(Jim(x) -> (-ProfessionalBasketballPlayer(x) | SlowRunner(x)))", "all x.((Jim(x) & -ProfessionalBasketballPlayer(x) | SlowRunner(x))) -> -SlowRunner(x))", "all x.((Jim(x) & (-ProfessionalBasketballPlayer(x) | SlowRunner(x))) -> -SlowRunner(x))", "exists x.(Jim(x) & ((-ProfessionalBasketballPlayer(x) & -SlowRunner(x)) | (-ProfessionalBasketballPlayer(x) & SlowRunner(x)))))", "all x.((Jim(x) & -ProfessionalBasketballPlayer(x) | SlowRunner(x))) -> -ProfessionalBasketballPlayer(x))", "all x.((Jim(x) & -ProfessionalBasketballPlayer(x)) | SlowRunner(x))", "exists x.(Jim(x) & (-ProfessionalBasketballPlayer(x) | -SlowRunner(x))))", "all x.((Jim(x) & (-ProfessionalBasketballPlayer(x) | SlowRunner(x))) -> -ProfessionalBasketballPlayer(x))", "all x.((Jim(x) & -ProfessionalBasketballPlayer(x)) | -SlowRunner(x)))", "(-ProfessionalBasketballPlayer(Jim) | SlowRunner(Jim))", "exists x.(Jim(x) & (-ProfessionalBasketballPlayer(x) | -SlowRunner(x)))", "all x.((Jim(x) & -ProfessionalBasketballPlayer(x) | -SlowRunner(x))) -> -ProfessionalBasketballPlayer(x))", "all x.((Jim(x) & -ProfessionalBasketballPlayer(x)) | (-SlowRunner(x) & -ProfessionalBasketballPlayer(x))))"]}
{"id": "folio_train_250", "nl": "Jim is a Knicks player.", "fol": "IsKnicksPlayer(Jim)", "prediction": ["all x.(KnicksPlayer(x) -> Jim(x))", "(KnicksPlayer(Jim) & -KnicksPlayer(Jim))", "all x.((Jim(x) & KnicksPlayer(x)) -> Player(x))", "all x.(KnicksPlayer(x) -> JimKnicks(x))", "all x.((Jim(x) & KnicksPlayer(x)) -> PlaysIn(x,y))", "all x.(KnicksPlayer(x) -> JimKnife(x))", "all x.((Jim(x) & KnicksPlayer(x)) -> Plays(x,y))", "all x.((Jim(x) & KnicksPlayer(x)) -> PlaysWith(x,y))", "all x y.((Jim(x) & KnicksPlayer(y)) -> Plays(x,y))", "all x.((Jim(x) & KnicksPlayer(x)) -> PlaysFor(x,y))", "(KnicksPlayer(Jim) & Player(Jim))", "all x y.((Jim(x) & KnicksPlayer(y)) -> Player(x,y))", "all x.(Jim(x) -> KnicksPlayer(x))", "all x.((Jim(x) & KnicksPlayer(x)) -> -KnicksPlayer(x))", "all x.((Jim(x) & KnicksPlayer(x)) -> Plays(x))", "All x.(Jim(x) -> KnicksPlayer(x))"]}
{"id": "folio_train_251", "nl": "Jim is not a Knicks player.", "fol": "-IsKnicksPlayer(Jim)", "prediction": ["all x.((Jim(x) & -KnicksPlayer(x)) -> -KnicksPlayer(x))", "(-KnicksPlayer(Jim))", "-KnicksPlayer(Jim)", "all x.((Jim(x) & KnicksPlayer(x)) -> -KnicksPlayer(x))", "All x.((Jim(x) & -KnicksPlayer(x)) -> -KnicksPlayer(x))", "all x.(KnicksPlayer(x) -> -JimKnicksPlayer(x))", "all x.(KnicksPlayer(x) -> -JimKnicks(x))", "all x.(KnicksPlayer(x) -> -KnicksPlayer(x))", "all x.(Jim(x) -> -KnicksPlayer(x))", "all x.(KnicksPlayer(x) -> -Jim(x))", "(-KnicksPlayer(Jim) & -KnicksPlayer(Jim))", "All x.((Jim(x) & KnicksPlayer(x)) -> -KnicksPlayer(x))", "All x.(Jim(x) -> -KnicksPlayer(x))", "all x.((Jim(x) & -KnicksPlayer(x)) -> -Knicks(x))", "exists x.(KnicksPlayer(x) & Jim -KnicksPlayer(x))", "all x.((Jim(x) & -KnicksPlayer(x)) -> NoKnicksPlayer(x))"]}
{"id": "folio_train_252", "nl": "Jim is an athlete.", "fol": "IsAthlete(Jim)", "prediction": ["all x.(Jim(x) -> Athlete(x))", "All x.(Jim(x) -> Athlete(x))", "all x.((Jim(x) & Athlete(x)) -> Athlete(x))", "(Athlete(Jim) & Athlete(Jim))", "(Athlete(Jim) & -Athlete(Jim))", "All x.((Jim(x) & Athlete(x)) -> Athlete(x))", "exists x.(Jim(x) & Athlete(x))", "all x.((Jim(x) & Athlete(x)) -> Is(x,y))", "all x.((Jim(x) & Athlete(x)) -> Athletic(x))", "(Athlete(Jim)", "all x.(Athlete(x) -> Jim(x))", "Jim is an Athlete(Jim)", "-Athlete(Jim)", "(Athlete(Jim) & HasAthlete(Jim))", "(Athlete(Jim) -> Athlete(Jim))", "(Athlete(Jim) -> Athlete(Jim))"]}
{"id": "folio_train_253", "nl": "All kids love animals.", "fol": "all x.(IsKid(x) -> LovesAnimals(x))", "prediction": ["all x.(Kid(x) -> LovesAnimals(x))", "all x.(Kid(x) -> LoveAnimals(x))", "all x.(Child(x) -> LovesAnimals(x))", "all x y.((Kid(x) & Animal(y)) -> Loves(x,y))", "all x y.((Kid(x) & Animal(y)) -> Love(x,y))", "all x.exists y.(Kid(x) & Animal(y) & Loves(x,y))", "all x.((Kid(x) & Animal(y)) -> Loves(x,y))", "all x.(Kid(x) -> Love(x,Animals))", "all x.exists y.(Kid(x) & Animal(y) & Love(x,y))", "exists x.(Kid(x) & LovesAnimals(x))", "all x.((Kid(x) & Animal(y)) -> Love(x,y))", "all x.(Kid(x) -> LovesAnimal(x))", "(all x.(Kid(x) -> LovesAnimals(x)))", "all x.(Kid(x) -> LovesAnimals(x))", "all x.(Child(x) -> LoveAnimals(x))", "all x.(Kid(x) -> LOVEsAnimals(x))"]}
{"id": "folio_train_254", "nl": "All toddlers are kids.", "fol": "all x.(IsToddler(x) -> IsKid(x))", "prediction": ["all x.(Toddler(x) -> Kid(x))", "all x.(Toddler(x) -> Kids(x))", "all x.(Tongue(x) -> Kid(x))", "all x.(Toddler(x) -> Child(x))", "all x.(Tourist(x) -> Kid(x))", "all x.(Trotter(x) -> Kid(x))", "all x.(Trotary(x) -> Kid(x))", "all x.(Tongue(x) -> Kids(x))", "all x.(Troll(x) -> Kid(x))", "all x.(Tween(x) -> Kid(x))", "all x.(Trotz(x) -> Kid(x))", "all x.(Tertiary(x) -> Kid(x))", "all x.(Treatment(x) -> Kid(x))", "all x.(Toddler(x) -> Kid(x))", "all x.(Trompet(x) -> Kid(x))", "all x.(Teddy(x) -> Kid(x))"]}
{"id": "folio_train_255", "nl": "If someone loves animals, then they are not bad.", "fol": "all x.(LovesAnimals(x) -> -IsBad(x))", "prediction": ["all x.(LovesAnimals(x) -> -Bad(x))", "all x.((LovesAnimals(x) & -Bad(x)) -> -LovesAnimals(x))", "all x.((LovesAnimals(x) & -Bad(x)) -> -Bad(x))", "all x.((LovesAnimals(x) & -Bad(x)) -> LovesAnimals(x))", "all x.((LovesAnimals(x)) -> -Bad(x))", "all x.((LovesAnimals(x) & -Bad(x)) -> -(LovesAnimals(x) & LovesAnimals(x)))", "all x.((LovesAnimals(x) & -Bad(x)) -> -(LovesAnimals(x) & LovesAnimals(x))))", "all x.((LovesAnimals(x) & -Bad(x)) -> -LikesAnimals(x))", "all x.(LoversAnimals(x) -> -Bad(x))", "all x.(LikesAnimals(x) -> -Bad(x))", "all x.(LovesAnimals(x) -> NotBad(x))", "all x.((LovesAnimals(x) & -Bad(x)) -> -LovingAnimals(x))", "all x.(LoveAnimals(x) -> -Bad(x))", "exists x.(LovesAnimals(x) & -Bad(x))", "all x.(LOVESAnimals(x) -> -Bad(x))", "all x.(LovesAnimals(x) -> -BadAnimals(x))"]}
{"id": "folio_train_256", "nl": "All pirates are bad.", "fol": "all x.(IsPirate(x) -> IsBad(x))", "prediction": ["all x.(Pirate(x) -> Bad(x))", "all x y.((Pirate(x) & Pirate(y)) -> Bad(x))", "all x.exists y.(Pirate(x) & Pirate(y) & Bad(x))", "all x.(Prisoner(x) -> Bad(x))", "all x.exists y.(Pirate(x) & Pirate(y) & Bad(x,y))", "all x.(Priper(x) -> Bad(x))", "all x.exists y.(Pirate(x) & Pirate(y) & Bad(y))", "all x y.((Pirate(x) & Pirate(y)) -> Bad(x,y))", "all x.((Pirate(x) & Bad(x)) -> Pirate(x))", "all x.(Pitcher(x) -> Bad(x))", "all x.(Princess(x) -> Bad(x))", "all x.(Pirate(x) -> Bad(x))", "all x.(Principal(x) -> Bad(x))", "exists x.(Pirate(x) & Bad(x))", "(all x.(Pirate(x) -> Bad(x)))", "all x.exists y.(Pirate(x) & Piracy(y) & Bad(x,y))"]}
{"id": "folio_train_257", "nl": "If Nancy is not a pirate, then Nancy loves animals.", "fol": "(-IsPirate(Nancy) -> LovesAnimals(Nancy))", "prediction": ["all x.((Nancy(x) & -Pirate(x)) -> LovesAnimals(x))", "all x.((Pirate(x) & -Pirate(x)) -> LovesAnimals(x))", "all x.((Nancy(x) & -Princess(x)) -> LovesAnimals(x))", "all x.((Snake(x) & -Pirate(x)) -> LovesAnimals(x))", "all x.((Nancy(x) & -Pirate(x)) -> Love(x,Animals))", "all x.((Nannie(x) & -Pirate(x)) -> LovesAnimals(x))", "all x.((NoPirate(x) & -Pirate(x)) -> LovesAnimals(x))", "all x.((Nancy(x) & -Pirate(x)) -> LoveAnimals(x))", "all x.((Nancy(x) & -Pirate(x)) -> (LovesAnimals(x)))", "all x.((Nancy(x) & -Pierce(x)) -> LovesAnimals(x))", "all x.((Nancy(x) & -Paper(x)) -> LovesAnimals(x))", "all x.((Nanny(x) & -Pirate(x)) -> LovesAnimals(x))", "all x.((Nancy(x) & -Pirate(x)) -> LOVEsAnimals(x))", "all x.((Nancy(x) & -Priper(x)) -> LovesAnimals(x))", "all x.((Pirate(x) & -Pirate(x)) -> Love(x,Animals))", "all x.((Nancy(x) & - Pirate(x)) -> LovesAnimals(x))"]}
{"id": "folio_train_258", "nl": "If Nancy is not a toddler, then Nancy is bad.", "fol": "(-IsToddler(Nancy) -> IsBad(Nancy))", "prediction": ["all x.((Nancy(x) & -Toddler(x)) -> Bad(x))", "all x.((Nancy(x) & -Tongue(x)) -> Bad(x))", "all x.((Tongue(x) & -Tongue(x)) -> Bad(x))", "all x.((Nancy(x) & -Troll(x)) -> Bad(x))", "all x.((Penny(x) & -Toddler(x)) -> Bad(x))", "all x.((Tongue(x) & -Toddler(x)) -> Bad(x))", "all x.((Tongue(x) & -Tongue(x)) -> BadNancy(x))", "all x.((Nancy(x) & -Tween(x)) -> Bad(x))", "all x.((Nancy(x) & -Tourist(x)) -> Bad(x))", "all x.((Toddler(x) & -Toddler(x)) -> Bad(x))", "all x.(((Nancy(x) & -Toddler(x)) -> Bad(x))", "all x.((Pawn(x) & -Toddler(x)) -> Bad(x))", "all x.((Nancy(x) & -Toddler(x)) -> BadNancy(x))", "all x.((Nancy(x) & -Tertiary(x)) -> Bad(x))", "all x.((NotToddler(x) & Nancy(x)) -> Bad(x))", "all x.((Nancy(x) & -Troller(x)) -> Bad(x))"]}
{"id": "folio_train_259", "nl": "Nancy is a pirate.", "fol": "IsPirate(Nancy)", "prediction": ["all x.(Nancy(x) -> Pirate(x))", "all x.(Pirate(x) -> Nancy(x))", "(Pirate(Nancy) & Pirate(Nancy))", "exists x.(Nancy(x) & Pirate(x))", "(Pirate(Nancy)", "all x.(Pirate(x) -> Nancy(x))", "all x.((Nancy(x) & Pirate(x)) -> (Pirate(x) & Pirate(x)))", "all x.((Nancy(x) & Pirate(x)) -> -Pirate(x))", "exists x.(Pirate(x) & Nancy(x))", "all x.((Nancy(x) & Pirate(x)) -> (Pirate(x) | Pirate(x)))", "all x y.((Nancy(x) & Pirate(y)) -> (Pirate(x) & Pirate(y)))", "all x y.((Nancy(x) & Pirate(y)) -> Is(x,y))", "All x.(Nancy(x) -> Pirate(x))", "(Pirate(Nancy) & -Pirate(Nancy))", "all x.((Nancy(x) & Pirate(x)) -> Is(x,y))", "(Pirate(Nancy) -> Pirate(Nancy))"]}
{"id": "folio_train_260", "nl": "Nancy is not a pirate or a toddler.", "fol": "(-IsPirate(Nancy) | IsToddler(Nancy))", "prediction": ["all x.(Nancy(x) -> (-Pirate(x) | Toddler(x)))", "all x.(Nancy(x) -> (-Pirate(x) & -Toddler(x)))", "(-Pirate(Nancy) & -Toddler(Nancy))", "-(Nancy(Nancy) & -Pirate(Nancy) & -Toddler(Nancy))", "-(Nancy(Nancy) & Pirate(Nancy) & Toddler(Nancy))", "-(Pirate(Nancy) | Toddler(Nancy))", "-(Nancy(Nancy) & Pirate(Nancy)) & -Toddler(Nancy))", "-(Nancy(Nancy) & Pirate(Nancy) & -Toddler(Nancy))", "(-(Nancy(Nancy) & Pirate(Nancy)) | Toddler(Nancy)))", "all x.(Nancy(x) -> -(Pirate(x) | Toddler(x)))", "-(Nancy(Nancy) & Pirate(Nancy)) & -(Nancy(Nancy) & Toddler(Nancy)))", "-(Nancy(Nancy) -> (Pirate(Nancy) | Toddler(Nancy)))", "exists x.(Nancy(x) & -(Pirate(x) | Toddler(x)))", "-(Nancy(Nancy) & (Pirate(Nancy) | Toddler(Nancy)))", "-(Pirate(Nancy) | Toddler(Nancy)))", "-(Nancy(Nancy) & Pirate(Nancy) | Toddler(Nancy)))"]}
{"id": "folio_train_261", "nl": "If Nancy is not a pirate or a toddler, then she loves animals and is a kid.", "fol": "((-IsPirate(Nancy) | -IsToddler(Nancy)) -> (LovesAnimals(Nancy) & IsKid(Nancy)))", "prediction": ["all x.((Nancy(x) & -Pirate(x) & -Toddler(x)) -> (LovesAnimals(x) & Kid(x)))", "all x.((Nancy(x) & -(Pirate(x) | Toddler(x))) -> (LovesAnimals(x) & Kid(x)))", "all x.((Nancy(x) & -Pirate(x) & Toddler(x)) -> (LovesAnimals(x) & Kid(x)))", "all x.((Pirate(x) | Toddler(x)) -> (LovesAnimals(x) & Kid(x)))", "all x.((Nancy(x) & -Pirate(x) & -Tongue(x)) -> (LovesAnimals(x) & Kid(x)))", "all x.((Nancy(x) & -Pirate(x) | Toddler(x)) -> (LovesAnimals(x) & Kid(x)))", "all x.((Nancy(x) & (-Pirate(x) | Toddler(x))) -> (LovesAnimals(x) & Kid(x)))", "all x.((Nancy(x) & -Pirate(x) & -Toddler(x)) -> LovesAnimalsAndKid(x))", "all x.((Nancy(x) & -Pirate(x) & -Toddler(x)) -> LovesAnimals(x) & Kid(x))", "all x.((Nancy(x) & -Pirate(x) & -Toddler(x)) -> (LikesAnimals(x) & Kid(x)))", "all x.((Nancy(x) & -Pirate(x) & -Toddler(x)) -> (LoversAnimals(x) & Kid(x)))", "all x.((Nancy(x) & -Pirate(x) & -Toddler(x)) -> (LisesAnimals(x) & Kid(x)))", "all x.((Nancy(x) & -Pirate(x)) | Toddler(x)) -> (LovesAnimals(x) & Kid(x)))", "all x.((Nancy(x) & -Pirate(x) & -Toddler(x)) -> (LovingAnimals(x) & Kid(x)))", "all x.((Nancy(x) & -Pirate(x) & -Toddler(x)) -> (LovesAnimals(x) & Kid(x)))", "all x.((Nancy(x) & -Pierce(x) & -Toddler(x)) -> (LovesAnimals(x) & Kid(x)))"]}
{"id": "folio_train_262", "nl": "Lana Wilson directed After Tiller, The Departure, and Miss Americana.", "fol": "(DirectedByPerson(After_Tiller,Lana_Wilson) & DirectedByPerson(The_Departure,Lana_Wilson) & DirectedByPerson(Miss_Americana,Lana_Wilson))", "prediction": ["All x.(LanaWilson(x) -> (DirectedAfterTiller(x) & DirectedTheDeparture(x) & DirectedMissAmericana(x)))", "All x.((LanaWilson(x) & AfterTiller(x) & TheDeparture(x) & MissAmericana(x)) -> DirectedBy(x,y))", "(DirectedByLanaWilson(Lana) & AfterTiller(Lana) & TheDeparture(Lana) & MissAmericana(Lana))", "(All x.(LanaWilson(x) -> (AfterTiller(x) | TheDeparture(x) | MissAmericana(x))))", "All x y z.((LanaWilson(x) & AfterTiller(y) & TheDeparture(z)) -> (DirectedBy(x,y) & DirectedBy(x,z) & DirectedBy(x,y) & DirectedBy(x,z)))", "(DirectedBy(LanaWilson,AfterTiller) & DirectedBy(Wilson,TheDeparture) & DirectedBy(Wilson,MissAmericana))", "All x.(LanaWilson(x) -> (DirectedAfterTiller(x) & DirectedDeparture(x) & DirectedMissAmericana(x)))", "All x y z.((LanaWilson(x) & AfterTiller(y) & TheDeparture(z) & MissAmericana(x)) -> DirectedBy(x,y,z))", "All x.(LanaWilson(x) -> (DirectedAfterTiller(x) & DirectedAfterDeparture(x) & DirectedMissAmericana(x)))", "All x y z.((LanaWilson(x) & AfterTiller(y) & TheDeparture(z)) -> (DirectedBy(x,y) & DirectedBy(x,z) & DirectedBy(x,z)))", "All x y z.((LanaWilson(x) & AfterTiller(y) & TheDeparture(z)) -> (DirectedBy(x,y) & DirectedBy(x,z) & MissAmericana(x)))", "All x.(LanaWilson(x) -> (DirectsAfterTiller(x) & DirectsTheDeparture(x) & DirectsMissAmericana(x)))", "(DirectedByLanaWilson(LanaWilson) & AfterTiller(Lana) & TheDeparture(Lana) & MissAmericana(Lana))", "All x y z.((LanaWilson(x) & AfterTiller(y) & TheDeparture(z)) -> (DirectedBy(x,y) & DirectedBy(x,z) & DirectedBy(x,y) & DirectedBy(x,z) & MissAmericana(x)))", "All x.((LanaWilson(x) & AfterTiller(x) & TheDeparture(x) & MissAmericana(x)) -> Directs(x))", "(DirectedByLanaWilson(Lana Wilson,AfterTiller) & DirectedByTheDeparture(Lana Wilson,MissAmericana))"]}
{"id": "folio_train_263", "nl": "If a film is directedy by a person, the person is a filmmaker.", "fol": "all x.(exists y.DirectedByPerson(y,x) -> IsFilmmaker(x))", "prediction": ["all x y.((Film(x) & Person(y) & DirectedBy(x,y)) -> Filmmaker(y))", "all x y.((Film(x) & Person(y) & DirectedBy(y,x)) -> Filmmaker(y))", "all x y.((Person(x) & Film(y) & DirectedBy(x,y)) -> Filmmaker(x))", "all x y.((Film(x) & Person(y) & DirectedBy(y,x)) -> Filmmaker(y,x))", "all x y.((Film(x) & Person(y) & DirectedBy(x,y)) -> Filmmaker(x))", "all x.(DirectedBy(x,Person) -> Filmmaker(x))", "all x y.((Person(x) & Film(y) & DirectedBy(x,y)) -> Filmmaker(x,y))", "all x y z.((Film(x) & Person(y) & Director(z) & DirectedBy(y,z)) -> Filmmaker(y,z))", "all x y z.((Film(x) & Person(y) & DirectedBy(y,x)) -> Filmmaker(y))", "all x.(DirectedBy(x,y) -> Filmmaker(y))", "all x y.((Film(x) & Person(y) & DirectedBy(y,x)) -> Filmmaker(x))", "all x y z.((Film(x) & Person(y) & Director(z) & DirectedBy(y,x)) -> Filmmaker(y,z))", "all x y.((Film(x) & Person(y) & Directs(y,x)) -> Filmmaker(y))", "all x y z.((Film(x) & Person(y) & Director(z) & DirectedBy(y,z)) -> Filmmaker(y))", "all x y z.((Film(x) & Person(y) & Director(z) & DirectedBy(y,x)) -> Filmmaker(y))", "all x y z.((Film(x) & Person(y) & Director(z)) -> Filmmaker(y))"]}
{"id": "folio_train_264", "nl": "After Tiller is a documentary.", "fol": "DocumentaryStatus(After_Tiller)", "prediction": ["All x.(AfterTiller(x) -> Documentary(x))", "All x.(AfterTiller(x) -> Documentary(x))", "All x.(AfterTilder(x) -> Documentary(x))", "(AfterTiller(AfterTiller) -> Documentary(AfterTiller))", "After Tiller is a Documentary.", "All x.(AfterTilter(x) -> Documentary(x))", "(AfterTiller(AfterTiller) & Documentary(AfterTiller))", "all x.(AfterTiller(x) -> Documentary(x))", "(AfterTiller(AfterTiller) & Documentary(AfterTiller))", "All x.(AfterTilber(x) -> Documentary(x))", "all x.(AfterTilder(x) -> Documentary(x))", "(AfterTilder(AfterTilder) -> Documentary(AfterTilder))", "(AfterTiller(AfterTiller) -> Documentary(AfterTiller))", "(AfterTiller(AfterTiller) -> Documentary(AfterTiller))", "(AfterTilder(AfterTilder) & Documentary(AfterTilder))", "After Tiller is a documentary."]}
{"id": "folio_train_265", "nl": "The documentary is a type of films.", "fol": "all x.(DocumentaryStatus(x) -> FilmType(x))", "prediction": ["all x.(Documentary(x) -> Film(x))", "all x.(Documentary(x) -> Film(x))", "all x y.((Documentary(x) & Film(y)) -> Film(x))", "all x y.((Documentary(x) & Film(y)) -> Film(x,y))", "all x.(Documentary(x) -> (Film(x) & Film(x)))", "all x y.((Documentary(x) & Film(y)) -> TypeOf(x,y))", "all x.(Documentary(x) -> (Film(x) & Film(x)))", "all x y z.((Documentary(x) & Film(y) & Film(z)) -> Film(x,y,z))", "all x y.((Documentary(x) & Film(y)) -> IsFilm(x,y))", "all x y.((Documentary(x) & Film(y)) -> (TypeOf(x,y) & Film(x)))", "all x.(Documentary(x) -> Films(x))", "exists x.(Documentary(x) & Film(x))", "all x y z.((Documentary(x) & Film(y) & Film(z)) -> Film(x))", "all x y.((Documentary(x) & Film(y)) -> (TypeOf(x,y) & Film(y)))", "all x y.((Documentary(x) & Film(y)) -> CreatedBy(x,y))", "all x y.((Documentary(x) & Film(y)) -> (Film(x) & Film(y)))"]}
{"id": "folio_train_266", "nl": "Lana Wilson is from Kirkland.", "fol": "ResidesInCity(Lana_Wilson,Kirkland)", "prediction": ["Lana Wilson is from Kirkland.", "LanaWilson is from Kirkland.", "LanaWilson(Lana) isFromKirkland(Lana))", "LanaWilson(Lana) is from Kirkland(Lana))", "all x.(LanaWilson(x) -> FromKirkland(x))", "LanaWilson(Lana) & FromKirkland(Lana))", "LanaWilson(Lana) isFromKirkland(Lana,Kirkland))", "LanaWilson(Lana) & Kirkland(Lana))", "all x.(LanaWilson(x) -> Kirkland(x))", "(LanaWilson(Lana) & FromKirkland(Lana))", "LanaWilson(Lana) is fromKirkland(Lana))", "LanaWilson(Lana) is from Kirkland(Lana,Kirkland))", "LanaWilson(Lana) & FromKirkland(Lana,Kirkland))", "LanaWilson(Lana) is from Kirkland(Lana)", "LanaWilson(Lana) isFromKirkland(Lana)", "(LanaWilson(Lana) & Kirkland(Lana))"]}
{"id": "folio_train_267", "nl": "Kirkland is a US city.", "fol": "CityInCountry(Kirkland,Us)", "prediction": ["all x.(Kirkland(x) -> USCity(x))", "(USCity(Kirkland) & LocatedIn(Kirkland))", "all x.((City(x) & Kirkland(x)) -> USCity(x))", "(USCity(Kirkland) & USCity(Kirkland))", "(City(Kirkland) & USCity(Kirkland))", "((City(Kirkland) & USCity(Kirkland)) -> USCity(Kirkland))", "(USCity(Kirkland) & LocatedIn(Kirkland,US))", "(USCity(Kirkland) & LocatedIn(Kirkland,USA))", "(USCity(Kirkland))", "All x.(Kirkland(x) -> USCity(x))", "all x.(Kirkland(x) -> USCity(x))", "(USCity(Kirkland) & City(Kirkland))", "(U.S.City(Kirkland) & USCity(Kirkland))", "((City(Kirkland) & USCity(Kirkland)))", "(USCity(Kirkland) & AmericanCity(Kirkland))", "all x.(Kirkland(x) -> (USCity(x) & LocatedIn(x,y)))"]}
{"id": "folio_train_268", "nl": "If a person is from a city in a country, the person is from the country.", "fol": "all x y z.((ResidesInCity(x,y) & CityInCountry(y,z)) -> ResidesInCountry(x,z))", "prediction": ["all x y.((Person(x) & City(y) & Country(y)) -> From(x,y))", "all x.((Person(x) & FromCity(x) & InCountry(x)) -> FromCountry(x))", "all x y z.((Person(x) & City(y) & Country(z) & From(x,y,z)) -> From(x,y,z))", "all x y.((Person(x) & City(y) & InCountry(x,y)) -> FromCountry(x,y))", "all x y z.((Person(x) & City(y) & Country(z) & From(x,y,z)) -> From(x,z))", "all x y z.((Person(x) & City(y) & Country(z) & From(x,y)) -> From(x,z))", "all x y z.((Person(x) & City(y) & Country(z) & From(x,y,z)) -> Country(x,z))", "all x y.((Person(x) & City(y) & Country(y)) -> Country(x,y))", "all x y z.((Person(x) & City(y) & Country(z) & From(x,y)) -> Country(x,z))", "all x y.((Person(x) & City(y) & Country(z) & From(x,y,z)) -> From(x,y,z))", "all x.((Person(x) & FromCityInCountry(x)) -> FromCountry(x))", "all x.((Person(x) & FromCity(x) & FromCountry(x)) -> FromCountry(x))", "all x y z.((Person(x) & City(y) & Country(z) & From(x,y,z)) -> Country(x,y))", "all x y z.((Person(x) & City(y) & Country(z) & From(x,y,z)) -> Country(x))", "all x y.((Person(x) & City(y) & Country(z) & From(x,y,z)) -> From(x,z))", "all x y z.((Person(x) & City(y) & Country(z) & From(x,y,z)) -> Country(x,y,z))"]}
{"id": "folio_train_269", "nl": "After Tiller is nominated for the Independent Spirit Award for Best Documentary.", "fol": "NominatedForAward(After_Tiller,The_Independent_Spirit_Award_for_Best_Documentary)", "prediction": ["All x.((Tiller(x) & NominatedForIndependentSpiritAward(x)) -> BestDocumentary(x))", "All x.((Tilter(x) & IndependentSpiritAward(x)) -> NominatedForBestDocumentary(x))", "All x.((Tiller(x) & IndependentSpiritAward(x)) -> NominatedForBestDocumentary(x))", "All x.((Tiller(x) & IndependentSpiritAward(x)) -> NominatedForBestDocumentary(x))", "All x.((Tilder(x) & IndependentSpiritAward(x)) -> NominatedForBestDocumentary(x))", "All x y.((Tiller(x) & IndependentSpiritAward(y)) -> NominatedForBestDocumentary(x,y))", "All x.((AfterTiller(x) & NominatedForIndependentSpiritAward(x)) -> BestDocumentary(x))", "All x.((Tilder(x) & NominatedForIndependentSpiritAward(x)) -> BestDocumentary(x))", "All x y.((Tiller(x) & IndependentSpiritAward(y)) -> NominatedFor(x,y))", "All x y.((Tiller(x) & IndependentSpiritAward(y) & BestDocumentary(x)) -> NominatedFor(x,y))", "All x.(AfterTiller(x) -> NominatedForIndependentSpiritAward(x))", "All x y.((Tiller(x) & IndependentSpiritAward(y) & BestDocumentary(y)) -> NominatedFor(x,y))", "All x y.((Tiller(x) & IndependentSpiritAward(y) & BestDocumentary(x,y)) -> NominatedFor(x,y))", "All x.((Tilter(x) & IndependentSpiritAward(x)) -> NominatedFor(x,BestDocumentary))", "All x y.((Tiller(x) & IndependentSpiritAward(y) & BestDocumentary(x)) -> Nominated(x,y))", "All x.((Tilder(x) & IndependentSpiritAward(x)) -> NominatedFor(x,BestDocumentary))"]}
{"id": "folio_train_270", "nl": "Lana Wilson is a US filmmaker.", "fol": "(IsFilmmaker(Lana_Wilson) & ResidesInCountry(Lana_Wilson,Us))", "prediction": ["all x.((LanaWilson(x) & USFilmmaker(x)) -> Filmmaker(x))", "(Filmmaker(LanaWilson) & USFilmmaker(LanaWilson))", "all x.((LanaWilson(x) & Filmmaker(x)) -> USFilmmaker(x))", "(Filmmaker(LanaWilson) & Filmmaker(LanaWilson))", "all x.((LanaWilson(x) & Filmmaker(x)) -> US(x))", "all x.((LanaWilson(x) & USFilmmaker(x)) -> Writer(x))", "all x.((LanaWilson(x) & AmericanFilmmaker(x)) -> Filmmaker(x))", "all x.((LanaWilson(x) & Filmmaker(x)) -> Filmmaker(x))", "all x.((LanaWilson(x) & USFilmmaker(x)) -> -Filmmaker(x))", "all x.((LanaWilson(x) & USFilmmaker(x)) -> DirectedBy(x,y))", "all x.((LanaWilson(x) & USFilmmaker(x)) -> Produces(x,y))", "(Filmmaker(LanaWilson) & American(LanaWilson))", "all x.((LanaWilson(x) & Filmmaker(x)) -> American(x))", "all x.(LanaWilson(x) -> USFilmmaker(x))", "all x.((LanaWilson(x) & USFilmmaker(x)) -> Director(x))", "LanaWilson(Lana) is a USFilmmaker(Lana))"]}
{"id": "folio_train_271", "nl": "Miss Americana is not directed by a filmmaker from Kirkland.", "fol": "-exists x.(DirectedByPerson(Miss_Americana,x) & ResidesInCity(x,Kirkland) & IsFilmmaker(x))", "prediction": ["all x.(MissAmericana(x) -> -DirectedByFilmmakerFromKirkland(x))", "all x.((MissAmericana(x) & -DirectedByFilmmakerFromKirkland(x)) -> -DirectedByFilmmakerFromKirkland(x))", "all x.(MissAmericana(x) -> -DirectedByFictionerFromKirkland(x))", "all x.((MissAmericana(x) & -DirectedByKirklandFilmmaker(x)) -> -DirectedByKirklandFilmmaker(x))", "all x.((MissAmericana(x) & -FilmmakerFromKirkland(x)) -> -DirectedBy(x,MissAmericana))", "all x.(MissAmericana(x) -> -DirectedByKirklandFilmmaker(x))", "all x.((MissAmericana(x) & -DirectedByFilmmakerFromKirkland(x)) -> -DirectedByMissAmericana(x))", "all x.((MissAmericana(x) & -DirectedByFictionerFromKirkland(x)) -> -DirectedByFilmmakerFromKirkland(x))", "all x.((MissAmericana(x) & -DirectedByFilmmakerFromKirkland(x)) -> -DirectedBy(x,Kirkland))", "all x.((MissAmericana(x) & -DirectedByFilmmakerFromKirkland(x)) -> -DirectedByKirkland(x))", "all x y.((MissAmericana(x) & FilmmakerFromKirkland(y)) -> -DirectedBy(x,y))", "all x.((MissAmericana(x) & -DirectedByKirklandFilmmaker(x)) -> -DirectedBy(x,KirklandFilmmaker))", "all x y.((MissAmericana(x) & Filmmaker(y)) -> -DirectedBy(x,y))", "(-DirectedByFilmmakerFromKirkland(MissAmericana))", "all x.(MissAmericana(x) -> -DirectedByFilmmaker(x))", "all x.(MissAmericana(x) -> -DirectedByFilmmakerFromKirkland(x))"]}
{"id": "folio_train_272", "nl": "Lana Wilson has won the Independent Spirit Award.", "fol": "WonAward(Lana_Wilson,The_Independent_Spirit_Award)", "prediction": ["all x.((LanaWilson(x) & IndependentSpiritAward(x)) -> Wins(x,LanaWilson))", "all x.((LanaWilson(x) & IndependentSpiritAward(x)) -> Won(x,y))", "Lana Wilson has won IndependentSpiritAward.", "all x.((LanaWilson(x) & IndependentSpiritAward(x)) -> Won(x,LanaWilson))", "all x.((LanaWilson(x) & IndependentSpiritAward(x)) -> Wins(x,y))", "all x.((LanaWilson(x) & IndependentSpiritAward(x)) -> Wins(x,Lana,Wilson))", "all x.((LanaWilson(x) & IndependentSpiritAward(x)) -> Won(x,Lana,Wilson))", "all x.((LanaWilson(x) & IndependentSpiritAward(x)) -> Won(x,Lana,Spirit))", "all x.((LanaWilson(x) & IndependentSpiritAward(x)) -> Won(x))", "LanaWilsonWonIndependentSpiritAward(Lana)", "all x.((LanaWilson(x) & IndependentSpiritAward(x)) -> Wins(x))", "all x.((LanaWilson(x) & IndependentSpiritAward(x)) -> Wins(x,Lana,Spirit))", "Lana Wilson has won IndependentSpiritAward(lana@gmail.com)", "all x.((LanaWilson(x) & IndependentSpiritAward(x)) -> Won(x,Lana))", "(WonIndependentSpiritAward(LanaWilson))", "all x.((LanaWilson(x) & IndependentSpiritAward(x)) -> Wins(x,Lana))"]}
{"id": "folio_train_273", "nl": "All bears in zoos are not wild. ", "fol": "all x.((IsBear(x) & LocatedInZoo(x)) -> -IsWild(x))", "prediction": ["all x.((Bear(x) & InZoo(x)) -> -Wild(x))", "all x.(Bear(x) -> -Wild(x))", "all x.((Bear(x) & Zoo(x)) -> -Wild(x))", "all x.((Bear(x) & LocatedInZoo(x)) -> -Wild(x))", "all x.((Bear(x) & inZoo(x)) -> -Wild(x))", "all x y.((Bear(x) & Zoo(y)) -> -Wild(x,y))", "all x.((Bear(x) & InZoos(x)) -> -Wild(x))", "all x y.((Bear(x) & Zoo(y)) -> -Wild(x))", "all x.(Bear(x) -> -Wild(x))", "all x.((Bear(x) & InZoo(x)) -> -Wild(x))", "all x.(Beard(x) -> -Wild(x))", "all x.((Bear(x) & Zoo(y)) -> -Wild(x))", "all x.(Bear(x) & InZoo(x)) -> -Wild(x))", "all x.((Bear(x) & -Wild(x)) -> InZoo(x))", "all x.(Zoo(x) -> -Wild(x))", "all x.(BearInZoo(x) -> -Wild(x))"]}
{"id": "folio_train_274", "nl": "Some bears are in zoos. ", "fol": "exists x.(IsBear(x) & LocatedInZoo(x))", "prediction": ["exists x.(Bear(x) & Zoo(x))", "exists x.(Bear(x) & InZoo(x))", "exists x.(Bear(x) & Zoo(y) & In(x,y))", "exists x.(Bear(x) & (InZoo(x) | InZoo(x)))", "exists x.(Bear(x) & inZoo(x))", "exists x y.(Bear(x) & Zoo(y) & In(x,y))", "exists x.(Bear(x) & InZoo(x))", "exists x.(Bear(x) & LocatedInZoo(x))", "exists x.(Beard(x) & InZoo(x))", "exists x.(Bear(x) & Zoo(y))", "exists x.(Bear(x) & (InZoo(x) | InZoo(x))))", "exists x.(Bear(x) & Zoo(y) & LocatedIn(x,y))", "exists x y.(Bear(x) & Zoo(y))", "exists x.(Bear(x) & (InZoo(x) | -InZoo(x)))", "exists x.(Bear(x) & Zoo(x))", "exists x.(Bear(x) & Zoo(x) & In(x,z))"]}
{"id": "folio_train_275", "nl": "Not all bears are wild.", "fol": "-all x.(IsBear(x) -> IsWild(x))", "prediction": ["-all x.(Bear(x) -> Wild(x))", "(-all x.(Bear(x) -> Wild(x)))", "-all x y.((Bear(x) & Wild(y)) -> -(Bear(x) & Wild(y)))", "-all x y.((Bear(x) & Wild(y)) -> -(Bear(x) & Wild(x)))", "exists x.(Bear(x) & -Wild(x))", "-all x y.((Bear(x) & Wild(y)) -> -Wild(x))", "-all x.((Bear(x) & Wild(x)) -> -(Bear(x) & Wild(x)))", "exists x.(Bear(x) & -(Wild(x) | Wild(x))))", "-all x y.((Bear(x) & Wild(y)) -> -(Bear(x,y) & Wild(y)))", "-all x y.((Bear(x) & Wild(y)) -> -Wild(x,y))", "-all x y.((Bear(x) & Wild(y)) -> Wild(x))", "-all x.(Beard(x) -> Wild(x))", "-all x.(Bear(x) -> Wild(x))", "-all x y.((Bear(x) & Wild(y)) -> -(Bear(x) & Wild(y))))", "-all x y.((Bear(x) & Wild(y)) -> -(Bear(y) & Wild(y)))", "-all x y.((Bear(x) & Wild(y)) -> -(Bear(x) -> Wild(x)))"]}
{"id": "folio_train_276", "nl": "If a person is the leader of a country for life, that person is in a monarchy. ", "fol": "all x.(IsLeader(x) -> IsInMonarchy(x))", "prediction": ["all x y.((Person(x) & Country(y) & LeaderOf(x,y)) -> Monarchy(x))", "all x.((Person(x) & LeaderOfCountry(x) & ForLife(x)) -> Monarchy(x))", "all x y.((Person(x) & Country(y) & LeaderForLife(x,y)) -> Monarchy(x))", "all x y.((Person(x) & Country(y) & LeadsForLife(x,y)) -> Monarchy(x))", "all x y.((Person(x) & Country(y) & LeaderOfForLife(x,y)) -> Monarchy(x))", "all x y.((Person(x) & Country(y) & Leader(x,y)) -> Monarchy(x))", "all x y.((Person(x) & Country(y) & LeaderOf(x,y)) -> Monarchy(x,y))", "all x y.((Person(x) & Country(y) & LeaderOf(x,y) & ForLife(x)) -> Monarchy(x))", "all x.((Person(x) & LeaderOfCountry(x)) -> Monarchy(x))", "all x y z.((Person(x) & Country(y) & LeaderOf(x,y) & ForLife(x)) -> Monarchy(x))", "all x y z.((Person(x) & Country(y) & LeaderOf(x,y) & ForLife(x,y)) -> Monarchy(x))", "all x.((Person(x) & LeaderOfCountryForLife(x)) -> Monarchy(x))", "all x y.((Person(x) & Country(y) & LeaderForLife(x,y)) -> Monarchy(x,y))", "all x y.((Person(x) & Country(y) & Leader(x,y)) -> Monarchy(x,y))", "all x y z.((Person(x) & Country(y) & LeaderOf(x,y) & ForLife(x,z)) -> Monarchy(x))", "all x y.((Person(x) & Country(y) & LeaderOfForLife(x,y)) -> Monarchy(x,y))"]}
{"id": "folio_train_277", "nl": "Leaders are either a king or a queen.", "fol": "all x.(IsLeader(x) -> ((IsKing(x) & -IsQueen(x)) | (-IsKing(x) & IsQueen(x))))", "prediction": ["all x.(Leader(x) -> (King(x) | Queen(x)))", "all x.(Leader(x) -> ((King(x) | Queen(x))))", "all x.(Lider(x) -> (King(x) | Queen(x)))", "all x.(Leader(x) -> (King(x) | Queen(x)))", "all x.(Leader(x) -> (HasKing(x) | HasQueen(x)))", "all x y.((Leader(x) & King(y)) | Queen(y)) -> (Leader(x,y) & Leader(x,y)))", "exists x.(Leader(x) & (King(x) | Queen(x)))", "all x y.((Leader(x) & King(y)) | Queen(y)) -> Leader(x))", "all x.(Leader(x) -> (IsKing(x) | IsQueen(x)))", "all x.(Lider(x) -> ((King(x) | Queen(x))))", "all x y.((Leader(x) & King(y)) | Queen(y)) -> Leader(x,y))", "all x.(Lizard(x) -> (King(x) | Queen(x)))", "all x.(Leader(x) -> (Lion(x) & (King(x) | Queen(x))))", "all x y.((Leader(x) & King(y)) | Queen(y))", "all x y.((Leader(x) & King(y)) | Queen(y)) -> Leads(x,y))", "all x.(Lird(x) -> (King(x) | Queen(x)))"]}
{"id": "folio_train_278", "nl": "Queens are female.", "fol": "all x.(IsQueen(x) -> IsFemale(x))", "prediction": ["all x.(Queen(x) -> Female(x))", "all x.(Queen(x) -> Feminine(x))", "all x.(King(x) -> Female(x))", "all x.(Queen(x) -> Female(x))", "all x y.((Queen(x) & Female(y)) -> Queen(x))", "all x y.((Queen(x) & Female(y)) -> Is(x,y))", "all x y.((Queen(x) & Female(y)) -> (Female(x) & Female(y)))", "all x.((Queen(x) & Female(x)) -> Queen(x))", "all x y.((Queen(x) & Female(y)) -> (Female(x) | Female(y)))", "all x y.((Queen(x) & Queen(y)) -> Female(x))", "all x y.((Queen(x) & Female(y)) -> Female(x))", "all x y.((Queen(x) & Female(y)) -> FoundedBy(x,y))", "all x y.((Queen(x) & Female(y)) -> Queen(x,y))", "all x y.((Queen(x) & Female(y)) -> (Female(x) & Female(x)))", "all x y.((Queen(x) & Female(y)) -> -Female(x))", "all x y.((Queen(x) & Female(y)) -> Becomes(x,y))"]}
{"id": "folio_train_279", "nl": "Kings are male. ", "fol": "all x.(IsKing(x) -> IsMale(x))", "prediction": ["all x.(King(x) -> Male(x))", "all x y.((King(x) & Male(y)) -> Is(x,y))", "all x.(King(x) -> Male(x))", "all x y.((King(x) & Male(y)) -> Male(x))", "all x y.((King(x) & Male(y)) -> LocatedIn(x,y))", "all x y.((King(x) & Male(y)) -> Female(x))", "exists x.(King(x) & Male(x))", "all x y.((King(x) & Male(y)) -> (Male(x) & Male(y)))", "all x y.((King(x) & Male(y)) -> FoundedBy(x,y))", "all x y.((King(x) & Male(y)) -> (Male(x) | Male(y)))", "all x y.((King(x) & Male(y)) -> Has(x,y))", "all x y.((King(x) & Male(y)) -> Are(x,y))", "all x y.((King(x) & Male(y)) -> (Male(x) & Male(x)))", "all x y.((King(x) & Male(y)) -> (Male(x) | Male(x)))", "all x y.((King(x) & Male(y)) -> Becomes(x,y))", "all x y.((King(x) & Male(y)) -> -Male(x))"]}
{"id": "folio_train_280", "nl": "Elizabeth is a queen.", "fol": "IsQueen(Elizabeth)", "prediction": ["(Queen(Elizabeth) & Queen(Elizabeth))", "(Queen(Elizabeth) & Queen(Elizabeth))", "(Queen(Elizabeth) -> Queen(Elizabeth))", "all x.(Elizabeth(x) -> Queen(x))", "all x.(Elizabeth(x) -> Queen(x))", "all x.((Elizabeth(x) & Queen(x)) -> Queen(x))", "all x.((Elizabeth(x) & Queen(x)) -> Queen(x))", "(Queen(Elizabeth) -> Queen(Elizabeth))", "(Queen(Elizabeth) -> Queen(Elizabeth))", "all x.(Queen(x) -> Elizabeth(x))", "(Queen(Elizabeth) & Queen(Elizabeth))", "all x.(Queen(x) -> Elizabeth(x))", "(Queen(Ellisabeth) & Queen(Ellisabeth))", "(Queen(Elizabeth) | Queen(Elizabeth)))", "(Queen(Elizabeth) -> Queen(Elizabeth))", "(Queen(Elizabeth) | Queen(Elizabeth))"]}
{"id": "folio_train_281", "nl": "Elizabeth is a leader", "fol": "IsLeader(Elizabeth)", "prediction": ["(Leader(Elizabeth) & Leader(Elizabeth))", "Elizabeth is leader(Elizabeth) & Leader(Elizabeth) & Leader(Elizabeth))", "(Leader(Elizabeth) & Leader(Elizabeth))", "Elizabeth is leader(Elizabeth) & Leader(Elizabeth) & Leader(Elizabeth) & Leader(Elizabeth))", "all x.(Elizabeth(x) -> Leader(x))", "Elizabeth is leader(Elizabeth) & Leader(Elizabeth))", "all x y.((Elizabeth(x) & Leader(y)) -> Leader(x,y))", "(Leader(Elizabeth) & Leader(Elizabeth) & Leader(Elizabeth))", "Elizabeth is leader(Elizabeth) & Leader(Elizabeth))", "Elizabeth is a leader(Elizabeth) & Leader(Elizabeth) & Leader(Elizabeth))", "Elizabeth is leader(Elizabeth) & Leader(Elizabeth) & Leader(Elizabeth) & Leader(Elizabeth) & Leader(Elizabeth))", "Elizabeth is a leader(Elizabeth) & Leader(Elizabeth) & Leader(Elizabeth) & Leader(Elizabeth))", "Elizabeth is leader(Elizabeth) & Leader(Elizabeth) & Leader(Elizabeth) & Leader(Elizabeth,Elizabeth,Elizabeth))", "Elizabeth is leader(Elizabeth) & Leader(Elizabeth) & Leader(Elizabeth) & Leader(Elizabeth,Elizabeth))", "Elizabeth is leader(Elizabeth) & Leader(Elizabeth) & Leader(Elizabeth))", "Elizabeth is a leader(Elizabeth) & Leader(Elizabeth) & Leader(Elizabeth) & Leader(Elizabeth) & Leader(Elizabeth))"]}
{"id": "folio_train_282", "nl": "Elizabeth is a king.", "fol": "IsKing(Elizabeth)", "prediction": ["(King(Elizabeth) & King(Elizabeth))", "all x.(Elizabeth(x) -> King(x))", "(King(Elizabeth) & King(Elizabeth))", "(King(Elizabeth) -> King(Elizabeth))", "(King(Elizabeth) -> King(Elizabeth))", "(King(Elizabeth) -> Queen(Elizabeth))", "Elizabeth is King(Elizabeth)", "all x.(King(x) -> Elizabeth(x))", "all x.(Elizabeth(x) -> King(x))", "(King(Elizabeth) & Queen(Elizabeth))", "(King(Elizabeth) -> Elizabeth(Elizabeth))", "(King(Elizabeth) & Kings(Elizabeth))", "all x.(King(x) -> Elizabeth(x))", "(King(Ellisabeth) & King(Ellisabeth))", "(King(Elizabeth) & King(Elizabeth))", "(King(Elizabeth) -> King(Elizabeth))"]}
{"id": "folio_train_283", "nl": "Elizabeth is in a monarchy.", "fol": "IsInMonarchy(Elizabeth)", "prediction": ["all x.(Elizabeth(x) -> Monarchy(x))", "all x y.((Elizabeth(x) & Monarchy(y)) -> In(x,y))", "all x.(Elizabeth(x) -> Monarchy(x))", "all x.((Elizabeth(x) & Monarchy(x)) -> In(x,y))", "Elizabeth exists x.(Monarchy(x) & InMonarchy(x))", "exists x.(Elizabeth(x) & Monarchy(x))", "exists x.(Elizabeth(x) & Monarchy(x))", "(Monarchy(Elizabeth) & In(Elizabeth))", "(Monarchy(Elizabeth) & In(Elizabeth))", "(Monarchy(Elizabeth) -> In(Elizabeth))", "(Monarchy(Elizabeth) -> In(Elizabeth))", "all x.((Elizabeth(x) & Monarchy(x)) -> In(x,Monarchy))", "Elizabeth exists x.(Monarchy(x) & In(x,Elizabeth))", "(Monarchy(Elizabeth) & In(Elizabeth(Elizabeth))", "(Monarchy(Elizabeth) -> In(Elizabeth))", "Elizabeth is in Monarchy."]}
{"id": "folio_train_284", "nl": "Elizabeth is a leader of a country.", "fol": "IsLeader(Elizabeth)", "prediction": ["all x y.((Elizabeth(x) & Country(y)) -> Leader(x,y))", "all x y.((Elizabeth(x) & Country(y)) -> LeaderOf(x,y))", "all x y z.((Elizabeth(x) & Country(y) & Country(z)) -> Leader(x,y,z))", "all x.(Elizabeth(x) -> LeaderOfCountry(x))", "all x y z.((Elizabeth(x) & Country(y) & Country(z)) -> LeaderOf(x,y,z))", "all x y z.((Elizabeth(x) & Country(y) & Country(z)) -> LeaderOf(x,y,z))", "all x y z.((Elizabeth(x) & Country(y) & Country(z)) -> Leader(x,y,z))", "all x y.((Elizabeth(x) & Country(y)) -> Leader(x,y))", "all x y.((Elizabeth(x) & Country(y)) -> LeaderOf(x,y))", "all x y z.((Elizabeth(x) & Country(y) & Country(z) & LeaderOf(x,y,z)) -> LeaderOf(x,y,z))", "all x.((Elizabeth(x) & Country(y)) -> Leader(x,y))", "all x y z.((Elizabeth(x) & Country(y) & Country(z)) -> Leader(x,y))", "all x.((Elizabeth(x) & Country(y)) -> LeaderOf(x,y))", "all x y.((Elizabeth(x) & Country(y)) -> Leads(x,y))", "all x y z.((Elizabeth(x) & Country(y) & Country(z) & LeaderOf(x,y,z)) -> LeaderOf(x,y,z))", "all x y z.((Elizabeth(x) & Country(y) & Country(z) & LeaderOf(x,y,z)) -> LeaderOf(x,y))"]}
{"id": "folio_train_285", "nl": "If people make their own matcha teas every morning with ceremonial-grade matcha powder, then they do not wake up late and start their schedules past noon regularly.", "fol": "all x.(MakesMatchaTea(x) -> -WakesUpLate(x))", "prediction": ["all x.((Person(x) & MakesOwnMatchaTeasEveryMorningWithCeremonialGradeMatchaPowder(x)) -> (-WakeUpLast(x) & StartSchedulesPastPastRegularly(x)))", "all x.((Person(x) & MakesOwnMatchaTeasEveryMorning(x) & CeremonialGradeMatchaPowder(x)) -> (-WakeUpLast(x) & StartSchedulesPastPastRegularly(x)))", "all x.((Person(x) & MakesOwnMatchaTeasEveryMorning(x) & CeremonialGradeMatchaPowder(x)) -> -(WakeUpLast(x) & StartSchedulesPastPastRegularly(x))))", "all x.((Person(x) & MakesOwnMatchaTeasEveryMorningWithCeremonialGradeMatchaPowder(x)) -> (-WakeUpLate(x) & StartSchedulesPastPastRegularly(x)))", "all x.((Person(x) & MakesOwnMatchaTeasEveryMorning(x) & CeremonialGradeMatchaPowder(x)) -> (-WakeUpLate(x) & StartSchedulesPastPastRegularly(x)))", "all x.((Person(x) & MakesOwnMatchaTeasEveryMorning(x) & CeremonialGradeMatchaPowder(x)) -> -(WakeUpLate(x) & StartSchedulesPastPastRegularly(x))))", "all x.((Person(x) & MakesOwnMatchaTeasEveryMorningWithCeremonialGradeMatchaPowder(x)) -> -(WakeUpLast(x) & StartSchedulesPastPastRegularly(x))))", "all x.((People(x) & MakesOwnMatchaTeasEveryMorning(x) & CeremonialGradeMatchaPowder(x)) -> (-WakeUpLast(x) & StartSchedulesPastPastRegularly(x)))", "all x.((Person(x) & MakesOwnMatchaTeasEveryMorningWithCeremonialGradeMatchaPowder(x)) -> (-WakeUpLast(x) & StartSchedulesAtPastPastRegularly(x)))", "all x.((Person(x) & MakesOwnMatchaTeasEveryMorningWithCeremonialGradeMatchaPowder(x)) -> -(WakeUpLate(x) & StartSchedulesPastPastRegularly(x))))", "all x.((Person(x) & MakesOwnMatchaTeasEveryMorningWithCeremonialGradeMatchaPowder(x)) -> -(WakeUpLast(x) & StartSchedulesPastPastRegularly(x)))", "all x.((People(x) & MakesOwnMatchaTeasEveryMorning(x) & CeremonialGradeMatchaPowder(x)) -> -(WakeUpLast(x) & StartSchedulesPastPastRegularly(x))))", "all x.((Person(x) & MakesOwnMatchaTeasEveryMorningWithCeremonialGradeMatchaPowder(x)) -> -(WakeUpLate(x) & StartSchedulesPastPastRegularly(x)))", "all x.((Person(x) & MakesOwnMatchaTeasEveryMorning(x) & CeremonialGradeMatchaPowder(x)) -> (-WakeUpLast(x) & StartSchedulesAtPastPastRegularly(x)))", "all x.((Person(x) & MakesOwnMatchaTeasEveryMorning(x) & UsesCeremonialGradeMatchaPowder(x)) -> (-WakeUpLast(x) & StartSchedulesPastPastRegularly(x)))", "all x.((Person(x) & MakesOwnMatchaTeasEveryMorning(x) & UsesCeremonialGradeMatchaPowder(x)) -> -(WakeUpLast(x) & StartSchedulesPastPastRegularly(x))))"]}
{"id": "folio_train_286", "nl": "If people live in California and attend yoga classes regularly, then they make their own matcha teas every morning with ceremonial-grade matcha powder.", "fol": "all x.(LivesInCalifornia(x) -> MakesMatchaTea(x))", "prediction": ["all x.((People(x) & LivesInCalifornia(x) & AttendsYogaClassesRegularly(x)) -> MakesOwnMatchaTeasEveryMorningWithCeremonialGradeMatchaPowder(x))", "all x.((Person(x) & LivesInCalifornia(x) & AttendsYogaClassesRegularly(x)) -> MakesOwnMatchaTeasEveryMorningWithCeremonialGradeMatchaPowder(x))", "all x.((LivesInCalifornia(x) & AttendsYogaClassesRegularly(x)) -> MakesOwnMatchaTeasEveryMorningWithCeremonialGradeMatchaPowder(x))", "all x.((People(x) & LivesInCalifornia(x) & AttendsYogaClassesRegularly(x)) -> MakesOwnMatchaTeas(x))", "all x.((Person(x) & LivesInCalifornia(x) & AttendsYogaClassesRegularly(x)) -> MakesOwnMatchaTeas(x))", "all x.((People(x) & LivesInCalifornia(x) & AttendsYogaClassesRegularly(x)) -> MakesOwnMatchaTeasWithCeremonialGradeMatchaPowder(x))", "all x.((Person(x) & LivesInCalifornia(x) & AttendsYogaClassesRegularly(x)) -> MakesOwnMatchaTeasWithCeremonialGradeMatchaPowder(x))", "all x.((LivingInCalifornia(x) & AttendsYogaClassesRegularly(x)) -> MakesOwnMatchaTeasEveryMorningWithCeremonialGradeMatchaPowder(x))", "all x y.((Person(x) & LivesInCalifornia(x) & AttendsYogaClassesRegularly(x)) -> MakesOwnMatchaTeasEveryMorningWithCeremonialGradeMatchaPowder(x))", "all x.((Citizen(x) & LivesInCalifornia(x) & AttendsYogaClassesRegularly(x)) -> MakesOwnMatchaTeasEveryMorningWithCeremonialGradeMatchaPowder(x))", "all x.((People(x) & LivesInCalifornia(x) & AttendsYogaClassesRegularly(x)) -> MakesOwnMatchaTeasEveryMorningWithCeremicalGradeMatchaPowder(x))", "all x.((Person(x) & LivesInCalifornia(x) & AttendsYogaClassesRegularly(x)) -> MakesOwnMatchaTeasEveryMorningWithCeremicalGradeMatchaPowder(x))", "all x.((People(x) & LivesInCalifornia(x) & AttendsYogaClassesRegularly(x)) -> MakesOwnMatchaTeasEveryMorningWithCelebralGradeMatchaPowder(x))", "all x y.((People(x) & LivesInCalifornia(x) & AttendsYogaClassesRegularly(x)) -> MakesOwnMatchaTeasEveryMorningWithCeremonialGradeMatchaPowder(x))", "all x.((People(x) & LivesInCalifornia(x) & AttendsYogaClassesRegularly(x)) -> MakesOwnMatchaTeasEveryMorning(x))", "all x.((Person(x) & LivesInCalifornia(x) & AttendsYogaClassesRegularly(x)) -> MakesOwnMatchaTeasEveryMorningWithCelebralGradeMatchaPowder(x))"]}
{"id": "folio_train_287", "nl": "If people work in the entertainment industry as high-profile celebrities, then they wake up late and start their schedules past noon regularly.", "fol": "all x.(WorksAsCelebrity(x) -> WakesUpLate(x))", "prediction": ["all x.((WorksInEntertainment(x) & HighProfileCelebrities(x)) -> (WakeUpLast(x) & StartSchedulesPastPastRegularly(x)))", "all x.((WorksInEntertainment(x) & HighProfileCelebrities(x)) -> (WakeUpLate(x) & StartSchedulesPastPastRegularly(x)))", "all x.((Person(x) & WorksInEntertainmentIndustryAsHighProfileCelebrities(x)) -> (WakeUpLast(x) & StartSchedulesPastPastRegularly(x)))", "all x.((WorksInEntertainmentIndustryAsHighProfileCelebrities(x)) -> (WakeUpLast(x) & StartSchedulesPastPastRegularly(x)))", "all x.((WorksInEntertainmentIndustryAsHighProfileCelebrities(x)) -> (WakeUpLate(x) & StartSchedulesPastPastRegularly(x)))", "all x.((WorksInEntertainment(x) & HighProfileCelebrities(x)) -> (WakeUpLater(x) & StartSchedulesPastPastRegularly(x)))", "all x.((Person(x) & WorksInEntertainmentIndustryAsHighProfileCelebrities(x)) -> (WakeUpLate(x) & StartSchedulesPastPastRegularly(x)))", "all x.((PeopleWorkInEntertainment(x) & HighProfileCelebrities(x)) -> (WakeUpLast(x) & StartSchedulesPastPastRegularly(x)))", "all x.((WorksInEntertainmentIndustry(x) & HighProfileCelebrities(x)) -> (WakeUpLast(x) & StartSchedulesPastPastRegularly(x)))", "all x.((WorksInEntertainmentIndustryAsHighProfileCelebrities(x)) -> (WakeUpLater(x) & StartSchedulesPastPastRegularly(x)))", "all x.((Person(x) & WorksInEntertainmentIndustryAsHighProfileCelebrities(x)) -> (WakeUpLater(x) & StartSchedulesPastPastRegularly(x)))", "all x.((WorkInEntertainment(x) & HighProfileCelebrities(x)) -> (WakeUpLast(x) & StartSchedulesPastPastRegularly(x)))", "all x.((WorksInEntertainment(x) & HighProfileCelebrity(x)) -> (WakeUpLast(x) & StartSchedulesPastPastRegularly(x)))", "all x.((Person(x) & HighProfileCelebrity(x)) -> (WakeUpLate(x) & StartSchedulesPastPastRegularly(x)))", "all x.((Person(x) & HighProfileCelebrities(x)) -> (WakeUpLate(x) & StartSchedulesPastPastRegularly(x)))", "all x.((Person(x) & WorksInEntertainmentIndustryAsHighProfileCelebrities(x)) -> (WakeUpLast(x) & StartSchedulesPastMealRegularly(x)))"]}
{"id": "folio_train_288", "nl": "If people do not have regular 9-5 jobs, then they work in the entertainment industry as high-profile celebrities.", "fol": "all x.(HasRegularJob(x) -> WorksAsCelebrity(x))", "prediction": ["all x.((Person(x) & -Regular9-5Jobs(x)) -> HighProfileCelebrities(x))", "all x.((Person(x) & -Regular9-5Job(x)) -> HighProfileCelebrities(x))", "all x.((Person(x) & -Regular9-5Jobs(x)) -> WorksInEntertainmentIndustryAsHighProfileCelebrities(x))", "all x.((People(x) & -Regular9-5Jobs(x)) -> HighProfileCelebrities(x))", "all x.((Person(x) & -Regular9-5Jobs(x)) -> WorksInEntertainmentIndustry(x))", "all x.((Person(x) & -Regular9-5Job(x)) -> WorksInEntertainmentIndustryAsHighProfileCelebrities(x))", "all x.((Person(x) & -Regular9-5Job(x)) -> WorksInEntertainmentIndustry(x))", "all x.((Person(x) & -Regular9-5Jobs(x)) -> WorkInEntertainmentIndustry(x))", "all x.((People(x) & -Regular9-5Jobs(x)) -> WorksInEntertainmentIndustryAsHighProfileCelebrities(x))", "all x.((Person(x) & -Regular9-5Jobs(x)) -> WorksInEntertainment(x))", "all x.((Person(x) & -Regular9-5Jobs(x)) -> WorkInEntertainmentIndustryAsHighProfileCelebrities(x))", "all x.((Person(x) & -HasRegular9-5Jobs(x)) -> WorksInEntertainmentIndustryAsHighProfileCelebrities(x))", "all x.((Person(x) & -Regular9-5Job(x)) -> WorkInEntertainmentIndustry(x))", "all x.((Person(x) & -Regular9-5Jobs(x)) -> WorksAsHighProfileCelebrities(x))", "all x.((Person(x) & -Regular9-5Jobs(x)) -> HighProfile(x))", "all x.((Person(x) & -Regular9-5Jobs(x)) -> HighProfileCelebrity(x))"]}
{"id": "folio_train_289", "nl": "All people who prefer working at home over going to the office every day do not have regular 9-5 jobs.", "fol": "all x.(PrefersWorkFromHome(x) -> HasRegularJob(x))", "prediction": ["all x.((Person(x) & PrefersWorkingAtHome(x)) -> -Regular9-5Jobs(x))", "all x.((Person(x) & PrefersWorkingAtHome(x)) -> -Regular9-5Job(x))", "all x.(PrefersWorkingAtHome(x) -> -Regular9-5Jobs(x))", "all x.((Person(x) & PrefersWorkingAtHome(x) & PrefersWorkingAtOffice(x)) -> -Regular9-5Jobs(x))", "all x.(PrefersWorkingAtHomeOverWorkingAtOfficeEveryDay(x) -> -Regular9-5Jobs(x))", "all x.((PrefersWorkingAtHome(x) & -HasRegular9-5Jobs(x)) -> -HasRegular9-5Jobs(x))", "all x.((Person(x) & PrefersWorkingAtHome(x) & PrefersWorkingAtOfficeEveryDay(x)) -> -Regular9-5Jobs(x))", "all x.((Person(x) & PrefersWorkingAtHome(x)) -> -Regular9-5Jobs(x))", "all x.((Person(x) & PrefersWorkingAtHome(x) & PrefersWorkingAtOffice(x)) -> -Regular9-5Job(x))", "all x.((Person(x) & PrefersWorkingAtHome(x) & PrefersWorkingToOffice(x)) -> -Regular9-5Jobs(x))", "all x.((Person(x) & PrefersWorkingAtHome(x)) -> -Regular9-5Jobs(x))", "all x.(PrefersWorkingAtHomeOverWorkingToOfficeEveryDay(x) -> -Regular9-5Jobs(x))", "all x.(PrefersWorkingAtHomeOverWorkingEveryDay(x) -> -Regular9-5Jobs(x))", "all x.((Person(x) & PrefersWorkingAtHome(x) & PrefersWorkingAtOfficeEveryDay(x)) -> -Regular9-5Job(x))", "all x.((Person(x) & PrefersWorkingAtHome(x)) -> -Regular9-5Job(x))", "all x.((Person(x) & PrefersWorkingAtHome(x) & PrefersWorkingAtOffice(x)) -> -Regular9-5Jobs(x))"]}
{"id": "folio_train_290", "nl": "Clay either both prefers to work at home over going to the office every day and makes his own matcha teas every morning with ceremonial-grade matcha powder, or he neither prefers to work at home over going to the office every day nor makes his own matcha teas every morning with ceremonial-grade matcha powder.", "fol": "((PrefersWorkFromHome(Clay) & MakesMatchaTea(Clay) & -(-PrefersWorkFromHome(Clay) & -MakesMatchaTea(Clay))) | (-(PrefersWorkFromHome(Clay) & MakesMatchaTea(Clay)) & -PrefersWorkFromHome(Clay) & -MakesMatchaTea(Clay)))", "prediction": ["all x.(Clay(x) -> ((PrefersWorkingAtHome(x) & GoesToOfficeEveryDay(x) & MakesOwnMatchaTeas(x) & CeremonialGradeMatchaPowder(x)) | (-PrefersWorkingAtHome(x) & MakesOwnMatchaTeas(x) & CeremonialGradeMatchaPowder(x))))", "all x.(Clay(x) -> ((PrefersWorkingAtHome(x) & GoesToOfficeEveryDay(x) & MakesOwnMatchaTeas(x) & CeremonialGradeMatchaPowder(x)) | (-PrefersWorkingAtHome(x) & GoesToOfficeEveryDay(x) & MakesOwnMatchaTeas(x) & CeremonialGraGradeMatchaPowder(x))))", "all x.(Clay(x) -> ((PrefersWorkingAtHome(x) & GoesToOfficeEveryDay(x) & MakesOwnMatchaTeas(x) & CeremonialGradeMatchaPowder(x)) | (-PrefersWorkingAtHome(x) & GoesToOfficeEveryDay(x) & MakesOwnMatchaTeas(x))))", "(exists x.(Clay(x) & ((PrefersWorkingAtHome(x) & GoesToOfficeEveryDay(x) & MakesOwnMatchaTeas(x)) | (-PrefersWorkingAtHome(x) & GoesToOfficeEveryDay(x) & MakesOwnMatchaTeas(x)))))", "all x.(Clay(x) -> ((PrefersWorkingAtHome(x) & GoesToOfficeEveryDay(x) & MakesOwnMatchaTeas(x) & CeremonialGradeMatchaPowder(x)) | (-PrefersWorkingAtHome(x) & MakesOwnMatchaTeas(x) & CeremonialGradeMatchaPowder(x)))))", "(PrefersWorkAtHome(Clay) & ((PrefersWorkAtHome(Clay) & GoesToOfficeEveryDay(Clay) & MakesOwnMatchaTeas(Clay)) | (-PrefersWorkAtHome(Clay) & GoesToOfficeEveryDay(Clay) & MakesOwnMatchaTeas(Clay)))))", "(PrefersWorkAtHome(Clay) & ((PrefersWorkAtHome(Clay) & GoesToOfficeEveryDay(Clay) & MakesOwnMatchaTeas(Clay)) | (-PrefersWorkAtHome(Clay) & GoesToOfficeEveryDay(Clay) & MakesOwnMatchaTeas(Clay))))", "(PrefersWorkingAtHome(Clay) & ((PrefersWorkingAtHome(Clay) & GoesToOfficeEveryDay(Clay) & MakesOwnMatchaTeas(Clay)) | (-PrefersWorkingAtHome(Clay) & GoesToOfficeEveryDay(Clay) & MakesOwnMatchaTeas(Clay))))", "(PrefersWorkAtHome(Clay) & ((PrefersWorkAtHome(Clay) & GoesToOfficeEveryDay(Clay) & MakesOwnMatchaTeas(Clay)) | (PrefersWorkAtHome(Clay) & -PrefersWorkAtHome(Clay) & MakesOwnMatchaTeas(Clay))))", "(PrefersWorkingAtHome(Clay) & ((PrefersWorkingAtHome(Clay) & GoesToOfficeEveryDay(Clay) & MakesOwnMatchaTeas(Clay)) | (-PrefersWorkingAtHome(Clay) & GoesToOfficeEveryDay(Clay) & MakesOwnMatchaTeas(Clay)))))", "all x.(Clay(x) -> ((PrefersWorkingAtHome(x) & GoesToOfficeEveryDay(x) & MakesOwnMatchaTeas(x) & CeremonialGradeMatchaPowder(x)) | -PrefersWorkingAtHome(x) & MakesOwnMatchaTeas(x) & CeremonialGradeMatchaPowder(x)))", "all x.(Clay(x) -> ((PrefersWorkingAtHome(x) & GoesToOfficeEveryDay(x) & MakesOwnMatchaTeas(x) & CeremonialGradeMatchaPowder(x)) | (-PrefersWorkingAtHome(x) & GoesToOfficeEveryDay(x) & MakesOwnMatchaTeas(x) & CeremonialGradeMatchaPowder(x))))", "(PrefersWorkingAtHome(Clay) & ((PrefersWorkingAtHome(Clay) & GoesToOfficeEveryDay(Clay) & MakesOwnMatchaTeas(Clay)) | (PrefersWorkingAtHome(Clay) & -PrefersWorkingAtHome(Clay) & MakesOwnMatchaTeas(Clay))))", "all x.(Clay(x) -> ((PrefersWorkingAtHome(x) & GoesToOfficeEveryDay(x) & MakesOwnMatchaTeas(x) & CeremonialGradeMatchaPowder(x)) | -PrefersWorkingAtHome(x) & MakesOwnMatchaTeas(x) & CeremonialGradeMatchaPowder(x))))", "(PrefersWorkAtHome(Clay) & ((PrefersWorkAtHome(Clay) & GoesToOfficeEveryDay(Clay) & MakesOwnMatchaTeas(Clay)) | (PrefersWorkAtHome(Clay) & -PrefersWorkAtHome(Clay) & MakesOwnMatchaTeas(Clay)))))", "(PrefersWorkingAtHome(Clay) & ((PrefersWorkingAtHome(Clay) & GoesToOfficeEveryDay(Clay) & MakesOwnMatchaTeas(Clay)) | (PrefersWorkingAtHome(Clay) & GoesToOfficeEveryDay(Clay) & MakesOwnMatchaTeas(Clay))))"]}
{"id": "folio_train_291", "nl": "Clay does not have a regular 9-5 job.", "fol": "-HasRegularJob(Clay)", "prediction": ["all x.(Clay(x) -> -Regular9-5Job(x))", "all x.(Clay(x) -> -Regular9-5Job(x))", "(-Regular9-5Job(Clay))", "exists x.(Clay(x) & -Regular9-5Job(x))", "all x.((Clay(x) & -Regular9-5Job(x)) -> -Regular9-5Job(x))", "all x.((Clay(x) & -Regular9-5Job(x)) -> -Regular9-5Job(x))", "all x.((Clay(x) & -Regular9-5Job(x)) -> -HasRegular9-5Job(x))", "all x.(Clay(x) -> -Regular 9-5Job(x))", "all x.(Clay(x) -> -RegularJob(x,9))", "all x.((Clay(x) & -Regular9-5Job(x)) -> -HasRegular9-5Job(x))", "all x.(Clay(x) -> -(Regular9-5Job(x) | Regular9-5Job(x)))", "all x.(Clay(x) -> -(Regular9-5Job(x) | Regular9-5Job(x))))", "All x.(Clay(x) -> -Regular9-5Job(x))", "(-Regular9-5Job(Clay))", "all x.(Clay(x) -> -HasRegular9-5Job(x))", "all x.((Clay(x) & -Regular9-5Job(x)) -> -Has(x,Clay))"]}
{"id": "folio_train_292", "nl": "Clay lives in California and attends yoga classes regularly.", "fol": "LivesInCalifornia(Clay)", "prediction": ["Clay lives in California and attendsYogaClassesRegularly(Clay)", "all x.(Clay(x) -> (LivesInCalifornia(x) & AttendsYogaClasses(x)))", "all x.(Clay(x) -> (LivesInCalifornia(x) & AttendsYogaClassesRegularly(x)))", "(LivesInCalifornia(Clay) & AttendsYogaClassesRegularly(Clay))", "(LisesInCalifornia(Clay) & AttendsYogaClassesRegularly(Clay))", "all x.(Clay(x) -> (LisesInCalifornia(x) & AttendsYogaClassesRegularly(x)))", "all x.(Clay(x) -> (LisesInCalifornia(x) & AttendsYogaClasses(x)))", "all x y.((Clay(x) & California(y)) -> (LivesIn(x,y) & Attends(x,y)))", "all x y.((Clay(x) & California(y)) -> (LivesIn(x,y) & AttendsYogaClasses(x,y)))", "(LivesInCalifornia(Clay) & AttendsYogaClasses(Clay))", "Clay lives in California and attendsYogaClassesRegularly(Clay,California)", "all x y.((Clay(x) & California(y)) -> (LivesIn(x,y) & AttendsYogaClassesRegularly(x)))", "exists x.(Clay(x) & LivesInCalifornia(x) & AttendsYogaClasses(x))", "all x y.((Clay(x) & California(y)) -> (LivesIn(x,y) & AttendsYogaClasses(x)))", "exists x.(Clay(x) & LivesInCalifornia(x) & AttendsYogaClassesRegularly(x))", "(LisesInCalifornia(Clay) & AttendsYogaClasses(Clay))"]}
{"id": "folio_train_293", "nl": "Clay neither prefers working at home over going to the office every day nor lives in California and attends yoga classes regularly.", "fol": "-(PrefersWorkFromHome(Clay) | (LivesInCalifornia(Clay) & Yoga(Clay)))", "prediction": ["(-(PrefersWorkingAtHome(Clay) & -PrefersWorkingAtOffice(Clay)) | (LivesInCalifornia(Clay) & AttendsYogaClassesRegularly(Clay))))", "(-(PrefersWorkingAtHome(Clay) & -PrefersWorkingAtOffice(Clay)) & -(LivesInCalifornia(Clay) & AttendsYogaClassesRegularly(Clay)))", "-(PrefersWorkingAtHome(Clay) & -(PrefersWorkingAtOffice(Clay) & -(LivesInCalifornia(Clay) & AttendsYogaClassesRegularly(Clay))))", "(-(PrefersWorkingAtHome(Clay) & -PrefersWorkingAtOfficeEveryDay(Clay)) | (LivesInCalifornia(Clay) & AttendsYogaClassesRegularly(Clay))))", "-(PrefersWorkingAtHome(Clay) & -PrefersWorkingAtOffice(Clay) & -(LivesInCalifornia(Clay) & AttendsYogaClassesRegularly(Clay)))", "(-(PrefersWorkingAtHome(Clay) & -PrefersGoingToOfficeEveryDay(Clay)) | (LivesInCalifornia(Clay) & AttendsYogaClassesRegularly(Clay))))", "(-(PrefersWorkingAtHome(Clay) & -PrefersWorkingAtOffice(Clay)) | (LisesInCalifornia(Clay) & AttendsYogaClassesRegularly(Clay))))", "-(PrefersWorkingAtHome(Clay) & -(PrefersWorkingAtHome(Clay) & -PrefersWorkingAtOffice(Clay)) & -(LivesInCalifornia(Clay) & AttendsYogaClassesRegularly(Clay)))", "(-(PrefersWorkingAtHome(Clay) & -PrefersWorkingAtOffice(Clay)) & -(PrefersWorkingAtHome(Clay) & -PrefersWorkingAtOffice(Clay)) & -(PrefersCalifornia(Clay) & AttendsYogaClassesRegularly(Clay))))", "-(PrefersWorkingAtHome(Clay) & -(PrefersWorkingAtOffice(Clay) & -PrefersWorkingAtHome(Clay) & -PrefersWorkingAtOffice(Clay)) & -(PrefersCalifornia(Clay) & AttendsYogaClassesRegularly(Clay)))", "(-(PrefersWorkingAtHome(Clay) & -PrefersWorkingAtOffice(Clay)) & -(PrefersWorkingAtHome(Clay) & -PrefersWorkingAtOffice(Clay)) & -(PrefersCalifornia(Clay) & AttendsYogaClassesRegularly(Clay)))", "-(PrefersWorkingAtHome(Clay) & -(PrefersWorkingAtOffice(Clay) & -PrefersWorkingAtHome(Clay) & -PrefersWorkingAtOffice(Clay)) & -(LivesInCalifornia(Clay) & AttendsYogaClassesRegularly(Clay)))", "-(PrefersWorkingAtHome(Clay) & -(PrefersWorkingAtOffice(Clay) & -(LivesInCalifornia(Clay) & AttendsYogaClasses(Clay))))", "(-(PrefersWorkingAtHome(Clay) & -PrefersWorkingAtOffice(Clay)) & -(PrefersWorkingAtHome(Clay) & -PrefersWorkingAtOffice(Clay)) & -(LivesInCalifornia(Clay) & AttendsYogaClassesRegularly(Clay))))", "-(PrefersWorkingAtHome(Clay) & -(PrefersWorkingAtOffice(Clay) & -(LivesInCalifornia(Clay) & AttendsYogaClassesRegularly(Clay)) & -(PrefersWorkingAtHome(Clay) & GoesToOfficeEveryDay(Clay))))", "(-(PrefersWorkingAtHome(Clay) & -PrefersWorkingAtOffice(Clay)) | (LivesInCalifornia(Clay) & AttendsYogaClasses(Clay))))"]}
{"id": "folio_train_294", "nl": "Thomas Barber was an English professional footballer.", "fol": "(IsEnglish(ThomasBarber) & IsProfessionalFootballer(ThomasBarber))", "prediction": ["Thomas Barber (EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer))))", "Thomas Barber (EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer))))", "Thomas Barber (EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer))", "Thomas Barber (EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer))", "Thomas Barber (EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer)(EdwardsProfessionalFootballer)))", "Thomas Barber (EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer)(EdwardsProfessionalFootballer))))", "Thomas Barber (EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer)))", "Thomas Barber (EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer)", "Thomas Barber (EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer)(EdwardsProfessionalFootballer)))", "Thomas Barber (EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer)", "Thomas Barber (EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootball", "Thomas Barber (EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer))))", "Thomas Barber (EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer)))", "Thomas Barber (EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer)EdwardsProfessionalFootballer)EdwardsProfessionalFootballer)", "Thomas Barber (EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer)(EdwardsProfessionalFootballer))))", "Thomas Barber (EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer(EdwardsProfessionalFootballer))"]}
{"id": "folio_train_295", "nl": "Thomas Barber played in the Football League for Aston Villa.", "fol": "PlayedInFootballLeagueFor(ThomasBarber,AstonVilla)", "prediction": ["all x y z.((ThomasBarber(x) & FootballLeague(y) & AstonVilla(z)) -> PlayedIn(x,y,z))", "all x y.((ThomasBarber(x) & AstonVilla(y)) -> PlayedInFootballLiga(x,y))", "all x y.((ThomasBarber(x) & AstonVilla(y)) -> PlayedInFootballLeague(x,y))", "all x y z.((ThomasBarber(x) & FootballLiga(y) & AstonVilla(z)) -> PlayedIn(x,y,z))", "all x y.((ThomasBarber(x) & AstonVilla(y)) -> PlayedInFootball(x,y))", "all x y.((TomTomBarber(x) & AstonVilla(y)) -> PlayedInFootballLiga(x,y))", "all x y.((TomTomBarber(x) & AstonVilla(y)) -> PlayedInFootballLeague(x,y))", "all x y.((TomTomBarber(x) & AstonVilla(y)) -> PlayedInFootball(x,y))", "All x y.((ThomasBarber(x) & AstonVilla(y)) -> PlayedInFootballLeague(x,y))", "all x y z.((ThomasBarber(x) & FootballLeague(y) & AstonVilla(z)) -> PlayedFor(x,y,z))", "All x y.((ThomasBarber(x) & AstonVilla(y)) -> PlayedInFootballLiga(x,y))", "all x y.((ThomasBarber(x) & AstonVilla(y)) -> PlayedInFootballLower(x,y))", "All x y.((ThomasBarber(x) & AstonVilla(y)) -> PlayedInFootball(x,y))", "all x y z.((ThomasBarber(x) & AstonVilla(y) & FootballLiga(z)) -> PlayedIn(x,y,z))", "all x y z.((ThomasBarber(x) & FootballLiga(y) & AstonVilla(z)) -> PlayedFor(x,y,z))", "all x y z.((ThomasBarber(x) & FootballLeague(y) & AstonVilla(z)) -> PlayedInFor(x,y,z))"]}
{"id": "folio_train_296", "nl": "Thomas Barber played as a half back and inside left.", "fol": "(PlayedAsPosition(ThomasBarber,AHalfBack) & PlayedAsPosition(ThomasBarber,AnInsideLeft))", "prediction": ["all x.(ThomasBarber(x) -> (PlayedAsHalfBack(x) & PlayedInsideLeft(x)))", "all x.((ThomasBarber(x) & HalfBack(x) & InsideLeft(x)) -> PlayedAs(x,y))", "all x.((ThomasBarber(x) & HalfBack(x) & InsideLeft(x)) -> Played(x))", "all x.((ThomasBarber(x) & HalfBack(x) & InsideLeft(x)) -> PlayedAs(x,x))", "all x.((ThomasBarber(x) & HalfBack(x) & InsideLeft(x)) -> Played(x,y))", "all x.((TomTomBarber(x) & HalfBack(x) & InsideLeft(x)) -> PlayedAs(x,y))", "all x.(Barber(x) -> (PlayedAsHalfBack(x) & PlayedInsideLeft(x)))", "all x.((TomBarber(x) & HalfBack(x) & InsideLeft(x)) -> PlayedAs(x,y))", "all x.(TomTomBarber(x) -> (PlayedAsHalfBack(x) & PlayedInsideLeft(x)))", "all x.(Tom(x) -> (PlayedAsHalfBack(x) & PlayedInsideLeft(x)))", "all x.((ThomasBarber(x) & HalfBack(x) & InsideLeft(x)) -> PlayedInsideLeft(x))", "all x.(ThomasBarber(x) -> (HalfBack(x) & InsideLeft(x)))", "all x.((Tom(x) & HalfBack(x) & InsideLeft(x)) -> PlayedAs(x,y))", "all x.((TomTomBarber(x) & HalfBack(x) & InsideLeft(x)) -> Played(x))", "all x.((TomBarber(x) & HalfBack(x) & InsideLeft(x)) -> Played(x))", "all x.((ThanyBarber(x) & HalfBack(x) & InsideLeft(x)) -> PlayedAs(x,y))"]}
{"id": "folio_train_297", "nl": "Thomas Barber scored the winning goal in the 1913 FA Cup Final.", "fol": "ScoredWinningGoalInMatch(ThomasBarber,Facupfinal1913)", "prediction": ["all x y.((ThomasBarber(x) & 1913FACupFinal(y)) -> ScoredWinningGoal(x,y))", "all x y.((TomTomBarber(x) & 1913FACupFinal(y)) -> ScoredWinningGoal(x,y))", "all x y.((ThomasBarber(x) & 1913FACupFinal(y)) -> ScoresWinnerGoal(x,y))", "all x.((ThomasBarber(x) & 1913FACupFinal(x)) -> ScoredWinningGoal(x))", "all x y.((ThomasBarber(x) & 1913FACupFinal(y)) -> ScoresWinningGoal(x,y))", "all x y.((ThomasBarber(x) & 1913FACupFinal(y)) -> ScoredWinnerGoal(x,y))", "all x.((TomTomBarber(x) & 1913FACupFinal(x)) -> ScoredWinningGoal(x))", "all x.((ThomasBarber(x) & 1913FACupFinal(x)) -> ScoresWinnerGoal(x))", "all x y.((TomTomBarber(x) & 1913FACupFinal(y)) -> ScoresWinnerGoal(x,y))", "all x.((TomTomBarber(x) & 1913FACupFinal(x)) -> ScoresWinnerGoal(x))", "all x.((TomTomBarber(x) & 1913FACupFinal(x)) -> ScoresWinningGoal(x))", "all x.((ThomasBarber(x) & 1913FACupFinal(x)) -> ScoresWinningGoal(x))", "all x y.((TomTomBarber(x) & 1913FACupFinal(y)) -> ScoredWinnerGoal(x,y))", "all x.((ThomasBarber(x) & 1913FACupFinal(x)) -> ScoredWinnerGoal(x))", "all x.((TomTomBarber(x) & 1913FACupFinal(x)) -> ScoredWinnerGoal(x))", "(WinningGoal(ThomasBarber) & 1913FACupFinal(ThomasBarber))"]}
{"id": "folio_train_298", "nl": "Thomas Barber played in the Football League for Bolton Wanderers", "fol": "PlayedInFootballLeagueFor(ThomasBarber,BoltonWanderers)", "prediction": ["all x y z.((ThomasBarber(x) & BoltonWanderers(y) & FootballLiga(z)) -> PlayedIn(x,y,z))", "all x y z.((ThomasBarber(x) & BoltonWanderers(y) & FootballLeague(z)) -> PlayedIn(x,y,z))", "all x y.((ThomasBarber(x) & BoltonWanderers(y)) -> PlayedInFootballLiga(x,y))", "all x y z.((ThomasBarber(x) & BoltonWanderers(y) & BoltonWanderers(z)) -> PlayedInFootballLiga(x,y,z))", "all x y.((ThomasBarber(x) & BoltonWanderers(y)) -> PlayedInFootballLeague(x,y))", "all x y z.((ThomasBarber(x) & BoltonWanderers(y) & FootballLiga(z) & PlayedIn(x,z)) -> PlayedIn(x,y,z))", "all x y z.((ThomasBarber(x) & BoltonWanderers(y) & FootballLiga(z)) -> PlayedIn(x,z))", "all x y z.((ThomasBarber(x) & BoltonWanderers(y) & FootballLiga(z) & PlayedIn(x,y,z)) -> PlayedIn(x,y,z))", "all x y z.((ThomasBarber(x) & BoltonWanderers(y) & FootballLeague(z) & PlayedIn(x,y,z)) -> PlayedIn(x,y,z))", "all x y z.((ThomasBarber(x) & BoltonWanderers(y) & BoltonWanderers(z)) -> PlayedInFootballLeague(x,y,z))", "all x y.((ThomasBarber(x) & BoltonWanderers(y)) -> PlayedInFootball(x,y))", "(PlayedInFootballLiga(ThomasBarber,BoltonWanderers) & BoltonWanderers(ThomasBarber,BoltonWanderers))", "all x y z.((ThomasBarber(x) & BoltonWanderers(y) & FootballLeague(z) & PlayedIn(x,z)) -> PlayedIn(x,y,z))", "all x y z.((ThomasBarber(x) & BoltonWanderers(y) & FootballLiga(z) & PlayedIn(x,z)) -> PlayedIn(x,z))", "all x y.((ThomasBarber(x) & BoltonWanderers(y)) -> PlayedInFootballLower(x,y))", "all x y z.((ThomasBarber(x) & BoltonWanderers(y) & FootballLeague(z)) -> PlayedIn(x,z))"]}
{"id": "folio_train_299", "nl": "Thomas Barber played as an inside left.", "fol": "PlayedAsPosition(ThomasBarber,AnInsideLeft)", "prediction": ["all x.((ThomasBarber(x) & InsideLeft(x)) -> PlayedAs(x,y))", "all x.((ThomasBarber(x) & InsideLeft(x)) -> Played(x,y))", "all x.((ThomasBarber(x) & InsideLeft(x)) -> Played(x))", "all x.((TomBarber(x) & InsideLeft(x)) -> PlayedAs(x,y))", "all x.((ThomasBarber(x) & PlayedInsideLeft(x)) -> PlayedInsideLeft(x))", "all x y.((ThomasBarber(x) & InsideLeft(y)) -> PlayedAs(x,y))", "all x.((ThomasBarber(x) & InsideLeft(x)) -> PlayedInsideLeft(x))", "all x.((TomBarber(x) & InsideLeft(x)) -> Played(x))", "all x.((TomBarber(x) & InsideLeft(x)) -> Played(x,y))", "all x.(ThomasBarber(x) -> PlayedInsideLeft(x))", "all x y.((ThomasBarber(x) & InsideLeft(y)) -> Played(x,y))", "all x.((ThomasBarber(x) & InsideLeft(x)) -> PlayedAs(x,x))", "all x.(ThomasBarber(x) -> PlayedAsInsideLeft(x))", "all x.((TomBarber(x) & InsideLeft(x)) -> PlayedInsideLeft(x))", "all x.((TomTomBarber(x) & InsideLeft(x)) -> PlayedAs(x,y))", "all x.((Tom(x) & Barber(x)) -> PlayedInsideLeft(x))"]}
{"id": "folio_train_300", "nl": "An English professional footballer scored the winning goal in the 1913 FA Cup Final.", "fol": "exists x.(IsEnglish(x) & IsProfessionalFootballer(x) & ScoredWinningGoalInMatch(x,Facupfinal1913))", "prediction": ["all x y.((EnglandProfessionalFootballer(x) & 1913FACupFinal(y)) -> ScoresWinnerGoal(x,y))", "all x y.((EnglandProfessionalFootballer(x) & 1913FACupFinal(y)) -> ScoredWinnerGoal(x,y))", "all x y.((EnglandProfessionalFootballer(x) & FACupFinal(y) & 1913(y)) -> ScoresWinnerGoal(x,y))", "all x y.((EnglishProfessionalFootballer(x) & 1913FACupFinal(y)) -> ScoresWinnerGoal(x,y))", "all x y.((EnglandProfessionalFootballer(x) & FACupFinal(y) & 1913(x)) -> ScoresWinnerGoal(x,y))", "all x y.((EnglandProfessionalFootballer(x) & 1913FACupFinal(y)) -> ScoredWinningGoal(x,y))", "all x y.((EnglandProfessionalFootballer(x) & FACupFinal(y)) -> ScoresWinnerGoal(x,y))", "all x y z.((EnglandProfessionalFootballer(x) & FACupFinal(y) & 1913(z)) -> ScoresWinnerGoal(x,y,z))", "all x y.((EnglandProfessionalFootballer(x) & FACupFinal(y) & 1913(x,y)) -> ScoresWinnerGoal(x,y))", "all x.((EnglandProfessionalFootballer(x) & FACupFinal(x,1913)) -> ScoresWinnerGoal(x,1913))", "all x y.((EnglandProfessionalFootballer(x) & FACupFinal(y) & 1913(y)) -> ScoredWinnerGoal(x,y))", "all x.((EnglandProfessionalFootballer(x) & WinsFACupFinal(x,1913)) -> ScoresWinnerGoal(x,1913))", "all x y.((EnglishProfessionalFootballer(x) & FACupFinal(y) & 1913(y)) -> ScoresWinnerGoal(x,y))", "all x y.((EnglandProfessionalFootballer(x) & FACupFinal(y) & 1913(x,y)) -> ScoredWinnerGoal(x,y))", "all x y z.((EnglandProfessionalFootballer(x) & FACupFinal(y) & 1913(z)) -> ScoredWinnerGoal(x,y,z))", "all x y z.((EnglandProfessionalFootballer(x) & Goal(y) & FACupFinal(z) & 1913(z)) -> ScoresWinner(x,y,z))"]}
{"id": "folio_train_301", "nl": "If people play the instrument in the concert, then he is good at playing this kind of instrument.", "fol": "all y x.(PerformInConcert(y,x) -> SkilledAtPlaying(y,x))", "prediction": ["all x.(PlayInConcert(x) -> GoodAtPlayingInstrument(x))", "all x.(PlaysInConcert(x) -> GoodAtPlayingInstrument(x))", "all x y.((Person(x) & Instrument(y) & PlaysInConcert(x,y)) -> GoodAtPlaying(x,y))", "all x.((Person(x) & PlaysInConcert(x)) -> GoodAtPlayingInstrument(x))", "all x y.((Person(x) & Instrument(y) & PlaysInConcert(x,y)) -> GoodAtPlayingInstrument(x,y))", "all x.((Person(x) & PlayInConcert(x)) -> GoodAtPlayingInstrument(x))", "all x y z.((Person(x) & Instrument(y) & Concert(z) & PlaysIn(x,y,z)) -> GoodAtPlaying(x,y,z))", "all x y.((Person(x) & PlayInConcert(x,y)) -> GoodAtPlayingInstrument(x,y))", "all x y.((Person(x) & PlaysInConcert(x,y)) -> GoodAtPlayingInstrument(x,y))", "all x y.((PlayInConcert(x) & Person(y) & PlayInConcert(y,x)) -> GoodAtPlayingInstrument(y,x))", "all x y.((PlaysInConcert(x,y) & Instrument(y)) -> GoodAtPlaying(x,y))", "all x.((PlayInConcert(x) & Person(x)) -> GoodAtPlayingInstrument(x))", "all x y z.((Person(x) & Instrument(y) & Concert(z) & PlaysIn(x,y,z)) -> GoodAtPlaying(x,y))", "all x.((PlaysInConcert(x) & Instrument(x)) -> GoodAtPlayingInstrument(x))", "all x y.((PlayInConcert(x) & Person(y) & PlayInConcert(y,x)) -> GoodAtPlayingInstrument(x,y))", "all x y.((Person(x) & Instrument(y) & PlaysInConcert(x,y)) -> GoodAtPlayingInstrument(x))"]}
{"id": "folio_train_302", "nl": "Peter plays piano, violin, and saxophone.", "fol": "(PlaysInstrument(Peter,Piano) & PlaysInstrument(Peter,Violin))", "prediction": ["(PlaysPiano(Peter) | PlaysViolin(Peter) | PlaysSaxophone(Peter))", "(PlaysPiano(Peter) & PlaysViolin(Peter) & PlaysSaxophone(Peter))", "(Plays(Peter,Piano) & Plays(Peter,Violin) & Plays(Peter,Saxophone))", "(PlaysPiano(Peter) | PlaysViolin(Peter) | PlaysSaxophone(Peter)))", "all x.(Peter(x) -> (PlaysPiano(x) | PlaysViolin(x) | PlaysSaxophone(x)))", "all x.(Peter(x) -> (PlaysPiano(x) & PlaysViolin(x) & PlaysSaxophone(x)))", "(Plays(Peter,Piano) | Plays(Peter,Violin) | Plays(Peter,Saxophone)))", "(playsPiano(Peter) | PlaysViolin(Peter) | PlaysSaxophone(Peter))", "(Plays(Peter,piano) | Plays(Peter,violin) | Plays(Peter,saxophone)))", "exists x.(Peter(x) & (PlaysPiano(x) | PlaysViolin(x) | PlaysSaxophone(x)))", "(Plays(Peter,Piano) | Plays(Peter,Violin) | Plays(Peter,Saxophone))", "(PeterPlaysPiano(Peter) | PlaysViolin(Peter) | PlaysSaxophone(Peter))", "(Plays(Peter,piano) & Plays(Peter,violin) & Plays(Peter,saxophone))", "(Plays(Peter,Piano) | Plays(Pianist,Violin) | Plays(Peter,Saxophone)))", "(playsPiano(Peter) & PlaysViolin(Peter) & PlaysSaxophone(Peter))", "(playsPiano(Peter) | PlaysViolin(Peter) | PlaysSaxophone(Peter)))"]}
{"id": "folio_train_303", "nl": "Peter was invited to play piano at the concert hall.", "fol": "PerformInConcert(Peter,Piano)", "prediction": ["all x y.((Peter(x) & ConcertHall(y)) -> InvitedToPlayPiano(x,y))", "all x.((Peter(x) & InvitedToPlayPiano(x)) -> ConcertHall(x))", "all x y.((Peter(x) & ConcertHall(y)) -> InvadedToPlayPiano(x,y))", "all x y.((Peter(x) & ConcertHall(y)) -> InvitedToPlayPiano(x,y))", "all x y.((Peter(x) & ConcertHall(y)) -> InvitedToPlayPiano(x,y))", "all x.((Peter(x) & InvadedToPlayPiano(x)) -> ConcertHall(x))", "all x y z.((Peter(x) & ConcertHall(y) & Piano(z)) -> InvitedToPlay(x,y,z))", "all x y z.((Peter(x) & ConcertHall(y) & Piano(z)) -> InvadedToPlay(x,z))", "all x y z.((Peter(x) & ConcertHall(y) & Piano(z)) -> InvadedToPlay(x,y,z))", "all x y.((Peter(x) & ConcertHall(y)) -> InvitedToPlay(x,y))", "all x y z.((Peter(x) & ConcertHall(y) & Piano(z)) -> InvitedToPlay(x,z))", "all x y z.((Peter(x) & ConcertHall(y) & Piano(z)) -> InvitedToPlay(x,y,z))", "all x y z.((Peter(x) & ConcertHall(y) & Piano(z)) -> InvitedToPlay(x,z))", "all x y z.((Peter(x) & ConcertHall(y) & Piano(z)) -> InvitedToPlay(x,y,z))", "all x y z.((Peter(x) & ConcertHall(y) & Piano(z)) -> InvitedToPlay(x,z))", "all x.((Peter(x) & InvitedToPlayPiano(x)) -> ConcertHall(x))"]}
{"id": "folio_train_304", "nl": "Oliver and Peter were both invited to perform in the concert.", "fol": "(IsConcertPerformer(Peter) & IsConcertPerformer(Oliver))", "prediction": ["all x y.((Oliver(x) & Peter(y)) -> (InvitedToPerformInConcert(x,y) & InvitedToPerformInConcert(y,x)))", "all x y.((Oliver(x) & Peter(y)) -> (InvitedToPerform(x,y) & InvitedToPerform(y,x)))", "all x y.((Oliver(x) & Peter(y)) -> (InvitedToPerformInConcert(x,y) | InvitedToPerformInConcert(y,x)))", "(InvitedToPerformInConcert(Oliver) & InvitedToPerformInConcert(Peter))", "all x y.((Oliver(x) & Peter(y)) -> (InvitedToPerformInConcert(x,y) & InvitedToPerformInConcert(y,x)))", "all x y z.((Oliver(x) & Peter(y) & Concert(z)) -> (InvitedToPerform(x,y,z) & InvitedToPerform(y,z)))", "all x y z.((Oliver(x) & Peter(y) & Concert(z)) -> (InvitedToPerform(x,y,z) | InvitedToPerform(y,z)))", "(InvitedToPerform(Oliver,Concert) & InvitedToPerform(Peter,Concert))", "all x y.((Oliver(x) & Peter(y)) -> (InvitedToPerformInConcert(x,y) & InvitedToPerformInConcert(x,y)))", "(InvitedToPerformInConcert(Oliver,Peter) & InvitedToPerformInConcert(Oliver,Peter))", "(InvitedToPerformConcert(Oliver) & InvitedToPerformConcert(Peter))", "(InvitedToPerformInConcert(Oliver,Peter) & InvitedToPerformInConcert(Oliver,Peter))", "all x y.((Oliver(x) & Peter(y)) -> (InvitedToPerform(x,y) | InvitedToPerform(y,x)))", "all x y.((Oliver(x) & Peter(y)) -> (InvitedToPerformInConcert(x,y) & InvitedToPerformInConcert(x,y)))", "all x y.((Oliver(x) & Peter(y)) -> (InvitedToPerform(x,y) & InvitedToPerform(y,x)))", "all x y z.((Oliver(x) & Peter(y) & Concert(z)) -> (InvitedToPerformIn(x,y,z) & InvitedToPerformIn(y,z)))"]}
{"id": "folio_train_305", "nl": "Oliver plays a different musical instrument from Peter in the concert.", "fol": "-PerformInConcert(Oliver,Piano)", "prediction": ["all x y.((Oliver(x) & Peter(y)) -> PlaysDifferentInstrument(x,y))", "all x y.((Oliver(x) & Peter(y)) -> PlaysDifferentMusicalInstrument(x,y))", "all x y z.((Oliver(x) & Peter(y) & MusicalInstrument(z)) -> PlaysInConcert(x,y,z))", "all x y.((Oliver(x) & Peter(y)) -> PlaysDifferentInstrumentInConcert(x,y))", "all x y.((Oliver(x) & Peter(y)) -> PlaysInConcert(x,y))", "all x y z.((Oliver(x) & Peter(y) & MusicalInstrument(z)) -> PlaysDifferentIn Concert(x,y,z))", "all x y.((Oliver(x) & Peter(y)) -> PlaysMusicalInstrument(x,y))", "all x y z.((Oliver(x) & MusicalInstrument(y) & Peter(z)) -> PlaysInConcert(x,y,z))", "all x y z.((Oliver(x) & Peter(y) & MusicalInstrument(z)) -> PlaysDifferentInConcert(x,y,z))", "all x y.((Oliver(x) & Peter(y)) -> (PlaysDifferentInstrument(x,y) | PlaysDifferentInstrument(x,y)))", "all x y.((Oliver(x) & Peter(y)) -> (PlaysDifferentInstrument(x,y) & InConcert(x,y)))", "all x y z.((Oliver(x) & Peter(y) & MusicalInstrument(z)) -> PlaysDifferentInstrument(x,y,z))", "all x y z.((Oliver(x) & Peter(y) & MusicalInstrument(z)) -> PlaysInConcert(x,z))", "all x y z.((Oliver(x) & MusicalInstrument(y) & Peter(z)) -> PlaysDifferentInstrument(x,y,z))", "all x y.((Oliver(x) & Peter(y)) -> PlaysDifferentMusicalInstrumentInConcert(x,y))", "all x y.((Oliver(x) & Peter(y) & InConcert(x,y)) -> PlaysDifferentInstrument(x,y))"]}
{"id": "folio_train_306", "nl": "Oliver plays piano in the concert.", "fol": "PerformInConcert(Oliver,Piano)", "prediction": ["all x y.((Oliver(x) & Piano(y)) -> PlaysInConcert(x,y))", "all x y z.((Oliver(x) & Piano(y) & Concert(z)) -> PlaysIn(x,y,z))", "all x y.((Oliver(x) & Concert(y)) -> PlaysPiano(x,y))", "all x.((Oliver(x) & Piano(y)) -> PlaysInConcert(x,y))", "all x y.((Oliver(x) & Concert(y)) -> PlaysPianoIn(x,y))", "all x y z.((Oliver(x) & Piano(y) & Concert(z) & PlaysIn(x,y,z)) -> PlaysIn(x,y,z))", "all x y z.((Oliver(x) & Piano(y) & Concert(z)) -> Plays(x,y,z))", "all x.(Oliver(x) -> PlaysPianoInConcert(x))", "all x y z.((Oliver(x) & Piano(y) & Concert(z) & PlaysIn(x,y,z)) -> PlaysIn(x,y))", "all x y.((Oliver(x) & Piano(y) & Concert(z)) -> PlaysIn(x,y,z))", "all x y z.((Oliver(x) & Piano(y) & Concert(z) & Plays(x,y,z)) -> PlaysIn(x,y,z))", "all x.((Oliver(x) & Piano(x)) -> PlaysInConcert(x))", "all x y z.((Oliver(x) & Piano(y) & Concert(z)) -> PlaysIn(x,y))", "all x y z.((Oliver(x) & Piano(y) & Concert(z) & PlaysIn(x,y)) -> PlaysIn(x,y,z))", "all x y z.((Oliver(x) & Piano(y) & Concert(z) & Plays(x,y)) -> PlaysIn(x,z))", "all x y.((Oliver(x) & Concert(y)) -> Plays(x,y))"]}
{"id": "folio_train_307", "nl": "Oliver plays violin in the concert.", "fol": "PerformInConcert(Oliver,Violin)", "prediction": ["all x y.((Oliver(x) & Concert(y)) -> PlaysViolin(x,y))", "all x y z.((Oliver(x) & Violin(y) & Concert(z)) -> PlaysIn(x,y,z))", "all x.((Oliver(x) & Violin(y)) -> PlaysInConcert(x,y))", "all x y.((Oliver(x) & Violin(y)) -> PlaysInConcert(x,y))", "all x y.((Oliver(x) & Concert(y)) -> PlaysViolinIn(x,y))", "all x y z.((Oliver(x) & Violin(y) & Concert(z) & PlaysIn(x,y,z)) -> PlaysIn(x,y,z))", "all x y.((Oliver(x) & Concert(y)) -> (PlaysViolin(x,y) | PlaysViolin(x,y)))", "all x y z.((Oliver(x) & Violin(y) & Concert(z)) -> Plays(x,y,z))", "all x y.((Oliver(x) & Concert(y) & PlaysViolin(x,y)) -> PlaysViolin(x,y))", "all x.(Oliver(x) -> PlaysViolinInConcert(x))", "all x.((Oliver(x) & Violin(x)) -> PlaysInConcert(x))", "all x.(Oliver(x) -> (PlaysViolin(x) & InConcert(x)))", "all x y z.((Oliver(x) & Violin(y) & Concert(z) & Plays(x,y,z)) -> PlaysIn(x,y,z))", "all x y z.((Oliver(x) & Violin(y) & Concert(z) & PlaysIn(x,y,z)) -> PlaysIn(x,y))", "all x y.((Oliver(x) & Concert(y)) -> (PlaysViolin(x,y) | -PlaysViolin(x,y)))", "all x y.((Oliver(x) & Concert(y)) -> (PlaysViolin(x,y) & InConcert(x,y)))"]}
{"id": "folio_train_308", "nl": "Peter is good at playing piano.", "fol": "SkilledAtPlaying(Peter,Piano)", "prediction": ["all x.(Peter(x) -> GoodAtPlayingPiano(x))", "all x.((Peter(x) & GoodAtPlayingPiano(x)) -> GoodAtPlayingPiano(x))", "all x.((Peter(x) & PlaysPiano(x)) -> GoodAt(x))", "all x.((Peter(x) & Piano(y)) -> GoodAt(x,y))", "all x.((Peter(x) & Piano(y)) -> GoodAtPlaying(x,y))", "exists x.(Peter(x) & GoodAtPlayingPiano(x))", "all x.((Peter(x) & GoodAtPlayingPiano(x)) -> ExcellentAtPlayingPiano(x))", "all x y.((Peter(x) & Piano(y)) -> GoodAt(x,y))", "all x.((Peter(x) & PlaysPiano(x)) -> GoodAt(x,Piano))", "all x y.((Peter(x) & Piano(y)) -> GoodAtPlaying(x,y))", "all x.((Peter(x) & PlayingPiano(x)) -> GoodAt(x))", "(GoodAtPlayingPiano(Peter) -> GoodAtPlayingPiano(Peter))", "(GoodAtPlayingPiano(Peter))", "all x.((Peter(x) & GoodAtPlaying(x,Piano)) -> GoodAtPlaying(x,Piano))", "(GoodAtPlayingPiano(Peter) & GoodAtPlayingPiano(Peter))", "(GoodAtPlayingPiano(Peter) -> GoodAtPlayingPiano(Peter))"]}
{"id": "folio_train_309", "nl": "If something can go underwater, then it enjoys water.", "fol": "all x.(CanGoUnderwater(x) -> LovesWater(x))", "prediction": ["all x.((CanGoUnderwater(x)) -> EnjoysWater(x))", "all x.((GoesUnderwater(x) & EnjoysWater(x)) -> CanGoUnderwater(x))", "all x.((CanGoUnderwater(x) & EnjoysWater(x)) -> CanGoUnderwater(x))", "all x.(CanGoUnderwater(x) -> EnjoysWater(x))", "all x.((GoesUnderwater(x)) -> EnjoysWater(x))", "all x.((DoesUnderwater(x) & EnjoysWater(x)) -> CanGoUnderwater(x))", "all x.((Product(x) & CanGoUnderwater(x)) -> EnjoysWater(x))", "all x.((Water(x) & CanGoUnderwater(x)) -> EnjoysWater(x))", "all x.((Underwater(x) & CanGo(x)) -> EnjoysWater(x))", "all x.((GoesUnderwater(x) & EnjoysWater(x)) -> EnjoysWater(x))", "all x.((Product(x) & GoesUnderwater(x)) -> EnjoysWater(x))", "all x.((Position(x) & CanGoUnderwater(x)) -> EnjoysWater(x))", "all x.((CanGoUnderwater(x) & EnjoysWater(x)) -> EnjoysWater(x))", "all x.((Project(x) & CanGoUnderwater(x)) -> EnjoysWater(x))", "all x.((Underwater(x) & EnjoysWater(x)) -> CanGo(x))", "all x.((DoesUnderwater(x)) -> EnjoysWater(x))"]}
{"id": "folio_train_310", "nl": "All animals that can swim can go underwater.", "fol": "all x.(AbleToSwim(x) -> CanGoUnderwater(x))", "prediction": ["all x.((Animal(x) & CanSwim(x)) -> CanGoUnderwater(x))", "all x.((Animal(x) & CanSwim(x)) -> GoUnderwater(x))", "all x.(CanSwim(x) -> CanGoUnderwater(x))", "all x.((Animal(x) & Swims(x)) -> CanGoUnderwater(x))", "all x.((Animal(x) & CanSwim(x)) -> GoesUnderwater(x))", "all x.((Animal(x) & Swims(x)) -> GoesUnderwater(x))", "all x y.((Animal(x) & CanSwim(x)) -> CanGoUnderwater(y))", "all x y.((Animal(x) & CanSwim(x)) -> CanGoUnderwater(x))", "all x.((Animal(x) & Swims(x)) -> GosUnderwater(x))", "all x.(CanSwim(x) -> GoUnderwater(x))", "all x.((Animal(x) & CanSwim(x)) -> CanGoSubmerged(x))", "all x.((Animal(x) & CanSwim(x)) -> -CanGoUnderwater(x))", "all x.((Animal(x) & SwimsWith(x)) -> CanGoUnderwater(x))", "all x.((Animal(x) & CanSwim(x)) -> AvailableUnderwater(x))", "all x.((Animal(x) & CanSwim(x)) -> CanFloatUnderwater(x))", "all x.((Animal(x) & CanSwim(x)) -> CanSwimUnderwater(x))"]}
{"id": "folio_train_311", "nl": "Either an animal can swim or it can walk.", "fol": "all x.(AbleToSwim(x) | AbleToWalk(x))", "prediction": ["all x.(Animal(x) -> (CanSwim(x) | CanWalk(x)))", "exists x.(Animal(x) & (CanSwim(x) | CanWalk(x)))", "(exists x.(Animal(x) & CanSwim(x)) | exists y.(Animal(y) & CanWalk(y))))", "all x y.((Animal(x) & Animal(y)) -> (CanSwim(x) | CanWalk(y)))", "(all x.(Animal(x) -> CanSwim(x)) | (Animal(x) -> CanWalk(x))))", "all x y.((Animal(x) & (CanSwim(x) | CanWalk(x))) -> CanSwim(x))", "all x.((Animal(x) & (CanSwim(x) | CanWalk(x))) -> CanSwim(x))", "all x.(Animal(x) -> (Swim(x) | Walk(x)))", "all x y.((Animal(x) & Animal(y)) -> (CanSwim(x,y) | CanWalk(x,y)))", "all x y.((Animal(x) & (CanSwim(x) | CanWalk(x))) -> (CanSwim(x) | CanWalk(x)))", "all x.(Animal(x) -> (Swims(x) | Walks(x)))", "all x.((Animal(x) & (CanSwim(x) | CanWalk(x))) -> (CanSwim(x) | CanWalk(x)))", "all x.((Animal(x) & (CanSwim(x) | CanWalk(x))) -> CanWalk(x))", "all x.(Animal(x) -> (CanSwim(x) | CanWalk(x)))", "(exists x.(Animal(x) & CanSwim(x)) | CanWalk(x)))", "exists x.(Animal(x) & (CanSwim(x) | CanWalk(x))))"]}
{"id": "folio_train_312", "nl": "Animals that can walk travel on land.", "fol": "all x.(AbleToWalk(x) -> MovesOnLand(x))", "prediction": ["all x.((Animal(x) & CanWalk(x)) -> TravelsOnLand(x))", "all x.((Animal(x) & Walks(x)) -> TravelsOnLand(x))", "all x.((Animal(x) & WalksOnLand(x)) -> TravelsOnLand(x))", "all x.((Animal(x) & Walkable(x)) -> TravelsOnLand(x))", "all x.((Animal(x) & CanWalk(x)) -> TravelOnLand(x))", "all x.((Animal(x) & Walking(x)) -> TravelsOnLand(x))", "all x.((Animal(x) & CanWalkOnLand(x)) -> TravelsOnLand(x))", "all x y.((Animal(x) & CanWalk(x)) -> TravelsOnLand(x))", "all x.((Animal(x) & Walks(x)) -> TravelOnLand(x))", "all x.((Animal(x) & Walk(x)) -> TravelsOnLand(x))", "all x y.((Animal(x) & CanWalk(x) & Land(y)) -> TravelsOn(x,y))", "all x y.((Animal(x) & Walks(x)) -> TravelsOnLand(x))", "all x.((Animal(x) & Walkable(x)) -> TravelOnLand(x))", "all x y.((Animal(x) & CanWalk(x)) -> TravelsOnLand(y))", "all x y.((Animal(x) & CanWalk(x)) -> TravelsOnLand(x,y))", "all x.((Animal(x) & WalksOnLand(x)) -> TravelOnLand(x))"]}
{"id": "folio_train_313", "nl": "Animals that enjoy water splash water around.", "fol": "all x.(LovesWater(x) -> CreatesSplash(x))", "prediction": ["all x.((Animal(x) & EnjoysWater(x)) -> SplashWaterAround(x))", "all x.((Animal(x) & EnjoysWater(x)) -> SplashesWaterAround(x))", "all x y.((Animal(x) & EnjoysWater(x)) -> SplashWaterAround(x,y))", "all x y.((Animal(x) & EnjoysWater(x)) -> SplashWaterAround(x))", "all x.((Animal(x) & EnjoysWater(x)) -> SplashWater(x))", "all x y z.((Animal(x) & Water(y) & Water(z) & Enjoys(x,y)) -> SplashWaterAround(x,z))", "all x.((Animal(x) & EnjoyWater(x)) -> SplashWaterAround(x))", "all x y z.((Animal(x) & EnjoysWater(x) & Water(y) & Water(z)) -> Splash(x,y,z))", "all x y.((Animal(x) & Water(y) & Enjoys(x,y)) -> SplashWaterAround(x,y))", "all x y.((Animal(x) & Water(y) & Enjoys(x,y)) -> SplashWaterAround(x))", "all x y.((Animal(x) & EnjoysWater(x,y)) -> SplashWaterAround(x,y))", "all x y.((Animal(x) & EnjoysWater(x) & Water(y)) -> SplashWaterAround(x,y))", "all x y.((Animal(x) & EnjoysWater(x) & Water(y)) -> Splash(x,y))", "all x.((Animal(x) & EnjoysWater(x)) -> SpunsWaterAround(x))", "all x.((Animal(x) & EnjoysWater(x)) -> Splash(x))", "all x y.((Animal(x) & EnjoysWater(x)) -> SplashWaterAround(y))"]}
{"id": "folio_train_314", "nl": "Every animal that travels on land enjoys basking in the sun.", "fol": "all x.(MovesOnLand(x) -> LovesBaskingInSun(x))", "prediction": ["all x.((Animal(x) & TravelsOnLand(x)) -> EnjoysBakingInSun(x))", "all x.((Animal(x) & TravelsOnLand(x)) -> EnjoysBreakingInSun(x))", "all x.(TravelsOnLand(x) -> EnjoysBakingInSun(x))", "all x.((Animal(x) & TravelsOnLand(x)) -> EnjoysBaskingInSun(x))", "all x.(TravelsOnLand(x) -> EnjoysBreakingInSun(x))", "all x.((Animal(x) & TravelsOnLand(x)) -> EnjoysBakingInTheSun(x))", "all x y.((Animal(x) & LandTravel(y)) -> EnjoysBakingInSun(x,y))", "all x.((Animal(x) & TravelsOnLand(x)) -> EnjoysBreakingInTheSun(x))", "all x y.((Animal(x) & Land(y) & TravelsOn(x,y)) -> EnjoysBakingInSun(x))", "all x.((Animal(x) & TravelsOnLand(x)) -> EnjoysBalkingInSun(x))", "all x y.((Animal(x) & LandTravel(y)) -> EnjoysBreakingInSun(x,y))", "all x y.((Animal(x) & Land(y) & TravelsOn(x,y)) -> EnjoysBreakingInSun(x))", "all x.((Animal(x) & TravelsOnLand(x)) -> EnjoysBeingInSun(x))", "all x y.((Animal(x) & TravelsOnLand(x)) -> EnjoysBakingInSun(x,y))", "all x.((Animal(x) & TravelsOnLand(x)) -> EnjoysBinkingInSun(x))", "all x y.((Animal(x) & TravelsOnLand(x)) -> EnjoysBakingInSun(x))"]}
{"id": "folio_train_315", "nl": "George splashes water around and can swim.", "fol": "(CreatesSplash(George) & AbleToSwim(George))", "prediction": ["all x.(George(x) -> (SpoilsWater(x) & CanSwim(x)))", "all x.(George(x) -> (SpoilsWaterAround(x) & CanSwim(x)))", "all x.(George(x) -> (SplashesWater(x) & CanSwim(x)))", "all x y.((George(x) & Water(y)) -> (Spoils(x,y) & CanSwim(x)))", "all x.(George(x) -> (SplashWater(x) & CanSwim(x)))", "all x.(George(x) -> (SpokensWater(x) & CanSwim(x)))", "all x y.((George(x) & Water(y)) -> (Splashes(x,y) & CanSwim(x)))", "all x.(George(x) -> (SplashesWaterAround(x) & CanSwim(x)))", "all x.(George(x) -> (SplashWaterAround(x) & CanSwim(x)))", "all x y.((George(x) & Water(y)) -> (SpoilsAround(x,y) & CanSwim(x)))", "all x y z.((George(x) & Water(y) & Water(z)) -> (Spoils(x,y) & CanSwim(x)))", "all x.(George(x) -> (SpoilsWater(x) & CanSwim(x)))", "all x y z.((George(x) & Water(y) & Water(z)) -> (Spoils(x,y) & CanSwim(x,z)))", "all x.(George(x) -> (SpokensWaterAround(x) & CanSwim(x)))", "all x y z.((George(x) & Water(y) & Water(z)) -> (SpoilsAround(x,y) & CanSwim(x,z)))", "all x y.((George(x) & Water(y)) -> (SpoilsAround(x,y) & CanSwim(x,y)))"]}
{"id": "folio_train_316", "nl": "Liam is either an animal that can walk and enjoys water, or is neither an animal that can walk nor enjoys water.", "fol": "((AbleToWalk(Liam) & LovesWater(Liam)) | (-AbleToWalk(Liam) & -LovesWater(Liam)))", "prediction": ["all x.(Liam(x) -> ((Animal(x) & Walks(x) & EnjoysWater(x)) | (-Animal(x) & Walks(x) & EnjoysWater(x))))", "all x.(Liam(x) -> ((Animal(x) & CanWalk(x) & EnjoysWater(x)) | (-Animal(x) & CanWalk(x) & EnjoysWater(x))))", "all x.(Liam(x) -> ((Animal(x) & Walks(x) & EnjoysWater(x)) | -Animal(x) & -Walks(x) & EnjoysWater(x)))", "all x.(Liam(x) -> ((Animal(x) & Walks(x) & EnjoysWater(x)) | -Animal(x) & Walks(x) & -EnjoysWater(x))))", "all x.(Liam(x) -> ((Animal(x) & CanWalk(x) & EnjoysWater(x)) | (-Animal(x) & CanWalk(x) & -EnjoysWater(x))))", "all x.(Liam(x) -> ((Animal(x) & CanWalk(x) & EnjoysWater(x)) | -(Animal(x) & CanWalk(x) & -EnjoysWater(x))))", "all x.(Liam(x) -> ((Animal(x) & Walks(x) & EnjoysWater(x)) | -Animal(x) & Walks(x) & -EnjoysWater(x)))", "all x.(Liam(x) -> ((Animal(x) & CanWalk(x) & EnjoysWater(x)) | -Animal(x) & -CanWalk(x) & -EnjoysWater(x))))", "all x.(Liam(x) -> ((Animal(x) & Walks(x) & EnjoysWater(x)) | -Animal(x) & -Walks(x) & EnjoysWater(x))))", "all x.(Liam(x) -> ((Animal(x) & CanWalk(x) & EnjoysWater(x)) | -(Animal(x) & CanWalk(x) & EnjoysWater(x))))", "all x.(Liam(x) -> ((Animal(x) & Walks(x) & EnjoysWater(x)) | -(Animal(x) & Walks(x) & EnjoysWater(x))))", "all x.(Liam(x) -> ((Animal(x) & CanWalk(x) & EnjoysWater(x)) | -Animal(x) & -CanWalk(x) & -EnjoysWater(x)))", "all x.(Liam(x) -> ((Animal(x) & Walks(x) & EnjoysWater(x)) | (-Animal(x) & Walks(x) & EnjoysWater(x)))))", "all x.(Liam(x) -> ((Animal(x) & CanWalk(x) & EnjoysWater(x)) | -Animal(x) & CanWalk(x) & -EnjoysWater(x))))", "all x.(Liam(x) -> ((Animal(x) & Walks(x) & EnjoysWater(x)) | (-Animal(x) & Walks(x) & -EnjoysWater(x))))", "all x.(Liam(x) -> ((Animal(x) & CanWalk(x) & EnjoysWater(x)) | (-Animal(x) & CanWalk(x) & EnjoysWater(x)))))"]}
{"id": "folio_train_317", "nl": "George enjoys basking in the sun.", "fol": "LovesBaskingInSun(George)", "prediction": ["all x y.((George(x) & Sun(y)) -> EnjoysBakingIn(x,y))", "all x.((George(x) & EnjoysBakingInSun(x)) -> EnjoysBakingInSun(x))", "all x.((George(x) & BasksInSun(x)) -> Enjoys(x))", "all x.(George(x) -> EnjoysBreakingInSun(x))", "all x.(George(x) -> EnjoysBreakingInSun(x))", "all x.(George(x) -> EnjoysBakingInSun(x))", "all x y.((George(x) & Sun(y)) -> EnjoysBreakingIn(x,y))", "all x.(George(x) -> EnjoysBakingInSun(x))", "all x.((George(x) & EnjoysBreakingInSun(x)) -> EnjoysBakingInSun(x))", "all x y z.((George(x) & Sun(y) & Sun(z)) -> EnjoysBakingIn(x,y,z))", "all x y.((George(x) & Sun(y)) -> EnjoysBaking(x,y))", "all x.((George(x) & EnjoysBreakingInSun(x)) -> EnjoysBreakingInSun(x))", "all x.((George(x) & Sun(y)) -> EnjoysBakingIn(x,y))", "all x y z.((George(x) & Sun(y) & Sun(z)) -> EnjoysBreakingIn(x,y,z))", "all x.((George(x) & EnjoysBreakingInSun(x)) -> BasksInSun(x))", "all x.((George(x) & EnjoysBakingInSun(x)) -> BasksInSun(x))"]}
{"id": "folio_train_318", "nl": "Liam enjoys basking in the sun and splashing water around.", "fol": "(LovesBaskingInSun(Liam) & CreatesSplash(Liam))", "prediction": ["all x.(Liam(x) -> (EnjoysBreakingInSun(x) & EnjoysSplashingWater(x)))", "all x.(Liam(x) -> (EnjoysBakingInSun(x) & EnjoysSplashingWater(x)))", "all x.(Liam(x) -> (EnjoysBreakingInSun(x) & SplashingWater(x)))", "all x y.((Liam(x) & Sun(y)) -> (EnjoysBreakingIn(x,y) & EnjoysSplashingWater(x,y)))", "all x y.((Liam(x) & Sun(y)) -> (EnjoysBreaking(x,y) & EnjoysSplashingWater(x,y)))", "all x.(Liam(x) -> (EnjoysBreakingInSun(x) & SplashesWater(x)))", "all x.((Liam(x) & BasksInSun(x) & SplashesWater(x)) -> Enjoys(x))", "all x.(Liam(x) -> (EnjoysBreakingInSun(x) & EnjoysSpringingWater(x)))", "all x y z.((Liam(x) & Sun(y) & Water(z)) -> (EnjoysBreaking(x,y) & EnjoysSplashing(x,z)))", "(EnjoysBreakingInSun(Liam) & EnjoysSplashingWater(Liam))", "all x y.((Liam(x) & Sun(y)) -> (EnjoysBreakingIn(x,y) & EnjoysSplashingWater(x)))", "all x.((Liam(x) & BasksInSun(x) & SplashesWater(x)) -> Enjoys(x))", "all x.(Liam(x) -> (EnjoysBaskingInSun(x) & EnjoysSplashingWater(x)))", "all x y.((Liam(x) & Sun(y)) -> (EnjoysBakingIn(x,y) & EnjoysSplashingWater(x,y)))", "all x y z.((Liam(x) & Sun(y) & Water(z)) -> (EnjoysBreakingIn(x,y) & EnjoysSplashing(x,z)))", "all x y.((Liam(x) & Sun(y)) -> (EnjoysBreaking(x,y) & EnjoysSplashingWater(x)))"]}
{"id": "folio_train_319", "nl": "Liam neither enjoys basking in the sun nor splashing water around.", "fol": "(-LovesBaskingInSun(Liam) & -CreatesSplash(Liam))", "prediction": ["(-(EnjoysBreakingInSun(Liam) & -EnjoysSplashingWater(Liam)))", "-(EnjoysBreakingInSun(Liam) & -EnjoysSplashingWater(Liam))", "all x.(Liam(x) -> (-EnjoysBreakingInSun(x) & -EnjoysSplashingWater(x)))", "(-(EnjoysBreakingInSun(Liam) & -EnjoysSplashingWater(Liam)) -> -(EnjoysBreakingInSun(Liam) & -EnjoysSplashingWater(Liam)))", "(-(EnjoysBreakingInSun(Liam) & -EnjoysSplashingWater(Liam)) -> -(EnjoysBreakingInSun(Liam) | EnjoysSplashingWater(Liam))))", "(-(EnjoysBreakingInSun(Liam) & -EnjoysSplashingWater(Liam)) | (-EnjoysBreakingInSun(Liam) & EnjoysSplashingWater(Liam))))", "(-(EnjoysBreakingInSun(Liam) & -EnjoysSplashingWater(Liam)) | (-EnjoysBreakingInSun(Liam) & -EnjoysSplashingWater(Liam))))", "(-(EnjoysBakingInSun(Liam) & -EnjoysSplashingWater(Liam)) -> -(EnjoysBakingInSun(Liam) & -EnjoysSplashingWater(Liam)))", "-(EnjoysBreakingInSun(Liam) | EnjoysSplashingWater(Liam)))", "(-(EnjoysBakingInSun(Liam) & -EnjoysSplashingWater(Liam)) -> -(EnjoysBakingInSun(Liam) | EnjoysSplashingWater(Liam))))", "(-exists x.(Liam(x) & BasksInSun(x)) & -exists y.(Liam(y) & SplashesWater(y))))", "(-(EnjoysBreakingInSun(Liam) & -EnjoysSplashingWater(Liam)) -> -(EnjoysBakingInSun(Liam) & -EnjoysSplashingWater(Liam)))", "(-(EnjoysBreakingInSun(Liam) & -EnjoysSplashingWater(Liam)) -> -EnjoysBreakingInSun(Liam))", "(-(EnjoysBreakingInSun(Liam) & -EnjoysSplashingWater(Liam)) -> -(EnjoysBakingInSun(Liam) | EnjoysSplashingWater(Liam))))", "(-(EnjoysBreakingInSun(Liam) & -EnjoysSplashingWater(Liam)) -> -(EnjoysBreakingInSun(Liam) | EnjoysSplashingWater(Liam)))", "(-(EnjoysBakingInSun(Liam) & -EnjoysSplashingWater(Liam)))"]}
{"id": "folio_train_320", "nl": "Cancer biology is finding genetic alterations that confer selective advantage to cancer cells. ", "fol": "FindGeneticAlterationsForCancerAdvantage(CancerBiology)", "prediction": ["all x.(CancerBiology(x) -> (FindsGeneticAlterations(x) & ConveysSelectiveAdvantageToCancerCells(x)))", "all x y z.((CancerBiology(x) & GeneticAlterations(y) & CancerCell(z)) -> (Finds(x,y) & ConveysSelectiveAdvantage(x,z)))", "all x.(CancerBiology(x) -> (FindsGeneticAlterations(x) & ConveysSelectiveAdvantage(x)))", "all x y.((CancerBiology(x) & CancerCell(y)) -> (FindsGeneticAlterations(x,y) & ConveysSelectiveAdvantage(x,y)))", "all x.(CancerBiology(x) -> (FindsGeneticAlternations(x) & ConveysSelectiveAdvantageToCancerCells(x)))", "all x y.((CancerousBiology(x) & CancerCell(y)) -> (FindsGeneticAlterations(x,y) & ConveysSelectiveAdvantage(x,y)))", "all x y.((CancerBiology(x) & CancerCell(y)) -> (FindsGeneticAlternations(x,y) & ConveysSelectiveAdvantage(x,y)))", "all x y.((ClinicalBiology(x) & CancerCell(y)) -> (FindsGeneticAlterations(x,y) & ConveysSelectiveAdvantage(x,y)))", "all x.(CancerBiology(x) -> (FindsGeneticAlternations(x) & ConveysSelectiveAdvantage(x)))", "all x y z.((CancerBiology(x) & GeneticAlterations(y) & CancerCell(z)) -> ConveysSelectiveAdvantage(x,y,z))", "all x y.((CancerBiology(x) & GeneticAlterations(y)) -> (Finds(x,y) & ConveysSelectiveAdvantage(x,y)))", "all x y.((CancerBiology(x) & CancerCell(y)) -> (FindsGeneticAlterations(x,y) & ConfersSelectiveAdvantage(x,y)))", "all x.(CancerBiology(x) -> (FindsGeneticAlters(x) & ConveysSelectiveAdvantage(x)))", "all x.(CancerousBiology(x) -> (FindsGeneticAlterations(x) & ConveysSelectiveAdvantage(x)))", "all x y z.((CancerBiology(x) & GeneticAlterations(y) & CancerCell(z)) -> (Finds(x,y) & ConfersSelectiveAdvantage(x,z)))", "all x y z.((CancerBiology(x) & GeneticAlterations(y) & CancerCell(z)) -> (Finds(x,y) & ConveysSelectiveAdvice(x,z)))"]}
{"id": "folio_train_321", "nl": "Cancer researchers have frequently ranked the importance of substitutions to cancer growth by P value.", "fol": "all x.(PValueThreshold(x) -> RankImportanceOfSubstitutions(CancerResearchers,x,TheImportanceOfSubstitutionsToCancerGrowth))", "prediction": ["all x y.((CancerResearcher(x) & CancerGrowth(y)) -> RankedImportanceOfSubstitutionsByPValue(x,y))", "all x y.((CancerResearcher(x) & CancerGrowth(y)) -> (RanksImportanceOfSubstitutions(x,y) & ByPValue(x,y)))", "all x y.((CancerResearcher(x) & CancerGrowth(y)) -> RangingImportanceOfSubstitutionsByPValue(x,y))", "all x y z.((CancerResearcher(x) & Substitution(y) & CancerGrowth(z)) -> RankedImportanceByPValue(x,y,z))", "all x y.((CancerResearcher(x) & CancerGrowth(y)) -> RangsImportanceOfSubstitutionsByPValue(x,y))", "all x y z.((CancerResearcher(x) & Substitution(y) & CancerGrowth(z)) -> RangingImportanceByPValue(x,y,z))", "all x y.((CancerResearcher(x) & CancerGrowth(y)) -> RankedImportanceOfSubstitutions(x,y))", "all x y.((CancerResearcher(x) & CancerGrowth(y)) -> RanksImportanceOfSubstitutionsByPValue(x,y))", "all x y.((CancerResearcher(x) & CancerGrowth(y)) -> (RanksImportanceOfSubstitutions(x,y) & PValue(x,y)))", "all x y.((CancerResearcher(x) & CancerGrowth(y)) -> RankingImportanceOfSubstitutionsByPValue(x,y))", "all x y.((CancerResearcher(x) & CancerGrowth(y)) -> RangingImportanceOfSubstitutions(x,y))", "all x y.((CancerResearcher(x) & CancerGrowth(y)) -> (RanksImportanceOfSubstitutionsByPValue(x,y)))", "all x y.((CancerResearcher(x) & CancerGrowth(y)) -> RangsImportanceOfSubstitutions(x,y))", "all x y z.((CancerResearcher(x) & Substitution(y) & CancerGrowth(z)) -> (RanksImportanceByPValue(x,y,z)))", "all x y.((CancerResearcher(x) & CancerGrowth(y)) -> (RanksImportanceOfSubstitutions(x,y) & ByPValue(x)))", "all x y.((CancerResearcher(x) & CancerGrowth(y)) -> RankedImportance(x,y))"]}
{"id": "folio_train_322", "nl": "P values are thresholds for belief, not metrics of effect. ", "fol": "all x.((PValueThreshold(x) -> BeliefThresholds(x)) & -EffectMetrics(x))", "prediction": ["all x.(PValue(x) -> (ThresholdForBelief(x) & -MetameterOfEffect(x)))", "all x.(PValue(x) -> (ThresholdForBelief(x) & -MethodOfEffect(x)))", "all x.(PValue(x) -> (TreethForBelief(x) & -MetametricsOfEffect(x)))", "all x.(PValue(x) -> (ThresholdForBelief(x) & -MetadataOfEffect(x)))", "all x.(PValue(x) -> (ThresholdForBelief(x) & -MetametricOfEffect(x)))", "all x.(PValue(x) -> (ThresholdForBelief(x) & -MetametricsOfEffect(x)))", "all x.(PValue(x) -> (ThresholdForBelief(x) & -ThresholdForEffect(x)))", "all x.(PValue(x) -> (TreethForBelief(x) & -MethodsOfEffect(x)))", "all x.(PValue(x) -> (Threshold(x) & -MetameterOfEffect(x)))", "all x.(PValue(x) -> (TreethForBelief(x) & -MetameterOfEffect(x)))", "all x.(PValue(x) -> (ThresholdForBelief(x) & -MethodsOfEffect(x)))", "all x.(PValue(x) -> (Threshold(x) & -MetametricsOfEffect(x)))", "all x.(PValue(x) -> (TreethForBelief(x) & -MetadataOfEffect(x)))", "all x.(PValue(x) -> (Threshold(x) & -MetadataOfEffect(x)))", "all x.(PValue(x) -> (Threshold(x) & -MethodsOfEffect(x)))", "all x.(PValue(x) -> (Threshold(x) & -MetametricOfEffect(x)))"]}
{"id": "folio_train_323", "nl": "Cancer researchers tend to use the cancer effect size to determine the relative importance of the genetic alterations that confer selective advantage to cancer cells.", "fol": "all x.((CancerResearcher(x) -> UsesEffectSize(x,CancerEffectSize)) & DeterminesRelativeImportance(x,GeneticAlterationsConferSelectiveAdvantageToCancerCells))", "prediction": ["all x y.((CancerResearcher(x) & CancerEffectSize(y)) -> DeterminesRelativeImportanceOfGeneticAlterations(x,y))", "all x y.((CancerResearcher(x) & CancerEffectSize(y)) -> DeterminesRelativeImportanceOfGeneticAlternations(x,y))", "all x y.((CancerResearcher(x) & CancerEffectSize(y)) -> UsesToDetermineRelativeImportanceOfGeneticAlterations(x,y))", "all x y.((CancerResearcher(x) & CancerEffectSize(y)) -> UsesToDetermineRelativeImportanceOfGeneticAlternations(x,y))", "all x.(CancerResearcher(x) -> (UsesCancerEffectSize(x) & DeterminesRelativeImportanceOfGeneticAlterations(x) & ConveysSelectiveAdvantageToCancerCells(x)))", "all x.(CancerResearcher(x) -> (UsesCancerEffectSize(x) & DeterminesRelativeImportanceOfGeneticAlternations(x) & ConveysSelectiveAdvantageToCancerCells(x)))", "all x.(CancerResearcher(x) -> (UsesCancerEffectSize(x) & DeterminesRelativeImportanceOfGeneticAlterations(x) & ConveysSelectiveAdvantage(x)))", "all x.(CancerResearcher(x) -> (UsesCancerEffectSize(x) & DeterminesRelativeImportanceOfGeneticAlternations(x) & ConveysSelectiveAdvantage(x)))", "all x y.((CancerResearcher(x) & CancerEffectSize(y)) -> UsesToDetermineImportanceOfGeneticAlternations(x,y))", "all x y.((CancerResearcher(x) & CancerEffectSize(y)) -> UsesToDetermineImportanceOfGeneticAlterations(x,y))", "all x y.((CancerResearcher(x) & CancerEffectSize(y)) -> (UsesCancerousEffectSize(x,y) & DeterminesRelativeImportanceOfGeneticAlterations(x,y)))", "all x y z.((CancerResearcher(x) & CancerEffectSize(y) & GeneticAlterations(z)) -> (Uses(x,y) & DeterminesRelativeImportance(x,z)))", "all x y.((CancerResearcher(x) & CancerEffectSize(y)) -> (UsesCancerousEffectSize(x,y) & DeterminesRelativeImportanceOfGeneticAlternations(x,y)))", "all x y z.((CancerResearcher(x) & CancerEffectSize(y) & GeneticAlterations(z) & ConveysSelectiveAdvantage(x,z)) -> UsesToDetermineImportance(x,y,z))", "all x y z.((CancerResearcher(x) & CancerEffectSize(y) & GeneticAlterations(z)) -> (Uses(x,y) & DeterminesImportance(x,z) & ConveysSelectiveAdvantage(x,z)))", "all x y z.((CancerResearcher(x) & CancerEffectSize(y) & GeneticAlterations(z)) -> (Uses(x,y) & DeterminesImportance(x,z)))"]}
{"id": "folio_train_324", "nl": "P value represents the selection intensity for somatic variants in cancer cell lineages.", "fol": "all x.(PValueThreshold(x) -> RepresentsSelectionIntensityForSomaticVariantsInCancerCellLineages(x))", "prediction": ["all x.(PValue(x) -> (RepresentsSelectionIntensity(x) & SomaticVariantsInCancerCellLineages(x)))", "all x.(PValue(x) -> (RepresentsSelectionIntensity(x) & SomaticVariants(x) & CancerCellLineages(x)))", "all x.(PValue(x) -> (RepresentsSelectionIntensity(x) & ForSomaticVariants(x) & InCancerCellLineages(x)))", "all x.(PValue(x) -> (RepresentsSelectionIntensityForSomaticVariants(x) & InCancerCellLineages(x)))", "all x.(PValue(x) -> RepresentsSelectionIntensityForSomaticVariantsInCancerCellLineages(x))", "all x y z.((PValue(x) & SomaticVariants(y) & CancerCellLineage(z)) -> RepresentsIntensity(x,y,z))", "all x y z.((PValue(x) & SomaticVariants(y) & CancerCellLineage(z)) -> RepresentsSelectionIntensity(x,y,z))", "all x y z.((PValue(x) & SomaticVariants(y) & CancerCellLineages(z)) -> RepresentsIntensity(x,y,z))", "all x.(PValue(x) -> (RepresentsSelectionIntensityForSomaticVariants(x) & CancerCellLineages(x)))", "all x y z.((PValue(x) & SomaticVariants(y) & CancerCellLineages(z)) -> RepresentsSelectionIntensity(x,y,z))", "all x y z.((PValue(x) & SomaticVariants(y) & CancerCellLineage(z)) -> RepresentsIntensityForSelection(x,y,z))", "all x y z.((PValue(x) & SomaticVariants(y) & CancerCellLineages(z)) -> RepresentsIntensityForSelection(x,y,z))", "all x y.((PValue(x) & SomaticVariants(y) & CancerCellLineages(z)) -> RepresentsSelectionIntensity(x,y,z))", "all x y.((PValue(x) & SomaticVariants(y) & CancerCellLineages(z)) -> RepresentsIntensity(x,y,z))", "all x.(PValue(x) -> RepresentsSelectionIntensity(x))", "all x y.((PValue(x) & CancerCellLineage(y)) -> RepresentsSelectionIntensity(x,y))"]}
{"id": "folio_train_325", "nl": "Cancer effect size is a metric that is preferred by the majority of cancer researchers.", "fol": "exists x.(CancerEffectSize(x) & PreferredByMajority(CancerResearchers,x))", "prediction": ["all x.(CancerEffectSize(x) -> (PreferredByMajorityOfCancerResearchers(x)))", "all x.(CancerousEffectSize(x) -> (PreferredByMajorityOfCancerResearchers(x)))", "all x.(CancerousEffectSize(x) -> PreferredByMajorityOfCancerResearchers(x))", "all x y.((CancerEffectSize(x) & CancerResearcher(y)) -> PreferredMetric(x,y))", "all x.(CancerEffectSize(x) -> (PreferredByMajorityOfCancerResearchers(x) & PreferableByMajority(x)))", "all x y.((CancerousEffectSize(x) & CancerResearcher(y)) -> PreferredMetric(x,y))", "all x.(CancerEffectSize(x) -> PreferredByMajorityOfCancerResearchers(x))", "all x y.((CancerEffectSize(x) & CancerResearcher(y)) -> (PreferredByMajority(x,y) & PreferredByMajority(x,y)))", "all x y.((CancerEffectSize(x) & CancerResearcher(y)) -> (PreferredByMajority(x,y)))", "all x y.((CancerEffectSize(x) & CancerResearcher(y)) -> (PreferredMetric(x,y) & PreferableByMajority(x,y)))", "all x y.((CancerEffectSize(x) & CancerResearcher(y)) -> (PreferredMetric(x,y) | PreferredMetric(x,y)))", "all x y.((CancerEffectSize(x) & CancerResearcher(y)) -> (PreferredByMajority(x,y) & PreferableByMajority(x,y)))", "all x y.((CancerEffectSize(x) & CancerResearcher(y)) -> (PreferredMetric(x,y) & MajorityPreferredMetric(x,y)))", "all x.(CancerousEffectSize(x) -> (PreferredByMajorityOfCancerResearchers(x) & PreferableByMajority(x)))", "all x.(CancerEffectSize(x) -> (PreferredByMajorityOfCancerResearchers(x) & PreferredByMajority(x)))", "all x.(CancerEffectSize(x) -> (PreferredByMajorityOfCancerResearchers(x) & PreferableByMajorityOfResearchers(x)))"]}
{"id": "folio_train_326", "nl": "P value doesn't represent metrics of effect.", "fol": "all x.(PValueThreshold(x) -> -EffectMetrics(x))", "prediction": ["all x.(PValue(x) -> -RepresentsMetadataOfEffect(x))", "all x.(PValue(x) -> -RepresentsEffectMetadata(x))", "all x.((PValue(x) & -RepresentsMetadataOfEffect(x)) -> -RepresentsMetadataOfEffect(x))", "all x y.((PValue(x) & MetricsOfEffect(y)) -> -Represents(x,y))", "all x.(PValue(x) -> -RepresentsMeasuresOfEffect(x))", "all x.((PValue(x) & -RepresentsEffectMetadata(x)) -> -RepresentsEffectMetadata(x))", "all x.(PValue(x) -> -RepresentsMeasurementsOfEffect(x))", "all x.(PValue(x) -> -RepresentsMethodsOfEffect(x))", "all x.((PValue(x) & -RepresentsMetadataOfEffect(x)) -> -RepresentsMetametricsOfEffect(x))", "all x.(PValue(x) -> -RepresentsEffectMetrics(x))", "all x.(PValue(x) -> -RepresentsEffectMethods(x))", "all x.(PValue(x) -> -RepresentsMetametricsOfEffect(x))", "all x.(PValue(x) -> -RepresentsMetricsOfEffect(x))", "all x.(PValue(x) -> -RepresentsEffectMetameters(x))", "all x.(PValue(x) -> -RepresentsMetricsOfEffect(x))", "all x.(PValue(x) -> -RepresentsEffectMetrics(x))"]}
{"id": "folio_train_327", "nl": "All dispensable things are environment-friendly. ", "fol": "all x.(IsDispensable(x) -> IsEnvironmentFriendly(x))", "prediction": ["all x.(DispensableThing(x) -> EnvironmentFriendly(x))", "all x.(Dispensable(x) -> EnvironmentFriendly(x))", "all x.((DispensableThing(x) & EnvironmentFriendly(x)) -> EnvironmentFriendly(x))", "all x.((Dispensable(x) & EnvironmentFriendly(x)) -> Dispensable(x))", "all x.(DispensableThing(x) -> EnvironmentallyFriendly(x))", "all x.((DispensableThing(x) & EnvironmentFriendly(x)) -> EnvironmentallyFriendly(x))", "all x.((Dispensable(x) & EnvironmentFriendly(x)) -> EnvironmentFriendly(x))", "all x.((DispensableThing(x) & EnvironmentFriendly(x)) -> Dispensable(x))", "all x.(Dispensable(x) -> EnvironmentallyFriendly(x))", "all x.(DispensableThing(x) -> EnvironmentFriendly(x))", "all x.((Dispensable(x) & EnvironmentFriendly(x)) -> EnvironmentallyFriendly(x))", "all x.(Dispensable(x) -> EnvironmentFriendly(x))", "all x.(DiscpensableThing(x) -> EnvironmentFriendly(x))", "all x.((Dispensable(x) & EnvironmentFriendly(x)) -> -Dispensable(x))", "all x.((DispensableThing(x) & EnvironmentFriendly(x)) -> EnvironmentFriendly(x))", "all x.(Dispensable(x) -> EnvironmentFriendly(x))"]}
{"id": "folio_train_328", "nl": "All woodware is dispensable.", "fol": "all x.(IsWoodware(x) -> IsDispensable(x))", "prediction": ["all x.(Woodware(x) -> Dispensable(x))", "all x.(Woodenware(x) -> Dispensable(x))", "all x.((Woodware(x) & Dispensable(x)) -> Dispensable(x))", "all x.((Woodware(x) & Dispensable(x)) -> Woodware(x))", "all x y.((Woodware(x) & Woodware(y)) -> Dispensable(x))", "all x.(Woodware(x) -> Dispensable(x))", "all x y.((Woodware(x) & Woodware(y)) -> Dispensable(x,y))", "all x.((Woodenware(x) & Dispensable(x)) -> Woodware(x))", "All x.(Woodware(x) -> Dispensable(x))", "all x.(Woodware(x) & Dispensable(x))", "(all x.(Woodware(x) -> Dispensable(x)))", "all x.((Woodenware(x) & Dispensable(x)) -> Dispensable(x))", "all x.(Woodenware(x) -> Dispensable(x))", "all x y.((Woodware(x) & Woodware(y)) -> Dispensable(y))", "exists x.(Woodware(x) & Dispensable(x))", "all x.((Woodware(x) & Dispensable(x)) -> Dispensable(x))"]}
{"id": "folio_train_329", "nl": "All paper is woodware. ", "fol": "all x.(IsPaper(x) -> IsWoodware(x))", "prediction": ["all x.(Paper(x) -> Woodware(x))", "all x y.((Paper(x) & Woodware(y)) -> Woodware(x))", "all x.((Paper(x) & Woodware(x)) -> Woodware(x))", "all x.(Paper(x) -> Woodware(x))", "all x.(Plastic(x) -> Woodware(x))", "all x y.((Paper(x) & Woodware(y)) -> Woodware(x,y))", "All x.(Paper(x) -> Woodware(x))", "all x y.((Paper(x) & Paper(y)) -> Woodware(x))", "all x.exists y.(Paper(x) & Woodware(y) & ProducedBy(x,y))", "(all x.(Paper(x) -> Woodware(x))", "all x.exists y.(Paper(x) & Woodware(y) & PrintedOn(x,y))", "all x.exists y.(Paper(x) & Woodware(y) & UsedFor(x,y))", "all x.exists y.(Paper(x) & Woodware(y) & Produces(x,y))", "exists x.(Paper(x) & Woodware(x))", "all x.exists y.(Paper(x) & Woodware(y) & PrintedIn(x,y))", "all x.exists y.(Paper(x) & Woodware(y))"]}
{"id": "folio_train_330", "nl": "No good things are bad. ", "fol": "all x.(IsGood(x) -> -IsBad(x))", "prediction": ["-exists x.(GoodThing(x) & BadThing(x))", "-exists x.(Good(x) & Bad(x))", "all x.((GoodThing(x) & BadThing(x)) -> -(GoodThing(x) & BadThing(x)))", "all x.(GoodThing(x) -> BadThing(x))", "-exists x.(GoodThing(x) & Bad(x))", "all x.((GoodThing(x) & BadThing(x)) -> -BadThing(x))", "all x.((GoodThing(x) & BadThing(x)) -> -GoodThing(x))", "all x.(GoodThing(x) -> Bad(x))", "all x.(Good(x) -> Bad(x))", "all x.((GoodThing(x) & BadThing(x)) -> -(GoodThing(x) & BadThing(x))))", "all x.((GoodThing(x) & BadThing(x)) -> -(GoodThing(x) -> BadThing(x)))", "all x.((GoodThing(x) & BadThing(x)) -> -exists y.(GoodThing(y) & BadThing(x)))", "all x.((GoodThing(x) & BadThing(x)) -> -exists y.(GoodThing(y) & BadThing(y)))", "-all x.(GoodThing(x) -> Bad(x))", "all x.((Good(x) & Bad(x)) -> -(Good(x) & Bad(x)))", "all x.((GoodThing(x) & BadThing(x)) -> -exists y.(GoodThing(x) & BadThing(y)))"]}
{"id": "folio_train_331", "nl": "All environment-friendly things are good.", "fol": "all x.(IsEnvironmentFriendly(x) -> IsGood(x))", "prediction": ["all x.(EnvironmentFriendly(x) -> Good(x))", "all x.(EnvironmentFriendlyThing(x) -> Good(x))", "all x.(EnvironmentFriendly(x) -> Good(x))", "all x.(EnvironmentFriendlyThan(x) -> Good(x))", "all x.((EnvironmentFriendly(x) & Good(x)) -> EnvironmentFriendly(x))", "all x y.((EnvironmentFriendly(x) & Environment(y)) -> Good(x))", "all x.((EnvironmentFriendlyThing(x) & Good(x)) -> EnvironmentFriendly(x))", "all x.(EnvironmentFriendlyThing(x) -> Good(x))", "all x y.((EnvironmentFriendlyThing(x) & EnvironmentFriendly(y)) -> Good(x))", "all x.(EnvironmentFriendlyThing(x) -> GoodThing(x))", "all x.(EnvironmentFriendlyTogether(x) -> Good(x))", "all x y.((EnvironmentFriendlyThing(x) & Environment(y)) -> Good(x))", "all x y.((EnvironmentFriendlyThing(x) & EnvironmentFriendlyThing(y)) -> Good(x))", "all x.((EnvironmentFriendlyThing(x) & Good(x)) -> Good(x))", "all x.(EnvironmentFriendlyTen(x) -> Good(x))", "all x.((EnvironmentFriendlyThing(x) & Good(x)) -> EnvironmentallyFriendly(x))"]}
{"id": "folio_train_332", "nl": "A worksheet is either paper or is environment-friendly.", "fol": "((IsPaper(Worksheet) & -IsEnvironmentFriendly(Worksheet)) | (-IsPaper(Worksheet) & IsEnvironmentFriendly(Worksheet)))", "prediction": ["all x.(Worksheet(x) -> (Paper(x) | EnvironmentFriendly(x)))", "all x.(Worksheet(x) -> ((Paper(x) | EnvironmentFriendly(x))))", "exists x.(Worksheet(x) & (Paper(x) | EnvironmentFriendly(x)))", "all x.(Worksheet(x) -> (IsPaper(x) | EnvironmentFriendly(x)))", "all x.((Worksheet(x) & (Paper(x) | EnvironmentFriendly(x))) -> Paper(x))", "all x.(Worksheet(x) -> (Paint(x) | EnvironmentFriendly(x)))", "all x.((Worksheet(x) & (Paper(x) | EnvironmentFriendly(x))) -> (Paper(x) | EnvironmentFriendly(x)))", "exists x.(Worksheet(x) & (Paper(x) | EnvironmentFriendly(x))))", "all x.(Worksheet(x) -> (Paper(x) | EnvironmentFriendly(x)))", "all x.(Worksheet(x) -> (EitherPaper(x) | EnvironmentFriendly(x)))", "all x.(Worksheet(x) -> (IsPaper(x) | IsEnvironmentFriendly(x)))", "all x.(Worksheet(x) -> (Paper(x) | EnvironmentalFriendly(x)))", "all x.((Worksheet(x) & (Paper(x) | EnvironmentFriendly(x))) -> ((Paper(x) | EnvironmentFriendly(x))))", "all x.(Worksheet(x) -> (HasPaper(x) | EnvironmentFriendly(x)))", "all x.((Worksheet(x) & (Paper(x) | EnvironmentFriendly(x))) -> (Paper(x) | EnvironmentFriendly(x))))", "all x.(Worksheet(x) -> (Printable(x) | EnvironmentFriendly(x)))"]}
{"id": "folio_train_333", "nl": "A worksheet is dispensable.", "fol": "IsDispensable(Worksheet)", "prediction": ["all x.(Worksheet(x) -> Dispensable(x))", "exists x.(Worksheet(x) & Dispensable(x))", "all x.((Worksheet(x) & Dispensable(x)) -> Dispensable(x))", "all x y.((Worksheet(x) & Worksheet(y)) -> Dispensable(x))", "all x.exists y.((Worksheet(x) & Worksheet(y)) -> Dispensable(x))", "all x.exists y.(Worksheet(x) & Worksheet(y) & Dispensable(x))", "all x.exists y.(Worksheet(x) & Dispensable(y))", "all x.exists y.(Worksheet(x) & Worksheet(y) & Dispensable(x,y))", "all x y.((Worksheet(x) & Worksheet(y)) -> Dispensable(x,y))", "all x.exists y.((Worksheet(x) & Worksheet(y)) -> Dispensable(x,y))", "all x.((Worksheet(x) & Dispensable(x)) -> Requires(x))", "all x.(Wheelsheet(x) -> Dispensable(x))", "all x.(Sheet(x) -> Dispensable(x))", "all x.((Worksheet(x) & Dispensable(x)) -> HasWorksheet(x))", "all x.((Worksheet(x) & Dispensable(x)) -> Is(x,y))", "all x.((Worksheet(x) & Dispensable(x)) -> Contains(x,y))"]}
{"id": "folio_train_334", "nl": "A worksheet is not dispensable.", "fol": "-IsDispensable(Worksheet)", "prediction": ["all x.(Worksheet(x) -> -Dispensable(x))", "all x.(Worksheet(x) -> -Dispensable(x))", "all x.((Worksheet(x) & -Dispensable(x)) -> -Dispensable(x))", "all x.((Worksheet(x) & -Dispensable(x)) -> -Dispensable(x))", "all x.((Worksheet(x) & -Dispensable(x)) -> -Dispensable(x))", "all x.((Worksheet(x) & -Dispensable(x)) -> -Worksheet(x))", "all x.(Worksheet(x) -> -dispensable(x))", "all x.((Worksheet(x) & -Dispensable(x)) -> -(Dispensable(x) | Dispensable(x))))", "exists x.(Worksheet(x) & -Dispensable(x))", "all x.((Worksheet(x) & -Dispensable(x)) -> -(Dispensable(x) | Dispensable(x)))", "all x y.((Worksheet(x) & Worksheet(y)) -> -Dispensable(x))", "all x.((Worksheet(x) & -Dispensable(x)) -> -Dispensable(x))", "all x.(Worksheet(x) -> -Disponible(x))", "all x.(Worksheet(x) -> -Dispenseable(x))", "all x.((Worksheet(x) & -Dispensable(x)) -> -(Dispensable(x) & Dispensable(x)))", "all x.(Wheelsheet(x) -> -Dispensable(x))"]}
{"id": "folio_train_335", "nl": "A worksheet is bad.", "fol": "IsBad(Worksheet)", "prediction": ["all x.(Worksheet(x) -> Bad(x))", "all x.((Worksheet(x) & Bad(x)) -> Bad(x))", "exists x.(Worksheet(x) & Bad(x))", "all x y.((Worksheet(x) & Worksheet(y)) -> Bad(x))", "all x.exists y.((Worksheet(x) & Worksheet(y)) -> Bad(x))", "all x.((Worksheet(x) & Bad(x)) -> Is(x,y))", "all x.((Worksheet(x) & Bad(x)) -> -Bad(x))", "all x.(Wheelsheet(x) -> Bad(x))", "all x.((Worksheet(x) & Bad(x)) -> Poor(x))", "all x.exists y.(Worksheet(x) & Worksheet(y) & Bad(x))", "all x.((Worksheet(x) & Bad(x)) -> Good(x))", "all x y.((Worksheet(x) & Worksheet(y)) -> Bad(x,y))", "all x.exists y.(Worksheet(x) & Bad(y))", "all x.((Worksheet(x) & Bad(x)) -> BAD(x))", "all x.((Worksheet(x) & Bad(x)) -> Requires(x))", "all x.((Worksheet(x) & Bad(x)) -> Worst(x))"]}
{"id": "folio_train_336", "nl": "A worksheet is not bad.", "fol": "-IsBad(Worksheet)", "prediction": ["all x.(Worksheet(x) -> -Bad(x))", "all x.((Worksheet(x) & -Bad(x)) -> -Bad(x))", "exists x.(Worksheet(x) & -Bad(x))", "all x.((Worksheet(x) & -Bad(x)) -> -(Bad(x) & -Bad(x)))", "all x.((Worksheet(x) & -Bad(x)) -> -(Bad(x) & -Bad(x))))", "all x.((Worksheet(x) & -Bad(x)) -> -(Bad(x) | Bad(x))))", "all x y.((Worksheet(x) & Worksheet(y)) -> -Bad(x))", "all x.((Worksheet(x) & -Bad(x)) -> -NotBad(x))", "all x y.((Worksheet(x) & Worksheet(y)) -> -Bad(x,y))", "all x.(Wheelsheet(x) -> -Bad(x))", "all x.((Worksheet(x) & -Bad(x)) -> -Good(x))", "all x.((Worksheet(x) & -Bad(x)) -> -(Bad(x) & Bad(x)))", "all x.((Worksheet(x) & -Bad(x)) -> -Poor(x))", "all x.(Worksheet(x) -> NotBad(x))", "all x.((Worksheet(x) & -Bad(x)) -> -(Bad(x) & Bad(x))))", "all x.((Worksheet(x) & -Bad(x)) -> -(Bad(x) | Bad(x)))"]}
{"id": "folio_train_337", "nl": "No reptile has fur.", "fol": "all x.(IsReptile(x) -> -HasFur(x))", "prediction": ["-exists x.(Reptile(x) & HasFur(x))", "-exists x.(Reptile(x) & Fur(x))", "all x.(Reptile(x) -> -HasFur(x))", "(-exists x.(Reptile(x) & HasFur(x)))", "(-exists x.(Reptile(x) & Fur(x)))", "all x.(Reptile(x) -> NoFur(x))", "exists x.(Reptile(x) & -HasFur(x))", "exists x.(Reptile(x) & HasFur(x))", "- exists x.(Reptile(x) & HasFur(x))", "\u2013exists x.(Reptile(x) & HasFur(x))", "\u2013 exists x.(Reptile(x) & HasFur(x))", "no reptile exists x.(Reptile(x) & HasFur(x))", "-exists x.(Reptile(x) & Fur(y))", "all x.(Reptile(x) -> HasFur(x))", "-exists x.(Reptile(x) & Has(x,fur))", "-exists x.(Reptile(x) & Has(x,Fur))"]}
{"id": "folio_train_338", "nl": "All snakes are reptiles.", "fol": "all x.(IsSnake(x) -> IsReptile(x))", "prediction": ["all x.(Snake(x) -> Reptile(x))", "all x y.((Snake(x) & Reptile(y)) -> Reptile(x))", "all x.(Snake(x) -> Reptile(x))", "all x y.((Snake(x) & Reptile(y)) -> Reptile(x,y))", "(all x.(Snake(x) -> Reptile(x)))", "all x y.((Snake(x) & Reptile(y)) -> (Reptile(x) | Reptile(y)))", "all x.exists y.(Snake(x) & Reptile(y) & Reptile(x))", "all x y.((Snake(x) & Reptile(y)) -> (Reptile(x) & Reptile(y)))", "all x y.((Snake(x) & Reptile(x)) -> Reptile(y))", "all x y.((Snake(x) & Reptile(y)) -> (Reptile(x) | Reptile(x)))", "all x.exists y.(Snake(x) & Reptile(y) & Reptile(x) & Reptile(y))", "all x.exists y.(Snake(x) & Reptile(y) & Reptile(y))", "all x.exists y.(Snake(x) & Reptile(y) & Reptile(x,y))", "all x.exists y.(Snake(x) & Reptile(y) & LivesIn(x,y))", "all x y.((Snake(x) & Reptile(y)) -> (Reptile(x) & Reptile(x)))", "All x.(Snake(x) -> Reptile(x))"]}
{"id": "folio_train_339", "nl": "Some snake has fur.", "fol": "exists x.(IsSnake(x) & HasFur(x))", "prediction": ["exists x.(Snake(x) & HasFur(x))", "exists x.(Snake(x) & Fur(x))", "exists x y.(Snake(x) & Fur(y) & Has(x,y))", "exists x.(Snake(x) & HatesFur(x))", "exists x y.(Snake(x) & Fur(y))", "exists x.(Snake(x) & HasFur(x))", "(exists x.(Snake(x) & HasFur(x)))", "exists x.(Snake(x) & Has(x,fur))", "exists x.(Snake(x) & HasFire(x))", "all x.(Snake(x) -> HasFur(x))", "exists x.(Shadow(x) & HasFur(x))", "exist x.(Snake(x) & HasFur(x))", "exists x y.(Snake(x) & Fur(y) & Hate(x,y))", "exists x.(Shark(x) & HasFur(x))", "exists x y.(Snake(x) & Fur(y) & Hates(x,y))", "exists x.(Spinal(x) & HasFur(x))"]}
{"id": "folio_train_340", "nl": "All buildings in New Haven are low. ", "fol": "all x.(IsLocatedIn(Newhaven,x) -> -IsHighBuilding(x))", "prediction": ["all x.(Building(x) -> Low(x))", "all x.((Building(x) & NewHunt(x)) -> Low(x))", "all x.((Building(x) & NewHaven(x)) -> Low(x))", "all x.(NewHavenBuilding(x) -> Low(x))", "all x.(NewHunt(x) -> LowBuilding(x))", "all x.((Building(x) & InNewHunt(x)) -> Low(x))", "all x.((Building(x) & Low(x)) -> NewHunt(x))", "all x y.((Building(x) & NewHunt(y)) -> Low(x))", "all x.((Building(x) & NewHann(x)) -> Low(x))", "all x.((Building(x) & InNewHaven(x)) -> Low(x))", "all x y.((Building(x) & NewHunt(y)) -> Low(x,y))", "all x.((Building(x) & Low(x)) -> NewHaven(x))", "all x.(NewHunt(x) -> Low(x))", "all x y.((Building(x) & NewHunt(y)) -> Low(y))", "all x.(NewHaven(x) -> LowBuilding(x))", "all x y.((Building(x) & NewHaven(y)) -> Low(x))"]}
{"id": "folio_train_341", "nl": "All buildings managed by the Yale Housing are located in New Haven. ", "fol": "all x.(ManagedByYaleHousing(x) -> IsLocatedIn(Newhaven,x))", "prediction": ["all x.((Building(x) & ManagedByYaleHousing(x)) -> NewHanover(x))", "all x.((Building(x) & ManagedByYaleHousing(x)) -> NewHunt(x))", "all x.((Building(x) & ManagedByYaleHousing(x)) -> NewHaven(x))", "all x.((Building(x) & ManagedByYaleHousing(x)) -> LocatedInNewHanover(x))", "all x y.((Building(x) & YaleHousing(y)) -> LocatedInNewHanover(x,y))", "all x.((Building(x) & ManagedByYaleHousing(x)) -> LocatedInNewHunt(x))", "all x.((Building(x) & ManagedByY YaleHousing(x)) -> NewHanover(x))", "all x.((Building(x) & ManagedByYaleHousing(x)) -> LocatedInNewHaven(x))", "all x.((Building(x) & ManagedByY YaleHousing(x)) -> LocatedInNewHanover(x))", "all x.((Building(x) & ManagedByY YaleHousing(x)) -> NewHaven(x))", "all x.((Building(x) & ManagedByY YaleHousing(x)) -> NewHunt(x))", "all x y.((Building(x) & YaleHousing(y)) -> LocatedInNewHaven(x,y))", "all x y.((Building(x) & YaleHousing(y)) -> LocatedInNewHunt(x,y))", "all x y.((Building(x) & YaleHousing(y)) -> LocatedIn(x,y))", "all x y.((Building(x) & YaleHousing(y) & ManagedBy(x,y)) -> LocatedInNewHanover(x))", "all x.((Building(x) & ManagedByYaleHousing(x)) -> LocatedInNew Haven(x))"]}
{"id": "folio_train_342", "nl": "All buildings in Manhattans are high. ", "fol": "all x.(IsLocatedIn(Manhattans,x) -> IsHighBuilding(x))", "prediction": ["all x.((Building(x) & InMetropolitan(x)) -> High(x))", "all x.((Building(x) & Manhattan(x)) -> High(x))", "all x.((Building(x) & InMidtown(x)) -> High(x))", "all x.((Building(x) & High(x)) -> Manhattan(x))", "all x.((Building(x) & InMetropolis(x)) -> High(x))", "all x.((Building(x) & InMilton(x)) -> High(x))", "all x.((Building(x) & InMondon(x)) -> High(x))", "all x.(Building(x) -> High(x))", "all x y.((Building(x) & Manhattan(y)) -> High(x,y))", "all x.((Building(x) & InMiami(x)) -> High(x))", "all x.((Building(x) & High(x)) -> ManhattanBuilding(x))", "all x.((Building(x) & InMennon(x)) -> High(x))", "all x.((Building(x) & inMetropolitan(x)) -> High(x))", "all x.((Building(x) & InMendonia(x)) -> High(x))", "all x.(MetropolitanBuilding(x) -> High(x))", "all x y.((Building(x) & Manhattan(y)) -> High(x))"]}
{"id": "folio_train_343", "nl": "All buildings owned by Bloomberg are located in Manhattans. ", "fol": "all x.(OwnedByBloomberg(x) -> IsLocatedIn(Manhattans,x))", "prediction": ["all x y.((Building(x) & Bloomberg(y)) -> LocatedIn(x,y))", "all x.((Building(x) & OwnedByBanana(x)) -> Manhattan(x))", "all x.((Building(x) & OwnedByBanana(x)) -> LocatedInMetropolitans(x))", "all x y.((Building(x) & OwnedByBanana(x) & Manhattan(y)) -> LocatedIn(x,y))", "all x.((Building(x) & OwnedByBanana(x)) -> Manhattans(x))", "all x.((Building(x) & OwnedByBanana(x)) -> LocatedInMiamis(x))", "all x.((Building(x) & OwnedByBanana(x)) -> LocatedInMidtowns(x))", "all x.((Building(x) & OwnedByBanana(x)) -> LocatedIn(x,Manhattan))", "all x.((Building(x) & OwnedByBanana(x)) -> LocatedInMidtown(x))", "all x.((Building(x) & OwnedByBananas(x)) -> LocatedInMetropolitans(x))", "all x.((Building(x) & OwnedByBanana(x)) -> LocatedInMondones(x))", "all x.((Building(x) & OwnedByBananas(x)) -> LocatedInMidtowns(x))", "all x.((Building(x) & OwnedByBananas(x)) -> Manhattan(x))", "all x.((Building(x) & OwnedByBanana(x)) -> LocatedInMondons(x))", "all x.((Building(x) & OwnedByBananas(x)) -> LocatedInMiamis(x))", "all x.((Building(x) & OwnedByBanana(x)) -> LocatedInMiltons(x))"]}
{"id": "folio_train_344", "nl": "All buildings with the Bloomberg logo are owned by Bloomberg. ", "fol": "all x.(HasBloombergLogo(x) -> OwnedByBloomberg(x))", "prediction": ["all x.((Building(x) & BloombergLogo(x)) -> OwnedByBananas(x))", "all x.((Building(x) & HasBilliamsLogo(x)) -> OwnedByBilliams(x))", "all x.((Building(x) & HasBananasLogo(x)) -> OwnedByBananas(x))", "all x.((Building(x) & BloombergLogo(x)) -> OwnedByBanana.", "all x.((Building(x) & BloombergLogo(x)) -> OwnedByBirmingham(x))", "all x.((Building(x) & BloombergLogo(x)) -> OwnedByBanana(x))", "all x.((Building(x) & HasBurnaroLogo(x)) -> OwnedByBurnaro(x))", "all x.((Building(x) & BloombergLogo(x)) -> OwnedByBenjamin(x))", "all x.((Building(x) & BloombergLogo(x)) -> OwnedByBianca(x))", "all x.((Building(x) & BloombergLogo(x)) -> OwnedByBanana.(x))", "all x.((Building(x) & BloombergLogo(x)) -> OwnedByBird(x))", "all x.((Building(x) & BloombergLogo(x)) -> OwnedByBilliams(x))", "all x.((Building(x) & BloombergLogo(x)) -> OwnedByBloomberg(x))", "all x y.((Building(x) & BloombergLogo(y)) -> OwnedBy(x,y))", "all x.((Building(x) & BloombergLogo(x)) -> OwnedByBananas.", "all x.((Building(x) & BloombergLogo(x)) -> OwnedByBananas.(x))"]}
{"id": "folio_train_345", "nl": "Tower A is managed by the Yale Housing.", "fol": "ManagedByYaleHousing(TowerA)", "prediction": ["all x y.((TowerA(x) & YaleHousing(y)) -> ManagedBy(x,y))", "all x.(TowerA(x) -> ManagedByYaleHousing(x))", "All x.(TowerA(x) -> ManagedByYaleHousing(x))", "all x.(TurbineA(x) -> ManagedByYaleHousing(x))", "All x y.((TowerA(x) & YaleHousing(y)) -> ManagedBy(x,y))", "all x y.((Tower(x) & YaleHousing(y)) -> ManagedBy(x,y))", "All x.(TurbineA(x) -> ManagedByYaleHousing(x))", "all x y z.((TowerA(x) & YaleHousing(y) & Housing(z)) -> ManagedBy(x,y,z))", "all x.((TowerA(x) & YaleHousing(x)) -> ManagedBy(x,y))", "all x.((TowerA(x) & YaleHousing(y)) -> ManagedBy(x,y))", "All x y.((Tower(x) & YaleHousing(y)) -> ManagedBy(x,y))", "all x y z.((TowerA(x) & YaleHousing(y) & YaleHousing(z)) -> ManagedBy(x,y,z))", "all x y z.((TowerA(x) & YaleHousing(y) & Housing(z)) -> ManagedBy(x,y))", "(ManagedByYaleHousing(TowerA) & YaleHousing(TowerA))", "all x.(TowerA(x) -> ManagedByYamaHousing(x))", "All x.(TowerA(x) -> ManagedByYamaHousing(x))"]}
{"id": "folio_train_346", "nl": "Tower B is with the Bloomberg logo.", "fol": "HasBloombergLogo(TowerB)", "prediction": ["all x y.((TowerB(x) & BloombergLogo(y)) -> With(x,y))", "all x.(TowerB(x) -> BloombergLogo(x))", "all x.(TowerB(x) -> HasBananasLogo(x))", "all x.(TowerB(x) -> WithBananasLogo(x))", "All x.(TowerB(x) -> BloombergLogo(x))", "All x.(TowerB(x) -> HasBananasLogo(x))", "all x y.((TowerB(x) & BloombergLogo(y)) -> Has(x,y))", "All x.(TowerB(x) -> WithBananasLogo(x))", "all x y.((TowerB) & BloombergLogo(y)) -> With(x,y))", "all x.((TowerB) & BloombergLogo(x)) -> With(x,y))", "all x.((TowerB(x) & BloombergLogo(x)) -> With(x,y))", "All x y.((TowerB) & BloombergLogo(y)) -> With(x,y))", "all x y.((TowerB(x) & BloombergLogo(y)) -> IsWith(x,y))", "all x y.((TowerB) & BloombergLogo(y)) -> Has(x,y))", "all x.((TowerB(x) & BloombergLogo(x)) -> Has(x,y))", "all x.((TowerB) & BloombergLogo(x)) -> Has(x,y))"]}
{"id": "folio_train_347", "nl": "Tower A is low.", "fol": "-IsHighBuilding(TowerA)", "prediction": ["All x.(TowerA(x) -> Low(x))", "all x.(TowerA(x) -> Low(x))", "All x.(TurbineA(x) -> Low(x))", "All x.(TurmA(x) -> Low(x))", "all x.(TurbineA(x) -> Low(x))", "All x.((TowerA(x) & Low(x)) -> Low(x))", "All x.(Turbine(x) -> Low(x))", "All x.(TurnorA(x) -> Low(x))", "All x.(Tower(x) -> Low(x))", "All x.((TowerA) & Low(x)) -> Low(x))", "All x.((TowerA(x) & Low(x)) -> High(x))", "All x.((TowerA(x) & Low(x)) -> -Low(x))", "(Low(TowerA) -> Low(TowerA))", "All x.((TowerA(x) & Low(x)) -> TowerA(x))", "(LowTower(TowerA) -> Low(TowerA))", "(LowTower(TowerA) -> Low(TowerA))"]}
{"id": "folio_train_348", "nl": "Tower B is not located in Manhattans.", "fol": "-IsLocatedIn(Manhattans,TowerB)", "prediction": ["all x.(TowerB(x) -> -LocatedInMetropolitans(x))", "All x.(TowerB(x) -> -LocatedInMetropolitans(x))", "all x.(TowerB(x) -> -LocatedInMetropolitans(x))", "all x.(TowerB(x) -> -LocatedInMennons(x))", "all x.(TowerB(x) -> -LocatedInMidtowns(x))", "all x.(TowerB(x) -> -Metropolitan(x))", "all x.(TowerB(x) -> -LocatedInMidtowns(x))", "All x.(TowerB(x) -> -LocatedInMennons(x))", "All x.(TowerB(x) -> -LocatedInMidtowns(x))", "all x.(TowerB(x) -> -LocatedInMennons(x))", "All x.(TowerB(x) -> -Metropolitan(x))", "all x.(TowerB(x) -> -LocatedIn(x,Manhattan))", "all x.(TowerB(x) -> -LocatedInMiltons(x))", "All x.(TowerB(x) -> -LocatedIn(x,Manhattan))", "all x.(TowerB(x) -> -LocatedInMidtown(x))", "all x.(TurbineB(x) -> -LocatedInMennons(x))"]}
{"id": "folio_train_349", "nl": "Tower B is located in New Haven.", "fol": "IsLocatedIn(Newhaven,TowerB)", "prediction": ["TowerB is located in New Haven.", "All x.(TowerB(x) -> NewHaven(x))", "All x.(TowerB(x) -> NewHunt(x))", "All x.(TowerB(x) -> LocatedInNewHaven(x))", "all x.(TowerB(x) -> NewHaven(x))", "All x.(TowerB(x) -> LocatedInNewHunt(x))", "All x.(TowerB(x) -> NewHann(x))", "all x.(TowerB(x) -> NewHunt(x))", "All x.(TurbineB(x) -> NewHaven(x))", "Tower B is located in New Haven.", "All x.(TowerB(x) -> LocatedInNewHann(x))", "All x.(TowerB(x) -> LocatedInNewHanaway(x))", "All x.(TowerB(x) -> NewHandon(x))", "All x.(TowerB(x) -> LocatedIn(x,NewHaven))", "All x.(TurbineB(x) -> NewHunt(x))", "(Location(TowerB) & NewHaven(TowerB))"]}
{"id": "folio_train_350", "nl": "No cold-blooded animals are birds.", "fol": "all x.(IsColdBlooded(x) -> -IsBird(x))", "prediction": ["-exists x.(ColdBloodedAnimal(x) & Bird(x))", "-exists x.(ColdBlooded(x) & Bird(x))", "-exists x.(ColdBlooded(x) & -Bird(x))", "-exists x.(ColdBloodedAnimal(x) & -Bird(x))", "all x.(ColdBloodedAnimal(x) -> -Bird(x))", "all x.((ColdBloodedAnimal(x) & -Bird(x)) -> Bird(x))", "all x.(ColdBloodedAnimal(x) -> Bird(x))", "all x.((ColdBlooded(x) & -Bird(x)) -> Bird(x))", "-exists x.(ColdBlooded(x) & Animal(x) & Bird(x))", "all x.(ColdBlooded(x) -> -Bird(x))", "(-exists x.(ColdBloodedAnimal(x) & Bird(x)))", "-exists x.(ColdBlooded(x) & -IsBird(x))", "-all x.(ColdBloodedAnimal(x) -> Bird(x))", "-(ColdBloodedAnimal(x) & -Bird(x))", "-(ColdBloodedAnimal(x) & Bird(x))", "-exists x.(ColdBlooded(x) & Animal(x) & -Bird(x))"]}
{"id": "folio_train_351", "nl": "All reptiles are cold-blooded.", "fol": "all x.(IsReptile(x) -> IsColdBlooded(x))", "prediction": ["all x.(Reptile(x) -> ColdBlooded(x))", "all x y.((Reptile(x) & ColdBlooded(y)) -> ColdBlooded(x))", "all x.((Reptile(x) & ColdBlooded(x)) -> ColdBlooded(x))", "all x y.((Reptile(x) & ColdBlooded(x)) -> ColdBlooded(x))", "all x.(Reptile(x) -> ColdBlooded(x))", "all x y.((Reptile(x) & ColdBlooded(x)) -> ColdBlooded(y))", "all x y.((Reptile(x) & ColdBlooded(y)) -> ColdBlooded(x,y))", "all x.(Rptile(x) -> ColdBlooded(x))", "(all x.(Reptile(x) -> ColdBlooded(x)))", "all x.(Roptile(x) -> ColdBlooded(x))", "all x.(Riptile(x) -> ColdBlooded(x))", "all x y.((Reptile(x) & ColdBlooded(x)) -> ColdBlooded(x,y))", "all x y.((Reptile(x) & ColdBlooded(x,y)) -> ColdBlooded(x))", "all x y.((Reptile(x) & ColdBlooded(y)) -> ColdBlooded(y))", "All x.(Reptile(x) -> ColdBlooded(x))", "all x y.((Reptile(x) & ColdBlooded(x,y)) -> ColdBlooded(x,y))"]}
{"id": "folio_train_352", "nl": "Either an animal is a bird or it eats other animals.", "fol": "all x.(IsBird(x) | EatsOtherAnimals(x))", "prediction": ["all x.(Animal(x) -> (Bird(x) | EatsAnimals(x)))", "all x.(Animal(x) -> (Bird(x) | EatsOtherAnimals(x)))", "exists x.(Animal(x) & (Bird(x) | EatsAnimals(x)))", "exists x.(Animal(x) & (Bird(x) | EatsOtherAnimals(x)))", "all x.((Animal(x) & Bird(x)) | EatsOtherAnimals(x))", "all x.((Animal(x) & Bird(x)) | EatsAnimals(x))", "(exists x.(Animal(x) & Bird(x)) | exists y.(Animal(y) & Eats(y,x))))", "all x y.((Animal(x) & Animal(y)) -> (Bird(x) | Eats(x,y)))", "all x y.((Animal(x) & Animal(y)) -> (Bird(x) | EatsAnimals(x,y)))", "all x y.((Animal(x) & Animal(y)) -> (Bird(x) | EatsAnimals(x)))", "all x.(Animal(x) -> ((Bird(x) | EatsAnimals(x))))", "all x.(Animal(x) -> ((Bird(x) | EatsOtherAnimals(x))))", "all x y.((Animal(x) & Animal(y)) -> (Bird(x) | EatsOtherAnimals(x)))", "(exists x.(Animal(x) & Bird(x)) | exists y.(Animal(y) & Eats(y))))", "all x.(Animal(x) -> (IsBird(x) | EatsOtherAnimals(x)))", "all x.(Animal(x) -> (Bird(x) | EatsOtherAnimals(x)))"]}
{"id": "folio_train_353", "nl": "If an animal eats other animals, then it is a carnivore.", "fol": "all x.(EatsOtherAnimals(x) -> IsCarnivore(x))", "prediction": ["all x.((Animal(x) & EatsOtherAnimals(x)) -> Carnivore(x))", "all x.((Animal(x) & EatsAnimals(x)) -> Carnivore(x))", "all x y.((Animal(x) & Animal(y) & Eats(x,y)) -> Carnivore(x))", "all x y z.((Animal(x) & Animal(y) & Animal(z) & Eats(x,y)) -> Carnivore(x))", "all x y z.((Animal(x) & Animal(y) & Animal(z) & Eats(x,y,z)) -> Carnivore(x))", "all x.((Animal(x) & EatsOtherAnimals(x)) -> Carnivore(x))", "all x.(EatsOtherAnimals(x) -> Carnivore(x))", "all x.((Animal(x) & EatsOthers(x)) -> Carnivore(x))", "all x.(EatsAnimals(x) -> Carnivore(x))", "all x.((Animal(x) & EatsAnimals(x)) -> Carnivore(x))", "all x.((Animal(x) & EatsAnotherAnimal(x)) -> Carnivore(x))", "all x y z.((Animal(x) & Animal(y) & Animal(z) & Eats(x,y) & Eats(x,z)) -> Carnivore(x))", "all x y z.((Animal(x) & Animal(y) & Animal(z) & Eats(x,z)) -> Carnivore(x))", "all x y.((Animal(x) & Animal(y)) -> Carnivore(x))", "all x.((Animal(x) & EatsAnimal(x)) -> Carnivore(x))", "all x y.((Animal(x) & Animal(y) & EatsOtherAnimals(x,y)) -> Carnivore(x))"]}
{"id": "folio_train_354", "nl": "Ron is neither a cold-blooded animal nor a carnivore.", "fol": "(-IsColdBlooded(Ron) & -IsCarnivore(Ron))", "prediction": ["all x.(Ron(x) -> (-ColdBlooded(x) & -Carnivore(x)))", "all x.((Ron(x) & -ColdBlooded(x) & -Carnivore(x)) -> -Carnivore(x))", "all x.(Ron(x) -> (-ColdBlooded(x) | Carnivore(x)))", "all x.(Ron(x) -> (-ColdBloodedAnimal(x) & -Carnivore(x)))", "all x.((Ron(x) & -ColdBlooded(x) & -Carnivore(x)) -> -(ColdBlooded(x) & Carnivore(x)))", "all x.((Ron(x) & -ColdBlooded(x) & -Carnivore(x)) -> -ColdBlooded(x))", "all x.(Ron(x) -> (-ColdBlooded(x) & -Carnivore(x)))", "all x.((Ron(x) & -ColdBlooded(x) & -Carnivore(x)) -> -(Carnivore(x) | ColdBlooded(x))))", "all x.(Ron(x) -> -(ColdBlooded(x) | Carnivore(x)))", "-(ColdBlooded(Ron) & -Carnivore(Ron))", "all x.((Ron(x) & -ColdBlooded(x) & -Carnivore(x)) -> -(ColdBlooded(x) & -Carnivore(x)))", "(-ColdBlooded(Ron) & -Carnivore(Ron))", "all x.((Ron(x) & -ColdBlooded(x) & -Carnivore(x)) -> -(Carnivore(x) | ColdBlooded(x)))", "all x.((Ron(x) & -ColdBlooded(x) & -Carnivore(x)) -> -(ColdBlooded(x) | Carnivore(x)))", "-(ColdBloodedAnimal(Ron) & -Carnivore(Ron))", "all x.((Ron(x) & -ColdBlooded(x) & -Carnivore(x)) -> -(Carnivore(x) & -Carnivore(x)))"]}
{"id": "folio_train_355", "nl": "Henry is neither a carnivore nor a lizard.", "fol": "(-IsCarnivore(Henry) & -IsLizard(Henry))", "prediction": ["all x.(Henry(x) -> (-Carnivore(x) & -Lizard(x)))", "(-Carnivore(Henry) & -Lizard(Henry))", "all x.(Henry(x) -> (-Carnivore(x) | Lizard(x)))", "all x.((Henry(x) & -Carnivore(x) & -Lizard(x)) -> -Carnivore(x))", "all x.((Henry(x) & -Carnivore(x) & -Lizard(x)) -> -Lizard(x))", "all x.((Henry(x) & -Carnivore(x) & -Lizard(x)) -> -Carnivore(x) & -Lizard(x))", "all x.((Henry(x) & -Carnivore(x) & -Lizard(x)) -> -(Carnivore(x) & Lizard(x)))", "all x.((Henry(x) & -Carnivore(x) & -Lizard(x)) -> -Carnivore(x) & Lizard(x))", "all x.(Henry(x) -> (-Carnivore(x) & -Lizard(x)))", "all x.((Henry(x) & -Carnivore(x) & -Lizard(x)) -> -(Carnivore(x) | Lizard(x)))", "-(Henry(Henry) & Carnivore(Henry) & -Lizard(Henry))", "all x.((Henry(x) & -Carnivore(x) & -Lizard(x)) -> (-Carnivore(x) & -Lizard(x)))", "(-Carnivore(Henry) | Lizard(Henry))", "all x.((Henry(x) & -Carnivore(x) & -Lizard(x)) -> -(Carnivore(x) | Lizard(x))))", "-(Carnivore(Henry) | Lizard(Henry))", "(-(Carnivore(Henry) & -Lizard(Henry)) -> -Carnivore(Henry))"]}
{"id": "folio_train_356", "nl": "Ron is a lizard.", "fol": "IsLizard(Ron)", "prediction": ["all x.(Ron(x) -> Lizard(x))", "all x.(Lizard(x) -> Ron(x))", "Ron is Lizard(Ron)", "all x.(Lizard(x) -> Ron(x))", "all x.(Lizard(x) -> (Ron(x) & Lizard(x)))", "All x.(Ron(x) -> Lizard(x))", "(Lizard(Ron) & LivesIn(Ron,Lizard))", "(Lizard(Ron) -> Lizard(Ron))", "exists x.(Ron(x) & Lizard(x))", "all x.((Ron(x) & Lizard(x)) -> Lizard(x))", "(Lizard(Ron) & LivesIn(Ron))", "(Lizard(Ron) & Lizard(Ron))", "(Lizard(Ron) -> Lizard(Ron))", "all x.(Ron(x) -> Lizard(x))", "all x.((Ron(x) & Lizard(x)) -> LivesIn(x))", "all x.(Lizard(x) -> (Ron) & Lizard(x)))"]}
{"id": "folio_train_357", "nl": "Either Henry is a reptile or Ron eats other animals.", "fol": "(IsReptile(Henry) | EatsOtherAnimals(Ron))", "prediction": ["(exists x.(Henry(x) & Reptile(x)) | exists y.(Ron(y) & Animal(y))))", "(all x.(Henry(x) -> Reptile(x)) | (Ron(x) -> EatsAnimals(x))))", "all x y.((Henry(x) & Ron(y)) -> (Reptile(x) | EatsAnimals(y)))", "(exists x.(Henry(x) & Reptile(x)) | exists y.(Ron(y) & EatsAnimals(y))))", "(all x.(Henry(x) -> Reptile(x)) | (Ron(x) -> EatsOtherAnimals(x))))", "(all x.(Henry(x) -> Reptile(x)) | all y.(Ron(y) -> EatsAnimals(y))))", "(exists x.(Henry(x) & Reptile(x))) | exists y.(Ron(y) & Animal(y))))", "all x y.((Henry(x) & Ron(y)) -> (Reptile(x) | EatsOtherAnimals(y)))", "(exists x.(Henry(x) & Reptile(x)) | exists y.(Ron(y) & Eats(y,x))))", "((Henry(Henry) & Reptile(Henry)) | (Ron(Henry) & Animal(Henry))))", "(all x y.((Henry(x) & Reptile(x)) | ((Ron(y) & Animal(y)))))", "((Henry(Henry) & Reptile(Henry)) | (Ron(Ron) & Animal(Henry))))", "(exists x.(Henry(x) & Reptile(x))) | exists y.(Ron(y) & EatsAnimals(y))))", "((Henry(Henry) & Reptile(Henry)) | (Ron(Henry) & Animal(Ron))))", "(exists x.(Reptile(x) & Henry(x)) | exists y.(Animal(y) & Ron(y))))", "(exists x.(Henry(x) & Reptile(x)) | exists y.(Ron(y) & Eats(y))))"]}
{"id": "folio_train_358", "nl": "It is not true that Ron is a reptile or that Henry is cold-blooded.", "fol": "-(IsReptile(Ron) | IsColdBlooded(Henry))", "prediction": ["(-(Ron(Ron) & Reptile(Ron)) | (Henry(Henry) & ColdBlooded(Henry))))", "all x.((Ron(x) & -Reptile(x) & -ColdBlooded(x)) -> -Reptile(x))", "(-exists x.(Ron(x) & Reptile(x)) & -exists y.(Henry(y) & ColdBlooded(y))))", "(-(Reptile(Ron) & ColdBlooded(Henry)) -> -Reptile(Ron))", "(-(Reptile(Ron) & ColdBlooded(Henry)) -> -Reptile(Ron)) & -(Reptile(Henry) & ColdBlooded(Henry)))", "(-(Reptile(Ron) & ColdBlooded(Henry)) -> -Reptile(Ron)) & -(Reptile(Henry) & ColdBlooded(Henry)) -> ColdBlooded(Henry)))", "all x.((Ron(x) & -Reptile(x)) | (-Reptile(x) & ColdBlooded(x))))", "(-(Reptile(Ron) & ColdBlooded(Henry)) | (Reptile(Ron) & ColdBlooded(Henry))))", "(-(Reptile(Ron) & ColdBlooded(Henry)) | (-Reptile(Ron) & ColdBlooded(Henry))))", "(-(Reptile(Ron) | ColdBlooded(Henry)))", "(-(Reptile(Ron) & ColdBlooded(Henry)) -> -Reptile(Ron)) & -(Reptile(Henry) & ColdBlooded(Henry)) -> -Reptile(Ron)))", "(-(Reptile(Ron) & ColdBlooded(Henry)) -> -Reptile(Ron) & ColdBlooded(Henry)))", "(-(Reptile(Ron) & ColdBlooded(Henry)) -> -Reptile(Ron)) & -(Reptile(Henry) & ColdBlooded(Henry)) -> -Reptile(Ron,Henry)))", "(-(Reptile(Ron) & ColdBlooded(Henry)) -> -Reptile(Ron)) & -(Reptile(Henry) & ColdBlooded(Henry)) -> -Reptile(Ron))", "(-(Reptile(Ron) & ColdBlooded(Henry)) -> -Reptile(Ron)) & -(Reptile(Ron) & ColdBlooded(Henry)) -> ColdBlooded(Henry)))", "(-(Reptile(Ron) | ColdBlooded(Ron)))"]}
{"id": "folio_train_359", "nl": "Ambiortus is a prehistoric bird genus.", "fol": "(IsPrehistoric(Ambiortus) & IsBirdGenus(Ambiortus))", "prediction": ["all x.(Ambiortus(x) -> PrehistoricBirdGenus(x))", "all x.(Ambiortus(x) -> (PrehistoricBirdGenus(x) & PrehistoricBirdGenus(x)))", "all x.(Ambiortus(x) -> PrehistoricBirdGenus(x))", "all x.(Ambiortus(x) -> (PrehistoricBirdGenus(x) & PrehistoricBirdGenus(x)))", "all x.((Ambiortus(x) & PrehistoricBirdGenus(x)) -> PrehistoricBirdGenus(x))", "All x.(Ambiortus(x) -> PrehistoricBirdGenus(x))", "all x.(Ambiortus(x) -> (PrehistoricBirdGenus(x) & PrehistoricBirdGenus(x) & PrehistoricBirdGenus(x)))", "all x.(Ambiortus(x) -> BirdGenus(x))", "all x y.((Ambiortus(x) & BirdGenus(y)) -> Prehistoric(x,y))", "(PrehistoricBirdGenus(ambiortus) & PrehistoricBirdGenus(ambiortus))", "all x.(Ambiortus(x) -> (PrehistoricBirdGenus(x) & PrehistoricBirdGenus(x) & PrehistoricBirdGenus(x)))", "all x.(Ambiortus(x) -> (BirdGenus(x) & Prehistoric(x)))", "(PrehistoricBirdGenus(Ambiortus) & PrehistoricBirdGenus(Ambiortus))", "all x.(Ambiortus(x) -> (PrehistoricBirdGenus(x) & BirdGenus(x)))", "all x y.((Ambiortus(x) & BirdGenus(y)) -> Prehistoric(x))", "all x.((BirdGenus(x) & Prehistoric(x)) -> Ambiortus(x))"]}
{"id": "folio_train_360", "nl": "Ambiorus Dementjevi is the only known species of Ambiortus.", "fol": "all x.(IsSpeciesOf(x,Ambiortus) -> AmbiorusDementjeviSpecies(x))", "prediction": ["all x.((Ambiorus(x) & Dementjevi(x)) -> Ambiortus(x))", "all x.(AmbiorusDementjevi(x) -> (LimitedSpeciesOfAmbiortus(x) & KnownSpeciesOfAmbiortus(x)))", "All x.((Ambiorus(x) & Dementjevi(x)) -> Ambiortus(x))", "all x.((AmbiorusDementjevi(x) & KnownSpecies(x)) -> Ambiortus(x))", "all x.((Ambiorus(x) & Dementjevi(x)) -> OnlyKnownSpeciesOfAmbiortus(x))", "all x.(AmbiorusDementjevi(x) -> OnlyKnownSpeciesOfAmbiortus(x))", "all x.(Ambiorus(x) -> Dementjevi(x))", "all x.((Ambiorus(x) & Dementjevi(x)) -> AmbiortusSpecies(x))", "all x.(AmbiorusDementjevi(x) -> (Ambiortus(x) & OnlyKnownSpecies(x)))", "all x.(AmbiorusDementjevi(x) -> (LimitedSpeciesOfAmbiortus(x) & OnlyKnownSpeciesOfAmbiortus(x)))", "All x.(Ambiorus(x) -> Dementjevi(x))", "(All x.(Ambiorus(x) & Dementjevi(x)) -> Ambiortus(x))", "all x.(AmbiorusDementjevi(x) -> (Ambiortus(x) & KnownSpecies(x)))", "all x.(AmbiorusDementjevi(x) -> (LimitedSpecies(x) & Ambiortus(x)))", "All x.(AmbiorusDementjevi(x) -> Ambiortus(x))", "all x.(AmbiorusDementjevi(x) -> Ambiortus(x))"]}
{"id": "folio_train_361", "nl": "The Mongol region was where Ambiorus Dementjevi lived.", "fol": "all x.(AmbiorusDementjeviSpecies(x) -> LivedInRegion(x,Mongolregion))", "prediction": ["All x y.((MongolRegion(x) & AmbiorusDementjevi(y)) -> LivedIn(x,y))", "all x y.((MongolRegion(x) & AmbiorusDementjevi(y)) -> LivedIn(x,y))", "all x y.((MongolRegion(x) & AmbiorusDementjevi(y)) -> Lived(x,y))", "All x.(MongolRegion(x) -> AmbiorusDementjevi(x))", "All x y.((MongolRegion(x) & AmbiorusDementjevi(y)) -> Lived(x,y))", "All x y z.((MongolRegion(x) & AmbiorusDementjevi(y) & MongolRegion(z)) -> LivedIn(x,y,z))", "All x y z.((MongolRegion(x) & AmbiorusDementjevi(y) & MongolRegion(z)) -> Lived(x,y,z))", "all x y z.((MongolRegion(x) & AmbiorusDementjevi(y) & MongolRegion(z)) -> Lived(x,y,z))", "all x.(MongolRegion(x) -> AmbiorusDementjevi(x))", "all x y z.((MongolRegion(x) & AmbiorusDementjevi(y) & MongolRegion(z)) -> LivedIn(x,y,z))", "All x y z.((MongolRegion(x) & AmbiorusDementjevi(y) & MongolRegion(z)) -> Lived(y,z))", "all x y z.((MongolRegion(x) & AmbiorusDementjevi(y) & MongolRegion(z)) -> Lived(y,z))", "All x y z.((MongolRegion(x) & AmbiorusDementjevi(y) & MongolRegion(z)) -> LivedIn(y,z))", "all x.((MongolRegion(x) & AmbiorusDementjevi(x)) -> Lived(x))", "all x y z.((MongolRegion(x) & AmbiorusDementjevi(y) & MongolRegion(z)) -> LivedIn(y,z))", "All x.(MongolRegion(x) -> LivedAmbiorusDementjevi(x))"]}
{"id": "folio_train_362", "nl": "Yevgeny Kurochkin was the discoverer of Ambiortus.", "fol": "DiscovererOf(Yevgenykurochkin,Ambiortus)", "prediction": ["Yevgeny Kurochkin was the discoverer of Ambiortus.", "Yevgeny Kurochkin was the DiscovererOfAmbiortus.", "Yevgeny Kurochkin was DiscovererOfAmbiortus.", "Yevgeny Kurochkin (DiscovererOfAmbiortus)", "Yevgeny Kurochkin was discoverer of Ambiortus.", "Yevgeny Kurochkin was discovererOfAmbiortus.", "Yevgeny Kurochkin - DiscovererOfAmbiortus.", "Yevgeny Kurochkin - DiscovererOfAmbiortus(x))", "Yevgeny Kurochkin (DestinatorOfAmbiortus))", "Yevgeny Kurochkin was the DiscovererOfAmbiortus(x))", "Yevgeny Kurochkin (DiscovererOfAmbiortus))", "Yevgeny Kurochkin ((DiscovererOfAmbiortus)))", "Yevgeny Kurochkin (ErfinderOfAmbiortus))", "Yevgeny Kurochkin (DestinatorOfAmbiortus)", "Yevgeny Kurochkin was DiscovererOfAmbiortus(x))", "Yevgeny Kurochkin (discovererOfAmbiortus))"]}
{"id": "folio_train_363", "nl": "Yevgeny Kurochkin discovered a new bird genus.", "fol": "exists x.(IsBirdGenus(x) & DiscovererOf(Yevgenykurochkin,x))", "prediction": ["Yevgeny Kurochkin discovered a new birdgenus.", "Yevgeny Kurochkin discovered new birdgenus.", "Yevgeny Kurochkin discovered a new bird genus.", "Yevgeny Kurochkin discovered a new birdGenus.", "Yevgeny Kurochkin discovered a new BirdGenus.", "Yevgeny Kurochkin discovered a new birdgenus.", "Yevgeny Kurochkin discoveredsNewBirdGenus(x))", "Yevgeny Kurochkin has discovered a new birdgenus.", "Yevgeny Kurochkin (discoveredNewBirdGenus))", "Yevgeny Kurochkin discovereds a new birdgenus.", "Yevgeny Kurochkin, discovered a new birdgenus.", "Yevgeny Kurochkin discoveredNewBirdGenus(x))", "Yevgeny Kurochkin discoveredsNewBirdGenus.", "Yevgeny Kurochkin, discoveredNewBirdGenus(x))", "Yevgeny Kurochkin discovered NewBirdGenus(x))", "Yevgeny Kurochkin discovereds new birdgenus."]}
{"id": "folio_train_364", "nl": "There is a species of Ambiortus that doesn't live in the Mongol region.", "fol": "exists x.(IsSpeciesOf(x,Ambiortus) & -LivedInRegion(x,Mongolregion))", "prediction": ["exists x.(Ambiortus(x) & -LivesInMongolRegion(x))", "exists x.(AmbiortusSpecies(x) & -LivesInMongolRegion(x))", "exists x.(Ambiortus(x) & -LivingInMongolRegion(x))", "exists x.(Ambiortus(x) & -MongolRegion(x))", "exists x.(Ambiortus(x) & -exists y.(MongolRegion(y) & LivesIn(x,y)))", "exists x.(SpeciesOfAmbiortus(x) & -LivesInMongolRegion(x))", "exists x.(Ambiortus(x) & -LivingMongolRegion(x))", "exists x.(Ambiortus(x) & -exists y.(MongolRegion(y) & LivesIn(x,y))))", "exists x.(AmbiortusSpecies(x) & -LivingInMongolRegion(x))", "exists x.((Ambiortus(x) & -MongolRegion(x)) -> -LivesIn(x,MongolRegion))", "exists x.(Ambiortus(x) & -exists y.(MongolRegion(y) & -LivesIn(x,y)))", "exists x.(Ambiortus(x) & -livesInMongolRegion(x))", "exists x.(Ambiortus(x) & -InMongolRegion(x))", "exists x.(AmbiortusSpecies(x) & -MongolRegion(x))", "exists x.(Ambiortus(x) & -HasMongolRegion(x))", "exists x.((Ambiortus(x) & -MongolRegion(x)) -> -LivingIn(x,MongolRegion))"]}
{"id": "folio_train_365", "nl": "Yevgeny Kurochkin lived in the Mongol region.", "fol": "LivedInRegion(Yevgenykurochkin,Mongolregion)", "prediction": ["all x y.((Evgeny Kurochkin(x) & MongolRegion(y)) -> LivedIn(x,y))", "all x.((EvgenyKurochkin(x) & MongolRegion(x)) -> LivedIn(x,y))", "Yevgeny Kurochkin lived in MongolRegion.", "all x.((EvgenyKurochkin(x) & MongolRegion(y)) -> LivedIn(x,y))", "all x.(EvgenyKurochkin(x) -> LivedInMongolRegion(x))", "all x y.((Evgeny Kurochkin(x) & MongolRegion(y)) -> LivesIn(x,y))", "Yevgeny Kurochkin lebte in MongolRegion.", "Yevgeny Kurochkin lived in the MongolRegion.", "all x.(Kurochkin(x) -> LivedInMongolRegion(x))", "all x.((EvgenyKurochkin(x) & MongolRegion(x)) -> LivedIn(x))", "all x.((EvgenyKurochkin(x) & MongolRegion(x)) -> LivedIn(x,Mongol))", "Yevgeny Kurochkin (LivingInMongolRegion)", "all x.((EvgenyKurochkin(x) & MongolRegion(x)) -> LivesIn(x,y))", "all x.((EvgenyKurochkin(x) & MongolRegion(x)) -> LivedIn(x,MongolRegion))", "all x.((EvgenyKurochkin(x) & MongolRegion(x)) -> LivedIn(x,Y))", "all x y.((Evgeny Kurochkin(x) & MongolRegion(y)) -> Lived(x,y))"]}
{"id": "folio_train_366", "nl": "All species of Ambiortus live in the Mongol region.", "fol": "all x.(IsSpeciesOf(x,Ambiortus) -> LivedInRegion(x,Mongolregion))", "prediction": ["all x.(Ambiortus(x) -> LivesInMongolRegion(x))", "all x.(AmbiortusSpecies(x) -> LivesInMongolRegion(x))", "all x y.((Ambiortus(x) & MongolRegion(y)) -> LivesIn(x,y))", "all x y.((AmbiortusSpecies(x) & MongolRegion(y)) -> LivesIn(x,y))", "all x.(Ambiortus(x) -> exists y.(MongolRegion(y) & LivesIn(x,y)))", "all x.(Ambiortus(x) -> LivesInMongolRegion(x))", "all x.(Ambiortus(x) -> exists y.(MongolRegion(y) & LivesIn(x,y))))", "all x.((Ambiortus(x) & MongolRegion(x)) -> LivesIn(x,y))", "all x.((AmbiortusSpecies(x) & MongolRegion(x)) -> LivesIn(x,y))", "all x.(Ambiortus(x) -> LivesInMongolRegion(x))", "all x.((Ambiortus(x) & MongolRegion(x)) -> LivesIn(x))", "all x.((AmbiortusSpecies(x) & MongolRegion(x)) -> LivesIn(x,Mongol))", "all x.(Ambiortus(x) -> LivingInMongolRegion(x))", "all x.((AmbiortusSpecies(x) & MongolRegion(x)) -> LivesIn(x))", "all x.(Ambiortus(x) -> LiveInMongolRegion(x))", "all x.((Ambiortus(x) & MongolRegion(x)) -> LivesIn(x,Mongol))"]}
{"id": "folio_train_367", "nl": "Everyone that uses a football can throw a football.", "fol": "all x.(UsesFootball(x) -> ThrowsFootball(x))", "prediction": ["all x.((UsesFootball(x) & ThrowsFootball(x)) -> CanThrewFootball(x))", "all x.((UsesFootball(x) & ThrowsFootball(x)) -> CanTurn(x))", "all x.((UsesFootball(x) & UsesFootball(x)) -> ThrowsFootball(x))", "all x.((UsesFootball(x) & ThrowsFootball(x)) -> ThrowsFootball(x))", "all x.((UsesFootball(x) & ThrowsFootball(x)) -> CanTwerpFootball(x))", "all x.((UsesFootball(x) & UsesFootball(x)) -> CanThrewFootball(x))", "all x.((UsesFootball(x) & ThrowsFootball(x)) -> CanTurnFootball(x))", "all x.((Uses(x,Football) & Throws(x,Football)) -> CanThrew(x,Football))", "all x.((UsesFootball(x) & ThrowsFootball(x)) -> CanThrew(x))", "all x.((UsesFootball(x) & ThrowsFootball(x)) -> CanTwist(x))", "all x.((UsesFootball(x) & ThrowsFootball(x)) -> CanFly(x))", "all x.((UsesFootball(x) & HasFootball(x)) -> CanThrewFootball(x))", "all x.((UsesFootball(x) & HasFootball(x)) -> ThrowsFootball(x))", "all x.((UsesFootball(x) & ThrowFootball(x)) -> CanThrewFootball(x))", "all x.((UsesFootball(x) & ThrowsFootball(x)) -> CanThrowFootball(x))", "all x.((UsesFootball(x) & ThrowsFootball(x)) -> CanThrew(x,Football))"]}
{"id": "folio_train_368", "nl": "If someone plays football, then they use a football.", "fol": "all x.(PlaysFootball(x) -> UsesFootball(x))", "prediction": ["all x.(PlaysFootball(x) -> UsesFootball(x))", "all x.((PlaysFootball(x) & UsesFootball(x)) -> PlaysFootball(x))", "all x.(Plays(x,Football) -> Uses(x,Football))", "all x.((PlaysFootball(x) & UsesFootball(x)) -> UsesFootball(x))", "all x.((PlaysFootball(x)) -> UsesFootball(x))", "all x y.((PlaysFootball(x) & Football(y)) -> Uses(x,y))", "all x y.((PlaysFootball(x) & Person(y)) -> UsesFootball(y))", "all x.(Plays(x,Football) -> UsesFootball(x))", "all x.(PlaysFootball(x) -> UsedFootball(x))", "all x.(PlaysFu\u00dfball(x) -> UsesFootball(x))", "all x y.((PlaysFootball(x) & Person(y)) -> UsesFootball(x))", "all x y.((Plays(x,y) & Football(y)) -> Uses(x,y))", "all x.((PlaysFootball(x) & Football(x)) -> UsesFootball(x))", "all x.((PlaysFootball(x) & UsesFootball(x)) -> UsedFootball(x))", "exists x.(PlaysFootball(x) & UsesFootball(x))", "all x.(PlaysFootball(x) -> UseFootball(x))"]}
{"id": "folio_train_369", "nl": "Either someone is a football player or a basketball player.", "fol": "all x.(IsBasketballPlayer(x) | PlaysFootball(x))", "prediction": ["exists x.(FootballPlayer(x) | BasketballPlayer(x))", "exists x.(Player(x) & (FootballPlayer(x) | BasketballPlayer(x)))", "all x.((Person(x) & FootballPlayer(x)) | BasketballPlayer(x))", "all x.((FootballPlayer(x) | BasketballPlayer(x)) -> (FootballPlayer(x) | BasketballPlayer(x)))", "all x.(FootballPlayer(x) | BasketballPlayer(x))", "all x.((Person(x) & (FootballPlayer(x) | BasketballPlayer(x))) -> (FootballPlayer(x) | BasketballPlayer(x)))", "all x.((Player(x) & (FootballPlayer(x) | BasketballPlayer(x))) -> (FootballPlayer(x) | BasketballPlayer(x)))", "exists x.(Player(x) & (Football(x) | Basketball(x)))", "all x.((Person(x) & FootballPlayer(x)) | BasketballPlayer(x)) -> (FootballPlayer(x) | BasketballPlayer(x)))", "(exists x.(FootballPlayer(x) | BasketballPlayer(x)))", "all x.((Player(x) & Football(x)) | BasketballPlayer(x))", "all x.((Player(x) & (FootballPlayer(x) | BasketballPlayer(x))) -> Plays(x,FootballPlayer))", "exists x.(Person(x) & (FootballPlayer(x) | BasketballPlayer(x)))", "all x.((Player(x) & (FootballPlayer(x) | BasketballPlayer(x))) -> Player(x))", "all x.((Person(x) & (FootballPlayer(x) | BasketballPlayer(x))) -> Player(x))", "all x.((FootballPlayer(x) | BasketballPlayer(x)) -> Player(x))"]}
{"id": "folio_train_370", "nl": "Every basketball player is tall.", "fol": "all x.(IsBasketballPlayer(x) -> IsTall(x))", "prediction": ["all x.(BasketballPlayer(x) -> Tall(x))", "exists x.(BasketballPlayer(x) & Tall(x))", "all x.exists y.(BasketballPlayer(x) & Tall(y))", "all x y.((BasketballPlayer(x) & Player(y)) -> Tall(x))", "-all x.(BasketballPlayer(x) -> Tall(x))", "all x y.((BasketballPlayer(x) & Player(y)) -> Tall(x,y))", "all x y.((BasketballPlayer(x) & BasketballPlayer(y)) -> Tall(x))", "all x.exists y.(BasketballPlayer(x) & BasketballPlayer(y) & Tall(x,y))", "all x y.((BasketballPlayer(x) & BasketballPlayer(y)) -> Tall(x,y))", "all x.exists y.(BasketballPlayer(x) & BasketballPlayer(y) & Tall(x))", "all x.(BasketballPlayer(x) -> Tall(x))", "-exists x.(BasketballPlayer(x) & Tall(x))", "all x.exists y.(BasketballPlayer(x) & Player(y) & Tall(x))", "(all x.(BasketballPlayer(x) -> Tall(x)))", "all x.exists y.(BasketballPlayer(x) & Player(y) & Tall(x,y))", "all x y.((BasketballPlayer(x) & Player(y)) -> Tall(y))"]}
{"id": "folio_train_371", "nl": "Everyone that can throw a football can throw a football with a spiral.", "fol": "all x.(ThrowsFootball(x) -> ThrowsFootballWithSpiral(x))", "prediction": ["all x.((CanThrewFootball(x) & HasSpiral(x)) -> CanThrewFootballWithSpiral(x))", "all x.((CanThrewFootball(x) & HasSpiral(x)) -> CanThrewFootball(x))", "all x.((CanThrewFootball(x) & HasSpiral(x)) -> ThrowsFootballWithSpiral(x))", "all x.((CanTwistFootball(x) & ThrowFootballWithSpiral(x)) -> ThrowFootballWithSpiral(x))", "all x.((CanTurnFootball(x) & ThrowFootballWithSpiral(x)) -> ThrowFootballWithSpiral(x))", "all x.((CanTwerFootball(x) & ThrowFootballWithSpiral(x)) -> ThrowFootballWithSpiral(x))", "all x.((CanTwistFootball(x) & HasSpiral(x)) -> CanTwistFootballWithSpiral(x))", "all x.((CanThrowFootball(x) & ThrowFootballWithSpiral(x)) -> ThrowFootballWithSpiral(x))", "all x.((CanTurnFootball(x) & HasSpiral(x)) -> CanTurnFootballWithSpiral(x))", "all x.((CanThrowFootball(x) & HasSpiral(x)) -> CanThrowFootballWithSpiral(x))", "all x.((CanThrewFootball(x) & HasSpiral(x)) -> ThrowFootballWithSpiral(x))", "all x.((CanThrowFootball(x) & HasSpiral(x)) -> ThrowFootballWithSpiral(x))", "all x.((CanTwerFootball(x) & HasSpiral(x)) -> CanTwerFootballWithSpiral(x))", "all x.((CanThrew(x,Football) & HasSpiral(x)) -> CanThrew(x,Football))", "all x.((CanTwerFootball(x) & HasSpiral(x)) -> CanTwerFootball(x))", "all x.((CanTwerFootball(x) & HasSpiral(x)) -> ThrowFootballWithSpiral(x))"]}
{"id": "folio_train_372", "nl": "If someone is tall, then they are in shape.", "fol": "all x.(IsTall(x) -> IsInShape(x))", "prediction": ["all x.(Tall(x) -> InShape(x))", "all x.(Tall(x) -> Shape(x))", "all x.((Tall(x) & InShape(x)) -> Tall(x))", "all x.((Tall(x) & InShape(x)) -> InShape(x))", "all x.((Tall(x) & Shape(x)) -> InShape(x))", "all x.((Person(x) & Tall(x)) -> InShape(x))", "all x.((Tall(x) & Shape(x)) -> Tall(x))", "all x.((Tall(x) & HasShape(x)) -> InShape(x))", "all x.((Tall(x) -> InShape(x))", "all x.((Tall(x) & IsShape(x)) -> InShape(x))", "all x.((Tall(x) & InShape(x)) -> IsInShape(x))", "all x.((Tall(x) & InShape(x)) -> IsTall(x))", "all x.((Tall(x) & InShape(x)) -> Tall(x))", "all x.((Tall(x) & IsInShape(x)) -> InShape(x))", "all x.((Person(x) & Tall(x)) -> Shape(x))", "all x.((Tall(x) & InShape(x)) -> Height(x))"]}
{"id": "folio_train_373", "nl": "If Jack is neither tall nor a basketball player,  then Jack is neither tall nor can throw a football.", "fol": "((-IsTall(Jack) & -IsBasketballPlayer(Jack)) -> (-IsTall(Jack) & -ThrowsFootball(Jack)))", "prediction": ["all x.((Jack(x) & -Tall(x) & -BasketballPlayer(x)) -> -Tall(x) & -CanThrewFootball(x))", "all x.((Jack(x) & -Tall(x) & -BasketballPlayer(x)) -> (-Tall(x) & -CanThrewFootball(x)))", "all x.((Jack(x) & -Tall(x) & -BasketballPlayer(x)) -> -Tall(x) & -CanThrowFootball(x))", "all x.((Jack(x) & -Tall(x) & -BasketballPlayer(x)) -> (-Tall(x) & -CanThrowFootball(x)))", "all x.((Jack(x) & -Tall(x) & -BasketballPlayer(x)) -> -Tall(x) & -CanTurnFootball(x))", "all x.((Jack(x) & -Tall(x) & -BasketballPlayer(x)) -> -Tall(x) & -CanTwereFootball(x))", "all x.((Jack(x) & -Tall(x) & -BasketballPlayer(x)) -> (-Tall(x) & -CanTurnFootball(x)))", "all x.((Jack(x) & -(Tall(x) | BasketballPlayer(x))) -> (-Tall(x) & -CanThrewFootball(x)))", "all x.((Jack(x) & -Tall(x) & -BasketballPlayer(x)) -> -Tall(x) & -ThrewFootball(x))", "all x.((Jack(x) & -Tall(x) & -BasketballPlayer(x)) -> -Tall(x) & -CanTwistFootball(x))", "all x.((Jack(x) & -Tall(x) & -BasketballPlayer(x)) -> (-Tall(x) & -ThrewFootball(x)))", "all x.((Jack(x) & -Tall(x) | BasketballPlayer(x)) -> -Tall(x) & -CanThrewFootball(x))", "all x.((Jack(x) & -(Tall(x) | BasketballPlayer(x))) -> (-Tall(x) & -CanThrowFootball(x)))", "all x.((Jack(x) & -(Tall(x) | BasketballPlayer(x))) -> -(Tall(x) | ThrowsFootball(x))))", "all x.((Jack(x) & -(Tall(x) | BasketballPlayer(x))) -> -(Tall(x) | ThrowsFootball(x)))", "all x.((Jack(x) & -Tall(x) | BasketballPlayer(x)) -> -Tall(x) & -CanThrowFootball(x))"]}
{"id": "folio_train_374", "nl": "Jack plays football.", "fol": "PlaysFootball(Jack)", "prediction": ["all x.(Jack(x) -> PlaysFootball(x))", "All x.(Jack(x) -> PlaysFootball(x))", "all x.((Jack(x) & Football(y)) -> Plays(x,y))", "(PlaysFootball(Jack))", "(Plays(Jack) & Football(Jack))", "exists x.(Jack(x) & PlaysFootball(x))", "(Plays(Jack,Football))", "exists x.(Jack(x) & Football(y) & Plays(x,y))", "(PlaysFootball(Jack) & -PlaysFootball(Jack))", "(Plays(Jack,Football) & -Plays(Jack,Football))", "all x.(Jack(x) -> Plays(x,Football))", "exists x.(Jack(x) & Plays(x,Football))", "all x.((Jack(x) & Football(x)) -> Plays(x,y))", "all x.(Jack(x) -> PlaysFootball(x))", "all x.((Jack(x) & Football(x)) -> Plays(x))", "all x.(Jack(x) -> Plays(x,football))"]}
{"id": "folio_train_375", "nl": "Jack is in shape.", "fol": "IsInShape(Jack)", "prediction": ["all x.(Jack(x) -> InShape(x))", "All x.(Jack(x) -> InShape(x))", "(InShape(Jack) & InShape(Jack))", "all x.(Jack(x) -> Shape(x))", "(InShape(Jack) -> InShape(Jack))", "exists x.(Jack(x) & InShape(x))", "All x.(Jack(x) -> Shape(x))", "(InShape(Jack) -> InShape(Jack))", "exists x.(Jack(x) & Shape(x))", "(InShape(Jack))", "(Shape(Jack) & InShape(Jack))", "all x.(Jack(x) -> InShape(x))", "All x.(Jack(x) -> InShape(x))", "(InShape(Jack)", "(InShape(Jack) & Shape(Jack))", "-(Jack(Jack) & Shape(Jack))"]}
{"id": "folio_train_376", "nl": "Jack is not in shape.", "fol": "-IsInShape(Jack)", "prediction": ["all x.(Jack(x) -> -InShape(x))", "(-Shape(Jack))", "All x.(Jack(x) -> -InShape(x))", "all x.(Jack(x) -> -Shape(x))", "-Shape(Jack)", "All x.(Jack(x) -> -Shape(x))", "-InShape(Jack)", "exists x.(Jack(x) & -InShape(x))", "-(Jack(Jack) & Shape(Jack))", "exists x.(Jack(x) & -Shape(x))", "(-Shape(Jack) & -InShape(Jack))", "-(Jack(Jack) & InShape(Jack))", "(-Shape(Jack) & -Shape(Jack))", "(-InShape(Jack))", "all x.(Jack(x) -> -InShape(x))", "(-InShape(Jack) & -InShape(Jack))"]}
{"id": "folio_train_377", "nl": "Fort Ticonderoga is the current name for Fort Carillon.", "fol": "IsCurrentNameFor(Fortticonderoga,Fortcarillon)", "prediction": ["all x.(FortTiconderoga(x) -> FortCarillon(x))", "all x.((FortTiconderoga(x) & FortCarillon(x)) -> CurrentName(x))", "FortTiconderoga is the currentNameForFortCarillon.", "(currentNameForFortCarillon(FortTiconderoga))", "All x.(FortTiconderoga(x) -> FortCarillon(x))", "(currentNameForFortCarillon(FortTiconderoga) & FortCarillon(FortCarillon))", "all x.(FortTiconderoga(x) -> CurrentNameForFortCarillon(x))", "(CurrentNameForFortCarillon(FortTiconderoga) & FortCarillon(FortCarillon))", "FortTiconderoga(x) -> FortCarillon(x))", "FortTiconderoga is the current name for FortCarillon.", "(CurrentNameForFortCarillon(FortTiconderoga))", "(currentNameForFortCarillon(FortTiconderoga) & CurrentNameForFortCarillon(FortCarillon))", "all x.((FortTiconderoga(x) & FortCarillon(x)) -> CurrentNameForFortCarillon(x))", "all x.((FortTiconderoga(x) & FortCarillon(x)) -> CurrentNameForFort(x))", "FortTiconderoga is the currentNameForFortCarillon(x))", "FortTiconderoga is the currentnameForFortCarillon."]}
{"id": "folio_train_378", "nl": "Pierre de Rigaud de Vaudreuil built Fort Carillon.", "fol": "ConstructedBy(Pierrederigauddevaudreuil,Fortcarillon)", "prediction": ["Pierre de Rigaud de Vaudreuil built Fort Carillon.", "Pierre de Rigaud de Vaudreuil built FortCarillon.", "Pierre de Rigaud de Vaudreuil BuiltFortCarillon.", "Pierre de Rigaud de Vaudreuil a construit Fort Carillon.", "Pierre de Rigaud de Vaudreuil a construit FortCarillon.", "Pierre de Rigaud de Vaudreuil ArchitectedFortCarillon.", "Pierre de Rigaud de Vaudreuil & BuiltFortCarillon.", "Pierre de Rigaud de Vaudreuil - BuiltFortCarillon.", "Pierre de Rigaud de Vaudreuil built fort Carillon.", "Pierre de Rigaud de Vaudreuil et BuiltFortCarillon.", "Pierre de Rigaud de Vaudreuil builtFortCarillon.", "Pierre de Rigaud De Vaudreuil BuiltFortCarillon.", "Pierre de Rigaud de Vaudreuil (builtFortCarillon)", "Pierre de Rigaud de Vaudreuil baptized FortCarillon.", "Pierre de Rigaud de Vaudreuil erected Fort Carillon.", "Pierre de Rigaud de Vaudreuil (builtFortCarillon))"]}
{"id": "folio_train_379", "nl": "Fort Carillon was located in New France.", "fol": "IsLocatedIn(Fortcarillon,Newfrance)", "prediction": ["all x y.((FortCarillon(x) & NewFrance(y)) -> LocatedIn(x,y))", "All x.(FortCarillon(x) -> NewFrance(x))", "FortCarillon was located in NewFrance.", "all x.(FortCarillon(x) -> NewFrance(x))", "all x.(FortCarillon(x) -> LocatedInNewFrance(x))", "all x y.((FortCarillon(x) & NewFrance(y)) -> LocatedIn(x,y))", "All x.(FortCarillon(x) -> LocatedInNewFrance(x))", "all x.(FortCarillon(x) -> (LocatedInNewFrance(x) & LocatedInNewFrance(x)))", "all x.(FortCarillon(x) -> (LocatedInNewFrance(x) & NewFrance(x)))", "All x.(FortCarillon(x) -> (LocatedInNewFrance(x) & LocatedInNewFrance(x)))", "all x.(FortCarillon(x) -> (LocatedInNewFrance(x) & LocatedInNewFrance(x)))", "All x.(FortCarillon(x) -> (LocatedInNewFrance(x) & NewFrance(x)))", "all x y.((FortCarillon(x) & NewFrance(y)) -> FoundIn(x,y))", "All x.(FortCarillon(x) -> (LocatedInNewFrance(x) & LocatedInNewFrance(x)))", "all x y.((FortCarillon(x) & NewFrance(y)) -> Location(x,y))", "all x.(FortCarillon(x) -> (LocatedInNewFrance(x) | LocatedInNewFrance(x)))"]}
{"id": "folio_train_380", "nl": "New France is not in Europe.", "fol": "-IsLocatedIn(Newfrance,Europe)", "prediction": ["all x.(NewFrance(x) -> -InEurope(x))", "All x.(NewFrance(x) -> -InEurope(x))", "(NewFrance(NewFrance) & -InEurope(NewFrance))", "all x.(NewFrance(x) -> -Europe(x))", "All x.(NewFrance(x) -> -Europe(x))", "-(NewFrance(France) & -InEurope(France))", "-(NewFrance(f) & -InEurope(f))", "(NewFrance(n) & -InEurope(n))", "(NewFrance(NewFrance) -> -InEurope(NewFrance))", "(NewFrance(newfrance) & -InEurope(newfrance))", "-(NewFrance(NewFrance) & -InEurope(NewFrance))", "-InEurope(NewFrance)", "-(NewFrance(France) & InEurope(France))", "(NewFrance(NewFrance) -InEurope(NewFrance))", "(-InEurope(NewFrance))", "-(NewFrance(n) & InEurope(n))"]}
{"id": "folio_train_381", "nl": "Pierre de Rigaud de Vaudreuil built a fort in New France.", "fol": "exists f.(ConstructedBy(Pierrederigauddevaudreuil,f) & IsLocatedIn(f,Newfrance))", "prediction": ["Pierre de Rigaud de Vaudreuil built a fort in NewFrance.", "all x y z.((Piece(x) & Rigaud(y) & Vaudreuil(z)) -> BuiltFortInNewFrance(x,y,z))", "all x y.((Piece(x) & Rigaud(y) & Vaudreuil(y)) -> BuiltFortInNewFrance(x,y))", "all x y z.((Piece(x) & Rigaud(y) & Vaudreuil(z)) -> BuiltFort(x,y,z))", "all x y.((Fort(x) & PierreDeRigaudDeVaudreuil(y)) -> BuiltInNewFrance(x,y))", "all x y.((Pierce(x) & Rigaud(y) & Vaudreuil(y)) -> BuiltFortInNewFrance(x,y))", "all x y.((Pierce(x) & Rigaud(x) & Vaudreuil(y)) -> BuiltFortInNewFrance(x,y))", "all x y z.((Fort(x) & PierreDeRigaudDeVaudreuil(y) & NewFrance(z)) -> BuiltIn(x,y,z))", "all x y.((PieceDeRigaudDeVaudreuil(x) & Fort(y)) -> BuiltInNewFrance(x,y))", "all x y.((Fort(x) & PierreDeRigaudDeVaudreuil(y)) -> BuiltInNewFrance(x,y))", "all x y.((Piece(x) & Rigaud(y) & Vaudreuil(z)) -> BuiltFortInNewFrance(x,y,z))", "all x y.((Piece(x) & Rigaud(x) & Vaudreuil(y)) -> BuiltFortInNewFrance(x,y))", "all x y.((PieceDeRigaudDeVaudreuil(x) & NewFrance(y)) -> BuiltFort(x,y))", "all x y z.((Fort(x) & PierreDeRigaudDeVaudreuil(y) & NewFrance(z)) -> BuiltIn(y,z))", "all x y.((Pierre de Rigaud de Vaudreuil(x) & NewFrance(y)) -> BuiltFort(x,y))", "all x y.((Piece(x) & Rigaud(y) & Vaudreuil(x)) -> BuiltFortInNewFrance(x,y))"]}
{"id": "folio_train_382", "nl": "Pierre de Rigaud de Vaudreuil built a fort in New England.", "fol": "exists f.(ConstructedBy(Pierrederigauddevaudreuil,f) & IsLocatedIn(f,Newengland))", "prediction": ["Pierre de Rigaud de Vaudreuil built a fort in New England.", "all x y z.((Pierre de Rigaud de Vaudreuil(x) & Fort(y) & NewEngland(z)) -> BuiltIn(x,y,z))", "all x y z.((Piece(x) & Rigaud(y) & Vaudreuil(z)) -> BuiltFortInNewEngland(x,y,z))", "all x y z.((Piece(x) & Rigaud(y) & Vaudreuil(z)) -> BuiltFort(x,y,z))", "all x y.((Piece(x) & Rigaud(y) & Vaudreuil(y)) -> BuiltFortInNewEngland(x,y))", "all x y.((PieceDeRigaudDeVaudreuil(x) & Fort(y)) -> BuiltInNewEngland(x,y))", "all x y.((Pierce(x) & Rigaud(y) & Vaudreuil(y)) -> BuiltFortInNewEngland(x,y))", "all x y.((Pierce(x) & Rigaud(x) & Vaudreuil(y)) -> BuiltFortInNewEngland(x,y))", "all x y.((PieceDeRigaudDeVaudreuil(x) & Fort(y)) -> BuiltInNewEngland(x,y))", "all x y.((Piece(x) & Rigaud(y) & Vaudreuil(x)) -> BuiltFortInNewEngland(x,y))", "all x y.((Piece(x) & Rigaud(x) & Vaudreuil(y)) -> BuiltFortInNewEngland(x,y))", "all x y.((Piece(x) & Rigaud(y) & Vaudreuil(y)) -> BuiltFort(x,y))", "all x y.((Pierre de Rigaud de Vaudreuil(x) & Fort(y)) -> BuiltInNewEngland(x,y))", "all x y.((Fort(x) & PierreDeRigaudDeVaudreuil(y)) -> BuiltInNewEngland(x,y))", "all x y.((Pierre de Rigaud de Vaudreuil(x) & Fort(y)) -> BuiltInNewEngland(x,y))", "all x y z.((Piece(x) & Rigaud(y) & Vaudreuil(z)) -> BuiltFortInNewEngland(x,z))"]}
{"id": "folio_train_383", "nl": "Fort Carillon was located in Europe.", "fol": "IsLocatedIn(Fortcarillon,Europe)", "prediction": ["all x.(FortCarillon(x) -> LocatedInEurope(x))", "all x y.((FortCarillon(x) & Europe(y)) -> LocatedIn(x,y))", "all x y.((FortCarillon(x) & Europe(y)) -> LocatedIn(x,y))", "All x.(FortCarillon(x) -> LocatedInEurope(x))", "all x.(FortCarillon(x) -> LocatedInEurope(x))", "all x y z.((FortCarillon(x) & Europe(y) & Location(z)) -> LocatedIn(x,y,z))", "all x.(FortCarillon(x) -> (LocatedInEurope(x) & LocatedInEurope(x)))", "all x.(FortCarillon(x) -> (LocatedInEurope(x) & LocatedInEurope(x)))", "all x.(FortCarillon(x) -> LocationInEurope(x))", "all x y z.((FortCarillon(x) & Europe(y) & Europe(z)) -> LocatedIn(x,y,z))", "all x y.((FortCarillon(x) & Europe(y)) -> FoundIn(x,y))", "all x y z.((FortCarillon(x) & Europe(y) & Location(z)) -> LocatedIn(x,y))", "all x.(FortCarillon(x) -> LocatedIn(x,Europe))", "all x y z.((FortCarillon(x) & Europe(y) & LocatedIn(x,z)) -> FortCarillon(z))", "all x y z.((FortCarillon(x) & Europe(y) & Europe(z)) -> LocatedIn(x,y,z))", "all x y z.((FortCarillon(x) & Europe(y) & Location(z)) -> LocatedIn(x,y,z))"]}
{"id": "folio_train_384", "nl": "No soccer players are professional basketball players.", "fol": "-exists x.(IsSoccerPlayer(x) & IsProfessionalBasketballPlayer(x))", "prediction": ["-exists x.(SoccerPlayer(x) & ProfessionalBasketballPlayer(x))", "-exists x.(SoccerPlayer(x) & BasketballPlayer(x))", "all x.(SoccerPlayer(x) -> -ProfessionalBasketballPlayer(x))", "(-exists x.(SoccerPlayer(x) & ProfessionalBasketballPlayer(x)))", "-exists x.(SoccerPlayer(x) & -ProfessionalBasketballPlayer(x))", "all x.((SoccerPlayer(x) & -ProfessionalBasketballPlayer(x)) -> -ProfessionalBasketballPlayer(x))", "all x.((SoccerPlayer(x) & ProfessionalBasketballPlayer(x)) -> -exists y.(SoccerPlayer(y) & ProfessionalBasketballPlayer(y)))", "all x.((SoccerPlayer(x) & -ProfessionalBasketballPlayer(x)) -> -(SoccerPlayer(x) & ProfessionalBasketballPlayer(x)))", "all x.((SoccerPlayer(x) & ProfessionalBasketballPlayer(x)) -> -(SoccerPlayer(x) & ProfessionalBasketballPlayer(x)))", "-exists x.(SoccerPlayer(x) & ProfessionalBallroomPlayer(x))", "-exists x.(SoccerPilot(x) & ProfessionalBasketballPilot(x))", "all x.((SoccerPlayer(x) & ProfessionalBasketballPlayer(x)) -> -exists y.(SoccerPlayer(y) & ProfessionalBasketballPlayer(x)))", "all x.((SoccerPlayer(x) & -ProfessionalBasketballPlayer(x)) -> -(ProfessionalBasketballPlayer(x) & ProfessionalBasketballPlayer(x)))", "(-exists x.(SoccerPlayer(x) & ProfessionalBasketballPlayer(x)) & -exists y.(SoccerPlayer(y) & ProfessionalBasketballPlayer(y))))", "all x.((SoccerPlayer(x) & ProfessionalBasketballPlayer(x)) -> -exists y.(SoccerPlayer(y) & Plays(x,y))))", "all x.((SoccerPlayer(x) & ProfessionalBasketballPlayer(x)) -> -exists y.(SoccerPlayer(y) & ProfessionalBasketballPlayer(x,y)))"]}
{"id": "folio_train_385", "nl": "All NBA players are professional basketball players.", "fol": "all x.(IsNBAPlayer(x) -> IsProfessionalBasketballPlayer(x))", "prediction": ["all x.(NBAPlayer(x) -> ProfessionalBasketballPlayer(x))", "all x.(NBAPlayer(x) -> ProfessionalBallroomPlayer(x))", "all x.(NBAPlayer(x) -> ProfessionalBalloonPlayer(x))", "all x.(NBAPlayer(x) -> ProfessionalBadmintonPlayer(x))", "all x.(NBAPlayer(x) -> Professional(x))", "all x.(NBAPlayer(x) -> ProfessionalBallroomplayer(x))", "all x.((NBAPlayer(x) & ProfessionalBasketballPlayer(x)) -> ProfessionalPlayer(x))", "all x.(NBAPlayer(x) -> ProfessionalPlayer(x))", "all x.((NBAPlayer(x) & ProfessionalBasketballPlayer(x)) -> Professional(x))", "all x.((NBAPlayer(x) & Professional(x)) -> Professional(x))", "all x.((NBAPlayer(x) & Professional(x)) -> ProfessionalBasketballPlayer(x))", "all x.(NBAPlayer(x) -> ProfessionalBasketballPlayer(x))", "all x.(NBAPlayer(x) -> ProfessionalBalladPlayer(x))", "all x.(NBAPlayer(x) -> ProfessionalBalladballPlayer(x))", "all x.(NBAPlayer(x) -> ProfessionalHockeyPlayer(x))", "all x.(NBAPlayer(x) -> ProfessionalBoycottagePlayer(x))"]}
{"id": "folio_train_386", "nl": "All defenders are soccer players.", "fol": "all x.(IsDefender(x) -> IsSoccerPlayer(x))", "prediction": ["all x.(Defendant(x) -> SoccerPlayer(x))", "all x.(Defender(x) -> SoccerPlayer(x))", "all x.(Defendant(x) -> SoccerPlayer(x))", "all x.(defender(x) -> SoccerPlayer(x))", "all x.(Defenser(x) -> SoccerPlayer(x))", "all x.((Defendant(x) & SoccerPlayer(x)) -> FootballPlayer(x))", "all x.(Defending(x) -> SoccerPlayer(x))", "all x.((Defender(x) & SoccerPlayer(x)) -> FootballPlayer(x))", "all x.((Defendant(x) & SoccerPlayer(x)) -> Football(x))", "all x.(Defendant(x) -> SoccerPlayer(x))", "all x.(Defense(x) -> SoccerPlayer(x))", "all x.((Defendant(x) & SoccerPlayer(x)) -> SoccerPlayer(x))", "all x.((Defender(x) & SoccerPlayer(x)) -> SoccerPlayer(x))", "all x.((Defender(x) & SoccerPlayer(x)) -> Football(x))", "all x.((Defendant(x) & SoccerPlayer(x)) -> Defendant(x))", "(all x.(Defendant(x) -> SoccerPlayer(x)))"]}
{"id": "folio_train_387", "nl": "All centerback players are defenders.", "fol": "all x.(IsCenterback(x) -> IsDefender(x))", "prediction": ["all x.(CenterbackPlayer(x) -> Defender(x))", "all x.(CenterbackPlayer(x) -> Defensive(x))", "all x.(CenterBackPlayer(x) -> Defender(x))", "all x.(CentrebackPlayer(x) -> Defender(x))", "all x.(Centerback(x) -> Defender(x))", "all x.(CenterbackPlayer(x) -> Defendant(x))", "all x.(CensorbackPlayer(x) -> Defender(x))", "all x.(CentricBackPlayer(x) -> Defender(x))", "all x.(CenterbackPlayer(x) -> Defendant(x))", "all x.((CenterbackPlayer(x) & Defender(x)) -> CenterbackPlayer(x))", "all x.(CenterbackPlayer(x) -> Defenser(x))", "all x.((CenterbackPlayer(x) & Defender(x)) -> Player(x))", "all x.(CurrentBackPlayer(x) -> Defender(x))", "all x.(CenterbackPlayer(x) -> Defender(x))", "all x.((CenterbackPlayer(x) & Defender(x)) -> Plays(x))", "all x.((CenterbackPlayer(x) & Defender(x)) -> PlaysWith(x,y))"]}
{"id": "folio_train_388", "nl": "If Stephen Curry is an NBA player or a soccer player, then he is a professional basketball player.", "fol": "(((IsNBAPlayer(Stephencurry) & -IsSoccerPlayer(Stephencurry)) | (-IsNBAPlayer(Stephencurry) & IsSoccerPlayer(Stephencurry))) -> IsProfessionalBasketballPlayer(Stephencurry))", "prediction": ["all x.((StephenCurry(x) & (NBAPlayer(x) | SoccerPlayer(x))) -> ProfessionalBasketballPlayer(x))", "all x.((StanleyCurry(x) & (NBAPlayer(x) | SoccerPlayer(x))) -> ProfessionalBasketballPlayer(x))", "all x.((StephenCurry(x) & ( NBAPlayer(x) | SoccerPlayer(x))) -> ProfessionalBasketballPlayer(x))", "all x.((StephenCurry(x) & NBAPlayer(x) | SoccerPlayer(x)) -> ProfessionalBasketballPlayer(x))", "all x.((StephenCurry(x) & NBAPlayer(x)) | SoccerPlayer(x)) -> ProfessionalBasketballPlayer(x))", "all x.((StephenCurry(x) & NBAPlayer(x) & SoccerPlayer(x)) -> ProfessionalBasketballPlayer(x))", "all x.(((StephenCurry(x) & (NBAPlayer(x) | SoccerPlayer(x))) -> ProfessionalBasketballPlayer(x))", "all x.((StephenCurry(x) & NBAPlayer(x) & (SoccerPlayer(x) | NBAPlayer(x))) -> ProfessionalBasketballPlayer(x))", "all x.((StanleyCurry(x) & NBAPlayer(x)) | SoccerPlayer(x)) -> ProfessionalBasketballPlayer(x))", "all x.((StephenCurier(x) & (NBAPlayer(x) | SoccerPlayer(x))) -> ProfessionalBasketballPlayer(x))", "all x.(((StephenCurry(x) & NBAPlayer(x)) | SoccerPlayer(x)) -> ProfessionalBasketballPlayer(x))", "all x.((StephenCurry(x) & (An NBAPlayer(x) | SoccerPlayer(x))) -> ProfessionalBasketballPlayer(x))", "all x.((StanleyCurry(x) & ( NBAPlayer(x) | SoccerPlayer(x))) -> ProfessionalBasketballPlayer(x))", "all x.((Player(x) & (NBAPlayer(x) | SoccerPlayer(x))) -> ProfessionalBasketballPlayer(x))", "all x.((StephenCurry(x) & (NBAPlayer(x) | SoccerPlayer(x))) -> ProfessionalBalloonPlayer(x))", "all x.((StephenCurry(x) & (NBAPlayer(x) | SoccerPlayer(x))) -> ProfessionalBallroomPlayer(x))"]}
{"id": "folio_train_389", "nl": "Stephen Curry is an NBA player.", "fol": "IsNBAPlayer(Stephencurry)", "prediction": ["all x.((StephenCurry(x) & NBAPlayer(x)) -> NBAPlayer(x))", "All x.((StephenCurry(x) & NBAPlayer(x)) -> NBAPlayer(x))", "StephenCurry(StephenCurry) is NBAPlayer(StephenCurry)", "(NBAPlayer(StephenCurry) & NBAPlayer(StephenCurry))", "all x.((StephenCurry(x) & NBAPlayer(x)) -> Plays(x))", "all x.((StephenCurry(x) & NBAPlayer(x)) -> PlaysIn(x,y))", "(Player(StephenCurry) & NBA(StephenCurry))", "all x.((StephenCurry(x) & NBAPlayer(x)) -> Plays(x,y))", "(NBAPlayer(StephenCurry))", "all x.((StephenCurry(x) & NBAPlayer(x)) -> Player(x))", "(NBAPlayer(StephenCurry) -> NBAPlayer(StephenCurry))", "All x.((StephenCurry(x) & NBAPlayer(x)) -> Plays(x))", "(NBAPlayer(StephenCurry) & -NBAPlayer(StephenCurry))", "StephenCurry(StanleyCurry) is NBAPlayer(StanleyCurry)", "All x.((StephenCurry(x) & NBAPlayer(x)) -> PlaysIn(x,y))", "all x.((StephenCurry(x) & NBAPlayer(x)) -> NBA(x))"]}
{"id": "folio_train_390", "nl": "Stephen Curry is a centerback player.", "fol": "IsCenterback(Stephencurry)", "prediction": ["all x.((StephenCurry(x) & CenterbackPlayer(x)) -> Plays(x))", "all x.((StephenCurry(x) & CenterbackPlayer(x)) -> Player(x))", "all x.((StephenCurry(x) & CenterbackPlayer(x)) -> CenterbackPlayer(x))", "all x.(Curry(x) -> CenterbackPlayer(x))", "all x.((StephenCurry(x) & CenterbackPlayer(x)) -> Plays(x,Curry))", "all x.((StephenCurry(x) & Centerback(x)) -> Player(x))", "all x.((StephenCurry(x) & CenterbackPlayer(x)) -> Plays(x,y))", "all x.(CenterbackPlayer(x) -> StephenCurry(x))", "all x.((StanleyCurry(x) & CenterbackPlayer(x)) -> Plays(x))", "all x.((StephenCurry(x) & CenterbackPlayer(x)) -> Plays(x,centerback))", "StephenCurry(StephenCurry) is a CenterbackPlayer(StephenCurry)", "all x.((StanleyCurry(x) & CenterbackPlayer(x)) -> CenterbackPlayer(x))", "all x.((StephenCurry(x) & CenterBackPlayer(x)) -> CenterbackPlayer(x))", "all x.((StephenCurry(x) & CenterbackPlayer(x)) -> Centerback(x))", "all x.((StephenCurry(x) & CenterbackPlayer(x)) -> Plays(x,Centerback))", "all x.((StanleyCurry(x) & CenterbackPlayer(x)) -> Player(x))"]}
{"id": "folio_train_391", "nl": "Stephen Curry is not a centerback player.", "fol": "-IsCenterback(Stephencurry)", "prediction": ["all x.((StephenCurry(x) & -CenterbackPlayer(x)) -> -CenterbackPlayer(x))", "(-CenterbackPlayer(StephenCurry))", "all x.((StanleyCurry(x) & -CenterbackPlayer(x)) -> -CenterbackPlayer(x))", "all x.((StephenCurry(x) & -CenterBackPlayer(x)) -> -CenterbackPlayer(x))", "all x.((Curry(x) & -CenterbackPlayer(x)) -> -CenterbackPlayer(x))", "all x.((StephenCurry(x) & -CenterbackPlayer(x)) -> -centerbackPlayer(x))", "all x.(Curry(x) -> -CenterbackPlayer(x))", "all x.((StephenCurry(x) & -CenterbackPlayer(x)) -> -CenterBackPlayer(x))", "all x.((StephenCurry(x) & -centerbackPlayer(x)) -> -CenterbackPlayer(x))", "all x.((StephenCurry(x) & -CenterbackPlayer(x)) -> -(CenterbackPlayer(x) & -CenterbackPlayer(x)))", "StephenCurry(StephenCurry) & -CenterbackPlayer(StephenCurry))", "all x.((StephenCurry(x) & -CenterbackPlayer(x)) -> -CurtisebackPlayer(x))", "all x.((StephenCurry(x) & -CenterbackPlayer(x)) -> -(CenterbackPlayer(x) & CenterbackPlayer(x)))", "all x.((StephenCurry(x) & CenterbackPlayer(x)) -> -CenterbackPlayer(x))", "all x.((StephenCurry(x) & -Centerback(x)) -> -CenterbackPlayer(x))", "all x.((StephenCurry(x) & -CultbackPlayer(x)) -> -CenterbackPlayer(x))"]}
{"id": "folio_train_392", "nl": "No songs are visual. ", "fol": "all x.(IsSong(x) -> -IsVisual(x))", "prediction": ["-exists x.(Song(x) & Visual(x))", "all x.(Song(x) -> -Visual(x))", "(-exists x.(Song(x) & Visual(x)))", "(-exists x.(Song(x) & Visual(x)) & -exists y.(Song(y) & Visual(y)) & -exists z.(Song(z) & Visual(z))) & -exists w.(Song(w) & Visual(w) & Visual(w))))", "(-exists x.(Song(x) & Visual(x)) & -exists y.(Song(y) & Visual(y)) & -exists z.(Song(z) & Visual(z) & Visual(z))))", "(-exists x.(Song(x) & Visual(x)) & -exists y.(Song(y) & Visual(y)) & -exists z.(Song(z) & Visual(z))) & -exists w.(Song(w) & Visual(w))))", "(-exists x.(Song(x) & Visual(x)) & -exists y.(Song(y) & Visual(y)) & -exists z.(Song(z) & Visual(z))) & -exists w.(Song(w) & Visual(w) & Visual(w) & Visual(w))))", "(-exists x.(Song(x) & Visual(x)) & -exists y.(Song(y) & Visual(y)) & -exists z.(Song(z) & Visual(z) & Visual(z) & Visual(z))))", "-exists x.(Song(x) & Visual(x)) & -exists y.(Song(y) & Visual(y)) & -exists z.(Song(z) & Visual(z) & Visual(z) & Visual(z))))", "-exists x.(Song(x) & Visual(x)) & -exists y.(Song(y) & Visual(y)) & -exists z.(Song(z) & Visual(z) & Visual(z) & Visual(z) & Visual(z))))", "(-exists x.(Song(x) & Visual(x)) & -exists y.(Song(y) & Visual(y)) & -exists z.(Song(z) & Visual(z))) & -exists w.(Song(w) & Visual(w)) & Visual(w)))", "(-exists x.(Song(x) & Visual(x)) & -exists y.(Song(y) & Visual(y)) & -exists z.(Song(z) & Visual(z))) & -exists w.(Song(w) & Visual(w) & Visual(w)))", "(-exists x.(Song(x) & Visual(x)) & -exists y.(Song(y) & Visual(y)) & -exists z.(Song(z) & Visual(z))) & -exists w.(Song(w) & Visual(w)) & Visual(w) & Visual(w)))", "(-exists x.(Song(x) & Visual(x)) & -exists y.(Song(y) & Visual(y)) & -exists z.(Song(z) & Visual(z) & Visual(z) & Visual(z) & Visual(z))))", "-exists x.(Song(x) & Visual(x)) & -exists y.(Song(y) & Visual(y)) & -exists z.(Song(z) & Visual(z) & Visual(z) & Visual(z) & Visual(z) & Visual(z)))", "-exists x.(Song(x) & Visible(x))"]}
{"id": "folio_train_393", "nl": "All folk songs are songs. ", "fol": "all x.(IsFolkSong(x) -> IsSong(x))", "prediction": ["all x.(FolkSong(x) -> Songs(x))", "all x.(FolkSong(x) -> Song(x))", "all x.((FolkSong(x) & Song(x)) -> Songs(x))", "all x y.((FolkSong(x) & FolkSong(y)) -> Songs(x))", "all x y.((FolkSong(x) & FolkSong(y)) -> Song(x))", "all x.((FolkSong(x) & Song(x)) -> Song(x))", "all x y.((FolkSong(x) & Folk(y)) -> Songs(x))", "all x.exists y.(FolkSong(x) & Song(y) & Contains(x,y))", "all x y.((FolkSong(x) & Folk(y)) -> Song(x))", "all x y.((FolkSong(x) & FolkSong(y)) -> Songs(x,y))", "all x.exists y.(FolkSong(x) & Song(y) & Song(x,y))", "(all x.(FolkSong(x) -> Song(x))", "all x y.((FolkSong(x) & FolkSong(y)) -> Song(x,y))", "exists x.(FolkSong(x) & Song(x))", "all x.exists y.(FolkSong(x) & Song(y) & Song(y))", "all x.((FolkSong(x) & Song(x)) -> Is(x,y))"]}
{"id": "folio_train_394", "nl": "All videos are visual. ", "fol": "all x.(IsVideo(x) -> IsVisual(x))", "prediction": ["all x.(Video(x) -> Visual(x))", "all x y.((Video(x) & Video(y)) -> Visual(x))", "all x.(Visual(x) -> Video(x))", "all x y.((Video(x) & Visual(y)) -> Visual(x))", "all x.(Visual(x) -> Videos(x))", "all x y.((Video(x) & Video(y)) -> Visual(x,y))", "all x.(Visual(x) -> AllVideos(x))", "all x y.((Video(x) & Visual(y)) -> Visual(x,y))", "all x.(Video(x) -> Visible(x))", "All x.(Video(x) -> Visual(x))", "all x.(Visual(x) -> -Video(x))", "all x.(Visual(x) -> Video(x))", "all x.((Video(x) & Visual(x)) -> Visual(x))", "(all x.(Video(x) -> Visual(x)))", "all x y.((Video(x) & Visual(y)) -> -Visual(x))", "all x y.((Video(x) & Visual(y)) -> Is(x,y))"]}
{"id": "folio_train_395", "nl": "All movies are videos.", "fol": "all x.(IsMovie(x) -> IsVideo(x))", "prediction": ["all x.(Movie(x) -> Video(x))", "all x.(Movie(x) -> Videos(x))", "all x y.((Movie(x) & Movie(y)) -> Video(x))", "all x.exists y.(Movie(x) & Movie(y) & Video(x))", "all x y.((Movie(x) & Video(y)) -> Video(x))", "all x y.((Movie(x) & Movie(y)) -> Videos(x))", "all x.exists y.(Movie(x) & Video(y) & Contains(x,y))", "all x.exists y.(Movie(x) & Movie(y) & Video(x,y))", "all x.exists y.(Movie(x) & Movie(y) & Video(y))", "all x.(Movie(x) -> Video(x))", "all x y.((Movie(x) & Movie(y)) -> Video(x,y))", "all x.exists y.(Movie(x) & Movie(y) & Contains(x,y))", "all x y.((Movie(x) & Video(y)) -> Is(x,y))", "all x.exists y.(Movie(x) & Movie(y) & Videos(x))", "all x y.((Movie(x) & Video(y)) -> Videos(x))", "all x.exists y.(Movie(x) & Movie(y) & Animated(x,y))"]}
{"id": "folio_train_396", "nl": "All sci-fi movies are movies.", "fol": "all x.(IsScifiMovie(x) -> IsMovie(x))", "prediction": ["all x.(SciFiMovie(x) -> Movie(x))", "all x.(SciFiFiMovie(x) -> Movie(x))", "all x.(SciFi(x) -> Movie(x))", "all x.((SciFiMovie(x) & Movie(x)) -> Movie(x))", "all x.((Movie(x) & SciFi(x)) -> Movie(x))", "all x.((SciFi(x) & Movie(x)) -> Movie(x))", "all x.(ScisFictionMovie(x) -> Movie(x))", "all x.(ScifiMovie(x) -> Movie(x))", "all x.(SciFiMovie(x) -> Movie(x))", "all x.((SciFiFiMovie(x) & Movie(x)) -> Movie(x))", "all x.(SciFiFilm(x) -> Movie(x))", "all x.((SciFiFi(x) & Movie(x)) -> Movie(x))", "all x.(SciFiFi(x) -> Movie(x))", "all x.((SciFiMovie(x) & Movie(y)) -> Movie(x))", "all x.(SciFi Movie(x) -> Movie(x))", "all x.(SciFim(x) -> Movie(x))"]}
{"id": "folio_train_397", "nl": "Inception is a sci-fi movie.", "fol": "IsScifiMovie(Inception)", "prediction": ["All x.(Inception(x) -> SciFiMovie(x))", "all x.(Inception(x) -> SciFiMovie(x))", "(SciFiMovie(Inception) & SciFiMovie(Inception))", "Inception is a sci-fi movie.", "(SciFiMovie(Inception) -> SciFiMovie(Inception))", "all x.((Inception(x) & SciFiMovie(x)) -> Movie(x))", "all x.((Inception(x) & SciFiMovie(x)) -> Film(x))", "All x.((Inception(x) & SciFiMovie(x)) -> Movie(x))", "All x.((Inception(x) & SciFiMovie(x)) -> Inception(x))", "exists x.(Inception(x) & SciFiMovie(x))", "All x.((Inception(x) & SciFiMovie(x)) -> Film(x))", "All x.(Inception(x) -> SciFiMovie(x))", "all x.((Inception(x) & SciFiMovie(x)) -> Inception(x))", "All x.((Inception(x) & SciFiMovie(x)) -> SciFiMovie(x))", "all x.(Inception(x) -> SciFiMovie(x))", "All x.((Inception(x) & SciFiMovie(x)) -> Animated(x))"]}
{"id": "folio_train_398", "nl": "Mac is neither a folk song nor a sci-fi movie.", "fol": "(-IsFolkSong(Mac) & -IsScifiMovie(Mac))", "prediction": ["all x.(Mac(x) -> (-FolkSong(x) & -SciFiMovie(x)))", "all x.(Mac(x) -> (-FolkSong(x) | SciFiMovie(x)))", "(exists x.(Mac(x) & FolkSong(x)) & -exists y.(SciFiMovie(y) & SciFiMovie(y))))", "exists x.(Mac(x) & -(FolkSong(x) | SciFiMovie(x)))", "(exists x.(Mac(x) & FolkSong(x)) & -exists y.(SciFiMovie(y) & SciFi(y))))", "all x.(Mac(x) -> (-FolkSong(x) & -SciFiMovie(x)))", "(-FolkSong(Mac) & -SciFiMovie(Mac))", "all x.(Mac(x) -> (-FolkSong(x) & -SciFiMovie(x)))", "(exists x.(Mac(x) & FolkSong(x)) & -exists y.(SciFiMovie(y) & SciFiMovie(y)))", "(exists x.(Mac(x) & FolkSong(x)) & -exists y.(SciFiMovie(y) & SciFi(y)))", "-(Mac(Mac) & FolkSong(Mac) & -SciFiMovie(Mac))", "all x.(Mac(x) -> -(FolkSong(x) | SciFiMovie(x)))", "-exists x.(Mac(x) & FolkSong(x) & -SciFiMovie(x))", "-(FolkSong(Mac) & -SciFiMovie(Mac))", "-(Mac(Mac) & FolkSong(Mac)) & -(Mac(Mac) & SciFiMovie(Mac)))", "all x.(Mac(x) -> (-FolkSong(x) & -ScifiMovie(x)))"]}
{"id": "folio_train_399", "nl": "Inception is a folk song.", "fol": "IsFolkSong(Inception)", "prediction": ["All x.(Inception(x) -> FolkSong(x))", "all x.(Inception(x) -> FolkSong(x))", "(FolkSong(Inception) & FolkSong(Inception))", "(FolkSong(Inception) -> FolkSong(Inception))", "Inception is a folk song.", "Inception (exists x.(FolkSong(x) & FolkSong(x)))", "(FolkSong(Inception) | FolkSong(Inception))", "exists x.(Inception(x) & FolkSong(x))", "All x.(Inception(x) -> FolkSong(x))", "Inception exists x.(FolkSong(x) & FolkSong(x))", "(FolkSong(Inception) & Folk(Inception))", "all x.(Inception(x) -> FolkSong(x))", "(FolkSong(Inception) -> FolkSong(Inception))", "Inception (exists x.(FolkSong(x) & Folk(x)))", "(FolkSong(Inception) | FolkSong(Inception)))", "(FolkSong(inception) & FolkSong(inception))"]}
{"id": "folio_train_400", "nl": "Inception is not a folk song.", "fol": "-IsFolkSong(Inception)", "prediction": ["All x.(Inception(x) -> -FolkSong(x))", "(FolkSong(Inception) & -FolkSong(Inception))", "all x.(Inception(x) -> -FolkSong(x))", "-FolkSong(Inception)", "(exists x.(Inception(x) & FolkSong(x)) & -exists y.(Inception(y) & FolkSong(y)) & -exists z.(Inception(z) & FolkSong(z)) & -exists w.(Inception(w) & FolkSong(w)) & -exists w.(Inception(w) & FolkSong(x) & FolkSong(x) & FolkSong(x))))", "(exists x.(Inception(x) & FolkSong(x)) & -exists y.(Inception(y) & FolkSong(y))))", "(exists x.(Inception(x) & FolkSong(x)) & -exists y.(Inception(y) & FolkSong(y)) & -exists z.(Inception(z) & FolkSong(z)) & -exists w.(Inception(w) & FolkSong(w)) & -exists w.(Inception(w) & FolkSong(x) & FolkSong(x))))", "(exists x.(Inception(x) & FolkSong(x)) & -FolkSong(x))", "(exists x.(Inception(x) & FolkSong(x)) & -exists y.(Inception(y) & FolkSong(y)) & -exists z.(Inception(z) & FolkSong(z)) & -exists w.(Inception(w) & FolkSong(w))))", "(exists x.(Inception(x) & FolkSong(x)) & -exists y.(Inception(y) & FolkSong(y)) & -exists z.(Inception(z) & FolkSong(z)) & -exists w.(Inception(w) & FolkSong(w)) & -exists w.(Inception(w) & FolkSong(x,w))))", "(exists x.(Inception(x) & FolkSong(x)) & -exists y.(Inception(y) & FolkSong(y)) & -exists z.(Inception(z) & FolkSong(z)) & -exists w.(Inception(w) & FolkSong(w) & FolkSong(w))))", "(exists x.(Inception(x) & FolkSong(x)) & -exists y.(Inception(y) & FolkSong(y)) & -exists z.(Inception(z) & FolkSong(z)) & -exists w.(Inception(w) & FolkSong(w)) & -exists w.(Inception(w) & FolkSong(x) & FolkSong(x) & FolkSong(x) & FolkSong(x))))", "(exists x.(Inception(x) & FolkSong(x)) & -exists y.(Inception(y) & FolkSong(y)) & -exists z.(Inception(z) & FolkSong(z) & FolkSong(z)) & -exists w.(Inception(w) & FolkSong(w))))", "(exists x.(Inception(x) & FolkSong(x)) & -exists y.(Inception(y) & FolkSong(y)) & -exists z.(Inception(z) & FolkSong(z)) & -exists w.(Inception(w) & FolkSong(w)) & exists w.(Inception(w) & FolkSong(w))))", "(exists x.(Inception(x) & FolkSong(x)) & -exists y.(Inception(y) & FolkSong(y)) & -exists z.(Inception(z) & FolkSong(z) & FolkSong(z)) & -exists w.(Inception(w) & FolkSong(w) & FolkSong(w))))", "(exists x.(Inception(x) & FolkSong(x)) & -exists y.(Inception(y) & FolkSong(x))))"]}
{"id": "folio_train_401", "nl": "Inception is either a video or a folk song.", "fol": "(IsVideo(Inception) | IsFolkSong(Inception))", "prediction": ["all x.(Inception(x) -> (Video(x) | FolkSong(x)))", "exists x.(Inception(x) & (Video(x) | FolkSong(x)))", "all x.(Inception(x) -> (Video(x) | FolkSong(x)))", "all x y.((Inception(x) & Video(y)) | FolkSong(y)) -> (Video(x) | FolkSong(x)))", "all x.(Inception(x) -> (Violence(x) | FolkSong(x)))", "all x y.((Inception(x) & Video(y)) | FolkSong(x)) -> (Video(y) | FolkSong(y)))", "all x y.((Inception(x) & Video(y)) | FolkSong(y)) -> Inception(x))", "all x y.((Inception(x) & Video(y)) | FolkSong(y)) -> (Video(x,y) | FolkSong(x,y)))", "all x y.((Inception(x) & Video(y)) | FolkSong(x,y)) -> (Video(x) | FolkSong(x)))", "all x.((Inception(x) & (Video(x) | FolkSong(x))) -> (Video(x) | FolkSong(x)))", "all x y.((Inception(x) & Video(y)) | FolkSong(x,y)) -> (Video(x) | FolkSong(x,y)))", "all x y.((Inception(x) & Video(y)) | FolkSong(y)) -> (Video(x) | FolkSong(y)))", "all x y.((Inception(x) & Video(y)) | FolkSong(y)) -> (Inception(x) & Inception(x)))", "all x y.((Inception(x) & Video(y)) | FolkSong(x)) -> (Video(x) | FolkSong(x)))", "All x.(Inception(x) -> (Video(x) | FolkSong(x)))", "all x.((Inception(x) & (Video(x) | FolkSong(x))) -> Inception(x))"]}
{"id": "folio_train_402", "nl": "Mac is a video.", "fol": "IsVideo(Mac)", "prediction": ["all x.(Mac(x) -> Video(x))", "all x y.((Mac(x) & Video(y)) -> Is(x,y))", "exists x.(Mac(x) & Video(x))", "all x.(Mac(x) -> Video(x))", "all x y.((Mac(x) & Video(y)) -> Video(x))", "all x y.((Mac(x) & Video(y)) -> Has(x,y))", "All x.(Mac(x) -> Video(x))", "all x y.((Mac(x) & Video(y)) -> (Video(x) & Video(y)))", "all x y.((Mac(x) & Video(y)) -> (Video(x) | Video(y)))", "all x y.((Mac(x) & Video(y)) -> (Video(x) & -Video(y)))", "all x y.((Mac(x) & Video(y)) -> -Video(x))", "all x y.((Mac(x) & Video(y)) -> CreatedBy(x,y))", "all x y.((Mac(x) & Video(y)) -> (Video(x) & -Video(x)))", "all x y.((Mac(x) & Video(y)) -> (Video(x) & Video(x)))", "all x y.((Mac(x) & Video(y)) -> Video(x,y))", "all x y.((Mac(x) & Video(x)) -> Is(x,y))"]}
{"id": "folio_train_403", "nl": "All extroverts are overtly expressive.", "fol": "all x.(IsExtrovert(x) -> IsOvertlyExpressive(x))", "prediction": ["all x.(Extrovert(x) -> OvertlyExpressive(x))", "all x.(Extrovert(x) -> OvertlyExplicit(x))", "all x.(Extrovert(x) -> OvertlyExpressive(x))", "all x y.((Extrovert(x) & Extrovert(y)) -> OvertlyExpressive(x))", "all x.(Extrovert(x) -> OvertlyExpressive(x))", "all x y.((Extrovert(x) & Extrovert(y)) -> OvertlyExpressive(x,y))", "all x.(Extrovert(x) -> Expressive(x))", "all x.(Extrovert(x) -> OvertlyExtrovert(x))", "all x.(Extrovert(x) -> (OvertlyExpressive(x) & Extrovert(x)))", "all x y.((Extrovert(x) & Extrovert(y)) -> OvertlyExplicit(x))", "all x.(Extrovert(x) -> OvertlyExpressional(x))", "all x.(Extrovert(x) -> (OvertlyExpressive(x) | OvertlyExpressive(x)))", "all x y.((Extrovert(x) & Extrovert(y)) -> OvertlyExpressive(x))", "all x y.((Extrovert(x) & Extrovert(y)) -> OvertlyExpressive(y))", "all x y.((Extrovert(x) & Extrovert(y)) -> OvertlyExplicit(x,y))", "all x.(Extrovert(x) -> OvertlyExpective(x))"]}
{"id": "folio_train_404", "nl": "People are either extroverts or introverts.", "fol": "all x.(IsExtrovert(x) | IsIntrovert(x))", "prediction": ["all x.(Person(x) -> (Extrovert(x) | Introvert(x)))", "all x.((Person(x) & (Extrovert(x) | Introvert(x))) -> (Extrovert(x) | Introvert(x)))", "all x.(People(x) -> (Extrovert(x) | Introvert(x)))", "exists x.(Person(x) & (Extrovert(x) | Introvert(x)))", "all x.((Person(x) & (Extrovert(x) | Introvert(x))) -> (Extrovert(x) | Introvert(x))))", "all x.((People(x) & (Extrovert(x) | Introvert(x))) -> (Extrovert(x) | Introvert(x)))", "all x.((Person(x) & (Extrovert(x) | Introvert(x))) -> (Person(x) & (Extrovert(x) | Introvert(x))))", "all x.((Person(x) & (Extrovert(x) | Introvert(x))) -> (Introvert(x)))", "all x.((Person(x) & Extrovert(x)) | Introvert(x))", "all x.(Popular(x) -> (Extrovert(x) | Introvert(x)))", "all x.(Person(x) -> (Extrovert(x) | Introvert(x)))", "all x.((Person(x) & (Extrovert(x) | Introvert(x))) -> (Introverted(x)))", "all x.((People(x) & (Extrovert(x) | Introvert(x))) -> (Extrovert(x) | Introvert(x))))", "all x.((Person(x) & (Extrovert(x) | Introvert(x))) -> ((Extrovert(x) | Introvert(x))))", "all x.((Person(x) & (Extrovert(x) | Introvert(x))) -> (Extrovert(x) & Introvert(x)))", "all x.((Person(x) & (Extrovert(x) | Introvert(x))) -> -Extrovert(x))"]}
{"id": "folio_train_405", "nl": "If someone is an introvert, then they are shy and reticent. ", "fol": "all x.(IsIntrovert(x) -> IsShyAndReticent(x))", "prediction": ["all x.(Introvert(x) -> (Shy(x) & Reticent(x)))", "all x.(Introvert(x) -> (Shy(x) & Reticent(x)))", "all x.((Introvert(x) & Shy(x) & Reticent(x)) -> Introvert(x))", "all x.(Introvert(x) -> (Shy(x) & Reticent(x)))", "all x.(Introverted(x) -> (Shy(x) & Reticent(x)))", "all x.(Introvert(x) -> (Shy(x) & Reticent(x)))", "all x.(Introverted(x) -> (Shy(x) & Reticent(x)))", "all x.((Introvert(x) & Shy(x) & Reticent(x)) -> Introvert(x))", "all x.(Introvert(x) -> (Shy(x) & Retincent(x)))", "all x.(Introvert(x) -> (Shy(x) & Retincent(x)))", "all x.(Introverted(x) -> (Shy(x) & Reticent(x)))", "all x.(Introvert(x) -> (Scary(x) & Reticent(x)))", "all x.(Introvert(x) -> ShyAndReticent(x))", "all x.(Introvert(x) -> (Schy(x) & Reticent(x)))", "all x.(Introvert(x) -> (Scary(x) & Reticent(x)))", "all x.(Introverted(x) -> (Shy(x) & Reticent(x)))"]}
{"id": "folio_train_406", "nl": "No shy and reticent person likes to talk to strangers.", "fol": "all x.(IsShyAndReticent(x) -> -LikesToTalkToStrangers(x))", "prediction": ["all x.((Person(x) & Shy(x) & Reticent(x)) -> LikesToTalkToSons(x))", "all x.((Person(x) & Shy(x) & Reticent(x)) -> LikesToTalkToStranges(x))", "all x.((Person(x) & Shy(x) & Reticent(x)) -> LikesToTalkToStrangers(x))", "all x.((Person(x) & Shy(x) & Reticent(x)) -> LikesToTalkToS strangers(x))", "-exists x.(Person(x) & Shy(x) & Reticent(x) & LikesToTalkToSons(x))", "all x.((Person(x) & Shy(x) & Reticent(x)) -> LikesToTalkToSonders(x))", "all x.((Person(x) & Shy(x) & Reticent(x)) -> LikesToTalkToSons(x))", "all x.((Person(x) & Shy(x) & Reticent(x)) -> LikesToTalkToStorms(x))", "-exists x.(Person(x) & Shy(x) & Reticent(x) & LikesToTalkToStranges(x))", "-exists x.(Person(x) & Shy(x) & Reticent(x) & LikesToTalkToS strangers(x))", "all x.((Person(x) & Shy(x) & Reticent(x)) -> LikesToTalkToSurrounded(x))", "-exists x.(Person(x) & Shy(x) & Reticent(x) & LikesToTalkToSonders(x))", "-exists x.(Shy(x) & Reticent(x) & LikesToTalkToSons(x))", "-exists x.(Person(x) & Shy(x) & Reticent(x) & LikesToTalkToStorms(x))", "-exists x.(Shy(x) & Reticent(x) & LikesToTalkToStranges(x))", "-exists x.(Shy(x) & Reticent(x) & LikesToTalkToS strangers(x))"]}
{"id": "folio_train_407", "nl": "Jeff is not an extrovert and someone who likes to talk to strangers.", "fol": "(-IsExtrovert(Jeff) & -LikesToTalkToStrangers(Jeff))", "prediction": ["all x.(Jeff(x) -> (-Extrovert(x) & LikesToTalkToSonders(x)))", "all x.(Jeff(x) -> (-Extrovert(x) & LikesToTalkToS strangers(x)))", "all x.(Jeff(x) -> (-Extrovert(x) & LikesToTalkToSons(x)))", "all x.(Jeff(x) -> (-Extrovert(x) & LikesToTalkToStranges(x)))", "(-Extrovert(Jeff) & LikesToTalkToSonders(Jeff))", "all x.(Jeff(x) -> (-Extrovert(x) & LikesToTalkToStrangers(x)))", "all x.(Jeff(x) -> (-Extrovert(x) & LikesToTalkToScary(x)))", "all x.(Jeff(x) -> (-Extrovert(x) & LikesToTalkToSnakes(x)))", "all x.(Jeff(x) -> (-Extrovert(x) & LikesToTalkToStorms(x)))", "all x.(Jeff(x) -> (-Extrovert(x) & LikesToTalkToSnarls(x)))", "all x.(Jeff(x) -> (-Extrovert(x) & LikesToTalkToScaries(x)))", "all x.(Jeff(x) -> (-Extrovert(x) & LikesToTalkToSkeptics(x)))", "all x.(Jeff(x) -> (-Extrovert(x) & LikesToTalkToSecretaries(x)))", "all x.((Jeff(x) & -Extrovert(x)) -> LikesToTalkToSonders(x))", "(-Extrovert(Jeff) & LikesToTalkToS strangers(Jeff))", "all x.((Jeff(x) & -Extrovert(x)) -> LikesToTalkToSons(x))"]}
{"id": "folio_train_408", "nl": "Jeff is a shy and reticent person.", "fol": "IsShyAndReticent(Jeff)", "prediction": ["all x.(Jeff(x) -> (Shy(x) & Reticent(x)))", "all x.(Jeff(x) -> (Shy(x) & Reticent(x)))", "all x.(Jeff(x) -> (Shy(x) & Retincent(x)))", "all x.(Jeff(x) -> (Shy(x) & Reticent(x)))", "all x.(Jeff(x) -> (Shy(x) & Reticent(x)))", "all x.(Jeff(x) -> (Shy(x) & Retinent(x)))", "all x.(Jeff(x) -> (Schy(x) & Reticent(x)))", "all x.(Jeff(x) -> (Shy(x) & Retincent(x)))", "all x.(Jeff(x) -> (Shy(x) & Reluctant(x)))", "all x.(Jeff(x) -> (Shy(x) & Reluctant(x)))", "all x.((Jeff(x) & Shy(x) & Reticent(x)) -> Reticent(x))", "(Shy(Jeff) & Reticent(Jeff))", "(Shy(Jeff) & Reticent(Jeff))", "all x.((Jeff(x) & Shy(x) & Reticent(x)) -> Shy(x))", "all x.(Jeff(x) -> (Shy(x) & Retinent(x)))", "all x.((Jeff(x) & Shy(x) & Reticent(x)) -> Jeff(x))"]}
{"id": "folio_train_409", "nl": "Jeff is overtly expressive and likes to talk to strangers.", "fol": "(IsOvertlyExpressive(Jeff) & LikesToTalkToStrangers(Jeff))", "prediction": ["all x y.((Jeff(x) & Stranger(y)) -> (OvertlyExpressive(x) & LikesToTalkTo(x,y)))", "all x.(Jeff(x) -> (OvertlyExpressive(x) & LikesToTalkToSonders(x)))", "all x y.((Jeff(x) & Stranger(y)) -> (OvertlyExpressive(x) & LikesToTalk(x,y)))", "all x y.((Jeff(x) & OvertlyExpressive(x) & Stranger(y)) -> LikesToTalkTo(x,y))", "all x.(Jeff(x) -> (OvertlyExpressive(x) & LikesToTalkToStranges(x)))", "all x.(Jeff(x) -> (OvertlyExpressive(x) & LikesToTalkToS strangers(x)))", "all x.((Jeff(x) & OvertlyExpressive(x) & LikesToTalkToSonders(x)) -> OvertlyExpressive(x))", "all x.(Jeff(x) -> (OvertlyExpressive(x) & LikesToTalkToSons(x)))", "all x.(Jeff(x) -> (OvertlyExpressive(x) & LikesToTalkToStrangers(x)))", "all x.(Jeff(x) -> (OvertlyExpressive(x) & LikesToTalkToStorms(x)))", "all x.(Jeff(x) -> (OvertlyExpressive(x) & LikesToTalkToScary(x)))", "all x.((Jeff(x) & OvertlyExpressive(x)) -> LikesToTalkToSonders(x))", "all x.((Jeff(x) & OvertlyExpressive(x) & LikesToTalkToStranges(x)) -> OvertlyExpressive(x))", "all x.(Jeff(x) -> (OvertlyExpressive(x) & LikesToTalkToSnakes(x)))", "all x.(Jeff(x) -> (OvertlyExpressive(x) & LikesToTalkToScaries(x)))", "(OvertlyExpressive(Jeff) & LikesToTalkToSonders(Jeff))"]}
{"id": "folio_train_410", "nl": "If Jeff is either overtly expressive and likes to talk to strangers or neither overtly expressive nor likes to talk to strangers, then Jeff is neither an extrovert nor likes to talk to strangers.", "fol": "(((IsOvertlyExpressive(Jeff) & LikesToTalkToStrangers(Jeff)) | (-IsOvertlyExpressive(Jeff) & -LikesToTalkToStrangers(Jeff))) -> (-IsExtrovert(Jeff) & -LikesToTalkToStrangers(Jeff)))", "prediction": ["all x.((Jeff(x) & (OvertlyExpressive(x) & LikesToTalkToStrangers(x) | -OvertlyExpressive(x) & LikesToTalkToStrangers(x))) -> -Extrovert(x) & -LikesToTalkToStrangers(x))", "all x.((Jeff(x) & (OvertlyExpressive(x) & LikesToTalkToStorms(x) | -OvertlyExpressive(x) & LikesToTalkToStorms(x))) -> -Extrovert(x) & -LikesToTalkToStorms(x))", "all x.((Jeff(x) & (OvertlyExpressive(x) & LikesToTalkToScientists(x) | -OvertlyExpressive(x) & LikesToTalkToScientists(x))) -> -Extrovert(x) & -LikesToTalkToScientists(x))", "all x.((Jeff(x) & (OvertlyExpressive(x) & LikesToTalkToStrangers(x) | -OvertlyExpressive(x) & LikesToTalkToStrangers(x))) -> (-Extrovert(x) & -LikesToTalkToStrangers(x)))", "all x.((Jeff(x) & (OvertlyExpressive(x) & LikesToTalkToSnakes(x) | -OvertlyExpressive(x) & LikesToTalkToSnakes(x))) -> -Extrovert(x) & -LikesToTalkToSnakes(x))", "all x.((Jeff(x) & (OvertlyExpressive(x) & LikesToTalkToStorms(x) | -OvertlyExpressive(x) & LikesToTalkToStorms(x))) -> (-Extrovert(x) & -LikesToTalkToStorms(x)))", "all x.((Jeff(x) & (OvertlyExpressive(x) & LikesToTalkToSnorts(x) | -OvertlyExpressive(x) & LikesToTalkToSnorts(x))) -> -Extrovert(x) & -LikesToTalkToSnorts(x))", "all x.((Jeff(x) & (OvertlyExpressive(x) & LikesToTalkToStrongers(x) | -OvertlyExpressive(x) & LikesToTalkToStrongers(x))) -> -Extrovert(x) & -LikesToTalkToStrongers(x))", "all x.((Jeff(x) & (OvertlyExpressive(x) & LikesToTalkToSonders(x) | -OvertlyExpressive(x) & LikesToTalkToSonders(x))) -> -Extrovert(x) & -LikesToTalkToSonders(x))", "all x.((Jeff(x) & (OvertlyExpressive(x) & LikesToTalkToScientists(x) | -OvertlyExpressive(x) & LikesToTalkToScientists(x))) -> (-Extrovert(x) & -LikesToTalkToScientists(x)))", "all x.((Jeff(x) & (OvertlyExpressive(x) & LikesToTalkToSnakes(x) | -OvertlyExpressive(x) & LikesToTalkToSnakes(x))) -> (-Extrovert(x) & -LikesToTalkToSnakes(x)))", "all x.((Jeff(x) & (OvertlyExpressive(x) & LikesToTalkToSkeptics(x) | -OvertlyExpressive(x) & LikesToTalkToSkeptics(x))) -> -Extrovert(x) & -LikesToTalkToSkeptics(x))", "all x.((Jeff(x) & (OvertlyExpressive(x) & LikesToTalkToSnorts(x) | -OvertlyExpressive(x) & LikesToTalkToSnorts(x))) -> (-Extrovert(x) & -LikesToTalkToSnorts(x)))", "all x.((Jeff(x) & (OvertlyExpressive(x) & LikesToTalkToSnakes(x)) | -(OvertlyExpressive(x) & LikesToTalkToSnakes(x)))) -> -Extrovert(x) & -LikesToTalkToSnakes(x)))", "all x.((Jeff(x) & (OvertlyExpressive(x) & LikesToTalkToStrangers(x) | -OvertlyExpressive(x) & LikesToTalkToStrangers(x))) -> -Extrovert(x) & -LikesToTalkToStrangers(x))", "all x.((Jeff(x) & (OvertlyExpressive(x) & LikesToTalkToSnorts(x) | -OvertlyExpressive(x) & LikesToTalkToSnorts(x))) -> -Extrovert(x) & -LikesToTalkToSnorts(x)))"]}
{"id": "folio_train_411", "nl": "No low-scoring players are top players in the league.", "fol": "all x.(IsLowScoringPlayer(x) -> -IsTopPlayerInLeague(x))", "prediction": ["-exists x.(LowScoringPlayer(x) & TopPlayer(x))", "all x.((LowScoringPlayer(x) & TopPlayer(x)) -> -(LowScoringPlayer(x) & TopPlayerInLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLower", "all x.((LowScoringPlayer(x) & TopPlayer(x)) -> -(LowScoringPlayer(x) & TopPlayerInLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLower(LowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLo", "all x.((LowScoringPlayer(x) & TopPlayer(x)) -> -(LowScoringPlayer(x) & TopPlayerInLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLower(LowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLo", "all x.((LowScoringPlayer(x) & TopPlayer(x)) -> -(LowScoringPlayer(x) & TopPlayerInLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLower(LowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLo", "all x.((LowScoringPlayer(x) & TopPlayer(x)) -> -(LowScoringPlayer(x) & TopPlayerInLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLower(LowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLo", "all x.((LowScoringPlayer(x) & TopPlayer(x)) -> -(LowScoringPlayer(x) & TopPlayerInLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLower(LowerLo", "all x.((LowScoringPlayer(x) & TopPlayer(x)) -> -(LowScoringPlayer(x) & TopPlayerInLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLower(LowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLo", "all x.((LowScoringPlayer(x) & TopPlayer(x)) -> -(LowScoringPlayer(x) & TopPlayerInLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLower(LowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLo", "all x.((LowScoringPlayer(x) & TopPlayer(x)) -> -(LowScoringPlayer(x) & TopPlayerInLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLower(LowerLowerLo", "all x.((LowScoringPlayer(x) & TopPlayer(x)) -> -(LowScoringPlayer(x) & TopPlayerInLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLower(Lo", "all x.((LowScoringPlayer(x) & TopPlayer(x)) -> -(LowScoringPlayer(x) & TopPlayerInLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLower(LowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLo", "all x.((LowScoringPlayer(x) & TopPlayer(x)) -> -(LowScoringPlayer(x) & TopPlayerInLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLower(LowerLowerLowerLo", "all x.((LowScoringPlayer(x) & TopPlayer(x)) -> -(LowScoringPlayer(x) & TopPlayerInLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLower(LowerLowerLowerLowerLo", "all x.((LowScoringPlayer(x) & TopPlayer(x)) -> -(LowScoringPlayer(x) & TopPlayerInLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLower(LowerLowerLowerLowerLowerLowerLowerLowerLowerLo", "all x.((LowScoringPlayer(x) & TopPlayer(x)) -> -(LowScoringPlayer(x) & TopPlayerInLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLowerLower(LowerLowerLowerLowerLowerLo"]}
{"id": "folio_train_412", "nl": "Basketball players are either top players in the league or successfully shoot a high percentage of 3-pointers.", "fol": "all x.(IsTopPlayerInLeague(x) | SuccessfullyShootsHigh3PointerPercentage(x))", "prediction": ["all x.(BasketballPlayer(x) -> ((TopPlayerInLiga(x) | HighPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercent(x))))", "all x.(BasketballPlayer(x) -> ((TopPlayer(x) & InLowerLiga(x)) | HighPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercent(x)))", "all x.(BasketballPlayer(x) -> ((TopPlayerInLiga(x) | HighPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercent(x))))", "all x.(BasketballPlayer(x) -> ((TopPlayer(x) & InLiga(x)) | HighPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercent(x)))", "all x.(BasketballPlayer(x) -> ((TopPlayerInLiga(x) | HighPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercent(x))))", "all x.(BasketballPlayer(x) -> ((TopPlayer(x) & InLeague(x)) | HighPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercent(x)))", "all x.(BasketballPlayer(x) -> ((TopPlayer(x) & InLiga(x)) | HighPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercent(x))))", "all x.(BasketballPlayer(x) -> ((TopPlayerInLeague(x) | HighPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercent(x))))", "all x.(BasketballPlayer(x) -> ((TopPlayerInLeague(x) | HighPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercent(x)))", "all x.(BasketballPlayer(x) -> ((TopPlayerInLeague(x) | HighPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercent(x))))", "all x.(BasketballPlayer(x) -> ((TopPlayerInLowerLiga(x) | HighPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercent(x)))", "all x.(BasketballPlayer(x) -> ((TopPlayer(x) & InLiga(x)) | HighPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercent(x))))", "all x.(BasketballPlayer(x) -> ((TopPlayerInLocation(x) | HighPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercent(x))))", "all x.(BasketballPlayer(x) -> ((TopPlayerInLowerLiga(x) | HighPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercent(x))))", "all x.(BasketballPlayer(x) -> ((TopPlayerInLowerLiga(x) | HighPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercent(x))))", "all x.(BasketballPlayer(x) -> (TopPlayer(x) | HighPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercent(x)))"]}
{"id": "folio_train_413", "nl": "All players who successfully shoot a high percentage of 3-pointers are solid at shooting 2-pointers.", "fol": "all x.(SuccessfullyShootsHigh3PointerPercentage(x) -> SolidAtShooting2Pointers(x))", "prediction": ["all x.((Player(x) & HighPercentageOf3Pointers(x)) -> SolidAtShooting2Pointers(x))", "all x.((Player(x) & HighPercent3Pointers(x)) -> SolidAtShooting2Pointers(x))", "all x.((Player(x) & ShootsHighPercent3Pointers(x)) -> SolidAtShooting2Pointers(x))", "all x.((Player(x) & HighPercent3Pointers(x)) -> SolidAtShooting2-Pointers(x))", "all x.((Player(x) & HighPercent3Pointer(x)) -> SolidAtShooting2Pointers(x))", "all x.((Player(x) & ShootsHighPercent3Pointers(x)) -> SolidAtShooting2-Pointers(x))", "all x.((Player(x) & HighPercentageOf3Pointers(x)) -> SolidAtShooting2-Pointers(x))", "all x.((Player(x) & HighPercentPercent3Pointers(x)) -> SolidAtShooting2Pointers(x))", "all x.(SuccessfullyShootsHighPercentageOf3Pointers(x) -> SolidAtShooting2Pointers(x))", "all x.((Player(x) & HighPercentPercent3Pointers(x)) -> SolidAtShooting2-Pointers(x))", "all x.((Player(x) & HighPercent(x,3)) -> SolidAtShooting(x,2))", "all x.(SuccessfullyShootsHighPercent3Pointers(x) -> SolidAtShooting2Pointers(x))", "all x.(SuccessfullyShootsHighPercentageOf3Pointers(x) -> SolidAtShooting2-Pointers(x))", "all x.((Player(x) & HighPercent3Pointer(x)) -> SolidAtShooting2-Pointers(x))", "all x.((Player(x) & HighPercentage3Pointers(x)) -> SolidAtShooting2Pointers(x))", "all x.(SuccessfullyShootsHighPercent3Pointers(x) -> SolidAtShooting2-Pointers(x))"]}
{"id": "folio_train_414", "nl": "No players who are solid at shooting 2-pointers are bad at mid-range shots.", "fol": "-exists x.(SolidAtShooting2Pointers(x) -> BadAtMidRangeShots(x))", "prediction": ["all x.((Player(x) & SolidAtShooting2Pointers(x)) -> BadAtMidRangeShots(x))", "all x.((Player(x) & SolidAtShooting2-Pointers(x)) -> BadAtMidRangeShots(x))", "all x.((Player(x) & SolidAtShooting2Pointers(x)) -> BadAtMidRangeShoots(x))", "all x.((Player(x) & SolidAtShooting2-Pointers(x)) -> BadAtMidRangeShoots(x))", "-exists x.(Player(x) & SolidAtShooting2Pointers(x) & BadAtMidRangeShots(x))", "all x.((Player(x) & SolidAtShooting2-Pointers(x)) -> BadAtMediumRangeShots(x))", "all x.((Player(x) & SolidAtShootingTwoPointers(x)) -> BadAtMidRangeShots(x))", "all x.((Player(x) & SolidAtShooting2Pointers(x)) -> BadAtMediumRangeShots(x))", "all x.((Player(x) & SolidAtShooting2-Pointers(x)) -> BadAtMidRange(x))", "all x.((Player(x) & SolidAtShooting2Punches(x)) -> BadAtMidRangeShots(x))", "all x.((Player(x) & SolidAtShooting2Pointers(x)) -> BadAtMidRange(x))", "all x.((Player(x) & SolidAtShooting2Pointers(x)) -> BadAtMiddleRangeShots(x))", "all x.((Player(x) & SolidAtShooting2-Pointers(x)) -> BadAtMiddleRangeShots(x))", "-exists x.(Player(x) & SolidAtShooting2-Pointers(x) & BadAtMidRangeShots(x))", "all x.((Player(x) & SolidAtShootingBottomPointers(x)) -> BadAtMidRangeShots(x))", "all x.((Player(x) & SolidAtShooting(x,2)) -> BadAtMidRangeShots(x))"]}
{"id": "folio_train_415", "nl": "Candace is either a low-scoring player or successfully shoots a high percentage of 3-pointers.", "fol": "((IsLowScoringPlayer(Candace) & -SuccessfullyShootsHigh3PointerPercentage(Candace)) | (-IsLowScoringPlayer(Candace) & SuccessfullyShootsHigh3PointerPercentage(Candace)))", "prediction": ["all x.(Candace(x) -> (LowScoringPlayer(x) | HighPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercent(x)))", "all x.((Candace(x) & (LowScoringPlayer(x) | HighPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercent(x)))", "all x.((Candace(x) & (LowScoringPlayer(x) | HighPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercent(x))))", "all x.((Candace(x) & (LowScoringPlayer(x) | HighPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercent(x))))", "all x.(Candace(x) -> ((LowScoringPlayer(x) | HighPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercent(x))))", "all x.(Candace(x) -> (LowScoringPlayer(x) | HighPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercent(x)))", "all x.(Candace(x) -> (LowScoringPlayer(x) | HighPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPlayPlay(xCandace(x)))", "all x.(Candace(x) -> (LowScoringPlayer(x) | HighPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPlayPlay(x)))", "all x.(Candace(x) -> ((LowScoringPlayer(x) | HighPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercent(x)))", "all x.(Candace(x) -> ((LowScoringPlayer(x) | HighPercentage3Pointers(x))))", "all x.(Candace(x) -> ((LowScoringPlayer(x) | HighPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercent(x))))", "all x.(Candace(x) -> ((LowScoringPlayer(x) | HighPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPlayPlay(x))))", "all x.(Candace(x) -> ((LowScoringPlayer(x) | HighPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPlayPlayer(x))))", "all x.(Candace(x) -> ((LowScoringPlayer(x) | HighPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPlayPlay(xCandace(x))))", "all x.(Candace(x) -> ((LowScoringPlayer(x) | HighPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercent(x))))", "all x.(Candace(x) -> ((LowScoringPlayer(x) | HighPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercent(x))))"]}
{"id": "folio_train_416", "nl": "Candace is a top player in the league.", "fol": "IsTopPlayerInLeague(Candace)", "prediction": ["all x.((Candace(x) & TopPlayerInLiga(x)) -> TopPlayerInLiga(x))", "all x.((Candace(x) & TopPlayerInLiga(x)) -> TopPlayer(x))", "all x.((Candace(x) & TopPlayer(x)) -> TopPlayerInLiga(x))", "all x y.((Candace(x) & League(y)) -> TopPlayer(x,y))", "all x.((Candace(x) & TopPlayer(x)) -> TopPlayer(x))", "all x.(Candace(x) -> TopPlayerInLiga(x))", "all x.((Candace(x) & TopPlayerInLeague(x)) -> TopPlayerInLeague(x))", "all x.((Candace(x) & TopPlayer(x)) -> InLiga(x))", "all x.((Candace(x) & TopPlayerInLeague(x)) -> TopPlayer(x))", "all x.((Candace(x) & TopPlayer(x)) -> PlaysInLiga(x))", "all x.((Candace(x) & TopPlayer(x)) -> TopPlayerInLeague(x))", "all x.((Canace(x) & TopPlayerInLiga(x)) -> TopPlayerInLiga(x))", "all x.((Candace(x) & TopPlayerInLiga(x)) -> TopPlayerInLeague(x))", "all x.((Canace(x) & TopPlayerInLiga(x)) -> TopPlayer(x))", "all x.(Candace(x) -> TopPlayer(x))", "all x.((Candace(x) & TopPlayer(x)) -> League(x))"]}
{"id": "folio_train_417", "nl": "Candace is bad at mid-range shots.", "fol": "BadAtMidRangeShots(Candace)", "prediction": ["all x.(Candace(x) -> BadAtMidRangeShots(x))", "all x.((Candace(x) & MidRange(x)) -> BadAt(x,Candace))", "all x.((Candace(x) & MidRangeShoot(x)) -> Bad(x))", "all x.(Candace(x) -> BadAtMidRangeShoots(x))", "all x.((Candace(x) & MidRangeShoots(x)) -> Bad(x))", "all x.((Candace(x) & BadAtMidRangeShots(x)) -> BadAtMidRangeShots(x))", "all x.((Candace(x) & MidRange(x)) -> Bad(x))", "all x.((Candace(x) & MidRangeShoot(x)) -> BadAt(x,Candace))", "all x.(Candace(x) -> BadAtMiddleRangeShots(x))", "all x.((Candace(x) & MidRangeShot(x)) -> BadAt(x,Candace))", "all x.((Candace(x) & MidRange(x)) -> BadAt(x,y))", "all x.((Candace(x) & MidRangeShoot(x)) -> BadAt(x,y))", "all x.((Candace(x) & MidRangeShot(x)) -> Bad(x))", "all x.(Canace(x) -> BadAtMidRangeShots(x))", "all x.(Candace(x) -> BadAtMidRange(x))", "all x.((Candace(x) & MidRangeShots(x)) -> Bad(x))"]}
{"id": "folio_train_418", "nl": "Candace is solid at shooting 2-pointers or bad at mid-range shots.", "fol": "(SolidAtShooting2Pointers(Candace) | BadAtMidRangeShots(Candace))", "prediction": ["all x.(Candace(x) -> (StillAtShooting2Pointers(x) | BadAtShootingMidRangeShots(x)))", "all x.(Candace(x) -> (StandardAtShooting2Pointers(x) | BadAtShootingMidRangeShots(x)))", "all x.(Candace(x) -> ((StillAtShooting2Pointers(x) | BadAtShootingMidRangeShots(x))))", "all x.(Candace(x) -> ((SolidAtShooting2Pointers(x) | BadAtShootingMidRangeShots(x))))", "all x.(Candace(x) -> ((StandardAtShooting2Pointers(x) | BadAtShootingMidRangeShots(x))))", "all x.(Candace(x) -> (SolidAtShooting2Pointers(x) | BadAtShootingMidRangeShots(x)))", "all x.(Candace(x) -> (StillAtShooting2-Pointers(x) | BadAtShootingMidRangeShots(x)))", "all x.(Candace(x) -> (StillAtShooting2Pointers(x) | BadAtShootingMidRange(x)))", "all x.(Candace(x) -> (StandardAtShooting2Pointers(x) | BadAtShootingMidRange(x)))", "all x.(Candace(x) -> ((StandardAtShooting2Pointers(x) | BadAtShootingMidRange(x))))", "all x.(Candace(x) -> ((StillAtShooting2Pointers(x) | BadAtShootingMidRange(x))))", "(SolidAtShooting2Pointers(Candace) | BadAtShootingMidRangeShots(Candace))", "all x.(Candace(x) -> ((StillAtShooting2-Pointers(x) | BadAtShootingMidRange(x))))", "all x.(Candace(x) -> (StillAtShooting2Pointers(x) | BadAtShootingMittrangeShots(x)))", "all x.(Candace(x) -> ((SolidAtShooting2-Pointers(x) | BadAtShootingMidRange(x))))", "all x.(Candace(x) -> ((SolidAtShooting2Pointers(x) | BadAtShootingMidRange(x))))"]}
{"id": "folio_train_419", "nl": "Candace is either solid at shooting 2-pointers or bad at mid-range shots.", "fol": "(SolidAtShooting2Pointers(Candace) | BadAtMidRangeShots(Candace))", "prediction": ["all x.(Candace(x) -> (SolidAtShooting2Pointers(x) | BadAtShootingMidRangeShots(x)))", "all x.(Candace(x) -> (StillAtShooting2Pointers(x) | BadAtShootingMidRangeShots(x)))", "all x.(Candace(x) -> ((SolidAtShooting2Pointers(x) | BadAtShootingMidRangeShots(x))))", "all x.(Candace(x) -> ((SolidAtShooting2-Pointers(x) | BadAtShootingMidRangeShots(x))))", "all x.(Candace(x) -> (SolidAtShooting2-Pointers(x) | BadAtShootingMidRangeShots(x)))", "all x.(Candace(x) -> (StillAtShooting2-Pointers(x) | BadAtShootingMidRangeShots(x)))", "all x.(Canace(x) -> (SolidAtShooting2Pointers(x) | BadAtShootingMidRangeShots(x)))", "all x.(Candace(x) -> (SolidAtShooting2Pointers(x) | BadAtShootingMidRange(x)))", "all x.(Candace(x) -> (StandardAtShooting2Pointers(x) | BadAtShootingMidRangeShots(x)))", "all x.(Canace(x) -> (StillAtShooting2Pointers(x) | BadAtShootingMidRangeShots(x)))", "all x.(Candace(x) -> ((StillAtShooting2Pointers(x) | BadAtShootingMidRangeShots(x))))", "all x.(Candace(x) -> (SolidAtShooting2-Pointers(x) | BadAtShootingMittrangeShots(x)))", "all x.(Candace(x) -> (SolidAtShooting2Pointers(x) | BadAtShootingMittrangeShots(x)))", "all x.(Candace(x) -> (SolidAtShooting2-Pointers(x) | BadAtShootingMidRange(x)))", "all x.(Candace(x) -> (StillAtShooting2Pointers(x) | BadAtShootingMidRange(x)))", "all x.(Candace(x) -> (SolidAtShooting2Pointers(x) | BadAtShooting(x)))"]}
{"id": "folio_train_420", "nl": "Candace is a low-scoring player or bad at mid-range shots.", "fol": "(IsLowScoringPlayer(Candace) | BadAtMidRangeShots(Candace))", "prediction": ["all x.(Candace(x) -> (LowScoringPlayer(x) | BadAtMidRangeShots(x)))", "all x.(Candace(x) -> ((LowScoringPlayer(x) | BadAtMidRangeShots(x))))", "all x.(Candace(x) -> (LowScoringPlayer(x) | BadAtMidRange(x)))", "all x.(Candace(x) -> (LowScoringPlayer(x) | BadAtMidRangeShoots(x)))", "all x.((Candace(x) & (LowScoringPlayer(x) | BadAtMidRangeShots(x))) -> Candace(x))", "all x.(Candace(x) -> ((LowScoringPlayer(x) | BadAtMidRangeShoots(x))))", "all x.(Candace(x) -> ((LowScoringPlayer(x) | BadAtMidRange(x))))", "all x.((Candace(x) & (LowScoringPlayer(x) | BadAtMidRangeShots(x))) -> LowScoringPlayer(x))", "all x.((Candace(x) & (LowScoringPlayer(x) | BadAtMidRange(x))) -> Candace(x))", "all x.(Candace(x) -> (LowScoring(x) | BadAtMidRange(x)))", "all x.((Candace(x) & (LowScoringPlayer(x) | BadAtMidRange(x))) -> LowScoringPlayer(x))", "all x.(Canace(x) -> (LowScoringPlayer(x) | BadAtMidRangeShots(x)))", "all x.((Candace(x) & (LowScoring(x) | BadAtMidRange(x))) -> Candace(x))", "all x.((Candace(x) & (LowScoring(x) | BadAtMidRange(x))) -> LowScoring(x))", "all x.((Candace(x) & (LowScoringPlayer(x) | BadAtMidRangeShoots(x))) -> Candace(x))", "all x.(Canace(x) -> ((LowScoringPlayer(x) | BadAtMidRangeShots(x))))"]}
{"id": "folio_train_421", "nl": "Candace is either a low-scoring player or bad at mid-range shots.", "fol": "(IsLowScoringPlayer(Candace) | BadAtMidRangeShots(Candace))", "prediction": ["all x.(Candace(x) -> (LowScoringPlayer(x) | BadAtMidRangeShots(x)))", "all x.(Candace(x) -> (LowScoringPlayer(x) | BadAtMidRange(x)))", "all x.(Candace(x) -> (LowScoringPlayer(x) | BadAtMidRangeShoots(x)))", "all x.(Candace(x) -> (LowScoring(x) | BadAtMidRange(x)))", "all x.(Candace(x) -> ((LowScoringPlayer(x) | BadAtMidRangeShots(x))))", "all x.(Canace(x) -> (LowScoringPlayer(x) | BadAtMidRangeShots(x)))", "all x.((Candace(x) & (LowScoring(x) | BadAtMidRange(x))) -> (LowScoring(x) | BadAtMidRange(x)))", "all x.(Canace(x) -> (LowScoringPlayer(x) | BadAtMidRangeShoots(x)))", "all x.(Canace(x) -> (LowScoringPlayer(x) | BadAtMidRange(x)))", "all x.(Candace(x) -> ((LowScoringPlayer(x) | BadAtMidRangeShoots(x))))", "all x.((Candace(x) & LowScoringPlayer(x)) | BadAtMidRangeShots(x))", "all x.(Candace(x) -> (LowScoringPlayer(x) | BadAtMidRangePlayer(x)))", "all x.(Candace(x) -> ((LowScoringPlayer(x) | BadAtMidRange(x))))", "all x.(Candace(x) -> (LowScoringPlayer(x) | BadAtMediumRangeShots(x)))", "all x.((Candace(x) & LowScoring(x)) | BadAtMidRange(x))", "all x.((Candace(x) & (LowScoring(x) | BadAtMidRange(x))) -> (LowScoring(x) | BadAtMidRange(x))))"]}
{"id": "folio_train_422", "nl": "Candace is either a player who successfully shoots a high percentage of 3-pointers or is bad at mid-range shots.", "fol": "(SuccessfullyShootsHigh3PointerPercentage(Candace) | BadAtMidRangeShots(Candace))", "prediction": ["all x.((Player(x) & (SuccessfullyShootsHighPercent3Pointers(x) | BadAtMidRangeShots(x))) -> Candace(x))", "all x.((Player(x) & (SuccessfullyShotsHighPercent3Pointers(x) | BadAtMidRangeShots(x))) -> Candace(x))", "all x.((Player(x) & (HighPercent3Pointers(x) | BadAtMidRangeShots(x))) -> Candace(x))", "all x.((Player(x) & HighPercent3Pointers(x)) | BadAtMidRangeShots(x)) -> Candace(x))", "all x.(Candace(x) -> ((SuccessfullyShotsHighPercent3Pointers(x) | BadAtMidRangeShots(x))))", "all x.(Candace(x) -> ((SuccessfullyShootsHighPercent3Pointers(x) | BadAtMidRangeShots(x))))", "all x.(Candace(x) -> (SuccessfullyShootsHighPercent3Pointers(x) | BadAtMidRangeShots(x)))", "all x.(Candace(x) -> (SuccessfullyShotsHighPercent3Pointers(x) | BadAtMidRangeShots(x)))", "all x.((Player(x) & (SuccessfullyShootsHighPercent3Pointers(x) | BadAtMediumRangeShots(x))) -> Candace(x))", "all x.((Player(x) & (SuccessfullyShotsHighPercent3Pointers(x) | BadAtMediumRangeShots(x))) -> Candace(x))", "all x.((Player(x) & HighPercent3Pointers(x)) | BadAtMidRange(x)) -> Candace(x))", "all x.((Player(x) & HighPercentPercent3Pointers(x)) | BadAtMidRangeShots(x)) -> Candace(x))", "all x.((Player(x) & ShootsHighPercent3Pointers(x)) | BadAtMidRangeShots(x)) -> Candace(x))", "all x.((Player(x) & HighPercent3Pointers(x) | BadAtMidRangeShots(x)) -> Candace(x))", "all x.((Player(x) & (HighPercent3Pointers(x) | BadAtMidRange(x))) -> Candace(x))", "all x.(Candace(x) -> ((Player(x) & HighPercent3Pointers(x)) | BadAtMidRangeShots(x))))"]}
{"id": "folio_train_423", "nl": "If Candace is not solid at shooting 2-pointers and bad at mid-range shots, then Candace is not solid at shooting 2-pointers and is a player who successfully shoots a high percentage of 3-pointers.", "fol": "(-(SolidAtShooting2Pointers(Candace) & BadAtMidRangeShots(Candace)) -> (-SolidAtShooting2Pointers(Candace) & SuccessfullyShootsHigh3PointerPercentage(Candace)))", "prediction": ["all x.((Player(x) & -StandardAtShooting2Pointers(x) & BadAtShootingMidRangeShots(x)) -> (-StandardAtShooting2Pointers(x) & ShootsHighPercent3Pointers(x)))", "all x.((Player(x) & -StandardAtShooting2Pointers(x) & BadAtShootingMidRangeShots(x)) -> (-StandardAtShooting2Pointers(x) & SuccessfulShootsHighPercentageOf3Pointers(x)))", "all x.((Player(x) & -StandardAtShooting2-Pointers(x) & BadAtShootingMidRangeShots(x)) -> (-StandardAtShooting2-Pointers(x) & ShootsHighPercent3Pointers(x)))", "all x.((Player(x) & -StandardAtShooting2-Pointers(x) & BadAtShootingMidRangeShots(x)) -> (-StandardAtShooting2-Pointers(x) & SuccessfulShootsHighPercentageOf3Pointers(x)))", "all x.((Player(x) & -StandardAtShooting2-Pointers(x) & BadAtShootingMidRangeShots(x)) -> (-StandardAtShooting2-Pointers(x) & HighPercentPercentPercentShooting3Pointers(x)))", "all x.((Player(x) & -StandardAtShooting2-Pointers(x) & BadAtShootingMidRangeShots(x)) -> (-StandardAtShooting2-Pointers(x) & HighPercentageOf3Pointers(x)))", "all x.((Candace(x) & -StandardAtShooting2-Pointers(x) & BadAtShootingMidRangeShots(x)) -> (-StandardAtShooting2-Pointers(x) & -SuccessfullyShootsHighPercentageOf3Pointers(x)))", "all x.((Candace(x) & -StandardAtShooting2-Pointers(x) & BadAtShootingMidRangeShots(x)) -> (-StandardAtShooting2-Pointers(x) & HighPercentPercentPercentShooting3Pointers(x)))", "all x.((Candace(x) & -StandardAtShooting2-Pointers(x) & BadAtShootingMidRangeShots(x)) -> (-StandardAtShooting2-Pointers(x) & HighPercentageOf3Pointers(x)))", "all x.((Candace(x) & -StandardAtShooting2Pointers(x) & BadAtShootingMidRangeShots(x)) -> (-StandardAtShooting2Pointers(x) & SuccessfulShootsHighPercentageOf3Pointers(x)))", "all x.((Candace(x) & -StandardAtShooting2-Pointers(x) & BadAtShootingMidRangeShots(x)) -> (-StandardAtShooting2-Pointers(x) & -SuccessfulAtShootingHighPercent3Pointers(x)))", "all x.((Candace(x) & -StandardAtShooting2-Pointers(x) & BadAtShootingMidRangeShots(x)) -> (-StandardAtShooting2-Pointers(x) & SuccessfulShootsHighPercentageOf3Pointers(x)))", "all x.((Candace(x) & -StandardAtShooting2-Pointers(x) & BadAtShootingMidRangeShots(x)) -> (-StandardAtShooting2-Pointers(x) & -SuccessfulAtShootingHighPercentageOf3Pointers(x)))", "all x.((Candace(x) & -StandardAtShooting2-Pointers(x) & BadAtShootingMidRangeShots(x)) -> (-StandardAtShooting2-Pointers(x) & -SuccessfullyShootsHighPercentOf3Pointers(x)))", "all x.((Player(x) & -StandardAtShooting2-Pointers(x) & BadAtShootingMidRangeShots(x)) -> (-StandardAtShooting2-Pointers(x) & SuccessfulShootsHighPercentOf3Pointers(x)))", "all x.((Candace(x) & -StandardAtShooting2-Pointers(x) & BadAtShootingMidRangeShots(x)) -> (-StandardAtShooting2-Pointers(x) & -SuccessfullyShootsHighPercent3Pointers(x)))"]}
{"id": "folio_train_424", "nl": "If Candace is solid at shooting 2-pointers or successfully shoots a high percentage of 3-pointers, then Candace is a top player in the league and bad at mid-range shots.", "fol": "((SolidAtShooting2Pointers(Candace) | SuccessfullyShootsHigh3PointerPercentage(Candace)) -> (IsTopPlayerInLeague(Candace) & BadAtMidRangeShots(Candace)))", "prediction": ["all x.((Candace(x) & (SolidAtShooting2Pointers(x) | HighPercentageOf3Pointers(x))) -> (TopPlayer(x) & BadAtMidRangeShots(x)))", "all x.((Candace(x) & (SolidAtShooting2Pointers(x) | HighPercentageOf3Pointers(x))) -> (TopPlayerInLiga(x) & BadAtMidRangeShots(x)))", "all x.((Candace(x) & (SolidAtShooting2-Pointers(x) | HighPercentageOf3Pointers(x))) -> (TopPlayer(x) & BadAtMidRangeShots(x)))", "all x.((Candace(x) & (SolidAtShooting2-Pointers(x) | HighPercentageOf3Pointers(x))) -> (TopPlayerInLiga(x) & BadAtMidRangeShots(x)))", "all x.((Candace(x) & (SolidAtShooting2-Pointers(x) | HighPercentageAtShooting3Pointers(x))) -> (TopPlayer(x) & BadAtMidRangeShots(x)))", "all x.((Candace(x) & (SolidAtShooting2-Pointers(x) | HighPercentageAtShooting3Pointers(x))) -> (TopPlayerInLiga(x) & BadAtMidRangeShots(x)))", "all x.((Candace(x) & (StillAtShooting2Pointers(x) | HighPercentageOf3Pointers(x))) -> (TopPlayer(x) & BadAtMidRangeShots(x)))", "all x.((Candace(x) & (StandardAtShooting2Pointers(x) | HighPercentageOf3Pointers(x))) -> (TopPlayer(x) & BadAtMidRangeShots(x)))", "all x.((Candace(x) & (SolidAtShooting2Pointers(x) | HighPercentageOf3Pointers(x))) -> (TopPlayer(x) & BadAtMidRange(x)))", "all x.((Candace(x) & (SolidAtShooting2-Pointers(x) | HighPercentageOfThreePointers(x))) -> (TopPlayer(x) & BadAtMidRangeShots(x)))", "all x.((Candace(x) & (SolidAtShooting2Pointers(x) | HighPercentageAtShooting3Pointers(x))) -> (TopPlayer(x) & BadAtMidRangeShots(x)))", "all x.((Candace(x) & (SolidAtShooting2Pointers(x) | HighPercentageAtShooting3Pointers(x))) -> (TopPlayerInLiga(x) & BadAtMidRangeShots(x)))", "all x.((Candace(x) & (SolidAtShootingTwoPointers(x) | HighPercentageOfThreePointers(x))) -> (TopPlayer(x) & BadAtMidRangeShots(x)))", "all x.((Candace(x) & (SolidAtShooting2-Pointers(x) | HighPercentAtShooting3Pointers(x))) -> (TopPlayerInLiga(x) & BadAtMidRangeShots(x)))", "all x.((Candace(x) & (SolidAtShooting2Pointers(x) | HighPercentageOf3Pointers(x))) -> (TopPlayerInLiga(x) & BadAtMidRange(x)))", "all x.((Candace(x) & (SolidAtShooting2-Pointers(x) | HighPercentageOf3Pointers(x))) -> (TopPlayer(x) & BadAtMidRange(x)))"]}
{"id": "folio_train_425", "nl": "No plants are fungi.", "fol": "all x.(IsPlant(x) -> -IsFungi(x))", "prediction": ["-exists x.(Plant(x) & Fungus(x))", "-exists x.(Plant(x) & Fungi(x))", "all x.(Plant(x) -> -Fungus(x))", "all x.(Plant(x) -> -Fungi(x))", "-exists x.(Plant(x) & -Fungus(x))", "(-exists x.(Plant(x) & Fungus(x)))", "-exists x.(Plant(x) & -Fungi(x))", "(-exists x.(Plant(x) & Fungi(x)))", "exists x.(Plant(x) & -Fungus(x))", "-exists x.(Plant(x) & Fungal(x))", "exists x.(Plant(x) & -Fungi(x))", "(exists x.(Plant(x) & Fungus(x)))", "\u2013exists x.(Plant(x) & Fungus(x))", "(exists x.(Plant(x) & Fungi(x)))", "all x.(Plant(x) -> NoFungus(x))", "all x.(Plant(x) -> -Fiber(x))"]}
{"id": "folio_train_426", "nl": "Mushrooms are fungi.", "fol": "all x.(IsMushroom(x) -> IsFungi(x))", "prediction": ["all x.(Mushroom(x) -> Fungus(x))", "all x.(Mushroom(x) -> Fungi(x))", "all x y.((Mushroom(x) & Fungus(y)) -> Fungus(x))", "all x.(Mushroom(x) -> Fungus(x))", "all x y.((Mushroom(x) & Fungus(y)) -> Is(x,y))", "all x y.((Mushroom(x) & Fungus(y)) -> Fungus(x,y))", "all x y.((Mushroom(x) & Fungus(y)) -> Fungi(x))", "all x y z.((Mushroom(x) & Fungus(y) & Fungus(z)) -> Fungus(x))", "all x y.((Mushroom(x) & Fungus(y)) -> (Fungus(x) & Fungus(y)))", "all x y.((Mushroom(x) & Fungus(y)) -> (Fungus(x) & Fungus(x)))", "all x.((Mushroom(x) & Fungus(x)) -> Fungus(x))", "all x y.((Mushroom(x) & Fungus(y)) -> IsFungus(x,y))", "all x y.((Mushroom(x) & Fungus(y)) -> FoundIn(x,y))", "all x y.((Mushroom(x) & Fungus(y)) -> IsFungus(x))", "all x y.((Mushroom(x) & Fungus(y)) -> Are(x,y))", "all x y.((Mushroom(x) & Fungus(y)) -> (Fungus(x) | Fungus(y)))"]}
{"id": "folio_train_427", "nl": "No plants are mushrooms.", "fol": "all x.(IsPlant(x) -> -IsMushroom(x))", "prediction": ["-exists x.(Plant(x) & Mushroom(x))", "all x.(Plant(x) -> -Mushroom(x))", "-exists x.(Plant(x) & -Mushroom(x))", "all x.((Plant(x) & -Mushroom(x)) -> -exists y.(Plant(y) & -exists z.(Mushroom(z) & -exists w.(Mushroom(w) & -exists w.(Mushroom(w) & -exists w.(Mushroom(w) & -exists w.(Mushroom(w)))))", "all x.((Plant(x) & -Mushroom(x)) -> -exists y.(Plant(y) & -exists z.(Mushroom(z) & -exists w.(Mushroom(w) & -exists w.(Mushroom(w) & -exists w.(Mushroom(w) & -exists w.(Mushroom(w) & Mushroom(w) & Mushroom(w))))", "all x.((Plant(x) & -Mushroom(x)) -> -exists y.(Plant(y) & -exists z.(Mushroom(z) & -exists w.(Mushroom(w) & -exists w.(Mushroom(w) & -exists w.(Mushroom(w) & -exists w.(Mushroom(w) & Mushroom(w)))))", "all x.((Plant(x) & -Mushroom(x)) -> -exists y.(Plant(y) & -exists z.(Mushroom(z) & -exists w.(Mushroom(w) & -exists w.(Mushroom(w) & -exists w.(Mushroom(w) & -exists w.(Mushroom(w)) & Mushroom(w))))", "all x.((Plant(x) & -Mushroom(x)) -> -exists y.(Plant(y) & -exists z.(Mushroom(z) & -exists w.(Mushroom(w) & -exists w.(Mushroom(w) & -exists w.(Mushroom(w) & -exists w.(Mushroom(w))))", "all x.((Plant(x) & -Mushroom(x)) -> -exists y.(Plant(y) & -exists z.(Mushroom(z) & -exists w.(Mushroom(w) & -exists w.(Mushroom(w) & -exists w.(Mushroom(w) & -exists w.(Mushroom(w)) & -Mushroom(w))))", "all x.((Plant(x) & -Mushroom(x)) -> -exists y.(Plant(y) & -exists z.(Mushroom(z) & -exists w.(Mushroom(w) & -exists w.(Mushroom(w) & -exists w.(Mushroom(w) & -exists w.(Mushroom(w) & Mushroom(z) & Mushroom(w))))", "all x.((Plant(x) & -Mushroom(x)) -> -exists y.(Plant(y) & -exists z.(Mushroom(z) & -exists w.(Mushroom(w) & -exists w.(Mushroom(w) & -exists w.(Mushroom(w) & -exists w.(Mushroom(w) & -Mushroom(w)))))", "all x.((Plant(x) & -Mushroom(x)) -> -exists y.(Plant(y) & -exists z.(Mushroom(z) & -exists w.(Mushroom(w) & -exists w.(Mushroom(w) & -exists w.(Mushroom(w) & -exists w.(Mushroom(x,w)))))", "all x.((Plant(x) & -Mushroom(x)) -> -exists y.(Plant(y) & -exists z.(Mushroom(z) & -exists w.(Mushroom(w) & -exists w.(Mushroom(w) & -exists w.(Mushroom(w) & -exists w.(Mushroom(w) & Mushroom(w)) & Mushroom(w))))", "all x.((Plant(x) & -Mushroom(x)) -> -exists y.(Plant(y) & -exists z.(Mushroom(z) & -exists w.(Mushroom(w) & -exists w.(Mushroom(w) & -exists w.(Mushroom(w) & -exists w.(Mushroom(w) & Mushroom(z) & Mushroom(w)))))", "all x.((Plant(x) & -Mushroom(x)) -> -exists y.(Plant(y) & -exists z.(Mushroom(z) & -exists w.(Mushroom(w) & -exists w.(Mushroom(w) & -exists w.(Mushroom(w) & -exists w.(Mushroom(w) & Mushroom(w))))", "all x.((Plant(x) & -Mushroom(x)) -> -exists y.(Plant(y) & -exists z.(Mushroom(z) & -exists w.(Mushroom(w) & -exists w.(Mushroom(w) & -exists w.(Mushroom(w) & -exists w.(Mushroom(w) & Mushroom(w) & Mushroom(w)))))"]}
{"id": "folio_train_428", "nl": "New York City is on the East Coast. ", "fol": "LocatedIn(Newyorkcity,Eastcoast)", "prediction": ["all x.(NewYorkCity(x) -> EastCoast(x))", "all x.(NewYorkCity(x) -> OnEastCoast(x))", "all x.((NewYorkCity(x) & EastCoast(x)) -> On(x,y))", "all x y.((NewYorkCity(x) & EastCoast(y)) -> On(x,y))", "All x.(NewYorkCity(x) -> EastCoast(x))", "All x.(NewYorkCity(x) -> OnEastCoast(x))", "all x.((NewYork(x) & EastCoast(x)) -> On(x,y))", "all x.(NewYork(x) -> EastCoast(x))", "all x.(NewYork(x) -> OnEastCoast(x))", "(EastCoast(NewYork) & EastCoast(NewYork))", "all x.((NewYorkCity(x) & EastCoast(x)) -> LocatedOn(x,y))", "all x.((NewYorkCity(x) & EastCoast(y)) -> On(x,y))", "all x y.((NewYorkCity(x) & EastCoast(y)) -> LocatedOn(x,y))", "(EastCoast(NewYorkCity) & EastCoast(NewYorkCity))", "All x.(NewYork(x) -> EastCoast(x))", "(EastCoast(NewYorkCity) -> On(NewYorkCity))"]}
{"id": "folio_train_429", "nl": "Seattle is on the West Coast. ", "fol": "LocatedIn(Seattle,Westcoast)", "prediction": ["all x.(Seattle(x) -> WestCoast(x))", "all x.(Seattle(x) -> OnWestCoast(x))", "all x y.((Seattle(x) & WestCoast(y)) -> On(x,y))", "(WestCoast(Seattle) & WestCoast(Seattle))", "all x.((Seattle(x) & WestCoast(x)) -> On(x,y))", "All x.(Seattle(x) -> WestCoast(x))", "all x.(Seattle(x) -> WestCoast(x))", "all x.(Seattle(x) -> (WestCoast(x) & WestCoast(x)))", "all x.(Seattle(x) -> OnWESTCoast(x))", "all x y.((Seattle(x) & WestCoast(y)) -> WestCoast(x,y))", "all x y.((Seattle(x) & WestCoast(y)) -> LocatedOn(x,y))", "all x y.((Seattle(x) & WestCoast(y)) -> IsOn(x,y))", "exists x.(Seattle(x) & WestCoast(x))", "(WestCoast(Seattle) & On(Seattle,WestCoast))", "(WestCoast(Seattle) -> On(Seattle,WestCoast))", "all x y.((Seattle(x) & WestCoast(y)) -> Located(x,y))"]}
{"id": "folio_train_430", "nl": "If a person from a city on the East coast is traveling to a city on the west coast, they will be on a long flight.", "fol": "all z.((DepartingFrom(x,y) & LocatedIn(y,Eastcoast) & ArrivingAt(x,z) & LocatedIn(z,Westcoast)) -> IsLongFlight(x))", "prediction": ["all x y z.((Person(x) & City(y) & City(z) & EastCoast(y) & WestCoast(z) & TravelsTo(x,y,z)) -> LongFlight(x))", "all x y.((Person(x) & CityOnEastCoast(x) & CityOnWestCoast(y)) -> LongFlight(x))", "all x.((Person(x) & CityOnEastCoast(x) & CityOnWestCoast(x)) -> LongFlight(x))", "all x y.((Person(x) & CityOnEastCoast(x,y) & CityOnWestCoast(y)) -> LongFlight(x))", "all x y.((Person(x) & City(y) & EastCoast(x) & WestCoast(y)) -> LongFlight(x))", "all x y.((Person(x) & CityOnEastCoast(x) & CityOnWestCoast(y) & TravelsTo(x,y)) -> LongFlight(x))", "all x y.((Person(x) & City(y) & EastCoast(x) & WestCoast(y) & TravelsTo(x,y)) -> LongFlight(x))", "all x y.((Person(x) & CityOnEastCoast(x) & CityOnWestCoast(y)) -> LongFlight(x,y))", "all x y.((Person(x) & City(y) & EastCoast(x,y) & WestCoast(y)) -> LongFlight(x))", "all x y.((Person(x) & City(y) & EastCoast(y) & WestCoast(y)) -> LongFlight(x,y))", "all x y.((Person(x) & City(y) & EastCoast(x) & WestCoast(y)) -> LongFlight(x,y))", "all x y z.((Person(x) & City(y) & City(z) & EastCoast(x) & WestCoast(y) & TravelsTo(x,y,z)) -> LongFlight(x))", "all x y.((Person(x) & City(y) & EastCoast(y) & WestCoast(y) & TravelsTo(x,y)) -> LongFlight(x))", "all x y.((Person(x) & City(y) & EastCoast(y) & WestCoast(y)) -> LongFlight(x))", "all x y z.((Person(x) & City(y) & City(z) & EastCoast(y) & WestCoast(z)) -> LongFlight(x))", "all x y z.((Person(x) & City(y) & City(z) & EastCoast(y) & WestCoast(z) & TravelingTo(x,y,z)) -> LongFlight(x))"]}
{"id": "folio_train_431", "nl": "Most passengers on flights to Seattle from New York City are not in first class.", "fol": "exists x.(-IsInFirstClass(x) & DepartingFrom(x,Newyorkcity) & ArrivingAt(x,Seattle))", "prediction": ["all x y.((Passenger(x) & SeattleFlight(y) & NewYorkCity(y)) -> -FirstClass(x,y))", "all x.((Passenger(x) & SeattleFlight(x) & NewYorkCity(y)) -> -FirstClass(x))", "all x y.((Passenger(x) & Flight(y) & NewYorkCity(y)) -> -FirstClass(x,y))", "all x y.((Passenger(x) & Flight(y) & NewYork(y)) -> -FirstClass(x,y))", "all x.((Passenger(x) & SeattleFlight(x) & NewYorkCityFlight(x)) -> -FirstClass(x))", "all x.((Passenger(x) & NewYorkCityFlight(x) & SeattleFlight(x)) -> -FirstClass(x))", "all x y.((Passenger(x) & SeattleFlight(y) & NewYorkCity(y)) -> -FirstClass(x))", "all x.((Passenger(x) & SeattleFlight(x) & NewYorkCity(y)) -> -FirstClass(x,y))", "all x y z.((Passenger(x) & Flight(y) & Seattle(z) & NewYorkCity(y) & NewYorkCity(z)) -> -FirstClass(x,y,z))", "all x y.((Passenger(x) & SeattleFlight(y) & NewYork(y)) -> -FirstClass(x,y))", "all x.((Passenger(x) & NewYorkCityFlight(x)) -> -FirstClass(x))", "all x y.((Passenger(x) & Flight(y) & NewYorkCity(y) & Seattle(y)) -> -FirstClass(x,y))", "all x y.((Passenger(x) & Flight(y) & NewYork(y)) -> -FirstClass(x))", "all x y z.((Passenger(x) & Flight(y) & Seattle(z) & NewYorkCity(y) & NewYorkCity(z)) -> -FirstClass(x,z))", "all x y.((Passenger(x) & Flight(y) & NewYorkCity(y)) -> -FirstClass(x))", "all x y z.((Passenger(x) & Flight(y) & Seattle(z) & NewYork(y) & NewYork(z)) -> -FirstClass(x,y,z))"]}
{"id": "folio_train_432", "nl": "People on long flights are uncomfortable unless they're in first class", "fol": "all x.((IsLongFlight(x) & -IsInFirstClass(x)) -> FeelingUncomfortable(x))", "prediction": ["all x.((Person(x) & LongFlight(x) & -FirstClass(x)) -> Uncomfortable(x))", "all x.((PeopleOnLongFlights(x) & -FirstClass(x)) -> Uncomfortable(x))", "all x.((Person(x) & LongFlights(x) & -FirstClass(x)) -> Uncomfortable(x))", "all x.((Person(x) & LongFlight(x) & FirstClass(x)) -> Uncomfortable(x))", "all x y.((Person(x) & LongFlight(y) & -FirstClass(x)) -> Uncomfortable(x,y))", "all x y.((Person(x) & LongFlight(x) & FirstClass(y)) -> Uncomfortable(x,y))", "all x y.((Person(x) & LongFlight(y) & -FirstClass(x,y)) -> Uncomfortable(x))", "all x.((Person(x) & OnLongFlights(x) & -FirstClass(x)) -> Uncomfortable(x))", "all x.((People(x) & LongFlights(x) & -FirstClass(x)) -> Uncomfortable(x))", "all x y.((Person(x) & LongFlight(x) & FirstClass(y)) -> Uncomfortable(x))", "all x y.((Person(x) & LongFlight(y) & -FirstClass(x)) -> Uncomfortable(x))", "all x.((Person(x) & LongFlight(x)) -> (Uncomfortable(x) & -FirstClass(x)))", "all x.((People(x) & LongFlight(x) & -FirstClass(x)) -> Uncomfortable(x))", "all x y.((Person(x) & LongFlight(y) & FirstClass(x)) -> Uncomfortable(x,y))", "all x.((Person(x) & LongFlight(x)) -> Uncomfortable(x))", "all x.(LongFlight(x) -> (Uncomfortable(x) & -FirstClass(x)))"]}
{"id": "folio_train_433", "nl": "Some people flying from New York City to Seattle will be uncomfortable.", "fol": "exists x.(DepartingFrom(x,Newyorkcity) & ArrivingAt(x,Seattle) & FeelingUncomfortable(x))", "prediction": ["exists x.(Person(x) & FlyingFromNewYorkToSeattle(x) & Uncomfortable(x))", "exists x.(Person(x) & FlyingFromNewYorkToSeattle(x))", "exists x.(FlyingFromNewYorkToSeattle(x) & Uncomfortable(x))", "exists x.(Flight(x) & NewYorkCityToSeattle(x) & Uncomfortable(x))", "exists x.(Flight(x) & FromNewYorkToSeattle(x) & Uncomfortable(x))", "exists x.((Person(x) & FlyingFromNewYorkToSeattle(x)) -> Uncomfortable(x))", "exists x.(Person(x) & FliesFromNewYorkToSeattle(x) & Uncomfortable(x))", "exists x.(Person(x) & FlyingFromNewYorkCityToSeattle(x) & Uncomfortable(x))", "exists x.(Flight(x) & NewYorkToSeattle(x) & Uncomfortable(x))", "exists x.(Flight(x) & NewYork(y) & Seattle(z) & FromNewYorkToSeattle(x,y,z))", "exists x.(Flight(x) & FromNewYorkToSeattle(x))", "exists x.(Person(x) & FlyingFromNewYork(x) & ToSeattle(x))", "exists x.(Passenger(x) & FlyingFromNewYorkToSeattle(x) & Uncomfortable(x))", "exists x.(Flight(x) & NewYorkCity(x) & Seattle(x) & Uncomfortable(x))", "exists x.(Person(x) & FlyingFromNewYork(x) & ToSeattle(x) & Uncomfortable(x))", "exists x.(Passenger(x) & FlyingFromNewYorkToSeattle(x))"]}
{"id": "folio_train_434", "nl": "No road is clean.", "fol": "all x.(IsRoad(x) -> -IsClean(x))", "prediction": ["-exists x.(Road(x) & Clean(x))", "-all x.(Road(x) -> Clean(x))", "all x.(Road(x) -> -Clean(x))", "-exists x y.(Road(x) & Road(y) & Clean(x))", "-exists x y.(Road(x) & Road(y) & Clean(x,y))", "-exists x.(Road(x) & -Clean(x))", "(-exists x.(Road(x) & Clean(x)))", "-exists x y.(Road(x) & Road(y) & Clean(y))", "- exists x.(Road(x) & Clean(x))", "-(Road(x) & Clean(x))", "-(Road(Road) & Clean(Road))", "All x.(Road(x) -> -Clean(x))", "exists x.(Road(x) & Clean(x))", "-exists x.(Road(x) & Clean(y))", "-All x.(Road(x) -> Clean(x))", "all x.(Road(x) -> NoCleanRoad(x))"]}
{"id": "folio_train_435", "nl": "And some streets are roads.", "fol": "exists x.(IsStreet(x) & IsRoad(x))", "prediction": ["exists x.(Street(x) & Road(x))", "(exists x.(Street(x) & Road(x)))", "-exists x.(Street(x) & Road(x))", "-all x.(Street(x) -> Road(x))", "all x.(Street(x) -> Road(x))", "(all x.(Street(x) -> Road(x)))", "& exists x.(Street(x) & Road(x))", "exists x.(Road(x) & Road(x))", "exists x.(Street(x) & -Road(x))", "exists x y.(Street(x) & Road(y))", "exists x.(Road(x) & -Road(x))", "exist x.(Street(x) & Road(x))", "(exists x.(Road(x) & Road(x)))", "and exists x.(Street(x) & Road(x))", "exists x.(Stade(x) & Road(x))", "exists x.(Street(x) & Road(x))"]}
{"id": "folio_train_436", "nl": "Some streets are clean", "fol": "exists x.(IsStreet(x) & IsClean(x))", "prediction": ["exists x.(Street(x) & Clean(x))", "exists x y.(Street(x) & Street(y) & Clean(y))", "exists x y.(Street(x) & Street(y) & Clean(x))", "exists x y.(Street(x) & Street(y) & Clean(x,y))", "exists x y z.(Street(x) & Street(y) & Street(z) & Clean(y) & Street(z) & Clean(z))", "exists x.(Stadium(x) & Clean(x))", "exists x,y,z.(Street(x) & Street(y) & Street(z) & Clean(x))", "exists x,y,z.(Street(x) & Street(y) & Street(z) & Clean(y))", "exists x,y,z.(Street(x) & Street(y) & Street(z) & Clean(x,z))", "exists x.(Street(x) & Clean(x)) & exists y.(Street(y) & Street(z) & Clean(y)))", "exists x,y,z.(Street(x) & Street(y) & Street(z) & Clean(y,z))", "exists x.(Street(x) & CleanStreet(x))", "exists x,y,z.(Street(x) & Street(y) & Street(z) & Clean(x,y))", "exists x y z.(Street(x) & Street(y) & Street(z) & Clean(y))", "exists x y z.(Street(x) & Street(y) & Street(z) & Clean(y) & Clean(z))", "exists x.(Street(x) & Clean(x)) & exists y.(Street(y) & Street(y) & Clean(y)))"]}
{"id": "folio_train_437", "nl": "Musicians have very busy lives.", "fol": "all x.(IsMusician(x) -> HasBusyLife(x))", "prediction": ["all x.(Musician(x) -> VeryBusyLives(x))", "all x.(Musician(x) -> BusyLives(x))", "all x.(Musician(x) -> HasBusyLives(x))", "all x.(Musician(x) -> VeryBusyLife(x))", "all x.(Musician(x) -> BusyLife(x))", "all x.(Musician(x) -> HasBustyLives(x))", "all x y.((Musician(x) & Lives(y)) -> Busy(x))", "all x y.((Musician(x) & Lives(y)) -> Busy(x,y))", "all x.(Musician(x) -> VeryBustyLives(x))", "all x.(Musician(x) -> HasVeryBusyLives(x))", "all x.(Musician(x) -> HasBusyLife(x))", "all x.(Musician(x) -> HasBossLives(x))", "all x y.((Musician(x) & Lives(y)) -> VeryBusy(x,y))", "all x.(Musician(x) -> VeryBusyLivings(x))", "all x.(Musician(x) -> (BusyLives(x) | BusyLives(x)))", "all x.(Musician(x) -> VeryBustyLife(x))"]}
{"id": "folio_train_438", "nl": "Singh Kaur is a musician and famous.", "fol": "(IsMusician(SinghKaur) & IsFamous(SinghKaur))", "prediction": ["SinghKaur(Singh) -> (Musician(Singh) & Famous(Singh)))", "all x.(SinghKaur(x) -> (Musician(x) & Famous(x)))", "SinghKaur(s) -> (Musician(s) & Famous(s)))", "SinghKaur (Musician(Singh) & Famous(Singh))", "Singh Kaur (Musician(Singh) & Famous(Singh))", "(Musician(SinghKaur) & Famous(SinghKaur))", "SinghKaur(s) -> (Musician(s) & Famous(s)))", "SinghKaur(s) -> (Musician(s) & Famous(s) & Famous(s)))", "SinghKaur(Singh) & Musician(Singh) & Famous(Singh))", "SinghKaur(s) & Musician(s) & Famous(s))", "SinghKaur(Singh) -> (Musician(s) & Famous(s)))", "SinghKaur(Singh) is Musician(Singh) & Famous(Singh))", "SinghKaur (Musician(s) & Famous(s))", "SinghKaur(s) -> (Musician(s) & Famous(s) & Famous(s)))", "Singh Kaur (Musician) & Famous(SinghKaur))", "SinghKaur(Singh) -> (Musician(Singh) & Famed(Singh)))"]}
{"id": "folio_train_439", "nl": "If a musician is not famous, that musician will not make a lot of money.", "fol": "all x.((IsMusician(x) & -IsFamous(x)) -> -EarnMoney(x))", "prediction": ["all x.((Musician(x) & -Famous(x)) -> -MakesLotOfMoney(x))", "all x.((Musician(x) & -Famous(x)) -> -MakingLotOfMoney(x))", "all x.((Musician(x) & -Famous(x)) -> -MakingLittleOfMoney(x))", "all x.((Musician(x) & -Famous(x)) -> -MakesLittleOfMoney(x))", "all x.((Musician(x) & -Famous(x)) -> -MakingMillions(x))", "all x.((Musician(x) & -Famous(x)) -> -MakesLittleMoney(x))", "all x.((Musician(x) & -Famous(x)) -> -MakesMillionsOfMoney(x))", "all x.((Musician(x) & -Famous(x)) -> -MakesLotOfMore(x))", "all x.((Musician(x) & NotFamous(x)) -> -MakesLotOfMoney(x))", "all x.((Musician(x) & -Famous(x)) -> -MakingLittleMoney(x))", "all x.((Musician(x) & -Famous(x)) -> -MakesLoyalMoney(x))", "all x.((Musician(x) & -Famous(x)) -> -MakesLootOfMoney(x))", "all x.((Musician(x) & -Famous(x)) -> -MakingLoyalMoney(x))", "all x.((Musician(x) & -Famous(x)) -> -MakesLargeMoney(x))", "all x.((Musician(x) & -Famous(x)) -> -MakesMillions(x))", "all x.((Musician(x) & -Famous(x)) -> -MakingLotOfMore(x))"]}
{"id": "folio_train_440", "nl": "A musician can be a singer or a writer.", "fol": "exists x.((IsMusician(x) & IsSinger(x)) | IsWriter(x))", "prediction": ["all x.(Musician(x) -> (Singer(x) | Writer(x)))", "exists x.(Musician(x) & (Singer(x) | Writer(x)))", "all x.(Musician(x) -> (Singer(x) | Writer(x)))", "all x.(Musician(x) -> ((Singer(x) | Writer(x))))", "exists x.(Musician(x) & ((Singer(x) | Writer(x))) -> Musician(x)))", "all x y.((Musician(x) & Singer(y)) | Writer(y)) -> CanBe(x,y))", "all x y.((Musician(x) & Singer(y)) | Writer(y)) -> Musician(x))", "all x.(Musician(x) -> (Singer(x) | Writer(x)))", "all x.(Musician(x) -> exists y.(Singer(y) | Writer(y))))", "all x y.((Musician(x) & (Singer(y) | Writer(y))) -> CanBe(x,y))", "all x y.((Musician(x) & Singer(y)) | Writer(y))", "all x y.((Musician(x) & Singer(y)) | Writer(y)) -> Performs(x,y))", "all x y.((Musician(x) & (Singer(y) | Writer(y))) -> Musician(x))", "all x.(Musician(x) -> (CanBeSinger(x) | CanBeWriter(x)))", "exists x.(Musician(x) & ((Singer(x) & Writer(x)) | Singer(x))))", "all x y.((Musician(x) & (Singer(y) | Writer(y))) -> Performs(x,y))"]}
{"id": "folio_train_441", "nl": "Singh Kaur makes a lot of money.", "fol": "EarnMoney(SinghKaur)", "prediction": ["all x.(SinghKaur(x) -> MakesLotOfMoney(x))", "all x y.((SinghKaur(x) & Money(y)) -> Makes(x,y))", "all x.(SinghKaur(x) -> MakesLittleMoney(x))", "all x.((SinghKaur(x) & MakesLotOfMoney(x)) -> MakesLotOfMoney(x))", "all x.(SinghKaur(x) -> MakesLotsOfMoney(x))", "all x.(SinghKaur(x) -> MakesLotOfFunds(x))", "all x.(SinghKaur(x) -> MakesLoyalMoney(x))", "all x.(SinghKaur(x) -> MakesLootOfMoney(x))", "all x.(SinghKaur(x) -> MakesLotOfMore(x))", "All x.(SinghKaur(x) -> MakesLotOfMoney(x))", "all x.(SinghKaur(x) -> MakesLittleOfMoney(x))", "all x.((SinghKaur(x) & MakesLotOfMoney(x)) -> MakesLootOfMoney(x))", "all x.(SinghKaur(x) -> MakesMorning(x))", "all x y.((SinghKaur(x) & Income(y)) -> MakesLotOf(x,y))", "all x.(SinghKaur(x) -> LotsOfMoney(x))", "all x y.((SinghKaur(x) & Income(y)) -> MakesLotOfMoney(x,y))"]}
{"id": "folio_train_442", "nl": "Singh Kaur is a writer.", "fol": "IsWriter(SinghKaur)", "prediction": ["", "", "", "", "", "", "", "", "", ""]}
{"id": "folio_train_443", "nl": "Singh Kaur has a very busy life.", "fol": "HasBusyLife(SinghKaur)", "prediction": ["all x.(SinghKaur(x) -> VeryBusyLife(x))", "all x.(SinghKaur(x) -> BusyLife(x))", "all x y.((SinghKaur(x) & Life(y)) -> VeryBusy(x,y))", "all x y.((SinghKaur(x) & Life(y)) -> Busy(x,y))", "Singh Kaur has a very busyLife(SinghKaur)", "all x y.((SinghKaur(x) & Life(y)) -> VeryBusy(x))", "all x y.((SinghKaur(x) & Life(y)) -> Busy(x))", "SinghKaur has a veryBusyLife(SinghKaur)", "all x.((SinghKaur(x) & VeryBusyLife(x)) -> Has(x,y))", "all x.(SinghKaur(x) -> VeryBusyLife(x))", "all x.((SinghKaur(x) & BusyLife(x)) -> VeryBusy(x))", "all x.((SinghKaur(x) & VeryBusyLife(x)) -> Has(x,SinghKaur))", "All x.(SinghKaur(x) -> VeryBusyLife(x))", "all x.((SinghKaur(x) & BusyLife(x)) -> Has(x,SinghKaur))", "all x.((SinghKaur(x) & VeryBusyLife(x)) -> VeryBusyLife(x))", "all x.(SinghKaur(x) -> VeryBoundLife(x))"]}
{"id": "folio_train_444", "nl": "Each building is tall. ", "fol": "all x.(IsBuilding(x) -> -IsTall(x))", "prediction": ["all x.(Building(x) -> Tall(x))", "exists x.(Building(x) & Tall(x))", "all x.exists y.(Building(x) & Building(y) & Tall(x))", "all x.exists y.(Building(x) & Building(y) & Tall(x,y))", "all x y.((Building(x) & Building(y)) -> Tall(x))", "all x.exists y.(Building(x) & Building(y) & Tall(y))", "all x y.((Building(x) & Building(y)) -> Tall(x,y))", "-exists x.(Building(x) & Tall(x))", "-all x.(Building(x) -> Tall(x))", "all x.(Building(x) -> Tall(x))", "All x.(Building(x) -> Tall(x))", "all x.exists y.(Building(x) & Tall(y))", "(All x.(Building(x) -> Tall(x)))", "all x.exists y.(Building(x) & Tall(y) & BuiltIn(x,y))", "all x.exists y.(Building(x) & Tall(y) & LocatedIn(x,y))", "all x y.((Building(x) & Building(y)) -> Tall(y))"]}
{"id": "folio_train_445", "nl": "Everything tall has  height.", "fol": "all x.(IsTall(x) -> HasHeight(x))", "prediction": ["all x.(Tall(x) -> HasHeight(x))", "all x.exists y.(Tall(x) & Height(y) & Has(x,y))", "all x.((Tall(x) & HasHeight(x)) -> HasHeight(x))", "all x y.((Tall(x) & Tall(y)) -> HasHeight(x,y))", "all x.exists y.(Tall(x) & Height(y))", "all x y.((Tall(x) & Height(y)) -> Has(x,y))", "all x.(Tall(x) -> Height(x))", "all x.(Tall(x) -> HasHeight(x))", "all x.exists y.(Tall(x) & Tall(y) & HasHeight(x,y))", "all x.((Tall(x) & Height(x)) -> Has(x,y))", "exists x.(Tall(x) & HasHeight(x))", "all x.exists y.(Tall(x) & Height(y) & LocatedIn(x,y))", "all x.exists y.(Tall(x) & Height(y) & In(x,y))", "All x.(Tall(x) -> HasHeight(x))", "all x.exists y.(Tall(x) & Height(y) & Contains(x,y))", "all x.exists y.(Tall(x) & Height(y)) -> Has(x,y))"]}
{"id": "folio_train_446", "nl": "All buildings are magnificent.", "fol": "all x.(IsBuilding(x) -> Magnificent(x))", "prediction": ["all x.(Building(x) -> Magnificent(x))", "all x.(Building(x) -> Beautiful(x))", "all x.(Building(x) -> Stunning(x))", "all x.(Building(x) -> Fantastic(x))", "all x.(Building(x) -> Prestigious(x))", "all x.(Building(x) -> Majestic(x))", "all x.(Building(x) -> Pristine(x))", "all x.exists y.(Building(x) & Building(y) & Magnificent(x,y))", "all x.(Building(x) -> Pragmatic(x))", "all x.(Building(x) -> Praiseful(x))", "all x.(Building(x) -> Gorgeous(x))", "all x.(Building(x) -> Glamorous(x))", "all x.(Building(x) -> Grandiose(x))", "all x.exists y.(Building(x) & Building(y) & Magnificent(x))", "all x.(Building(x) -> Prachtful(x))", "all x.(Building(x) -> Wonderful(x))"]}
{"id": "folio_train_447", "nl": "A cat named Garfield, which is the main character of the film Garfield, is orange and fat and likes having lasagna. ", "fol": "(IsCat(Garfield) & IsMainCharacterOfGarfield(Garfield) & IsOrange(Garfield) & IsFat(Garfield) & LikesLasagna(Garfield))", "prediction": ["all x.((Cat(x) & Garfield(x) & MainCharacterOfFilmGarfield(x)) -> (Orange(x) & Fat(x) & LikesLasagne(x)))", "all x.((Cat(x) & Garfield(x) & MainCharacterOfFilmGarfield(x)) -> (Orange(x) & Fat(x) & LikesLasagna(x)))", "all x.((Cat(x) & Garfield(x)) -> (MainCharacterOfFilmGarfield(x) & Orange(x) & Fat(x) & LikesLasagne(x)))", "all x.((Cat(x) & NamedGarfield(x) & MainCharacterOfFilmGarfield(x)) -> (Orange(x) & Fat(x) & LikesLasagne(x)))", "all x y.((Cat(x) & Cat(y) & Garfield(x) & MainCharacterOfFilmGarfield(x)) -> (Orange(x) & Fat(x) & LikesLasagne(x)))", "all x.((Cat(x) & NameGarfield(x) & MainCharacterOfFilmGarfield(x)) -> (Orange(x) & Fat(x) & LikesLasagne(x)))", "all x.((Cat(x) & Garfield(x) & MainCharacterOfFilmGarfield)) -> (Orange(x) & Fat(x) & LikesLasagne(x)))", "all x.((Cat(x) & Garfield(x)) -> (Orange(x) & Fat(x) & LikesLasagne(x)))", "all x.(Cat(x) & Garfield(x) & MainCharacterOfFilmGarfield(x)) -> (Orange(x) & Fat(x) & LikesLasagne(x)))", "all x.((Cat(x) & Garfield(x) & MainCharacter(x) & FilmGarfield(x)) -> (Orange(x) & Fat(x) & LikesLasagne(x)))", "all x.((Cat(x) & Garfield(x) & MainCharacterOfFilm(x)) -> (Orange(x) & Fat(x) & LikesLasagne(x)))", "all x.(Cat(x) -> (Garfield(x) & MainCharacterOfFilmGarfield(x) & Orange(x) & Fat(x) & LikesLasagne(x)))", "all x.((Cat(x) & Garfield(x) & MainCharacterOfGarfield(x)) -> (Orange(x) & Fat(x) & LikesLasagne(x)))", "all x y.((Cat(x) & Cat(y) & Garfield(x) & MainCharacterOfFilmGarfield(x)) -> (Orange(y) & Fat(y) & LikesLasagne(x)))", "all x y.((Cat(x) & Garfield(y) & MainCharacterOfFilmGarfield(x)) -> (Orange(x) & Fat(x) & LikesLasagne(x)))", "all x.((Cat(x) & Garfield(x) & MainCharacterOfFilmGarfield(x)) -> (Orange(x) & Fat(x) & LikeLasagne(x)))"]}
{"id": "folio_train_448", "nl": "Garfield and Odie, who is another pet of Jon, share the same home. ", "fol": "(IsPetOf(Garfield,Jon) & IsPetOf(Odie,Jon) & SharesHomeWith(Garfield,Odie))", "prediction": ["all x.((Garfield(x) & Odie(x) & PetOfJon(x)) -> ShareHome(x))", "all x.((Garfield(x) & Odie(x) & PetOfJon(x)) -> SharesHome(x))", "all x y.((Garfield(x) & Odie(y) & PetOfJon(x)) -> ShareHome(x,y))", "all x y.((Pet(x) & Pet(y) & Garfield(x) & Odie(y)) -> ShareHome(x,y))", "all x.((Garfield(x) | Odie(x)) -> ShareHome(x))", "all x y.((Garfield(x) & Odie(y) & PetOf(y Jon)) -> ShareHome(x,y))", "all x y.((Garfield(x) & Odie(y) & PetOfJon(y)) -> ShareHome(x,y))", "all x y.((Pet(x) & Pet(y) & Garfield(x) & Odie(y)) -> SharesHome(x,y))", "all x.((Garfield(x) | Odie(x)) -> SharesHome(x))", "all x y.((Garfield(x) & Odie(y)) -> ShareHome(x,y))", "all x y.((Garfield(x) & Odie(y) & PetOfJon(x)) -> SharesHome(x,y))", "(Pet(Garfield) & Pet(Odie) & Pet(Garfield))", "(Pet(Garfield) & Pet(Odie) & PetOf(Garfield))", "all x y.((Pet(x) & Pet(y)) -> (Garfield(x) | Odie(x)) & ShareHome(x,y)))", "all x y.((Garfield(x) & Odie(y) & PetOf(y Jon)) -> SharesHome(x,y))", "all x y.((Garfield(x) & Odie(y)) -> (PetOf(x,y) & PetOf(y,Jon)))"]}
{"id": "folio_train_449", "nl": "Garfield hates Odie.", "fol": "Hates(Garfield,Odie)", "prediction": ["all x y.((Garfield(x) & Odie(y)) -> Hates(x,y))", "all x.(Garfield(x) -> HatesOdie(x))", "(Has(Garfield,Odie) & Hates(Garfield,Odie))", "all x.(GarfieldHas(x,Odie) -> Hates(x,Odie))", "(Has(Garfield,Odie) -> Hates(Garfield,Odie))", "(Has(Garfield,Odie) -> Hates(Garfield,Odie))", "all x y.((Garfield(x) & Odie(y)) -> Hate(x,y))", "all x.(GarfieldHasOdie(x) -> Hates(x,Odie))", "all x.(Garfield(x) -> Hates(x,Odie))", "(Has(Garfield,Odie) & Has(Garfield,Odie))", "All x.(Garfield(x) -> HatesOdie(x))", "(Has(Garfield,Odie) -> Has(Garfield,Odie))", "all x.(GarfieldHas(x,Odie) -> Has(x,Odie))", "Garfield HatesOdie(Garfield)", "all x.(GarfieldHas(x,Odie) -> Hate(x,Odie))", "all x.(GarfieldHasOdie(x) -> HatesOdie(x))"]}
{"id": "folio_train_450", "nl": "A pet who hates the pet with whom he shares the same owner is childish and possessive.", "fol": "all x.(exists y z.(IsPetOf(x,z) & IsPetOf(y,z) & Hates(x,y)) -> (IsChildish(x) & IsPossessive(x)))", "prediction": ["all x y.((Pet(x) & Pet(y) & HasSameOwner(x,y)) -> (Childish(x) & Possesses(x)))", "all x y.((Pet(x) & Pet(y) & HasSameOwner(x,y)) -> (Childish(x) & Possessional(x)))", "all x y.((Pet(x) & Pet(y) & HasSameOwner(x,y)) -> (Childish(x) & Possessory(x)))", "all x y.((Pet(x) & Pet(y) & Hates(x,y)) -> (Childish(x) & Possesses(x)))", "all x y.((Pet(x) & Pet(y) & Hates(x,y)) -> (Childish(x) & Possessional(x)))", "all x y.((Pet(x) & Pet(y) & HasSameOwner(x,y)) -> (Childish(x) & Possesseive(x)))", "all x y.((Pet(x) & Pet(y) & Hates(x,y)) -> (Childish(x) & Possessory(x)))", "all x y.((Pet(x) & Pet(y) & HasSameOwner(x,y)) -> (Childish(x) & Possessionive(x)))", "all x.((Pet(x) & Hates(x,y) & Owner(y)) -> (Childish(x) & Possesses(x)))", "all x.((Pet(x) & Hates(x,y) & Owner(y)) -> (Childish(x) & Possessional(x)))", "all x y z.((Pet(x) & Pet(y) & Owner(z) & Hates(x,y,z)) -> (Childish(x) & Possessional(x)))", "all x y z.((Pet(x) & Pet(y) & Owner(z) & Hates(x,y,z)) -> (Childish(x) & Possesses(x)))", "all x y.((Pet(x) & Pet(y) & HasSameOwner(x,y)) -> (Childish(x) & Possessorive(x)))", "all x.((Pet(x) & Hates(x,y) & Owner(y)) -> (Childish(x) & Possessory(x)))", "all x y z.((Pet(x) & Pet(y) & Owner(z) & Hates(x,y,z)) -> (Childish(x) & Possessory(x)))", "all x y.((Pet(x) & Pet(y) & Hates(x,y)) -> (Childish(x) & Possesseive(x)))"]}
{"id": "folio_train_451", "nl": "Cats are pets. ", "fol": "all x.exists y.(IsCat(x) -> IsPetOf(x,y))", "prediction": ["all x.(Cat(x) -> Pet(x))", "all x y.((Cat(x) & Pet(y)) -> Pet(x,y))", "all x y.((Cat(x) & Pet(y)) -> Pet(x))", "all x y.((Cat(x) & Pet(y)) -> (Pet(x) & Pet(y)))", "all x y.((Cat(x) & Pet(y)) -> (Pet(x,y) | Pet(x,y)))", "all x y.((Cat(x) & Pet(y)) -> (Pet(x) | Pet(y)))", "all x.(Cat(x) -> Pet(x))", "all x y.((Cat(x) & Pet(y)) -> (Pet(x,y) & Pet(y)))", "all x y.((Cat(x) & Pet(y)) -> (Pet(x,y) & Pet(x,y)))", "all x y.((Cat(x) & Pet(y)) -> Animal(x))", "all x y.((Cat(x) & Pet(y)) -> (Animal(x) & Pet(y)))", "all x y.((Cat(x) & Pet(y)) -> (Pet(x) & Pet(x)))", "all x y.((Cat(x) & Pet(y)) -> (Pet(x,y) | Pet(y)))", "all x y.((Cat(x) & Pet(y)) -> (Pet(x) | Pet(x)))", "all x y.((Cat(x) & Pet(y)) -> Animal(x,y))", "all x y.((Cat(x) & Animal(y)) -> Pet(x,y))"]}
{"id": "folio_train_452", "nl": "The main character of the film Garfield is childish and possessive.", "fol": "exists x.(IsMainCharacterOfGarfield(x) & IsChildish(x) & IsPossessive(x))", "prediction": ["all x.(Garfield(x) -> (Childish(x) & Possesses(x)))", "all x.((Film(x) & Garfield(x)) -> (Childish(x) & Possesses(x)))", "all x.((FilmGarfield(x) & Childish(x) & Possesses(x)) -> MainCharacter(x))", "all x.((Film(x) & Garfield(x)) -> (Childish(x) & Possessionive(x)))", "all x.((StarCharacter(x) & Garfield(x)) -> (Childish(x) & Possesses(x)))", "all x.(Garfield(x) -> (Childish(x) & Possessionive(x)))", "all x.((Film(x) & Garfield(x)) -> (Childish(x) & Possessional(x)))", "all x.(Garfield(x) -> (Childish(x) & Possessional(x)))", "all x.((StarCharacter(x) & Garfield(x)) -> (Childish(x) & Possessionive(x)))", "all x.((StarCharacter(x) & Garfield(x)) -> (Childish(x) & Possessional(x)))", "(MainCharacter(Garfield) & Childish(Garfield) & Possesses(Garfield))", "all x.((MainCharacter(x) & Garfield(x)) -> (Childish(x) & Possesses(x)))", "all x y.((Film(x) & Garfield(y)) -> (Childish(x) & Possessionive(x)))", "all x y.((Film(x) & Garfield(y)) -> (Childish(x) & Possesses(x)))", "all x.((StarCharacter(x) & FilmGarfield(x)) -> (Childish(x) & Possesses(x)))", "(MainCharacter(Garfield) & Childish(Garfield) & Possessionive(Garfield))"]}
{"id": "folio_train_453", "nl": "All humans eat.", "fol": "all x.(IsHuman(x) -> Eats(x))", "prediction": ["all x.(Human(x) -> Eats(x))", "all x.(Human(x) -> Eat(x))", "all x y.((Human(x) & Human(y)) -> Eats(x,y))", "all x.exists y.(Human(x) & Food(y) & Eats(x,y))", "all x y.((Human(x) & Animal(y)) -> Eats(x,y))", "all x y.((Human(x) & Food(y)) -> Eats(x,y))", "all x.exists y.(Human(x) & Food(y) & Eat(x,y))", "(all x.(Human(x) -> Eats(x)))", "all x.(Human(x) -> Eats(x))", "all x.exists y.(Human(x) & Eat(y))", "all x.exists y.(Human(x) & Eating(y))", "all x y.((Human(x) & Human(y)) -> Eat(x,y))", "exists x.(Human(x) & Eats(x))", "all x y.((Human(x) & Food(y)) -> Eat(x,y))", "(All x.(Human(x) -> Eats(x)))", "all x.exists y.(Human(x) & Eats(y))"]}
{"id": "folio_train_454", "nl": "If something eats, then it is not a plant.", "fol": "all x.(Eats(x) -> -IsPlant(x))", "prediction": ["all x.((Eats(x) & -Plant(x)) -> -Plant(x))", "all x.(Eats(x) -> -Plant(x))", "all x.((Eats(x) & Plant(x)) -> -Plant(x))", "all x.((Eats(x) & -Plant(x)) -> -Eats(x))", "all x.((Eats(x)) -> -Plant(x))", "all x.((Eats(x) & Plant(x)) -> -Eats(x))", "all x.((Eats(x) & -Plant(x)) -> NotPlant(x))", "all x.((Eats(x) & -Plant(x)) -> Plant(x))", "all x.((Eats(x) & NotPlant(x)) -> -Plant(x))", "all x.((Eats(x) & -Plant(x)) -> Eats(x))", "all x.(((Eats(x) & -Plant(x)) -> -Plant(x))", "all x.((Eats(x) & -Plant(x)) -> -EatsPlant(x))", "all x y.((Eats(x) & Plant(y)) -> -Plant(x))", "all x.((Food(x) & Eats(x)) -> -Plant(x))", "all x.((IsEats(x) & -Plant(x)) -> -Plant(x))", "all x.((Plant(x) & Eats(x)) -> -Plant(x))"]}
{"id": "folio_train_455", "nl": "A thing is either plant or animal.", "fol": "all x.(IsPlant(x) | IsAnimal(x))", "prediction": ["all x.(Thing(x) -> (Plant(x) | Animal(x)))", "all x.(Ding(x) -> (Plant(x) | Animal(x)))", "exists x.(Thing(x) & (Plant(x) | Animal(x)))", "all x.(Tea(x) -> (Plant(x) | Animal(x)))", "all x.(Tree(x) -> (Plant(x) | Animal(x)))", "all x.(Tad(x) -> (Plant(x) | Animal(x)))", "exists x.(Ding(x) & (Plant(x) | Animal(x)))", "all x.(Dog(x) -> (Plant(x) | Animal(x)))", "all x.(Tax(x) -> (Plant(x) | Animal(x)))", "all x.(Teathing(x) -> (Plant(x) | Animal(x)))", "all x.((Thing(x) & (Plant(x) | Animal(x))) -> (Plant(x) | Animal(x)))", "all x.(Matter(x) -> (Plant(x) | Animal(x)))", "exists x.(Thing(x) & Plant(x) & Animal(x))", "all x.(What(x) -> (Plant(x) | Animal(x)))", "all x.((Thing(x) & (Plant(x) | Animal(x))) -> Plant(x))", "all x.((Thing(x) & Plant(x)) | Animal(x))"]}
{"id": "folio_train_456", "nl": "All goats are animals.", "fol": "all x.(IsGoat(x) -> IsAnimal(x))", "prediction": ["all x.(Goat(x) -> Animal(x))", "all x.(Girl(x) -> Animal(x))", "all x.(Giant(x) -> Animal(x))", "all x y.((Goat(x) & Animal(y)) -> Animal(x))", "all x.(Goat(x) -> Animal(x))", "all x.(Habitat(x) -> Animal(x))", "all x.(Gird(x) -> Animal(x))", "all x.(Gat(x) -> Animal(x))", "all x y.((Goat(x) & Animal(y)) -> Animal(x,y))", "(all x.(Goat(x) -> Animal(x)))", "all x.exists y.(Goat(x) & Animal(y) & LivesIn(x,y))", "all x.exists y.(Goat(x) & Animal(y) & Animal(y))", "all x.exists y.(Goat(x) & Animal(y) & Animated(x))", "all x.exists y.(Goat(x) & Animal(y) & Animal(x))", "all x.exists y.(Goat(x) & Animal(y) & Animal(x,y))", "all x.(Gay(x) -> Animal(x))"]}
{"id": "folio_train_457", "nl": "No dirt is an animal.", "fol": "all x.(IsDirt(x) -> -IsAnimal(x))", "prediction": ["-exists x.(Dirt(x) & Animal(x))", "-exists x.(Dirt(x) & -Animal(x))", "all x.(Dirt(x) -> -Animal(x))", "all x.(Dirt(x) -> Animal(x))", "(-exists x.(Dirt(x) & Animal(x)))", "all x.((Dirt(x) & -Animal(x)) -> -Dirt(x))", "all x.((Dirt(x) & -Animal(x)) -> -(Dirt(x) & Animal(x)))", "-exists x.(Dry(x) & Animal(x))", "all x.((Dirt(x) & -Animal(x)) -> -Animal(x))", "(-exists x.(Dirt(x) & Animal(x)) & -exists y.(Dirt(y) & Animal(y))))", "-exists x.(Dirt(x) & Pet(x))", "(-exists x.(Dirt(x) & Animal(x)) & -exists y.(Dirt(y) & Animal(x))))", "all x.((Dirt(x) & -Animal(x)) -> -(Dirt(x) & -Animal(x)))", "-exists x.(Dirt(x) & Animal(y))", "-all x.(Dirt(x) -> Animal(x))", "all x.((Dirt(x) & -Animal(x)) -> -(Dirt(x) & Animal(x))))"]}
{"id": "folio_train_458", "nl": "Hulu is a goat or a human.", "fol": "(IsGoat(Hulu) | IsHuman(Hulu))", "prediction": ["all x.(Hulu(x) -> (Goat(x) | Human(x)))", "all x.(Human(x) -> (Goat(x) | Human(x)))", "exists x.(Hulu(x) & (Goat(x) | Human(x)))", "all x.(Hulu(x) -> (Goat(x) | Human(x)))", "(Goat(Hulu) | Human(Hulu))", "all x.(Hulu(x) -> (Goat(x) | Human(x)))", "all x.(Hula(x) -> (Goat(x) | Human(x)))", "all x.(Hulus(x) -> (Goat(x) | Human(x)))", "all x.(Hulu(x) -> (HasGoat(x) | HasHuman(x)))", "all x.(Hulu(x) -> (IsGoat(x) | IsHuman(x)))", "all x.(Hulu(x) -> (Gird(x) | Human(x)))", "all x.(Hulu(x) -> (Giant(x) | Human(x)))", "all x.(Huku(x) -> (Goat(x) | Human(x)))", "all x y.((Hulu(x) & Goat(y)) | Human(y))", "(Goat(hulu) | Human(hulu))", "all x y.((Hulu(x) & Goat(y)) | Human(x))"]}
{"id": "folio_train_459", "nl": "Hulu eats.", "fol": "Eats(Hulu)", "prediction": ["all x.(Hulu(x) -> Eats(x))", "exists x.(Hulu(x) & Eats(x))", "all x y.((Hulu(x) & Food(y)) -> Eats(x,y))", "all x y.((Hulu(x) & Eating(y)) -> Eats(x,y))", "all x y.((Hulu(x) & Eats(y)) -> Eats(x,y))", "All x.(Hulu(x) -> Eats(x))", "all x.(Hulus(x) -> Eats(x))", "all x y.((Hulu(x) & Eats(x)) -> Eats(y))", "all x y.((Hulu(x) & Eats(x,y)) -> Eats(x,y))", "all x.(Hulu(x) -> Eats(x))", "all x y.((Hulu(x) & Eats(x)) -> Eats(x,y))", "all x.(Hulu(x) -> Eats(x))", "(Eats(Hulu))", "all x y.((Hulu(x) & Eats(x)) -> Eats(x))", "all x y.((Hulu(x) & Eats(x)) -> Hulu(y))", "all x y.((Hulu(x) & Eating(y)) -> Eats(x))"]}
{"id": "folio_train_460", "nl": "Hulu does not eat.", "fol": "-Eats(Hulu)", "prediction": ["all x.(Hulu(x) -> -Eats(x))", "all x.(Hulu(x) -> -Eat(x))", "(-Eats(Hulu))", "exists x.(Hulu(x) & -Eats(x))", "all x y.((Hulu(x) & Food(y)) -> -Eats(x,y))", "All x.(Hulu(x) -> -Eats(x))", "all x y.((Hulu(x) & Food(y)) -> -Eat(x,y))", "all x.(Hulus(x) -> -Eats(x))", "exists x.(Hulu(x) & -Eat(x))", "all x.(Hulu(x) -> -(Eats(x) | Eats(x))))", "All x.(Hulu(x) -> -Eat(x))", "all x.(Hulus(x) -> -Eat(x))", "all x.(Hulu(x) -> -(Eats(x) | Eats(x)))", "Hulu -Eats(Hulu)", "all x.(Hulu(x) -> -Eats(x))", "all x.(Hulu(x) -> (-Eats(x)))"]}
{"id": "folio_train_461", "nl": "Hulu is dirt.", "fol": "IsDirt(Hulu)", "prediction": ["all x.(Hulu(x) -> Dirt(x))", "All x.(Hulu(x) -> Dirt(x))", "exists x.(Hulu(x) & Dirt(x))", "(Dirt(Hulu) & Dirt(Hulu))", "(Dirt(Hulu) -> Dirt(Hulu))", "all x.(Hulu(x) -> Dirt(x))", "(Dirt(Hulu) & -Dirt(Hulu))", "(All x.(Hulu(x) -> Dirt(x)))", "(Dirt(Hulu))", "all x.(Hulus(x) -> Dirt(x))", "ALL x.(Hulu(x) -> Dirt(x))", "(All x.(Hulu(x) -> Dirt(x))", "(Dirt(Hulu) -> Dirt(Hulu))", "Hulu (Dirt(Hulu))", "Hulu (Dirt(Hulu) & Dirt(Hulu))", "all x.(Hulu(x) -> Dirty(x))"]}
{"id": "folio_train_462", "nl": "Hulu is an animal or dirt.", "fol": "(IsAnimal(Hulu) | IsDirt(Hulu))", "prediction": ["all x.(Hulu(x) -> (Animal(x) | Dirt(x)))", "all x.(Hulu(x) -> (Animal(x) | Dirt(x)))", "exists x.(Hulu(x) & (Animal(x) | Dirt(x)))", "all x.(Hulus(x) -> (Animal(x) | Dirt(x)))", "all x.(Hulu(x) -> (Animal(x) | Dirt(x)))", "All x.(Hulu(x) -> (Animal(x) | Dirt(x)))", "(Animal(Hulu) | Dirt(Hulu))", "all x y.((Hulu(x) & Animal(y)) -> (Dirt(x) | Animal(y)))", "all x y.((Hulu(x) & Animal(y)) | Dirt(y)) -> AnimalOrDirt(x))", "all x y.((Hulu(x) & Animal(y)) | Dirt(y)) -> (Animal(x) | Dirt(x)))", "all x y.((Hulu(x) & Animal(y)) -> (Dirt(x) | Dirt(y)))", "all x y.((Hulu(x) & Animal(y)) | Dirt(y))", "all x y.((Hulu(x) & (Animal(y) | Dirt(y))) -> (Animal(x) | Dirt(y)))", "all x.(Hula(x) -> (Animal(x) | Dirt(x)))", "all x.(Hull(x) -> (Animal(x) | Dirt(x)))", "all x y.((Hulu(x) & (Animal(y) | Dirt(y))) -> AnimalOrDirt(x))"]}
{"id": "folio_train_463", "nl": "Hulu is either an animal or dirt.", "fol": "(IsAnimal(Hulu) | IsDirt(Hulu))", "prediction": ["all x.(Hulu(x) -> (Animal(x) | Dirt(x)))", "exists x.(Hulu(x) & (Animal(x) | Dirt(x)))", "all x.(Hulus(x) -> (Animal(x) | Dirt(x)))", "all x.(Hulu(x) -> (Animal(x) | Dirt(x)))", "(Animal(Hulu) | Dirt(Hulu))", "(exists x.(Hulu(x) & Animal(x)) | exists y.(Hulu(y) & Dirt(y))))", "all x.(Hulu(x) -> (Animal(x) | Dirt(x)))", "(exists x.(Hulu(x) & Animal(x)) | exists y.(Dirt(y) & Dirt(y))))", "all x.(Hula(x) -> (Animal(x) | Dirt(x)))", "all x y.((Hulu(x) & Animal(y)) | Dirt(y)) -> (Animal(x) | Dirt(x)))", "All x.(Hulu(x) -> (Animal(x) | Dirt(x)))", "all x y.((Hulu(x) & Animal(y)) | Dirt(y))", "(exists x.(Hulu(x) & Animal(x)) | exists y.(Dirt(y) & InHulu(x,y))))", "(exists x.(Hulu(x) & Animal(x)) & exists y.(Hulu(y) & Dirt(y))))", "all x.(Hull(x) -> (Animal(x) | Dirt(x)))", "exists x.(Hulu(x) & Animal(x) & Dirt(x))"]}
{"id": "folio_train_464", "nl": "If Hulu is either an animal or dirt, then Hulu eats and is dirt.", "fol": "((IsAnimal(Hulu) | IsDirt(Hulu)) -> (Eats(Hulu) & IsDirt(Hulu)))", "prediction": ["all x.((Hulu(x) & (Animal(x) | Dirt(x))) -> (Eats(x) & Dirt(x)))", "all x.((Hulu(x) & (Animal(x) | Dirt(x))) -> EatsAndDirt(x))", "all x.((Hulu(x) & (Animal(x) | Dirt(x))) -> Eats(x) & Dirt(x))", "all x.((Hulu(x) & (Animal(x) | Dirt(x))) -> EatsAndIsDirt(x))", "all x.((Hulu(x) & Animal(x)) | Dirt(x)) -> (Eats(x) & Dirt(x)))", "all x.((Animal(x) | Dirt(x)) -> (Eats(x) & Dirt(x)))", "all x.((Hulu(x) & (Animal(x) | Dirt(x))) -> (Eats(x) & IsDirt(x)))", "all x.((Hulu(x) & (Animal(x) | Dirt(x))) -> EatsAndDirt(x))", "all x.((Hulu(x) & Animal(x)) | Dirt(x)) -> EatsAndDirt(x))", "all x.((Hulu(x) & (Animal(x) | Dirt(x))) -> (Eats(x) & -Dirt(x)))", "all x.(Hulu(x) -> ((Animal(x) | Dirt(x))) & Eats(x) & Dirt(x)))", "all x.((Hulu(x) & (Animal(x) | Dirt(x))) -> EatsDirt(x))", "all x.((Hulu(x) & (Animal(x) | Dirt(x))) -> Eats(x) & Dirt(x)))", "all x.((Hulu(x) & (Animal(x) | Dirt(x))) -> Eats(x) & Dirt(x))", "all x.((Hulu(x) & (Animal(x) | Dirt(x))) -> (EatsAndDirt(x)))", "all x.((Animal(x) | Dirt(x)) -> EatsAndDirt(x))"]}
{"id": "folio_train_465", "nl": "A controlled substance is a drug.", "fol": "all x.(IsControlledSubstance(x) -> IsDrug(x))", "prediction": ["all x.(ControlledSubstance(x) -> Drug(x))", "all x.((ControlledSubstance(x) & Drug(x)) -> Drug(x))", "all x.((ControlledSubstance(x) & Drug(x)) -> ControlledSubstance(x))", "all x.((ControlledSubstance(x) & Drug(x)) -> Contains(x))", "all x.((ControlledSubstance(x) & Drug(x)) -> Contains(x,y))", "all x.((Substance(x) & Controlled(x)) -> Drug(x))", "all x.((ControlledSubstance(x) & Drug(x)) -> -ControlledSubstance(x))", "all x.(ControlledSubstance(x) -> Drug(x))", "all x.(Contain(x) -> Drug(x))", "all x y.((ControlledSubstance(x) & Drug(y)) -> Contains(x,y))", "all x y.((ControlledSubstance(x) & Drug(y)) -> Is(x,y))", "all x.((ControlledSubstance(x) & Drug(x)) -> Is(x,y))", "all x.((ControlledSubstance(x) & Drug(x)) -> Is(x))", "all x.((ControlledSubstance(x) & Drug(x)) -> -Drug(x))", "all x.(ControlledSubstance(x) -> Drogen(x))", "all x.(ContainedSubstance(x) -> Drug(x))"]}
{"id": "folio_train_466", "nl": "There exist both harmful and beneficial controlled substances.", "fol": "exists x x.(IsControlledSubstance(x) & IsControlledSubstance(y) & IsBeneficial(x) & IsHarmful(y))", "prediction": ["exists x.(HarmfulSubstance(x) & BeneficialControlledSubstance(x))", "exists x.(HazardousSubstance(x) & BeneficialControlledSubstance(x))", "exists x.(HarmfulSubstance(x) & BeneficialContainment(x))", "exists x.(Harmful(x) & BeneficialControlledSubstance(x))", "exist x.(HarmfulSubstance(x) & BeneficialControlledSubstance(x))", "exists x.(HazardousSubstance(x) & BeneficialContainment(x))", "exists x.(HazardousSubstance(x) & BeneficialSubstance(x))", "exists x.(HarmfulSubstance(x) & BeneficialSubstance(x))", "exists x.(Hazardous(x) & BeneficialControlledSubstance(x))", "exists x.(HarmfulSubstance(x) & BeneficialContainedSubstance(x))", "exists x.(Harmful(x) & Beneficial(x) & ControlledSubstance(x))", "exists x.(HarmfulSubstance(x) & BeneficialContainedSubstance(x))", "exists x.(HealthySubstance(x) & BeneficialControlledSubstance(x))", "exists x.(Hazardous(x) & Beneficial(x) & ControlledSubstance(x))", "exists x.(Harmful(x) & Beneficial(x))", "exists x.(HazardousSubstance(x) & BeneficialContainedSubstance(x))"]}
{"id": "folio_train_467", "nl": "If a child is exposed to a controlled substance, he or she is in chemical endangerment.", "fol": "all x y.(ExposureToControlledSubstance(x,y) -> IsInChemicalEndangerment(x))", "prediction": ["all x.((Child(x) & ExposedToControlledSubstance(x)) -> ChemicalEndangement(x))", "all x.((Child(x) & ExposedToControlledSubstance(x)) -> ChemicalEndangerment(x))", "all x.((Child(x) & ExposureToControlledSubstance(x)) -> ChemicalEndangement(x))", "all x.((Child(x) & ExposureToControlledSubstance(x)) -> ChemicalEndangerment(x))", "all x y.((Child(x) & ExposedToControlledSubstance(x,y)) -> ChemicalEndangement(x))", "all x.((Child(x) & ExposedToControlledSubstance(x)) -> ChemicalEndangering(x))", "all x.((Child(x) & ExposedToControlledSubstance(x)) -> ChemicalEnangerment(x))", "all x y.((Child(x) & ExposedToControlledSubstance(x,y)) -> ChemicalEndangerment(x))", "all x y.((Child(x) & ExposedToControlledSubstance(x)) -> ChemicalEndangement(x))", "all x.((Child(x) & ExposedToControlledSubstance(x)) -> InChemicalEndangerment(x))", "all x y.((Child(x) & ExposedToControlledSubstance(x)) -> ChemicalEndangerment(x))", "all x.((Child(x) & ExposedToContaminatedSubstance(x)) -> ChemicalEndangement(x))", "all x y.((Child(x) & ExposedToControlledSubstance(x)) -> ChemicalEndangement(y))", "all x y.((Child(x) & ExposureToControlledSubstance(x,y)) -> ChemicalEndangement(x))", "all x.((Child(x) & ExposedToControlledSubstance(x)) -> ChemicalEndangeration(x))", "all x y.((Child(x) & ExposedToControlledSubstance(x)) -> ChemicalEndangerment(y))"]}
{"id": "folio_train_468", "nl": "Chemical Endangerment is harmful. ", "fol": "all x.(IsInChemicalEndangerment(x) -> IsHarmful(x))", "prediction": ["all x.(ChemicalEndangerment(x) -> Harmful(x))", "all x.(ChemicalEndangement(x) -> Harmful(x))", "All x.(ChemicalEndangerment(x) -> Harmful(x))", "all x.(ChemicalEndangered(x) -> Harmful(x))", "all x.(ChemicalEndangering(x) -> Harmful(x))", "All x.(ChemicalEndangement(x) -> Harmful(x))", "all x.(ChemisticalEndangement(x) -> Harmful(x))", "all x y.((ChemicalEndangerment(x) & Chemical(y)) -> Harmful(x))", "all x.(ChemistryEndangement(x) -> Harmful(x))", "all x.(ChemisticalEndangerment(x) -> Harmful(x))", "all x.(ChemicalEndangeration(x) -> Harmful(x))", "all x.(ChemicalEndangerance(x) -> Harmful(x))", "all x y.((ChemicalEndangerment(x) & ChemicalEndangered(y)) -> Harmful(x))", "all x y.((ChemicalEndangerment(x) & ChemicalEndangerment(y)) -> Harmful(x))", "all x y.((ChemicalEndangerment(x) & Chemical(y)) -> Harmful(x,y))", "All x.(ChemicalEndangered(x) -> Harmful(x))"]}
{"id": "folio_train_469", "nl": "The Controlled Substances Act was an act passed in 1971.", "fol": "(WasPassedInYear(ControlledSubstancesAct,Year1971) & IsAct(ControlledSubstancesAct))", "prediction": ["all x.(ControlledSubstancesAct(x) -> PassedIn71(x))", "all x.(ControlledSubstancesAct(x) -> PassedIn(x,71))", "all x.(ControlledSubstancesAct(x) -> ActPassedIn71(x))", "all x.(ControlledSubstancesAct(x) -> ActPassedIn(x,71))", "All x.(ControlledSubstancesAct(x) -> PassedIn(x,71))", "all x y.((ControlledSubstancesAct(x) & Act(y)) -> PassedIn(x,y))", "All x.(ControlledSubstancesAct(x) -> PassedIn71(x))", "all x y z.((ControlledSubstancesAct(x) & Act(y) & Act(z)) -> PassedIn(x,y,z))", "all x.(ControlledSubstancesAct(x) -> PassedIn(x, 1971))", "all x.(ControlledSubstancesAct(x) -> ActPassedIn(x, 1971))", "all x.((ControlledSubstancesAct(x) & PassedIn71(x)) -> ControlledSubstancesAct(x))", "All x.(ControlledSubstancesAct(x) -> PassedIn(x, 1971))", "all x y.((ControlledSubstancesAct(x) & ActPassedIn(x,y)) -> PassedIn(x,y))", "all x.(ControlledSubstancesAct(x) -> PassedIn 1971(x))", "All x.(ControlledSubstancesAct(x) -> ActPassedIn(x,71))", "all x y z.((ControlledSubstancesAct(x) & Act(y) & Act(z)) -> PassedIn(y,z))"]}
{"id": "folio_train_470", "nl": "Some Acts prevent harmful things.", "fol": "exists x.(IsAct(x) & PreventsHarmfulEffects(x))", "prediction": ["exists x.(Act(x) & PreventsHarmfulThings(x))", "exists x.(Act(x) & PreventsHarmfulThing(x))", "exists x.(Act(x) & PreventsHazardousThings(x))", "exists x.(Action(x) & PreventsHarmfulThings(x))", "exists x.(Act(x) & PreventsHealthyThings(x))", "exists x y.(Act(x) & Thing(y) & Prevents(x,y))", "exists x.(Act(x) & PreventsDamagingThings(x))", "exists x y.(Act(x) & Act(y) & PreventsHarmfulThings(x,y))", "exists x.(Act(x) & PreventsHarmful(x))", "exists x.(Act(x) & PreventsDangerousThings(x))", "exists x.(Act(x) & PreventsHarmfulThan(x))", "exists x.(Active(x) & PreventsHarmfulThings(x))", "exists x.(Act(x) & PreventsHazardousThing(x))", "exists x.(Act(x) & PreventsHarmfulThanThings(x))", "exists x y.(Act(x) & Act(y) & PreventsHarmfulThing(x,y))", "exists x.(Act(x) & PreventsHarmfulTends(x))"]}
{"id": "folio_train_471", "nl": "The Controlled Substances Act prevents harmful things.", "fol": "PreventsHarmfulEffects(ControlledSubstancesAct)", "prediction": ["all x.(ControlledSubstancesAct(x) -> PreventsHarmfulThings(x))", "all x y.((ControlledSubstancesAct(x) & HarmfulThing(y)) -> Prevents(x,y))", "All x.(ControlledSubstancesAct(x) -> PreventsHarmfulThings(x))", "all x y.((ControlledSubstancesAct(x) & HarmfulThings(y)) -> Prevents(x,y))", "all x y.((ControlledSubstancesAct(x) & Thing(y)) -> PreventsHarmful(x,y))", "all x y.((ControlledSubstancesAct(x) & Product(y)) -> PreventsHarmfulThings(x,y))", "all x y.((ControlledSubstancesAct(x) & Thing(y)) -> PreventsHarmfulThings(x,y))", "all x.(ControlledSubstancesAct(x) -> PreventsHazardousThings(x))", "all x.(ContaminatedSubstancesAct(x) -> PreventsHarmfulThings(x))", "all x.(ContainedSubstancesAct(x) -> PreventsHarmfulThings(x))", "all x.(ControlledSubstancesAction(x) -> PreventsHarmfulThings(x))", "all x y.((ControlledSubstancesAct(x) & Things(y)) -> PreventsHarmful(x,y))", "all x y.((ControlledSubstancesAct(x) & Thing(y)) -> Prevents(x,y))", "all x y z.((ControlledSubstancesAct(x) & HarmfulThing(y)) -> Prevents(x,y))", "all x.(ControlledSubstancesAct(x) -> PreventsHarmfulThanThings(x))", "all x.(ControlledSubstancesAct(x) -> PreventsHealthyThings(x))"]}
{"id": "folio_train_472", "nl": "Some drugs are beneficial.", "fol": "exists x.(IsDrug(x) & IsBeneficial(x))", "prediction": ["exists x.(Drug(x) & Beneficial(x))", "exists x.(Doctor(x) & Beneficial(x))", "exists x y.(Drug(x) & Drug(y) & Beneficial(x,y))", "exists x.(Drugs(x) & Beneficial(x))", "exists x y.(Drug(x) & Drug(y) & Beneficial(x))", "exists x y.(Drug(x) & Drug(y) & Beneficial(y))", "exists x.(Drug(x) & Beneficial(x))", "exists x.(Drug(x) & Benefitful(x))", "exists x.(Drogen(x) & Beneficial(x))", "exists x y.(Drug(x) & Beneficial(y))", "exists x.(Doping(x) & Beneficial(x))", "exists x.(Medication(x) & Beneficial(x))", "exists x.(Dopamine(x) & Beneficial(x))", "exists x y.(Drug(x) & Drug(y) & Benefitful(x,y))", "exists x.(Droge(x) & Beneficial(x))", "exists x y.(Drug(x) & Drug(y) & Beneficial(z))"]}
{"id": "folio_train_473", "nl": "A child in chemical endangerment is in harm.", "fol": "exists x.(IsInChemicalEndangerment(x) -> IsHarmful(x))", "prediction": ["all x.((Child(x) & ChemicalEnangerment(x)) -> InHarm(x))", "all x.((Child(x) & ChemicalEndangerment(x)) -> InHarm(x))", "all x.((Child(x) & ChemicalEndangement(x)) -> InHarm(x))", "all x.((Child(x) & ChemicalEndangered(x)) -> InHarm(x))", "all x.((Child(x) & ChemicalEndangering(x)) -> InHarm(x))", "all x.((Child(x) & ChemicalEndangerment(x)) -> InHarm(x))", "all x.((Child(x) & InChemicalEndangerment(x)) -> InHarm(x))", "all x.((Child(x) & ChemicalEndangeration(x)) -> InHarm(x))", "all x.((Child(x) & ChemicalEnhangerment(x)) -> InHarm(x))", "all x.(ChemicalEndangerment(x) -> InHarm(x))", "all x.((Child(x) & ChemicalEnangerment(x)) -> InHazard(x))", "all x.((Child(x) & ChemicalEndangerment(x)) -> InHazard(x))", "all x y.((Child(x) & ChemicalEnangerment(y)) -> InHarm(x,y))", "all x y.((Child(x) & ChemicalEndangerment(y)) -> InHarm(x,y))", "all x.(Child(x) -> InChemicalEndangerment(x))", "all x.((Child(x) & ChemicalEndangement(x)) -> InHazard(x))"]}
{"id": "folio_train_474", "nl": "No people who work at corporate jobs are starting a new company.", "fol": "all x.(WorksAtCorporateJobs(x) -> -IsStartingANewCompany(x))", "prediction": ["all x.(WorksAtCorporateJobs(x) -> -StartingNewCompany(x))", "all x.(WorksAtCorporateJob(x) -> -StartingNewCompany(x))", "all x.((Person(x) & WorksAtCorporateJobs(x)) -> -StartingNewCompany(x))", "all x.((Person(x) & WorksAtCorporateJobs(x)) -> StartsNewCompany(x))", "all x.((Person(x) & WorksAtCorporateJobs(x)) -> StartingNewCompany(x))", "all x.((Person(x) & WorksAtCorporateJob(x)) -> -StartingNewCompany(x))", "all x.((WorksAtCorporateJobs(x) & -StartingNewCompany(x)) -> -StartingNewCompany(x))", "all x.(WorksAtCorporateJobs(x) -> StartsNewCompany(x))", "all x.((Person(x) & WorkAtCorporateJobs(x)) -> -StartingNewCompany(x))", "all x.((Person(x) & WorksAtCorporateJobs(x)) -> NoNewCompany(x))", "all x.(WorksAtCorporateJobs(x) -> NoNewCompany(x))", "all x.((Person(x) & WorksAtCorporateJob(x)) -> StartsNewCompany(x))", "all x.(WorksAtCorporateJobs(x) -> StartingNewCompany(x))", "all x.(WorksAtCorporateJobs(x) -> NoNewCompanyStarting(x))", "all x.((Person(x) & WorksAtCorporateJobs(x)) -> NewCompany(x))", "all x.(WorksAtCorporateJob(x) -> StartsNewCompany(x))"]}
{"id": "folio_train_475", "nl": "All entrepreneurs are starting a new company.", "fol": "all x.(IsEntrepreneur(x) -> IsStartingANewCompany(x))", "prediction": ["all x.(Entrepreneur(x) -> StartsNewCompany(x))", "all x.(Entrepreneur(x) -> StartingNewCompany(x))", "all x.(Entrepreneur(x) -> StartNewCompany(x))", "all x y.((Entrepreneur(x) & Company(y)) -> Starts(x,y))", "all x.(Employee(x) -> StartsNewCompany(x))", "all x y.((Entrepreneur(x) & Company(y)) -> Starting(x,y))", "all x y.((Entrepreneur(x) & NewCompany(y)) -> Starts(x,y))", "all x.(Entrepreneur(x) -> StartsNewCompany(x))", "all x y.((Entrepreneur(x) & NewCompany(y)) -> Starting(x,y))", "all x y.((Entrepreneur(x) & Company(y)) -> StartsNew(x,y))", "all x.(Entrepreneur(x) -> NewCompany(x))", "all x.(Entrepreneur(x) -> (StartingNewCompany(x) | StartingNewCompany(x)))", "all x.exists y.(Entrepreneur(x) & Company(y) & Starts(x,y))", "all x.(Entrepreneur(x) -> (StartingNewCompany(x) & NewCompany(x)))", "all x.exists y.(Entrepreneur(x) & Company(y) & Starting(x,y))", "all x y.((Entrepreneur(x) & Company(y)) -> StartingNew(x,y))"]}
{"id": "folio_train_476", "nl": "All risk-averse people are people who work at corporate jobs.", "fol": "all x.(IsRiskAverse(x) -> WorksAtCorporateJobs(x))", "prediction": ["all x.(RiskAverse(x) -> WorkAtCorporateJobs(x))", "all x.(RiskAversePerson(x) -> WorkAtCorporateJobs(x))", "all x.(RiskAverse(x) -> WorksAtCorporateJobs(x))", "all x.(RiskAversePerson(x) -> WorksAtCorporateJobs(x))", "all x.(RiskAverse(x) -> WorkAtCorporateJobs(x))", "all x.(RiskAversePeople(x) -> WorkAtCorporateJobs(x))", "all x.(RiskAverse(x) -> WorksAtCorporateJobs(x))", "all x.(RiskAversePerson(x) -> WorkAtCorporateJobs(x))", "all x.(RiskAverse(x) -> WorkAtCorporateJob(x))", "all x.(RiskAverse(x) -> exists y.(CorporateJob(y) & WorkAt(x,y)))", "all x.(RiskAversePerson(x) -> WorksAtCorporateJobs(x))", "all x.(RiskAversePeople(x) -> WorksAtCorporateJobs(x))", "all x.(RiskAverse(x) -> (WorksAtCorporateJobs(x)))", "all x.(RiskAverse(x) -> exists y.(CorporateJob(y) & WorkAt(x,y))))", "all x.(RiskAversePerson(x) -> WorkAtCorporateJob(x))", "all x.(RiskAverse(x) -> exists y.(CorporateJob(y) & WorksAt(x,y)))"]}
{"id": "folio_train_477", "nl": "All people who hate working for others are entrepreneurs.", "fol": "all x.(HatesWorkingForOthers(x) -> IsEntrepreneur(x))", "prediction": ["all x.(HasWorkingForOthers(x) -> Entrepreneur(x))", "all x.((Person(x) & HatesWorkingForOthers(x)) -> Entrepreneur(x))", "all x.((Person(x) & HateWorkingForOthers(x)) -> Entrepreneur(x))", "all x.(HasWorkForOthers(x) -> Entrepreneur(x))", "all x.(HateWorkingForOthers(x) -> Entrepreneur(x))", "all x.(HasWorkedForOthers(x) -> Entrepreneur(x))", "all x.((Person(x) & HateWorkForOthers(x)) -> Entrepreneur(x))", "all x.(HatWorkingForOthers(x) -> Entrepreneur(x))", "all x y.((Person(x) & HatesWorkingForOthers(x)) -> Entrepreneur(y))", "all x.(HatesWorkingForOthers(x) -> Entrepreneur(x))", "all x.(HasHasWorkingForOthers(x) -> Entrepreneur(x))", "all x y.((Person(x) & HatesWorkingForOthers(x)) -> Entrepreneur(x))", "all x.(HasHateWorkingForOthers(x) -> Entrepreneur(x))", "all x.(HasToWorkForOthers(x) -> Entrepreneur(x))", "all x.((Person(x) & HatesWorkingForOther(x)) -> Entrepreneur(x))", "all x.(HatsWorkingForOthers(x) -> Entrepreneur(x))"]}
{"id": "folio_train_478", "nl": "If Mark Zuckerberg is neither an entrepreneur nor a person who hates working for others, then Mark Zuckerberg is not a risk-averse person.", "fol": "((-IsEntrepreneur(MarkZuckerberg) | -HatesWorkingForOthers(MarkZuckerberg)) -> -IsRiskAverse(MarkZuckerberg))", "prediction": ["all x.((MarkZuckerberg(x) & -(Entrepreneur(x) | HatesWorkingForOthers(x))) -> -RiskAversePerson(x))", "all x.((MarkZuckerberg(x) & -(Entrepreneur(x) | HatesWorkingForOthers(x))) -> -RiskAverse(x))", "all x.((MarkZachberg(x) & -(Entrepreneur(x) | HatesWorkingForOthers(x))) -> -RiskAversePerson(x))", "all x.((MarkZachberg(x) & -(Entrepreneur(x) | HatesWorkingForOthers(x))) -> -RiskAverse(x))", "all x.((MarkZimmerberg(x) & -(Entrepreneur(x) | HatesWorkingForOthers(x))) -> -RiskAversePerson(x))", "all x.((Mark Zuckerberg(x) & -(Entrepreneur(x) | HatesWorkingForOthers(x))) -> -RiskAversePerson(x))", "all x.((MarkZappert(x) & -(Entrepreneur(x) | HatesWorkingForOthers(x))) -> -RiskAversePerson(x))", "all x.((MarkZimmerberg(x) & -(Entrepreneur(x) | HatesWorkingForOthers(x))) -> -RiskAverse(x))", "all x.((MarkZappert(x) & -(Entrepreneur(x) | HatesWorkingForOthers(x))) -> -RiskAverse(x))", "all x.((Mark Zuckerberg(x) & -(Entrepreneur(x) | HatesWorkingForOthers(x))) -> -RiskAverse(x))", "all x.((MarkZapperberg(x) & -(Entrepreneur(x) | HatesWorkingForOthers(x))) -> -RiskAversePerson(x))", "all x.((MarkZuckerberg(x) & -Entrepreneur(x) & -HasWorkingForOthers(x)) -> -RiskAversePerson(x))", "all x.((MarkZapperberg(x) & -(Entrepreneur(x) | HatesWorkingForOthers(x))) -> -RiskAverse(x))", "all x.((MarkZapper(x) & -(Entrepreneur(x) | HatesWorkingForOthers(x))) -> -RiskAversePerson(x))", "all x.((MarkZuckerberg(x) & -Entrepreneur(x) & -HasWorkingForOthers(x)) -> -RiskAverse(x))", "all x.((MarkZapper(x) & -(Entrepreneur(x) | HatesWorkingForOthers(x))) -> -RiskAverse(x))"]}
{"id": "folio_train_479", "nl": "Mark Zuckerberg is an entrepreneur.", "fol": "IsEntrepreneur(MarkZuckerberg)", "prediction": ["Mark Zuckerberg is an entrepreneur.", "Mark Zuckerberg is an Entrepreneur(Mark Zuckerberg)", "Mark Zuckerberg ((Entrepreneur(Mark) & Entrepreneur(Mark)))", "Mark Zuckerberg is an Entrepreneur.", "Mark Zuckerberg (Mark) & Entrepreneur(Mark))", "(Entrepreneur(MarkZachberg) & Entrepreneur(MarkZachberg))", "Mark Zuckerberg ((Entrepreneur(Mark) & Founder(Mark)))", "Mark Zuckerberg is entrepreneur.", "Mark Zuckerberg (entrepreneur)", "(Entrepreneur(MarkZachberg) -> Entrepreneur(MarkZachberg))", "Mark Zuckerberg ((Founder(Mark) & Entrepreneur(Mark)))", "(Entrepreneur(MarkZuckerberg)", "Mark Zuckerberg ((Entrepreneur)) & Founder(Mark))", "Mark Zuckerberg ((Founder(Mark)) & Entrepreneur(Mark))", "Mark Zuckerberg is an Entrepreneur(Mark)", "Mark Zuckerberg ((Entrepreneur) & Entrepreneur(Mark)))"]}
{"id": "folio_train_480", "nl": "Mark Zuckerberg is a risk-averse person.", "fol": "IsRiskAverse(MarkZuckerberg)", "prediction": ["all x.(MarkZapperberg(x) -> RiskAverse(x))", "all x.(MarkZuckerberg(x) -> RiskAverse(x))", "Mark Zuckerberg is risk-averse.", "all x.(MarkZachberg(x) -> RiskAverse(x))", "Mark Zuckerberg is a risk-averse person.", "all x.(MarkZuckerberg(x) -> RiskAversePerson(x))", "all x.(MarkZapperberg(x) -> RiskAversePerson(x))", "Mark Zuckerberg is riskaverse.", "Mark Zuckerberg is a RiskAversePerson(Mark Zuckerberg)", "all x.(MarkZachberg(x) -> RiskAversePerson(x))", "Mark Zuckerberg is a riskaverse person.", "all x.(MarkZapperberg(x) -> RiskAverse(x))", "Mark Zuckerberg is riskaverse(Mark Zuckerberg)", "all x.(MarkZuckerberg(x) -> RiskAverse(x))", "Mark Zuckerberg (Mark) & RiskAverse(Mark))", "Mark Zuckerberg is risk-averse(Mark Zuckerberg)"]}
{"id": "folio_train_481", "nl": "Mark Zuckerberg is not a risk-averse person.", "fol": "-IsRiskAverse(MarkZuckerberg)", "prediction": ["Mark Zuckerberg -RiskAverse(Mark Zuckerberg)", "all x.(MarkZapperberg(x) -> -RiskAverse(x))", "Mark Zuckerberg -RiskAversePerson(Mark Zuckerberg)", "Mark Zuckerberg is not a risk-averse person.", "Mark Zuckerberg is not risk-averse.", "all x.(MarkZapperberg(x) -> -RiskAversePerson(x))", "Mark Zuckerberg is not riskaverse.", "Mark Zuckerberg -RiskAverse(Mark Zuckerberg,Person))", "Mark Zuckerberg & -RiskAverse(Mark Zuckerberg)", "Mark Zuckerberg is -RiskAverse(Mark Zuckerberg)", "Mark Zuckerberg is not a RiskAversePerson(Mark Zuckerberg)", "Mark Zuckerberg is not a riskaverse person.", "(-RiskAverse(MarkZuckerberg))", "Mark Zuckerberg is -RiskAversePerson(Mark Zuckerberg)", "Mark Zuckerberg \u2013 -RiskAverse(Mark Zuckerberg)", "Mark Zuckerberg is not riskaverse(Mark Zuckerberg)"]}
{"id": "folio_train_482", "nl": "There are two kitchens in the house: the upstairs kitchen and the downstairs kitchen.", "fol": "all x.(((IsKitchen(x) -> IsUpstairs(x)) & -IsDownstairs(x)) | (-(IsKitchen(x) -> IsUpstairs(x)) & IsDownstairs(x)))", "prediction": ["exists x.(House(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x))", "exists x.(House(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x)", "exists x.(House(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x))", "exists x.(House(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x))", "exists x.(House(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x))", "all x y.((House(x) & Kitchen(y)) -> (Upstairs(x) & Downstairs(y)))", "exists x.(House(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x))", "exists x.(House(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x))", "exists x.(House(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x))", "exists x.(Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x)", "exists x.(House(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x))", "exists x.(Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x))", "exists x.(House(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x))", "exists x.(House(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x))", "exists x.(House(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x)", "exists x.(House(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & Kitchen(x) & House(x))"]}
{"id": "folio_train_483", "nl": "When someone is cooking in the downstairs kitchen, the first floor becomes smokey unless the air conditioner is running.", "fol": "((CookingInKitchen(Downstairs) & -IsAirConditionerRunning(Ac)) -> IsSmokey(FirstFloor))", "prediction": ["all x.((CookingInDownstairsKitchen(x) & AirConditionerRunning(x)) -> FirstFloorSmokey(x))", "all x.((CookingInDownstairsKitchen(x) & -AirConditionerRunning(x)) -> FirstFloorSmokey(x))", "all x.((CookingInDownstairsKitchen(x) & AirConditionerRuning(x)) -> FirstFloorSmokey(x))", "all x.((CookingInDownstairsKitchen(x) & -AirConditionerRuning(x)) -> FirstFloorSmokey(x))", "all x.(CookingInDownstairsKitchen(x) -> (FirstFloorSmokey(x) & -AirConditionerRunning(x)))", "all x.((CooksInDownstairsKitchen(x) & -AirConditionerRunning(x)) -> FirstFloorSmokey(x))", "all x.(CookingInDownstairsKitchen(x) -> (FirstFloorSmokey(x) & -AirConditionerRuns(x)))", "all x.((CooksInDownstairsKitchen(x) & -AirConditionerRuns(x)) -> FirstFloorSmokey(x))", "all x.((CookingInDownstairsKitchen(x) & AirConditionerRunning(x)) -> FirstFloorSmoky(x))", "all x.((CookingInDownstairsKitchen(x) & AirConditionerRuning(x)) -> FirstFloorSmoky(x))", "all x.((CookingInDownstairsKitchen(x) & -AirConditionerRuning(x)) -> FirstFloorSmoky(x))", "all x.((CookingInDownstairsKitchen(x) & -AirConditionerRuns(x)) -> FirstFloorSmokey(x))", "all x.((CooksInDownstairsKitchen(x) & -AirConditionerRuning(x)) -> FirstFloorSmokey(x))", "all x.(CookingInDownstairsKitchen(x) -> (FirstFloorSmokey(x) & -AirConditionerRuning(x)))", "all x.((CookingInDownstairsKitchen(x) & AirConditionerRunning(x)) -> SmokyFirstFloor(x))", "all x y.((CookingInDownstairsKitchen(x) & AirConditionerRunning(y)) -> FirstFloorSmokey(x,y))"]}
{"id": "folio_train_484", "nl": "If the air conditioner is running and someone is cooking in the downstairs kitchen, all the smoke travels to the second floor.", "fol": "((CookingInKitchen(Downstairs) & IsAirConditionerRunning(Ac)) -> IsSmokey(SecondFloor))", "prediction": ["all x.((AirConditioner(x) & Running(x) & CookingInDownstairsKitchen(x)) -> SmokeTravelsToSecondFloor(x))", "all x y.((AirConditioner(x) & Running(x) & CookingInDownstairsKitchen(x)) -> SmokeTravelsToSecondFloor(y))", "all x.((AirConditionerRuns(x) & CookingInDownstairsKitchen(x)) -> SmokeTravelsToSecondFloor(x))", "all x y.((AirConditioner(x) & AirConditioner(y) & Running(x) & CookingInDownstairsKitchen(x)) -> SmokeTravelsToSecondFloor(y))", "all x.((AirConditionerRuning(x) & CookingInDownstairsKitchen(x)) -> SmokeTravelsToSecondFloor(x))", "all x y.((AirConditioner(x) & AirConditioner(y) & Running(x) & CookingInDownstairsKitchen(y)) -> SmokeTravelsToSecondFloor(x,y))", "all x.((AirConditionerRunning(x) & CookingInDownstairsKitchen(x)) -> SmokeTravelsToSecondFloor(x))", "all x y.((AirConditioner(x) & AirConditioner(y) & Running(x) & CookingInDownstairsKitchen(y)) -> SmokeTravelsToSecondFloor(x))", "all x.((AirConditionerRuns(x) & CooksInDownstairsKitchen(x)) -> SmokeTravelsToSecondFloor(x))", "all x y.((AirConditioner(x) & Runs(x) & CookingInDownstairsKitchen(x)) -> SmokeTravelsToSecondFloor(y))", "all x y.((AirConditioner(x) & AirConditioning(y) & Running(x) & CookingInDownstairsKitchen(x)) -> SmokeTravelsToSecondFloor(y))", "all x y.((AirConditioner(x) & AirConditioner(y) & Running(x) & CookingInDownstairsKitchen(x)) -> SmokeTravelsToSecondFloor(x))", "all x.((AirConditioner(x) & Running(x) & SomeoneCookingInDownstairsKitchen(x)) -> SmokeTravelsToSecondFloor(x))", "all x y.((AirConditioner(x) & AirConditioner(y) & Running(x) & CookingInDownstairsKitchen(x)) -> SmokeTravelsToSecondFloor(x,y))", "all x.((AirConditioner(x) & Running(x) & CookingInDownstairsKitchen(x)) -> AllSmokeTravelsToSecondFloor(x))", "all x y.((AirConditioner(x) & Running(x) & CookingInDownstairsKitchen(y)) -> SmokeTravelsToSecondFloor(x,y))"]}
{"id": "folio_train_485", "nl": "If someone is cooking downstairs, it will always cause the first floor to become smokey.", "fol": "(CookingInKitchen(Downstairs) -> IsSmokey(FirstFloor))", "prediction": ["all x.(CookingDownstairs(x) -> SmokyFirstFloor(x))", "all x.((Cooking(x) & Downstairs(x)) -> SmokyFirstFloor(x))", "all x.(Cooking(x) -> SmokyFirstFloor(x))", "all x.((Cooking(x) & Downstairs(x)) -> FirstFloorSmokey(x))", "all x.((Cooking(x) & Downstairs(x)) -> FirstFloorSmoky(x))", "all x.((Cooking(x) & Downstairs(x)) -> Smoky(x))", "all x.((CookingDownstairs(x)) -> SmokyFirstFloor(x))", "all x.(CookingDownstairs(x) -> CausesFirstFloorToBeSmokey(x))", "all x.(CookingDownstairs(x) -> FirstFloorSmokey(x))", "all x.(CookingDownstairs(x) -> CausesFirstFloorToBeSmoky(x))", "all x.((CookingDownstairs(x) & SmokyFirstFloor(x)) -> CookingDownstairs(x))", "all x.(Cooking(x) -> FirstFloorSmokey(x))", "all x y.((CookingDownstairs(x) & CookingDownstairs(x)) -> SmokyFirstFloor(y))", "all x y.((Cooking(x) & Downstairs(y)) -> SmokyFirstFloor(x,y))", "all x.((Cooking(x) & Downstairs(x)) -> FirstFloorToBeSmokey(x))", "all x.((Cooking(x) & Downstairs(x)) -> FirstFloorToBeSmoky(x))"]}
{"id": "folio_train_486", "nl": "If someone is cooking upstairs, the first floor will become smokey.", "fol": "(CookingInKitchen(Upstairs) -> IsSmokey(FirstFloor))", "prediction": ["all x.(CookingUpstairs(x) -> SmokyFirstFloor(x))", "all x.(CookingUpstairs(x) -> FirstFloorSmokey(x))", "all x.((CookingUpstairs(x) & SmokyFirstFloor(x)) -> CookingUpstairs(x))", "all x.((CookingUpstairs(x)) -> SmokyFirstFloor(x))", "all x.((CookingUpstairs(x) & FirstFloor(x)) -> Smoky(x))", "all x.(CookingUpstairs(x) -> FirstFloorSmoky(x))", "all x.((CookingUpstairs(x) & Smoky(x)) -> FirstFloor(x))", "all x.((CookingUpstairs(x) & SmokyFirstFloor(x)) -> CooksUpstairs(x))", "all x.(CookingUpstairs(x) -> Smoky(x))", "all x.((CookingUpstairs(x) & CookingUpstairs(x)) -> SmokyFirstFloor(x))", "all x.(CookingUpstairs(x) -> FirstFloorSmoky(x))", "all x.((CookingUpstairs(x)) -> FirstFloorSmokey(x))", "all x y.((CookingUpstairs(x) & Person(y)) -> SmokyFirstFloor(x))", "all x y.((CookingUpstairs(x) & Person(y)) -> SmokyFirstFloor(y))", "all x.((CookingUpstairs(x) & SmokyFirstFloor(x)) -> CookedUpstairs(x))", "all x y.((CookingUpstairs(x) & CookingUpstairs(x)) -> SmokyFirstFloor(y))"]}
{"id": "folio_train_487", "nl": "If someone is cooking downstairs and the air conditioner is running, there will be smoke upstairs.", "fol": "((CookingInKitchen(Downstairs) & IsAirConditionerRunning(Ac)) -> IsSmokey(SecondFloor))", "prediction": ["all x.((CookingDownstairs(x) & AirConditionerRunning(x)) -> SmokeUpstairs(x))", "all x.((Cooking(x) & Downstairs(x) & AirConditionerRunning(x)) -> SmokeUpstairs(x))", "all x.((CooksDownstairs(x) & AirConditionerRunning(x)) -> SmokeUpstairs(x))", "all x.((CookingDownstairs(x) & AirConditionerRuning(x)) -> SmokeUpstairs(x))", "all x.((CooksDownstairs(x) & AirConditionerRuns(x)) -> SmokeUpstairs(x))", "all x.((Cooking(x) & Downstairs(x) & AirConditionerRuning(x)) -> SmokeUpstairs(x))", "all x.((Cooking(x) & DownstairsAirConditioner(x) & RunningAirConditioner(x)) -> SmokeUpstairs(x))", "all x.((Cooking(x) & Downstairs(x) & AirConditionerRuns(x)) -> SmokeUpstairs(x))", "all x.((Cooking(x) & DownstairsAirConditionerRunning(x)) -> SmokeUpstairs(x))", "all x y.((Cooking(x) & AirConditioner(y) & Downstairs(x) & RunningAirConditioner(y)) -> SmokeUpstairs(x))", "all x.((Cooking(x) & AirConditionerRunning(x)) -> SmokeUpstairs(x))", "all x.((Cooking(x) & AirConditionerRuning(x)) -> SmokeUpstairs(x))", "all x.((Cooking(x) & DownstairsAirConditionerRuning(x)) -> SmokeUpstairs(x))", "all x.((Cooking(x) & Downstairs(x) & AirConditionerRun(x)) -> SmokeUpstairs(x))", "all x.((CookingDownstairs(x) & AirConditionerRuns(x)) -> SmokeUpstairs(x))", "all x.((Cooking(x) & AirConditionerRuns(x)) -> SmokeUpstairs(x))"]}
{"id": "folio_train_488", "nl": "New York City is Located in the United States of America.", "fol": "IsLocatedIn(Nyc,Usa)", "prediction": ["All x.(NewYorkCity(x) -> UnitedStatesOfAmerica(x))", "all x y.((NewYorkCity(x) & UnitedStatesOfAmerica(y)) -> LocatedIn(x,y))", "all x.((NewYorkCity(x) & UnitedStatesOfAmerica(x)) -> LocatedIn(x,y))", "All x y.((NewYorkCity(x) & UnitedStatesOfAmerica(y)) -> LocatedIn(x,y))", "All x.((NewYorkCity(x) & UnitedStatesOfAmerica(x)) -> LocatedIn(x,y))", "all x.(NewYorkCity(x) -> UnitedStatesOfAmerica(x))", "All x.(NewYorkCity(x) -> LocatedInUnitedStatesOfAmerica(x))", "all x y z.((NewYorkCity(x) & UnitedStatesOfAmerica(y) & UnitedStatesOfAmerica(z)) -> LocatedIn(x,y,z))", "all x.(NewYorkCity(x) -> LocatedInUnitedStatesOfAmerica(x))", "all x.((NewYorkCity(x) & UnitedStatesOfAmerica(x)) -> LocatedIn(x))", "all x y.((NewYorkCity(x) & UnitedStatesOfAmerica(y)) -> LocatedIn(x,y))", "All x y.((NewYorkCity(x) & UnitedStatesOfAmerica(y)) -> LocatedIn(x,y))", "all x.((NewYorkCity(x) & UnitedStatesOfAmerica(x)) -> LocatedIn(x,y))", "All x.((NewYorkCity(x) & UnitedStatesOfAmerica(x)) -> LocatedIn(x))", "all x y z.((NewYorkCity(x) & UnitedStatesOfAmerica(y) & UnitedStatesOfAmerica(z)) -> LocatedIn(x,y,z))", "All x.((NewYorkCity(x) & UnitedStatesOfAmerica(x)) -> LocatedIn(x,y))"]}
{"id": "folio_train_489", "nl": "United States of America is part of North America.", "fol": "IsLocatedIn(Usa,NorthAmerica)", "prediction": ["all x.(UnitedStatesOfAmerica(x) -> PartOfNorthAmerica(x))", "all x.(UnitedStatesOfAmerica(x) -> NorthAmerica(x))", "all x y.((UnitedStatesOfAmerica(x) & NorthAmerica(y)) -> PartOf(x,y))", "all x.((UnitedStatesOfAmerica(x) & NorthAmerica(x)) -> PartOf(x,y))", "All x.(UnitedStatesOfAmerica(x) -> PartOfNorthAmerica(x))", "all x.((UnitedStatesOfAmerica(x) & NorthAmerica(x)) -> PartOf(x,NorthAmerica))", "all x.((UnitedStatesOfAmerica(x) & PartOfNorthAmerica(x)) -> PartOfNorthAmerica(x))", "all x.(UnitedStatesOfAmerica(x) -> PartOfNordAmerica(x))", "all x.(UnitedStatesOfAmerica(x) -> PartOfNorthAmerica(x))", "all x y.((UnitedStates(x) & NorthAmerica(y)) -> PartOf(x,y))", "All x.(UnitedStatesOfAmerica(x) -> NorthAmerica(x))", "all x.((UnitedStatesOfAmerica(x) & NorthAmerica(x)) -> PartOf(x,UnitedStatesOfAmerica))", "all x.(UnitedStatesOfAmerica(x) -> NorthAmericaPart(x))", "all x.(UnitedStatesOfAmerica(x) -> PartOfNorthAmerica(x))", "all x.((UnitedStatesOfAmerica(x) & NorthAmerica(x)) -> PartOf(x,NordAmerica))", "all x.((UnitedStatesOfAmerica(x) & NorthAmerica(x)) -> PartOf(x,America))"]}
{"id": "folio_train_490", "nl": "North America is in the western hemisphere of the earth.", "fol": "IsLocatedIn(NorthAmerica,WestHemisphere)", "prediction": ["all x.(NorthAmerica(x) -> WesternHemisphereOfEarth(x))", "all x y.((NorthAmerica(x) & WesternHemisphere(y)) -> InEarth(x,y))", "all x y.((NorthAmerica(x) & Earth(y)) -> WesternHemisphere(x,y))", "all x.(NorthAmerica(x) -> InWesternHemisphereOfEarth(x))", "all x.(NorthAmerica(x) -> WesternHemisphere(x))", "all x.(NorthAmerica(x) -> WestHemisphereOfEarth(x))", "all x.(NordAmerica(x) -> WesternHemisphereOfEarth(x))", "all x.(NorthAmerica(x) -> InWideHemisphereOfEarth(x))", "all x.(NorthAmerica(x) -> InWesterlyHemisphereOfEarth(x))", "all x.(NorthAmerica(x) -> WesternHemisphereOfEarth(x))", "all x.((NorthAmerica(x) & WesternHemisphere(x)) -> InEarth(x))", "all x y.((NorthAmerica(x) & Earth(y)) -> WesternHemispheric(x,y))", "all x.(NorthAmerica(x) -> InWesternHemisphereOfEarth(x))", "all x.(NorthAmerica(x) -> InWesternHemisphere(x))", "all x.((NorthAmerica(x) & WesternHemisphere(x)) -> Earth(x))", "all x y.((NorthAmerica(x) & WesternHemisphere(y)) -> In(x,y))"]}
{"id": "folio_train_491", "nl": "New York City is a highly developed city.", "fol": "IsHighlyDeveloped(Nyc)", "prediction": ["all x.((NewYorkCity(x) & HighlyDeveloped(x)) -> HighlyDeveloped(x))", "all x.(NewYorkCity(x) -> HighlyDeveloped(x))", "all x.(NewYorkCity(x) -> HighlyDevelopedCity(x))", "all x.((NewYorkCity(x) & HighlyDeveloped(x)) -> HighlyDevelopedCity(x))", "all x.(NewYork(x) -> HighlyDevelopedCity(x))", "all x.((NewYork(x) & HighlyDeveloped(x)) -> City(x))", "all x.((NewYorkCity(x) & HighlyDevelopedCity(x)) -> HighlyDeveloped(x))", "all x.((NewYork(x) & HighlyDeveloped(x)) -> HighlyDeveloped(x))", "all x.((NewYorkCity(x) & HighlyDevelopedCity(x)) -> HighlyDevelopedCity(x))", "all x.((NewYorkCity(x) & HighlyDeveloped(x)) -> HighlyDeveloped(x))", "all x.((NewYorkCity(x) & HighlyDeveloped(x)) -> City(x))", "all x.((NewYork(x) & HighlyDevelopedCity(x)) -> HighlyDeveloped(x))", "all x.((NewYork(x) & HighlyDeveloped(x)) -> HighlyDevelopedCity(x))", "all x.((NewYork(x) & HighlyDevelopedCity(x)) -> HighlyDevelopedCity(x))", "all x.((NewYorkCity(x) & HighlyDeveloped(x)) -> LocatedIn(x,y))", "All x.((NewYorkCity(x) & HighlyDeveloped(x)) -> HighlyDeveloped(x))"]}
{"id": "folio_train_492", "nl": "If place A is located in place B and place B is located in place C, then place A is located in place C.", "fol": "all z.((IsLocatedIn(x,y) & IsLocatedIn(y,z)) -> IsLocatedIn(x,z))", "prediction": ["all x.((PlaceA(x) & LocatedInPlaceB(x) & LocatedInPlaceC(x)) -> LocatedInPlaceC(x))", "all x.((Place(x) & LocatedInPlaceB(x) & LocatedInPlaceC(x)) -> LocatedInPlaceC(x))", "all x.((PlaceA(x) & LocatedInPlaceB(x) & LocatedInPlaceC(x)) -> LocatedInPlaceC(x))", "all x.((PlaceA(x) & PlaceB(x) & PlaceC(x)) -> LocatedInPlaceC(x))", "all x y z.((Place(x) & Place(y) & Place(z) & LocatedIn(x,y,z)) -> LocatedIn(x,y,z))", "all x y.((Place(x) & Place(y) & LocatedIn(x,y)) -> LocatedIn(x,y))", "all x y z.((Place(x) & Place(y) & Place(z) & LocatedIn(x,y,z)) -> LocatedIn(x,y,z))", "all x.((Place(x) & LocatedInPlaceB(x) & LocatedInPlaceC(x)) -> LocatedInPlaceC(x))", "all x y.((Place(x) & Place(y) & LocatedInPlace(x,y)) -> LocatedInPlace(x,y))", "all x y.((Place(x) & Place(y) & LocatedIn(x,y)) -> LocatedIn(x,y))", "all x y z.((Place(x) & Place(y) & Place(z) & LocatedIn(x,y,z)) -> LocatedIn(x,y,z))", "all x.((PlaceA(x) & PlaceB(x) & PlaceC(x)) -> LocatedInPlaceC(x))", "all x y.((Place(x) & Place(y) & LocatedInPlaceB(x,y) & LocatedInPlaceC(y)) -> LocatedInPlaceC(x,y))", "all x y.((Place(x) & Place(y) & LocatedInPlace(x,y)) -> LocatedInPlace(x,y))", "all x.((PlaceA(x) & PlaceB(x) & PlaceC(x)) -> LocatedInPlaceA(x))", "all x y.((Place(x) & Place(y) & LocatedInPlaceB(x,y) & LocatedInPlaceC(x,y)) -> LocatedInPlaceC(x,y))"]}
{"id": "folio_train_493", "nl": "A highly developed city is located in the western hemisphere of the earth.", "fol": "exists x.(IsHighlyDeveloped(x) -> IsLocatedIn(x,WestHemisphere))", "prediction": ["all x.((City(x) & WesternHemisphere(x)) -> HighlyDeveloped(x))", "all x y.((City(x) & WesternHemisphere(y)) -> HighlyDeveloped(x))", "all x.((City(x) & WesternHemisphereOfEarth(x)) -> HighlyDeveloped(x))", "all x y z.((City(x) & WesternHemisphere(y) & Earth(z)) -> HighlyDeveloped(x))", "all x.((City(x) & HighlyDeveloped(x)) -> WesternHemisphereOfEarth(x))", "all x.(HighlyDevelopedCity(x) -> (LocatedInWesterlyHemisphere(x) & LocatedInWesterlyHemisphere(x)))", "all x y z.((City(x) & WesternHemisphere(y) & Earth(z)) -> HighlyDeveloped(x,y,z))", "all x y z.((City(x) & WesternHemisphere(y) & Earth(z) & LocatedIn(x,y,z)) -> HighlyDeveloped(x))", "all x.((City(x) & HighlyDeveloped(x)) -> WestHemisphereOfEarth(x))", "all x y.((City(x) & WesternHemisphere(y)) -> HighlyDeveloped(x,y))", "all x.((City(x) & WesternHemispheric(x)) -> HighlyDeveloped(x))", "all x.(HighlyDevelopedCity(x) -> (LocatedInWesterlyHemisphereOfEarth(x) & LocatedInWesterlyHemisphereOfEarth(x)))", "all x y z.((City(x) & WesternHemisphere(y) & Earth(z) & HighlyDeveloped(x)) -> LocatedIn(x,y,z))", "all x.((City(x) & HighlyDeveloped(x)) -> WesternHemisphere(x))", "all x.(HighlyDevelopedCity(x) -> (LocatedInWesternHemisphere(x) & LocatedInWesternHemisphere(x)))", "all x.(HighlyDevelopedCity(x) -> (LocatedInWesternHemisphere(x) & LocatedInWesternHemisphere(x)))"]}
{"id": "folio_train_494", "nl": "USA is not located in western hemisphere of the earth.", "fol": "-IsLocatedIn(Usa,WestHemisphere)", "prediction": ["all x y.((USA(x) & WesternHemisphere(y)) -> -LocatedIn(x,y))", "all x.(USA(x) -> -LocatedInWesterlyHemisphereOfEarth(x))", "all x y.((USA(x) & WesternHemisphere(y)) -> -LocatedIn(x,y))", "all x.(USA(x) -> -WesterlyHemisphereOfEarth(x))", "all x.(USA(x) -> -LocatedInWideHemisphereOfEarth(x))", "all x.(USA(x) -> -LocatedInWesternHemisphereOfEarth(x))", "all x.(USA(x) -> -LocatedInWesternHemisphereOfEarth(x))", "all x.(USA(x) -> -WesternHemisphereOfEarth(x))", "all x.(USA(x) -> -LocatedInWesterlyHemisphere(x))", "all x.(USA(x) -> -LocatedInWesternHemisphere(x))", "all x.(USA(x) -> -LocatedInWesternHemisphere(x))", "all x.(USA(x) -> -WesternHemisphereOfEarth(x))", "all x.(USA(x) -> -WesterlyHemisphere(x))", "all x.(USA(x) -> -WesterlyHemispheric(x))", "all x.(USA(x) -> -LocatedInWesterlyHemispheric(x))", "all x y.((USA(x) & WesternHemisphere(y)) -> -RelocatedIn(x,y))"]}
{"id": "folio_train_495", "nl": "New York City is located in the New York State.", "fol": "IsLocatedIn(Nyc,NyState)", "prediction": ["all x.(NewYorkCity(x) -> NewYorkState(x))", "all x y.((NewYorkCity(x) & NewYorkState(y)) -> LocatedIn(x,y))", "all x.((NewYorkCity(x) & NewYorkState(y)) -> LocatedIn(x,y))", "all x.((NewYorkCity(x) & NewYorkState(x)) -> LocatedIn(x,y))", "all x.(NewYorkCity(x) -> LocatedInNewYorkState(x))", "All x.(NewYorkCity(x) -> NewYorkState(x))", "all x.(NewYorkCity(x) -> (LocatedInNewYorkState(x) | LocatedInNewYorkState(x)))", "all x y z.((NewYorkCity(x) & NewYorkState(y) & State(z)) -> LocatedIn(x,y,z))", "all x y z.((NewYorkCity(x) & NewYorkState(y) & NewYorkState(z)) -> LocatedIn(x,y,z))", "all x y.((NewYorkCity(x) & State(y)) -> LocatedIn(x,y))", "all x y.((NewYorkCity(x) & NewYorkState(y)) -> LocatedIn(x,y))", "all x y z.((NewYorkCity(x) & State(y) & NewYork(z)) -> LocatedIn(x,y,z))", "all x y.((New YorkCity(x) & NewYorkState(y)) -> LocatedIn(x,y))", "all x.(NewYork(x) -> NewYorkState(x))", "all x y.((NewYorkCity(x) & NewYorkState(y)) -> LocalizedIn(x,y))", "all x.(NewYorkCity(x) -> (LocatedInNewYorkState(x) & NewYorkState(y)))"]}
{"id": "folio_train_496", "nl": "Callus 4 is a poem that was written by the ancient Roman writer Catullus.", "fol": "(IsPoem(Callus4) & AuthoredBy(Callus4,Catullus) & IsRomanWriter(Catullus))", "prediction": ["all x.((Poem(x) & AncientRomanWriterCatullus(x)) -> Callus4(x))", "all x.((Poem(x) & WrittenByAncientRomanWriterCatullus(x)) -> Callus4(x))", "all x.(Callus4(x) -> (Poem(x) & WrittenByAncientRomanWriterCatullus(x)))", "all x.((Poem(x) & WrittenByAntiqueRomanWriterCatullus(x)) -> Callus4(x))", "all x.(Callus(x) -> (Poem(x) & WrittenByAncientRomanWriterCatullus(x)))", "all x.(Callus4(x) -> (Poem(x) & WrittenByAntiqueRomanWriterCatullus(x)))", "all x y.((Poem(x) & AncientRomanWriterCatullus(y)) -> Callus4(x))", "all x.((Poem(x) & WrittenByAncientRomanWriterCatullus(x)) -> Callus4.", "all x.(Callus(x) -> (Poem(x) & WrittenByAntiqueRomanWriterCatullus(x)))", "all x y.((Poem(x) & AncientRomanWriterCatullus(y)) -> Callus4(x,y))", "all x y.((Poem(x) & AncientRomanWriterCatullus(y) & WrittenBy(x,y)) -> Callus4(x))", "all x.((Poem(x) & AncientRomanWriter(x) & Catullus(x)) -> Callus4(x))", "all x.((Poem(x) & AncientRomanWriterCatullus(x)) -> Callus4.", "all x.((Poem(x) & Callus4(x)) -> WrittenByAncientRomanWriterCatullus(x))", "all x.((Poem(x) & WrittenByAntiqueRomanWriterCatullus(x)) -> Callus4.", "All x.((Poem(x) & WrittenByAncientRomanWriterCatullus(x)) -> Callus4(x))"]}
{"id": "folio_train_497", "nl": "Callus 4 is a story about the retirement of a well-traveled ship.", "fol": "DescribesRetirementOfShip(Callus4)", "prediction": ["all x.(Callus4(x) -> (RetirementOfWellTraveledShip(x) & WellTraveledShip(x)))", "all x.((Callus4(x) & WellTraveledShip(x)) -> RetirementStory(x))", "all x.(Callus(x) -> (RetirementOfWellTraveledShip(x) & WellTraveledShip(x)))", "all x.((Callus4(x) & WellTraveledShip(x)) -> Retires(x))", "all x y.((Callus4(x) & WellTraveledShip(y)) -> Retires(x,y))", "all x.((Callus4(x) & WellTraveledShip(x)) -> Retirement(x))", "all x.(Callus4(x) -> (Retirement(x) & WellTraveledShip(x)))", "all x.((Ship(x) & WellTraveled(x)) -> Callus4(x))", "all x.(Callus(x) -> (Retirement(x) & WellTraveledShip(x)))", "all x.((Callus4(x) & WellTraveledShip(x)) -> StoryAboutRetiring(x))", "all x y z.((Callus4(x) & Ship(y) & WellTraveled(z)) -> Retires(x,y,z))", "all x y.((Callus4(x) & WellTraveledShip(y)) -> Retirement(x,y))", "all x.(Callus4(x) -> RetirementOfWellTraveledShip(x))", "all x.((Callus4(x) & WellTraveledShip(x)) -> RetirementStory(x))", "all x.((Callus4(x) & WellTraveledShip(x)) -> Retirement(x))", "all x.((Callus4(x) & WellTraveledShip(x)) -> Story(x))"]}
{"id": "folio_train_498", "nl": "There is a strong analogy of human aging in the poem Callus 4.", "fol": "(IsPoem(Callus4) -> HasAgingAnalogy(Callus4))", "prediction": ["all x y.((Poem(x) & Poem(y)) -> StrongAnalogyOfHumanAging(x,y))", "all x y.((Poem(x) & Poem(y) & Callus4(y)) -> StrongAnalogyOfHumanAging(x,y))", "all x y z.((Poem(x) & Poem(y) & Poem(z)) -> StrongAnalogyOfHumanAging(x,y,z))", "all x y z.((Poem(x) & Poem(y) & Poem(z) & Callus4(y)) -> StrongAnalogyOfHumanAging(x,y,z))", "all x.((Poem(x) & Poem(x)) -> StrongAnalogyOfHumanAging(x))", "all x y z.((Poem(x) & Poem(y) & Poem(z) & Callus4(z)) -> StrongAnalogyOfHumanAging(x,y,z))", "all x.((Poem(x) & Poem(x) & Callus4(x)) -> StrongAnalogyOfHumanAging(x))", "all x y z.((Poem(x) & Poem(y) & Poem(z)) -> AnalogousOfHumanAging(x,y,z))", "all x y z.((Poem(x) & Poem(y) & Poem(z)) -> AnalogyOfHumanAging(x,y,z))", "all x y z.((Poem(x) & Poem(y) & Poem(z) & Callus4)) -> StrongAnalogyOfHumanAging(x,y,z))", "all x y.((Poem(x) & Poem(y) & Callus4(x)) -> StrongAnalogyOfHumanAging(x,y))", "all x y.((Poem(x) & Poem(y) & Callus4)) -> StrongAnalogyOfHumanAging(x,y))", "all x y z.((Poem(x) & Poem(y) & Poem(z) & Callus4(y,z)) -> StrongAnalogyOfHumanAging(x,y,z))", "all x.((Poem(x) & Callus4(x)) -> StrongAnalogyOfHumanAging(x))", "all x y z.((Poem(x) & Poem(y) & Poem(z)) -> StrongAnalogyOfHumanAgingInPoem(x,y,z))", "all x y z.((Poem(x) & Poem(y) & Poem(z) & Callus4(y)) -> StrongAnalogyOfHumanAging(x,y))"]}
{"id": "folio_train_499", "nl": "Callus 4 is written in an unusual iambic trimeter to convey a sense of speed over the waves.", "fol": "((IsPoem(Callus4) -> IsIambicTrimeter(Callus4)) & ConveysSenseOfWaves(Callus4))", "prediction": ["all x.(Callus4(x) -> (WrittenInUnusuallyIambicTrimeter(x) & ConveysSpeedOverWaves(x)))", "all x.(Callus4(x) -> (WrittenInUnusualIambicTrimeter(x) & ConveysSpeedOverWaves(x)))", "all x.(Callus(x) -> (WrittenInUnusuallyIambicTrimeter(x) & ConveysSpeedOverWaves(x)))", "all x.(Calculus4(x) -> (WrittenInUnusuallyIambicTrimeter(x) & ConveysSpeedOverWaves(x)))", "all x.(Callus(x) -> (WrittenInUnusualIambicTrimeter(x) & ConveysSpeedOverWaves(x)))", "all x.(Calculus(x) -> (WrittenInUnusuallyIambicTrimeter(x) & ConveysSpeedOverWaves(x)))", "all x.(Calculus4(x) -> (WrittenInUnusualIambicTrimeter(x) & ConveysSpeedOverWaves(x)))", "all x.(Callus4(x) -> (UnusuallyIambicTrimeter(x) & ConveysSpeedOverWaves(x)))", "all x.(Calculus(x) -> (WrittenInUnusualIambicTrimeter(x) & ConveysSpeedOverWaves(x)))", "all x.(Callus4(x) -> (WrittenInUnusuallyIambicTrimeter(x) & ConveysSpeed(x)))", "all x.(Callus(x) -> (UnusuallyIambicTrimeter(x) & ConveysSpeedOverWaves(x)))", "all x.((Calculus4(x) & UnusuallyIambicTrimeter(x)) -> ConveysSpeedOverWaves(x))", "all x.(Callus4(x) -> (WrittenInUnusuallyIambicTrimeter(x) & ConveysSensationOfSpeed(x)))", "all x.(Callus(x) -> (WrittenInUnusuallyIambicTrimeter(x) & ConveysSpeed(x)))", "all x.(Callus4(x) -> (WrittenInUnusualIambicTrimeter(x) & ConveysSensationOfSpeed(x)))", "all x.(Callus4(x) -> (WrittenInUnusualIambicTrimeter(x) & ConveysSpeed(x)))"]}
{"id": "folio_train_500", "nl": "There exists a poem written by an ancient Roman writer with a strong analogy of human aging.", "fol": "exists x.(IsPoem(x) & AuthoredBy(x,Catullus) & IsRomanWriter(Catullus) & HasAgingAnalogy(x))", "prediction": ["exists x.(Poem(x) & WrittenByAncientRomanWriter(x) & StrongAnalogyOfHumanAging(x))", "exists x y.(Poem(x) & AncientRomanWriter(y) & WrittenBy(x,y) & StrongAnalogyOfHumanAging(x))", "exists x y.((Poem(x) & AncientRomanWriter(y) & WrittenBy(x,y)) -> StrongAnalogyOfHumanAging(x))", "exists x y.((Poem(x) & AncientRomanWriter(y) & WrittenBy(x,y)) & StrongAnalogyOfHumanAging(x))", "exists x y z.(Poem(x) & AncientRomanWriter(y) & HumanAging(z) & WrittenBy(x,y) & StrongAnalogy(x,z))", "exists x y.((Poem(x) & AncientRomanWriter(y) & WrittenBy(x,y) & StrongAnalogyOfHumanAging(x)) -> WrittenBy(x,y))", "exists x y.(Poem(x) & AncientRomanWriter(y) & WrittenBy(x,y) & StrongAnalogyOfHumanAgeing(x))", "exists x.(Poem(x) & WrittenByAncientRomanWriter(x) & StrongAnalogyOfHumanAgeing(x))", "exists x y.((Poem(x) & AncientRomanWriter(y) & WrittenBy(x,y)) -> StrongAnalogyOfHumanAgeing(x))", "exists x y.((Poem(x) & AncientRomanWriter(y) & WrittenBy(x,y) & StrongAnalogyOfHumanAging(x)) -> StrongAnalogyOfHumanAging(x))", "exists x y z.((Poem(x) & AncientRomanWriter(y) & HumanAging(z) & WrittenBy(x,y) & StrongAnalogy(x,z)) -> StrongAnalogy(x,y,z))", "exists x y.(Poem(x) & AncientRomanWriter(y) & WrittenBy(x,y) & StrongAnalogyOfHumanAging(x,y))", "exists x y.(Poem(x) & WrittenBy(x,y) & AncientRomanWriter(y) & StrongAnalogyOfHumanAging(x))", "exists x.(Poem(x) & WrittenByAntiqueRomanWriter(x) & StrongAnalogyOfHumanAging(x))", "exists x y.((Poem(x) & AncientRomanWriter(y) & WrittenBy(x,y)) -> StrongAnalogyOfHumanAging(x,y))", "exists x y.(Poem(x) & AncientRomanWriter(y) & WrittenBy(x,y) & StrongAnalogy(x,HumanAging))"]}
{"id": "folio_train_501", "nl": "There exists a poem written by an ancient Roman writer written in iambic petameter.", "fol": "exists x.(IsPoem(x) & AuthoredBy(x,AncientRomanWriter) & IambicPentameter(x))", "prediction": ["exists x.(Poem(x) & WrittenByAncientRomanWriter(x) & WrittenInIambicPetameter(x))", "exists x.(Poem(x) & WrittenByAncientRomanWriter(x) & WrittenInIambicPetalmeter(x))", "exists x.(Poem(x) & AncientRomanWriter(x) & WrittenInIambicPetameter(x))", "exists x y.(Poem(x) & AncientRomanWriter(y) & WrittenInIambicPetameter(x,y))", "exists x y.(Poem(x) & AncientRomanWriter(y) & WrittenBy(x,y) & WrittenInIambicPetameter(x))", "exists x.(Poem(x) & WrittenByAntiqueRomanWriter(x) & WrittenInIambicPetameter(x))", "exists x.(Poem(x) & WrittenByAncientRomanWriter(x) & WrittenInIambicPedameter(x))", "exists x y.(Poem(x) & AncientRomanWriter(y) & WrittenInIambicPetameter(x))", "exists x y.(Poem(x) & AncientRomanWriter(y) & WrittenInIambicPetalmeter(x,y))", "exists x y.(Poem(x) & AncientRomanWriter(y) & WrittenBy(x,y) & WrittenIn(x,y) & IambicPetameter(x))", "exists x.(Poem(x) & AncientRomanWriter(x) & WrittenInIambicPetalmeter(x))", "exists x y.(Poem(x) & AncientRomanWriter(y) & WrittenBy(x,y) & WrittenInIambicPetalmeter(x))", "exists x.(Poem(x) & WrittenByAntiqueRomanWriter(x) & WrittenInIambicPetalmeter(x))", "exists x y.(Poem(x) & AncientRomanWriter(y) & WrittenBy(x,y) & WrittenIn(x,y))", "exists x y.((Poem(x) & AncientRomanWriter(y) & WrittenBy(x,y)) -> WrittenInIambicPetameter(x))", "exists x y.((Poem(x) & AncientRomanWriter(y) & WrittenIn(x,y)) -> WrittenIn(x,y))"]}
{"id": "folio_train_502", "nl": "Callus 4 is written in an unusual iambic trimeter to convey a strong analogy of human aging.", "fol": "(IsPoem(Callus4) & IsIambicTrimeter(Callus4) & WrittenIambicToConvey(Callus4,StrongAgingAnalogy))", "prediction": ["all x.(Callus4(x) -> (WrittenInUnusuallyIambicTrimeter(x) & ConveysStrongAnalogyOfHumanAging(x)))", "all x.(Callus(x) -> (WrittenInUnusuallyIambicTrimeter(x) & ConveysStrongAnalogyOfHumanAging(x)))", "all x.(Callus4(x) -> (WrittenInUnusualIambicTrimeter(x) & ConveysStrongAnalogyOfHumanAging(x)))", "all x.(Callus4(x) -> (UnusuallyIambicTrimeter(x) & ConveysStrongAnalogyOfHumanAging(x)))", "all x.(Calculus4(x) -> (WrittenInUnusuallyIambicTrimeter(x) & ConveysStrongAnalogyOfHumanAging(x)))", "all x.(Callus(x) -> (WrittenInUnusualIambicTrimeter(x) & ConveysStrongAnalogyOfHumanAging(x)))", "all x.(Calculus(x) -> (WrittenInUnusuallyIambicTrimeter(x) & ConveysStrongAnalogyOfHumanAging(x)))", "all x.(Callus(x) -> (UnusuallyIambicTrimeter(x) & ConveysStrongAnalogyOfHumanAging(x)))", "all x.((Callus4(x) & UnusuallyIambicTrimeter(x)) -> ConveysStrongAnalogyOfHumanAging(x))", "all x.((Calculus4(x) & UnusuallyIambicTrimeter(x)) -> ConveysStrongAnalogyOfHumanAging(x))", "all x.(Callus4(x) -> (WrittenInUnusuallyIambicTrimeter(x) & ConveysStrongAnalogyOfHumanAgeing(x)))", "all x.(Calculus4(x) -> (UnusuallyIambicTrimeter(x) & ConveysStrongAnalogyOfHumanAging(x)))", "all x.(Callus4(x) -> (UnusuallyIambicTrimeter(x) & StrongAnalogyOfHumanAging(x)))", "all x.((Callus4(x) & UnusuallyIambicTrimeter(x)) -> StrongAnalogyOfHumanAging(x))", "all x.((Calculus4(x) & UnusuallyIambicTrimeter(x)) -> StrongAnalogyOfHumanAging(x))", "all x.(Callus4(x) -> (UnusualIambicTrimeter(x) & StrongAnalogyOfHumanAging(x)))"]}
{"id": "folio_train_503", "nl": "Westworld is an American science fiction-thriller TV series.", "fol": "(IsTVSeries(Westworld) & IsAmerican(Westworld) & IsScienceFictionThriller(Westworld))", "prediction": ["All x.(Westworld(x) -> (AmericanScientificFictionThriller(x) & TVSeries(x)))", "(ScientificFictionThriller(Westworld) & AmericanTVSeries(Westworld))", "All x.(Westworld(x) -> (AmericanScienceFictionThriller(x) & TVSeries(x)))", "(All x.(Westworld(x) -> AmericanScienceFictionThrillerTVSeries(x)))", "all x.(Westworld(x) -> (AmericanScientificFictionThriller(x) & TVSeries(x)))", "All x.(Westworld(x) -> (AmericanScientificFictionThrillerTVSeries(x) & ThrillerTVSeries(x)))", "all x.(Westworld(x) -> (AmericanScienceFictionThriller(x) & TVSeries(x)))", "All x.(Westworld(x) -> (AmericanScientificFictionThrillerTVSeries(x) & -AmericanScientificFictionThrillerTVSeries(x)))", "All x.(Westworld(x) -> (AmericanScienceFictionThriller(x) & TelevisionSeries(x)))", "all x.(Westworld(x) -> (AmericanScientificFictionThrillerTVSeries(x) & -AmericanScientificFictionThrillerTVSeries(x)))", "(ScientificFictionThrillerTVSeries(Westworld) & AmericanSeries(Westworld))", "All x.(Westworld(x) -> (AmericanScientificFictionThrillerTVSeries(x) & BasedOn(x,ScientificFiction) & BasedOn(x,Thriller)))", "all x.(Westworld(x) -> (AmericanScientificFictionThrillerTVSeries(x) & ThrillerTVSeries(x)))", "(ScientificFictionThriller(Westworld) & AmericanTelevisionSeries(Westworld))", "All x.(Westworld(x) -> (AmericanScienceFictionThrillerTVSeries(x) & BasedOn(x,ScientificFiction) & BasedOn(x,Thriller)))", "(AmericanScientificFictionThriller(Westworld) & TVSeries(Westworld))"]}
{"id": "folio_train_504", "nl": "In 2016, a new television series named Westworld debuted on HBO.", "fol": "DebutedInYear(Westworld,Year2016)", "prediction": ["all x.((TelevisionSeries(x) & Westworld(x)) -> DebutedOnHBO(x))", "all x.((NewTelevisionSeries(x) & Westworld(x)) -> DebutedOnHBO(x))", "all x.((TelevisionSeries(x) & Westworld(x) & HBO(x)) -> DebutedOn(x,y))", "all x.((TelevisionSeries(x) & Westworld(x)) -> DebutedOnHBOX(x))", "all x.((NewTelevisionSeries(x) & Westworld(x)) -> DebutedOnHBOX(x))", "all x y.((NewTelevisionSeries(x) & Westworld(y)) -> DebutedOnHBO(x,y))", "all x y z.((TelevisionSeries(x) & TelevisionSeries(y) & HBO(z) & Westworld(y)) -> DebutedOn(x,y,z))", "all x.((NewTelevisionSeries(x) & NamedWestworld(x)) -> DebutedOnHBO(x))", "all x y z.((TelevisionSeries(x) & TelevisionSeries(y) & HBO(z)) -> DebutedOn(x,y,z))", "all x.((TelevisionSeries(x) & NamedWestworld(x)) -> DebutedOnHBO(x))", "all x y.((TelevisionSeries(x) & TelevisionSeries(y) & HBO(x)) -> WestworldDebutedOn(x,y))", "all x y.((TelevisionSeries(x) & TelevisionSeries(y) & HBO(x)) -> DebutedOn(x,y))", "all x y.((TelevisionSeries(x) & TelevisionSeries(y) & HBO(y)) -> DebutedOn(x,y))", "all x.((TelevisionSeries(x) & Westworld(x) & HBO(x)) -> DebutedIn2016(x))", "all x y.((TelevisionSeries(x) & TelevisionSeries(y) & HBO(y)) -> WestworldDebutedOn(x,y))", "all x.((TelevisionSeries(x) & Westworld(x)) -> DebutedOnHobby(x))"]}
{"id": "folio_train_505", "nl": "The TV series Westworld is adapted from the original film in 1973, which was written and directed by Michael Crichton.", "fol": "exists x.(IsAdaptedFrom(Westworld,x) & ProducedInYear(x,Year1973) & WrittenBy(Michael,x) & DirectedBy(Michael,x))", "prediction": ["(AdaptedFromOriginalFilm(Westworld) & WrittenAndDirectedByMichaelCriton(Westworld))", "(AdaptedFromOriginalFilm(Westworld) & WrittenAndDirectedByMichaelCruchon(Westworld))", "all x.(Westworld(x) -> (AdaptedFromOriginalFilm(x) & WrittenAndDirectedByMichaelCriton(x)))", "all x y z.((TVSeries(x) & OriginalFilm(y) & Film(z) & WrittenAndDirectedBy(x,y,z)) -> WestworldAdaptedFrom(x,y,z))", "(AdaptedFromOriginalFilm(Westworld, 1973) & WrittenAndDirectedByMichaelCriton(Westworld))", "all x y z.((TelevisionSeries(x) & OriginalFilm(y) & Film(z) & WrittenAndDirectedBy(x,y,z)) -> WestworldAdaptedFrom(x,y,z))", "all x.(Westworld(x) -> (AdaptedFromOriginalFilm(x) & WrittenAndDirectedByMichaelCruchon(x)))", "(AdaptedFromOriginalFilm(Westworld, 1973) & WrittenAndDirectedByMichaelCriton(Westworld,73))", "(AdaptedFromOriginalFilm(Westworld, 1973) & WrittenAndDirectedByMichaelCruchon(Westworld))", "all x y.((TelevisionSeries(x) & OriginalFilm(y) & WrittenAndDirectedByMichaelCriton(x)) -> WestworldAdaptedFrom(x,y))", "(AdaptedFromOriginalFilm(Westworld,73) & WrittenAndDirectedByMichaelCriton(Westworld,73))", "all x y.((TVSeries(x) & OriginalFilm(y) & WrittenAndDirectedByMichaelCriton(x)) -> WestworldAdaptedFrom(x,y))", "all x y.((TelevisionSeries(x) & OriginalFilm(y) & WrittenAndDirectedByMichaelCruchon(x)) -> WestworldAdaptedFrom(x,y))", "all x y.((TelevisionSeries(x) & OriginalFilm(y) & WrittenAndDirectedByMichaelCriton(x,y)) -> WestworldAdaptedFrom(x,y))", "(AdaptedFromOriginalFilmIn(Westworld) & WrittenAndDirectedByMichaelCriton(Westworld))", "(AdaptedFromOriginalFilm(Westworld,73) & WrittenAndDirectedByMichaelCriton(Westworld))"]}
{"id": "folio_train_506", "nl": "The 1973 film Westworld is about robots that malfunction and begin killing the human visitors.", "fol": "IsAbout(Westworld,Robots)", "prediction": ["all x.((Film(x) & 1973(x)) -> (Robots(x) & Malfunction(x) & KillHumanVisitors(x)))", "all x.((Film(x) & 1973(x)) -> (Robot(x) & Malfunction(x) & KillHumanVisitors(x)))", "all x.((Film(x) & Westworld(x)) -> (Robots(x) & Malfunction(x) & KillHumanVisitors(x)))", "all x.((Film(x) & 1973(x) & Robots(x) & Malfunction(x) & KillHumanVisitors(x)) -> Westworld(x))", "all x y.((Film(x) & 1973(x) & Robot(y)) -> (Malfunctions(y) & KillsHumanVisitors(y)))", "all x.((Film(x) & 1973(x) & Robot(x)) -> (Malfunctions(x) & KillsHumanVisitors(x)))", "all x.((Film(x) & 1973(x)) -> (Robots(x) & Malfunction(x) & KillsHumanVisitors(x)))", "all x y z.((Film(x) & 1973(x) & Robot(y) & HumanVisitors(z)) -> (Malfunctions(y,z) & Kills(y,z)))", "all x.((Film(x) & Westworld(x) & 1973)) -> (Robots(x) & Malfunction(x) & KillHumanVisitors(x)))", "all x.((Film(x) & 1973(x)) -> (Robots(x) & Misfunction(x) & KillHumanVisitors(x)))", "all x.((Film(x) & 1973(x)) -> (Robots(x) & Missfunction(x) & KillHumanVisitors(x)))", "all x.((Film(x) & 1973(x)) -> (Robots(x) & Malfunction(x) & HumanVisitors(x)))", "all x.((Film(x) & 1973(x)) -> (RobotsMalfunction(x) & HumanVisitorsKill(x)))", "all x.((Film(x) & 1973(x)) -> (RobotsMalfunction(x) & HumanVisitors(x)))", "all x.((Film(x) & 1973(x)) -> (RobotsMalfunction(x) & KillHumanVisitors(x)))", "all x y z.((Film(x) & 1973(x) & Robot(y) & HumanVisitors(z)) -> (Malfunctions(y) & Kills(y,z)))"]}
{"id": "folio_train_507", "nl": "Michael Crichton has directed a film about robots.", "fol": "exists x.(Film(x) & IsAbout(x,Robots) & DirectedBy(Michael,x))", "prediction": ["all x y.((MichaelCriton(x) & Robot(y)) -> DirectedFilm(x,y))", "all x.((MichaelCriton(x) & Robot(y)) -> DirectedFilm(x,y))", "all x y z.((MichaelCriton(x) & Robot(y) & Film(z)) -> DirectedBy(x,y,z))", "all x y z.((MichaelCriton(x) & Film(y) & Robot(z)) -> DirectedBy(x,y,z))", "all x y.((MichaelCruchon(x) & Robot(y)) -> DirectedFilm(x,y))", "all x y.((MichaelCrichton(x) & Robot(y)) -> DirectedFilm(x,y))", "all x y.((MichaelCriton(x) & Robot(y)) -> Directed(x,y))", "all x y.((MichaelCriton(x) & Robot(y)) -> DirectsFilm(x,y))", "all x.((MichaelCruchon(x) & Robot(y)) -> DirectedFilm(x,y))", "all x.((MichaelCrichton(x) & Robot(y)) -> DirectedFilm(x,y))", "all x.((MichaelCriton(x) & Robot(y)) -> DirectsFilm(x,y))", "all x y.((Michael Crichton(x) & Robot(y)) -> DirectedFilm(x,y))", "all x y z.((MichaelCriton(x) & Robot(y) & Film(z)) -> Directed(x,y,z))", "all x.((MichaelCriton(x) & Robots(y)) -> DirectedFilm(x,y))", "all x y z.((MichaelCriton(x) & Film(y) & Robot(z)) -> DirectedBy(x,y))", "all x y z.((MichaelCriton(x) & Robot(y) & Film(z)) -> Directs(x,y,z))"]}
{"id": "folio_train_508", "nl": "An American TV series debuted in 2016.", "fol": "exists x.(IsTVSeries(x) & IsAmerican(x) & DebutedInYear(x,Year2016))", "prediction": ["all x.((AmericanTVSeries(x) & DebutedIn2016(x)) -> DebutedIn2016(x))", "all x.(AmericanTVSeries(x) -> DebutedIn2016(x))", "all x.((AmericanTVSeries(x) & DebutedIn2016(x)) -> AmericanTVSeries(x))", "all x.((AmericanTelevisionSeries(x) & DebutedIn2016(x)) -> DebutedIn2016(x))", "all x.(AmericanTelevisionSeries(x) -> DebutedIn2016(x))", "all x y.((AmericanTVSeries(x) & DebutedIn2016(x,y)) -> DebutedIn2016(x,y))", "all x y.((AmericanTVSeries(x) & AmericanTVSeries(y)) -> DebutedIn2016(x,y))", "all x y.((AmericanTVSeries(x) & DebutedIn2016(x,y)) -> DebutedIn2016(y))", "all x.((AmericanTVSeries(x) & DebutedIn2016(x)) -> (AmericanTVSeries(x) & DebutedIn2016(x)))", "all x y.((AmericanTVSeries(x) & DebutedIn2016(x,y)) -> DebutedIn2016(x))", "all x.((AmericanTVShowSeries(x) & DebutedIn2016(x)) -> DebutedIn2016(x))", "all x y z.((AmericanTVSeries(x) & AmericanTVSeries(y) & 2016(z)) -> DebutedIn(x,y,z))", "all x y.((AmericanTVSeries(x) & TelevisionSeries(y)) -> DebutedIn2016(x,y))", "all x y.((AmericanTVSeries(x) & DebutedIn2016(x,y)) -> AmericanTVSeries(y))", "all x y.((AmericanTVSeries(x) & DebutedIn2016(x,y)) -> AmericanTVSeries(x))", "all x.((AmericanTelevisionSeries(x) & DebutedIn2016(x)) -> AmericanTVSeries(x))"]}
{"id": "folio_train_509", "nl": "The 2008 Summer Olympics were held in Beijing, China.", "fol": "HeldInLocation(Summer2008olympics,Beijingchina)", "prediction": ["all x y.((SummerOlympics(x) & Beijing(y)) -> HeldIn(x,y))", "all x y z.((SummerOlympics(x) & Beijing(y) & China(z)) -> HeldIn(x,y,z))", "all x.((SummerOlympics(x) & HeldIn(x,Beijing)) -> HeldIn(x,China))", "all x.((SummerOlympics(x) & HeldInBeijing(x)) -> HeldInChina(x))", "all x.((SummerOlympics(x) & HeldIn(x,Beijing,China)) -> HeldIn(x,Beijing,China))", "all x.(SummerOlympics(x) -> HeldIn(x,Beijing,China))", "all x y z.((SummerOlympics(x) & Summer(y) & Beijing(z)) -> HeldIn(x,y,z))", "All x y.((SummerOlympics(x) & Beijing(y)) -> HeldIn(x,y))", "all x.((SummerOlympics(x) & HeldIn(x,Beijing) & HeldIn(x,China)) -> HeldIn(x,Beijing))", "all x.((SummerOlympics(x) & HeldIn(x,Beijing,China)) -> HeldIn(x,Beijing))", "all x.((SummerOlympics(x) & HeldIn(x,Beijing)) -> HeldIn(x,Chinese))", "All x.((SummerOlympics(x) & HeldIn(x,Beijing,China)) -> HeldIn(x,Beijing,China))", "All x.((SummerOlympics(x) & HeldIn(x,Beijing)) -> HeldIn(x,China))", "all x y.((SummerOlympics(x) & Summer(y)) -> HeldIn(x,y))", "all x.(2008SummerOlympics(x) -> HeldIn(x,Beijing,China))", "All x.(SummerOlympics(x) -> HeldIn(x,Beijing,China))"]}
{"id": "folio_train_510", "nl": "The 2008 Summer Olympics were the second Summer Olympic Games to be held in a communist state.", "fol": "SecondOlympicGamesIn(Summer2008olympics,Heldincommuniststate)", "prediction": ["all x.((SummerOlympics(x) & SecondSummerOlympics(x) & HeldInCommunistState(x)) -> HeldInCommunistState(x))", "all x.((SummerOlympics(x) & SecondSummerOlympics(x)) -> HeldInCommunistState(x))", "all x.((SummerOlympics(x) & SecondSummerOlympics(x) & HeldInCommunistState(x)) -> HeldInComunistState(x))", "all x.((SummerOlympics(x) & HeldInCommunistState(x)) -> SecondSummerOlympics(x))", "all x.((SummerOlympics(x) & SecondSummerOlympicGames(x) & HeldInCommunistState(x)) -> HeldInCommunistState(x))", "all x y.((SummerOlympics(x) & ComunistState(y)) -> SecondSummerOlympics(x,y))", "all x.((SummerOlympics(x) & HeldInCommunistState(x)) -> SummerOlympics(x))", "all x.((SummerOlympics(x) & SecondSummerOlympics(x) & HeldInCommunistState(x)) -> HeldInState(x))", "all x.((SummerOlympics(x) & SecondSummerOlympics(x) & HeldInCommunistState(x)) -> SummerOlympics(x))", "all x.((SummerOlympics(x) & HeldInCommunistState(x)) -> SecondSummerOlympicGames(x))", "all x y.((SummerOlympics(x) & ComunistState(y)) -> SecondSummerOlympicGames(x,y))", "all x.((SummerOlympics(x) & SecondSummerOlympics(x) & HeldInCommunistState(x)) -> HeldIn(x,y))", "all x y.((SummerOlympics(x) & ComunistState(y)) -> SummerOlympics(x,y))", "all x y.((SummerOlympics(x) & Summer(y)) -> HeldInCommunistState(x,y))", "all x y.((SummerOlympics(x) & CommunistState(y)) -> SecondSummerOlympics(x,y))", "all x.((SummerOlympics(x) & ComunistState(x)) -> SecondSummerOlympics(x))"]}
{"id": "folio_train_511", "nl": "China won the most gold medals (48) in the 2008 Summer Olympics.", "fol": "WonMedals(China,Mostgoldmedals)", "prediction": ["all x y.((China(x) & SummerOlympics(y)) -> (WonMostGoldMedals(x,y) & (WonMostGoldMedals(x,y) | WonMostGoldMedals(x,y))))", "all x y.((China(x) & SummerOlympics(y) & MostGoldMedal(x,y)) -> Wins(x,y))", "all x y.((China(x) & SummerOlympics(y)) -> (WonMostGoldMedals(x,y) & (WonMostGoldMedals(x,y) | (WonMostGoldMedals(x,y) | (WonMostGoldMedals(x,y))))))", "all x y.((China(x) & SummerOlympics(y) & MostGoldMedal(x,y)) -> (WonMostGoldMedal(x,y) & (WonMostGoldMedal(x,y) | WonMostGoldMedal(x,y))))", "all x y.((China(x) & SummerOlympics(y)) -> (WonGoldMedal(x,48) & MostGoldMedal(x,y)))", "all x y.((China(x) & SummerOlympics(y)) -> WonMostGoldMedals(x,y))", "all x y.((China(x) & SummerOlympics(y) & MostGoldMedal(x,y)) -> Won(x,y))", "all x y.((China(x) & SummerOlympics(y)) -> WonMostGoldMedal(x,y))", "all x y.((China(x) & SummerOlympics(y)) -> (WonMostGoldMedals(x,y) & (WonMostGoldMedals(x,y) & (WonMostGoldMedals(x,y) | WonMostGoldMedals(x,y)))))", "all x y.((China(x) & SummerOlympics(y)) -> (WonMostGoldMedals(x,y) & (WonMostGoldMedals(x,y) | WinMostGoldMedals(x,y))))", "all x.((China(x) & GoldMedal(x,48)) -> WonInSummerOlympics(x))", "all x y.((China(x) & SummerOlympics(y)) -> (WonMostGoldMedals(x,y) & (WonMostGoldMedals(x,y) | (WonMostGoldMedals(x,y) | (WonMostGoldMedals(x,y)))))))", "all x y.((China(x) & SummerOlympics(y)) -> (WonMostGoldMedals(x,48)))", "all x y.((China(x) & SummerOlympics(y) & MostGoldMedal(x,y)) -> Won(x,48))", "all x y.((China(x) & SummerOlympics(y) & MostGoldMedal(x,y)) -> (WonMostGoldMedal(x,y) & (WonMostGoldMedal(x,y) | WinMostGoldMedal(x,y))))", "all x y.((China(x) & SummerOlympics(y)) -> (WonMostGoldMedals(x,y) & (WonMostGoldMedals(x,y) | WinsMostGoldMedals(x,y))))"]}
{"id": "folio_train_512", "nl": "The United States placed second in the gold medal tally but won the highest number of medals overall (112) in the 2008 Summer Olympics.", "fol": "(PlacedInMedalTally(Unitedstates,Secondingoldmedals) & WonMedals(Unitedstates,Highestnumberofmedals))", "prediction": ["all x y.((UnitedStates(x) & SummerOlympics(y)) -> (PlacedSecondInGoldMedalTally(x,y) & WonHighestNumberOfMedals(x,y)))", "all x y.((UnitedStates(x) & SummerOlympics(y)) -> (PlacedSecondInGoldMedalTally(x,y) & WornHighestNumberOfMedals(x,y)))", "all x y z.((UnitedStates(x) & GoldMedalTally(y) & SummerOlympics(z)) -> (PlacedSecondInTally(x,y) & WonHighestNumberOfMedals(x,z)))", "all x y.((UnitedStates(x) & SummerOlympics(y)) -> (PlacedSecondInGoldMedalTally(x,y) & WinsHighestNumberOfMedals(x,y)))", "all x y.((UnitedStates(x) & SummerOlympics(y) & PlacedSecondInGoldMedalTally(x,y)) -> WonHighestNumberOfMedals(x,y))", "all x y z.((UnitedStates(x) & GoldMedalTally(y) & SummerOlympics(z) & PlacedSecond(x,y)) -> WonHighestNumberOfMedals(x,z))", "all x y z.((UnitedStates(x) & GoldMedalTally(y) & SummerOlympics(z) & PlacedSecondInTally(x,y)) -> WonHighestNumberOfMedals(x,z))", "all x y.((UnitedStates(x) & SummerOlympics(y)) -> (SecondInGoldMedalTally(x,y) & HighestNumberOfMedals(x,y)))", "all x y z.((UnitedStates(x) & GoldMedalTally(y) & SummerOlympics(z) & PlacedSecond(x,y)) -> WonHighestNumberOfMeals(x,z))", "all x y.((UnitedStates(x) & GoldMedalTally(y)) -> (PlacedSecondInTally(x,y) & WonHighestNumberOfMedals(x,y)))", "all x y.((UnitedStates(x) & GoldMedalTally(y)) -> (PlacedSecond(x,y) & WonHighestNumberOfMedals(x,y)))", "all x.((UnitedStates(x) & GoldMedalTally(x,2) & HighestNumberOfMedals(x,12)) -> PlacedSecond(x))", "all x y z.((UnitedStates(x) & GoldMedalTally(y) & SummerOlympics(z) & PlacedSecondInTally(x,y)) -> WonHighestNumberOfMeals(x,z))", "all x y z.((UnitedStates(x) & GoldMedalTally(y) & SummerOlympics(z)) -> (PlacedSecond(x,y) & WonHighestNumberOfMedals(x,z)))", "all x y z.((UnitedStates(x) & GoldMedalTally(y) & SummerOlympics(z) & PlacedSecond(x,y)) -> WinsHighestNumberOfMedals(x,z))", "all x y.((UnitedStates(x) & SummerOlympics(y)) -> (PlacedSecondInGoldMedalTally(x,y) & WonHighestNumberOfMedal(x,y)))"]}
{"id": "folio_train_513", "nl": "The third place in the gold medal tally was achieved by Russia in the 2008 Summer Olympics.", "fol": "PlacedInMedalTally(Russia,Thirdingoldmedals)", "prediction": ["all x y.((Russland(x) & SummerOlympics(y)) -> ThirdPlaceInGoldMedalTally(x,y))", "all x y.((Russland(x) & SummerOlympics(y) & 2008(y)) -> ThirdPlaceInGoldMedalTally(x,y))", "all x.((Russland(x) & SummerOlympics(x)) -> ThirdPlaceInGoldMedalTally(x))", "all x y.((Russland(x) & SummerOlympics(y)) -> ThirdPlace(x,y))", "all x y.((Russland(x) & SummerOlympics(y)) -> (GoldMedalTally(x,y) & ThirdPlace(x,y)))", "all x y.((Russian(x) & SummerOlympics(y)) -> ThirdPlaceInGoldMedalTally(x,y))", "all x y z.((GoldMedalTally(x) & Russia(y) & SummerOlympics(z)) -> AchievedThreePlaces(y,z))", "all x y.((Russland(x) & SummerOlympics(y)) -> AchievedThreePlacesInGoldMedalTally(x,y))", "all x.((Russland(x) & SummerOlympics(x,2008)) -> ThirdPlaceInGoldMedalTally(x))", "all x y.((Russland(x) & SummerOlympics(y)) -> GoldMedalTally(x,y))", "all x y.((Russland(x) & SummerOlympics(y) & 2008(z)) -> ThirdPlaceInGoldMedalTally(x,y))", "all x y z.((GoldMedalTally(x) & Russia(y) & SummerOlympics(z)) -> AttainedThreePlaces(y,z))", "all x y.((Russland(x) & SummerOlympics(y) & 2008(z)) -> ThirdPlaceInGoldMedalTally(x,y,z))", "all x y.((Russland(x) & SummerOlympics(y)) -> AchievedThreePlaces(x,y))", "all x y z.((GoldMedalTally(x) & Russia(y) & SummerOlympics(z)) -> AchievedThreePlaces(x,y,z))", "all x y.((Russland(x) & SummerOlympics(y)) -> (GoldMedalTally(x,y) & ThirdPlace(x)))"]}
{"id": "folio_train_514", "nl": "If a country places third in gold medals, then they had fewer gold medals than the team that won the most gold medals.", "fol": "all x y.((PlacedInMedalTally(x,Thirdingoldmedals) & WonMedals(y,Mostgoldmedals)) -> HasFewerGoldMedalsThan(x,y))", "prediction": ["all x y.((Country(x) & Team(y) & PlacesThreeInGoldMedal(x,y)) -> FewerGoldMedal(x,y))", "all x y.((Country(x) & Team(y) & PlacesThreeInGoldMedals(x,y)) -> FewerGoldMedals(x,y))", "all x y.((Country(x) & Country(y) & PlacesThreeInGoldMedal(x,y)) -> FewerGoldMedal(x,y))", "all x y.((Country(x) & Team(y) & PlacesThreeInGoldMedal(x,y)) -> FewerGoldMedals(x,y))", "all x y.((Country(x) & Country(y) & PlacesThreeInGoldMedals(x,y)) -> FewerGoldMedals(x,y))", "all x y.((Country(x) & Team(y) & PlacesThirdInGoldMedal(x,y)) -> FewerGoldMedal(x,y))", "all x y.((Country(x) & Country(y) & PlacesThreeInGoldMedal(x,y)) -> FewerGoldMedals(x,y))", "all x y.((Country(x) & Team(y) & PlacesThreeInGoldMedals(x)) -> FewerGoldMedals(x,y))", "all x y.((Country(x) & Team(y) & PlacesThreethInGoldMedal(x,y)) -> FewerGoldMedal(x,y))", "all x y z.((Country(x) & GoldMedal(y) & Team(z) & PlacesThreeth(x,y)) -> FewerGoldMedals(x,z))", "all x y.((Country(x) & Team(y) & PlacesThirdInGoldMedal(x,y)) -> FewerGoldMedals(x,y))", "all x y.((Country(x) & Team(y) & PlacesThirdInGoldMedal(x)) -> FewerGoldMedal(x,y))", "all x y z.((Country(x) & GoldMedal(y) & Team(z) & PlacesThreeth(x,y)) -> FewerGoldMedal(x,z))", "all x y.((Country(x) & Team(y) & PlacesThreeInGoldMedals(x,y)) -> FewerGoldMedalsThanMostGoldMedals(x,y))", "all x y.((Country(x) & PlacesThreeInGoldMedal(x,y)) -> FewerGoldMedal(x,y))", "all x y.((Country(x) & Team(y) & PlacesThreeInGoldMedal(x,y)) -> FewerGoldMedal(y,x))"]}
{"id": "folio_train_515", "nl": "87 countries won at least one medal during the 2008 Games.", "fol": "exists x.(IsCountry(x) & WonMedals(x,Medal))", "prediction": ["all x y.((Country(x) & Games(y)) -> WonAtLeastOneMedal(x,y))", "all x y z.((Country(x) & Country(y) & Games(z) & WinsMedal(x,y,z)) -> WinsMedal(x,y,z))", "all x y.((Country(x) & Country(y)) -> WonAtLeastOneMedal(x,y))", "all x y.((Country(x) & Games(y) & WinsMedal(x,y)) -> WinsMedal(x,y))", "all x.((Country(x) & WinsMedal(x,2008)) -> AtLeastOneMedal(x))", "all x y.((Country(x) & Country(y)) -> WonMedal(x,y))", "all x y.((Country(x) & Country(y) & Games(x,y)) -> WonAtLeastOneMedal(x,y))", "all x y.((Country(x) & Games(y) & WinsMedal(x,y)) -> AtLeastOneMedal(x,y))", "all x y z.((Country(x) & Country(y) & Games(z) & WinsMedal(x,y,z)) -> WinsMedal(y,z))", "all x y z.((Country(x) & Country(y) & Games(z)) -> WonAtLeastOneMedal(x,y,z))", "all x y.((Country(x) & Games(y)) -> WinsMedal(x,y))", "all x y.((Country(x) & Country(y) & WonMedal(x,y)) -> WinMedal(x,y))", "all x y.((Country(x) & Games(y)) -> WonMedal(x,y))", "all x y z.((Country(x) & Country(y) & Games(z) & WinsMedal(x,y,z)) -> AtLeastOneMedal(y,z))", "all x y z.((Country(x) & Country(y) & Games(z) & WinsMedal(x,y,z)) -> AtLeastOneMedal(x,y,z))", "all x y.((Country(x) & Country(y) & Games(x,y)) -> WinsMedal(x,y))"]}
{"id": "folio_train_516", "nl": "Russia did not win fewer gold medals than China.", "fol": "-HasFewerGoldMedalsThan(Russia,China)", "prediction": ["all x y.((Russland(x) & China(y)) -> -WonMinorGoldMedal(x,y))", "all x y.((Russland(x) & China(y)) -> -WonMinorGoldMedals(x,y))", "all x y.((Russia(x) & China(y)) -> -WonMinorGoldMedal(x,y))", "all x y.((Russland(x) & China(y)) -> -WinsMinorGoldMedal(x,y))", "all x y.((Russland(x) & China(y)) -> -WonNinetyGoldMedal(x,y))", "all x y.((Russia(x) & China(y)) -> -WonMinorGoldMedals(x,y))", "all x y.((Russland(x) & China(y)) -> -WinsMinorGoldMedals(x,y))", "all x y.((Russland(x) & China(y)) -> WinsGoldMedal(x,y))", "all x y.((Russia(x) & China(y)) -> -WinsMinorGoldMedal(x,y))", "all x y.((Russland(x) & China(y)) -> -WinsGoldMedal(x,y))", "all x y.((Russia(x) & China(y)) -> -WinsGoldMedal(x,y))", "all x y.((Russland(x) & China(y)) -> -WonNinetyGoldMedals(x,y))", "all x y.((Russia(x) & China(y)) -> WinsGoldMedal(x,y))", "all x y z.((Russland(x) & China(y) & GoldMedal(z)) -> -WonMinorGoldMedal(x,z))", "all x.((Russland(x) & China(x)) -> -WonMinorGoldMedals(x))", "all x y z.((Russland(x) & China(y) & GoldMedal(z)) -> -WonMinorGoldMedal(x,y,z))"]}
{"id": "folio_train_517", "nl": "The United States won fewer gold medals than China.", "fol": "HasFewerGoldMedalsThan(Unitedstates,China)", "prediction": ["all x y.((UnitedStates(x) & China(y)) -> WonMinorGoldMedal(x,y))", "all x y.((UnitedStates(x) & China(y)) -> WonMinorGoldMedals(x,y))", "all x y.((UnitedStates(x) & China(y)) -> WonLessGoldMedals(x,y))", "all x y.((UnitedStates(x) & China(y)) -> WonLittlerGoldMedal(x,y))", "all x y.((UnitedStates(x) & China(y)) -> WonNinetyGoldMedal(x,y))", "all x y.((UnitedStates(x) & China(y)) -> WonNinetyGoldMedals(x,y))", "all x y.((UnitedState(x) & China(y)) -> WonMinorGoldMedal(x,y))", "all x y.((UnitedStates(x) & China(y)) -> WonLittlerGoldMedals(x,y))", "all x y.((UnitedStates(x) & China(y)) -> WinsLessGoldMedals(x,y))", "all x y.((UnitedStates(x) & China(y)) -> WonFewerGoldMedals(x,y))", "all x y.((UnitedStates(x) & China(y)) -> WinsMinorGoldMedal(x,y))", "all x y.((UnitedStates(x) & China(y)) -> WonKinderGoldMedals(x,y))", "all x y.((UnitedStates(x) & China(y)) -> WonLessGoldMedal(x,y))", "all x y.((UnitedStates(x) & China(y)) -> WonLittleGoldMedal(x,y))", "all x y z.((UnitedStates(x) & China(y) & GoldMedal(z)) -> WonLittler(x,z))", "all x y z.((UnitedStates(x) & China(y) & GoldMedal(z)) -> WonMinors(x,z))"]}
{"id": "folio_train_518", "nl": "Russia won fewer gold medals than China.", "fol": "HasFewerGoldMedalsThan(Russia,China)", "prediction": ["all x y.((Russland(x) & China(y)) -> WonMinorGoldMedal(x,y))", "all x y.((Russia(x) & China(y)) -> WonMinorGoldMedal(x,y))", "all x y.((Russland(x) & China(y)) -> WonMinorGoldMedals(x,y))", "all x y.((Russland(x) & China(y)) -> WonNinetyGoldMedal(x,y))", "all x y.((Russland(x) & China(y)) -> WonLittlerGoldMedal(x,y))", "all x y.((Russland(x) & China(y)) -> WinsMinorGoldMedal(x,y))", "all x y.((Russland(x) & China(y)) -> WonNinetyGoldMedals(x,y))", "all x y.((Russia(x) & China(y)) -> WonMinorGoldMedals(x,y))", "all x y.((Russia(x) & China(y)) -> WonNinetyGoldMedal(x,y))", "all x y.((Russia(x) & China(y)) -> WonLittlerGoldMedal(x,y))", "all x y.((Russia(x) & China(y)) -> WinsMinorGoldMedal(x,y))", "all x y.((Russia(x) & China(y)) -> WonNinetyGoldMedals(x,y))", "all x y.((Russland(x) & China(y)) -> WonLittlerGoldMedals(x,y))", "all x y.((Russia(x) & China(y)) -> WonLessGoldMedals(x,y))", "all x y.((Russland(x) & China(y)) -> WonKinderGoldMedals(x,y))", "all x y z.((Russland(x) & China(y) & GoldMedal(z)) -> WinsLittler(x,z))"]}
{"id": "folio_train_519", "nl": "Xiufeng, Xiangshan, Diecai, Qixing are districts in the city of Guilin.", "fol": "(IsDistrictIn(Xiufeng,Guilin) & IsDistrictIn(Xiangshan,Guilin) & IsDistrictIn(Diecai,Guilin) & IsDistrictIn(Qixing,Guilin) & IsCity(Guilin))", "prediction": ["all x.((District(x) & Guilin(x)) -> (Xiufeng(x) | Xiangshan(x) | Diecai(x) | Qixing(x)))", "all x.((District(x) & City(x) & Guilin(x)) -> (Xiufeng(x) | Xiangshan(x) | Diecai(x) | Qixing(x)))", "all x y.((District(x) & City(y)) -> (Xiufeng(x) | Xiangshan(x) | Diecai(x) | Qixing(x)))", "all x.((District(x) & GuilinCity(x)) -> (Xiufeng(x) | Xiangshan(x) | Diecai(x) | Qixing(x)))", "all x.((District(x) & Guilin(x)) -> (Xiufeng(x) & Xiangshan(x) & Diecai(x) & Qixing(x)))", "all x.(District(x) -> (Xiufeng(x) | Xiangshan(x) | Diecai(x) | Qixing(x)))", "all x y.((District(x) & City(y) & Guilin(y)) -> (Xiufeng(x) | Xiangshan(x) | Diecai(x) | Qixing(x)))", "all x y.((District(x) & Guilin(y)) -> (Xiufeng(x) | Xiangshan(x) | Diecai(x) | Qixing(x)))", "all x.((District(x) & Guilin(x)) -> (Xiufeng(x) | Xiangshan(x) | Diecai(x) | Qixing(x)))", "all x.((District(x) & City(x)) -> (Xiufeng(x) | Xiangshan(x) | Diecai(x) | Qixing(x)))", "all x y z.((District(x) & Guilin(y) & Guilin(z)) -> (Xiufeng(x) | Xiangshan(x) | Diecai(x) | Qixing(x)))", "all x y.((District(x) & City(y) & Guilin(x)) -> (Xiufeng(x) | Xiangshan(x) | Diecai(x) | Qixing(x)))", "all x y z.((District(x) & City(y) & Guilin(z)) -> (Xiufeng(x) | Xiangshan(x) | Diecai(x) | Qixing(x)))", "all x y.((District(x) & City(y) & Guilin(z)) -> (Xiufeng(x) | Xiangshan(x) | Diecai(x) | Qixing(x)))", "all x y z.((District(x) & Guilin(y) & (Xiufeng(z) | Xiangshan(z) | Diecai(z) | Qixing(z))) -> District(x,y,z))", "all x y z.((District(x) & Guilin(y) & (Xiufeng(z) | Xiangshan(z) | Diecai(z) | Qixing(z))) -> District(x,y))"]}
{"id": "folio_train_520", "nl": "Yangshuo is not a district in Guilin. ", "fol": "-IsDistrictIn(Yangshuo,Guilin)", "prediction": ["Yangshuo is not a district in Guilin.", "Yangshuo is not a DistrictInGuilin(y)", "Yangshuo is not a DistrictInGuilin.", "all x.(Yangshuo(x) -> -GuilinDistrict(x))", "all x.(Yangshuo(x) -> -GuilinDestination(x))", "all x.(Yangshuo(x) -> -DistrictInGuilin(x))", "all x.(Yangshuo(x) -> -DestinationInGuilin(x))", "all x.(Yangshuo(x) -> -DisturbantInGuilin(x))", "(-DistrictInGuilin(Yangshuo) & DistrictInGuilin(Yangshuo))", "Yangshuo is not a DistrictInGuilin(Yangshuo)", "all x.(Yangshuo(x) -> -GuilinDisturbant(x))", "(-DistrictInGuilin(Yangshuo))", "all x.(Yangshuo(x) -> -GilinDistrict(x))", "(-GuilinDistrict(Yangshuo))", "all x.(Yangshuo(x) -> -Guilin(x))", "-(District(Yangshuo) & DistrictInGuilin(Yangshuo))"]}
{"id": "folio_train_521", "nl": "Xiangshan and Diecai are districts in the same city.", "fol": "exists c.(IsCity(c) & IsDistrictIn(Xiangshan,c) & IsDistrictIn(Diecai,c))", "prediction": ["all x y.((District(x) & City(y)) -> (Xiangshan(x) | Diecai(x)))", "all x.((District(x) & City(x)) -> (Xiangshan(x) | Diecai(x)))", "all x y.((District(x) & City(y)) -> (Xiangshan(x) & Diecai(x)))", "all x y.((District(x) & City(y) & LocatedIn(x,y)) -> (Xiangshan(x) | Diecai(x)))", "all x.((District(x) & Xiangshan(x) & District(x) & Diecai(x)) -> DistrictInSameCity(x))", "all x.((District(x) & Xiangshan(x) & District(x) & Diecai(x)) -> InSameCity(x))", "all x y.((District(x) & City(y) & LocatedIn(x,y)) -> (Xiangshan(x) & Diecai(x)))", "all x.((District(x) & City(x)) -> (Xiangshan(x) & Diecai(x)))", "all x y.((District(x) & City(y) & Xiangshan(x) & City(y)) -> District(x,y))", "all x.((District(x) & Xiangshan(x) & District(x,Diecai)) -> InSameCity(x))", "(District(Xiangshan) & District(Diecai))", "all x.((District(x) & City(x) & Xiangshan(x) & City(x)) -> Diecai(x))", "all x y.((District(x) & City(y) & Xiangshan(x) & City(y)) -> Diecai(x))", "all x.((District(x) & Xiangshan(x) & District(x)) -> InSameCity(x))", "all x.(District(x) -> (Xiangshan(x) | Diecai(x)))", "all x.((District(x) & Xiangshan(x) & District(x)) -> Diecai(x))"]}
{"id": "folio_train_522", "nl": "Xiufeng is in Guilin.", "fol": "IsDistrictIn(Xiufeng,Guilin)", "prediction": ["Xiufeng is in Guilin.", "all x.(Xiufeng(x) -> InGuilin(x))", "All x.(Xiufeng(x) -> InGuilin(x))", "all x.(Xiufeng(x) -> Guilin(x))", "(InGuilin(x) & Xiufeng(x))", "(InGuilin(Xiufeng) -> InGuilin(X))", "(InGuilin(Xiufeng) -> InGuilin(x))", "Xiufeng(x) -> InGuilin(x))", "All x.(Xiufeng(x) -> Guilin(x))", "Xiufeng(x) & InGuilin(x))", "(InGuilin(Xiufeng) & InGuilin(X))", "(InGuilin(x) & XiufengInGuilin(x))", "(InGuilin(Xiufeng) & InGuilin(x))", "all x.(Xiufeng(x) -> InGuilin(x))", "all x.(Xiufeng(x) -> IsInGuilin(x))", "(InGuilin(Xiufeng) & InGuilin(Xiufeng))"]}
{"id": "folio_train_523", "nl": "Kowloon District is in Hong Kong.", "fol": "IsDistrictIn(Kowloon,Hong_kong)", "prediction": ["all x.(KowloonDistrict(x) -> HongKong(x))", "All x.(KowloonDistrict(x) -> HongKong(x))", "all x.(KowloonDistrict(x) -> InHongKong(x))", "all x.(CowloonDistrict(x) -> HongKong(x))", "All x.(KowloonDistrict(x) -> InHongKong(x))", "all x.(KowloonDistrikt(x) -> HongKong(x))", "all x.(KowloonDisturbance(x) -> HongKong(x))", "Kowloon District is in Hong Kong.", "all x.(KowloonDestination(x) -> HongKong(x))", "KowloonDistrict(x) -> HongKong(x))", "all x.(CowloonDistrict(x) -> InHongKong(x))", "all x.(KowloonDisturbance(x) -> InHongKong(x))", "all x.(KowloonDistrict(x) -> Hong Kong(x))", "KowloonDistrict(x) & HongKong(x))", "all x.(KowloonDistrict(x) -> Hongkong(x))", "Kowloon District (HongKong)"]}
{"id": "folio_train_524", "nl": "All people who grow their own fresh vegetables in their home garden also have ample space.", "fol": "all x.(GrowsOwnVegetables(x) -> HasAmpleSpace(x))", "prediction": ["all x.((Person(x) & GrowsOwnFreshVegetablesInHomeGarden(x)) -> AmpleSpace(x))", "all x.((Person(x) & GrowsFreshVegetablesInHomeGarden(x)) -> AmpleSpace(x))", "all x.((Person(x) & GrowsOwnFreshVegetables(x) & HomeGarden(x)) -> AmpleSpace(x))", "all x.((Person(x) & GrowsOwnFreshVegetables(x) & InHomeGarden(x)) -> AmpleSpace(x))", "all x.((Person(x) & GrowsFreshVegetables(x) & HomeGarden(x)) -> AmpleSpace(x))", "all x.((Person(x) & GrowsFreshVegetables(x) & InHomeGarden(x)) -> AmpleSpace(x))", "all x.((People(x) & GrowsOwnFreshVegetablesInHomeGarden(x)) -> AmpleSpace(x))", "all x.((Person(x) & GrowsOwnFreshVegetablesInHomeGarden(x)) -> PlentyOfSpace(x))", "all x.((Person(x) & GrowsOwnFreshVegetablesInHomeGarden(x)) -> HasAmpleSpace(x))", "all x.(GrowsOwnFreshVegetablesInHomeGarden(x) -> AmpleSpace(x))", "all x y.((Person(x) & GrowsOwnFreshVegetables(x) & HomeGarden(y)) -> AmpleSpace(x))", "all x.((Person(x) & GrowsOwnFreshVegetables(x)) -> AmpleSpace(x))", "all x.((Person(x) & GrowsOwnFreshVegetablesInHomeGarden(x)) -> PlentySpace(x))", "all x y.((Person(x) & GrowsOwnFreshVegetablesInHomeGarden(x,y)) -> AmpleSpace(x))", "all x.((Person(x) & GrowsEachFreshVegetablesInHomeGarden(x)) -> AmpleSpace(x))", "all x.((Person(x) & GrowsOwnFreshVegetablesInHomeGarden(x)) -> AccommodateSpace(x))"]}
{"id": "folio_train_525", "nl": "If people are young working professionals who live in large cities, then they do not have ample space.", "fol": "all x.(YoungWorkingProfessional(x) -> -HasAmpleSpace(x))", "prediction": ["all x.((YoungWorkingProfessional(x) & LivesInLargeCities(x)) -> -AmpleSpace(x))", "all x.((People(x) & YoungWorkingProfessional(x) & LivesInLargeCities(x)) -> -AmpleSpace(x))", "all x.((WorkingProfessional(x) & Young(x) & LivesInLargeCities(x)) -> -AmpleSpace(x))", "all x.((YoungWorkingProfessional(x) & LivesInLargeCity(x)) -> -AmpleSpace(x))", "all x.((YoungWorkingProfessional(x) & LargeCity(x)) -> -AmpleSpace(x))", "all x.((YearWorkingProfessional(x) & LivesInLargeCities(x)) -> -AmpleSpace(x))", "all x.((Person(x) & YoungWorkingProfessional(x) & LivesInLargeCities(x)) -> -AmpleSpace(x))", "all x y.((YoungWorkingProfessional(x) & LargeCity(y) & LivesIn(x,y)) -> -AmpleSpace(x))", "all x.((YoungWorkingProfessionals(x) & LivesInLargeCities(x)) -> -AmpleSpace(x))", "all x.((YoungWorkingProfessional(x) & LivesInLargeCities(x)) -> NoAmpleSpace(x))", "all x.((JoyWorkingProfessional(x) & LivesInLargeCities(x)) -> -AmpleSpace(x))", "all x.((JungleWorkingProfessional(x) & LivesInLargeCities(x)) -> -AmpleSpace(x))", "all x.(YoungWorkingProfessional(x) & LivesInLargeCities(x)) -> -AmpleSpace(x))", "all x.(((YoungWorkingProfessional(x) & LivesInLargeCities(x)) -> -AmpleSpace(x))", "all x.((YoungWorkingProfessionist(x) & LivesInLargeCities(x)) -> -AmpleSpace(x))", "all x.((YoungWorkingProfessional(x) & LiveInLargeCities(x)) -> -AmpleSpace(x))"]}
{"id": "folio_train_526", "nl": "If people order takeout from delivery services often, then they grow their own fresh vegetables in their home garden.", "fol": "all x.(OrdersTakeoutOften(x) -> GrowsOwnVegetables(x))", "prediction": ["all x.((Person(x) & OrdersTakeoutFromDeliveryServices(x) & Often(x)) -> GrowsFreshVegetablesInHomeGarden(x))", "all x.((Person(x) & OrdersTakeoutFromDeliveryServices(x) & Often(x)) -> GrowsOwnFreshVegetablesInHomeGarden(x))", "all x.((Person(x) & OrdersTakeoutFromDeliveryServices(x)) -> GrowsFreshVegetablesInHomeGarden(x))", "all x.((Person(x) & OrdersTakeoutFromDeliveryServices(x)) -> GrowsOwnFreshVegetablesInHomeGarden(x))", "all x.((Person(x) & OrdersTakeoutFromDeliveryServicesOfFrequently(x)) -> GrowsFreshVegetablesInHomeGarden(x))", "all x.((Person(x) & OrdersTakeoutFromDeliveryServicesOfFrequently(x)) -> GrowsOwnFreshVegetablesInHomeGarden(x))", "all x.((Person(x) & OrdersTakeoutFromDeliveryServicesOften(x)) -> GrowsOwnFreshVegetablesInHomeGarden(x))", "all x.((Person(x) & OrdersTakeoutFromDeliveryServicesOften(x)) -> GrowsFreshVegetablesInHomeGarden(x))", "all x y.((Person(x) & OrdersTakeout(x,y) & DeliveryService(y)) -> GrowsFreshVegetablesInHomeGarden(x))", "all x y.((Person(x) & OrdersTakeout(x,y) & DeliveryServices(y)) -> GrowsFreshVegetablesInHomeGarden(x))", "all x.((Person(x) & OrdersTakeoutFromDeliveryServicesOften(x)) -> GrowsFreshVegetablesInHomeGarden(x))", "all x y.((Person(x) & OrdersTakeout(x,y) & DeliveryService(y)) -> GrowsFreshVegetablesInHomeGarden(x,y))", "all x y.((Person(x) & OrdersTakeoutFromDeliveryServices(x) & Often(x)) -> GrowsFreshVegetablesInHomeGarden(y))", "all x y.((Person(x) & OrdersTakeout(x,y) & DeliveryServices(y)) -> GrowsFreshVegetablesInHomeGarden(x,y))", "all x y.((Person(x) & OrdersTakeoutFromDeliveryServices(x) & Often(x)) -> GrowsFreshVegetablesInHomeGarden(x))", "all x y.((Person(x) & OrdersTakeout(x,y) & DeliveryServices(y)) -> GrowsOwnFreshVegetablesInHomeGarden(x))"]}
{"id": "folio_train_527", "nl": "If people enjoy going out often to restaurants with friends, then they order takeout from delivery services often.", "fol": "all x.(EnjoysGoingOutToRestaurants(x) -> OrdersTakeoutOften(x))", "prediction": ["all x.((People(x) & EnjoysGoingOutWithFriends(x)) -> OrdersTakeoutFromDeliveryServices(x))", "all x.((People(x) & EnjoysGoingOutOfOftenToRestaurantsWithFriends(x)) -> OrdersTakeoutFromDeliveryServicesOfOften(x))", "all x.((People(x) & EnjoysGoingOutOfOften(x) & HasFriends(x)) -> OrdersTakeoutFromDeliveryServicesOfOften(x))", "all x.((People(x) & EnjoysGoingOutWithFriends(x)) -> OrdersTakeoutFromDeliveryServicesOften(x))", "all x.((People(x) & EnjoysGoingOutOfOftenToRestaurantsWithFriends(x)) -> OrdersTakeoutFromDeliveryServicesOfFrequently(x))", "all x.((Person(x) & EnjoysGoingOutWithFriends(x)) -> OrdersTakeoutFromDeliveryServices(x))", "all x.((People(x) & EnjoysGoingOutOfOftenToRestaurants(x) & HasFriends(x)) -> OrdersTakeoutFromDeliveryServicesOfOften(x))", "all x.((Person(x) & EnjoysGoingOutOfOften(x) & HasFriends(x)) -> OrdersTakeoutFromDeliveryServicesOfOften(x))", "all x.((Person(x) & EnjoysGoingOutOfOftenToRestaurantsWithFriends(x)) -> OrdersTakeoutFromDeliveryServicesOfOften(x))", "all x.((People(x) & EnjoysGoingOutOfOften(x) & HasFriends(x)) -> OrdersTakeoutFromDeliveryServicesOfFrequently(x))", "all x.((Person(x) & EnjoysGoingOutOfOftenToRestaurantsWithFriends(x)) -> OrdersTakeoutFromDeliveryServicesOfFrequently(x))", "all x.((Person(x) & EnjoysGoingOutWithFriends(x)) -> OrdersTakeoutFromDeliveryServicesOften(x))", "all x.((Person(x) & EnjoysGoingOutOfOftenToRestaurants(x) & HasFriends(x)) -> OrdersTakeoutFromDeliveryServicesOfOften(x))", "all x.((Person(x) & EnjoysGoingOutOfOften(x) & HasFriends(x)) -> OrdersTakeoutFromDeliveryServicesOfFrequently(x))", "all x.((People(x) & EnjoysGoingOutOfOftenToRestaurants(x) & HasFriends(x)) -> OrdersTakeoutFromDeliveryServicesOfFrequently(x))", "all x.((People(x) & EnjoysGoingOutWithFriends(x)) -> OrdersTakeoutFromDeliveryServicesOften(x))"]}
{"id": "folio_train_528", "nl": "If people regularly tout the benefits of homegrown and homecooked meals over fast food, then they enjoy going out often to restaurants with friends. ", "fol": "all x.(ToutsHomegrownBenefits(x) -> EnjoysGoingOutToRestaurants(x))", "prediction": ["all x y.((Person(x) & HomegrownMeals(x) & HomecookedMeals(x) & FastFood(y)) -> EnjoysGoingOutToRestaurantsWithFriends(x))", "all x y.((Person(x) & HomegrownMeals(x) & HomecookedMeals(x) & FastFood(y)) -> EnjoysGoingOut(x,y))", "all x y.((Person(x) & HomegrownMeals(x) & HomecookedMeals(x) & FastFood(y)) -> EnjoysGoingOutWithFriends(x,y))", "all x y.((Person(x) & HomegrownMeals(x) & HomecookedMeals(x) & FastFood(y)) -> EnjoysGoingOutToRestaurants(x,y))", "all x y.((Person(x) & HomegrownMeals(x) & HomecookedMeals(x) & FastFood(y)) -> EnjoysGoingOutToRestaurantsWithFriends(x,y))", "all x y.((Person(x) & HomegrownMeals(x) & HomecookedMeals(x) & FastFood(y)) -> EnjoysGoingOutWithFriends(x))", "all x y.((Person(x) & HomegrownMeals(x) & HomecookedMeals(x) & FastFood(y) & RegularlyPlaudsBenefits(x,y)) -> EnjoysGoingOutToRestaurantsWithFriends(x))", "all x y.((Person(x) & HomegrownMeals(x) & HomeCookedMeals(x) & FastFood(y)) -> EnjoysGoingOutToRestaurantsWithFriends(x))", "all x y.((Person(x) & HomegrownMeals(x) & HomeCookedMeals(x) & FastFood(y)) -> EnjoysGoingOutToRestaurants(x,y))", "all x y.((Person(x) & HomegrownMeals(x) & HomeCookedMeals(x) & FastFood(y)) -> EnjoysGoingOutWithFriends(x,y))", "all x y.((Person(x) & HomegrownMeals(x) & HomecookedMeals(x) & FastFood(y) & RegularlyPlaudsBenefits(x,y)) -> EnjoysGoingOutWithFriends(x))", "all x y.((Person(x) & HomegrownMeals(x) & HomeCookedMeals(x) & FastFood(y)) -> EnjoysGoingOut(x,y))", "all x y.((Person(x) & HomegrownMeals(x) & HomeCookedMeals(x) & FastFood(y)) -> EnjoysGoingOutToRestaurantsWithFriends(x,y))", "all x y.((Person(x) & HomegrownMeals(x) & HomeCookedMeals(x) & FastFood(y)) -> EnjoysGoingOutWithFriends(x))", "all x y.((People(x) & HomegrownMeals(x) & HomecookedMeals(x) & FastFood(y)) -> EnjoysGoingOutToRestaurantsWithFriends(x))", "all x y.((Person(x) & HomegrownMeals(x) & HomecookedMeals(x) & FastFood(y) & Prefers(x,y)) -> EnjoysGoingOutToRestaurantsWithFriends(x))"]}
{"id": "folio_train_529", "nl": "Michael grows his own fresh vegetables in his home garden or regularly touts the benefits of homegrown and homecooked meals over fast food.", "fol": "(GrowsOwnVegetables(Michael) | ToutsHomegrownBenefits(Michael))", "prediction": ["all x y.((Michael(x) & FreshVegetables(y)) -> (GrowsInHomeGarden(x,y) | PledgesBenefits(x,y)))", "all x y.((Michael(x) & FreshVegetables(y)) -> (GrowsInHomeGarden(x,y) | PledgesBenefitsOfHomegrownAndHomecookedMeals(x,y)))", "all x y z.((Michael(x) & FreshVegetables(y) & HomeGarden(z)) -> (GrowsInHomeGarden(x,y) | PledgesBenefitsOfHomegrownAndHomecookedMeals(x,z)))", "all x y.((Michael(x) & FreshVegetables(y)) -> (GrowsInHomeGarden(x,y) | PledgesBenefitsOverFastFood(x,y)))", "all x y.((Michael(x) & FreshVegetables(y)) -> (GrowsInHomeGarden(x,y) | PledgesBenefitsOfHomegrownAndHomecookedMeals(x)))", "all x y z.((Michael(x) & FreshVegetables(y) & HomeGarden(z)) -> (GrowsInHomeGarden(x,y) | PledgesBenefits(x,z))))", "all x y z.((Michael(x) & FreshVegetables(y) & HomeGarden(z)) -> (GrowsInHomeGarden(x,y) | PledgesBenefitsOfHomegrownAndHomeCookedMeals(x,z)))", "all x y z.((Michael(x) & FreshVegetables(y) & HomeGarden(z)) -> (GrowsIn(x,y,z) | PledgesBenefits(x,y,z)))", "all x y z.((Michael(x) & FreshVegetables(y) & HomeGarden(z)) -> (GrowsIn(x,y) | PledgesBenefits(x,z) & HomegrownAndHomecookedMeals(x)))", "all x y z.((Michael(x) & FreshVegetables(y) & HomeGarden(z)) -> (GrowsIn(x,y) | PledgesBenefits(x,z))))", "all x y z.((Michael(x) & FreshVegetables(y) & HomeGarden(z)) -> (GrowsInHomeGarden(x,y) | PledgesBenefits(x,z)))", "all x y z.((Michael(x) & FreshVegetables(y) & HomeGarden(z)) -> (GrowsIn(x,y) | PledgesBenefits(x,z) & HomegrownMeals(x) & HomeCookedMeals(x)))", "all x y.((Michael(x) & FreshVegetables(y)) -> (GrowsInHomeGarden(x,y) | PledgesBenefitsOfHomegrownAndHomeCookedMeals(x,y)))", "all x y z.((Michael(x) & FreshVegetables(y) & HomeGarden(z)) -> (GrowsInHomeGarden(x,y) | PledgesBenefits(x,z) & HomegrownAndHomecookedMeals(x)))", "all x y.((Michael(x) & HomeGarden(y)) -> (GrowsFreshVegetablesInHomeGarden(x,y) | PledgesHomegrownAndHomecookedMeals(x,y)))", "all x y z.((Michael(x) & FreshVegetables(y) & HomeGarden(z)) -> (GrowsInHomeGarden(x,y) | PledgesBenefitsOverFastFood(x,z))))"]}
{"id": "folio_train_530", "nl": "Michael enjoys going out often to restaurants with friends.", "fol": "EnjoysGoingOutToRestaurants(Michael)", "prediction": ["all x y.((Michael(x) & Restaurant(y)) -> EnjoysGoingOut(x,y))", "all x y.((Michael(x) & Restaurant(y)) -> EnjoysGoingOutWith(x,y))", "all x y z.((Michael(x) & Restaurant(y) & Friends(z)) -> EnjoysGoingOut(x,y,z))", "all x y.((Michael(x) & Restaurant(y)) -> EnjoysGoingOutWithFriends(x,y))", "all x.((Michael(x) & GoesOutWithFriends(x)) -> Enjoys(x))", "all x.((Michael(x) & Restaurant(y)) -> EnjoysGoingOut(x,y))", "all x y.((Michael(x) & Restaurant(y)) -> Enjoys(x,y))", "all x y z.((Michael(x) & Restaurant(y) & Restaurant(z)) -> EnjoysGoingOut(x,y,z))", "all x y z.((Michael(x) & Restaurant(y) & Friends(z)) -> EnjoysGoingOutWith(x,y,z))", "all x y z.((Michael(x) & Restaurant(y) & Restaurant(z)) -> EnjoysGoingOutWith(x,y,z))", "all x.(Michael(x) -> EnjoysGoingOutWithFriends(x))", "all x.((Michael(x) & Restaurant(y)) -> EnjoysGoingOutWithFriends(x,y))", "all x.((Michael(x) & GoesOutToRestaurants(x)) -> Enjoys(x))", "all x y z.((Michael(x) & Restaurant(y) & Friends(z)) -> EnjoysGoingOut(x,y))", "all x.(Michael(x) -> EnjoysGoingOutToRestaurantsWithFriends(x))", "all x y z.((Michael(x) & Restaurant(y) & Friends(z)) -> EnjoysGoingOutTo(x,y,z))"]}
{"id": "folio_train_531", "nl": "Michael is a young working professional who lives in large cities.", "fol": "(YoungWorkingProfessional(Michael) & Young(Michael) & LargeCity(Michael))", "prediction": ["all x.((Jimmy(x) & WorkingProfessional(x) & LivesInLargeCities(x)) -> Young(x))", "all x.(Michael(x) -> (YoungWorkingProfessional(x) & LivesInLargeCities(x)))", "(YoungWorkingProfessional(Michael) & LivesInLargeCities(Michael))", "(WorkingProfessional(Michael) & Young(Michael) & LivesInLargeCities(Michael))", "(WorkingProfessional(Michael) & LivesInLargeCities(Michael))", "all x.(Michael(x) -> (WorkingProfessional(x) & LivesInLargeCities(x)))", "all x.((YoungWorkingProfessional(x) & LivesInLargeCities(x)) -> Michael(x))", "Michael is a young workingProfessional(Michael) & LivesInLargeCities(Michael)", "all x.((Jimmy(x) & WorkingProfessional(x)) -> LivesInLargeCities(x))", "all x.((Jim(x) & WorkingProfessional(x) & LivesInLargeCities(x)) -> Young(x))", "all x.((Jimmy(x) & YoungWorkingProfessional(x) & LivesInLargeCities(x)) -> LivesIn(x,y))", "all x.((Michael(x) & YoungWorkingProfessional(x) & LivesInLargeCities(x)) -> YoungWorkingProfessional(x))", "all x.((WorkingProfessional(x) & Young(x) & LivesInLargeCities(x)) -> Michael(x))", "all x.((JuniorWorkingProfessional(x) & LivesInLargeCities(x)) -> Michael(x))", "all x.((Jim(x) & WorkingProfessional(x) & LivesInLargeCities(x)) -> Michael(x))", "all x.((Michael(x) & YoungWorkingProfessional(x) & LivesInLargeCities(x)) -> Young(x))"]}
{"id": "folio_train_532", "nl": "Michael grows his own fresh vegetables in their home garden or is a young working professional who lives in large cities.", "fol": "(GrowsOwnVegetables(Michael) | (YoungWorkingProfessional(Michael) & LargeCity(Michael)))", "prediction": ["all x.((Michael(x) & (GrowsOwnFreshVegetablesInHomeGarden(x) | YoungWorkingProfessional(x) & LivesInLargeCities(x))) -> GrowsOwnFreshVegetablesInHomeGarden(x))", "all x.((Michael(x) & (GrowsFreshVegetablesInHomeGarden(x) | YoungWorkingProfessional(x) & LivesInLargeCities(x))) -> GrowsFreshVegetablesInHomeGarden(x))", "all x.((Michael(x) & (GrowsOwnFreshVegetablesInHomeGarden(x) | YoungWorkingProfessional(x) & LivesInLargeCities(x))) -> GrowsOwnFreshVegetables(x))", "all x.((Michael(x) & (GrowsInHomeGarden(x) | YoungWorkingProfessional(x) & LivesInLargeCities(x))) -> FreshVegetables(x))", "all x.((Michael(x) & (GrowsOwnFreshVegetables(x) | YoungWorkingProfessional(x) & LivesInLargeCities(x))) -> GrowsInHomeGarden(x))", "all x.((Michael(x) & (GrowsFreshVegetablesInHomeGarden(x) | YoungWorkingProfessional(x) & LivesInLargeCities(x))) -> GrowsInHomeGarden(x))", "all x.((Michael(x) & (GrowsFreshVegetablesInHomeGarden(x) | YoungWorkingProfessional(x) & LivesInLargeCities(x))) -> GrowsIn(x,y))", "all x.((Michael(x) & (GrowsFreshVegetables(x) | YoungWorkingProfessional(x) & LivesInLargeCities(x))) -> GrowsInHomeGarden(x))", "all x.((Michael(x) & (GrowsOwnFreshVegetablesInHomeGarden(x) | YoungWorkingProfessional(x) & LivesInLargeCities(x))) -> FreshVegetables(x))", "all x.((Michael(x) & GrowsOwnFreshVegetablesInHomeGarden(x)) | (YoungWorkingProfessional(x) & LivesInLargeCities(x))))", "all x.((Michael(x) & GrowsOwnFreshVegetables(x)) | (YoungWorkingProfessional(x) & LivesInLargeCities(x))))", "all x.((Michael(x) & (GrowsFreshVegetablesInHomeGarden(x) | YoungWorkingProfessional(x) & LivesInLargeCities(x))) -> GrowsFreshVegetables(x))", "all x.((Michael(x) & (GrowsOwnFreshVegetablesInHomeGarden(x) | YoungWorkingProfessional(x) & LivesInLargeCities(x))) -> GrowsInHomeGarden(x))", "all x.((Michael(x) & (GrowsFreshVegetablesInHomeGarden(x) | YoungWorkingProfessional(x) & LivesInLargeCities(x))) -> GrowsIn(x))", "all x.((Michael(x) & (GrowsOwnFreshVegetables(x) | LivesInLargeCities(x))) -> YoungWorkingProfessional(x))", "all x.((Michael(x) & GrowsOwnFreshVegetablesInHomeGarden(x)) | YoungWorkingProfessional(x) & LivesInLargeCities(x)))"]}
{"id": "folio_train_533", "nl": "All devices belonging to the company are connected to Google Home. ", "fol": "all x.(BelongsToCompany(x) -> ConnectedToGoogleHome(x))", "prediction": ["all x.((Device(x) & Company(x)) -> ConnectedToGoogleHome(x))", "all x.((Device(x) & BelongsToCompany(x)) -> ConnectedToGoogleHome(x))", "all x y.((Device(x) & Company(y)) -> ConnectedToGoogleHome(x,y))", "all x y.((Device(x) & Company(y) & ConnectedToGoogleHome(x,y)) -> ConnectedToGoogleHome(x,y))", "all x.((Device(x) & GoogleHome(x)) -> ConnectedTo(x,y))", "all x.(Device(x) -> ConnectedToGoogleHome(x))", "all x.((Device(x) & Company(x)) -> ConnectedToGoogleHome(x))", "all x y.((Device(x) & GoogleHome(y)) -> ConnectedTo(x,y))", "all x.((Device(x) & BelongingToCompany(x)) -> ConnectedToGoogleHome(x))", "all x.((Device(x) & AppliesToCompany(x)) -> ConnectedToGoogleHome(x))", "all x y.((Device(x) & Company(y) & ConnectedToGoogleHome(x,y)) -> ConnectedToGoogleHome(x))", "all x y.((Device(x) & Company(y) & ConnectedToGoogleHome(x)) -> ConnectedToGoogleHome(x,y))", "all x.((Device(x) & Company(x) & ConnectedToGoogleHome(x)) -> ConnectedToGoogleHome(x))", "all x.((Device(x) & GoogleHome(x)) -> ConnectedTo(x,GoogleHome))", "all x.((Device(x) & Companies(x)) -> ConnectedToGoogleHome(x))", "all x y.((Device(x) & Company(y)) -> ConnectedToGoogleHome(x))"]}
{"id": "folio_train_534", "nl": "All devices belonging to employees are connected to the company's wifi. ", "fol": "all x.(BelongsToEmployee(x) -> ConnectedToWifi(x))", "prediction": ["all x y.((Device(x) & Employee(y)) -> ConnectedToWiFi(x,y))", "all x y.((Device(x) & Employee(y)) -> ConnectedToWifi(x,y))", "all x.((Device(x) & Employee(x)) -> ConnectedToWiFi(x))", "all x.((Device(x) & Employee(x)) -> ConnectedToWifi(x))", "all x y.((Device(x) & Employee(y) & ConnectedToWiFi(x,y)) -> ConnectedToWiFi(x,y))", "all x y z.((Device(x) & Employee(y) & Company(z)) -> ConnectedToWifi(x,y,z))", "all x.((Device(x) & Employee(x)) -> ConnectedToWifi(x,Company))", "all x y.((Device(x) & Employee(y) & ConnectedToWifi(x,y)) -> ConnectedToWifi(x,y))", "all x.(EmployeeDevice(x) -> ConnectedToWiFi(x))", "all x.(EmployeeDevice(x) -> ConnectedToWifi(x))", "all x y.((Device(x) & Employee(y) & ConnectedToWifi(x,y)) -> ConnectedTo(x,y))", "all x y z.((Device(x) & Employee(y) & Company(z)) -> ConnectedToWiFi(x,y,z))", "all x.((Device(x) & Employee(x)) -> ConnectedToWiFi(x,Company))", "all x.((Device(x) & Employee(x)) -> ConnectedToWiFi(x,y))", "all x y.((Device(x) & Employee(y)) -> ConnectedToWireless(x,y))", "all x y.((Device(x) & Employee(y)) -> ConnectedTo(x,y))"]}
{"id": "folio_train_535", "nl": "All devices connected to Google Home are controlled by the managers. ", "fol": "all x.(ConnectedToGoogleHome(x) -> ControlledByManagers(x))", "prediction": ["all x.((Device(x) & ConnectedToGoogleHome(x)) -> ControlledByManager(x))", "all x.((Device(x) & ConnectedToGoogleHome(x)) -> ControlledByManagers(x))", "all x.((Device(x) & ConnectedToGoogleHome(x)) -> ManagedByManager(x))", "all x.((Device(x) & ConnectedToGoogleHome(x)) -> ManagedByManagers(x))", "all x y z.((Device(x) & GoogleHome(y) & Manager(z)) -> ControlledBy(x,y,z))", "all x y.((Device(x) & GoogleHome(y)) -> ControlledByManager(x,y))", "all x.((Device(x) & ConnectedToGoogleHome(x)) -> ControledByManagers(x))", "all x y.((Device(x) & GoogleHome(y)) -> ControlledByManagers(x,y))", "all x y.((Device(x) & GoogleHome(y)) -> ManagedByManager(x,y))", "all x.((Device(x) & ConnectedToGoogleHome(x)) -> ControledByManager(x))", "all x y.((Device(x) & GoogleHome(y) & ConnectedTo(x,y)) -> ControlledByManager(x,y))", "all x y.((Device(x) & GoogleHome(y)) -> ManagedByManagers(x,y))", "all x y.((Device(x) & GoogleHome(y)) -> ControledByManager(x,y))", "all x y.((Device(x) & GoogleHome(y) & ConnectedTo(x,y)) -> ControlledByManager(x))", "all x y.((Device(x) & ConnectedToGoogleHome(x)) -> ControlledByManager(y))", "all x y.((Device(x) & GoogleHome(y) & ConnectedTo(x,y)) -> ControlledByManagers(x))"]}
{"id": "folio_train_536", "nl": "All devices that connect to the company's wifi are easy to operate. ", "fol": "all x.(ConnectedToWifi(x) -> IsEasyToOperate(x))", "prediction": ["all x.((Device(x) & ConnectsToWiFi(x)) -> EasyToOperate(x))", "all x.((Device(x) & ConnectsToWifi(x)) -> EasyToOperate(x))", "all x.((Device(x) & ConnectsToWireless(x)) -> EasyToOperate(x))", "all x.((Device(x) & ConnectsToFirewall(x)) -> EasyToOperate(x))", "all x.((Device(x) & ConnectsToCompanyWifi(x)) -> EasyToOperate(x))", "all x y.((Device(x) & ConnectsToWiFi(x,y)) -> EasyToOperate(x))", "all x.((Device(x) & ConnectsToCompanyWiFi(x)) -> EasyToOperate(x))", "all x y.((Device(x) & ConnectsToWifi(x,y)) -> EasyToOperate(x))", "all x y.((Device(x) & WiFi(y) & ConnectsTo(x,y)) -> EasyToOperate(x))", "all x.((Device(x) & ConnectToWiFi(x)) -> EasyToOperate(x))", "all x.((Device(x) & ConnectToWifi(x)) -> EasyToOperate(x))", "all x y.((Device(x) & Wireless(y) & ConnectsTo(x,y)) -> EasyToOperate(x))", "all x y.((Device(x) & ConnectsToWifi(x,y) & Company(y)) -> EasyToOperate(x))", "all x y.((Device(x) & ConnectsToWiFi(x,y) & Company(y)) -> EasyToOperate(x))", "all x y.((Device(x) & ConnectsToWiFi(x)) -> EasyToOperate(x))", "all x.(ConnectsToWiFi(x) -> EasyToOperate(x))"]}
{"id": "folio_train_537", "nl": "IPod1 belongs to employees. ", "fol": "BelongsToEmployee(IPod1)", "prediction": ["all x.(IPod1(x) -> Employee(x))", "all x y.((Pod(x) & Employee(y)) -> BelongsTo(x,y))", "IPod1 belongsToEmployees(iPod1))", "all x.(IPod1(x) -> BelongsToEmployees(x))", "all x.(IPod(x) -> Employee(x))", "all x.(Pod(x) -> BelongsToEmployees(x))", "IPod1 belongsToEmployees(iPod))", "all x.(Pod1(x) -> Employee(x))", "all x.(Pod(x) -> Employee(x))", "all x.(IPod1(x) -> Employees(x))", "all x.(IPod1(x) -> Employer(x))", "All x.(IPod1(x) -> Employee(x))", "IPod1 belongsToEmployees(iPod2)", "(BelongsToEmployees(iPod1))", "IPod1 belongsToEmployees(IPod1))", "IPod1 belongsToEmployees(iPod2))"]}
{"id": "folio_train_538", "nl": "iPod1 is easy to operate.", "fol": "IsEasyToOperate(IPod1)", "prediction": ["all x.(IPod(x) -> EasyToOperate(x))", "all x.( iPod1(x) -> EasyToOperate(x))", "all x.(Ipod(x) -> EasyToOperate(x))", "all x.(( iPod1(x) & EasyToOperate(x)) -> EasyToOperate(x))", "all x.((iPod(x) & EasyToOperate(x)) -> EasyToOperate(x))", "all x.( iPod(x) -> EasyToOperate(x))", "all x.((IPod(x) & EasyToOperate(x)) -> EasyToOperate(x))", "all x.(( iPod(x) & EasyToOperate(x)) -> EasyToOperate(x))", "all x.(iPod(x) -> EasyToOperate(x))", "All x.( iPod1(x) -> EasyToOperate(x))", "All x.(IPod(x) -> EasyToOperate(x))", "all x.(Ipod1(x) -> EasyToOperate(x))", "(EasyToOperate(iPod1))", "all x.((iPod(x) & EasyToOperate(x)) -> SimpleToOperate(x))", "all x.(( iPod1(x) & EasyToOperate(x)) -> SimpleToOperate(x))", "all x.((IPod(x) & EasyToOperate(x)) -> SimpleToOperate(x))"]}
{"id": "folio_train_539", "nl": "iPod1 is controlled by managers.", "fol": "ControlledByManagers(IPod1)", "prediction": ["all x.(IPod(x) -> ControlledByManagers(x))", "all x.(Ipod(x) -> ControlledByManagers(x))", "all x.(IPod(x) -> ControledByManagers(x))", "all x y.(( iPod1(x) & Manager(y)) -> ControlledBy(x,y))", "all x.( iPod1(x) -> ControlledByManagers(x))", "all x y.(( iPod(x) & Manager(y)) -> ControlledBy(x,y))", "all x.((iPod(x) & Manager(x)) -> ControlledBy(x,iPod1))", "all x.(iPod(x) -> ControlledByManagers(x))", "all x.(IPod(x) -> ManagedByManagers(x))", "all x.((IPod(x) & Manager(x)) -> ControlledBy(x,iPod1))", "all x.(Ipod(x) -> ControledByManagers(x))", "all x.((IPod(x) & Manager(x)) -> ControlledBy(x))", "all x.((iPod(x) & Manager(x)) -> Controls(x,iPod1))", "all x y.(( iPod1(x) & Manager(y)) -> Controls(x,y))", "all x.((iPod(x) & Manager(x)) -> ControlledBy(x,iPod1))", "all x.(IPod(x) -> ControlledByManager(x))"]}
{"id": "folio_train_540", "nl": "iPod1 is connected to Google Home.", "fol": "ConnectedToGoogleHome(IPod1)", "prediction": ["all x.(IPod(x) -> ConnectedToGoogleHome(x))", "all x.(Ipod(x) -> ConnectedToGoogleHome(x))", "all x.(( iPod1(x) & ConnectedToGoogleHome(x)) -> ConnectedToGoogleHome(x))", "all x.( iPod1(x) -> ConnectedToGoogleHome(x))", "all x.((iPod(x) & ConnectedToGoogleHome(x)) -> ConnectedToGoogleHome(x))", "all x y.(( iPod1(x) & GoogleHome(y)) -> ConnectedTo(x,y))", "all x y.(( iPod1(x) & GoogleHome(y)) -> Connected(x,y))", "all x.(iPod(x) -> ConnectedToGoogleHome(x))", "all x.((IPod(x) & ConnectedToGoogleHome(x)) -> ConnectedToGoogleHome(x))", "all x y.(( iPod(x) & GoogleHome(y)) -> ConnectedTo(x,y))", "all x.(( iPod1(x) & GoogleHome(x)) -> Connected(x))", "all x y.(( iPod(x) & GoogleHome(y)) -> Connected(x,y))", "all x.(( iPod(x) & ConnectedToGoogleHome(x)) -> ConnectedToGoogleHome(x))", "all x.((IPod(x) & GoogleHome(x)) -> Connected(x))", "all x.( iPod(x) -> ConnectedToGoogleHome(x))", "all x.(( iPod1(x) & GoogleHome(x)) -> ConnectedTo(x,y))"]}
{"id": "folio_train_541", "nl": "No touring musicians are permanent members of an orchestra.", "fol": "all x.(IsOrchestraMember(x) -> -IsTouringMusician(x))", "prediction": ["-exists x.(TouristMusician(x) & PermanentMemberOfOrchestra(x))", "all x.(TouristMusician(x) -> -PermanentMemberOfOrchestra(x))", "all x y.((TouristMusician(x) & Orchestra(y)) -> -PermanentMember(x,y))", "-exists x.(TouringMusician(x) & PermanentMemberOfOrchestra(x))", "all x.(TouringMusician(x) -> -PermanentMemberOfOrchestra(x))", "all x y.((TouringMusician(x) & Orchestra(y)) -> -PermanentMember(x,y))", "all x.(TouristMusician(x) -> -PermanentMember(x))", "all x y.((TouristMusician(x) & Orchestra(y)) -> -Permanent(x,y))", "-exists x.(TouristMusician(x) & PermanentMember(x,Orchestra))", "-exists x.(TouristMusician(x) & PermanentMember(x,orchestra))", "-exists x.(TouristMusician(x) & PermanentMember(x))", "all x.(TouristMusician(x) -> -PermanentMember(x,Orchestra))", "-all x.(TouristMusician(x) -> PermanentMemberOfOrchestra(x))", "all x.(TouristMusician(x) -> -PermanentMember(x,orchestra))", "all x.(TouringMusician(x) -> -PermanentMember(x))", "all x y.((TouringMusician(x) & Orchestra(y)) -> -Permanent(x,y))"]}
{"id": "folio_train_542", "nl": "Musicians are either permanent members of an orchestra or have a unique musical voice or style.", "fol": "all x.((IsOrchestraMember(x) & -HasUniqueMusicalVoice(x)) | (-IsOrchestraMember(x) & HasUniqueMusicalVoice(x)))", "prediction": ["all x.(Musician(x) -> (PermanentMemberOfOrchestra(x) | UniqueMusicalVoiceOrStyle(x)))", "all x y.((Musician(x) & Orchestra(y)) -> (PermanentMember(x,y) | UniqueMusicalVoiceOrStyle(x)))", "all x.(Musician(x) -> (PermanentMember(x) | UniqueMusicalVoiceOrStyle(x)))", "all x y.((Musician(x) & Orchestra(y)) -> (PermanentMember(x,y) | UniqueMusicalVoice(x) | UniqueStyle(x)))", "all x y.((Musician(x) & Orchestra(y)) -> (PermanentMember(x,y) | UniqueMusicalVoiceOrStyle(x,y)))", "all x.(Musician(x) -> (PermanentMemberOfOrchestra(x) | UniqueMusicalVoice(x) | UniqueMusicalStyle(x)))", "all x y.((Musician(x) & Orchestra(y)) -> (PermanentMemberOf(x,y) | UniqueMusicalVoiceOrStyle(x)))", "all x.(Musician(x) -> (PermanentMemberOfOrchestra(x) | UniqueMusicalVoiceOrStyle(x)))", "all x y.((Musician(x) & Orchestra(y)) -> (PermanentMember(x,y) | UniqueVoiceOrStyle(x,y)))", "all x.(Musician(x) -> (PermanentMember(x) | UniqueMusicalVoice(x) | UniqueMusicalStyle(x)))", "all x y.((Musician(x) & Orchestra(y)) -> (PermanentMember(x,y) | UniqueMusicalVoice(x,y) | UniqueStyle(x,y)))", "all x y.((Musician(x) & Orchestra(y)) -> (PermanentMember(x,y) | UniqueVoiceOrStyle(x)))", "all x.(Musician(x) -> (PermanentMemberOfOrchestra(x) | UniqueMusicalVoice(x) | UniqueStyle(x)))", "all x.(Musician(x) -> (PermanentMember(x) | UniqueMusicalVoice(x) | UniqueStyle(x)))", "all x.(Musician(x) -> ((PermanentMemberOfOrchestra(x) | UniqueMusicalVoice(x) | UniqueMusicalStyle(x))))", "all x.(Musician(x) -> ((PermanentMember(x) & Orchestra(x)) | UniqueMusicalVoiceOrStyle(x))))"]}
{"id": "folio_train_543", "nl": "All musicians who have a unique musical voice or style are interesting as individual performers.", "fol": "all x.(HasUniqueMusicalVoice(x) -> IsInterestingPerformer(x))", "prediction": ["all x.((Musician(x) & UniqueMusicalVoiceOrStyle(x)) -> InterestingAsIndividualPerformer(x))", "all x.((Musician(x) & UniqueMusicalVoice(x) & UniqueMusicalStyle(x)) -> InterestingAsIndividualPerformer(x))", "all x.((Musician(x) & UniqueMusicalVoice(x) & UniqueMusicalStyle(x)) -> InterestingIndividualPerformer(x))", "all x.((Musician(x) & (UniqueMusicalVoice(x) | UniqueMusicalStyle(x))) -> InterestingAsIndividualPerformer(x))", "all x.((Musician(x) & UniqueMusicalVoiceOrStyle(x)) -> InterestingIndividualPerformer(x))", "all x.((Musician(x) & UniqueMusicalVoice(x) & UniqueMusicalStyle(x)) -> InterestingAsIndividualPerformer(x))", "all x.((Musician(x) & UniqueMusicalVoiceOrStyle(x)) -> InterestingAsIndividualPerformer(x))", "all x.((Musician(x) & (UniqueMusicalVoice(x) | UniqueStyle(x))) -> InterestingAsIndividualPerformer(x))", "all x.((Musician(x) & UniqueMusicalVoiceOrStyle(x)) -> InterestingAsIndividualPerformers(x))", "all x.((Musician(x) & UniqueVoiceOrStyle(x)) -> InterestingAsIndividualPerformer(x))", "all x.((Musician(x) & UniqueMusicalVoice(x) & UniqueMusicalStyle(x)) -> InterestingAsIndividualPerformers(x))", "all x.((Musician(x) & (UniqueMusicalVoice(x) | UniqueMusicalStyle(x))) -> InterestingIndividualPerformer(x))", "all x.((Musician(x) & UniqueMusicalVoice(x)) | UniqueMusicalStyle(x)) -> InterestingAsIndividualPerformer(x))", "all x.((Musician(x) & UniqueMusicalVoice(x) & UniqueMusicalStyle(x)) -> InterestingAsIndividualPerformers(x))", "all x.((Musician(x) & (UniqueVoice(x) | UniqueStyle(x))) -> InterestingAsIndividualPerformer(x))", "all x.((Musician(x) & UniqueMusicalVoice(x) & UniqueMusicalStyle(x)) -> InterestingIndividualPerformers(x))"]}
{"id": "folio_train_544", "nl": "All musicians who are interesting as individual performers are capable of attracting large audiences.", "fol": "all x.(IsInterestingPerformer(x) -> CanAttractLargeAudiences(x))", "prediction": ["all x.((Musician(x) & InterestingAsIndividualPerformer(x)) -> CapableOfAttractingLargeAudiences(x))", "all x.((Musician(x) & InterestingAsIndividualPerformer(x)) -> AttractsLargeAudiences(x))", "all x.((Musician(x) & InterestingAsIndividualPerformer(x)) -> CapableOfAttractingLargeAudiences(x))", "all x.((Musician(x) & InterestingAsIndividualPerformer(x)) -> AttractsLargeAudiences(x))", "all x.((Musician(x) & InterestingAsIndividualPerformer(x)) -> CanAttractLargeAudiences(x))", "all x.((Musician(x) & InterestingAsIndividualPerformers(x)) -> CapableOfAttractingLargeAudiences(x))", "all x.((Musician(x) & InterestingAsIndividualPerformers(x)) -> CapableOfAttractingLargeAudiences(x))", "all x.((Musician(x) & InterestingIndividualPerformer(x)) -> CapableOfAttractingLargeAudiences(x))", "all x.((Musician(x) & InterestingAsIndividualPerformers(x)) -> AttractsLargeAudiences(x))", "all x.((Musician(x) & InterestingIndividualPerformer(x)) -> CapableOfAttractingLargeAudiences(x))", "all x.((Musician(x) & InterestingIndividualPerformer(x)) -> AttractsLargeAudiences(x))", "all x.((Musician(x) & InterestingAsIndividualPerformers(x)) -> AttractsLargeAudiences(x))", "all x.((Musician(x) & InterestingAsIndividualPerformer(x)) -> CanAttractLargeAudiences(x))", "all x.((Musician(x) & InterestingAsIndividualPerformer(x)) -> AttractsLargeAudiences(x))", "all x.((Musician(x) & InterestingIndividualPerformer(x)) -> AttractsLargeAudiences(x))", "all x.((Musician(x) & InterestingAsIndividualPerformer(x)) -> CapableOfAttractingLargeAudiences(x))"]}
{"id": "folio_train_545", "nl": "If Ryan is interesting as an individual performer and has a unique musical voice or style, then Ryan is either a touring soloist musician and capable of attracting large audiences, or neither a touring soloist musician nor capable of attracting large audiences.", "fol": "((IsInterestingPerformer(Ryan) & HasUniqueMusicalVoice(Ryan)) -> -((IsTouringMusician(Ryan) & -CanAttractLargeAudiences(Ryan)) | (-IsTouringMusician(Ryan) & CanAttractLargeAudiences(Ryan))))", "prediction": ["all x.((InterestingIndividualPerformer(x) & UniqueMusicalVoiceOrStyle(x)) -> (TouringSoloistMusician(x) & CapableOfAttractingLargeAudiences(x)) | (-TouringSoloistMusician(x) & CapableOfAttractingLargeAudiences(x))))", "all x.((InterestingIndividualPerformer(x) & UniqueMusicalVoiceOrStyle(x)) -> (TouringSoloistMusician(x) & AttractsLargeAudiences(x)) | (-TouringSoloistMusician(x) & AttractsLargeAudiences(x))))", "all x.((InterestingAsIndividualPerformer(x) & UniqueMusicalVoiceOrStyle(x)) -> (TouringSoloistMusician(x) & CapableOfAttractingLargeAudiences(x)) | (-TouringSoloistMusician(x) & CapableOfAttractingLargeAudiences(x))))", "all x.((InterestingIndividualPerformer(x) & UniqueMusicalVoiceOrStyle(x)) -> (TouringSoloistMusician(x) & CapableOfAttractingLargeAudiences(x) | -TouringSoloistMusicianCapableOfAttractingLargeAudiences(x)))", "all x.((InterestingIndividualPerformer(x) & UniqueMusicalVoiceOrStyle(x)) -> (TouringSoloistMusician(x) & AttractsLargeAudiences(x) | -TouringSoloistMusician(x) & -AttractsLargeAudiences(x)))", "all x.((InterestingAsIndividualPerformer(x) & UniqueMusicalVoiceOrStyle(x)) -> (TouringSoloistMusician(x) & AttractsLargeAudiences(x)) | (-TouringSoloistMusician(x) & AttractsLargeAudiences(x))))", "all x.((InterestingIndividualPerformer(x) & UniqueMusicalVoiceOrStyle(x)) -> (TouringSoloistMusician(x) & AttractsLargeAudiences(x) | -TouringSoloistMusician(x) & AttractsLargeAudiences(x)))", "all x.((InterestingAsIndividualPerformer(x) & UniqueMusicalVoiceOrStyle(x)) -> (TouringSoloistMusician(x) & CapableOfAttractingLargeAudiences(x) | -TouringSoloistMusicianCapableOfAttractingLargeAudiences(x)))", "all x.((InterestingIndividualPerformer(x) & UniqueMusicalVoiceOrStyle(x)) -> (TouringSoloistMusician(x) & AttractsLargeAudiences(x)) | -TouringSoloistMusician(x) & -AttractsLargeAudiences(x)))", "all x.((InterestingIndividualPerformer(x) & UniqueMusicalVoiceOrStyle(x)) -> (TouringSoloistMusician(x) & AttractsLargeAudiences(x) | (-TouringSoloistMusician(x) & AttractsLargeAudiences(x))))", "all x.((InterestingAsIndividualPerformer(x) & UniqueMusicalVoiceOrStyle(x)) -> (TouringSoloistMusician(x) & AttractsLargeAudiences(x) | -TouringSoloistMusician(x) & -AttractsLargeAudiences(x)))", "all x.((InterestingIndividualPerformer(x) & UniqueMusicalVoiceOrStyle(x)) -> (TouringSoloistMusician(x) & CapableOfAttractingLargeAudiences(x) | (-TouringSoloistMusician(x) & CapableOfAttractingLargeAudiences(x))))", "all x.((InterestingIndividualPerformer(x) & UniqueMusicalVoiceOrStyle(x)) -> (TouringSoloistMusician(x) & CapableOfAttractingLargeAudiences(x)) | -TouringSoloistMusicianCapableOfAttractingLargeAudiences(x)))", "all x.((InterestingIndividualPerformer(x) & UniqueMusicalVoiceOrStyle(x)) -> (TouristSoloistMusician(x) & AttractsLargeAudiences(x)) | (-TouristSoloistMusician(x) & AttractsLargeAudiences(x))))", "all x.((InterestingAsIndividualPerformer(x) & UniqueMusicalVoiceOrStyle(x)) -> (TouringSoloistMusician(x) & AttractsLargeAudiences(x) | -TouringSoloistMusician(x) & AttractsLargeAudiences(x)))", "all x.((InterestingIndividualPerformer(x) & UniqueMusicalVoiceOrStyle(x)) -> (TouringSoloistMusician(x) & AttractsLargeAudiences(x) | (-TouringSoloistMusician(x) & AttractsLargeAudiences(x)))))"]}
{"id": "folio_train_546", "nl": "Ryan is interesting as an individual performer.", "fol": "IsInterestingPerformer(Ryan)", "prediction": ["all x.((Ryan(x) & IndividualPerformer(x)) -> Interesting(x))", "(InterestingAsIndividualPerformer(Ryan))", "all x.((Ryan(x) & IndividualPerformer(x)) -> Interesting(x))", "All x.((Ryan(x) & IndividualPerformer(x)) -> Interesting(x))", "(Interesting(Ryan) & IndividualPerformer(Ryan))", "all x.(InterestingAsIndividualPerformer(x) -> Ryan(x))", "(InterestingIndividualPerformer(Ryan))", "all x.((Ryan(x) & IndividualPerformer(x)) -> Interesting(x))", "all x.((Ryan(x) & Performer(x)) -> Interesting(x))", "(Interesting(Ryan) -> IndividualPerformer(Ryan))", "(InterestingAsIndividualPerformer(Ryan)", "(IndividualPerformer(Ryan) -> Interesting(Ryan))", "exists x.(Ryan(x) & IndividualPerformer(x))", "all x.(InterestingAsIndividualPerformer(x) -> Ryan(x))", "isInterestingAsIndividualPerformer(Ryan)", "(InterestingAsIndividualPerformer(Ryan) -> IndividualPerformer(Ryan))"]}
{"id": "folio_train_547", "nl": "Ryan is either a permanent member of an orchestra or a touring soloist musician.", "fol": "(IsOrchestraMember(Ryan) | IsTouringMusician(Ryan))", "prediction": ["all x.(Ryan(x) -> (PermanentMemberOfOrchestra(x) | TouringSolistMusician(x)))", "all x.(Ryan(x) -> (PermanentMemberOfOrchestra(x) | TouringSoloistMusician(x)))", "all x.(Ryan(x) -> (PermanentMember(x) | TouringSolistMusician(x)))", "all x.(Ryan(x) -> (PermanentMember(x) | TouringSoloistMusician(x)))", "all x.(Ryan(x) -> (PermanentMemberOfOrchestra(x) | TouringSolisteMusician(x)))", "all x y.((Ryan(x) & Orchestra(y)) | TouringSoloistMusician(x)) -> PermanentMember(x,y))", "all x y z.((Ryan(x) & Orchestra(y) & Soloist(z)) -> (PermanentMember(x,y) | TouringMusician(x,z)))", "all x y.((Ryan(x) & Orchestra(y)) | TouringSolistMusician(x)) -> PermanentMember(x,y))", "all x y.((Ryan(x) & Orchestra(y)) | TouringSolistMusician(x,y)) -> PermanentMember(x,y))", "(PermanentMemberOfOrchestra(Ryan) | TouringSoloistMusician(Ryan))", "all x.(Ryan(x) -> (PermanentMemberOfOrchestra(x) | TouringSolistMusician(x)))", "all x y.((Ryan(x) & Orchestra(y)) | TouringSoloistMusician(x,y)) -> PermanentMember(x,y))", "all x.(Ryan(x) -> (PermanentMemberOfOrchestra(x) | TouringSoloistMusician(x)))", "exists x.(Ryan(x) & (PermanentMemberOfOrchestra(x) | TouringSolistMusician(x)))", "all x y z.((Ryan(x) & Orchestra(y) & Soloist(z)) -> (PermanentMember(x,y) | Touring(x,z)))", "all x.(Ryan(x) -> (PermanentMember(x,orchestra) | TouringSolistMusician(x)))"]}
{"id": "folio_train_548", "nl": "Ryan is either a permanent member of an orchestra or has a unique musical voice or style.", "fol": "(IsOrchestraMember(Ryan) | HasUniqueMusicalVoice(Ryan))", "prediction": ["all x.(Ryan(x) -> (PermanentMemberOfOrchestra(x) | UniqueMusicalVoiceOrStyle(x)))", "all x y.((Ryan(x) & Orchestra(y)) -> (PermanentMember(x,y) | UniqueMusicalVoiceOrStyle(x)))", "all x.(Ryan(x) -> (PermanentMemberOfOrchestra(x) | UniqueMusicalVoice(x) | UniqueStyle(x)))", "all x y.((Ryan(x) & Orchestra(y)) -> (PermanentMember(x,y) | UniqueMusicalVoice(x) | UniqueStyle(x)))", "all x.(Ryan(x) -> (PermanentMember(x) | UniqueMusicalVoiceOrStyle(x)))", "all x.(Ryan(x) -> (PermanentMember(x) | UniqueMusicalVoice(x) | UniqueStyle(x)))", "all x.(Ryan(x) -> (PermanentMemberOfOrchestra(x) | UniqueMusicalVoiceOrStyle(x)))", "all x y.((Ryan(x) & Orchestra(y)) -> (PermanentMember(x,y) | UniqueMusicalVoice(x,y) | UniqueStyle(x,y)))", "all x y.((Ryan(x) & Orchestra(y)) -> (PermanentMember(x,y) | UniqueMusicalVoiceOrStyle(x,y)))", "all x y.((Ryan(x) & Orchestra(y)) -> (PermanentMember(x,y) | UniqueVoiceOrStyle(x,y)))", "all x y.((Ryan(x) & Orchestra(y)) -> (PermanentMemberOf(x,y) | UniqueMusicalVoiceOrStyle(x)))", "all x y.((Ryan(x) & Orchestra(y)) -> (PermanentMember(x,y) | UniqueVoiceOrStyle(x)))", "all x y z.((Ryan(x) & Orchestra(y) & (PermanentMember(x,y) | UniqueMusicalVoice(x) | UniqueStyle(x))) -> Permanent(x,y))", "all x.(Ryan(x) -> (PermanentMemberOfOrchestra(x) | UniqueVoiceOrStyle(x)))", "all x y.((Ryan(x) & Orchestra(y)) -> (PermanentMember(x,y) | UniqueVoice(x,y) | UniqueStyle(x,y)))", "all x y.((Ryan(x) & Orchestra(y)) -> (PermanentMember(x,y) | UniqueMusicalVoiceOrStyle(x)))"]}
{"id": "folio_train_549", "nl": "If someone yells, then they are not cool.", "fol": "all x.(Yell(x) -> -IsCool(x))", "prediction": ["all x.(Yells(x) -> -Cool(x))", "all x.(Yells(x) -> -cool(x))", "all x.(Yells(x) -> -Cozy(x))", "all x.(Yells(x) -> -Clothing(x))", "all x.((Yells(x) & Cool(x)) -> -cool(x))", "all x.(Yells(x) -> -Clean(x))", "all x.(Yells(x) -> -Cold(x))", "all x.((Yells(x) & Cool(x)) -> -Yells(x))", "all x.((Yells(x) & -Cool(x)) -> -Cool(x))", "all x.((Yells(x) & Cool(x)) -> -Cool(x))", "all x.(Yells(x) -> -Clown(x))", "all x.(Yells(x) -> NotCool(x))", "all x.((Yells(x) & Cool(x)) -> -(Yells(x) & Cool(x)))", "all x.(yells(x) -> -Cool(x))", "all x.((Yells(x) & Cool(x)) -> -Cozy(x))", "all x.((Yells(x) & -Cool(x)) -> Cool(x))"]}
{"id": "folio_train_550", "nl": "If someone is angry, then they yell.", "fol": "all x.(IsAngry(x) -> Yell(x))", "prediction": ["all x.(Angry(x) -> Yell(x))", "all x.((Person(x) & Irresponsible(x)) -> Yell(x))", "all x.((Person(x) & Irresponsible(x)) -> Yells(x))", "all x.((Person(x) & Anxious(x)) -> Yell(x))", "all x.((Person(x) & Agreed(x)) -> Yell(x))", "all x.((Person(x) & Irresponsible(x)) -> Yall(x))", "all x.((Angry(x) & Yell(x)) -> Anger(x))", "all x.(Angry(x) -> Yeell(x))", "all x.((Person(x) & Anxious(x)) -> Yells(x))", "all x.((Angry(x)) -> Yell(x))", "all x.((Person(x) & Anger(x)) -> Yell(x))", "all x.(Angry(x) -> Yall(x))", "all x.((Person(x) & Irresponsible(x)) -> Yill(x))", "all x.((Anger(x) & Yell(x)) -> Anger(x))", "all x.((Person(x) & Anxious(x)) -> Yall(x))", "all x.(Irresponsible(x) -> Yell(x))"]}
{"id": "folio_train_551", "nl": "If someone flies, then they are cool.", "fol": "all x.(CanFly(x) -> IsCool(x))", "prediction": ["all x.(Flies(x) -> Cool(x))", "all x.((Flies(x) & Cool(x)) -> Cool(x))", "all x.((Flies(x) & Cool(x)) -> Flies(x))", "all x.((Flyer(x) & Cool(x)) -> Cool(x))", "all x.((Fly(x) & Cool(x)) -> Cool(x))", "all x.((Fly(x) & Cool(x)) -> Flies(x))", "all x.(Fly(x) -> Cool(x))", "all x.((Flyer(x) & Cool(x)) -> Flies(x))", "all x.((Flyes(x) & Cool(x)) -> Cool(x))", "all x.((Person(x) & Flies(x)) -> Cool(x))", "all x.((Flying(x) & Cool(x)) -> Cool(x))", "all x.((Flies(x) & Cool(x)) -> -Flies(x))", "all x.((Flies(x) & Cool(x)) -> Person(x))", "all x.((Flies(x) & Cool(x)) -> Awesome(x))", "all x.((Flying(x) & Cool(x)) -> Flies(x))", "all x.((Flyers(x) & Cool(x)) -> Cool(x))"]}
{"id": "folio_train_552", "nl": "Every person that knows magic can fly.", "fol": "all x.(KnowsMagic(x) -> CanFly(x))", "prediction": ["all x.((Person(x) & KnowsMagic(x)) -> CanFly(x))", "all x.(KnowsMagic(x) -> CanFly(x))", "all x.((Person(x) & KnowledgesMagic(x)) -> CanFly(x))", "all x.((Person(x) & KnowsMagical(x)) -> CanFly(x))", "all x.((Personal(x) & KnowsMagic(x)) -> CanFly(x))", "all x y.((Person(x) & KnowsMagic(x)) -> CanFly(x))", "all x.((Man(x) & KnowsMagic(x)) -> CanFly(x))", "all x.((KnowsMagic(x)) -> CanFly(x))", "all x.((Person(x) & knowsMagic(x)) -> CanFly(x))", "all x y.((Person(x) & KnowsMagic(x)) -> CanFly(y))", "all x.((Person(x) & KnowMagic(x)) -> CanFly(x))", "all x.((People(x) & KnowsMagic(x)) -> CanFly(x))", "all x.((Person(x) & KnownMagic(x)) -> CanFly(x))", "all x.(Person(x) & KnowsMagic(x)) -> CanFly(x))", "all x.(KnowsMagical(x) -> CanFly(x))", "all x.((Person(x) & KnowsMagic(x)) -> Fly(x))"]}
{"id": "folio_train_553", "nl": "All wizards know magic.", "fol": "all x.(IsWizard(x) -> KnowsMagic(x))", "prediction": ["all x.(Wizard(x) -> KnowsMagic(x))", "all x.(Magic(x) -> KnowsMagic(x))", "all x.(Magician(x) -> KnowsMagic(x))", "all x.(Wizard(x) -> KnowledgesMagic(x))", "all x.exists y.(Wizard(x) & Magic(y) & Knows(x,y))", "all x y.((Wizard(x) & Magic(y)) -> Knows(x,y))", "all x.(Magic(x) -> KnowledgesMagic(x))", "all x y.((Magic(x) & Wizard(y)) -> KnowsMagic(y))", "all x.(Wizard(x) -> KnowMagic(x))", "all x y.((Magic(x) & Wizard(y)) -> KnowsMagic(x,y))", "all x.(Warrior(x) -> KnowsMagic(x))", "all x.(Magician(x) -> KnowledgesMagic(x))", "all x.(Magic(x) -> Knowledge(x))", "all x.(Magian(x) -> KnowsMagic(x))", "all x.exists y.(Wizard(x) & Magic(y) & Know(x,y))", "all x.(Wizard(x) -> KnowledgeMagic(x))"]}
{"id": "folio_train_554", "nl": "Harry either yells and flies, or neither yells nor flies.", "fol": "((Yell(Harry) & CanFly(Harry) & -(-Yell(Harry) & -CanFly(Harry))) | (-(Yell(Harry) & CanFly(Harry)) & -Yell(Harry) & -CanFly(Harry)))", "prediction": ["all x.(Harry(x) -> ((Yells(x) & Flies(x)) | (-Yells(x) & Flies(x))))", "(all x.(Harry(x) -> (Yells(x) & Flies(x))) | (-Yells(x) & Flies(x))))", "all x.(Harry(x) -> (Yells(x) & Flies(x)) | (-Yells(x) & Flies(x))))", "(all x.(Harry(x) -> (Yells(x) | Flies(x))))", "all x.(Harry(x) -> ((Yells(x) & Flies(x)) | (-Yells(x) & Flies(x)))))", "all x.(Harry(x) -> ((Yells(x) & Flies(x)) | -Yells(x) & Flies(x))))", "all x.(Harry(x) -> ((Yells(x) & Flies(x)) | -Yells(x) & Flies(x)))", "all x.(Harry(x) -> (Yells(x) & Flies(x)) | -Yells(x) & Flies(x)))", "(all x.(Harry(x) -> (Yells(x) & Flies(x)) | (-Yells(x) & Flies(x))))", "all x.(Harry(x) -> (Yells(x) & Flies(x) | -Yells(x) & Flies(x)))", "exists x.(Harry(x) & ((Yells(x) & Flies(x)) | -Yells(x) & Flies(x))))", "(all x.(Harry(x) -> (Yells(x) & Flies(x))) | -Yells(x) & Flies(x)))", "(all x.(Harry(x) -> (Yells(x) & Flies(x)) | (-Yells(x) & Flies(x)))))", "all x.(Harry(x) -> ((Yells(x) | Flies(x)) | (-Yells(x) & Flies(x))))", "(all x.(Harry(x) -> (Yells(x) & Flies(x)) | -Yells(x) & Flies(x)))", "(all x.(Harry(x) -> (Yells(x) & Flies(x))))"]}
{"id": "folio_train_555", "nl": "Potter is a wizard and flies.", "fol": "(IsWizard(Potter) & CanFly(Potter))", "prediction": ["all x.(Potter(x) -> (Magic(x) & Flies(x)))", "all x.(Potter(x) -> (Magician(x) & Flies(x)))", "all x.(Potter(x) -> (Wizard(x) & Flies(x)))", "all x.(Potter(x) -> (Magician(x) & Flies(x)))", "all x.(Potter(x) -> (Magic(x) & Flies(x)))", "all x.(Potter(x) -> (Magid(x) & Flies(x)))", "all x.(Potter(x) -> (IsWizard(x) & Flies(x)))", "exists x.(Potter(x) & Wizard(x) & Flies(x))", "all x y.((Potter(x) & Wizard(y)) -> Flies(x))", "(Wizard(Potter) & Flies(Potter))", "all x.(Potter(x) -> (Wizard(x) & Flies(x)))", "all x.(Potter(x) -> (Magitar(x) & Flies(x)))", "(All x.(Potter(x) -> Wizard(x)) & Flies(x))", "all x.(Potter(x) -> (IsMagic(x) & Flies(x)))", "all x.(Potter(x) -> (Magical(x) & Flies(x)))", "all x.(Potter(x) -> (Magician(x) & Fly(x)))"]}
{"id": "folio_train_556", "nl": "Harry is cool.", "fol": "IsCool(Harry)", "prediction": ["all x.(Harry(x) -> Cool(x))", "all x.((Harry(x) & Cool(x)) -> Cool(x))", "All x.(Harry(x) -> Cool(x))", "all x.(Harris(x) -> Cool(x))", "Harry is cool.", "exists x.(Harry(x) & Cool(x))", "((Harry(Harry) & Cool(Harry)) -> Cool(Harry))", "(Cool(Harry) & Cool(Harry))", "All x.(Harris(x) -> Cool(x))", "((Harry(Harry) & Cool(Harry)))", "(Cozy(Harry) & Cool(Harry))", "((Harry(Harry) | Cool(Harry)))", "all x.((Harry(x) & Cool(x)) -> Awesome(x))", "all x.((Harry(x) & Cool(x)) -> Cool(x))", "(Cool(Harry) -> Cool(Harry))", "-(Harry(Harry) & Cool(Harry))"]}
{"id": "folio_train_557", "nl": "Harry is not cool.", "fol": "-IsCool(Harry)", "prediction": ["all x.(Harry(x) -> -Cozy(x))", "all x.(Harry(x) -> -Cool(x))", "all x.(Harris(x) -> -Cozy(x))", "all x.(Harry(x) -> -cool(x))", "all x.(Harry(x) -> -Clean(x))", "all x.(Harry(x) -> -Clothing(x))", "all x.(Harris(x) -> -Cool(x))", "All x.(Harry(x) -> -Cozy(x))", "All x.(Harry(x) -> -Cool(x))", "all x.(Harry(x) -> -Cold(x))", "exists x.(Harry(x) & -Cozy(x))", "exists x.(Harry(x) & -Cool(x))", "all x.((Harry(x) & Cool(x)) -> -Cozy(x))", "-(Harry(Harry) & Cool(Harry))", "all x.(Harry(x) -> -Click(x))", "all x.((Harry(x) & Cool(x)) -> -Cool(x))"]}
{"id": "folio_train_558", "nl": "Harry is a wizard or angry.", "fol": "(IsWizard(Harry) | IsAngry(Harry))", "prediction": ["all x.(Harry(x) -> (Wizard(x) | Agreed(x)))", "all x.(Harry(x) -> (Magic(x) | Agreed(x)))", "all x.(Harry(x) -> (Magician(x) | Agreed(x)))", "all x.(Harry(x) -> (Wizard(x) | Angerful(x)))", "all x.(Harry(x) -> (Magic(x) | Aggressive(x)))", "all x.(Harry(x) -> (Magician(x) | Angerful(x)))", "all x.(Harry(x) -> (Wizard(x) | Angerous(x)))", "all x.(Harry(x) -> (Magic(x) | Angerful(x)))", "all x.(Harry(x) -> (Wizard(x) | Angering(x)))", "all x.(Harry(x) -> (Magician(x) | Aggressive(x)))", "all x.(Harry(x) -> (Wizard(x) | Aggressive(x)))", "all x.(Harry(x) -> (Wizard(x) | Anxious(x)))", "all x.(Harry(x) -> (Magic(x) | Aging(x)))", "all x.(Harry(x) -> (Magician(x) | Anxious(x)))", "all x.(Harry(x) -> (Magician(x) | Angering(x)))", "all x.(Harry(x) -> (Magic(x) | Angerous(x)))"]}
{"id": "folio_train_559", "nl": "Harry is neither a wizard nor angry.", "fol": "(-IsWizard(Harry) & -IsAngry(Harry))", "prediction": ["all x.(Harry(x) -> (-Wizard(x) & -Angry(x)))", "all x.(Harry(x) -> (-Magic(x) & -Angry(x)))", "all x.(Harry(x) -> (-Magician(x) & -Angry(x)))", "all x.(Harry(x) -> (-Magid(x) & -Angry(x)))", "all x.(Harry(x) -> (-Magician(x) | Angerful(x)))", "all x.(Harry(x) -> (-Magic(x) | Angerful(x)))", "(-Wizard(Harry) & -Angry(Harry))", "all x.(Harry(x) -> (NeitherMagic(x) & -Angry(x)))", "all x.(Harry(x) -> (NoWizard(x) & -Angry(x)))", "all x.(Harry(x) -> (-Magic(x) | Agreed(x)))", "all x.(Harry(x) -> (-Wizard(x) | Angerful(x)))", "all x.(Harry(x) -> (-Magician(x) | Agreed(x)))", "(-Magic(Harry) & -Angry(Harry))", "all x.(Harry(x) -> (-Wizard(x) | Agreed(x)))", "all x.(Harry(x) -> (-Magician(x) | Angering(x)))", "all x.(Harry(x) -> (-Magician(x) | Anxious(x)))"]}
{"id": "folio_train_560", "nl": "Products are either produced in China or the US. ", "fol": "all x.((ProducedInChina(x) & -ProducedInUS(x)) | (-ProducedInChina(x) & ProducedInUS(x)))", "prediction": ["all x.(Product(x) -> (ProducedIn(x,China) | ProducedIn(x,US)))", "all x.(Product(x) -> (ProducedIn(x,Chinese) | ProducedIn(x,US)))", "all x.(Product(x) -> (ProducedInChina(x) | ProducedInUS(x)))", "all x y.((Product(x) & (ProducedIn(x,Chinese) | ProducedIn(x,US))) -> (ProducedIn(x,Chinese) | ProducedIn(x,US)))", "all x y.((Product(x) & (China(y) | US(y))) -> ProducedIn(x,y))", "all x.(Product(x) -> (ProducedIn(x,Changhai) | ProducedIn(x,US)))", "all x.(Product(x) -> (ProducedIn(x,China) | ProducedIn(x,USA)))", "all x.(Product(x) -> (ProducedIn(x,Chine) | ProducedIn(x,US)))", "all x y.((Product(x) & (ProducedIn(x,Chinese) | ProducedIn(x,US))) -> (ProducedIn(x,China) | ProducedIn(x,US)))", "all x.(Product(x) -> (ProducedIn(x,China) | ProducedIn(x,US)))", "exists x.(Product(x) & (ProducedIn(x,China) | ProducedIn(x,US)))", "all x.(Product(x) -> (ProducedIn(x,China) | MadeIn(x,US)))", "all x y.((Product(x) & (ProducedIn(x,y) | ProducedIn(x,y))) -> (ProducedIn(x,y) | ProducedIn(x,y)))", "all x.(Product(x) -> (ProducedInChinese(x) | ProducedInUS(x)))", "all x.(Product(x) -> (ProducedIn(x,Chinese) | ProducedIn(x,USA)))", "all x.(Product(x) -> ((ProducedInChina(x) | ProducedInUS(x))))"]}
{"id": "folio_train_561", "nl": "All produced in China are labeled. ", "fol": "all x.(ProducedInChina(x) -> IsLabeled(x))", "prediction": ["all x.(ProducedInChina(x) -> Labeled(x))", "all x.((ProducedInChina(x) & Labeled(x)) -> ProducedInChina(x))", "all x.((ProducedInChina(x) & Labeled(x)) -> MadeInChina(x))", "all x.((ProducedInChina(x) & Labeled(x)) -> Labeled(x))", "all x.((ProducedInChina(x)) -> Labeled(x))", "all x y.((ProducedIn(x,y) & China(y)) -> Labeled(x))", "all x.((ProducedInChina(x) & Labeled(x)) -> -ProducedInChina(x))", "all x.((ProducedInChina(x) & Labeled(x)) -> Product(x))", "all x.((ProducedInChina(x) & Labeled(x)) -> ProductType(x))", "all x y.((ProducedInChina(x) & Product(y)) -> Labeled(x))", "all x.((ProducedInChina(x) & Labeled(x))", "all x.((ProducedInChina(x) & Labeled(x)) -> ProducedIn(x,y))", "all x.((ProducedInChina(x) & Labeled(x)) -> ProducedIn(x,Chinese))", "all x.((ProducedInChina(x) & Labeled(x)) -> ProducedIn(x,China))", "all x.((ProducedInChina(x) & Labeled(x)) -> ProductedInChina(x))", "all x.((ProducedInChina(x) & Labeled(x)) -> ProductiveInChina(x))"]}
{"id": "folio_train_562", "nl": "All produced in the US are sold in the US. ", "fol": "all x.(ProducedInUS(x) -> IsSoldInUS(x))", "prediction": ["all x.(ProducedIn(x,US) -> SoldIn(x,US))", "all x y.((ProducedIn(x,y) & US(y)) -> SoldIn(x,y))", "all x.(ProducedInUS(x) -> SoldInUS(x))", "all x.((ProducedIn(x,US) & SoldIn(x,US)) -> ProducedIn(x,US))", "all x.((ProducedIn(x,US)) -> SoldIn(x,US))", "all x.((ProducedInUS(x) & SoldInUS(x)) -> ProducedInUS(x))", "all x.(ProducedInU.S.A.S.(x) -> SoldInU.S.A.S.(x)))", "all x y.((ProducedIn(x,y) & USA(y)) -> SoldIn(x,y))", "all x.((ProducedIn(x,US) & SoldIn(x,US)) -> MadeIn(x,US))", "all x.(ProducedIn(x,USA) -> SoldIn(x,USA))", "all x.(ProducedInTheUS(x) -> SoldInTheUS(x))", "all x.((ProducedIn(x,US) & USSold(x)) -> SoldIn(x,US))", "all x.((ProducedIn(x,US) & SoldIn(x,US)) -> -ProducedIn(x,US))", "all x.((ProducedIn(x,US) & USSold(x)) -> ProducedIn(x,US))", "all x.(ProducedInU.S.A.S.(x) -> SoldInUS(x))", "all x.(ProducedInU.S.A.S.(x) -> SoldInU.S.A.S.A.(x)))"]}
{"id": "folio_train_563", "nl": "If labeled, then the product is cheaper. ", "fol": "all x.(IsLabeled(x) -> IsCheaper(x))", "prediction": ["all x.((Labeled(x) & Product(x)) -> Cheaper(x))", "all x.((Labeled(x) & Product(x)) -> Cheaper(x))", "all x.((Product(x) & Labeled(x)) -> Cheaper(x))", "all x.((Labeled(x) & Product(y)) -> Cheaper(y))", "all x.((Labeled(x) & Cheaper(x)) -> Product(x))", "all x.((Labeled(x) & Product(y)) -> Cheaper(y))", "all x.(Labeled(x) -> CheaperProduct(x))", "all x.((Labeled(x) & Product(x)) -> Boughtier(x))", "all x.(Labeled(x) -> Cheaper(x))", "all x.((Labeled(x) & Cheaper(x)) -> Product(x))", "all x.((Labeled(x) & ProductBudget(x)) -> Cheaper(x))", "all x.((Product(x) & Labeled(x)) -> Boughtier(x))", "all x.((Labeled(x) & Product(x)) -> Boughtier(x))", "all x.((Labeled(x) & Product(x)) -> LowerBudget(x))", "all x.((Labeled(x) & ProductBudget(x)) -> Cheaper(x))", "all x y.((Product(x) & Labeled(x)) -> Cheaper(y))"]}
{"id": "folio_train_564", "nl": "All sold in the US are sold in Walmart. ", "fol": "all x.(IsSoldInUS(x) -> IsSoldInWalmart(x))", "prediction": ["all x.(SoldInUS(x) -> SoldInWalmart(x))", "all x.((SoldInUS(x) & SoldInWalmart(x)) -> SoldInWalmart(x))", "all x.(SoldIn(x,US) -> SoldInWalmart(x))", "all x.(SoldInUS(x) -> SoldInWallmart(x))", "all x.((SoldIn(x,US) & SoldIn(x,Walmart)) -> SoldIn(x,Walmart))", "all x.((SoldInUS(x) & SoldInWallmart(x)) -> SoldInWallmart(x))", "all x.((SoldInTheUS(x) & SoldInWalmart(x)) -> SoldInWalmart(x))", "all x.((SoldIn(x,US) & SoldInWalmart(x)) -> SoldInWalmart(x))", "all x.((SoldInUS(x) & SoldInWalmart(x)) -> SellsInWalmart(x))", "all x.(SoldIn(x,US) -> SoldInWallmart(x))", "all x.(SoldInTheUS(x) -> SoldInWalmart(x))", "all x y.((SoldIn(x,y) & US(y)) -> SoldInWalmart(x))", "all x.((SoldIn(x,US) & SoldIn(x,Walmart)) -> SellsIn(x,Walmart))", "all x y.((SoldIn(x,y) & US(y)) -> SoldIn(x,y))", "all x.(SoldIn(x,US) -> SoldIn(x,Walmart))", "all x.((SoldIn(x,US) & SoldInWalmart(x)) -> SoldIn(x,Walmart))"]}
{"id": "folio_train_565", "nl": "All displayed on the homepage are sold in Walmart. ", "fol": "all x.(IsDisplayedInHomepage(x) -> IsSoldInWalmart(x))", "prediction": ["all x.(DisplayedOnHomepage(x) -> SoldInWalmart(x))", "all x.(Display(x) -> SoldInWalmart(x))", "all x.((Display(x) & DisplayedOnHomepage(x)) -> SoldInWalmart(x))", "all x y.((DisplayedOnHomepage(x) & Walmart(y)) -> SoldIn(x,y))", "all x.((DisplayedOnHomepage(x) & SoldInWalmart(x)) -> DisplayedOnHomepage(x))", "all x.((DisplayedOnHomepage(x) & SoldInWalmart(x)) -> SellsInWalmart(x))", "all x.(DisplayedOnHomepage(x) -> SoldInWallmart(x))", "all x y.((Homepage(x) & DisplayedOn(x,y)) -> SoldInWalmart(y))", "all x y.((Homepage(x) & DisplayedOn(x,y)) -> SoldInWalmart(x))", "all x.((DisplayedOnHomepage(x) & SellsInWalmart(x)) -> DisplayedOnHomepage(x))", "all x y.((Homepage(x) & DisplayedOn(x,y)) -> SoldIn(y,Walmart))", "all x.(DisplayedOnHomepage(x) -> SellsInWalmart(x))", "all x.(DisplayOnHomepage(x) -> SoldInWalmart(x))", "all x.((DisplayedOnHomepage(x) & SoldInWalmart(x)) -> Walmart(x))", "all x y.((Homepage(x) & DisplayedOn(x,y)) -> SoldIn(x,y))", "all x y.((Homepage(x) & DisplayedOn(x,y) & Walmart(y)) -> SoldIn(x,y))"]}
{"id": "folio_train_566", "nl": "No products returned by customers are sold in Walmart. ", "fol": "all x.(IsReturnedByCustomer(x) -> -IsSoldInWalmart(x))", "prediction": ["all x.((Product(x) & CustomerReturned(x)) -> -SoldInWalmart(x))", "all x.((Product(x) & ReturnedByCustomers(x)) -> -SoldInWalmart(x))", "all x.((Product(x) & ReturnedByCustomers(x)) -> SoldInWalmart(x))", "all x.((Product(x) & CustomerReturned(x)) -> -SoldInWallmart(x))", "all x.((Product(x) & ReturnedByCustomers(x)) -> -SoldInWallmart(x))", "all x y.((Product(x) & Customer(y) & ReturnedBy(x,y)) -> SoldInWalmart(x))", "all x.((Product(x) & ReturnedByCustomers(x)) -> SoldInWallmart(x))", "all x y.((Product(x) & Customer(y) & Returned(x,y)) -> SoldInWalmart(x))", "all x.((Product(x) & CustomerReturned(x)) -> SoldInWalmart(x))", "all x y.((Product(x) & Customer(y) & ReturnedBy(x,y)) -> SoldInWallmart(x))", "all x y.((Product(x) & Customer(y) & Returned(x,y)) -> SoldInWallmart(x))", "all x y.((Product(x) & Customer(y) & Returned(x,y)) -> SoldInWalmart(x,y))", "all x y z.((Product(x) & Customer(y) & Walmart(z)) -> -SoldIn(x,y,z))", "all x y.((Product(x) & Customer(y) & Returned(x,y)) -> SoldInWalmart(x))", "all x.((Product(x) & ReturnedByCustomers(x)) -> SoldInWalmart(x))", "all x.((Product(x) & CustomerReturned(x)) -> SoldInWallmart(x))"]}
{"id": "folio_train_567", "nl": "G-910 is either displayed on the homepage or cheaper.", "fol": "-((IsDisplayedInHomepage(G910) & -IsCheaper(G910)) | (-IsDisplayedInHomepage(G910) & IsCheaper(G910)))", "prediction": ["all x.(G-910(x) -> (DisplayedOnHomepage(x) | Cheaper(x)))", "all x.(G-910(x) -> (DisplayedOnHomepage(x) | BoughtOnHomepage(x)))", "all x.(G-910) -> (DisplayedOnHomepage(x) | Cheaper(x)))", "all x.(G910(x) -> (DisplayedOnHomepage(x) | Cheaper(x)))", "all x y.((G-910(x) & Homepage(y)) -> (DisplayedOn(x,y) | Cheaper(x,y)))", "all x.(G-910(x) -> (DisplayOnHomepage(x) | Cheaper(x)))", "all x.(G-910(x) -> (DisplayedOnHomepage(x) | Cheaper(x)))", "all x.(G-910(x) -> (DisplayedOnHomepage(x) | LowerBudget(x)))", "all x.(G-910(x) -> (DisplayedOnHomepage(x) | Costly(x)))", "all x y.((G-910(x) & Homepage(y)) -> (DisplayedOn(x,y) | BoughtOn(x,y)))", "all x.(G-910(x) -> (DisplaysOnHomepage(x) | Cheaper(x)))", "(DisplayedOnHomepage(G-910) | Cheaper(G-910)))", "all x.(G-910(x) -> (DisplayableOnHomepage(x) | Cheaper(x)))", "all x.((G-910(x) & DisplayedOnHomepage(x)) | Cheaper(x))", "all x.(G-910(x) -> (DisplayedOnHomepage(x) | Cheaper(x)))", "all x.(G-910(x) -> (DisplayedOnHomepage(x) | BoughtByFavorite(x)))"]}
{"id": "folio_train_568", "nl": "G-910 is displayed on the homepage.", "fol": "IsDisplayedInHomepage(G910)", "prediction": ["all x.(G-910(x) -> DisplayedOnHomepage(x))", "all x.((G-910(x) & DisplayedOnHomepage(x)) -> DisplayedOnHomepage(x))", "all x y.((G-910(x) & Homepage(y)) -> DisplayedOn(x,y))", "all x.(G910(x) -> DisplayedOnHomepage(x))", "all x.(G-910) -> DisplayedOnHomepage(x))", "all x y.((G-910(x) & Homepage(y)) -> DisplayedOn(x,y))", "all x.((G910(x) & DisplayedOnHomepage(x)) -> DisplayedOnHomepage(x))", "all x.((G-910) & DisplayedOnHomepage(x)) -> DisplayedOnHomepage(x))", "all x y.((G910(x) & Homepage(y)) -> DisplayedOn(x,y))", "all x y.((G-910(x) & Homepage(y)) -> Displayed(x,y))", "all x y z.((G-910(x) & Homepage(y) & Homepage(z)) -> DisplayedOn(x,y,z))", "All x.(G-910(x) -> DisplayedOnHomepage(x))", "all x y z.((G-910(x) & Homepage(y) & Homepage(z)) -> DisplayedOn(x,y,z))", "all x y.((G-910(x) & Homepage(y)) -> Displayed(x,y))", "all x.((G-910(x) & DisplayedOnHomepage(x)) -> Displayed(x))", "all x.((G-910(x) & DisplayedOnHomepage(x)) -> Displays(x))"]}
{"id": "folio_train_569", "nl": "G-910 is not displayed on the homepage.", "fol": "-IsDisplayedInHomepage(G910)", "prediction": ["all x.(G-910(x) -> -DisplayedOnHomepage(x))", "all x.((G-910(x) & -DisplayedOnHomepage(x)) -> -DisplayedOnHomepage(x))", "(-DisplayedOnHomepage(G-910))", "All x.(G-910(x) -> -DisplayedOnHomepage(x))", "all x.(G-910(x) -> -DisplayableOnHomepage(x))", "all x.((G-910(x) & -Displayed(x)) -> -Displayed(x))", "all x.(G-910(x) -> -DisplayOnHomepage(x))", "all x.((G-910(x) & -Displayed(x)) -> -DisplayedOnHomepage(x))", "all x.(G-910(x) -> -DisplaysOnHomepage(x))", "all x.((G-910(x) & -DisplayedOnHomepage(x)) -> -Displayed(x))", "all x.((G-910(x) & -Display(x)) -> -Display(x))", "all x.(G-910(x) -> -Displayed(x))", "all x.(G-910) -> -DisplayedOnHomepage(x))", "all x.((G-910(x) & -DisplayedOnHomepage(x)) -> NotDisplayedOnHomepage(x))", "all x.(G-910(x) -> -Display(x,Homepage))", "all x.(G-910(x) -> -Display(x))"]}
{"id": "folio_train_570", "nl": "G-910 is a product returned by customers.", "fol": "IsReturnedByCustomer(G910)", "prediction": ["all x.(G-910(x) -> ProductReturnedByCustomers(x))", "all x.(G-910(x) -> ReturnedByCustomers(x))", "all x.((G-910(x) & ReturnedByCustomers(x)) -> Product(x))", "all x.((Product(x) & ReturnedByCustomers(x)) -> G-910.", "all x y.((G-910(x) & Customer(y)) -> ReturnedBy(x,y))", "all x y.((G-910(x) & Customer(y)) -> ProductReturned(x,y))", "all x y.((G-910(x) & Customer(y)) -> ProductReturnedBy(x,y))", "all x.((Product(x) & ReturnedByCustomers(x)) -> G-910(x))", "all x.((G-910(x) & Customer(x)) -> ProductReturned(x))", "all x.((Product(x) & Customer(x)) -> ReturnedBy(x,G-910))", "all x.((G-910(x) & Customer(y)) -> ProductReturned(x,y))", "all x.((G-910(x) & Customer(y)) -> ReturnedBy(x,y))", "all x.((Product(x) & Customer(x)) -> G-910.", "all x y.((G-910(x) & Customer(y)) -> Returns(x,y))", "all x.((Product(x) & Customer(x)) -> G-910(x))", "all x.(G910(x) -> ProductReturnedByCustomers(x))"]}
{"id": "folio_train_571", "nl": "G-910 is a product returned by customers or sold in Walmart.", "fol": "(IsReturnedByCustomer(G910) | IsSoldInWalmart(G910))", "prediction": ["all x.(G-910(x) -> (ReturnedByCustomers(x) | SoldInWalmart(x)))", "all x.(G-910(x) -> (ReturnedByCustomers(x) | SoldInWallmart(x)))", "all x.((Product(x) & (ReturnedByCustomers(x) | SoldInWalmart(x))) -> G-910.", "all x.((Product(x) & (ReturnedByCustomers(x) | SoldInWalmart(x))) -> G-910(x))", "all x.((Product(x) & (ReturnedByCustomers(x) | SoldInWallmart(x))) -> G-910.", "all x.((Product(x) & (ReturnedByCustomers(x) | SoldInWallmart(x))) -> G-910(x))", "all x.((G-910(x) & (ReturnedByCustomers(x) | SoldInWalmart(x))) -> Product(x))", "all x.((Product(x) & (ReturnedByCustomers(x) | SoldInWalmart(x))) -> G-910)", "all x.((G-910(x) & (ReturnedByCustomers(x) | SoldInWallmart(x))) -> Product(x))", "all x y.((G-910(x) & Walmart(y)) -> (ReturnedByCustomers(x,y) | SoldIn(x,y)))", "all x y z.((G-910(x) & Customer(y) & Walmart(z)) -> (ReturnedBy(x,y) | SoldIn(x,z)))", "all x y.((G-910(x) & (Customer(y) | Walmart(y))) -> (ReturnedBy(x,y) | SoldIn(x,y)))", "all x.(G-910(x) -> (ReturnedByCustomers(x) | SoldInWalmart(x)))", "all x.(G-910(x) -> (Product(x) & (ReturnedByCustomers(x) | SoldInWalmart(x))))", "all x.((Product(x) & (ReturnedByCustomers(x) | SoldInWallmart(x))) -> G-910)", "all x.(G-910(x) -> (ReturnedByCustomers(x) | SoldInWallmart(x)))"]}
{"id": "folio_train_572", "nl": "G-910 is either returned by customers or sold in Walmart.", "fol": "(IsReturnedByCustomer(G910) | IsSoldInWalmart(G910))", "prediction": ["all x.(G-910(x) -> (ReturnedByCustomers(x) | SoldInWalmart(x)))", "all x.(G-910(x) -> (ReturnedByCustomers(x) | SoldInWallmart(x)))", "all x.((G-910(x) & (ReturnedByCustomers(x) | SoldInWalmart(x))) -> SoldInWalmart(x))", "all x.((G-910(x) & (ReturnedByCustomers(x) | SoldInWallmart(x))) -> SoldInWallmart(x))", "all x y.((G-910(x) & Customer(y)) -> (ReturnedBy(x,y) | SoldInWallmart(x,y)))", "all x y.((G-910(x) & Customer(y)) -> (ReturnedBy(x,y) | SoldIn(x,y)))", "all x y.((G-910(x) & Customer(y)) -> (ReturnedBy(x,y) | SoldInWalmart(x,y)))", "all x y z.((G-910(x) & Customer(y) & Walmart(z)) -> (ReturnedBy(x,y) | SoldIn(x,z)))", "all x.(G-910(x) -> ((ReturnedByCustomers(x) | SoldInWalmart(x))))", "all x.(G-910) -> (ReturnedByCustomers(x) | SoldInWalmart(x)))", "all x.(G910(x) -> (ReturnedByCustomers(x) | SoldInWalmart(x)))", "all x.(G-910(x) -> (ReturnedByCustomers(x) | SoldInWallpaper(x)))", "all x y.((G-910(x) & Customer(y)) -> (Returned(x,y) | SoldInWallmart(x,y)))", "all x.(G910(x) -> (ReturnedByCustomers(x) | SoldInWallmart(x)))", "all x y.((G-910(x) & Customer(y)) -> (Returned(x,y) | SoldInWalmart(x,y)))", "all x.(G-910(x) -> (ReturnedByCustomers(x) | SoldInWalmart(x)))"]}
{"id": "folio_train_573", "nl": "People either order a lot of Amazon packages or are environmentally conscious.", "fol": "all x.((OrdersAmazonPackages(x) & -IsEnvironmentallyConscious(x)) | (-OrdersAmazonPackages(x) & IsEnvironmentallyConscious(x)))", "prediction": ["all x.((Person(x) & OrdersLotsOfAmazonPackages(x)) | EnvironmentallyConscious(x))", "all x.((Person(x) & (OrdersLotsOfAmazonPackages(x) | EnvironmentallyConscious(x))) -> AmazonPackages(x))", "all x.(Person(x) -> (OrdersLotsOfAmazonPackages(x) | EnvironmentallyConscious(x)))", "exists x.(Person(x) & (OrdersLotsOfAmazonPackages(x) | EnvironmentallyConscious(x)))", "all x.((Person(x) & (OrdersLotsOfAmazonPackages(x) | EnvironmentallyConscious(x))) -> Orders(x,AmazonPackages))", "all x y.((Person(x) & AmazonPackage(y)) -> (Orders(x,y) | EnvironmentallyConscious(x)))", "all x.((Person(x) & (OrdersLotOfAmazonPackages(x) | EnvironmentallyConscious(x))) -> AmazonPackages(x))", "all x.((Person(x) & (OrdersLotsOfAmazonPackages(x) | EnvironmentallyConscious(x))) -> Purchases(x,AmazonPackages))", "all x.((Person(x) & (OrdersLotsOfAmazonPackages(x) | EnvironmentallyConscious(x))) -> LotsOfAmazonPackages(x))", "all x.((Person(x) & (OrdersLotOfAmazonPackages(x) | EnvironmentallyConscious(x))) -> Orders(x,AmazonPackages))", "all x.(Person(x) -> (OrdersLotOfAmazonPackages(x) | EnvironmentallyConscious(x)))", "all x.((Person(x) & (OrdersLotsOfAmazonPackages(x) | EnvironmentallyConscious(x))) -> Buys(x,AmazonPackages))", "all x.((Person(x) & (OrdersLotsOfAmazonPackages(x) | EnvironmentallyConscious(x))) -> AmazonPackage(x))", "all x.((Person(x) & (OrdersLotsOfAmazonPackages(x) | EnvironmentallyConscious(x))) -> OrdersPackages(x))", "all x.((Person(x) & (OrdersLotsOfAmazonPackages(x) | EnvironmentallyConscious(x))) -> PurchasesPackages(x))", "all x.((Person(x) & (OrdersLotsOfAmazonPackages(x) | EnvironmentallyConscious(x))) -> AmazonPackages(x))"]}
{"id": "folio_train_574", "nl": "If people order a lot of Amazon packages, then they get a lot of daily mail delivered.", "fol": "all x.(OrdersAmazonPackages(x) -> ReceivesDailyMail(x))", "prediction": ["all x.((Person(x) & OrdersLotsOfAmazonPackages(x)) -> GetsLotsOfDailyMail(x))", "all x.(OrdersLotsOfAmazonPackages(x) -> GetsLotsOfDailyMail(x))", "all x.((Person(x) & OrdersLotsOfAmazonPackages(x)) -> GetsLotsOfDailyMail(x))", "all x.((Person(x) & OrdersLotsOfAmazonPackages(x)) -> ReceivesLotsOfDailyMail(x))", "all x.((Person(x) & OrdersAmazonPackages(x)) -> GetsDailyMail(x))", "all x.((People(x) & OrdersLotsOfAmazonPackages(x)) -> GetsLotsOfDailyMail(x))", "all x.((Person(x) & OrdersLotsOfAmazonPackages(x)) -> GetsLotsOfDaylyMail(x))", "all x.((Person(x) & OrdersLotsOfAmazonPackages(x)) -> LotsOfDailyMail(x))", "all x.((Person(x) & OrdersLotsOfAmazonPackages(x)) -> GetsLotsOfDailyMailDelivered(x))", "all x.((Person(x) & OrdersLotsOfAmazonPackages(x)) -> GetsLotsOfDomesticMail(x))", "all x y.((Person(x) & OrdersLotsOfAmazonPackages(x)) -> GetsLotsOfDailyMail(y))", "all x.((Person(x) & OrdersLotsOfAmazonPackages(x)) -> GetsDailyMail(x))", "all x y.((Person(x) & AmazonPackage(y) & Orders(x,y)) -> GetsDailyMail(x))", "all x.((Person(x) & OrdersMillionsOfAmazonPackages(x)) -> GetsMillionsOfDailyMail(x))", "all x y.((Person(x) & AmazonPackages(y) & Orders(x,y)) -> GetsDailyMail(x))", "all x.((Person(x) & OrdersLotsOfAmazonPackages(x)) -> LotsOfDailyMailDelivered(x))"]}
{"id": "folio_train_575", "nl": "If people are environmentally conscious, then they have solar panels in their homes.", "fol": "all x.(IsEnvironmentallyConscious(x) -> HasSolarPanels(x))", "prediction": ["all x.(EnvironmentallyConscious(x) -> HasSolarPanelsInHomes(x))", "all x.(EnvironmentallyConscious(x) -> SolarPanelsInHomes(x))", "all x.(EnvironmentallyConscious(x) -> HasSolarPanelsInHome(x))", "all x.((Person(x) & EnvironmentallyConscious(x)) -> HasSolarPanelsInHome(x))", "all x.((Person(x) & EnvironmentallyConscious(x)) -> SolarPanelsInHome(x))", "all x.(EnvironmentallyConscious(x) -> SolarPanelsInHome(x))", "all x.(EnvironmentallyConscious(x) -> HasSolarPanels(x))", "all x.((Person(x) & EnvironmentallyConscious(x)) -> HasSolarPanelsInHomes(x))", "all x.((Person(x) & EnvironmentallyConscious(x)) -> SolarPanelsInHomes(x))", "all x.((Person(x) & EnvironmentallyConscious(x)) -> HasSolarPanels(x))", "all x.((People(x) & EnvironmentallyConscious(x)) -> HasSolarPanelsInHomes(x))", "all x.((People(x) & EnvironmentallyConscious(x)) -> SolarPanelsInHomes(x))", "all x.(EnvironmentallyConscious(x) -> exists y.(SolarPanel(y) & InHome(x,y))))", "all x.(EnvironmentallyConscious(x) -> exists y.(SolarPanel(y) & InHome(x,y)))", "all x.(EnvironmentallyConscious(x) -> HasSolarPanelsInHomes(x))", "all x.(EnvironmentallyConscious(x) -> exists y.(SolarPanel(y) & InHome(y,x)))"]}
{"id": "folio_train_576", "nl": "If people get a lot of daily mail delivered, then they are very involved with their neighborhood.", "fol": "all x.(ReceivesDailyMail(x) -> InvolvedWithNeighborhood(x))", "prediction": ["all x.((Person(x) & LotsOfDailyMail(x)) -> VeryInvolvedWithNeighborhood(x))", "all x.((Person(x) & GetsDailyMail(x)) -> VeryInvolvedWithNeighborhood(x))", "all x.((Person(x) & GetsLotOfDailyMail(x)) -> VeryInvolvedWithNeighborhood(x))", "all x.((People(x) & LotsOfDailyMail(x)) -> VeryInvolvedWithNeighborhood(x))", "all x.((Person(x) & LotsOfDailyMail(x)) -> VeryInvolvedInNeighborhood(x))", "all x.((Person(x) & ReceivesDailyMail(x)) -> VeryInvolvedWithNeighborhood(x))", "all x.((Person(x) & LotsOfDailyMailDelivered(x)) -> VeryInvolvedWithNeighborhood(x))", "all x y.((Person(x) & DailyMail(y) & Delivered(x,y)) -> VeryInvolvedWithNeighborhood(x))", "all x.((Person(x) & GetsDailyMailDelivered(x)) -> VeryInvolvedWithNeighborhood(x))", "all x.((Person(x) & DailyMailDelivered(x)) -> VeryInvolvedWithNeighborhood(x))", "all x.((Person(x) & LotsOfDailyMail(x)) -> VeryInterestingWithNeighborhood(x))", "all x.((Person(x) & GetsDailyMail(x)) -> VeryInvolvedInNeighborhood(x))", "all x.((Person(x) & LotsOfDaylyMail(x)) -> VeryInvolvedWithNeighborhood(x))", "all x.((People(x) & GetsDailyMail(x)) -> VeryInvolvedWithNeighborhood(x))", "all x.((Person(x) & GettingDailyMail(x)) -> VeryInvolvedWithNeighborhood(x))", "all x y.((Person(x) & DailyMail(y) & Delivered(x,y)) -> VeryInvolvedWithNeighborhood(x,y))"]}
{"id": "folio_train_577", "nl": "If people have solar panels in their homes, then they save a lot of money.", "fol": "all x.(HasSolarPanels(x) -> SavesMoney(x))", "prediction": ["all x.((Person(x) & SolarPanelsInHome(x)) -> SavesLotOfMoney(x))", "all x.((Person(x) & HasSolarPanelsInHome(x)) -> SavesLotOfMoney(x))", "all x.((Person(x) & SolarPanelsInHome(x)) -> SavesMore(x))", "all x.((Person(x) & HasSolarPanelsInHome(x)) -> SavesMore(x))", "all x.((Person(x) & SolarPanelsInHome(x)) -> SavesMoreMoney(x))", "all x.(SolarPanelsInHome(x) -> SavesLotOfMoney(x))", "all x.((Person(x) & HasSolarPanelsInHome(x)) -> SavesMoreMoney(x))", "all x.((Person(x) & HasSolarPanels(x)) -> SavesLotOfMoney(x))", "all x.((Person(x) & SolarPanelsInHome(x)) -> SavesMoney(x))", "all x.((Person(x) & HasSolarPanelsInHome(x)) -> SavesMoney(x))", "all x.((Person(x) & HasSolarPanelsInHome(x)) -> SavesLittleMoney(x))", "all x.((Person(x) & SolarPanelsInHome(x)) -> SavesLittleMoney(x))", "all x.((Person(x) & HasSolarPanels(x)) -> SavesMore(x))", "all x.(SolarPanelsInHome(x) -> SavesMoreMoney(x))", "all x.(SolarPanelsInHome(x) -> SavesMore(x))", "all x.((Person(x) & SolarPanelsInHome(x)) -> SavesMillions(x))"]}
{"id": "folio_train_578", "nl": "If Marcy either gets a lot of mail and is very involved with her neighborhood or if she does not order a lot of Amazon packages nor is very involved with her neighborhood, then Marcy does not both get a lot of daily mail and order a lot of Amazon packages. ", "fol": "(-((ReceivesDailyMail(Marcy) & -InvolvedWithNeighborhood(Marcy)) | (-ReceivesDailyMail(Marcy) & InvolvedWithNeighborhood(Marcy))) -> (-ReceivesDailyMail(Marcy) | -OrdersAmazonPackages(Marcy)))", "prediction": ["all x.((Marcy(x) & (GetsLotOfMail(x) & VeryInvolvedWithNeighborhood(x) | -OrdersLotOfAmazonPackages(x))) -> -(GetsLotOfDailyMail(x) & OrdersLotOfAmazonPackages(x))))", "all x.((Marcy(x) & ((GetsLotOfMail(x) & VeryInvolvedWithNeighborhood(x)) | (-OrdersLotOfAmazonPackages(x) & VeryInvolvedWithNeighborhood(x)))) -> -(GetsLotOfDailyMail(x) & OrdersLotOfAmazonPackages(x))))", "all x.((Marcy(x) & ((GetsLotOfMail(x) & VeryInvolvedWithNeighborhood(x)) | -(OrdersLotOfAmazonPackages(x) & VeryInvolvedWithNeighborhood(x)))) -> -(GetsLotOfDailyMail(x) & OrdersLotOfAmazonPackages(x))))", "all x.((Marcy(x) & ((GetsLotOfMail(x) & VeryInvolvedWithNeighborhood(x)) | (-OrdersLotOfAmazonPackages(x) & VeryInvolvedWithNeighborhood(x))))) -> -(GetsLotOfDailyMail(x) & OrdersLotOfAmazonPackages(x))))", "all x.((Marcy(x) & ((GetsLotOfMail(x) & VeryInvolvedWithNeighborhood(x)) | (-OrdersLotOfAmazonPackages(x) & VeryInvolvedWithNeighborhood(x)))) -> -(GetsLotOfDailyMail(x) & OrdersLotOfAmazonPackages(x)))", "all x.((Marcy(x) & (GetsLotOfMail(x) & VeryInvolvedWithNeighborhood(x) | -OrdersLotOfAmazonPackages(x) & VeryInvolvedWithNeighborhood(x))) -> -(GetsLotOfDailyMail(x) & OrdersLotOfAmazonPackages(x)))", "all x.((Marcy(x) & (GetsLotOfMail(x) & VeryInvolvedWithNeighborhood(x) | (-OrdersLotOfAmazonPackages(x) & VeryInvolvedWithNeighborhood(x)))) -> -(GetsLotOfDailyMail(x) & OrdersLotOfAmazonPackages(x)))", "all x.((Marcy(x) & ((GetsLotOfMail(x) & VeryInvolvedWithNeighborhood(x)) | (-OrdersLotOfAmazonPackages(x) & VeryInvolvedWithNeighborhood(x))))) -> -(GetsLotOfDailyMail(x) & OrdersLotOfAmazonPackages(x)))", "all x.((Marcy(x) & (GetsLotOfMail(x) & VeryInvolvedWithNeighborhood(x) | -OrdersLotOfAmazonPackages(x))) -> -(GetsLotOfDailyMail(x) & OrdersLotOfAmazonPackages(x)))", "all x.((Marcy(x) & (LotOfMail(x) | VeryInvolvedWithNeighborhood(x))) | (-LotOfDailyMail(x) & VeryInvolvedWithNeighborhood(x))))", "all x.((Marcy(x) & ((GetsLotOfMail(x) & VeryInvolvedWithNeighborhood(x)) | -OrdersLotOfAmazonPackages(x)))) -> -(GetsLotOfDailyMail(x) & OrdersLotOfAmazonPackages(x))))", "all x.((Marcy(x) & (GetsLotOfMail(x) | VeryInvolvedWithNeighborhood(x))) | (-OrdersLotOfAmazonPackages(x) & VeryInvolvedWithNeighborhood(x))))", "all x.((Marcy(x) & ((GetsLotOfMail(x) & VeryInvolvedWithNeighborhood(x)) | (-OrdersLotOfAmazonPackages(x) & VeryInvolvedWithNeighborhood(x)))))", "all x.((Marcy(x) & ((GetsLotOfMail(x) & VeryInvolvedWithNeighborhood(x)) | (-OrdersLotOfAmazonPackages(x) & VeryInvolvedWithNeighborhood(x)))) -> (-(GetsLotOfDailyMail(x) & OrdersLotOfAmazonPackages(x)))))", "all x.((Marcy(x) & ((LotOfMail(x) & VeryInvolvedWithNeighborhood(x)) | (-LotOfAmazonPackages(x) & VeryInvolvedWithNeighborhood(x))))) -> -(LotOfDailyMail(x) & LotsOfAmazonPackages(x))))", "all x.((Marcy(x) & ((GetsLotOfMail(x) & VeryInvolvedWithNeighborhood(x)) | (-OrdersLotOfAmazonPackages(x) & VeryInvolvedWithNeighborhood(x)))) -> -(GetsLotOfDaylyMail(x) & OrdersLotOfAmazonPackages(x))))"]}
{"id": "folio_train_579", "nl": "Marcy either orders a lot of Amazon packages or saves a lot of money.", "fol": "(OrdersAmazonPackages(Marcy) | SavesMoney(Marcy))", "prediction": ["all x.(Marcy(x) -> (OrdersLotsOfAmazonPackages(x) | SavesLotsOfMoney(x)))", "all x y.((Marcy(x) & AmazonPackage(y)) -> (Orders(x,y) | Saves(x,y)))", "all x.(Marcy(x) -> (Orders(x,Amazon) | Saves(x,Amazon)))", "all x y.((Marcy(x) & AmazonPackages(y)) -> (Orders(x,y) | Saves(x,y)))", "all x.(Marcy(x) -> (OrdersLotsOfAmazonPackages(x) | SavesLotsOfMoney(x)))", "exists x.(Marcy(x) & (OrdersLotsOfAmazonPackages(x) | SavesLotsOfMoney(x)))", "all x.(Marcy(x) -> (Orders(x,AmazonPackages) | Saves(x,AmazonPackages)))", "(OrdersLotsOfAmazonPackages(Marcy) | SavesLotsOfMoney(Marcy)))", "all x.(Marcy(x) -> (OrdersLotOfAmazonPackages(x) | SavesLotOfMoney(x)))", "(OrdersLotsOfAmazonPackages(Marcy) | SavesLotsOfMoney(Marcy))", "all x.(Marcy(x) -> (OrdersAmazonPackages(x) | SavesMoney(x)))", "all x.(Marcy(x) -> (OrdersLittleAmazonPackages(x) | SavesLittleMoney(x)))", "all x.(Marcy(x) -> (OrdersMillionsOfAmazonPackages(x) | SavesMillionsOfMoney(x)))", "all x y.((Marcy(x) & AmazonPackage(y)) -> (Orders(x,y) | SavesMoney(x,y)))", "all x.(Marcy(x) -> (OrdersManyAmazonPackages(x) | SavesManyMoney(x)))", "all x y.((Marcy(x) & Amazon(y)) -> (Orders(x,y) | Saves(x,y)))"]}
{"id": "folio_train_580", "nl": "If Marcy is not a person who orders a lot of Amazon packages and is very environmentally conscious, then Taylor is not someone who saves a lot of money and is environmentally conscious.", "fol": "((-OrdersAmazonPackages(Marcy) & IsEnvironmentallyConscious(Marcy)) -> (-SavesMoney(Taylor) | -IsEnvironmentallyConscious(Taylor)))", "prediction": ["all x.((Person(x) & -OrdersLotsOfAmazonPackages(x) & EnvironmentallyConscious(x)) -> -SaversLotsOfMoney(x) & EnvironmentallyConscious(x))", "all x.((Marcy(x) & -OrdersLotsOfAmazonPackages(x) & EnvironmentallyConscious(x)) -> -(SaversLotsOfMoney(x) & EnvironmentallyConscious(x)))", "all x.((Person(x) & -OrdersLotsOfAmazonPackages(x) & EnvironmentallyConscious(x)) -> -(SaversLotsOfMoney(x) & EnvironmentallyConscious(x)))", "all x.((Marcy(x) & -OrdersLotsOfAmazonPackages(x) & EnvironmentallyConscious(x)) -> -SaversLotsOfMoney(x) & EnvironmentallyConscious(x))", "all x.((Person(x) & -OrdersLotsOfAmazonPackages(x) & EnvironmentallyConscious(x)) -> -SavesLotsOfMoney(x) & EnvironmentallyConscious(x))", "all x.((Marcy(x) & -(OrdersLotsOfAmazonPackages(x) & EnvironmentallyConscious(x))) -> -(SaversLotsOfMoney(x) & EnvironmentallyConscious(x)))", "all x.((Marcy(x) & -OrdersLotsOfAmazonPackages(x) & EnvironmentallyConscious(x)) -> -(Marcy(x) & SavesLotsOfMoney(x) & EnvironmentallyConscious(x)))", "all x.((Person(x) & -OrdersLotsOfAmazonPackages(x) & EnvironmentallyConscious(x)) -> -(SavesLotsOfMoney(x) & EnvironmentallyConscious(x)))", "all x.((Person(x) & -OrdersLotsOfAmazonPackages(x) & EnvironmentallyConscious(x)) -> (-SaversLotsOfMoney(x) & EnvironmentallyConscious(x)))", "all x.((Marcy(x) & -OrdersLotsOfAmazonPackages(x) & EnvironmentallyConscious(x)) -> -(SavesLotsOfMoney(x) & EnvironmentallyConscious(x)))", "all x.((Marcy(x) & -OrdersLotsOfAmazonPackages(x) & EnvironmentallyConscious(x)) -> -SavesLotsOfMoney(x) & EnvironmentallyConscious(x))", "all x.((Person(x) & -OrdersLotsOfAmazonPackages(x) & VeryEnvironmentallyConscious(x)) -> -SaversLotsOfMoney(x) & EnvironmentallyConscious(x))", "all x.((Marcy(x) & -OrdersLotsOfAmazonPackages(x) & EnvironmentallyConscious(x)) -> (-SaversLotsOfMoney(x) & EnvironmentallyConscious(x)))", "all x.((Person(x) & -OrdersLotsOfAmazonPackages(x) & VeryEnvironmentallyConscious(x)) -> -(SaversLotsOfMoney(x) & EnvironmentallyConscious(x)))", "all x.((Person(x) & -OrdersAmazonPackages(x) & EnvironmentallyConscious(x)) -> -SaversLotsOfMoney(x) & EnvironmentallyConscious(x))", "all x.((Marcy(x) & -(OrdersLotsOfAmazonPackages(x) & EnvironmentallyConscious(x))) -> -(SaversLotsOfMoney(x) & EnvironmentallyConscious(x))))"]}
{"id": "folio_train_581", "nl": "Indonesia is a country.", "fol": "IsCountry(Indonesia)", "prediction": ["all x.(Indonesia(x) -> Country(x))", "all x.(Indonesian(x) -> Country(x))", "all x y.((Indonesia(x) & Country(y)) -> Country(x,y))", "all x y.((Indonesia(x) & Country(y)) -> Country(x))", "all x.(Indonesia(x) -> Country(x))", "all x y.((Indonesia(x) & Country(y)) -> Is(x,y))", "All x.(Indonesia(x) -> Country(x))", "all x.((Indonesia(x) & Country(x)) -> Country(x))", "all x y.((Indonesia(x) & Country(y)) -> Indonesia(x))", "all x y.((Indonesia(x) & Country(y)) -> LocatedIn(x,y))", "(Country(Indonesia) & Country(Indonesia))", "all x y.((Indonesia(x) & Country(y)) -> Indonesian(x))", "all x.exists y.(Indonesia(x) & Country(y) & LocatedIn(x,y))", "all x y.((Indonesian(x) & Country(y)) -> Country(x,y))", "exists x.(Indonesia(x) & Country(x))", "all x y.((Indonesia(x) & Country(y)) -> Land(x))"]}
{"id": "folio_train_582", "nl": "In Indonesia, the prosecutor only personally investigates cases of some special crimes.", "fol": "exists x y.((IsCountry(Indonesia) & IsProsecutor(x) & IsCrime(y)) -> InvestigatesPersonally(x,y))", "prediction": ["all x y z.((Prosecutor(x) & Indonesia(y) & SpecialCrime(z)) -> OnlyInspects(x,y,z))", "all x y z.((Prosecutor(x) & Indonesia(y) & SpecialCrime(z)) -> Investigates(x,y,z))", "all x y.((Prosecutor(x) & InIndonesia(y)) -> OnlyInspectsSpecialCrimes(x,y))", "all x y z.((Indonesia(x) & Prosecutor(y) & SpecialCrime(z)) -> Investigates(y,z))", "all x y.((Prosecutor(x) & Indonesia(y)) -> OnlyInspects(x,y))", "all x y.((Prosecutor(x) & Indonesia(y)) -> InvestigatesSpecialCrimes(x,y))", "all x y.((Prosecutor(x) & InIndonesia(y)) -> OnlyInspects(x,y))", "all x y.((IndonesianProsecutor(x) & SpecialCrime(y)) -> OnlyInvestigates(x,y))", "all x y.((IndonesianProsecutor(x) & SpecialCrime(y)) -> OnlyInspects(x,y))", "all x y.((Prosecutor(x) & Indonesia(y)) -> Investigates(x,y))", "all x y z.((IndonesianProsecutor(x) & SpecialCrime(y) & SpecialCrime(z)) -> Investigates(x,y,z))", "all x y z.((Indonesia(x) & Prosecutor(y) & SpecialCrime(z)) -> OnlyInspects(y,z))", "all x y.((IndonesianProsecutor(x) & SpecialCrime(y)) -> Investigates(x,y))", "all x y.((Prosecutor(x) & InIndonesia(y)) -> OnlyInvestigates(x,y))", "all x y z.((Prosecutor(x) & Indonesian(y) & SpecialCrime(z)) -> OnlyInspects(x,y,z))", "all x y z.((Prosecutor(x) & SpecialCrime(y) & InIndonesia(z)) -> OnlyInspects(x,y,z))"]}
{"id": "folio_train_583", "nl": "Corruption is a type of crime.", "fol": "IsCrime(Corruption)", "prediction": ["all x.(Corruption(x) -> Crime(x))", "all x.(Corruption(x) -> TypeOfCrime(x))", "all x y.((Corruption(x) & Crime(y)) -> TypeOf(x,y))", "all x.(Corruption(x) -> Crime(x))", "all x.(Corruption(x) -> (Crime(x) & Crime(x)))", "all x.(Corruption(x) -> (Crime(x) & Crime(x)))", "all x.(Corruption(x) -> Criminal(x))", "all x.(Corruption(x) -> IsCrime(x))", "all x y.((Corruption(x) & Crime(y)) -> Is(x,y))", "all x.(Corruption(x) -> (Crime(x) & -Crime(x)))", "all x.(Corruption(x) -> (Crime(x) & TypeOfCrime(x)))", "all x y.((Corruption(x) & Crime(y)) -> Type(x,y))", "all x.(Corruption(x) -> (Crime(x) & TypeOfCrime(x)))", "all x.(Corruption(x) -> TypeOfCrime(x))", "all x.(Corruption(x) -> (Crime(x) & -Crime(x)))", "all x y.((Corruption(x) & Crime(y)) -> Crime(x,y))"]}
{"id": "folio_train_584", "nl": "Once the police complete investigations of a crime, they hand the evidence to the prosecutor. ", "fol": "all x y.(((IsCrime(y) & CompletesInvestigation(y) & IsProsecutor(x)) -> IsEvidence(y)) & HandsEvidenceToProsecutor(x,y))", "prediction": ["all x y.((Police(x) & Crime(y) & CompletesInvestigations(x,y)) -> HandsEvidenceToProsecutor(x,y))", "all x y.((Police(x) & Crime(y) & CompletesInvestigations(x,y)) -> HandsEvidenceToProsecutor(x))", "all x y.((Police(x) & Crime(y) & CompletesInquests(x,y)) -> HandsEvidenceToProsecutor(x,y))", "all x y z.((Police(x) & Crime(y) & Prosecutor(z) & CompletesInvestigations(x,y)) -> HandsEvidence(x,z))", "all x y z.((Police(x) & Crime(y) & Prosecutor(z) & CompletesInvestigations(x,y)) -> HandsEvidenceTo(x,z))", "all x y z.((Police(x) & Crime(y) & Prosecutor(z)) -> CompletesInvestigations(x,y))", "all x y.((Police(x) & Crime(y) & CompletesInvestigations(x,y)) -> HandsEvidence(x,y))", "all x y.((Police(x) & Crime(y) & CompletesInquests(x,y)) -> HandsEvidenceToProsecutor(x))", "all x y z.((Police(x) & Crime(y) & Prosecutor(z)) -> CompletesInvestigationsAndHandsEvidence(x,y,z))", "all x y z.((Police(x) & Crime(y) & Prosecutor(z)) -> CompletesInvestigations(x,y,z))", "all x y.((Police(x) & Crime(y) & CompletesInvestigations(x,y)) -> HandsEvidenceToProcessor(x,y))", "all x y.((Police(x) & Crime(y) & CompletesInvestigations(x,y)) -> HandsEvidenceToProsecutors(x,y))", "all x y z.((Police(x) & Crime(y) & Prosecution(z) & CompletesInvestigations(x,y)) -> HandsEvidenceTo(x,z))", "all x y z.((Police(x) & Crime(y) & Prosecutor(z) & CompletesInvestigations(x,y)) -> HandsEvidence(x,y,z))", "all x y.((Police(x) & Crime(y) & CompletesInvestigations(x,y)) -> HandsEvidenceToProsecutor(x,y))", "all x y.((Police(x) & Crime(y) & CompletesInvestigations(x,y)) -> HandsEvidenceToProsecution(x,y))"]}
{"id": "folio_train_585", "nl": "Evidence can be either satisfactory or unsatisfactory.", "fol": "all x.(IsCrime(x) & IsEvidence(x) & ((IsSatisfactory(x) & -IsUnsatisfactory(x)) | (-IsSatisfactory(x) & IsUnsatisfactory(x))))", "prediction": ["all x.(Evidence(x) -> (Satisfying(x) | Unsatisfactory(x)))", "all x.(Evidence(x) -> (Supplyable(x) | Unsatisfactory(x)))", "all x.(Evidence(x) -> (Satisfactory(x) | Unsatisfactory(x)))", "all x.(Evidence(x) -> (Supplying(x) | Unsatisfactory(x)))", "all x.(Evidence(x) -> (Supplementary(x) | Unsatisfactory(x)))", "all x.(Evidence(x) -> (Sagradable(x) | Unsatisfactory(x)))", "all x.(Evidence(x) -> (Supportable(x) | Unsatisfactory(x)))", "all x.(Evidence(x) -> (Sufficient(x) | Unsatisfactory(x)))", "all x.(Evidence(x) -> (Saluting(x) | Unsatisfactory(x)))", "all x.(Evidence(x) -> (Ssatisfactory(x) | Unsatisfactory(x)))", "all x.(Evidence(x) -> (Salable(x) | Unsatisfactory(x)))", "all x.(Evidence(x) -> (Sasatisfactory(x) | Unsatisfactory(x)))", "all x.(Evidence(x) -> (Sagradating(x) | Unsatisfactory(x)))", "all x.(Evidence(x) -> (Supplenish(x) | Unsatisfactory(x)))", "all x.(Evidence(x) -> (Sonorable(x) | Unsatisfactory(x)))", "all x.(Evidence(x) -> (Salacious(x) | Unsatisfactory(x)))"]}
{"id": "folio_train_586", "nl": "If the police hand the evidence to the prosecutor and the evidence is satisfactory, the prosecutor will prosecute the offender in an appropriate court.", "fol": "all x y.((IsEvidence(y) & HandsEvidenceToProsecutor(x,y) & IsSatisfactory(y)) -> ProsecutesOffenderInCourt(x,y))", "prediction": ["all x y.((Police(x) & Prosecutor(y) & HandsEvidenceTo(x,y) & SatisfactoryEvidence(x)) -> ProsecutionInAppropriateCourt(y))", "all x y z.((Police(x) & Prosecutor(y) & Offender(z) & HandsEvidenceTo(x,y) & SatisfyingEvidence(y,z)) -> ProsecutesInAppropriateCourt(y,z))", "all x y.((Police(x) & Prosecutor(y) & HandsEvidenceTo(x,y) & SatisfactoryEvidence(y)) -> ProsecutionInAppropriateCourt(y))", "all x y z.((Police(x) & Prosecutor(y) & Offender(z) & HandsEvidenceTo(x,y) & SatisfyingEvidence(y,z)) -> ProsecutionInAppropriateCourt(y,z))", "all x y z.((Police(x) & Prosecutor(y) & Offender(z) & HandsEvidenceTo(x,y) & SatisfactoryEvidence(y)) -> ProsecutionInAppropriateCourt(y,z))", "all x y.((Police(x) & Prosecutor(y) & HandsEvidence(x,y) & SatisfactoryEvidence(x,y)) -> ProsecutionInAppropriateCourt(y))", "all x y z.((Police(x) & Prosecutor(y) & Offender(z) & HandsEvidenceTo(x,y) & SatisfactoryEvidence(y)) -> ProsecutesInAppropriateCourt(y,z))", "all x y z.((Police(x) & Prosecutor(y) & Offender(z) & HandsEvidenceTo(x,y) & SatisfyingEvidence(y)) -> ProsecutionInAppropriateCourt(y,z))", "all x y z.((Police(x) & Prosecutor(y) & Offender(z) & HandsEvidenceTo(x,y) & SatisfactoryEvidence(y,z)) -> ProsecutionInAppropriateCourt(y,z))", "all x y z.((Police(x) & Prosecutor(y) & Offender(z) & HandsEvidenceTo(x,y) & SatisfactoryEvidence(y,z)) -> ProsecutesInAppropriateCourt(y,z))", "all x y.((Police(x) & Prosecutor(y) & HandsEvidenceTo(x,y) & SatisfactoryEvidence(x,y)) -> ProsecutionInAppropriateCourt(y))", "all x y.((Police(x) & Prosecutor(y) & HandsEvidence(x,y) & SatisfactoryEvidence(x,y)) -> ProsecutesInAppropriateCourt(y,x))", "all x y.((Police(x) & Prosecutor(y) & HandsEvidence(x,y) & SatisfactoryEvidence(x,y)) -> Prosecution(y,x))", "all x y.((Police(x) & Prosecutor(y) & HandsEvidence(x,y) & SatisfactoryEvidence(x,y)) -> ProsecutionInAppropriateCourt(y,x))", "all x y.((Police(x) & Prosecutor(y) & HandsEvidence(x,y) & SatisfyingEvidence(x,y)) -> Prosecution(y,x))", "all x y.((Police(x) & Prosecutor(y) & HandsEvidence(x,y) & SatisfactoryEvidence(x,y)) -> Prosecution(y,y))"]}
{"id": "folio_train_587", "nl": "When the police complete investigations, the prosecutor will prosecute the offender at an appropriate court.", "fol": "all x y.((CompletesInvestigation(y) & IsProsecutor(x)) -> ProsecutesOffenderInCourt(x,y))", "prediction": ["all x y z.((Police(x) & Investigation(y) & Offender(z) & Completes(x,y)) -> ProsecutesAtAppropriateCourt(x,z))", "all x y.((Police(x) & Offender(y) & CompletesInvestigations(x,y)) -> ProsecutesAtAppropriateCourt(x,y))", "all x y.((Police(x) & Offender(y) & CompletesInvestigations(x,y)) -> ProsecutionAtAppropriateCourt(x,y))", "all x y z.((Police(x) & Investigation(y) & Offender(z) & Completes(x,y)) -> ProsecutionAtAppropriateCourt(x,z))", "all x y z.((Police(x) & Investigates(y) & Offender(z) & Completes(x,y)) -> ProsecutesAtAppropriateCourt(x,z))", "all x y.((PoliceCompletesInvestigations(x) & Offender(y)) -> ProsecutesAtAppropriateCourt(x,y))", "all x y.((Police(x) & Investigation(y) & Completes(x,y)) -> ProsecutesAtAppropriateCourt(x,y))", "all x y.((PoliceCompletesInvestigations(x) & Offender(y)) -> ProsecutionAtAppropriateCourt(x,y))", "all x y z.((Police(x) & Investigates(y) & Offender(z) & Completes(x,y)) -> ProsecutionAtAppropriateCourt(x,z))", "all x y z.((Police(x) & Investigation(y) & Offender(z) & Completes(x,y)) -> ProsecutesAtAdequateCourt(x,z))", "all x y.((Police(x) & Offender(y)) -> CompletesInvestigations(x,y))", "all x.((PoliceCompletesInvestigations(x) & Prosecutor(x)) -> ProsecutionAtAppropriateCourt(x))", "all x y z.((Police(x) & Investigation(y) & Offender(z) & Completes(x,y)) -> ProsecutionAtAdequateCourt(x,z))", "all x y z.((Police(x) & Investigation(y) & Prosecutor(z) & Completes(x,y)) -> ProsecutionAtAppropriateCourt(z,y))", "all x y.((Police(x) & Offender(y) & CompletesInvestigations(x)) -> ProsecutionAtAppropriateCourt(x,y))", "all x y z.((Police(x) & Investigation(y) & Offender(z) & Completes(x,y)) -> ProsecutesAtAppropriateCourt(z,y))"]}
{"id": "folio_train_588", "nl": "In Indonesia, the prosecutor personally investigates cases of corruption.", "fol": "exists x.(IsCountry(Indonesia) & IsProsecutor(x) & InvestigatesPersonally(x,Corruption))", "prediction": ["all x y.((Prosecutor(x) & Indonesia(y)) -> PersonallyInvestigatesCorruption(x,y))", "all x y.((Prosecutor(x) & InIndonesia(y)) -> PersonallyInvestigatesCorruption(x,y))", "all x y.((Prosecutor(x) & Indonesia(y)) -> PersonallyInvestigates(x,y))", "all x y.((Indonesia(x) & Prosecutor(y)) -> PersonallyInvestigatesCorruption(y,x))", "all x y z.((Prosecutor(x) & Corruption(y) & InIndonesia(z)) -> PersonallyInvestigates(x,y,z))", "all x y.((Prosecutor(x) & InIndonesia(y)) -> PersonallyInvestigates(x,y))", "all x y z.((Prosecutor(x) & Corruption(y) & Indonesia(z)) -> PersonallyInvestigates(x,y,z))", "all x y.((Indonesia(x) & Prosecutor(y)) -> InvestigatesCorruption(y,x))", "all x y.((Prosecutor(x) & Indonesia(y)) -> InvestigatesCorruption(x,y))", "all x y z.((Prosecutor(x) & Corruption(y) & InIndonesia(z)) -> Investigates(x,y,z))", "all x y z.((IndonesianProsecutor(x) & Case(y) & Corruption(z)) -> PersonallyInvestigates(x,y,z))", "all x y z.((Indonesia(x) & Prosecutor(y) & Corruption(z)) -> PersonallyInvestigates(y,z))", "all x y.((Prosecutor(x) & InIndonesia(y)) -> InvestigatesCorruption(x,y))", "all x y z.((Prosecutor(x) & Corruption(y) & Indonesia(z)) -> Investigates(x,y,z))", "all x.((Prosecutor(x) & InIndonesia(x)) -> PersonallyInvestigatesCorruption(x))", "all x y.((Indonesia(x) & Prosecutor(y)) -> PersonallyInvestigates(y,Corruption))"]}
{"id": "folio_train_589", "nl": "When the police complete investigations, the prosecutor investigates in personally.", "fol": "all x.(CompletesInvestigation(x) -> ProsecutorInves(x))", "prediction": ["all x y.((Police(x) & Prosecutor(y)) -> CompletesInvestigations(x,y))", "all x y.((Police(x) & Prosecutor(y) & CompletesInvestigations(x)) -> InvestigatesInPersonal(y))", "all x y z.((Police(x) & Prosecutor(y) & Investigation(z) & Completes(x,z)) -> InvestigatesInPersonal(y,z))", "all x y.((Police(x) & Prosecutor(y) & CompletesInvestigations(x,y)) -> InvestigatesInPersonal(y,x))", "all x y z.((Police(x) & Investigation(y) & Prosecutor(z) & Completes(x,y)) -> InvestigatesInPersonal(z,y))", "all x y z.((Police(x) & Prosecutor(y) & Investigation(z) & Completes(x,z)) -> InvestigatesInPersonal(y))", "all x y z.((Police(x) & Prosecutor(y) & Investigation(z) & Completes(x,z)) -> InvestigatesIn(y,z))", "all x y.((Police(x) & Prosecutor(y)) -> CompletesInvestigations(x))", "all x y z.((Police(x) & Prosecutor(y) & Investigation(z) & Completes(x,y)) -> InvestigatesInPersonal(y,z))", "all x y z.((Police(x) & Investigation(y) & Prosecutor(z) & Completes(x,y)) -> InvestigatesIn(z,y))", "all x.((PoliceCompletesInvestigations(x) & Prosecutor(x)) -> InvestigatesInPersonal(x))", "all x y z.((Police(x) & Investigation(y) & Prosecutor(z)) -> Completes(x,y))", "all x y.((Police(x) & Prosecutor(y) & CompletesInvestigations(x)) -> InvestigatesInPersonally(y))", "all x y.((Police(x) & Prosecutor(y) & CompletesInvestigations(x,y)) -> InvestigatesInPersonal(y))", "all x y.((PoliceCompletesInvestigations(x) & Prosecutor(y)) -> InvestigatesInPersonal(y))", "all x y.((Police(x) & Prosecutor(y) & CompletesInquests(x,y)) -> InvestigatesInPersonal(y,x))"]}
{"id": "folio_train_590", "nl": "No watch that is battery-powered is automatic.", "fol": "all x.(IsBatteryPoweredWatch(x) -> -IsAutomaticWatch(x))", "prediction": ["all x.((Watch(x) & BatteryPowered(x)) -> Automatic(x))", "-exists x.(Watch(x) & BatteryPowered(x))", "-exists x.(Watch(x) & BatteryPowered(x) & Automatic(x))", "all x.((Watch(x) & BatteryPowered(x)) -> Automated(x))", "-all x.((Watch(x) & BatteryPowered(x)) -> Automatic(x))", "-exists x.((Watch(x) & BatteryPowered(x)) -> Automatic(x))", "-exists x.(Watch(x) & BatteryPowered(x) & -Automatic(x))", "all x.((Watch(x) & BatteryPowered(x)) -> Automatic(x))", "-((Watch(x) & BatteryPowered(x)) -> Automatic(x))", "all x.((Watch(x) & BatteryPowered(x)) -> Autonomous(x))", "all x.((Watch(x) & BatteryPowered(x)) -> Automatic(x))", "-exists x.(Watch(x) & BatteryPowered(x) & Automated(x))", "all x.((Watch(x) & BatteriesPowered(x)) -> Automatic(x))", "-exists x.(Watch(x) & BatteryPowered(x) & Autonomous(x))", "All x.((Watch(x) & BatteryPowered(x)) -> Automatic(x))", "-(BatteryPoweredWatch(x) & -Automatic(x))"]}
{"id": "folio_train_591", "nl": "All digital watches are battery-powered.", "fol": "all x.(IsDigitalWatch(x) -> IsBatteryPoweredWatch(x))", "prediction": ["all x.(DigitalWatch(x) -> BatteryPowered(x))", "all x y.((DigitalWatch(x) & BatteryPowered(x)) -> BatteryPowered(x))", "all x y.((DigitalWatch(x) & BatteryPowered(y)) -> BatteryPowered(x))", "all x y.((DigitalWatch(x) & BatteryPowered(x)) -> BatteryPowered(y))", "all x.(DigitalWatch(x) -> Batteried(x))", "all x.(DigitalWave(x) -> BatteryPowered(x))", "all x.(DigitalWatch(x) -> BatteriesPowered(x))", "all x.(DigitalWatch(x) -> BatteryPowered(x))", "all x.(DigitalWatch(x) -> (BatteryPowered(x) & BatteryPowered(x)))", "all x y.((DigitalWatch(x) & BatteryPowered(y)) -> BatteryPowered(x,y))", "all x.(DigitalWatch(x) -> (BatteryPowered(x) | BatteryPowered(x)))", "all x.(DigitalWitch(x) -> BatteryPowered(x))", "all x.(DigitalWatch(x) -> (BatteryPowered(x) & -BatteryPowered(x)))", "(all x.(DigitalWatch(x) -> BatteryPowered(x)))", "all x y.((DigitalWatch(x) & BatteryPowered(x)) -> Batteried(x))", "all x.(DigitalWatch(x) -> BatteriePowered(x))"]}
{"id": "folio_train_592", "nl": "Some mechanical watches are automatic.", "fol": "exists x.(IsMechanicalWatch(x) & IsAutomaticWatch(x))", "prediction": ["exists x.(MechanicalWatch(x) & Automatic(x))", "exists x.(MechanicalWatch(x) & Automated(x))", "exists x.(MechanicalWatch(x) & Autonomous(x))", "exists x.(MechanicalWave(x) & Automatic(x))", "exists x.(MachinedWatch(x) & Automatic(x))", "exists x y.(MechanicalWatch(x) & Automatic(y))", "exists x.(MachinematicWatch(x) & Automatic(x))", "exists x.(MechanicalWatch(x) & Automatic(x))", "exists x.(MechanicalWatch(x) & -Automatic(x))", "exists x.(MechanicalWay(x) & Automatic(x))", "exists x.(MechanicalWatch(x) & Automatic(x))", "exists x.(MethodicalWatch(x) & Automatic(x))", "exists x.(MechanicalWarning(x) & Automatic(x))", "exists x.(MechanicalWatch(x) & Manual(x))", "exists x.(Warmwatch(x) & Automatic(x))", "exists x.(MechanicalWitch(x) & Automatic(x))"]}
{"id": "folio_train_593", "nl": "All smart watches are digital.", "fol": "all x.(IsSmartWatch(x) -> IsDigitalWatch(x))", "prediction": ["all x.(SmartWatch(x) -> Digital(x))", "all x.(SmartWatch(x) -> Digital(x))", "all x y.((SmartWatch(x) & Digital(y)) -> Digital(x))", "all x y.((SmartWatch(x) & Smart(y)) -> Digital(x))", "all x y.((SmartWatch(x) & Digital(y)) -> Is(x,y))", "all x.(SmartWatch(x) -> Digital(x))", "(all x.(SmartWatch(x) -> Digital(x)))", "all x.exists y.(SmartWatch(x) & Digital(y) & DesignedFor(x,y))", "all x y.((SmartWatch(x) & Digital(y)) -> Has(x,y))", "all x.(SmartWave(x) -> Digital(x))", "all x y.((SmartWatch(x) & Digital(y)) -> (Digital(x) | Digital(y)))", "all x y.((SmartWatch(x) & Digital(y)) -> Digital(x,y))", "all x y.((SmartWatch(x) & Digital(y)) -> -Digital(x))", "all x y.((SmartWatch(x) & Digital(x)) -> Digital(y))", "all x.exists y.(SmartWatch(x) & Digital(y) & Digital(x))", "all x y.((SmartWatch(x) & Digital(y)) -> (Digital(x) & Digital(y)))"]}
{"id": "folio_train_594", "nl": "Moonwatch is not a digital watch or an automatic.", "fol": "((-IsDigitalWatch(Moonwatch) & -IsAutomaticWatch(Moonwatch)) | (IsDigitalWatch(Moonwatch) & IsAutomaticWatch(Moonwatch)))", "prediction": ["all x.(Moonwatch(x) -> (-DigitalWatch(x) | AutomaticWatch(x)))", "all x.(Moonwatch(x) -> (-DigitalWatch(x) & -Automatic(x)))", "all x.(Moonwatch(x) -> (-DigitalWatch(x) & -AutomaticWatch(x)))", "all x.(Moonwatch(x) -> (-DigitalWatch(x) | Automatic(x)))", "all x.(Mountwatch(x) -> (-DigitalWatch(x) | AutomaticWatch(x)))", "all x.(Moonwatch(x) -> (-DigitalWatch(x) | AutomaticWatch(x)))", "all x.(Moonwatch(x) -> (-DigitalWatch(x) | AutomaticWatch(x)))", "all x.(Mountwatch(x) -> (-DigitalWatch(x) & -AutomaticWatch(x)))", "all x.(Moonwatch(x) -> (-DigitalWatch(x) | AutomatedWatch(x)))", "all x.(Moonwatch(x) -> -DigitalWatch(x) & -Automatic(x))", "all x.(Mountwatch(x) -> (-DigitalWatch(x) & -Automatic(x)))", "all x.(Moonwatch(x) -> (-DigitalWave(x) | AutomaticWave(x)))", "all x.(Moonwatch(x) -> (-DigitalWatch(x) & -Automatic(x)))", "all x.(Moonwatch(x) -> (-DigitalWatch(x) & -Automatic(x)))", "all x.(Moonwatch(x) -> (-DigitalWatch(x) & -AutomaticWatch(x)))", "(-DigitalWatch(Moonwatch) & -Automatic(Moonwatch))"]}
{"id": "folio_train_595", "nl": "Moonwatch is a mechanical watch.", "fol": "IsMechanicalWatch(Moonwatch)", "prediction": ["all x.(Moonwatch(x) -> MechanicalWatch(x))", "all x.(Moonwatch(x) -> MechanicalWave(x))", "all x.(Mountwatch(x) -> MechanicalWatch(x))", "all x.(Moonwatch(x) -> MechanicalWatch(x))", "all x.(Moonwatch(x) -> MechanicalWatch(x))", "all x.(Moonwatch(x) -> MechanicalWizard(x))", "(Mountwatch(Moonwatch) & MechanicalWatch(Moonwatch))", "all x.(Mountwatch(x) -> MechanicalWave(x))", "all x y.((Moonwatch(x) & MechanicalWatch(y)) -> Has(x,y))", "all x.(Moonwatch(x) -> MechanicalWitch(x))", "all x.(Moonwatch(x) -> MechanicalWave(x))", "(Mountwatch(Moonwatch) -> MechanicalWatch(Moonwatch))", "All x.(Moonwatch(x) -> MechanicalWatch(x))", "all x.(Moonwatch(x) -> MechanicalWeek(x))", "all x y.((Moonwatch(x) & MechanicalWatch(y)) -> Watch(x,y))", "exists x.(Moonwatch(x) & MechanicalWatch(x))"]}
{"id": "folio_train_596", "nl": "Moonwatch is a smartwatch and a mechanical watch.", "fol": "(IsSmartWatch(Moonwatch) & IsMechanicalWatch(Moonwatch))", "prediction": ["all x.(Moonwatch(x) -> (Smartwatch(x) & MechanicalWatch(x)))", "all x.(Mountwatch(x) -> (Smartwatch(x) & MechanicalWatch(x)))", "all x.(Moonwatch(x) -> (Smartwatch(x) & MechanicalWatch(x)))", "all x.(Moonwatch(x) -> (Smartwatch(x) & MechanicalWatch(x)))", "all x.(Moonwatch(x) -> (Smartwatch(x) & MechanicalWatch(x)))", "all x.(Moonwatch(x) -> (SmartWatch(x) & MechanicalWatch(x)))", "all x y.((Moonwatch(x) & Smartwatch(y)) -> MechanicalWatch(x))", "(Smartwatch(Moonwatch) & MechanicalWatch(Moonwatch))", "all x.(Mountwatch(x) -> (Smartwatch(x) & MechanicalWatch(x)))", "exists x.(Moonwatch(x) & Smartwatch(x) & MechanicalWatch(x))", "all x.(Mountwatch(x) -> (Smartwatch(x) & MechanicalWatch(x)))", "all x.(Moonwatch(x) -> (Smartwatch(x) & MechanicalWizard(x)))", "all x.(Moonwatch(x) -> (Smartwatch(x) & MechanicalWave(x)))", "all x.(Mountainwatch(x) -> (Smartwatch(x) & MechanicalWatch(x)))", "all x.(Moonwatch(x) -> (Smartwatch(x) | MechanicalWatch(x)))", "(Smartwatch(Moonwatch) & MechanicalWatch(Moonwatch))"]}
{"id": "folio_train_597", "nl": "If Moonwatch is a smartwatch and a mechanical watch, then Moonwatch is not a mechanical watch.", "fol": "((IsSmartWatch(Moonwatch) & IsMechanicalWatch(Moonwatch)) -> -IsMechanicalWatch(Moonwatch))", "prediction": ["all x.((Smartwatch(x) & MechanicalWatch(x)) -> -MechanicalWatch(x))", "all x.((Moonwatch(x) & Smartwatch(x) & MechanicalWatch(x)) -> -MechanicalWatch(x))", "all x.((Mountwatch(x) & Smartwatch(x) & MechanicalWatch(x)) -> -MechanicalWatch(x))", "all x.(Smartwatch(x) & MechanicalWatch(x)) -> -MechanicalWatch(x))", "all x.((Smartwatch(x) & MechanicalWatch(x)) -> -MachineableWatch(x))", "all x.((Smartwatch(x) & MechanicalWatch(x)) -> -MechanicalWatch(x))", "all x.((Smartwatch(x) & MechanicalWatch(x)) -> -MachinedWatch(x))", "all x.((Mountwatch(x) & Smartwatch(x) & MechanicalWatch(x)) -> -Mountwatch(x))", "all x.(Smartwatch(x) & MechanicalWatch(x)) -> -MechanicalWatch(x))", "all x.((Mountainwatch(x) & Smartwatch(x) & MechanicalWatch(x)) -> -MechanicalWatch(x))", "all x.((Moonwatch(x) & Smartwatch(x) & MechanicalWatch(x)) -> -MachineableWatch(x))", "all x.((Moonwatch(x) & Smartwatch(x) & MechanicalWatch(x)) -> -MachinedWatch(x))", "all x.((Moonwatch(x) & Smartwatch(x) & MechanicalWatch(x)) -> -MechanicalWizard(x))", "all x.((Smartwatch(x) & MechanicalWatch(x)) -> -Mountwatch(x))", "all x.((Smartwatch(x) & MechanicalWizard(x)) -> -MechanicalWizard(x))", "all x.((Smartwatch(x) & MechanicalWave(x)) -> -MechanicalWave(x))"]}
{"id": "folio_train_598", "nl": "If Moonwatch is a mechanical or battery-powered watch, then Moonwatch is not a smartwatch.", "fol": "((IsMechanicalWatch(Moonwatch) | IsBatteryPoweredWatch(Moonwatch)) -> -IsSmartWatch(Moonwatch))", "prediction": ["all x.((Mountwatch(x) & (Mechanical(x) | BatteryPowered(x))) -> -Smartwatch(x))", "all x.((Moonwatch(x) & (Mechanical(x) | BatteryPowered(x))) -> -Smartwatch(x))", "all x.((Mountwatch(x) & (MechanicalWatch(x) | BatteryPoweredWatch(x))) -> -Smartwatch(x))", "all x.((Moonwatch(x) & (MechanicalWatch(x) | BatteryPoweredWatch(x))) -> -Smartwatch(x))", "all x.((Moonwatch(x) & (Mechanical(x) | BatteryPowered(x))) -> -Smartwatch(x))", "all x.((Mountainwatch(x) & (Mechanical(x) | BatteryPowered(x))) -> -Smartwatch(x))", "all x.((Mountwatch(x) & (MechanicalWizard(x) | BatteryPoweredWizard(x))) -> -Smartwatch(x))", "all x.((Monowatch(x) & (Mechanical(x) | BatteryPowered(x))) -> -Smartwatch(x))", "all x.((Moonwatch(x) & (MechanicalWizard(x) | BatteryPoweredWizard(x))) -> -Smartwatch(x))", "all x.((Mountainwatch(x) & (MechanicalWatch(x) | BatteryPoweredWatch(x))) -> -Smartwatch(x))", "all x.((Moonwatch(x) & (MechanicalWatch(x) | BatteryPoweredWatch(x))) -> -Smartwatch(x))", "all x.((MonoWatch(x) & (Mechanical(x) | BatteryPowered(x))) -> -Smartwatch(x))", "all x.((Monowatch(x) & (MechanicalWatch(x) | BatteryPoweredWatch(x))) -> -Smartwatch(x))", "all x.((Monotwatch(x) & (Mechanical(x) | BatteryPowered(x))) -> -Smartwatch(x))", "all x.((Mountwatch(x) & Mechanical(x) & BatteryPowered(x)) -> -Smartwatch(x))", "all x.((Mountwatch(x) & (Mechanical(x) | Batteries(x))) -> -Smartwatch(x))"]}
{"id": "folio_train_599", "nl": "If a person can distinguish the taste of different condiments, then he/she can also use different condiments to cook.", "fol": "(all x.((IsPerson(x) & CanDistinguishCondiments(x)) -> CanUseDifferentCondiments(x)) & exists x.(IsPerson(x) & -CanDistinguishCondiments(x) & CanUseDifferentCondiments(x)) & -all x.(IsPerson(x) & CanDistinguishCondiments(x)))", "prediction": ["all x.((Person(x) & DistinctTasteOfDifferentCondiments(x)) -> CanCookDifferentCondiments(x))", "all x.((Person(x) & DistinctsTasteOfDifferentCondiments(x)) -> CanCookDifferentCondiments(x))", "all x.((Person(x) & CanDistinctTasteOfDifferentCondiments(x)) -> CanUseDifferentCondimentsToCook(x))", "all x.((Person(x) & CanDistinctTasteOfDifferentCondiments(x)) -> CanUseDifferentCondiments(x))", "all x.((Person(x) & CanDistinctTasteOfDifferentCondiments(x)) -> CanCookDifferentCondiments(x))", "all x.((Person(x) & DistinctsTasteOfDifferentCondiments(x)) -> UsesDifferentCondimentsToCook(x))", "all x.((Person(x) & DistinctsTasteOfDifferentCondiments(x)) -> CooksDifferentCondiments(x))", "all x.((Person(x) & DistinctTasteOfDifferentCondiments(x)) -> CanUseDifferentCondimentsToCook(x))", "all x.((Person(x) & DistinctTasteOfDifferentCondiments(x)) -> UseDifferentCondimentsToCook(x))", "all x.((Person(x) & DistinctsTasteOfDifferentCondiments(x)) -> CanUseDifferentCondimentsToCook(x))", "all x.(DistinctTasteOfDifferentCondiments(x) -> CanCookDifferentCondiments(x))", "all x.((Person(x) & DistinctTasteOfDifferentCondiments(x)) -> CanUseDifferentCondiments(x))", "all x.((Person(x) & DistinctsTasteOfDifferentCondiments(x)) -> CanUseDifferentCondiments(x))", "all x y.((Person(x) & DistinctTasteOfDifferentCondiments(x,y)) -> CanCookDifferentCondiments(x))", "all x y.((Person(x) & DistinctTasteOfDifferentCondiments(x,y)) -> CanCookDifferentCondiments(x,y))", "all x y.((Person(x) & DistinctsTasteOfDifferentCondiments(x,y)) -> CanCookDifferentCondiments(x))"]}
{"id": "folio_train_600", "nl": "People who have the talent of cooking can distinguish the taste of different condiments.", "fol": "all x.((IsPerson(x) & HasCookingTalent(x)) -> CanDistinguishCondiments(x))", "prediction": ["all x.((Person(x) & TalentOfCooking(x)) -> CanDistinctTasteOfDifferentCondiments(x))", "all x.((Person(x) & TalentOfCooking(x)) -> DistinctTasteOfDifferentCondiments(x))", "all x.((Person(x) & TalentOfCooking(x)) -> CanDistinctTasteOfCondiments(x))", "all x.((Person(x) & TalentOfCooking(x)) -> CanDistinctTasteOfDifferentConditions(x))", "all x.((Person(x) & TalentOfCooking(x)) -> DistinctTasteOfCondiments(x))", "all x.((Person(x) & TalentOfCooking(x)) -> DistinctTasteOfDifferentConditions(x))", "all x.((Person(x) & TalentOfCooking(x)) -> DistinctsTasteOfDifferentCondiments(x))", "all x.((Person(x) & TalentOfCooking(x)) -> DittiesTasteOfDifferentCondiments(x))", "all x.((Person(x) & TalentOfCooking(x)) -> DistinctsTasteOfCondiments(x))", "all x.((Person(x) & TalentOfCooking(x)) -> CanDistinctTasteOfVariousCondiments(x))", "all x.((Person(x) & TalentOfCooking(x)) -> CanDistractTasteOfDifferentCondiments(x))", "all x.((Person(x) & TalentOfCooking(x)) -> DistinguishesTasteOfDifferentCondiments(x))", "all x.((Person(x) & TalentOfCooking(x)) -> DistinguishesTasteOfCondiments(x))", "all x.((Person(x) & TalentOfCooking(x)) -> DiffersTasteOfDifferentCondiments(x))", "all x y.((Person(x) & TalentOfCooking(x)) -> CanDistinctTasteOfDifferentCondiments(x,y))", "all x.((Person(x) & TalentOfCooking(x)) -> DistinctsTasteOfDifferentConditions(x))"]}
{"id": "folio_train_601", "nl": "Only people with the talent of cooking can make delicious meals.", "fol": "all x y.((CanMakeMeal(x,y) & IsDelicious(y) & IsPerson(x)) -> HasCookingTalent(x))", "prediction": ["all x.((Person(x) & TalentOfCooking(x)) -> CanMakeDeliciousMeals(x))", "all x.((Person(x) & TalentOfCooking(x)) -> MakesDeliciousMeals(x))", "all x.((Person(x) & TalentOfCooking(x)) -> CanMadeDeliciousMeals(x))", "all x y.((Person(x) & TalentOfCooking(x)) -> CanMakeDeliciousMeals(x,y))", "all x.((Person(x) & TalentOfCooking(x)) -> MadeDeliciousMeals(x))", "all x.((Person(x) & TalentOfCooking(x)) -> MakeDeliciousMeals(x))", "all x.((Person(x) & CookingTalent(x)) -> CanMakeDeliciousMeals(x))", "all x.((Person(x) & Talent(x) & Cooking(x)) -> CanMakeDeliciousMeals(x))", "all x y.((Person(x) & TalentOfCooking(x) & MakesDeliciousMeals(y)) -> CanMakeMeals(x,y))", "all x y.((Person(x) & TalentOfCooking(x) & MakesDeliciousMeals(y)) -> CanMake(x,y))", "all x.((Person(x) & TalentOfCooking(x)) -> DeliciousMeals(x))", "all x.((Person(x) & CookingTalent(x)) -> MakesDeliciousMeals(x))", "all x.((Person(x) & CanCook(x)) -> CanMakeDeliciousMeals(x))", "all x y.((Person(x) & TalentOfCooking(x)) -> MakesDeliciousMeals(x,y))", "all x.((Person(x) & TalentInCooking(x)) -> CanMakeDeliciousMeals(x))", "all x y.((Person(x) & TalentOfCooking(x)) -> CanMakeDeliciousMeals(y))"]}
{"id": "folio_train_602", "nl": "If the meal is popular at the party, then it is delicious.", "fol": "all x y.((CanMakeMeal(x,y) & IsPerson(x) & IsPopularAtParty(y)) -> IsDelicious(y))", "prediction": ["all x.((Meal(x) & PopularAtParty(x)) -> Delicious(x))", "all x y.((Meal(x) & PopularAtParty(x,y)) -> Delicious(x))", "all x y.((Meal(x) & PopularAtParty(x) & Party(y)) -> Delicious(x))", "all x y.((Meal(x) & PopularAtParty(x)) -> Delicious(x))", "all x y.((Meal(x) & Party(y) & PopularAt(x,y)) -> Delicious(x))", "all x y.((Meal(x) & PopularAtParty(x) & PopularAtParty(y)) -> Delicious(x))", "all x y z.((Meal(x) & PopularAtParty(x) & Party(y) & PopularAt(x,y)) -> Delicious(x))", "all x y z.((Meal(x) & PopularAtParty(x,y) & Party(z) & PopularAtParty(x,z)) -> Delicious(x))", "all x.((Meal(x) & PopularAtParty(x)) -> Delicious(x))", "all x y z.((Meal(x) & PopularAtParty(x) & Party(y) & PopularAtParty(z)) -> Delicious(x))", "all x y.((Meal(x) & PopularAtParty(x) & AtParty(y)) -> Delicious(x))", "all x y z.((Meal(x) & PopularAtParty(x,y) & Party(z) & PopularAt(x,z)) -> Delicious(x))", "all x y.((Meal(x) & PopularAtParty(x) & PopularAtParty(x)) -> Delicious(x))", "all x y.((Meal(x) & PopularAtParty(x,y) & Party(y)) -> Delicious(x))", "all x.((Meal(x) & PopularAtParty(x) & Delicious(x)) -> PopularAtParty(x))", "all x y.((Meal(x) & PopularAtParty(x) & PopularAtParty(x,y)) -> Delicious(x))"]}
{"id": "folio_train_603", "nl": "John can make meals which are popular at the party.", "fol": "exists x.(IsPerson(John) & CanMakeMeal(John,x) & IsPopularAtParty(x) & IsPerson(Peter) & -CanUseDifferentCondiments(Peter))", "prediction": ["all x y.((John(x) & Party(y)) -> CanMakeMeals(x,y))", "all x y.((John(x) & Party(y)) -> (MakesMeals(x,y) & PopularAt(x,y)))", "all x.(John(x) -> (MakesMeals(x) & PopularAtParty(x)))", "all x y.((John(x) & Party(y)) -> MakesMeals(x,y))", "all x y z.((John(x) & Meal(y) & Party(z)) -> CanMake(x,y,z))", "all x.((John(x) & MakesMeals(x)) -> PopularAtParty(x))", "all x y z.((John(x) & Meal(y) & Party(z)) -> (Makes(x,y) & PopularAt(y,z)))", "all x y z.((John(x) & Meal(y) & Party(z)) -> (Making(x,y) & PopularAt(y,z)))", "all x y z.((John(x) & Meal(y) & Party(z)) -> CanMake(x,y))", "all x y.((John(x) & Party(y)) -> CanMeal(x,y))", "all x y z.((John(x) & Meal(y) & Party(z)) -> Makes(x,y,z))", "all x y z.((John(x) & Meal(y) & Party(z)) -> (Makes(x,y,z) & PopularAt(y,z)))", "all x.((John(x) & MakesMeals(x) & PopularAtParty(x)) -> CanMakeMeals(x))", "all x y z.((John(x) & Meal(y) & Party(z)) -> (Makes(x,y) & PopularAt(x,z)))", "all x y.((John(x) & Party(y)) -> CanMakeMeal(x,y))", "all x y.((John(x) & Party(y)) -> (MakesMeals(x,y) & PopularAt(y,x)))"]}
{"id": "folio_train_604", "nl": "John cannot use different condiments to cook.", "fol": "-CanUseDifferentCondiments(John)", "prediction": ["all x.((John(x) & UsesDifferentCondiments(x)) -> -CooksWithDifferentCondiments(x))", "all x.((John(x) & UsesDifferentCondiments(x)) -> -CooksDifferentCondiments(x))", "all x.((John(x) & UsesDifferentCondiments(x)) -> -CanCookWithDifferentCondiments(x))", "all x.((John(x) & UsesDifferentCondiments(x)) -> -CanCook(x))", "all x.((John(x) & UsesDifferentCondiments(x)) -> -Cooks(x))", "all x y.((John(x) & Condiment(y)) -> -CanCook(x,y))", "all x.(John(x) -> -UsesDifferentCondimentsToCook(x))", "all x.(John(x) -> -UsesDifferentCondiments(x))", "all x.((John(x) & UsesDifferentCondiments(x)) -> -CanCookDifferentCondiments(x))", "all x.(John(x) -> -(UsesDifferentCondiments(x) & Cooks(x)))", "all x.((John(x) & UsesDifferentCondiments(x)) -> CannotCook(x))", "all x y.((John(x) & Condiment(y)) -> -CanUse(x,y))", "all x y.((John(x) & Condiment(y)) -> -Uses(x,y))", "all x.((John(x) & UsesDifferentCondiments(x)) -> Cooks(x))", "all x.((John(x) & UsesDifferentCondiments(x)) -> -CooksWith(x,y))", "all x.(John(x) -> -CanUseDifferentCondimentsToCook(x))"]}
{"id": "folio_train_605", "nl": "Effective monetary policy is possible with successful inflation control and a strong national currency.", "fol": "all x.(EffectiveMonetaryPolicy(x) -> (SuccessfulInflationControl(x) & StrongNationalCurrency(x)))", "prediction": ["all x.((InflationControl(x) & StrongNationalCurrency(x)) -> EffectiveMonetaryPolicy(x))", "all x.((InflationControl(x) & StrongNationalCurrency(x)) -> EffectiveMonetaryPolicy(x))", "all x.((SuccessfulInflationControl(x) & StrongNationalCurrency(x)) -> EffectiveMonetaryPolicy(x))", "all x.((MonetaryPolicy(x) & SuccessfulInflationControl(x) & StrongNationalCurrency(x)) -> Effective(x))", "all x.((EffectiveMonetaryPolicy(x) & SuccessfulInflationControl(x) & StrongNationalCurrency(x)) -> Possible(x))", "all x.((MonetaryPolicy(x) & SuccessfulInflationControl(x) & StrongNationalCurrency(x)) -> Effective(x))", "all x.((MortgagePolicy(x) & SuccessfulInflationControl(x) & StrongNationalCurrency(x)) -> Effective(x))", "all x y.((MonetaryPolicy(x) & InflationControl(y) & StrongNationalCurrency(x)) -> Effective(x))", "all x.(((InflationControl(x) & StrongNationalCurrency(x)) -> EffectiveMonetaryPolicy(x))", "all x y.((MonetaryPolicy(x) & SuccessfulInflationControl(y) & StrongNationalCurrency(x)) -> Effective(x))", "all x.((SuccessfulInflationControl(x) & StrongNationalCurrency(x)) -> EffectiveMonetaryPolicy(x))", "all x y.((EfficientMonetaryPolicy(x) & SuccessfulInflationControl(y) & StrongNationalCurrency(x)) -> Possible(x))", "all x.((InflationControl(x) & StrengtheningNationalCurrency(x)) -> EffectiveMonetaryPolicy(x))", "all x y.((MonetaryPolicy(x) & InflationControl(y) & StrongNationalCurrency(x)) -> Effective(x,y))", "all x.((InflationControl(x) & StrongNationalCurrency(x)) -> EffectiveMonetaryPolicy(x))", "all x.((InflationControl(x) & StrongNationalCurrency(x)) -> EffectiveMortgagePolicy(x))"]}
{"id": "folio_train_606", "nl": "A country cannot simultaneously regulate the exchange rate and successfully control inflation.", "fol": "-all x.(SuccessfulInflationControl(x) & RegulateExchangeRate(x))", "prediction": ["all x.(Country(x) -> (-RegulatesExchangeRate(x) & ControlsInflation(x)))", "all x.((Country(x) & -RegulatesExchangeRate(x) & ControlsInflation(x)) -> -(RegulatesExchangeRate(x) & ControlsInflation(x)))", "all x.((Country(x) & -(RegulatesExchangeRate(x) & ControlsInflation(x))) -> -(RegulatesExchangeRate(x) & ControlsInflation(x)))", "all x.((Country(x) & -RegulatesExchangeRate(x) & SuccessfullyControlsInflation(x)) -> -RegulatesExchangeRate(x))", "all x.((Country(x) & -(RegulatesExchangeRate(x) & ControlsInflation(x))) -> -RegulatesExchangeRate(x) & ControlsInflation(x)))", "all x.((Country(x) & -RegulatesExchangeRate(x) & ControlsInflation(x)) -> -SuccessfullyControlsInflation(x))", "all x.((Country(x) & -RegulatesExchangeRate(x) & ControlsInflation(x)) -> -RegulatesExchangeRate(x))", "all x.((Country(x) & RegulatesExchangeRate(x) & ControlsInflation(x)) -> -(RegulatesExchangeRate(x) & ControlsInflation(x)))", "all x.((Country(x) & -RegulatesExchangeRate(x) & SuccessfulInflationControl(x)) -> -RegulatesExchangeRate(x))", "all x.((Country(x) & -(RegulatesExchangeRate(x) & SuccessfulInflation(x))) -> -RegulatesExchangeRate(x) & ControlsInflation(x)))", "all x.(Country(x) -> (-RegulatesExchangeRate(x) & SuccessfullyControlsInflation(x)))", "all x.((Country(x) & -RegulatesExchangeRate(x) & ControlsInflation(x)) -> -(RegulatesExchangeRate(x) & SuccessfullyControlsInflation(x)))", "all x.((Country(x) & -RegulatesExchangeRate(x) & ControlsInflation(x)) -> -RegulatesExchangeRate(x) & ControlsInflation(x))", "all x.((Country(x) & -(RegulatesExchangeRate(x) & ControlsInflation(x))) -> -(RegulatesExchangeRate(x) & SuccessfullyControlsInflation(x)))", "all x.((Country(x) & -RegulatesExchangeRate(x) & ControlsInflation(x)) -> -RegulatesExchangeRateAndControlsInflation(x))", "all x.((Country(x) & -RegulatesExchangeRate(x) & SuccessfullyControlsInflation(x)) -> -RegulatesExchangeRateAndControlsInflation(x))"]}
{"id": "folio_train_607", "nl": "The introduction of an embargo on foreign trade goods in a country leads to a sharp decrease in exports.", "fol": "all x.(EmbargoOnForeignTrade(x) -> DecreaseInExports(x))", "prediction": ["all x y z.((Embargo(x) & ForeignTradeGoods(y) & Country(z) & IntroducedIn(x,y,z)) -> SharpDecreaseInExports(x))", "all x y z.((Embargo(x) & ForeignTradeGoods(y) & Country(z) & IntroducedIn(x,y,z)) -> SharpDecreaseInExports(x,y,z))", "all x y z.((Embargo(x) & ForeignTradeGoods(y) & Country(z) & IntroducedIn(x,y,z)) -> SharpDecreaseInExports(x,y,z))", "all x y z.((Embargo(x) & ForeignTradeGoods(y) & Country(z) & IntroducedIn(x,y,z)) -> SharpDecreaseInExports(x))", "all x y z.((Embargo(x) & ForeignTradeGoods(y) & Country(z) & IntroducedIn(x,y,z)) -> SharpDecreaseInExports(x,y))", "all x y z.((Embargo(x) & ForeignTradeGoods(y) & Country(z) & IntroducedIn(x,y,z)) -> SharpDecreaseInExports(x,y))", "all x y z.((Embargo(x) & ForeignTradeGoods(y) & Country(z) & IntroducedIn(x,y)) -> SharpDecreaseInExports(x,z))", "all x y z.((Embargo(x) & ForeignTradeGoods(y) & Country(z) & IntroducedIn(x,y)) -> SharpDecreaseInExports(x,z))", "all x y z.((Embargo(x) & ForeignTradeGood(y) & Country(z) & IntroducedIn(x,y,z)) -> SharpDecreaseInExports(x,y,z))", "all x y.((Embargo(x) & Country(y) & IntroducedOnForeignTradeGoods(x,y)) -> SharpDecreaseInExports(x,y))", "all x y z.((Embargo(x) & ForeignTradeGood(y) & Country(z) & IntroducedIn(x,y,z)) -> SharpDecreaseInExports(x,y,z))", "all x y z.((Embargo(x) & ForeignTradeGood(y) & Country(z) & IntroducedIn(x,y,z)) -> SharpDecreaseInExports(x))", "all x y.((Embargo(x) & Country(y) & IntroducedIn(x,y)) -> SharpDecreaseInExports(x,y))", "all x y z.((Embargo(x) & ForeignTradeGoods(y) & Country(z) & IntroducedIn(x,y,z)) -> SharpDecreaseInExports(y,z))", "all x y.((Embargo(x) & Country(y) & IntroducedOnFrenchTradeGoods(x,y)) -> SharpDecreaseInExports(x,y))", "all x y z.((Embargo(x) & ForeignTradeGood(y) & Country(z) & IntroducedIn(x,y,z)) -> SharpDecreaseInExports(x))"]}
{"id": "folio_train_608", "nl": "If exports fall sharply, the national currency cannot be in this country.", "fol": "all x.(DecreaseInExports(x) -> -StrongNationalCurrency(x))", "prediction": ["all x.((ExportsFallSharply(x) & NationalCurrency(x)) -> -InCountry(x))", "all x.((ExportsFailSharply(x) & NationalCurrency(x)) -> -InCountry(x))", "all x.((ExportsFallSharply(x) & -NationalCurrency(x)) -> -InCountry(x))", "all x.((ExportsFallSharply(x) & NationalCurrency(x)) -> -CanBeInThisCountry(x))", "all x.((ExportsFallSharply(x) & NationalCurrency(x)) -> -CanBeInCountry(x))", "all x.(ExportsFallSharply(x) -> -NationalCurrencyInCountry(x))", "all x.((ExportsFall(x) & SharpFall(x)) -> -NationalCurrencyInCountry(x))", "all x.((ExportsFailSharply(x) & NationalCurrency(x)) -> -CanBeInThisCountry(x))", "all x.((ExportsFailSharply(x) & -NationalCurrency(x)) -> -InCountry(x))", "all x.(ExportsFailSharply(x) -> -NationalCurrencyInCountry(x))", "all x.((ExportsFailSharply(x) & NationalCurrency(x)) -> -CanBeInCountry(x))", "all x y.((Exports(x) & Exports(y) & SharpFall(x)) -> -NationalCurrency(x,y))", "all x y.((ExportsFallSharply(x) & Country(y)) -> -NationalCurrency(x,y))", "all x.((ExportsFallSharply(x) & NationalCurrency(x)) -> -CanBeIn(x,y))", "all x y.((Exports(x) & Exports(y) & SharpFall(x)) -> -NationalCurrencyIn(x,y))", "all x.((ExportsFallSharply(x) & NationalCurrency(x)) -> -CanBeIn(x))"]}
{"id": "folio_train_609", "nl": "Regulation of the exchange rate is required to have a strong national currency. ", "fol": "all x.(RegulateExchangeRate(x) -> StrongNationalCurrency(x))", "prediction": ["all x.((RegulationOfExchangeRate(x) & StrongNationalCurrency(x)) -> Requires(x))", "all x.((RegulationOfExchangeRate(x) & StrongNationalCurrency(x)) -> RequiresStrongNationalCurrency(x))", "all x.((RegulationOfExchangeRate(x) & StrongNationalCurrency(x)) -> Requires(x,y))", "all x y.((RegulationOfExchangeRate(x) & StrongNationalCurrency(y)) -> Requires(x,y))", "all x.((RegulationOfExchangeRate(x) & StrongNationalCurrency(x)) -> RequiresRequirement(x))", "all x.((RegulationOfExchangeRate(x) & StrongNationalCurrency(x)) -> StrongNationalCurrency(x))", "all x.((ExchangeRate(x) & StrongNationalCurrency(x)) -> RequiresRegulation(x))", "all x.((RegulationOfExchangeRate(x) & StrongNationalCurrency(x)) -> RequiredToHaveStrongNationalCurrency(x))", "all x.((RegulationOfExchangeRate(x) & StrongNationalCurrency(x)) -> RequiresStandardCurrency(x))", "all x.((RegulationOfExchangeRate(x) & StrongNationalCurrency(x)) -> RequiresRegulationOfExchangeRate(x))", "all x.((RegulationOfExchangeRate(x) & StrongNationalCurrency(x)) -> Requires(x,ExchangeRate))", "all x y.((ExchangeRate(x) & NationalCurrency(y)) -> RequiresRegulation(x,y))", "all x.((RegulationOfExchangeRate(x) & StrongNationalCurrency(x)) -> RequiredForCurrency(x))", "all x.((RegulationOfExchangeRate(x) & StrongNationalCurrency(x)) -> Requires(x,ExchangeRate,ExchangeRate))", "all x.((RegulationOfExchangeRate(x) & StrongNationalCurrency(x)) -> Required(x))", "all x.((RegulationOfExchangeRate(x) & StrongNationalCurrency(x)) -> Requires(x,exchangeRate))"]}
{"id": "folio_train_610", "nl": "There is an embargo on Russian foreign trade goods.", "fol": "EmbargoOnForeignTrade(Russia)", "prediction": ["exists x.(RussianFrenchTradeGood(x) & Embargo(x))", "exists x.(RussianFreshTradeGood(x) & Embargo(x))", "exists x.(RussianFreshTradeGoods(x) & Embargo(x))", "all x.(RussianFreshTradeGoods(x) -> Embargo(x))", "exists x.(RussianFrenchTradeGoods(x) & Embargo(x))", "exists x.(RussianForeignTradeGood(x) & Embargo(x))", "exists x.(RussishFreshTradeGoods(x) & Embargo(x))", "exists x.(RussianForeignTradeGoods(x) & Embargo(x))", "exists x.(RussianFrenchTradeGoodsEmbargo(x))", "exists x.(RussishForeignTradeGood(x) & Embargo(x))", "exists x.(RussianTradeGood(x) & Embargo(x))", "exists x.(RussianForeignTradeGoodsEmbargo(x))", "exists x.(RussianFreshTradeGoodsEmbargo(x))", "exists x.(RussianFreshTradeGood(x) & EmbargoOn(x,Russia))", "exists x.(RussianForeignTradeGood(x) & EmbargoOn(x,Russia))", "exists x.(RussianFrenchTradeGood(x) & EmbargoOn(x,Russia))"]}
{"id": "folio_train_611", "nl": "In Russia, an effective monetary policy is possible.", "fol": "exists x.EffectiveMonetaryPolicy(Russia)", "prediction": ["all x.((Russland(x) & EffectiveMonetaryPolicy(x)) -> Possible(x))", "all x.((Russian(x) & EffectiveMonetaryPolicy(x)) -> Possible(x))", "all x.((Russland(x) & EffectiveMonetaryPolicy(x)) -> Possible(x))", "all x.((Russland(x) & EffectiveMonetaryPolicy(x)) -> Possible(x))", "all x.((RussianMonetaryPolicy(x) & Effective(x)) -> Possible(x))", "all x.((Rossophone(x) & EffectiveMonetaryPolicy(x)) -> Possible(x))", "all x y.((Russland(x) & EffectiveMonetaryPolicy(y)) -> Possible(x,y))", "all x.((RussianMonetaryPolicy(x) & Effective(x)) -> Possible(x))", "all x.((Ross(x) & EffectiveMonetaryPolicy(x)) -> Possible(x))", "all x.((Rossia(x) & EffectiveMonetaryPolicy(x)) -> Possible(x))", "all x.(Russland(x) -> EffectiveMonetaryPolicy(x))", "all x.((Russia(x) & EffectiveMonetaryPolicy(x)) -> Possible(x))", "all x.((Russian(x) & EffectiveMonetaryPolicy(x)) -> Possible(x))", "all x.((Russland(x) & EffectiveMonetaryPolitics(x)) -> Possible(x))", "all x.((RussianPolicy(x) & EffectiveMonetaryPolicy(x)) -> Possible(x))", "all x y.((Russland(x) & EffectiveMonetaryPolicy(y)) -> Possible(x))"]}
{"id": "folio_train_612", "nl": "Video Gag is a French television series that airs weekly.", "fol": "all x.((VideoGagSeries(x) -> IsFrenchTelevisionSeries(x)) & AirsWeekly(x))", "prediction": ["all x.(VideoGag(x) -> (FrenchTelevisionSeries(x) & AirsWeekly(x)))", "All x.(VideoGag(x) -> (FrenchTelevisionSeries(x) & AirsWeekly(x)))", "(FrenchTelevisionSeries(VideoGag) & AirsWeekly(VideoGag))", "all x.(VideoGag(x) -> (FrenchTelevisionSeries(x) & AirsWeekly(x)))", "all x.(VideoGag(x) -> (FrenchTVSeries(x) & AirsWeekly(x)))", "all x.((FrenchTelevisionSeries(x) & AirsWeekly(x)) -> VideoGag(x))", "all x.(VideoGag(x) -> (FrenchSeries(x) & AirsWeekly(x)))", "all x.(VideoGag(x) -> (FrenchTelevisionSerial(x) & AirsWeekly(x)))", "All x.(VideoGag(x) -> (FrenchTelevisionSeries(x) & AirsWeekly(x)))", "All x.(VideoGag(x) -> (FrenchTVSeries(x) & AirsWeekly(x)))", "all x.(VisualGag(x) -> (FrenchTelevisionSeries(x) & AirsWeekly(x)))", "all x y.((FrenchTelevisionSeries(x) & VideoGag(y)) -> AirsWeekly(x,y))", "all x.(VideoGag(x) -> (FrenchTelevisionShowcase(x) & AirsWeekly(x)))", "all x y.((VideoGag(x) & FrenchTelevisionSeries(y)) -> AirsWeekly(x,y))", "(FrenchTelevisionSeries(VideoGag) & AirsWeekly(videogag))", "all x y.((FrenchTelevisionSeries(x) & VideoGag(y)) -> AirsWeekly(y))"]}
{"id": "folio_train_613", "nl": "Video Gag airs on the French broadcast channel TF1. ", "fol": "all x.(VideoGagSeries(x) -> AirsOnChannelTF1(x))", "prediction": ["all x.(VideoGag(x) -> AirsOnFrenchBroadcastChannel(x,TF1))", "all x y.((VideoGag(x) & FrenchBroadcastChannel(y)) -> AirsOn(x,y))", "all x y z.((VideoGag(x) & FrenchBroadcastChannel(y) & TF1(z)) -> AirsOn(x,y,z))", "all x y.((VideoGag(x) & FrenchBroadcastChannel(y) & TF1(y)) -> AirsOn(x,y))", "all x.(VideoGag(x) -> AirsOnFrenchBroadcastChannel(x))", "all x y z.((VideoGag(x) & FrenchBroadcastChannel(y) & Channel(z)) -> AirsOn(x,y,z))", "all x y.((VideoGag(x) & FrenchBroadcastChannel(y) & TF1(z)) -> AirsOn(x,y,z))", "all x y z.((VideoGag(x) & FrenchBroadcastChannel(y) & FrenchBroadcastChannel(z)) -> AirsOn(x,y,z))", "All x.(VideoGag(x) -> AirsOnFrenchBroadcastChannel(x,TF1))", "all x y.((VideoGag(x) & FrenchBroadcastChannel(y) & TF1)) -> AirsOn(x,y))", "all x y.((VideoGag(x) & FrenchBroadcastChannel(y) & TF1(x)) -> AirsOn(x,y))", "all x y.((VideoGag(x) & FrenchBroadcastChannel(y,x)) -> AirsOn(x,y))", "All x y.((VideoGag(x) & FrenchBroadcastChannel(y)) -> AirsOn(x,y))", "(AirsOnFrenchBroadcastChannel(VideoGag) & FrenchBroadcastChannel(VideoGag))", "all x y.((VideoGag(x) & FrenchBroadcastChannel(y) & TF1) -> AirsOn(x,y))", "all x.(VideoGag(x) -> AirsOnFrenchBroadcastChannel(x,TF1))"]}
{"id": "folio_train_614", "nl": "If viewers send in funny videos to the French broadcast channel, then Video Gag airs them on television.", "fol": "all x.(ReceivedFunnyVideos(x) -> AirsWeekly(x))", "prediction": ["all x y.((Viewer(x) & SendsFunnyVideos(x,y) & FrenchBroadcastChannel(y)) -> AirsOnTelevision(x,y))", "all x y.((Viewer(x) & SendsInFunnyVideos(x,y) & FrenchBroadcastChannel(y)) -> AirsOnTelevision(x,y))", "all x.((Viewer(x) & SendsFunnyVideos(x) & FrenchBroadcastChannel(x)) -> AirsOnTelevision(x))", "all x.((Viewer(x) & SendsFunnyVideosToFrenchBroadcastChannel(x)) -> AirsOnTelevision(x))", "all x y.((Viewer(x) & SendsFunnyVideos(x) & FrenchBroadcastChannel(y)) -> AirsOnTelevision(x,y))", "all x y.((Viewer(x) & SendsFunnyVideosToFrenchBroadcastChannel(x,y)) -> AirsOnTelevision(x,y))", "all x y.((Viewer(x) & SendsInFunnyVideos(x) & FrenchBroadcastChannel(y)) -> AirsOnTelevision(x,y))", "all x.((Viewer(x) & SendsInFunnyVideos(x) & FrenchBroadcastChannel(x)) -> AirsOnTelevision(x))", "all x y.((Viewer(x) & SendsFunnyVideos(x,y)) -> AirsOnTelevision(x,y))", "all x y.((Viewer(x) & SendsInFunnyVideos(x,y)) -> AirsOnTelevision(x,y))", "all x y.((Viewer(x) & SendsFunnyVideos(x,y) & FrenchBroadcastChannel(y)) -> AirsOnTV(x,y))", "all x.((Viewer(x) & SendsFunnyVideos(x) & FrenchBroadcastChannel(x)) -> AirsOnTV(x))", "all x y.((Viewer(x) & SendsInFunnyVideos(x,y) & FrenchBroadcastChannel(y)) -> AirsOnTV(x,y))", "all x y.((Viewer(x) & SendInFunnyVideos(x,y) & FrenchBroadcastChannel(y)) -> AirsOnTelevision(x,y))", "all x y.((Viewer(x) & SendsFunnyVideos(x) & FrenchBroadcastChannel(y)) -> AirsOnTV(x,y))", "all x y z.((Viewer(x) & FunnyVideo(y) & FrenchBroadcastChannel(z) & SendsTo(x,y,z)) -> AirsOnTelevision(x))"]}
{"id": "folio_train_615", "nl": "All videos aired on Video Gag are in French.", "fol": "all x.((VideoGagSeries(x) -> AirsWeekly(x)) & IsInFrench(x))", "prediction": ["all x.((Video(x) & AiredOnVideoGag(x)) -> French(x))", "all x.((Video(x) & AimedOnVideoGag(x)) -> French(x))", "all x.((Video(x) & AimedOnVideoGag(x)) -> InFrench(x))", "all x.((Video(x) & AiredOnVideoGag(x)) -> InFrench(x))", "all x.(Video(x) -> AiredOnVideoGag(x))", "all x.(Video(x) -> AimedOnVideoGag(x))", "all x.((Video(x) & airedOnVideoGag(x)) -> InFrench(x))", "all x.((Video(x) & airedOnVideoGag(x)) -> French(x))", "all x.(Video(x) -> (AiredOnVideoGag(x) & InFrench(x)))", "all x y.((Video(x) & VideoGag(y)) -> InFrench(x))", "all x.((Video(x) & AvidOnVideoGag(x)) -> InFrench(x))", "all x.((Video(x) &airedOnVideoGag(x)) -> InFrench(x))", "all x y.((Video(x) & VideoGag(y)) -> French(x))", "all x.((Video(x) & AvidOnVideoGag(x)) -> French(x))", "all x.((Video(x) &airedOnVideoGag(x)) -> French(x))", "all x.(Video(x) -> InFrench(x))"]}
{"id": "folio_train_616", "nl": "Viewers send in funny videos to the French broadcast channel that are in French.", "fol": "all x.((ReceivedFunnyVideos(x) & IsInFrench(x)) -> SentToFrenchBroadcastChannel(x))", "prediction": ["all x y.((Viewer(x) & FrenchBroadcastChannel(y)) -> SendsFunnyVideos(x,y))", "all x y.((Viewer(x) & FrenchBroadcastChannel(y)) -> SendsInFunnyVideos(x,y))", "all x y z.((Viewer(x) & FunnyVideo(y) & FrenchBroadcastChannel(z)) -> SendsIn(x,y,z))", "all x y.((Viewer(x) & FrenchBroadcastChannel(y) & FunnyVideo(x,y)) -> SendsIn(x,y))", "all x y z.((Viewer(x) & FunnyVideo(y) & FrenchBroadcastChannel(z) & SendsTo(x,y,z)) -> InFrench(y,z))", "all x y z.((Viewer(x) & FrenchBroadcastChannel(y) & FunnyVideo(z) & InFrench(z)) -> SendsIn(x,y,z))", "all x y z.((Viewer(x) & FunnyVideo(y) & FrenchBroadcastChannel(z)) -> SendsTo(x,y,z))", "all x y z.((Viewer(x) & FrenchBroadcastChannel(y) & FunnyVideo(z)) -> SendsIn(x,y,z))", "all x y z.((Viewer(x) & FunnyVideo(y) & FrenchBroadcastChannel(z)) -> Sends(x,y,z))", "all x y z.((Viewer(x) & FunnyVideo(y) & FrenchBroadcastChannel(z) & Sends(x,y,z)) -> InFrench(y,z))", "all x y z.((Viewer(x) & FunnyVideo(y) & FrenchBroadcastChannel(z) & SendsTo(x,y,z)) -> InFrench(x))", "all x y z.((Viewer(x) & FunnyVideo(y) & FrenchBroadcastChannel(z) & SendsIn(x,y,z)) -> InFrench(y,z))", "all x y z.((Viewer(x) & FunnyVideo(y) & FrenchBroadcastChannel(z) & SendsIn(x,y,z)) -> InFrench(x))", "all x y z.((Viewer(x) & FunnyVideo(y) & FrenchBroadcastChannel(z) & Sends(x,y,z)) -> InFrench(x))", "all x y.((Viewer(x) & FrenchBroadcastChannel(y) & SendsFunnyVideos(x,y)) -> Funny(x))", "all x y.((Viewer(x) & FrenchBroadcastChannel(y) & SendsInFunnyVideos(x,y)) -> Funny(x))"]}
{"id": "folio_train_617", "nl": "Viewers send in funny videos to the French broadcast channel that are in English.", "fol": "exists x.(ReceivedFunnyVideos(x) & SentTo(FrenchBroadcastChannel,x) & English(x))", "prediction": ["all x y.((Viewer(x) & FrenchBroadcastChannel(y)) -> SendsFunnyVideos(x,y))", "all x y.((Viewer(x) & FrenchBroadcastChannel(y)) -> SendsInFunnyVideos(x,y))", "all x y z.((Viewer(x) & FrenchBroadcastChannel(y) & FunnyVideo(z)) -> SendsIn(x,y,z))", "all x y z.((Viewer(x) & FunnyVideo(y) & FrenchBroadcastChannel(z)) -> SendsIn(x,y,z))", "all x y z.((Viewer(x) & FrenchBroadcastChannel(y) & FunnyVideo(z)) -> SendsTo(x,y,z))", "all x y.((Viewer(x) & FrenchBroadcastChannel(y)) -> SendsFunnyVideosInEnglish(x,y))", "all x y z.((Viewer(x) & FunnyVideo(y) & FrenchBroadcastChannel(z)) -> SendsTo(x,y,z))", "all x y z.((Viewer(x) & FunnyVideo(y) & FrenchBroadcastChannel(z) & SendsTo(x,y,z)) -> InEnglish(y,z))", "all x y z.((Viewer(x) & FunnyVideo(y) & FrenchBroadcastChannel(z) & Sends(x,y,z)) -> InEnglish(y,z))", "all x y.((Viewer(x) & FrenchBroadcastChannel(y) & SendsFunnyVideos(x,y)) -> InEnglish(x))", "all x y z.((Viewer(x) & FrenchBroadcastChannel(y) & FunnyVideo(z) & InEnglish(z)) -> SendsIn(x,y,z))", "all x y.((Viewer(x) & FrenchBroadcastChannel(y)) -> SendsFunnyVideo(x,y))", "all x y.((Viewer(x) & FrenchBroadcastChannel(y) & FunnyVideo(x,y)) -> SendsIn(x,y))", "all x y.((Viewer(x) & FrenchBroadcastChannel(y) & SendsFunnyVideos(x,y)) -> FunnyInEnglish(x))", "all x y z.((Viewer(x) & FunnyVideo(y) & FrenchBroadcastChannel(z) & SendsIn(x,y,z)) -> InEnglish(y,z))", "all x y.((Viewer(x) & FrenchBroadcastChannel(y) & SendsInFunnyVideos(x,y)) -> InEnglish(x))"]}
{"id": "folio_train_618", "nl": "All phones are things.", "fol": "all x.(IsPhone(x) -> IsThing(x))", "prediction": ["all x.(Phone(x) -> Things(x))", "all x.(Phone(x) -> Thing(x))", "all x.(Phone(x) -> Something(x))", "all x.(Phone(x) -> Object(x))", "all x.exists y.(Phone(x) & Phone(y) & Things(x))", "all x.exists y.(Phone(x) & Phone(y) & Things(x,y))", "all x.(Phone(x) -> IsThing(x))", "all x y.((Phone(x) & Phone(y)) -> Things(x))", "all x.exists y.(Phone(x) & Phone(y) & Things(y))", "all x.(Phone(x) -> (Thing(x) & -Thing(x)))", "all x.exists y.(Phone(x) & Thing(y))", "all x.(Phone(x) -> AThing(x))", "all x.(Phone(x) -> (Thing(x) & Things(x)))", "all x y.((Phone(x) & Phone(y)) -> Things(x,y))", "all x.exists y.(Phone(x) & Phone(y) & Is(x,y))", "all x.(Phone(x) -> (Thing(x) | -Thing(x)))"]}
{"id": "folio_train_619", "nl": "All cellphones are phones. ", "fol": "all x.(IsCellphone(x) -> IsPhone(x))", "prediction": ["all x.(Cellphone(x) -> Phone(x))", "all x y.((Cellphone(x) & Phone(y)) -> Phone(x))", "all x y.((Cellphone(x) & Phone(y)) -> Phone(x,y))", "all x.((Cellphone(x) & Phone(x)) -> Phone(x))", "all x.exists y.(Cellphone(x) & Phone(y) & UsedBy(x,y))", "all x.exists y.(Cellphone(x) & Phone(y))", "all x.exists y.(Cellphone(x) & Phone(y) & DesignedFor(x,y))", "(all x.(Cellphone(x) -> Phone(x)))", "all x.exists y.(Cellphone(x) & Phone(y) & PoweredBy(x,y))", "all x.(Cellphone(x) -> Phone(x))", "all x y.((Cellphone(x) & Smartphone(y)) -> Phone(x))", "all x.exists y.(Cellphone(x) & Phone(y) & LocatedIn(x,y))", "all x.exists y.(Cellphone(x) & Phone(y) & Uses(x,y))", "all x.exists y.(Cellphone(x) & Phone(y) & Phone(y))", "all x.exists y.(Cellphone(x) & Phone(y) & UsedFor(x,y))", "all x.exists y.(Cellphone(x) & Phone(y) & Phone(x,y))"]}
{"id": "folio_train_620", "nl": "All iPhones are cellphones. ", "fol": "all x.(IsIphone(x) -> IsCellphone(x))", "prediction": ["all x.(Iphone(x) -> Cellphone(x))", "all x.(iPhone(x) -> Cellphone(x))", "all x.(iphone(x) -> Cellphone(x))", "all x.(Apple(x) -> Cellphone(x))", "all x.((iPhone(x) & Cellphone(x)) -> Cellphone(x))", "all x.( iPhone(x) -> Cellphone(x))", "all x.((Iphone(x) & Cellphone(x)) -> Cellphone(x))", "all x.((iPhone(x) & Cellphone(x)) -> Phone(x))", "all x.(IPhone(x) -> Cellphone(x))", "(all x.(Iphone(x) -> Cellphone(x)))", "all x.(Iphone(x) -> Smartphone(x))", "all x.((Iphone(x) & Cellphone(x)) -> Phone(x))", "all x.((iPhone(x) & Cellphone(x)) -> -Cellphone(x))", "all x.((iPhone(x) & Cellphone(x)) -> Has(x,iPhone))", "all x.((iPhone(x) & Cellphone(x)) -> -Mobile(x))", "(all x.(iPhone(x) -> Cellphone(x)))"]}
{"id": "folio_train_621", "nl": "All engineers are workers.", "fol": "all x.(IsEngineer(x) -> IsWorker(x))", "prediction": ["all x.(Engineer(x) -> Worker(x))", "all x.(Engineer(x) -> Workers(x))", "all x.(Engineer(x) -> WorksAt(x))", "all x y.((Engineer(x) & Worker(y)) -> WorksFor(x,y))", "all x y.((Engineer(x) & Worker(y)) -> Worker(x))", "all x.(Engineer(x) -> Worker(x))", "all x.exists y.(Engineer(x) & Worker(y))", "all x y.((Engineer(x) & Worker(y)) -> Engineer(x))", "all x y.((Engineer(x) & Worker(y)) -> WorksAt(x,y))", "all x y.((Engineer(x) & Worker(y)) -> WorksWith(x,y))", "all x.(Engineer(x) -> Working(x))", "all x.(Engineer(x) -> WorksFor(x))", "all x.exists y.(Engineer(x) & Worker(y) & WorksFor(x,y))", "all x y.((Engineer(x) & Worker(y)) -> Workers(x))", "all x y.((Engineer(x) & Worker(y)) -> Worker(x,y))", "all x.(Engineer(x) -> Workers(x))"]}
{"id": "folio_train_622", "nl": "All workers are human. ", "fol": "all x.(IsWorker(x) -> IsHuman(x))", "prediction": ["all x.(Worker(x) -> Human(x))", "all x.exists y.(Worker(x) & Human(y))", "all x y.((Worker(x) & Human(y)) -> WorksFor(x,y))", "all x y.((Worker(x) & Human(y)) -> Worker(x))", "all x.(Worker(x) -> Human(x))", "exists x.(Worker(x) & Human(x))", "all x.exists y.(Worker(x) & Human(y) & WorkedWith(x,y))", "all x.exists y.(Worker(x) & Human(y) & WorksFor(x,y))", "all x.(Woman(x) -> Human(x))", "all x y.((Worker(x) & Human(y)) -> WorksWith(x,y))", "all x y.((Worker(x) & Human(y)) -> WorksAt(x,y))", "all x.exists y.(Worker(x) & Human(y) & WorkedFor(x,y))", "(all x.(Worker(x) -> Human(x)))", "all x.exists y.(Worker(x) & Human(y)) -> WorksFor(x,y))", "all x y.((Worker(x) & Human(y)) -> Human(x))", "all x y.((Worker(x) & Human(y)) -> Worker(x,y))"]}
{"id": "folio_train_623", "nl": "Jack is either an engineer or a worker.", "fol": "((IsEngineer(Jack) & -IsWorker(Jack)) | (-IsEngineer(Jack) & IsWorker(Jack)))", "prediction": ["all x.(Jack(x) -> (Engineer(x) | Worker(x)))", "exists x.(Jack(x) & (Engineer(x) | Worker(x)))", "all x.(Jack(x) -> (Engineer(x) | Worker(x)))", "all x.(Jack(x) -> (Engineer(x) | Workers(x)))", "(Employee(Jack) | Worker(Jack))", "(Engineer(Jack) | Worker(Jack))", "all x.((Jack(x) & Engineer(x)) | Worker(x))", "((Jack(Jack) & Engineer(Jack)) | Worker(Jack)))", "exists x.(Jack(x) & Engineer(x) & Worker(x))", "all x.(Jack(x) -> (Employee(x) | Worker(x)))", "All x.(Jack(x) -> (Engineer(x) | Worker(x)))", "all x y.((Jack(x) & Engineer(y)) | Worker(y))", "((Jack(Jack) | Worker(Jack)))", "exists x.(Jack(x) & Engineer(x) | Worker(x))", "all x.(Jack(x) -> (Engineer(x) | Warrior(x)))", "exists x.(Jack(x) & (Engineer(x) | Workers(x)))"]}
{"id": "folio_train_624", "nl": "Jack is is either a human or a phone.", "fol": "((IsHuman(Jack) & -IsPhone(Jack)) | (-IsHuman(Jack) & IsPhone(Jack)))", "prediction": ["all x.(Jack(x) -> (Human(x) | Phone(x)))", "all x.(Jack(x) -> (HasHuman(x) | HasPhone(x)))", "all x.(Jack(x) -> (Human(x) | Phone(x)))", "exists x.(Jack(x) & (Human(x) | Phone(x)))", "all x.(Human(x) | Phone(x))", "all x.((Jack(x) & Human(x)) | Phone(x))", "all x.((Human(x) | Phone(x)) -> Jack(x))", "all x y.((Jack(x) & Human(y)) | Phone(y)) -> (Has(x,y) | Has(x,y)))", "all x y.((Jack(x) & Human(y)) | Phone(y)) -> (Human(x) | Phone(x)))", "all x.(Jack(x) -> (HasHuman(x) | Phone(x)))", "all x y.((Jack(x) & Human(y)) | Phone(y)) -> Is(x,y))", "All x.(Jack(x) -> (Human(x) | Phone(x)))", "all x.(Jack(x) -> (HasHuman(x) | IsPhone(x)))", "(Human(Jack) | Phone(Jack))", "all x.(HasHuman(x) | HasPhone(x))", "all x.((Jack(x) & Human(x)) | Phone(x)) -> (Human(x) | Phone(x)))"]}
{"id": "folio_train_625", "nl": "Jack is a thing.", "fol": "IsThing(Jack)", "prediction": ["all x.(Jack(x) -> Thing(x))", "All x.(Jack(x) -> Thing(x))", "exists x.(Jack(x) & Thing(x))", "all x.((Jack(x) & Thing(x)) -> Thing(x))", "all x.(Jack(x) -> Thing(x))", "all x y.((Jack(x) & Thing(y)) -> Is(x,y))", "all x.((Jack(x) & Thing(x)) -> Is(x,y))", "all x.((Jack(x) & Thing(x)) -> Things(x))", "all x y.((Jack(x) & Thing(y)) -> Thing(x,y))", "all x.((Jack(x) & Thing(x)) -> Is(x))", "all x y.((Jack(x) & Thing(y)) -> Thing(x))", "all x.((Jack(x) & Thing(x)) -> Something(x))", "(All x.(Jack(x) -> Thing(x)))", "All x.(Jack(x) -> Thing(x))", "(all x.(Jack(x) -> Thing(x)))", "all x.(Jack(x) -> IsThing(x))"]}
{"id": "folio_train_626", "nl": "Jack is not a thing.", "fol": "-IsThing(Jack)", "prediction": ["all x.(Jack(x) -> -Thing(x))", "all x.(Jack(x) -> -Ding(x))", "all x.((Jack(x) & -Thing(x)) -> -Thing(x))", "All x.(Jack(x) -> -Thing(x))", "all x.((Jack(x) & -Ding(x)) -> -Ding(x))", "All x.(Jack(x) -> -Ding(x))", "all x.(Jack(x) -> -IsThing(x))", "all x.((Jack(x) & -Thing(x)) -> -Ding(x))", "all x.(Jack(x) -> -Thing(x))", "-(Thing(Jack) & -Thing(Jack))", "(all x.(Jack(x) -> -Thing(x)))", "exists x.(Jack(x) & -Thing(x))", "exists x.(Jack(x) & -Ding(x))", "all x.((Jack(x) & -Thing(x)) -> -Is(x,y))", "all x.(Jack(x) -> -TeaThing(x))", "-(Jack(Jack) & -Thing(Jack))"]}
{"id": "folio_train_627", "nl": "Jack is a thing and an iPhone.", "fol": "(IsThing(Jack) & IsIphone(Jack))", "prediction": ["all x.(Jack(x) -> (Thing(x) & iPhone(x)))", "(all x.(Jack(x) -> Thing(x)) & all y.(Jack(y) -> iPhone(y)))", "all x.(Jack(x) -> (Iphone(x) & Thing(x)))", "all x.(Jack(x) -> (Ding(x) & iPhone(x)))", "(all x.(Jack(x) -> Thing(x)) & all y.(Jack(y) -> iPhone(y))))", "all x y.((Jack(x) & iPhone(y)) -> (Thing(x) & iPhone(x)))", "all x.((Jack(x) & iPhone(x)) -> (Thing(x) & iPhone(x)))", "All x.(Jack(x) -> (Thing(x) & iPhone(x)))", "all x.(Jack(x) -> (Thing(x) & iPhone(x)))", "(Thing(Jack) & iPhone(Jack))", "exists x.(Jack(x) & Thing(x) & iPhone(x))", "all x y.((Jack(x) & iPhone(y)) -> (IsThing(x) & IsIphone(x)))", "(all x.(Jack(x) -> Thing(x)) & all y.(Iphone(y) -> iPhone(y)))", "(All x.(Jack(x) -> Thing(x)) & iPhone(x))", "((Jack(Jack) & iPhone(Jack)) -> Thing(Jack))", "all x.(Jack(x) -> (Teathing(x) & iPhone(x)))"]}
{"id": "folio_train_628", "nl": "Jack is not both a thing and an iPhone.", "fol": "-(IsThing(Jack) & IsIphone(Jack))", "prediction": ["all x.(Jack(x) -> -(Thing(x) & iPhone(x)))", "(-(Thing(Jack) & iPhone(Jack)))", "-(Iphone(Jack) & iPhone(Jack))", "-(Iphone(Jack) & Thing(Jack))", "all x.(Jack(x) -> -(Iphone(x) & iPhone(x)))", "all x.(Jack(x) -> -(Iphone(x) & Thing(x)))", "-(Thing(Jack) & iPhone(Jack))", "all x.((Jack(x) & iPhone(x)) -> -(Thing(x) & iPhone(x)))", "exists x.(Jack(x) & -(Thing(x) & iPhone(x)))", "All x.(Jack(x) -> -(Thing(x) & iPhone(x)))", "(-(Thing(Jack) & iPhone(Jack)) & -(Thing(Jack) & iPhone(Jack))))", "all x.((Jack(x) & iPhone(x)) -> -(Iphone(x) & Thing(x)))", "(-(Thing(Jack) & iPhone(Jack)) & -(Iphone(Jack) & iPhone(Jack))))", "(-(Thing(Jack) & iPhone(Jack)) & -(Iphone(Jack) & iPhone(Jack)))", "(-(Thing(Jack) & iPhone(Jack)) & -(Thing(Jack) & iPhone(Jack)))", "all x.(Jack(x) -> -(Iphone(x) & Thing(x) & iPhone(x)))"]}
{"id": "folio_train_629", "nl": "All iPhones are electronic.", "fol": "all x.(IsIPhone(x) -> IsElectronic(x))", "prediction": ["all x.(Iphone(x) -> Electronic(x))", "all x.(iPhone(x) -> Electronic(x))", "all x.(iphone(x) -> Electronic(x))", "all x.(Apple(x) -> Electronic(x))", "all x.((iPhone(x) & Electronic(x)) -> Has(x,iPhone))", "all x.((iPhone(x) & Electronic(x)) -> Has(x,iPad))", "all x.(IPhone(x) -> Electronic(x))", "all x.((iPhone(x) & Electronic(x)) -> -Electronic(x))", "all x.(iPad(x) -> Electronic(x))", "all x.((iPhone(x) & Electronic(x)) -> Electronic(x))", "(all x.(iPhone(x) -> Electronic(x)))", "all x.((iPhone(x) & Electronic(x)) -> Has(x,y))", "all x.( iPhone(x) -> Electronic(x))", "(all x.(Iphone(x) -> Electronic(x)))", "all x.((Iphone(x) & Electronic(x)) -> -Electronic(x))", "all x.((Iphone(x) & Electronic(x)) -> Has(x,y))"]}
{"id": "folio_train_630", "nl": "Some phones are iPhones.", "fol": "exists x.(IsPhone(x) & IsIPhone(x))", "prediction": ["exists x.(Phone(x) & iPhone(x))", "exists x y.(Phone(x) & Phone(y) & iPhone(x))", "exists x.(Phone(x) & iPhone(x))", "exists x.(Phone(x) & Iphone(x))", "exists x y.(Phone(x) & iPhone(y))", "exists x.(Phone(x) & Phone(x) & iPhone(x))", "exists x y.(Phone(x) & Phone(y) & iPhone(y))", "(exists x.(Phone(x) & iPhone(x)))", "exists x.(Mobile(x) & iPhone(x))", "exists x.(Phone(x) & Apple(x))", "exists x.(Smartphone(x) & iPhone(x))", "exists x y.(Phone(x) & iPhone(y) & UsedBy(x,y))", "exists x.(Phone(x) & iPhone(x) & -Phone(x))", "exists x y.(Phone(x) & Phone(y) & iPhone(z))", "exists x.(PHP(x) & iPhone(x))", "exists x y.(Phone(x) & iPhone(y) & DesignedFor(x,y))"]}
{"id": "folio_train_631", "nl": "No phones are electronic.", "fol": "-exists x.(IsPhone(x) & IsElectronic(x))", "prediction": ["-exists x.(Phone(x) & Electronic(x))", "all x.(Phone(x) -> -Electronic(x))", "-exists x.(Phone(x) & -Electronic(x))", "(-exists x.(Phone(x) & Electronic(x)))", "exists x.(Phone(x) & -Electronic(x))", "(-exists x.(Phone(x) & Electronic(x)) & -exists y.(Phone(y) & Electronic(y))))", "-exists x.(Phone(x) & Electronic(x)) & -exists y.(Phone(y) & Electronic(y)))", "(-exists x.(Phone(x) & Electronic(x)) & -exists y.(Phone(y) & Electronic(y)))", "-exists x.(Smartphone(x) & Electronic(x))", "-exists x.(Phone(x) & Electronic(x) & -exists y.(Phone(y) & Electronic(y)))", "-exists x.(Phone(x) & Electron(x))", "-exists x y.(Phone(x) & Phone(y) & Electronic(y))", "-exists x.(Mobile(x) & Electronic(x))", "-exists x.(Phone(x) & Electronic(x)) -> -exists y.(Phone(y) & Electronic(y)))", "-exists x.(Phone(x) & Electronic(x) & -exists y.(Phone(y) & Electronic(y))))", "-all x.(Phone(x) -> Electronic(x))"]}
{"id": "folio_train_632", "nl": "Metropolitan Museum of Art is a museum in NYC.", "fol": "(IsMuseum(MetropolitanMuseumofArt) & LocatedInNYC(MetropolitanMuseumofArt))", "prediction": ["all x.(MuseumOfArt(x) -> MuseumInNewYork(x))", "all x y.((MetropolitanMuseumOfArt(x) & NewYork(y)) -> MuseumIn(x,y))", "all x.(MuseumOfArt(x) -> MuseumInNYC(x))", "all x y.((MetropolitanMuseumOfArt(x) & NYCMuseum(y)) -> MuseumIn(x,y))", "all x y.((Museum(x) & MetropolitanMuseumOfArt(y)) -> MuseumIn(x,y))", "all x.((MetropolitanMuseumOfArt(x) & MuseumInNewYork(x)) -> MuseumInNewYork(x))", "all x.((MetropolitanMuseumOfArt(x) & MuseumInNewYork(x)) -> MuseumInNYC(x))", "all x y.((Museum(x) & MetropolitanMuseumOfArt(y)) -> MuseumInNewYork(x))", "all x.(MetropolitanMuseumOfArt(x) -> MuseumInNewYork(x))", "all x y.((MetropolitanMuseumOfArt(x) & NewYork(y)) -> Museum(x,y))", "all x y.((Museum(x) & MetropolitanMuseumOfArt(y)) -> MuseumInNewYork(x,y))", "all x.((MuseumOfArt(x) & MuseumInNewYork(x)) -> MuseumInNewYork(x))", "all x y.((Museum(x) & MetropolitanMuseumOfArt(y)) -> MuseumInNYC(x,y))", "all x.(MetropolitanMuseumOfArt(x) -> MuseumInNYC(x))", "all x y.((MetropolitanMuseumOfArt(x) & NYCMuseum(y)) -> Museum(x,y))", "all x y.((MetropolitanMuseumOfArt(x) & Museum(y)) -> LocatedIn(x,y))"]}
{"id": "folio_train_633", "nl": "Whitney Museum of American Art is a museum in NYC.", "fol": "(IsMuseum(WhitneyMuseumofAmericanArt) & LocatedInNYC(WhitneyMuseumofAmericanArt))", "prediction": ["all x.(WhitneyMuseumOfAmericanArt(x) -> MuseumInNewYork(x))", "all x.(WilliamsMuseumOfAmericanArt(x) -> MuseumInNewYork(x))", "all x.((WhitneyMuseumOfAmericanArt(x) & MuseumInNewYork(x)) -> MuseumInNYC(x))", "all x.(WhitneyMuseumOfAmericanArt(x) -> MuseumInNYC(x))", "all x.((WhitneyMuseumOfAmericanArt(x) & MuseumInNewYork(x)) -> MuseumInNewYork(x))", "all x.((WilliamsMuseumOfAmericanArt(x) & MuseumInNewYork(x)) -> MuseumInNYC(x))", "all x.(WilliamsMuseumOfAmericanArt(x) -> MuseumInNYC(x))", "all x.((WilliamsMuseumOfAmericanArt(x) & MuseumInNewYork(x)) -> MuseumInNewYork(x))", "all x.((WhitneyMuseum(x) & MuseumInNewYork(x)) -> AmericanArt(x))", "all x y.((WhitneyMuseum(x) & AmericanArt(y)) -> MuseumIn(x,y))", "all x.((WhitneyMuseumOfAmericanArt(x) & MuseumInNewYork(x)) -> LocatedIn(x,NY))", "all x y.((WhitneyMuseum(x) & AmericanArt(y)) -> MuseumInNewYork(x))", "all x.((WhitneyMuseumOfAmericanArt(x) & MuseumInNewYork(x)) -> LocatedIn(x,NewYork))", "all x.((WhitneyMuseum(x) & AmericanArt(x)) -> MuseumInNewYork(x))", "all x.((WhitneyMuseumOfAmericanArt(x) & MuseumInNewYork(x)) -> LocatedIn(x,y))", "all x y.((WhitneyMuseum(x) & AmericanArt(y)) -> MuseumInNewYork(x,y))"]}
{"id": "folio_train_634", "nl": "Museum of Modern Art (MoMA) is a museum if NYC. ", "fol": "(IsMuseum(MuseumofModernArt) & LocatedInNYC(MuseumofModernArt))", "prediction": ["all x.((MuseumOfModernArt(x) & NYC(x)) -> Museum(x))", "all x y.((MuseumOfModernArt(x) & NYC(y)) -> Museum(x,y))", "all x.((MuseumOfModernArt(x) & NewYork(y)) -> Museum(x))", "all x.((MuseumOfModernArt(x) & NewYork(y)) -> Museum(x,y))", "all x.((MuseumOfModernArt(x) & MuseumOfNewYork(x)) -> MuseumOfNewYork(x))", "all x y.((Museum(x) & MuseumOfModernArt(x) & NYC(y)) -> Museum(x,y))", "all x.((MuseumOfModernArt(x) & LocatedInNewYork(x)) -> Museum(x))", "all x y.((MuseumOfModernArt(x) & NewYork(y)) -> Museum(x,y))", "all x.((MuseumOfModernArt(x) & MuseumOfNewYork(x)) -> Museum(x))", "all x.((MuseumOfModernArt(x) & LocatedIn(x,NYC)) -> Museum(x))", "all x.(MuseumOfModernArt(x) -> Museum(x))", "all x.((MuseumOfModernArt(x) & NewYork(y)) -> MuseumIf(x,y))", "all x.((MuseumOfModernArt(x) & MuseumOfNYC(x)) -> MuseumOfNYC(x))", "all x.((MuseumOfModernArt(x) & MuseumOfNewYork(x)) -> MuseumIfNewYork(x))", "all x y.((Museum(x) & MuseumOfModernArt(x,y) & NYC(y)) -> Museum(x,y))", "all x.((MuseumOfModernArt(x) & NYCMuseum(x)) -> Museum(x))"]}
{"id": "folio_train_635", "nl": "Metropolitan Museum of Art includes Bytantine and Islamic Art. ", "fol": "(IncludesArt(MetropolitanMuseumofArt,ByzantineArt) & IncludesArt(MetropolitanMuseumofArt,IslamicArt))", "prediction": ["all x.(MetropolitanMuseumOfArt(x) -> (IncludesBytantine(x) & IncludesIslamicArt(x)))", "all x.(MetropolitanMuseumOfArt(x) -> (IncludesBytantine(x) | IncludesIslamicArt(x)))", "(IncludesBytantine(MuseumOfArt) & IncludesIslamicArt(MuseumOfArt))", "(exists x.(MetropolitanMuseumOfArt(x) & Bytantine(x)) & exists y.(IslamicArt(y) & Includes(x,y))))", "All x.(MetropolitanMuseumOfArt(x) -> (IncludesBytantine(x) | IncludesIslamicArt(x)))", "All x.(MetropolitanMuseumOfArt(x) -> (IncludesBytantine(x) & IncludesIslamicArt(x)))", "all x y.((MetropolitanMuseumOfArt(x) & Bytantine(y) & IslamicArt(y)) -> Includes(x,y))", "(exists x.(MetropolitanMuseumOfArt(x) & Bytantine(x)) & exists y.(IslamicArt(y) & InMuseumOfArt(x,y))))", "(exists x.(MetropolitanMuseumOfArt(x) & Bytantine(x)) & exists y.(IslamicArt(y) & InMuseum(x,y))))", "all x.((MetropolitanMuseumOfArt(x) & Bytantine(x) & IslamicArt(x)) -> Includes(x,y))", "all x.(MuseumOfArt(x) -> (IncludesBytantine(x) & IncludesIslamicArt(x)))", "(exists x.(MetropolitanMuseumOfArt(x) & Bytantine(x)) & exists y.(IslamicArt(y) & InMuseumOfArt(y,x))))", "all x.(MetropolitanMuseumOfArt(x) -> (IncludesBytantineArt(x) | IncludesIslamicArt(x)))", "all x.(MuseumOfArt(x) -> (IncludesBytantine(x) | IncludesIslamicArt(x)))", "(exists x.(MetropolitanMuseumOfArt(x) & Bytantine(x)) & exists y.(MetropolitanMuseumOfArt(y) & IslamicArt(y)))", "(exists x.(MetropolitanMuseumOfArt(x) & Bytantine(x) & IslamicArt(x)))"]}
{"id": "folio_train_636", "nl": "Whitney Museum of American Art includes American art.", "fol": "IncludesArt(WhitneyMuseumofAmericanArt,AmericanArt)", "prediction": ["all x y.((WhitneyMuseumOfAmericanArt(x) & AmericanArt(y)) -> Includes(x,y))", "all x.((WhitneyMuseumOfAmericanArt(x) & IncludesAmericanArt(x)) -> IncludesAmericanArt(x))", "all x.(WhitneyMuseumOfAmericanArt(x) -> IncludesAmericanArt(x))", "all x y.((WilliamsMuseumOfAmericanArt(x) & AmericanArt(y)) -> Includes(x,y))", "all x y.((WhitneyMuseum(x) & AmericanArt(y)) -> Includes(x,y))", "all x.(WilliamsMuseumOfAmericanArt(x) -> IncludesAmericanArt(x))", "all x.((WhitneyMuseumOfAmericanArt(x) & IncludesAmericanArt(x)) -> IncludesArt(x))", "all x.((WilliamsMuseumOfAmericanArt(x) & IncludesAmericanArt(x)) -> IncludesAmericanArt(x))", "all x y.((WilliamsMuseum(x) & AmericanArt(y)) -> Includes(x,y))", "all x.((WhitneyMuseumOfAmericanArt(x) & AmericanArt(x)) -> Includes(x,AmericanArt))", "all x.((WhitneyMuseumOfAmericanArt(x) & AmericanArt(y)) -> Includes(x,y))", "all x.((WhitneyMuseum(x) & AmericanArt(x)) -> Includes(x,AmericanArt))", "all x.((WilliamsMuseumOfAmericanArt(x) & IncludesAmericanArt(x)) -> IncludesArt(x))", "all x.((WhitneyMuseumOfAmericanArt(x) & AmericanArt(x)) -> Includes(x,y))", "all x.((WilliamsMuseumOfAmericanArt(x) & AmericanArt(x)) -> Includes(x,y))", "all x.((WhitneyMuseumOfAmericanArt(x) & IncludesAmericanArt(x)) -> AmericanArt(x))"]}
{"id": "folio_train_637", "nl": "A museum in NYC includes Byzantine and Islamic Art.", "fol": "exists x.(IsMuseum(x) & LocatedInNYC(x) & IncludesArt(x,ByzantineArt) & IncludesArt(x,IslamicArt))", "prediction": ["all x.(Museum(x) -> (IncludesByzantineArt(x) & IncludesIslamicArt(x)))", "all x.((Museum(x) & InNYC(x)) -> (ByzantineArt(x) | IslamicArt(x)))", "all x.(Museum(x) -> (IncludesByzantineArt(x) | IncludesIslamicArt(x)))", "all x.((Museum(x) & InNYC(x)) -> (IncludesByzantineArt(x) | IncludesIslamicArt(x)))", "all x.((Museum(x) & InNYC(x)) -> (IncludesByzantineArt(x) & IncludesIslamicArt(x)))", "all x.((Museum(x) & In(x,NY)) -> (ByzantineArt(x) | IslamicArt(x)))", "all x.((Museum(x) & InNewYork(x)) -> (ByzantineArt(x) | IslamicArt(x)))", "all x y.((Museum(x) & NYC(y)) -> (IncludesByzantineArt(x,y) | IncludesIslamicArt(x,y)))", "all x.((Museum(x) & InNewYork(x)) -> (IncludesByzantineArt(x) | IncludesIslamicArt(x)))", "all x y.((Museum(x) & NewYork(y)) -> (IncludesByzantineArt(x,y) | IncludesIslamicArt(x,y)))", "all x.((Museum(x) & In(x,NY)) -> (IncludesByzantineArt(x) | IncludesIslamicArt(x)))", "all x.((Museum(x) & InNewYork(x)) -> (IncludesByzantineArt(x) & IncludesIslamicArt(x)))", "all x y.((Museum(x) & City(y)) -> (IncludesByzantineArt(x,y) | IncludesIslamicArt(x,y)))", "all x.(Museum(x) -> (IncludesByzantineArt(x) & IncludesIslamicArt(x)))", "all x y.((Museum(x) & NewYork(y)) -> (IncludesByzantineArt(x,y) & IncludesIslamicArt(x,y)))", "all x.((Museum(x) & In(x,NY)) -> (IncludesByzantineArt(x) & IncludesIslamicArt(x)))"]}
{"id": "folio_train_638", "nl": "A museum in NYC includes American art.", "fol": "exists x.(IsMuseum(x) & LocatedInNYC(x) & IncludesArt(x,AmericanArt))", "prediction": ["all x.((Museum(x) & InNYC(x)) -> IncludesAmericanArt(x))", "all x.((Museum(x) & InNewYork(x)) -> IncludesAmericanArt(x))", "all x y.((Museum(x) & NewYork(y)) -> IncludesAmericanArt(x,y))", "all x y.((Museum(x) & NYC(y)) -> IncludesAmericanArt(x,y))", "all x.((Museum(x) & In(x,NY)) -> IncludesAmericanArt(x))", "all x y z.((Museum(x) & NewYork(y) & AmericanArt(z)) -> Includes(x,y,z))", "all x y z.((Museum(x) & NYC(y) & AmericanArt(z)) -> Includes(x,y,z))", "all x.((Museum(x) & NewYork(y)) -> IncludesAmericanArt(x,y))", "all x.(Museum(x) -> IncludesAmericanArt(x))", "all x y z.((Museum(x) & NewYork(y) & AmericanArt(z)) -> Includes(x,y,z))", "all x.((Museum(x) & InNashville(x)) -> IncludesAmericanArt(x))", "all x y.((Museum(x) & City(y)) -> IncludesAmericanArt(x,y))", "all x y z.((Museum(x) & NYC(y) & AmericanArt(z)) -> Includes(x,y,z))", "all x y.((Museum(x) & Museum(y)) -> IncludesAmericanArt(x,y))", "all x.((Museum(x) & inNYC(x)) -> IncludesAmericanArt(x))", "all x.((Museum(x) & InNewYork(x)) -> IncludesAsianArt(x))"]}
{"id": "folio_train_639", "nl": "A museum in NYC includes Greek art.", "fol": "exists x.(IsMuseum(x) & LocatedInNYC(x) & IncludesArt(x,GreekArt))", "prediction": ["all x.((Museum(x) & InNYC(x)) -> IncludesGreekArt(x))", "all x.((Museum(x) & InNewYork(x)) -> IncludesGreekArt(x))", "all x y.((Museum(x) & NewYork(y)) -> IncludesGreekArt(x,y))", "all x y.((Museum(x) & NYC(y)) -> IncludesGreekArt(x,y))", "all x.((Museum(x) & In(x,NY)) -> IncludesGreekArt(x))", "all x y z.((Museum(x) & NewYork(y) & GreekArt(z)) -> Includes(x,y,z))", "all x y.((Museum(x) & NewYork(y)) -> IncludesGreekArt(x,y))", "all x.((Museum(x) & InNYC(x)) -> IncludesGreekArt(x))", "all x.((Museum(x) & NewYork(y)) -> IncludesGreekArt(x,y))", "all x y z.((Museum(x) & NYC(y) & GreekArt(z)) -> Includes(x,y,z))", "all x y.((Museum(x) & NYC(y)) -> IncludesGreekArt(x,y))", "all x.((Museum(x) & InNewYork(x)) -> IncludesGreekArt(x))", "all x.((Museum(x) & InNashville(x)) -> IncludesGreekArt(x))", "all x y z.((Museum(x) & NewYork(y) & GreekArt(z)) -> Includes(x,y,z))", "all x.(Museum(x) -> IncludesGreekArt(x))", "all x.(Museum(x) -> IncludesGreekArt(x))"]}
{"id": "folio_train_640", "nl": "A person either likes eating cheese or is a francophile.", "fol": "all x.(LikesEatingCheese(x) | IsFrancophile(x))", "prediction": ["all x.(Person(x) -> (LikesEatingCheese(x) | Francophile(x)))", "all x.(Person(x) -> (LikesEatingCheese(x) | Francophile(x)))", "exists x.(Person(x) & (LikesEatingCheese(x) | Francophile(x)))", "all x.(Francophile(x) -> (LikesEatingCheese(x) | LikesEatingCheese(x)))", "exists x.(Person(x) & (LikesEatingCheese(x) | Francophile(x)))", "all x.(Person(x) -> (LovesEatingCheese(x) | Francophile(x)))", "all x.((Person(x) & (LikesEatingCheese(x) | Francophile(x))) -> LikesEatingCheese(x))", "all x.((Person(x) & LikesEatingCheese(x)) | Francophile(x))", "all x.(Francophile(x) -> (LikesEatingCheese(x) | LikesEatingCheese(x)))", "all x.(Person(x) -> (LikesEatingCheese(x) | Frankophile(x)))", "all x.(Person(x) -> ((LikesEatingCheese(x) | Francophile(x))))", "all x.((Person(x) & (LikesEatingCheese(x) | Francophile(x))) -> LikesEating(x))", "all x.(Person(x) -> (LikesEatingCheese(x) | Fracophile(x)))", "all x.(Person(x) -> (LovesEatingCheese(x) | Francophile(x)))", "all x.(Francophile(x) -> (LikesEatingCheese(x) | LikesEatingCheese(x)))", "all x.(Person(x) -> (LikesEatingCheese(x) | Francophile(x)))"]}
{"id": "folio_train_641", "nl": "No francophiles are people who like Spain as their favorite country.", "fol": "all x.(IsFrancophile(x) -> -LikesSpainAsFavorite(x))", "prediction": ["-exists x.(Francophile(x) & Likes(x,Spain))", "-exists x.(Francophile(x) & Likes(x,Spanish))", "-exists x.(Francophile(x) & LikesSpanish(x))", "-exists x.(Francophile(x) & People(x) & LikesSpanish(x))", "-all x.(Francophile(x) -> LikesSpanish(x))", "all x.(Francophile(x) -> -LikesSpanish(x))", "-exists x.(Francophile(x) & Likes(x,Spania))", "all x.(Francophile(x) -> (Person(x) & LikesSpanish(x)))", "-exists x.(Francophile(x) & People(x) & Likes(x,Spanish))", "-exists x.(Francophile(x) & People(x) & LikesSpanishAsFavoriteCountry(x))", "-exists x.(Francophile(x) & People(x) & Likes(x,Spain))", "-exists x.(Francophile(x) & LikesSpain(x))", "all x.(Francophile(x) -> -FavoriteCountry(x,Spain))", "-exists x.(Francophile(x) & Likes(x,Spanien))", "-exists x.(Francophile(x) & Person(x) & LikesSpanish(x))", "-exists x.(Francophile(x) & People(x) & LikeSpain(x))"]}
{"id": "folio_train_642", "nl": "A person likes Spain as their favorite country or likes eating cheese.", "fol": "all x.(LikesSpainAsFavorite(x) | LikesEatingCheese(x))", "prediction": ["all x.((Person(x) & (LikesSpanish(x) | LikesEatingCheese(x))) -> FavoriteCountry(x))", "all x.((Person(x) & (LikesSpanish(x) | LikesEatingCheese(x))) -> FavoriteCountry(x))", "all x.((Person(x) & (LikesSpanish(x) | LikesEatingCheese(x))) -> Likes(x,Spanish))", "all x.(Person(x) -> (LikesSpanish(x) | LikesEatingCheese(x)))", "exists x.(Person(x) & (LikesSpanish(x) | LikesEatingCheese(x)))", "exists x.(Person(x) & ((LikesSpanish(x) & FavoriteCountry(x)) | LikesEatingCheese(x))))", "all x.((Person(x) & (LovesSpanish(x) | LikesEatingCheese(x))) -> Likes(x,Spanish))", "all x.((Person(x) & (LikesSpain(x) | LikesEatingCheese(x))) -> FavoriteCountry(x))", "all x.((Person(x) & (LikesSpanish(x) | LikesEatingCheese(x))) -> LikesSpanish(x))", "exists x.(Person(x) & ((LikesSpanish(x) & FavoriteCountry(x)) | (LikesEatingCheese(x)))))", "all x.((Person(x) & (LikesSpanish(x) | LikesEatingCheese(x))) -> FavoriteCountry(x,Spanish))", "all x.((Person(x) & (LikesSpanish(x) | LikesEatingCheese(x))) -> Likes(x,Spain))", "all x.((Person(x) & (LovesSpanish(x) | LikesEatingCheese(x))) -> LikesSpanish(x))", "all x.(Person(x) -> (LikesSpanish(x) | LikesEatingCheese(x)))", "all x.((Person(x) & (LikesSpanish(x) | LikesEatsCheese(x))) -> FavoriteCountry(x))", "all x.((Person(x) & (LikesSpain(x) | LikesEatingCheese(x))) -> Likes(x,Spain))"]}
{"id": "folio_train_643", "nl": "Benji is not a person who likes eating cheese and a person who studies Spanish.", "fol": "-(LikesEatingCheese(Benji) & StudiesSpanish(Benji))", "prediction": ["all x.(Benji(x) -> (-LikesEatingCheese(x) & -LikesStudyingSpanish(x)))", "(all x.(Benji(x) -> -LikesEatingCheese(x)) & all y.(Benji(y) -> StudiesSpanish(y)))", "all x.(Benji(x) -> (-LikesEatingCheese(x) & -LikesStudyingSpanish(x)))", "all x.(Benji(x) -> (-LikesEatingCheese(x) & -StudiesSpanish(x)))", "(-(LikesEatingCheese(Benji) & LikesEatingSpanish(Benji)) & -(LikesEatingCheese(Benji) & LikesStudyingSpanish(Benji)))", "all x.(Benji(x) -> (-likesEatingCheese(x) & -likesStudyingSpanish(x)))", "all x.((Person(x) & -LikesEatingCheese(x) & -StudiesSpanish(x)) -> Benji(x))", "all x.(Benji(x) -> (-LikesEatingCheese(x) & -LikesStudyingSpanish(x)))", "(-(Person(Benji) & LikesEatingCheese(Benji)) & -(Person(Benji) & StudiesSpanish(Benji)))", "(all x.(Benji(x) -> -LikesEatingCheese(x)) & all y.(Benji(y) -> StudiesSpanish(y))))", "all x.(Benji(x) -> (-likesEatingCheese(x) & -StudiesSpanish(x)))", "all x.(Benji(x) -> (-LikesEatingCheese(x) & -StudiesSpanish(x)))", "all x.(Benji(x) -> (-LovesEatingCheese(x) & -StudiesSpanish(x)))", "(-(LikesEatingCheese(Benji) & LikesEatingSpanish(Benji)) & -(LikesEatingCheese(Benji) & LikesStudyingSpanish(Benji)))", "(-(Person(Benji) & LikesEatingCheese(Benji)) | Person(Benji) & StudiesSpanish(Benji)))", "(-LikesEatingCheese(Benji) & -LikesStudyingSpanish(Benji))"]}
{"id": "folio_train_644", "nl": "If Benji is neither a person who studies Spanish nor a person that studies French, then Benji is a person who studies Spanish or a person that studies French.", "fol": "(-(StudiesSpanish(Benji) | StudiesFrench(Benji)) -> (StudiesSpanish(Benji) | StudiesFrench(Benji)))", "prediction": ["all x.((Person(x) & -(StudiesSpanish(x) | StudiesFrench(x))) -> (StudiesSpanish(x) | StudiesFrench(x)))", "all x.((Person(x) & -StudiesSpanish(x) & -StudiesFrench(x)) -> (StudiesSpanish(x) | StudiesFrench(x)))", "all x.((Benji(x) & -(StudiesSpanish(x) | StudiesFrench(x))) -> (StudiesSpanish(x) | StudiesFrench(x)))", "all x.((Person(x) & -(StudiesSpanish(x) | StudiesFrench(x))) -> (StudiesSpanish(x) | StudiesFrench(x))))", "all x.((Person(x) & -(StudiesSpanish(x) | StudiesFrench(x))) -> (StudiesSpanish(x) | StudyesFrench(x)))", "all x.((Person(x) & -SelectsSpanish(x) & -SelectsFrench(x)) -> (StudiesSpanish(x) | StudiesFrench(x)))", "all x.((Person(x) & -(StudiesSpanish(x) & StudiesFrench(x))) -> (StudiesSpanish(x) | StudiesFrench(x)))", "all x.((Person(x) & -(StudiesSpanish(x) | StudyesFrench(x))) -> (StudiesSpanish(x) | StudiesFrench(x)))", "all x.((Person(x) & (-StudiesSpanish(x) | StudiesFrench(x))) -> (StudiesSpanish(x) | StudiesFrench(x)))", "all x.((Person(x) & -(Person(x) & StudiesSpanish(x)) | Person(x) & StudiesFrench(x))) -> (StudiesSpanish(x) | StudiesFrench(x)))", "all x.((Person(x) & -(StudiesSpanish(x) | StudiesFrench(x))) -> (StudiesSpanish(x) | StudiesFrench(x)))", "all x.((Person(x) & -(StudiesSpanish(x) | StudiesFrench(x)) & Benji(x)) -> (StudiesSpanish(x) | StudiesFrench(x)))", "all x.((Person(x) & -StudiesSpanish(x) & -StudiesFrench(x)) -> (StudiesSpanish(x) | StudyesFrench(x)))", "all x.((Benji(x) & -(StudiesSpanish(x) | StudiesFrench(x))) -> (StudiesSpanish(x) | StudiesFrench(x))))", "all x y.((Benji(x) & -(StudiesSpanish(x) | StudiesFrench(x))) -> (StudiesSpanish(x) | StudiesFrench(x)))", "all x.((Person(x) & -(StudiesSpanish(x) | StudiesFrench(x))) -> (StudiesSpanish(x) | StudiesFrench(x)))"]}
{"id": "folio_train_645", "nl": "Benji is a person who likes eating cheese.", "fol": "LikesEatingCheese(Benji)", "prediction": ["all x.(Benji(x) -> LikesEatingCheese(x))", "all x.((Person(x) & LikesEatingCheese(x)) -> Benji(x))", "all x.(Benji(x) -> LikesEatingCheese(x))", "All x.(Benji(x) -> LikesEatingCheese(x))", "Benji is a person who likesEatingCheese(Benji)", "all x.((Person(x) & LikesEatingCheese(x)) -> Benji(x))", "exists x.(Person(x) & LikesEatingCheese(x))", "all x.((Person(x) & LikesEatingCheese(x)) -> LikesEatingCheese(x))", "(Person(Benji) & LikesEatingCheese(Benji))", "exists x.(Benji(x) & LikesEatingCheese(x))", "Benji (Person(Benji) & LikesEatingCheese(Benji))", "Benji (Person(x) & LikesEatingCheese(x))", "all x.((Person(x) & LikesEatingCheese(x)) -> BenjiLikesEatingCheese(x))", "(LikesEatingCheese(Benji))", "All x.(Benji(x) -> LikesEatingCheese(x))", "all x.((Person(x) & LikesEatingCheese(x)) -> BenjiLovesEatingCheese(x))"]}
{"id": "folio_train_646", "nl": "If Benji is either a person who likes eating cheese or a francophile, then Benji is neither a person who studies Spanish nor a person who studies French.", "fol": "((LikesEatingCheese(Benji) | IsFrancophile(Benji)) -> (-StudiesSpanish(Benji) & -StudiesFrench(Benji)))", "prediction": ["all x.((Person(x) & (LikesEatingCheese(x) | Francophile(x))) -> (-StudiesSpanish(x) | StudiesFrench(x)))", "all x.((Person(x) & LikesEatingCheese(x)) | (Francophile(x) & -StudiesSpanish(x) & -StudiesFrench(x))))", "all x.((Person(x) & (LikesEatingCheese(x) | Francophile(x))) -> (-StudiesSpanish(x) | StudiesFrench(x)))", "all x.((Person(x) & (LikesEatingCheese(x) | Francophile(x))) -> (-StudiesSpanish(x) & -StudiesFrench(x)))", "all x.((Person(x) & (LikesEatingCheese(x) | Fracophile(x))) -> (-StudiesSpanish(x) | StudiesFrench(x)))", "all x.((Person(x) & (LikesEatingCheese(x) | Francophile(x))) -> -(StudiesSpanish(x) | StudiesFrench(x)))", "all x.((Person(x) & LikesEatingCheese(x)) | (Francophile(x) & -StudiesSpanish(x) & -StudiesFrench(x)))", "all x.((Person(x) & (LikesEatingCheese(x) | Freecophile(x))) -> (-StudiesSpanish(x) | StudiesFrench(x)))", "all x.((Person(x) & (LikesEatingCheese(x) | Frankophile(x))) -> (-StudiesSpanish(x) | StudiesFrench(x)))", "all x.((Person(x) & LikesEatingCheese(x)) | (Francophile(x) & -StudiesSpanish(x) & -StudiesFrench(x))))", "all x.((Person(x) & (LikesEatingCheese(x) | Francophile(x))) -> (-StudiesSpanish(x) | StudiesFrench(x)))", "all x.((Benji(x) & (LikesEatingCheese(x) | Francophile(x))) -> (-StudiesSpanish(x) | StudiesFrench(x)))", "all x.((Person(x) & LikesEatingCheese(x)) | (Francophile(x) & -StudiesSpanish(x))))", "all x.((Person(x) & (LikesEatingCheese(x) | LikesFrancophile(x))) -> (-StudiesSpanish(x) | StudiesFrench(x)))", "all x.((Person(x) & (LikesEatingCheese(x) | Francophile(x))) -> (-StudiesSpanish(x) | StudiesFrench(x))))", "all x.((Person(x) & (LikesEatingCheese(x) | Frenchophile(x))) -> (-StudiesSpanish(x) | StudiesFrench(x)))"]}
{"id": "folio_train_647", "nl": "If Benji is a person who likes Spain as their favorite country or studies French, then Benji is either a person who studies Spanish or a person who likes Spain as their favorite country.", "fol": "((LikesSpainAsFavorite(Benji) | StudiesFrench(Benji)) -> (StudiesSpanish(Benji) | LikesSpainAsFavorite(Benji)))", "prediction": ["all x.((Person(x) & (LikesSpanish(x) | StudiesFavoriteCountry(x))) -> (StudiesSpanish(x) | LikesSpanish(x)))", "all x.((Person(x) & (LikesSpanishAsFavoriteCountry(x) | StudiesFrench(x))) -> (StudiesSpanish(x) | LikesSpanishAsFavoriteCountry(x)))", "all x.((Person(x) & (LikesSpanish(x) | StudiesFavouriteCountry(x))) -> (StudiesSpanish(x) | LikesSpanish(x)))", "all x.((Person(x) & (LikesSpanishAsFavoriteCountry(x) | StudiesFrench(x))) -> (StudiesSpanish(x) | LikesSpanishAsFavouriteCountry(x)))", "all x.((Person(x) & (LikesSpanishAsFavoriteCountry(x) | StudiesFrenchAsFavoriteCountry(x))) -> (StudiesSpanish(x) | LikesSpanishAsFavoriteCountry(x)))", "all x.((Person(x) & (LovesSpanish(x) | StudiesFavoriteCountry(x))) -> (StudiesSpanish(x) | LikesSpanish(x)))", "all x.((Person(x) & (LikesSpanish(x) | StudiesFavoriteCountry(x)) & Benji(x)) -> (StudiesSpanish(x) | LikesSpanish(x)))", "all x.((Person(x) & (LikesSpanish(x) | StudiesFavoriteCountry(x))) -> (StudiesSpanish(x) | LikesSpanish(x))))", "all x.((Person(x) & (LikesSpain(x) | StudiesFavoriteCountry(x))) -> (StudiesSpanish(x) | LikesSpain(x)))", "all x.((Person(x) & (likesSpanish(x) | StudiesFavoriteCountry(x))) -> (StudiesSpanish(x) | LikesSpanish(x)))", "all x.((Person(x) & (LikesSpain(x) | StudiesFavoriteCountry(x))) -> (StudiesSpanish(x) | LikesSpanish(x)))", "all x.((Person(x) & (LikesSpainAsFavoriteCountry(x) | StudiesFrench(x))) -> (StudiesSpanish(x) | LikesSpainAsFavoriteCountry(x)))", "all x.((Person(x) & (LikesSpanish(x) | StudiesFanish(x))) -> (StudiesSpanish(x) | LikesSpanish(x)))", "all x.((Person(x) & (LikesSpanish(x) | StudiesFavorite(x))) -> (StudiesSpanish(x) | LikesSpanish(x)))", "all x.((Person(x) & LikesSpanishAsFavoriteCountry(x) | LikesFavoriteCountry(x))) -> (StudiesSpanish(x) | LikesSpanishAsFavoriteCountry(x)))", "all x.((Person(x) & (LikesSpain(x) | StudiesFavoriteCountry(x))) -> (StudiesSpain(x) | LikesSpain(x)))"]}
{"id": "folio_train_648", "nl": "Gasteren is village located in the province of Drenthe.", "fol": "(IsVillage(Gasteren) & IsProvince(Drenthe) & LocatedInProvince(Gasteren,Drenthe))", "prediction": ["all x y.((Village(x) & Village(y) & LocatedInProvince(x,y)) -> Gasteren(x))", "all x y.((Village(x) & Village(y) & LocatedInProvince(x,y)) -> Drenthe(x))", "all x y.((Village(x) & Village(y) & InProvince(x,y)) -> Gasteren(x))", "all x y.((Village(x) & Village(y) & LocatedInProvince(x,y)) -> Drenthe(y))", "all x.(Gasteren(x) -> Village(x))", "all x y.((Village(x) & Village(y) & LocatedInProvince(x,y) & Drenthe(y)) -> Gasteren(x))", "all x y.((Village(x) & Village(y) & LocatedIn(x,y)) -> DrentheProvince(x))", "all x.(Gasteren(x) -> VillageLocatedInProvinceOfDrenthe(x))", "all x.(Gasteren(x) -> VillageInProvinceOfDrenthe(x))", "all x y.((Village(x) & Village(y)) -> LocatedInProvince(x,y))", "all x.(Gasteren(x) -> Village(x))", "all x y.((Village(x) & Village(y) & LocatedInProvince(x,y) & Drenthe(x)) -> Gasteren(x))", "all x y.((Village(x) & Province(y)) -> Gasteren(x))", "all x.(Gasteren(x) -> VillageInProvinceOfDrenthe(x))", "all x.(Gasteren(x) -> VillageLocatedInProvinceOfDrenthe(x))", "all x y.((Village(x) & Village(y) & InProvince(x,y) & Drenthe(y)) -> Gasteren(x))"]}
{"id": "folio_train_649", "nl": "Drenthe is a Dutch province. ", "fol": "(IsProvince(Drenthe) & IsDutchProvince(Drenthe))", "prediction": ["all x.(Drenthe(x) -> DutchProvince(x))", "(DutchProvince(Drenthe) & DutchProvince(Drenthe))", "all x.(Drenthe(x) -> DutchProvince(x))", "all x.(DutchProvince(x) -> Drenthe(x))", "(HollandProvince(Drenthe) & DutchProvince(Drenthe))", "Drenthe (DutchProvince)", "(DutchProvince(Drenthe) & LocatedIn(Drenthe))", "(DutchProvince(Drenthe) & Dutch(Drenthe))", "(DutchProvince(Drenthe) & NetherlandsProvince(Drenthe))", "all x.(Dreenthe(x) -> DutchProvince(x))", "(DutchProvince(Drenthe) & LocatedIn(Drenthe,Dutch))", "all x.(Drenthe(x) -> DutchProvince(x))", "all x.(Drenthe(x) -> NetherlandsProvince(x))", "all x.(Denthe(x) -> DutchProvince(x))", "(DutchProvince(Drenthe) & DutchProvince(Drenthe,Dutch))", "(DutchProvince(Drenthe) & DutchProvost(Drenthe))"]}
{"id": "folio_train_650", "nl": "No cities are villages.", "fol": "all x.(IsCity(x) -> -IsVillage(x))", "prediction": ["-exists x.(City(x) & Village(x))", "-exists x.(City(x) & Village(y))", "all x.(City(x) -> -Destination(x))", "all x.(City(x) -> -Dormant(x))", "(-exists x.(City(x) & Village(x)))", "all x.(City(x) -> -Dorm(x))", "-exists x.(City(x) & Dwelling(x))", "all x.(City(x) -> -Dwelling(x))", "all x.(City(x) -> -District(x))", "exists x.(City(x) & -Dormant(x))", "-exists x.(City(x) & -Dormant(x))", "exists x.(City(x) & -Dwelling(x))", "-exists x.(City(x) & Dorf(x))", "-exists x y.(City(x) & Village(y))", "-all x.(City(x) -> Village(x))", "-(City(x) & Village(x))"]}
{"id": "folio_train_651", "nl": "The population of a village in Drenthe was 155 people.", "fol": "exists x.(HasPopulation155(x) & IsVillage(x) & LocatedInProvince(x,Drenthe))", "prediction": ["all x y.((Dornthe(x) & Village(y)) -> Population(x,155))", "all x y.((Dorenthe(x) & Village(y)) -> Population(x,155))", "all x y.((Dominion(x) & Village(y) & Drenthe(y)) -> Population(x,155))", "all x y.((Dornthe(x) & Village(y)) -> Population(x,y))", "all x y.((Domestic(x) & Village(y) & Drenthe(y)) -> Population(x,155))", "all x y.((Village(x) & Village(y) & Drenthe(x)) -> Population(x,155))", "all x y.((Dorf(x) & Village(y) & Drenthe(y)) -> Population(x,155))", "all x y.((Destination(x) & Village(y) & Drenthe(y)) -> Population(x,155))", "all x y.((Dorenthe(x) & Village(y)) -> Population(x,y))", "all x.((Village(x) & InDrenthe(x)) -> Population(x,155))", "all x y.((Destination(x) & Village(y)) -> Population(x,y))", "all x y.((Dorf(x) & Village(y)) -> Population(x,y))", "all x.((Village(x) & Drenthe(x)) -> Population(x,155))", "all x y.((Dorden(x) & Village(y)) -> Population(x,155))", "all x y.((Dorm(x) & Village(y)) -> Population(x,y))", "all x y.((Dominion(x) & Village(y) & Drenthe(y)) -> Population(x,y))"]}
{"id": "folio_train_652", "nl": "Gasteren is a Dutch village.", "fol": "(IsVillage(Gasteren) & IsDutchProvince(Gasteren))", "prediction": ["all x.(Gasteren(x) -> DutchDorf(x))", "all x.(Gasteren(x) -> DutchDorf(x))", "all x.(Gasteren(x) -> DutchVillage(x))", "all x.(Gasteren(x) -> DutchDestination(x))", "all x.(Gasteneren(x) -> DutchDorf(x))", "all x.(G\u00e4steren(x) -> DutchDorf(x))", "all x.(Holland(x) -> Gasteren(x))", "all x.(Gasteren(x) -> DutchVillage(x))", "all x.(Gesteren(x) -> DutchDorf(x))", "all x.(Gasteren(x) -> DutchDormand(x))", "all x.(Gasteren(x) -> DutchDorm(x))", "(DutchDorf(Gasteren) & DutchDorf(Gasteren))", "all x.(Gasten(x) -> DutchDorf(x))", "all x.(Gastheren(x) -> DutchDorf(x))", "all x.(G\u00e4steren(x) -> DutchVillage(x))", "all x.(Gesteren(x) -> DutchVillage(x))"]}
{"id": "folio_train_653", "nl": "Gasteren is a city.", "fol": "IsCity(Gasteren)", "prediction": ["all x.(Gasteren(x) -> City(x))", "all x.(Gasteren(x) -> City(x))", "all x.(Gastheren(x) -> City(x))", "Gasteren is a city.", "all x.(G\u00e4steren(x) -> City(x))", "all x.(Gastroen(x) -> City(x))", "all x.(Gasteneren(x) -> City(x))", "all x.(Gastheren(x) -> City(x))", "(City(Gasteren) & City(Gasteren))", "(City(Gasteren) & City(Gasteren))", "all x.(Gast\u00e9ren(x) -> City(x))", "All x.(Gasteren(x) -> City(x))", "(City(Gasteren) -> City(Gasteren))", "(City(Gastheren) & City(Gastheren))", "all x.(Gast\u00e9ren(x) -> City(x))", "(City(Gasteneren) & City(Gasteneren))"]}
{"id": "folio_train_654", "nl": "Gasteren has a population of 155.", "fol": "Population(Gasteren,155)", "prediction": ["all x.(Gasteren(x) -> Population(x,155))", "all x.(Gasteren(x) -> Population(x,155))", "all x.(Gastheren(x) -> Population(x,155))", "all x.(G\u00e4steren(x) -> Population(x,155))", "all x.(Gasseren(x) -> Population(x,155))", "all x.(Gastroen(x) -> Population(x,155))", "all x y.((Gasteren(x) & Population(y)) -> Population(x,y))", "all x.(GasTeren(x) -> Population(x,155))", "all x.(Gasteren(x) -> Population(x,155))", "all x.(Gastheren(x) -> Population(x,155))", "all x.(Gastreren(x) -> Population(x,155))", "all x.(Gast\u00e9ren(x) -> Population(x,155))", "all x y.((Gasteren(x) & Population(y)) -> Population(x,y))", "all x y.((Gastheren(x) & Population(y)) -> Population(x,y))", "all x y.((Gasteren(x) & Population(y) & 155(y)) -> HasPopulation(x,y))", "all x y.((Gasteren(x) & Population(y)) -> (Population(x,y) & Population(x,y)))"]}
{"id": "folio_train_655", "nl": "The only types of mammals that lay eggs are platypuses and echidnas.", "fol": "all x.((IsMammal(x) & LaysEgg(x)) -> (IsPlatypus(x) | IsEchidna(x)))", "prediction": ["all x.((Mammal(x) & LaysEggs(x)) -> (Plutus(x) | Echidna(x)))", "all x.((Mammal(x) & LaysEggs(x)) -> (Plactus(x) | Echidna(x)))", "all x.((Mammal(x) & LaysEggs(x)) -> (Plotypus(x) | Echidna(x)))", "all x.((Mammal(x) & LaysEggs(x)) -> (Platchuse(x) | Echidna(x)))", "all x.((Mammal(x) & LaysEggs(x)) -> (Platus(x) | Echidna(x)))", "all x.((Mammal(x) & LaysEggs(x)) -> (Platypus(x) | Echidna(x)))", "all x.((Mammal(x) & LaysEggs(x)) -> (Platchuses(x) | Echidnas(x)))", "all x.((Mammal(x) & LaysEggs(x)) -> (Plutypus(x) | Echidna(x)))", "all x.((Mammal(x) & LaysEggs(x)) -> (Plotypuse(x) | Echidna(x)))", "all x.((Mammal(x) & LaysEggs(x)) -> (Platchus(x) | Echidna(x)))", "all x.((Mammal(x) & LaysEggs(x)) -> (Plavix(x) | Echidna(x)))", "all x.((Mammal(x) & LaysEggs(x)) -> (Platypus(x) | Echidna(x)))", "all x.((Mammal(x) & LaysEggs(x)) -> (Plutypuse(x) | Echidna(x)))", "all x.((Mammal(x) & LaysEggs(x)) -> (Plutosus(x) | Echidna(x)))", "all x y.((Mammal(x) & Mammal(y) & LaysEggs(x,y)) -> (Plutus(x) | Echidna(x)))", "all x.((Mammal(x) & LaysEggs(x)) -> (Plutus(x) | Ecchidna(x)))"]}
{"id": "folio_train_656", "nl": "Platypuses are not hyrax.", "fol": "all x.(IsPlatypus(x) -> -IsHyrax(x))", "prediction": ["all x.(Platypus(x) -> -Hyrax(x))", "all x.(Platypus(x) -> -Hyrax(x))", "all x.(Platypuse(x) -> -Hyrax(x))", "all x.(Plactus(x) -> -Hyrax(x))", "all x.(Plasticus(x) -> -Hyrax(x))", "all x.((Platypus(x) & -Hyrax(x)) -> -Hyrax(x))", "all x.(Plutose(x) -> -Hyrax(x))", "all x.(Plactite(x) -> -Hyrax(x))", "all x.(Plactace(x) -> -Hyrax(x))", "all x.(Plactase(x) -> -Hyrax(x))", "all x.(Pltypuse(x) -> -Hyrax(x))", "all x.(Plutypuse(x) -> -Hyrax(x))", "all x.(Plactuse(x) -> -Hyrax(x))", "all x.(Plutypus(x) -> -Hyrax(x))", "all x.(Plavix(x) -> -Hyrax(x))", "all x.(Plasticuse(x) -> -Hyrax(x))"]}
{"id": "folio_train_657", "nl": "Echidnas are not hyrax.", "fol": "all x.(IsEchidna(x) -> -IsHyrax(x))", "prediction": ["all x.(Echidna(x) -> -Hyrax(x))", "all x y.((Echidna(x) & Hyrax(y)) -> -Hyrax(x))", "all x.((Echidna(x) & -Hyrax(x)) -> -Hyrax(x))", "(all x.(Echidna(x) -> -Hyrax(x)))", "all x.(Echidna(x) -> -Hyrax(x))", "All x.(Echidna(x) -> -Hyrax(x))", "all x y.((Echidna(x) & Hyrax(y)) -> -Hyrax(x,y))", "all x.(Echidna(x) -> (-Hyrax(x)))", "all x y.((Echidna(x) & Hyrax(y)) -> -(Hyrax(x) & Hyrax(y)))", "all x.(Echidna(x) -> -Holyrax(x))", "all x y.((Echidna(x) & Hyrax(y)) -> -(Hyrax(x) & Hyrax(x)))", "all x.(Chidna(x) -> -Hyrax(x))", "all x.(Echidnas(x) -> -Hyrax(x))", "all x.(Echidna(x) -> -Hoyrax(x))", "all x.((Echidna(x) & -Hyrax(x)) -> -(Hyrax(x) & Hyrax(x)))", "all x y.((Echidna(x) & Hyrax(y)) -> -(Hyrax(x) & Hyrax(y))))"]}
{"id": "folio_train_658", "nl": "No mammals are invertebrates.", "fol": "all x.(IsMammal(x) -> -IsInvertebrate(x))", "prediction": ["-exists x.(Mammal(x) & Invertebrate(x))", "all x.(Mammal(x) -> -Invertebrate(x))", "-exists x.(Mammal(x) & Invertebrates(x))", "(-exists x.(Mammal(x) & Invertebrate(x)))", "all x.(Mammal(x) -> -Invertebrates(x))", "all x y.((Mammal(x) & Invertebrate(y)) -> -exists z.(Mammal(z) & Invertebrate(z)) & -exists w.(Mammal(w) & Invertebrate(w) & Invertebrate(w) & Invertebrate(w))))", "all x y.((Mammal(x) & Invertebrate(y)) -> -exists z.(Mammal(z) & Invertebrate(z) & Invertebrate(z) & Invertebrate(z) & Invertebrate(z) & Invertebrate(z) & Invertebrate(z) & Invertebrate(z) & Invertebrate(z)))", "all x y.((Mammal(x) & Invertebrate(y)) -> -exists z.(Mammal(z) & Invertebrate(z)) & -exists w.(Mammal(w) & Invertebrate(w) & Invertebrate(w) & Invertebrate(w) & Invertebrate(w))))", "all x y.((Mammal(x) & Invertebrate(y)) -> -exists z.(Mammal(z) & Invertebrate(z)) & -exists w.(Mammal(w) & Invertebrate(w) & Invertebrate(w))))", "all x y.((Mammal(x) & Invertebrate(y)) -> -exists z.(Mammal(z) & Invertebrate(z) & Invertebrate(z) & Invertebrate(z) & Invertebrate(z) & Invertebrate(z) & Invertebrate(z) & Invertebrate(z)))", "all x y.((Mammal(x) & Invertebrate(y)) -> -exists z.(Mammal(z) & Invertebrate(z) & Invertebrate(z) & Invertebrate(z) & Invertebrate(z) & Invertebrate(z) & Invertebrate(z)))", "all x y.((Mammal(x) & Invertebrate(y)) -> -exists z.(Mammal(z) & Invertebrate(z) & Invertebrate(z) & Invertebrate(z) & Invertebrate(z) & Invertebrate(z)))", "all x y.((Mammal(x) & Invertebrate(y)) -> -exists z.(Mammal(z) & Invertebrate(z) & Invertebrate(z) & Invertebrate(z) & Invertebrate(z) & Invertebrate(z) & Invertebrate(z) & Invertebrate(x)))", "all x y.((Mammal(x) & Invertebrate(y)) -> -exists z.(Mammal(z) & Invertebrate(z)) & -exists w.(Mammal(w) & Invertebrate(w)) & Invertebrate(w) & Invertebrate(w) & Invertebrate(w)))", "all x y.((Mammal(x) & Invertebrate(y)) -> -exists z.(Mammal(z) & Invertebrate(z)) & -exists w.(Mammal(w) & Invertebrate(w) & Invertebrate(w)) & Invertebrate(w) & Invertebrate(w)))", "all x y.((Mammal(x) & Invertebrate(y)) -> -exists z.(Mammal(z) & Invertebrate(z)) & -exists w.(Mammal(w) & Invertebrate(w) & Invertebrate(x) & Invertebrate(x) & Invertebrate(x) & Invertebrate(x)))"]}
{"id": "folio_train_659", "nl": "All animals are either vertebrates or invertebrates.", "fol": "all x.(((IsAnimal(x) -> IsInvertebrate(x)) & -IsVertebrate(x)) | (-(IsAnimal(x) -> IsInvertebrate(x)) & IsVertebrate(x)))", "prediction": ["all x.(Animal(x) -> (Vertebrate(x) | Invertebrate(x)))", "all x.(Animal(x) -> (Vertebrate(x) | Invertebrates(x)))", "all x.(Animal(x) -> (Vertebrates(x) | Invertebrates(x)))", "all x.(Animal(x) -> (Vertebrates(x) | Invertebrate(x)))", "all x.(Animal(x) -> (Vertebrate(x) | Invertebrate(x)))", "all x.(Animal(x) -> ((Vertebrate(x) | Invertebrate(x))))", "all x.(Animal(x) -> ((Vertebrate(x) | Invertebrates(x))))", "all x.(Animal(x) -> (Vertebrate(x) | Invertebrates(x)))", "all x.(Animal(x) -> (Vertebrite(x) | Invertebrate(x)))", "all x.(Animal(x) -> (Vertebrate(x) | Invertebrate(x)))", "(all x.(Animal(x) -> (Vertebrate(x) | Invertebrate(x))))", "all x.(Animal(x) -> (Vertebrates(x) | Invertebrates(x)))", "all x.(Animal(x) -> (Vertebrotes(x) | Invertebrates(x)))", "exists x.(Animal(x) & (Vertebrate(x) | Invertebrate(x)))", "all x.(Animal(x) -> (Veterbe(x) | Invertebrate(x)))", "all x.(Animal(x) -> (Veterbrate(x) | Invertebrate(x)))"]}
{"id": "folio_train_660", "nl": "Mammals are animals.", "fol": "all x.(IsMammal(x) -> IsAnimal(x))", "prediction": ["all x.(Mammal(x) -> Animal(x))", "all x y.((Mammal(x) & Animal(y)) -> Animal(x))", "all x y.((Mammal(x) & Animal(y)) -> Animal(x,y))", "all x.(Mammal(x) -> Animal(x))", "all x y.((Mammal(x) & Animal(y)) -> (Animal(x) & Animal(y)))", "all x y.((Mammal(x) & Animal(y)) -> Is(x,y))", "all x y.((Mammal(x) & Animal(y)) -> (Animal(x) & Animal(x)))", "all x y.((Mammal(x) & Animal(y)) -> (Animal(x) | Animal(y)))", "exists x.(Mammal(x) & Animal(x))", "all x y.((Mammal(x) & Animal(y)) -> (Animal(x) | Animal(x)))", "all x.((Mammal(x) & Animal(x)) -> Animal(x))", "all x y.((Mammal(x) & Animal(y)) -> (Animal(x,y) | Animal(x,y)))", "all x.(Mammal(x) -> (Animal(x) & Animal(x)))", "all x y.((Mammal(x) & Animal(y)) -> Animal(z))", "all x y.((Mammal(x) & Animal(y)) -> (Animal(x,y) & Animal(y)))", "all x.((Mammal(x) & Animal(x)) -> (Animal(x) & Animal(x)))"]}
{"id": "folio_train_661", "nl": "Hyraxes are mammals.", "fol": "all x.(IsHyrax(x) -> IsMammal(x))", "prediction": ["all x.(Hyrax(x) -> Mammal(x))", "all x y.((Hyrax(x) & Mammal(y)) -> Mammal(x))", "all x y.((Hyrax(x) & Mammal(y)) -> (Mammal(x) & Mammal(y)))", "all x y.((Hyrax(x) & Mammal(y)) -> Mammal(x,y))", "all x.(Hyrax(x) -> (Mammal(x) & Mammal(x)))", "all x.(Hyrax(x) -> Mammal(x))", "all x y z.((Hyrax(x) & Mammal(y) & Mammal(z)) -> (Mammal(x) & Mammal(y) & Mammal(z)))", "all x y.((Hyrax(x) & Mammal(y)) -> (Mammal(x) & Mammal(x)))", "all x y z.((Hyrax(x) & Mammal(y) & Mammal(z)) -> Mammal(x))", "all x y z.((Hyrax(x) & Mammal(y) & Mammal(z)) -> Mammal(x,y,z))", "all x y z.((Hyrax(x) & Mammal(y) & Mammal(z)) -> (Mammal(x) & Mammal(y)))", "all x.(Hyraxes(x) -> Mammal(x))", "all x y.((Hyraxes(x) & Mammal(y)) -> Mammal(x))", "all x y.((Hyrax(x) & Mammal(y)) -> (Mammal(x,y) & Mammal(y)))", "all x y.((Hyrax(x) & Mammal(y)) -> (Mammal(x,y) & Mammal(x,y)))", "all x y z.((Hyrax(x) & Mammal(y) & Mammal(z)) -> (Mammal(x) | Mammal(y)))"]}
{"id": "folio_train_662", "nl": "Grebes lay eggs.", "fol": "all x.(IsGrebe(x) -> LaysEgg(x))", "prediction": ["all x.(Grebe(x) -> LaysEggs(x))", "all x y.((Grebe(x) & Egg(y)) -> Lays(x,y))", "all x.(Grebe(x) -> LayEggs(x))", "all x.(Gribe(x) -> LaysEggs(x))", "all x.(Grebe(x) -> LaysEggs(x))", "all x y.((Grebe(x) & Egg(y)) -> Lay(x,y))", "all x.(Grape(x) -> LaysEggs(x))", "all x.(Grabe(x) -> LaysEggs(x))", "exists x.(Grebe(x) & LaysEggs(x))", "all x.(Greb(x) -> LaysEggs(x))", "all x.(Gerbe(x) -> LaysEggs(x))", "all x.(Greek(x) -> LaysEggs(x))", "all x.(Grebe(x) -> LaysEggs(x))", "all x.((Grebe(x) & LaysEggs(x)) -> Grebe(x))", "all x.(Grebe(x) -> LayesEggs(x))", "all x.(Grab(x) -> LaysEggs(x))"]}
{"id": "folio_train_663", "nl": "Grebes are not platypuses and also not echidnas.", "fol": "all x.(IsGrebe(x) -> (-IsPlatypus(x) & -IsEchidna(x)))", "prediction": ["all x.(Grebe(x) -> (-Plutypus(x) & -Echidna(x)))", "all x.(Grebe(x) -> (-Plactus(x) & -Echidna(x)))", "all x.(Grebe(x) -> (-Plutypuse(x) & -Echidna(x)))", "all x.(Grebe(x) -> (-Plotypus(x) & -Echidna(x)))", "all x.(Grebe(x) -> (-Platypus(x) & -Echidna(x)))", "all x.(Grebe(x) -> (-Plactamus(x) & -Echidna(x)))", "all x.(Grebe(x) -> (-Platus(x) & -Echidna(x)))", "all x.(Grebe(x) -> (-Polytypus(x) & -Echidna(x)))", "all x.(Grebe(x) -> (-Pltypuse(x) & -Echidna(x)))", "all x.(Grebe(x) -> (-Plaviform(x) & -Echidna(x)))", "all x.(Grebe(x) -> (-Plutus(x) & -Echidna(x)))", "all x.(Grebe(x) -> (-Platypus(x) & -Echidna(x)))", "all x.(Grebe(x) -> (-Plotypuse(x) & -Echidna(x)))", "all x.(Grebe(x) -> (-Plactiduse(x) & -Echidna(x)))", "all x.(Grebe(x) -> (-Plutypus(x) & -Echidna(x)))", "(all x.(Grebe(x) -> -Plutypus(x)) & -Echidna(x))"]}
{"id": "folio_train_664", "nl": "Hyraxes do not lay eggs.", "fol": "all x.(IsHyrax(x) -> -LaysEgg(x))", "prediction": ["all x.(Hyrax(x) -> -LaysEggs(x))", "all x y.((Hyrax(x) & Egg(y)) -> -Lays(x,y))", "all x.(Hyrax(x) -> -LayEggs(x))", "all x.(Hyraxes(x) -> -LaysEggs(x))", "all x y.((Hyraxes(x) & Egg(y)) -> -Lays(x,y))", "all x.(Hyrax(x) -> (-LaysEggs(x)))", "all x.(Hyrax(x) -> -LaysEggs(x))", "all x y.((Hyrax(x) & Egg(y)) -> -Lay(x,y))", "all x.(Hyraxes(x) -> -LayEggs(x))", "all x.(Hyrax(x) -> -LimitsEggs(x))", "all x y.((Hyraxes(x) & Egg(y)) -> -Lay(x,y))", "all x.(Horax(x) -> -LaysEggs(x))", "All x.(Hyrax(x) -> -LaysEggs(x))", "all x.(Hyrax(x) -> -Lay(x,Eggs))", "exists x.(Hyrax(x) & -LaysEggs(x))", "all x y.((Hyrax(x) & Egg(y)) -> -LaysIn(x,y))"]}
{"id": "folio_train_665", "nl": "Grebes are not mammals.", "fol": "all x.(IsGrebe(x) -> -IsMammal(x))", "prediction": ["all x.(Grebe(x) -> -Mammal(x))", "all x y.((Grebe(x) & Mammal(y)) -> -Mammal(x))", "all x.(Gribe(x) -> -Mammal(x))", "all x.((Grebe(x) & -Mammal(x)) -> -Mammal(x))", "all x.(Grebe(x) -> -Mammal(x))", "all x y.((Grebe(x) & Mammal(y)) -> -Mammal(x,y))", "all x.(Grape(x) -> -Mammal(x))", "all x.(Greb(x) -> -Mammal(x))", "all x.(Grabe(x) -> -Mammal(x))", "all x.(Grebe(x) -> (-Mammal(x) & -Mammal(x)))", "(Mammal(grebe) & -Mammal(grebe))", "(all x.(Grebe(x) -> -Mammal(x)))", "all x.(Grebe(x) -> (-Mammal(x)))", "all x.(Grebe(x) -> (-Mammal(x) & Mammal(x)))", "all x.(Gerbe(x) -> -Mammal(x))", "All x.(Grebe(x) -> -Mammal(x))"]}
{"id": "folio_train_666", "nl": "Platypuses are vertebrates.", "fol": "all x.(IsPlatypus(x) -> IsVertebrate(x))", "prediction": ["all x.(Platypus(x) -> Vertebrate(x))", "all x.(Platypus(x) -> Vertebrate(x))", "all x.(Plasticus(x) -> Vertebrate(x))", "all x.(Plutose(x) -> Vertebrate(x))", "all x.(Platypuse(x) -> Vertebrate(x))", "all x.(Plactace(x) -> Vertebrate(x))", "all x.(Plactite(x) -> Vertebrate(x))", "all x.(Plactus(x) -> Vertebrate(x))", "all x.(Plotypus(x) -> Vertebrate(x))", "all x.(Plutypus(x) -> Vertebrate(x))", "all x.(Plavix(x) -> Vertebrate(x))", "all x.(Plutus(x) -> Vertebrate(x))", "all x.(Plasticuse(x) -> Vertebrate(x))", "all x.(Platyptus(x) -> Vertebrate(x))", "all x.(Platypus(x) -> Vertebrates(x))", "all x.(Platypus(x) -> Vertebrates(x))"]}
{"id": "folio_train_667", "nl": "Bobby Flynn is a singer-songwriter. ", "fol": "(IsSinger(BobbyFlynn) & IsSongWriter(BobbyFlynn))", "prediction": ["all x.((Singer(x) & Songwriter(x)) -> BobbyFlynn(x))", "(Singer(BobbyFlynn) & Songwriter(BobbyFlynn))", "BobbyFlynn(Singer(Flynn) & Songwriter(Flynn))", "BobbyFlynn(BobbyFlynn) is a SingerSongwriter(BobbyFlynn)", "(SingerSongwriter(BobbyFlynn)", "BobbyFlynn(BobbyFlynn) & SingerSongwriter(BobbyFlynn))", "BobbyFlynn(Singer(f) & Songwriter(f))", "BobbyFlynn(bossy) & SingerSongwriter(bossy)", "BobbyFlynn(x) & SingerSongwriter(x))", "BobbyFlynn isSingerSongwriter(BobbyFlynn)", "BobbyFlynn(singer) & Songwriter(s)", "(SingerSongwriter(BobbyFlynn))", "BobbyFlynn(Singer(Flynn) & Singer(Flynn))", "BobbyFlynn isSingerSongwriter(bobbyFlynn)", "BobbyFlynn(Singer(Flynn) & SingerSongwriter(Flynn))", "BobbyFlynn(BobbyFlynn) & SingerSongwriter(BobbyFlynn)"]}
{"id": "folio_train_668", "nl": "Bobby Flynn finished 7th while competing on Australian Idol.", "fol": "(FinishedIn7thPlace(BobbyFlynn) & CompetedInAustralianIdol(BobbyFlynn))", "prediction": ["all x.((BobbyFlynn(x) & CompetesOnAustralianIdol(x)) -> Finishes7th(x))", "all x.((BobbyFlynn(x) & CompetesOnAustralianIdol(x)) -> FinishesSeventh(x))", "all x y.((BobbyFlynn(x) & AustralianIdol(y)) -> Finishes7th(x,y))", "all x.((BobbyFlynn(x) & AustralianIdol(x)) -> Finishes7th(x))", "all x y.((BobbyFlynn(x) & AustralianIdol(y)) -> (FinishedSeventh(x,y) & CompetedOn(x,y)))", "all x y.((BobbyFlynn(x) & AustralianIdol(y)) -> FinishesSeventh(x,y))", "all x.((BobbyFlynn(x) & AustralianIdol(x)) -> FinishesSeventh(x))", "all x y.((BobbyFlynn(x) & AustralianIdol(y)) -> (FinishedSeventh(x,y) & CompetesOn(x,y)))", "All x.((BobbyFlynn(x) & CompetesOnAustralianIdol(x)) -> Finishes7th(x))", "all x.((BobbyFlynn(x) & CompetesOnAustralianIdol(x)) -> Finishes7Th(x))", "all x y.((BobbyFlynn(x) & AustralianIdol(y)) -> (FinishedSeventh(x,y) | CompetedOn(x,y)))", "all x.((BobbyFlynn(x) & AustralianIdol(y)) -> Finishes7th(x,y))", "all x.((BobbyFlynn(x) & CompetesOnAsianIdol(x)) -> Finishes7th(x))", "all x.((BobbyFlynn(x) & CompetedOnAustralianIdol(x)) -> Finishes7th(x))", "all x.((BobbyFlynn(x) & AustralianIdol(y)) -> FinishesSeventh(x,y))", "All x.((BobbyFlynn(x) & CompetesOnAustralianIdol(x)) -> FinishesSeventh(x))"]}
{"id": "folio_train_669", "nl": "Australian Idol competitors are Australian citizens.", "fol": "all x.(CompetedInAustralianIdol(x) -> IsAustralianCitizen(x))", "prediction": ["all x.(AustralianIdolCompetitor(x) -> AustralianCitizen(x))", "all x.(AustralianIdolCompeter(x) -> AustralianCitizen(x))", "all x.(AustralianIdolCompetent(x) -> AustralianCitizen(x))", "all x.((AustralianIdolCompetitor(x) & AustralianCitizen(x)) -> Competes(x))", "all x.((AustralianIdolCompeter(x) & AustralianCitizen(x)) -> Competes(x))", "all x.((AustralianIdolCompetent(x) & AustralianCitizen(x)) -> Competes(x))", "all x.(AustralianIdolCompetitioner(x) -> AustralianCitizen(x))", "all x y.((AustralianIdolCompeter(x) & AustralianCitizen(y)) -> Competes(x,y))", "all x.((AustralianIdolCompeter(x) & AustralianCitizen(x)) -> CompetesWith(x,y))", "all x.((AustralianIdolCompetitor(x) & AustralianCitizen(x)) -> CompetesWith(x,y))", "all x.(AustralianIdolCompanion(x) -> AustralianCitizen(x))", "all x.((AustralianIdolCompanion(x) & AustralianCitizen(x)) -> Competes(x))", "all x.(AustralianIdolCompanioner(x) -> AustralianCitizen(x))", "all x.(AsianIdolCompetitor(x) -> AustralianCitizen(x))", "all x.((AustralianIdolCompetitor(x) & AustralianCitizen(x)) -> Competes(x,y))", "all x.((AustralianIdolCompeter(x) & AustralianCitizen(x)) -> Competes(x,y))"]}
{"id": "folio_train_670", "nl": "The Omega Three band made a nationwide tour in 2007.", "fol": "MadeNationwideTourIn2007(TheOmegaThreeBand)", "prediction": ["all x y.((OmegaThree(x) & Band(y)) -> MadeNationalTourIn2007(x,y))", "all x y.((OmegaThree(x) & Band(y)) -> MadeNationalToursIn2007(x,y))", "all x y.((OmegaThree(x) & Band(y)) -> MadeNationalTour(x,y))", "all x.(OmegaThree(x) -> MadeNationalTourIn2007(x))", "all x y.((OmegaThreeBand(x) & NationwideTour(y)) -> MadeIn2007(x,y))", "all x.((Band(x) & OmegaThree(x)) -> MadeNationalTourIn2007(x))", "all x y.((Band(x) & OmegaThree(y)) -> MadeNationalTourIn2007(x,y))", "all x y.((Band(x) & OmegaThree(y)) -> MadeNationalToursIn2007(x,y))", "all x.(OmegaThree(x) -> MadeNationalToursIn2007(x))", "all x.((OmegaThree(x) & MadeNationalTour(x,2007)) -> OmegaThree(x))", "all x.((Band(x) & OmegaThree(x)) -> MadeNationalToursIn2007(x))", "all x y.((Band(x) & OmegaThree(y)) -> MadeNationalTour(x,y))", "all x.((OmegaThreeBand(x) & MadeNationalTour(x,2007)) -> OmegaThree(x))", "all x y.((OmegaThree(x) & Band(y)) -> MadeNationalTours(x,y))", "all x.((OmegaThreeBand(x) & MadeNationalTour(x,2007)) -> OmegaThreeBand(x))", "all x.((OmegaThreeBand(x) & MadeNationalTourIn2007(x)) -> OmegaThreeBand(x))"]}
{"id": "folio_train_671", "nl": "Bobby Flynn is a member of The Omega Three band.", "fol": "IsMemberOfBand(BobbyFlynn,TheOmegaThreeBand)", "prediction": ["all x.((BobbyFlynn(x) & OmegaThree(x)) -> MemberOfBand(x))", "All x.((BobbyFlynn(x) & OmegaThree(x)) -> MemberOfBand(x))", "all x.((BobbyFlynn(x) & OmegaThree(x)) -> MemberOf(x,OmegaThree))", "all x.((BobbyFlynn(x) & OmegaThree(x)) -> MemberOf(x,y))", "All x.((BobbyFlynn(x) & OmegaThree(x)) -> MemberOf(x,OmegaThree))", "All x.((BobbyFlynn(x) & OmegaThree(x)) -> MemberOf(x,y))", "all x.((BobbyFlynn(x) & OmegaThreeBand(x)) -> Member(x))", "All x.((BobbyFlynn(x) & OmegaThreeBand(x)) -> Member(x))", "all x.((BobbyFlynn(x) & OmegaThreeBand(x)) -> MemberOf(x,y))", "all x.((BobbyFlynn(x) & OmegaThree(x)) -> MemberOf(x,Band))", "All x.(BobbyFlynn(x) -> OmegaThreeBand(x))", "All x.(BobbyFlynn(x) -> OmegaThree(x))", "all x.((BobbyFlynn(x) & OmegaThree(x)) -> MemberOf(x,Band,Omega3))", "All x.((BobbyFlynn(x) & OmegaThree(x)) -> MemberOf(x,Band))", "all x.((BobbyFlynn(x) & OmegaThree(y)) -> MemberOfBand(x,y))", "All x.(BobbyFlynn(x) -> MemberOmegaThreeBand(x))"]}
{"id": "folio_train_672", "nl": "Bobby Flynn was born in Queensland.", "fol": "BornInLocation(BobbyFlynn,Queensland)", "prediction": ["Bobby Flynn was born in Queensland.", "(BobbyFlynn(Bobby) & BornInQueensland(Bobby))", "BobbyFlynn(b) & BornInQueensland(b))", "BobbyFlynn(Bobby) & BornInQueensland(Bobby)", "Bobby Flynn (BirthInQueensland(b) & BornInQueensland(b))", "Bobby Flynn (BirthOfQueensland(BobbyFlynn))", "BobbyFlynn wasBirthInQueensland(BobbyFlynn,Queensland)", "Bobby Flynn (BirthInQueensland(BobbyFlynn))", "BobbyFlynn wasBirthInQueensland(BobbyFlynn)", "BobbyFlynn wasbornInQueensland(BobbyFlynn)", "BobbyFlynn (BirthInQueensland(BobbyFlynn))", "BobbyFlynn wasbornInQueensland(BobbyFlynn,Queensland)", "(BobbyFlynn(Bobby) & BornInQueensland(bobby))", "BobbyFlynn(b) was bornInQueensland(b))", "(BobbyFlynn(Bobby) & BornInQueensland(BodyFlynn))", "BobbyFlynn(Bobby) & BornInQueensland(Bobby))"]}
{"id": "folio_train_673", "nl": "Bobby Flynn is an Australian citizen.", "fol": "IsAustralianCitizen(BobbyFlynn)", "prediction": ["all x.((BobbyFlynn(x) & AustralianCitizen(x)) -> Flynn(x))", "BobbyFlynn(x) -> AustralianCitizen(x))", "BobbyFlynn(Bobby) & AustralianCitizen(Bobby)", "all x.((BobbyFlynn(x) & AustralianCitizen(x)) -> BobbyFlynn(x))", "(AustralianCitizen(BobbyFlynn)", "all x.((BobbyFlynn(x) & AustralianCitizen(x)) -> -BobbyFlynn(x))", "BobbyFlynn isAustralianCitizen(x)", "all x.((BobbyFlynn(x) & AustralianCitizen(x)) -> (Citizen(x) & Citizen(x)))", "BobbyFlynn(b) & AustralianCitizen(b))", "BobbyFlynn(x) & AustralianCitizen(x))", "all x.((BobbyFlynn(x) & AustralianCitizen(x)) -> -AustralianCitizen(x))", "all x.((BobbyFlynn(x) & AustralianCitizen(x)) -> Is(x,BobbyFlynn))", "all x.((BobbyFlynn(x) & AustralianCitizen(x)) -> Becomes(x,BobbyFlynn))", "BobbyFlynn(boss) & AustralianCitizen(boss)", "BobbyFlynn(x) -> AustralianCitizen(x))", "all x.((BobbyFlynn(x) & AustralianCitizen(x)) -> AmericanCitizen(x))"]}
{"id": "folio_train_674", "nl": "Bobby Flynn flew to America in 2007.", "fol": "FlewTo(BobbyFlynn,America,2007)", "prediction": ["Bobby Flynn flew to America in 2007 (BobbyFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFly", "Bobby Flynn flew to America in 2007 (BobbyFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFly", "Bobby Flynn flew to America in 2007 (BobbyFlynnFlynn(Bobby) | FlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFly", "Bobby Flynn flew to America in 2007 (BobbyFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynn", "Bobby Flynn flew to America in 2007 (BobbyFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlyn", "Bobby Flynn flew to America in 2007 (BobbyFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnF", "Bobby Flynn flies to America in 2007 (BobbyFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFly", "Bobby Flynn flew to America in 2007 (BobbyFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnf", "Bobby Flynn flew to America in 2007 (BobbyFlynnFlynn(Bobby) | FlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynn", "Bobby Flynn flew to America in 2007 (BobbyFlynnFlynn(Bobby) | FlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFly", "Bobby Flynn flew to America in 2007 (BobbyFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnflynnFly", "Bobby Flynn flew to America in 2007 (BobbyFlynnFlynn(Bobby) | FlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnf", "Bobby Flynn flew to America in 2007 (BobbyFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnflynnFlynnFlynnFly", "Bobby Flynn flew to America in 2007 (BobbyFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnff", "Bobby Flynn flew to America in 2007 (BobbyFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnfly", "Bobby Flynn flew to America in 2007 (BobbyFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnflynnFlynnFly"]}
{"id": "folio_train_675", "nl": "Bobby Flynn was born in Queens.", "fol": "BornInLocation(BobbyFlynn,Queens)", "prediction": ["Bobby Flynn was born in Queens.", "(BobbyFlynn(Bobby) & BornInQueens(Bobby))", "(BobbyFlynn(BobbyFlynn) & BornInQueens(BobbyFlynn))", "Bobby Flynn was born in Queens, Queens.", "(BobbyFlynn(Bobby) & BornInQueens(Bobby) & BornInQueens(Bobby))", "BobbyFlynn(b) & BornInQueens(b))", "Bobby Flynn (bornInQueens)", "(BobbyFlynn(BobbyFlynn) & BornInQueens(BobbyFlynn,Queens))", "Bobby Flynn (BirthInQueens) & BornInQueens(BobbyFlynn,Queens))", "(BobbyFlynn(b) & BornInQueens(b))", "(BobbyFlynn(Bobby) & BornInQueens(Bobby,Queens))", "(BobbyFlynn(Bobby) & BornIn(Bobby) & Queens(Bobby))", "BobbyFlynn(Bobby) & BornInQueens(Bobby)", "(BobbyFlynn(Bobby) & BornInQueens(BodyFlynn))", "(BobbyFlynn(BobbyFlynn) & BornInQueens(Bobby))", "(BobbyFlynn(Bobby) & BornIn(Bobby) & BornIn(Bobby) & Queens(Bobby))"]}
{"id": "folio_train_676", "nl": "All proteins are organic compounds.", "fol": "all x.(IsProtein(x) -> IsOrganicCompound(x))", "prediction": ["all x.(Protein(x) -> OrganicCompound(x))", "all x y.((Protein(x) & OrganicCompound(y)) -> OrganicCompound(x))", "all x y.((Protein(x) & OrganicCompound(y)) -> OrganicCompound(x,y))", "all x.(Protein(x) -> OrganicCompound(x))", "all x y.((Protein(x) & OrganicCompound(y)) -> Organic(x))", "all x y.((Protein(x) & OrganicCompound(y)) -> Organic(x,y))", "all x y.((Protein(x) & OrganicCompound(y)) -> OrganicCompound(x))", "all x.(Protein(x) -> OrganomicCompound(x))", "all x y.((Protein(x) & OrganicCompound(y)) -> OrganicCompound(x,y))", "all x.exists y.(Protein(x) & OrganicCompound(y) & OrganicCompound(x,y))", "all x.(Protein(x) -> OrganicCompound(x))", "all x.((Protein(x) & OrganicCompound(x)) -> OrganicCompound(x))", "all x.(Protein(x) -> OrganicCommpound(x))", "(all x.(Protein(x) -> OrganicCompound(x)))", "all x.((Protein(x) & OrganicCompound(x)) -> Protein(x))", "all x.exists y.(Protein(x) & OrganicCompound(y) & OrganicCompound(x,y))"]}
{"id": "folio_train_677", "nl": "All enzymes are organic compounds.", "fol": "all x.(IsEnzyme(x) -> IsOrganicCompound(x))", "prediction": ["all x.(Enzyme(x) -> OrganicCompound(x))", "all x.(Enzymes(x) -> OrganicCompound(x))", "all x y.((Enzyme(x) & OrganicCompound(y)) -> OrganicCompound(x))", "all x y.((Enzyme(x) & OrganicCompound(y)) -> OrganicCompound(x,y))", "all x y.((Enzyme(x) & OrganicCompound(y)) -> Organic(x))", "all x.(Enzyme(x) -> OrganicCompound(x))", "all x y.((Enzyme(x) & OrganicCompound(y)) -> Organic(x,y))", "all x y.((Enzyme(x) & OrganicCompound(y)) -> OrganicCompound(x))", "all x y.((Enzyme(x) & OrganicCompound(y)) -> OrganicCompound(x,y))", "all x.(Enzymes(x) -> OrganicCompounds(x))", "all x.(Enzyme(x) -> OrganomicCompound(x))", "all x.exists y.(Enzyme(x) & Enzyme(y) & OrganicCompound(x,y))", "all x y.((Enzyme(x) & OrganicCompound(y)) -> Enzyme(x,y))", "(all x.(Enzyme(x) -> OrganicCompound(x)))", "all x.exists y.(Enzyme(x) & OrganicCompound(y) & OrganicCompound(x,y))", "all x.exists y.(Enzyme(x) & OrganicCompound(y) & OrganicCompound(x,y))"]}
{"id": "folio_train_678", "nl": "All enzymes are proteins.", "fol": "all x.(IsEnzyme(x) -> IsProtein(x))", "prediction": ["all x.(Enzyme(x) -> Protein(x))", "all x y.((Enzyme(x) & Protein(y)) -> Protein(x))", "all x y.((Enzyme(x) & Protein(y)) -> Protein(x,y))", "all x.(Enzymes(x) -> Protein(x))", "all x.(Enzymes(x) -> Proteins(x))", "all x.exists y.(Enzyme(x) & Protein(y) & Enzyme(x,y))", "all x.(Enzyme(x) -> Protein(x))", "(all x.(Enzyme(x) -> Protein(x)))", "all x.exists y.(Enzyme(x) & Protein(y) & Contains(x,y))", "all x y.((Enzyme(x) & Protein(y)) -> (Protein(x) & Protein(y)))", "all x.(Enzyme(x) -> Protein(x))", "all x.exists y.(Enzyme(x) & Protein(y) & Enzyme(x) & Enzyme(x,y))", "all x y.((Enzyme(x) & Protein(y)) -> (Protein(x) | Protein(y)))", "all x.exists y.(Enzyme(x) & Protein(y) & Enzyme(y) & Enzyme(x,y))", "all x y.((Enzyme(x) & Protein(y)) -> Is(x,y))", "all x.exists y.(Enzyme(x) & Protein(y) & Enzyme(x) & Protein(y))"]}
{"id": "folio_train_679", "nl": "One American screenwriter and producer is Maggie Friedman.", "fol": "(IsAmerican(Maggiefriedman) & IsScreenwriter(Maggiefriedman) & IsProducer(Maggiefriedman))", "prediction": ["all x.((AmericanScreenwriter(x) & Producer(x)) -> MaggieFriedman(x))", "all x.((AmericanScreenwriter(x) & AmericanProducer(x)) -> MaggieFriedman(x))", "all x.(AmericanScreenwriterAndProducer(x) -> MaggieFriedman(x))", "all x.(AmericanScreenwriter(x) & Producer(x) -> MaggieFriedman(x))", "all x y.((AmericanScreenwriter(x) & Producer(y)) -> MaggieFriedman(x))", "all x y.((AmericanScreenwriter(x) & AmericanProducer(y)) -> MaggieFriedman(x))", "exists x.(AmericanScreenwriter(x) & Producer(x) & MaggieFriedman(x))", "all x.((AmericanScreenwriter(x) & Producer(x)) -> MaggieFriedman(x))", "all x.(ScreenwriterAndProducer(x) -> MaggieFriedman(x))", "All x.((AmericanScreenwriter(x) & Producer(x)) -> MaggieFriedman(x))", "all x.((Screenwriter(x) & Producer(x)) -> MaggieFriedman(x))", "all x.(AmericanScreenwriterAndProducer(x) -> MaggieFriedman(x))", "all x.(AmericanScreenwriter(x) & Producer(x) & MaggieFriedman(x))", "all x.(AmericanScreenwriter(x) & Producer(x) -> MaggieFriedman(x))", "all x.(AmericanScreenwriter(x) & Producer(x) -> MaggieFriedman(x))", "all x.(Screenwriter(x) & Producer(x) -> MaggieFriedman(x))"]}
{"id": "folio_train_680", "nl": "Maggie Friedman was the showrunner and executive producer of the lifetime television series Witches of East End.", "fol": "(ShowRunnerOfSeries(Maggiefriedman,Witchesofeastend) & ExecutiveProducerOfSeries(Maggiefriedman,Witchesofeastend) & IsLifetimeTelevisionSeries(Maggiefriedman))", "prediction": ["Maggie Friedman was the showrunner and executive producer of the lifetime television series WitchesOfEastEnd.", "(Showrunner(MaggieFriedman) & ExecutiveProducer(MaggieFriedman) & LifetimeTVSeriesWitchesOfEastEnd(MaggieFriedman))", "(Showrunner(MaggieFriedman) & ExecutiveProducer(MaggieFriedman) & LifetimeTelevisionSeriesWitchesOfEastEnd(MaggieFriedman))", "(Showrunner(MaggieFriedman) & ExecutiveProducer(MaggieFriedman) & LifetimeSeriesWitchesOfEastEnd(MaggieFriedman))", "Maggie Friedman (Showrunner(Maggie) & ExecutiveProducer(Maggie) & LifetimeTelevisionSeriesWitchesOfEastEnd(Maggie))", "Maggie Friedman (Showrunner(Maggie) & ExecutiveProducer(Maggie) & LifetimeTVSeriesWitchesOfEastEnd(Maggie))", "Maggie Friedman ((Showrunner(Maggie) & ExecutiveProducer(Maggie)) & LifetimeTelevisionSeriesWitchesOfEastEnd(Maggie))", "Maggie Friedman ((Showrunner(Maggie) & ExecutiveProducer(Maggie)) & LifetimeTVSeriesWitchesOfEastEnd(Maggie))", "Maggie Friedman (Showrunner(Maggie) & ExecutiveProducer(Maggie)) & LifetimeTelevisionSeriesWitchesOfEastEnd(Maggie))", "Maggie Friedman (Showrunner(Maggie) & ExecutiveProducerOfLifetimeSeriesWitchesOfEastEnd(Maggie))", "Maggie Friedman (Showrunner(Maggie) & ExecutiveProducer(Maggie)) & LifetimeTVSeriesWitchesOfEastEnd(Maggie))", "(Showrunner(MaggieFriedman) & ExecutiveProducer(MaggieFriedman) & LifetimeTelevisionSeries(MaggieFriedman))", "(Showrunner(MaggieFriedman) & ExecutiveProducer(MaggieFriedman) & LifetimeTVSeries(MaggieFriedman))", "Maggie Friedman (Showrunner(Maggie) & ExecutiveProducer(Maggie) & LifetimeTelevisionSeries(Maggie,EastEnd))", "Maggie Friedman ((Showrunner(Maggie) & ExecutiveProducer(Maggie)) & LifetimeTelevisionSeries(Maggie,EastEnd))", "(Showrunner(MaggieFriedman) & ExecutiveProducer(MaggieFriedman) & LifetimeSeries(MaggieFriedman))"]}
{"id": "folio_train_681", "nl": "Witches of East End is a fantasy-drama series.", "fol": "(IsFantasyDrama(Witchesofeastend) & IsSeries(Witchesofeastend))", "prediction": ["all x.(WitchesOfEastEnd(x) -> FantasyDramaSeries(x))", "(FantasyDrama(WitchesOfEastEnd) & FantasySeries(WitchesOfEastEnd))", "All x.(WitchesOfEastEnd(x) -> FantasyDramaSeries(x))", "all x.(WitchesOfEastEnd(x) -> FantasyDrama(x))", "(FantasyDramaSeries(WitchesOfEastEnd) & FantasySeries(WitchesOfEastEnd))", "(FantasyDramaSeries(WitchesOfEastEnd))", "(FantasyDrama(WitchesOfEastEnd) & Fantasy(WitchesOfEastEnd))", "(FantasyDrama(WitchesOfEastEnd) & FantasyDrama(WitchesOfEastEnd))", "WitchesOfEastEnd(x) -> FantasyDramaSeries(x))", "all x.((WitchesOfEastEnd(x) & FantasyDramaSeries(x)) -> WitchesOfEastEnd(x))", "All x.(WitchesOfEastEnd(x) -> FantasyDrama(x))", "(FantasyDrama(WitchesOfEastEnd))", "(FictionDrama(WitchesOfEastEnd) & FantasySeries(WitchesOfEastEnd))", "all x.(WitchesOfEastEnd(x) -> FantasyDramaSeries(x))", "all x.((WitchesOfEastEnd(x) & FantasyDramaSeries(x)) -> FantasyDrama(x))", "all x.((WitchesOfEastEnd(x) & FantasyDramaSeries(x)) -> FantasyDramaSeries(x))"]}
{"id": "folio_train_682", "nl": "Maggie Friedman produced and developed Eastwick.", "fol": "(ProducedSeries(Maggiefriedman,Eastwick) & DevelopedSeries(Maggiefriedman,Eastwick))", "prediction": ["Maggie Friedman produced and developed Eastwick.", "Maggie Friedman (exists x.(Eastwick(x) & Produces(x,y)) & exists z.(Eastwick(z) & Produces(x,z))) & exists w.(Eastwick(w) & Produces(x,w)) & exists w.(Eastwick(w) & Produces(x,w)) & exists w.(Eastwick(w) & Produces(x,w))))", "Maggie Friedman (exists x.(Eastwick(x) & Produces(x,y)) & exists z.(Eastwick(z) & Produces(x,z))) & exists w.(Eastwick(w) & Produces(x,w)) & exists w.(Eastwick(w) & Produces(x,w)) & exists w.(Eastwick(w) & Develops(x,w))))", "Maggie Friedman (exists x.(Eastwick(x) & Produces(x,y)) & exists z.(Eastwick(z) & Produces(x,z))) & exists w.(Eastwick(w) & Produces(x,w)) & exists w.(Eastwick(w) & Develops(x,w))))", "Maggie Friedman (exists x.(Eastwick(x) & Produces(x,y)) & exists z.(Eastwick(z) & Produces(x,z))) & exists w.(Eastwick(w) & Produces(x,w)) & exists w.(Eastwick(w) & Produces(x,w))))", "Maggie Friedman (exists x.(Eastwick(x) & Produces(x,y)) & exists z.(Eastwick(z) & Developed(x,z))))", "Maggie Friedman (exists x.(Eastwick(x) & ProducedBy(x,y)) & exists z.(Eastwick(z) & DevelopedBy(x,z))))", "Maggie Friedman (exists x.(Eastwick(x) & Produces(x,y)) & exists z.(Eastwick(z) & Produces(x,z))) & exists w.(Eastwick(w) & Produces(x,w)) & exists w.(Eastwick(w) & Produces(x,w)))))", "Maggie Friedman (exists x.(Eastwick(x) & Produces(x,y)) & exists z.(Eastwick(z) & DevelopedBy(x,z))))", "Maggie Friedman (exists x.(Eastwick(x) & Produces(x,y)) & exists z.(Eastwick(z) & Produces(x,z))) & exists w.(Eastwick(w) & Produces(x,w))))", "Maggie Friedman (exists x.(Eastwick(x) & Produces(x,y)) & exists z.(Eastwick(z) & Produces(x,z))) & exists w.(Eastwick(w) & Produces(x,w)) & exists w.(Eastwick(w) & Produces(x,w)) & exists w.(Eastwick(w) & Developed(x,w))))", "Maggie Friedman (exists x.(Eastwick(x) & Produces(x,y)) & exists z.(Eastwick(z) & Produces(x,z)) & exists w.(Eastwick(w) & Produces(x,w)))))", "Maggie Friedman (exists x.(Eastwick(x) & ProducedBy(x,y)) & exists z.(Eastwick(z) & ProducedBy(x,z))) & exists w.(Eastwick(w) & ProducedBy(x,w)) & exists w.(Eastwick(w) & ProducedBy(x,w)))))", "Maggie Friedman (exists x.(Eastwick(x) & ProducedBy(x,y)) & exists z.(Eastwick(z) & ProducedBy(x,z)) & exists w.(Eastwick(w) & ProducedBy(x,w)) & exists w.(Eastwick(w) & ProducedBy(x,w)))))", "Maggie Friedman (exists x.(Eastwick(x) & Produces(x,y)) & exists z.(Eastwick(z) & Produces(x,z))) & exists w.(Eastwick(w) & Produces(x,w)) & exists w.(Eastwick(w) & Produces(x,w)) & exists w.(Eastwick(w)) & Produces(x,w))))", "Maggie Friedman (exists x.(Eastwick(x) & Produces(x,y)) & exists z.(Eastwick(z) & Develops(x,z))))"]}
{"id": "folio_train_683", "nl": "Eastwick is a series by ABC.", "fol": "(IsSeries(Eastwick) & ProducedBy(Eastwick,Abc))", "prediction": ["Eastwick is a series by ABC.", "all x.(Eastwick(x) -> SeriesByABC(x))", "all x y.((Eastwick(x) & ABC(y)) -> Series(x,y))", "All x.(Eastwick(x) -> SeriesByABC(x))", "All x y.((Eastwick(x) & ABC(y)) -> Series(x,y))", "all x y.((Eastwick(x) & ABC(y)) -> SeriesBy(x,y))", "All x y.((Eastwick(x) & ABC(y)) -> SeriesBy(x,y))", "all x.(Eastwick(x) -> (Series(x) & ABC(x)))", "all x.(Eastwick(x) -> Series(x))", "all x.(Eastwick(x) -> (Series(x) & ByABC(x)))", "all x y.((Eastwick(x) & ABC(y)) -> Series(x))", "All x.(Eastwick(x) -> Series(x))", "All x.(Eastwick(x) -> (Series(x) & ABC(x)))", "all x.(Eastwick(x) -> SeriesByABC(x))", "All x y.((Eastwick(x) & ABC(y)) -> Series(x))", "All x.(Eastwick(x) -> SeriesByABC(x))"]}
{"id": "folio_train_684", "nl": "There is a series by ABC that was developed by the showrunner of Witches of East End.", "fol": "exists x.(IsSeries(x) & ProducedBy(x,Abc) & exists y.(DevelopedSeries(y,x) & ShowRunnerOfSeries(y,Witchesofeastend)))", "prediction": ["exists x.(Series(x) & ABC(x) & Showrunner(x) & WitchesOfEastEnd(x))", "exists x.(SeriesByABC(x) & Showrunner(x) & WitchesOfEastEnd(x))", "exists x.(SeriesByABC(x) & ShowrunnerOfWitchesOfEastEnd(x))", "exists x y.(Series(x) & ABC(y) & DevelopedBy(x,y) & WitchesOfEastEnd(x))", "exists x y.((Series(x) & ABC(y) & Showrunner(x) & WitchesOfEastEnd(y)) -> DevelopedBy(x,y))", "exists x y z.(Series(x) & ABC(y) & Showrunner(z) & WitchesOfEastEnd(x) & DevelopedBy(y,z))", "exists x y.(Series(x) & ABC(y) & DevelopedBy(x,y) & WitchesOfEastEnd(y))", "exists x y.((Series(x) & ABC(y) & Showrunner(x) & WitchesOfEastEnd(x)) -> DevelopedBy(y,x))", "exists x y z.(Series(x) & ABC(y) & WitchesOfEastEnd(z) & DevelopedBy(y,z))", "exists x y z.((Series(x) & ABC(y) & Showrunner(z) & WitchesOfEastEnd(z)) -> DevelopedBy(y,z))", "exists x y z.(Series(x) & ABC(y) & Showrunner(z) & WitchesOfEastEnd(z) & DevelopedBy(y,z))", "exists x y.(Series(x) & ABC(y) & Showrunner(x,y) & WitchesOfEastEnd(x))", "exists x y z.((Series(x) & ABC(y) & Showrunner(z) & WitchesOfEastEnd(x)) -> DevelopedBy(y,z))", "exists x y.(Series(x) & ABC(y) & Showrunner(x,y) & WitchesOfEastEnd(y))", "exists x y.(Series(x) & ABC(y) & Showrunner(x) & WitchesOfEastEnd(x))", "exists x y.((Series(x) & ABC(y) & Showrunner(x,y)) -> WitchesOfEastEnd(x))"]}
{"id": "folio_train_685", "nl": "There isn't a series by ABC that was developed by the showrunner of Witches of East End.", "fol": "-exists x.(IsSeries(x) & ProducedBy(x,Abc) & exists y.(DevelopedSeries(y,x) & ShowRunnerOfSeries(y,Witchesofeastend)))", "prediction": ["exists x.(Series(x) & -DevelopedByShowrunner(x) & WitchesOfEastEnd(x))", "all x y.((Series(x) & ABC(y) & Showrunner(y) & WitchesOfEastEnd(y)) -> -DevelopedBy(x,y))", "exists x.(Series(x) & -(DevelopedByShowrunner(x) & WitchesOfEastEnd(x)))", "-exists x.(Series(x) & ABC(x) & Showrunner(x) & WitchesOfEastEnd(x))", "exists x.(SeriesByABC(x) & -DevelopedByShowrunner(x) & WitchesOfEastEnd(x))", "-exists x.(Series(x) & ByABC(x) & Showrunner(x) & WitchesOfEastEnd(x))", "exists x.(Series(x) & -DevelopedByWitchesOfEastEnd(x))", "exists x.(Series(x) & -DevelopedBy(x,WitchesOfEastEnd))", "exists x.(Series(x) & -(DevelopedByShowrunner(x) & WitchesOfEastEnd(x))))", "exists x.(Series(x) & -DevelopedByShowrunner(x,WitchesOfEastEnd))", "exists x.(SeriesByABC(x) & -DevelopedByWitchesOfEastEnd(x))", "all x y.((Series(x) & ABC(y) & Showrunner(y) & WitchesOfEastEnd(y)) -> -DevelopedBy(y,x))", "exists x.(Series(x) & -DevelopedByWitchesOfEastEnd(x))", "exists x.(Series(x) & -DevelopedByShowrunner(x) & WitchesOfEasternEnd(x))", "-exists x.(Series(x) & DevelopedBy(x,WitchesOfEastEnd))", "all x y.((Series(x) & ABC(y) & Showrunner(y) & WitchesOfEastEnd(x)) -> -DevelopedBy(y,x))"]}
{"id": "folio_train_686", "nl": "Maggie Friedman developed Witches of East End.", "fol": "DevelopedSeries(Maggiefriedman,Witchesofeastend)", "prediction": ["Maggie Friedman developed WitchesOfEastEnd(Maggie)", "all x.((MaggieFriedman(x) & WitchesOfEastEnd(x)) -> Developed(x,y))", "(DevelopedByMaggieFriedman(Maggie) & WitchesOfEastEnd(Maggie))", "all x.((MaggieFriedman(x) & WitchesOfEastEnd(x)) -> Developed(x,MaggieFriedman))", "all x.((MaggieFriedman(x) & WitchesOfEastEnd(x)) -> Developed(x))", "Maggie Friedman developed WitchesOfEastEnd.", "Maggie Friedman developed WitchesOfEastEnd(MaggieFriedman)", "all x.((MaggieFriedman(x) & WitchesOfEastEnd(x)) -> Created(x,y))", "all x.((MaggieFriedman(x) & WitchesOfEastEnd(x)) -> DevelopedBy(x,MaggieFriedman))", "all x.((MaggieFriedman(x) & WitchesOfEastEnd(x)) -> Develops(x,y))", "all x.((MaggieFriedman(x) & WitchesOfEastEnd(x)) -> DevelopedBy(x,y))", "Maggie Friedman & WitchesOfEastEnd(Maggie)", "all x.((MaggieFriedman(x) & WitchesOfEastEnd(x)) -> Development(x))", "Maggie Friedman developed WitchesOfEastEnd(MGFriedman)", "all x.((MaggieFriedman(x) & WitchesOfEastEnd(x)) -> Created(x))", "all x.((MaggieFriedman(x) & WitchesOfEastEnd(x)) -> Created(x,MaggieFriedman))"]}
{"id": "folio_train_687", "nl": "Evangelos Eleftheriou is a Greek electrical engineer.", "fol": "(IsGreek(Evangeloseleftheriou) & IsElectricalEngineer(Evangeloseleftheriou))", "prediction": ["Evangelos Eleftheriou (GreekElectricalEngineer)", "EvangelosEleftheriou (GreekElectricalEngineer)", "all x.(EvangelosEleftheriou(x) -> GreekElectricalEngineer(x))", "(GreekElectricalEngineer(EvangelosEleftheriou)", "all x.((EvangelosEleftheriou(x) & GreekElectricalEngineer(x)) -> Electrician(x))", "all x.((EvangelosEleftheriou(x) & GreekElectricalEngineer(x)) -> ElectricalEngineer(x))", "Evangelos Eleftheriou is a GreekElectricalEngineer(e)", "Evangelos Eleftheriou is a GreekElectricalEngineer(Eleftheriou)", "all x.((EvangelosEleftheriou(x) & GreekElectricalEngineer(x)) -> ElectricalEngineer(x))", "all x.((EvangelosEleftheriou(x) & GreekElectricalEngineer(x)) -> Engineer(x))", "EvangelosEleftheriou is a GreekElectricalEngineer(e)", "EvangelosEleftheriou is a GreekElectricalEngineer(Eleftheriou)", "(GreekElectricalEngineer(EvangelosEleftheriou) & GreekElectricalEngineer(Eleftheriou))", "Evangelos Eleftheriou (GreekElectricalEngineer(Eleftheriou))", "EvangelosEleftheriou (GreekElectricalEngineer(Eleftheriou))", "(GreekElectricalEngineer(EvangelosEleftheriou))"]}
{"id": "folio_train_688", "nl": "Evangelos Eleftheriou worked for IBM in Zurich.", "fol": "(EmployedBy(Evangeloseleftheriou,Ibm) & EmployedInLocation(Evangeloseleftheriou,Zurich))", "prediction": ["Evangelos Eleftheriou worked for IBM in Zurich.", "all x y.((EvangelosEleftheriou(x) & IBM(y)) -> WorkedFor(x,y))", "all x y.((EvangelosEleftheriou(x) & IBM(y)) -> WorkedInZ\u00fcrich(x,y))", "(WorkedFor(EvangelosEleftheriou,IBM) & In(EvangelosEleftheriou,Z\u00fcrich))", "all x.(EvangelosEleftheriou(x) -> WorkedForIBM(x))", "(WorkedForIBM(EvangelosEleftheriou) & InZ\u00fcrich(EvangelosEleftheriou))", "EvangelosEleftheriou worked for IBM in Zurich.", "all x y.((EvangelosEleftheriou(x) & IBM(y)) -> WorkedForInZ\u00fcrich(x,y))", "Eleftheriou worked for IBM in Zurich.", "(WorkedFor(EvangelosEleftheriou,Z\u00fcrich) & IBM(Eleftheriou,Z\u00fcrich))", "all x y.((EvangelosEleftheriou(x) & IBM(y)) -> WorkedInZ\u00fcrich(x))", "(WorkedForIBM(EvangelosEleftheriou,Z\u00fcrich))", "all x y.((EvangelosEleftheriou(x) & IBM(y)) -> WorksFor(x,y))", "all x y.((EvangelosEleftheriou(x) & IBM(y)) -> WorkedInZurich(x,y))", "(WorkedForIBM(EvangelosEleftheriou) & LocatedInZ\u00fcrich(EvangelosEleftheriou))", "(WorkedForIBM(EvangelosEleftheriou) & InZurich(EvangelosEleftheriou))"]}
{"id": "folio_train_689", "nl": "If a company has employees working for them somewhere, then they have an office there.", "fol": "all z.((IsCompany(x) & EmployedBy(y,x) & EmployedInLocation(y,z)) -> HasOfficeAt(x,z))", "prediction": ["all x y.((Company(x) & Employee(y) & WorksFor(x,y)) -> HasOffice(x,y))", "all x.((Company(x) & EmployeesWorkingFor(x,y)) -> HasOffice(x,y))", "all x.((Company(x) & EmployeesWorkingFor(x)) -> HasOffice(x))", "all x.((Company(x) & HasEmployeesWorkingFor(x,y)) -> HasOffice(x,y))", "all x y.((Company(x) & Employee(y) & WorkingFor(x,y)) -> HasOffice(x,y))", "all x.((Company(x) & HasEmployeesWorkingFor(x)) -> HasOffice(x))", "all x.((Company(x) & EmployeesWorkingFor(x,y)) -> HasOffice(x,z))", "all x y.((Company(x) & Employee(y) & WorksFor(y,x)) -> HasOffice(x,y))", "all x.((Company(x) & exists y.(Employee(y) & WorksFor(x,y))) -> HasOffice(x,y)))", "all x.((Company(x) & exists y.(Employee(y) & WorksFor(x,y)))) -> HasOffice(x,y))", "all x.((Company(x) & exists y.(Employee(y) & WorkingFor(x,y)))) -> HasOffice(x,y))", "all x.((Company(x) & HasEmployeesWorkingFor(x,y)) -> HasOffice(x,z))", "all x.((Company(x) & exists y.(Employee(y) & WorkingFor(x,y))) -> HasOffice(x,y)))", "all x.((Company(x) & HasEmployeesWorking(x)) -> HasOffice(x))", "all x y.((Company(x) & Employee(y) & WorksFor(x,y)) -> HasOffice(x))", "all x y.((Company(x) & EmployeesWorkingFor(x,y)) -> HasOffice(x,y))"]}
{"id": "folio_train_690", "nl": "IBM is a company.", "fol": "IsCompany(Ibm)", "prediction": ["all x.(IBM(x) -> Company(x))", "all x.((IBM(x) & Company(x)) -> Company(x))", "all x y.((IBM(x) & Company(y)) -> Company(x))", "all x.(IBM(x) -> Company(x))", "all x y.((IBM(x) & Company(y)) -> Company(x,y))", "all x y.((IBM(x) & Company(y)) -> (Company(x) & Company(y)))", "all x.((IBM(x) & Company(x)) -> Companies(x))", "all x y.((IBM(x) & Company(y)) -> Is(x,y))", "all x.((IBM(x) & Company(x)) -> (Company(x) & Company(x)))", "exists x.(IBM(x) & Company(x))", "All x.(IBM(x) -> Company(x))", "all x.((IBM(x) & Company(x)) -> Is(x,y))", "all x.((IBM(x) & Company(x)) -> FoundedIn(x))", "(Company(IBM) & -Company(IBM))", "all x.((IBM(x) & Company(x)) -> Business(x))", "all x.((IBM(x) & Company(x)) -> IsCompany(x))"]}
{"id": "folio_train_691", "nl": "IBM has an office in London or Zurich.", "fol": "(HasOfficeAt(Ibm,London) | HasOfficeAt(Ibm,Zurich))", "prediction": ["all x.(IBM(x) -> (OfficeInLondon(x) | OfficeInZ\u00fcrich(x)))", "all x.(IBM(x) -> (HasOffice(x,London) | HasOffice(x,Z\u00fcrich)))", "all x.(IBM(x) -> (OfOffice(x,London) | OfOffice(x,Z\u00fcrich)))", "all x.(IBM(x) -> (HasOfficeInLondon(x) | HasOfficeInZ\u00fcrich(x)))", "all x.(IBM(x) -> (Office(x,London) | Office(x,Z\u00fcrich)))", "all x.(IBM(x) -> (exists y.(LondonOffice(y) & HasOffice(x,y)) | exists z.(Z\u00fcrichOffice(z) & HasOffice(x,z)))))", "all x y.((IBM(x) & (London(y) | Zurich(y))) -> HasOffice(x,y))", "all x.(IBM(x) -> (exists y.(LondonOffice(y) & HasOffice(x,y)) | exists z.(ZurichOffice(z) & HasOffice(x,z)))))", "all x.(IBM(x) -> (OfficeIn(x,London) | OfficeIn(x,Z\u00fcrich)))", "all x.(IBM(x) -> (exists y.(Office(y) & In(x,y))) | exists z.(Office(z) & In(x,z)))))", "all x.((IBM(x) & (London(x) | Zurich(x))) -> HasOffice(x,y))", "all x.(IBM(x) -> (OfficeInLondon(x) | OfficeInZurich(x)))", "all x.(IBM(x) -> (exists y.(Office(y) & In(x,y)) | exists z.(Office(z) & In(x,z)))))", "all x.(IBM(x) -> ((OfficeInLondon(x) | OfficeInZ\u00fcrich(x))))", "all x.(IBM(x) -> (exists y.(Office(y) & (London(y) | Zurich(y)))))", "all x.(IBM(x) -> (exists y.(LondonOffice(y) & HasOffice(x,y)) | exists z.(Z\u00fcrichOffice(z)) & HasOffice(x,z))))"]}
{"id": "folio_train_692", "nl": "No Greeks have worked for IBM.", "fol": "-exists y.(IsGreek(y) & EmployedBy(y,Ibm))", "prediction": ["-exists x.(Greek(x) & WorksForIBM(x))", "-exists x.(Greek(x) & WorkedForIBM(x))", "-exists x.(Greek(x) & WorksFor(x,IBM))", "-exists x.(Greek(x) & WorkedFor(x,IBM))", "(-exists x.(Greek(x) & WorkedFor(x,IBM)))", "(-exists x.(Greek(x) & WorkedForIBM(x)))", "(-exists x.(Greek(x) & WorksFor(x,IBM)))", "(-exists x.(Greek(x) & WorksForIBM(x)))", "-exists x.(Griechen(x) & WorkedForIBM(x))", "all x.(Greek(x) -> -WorkedForIBM(x))", "-exists x.(Griechen(x) & WorksForIBM(x))", "-exists x.(Griechen(x) & WorkedFor(x,IBM))", "-exists x.(Griechen(x) & WorksFor(x,IBM))", "-exists x.(Greek(x) & WorkingForIBM(x))", "-exists x.(Greek(x) & WorksFor(x, IBM))", "-exists x.(Greek(x) & WorkedFor(x,IBM,IBM))"]}
{"id": "folio_train_693", "nl": "Before releasing their single, \"Hooray! Hooray! It's a Holi-Holiday!\", Boney M. had had seven consecutive German #1 singles.", "fol": "exists x.(SongEntity(x) & PerformedBy(x,Boneym) & IsGermanNumberOneSingle(x))", "prediction": ["all x.((BoneyM.(x) & Single(x,Hooray) & Single(x,Hooray) & HoliHoliday(x)) -> SevenConsecutiveGerman #1Singles(x))", "all x.((BoneyM.(x) & Single(x,Hooray) & Single(x,Hooray) & HoliHoliday(x)) -> SevenConsecutiveGermanNo.1Singles(x))", "all x.((BoneyM.(x) & Single(x,Hooray) & Single(x,Hooray) & HoliHoliday(x)) -> SevenConsecutiveGerman#1Singles(x))", "all x.((BoneyM.(x) & Single(x,Hooray) & Single(x,Hooray) & Single(x,Hooray) & HoliHoliday(x)) -> SevenConsecutiveGerman #1Singles(x))", "all x.((BoneyM.(x) & Single(x,Hooray) & HoliHoliday(x)) -> SevenConsecutiveGerman #1Singles(x))", "all x.((BoneyM.(x) & Single(x,Hooray) & Single(x,Hooray) & Single(x,Hooray)) -> SevenConsecutiveGerman #1Singles(x))", "all x.((BoneyM.(x) & Single(x,Hooray) & Single(x,Hooray) & Single(x,Hooray)) -> SevenConsecutiveGermanNo.1Singles(x))", "all x.((BoneyM.(x) & Single(x,Hooray) & Single(x,Hooray) & Single(x,Hooray)) -> SevenConsecutiveGerman#1Singles(x))", "all x.((BoneyM.(x) & Single(x,Hooray) & Single(x,Hooray) & Single(x,Hooray) & HoliHoliday(x)) -> SevenConsecutiveGermanNo.1Singles(x))", "all x.((BoneyM.(x) & Single(x,Hooray) & Hooray(x,HoliHoliday)) -> SevenConsecutiveGerman #1Singles(x))", "all x.((BoneyM.(x) & Single(x,Hooray) & Single(x,Hooray) & Single(x,Hooliday)) -> SevenConsecutiveGerman #1Singles(x))", "all x.((BoneyM.(x) & Single(x,Hooray) & Single(x,Hooray) & Single(x,Hooray) & HoliHoliday(x)) -> SevenConsecutiveGerman#1Singles(x))", "all x.((BoneyM.(x) & Single(x,Hooray) & Hooray(x) & HoliHoliday(x)) -> SevenConsecutiveGerman #1Singles(x))", "all x.((BoneyM.(x) & Single(x,Hooray) & HoliHoliday(x)) -> SevenConsecutiveGermanNo.1Singles(x))", "all x.((BoneyM.(x) & Single(x,Hooray) & Single(x,Hooray) & HoliHoliday(x)) -> SevenConsecutiveGermanSingles(x))", "all x.((BoneyM.(x) & Single(x,Hooray) & HoliHoliday(x)) -> SevenConsecutiveGerman#1Singles(x))"]}
{"id": "folio_train_694", "nl": "\"Hooray! Hooray! It's a Holi-Holiday!\" was a big hit all over Europe.", "fol": "(SongEntity(Hooray) & WasHitInEurope(Hooray))", "prediction": ["all x.((Hooray(x) & Hooray(x) & HoliHoliday(x)) -> BigHit(x))", "all x.((Hooray(x) & Hooray(x) & HoliHoliday(x)) -> HitAllOverEurope(x))", "all x.(Hooray(x) -> (Hooray(x) & Hooray(x) & HoliHoliday(x)))", "all x y.((Hooray(x) & Hooray(x) & HoliHoliday(y)) -> BigHit(x,y))", "all x.((Hooray(x) & Hooray(x) & HoliHoliday(x)) -> BigHitAllOverEurope(x))", "all x.(Hooray(x) & Hooray(x) & HoliHoliday(x)) -> HitAllOverEurope(x))", "all x.(Hooray(x) & Hooray(x) & HoliHoliday(x)) -> BigHit(x))", "all x.((Hooray(x) & Hooray(x) & HoliHoliday(x)) -> Hit(x))", "all x y.((Hooray(x) & Hooray(x) & HoliHoliday(y)) -> Hit(x,y))", "all x.((Hooray(x) & Hooray(x) & HoliHoliday(x)) -> HugeHit(x))", "all x y.((Hooray(x) & Hooray(x) & HoliHoliday(y)) -> HitAllOverEurope(x))", "all x.((Hooray(x) & Hooray(x) & HoliHoliday(x)) -> BigHip(x))", "all x.((Hooray(x) & Hooray(x) & HoliHooliday(x)) -> BigHit(x))", "all x y.((Hooray(x) & Hooray(x) & HoliHoliday(y)) -> BigHit(x))", "all x.((Hooray(x) & Hooray(x) & HoliHoliday(x)) -> GreatHit(x))", "all x y.((Hooray(x) & Hooray(x) & HoliHoliday(y)) -> HitAllOverEurope(x,y))"]}
{"id": "folio_train_695", "nl": "Nevertheless, \"Hooray! Hooray! It's a Holi-Holiday!\" broke Boney M's streak of consecutive German #1 singles.", "fol": "(SongEntity(Hooray) & -IsGermanNumberOneSingle(Hooray))", "prediction": ["all x.((Hooray(x) & Hooray(x) & HoliHoliday(x)) -> BreaksBoneyM'sStringOfConsecutiveGerman#1Singles(x))", "all x.((Hooray(x) & Hooray(x) & HoliHoliday(x)) -> BreaksBoneyM'sStringOfConsecutiveGermanNo.1Singles(x))", "all x.((Hooray(x) & Hooray(x) & HoliHoliday(x)) -> BreaksBoneyM'sStringOfConsecutiveGerman #1Singles(x))", "all x.((Hooray(x) & Hooray(x) & HoliHoliday(x)) -> BreaksBoneyM'sStringOfConsecutiveGermanSingles(x))", "all x y.((Hooray(x) & Hooray(x) & HoliHoliday(y)) -> BreaksBoneyM'sStringOfConsecutiveGerman#1Singles(x,y))", "all x y.((Hooray(x) & Hooray(x) & HoliHoliday(x)) -> BreaksBoneyM'sStringOfConsecutiveGerman#1Singles(y))", "all x y.((Hooray(x) & Hooray(x) & HoliHoliday(y)) -> BreaksBoneyM'sStringOfConsecutiveGermanNo.1Singles(x,y))", "all x.((Hooray(x) & Hooray(x) & HoliHooliday(x)) -> BreaksBoneyM'sStringOfConsecutiveGerman#1Singles(x))", "all x.((Hooray(x) & Hooray(x) & HoliHoliday(x)) -> BreaksBoneyM'sStringOfConsecutiveDeutsch#1Singles(x))", "all x.((Hooray(x) & Hooray(x) & HoliHoliday(x)) -> BreaksBoneyM's streak(x))", "all x y.((Hooray(x) & Hooray(x) & HoliHoliday(x)) -> BreaksBoneyM'sStringOfConsecutiveGermanNo.1Singles(y))", "all x y.((Hooray(x) & Hooray(x) & HoliHoliday(y)) -> BreaksBoneyM'sStringOfConsecutiveGerman #1Singles(x,y))", "all x y.((Hooray(x) & Hooray(x) & HoliHoliday(x)) -> BreaksBoneyM'sStringOfConsecutiveGerman #1Singles(y))", "all x.((Hooray(x) & Hooray(x) & HoliHoliday(x)) -> BreaksBoneyM'sStringOfGermanSingles(x))", "all x.((Hooray(x) & Hooray(x) & HoliHoliday(x)) -> BreaksBoneyM'sStringOfConsecutiveGermanNumberSingles(x))", "all x.((Hooray(x) & Hooray(x) & HoliHoliday(x)) -> BreaksBoneyM'sStringOfDeutschland#1Singles(x))"]}
{"id": "folio_train_696", "nl": "A song that peaks below #1 on the german charts is also a song that is not the #1 single", "fol": "all x.(PeaksBelowNumberOne(x) <-> -IsGermanNumberOneSingle(x))", "prediction": ["all x.((Song(x) & PeaksBelowSingleNo.1(x)) -> -SingleNo.1(x))", "all x.((Song(x) & PeaksBelowGermanCharts(x)) -> -Song(x))", "all x y.((Song(x) & PeaksBelow(x,y) & #1Single(y)) -> -PeaksBelow(x,y))", "all x.((Song(x) & PeaksBelow(x,1)) -> -PeaksBelow(x,1))", "all x.((Song(x) & PeaksBelowTop1(x)) -> -Top1Single(x))", "all x y.((Song(x) & PeaksBelow(x,y) & GermanCharts(y)) -> -Song(x))", "all x.((Song(x) & PeaksBelow(x,1)) -> -Single(x))", "all x y.((Song(x) & PeaksBelowTop(x,y) & GermanCharts(y)) -> -Song(x))", "all x y.((Song(x) & PeaksBelow(x,y) & #1Single(x)) -> -PeaksBelow(x,y))", "all x y z.((Song(x) & PeaksBelow(x,y) & GermanCharts(y) & #1Single(z)) -> -Song(x,z))", "all x y.((Song(x) & PeaksBelow(x,y) & GermanCharts(y)) -> -Single(x))", "all x.((Song(x) & PeaksBelow(x,1)) -> -SingleNo.1(x))", "all x y.((Song(x) & PeaksBelowTop(x,y) & GermanCharts(y)) -> -Song(x,y))", "all x y z.((Song(x) & PeaksBelow(x,y) & GermanCharts(y) & Single(z) & -PeaksBelow(x,z)) -> -Song(x))", "all x y z.((Song(x) & PeaksBelow(x,y) & GermanCharts(y) & Single(z) & -Single(z)) -> -Song(x,z))", "all x y z.((Song(x) & PeaksBelow(x,y) & GermanCharts(y) & #1Single(z)) -> -Song(x))"]}
{"id": "folio_train_697", "nl": "\"Hooray! Hooray! It's a Holi-Holiday!\" was a #1 hit in Germany.", "fol": "IsGermanNumberOneSingle(Hooray)", "prediction": ["all x.((Hooray(x) & Hooray(x) & HoliHoliday(x)) -> #1HitInGermany(x))", "all x.((Hooray(x) & Hooray(x) & HoliHoliday(x)) -> #1Hit(x))", "all x.(Hooray(x) & Hooray(x) & HoliHoliday(x)) -> #1HitInGermany(x))", "all x y.((Hooray(x) & Hooray(x) & HoliHoliday(y)) -> #1Hit(x,y))", "all x.((Hooray(x) & Hooray(x) & HoliHoliday(x)) -> #1 HitInGermany(x))", "all x y.((Hooray(x) & Hooray(x) & HoliHoliday(y)) -> #1HitInGermany(x))", "all x.((Hooray(x) & Hooray(x) & HoliHooliday(x)) -> #1HitInGermany(x))", "all x.((Hooray(x) & Hooray(x) & HoliHoliday(x)) -> #1Hit(x,Germany))", "all x y.((Hooray(x) & Hooray(x) & HoliHoliday(y)) -> #1HitInGermany(x,y))", "all x y.((Hooray(x) & Hooray(y) & HoliHoliday(x)) -> #1HitInGermany(x))", "all x y.((Hooray(x) & Hooray(y) & HoliHoliday(x)) -> #1Hit(x,y))", "all x.((Hooray(x) | Hooray(x) | HoliHoliday(x)) -> #1HitInGermany(x))", "all x y.((Hooray(x) & Hooray(y) & HoliHoliday(y)) -> #1Hit(x,y))", "all x.((Hooray(x) & Hooray(x) & HoliHoliday(x)) -> Hit(x))", "all x.(Hooray(x) & Hooray(x) & HoliHoliday(x)) -> #1 HitInGermany(x))", "all x.(Hooray(x) & Hooray(x) & HoliHoliday(x)) -> #1Hit(x))"]}
{"id": "folio_train_698", "nl": "\"Hooray! Hooray! It's a Holi-Holiday!\" peaked below #1 on the German charts.", "fol": "PeaksBelowNumberOne(Hooray)", "prediction": ["all x.((Hooray(x) & Hooray(x) & HoliHoliday(x)) -> PeakedBelow(x,1))", "all x y.((Hooray(x) & Hooray(x) & HoliHoliday(y)) -> PeakedBelow(x,y))", "all x y z.((Hooray(x) & Hooray(y) & HoliHoliday(z)) -> PeakedBelow(x,y,z))", "all x y.((Hooray(x) & Hooray(y) & HoliHoliday(x)) -> PeakedBelow(x,y))", "all x.(Hooray(x) -> (Hooray(x) & Hooray(x) & HoliHoliday(x)))", "all x y.((Hooray(x) & Hooray(y) & HoliHoliday(y)) -> PeakedBelow(x,y))", "all x.(Hooray(x) & Hooray(x) & HoliHoliday(x)) -> PeakedBelow(x,1))", "all x y.((Hooray(x) & Hooray(x) & HoliHoliday(y)) -> PeakedBelow(x,Y))", "all x y.((Hooray(x) & Hooray(x) & HoliHoliday(x)) -> PeakedBelow(x,y))", "all x.((Hooray(x) & Hooray(x) & HoliHooliday(x)) -> PeakedBelow(x,1))", "all x.((Hooray(x) & Hooray(x) & HoliHoliday(x)) -> PeakedBelow(x,#1))", "all x.((Hooray(x) & Hooray(x)) -> HoliHoliday(x))", "\"Hooray! Hooray! It's HoliHoliday!\" peaked below #1 on GermanCharts.", "all x.((Hooray(x) | Hooray(x) | HoliHoliday(x)) -> PeakedBelow(x,1))", "all x y z.((Hooray(x) & Hooray(y) & HoliHoliday(z)) -> PeakedBelow(x,y))", "all x.((Hooray(x) & Hooray(x) & HoliHoliday(x)) -> PeakedBelow(x))"]}
{"id": "folio_train_699", "nl": "\"Hooray! Hooray! It's a Holi-Holiday!\" peaked at #3 on the UK charts.", "fol": "PeakedAt(Hooray,3,UKCharts)", "prediction": ["all x.((Hooray(x) & Hooray(x) & HoliHoliday(x)) -> PeakedAt#3OnUKCharts(x))", "all x.((Hooray(x) & Hooray(x) & HoliHoliday(x)) -> PeakedAt#3(x))", "all x y.((Hooray(x) & Hooray(x) & HoliHoliday(y)) -> PeakedAt(x,y))", "all x.(Hooray(x) -> (Hooray(x) & Hooray(x) & HoliHoliday(x)))", "all x y z.((Hooray(x) & Hooray(y) & HoliHoliday(z)) -> PeakedAt(x,y,z))", "\"Hooray! Hooray! It's HoliHoliday!\" peaked at #3 on UKCharts.", "all x.((Hooray(x) & Hooray(x) & HoliHoliday(x)) -> PeakedAt(x,#3))", "all x y.((Hooray(x) & Hooray(x) & HoliHoliday(y)) -> PeakedAt#3(x,y))", "all x.((Hooray(x) & Hooray(x) & HoliHoliday(x)) -> PeakedAt#3 on UKCharts(x))", "all x y.((Hooray(x) & Hooray(x) & HoliHoliday(y)) -> PeakedAt#3OnUKCharts(x,y))", "all x y.((Hooray(x) & Hooray(y) & HoliHoliday(x)) -> PeakedAt(x,y))", "all x.((Hooray(x) & Hooray(x) & HoliHoliday(x)) -> PeakedAtNo.3(x))", "all x.((Hooray(x) & Hooray(x) & HoliHoliday(x)) -> PeakedAt(x,3))", "all x.(Hooray(x) & Hooray(x) & HoliHoliday(x)) -> PeakedAt#3(x))", "all x y z.((Hooray(x) & Hooray(y) & HoliHoliday(z)) -> PeakedAt#3(x,y,z))", "all x y.((Hooray(x) & Hooray(y) & HoliHoliday(y)) -> PeakedAt(x,y))"]}
{"id": "folio_train_700", "nl": "Every chef can cook.", "fol": "all x.(IsChef(x) -> CanCook(x))", "prediction": ["all x.(Chef(x) -> CanCook(x))", "all x y.((Chef(x) & Chef(y)) -> CanCook(x,y))", "all x.exists y.(Chef(x) & Chef(y) & CanCook(x,y))", "exists x.(Chef(x) & CanCook(x))", "all x.(Chef(x) -> Cook(x))", "all x y.((Chef(x) & Cook(y)) -> CanCook(x,y))", "all x y.((Chef(x) & Chef(y)) -> CanCook(x))", "all x.exists y.(Chef(x) & Chef(y) & Cook(x,y))", "all x.exists y.(Chef(x) & Chef(y) & CanCook(x))", "all x.exists y.(Chef(x) & Chef(y)) -> CanCook(x,y))", "all x.exists y.(Chef(x) & Chef(y) & Cook(y))", "-all x.(Chef(x) -> CanCook(x))", "all x.exists y.(Chef(x) & Chef(y) & Cooks(x,y))", "all x.(Chef(x) -> Cooks(x))", "exists x.(Chef(x) & Cook(x))", "-exists x.(Chef(x) & CanCook(x))"]}
{"id": "folio_train_701", "nl": "Some people who aren\u2019t chefs can cook.", "fol": "exists x.(-IsChef(x) & CanCook(x))", "prediction": ["exists x.((Person(x) & -Chef(x)) -> CanCook(x))", "exists x.(Person(x) & -Chef(x))", "exists x.((Person(x) & -Chef(x)) -> Cook(x))", "exists x.((People(x) & -Chef(x)) -> CanCook(x))", "exists x y.((Person(x) & -Chef(x)) -> CanCook(x))", "exists x.((Person(x) & -Chef(x)) -> Cooks(x))", "all x.((Person(x) & -Chef(x)) -> CanCook(x))", "exists x.(Person(x) & -Chef(x) & CanCook(x))", "exists x y.((Person(x) & -Chef(x)) -> CanCook(x,y))", "exists x.(People(x) & -Chef(x))", "exists x.((Person(x) & -Chair(x)) -> CanCook(x))", "exists x.(Person(x) & -Chef(x)) -> CanCook(x))", "exists x y.((Person(x) & -Chef(y)) -> CanCook(x,y))", "exists x y.((Person(x) & -Chef(x)) -> CanCook(y))", "exists x.(Client(x) & -Chef(x))", "exists x y.((Person(x) & -Chef(y)) -> CanCook(x))"]}
{"id": "folio_train_702", "nl": "People who cook can make scrambled eggs and pasta.", "fol": "all x.(CanCook(x) -> (CanMakeScrambledEggs(x) & CanMakePasta(x)))", "prediction": ["all x.(Cooks(x) -> (MakesScrambledEggs(x) & MakesPasta(x)))", "all x.(Cooks(x) -> (MakesScrambledEggs(x) | MakesPasta(x)))", "all x.((Person(x) & Cooks(x)) -> (MakesScrambledEggs(x) & MakesPasta(x)))", "all x.(Cook(x) -> (MakesScrambledEggs(x) & MakesPasta(x)))", "all x.(Cooks(x) -> (MakesScrabbledEggs(x) & MakesPasta(x)))", "all x.((Person(x) & Cooks(x)) -> (MakesScrambledEggs(x) | MakesPasta(x)))", "all x.(Cooks(x) -> (CanMakeScrambledEggs(x) & CanMakePasta(x)))", "all x.(Cooks(x) -> (MadeScrambledEggs(x) | MakePasta(x)))", "all x.(Cooks(x) -> (MadeScrambledEggs(x) & MakePasta(x)))", "all x.((Cooks(x) & Cooks(x)) -> (MakesScrambledEggs(x) & MakesPasta(x)))", "all x.(Cooks(x) -> (MakeScrambledEggs(x) & MakePasta(x)))", "all x y.((Person(x) & Cooks(x)) -> (MakesScrambledEggs(x) & MakesPasta(x)))", "all x.(Cook(x) -> (MakesScrambledEggs(x) | MakesPasta(x)))", "all x.((Cooks(x) & Cooks(x)) -> (MakesScrambledEggs(x) | MakesPasta(x)))", "all x.(Cooks(x) -> (MakesScrabbledEggs(x) | MakesPasta(x)))", "all x.(Cook(x) -> (MakeScrambledEggs(x) & MakePasta(x)))"]}
{"id": "folio_train_703", "nl": "If someone can make cookies and muffins, they are a baker.", "fol": "all x.((CanMakeCookies(x) & CanMakeMuffins(x)) -> IsBaker(x))", "prediction": ["all x.((CanMakeCookies(x) & CanMakeMuffins(x)) -> Baker(x))", "all x.((MakingCookies(x) & MakingMuffins(x)) -> Baker(x))", "all x.((Person(x) & CanMakeCookies(x) & CanMakeMuffins(x)) -> Baker(x))", "all x.((Man(x) & CanMakeCookies(x) & CanMakeMuffins(x)) -> Baker(x))", "all x.((MakesCookies(x) & MakesMuffins(x)) -> Baker(x))", "all x.((CanMakeCookies(x) & CanMakeMuffins(x)) -> Baker(x))", "all x.((Person(x) & MakesCookies(x) & MakesMuffins(x)) -> Baker(x))", "all x.((CanMakeCookiesAndMuffins(x)) -> Baker(x))", "all x.((CanMakeCookies(x) & CanMakeMuffins(x)) -> Baker(x))", "all x.((CookieMaker(x) & MuffinMaker(x)) -> Baker(x))", "all x.((CanMake(x,Cookies) & CanMake(x,Muffins)) -> Baker(x))", "all x.((CanMakeCoffees(x) & CanMakeMuffins(x)) -> Baker(x))", "all x.((Person(x) & CanMakeCookies(x) & CanMakeMuffins(x)) -> Baker(x))", "all x.((CanMakeCookies(x) & CanMakeMuffines(x)) -> Baker(x))", "all x.((MakingCookies(x) | MakingMuffins(x)) -> Baker(x))", "all x.((MakingCookiesAndMuffins(x)) -> Baker(x))"]}
{"id": "folio_train_704", "nl": "Bakers who can also make scrambled eggs can make a good breakfast.", "fol": "all x.((IsBaker(x) & CanMakeScrambledEggs(x)) -> CanMakeGoodBreakfast(x))", "prediction": ["all x.((Baker(x) & MakesScrambledEggs(x)) -> MakesGoodBreakfast(x))", "all x.((Baker(x) & CanMakeScrambledEggs(x)) -> CanMakeGoodBreakfast(x))", "all x.((Baker(x) & MakesScrambledEggs(x)) -> CanMakeGoodBreakfast(x))", "all x.((Baker(x) & MakesScrambledEggs(x)) -> GoodBreakfast(x))", "all x.((Baker(x) & CanMakeScrambledEggs(x)) -> MakesGoodBreakfast(x))", "all x.((Baker(x) & CanMakeScrambledEggs(x)) -> GoodBreakfast(x))", "all x.((Baker(x) & MakeScrambledEggs(x)) -> CanMakeGoodBreakfast(x))", "all x.((Baker(x) & MakesScrabbledEggs(x)) -> MakesGoodBreakfast(x))", "all x.((Baker(x) & CanMakeScrabbledEggs(x)) -> CanMakeGoodBreakfast(x))", "all x.((Baker(x) & MakeScrambledEggs(x)) -> MakeGoodBreakfast(x))", "all x.((Baker(x) & ScrambledEggs(x)) -> GoodBreakfast(x))", "all x.((Baker(x) & MakeScrambledEggs(x)) -> MakesGoodBreakfast(x))", "all x.((Baker(x) & MakeScrambledEggs(x)) -> GoodBreakfast(x))", "all x.((Baker(x) & CanMadeScrambledEggs(x)) -> CanMakeGoodBreakfast(x))", "all x.((Baker(x) & CanMakeScrambledEggs(x)) -> MakeGoodBreakfast(x))", "all x y.((Baker(x) & MakesScrambledEggs(x)) -> MakesGoodBreakfast(y))"]}
{"id": "folio_train_705", "nl": "Luke can make cookies, scrambled eggs, and muffins, but not pasta.", "fol": "(CanMakeCookies(Luke) & CanMakeScrambledEggs(Luke) & CanMakeMuffins(Luke) & -CanMakePasta(Luke))", "prediction": ["(all x.(Luke(x) -> (MakesCookies(x) | MakesScrambledEggs(x) | MakesMuffins(x))) & -(MakesPasta(x) -> MakesPasta(x)))", "(all x.(Luke(x) -> (MakesCookies(x) | MakesScrambledEggs(x) | MakesMuffins(x))) & -(MakesPasta(x) & MakesPasta(x)))", "(all x.(Luke(x) -> (MakesCookies(x) | MakesScrambledEggs(x) | MakesMuffins(x))) & -MakesPasta(x)))", "(all x.(Luke(x) -> (MakesCookies(x) | MakesScrambledEggs(x) | MakesMuffins(x))) & -(MakesPasta(x) & MakesPasta(x))))", "(all x.(Luke(x) -> (MakesCookies(x) | MakesScrabbledEggs(x) | MakesMuffins(x))) & -(MakesPasta(x) -> MakesPasta(x)))", "all x.(Luke(x) -> ((MakesCookies(x) | MakesScrambledEggs(x) | MakesMuffins(x)) & -MakesPasta(x)))", "all x.(Luke(x) -> (MakesCookies(x) & MakesScrambledEggs(x) & MakesMuffins(x) & -MakesPasta(x)))", "(all x.(Luke(x) -> (MakesCookies(x) | MakesScrambledEggs(x) | MakesMuffins(x))) | (MakesPasta(x) & -MakesPasta(x))))", "(all x.(Luke(x) -> (MakesCookies(x) | MakesScrambledEggs(x) | MakesMuffins(x))) & -(MakesPasta(x) -> MakesPasta(x))))", "(all x.(Luke(x) -> (MakesCookies(x) | MakesScrambledEggs(x) | MakesMuffins(x))) & -(Luke(x) -> MakesPasta(x)))", "(all x.(Luke(x) -> (MakesCookies(x) | MakesScrambledEggs(x) | MakesMuffins(x))))", "(all x.(Luke(x) -> (MakesCookies(x) | MakesScrabbledEggs(x) | MakesMuffins(x))) & -(MakesPasta(x) & MakesPasta(x)))", "all x.(Luke(x) -> (MakesCookies(x) | MakesScrambledEggs(x) | MakesMuffins(x)) & -MakesPasta(x)))", "(all x.(Luke(x) -> (MakesCookies(x) & MakesScrambledEggs(x) & MakesMuffins(x))) & -(MakesPasta(x) & MakesPasta(x)))", "(all x.(Luke(x) -> (MakeCookies(x) | MakeScrambledEggs(x) | MakeMuffins(x))) & -(MakePasta(x) -> MakePasta(x)))", "(all x.(Luke(x) -> (MakesCookies(x) | MakesScrabbledEggs(x) | MakesMuffins(x))) & -MakesPasta(x)))"]}
{"id": "folio_train_706", "nl": "Luke can make a good breakfast.", "fol": "CanMakeGoodBreakfast(Luke)", "prediction": ["all x.(Luke(x) -> CanMakeGoodBreakfast(x))", "exists x.(Luke(x) & CanMakeGoodBreakfast(x))", "exists x.(Luke(x) & MakesGoodBreakfast(x))", "all x y.((Luke(x) & Breakfast(y)) -> CanMake(x,y))", "all x.((Luke(x) & GoodBreakfast(x)) -> CanMake(x,y))", "all x.(Luke(x) -> MakesGoodBreakfast(x))", "all x.((Luke(x) & GoodBreakfast(x)) -> CanMake(x,Luke))", "all x.((Luke(x) & MakesGoodBreakfast(x)) -> CanMake(x,Breakfast))", "all x.((Luke(x) & CanMakeGoodBreakfast(x)) -> CanMakeGoodBreakfast(x))", "all x.((Luke(x) & Breakfast(y)) -> CanMake(x,y))", "all x.((Luke(x) & MakesGoodBreakfast(x)) -> CanMakeGoodBreakfast(x))", "all x.((Luke(x) & MakesGoodBreakfast(x)) -> CanMake(x,y))", "all x.((Luke(x) & GoodBreakfast(x)) -> CanMake(x,luke))", "all x.((Luke(x) & Breakfast(x)) -> CanMake(x,y))", "all x.((Luke(x) & GoodBreakfast(x)) -> CanMake(x,Breakfast))", "all x.((Luke(x) & GoodBreakfast(x)) -> CanMake(x,Luke,Luke))"]}
{"id": "folio_train_707", "nl": "Luke is a chef.", "fol": "IsChef(Luke)", "prediction": ["(Chef(Luke) & Chef(Luke))", "all x.(Luke(x) -> Chef(x))", "exists x.(Chef(x) & Luke(x))", "(Chef(Luke) | Chef(Luke)))", "(Chef(Luke) -> Chef(Luke))", "Luke is chef.", "(Chef(Luke) -> Chef(Luke))", "all x.(Chef(x) -> Luke(x))", "Luke is Chef(Luke)", "(Chef(Luke) | Chef(Luke))", "(Chef(Luke) & -Chef(Luke))", "(Chef(Luke) & Cook(Luke))", "all x.(Chef(x) -> Luke(x))", "(Chef(Luke)", "(Chef(Luke) | Chef(Luke,Luke)))", "all x.(Luke(x) -> Chef(x))"]}
{"id": "folio_train_708", "nl": "All people who enjoy eating gelato ice cream would enjoy a vacation to Italy.", "fol": "all x.(EnjoysGelatoIceCream(x) -> EnjoysVacationToItaly(x))", "prediction": ["all x.((Person(x) & EnjoysEatingGelatoIceCream(x)) -> EnjoysVacationToItaly(x))", "all x.((Person(x) & EnjoysEatingGelatoIceCream(x)) -> EnjoysVacationToItaly(x))", "all x.((Person(x) & EnjoysGelatoIceCream(x)) -> EnjoysVacationToItaly(x))", "all x.((Person(x) & EnjoysEatingGelatoIceCream(x)) -> EnjoysVacationToItalie(x))", "all x.(EnjoysEatingGelatoIceCream(x) -> EnjoysVacationToItaly(x))", "all x.((Person(x) & EnjoysGelatoIceCream(x)) -> EnjoysVacationToItaly(x))", "all x.((Person(x) & EnjoysEatingGelatioIceCream(x)) -> EnjoysVacationToItaly(x))", "all x.((Person(x) & EnjoysEatingGelatoIceCream(x)) -> EnjoysVacationToItalie(x))", "all x.(EnjoysEatingGelatoIceCream(x) -> EnjoysVacationToItaly(x))", "all x.((People(x) & EnjoysEatingGelatoIceCream(x)) -> EnjoysVacationToItaly(x))", "all x.((Person(x) & EnjoysGelatoIceCream(x)) -> EnjoysVacationToItalie(x))", "all x.((Person(x) & EnjoysGelatioIceCream(x)) -> EnjoysVacationToItaly(x))", "all x.((Person(x) & EnjoysEatingGelatinoIceCream(x)) -> EnjoysVacationToItaly(x))", "all x.((Person(x) & EnjoysEatingGelatoIceCream(x)) -> EnjoysVisitToItaly(x))", "all x.(EnjoysEatingGelatoIceCream(x) -> EnjoysVacationToItalie(x))", "all x.((Person(x) & EnjoysEatingGelatoIceCream(x)) -> EnjoysVacationToItalia(x))"]}
{"id": "folio_train_709", "nl": "There are no people who can resist the hallmark delectable drinks and desserts that are famed in Italy.", "fol": "all x.-CanResistDelectableDrinksAndDesserts(x)", "prediction": ["all x.(Resists(x) -> (DelectableDrinks(x) & DelectableDesserts(x) & FamedInItaly(x)))", "all x.((Person(x) & ResistsMarkerDelectableDrinksAndDesserts(x) & FamedInItaly(x)) -> -ResistsMarkerDelectableDrinksAndDesserts(x))", "-exists x.(Person(x) & ResistsMarkerDelectableDrinksAndDesserts(x) & FamedInItaly(x))", "all x.((Person(x) & ResistsMarkerDelectableDrinks(x) & ResistsDeliciousDesserts(x) & FamedInItaly(x)) -> -ResistsMarkerDelectableDrinksAndDesserts(x))", "-exists x.(Resists(x) & DelectableDrinks(x) & DelectableDesserts(x) & FamedInItaly(x))", "all x.((Person(x) & ResistsMotorheadDelectableDrinksAndDesserts(x) & FamedInItaly(x)) -> -ResistsMotorheadDelectableDrinksAndDesserts(x))", "all x.((Person(x) & ResistsMarkerDelectableDrinks(x) & ResistsDeliciousDesserts(x)) -> FamedInItaly(x))", "-exists x.(Resists(x) & DelectableDrinksAndDesserts(x) & FamedInItaly(x))", "all x.((Person(x) & ResistsMarkerDelectableDrinks(x) & ResistsDeliciousDesserts(x) & FamedInItaly(x)) -> -ResistsMarkerDelectableDesserts(x))", "all x.((Person(x) & ResistsMarkerDelectableDrinksAndDesserts(x) & FamedInItalie(x)) -> -ResistsMarkerDelectableDrinksAndDesserts(x))", "-exists x.(Person(x) & Resists(x) & DelectableDrinks(x) & DelectableDesserts(x) & FamedInItaly(x))", "all x.(Resists(x) -> (DelectableDrinks(x) & DelectableDesserts(x) & FamedInItalie(x)))", "all x.((Person(x) & ResistsMarkerDelectableDrinks(x) & ResistsDelectableDesserts(x)) -> FamedInItaly(x))", "all x.((Person(x) & ResistsMotorheadDelectableDrinksAndDesserts(x) & FamedInItaly(x)) -> -ResistsMotorheadDrinksAndDesserts(x))", "all x.((Person(x) & ResistsMarkerDelectableDrinksAndDesserts(x) & FamedInItaly(x)) -> -ResistsMarker(x))", "all x.((Person(x) & ResistsMarkerDelectableDrinks(x) & ResistsDeliciousDesserts(x) & FamedInItalie(x)) -> -ResistsMarkerDelectableDrinksAndDesserts(x))"]}
{"id": "folio_train_710", "nl": "People either enjoy eating gelato ice cream or love to travel and vacation often.", "fol": "all x.(EnjoysGelatoIceCream(x) | LovesToTravelAndVacation(x))", "prediction": ["all x.(Person(x) -> (EnjoysEatingGelatoIceCream(x) | LovesToTravelAndVacation(x)))", "all x.(Person(x) -> (EnjoysEatingGelatoIceCream(x) | LovesToTravelAndVacation(x)))", "all x.(Person(x) -> (EnjoysEatingGelatoIceCream(x) | LovesToTravel(x) & LovesToVacation(x)))", "all x.((Person(x) & EnjoysEatingGelatoIceCream(x)) | (LovesToTravel(x) & LovesToVacation(x))))", "exists x.(Person(x) & (EnjoysEatingGelatoIceCream(x) | LovesToTravelAndVacation(x)))", "all x.(People(x) -> (EnjoysEatingGelatoIceCream(x) | LovesToTravelAndVacation(x)))", "all x.(Person(x) -> (EnjoysEatingGelatoIceCream(x) | LovesToTravel(x) & LovesToVacation(x)))", "all x.((Person(x) & EnjoysGelatoIceCream(x)) | (LovesToTravel(x) & LovesToVacation(x))))", "all x.((Person(x) & (EnjoysEatingGelatoIceCream(x) | LovesToTravel(x))) -> LovesToVacation(x))", "exists x.(Person(x) & (EnjoysEatingGelatoIceCream(x) | LovesToTravelAndVacation(x)))", "all x.(People(x) -> (EnjoysEatingGelatoIceCream(x) | LovesToTravelAndVacation(x)))", "exists x.(Person(x) & (EnjoysEatingGelatoIceCream(x) | LovesToTravel(x)))", "all x.((Person(x) & (EnjoysEatingGelatoIceCream(x) | LovesToTravel(x))) -> LovesToVacation(x))", "exists x.(Person(x) & (EnjoysEatingGelatoIceCream(x) | LovesToTravel(x)))", "all x.((Person(x) & EnjoysEatingGelatoIceCream(x)) | LovesToTravelAndVacation(x))", "all x.(Person(x) -> ((EnjoysEatingGelatoIceCream(x) | LovesToTravel(x)) & LovesToVacation(x)))"]}
{"id": "folio_train_711", "nl": "If people often take study abroad semesters to Europe, then they do not regret their college experiences.", "fol": "all x.(TakesStudyAbroadToEurope(x) -> -RegretsCollegeExperiences(x))", "prediction": ["all x.((Person(x) & TakesStudyAbroadSemestersToEurope(x)) -> -RegretsCollegeExperiences(x))", "all x.((Person(x) & TakesStudyAbroadSemestersToEurope(x)) -> -RegretsCollegeExperiences(x))", "all x.((Person(x) & TakesStudyAbroadSemestersToEurope(x)) -> -RegretsCollegeExperiences(x))", "all x.((Person(x) & TakesStudyAbroadSemestresToEurope(x)) -> -RegretsCollegeExperiences(x))", "all x.((People(x) & TakesStudyAbroadSemestersToEurope(x)) -> -RegretsCollegeExperiences(x))", "all x.((Person(x) & TakesStudyAwaySemestersToEurope(x)) -> -RegretsCollegeExperiences(x))", "all x.((Person(x) & TakesStudyAbroadSemestersToEurope(x)) -> -RegretsCollegeExperiences(x))", "all x y.((Person(x) & StudyAbroadSemester(y) & TakesToEurope(x,y)) -> -RegretsCollegeExperience(x))", "all x y.((Person(x) & StudyAbroadSemester(y) & TakesToEurope(x,y)) -> -RegretsCollegeExperiences(x))", "all x.((People(x) & TakesStudyAbroadSemestersToEurope(x)) -> -RegretsCollegeExperiences(x))", "all x.((Person(x) & TakesStudyAbroadSemestersToEurope(x)) -> -RegretsCollegeExperience(x))", "all x.((Person(x) & TakesStudyAbroadSemestresToEurope(x)) -> -RegretsCollegeExperiences(x))", "all x y.((Person(x) & StudyAbroadSemester(y) & TakesToEurope(x,y)) -> -RegretsCollegeExperience(x))", "all x y.((Person(x) & StudyAbroadSemester(y) & TakesToEurope(x,y)) -> -RegretsCollegeExperiences(x))", "all x.((Person(x) & TakesStudyAbroadSemestersToEurope(x)) -> -RegretsCollegeExperience(x))", "all x.((People(x) & TakesStudyAbroadSemestersToEurope(x)) -> -RegretsCollegeExperiences(x))"]}
{"id": "folio_train_712", "nl": "If people love to travel and vacation often, then they often take study abroad semesters to Europe.", "fol": "all x.(LovesToTravelAndVacation(x) -> TakesStudyAbroadToEurope(x))", "prediction": ["all x.((LovesToTravel(x) & LovesToVacation(x)) -> TakesStudyAbroadSemestersToEurope(x))", "all x.((LovesToTravel(x) & LovesToVacation(x)) -> TakesStudyAbroadSemestersToEurope(x))", "all x.((People(x) & LovesToTravel(x) & LovesToVacation(x)) -> TakesStudyAbroadSemestersToEurope(x))", "all x.((People(x) & LovesToTravel(x) & LovesToVacation(x)) -> TakesStudyAbroadSemestersToEurope(x))", "all x.((LovesToTravel(x) & LovesToVacation(x)) -> TakesStudyAwaySemestersToEurope(x))", "all x.((People(x) & LovesToTravel(x) & LovesToVacation(x)) -> TakesStudyAwaySemestersToEurope(x))", "all x.((Person(x) & LovesToTravel(x) & LovesToVacation(x)) -> TakesStudyAbroadSemestersToEurope(x))", "all x.((Person(x) & LovesToTravel(x) & LovesToVacation(x)) -> TakesStudyAbroadSemestersToEurope(x))", "all x.((People(x) & LovesToTravel(x) & LovesToVacation(x)) -> TakesStudyAbroadSemestresToEurope(x))", "all x.((LovesToTravel(x) & LovesToVacation(x)) -> TakesStudyAbroadSemestresToEurope(x))", "all x.((LovesToTravel(x) & LovesToVacation(x)) -> TakesStudyAwaySemestersToEurope(x))", "all x.((LovesToTravel(x) & LovesToVacation(x)) -> TakesStudyAbroadSemestersToEurope(x))", "all x.((People(x) & LovesToTravel(x) & LovesToVacation(x)) -> TakeStudyAbroadSemestersToEurope(x))", "all x.((People(x) & LovesToTravel(x) & LovesToVacation(x)) -> TakesStudyAbroadSemestersToEurope(x))", "all x.((Person(x) & LovesToTravel(x) & LovesToVacation(x)) -> TakesStudyAwaySemestersToEurope(x))", "all x.((People(x) & LoveToTravel(x) & LoveToVacation(x)) -> TakeStudyAbroadSemestersToEurope(x))"]}
{"id": "folio_train_713", "nl": "Robert either enjoys eating gelato ice cream and loves to travel and vacation often, or he neither enjoys eating gelato ice cream nor loves to travel and vacation often.", "fol": "((EnjoysGelatoIceCream(Robert) & LovesToTravelAndVacation(Robert)) | (-EnjoysGelatoIceCream(Robert) & -LovesToTravelAndVacation(Robert)))", "prediction": ["all x.((Robert(x) & (EnjoysEatingGelatoIceCream(x) & LovesToTravel(x) & LovesToVacation(x)) | (-EnjoysEatingGelatoIceCream(x) & LovesToTravel(x) & LovesToVacation(x))))", "(all x.((Robert(x) & EnjoysEatingGelatoIceCream(x) & LovesToTravelAndVacation(x)) | (-EnjoysEatingGelatoIceCream(x) & LovesToTravelAndVacation(x))))", "(all x.((Robert(x) & EnjoysEatingGelatoIceCream(x) & LovesToTravelAndVacation(x)) | (-(Robert(x) & EnjoysEatingGelatoIceCream(x) & LovesToTravelAndVacation(x)))))", "(all x.((Robert(x) & EnjoysEatingGelatoIceCream(x) & LovesToTravelAndVacation(x)) | (-LovesEatingGelatoIceCream(x) & LovesToTravelAndVacation(x))))", "(all x.((Robert(x) & EnjoysEatingGelatoIceCream(x) & LovesToTravelAndVacation(x)) | (-EnjoysEatingGelatoIceCream(x) & LovesToTravelAndVacation(x))))", "(all x.((Robert(x) & EnjoysEatingGelatoIceCream(x) & LovesToTravelAndVacation(x)) | (-(Robert(x) & EnjoysEatingGelatoIceCream(x) & LovesToTravelAndVacation(x)))))", "(all x.((Robert(x) & EnjoysEatingGelatoIceCream(x) & LovesToTravelAndVacation(x)) | (-(Robert(x) & EnjoysEatingGelatoIceCream(x)) & LovesToTravelAndVacation(x)))))", "(all x.((Robert(x) & EnjoysEatingGelatoIceCream(x) & LovesToTravelAndVacation(x)) | (-LovesEatingGelatoIceCream(x) & LovesToTravelAndVacation(x))))", "(all x.((Robert(x) & EnjoysGelatoIceCream(x) & LovesToTravelAndVacation(x)) | (-(Robert(x) & EnjoysGelatoIceCream(x) & LovesToTravelAndVacation(x)))))", "(all x.((Robert(x) & EnjoysEatingGelatoIceCream(x) & LovesToTravelAndVacation(x)) | (-(Robert(x) & EnjoysEatingGelatoIceCream(x)) & LovesToTravelAndVacation(x)))))", "(all x.((Robert(x) & EnjoysGelatoIceCream(x)) -> (LovesToTravel(x) & LovesToVacation(x)))) & ((Robert(x) & -LovesGelatoIceCream(x)) -> (-LovesToTravel(x) & LovesToVacation(x)))))", "(all x.((Robert(x) & EnjoysGelatoIceCream(x) & LovesToTravelAndVacation(x)) | (-LovesGelatoIceCream(x) & LovesToTravelAndVacation(x))))", "(all x.((Robert(x) & EnjoysGelatoIceCream(x) & LovesToTravelAndVacation(x)) | (-(Robert(x) & EnjoysGelatoIceCream(x)) & LovesToTravelAndVacation(x)))))", "all x.((Robert(x) & (EnjoysEatingGelatoIceCream(x) & LovesToTravel(x) & LovesToVacation(x)) | -EnjoysEatingGelatoIceCream(x) & LovesToTravel(x)))", "all x.((Robert(x) & (EnjoysEatingGelatoIceCream(x) & LovesToTravel(x) & LovesToVacation(x)) | (-EnjoysEatingGelatoIceCream(x) & LovesToTravel(x))))", "(all x.((Robert(x) & EnjoysEatingGelatoIceCream(x)) -> (LovesToTravel(x) & LovesToVacation(x))))"]}
{"id": "folio_train_714", "nl": "Robert can resist the hallmark delectable drinks and desserts that are famed in Italy.", "fol": "CanResistDelectableDrinksAndDesserts(Robert)", "prediction": ["all x.(Robert(x) -> (Resists(x) & DelectableDrinks(x) & DelectableDesserts(x) & FamedInItaly(x)))", "all x.((Robert(x) & DelectableDrinks(x) & DelectableDesserts(x) & FamedInItaly(x)) -> Resists(x))", "all x y.((Robert(x) & Italy(y)) -> (Resists(x,y) & DelectableDrinks(x) & DelectableDesserts(x)))", "all x.(Robert(x) -> (ResistsMarkerDelectableDrinksAndDesserts(x) & FamedInItaly(x)))", "all x y.((Robert(x) & Italy(y)) -> (Resists(x,y) & DelectableDrinksAndDesserts(x) & FamedIn(x,y)))", "all x y.((Robert(x) & Italy(y)) -> (Resists(x,y) & DelectableDrinksAndDesserts(x,y)))", "all x y z.((Robert(x) & DelectableDrinksAndDesserts(y) & Italy(z)) -> Resists(x,y,z))", "all x y.((Robert(x) & DelectableDrinks(y) & DelectableDesserts(y) & FamedInItaly(x)) -> Resists(x,y))", "all x y.((Robert(x) & Italy(y)) -> (Resists(x,y) & DelectableDrinks(x) & DelectableDesserts(x) & FamedIn(x,y)))", "all x y z.((Robert(x) & DelectableDrinks(y) & DelectableDesserts(z) & FamedInItaly(x)) -> Resists(x,y,z))", "all x.((Robert(x) & DelectableDrinks(x) & DelectableDesserts(x) & FamedInItaly(x)) -> CanResist(x))", "all x.((Robert(x) & DelectableDrinks(x) & DelectableDesserts(x) & FamedInItaly(x)) -> Resists(x,y))", "all x y z.((Robert(x) & DelectableDrinks(y) & DelectableDesserts(z) & FamousInItaly(x)) -> Resists(x,y,z))", "all x y.((Robert(x) & DelectableDrinks(y) & DelectableDesserts(y)) -> CanResist(x,y))", "all x y.((Robert(x) & (DelectableDrinks(y) | DelectableDesserts(y))) -> Resists(x,y))", "all x y.((Robert(x) & DelectableDrinks(y) & DelectableDesserts(y) & FamedInItaly(x)) -> CanResist(x,y))"]}
{"id": "folio_train_715", "nl": "If Robert either would both enjoy a vacation to Italy and regrets his college experiences or neither would enjoy a vacation to Italy nor regrets his college experiences, then Robert would either enjoy a vacation to Italy or, if not, then he can resist the hallmark delectable drinks and desserts that are famed in Italy.", "fol": "(((EnjoysVacationToItaly(Robert) & RegretsCollegeExperiences(Robert)) | (-EnjoysVacationToItaly(Robert) & -RegretsCollegeExperiences(Robert))) -> (EnjoysVacationToItaly(Robert) | (-EnjoysVacationToItaly(Robert) & CanResistDelectableDrinksAndDesserts(Robert))))", "prediction": ["all x.((Robert(x) & (EnjoysVacationToItaly(x) | -EnjoysVacationToItaly(x))) | (-EnjoysVacationToItaly(x) & RefusesCollegeExperiences(x))))", "all x.((Robert(x) & (EnjoysVacationToItaly(x) | -EnjoysVacationToItaly(x))) | (-EnjoysVacationToItaly(x) & -RegretsCollegeExperiences(x))))", "all x.((Robert(x) & (EnjoysVacationToItaly(x) | -EnjoysVacationToItaly(x))) | (-EnjoysVacationToItaly(x) & -ReproducesCollegeExperiences(x))))", "all x.((Robert(x) & ((EnjoysVacationToItaly(x) & RefusesCollegeExperiences(x)) | (-EnjoysVacationToItaly(x) & RefusesCollegeExperiences(x)))) -> (EnjoysVacationToItaly(x) | (-EnjoysVacationToItaly(x)))))", "all x.((Robert(x) & (EnjoysVacationToItaly(x) | (-EnjoysVacationToItaly(x) & CollegeExperiences(x)))) | (-EnjoysVacationToItaly(x) & CollegeExperiences(x)))))", "all x.((Robert(x) & (EnjoysVacationToItaly(x) | -EnjoysVacationToItaly(x))) -> (EnjoysVacationToItaly(x) | -RegretsCollegeExperiences(x))))", "all x.((Robert(x) & ((EnjoysVacationToItaly(x) & CollegeExperiences(x)) | (-EnjoysVacationToItaly(x) & CollegeExperiences(x)))) -> (EnjoysVacationToItaly(x) | (-EnjoysVacationToItaly(x) & CollegeExperiences(x)))))", "all x.((Robert(x) & (EnjoysVacationToItaly(x) | -EnjoysVacationToItaly(x))) -> (EnjoysVacationToItaly(x) | -RegretsCollegeExperiences(x)))", "all x.((Robert(x) & (EnjoysVacationToItaly(x) | -EnjoysVacationToItaly(x))) -> (EnjoysVacationToItaly(x) | -EnjoysVacationToItaly(x)))", "all x.((Robert(x) & ((EnjoysVacationToItaly(x) & RefusesCollegeExperiences(x)) | (-EnjoysVacationToItaly(x) & RefusesCollegeExperiences(x)))) -> (EnjoysVacationToItaly(x) | ResistsDelectableDrinksAndDesserts(x))))", "all x.((Robert(x) & ((EnjoysVacationToItaly(x) & RefusesCollegeExperiences(x)) | (-EnjoysVacationToItaly(x) & RefusesCollegeExperiences(x))))) -> (EnjoysVacationToItaly(x) | (-EnjoysVacationToItaly(x)))))", "all x.((Robert(x) & ((EnjoysVacationToItaly(x) & CollegeExperiences(x)) | (-EnjoysVacationToItaly(x) & CollegeExperiences(x))))) -> (EnjoysVacationToItaly(x) | (-EnjoysVacationToItaly(x) & CollegeExperiences(x)))))", "all x.((Robert(x) & (EnjoysVacationToItaly(x) | -EnjoysVacationToItaly(x))) -> (EnjoysVacationToItaly(x) | -EnjoysVacationToItaly(x))))", "all x.((Robert(x) & ((EnjoysVacationToItaly(x) & RefusesCollegeExperiences(x)) | (-EnjoysVacationToItaly(x) & RefusesCollegeExperiences(x)))) -> (EnjoysVacationToItaly(x) | ResistsMarkerDelectableDrinksAndDesserts(x))))", "all x.((Robert(x) & (EnjoysVacationToItaly(x) | -EnjoysVacationToItaly(x))) | (-EnjoysVacationToItaly(x) & -ReproachesCollegeExperiences(x))))", "all x.((Robert(x) & ((EnjoysVacationToItaly(x) & RefusesCollegeExperiences(x)) | (-EnjoysVacationToItaly(x) & RefusesCollegeExperiences(x)))) -> (EnjoysVacationToItaly(x) | (-EnjoysVacationToItaly(x))))"]}
{"id": "folio_train_716", "nl": "If Robert is not both a person who can resist the hallmark delectable drinks and desserts that are famed in Italy and regrets his college experiences, then Robert either enjoys eating gelato ice cream or would enjoy a vacation to Italy.", "fol": "(-(CanResistDelectableDrinksAndDesserts(Robert) & RegretsCollegeExperiences(Robert)) -> (EnjoysGelatoIceCream(Robert) | EnjoysVacationToItaly(Robert)))", "prediction": ["all x.((Robert(x) & -(ResistsMarkerDelectableDrinksAndDesserts(x) & FamedInItaly(x) & RefusesCollegeExperiences(x))) -> (EnjoysEatingGelatoIceCream(x) | EnjoysVacationToItaly(x))))", "all x.((Robert(x) & -(ResistsMarkerDelectableDrinksAndDesserts(x) & FamedInItaly(x) & RefusesCollegeExperiences(x))) -> (EnjoysEatingGelatoIceCream(x) | EnjoysVacationToItaly(x))))", "all x.((Person(x) & -ResistsMarkerDelectableDrinksAndDesserts(x) & FamedInItaly(x) & RefusesCollegeExperiences(x)) -> (EnjoysEatingGelatoIceCream(x) | EnjoysVacationToItaly(x)))", "all x.((Person(x) & -ResistsMarkerDelectableDrinksAndDesserts(x) & FamedInItaly(x) & RefusesCollegeExperiences(x)) -> (EnjoysEatingGelatoIceCream(x) | EnjoysVacationToItaly(x)))", "all x.((Robert(x) & -ResistsMarkerDelectableDrinksAndDesserts(x) & FamedInItaly(x) & RefusesCollegeExperiences(x)) -> (EnjoysEatingGelatoIceCream(x) | EnjoysVacationToItaly(x)))", "all x.((Robert(x) & -(ResistsDelectableDrinksAndDesserts(x) & FamedInItaly(x) & RefusesCollegeExperiences(x))) -> (EnjoysEatingGelatoIceCream(x) | EnjoysVacationToItaly(x))))", "all x.((Person(x) & -ResistsMuseumDelectableDrinksAndDesserts(x) & FamedInItaly(x) & RefusesCollegeExperiences(x)) -> (EnjoysEatingGelatoIceCream(x) | EnjoysVacationToItaly(x)))", "all x.((Robert(x) & -(ResistsMuseumDelectableDrinksAndDesserts(x) & FamedInItaly(x) & RefusesCollegeExperiences(x))) -> (EnjoysEatingGelatoIceCream(x) | EnjoysVacationToItaly(x))))", "all x.((Robert(x) & -ResistsMarkerDelectableDrinksAndDesserts(x) & FamedInItaly(x) & RefusesCollegeExperiences(x)) -> (EnjoysEatingGelatoIceCream(x) | EnjoysVacationToItaly(x)))", "all x.((Person(x) & -ResistsDelectableDrinksAndDesserts(x) & FamedInItaly(x) & RefusesCollegeExperiences(x)) -> (EnjoysEatingGelatoIceCream(x) | EnjoysVacationToItaly(x)))", "all x.((Robert(x) & -(ResistsMuseumDelectableDrinksAndDesserts(x) & FamedInItaly(x) & RefusesCollegeExperiences(x))) -> (EnjoysEatingGelatoIceCream(x) | EnjoysVacationToItaly(x))))", "all x.((ResistsMarkerDelectableDrinksAndDesserts(x) & FamedInItaly(x) & RefusesCollegeExperiences(x)) -> (EnjoysEatingGelatoIceCream(x) | EnjoysVacationToItaly(x)))", "all x.((Person(x) & -ResistsDelectableDrinksAndDesserts(x) & FamedInItaly(x) & RefusesCollegeExperiences(x)) -> (EnjoysEatingGelatoIceCream(x) | EnjoysVacationToItaly(x)))", "all x.((Robert(x) & -ResistsMarkerDelectableDrinksAndDesserts(x) & FamedInItaly(x) & RefusesCollegeExperiences(x)) -> (EnjoysEatingGelatoIceCream(x) | EnjoysVacationToItaly(x))))", "all x.((ResistsMarkerDelectableDrinksAndDesserts(x) & FamedInItaly(x) & RefusesCollegeExperiences(x)) -> (EnjoysEatingGelatoIceCream(x) | EnjoysVacationToItaly(x)))", "all x.((Robert(x) & -(ResistsMarkerDelectableDrinksAndDesserts(x) & FamedInItaly(x) & RefusesCollegeExperiences(x))) -> (EnjoysEatingGelatoIceCream(x) | EnjoysVacationToItaly(x)))"]}
{"id": "folio_train_717", "nl": "ETS develops various standardized tests primarily in the United States for K-12 and higher education. ", "fol": "exists x.(DevelopsTests(Ets,x) & StandardizedTest(x) & LocatedInCountry(x,Unitedstates) & ForEducationLevel(x,K12andhighereducation))", "prediction": ["all x y.((ETS(x) & UnitedStates(y)) -> DevelopsStandardizedTests(x,y))", "all x y.((ETS(x) & (K-12(y) | HigherEducation(y))) -> DevelopsStandardizedTests(x,y))", "all x y z.((ETS(x) & (K-12(y) | HigherEducation(z))) -> DevelopsStandardizedTests(x,y,z))", "all x y.((ETS(x) & UnitedStates(y)) -> DevelopsSpecifiedTests(x,y))", "all x y.((ETS(x) & UnitedStates(y)) -> (DevelopsStandardizedTests(x,y) & ForK-12AndHigherEducation(x,y)))", "all x y.((ETS(x) & UnitedStates(y)) -> (DevelopsStandardizedTests(x,y) & PrimarilyForK-12(x) & PrimarilyForHigherEducation(x,y)))", "all x y.((ETS(x) & (K-12(y) | HigherEducation(y))) -> DevelopsSpecifiedTests(x,y))", "all x y.((ETS(x) & UnitedStates(y)) -> DevelopsStandardizedTestsForK-12AndHigherEducation(x,y))", "all x y.((ETS(x) & UnitedStates(y)) -> (DevelopsStandardizedTests(x,y) & PrimarilyForK-12Education(x,y) & PrimarilyForHigherEducation(x,y)))", "all x y.((ETS(x) & UnitedStates(y)) -> (DevelopsStandardizedTests(x,y) & PrimarilyForK-12AndHigherEducation(x,y)))", "all x y z.((ETS(x) & (K-12(y) | HigherEducation(z))) -> DevelopsSpecifiedTests(x,y,z))", "all x y.((ETS(x) & UnitedStates(y)) -> (DevelopsStandardizedTests(x,y) & ForK-12AndHigherEducation(x)))", "all x y.((ETS(x) & UnitedStates(y)) -> (DevelopsStandardizedTests(x,y) & DesignedForK-12Education(x,y) & DesignedForHigherEducation(x,y)))", "all x y.((ETS(x) & UnitedStates(y)) -> (DevelopsStandardizedTests(x,y) & DesignedForK-12(x) & DesignedForHigherEducation(x,y)))", "all x y.((ETS(x) & UnitedStates(y)) -> (DevelopsStandardizedTests(x,y) & ForK-12(x) & ForHigherEducation(x,y)))", "all x y.((ETS(x) & UnitedStates(y)) -> (DevelopsStandardizedTests(x,y) & ForK-12Education(x) & ForHigherEducation(x,y)))"]}
{"id": "folio_train_718", "nl": "ETS administers international tests including the TOEFL, TOEIC, GRE and subject tests in more than 180 countries.", "fol": "exists x.(AdministersTests(Ets,x) & InternationalTest(x) & (TOEFLTest(x) | TOEICTest(x) | GRETest(x) | SubjectTests(x)))", "prediction": ["all x.(ETS(x) -> (AdministersInternationalTests(x) & (ToEFL(x) | TOEIC(x) | GRE(x) | SubjectTests(x)) & MoreThan180Countries(x)))", "all x.(ETS(x) -> (AdministersInternationalTests(x) & (ToEFL(x) | TOEIC(x) | GRE(x) | SubjectTests(x)) & InMoreThan180Countries(x)))", "all x y z.((ETS(x) & (ToEFL(y) | TOEIC(y) | GRE(y)) & SubjectTest(z)) -> AdministersInMoreThan180Countries(x,y,z))", "all x y.((ETS(x) & (ToEFL(y) | TOEIC(y) | GRE(y))) -> AdministersInternationalTests(x,y))", "all x y z.((ETS(x) & (ToEFL(y) | TOEIC(y) | GRE(y) | SubjectTest(y)) & Country(z)) -> AdministersInternationalTests(x,y,z))", "all x.(ETS(x) -> (AdministersInternationalTests(x) & (ToEFL(x) | TOEIC(x) | GRE(x) | SubjectTests(x))))", "all x y z.((ETS(x) & (ToEFL(y) | TOEIC(y) | GRE(y) | SubjectTest(y))) -> AdministersInternationalTests(x,y,z))", "all x.(ETS(x) -> (AdministersInternationalTests(x) & (ToEFL(x) | TOEIC(x) | GRE(x) | SubjectTests(x)) & MoreThan(x,180)))", "all x y z.((ETS(x) & (ToEFL(y) | TOEIC(y) | GRE(y)) & SubjectTest(z)) -> AdministersInternationalTests(x,y,z))", "all x y z.((ETS(x) & (ToEFL(y) | TOEIC(y) | GRE(y)) & SubjectTest(z)) -> AdministersInMoreThan(x,y,z))", "all x y z.((ETS(x) & (ToEFL(y) | TOEIC(y) | GRE(y)) & SubjectTest(z)) -> AdministrationInMoreThan180Countries(x,y,z))", "all x y z.((ETS(x) & (ToEFL(y) | TOEIC(y) | GRE(y) | SubjectTest(y)) & MoreThan(z)) -> AdministersInternationalTests(x,y,z))", "all x y z.((ETS(x) & (TOEFL(y) | TOEIC(y) | GRE(y)) & SubjectTest(z)) -> AdministersInMoreThan180Countries(x,y,z))", "all x.(ETS(x) -> (AdministersInternationalTests(x) & (ToEFL(x) | TOEIC(x) | GRE(x) | SubjectTests(x)) & InMoreThan(x,180)))", "all x.(ETS(x) -> (AdministersInternationalTests(x) & (ToEFL(x) | TOEIC(x) | GRE(x) | SubjectTest(x)) & MoreThan180Countries(x)))", "all x y z.((ETS(x) & (ToEFL(y) | TOEIC(y) | GRE(y) | SubjectTest(y))) -> AdministersInMoreThan180Countries(x,y,z))"]}
{"id": "folio_train_719", "nl": "Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions. ", "fol": "exists x.(DevelopsTests(Ets,x) & AssociatedWithEntry(x,EntryToUSEducationInstitutions))", "prediction": ["all x.((Assessment(x) & ETSDevelops(x)) -> AssociatesWithEntryToUSTertiaryAndQuaternaryEducationInstitutions(x))", "all x.((Assessment(x) & ETSDevelops(x)) -> AssociatesWithEntryToU.S.TertiaryAndQuaternaryEducationInstitutions(x))", "all x.((Assessment(x) & ETSDevelops(x)) -> AssociatesWithEntryToUSTertiaryAndQuaternaryEducationInstitutions(x))", "all x.((Assessment(x) & ETSDevelops(x)) -> AssociatesWithEntryToU.S.TertiaryAndQuaternaryEducationInstitutions(x))", "all x.((Assessment(x) & ETSDevelops(x)) -> AssociatedWithEntryToUSTertiaryAndQuaternaryEducationInstitutions(x))", "all x.((Assessment(x) & ETSDevelops(x)) -> AssociatesWithEntryToUSTertiaryAndQuaternaryEducationInstitutions(x))", "all x.((Assessment(x) & ETSDevelops(x)) -> AssociatesWithEntryToU.S.TertiaryAndQuaternaryEducation(x))", "all x.((Assessment(x) & ETSDevelops(x)) -> (AssociatedWithEntryToUSTertiaryAndQuaternaryEducationInstitutions(x)))", "all x.((Assessment(x) & ETSDevelops(x)) -> AssociatesWithEntryToUSTertiaryAndQuaternaryEducation(x))", "all x.((Assessment(x) & ETSDevelops(x)) -> AssociatesWithEntryToU.S.TertiaryOrQuaternaryEducation(x))", "all x.((Assessment(x) & ETSDevelops(x)) -> AssociatedWithEntryToUSTertiaryAndQuaternaryEducationInstitutions(x))", "all x.((Assessment(x) & ETSDevelops(x)) -> (AssociatedWithEntryToUSTertiaryAndQuaternaryEducationInstitutions(x)))", "all x.((Assessment(x) & ETSDevelops(x)) -> (AssociatedWithEntryToUSTertiaryAndQuaternaryEducation(x)))", "all x.((Assessment(x) & ETSDevelops(x)) -> (AssociatesWithEntryToU.S.TertiaryOrQuaternaryEducation(x)))", "all x.((Assessment(x) & ETSDevelops(x)) -> AssociatesWithEntryToUSTertiaryAndQuaternaryInstitutions(x))", "all x.((Assessment(x) & ETSDevelops(x)) -> (AssociatedWithEntryToUSTertiaryOrQuaternaryEducation(x)))"]}
{"id": "folio_train_720", "nl": "ETS also develops K-12 statewide assessments used for accountability testing in many states.", "fol": "exists x.(DevelopsTests(Ets,x) & StateWideAssessment(x) & UsedForPurpose(x,AccountabilityTesting))", "prediction": ["all x y.((ETS(x) & State(y)) -> (DevelopsK-12StatewideAssessments(x,y) & UsedForAccountabilityTesting(x,y)))", "all x.(ETS(x) -> (DevelopsK-12StatewideAssessments(x) & UsedForAccountabilityTesting(x)))", "all x y.((ETS(x) & State(y)) -> (DevelopsK-12StatewideAssesses(x,y) & UsedForAccountabilityTesting(x,y)))", "all x y z.((ETS(x) & K-12(y) & State(z)) -> DevelopsStatewideAssesses(x,y,z))", "all x y.((ETS(x) & State(y)) -> DevelopsStatewideAssessments(x,y))", "all x.(ETS(x) -> (DevelopsK-12StatewideAssesses(x) & UsedForAccountabilityTesting(x)))", "all x y z.((ETS(x) & K-12(y) & State(z)) -> DevelopsStatewideAssessments(x,y,z))", "all x y.((ETS(x) & State(y)) -> DevelopsK-12StatewideAssesses(x,y))", "all x y.((ETS(x) & State(y)) -> (DevelopsK-12StatewideAssesses(x,y) & UsedForAccountabilityTesting(x,y)))", "all x y z.((ETS(x) & K-12(y) & State(z)) -> (DevelopsStatewideAssessments(x,y,z) & UsedForAccountabilityTesting(x,y,z)))", "all x y.((ETS(x) & State(y)) -> DevelopsStatewideAssesses(x,y))", "all x y.((ETS(x) & State(y)) -> DevelopsK-12StatewideAssessments(x,y))", "all x.(ETS(x) -> (DevelopsK-12StatewideAssessments(x) & UsedForAccountabilityTestingInManyStates(x)))", "all x y z.((ETS(x) & K-12(y) & State(z) & DevelopsStatewideAssessments(x,y,z)) -> UsedForAccountabilityTesting(x,y,z))", "all x y.((ETS(x) & State(y) & DevelopsK-12StatewideAssessments(x,y)) -> UsedForAccountabilityTesting(x,y))", "all x y z.((ETS(x) & State(y) & State(z)) -> (DevelopsK-12StatewideAssessments(x,y,z) & UsedForAccountabilityTesting(x,y,z)))"]}
{"id": "folio_train_721", "nl": "ETS develops assessments for K-12 statewide as well as entry to US tertiary and quaternary education institutions.", "fol": "exists x.(DevelopsTests(Ets,x) & (ForEducationLevel(x,K12andhighereducation) | AssociatedWithEntry(x,EntryToUSEducationInstitutions)))", "prediction": ["all x.(ETS(x) -> (DevelopsAssessmentsForK-12(x) & EntranceToUSTertiaryAndQuaternaryEducationInstitutions(x)))", "all x y.((ETS(x) & K-12(y)) -> (DevelopsAssessment(x,y) & Statewide(x) & EntranceToUSTertiaryAndQuaternaryEducationInstitutions(x)))", "all x y.((ETS(x) & K-12(y)) -> (DevelopsAssessment(x,y) & Statewide(x) & EntranceTo(x,y)))", "all x y.((ETS(x) & K-12(y)) -> (DevelopsAssessment(x,y) & Statewide(x) & Entrance(x,y)))", "all x y.((ETS(x) & K-12(y)) -> (DevelopsAssessment(x,y) & Statewide(x) & EntranceToUSTertiaryAndQuaternaryEducationInstitutions(x)))", "all x y.((ETS(x) & K-12(y)) -> (DevelopsAssessment(x,y) & Statewide(x) & EntranceToUSTertiaryAndQuaternaryEducation(x)))", "all x y z.((ETS(x) & K-12(y) & USTertiary(z) & QuaternaryEducation(z)) -> (DevelopsAssessment(x,y) & EntranceTo(x,z)))", "all x y.((ETS(x) & K-12(y)) -> (DevelopsAssessment(x,y) & StatewideAssessment(x,y) & EntranceToUSTertiaryAndQuaternaryEducationInstitutions(x)))", "all x y z.((ETS(x) & K-12(y) & USTertiary(z) & QuaternaryEducation(z)) -> (DevelopsAssessment(x,y) & Entrance(x,z)))", "all x y.((ETS(x) & K-12(y)) -> (DevelopsAssessment(x,y) & StatewideAssessment(x,y) & EntryToUSTertiaryAndQuaternaryEducationInstitutions(x,y)))", "all x y.((ETS(x) & K-12(y)) -> (DevelopsAssessment(x,y) & StatewideAssessment(x,y) & EntryToUSTertiaryAndQuaternaryEducationInstitutions(x)))", "all x y.((ETS(x) & K-12(y)) -> (DevelopsAssessment(x,y) & StatewideAssessment(x,y) & EntranceToUSTertiaryAndQuaternaryEducationInstitutions(x,y)))", "all x y.((ETS(x) & K-12(y)) -> (DevelopsAssessment(x,y) & Statewide(x) & EntranceToUSTertiaryAndQuaternaryEducationInstitutions(x,y)))", "all x y.((ETS(x) & K-12(y)) -> (DevelopsAssessment(x,y) & StatewideAssessment(x,y) & EntranceToUSTertiaryAndQuaternaryEducationInstitutions(x)))", "all x y z.((ETS(x) & K-12(y) & USTertiary(z) & QuaternaryEducation(z)) -> (DevelopsAssessment(x,y,z) & EntranceTo(x,y,z)))", "all x y.((ETS(x) & K-12(y)) -> (DevelopsAssessment(x,y) & StatewideAssessment(x,y) & EntryToUSTertiaryAndQuaternaryEducationInstitutions(x,y)))"]}
{"id": "folio_train_722", "nl": "ETS doesn't administer tests internationally.", "fol": "-exists x.(AdministersTests(Ets,x) & InternationalTest(x))", "prediction": ["all x.(ETS(x) -> -AdministersInternationalTests(x))", "all x.(ETS(x) -> -AdministersTestsInternationally(x))", "all x.(ETS(x) -> -AdministerTestsInternationally(x))", "all x y.((ETS(x) & Test(y)) -> -AdministersInternationally(x,y))", "all x.(ETS(x) -> -AdministersInternationalTests(x))", "all x.(ETS(x) -> -AssistsInternationalTests(x))", "all x.(ETS(x) -> -AdministersTestsInternationally(x))", "all x.(ETS(x) -> -exists y.(InternationalTest(y) & Administers(x,y))))", "all x.(ETS(x) -> -AdministratesTestsInternationally(x))", "all x.(ETS(x) -> -AssertsTestsInternationally(x))", "all x.(ETS(x) -> -AdministratesInternationalTests(x))", "all x.(ETS(x) -> -RegistersInternationalTests(x))", "all x.(ETS(x) -> -AssistsTestsInternationally(x))", "all x.(ETS(x) -> -exists y.(InternationalTest(y) & Administers(x,y)))", "all x.(ETS(x) -> -AdministersInternationalTests(x))", "all x.(ETS(x) -> -InternationalTests(x))"]}
{"id": "folio_train_723", "nl": "ETS administers international tests including the TOEFL, GRE and subject tests in China.", "fol": "exists x.(AdministersTests(Ets,x) & InternationalTest(x) & (TOEFLTest(x) | GRETest(x) | SubjectTests(x)) & LocatedInCountry(x,China))", "prediction": ["all x y z.((ETS(x) & InternationalTest(y) & (ToEFL(z) | GRE(z) | SubjectTest(z))) -> AdministersInChina(x,y,z))", "all x y.((ETS(x) & (ToEFL(y) | GRE(y) | SubjectTest(y))) -> AdministersInternationalTests(x,y))", "all x y z.((ETS(x) & (ToEFL(y) | GRE(y) | SubjectTest(y)) & China(z)) -> AdministersInternationalTests(x,y,z))", "all x.(ETS(x) -> (AdministersInternationalTests(x) & IncludesToEFL(x) & IncludesGRE(x) & IncludesSubjectTests(x) & InChina(x)))", "all x.(ETS(x) -> (AdministersInternationalTests(x) & (ToEFL(x) | GRE(x) | SubjectTests(x)) & InChina(x)))", "all x y z.((ETS(x) & InternationalTest(y) & (TOEFL(z) | GRE(z) | SubjectTest(z))) -> AdministersInChina(x,y,z))", "all x.(ETS(x) -> (AdministersInternationalTests(x) & (ToEFL(x) | GRE(x) | SubjectTests(x))))", "all x.(ETS(x) -> (AdministersInternationalTests(x) & IncludesToEFL(x) & IncludesGRE(x) & IncludesSubjectTests(x)))", "all x y z.((ETS(x) & InternationalTest(y) & (ToEFL(z) | GRE(z) | SubjectTest(z))) -> Administers(x,y,z))", "all x y.((ETS(x) & InternationalTest(y)) -> (Administers(x,y) & (ToEFL(y) | GRE(y) | SubjectTest(y))))", "all x y.((ETS(x) & (ToEFL(y) | GRE(y) | SubjectTest(y))) -> AdministersInChina(x,y))", "all x y.((ETS(x) & (ToEFL(y) | GRE(y) | SubjectTest(y))) -> AdministrationInChina(x,y))", "all x.(ETS(x) -> (AdministersInternationalTests(x) & (ToEFL(x) | GRE(x) | SubjectTest(x)) & InChina(x)))", "all x y z.((ETS(x) & InternationalTest(y) & (ToEFL(z) | GRE(z) | SubjectTest(z))) -> AdministrationInChina(x,y,z))", "all x y z.((ETS(x) & InternationalTest(y) & (TOEFL(z) | GRE(z) | SubjectTest(z))) -> Administers(x,y,z))", "all x y z.((ETS(x) & InternationalTest(y) & (ToEFL(z) | GRE(z) | SubjectTest(z))) -> Administration(x,y,z))"]}
{"id": "folio_train_724", "nl": "To get a student visa, you must be full-time enrolled in an academic program.", "fol": "all x.(RequiresStudentVisa(x) -> IsFullTimeEnrolled(x))", "prediction": ["all x.((FullTimeEnrolledInAcademicProgram(x) & EnrolledInAcademicProgram(x)) -> StudentVisa(x))", "all x.((FullTime(x) & EnrolledInAcademicProgram(x)) -> StudentVisa(x))", "all x.((StudentVisa(x) & FullTimeEnrolledInAcademicProgram(x)) -> GetsVisa(x))", "all x.((FullTimeEnrolledInAcademicProgram(x)) -> StudentVisa(x))", "all x.((FullTimeEnrolled(x) & AcademicProgram(x)) -> StudentVisa(x))", "all x.((FullTimeStudent(x) & EnrolledInAcademicProgram(x)) -> StudentVisa(x))", "all x.((FullTimeEnrolledInAcademicProgram(x) & FullTimeEnrolledInAcademicProgram(x)) -> StudentVisa(x))", "all x.(StudentVisa(x) -> FullTimeEnrolledInAcademicProgram(x))", "all x.(StudentVisa(x) -> (FullTimeEnrolledInAcademicProgram(x) & EnrolledInAcademicProgram(x)))", "all x.((StudentVisa(x) & FullTimeEnrolledInAcademicProgram(x)) -> StudentVisa(x))", "all x.((FullTimeStudent(x) & EnrolledInAcademicProgram(x)) -> GetsStudentVisa(x))", "all x.((FullTimeEnrolledInAcademicProgram(x) & EnrolledInAcademicProgram(x)) -> GetsStudentVisa(x))", "all x.(StudentVisa(x) -> (FullTimeEnrolledInAcademicProgram(x)))", "all x.(StudentVisa(x) -> EnrolledFullTimeInAcademicProgram(x))", "all x.(StudentVisa(x) -> (FullTimeEnrolledInAcademicProgram(x)))", "all x.(StudentVisa(x) -> EnrolledInAcademicProgram(x))"]}
{"id": "folio_train_725", "nl": "Those who are full-time enrolled in an academic program can not work full-time.", "fol": "all x.(IsFullTimeEnrolled(x) -> -CanWorkFullTime(x))", "prediction": ["all x.((FullTimeEnrolledInAcademicProgram(x)) -> -WorksFullTime(x))", "all x.((FullTimeEnrolled(x) & AcademicProgram(x)) -> -WorksFullTime(x))", "all x.((FullTime(x) & EnrolledInAcademicProgram(x)) -> -WorksFullTime(x))", "all x.((FullTimeEnrolledInAcademicProgram(x)) -> -WorkFullTime(x))", "all x.((FullTimeEnrolledInAcademicProgram(x)) -> CannotWorkFullTime(x))", "all x.((FullTimeEnrolled(x) & AcademicProgram(x)) -> -WorkFullTime(x))", "all x.((FullTimeEnrolled(x) & AcademicProgram(x)) -> -FullTimeWorker(x))", "all x.((FullTimeEnrolledInAcademicProgram(x)) -> -FullTimeWorker(x))", "all x.((FullTimeEnrolledInAcademicProgram(x)) -> -CanWorkFullTime(x))", "all x.((FullTimeEnrolled(x) & AcademicProgram(x)) -> CannotWorkFullTime(x))", "all x.((FullTimeEnrolledInAcademicProgram(x) & EnrolledInAcademicProgram(x)) -> -WorksFullTime(x))", "all x y.((FullTimeEnrolled(x) & AcademicProgram(y)) -> -WorksFullTime(x,y))", "all x.((FullTimeStudent(x) & EnrolledInAcademicProgram(x)) -> -WorksFullTime(x))", "all x.((FullTime(x) & EnrolledInAcademicProgram(x)) -> CannotWorkFullTime(x))", "all x.((FullTimeEnrolled(x) & EnrolledInAcademicProgram(x)) -> -WorksFullTime(x))", "all x y.((FullTimeEnrolled(x) & AcademicProgram(y)) -> -WorksFullTime(x))"]}
{"id": "folio_train_726", "nl": "Everyone who wants to study abroad needs to have a student visa.", "fol": "all x.(WantsToStudyAbroad(x) -> RequiresStudentVisa(x))", "prediction": ["all x.(WantsToStudyAround(x) -> HasStudentVisa(x))", "all x.(WantsToStudyAbroad(x) -> HasStudentVisa(x))", "all x.((WantsToStudyAround(x) & HasStudentVisa(x)) -> NeedsVisa(x))", "all x.((WantsToStudyAbroad(x) & HasStudentVisa(x)) -> NeedsVisa(x))", "all x.((WantsToStudyAround(x) & HasStudentVisa(x)) -> HasStudentVisa(x))", "all x.((WantsToStudyAbroad(x) & HasStudentVisa(x)) -> HasStudentVisa(x))", "all x.((WantsToStudyAround(x) & HasStudentVisa(x)) -> Needs(x))", "all x.((Student(x) & WantsToStudyAround(x)) -> HasStudentVisa(x))", "all x.(WantsToStudyAround(x) -> NeedsStudentVisa(x))", "all x.((WantsToStudyAround(x) & HasStudentVisa(x)) -> NeedsToStudyAround(x))", "all x.((Student(x) & WantsToStudyAbroad(x)) -> HasStudentVisa(x))", "all x.((WantsToStudyAbroad(x) & HasStudentVisa(x)) -> Needs(x))", "all x.((Student(x) & WantsToStudyAround(x)) -> NeedsStudentVisa(x))", "all x.((WantsToStudyAbroad(x) & HasStudentVisa(x)) -> HasVisa(x))", "all x.(WantsToStudyAbroad(x) -> NeedsStudentVisa(x))", "all x.(StudentVisa(x) -> WantsToStudyAround(x))"]}
{"id": "folio_train_727", "nl": "All PhD graduates can work full time. ", "fol": "all x.(IsPhDGraduate(x) -> CanWorkFullTime(x))", "prediction": ["all x.(PhD(x) -> CanWorkFullTime(x))", "all x.(DoctoralGraduate(x) -> CanWorkFullTime(x))", "all x.((PhD(x) & Graduate(x)) -> CanWorkFullTime(x))", "all x.((PhD Graduate(x) & FullTime(x)) -> CanWork(x))", "all x.(DoctoralRecipient(x) -> CanWorkFullTime(x))", "all x.(PhD Graduate(x) -> CanWorkFullTime(x))", "all x.((DoctoralGraduate(x) & FullTime(x)) -> CanWork(x))", "all x.((PhD(x) & Graduate(y)) -> CanWorkFullTime(y))", "all x.((PhD(x) & Graduate(y)) -> CanWorkFullTime(x,y))", "all x.((PhD(x) & Graduate(y)) -> CanWorkFullTime(x))", "all x.(PhD(x) -> WorksFullTime(x))", "all x.(PhDRecipient(x) -> CanWorkFullTime(x))", "all x.(Dissertation(x) -> CanWorkFullTime(x))", "all x.(Doctor(x) -> CanWorkFullTime(x))", "all x.(DoctoralGraduate(x) -> WorksFullTime(x))", "all x.(PhD(x) -> WorkFullTime(x))"]}
{"id": "folio_train_728", "nl": "If Tom does not want to study abroad, he is full-time enrolled in an educational program.", "fol": "(-WantsToStudyAbroad(Tom) -> IsFullTimeEnrolled(Tom))", "prediction": ["all x.((Tom(x) & -WantsToStudyAround(x)) -> EnrolledInEducationalProgram(x))", "all x.((Tom(x) & -WantsToStudyAbroad(x)) -> EnrolledInEducationalProgram(x))", "all x.((Tom(x) & -WantToStudyAround(x)) -> EnrolledInEducationalProgram(x))", "all x.((Tom(x) & -WantsToStudyAround(x)) -> FullTimeEnrolledInEducationalProgram(x))", "all x.((Tom(x) & -WantsToStudyAround(x)) -> EnrolledFullTimeInEducationalProgram(x))", "all x.((Tam(x) & -WantsToStudyAround(x)) -> EnrolledInEducationalProgram(x))", "all x.((Tom(x) & -WantsToStudyAway(x)) -> EnrolledInEducationalProgram(x))", "all x.((Tom(x) & -WantToStudyAbroad(x)) -> EnrolledInEducationalProgram(x))", "all x.((Tom(x) & -DoesStudyAround(x)) -> EnrolledInEducationalProgram(x))", "all x.((Ton(x) & -WantsToStudyAround(x)) -> EnrolledInEducationalProgram(x))", "all x.((Tom(x) & -WantsToStudyAbroad(x)) -> EnrolledInEducationalProgram(x))", "all x.((Tom(x) & -GoesToStudyAround(x)) -> EnrolledInEducationalProgram(x))", "all x.((Tomb(x) & -WantsToStudyAround(x)) -> EnrolledInEducationalProgram(x))", "all x.((Tom(x) & -PlansToStudyAround(x)) -> EnrolledInEducationalProgram(x))", "all x.((Tom(x) & -CanStudyAround(x)) -> EnrolledInEducationalProgram(x))", "all x.((Tom(x) & -StudyAround(x)) -> EnrolledInEducationalProgram(x))"]}
{"id": "folio_train_729", "nl": "Tom is a PhD graduate.", "fol": "IsPhDGraduate(Tom)", "prediction": ["Tom is a PhDGraduate(Tom)", "Tom is PhDGraduate(Tom)", "all x.((Tom(x) & PhDGraduate(x)) -> Graduate(x))", "(PhD Graduate(Tom) & PhD(Tom))", "(PhD graduate(Tom) & PhD(Tom))", "(Professor(Tom) & Graduate(Tom))", "all x.((Tom(x) & PhDGraduate(x)) -> Is(x,y))", "all x.((Tom(x) & PhDGraduate(x)) -> Becomes(x))", "all x.((Tom(x) & PhDGraduate(x)) -> PhD(x))", "all x.((Tom(x) & DoctoralGraduate(x)) -> Graduate(x))", "(PhD graduate(Tom) | PhDGraduate(Tom)))", "all x.((Tom(x) & PhDGraduate(x)) -> -PhD(x))", "all x.((Tom(x) & DoctoralGraduate(x)) -> PhD(x))", "all x.((Tom(x) & PhDGraduate(x)) -> Has(x,y))", "(PhD graduate(Tom) & -PhD graduate(Tom))", "(PhD Graduate(Tom) & -PhD Graduate(Tom))"]}
{"id": "folio_train_730", "nl": "Tom is not a PhD graduate.", "fol": "-IsPhDGraduate(Tom)", "prediction": ["all x.((Tom(x) & -PhD Graduate(x)) -> -PhD Graduate(x))", "all x.((Tom(x) & -DoctoralGraduate(x)) -> -DoctoralGraduate(x))", "all x.((Tom(x) & -DoctoralGraduate(x)) -> -PhD(x))", "all x.((Tom(x) & -PhDGraduate(x)) -> -PhD Graduate(x))", "all x.((Tom(x) & -PhDGraduate(x)) -> -PhDGraduate(x))", "all x.((Tom(x) & -PhD Graduate(x)) -> -(PhD Graduate(x) & -PhD Graduate(x)))", "all x.((Tom(x) & -PhD graduate(x)) -> -PhD graduate(x))", "all x.((Tom(x) & -PhD Graduate(x)) -> -DoctoralGraduate(x))", "Tom is not a PhDGraduate(Tom)", "all x.((Tom(x) & -PhD Graduate(x)) -> -(PhD Graduate(x) & -PhD Graduate(x))))", "(-PhD Graduate(Tom))", "all x.(Tom(x) -> -PhD Graduate(x))", "all x.(Tom(x) -> -DoctoralGraduate(x))", "all x.((Tom(x) & -PhD(x)) -> -PhD(x))", "all x.((Tom(x) & -PhD Graduate(x)) -> -(PhD Graduate(x) & PhDGraduate(x)))", "all x.((Tom(x) & -DoctoralGraduate(x)) -> -Doctoral(x))"]}
{"id": "folio_train_731", "nl": "Tom wants to study abroad.", "fol": "WantsToStudyAbroad(Tom)", "prediction": ["all x.(Tom(x) -> WantsToStudyAround(x))", "all x.((Tom(x) & WantsToStudyAround(x)) -> WantsToStudyAround(x))", "exists x.(Tom(x) & WantsToStudyAround(x))", "all x y.((Tom(x) & StudyAround(y)) -> WantsToStudy(x,y))", "(WantsToStudyAround(Tom) -> WantsToStudyAround(Tom))", "all x.((Tom(x) & WillStudyAround(x)) -> WantsToStudyAround(x))", "all x.((Tom(x) & StudyAbroad(x)) -> WantsToStudy(x))", "all x.(Tom(x) -> WantsToStudyAbroad(x))", "all x.((Tom(x) & WantsToStudyAround(x)) -> WantsToStudy(x))", "all x.((Tom(x) & WillStudyAround(x)) -> WantsToStudy(x))", "all x.((Tom(x) & WantsToStudyAbroad(x)) -> WantsToStudyAround(x))", "all x y.((Tom(x) & StudyAround(y)) -> WantsToStudyAround(x,y))", "all x.((Tom(x) & WantsToStudyAround(x)) -> WillStudyAround(x))", "all x.((Tom(x) & WantsToStudyAround(x)) -> CanStudyAround(x))", "all x.((Tom(x) & WantsToStudyAround(x)) -> WantsToStudyAbroad(x))", "all x.((Tom(x) & WantsToStudyAbroad(x)) -> WantsToStudyAbroad(x))"]}
{"id": "folio_train_732", "nl": "The installment sales method is the approach to recognize revenue under the US GAAP.", "fol": "all x.(FollowsUSGAAP(x) -> AppliesInstallmentSalesMethod(x))", "prediction": ["all x.(InstalmentSalesMethod(x) -> RecognizesRevenueUnderGAAP(x))", "all x.(InstalmentSalesMethod(x) -> RecognizesRevenue(x))", "all x y.((InstalmentSalesMethod(x) & Revenue(y)) -> RecognizesUnderGAAP(x,y))", "all x.(InstalmentSalesMethod(x) -> RecognizeRevenueUnderGAAP(x))", "all x y.((InstalmentSalesMethod(x) & USGAAP(y)) -> RecognizesRevenue(x,y))", "all x y z.((InstalmentSalesMethod(x) & Revenue(y) & USGAAP(z)) -> Recognizes(x,y,z))", "all x y.((InstalmentSalesMethod(x) & Revenue(y)) -> Recognizes(x,y))", "all x y z.((InstalmentSalesMethod(x) & Revenue(y) & GAAP(z)) -> Recognizes(x,y,z))", "all x.(InstalmentSalesMethod(x) -> RecognizeRevenue(x))", "all x y.((InstalmentSalesMethod(x) & Revenue(y)) -> RecognizesUnder(x,y))", "all x.(InstalmentSalesMethod(x) -> RecognizesRevenueUnderUSGAAP(x))", "all x y.((InstalmentSalesMethod(x) & Revenue(y) & USGAAP(y)) -> Recognizes(x,y))", "all x.(InstalmentSalesMethod(x) -> RecognizesRevenue(x,USGAAP))", "all x y.((InstalmentSalesMethod(x) & Revenue(y) & UnderGAAP(x,y)) -> Recognizes(x,y))", "all x y.((InstalmentSalesMethod(x) & Revenue(y) & USGAAP(x,y)) -> Recognizes(x,y))", "all x y.((InstalmentSalesMethod(x) & Revenue(y) & USGAAP(z)) -> Recognizes(x,y,z))"]}
{"id": "folio_train_733", "nl": "In accrual accounting, revenues are recognized when they are realized.", "fol": "all x.(FollowsAccrualAccounting(x) -> RevenueRecognitionCondition(Revenues,Realized))", "prediction": ["all x y.((AccrualAccounting(x) & Revenue(y) & Realized(y)) -> Recognized(x,y))", "all x.((AccrualAccounting(x) & RealizedRevenue(x)) -> Recognized(x))", "all x y.((AccrualAccounting(x) & Revenue(y) & Realized(y)) -> Recognized(x,y))", "all x y z.((AccrualAccounting(x) & Revenue(y) & Realized(z)) -> Recognized(x,y,z))", "all x.((AccrualAccounting(x) & RealizedRevenue(x)) -> Recognized(x))", "all x y.((AccrualAccounting(x) & Revenue(y)) -> Recognized(x,y))", "all x.((AccrualAccounting(x) & RealizedRevenues(x)) -> Recognized(x))", "all x y.((AccrualAccounting(x) & Revenue(y) & Realized(y,x)) -> Recognized(x,y))", "all x y.((AccrualAccounting(x) & Revenue(y)) -> RecognizedWhenRealized(x,y))", "all x y z.((AccrualAccounting(x) & Revenue(y) & Realized(z)) -> Recognized(x,y,z))", "all x y z.((AccrualAccounting(x) & Revenue(y) & Realized(z)) -> Recognized(x,y))", "all x.((AccrualAccounting(x) & Realized(x)) -> RecognizedRevenue(x))", "all x y.((AccrualAccounting(x) & Revenue(y)) -> Recognized(x,y))", "all x.((AccrualAccounting(x) & RealizedRevenues(x)) -> Recognized(x))", "all x.((AccrualAccounting(x) & Realized(x)) -> RecognizedRevenues(x))", "all x y.((AccrualAccounting(x) & Revenue(y)) -> RecognizedWhenRealized(x,y))"]}
{"id": "folio_train_734", "nl": "In cash accounting, revenues are recognized when cash is received.", "fol": "all x.(FollowsCashAccounting(x) -> RevenueRecognitionCondition(Revenues,Cashrecieved))", "prediction": ["all x.((CashAccounting(x) & CashReceived(x)) -> RecognizedRevenue(x))", "all x y.((CashAccounting(x) & Cash(y)) -> RecognizedRevenues(x,y))", "all x y.((CashAccounting(x) & Cash(y)) -> RecognizedRevenue(x,y))", "all x y.((CashAccounting(x) & CashReceived(y)) -> RecognizedRevenue(x,y))", "all x.((CashAccounting(x) & CashReceived(x)) -> RecognizedRevenues(x))", "all x y.((CashAccounting(x) & CashReceived(y)) -> RecognizedRevenues(x,y))", "all x y z.((CashAccounting(x) & Cash(y) & Cash(z)) -> RecognizedRevenue(x,y,z))", "all x y.((CashAccounting(x) & Cash(y)) -> RecognizesRevenues(x,y))", "all x y z.((CashAccounting(x) & Cash(y) & Cash(z)) -> RecognizedRevenues(x,y,z))", "all x y.((CashAccounting(x) & Cash(y)) -> RecognizesRevenue(x,y))", "all x.((CashAccounting(x) & CashReceived(x)) -> RevenueRecognition(x))", "all x y.((CashAccounting(x) & CashReceived(y)) -> RecognizesRevenue(x,y))", "all x.((CashAccounting(x) & CashReceived(x)) -> RevenuesRecognized(x))", "all x y.((CashAccounting(x) & CashReceived(y)) -> Recognized(x,y))", "all x y z.((CashAccounting(x) & Cash(y) & Cash(z)) -> RecognizesRevenue(x,y,z))", "all x y z.((CashAccounting(x) & Cash(y) & Cash(z)) -> RecognizesRevenues(x,y,z))"]}
{"id": "folio_train_735", "nl": "The US GAAP is the accounting standard developed and used by the US Securities and Exchange Commission.", "fol": "(CreatedBy(Usgaap,Ussecuritiesandexchangecommission) & FollowsUSGAAP(Ussecuritiesandexchangecommission))", "prediction": ["all x.(USGAAP(x) -> (AccountingStandard(x) & DevelopedBySecuritiesAndExchangeCommission(x) & UsedByCommission(x)))", "all x y.((USGAAP(x) & SecuritiesAndExchangeCommission(y)) -> (DevelopedAndUsedBy(x,y) & UsedBy(x,y)))", "all x y.((AccountingStandard(x) & SecuritiesAndExchangeCommission(y)) -> (DevelopedAndUsedBy(x,y) & UsedBy(x,y)))", "all x.((AccountingStandard(x) & DevelopedBySecuritiesAndExchangeCommission(x)) -> USGAAP(x))", "all x.(USGAAP(x) -> (AccountingStandard(x) & DevelopedAndUsedBySecuritiesAndExchangeCommission(x)))", "all x.(USGAAP(x) -> (AccountingStandard(x) & Developed(x) & UsedBySecuritiesAndExchangeCommission(x)))", "all x.((AccountingStandard(x) & DevelopedBySecuritiesAndExchangeCommission(x)) -> UsedByUSGAAP(x))", "all x y.((AccountingStandard(x) & SecuritiesAndExchangeCommission(y)) -> (DevelopedBy(x,y) & UsedBy(x,y)))", "all x.((AccountingStandard(x) & Developed(x) & UsedBySecuritiesAndExchangeCommission(x)) -> USGAAP(x))", "all x.(USGAAP(x) -> (AccountingStandard(x) & DevelopedBySecuritiesAndExchangeCommission(x) & UsedByCommission(x)))", "all x.(USGAAP(x) -> (AccountingStandard(x) & DevelopedBySecuritiesAndExchangeCommission(x) & UsedBySecuritiesAndExchangeCommission(x)))", "all x.((AccountingStandard(x) & DevelopedBySEC(x) & UsedBySEC(x)) -> USGAAP(x))", "all x.(GAAP(x) -> (AccountingStandard(x) & DevelopedBySecuritiesAndExchangeCommission(x) & UsedByCommission(x)))", "all x.((AccountingStandard(x) & DevelopedAndUsedBySecuritiesAndExchangeCommission(x)) -> USGAAP(x))", "all x y z.((USGAAP(x) & AccountingStandard(y) & SecuritiesAndExchangeCommission(z)) -> (DevelopedAndUsedBy(y,z) & UsedBy(y,z)))", "all x.(USGAAP(x) -> (AccountingStandard(x) & DevelopedBySEC(x) & UsedBySEC(x)))"]}
{"id": "folio_train_736", "nl": "Sally works for the US Securities and Exchange Commission.", "fol": "EmployedBy(Sally,Ussecuritiesandexchangecommission)", "prediction": ["all x y.((Sally(x) & SecuritiesAndExchangeCommission(y)) -> WorksFor(x,y))", "all x.(Sally(x) -> WorksForSecuritiesAndExchangeCommission(x))", "Sally works for the USSecuritiesAndExchangeCommission.", "(WorksForSecuritiesAndExchangeCommission(Sally) & -WorksForSecuritiesAndExchangeCommission(Sally))", "Sally works for USSecuritiesAndExchangeCommission.", "all x y.((Sally(x) & SecuritiesAndExchangeCommission(y) & WorksFor(x,y)) -> WorksFor(x,y))", "All x.(Sally(x) -> WorksForSecuritiesAndExchangeCommission(x))", "Sally works for the US SecuritiesAndExchangeCommission.", "Sally works for the USSecuritiesAndExchangeCommission(Sally)", "Sally works for USSecuritiesAndExchangeCommission(Sally)", "(WorksForSecuritiesAndExchangeCommission(Sally) -> WorksForSecuritiesAndExchangeCommission(Sally))", "(WorksForSecuritiesAndExchangeCommission(Sally) & WorksForSecuritiesAndExchangeCommission(Sally))", "all x y.((Sally(x) & SecuritiesAndExchangeCommission(y)) -> WorkedFor(x,y))", "(WorksForSecuritiesAndExchangeCommission(Sally) & -WorksForSecuritiesAndExchangeCommission(Sally,US))", "Sally works for SecuritiesAndExchangeCommission(Sally,US)", "Sally works for SecuritiesAndExchangeCommission(Sally)"]}
{"id": "folio_train_737", "nl": "Sally's company utilizes the installment sales method.", "fol": "exists x.(EmployedBy(Sally,x) -> AppliesInstallmentSalesMethod(x))", "prediction": ["all x.((Company(x) & Sally(x)) -> UtilizesInstalmentSales(x))", "all x.((Company(x) & Sally(x)) -> InstallmentSales(x))", "all x y.((Company(x) & Sally(y)) -> UtilizesInstalmentSales(x,y))", "all x.((Company(x) & Sally(x)) -> InstallmentSalesMethod(x))", "all x y.((Company(x) & Sally(y)) -> UtilizesInstalmentSalesMethod(x,y))", "all x.((Company(x) & Sally(x)) -> UtilizesInstalmentSalesMethod(x))", "all x y z.((Company(x) & Sally(y) & InstallmentSalesMethod(z)) -> Utilizes(x,y,z))", "all x y z.((Company(x) & Sally(y) & InstallmentSales(z)) -> Utilizes(x,y,z))", "all x.((Sally'sCompany(x) & InstallmentSalesMethod(x)) -> Utilizes(x,y))", "all x y.((Company(x) & Sally(y)) -> InstallmentSalesMethod(x,y))", "all x y.((Company(x) & Sally(y)) -> InstallmentSales(x,y))", "all x.((Company(x) & Sally(x)) -> UsesInstalmentSalesMethod(x))", "all x y.((Company(x) & Sally(y)) -> UtilizesInstalmentSalesMethod(y,x))", "all x.(Sally'sCompany(x) -> UtilizesInstalmentSales(x))", "all x y.((Company(x) & Sally(y)) -> UtilizesInstalmentSales(y,x))", "all x y.((Company(x) & Sally(y)) -> UsesInstalmentSalesMethod(x,y))"]}
{"id": "folio_train_738", "nl": "The company Sally works for performs accrual accounting.", "fol": "exists x.(EmployedBy(Sally,x) & UsesAccrualAccounting(x))", "prediction": ["all x.((Company(x) & WorksFor(x)) -> PerformsAccrualAccounting(x))", "all x.((Company(x) & WorksFor(x)) -> PerformsAccrualAccounting(x))", "all x.((Company(x) & SallyWorksFor(x)) -> PerformsAccrualAccounting(x))", "all x.((Company(x) & SallyWorksFor(x)) -> PerformsAccrualAccounting(x))", "all x.(WorksFor(x) -> PerformsAccrualAccounting(x))", "all x.(WorksFor(x) -> PerformsAccrualAccounting(x))", "all x y.((Company(x) & Sally(y)) -> PerformsAccrualAccounting(x,y))", "all x y.((Company(x) & Sally(y)) -> PerformsAccrualAccounting(x,y))", "all x.(SallyWorksFor(x) -> PerformsAccrualAccounting(x))", "all x.(SallyWorksFor(x) -> PerformsAccrualAccounting(x))", "all x.((Company(x) & WorksFor(x)) -> PerformsAccruelAccounting(x))", "all x y.((Company(x) & Sally(y)) -> PerformsAccrualAccounting(y,x))", "all x y.((Company(x) & SallyWorksFor(x)) -> PerformsAccrualAccounting(y))", "all x y.((Company(x) & SallyWorksFor(x)) -> PerformsAccrualAccounting(x))", "all x.((Company(x) & WorksFor(x)) -> PerformsAccuracyAccounting(x))", "all x.((Company(x) & WorksFor(x)) -> PerformsAccueltyAccounting(x))"]}
{"id": "folio_train_739", "nl": "Sally does not work for a company that uses the GAAP.", "fol": "-exists y.(EmployedBy(Sally,y) & FollowsUSGAAP(y))", "prediction": ["all x y.((Sally(x) & Company(y) & UsesGAAP(x,y)) -> -WorksFor(x,y))", "all x.((Sally(x) & Company(x) & UsesGAAP(x)) -> -WorksFor(x,GAAP))", "all x.((Sally(x) & -UsesGAAP(x)) -> -WorksFor(x,GAAP))", "all x y.((Sally(x) & Company(y) & UsesGAAP(x)) -> -WorksFor(x,y))", "all x.((Sally(x) & -UsesGAAP(x)) -> -WorksForCompany(x))", "all x.((Sally(x) & Company(y) & UsesGAAP(x,y)) -> -WorksFor(x,y))", "all x y.((Sally(x) & Company(y)) -> -UsesGAAP(x,y))", "all x.((Sally(x) & Company(y) & UsesGAAP(x)) -> -WorksFor(x,y))", "all x.((Sally(x) & -UsesGAAP(x)) -> -WorksForGAAP(x))", "all x.((Sally(x) & Company(x) & -UsesGAAP(x)) -> -WorksFor(x,GAAP))", "all x y.((Sally(x) & Company(y) & UsesGAAP(y)) -> -WorksFor(x,y))", "all x.((Sally(x) & Company(x) & UsesGAAP(x)) -> -WorksFor(x,GAAP,GAAP))", "all x.((Sally(x) & Company(x) & UsesGAAP(x)) -> -WorksForGAAP(x))", "all x.((Sally(x) & -WorksForGAAP(x)) -> -WorksForGAAP(x))", "all x.((Sally(x) & Company(x) & UsesGAAP(x)) -> -WorksFor(x,Gaap))", "all x.((Sally(x) & Company(x) & GAAP(x)) -> -WorksFor(x,GAAP))"]}
{"id": "folio_train_740", "nl": "All people who are respected by others are people who contribute to the country. ", "fol": "all x.(RespectedByOthers(x) -> ContributesToCountry(x))", "prediction": ["all x.((Person(x) & RespectedByOthers(x)) -> ContributesToCountry(x))", "all x.(RespectedByOthers(x) -> ContributesToCountry(x))", "all x.((People(x) & RespectedByOthers(x)) -> ContributesToCountry(x))", "all x y.((Person(x) & RespectedByOthers(x) & Country(y)) -> ContributesTo(x,y))", "all x.((Person(x) & RespektedByOthers(x)) -> ContributesToCountry(x))", "all x.((RespectedByOthers(x) & ContributesToCountry(x)) -> ContributesToCountry(x))", "all x.((Person(x) & RespectedByOthers(x)) -> ContributeToCountry(x))", "all x y.((Person(x) & RespectedByOthers(x)) -> ContributesToCountry(y))", "all x.((Person(x) & RespectedByOthers(x)) -> ContributesToCity(x))", "all x y.((Person(x) & RespectedByOthers(x)) -> ContributesToCountry(x))", "all x.(RespectableByOthers(x) -> ContributesToCountry(x))", "all x y.((Person(x) & RespectedByOthers(x)) -> ContributesToCountry(x,y))", "all x y.((Person(x) & RespektedByOthers(x) & Country(y)) -> ContributesTo(x,y))", "all x.((Personnel(x) & RespectedByOthers(x)) -> ContributesToCountry(x))", "all x.(RespectfulByOthers(x) -> ContributesToCountry(x))", "all x.((Person(x) & Respected(x)) -> ContributesToCountry(x))"]}
{"id": "folio_train_741", "nl": "If a person is respected by others, then he/she contributes to the country. ", "fol": "all x.(RespectedByOthers(x) -> ContributesToCountry(x))", "prediction": ["all x.(RespectedByOthers(x) -> ContributesToCountry(x))", "all x.((Person(x) & RespectedByOthers(x)) -> ContributesToCountry(x))", "all x y.((Person(x) & RespectedByOthers(x) & Country(y)) -> ContributesTo(x,y))", "all x y.((Person(x) & RespectedByOthers(x)) -> ContributesToCountry(x,y))", "all x y z.((Person(x) & RespectedByOthers(x) & Country(y) & ContributesTo(x,y)) -> ContributesTo(x,y))", "all x y.((Person(x) & RespectedByOthers(x)) -> ContributesToCountry(y))", "all x y z.((Person(x) & RespectedByOthers(x) & Country(y) & ContributesTo(x,y)) -> ContributesTo(x,z))", "all x y z.((Person(x) & RespectedByOthers(x) & Country(y) & ContributesTo(x,z)) -> ContributesTo(x,y))", "all x y z.((Person(x) & RespektedByOthers(x) & Country(y) & ContributesTo(x,y)) -> ContributesTo(x,y))", "all x y.((Person(x) & RespektedByOthers(x) & Country(y)) -> ContributesTo(x,y))", "all x y.((Person(x) & RespectedByOthers(x)) -> ContributesToCountry(x))", "all x.(RespectedByOthers(x) -> ContributesToCountry(x))", "all x y z.((Person(x) & RespectedByOthers(x) & Country(y) & ContributesTo(x,y,z)) -> ContributesTo(x,y))", "all x y.((Person(x) & RespektedByOthers(x)) -> ContributesToCountry(x,y))", "all x y.((Person(x) & RespectedByOthers(x,y)) -> ContributesToCountry(x,y))", "all x.(RespektedByOthers(x) -> ContributesToCountry(x))"]}
{"id": "folio_train_742", "nl": "All people available to have a visit without any fees are those respected by others. ", "fol": "all x.(AvailableForVisitWithoutFees(x) -> RespectedByOthers(x))", "prediction": ["all x.((Person(x) & AvailableForVisit(x) & -Fees(x)) -> RespectedByOthers(x))", "all x.((Person(x) & AvailableToHaveVisitWithoutFees(x)) -> RespectedByOthers(x))", "all x.((Person(x) & AvailableToHaveVisit(x) & -Fees(x)) -> RespectedByOthers(x))", "all x.((Person(x) & AvailableForVisitWithoutFees(x)) -> RespectedByOthers(x))", "all x.((Person(x) & AvailableForVisit(x) & -Fee(x)) -> RespectedByOthers(x))", "all x.((Person(x) & AvailableForVisit(x) & NoFees(x)) -> RespectedByOthers(x))", "all x.((Person(x) & AvailableToHaveVisit(x) & NoFees(x)) -> RespectedByOthers(x))", "all x.((Person(x) & AvailableToHaveVisit(x) & -HasFees(x)) -> RespectedByOthers(x))", "all x.((Person(x) & AvailableToHaveVisit(x) & -Fee(x)) -> RespectedByOthers(x))", "all x.((Person(x) & AvailableToHaveVisiting(x) & -Fees(x)) -> RespectedByOthers(x))", "all x.((Person(x) & AvailableToHaveNoFees(x)) -> RespectedByOthers(x))", "all x.((Person(x) & AvailableForVisit(x,y) & -Fees(y)) -> RespectedByOthers(x))", "all x y.((Person(x) & AvailableToHaveVisit(x,y) & -Fees(y)) -> RespectedByOthers(x))", "all x y.((Person(x) & Person(y) & AvailableForVisit(x,y) & -Fees(y)) -> RespectedByOthers(x))", "all x y.((Person(x) & AvailableForVisit(x,y) & -Fees(y)) -> RespectedByOthers(x))", "all x.((Person(x) & AvailableForVisitWithoutFee(x)) -> RespectedByOthers(x))"]}
{"id": "folio_train_743", "nl": "All Customers who once served in the army are available to have a visit without any fees. ", "fol": "all x.(ServedInArmy(x) -> AvailableForVisitWithoutFees(x))", "prediction": ["all x.((Customer(x) & ServicedInArmy(x)) -> AvailableForVisitWithoutFees(x))", "all x.((Customer(x) & ServicedInArmy(x)) -> AvailableToHaveVisitWithoutFees(x))", "all x.((Customer(x) & OnceServedInArmy(x)) -> AvailableToHaveVisitWithoutFees(x))", "all x.((Customer(x) & OnceServedInArmy(x)) -> AvailableForVisitWithoutFees(x))", "all x.((Customer(x) & ServedInArmy(x)) -> AvailableToHaveVisitWithoutFees(x))", "all x.((Customer(x) & ServedInArmy(x)) -> AvailableForVisitWithoutFees(x))", "all x.((Customer(x) & ServingInArmy(x)) -> AvailableToHaveVisitWithoutFees(x))", "all x.((Customer(x) & servedInArmy(x)) -> AvailableToHaveVisitWithoutFees(x))", "all x.((Customer(x) & servedInArmy(x)) -> AvailableForVisitWithoutFees(x))", "all x.((Customer(x) & ServingInArmy(x)) -> AvailableForVisitWithoutFees(x))", "all x.((Customer(x) & FormerlyServedInArmy(x)) -> AvailableToHaveVisitWithoutFees(x))", "all x.((Customer(x) & FormerlyServedInArmy(x)) -> AvailableForVisitWithoutFees(x))", "all x.((Customer(x) & ServicedInArmy(x)) -> AvailableWithoutFees(x))", "all x.((Customer(x) & ServicedInArmy(x)) -> AvailableForVisit(x))", "all x.(ServedInArmy(x) -> AvailableToHaveVisitWithoutFees(x))", "all x.((Customer(x) & ServicedInArmy(x)) -> AvailableToHaveVisit(x))"]}
{"id": "folio_train_744", "nl": "All people who once were sentenced for thief stayed in prison for some time. ", "fol": "all x.(SentencedForTheft(x) -> StayedInPrison(x))", "prediction": ["all x.((Person(x) & SentForTheft(x)) -> StayedInPenitence(x))", "all x.((Person(x) & SentForThief(x)) -> StayedInPenitence(x))", "all x.((Person(x) & SentForTheft(x)) -> StayedInPenitentiary(x))", "all x.((Person(x) & SentencedForThief(x)) -> StayedInPenitence(x))", "all x.((Person(x) & SentForThief(x)) -> StayedInPenitentiary(x))", "all x.((Person(x) & SentForthief(x)) -> StayedInPenitence(x))", "all x.((Person(x) & SentForTheft(x)) -> StayedInPenitenceForSomeTime(x))", "all x.((Person(x) & SentencedForTheft(x)) -> StayedInPenitence(x))", "all x.((Person(x) & SentForThief(x)) -> StayedInPenitenceForSomeTime(x))", "all x.((Person(x) & SentencedForthief(x)) -> StayedInPenitence(x))", "all x.((Person(x) & SentencedForThief(x)) -> StayedInPenitentiary(x))", "all x.((Person(x) & SentForThief(x)) -> StayedInPenitentiaryForSomeTime(x))", "all x.((Person(x) & SentForthief(x)) -> StayedInPenitentiary(x))", "all x.((Person(x) & SentForThyef(x)) -> StayedInPenitence(x))", "all x.((Person(x) & SentencedForThief(x)) -> StayedInPenitenceForSomeTime(x))", "all x.((Person(x) & SentencedForTheft(x)) -> StayedInPenitentiary(x))"]}
{"id": "folio_train_745", "nl": "All people who once stayed in prison for some time have a bad record in the local state. ", "fol": "all x.(StayedInPrison(x) -> HasBadRecord(x))", "prediction": ["all x.((Person(x) & StayedInPenitentiaryForSomeTime(x)) -> BadRecordInLocalState(x))", "all x.((Person(x) & StayedInPenitentiary(x)) -> BadRecordInLocalState(x))", "all x.((Person(x) & StayedInPenitenceForSomeTime(x)) -> BadRecordInLocalState(x))", "all x.((Person(x) & StayedInPenitence(x)) -> BadRecordInLocalState(x))", "all x.((Person(x) & StayedInPenitentiary(x)) -> BadRecord(x))", "all x.((Person(x) & StayedInPenitentiaryForSomeTime(x)) -> BadRecord(x))", "all x.((Person(x) & StayedInPentent(x)) -> BadRecordInLocalState(x))", "all x.((Person(x) & OnceStayedInPenitence(x)) -> BadRecordInLocalState(x))", "all x.((Person(x) & StayedInPenitent(x)) -> BadRecordInLocalState(x))", "all x.((Person(x) & StayedInPencilForSomeTime(x)) -> BadRecordInLocalState(x))", "all x.((Person(x) & StayedInPenthouseForSomeTime(x)) -> BadRecordInLocalState(x))", "all x.((Person(x) & OnceStayedInPenitent(x)) -> BadRecordInLocalState(x))", "all x.((Person(x) & StayedInPenitenceForSomeTime(x)) -> BadRecord(x))", "all x.((Person(x) & StayedInPacilityForSomeTime(x)) -> BadRecordInLocalState(x))", "all x.((Person(x) & StayedInPenitence(x)) -> BadRecord(x))", "all x.((Person(x) & StayedInPentent(x)) -> BadRecord(x))"]}
{"id": "folio_train_746", "nl": "James was either once sentenced for thief or stayed in prison for some time. ", "fol": "((SentencedForTheft(James) & -StayedInPrison(James)) | (-SentencedForTheft(James) & StayedInPrison(James)))", "prediction": ["all x.(James(x) -> (SentencedForThief(x) | StayedInPenitence(x)))", "all x.(James(x) -> (SentencedForTheft(x) | StayedInPenitence(x)))", "all x.(James(x) -> (SentencedForthief(x) | StayedInPenitence(x)))", "all x y.((James(x) & Thief(y)) -> (SentencedFor(x,y) | StayedIn(x,y)))", "all x.(James(x) -> (SentencedForTyef(x) | StayedInPenitence(x)))", "all x.(James(x) -> (SentencedForThief(x) | StayedInPenitenceForSomeTime(x)))", "all x.(James(x) -> ((SentencedForThief(x) | StayedInPenitence(x))))", "all x.(James(x) -> (SentencedForTheft(x) | StayedInPenitenceForSomeTime(x)))", "all x.(James(x) -> ((SentencedForTheft(x) | StayedInPenitence(x))))", "all x.(James(x) -> ((SentencedForthief(x) | StayedInPenitence(x))))", "all x.(James(x) -> (SentencedForThyef(x) | StayedInPenitence(x)))", "all x.(James(x) -> (SentimentedForTheft(x) | StayedInPenitence(x)))", "all x.(James(x) -> (SentimentedForThief(x) | StayedInPenitence(x)))", "all x.((James(x) & SentencedForThief(x)) | StayedInPenitence(x))", "all x.(James(x) -> (SentencedForThief(x) | StayedInPencil(x)))", "all x.((James(x) & SentencedForTheft(x)) | StayedInPenitence(x))"]}
{"id": "folio_train_747", "nl": "James is either with a bad record in the local state or respected by others. ", "fol": "((HasBadRecord(James) & -RespectedByOthers(James)) | (-HasBadRecord(James) & RespectedByOthers(James)))", "prediction": ["all x.(James(x) -> (BadRecord(x) | RespectedByOthers(x)))", "all x.(James(x) -> (BadRecordInLocalState(x) | RespectedByOthers(x)))", "all x y.((James(x) & LocalState(y)) -> (BadRecord(x,y) | RespectedByOthers(x,y)))", "all x.(James(x) -> (BadRecord(x) | RespectedByOthers(x)))", "all x.(James(x) -> ((BadRecord(x) & LocalState(x)) | RespectedByOthers(x))))", "all x.(James(x) -> ((BadRecord(x) & LocalState(x) | RespectedByOthers(x))))", "all x.((James(x) & BadRecord(x)) | RespectedByOthers(x))", "all x.((James(x) & (BadRecord(x) | RespectedByOthers(x))) -> James(x))", "all x.(James(x) -> (BadRecord(x) | Respected(x)))", "all x y.((James(x) & LocalState(y)) -> (BadRecord(x,y) | RespectedByOthers(x)))", "exists x.(James(x) & (BadRecord(x) | RespectedByOthers(x)))", "all x.(James(x) -> ((BadRecord(x) & LocalState(x)) | RespectedByOthers(x)))", "all x.(Jimmy(x) -> (BadRecord(x) | RespectedByOthers(x)))", "all x y.((James(x) & LocalState(y) & BadRecord(x,y)) | RespectedByOthers(x,y))", "all x.(James(x) -> (BadRecord(x,localState) | RespectedByOthers(x)))", "all x.(James(x) -> (BadRecord(x,localState) | RespectedByOthers(x,localState)))"]}
{"id": "folio_train_748", "nl": "James contributes to the country.", "fol": "ContributesToCountry(James)", "prediction": ["all x y.((James(x) & Country(y)) -> ContributesTo(x,y))", "all x.(James(x) -> ContributesToCountry(x))", "all x y z.((James(x) & Country(y) & ContributesTo(x,y)) -> ContributesTo(x,y))", "all x y z.((James(x) & Country(y) & Country(z)) -> ContributesTo(x,y,z))", "all x y z.((James(x) & Country(y) & ContributesTo(x,y)) -> ContributesTo(x,z))", "all x.((James(x) & Country(y)) -> ContributesTo(x,y))", "all x.((James(x) & ContributesTo(x,y)) -> ContributesTo(x,y))", "all x.(James(x) -> ContributesTo(x,y))", "all x.((James(x) & ContributesTo(x,country)) -> ContributesTo(x,country))", "all x y z.((James(x) & Country(y) & ContributesTo(x,z)) -> ContributesTo(x,y))", "all x y z.((James(x) & Country(y) & Country(z)) -> ContributesTo(x,y))", "all x y z.((James(x) & Country(y) & ContributesTo(x,y,z)) -> ContributesTo(x,y))", "all x y.((James(x) & Country(y)) -> Contributes(x,y))", "all x.((James(x) & ContributesToCountry(x)) -> ContributesToCountry(x))", "all x y.((Jimmy(x) & Country(y)) -> ContributesTo(x,y))", "all x y z.((James(x) & Country(y) & ContributesTo(x,y)) -> ContributesTo(x,y,z))"]}
{"id": "folio_train_749", "nl": "James does not contribute to the country.", "fol": "-ContributesToCountry(James)", "prediction": ["all x.(James(x) -> -ContributesToCountry(x))", "all x y.((James(x) & Country(y)) -> -ContributesTo(x,y))", "all x.((James(x) & -ContributesToCountry(x)) -> -ContributesToCountry(x))", "all x.((James(x) & Country(y)) -> -ContributesTo(x,y))", "all x.((James(x) & -ContributesTo(x,y)) -> -ContributesTo(x,y))", "all x.((James(x) & -ContributesTo(x,country)) -> -ContributesTo(x,country))", "all x.((James(x) & Country(x)) -> -ContributesTo(x,y))", "all x.(James(x) -> -ContributesTo(x,y))", "all x.((James(x) & -ContributesTo(x)) -> -ContributesTo(x))", "all x.((James(x) & -ContributesTo(x,Cairn)) -> -ContributesTo(x,Cairn))", "all x y.((James(x) & Country(y)) -> -Contributes(x,y))", "all x.(James(x) -> -ContributesTo(x,country))", "all x.((James(x) & -Contributes(x)) -> -ContributesToCountry(x))", "all x.((James(x) & -ContributesTo(x)) -> -ContributesTo(x,y))", "all x.((James(x) & -ContributesTo(x,y)) -> -ContributesTo(x,z))", "All x.(James(x) -> -ContributesToCountry(x))"]}
{"id": "folio_train_750", "nl": "James contributes to the country, and he once served in the army.", "fol": "(ContributesToCountry(James) & ServedInArmy(James))", "prediction": ["all x y z.((James(x) & Country(y) & Army(z)) -> (ContributesTo(x,y) & ServesIn(x,z)))", "all x y z.((James(x) & Country(y) & Army(z)) -> ContributesTo(x,y))", "all x y.((James(x) & Country(y)) -> (ContributesTo(x,y) & ServedInArmy(x)))", "all x y z.((James(x) & Country(y) & Army(z)) -> (ContributesTo(x,y) & ServedIn(x,z)))", "all x y.((James(x) & Country(y)) -> (ContributesTo(x,y) & ServesInArmy(x,y)))", "all x y.((James(x) & Country(y)) -> (ContributesTo(x,y) & ServesInArmy(x)))", "all x y.((James(x) & Country(y)) -> ContributesTo(x,y))", "all x y.((James(x) & Country(y)) -> (ContributesTo(x,y) & ServedInArmy(x,y)))", "all x y z.((James(x) & Country(y) & Army(z)) -> (ContributesTo(x,y) & ServingIn(x,z)))", "all x y z.((James(x) & Country(y) & Army(z)) -> (ContributesTo(x,y) & ServicedIn(x,z)))", "all x y.((James(x) & Country(y)) -> (ContributesTo(x,y) & ServicedInArmy(x)))", "all x.(James(x) -> (ContributesToCountry(x) & ServedInArmy(x)))", "all x y.((James(x) & Country(y)) -> (ContributesTo(x,y) & ServedIn(x,y)))", "all x.(James(x) -> (ContributesToCountry(x) & servedInArmy(x)))", "all x y.((James(x) & Country(y)) -> (ContributesTo(x,y) & ServicedInArmy(x,y)))", "all x y.((James(x) & Country(y)) -> (ContributesTo(x,y) & ServingInArmy(x)))"]}
{"id": "folio_train_751", "nl": "James did not contribute to the country and did not serve in the army.", "fol": "(-ContributesToCountry(James) & -ServedInArmy(James))", "prediction": ["all x.(James(x) -> (-ContributesToCountry(x) & -ServesInArmy(x)))", "all x y.((James(x) & Country(y)) -> (-ContributesTo(x,y) & -ServesInArmy(x,y)))", "(-ContributesToCountry(James) & -ServesInArmy(James))", "all x.((James(x) & -ContributesToCountry(x) & -ServesInArmy(x)) -> -ContributesToCountry(x))", "all x y z.((James(x) & Country(y) & Army(z)) -> (-ContributesTo(x,y) & -ServesIn(x,z)))", "all x.((James(x) & -ContributesToCountry(x)) -> -ServesInArmy(x))", "all x y.((James(x) & Country(y)) -> (-ContributesTo(x,y) & -ServesInArmy(x)))", "all x.((James(x) & -ContributesToCountry(x) & -ServesInArmy(x)) -> -ContributesToArmy(x))", "all x y.((James(x) & Country(y)) -> (-Contributes(x,y) & -ServesInArmy(x,y)))", "(-ContributesTo(James) & -ServesInArmy(James))", "(-ContributesToCountry(Jimmy) & -ServesInArmy(Jimmy))", "all x y.((James(x) & Country(y)) -> (-ContributesTo(x,y) & -ServicesInArmy(x,y)))", "all x.((James(x) & -ContributesToCountry(x) & -ServesInArmy(x)) -> -CommitsToCountry(x))", "all x.(James(x) -> (-ContributesTo(x,country) & -ServesInArmy(x,army)))", "(-ContributesToCountry(Jim) & -ServesInArmy(Jim))", "all x.((James(x) & -ContributesToCountry(x) & -ServicesInArmy(x)) -> -ContributesToCountry(x))"]}
{"id": "folio_train_752", "nl": "The Croton River watershed is the drainage basin of the Croton River.", "fol": "IsDrainageBasinOf(Crotonriverwatershed,Crotonriver)", "prediction": ["all x y.((Watershed(x) & CrotonRiver(y)) -> DrainageBasin(x,y))", "all x y z.((Watershed(x) & CrotonRiver(y) & CrotonRiver(z)) -> DrainageBasin(x,y,z))", "all x.(Watershed(x) -> (DrainageBasin(x) & CrotonRiver(x)))", "all x y.((Watershed(x) & Croton(y)) -> DrainageBasin(x,y))", "all x y.((Watershed(x) & CrotonRiver(y)) -> DrainageBasinOf(x,y))", "all x y.((Watershed(x) & CrotonRiver(y)) -> DrainageBasinOfRiver(x,y))", "all x y z.((Watershed(x) & CrotonRiver(y) & CrotonRiver(z)) -> DrainageBasin(y,z))", "(DrainageBasin(CrotonRiver) & DrainageBasin(CrotonRiver))", "all x.(Watershed(x) -> DrainageBasin(x))", "all x.(Watershed(x) -> (Watershed(x) & DrainageBasin(x) & CrotonRiver(x)))", "all x y z.((Watershed(x) & CrotonRiver(y) & CrotonRiver(z)) -> DrainageBanque(x,y,z))", "all x y z.((Watershed(x) & CrotonRiver(y) & CrotonRiver(z)) -> DrainageBasinOf(x,y,z))", "all x.((Watershed(x) & CrotonRiver(x)) -> DrainageBasin(x))", "all x y.((Watershed(x) & Croton(y)) -> DrainageBasinOfRiver(x,y))", "all x y z.((Watershed(x) & CrotonRiver(y) & CrotonRiver(z)) -> DrainageBath(x,y,z))", "all x y z.((Watershed(x) & CrotonRiver(y) & DrainageBasin(z)) -> DrainageBasin(x,y,z))"]}
{"id": "folio_train_753", "nl": "The Croton River is in southwestern New York.", "fol": "LocatedIn(Crotonriver,Southwesternnewyork)", "prediction": ["All x.(CrotonRiver(x) -> SouthwesternNewYork(x))", "The Croton River is in southwesternNewYork.", "(SouthwesternNewYork(CrotonRiver) & InSouthwesternNewYork(CrotonRiver))", "all x.(CrotonRiver(x) -> SouthwesternNewYork(x))", "All x.(CrotonRiver(x) -> SouthwesternNewYork(x))", "All x.(CrotonRiver(x) -> InSouthwesternNewYork(x))", "all x.(CrotonRiver(x) -> InSouthwesternNewYork(x))", "All x.(CrotonRiver(x) -> (SouthwesternNewYork(x) & InSouthwesternNewYork(x)))", "(SouthwesternNewYork(CrotonRiver) & In(CrotonRiver,SouthwesternNewYork))", "All x.(CrotonRiver(x) -> InSouthwesternNewYork(x))", "(SouthwesternNewYork(CrotonRiver) & InSouthwesternNewYork(CrotonRiver,NewYork))", "(SouthwesternNewYork) & CrotonRiver(croton)", "(SouthwesternNewYork) & CrotonRiver(River)", "(SouthwesternNewYork(CrotonRiver) & InSouthwesternNewYork(CrotonRiver,SouthwesternNewYork))", "(SouthwesternNewYork(CrotonRiver) & In(CrotonRiver,NewYork))", "All x.(CrotonRiver(x) -> (SouthwesternNewYork(x) | SouthwesternNewYork(y)))"]}
{"id": "folio_train_754", "nl": "Water from the Croton River watershed flows to the Bronx.", "fol": "exists x.(Water(x) & SourceOf(x,Crotonriverwatershed) & FlowsToLocation(x,Bronx))", "prediction": ["all x y z.((Water(x) & CrotonRiverWatershed(y) & Bronx(z)) -> FlowsTo(x,y,z))", "all x y.((Water(x) & CrotonRiverWatershed(y)) -> FlowsToBronx(x,y))", "all x.((Water(x) & CrotonRiverWatershed(x)) -> FlowsToBronx(x))", "all x y.((Water(x) & CrotonRiverWatershed(y)) -> FlowsToBronx(x))", "all x y z.((Water(x) & CrotonRiver(y) & Bronx(z)) -> FlowsTo(x,y,z))", "all x.((Water(x) & Watershed(x) & CrotonRiver(x)) -> FlowsToBronx(x))", "all x y.((Water(x) & CrotonRiverWatershed(y) & Bronx(y)) -> FlowsTo(x,y))", "all x y.((Water(x) & CrotonWatershed(y)) -> FlowsToBronx(x,y))", "all x y.((Water(x) & CrotonRiver(y)) -> FlowsToBronx(x,y))", "all x y.((Water(x) & Watershed(y) & CrotonRiver(y)) -> FlowsToBronx(x,y))", "all x y.((Water(x) & CrotonRiverWatershed(y) & Bronx(z)) -> FlowsTo(x,y,z))", "all x y z.((Water(x) & CrotonRiverWatershed(y) & Bronx(z) & From(x,y)) -> FlowsTo(x,z))", "all x y.((Water(x) & Watershed(y) & Croton(y)) -> FlowsToBronx(x,y))", "all x y z.((Water(x) & CrotonRiverWatershed(y) & Bronx(z)) -> FlowsTo(x,y))", "all x.((Water(x) & CrotonWatershed(x)) -> FlowsToBronx(x))", "all x y z.((Water(x) & CrotonRiverWatershed(y) & Bronx(z) & WaterFrom(x,y)) -> FlowsTo(x,z))"]}
{"id": "folio_train_755", "nl": "The Bronx is in New York.", "fol": "LocatedIn(Bronx,Newyork)", "prediction": ["All x.(Bronx(x) -> NewYork(x))", "all x.(Bronx(x) -> NewYork(x))", "The Bronx is in NewYork.", "All x y.((Bronx(x) & NewYork(y)) -> In(x,y))", "all x y.((Bronx(x) & NewYork(y)) -> In(x,y))", "All x.(Bronx(x) -> InNewYork(x))", "all x y.((Bronx(x) & NewYork(y)) -> IsIn(x,y))", "All x y.((Bronx(x) & NewYork(y)) -> IsIn(x,y))", "All x y.((Bronx(x) & NewYork(y)) -> LocatedIn(x,y))", "all x y.((Bronx(x) & NewYork(y)) -> LocatedIn(x,y))", "all x.(Bronx(x) -> InNewYork(x))", "(NewYork(Bronx) & NewYork(Bronx))", "All x y.((Bronx(x) & NewYork(y)) -> LivesIn(x,y))", "all x y.((Bronx(x) & NewYork(y)) -> LivesIn(x,y))", "All x.(Bronx(x) -> NewYork(y))", "All x y.((Bronx(x) & NewYork(y)) -> NewYork(x))"]}
{"id": "folio_train_756", "nl": "Water from the Croton River watershed flows to somewhere in New York.", "fol": "exists x y.(Water(x) & SourceOf(x,Crotonriverwatershed) & FlowsToLocation(x,y) & LocatedIn(y,Newyork))", "prediction": ["all x y z.((Water(x) & CrotonRiverWatershed(y) & NewYork(z)) -> FlowsTo(x,y,z))", "all x y.((Water(x) & CrotonRiverWatershed(y)) -> FlowsTo(x,y))", "all x.((Water(x) & CrotonRiverWatershed(x)) -> FlowsToNewYork(x))", "all x y.((Water(x) & CrotonRiverWatershed(y)) -> FlowsToNewYork(x,y))", "all x y.((Water(x) & CrotonRiverWatershed(y) & NewYork(y)) -> FlowsTo(x,y))", "all x.((Water(x) & Watershed(x) & CrotonRiver(x)) -> FlowsToNewYork(x))", "all x y.((Water(x) & CrotonRiverWatershed(y)) -> FlowsToNewYork(x))", "all x.((Water(x) & CrotonRiverWatershed(x)) -> FlowsToSomewhereInNewYork(x))", "all x.((Water(x) & CrotonRiverWatershed(x)) -> FlowsTo(x,NewYork))", "all x y.((Water(x) & CrotonRiverWatershed(y)) -> FlowsTo(x,NewYork))", "all x y z.((Water(x) & CrotonRiver(y) & Watershed(z)) -> FlowsTo(x,y,z))", "all x y.((Water(x) & Watershed(y) & CrotonRiver(y)) -> FlowsTo(x,y))", "all x y z.((Water(x) & CrotonRiverWatershed(y) & Water(z)) -> FlowsTo(x,y,z))", "all x y.((Water(x) & Watershed(y) & CrotonRiver(x)) -> FlowsTo(x,y))", "all x y.((Water(x) & Watershed(y) & Croton(y)) -> FlowsTo(x,y))", "all x y z.((Water(x) & CrotonRiverWatershed(y) & NewYork(z)) -> FlowsTo(x,z))"]}
{"id": "folio_train_757", "nl": "The Croton River watershed is in the Bronx.", "fol": "LocatedIn(Crotonriverwatershed,Bronx)", "prediction": ["all x.((Watershed(x) & CrotonRiver(x)) -> InBronx(x))", "all x y.((Watershed(x) & CrotonRiver(y)) -> InBronx(y))", "all x y.((Watershed(x) & Croton(y)) -> InBronx(y))", "all x.(Watershed(x) -> (InBronx(x) & CrotonRiver(x)))", "all x.(CrotonRiverWatershed(x) -> InBronx(x))", "all x y.((Watershed(x) & CrotonRiver(y)) -> InBronx(x))", "all x.(CrotonRiverWatershed(x) -> InBronx(x))", "all x.((Watershed(x) & Croton(x)) -> InBronx(x))", "all x y.((Watershed(x) & CrotonRiver(y)) -> InBronx(x,y))", "(Watershed(CrotonRiver) & InBronx(CrotonRiver))", "all x.(Watershed(x) -> InBronx(x))", "all x.(CroconRiverWatershed(x) -> InBronx(x))", "all x.(Watershed(x) -> (CrotonRiver(x) & InBronx(x)))", "all x.((Watershed(x) & CrotonRiver(x)) -> Bronx(x))", "all x.(Watershed(x) -> (CroconRiver(x) & InBronx(x)))", "(Watershed(CroconRiver) & InBronx(CroconRiver))"]}
{"id": "folio_train_758", "nl": "Water from the Croton River flows to the Bronx.", "fol": "exists x.(Water(x) & SourceOf(x,Crotonriver) & FlowsToLocation(x,Bronx))", "prediction": ["all x y z.((Water(x) & CrotonRiver(y) & Bronx(z)) -> FlowsTo(x,y,z))", "all x y.((Water(x) & CrotonRiver(y)) -> FlowsToBronx(x,y))", "all x.((Water(x) & CrotonRiver(x)) -> FlowsToBronx(x))", "all x y.((Water(x) & CrotonRiver(y)) -> FlowsToBronx(x))", "all x y.((Water(x) & CrotonRiver(y) & Bronx(y)) -> FlowsTo(x,y))", "all x y z.((Water(x) & CrotonRiver(y) & Bronx(z) & From(x,y)) -> FlowsTo(x,z))", "all x y.((Water(x) & CrotonRiver(y) & Bronx(z)) -> FlowsTo(x,y,z))", "all x y.((Water(x) & CrotonRiver(x) & Bronx(y)) -> FlowsTo(x,y))", "all x y z.((Water(x) & Croton(y) & Bronx(z)) -> FlowsTo(x,y,z))", "all x y.((Water(x) & Croton(y)) -> FlowsToBronx(x,y))", "all x y z w.((Water(x) & CrotonRiver(y) & Bronx(z) & CrotonRiver(w)) -> FlowsTo(x,y,z,w))", "all x y z.((Water(x) & CrotonRiver(y) & Bronx(z)) -> FlowsTo(x,y))", "all x y.((Water(x) & CrotonRiver(y)) -> FlowsToBronx(y))", "all x y z w.((Water(x) & CrotonRiver(y) & Bronx(z) & CrotonRiver(w)) -> FlowsTo(x,y,z))", "all x y.((Water(x) & CrotonRiver(y) & Bronx(x)) -> FlowsTo(x,y))", "all x y z.((Water(x) & CrotonRiver(y) & Bronx(z)) -> FliesTo(x,y,z))"]}
{"id": "folio_train_759", "nl": "All nuclear-powered submarines are warships.", "fol": "all x.(IsNuclearPoweredSubmarine(x) -> IsWarship(x))", "prediction": ["all x.(NuclearPoweredSubmarine(x) -> Warship(x))", "all x.((Submarine(x) & NuclearPowered(x)) -> Warship(x))", "all x.(NuclearPoweredSubmarine(x) -> Warship(x))", "all x.(NaturalPoweredSubmarine(x) -> Warship(x))", "all x.(NatalPoweredSubmarine(x) -> Warship(x))", "all x.((NuclearPoweredSubmarine(x) & Warship(x)) -> Submarine(x))", "all x.((NuclearPoweredSubmarine(x) & Warship(x)) -> Underwater(x))", "all x.((NuclearPoweredSubmarine(x) & Warship(x)) -> Ship(x))", "all x.((NuclearPoweredSubmarine(x) & Warship(x)) -> Warship(x))", "all x.(NatronicPoweredSubmarine(x) -> Warship(x))", "all x.((NuclearPoweredSubmarine(x) & Warship(x)) -> NuclearPoweredSubmarine(x))", "all x.((NuclearPoweredSubmarine(x) & Warship(x)) -> Operates(x))", "all x.((NuclearPoweredSubmarine(x) & Warship(x)) -> Submarine(x))", "all x.(Submarine(x) -> Warship(x))", "all x.((NuclearPoweredSubmarine(x) & Warship(x)) -> NuclearPowered(x))", "all x.((NuclearPoweredSubmarine(x) & Warship(x)) -> NavalPoweredSubmarine(x))"]}
{"id": "folio_train_760", "nl": "No nuclear-powered submarines are commercial vessels.", "fol": "all x.(IsNuclearPoweredSubmarine(x) -> -IsCommercialVessel(x))", "prediction": ["-exists x.(NuclearPoweredSubmarine(x) & CommercialVessel(x))", "-exists x.(NatalPoweredSubmarine(x) & CommercialVessel(x))", "-exists x.(Submarine(x) & NuclearPowered(x) & CommercialVessel(x))", "all x.((NuclearPoweredSubmarine(x) & -CommercialVessel(x)) -> -Submarine(x))", "-exists x.(NuclearPoweredSubmarine(x) & CommercialVessel(x))", "-exists x.(NaturellPoweredSubmarine(x) & CommercialVessel(x))", "all x.((NuclearPoweredSubmarine(x) & -CommercialVessel(x)) -> -(Submarine(x) & CommercialVessel(x)))", "all x.(NuclearPoweredSubmarine(x) -> -CommercialVessel(x))", "-exists x.(Submarine(x) & NuclearPowered(x))", "-all x.(NuclearPoweredSubmarine(x) -> CommercialVessel(x))", "-(NuclearPoweredSubmarine(x) & CommercialVessel(x))", "-exists x.(NaturalPoweredSubmarine(x) & CommercialVessel(x))", "(-exists x.(NuclearPoweredSubmarine(x) & CommercialVessel(x)))", "-exists x.(Submarine(x) & NuclearPowered(x) & Commercial(x))", "-exists x.((NuclearPoweredSubmarine(x) & CommercialVessel(x))", "all x.(NuclearPoweredSubmarine(x) -> CommercialVessel(x))"]}
{"id": "folio_train_761", "nl": "Some warships are commercial vessels.", "fol": "exists x.(IsWarship(x) & IsCommercialVessel(x))", "prediction": ["exists x.(Warship(x) & CommercialVessel(x))", "exists x.(Warship(x) & Commercial(x))", "exists x y.(Warship(x) & CommercialVessel(y))", "exists x.(Warship(x) & CommercialVessel(x))", "exists x.(Warship(x) & CommercialVehicle(x))", "exists x y.(Warship(x) & CommercialVessel(y) & Warship(x))", "exists x y.(Warship(x) & CommercialVessel(y) & BuiltBy(x,y))", "exists x y.(Warship(x) & CommercialVessel(y) & Operates(x,y))", "(exists x.(Warship(x) & CommercialVessel(x)))", "exists x y.(Warship(x) & CommercialVessel(y) & DesignedFor(x,y))", "exists x y.(Warship(x) & CommercialVessel(y) & LocatedIn(x,y))", "exists x y.(Warship(x) & Commercial(y))", "exists x y.(Warship(x) & CommercialVessel(y) & Ship(x))", "all x.(Warship(x) -> CommercialVessel(x))", "exists x.(Warship(x) & CommercialVegetation(x))", "exists x.(Warship(x) & CommercialYacht(x))"]}
{"id": "folio_train_762", "nl": "If a album is written by a rock band, then the genre of the album is rock.", "fol": "all z.((WrittenByBand(x,y) & IsRockBand(y,z)) -> Genre(x,Rock))", "prediction": ["all x.((Album(x) & WrittenByRockBand(x)) -> RockGenre(x))", "all x y.((Album(x) & RockBand(y) & WrittenBy(x,y)) -> RockGenre(x))", "all x y.((Album(x) & RockBand(y) & WrittenBy(x,y)) -> Rock(x))", "all x.((Album(x) & WrittenByRockBand(x)) -> Rock(x))", "all x y.((Album(x) & WrittenByRockBand(x)) -> RockGenre(y))", "all x y z.((Album(x) & RockBand(y) & WrittenBy(x,y)) -> RockGenre(x))", "all x y.((Album(x) & WrittenByRockBand(x)) -> RockGenre(x))", "all x y.((Album(x) & WrittenByRockBand(x) & Rock(y)) -> GenreOfAlbum(x,y))", "all x y z.((Album(x) & RockBand(y) & WrittenBy(x,y) & Rock(z)) -> RockGenre(x))", "all x y z.((Album(x) & RockBand(y) & WrittenBy(x,y) & RockBand(z)) -> RockGenre(x))", "all x y z.((Album(x) & RockBand(y) & WrittenBy(x,y) & Rock(z)) -> RockGenre(x,z))", "all x y.((Album(x) & WrittenByRockBand(x) & Rock(y)) -> Genre(x,y))", "all x y.((Album(x) & WrittenByRockBand(x)) -> Rock(y))", "all x y z.((Album(x) & RockBand(y) & WrittenBy(x,y)) -> RockGenre(z))", "all x y.((Album(x) & WrittenByRockBand(x,y)) -> RockGenre(x))", "all x y.((Album(x) & RockBand(y) & WrittenBy(x,y)) -> RockGenre(x,y))"]}
{"id": "folio_train_763", "nl": "If a band writes a album winning an award, then this band wins this award.", "fol": "all z.((WrittenByBand(x,y) & AwardedAlbum(x,z)) -> BandWinsAward(y,z))", "prediction": ["all x y.((Band(x) & Album(y) & Writes(x,y)) -> WinsAward(x,y))", "all x.((Band(x) & WritesAlbum(x) & WinsAward(x)) -> WinsAward(x))", "all x y z.((Band(x) & Album(y) & Award(z) & Writes(x,y) & Wins(x,z)) -> Wins(x,y,z))", "all x.((Band(x) & WritesAlbumWinningAward(x)) -> WinsAward(x))", "all x y z.((Band(x) & Album(y) & Award(z) & Writes(x,y)) -> Wins(x,z))", "all x y.((Band(x) & Album(y) & Writes(x,y) & WinsAward(x,y)) -> WinsAward(x,y))", "all x y.((Band(x) & Album(y) & Writes(x,y) & WinsAward(x)) -> WinsAward(x,y))", "all x y.((Band(x) & Album(y) & Writes(x,y) & WinsAward(y)) -> WinsAward(x,y))", "all x y.((Band(x) & Album(y) & Writes(x,y)) -> WinsAward(x))", "all x y z.((Band(x) & Album(y) & Award(z) & Writes(x,y) & Wins(y,z)) -> Wins(x,y,z))", "all x y z.((Band(x) & Album(y) & Award(z) & Writes(x,y)) -> Wins(x,y,z))", "all x y.((Band(x) & Album(y) & Writes(x,y)) -> Wins(x,y))", "all x y z.((Band(x) & Album(y) & Award(z) & Writes(x,y,z)) -> Wins(x,y,z))", "all x y.((Band(x) & Album(y) & Writes(x,y) & WinsAward(x)) -> WinsAward(y))", "all x y z.((Band(x) & Album(y) & Award(z) & Writes(x,y) & Wins(x,y,z)) -> Wins(x,y,z))", "all x y.((Band(x) & Album(y) & Writes(x,y) & WinsAward(x)) -> WinsAward(x))"]}
{"id": "folio_train_764", "nl": "Trouble at the Henhouse is an album by The Tragically Hip.", "fol": "WrittenByBand(Trouble_at_the_Henhouse,The_Tragically_Hip)", "prediction": ["All x y.((TroubleAtHenhouse(x) & Album(y)) -> TragicallyHip(x))", "All x.(TroubleAtHenhouse(x) -> Album(x))", "All x y.((TroubleAtHenhouse(x) & TragicallyHip(y)) -> Album(x,y))", "All x.(TroubleAtHenhouse(x) -> (Album(x) & TragicallyHip(x)))", "All x y.((TroubleAtHenhouse(x) & Album(y)) -> TragicallyHip(y))", "All x.(TroubleAtHenhouse(x) -> AlbumByTheThroaticallyHip(x))", "All x.(TroubleAtHenhouse(x) -> AlbumByTheThrobbinglyHip(x))", "All x.(TroubleAtHenhouse(x) -> AlbumByTragedicallyHip(x))", "(Album(TroubleAtHenhouse) & TheThroaticallyHip(TroubleAtHenhouse))", "The TragicallyHip(TroubleAtHenhouse)", "(Album(TroubleAtHenhouse) & TragicallyHip(TroubleAtHenhouse))", "All x y.((TroubleAtHenhouse(x) & TragicallyHip(y)) -> Album(x))", "All x y.((TroubleAtHenhouse(x) & Album(y)) -> TragicallyHip(x,y))", "All x.(TroubleAtHenhouse(x) -> AlbumByTheTragedicallyHip(x))", "All x.(TroubleAtHenhouse(x) -> AlbumByTheThrullyHip(x))", "TroubleAtHenhouse(album) -> TragicallyHip(album))"]}
{"id": "folio_train_765", "nl": "The Tragically Hip is a Canadian rock band.", "fol": "IsRockBand(The_Tragically_Hip,Canada)", "prediction": ["The TragicallyHip is a CanadianRockBand.", "All x.((RockBand(x) & TragicallyHip(x)) -> Canadian(x))", "all x.((RockBand(x) & TragicallyHip(x)) -> Canadian(x))", "All x.((RockBand(x) & TragicallyHip(x)) -> Canadian(x))", "All x.((RockBand(x) & Canadian(x)) -> TragicallyHip(x))", "all x.((RockBand(x) & TragicallyHip(x)) -> Canadian(x))", "all x.((RockBand(x) & Canadian(x)) -> TragicallyHip(x))", "The TragicallyHip is a CanadianRockBand(x)", "The TragicallyHip(x) -> CanadianRockBand(x))", "All x.(TragedicallyHip(x) -> CanadianRockBand(x))", "All x.((RockBand(x) & TragicallyHip(x)) -> CanadianRockBand(x))", "all x.((RockBand(x) & TragicallyHip(x)) -> CanadianRockBand(x))", "The TragicallyHip is a CanadianRockBand(x) & FoundedInCanadianRock(x))", "All x.((RockBand(x) & TragicallyHip(x)) -> CanCanadian(x))", "The TragicallyHip (CanadianRockBand(x))", "TragicallyHip(x) -> CanadianRockBand(x))"]}
{"id": "folio_train_766", "nl": "The song \"Butts Wigglin'\" is in Trouble at the Henhouse.", "fol": "ContainsSongInAlbum(Butts_Wigglin,Trouble_at_the_Henhouse)", "prediction": ["All x.((Song(x) & ButtsWigglin'(x)) -> TroubleAtHenhouse(x))", "All x.((Song(x) & ButtsWigglin(x)) -> TroubleAtHenhouse(x))", "All x.((Song(x) & ButtsWigglin') -> TroubleAtHenhouse(x))", "all x.((Song(x) & ButtsWigglin'(x)) -> TroubleAtHenhouse(x))", "All x y.((Song(x) & ButtsWigglin'(x)) -> TroubleAtHenhouse(y))", "All x.((Song(x) & ButtsWigglin'(x)) -> TroubleAtHenhouse(x))", "All x.((Song(x) & ButtsWigglin'(x)) -> InTroubleAtHenhouse(x))", "\"ButtsWigglin'\" (Song(x) & TroubleAtHenhouse(x))", "All x y.((Song(x) & ButtsWigglin'(x) & Henhouse(y)) -> TroubleAt(x,y))", "(Song(ButtsWigglin') & TroubleAtHenhouse(ButtsWigglin')", "The song \"ButtsWigglin'\" is in TroubleAtHenhouse.", "All x.((Song(x) & ButtsWigglin'(x)) -> TroubleAtTheHenhouse(x))", "All x y.((Song(x) & ButtsWigglin(x)) -> TroubleAtHenhouse(y))", "All x y.((Song(x) & ButtsWigglin'(x) & Henhouse(y)) -> InTroubleAt(x,y))", "(Song(ButtsWigglin') & InTroubleAtHenhouse(ButtsWigglin')", "All x.((Song(x) & ButtsWigglin'\" & TroubleAtHenhouse(x)) -> InTroubleAtHenhouse(x))"]}
{"id": "folio_train_767", "nl": "Trouble at the Henhouse won the Album of the Year award.", "fol": "AwardedAlbum(Trouble_at_the_Henhouse,The_Album_of_the_Year)", "prediction": ["All x.((TroubleAtHenhouse(x) & AlbumOfTheYear(x)) -> Won(x))", "All x y.((TroubleAtHenhouse(x) & AlbumOfTheYear(y)) -> Won(x,y))", "All x.((TroubleAtHenhouse(x) & AlbumOfTheYear(x)) -> Wins(x))", "All x.(TroubleAtHenhouse(x) -> AlbumOfTheYear(x))", "All x.((TroubleAtHenhouse(x) & AlbumOfYear(x)) -> Won(x))", "All x y.((TroubleAtHenhouse(x) & AlbumOfTheYear(y)) -> Wins(x,y))", "All x y.((TroubleAtHenhouse(x) & AlbumOfYear(y)) -> Won(x,y))", "all x.((TroubleAtHenhouse(x) & AlbumOfTheYear(x)) -> Won(x))", "All x.((TroubleAtHenhouse(x) & AlbumOfTheYear(x)) -> Wins(x,y))", "All x.((TroubleAtHenhouse(x) & AlbumOfYear(x)) -> Wins(x))", "All x.((TroubleAtHenhouse(x) & AlbumOfTheYear(x)) -> Winner(x))", "(Winner(TroubleAtHenhouse) & AlbumOfTheYear(TroubleAtHenhouse))", "All x.((TroubleAtHenhouse(x) & AlbumOfTheYear(x)) -> WinsAward(x))", "all x.((TroubleAtHenhouse(x) & AlbumOfTheYear(x)) -> Wins(x))", "All x.((TroubleAtHenhouse(x) & AlbumOfTheYear(x)) -> WonAward(x))", "All x.((TroubleAtHenhouse(x) & AlbumOfTheYear(x)) -> Won(x,y))"]}
{"id": "folio_train_768", "nl": "A song in Trouble at the Henhouse appeared in a film.", "fol": "exists x.(SongAppearsInFilm(x) & ContainsSongInAlbum(x,Trouble_at_the_Henhouse))", "prediction": ["all x y.((Song(x) & TroubleAtHenhouse(y)) -> AppearsInFilm(x,y))", "all x y z.((Song(x) & TroubleAtHenhouse(y) & Film(z)) -> AppearsIn(x,y,z))", "all x.((Song(x) & TroubleAtHenhouse(x)) -> AppearsInFilm(x))", "all x y.((Song(x) & TroubleAtHenhouse(y)) -> appearedInFilm(x,y))", "all x y.((Song(x) & TroubleAtHenhouse(y)) -> AppearsInFilm(x,y))", "all x y z.((Song(x) & TroubleAtHenhouse(y) & Film(z)) -> AppearsIn(x,y,z))", "all x.((Song(x) & TroubleAtHenhouse(x)) -> appearedInFilm(x))", "all x.((Song(x) & TroubleAtHenhouse(x)) -> AppearsInFilm(x))", "all x y z.((Song(x) & TroubleAtHenhouse(y) & Film(z)) -> appearedIn(x,y,z))", "all x y.((Song(x) & TroubleAtHenhouse(x) & Film(y)) -> AppearsIn(x,y))", "all x y z.((Song(x) & TroubleAtHenhouse(y) & Film(z)) -> ApparatesIn(x,y,z))", "all x y.((Song(x) & TroubleAtHenhouse(y)) -> ApparatesInFilm(x,y))", "all x y.((Song(x) & TroubleAtHenhouse(x) & Film(y)) -> AppearsIn(x,y))", "all x y.((Song(x) & TroubleAtHenhouse(x)) -> AppearsInFilm(y))", "all x y.((Song(x) & TroubleAtHenhouse(x)) -> AppearsInFilm(x,y))", "all x y z.((Song(x) & TroubleAtHenhouse(y) & Film(z)) -> ApparedIn(x,y,z))"]}
{"id": "folio_train_769", "nl": "The genre of Trouble at the Henhouse is rock.", "fol": "Genre(Trouble_at_the_Henhouse,Rock)", "prediction": ["all x.(TroubleAtHenhouse(x) -> Rock(x))", "All x.(TroubleAtHenhouse(x) -> Rock(x))", "all x y.((TroubleAtHenhouse(x) & Genre(y)) -> Rock(x))", "all x y.((TroubleAtHenhouse(x) & Henhouse(y)) -> Rock(x))", "all x.(TroubleAtTheHenhouse(x) -> Rock(x))", "all x y.((Trouble(x) & Henhouse(y)) -> Rock(x))", "all x.((TroubleAtHenhouse(x) & Rock(x)) -> Rock(x))", "all x.((TroubleAtHenhouse(x) & Rock(x)) -> TroubleAtHenhouse(x))", "(Rock(TroubleAtHenhouse) & Genre(TroubleAtHenhouse))", "All x y.((TroubleAtHenhouse(x) & Genre(y)) -> Rock(x))", "all x.(TroubleAtHenhouse(x) -> Rock(x))", "all x.((TroubleAtHenhouse(x) & Rock(x)) -> Genre(x))", "All x.(TroubleAtTheHenhouse(x) -> Rock(x))", "All x.((TroubleAtHenhouse(x) & Rock(x)) -> Rock(x))", "all x.(TroubleAtHenhouse(x) -> Rock(x))", "all x.((TroubleAtHenhouse(x) & Rock(x)) ->."]}
{"id": "folio_train_770", "nl": "A canada rock band didn't win the Album of the Year award.", "fol": "exists x y.(IsRockBand(x,Canada) & WrittenByBand(x,y) & -AwardedAlbum(y,The_Album_of_the_Year))", "prediction": ["all x.(CanadianRockBand(x) -> -WinsAlbumOfYear(x))", "all x.(CanadianRockBand(x) -> -WinsAlbumOfTheYear(x))", "all x.((CanadianRockBand(x) & -WinsAlbumOfYear(x)) -> -WinsAlbumOfYear(x))", "all x.(CanadianRockBand(x) -> -WonAlbumOfTheYear(x))", "all x.((CanadianRockBand(x) & -WinsAlbumOfTheYear(x)) -> -WinsAlbumOfTheYear(x))", "all x.(CanadianRockBand(x) -> -WonAlbumOfYear(x))", "all x.((CanadianRockBand(x) & -WinsAlbumOfYear(x)) -> -CanadianRockBand(x))", "all x y.((CanadianRockBand(x) & AlbumOfTheYear(y)) -> -Wins(x,y))", "all x y.((CanadianRockBand(x) & AlbumOfTheYear(y)) -> -WinsAward(x,y))", "all x.((CanadianRockBand(x) & -WonAlbumOfYear(x)) -> -WonAlbumOfYear(x))", "all x.((CanadianRockBand(x) & -WonAlbumOfTheYear(x)) -> -WonAlbumOfTheYear(x))", "all x y.((CanadianRockBand(x) & AlbumOfTheYear(y)) -> -Won(x,y))", "all x.((CanadianRockBand(x) & -WinsAward(x)) -> AlbumOfTheYear(x))", "all x y.((CanadianRockBand(x) & AlbumOfTheYear(y)) -> -WonAward(x,y))", "all x.((CanadianRockBand(x) & -WinsAlbumOfTheYear(x)) -> -CanadianRockBand(x))", "all x.((CanadianRockBand(x) & -WonAlbumOfYear(x)) -> -WinsAlbumOfYear(x))"]}
{"id": "folio_train_771", "nl": "\"Butts Wigglin'\" appeared in a film.", "fol": "SongAppearsInFilm(Butts_Wigglin)", "prediction": ["\"ButtsWigglin'\" appeared in a film.", "all x y.((ButtsWigglin(x) & Film(y)) -> AppearsIn(x,y))", "all x y.((ButtsWigglin(x) & Film(y)) -> appearedIn(x,y))", "all x y.((ButtsWigglin(x) & Film(y)) -> AppearsIn(x,y))", "all x y z.((ButtsWigglin(x) & Film(y) & Film(z)) -> appearedIn(x,y,z))", "all x y z.((ButtsWigglin(x) & Film(y) & Film(z)) -> AppearsIn(x,y,z))", "all x.(ButtsWigglin(x) -> appearedInFilm(x))", "all x.((ButtsWigglin(x) & Film(x)) -> AppearsIn(x,y))", "all x y z.((ButtsWigglin(x) & Film(y) & Film(z)) -> AppearsIn(x,y,z))", "all x.(ButtsWigglin'(x) -> appearedInFilm(x))", "all x y.((ButtsWigglin(x) & Film(y)) -> ApparatesIn(x,y))", "all x.((ButtsWigglin(x) & Film(x)) -> appearedIn(x,y))", "all x.((ButtsWigglin(x) & Film(x)) -> AppearsIn(x,y))", "all x y.((ButtsWigglin'(x) & Film(y)) -> AppearsIn(x,y))", "all x y.((ButtsWigglin'(x) & Film(y)) -> appearedIn(x,y))", "all x y z.((ButtsWigglin(x) & Film(y) & Film(z)) -> ApparatesIn(x,y,z))"]}
{"id": "folio_train_772", "nl": "Daniel is a software engineer and he works at Palantir Technologies.", "fol": "(IsSoftwareEngineer(Daniel) & WorksAtCompany(Daniel,PalantirTechnologies))", "prediction": ["(SoftwareEngineer(Daniel) & WorksAtPalantirTechnology(Daniel))", "(SoftwareEngineer(Daniel) & WorksAtPalantirTechnologies(Daniel))", "(SoftwareEngineer(Daniel) & PalantirTechnology(Daniel))", "all x y.((SoftwareEngineer(x) & PalantirTechnology(y)) -> WorksAt(x,y))", "(SoftwareEngineer(Daniel) & PalantirTechnologies(Daniel))", "(SoftwareEngineer(Daniel) & WorksAtPalantir Technologies(Daniel))", "(SoftwareEngineer(Daniel) & WorkedAtPalantirTechnology(Daniel))", "(SoftwareEngineer(Daniel) & worksAtPalantirTechnology(Daniel))", "(SoftwareEngineer(Daniel) & worksAtPalantirTechnologies(Daniel))", "(SoftwareEngineer(Daniel) & exists y.(PalantirTechnology(y) & WorksAt(Daniel,y))))", "(SoftwareEngineer(Daniel) & WorkedAtPalantirTechnologies(Daniel))", "(SoftwareEngineer(Daniel) & WorksAtPalantirTechnics(Daniel))", "(SoftwareEngineer(Daniel) & WorkesAtPalantirTechnology(Daniel))", "(SoftwareEngineer(Daniel) & exists y.(PalantirTechnology(y) & WorksAt(Daniel))))", "(SoftwareEngineer(Dan) & WorksAtPalantirTechnology(Dan))", "(SoftwareEngineer(Daniel) & Palantir Technologies(Daniel))"]}
{"id": "folio_train_773", "nl": "Daniel studied bioengineering during his undergraduate at Rice University.", "fol": "StudiedBioengineeringAt(Daniel,RiceUniversity)", "prediction": ["(Student(Daniel) & Undergraduate(Daniel) & RiceUniversity(Daniel))", "all x.((Daniel(x) & Undergraduate(x) & RiceUniversity(x)) -> StudiesBioengineering(x))", "all x y.((Daniel(x) & RiceUniversity(y)) -> (StudiesBioengineering(x,y) & Undergraduate(x,y)))", "all x y.((Daniel(x) & RiceUniversity(y)) -> StudiedBioengineering(x,y))", "all x y.((Daniel(x) & RiceUniversity(y)) -> StudiesBioengineering(x,y))", "all x.((Daniel(x) & RiceUndergraduate(x)) -> StudiesBioengineering(x))", "all x.((Daniel(x) & Undergraduate(x) & RiceUniversity(x)) -> StudiedBioengineering(x))", "all x.((Daniel(x) & Undergraduate(x)) -> Bioengineering(x))", "all x.((Daniel(x) & RiceUniversity(x)) -> StudiesBioengineering(x))", "all x y.((Daniel(x) & RiceUniversity(y)) -> (StudiesBioengineering(x) & Undergraduate(x,y)))", "(Student(Daniel,Bioengineering) & RiceUniversity(Daniel,Undergraduate))", "(Student(Daniel,Bioengineering) & Undergraduate(Daniel,Rice))", "all x y.((Daniel(x) & RiceUniversity(y)) -> (StudiesBioengineering(x,y) | Undergraduate(x,y)))", "(Student(Daniel) & Bioengineering(Daniel) & Undergraduate(Daniel) & RiceUniversity(Daniel))", "(Study(Daniel,Bioengineering) & RiceUniversity(Daniel,Undergraduate))", "(StudiesBioengineering(Daniel) & UndergraduateAtRiceUniversity(Daniel))"]}
{"id": "folio_train_774", "nl": "Daniel\u2019s older sister works at Meta as a technical sourcer. ", "fol": "(WorksAtMeta(DanielsOlderSister) & IsTechnicalSourcer(DanielsOlderSister))", "prediction": ["(OlderSister(Daniel) & WorksAtMeta(Daniel) & TechnicalSourcer(Daniel))", "all x y.((OlderSister(x) & Daniel(y)) -> WorksAtMeta(x,y))", "all x y z.((OlderSister(x) & Daniel(y) & Meta(z)) -> WorksAsTechnicalSourcer(x,y,z))", "all x y.((OlderSister(x) & Daniel(y)) -> WorksAtMetaAsTechnicalSourcer(x,y))", "all x.((OlderSister(x) & WorksAtMeta(x)) -> TechnicalSourcer(x))", "all x y.((OlderSister(x) & Daniel(y) & WorksAtMeta(x,y)) -> TechnicalSourcer(x))", "all x y.((OlderSister(x) & Meta(y)) -> WorksAsTechnicalSourcer(x,y))", "(OlderSister(Daniel) & TechnicalSourcer(Daniel))", "all x y z.((OlderSister(x) & Daniel(y) & Meta(z)) -> WorksAt(x,y,z))", "all x y z.((OlderSister(x) & Daniel(y) & Meta(z)) -> WorksAsTechnicalSourcer(x,z))", "all x.((OlderSister(x) & DanielsOlderSister(x)) -> WorksAtMetaAsTechnicalSourcer(x))", "all x y.((OlderSister(x) & Meta(y)) -> WorksAt(x,y))", "all x y.((OlderSister(x) & Daniel(y) & WorksAtMeta(x,y)) -> TechnicalSourcer(y))", "all x.((OlderSister(x) & Daniel(x)) -> WorksAtMetaAsTechnicalSourcer(x))", "(OlderSister(Daniel,Meta) & TechnicalSourcer(Daniel,Meta))", "(OlderSister(Daniel) & WorksAtMetaAsTechnicalSourcer(Daniel))"]}
{"id": "folio_train_775", "nl": "Daniel\u2019s dad and older sister both graduated from Stanford University.", "fol": "(GraduatedFromStanford(DanielsOlderSister) & GraduatedFromStanford(DanielsDad))", "prediction": ["(Dad(Daniel) & OlderSister(Daniel) & StanfordUniversity(Daniel))", "(Dad(Daniel) & OlderSister(Daniel) graduatedFromStanfordUniversity(Daniel))", "((Dad(Daniel) & OlderSister(Daniel)) -> GraduatedFromStanfordUniversity(Daniel))", "(Dad(Daniel) & OlderSister(Daniel) graduatedFromStanfordUniversity(Daniel) & GraduatedFromStanfordUniversity(Daniel))", "(Dad(Daniel) & OlderSister(Daniel) graduatedFromStanfordUniversity(Daniel,Stanford))", "((Dad(Daniel) & OlderSister(Daniel)) -> GraduatedFromStanfordUniversity(Daniel,Stanford))", "(Dad(Daniel) & OlderSister(Daniel) & GraduatedFromStanfordUniversity(Daniel,Stanford))", "((Dad(Daniel) & OlderSister(Daniel)) -> GraduatedFromStanford(Daniel,Stanford))", "((Dad(Daniel) & OlderSister(Daniel)) -> GraduatedFromStanfordUniversity(Daniel)) & GraduatedFromStanfordUniversity(Daniel))", "(Dad(Daniel) & OlderSister(Daniel) & GraduatedFromStanfordUniversity(Daniel))", "((Dad(Daniel) & OlderSister(Daniel)) -> GraduatedFromStanford(Daniel))", "(Dad(Daniel) & OlderSister(Daniel) graduatedFromStanfordUniversity(Daniel) & GraduatedFromStanfordUniversity(Daniel,Stanford))", "(Dad(Daniel) & OlderSister(Daniel) graduated(Daniel,Stanford))", "((Dad(Daniel) & OlderSister(Daniel)) -> GraduatedFromStanfordUniversity(Daniel,Stanford)))", "((Dad(Daniel) & OlderSister(Daniel)) & StanfordUniversity(Daniel))", "((Dad(Daniel) & OlderSister(Daniel)) -> GraduatedFromStanford(Daniel)) & GraduatedFromStanford(Daniel))"]}
{"id": "folio_train_776", "nl": "Daniel\u2019s dad is a doctor practicing internal medicine at a veteran\u2019s hospital in Minneapolis", "fol": "IsDoctorPracticingInternalMedicine(DanielsDad,VeteransHospitalInMinneapolis)", "prediction": ["all x y.((Danny(x) & Dad(y)) -> (DoctorPracticingInternalMedicine(x,y) & VeteranHospital(y) & InMinneapolis(y)))", "all x y.((Daniel(x) & Dad(y)) -> (DoctorPracticingInternalMedicine(x,y) & VeteranHospital(y) & InMinneapolis(y)))", "all x y.((Daniel(x) & Dad(y)) -> (DoctorPracticingInternalMedicine(x,y) & VeteransHospital(y) & Minneapolis(y)))", "all x y.((Danny(x) & Dad(y)) -> (DoctorPracticingInternalMedicine(x,y) & VeteransHospital(y) & Minneapolis(y)))", "all x y.((Daniel(x) & Dad(y)) -> (DoctorPracticingInternalMedicine(x,y) & VeteranHospital(y) & Minneapolis(y)))", "all x y.((Danny(x) & Dad(y)) -> (DoctorPracticingInternalMedicine(x,y) & VeteranHospital(y) & Minneapolis(y)))", "all x y.((Danny(x) & Dad(y)) -> (DoctorPracticingInternalMedicine(x,y) & VeteransHospital(y) & InMinneapolis(y)))", "all x y.((Daniel(x) & Dad(y)) -> (DoctorPracticingInternalMedicine(x,y) & VeteransHospital(y) & InMinneapolis(y)))", "all x y z.((Daniel(x) & Dad(y) & VeteranHospital(z)) -> (DoctorPracticingInternalMedicine(y,z) & VeteranHospital(z) & Minneapolis(z)))", "all x y z.((Daniel(x) & Dad(y) & VeteranHospital(z)) -> (DoctorPracticingInternalMedicine(y,z) & VeteranHospital(z) & InMinneapolis(y,z)))", "all x y z.((Daniel(x) & Dad(y) & Veteran(z)) -> (DoctorPracticingInternalMedicine(y,z) & VeteranHospital(z) & InMinneapolis(y,z)))", "all x y.((Dad(x) & Daniel(y)) -> (DoctorPracticingInternalMedicine(x,y) & VeteransHospital(y) & Minneapolis(y)))", "all x y z.((Daniel(x) & Dad(y) & Veteran(z)) -> (DoctorPracticingInternalMedicine(y,z) & VeteranHospital(z) & Minneapolis(z)))", "all x y.((Daniel(x) & Dad(y)) -> (DoctorPracticingInternalMedicine(x,y) & VeteranHospital(y) & InMinneapolis(x)))", "all x y z.((Danny(x) & Dad(y) & Veteran(z)) -> (DoctorPracticingInternalMedicine(y,z) & VeteranHospital(z) & InMinneapolis(y,z)))", "all x y z.((Daniel(x) & Dad(y) & Veteran(z)) -> (DoctorPracticingInternalMedicine(y,z) & VeteranHospital(z) & InMinneapolis(z)))"]}
{"id": "folio_train_777", "nl": "Daniel once applied to Stanford University, but he couldn\u2019t get in even though he has family members who are Stanford alumni.", "fol": "(AppliedToStanfordUniversity(Daniel) & -AdmittedToStanfordUniversity(Daniel) & HasFamilyMembersWhoAreStanfordAlumni(Daniel))", "prediction": ["all x y.((Daniel(x) & StanfordUniversity(y)) -> (AppliedTo(x,y) & -CanGetIn(x,y)))", "all x y.((Daniel(x) & Stanford(y)) -> (AppliedTo(x,y) & -CanGetIn(x,y)))", "all x y z.((Daniel(x) & StanfordUniversity(y) & FamilyMember(z) & StanfordAlumnus(z)) -> (AppliedTo(x,y) & -CanGetIn(x,z)))", "all x y z.((Daniel(x) & StanfordUniversity(y) & Family(z) & StanfordAlumnus(z)) -> (AppliedTo(x,y) & -CanGetIn(x,z)))", "all x y.((Daniel(x) & StanfordUniversity(y)) -> (AppliedTo(x,y) & -CanGetIn(x,y)))", "all x y z.((Daniel(x) & StanfordUniversity(y) & FamilyMember(z) & StanfordAlumnus(z)) -> (AppliedTo(x,y) & -CanGetIn(x,y)))", "all x y z.((Daniel(x) & StanfordUniversity(y) & FamilyMember(z) & StanfordAlumnus(z)) -> (AppliedTo(x,y) & -CanGetIn(x,z)))", "all x y.((Daniel(x) & Stanford(y)) -> (AppliedTo(x,y) & -CanGetIn(x,y)))", "all x y.((Daniel(x) & StanfordUniversity(y)) -> (Applied(x,y) & -CanGetIn(x,y)))", "all x y z.((Daniel(x) & StanfordUniversity(y) & Family(z) & StanfordAlumnus(z)) -> (AppliedTo(x,y) & -CanGetIn(x,y)))", "all x y z.((Daniel(x) & StanfordUniversity(y) & FamilyMember(z) & StanfordAlumnus(z)) -> (AppliedTo(x,y) & CannotGetIn(x,z)))", "all x.((Daniel(x) & Stanford(y)) -> (AppliedTo(x,y) & -CanGetIn(x,y)))", "all x y z.((Daniel(x) & StanfordUniversity(y) & FamilyMember(z) & StanfordAlumnus(z)) -> (AppliedTo(x,y) & -CanGetIn(x,y)))", "all x y z.((Daniel(x) & Stanford(y) & Family(z)) -> (AppliedTo(x,y) & -CanGetIn(x,z)))", "all x y z.((Daniel(x) & StanfordUniversity(y) & FamilyMember(z) & StanfordAlumnus(z)) -> (Applied(x,y) & -CanGetIn(x,z)))", "all x y.((Daniel(x) & StanfordUniversity(y)) -> (AppliedTo(x,y) & -CanGetIn(x) & HasFamilyMembers(x,y)))"]}
{"id": "folio_train_778", "nl": "Daniel studied bioengineering as his major at Rice University.", "fol": "StudiedBioengineeringAt(Daniel,RiceUniversity)", "prediction": ["(Student(Daniel,Bioengineering) & Major(Daniel,RiceUniversity))", "(Study(Daniel,Bioengineering) & RiceUniversity(Daniel,Bioengineering))", "(Student(Daniel) & Bioengineering(Daniel) & RiceUniversity(Daniel))", "(Student(Daniel,Bioengineering) & Major(Daniel,Rice))", "(Student(Daniel) & RiceUniversity(Daniel) & Bioengineering(Daniel))", "(Student(Daniel,Bioengineering) & RiceUniversity(Daniel,Bioengineering))", "(Study(Daniel) & RiceUniversity(Daniel) & Bioengineering(Daniel))", "all x.((Daniel(x) & RiceUniversity(x)) -> StudiesBioengineeringAsMajor(x))", "(Student(Daniel,Bioengineering) & MajorAtRiceUniversity(Daniel,Rice))", "(Student(Daniel) & Major(Daniel) & RiceUniversity(Daniel))", "(Student(Daniel,Bioengineering) & MajorAtRice(Daniel,Rice))", "(Study(Daniel,Bioengineering) & Major(Daniel,RiceUniversity))", "(Study(Daniel,Bioengineering) & MajorAtRiceUniversity(Daniel,Rice))", "all x.((Daniel(x) & RiceUniversity(x)) -> StudiesBioengineering(x))", "(Study(Daniel,Bioengineering) & Major(Daniel,Rice))", "(Student(Daniel,Bioengineering) & MajorAtRiceUniversity(Daniel,Bioengineering))"]}
{"id": "folio_train_779", "nl": "Daniel and his sister grew up in Minneapolis, Minnesota.", "fol": "(GrewUpIn(Daniel,Minneapolis,Minnesota) & GrewUpIn(DanielsOlderSister,Minneapolis,Minnesota))", "prediction": ["(GrowsUpInMinneapolis(Daniel) & GrowsUpInMinneapolis(Daniel) & GrowsUpInMinneapolis(Daniel))", "(GrowsUpInMinneapolis(Daniel) & GrowsUpInMinneapolis(Daniel) & GrowsUpInMinneapolis(Daniel,Minneapolis))", "(GrowsUpInMinneapolis(Daniel) & GrowsUpInMinneapolis(Daniel) & GrowsUpInMinneapolis(Daniel) & GrowsUpInMinneapolis(Daniel))", "all x y.((Daniel(x) & Sister(y)) -> (GrowsUpIn(x,Minneapolis) & GrowsUpIn(y,Minneapolis)))", "all x y.((Daniel(x) & Sister(y)) -> (GrowsUpIn(x,y) & Minneapolis(y)))", "all x y.((Daniel(x) & Sister(y)) -> (GrowsUpIn(x,Minneapolis) & GrowsUpIn(x,Minneapolis)))", "all x y z.((Daniel(x) & Sister(y) & Minneapolis(z)) -> GrownUpIn(x,y,z))", "(GrowsUpInMinneapolis(Daniel) & GrowsUpInMinneapolis(Daniel) & GrowsUpInMinneapolis(Daniel) & GrowsUpInMinneapolis(Daniel,Minneapolis))", "all x y.((Daniel(x) & Sister(y)) -> (GrowedUpIn(x,Minneapolis) & GrownUpIn(y,Minneapolis)))", "all x y z.((Daniel(x) & Sister(y) & Minneapolis(z)) -> grewUpIn(x,y,z))", "all x y.((Daniel(x) & Sister(y)) -> (GrowsUpIn(x,Minneapolis) | GrowsUpIn(y,Minneapolis)))", "all x y.((Daniel(x) & Sister(y)) -> (GrowsUpIn(x,y) & Minneapolis(y) & Minnesota(y)))", "all x y.((Daniel(x) & Sister(y)) -> (GrowedUpIn(x,y) & Minneapolis(y)))", "(GrowsUpInMinneapolis(Daniel) & GrowsUpInMinneapolis(Daniel) & GrowsUpIn(Daniel,Minneapolis))", "all x y.((Daniel(x) & Sister(y)) -> GrownUpInMinneapolis(x,y))", "all x y.((Daniel(x) & Sister(y)) -> (GrowedUpIn(x,Minneapolis) & GrownUpIn(x,Minneapolis)))"]}
{"id": "folio_train_780", "nl": "All commerical aircraft are produced by either Boeing or Airbus.", "fol": "all x.(IsCommercialAircraft(x) -> ((IsProducedBy(x,Boeing) & -IsProducedBy(x,Airbus)) | (-IsProducedBy(x,Boeing) & IsProducedBy(x,Airbus))))", "prediction": ["all x.(CommericalAircraft(x) -> (ProducedByBoeing(x) | ProducedByAirbus(x)))", "all x.(CommericalAircraft(x) -> (ProducedBy(x,Boeing) | ProducedBy(x,Airbus)))", "all x.(ComericalAircraft(x) -> (ProducedByBoeing(x) | ProducedByAirbus(x)))", "all x.(CommericalAircraft(x) -> (Boeing(x) | Airbus(x)))", "all x.(CommericalAircraft(x) -> (ProducedByBoeing(x) | ProducedByAirbus(x)))", "all x.(ComericalAircraft(x) -> (ProducedBy(x,Boeing) | ProducedBy(x,Airbus)))", "all x.(CommercialAircraft(x) -> (ProducedByBoeing(x) | ProducedByAirbus(x)))", "all x.(ComparicalAircraft(x) -> (ProducedByBoeing(x) | ProducedByAirbus(x)))", "all x.(CommercialAircraft(x) -> (ProducedByBoeing(x) | ProducedByAirbus(x)))", "all x.(CommericalAircraft(x) -> (ProducedBy(x,Boeing) | ProducedBy(x,Airbus)))", "all x.(CommericalAircraft(x) -> (ProducedByBoeing(x) | ProducedByAirbus(x)))", "all x.(CommercialAircraft(x) -> (ProducedBy(x,Boeing) | ProducedBy(x,Airbus)))", "all x.(ComericalAircraft(x) -> (Boeing(x) | Airbus(x)))", "all x.(CommericalAircraft(x) -> (BuiltBy(x,Boeing) | ProducedBy(x,Airbus)))", "all x.(CommericalAircraft(x) -> (ProducedBy(x,Boeing) | ProducedBy(x,Airbus)))", "all x.(CommericalAircraft(x) -> (Boeing(x) | Airbus(x)))"]}
{"id": "folio_train_781", "nl": "All American Airlines jets are commerical aircraft. ", "fol": "all x.(IsAmericanAirlinesAircraft(x) -> IsCommercialAircraft(x))", "prediction": ["all x.(AmericanAirlineJet(x) -> CommericalAircraft(x))", "all x.(AirlineJet(x) -> CommericalAircraft(x))", "all x.((Jet(x) & AmericanAirline(x)) -> CommericalAircraft(x))", "all x.(AmericanAirlineJet(x) -> CommericalAviation(x))", "all x.(AtlanticAirlineJet(x) -> CommericalAircraft(x))", "all x.(AmericanAirlinesJet(x) -> CommericalAircraft(x))", "all x.(AerialAirlineJet(x) -> CommericalAircraft(x))", "all x.(AlaskaAirlineJet(x) -> CommericalAircraft(x))", "all x.(AirlineJet(x) -> Commerical(x))", "all x.(AirlineJet(x) -> CommericalAviation(x))", "all x.(AfricanAirlineJet(x) -> CommericalAircraft(x))", "all x.((Jet(x) & AmericanAirline(x)) -> Commerical(x))", "all x.(AmericanAirlineJet(x) -> Commerical(x))", "all x.(Jet(x) -> CommericalAircraft(x))", "all x.(AmericanAirlineJet(x) -> ComericalAircraft(x))", "all x.(AmericanAirlineJet(x) -> CommericalAeronaut(x))"]}
{"id": "folio_train_782", "nl": "Airbus made more in revenue than Boeing last year.", "fol": "AirbusRevenueGreaterThanBoeing(Airbus,Boeing)", "prediction": ["all x y.((Airbus(x) & Boeing(y)) -> MadeMoreInRevenue(x,y))", "all x y.((Airbus(x) & Boeing(y)) -> MadeMoreRevenue(x,y))", "all x y.((Airbus(x) & Boeing(y)) -> MoreRevenue(x,y))", "all x y.((Airbus(x) & Boeing(y)) -> MadeMoreRevenueLastYear(x,y))", "all x y.((Airbus(x) & Boeing(y)) -> MadeMoreInRevenueLastYear(x,y))", "all x y.((Airbus(x) & Boeing(y)) -> (MadeMoreInRevenue(x,y) & MadeMoreInRevenue(x,y)))", "all x y.((Airbus(x) & Boeing(y)) -> (MadeMoreRevenue(x,y) & MadeMoreRevenue(x,y)))", "all x y z.((Airbus(x) & Boeing(y) & Revenue(z)) -> MadeMore(x,y,z))", "all x y z.((Airbus(x) & Boeing(y) & Revenue(z)) -> MadeMore(x,z))", "all x y.((Airbus(x) & Boeing(y)) -> MakesMoreInRevenue(x,y))", "all x y.((Airbus(x) & Boeing(y)) -> MoreInRevenue(x,y))", "all x y.((Airbus(x) & Boeing(y)) -> MakesMoreRevenue(x,y))", "all x y.((Airbus(x) & Boeing(y)) -> MoreRevenueLastYear(x,y))", "all x y.((Airbus(x) & Boeing(y)) -> MadeMoreRevenueThisYear(x,y))", "all x y.((Airbus(x) & Boeing(y)) -> (MadeMoreInRevenue(x,y) & MoreInRevenue(x,y)))", "all x y z.((Airbus(x) & Boeing(y) & Revenue(z)) -> MadeMoreInRevenue(x,y,z))"]}
{"id": "folio_train_783", "nl": "An American Airlines plane is either a Boeing or Airbus plane.", "fol": "all x.(IsAmericanAirlinesAircraft(x) -> (IsProducedBy(x,Boeing) | IsProducedBy(x,Airbus)))", "prediction": ["all x.(AmericanAirlinePlane(x) -> (BoeingPlane(x) | AirbusPlane(x)))", "all x.(AirlinePlane(x) -> (Boeing(x) | Airbus(x)))", "all x.(AirlinePlane(x) -> (BoeingPlane(x) | AirbusPlane(x)))", "all x.(AmericanAirlinePlane(x) -> (Boeing(x) | Airbus(x)))", "all x.(AmericanAirline(x) -> (Boeing(x) | Airbus(x)))", "all x.(AfricanAirlinePlane(x) -> (BoeingPlane(x) | AirbusPlane(x)))", "all x.(AerialAirlinePlane(x) -> (BoeingPlane(x) | AirbusPlane(x)))", "all x.(AmericanAirlinePlanet(x) -> (BoeingPlane(x) | AirbusPlane(x)))", "all x.(Airline(x) -> (Boeing(x) | Airbus(x)))", "all x.(AmericanAirlinesPlane(x) -> (BoeingPlane(x) | AirbusPlane(x)))", "all x.(AmericanAirline(x) -> (BoeingPlane(x) | AirbusPlane(x)))", "all x.(AmericanAirlinePlane(x) -> (BoeingPlane(x) | AirbusPlane(x)))", "all x.(AfricanAirlinePlane(x) -> (Boeing(x) | Airbus(x)))", "all x.(AerialAirlinePlane(x) -> (Boeing(x) | Airbus(x)))", "all x.(AmericanAirlinesPlane(x) -> (Boeing(x) | Airbus(x)))", "all x.(AirlinePlane(x) -> (Boeing(x) | Airbus(x)))"]}
{"id": "folio_train_784", "nl": "There exists a SpaceX commerical aircraft.", "fol": "exists x.SpaceXCommercialAircraft(x)", "prediction": ["exists x.(SpaceXCommericalAircraft(x))", "exists x.(SpaceXComericalAircraft(x))", "exists x.(SpaceX(x) & CommericalAircraft(x))", "exists x.(SpaceXCommericalAircraft(x))", "exists x.(SpaceXComparicalAircraft(x))", "exists x.(SpaceXCommericalAircraft(x) & SpaceXCommericalAircraft(x))", "exists x.(SpaceXComericalAircraft(x) & SpaceXCommericalAircraft(x))", "exists x.(SpaceXCommericalAircraft(x) & SpaceXCommericalAircraft(x))", "exists x.(SpaceXComericalAircraft(x))", "exists x.(SpaceXCommericalAircraft(x) & Aircraft(x))", "exists x.(SpaceX) & CommericalAircraft(x))", "exists x.(SpaceXComericalAircraft(x) & SpaceXComericalAircraft(x))", "exists x.(SpaceXComericalAircraft(x) & SpaceXCommericalAircraft(x))", "exists x.(SpaceXCommericalAircraft(x) & -SpaceXCommericalAircraft(x))", "exists x.(SpaceXCommericalAircraft(x) & SpaceXComparicalAircraft(x))", "exists x.(SpaceXCommericalAircraft(x) & CommercialAircraft(x))"]}
{"id": "folio_train_785", "nl": "There does not exist a United Airlines plane produced by Boeing.", "fol": "-exists x.(UnitedAirlinesPlane(x) & IsProducedBy(x,Boeing))", "prediction": ["exists x.(UnitedAirlinesPlane(x) & ProducedByBoeing(x))", "-exists x.(UnitedAirlinesPlane(x) & ProducedByBoeing(x))", "(-exists x.(UnitedAirlinesPlane(x) & ProducedByBoeing(x)))", "-exists x.(UnitedAirlines(x) & ProducedByBoeing(x))", "exists x.(UnitedAirlinesPlane(x) & -ProducedByBoeing(x))", "-exists x.(UnitedAirline(x) & ProducedByBoeing(x))", "exists x.(UnitedAirlines(x) & ProducedByBoeing(x))", "exists x.(UnitedAirlinePlane(x) & ProducedByBoeing(x))", "-exists x.(UnitedAirlinePlane(x) & ProducedByBoeing(x))", "(-exists x.(UnitedAirlinePlane(x) & ProducedByBoeing(x)))", "exists x.(UnitedAirlines(x) & -ProducedByBoeing(x))", "exists x.(UnitedAirline(x) & ProducedByBoeing(x))", "-exists x.(UnitedAirlinesPilot(x) & ProducedByBoeing(x))", "all x.(UnitedAirlinesPlane(x) -> -ProducedByBoeing(x))", "exists x.(UnitedAirlinesPilot(x) & ProducedByBoeing(x))", "exists x.(UnitedAirline(x) & -ProducedByBoeing(x))"]}
{"id": "folio_train_786", "nl": "There is a commercial plane made by both Airbus and Boeing.", "fol": "exists x.(IsCommercialAircraft(x) & IsProducedBy(x,Airbus) & IsProducedBy(x,Boeing))", "prediction": ["exists x.(CommercialPlane(x) & Airbus(x) & Boeing(x))", "exists x.(CommercialPlane(x) & MadeByAirbus(x) & MadeByBoeing(x))", "exists x.(CommercialPlane(x) & MadeBy(x,Airbus) & MadeBy(x,Boeing))", "exists x.(CommercialPlane(x) & Airbus(x) & Boeing(x))", "exists x.(CommercialPlane(x) & MadeByAirbus(x) & MadeByBoeing(x))", "exists x.(CommercialPlane(x) & Airbus(x) & Boeing(x))", "exists x.(CommercialPlane(x) & MadeByAirbus(x) & MadeByBoeing(x))", "exists x.(CommercialPlane(x) & MadeByAirbusAndBoeing(x))", "exists x y z.(CommercialPlane(x) & Airbus(y) & Boeing(z) & MadeBy(x,y) & MadeBy(x,z))", "exists x y z.(CommercialPlane(x) & Airbus(y) & Boeing(z) & MadeBy(x,y,z))", "exists x.(CommercialPlane(x) & (Airbus(x) | Boeing(x)))", "exists x y z.(CommercialPlane(x) & Airbus(y) & Boeing(z))", "exists x.(ComercialPlane(x) & Airbus(x) & Boeing(x))", "exists x y.(CommercialPlane(x) & Airbus(y) & Boeing(z))", "exists x y z.(CommercialPlane(x) & Airbus(y) & Boeing(z) & MadeBy(x,y))", "exists x y.(CommercialPlane(x) & Airbus(y) & Boeing(z))"]}
{"id": "folio_train_787", "nl": "Luzon is an island in the Philippines.", "fol": "(IsIsland(Luzon) & LocatedIn(Luzon,Philippines))", "prediction": ["all x.(Luzon(x) -> IslandInPyongyang(x))", "all x y.((Luzon(x) & Philippines(y)) -> Island(x,y))", "all x.(Luzon(x) -> Island(x))", "all x y.((Luzon(x) & Island(y)) -> InPython(x,y))", "all x.(Luzon(x) -> IslandInPhilippines(x))", "all x y.((Luzon(x) & Island(y)) -> InPyongyang(x,y))", "all x y.((Luzon(x) & Philippines(y)) -> IslandIn(x,y))", "all x y.((Luzon(x) & Island(y)) -> InPython(x))", "all x y.((Luzon(x) & Island(y)) -> InPyongyang(x))", "exists x.(Luzon(x) & Island(x) & InPyongyang(x))", "(Island(Luzon) & InPyongyang(Luzon))", "(Island(Luzon) & IslandInPhilippines(Luzon))", "all x.(Luzon(x) -> IslandInPyrrhuana(x))", "(Island(Luzon) & Island(Luzon))", "all x.(Luzon(x) -> IslandInPythony(x))", "(Island(Luzon) & Island(Luzon) & InPyongyang(Luzon))"]}
{"id": "folio_train_788", "nl": "In December 1999, an earthquake struck Luzon.", "fol": "exists x.(EarthquakeEvent(x) & OccurredIn(x,December1999) & Affected(x,Luzon))", "prediction": ["all x y.((Earthquake(x) & Luzon(y)) -> Hits(x,y))", "all x y z.((Earthquake(x) & Luzon(y) & December99(z)) -> Struck(x,y,z))", "all x y.((Earthquake(x) & Luzon(y)) -> Struck(x,y))", "all x y z.((Earthquake(x) & Luzon(y) & December99(z)) -> Hits(x,y,z))", "all x y z.((Earthquake(x) & Luzon(y) & December99(z)) -> Strikes(x,y,z))", "all x y.((Earthquake(x) & Luzon(y)) -> InDecembre99(x,y))", "all x y.((Earthquake(x) & Luzon(y)) -> InDecembre1999(x,y))", "all x y z.((Earthquake(x) & Luzon(y) & December1999(z)) -> Struck(x,y,z))", "all x y.((Earthquake(x) & Luzon(y)) -> InDecember99(x,y))", "all x y z.((Earthquake(x) & Luzon(y) & December1999(z)) -> Strikes(x,y,z))", "all x y z.((Earthquake(x) & Luzon(y) & December1999(z)) -> Hits(x,y,z))", "all x y.((Earthquake(x) & Luzon(y)) -> Strikes(x,y))", "all x y z.((Earthquake(x) & Luzon(y) & December99(z)) -> Hit(x,y,z))", "all x y.((Earthquake(x) & Luzon(y)) -> Hit(x,y))", "all x y z.((Earthquake(x) & Luzon(y) & December99(z)) -> Shakes(x,y,z))", "all x y z.((Earthquake(x) & Luzon(y) & December99(z)) -> Strike(x,y,z))"]}
{"id": "folio_train_789", "nl": "People died in the December 1999 earthquake in Luzon.", "fol": "exists x.(EarthquakeEvent(x) & OccurredIn(x,December1999) & Affected(x,Luzon) & CausedDeaths(x))", "prediction": ["all x y.((Person(x) & Earthquake(y) & Luzon(y)) -> DiedIn(x,y))", "all x y.((People(x) & Earthquake(y) & Luzon(y)) -> DiedIn(x,y))", "all x y z.((People(x) & Earthquake(y) & Luzon(z)) -> DiedIn(x,y,z))", "all x y z.((Person(x) & Earthquake(y) & Luzon(z)) -> DiedIn(x,y,z))", "all x y.((People(x) & DecemberEarthquake(y) & Luzon(y)) -> DiedIn(x,y))", "all x y z.((People(x) & DecemberEarthquake(y) & Luzon(z)) -> DiedIn(x,y,z))", "all x y.((People(x) & DecemberEarthquake(y) & Luzon(z)) -> DiedIn(x,y,z))", "all x y.((Person(x) & Earthquake(y) & Luzon(y)) -> DiedIn(x,y))", "all x y.((People(x) & Earthquake(y) & Luzon(y)) -> DiedIn(x,y))", "all x y.((Person(x) & Earthquake(y) & Luzon(z)) -> DiedIn(x,y,z))", "all x y.((Person(x) & Earthquake(y)) -> DiedIn(x,y))", "all x y.((People(x) & DecemberEarthquake(y)) -> DiedIn(x,y))", "all x y.((Person(x) & Earthquake(y) & Luzon(y)) -> Died(x,y))", "all x y.((People(x) & DecemberEarthquake(y) & Luzon(y)) -> Died(x,y))", "all x y.((People(x) & Earthquake(y)) -> DiedIn(x,y))", "all x y.((People(x) & Earthquake(y) & Luzon(y)) -> Died(x,y))"]}
{"id": "folio_train_790", "nl": "Leyte is an island in the Philippines.", "fol": "(IsIsland(Leyte) & LocatedIn(Leyte,Philippines))", "prediction": ["Leyte Island(Island(Island(Island) & LocatedIn(Island(Island) & LocatedIn(Island(Island) & LocatedIn(Island(Island) & LocatedIn(Island(Island) & LocatedIn(Island(Island) & LocatedIn(Island(Island(Island(Island)))", "Leyte Island(Island(Island(Island) & LocatedIn(Island(Island) & LocatedIn(Island) & LocatedIn(Island) & LocatedIn(Island) & LocatedIn(Island) & LocatedIn(Island(Island) & LocatedIn(Island) & LocatedIn(Island(Island))", "Leyte Island(Island(Island(Island) & LocatedIn(Island(Island) & LocatedIn(Island) & LocatedIn(Island) & LocatedIn(Island) & LocatedIn(Island) & LocatedIn(Island) & LocatedIn(Island(Island) & LocatedIn(Island(Island))", "Leyte Island(Island(Island(Island) & LocatedIn(Island(Island) & LocatedIn(Island(Island) & LocatedIn(Island(Island) & LocatedIn(Island(Island) & LocatedIn(Island(Island) & LocatedIn(Island(Island(Island(Island(Island)))", "Leyte Island(Island(Island(Island) & LocatedIn(Island(Island) & LocatedIn(Island) & LocatedIn(Island) & LocatedIn(Island) & LocatedIn(Island) & LocatedIn(Island) & LocatedIn(Island) & LocatedIn(Island(Island(Island))", "Leyte Island(Island(Island(Island) & LocatedIn(Island(Island) & LocatedIn(Island) & LocatedIn(Island(Island) & LocatedIn(Island) & LocatedIn(Island) & LocatedIn(Island) & LocatedIn(Island) & LocatedIn(Island(Island))", "Leyte Island(Island(Island(Island) & LocatedIn(Island(Island) & LocatedIn(Island(Island) & LocatedIn(Island) & LocatedIn(Island) & LocatedIn(Island(Island) & LocatedIn(Island) & LocatedIn(Island(Island(Island(Island)))", "Leyte Island(Island(Island(Island) & LocatedIn(Island(Island) & LocatedIn(Island) & LocatedIn(Island(Island) & LocatedIn(Island) & LocatedIn(Island) & LocatedIn(Island) & LocatedIn(Island) & LocatedIn(Island(Island(Island))", "Leyte Island(Island(Island(Island) & LocatedIn(Island(Island) & LocatedIn(Island) & LocatedIn(Island(Island) & LocatedIn(Island) & LocatedIn(Island) & LocatedIn(Island) & LocatedIn(Island(Island))", "Leyte Island(Island(Island(Island) & LocatedIn(Island(Island) & LocatedIn(Island) & LocatedIn(Island(Island) & LocatedIn(Island) & LocatedIn(Island) & LocatedIn(Island(Island) & LocatedIn(Island(Island(Island(Island)))", "Leyte Island(Island(Island(Island) & LocatedIn(Island(Island) & LocatedIn(Island) & LocatedIn(Island) & LocatedIn(Island) & LocatedIn(Island) & LocatedIn(Island(Island) & LocatedIn(Island) & LocatedIn(Island(Island(Island)))", "Leyte Island(Island(Island(Island) & LocatedIn(Island(Island) & LocatedIn(Island) & LocatedIn(Island) & LocatedIn(Island) & LocatedIn(Island) & LocatedIn(Island) & LocatedIn(Island(Island) & LocatedIn(Island(Island(Island)))", "Leyte Island(Island(Island(Island) & LocatedIn(Island(Island) & LocatedIn(Island(Island) & LocatedIn(Island(Island) & LocatedIn(Island) & LocatedIn(Island(Island) & LocatedIn(Island(Island))", "Leyte Island(Island(Island(Island) & LocatedIn(Island(Island) & LocatedIn(Island(Island) & LocatedIn(Island) & LocatedIn(Island(Island) & LocatedIn(Island(Island) & LocatedIn(Island(Island))", "Leyte Island(Island(Island(Island) & LocatedIn(Island(Island) & LocatedIn(Island(Island) & LocatedIn(Island(Island) & LocatedIn(Island(Island) & LocatedIn(Island(Island)))", "Leyte Island(Island(Island(Island) & LocatedIn(Island(Island) & LocatedIn(Island) & LocatedIn(Island(Island) & LocatedIn(Island) & LocatedIn(Island) & LocatedIn(Island) & LocatedIn(Island) & LocatedIn(Island(Island(Island)))"]}
{"id": "folio_train_791", "nl": "No one has ever died of an earthquake that struck in the Philippines.", "fol": "-exists x y.(EarthquakeEvent(x) & Affected(x,y) & LocatedIn(y,Philippines) & CausedDeaths(x))", "prediction": ["-exists x.(Earthquake(x) & StruckInPhone(x))", "-exists x.(Earthquake(x) & StruckInPhilippines(x))", "-exists x.(Earthquake(x) & InPhone(x))", "-exists x.(Earthquake(x) & StruckIn(x,Philippines))", "-exists x.(Earthquake(x) & StruckInPyongyang(x))", "-exists x.(Earthquake(x) & HitsInPhone(x))", "-exists x.(Earthquake(x) & StruckInPyorkshire(x))", "-exists x.(Earthquake(x) & StrikesInPhone(x))", "-exists x.(Earthquake(x) & StruckInPyroah(x))", "-exists x.(Earthquake(x) & StruckInPhnom Penh(x))", "-exists x.(Earthquake(x) & StruckInPinyon(x))", "-exists x.(Earthquake(x) & StruckIn(x,Phone))", "all x y.((Person(x) & Earthquake(y)) -> -DeadOf(x,y))", "-exists x.(Earthquake(x) & StruckInPyrahia(x))", "all x y.((Person(x) & Earthquake(y)) -> NeverDead(x,y))", "-exists x.(Earthquake(x) & StruckIn(x,Phnom Penh))"]}
{"id": "folio_train_792", "nl": "In 1999, there was at least one earthquake in the Philippines.", "fol": "exists x y.(EarthquakeEvent(x) & OccurredIn(x,December1999) & Affected(x,y) & LocatedIn(y,Philippines))", "prediction": ["all x y z.((Earthquake(x) & Philippines(y) & 1999(z)) -> ThereAtLeastOne(x,y,z))", "all x y z.((Earthquake(x) & Philippines(y) & 1999(z)) -> ThereAtLeastOneIn(x,y,z))", "all x y z.((Earthquake(x) & Philippines(y) & 1999(z)) -> AtLeastOneIn(x,y,z))", "all x y z.((Earthquake(x) & Philippines(y) & 1999(z)) -> AtLeastOne(x,y,z))", "all x.((Earthquake(x) & InPhnomenon(x)) -> InPhnomenon(x))", "all x y z.((Earthquake(x) & Philippines(y) & 1999(z)) -> ThereAtLeastOneEarthquake(x,y,z))", "all x y.((Earthquake(x) & Philippines(y) & In(x,y)) -> In(x,y))", "all x y.((Earthquake(x) & Philippines(y)) -> In(x,y))", "all x y z.((Earthquake(x) & Philippines(y) & 1999(z)) -> InPhone(x,y,z))", "(exists x.(Earthquake(x) & InPhnomenon(x)) & InPhnomenon(x))", "all x y z.((Earthquake(x) & Philippines(y) & 1999(z)) -> InPhnomena(x,y,z))", "all x y z.((Earthquake(x) & Philippine(y) & 1999(z)) -> ThereAtLeastOne(x,y,z))", "all x y z.((Earthquake(x) & Philippines(y) & 1999(z)) -> ThereBeen(x,y,z))", "all x y.((Earthquake(x) & Philippines(y)) -> In1999(x,y))", "all x y z.((Earthquake(x) & Philippines(y) & 1999(z)) -> ThereAtLeastOneInPhone(x,y,z))", "(exists x.(Earthquake(x) & InPhone(x)) & InPhone(x) & InPhone(x))"]}
{"id": "folio_train_793", "nl": "People either invest in the public stock market regularly or enjoy gambling regularly.", "fol": "all x.(InvestInPublicStockMarketRegularly(x) | EnjoyGamblingRegularly(x))", "prediction": ["all x.(InvestsInPublicStockMarket(x) | EnjoysGambling(x))", "all x.(InvestsInPublicStockMarket(x) | EnjoysGaming(x))", "all x y.((Person(x) & PublicStockMarket(y)) -> (InvestsIn(x,y) | EnjoysGambling(x,y)))", "all x y.((Person(x) & PublicStockMarket(y)) -> (InvestsIn(x,y) | EnjoysGambling(x)))", "all x y.((Person(x) & PublicStockMarket(y)) -> (InvestsIn(x,y) | EnjoysGaming(x,y)))", "all x.((Person(x) & (InvestsInPublicStockMarket(x) | EnjoysGambling(x))) -> Regular(x))", "all x.((Person(x) & (InvestsInPublicStockMarket(x) | EnjoysGambling(x))) -> -InvestsInPublicStockMarket(x))", "all x.(InvestsInPublicStockMarket(x) | EnjoysGamingRegularly(x))", "all x y.((Person(x) & PublicStockMarket(y)) -> (InvestsRegularly(x,y) | EnjoysGamblingRegularly(x,y)))", "all x.((Person(x) & (InvestsInPublicStockMarket(x) | EnjoysGaming(x))) -> Regular(x))", "all x y.((Person(x) & PublicStockMarket(y)) -> (InvestsRegularly(x,y) | EnjoysGamingRegularly(x,y)))", "exists x.(Person(x) & ((InvestsInPublicStockMarket(x) & -InvestsInPublicStockMarket(x)) | EnjoysGambling(x))))", "all x.((Person(x) & (InvestsInPublicStockMarket(x) | EnjoysGaming(x))) -> -InvestsInPublicStockMarket(x))", "exists x.(Person(x) & ((InvestsInPublicStockMarket(x) & Regularly(x)) | EnjoysGambling(x))))", "all x y.((Person(x) & PublicStockMarket(y)) -> (InvestsIn(x,y) | EnjoysGaming(x)))", "all x.(Person(x) -> (InvestsInPublicStockMarket(x) | EnjoysGambling(x)))"]}
{"id": "folio_train_794", "nl": "If people invest in the public stock market regularly, then they read the Wall Street Journal and other newspapers regularly to keep updated on financial metrics.", "fol": "all x.(InvestInPublicStockMarketRegularly(x) -> ReadsNewspapersRegularly(x))", "prediction": ["all x.(InvestsInPublicStockMarketRegularly(x) -> (ReadsWallStreetJournal(x) & ReadsOtherNewspapersRegularly(x) & UpdatesFinancialMetrics(x)))", "all x.(InvestsInPublicStockMarketRegularly(x) -> ReadsWallStreetJournalAndOtherNewspapersRegularly(x))", "all x.(InvestsInPublicStockMarketRegularly(x) -> (ReadsWallStreetJournal(x) & ReadsOtherNewspapers(x) & UpdatesFinancialMetrics(x)))", "all x.(InvestsInPublicStockMarketRegularly(x) -> (ReadsWallStreetJournalAndOtherNewspapersRegularly(x) & UpdatesFinancialMetrics(x)))", "all x.(InvestsInPublicStockMarketRegularly(x) -> (ReadsWallStreetJournal(x) & ReadsOtherNewspapersRegularly(x) & UpdatesFinancialMetadata(x)))", "all x.(InvestsInPublicStockMarketRegularly(x) -> (ReadsWallStreetJournal(x) & ReadsOtherNewspapersRegularly(x)))", "all x.(InvestsInPublicStockMarketRegularly(x) -> (ReadsWallStreetJournal(x) & ReadsOtherNewspapers(x) & UpdatesFinancialMetadata(x)))", "all x.(InvestsInPublicStockMarketRegularly(x) -> (ReadsWallStreetJournal(x) & ReadsOtherNewspapers(x) & KeepsUpdatedOnFinancialMetrics(x)))", "all x.((InvestsInPublicStockMarketRegularly(x) & ReadsWallStreetJournalAndOtherNewspapersRegularly(x)) -> KeepsUpdatedOnFinancialMetrics(x))", "all x.(InvestsInPublicStockMarketRegularly(x) -> (ReadsWallStreetJournalAndOtherNewspapersRegularly(x) & UpdatesFinancialMetadata(x)))", "all x.(InvestsInPublicStockMarketRegularly(x) -> (ReadsWallStreetJournal(x) & ReadsOtherNewspapersRegularly(x) & KeepsUpdatedOnFinancialMetrics(x)))", "all x.((InvestsInPublicStockMarketRegularly(x) & ReadsWallStreetJournal(x) & ReadsOtherNewspapersRegularly(x)) -> KeepsUpdatedOnFinancialMetrics(x))", "all x.(InvestsInPublicStockMarketRegularly(x) -> (ReadsWallStreetJournal(x) & ReadsOtherNewspapersRegularly(x) & UpdatedOnFinancialMetrics(x)))", "all x.(InvestsInPublicStockMarketRegularly(x) -> (ReadsWallStreetJournal(x) & ReadsOtherNewspapers(x) & KeepsUpdatedOnFinancialMetadata(x)))", "all x.(InvestsInPublicStockMarketRegularly(x) -> (ReadsWallStreetJournal(x) & ReadsOtherNewspapersRegularly(x) & KeepsUpdatedOnFinancialMetadata(x)))", "all x.(InvestsInPublicStockMarket(x) -> (ReadsWallStreetJournal(x) & ReadsOtherNewspapers(x) & UpdatesFinancialMetrics(x)))"]}
{"id": "folio_train_795", "nl": "All people who enjoy gambling regularly spend a lot of money at casinos and other betting games.", "fol": "all x.(EnjoyGamblingRegularly(x) -> SpendMoneyAtCasinos(x))", "prediction": ["all x.(EnjoysGambling(x) -> SpendsLotOfMoneyAtCasinoAndBettingGames(x))", "all x.(EnjoysGambling(x) -> SpendsLotOfMoneyAtCasinosAndBettingGames(x))", "all x.((Person(x) & EnjoysGambling(x)) -> SpendsLotOfMoneyAtCasinoAndBettingGames(x))", "all x.((Person(x) & EnjoysGambling(x)) -> SpendsLotOfMoneyAtCasinosAndBettingGames(x))", "all x.(EnjoysGambling(x) -> SpendsLotOfMoneyAtCasinoAndBetweenBetweenGames(x))", "all x.(EnjoysGaming(x) -> SpendsLotOfMoneyAtCasinoAndBettingGames(x))", "all x.((Person(x) & EnjoysGambling(x)) -> SpendsLotOfMoneyAtCasinoAndBetweenBetweenGames(x))", "all x.((Person(x) & EnjoysGamblingRegularly(x)) -> SpendsLotOfMoneyAtCasinoAndBettingGames(x))", "all x.((Person(x) & EnjoysGaming(x)) -> SpendsLotOfMoneyAtCasinoAndBettingGames(x))", "all x.(EnjoysGambling(x) -> SpendsLotOfMoneyAtCasino(x))", "all x.((Person(x) & EnjoysGamblingRegularly(x)) -> SpendsLotOfMoneyAtCasinosAndBettingGames(x))", "all x.(EnjoysGaming(x) -> SpendsLotOfMoneyAtCasinosAndBettingGames(x))", "all x.((Person(x) & EnjoysGambling(x)) -> SpendsLotOfMoneyAtCasinosAndBetweenBetweenGames(x))", "all x.((Person(x) & EnjoysGamblingRegularly(x)) -> SpendsLotOfMoneyAtCasinoAndBetweenBetweenGames(x))", "all x.((Person(x) & EnjoysGaming(x)) -> SpendsLotOfMoneyAtCasinosAndBettingGames(x))", "all x.(EnjoysGambling(x) -> SpendsLotOfMoneyAtCasinosAndBetweenBetweenGames(x))"]}
{"id": "folio_train_796", "nl": "People who spend a lot of money at casinos and other betting games visit the Las Vegas Strip regularly.", "fol": "all x.(SpendMoneyAtCasinos(x) -> VisitLasVegasStripRegularly(x))", "prediction": ["all x.((Person(x) & SpendsLotOfMoneyAtCasinosAndBettingGames(x)) -> VisitsLasVegasStripRegularly(x))", "all x.((Person(x) & SpendsLotsOfMoneyAtCasinosAndBettingGames(x)) -> VisitsLasVegasStripRegularly(x))", "all x.((Person(x) & SpendsLotOfMoneyAtCasinoAndBettingGames(x)) -> VisitsLasVegasStripRegularly(x))", "all x.((Person(x) & SpendsLotsOfMoneyAtCasinoAndBettingGames(x)) -> VisitsLasVegasStripRegularly(x))", "all x.((Person(x) & SpendsMoreAtCasino(x) & SpendsMoreAtBettingGames(x)) -> VisitsLasVegasStripRegularly(x))", "all x.((Person(x) & SpendsLotOfMoneyAtCasinoAndBetweenBetweenGames(x)) -> VisitsLasVegasStripRegularly(x))", "all x.((Person(x) & SpendsLotOfMoneyAtCasino(x) & Bet365(x)) -> VisitsLasVegasStripRegularly(x))", "all x.((Person(x) & SpendsLotsOfMoneyAtCasinoAndBetweenBetweenGames(x)) -> VisitsLasVegasStripRegularly(x))", "all x.((Person(x) & SpendsLotOfMoneyAtCasino(x) & SpendsLotOfBettingGames(x)) -> VisitsLasVegasStripRegularly(x))", "all x.((Person(x) & SpendsLotsOfMoneyAtCasino(x) & Bet365(x)) -> VisitsLasVegasStripRegularly(x))", "all x.((Person(x) & SpendsLotsOfMoneyAtCasino(x) & SpendsLotsOfBettingGames(x)) -> VisitsLasVegasStripRegularly(x))", "all x.((Person(x) & SpendsLotOfMoneyAtCasino(x) & SpendsBetweenBettingGames(x)) -> VisitsLasVegasStripRegularly(x))", "all x.((Person(x) & SpendsLotOfMoneyAtCasinosAndBettingGames(x)) -> VisitsLasVegetaStripRegularly(x))", "all x.((Person(x) & SpendsLotsOfMoneyAtCasinosAndBettingGames(x)) -> VisitsLasVegetaStripRegularly(x))", "all x.((Person(x) & SpendsLotOfMoneyAtCasinoAndBettingGames(x)) -> VisitsLasVegetaStripRegularly(x))", "all x.((Person(x) & SpendsLotsOfMoneyAtCasinoAndBettingGames(x)) -> VisitsLasVegetaStripRegularly(x))"]}
{"id": "folio_train_797", "nl": "People who spend a lot of money at casinos and other betting games have a lot of disposable income to spend.", "fol": "all x.(SpendMoneyAtCasinos(x) -> HasDisposableIncome(x))", "prediction": ["all x.((Person(x) & SpendsLotsOfMoneyAtCasino(x) & SpendsLotsOfBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetw.BetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetwe", "all x.((Person(x) & SpendsLotsOfMoneyAtCasino(x) & SpendsLotsOfBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetwe", "all x.((Person(x) & SpendsLotsOfMoneyAtCasino(x) & SpendsLotsOfBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetw.BetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetWE", "all x.((Person(x) & SpendsLotsOfMoneyAtCasino(x) & SpendsLotsOfBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetw.BetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetween(BetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBet", "all x.((Person(x) & SpendsLotsOfMoneyAtCasino(x) & SpendsLotsOfBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetw.BetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetween(BetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBet", "all x.((Person(x) & SpendsLotsOfMoneyAtCasino(x) & SpendsLotsOfBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetw.BetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetween(BetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBet", "all x.((Person(x) & SpendsLotsOfMoneyAtCasino(x) & SpendsLotsOfBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetw.BetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetween(BetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBet", "all x.((Person(x) & SpendsLotsOfMoneyAtCasino(x) & SpendsLotsOfBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetw.BetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetWEenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetwe", "all x.((Person(x) & SpendsLotsOfMoneyAtCasino(x) & SpendsLotsOfBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetw.BetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetWEenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetwe", "all x.((Person(x) & SpendsLotsOfMoneyAtCasino(x) & SpendsLotsOfBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetw.BetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetWEenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetwe", "all x.((Person(x) & SpendsLotsOfMoneyAtCasino(x) & SpendsLotsOfBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetw.BetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetWEenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetwe", "all x.((Person(x) & SpendsLotsOfMoneyAtCasino(x) & SpendsLotsOfBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetw.BetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetWEenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetwe", "all x.((Person(x) & SpendsLotsOfMoneyAtCasino(x) & SpendsLotsOfBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetw.BetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetWEenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetwe", "all x.((Person(x) & SpendsLotsOfMoneyAtCasino(x) & SpendsLotsOfBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetw.BetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetween(Bet", "all x.((Person(x) & SpendsLotsOfMoneyAtCasino(x) & SpendsLotsOfBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetw.BetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetWEenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetwe", "all x.((Person(x) & SpendsLotsOfMoneyAtCasino(x) & SpendsLotsOfBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetw.BetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetween(BetweenBet"]}
{"id": "folio_train_798", "nl": "If Matt invests in the public stock market regularly, then Matt neither has a lot of disposable income to spend nor invests in the public stock market regularly. ", "fol": "((InvestInPublicStockMarketRegularly(Matt) -> -HasDisposableIncome(Matt)) & -InvestInPublicStockMarketRegularly(Matt))", "prediction": ["all x.((InvestsInPublicStockMarketRegularly(x) & Matt(x)) -> (-LotOfDisposableIncome(x) & -InvestsInPublicStockMarketRegularly(x)))", "all x.((Matt(x) & InvestsInPublicStockMarketRegularly(x)) -> (-LotOfDisposableIncome(x) & -InvestsInPublicStockMarketRegularly(x)))", "all x.((InvestsInPublicStockMarketRegularly(x) & Matt(x)) -> (-HasDisposableIncome(x) & -InvestsInPublicStockMarketRegularly(x)))", "all x.((Matt(x) & InvestsInPublicStockMarketRegularly(x)) -> (-HasDisposableIncome(x) & -InvestsInPublicStockMarketRegularly(x)))", "all x.((Matt(x) & InvestsInPublicStockMarketRegularly(x)) -> (-Matt(x) & -Matt(x) & -Matt(x) & -Matt(x) & -Matt(x) & -Matt(x) & -Matt(x) & -Matt(x) & -Matt(x)))", "all x.((Matt(x) & InvestsInPublicStockMarketRegularly(x)) -> (-(Matt(x) & DisposableIncome(x)) | InvestsInPublicStockMarketRegularly(x))))", "all x.((Matt(x) & InvestsInPublicStockMarketRegularly(x)) -> -(Matt(x) & DisposableIncome(x) & -InvestsInPublicStockMarketRegularly(x)))", "all x.((Matt(x) & InvestsInPublicStockMarketRegularly(x)) -> (-(Matt(x) & DisposableIncome(x)) | -InvestsInPublicStockMarketRegularly(x))))", "all x.((Matt(x) & InvestsInPublicStockMarketRegularly(x)) -> (-Matt(x) & -Matt(x) & -Matt(x) & -Matt(x) & -Matt(x) & -Matt(x) & -Matt(x)))", "all x.((Matt(x) & InvestsInPublicStockMarketRegularly(x)) -> (-Matt(x) & -Matt(x) & -Matt(x) & -Matt(x) & -Matt(x) & -Matt(x) & -Matt(x) & -Matt(x)))", "all x.((Matt(x) & InvestsInPublicStockMarketRegularly(x)) -> (-Matt(x) & -Matt(x) & -Matt(x) & -Matt(x) & -Matt(x) & -Matt(x) & -Matt(x) & -Matt(x) & -Matt(x))))", "all x.((Matt(x) & InvestsInPublicStockMarketRegularly(x)) -> (-HasMatt(x) & -HasMatt(x) & -InvestsInPublicStockMarketRegularly(x)))", "all x.((Matt(x) & InvestsInPublicStockMarketRegularly(x)) -> (-(MattHasDisposableIncome(x) & -InvestsInPublicStockMarketRegularly(x))))", "all x.((Matt(x) & InvestsInPublicStockMarketRegularly(x)) -> (-Matt(x) & -Matt(x) & -Matt(x) & -Matt(x) & -Matt(x) & -Matt(x)))", "all x.((Matt(x) & InvestsInPublicStockMarketRegularly(x)) -> (-Matt(x) & -Matt(x) & -Matt(x) & -Matt(x) & -Matt(x) & -Matt(x) & -MattInvestsInPublicStockMarketRegularly(x)))", "all x.((Matt(x) & InvestsInPublicStockMarketRegularly(x)) -> (-Matt(x) & -Matt(x) & -Matt(x) & -Matt(x) & -Matt(x) & -MattInvestsInPublicStockMarketRegularly(x)))"]}
{"id": "folio_train_799", "nl": "Matt reads the Wall Street Journal and other newspapers regularly to keep updated on financial metrics.", "fol": "(Reads(Matt,WallStreetJournal) & Reads(Matt,OtherNewspapers))", "prediction": ["all x y z.((Matt(x) & WallStreetJournal(y) & Newspaper(z)) -> ReadsRegularly(x,y,z))", "all x.((Matt(x) & WallStreetJournal(x) & OtherNewspapers(x)) -> KeepsUpdatedOnFinancialMetrics(x))", "all x y z.((Matt(x) & WallStreetJournal(y) & Newspaper(z)) -> ReadsRegularlyToKeepUpdatedOnFinancialMetrics(x,y,z))", "all x y z.((Matt(x) & WallStreetJournal(y) & FinancialMetrics(z)) -> ReadsRegularly(x,y,z))", "(ReadsWallStreetJournal(Matt) & ReadsOtherNewspapers(Matt) & KeepsUpdatedOnFinancialMetrics(Matt))", "all x y.((Matt(x) & WallStreetJournal(y)) -> ReadsRegularly(x,y))", "all x y.((Matt(x) & WallStreetJournal(y) & OtherNewspapers(x)) -> ReadsRegularly(x,y))", "(Reads(Matt,WallStreetJournal) & Reads(Matt,WallStreetJournal) & Reads(Matt,WallStreetJournal))", "all x y.((Matt(x) & WallStreetJournal(y) & OtherNewspapers(x)) -> ReadsRegularlyToKeepUpdatedOnFinancialMetrics(x,y))", "all x.((Matt(x) & WallStreetJournal(x) & OtherNewspapers(x)) -> ReadsRegularlyToKeepUpdatedOnFinancialMetrics(x))", "(Reads(Matt,WallStreetJournal) & Reads(Matt,WallStreetJournal) & Reads(Matt,WallStreetJournal) & Reads(Matt,WallStreetJournal))", "(Reads(Matt,WallStreetJournal) & Reads(Matt,WallStreetJournal) & Reads(Matt,WallStreetJournal) & Reads(Matt,WallStreetJournal)))", "(Reads(Matt,WallStreetJournal) & Reads(Matt,WallStreetJournal) & Reads(Matt,WallStreetJournal) & Reads(Matt,WallStreetJournal) & Reads(Matt,WallStreetJournal)))", "(Reads(Matt,WallStreetJournal) & Reads(Matt,WallStreetJournal) & Reads(Matt,WallStreetJournal) & Reads(Matt,WallStreetJournal) & Reads(Matt,WallStreetJournal))", "(Reads(Matt,WallStreetJournal) & Reads(Matt,WallStreetJournal) & Reads(Matt,WallStreetJournal)) -> KeepsUpdatedOnFinancialMetrics(Matt,WallStreetJournal))", "all x.((Matt(x) & WallStreetJournal(x) & OtherNewspapers(x)) -> ReadsRegularly(x))"]}
{"id": "folio_train_800", "nl": "If Matt is either both a person who has a lot of disposable income to spend and invests in the public stock market regularly, or neither has a lot of disposable income to spend nor invests in the public stock market regularly, then Matt neither visits the Las Vegas Strip regularly nor reads the Wall Street Journal and other newspapers regularly to keep updated on the financial metrics.", "fol": "(((HasDisposableIncome(Matt) & InvestInPublicStockMarketRegularly(Matt)) | (-HasDisposableIncome(Matt) & -InvestInPublicStockMarketRegularly(Matt))) -> (-VisitLasVegasStripRegularly(Matt) & -ReadsNewspapersRegularly(Matt)))", "prediction": ["all x.((Person(x) & (LotOfDisposableIncome(x) & RegularInvestment(x)) | (-LotOfDisposableIncome(x) & RegularInvestment(x)))) -> (-VisitsLasVegasStripRegularly(x) & -ReadsWallStreetJournalAndOtherNewspapersRegularly(x)))", "all x.((Person(x) & ((LotOfDisposableIncome(x) & RegularInvestment(x)) | (-LotOfDisposableIncome(x) & RegularInvestment(x)))) -> (-VisitsLasVegasStripRegularly(x) & -ReadsWallStreetJournalAndOtherNewspapersRegularly(x))))", "all x.((Person(x) & ((LotOfDisposableIncome(x) & RegularInvestment(x)) | (-LotOfDisposableIncome(x) & RegularInvestment(x)))) -> (-VisitsLasVegasStripRegularly(x) & -ReadsWallStreetJournalAndOtherNewspapersRegularly(x))))", "all x.((Person(x) & ((LotOfDisposableIncome(x) & RegularInvestment(x)) | (-LotOfDisposableIncome(x) & RegularInvestment(x)))) -> (-VisitsLasVegasStripRegularly(x) & -ReadsWallStreetJournalAndOtherNewspapersRegularly(x)))", "all x.((Person(x) & ((LotOfDisposableIncome(x) & RegularStockMarketInvestment(x)) | (-LotOfDisposableIncome(x) & RegularStockMarketInvestment(x)))) -> (-VisitsLasVegasStripRegularly(x) & -ReadsWallStreetJournalAndOthersRegularly(x))))", "all x.((Person(x) & ((LotOfDisposableIncome(x) & InvestsInPublicStockMarket(x)) | (-LotOfDisposableIncome(x) & InvestsInPublicStockMarket(x)))) -> -(VisitsLasVegasStripRegularly(x) | ReadsWallStreetJournalRegularly(x))))", "all x.((Person(x) & (LotOfDisposableIncome(x) & InvestsInPublicStockMarket(x)) | (-LotOfDisposableIncome(x) & InvestsInPublicStockMarket(x)))) -> (-VisitsLasVegasStripRegularly(x) & -ReadsWallStreetJournal(x)))", "all x.((Person(x) & ((LotOfDisposableIncome(x) & RegularInvestment(x)) | (-LotOfDisposableIncome(x) & RegularInvestment(x)))) -> (-VisitsLasVegasStripRegularly(x) & -ReadsWallStreetJournalAndOtherNewspapersRegularly(x)))", "all x.((Person(x) & ((LotOfDisposableIncome(x) & RegularStockMarketInvestment(x)) | (-LotOfDisposableIncome(x) & RegularStockMarketInvestment(x)))) -> (-VisitsLasVegasStripRegularly(x) & -ReadsWallStreetJournalAndOtherPressesRegularly(x)))", "all x.((Person(x) & ((LotOfDisposableIncome(x) & RegularStockMarketInvestment(x)) | (-LotOfDisposableIncome(x) & RegularStockMarketInvestment(x)))) -> (-VisitsLasVegasStripRegularly(x) & -ReadsWallStreetJournalAndOthersRegularly(x)))", "all x.((Person(x) & ((LotOfDisposableIncome(x) & RegularInvestment(x)) | (-LotOfDisposableIncome(x) & RegularInvestment(x)))) -> (-VisitsLasVegasStripRegularly(x) | ReadsWallStreetJournalAndOtherNewspapersRegularly(x))))", "all x.((Person(x) & ((LotOfDisposableIncome(x) & RegularStockMarketInvestment(x)) | (-LotOfDisposableIncome(x) & RegularStockMarketInvestment(x)))) -> (-VisitsLasVegasStripRegularly(x) & -ReadsWallStreetJournalAndOtherPressesRegularly(x))))", "all x.((Person(x) & ((LotOfDisposableIncome(x) & InvestsInPublicStockMarket(x)) | (-LotOfDisposableIncome(x) & InvestsInPublicStockMarket(x)))) -> (-VisitsLasVegasStripRegularly(x) & -ReadsWallStreetJournal(x)))", "all x.((Person(x) & ((LotOfDisposableIncome(x) & InvestsInPublicStockMarket(x)) | (-LotOfDisposableIncome(x) & InvestsInPublicStockMarket(x)))) -> -(VisitsLasVegasStripRegularly(x) | ReadsWallStreetJournalRegularly(x)))", "all x.((Person(x) & ((LotOfDisposableIncome(x) & InvestsInPublicStockMarket(x)) | (-LotOfDisposableIncome(x) & InvestsInPublicStockMarket(x)))) -> (-VisitsLasVegasStripRegularly(x) & -ReadsWallStreetJournalAndOtherPressesRegularly(x)))", "all x.((Person(x) & (LotOfDisposableIncome(x) & RegularInvestment(x)) | (-LotOfDisposableIncome(x) & RegularInvestment(x)))) -> (-VisitsLasVegasStripRegularly(x) & -ReadsWallStreetJournalAndOtherNewspapersRegularly(x))))"]}
{"id": "folio_train_801", "nl": "If Matt is either a person who has a lot of disposable income to spend or reads the Wall Street Journal and other newspapers regularly, then Matt neither has a lot of disposable income to spend nor visits the Las Vegas Strip Regularly.", "fol": "((HasDisposableIncome(Matt) | ReadsNewspapersRegularly(Matt)) -> (-HasDisposableIncome(Matt) & -VisitLasVegasStripRegularly(Matt)))", "prediction": ["all x.((Person(x) & (HasDisposableIncome(x) | ReadsWallStreetJournalAndOtherNewspapers(x))) -> -(HasDisposableIncome(x) & VisitsLasVegasStripRegularly(x)))", "all x.((Person(x) & (HasLotOfDisposableIncome(x) | ReadsWallStreetJournalAndOtherNewspapers(x))) -> -(HasLotOfDisposableIncome(x) & VisitsLasVegasStripRegularly(x)))", "all x.((Person(x) & (HasLotOfDisposableIncome(x) | ReadsWallStreetJournalAndOtherNewspapers(x))) -> (-HasLotOfDisposableIncome(x) & -VisitsLasVegasStripRegularly(x)))", "all x.((Person(x) & (HasMuchDisposableIncome(x) | ReadsWallStreetJournalAndOtherNewspapers(x))) -> -(HasMuchDisposableIncome(x) & VisitsLasVegasStripRegularly(x)))", "all x.((Person(x) & (LotOfDisposableIncome(x) | ReadsWallStreetJournalAndOtherNewspapers(x))) -> -(LotOfDisposableIncome(x) & VisitsLasVegasStripRegularly(x)))", "all x.((Person(x) & (LotOfDisposableIncome(x) | ReadsWallStreetJournalAndOtherNewspapers(x))) -> (-LotOfDisposableIncome(x) & -VisitsLasVegasStripRegularly(x)))", "all x.((Person(x) & (HasDisposableIncome(x) | ReadsWallStreetJournalAndOtherNewspapers(x))) -> (-HasDisposableIncome(x) & -VisitsLasVegasStripRegularly(x)))", "all x.((Person(x) & (LotOfDisposableIncome(x) | ReadsWallStreetJournalAndOtherNewspapersRegularly(x))) -> -(LotOfDisposableIncome(x) & VisitsLasVegasStripRegularly(x)))", "all x.((Person(x) & (HasLotOfDisposableIncome(x) | ReadsWallStreetJournalAndOtherNewspapersRegularly(x))) -> -(HasLotOfDisposableIncome(x) & VisitsLasVegasStripRegularly(x)))", "all x.((Person(x) & (HasDisposableIncome(x) | ReadsWallStreetJournal(x) & ReadsWallStreetJournal(x))) -> -(HasDisposableIncome(x) & VisitsLasVegasStripRegularly(x)))", "all x.((Person(x) & (HasMuchDisposableIncome(x) | ReadsWallStreetJournalAndOtherNewspapers(x))) -> (-HasMuchDisposableIncome(x) & -VisitsLasVegasStripRegularly(x)))", "all x.((Person(x) & (LotOfDisposableIncome(x) | ReadsWallStreetJournalAndOtherNewspapersRegularly(x))) -> (-LotOfDisposableIncome(x) & -VisitsLasVegasStripRegularly(x)))", "all x.((Person(x) & (HasLotOfDisposableIncome(x) | ReadsWallStreetJournalAndOtherNewspapers(x))) -> -(HasLotOfDisposableIncome(x) & VisitsLasVegasStripRegularly(x))))", "all x.((Person(x) & (HasMuchDisposableIncome(x) | ReadsWallStreetJournalAndOtherNewspapersRegularly(x))) -> -(HasMuchDisposableIncome(x) & VisitsLasVegasStripRegularly(x)))", "all x.((Person(x) & (HasMuchDisposableIncome(x) | ReadsWallStreetJournal(x) & ReadsWallStreetJournal(x))) -> -(HasMuchDisposableIncome(x) & VisitsLasVegasStripRegularly(x)))", "all x.((Person(x) & (LotOfDisposableIncome(x) | ReadsWallStreetJournalAndOtherNewspapers(x))) -> -(LotOfDisposableIncome(x) & VisitsLasVegasStripRegularly(x))))"]}
{"id": "folio_train_802", "nl": "All students learning piano can strike the right notes. ", "fol": "all x.((IsStudent(x) & LearningPiano(x)) -> CanStrikeRightNotes(x))", "prediction": ["all x.(Student(x) -> CanStrikeRightNotes(x))", "all x.(Student(x) -> CanStrikeRightNotes(x))", "all x.((Student(x) & LearningPiano(x)) -> CanStrikeRightNotes(x))", "all x.(Student(x) & LearnsPiano(x) -> CanStrikeRightNotes(x))", "all x.((Student(x) & LearnsPiano(x)) -> CanStrikeRightNotes(x))", "all x.(Student(x) & LearningPiano(x) -> CanStrikeRightNotes(x))", "all x.(StudentLearningPiano(x) -> CanStrikeRightNotes(x))", "all x.((Student(x) & LearningPiano(x)) -> CanStrikeRightNotes(x))", "all x y.((Student(x) & Piano(y)) -> CanStrikeRightNotes(x,y))", "all x.(Student(x) & LearnsPiano(x) -> CanStrikeRightNotes(x))", "all x.((Student(x) & LearnsPiano(x)) -> CanStrikeRightNotes(x))", "all x y.((Student(x) & Piano(y) & Learns(x,y)) -> CanStrikeRightNotes(x,y))", "all x.((Student(x) & LearningPiano(x)) -> StrikesRightNotes(x))", "all x.(Student(x) & LearningPiano(x) -> CanStrikeRightNotes(x))", "all x y.((Student(x) & Piano(y) & Learns(x,y)) -> CanStrikeRightNotes(x))", "all x y.((Student(x) & Piano(y) & Learns(x,y)) -> CanStrikeRightNotes(x,y))"]}
{"id": "folio_train_803", "nl": "All students who can strike the right note can get the rhythms right. ", "fol": "all x.((IsStudent(x) & CanStrikeRightNotes(x)) -> CanGetRhythmRight(x))", "prediction": ["all x.((Student(x) & CanStrikeRightNote(x)) -> CanGetRhythmsRight(x))", "all x.((Student(x) & StrikesRightNote(x)) -> GetsRhythmsRight(x))", "all x.((Student(x) & CanStrikeRightNote(x)) -> GetRhythmsRight(x))", "all x.((Student(x) & StrikeRightNote(x)) -> GetRhythmsRight(x))", "all x.((Student(x) & CanStrikeRightNote(x)) -> CanGetRhythmsRight(x))", "all x.((Student(x) & CanStrikeRightNote(x)) -> GetRhythmsRight(x))", "all x.((Student(x) & StrikesRightNote(x)) -> GetRhythmsRight(x))", "all x.((Student(x) & StrikesRightNote(x)) -> CanGetRhythmsRight(x))", "all x.((Student(x) & CanStrikeRightNote(x)) -> CanHaveRhythmsRight(x))", "all x.((Student(x) & CanStrikeRightNote(x)) -> CanGainRhythmsRight(x))", "all x.((Student(x) & StrikeRightNote(x)) -> CanGetRhythmsRight(x))", "all x.((Student(x) & CanStrikeRightNote(x)) -> CanGiveRhythmsRight(x))", "all x.((Student(x) & CanS strikeRightNote(x)) -> CanGetRhythmsRight(x))", "all x.((Student(x) & StrikesRightNote(x)) -> RightRhythms(x))", "all x.((Student(x) & CanStrikeRightNote(x)) -> RightRhythms(x))", "all x.((Student(x) & CanStrikeRightNote(x)) -> CanGiveRhythmsRight(x))"]}
{"id": "folio_train_804", "nl": "If a student can get the rhythms right, he will start working on coordination between the left and the right hands. ", "fol": "all x.((IsStudent(x) & CanGetRhythmRight(x)) -> StartsCoordination(x))", "prediction": ["all x.((Student(x) & GetsRhythmsRight(x)) -> WorksOnCoordination(x,left,right))", "all x.((Student(x) & GetsRhythmsRight(x)) -> StartsWorkingOnCoordination(x,left,right))", "all x.((Student(x) & CanGetRhythmsRight(x)) -> WorksOnCoordination(x,left,right))", "all x.((Student(x) & GetsRhythmsRight(x)) -> Coordination(x,left,right))", "all x.((Student(x) & GetsRhythmsRight(x)) -> WorkingOnCoordination(x,left,right))", "all x.((Student(x) & GetsRhythmsRight(x)) -> (WorksOnCoordination(x,left,right)))", "all x.((Student(x) & CanGetRhythmsRight(x)) -> WorkingOnCoordination(x,left,right))", "all x.((Student(x) & GetsRhythmsRight(x)) -> WorkOnCoordination(x,left,right))", "all x.((Student(x) & CanGetRhythmsRight(x)) -> Coordination(x,left,right))", "all x.((Student(x) & GetsRhythmsRight(x)) -> WorksOnCoordination(x))", "all x.((Student(x) & CanGetRhythmsRight(x)) -> StartsWorkingOnCoordination(x,left,right))", "all x.((Student(x) & CanGetRhythmsRight(x)) -> StartWorkingOnCoordination(x,left,right))", "all x.((Student(x) & GetsRhythmsRight(x)) -> StartsWorkingOnCoordination(x))", "all x.((Student(x) & GetRhythmsRight(x)) -> WorksOnCoordination(x,left,right))", "all x.((Student(x) & GetsRhythmsRight(x)) -> CoordinatesHands(x,left,right))", "all x.((Student(x) & GetRhythmsRight(x)) -> Coordination(x,left,right))"]}
{"id": "folio_train_805", "nl": "Some students who start working on coordination between the left and the right hands become good at it. The other students find it challenging. ", "fol": "all x.((((IsStudent(x) & StartsCoordination(x)) -> IsGoodAtCoordination(x)) & -FindsCoordinationChallenging(x)) | (-((IsStudent(x) & StartsCoordination(x)) -> IsGoodAtCoordination(x)) & FindsCoordinationChallenging(x)))", "prediction": ["(exists x.(Student(x) & WorksOnCoordination(x,left) & WorksOnCoordination(x,right)) & exists y.(Student(y) & WorksOnCoordination(y,left)) & WorksOnCoordination(y,right)))", "(exists x.(Student(x) & WorksOnCoordination(x,left) & WorksOnCoordination(x,right)) & exists y.(Student(y) & WorksOnCoordination(y,left))) & exists z.(Student(z) & WorksOnCoordination(z,right)))", "all x y.((Student(x) & Student(y) & StartsWorkingOnCoordination(x,left) & StartsWorkingOnCoordination(y,right)) -> (GoodAtCoordination(x) | ChallengingAtCoordination(y)))", "(exists x.(Student(x) & WorksOnCoordination(x,left) & WorksOnCoordination(x,right)) & exists y.(Student(y) & WorksOnCoordination(y,left) & WorksOnCoordination(y,right)))", "(exists x.(Student(x) & WorksOnCoordination(x,left) & WorksOnCoordination(x,right)) & exists y.(Student(y) & WorksOnCoordination(y,left))) & exists z.(Student(z) & WorksOnCoordination(z,right)) & WorksOnCoordination(z,left)))", "(exists x.(Student(x) & StartsWorkingOnCoordination(x,left) & StartsWorkingOnCoordination(x,right)) & exists y.(Student(y) & GoodAtCoordination(y,left)) & exists z.(Student(z) & GoodAtCoordination(z,right))))", "(exists x.(Student(x) & WorksOnCoordination(x,left) & WorksOnCoordination(x,right)) & exists y.(Student(y) & WorksOnCoordination(y,left))) & exists z.(Student(z) & WorksOnCoordination(z,right))) & exists w.(Student(w) & WorksOnCoordination(w,left)))", "(exists x.(Student(x) & StartsWorkingOnCoordination(x,left) & StartsWorkingOnCoordination(x,right)) & exists y.(Student(y) & GoodAtCoordination(y,left))) & exists z.(Student(z) & GoodAtCoordination(z,right)))", "(exists x.(Student(x) & WorksOnCoordination(x,left) & WorksOnCoordination(x,right)) & exists y.(Student(y) & WorksOnCoordination(y,left))) & exists z.(Student(z) & WorksOnCoordination(z,right)) & WorksOnCoordination(y,z)))", "all x y.((Student(x) & Student(y) & StartsWorkingOnCoordination(x,left) & StartsWorkingOnCoordination(y,right)) -> (GoodAtCoordination(x) & Challenging(y)))", "all x y.((Student(x) & Student(y) & StartsWorkingOnCoordination(x,left) & StartsWorkingOnCoordination(y,right)) -> (GoodAtCoordination(x) & ChallengingAtCoordination(y)))", "all x y.((Student(x) & Student(y) & StartsWorkingOnCoordination(x,left,right)) -> GoodAtCoordination(x))", "all x y.((Student(x) & Student(y) & StartsWorkingOnCoordination(x,left,right)) -> GoodAt(x,y))", "(exists x.(Student(x) & WorksOnCoordination(x,left) & WorksOnCoordination(x,right)) & exists y.(Student(y) & WorksOnCoordination(y,left))) & exists z.(Student(z) & WorksOnCoordination(z,right)) & WorksOnCoordination(x,z)))", "all x y.((Student(x) & Student(y) & StartsWorkingOnCoordination(x,left) & StartsWorkingOnCoordination(y,right)) -> GoodAt(x,y))", "(exists x.(Student(x) & WorksOnCoordination(x,left) & WorksOnCoordination(x,right)) & exists y.(Student(y) & WorksOnCoordination(x,left)) & WorksOnCoordination(y,right)))"]}
{"id": "folio_train_806", "nl": "If John can strike the right notes, get the rhythms right and is good at coordination between right and left hands, then he puts emotions into his playing. ", "fol": "((CanStrikeRightNotes(John) & CanGetRhythmRight(John) & IsGoodAtCoordination(John)) -> ExpressesEmotionInPlaying(John))", "prediction": ["all x.((John(x) & StrikesRightNotes(x) & GetsRhythmsRight(x) & GoodAtCoordination(x)) -> PutsEmotionsIntoPlaying(x))", "all x.((John(x) & StrikesRightNotes(x) & GetsRhythmsRight(x) & GoodAtCoordination(x,RightAndLeftHands)) -> PutsEmotionsIntoPlaying(x))", "all x.((John(x) & StrikesRightNotes(x) & GetsRhythmsRight(x) & GoodCoordination(x)) -> PutsEmotionsIntoPlaying(x))", "all x.((John(x) & StrikesRightNotes(x) & GetsRhythmsRight(x) & GoodAtCoordination(x) & RightAndLeftHands(x)) -> PutsEmotionsIntoPlaying(x))", "all x.((John(x) & StrikesRightNotes(x) & GetsRhythmsRight(x) & GoodCoordination(x,RightAndLeftHands)) -> PutsEmotionsIntoPlaying(x))", "all x.((John(x) & StrikesRightNotes(x) & GetsRhythmsRight(x) & GoodAtCoordination(x,right,left)) -> PutsEmotionsIntoPlaying(x))", "all x.((John(x) & StrikesRightNotes(x) & GetsRhythmsRight(x) & GoodCoordination(x) & RightAndLeftHands(x)) -> PutsEmotionsIntoPlaying(x))", "all x.((John(x) & StrikesRightNotes(x) & GetsRhythmsRight(x) & GoodCoordinationBetweenRightAndLeftHands(x)) -> PutsEmotionsIntoPlaying(x))", "all x.((John(x) & StrikesRightNotes(x) & GetsRhythmsRight(x) & GoodAtCoordinationBetweenRightAndLeftHands(x)) -> PutsEmotionsIntoPlaying(x))", "all x.((John(x) & StrikesRightNotes(x) & GetsRhythmsRight(x) & GoodCoordination(x,right,left)) -> PutsEmotionsIntoPlaying(x))", "all x.((John(x) & StrikesRightNotes(x) & GetsRhythmsRight(x) & GoodAtCoordination(x)) -> PutsEmotionsInPlaying(x))", "all x.((John(x) & StrikesRightNotes(x) & GetsRhythmsRight(x) & Coordination(x)) -> PutsEmotionsIntoPlaying(x))", "all x.((John(x) & StrikesRightNotes(x) & RightRhythms(x) & GoodCoordination(x)) -> PutsEmotionsIntoPlaying(x))", "all x y.((John(x) & StrikesRightNotes(x) & GetsRhythmsRight(x) & GoodAtCoordination(x,y)) -> PutsEmotionsIntoPlaying(x))", "all x.((John(x) & StrikesRightNotes(x) & GetRhythmsRight(x) & GoodAtCoordination(x)) -> PutsEmotionsIntoPlaying(x))", "all x.((John(x) & StrikesRightNotes(x) & GetRhythmsRight(x) & GoodCoordination(x)) -> PutsEmotionsIntoPlaying(x))"]}
{"id": "folio_train_807", "nl": "John is a student learning piano. ", "fol": "(IsStudent(John) & LearningPiano(John))", "prediction": ["all x.(Student(x) & LearningPiano(x))", "all x.(StudentLearningPiano(x) -> John(x))", "(StudentLearningPiano(John))", "all x.((Student(x) & LearningPiano(x)) -> John(x))", "all x.(Student(x) & LearnsPiano(x))", "all x.(Student(x) -> LearningPiano(x))", "all x.((Student(x) & LearnsPiano(x)) -> LearnsPiano(x))", "all x.((Student(x) & LearnsPiano(x)) -> John(x))", "all x.(Student(x) -> LearnsPiano(x))", "(Student(John) & LearningPiano(John))", "(Student(John) & LearnsPiano(John))", "(StudentLearningPiano(John) & -StudentLearningPiano(John))", "all x.((Student(x) & LearningPiano(x)) -> JohnLearnsPiano(x))", "all x.((Student(x) & LearnsPiano(x)) -> JohnLearnsPiano(x))", "all x.((Student(x) & LearnsPiano(x)) -> LearningPiano(x))", "all x.(John(x) -> LearningPiano(x))"]}
{"id": "folio_train_808", "nl": "John does not find coordination between the left and the right hands challenging. ", "fol": "-FindsCoordinationChallenging(John)", "prediction": ["all x.((John(x) & LeftHand(x) & RightHand(x)) -> -CompellingCoordination(x))", "all x.((John(x) & LeftHands(x) & RightHands(x)) -> -CompellingCoordination(x))", "all x.((John(x) & LeftHandCoordination(x) & RightHandCoordination(x)) -> -Challenging(x))", "all x.((John(x) & LeftHand(x) & RightHand(x)) -> -ChallengingCoordination(x))", "all x y.((John(x) & LeftHand(y) & RightHand(y)) -> -CompellingCoordination(x,y))", "all x.((John(x) & LeftHandCoordination(x) & RightHandCoordination(x)) -> -Compelling(x))", "all x.((John(x) & LeftHands(x) & RightHands(x)) -> -ChallengingCoordination(x))", "all x.((John(x) & LeftHand(x) & RightHand(x)) -> -ComplexCoordination(x))", "all x.((John(x) & LeftHands(x) & RightHands(x)) -> -Challenging(x))", "John -(FindsCoordination(John,LeftHands) & FindsCoordination(John,RightHands)))", "all x.((John(x) & LeftHands(x) & RightHands(x)) -> -ComplexCoordination(x))", "all x.((John(x) & LeftHands(x) & RightHands(x)) -> -Compelling(x))", "all x.((John(x) & LeftHandCoordination(x) & RightHandCoordination(x)) -> -Childing(x))", "all x.((John(x) & LeftHand(x) & RightHand(x)) -> -Challenging(x))", "all x.((John(x) & LeftHandCoordination(x) & RightHandCoordination(x)) -> -Chancesome(x))", "-(FindsCoordination(John,LeftHands) & FindsCoordination(John,RightHands)))"]}
{"id": "folio_train_809", "nl": "John can get the rhythms right.", "fol": "CanGetRhythmRight(John)", "prediction": ["all x.(John(x) -> CanGetRhythmsRight(x))", "all x.((John(x) & RightRhythms(x)) -> CanGet(x,y))", "all x.(John(x) -> GetsRhythmsRight(x))", "all x y.((John(x) & Rhythm(y)) -> CanGetRight(x,y))", "all x y.((John(x) & Rhythms(y)) -> CanGetRight(x,y))", "all x.(John(x) -> GetRhythmsRight(x))", "all x y.((John(x) & RightRhythms(y)) -> CanGet(x,y))", "all x.((John(x) & RightRhythms(x)) -> CanGiving(x,y))", "all x.((John(x) & RightRhythms(x)) -> CanGet(x,Rhythms))", "All x.(John(x) -> CanGetRhythmsRight(x))", "all x.((John(x) & RightRhythms(x)) -> CanGetRightRhythms(x))", "all x.((John(x) & RightRhythms(x)) -> CanGive(x,y))", "all x.((John(x) & RightRhythm(x)) -> CanGet(x,y))", "all x.(John(x) -> (GetRhythmsRight(x) | GetRhythmsRight(x)))", "all x y.((John(x) & Rhythm(y)) -> CanGet(x,y))", "all x y.((John(x) & Rhythm(y)) -> GetsRight(x,y))"]}
{"id": "folio_train_810", "nl": "John does not put emotions into his playing.", "fol": "-ExpressesEmotionInPlaying(John)", "prediction": ["all x.(John(x) -> -PutsEmotionsIntoPlaying(x))", "all x.((John(x) & -PutsEmotionsIntoPlaying(x)) -> -PutsEmotionsIntoPlaying(x))", "all x y.((John(x) & Playing(y)) -> -PutsEmotionsInto(x,y))", "All x.(John(x) -> -PutsEmotionsIntoPlaying(x))", "all x y.((John(x) & Playing(y)) -> -PutsEmotionsIntoPlaying(x,y))", "all x.((John(x) & Playing(x)) -> -PutsEmotionsIntoPlaying(x))", "all x.((John(x) & Playing(x)) -> -PutsEmotionsInto(x,y))", "(PutsEmotionsIntoPlaying(John) | -PutsEmotionsIntoPlaying(John)))", "(-PutsEmotionsIntoPlaying(John))", "all x.((John(x) & -PutsEmotionsInPlaying(x)) -> -PutsEmotionsIntoPlaying(x))", "all x.((John(x) & -PutsEmotionsInPlaying(x)) -> -PutsEmotionsInPlaying(x))", "all x.(Jon(x) -> -PutsEmotionsIntoPlaying(x))", "-PutsEmotionsIntoPlaying(John)", "John -PutsEmotionsIntoPlaying(John))", "all x y.((John(x) & Playing(y)) -> -PutsEmotionsIn(x,y))", "all x.((John(x) & -PutsEmotionsIntoPlaying(x)) -> -PlaysEmotionsIntoPlaying(x))"]}
{"id": "folio_train_811", "nl": "Barbara Ann Marshall is a former swimmer and former world record-holder.", "fol": "(IsFormerSwimmer(Barbaraannmarshall) & IsFormerWorldRecordHolder(Barbaraannmarshall))", "prediction": ["all x.(Marshall(x) -> (Ex-Swimmer(x) & FormerWorldRecordHolder(x)))", "all x.(Marshall(x) -> (Ex-Swimmer(x) & WorldRecordHolder(x)))", "all x.(Marshall(x) -> (Ex-Swimmer(x) & Ex-WorldRecordHolder(x)))", "all x.(Marshall(x) -> (Swimmer(x) & WorldRecordHolder(x)))", "all x.((Swimmer(x) & WorldRecordHolder(x)) -> BarbaraAnnMarshall(x))", "(Ex-Swimmer(BarbaraAnnMarshall) & FormerWorldRecordHolder(BarbaraAnnMarshall))", "all x.(Marshall(x) -> (Ex-Swimmer(x) & FormerWorldRecordHolder(x)))", "All x.(Marshall(x) -> (Ex-Swimmer(x) & FormerWorldRecordHolder(x)))", "all x.(Marshall(x) -> (Ex-Swimmer(x) & WorldRecordHolder(x)))", "All x.(Marshall(x) -> (Ex-Swimmer(x) & WorldRecordHolder(x)))", "all x.((BarrassAnnMarshall(x) & FormerSwimmer(x) & FormerWorldRecordHolder(x)) -> FormerSwimmerAndWorldRecordHolder(x))", "all x.((BarrassAnnMarshall(x) & FormerSwimmer(x) & FormerWorldRecordHolder(x)) -> FormerSwimmerAndRecordHolder(x))", "(Ex-Swimmer(BarbaraAnnMarshall) & WorldRecordHolder(BarbaraAnnMarshall))", "all x.((BarrassAnnMarshall(x) & FormerSwimmer(x) & FormerWorldRecordHolder(x)) -> BarbaraAnnMarshall(x))", "Barbara AnnMarshall (exists x.(Swimmer(x) & FormerWorldRecordHolder(x)))", "all x.((BarbaraAnnMarshall(x) & FormerSwimmer(x) & FormerWorldRecordHolder(x)) -> FormerSwimmerAndRecordHolder(x))"]}
{"id": "folio_train_812", "nl": "Barbara Ann Marshall participated in the 1972 Summer Olympics.", "fol": "ParticipatedInEvent(Barbaraannmarshall,Summer1972olympics)", "prediction": ["Barbara AnnMarshall ParticipatedInSummerOlympics(Marshall,72)", "All x.(Marshall(x) -> ParticipatedInSummerOlympics(x,72))", "all x y.((Marshall(x) & SummerOlympics(y)) -> ParticipatedIn(x,y))", "all x.(Marshall(x) -> ParticipatedInSummerOlympics(x,72))", "Barbara AnnMarshallParticipatedInSummerOlympics(Marshall,72)", "Barbara AnnMarshall participated in SummerOlympics(Marshall,72)", "all x y.((Marshall(x) & SummerOlympics(y) & ParticipatedIn(x,y)) -> BarbaraAnn(x))", "All x.(Marshall(x) -> ParticipatedInSummerOlympics(x, 1972))", "all x.(Marshall(x) -> ParticipatedInSummerOlympics(x, 1972))", "all x y.((Marshall(x) & SummerOlympics(y) & ParticipatedIn(x,y)) -> BarbaraAnn(x,y))", "all x y.((Marshall(x) & SummerOlympics(y) & BarbaraAnn(x)) -> ParticipatedIn(x,y))", "(ParticipatedInSummerOlympics(Marshall,72))", "all x y.((Marshall(x) & SummerOlympics(y) & BarbaraAnn(x,y)) -> ParticipatedIn(x,y))", "Barbara AnnMarshall participated in the 1972 SummerOlympics.", "all x y.((Marshall(x) & SummerOlympics(y) & ParticipatedIn(x,y)) -> ParticipatedIn(x,y))", "all x y.((Marshall(x) & SummerOlympics(y) & 1972(x)) -> ParticipatedIn(x,y))"]}
{"id": "folio_train_813", "nl": "Barbara Ann Marshall's home country is the United States.", "fol": "HasHomeCountry(Barbaraannmarshall,Unitedstates)", "prediction": ["(HomeCountry(Marshall,BarbaraAnn) & UnitedStates(Marshall,BarbaraAnn))", "(HomeCountry(BarbaraAnnMarshall) & UnitedStates(Marshall))", "(HomeCountry(Marshall,Barbara) & UnitedStates(Marshall,Barbara))", "All x.(Marshall(x) -> UnitedStates(x))", "All x.(Marshall(x) -> HomeCountry(x,UnitedStates))", "(HomeCountry(Marshall,BarbaraAnn) | UnitedStates(Marshall,BarbaraAnn)))", "all x.(Marshall(x) -> HomeCountry(x,UnitedStates))", "(HomeCountry(BarbaraAnnMarshall) -> UnitedStates(Marshall))", "(HomeCountry(Marshall,BarbaraAnn) & UnitedStates(Marshall,Barbara))", "(HomeCountry(BarbaraAnnMarshall) -> UnitedStates(Marshall))", "(HomeCountry(Marshall,BarbaraAnn) & UnitedStates(Marshall))", "Barbara AnnMarshallsHomeCountry(x) -> UnitedStates(x))", "all x.(Marshall(x) -> UnitedStates(x))", "All x.(Marshall(x) -> HomeCountry(x,USA))", "(HomeCountry(Marshall,Barbara) & UnitedStates(Marshall))", "all x.(HomeCountry(x) -> UnitedStates(x))"]}
{"id": "folio_train_814", "nl": "All people who compete in the 1972 Summer Olympics represent their home country.", "fol": "all x.(exists y.(ParticipatedInEvent(x,Summer1972olympics) & HasHomeCountry(x,y)) -> RepresentsCountry(x,y))", "prediction": ["all x.((Person(x) & CompetesInSummerOlympics(x,72)) -> RepresentsHomeCountry(x))", "all x.(CompetesInSummerOlympics(x,72) -> RepresentsHomeCountry(x))", "all x.((Person(x) & CompetesInSummerOlympics(x, 1972)) -> RepresentsHomeCountry(x))", "all x y.((Person(x) & CompetesInSummerOlympics(x,y) & 1972(y)) -> RepresentsHomeCountry(x,y))", "all x.((Person(x) & CompetesInSummerOlympics(x) & 1972SummerOlympics(x)) -> RepresentsHomeCountry(x))", "all x.(CompetesInSummerOlympics(x,72) -> RepresentsHomeCountry(x))", "all x.(CompetesInSummerOlympics(x, 1972) -> RepresentsHomeCountry(x))", "all x.((Person(x) & CompetesInSummerOlympics(x) & 1972(x)) -> RepresentsHomeCountry(x))", "all x y.((Person(x) & CompetesInSummerOlympics(x,y) & 1972(y)) -> RepresentsHomeCountry(x))", "all x y.((Person(x) & CompetesInSummerOlympics(x,y) & 1972) -> RepresentsHomeCountry(x,y))", "all x.(CompetesInSummerOlympics(x) -> RepresentsHomeCountry(x))", "all x y.((Person(x) & CompetesInSummerOlympics(x,y) & 1972) -> RepresentsHomeCountry(x))", "all x y.((Person(x) & CompetesInSummerOlympics(x,y)) -> RepresentsHomeCountry(x,y))", "all x y.((Person(x) & CompetesInSummerOlympics(x,y)) -> RepresentsHomeCountry(x))", "all x.(CompetesInSummerOlympics(x,y) -> RepresentsHomeCountry(x))", "all x.(CompetesInSummerOlympics(x, 1972) -> RepresentsHomeCountry(x))"]}
{"id": "folio_train_815", "nl": "Barbara Ann Marshall participated in the preliminary heat in the freestyle relay.", "fol": "ParticipatedInEvent(Barbaraannmarshall,Preliminaryheatfreestylerelay)", "prediction": ["all x y z.((Marshall(x) & PreliminaryHeat(y) & FreestyleRelay(z)) -> ParticipatedIn(x,y,z))", "all x y.((Marshall(x) & FreestyleRelay(y)) -> ParticipatedInPreliminaryHeat(x,y))", "all x.(Marshall(x) -> ParticipatedInPreliminaryHeat(x))", "all x y.((BarbaraAnnMarshall(x) & FreestyleRelay(y)) -> ParticipatedInPreliminaryHeat(x,y))", "all x y z.((Marshall(x) & PreliminaryHeat(y) & FreestyleRelay(z)) -> Participated(x,y,z))", "all x y z.((Marshall(x) & PreliminaryHeat(y) & Relay(z)) -> ParticipatedIn(x,y,z))", "all x y.((Marshall(x) & PreliminaryHeat(y)) -> ParticipatedIn(x,y))", "all x.(Marshall(x) -> ParticipatedInPreliminaryHeatInFreestyleRelay(x))", "all x.((Marshall(x) & ParticipatedInPreliminaryHeat(x)) -> FreestyleRelay(x))", "all x.((Marshall(x) & PreliminaryHeat(x)) -> ParticipatedInFreestyleRelay(x))", "all x y.((Marshall(x) & PreliminaryHeat(y)) -> ParticipatedInFreestyleRelay(x,y))", "all x y z.((Marshall(x) & PreliminaryHeat(y) & FreestyleRelay(z)) -> ParticipatesIn(x,y,z))", "all x.(MarshallMarshall(x) -> ParticipatedInPreliminaryHeat(x))", "all x y.((Marshall(x) & PreliminaryHeat(y) & FreestyleRelay(y)) -> ParticipatedIn(x,y))", "all x y z.((Marshall(x) & PreliminaryHeat(y) & FreestyleRelay(z)) -> ParticipatedIn(x,y))", "all x y.((Marshall(x) & FreestyleRelay(y)) -> ParticipatedInHeat(x,y))"]}
{"id": "folio_train_816", "nl": "Barbara Ann Marshall did not participate in the event final of the 1972 Summer Olympics freestyle relay.", "fol": "-ParticipatedInEvent(Barbaraannmarshall,Finalheatfreestylerelay)", "prediction": ["all x y.((Marshall(x) & SummerOlympics(y)) -> -ParticipatedInEventFinal(x,y))", "(-participatedInEventFinal(Marshall,72) & SummerOlympicsFreestyleRelay(Marshall,72))", "(-ParticipatedInEventFinal(Marshall,72) & SummerOlympicsFreestyleRelay(Marshall,72))", "all x.((Marshall(x) & SummerOlympics(x,72)) -> -ParticipatedInEventFinal(x,72))", "Barbara AnnMarshall -ParticipatedInEventFinal(Marshall,72) & SummerOlympicsFreestyleRelay(Marshall,72))", "all x.(Marshall(x) -> -ParticipatedInEventFinal(x,72))", "all x.((Marshall(x) & SummerOlympics(x)) -> -ParticipatedInEventFinal(x,72))", "all x y.((Marshall(x) & SummerOlympics(y)) -> -ParticipatedInFinal(x,y))", "(-participatedInEventFinal(Marshall,72) & SummerOlympics(Marshall,72))", "all x y.((Marshall(x) & SummerOlympics(y)) -> -ParticipatesInEventFinal(x,y))", "(-participatedInEventFinal(Marshall) & SummerOlympics(Marshall,72))", "all x.(Marshall(x) -> -ParticipatedInEventFinal(x,SummerOlympics,72))", "(-ParticipatedInEventFinal(Marshall,72) & SummerOlympics(Marshall,72))", "(-participatedInEventFinal(Marshall,72) & SummerOlympicsFreestyleRelay(Marshall))", "(-ParticipatedInEventFinal(Marshall) & SummerOlympics(Marshall,72))", "(-ParticipatedInEventFinal(Marshall,72) & SummerOlympicsFreestyleRelay(Marshall))"]}
{"id": "folio_train_817", "nl": "Only relay swimmers who participated in the event final received medals.", "fol": "all x.((IsRelaySwimmer(x) & -ParticipatedInEvent(x,Finalheatfreerelay)) <-> -ReceivedMedal(x,Medal))", "prediction": ["all x.((RelaySwimmer(x) & ParticipatedInEventFinal(x)) -> ReceivedMedals(x))", "all x y.((RelaySwimmer(x) & EventFinal(y) & ParticipatedIn(x,y)) -> ReceivedMedals(x))", "all x.((RelaySwimmer(x) & ParticipatedInEventFinal(x)) -> ReceivedMedal(x))", "all x y.((RelaySwimmer(x) & EventFinal(y) & ParticipatedIn(x,y)) -> ReceivedMedal(x))", "all x y.((RelaySwimmer(x) & ParticipatedInEventFinal(x,y)) -> ReceivedMedals(x))", "all x y z.((RelaySwimmer(x) & EventFinal(y) & ParticipatedIn(x,y)) -> ReceivedMedals(x))", "all x y.((RelaySwimmer(x) & RelaySwimmer(y) & ParticipatedInEventFinal(x,y)) -> ReceivedMedals(x))", "all x y.((RelaySwimmer(x) & EventFinal(y) & ParticipatedIn(x,y)) -> ReceivedMedals(x,y))", "all x y.((RelaySwimmer(x) & EventFinal(y)) -> ReceivedMedals(x,y))", "all x.((RelaySwimmer(x) & ParticipatedInEventFinal(x)) -> ReceivedMedals(x))", "all x y.((RelaySwimmer(x) & EventFinal(y) & Participated(x,y)) -> ReceivedMedals(x))", "all x y z.((RelaySwimmer(x) & EventFinal(y) & ParticipatedIn(x,y) & Medal(z)) -> Received(x,z))", "all x.((RelaySwimmer(x) & ParticipatedInEventFinal(x)) -> ReceivedMedals(x))", "all x y.((RelaySwimmer(x) & ParticipatedInEventFinal(x)) -> ReceivedMedals(x))", "all x y z.((RelaySwimmer(x) & EventFinal(y) & ParticipatedIn(x,y)) -> ReceivedMedals(x,y))", "all x y.((RelaySwimmer(x) & RelaySwimmer(y) & ParticipatedInEventFinal(y,x)) -> ReceivedMedals(x))"]}
{"id": "folio_train_818", "nl": "Barbara Ann Marshall did not receive medals.", "fol": "-Received(Barbaraannmarshall,Medal)", "prediction": ["all x.(Marshall(x) -> -ReceivesMedals(x))", "all x.(Marshall(x) -> -ReceivedMedals(x))", "All x.(Marshall(x) -> -ReceivesMedals(x))", "All x.(Marshall(x) -> -ReceivedMedals(x))", "all x.(Marshall(x) -> -ReceivedMedal(x))", "Barbara AnnMarshall -ReceivedMedals(Marshall)", "all x.(Marshall(x) -> -ReceivesMedal(x))", "Barbara AnnMarshall(Marshall) -ReceivedMedals(Marshall))", "(-ReceivedMedals(BarbaraAnnMarshall))", "(-ReceivedMedal(BarbaraAnnMarshall))", "(-ReceivesMedals(BarbaraAnnMarshall))", "All x.(Marshall(x) -> -ReceivedMedal(x))", "All x.(Marshall(x) -> -ReceivesMedal(x))", "Barbara AnnMarshall -ReceivedMedal(Marshall)", "Barbara AnnMarshall(Marshall) -ReceivesMedals(Marshall))", "(-ReceivedMedals(BarrassAnnMarshall))"]}
{"id": "folio_train_819", "nl": "Barbara Ann Marshall represented the United States in the 1972 Summer Olympics.", "fol": "(RepresentsCountry(Barbaraannmarshall,Unitedstates) & ParticipatedInEvent(Barbaraannmarshall,Summer1972olympics))", "prediction": ["Barbara AnnMarshall represented UnitedStatesInSummerOlympics(Marshall,72)", "all x y.((Marshall(x) & UnitedStates(y)) -> RepresentedInSummerOlympics(x,y))", "all x y z.((Marshall(x) & SummerOlympics(y) & SummerOlympics(z)) -> Represents(x,y,z))", "all x y.((Marshall(x) & UnitedState(y)) -> RepresentedInSummerOlympics(x,y))", "all x y.((Marshall(x) & UnitedStates(y)) -> RepresentsInSummerOlympics(x,y))", "all x y z.((Marshall(x) & SummerOlympics(y) & SummerOlympics(z)) -> Represented(x,y,z))", "all x y z.((Marshall(x) & SummerOlympics(y) & UnitedStates(z)) -> Represents(x,y,z))", "all x y.((Marshall(x) & SummerOlympics(y)) -> Represents(x,y))", "all x y.((Marshall(x) & SummerOlympics(y) & 1972(x)) -> Represents(x,y))", "all x y z.((Marshall(x) & UnitedStates(y) & SummerOlympics(z)) -> Represents(x,y,z))", "all x y z.((Marshall(x) & UnitedStates(y) & SummerOlympics(z)) -> Represented(x,y,z))", "all x y.((Marshall(x) & UnitedStates(y)) -> Represents(x,y))", "all x y.((Marshall(x) & SummerOlympics(y) & 1972(x,y)) -> Represents(x,y))", "all x y z.((Marshall(x) & SummerOlympics(y) & UnitedStates(z)) -> Represented(x,y,z))", "all x y.((Marshall(x) & UnitedStates(y)) -> Represented(x,y))", "Barbara AnnMarshall represented United StatesInSummerOlympics(Marshall,72)"]}
{"id": "folio_train_820", "nl": "A game is played with three stages: red stage, yellow stage, and green stage.", "fol": "exists x.(GamePlayer(x) & (GameStage(x,RedStage) | GameStage(x,YellowStage) | GameStage(x,GreenStage)))", "prediction": ["all x.(Game(x) -> (PlayedWithRedStage(x) & PlayedWithYellowStage(x) & PlayedWithGreenStage(x)))", "all x.(Game(x) -> (PlayedWith(x,red) & PlayedWith(x,yellow) & PlayedWith(x,green)))", "all x.(Game(x) -> (PlayedWith(x,RedStage) & PlayedWith(x,YellowStage) & PlayedWith(x,GreenStage)))", "all x.(Game(x) -> (PlayedWithRedStage(x) | PlayedWithYellowStage(x) | PlayedWithGreenStage(x)))", "all x.(Game(x) -> (PlayedWith(x,redStage) & PlayedWith(x,yellowStage) & PlayedWith(x,greenStage)))", "all x.(Game(x) -> (RedStage(x) | YellowStage(x) | GreenStage(x)))", "all x.(Game(x) -> (RedStage(x) & YellowStage(x) & GreenStage(x)))", "all x.(Game(x) -> (PlayedWith(x,redStage) | PlayedWith(x,yellowStage) | PlayedWith(x,greenStage)))", "all x y z.((Game(x) & Stage(y) & Stage(z)) -> (RedStage(x) | YellowStage(x) | GreenStage(z)))", "all x y z.((Game(x) & Stage(y) & Stage(z)) -> (Red(x) | Yellow(x) | Green(z)))", "all x.((Game(x) & RedStage(x) & YellowStage(x) & GreenStage(x)) -> PlayedWith(x,y))", "all x.(Game(x) -> (PlayedWith(x,red) | PlayedWith(x,yellow) | PlayedWith(x,green)))", "all x y z.((Game(x) & Stage(y) & Stage(z)) -> (RedStage(x) | YellowStage(x) | GreenStage(x)))", "all x y z.((Game(x) & Stage(y) & Stage(z)) -> (RedStage(x,y) | YellowStage(x,z) | GreenStage(x,z)))", "all x y z.((Game(x) & Stage(y) & Stage(z)) -> (PlayedWith(x,y) & PlayedWith(x,z)))", "all x.(Game(x) -> (RoseStage(x) | YellowStage(x) | GreenStage(x)))"]}
{"id": "folio_train_821", "nl": "Each player begins at the red stage.", "fol": "all x.(GamePlayer(x) -> GameStage(x,RedStage))", "prediction": ["all x.(Player(x) -> RedStage(x))", "all x y.((Player(x) & RedStage(y)) -> StartsAt(x,y))", "all x y.((Player(x) & RedStage(y)) -> BeginsAt(x,y))", "all x.(Player(x) -> StartsAtRedStage(x))", "all x y z.((Player(x) & RedStage(y) & RedStage(z)) -> BeginsAt(x,y,z))", "all x y z.((Player(x) & RedStage(y) & RedStage(z)) -> StartsAt(x,y,z))", "all x.(Player(x) -> BeginsAtRedStage(x))", "all x y.((Player(x) & RedStage(y)) -> CommencesAt(x,y))", "all x y z.((Player(x) & RedStage(y) & RedStage(z)) -> BeginsAt(x,y))", "all x y z.((Player(x) & RedStage(y) & Stage(z)) -> BeginsAt(x,y,z))", "all x y z.((Player(x) & RedStage(y) & RedStage(z)) -> CommencesAt(x,y,z))", "all x y.((Player(x) & RedStage(y)) -> BeginningAt(x,y))", "all x y z.((Player(x) & RedStage(y) & Stage(z)) -> StartsAt(x,y,z))", "all x y z.((Player(x) & RedStage(y) & RedStage(z)) -> StartsAt(x,y))", "all x y z.((Player(x) & RedStage(y) & RedStage(z)) -> BeginningAt(x,y,z))", "all x.(Player(x) -> (StartsAtRedStage(x) | StartsAtRedStage(x)))"]}
{"id": "folio_train_822", "nl": "All players must reach the yellow stage before they can reach the green stage.", "fol": "all x.((GamePlayer(x) & -GameStage(x,YellowStage)) -> -GameStage(x,GreenStage))", "prediction": ["all x.((Player(x) & YellowStage(x)) -> GreenStage(x))", "all x.(Player(x) -> (AchievesYellowStage(x) & CanAchieveGreenStage(x)))", "all x.(Player(x) -> (ReachesYellowStage(x) & ReachesGreenStage(x)))", "all x.(Player(x) -> (ReachesYellowStage(x) & CanReachGreenStage(x)))", "all x.(Player(x) -> (ReachesYellowStage(x) & ReachesGreenStage(x)))", "all x.(Player(x) -> (AchievesYellowStage(x) & ReachesGreenStage(x)))", "all x.(Player(x) -> (ReachesYellowStage(x) & ReachGreenStage(x)))", "all x.(Player(x) -> (AchievesYellowStage(x) & AchievesGreenStage(x)))", "all x y.((Player(x) & YellowStage(y)) -> CanAttachGreenStage(x,y))", "all x.(Player(x) -> (HasYellowStage(x) & HasGreenStage(x)))", "all x.(Player(x) -> (ReachYellowStage(x) & ReachGreenStage(x)))", "all x.(Player(x) -> (Together(x,y) & YellowStage(y)))", "all x.(Player(x) -> (Together(x,y) & YellowStage(y) & GreenStage(z)))", "all x y.((Player(x) & YellowStage(y)) -> GreenStage(x))", "all x.((Player(x) & YellowStage(x) & GreenStage(x)) -> Reached(x))", "all x.((Player(x) & YellowStage(x) & GreenStage(x)) -> CanAttach(x))"]}
{"id": "folio_train_823", "nl": "The yellow stage comes after the red stage.", "fol": "all x.((GamePlayer(x) & -GameStage(x,RedStage)) -> -GameStage(x,YellowStage))", "prediction": ["all x y.((YellowStage(x) & RedStage(y)) -> ComesAfter(x,y))", "all x y z.((YellowStage(x) & RedStage(y)) -> ComesAfter(x,y))", "all x.((YellowStage(x) & RedStage(x)) -> ComesAfter(x,y))", "all x y z.((YellowStage(x) & RedStage(y) & YellowStage(z)) -> ComesAfter(x,y,z))", "all x y.((YellowStage(x) & RedStage(y)) -> ComesAlong(x,y))", "all x.(YellowStage(x) -> ComesAfterRedStage(x))", "all x y.((YellowStudio(x) & RedStudio(y)) -> ComesAfter(x,y))", "all x y.((YellowStage(x) & RedStage(y)) -> CameAfter(x,y))", "all x.(YellowStage(x) -> ComesAfter(x,RedStage))", "all x y z.((YellowStage(x) & RedStage(y) & Stage(z)) -> ComesAfter(x,y,z))", "all x y.((YellowStage(x) & RedStage(y)) -> ComesAhead(x,y))", "all x y.((YellowStudy(x) & RedStudy(y)) -> ComesAfter(x,y))", "all x y z.((YellowStage(x) & RedStage(y) & RedStage(z)) -> ComesAfter(x,y,z))", "all x y z.((YellowStage(x) & RedStage(y) & YellowStage(z)) -> ComesAfter(x,z))", "all x y z.((YellowStage(x) & RedStage(y) & Stage(z)) -> ComesAfter(x,z))", "all x y.((YellowStage(x) & RedStage(y)) -> Follows(x,y))"]}
{"id": "folio_train_824", "nl": "All players must proceed one stage at a time.", "fol": "all x.((GamePlayer(x) & GameStage(x,RedStage) & -GameStage(x,YellowStage)) -> -GameStage(x,GreenStage))", "prediction": ["all x.(Player(x) -> ProceedsOneStageAtTime(x))", "all x.(Player(x) -> ProceedOneStageAtTime(x))", "all x.(Player(x) -> ProceedsOneStageAtATime(x))", "all x.(Player(x) -> ProceedOneStageAtATime(x))", "all x.(Player(x) -> OneStageAtTime(x))", "all x y.((Player(x) & Stage(y)) -> ProceedsOneAtTime(x,y))", "all x.(Player(x) -> exists y.(Stage(y) & Proceeds(x,y))))", "all x y.((Player(x) & Stage(y)) -> Proceed(x,y))", "all x.(Player(x) -> (ProceedsOneStageAtTime(x)))", "all x y.((Player(x) & Stage(y)) -> ProceedsOneAtATime(x,y))", "all x y.((Player(x) & Stage(y)) -> ProceedOneAtTime(x,y))", "all x.(Player(x) -> exists y.(Stage(y) & ProceedsAt(x,y))))", "all x y.((Player(x) & Stage(y)) -> Proceeds(x,y))", "all x.(Player(x) -> PlaysOneStageAtTime(x))", "all x.(Player(x) -> MustProceedOneStageAtTime(x))", "all x y.((Player(x) & Stage(y)) -> ProceedOneAtATime(x,y))"]}
{"id": "folio_train_825", "nl": "It is possible to move to the green stage without ever reaching the yellow stage.", "fol": "-all x.((GamePlayer(x) & GameStage(x,GreenStage)) -> GameStage(x,YellowStage))", "prediction": ["all x.((MoveToGreenStage(x) & -MoveToYellowStage(x)) -> Possible(x))", "all x.((MoveToGreenStage(x) & -ReachesYellowStage(x)) -> Possible(x))", "all x y.((GreenStage(x) & YellowStage(y)) -> PossibleMovement(x,y))", "all x.(MoveToGreenStage(x) -> -ReachesYellowStage(x))", "all x y.((MoveToGreenStage(x) & YellowStage(y)) -> -MoveToGreenStage(x,y))", "all x.((MoveToGreenStage(x) & -ToYellowStage(x)) -> Possible(x))", "all x y.((GreenStage(x) & YellowStage(y)) -> CanMoveTo(x,y))", "all x.(MoveToGreenStage(x) & -ReachesYellowStage(x))", "all x.((MoveToGreenStage(x) & -MoveToYellowStage(x)) -> CanBeMoveToGreenStage(x))", "all x y.((GreenStage(x) & YellowStage(y)) -> MovesTo(x,y))", "all x.((GreenStage(x) & -YellowStage(x)) -> PossibleMovement(x))", "all x.((MoveToGreenStage(x) & -MoveToYellowStage(x)) -> -MoveToGreenStage(x))", "all x.(MoveToGreenStage(x) & -MoveToYellowStage(x))", "all x y.((GreenStage(x) & YellowStage(y)) -> CanBeMovedTo(x,y))", "all x.(MoveToGreenStage(x) -> -MoveToYellowStage(x))", "exists x.(MoveToGreenStage(x) & -ReachesYellowStage(x))"]}
{"id": "folio_train_826", "nl": "It is possible to reach the yellow stage without ever reaching the green stage.", "fol": "-all x.((GamePlayer(x) & GameStage(x,YellowStage)) -> GameStage(x,GreenStage))", "prediction": ["all x.((YellowStage(x) & -GreenStage(x)) -> PossibleToReach(x,y))", "all x.((YellowStage(x) & GreenStage(x)) -> PossibleToReach(x,y))", "all x.((TargetsYellowStage(x) & -TargetsGreenStage(x)) -> Possible(x))", "all x.((AchievesYellowStage(x) & -AchievesGreenStage(x)) -> Possible(x))", "all x y.((YellowStage(x) & GreenStage(y)) -> CanBeReach(x,y))", "all x y.((YellowStage(x) & GreenStage(y)) -> PossibleToReach(x,y))", "all x.((ReachesYellowStage(x) & -ReachesGreenStage(x)) -> Possible(x))", "all x.((Together(x,y) & YellowStage(y)) -> -Together(x,greenStage))", "exists x.(YellowStage(x) & -GreenStage(x))", "all x y.((YellowStage(x) & GreenStage(y)) -> Reachable(x,y))", "all x y.((YellowStage(x) & GreenStage(y)) -> CanBeReachable(x,y))", "all x.((YellowStage(x) & GreenStage(x)) -> Possible(x))", "all x.((YellowStage(x) & -GreenStage(x)) -> Reachable(x))", "all x.((Together(x,y) & YellowStage(y)) -> -Together(x,y))", "all x.((YellowStage(x) & -GreenStage(x)) -> PossibleToAchieve(x,y))", "all x.((YellowStage(x) & -GreenStage(x)) -> CanBeReachable(x))"]}
{"id": "folio_train_827", "nl": "It is possible to complete the game without ever reaching the green stage.", "fol": "exists x.(GamePlayer(x) & -GameStage(x,GreenStage))", "prediction": ["all x.((Game(x) & CompletesWithoutGreenStage(x)) -> Possible(x))", "all x y.((Game(x) & GreenStage(y)) -> CompletesWithoutGreenStage(x,y))", "all x y.((Game(x) & GreenStage(y)) -> CanComplete(x,y))", "all x.(CompleteGameWithoutGreenStage(x) -> Possible(x))", "all x.((Game(x) & -GreenStage(x)) -> CanComplete(x))", "all x.((Game(x) & CompletedWithoutGreenStage(x)) -> Possible(x))", "all x y.((Game(x) & GreenStage(y)) -> CanCompleteWithoutGreenStage(x,y))", "all x.((Game(x) & -GreenStage(x)) -> Possible(x))", "all x.((Game(x) & -GreenStage(x)) -> PossibleToComplete(x))", "all x y.((Game(x) & GreenStage(y)) -> PossibleToComplete(x,y))", "all x y z.((Game(x) & GreenStage(y) & GreenStage(z)) -> CompletesWithoutGreenStage(x,y,z))", "all x y z.((Game(x) & GreenStage(y) & GreenStage(z)) -> CanComplete(x,y,z))", "all x.((Game(x) & -GreenStage(x)) -> Completes(x))", "all x.((Game(x) & CompletesWithoutGreenStage(x)) -> CanBeCompletedWithoutGreenStage(x))", "all x y.((Game(x) & GreenStage(y)) -> Completes(x,y))", "all x.((Game(x) & CompleteWithoutGreenStage(x)) -> Possible(x))"]}
{"id": "folio_train_828", "nl": "People either value physical touch as an especially important love language or value words of affirmation as an especially important love language.", "fol": "all x.(ValuesPhysicalTouch(x) | ValuesWordsOfAffirmation(x))", "prediction": ["all x.(Person(x) -> (ValuesPhysicalTouch(x) | ValuesWordsOfAffirmation(x)))", "all x y.((Person(x) & Person(y)) -> (ValuesPhysicalTouch(x,y) | ValuesWordsOfAffirmation(x,y)))", "all x.(Person(x) -> (ValuesPhysicalTouch(x) | ValuesWordsOfAffirmation(x)))", "all x y.((Person(x) & Person(y)) -> (ValuesPhysicalTouch(x,y) | ValuesAffirmation(x,y)))", "all x y.((Person(x) & Person(y)) -> (ValuesPhysicalTouch(x,y) | ValuesWordsOfAffirmation(x,y)))", "exists x.(Person(x) & (ValuesPhysicalTouch(x) & EspeciallyImportantLoveLanguage(x)) | ValuesWordsOfAffirmation(x) & EspeciallyImportantLoveLanguage(x)))", "all x.(Person(x) -> (ValuesPhysicalTouch(x) | ValuesAffirmation(x)))", "all x.(Person(x) -> (ValuesPhysicalTouch(x) | ValuesAffirmationWords(x)))", "all x y.((Person(x) & Person(y)) -> (ValuesPhysicalTouch(x) & ParticularlyImportantLoveLanguage(x)) | ValuesWordsOfAffirmation(x) & ParticularlyImportantLoveLanguage(x)))", "exists x.(Person(x) & (ValuesPhysicalTouch(x) | ValuesWordsOfAffirmation(x)))", "all x.(Person(x) -> (ValuesPhysicalTouch(x) & (ValuesWordsOfAffirmation(x) | ValuesLoveLanguage(x))))", "all x y.((Person(x) & Person(y)) -> (ValuesPhysicalTouch(x) & ParticularlyImportantLoveLanguage(x)) | ValuesWordsOfAffirmation(x) & ParticularlyImportantLoveLanguage(x)))", "all x y z.((Person(x) & PhysicalTouch(y) & Affirmation(z)) -> (Values(x,y) | Values(x,z)))", "all x y.((Person(x) & Person(y)) -> (ValuesPhysicalTouch(x,y) | ValuesAffirmationWords(x,y)))", "all x y z.((Person(x) & PhysicalTouch(y) & Affirmation(z)) -> (Values(x,y) | Values(x,z)))", "all x y.((Person(x) & Person(y)) -> (ValuesPhysicalTouch(x) & ParticularlyImportantLoveLanguage(x) | ValuesWordsOfAffirmation(x) & ParticularlyImportantLoveLanguage(x)))"]}
{"id": "folio_train_829", "nl": "If a person values physical touch as an especially important love language, then they are good with pets.", "fol": "all x.(ValuesPhysicalTouch(x) -> IsGoodWithPets(x))", "prediction": ["all x.(ValuesPhysicalTouch(x) -> GoodWithPets(x))", "all x.((Person(x) & ValuesPhysicalTouch(x) & LoveLanguage(x)) -> GoodWithPets(x))", "all x.(ValuesPhysicalTouchAsLoveLanguage(x) -> GoodWithPets(x))", "all x.((Person(x) & ValuesPhysicalTouch(x) & ImportantLoveLanguage(x)) -> GoodWithPets(x))", "all x.((Person(x) & ValuesPhysicalTouchAsLoveLanguage(x)) -> GoodWithPets(x))", "all x.((Person(x) & ValuesPhysicalTouch(x) & IsLoveLanguage(x)) -> GoodWithPets(x))", "all x.((Person(x) & ValuesPhysicalTouch(x) & EspeciallyImportantLoveLanguage(x)) -> GoodWithPets(x))", "all x.((Person(x) & ValuesPhysicalTouch(x) & LoveLanguage(x)) -> GoodWithPets(x))", "all x.((Person(x) & ValuesPhysicalTouch(x) & ParticularlyImportantLoveLanguage(x)) -> GoodWithPets(x))", "all x y.((Person(x) & ValuesPhysicalTouch(x) & LoveLanguage(y)) -> GoodWithPets(x))", "all x.((Person(x) & ValuesPhysicalTouch(x)) -> GoodWithPets(x))", "all x.(ValuesPhysicalTouch(x) & LoveLanguage(x)) -> GoodWithPets(x))", "all x.(ValuesPhysicalTouchAsImportantLoveLanguage(x) -> GoodWithPets(x))", "all x.(ValuesPhysicalTouchLanguage(x) -> GoodWithPets(x))", "all x.((Person(x) & ValuesPhysicalTouch(x) & EspeciallyImportantLOVELanguage(x)) -> GoodWithPets(x))", "all x.((Person(x) & ValuesPhysicalTouch(x) & LoveLanguage(x,y)) -> GoodWithPets(x))"]}
{"id": "folio_train_830", "nl": "No people that are good with pets are scared of animals.", "fol": "all x.(IsGoodWithPets(x) -> -IsScaredOfAnimals(x))", "prediction": ["all x.((Person(x) & GoodWithPets(x)) -> ScaredOfAnimals(x))", "all x.((Person(x) & GoodWithPets(x)) -> ScarredOfAnimals(x))", "all x.(GoodWithPets(x) -> ScaredOfAnimals(x))", "all x.((Person(x) & GoodWithPet(x)) -> ScaredOfAnimals(x))", "all x.((Person(x) & GoodWithPets(x)) -> ScaredOfAnimals(x))", "all x.((Person(x) & GoodWithPet(x)) -> ScarredOfAnimals(x))", "-all x.((Person(x) & GoodWithPets(x)) -> ScaredOfAnimals(x))", "-exists x.(GoodWithPets(x) & ScaredOfAnimals(x))", "-exists x.(GoodWithPets(x) & -ScaredOfAnimals(x))", "all x.((People(x) & GoodWithPets(x)) -> ScaredOfAnimals(x))", "all x.((Person(x) & GoodWithAnimals(x)) -> ScaredOfAnimals(x))", "all x.(GoodWithPets(x) -> ScarredOfAnimals(x))", "-exists x.(Person(x) & GoodWithPets(x) & ScaredOfAnimals(x))", "-exists x.((Person(x) & GoodWithPets(x)) & ScaredOfAnimals(x))", "-all x.(GoodWithPets(x) -> ScaredOfAnimals(x))", "-all x.((Person(x) & GoodWithPets(x)) -> ScarredOfAnimals(x))"]}
{"id": "folio_train_831", "nl": "People are either scared of animals or love animals.", "fol": "all x.(IsScaredOfAnimals(x) | LovesAnimals(x))", "prediction": ["all x.(Person(x) -> (ScaredOfAnimals(x) | LovesAnimals(x)))", "all x y.((Person(x) & Animal(y)) -> (ScaredOf(x,y) | Loves(x,y)))", "all x.(People(x) -> (ScaredOfAnimals(x) | LovesAnimals(x)))", "all x.(Person(x) -> (ScaredOfAnimals(x) | LoveAnimals(x)))", "exists x.(Person(x) & (ScaredOfAnimals(x) | LovesAnimals(x)))", "all x.(People(x) -> (ScaredOfAnimals(x) | LoveAnimals(x)))", "all x.((Person(x) & (ScaredOfAnimals(x) | LovesAnimals(x))) -> (ScaredOfAnimals(x) | LovesAnimals(x)))", "all x.(Person(x) -> ((ScaredOfAnimals(x) | LovesAnimals(x))))", "all x.((Person(x) & (ScaredOfAnimals(x) | LovesAnimals(x))) -> ScaredOfAnimals(x))", "all x y.((People(x) & Animal(y)) -> (ScaredOf(x,y) | Loves(x,y)))", "all x.((People(x) & (ScaredOfAnimals(x) | LovesAnimals(x))) -> (ScaredOfAnimals(x) | LovesAnimals(x)))", "all x.((Person(x) & (ScaredOfAnimals(x) | LovesAnimals(x))) -> (ScaredOfAnimals(x) | LoveAnimals(x)))", "all x.(Popular(x) -> (ScaredOfAnimals(x) | LovesAnimals(x)))", "exists x.(People(x) & (ScaredOfAnimals(x) | LovesAnimals(x)))", "all x.(ScaredOfAnimals(x) | LovesAnimals(x))", "all x.(People(x) -> ((ScaredOfAnimals(x) | LovesAnimals(x))))"]}
{"id": "folio_train_832", "nl": "Adam is either a person who values physical touch as an especially important love language or a person who loves animals.", "fol": "((ValuesPhysicalTouch(Adam) & -LovesAnimals(Adam)) | (-ValuesPhysicalTouch(Adam) & LovesAnimals(Adam)))", "prediction": ["all x.(Adam(x) -> (ValuesPhysicalTouch(x) & LoveLanguage(x)) | LovesAnimals(x)))", "all x.(Adam(x) -> (ValuesPhysicalTouch(x) & LoveLanguage(x) | LovesAnimals(x)))", "all x.(Adam(x) -> (ValuesPhysicalTouch(x) | LovesAnimals(x)))", "all x.((Person(x) & ValuesPhysicalTouch(x) & LoveLanguage(x)) | LovesAnimals(x))", "all x.(Adam(x) -> (ValuesPhysicalTouch(x) & LoveLanguage(x)) | (ValuesAnimals(x) & LoveLanguage(x))))", "all x.(Adam(x) -> (ValuesPhysicalTouch(x) & LoveLanguage(x)) | LovesAnimals(x)))", "all x.(Adam(x) -> (Person(x) & ValuesPhysicalTouch(x) & LoveLanguage(x)) | Person(x) & LovesAnimals(x)))", "all x.(Adam(x) -> (ValuesPhysicalTouch(x) & ParticularlyImportantLoveLanguage(x)) | LovesAnimals(x)))", "all x.(Adam(x) -> (ValuesPhysicalTouch(x) & (ValuesAnimals(x) | LovesAnimals(x))))", "all x.(Adam(x) -> (ValuesPhysicalTouch(x) & (LoveLanguage(x) | LovesAnimals(x))))", "all x.(Adam(x) -> (ValuesPhysicalTouch(x) & (LovesAnimals(x) | LovesAnimals(x))))", "exists x.(Adam(x) & (ValuesPhysicalTouch(x) & LoveLanguage(x)) | LovesAnimals(x)))", "all x.(Adam(x) -> (ValuesPhysicalTouch(x) & LoveLanguage(x) | LovesAnimals(x)))", "all x.(Adam(x) -> (Person(x) & ValuesPhysicalTouch(x) & LoveLanguage(x)) | LovesAnimals(x)))", "all x.(Adam(x) -> (ValuesPhysicalTouch(x) & LoveLanguage(x) & LovesAnimals(x)))", "exists x.(Adam(x) & (ValuesPhysicalTouch(x) & LoveLanguage(x) | LovesAnimals(x)))"]}
{"id": "folio_train_833", "nl": "Adam is scared of animals.", "fol": "IsScaredOfAnimals(Adam)", "prediction": ["all x.(Adam(x) -> ScaredOfAnimals(x))", "all x y.((Adam(x) & Animal(y)) -> ScaredOf(x,y))", "all x.((Adam(x) & ScaredOfAnimals(x)) -> ScaredOfAnimals(x))", "all x.((Adam(x) & ScaredOfAnimals(x)) -> ScaredOfAnimals(x))", "all x.((Adam(x) & Animal(y)) -> ScaredOf(x,y))", "all x.((Adam(x) & ScaredOfAnimals(x)) -> ScaredOfAnimals(x))", "all x.(Adam(x) -> ScaredOfAnimals(x))", "all x.((Adam(x) & ScaredOfAnimals(x)) -> ScreamsOfAnimals(x))", "exists x.(Adam(x) & ScaredOfAnimals(x))", "all x.(Adam(x) -> ScaredOfAnimals(x))", "All x.(Adam(x) -> ScaredOfAnimals(x))", "all x.(Adam(x) -> ScarredOfAnimals(x))", "all x.(ScaredOfAnimals(x) -> Adam(x))", "(ScaredOfAnimals(Adam))", "(ScaredOfAnimals(Adam) -> ScaredOfAnimals(Adam))", "all x y.((Adam(x) & Animal(y)) -> ScaredOf(x,y))"]}
{"id": "folio_train_834", "nl": "Adam values words of affirmation as an especially important love language.", "fol": "ValuesWordsOfAffirmation(Adam)", "prediction": ["all x.((Adam(x) & WordOfAffirmation(x)) -> LoveLanguage(x))", "all x.((Adam(x) & ValuesWordsOfAffirmation(x)) -> LoveLanguage(x))", "all x.((Adam(x) & ValuesWordOfAffirmation(x)) -> LoveLanguage(x))", "all x.((Adam(x) & WordsOfAffirmation(x)) -> LoveLanguage(x))", "all x.((Adam(x) & ValuesAffirmation(x)) -> LoveLanguage(x))", "all x.(AdamValuesWordOfAffirmation(x) -> LoveLanguage(x))", "all x.(AdamValuesWordsOfAffirmation(x) -> LoveLanguage(x))", "all x.((Adam(x) & Affirmation(x)) -> LoveLanguage(x))", "all x y.((Adam(x) & WordOfAffirmation(y)) -> ValuesAsLoveLanguage(x,y))", "all x y.((Adam(x) & WordOfAffirmation(y)) -> LoveLanguage(x,y))", "all x y.((Adam(x) & WordOfAffirmation(y)) -> ValuesAsLivingLanguage(x,y))", "all x.((Adam(x) & WordOfAffirmation(x)) -> ImportantLoveLanguage(x))", "all x.(Adam(x) -> ValuesWordsOfAffirmation(x))", "all x y.((Adam(x) & Word(y)) -> ValuesAffirmation(x,y))", "all x y.((Adam(x) & WordOfAffirmation(y)) -> ImportantLoveLanguage(x,y))", "all x.((Adam(x) & LoveLanguage(x)) -> ValuesAffirmation(x))"]}
{"id": "folio_train_835", "nl": "Adam values physical touch as an especially important love language and values words of affirmation as an especially important love language.", "fol": "(ValuesPhysicalTouch(Adam) & ValuesWordsOfAffirmation(Adam))", "prediction": ["(all x.(Adam(x) -> ValuesPhysicalTouch(x)) & all y.(Adam(y) -> ValuesWordsOfAffirmation(y))))", "all x y z.((Adam(x) & PhysicalTouch(y) & Affirmation(z)) -> (Values(x,y) & Values(x,z)))", "(all x.((Adam(x) & PhysicalTouch(x)) -> LoveLanguage(x)) & all y.((Adam(y) & Affirmation(y)) -> LoveLanguage(y)))", "(all x.((Adam(x) & PhysicalTouch(x)) -> LoveLanguage(x)) & all y.((Adam(y) & WordOfAffirmation(y)) -> LoveLanguage(y)))", "all x y z.((Adam(x) & PhysicalTouch(y) & Affirmation(z)) -> (Values(x,y) & Values(x,z)))", "all x.(Adam(x) -> (ValuesPhysicalTouch(x) & ValuesWordsOfAffirmation(x)))", "all x y z.((Adam(x) & PhysicalTouch(y) & Affirmation(z)) -> (ValuesLivingLanguage(x,y) & ValuesLivingLanguage(x,z)))", "all x y.((Adam(x) & PhysicalTouch(x) & Affirmation(y)) -> (Values(x,y) & Values(x,y)))", "all x.((Adam(x) & ValuesPhysicalTouch(x) & ValuesWordsOfAffirmation(x)) -> LoveLanguage(x))", "(all x.((Adam(x) & PhysicalTouch(x)) -> LoveLanguage(x)) & all y.((Adam(y) & Affirmation(y)) -> LoveLanguage(y))))", "all x y.((Adam(x) & PhysicalTouch(x) & Affirmation(y)) -> (Values(x,y) & Values(x,y)))", "all x y z.((Adam(x) & PhysicalTouch(y) & Affirmation(z)) -> (ValuesLivingLanguage(x,y) & ValuesLivingLanguage(x,z)))", "(all x.((Adam(x) & PhysicalTouch(x)) -> LoveLanguage(x)) & all y.((Adam(y) & WordOfAffirmation(y)) -> LoveLanguage(y))))", "(all x.(Adam(x) -> ValuesPhysicalTouch(x)) & all y.(Adam(y) -> ValuesWordsOfAffirmation(y)))", "all x y.((Adam(x) & PhysicalTouch(x) & WordOfAffirmation(y)) -> (ImportantLoveLanguage(x) & ImmportantLoveLanguage(y)))", "all x.(Adam(x) -> (ValuesPhysicalTouch(x) & ValuesWordsOfAffirmation(x)))"]}
{"id": "folio_train_836", "nl": "Adam either values physical touch as an especially important love language or values words of affirmation as an especially important love language.", "fol": "(ValuesPhysicalTouch(Adam) | ValuesWordsOfAffirmation(Adam))", "prediction": ["all x.(Adam(x) -> (ValuesPhysicalTouch(x) | ValuesWordsOfAffirmation(x)))", "all x.(Adam(x) -> (ValuesPhysicalTouch(x) | ValuesWordsOfAffirmation(x)))", "all x.(Adam(x) -> (ValuesPhysicalTouch(x) | ValuesAffirmation(x)))", "all x.((Adam(x) & (ValuesPhysicalTouch(x) | ValuesWordsOfAffirmation(x))) -> LoveLanguage(x))", "all x.((Adam(x) & (ValuesPhysicalTouch(x) | ValuesWordsOfAffirmation(x))) -> EspeciallyImportantLoveLanguage(x))", "all x.((Adam(x) & (ValuesPhysicalTouch(x) | ValuesWordsOfAffirmation(x))) -> ParticularlyImportantLoveLanguage(x))", "all x.(Adam(x) -> (ValuesPhysicalTouch(x) | ValuesAffirmationWords(x)))", "all x.((Adam(x) & (ValuesPhysicalTouch(x) | ValuesWordsOfAffirmation(x))) -> ImportantLoveLanguage(x))", "exists x.(Adam(x) & (ValuesPhysicalTouch(x) | ValuesWordsOfAffirmation(x)))", "all x.((Adam(x) & (ValuesPhysicalTouch(x) | ValuesWordsOfAffirmation(x))) -> LoveLanguage(x))", "all x.((Adam(x) & (ValuesPhysicalTouch(x) | ValuesWordsOfAffirmation(x))) -> EspeciallyImportantLoveLanguage(x))", "all x.((Adam(x) & (ValuesPhysicalTouch(x) | ValuesWordsOfAffirmation(x))) -> VeryImportantLoveLanguage(x))", "all x.(Adam(x) -> (ValuesPhysicalTouch(x) | ValuesWordOfAffirmation(x)))", "all x.((Adam(x) & (ValuesPhysicalTouch(x) | ValuesAffirmation(x))) -> LoveLanguage(x))", "all x y z.((Adam(x) & PhysicalTouch(y) & Affirmation(z)) -> (Values(x,y) | Values(x,z)))", "all x y.((Adam(x) & PhysicalTouch(x) & Affirmation(y)) -> (ValuesLoveLanguage(x,y) | ValuesLoveLanguage(x,y)))"]}
{"id": "folio_train_837", "nl": "If Adam values physical touch as an especially important love language or is good with pets, then Adam values words of affirmation as an especially important love language.", "fol": "((ValuesPhysicalTouch(Adam) | IsGoodWithPets(Adam)) -> ValuesWordsOfAffirmation(Adam))", "prediction": ["all x.((Adam(x) & (ValuesPhysicalTouch(x) | GoodWithPets(x))) -> ValuesWordsOfAffirmation(x))", "all x.((Adam(x) & (ValuesPhysicalTouch(x) | GoodWithPets(x))) -> ValuesWordsOfAffirmation(x))", "all x.((Adam(x) & ValuesPhysicalTouch(x) & (ImportantLoveLanguage(x) | GoodWithPets(x))) -> ValuesWordsOfAffirmation(x))", "all x.((Adam(x) & ValuesPhysicalTouch(x) & (IsImportantLoveLanguage(x) | GoodWithPets(x))) -> ValuesWordsOfAffirmation(x))", "all x.((Adam(x) & ValuesPhysicalTouch(x) & (IsImportantLivingLanguage(x) | GoodWithPets(x))) -> ValuesWordsOfAffirmation(x))", "all x.((Adam(x) & (ValuesPhysicalTouch(x) | GoodWithPets(x))) -> ValuesAffirmation(x))", "all x.((AdamValuesPhysicalTouch(x) & (ImportantLoveLanguage(x) | GoodWithPets(x))) -> ImportantLoveLanguage(x))", "all x.((Adam(x) & ValuesPhysicalTouch(x) & (ImportantLivingLanguage(x) | GoodWithPets(x))) -> ValuesWordsOfAffirmation(x))", "all x.((Adam(x) & ValuesPhysicalTouch(x) & (LoveLanguage(x) | GoodWithPets(x))) -> ValuesWordsOfAffirmation(x))", "all x.((Adam(x) & ValuesPhysicalTouch(x) & (GoodWithPets(x) | ImportantLoveLanguage(x))) -> ValuesWordsOfAffirmation(x))", "all x.((Adam(x) & (ValuesPhysicalTouch(x) | GoodWithPets(x))) -> ValuesAffirmation(x))", "all x.((AdamValuesPhysicalTouch(x) & (IsImportantLoveLanguage(x) | GoodWithPets(x))) -> ImportantLoveLanguage(x))", "all x.((Adam(x) & ValuesPhysicalTouch(x) & (ImportantLoveLanguage(x) | GoodWithPets(x))) -> ImportantLoveLanguage(x))", "all x.((Adam(x) & ValuesPhysicalTouch(x) & (LoveLanguage(x) | GoodWithPets(x))) -> ValuesAffirmation(x))", "all x.((Adam(x) & ValuesPhysicalTouch(x)) | GoodWithPets(x)) -> ValuesWordsOfAffirmation(x))", "all x.((Adam(x) & ValuesPhysicalTouch(x) & (ImportantLoveLanguage(x) | GoodWithPets(x))) -> ValuesAffirmation(x))"]}
{"id": "folio_train_838", "nl": "All birds have wings.", "fol": "all x.(IsBird(x) -> HasWings(x))", "prediction": ["all x.(Bird(x) -> HasWings(x))", "all x.exists y.(Bird(x) & Wing(y) & Has(x,y))", "all x y.((Bird(x) & Wing(y)) -> Has(x,y))", "all x.((Bird(x) & HasWings(x)) -> HasWings(x))", "all x y.((Bird(x) & Bird(y)) -> HasWings(x,y))", "all x.exists y.(Bird(x) & Wings(y) & Has(x,y))", "exists x.(Bird(x) & HasWings(x))", "all x.exists y.(Bird(x) & Wing(y) & HasWing(x,y))", "all x.exists y.(Bird(x) & Wing(y) & HasWings(x,y))", "(all x.(Bird(x) -> HasWings(x)))", "all x y.((Bird(x) & Bird(y)) -> HasWings(x))", "all x.(Bird(x) -> HasWings(x))", "(All x.(Bird(x) -> HasWings(x)))", "all x.(Bird(x) -> HasWing(x))", "(All x.(Bird(x) -> HasWings(x))", "(all x.(Bird(x) -> HasWings(x))"]}
{"id": "folio_train_839", "nl": "No animal with wings is a reptile.", "fol": "all x.(HasWings(x) -> -IsReptile(x))", "prediction": ["all x.((Animal(x) & HasWings(x)) -> Reptile(x))", "-exists x.(Animal(x) & HasWings(x))", "-exists x.(Animal(x) & HasWings(x) & Reptile(x))", "-exists x.((Animal(x) & HasWings(x)) -> Reptile(x))", "-all x.((Animal(x) & HasWings(x)) -> Reptile(x))", "(-exists x.(Animal(x) & HasWings(x)) & Reptile(x))", "all x.((AnimalWithWings(x) & -Reptile(x)) -> -Reptile(x))", "all x.(Reptile(x) -> -exists y.(Animal(y) & HasWings(y) & HasWings(y)))", "all x.(Reptile(x) -> -exists y.(Animal(y) & HasWings(y) & HasWings(y)))", "all x.(Reptile(x) -> -(AnimalWithWings(x) & HasWings(x)))", "all x.(Reptile(x) -> -exists y.(Animal(y) & HasWings(y) & HasWings(x,y)))", "all x.(Reptile(x) -> -exists y.(Animal(y) & HasWings(y) & HasWings(x,y)))", "all x.(Reptile(x) -> -exists y.(Animal(y) & HasWings(y)))", "all x.(Reptile(x) -> -(AnimalWithWings(x) & HasWings(x)))", "all x.(Reptile(x) -> -(Animal(x) & HasWings(x)))", "all x.(Reptile(x) -> -exists y.(Animal(x) & HasWings(x) & HasWings(y)))"]}
{"id": "folio_train_840", "nl": "Some animals that fly are birds.", "fol": "exists x.(CanFly(x) & IsBird(x))", "prediction": ["exists x.(Animal(x) & Flies(x))", "exists x.(Animal(x) & Fly(x))", "exists x.(FlyingAnimal(x) & Bird(x))", "exists x.(Animal(x) & Flies(x) & Bird(x))", "exists x.(Animal(x) & Fly(x) & Bird(x))", "exists x.((Animal(x) & Flies(x)) -> Bird(x))", "exists x.(Flying(x) & Bird(x))", "exists x.(Animal(x) & Floats(x))", "exists x.((Animal(x) & Fly(x)) -> Bird(x))", "exists x.(Animal(x) & Flows(x))", "exists x.(Animal(x) & Flies(x)) -> Bird(x))", "exists x y.(Animal(x) & Animal(y) & Flies(x) & Bird(y))", "exists x y.(Animal(x) & Animal(y) & Fly(x) & Bird(y))", "exists x.(Animal(x) & Floats(x) & Bird(x))", "exists x.(Animal(x) & Float(x))", "exists x y.(Animal(x) & Animal(y) & Flies(x))"]}
{"id": "folio_train_841", "nl": "If something is an iguana, then it is a reptile.", "fol": "all x.(IsIguana(x) -> IsReptile(x))", "prediction": ["all x.((Iguana(x) & Reptile(x)) -> Iguana(x))", "all x.(Iguana(x) -> Reptile(x))", "all x.((Iguana(x) & Reptile(x)) -> Reptile(x))", "all x.((Iguana(x) & Reptile(x)) -> (Iguana(x) & Reptile(x)))", "all x.((Iguana(x) & Reptile(x)) -> -Iguana(x))", "all x.((Iguana(x) & Reptile(x)) -> Iguana(x))", "all x.((Iguana(x) -> Reptile(x))", "all x.((Iguana(x) & Reptile(x)) -> IsReptile(x))", "all x.((Iguana(x) & Reptile(x)) -> Is(x))", "all x.((Iguana(x) | Reptile(x)) -> Iguana(x))", "all x y.((Iguana(x) & Reptile(y)) -> Iguana(x))", "all x.((Iguana(x) & Reptile(x)) -> HasIguana(x))", "all x.((Iguana(x) & Reptile(x)) -> Reposit(x))", "all x.((Iguana(x) & Reptile(x)) -> Reptile(x))", "all x.((Iguana(x) & Reptile(x)) -> Ignite(x))", "all x.((Iguana(x) & Reptile(x)) -> (Iguana(x) | Reptile(x)))"]}
{"id": "folio_train_842", "nl": "John is neither an iguana nor a bird.", "fol": "(-IsIguana(John) & -IsBird(John))", "prediction": ["-(Iguana(John) | Bird(John))", "(-Iguana(John) & -Bird(John))", "all x.(John(x) -> (-Iguana(x) & -Bird(x)))", "all x.(John(x) -> (-Iguana(x) | Bird(x)))", "John is -Iguana(John) & -Bird(John))", "John is -(Iguana(John) | Bird(John))", "(-(Iguana(John) | Bird(John)))", "John is -(Iguana(John) | Bird(John)))", "all x.(John(x) -> -(Iguana(x) | Bird(x)))", "(-Iguana(John) | Bird(John))", "John & -(Iguana(John) | Bird(John)))", "John & -(Iguana(John) | Bird(John))", "(NeitherIguana(John) & -Bird(John))", "all x.(Iguana(x) & -Bird(x))", "-(Iguana(John) & Bird(John))", "all x.(John(x) -> (-Iguana(x) &-Bird(x)))"]}
{"id": "folio_train_843", "nl": "John is a reptile.", "fol": "IsReptile(John)", "prediction": ["all x.(John(x) -> Reptile(x))", "all x.(Reptile(x) -> John(x))", "all x.((John(x) & Reptile(x)) -> Reptile(x))", "all x.(Reptile(x) -> (John(x) & Reptile(x)))", "all x.(Reptile(x) -> John(x))", "All x.(John(x) -> Reptile(x))", "all x.((John(x) & Reptile(x)) -> (Reptile(x) & Reptile(x)))", "(Reptile(John) -> Reptile(John))", "(Reptile(John) & -Reptile(John))", "all x.((John(x) & Reptile(x)) -> (Reptile(x) | Reptile(x)))", "(Reptile(John) & Reptile(John))", "all x.((John(x) & Reptile(x)) -> Reptile(x))", "(Reptile(John) -> Reptile(John))", "all x.((John(x) & Reptile(x)) -> -Reptile(x))", "John is reptile.", "John is Reptile(John)"]}
{"id": "folio_train_844", "nl": "John is not an iguana and an animal that can fly.", "fol": "(-IsIguana(John) & -CanFly(John))", "prediction": ["all x.(John(x) -> (-Iguana(x) & CanFly(x)))", "all x.(John(x) -> (-Iguana(x) & Animal(x) & CanFly(x)))", "-(Iguana(John) & CanFly(John))", "all x.(John(x) -> (-Iguana(x) & -CanFly(x)))", "John is notIguana(John) & Animal(John) & CanFly(John))", "all x.(John(x) -> (-Iguana(x) & -Animal(x) & CanFly(x)))", "(-Iguana(John) & CanFly(John))", "(-(Iguana(John) & Animal(John)) & -(Iguana(John) & CanFly(John)))", "All x.(John(x) -> (-Iguana(x) & Animal(x) & CanFly(x)))", "(-Iguana(John) & -CanFly(John))", "All x.(John(x) -> (-Iguana(x) & CanFly(x)))", "-(Iguana(John) & Animal(John))", "(-(Iguana(John) & CanFly(John)) -> -Iguana(John))", "John is notIguana(John) & CanFly(John))", "(-(Iguana(John) & Animal(John)) & -CanFly(John))", "John is notIguana(John) & -CanFly(John))"]}
{"id": "folio_train_845", "nl": "John is an animal that can fly and a bird.", "fol": "(Animal(John) & CanFly(John) & IsBird(John))", "prediction": ["all x.(John(x) -> (Animal(x) & CanFly(x) & Bird(x)))", "(Animal(John) & CanFly(John) & Bird(John))", "(Animal(John) & CanFly(John)) & Bird(John))", "all x.((Animal(x) & CanFly(x)) -> Bird(x))", "all x.((Animal(x) & CanFly(x) & Bird(x)) -> CanFly(x))", "(exists x.(Animal(x) & CanFly(x)) & exists y.(Bird(y) & CanFly(y))))", "(exists x.(Animal(x) & CanFly(x)) & exists y.(Bird(y) & CanFly(x))))", "all x.(John(x) -> (Animal(x) & CanFly(x) & Bird(x)))", "All x.(John(x) -> (Animal(x) & CanFly(x) & Bird(x)))", "exists x.(Animal(x) & CanFly(x) & Bird(x))", "all x.(Jon(x) -> (Animal(x) & CanFly(x) & Bird(x)))", "(exists x.(Animal(x) & CanFly(x)) & exists y.(Bird(y) & CanFly(y)))", "all x y.((Animal(x) & Bird(y)) -> (CanFly(x) & CanBird(y)))", "all x.((Animal(x) & CanFly(x) & Bird(x)) -> CanFlyAndBird(x))", "(exists x.(Animal(x) & CanFly(x)) & exists y.(Bird(y) & CanFly(x)))", "all x.((Animal(x) & CanFly(x) & Bird(x)) -> Animal(x))"]}
{"id": "folio_train_846", "nl": "EndGame is a movie released in 2006.", "fol": "(IsMovie(EndGame) & ReleasedInYear(EndGame,Year2006))", "prediction": ["(Movie(EndGame) & ReleasedIn2006(EndGame))", "all x.(EndGame(x) -> (Movie(x) & ReleasedIn2006(x)))", "all x.((Movie(x) & ReleasedIn2006(x)) -> EndGame(x))", "all x.(EndGame(x) -> MovieReleasedIn2006(x))", "(Movie(EndGame) & ReleasedIn(EndGame) & ReleasedIn(EndGame) & ReleasedIn(EndGame) & ReleasedIn(EndGame) & ReleasedIn(EndGame) & ReleasedIn(EndGame))", "(Movie(EndGame) & ReleasedIn(EndGame) & ReleasedIn(EndGame) & ReleasedIn(EndGame) & ReleasedIn(EndGame) & ReleasedIn(EndGame) & ReleasedIn(EndGame)))", "(Movie(EndGame) & ReleasedIn(EndGame) & ReleasedIn(EndGame) & ReleasedIn(EndGame) & ReleasedIn(EndGame) & ReleasedIn(EndGame) & ReleasedIn(EndGame) & ReleasedIn(EndGame))", "(Movie(EndGame) & ReleasedIn(EndGame) & ReleasedIn(EndGame) & ReleasedIn(EndGame) & ReleasedIn(EndGame))", "(Movie(EndGame) & ReleasedIn(EndGame) & ReleasedIn(EndGame) & ReleasedIn(EndGame) & ReleasedIn(EndGame) & ReleasedIn(EndGame))", "(Movie(EndGame) & ReleasedIn(EndGame) & ReleasedIn(EndGame) & ReleasedIn(EndGame) & ReleasedIn(EndGame) & ReleasedIn(EndGame)))", "(Movie(EndGame) & ReleasedIn(EndGame) & ReleasedIn(EndGame) & ReleasedIn(EndGame) & ReleasedIn(EndGame) & ReleasedIn(EndGame) & ReleasedIn(EndGame) & ReleasedIn(EndGame)))", "(Movie(EndGame) & ReleasedIn(EndGame) & ReleasedIn(EndGame) & ReleasedIn(EndGame) & ReleasedIn(EndGame) & ReleasedIn(EndGame) & ReleasedIn(EndGame) & ReleasedIn(EndGame) & ReleasedIn(EndGame))", "(Movie(EndGame) & ReleasedIn(EndGame) & ReleasedIn(EndGame) & ReleasedIn(EndGame))", "(Movie(EndGame) & ReleasedIn(EndGame) & ReleasedIn(EndGame) & ReleasedIn(EndGame) & ReleasedIn(EndGame) & ReleasedIn(EndGame) & ReleasedIn(EndGame) & ReleasedIn(EndGame) & ReleasedIn(EndGame)))", "(Movie(EndGame) & ReleasedIn(EndGame) & ReleasedIn(EndGame) & ReleasedIn(EndGame) & ReleasedIn(EndGame)))", "(Movie(EndGame) & ReleasedIn(EndGame) & ReleasedIn(EndGame))"]}
{"id": "folio_train_847", "nl": "EndGame was set in Washington.", "fol": "SetInLocation(EndGame,Washington)", "prediction": ["All x.(EndGame(x) -> SetInWashington(x))", "All x y.((EndGame(x) & Washington(y)) -> SetIn(x,y))", "All x.(EndGame(x) -> SetIn(x,Washington))", "all x y.((EndGame(x) & Washington(y)) -> SetIn(x,y))", "all x.(EndGame(x) -> SetInWashington(x))", "(EndGame(EndGame) & SetInWashington(EndGame))", "all x.(EndGame(x) -> SetIn(x,Washington))", "(EndGame(EndGame) & SetIn(EndGame) & SetIn(EndGame) & SetIn(EndGame) & SetIn(EndGame) & SetIn(EndGame) & SetIn(EndGame) & SetIn(EndGame) & SetIn(EndGame))", "(EndGame(EndGame) & SetIn(EndGame) & SetIn(EndGame) & SetIn(EndGame) & SetIn(EndGame) & SetIn(EndGame) & SetIn(EndGame) & SetIn(EndGame) & SetIn(EndGame) & SetIn(EndGame))", "(EndGame(EndGame) & SetIn(EndGame) & SetIn(EndGame) & SetIn(EndGame) & SetIn(EndGame) & SetIn(EndGame) & SetIn(EndGame) & SetIn(EndGame))", "(EndGame(EndGame) & SetIn(EndGame) & SetIn(EndGame) & SetIn(EndGame) & SetIn(EndGame) & SetIn(EndGame) & SetIn(EndGame) & SetIn(EndGame)))", "(EndGame(EndGame) & SetIn(EndGame) & SetIn(EndGame) & SetIn(EndGame) & SetIn(EndGame) & SetIn(EndGame) & SetIn(EndGame))", "(EndGame(EndGame) & SetIn(EndGame) & SetIn(EndGame) & SetIn(EndGame) & SetIn(EndGame) & SetIn(EndGame) & SetIn(EndGame) & SetIn(EndGame) & SetIn(EndGame)))", "(EndGame(EndGame) & SetIn(EndGame) & SetIn(EndGame) & SetIn(EndGame) & SetIn(EndGame) & SetIn(EndGame) & SetIn(EndGame)))", "(EndGame(EndGame) & SetIn(EndGame) & SetIn(EndGame) & SetIn(EndGame) & SetIn(EndGame) & SetIn(EndGame))", "(EndGame(EndGame) & SetIn(EndGame) & Washington(EndGame))"]}
{"id": "folio_train_848", "nl": "EndGame was filmed outside of Washington.", "fol": "FilmedOutsideLocation(EndGame,Washington)", "prediction": ["all x.(EndGame(x) -> FilmedOutsideOfWashington(x))", "All x.(EndGame(x) -> FilmedOutsideOfWashington(x))", "all x y.((EndGame(x) & Washington(y)) -> FilmedOutside(x,y))", "All x y.((EndGame(x) & Washington(y)) -> FilmedOutside(x,y))", "All x.(EndGame(x) -> ShotOutsideOfWashington(x))", "all x.(EndGame(x) -> FilmedOutsideWashington(x))", "all x y.((EndGame(x) & Washington(y)) -> FilmedOutsideOf(x,y))", "all x.(EndGame(x) -> FilmedOutsideOf(x,Washington))", "all x.(EndGame(x) -> ShotOutsideOfWashington(x))", "All x.(EndGame(x) -> FilmedOutsideWashington(x))", "All x.(EndGame(x) -> FilmedOutsideOf(x,Washington))", "All x y.((EndGame(x) & Washington(y)) -> FilmedOutsideOf(x,y))", "EndGame was filmed outside of Washington.", "(EndGame(EndGame) & FilmedOutsideOfWashington(EndGame))", "(EndGame(EndGame) & OutsideOfWashington(EndGame))", "all x y.((EndGame(x) & Washington(y)) -> FilmedAround(x,y))"]}
{"id": "folio_train_849", "nl": "Some movies are filmed in New York.", "fol": "exists x.FilmedInLocation(x,NewYork)", "prediction": ["exists x.(Movie(x) & FilmedIn(x,NewYork))", "exists x.(Movie(x) & FilmedInNewYork(x))", "exists x y.(Movie(x) & FilmedIn(x,y) & NewYork(y))", "exists x.(Movie(x) & ShotInNewYork(x))", "exists x.(Movie(x) & FilmedIn(x) & NewYork(y))", "exists x y.(Movie(x) & FilmedIn(x,y))", "exists x.(Movie(x) & ShotIn(x,NewYork))", "exists x.(Movie(x) & FilmedIn(x,NY))", "exists x.(Movie(x) & FilmedIn(x) & NewYork(x))", "exists x.(Movie(x) & FilmedIn(x,y))", "exists x.(Movie(x) & FilmedIn(x,York))", "exists x y.(Movie(x) & FilmedIn(x,NewYork))", "exists x.(Movie(x) & LocatedIn(x,NewYork))", "exists x.(Movie(x) & FilmedIn(x))", "exists x.(Movie(x) & FilmedIn(x,New York))", "exists x.(Movie(x) & FilmedIn(x NewYork))"]}
{"id": "folio_train_850", "nl": "Andy Chang directed EndGame.", "fol": "DirectedBy(AndyChang,EndGame)", "prediction": ["Andy Chang directedEndGame(x)", "all x.((AndyChang(x) & EndGame(y)) -> DirectedBy(x,y))", "all x.((AndyChang(x) & EndGame(x)) -> DirectedBy(x,AndyChang))", "all x.((AndyChang(x) & EndGame(x)) -> DirectedBy(x,y))", "all x.((AndyChang(x) & EndGame(y)) -> Directs(x,y))", "(DirectedByAndyChang(Andy) & EndGame(Andy))", "all x.((AndyChang(x) & EndGame(y)) -> Directed(x,y))", "all x.((AndyChang(x) & EndGame(x)) -> Directs(x,y))", "all x.((AndyChang(x) & EndGame(x)) -> DirectedBy(x,Andy))", "all x.((AndyChang(x) & EndGame(x)) -> DirectedBy(x,Andy,Chang))", "all x.((AndyChang(x) & EndGame(x)) -> DirectedBy(x))", "all x.((AndyChang(x) & EndGame(x)) -> DirectedBy(x,AndyChang,x))", "all x.((AndyChang(x) & EndGame(x)) -> DirectedBy(x,EndGame))", "all x.((AndyChang(x) & EndGame(x)) -> DirectedBy(x,Andy(x))", "all x.((AndyChang(x) & EndGame(x)) -> DirectedBy(x,Chang))", "(DirectedByAndyChan(Andy) & EndGame(Andy))"]}
{"id": "folio_train_851", "nl": "Andy Chang is from Hong Kong.", "fol": "OriginatesFrom(AndyChang,HongKong)", "prediction": ["Andy Chang is from HongKong.", "Andy Chang (HongKong)", "Andy Chang is from Hong Kong.", "(HongKong(AndyChang) & HongKong(AndyChang))", "(HongKong(AndyChang) -> HongKong(AndyChang))", "(HongKong(AndyChang) & LivesIn(Andy(Chang,HongKong))", "(HongKong(AndyChang) & HongKong(Andy))", "(HongKong(AndyChang) -> FromHongKong(AndyChang))", "(HongKong(AndyChang) -> From(AndyChang,HongKong))", "(HongKong(AndyChang) -> From(Andy(Chang,HongKong)))", "(HongKong(AndyChang) & LivesIn(AndyChang,HongKong))", "(HongKong(AndyChang) & LivesIn(Andy,HongKong))", "(HongKong(AndyChang) & From(Andy(Chang,HongKong))", "(HongKong(Andy) & AndyChang(Andy))", "(HongKong(AndyChang) & -HongKong(Andy))", "Andy Chang ((HongKong)) -> LivesIn(x,HongKong))"]}
{"id": "folio_train_852", "nl": "EndGame was filmed in New York.", "fol": "FilmedInLocation(EndGame,NewYork)", "prediction": ["All x.(EndGame(x) -> FilmedInNewYork(x))", "All x y.((EndGame(x) & NewYork(y)) -> FilmedIn(x,y))", "all x.(EndGame(x) -> FilmedInNewYork(x))", "all x y.((EndGame(x) & NewYork(y)) -> FilmedIn(x,y))", "All x.(EndGame(x) -> FilmedIn(x,NewYork))", "EndGame was filmed in New York.", "(FilmedInNewYork(EndGame) & FilmedInNewYork(EndGame))", "all x.(EndGame(x) -> FilmedIn(x,NewYork))", "All x y.((EndGame(x) & NewYork(y) & FilmedIn(x,y)) -> FilmedIn(x,y))", "All x.(EndGame(x) -> ShotInNewYork(x))", "(FilmedInNewYork(EndGame) | FilmedInNewYork(EndGame)))", "all x y.((EndGame(x) & NewYork(y) & FilmedIn(x,y)) -> FilmedIn(x,y))", "(FilmedInNewYork(EndGame) & FilmedInNewYork(EndGame))", "EndGame(EndGame) & FilmedInNewYork(EndGame))", "(Film(EndGame) & FilmedInNewYork(EndGame))", "All x.(EndGame(x) -> FilmedInNewYork(x))"]}
{"id": "folio_train_853", "nl": "EndGame was not directed by someone from Hong Kong.", "fol": "-exists x.(DirectedBy(x,EndGame) & OriginatesFrom(x,HongKong))", "prediction": ["all x.(EndGame(x) -> -DirectedByHongKong(x))", "All x.(EndGame(x) -> -DirectedByHongKong(x))", "all x y.((EndGame(x) & HongKong(y)) -> -DirectedBy(x,y))", "all x.(EndGame(x) -> -DirectedBy(x,HongKong))", "All x.(EndGame(x) -> -DirectedBy(x,HongKong))", "-(DirectedByHongKong(EndGame) & -DirectedByHongKong(EndGame))", "EndGame -DirectedByHongKong(EndGame))", "-(HongKongDirector(EndGame) & -HongKongDirector(EndGame))", "(-HongKongDirectedEndGame(EndGame))", "all x.(EndGame(x) -> -HongKongDirector(x))", "All x.(EndGame(x) -> -HongKongDirector(x))", "-(DirectedBy(EndGame) & -HongKong(EndGame))", "(-DirectedByHongKong(EndGame))", "-HongKongDirectedEndGame(EndGame)", "all x.(EndGame(x) -> -DirectedBy(x,hongkong))", "all x.(EndGame(x) -> -DirectedByHongkong(x))"]}
{"id": "folio_train_854", "nl": "All of Andy Chang's movies are filmed outside of Washington.", "fol": "all x.((IsMovie(x) & DirectedBy(AndyChang,x)) -> FilmedOutsideLocation(x,Washington))", "prediction": ["all x.((Movie(x) & AndyChang(x)) -> FilmedOutsideOfWashington(x))", "all x.((Movie(x) & AndyChang(x)) -> FilmedOutsideWashington(x))", "all x.((Movie(x) & AndyChang(x)) -> ShotOutsideOfWashington(x))", "all x.(AndyChang(x) -> FilmedOutsideOfWashington(x))", "all x y.((Movie(x) & AndyChang(y)) -> FilmedOutsideOfWashington(x,y))", "all x.((Movies(x) & AndyChang(x)) -> FilmedOutsideOfWashington(x))", "all x.(AndyChangMovie(x) -> FilmedOutsideOfWashington(x))", "all x.((Movie(x) & AndyChang(x)) -> FilmedOutside(x))", "all x.((Movie(x) & AndyChang(x)) -> FilmedOutsideOf(x,Washington))", "all x y.((Movie(x) & AndyChang(y)) -> FilmedOutsideOfWashington(x))", "all x y.((Movie(x) & AndyChang(y)) -> FilmedOutsideOfWashington(y))", "all x.((Movie(x) & AndyChang(x)) -> FilmedOutside(x,Washington))", "all x y.((Movie(x) & AndyChang(y)) -> FilmedOutside(x,y))", "all x y z.((Movie(x) & AndyChang(y) & Washington(z)) -> FilmedOutside(x,y,z))", "all x y.((Movie(x) & AndyChang(y)) -> FilmedOutsideOf(x,y))", "all x y z.((Movie(x) & AndyChang(y) & Washington(z)) -> FilmedOutside(y,z))"]}
{"id": "folio_train_855", "nl": "Six, seven and eight are real numbers.", "fol": "(IsRealNumber(Six) & IsRealNumber(Seven) & IsRealNumber(Eight))", "prediction": ["all x.((Six(x) | Seven(x) | Eight(x)) -> RealNumber(x))", "(RealNumbers(Six) & RealNumbers(Seven) & RealNumbers(Eight))", "all x.((Six(x) | Seven(x) | Eight(x)) -> RealNumbers(x))", "all x.((Number(x) & (Six(x) | Seven(x) | Eight(x))) -> Real(x))", "all x.((RealNumber(x) & (Six(x) | Seven(x) | Eight(x))) -> RealNumber(x))", "all x.((Number(x) & (Six(x) | Seven(x) | Eight(x))) -> RealNumber(x))", "all x.(RealNumber(x) -> (Six(x) | Seven(x) | Eight(x)))", "all x.((Number(x) & Real(x)) -> (Six(x) | Seven(x) | Eight(x)))", "all x.(RealNumber(x) -> (Six(x) | Seven(x) | Eight(x)))", "(RealNumbers(Six) | RealNumbers(Seven) | RealNumbers(Eight))", "(RealNumber(Six) & RealNumber(Seven) & RealNumber(Eight))", "all x.((Number(x) & Number(x,6)) | Number(x,7) | Number(x,8)))", "all x.((Number(x,6) | Number(x,7) | Number(x,8))) -> Real(x))", "All x.((Six(x) | Seven(x) | Eight(x)) -> RealNumber(x))", "(RealNumbers(six) & RealNumbers(seven) & RealNumbers(seven) & RealNumbers(seven))", "(RealNumbers(Six,7) & RealNumbers(Seven,8))"]}
{"id": "folio_train_856", "nl": "If a real number equals another real number adding one, the first number is larger.", "fol": "all x y.((IsRealNumber(x) & IsRealNumber(y) & EqualsAfterAddingOne(x,y)) -> IsLargerThan(x,y))", "prediction": ["all x.((RealNumber(x) & AddsRealNumber(x)) -> Larger(x))", "all x y.((RealNumber(x) & RealNumber(y) & Adds(x,y)) -> Larger(x,y))", "all x y.((RealNumber(x) & RealNumber(y) & AddsOne(x,y)) -> Larger(x,y))", "all x y.((RealNumber(x) & RealNumber(y) & Adds(x,y)) -> Larger(x))", "all x y.((RealNumber(x) & RealNumber(y) & AddsNumber(x,y)) -> Larger(x,y))", "all x y.((RealNumber(x) & RealNumber(y) & AddsOne(x,y)) -> Larger(x))", "all x y.((RealNumber(x) & RealNumber(y) & AddsRealNumber(x,y)) -> Larger(x,y))", "all x.((RealNumber(x) & RealNumber(x) & AddsOne(x)) -> Larger(x))", "all x.((RealNumber(x) & AddsRealNumber(x)) -> LargerNumber(x))", "all x y.((RealNumber(x) & RealNumber(y) & AddsAddition(x,y)) -> Larger(x,y))", "all x y.((RealNumber(x) & RealNumber(y) & AddsNumber(x,y)) -> Larger(x))", "all x y.((RealNumber(x) & RealNumber(y) & AddsOne(x,y)) -> Larger(y))", "all x y.((RealNumber(x) & RealNumber(y) & AddsRealNumber(x,y)) -> Larger(x))", "all x.((RealNumber(x) & AddsNumber(x)) -> Larger(x))", "all x y.((RealNumber(x) & RealNumber(y) & Adds(x,y)) -> Larger(y))", "all x y.((RealNumber(x) & AddsRealNumber(x,y)) -> Larger(x,y))"]}
{"id": "folio_train_857", "nl": "If the number x is larger than number y, then y is not larger than x.", "fol": "all x y.(IsLargerThan(x,y) -> -IsLargerThan(y,x))", "prediction": ["all x y.((Number(x) & Number(y) & LargerThan(x,y)) -> -LargerThan(y,x))", "all x.((Number(x) & LargerThan(x,y)) -> -LargerThan(y,x))", "all x y.((Number(x) & Number(y) & Larger(x,y)) -> -Larger(y,x))", "all x.((Number(x) & LargerThan(x,y)) -> -LargerThan(x,y))", "all x y.((Number(x) & Number(y) & LargerThan(x,y)) -> -LargerThan(x,y))", "all x y.((Number(x) & Number(y)) -> -LargerThan(x,y))", "all x y.((Node(x) & Number(y) & LargerThan(x,y)) -> -LargerThan(y,x))", "all x y z.((Number(x) & Number(y) & Number(z) & LargerThan(x,y)) -> -LargerThan(y,z))", "all x.((Number(x) & LargerThanNumber(x,y)) -> -LargerThanNumber(y,x))", "all x y.((Number(x) & Number(y) & Larger(x,y)) -> -Larger(x,y))", "all x y.((Number(x) & Number(y) & LargerThan(x,y)) -> -LargerThan(y,y))", "all x y.((Number(x) & Number(y)) -> -LargerThan(y,x))", "all x y.((Number(x) & Number(y) & Larger(x,y)) -> -Larger(y,y))", "all x y z.((Number(x) & Number(y) & Number(z) & LargerThan(x,y,z)) -> -LargerThan(y,z))", "all x y z.((Number(x) & Number(y) & Number(z) & LargerThan(x,y,z)) -> -LargerThan(y,x))", "all x.((Number(x) & LargerThan(x,y)) -> -LargerThan(x,z))"]}
{"id": "folio_train_858", "nl": "Seven equals six plus one.", "fol": "EqualsAfterAddingOne(Seven,Six)", "prediction": ["all x.(Seven(x) -> EqualsSixPlusOne(x))", "all x y.((Seven(x) & SixPlusOne(y)) -> Equals(x,y))", "all x.((Seven(x) & SixPlusOne(x)) -> Equals(x,6))", "all x.(Seven(x) -> EqualsSixPlusOne(x))", "All x.(Seven(x) -> EqualsSixPlusOne(x))", "all x y.((Seven(x) & Six(y)) -> PlusOne(x,y))", "all x.(Seven(x) -> Equals(x,6) & PlusOne(x))", "all x y.((Seven(x) & SixPlusOne(y)) -> Equal(x,y))", "all x y.((Seven(x) & Six(y) & One(y)) -> Equals(x,y))", "all x y.((Seven(x) & Six(y)) -> Equals(x,y))", "all x.(Seven(x) -> SixPlusOne(x))", "all x y z.((Seven(x) & SixPlusOne(y)) -> Equals(x,y))", "all x y z.((Seven(x) & SixPlusOne(y)) -> Equals(x,y,z))", "all x.(Seven(x) -> Equals(x,6) & One(x))", "all x.(Seven(x) -> (EqualsSixPlusOne(x)))", "all x.(Seven(x) -> EqualSixPlusOne(x))"]}
{"id": "folio_train_859", "nl": "Eight equals seven plus one.", "fol": "EqualsAfterAddingOne(Eight,Seven)", "prediction": ["all x.((Eight(x) & SevenPlusOne(x)) -> Equals(x,7))", "all x y.((Eight(x) & SevenPlusOne(y)) -> Equals(x,y))", "all x.(Equals(x,7) & PlusOne(x))", "all x.(Equals(x,7) -> PlusOne(x))", "all x.((Equals(x,7) & PlusOne(x)) -> Eight(x))", "all x y.((Eight(x) & Seven(y)) -> Equals(x,y))", "all x.((Eight(x) & SevenPlusOne(x)) -> Equals(x,y))", "all x y.((Eight(x) & Seven(y)) -> PlusOne(x,y))", "all x y.((Eight(x) & SevenPlusOne(y)) -> Equal(x,y))", "all x.(Equals(x,7) & One(x))", "all x.((Eight(x) & SevenPlusOne(x)) -> Equals(x,7))", "all x y.((Eight(x) & Seven(y) & One(y)) -> Equals(x,y))", "all x.((Equals(x,7) & PlusOne(x)) -> EightEquals(x,7))", "all x.((Eight(x) & SevenPlusOne(x)) -> Equal(x,7))", "all x.(Equals(x,8) -> SevenPlusOne(x))", "all x.(EqualsSevenPlusOne(x) -> Eight(x))"]}
{"id": "folio_train_860", "nl": "Two is positive.", "fol": "IsPositive(Two)", "prediction": ["all x.((Two(x) & Positive(x)) -> Positive(x))", "All x.((Two(x) & Positive(x)) -> Positive(x))", "All x.(Two(x) -> Positive(x))", "all x.(Two(x) -> Positive(x))", "all x.(Positive(x) -> Positive(x))", "(Positive(Two) -> Positive(Two))", "(Positive(Two) -> Positive(Two))", "all x.(Positive(x) -> (Two(x) & Positive(x)))", "(Positive(Two) & Positive(Two))", "exists x.(Two(x) & Positive(x))", "(Positive(x) & Positive(x))", "(Positive(Two))", "all x.((Two(x) -> Positive(x))", "(Positive(Positive(Positive) & Positive(Positive))", "(Positive(x) -> Positive(x))", "(Positive(Positive(Positive(Positive))"]}
{"id": "folio_train_861", "nl": "If a number is positive, then the double of it is also positive.", "fol": "all x y.((IsPositive(x) & EqualsDoubleOf(y,x)) -> IsPositive(y))", "prediction": ["all x.((Number(x) & Positive(x)) -> Positive(x))", "all x.((Number(x) & Positive(x)) -> PositiveDoppel(x))", "all x.((Number(x) & Positive(x)) -> DoublePositive(x))", "all x.((Number(x) & Positive(x)) -> PositiveDouble(x))", "all x.((Noun(x) & Positive(x)) -> Positive(x))", "all x.(Positive(x) -> DoubleOf(x,y))", "all x.(Positive(x) -> DoubleOfNumber(x))", "all x.(Positive(x) -> Double(x))", "all x.(PositiveNumber(x) -> DoublePositiveNumber(x))", "all x.(Positive(x) -> DoublePositive(x))", "all x.((Number(x) & Positive(x)) -> Double(x))", "all x.((Numera(x) & Positive(x)) -> Positive(x))", "all x.((Numeracy(x) & Positive(x)) -> Positive(x))", "all x.(Positive(x) -> DoubleOf(x))", "all x.((Numerical(x) & Positive(x)) -> Positive(x))", "all x.((Notion(x) & Positive(x)) -> Positive(x))"]}
{"id": "folio_train_862", "nl": "Eight is the double of four.", "fol": "EqualsDoubleOf(Eight,Four)", "prediction": ["all x.((Eight(x) & DoubleOfFour(x)) -> DoubleOfFour(x))", "All x.(Eight(x) -> DoubleOfFour(x))", "All x.((Eight(x) & DoubleOfFour(x)) -> DoubleOfFour(x))", "all x.(Eight(x) -> DoubleOfFour(x))", "all x.((Eight(x) & DoubleOf(x,4)) -> DoubleOf(x,4))", "All x.((Eight(x) & DoubleOf(x,4)) -> DoubleOf(x,4))", "(DoppelOfFour(Eight) -> DoubleOfFour(Eight))", "All x.(Eight(x) -> DoubleOfFour(x))", "(DoppelOfFour(Eight) & DoubleOfFour(Eight))", "all x.(Eight(x) -> DoubleOfFour(x))", "(DoppelOfFour(Eight) -> DoubleOfFour(Eight))", "all x.((Eight(x) & Four(x)) -> Double(x))", "all x.((Eight(x) & DoubleOfFour(x)) -> DoubleOf(x,4))", "(DoubleOfFour(Eight) -> DoubleOfFour(Eight))", "all x.((Eight(x) & Four(x)) -> DoubleOf(x,4))", "(DoppelOfFour(eight) -> DoubleOfFour(e8))"]}
{"id": "folio_train_863", "nl": "Four is the double of two.", "fol": "EqualsDoubleOf(Four,Two)", "prediction": ["all x.(Four(x) -> DoubleOfTwo(x))", "All x.(Four(x) -> DoubleOfTwo(x))", "all x.((Four(x) & DoubleOfTwo(x)) -> DoubleOfTwo(x))", "all x.((Four(x) & DoubleOf(x,2)) -> DoubleOf(x,2))", "All x.((Four(x) & DoubleOfTwo(x)) -> DoubleOfTwo(x))", "all x y.((Four(x) & Two(y)) -> Double(x,y))", "all x y.((Four(x) & Two(y)) -> DoubleOf(x,y))", "all x.(Four(x) -> DoubleOfTwo(x))", "All x.((Four(x) & DoubleOf(x,2)) -> DoubleOf(x,2))", "all x y.((Four(x) & DoubleOf(y,2)) -> DoubleOf(x,y))", "All x y.((Four(x) & Two(y)) -> Double(x,y))", "all x y z.((Four(x) & Two(y) & Double(z)) -> Double(x,y,z))", "All x.(Four(x) -> DoubleOfTwo(x))", "all x y z.((Four(x) & Two(y) & Double(z)) -> DoubleOf(x,y,z))", "all x.((Four(x) & DoubleOf(x,2)) -> DoubleOf(x,3))", "all x.(Four(x) -> DoubleOf(x,2))"]}
{"id": "folio_train_864", "nl": "Eight is larger than seven.", "fol": "IsLargerThan(Eight,Seven)", "prediction": ["all x.((Eight(x) & Seven(x)) -> Larger(x))", "all x y.((Eight(x) & Seven(y)) -> Larger(x,y))", "all x.((Eight(x) & Seven(x)) -> LargerThan(x,7))", "all x y.((Eight(x) & Seven(y)) -> LargerThan(x,y))", "All x.((Eight(x) & Seven(x)) -> Larger(x))", "all x.((Eight(x) & Seven(x)) -> Larger(x,7))", "All x.((Eight(x) & Seven(x)) -> LargerThan(x,7))", "all x.((Eight(x) & Seven(x)) -> LargerThan(x))", "All x y.((Eight(x) & Seven(y)) -> LargerThan(x,y))", "All x y.((Eight(x) & Seven(y)) -> Larger(x,y))", "All x.(Eight(x) -> LargerThanSeven(x))", "All x.((Eight(x) & -Seven(x)) -> Larger(x))", "All x.((Eight(x) & -Seven(x)) -> LargerThan(x,7))", "All x.((Eight(x) & Seven(x)) -> LargerThan(x))", "all x.((Eight(x) & -Seven(x)) -> Larger(x))", "all x.((Eight(x) & Seven(x)) -> Larger(x,y))"]}
{"id": "folio_train_865", "nl": "Eight is positive.", "fol": "IsPositive(Eight)", "prediction": ["All x.(Eight(x) -> Positive(x))", "All x.((Eight(x) & Positive(x)) -> Positive(x))", "all x.((Eight(x) & Positive(x)) -> Positive(x))", "all x.(Eight(x) -> Positive(x))", "(Positive(Eight))", "Alles x.((Eight(x) & Positive(x)) -> Positive(x))", "Alles x.(Eight(x) -> Positive(x))", "All x.((Eight(x) & Positive(x)) -> -Positive(x))", "(Positive(Eight) -> Positive(Eight))", "all x.((Eight(x) & Positive(x)) -> -Positive(x))", "All x.(Acht(x) -> Positive(x))", "All x.((Eight(x) & Positive(x)) -> Positive(x))", "all x.((Eight(x) & Positive(x)) -> Positive(x))", "(Positive(Eight) -> Positive(Eight))", "Eight(x) -> Positive(x))", "All x.((Eight(x) -> Positive(x))"]}
{"id": "folio_train_866", "nl": "Six is larger than seven.", "fol": "IsLargerThan(Six,Seven)", "prediction": ["all x.(Six(x) -> LargerThanSeven(x))", "all x y.((Six(x) & Seven(y)) -> Larger(x,y))", "all x y.((Six(x) & Seven(y)) -> LargerThan(x,y))", "all x.((Six(x) & Seven(x)) -> Larger(x))", "All x.(Six(x) -> LargerThanSeven(x))", "all x.(Six(x) -> LargerThan(x,7))", "All x.(Six(x) -> LargerThan(x,7))", "All x y.((Six(x) & Seven(y)) -> Larger(x,y))", "All x y.((Six(x) & Seven(y)) -> LargerThan(x,y))", "all x.((Six(x) & Seven(x)) -> LargerThan(x,6))", "all x.((Six(x) & Seven(x)) -> LargerThan(x,7))", "all x.((Six(x) & Seven(x)) -> Larger(x,6))", "all x.(Six(x) -> LargerThan(x,Seven))", "exists x.(Six(x) & LargerThan(x,7))", "All x.((Six(x) & Seven(x)) -> Larger(x))", "all x.((Six(x) & Seven(x)) -> LargerThan(x,Six))"]}
{"id": "folio_train_867", "nl": "A dog never tells the truth.", "fol": "all x.(IsDog(x) -> AlwaysLies(x))", "prediction": ["all x.(Dog(x) -> -TellsTruth(x))", "all x.(Dog(x) -> NeverTellsTruth(x))", "all x y.((Dog(x) & Truth(y)) -> -Tells(x,y))", "all x y.((Dog(x) & Truth(y)) -> NeverTells(x,y))", "exists x.(Dog(x) & -TellsTruth(x))", "all x.(Dog(x) -> -(TellsTruth(x) | TellsTruth(x))))", "all x.(Dog(x) -> -TellsTruth(x))", "all x.(Dog(x) -> -TellsTrue(x))", "all x y.((Dog(x) & Truth(y)) -> NeverTell(x,y))", "all x.(Dog(x) -> -SellsTruth(x))", "all x.(Dog(x) -> -TellTruth(x))", "all x y.((Dog(x) & Truth(y)) -> -Tell(x,y))", "all x.(Dog(x) -> NeverTellsTruth(x))", "all x.(Dog(x) -> -tellsTruth(x))", "all x.(Dog(x) -> -(TellsTruth(x) | TellsTruth(x)))", "all x.(Dog(x) & -TellsTruth(x))"]}
{"id": "folio_train_868", "nl": "Some poker players are dogs.", "fol": "exists x.(IsPokerPlayer(x) & IsDog(x))", "prediction": ["exists x.(PokerPlayer(x) & Dog(x))", "exists x.(Player(x) & Poker(x) & Dog(x))", "exists x.(Player(x) & Dog(x))", "exists x y.(PokerPlayer(x) & Dog(y))", "exists x.(PokerPlayer(x) & Canine(x))", "exists x y.(PokerPlayer(x) & PokerPlayer(y) & Dog(x))", "exists x.(Player(x) & PokerPlayer(x) & Dog(x))", "exists x.(PokerPlayer(x) & Dog(x))", "exists x.(Player(x) & PokerPoker(x) & Dog(x))", "exists x y.(PokerPlayer(x) & PokerPlayer(y) & Dog(y))", "exists x.(PokerPlayer(x) & Dog(x))", "exists x.(Player(x) & Poker(y) & Dog(x))", "exists x.(PokerPlayer(x) & CanDog(x))", "exists x.(PokemonPlayer(x) & Dog(x))", "exists x y.(PokerPlayer(x) & PokerPlayer(y) & Dog(z))", "exists x.(Player(x) & Poker(y) & Dog(z))"]}
{"id": "folio_train_869", "nl": "Some poker players never tell the truth.", "fol": "exists x.(IsPokerPlayer(x) & AlwaysLies(x))", "prediction": ["exists x.(PokerPlayer(x) & -TellsTruth(x))", "exists x.(PokerPlayer(x) & -TellTruth(x))", "exists x y.(PokerPlayer(x) & PokerPlayer(y) & -TellsTruth(x,y))", "exists x.(PokerPlayer(x) & NeverTellsTruth(x))", "exists x.(Player(x) & -TellsTruth(x))", "exists x y.(PokerPlayer(x) & PokerPlayer(y) & NeverTellsTruth(x,y))", "exists x.(PokerPlayer(x) & -TellTheTruth(x))", "exists x y.(PokerPlayer(x) & PokerPlayer(y) & -TellTruth(x,y))", "exists x.(Player(x) & PokerPlayer(x) & -TellsTruth(x))", "exists x.(PokerPlayer(x) & -(TellsTruth(x) | TellsTruth(x))))", "exists x y.(PokerPlayer(x) & PokerPlayer(y) & -TellsTruth(x))", "exists x.(PokerPlayer(x) & NeverTellTruth(x))", "exists x y.(PokerPlayer(x) & PokerPlayer(y) & -TellsTruth(y))", "exists x y.(PokerPlayer(x) & PokerPlayer(y) & NeverTellTruth(x,y))", "exists x y.(PokerPlayer(x) & PokerPlayer(y) & -TellsTruth(y,x))", "exists x y.(PokerPlayer(x) & Player(y) & -TellsTruth(x,y))"]}
{"id": "folio_train_870", "nl": "All Asians are human. ", "fol": "all x.(IsAsian(x) -> IsHuman(x))", "prediction": ["all x.(Asian(x) -> Human(x))", "all x.(Asiatic(x) -> Human(x))", "all x y.((Asian(x) & Human(y)) -> Human(x))", "all x.exists y.(Asian(x) & Human(y))", "all x.(Asian(x) -> Human(x))", "all x.(Asianic(x) -> Human(x))", "all x.exists y.(Asian(x) & Human(y) & LivesIn(x,y))", "all x y.((Asian(x) & Human(y)) -> Is(x,y))", "all x y.((Asian(x) & Human(y)) -> Human(x,y))", "all x y.((Asian(x) & Human(y)) -> AllOf(x,y))", "all x.(Asiac(x) -> Human(x))", "all x y.((Asian(x) & Human(y)) -> All(x,y))", "all x y.((Asian(x) & Human(y)) -> Has(x,y))", "All x.(Asian(x) -> Human(x))", "all x.(Asias(x) -> Human(x))", "(all x.(Asian(x) -> Human(x)))"]}
{"id": "folio_train_871", "nl": "All Chinese are Asian.", "fol": "all x.(IsChinese(x) -> IsAsian(x))", "prediction": ["all x.(Chinese(x) -> Asian(x))", "all x.(China(x) -> Asian(x))", "all x y.((Chinese(x) & Chinese(y)) -> Asian(x))", "all x.(Chinese(x) -> Asiatic(x))", "all x.((Chinese(x) & Asian(x)) -> Chinese(x))", "all x.(Changy(x) -> Asian(x))", "All x.(Chinese(x) -> Asian(x))", "all x.(Chinese(x) -> Asian(x))", "(All x.(Chinese(x) -> Asian(x))", "all x y.((Chinese(x) & Asian(y)) -> Chinese(x))", "(all x.(Chinese(x) -> Asian(x)))", "(all x.(Chinese(x) -> Asian(x))", "all x y.((Chinese(x) & Asian(y)) -> Is(x,y))", "all x.(Changqian(x) -> Asian(x))", "(All x.(Chinese(x) -> Asian(x)))", "all x y.((Chinese(x) & Chinese(y)) -> Asian(x,y))"]}
{"id": "folio_train_872", "nl": "A man is either Chinese or British.", "fol": "all x.(IsChinese(x) | IsBritish(x))", "prediction": ["all x.(Man(x) -> (Chinese(x) | British(x)))", "exists x.(Man(x) & (Chinese(x) | British(x)))", "all x.(Men(x) -> (Chinese(x) | British(x)))", "all x.(Man(x) -> (China(x) | British(x)))", "all x.(Man(x) -> (Chinese(x) | British(x)))", "all x.(Mammal(x) -> (Chinese(x) | British(x)))", "all x.(Man(x) -> (IsChinese(x) | IsBritish(x)))", "all x.(Man(x) -> ((Chinese(x) | British(x))))", "all x.(Man(x) -> (Chinese(x) | British(x)))", "all x.(Male(x) -> (Chinese(x) | British(x)))", "all x.(Man(x) -> (Chinese(x) | Britannia(x)))", "all x.(Man(x) -> (Changan(x) | British(x)))", "all x.(Man(x) -> (Changian(x) | British(x)))", "all x.(Man(x) -> (Chinese(x) | Britannic(x)))", "all x.(Man(x) -> (Changy(x) | British(x)))", "all x y.((Man(x) & Chinese(y)) | British(y))"]}
{"id": "folio_train_873", "nl": "All British are European. ", "fol": "all x.(IsBritish(x) -> IsEuropean(x))", "prediction": ["all x.(British(x) -> European(x))", "all x.((British(x) & European(x)) -> British(x))", "(all x.(British(x) -> European(x)))", "all x y.((British(x) & European(y)) -> British(x))", "all x.(British(x) -> European(x))", "all x.(British(x) -> European(x))", "all x.(BritishBritish(x) -> European(x))", "All x.(British(x) -> European(x))", "all x.(Britain(x) -> European(x))", "(All x.(British(x) -> European(x)))", "all x.((British(x) & European(x)) -> -British(x))", "(all x.(British(x) -> European(x))", "all x y.((British(x) & European(y)) -> Is(x,y))", "all x.(British(x) -> Europarian(x))", "-all x.(British(x) -> European(x))", "all x.(British(x) -> Europ\u00e9an(x))"]}
{"id": "folio_train_874", "nl": "All Spanish are European. ", "fol": "all x.(IsSpanish(x) -> IsEuropean(x))", "prediction": ["all x.(Spanish(x) -> European(x))", "all x.(Spanish(x) -> European(x))", "(all x.(Spanish(x) -> European(x)))", "All x.(Spanish(x) -> European(x))", "all x.(Spanish(x) -> European(x))", "all x y.((Spanish(x) & European(y)) -> Is(x,y))", "all x y.((Spanish(x) & European(y)) -> European(x))", "all x.(Spanish(x) -> Europ\u00e9an(x))", "all x y.((Spanish(x) & European(y)) -> Spanish(x))", "(AllSpanish(Spanish) -> European(Spanish))", "all x.(Spanish(x) -> European(x))", "all x y.((Spanish(x) & European(y)) -> LocatedIn(x,y))", "-all x.(Spanish(x) -> European(x))", "(all x.(Spanish(x) -> European(x))", "all x y.((Spanish(x) & European(y)) -> German(x))", "all x y.((Spanish(x) & European(y)) -> -European(x))"]}
{"id": "folio_train_875", "nl": "No Indian is European. ", "fol": "all x.(IsIndian(x) -> -IsEuropean(x))", "prediction": ["-exists x.(Indian(x) & European(x))", "-exists x.(Individual(x) & European(x))", "-exists x.(Indian(x) & European(x))", "-exists x.(Indien(x) & European(x))", "all x.(Indian(x) -> -European(x))", "all x.(Individual(x) -> -European(x))", "-exists x.(Individual(x) & -European(x))", "all x.(Indian(x) -> -European(x))", "-exists x.(Individual(x) & European(x))", "all x.(Indien(x) -> -European(x))", "-exists x.(Indian(x) & European(x))", "-exists x.(Individual(x) & Europarian(x))", "(-exists x.(Indian(x) & European(x)))", "-exists x.(Indian(x) & Europarian(x))", "-exists x.(Individual(x) & Europ\u00e9en(x))", "-exists x.(Individual(x) & Europ\u00e9an(x))"]}
{"id": "folio_train_876", "nl": "Jessee is either both an Indian and a human, or neither an Indian nor a human.", "fol": "((IsIndian(Jesse) & IsHuman(Jesse) & -(-IsIndian(Jesse) & -IsHuman(Jesse))) | (-(IsIndian(Jesse) & IsHuman(Jesse)) & -IsIndian(Jesse) & -IsHuman(Jesse)))", "prediction": ["all x.(Jessee(x) -> ((Indian(x) & Human(x)) | (-Indian(x) & Human(x)))))", "all x.(Jessee(x) -> ((Indian(x) & Human(x)) | -Indian(x) & Human(x))))", "all x.(Jessee(x) -> ((Individual(x) & Human(x)) | (-Individual(x) & Human(x)))))", "all x.(Jessee(x) -> ((Indian(x) & Human(x)) | (-Indian(x) & Human(x)))))", "all x.(Jessee(x) -> ((Indian(x) & Human(x)) | -Indian(x) & Human(x))))", "all x.(Jessee(x) -> ((Individual(x) & Human(x)) | -Individual(x) & Human(x))))", "all x.(Jessee(x) -> ((Individual(x) & Human(x)) | (-Individual(x) & Human(x))))", "all x.(Jessee(x) -> ((Indian(x) & Human(x)) | (-Indian(x) & Human(x))))", "all x.(Jessee(x) -> ((Indian(x) & Human(x)) | -Indian(x) & Human(x)))", "all x.(Jessee(x) -> ((Indian(x) & Human(x)) | (-Indian(x) & Human(x)))))", "all x.(Jessee(x) -> ((Indian(x) & Human(x)) | (-Indian(x) & Human(x))))", "all x.(Jessee(x) -> (Individual(x) & Human(x)) | (-Individual(x) & Human(x))))", "all x.(Jessee(x) -> (Indian(x) & Human(x)) | (-Indian(x) & Human(x))))", "all x.(Jessee(x) -> ((Indian(x) & Human(x)) | -Indian(x) & Human(x)))", "all x.(Jessee(x) -> ((Individual(x) & Human(x)) | -Individual(x) & Human(x)))", "all x.(Jessee(x) -> (Indian(x) | Human(x)) | (-Indian(x) & Human(x))))"]}
{"id": "folio_train_877", "nl": "Jesse is Chinese.", "fol": "IsChinese(Jesse)", "prediction": ["all x.(Jesse(x) -> Chinese(x))", "Jesse is Chinese.", "(Chinese(Jesse) & Chinese(Jesse))", "All x.(Jesse(x) -> Chinese(x))", "(Chinese(Jesse) | Chinese(Jesse)))", "exists x.(Jesse(x) & Chinese(x))", "(Chinese(Jesse) & -Chinese(Jesse))", "all x.((Jesse(x) & Chinese(x)) -> Chinese(x))", "all x.((Jesse(x) & Chinese(x)) -> Is(x,y))", "all x.(Jesse(x) -> Chinese(x))", "ALL x.(Jesse(x) -> Chinese(x))", "(Chinese(Jesse) & LivesIn(Jesse,Chinese))", "all x.((Jesse(x) & Chinese(x)) -> -Chinese(x))", "all x.(Jesse(x) -> Chinese(x))", "(Chinese(Jesse) & LivesIn(Jesse,China))", "(Chinese(Jesse) | Chinese(Jesse))"]}
{"id": "folio_train_878", "nl": "Jesse is not Chinese.", "fol": "-IsChinese(Jesse)", "prediction": ["-Chinese(Jesse)", "all x.(Jesse(x) -> -Chinese(x))", "(-Chinese(Jesse))", "All x.(Jesse(x) -> -Chinese(x))", "(-Chinese(Jesse) & -Chinese(Jesse))", "exists x.(Jesse(x) & -Chinese(x))", "Jesse is notChinese(Jesse)", "(-Chinese(Jesse) -> -Chinese(Jesse))", "-(Chinese(Jesse) & -Chinese(Jesse))", "(-Chinese(Jesse) -> -Chinese(Jesse))", "Jesse & -Chinese(Jesse)", "Jesse is -Chinese(Jesse)", "Jesse -Chinese(Jesse)", "(-Chinese(Jesse) & NotChinese(Jesse))", "(-Chinese(Jesse) & -China(Jesse))", "(-Chinese(Jesse)"]}
{"id": "folio_train_879", "nl": "If Jesse is either an Indian or a Spanish, then Jesse is either both British and European, or neither British nor European.", "fol": "((IsIndian(Jesse) | IsSpanish(Jesse)) -> ((IsBritish(Jesse) & IsEuropean(Jesse)) | (-IsBritish(Jesse) & -IsEuropean(Jesse))))", "prediction": ["all x.((Jesse(x) & (Indian(x) | Spanish(x))) -> ((British(x) & European(x)) | (-British(x) & European(x)))))", "all x.((Jesse(x) & (Individual(x) | Spanish(x))) -> ((British(x) & European(x)) | (-British(x) & European(x)))))", "all x.((Jesse(x) & (Indian(x) | Spanish(x))) -> (British(x) & European(x)) | (-British(x) & European(x))))", "all x.((Jesse(x) & (Indian(x) | Spanish(x))) -> ((British(x) & European(x)) | -British(x) & European(x))))", "all x.((Jesse(x) & (Individual(x) | Spanish(x))) -> (British(x) & European(x)) | (-British(x) & European(x))))", "all x.((Jesse(x) & (Individual(x) | Spanish(x))) -> ((British(x) & European(x)) | -British(x) & European(x))))", "all x.((Jesse(x) & (Individual(x) | Spanish(x))) -> ((British(x) & European(x)) | (-British(x) & European(x))))", "all x.((Jesse(x) & (Indian(x) | Spanish(x))) -> (British(x) & European(x)) | -British(x) & European(x)))", "all x.((Jesse(x) & (Indian(x) | Spanish(x))) -> ((British(x) & European(x)) | (-British(x) & European(x))))", "all x.((Jesse(x) & (Individual(x) | Spanish(x))) -> (British(x) & European(x)) | -British(x) & European(x)))", "all x.((Jesse(x) & Indian(x)) | Spanish(x)) -> ((British(x) & European(x)) | (-British(x) & European(x))))", "all x.((Jesse(x) & Indian(x)) | Spanish(x)) -> ((British(x) & European(x)) | (-British(x) & European(x)))))", "all x.((Jesse(x) & (Indian(x) | Spanish(x))) -> (British(x) | European(x)))", "all x.((Jesse(x) & (Indian(x) | Spanish(x))) -> ((British(x) & European(x)) | (-British(x) & European(x)))))", "all x.((Jesse(x) & (Individual(x) | Spanish(x))) -> (British(x) | European(x)))", "all x.((Jesse(x) & (Indian(x) | Spanish(x))) -> ((British(x) & -European(x)) | (-British(x) & European(x)))))"]}
{"id": "folio_train_880", "nl": "No people who never admit a mistake are good teachers.", "fol": "all x.(NeverAdmitsMistakes(x) -> -IsGoodTeacher(x))", "prediction": ["all x.((Person(x) & NeverAcceptsMistake(x)) -> GoodTeacher(x))", "all x.((Person(x) & NeverAdmitsMistake(x)) -> GoodTeacher(x))", "all x.((Person(x) & NeverAcknowledgesMistake(x)) -> GoodTeacher(x))", "-exists x.((Person(x) & NeverAcceptsMistake(x)) -> GoodTeacher(x))", "all x.((Person(x) & -AcknowledgesMistake(x)) -> GoodTeacher(x))", "-exists x.((Person(x) & -AcknowledgesMistake(x)) -> GoodTeacher(x))", "-exists x.((Person(x) & -AdmitsMistake(x)) -> GoodTeacher(x))", "-exists x.((Person(x) & NeverAdmitsMistake(x)) -> GoodTeacher(x))", "all x.((Person(x) & -AdmitsMistake(x)) -> GoodTeacher(x))", "-exists x.((Person(x) & NeverAcknowledgesMistake(x)) -> GoodTeacher(x))", "-exists x.((Person(x) & -AcceptsMistake(x)) -> GoodTeacher(x))", "all x.((Person(x) & -AcceptsMistake(x)) -> GoodTeacher(x))", "all x.((Person(x) & NeverAcceptsMistake(x)) -> GoodTeacher(x))", "all x.((Person(x) & AdmitsMistake(x)) -> GoodTeacher(x))", "-exists x.((Person(x) & AdmitsMistake(x)) -> GoodTeacher(x))", "-exists x.((Person(x) & AdmitsMistake(x) & -GoodTeacher(x)))"]}
{"id": "folio_train_881", "nl": "Some well-informed people are people who never admit a mistake.", "fol": "exists x.(IsWellInformed(x) & NeverAdmitsMistakes(x))", "prediction": ["exists x.(WellInformed(x) & -AcceptsMistake(x))", "exists x.(WellInformed(x) & -AdmitsMistake(x))", "exists x.(WellInformed(x) & -AcceptMistake(x))", "exists x.(WellInformedPerson(x) & -AcceptsMistake(x))", "exists x.(WellInformed(x) & -AcknowledgesMistake(x))", "exists x.(WellInformedPerson(x) & -AdmitsMistake(x))", "exists x.(WellInformed(x) & -AcceptsMistake(x))", "exists x.(WellInformed(x) & -AdmitMistake(x))", "exists x.(WellInformed(x) & -AcknowledgeMistake(x))", "exists x.(WellInformed(x) & -AcceptMistake(x))", "exists x.(WellInformedPerson(x) & -AcknowledgesMistake(x))", "exists x.(WellInformedPerson(x) & -AcceptMistake(x))", "exists x.(WellInformedPerson(x) & -AcceptsMistake(x))", "exists x.(WellInformedPerson(x) & -AcknowledgeMistake(x))", "exists x.(WellInformedPerson(x) & -AdmitMistake(x))", "exists x.(WellInformedPerson(x) & -AcceptMistake(x))"]}
{"id": "folio_train_882", "nl": "Some good teachers are not well-informed people.", "fol": "exists x.(IsGoodTeacher(x) & -IsWellInformed(x))", "prediction": ["exists x.(GoodTeacher(x) & -WellInformed(x))", "exists x.(GoodTeacher(x) & -WellInformedPerson(x))", "exists x.(GoodTeacher(x) & -WellInformedPeople(x))", "exists x.((Teacher(x) & -WellInformed(x)) -> Good(x))", "exists x.(GoodTeacher(x) & -WellInformedPersonnel(x))", "exists x.((Teacher(x) & Good(x)) & -WellInformed(x))", "exists x.(GoodTeacher(x) & -WellInformedPersonal(x))", "exists x.(Teacher(x) & -WellInformed(x))", "exists x.((Teacher(x) & -WellInformed(x))", "exists x.((Teacher(x) & Good(x)) -> -WellInformed(x))", "exists x.(GoodTeacher(x) & -WellInformedPersonne(x))", "exists x.(GuysTeacher(x) & -WellInformed(x))", "exists x.(GoodTeacher(x) & -WellInformedPopulist(x))", "exists x.(GuiltyTeacher(x) & -WellInformed(x))", "exists x.(GoodTeacher(x) & -WellInformedPopular(x))", "exists x.(GiftTeacher(x) & -WellInformed(x))"]}
{"id": "folio_train_883", "nl": "Philatelic literature is divided into the following categories: Stamp catalogues, Periodicals, Auction catalogues, Books, Bibliographies, and Background Material", "fol": "all x.(IsPhilatelicLiterature(x) -> (IsStampCatalogue(x) | IsPeriodical(x) | IsAuctionCatalogue(x) | IsBook(x) | IsBibliography(x) | IsBackgroundMaterial(x)))", "prediction": ["all x.(PhilatelicLiterature(x) -> (StampCatalogs(x) | Periodicals(x) | AuctionCatalogs(x) | Books(x) | Bibliographies(x) | BackgroundMaterial(x)))", "all x.(PhilatelicLiterature(x) -> (StampCatalogues(x) | Periodicals(x) | AuctionCatalogues(x) | Books(x) | Bibliographies(x) | BackgroundMaterial(x)))", "all x.(PhilatelicLiterature(x) -> (StampCatalogs(x) | Periodicals(x) | AuctionCatalogs(x) | Books(x) | Bibliographies(x) | BackgroundMaterial(x)))", "all x.(PhilatelicLiterature(x) -> (StampCatalogues(x) | Periodicals(x) | AuctionCatalogues(x) | Books(x) | Bibliographies(x) | BackgroundMaterial(x)))", "all x.(PhilatelicLiterature(x) -> (StampCatalog(x) | PeriodicalCatalog(x) | AuctionCatalog(x) | Books(x) | Bibliographies(x) | BackgroundMaterial(x)))", "all x.(PhilatelicLiterature(x) -> (StampCatalog(x) | Periodical(x) | AuctionCatalog(x) | Books(x) | Bibliographies(x) | BackgroundMaterial(x)))", "all x.(PhilatelicLiterature(x) -> (StampCatalogue(x) | PeriodicalCatalogue(x) | AuctionCatalogue(x) | Books(x) | Bibliographies(x) | BackgroundMaterial(x)))", "all x.(PhilatelicLiterary(x) -> (StampCatalogs(x) | Periodicals(x) | AuctionCatalogs(x) | Books(x) | Bibliographies(x) | BackgroundMaterial(x)))", "all x y z.((PhilatelicLiterature(x) & StampCatalog(y) | Periodical(y) | AuctionCatalog(y) | Books(z) | Bibliographies(z) | BackgroundMaterial(z))) -> DividedIntoCategories(x,y,z))", "all x.(PhilatelicLiterature(x) -> (StampCatalogs(x) | Periodicals(x) | AuctionCatalogs(x)) | Books(x) | Bibliographies(x) | BackgroundMaterial(x)))", "all x y z.((PhilatelicLiterature(x) & StampCatalog(y) & Periodical(z) & AuctionCatalog(x) & Books(x) & Bibliographies(x) & BackgroundMaterial(x)) -> DividedIntoCategories(x,y,z))", "all x y z.((PhilatelicLiterature(x) & StampCatalog(y) & Periodical(z) & AuctionCatalog(x) & Books(x) & Bibliographies(x) & BackgroundMaterial(y)) -> DividedIntoCategories(x,y,z))", "all x y z w.((PhilatelicLiterature(x) & StampCatalog(y) & Periodical(z) & AuctionCatalog(w)) -> (Categories(x,y,z) & Books(x) & Bibliographies(x) & BackgroundMaterial(x)))", "all x.(PhilatelicLiterature(x) -> (StampCatalogs(x) | Periodicals(x) | AuctionCatalogs(x) | Books(x) | Bibliographies(x) | BackgroundMaterials(x)))", "all x y z.((PhilatelicLiterature(x) & StampCatalog(y) & Periodical(z) & AuctionCatalog(y) & Books(z) & Bibliographies(z) & BackgroundMaterial(z)) -> DividedIntoCategories(x,y,z))", "all x y z.((PhilatelicLiterature(x) & StampCatalog(y) | Periodical(y) | AuctionCatalog(y) | Books(z) | Bibliographies(z) | BackgroundMaterial(z))) -> SeparatedIntoCategories(x,y,z))"]}
{"id": "folio_train_884", "nl": "Mort is not a Stamp catalogue.", "fol": "-IsStampCatalogue(Mort)", "prediction": ["all x.(Mort(x) -> -StampCatalog(x))", "all x.(Mot(x) -> -StampCatalog(x))", "(-StampCatalog(Mort))", "all x.(Molt(x) -> -StampCatalog(x))", "-StampCatalog(Mort)", "Mort is not StampCatalog(Mort)", "(-StampCatalog(Mort) & -StampCatalog(Mort))", "all x.(Mort(x) -> -StampCatalogue(x))", "(-StampCatalog(Mot))", "(-StampCatalog(Molt))", "(-StampCatalog(Molt) & -StampCatalog(Molt))", "-StampCatalog(Molt)", "Mort is notStampCatalog(Mort)", "Mort is notStampCatalog(Mort) & -StampCatalog(Mort))", "Mort - StampCatalog(Mort))", "-StampCatalog(Mot)"]}
{"id": "folio_train_885", "nl": "Mort is not a periodical, auction catalogue, bibliography, or background material.", "fol": "-(IsPeriodical(Mort) | IsAuctionCatalogue(Mort) | IsBibliography(Mort) | IsBackgroundMaterial(Mort))", "prediction": ["all x.(Mort(x) -> (-Periodical(x) | AuctionCatalog(x) | Bibliography(x) | BackgroundMaterial(x)))", "all x.(Mort(x) -> (-Periodical(x) & -AuctionCatalog(x) & -Biblical(x) & -BackgroundMaterial(x)))", "all x.(Mort(x) -> (-Periodical(x) & -AuctionCatalog(x) & -Bibliography(x) & -BackgroundMaterial(x)))", "all x.(Mort(x) -> (-Periodical(x) & -AuctionCatalog(x) & -Biography(x) & -BackgroundMaterial(x)))", "all x.(Mort(x) -> (-Periodical(x) & -AuctionCatalog(x) & -Bibliographical(x) & -BackgroundMaterial(x)))", "all x.(Mort(x) -> (-Periodical(x) & -AuctionCatalog(x) & -Bibliography(x) & -BackgroundMaterial(x)))", "all x.(Mort(x) -> -(Periodical(x) | AuctionCatalog(x) | Bibliography(x) | BackgroundMaterial(x)))", "all x.(Mort(x) -> (-Periodical(x) | AuctionCatalog(x) | Bibliography(x) | BackgroundMaterial(x)))", "all x.(Mot(x) -> (-Periodical(x) & -AuctionCatalog(x) & -Biblical(x) & -BackgroundMaterial(x)))", "all x.(Mort(x) -> (-(Periodical(x) | AuctionCatalog(x) | Bibliography(x) | BackgroundMaterial(x))))", "all x.(Mort(x) -> (-Periodical(x) & -AuctionCatalog(x) & -Biblical(x) & -BackgroundMaterial(x)))", "all x.(Mort(x) -> (-Periodic(x) & -AuctionCatalog(x) & -Biblical(x) & -BackgroundMaterial(x)))", "all x.(Mot(x) -> (-Periodical(x) | AuctionCatalog(x) | Bibliography(x) | BackgroundMaterial(x)))", "all x.(Mort(x) -> (-Periodic(x) | AuctionCatalog(x) | Bibliography(x) | BackgroundMaterial(x)))", "all x.((Mort(x) & -(Periodical(x) | AuctionCatalog(x) | Bibliography(x) | BackgroundMaterial(x))) -> -(Periodical(x) | AuctionCatalog(x) | Bibliography(x) | BackgroundMaterial(x)))", "all x.((Mort(x) & -(Periodical(x) | AuctionCatalog(x) | Bibliography(x) | BackgroundMaterial(x))) -> -(Periodical(x) & AuctionCatalog(x) & Bibliography(x)))"]}
{"id": "folio_train_886", "nl": "Mort is a piece of Philatelic literature.", "fol": "IsPhilatelicLiterature(Mort)", "prediction": ["all x.(Mort(x) -> PhilatelicLiterature(x))", "all x.(Molt(x) -> PhilatelicLiterature(x))", "all x.(Mort(x) -> PhilatelicLiterature(x))", "all x.(Mot(x) -> PhilatelicLiterature(x))", "(PieceOfPhilatelicLiterature(Mort))", "all x y.((Mort(x) & PhilatelicLiterature(y)) -> PieceOf(x,y))", "all x.(Mort(x) -> PhilatelicLiterary(x))", "all x.(Molt(x) -> PhilatelicLiterature(x))", "All x.(Mort(x) -> PhilatelicLiterature(x))", "all x.(Most(x) -> PhilatelicLiterature(x))", "all x.((Mort(x) & PhilatelicLiterature(x)) -> PieceOf(x,Mort))", "all x.(Mot(x) -> PhilatelicLiterature(x))", "all x.((Mort(x) & PhilatelicLiterature(x)) -> PieceOf(x,y))", "all x y.((Mort(x) & PhilatelicLiterature(y)) -> Piece(x,y))", "all x.(Morton(x) -> PhilatelicLiterature(x))", "all x y.((Mort(x) & PhilatelicLiterary(y)) -> PieceOf(x,y))"]}
{"id": "folio_train_887", "nl": "Mort is a book", "fol": "IsBook(Mort)", "prediction": ["all x.(Mort(x) -> Book(x))", "all x.((Mort(x) & Book(x)) -> Book(x))", "all x.((Mot(x) & Book(x)) -> Book(x))", "(Book(Mort) & Book(Mort) & Book(Mort))", "(Book(Mort) & Book(Mort))", "all x.(Mot(x) -> Book(x))", "all x y.((Mort(x) & Book(y)) -> Book(x,y))", "all x.(Mort(x) -> Book(x))", "all x y.((Mot(x) & Book(y)) -> Book(x,y))", "(Book(Mort) & Book(Mort) & Book(Mort) & Book(Mort))", "all x y.((Mort(x) & Book(y)) -> Book(x))", "(Book(Mot) & Book(Mot) & Book(Mot))", "all x.((Book(x) & Mort(x)) -> Book(x))", "(Book(Mot) & Book(Mot))", "all x y.((Mot(x) & Book(y)) -> Book(x))", "(Book(Mot) & Book(Mot) & Book(Mot) & Book(Mot))"]}
{"id": "folio_train_888", "nl": "Mort is background material.", "fol": "IsBackgroundMaterial(Mort)", "prediction": ["all x.(Mort(x) -> BackgroundMaterial(x))", "all x.(Molt(x) -> BackgroundMaterial(x))", "all x.(Mot(x) -> BackgroundMaterial(x))", "All x.(Mort(x) -> BackgroundMaterial(x))", "All x.(Molt(x) -> BackgroundMaterial(x))", "all x.(Mod(x) -> BackgroundMaterial(x))", "all x.(Morton(x) -> BackgroundMaterial(x))", "all x.(Most(x) -> BackgroundMaterial(x))", "All x.(Mot(x) -> BackgroundMaterial(x))", "all x.(Mort(x) -> BackgroundMaterial(x))", "all x.(Molt(x) -> BackgroundMaterial(x))", "(BackgroundMaterial(Molt) & -BackgroundMaterial(Molt))", "(BackgroundMaterial(Mot) & BackgroundMaterial(Mot))", "all x.(Mot(x) -> BackgroundMaterial(x))", "Mort is background material.", "(BackgroundMaterial(Molt) & Contains(Molt))"]}
{"id": "folio_train_889", "nl": "Eragon is a piece of Philatelic literature.", "fol": "IsPhilatelicLiterature(Eragon)", "prediction": ["all x.(Eragon(x) -> PhilatelicLiterature(x))", "Eragon is a piece of PhilatelicLiterature.", "all x y.((Eragon(x) & PhilatelicLiterature(y)) -> PieceOf(x,y))", "all x.(Eragon(x) -> PhilatelicLiterature(x))", "(PieceOfPhilatelicLiterature(Eragon))", "All x.(Eragon(x) -> PhilatelicLiterature(x))", "Eragon is a piece of PhilatelicLiterature(Eragon)", "Eragon (PieceOfPhilatelicLiterature)", "all x.((Eragon(x) & PhilatelicLiterature(x)) -> PieceOf(x,y))", "all x.(Eragon(x) -> PhilatelicLiterary(x))", "Eragon is a piece of PhilatelicLiterature(x)", "all x.(Ereagon(x) -> PhilatelicLiterature(x))", "Eragon is a piece of PhilatelicLiterature(er)", "all x.((Eragon(x) & PhilatelicLiterature(x)) -> PieceOf(x,PhilatelicLiterature))", "all x y.((Eragon(x) & PhilatelicLiterary(y)) -> PieceOf(x,y))", "all x y.((Eragon(x) & PhilatelicLiterature(y)) -> Piece(x,y))"]}
{"id": "folio_train_890", "nl": "Adventures of Rusty is a drama film and children's film.", "fol": "(IsDramaFilm(Adventuresofrusty) & IsChildrensFilm(Adventuresofrusty))", "prediction": ["all x.(AdventuresOfRusty(x) -> (DramaFilm(x) & ChildrensFilm(x)))", "all x.(AdventuresOfRusty(x) -> (DramaFilm(x) & ChildrensFilm(x)))", "all x.(AdventureOfRusty(x) -> (DramaFilm(x) & ChildrensFilm(x)))", "all x y.((Adventure(x) & Rusty(y)) -> (DramaFilm(x) & ChildrensFilm(x)))", "all x.((Adventure(x) & Rusty(x)) -> (DramaFilm(x) & ChildrensFilm(x)))", "AdventuresOfRusty(x) -> (DramaFilm(x) & ChildrensFilm(x)))", "all x.((AdventuresOfRusty(x) & DramaFilm(x) & ChildrensFilm(x)) -> AdventuresOfRusty(x))", "All x.(AdventuresOfRusty(x) -> (DramaFilm(x) & ChildrensFilm(x)))", "(DramaFilm(AdventuresOfRusty) & ChildrensFilm(AdventuresOfRusty))", "AdventuresOfRusty(x) -> (DramaFilm(x) & ChildrensFilm(x)))", "All x.(AdventuresOfRusty(x) -> (DramaFilm(x) & ChildrensFilm(x)))", "all x y.((Adventure(x) & Rusty(y)) -> (DramaFilm(x,y) & ChildrensFilm(x,y)))", "(DramaFilm(AdventureOfRusty) & ChildrensFilm(AdventureOfRusty))", "AdventuresOfRusty(x) & DramaFilm(x) & ChildrensFilm(x))", "all x.(Adventure(x) -> (DramaFilm(x) & ChildrensFilm(x)))", "all x.(AdventuresOfRusty(x) -> (DramaFilm(x) & ChildrenFilm(x)))"]}
{"id": "folio_train_891", "nl": "Columbia Pictures produced Adventures of Rusty", "fol": "ProducedBy(Columbiapictures,Adventuresofrusty)", "prediction": ["all x y z.((ColumbiaPictures(x) & AdventuresOfRusty(y) & Rusty(z)) -> ProducedBy(x,y,z))", "all x y z.((ColumbiaPictures(x) & AdventuresOfRusty(y) & ColumbiaPictures(z)) -> ProducedBy(x,y,z))", "all x y.((ColumbiaPictures(x) & AdventuresOfRusty(y)) -> ProducedBy(x,y))", "All x y z.((ColumbiaPictures(x) & AdventuresOfRusty(y) & Rusty(z)) -> ProducedBy(x,y,z))", "(ProducedByColumbiaPictures(ColumbiaPictures) & AdventuresOfRusty(ColumbiaPictures))", "All x y z.((ColumbiaPictures(x) & AdventuresOfRusty(y) & ColumbiaPictures(z)) -> ProducedBy(x,y,z))", "all x y z.((ColumbiaPictures(x) & AdventuresOfRusty(y) & ColumbiaPictures(z)) -> Produced(x,y,z))", "All x y z.((ColumbiaPictures(x) & AdventuresOfRusty(y) & Rusty(z)) -> ProducedByColumbiaPictures(x,y,z))", "all x y z.((ColumbiaPictures(x) & AdventuresOfRusty(y) & Rusty(z)) -> ProducedByColumbiaPictures(x,y,z))", "all x y.((ColumbiaPictures(x) & Rusty(y)) -> ProducedAdventuresOfRusty(x,y))", "All x y.((ColumbiaPictures(x) & Rusty(y)) -> ProducedAdventuresOfRusty(x,y))", "All x y.((ColumbiaPictures(x) & AdventuresOfRusty(y)) -> ProducedBy(x,y))", "all x y z.((ColumbiaPictures(x) & AdventuresOfRusty(y) & Rusty(z)) -> Produced(x,y,z))", "All x y z.((ColumbiaPictures(x) & AdventuresOfRusty(y) & ColumbiaPictures(z)) -> Produced(x,y,z))", "all x y.((ColumbiaPictures(x) & AdventuresOfRusty(y)) -> ProducedByColumbiaPictures(x,y))", "all x y z.((ColumbiaPicture(x) & AdventuresOfRusty(y) & Rusty(z)) -> ProducedBy(x,y,z))"]}
{"id": "folio_train_892", "nl": "Tintin was produced by Paramount.", "fol": "ProducedBy(Paramount,Tintin)", "prediction": ["All x.(Tintin(x) -> ProducedByParamount(x))", "all x.(Tintin(x) -> ProducedByParamount(x))", "all x y.((Tintin(x) & Paramount(y)) -> ProducedBy(x,y))", "All x y.((Tintin(x) & Paramount(y)) -> ProducedBy(x,y))", "(ProducedByParamount(Tintin))", "(ProducedByParamount(Tintin) & Paramount(Tintin))", "(ProducedByParamount(Tintin) | ProducedByParamount(Tintin)))", "(ProducedByParamount(Tintin) & ProducedByParamount(Tintin))", "(ProducedBy(Tintin) & Paramount(Tintin))", "(ProducedByParamount(Tintin) -> ProducedByParamount(Tintin))", "(ProducedByParamount(Tintin) & Paramount(Tintin) & ProducedByParamount(Tintin))", "All x.(Tintin(x) -> Paramount(x))", "All x.(Tintin(x) -> ProducedByParamount(x))", "all x.(Tintin(x) -> ProducedByParamount(x))", "(ProducedByParamount(Tintin) | ProducedByParamount(Tintin))", "All x.(Tintin(x) -> ProducedBy(x,Paramount))"]}
{"id": "folio_train_893", "nl": "Tintin is an adventure film.", "fol": "IsAdventureFilm(Tintin)", "prediction": ["All x.(Tintin(x) -> AdventureFilm(x))", "all x.(Tintin(x) -> AdventureFilm(x))", "(AdventureFilm(Tintin) & AdventureFilm(Tintin))", "Tintin is AdventureFilm(Tintin)", "(AdventureFilm(Tintin) & Adventure(Tintin))", "Tintin is AdventureFilm(x)", "(AdventureFilm(Tintin) & -AdventureFilm(Tintin))", "(AdventureFilm(Tintin) & AdventureFilm(Tintin))", "(AdventureFilm(Tintin) & -AdventureFilm(Tintin))", "Tintin is AdventureFilm(tin) & -AdventureFilm(tin))", "Tintin is AdventureFilm(tin) & -AdventureFilm(tin))", "(AdventureFilm(Tintin) & Adventure(Tintin))", "(AdventureFilm(Tintin) -> AdventureFilm(Tintin))", "Tintin is AdventureFilm(tin))", "Tintin is AdventureFilm(tintin)", "(AdventureFilm(Tintin) & AdventureFilm(tin))"]}
{"id": "folio_train_894", "nl": "Columbia pictures produces drama films.", "fol": "exists x.(ProducedBy(Columbiapictures,x) & IsDramaFilm(x))", "prediction": ["all x.(ColumbiaPictures(x) -> ProducesDramaFilms(x))", "all x y.((ColumbiaPictures(x) & DramaFilm(y)) -> Produces(x,y))", "all x.(ColumbusPictures(x) -> ProducesDramaFilms(x))", "all x y.((ColumbiaPicture(x) & DramaFilm(y)) -> Produces(x,y))", "all x y.((ColumbusPictures(x) & DramaFilm(y)) -> Produces(x,y))", "all x y.((Columbia(x) & DramaFilm(y)) -> Produces(x,y))", "all x y.((Columbus(x) & DramaFilm(y)) -> Produces(x,y))", "all x y z.((ColumbiaPictures(x) & DramaFilm(y) & Drama(z)) -> Produces(x,y,z))", "all x.(ColumbiaPictures(x) -> ProducesDramaFilm(x))", "all x.(ColumbiaPictures(x) -> ProducesDramaticFilms(x))", "all x y z.((ColumbiaPictures(x) & DramaFilm(y) & Drama(z)) -> Produces(x,y))", "all x.(ColombiaPictures(x) -> ProducesDramaFilms(x))", "all x.(ColumbiaPhotographs(x) -> ProducesDramaFilms(x))", "all x y.((ColumbiaPictures(x) & DramaFilm(y)) -> Produce(x,y))", "all x.(ColoradoPictures(x) -> ProducesDramaFilms(x))", "all x y z.((ColumbiaPictures(x) & DramaFilm(y) & Film(z)) -> Produces(x,y,z))"]}
{"id": "folio_train_895", "nl": "Columbia pictures produces adventure films.", "fol": "exists x.(ProducedBy(Columbiapictures,x) & IsAdventureFilm(x))", "prediction": ["all x.(ColumbiaPictures(x) -> ProducesAdventureFilms(x))", "all x y.((ColumbiaPictures(x) & AdventureFilm(y)) -> Produces(x,y))", "all x.(ColumbusPictures(x) -> ProducesAdventureFilms(x))", "all x.(ColumbiaPictures(x) -> ProducesAdventureFilms(x))", "all x y.((ColumbiaPicture(x) & AdventureFilm(y)) -> Produces(x,y))", "all x.(ColumbusPictures(x) -> ProducesAdventureFilms(x))", "all x y.((ColumbusPictures(x) & AdventureFilm(y)) -> Produces(x,y))", "all x y.((ColumbiaPhotograph(x) & AdventureFilm(y)) -> Produces(x,y))", "all x y.((ColumbusPicture(x) & AdventureFilm(y)) -> Produces(x,y))", "all x.(ColoradoPictures(x) -> ProducesAdventureFilms(x))", "all x.(ColumbiaPhotographs(x) -> ProducesAdventureFilms(x))", "all x y.((Columbia(x) & Picture(y)) -> ProducesAdventureFilms(x,y))", "all x y.((Columbia(x) & Picture(y)) -> ProducesAdventureFilms(x,y))", "all x.(ColombiaPictures(x) -> ProducesAdventureFilms(x))", "all x y.((ColumbiaPictures(x) & AdventureFilm(y)) -> Produce(x,y))", "all x y.((Columbia(x) & Picture(y)) -> ProducesAdventureFilm(x,y))"]}
{"id": "folio_train_896", "nl": "Paramount produces children's films.", "fol": "exists x.(ProducedBy(Paramount,x) & IsChildrensFilm(x))", "prediction": ["all x.(Paramount(x) -> ProducesChildrensFilms(x))", "all x y.((Paramount(x) & Child(y)) -> Produces(x,y))", "all x y.((Paramount(x) & ChildrensFilm(y)) -> Produces(x,y))", "all x.(Paramount(x) -> ProducesChildrenFilms(x))", "all x y z.((Paramount(x) & Child(y) & Film(z)) -> Produces(x,y,z))", "all x.(Paramount(x) -> ProducesChildrensFilm(x))", "all x.(Paramount(x) -> ProducesChildren'sFilms(x))", "all x y.((Paramount(x) & ChildFilm(y)) -> Produces(x,y))", "all x y.((Paramount(x) & Child(y)) -> ProducesFilm(x,y))", "all x y.((Paramount(x) & ChildrenFilm(y)) -> Produces(x,y))", "all x y.((Paramount(x) & Child(y)) -> ProducesFilms(x,y))", "all x y z.((Paramount(x) & Child(y) & Film(z) & Produces(x,y,z)) -> Produces(x,y,z))", "all x y.((Paramount(x) & Children(y)) -> Produces(x,y))", "all x y z.((Paramount(x) & Child(y) & Film(z) & Produces(x,y,z)) -> Produces(x,y))", "all x.(Paramount(x) -> ProducesChildrenFilm(x))", "all x.(Paramount(x) -> (ProducesChildrensFilms(x) | ProducesChildrensFilms(x)))"]}
{"id": "folio_train_897", "nl": "Paramount produces adventure films.", "fol": "exists x.(ProducedBy(Paramount,x) & IsAdventureFilm(x))", "prediction": ["all x.(Paramount(x) -> ProducesAdventureFilms(x))", "all x y.((Paramount(x) & AdventureFilm(y)) -> Produces(x,y))", "all x.(Paramount(x) -> ProducesAdventureFilms(x))", "all x y z.((Paramount(x) & AdventureFilm(y) & Film(z)) -> Produces(x,y,z))", "all x y z.((Paramount(x) & AdventureFilm(y) & AdventureFilm(z)) -> Produces(x,y,z))", "all x y.((Paramount(x) & AdventureFilm(y)) -> Produce(x,y))", "all x y z.((Paramount(x) & AdventureFilm(y) & Movie(z)) -> Produces(x,y,z))", "all x y z.((Paramount(x) & AdventureFilm(y) & Film(z)) -> Produces(x,y))", "all x.(Paramount(x) -> exists y.(AdventureFilm(y) & Produces(x,y)))", "all x y z.((Paramount(x) & AdventureFilm(y) & AdventureFilm(z)) -> Produces(x,y))", "all x y z.((Paramount(x) & AdventureFilm(y) & Film(z) & Produces(x,y)) -> Produces(x,z))", "all x y z.((Paramount(x) & AdventureFilm(y) & Film(z) & Produces(x,y,z)) -> Produces(x,y))", "all x y z.((Paramount(x) & AdventureFilm(y) & Adventure(z)) -> Produces(x,y,z))", "All x.(Paramount(x) -> ProducesAdventureFilms(x))", "Paramount produces AdventureFilms(Paramount)", "all x y z.((Paramount(x) & AdventureFilm(y) & Film(z)) -> Produce(x,y,z))"]}
{"id": "folio_train_898", "nl": "Deng Xiaoping served as the paramount leader of the People's Republic of China (PRC). ", "fol": "ServedAsParamountLeader(Dengxiaoping,Prc)", "prediction": ["Deng Xiaoping served as the SupremeLeader(x) & PeoplesRepublicOfChina(x))", "(SecondaryLeader(DengXiaoping) & PeoplesRepublicOfChina(DengXiaoping))", "Deng Xiaoping served as the SupremeLeaderOfPRC(x))", "all x.((DengXiaoping(x) & PeoplesRepublicOfChina(x)) -> SupremeLeader(x))", "All x.((DengXiaoping(x) & PeoplesRepublicOfChina(x)) -> SupremeLeader(x))", "DengXiaoping served as the SupremeLeader(x) & PeoplesRepublicOfChina(x))", "DengXiaoping served as the SupremeLeaderOfPRC(x))", "Deng Xiaoping served as the SupremeLeader(x) -> PeoplesRepublicOfChina(x))", "All x.((DengXiaoping(x) & PeoplesRepublicOfChina(x)) -> PrimalLeader(x))", "Deng Xiaoping served as the SupremeLeader(x,PRC)", "all x.((DengXiaoping(x) & PeoplesRepublicOfChina(x)) -> PrimalLeader(x))", "all x.((DengXiaoping(x) & PeoplesRepublic(x)) -> SupremeLeader(x))", "All x.((DengXiaoping(x) & PeoplesRepublic(x)) -> SupremeLeader(x))", "(SecondaryLeader(DengXiaoping) & PeoplesRepublicOfChinese(DengXiaoping))", "Deng Xiaoping served as the SupremeLeader(x) & PeoplesRepublicOfChinese(x))", "Deng Xiaoping served as the SupremeLeaderOfPeoplesRepublicOfChina(x))"]}
{"id": "folio_train_899", "nl": "Deng Xiaoping was praised for his reaffirmation of the reform program in his Southern Tour of 1992 as well as the reversion of Hong Kong to Chinese control in 1997 and the return of Macau in 1999.", "fol": "(PraisedForAchievements(Dengxiaoping,Reaffirmationofreformprogram) & PraisedForAchievements(Dengxiaoping,Reversionofhongkong) & PraisedForAchievements(Dengxiaoping,Returnofmacau))", "prediction": ["all x y.((DengXiaoping(x) & SouthernTour(y)) -> (ReaffirmationOfReformProgram(x,y) & ReversionOfHongKongToChineseControl(x,y) & ReturnOfMacau(x,y)))", "all x y.((DengXiaoping(x) & SouthernTour(y) & SouthernTour(y)) -> (ReaffirmationOfReformProgram(x,y) & ReversionOfHongKongToChineseControl(x,y) & ReturnOfMacau(x,y)))", "all x y.((DengXiaoping(x) & SouthernTour(y)) -> (ReaffirmationOfReformProgram(x,y) & ReversionToChineseControl(x,y) & ReturnToMacau(x,y)))", "all x.((DengXiaoping(x) & SouthernTour(x,1992) & ReversionToChineseControl(x,1997) & ReturnToMacau(x,1999)) -> Plauded(x))", "all x y.((DengXiaoping(x) & SouthernTour(y)) -> (ReaffirmationOfReformProgram(x,y) & ReversionToChineseControl(x,y) & ReturnOfMacau(x,y)))", "all x y.((DengXiaoping(x) & SouthernTour(y) & SouthernTour(y)) -> (ReaffirmationOfReformProgram(x,y) & ReversionToChineseControl(x,y) & ReturnOfMacau(x,y)))", "all x y.((DengXiaoping(x) & SouthernTour(y) & SouthernTour(y)) -> (ReaffirmationOfReformProgram(x,y) & ReversionToChineseControl(x,y) & ReturnToMacau(x,y)))", "all x.((DengXiaoping(x) & SouthernTour(x,1992) & ReversionOfHongKongToChineseControl(x,1997) & ReturnOfMacau(x,1999)) -> Plauded(x))", "all x y.((DengXiaoping(x) & SouthernTour(y)) -> (ReaffirmationOfReformProgram(x,y) & ReversionOfHongKongToChineseControl(y,1997) & ReturnOfMacau(y,1998)))", "all x.((DengXiaoping(x) & SouthernTour(x,1992) & ReversionToChineseControl(x,1997) & ReturnToMacau(x,99)) -> Plauded(x))", "all x.((DengXiaoping(x) & SouthernTour(x,1992) & ReversionOfHongKongToChineseControl(x,1997) & ReturnOfMacau(x,99)) -> Plauded(x))", "all x y.((DengXiaoping(x) & SouthernTour(y)) -> (ReaffirmationOfReformProgram(x,y) & ReversionOfHongKongToChineseControl(x,y) & ReturnOfMacau(y,z)))", "all x y z.((DengXiaoping(x) & SouthernTour(y) & HongKong(z)) -> (ReaffirmationOfReformProgram(x,y) & ReversionToChineseControl(x,z) & ReturnOfMacau(x,y)))", "all x.((DengXiaoping(x) & SouthernTour(x,1992) & ReversionToChineseControl(x,1997) & ReturnToMacau(x,1999)) -> Praised(x))", "all x.((DengXiaoping(x) & SouthernTour(x,1992) & ReversionOfHongKongToChineseControl(x,1997) & ReturnOfMacau(x,1999)) -> Praised(x))", "all x y.((DengXiaoping(x) & SouthernTour(y) & SouthernTour(y)) -> (ReaffirmationOfReformProgram(x,y) & ReversionOfHongKongToChineseControl(y,1997) & ReturnOfMacau(y,1998)))"]}
{"id": "folio_train_900", "nl": "As the party's Secretary-General under Mao and Vice Premier in he 1950s, Deng Xiaoping presided over the Anti-Rightist Campaign launched by Mao.", "fol": "(ServedAsPartysSecretaryGeneral(Dengxiaoping) & UnderLeadershipOf(Dengxiaoping,Mao) & ServedAsVicePremier(Dengxiaoping) & PresidedOverCampaign(Dengxiaoping,Antirightistcampaign) & CampaignLaunchedBy(Antirightistcampaign,Mao))", "prediction": ["All x.((PartySecretaryGeneral(x) & UnderMao(x) & VicePremier(x)) -> PresidedOverAntiRightistCampaign(x))", "All x.((PartySecretaryGeneral(x) & UnderMao(x) & VicePremier(x) & 1950s(x)) -> PresidedOverAntiRightistCampaign(x))", "All x y.((Party(x) & SecretaryGeneral(x,y) & UnderMao(y) & VicePremier(x,y)) -> PresidedOverAntiRightistCampaign(x,y))", "All x y z.((Party(x) & SecretaryGeneral(x,y) & Mao(y) & VicePremier(z)) -> PresidedOverAntiRightistCampaign(x,z))", "All x y.((Party(x) & SecretaryGeneral(x) & UnderMao(x) & VicePremier(x) & 1950s(x)) -> PresidedOverAntiRightistCampaign(x,y))", "All x y z.((Party(x) & SecretaryGeneral(x,y) & Mao(y) & VicePremier(z)) -> PresidedOverAntiRightistCampaign(x))", "All x y z.((Party(x) & SecretaryGeneral(x) & Mao(y) & VicePremier(z)) -> PresidedOverAntiRightistCampaign(x,y,z))", "All x y z.((Party(x) & SecretaryGeneral(x,y) & Mao(y) & VicePremier(z)) -> PresidedOverAntiRightistCampaign(x,y,z))", "All x y z.((Party(x) & SecretaryGeneral(x) & Mao(y) & VicePremier(z) & 1950s(x)) -> PresidedOverAntiRightistCampaign(x,y,z))", "All x y.((Party(x) & SecretaryGeneral(x,y) & UnderMao(y) & VicePremier(x,y)) -> PresidedOverAntiRightistCampaign(x))", "(SecretaryGeneral(Mao) & VicePremier(Mao) & 1950s(Mao) & VicePremier(Mao) & PresidedOverAntiRightistCampaign(Mao))", "All x y.((Party(x) & SecretaryGeneral(x) & UnderMao(x) & VicePremier(x)) -> PresidedOverAntiRightistCampaign(x,y))", "All x y z.((Party(x) & SecretaryGeneral(x,y) & Mao(y) & VicePremier(z) & 1950s(x)) -> PresidedOverAntiRightistCampaign(x,z))", "All x y z.((Party(x) & SecretaryGeneral(x,y) & Mao(y) & VicePremier(z) & 1950s(x)) -> PresidedOverAntiRightistCampaign(x))", "All x y.((Party(x) & SecretaryGeneral(x) & UnderMao(x) & VicePremier(x) & 1950s(x)) -> PresidedOverAntiRightistCampaign(y))", "All x y.((Party(x) & SecretaryGeneral(x) & UnderMao(x) & VicePremier(x) & 1950s(x)) -> PresidedOverAntiRightistCampaign(x))"]}
{"id": "folio_train_901", "nl": "Deng Xiaoping became instrumental in China's economic reconstruction following the disastrous Great Leap Forward (1958\u20131960).", "fol": "(InstrumentalInEconomicReconstruction(Dengxiaoping,Chinaseconomicreconstruction) & FollowingEvent(Chinaseconomicreconstruction,Greatleapforward) & CharacterizedAsDisastrous(Greatleapforward))", "prediction": ["all x.((DengXiaoping(x) & GreatLeapForward(x,58) & GreatLeapForward(x,1960)) -> InstrumentalInChinasEconomicReconstruction(x))", "all x.((DengXiaoping(x) & GreatLeapForward(x)) -> InstrumentalInChinasEconomicReconstruction(x))", "all x y.((DengXiaoping(x) & GreatLeapForward(y)) -> InstrumentalInChinasEconomicReconstruction(x,y))", "all x y.((DengXiaoping(x) & GreatLeapForward(y,58) & GreatLeapForward(y,1960)) -> InstrumentalInChinasEconomicReconstruction(x,y))", "all x.((DengXiaoping(x) & GreatLeapForward(x) & GreatLeapForward(x)) -> InstrumentalInChinasEconomicReconstruction(x))", "all x y z.((DengXiaoping(x) & GreatLeapForward(y) & GreatLeapForward(z)) -> InstrumentalInChinasEconomicReconstruction(x,y,z))", "all x y.((DengXiaoping(x) & GreatLeapForward(y,58) & GreatLeapForward(y,1960)) -> InstrumentalInReconstruction(x,y))", "all x.((DengXiaoping(x) & GreatLeapForward(x,58) & GreatLeapForward(x,60)) -> InstrumentalInChinasEconomicReconstruction(x))", "all x.((DengXiaoping(x) & GreatLeapForward(x) & GreatLeapForward(x) & GreatLeapForward(x)) -> InstrumentalInChinasEconomicReconstruction(x))", "all x y z.((DengXiaoping(x) & GreatLeapForward(y) & GreatLeapForward(z)) -> InstrumentalInReconstruction(x,y,z))", "all x y.((DengXiaoping(x) & GreatLeapForward(y)) -> InstrumentalInReconstruction(x,y))", "all x.((DengXiaoping(x) & GreatLeapForward(x) & (1958-1960)) -> InstrumentalInChinasEconomicReconstruction(x))", "all x y.((DengXiaoping(x) & GreatLeapForward(y,58) & GreatLeapForward(y,1960)) -> InstrumentalInEconomicReconstruction(x,y))", "all x.((DengXiaoping(x) & GreatLeapForward(x,58) & GreatLeapForward(x,1960)) -> InstrumentalInReconstruction(x,China))", "all x.((DengXiaoping(x) & GreatLeapForward(x) & GreatLeapForward(x)) -> InstrumentalInReconstruction(x))", "all x.((DengXiaoping(x) & GreatLeapForward(x) & GreatLeapForward(x) & GreatLeapForward(x)) -> InstrumentalInReconstruction(x))"]}
{"id": "folio_train_902", "nl": "Mao Zedong died in 1976.", "fol": "DiedInYear(Mao,Y1976)", "prediction": ["all x.(MaoZedong(x) -> DiedInSecond(x))", "Mao Zedong (exists x.(MaoZedong(x) & DiedIn(x,1996)))", "all x.(MaoZedong(x) -> DiedIn(x, 1976))", "all x.(MaoZedong(x) -> DiedIn(x,76))", "(MaoZedong(Mao) & DiedIn(Mao) & 1976(Mao))", "Mao Zedong (exists x.(Mao(x) & DiedIn(x,1996)))", "(MaoZedong(Mao) & DiedInSecond(Mao))", "all x.(MaoZedong(x) -> DiedIn(x,1976))", "(Death(MaoZedong) & 1976(MaoZedong))", "Mao Zedong (exists x.(MaoZedong(x) & DiedIn(x, 1976)))", "(Death(MaoZedong) -> MaoZedong(MaoZedong))", "all x.(MaoZedong(x) -> DiedIn1976(x))", "Mao Zedong (exists x.(MaoZedong(x) & DiedIn(x,76)))", "all x.(MaoZedong(x) -> DiedInSecond(x,1996))", "(MaoZedong(Mao) & DiedIn(Mao,76))", "Mao Zedong died in 1976."]}
{"id": "folio_train_903", "nl": "After Mao Zedong's death, Deng Xiaoping gradually rose to supreme power.", "fol": "GraduallyRoseToPower(Dengxiaoping,Supremepower)", "prediction": ["all x.((DengXiaoping(x) & MaoZedongsDeath(x)) -> SufficientPower(x))", "all x.((DengXiaoping(x) & MaoZedong(x)) -> SufficientPower(x))", "all x.((DengXiaoping(x) & MaoZedongDeath(x)) -> SufficientPower(x))", "all x.((DengXiaoping(x) & MaoZedongsDeath(x)) -> EventuallyRisesToSupremePower(x))", "all x y.((DengXiaoping(x) & MaoZedong(y)) -> (RisesToSupremePower(x,y)))", "All x.((DengXiaoping(x) & MaoZedongsDeath(x)) -> SufficientPower(x))", "all x.((DengXiaoping(x) & MaoZedongsDeath(x)) -> Supremacy(x))", "all x.((DengXiaoping(x) & MaoZedongDisaster(x)) -> SufficientPower(x))", "All x.((DengXiaoping(x) & MaoZedong(x)) -> SufficientPower(x))", "all x y.((DengXiaoping(x) & MaoZedong(y) & Death(y)) -> SufficientPower(x,y))", "all x y.((MaoZedong(x) & DengXiaoping(y)) -> (RisesToSupremePower(y)))", "all x y.((MaoZedong(x) & DengXiaoping(y)) -> (RisesToSupremePower(y,x)))", "all x y.((MaoZedong(x) & DengXiaoping(y)) -> (RosesToSupremePower(y,x)))", "all x y.((MaoZedong(x) & DengXiaoping(y)) -> (RosesToSupremePower(y)))", "all x.((DengXiaoping(x) & MaoZedong(x) & Death(x)) -> SufficientPower(x))", "all x.((DengXiaoping(x) & MaoZedong'sDeath(x)) -> SufficientPower(x))"]}
{"id": "folio_train_904", "nl": "The paramount leader of the PRC was also the vice premier.", "fol": "exists x.(ServedAsParamountLeader(x,Prc) & ServedAsVicePremier(x))", "prediction": ["all x y.((Principal(x) & PRC(y)) -> VicePrimier(x,y))", "all x y.((SecondaryLeader(x) & PRC(y)) -> VicePremier(x,y))", "all x y.((Principal(x) & PRC(y)) -> VicePrincipal(x,y))", "all x y.((Principal(x) & PRC(y)) -> VicePrimary(x,y))", "all x.(VicePremier(x) -> (SecondaryLeader(x) & VicePremier(x)))", "all x.(Principal(x) -> (SecondaryLeader(x) & VicePrincipal(x)))", "all x.((PRC(x) & SupremeLeader(x)) -> VicePremier(x))", "all x y.((SecondaryLeader(x) & PRC(y)) -> VicePrimier(x,y))", "all x.(Principal(x) -> (SecondaryLeader(x) & VicePrimary(x)))", "all x y.((Principal(x) & PRC(y)) -> VicePremier(x,y))", "all x y.((Principal(x) & PRC(y)) -> VicePriminal(x,y))", "all x.(Principal(x) -> (SecondaryLeader(x) & VicePrimier(x)))", "all x y.((SecondaryLeader(x) & PRC(y)) -> VicePrime Minister(x,y))", "all x.(SecondaryLeader(x) -> VicePremier(x))", "all x.((Principal(x) & SupremeLeader(x)) -> VicePrincipal(x))", "all x y.((SecondaryLeader(x) & PRC(y)) -> VicePrimary(x,y))"]}
{"id": "folio_train_905", "nl": "Deng Xiaoping presided over something launched by someone he was under.", "fol": "exists x y.(PresidedOverCampaign(Dengxiaoping,x) & CampaignLaunchedBy(x,y) & UnderLeadershipOf(Dengxiaoping,y))", "prediction": ["all x y.((DengXiaoping(x) & Person(y)) -> PresidedOver(x,y))", "all x y z.((DengXiaoping(x) & Person(y) & LaunchedBy(x,y)) -> PresidedOver(x,y))", "all x y.((DengXiaoping(x) & Person(y) & Under(x,y)) -> PresidedOver(x,y))", "All x y.((DengXiaoping(x) & Person(y)) -> PresidedOver(x,y))", "all x y.((DengXiaoping(x) & Person(y)) -> (PresidedOver(x,y) & LaunchedBy(x,y)))", "all x y z.((DengXiaoping(x) & Person(y) & LaunchedBy(x,y)) -> PresidedOver(x,z))", "DengXiaoping presided over something launched by someone he wasUnder.", "all x y z.((DengXiaoping(x) & Person(y) & Under(z)) -> PresidedOver(x,y,z))", "all x.((DengXiaoping(x) & LaunchedBy(x,y)) -> PresidedOver(x,y))", "all x y.((DengXiaoping(x) & Someone(y)) -> PresidedOver(x,y))", "all x y.((DengXiaoping(x) & Person(y) & Under(x)) -> PresidedOver(x,y))", "DengXiaoping presided over something launched by someone he wasunder.", "all x y z.((DengXiaoping(x) & Person(y) & LaunchedBy(y,z)) -> PresidedOver(x,y))", "all x y z.((DengXiaoping(x) & Person(y) & Under(z)) -> PresidedOver(x,y))", "all x y z.((DengXiaoping(x) & Something(y) & Person(z)) -> PresidedOver(x,y,z))", "all x y z.((DengXiaoping(x) & Person(y) & LaunchedBy(x,y)) -> PresidedOver(x,y,z))"]}
{"id": "folio_train_906", "nl": "The person instrumental in china's economic reconstruction gradually rose to supreme power.", "fol": "exists x.(InstrumentalInEconomicReconstruction(x,Chinaseconomicreconstruction) & GraduallyRoseToPower(x,Supremepower))", "prediction": ["all x.((Person(x) & InstrumentalInChineseEconomicReconstruction(x)) -> SufficientPower(x))", "all x.((Person(x) & InstrumentalInChinasEconomicReconstruction(x)) -> SufficientPower(x))", "all x.((Person(x) & InstrumentalInChineseEconomicReconstruction(x)) -> Supremacy(x))", "all x.((Person(x) & InstrumentalInChineseEconomicReconstruction(x)) -> EventuallyRisesToSupremePower(x))", "all x.((Person(x) & InstrumentalInChinasEconomicReconstruction(x)) -> Supremacy(x))", "all x.((Person(x) & InstrumentalInChinasEconomicReconstruction(x)) -> EventuallyRisesToSupremePower(x))", "all x y.((Person(x) & InstrumentalInChineseEconomicReconstruction(x) & SufficientPower(y)) -> RosedTo(x,y))", "all x y.((Person(x) & InstrumentalInChineseEconomicReconstruction(x)) -> SufficientPower(y))", "all x y.((Person(x) & InstrumentalInChineseEconomicReconstruction(x) & SufficientPower(y)) -> RisesTo(x,y))", "all x y.((Person(x) & InstrumentalInChineseEconomicReconstruction(x)) -> SufficientPower(x,y))", "all x y.((Person(x) & InstrumentalInChineseEconomicReconstruction(x,y)) -> SufficientPower(x,y))", "all x y.((Person(x) & InstrumentalInChineseEconomicReconstruction(x)) -> Supremacy(y))", "all x y.((Person(x) & InstrumentalInChinasEconomicReconstruction(x,y)) -> SufficientPower(x,y))", "all x y.((Person(x) & InstrumentalInChinasEconomicReconstruction(x)) -> SufficientPower(y))", "all x y.((Person(x) & InstrumentalInChineseEconomicReconstruction(x)) -> EventuallyRisesToSupremePower(x))", "all x y.((Person(x) & InstrumentalInChineseEconomicReconstruction(x)) -> SufficientPower(x))"]}
{"id": "folio_train_907", "nl": "All imaginative processes are produced in human brains.", "fol": "all x.(ImaginativeProcess(x) -> ProducedInHumanBrains(x))", "prediction": ["all x.(ImaginativeProcess(x) -> ProducedInHumanBrains(x))", "all x.(ImaginativeProcess(x) -> ProducedInHumanBrain(x))", "all x y.((ImaginativeProcess(x) & HumanBrain(y)) -> ProducedIn(x,y))", "all x.(ImaginativeProcess(x) -> ProducedInHumanBody(x))", "all x y z.((ImaginativeProcess(x) & HumanBrain(y) & Brain(z)) -> ProducedIn(x,y,z))", "all x y.((ImaginativeProcess(x) & HumanBody(y)) -> ProducedIn(x,y))", "all x.(ImaginativeProcess(x) -> ProducedInHumanBrains(x))", "all x.(ImaginativeProcesses(x) -> ProducedInHumanBrains(x))", "all x.(ImaginativeProcess(x) -> ProducedInHumanBrain(x))", "all x.(ImaginativeProcess(x) -> exists y.(HumanBrain(y) & ProducedIn(x,y)))", "all x y z.((ImaginativeProcess(x) & HumanBrain(y) & Brain(z) & ProducedIn(x,y,z)) -> ProducedIn(x,y,z))", "all x.(ImaginativeProcess(x) -> exists y.(HumanBrain(y) & ProducedIn(x,y))))", "all x y z.((ImaginativeProcess(x) & HumanBrain(y) & Brain(z) & ProducedIn(x,y,z)) -> ProducedIn(x,y))", "all x.(ImaginativeProcess(x) -> (ProducedInHumanBrains(x)))", "all x.(ImaginativeProcess(x) -> (ProducedInHumanBrain(x) | ProducedInHumanBrain(x)))", "all x.(ImaginativeProcess(x) -> (ProducedInHumanBrain(x)))"]}
{"id": "folio_train_908", "nl": "All science-fiction is from an imaginative process.", "fol": "all x.(ScienceFiction(x) -> ImaginativeProcess(x))", "prediction": ["all x.(ScienceFiction(x) -> FromImaginativeProcess(x))", "all x.(ScientificFiction(x) -> FromImaginativeProcess(x))", "all x.(ScienceFiction(x) -> ImaginativeProcess(x))", "all x.(ScientificFiction(x) -> ImaginativeProcess(x))", "all x.(ScienceFiction(x) -> (ImaginativeProcess(x) & From(x,y)))", "all x.(ScientificFiction(x) -> FromImaginativeProcess(x))", "all x.(ScienceFiction(x) -> CreatedByImaginativeProcess(x))", "all x.(ScienceFiction(x) -> IllusionaryProcess(x))", "all x.(ScienceFiction(x) -> IsImaginativeProcess(x))", "all x.(ScienceFiction(x) -> (ImaginativeProcess(x) & From(x,y)))", "all x.(ScientificFiction(x) -> IllusionaryProcess(x))", "all x.(ScienceFiction(x) -> IllusionalProcess(x))", "all x.(ScientificFiction(x) -> (ImaginativeProcess(x) & From(x,y)))", "all x.(ScienceFiction(x) -> FromImaginativeProcess(x))", "all x.(ScientificFiction(x) -> IllusionalProcess(x))", "all x.(ScienceFiction(x) -> (ImaginativeProcess(x) & ImaginativeProcess(x)))"]}
{"id": "folio_train_909", "nl": "Either science-fiction or fact. ", "fol": "all x.(ScienceFiction(x) | Fact(x))", "prediction": ["exists x.(ScienceFiction(x) | Fact(x))", "all x.(ScienceFiction(x) | Fact(x))", "all x.((ScientificFiction(x) | Fact(x)) -> (ScientificFiction(x) | Fact(x)))", "all x.(ScientificFiction(x) | Fact(x))", "exists x.(ScientificFiction(x) | Fact(x))", "(ScienceFiction(science) | Fact(science))", "all x.((ScienceFiction(x) | Fact(x)) -> (ScientificFiction(x) | Fact(x)))", "(ScientificFiction(ScientificFiction) | Fact(ScientificFiction))", "all x.((ScienceFiction(x) | Fact(x)) -> (Scientific(x) | Fact(x)))", "(ScientificFiction(ScientificFiction) | Fact(ScientificFiction(ScientificFiction)))", "(ScientificFiction(ScientificFiction) | Fact(ScientificFiction(ScientificFiction))", "all x.((ScientificFiction(x) | Fact(x)) -> (ScienceFiction(x) | Fact(x)))", "(ScientificFiction(ScientificFiction) | Fact(Fact))", "all x.((ScientificFiction(x) | Fact(x)) -> -ScientificFiction(x))", "(ScientificFiction(s) | Fact(s))", "all x.((ScientificFiction(x) | Fact(x)) -> Either(x))"]}
{"id": "folio_train_910", "nl": "No facts are proven to be false.", "fol": "all x.(Fact(x) -> -ProvenToBeFalse(x))", "prediction": ["-exists x.(Fact(x) & False(x))", "all x.(Fact(x) -> -ProvenFalse(x))", "-exists x.(Fact(x) & ProvenFalse(x))", "all x.(Fact(x) -> -ProvenToBeFalse(x))", "-exists x.(Fact(x) & ProvenToBeFalse(x))", "all x.(Fact(x) -> -False(x))", "-exists x.(Factual(x) & False(x))", "all x.((Fact(x) & -ProvenFalse(x)) -> -ProvenFalse(x))", "-exists x.(Fact(x) & -ProvenFalse(x))", "-exists x.(Fact(x) & True(x))", "-exists x.(Fact(x) & ProvedFalse(x))", "all x.((Fact(x) & -ProvenFalse(x)) -> -False(x))", "-exists x.(Fact(x) & provenToBeFalse(x))", "-exists x.(Fact(x) & -ProvenToBeFalse(x))", "all x.((Fact(x) & -ProvenFalse(x)) -> -ProvedFalse(x))", "all x.(Factual(x) -> -ProvenFalse(x))"]}
{"id": "folio_train_911", "nl": "Dune is a science-fiction or proven to be false.", "fol": "(ScienceFiction(Dune) | ProvenToBeFalse(Dune))", "prediction": ["all x.(Dune(x) -> (ScienceFiction(x) | ProvenToBeFalse(x)))", "all x.(Dune(x) -> (ScienceFiction(x) | False(x)))", "all x.(Dune(x) -> (ScienceFiction(x) | ProvenFalse(x)))", "all x.(Dune(x) -> (ScienceFiction(x) | ProvenToBeFalse(x)))", "all x.(Dune(x) -> (ScienceFiction(x) | False(x)))", "all x.(Dune(x) -> (ScientificFiction(x) | ProvenToBeFalse(x)))", "all x.(Dune(x) -> (ScienceFiction(x) | ProvenFalse(x)))", "exists x.(Dune(x) & (ScienceFiction(x) | ProvenToBeFalse(x)))", "all x.(Dune(x) -> (ScientificFiction(x) | ProvenFalse(x)))", "all x.(Dune(x) -> (ScientificFiction(x) | False(x)))", "all x.(Dune(x) -> (ScienceFiction(x) | ProvenTrue(x)))", "all x.(Dune(x) -> (ScienceFiction(x) | provenToBeFalse(x)))", "exists x.(Dune(x) & (ScienceFiction(x) | ProvenFalse(x)))", "all x.(Dune(x) -> (ScienceFiction(x) | ProvenToBeFalse(x)))", "exists x.(Dune(x) & (ScienceFiction(x) | False(x)))", "all x.(Dune(x) -> (ScienceFiction(x) | True(x)))"]}
{"id": "folio_train_912", "nl": "Dune is a fact.", "fol": "Fact(Dune)", "prediction": ["all x.(Dune(x) -> Fact(x))", "all x.(Dune(x) -> Fact(x))", "exists x.(Dune(x) & Fact(x))", "all x.(Dune(x) -> Factual(x))", "exists x.(Dune(x) & Fact(x))", "all x.(Dune(x) -> Factual(x))", "Dune is a fact.", "All x.(Dune(x) -> Fact(x))", "exists x.(Dune(x) & Factual(x))", "all x.(Dune(x) -> Fact(x))", "all x.(Dune(x) -> Fake(x))", "exists x.(Dune(x) & Factual(x))", "Dune is a Fact.", "all x.(Dune(x) -> Fact(x))", "all x.(Dune(x) -> Fake(x))", "Dune is a Factual(Dune)"]}
{"id": "folio_train_913", "nl": "Dune is produced in human brains and is an imaginative process.", "fol": "(ProducedInHumanBrains(Dune) & ImaginativeProcess(Dune))", "prediction": ["all x.(Dune(x) -> (ProducedInHumanBrains(x) & ImaginativeProcess(x)))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) & ImaginativeProcess(x)))", "all x y.((Dune(x) & HumanBrain(y)) -> (ProducedIn(x,y) & ImaginativeProcess(x)))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) & ImaginativeProcess(x)))", "all x y.((Dune(x) & HumanBrain(y)) -> (ProducedIn(x,y) & ImaginativeProcess(x)))", "all x.(Dune(x) -> (ProducedInHumanBrain(x) & ImaginativeProcess(x)))", "all x y.((Dune(x) & HumanBody(y)) -> (ProducedIn(x,y) & ImaginativeProcess(x)))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) & ImaginativeProcess(x)))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) & IllusionaryProcess(x)))", "all x y.((Dune(x) & HumanBody(y)) -> (ProducedIn(x,y) & ImaginativeProcess(x)))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) & ImaginativeProcess(x)))", "all x.(Dune(x) -> exists y.(HumanBrain(y) & ProducedIn(x,y)) & ImaginativeProcess(x)))", "all x.(Dune(x) -> (ProducedInHumanBrain(x) & ImaginativeProcess(x)))", "all x.(Dune(x) -> (ProducedInHumanBody(x) & ImaginativeProcess(x)))", "all x.(Dune(x) -> (ManufacturedInHumanBrains(x) & ImaginativeProcess(x)))", "all x y.((Dune(x) & HumanBrain(y)) -> (ProducedIn(x,y) & IllusionaryProcess(x)))"]}
{"id": "folio_train_914", "nl": "Dune is either produced in human brains or an imaginative process.", "fol": "(ProducedInHumanBrains(Dune) | ImaginativeProcess(Dune))", "prediction": ["all x.(Dune(x) -> (ProducedInHumanBrains(x) | ImaginativeProcess(x)))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) | ImaginativeProcess(x)))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) | CreatedInImaginativeProcess(x)))", "all x.(Dune(x) -> (ProducedInHumanBrain(x) | ImaginativeProcess(x)))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) | ImaginativeProcess(x)))", "all x y.((Dune(x) & HumanBrain(y)) -> (ProducedIn(x,y) | ImaginativeProcess(x)))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) | CreatedInImaginativeProcess(x)))", "exists x.(Dune(x) & (ProducedInHumanBrains(x) | ImaginativeProcess(x)))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) | ImaginativeProcess(x)))", "all x.(Dune(x) -> ((ProducedInHumanBrains(x) | ImaginativeProcess(x))))", "all x.(Dune(x) -> (ProducedInHumanBrain(x) | ImaginativeProcess(x)))", "all x.(Dune(x) -> (ProducedInHumanBody(x) | ImaginativeProcess(x)))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) | ImaginativeProcess(x)))", "all x.(Dune(x) -> (ManufacturedInHumanBrains(x) | ImaginativeProcess(x)))", "all x y.((Dune(x) & HumanBrain(y)) -> (ProducedIn(x,y) | ImaginativeProcess(x,y)))", "exists x.(Dune(x) & (ProducedInHumanBrains(x) | ImaginativeProcess(x)))"]}
{"id": "folio_train_915", "nl": "Dune is produced in human brains and is science fiction.", "fol": "(ProducedInHumanBrains(Dune) & ScienceFiction(Dune))", "prediction": ["all x.(Dune(x) -> (ProducedInHumanBrains(x) & ScienceFiction(x)))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) & ScienceFiction(x)))", "all x y.((Dune(x) & HumanBrain(y)) -> (ProducedIn(x,y) & ScienceFiction(x)))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) & ScienceFiction(x)))", "all x.(Dune(x) -> (ProducedInHumanBrain(x) & ScienceFiction(x)))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) & ScienceFiction(x)))", "all x y.((Dune(x) & HumanBrain(y)) -> (ProducedIn(x,y) & ScienceFiction(x)))", "exists x.(Dune(x) & ProducedInHumanBrains(x) & ScienceFiction(x))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) & ScienceFiction(x)))", "all x.(Dune(x) -> (ProducedInHumanBody(x) & ScienceFiction(x)))", "(ProducedInHumanBrains(Dune) & ScienceFiction(Dune))", "all x.(Dune(x) -> (ProducedInHumanBrain(x) & ScienceFiction(x)))", "(all x.(Dune(x) -> ProducedInHumanBrains(x)) & ScienceFiction(x))", "all x.(Dunde(x) -> (ProducedInHumanBrains(x) & ScienceFiction(x)))", "exists x.(Dune(x) & ProducedInHumanBrains(x) & ScienceFiction(x))", "(ProducedInHumanBrains(dune) & ScienceFiction(dune))"]}
{"id": "folio_train_916", "nl": "Dune is either produced in human brains or science-fiction.", "fol": "(ProducedInHumanBrains(Dune) | ScienceFiction(Dune))", "prediction": ["all x.(Dune(x) -> (ProducedInHumanBrains(x) | ProducedInScienceFiction(x)))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) | ProducedInScienceFiction(x)))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) | ProducedInScientificFiction(x)))", "exists x.(Dune(x) & (ProducedInHumanBrains(x) | ProducedInScienceFiction(x)))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) | ScienceFiction(x)))", "all x.(Dune(x) -> (ProducedInHumanBrain(x) | ProducedInScienceFiction(x)))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) | ProducedInScientificFiction(x)))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) | ProducedInScienceFiction(x)))", "exists x.(Dune(x) & (ProducedInHumanBrains(x) | ProducedInScienceFiction(x)))", "exists x.(Dune(x) & (ProducedInHumanBrains(x) | ProducedInScientificFiction(x)))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) | ProducedInScienceFiction(x)))", "all x.(Dune(x) -> (ProducedInHumanBody(x) | ProducedInScienceFiction(x)))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) | CreatedInScienceFiction(x)))", "all x.(Dune(x) -> (ProducedInHumanBrain(x) | ProducedInScienceFiction(x)))", "exists x.(Dune(x) & (ProducedInHumanBrain(x) | ProducedInScienceFiction(x)))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) | ScienceFiction(x)))"]}
{"id": "folio_train_917", "nl": "If Dune is produced in human brains and is an imaginative process, then Dune is not produced in human brains and science-fiction.", "fol": "((ProducedInHumanBrains(Dune) & ImaginativeProcess(Dune)) -> (-ProducedInHumanBrains(Dune) & ScienceFiction(Dune)))", "prediction": ["all x.((Dune(x) & ProducedInHumanBrains(x) & ImaginativeProcess(x)) -> -ProducedInHumanBrains(x) & -ProducedInScienceFiction(x))", "all x.((Dune(x) & ProducedInHumanBrains(x) & ImaginativeProcess(x)) -> -(Dune(x) & ProducedInHumanBrains(x) & ScienceFiction(x)))", "all x.((Dune(x) & ProducedInHumanBrains(x) & ImaginativeProcess(x)) -> -ProducedInHumanBrains(x) & -ProducedInScienceFiction(x))", "all x.((Dune(x) & ProducedInHumanBrains(x) & ImaginativeProcess(x)) -> -(Dune(x) & ProducedInHumanBrains(x) & ScienceFiction(x)))", "all x.((Dune(x) & ProducedInHumanBrains(x) & ImaginativeProcess(x)) -> (-ProducedInHumanBrains(x) & -ProducedInScienceFiction(x)))", "all x.((Dune(x) & ProducedInHumanBrains(x) & ImaginativeProcess(x)) -> -ProducedInHumanBrainsAndScienceFiction(x))", "all x.((Dune(x) & ProducedInHumanBrains(x) & ImaginativeProcess(x)) -> -(DuneProducedInHumanBrains(x) & ScienceFiction(x)))", "all x.((Dune(x) & ProducedInHumanBrains(x) & ImaginativeProcess(x)) -> -ProducedInHumanBrains(x) & ScienceFiction(x))", "all x.((Dune(x) & ProducedInHumanBrains(x) & ImaginativeProcess(x)) -> -(ProducedInHumanBrains(x) & ScienceFiction(x)))", "all x.((Dune(x) & ProducedInHumanBrains(x) & ImaginativeProcess(x)) -> -ProducedInHumanBrainsAndScienceFiction(x))", "all x.((Dune(x) & ProducedInHumanBrains(x) & ImaginativeProcess(x)) -> (-ProducedInHumanBrains(x) & -ProducedInScienceFiction(x)))", "all x.((Dune(x) & ProducedInHumanBrains(x) & ImaginativeProcess(x)) -> -ProducedInHumanBrains(x) & -ProducedInScientificFiction(x))", "all x.((Dune(x) & ProducedInHumanBrains(x) & CreativeProcess(x)) -> -ProducedInHumanBrains(x) & -ProducedInScienceFiction(x))", "all x.((Dune(x) & ProducedInHumanBrains(x) & ImaginativeProcess(x)) -> -ProducedInHumanBrains(x) & ScienceFiction(x))", "all x.((Dune(x) & ProducedInHumanBrains(x) & ImaginativeProcess(x)) -> -ProducedInHumanBrains(x) & -ProducedInScientificFiction(x))", "all x.((Dune(x) & ProducedInHumanBrains(x) & ImaginativeProcess(x)) -> -(ProducedInHumanBrains(x) & ScienceFiction(x)))"]}
{"id": "folio_train_918", "nl": "If Dune is either a fact and produced in human brains, or neither a fact nor produced in human brains, then Dune is produced in human brains and science-fiction.", "fol": "(((Fact(Dune) & ProducedInHumanBrains(Dune)) | (-Fact(Dune) & -ProducedInHumanBrains(Dune))) -> (ProducedInHumanBrains(Dune) & ScienceFiction(Dune)))", "prediction": ["all x.((Dune(x) & (Factual(x) & ProducedInHumanBrains(x) | -Factual(x) & ProducedInHumanBrains(x))) -> (ProducedInHumanBrains(x) & ScienceFiction(x)))", "all x.((Dune(x) & (Factual(x) & ProducedInHumanBrains(x) | -Factual(x) & ProducedInHumanBrains(x))) -> (ProducedInHumanBrains(x) & ScienceFiction(x)))", "all x.((Dune(x) & (Factual(x) & ProducedInHumanBrains(x)) | -Factual(x) & ProducedInHumanBrains(x))) -> (ProducedInHumanBrains(x) & ScienceFiction(x)))", "all x.((Dune(x) & ((Factual(x) & ProducedInHumanBrains(x)) | -Factual(x) & ProducedInHumanBrains(x))) -> (ProducedInHumanBrains(x) & ScienceFiction(x)))", "all x.((Dune(x) & (Factual(x) & ProducedInHumanBrains(x)) | (-Factual(x) & ProducedInHumanBrains(x)))) -> (ProducedInHumanBrains(x) & ScienceFiction(x)))", "all x.((Dune(x) & (Factual(x) & ProducedInHumanBrains(x)) | -Factual(x) & -ProducedInHumanBrains(x))) -> (ProducedInHumanBrains(x) & ScienceFiction(x)))", "all x.((Dune(x) & ((Factual(x) & ProducedInHumanBrains(x)) | -Factual(x) & ProducedInHumanBrains(x))) -> (ProducedInHumanBrains(x) & ScienceFiction(x)))", "all x.((Dune(x) & (Factual(x) & ProducedInHumanBrains(x)) | -Factual(x) & ProducedInHumanBrains(x))) -> (ProducedInHumanBrains(x) & ScienceFiction(x)))", "all x.((Dune(x) & (Factual(x) & ProducedInHumanBrains(x) | -Factual(x) & ProducedInHumanBrains(x))) -> (ProducedInHumanBrains(x) & ProducedInScienceFiction(x)))", "all x.((Dune(x) & (Factual(x) & ProducedInHumanBrains(x)) | -Factual(x) & -ProducedInHumanBrains(x))) -> (ProducedInHumanBrains(x) & ScienceFiction(x)))", "all x.((Dune(x) & (Factual(x) & ProducedInHumanBrains(x)) | (-Factual(x) & ProducedInHumanBrains(x)))) -> (ProducedInHumanBrains(x) & ScienceFiction(x)))", "all x.((Dune(x) & ((Factual(x) & ProducedInHumanBrains(x)) | (-Factual(x) & ProducedInHumanBrains(x)))) -> (ProducedInHumanBrains(x) & ScienceFiction(x)))", "all x.((Dune(x) & ((Factual(x) & ProducedInHumanBrains(x)) | -Factual(x) & ProducedInHumanBrains(x))) -> (ProducedInHumanBrains(x) & ScienceFiction(x))))", "all x.((Dune(x) & (Factual(x) & ProducedInHumanBrains(x) | -Factual(x) & ProducedInHumanBrains(x))) -> (ProducedInHumanBrains(x) & ProducedInScienceFiction(x)))", "all x.((Dune(x) & (Factual(x) & ProducedInHumanBrains(x) | -Factual(x) & -ProducedInHumanBrains(x))) -> (ProducedInHumanBrains(x) & ScienceFiction(x)))", "all x.((Dune(x) & ((Factual(x) & ProducedInHumanBrains(x)) | (-Factual(x) & ProducedInHumanBrains(x)))) -> (ProducedInHumanBrains(x) & ScienceFiction(x)))"]}
{"id": "folio_train_919", "nl": "If Dune is science-fiction, then Dune is not produced in human brains and science-fiction.", "fol": "(ScienceFiction(Dune) -> (-ProducedInHumanBrains(Dune) & ScienceFiction(Dune)))", "prediction": ["all x.((Dune(x) & ScienceFiction(x)) -> -ProducedInHumanBrains(x) & -ProducedInScienceFiction(x))", "all x.((Dune(x) & ScienceFiction(x)) -> -ProducedInHumanBrains(x) & -ProducedInScienceFiction(x))", "all x.((Dune(x) & ScienceFiction(x)) -> (-ProducedInHumanBrains(x) & -ProducedInScienceFiction(x)))", "all x.((Dune(x) & ScienceFiction(x)) -> -(ProducedInHumanBrains(x) & ProducedInScienceFiction(x)))", "all x.((Dune(x) & ScienceFiction(x)) -> (-ProducedInHumanBrains(x) & -ProducedInScienceFiction(x)))", "all x.((Dune(x) & ScienceFiction(x)) -> -(ProducedInHumanBrains(x) & ProducedInScienceFiction(x)))", "all x.((Dune(x) & ScienceFiction(x)) -> -ProducedInHumanBrainsAndScienceFiction(x))", "all x.((Dune(x) & ScienceFiction(x)) -> -ProducedInHumanBrainsAndScienceFiction(x))", "all x.((Dune(x) & ScienceFiction(x)) -> -ProducedInHumanBrains(x) & -ProducedInScienceFiction(x)))", "all x.((Dune(x) & ScienceFiction(x)) -> -ProducedInHumanBrains(x) & -ProducedInScientificFiction(x))", "all x.((Dune(x) & ScienceFiction(x)) -> -ProducedInHumanBrains(x) & -ProducedInScientificFiction(x))", "all x.((Dune(x) & ScienceFiction(x)) -> -ProducedInHumanBrains(x) & -ProducedInScienceFiction(x)))", "all x.((Dune(x) & ScienceFiction(x)) -> (-ProducedInHumanBrains(x) & -ProducedInScientificFiction(x)))", "all x.((Dune(x) & ScienceFiction(x)) -> (-ProducedInHumanBrains(x) & -ProducedInScientificFiction(x)))", "all x.((Dune(x) & ScienceFiction(x)) -> -(ProducedInHumanBrains(x) & ProducedInScientificFiction(x)))", "all x.((Dune(x) & ScienceFiction(x)) -> -(ProducedInHumanBrains(x) & -ProducedInScienceFiction(x)))"]}
{"id": "folio_train_920", "nl": "If Dune is not produced in human brains and science-fiction, then Dune is neither an imaginative process nor proved to be false.", "fol": "((-ProducedInHumanBrains(Dune) & ScienceFiction(Dune)) -> (-ImaginativeProcess(Dune) & -ProvenToBeFalse(Dune)))", "prediction": ["all x.((Dune(x) & -ProducedInHumanBrains(x) & -ProducedInScienceFiction(x)) -> -ImaginativeProcess(x) & -ProvedToBeFalse(x))", "all x.((Dune(x) & -ProducedInHumanBrains(x) & -ProducedInScienceFiction(x)) -> -ImaginativeProcess(x) & -ProvedToBeFalse(x))", "all x.((Dune(x) & -ProducedInHumanBrains(x) & -ProducedInScienceFiction(x)) -> -ImaginativeProcess(x) & -ProvenToBeFalse(x))", "all x.((Dune(x) & -ProducedInHumanBrains(x) & -ProducedInScienceFiction(x)) -> -ImaginativeProcess(x) & -ProvenToBeFalse(x))", "all x.((Dune(x) & -ProducedInHumanBrains(x) & -ProducedInScienceFiction(x)) -> (-ImaginativeProcess(x) & -ProvedToBeFalse(x)))", "all x.((Dune(x) & -ProducedInHumanBrains(x) & -ProducedInScienceFiction(x)) -> (-ImaginativeProcess(x) & -ProvedToBeFalse(x)))", "all x.((Dune(x) & -ProducedInHumanBrains(x) & -ProducedInScienceFiction(x)) -> -ImaginativeProcess(x) & -ProvenedToBeFalse(x))", "all x.((Dune(x) & -ProducedInHumanBrains(x) & -ProducedInScienceFiction(x)) -> (-ImaginativeProcess(x) & -ProvenToBeFalse(x)))", "all x.((Dune(x) & -ProducedInHumanBrains(x) & -ProducedInScienceFiction(x)) -> -ImaginativeProcess(x) & -ProvenedToBeFalse(x))", "all x.((Dune(x) & -ProducedInHumanBrains(x) & -ProducedInScienceFiction(x)) -> (-ImaginativeProcess(x) & -ProvenToBeFalse(x)))", "all x.((Dune(x) & -ProducedInHumanBrains(x) & -ProducedInScienceFiction(x)) -> (-ImaginativeProcess(x) & -ProvenedToBeFalse(x)))", "all x.((Dune(x) & -ProducedInHumanBrains(x) & -ProducedInScienceFiction(x)) -> (NegativeProcess(x) & -ProvedToBeFalse(x)))", "all x.((Dune(x) & -ProducedInHumanBrains(x) & -ProducedInScienceFiction(x)) -> (-ImaginativeProcess(x) & -ProvenedToBeFalse(x)))", "all x.((Dune(x) & -ProducedInHumanBrains(x) & -ProducedInScienceFiction(x)) -> (NegativeProcess(x) & -ProvenToBeFalse(x)))", "all x.((Dune(x) & -ProducedInHumanBrains(x) & -ProducedInScienceFiction(x)) -> -ImaginativeProcess(x) & -ProvenFalse(x))", "all x.((Dune(x) & -ProducedInHumanBrainsAndScienceFiction(x)) -> -ImaginativeProcess(x) & -ProvedToBeFalse(x))"]}
{"id": "folio_train_921", "nl": "If Dune is not an imaginative process and science-fiction, then Dune is neither produced in human brains nor an imaginative process.", "fol": "((-ImaginativeProcess(Dune) & ScienceFiction(Dune)) -> (-ProducedInHumanBrains(Dune) & -ImaginativeProcess(Dune)))", "prediction": ["all x.((Dune(x) & -ImaginativeProcess(x) & ScienceFiction(x)) -> (-ProducedInHumanBrains(x) & -ImaginativeProcess(x)))", "all x.((Dune(x) & -ImaginativeProcess(x) & ScienceFiction(x)) -> (-ProducedInHumanBrains(x) & -ImaginativeProcess(x)))", "all x.((Dune(x) & -ImaginativeProcess(x) & ScienceFiction(x)) -> -(ProducedInHumanBrains(x) | ImaginativeProcess(x))))", "all x.((Dune(x) & -ImaginativeProcess(x) & ScienceFiction(x)) -> -(ProducedInHumanBrains(x) | CreatedInImaginativeProcess(x))))", "all x.((Dune(x) & -ImaginativeProcess(x) & ScienceFiction(x)) -> -(ProducedInHumanBrains(x) | ImaginativeProcess(x))))", "all x.((Dune(x) & -ImaginativeProcess(x) & ScienceFiction(x)) -> -(ProducedInHumanBrains(x) | ImaginativeProcess(x)))", "all x.((Dune(x) & -ImaginativeProcess(x) & ScienceFiction(x)) -> -(ProducedInHumanBrains(x) | CreatedInImaginativeProcess(x))))", "all x.((Dune(x) & -ImaginativeProcess(x) & ScienceFiction(x)) -> (-ProducedInHumanBrains(x) | -ImaginativeProcess(x)))", "all x.((Dune(x) & -ImaginativeProcess(x) & ScienceFiction(x)) -> -(ProducedInHumanBrains(x) | CreatedInImaginativeProcess(x)))", "all x.((Dune(x) & -ImaginativeProcess(x) & ScienceFiction(x)) -> -ProducedInHumanBrains(x) & -ImaginativeProcess(x))", "all x.((Dune(x) & -ImaginativeProcess(x) & ScienceFiction(x)) -> -(ProducedInHumanBrains(x) | ImaginativeProcess(x)))", "all x.((Dune(x) & -ImaginativeProcess(x) & ScienceFiction(x)) -> (-ProducedInHumanBrains(x) | -ImaginativeProcess(x)))", "all x.((Dune(x) & -ImaginativeProcess(x) & ScienceFiction(x)) -> -ProducedInHumanBrains(x) & -ImaginativeProcess(x))", "all x.((Dune(x) & -ImaginativeProcess(x) & ScienceFiction(x)) -> -(ProducedInHumanBrains(x) | CreatedInImaginativeProcess(x)))", "all x.((Dune(x) & -ImaginativeProcessAndScienceFiction(x)) -> (-ProducedInHumanBrains(x) & -ImaginativeProcess(x)))", "all x.((Dune(x) & -ImaginativeProcess(x) & ScienceFiction(x)) -> -(ProducedInHumanBrains(x) | ProducedInImaginativeProcess(x))))"]}
{"id": "folio_train_922", "nl": "An American superhero comes from either DC universe or Marvel universe.", "fol": "all x.((IsSuperhero(x) & IsAmerican(x)) -> ((OriginatesFrom(x,DcUniverse) & -OriginatesFrom(x,MarvelUniverse)) | (-OriginatesFrom(x,DcUniverse) & OriginatesFrom(x,MarvelUniverse))))", "prediction": ["all x.(AmericanSuperhero(x) -> (ComesFromDCUniverse(x) | ComesFromMarvelUniverse(x)))", "all x.(AmericanSuperhero(x) -> (ComesFrom(x,DC) | ComesFrom(x,Marvel)))", "all x.(AmericanSuperhero(x) -> (DCUniverse(x) | MarvelUniverse(x)))", "all x y.((AmericanSuperhero(x) & DCUniverse(y)) | MarvelUniverse(y)) -> ComesFrom(x,y))", "all x.(AmericanHero(x) -> (ComesFromDCUniverse(x) | ComesFromMarvelUniverse(x)))", "all x.(Superhero(x) -> (ComesFromDCUniverse(x) | ComesFromMarvelUniverse(x)))", "all x.(Superhero(x) -> (ComesFrom(x,DC) | ComesFrom(x,Marvel)))", "all x.(AmericanHero(x) -> (ComesFrom(x,DC) | ComesFrom(x,Marvel)))", "all x.(AmericanSuperhero(x) -> (ComesFrom DCUniverse(x) | ComesFromMarvelUniverse(x)))", "all x.(AmericanSuperhero(x) -> (DDCUniverse(x) | MarvelUniverse(x)))", "all x.(AmericanSuperhero(x) -> (ComesFrom(x,DC) | ComesFrom(x,Marvel)))", "all x.((Superhero(x) & (DCUniverse(x) | MarvelUniverse(x))) -> ComesFrom(x,y))", "all x.((AmericanSuperhero(x) & (DCUniverse(x) | MarvelUniverse(x))) -> ComesFrom(x,y))", "all x.(AmericanSuperhero(x) -> ((DCUniverse(x) | MarvelUniverse(x))))", "all x.(AmericanSuperhero(x) -> (FromDCUniverse(x) | FromMarvelUniverse(x)))", "all x.((Superhero(x) & (DCUniverse(x) | MarvelUniverse(x))) -> ComesFrom(x))"]}
{"id": "folio_train_923", "nl": "Captain America is a superhero.", "fol": "IsSuperhero(CaptainAmerica)", "prediction": ["all x.(CaptainAmerica(x) -> Superhero(x))", "All x.(CaptainAmerica(x) -> Superhero(x))", "all x.(CaptainAmerica(x) -> Superman(x))", "(Superhero(CaptainAmerica) & Superhero(CaptainAmerica))", "all x.(CaptainAmerica(x) -> Superhero(x))", "all x y.((CaptainAmerica(x) & Superhero(y)) -> Superhero(x))", "(Superhero(CaptainAmerica) | Superhero(CaptainAmerica)))", "all x.(CaptainAsia(x) -> Superhero(x))", "all x y.((CaptainAmerica(x) & Superhero(y)) -> Superhero(x,y))", "all x y.((CaptainAmerica(x) & Superhero(y)) -> Superman(x))", "(Superhero(CaptainAmerica) -> Superhero(CaptainAmerica))", "all x.(CaptainAvenger(x) -> Superhero(x))", "all x.(CaptainAm\u00e9rica(x) -> Superhero(x))", "(Superhero(CaptainAmerica) -> Superhero(CaptainAmerica))", "(Superhero(CaptainAmerica) & Superman(CaptainAmerica))", "all x.(CaptainAmerika(x) -> Superhero(x))"]}
{"id": "folio_train_924", "nl": "Captain America is an American.", "fol": "IsAmerican(CaptainAmerica)", "prediction": ["all x.(CaptainAmerica(x) -> American(x))", "All x.(CaptainAmerica(x) -> American(x))", "(American(CaptainAmerica) & American(CaptainAmerica))", "all x.(CaptainAmerica(x) -> American(x))", "(Asian(CaptainAmerica) & American(CaptainAmerica))", "All x.(CaptainAmerica(x) -> American(x))", "(American(CaptainAmerica) & American(CaptainAmerica))", "all x y.((CaptainAmerica(x) & American(y)) -> Is(x,y))", "CaptainAmerica(CaptainAmerica) -> American(CaptainAmerica))", "(All x.(CaptainAmerica(x) & American(x)) -> CaptainAmerica(x))", "all x y.((CaptainAmerica(x) & American(y)) -> American(x))", "CaptainAmerica(Captain(Captain) & American(Captain))", "CaptainAmerica(Captain) & American(Captain) & American(Captain) & American(Captain))", "CaptainAmerica(CaptainAmerica) & American(CaptainAmerica))", "(All x.(CaptainAmerica(x) -> American(x)))", "(American(CaptainAmerica) & -American(CaptainAmerica))"]}
{"id": "folio_train_925", "nl": "Captain America does not come from DC universe.", "fol": "-OriginatesFrom(CaptainAmerica,DcUniverse)", "prediction": ["(-ComesFromDCUniverse(CaptainAmerica))", "all x.(CaptainAmerica(x) -> -ComesFromDCUniverse(x))", "all x y.((CaptainAmerica(x) & DCUniverse(y)) -> -ComesFrom(x,y))", "-ComesFromDCUniverse(CaptainAmerica)", "all x.(CaptainAmerica(x) -> -DCUniverse(x))", "-(CaptainAmerica(CaptainAmerica) & DCUniverse(CaptainAmerica))", "All x.(CaptainAmerica(x) -> -ComesFromDCUniverse(x))", "All x.(CaptainAmerica(x) -> -DCUniverse(x))", "exists x.(CaptainAmerica(x) & -ComesFromDCUniverse(x))", "all x.(CaptainAmerica(x) -> -FromDCUniverse(x))", "all x.(CaptainAsia(x) -> -ComesFromDCUniverse(x))", "-(CaptainAmerica(CaptainAmerica) | DCUniverse(CaptainAmerica)))", "all x.(CaptainAmerica(x) -> -DDCUniverse(x))", "all x y.((CaptainAmerica(x) & DCUniverse(y)) -> -Comes(x,y))", "-(CaptainAmerica(Captain) & DCUniverse(Captain))", "all x.(CaptainAmerica(x) -> -ComesFromDCUniverse(x))"]}
{"id": "folio_train_926", "nl": "If a superhero is American, he speaks English.", "fol": "all x.((IsSuperhero(x) & IsAmerican(x)) -> SpeaksLanguage(x,English))", "prediction": ["all x.((Superhero(x) & American(x)) -> SpeaksEnglish(x))", "all x.(American(x) -> SpeaksEnglish(x))", "all x.((Superhero(x) & American(x)) -> SpeaksEngland(x))", "all x.((Superhero(x) & American(x)) -> SpeaksEnglish(x))", "all x.((Superhero(x) & American(x)) -> SpeaksEnglisch(x))", "all x.((Superhero(x) & American(x)) -> SpeaksEnglica(x))", "all x.(AmericanSuperhero(x) -> SpeaksEnglish(x))", "all x.((Superhero(x) & American(x)) -> (SpeaksEnglish(x)))", "all x.((Superhero(x) & American(x)) -> SpeakingEnglish(x))", "all x.((Superhero(x) & American(x)) -> SpokenEnglish(x))", "all x.(Superhero(x) -> (American(x) & SpeaksEnglish(x)))", "all x.((Superhero(x) & American(x)) -> SpeakEnglish(x))", "all x.((Superhero(x) & American(x)) -> SpysEnglish(x))", "all x.((Superhero(x) & American(x)) -> SpansEnglish(x))", "all x.((Superhero(x) & American(x)) -> SpeaksEarly(x))", "all x.((Superhero(x) & American(x)) -> SpeakersEnglish(x))"]}
{"id": "folio_train_927", "nl": "A superhero speaks English or Spanish.", "fol": "all x.(IsSuperhero(x) -> (SpeaksLanguage(x,English) | SpeaksLanguage(x,Spanish)))", "prediction": ["all x.(Superhero(x) -> (SpeaksEnglish(x) | SpeaksSpanish(x)))", "all x.(Superhero(x) -> (SpeakEnglish(x) | SpeakSpanish(x)))", "all x.(Superhero(x) -> (SpeaksEngland(x) | SpeaksSpanish(x)))", "all x.(Superhero(x) -> (Speaks(x,English) | Speaks(x,Spanish)))", "all x y.((Superhero(x) & (English(y) | Spanish(y))) -> Speaks(x,y))", "all x.(Superhero(x) -> (SpeaksEarly(x) | SpeaksSpanish(x)))", "all x.(Superhero(x) -> (SpeaksEnglish(x) | SpeaksSpanish(x)))", "exists x.(Superhero(x) & (SpeaksEnglish(x) | SpeaksSpanish(x)))", "all x.(Superman(x) -> (SpeaksEnglish(x) | SpeaksSpanish(x)))", "all x.(Superhero(x) -> (SpeaksEnglish(x) | SaysSpanish(x)))", "all x.(Superhero(x) -> (SpeakesEnglish(x) | SpeaksSpanish(x)))", "all x.(Superhero(x) -> (SpeakEnglish(x) | SpeakSpanish(x)))", "all x.(Superhero(x) -> (Speak(x,English) | Speak(x,Spanish)))", "all x y.((Superhero(x) & (SpeaksEnglish(x) | SpeaksSpanish(x))) -> Speaks(x,y))", "all x.(Superhero(x) -> (SpeaksEnglisch(x) | SpeaksSpanish(x)))", "all x.(Superhero(x) -> (SpeaksEnglish(x) | SpeaksSpanish(x)))"]}
{"id": "folio_train_928", "nl": "Captain America does not speak English.", "fol": "-SpeaksLanguage(CaptainAmerica,English)", "prediction": ["all x.(CaptainAmerica(x) -> -SpeaksEnglish(x))", "All x.(CaptainAmerica(x) -> -SpeaksEnglish(x))", "((CaptainAmerica(CaptainAmerica) & -SpeaksEnglish(CaptainAmerica)) -> -SpeaksEnglish(CaptainAmerica))", "(-SpeaksEnglish(CaptainAmerica))", "((CaptainAmerica(CaptainAmerica) & -SpeaksEnglish(CaptainAmerica)) | (CaptainAmerica(CaptainAmerica) & -SpeaksEnglish(CaptainAmerica))))", "all x.(CaptainAmerica(x) -> -SpeaksEnglisch(x))", "all x.(CaptainAmerica(x) -> -SpeakEnglish(x))", "((CaptainAmerica(CaptainAmerica) & -SpeaksEnglish(CaptainAmerica)) -> -SpeaksEnglish(CaptainAmerica(CaptainAmerica))", "(CaptainAmerica(CaptainAmerica) & -SpeaksEnglish(CaptainAmerica))", "-SpeaksEnglish(CaptainAmerica)", "((CaptainAmerica(CaptainAmerica) & -SpeaksEnglish(CaptainAmerica)) -> -SpeaksEnglish(CaptainAmerica,CaptainAmerica))", "((CaptainAmerica(CaptainAmerica) & -SpeaksEnglish(CaptainAmerica)) -> -SpeaksEnglisch(CaptainAmerica))", "((CaptainAmerica(CaptainAmerica) & -SpeaksEnglish(CaptainAmerica)) | (-SpeaksEnglish(CaptainAmerica) & CaptainAmerica(CaptainAmerica))))", "((CaptainAmerica(CaptainAmerica) & -SpeaksEnglish(CaptainAmerica)) | (-SpeaksEnglish(CaptainAmerica) & -SpeaksEnglish(CaptainAmerica))))", "((CaptainAmerica(CaptainAmerica) & -SpeaksEnglish(CaptainAmerica)) -> -SpeaksEnglish(CaptainAmerica(CaptainAmerica)))", "((CaptainAmerica(CaptainAmerica) & -SpeaksEnglish(CaptainAmerica)) | -SpeaksEnglish(CaptainAmerica)))"]}
{"id": "folio_train_929", "nl": "Captain America comes from Marvel universe.", "fol": "OriginatesFrom(CaptainAmerica,MarvelUniverse)", "prediction": ["all x y.((CaptainAmerica(x) & MarvelUniverse(y)) -> ComesFrom(x,y))", "all x.(CaptainAmerica(x) -> MarvelUniverse(x))", "all x.(CaptainAmerica(x) -> ComesFromMarvelUniverse(x))", "All x y.((CaptainAmerica(x) & MarvelUniverse(y)) -> ComesFrom(x,y))", "all x y z.((CaptainAmerica(x) & MarvelUniverse(y) & Universe(z)) -> ComesFrom(x,y,z))", "all x y.((CaptainAmerica(x) & Marvel(y)) -> ComesFrom(x,y))", "all x y z.((CaptainAmerica(x) & MarvelUniverse(y) & MarvelUniverse(z)) -> ComesFrom(x,y,z))", "all x y z.((CaptainAmerica(x) & MarvelUniverse(y) & Marvel(z)) -> ComesFrom(x,y,z))", "All x.(CaptainAmerica(x) -> MarvelUniverse(x))", "all x y.((Captain(x) & MarvelUniverse(y)) -> ComesFrom(x,y))", "All x.(CaptainAmerica(x) -> ComesFromMarvelUniverse(x))", "All x y.((CaptainAmerica(x) & Marvel(y)) -> ComesFrom(x,y))", "(ComesFromMarvelUniverse(CaptainAmerica) & MarvelUniverse(CaptainAmerica))", "all x y z.((CaptainAmerica(x) & MarvelUniverse(y) & MarvelUniverse(z)) -> ComesFrom(x,y))", "(MarvelUniverse(CaptainAmerica) -> ComesFrom(CaptainAmerica))", "all x y z.((CaptainAmerica(x) & MarvelUniverse(y) & Universe(z)) -> ComesFrom(x,y))"]}
{"id": "folio_train_930", "nl": "Captain America speaks Spanish.", "fol": "SpeaksLanguage(CaptainAmerica,Spanish)", "prediction": ["all x.(CaptainAmerica(x) -> SpeaksSpanish(x))", "all x y.((CaptainAmerica(x) & Spanish(y)) -> Speaks(x,y))", "All x.(CaptainAmerica(x) -> SpeaksSpanish(x))", "(SpeaksSpanish(CaptainAmerica) & Captain(CaptainAmerica))", "all x.(CaptainAmerica(x) -> speaksSpanish(x))", "(SpeakesSpanish(CaptainAmerica) & Captain(CaptainAmerica))", "all x.(CaptainAm\u00e9rica(x) -> SpeaksSpanish(x))", "all x.(CaptainAmerica(x) -> SpeakSpanish(x))", "all x y.((CaptainAmerica(x) & Spanish(y)) -> Speak(x,y))", "(SpeaksSpanish(CaptainAmerica) -> CaptainAmerica(CaptainAmerica))", "all x.(CaptainAmerica(x) -> SpeakingSpanish(x))", "all x.(CaptainAmerica(x) -> SpeakesSpanish(x))", "all x.(CaptainAmerica(x) -> (SpeaksSpanish(x) | SpeaksSpanish(x)))", "all x y.((CaptainAmerica(x) & Spanish(y)) -> Speakes(x,y))", "all x y.((CaptainAmerica(x) & Spanish(y)) -> Spys(x,y))", "all x.(CaptainAmerica(x) -> SpokenSpanish(x))"]}
{"id": "folio_train_931", "nl": "Robert Zimmer was born in Germany.", "fol": "BornInGermany(RobertZimmer)", "prediction": ["RobertZimmer(Robert) was bornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert)) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert)", "RobertZimmer(Robert) was bornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert)) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert)", "RobertZimmer (bornIn(RobertZimmer) & BornIn(RobertZimmer))", "RobertZimmer(Robert) was bornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert)", "RobertZimmer(Robert) was bornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert))", "RobertZimmer(Robert) was bornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert))", "RobertZimmer(Robert) was bornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert)) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert)", "RobertZimmer(Robert) was bornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert))", "RobertZimmer(Robert) was bornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert))", "RobertZimmer(Robert) was bornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert)) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert))", "RobertZimmer(Robert) was bornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert))", "RobertZimmer(Robert) was bornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert)) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert)", "(Birth(RobertZimmer) & BornIn(RobertZimmer))", "RobertZimmer(Robert) was bornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert)) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert))", "RobertZimmer(Robert) was bornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert) & BornIn(Robert))", "RobertZimmer (bornInGermany(Robert) & BornInGermany(Robert))"]}
{"id": "folio_train_932", "nl": "Robert Zimmer is an essayist.", "fol": "IsEssayist(RobertZimmer)", "prediction": ["all x.((RobertZimmer(x) & Essayist(x)) -> Essayist(x))", "(Essayist(RobertZimmer)", "all x.(RobertZimmer(x) -> Essayist(x))", "All x.(RobertZimmer(x) -> Essayist(x))", "all x.((RobertZimmer(x) & Essayist(x)) -> Writer(x))", "all x.((RobertZimmer(x) & Essayist(x)) -> Is(x,y))", "RobertZimmer (Essayist)", "RobertZimmer(Robert) is Essayist(Robert)", "RobertZimmer is Essayist(RobertZimmer)", "RobertZimmer(Robert) isEssayist(Robert)", "all x.((RobertZimmer(x) & Essayist(x)) -> Writes(x))", "RobertZimmer (Essayist(Robert) & Essayist(Robert))", "all x.((RobertZimmer(x) & Essayist(x)) -> Freelance(x))", "all x.((RobertZimmer(x) & Essayist(x)) -> Reads(x))", "all x.((RobertZimmer(x) & Essayist(x)) -> Reads(x,y))", "all x.((RobertZimmer(x) & Essayist(x)) -> WrittenBy(x,y))"]}
{"id": "folio_train_933", "nl": "Robert Zimmer was born in 1953.", "fol": "BornInYear(RobertZimmer,Year1953)", "prediction": ["RobertZimmer (bornIn(RobertZimmer) & BornIn(RobertZimmer))", "RobertZimmer (bornIn(RobertZimmer) & BornIn(RobertZimmer) & BornIn(RobertZimmer))", "Robert Zimmer was born in 1953.", "RobertZimmer (bornIn(RobertZimmer,1953))", "Robert Zimmer (bornIn(RobertZimmer) & BornIn(RobertZimmer) & BornIn(RobertZimmer))", "RobertZimmer (bornIn(RobertZimmer) & BornIn(RobertZimmer) & BornIn(RobertZimmer) & BornIn(RobertZimmer))", "RobertZimmer (bornIn(RobertZimmer) & BornIn(RobertZimmer) & BornIn(RobertZimmer,1953))", "(Birth(RobertZimmer) & BornIn(RobertZimmer) & BornIn(RobertZimmer))", "RobertZimmer (bornIn(RobertZimmer) & BornIn(RobertZimmer) & BornIn(RobertZimmer,53))", "Robert Zimmer (bornIn(RobertZimmer) & BornIn(RobertZimmer) & BornIn(RobertZimmer) & BornIn(RobertZimmer))", "(Birth(RobertZimmer) & BornIn(RobertZimmer) & BornIn(RobertZimmer) & BornIn(RobertZimmer))", "Robert Zimmer (bornIn(RobertZimmer) & BornIn(RobertZimmer))", "RobertZimmer (bornIn(RobertZimmer) & BornIn(RobertZimmer,1953))", "RobertZimmer (bornIn(RobertZimmer) & BornIn(RobertZimmer,53))", "RobertZimmer (bornIn(RobertZimmer) & BornIn(RobertZimmer) & BornIn(RobertZimmer,1953))", "Robert Zimmer (bornIn(RobertZimmer) & BornIn(RobertZimmer) & BornIn(RobertZimmer,1953))"]}
{"id": "folio_train_934", "nl": "Every essayist is a writer.", "fol": "all x.(IsEssayist(x) -> IsWriter(x))", "prediction": ["all x.(Essayist(x) -> Writer(x))", "all x y.((Essayist(x) & Writer(y)) -> Writer(x))", "all x.(Essentialist(x) -> Writer(x))", "exists x.(Essayist(x) & Writer(x))", "all x.exists y.(Essayist(x) & Writer(y))", "all x y.((Essayist(x) & Writer(y)) -> Is(x,y))", "all x y.((Essayist(x) & Writer(y)) -> Essayist(x))", "all x.(E essayist(x) -> Writer(x))", "all x.(Essayist(x) -> Writer(x))", "all x y.((Essayist(x) & Writer(y)) -> Writer(x,y))", "(all x.(Essayist(x) -> Writer(x)))", "all x y.((Essayist(x) & Writer(y)) -> WorksFor(x,y))", "all x y.((Essayist(x) & Writer(y)) -> Reads(x,y))", "all x y.((Essayist(x) & Writer(y)) -> WrittenBy(x,y))", "all x y.((Essayist(x) & Writer(y)) -> Author(x))", "all x.exists y.(Essayist(x) & Writer(y) & Writer(x))"]}
{"id": "folio_train_935", "nl": "Every person born in Germany is German.", "fol": "all x.(BornInGermany(x) -> IsGerman(x))", "prediction": ["all x.(BirthInGermany(x) -> German(x))", "all x.(BornInGermany(x) -> German(x))", "all x.((Person(x) & BornInGermany(x)) -> German(x))", "all x.((BirthInGermany(x) & BornInGermany(x)) -> German(x))", "all x.(BornIn(x,Germany) -> German(x))", "all x.((Person(x) & BornIn(x,Germany)) -> German(x))", "all x y.((Person(x) & BornIn(x,y)) -> German(x))", "all x.(BirthIn(x,Germany) -> German(x))", "all x y.((Person(x) & BornIn(x,y) & Germany(y)) -> German(x))", "all x y.((Person(x) & BornInGermany(x) & BornInGermany(y)) -> German(x))", "all x.(BirthInDeutschland(x) -> German(x))", "all x y.((Person(x) & BornInGermany(x)) -> German(x))", "all x.(BornIn(x,Deutschland) -> German(x))", "all x y.((Person(x) & BornInGermany(x,y)) -> German(x))", "all x.(BirthIn(x,Deutschland) -> German(x))", "all x y.((Person(x) & BornIn(x,y) & BornIn(x,y)) -> German(x))"]}
{"id": "folio_train_936", "nl": "Robert Zimmer is German.", "fol": "IsGerman(RobertZimmer)", "prediction": ["(German(RobertZimmer) & German(RobertZimmer))", "all x.(RobertZimmer(x) -> German(x))", "All x.(RobertZimmer(x) -> German(x))", "all x.((RobertZimmer(x) & German(x)) -> German(x))", "(German(RobertZimmer) | German(RobertZimmer)))", "all x.((RobertZimmer(x) & German(x)) -> Is(x,y))", "all x.(RogerZimmer(x) -> German(x))", "(German(RobertZimmer) & -German(RobertZimmer))", "All x.(RogerZimmer(x) -> German(x))", "all x.((RobertZimmer(x) & German(x)) -> (German(x) & German(x)))", "all x.((RobertZimmer(x) & German(x)) -> -German(x))", "(German(RobertZimmer) | German(RobertZimmer))", "all x.((RobertZimmer(x) & German(x)) -> Reads(x,y))", "all x.((RobertZimmer(x) & German(x)) -> (German(x) | German(x)))", "all x.((RobertZimmer(x) & German(x)) -> LocatedIn(x,y))", "RobertZimmer(x) & German(x))"]}
{"id": "folio_train_937", "nl": "Robert Zimmer is not a writer.", "fol": "-IsWriter(RobertZimmer)", "prediction": ["all x.((RobertZimmer(x) & -Writer(x)) -> -Writer(x))", "all x.(RobertZimmer(x) -> -Writer(x))", "all x.(RogerZimmer(x) -> -Writer(x))", "all x.((RobertZimmer(x) & -Writer(x)) -> -(RobertZimmer(x) & -Writer(x)))", "(-Writer(RobertZimmer))", "All x.(RobertZimmer(x) -> -Writer(x))", "all x.((RobertZimmer(x) & -Writer(x)) -> -(RobertZimmer(x) & -(RobertZimmer(x) & -(RobertZimmer(x)) & -(RobertZimmer(x)) & -(RobertZimmer(x) & -(RobertZimmer(x))))))", "all x.((RobertZimmer(x) & -Writer(x)) -> -(RobertZimmer(x) & -(RobertZimmer(x) & -(RobertZimmer(x)) & -(RobertZimmer(x) & -(RobertZimmer(x))))))", "all x.((RobertZimmer(x) & -Writer(x)) -> -(RobertZimmer(x) & -(RobertZimmer(x) & -(RobertZimmer(x) & -(RobertZimmer(x))) & -(RobertZimmer(x) & -(RobertZimmer(x))))))", "All x.((RobertZimmer(x) & -Writer(x)) -> -Writer(x))", "all x.((RobertZimmer(x) & -Writer(x)) -> -(RobertZimmer(x) & -(RobertZimmer(x) & -(RobertZimmer(x) & -(RobertZimmer(x)) & -(RobertZimmer(x) & -(RobertZimmer(x))))))", "all x.((RobertZimmer(x) & -Writer(x)) -> -(RobertZimmer(x) & -(RobertZimmer(x) & -(RobertZimmer(x)) & -(RobertZimmer(x) & -(RobertZimmer(x)) & -(RobertZimmer(x))))))", "all x.((RobertZimmer(x) & -Writer(x)) -> -(RobertZimmer(x) & -(RobertZimmer(x) & -(RobertZimmer(x)) & -(RobertZimmer(x) & -(RobertZimmer(x) & -(RobertZimmer(x))))))", "all x.((RobertZimmer(x) & -Writer(x)) -> -(RobertZimmer(x) & -(RobertZimmer(x) & -(RobertZimmer(x) & -(RobertZimmer(x) & -(RobertZimmer(x))))))", "all x.((RobertZimmer(x) & -Writer(x)) -> -(RobertZimmer(x) & Writer(x)))", "all x.((RobertZimmer(x) & -Writer(x)) -> -(RobertZimmer(x) & -(RobertZimmer(x) & -(RobertZimmer(x))) & -(RobertZimmer(x) & -(RobertZimmer(x) & -(RobertZimmer(x))))))"]}
{"id": "folio_train_938", "nl": "Robert Zimmer is a biographer.", "fol": "IsBiographer(RobertZimmer)", "prediction": ["all x.(RobertZimmer(x) -> Biographer(x))", "all x.(RogerZimmer(x) -> Biographer(x))", "all x.((RobertZimmer(x) & Biographer(x)) -> Biographer(x))", "(Biographer(RobertZimmer)", "all x.((RobertZimmer(x) & Biographer(x)) -> Is(x,y))", "RobertZimmer (Biographer)", "all x.((RobertZimmer(x) & Biographer(x)) -> Writer(x))", "all x.((RobertZimmer(x) & Biographer(x)) -> Reads(x,y))", "all x.((RobertZimmer(x) & Biographer(x)) -> Writes(x,y))", "all x.((RobertZimmer(x) & Biographer(x)) -> IsBiography(x))", "all x.((RobertZimmer(x) & Biographer(x)) -> Photographer(x))", "RobertZimmer(Robert) isBiographer(Robert)", "all x.((RobertZimmer(x) & Biographer(x)) -> Writes(x))", "all x.((RobertZimmer(x) & Biographer(x)) -> WorksFor(x,y))", "all x.((RobertZimmer(x) & Biographer(x)) -> Biography(x))", "all x.((RobertZimmer(x) & Biographer(x)) -> WorksOn(x,y))"]}
{"id": "folio_train_939", "nl": "All people who repay their loans on time have a high credit score.", "fol": "all x.(RepayLoansOnTime(x) -> HasHighCreditScore(x))", "prediction": ["all x.((Person(x) & RepaysLoansOnTime(x)) -> HighCreditScore(x))", "all x.(RepaysLoansOnTime(x) -> HighCreditScore(x))", "all x.((Person(x) & RepaymentsLoansOnTime(x)) -> HighCreditScore(x))", "all x.((Person(x) & RepayLoansOnTime(x)) -> HighCreditScore(x))", "all x.((Person(x) & RepaysLawsOnTime(x)) -> HighCreditScore(x))", "all x.((Person(x) & RepaymentLoansOnTime(x)) -> HighCreditScore(x))", "all x.((People(x) & RepaysLoansOnTime(x)) -> HighCreditScore(x))", "all x.((Person(x) & RepaysOnTime(x)) -> HighCreditScore(x))", "all x.((Person(x) & RepaysOnTimeLoans(x)) -> HighCreditScore(x))", "all x y.((Person(x) & RepaysLoansOnTime(x) & HighCreditScore(y)) -> HighCreditScore(x))", "all x y.((Person(x) & RepaysLoansOnTime(x)) -> HighCreditScore(x))", "all x.(RepayLoansOnTime(x) -> HighCreditScore(x))", "all x.((Person(x) & RepaymentOnTime(x)) -> HighCreditScore(x))", "all x.(RepaymentOnTime(x) -> HighCreditScore(x))", "all x y.((Person(x) & RepaysLoansOnTime(x) & HighCreditScore(x)) -> HighCreditScore(x))", "all x.((RepaysLoansOnTime(x) & HighCreditScore(x)) -> HighCreditScore(x))"]}
{"id": "folio_train_940", "nl": "Some people with high credit scores and high salaries are approved for mortgages.", "fol": "exists x.((HasHighCreditScore(x) & HasHighSalary(x)) -> ApprovedForMortgage(x))", "prediction": ["exists x.(Person(x) & HighCreditScores(x) & HighSalary(x) & ApprovedForMortgage(x))", "exists x.((Person(x) & HighCreditScores(x) & HighSalary(x)) -> ApprovedForMortgage(x))", "exists x.(Person(x) & HighCreditScores(x) & HighSalary(x) & ApprovedForMortgages(x))", "exists x.(Person(x) & HighCreditScore(x) & HighSalary(x) & ApprovedForMortgage(x))", "exists x.((Person(x) & HighCreditScores(x) & HighSalary(x)) -> ApprovedForMortgages(x))", "exists x.((Person(x) & HighCreditScore(x) & HighSalary(x)) -> ApprovedForMortgage(x))", "exists x.(Person(x) & HighCreditScore(x) & HighSalary(x) & ApprovedForMortgages(x))", "exists x.((Person(x) & HighCreditScore(x) & HighSalary(x)) -> ApprovedForMortgages(x))", "exists x.(Person(x) & HighCreditScore(x) & HighSalary(x))", "exists x.(Person(x) & HighCreditScores(x) & HighSalary(x))", "exists x.(Person(x) & (HighCreditScore(x) & HighSalary(x)) -> ApprovedForMortgage(x))", "exists x.(Person(x) & HighCreditScores(x) & HighSalary(x) & ApprovedForHomeownership(x))", "exists x.(Person(x) & HighCreditScores(x) & HighSalaries(x) & ApprovedForMortgages(x))", "exists x.((Person(x) & HighCreditScores(x) & HighSalaries(x)) -> ApprovedForMortgage(x))", "exists x.(Person(x) & HighCreditScores(x) & HighSalaries(x) & ApprovedForMortgage(x))", "exists x.(Person(x) & HighCreditScores(x) & HighSalary(x) & ApprovedForHazards(x))"]}
{"id": "folio_train_941", "nl": "John has a high salary.", "fol": "HasHighSalary(John)", "prediction": ["all x.(John(x) -> HighSalary(x))", "John has a highSalary(John)", "all x.((John(x) & HighSalary(x)) -> HighSalary(x))", "all x.((John(x) & HighSalary(x)) -> Has(x,y))", "All x.(John(x) -> HighSalary(x))", "(HighSalary(John) -> HighSalary(John))", "all x.((John(x) & HighSalary(x)) -> High(x))", "all x.(Jon(x) -> HighSalary(x))", "exists x.(John(x) & HighSalary(x))", "all x.((John(x) & HighSalary(x)) -> Has(x))", "(HighSalary(John) & HighSalary(John))", "(HighSalary(John) & -HighSalary(John))", "all x.(John(x) -> HasHighSalary(x))", "(HighSalary(John) -> HighSalary(John))", "(HasHighSalary(John) -> HighSalary(John))", "all x.((John(x) & HighSalary(x)) -> -HighSalary(x))"]}
{"id": "folio_train_942", "nl": "If John repays his loans on time, he will be approved for a mortgage.", "fol": "(RepayLoansOnTime(John) -> MortgageApproved(John))", "prediction": ["all x.((John(x) & RepaysLoansOnTime(x)) -> ApprovedForMortgage(x))", "all x.(RepaysLoansOnTime(x) -> ApprovedForMortgage(x))", "all x y.((John(x) & Loan(y) & RepaysOnTime(x,y)) -> ApprovedForMortgage(x))", "all x.((John(x) & RepaymentsLoansOnTime(x)) -> ApprovedForMortgage(x))", "all x y.((John(x) & Loans(y) & RepaysOnTime(x,y)) -> ApprovedForMortgage(x))", "all x.((John(x) & RepaysOnTime(x)) -> ApprovedForMortgage(x))", "all x y.((John(x) & Loan(y) & RepaysOnTime(x,y)) -> ApprovedForMortgage(x,y))", "all x.((John(x) & RepaysLoansOnTime(x)) -> ApprovedForHypothecary(x))", "all x.((John(x) & RepaysLoansOnTime(x)) -> ApprovedForHazard(x))", "all x.((John(x) & RepaysLoansOnTime(x)) -> ApprovedForHome mortgage(x))", "all x.((John(x) & RepaysLoansOnTime(x)) -> ApprovedForHortgage(x))", "all x y.((John(x) & Loans(y) & RepaysOnTime(x,y)) -> ApprovedForMortgage(x,y))", "all x.((John(x) & RepaysLoansOnTime(x)) -> ApprovedForMoney(x))", "all x.((John(x) & RepaysLoansOnTime(x)) -> ApprovedForHomeownership(x))", "all x.((John(x) & RepaysLoansOnTime(x)) -> ApprovedForHome Loan(x))", "all x.((John(x) & RepaymentsOnTime(x)) -> ApprovedForMortgage(x))"]}
{"id": "folio_train_943", "nl": "All students are members of the university.", "fol": "all x.(IsStudent(x) -> IsMemberOfUniversity(x))", "prediction": ["all x.(Student(x) -> MemberOfUniversity(x))", "all x.(Student(x) -> MembersOfUniversity(x))", "all x y.((Student(x) & University(y)) -> Member(x,y))", "all x.exists y.(Student(x) & University(y) & Member(x,y))", "all x.(Student(x) -> UniversityMember(x))", "all x.(Student(x) -> MembershipOfUniversity(x))", "all x y.((Student(x) & University(y)) -> MembersOf(x,y))", "all x y.((Student(x) & University(y)) -> Members(x,y))", "all x.exists y.(Student(x) & University(y) & MemberOf(x,y))", "all x.(Student(x) -> MembreOfUniversity(x))", "all x.(Student(x) -> (MemberOfUniversity(x) & MemberOfUniversity(x)))", "all x.(Student(x) -> MemberOfUniversity(x))", "all x y.((Student(x) & University(y)) -> MemberOf(x,y))", "all x.exists y.(Student(x) & University(y) & MembersOf(x,y))", "all x y.((Student(x) & University(y)) -> Membership(x,y))", "all x.(Student(x) -> (MemberOfUniversity(x)))"]}
{"id": "folio_train_944", "nl": "All graduate students are students.", "fol": "all x.(IsGraduateStudent(x) -> IsStudent(x))", "prediction": ["all x.(GraduateStudent(x) -> Student(x))", "all x.(GraduateStudent(x) -> Students(x))", "all x.((GraduateStudent(x) & Student(x)) -> GraduateStudent(x))", "all x y.((GraduateStudent(x) & GraduateStudent(y)) -> Student(x))", "all x.exists y.(GraduateStudent(x) & GraduateStudent(y) & Student(x))", "all x y.((GraduateStudent(x) & GraduateStudent(y)) -> Student(x,y))", "all x.(GraduateStudent(x) -> Student(x))", "all x.exists y.(GraduateStudent(x) & GraduateStudent(y) & Student(x,y))", "all x.exists y.(GraduateStudent(x) & GraduateStudent(y) & Student(y))", "all x y.((GraduateStudent(x) & GraduateStudent(y)) -> Student(y))", "all x.exists y.(GraduateStudent(x) & GraduateStudent(y) & Students(x))", "all x.exists y.(GraduateStudent(x) & GraduateStudent(y) & Students(x,y))", "all x y.((GraduateStudent(x) & Graduate(y)) -> Student(x))", "all x y.((GraduateStudent(x) & GraduateStudent(y)) -> Students(x))", "all x.(Student(x) -> Student(x))", "all x y.((GraduateStudent(x) & GraduateStudent(y)) -> Students(x,y))"]}
{"id": "folio_train_945", "nl": "All PhD students are graduate students.", "fol": "all x.(IsPhDStudent(x) -> IsGraduateStudent(x))", "prediction": ["all x.(PhDStudent(x) -> GraduateStudent(x))", "all x.(DoctoralStudent(x) -> GraduateStudent(x))", "all x.(PhD Student(x) -> GraduateStudent(x))", "all x.(PhD student(x) -> GraduateStudent(x))", "all x.(PhD(x) -> GraduateStudent(x))", "all x.((PhDStudent(x) & GraduateStudent(x)) -> GraduateStudent(x))", "all x.((PhD Student(x) & GraduateStudent(x)) -> GraduateStudent(x))", "all x.((PhD student(x) & GraduateStudent(x)) -> GraduateStudent(x))", "all x.((DoctoralStudent(x) & GraduateStudent(x)) -> GraduateStudent(x))", "all x.((PhDStudent(x) & GraduateStudent(x)) -> PhDStudent(x))", "all x.((PhD student(x) & GraduateStudent(x)) -> PhDStudent(x))", "all x.((Student(x) & PhD(x)) -> GraduateStudent(x))", "all x.((PhD Student(x) & GraduateStudent(x)) -> PhDStudent(x))", "all x.((PhD(x) & GraduateStudent(x)) -> PhDStudent(x))", "all x.(DissertationStudent(x) -> GraduateStudent(x))", "all x.(Doctor(x) -> GraduateStudent(x))"]}
{"id": "folio_train_946", "nl": "Some PhD students have high IQs.", "fol": "exists x.(IsPhDStudent(x) & HasHighIQ(x))", "prediction": ["exists x.(PhDStudent(x) & HighIQ(x))", "exists x.(DoctoralStudent(x) & HighIQ(x))", "exists x.(PhDStudent(x) & HasHighIQ(x))", "exists x.(PhD Student(x) & HighIQ(x))", "exists x.(PhD student(x) & HighIQ(x))", "exists x.(DoctoralStudent(x) & HasHighIQ(x))", "exists x.(PhDStudent(x) & HasHighIQs(x))", "exists x.(PhD Student(x) & HasHighIQ(x))", "exists x.(PhDStudent(x) & HighIQs(x))", "exists x.(Doctor(x) & PhDStudent(x) & HighIQ(x))", "exists x.(PhD student(x) & HasHighIQ(x))", "exists x.(Student(x) & PhD(x) & HighIQ(x))", "exists x.(ProvostStudent(x) & HighIQ(x))", "exists x.(DissertationStudent(x) & HighIQ(x))", "exists x.(PhD(x) & HighIQ(x))", "exists x.(PhDstudent(x) & HighIQ(x))"]}
{"id": "folio_train_947", "nl": "If John is not a PhD student, then he is not a member of the university.", "fol": "(-IsPhDStudent(John) -> -IsMemberOfUniversity(John))", "prediction": ["all x.((John(x) & -PhDStudent(x)) -> -MemberOfUniversity(x))", "all x.((John(x) & -DoctoralStudent(x)) -> -MemberOfUniversity(x))", "all x.((John(x) & -PhDStudent(x)) -> -UniversityMember(x))", "all x.((John(x) & -PhD Student(x)) -> -MemberOfUniversity(x))", "all x.((John(x) & -DoctoralStudent(x)) -> -UniversityMember(x))", "all x.((John(x) & -PhDStudent(x)) -> -PartOfUniversity(x))", "all x.((John(x) & -PhDStudent(x)) -> -Student(x))", "all x.((John(x) & -PhDStudent(x)) -> -DeanOfUniversity(x))", "all x.((PhDStudent(x) & -PhDStudent(x)) -> -MemberOfUniversity(x))", "all x.((John(x) & -PhD student(x)) -> -MemberOfUniversity(x))", "all x.(((John(x) & -PhDStudent(x)) -> -MemberOfUniversity(x))", "all x.((John(x) & - PhDStudent(x)) -> -MemberOfUniversity(x))", "all x.((John(x) & -PhDStudent(x)) -> -MemberOfUniv.(John(x)))", "all x.((John(x) & -PhDStudent(x)) -> -PhDStudent(x))", "all x.((John(x) & -PhDStudent(x)) -> -UserMember(x))", "all x.((John(x) & -PhDStudent(x)) -> -MemberOfU.City(x))"]}
{"id": "folio_train_948", "nl": "If John has a high IQ, then he is a PhD student or a graduate student.", "fol": "(HasHighIQ(John) -> (IsPhDStudent(John) | IsGraduateStudent(John)))", "prediction": ["all x.((John(x) & HighIQ(x)) -> (PhD student(x) | GraduateStudent(x)))", "all x.(HighIQ(x) -> (PhD student(x) | GraduateStudent(x)))", "all x.((John(x) & HighIQ(x)) -> (PhD Student(x) | GraduateStudent(x)))", "all x.(HighIQ(x) -> (PhD Student(x) | GraduateStudent(x)))", "all x.((John(x) & HighIQ(x)) -> (DoctoralStudent(x) | GraduateStudent(x)))", "all x.((HighIQ(x) & (PhDStudent(x) | GraduateStudent(x))) -> (PhDStudent(x) | GraduateStudent(x)))", "all x.(HighIQ(x) -> (PhDStudent(x) | GraduateStudent(x)))", "all x.((John(x) & HighIQ(x)) -> (PhDStudent(x) | GraduateStudent(x)))", "all x.((HighIQ(x) & (PhD Student(x) | GraduateStudent(x))) -> (PhD Student(x) | GraduateStudent(x)))", "all x.((HighIQ(x) & (PhD student(x) | GraduateStudent(x))) -> (PhD student(x) | GraduateStudent(x)))", "all x.(HighIQ(x) -> (DoctoralStudent(x) | GraduateStudent(x)))", "all x.(HasHighIQ(x) -> (PhD student(x) | GraduateStudent(x)))", "all x.((HighIQ(x) & (PhDStudent(x) | GraduateStudent(x))) -> (PhDStudent(x) | GraduateStudent(x))))", "all x.((Jon(x) & HighIQ(x)) -> (PhD student(x) | GraduateStudent(x)))", "all x.(HasHighIQ(x) -> (PhD Student(x) | GraduateStudent(x)))", "all x.(HighIQ(x) -> ((PhD student(x) | GraduateStudent(x))))"]}
{"id": "folio_train_949", "nl": "John has a high IQ.", "fol": "HasHighIQ(John)", "prediction": ["all x.(John(x) -> HighIQ(x))", "all x.((John(x) & HighIQ(x)) -> Has(x,y))", "John has a highIQ.", "all x.((John(x) & HighIQ(x)) -> HighIQ(x))", "All x.(John(x) -> HighIQ(x))", "all x.(John(x) -> HasHighIQ(x))", "all x.((John(x) & HighIQ(x)) -> Has(x))", "exists x.(John(x) & HighIQ(x))", "all x.((John(x) & HighIQ(x)) -> Has(x,Y))", "(HighIQ(John) & HighIQ(John))", "all x.((John(x) & HighIQ(x)) -> Has(x,John))", "all x.((John(x) & HighIQ(x)) -> HasIntelligence(x))", "(HighIQ(John) -> HighIQ(John))", "all x.((John(x) & HighIQ(x)) -> Has(x,x))", "all x.((John(x) & HighIQ(x)) -> HighIIQ(x))", "all x.((John(x) & HighIQ(x)) -> Has(x,y,z))"]}
{"id": "folio_train_950", "nl": "John does not have a high IQ.", "fol": "-HasHighIQ(John)", "prediction": ["all x.((John(x) & -HighIQ(x)) -> -HighIQ(x))", "all x.(John(x) -> -HighIQ(x))", "all x.((John(x) & -HighIQ(x)) -> -HasHighIQ(x))", "all x.((John(x) & HighIQ(x)) -> -HighIQ(x))", "all x.((John(x) & HighIQ(x)) -> -Has(x,y))", "all x.((John(x) & -HasHighIQ(x)) -> -HasHighIQ(x))", "all x.((John(x) & -HighIQ(x)) -> -(HighIQ(x) & HighIQ(x))))", "all x.((John(x) & -HighIQ(x)) -> -(HighIQ(x) & HighIQ(x)))", "(-HighIQ(John))", "(HasHighIQ(John) & -HasHighIQ(John))", "all x.((John(x) & -HighIQ(x)) -> -HasHireIQ(x))", "-HighIQ(John)", "All x.(John(x) -> -HighIQ(x))", "all x.((John(x) & -HighIQ(x)) -> -(HighIQ(x) | HighIQ(x))))", "all x.((John(x) & -HighIQ(x)) -> -(HighIQ(x) & -HighIQ(x)))", "all x.((John(x) & -HighIQ(x)) -> -Has(x,y))"]}
{"id": "folio_train_951", "nl": "John is a PhD student.", "fol": "IsPhDStudent(John)", "prediction": ["John is a PhDStudent(John)", "John is PhDStudent(John)", "((John(John) & PhDStudent(John)) -> PhDStudent(John))", "all x.(PhDStudent(x) -> John(x))", "all x.((John(x) & PhDStudent(x)) -> PhDStudent(x))", "John is a PhDStudent.", "(PhD student(John) & -PhD student(John))", "all x.((John(x) & PhDStudent(x)) -> -PhDStudent(x))", "(PhDStudent(John) & PhDStudent(John))", "all x.((John(x) & PhDStudent(x)) -> Is(x,y))", "(PhD student(John) & PhDStudent(John))", "(PhD Student(John) & -PhD Student(John))", "all x.((John(x) & PhDStudent(x)) -> IsPhD(x))", "(Student(John) & PhD(John))", "(PhD Student(John) & PhDStudent(John))", "all x.((John(x) & PhDStudent(x)) -> Reads(x))"]}
{"id": "folio_train_952", "nl": "Belgium, France and Germany are European countries.", "fol": "(IsEuropeanCountry(Belgium) | IsEuropeanCountry(France) | IsEuropeanCountry(Germany))", "prediction": ["all x.((Belgium(x) | France(x) | Germany(x)) -> EuropeanCountry(x))", "(EuropeanCountry(Belgium) & EuropeanCountry(France) & EuropeanCountry(Germany))", "(EuropeanCountry(Belgium) & EuropeanCountry(France) & EuropeanCountry(Germany))", "all x.((Belgium(x) | France(x) | Germany(x)) -> EuropeanCountry(x))", "all x y z.((Belgium(x) & France(y) & Germany(z)) -> (EuropeanCountry(x) | EuropeanCountry(y) & EuropeanCountry(z)))", "all x y z.((Belgium(x) & France(y) & Germany(z)) -> (EuropeanCountry(x) & EuropeanCountry(y)))", "(EuropeanCountry(Belgium) | EuropeanCountry(France) | EuropeanCountry(Germany))", "all x.(EuropeanCountry(x) -> (Belgium(x) | France(x) | Germany(x)))", "(EuropeanCountry(Belgium,EuropeanCountry) & EuropeanCountry(France,EuropeanCountry))", "(EuropeanCountry(Belgium) & EuropeanCountry(France) & EuropeanCountry(Deutschland))", "all x y z.((Belgium(x) & France(y) & Germany(z)) -> (EuropeanCountry(x) & EuropeanCountry(y) & EuropeanCountry(z)))", "(EuropeanCountry(Belgium) | EuropeanCountry(France) | EuropeanCountry(Germany)))", "all x y z.((Belgium(x) & France(y) & Germany(z)) -> EuropeanCountry(x))", "all x y z.((Belgium(x) & France(y) & Germany(z)) -> (EuropeanCountry(x) | EuropeanCountry(y)))", "all x.((Belgium(x) | France(x) | Germany(x)) -> European(x))", "(EuropeanCountry(Belgium,EuropeanCountry) | EuropeanCountry(France,EuropeanCountry) | EuropeanCountry(Germany,EuropeanCountry)))"]}
{"id": "folio_train_953", "nl": "Paris is the capital of France.", "fol": "IsCapitalOf(Paris,France)", "prediction": ["(Capital(Paris) & CapitalOfFrance(Paris))", "all x.((Paris(x) & CapitalOfFrance(x)) -> CapitalOfFrance(x))", "all x.((Paris(x) & CapitalOf(x,France)) -> CapitalOf(x,France))", "all x.(Paris(x) -> CapitalOfFrance(x))", "all x.((Paris(x) & CapitalOf(x,France)) -> Capital(x,France))", "all x.((Paris(x) & CapitalOf(x,France)) -> Capital(x))", "(Capital(Paris) & CapitalOf(Paris,France))", "Paris (Capital(Paris) & CapitalOfFrance(Paris))", "all x.((Paris(x) & CapitalOfFrance(x)) -> CapitalOf(x,France))", "all x.((Paris(x) & CapitalOf(x,france)) -> CapitalOf(x,france))", "all x.((Paris(x) & CapitalOfFrance(x)) -> Capital(x))", "(Capital(Paris) & CapitalOf(Paris))", "all x.((Paris(x) & CapitalOf(x)) -> CapitalOf(x,France))", "all x.((Paris(x) & Capital(x)) -> CapitalOfFrance(x))", "all x.(Paris(x) -> CapitalOf(x,France))", "all x.((Paris(x) & CapitalOf(x,France)) -> LocatedIn(x,France))"]}
{"id": "folio_train_954", "nl": "The Eiffel Tower is one of the main tourist attractions located in Paris.", "fol": "(IsTouristAttraction(EiffelTower) & IsLocatedIn(EiffelTower,Paris))", "prediction": ["all x.(EiffelTower(x) -> TouristAttraction(x))", "(MainTouristAttraction(EiffelTower) & LocatedInParis(EiffelTower))", "All x.(EiffelTower(x) -> TouristAttraction(x))", "all x.((EiffelTower(x) & LocatedInParis(x)) -> TouristAttraction(x))", "all x y.((EiffelTower(x) & Paris(y)) -> MainTouristAttraction(x,y))", "all x y.((EiffelTower(x) & Paris(y)) -> TouristAttraction(x,y))", "all x.((EiffelTower(x) & LocatedInParis(x)) -> MainTouristAttraction(x))", "all x y.((EiffelTower(x) & TouristAttraction(y)) -> LocatedInParis(x,y))", "(MainTouristAttraction(eiffelTower) & LocatedInParis(eiffelTower))", "all x.(EisenburgerTower(x) -> TouristAttraction(x))", "(MainTouristAttraction(EiffelTower,Paris))", "All x.(EisenburgerTower(x) -> TouristAttraction(x))", "all x.(EiffelTower(x) -> TouristAttraction(x) & LocatedInParis(x))", "The EiffelTower is one of the main tourist attractions located in Paris.", "all x.((EiffelTower(x) & TouristAttraction(x)) -> LocatedInParis(x))", "(MainTouristAttraction(EiffelTower) & LocatedInParis(EiffelTower,Paris))"]}
{"id": "folio_train_955", "nl": "Some people who live in Belgium speak French.", "fol": "exists x.(LivesIn(x,Belgium) -> SpeaksLanguage(x,French))", "prediction": ["exists x.(Person(x) & LivesIn(x,Belgium) & SpeakFrench(x))", "exists x.(BelgianPerson(x) & LivesIn(x,Belgium) & SpeakFrench(x))", "exists x.((Person(x) & LivesInBelgium(x)) -> SpeakFrench(x))", "exists x.(Person(x) & LivesIn(x,Belgium) & SpeaksFrench(x))", "exists x.(Person(x) & LivesInBelgium(x) & SpeakFrench(x))", "exists x.(Person(x) & LivesInBelgium(x)) -> SpeakFrench(x))", "exists x.(BelgianPerson(x) & LivesIn(x,Belgium))", "exists x.(BelgianPerson(x) & LivesIn(x,Belgium) & SpeaksFrench(x))", "exists x.(Belgian(x) & LivesIn(x,Belgium))", "exists x.(Person(x) & LivesInBelgium(x) & SpeaksFrench(x))", "exists x.((Person(x) & LivesInBelgium(x)) -> SpeaksFrench(x))", "exists x.(Person(x) & LivesInBelgium(x))", "exists x.(Person(x) & LivesInBelgium(x)) -> SpeaksFrench(x))", "exists x.(LivesIn(x,Belgium) & SpeakFrench(x))", "exists x.(Belgian(x) & LivesIn(x,Belgium) & SpeakFrench(x))", "exists x.(LivesInBelgium(x) & SpeakFrench(x))"]}
{"id": "folio_train_956", "nl": "If John goes to Europe, he will see some tourist attractions.", "fol": "exists x.(TravelsTo(John,Europe) -> (SeesAttraction(John,x) & IsTouristAttraction(x)))", "prediction": ["all x.((John(x) & GoesToEurope(x)) -> SeesTouristAttractions(x))", "all x.((John(x) & VisitsEurope(x)) -> SeesTouristAttractions(x))", "all x.((John(x) & GoesToEurope(x)) -> SeeTouristAttractions(x))", "all x.((John(x) & ToEurope(x)) -> SeesTouristAttractions(x))", "all x.((John(x) & GoesToEurope(x)) -> (SeesTouristAttractions(x)))", "all x.((John(x) & GoesToEurope(x)) -> WillSeeTouristAttractions(x))", "all x.((Jon(x) & GoesToEurope(x)) -> SeesTouristAttractions(x))", "all x.((John(x) & Europe(x)) -> SeesTouristAttractions(x))", "all x.(GoesToEurope(x) -> SeesTouristAttractions(x))", "all x y.((John(x) & Europe(y)) -> SeesTouristAttractions(x,y))", "all x.((John(x) & TravelsToEurope(x)) -> SeesTouristAttractions(x))", "all x.((John(x) & GoesToEurope(x)) -> SeeingTouristAttractions(x))", "all x.((John(x) & VisitsEurope(x)) -> SeeTouristAttractions(x))", "all x.((John(x) & GoesToEurope(x)) -> (SeeTouristAttractions(x)))", "all x.((John(x) & ToEurope(x)) -> SeeTouristAttractions(x))", "all x.(Europe(x) -> SeesTouristAttractions(x))"]}
{"id": "folio_train_957", "nl": "John speaks French.", "fol": "SpeaksLanguage(John,French)", "prediction": ["all x.(John(x) -> SpeaksFrench(x))", "(SpeaksFrench(John) & -SpeaksFrench(John))", "(SpeaksFrench(John) -> SpeaksFrench(John))", "All x.(John(x) -> SpeaksFrench(x))", "all x.((John(x) & French(x)) -> Speaks(x,y))", "(SpringsFrench(John) -> SpeaksFrench(John))", "all x.(John(x) -> speaksFrench(x))", "(SpeaksFrench(John,French) & -SpeaksFrench(John,French))", "(SpeaksFrench(John) & SpeaksFrench(John))", "all x.((John(x) & French(x)) -> Speaks(x))", "(SpeakesFrench(John) -> SpeaksFrench(John))", "(SpeaksFrench(John) | SpeaksFrench(John)))", "(SpeakesFrench(John) & -SpeaksFrench(John))", "all x.(John(x) -> SpeakingFrench(x))", "(SpeaksFrench(John) & -SpeakesFrench(John))", "(SpeaksFrench(John) & -SpeaksFrench(John)))"]}
{"id": "folio_train_958", "nl": "If John goes to Europe, he will see the Eiffel Tower.", "fol": "(TravelsTo(John,Europe) -> SeesAttraction(John,EiffelTower))", "prediction": ["all x.((John(x) & GoesToEurope(x)) -> SeesEiffelTower(x))", "all x.((John(x) & GoesToEurope(x)) -> SeesEisenburgerTower(x))", "all x.((John(x) & GoesToEurope(x)) -> SeesEisenfellTower(x))", "all x.((John(x) & GoesToEurope(x)) -> WillSeeEiffelTower(x))", "all x.((John(x) & VisitsEurope(x)) -> SeesEiffelTower(x))", "all x.((John(x) & ToEurope(x)) -> SeesEiffelTower(x))", "all x.(GoesToEurope(x) -> SeesEiffelTower(x))", "all x.((John(x) & GoesToEurope(x)) -> SeesEisenland(x))", "all x.((Jon(x) & GoesToEurope(x)) -> SeesEiffelTower(x))", "All x.((John(x) & GoesToEurope(x)) -> SeesEiffelTower(x))", "all x.((John(x) & VisitsEurope(x)) -> SeesEisenburgerTower(x))", "all x.((John(x) & GoesToEurope(x)) -> SeesEisenloop(x))", "all x y.((John(x) & Europe(y)) -> SeesEiffelTower(x,y))", "all x.((John(x) & GoesToEurope(x)) -> WillSeeEisenburgerTower(x))", "all x.((John(x) & Europe(x)) -> SeesEiffelTower(x))", "all x.((John(x) & ToEurope(x)) -> SeesEisenburgerTower(x))"]}
{"id": "folio_train_959", "nl": "The Eiffel Tower is located in the capital of France.", "fol": "exists x.(IsLocatedIn(EiffelTower,x) & IsCapitalOf(x,France))", "prediction": ["all x.(EiffelTower(x) -> LocatedInCapitalOfFrance(x))", "all x y.((EiffelTower(x) & Capital(y)) -> LocatedIn(x,y))", "All x.(EiffelTower(x) -> LocatedInCapitalOfFrance(x))", "all x y.((EiffelTower(x) & CapitalOfFrance(y)) -> LocatedIn(x,y))", "all x.(EiffelTower(x) -> (LocatedInCapitalOfFrance(x) & LocatedInCapitalOfFrance(x)))", "(LocatedInCapital(EiffelTower) & CapitalOfFrance(EiffelTower))", "All x.(EiffelTower(x) -> (LocatedInCapitalOfFrance(x) & LocatedInCapitalOfFrance(x)))", "all x.(EiffelTower(x) -> (LocatedInCapitalOfFrance(x) | LocatedInCapitalOfFrance(x)))", "all x y.((EiffelTower(x) & CapitalOf(y,x)) -> LocatedIn(x,y))", "All x.(EiffelTower(x) -> (LocatedInCapitalOfFrance(x) | LocatedInCapitalOfFrance(x)))", "all x.(EiffelTower(x) -> CapitalOfFrance(x))", "all x y.((EiffelTower(x) & CapitalOf(y,France)) -> LocatedIn(x,y))", "all x.(EisenburgerTower(x) -> LocatedInCapitalOfFrance(x))", "all x.(EiffelTower(x) -> (LocatedInCapitalOfFrance(x) & InCapitalOfFrance(x)))", "All x.(EiffelTower(x) -> CapitalOfFrance(x))", "All x.(EiffelTower(x) -> (LocatedInCapitalOfFrance(x) & InCapitalOfFrance(x)))"]}
{"id": "folio_train_960", "nl": "John lives in Belgium.", "fol": "LivesIn(John,Belgium)", "prediction": ["John lives in Belgium.", "(LivesIn(John,Belgium) & -LivesIn(John,Belgium))", "(LivesInBelgium(John) & -LivesInBelgium(John))", "(LisesIn(John,Belgium) & LivesIn(John,Belgium))", "(LivingIn(John,Belgium) -> LivesIn(John,Belgium))", "(LisesIn(John,Belgium) & -LivesIn(John,Belgium))", "(LisesInBelgium(John,Belgium) -> LivesIn(John,Belgium))", "(LisesIn(John,Belgium) & -LikesIn(John,Belgium))", "(LivesIn(John,Belgium) -> LivesIn(John,Belgium))", "(LivesIn(John,Belgium) & WorksIn(John,Belgium))", "(LivesInBelgium(John) -> LivesIn(John,Belgium))", "(LivesInBelgium(John) -> LivesInBelgium(John))", "(LivesIn(John,Belgium) & -LivesIn(John,Belgium)))", "(LisesInBelgium(John) & LivesInBelgium(John))", "(LivesInBelgium(John) -> LivesIn(John,Belgium)))", "(LivesInBelgium(John) & -LivesIn(John,Belgium))"]}
{"id": "folio_train_961", "nl": "All sports cars are loud.", "fol": "all x.(IsSportsCar(x) -> IsLoudCar(x))", "prediction": ["all x.(SportsCar(x) -> Loud(x))", "all x.(SportCar(x) -> Loud(x))", "all x y.((SportsCar(x) & SportsCar(y)) -> Loud(x))", "all x y.((SportsCar(x) & SportsCar(y)) -> Loud(x,y))", "all x.exists y.(SportsCar(x) & Loud(y))", "all x.(SoccerCar(x) -> Loud(x))", "all x y.((SportsCar(x) & Loud(y)) -> Has(x,y))", "all x y.((SportsCar(x) & Loud(y)) -> Loud(x))", "(all x.(SportsCar(x) -> Loud(x)))", "all x.(SportsCar(x) -> Loud(x))", "all x y.((SportsCar(x) & Loud(y)) -> Is(x,y))", "all x.(SportsCar(x) -> Loud(x))", "all x y.((SportsCar(x) & Loud(y)) -> All(x,y))", "exists x.(SportsCar(x) & Loud(x))", "all x.(SportingCar(x) -> Loud(x))", "all x y.((SportsCar(x) & Loud(y)) -> -Loud(x))"]}
{"id": "folio_train_962", "nl": "No loud cars are electric.", "fol": "all x.(IsLoudCar(x) -> -IsElectricCar(x))", "prediction": ["-exists x.(LoudCar(x) & Electric(x))", "-exists x.(LoudCar(x) & ElectricCar(x))", "all x.(LoudCar(x) -> -Electric(x))", "-exists x.(LoudCar(x) & -Electric(x))", "all x.((LoudCar(x) & -LoudCar(x)) -> Electric(x))", "(-exists x.(LoudCar(x) & Electric(x)))", "all x.((LoudCar(x) & Electric(x)) -> -(LoudCar(x) & Electric(x)))", "-all x.(LoudCar(x) -> Electric(x))", "all x.((LoudCar(x) & Electric(x)) -> -exists y.(LoudCar(y) & Electric(y)))", "all x.(LoudCar(x) -> -ElectricCar(x))", "all x.((LoudCar(x) & Electric(x)) -> -exists y.(LoudCar(y) & Electric(y))))", "-exists x.(LoudCar(x) & -ElectricCar(x))", "all x.((LoudCar(x) & Electric(x)) -> -exists y.((LoudCar(y) & Electric(y))))", "-exists x.(Loud(x) & Car(x) & Electric(x))", "all x.((LoudCar(x) & Electric(x)) -> -(LoudCar(x) & Electric(x))))", "all x.((LoudCar(x) & Electric(x)) -> -(LoudCar(x) -> Electric(x)))"]}
{"id": "folio_train_963", "nl": "If a car is a Ferrari, then it is a sports car.", "fol": "all x.(IsFerrari(x) -> IsSportsCar(x))", "prediction": ["all x.((Car(x) & Ferrari(x)) -> SportsCar(x))", "all x.(Ferrari(x) -> SportsCar(x))", "all x.((Car(x) & Ferrari(x)) -> SportCar(x))", "all x.(Car(x) -> (Ferrari(x) & SportsCar(x)))", "all x y.((Car(x) & Ferrari(y)) -> SportsCar(x))", "all x y.((Car(x) & Ferrari(x)) -> SportsCar(x))", "all x y.((Car(x) & Ferrari(x)) -> SportsCar(y))", "all x y.((Car(x) & Ferrari(x) & SportsCar(y)) -> SportsCar(x))", "(all x.((Car(x) & Ferrari(x)) -> SportsCar(x)))", "all x.(Ferrari(x) -> SportCar(x))", "all x y.((Car(x) & Ferrari(x) & Car(y)) -> SportsCar(x))", "all x.(Firefia(x) -> SportsCar(x))", "all x y.((Car(x) & Ferrari(y)) -> SportsCar(x,y))", "all x.(Fernsey(x) -> SportsCar(x))", "all x.(Firero(x) -> SportsCar(x))", "all x.((Car(x) & Ferrari(x)) -> Sportcar(x))"]}
{"id": "folio_train_964", "nl": "All cars made in Maranello are Ferrari", "fol": "all x.(IsMadeInMaranello(x) -> IsFerrari(x))", "prediction": ["all x.((Car(x) & MadeInMaranello(x)) -> Ferrari(x))", "all x.(MadeInMaranello(x) -> Ferrari(x))", "all x y.((Car(x) & MadeInMaranello(x) & MadeInMaranello(y)) -> Ferrari(x))", "all x y.((Car(x) & MadeInMaranello(x) & Ferrari(y)) -> MadeInMaranello(x))", "all x y.((Car(x) & MadeInMaranello(x) & MadeInMaranello(x)) -> Ferrari(y))", "all x y.((Car(x) & MadeInMaranello(x,y)) -> Ferrari(x))", "all x y.((Car(x) & MadeInMaranello(x) & Maranello(y)) -> Ferrari(x))", "all x y.((Car(x) & MadeInMaranello(x)) -> Ferrari(y))", "all x.((Car(x) & MadeInMaranello(x) & Ferrari(x)) -> MadeInMaranello(x))", "all x y.((Car(x) & MadeInMaranello(x) & MadeInMaranello(x)) -> Ferrari(x))", "all x y z.((Car(x) & MadeInMaranello(x) & Ferrari(y) & MadeInMaranello(z)) -> Ferrari(y))", "all x y.((Car(x) & Maranello(y) & MadeIn(x,y)) -> Ferrari(x))", "all x y.((Car(x) & MadeInMaranello(x) & Ferrari(y)) -> MadeInMaranello(x,y))", "all x.((Car(x) & MadeInMaranello(x)) -> FerrariCar(x))", "all x y z.((Car(x) & MadeInMaranello(x) & Ferrari(y) & MadeInMaranello(y)) -> Ferrari(z))", "all x y.((Car(x) & MadeInMaranello(x)) -> Ferrari(x))"]}
{"id": "folio_train_965", "nl": "If Prius is neither a sports car nor a loud car, then Prius is a Maranello-made car or a loud car.", "fol": "all x.(((-IsSportsCar(Prius) | -IsLoudCar(Prius)) -> IsMadeInMaranello(Prius)) | IsLoudCar(Prius))", "prediction": ["all x.((Prius(x) & -SportsCar(x) & -LoudCar(x)) -> (MaranelloMadeCar(x) | LoudCar(x)))", "all x.((Prius(x) & -SportsCar(x) & -LoudCar(x)) -> (MaranelloMade(x) | LoudCar(x)))", "all x.((Car(x) & -SportsCar(x) & -LoudCar(x)) -> (MaranelloMade(x) | LoudCar(x)))", "all x.((SportsCar(x) | LoudCar(x)) -> (MaranelloMadeCar(x) | LoudCar(x)))", "all x.((SportsCar(x) & -LoudCar(x)) -> (MaranelloMadeCar(x) | LoudCar(x)))", "all x.((Car(x) & -SportsCar(x) & -LoudCar(x)) -> (MaranelloMadeCar(x) | LoudCar(x)))", "all x.((Prius(x) & (-SportsCar(x) | LoudCar(x))) -> (MaranelloMadeCar(x) | LoudCar(x)))", "all x.((Prius(x) & -(SportsCar(x) | LoudCar(x))) -> (MaranelloMadeCar(x) | LoudCar(x)))", "all x.((Prius(x) & -SportsCar(x) & LoudCar(x)) -> (MaranelloMadeCar(x) | LoudCar(x)))", "all x.(((Prius(x) & -SportsCar(x) & -LoudCar(x)) -> (MaranelloMadeCar(x) | LoudCar(x)))", "all x.(((SportsCar(x) | LoudCar(x))) -> (MaranelloMadeCar(x) | LoudCar(x)))", "all x.((SpokenCar(x) & -SportsCar(x) & -LoudCar(x)) -> (MaranelloMadeCar(x) | LoudCar(x)))", "all x.((Product(x) & -SportsCar(x) & -LoudCar(x)) -> (MaranelloMadeCar(x) | LoudCar(x)))", "all x.(((SportsCar(x) | LoudCar(x)) & -SportsCar(x)) -> (MaranelloMadeCar(x) | LoudCar(x)))", "all x.((Prius(x) & -SportsCar(x) | LoudCar(x)) -> (MaranelloMadeCar(x) | LoudCar(x)))", "all x.((Prius(x) & -SportsCar(x) | LoudCar(x))) -> (MaranelloMadeCar(x) | LoudCar(x)))"]}
{"id": "folio_train_966", "nl": "Prius is an electric car.", "fol": "IsElectricCar(Prius)", "prediction": ["all x.(Prius(x) -> ElectricCar(x))", "(ElectricCar(Prius) & ElectricCar(Prius))", "All x.(Prius(x) -> ElectricCar(x))", "all x.(Prius(x) -> ElectricCar(x))", "all x y.((Prius(x) & ElectricCar(y)) -> ElectricCar(x))", "all x.((Prius(x) & ElectricCar(x)) -> ElectricCar(x))", "all x.(Prius(x) -> ElectricCar(x))", "(ElectricCar(Prius) -> ElectricCar(Prius))", "all x y.((Prius(x) & ElectricCar(y)) -> ElectricCar(x,y))", "all x.(Private(x) -> ElectricCar(x))", "exists x.(Prius(x) & ElectricCar(x))", "all x y.((Prius(x) & ElectricCar(y)) -> Is(x,y))", "(ElectricCar(Prius) | ElectricCar(Prius))", "(ElectricCar(Prius) -> ElectricCar(Prius))", "all x.((Prius(x) & ElectricCar(x)) -> -ElectricCar(x))", "all x y.((Prius(x) & ElectricCar(y)) -> Electric(x))"]}
{"id": "folio_train_967", "nl": "Prius is not an electric car.", "fol": "-IsElectricCar(Prius)", "prediction": ["all x.(Prius(x) -> -ElectricCar(x))", "-ElectricCar(Prius)", "(-ElectricCar(Prius))", "All x.(Prius(x) -> -ElectricCar(x))", "(-ElectricCar(Prius) & -ElectricCar(Prius))", "all x.(Prius(x) -> -ElectricCar(x))", "all x.(Private(x) -> -ElectricCar(x))", "exists x.(Prius(x) & -ElectricCar(x))", "(-ElectricCar(prius) & -ElectricCar(prius))", "-ElectricCar(prius)", "(-ElectricCar(Prius) -> -ElectricCar(Prius))", "all x.(Prius(x) -> -ElectricCar(x))", "(-ElectricCar(Prius) -> -ElectricCar(Prius))", "Prius & -ElectricCar(p) & -ElectricCar(p))", "Prius -ElectricCar(p) & -ElectricCar(p))", "Prius - ElectricCar(p) & -ElectricCar(p))"]}
{"id": "folio_train_968", "nl": "Prius is a Maranello-made car.", "fol": "IsMadeInMaranello(Prius)", "prediction": ["all x.(Prius(x) -> MaranelloMadeCar(x))", "all x.(Prius(x) -> MadeByMaranello(x))", "all x.(Prius(x) -> (MaranelloMadeCar(x) & MadeBy(x,Maranello)))", "all x.(Prius(x) -> (MaranelloMadeCar(x) & MadeIn(x,Maranello)))", "all x.(Prius(x) -> (MaranelloMadeCar(x) & MadeBy(x,Maranello)))", "all x y.((Prius(x) & MaranelloMadeCar(y)) -> MadeBy(x,y))", "all x.(Prius(x) -> (MaranelloMadeCar(x) & MadeBy(x)))", "all x.(Prius(x) -> (MaranelloMadeCar(x) & MadeIn(x)))", "all x.((Car(x) & MaranelloMade(x)) -> Prius(x))", "all x.(Prius(x) -> (MaranelloMadeCar(x) & MadeInMaranello(x)))", "all x.(Prius(x) -> (MaranelloMade(x) & Car(x)))", "all x.(Prius(x) -> MaranelloMadeCar(x))", "all x.(Prius(x) -> (MaranelloMadeCar(x) & MadeIn(x,Maranello)))", "all x.(Prius(x) -> MaranelloMadeCar(x))", "all x.(Prius(x) -> (MaranelloMadeCar(x) & MadeInCar(x)))", "all x.(Prius(x) -> MaranelloMade(x))"]}
{"id": "folio_train_969", "nl": "If Prius is a Ferrari or a loud car, then Prius is an electric car.", "fol": "all x.((IsFerrari(Prius) | IsLoudCar(Prius)) -> IsElectricCar(Prius))", "prediction": ["all x.((Prius(x) & (Ferrari(x) | LoudCar(x))) -> ElectricCar(x))", "all x.((Ferrari(x) | LoudCar(x)) -> ElectricCar(x))", "all x.(((Prius(x) & (Ferrari(x) | LoudCar(x))) -> ElectricCar(x))", "all x.((Prius(x) & (Ferrari(x) | Loud(x))) -> ElectricCar(x))", "all x.(((Ferrari(x) | LoudCar(x)) & Prius(x)) -> ElectricCar(x))", "all x.(((Ferrari(x) | LoudCar(x))) -> ElectricCar(x))", "all x.((Car(x) & (Ferrari(x) | Loud(x))) -> ElectricCar(x))", "all x.((Prius(x) & (Ferry(x) | LoudCar(x))) -> ElectricCar(x))", "all x.((Ferrari(x) | Loud(x)) -> ElectricCar(x))", "all x.((Prius(x) & (Firebird(x) | LoudCar(x))) -> ElectricCar(x))", "all x.((Car(x) & (Ferrari(x) | LoudCar(x))) -> ElectricCar(x))", "all x.((Ferry(x) | LoudCar(x)) -> ElectricCar(x))", "all x.((Firebird(x) | LoudCar(x)) -> ElectricCar(x))", "all x.((Prius(x) | LoudCar(x)) -> ElectricCar(x))", "all x.(((Ferrari(x) | LoudCar(x)) -> ElectricCar(x))", "all x.((Ford(x) | LoudCar(x)) -> ElectricCar(x))"]}
{"id": "folio_train_970", "nl": "If something is a plant, then it is not a cute animal.", "fol": "all x.(IsPlant(x) -> -IsCuteAnimal(x))", "prediction": ["all x.((Plant(x) & -CrazyAnimal(x)) -> -CrazyAnimal(x))", "all x.((Plant(x) & -CrazyAnimal(x)) -> -CuteAnimal(x))", "all x.((Plant(x) & -CuteAnimal(x)) -> -CuteAnimal(x))", "all x.((Plant(x) & -CuteAnimal(x)) -> -CrazyAnimal(x))", "all x.((Plant(x) & -CrazyAnimal(x)) -> -CostlyAnimal(x))", "all x.((Plant(x) & -CUTEAnimal(x)) -> -CuteAnimal(x))", "all x.(Plant(x) -> -CrazyAnimal(x))", "all x.((Plant(x) & -CrazyAnimal(x)) -> -CUTEAnimal(x))", "all x.((Plant(x) & -CUTEAnimal(x)) -> -CrazyAnimal(x))", "all x.((Plant(x) & -CrazyAnimal(x)) -> -CuriousAnimal(x))", "all x.((Plant(x) & -CrazyAnimal(x)) -> -Animal(x))", "all x.((Plant(x) & -CuteAnimal(x)) -> -CostlyAnimal(x))", "all x.((Plant(x) & -CrazyAnimal(x)) -> -CleanAnimal(x))", "all x.((Plant(x) & -CrazyAnimal(x)) -> -CheesyAnimal(x))", "all x.((Plant(x)) -> -CrazyAnimal(x))", "all x.((Plant(x) & -CrazyAnimal(x)) -> -CakeAnimal(x))"]}
{"id": "folio_train_971", "nl": "All flowers are plants.", "fol": "all x.(IsFlower(x) -> IsPlant(x))", "prediction": ["all x.(Flower(x) -> Plant(x))", "all x y.((Flower(x) & Plant(y)) -> Plant(x))", "all x.(Flower(x) -> Plant(x))", "all x.exists y.(Flower(x) & Plant(y) & ProducedBy(x,y))", "all x y.((Flower(x) & Plant(y)) -> Plant(x,y))", "all x.exists y.(Flower(x) & Plant(y) & DesignedFor(x,y))", "all x.exists y.(Flower(x) & Plant(y) & Produces(x,y))", "all x.exists y.(Flower(x) & Plant(y) & GrowsIn(x,y))", "all x.exists y.(Flower(x) & Plant(y) & Contains(x,y))", "all x.exists y.(Flower(x) & Plant(y))", "all x.exists y.(Flower(x) & Plant(y) & Flowers(x))", "all x.exists y.(Flower(x) & Plant(y) & Plant(x))", "all x.exists y.(Flower(x) & Plant(y) & Plant(y))", "all x.exists y.(Flower(x) & Plant(y) & Flower(x))", "(all x.(Flower(x) -> Plant(x))", "exists x.(Flower(x) & Plant(x))"]}
{"id": "folio_train_972", "nl": "Every kitten is a cute animal.", "fol": "all x.(IsKitten(x) -> IsCuteAnimal(x))", "prediction": ["all x.(Kitten(x) -> CuteAnimal(x))", "all x.(Kitty(x) -> CuteAnimal(x))", "all x.(Knife(x) -> CuteAnimal(x))", "all x y.((Kitten(x) & Animal(y)) -> Cute(x,y))", "exists x.(Kitten(x) & CuteAnimal(x))", "all x.(Kitten(x) -> CuteAnimal(x))", "all x.(Kitt(x) -> CuteAnimal(x))", "all x y.((Kitten(x) & Animal(y)) -> Cute(x))", "all x.(Katie(x) -> CuteAnimal(x))", "all x.(Kitten(x) -> CUTEAnimal(x))", "exists x.(Kitty(x) & CuteAnimal(x))", "all x.(Kitty(x) -> CuteAnimal(x))", "all x.(Kitten(x) -> Cute(x))", "all x.(Caterpillar(x) -> CuteAnimal(x))", "all x.(Kitten(x) -> ChicAnimal(x))", "all x.(Kitten(x) -> SweetAnimal(x))"]}
{"id": "folio_train_973", "nl": "If something is grown in a garden, then it is a flower.", "fol": "all x.(IsGrownInGarden(x) -> IsFlower(x))", "prediction": ["all x.((GrownInGarden(x) & Flower(x)) -> GrownInGarden(x))", "all x.((Garden(x) & GrownIn(x,Garden)) -> Flower(x))", "all x.((GrownInGarden(x) & Flowers(x)) -> Flower(x))", "all x.((GrownInGarden(x) & Flower(x)) -> Flower(x))", "all x.((GrownInGarden(x) & Flowers(x)) -> GrownInGarden(x))", "all x y.((Garden(x) & GrownIn(x,y)) -> Flower(x))", "all x.(GrownInGarden(x) -> Flower(x))", "all x.((GrownInGarden(x) & InGarden(x)) -> Flower(x))", "all x.((Garden(x) & GrownIn(x)) -> Flower(x))", "all x y.((GrownInGarden(x) & Flower(y)) -> GrownInGarden(x,y))", "all x.((GrownInGarden(x) & GrownInGarden(x)) -> Flower(x))", "all x.((GrownInGarden(x) & Flower(x)) -> GrowsInGarden(x))", "all x.((GrownInGarden(x) & Flowers(x)) -> Flowers(x))", "all x.((Garden(x) & GrownIn(x,y)) -> Flower(x))", "all x.((GrownInGarden(x) & Flower(x)) -> Flower(x))", "all x.((GrownInGarden(x) & Flower(x)) -> Flowers(x))"]}
{"id": "folio_train_974", "nl": "Piper is a kitten or a cute animal.", "fol": "(IsKitten(Piper) | IsCuteAnimal(Piper))", "prediction": ["all x.(Piper(x) -> (Kitty(x) | CuteAnimal(x)))", "all x.(Piper(x) -> (Kitten(x) | CuteAnimal(x)))", "all x.(Piper(x) -> (Knife(x) | CuteAnimal(x)))", "exists x.(Piper(x) & (Kitty(x) | CuteAnimal(x)))", "exists x.(Piper(x) & (Kitten(x) | CuteAnimal(x)))", "all x.(Piper(x) -> (Kitty(x) | CuteAnimal(x)))", "(Kitten(Piper) | CuteAnimal(Piper))", "exists x.(Piper(x) & (Knife(x) | CuteAnimal(x)))", "all x.(Piper(x) -> (Kitty(x) | CuteAnimal(x)))", "all x.(Piper(x) -> (Kitten(x) | CuteAnimal(x)))", "all x.(Pipeer(x) -> (Kitty(x) | CuteAnimal(x)))", "all x.(Piper(x) -> (Kitten(x) | CuteAnimal(x)))", "(Kitty(Piper) | CuteAnimal(Piper))", "all x.(Piper(x) -> (Kitty(x) | CUTEAnimal(x)))", "(Knife(Piper) | CuteAnimal(Piper))", "all x.(Piper(x) -> (Kitten(x) | CUTEAnimal(x)))"]}
{"id": "folio_train_975", "nl": "Piper was grown in a garden.", "fol": "IsGrownInGarden(Piper)", "prediction": ["all x.(Piper(x) -> GrownInGarden(x))", "all x y.((Piper(x) & Garden(y)) -> GrownIn(x,y))", "all x y z.((Piper(x) & Garden(y) & Garden(z)) -> GrownIn(x,y,z))", "all x.(Piper(x) -> GrownInGarden(x))", "all x y.((Piper(x) & Garden(y)) -> GrownIn(x,y))", "all x y z.((Piper(x) & Garden(y) & Garden(z)) -> GrownIn(x,y,z))", "all x.(Pipeer(x) -> GrownInGarden(x))", "all x.(Piper(x) -> GrownInGarden(x))", "all x y.((Piper(x) & Garden(y) & GrownIn(x,y)) -> GrownIn(x,y))", "all x y z.((Piper(x) & Garden(y) & Garden(z) & GrownIn(x,y,z)) -> GrownIn(x,y,z))", "all x y.((Pipeer(x) & Garden(y)) -> GrownIn(x,y))", "all x.(Piper(x) -> (GrownInGarden(x) & GrownInGarden(x)))", "all x y z.((Piper(x) & Garden(y) & Garden(z)) -> GrownIn(x,y))", "all x y z.((Piper(x) & Garden(y) & Garden(z) & GrownIn(x,y,z)) -> GrownIn(x,y))", "all x y z.((Piper(x) & Garden(y) & Garden(z) & GrownIn(x,y)) -> GrownIn(x,z))", "all x y.((Piper(x) & Garden(y) & GrownIn(x,y)) -> GrownIn(x,y))"]}
{"id": "folio_train_976", "nl": "Piper was not grown in a garden.", "fol": "-IsGrownInGarden(Piper)", "prediction": ["all x.(Piper(x) -> -GrownInGarden(x))", "all x.(Piper(x) -> -GrownInGarden(x))", "all x y.((Piper(x) & Garden(y)) -> -GrownIn(x,y))", "(GrownInGarden(Piper) & -GrownInGarden(Piper))", "all x.(Pipeer(x) -> -GrownInGarden(x))", "all x.(Piper(x) -> -GardenGrowth(x))", "all x.(Piper(x) -> -GrownInGarden(x))", "(all x.(Piper(x) -> -GrownInGarden(x)))", "all x.(Piper(x) -> (-GrownInGarden(x)))", "exists x.(Piper(x) & -GrownInGarden(x))", "(GrownInGarden(Piper) -> -GrownInGarden(Piper))", "all x.(Pieper(x) -> -GrownInGarden(x))", "(-GrownInGarden(Piper))", "all x.(Piper(x) -> -GrowthInGarden(x))", "all x.(Piper(x) -> -GardenGrowth(x))", "-GrownInGarden(Piper)"]}
{"id": "folio_train_977", "nl": "Piper is a kitten.", "fol": "IsKitten(Piper)", "prediction": ["all x.(Piper(x) -> Kitten(x))", "(Kitten(Piper) & Kitten(Piper))", "(Kitty(Piper) & Kitten(Piper))", "All x.(Piper(x) -> Kitten(x))", "(Kitty(Piper) | Kitten(Piper))", "(Knife(Piper) & Kitten(Piper))", "exists x.(Piper(x) & Kitten(x))", "all x.(Piper(x) -> Kitten(x))", "(Kitten(Piper) & -Kitten(Piper))", "(Kitten(Piper) & Cat(Piper))", "(Kitten(Piper) -> Kitten(Piper))", "all x.(Piper(x) -> Kitten(x))", "(Kitten(Piper) -> Kitten(Piper))", "(Kitten(Piper) & Kitty(Piper))", "(Kitten(Piper) | Kitten(Piper))", "(Kitten(Pipeer) & Kitten(Piper))"]}
{"id": "folio_train_978", "nl": "Guam has participated in the Winter Olympics.", "fol": "ParticipatedInEvent(Guam,WinterOlympicsEvent)", "prediction": ["all x.(Guam(x) -> ParticipatedInWinterOlympics(x))", "all x.(Guam(x) -> ParticipatesInWinterOlympics(x))", "all x y.((Guam(x) & WinterOlympics(y)) -> ParticipatedIn(x,y))", "all x y.((Guam(x) & WinterOlympics(y)) -> ParticipatesIn(x,y))", "all x y.((Guam(x) & WinterOlympics(y)) -> Participated(x,y))", "all x.((Guam(x) & ParticipatedInWinterOlympics(x)) -> ParticipatesIn(x,y))", "all x.((Guam(x) & WinterOlympics(x)) -> ParticipatedIn(x,y))", "all x y.((Guam(x) & WinterOlympics(y)) -> Participates(x,y))", "All x.(Guam(x) -> ParticipatedInWinterOlympics(x))", "all x.((Guam(x) & ParticipatesInWinterOlympics(x)) -> ParticipatesIn(x,y))", "all x.((Guam(x) & ParticipatedInWinterOlympics(x)) -> ParticipatedInOlympics(x))", "all x.((Guam(x) & ParticipatesInWinterOlympics(x)) -> ParticipatesInOlympics(x))", "all x.((Guam(x) & WinterOlympics(x)) -> ParticipatesIn(x,y))", "all x.((Guam(x) & ParticipatedInWinterOlympics(x)) -> ParticipatesInOlympics(x))", "all x.((Guam(x) & ParticipatedInWinterOlympics(x)) -> ParticipatedIn(x,y))", "all x y.((Guam(x) & WinterOlympics(y)) -> Participate(x,y))"]}
{"id": "folio_train_979", "nl": "In 1988, the Winter Olympics were held in Calgary.", "fol": "(IsYear(Y1988) -> EventHeldAt(WinterOlympicsEvent,Calgary))", "prediction": ["all x y.((WinterOlympics(x) & Calgary(y)) -> HeldIn(x,y))", "all x y z.((WinterOlympics(x) & Calgary(y) & 1988(z)) -> HeldIn(x,y,z))", "All x y.((WinterOlympics(x) & Calgary(y)) -> HeldIn(x,y))", "all x y.((WinterOlympics(x) & Calgary(y) & HeldIn(x,y)) -> HeldIn(x,y))", "all x y z.((WinterOlympics(x) & Calgary(y) & 1988) -> HeldIn(x,y,z))", "all x y z.((WinterOlympics(x) & Calgary(y) & 1988) -> HeldIn(x,y))", "all x.((WinterOlympics(x) & HeldInCalifornia(x)) -> HeldInCalifornia(x))", "all x.((WinterOlympics(x) & HeldInCalgary(x)) -> HeldInCalgary(x))", "all x.(WinterOlympics(x) -> HeldInCalgary(x))", "all x y z.((WinterOlympics(x) & Calgary(y) & 1988(z)) -> HeldIn(y,z))", "all x.((WinterOlympics(x) & Calgary(x)) -> HeldIn(x,y))", "all x.((WinterOlympics(x) & HeldInCalgary(x,1998)) -> HeldInCalgary(x))", "all x.((WinterOlympics(x) & HeldInCalgary(x)) -> HeldIn(x,y))", "all x.((WinterOlympics(x) & Calgary(x)) -> HeldIn(x,88))", "all x.((WinterOlympics(x) & HeldInCalgary(x)) -> Calgary(x))", "all x y z.((WinterOlympics(x) & Calgary(y) & 1988(z)) -> HeldIn(y,x,z))"]}
{"id": "folio_train_980", "nl": "Guam sent an athlete to the Calgary Winter Olympics.", "fol": "(EventHeldAt(WinterOlympicsEvent,Calgary) -> SentAthlete(Guam))", "prediction": ["all x y.((GuamAthlete(x) & CalgaryWinterOlympics(y)) -> SendsTo(x,y))", "all x y.((GuamAthlete(x) & CalgaryWinterOlympics(y)) -> SentTo(x,y))", "all x y z.((GuamAthlete(x) & CalgaryWinterOlympics(y) & Athlete(z)) -> SentTo(x,y,z))", "all x y z.((Guam(x) & Athlete(y) & CalgaryWinterOlympics(z)) -> SentTo(x,y,z))", "all x y.((Guam(x) & Athlete(y)) -> SendsToCalgaryWinterOlympics(x,y))", "all x y z.((Guam(x) & Athlete(y) & CalgaryWinterOlympics(z)) -> SendsTo(x,y,z))", "all x y.((Guam(x) & Athlete(y)) -> CalgaryWinterOlympics(x,y))", "all x y.((Guam(x) & Athlete(y)) -> SentToCalgaryWinterOlympics(x,y))", "all x y z.((GuamAthlete(x) & CalgaryWinterOlympics(y) & Athlete(z)) -> SendsTo(x,y,z))", "all x y z.((Guam(x) & Athlete(y) & WinterOlympics(z) & Calgary(z)) -> SendsTo(x,y,z))", "all x y z.((Guam(x) & Athlete(y) & WinterOlympics(z) & Calgary(z)) -> SentTo(x,y,z))", "all x y z.((Guam(x) & Athlete(y) & WinterOlympics(z)) -> SendsTo(x,y,z))", "all x y z.((Guam(x) & Athlete(y) & Calgary(z)) -> SentToWinterOlympics(x,y,z))", "all x.(Guam(x) -> SendsAthleteToCalgaryWinterOlympics(x))", "all x y.((Guam(x) & Athlete(y)) -> sentToCalgaryWinterOlympics(x,y))", "all x y.((Guam(x) & Athlete(y) & CalgaryWinterOlympics(x,y)) -> SendsTo(x,y))"]}
{"id": "folio_train_981", "nl": "If Guan sent an athlete to the Calgary Winter Olympics, then it participated in the Calgary Winter Olympics.", "fol": "(SentAthlete(Guam) -> ParticipatedInEvent(Guam,WinterOlympicsEvent))", "prediction": ["all x.((Guan(x) & SendsAthleteToCalgaryWinterOlympics(x)) -> ParticipatedInCalgaryWinterOlympics(x))", "all x y.((Guan(x) & Athlete(y) & SentToCalgaryWinterOlympics(x,y)) -> ParticipatedInCalgaryWinterOlympics(x,y))", "all x.((Guan(x) & sentAthleteToCalgaryWinterOlympics(x)) -> ParticipatedInCalgaryWinterOlympics(x))", "all x y.((Guan(x) & Athlete(y) & SendsToCalgaryWinterOlympics(x,y)) -> ParticipatedInCalgaryWinterOlympics(x,y))", "all x.((Guan(x) & SendsAthleteToCalgaryWinterOlympics(x)) -> ParticipatesInCalgaryWinterOlympics(x))", "all x.((Guan(x) & sentAthlete(x) & CalgaryWinterOlympics(x)) -> ParticipatedInCalgaryWinterOlympics(x))", "all x y.((Guan(x) & Athlete(y) & sentToCalgaryWinterOlympics(x,y)) -> ParticipatedInCalgaryWinterOlympics(x,y))", "all x y.((Guan(x) & Athlete(y) & SentToCalgaryWinterOlympics(x,y)) -> ParticipatedInCalgaryWinterOlympics(y))", "all x y.((Guan(x) & Athlete(y) & CalgaryWinterOlympics(x,y)) -> ParticipatedInCalgaryWinterOlympics(x,y))", "all x.((Guan(x) & sentAthlete(x) & CalgaryWinterOlympics(x)) -> ParticipatedInWinterOlympics(x))", "all x y z.((Guan(x) & Athlete(y) & CalgaryWinterOlympics(z) & SentTo(x,y,z)) -> ParticipatedIn(x,y,z))", "all x y.((Guan(x) & Athlete(y) & CalgaryWinterOlympics(x,y)) -> ParticipatedIn(x,y))", "all x y.((Guan(x) & Athlete(y) & SendsToCalgaryWinterOlympics(x,y)) -> ParticipatedInCalgaryWinterOlympics(y))", "all x y.((Guan(x) & Athlete(y) & CalgaryWinterOlympics(y)) -> ParticipatedIn(x,y))", "all x y z.((Guan(x) & Athlete(y) & CalgaryWinterOlympics(z) & sentTo(x,y,z)) -> ParticipatedIn(x,y,z))", "all x y.((Guan(x) & Athlete(y) & SentToCalgaryWinterOlympics(x,y)) -> ParticipatedInCalgaryWinterOlympics(x))"]}
{"id": "folio_train_982", "nl": "Judd Bankert is the only athlete from Guam who has ever competed in the Winter Olympics.", "fol": "(IsFrom(Bankert,Guam) & ParticipatedInEvent(Bankert,WinterOlympicsEvent))", "prediction": ["all x.((Athlete(x) & FromGuam(x) & CompetedInWinterOlympics(x)) -> JuddBankert(x))", "all x.((Athlete(x) & JuddBankert(x)) -> CompetedInWinterOlympics(x))", "All x.((Athlete(x) & FromGuam(x) & CompetedInWinterOlympics(x)) -> JuddBankert(x))", "all x y.((Athlete(x) & Guam(y) & CompetedInWinterOlympics(x,y)) -> JuddBankert(x))", "all x.((Athlete(x) & JuddBankert(x) & Guam(x)) -> CompetedInWinterOlympics(x))", "all x.((Athlete(x) & JuddBankert(x) & FromGuam(x)) -> CompetedInWinterOlympics(x))", "all x.((Athlete(x) & GuamAthlete(x) & CompetedInWinterOlympics(x)) -> JuddBankert(x))", "All x y.((Athlete(x) & Guam(y) & CompetedInWinterOlympics(x,y)) -> JuddBankert(x))", "all x.((Athlete(x) & JuddBankert(x) & GuamAthlete(x)) -> CompetedInWinterOlympics(x))", "all x.((AthleteFromGuam(x) & JuddBankert(x)) -> CompetedInWinterOlympics(x))", "All x.((Athlete(x) & JuddBankert(x)) -> CompetedInWinterOlympics(x))", "all x y.((Athlete(x) & Athlete(y) & Guam(x) & CompetedInWinterOlympics(y)) -> JuddBankert(x,y))", "all x.((Athlete(x) & JuddBankert(x)) -> EverCompetedInWinterOlympics(x))", "all x y.((Athlete(x) & Guam(y) & CompetedInWinterOlympics(x,y)) -> JuddBankert(x,y))", "all x y.((Athlete(x) & Athlete(y) & Guam(x) & CompetedInWinterOlympics(y)) -> JuddBankert(x))", "all x y.((Athlete(x) & Athlete(y) & Guam(x) & CompetedInWinterOlympics(x,y)) -> JuddBankert(x))"]}
{"id": "folio_train_983", "nl": "Judd Bankert competed in the 1992 Winter Olympics.", "fol": "ParticipatedInEvent(Bankert,WinterOlympicsEvent)", "prediction": ["all x y.((JuddBankert(x) & WinterOlympics(y)) -> CompetedIn(x,y))", "Judd Bankert competed in the 1992 WinterOlympics.", "all x y z.((JuddBankert(x) & WinterOlympics(y) & WinterOlympics(z)) -> CompetedIn(x,y,z))", "all x y.((JuddBankert(x) & WinterOlympics(y)) -> Competed(x,y))", "all x y z.((JuddBankert(x) & WinterOlympics(y) & WinterOlympics(z) & CompetedIn(x,y,z)) -> JuddBankert(x))", "all x y.((JuddBankert(x) & WinterOlympics(y) & 1992) -> CompetedIn(x,y))", "all x y z.((JuddBankert(x) & WinterOlympics(y) & WinterOlympics(z)) -> Competed(x,y,z))", "all x.((JuddBankert(x) & WinterOlympics(x,1992)) -> CompetedIn(x,92))", "all x y z.((JuddBankert(x) & WinterOlympics(y) & WinterOlympics(z) & CompetedIn(x,y,z)) -> CompetedIn(x,y,z))", "all x.((JuddBankert(x) & WinterOlympics(x,92)) -> CompetedIn(x,92))", "Judd Bankert competed in the 1992 Winter Olympics.", "all x y.((JuddBankert(x) & WinterOlympics(y) & 1992(y)) -> CompetedIn(x,y))", "all x y.((JuddBankert(x) & WinterOlympics(y,x)) -> CompetedIn(x,y))", "all x.(JuddBankert(x) -> CompetedInWinterOlympics(x,1992))", "all x.(JuddBankert(x) -> CompetedInWinterOlympics(x,92))", "all x.((JuddBankert(x) & WinterOlympics(x,1992)) -> CompetedIn(x,y))"]}
{"id": "folio_train_984", "nl": "Guam has participated in the Summer Olympics at least once.", "fol": "exists x.(ParticipatedInEvent(Guam,Summerolympics) & IsYear(x))", "prediction": ["all x.(Guam(x) -> ParticipatedInSummerOlympics(x))", "all x.(Guam(x) -> ParticipatesInSummerOlympics(x))", "all x.((Guam(x) & SummerOlympics(x)) -> ParticipatedAtLeastOneTime(x))", "all x y.((Guam(x) & SummerOlympics(y)) -> ParticipatedAtLeastOneTime(x,y))", "all x.((Guam(x) & ParticipatedInSummerOlympics(x)) -> AtLeastOneTime(x))", "all x.((Guam(x) & SummerOlympics(x)) -> ParticipatedAtLeastOne(x))", "all x.(Guam(x) -> (ParticipatedInSummerOlympics(x) & AtLeastOneTime(x)))", "all x y.((Guam(x) & SummerOlympics(y)) -> ParticipatedAtLeastOne(x,y))", "all x.(Guam(x) -> ParticipatedInSummerOlympicsAtLeastOneTime(x))", "all x.((Guam(x) & ParticipatedInSummerOlympics(x)) -> AtLeastOne(x))", "all x.((Guam(x) & SummerOlympics(x)) -> ParticipatesAtLeastOne(x))", "all x.((Guam(x) & ParticipatedInSummerOlympics(x)) -> ParticipatedAtLeastOneTime(x))", "all x y.((Guam(x) & SummerOlympics(y)) -> ParticipatedInAtLeastOne(x,y))", "all x.((Guam(x) & SummerOlympics(y)) -> ParticipatedAtLeastOneTime(x,y))", "all x.((Guam(x) & ParticipatesInSummerOlympics(x)) -> AtLeastOneTime(x))", "all x.((Guam(x) & SummerOlympics(x)) -> ParticipatedAtLeastOnly(x))"]}
{"id": "folio_train_985", "nl": "Michael O'Donnell is a British physician, journalist, author and broadcaster.", "fol": "(IsBritish(Michael) & IsPhysician(Michael) & IsJournalist(Michael) & IsAuthor(Michael) & IsBroadcaster(Michael))", "prediction": ["(BritishPhDennis(MichaelO'Donnell) & Physician(MichaelO'Donnell) & Journalist(MichaelO'Donnell) & Author(MichaelO'Donnell) & Broadcaster(MichaelO'Donnell)", "all x.((BritishPharmacist(x) & BritishJournalist(x) & Author(x) & Broadcaster(x)) -> MichaelO'Donnell(x))", "all x.((Medical(x) & Journalist(x) & Author(x) & Broadcaster(x)) -> MichaelO'Donnell(x))", "all x.((Michael O'Donnell(x) & BritishPharmacist(x) & Journalist(x) & Author(x) & Broadcaster(x)) -> MichaelO'Donnell(x))", "all x.((Michael O'Donnell(x) & BritishPharmacist(x) & Journalist(x) & Author(x) & Broadcaster(x)) -> Physician(x))", "all x.(MichaelO'Donnell(x) -> (BritishPharmacist(x) & BritishJournalist(x) & BritishAuthor(x) & BritishBroadcaster(x)))", "all x.((Doctor(x) & Journalist(x) & Author(x) & Broadcaster(x)) -> MichaelO'Donnell(x))", "Michael O'Donnell (BritishPhD(x) & Physician(x) & Journalist(x) & Author(x) & Broadcaster(x))", "all x.((Michael O'Donnell(x) & BritishPharmacist(x) & Journalist(x) & Author(x) & Broadcaster(x)) -> O'Donnell(x))", "all x.((MichaelO'Donnell(x) & BritishPharmacist(x) & Journalist(x) & Author(x) & Broadcaster(x)) -> Physician(x))", "all x.((Michael O'Donnell(x) & BritishPharmacist(x) & Journalist(x) & Author(x) & Broadcaster(x)) -> Doctor(x))", "(BritishPhDennis(MichaelO'Donnell) & Physician(MichaelO'Donnell) & Journalist(MichaelO'Donnell) & Author(MichaelO'Donnell) & Broadcaster(Michael O'Donnell)", "all x.((Michael O'Donnell(x) & BritishPhysician(x) & Journalist(x) & Author(x) & Broadcaster(x)) -> MichaelO'Donnell(x))", "all x.((BritishPharmacist(x) & BritishJournalist(x) & BritishAuthor(x) & BritishBroadcaster(x)) -> MichaelO'Donnell(x))", "(BritishPhDennis(MichaelO'Donnell) & Physician(MichaelO'Donnell) & Journalist(MichaelO'Donnell) & Author(MichaelO'Donnell) & Broadcaster(MichaelO'Donnell))", "all x.((MichaelO'Donnell(x) & BritishPharmacist(x) & Journalist(x) & Author(x) & Broadcaster(x)) -> MichaelO'Donnell(x))"]}
{"id": "folio_train_986", "nl": "One of the word-setters of My Word! was Michael O'Donnell.", "fol": "IsWordSetter(Michael)", "prediction": ["all x.((WordSetter(x) & MyWord(x)) -> MichaelO'Donnell(x))", "All x.((WordSetter(x) & MyWord(x)) -> MichaelO'Donnell(x))", "All x.((WordSetter(x) & MyWord!) -> MichaelO'Donnell(x))", "all x.((WordSetter(x) & MyWord!) -> MichaelO'Donnell(x))", "all x y.((WordSetter(x) & MyWord(y)) -> MichaelO'Donnell(x))", "All x.((MichaelO'Donnell(x) & WordSetter(x)) -> MyWord(x))", "All x y.((WordSetter(x) & MyWord(y)) -> MichaelO'Donnell(x))", "all x.((MichaelO'Donnell(x) & WordSetter(x)) -> MyWord(x))", "all x.((WordSetter(x) & MyWord(x)) -> MichaelODonnell(x))", "All x.((WordSetter(x) & MyWord(x)) -> MichaelODonnell(x))", "All x.((MichaelO'Donnell(x) & WordSetter(x)) -> MyWord!", "All x.((MichaelO'Donnell(x) & MyWord(x)) -> WordSetter(x))", "all x y.((WordSetter(x) & MyWord(y)) -> MichaelO'Donnell(x,y))", "all x.((MichaelO'Donnell(x) & MyWord(x)) -> WordSetter(x))", "all x.((MichaelO'Donnell(x) & WordSetter(x)) -> MyWord!", "all x.((WordSetter(x) & MyWord!)) -> MichaelO'Donnell(x))"]}
{"id": "folio_train_987", "nl": "The magazine World Medicine was edited by Michael O'Donnell.", "fol": "(IsMagazine(Worldmedicine) & EditedBy(Worldmedicine,Michael))", "prediction": ["All x.(WorldMedicine(x) -> EditedByMichaelO'Donnell(x))", "all x.(WorldMedicine(x) -> EditedByMichaelO'Donnell(x))", "all x y.((Magazine(x) & WorldMedicine(y)) -> EditedByMichaelO'Donnell(x,y))", "all x y.((Magazine(x) & WorldMedicine(y)) -> EditedBy(x,y))", "all x.((Magazine(x) & editedByMichaelO'Donnell(x)) -> WorldMedicine(x))", "All x y.((Magazine(x) & WorldMedicine(y)) -> EditedByMichaelO'Donnell(x,y))", "all x y.((Magazine(x) & WorldMedicine(y)) -> EditedByMichaelO'Donnell(x))", "all x y z.((Magazine(x) & WorldMedicine(y) & MichaelO'Donnell(z)) -> EditedBy(x,y,z))", "All x y.((Magazine(x) & WorldMedicine(y)) -> EditedBy(x,y))", "All x y.((Magazine(x) & WorldMedicine(y)) -> EditedByMichaelO'Donnell(x))", "all x.((Magazine(x) & EditedByMichaelO'Donnell(x)) -> WorldMedicine(x))", "All x.((Magazine(x) & editedByMichaelO'Donnell(x)) -> WorldMedicine(x))", "all x.(WorldMedicine(x) -> EditedByMichaelO'Donnell(x))", "All x.(WorldMedium(x) -> EditedByMichaelO'Donnell(x))", "all x y.((Magazine(x) & WorldMedicine(y)) -> EditedByMikeO'Donnell(x,y))", "All x.(WorldMedicine(x) -> EditedByMichaelO\u2019Donnell(x))"]}
{"id": "folio_train_988", "nl": "Michael O'Donnell was born in Yorkshire as the son of a general practitioner.", "fol": "exists x.(BornInLocation(Michael,Yorkshire) & IsSonOf(Michael,x) & IsGeneralPractitioner(x))", "prediction": ["all x.((Michael O'Donnell(x) & BornInYorkshire(x)) -> SonOfGeneralPharmacist(x))", "all x.((Michael O'Donnell(x) & BornInYorkshire(x)) -> SonOfGeneralPractitioner(x))", "all x y.((Michael O'Donnell(x) & GeneralPracticer(y)) -> BornInYorkshire(x,y))", "all x.((Michael O'Donnell(x) & BornInYorkshire(x)) -> SonOfGeneralPracticer(x))", "(Birth(Michael O'Donnell,Yorkshire) & SonOfGeneralPharmacist(Michael O'Donnell,Yorkshire))", "(Birth(Michael O'Donnell,Yorkshire) & SonOfGeneralPractitioner(Michael O'Donnell,Yorkshire))", "(Birth(Michael O'Donnell,Yorkshire) & SonOfGeneralPharmacist(Michael O'Donnell)", "all x.((Michael O'Donnell(x) & BornInYorkshire(x)) -> GeneralPractitioner(x))", "(Birth(Michael O'Donnell,Yorkshire) & SonOfGeneralPracticer(Michael O'Donnell,Yorkshire))", "all x.((Michael O'Donnell(x) & BornInYorkshire(x)) -> GeneralPharmacist(x))", "(Birth(Michael O'Donnell,Yorkshire) & SonOfGeneralPractitioner(Michael O'Donnell)", "all x.((MichaelO'Donnell(x) & BornInYorkshire(x)) -> SonOfGeneralPharmacist(x))", "all x y.((MichaelO'Donnell(x) & GeneralPracticer(y)) -> BornInYorkshire(x,y))", "(Birth(Michael O'Donnell,Yorkshire) & SonOfGeneralPractitioner(Michael))", "(Birth(Michael O'Donnell,Yorkshire) & SonOfGeneralPracticer(Michael O'Donnell)", "(Birth(Michael O'Donnell,Yorkshire) & SonOfGeneralPharmacist(Michael))"]}
{"id": "folio_train_989", "nl": "The son of a general practitioner was a word-setter of My Word!.", "fol": "exists x y.(IsSonOf(x,y) & IsGeneralPractitioner(y) & IsWordSetter(x))", "prediction": ["all x y.((Son(x) & GeneralPharmacist(y)) -> WordSetter(x,y))", "all x y.((Son(x) & GeneralPracticer(y)) -> WordSetter(x,y))", "all x y.((SonOfGeneralPharmacist(x) & GeneralPharmacist(y)) -> WordSetterOfMyWord(x))", "all x.((SonOfGeneralPharmacist(x) & SonOfGeneralPharmacist(x)) -> WordSetterOfMyWord!", "all x.((SonOfGeneralPharmacist(x) & SonOfGeneralPharmacist(x)) -> WordSetterOfMyWord(x))", "all x y.((SonOfGeneralPharmacist(x) & GeneralPharmacist(y)) -> WordSetterOfMyWord(x,y))", "all x y.((Son(x) & GeneralPractitioner(y)) -> WordSetter(x,y))", "all x y.((Son(x) & GeneralPharmacist(y)) -> WordSetterOfMyWord(x,y))", "all x y.((SonOfGeneralPharmacist(x) & GeneralPharmacist(y)) -> WordSetter(x,y))", "all x y.((Son(x) & GeneralPracticer(y)) -> WordSetterOfMyWord(x,y))", "all x y.((Son(x) & GeneralPharmacist(y)) -> WordSetterOfMyWord(x))", "all x y.((Son(x) & GeneralPracticer(y)) -> WordSetterOfMyWord(x))", "all x y.((Son(x) & GeneralPractitioner(y) & GeneralPractitioner(y)) -> WordSetter(x,y))", "all x y.((Son(x) & GeneralPractitioner(y)) -> WordSetterOfMyWord(x,y))", "all x y.((SonOfGeneralPharmacist(x) & GeneralPharmacist(y)) -> WordSetterOfMyWord!(x))", "all x y.((Son(x) & GeneralPractitioner(y)) -> WordSetterOfMyWord(x))"]}
{"id": "folio_train_990", "nl": "World Medicine is not a magazine.", "fol": "-IsMagazine(Worldmedicine)", "prediction": ["all x.(WorldMedicine(x) -> -Magazine(x))", "All x.(WorldMedicine(x) -> -Magazine(x))", "all x.(WorldMedium(x) -> -Magazine(x))", "all x.(WorldMedicine(x) -> -Magazine(x))", "all x.((WorldMedicine(x) & -Magazine(x)) -> -Magazine(x))", "All x.(WorldMedium(x) -> -Magazine(x))", "(-Magazine(WorldMedicine) & -Magazine(WorldMedicine))", "all x y.((WorldMedicine(x) & Magazine(y)) -> -Magazine(x))", "all x.((WorldMedicine(x) & -Magazine(x)) -> -Company(x))", "(WorldMedicine(WorldMedicine) & -Magazine(WorldMedicine))", "-Magazine(WorldMedicine)", "all x.(WorldMedical(x) -> -Magazine(x))", "all x.((WorldMedicine(x) & -Magazine(x)) -> -Factory(x))", "all x.(WorldMedicine(x) & -Magazine(x))", "All x.(WorldMedicine(x) -> -Magazine(x))", "all x.((WorldMedicine(x) & -Magazine(x)) -> -Machine(x))"]}
{"id": "folio_train_991", "nl": "There are no British authors.", "fol": "-exists x.(IsBritish(x) & IsAuthor(x))", "prediction": ["-exists x.(BritishAuthor(x) & -Author(x))", "-exists x.(BritishAuthor(x) & -BritishAuthor(x))", "-exists x.(BritishAuthor(x) & -exists y.(BritishAuthor(y) & -exists z.(BritishAuthor(z) & -exists w.(BritishAuthor(w) & -exists w.(BritishAuthor(w) & -exists w.(BritishAuthor(w) & -BritishAuthor(w)))))", "-exists x.(BritishAuthor(x) & -exists y.(BritishAuthor(y) & -exists z.(BritishAuthor(z) & -exists w.(BritishAuthor(w) & -exists w.(BritishAuthor(w) & -exists w.(BritishAuthor(w) & -BritishAuthor(x,w)))))", "exists x.(BritishAuthor(x) & -exists y.(BritishAuthor(y) & -exists z.(BritishAuthor(z) & -exists w.(BritishAuthor(w) & -exists w.(BritishAuthor(w) & -exists w.(BritishAuthor(w) & -(BritishAuthor(w)))))", "exists x.(BritishAuthor(x) & -exists y.(BritishAuthor(y) & -exists z.(BritishAuthor(z) & -exists w.(BritishAuthor(w) & -exists w.(BritishAuthor(w) & -exists w.(BritishAuthor(w) & -(BritishAuthor(w))))))", "-exists x.(BritishAuthor(x) & -exists y.(BritishAuthor(y) & -exists z.(BritishAuthor(z) & -exists w.(BritishAuthor(w) & -exists w.(BritishAuthor(w) & -exists w.(BritishAuthor(w)))))", "-exists x.(BritishAuthor(x) & -exists y.(BritishAuthor(y) & -exists z.(BritishAuthor(z) & -exists w.(BritishAuthor(w) & -exists w.(BritishAuthor(w) & -exists w.(BritishAuthor(w) & -BritishAuthor(w))))", "-exists x.(BritishAuthor(x) & -exists y.(BritishAuthor(y) & -exists z.(BritishAuthor(z) & -exists w.(BritishAuthor(w) & -exists w.(BritishAuthor(w) & -exists w.(BritishAuthor(w) & -BritishAuthor(y,w)))))", "exists x.(BritishAuthor(x) & -exists y.(BritishAuthor(y) & -exists z.(BritishAuthor(z) & -exists w.(BritishAuthor(w) & -exists w.(BritishAuthor(w) & -exists w.(BritishAuthor(x,w)))))", "exists x.(BritishAuthor(x) & -exists y.(BritishAuthor(y) & -exists z.(BritishAuthor(z) & -exists w.(BritishAuthor(w) & -exists w.(BritishAuthor(w) & -exists w.(BritishAuthor(w) & -(BritishAuthor(x,w)))))", "-exists x.(BritishAuthor(x) & -exists y.(BritishAuthor(y) & -exists z.(BritishAuthor(z) & -exists w.(BritishAuthor(w) & -exists w.(BritishAuthor(w)) & -exists w.(BritishAuthor(w))))", "-exists x.(BritishAuthor(x) & -exists y.(BritishAuthor(y) & -exists z.(BritishAuthor(z) & -exists w.(BritishAuthor(w) & -exists w.(BritishAuthor(w) & -exists w.(BritishAuthor(x,w)))))", "exists x.(BritishAuthor(x) & -exists y.(BritishAuthor(y) & -exists z.(BritishAuthor(z) & -exists w.(BritishAuthor(w) & -exists w.(BritishAuthor(w) & -exists w.(BritishAuthor(w) & -exists w.(BritishAuthor(w)))))", "exists x.(BritishAuthor(x) & -exists y.(BritishAuthor(y) & -exists z.(BritishAuthor(z) & -exists w.(BritishAuthor(w) & -exists w.(BritishAuthor(w) & -exists w.(BritishAuthor(w) & -exists w.(BritishAuthor(w))))", "-exists x.(BritishAuthor(x) & -exists y.(BritishAuthor(y) & -exists z.(BritishAuthor(z) & -exists w.(BritishAuthor(w) & -exists w.(BritishAuthor(w) & -exists w.(BritishAuthor(w) & -(BritishAuthor(w)))))"]}
{"id": "folio_train_992", "nl": "There are no journalists that were born in Yorkshire.", "fol": "-exists x.(IsJournalist(x) & BornInLocation(x,Yorkshire))", "prediction": ["-exists x.(Journalist(x) & BornInYorkshire(x))", "-exists x.(Journalist(x) & BornIn(x,Yorkshire))", "(-exists x.(Journalist(x) & BornInYorkshire(x)))", "exists x.(Journalist(x) & BornInYorkshire(x))", "all x.((Journalist(x) & BornInYorkshire(x)) -> -exists y.(Yorkshire(y) & BornIn(x,y))))", "all x.((Journalist(x) & BornInYorkshire(x)) -> -exists y.(Yorkshire(y) & BornIn(x,y)))", "all x.((Journalist(x) & BornInYorkshire(x)) -> -BirthInYorkshire(x))", "all x.((Journalist(x) & BornInYorkshire(x)) -> -(Journalist(x) & BornInYorkshire(x)))", "all x.((Journalist(x) & BornInYorkshire(x)) -> -(BirthInYorkshire(x) & BornInYorkshire(x)))", "all x.((Journalist(x) & BornInYorkshire(x)) -> -(BirthInYorkshire(x) | BornInYorkshire(x))))", "all x.((Journalist(x) & BornInYorkshire(x)) -> -(BirthInYorkshire(x) | BornInYorkshire(x)))", "all x.(Journalist(x) -> -BirthInYorkshire(x))", "all x.((Journalist(x) & BornInYorkshire(x)) -> -exists y.(Journalist(y) & BornInYorkshire(y)))", "all x.((Journalist(x) & BornInYorkshire(x)) -> - exists y.(Yorkshire(y) & BornIn(x,y))))", "(-exists x.(Journalist(x) & BornIn(x,Yorkshire)))", "-exists x.(Journalist(x) & BornIn(x,yorkshire))"]}
{"id": "folio_train_993", "nl": "There is a son of a general practitioner that is not an author.", "fol": "exists y.(IsSonOf(y,x) & IsGeneralPractitioner(x) & -IsAuthor(y))", "prediction": ["exists x.(SonOfGeneralPharmacist(x) & -Author(x))", "exists x.(SonOfGeneralPracticer(x) & -Author(x))", "exists x.(Son(x) & GeneralPharmacist(x) & -Author(x))", "exists x y.(Son(x) & GeneralPharmacist(y) & GeneralPharmacist(x) & -Author(x))", "exists x y.((Son(x) & GeneralPharmacist(y) & GeneralPharmacist(y)) & -Author(x))", "exists x y.((Son(x) & GeneralPharmacist(y) & GeneralPharmacist(y)) -> -Author(x))", "exists x y.(Son(x,y) & GeneralPharmacist(x) & GeneralPharmacist(y) & -Author(x))", "exists x y.(Son(x) & GeneralPharmacist(y) & GeneralPharmacist(y) & -Author(x))", "exists x y.(Son(x,y) & GeneralPharmacist(y) & GeneralPharmacist(y) & -Author(x))", "exists x y.(Son(x) & GeneralPharmacist(y) & GeneralPharmacist(z) & -Author(x))", "exists x y.((Son(x) & GeneralPharmacist(y) & GeneralPharmacist(y) & -Author(y)) -> Son(x,y))", "exists x y.((Son(x) & GeneralPharmacist(y) & GeneralPharmacist(y) & -Author(x)) -> Son(x,y))", "exists x y.(Son(x,y) & GeneralPharmacist(y) & GeneralPharmacist(x) & -Author(x))", "exists x.(GeneralPracticerSon(x) & -Author(x))", "exists x y.(SonOf(x,y) & GeneralPharmacist(x) & GeneralPharmacist(y) & -Author(x))", "exists x y.(Son(x) & GeneralPharmacist(y) & GeneralPharmacist(x) & -Author(y))"]}
{"id": "folio_train_994", "nl": "No homework is fun.", "fol": "all x.(IsHomework(x) -> -IsFun(x))", "prediction": ["-exists x.(Homework(x) & Fun(x))", "-all x.(Homework(x) -> Fun(x))", "all x.(Homework(x) -> -Fun(x))", "-(Homework(x) & Fun(x))", "-exists x.(Homework(x) & FUN(x))", "(-exists x.(Homework(x) & Fun(x)))", "-exists x.(Habitat(x) & Fun(x))", "-(Homework(h) & Fun(h))", "-(Homework(homework) & Fun(homework))", "-exists x.(Homework(x) & Fun(x)))", "-All x.(Homework(x) -> Fun(x))", "-(Homework(s) & Fun(s))", "-exists x.(Homework(x) & -Fun(x))", "-exists x.(Homework(x) & Fun(y))", "-exists x.(Homework(x) & Fascinating(x))", "-(Homework(e) & Fun(e))"]}
{"id": "folio_train_995", "nl": "Some reading is homework.", "fol": "exists x.(IsReading(x) & IsHomework(x))", "prediction": ["exists x.(Reading(x) & Homework(x))", "exists x.(Language(x) & Homework(x))", "exists x y.(Reading(x) & Homework(y))", "(exists x.(Reading(x) & Homework(x)))", "exists x.(Reading(x) & Housework(x))", "exists x.(Lesson(x) & Homework(x))", "exists x.(Reading(x) & Homework(x))", "exists x.(Linging(x) & Homework(x))", "exists x.(Learning(x) & Homework(x))", "all x.(Reading(x) -> Homework(x))", "exists x.(Lecture(x) & Homework(x))", "-all x.(Reading(x) -> Homework(x))", "exists x.(Reading(x) -> Homework(x))", "exists x.(Leathing(x) & Homework(x))", "exist x.(Reading(x) & Homework(x))", "exists x.(Reading(x) & Homeschool(x))"]}
{"id": "folio_train_996", "nl": "Some reading is fun.", "fol": "exists x.(IsReading(x) & IsFun(x))", "prediction": ["exists x.(Reading(x) & Fun(x))", "all x.(Reading(x) -> Fun(x))", "(exists x.(Reading(x) & Fun(x)))", "exists x.(Language(x) & Fun(x))", "exists x y.(Reading(x) & Reading(y) & Fun(x))", "exists x.(Lesson(x) & Fun(x))", "exists x y.(Reading(x) & Fun(y))", "exists x.(Learning(x) & Fun(x))", "exists x.(Reading(x) & Fun(x))", "exists x y.(Reading(x) & Reading(y) & Fun(x,y))", "exists x.(Leathing(x) & Fun(x))", "exists x y.(Reading(x) & Reading(y) & Fun(y))", "-all x.(Reading(x) -> Fun(x))", "exists x.(Lecture(x) & Fun(x))", "exists x.(Reading(x) -> Fun(x))", "exists x.(Linging(x) & Fun(x))"]}
{"id": "folio_train_997", "nl": "If violence is good, it is justified.", "fol": "all x.((IsViolence(x) & IsGood(x)) -> IsJustified(x))", "prediction": ["all x.((Violence(x) & Good(x)) -> Justified(x))", "all x.((Violence(x) & Good(x)) -> Justifiable(x))", "all x.(GoodViolence(x) -> Justified(x))", "all x.((Violence(x) & Good(x)) -> Justifi\u00e9(x))", "all x.(Good(x) -> Justified(x))", "all x y.((Violence(x) & Good(x)) -> Justified(y))", "all x.((Violence(x) & Good(x)) -> Justification(x))", "all x.(Good(x) -> JustifiedViolence(x))", "all x.((ViolenceGood(x)) -> Justified(x))", "all x y.((Violence(x) & Good(x)) -> Justified(x))", "all x.((ViolenceGood(x) & Justified(x)) -> Good(x))", "all x.(((Violence(x) & Good(x)) -> Justified(x))", "all x.((GoodViolence(x) & Justified(x)) -> GoodViolence(x))", "all x.(GoodViolence(x) -> Justifiable(x))", "all x.((Violent(x) & Good(x)) -> Justified(x))", "all x.((Given(x) & Good(x)) -> Justified(x))"]}
{"id": "folio_train_998", "nl": "If something is justified, it is lawful.", "fol": "all x.(IsJustified(x) -> IsLawful(x))", "prediction": ["all x.(Justified(x) -> Lawful(x))", "all x.((Justified(x) & Lawful(x)) -> Justified(x))", "all x.((Justified(x) & Lawful(x)) -> Legal(x))", "all x.(Justified(x) -> Legal(x))", "all x.((Justified(x) & Legal(x)) -> Legal(x))", "all x.((Justified(x) & Legal(x)) -> Lawful(x))", "all x.((Justified(x) & Legal(x)) -> Justified(x))", "all x.((Justified(x) & Lawful(x)) -> Legitimate(x))", "all x.((Justified(x) & Lawful(x)) -> Lawful(x))", "all x.(Justifiable(x) -> Lawful(x))", "all x.((Justified(x) & Legal(x)) -> Legitimate(x))", "all x.((Justified(x) & Legitimate(x)) -> Lawful(x))", "all x.((Justifiable(x) & Lawful(x)) -> Justified(x))", "all x.((Justified(x) -> Lawful(x))", "all x.((Justified(x) & Legitimate(x)) -> Legal(x))", "all x.((Justified(x) & Lawful(x)) -> -Justified(x))"]}
{"id": "folio_train_999", "nl": "If violence is good, it is lawful.", "fol": "all x.((IsViolence(x) & IsGood(x)) -> IsLawful(x))", "prediction": ["all x.((Violence(x) & Good(x)) -> Lawful(x))", "all x.((Violence(x) & Good(x)) -> Legal(x))", "all x.((Violence(x) & Good(x)) -> Legitimate(x))", "all x.((Violence(x) & Good(x)) -> Legitime(x))", "all x.(GoodViolence(x) -> Lawful(x))", "all x.((GoodViolence(x) & Lawful(x)) -> GoodViolence(x))", "all x y.((Violence(x) & Good(x)) -> Lawful(y))", "all x.(Good(x) -> Lawful(x))", "all x.((ViolenceGood(x) & Lawful(x)) -> Good(x))", "all x.(GoodViolence(x) -> LawfulViolence(x))", "all x.(((Violence(x) & Good(x)) -> Lawful(x))", "all x.((GoodViolence(x) & Legal(x)) -> GoodViolence(x))", "all x.(GoodViolence(x) -> Legal(x))", "all x y.((Violence(x) & Good(x)) -> Lawful(x))", "all x.((Given(x) & Good(x)) -> Lawful(x))", "all x y.((Violence(x) & Good(x)) -> Legal(y))"]}
{"id": "folio_train_1000", "nl": "All people who have a horse ranch regularly ride horses for pleasure and sport.", "fol": "all x.(HasHorseRanch(x) -> RidesHorsesForPleasureAndSport(x))", "prediction": ["all x.(HasHorseRiver(x) -> (RideHorses(x) & ForPleasure(x) & ForSport(x)))", "all x.(HasHorseRiver(x) -> (RideHorsesForPleasure(x) & RideHorsesForSport(x)))", "all x.(HasHorseRiver(x) -> (RidesHorses(x) & ForPleasure(x) & ForSport(x)))", "all x.(HasHorseRiver(x) -> RegularRideHorsesForPleasureAndSport(x))", "all x.(HasHorseRiver(x) -> RegularRideHorses(x))", "all x.(HasHorseRiver(x) -> (RideHorsesForPlenish(x) & RideHorsesForSport(x)))", "all x.((Person(x) & HorseRiver(x)) -> RidesHorsesForPleasureAndSport(x))", "all x.(HasHorseRiver(x) -> (RideHorses(x) & ForPlenish(x) & ForSport(x)))", "all x.(HasHorseRiver(x) -> RegularRide(x,horse))", "all x.((Person(x) & HasHorseRiver(x)) -> RidesHorsesForPleasureAndSport(x))", "all x.((Person(x) & HorseRiver(x)) -> RegularRideHorsesForPleasureAndSport(x))", "all x.(HasHorseRiver(x) -> RidesHorsesForPleasureAndSport(x))", "all x.(HasHorseRiver(x) -> RegularRideHorsesForPlenishAndSport(x))", "all x.((Person(x) & HasHorseRiver(x)) -> RegularRideHorsesForPleasureAndSport(x))", "all x.((Person(x) & HorseRiver(x)) -> RegularRide(x,horse))", "all x.((Person(x) & HorseRiver(x)) -> RegularRideHorses(x))"]}
{"id": "folio_train_1001", "nl": "All people who have a lot of disposable income have a horse ranch.", "fol": "all x.(HasDisposableIncome(x) -> HasHorseRanch(x))", "prediction": ["all x.((Person(x) & LotsOfDisposableIncome(x)) -> HorseRiver(x))", "all x.((Person(x) & DisposableIncome(x)) -> HorseRiver(x))", "all x.((Person(x) & LotsOfDisposableIncome(x)) -> HasHorseRiver(x))", "all x.((Person(x) & LotsOfDisposableIncome(x)) -> HorseRanch(x))", "all x.((Person(x) & DisposableIncome(x)) -> HasHorseRiver(x))", "all x.((Person(x) & LotOfDisposableIncome(x)) -> HorseRiver(x))", "all x.((Person(x) & HasLotOfDisposableIncome(x)) -> HasHorseRiver(x))", "all x.((Person(x) & DisposableIncome(x)) -> HorseRanch(x))", "all x.((Person(x) & LotsOfDisposableIncome(x)) -> HasHorseRanch(x))", "all x.((Person(x) & LotOfDisposableIncome(x)) -> HasHorseRiver(x))", "all x.((Person(x) & LotsOfDisposableIncome(x)) -> HasHorseRidge(x))", "all x.((Person(x) & HasMoreDiscoverableIncome(x)) -> HasHorseRiver(x))", "all x.((Person(x) & HasMoreDisposableIncome(x)) -> HasHorseRiver(x))", "all x.((Person(x) & HasMoreDisposableIncome(x)) -> HasHorseRiver(x))", "all x.((Person(x) & HasMuchDisposableIncome(x)) -> HasHorseRiver(x))", "all x.((Person(x) & HasDisposableIncome(x)) -> HasHorseRiver(x))"]}
{"id": "folio_train_1002", "nl": "If people compete in horse dressage shows, then they have a lot of disposable income.", "fol": "all x.(CompetesInDressageShows(x) -> HasDisposableIncome(x))", "prediction": ["all x.(CompeteInHorseDressageShows(x) -> DisposableIncome(x))", "all x.(CompetesInHorseDressageShows(x) -> DisposableIncome(x))", "all x.((Person(x) & CompetesInHorseDressageShows(x)) -> DisposableIncome(x))", "all x.((Person(x) & CompetesInHorseDressage(x)) -> DisposableIncome(x))", "all x.(CompetesInHorseDressageShows(x) -> DisposableIncome(x))", "all x.((Person(x) & CompetesInHorseDressageShows(x)) -> LotsOfDisposableIncome(x))", "all x.(CompeteInHorseDressage(x) -> DisposableIncome(x))", "all x.(CompetesInHorseDressage(x) -> DisposableIncome(x))", "all x.(CompetesInHorseDressageShows(x) -> LotsOfDisposableIncome(x))", "all x.((People(x) & CompetesInHorseDressageShows(x)) -> DisposableIncome(x))", "all x.(CompeteInHorseDressageShows(x) -> LotsOfDisposableIncome(x))", "all x.((Person(x) & CompetesInHorseDressage(x)) -> LotsOfDisposableIncome(x))", "all x.((People(x) & CompetesInHorseDressage(x)) -> DisposableIncome(x))", "all x y.((Person(x) & CompetesInHorseDressage(x) & HorseDressage(y)) -> DisposableIncome(x,y))", "all x y.((Person(x) & CompetesInHorseDressage(x) & HorseDressage(y)) -> DisposableIncome(x))", "all x y.((Person(x) & CompetesInHorseDressageShows(x)) -> DisposableIncome(y))"]}
{"id": "folio_train_1003", "nl": "If people compete in horse dressage shows, then they have invested in high-quality equestrian gear and equipment.", "fol": "all x.(CompetesInDressageShows(x) -> InvestedInEquestrianGear(x))", "prediction": ["all x.((Person(x) & CompetesInHorseDressageShows(x)) -> HighQualityEquestrianGearAndEquipment(x))", "all x.(CompeteInHorseDressageShows(x) -> HighQualityEquestrianGearAndEquipment(x))", "all x.(CompetesInHorseDressageShows(x) -> HighQualityEquestrianGearAndEquipment(x))", "all x.(CompeteInHorseDressageShows(x) -> (InvestedInHighQualityEquestrianGear(x) & InvestedInHighQualityEquestrianEquipment(x)))", "all x.(CompetesInHorseDressageShows(x) -> (InvestedInHighQualityEquestrianGear(x) & InvestedInHighQualityEquestrianEquipment(x)))", "all x.((Person(x) & CompetesInHorseDressageShows(x)) -> (InvestedInHighQualityEquestrianGear(x) & InvestedInHighQualityEquestrianEquipment(x)))", "all x.((Person(x) & CompetesInHorseDressageShows(x)) -> InvestedInHighQualityEquestrianGearAndEquipment(x))", "all x.((Person(x) & CompetesInHorseDressage(x)) -> HighQualityEquestrianGearAndEquipment(x))", "all x.((Person(x) & CompetesInHorseDressageShows(x)) -> (InvestedInHighQualityEquestrianGear(x) & InvestedInHighQualityEquipment(x)))", "all x.(CompetesInHorseDressageShows(x) -> (InvestedInHighQualityEquestrianGearAndEquipment(x)))", "all x.(CompeteInHorseDressageShows(x) -> (InvestedInHighQualityEquestrianGearAndEquipment(x)))", "all x.((People(x) & CompetesInHorseDressageShows(x)) -> HighQualityEquestrianGearAndEquipment(x))", "all x.(CompetesInHorseDressageShows(x) -> (InvestedInHighQualityEquestrianGear(x) & InvestedInHighQualityEquipment(x)))", "all x.(CompeteInHorseDressageShows(x) -> (InvestedInHighQualityEquestrianGear(x) & InvestedInHighQualityEquipment(x)))", "all x.((Person(x) & CompetesInHorseDressage(x)) -> (InvestedInHighQualityEquestrianGear(x) & InvestedInHighQualityEquestrianEquipment(x)))", "all x.(CompetesInHorseDressageShows(x) -> (InvestedInHighQualityEquestrianGear(x) & InvestedInHighQualityEquestrianEquipment(x)))"]}
{"id": "folio_train_1004", "nl": "If people regularly ride horses for pleasure and sport, then they do not live in cramped residential buildings.", "fol": "all x.(RidesHorsesForPleasureAndSport(x) -> -LivesInCrampedResidentialBuildings(x))", "prediction": ["all x.((Person(x) & RegularRideHorses(x) & ForPleasure(x) & ForSport(x)) -> -CrombedResidentialBuildings(x))", "all x.((Person(x) & RegularRideHorses(x)) -> -CrombedResidentialBuildings(x))", "all x.((Person(x) & RegularRideHorses(x) & ForPleasure(x) & ForSport(x)) -> -CrommedResidentialBuildings(x))", "all x.((People(x) & RegularlyRidesHorses(x) & ForPleasure(x) & ForSport(x)) -> -CrombedResidentialBuildings(x))", "all x.((People(x) & RegularRideHorses(x) & ForPleasure(x) & ForSport(x)) -> -CrombedResidentialBuildings(x))", "all x.((People(x) & RegularlyRidesHorses(x) & ForPleasure(x) & ForSport(x)) -> -CrommedResidentialBuildings(x))", "all x.((People(x) & RegularRideHorses(x) & ForPleasure(x) & ForSport(x)) -> -CrommedResidentialBuildings(x))", "all x.((People(x) & RegularlyRidesHorses(x)) -> -CrombedResidentialBuildings(x))", "all x.((Person(x) & RegularRideHorses(x)) -> -CrommedResidentialBuildings(x))", "all x.((Person(x) & RegularRideHorses(x) & ForPure(x) & ForSport(x)) -> -CrombedResidentialBuildings(x))", "all x.((Person(x) & RegularRideHorses(x) & ForPure(x) & ForSport(x)) -> -CrommedResidentialBuildings(x))", "all x.((People(x) & RegularRideHorses(x)) -> -CrombedResidentialBuildings(x))", "all x.((Person(x) & RegularRideHorses(x) & ForPleasure(x) & ForSport(x)) -> -CrowdedResidentialBuildings(x))", "all x.((People(x) & RegularlyRidesHorses(x)) -> -CrommedResidentialBuildings(x))", "all x.((People(x) & RegularRideHorses(x) & ForPleasureAndSport(x)) -> -CrombedResidentialBuildings(x))", "all x.((People(x) & RegularlyRidesHorses(x) & ForPleasureAndSport(x)) -> -CrombedResidentialBuildings(x))"]}
{"id": "folio_train_1005", "nl": "Manny either has a horse ranch and lives in cramped residential buildings, or he neither has a horse ranch nor lives in cramped residential buildings.", "fol": "((HasHorseRanch(Manny) & LivesInCrampedResidentialBuildings(Manny) & -(-HasHorseRanch(Manny) & -LivesInCrampedResidentialBuildings(Manny))) | (-(HasHorseRanch(Manny) & LivesInCrampedResidentialBuildings(Manny)) & -HasHorseRanch(Manny) & -LivesInCrampedResidentialBuildings(Manny)))", "prediction": ["(all x.(Manny(x) -> (HasHorseRiver(x) & LivesInCrombedResidentialBuildings(x))) | (-HasHorseRiver(x) & LivesInCrombedResidentialBuildings(x))))", "(all x.(Manny(x) -> (HasHorseRidge(x) & LivesInCrombedResidentialBuildings(x))) | (-HasHorseRidge(x) & LivesInCrombedResidentialBuildings(x))))", "all x.(Manny(x) -> (HasHorseRidge(x) & LivesInCrombedResidentialBuildings(x)) | (-HasHorseRidge(x) & LivesInCrombedResidentialBuildings(x))))", "all x.(Manny(x) -> (HasHorseRiver(x) & LivesInCrombedResidentialBuildings(x)) | (-HasHorseRiver(x) & LivesInCrombedResidentialBuildings(x))))", "(all x.(Manny(x) -> (HasHorseRiver(x) & LivesInCrommedResidentialBuildings(x))) | (-HasHorseRiver(x) & LivesInCrommedResidentialBuildings(x))))", "(all x.(Manny(x) -> (HasHorseRiver(x) & LivesInCrombedResidentialBuildings(x))) | (-HasHorseRiver(x) & LivesInCrombedResidentialBuildings(x)))))", "(all x.(Manny(x) -> (HasHorseRidge(x) & LivesInCrommedResidentialBuildings(x))) | (-HasHorseRidge(x) & LivesInCrommedResidentialBuildings(x))))", "(all x.(Manny(x) -> (HasHorseRidge(x) & LivesInCrombedResidentialBuildings(x))) | (-HasHorseRidge(x) & LivesInCrombedResidentialBuildings(x)))))", "all x.(Manny(x) -> (HasHorseRidge(x) & LivesInCrommedResidentialBuildings(x)) | (-HasHorseRidge(x) & LivesInCrommedResidentialBuildings(x))))", "all x.(Manny(x) -> (HasHorseRiver(x) & LivesInCrommedResidentialBuildings(x)) | (-HasHorseRiver(x) & LivesInCrommedResidentialBuildings(x))))", "(all x.(Manny(x) -> (HasHorseRiver(x) & LivesInCrommedResidentialBuildings(x))) | (-HasHorseRiver(x) & LivesInCrommedResidentialBuildings(x)))))", "(all x.(HasHorseRiver(x) -> LivesInCrommedResidentialBuildings(x)) | (-HasHorseRiver(x) & LivesInCrommedResidentialBuildings(x))))", "(all x.(Manny(x) -> (HasHorseRiver(x) & LivesInCrombedResidentialBuildings(x)) | (-HasHorseRiver(x) & LivesInCrombedResidentialBuildings(x)))))", "all x.(Manny(x) -> ((HasHorseRiver(x) & LivesInCrombedResidentialBuildings(x)) | (-HasHorseRiver(x) & LivesInCrombedResidentialBuildings(x))))", "(all x.(Manny(x) -> (HasHorseRanch(x) & LivesInCrombedResidentialBuildings(x))) | (-HasHorseRanch(x) & LivesInCrombedResidentialBuildings(x))))", "all x.(Manny(x) -> ((HasHorseRiver(x) & LivesInCrombedResidentialBuildings(x)) | (-HasHorseRiver(x) & LivesInCrombedResidentialBuildings(x)))))"]}
{"id": "folio_train_1006", "nl": "Manny regularly rides horses for pleasure and sport.", "fol": "RidesHorsesForPleasureAndSport(Manny)", "prediction": ["all x y.((Manny(x) & Horse(y)) -> (RidesForPlaisance(x,y) & RidesForSport(x,y)))", "all x y.((Manny(x) & Horse(y)) -> (RidesForPleasure(x,y) & RidesForSport(x,y)))", "all x y.((Manny(x) & Horse(y)) -> (RidesForPlenish(x,y) & RidesForSport(x,y)))", "all x.((Manny(x) & Horse(y)) -> (RidesForPlaisance(x,y) & RidesForSport(x,y)))", "all x.((Manny(x) & Horse(y)) -> (RidesForPleasure(x,y) & RidesForSport(x,y)))", "all x.(Manny(x) -> (RidesHorses(x) & ForPleasure(x) & ForSport(x)))", "all x.((Manny(x) & Horse(y)) -> (RidesForPlenish(x,y) & RidesForSport(x,y)))", "all x.(Manny(x) -> (Rides(x,horse) & ForPleasure(x) & ForSport(x)))", "all x.(Manny(x) -> (Rides(x,horse) & ForPlenish(x) & ForSport(x)))", "all x.(Manny(x) -> (RidesHorses(x) & ForPlenish(x) & ForSport(x)))", "all x.(Manny(x) -> (Rides(x,horse) & ForPlaisance(x) & ForSport(x)))", "all x y.((Manny(x) & Horse(y)) -> (RidesForPlenish(x,y) | RidesForSport(x,y)))", "all x.(Manny(x) -> (RidesHorsesForPleasure(x) & RidesHorsesForSport(x)))", "all x y.((Manny(x) & Horse(y)) -> (RidesForPlaisance(x,y) | RidesForSport(x,y)))", "all x y.((Manny(x) & Horse(y)) -> (RidesFor(x,y) & For(x,y)))", "all x.(Manny(x) -> (RidesHorsesForPleasure(x) & RidesForSport(x)))"]}
{"id": "folio_train_1007", "nl": "Manny competes in horse dressage shows and has invested in high-quality equestrian equipment and gear.", "fol": "(CompetesInDressageShows(Manny) & InvestedInEquestrianGear(Manny))", "prediction": ["all x.(Manny(x) -> (CompetesInHorseDressageShows(x) & InvestedInHighQualityEquestrianEquipmentAndGear(x)))", "all x.(Manny(x) -> (CompetesInHorseDressageShows(x) & HighQualityEquestrianEquipmentAndGear(x)))", "all x.(Manny(x) -> (CompetesInHorseDressageShows(x) & HighQualityEquestrianEquipment(x) & HighQualityEquestrianGear(x)))", "all x.(Manny(x) -> (CompetesInHorseDressage(x) & HighQualityEquestrianEquipment(x) & HighQualityEquestrianGear(x)))", "all x.(Manny(x) -> (CompetesInHorseDressage(x) & InvestedInHighQualityEquestrianEquipmentAndGear(x)))", "all x.(Manny(x) -> (CompetesInHorseDressageShows(x) & InvestedInHighQualityEquestrianEquipment(x) & InvestedInHighQualityEquestrianGear(x)))", "all x.(Manny(x) -> (CompetesInHorseDressage(x) & InvestedInHighQualityEquestrianEquipment(x) & InvestedInHighQualityEquestrianGear(x)))", "all x.(Manny(x) -> (CompetesInHorseDressage(x) & HighQualityEquestrianEquipmentAndGear(x)))", "all x.((Manny(x) & CompetesInHorseDressage(x)) -> (InvestedInHighQualityEquestrianEquipment(x) & InvestedInHighQualityEquestrianGear(x)))", "all x.((Manny(x) & HorseDressageShows(x)) -> (InvestedInHighQualityEquestrianEquipment(x) & InvestedInHighQualityEquestrianGear(x)))", "all x y.((Manny(x) & HorseDressage(y)) -> (CompetesIn(x,y) & HighQualityEquestrianEquipment(x) & HighQualityEquestrianGear(x)))", "all x.(Manny(x) -> (CompetesInHorseDressageShows(x) & HasInvestedInHighQualityEquestrianEquipmentAndGear(x)))", "all x.(Manny(x) -> (CompetesInHorseDressageShows(x) & InvestmentsInHighQualityEquestrianEquipmentAndGear(x)))", "all x.(Manny(x) -> (CompetesInHorseDressageShows(x) & InvestsInHighQualityEquestrianEquipmentAndGear(x)))", "all x.(Manny(x) -> (CompetesInHorseDressage(x) & HasInvestedInHighQualityEquestrianEquipmentAndGear(x)))", "all x.(Manny(x) -> (CompetesInHorseDressageShows(x) & HighQualityEquestrianEquipmentAndGear(x)))"]}
{"id": "folio_train_1008", "nl": "If Manny either has a horse ranch or competes in horse dressage shows, then Manny has not invested in high-quality equestrian equipment and gear.", "fol": "((HasHorseRanch(Manny) | CompetesInDressageShows(Manny)) -> -InvestedInEquestrianGear(Manny))", "prediction": ["all x.((Manny(x) & (HasHorseRiver(x) | CompetesInHorseDressage(x))) -> -InvestedInHighQualityEquestrianEquipmentAndGear(x))", "all x.((Manny(x) & (HasHorseRanch(x) | CompetesInHorseDressage(x))) -> -InvestedInHighQualityEquestrianEquipmentAndGear(x))", "all x.((Manny(x) & (HasHorseRiver(x) | CompetesInHorseDressageShows(x))) -> -InvestedInHighQualityEquestrianEquipmentAndGear(x))", "all x.((Manny(x) & (HasHorseRanch(x) | CompetesInHorseDressageShows(x))) -> -InvestedInHighQualityEquestrianEquipmentAndGear(x))", "all x.((Manny(x) & (HasHorseRiver(x) | CompetesInHorseDressage(x))) -> -InvestedInHighQualityEquestrianEquipment(x) & -InvestedInHighQualityEquestrianGear(x))", "all x.((Manny(x) & (HasHorseRainforest(x) | CompetesInHorseDressage(x))) -> -InvestedInHighQualityEquestrianEquipmentAndGear(x))", "all x.((Manny(x) & (HasHorseRanch(x) | CompetesInHorseDressage(x))) -> -InvestedInHighQualityEquestrianEquipment(x) & -InvestedInHighQualityEquestrianGear(x))", "all x.((Mandy(x) & (HasHorseRiver(x) | CompetesInHorseDressage(x))) -> -InvestedInHighQualityEquestrianEquipmentAndGear(x))", "all x.((Manny(x) & (HasHorseRiver(x) | CompetesInHorseDressage(x))) -> -InvestedInEquestrianEquipmentAndGear(x))", "all x.((HasHorseRiver(x) | CompetesInHorseDressageShows(x)) -> -InvestedInHighQualityEquestrianEquipmentAndGear(x))", "all x.((HasHorseRanch(x) | CompetesInHorseDressage(x)) -> -InvestedInHighQualityEquestrianEquipmentAndGear(x))", "all x.((HasHorseRanch(x) | CompetesInHorseDressageShows(x)) -> -InvestedInHighQualityEquestrianEquipmentAndGear(x))", "all x.((Mandy(x) & (HasHorseRanch(x) | CompetesInHorseDressage(x))) -> -InvestedInHighQualityEquestrianEquipmentAndGear(x))", "all x.((Manny(x) & (HasHorseRidge(x) | CompetesInHorseDressage(x))) -> -InvestedInHighQualityEquestrianEquipmentAndGear(x))", "all x.((HasHorseRiver(x) | CompetesInHorseDressage(x)) -> -InvestedInHighQualityEquestrianEquipmentAndGear(x))", "all x.((Manny(x) & (HasHorseRanch(x) | CompetesInHorseDressage(x))) -> -InvestedInEquestrianEquipmentAndGear(x))"]}
{"id": "folio_train_1009", "nl": "A roundel is a rounded artillery fortification.", "fol": "all x.((IsRoundel(x) -> IsRounded(x)) & IsArtilleryFortification(x))", "prediction": ["all x.(Roundel(x) -> (RoundedArtilleryFortification(x) & Fortification(x)))", "all x.(Roundel(x) -> RoundedArtilleryFortification(x))", "all x.(Roundel(x) -> (ArtilleryFortification(x) & Rounded(x)))", "all x.(Roundel(x) -> (RoundedArtilleryFortification(x) & RoundedArtilleryFortification(x)))", "all x.(Roundel(x) -> (RoundedArtilleryFortification(x) & RoundedArtilleryFortification(x)))", "all x.(Roundel(x) -> (RoundedArtilleryFortification(x) & Fortification(x)))", "all x.(Roundel(x) -> ArtilleryFortification(x))", "all x.(Roundel(x) -> (ArtilleryFortification(x) & Rounded(x)))", "all x.(Roundel(x) -> (RoundedArtilleryFortification(x) & FortifiedArtillery(x)))", "all x.(Roundel(x) -> (RoundedArtilleryFortification(x) & ArtilleryFortification(x)))", "all x.(Roundel(x) -> (RoundedArtilleryFortification(x) & Fortified(x)))", "all x.(Roundel(x) -> (ArtilleryFortification(x) & Rounded(x)))", "all x.(Roundel(x) -> (RoundedArtilleryFortification(x) & RoundedArtilleryFortification(x)))", "all x.(Roundel(x) -> RoundedArtilleryFortification(x))", "all x.(Roundel(x) -> (ArtilleryFortification(x) & Rounded(x)))", "all x.(Roundel(x) -> (RoundedArtilleryFortification(x) & Fortification(x) & Fortification(x)))"]}
{"id": "folio_train_1010", "nl": "A roundel is not higher than adjacent walls. ", "fol": "all x y.((IsRoundel(x) & IsAdjacentWall(y)) -> -IsHigherThan(x,y))", "prediction": ["all x.(Roundel(x) -> -HigherThanAdjacentWalls(x))", "all x.(Roundel(x) -> -HigherThan(x,adjacentWalls))", "all x y.((Roundel(x) & Wall(y)) -> -HigherThan(x,y))", "all x.(Roundel(x) -> -HigherThanAdditionalWalls(x))", "all x y.((Roundel(x) & AdjacentWall(y)) -> -HigherThan(x,y))", "all x.(Roundel(x) -> -HigherThanNeighboringWalls(x))", "all x.(Roundel(x) -> -HasAdjacentWalls(x))", "all x y z.((Roundel(x) & Wall(y) & Wall(z)) -> -HigherThan(x,y,z))", "all x y.((Roundel(x) & Wall(y)) -> -Higher(x,y))", "all x y.((Roundel(x) & AdjacentWalls(y)) -> -Higher(x,y))", "all x.(Roundel(x) -> -Higher(x,adjacentWalls))", "all x y.((Roundel(x) & AdjacentWall(y)) -> -Higher(x,y))", "all x.(Roundel(x) -> -HigherThanAdjacentWalls(x))", "all x y.((Roundel(x) & AdjacentWalls(y)) -> -HigherThan(x,y))", "all x y.((Roundel(x) & Wall(y) & -Higher(x,y)) -> -Higher(x,y))", "all x.(Roundel(x) -> -HigherThanNearbyWalls(x))"]}
{"id": "folio_train_1011", "nl": "Cannons can be deployed on artillery fortifications. ", "fol": "all x.(IsArtilleryFortification(x) -> CanDeployCannons(x))", "prediction": ["all x.(Cannon(x) -> CanBeDeployedOnArtilleryFortifications(x))", "all x y.((Cannon(x) & ArtilleryFortification(y)) -> CanBeDeployed(x,y))", "all x y.((Cannon(x) & ArtilleryFortification(y)) -> CanBeDeployedOn(x,y))", "all x y.((Cannon(x) & ArtilleryFortification(y)) -> DeployedOn(x,y))", "all x.(Cannon(x) -> DeployedOnArtilleryFortifications(x))", "all x.(Canon(x) -> CanBeDeployedOnArtilleryFortifications(x))", "all x y z.((Cannon(x) & ArtilleryFortification(y) & ArtilleryFortification(z)) -> CanBeDeployedOn(x,y,z))", "all x y z.((Cannon(x) & ArtilleryFortification(y) & ArtilleryFortification(z)) -> CanBeDeployed(x,y,z))", "all x y z.((Cannon(x) & ArtilleryFortification(y) & ArtilleryFortification(z)) -> DeployedOn(x,y,z))", "all x y.((Canon(x) & ArtilleryFortification(y)) -> CanBeDeployedOn(x,y))", "all x y.((Canon(x) & ArtilleryFortification(y)) -> CanBeDeployed(x,y))", "all x.(Cannon(x) -> (DeployedOnArtilleryFortifications(x) | DeployedOnArtilleryFortifications(x)))", "all x y.((Canon(x) & ArtilleryFortification(y)) -> DeployedOn(x,y))", "all x y z.((Cannon(x) & ArtilleryFortification(y) & Fortification(z)) -> CanBeDeployedOn(x,y,z))", "all x y.((Cannon(x) & ArtilleryFortification(y) & DeployedOn(x,y)) -> CanBeDeployedOn(x,y))", "all x y z.((Cannon(x) & ArtilleryFortification(y) & ArtilleryFortification(z)) -> Deployed(x,y,z))"]}
{"id": "folio_train_1012", "nl": "Roundels are the oldest artillery fortifications.", "fol": "all x y.((IsRoundel(x) & IsArtilleryFortification(x) & IsArtilleryFortification(y)) -> IsOlderThan(x,y))", "prediction": ["all x.(Roundels(x) -> OldestArtilleryFortification(x))", "all x.(Roundels(x) -> (ArtilleryFortification(x) & Oldest(x)))", "all x.(Roundels(x) -> TheOldestArtilleryFortification(x))", "all x.(Roundel(x) -> (ArtilleryFortification(x) & Oldest(x)))", "all x y.((Roundel(x) & ArtilleryFortification(y)) -> Oldest(x,y))", "all x.(Roundels(x) -> (OldestArtilleryFortification(x) & OldestArtilleryFortification(x)))", "all x y.((Roundels(x) & ArtilleryFortification(y)) -> Oldest(x,y))", "all x.(Roundel(x) -> OldestArtilleryFortification(x))", "all x y.((Roundel(x) & ArtilleryFortification(y)) -> TheOldest(x,y))", "all x.(Roundels(x) -> (OldestArtilleryFortification(x) & LocatedIn(x,y)))", "all x.(Roundels(x) -> (OldestArtilleryFortification(x) & Aged(x)))", "all x.(Roundels(x) -> (ArtilleryFortification(x) & TheOldest(x)))", "all x.(Roundels(x) -> (OldestArtilleryFortification(x) & Fortified(x)))", "all x.(Roundels(x) -> ArtilleryFortification(x))", "all x.(Roundels(x) -> -OldestArtilleryFortification(x))", "all x.(Roundels(x) -> (ArtilleryFortification(x) & LocatedIn(x,y)))"]}
{"id": "folio_train_1013", "nl": "Battery towers are an artillery fortification.", "fol": "all x.(IsBatteryTower(x) -> IsArtilleryFortification(x))", "prediction": ["all x.(BatteryTower(x) -> ArtilleryFortification(x))", "all x.(BatteryTower(x) -> Fortification(x))", "all x.(BatteryTurm(x) -> ArtilleryFortification(x))", "all x.((BatteryTower(x) & ArtilleryFortification(x)) -> BatteryTower(x))", "all x.(BatteryTower(x) -> (ArtilleryFortification(x) & LocatedIn(x,y)))", "all x y.((BatteryTower(x) & ArtilleryFortification(y)) -> Fortification(x,y))", "all x y.((BatteryTower(x) & Artillery(y)) -> Fortification(x,y))", "all x y.((BatteryTower(x) & ArtilleryFortification(y)) -> LocatedIn(x,y))", "all x y.((BatteryTower(x) & ArtilleryFortification(y)) -> Is(x,y))", "all x y.((BatteryTower(x) & ArtilleryFortification(y)) -> Operates(x,y))", "all x.(BatteryTower(x) -> (ArtilleryFortification(x) & Fortification(x)))", "all x.(BatteryTower(x) -> (ArtilleryFortification(x) & BuiltIn(x)))", "all x y.((BatteryTower(x) & ArtilleryFortification(y)) -> BatteryTower(x))", "all x.(BatteryTower(x) -> (ArtilleryFortification(x) & BuiltFortification(x)))", "all x.(BatteryTower(x) -> (ArtilleryFortification(x) & Operates(x)))", "all x.(BatteryTower(x) -> ArtilleryFortification(x))"]}
{"id": "folio_train_1014", "nl": "Cannons can be deployed on battery towers.", "fol": "all x.(IsBatteryTower(x) -> CanDeployCannons(x))", "prediction": ["all x.(Cannon(x) -> CanBeDeployedOnBatteryTowers(x))", "all x y.((Cannon(x) & BatteryTower(y)) -> CanBeDeployedOn(x,y))", "all x y.((Cannon(x) & BatteryTower(y)) -> CanBeDeployed(x,y))", "all x y.((Cannon(x) & BatteryTower(y)) -> DeployedOn(x,y))", "all x.(Cannon(x) -> CanBeDeployedOnBatteryTower(x))", "all x.(Cannon(x) -> DeployedOnBatteryTower(x))", "all x y z.((Cannon(x) & BatteryTower(y) & BatteryTower(z)) -> CanBeDeployedOn(x,y,z))", "all x.(Canon(x) -> CanBeDeployedOnBatteryTowers(x))", "all x y z.((Cannon(x) & BatteryTower(y) & BatteryTower(z)) -> CanBeDeployed(x,y,z))", "all x y z.((Cannon(x) & BatteryTower(y) & BatteryTower(z)) -> DeployedOn(x,y,z))", "all x y.((Canon(x) & BatteryTower(y)) -> CanBeDeployedOn(x,y))", "all x y.((Canon(x) & BatteryTower(y)) -> CanBeDeployed(x,y))", "all x.(Cannon(x) -> DeployedOnBatteryTowers(x))", "all x y.((Canon(x) & BatteryTower(y)) -> DeployedOn(x,y))", "all x.(Cannon(x) -> (DeployedOnBatteryTower(x) | DeployedOnBatteryTower(x)))", "all x y z.((Cannon(x) & BatteryTower(y) & Battery(z)) -> CanBeDeployedOn(x,y,z))"]}
{"id": "folio_train_1015", "nl": "Roundels are older than battery towers.", "fol": "all x y.((IsRoundel(x) & IsBatteryTower(y)) -> IsOlderThan(x,y))", "prediction": ["all x y.((Roundel(x) & BatteryTower(y)) -> OlderThan(x,y))", "all x y.((Roundel(x) & BatteryTower(y)) -> Older(x,y))", "all x.(Roundel(x) -> OlderThanBatteryTower(x))", "all x y.((Roundels(x) & BatteryTower(y)) -> OlderThan(x,y))", "all x y.((Roundle(x) & BatteryTower(y)) -> OlderThan(x,y))", "all x.(Roundels(x) -> OlderThanBatteryTower(x))", "all x y.((Roundell(x) & BatteryTower(y)) -> OlderThan(x,y))", "all x.(Roundels(x) -> OlderThanBatteryTowers(x))", "all x y z.((Roundel(x) & BatteryTower(y) & BatteryTower(z)) -> OlderThan(x,y,z))", "all x y.((Roundels(x) & BatteryTower(y)) -> Older(x,y))", "all x y.((Roundle(x) & BatteryTower(y)) -> Older(x,y))", "all x.(Roundel(x) -> OlderThan(x,BatteryTower))", "all x y.((Roundel(x) & BatteryTurm(y)) -> OlderThan(x,y))", "all x.(Roundels(x) -> OlderThan(x,BatteryTower))", "all x y z.((Roundel(x) & BatteryTower(y) & Battery(z)) -> OlderThan(x,y,z))", "all x y.((Roundell(x) & BatteryTower(y)) -> Older(x,y))"]}
{"id": "folio_train_1016", "nl": "Battery towers are higher than adjacent walls.", "fol": "all x y.((IsBatteryTower(x) & IsAdjacentWall(y)) -> IsHigherThan(x,y))", "prediction": ["all x y.((BatteryTower(x) & Wall(y)) -> HigherThan(x,y))", "all x y.((BatteryTower(x) & AdjacentWall(y)) -> HigherThan(x,y))", "all x y.((BatteryTower(x) & AdjacentWall(y)) -> Higher(x,y))", "all x y.((BatteryTower(x) & Wall(y)) -> Higher(x,y))", "all x.(BatteryTower(x) -> HigherThanAdjacentWalls(x))", "all x.((BatteryTower(x) & AdjacentWall(x)) -> HigherThan(x,y))", "all x y z.((BatteryTower(x) & Wall(y) & Wall(z)) -> HigherThan(x,y,z))", "all x.((BatteryTower(x) & AdjacentWall(x)) -> Higher(x,y))", "all x.((BatteryTower(x) & AdjacentWall(x)) -> Higher(x))", "all x y z.((BatteryTower(x) & Wall(y) & Wall(z)) -> Higher(x,y,z))", "all x y.((BatteryTurm(x) & AdjacentWall(y)) -> HigherThan(x,y))", "all x y.((BatteryTurm(x) & Wall(y)) -> HigherThan(x,y))", "all x.(BatteryTower(x) -> HigherThan(x,adjacentWalls))", "all x y.((Battery(x) & Wall(y)) -> HigherThan(x,y))", "all x y.((BatteryTower(x) & Wall(y)) -> HigherThanAdjacent(x,y))", "all x y.((BatteryTurm(x) & AdjacentWall(y)) -> Higher(x,y))"]}
{"id": "folio_train_1017", "nl": "Roundels can be deployed on roundels.", "fol": "all x.(IsRoundel(x) -> DeployRoundels(x))", "prediction": ["all x.(Roundels(x) -> CanBeDeployedOnRoundels(x))", "all x.(Roundels(x) -> CanBeDeployedOn(x,Roundels))", "all x y.((Roundels(x) & Roundels(y)) -> CanBeDeployedOn(x,y))", "all x y.((Roundels(x) & Roundels(y)) -> CanBeDeployed(x,y))", "all x.(Roundels(x) -> DeployedOnRoundels(x))", "all x y.((Roundels(x) & Roundels(y)) -> DeployedOn(x,y))", "all x y z.((Roundels(x) & Roundels(y) & Roundels(z)) -> CanBeDeployedOn(x,y,z))", "all x y.((Roundel(x) & Roundel(y)) -> CanBeDeployedOn(x,y))", "all x y z.((Roundels(x) & Roundels(y) & Roundels(z)) -> CanBeDeployed(x,y,z))", "all x y.((Roundel(x) & Roundels(y)) -> CanBeDeployedOn(x,y))", "all x.(Roundel(x) -> CanBeDeployedOnRoundels(x))", "all x y.((Roundel(x) & Roundel(y)) -> CanBeDeployed(x,y))", "all x.(Roundel(x) -> CanBeDeployedOn(x,Roundels))", "all x.(Roundels(x) -> DeployedOn(x,Roundels))", "all x y z.((Roundels(x) & Roundels(y) & Roundels(z)) -> DeployedOn(x,y,z))", "all x y.((Roundel(x) & Roundels(y)) -> CanBeDeployed(x,y))"]}
{"id": "folio_train_1018", "nl": "All tissues are soft.", "fol": "all x.(IsTissue(x) -> IsSoft(x))", "prediction": ["all x.(Tissue(x) -> Soft(x))", "all x y.((Tissue(x) & Soft(y)) -> Soft(x))", "all x.((Tissue(x) & Soft(x)) -> Soft(x))", "all x.(Tissue(x) -> Soft(x))", "all x y.((Tissue(x) & Soft(y)) -> Soft(x,y))", "(all x.(Tissue(x) -> Soft(x)))", "all x.(Texture(x) -> Soft(x))", "all x y.((Tissue(x) & Soft(y)) -> Soft(y))", "all x y.((Tissue(x) & Tissue(y)) -> Soft(x))", "all x y.((Tissue(x) & Soft(x)) -> Soft(y))", "all x y.((Tissue(x) & Soft(y)) -> Soft(z))", "all x.exists y.(Tissue(x) & Soft(y))", "All x.(Tissue(x) -> Soft(x))", "all x.exists y.(Tissue(x) & Soft(y) & Soft(z))", "all x.exists y.(Tissue(x) & Soft(y) & Soft(y))", "-all x.(Tissue(x) -> Soft(x))"]}
{"id": "folio_train_1019", "nl": "Some papers are tissues.", "fol": "exists x.(IsPaper(x) & IsTissue(x))", "prediction": ["exists x.(Paper(x) & Tissue(x))", "exists x.(Paper(x) & Tears(x))", "exists x.(Paper(x) & Teardrop(x))", "exists x y.(Paper(x) & Paper(y) & Tissue(x))", "exists x.(Paper(x) & Paper(x) & Tissue(x))", "exists x y.(Paper(x) & Tissue(y))", "exists x.(Paper(x) & Tear(x))", "exists x.(Paper(x) & -Tissue(x))", "exists x.(Paper(x) & Tissue(x))", "exists x y.(Paper(x) & Paper(y) & Tissue(y))", "exists x.(Paper(x) & Tumor(x))", "exists x.(Paper(x) & Thick(x))", "exists x.(Paper(x) & ContainsTissues(x))", "exists x y.(Paper(x) & Paper(y) & Tissue(z))", "exists x.(Paper(x) & Texture(x))", "exists x.(Paper(x) & Teflon(x))"]}
{"id": "folio_train_1020", "nl": "Some papers are hard.", "fol": "exists x.(IsPaper(x) & Hard(x))", "prediction": ["exists x.(Paper(x) & Hard(x))", "exists x y.(Paper(x) & Paper(y) & Hard(y))", "exists x y.(Paper(x) & Paper(y) & Hard(x))", "exists x.(Paper(x) & Hard(x))", "exists x y.(Paper(x) & Hard(y))", "exists x y.(Paper(x) & Paper(y) & Hard(x,y))", "exists x.(Paper(x) & (Hard(x) | Hard(x)))", "(exists x.(Paper(x) & Hard(x)))", "exists x.(Paper(x) & Soft(x))", "exists x y.(Paper(x) & Paper(y) & Hard(z))", "exists x.(Paper(x) & (Hard(x) | Hard(x))))", "exists x.(Paper(x) & -Hard(x))", "exists x.(Paper(x) & IsHard(x))", "exists x.(Plastic(x) & Hard(x))", "exists x.(Page(x) & Hard(x))", "exist x.(Paper(x) & Hard(x))"]}
{"id": "folio_train_1021", "nl": "All volunteers receive intangible benefits for their work.", "fol": "all x.(IsVolunteer(x) -> ReceivesIntangibleBenefits(x))", "prediction": ["all x.(Volunteer(x) -> ReceivesIntangibleBenefits(x))", "all x.(Volunteer(x) -> ReceivesIntangibleBenefitsForWork(x))", "all x.(Volunteer(x) -> ReceivesIntangibleBenefits(x))", "all x y.((Volunteer(x) & Work(y)) -> ReceivesIntangibleBenefits(x,y))", "all x.(Volunteer(x) -> IntangibleBenefits(x))", "all x y.((Volunteer(x) & Work(y)) -> ReceivesIntangibleBenefits(x,y))", "all x.(Volunteer(x) -> ReceivesIntangibleBenefitsForWork(x))", "all x.(Volunteer(x) -> IntangibleBenefitsForWork(x))", "all x y.((Volunteer(x) & Work(y)) -> IntangibleBenefits(x,y))", "all x.(Volunteer(x) -> ReceivesIntangibleBenefits(x))", "all x.(Volunteer(x) -> ReceiveIntangibleBenefits(x))", "all x.(Volunteer(x) -> (ReceivesIntangibleBenefits(x) & WorksFor(x)))", "all x.(Volunteer(x) -> (ReceivesIntangibleBenefits(x) & ForWork(x)))", "all x.(Volunteer(x) -> (ReceivesIntangibleBenefits(x) & Works(x)))", "all x.(Volunteer(x) -> ReceivesIntangibleBenefits(x,work))", "all x.(Volunteer(x) -> (ReceivesIntangibleBenefits(x) & Work(x)))"]}
{"id": "folio_train_1022", "nl": "Volunteers work regularly or on an as-needed basis.", "fol": "all x.((IsVolunteer(x) -> WorksRegularly(x)) | WorksAsNeeded(x))", "prediction": ["all x.(Volunteer(x) -> (WorksRegularly(x) | WorksAsNeeded(x)))", "all x.(Volunteer(x) -> (WorksRegularly(x) | WorksAsNeededBasis(x)))", "all x.(Volunteer(x) -> (WorksRegularly(x) | WorkesAsNeeded(x)))", "all x.(Volunteer(x) -> (WorksRegularly(x) | AsNeededBasis(x)))", "all x.(Volunteer(x) -> (WorksRegularly(x) | WorksAsNeededBy(x)))", "all x.(Volunteer(x) -> (WorksRegularly(x) | AsNeeded(x)))", "all x.(Volunteer(x) -> (WorksRegularly(x) | WorkesAsNeededBasis(x)))", "all x.(Volunteer(x) -> (WorksRegularly(x) | WorkedAsNeeded(x)))", "all x.(Volunteer(x) -> (WorkRegularly(x) | WorkAsNeeded(x)))", "all x.(Volunteer(x) -> (WorksRegularly(x) | WorksOnAsNeededBasis(x)))", "all x.(Volunteer(x) -> (WorkRegularly(x) | WorkAsNeededBasis(x)))", "all x.(Volunteer(x) -> (WorksRegularly(x) | WorksAsNeeds(x)))", "all x.(Volunteer(x) -> (WorksRegularly(x) | WorksAsNecessary(x)))", "all x.(Volunteer(x) -> (WorksRegularly(x) | AsNeededBy(x)))", "all x.(Volunteer(x) -> (WorkRegularly(x) | AsNeededBasis(x)))", "all x.(Volunteer(x) -> ((WorksRegularly(x) | WorksAsNeeded(x))))"]}
{"id": "folio_train_1023", "nl": "Some volunteers are trained.", "fol": "exists x.(IsVolunteer(x) -> IsTrained(x))", "prediction": ["exists x.(Volunteer(x) & Trained(x))", "exists x.(Volunteer(x) & Trained(x))", "exists x y.(Volunteer(x) & Volunteer(y) & Trained(y))", "exists x.(Volunteer(x) & Training(x))", "exists x y.(Volunteer(x) & Volunteer(y) & Trained(y))", "exists x y.(Volunteer(x) & Volunteer(y) & Trained(x))", "exists x.(Volunteer(x) & Trained(x))", "exists x.(Voluntarist(x) & Trained(x))", "exists x.(Volunteer(x) & -Trained(x))", "exists x.(Volunteer(x) & BecomesTrained(x))", "exists x y.(Volunteer(x) & Volunteer(y) & Trained(x))", "exists x y.(Volunteer(x) & Volunteer(y) & Trained(x,y))", "exists x.(Volunteer(x) & -Trained(x))", "exists x.(Volunteer(x) & Tethered(x))", "exists x.(Voice(x) & Trained(x))", "exists x.(Voluntariat(x) & Trained(x))"]}
{"id": "folio_train_1024", "nl": "Volunteers work in groups or individually.", "fol": "all x.(IsVolunteer(x) -> (WorksInGroup(x) | WorksIndividually(x)))", "prediction": ["all x.(Volunteer(x) -> (WorksInGroups(x) | WorksInIndividuals(x)))", "all x y.((Volunteer(x) & (Group(y) | Individual(y))) -> WorksIn(x,y))", "all x.(Volunteer(x) -> (WorksInGroups(x) | WorksInPrimaryGroups(x)))", "all x.(Volunteer(x) -> (WorksInGroups(x) | WorksInPrimarily(x)))", "all x.(Volunteer(x) -> (WorksInGroups(x) | WorksInGroups(x)))", "all x.(Volunteer(x) -> (WorksInGroups(x) | WorksInPrimally(x)))", "all x.(Volunteer(x) -> (WorkInGroups(x) | WorkInIndividuals(x)))", "all x.(Volunteer(x) -> (WorksInGroups(x) | WorkesInGroups(x)))", "all x.(Volunteer(x) -> (WorksInGroup(x) | WorksInIndividual(x)))", "all x.(Volunteer(x) -> (WorksInGroups(x) | WorksInPrimarily(x)))", "all x y.((Volunteer(x) & (Group(y) | Individual(y))) -> Works(x,y))", "all x.(Volunteer(x) -> (WorksInGroups(x) | WorksInPrimaries(x)))", "all x.(Volunteer(x) -> (WorksInGroups(x) | WorksInPersonally(x)))", "all x.(Volunteer(x) -> (WorksInGroups(x) | WorksInIndividually(x)))", "all x.(Volunteer(x) -> (WorkInGroups(x) | WorkInGroups(x)))", "all x.(Volunteer(x) -> (WorksInGroups(x) | WorksInPersonalGroups(x)))"]}
{"id": "folio_train_1025", "nl": "Environmental volunteers contribute toward environmental management or conservation.", "fol": "all x.((IsVolunteer(x) & IsEnvironmentalVolunteer(x)) -> (ContributesTo(x,EnvironmentalManagement) | ContributesTo(x,EnvironmentalConservation)))", "prediction": ["all x.(EnvironmentalVolunteer(x) -> (ContributesToEnvironmentalManagement(x) | ContributesToConservation(x)))", "all x y.((EnvironmentalVolunteer(x) & (EnvironmentalManagement(y) | Conservation(y))) -> ContributesTo(x,y))", "all x.(EnvironmentalVolunteer(x) -> (ContributesTowardsEnvironmentalManagement(x) | ContributesTowardsConservation(x)))", "all x y.((EnvironmentalVolunteer(x) & EnvironmentalManagementOrConservation(y)) -> ContributesTo(x,y))", "all x y.((EnvironmentalVolunteer(x) & EnvironmentalManagement(y)) | Conservation(y)) -> ContributesTo(x,y))", "all x.(EnvironmentalVolunteer(x) -> (ContributesToEnvironmentalManagement(x) | ContributesToConservation(x)))", "all x.(EnvironmentalVolunteer(x) -> (ContributesToEnvironmentalManagement(x) | ContributesToConservation(x)))", "all x.(EnvironmentalVolunteer(x) -> (ContributesToEnvironmentalManagementOrConservation(x)))", "all x.((EnvironmentalVolunteer(x) & (EnvironmentalManagement(x) | Conservation(x))) -> ContributesTo(x,y))", "all x.(EnvironmentalVolunteer(x) -> (ContributesTowardEnvironmentalManagement(x) | ContributesTowardConservation(x)))", "all x.(EnvironmentalVolunteer(x) -> ContributesToEnvironmentalManagementOrConservation(x))", "all x.(EnvironmentalVolunteer(x) -> (ContributesTowardsEnvironmentalManagement(x) | ContributesToConservation(x)))", "all x y.((EnvironmentalVolunteer(x) & (EnvironmentalManagement(y) | Conservation(y))) -> Contributes(x,y))", "all x.(EnvironmentalVolunteer(x) -> (ContributesToEnvironmentManagement(x) | ContributesToConservation(x)))", "all x.(EnvironmentalVolunteer(x) -> (ContributesForEnvironmentalManagement(x) | ContributesForConservation(x)))", "all x.(EnvironmentalVolunteer(x) -> (CommitsToEnvironmentalManagement(x) | ContributesToConservation(x)))"]}
{"id": "folio_train_1026", "nl": "Participating in natural disaster response is an example of volunteers working in groups on an as-needed basis.", "fol": "exists x.(((IsVolunteer(x) & ContributesTo(x,NaturalDisasterResponse)) -> WorksInGroup(x)) & WorksAsNeeded(x))", "prediction": ["all x.((Volunteer(x) & NaturalDisasterResponse(x)) -> WorksInGroups(x))", "all x.((Volunteer(x) & NaturalDisasterResponse(x)) -> WorksInGroupsOnAsNeededBasis(x))", "all x.((Volunteer(x) & ParticipatesInNaturalDisasterResponse(x)) -> WorksInGroupsOnAsNeededBasis(x))", "all x.((Volunteer(x) & ParticipatesInNaturalDisasterResponse(x)) -> WorksInGroups(x))", "all x.((Volunteer(x) & ParticipatesInNaturalDisasterResponse(x)) -> WorkingInGroupsOnAsNeededBasis(x))", "all x.((Volunteer(x) & NaturalDisasterResponse(x)) -> WorkingInGroupsOnAsNeededBasis(x))", "all x y.((Volunteer(x) & NaturalDisasterResponse(y) & WorkingInGroups(x,y)) -> AsNeededBasis(x))", "all x.((Volunteer(x) & NaturalDisasterResponse(x)) -> WorkingInGroups(x))", "all x.((Volunteer(x) & ParticipatesInNaturalDisasterResponse(x)) -> WorkingInGroups(x))", "all x y.((Volunteer(x) & NaturalDisasterResponse(y)) -> WorksInGroups(x,y))", "all x y.((Volunteer(x) & NaturalDisasterResponse(y) & WorkingInGroups(x,y)) -> AsNeededBasis(x,y))", "all x y.((Volunteer(x) & NaturalDisasterResponse(y)) -> WorksInGroupsOnAsNeededBasis(x,y))", "all x.((Volunteer(x) & NaturalDisasterResponse(x) & WorkingInGroups(x)) -> AsNeededBasis(x))", "all x y.((Volunteer(x) & NaturalDisasterResponse(y) & WorksInGroups(x,y)) -> AsNeededBasis(x))", "all x y.((Volunteer(x) & NaturalDisasterResponse(y) & WorkingInGroups(x,y)) -> AsNeededBase(x))", "all x y.((Volunteer(x) & NaturalDisasterResponse(y) & WorksInGroups(x,y)) -> AsNeededBasis(x,y))"]}
{"id": "folio_train_1027", "nl": "Volunteers who participate in natural disaster response receive intangible benefits for their work.", "fol": "all x.((IsVolunteer(x) & ParticipateIn(x,NaturalDisasterResponse)) -> ReceivesIntangibleBenefits(x))", "prediction": ["all x.((Volunteer(x) & ParticipatesInNaturalDisasterResponse(x)) -> ReceivesIntangibleBenefits(x))", "all x.((Volunteer(x) & ParticipatesInNaturalDisasterResponse(x)) -> IntangibleBenefits(x))", "all x.((Volunteer(x) & ParticipatesInNaturalDisasterResponse(x)) -> ReceivesIntangibleBenefits(x))", "all x y.((Volunteer(x) & NaturalDisasterResponse(y) & ParticipatesIn(x,y)) -> ReceivesIntangibleBenefits(x))", "all x.((Volunteer(x) & ParticipatesInNaturalDisasterResponse(x)) -> ReceivesIntangibleBenefitsForWork(x))", "all x.((Volunteer(x) & ParticipatesInNaturalDisasterResponse(x)) -> IntangibleBenefitsForWork(x))", "all x y.((Volunteer(x) & NaturalDisasterResponse(y) & ParticipatesIn(x,y)) -> IntangibleBenefits(x))", "all x y.((Volunteer(x) & NaturalDisasterResponse(y)) -> ReceivesIntangibleBenefits(x,y))", "all x.((Volunteer(x) & ParticipatesInNaturalDisaster(x)) -> ReceivesIntangibleBenefits(x))", "all x y.((Volunteer(x) & NaturalDisaster(y) & ParticipatesIn(x,y)) -> ReceivesIntangibleBenefits(x))", "all x y.((Volunteer(x) & NaturalDisasterResponse(y) & ParticipatesIn(x,y)) -> ReceivesIntangibleBenefits(x,y))", "all x.((Volunteer(x) & ParticipatesInNaturalDisaster(x)) -> IntangibleBenefits(x))", "all x y.((Volunteer(x) & NaturalDisaster(y) & ParticipatesIn(x,y)) -> IntangibleBenefits(x))", "all x y.((Volunteer(x) & ParticipatesInNaturalDisasterResponse(x,y)) -> ReceivesIntangibleBenefits(x,y))", "all x y.((Volunteer(x) & ParticipatesInNaturalDisasterResponse(x,y)) -> ReceivesIntangibleBenefits(x))", "all x.((Volunteer(x) & ParticipatesInNaturalDisasterResponse(x)) -> ReceivesIntangibleBenefits(x))"]}
{"id": "folio_train_1028", "nl": "Environmental volunteers work in groups.", "fol": "all x.((IsVolunteer(x) & IsEnvironmentalVolunteer(x)) -> WorksInGroup(x))", "prediction": ["all x.(EnvironmentalVolunteer(x) -> WorksInGroups(x))", "all x y.((EnvironmentalVolunteer(x) & Group(y)) -> WorksIn(x,y))", "all x.(EnvironmentalVolunteer(x) -> WorkInGroups(x))", "all x y.((EnvironmentalVolunteer(x) & Group(y)) -> WorkIn(x,y))", "all x y z.((EnvironmentalVolunteer(x) & Group(y) & Group(z)) -> WorksIn(x,y,z))", "all x y.((EnvironmentalVolunteer(x) & Group(y)) -> WorksIn(x,y))", "all x.(EnvironmentalVolunteer(x) -> WorksInGroup(x))", "all x y.((EnvironmentalVolunteer(x) & Environment(y)) -> WorksInGroups(x,y))", "all x.(EnvironmentalVolunteer(x) -> WorksInGroups(x))", "all x y z.((EnvironmentalVolunteer(x) & Group(y) & Group(z)) -> WorkIn(x,y,z))", "all x y z.((EnvironmentalVolunteer(x) & Group(y)) -> WorksIn(x,y))", "all x y.((EnvironmentalVolunteer(x) & Group(y)) -> Work(x,y))", "all x y z.((EnvironmentalVolunteer(x) & Group(y) & WorkIn(x,y)) -> WorksIn(x,z))", "all x.(EnvironmentalVolunteer(x) -> exists y.(Group(y) & WorksIn(x,y)))", "all x y.((EnvironmentalVolunteer(x) & Environmental(y)) -> WorksInGroups(x,y))", "all x.(EnvironmentalVolunteer(x) -> WorkInGroup(x))"]}
{"id": "folio_train_1029", "nl": "To be a volunteer, you must be trained.", "fol": "all x.(IsVolunteer(x) -> IsTrained(x))", "prediction": ["all x.(Volunteer(x) -> Trained(x))", "all x.(Volunteer(x) -> Trained(x))", "all x.((Volunteer(x) & Trained(x)) -> Volunteer(x))", "all x.(Volunteer(x) -> (Trained(x) & Trained(x)))", "all x.(Volunteer(x) -> Trained(x))", "all x y.((Volunteer(x) & Volunteer(y)) -> Trained(x))", "all x y.((Volunteer(x) & Volunteer(y)) -> Trained(y))", "all x y.((Volunteer(x) & Volunteer(y)) -> Trained(x,y))", "all x.(Volunteer(x) -> (Trained(x) | Trained(x)))", "exists x.(Volunteer(x) & Trained(x))", "all x.(Volunteer(x) -> (Trained(x) & Trained(x)))", "all x.(Volunteer(x) -> TrainedInVolunteering(x))", "all x.((Volunteer(x) & Trained(x)) -> Volunteer(x))", "all x.(Voter(x) -> Trained(x))", "all x.(Volunteer(x) -> MustBeTrained(x))", "all x.(Volunteer(x) -> (Trained(x) & Trained(x)))"]}
{"id": "folio_train_1030", "nl": "All people who are very consistent and enjoy sticking to their regular routines do not like surprises.", "fol": "all x.(VeryConsistent(x) -> DislikesSurprises(x))", "prediction": ["all x.((Person(x) & VeryConsistent(x) & EnjoysStickingToRegularRoutines(x)) -> -LikesSurprises(x))", "all x.((Person(x) & Consistent(x) & EnjoysStickingToRegularRoutines(x)) -> -LikesSurprises(x))", "all x.((Person(x) & VeryConsistent(x) & EnjoysStayingToRegularRoutines(x)) -> -LikesSurprises(x))", "all x.((Person(x) & VeryConsistent(x) & EnjoysStickingToRegularRoutines(x)) -> -LovesSurprises(x))", "all x.((Person(x) & VeryConsistent(x) & EnjoysStickingToRegularRules(x)) -> -LikesSurprises(x))", "all x.((Person(x) & VeryConsistent(x) & EnjoysStrippingToRegularRoutines(x)) -> -LikesSurprises(x))", "all x.((Person(x) & Consistent(x) & EnjoysStayingToRegularRoutines(x)) -> -LikesSurprises(x))", "all x.((Person(x) & VeryConsistent(x) & EnjoysStandingToRegularRoutines(x)) -> -LikesSurprises(x))", "all x.((Person(x) & VeryConsistent(x) & EnjoysStayingToRegularRoutines(x)) -> -LovesSurprises(x))", "all x.((Person(x) & Consistent(x) & EnjoysStrippingToRegularRoutines(x)) -> -LikesSurprises(x))", "all x.((Person(x) & Consistent(x) & EnjoysStickingToRegularRoutines(x)) -> -LovesSurprises(x))", "all x.((Person(x) & VeryConsistent(x) & EnjoysStayingToRegularRules(x)) -> -LikesSurprises(x))", "all x.((Person(x) & Consistent(x) & EnjoysStickingToRegularRules(x)) -> -LikesSurprises(x))", "all x.((Person(x) & VeryConsistent(x) & EnjoysStickingToRegularRules(x)) -> -LovesSurprises(x))", "all x.((Person(x) & VeryConsistent(x) & EnjoysStrippingToRegularRoutines(x)) -> -LovesSurprises(x))", "all x.((Person(x) & Consistent(x) & EnjoysStandingToRegularRoutines(x)) -> -LikesSurprises(x))"]}
{"id": "folio_train_1031", "nl": "If people wear flannel shirts every day, then they are very consistent and enjoy sticking to their regular routines.", "fol": "all x.(WearsFlannelShirts(x) -> VeryConsistent(x))", "prediction": ["all x.((Person(x) & WearsFlannelShirtsEveryDay(x)) -> (Consistent(x) & EnjoysStickingToRegularRoutines(x)))", "all x.((Person(x) & WearsFlannelShirtsEveryDay(x)) -> (Consistent(x) & EnjoysStayingToRegularRoutines(x)))", "all x.((Person(x) & WearsFlannelShirtsEveryDay(x)) -> (Consistent(x) & EnjoysStrippingToRegularRoutines(x)))", "all x.((Person(x) & WearsFlannelShirtsEveryDay(x)) -> (Consistent(x) & EnjoysStandingToRegularRoutines(x)))", "all x.((Person(x) & WearsFlannelShirtsEveryDay(x)) -> (Consistent(x) & EnjoyStickingToRegularRoutines(x)))", "all x.((Person(x) & WearsFlannelShirtsEveryDay(x)) -> (Consistent(x) & EnjoysStickingToRegularRules(x)))", "all x.((Person(x) & WearsFlannelShirtsEveryDay(x)) -> (Consistent(x) & EnjoyStayingToRegularRoutines(x)))", "all x.(WearsFlannelShirtsEveryDay(x) -> (Consistent(x) & EnjoysStickingToRegularRoutines(x)))", "all x.((People(x) & WearsFlannelShirtsEveryDay(x)) -> (Consistent(x) & EnjoysStickingToRegularRoutines(x)))", "all x.((Person(x) & WearsFlannelShirtsEveryDay(x)) -> (Consistent(x) & EnjoysStayingToRegularRules(x)))", "all x.((People(x) & WearsFlannelShirtsEveryDay(x)) -> (Consistent(x) & EnjoysStayingToRegularRoutines(x)))", "all x.(WearsFlannelShirtsEveryDay(x) -> (Consistent(x) & EnjoysStayingToRegularRoutines(x)))", "all x.((Person(x) & WearsFlannelShirtsEveryDay(x)) -> (Consistent(x) & EnjoysRegularRoutines(x)))", "all x.(WearFlannelShirtsEveryDay(x) -> (Consistent(x) & EnjoyStickingToRegularRoutines(x)))", "all x.(WearFlannelShirtsEveryDay(x) -> (Consistent(x) & EnjoyStayingToRegularRoutines(x)))", "all x.((Person(x) & WearsFlannelShirtsEveryDay(x)) -> (Consistent(x) & EnjoysStrippingToRegularRules(x)))"]}
{"id": "folio_train_1032", "nl": "If people do not like shopping for clothes and other materialistic goods, then they wear flannel shirts every day.", "fol": "all x.(NoShopping(x) -> WearsFlannelShirts(x))", "prediction": ["all x.((Person(x) & -LikesShoppingForClothesAndMaterialisticGoods(x)) -> WearsFlannelShirtsEveryDay(x))", "all x.((People(x) & -LikesShoppingForClothesAndMaterialisticGoods(x)) -> WearsFlannelShirtsEveryDay(x))", "all x.((Person(x) & -LikesShoppingForClothes(x) & -LikesShoppingForMaterialisticGoods(x)) -> WearsFlannelShirtsEveryDay(x))", "all x.((Person(x) & -likesShoppingForClothesAndMaterialisticGoods(x)) -> WearsFlannelShirtsEveryDay(x))", "all x.((Person(x) & -LikesShoppingForClothes(x) & LikesShoppingForMaterialisticGoods(x)) -> WearsFlannelShirtsEveryDay(x))", "all x.((Person(x) & -LovesShoppingForClothesAndMaterialisticGoods(x)) -> WearsFlannelShirtsEveryDay(x))", "all x.((Person(x) & -LikesShoppingForClothingAndMaterialisticGoods(x)) -> WearsFlannelShirtsEveryDay(x))", "all x.((People(x) & -likesShoppingForClothesAndMaterialisticGoods(x)) -> WearsFlannelShirtsEveryDay(x))", "all x.((People(x) & -LikesShoppingForClothes(x) & -LikesShoppingForMaterialisticGoods(x)) -> WearsFlannelShirtsEveryDay(x))", "all x.((Person(x) & -likesShoppingForClothes(x) & -likesShoppingForMaterialisticGoods(x)) -> WearsFlannelShirtsEveryDay(x))", "all x.((People(x) & -LikesShoppingForClothes(x) & LikesShoppingForMaterialisticGoods(x)) -> WearsFlannelShirtsEveryDay(x))", "all x.((People(x) & -LovesShoppingForClothesAndMaterialisticGoods(x)) -> WearsFlannelShirtsEveryDay(x))", "all x.((Person(x) & -LikesShopping(x)) -> WearsFlannelShirtsEveryDay(x))", "all x.((Person(x) & -LikesShoppingForClothes(x) & -LikesShoppingForMaterialisticGoods(x)) -> WearsFlannelShirts(x))", "all x.((People(x) & -LikesShopping(x)) -> WearsFlannelShirtsEveryDay(x))", "all x.((Person(x) & -LikesShoppingForClothes(x) & LikesShoppingForMaterialisticGoods(x)) -> WearsFlannelShirts(x))"]}
{"id": "folio_train_1033", "nl": "All old people living in stable homes do not like surprises.", "fol": "all x.(Elderly(x) -> DislikesSurprises(x))", "prediction": ["all x.((OldPerson(x) & LivesInStableHome(x)) -> -LikesSurprises(x))", "all x.((OldPerson(x) & LivesInStableHome(x)) -> -LovesSurprises(x))", "all x.((OldPerson(x) & LivesInStableHomes(x)) -> -LikesSurprises(x))", "all x.((OldPerson(x) & LivesInStableHome(x)) -> -LikesSurprises(x))", "all x.((OldPeople(x) & LivesInStableHomes(x)) -> -LikesSurprises(x))", "all x.((OldPerson(x) & LivesInStableHomes(x)) -> -LovesSurprises(x))", "all x.((Old(x) & LivesInStableHome(x)) -> -LikesSurprises(x))", "all x.((OldPerson(x) & LivesInStableHome(x)) -> -likesSurprises(x))", "all x.((OldPerson(x) & LivingInStableHome(x)) -> -LikesSurprises(x))", "all x.((OldPerson(x) & LivesInStableHome(x)) -> -LovesSurprises(x))", "all x.((OldPeople(x) & LivesInStableHome(x)) -> -LikesSurprises(x))", "all x.((OldPerson(x) & StableHome(x)) -> -LikesSurprises(x))", "all x.((OldPeople(x) & LivesInStableHomes(x)) -> -LovesSurprises(x))", "all x.((OldPerson(x) & LivingInStableHomes(x)) -> -LikesSurprises(x))", "all x.((Old(x) & LivesInStableHomes(x)) -> -LikesSurprises(x))", "all x.((Old(x) & LivesInStableHome(x)) -> -LovesSurprises(x))"]}
{"id": "folio_train_1034", "nl": "If people have very high energy and are impulsive, then they like surprises.", "fol": "all x.(HasHighEnergyAndImpulsive(x) -> -DislikesSurprises(x))", "prediction": ["all x.((Person(x) & VeryHighEnergy(x) & Impulsive(x)) -> LikesSurprises(x))", "all x.((Person(x) & HighEnergy(x) & Impulsive(x)) -> LikesSurprises(x))", "all x.((People(x) & VeryHighEnergy(x) & Impulsive(x)) -> LikesSurprises(x))", "all x.((People(x) & HighEnergy(x) & Impulsive(x)) -> LikesSurprises(x))", "all x.((People(x) & VeryHighEnergy(x) & Impulsive(x)) -> LikeSurprises(x))", "all x.((Person(x) & VeryHighEnergy(x) & Irresponsive(x)) -> LikesSurprises(x))", "all x.((Person(x) & VeryHighEnergy(x) & Impulsive(x)) -> LikesSurprises(x))", "all x.((Person(x) & HighEnergy(x) & Impulsive(x)) -> LikesSurprises(x))", "all x.((People(x) & HighEnergy(x) & Impulsive(x)) -> LikeSurprises(x))", "all x.((Person(x) & VeryHighEnergy(x) & Impulsive(x)) -> LikeSurprises(x))", "all x.((Person(x) & HighEnergy(x) & Impulsive(x)) -> LikeSurprises(x))", "all x.((Person(x) & HighEnergy(x) & Irresponsive(x)) -> LikesSurprises(x))", "all x.((People(x) & VeryHighEnergy(x) & Irresponsive(x)) -> LikesSurprises(x))", "all x.((HighEnergy(x) & Impulsive(x)) -> LikesSurprises(x))", "all x.((Popular(x) & HighEnergy(x) & Impulsive(x)) -> LikesSurprises(x))", "all x.((People(x) & VeryHighEnergy(x) & Impulsive(x)) -> LikesSurprises(x))"]}
{"id": "folio_train_1035", "nl": "If Mike is not a person who wears flannel shirts every day and has very high energy and is impulsive, then Mike either is very consistent and enjoys sticking to his regular routines or does not like surprises.", "fol": "(((-(DislikesSurprises(Mike) & HasHighEnergyAndImpulsive(Mike)) -> VeryConsistent(Mike)) & -DislikesSurprises(Mike)) | (-(-(DislikesSurprises(Mike) & HasHighEnergyAndImpulsive(Mike)) -> VeryConsistent(Mike)) & DislikesSurprises(Mike)))", "prediction": ["all x.((Person(x) & WearsFlannelShirtsEveryDay(x) & VeryHighEnergy(x) & Impulsive(x)) -> ((Consistent(x) & EnjoysRegularRoutines(x)) | -LikesSurprises(x))))", "all x.((Person(x) & WearsFlannelShirtsEveryDay(x) & VeryHighEnergy(x) & Impulsive(x)) -> ((VeryConsistent(x) & EnjoysRegularRoutines(x)) | -LikesSurprises(x))))", "all x.((Person(x) & WearsFlannelShirtsEveryDay(x) & VeryHighEnergy(x) & Impulsive(x)) -> (Consistent(x) & EnjoysRegularRoutines(x) | -LikesSurprises(x)))", "all x.((Person(x) & WearsFlannelShirtsEveryDay(x) & HighEnergy(x) & Impulsive(x)) -> ((Consistent(x) & EnjoysRegularRoutines(x)) | -LikesSurprises(x))))", "all x.((Person(x) & WearsFlannelShirtsEveryDay(x) & VeryHighEnergy(x) & Impulsive(x)) -> ((VeryConsistent(x) & EnjoysRegularRoutines(x)) | -LikesSurprises(x)))", "all x.((Person(x) & WearsFlannelShirtsEveryDay(x) & VeryHighEnergy(x) & Impulsive(x)) -> ((Consistent(x) & EnjoysRegularRoutines(x)) | -LovesSurprises(x))))", "all x.((Person(x) & -WearsFlannelShirtsEveryDay(x) & VeryHighEnergy(x) & Impulsive(x)) -> ((Consistent(x) & EnjoysRegularRoutines(x)) | -LikesSurprises(x))))", "all x.((Person(x) & WearsFlannelShirtsEveryDay(x) & VeryHighEnergy(x) & Impulsive(x)) -> ((Consistent(x) & EnjoysRegularRoutines(x)) | -LikesSurprises(x)))", "all x.((Person(x) & WearsFlannelShirtsEveryDay(x) & VeryHighEnergy(x) & Impulsive(x)) -> ((VeryConsistent(x) & EnjoysStickingToRegularRoutines(x)) | -LikesSurprises(x)))", "all x.((Person(x) & WearsFlannelShirtsEveryDay(x) & VeryHighEnergy(x) & Impulsive(x)) -> (Consistent(x) & EnjoysRegularRoutines(x)) | -LikesSurprises(x)))", "all x.((Person(x) & WearsFlannelShirtsEveryDay(x) & HighEnergy(x) & Impulsive(x)) -> ((VeryConsistent(x) & EnjoysRegularRoutines(x)) | -LikesSurprises(x))))", "all x.((Person(x) & WearsFlannelShirtsEveryDay(x) & VeryHighEnergy(x) & Impulsive(x)) -> (VeryConsistent(x) & EnjoysRegularRoutines(x) | -LikesSurprises(x)))", "all x.((Person(x) & WearsFlannelShirtsEveryDay(x) & VeryHighEnergy(x) & Impulsive(x)) -> (VeryConsistent(x) & EnjoysRegularRoutines(x)) | -LikesSurprises(x)))", "all x.((Mike(x) & -WearsFlannelShirtsEveryDay(x) & VeryHighEnergy(x) & Impulsive(x)) -> (Consistent(x) & EnjoysRegularRoutines(x) | -LikesSurprises(x)))", "all x.((Person(x) & WearsFlannelShirtsEveryDay(x) & VeryHighEnergy(x) & Impulsive(x)) -> ((Consistent(x) & EnjoysRegularRules(x)) | -LikesSurprises(x))))", "all x.((Person(x) & WearsFlannelShirtsEveryDay(x) & VeryHighEnergy(x) & Impulsive(x)) -> ((Consistent(x) & EnjoysRegularRoutines(x)) | -LikesSurprises(x))))"]}
{"id": "folio_train_1036", "nl": "Mike is an old person living in a stable home.", "fol": "(Elderly(Mike) & StableHome(Mike))", "prediction": ["all x.(Mike(x) -> OldPerson(x) & LivesInStableHome(x))", "all x.(Mike(x) -> (OldPerson(x) & LivesInStableHome(x)))", "all x.(Mike(x) -> LivesInStableHome(x))", "(OldPerson(Mike) & LivesInStableHome(Mike))", "all x.(Mike(x) -> OldPersonLivingInStableHome(x))", "all x.(Mike(x) -> (OldPerson(x) & LivesInStableHome(x)))", "all x y.((Mike(x) & OldPerson(y)) -> LivesInStableHome(x,y))", "all x.(OldPerson(x) -> LivesInStableHome(x))", "exists x.(Mike(x) & OldPerson(x) & LivesInStableHome(x))", "all x.(Mike(x) -> LivingInStableHome(x))", "all x.(Mike(x) -> Old(x) & LivesInStableHome(x))", "all x.((Mike(x) & OldPerson(x) & StableHome(x)) -> LivesIn(x,y))", "all x.((Mike(x) & OldPerson(x) & LivesInStableHome(x)) -> OldPerson(x))", "all x.((Mike(x) & OldPerson(x) & StableHome(x)) -> OldPerson(x))", "all x.(Mike(x) -> OldPerson(x) & StableHome(x))", "all x.(Mike(x) -> (OldPerson(x) & LivingInStableHome(x)))"]}
{"id": "folio_train_1037", "nl": "If Mike wears flannel shirts every day or does not like shopping for clothes and other materialistic goods, then Mike is neither an old person living in a stable home nor does not like shopping for clothes and other materialistic goods.", "fol": "((WearsFlannelShirts(Mike) | NoShopping(Mike)) -> (-Elderly(Mike) & -StableHome(Mike)))", "prediction": ["all x.((Mike(x) & WearsFlannelShirtsEveryDay(x) & -LikesShoppingForClothesAndMaterialisticGoods(x)) -> (-OldPerson(x) & -LikesShoppingForClothesAndMaterialisticGoods(x)))", "all x.((Mike(x) & WearsFlannelShirtsEveryDay(x) | -LikesShoppingForClothesAndMaterialisticGoods(x))) -> (-OldPerson(x) & -LikesShoppingForClothesAndMaterialisticGoods(x)))", "all x.((WorthsFlannelShirtsEveryDay(x) | -LikesShoppingForClothesAndMaterialisticGoods(x)) -> (OldPerson(x) & -LikesShoppingForClothesAndMaterialisticGoods(x)))", "all x.((Mike(x) & (WearsFlannelShirtsEveryDay(x) | -LikesShoppingForClothesAndMaterialisticGoods(x))) -> (-OldPerson(x) & -LikesShoppingForClothesAndMaterialisticGoods(x)))", "all x.((Mike(x) & WearsFlannelShirtsEveryDay(x) | -LikesShoppingForClothesAndMaterialisticGoods(x))) -> -(OldPerson(x) & LivesInStableHome(x) & -LikesShoppingForClothesAndMaterialisticGoods(x)))", "all x.((Mike(x) & WearsFlannelShirtsEveryDay(x) | (-LikesShoppingForClothesAndMaterialisticGoods(x)))) -> (-OldPerson(x) & -LikesShoppingForClothesAndMaterialisticGoods(x)))", "all x.((Mike(x) & WearsFlannelShirtsEveryDay(x) & -LikesShoppingForClothesAndMaterialisticGoods(x)) -> -(OldPerson(x) & LivesInStableHome(x) & -LikesShoppingForClothesAndMaterialisticGoods(x)))", "all x.((Mike(x) & WearsFlannelShirtsEveryDay(x) | (-LikesShoppingForClothesAndMaterialisticGoods(x)))) -> -(OldPerson(x) & LivesInStableHome(x) & -LikesShoppingForClothesAndMaterialisticGoods(x)))", "all x.((Mike(x) & WearsFlannelShirtsEveryDay(x) | -LikesShoppingForClothesAndMaterialisticGoods(x))) -> -OldPerson(x) & -LikesShoppingForClothesAndMaterialisticGoods(x))", "all x.((Mike(x) & WearsFlannelShirtsEveryDay(x) & -LikesShoppingForClothesAndMaterialisticGoods(x)) -> -OldPerson(x) & -LikesShoppingForClothesAndMaterialisticGoods(x))", "all x.((Mike(x) & WearsFlannelShirtsEveryDay(x)) | (-LikesShoppingForClothesAndMaterialisticGoods(x))))", "all x.((Mike(x) & WearsFlannelShirtsEveryDay(x) | -LikesShoppingForClothesAndMaterialisticGoods(x))) -> -(OldPerson(x) & StableHome(x) & -LikesShoppingForClothesAndMaterialisticGoods(x)))", "all x.((Mike(x) & WearsFlannelShirtsEveryDay(x) | (-LikesShoppingForClothesAndMaterialisticGoods(x)))) -> -OldPerson(x) & -LikesShoppingForClothesAndMaterialisticGoods(x)))", "all x.((WorthsFlannelShirtsEveryDay(x) | (-LikesShoppingForClothesAndMaterialisticGoods(x)))) -> (OldPerson(x) & -LikesShoppingForClothesAndMaterialisticGoods(x)))", "all x.((Mike(x) & (WearsFlannelShirtsEveryDay(x) | -LikesShoppingForClothesAndMaterialisticGoods(x))) -> -(OldPerson(x) & LivesInStableHome(x) & -LikesShoppingForClothesAndMaterialisticGoods(x)))", "all x.((Mike(x) & (WearsFlannelShirtsEveryDay(x) | -LikesShoppingForClothesAndMaterialisticGoods(x))) -> -OldPerson(x) & -LikesShoppingForClothesAndMaterialisticGoods(x))"]}
{"id": "folio_train_1038", "nl": "If Mike is not an old person living in a stable home and does not like shopping for clothes and other materialistic goods, then Mike does not like shopping for clothes and other materialistic goods.", "fol": "((-Elderly(Mike) & -Shopping(Mike)) -> -Shopping(Mike))", "prediction": ["all x.((OldPerson(x) & LivesInStableHome(x) & -LikesShoppingForClothesAndMaterialisticGoods(x)) -> -LikesShoppingForClothesAndMaterialisticGoods(x))", "all x.((OldPerson(x) & LivingInStableHome(x) & -LikesShoppingForClothesAndMaterialisticGoods(x)) -> -LikesShoppingForClothesAndMaterialisticGoods(x))", "all x.((OldPerson(x) & LivesInStableHome(x) & -LikesShoppingClothesAndMaterialisticGoods(x)) -> -LikesShoppingClothesAndMaterialisticGoods(x))", "all x.((Mike(x) & -OldPerson(x) & LivesInStableHome(x) & -LikesShoppingForClothesAndMaterialisticGoods(x)) -> -LikesShoppingForClothesAndMaterialisticGoods(x))", "all x.((OldPerson(x) & LivingInStableHome(x) & -LikesShoppingClothesAndMaterialisticGoods(x)) -> -LikesShoppingClothesAndMaterialisticGoods(x))", "all x.((OldPerson(x) & -LivingInStableHome(x) & -LikesShoppingForClothesAndMaterialisticGoods(x)) -> -LikesShoppingForClothesAndMaterialisticGoods(x))", "all x.((OldPerson(x) & -LivesInStableHome(x) & -LikesShoppingForClothesAndMaterialisticGoods(x)) -> -LikesShoppingForClothesAndMaterialisticGoods(x))", "all x.((Mike(x) & -OldPersonLivingInStableHome(x) & -LikesShoppingForClothesAndMaterialisticGoods(x)) -> -LikesShoppingForClothesAndMaterialisticGoods(x))", "all x.((OldPerson(x) & LivesInStableHome(x) & -LovesShoppingForClothesAndMaterialisticGoods(x)) -> -LovesShoppingForClothesAndMaterialisticGoods(x))", "all x.((Mike(x) & -OldPerson(x) & StableHome(x) & -LikesShoppingForClothesAndMaterialisticGoods(x)) -> -LikesShoppingForClothesAndMaterialisticGoods(x))", "all x.((OldPerson(x) & StableHome(x) & -LikesShoppingForClothesAndMaterialisticGoods(x)) -> -LikesShoppingForClothesAndMaterialisticGoods(x))", "all x.((OldPerson(x) & LivingInStableHome(x) & -LovesShoppingForClothesAndMaterialisticGoods(x)) -> -LovesShoppingForClothesAndMaterialisticGoods(x))", "all x.((OldPerson(x) & LivesInStableHome(x) & -likesShoppingForClothesAndMaterialisticGoods(x)) -> -likesShoppingForClothesAndMaterialisticGoods(x))", "all x.((OldPerson(x) & LivesInStableHome(x) & -LovesShoppingClothesAndMaterialisticGoods(x)) -> -LovesShoppingClothesAndMaterialisticGoods(x))", "all x.((OldPerson(x) & LivesInStableHome(x) & -LikesShoppingForClothes(x) & -LikesShoppingForMaterialisticGoods(x)) -> -LikesShoppingForClothesAndMaterialisticGoods(x))", "all x.((Mike(x) & -OldPerson(x) & LivesInStableHome(x) & -LikesShoppingForClothesAndMaterialisticGoods(x)) -> -LovesShoppingForClothesAndMaterialisticGoods(x))"]}
{"id": "folio_train_1039", "nl": "Adam owns cars.", "fol": "exists x.OwnsCar(Adam,x)", "prediction": ["all x y.((Adam(x) & Car(y)) -> Owns(x,y))", "exists x.(Adam(x) & OwnsCars(x))", "all x.((Adam(x) & Car(y)) -> Owns(x,y))", "all x.((Adam(x) & OwnsCars(x)) -> Owns(x))", "all x.((Adam(x) & OwnsCars(x)) -> Owns(x,y))", "all x.((Adam(x) & OwnsCars(x)) -> OwnsCars(x))", "all x.(Adam(x) -> OwnsCars(x))", "all x.((Adam(x) & OwnsCars(x)) -> Owns(x,Adam))", "all x.((Adam(x) & OwnsCars(x)) -> Owns(x,Cars))", "all x.(OwnsCars(x) -> Adam(x))", "all x.((Adam(x) & OwnsCars(x)) -> Owns(x,cars))", "exists x.(Adam(x) & OwnsCar(x))", "all x.(AdamOwnsCars(x) -> Owns(x))", "all x.(AdamOwnsCars(x) -> Owns(x,Adam))", "all x.(AdamOwnsCars(x) -> OwnsCars(x))", "all x.(OwnsCars(x) -> AdamOwnsCars(x))"]}
{"id": "folio_train_1040", "nl": "Adam has a favorite car.", "fol": "exists x.FavoriteCar(Adam,x)", "prediction": ["all x.((Adam(x) & FavoriteCar(x)) -> Has(x,Adam))", "all x.((Adam(x) & FavoriteCar(x)) -> HasCar(x))", "all x.((Adam(x) & FavoriteCar(x)) -> Has(x,y))", "all x y.((Adam(x) & Car(y)) -> Favorite(x,y))", "all x.((Adam(x) & FavoriteCar(x)) -> HasFavoriteCar(x))", "all x.(Adam(x) -> FavoriteCar(x))", "all x.((Adam(x) & Car(y)) -> Favorite(x,y))", "all x.(FavoriteCar(x) -> Adam(x))", "all x.(Adam(x) -> HasFavoriteCar(x))", "all x.((Adam(x) & FavoriteCar(x)) -> HasCar(x,Adam))", "(FavoriteCar(Adam))", "all x.((Adam(x) & FavoriteCar(x)) -> HasCar(x,y))", "all x.((Adam(x) & FavoriteCar(x)) -> -FavoriteCar(x))", "all x.((Adam(x) & FavoriteCar(x)) -> Has(x,a))", "exists x.(Adam(x) & FavoriteCar(x))", "all x.((Adam(x) & Car(x)) -> Favorite(x))"]}
{"id": "folio_train_1041", "nl": "Among the cars he owns, Adam's favorite car is European.", "fol": "all x.((OwnsCar(Adam,x) & FavoriteCar(Adam,x)) -> IsEuropeanCar(x))", "prediction": ["all x.((Car(x) & Owns(x)) -> FavoriteCar(x))", "all x.((Car(x) & Owns(x)) -> FavoriteCar(x,European))", "all x.((Car(x) & AdamOwns(x)) -> FavoriteCar(x))", "(OwnsCar(Adam) & FavoriteCar(Adam))", "all x.((Car(x) & AdamOwns(x)) -> FavoriteCar(x,European))", "all x.((Car(x) & Owns(x,Adam)) -> FavoriteCar(x,European))", "all x.((Car(x) & Owns(x)) -> (EuropeanCar(x)))", "all x.((Car(x) & Owns(x,y)) -> FavoriteCar(x,z))", "all x y.((Car(x) & Owns(x,y)) -> FavoriteCar(x,y))", "all x y.((Car(x) & Adam(y)) -> FavoriteCar(x,y))", "all x.((Car(x) & Owns(x,y)) -> FavoriteCar(x,y))", "among the cars he owns, Adam's favorite car is European.", "among all x y.((Car(x) & Owns(x,y)) -> FavoriteCar(x,y))", "among all x y.((Car(x) & Adam(y)) -> FavoriteCar(x,y))", "all x.((Car(x) & AdamOwns(x)) -> (EuropeanCar(x)))", "among all x.((Car(x) & Owns(x)) -> FavoriteCar(x))"]}
{"id": "folio_train_1042", "nl": "Adam broke his favorite car.", "fol": "exists x.(OwnsCar(Adam,x) & FavoriteCar(Adam,x) & BrokeCar(Adam,x))", "prediction": ["all x.((Adam(x) & FavoriteCar(x)) -> Breaks(x,y))", "all x.((Adam(x) & FavoriteCar(x)) -> Broken(x))", "all x y.((Adam(x) & Car(y)) -> Breaks(x,y))", "all x.((Adam(x) & FavoriteCar(x)) -> Breaks(x))", "all x.((Adam(x) & FavoriteCar(x)) -> Breaks(x,Adam))", "all x.((Adam(x) & FavoriteCar(y)) -> Breaks(x,y))", "all x y.((Adam(x) & FavoriteCar(y)) -> Breaks(x,y))", "all x y.((Adam(x) & Car(y) & Breaks(x,y)) -> Favorite(x,y))", "all x y.((Adam(x) & Car(y)) -> Broken(x,y))", "all x y.((Adam(x) & Car(y)) -> BreaksFavorite(x,y))", "all x.((Adam(x) & Car(y)) -> Breaks(x,y))", "all x.((Adam(x) & FavoriteCar(y)) -> Broken(x,y))", "all x y.((Adam(x) & FavoriteCar(y)) -> Broken(x,y))", "all x.((Adam(x) & FavoriteCar(x)) -> Breaks(x,a))", "Adam brokeFavoriteCar(Adam)", "Adam brokefavoriteCar(Adam)"]}
{"id": "folio_train_1043", "nl": "Adam owns a Japanese car.", "fol": "exists x.(OwnsCar(Adam,x) & Japanese(x))", "prediction": ["all x y.((Adam(x) & JapaneseCar(y)) -> Owns(x,y))", "all x.((Adam(x) & JapaneseCar(x)) -> Owns(x,y))", "all x.((Adam(x) & JapaneseCar(y)) -> Owns(x,y))", "all x.((Adam(x) & JapaneseCar(x)) -> Owns(x,Adam))", "all x.((Adam(x) & HasJapaneseCar(x)) -> Owns(x,JapaneseCar))", "all x.((Adam(x) & OwnsJapaneseCar(x)) -> Owns(x,JapaneseCar))", "exists x.(Adam(x) & Owns(x,JapaneseCar))", "all x.((Adam(x) & OwnsJapaneseCar(x)) -> OwnsJapaneseCar(x))", "all x.((Adam(x) & HasJapaneseCar(x)) -> Owns(x,y))", "all x.((Adam(x) & JapanCar(y)) -> Owns(x,y))", "all x.((Adam(x) & OwnsJapaneseCar(x)) -> JapaneseCar(x))", "all x.((Adam(x) & JapanCar(x)) -> Owns(x,y))", "all x.(Adam(x) -> OwnsJapaneseCar(x))", "all x.((Adam(x) & OwnsJapaneseCar(x)) -> HasJapaneseCar(x))", "exists x.(Adam(x) & OwnsJapaneseCar(x))", "all x.(Owns(x,JapaneseCar) -> Adam(x))"]}
{"id": "folio_train_1044", "nl": "Adam broke a European car.", "fol": "exists x.(OwnsCar(Adam,x) & IsEuropeanCar(x) & BrokeCar(Adam,x))", "prediction": ["all x y.((Adam(x) & Car(y)) -> Breaks(x,y))", "all x y.((Adam(x) & EuropeanCar(y)) -> Breaks(x,y))", "all x y.((Adam(x) & EuropeanCar(y)) -> Broken(x,y))", "all x y z.((Adam(x) & Car(y) & Car(z)) -> Breaks(x,y,z))", "all x y.((Adam(x) & Car(y)) -> Broken(x,y))", "all x y z.((Adam(x) & EuropeanCar(y) & Car(z)) -> Breaks(x,y,z))", "all x.((Adam(x) & EuropeanCar(y)) -> Broken(x,y))", "all x.((Adam(x) & EuropeanCar(y)) -> Breaks(x,y))", "all x.((Adam(x) & BreaksEuropeanCar(x)) -> BreaksEuropeanCar(x))", "all x y z.((Adam(x) & Car(y) & Car(z)) -> Broken(x,y,z))", "all x.((Adam(x) & Car(y)) -> Breaks(x,y))", "all x.((Adam(x) & Breaks(x,EuropeanCar)) -> Breaks(x,EuropeanCar))", "all x.((Adam(x) & EuropeanCar(x)) -> Broken(x))", "all x y z.((Adam(x) & Car(y) & Car(z)) -> Break(x,y,z))", "all x y.((Adam(x) & Car(y) & Breaks(x,y)) -> European(y))", "all x y z.((Adam(x) & EuropeanCar(y) & Car(z)) -> Broken(x,y,z))"]}
{"id": "folio_train_1045", "nl": "No buildings in New Haven are higher than 400 meters. ", "fol": "all x.(IsInNewHaven(x) -> -IsHigherThan400Meters(x))", "prediction": ["-exists x.(Building(x) & NewHunt(x) & HigherThan(x,400))", "-exists x.(Building(x) & HigherThan(x,400))", "-exists x.(Building(x) & NewHunt(x) & HigherThan400Meters(x))", "-exists x.(Building(x) & HigherThan(x,400))", "-exists x.(Building(x) & NewHunt(x,400))", "-exists x.(Building(x) & NewHaven(x) & HigherThan(x,400))", "-exists x.(Building(x) & InNewHunt(x,400))", "-exists x.(Building(x) & NewHaven(x) & HigherThan400Meters(x))", "-exists x.(Building(x) & InNew Haven(x) & HigherThan(x,400))", "-exists x.(Building(x) & NewHunt(x) & HigherThan(x,400))", "-exists x.(Building(x) & NewHunt(y) & HigherThan(x,400))", "-exists x.(Building(x) & NewHunt(x) & HigherThan400Meters(x))", "-exists x.(Building(x) & HigherThan400Meters(x))", "-exists x.(Building(x) & InNew Haven(x) & HigherThan400Meters(x))", "all x.((Building(x) & NewHunt(x)) -> HigherThan400Meters(x))", "-exists x.(Building(x) & New Haven(x) & HigherThan(x,400))"]}
{"id": "folio_train_1046", "nl": "All buildings managed by Yale Housing are in New Haven. ", "fol": "all x.(ManagedByYaleHousing(x) -> IsInNewHaven(x))", "prediction": ["all x.((Building(x) & ManagedByYaleHousing(x)) -> NewHunt(x))", "all x.((Building(x) & ManagedByYaleHousing(x)) -> NewHanover(x))", "all x.((Building(x) & ManagedByYaleHousing(x)) -> NewHaven(x))", "all x.((Building(x) & ManagedByY YaleHousing(x)) -> NewHunt(x))", "all x.((Building(x) & ManagedByYaleHousing(x)) -> InNewHanover(x))", "all x.((Building(x) & ManagedByY YaleHousing(x)) -> NewHanover(x))", "all x.((Building(x) & ManagedByYaleHousing(x)) -> InNewHunt(x))", "all x.((Building(x) & ManagedByYaleHousing(x)) -> NewHandon(x))", "all x.((Building(x) & ManagedByY YaleHousing(x)) -> NewHaven(x))", "all x.((Building(x) & ManagedByYaleHousing(x)) -> NewHendon(x))", "all x.((Building(x) & ManagedByYaleHousing(x)) -> NewHenry(x))", "all x.(Building(x) & ManagedByYaleHousing(x) -> NewHunt(x))", "all x y.((Building(x) & YaleHousing(y) & ManagedBy(x,y)) -> NewHunt(x))", "all x y.((Building(x) & YaleHousing(y)) -> NewHunt(x,y))", "all x y.((Building(x) & YaleHousing(y) & ManagedBy(x,y)) -> NewHanover(x))", "all x y.((Building(x) & ManagedByYaleHousing(x)) -> NewHunt(y))"]}
{"id": "folio_train_1047", "nl": "All buildings in Manhattan are higher than 400 meters. ", "fol": "all x.(IsInManhattan(x) -> IsHigherThan400Meters(x))", "prediction": ["all x.((Building(x) & InMetropolitan(x)) -> HigherThan400Meters(x))", "all x.((Building(x) & Manhattan(x)) -> HigherThan400Meters(x))", "all x.((Building(x) & InMetropolitan(x,400)) -> HigherThan(x,400))", "all x.((Building(x) & InMetropolitan(x)) -> HigherThan(x,400))", "all x.((Building(x) & InMidtown(x)) -> HigherThan400Meters(x))", "all x.((Building(x) & HigherThan400Meters(x)) -> ManhattanBuilding(x))", "all x.((Building(x) & Manhattan(x)) -> HigherThan(x,400))", "all x.((Building(x) & InMetropolis(x)) -> HigherThan400Meters(x))", "all x.((Building(x) & InMilton(x)) -> HigherThan400Meters(x))", "all x.((Building(x) & HigherThan400Meters(x)) -> Manhattan(x))", "all x.((Building(x) & InMetropolis(x,400)) -> HigherThan(x,400))", "all x.((Building(x) & LowerThan400Meters(x)) -> ManhattanBuilding(x))", "all x.((Building(x) & InManhattan(x)) -> HigherThan400Meters(x))", "all x.((Building(x) & LowerThan400Meters(x)) -> Manhattan(x))", "all x.((Building(x) & InMendonia(x)) -> HigherThan400Meters(x))", "all x.((Building(x) & HigherThan(x,400)) -> Manhattan(x))"]}
{"id": "folio_train_1048", "nl": "All buildings owned by Bloomberg are in Manhattan. ", "fol": "all x.(OwnedByBloomberg(x) -> IsInManhattan(x))", "prediction": ["all x.((Building(x) & OwnedByBanana(x)) -> Manhattan(x))", "all x.((Building(x) & OwnedByBanana(x)) -> InMetropolitan(x))", "all x.((Building(x) & OwnedByBananas(x)) -> Manhattan(x))", "all x.((Building(x) & OwnedByBanana(x)) -> InManhattan(x))", "all x.((Building(x) & OwnedByBanana(x)) -> InMidtown(x))", "all x.((Building(x) & OwnedByBudget(x)) -> Manhattan(x))", "all x.((Building(x) & OwnedByBloomberg(x)) -> Manhattan(x))", "all x.((Building(x) & OwnedByBanana(x)) -> InMiami(x))", "all x.((Building(x) & OwnedByBilliance(x)) -> Manhattan(x))", "all x.((Building(x) & OwnedByBirmingham(x)) -> Manhattan(x))", "all x.((Building(x) & OwnedByBianca(x)) -> Manhattan(x))", "all x.((Building(x) & OwnedByBilliams(x)) -> Manhattan(x))", "all x.(Building(x) & OwnedByBanana(x) -> Manhattan(x))", "all x.((Building(x) & OwnedByByBanana(x)) -> Manhattan(x))", "all x.((Building(x) & OwnedByBanana(x)) -> InMetropolis(x))", "all x.(Building(x) -> OwnedByBanana(x))"]}
{"id": "folio_train_1049", "nl": "All buildings with the Bloomberg logo are buildings owned by Bloomberg. ", "fol": "all x.(HasBloombergLogo(x) -> OwnedByBloomberg(x))", "prediction": ["all x.((Building(x) & BloombergLogo(x)) -> OwnedByBananas(x))", "all x.((Building(x) & BloombergLogo(x)) -> BloombergBuilding(x))", "all x.((Building(x) & BloombergLogo(x)) -> OwnedByBanana(x))", "all x.((Building(x) & HasBilliamsLogo(x)) -> OwnedByBilliams(x))", "all x.((Building(x) & HasBananasLogo(x)) -> OwnedByBananas(x))", "all x.((Building(x) & BloombergLogo(x)) -> OwnedByBenjamin(x))", "all x.((Building(x) & BloombergLogo(x)) -> OwnedByBanana.(x))", "all x.((Building(x) & BloombergLogo(x)) -> OwnedByBirmingham(x))", "all x.((Building(x) & HasBloombergLogo(x)) -> OwnedByBloomberg(x))", "all x.((Building(x) & BloombergLogo(x)) -> OwnedByBanana.", "all x.((Building(x) & BloombergLogo(x)) -> OwnedByBilliams(x))", "all x.((Building(x) & BloombergLogo(x)) -> OwnedByBloomberg(x))", "all x.((Building(x) & HasBananaLogo(x)) -> OwnedByBanana(x))", "all x.((Building(x) & BloombergLogo(x)) -> OwnedByBird(x))", "all x.((Building(x) & BloombergLogo(x)) -> BuildingOwnedByBananas(x))", "all x.((Building(x) & BloombergLogo(x)) -> BuildingOwnedByBanana(x))"]}
{"id": "folio_train_1050", "nl": "Tower A is neither in New Haven nor in Manhattan.", "fol": "-((IsInNewHaven(Towera) & -IsInManhattan(Towera)) | (-IsInNewHaven(Towera) & IsInManhattan(Towera)))", "prediction": ["All x.(TowerA(x) -> (-NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x)))", "All x.(TowerA(x) -> (-NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x)))", "All x.(TowerA(x) -> (-NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x)))", "All x.(TowerA(x) -> (-NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x))", "-(NewHaven(TowerA) | Manhattan(TowerA))", "All x.(TowerA(x) -> (-NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x))))", "All x.(TowerA(x) -> (-NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHouse(x)))", "All x.(TowerA(x) -> (-NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHouse(x)))", "All x.(TowerA(x) -> (-NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x)))", "All x.(TowerA(x) -> (-NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & - Manhattan(x)))", "All x.(TowerA(x) -> (-NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -Manhattan(x)))", "All x.(TowerA(x) -> (-NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x)", "All x.(TowerA(x) -> (-NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & Manhattan(x))", "All x.(TowerA(x) -> (-NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & Manhattan(x)))", "All x.(TowerA(x) -> (-NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHouse(x)))", "All x.(TowerA(x) -> (-NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & -NewHaven(x) & Manhattan(x)))"]}
{"id": "folio_train_1051", "nl": "Tower B is a building with the Bloomberg logo and in Manhattan. ", "fol": "(HasBloombergLogo(Towerb) & IsInManhattan(Towerb))", "prediction": ["all x.((Building(x) & BloombergLogo(x) & InMetropolitan(x)) -> TowerB(x))", "all x.(TowerB(x) -> (Building(x) & BloombergLogo(x) & InMetropolitan(x)))", "all x.(TowerB(x) -> (Building(x) & BloombergLogo(x) & inMetropolitan(x)))", "all x.((Building(x) & BloombergLogo(x) & InMidtown(x)) -> TowerB(x))", "all x.(TowerB(x) -> (Building(x) & HasBananasLogo(x) & InMetropolitan(x)))", "all x.(TowerB(x) -> (BuildingWithBananasLogo(x) & InMetropolitan(x)))", "all x.((Building(x) & BloombergLogo(x) & Manhattan(x)) -> TowerB(x))", "all x.(TowerB(x) -> (Building(x) & HasBenjaminLogo(x) & InMetropolitan(x)))", "all x.(TowerB(x) -> (Building(x) & BloombergLogo(x) & InMetropolis(x)))", "all x.(TowerB(x) -> (Building(x) & BloombergLogo(x) & InMidtown(x)))", "all x.(TowerB(x) -> (Building(x) & BloombergLogo(x) & inMetropolis(x)))", "all x.(TowerB(x) -> (Building(x) & BloombergLogo(x) & inMidtown(x)))", "all x.(TowerB(x) -> (Building(x) & BloombergLogo(x) & InMetropolitan(x)))", "all x.(TowerB(x) -> (Building(x) & HasBananasLogo(x) & InMetropolis(x)))", "all x.(TowerB(x) -> (Building(x) & BloombergLogo(x) & Manhattan(x)))", "all x.(TowerB(x) -> (Building(x) & HasBananasLogo(x) & InMidtown(x)))"]}
{"id": "folio_train_1052", "nl": "Tower A is higher than 400 meters.", "fol": "IsHigherThan400Meters(TowerA)", "prediction": ["All x.(TowerA(x) -> HigherThan(x,400))", "All x.(TowerA(x) -> HigherThan400Meters(x))", "All x.((TowerA(x) & HigherThan(x,400)) -> HigherThan(x,400))", "all x.((TowerA(x) & HigherThan(x,400)) -> HigherThan(x,400))", "all x.((TowerA(x) & HigherThan400Meters(x)) -> HigherThan400Meters(x))", "All x.((TowerA(x) & HigherThan400Meters(x)) -> HigherThan400Meters(x))", "All x.(TurbineA(x) -> HigherThan(x,400))", "All x.(TurbineA(x) -> HigherThan400Meters(x))", "all x.(TowerA(x) -> HigherThan(x,400))", "all x.(TowerA(x) -> HigherThan400Meters(x))", "All x.(TurmA(x) -> HigherThan(x,400))", "all x.(TurbineA(x) -> HigherThan400Meters(x))", "all x.(TurbineA(x) -> HigherThan(x,400))", "All x.(TurmA(x) -> HigherThan400Meters(x))", "All x.((TowerA(x) & HigherThan(x,400)) -> HigherThan(x,400))", "all x.((TowerA(x) & HigherThan(x,400)) -> HigherThan(x,400))"]}
{"id": "folio_train_1053", "nl": "Tower A is not higher than 400 meters.", "fol": "-IsHigherThan400Meters(TowerA)", "prediction": ["all x.((TowerA(x) & -HigherThan400Meters(x)) -> -HigherThan400Meters(x))", "all x.((TowerA(x) & -HigherThan(x,400)) -> -HigherThan(x,400))", "All x.((TowerA(x) & -HigherThan400Meters(x)) -> -HigherThan400Meters(x))", "All x.(TowerA(x) -> -HigherThan400Meters(x))", "all x.(TowerA(x) -> -HigherThan400Meters(x))", "all x.(TurbineA(x) -> -HigherThan400Meters(x))", "All x.(TurbineA(x) -> -HigherThan400Meters(x))", "All x.(TowerA(x) -> -HigherThan(x,400))", "all x.(TowerA(x) -> -HigherThan(x,400))", "all x.(TurmA(x) -> -HigherThan400Meters(x))", "All x.(TurmA(x) -> -HigherThan400Meters(x))", "all x.(TurbineA(x) -> -HigherThan(x,400))", "All x.(TurbineA(x) -> -HigherThan(x,400))", "all x.((TowerA(x) & -HigherThan400Meters(x)) -> NotHigherThan400Meters(x))", "All x.(TurnorA(x) -> -HigherThan400Meters(x))", "all x.(TurnorA(x) -> -HigherThan400Meters(x))"]}
{"id": "folio_train_1054", "nl": "Tower A is a building with the Bloomberg logo or managed by Yale Housing.", "fol": "(HasBloombergLogo(Towera) | ManagedByYaleHousing(Towera))", "prediction": ["all x.((Building(x) & (BloombergLogo(x) | YaleHousing(x))) -> TowerA(x))", "all x.(TowerA(x) -> (Building(x) & (BloombergLogo(x) | YaleHousing(x))))", "all x.((Building(x) & BloombergLogo(x)) | ManagedByYaleHousing(x)) -> TowerA(x))", "all x.((Building(x) & (BloombergLogo(x) | ManagedByYaleHousing(x))) -> TowerA(x))", "all x.((Building(x) & (BurnsbyLogo(x) | ManagedByYaleHousing(x))) -> TowerA(x))", "all x.((Building(x) & (BurnsbyLogo(x) | YaleHousing(x))) -> TowerA(x))", "all x.((Building(x) & (BenjaminLogo(x) | YaleHousing(x))) -> TowerA(x))", "all x.((Building(x) & (BilliamsLogo(x) | YaleHousing(x))) -> TowerA(x))", "all x.((Building(x) & (BurnyLogo(x) | YaleHousing(x))) -> TowerA(x))", "all x.((Building(x) & (BloombergLogo(x) | YaleHousingManagement(x))) -> TowerA(x))", "all x.((Building(x) & (BankyLogo(x) | YaleHousing(x))) -> TowerA(x))", "all x.(TowerA(x) -> (Building(x) & (BloombergLogo(x) | ManagedByYaleHousing(x))))", "all x.(TowerA(x) -> (Building(x) & (BurnsbyLogo(x) | ManagedByYaleHousing(x))))", "all x.((Building(x) & BloombergLogo(x)) | ManagedByY YaleHousing(x)) -> TowerA(x))", "all x.(TowerA(x) -> (Building(x) & (BananasLogo(x) | ManagedByYaleHousing(x))))", "all x.(TowerA(x) -> (Building(x) & (BurnsbyLogo(x) | YaleHousing(x))))"]}
{"id": "folio_train_1055", "nl": "Tower A is neither a building with the Bloomberg logo nor managed by Yale Housing.", "fol": "(-HasBloombergLogo(Towera) & -ManagedByYaleHousing(Towera))", "prediction": ["all x.(TowerA(x) -> (-(BuildingWithBananasLogo(x) & -ManagedByYaleHousing(x)) & -(BuildingWithBananasLogo(x) & ManagedByYaleHousing(x))))", "all x.(TowerA(x) -> (-(BuildingWithBananasLogo(x) & -ManagedByYaleHousing(x)) | -(BuildingWithBananasLogo(x) & ManagedByYaleHousing(x))))", "all x.(TowerA(x) -> (-(BuildingWithBananasLogo(x) & -ManagedByYaleHousing(x)) & -(BuildingWithBananasLogo(x) & ManagedByYaleHousing(x))))", "all x.(TowerA(x) -> (-(BuildingWithBananasLogo(x) & -ManagedByYaleHousing(x)) | -(BuildingWithBananasLogo(x) & ManagedByYaleHousing(x))))", "all x.((Building(x) & -(BloombergLogo(x) | YaleHousing(x))) -> TowerA(x))", "all x.(TowerA(x) -> (-(BuildingWithBilliamsLogo(x) & -ManagedByYaleHousing(x)) | -(BuildingWithBilliamsLogo(x) & ManagedByYaleHousing(x))))", "all x.(TowerA(x) -> (-(BuildingWithBurnyLogo(x) & -ManagedByYaleHousing(x)) | -(BuildingWithBurnyLogo(x) & ManagedByYaleHousing(x))))", "all x.(TowerA(x) -> (-(BuildingWithBurnwallLogo(x) & -ManagedByYaleHousing(x)) | -(BuildingWithBurnwallLogo(x) & ManagedByYaleHousing(x))))", "all x.(TowerA(x) -> (-(BuildingWithBananasLogo(x) & -ManagedByYaleHousing(x)) & -(BuildingWithBananasLogo(x) & -ManagedByYaleHousing(x))))", "all x.(TowerA(x) -> (-(BuildingWithBilliamsLogo(x) & -ManagedByYaleHousing(x)) | -(BuildingWithBilliamsLogo(x) & ManagedByYaleHousing(x))))", "all x.(TowerA(x) -> (-(BuildingWithBurnyLogo(x) & -ManagedByYaleHousing(x)) | -(BuildingWithBurnyLogo(x) & ManagedByYaleHousing(x))))", "all x.(TowerA(x) -> (-(BuildingWithBananasLogo(x) & -ManagedByYaleHousing(x)) | -(BuildingWithBananasLogo(x) & ManagedByYaleHousing(x)))))", "all x.(TowerA(x) -> (-(BuildingWithBurnwallLogo(x) & -ManagedByYaleHousing(x)) | -(BuildingWithBurnwallLogo(x) & ManagedByYaleHousing(x))))", "all x.(TowerA(x) -> (-(BuildingWithBananasLogo(x) & -ManagedByYaleHousing(x)) | (-BuildingWithBananasLogo(x) & ManagedByYaleHousing(x))))", "all x.(TowerA(x) -> (-(BuildingWithBananasLogo(x) & -ManagedByYaleHousing(x)) | (-ManagedByBananasLogo(x) & ManagedByYaleHousing(x))))", "all x.(TowerA(x) -> (-(Building(x) & BloombergLogo(x)) | ManagedByYaleHousing(x))))"]}
{"id": "folio_train_1056", "nl": "No fish are birds.", "fol": "all x.(IsFish(x) -> -IsBird(x))", "prediction": ["-exists x.(Fish(x) & Bird(x))", "all x.(Fish(x) -> -Bird(x))", "all x.(Fish(x) -> Bird(x))", "all x y.((Fish(x) & Bird(y)) -> -exists z.(Fish(z) & Bird(z) & -exists w.(Fish(w) & Bird(w) & -exists w.(Fish(w) & Bird(w) & -exists w.(Fish(w) & Bird(w)))))", "all x y.((Fish(x) & Bird(y)) -> -exists z.(Fish(z) & Bird(z) & -exists w.(Fish(w) & Bird(w) & -exists w.(Fish(w) & Bird(w)) & -exists w.(Fish(w) & Bird(w)))))", "all x y.((Fish(x) & Bird(y)) -> -exists z.(Fish(z) & Bird(z) & -exists w.(Fish(w) & Bird(w) & -exists w.(Fish(w) & Bird(w) & -exists w.(Fish(w) & Bird(w) & Bird(w))))", "all x y.((Fish(x) & Bird(y)) -> -exists z.(Fish(z) & Bird(z) & -exists w.(Fish(w) & Bird(w) & -exists w.(Fish(w) & Bird(w)))))", "all x y.((Fish(x) & Bird(y)) -> -exists z.(Fish(z) & -exists w.(Fish(w) & Bird(z) & -exists w.(Fish(w) & Bird(w) & -exists w.(Fish(w) & Bird(w)))))", "all x y.((Fish(x) & Bird(y)) -> -exists z.(Fish(z) & Bird(z) & -exists w.(Fish(w) & Bird(w)) & -exists w.(Fish(w) & Bird(w)) & -exists w.(Fish(w) & Bird(w))))", "all x y.((Fish(x) & Bird(y)) -> -exists z.(Fish(z) & Bird(z) & -exists w.(Fish(w) & Bird(w) & -exists w.(Fish(w) & Bird(w)) & -exists w.(Fish(w) & Bird(w) & Bird(w))))", "all x y.((Fish(x) & Bird(y)) -> -exists z.(Fish(z) & -exists w.(Fish(w) & -exists w.(Fish(w) & Bird(w)) & -exists w.(Fish(w) & Bird(w) & -exists w.(Fish(w) & Bird(w))))", "all x y.((Fish(x) & Bird(y)) -> -exists z.(Fish(z) & Bird(z) & -exists w.(Fish(w) & Bird(w)) & -exists w.(Fish(w) & Bird(w)) & -exists w.(Fish(w) & Bird(w)))))", "all x y.((Fish(x) & Bird(y)) -> -exists z.(Fish(z) & Bird(z) & -exists w.(Fish(w) & Bird(w) & -exists w.(Fish(w) & Bird(w) & -exists w.(Fish(w) & Bird(w)) & Bird(w))))", "all x y.((Fish(x) & Bird(y)) -> -exists z.(Fish(z) & Bird(z) & -exists w.(Fish(w) & Bird(w)) & -exists w.(Fish(w) & Bird(w)) & -exists w.(Fish(w) & Bird(w) & Bird(w))))", "all x y.((Fish(x) & Bird(y)) -> -exists z.(Fish(z) & Bird(z) & -exists w.(Fish(w) & Bird(w)) & -exists w.(Fish(w) & Bird(w))))", "all x y.((Fish(x) & Bird(y)) -> -exists z.(Fish(z) & Bird(z)) & -exists w.(Fish(w) & Bird(w)) & -exists w.(Fish(w) & Bird(w))))"]}
{"id": "folio_train_1057", "nl": "Everything that is an osprey is a bird.", "fol": "all x.(IsOsprey(x) -> IsBird(x))", "prediction": ["all x.(Osprey(x) -> Bird(x))", "all x.((Osprey(x) & Bird(x)) -> Bird(x))", "all x.((Osprey(x) & HasBird(x)) -> Bird(x))", "all x.((Osprey(x) & HasOsprey(x)) -> Bird(x))", "all x.((Osprey(x) & -Osprey(x)) -> Bird(x))", "all x.((Osprey(x) & IsBird(x)) -> Bird(x))", "all x.((Osprey(x) & Bird(x)) -> Is(x,y))", "all x.((Osprey(x) & Bird(x)) -> HasOsprey(x))", "all x.((Osprey(x) & Osprey(x)) -> Bird(x))", "all x.((Osprey(x) & Bird(x)) -> -Osprey(x))", "all x.((Osprey(x) & Bird(x)) -> Is(x))", "all x.((Osprey(x) & Bird(x)) -> Flying(x))", "all x.((Osprey(x) & Bird(x)) -> Osprey(x))", "all x.((Osprey(x) & Bird(x)) -> Breed(x))", "all x.((Osprey(x) & Bird(x)) -> Has(x,y))", "all x.((Osprey(x) & Bird(x)) -> Species(x))"]}
{"id": "folio_train_1058", "nl": "If something is a carp, then it is a fish.", "fol": "all x.(IsCarp(x) -> IsFish(x))", "prediction": ["all x.((Carp(x) & Fish(x)) -> Fish(x))", "all x.((Crop(x) & Fish(x)) -> Fish(x))", "all x.((Crap(x) & Fish(x)) -> Fish(x))", "all x.(Carp(x) -> Fish(x))", "all x.((Carp(x) -> Fish(x))", "all x.((Carp(x) & Fish(x)) -> Carp(x))", "all x.(Crap(x) -> Fish(x))", "all x.((Crap(x) & Fish(x)) -> Carp(x))", "all x.((Crop(x) & Fish(x)) -> Carp(x))", "all x.((Chip(x) & Fish(x)) -> Fish(x))", "all x.(Crop(x) -> Fish(x))", "all x.((Carnivore(x) & Fish(x)) -> Fish(x))", "all x.((Carp(x) | Fish(x)) -> Fish(x))", "all x.(((Carp(x) & Fish(x)) -> Fish(x))", "all x.((Fish(x) & Carp(x)) -> Fish(x))", "all x.((Carp(x) & Fish(x)) -> HasCarp(x))"]}
{"id": "folio_train_1059", "nl": "All goldfish are carp.", "fol": "all x.(IsGoldfish(x) -> IsCarp(x))", "prediction": ["all x.(Goldfish(x) -> Carp(x))", "all x.(Goldfish(x) -> Crap(x))", "all x y.((Goldfish(x) & Carp(y)) -> Carp(x))", "all x.(Goldfish(x) -> Carp(x))", "all x y.((Goldfish(x) & Carp(y)) -> Carp(x,y))", "all x.(Goldfish(x) -> Carnivore(x))", "all x.(Goldfish(x) -> (Carp(x) | Carp(x)))", "all x.(Goldfish(x) -> (Carp(x) & Carp(x)))", "all x.(Goldfish(x) -> Capricorn(x))", "all x.(Goldfish(x) -> Cat(x))", "all x y.((Goldfish(x) & Carp(y)) -> Crap(x))", "all x.(goldfish(x) -> Carp(x))", "(all x.(Goldfish(x) -> Carp(x))", "(all x.(Goldfish(x) -> Carp(x)))", "all x y.((Goldfish(x) & Carp(y)) -> Is(x,y))", "all x.(Goldfish(x) -> (Carp(x) & -Carp(x)))"]}
{"id": "folio_train_1060", "nl": "If Bubbles is either an osprey or a goldfish, then Bubbles is not a fish.", "fol": "(((IsOsprey(Bubbles) & -IsCarp(Bubbles)) | (-IsOsprey(Bubbles) & IsCarp(Bubbles))) -> -IsFish(Bubbles))", "prediction": ["all x.((Bubble(x) & (Osprey(x) | Goldfish(x))) -> -Fish(x))", "all x.((Balloon(x) & (Osprey(x) | Goldfish(x))) -> -Fish(x))", "all x.((Baby(x) & (Osprey(x) | Goldfish(x))) -> -Fish(x))", "all x.((Bubbles(x) & (Osprey(x) | Goldfish(x))) -> -Fish(x))", "all x.((Bulletin(x) & (Osprey(x) | Goldfish(x))) -> -Fish(x))", "all x.((Butterfly(x) & (Osprey(x) | Goldfish(x))) -> -Fish(x))", "all x.((Osprey(x) | Goldfish(x)) -> -Fish(x))", "all x.((Blowfish(x) & (Osprey(x) | Goldfish(x))) -> -Fish(x))", "all x.((Bush(x) & (Osprey(x) | Goldfish(x))) -> -Fish(x))", "all x.((Bubbly(x) & (Osprey(x) | Goldfish(x))) -> -Fish(x))", "all x.((Blood(x) & (Osprey(x) | Goldfish(x))) -> -Fish(x))", "all x.((Bullet(x) & (Osprey(x) | Goldfish(x))) -> -Fish(x))", "all x.((Flour(x) & (Osprey(x) | Goldfish(x))) -> -Fish(x))", "all x.((Fish(x) & (Osprey(x) | Goldfish(x))) -> -Fish(x))", "all x.((Bubble(x) & Osprey(x) | Goldfish(x)) -> -Fish(x))", "all x.((Bubble(x) & (Osprey(x) | Goldfish(x))) -> -Float(x))"]}
{"id": "folio_train_1061", "nl": "Bubbles is an Osprey.", "fol": "IsOsprey(Bubbles)", "prediction": ["All x.(Bubbles(x) -> Osprey(x))", "all x.(Bubbles(x) -> Osprey(x))", "Osprey(Bubbles)", "All x.(Balloon(x) -> Osprey(x))", "All x.(Bubble(x) -> Osprey(x))", "all x.(Balloon(x) -> Osprey(x))", "(Osprey(Bubbles) & Osprey(Bubbles))", "all x.(Bubble(x) -> Osprey(x))", "(Osprey(Bubbles) -> Osprey(Bubbles))", "all x.(Balloons(x) -> Osprey(x))", "Osprey(Osprey(O) -> Bubbles(O))", "All x.(Bubbles(x) -> Osprey(x))", "Osprey(x) -> Bubbles(x))", "(Osprey(Bubbles) -> Osprey(Bubbles))", "Osprey(Osprey)", "(Osprey(Bubbles) | Osprey(Bubbles))"]}
{"id": "folio_train_1062", "nl": "Bubbles is a carp.", "fol": "IsCarp(Bubbles)", "prediction": ["all x.(Bubble(x) -> Carp(x))", "all x.(Bubbles(x) -> Carp(x))", "all x.(Balloon(x) -> Carp(x))", "all x.(Bubble(x) -> Crap(x))", "all x.(Bubbles(x) -> Crap(x))", "all x.(Balloon(x) -> Crap(x))", "all x y.((Bubble(x) & Carp(y)) -> Carp(x))", "all x.(Bubbly(x) -> Carp(x))", "all x.(Bubble(x) -> Carp(x))", "all x.(Baby(x) -> Carp(x))", "all x.(Balloons(x) -> Carp(x))", "all x y.((Bubble(x) & Carp(y)) -> Carp(x,y))", "all x y.((Bubble(x) & Carp(y)) -> Is(x,y))", "All x.(Bubble(x) -> Carp(x))", "all x.(Bush(x) -> Carp(x))", "all x y.((Bubble(x) & Carp(y)) -> Crap(x))"]}
{"id": "folio_train_1063", "nl": "Bubbles is not a carp.", "fol": "-IsCarp(Bubbles)", "prediction": ["all x.(Bubble(x) -> -Carp(x))", "all x.(Bubble(x) -> -Crop(x))", "all x.(Balloon(x) -> -Carp(x))", "all x.(Bubbles(x) -> -Carp(x))", "all x.(Bubble(x) -> -Crap(x))", "all x.(Balloon(x) -> -Crop(x))", "all x.(Bubbles(x) -> -Crop(x))", "all x.(Bubble(x) -> -Carnivore(x))", "all x.(Balloon(x) -> -Crap(x))", "all x.(Bubbles(x) -> -Crap(x))", "all x.(Bubble(x) -> -Carnival(x))", "all x.(Balloon(x) -> -Carnivore(x))", "all x.(Bubbly(x) -> -Carp(x))", "all x.(Bubbly(x) -> -Crop(x))", "all x.(Bubble(x) -> -Carp(x))", "all x.(Bubble(x) -> -Crop(x))"]}
{"id": "folio_train_1064", "nl": "Mr. and Mrs. Smith make a travel plan, they want to go to a city in California or Florida, and where neither of them has ever been.", "fol": "all x.((DesiresTravelPlan(x) -> (IsInCalifornia(x) | IsInFlorida(x))) & HasNeverVisited(x))", "prediction": ["all x y.((Mr.Smith(x) & Mrs.Smith(y)) -> (MakesTravelPlan(x) & (WantsToCalifornia(x) | WantsToFlorida(x)) & -(WantsToCalifornia(y) | WantsToFlorida(y))))", "all x y.((Mr.Smith(x) & Mrs.Smith(y)) -> (MakesTravelPlan(x) & (WantsToCalifornia(x) | WantsToFlorida(x)) & -(WantsToCalifornia(y) | WantsToFlorida(y)))))", "all x y.((Mr.Smith(x) & Mrs.Smith(y)) -> (MakesTravelPlan(x) & (WantsToCalifornia(x) | WantsToFlorida(x)) & -HasBeen(y)))", "all x y.((Mr.Smith(x) & Mrs.Smith(y)) -> (MakesTravelPlan(x) & (WantsToCalifornia(x) | WantsToFlorida(x)) & -(WantToCalifornia(y) | WantsToFlorida(y))))", "all x y.((Mr.Smith(x) & Mrs.Smith(y)) -> (MakesTravelPlan(x) & (WantsToCalifornia(x) | WantsToFlorida(x)) & -(WantToCalifornia(y) | WantsToFlorida(y)))))", "all x y.((Mr.Smith(x) & Mrs.Smith(y)) -> (MakesTravelPlan(x) & (WantsToCalifornia(x) | WantsToFlorida(x)) & -WantsToCalifornia(y) | WantsToFlorida(y))))", "all x y.((Mr.Smith(x) & Mrs.Smith(y)) -> (MakesTravelPlan(x) & (WantsToCalifornia(x) | WantsToFlorida(x)) & -WantsToCalifornia(y))))", "all x y.((Mr.Smith(x) & Mrs.Smith(y)) -> (MakesTravelPlan(x) & (GoesToCalifornia(x) | GoesToFlorida(x)) & -HasBeen(y)))", "all x y.((Mr.Smith(x) & Mrs.Smith(y)) -> (MakesTravelPlan(x) & (WantsToCalifornia(x) | WantsToFlorida(x)) & -WantsToCalifornia(y) & -WantsToFlorida(y)))", "all x y.((Mr.Smith(x) & Mrs.Smith(y)) -> (MakesTravelPlan(x) & (GoesToCalifornia(x) | GoesToFlorida(x)) & -BeenToCalifornia(y))))", "all x y.((Mr.Smith(x) & Mrs.Smith(y)) -> (MakesTravelPlan(x) & (WantsToCalifornia(x) | WantsToFlorida(x)) & -WantToCalifornia(y))))", "all x y.((Mr.Smith(x) & Mrs.Smith(y)) -> (MakesTravelPlan(x) & (WantsToCalifornia(x) | WantsToFlorida(x)) & -WantsToCalifornia(y)))", "all x y.((Mr.Smith(x) & Mrs.Smith(y)) -> (MakesTravelPlan(x) & (GoesToCalifornia(x) | GoesToFlorida(x)) & -BeenTo(y,California))))", "all x y.((Mr.Smith(x) & Mrs.Smith(y)) -> (MakesTravelPlan(x) & (WantsToCalifornia(x) | WantsToFlorida(x)) & -(WantsToCalifornia(x) | WantsToFlorida(x)))))", "all x y.((Mr.Smith(x) & Mrs.Smith(y)) -> (MakesTravelPlan(x) & (WantsToCalifornia(x) | WantsToFlorida(x)) & -(WantsToCalifornia(x) | WantsToFlorida(x))))", "all x y.((Mr.Smith(x) & Mrs.Smith(y)) -> (MakesTravelPlan(x) & (WantsToCalifornia(x) | WantsToFlorida(x)) & -WantsToCalifornia(y) & WantsToFlorida(y)))"]}
{"id": "folio_train_1065", "nl": "Cities in California that they are interested in are San Francisco, Los Angeles, and San Diego.", "fol": "all x.(((IsSanFrancisco(x) | IsLosAngeles(x) | IsSanDiego(x)) & IsInCalifornia(x)) -> DesiresTravelPlan(x))", "prediction": ["all x.((City(x) & Interest(x)) -> (SanFrancisco(x) | Los Angeles(x) | SanDiego(x)))", "all x.((City(x) & InCalifornia(x)) -> (SanFrancisco(x) | Los Angeles(x) | SanDiego(x)))", "all x.((City(x) & Interest(x)) -> (SanFrance(x) | Los Angeles(x) | SanDiego(x)))", "all x.((City(x) & Interest(x)) -> (SanFrancisco(x) | Los Angeles(x) | SanDistrict(x)))", "all x.((City(x) & InterestIn(x)) -> (SanFrancisco(x) | Los Angeles(x) | SanDiego(x)))", "all x.((City(x) & Interest(x)) -> (SanFrancisco(x) | Los Angeles(x) | SanDiego(x)))", "all x.((City(x) & InCalifornia(x)) -> (SanFrancisco(x) | LosAngeles(x) | SanDiego(x)))", "all x.((City(x) & InCalifornia(x)) -> (SanFrancisco(x) | Los Angeles(x) | SanDistrict(x)))", "all x.((City(x) & Interest(x)) -> (SanFrancisco(x) | LosAngeles(x) | SanDiego(x)))", "all x.((City(x) & InCalifornia(x)) -> (SanFrance(x) | Los Angeles(x) | SanDiego(x)))", "all x.((City(x) & InterestIn(x,SanFrancisco) & InterestIn(x,Los Angeles) & InterestIn(x,SanDiego)) -> InterestIn(x,SanFrancisco))", "all x.((City(x) & InterestIn(x,SanFrancisco) & InterestIn(x,Los Angeles) & InterestIn(x,SanDistrict)) -> InterestIn(x,SanFrancisco))", "all x.((City(x) & InterestedIn(x)) -> (SanFrancisco(x) | Los Angeles(x) | SanDiego(x)))", "all x.((City(x) & Interest(x)) -> (SanFernando(x) | Los Angeles(x) | SanDiego(x)))", "all x.((City(x) & Interest(x)) -> (SanFrancisco(x) | Los Angeles(x) | SanDecline(x)))", "all x.((City(x) & Interest(x)) -> (SanFrancisco(x) | Los Angeles(x) | SanDelco(x)))"]}
{"id": "folio_train_1066", "nl": "Cities in Florida that they are interested in are Orlando and Miami.", "fol": "all x.(((IsOrlando(x) | IsMiami(x)) & IsInFlorida(x)) -> DesiresTravelPlan(x))", "prediction": ["all x.((City(x) & Interest(x)) -> (Orlando(x) | Miami(x)))", "all x.((City(x) & InterestIn(x)) -> (Orlando(x) | Miami(x)))", "all x.((City(x) & In(x,Florida)) -> (Orlando(x) | Miami(x)))", "all x.((City(x) & Florida(x)) -> (Orlando(x) | Miami(x)))", "all x y.((City(x) & City(y) & Interest(x,y)) -> (Orlando(x) | Miami(x)))", "all x.((City(x) & Florida(x) & Interest(x)) -> (Orlando(x) | Miami(x)))", "all x.((City(x) & InterestIn(x,Florida)) -> (Orlando(x) | Miami(x)))", "all x.((City(x) & Interest(x)) -> (Orlando(x) | Miami(x)))", "all x.((City(x) & Orlando(x) & Miami(x)) -> Interest(x))", "all x.((City(x) & InFL(x)) -> (Orlando(x) | Miami(x)))", "all x.((City(x) & InterestIn(x,Orlando) & InterestIn(x,Miami)) -> InterestIn(x,Florida))", "all x.((City(x) & InterestIn(x,Orlando) & InterestIn(x,Miami)) -> InterestIn(x,Orlando))", "all x.((City(x) & Orlando(x) & Miami(x)) -> InterestdIn(x))", "all x.((City(x) & InterestIn(x,Orlando)) -> InterestIn(x,Miami))", "all x.((City(x) & InterestIn(x,Orlando) & InterestIn(x,Miami)) -> InterestIn(x,Miami))", "all x.((City(x) & Orlando(x) & Miami(x)) -> InterestIn(x))"]}
{"id": "folio_train_1067", "nl": "Mr. Smith has been to two cities in California.", "fol": "VisitedCaliforniaCity(MrSmith,Two)", "prediction": ["-exists x.(Mr.Smith(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x))", "-exists x.(Mr.Smith(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x))", "-exists x.(Mr.Smith(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x))", "-exists x.(Mr.Smith(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x)", "-exists x.(Mr.Smith(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x))", "-exists x.(Mr.Smith(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x))", "(City(Mr.Smith) & City(Mr.Smith) & City(Mr.Smith) & City(Mr.Smith) & City(Mr.Smith) & City(Mr.Smith) & City(Mr.Smith) & City(Mr.Smith) & City(Mr.Smith) & City(Mr.Smith) & City(Mr.Smith) & City(Mr.Smith) & City(Mr.Smith)", "(City(Mr.Smith) & City(Mr.Smith) & City(Mr.Smith) & City(Mr.Smith) & City(Mr.Smith) & City(Mr.Smith) & City(Mr.Smith) & City(Mr.Smith) & City(Mr.Smith) & City(Mr.Smith) & City(Mr.Smith) & City(Mr.Smith))", "(City(Mr.Smith) & City(Mr.Smith) & City(Mr.Smith) & City(Mr.Smith) & City(Mr.Smith) & City(Mr.Smith) & City(Mr.Smith) & City(Mr.Smith) & City(Mr.Smith) & City(Mr.Smith) & City(Mr.Smith) & City(Mr.Smith) & City(Mr.Smith", "-exists x.(Mr.Smith(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x))", "-exists x.(Mr.Smith(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x)", "(City(Mr.Smith) & City(Mr.Smith) & City(Mr.Smith) & City(Mr.Smith) & City(Mr.Smith) & City(Mr.Smith) & City(Mr.Smith) & City(Mr.Smith) & City(Mr.Smith) & City(Mr.Smith) & City(Mr.Smith))", "-exists x.(Mr.Smith(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x))", "-exists x.(Mr.Smith(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x))", "-exists x.(Mr.Smith(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x)", "-exists x.(Mr.Smith(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x) & City(x))"]}
{"id": "folio_train_1068", "nl": "Mrs. Smith has been to one city in Florida.", "fol": "VisitedFloridaCity(MrsSmith,One)", "prediction": ["all x y.((Ms.Smith(x) & City(y) & Florida(y)) -> BeenTo(x,y))", "all x y.((Ms.Smith(x) & City(y) & Florida(y)) -> Visited(x,y))", "all x y.((Mrs.Smith(x) & City(y) & Florida(y)) -> BeenTo(x,y))", "all x y.((Mrs.Smith(x) & City(y) & Florida(y)) -> Visited(x,y))", "all x y.((Mrs.Smith(x) & City(y)) -> BeenTo(x,y))", "all x y.((Ms.Smith(x) & City(y)) -> BeenTo(x,y))", "all x.(Ms.Smith(x) -> exists y.(City(y) & In(x,y))))", "all x y z.((Mrs.Smith(x) & City(y) & City(z) & Florida(y)) -> BeenTo(x,y,z))", "all x y z.((Mrs.Smith(x) & City(y) & City(z) & Florida(y)) -> Visited(x,y,z))", "all x y.((Ms.Smith(x) & City(y)) -> InFlorida(x,y))", "all x y z.((Mrs.Smith(x) & City(y) & City(z)) -> BeenTo(x,y,z))", "all x y.((Ms.Smith(x) & City(y)) -> Visited(x,y))", "all x y.((Mrs.Smith(x) & City(y)) -> Visited(x,y))", "all x y z.((Ms.Smith(x) & City(y) & City(z) & Florida(y)) -> BeenTo(x,y,z))", "all x y z.((Ms.Smith(x) & City(y) & City(z) & Florida(y)) -> Visited(x,y,z))", "all x y z.((Mrs.Smith(x) & City(y) & City(z) & Florida(z)) -> BeenTo(x,y,z))"]}
{"id": "folio_train_1069", "nl": "Mr. Smith has been to San Francisco.", "fol": "IsSanFrancisco(MrSmith)", "prediction": ["All x.(Mr.Smith(x) -> SanFrancisco(x))", "all x.(Mr.Smith(x) -> SanFrancisco(x))", "All x.(Mr.Smith(x) -> SanFernando(x))", "all x.(Mr.Smith(x) -> SanFernando(x))", "all x.(Mr.Smith(x) -> HasBeenToSanFrancisco(x))", "-(Mr.Smith(Mr.Smith) & SanFrancisco(Mr.Smith))", "all x.(Mr.Smith(x) -> WasToSanFrancisco(x))", "(Mr.Smith(Mr.Smith) & SanFrancisco(Mr.Smith))", "all x.(Mr.Smith(x) -> HasBeenTo(x,SanFrancisco))", "all x.(Mr.Smith(x) -> HasBeenToSanFrankfort(x))", "all x.(Mr.Smith(x) -> HasBeenToSanFernando(x))", "(Son(Mr.Smith) & SanFrancisco(Mr.Smith))", "(Son(Mr.Smith) & SanFernando(Mr.Smith))", "all x.(Mr.Smith(x) -> HasBeenTo(x,SanFernando))", "Mr.Smith has been to San Francisco.", "all x.(Mr.Smith(x) -> SanFrancois(x))"]}
{"id": "folio_train_1070", "nl": "They have at leat one candidate city in Florida to visit.", "fol": "exists x.(CandidateCity(x) & IsInFlorida(x) & DesiresTravelPlan(x))", "prediction": ["all x y.((City(x) & CandidateCity(y)) -> Visits(x,y))", "all x y z.((City(x) & CandidateCity(y) & Florida(z)) -> Visits(x,y,z))", "all x y.((City(x) & Candidate(y)) -> Visits(x,y))", "all x y.((CandidateCity(x) & City(y)) -> Visits(x,y))", "all x y.((City(x) & CandidateCity(y) & Florida(y)) -> Visits(x,y))", "all x y.((City(x) & Candidate(y) & Florida(y)) -> Visits(x,y))", "all x y z.((City(x) & Candidate(y) & Florida(z)) -> Visits(x,y,z))", "all x y.((City(x) & CandidateCity(y) & Florida(y)) -> ToVisit(x,y))", "all x y z.((City(x) & Candidate(y) & City(z)) -> Visits(x,y,z))", "all x y z.((City(x) & CandidateCity(y) & Florida(z)) -> ToVisit(x,y,z))", "all x.((City(x) & Candidate(x,Fla.)) -> Visits(x,Fla.))", "all x y z.((City(x) & CandidateCity(y) & Florida(z)) -> Visit(x,y,z))", "all x.(CandidateCity(x) -> Visits(x))", "all x.((City(x) & CandidateCity(x)) -> Visits(x))", "all x y.((City(x) & CandidateCity(y)) -> Visit(x,y))", "all x.((City(x) & Candidate(x,Florida)) -> Visits(x,Florida))"]}
{"id": "folio_train_1071", "nl": "Everything is either big or small.", "fol": "all x.((IsBig(x) & -IsSmall(x)) | (-IsBig(x) & IsSmall(x)))", "prediction": ["all x.((Big(x) | Small(x)) -> Everything(x))", "all x.(Big(x) | Small(x))", "all x.((Big(x) | Small(x)) -> (Big(x) | Small(x)))", "all x.((Big(x) | Small(x)) -> Big(x))", "all x.(Element(x) -> (Big(x) | Small(x)))", "all x.((Big(x) | Small(x)) -> Small(x))", "all x.(Small(x) -> (Big(x) | Small(x)))", "all x.((Element(x) & (Big(x) | Small(x))) -> (Big(x) | Small(x)))", "all x.(Everything(x) -> (Big(x) | Small(x)))", "all x.(IsBig(x) | IsSmall(x))", "all x.((Element(x) & (Big(x) | Small(x))) -> Small(x))", "all x.((Big(x) | Small(x)) -> Is(x))", "all x.((Big(x) | Small(x)) -> AllOf(x))", "all x.((Big(x) | Small(x)) -> -Big(x))", "all x.((Element(x) & (Big(x) | Small(x))) -> (Large(x) | Small(x)))", "all x.((Big(x) | Small(x)) -> (All y.(Big(y) | Small(y))))"]}
{"id": "folio_train_1072", "nl": "All big things are heavy. ", "fol": "all x.(IsBig(x) -> IsHeavy(x))", "prediction": ["all x.(BigThing(x) -> Heavy(x))", "all x.((BigThing(x) & Heavy(x)) -> Heavy(x))", "all x.((BigThing(x) & Heavy(x)) -> BigThing(x))", "all x.(LargeThing(x) -> Heavy(x))", "all x.(BigThing(x) -> Heavy(x))", "all x.((BigThing(x) & Heavy(x)) -> Big(x))", "all x y.((BigThing(x) & Heavy(y)) -> Heavy(x))", "all x.(Groove(x) -> Heavy(x))", "all x.(GasThing(x) -> Heavy(x))", "all x.(BigTree(x) -> Heavy(x))", "all x.(BadThing(x) -> Heavy(x))", "all x.(BigTen(x) -> Heavy(x))", "all x.((BigThing(x) & Heavy(x)) -> Is(x,y))", "all x.(BigThing(x) -> Heavy(x))", "all x.((BigThing(x) & Heavy(x)) -> BigThan(x))", "all x.(BigTask(x) -> Heavy(x))"]}
{"id": "folio_train_1073", "nl": "All small things are light. ", "fol": "all x.(IsSmall(x) -> IsLight(x))", "prediction": ["all x.(SmallThing(x) -> Light(x))", "all x.(Small(x) -> Light(x))", "all x.((SmallThing(x) & Light(x)) -> Small(x))", "all x.(SmallTree(x) -> Light(x))", "all x.(SmallTen(x) -> Light(x))", "all x y.((SmallThing(x) & Small(y)) -> Light(x))", "all x.((SmallThing(x) & Light(x)) -> SmallThing(x))", "all x.(SmallThing(x) -> Light(x))", "all x.(SmallItem(x) -> Light(x))", "all x y.((SmallThing(x) & Light(y)) -> Small(x))", "all x y.((SmallThing(x) & Light(y)) -> Light(x))", "all x.((SmallThing(x) & Light(x)) -> Light(x))", "all x.(SmallTeacher(x) -> Light(x))", "all x.(SmallToy(x) -> Light(x))", "all x.(SmallTennis(x) -> Light(x))", "all x.(SmallTend(x) -> Light(x))"]}
{"id": "folio_train_1074", "nl": "All heavy things are still.", "fol": "all x.(IsHeavy(x) -> IsStill(x))", "prediction": ["all x.(HeavyThing(x) -> Still(x))", "all x.(Heavy(x) -> Still(x))", "all x y.((HeavyThing(x) & HeavyThing(y)) -> Still(x))", "all x.((HeavyThing(x) & Still(x)) -> HeavyThing(x))", "all x.(LightThing(x) -> Still(x))", "all x.(HasHeavyThing(x) -> Still(x))", "all x.(HeavyTHing(x) -> Still(x))", "all x y.((HeavyThing(x) & Heavy(y)) -> Still(x))", "all x.((HeavyThing(x) & Still(x)) -> Heavy(x))", "all x.((HeavyThing(x) & Still(x)) -> AllHeavyThings(x))", "all x.(HeavyThan(x) -> Still(x))", "all x.(HeavyTree(x) -> Still(x))", "all x.(HeavyTen(x) -> Still(x))", "all x.(HeavyThing(x) -> Still(x))", "all x y.((HeavyThing(x) & HeavyThing(y)) -> Still(x,y))", "(all x.(HeavyThing(x) -> Still(x)))"]}
{"id": "folio_train_1075", "nl": "All light things are unstable.", "fol": "all x.(IsLight(x) -> IsUnstable(x))", "prediction": ["all x.(LightThing(x) -> Instabil(x))", "all x.(LightThing(x) -> Unstable(x))", "all x.(LightThing(x) -> Instable(x))", "all x.(LightThing(x) -> Instabile(x))", "all x.(Light(x) -> Instabil(x))", "all x.(Light(x) -> Unstable(x))", "all x y.((LightThing(x) & LightThing(y)) -> Unstable(x))", "all x y.((LightThing(x) & LightThing(y)) -> Instabil(x))", "all x.(LightThing(x) -> Stable(x))", "all x y.((LightThing(x) & LightThing(y)) -> Instabil(x,y))", "all x.((LightThing(x) & Instabil(x)) -> Instable(x))", "all x.(Light(x) -> Instable(x))", "all x y.((LightThing(x) & LightThing(y)) -> Instable(x))", "all x y.((LightThing(x) & LightThing(y)) -> Instabile(x))", "all x y.((LightThing(x) & LightThing(y)) -> Unstable(x,y))", "all x.((LightThing(x) & Instabil(x)) -> Instabil(x))"]}
{"id": "folio_train_1076", "nl": "All unstable things are changing.", "fol": "all x.(IsUnstable(x) -> IsChanging(x))", "prediction": ["all x.(InstabileThing(x) -> Changes(x))", "all x.(UnstableThing(x) -> Changes(x))", "all x.(Unstable(x) -> Changes(x))", "all x.(InstabileThing(x) -> Change(x))", "all x.(Instabile(x) -> Changes(x))", "all x.(InstableThing(x) -> Changes(x))", "all x.(UnstableThing(x) -> Change(x))", "all x.(UnstabileThing(x) -> Changes(x))", "all x.(InstabileThing(x) -> Changed(x))", "all x.(UnstableThing(x) -> Changed(x))", "all x.(InstabilThing(x) -> Changes(x))", "all x.(InstabilElement(x) -> Changes(x))", "all x.(Instable(x) -> Changes(x))", "all x.(StableThing(x) -> Changes(x))", "all x.(Instability(x) -> Changes(x))", "all x.(Unstable(x) -> Change(x))"]}
{"id": "folio_train_1077", "nl": "All unstable things are kinetic. ", "fol": "all x.(IsUnstable(x) -> IsKinetic(x))", "prediction": ["all x.(InstabileThing(x) -> Kinetic(x))", "all x.(UnstableThing(x) -> Kinetic(x))", "all x.(Unstable(x) -> Kinetic(x))", "all x.(Instabile(x) -> Kinetic(x))", "all x.(InstableThing(x) -> Kinetic(x))", "all x.(Instable(x) -> Kinetic(x))", "all x.((InstabileThing(x) & Kinetic(x)) -> Instabile(x))", "all x.(Instability(x) -> Kinetic(x))", "all x.((Unstable(x) & Kinetic(x)) -> Unstable(x))", "all x.((UnstableThing(x) & Kinetic(x)) -> Unstable(x))", "all x.(UnstabileThing(x) -> Kinetic(x))", "all x.((UnstableThing(x) & Kinetic(x)) -> Instabile(x))", "all x.((InstabileThing(x) & Kinetic(x)) -> Unstable(x))", "all x.((Unstable(x) & Kinetic(x)) -> Instabile(x))", "all x.(LossfulThing(x) -> Kinetic(x))", "all x.(StableThing(x) -> Kinetic(x))"]}
{"id": "folio_train_1078", "nl": "A bird is not both heavy and still.", "fol": "-(IsHeavy(Bird) & IsStill(Bird))", "prediction": ["all x.(Bird(x) -> -(Heavy(x) & Still(x)))", "all x.(Bird(x) -> -Heavy(x) & Still(x))", "all x.(Bird(x) -> (-Heavy(x) & Still(x)))", "exists x.(Bird(x) & -(Heavy(x) & Still(x)))", "all x.(Bird(x) -> -(Heavy(x) & Still(x)))", "all x.(Bird(x) -> -(Heavy(x) & Still(x))))", "all x.(Bird(x) -> -(Heavy(x) | Still(x)))", "all x.(Bird(x) -> (-Heavy(x) & -Still(x)))", "all x.(Bird(x) -> -(HasHeavy(x) & HasStill(x)))", "exists x.(Bird(x) & -Heavy(x) & Still(x))", "all x.(Bird(x) -> -HasHeavy(x) & HasStill(x))", "all x.(Bird(x) & -(Heavy(x) & Still(x)))", "all x.(Bird(x) -> -(Heavy(x) | Still(x))))", "exists x.(Bird(x) & -(Heavy(x) & Still(x))))", "all x.(Bird(x) -> -Light(x) & Still(x))", "all x.(Bird(x) -> -(Light(x) & Still(x)))"]}
{"id": "folio_train_1079", "nl": "A bird is still.", "fol": "IsStill(Bird)", "prediction": ["all x.(Bird(x) -> Still(x))", "exists x.(Bird(x) & Still(x))", "all x.exists y.(Bird(x) & Still(y))", "all x.(Bird(x) -> Still(x))", "all x y.((Bird(x) & Still(y)) -> Bird(x))", "all x y.((Bird(x) & Still(y)) -> Is(x,y))", "all x y.((Bird(x) & Bird(y)) -> Still(x))", "all x y.((Bird(x) & Still(y)) -> (Bird(x) & Still(y)))", "all x y.((Bird(x) & Still(y)) -> (Bird(x) & Still(x)))", "all x y.((Bird(x) & Bird(y)) -> Still(x,y))", "all x.((Bird(x) & Still(x)) -> Bird(x))", "all x y.((Bird(x) & Still(x)) -> Bird(y))", "all x y.((Bird(x) & Still(y)) -> Bird(x,y))", "All x.(Bird(x) -> Still(x))", "all x y.((Bird(x) & Still(y)) -> CanBe(x,y))", "all x y.((Bird(x) & Still(y)) -> Has(x,y))"]}
{"id": "folio_train_1080", "nl": "A bird is not still.", "fol": "-IsStill(Bird)", "prediction": ["all x.(Bird(x) -> -Still(x))", "exists x.(Bird(x) & -Still(x))", "all x.(Bird(x) -> -Still(x))", "all x y.((Bird(x) & Bird(y)) -> -Still(x))", "all x.(Bird(x) -> -(Still(x) | Still(x))))", "all x y.((Bird(x) & Bird(y)) -> -Still(x,y))", "all x.(Bird(x) -> -(Still(x) | Still(x)))", "all x.(Bird(x) -> -IsStill(x))", "All x.(Bird(x) -> -Still(x))", "all x.(Bird(x) -> (-Still(x)))", "all x.(Bird(x) -> NotStill(x))", "all x.exists y.(Bird(x) & Still(y) & -Still(x))", "all x y.((Bird(x) & Bird(y)) -> -Still(y))", "all x.(Bird(x) -> -(Still(x) & -Still(x)))", "all x.(Bird(x) -> -Situated(x))", "all x.exists y.(Bird(x) & Still(y) & -Still(x,y))"]}
{"id": "folio_train_1081", "nl": "A bird is kinetic and changing.", "fol": "(IsKinetic(Bird) & IsChanging(Bird))", "prediction": ["all x.(Bird(x) -> (Kinetic(x) & Changes(x)))", "all x.(Bird(x) -> (Kinetic(x) & Changing(x)))", "exists x.(Bird(x) & Kinetic(x) & Changes(x))", "all x.(Bird(x) -> (Kinetic(x) & Changes(x)))", "all x.(Bird(x) -> (Kinetic(x) & Changeable(x)))", "all x.(Bird(x) -> (Kinetic(x) & Change(x)))", "all x.(Bird(x) -> (Kinetic(x) & Changeing(x)))", "all x.(Bird(x) -> (Kinetic(x) & Changeling(x)))", "all x.(Bird(x) -> (Kinetic(x) & Changed(x)))", "all x.(Bird(x) -> (Kinematic(x) & Changes(x)))", "all x.(Bird(x) -> (Kinetic(x) & Shifting(x)))", "all x.(Bird(x) -> (Kinetic(x) & Challenging(x)))", "all x.(Bird(x) -> (Kinetic(x) & CanChange(x)))", "all x y.((Bird(x) & Kinetic(y)) -> Changes(x,y))", "all x y.((Bird(x) & Kinetic(y)) -> Changes(x))", "all x.(Bird(x) -> Kinetic(x) & Changes(x))"]}
{"id": "folio_train_1082", "nl": "A bird is kinetic or changing.", "fol": "(IsKinetic(Bird) | IsChanging(Bird))", "prediction": ["all x.(Bird(x) -> (Kinetic(x) | Changes(x)))", "all x.(Bird(x) -> (Kinetic(x) | Changeing(x)))", "all x.(Bird(x) -> (Kinetic(x) | Changed(x)))", "all x.(Bird(x) -> (Kinetic(x) | Changing(x)))", "all x.(Bird(x) -> (Kinetic(x) | Changeling(x)))", "all x.(Bird(x) -> (Kinetic(x) | Changeable(x)))", "all x.(Bird(x) -> (Kinetic(x) | Challenging(x)))", "exists x.(Bird(x) & (Kinetic(x) | Changes(x)))", "all x.(Bird(x) -> (Kinetic(x) | Change(x)))", "all x.(Bird(x) -> (Kinetic(x) | Changes(x)))", "all x.(Bird(x) -> (Kinetic(x) | Shifting(x)))", "all x.(Bird(x) -> (Kinetic(x) | Waking(x)))", "exists x.(Bird(x) & (Kinetic(x) | Changeing(x)))", "exists x.(Bird(x) & (Kinetic(x) | Changed(x)))", "all x.(Bird(x) -> (Kinematic(x) | Changes(x)))", "exists x.(Bird(x) & (Kinetic(x) | Changing(x)))"]}
{"id": "folio_train_1083", "nl": "A bird is either kinetic or changing, but not both.", "fol": "((IsKinetic(Bird) & -IsChanging(Bird)) | (-IsKinetic(Bird) & IsChanging(Bird)))", "prediction": ["all x.(Bird(x) -> ((Kinetic(x) | Changeable(x)) & -(Kinetic(x) & Changeable(x))))", "all x.(Bird(x) -> ((Kinetic(x) | Changeling(x)) & -(Kinetic(x) & Changeling(x))))", "all x.(Bird(x) -> ((Kinetic(x) | Changeable(x)) & -(Kinetic(x) & Changeable(x)))))", "all x.(Bird(x) -> ((Kinetic(x) | Changeing(x)) & -(Kinetic(x) & Changeing(x))))", "all x.(Bird(x) -> ((Kinetic(x) | Changed(x)) & -(Kinetic(x) & Changed(x)))))", "all x.(Bird(x) -> ((Kinetic(x) | Changed(x)) & -(Kinetic(x) & Changed(x))))", "all x.(Bird(x) -> ((Kinetic(x) | Changeing(x)) & -(Kinetic(x) & Changeing(x)))))", "all x.(Bird(x) -> ((Kinetic(x) | Changeling(x)) & -(Kinetic(x) & Changeling(x)))))", "all x.(Bird(x) -> ((Kinetic(x) | Challenging(x)) & -(Kinetic(x) & Challenging(x))))", "exists x.(Bird(x) & ((Kinetic(x) & -Change(x)) | (-Kinetic(x) & Change(x)))))", "all x.(Bird(x) -> ((Kinetic(x) & -Change(x)) | (-Kinetic(x) & Change(x)))))", "all x.(Bird(x) -> ((Kinetic(x) | Changes(x)) & -(Kinetic(x) & Changes(x))))", "all x.(Bird(x) -> ((Kinetic(x) | Challenging(x)) & -(Kinetic(x) & Challenging(x)))))", "all x.(Bird(x) -> ((Kinetic(x) | Changing(x)) & -(Kinetic(x) & Changing(x))))", "all x.(Bird(x) -> ((Kinetic(x) | Changed(x))) & -(Kinetic(x) & Changed(x))))", "all x.(Bird(x) -> ((Kinetic(x) | Changes(x)) & -(Kinetic(x) & Changes(x)))))"]}
{"id": "folio_train_1084", "nl": "If a bird is small or still, then the bird is either kinetic or changing.", "fol": "((IsSmall(Bird) | IsStill(Bird)) -> (IsKinetic(Bird) | IsChanging(Bird)))", "prediction": ["all x.((Bird(x) & (Small(x) | Still(x))) -> (Kinetic(x) | Changed(x)))", "all x.((Bird(x) & (Small(x) | Still(x))) -> (Kinetic(x) | Changing(x)))", "all x.((Bird(x) & (Small(x) | Still(x))) -> (Kinetic(x) | Changeling(x)))", "all x.((Bird(x) & (Small(x) | Still(x))) -> (Kinetic(x) | Changeing(x)))", "all x.((Bird(x) & (Small(x) | Still(x))) -> (Kinetic(x) | Challenging(x)))", "all x.((Bird(x) & (Small(x) | Still(x))) -> (Kinetic(x) | Changes(x)))", "all x.((Bird(x) & (Small(x) | Still(x))) -> (Kinetic(x) | Changeable(x)))", "all x.((Bird(x) & (Small(x) | Still(x))) -> (KineticBird(x) | ChangedBird(x)))", "all x.((Bird(x) & (Small(x) | Still(x))) -> (KineticBird(x) | ChangelingBird(x)))", "all x.((Bird(x) & (Small(x) | Still(x))) -> (Kinetic(x) | Shifting(x)))", "all x.((Bird(x) & (Small(x) | Still(x))) -> (Kinetic(x) | Changed(x))))", "all x.((Bird(x) & (Small(x) | Still(x))) -> (KineticBird(x) | ChangingBird(x)))", "all x.((Bird(x) & Small(x)) | Still(x)) -> (Kinetic(x) | Changed(x)))", "all x.((Bird(x) & (Small(x) | Still(x))) -> (Kinetic(x) | Changing(x)))", "all x.((Bird(x) & (Small(x) | Still(x))) -> (Kinetic(x) | Waking(x)))", "all x.((Bird(x) & Small(x)) | Still(x)) -> (Kinetic(x) | Changing(x)))"]}
{"id": "folio_train_1085", "nl": "DI Ray is a police procedural television series.", "fol": "IsTelevisionSeries(DiRay)", "prediction": ["all x.(DiRay(x) -> PoliceProceduralTVSeries(x))", "all x.(DiRay(x) -> PoliceProceduralSeries(x))", "all x.(DiRay(x) -> PoliceProceduralTelevisionSeries(x))", "all x.(DiRay(x) -> (PoliceProceduralTVSeries(x) & PoliceProceduralTVSeries(x)))", "all x.(DiRay(x) -> PoliceProceduralTelevision(x))", "all x.(DiRay(x) -> (PoliceProceduralSeries(x) & PoliceProceduralSeries(x)))", "all x.(DiRay(x) -> (PoliceProceduralTVSeries(x) & PoliceProceduralSeries(x)))", "all x.(DiRay(x) -> (PoliceProceduralTelevisionSeries(x) & PoliceProceduralSeries(x)))", "all x.(DiRay(x) -> (PoliceProceduralTVSeries(x) & ProceduralTVSeries(x)))", "all x.(DiRay(x) -> (PoliceProceduralTVSeries(x) & PoliceProcedural(x)))", "all x.(DiRay(x) -> (PoliceProceduralTelevisionSeries(x) & PoliceProceduralTVSeries(x)))", "all x.(DiRay(x) -> (PoliceProceduralTVSeries(x) & -PoliceProceduralTVSeries(x)))", "all x.(DIRay(x) -> PoliceProceduralTVSeries(x))", "all x.(DiRay(x) -> (PoliceProceduralTVSeries(x) & -PoliceProceduralSeries(x)))", "all x.(DiRay(x) -> (PoliceProceduralTelevisionSeries(x) & ProceduralTVSeries(x)))", "all x.(DiRay(x) -> (PoliceProceduralSeries(x) & -PoliceProceduralSeries(x)))"]}
{"id": "folio_train_1086", "nl": "DI Ray was created and written by Maya Sondhi.", "fol": "(CreatedBy(Maya,DiRay) & WrittenBy(Maya,DiRay))", "prediction": ["all x.(DiRay(x) -> (CreatedByMayaSondhi(x) & WrittenByMayaSondhi(x)))", "All x.(DiRay(x) -> (CreatedByMayaSondhi(x) & WrittenByMayaSondhi(x)))", "all x.(DIRay(x) -> (CreatedByMayaSondhi(x) & WrittenByMayaSondhi(x)))", "all x y.((DiRay(x) & MayaSondhi(y)) -> (CreatedBy(x,y) & WrittenBy(x,y)))", "ALL x.(DiRay(x) -> (CreatedByMayaSondhi(x) & WrittenByMayaSondhi(x)))", "all x.(DiRay(x) -> (CreatedBy(x,MayaSondhi) & WrittenBy(x,MayaSondhi)))", "all x y.((DiRay(x) & MayaSondhi(y)) -> CreatedAndWrittenBy(x,y))", "all x.(DiRay(x) -> (CreatedByMayaSondhi(x) & WrittenByMayaSondhi(x)))", "(CreatedByMayaSondhi(DIRay) & WrittenByMayaSondhi(DIRay))", "(CreatedByMayaSondhi(DiRay) & WrittenByMayaSondhi(DiRay))", "all x y.((DiRay(x) & MayaSondhi(y)) -> (Created(x,y) & WrittenBy(x,y)))", "(CreatedByMayaSondhi(diRay) & WrittenByMayaSondhi(diRay))", "all x.(DiRay(x) -> (CreatedByMayaSondhi(x) & WrittenBy(x)))", "all x.(DiRay(x) -> (CreatedByMayaSondhi(x) & WrittenByDiRay(x)))", "all x y.((DiRay(x) & MayaSondhi(y)) -> (Created(x,y) & Written(x,y)))", "all x y.((DiRay(x) & MayaSondhi(y)) -> (CreatedAndWrittenBy(x,y)))"]}
{"id": "folio_train_1087", "nl": "DI Ray was produced by Jed Mercurio.", "fol": "ProducedBy(Jed,DiRay)", "prediction": ["all x.(DiRay(x) -> ProducedByJedMercurio(x))", "all x y.((DiRay(x) & JedMercurio(y)) -> ProducedBy(x,y))", "all x y.((DiRay(x) & JedMercury(y)) -> ProducedBy(x,y))", "All x.(DiRay(x) -> ProducedByJedMercurio(x))", "ALL x.(DiRay(x) -> ProducedByJedMercurio(x))", "all x.(DiRay(x) -> ProducedByJedMercury(x))", "(ProducedByJedMercurio(DIRay)", "(ProducedBy(DiRay) & JedMercurio(DiRay))", "all x.(DIRay(x) -> ProducedByJedMercurio(x))", "all x.(DiRay(x) -> (ProducedByJedMercurio(x) & ProducedByJedMercurio(x)))", "ALL x.(DIRay(x) -> ProducedByJedMercurio(x))", "(ProducedByJedMercurio(DiRay))", "(ProducedBy(DIRay) & JedMercurio(DIRay))", "all x.(DiRay(x) -> (ProducedByJedMercurio(x) | ProducedByJedMercurio(x)))", "All x.(DiRay(x) -> ProducedByJedMercury(x))", "all x.(DiRay(x) -> (ProducedByJedMercurio(x)))"]}
{"id": "folio_train_1088", "nl": "Maya Sondhi and Jed Mercurio are both British.", "fol": "(IsBritish(Maya) & IsBritish(Jed))", "prediction": ["(British(MayaSondhi) & British(JedMercurio))", "all x.((MayaSondhi(x) & JedMercurio(x)) -> British(x))", "all x.((MayaSondhi(x) | JedMercurio(x)) -> British(x))", "all x y.((MayaSondhi(x) & JedMercurio(y)) -> British(x))", "(British(MayaSondhi) & British(JedMercury))", "all x.((MayaSondhi(x) & JedMercury(x)) -> British(x))", "all x y.((MayaSondhi(x) & JedMercurio(y)) -> (British(x) & British(y)))", "((MayaSondhi(Maya) | JedMercurio(Maya))) & British(MayaSondhi(Maya) & British(JedMercurio))", "All x.((MayaSondhi(x) & JedMercurio(x)) -> British(x))", "all x y.((MayaSondhi(x) & JedMercury(y)) -> British(x))", "all x y.((MayaSondhi(x) & JedMercurio(y)) -> (British(x) | British(y)))", "all x y.((MayaSondhi(x) & JedMercury(y)) -> (British(x) & British(y)))", "all x.((MayaSondhi(x) | JedMercury(x)) -> British(x))", "(BritishBritish(MayaSondhi) & British(JedMercurio))", "((MayaSondhi(x) & JedMercurio(x)) -> British(x))", "all x.(British(x) -> (MayaSondhi(x) | JedMercurio(x)))"]}
{"id": "folio_train_1089", "nl": "DI Ray was created by a Brit.", "fol": "exists x.(CreatedBy(x,DiRay) & IsBritish(x))", "prediction": ["all x.(DiRay(x) -> CreatedByBritish(x))", "all x y.((DiRay(x) & Brit(y)) -> CreatedBy(x,y))", "all x y.((British(x) & Brit(y)) -> CreatedBy(x,y))", "all x.(DiRay(x) -> (CreatedByBritish(x) & CreatedByBritish(x)))", "all x y.((British(x) & DIRay(y)) -> CreatedBy(y,x))", "all x y.((DIRay(x) & Brit(y)) -> CreatedBy(x,y))", "all x y.((British(x) & DIRay(y)) -> CreatedBy(x,y))", "all x.(DiRay(x) -> (CreatedBy(x,British) & CreatedBy(x,British)))", "all x.((British(x) & CreatedBy(x,DiRay)) -> CreatedBy(x,DiRay))", "all x.((British(x) & CreatedBy(x,DIRay)) -> CreatedBy(x,DIRay))", "all x.(DiRay(x) -> CreatedBy(x,British))", "all x.(DIRay(x) -> CreatedByBritish(x))", "all x.((DiRay(x) & Brit(x)) -> CreatedBy(x))", "all x.((British(x) & CreatedBy(x,DiRay)) -> CreatedBy(x,British(x))", "all x.(DiRay(x) -> CreatedByBritish(x))", "all x.(DiRay(x) -> (CreatedByBritish(x) & CreatedBy(x,British)))"]}
{"id": "folio_train_1090", "nl": "Some Brit produced a television series.", "fol": "exists x y.(IsBritish(x) & ProducedBy(x,y) & IsTelevisionSeries(y))", "prediction": ["exists x.(British(x) & ProducedTelevisionSeries(x))", "exists x.(British(x) & ProducesTelevisionSeries(x))", "exists x.(British(x) & ProducedTVSeries(x))", "exists x y.(British(x) & TelevisionSeries(y) & ProducedBy(x,y))", "exists x.(British(x) & ProducesTVSeries(x))", "exists x.(British(x) & TelevisionSeries(x))", "exists x y.(British(x) & TelevisionSeries(y) & Produced(x,y))", "exists x.(British(x) & Brit(x) & ProducedTelevisionSeries(x))", "exists x y.(British(x) & TelevisionSeries(y) & Produces(x,y))", "exists x.(British(x) & producedTelevisionSeries(x))", "exists x.(British(x) & ProducedTelevisionSerial(x))", "exists x.(British(x) & ProducedTelevisionSequel(x))", "exists x.(BritishBritish(x) & ProducedTelevisionSeries(x))", "exists x.(British(x) & ProducedTelevisionShow(x))", "exists x.(British(x) & ProducesTelevisionSerial(x))", "exists x.(British(x) & ProducesTelevisionSequel(x))"]}
{"id": "folio_train_1091", "nl": "All men are human.", "fol": "all x.(IsMan(x) -> IsHuman(x))", "prediction": ["all x.(Men(x) -> Human(x))", "all x.(Man(x) -> Human(x))", "all x.exists y.(Men(x) & Human(y))", "all x.(Homme(x) -> Human(x))", "all x y.((Men(x) & Human(y)) -> Human(x))", "all x.((Men(x) & Human(x)) -> Human(x))", "all x.(Human(x) -> Human(x))", "all x.((Man(x) & Human(x)) -> Human(x))", "all x.(Men(x) -> Human(x))", "all x.exists y.(Man(x) & Human(y))", "exists x.(Men(x) & Human(x))", "all x.((Men(x) & Human(x)) -> Men(x))", "all x y.((Men(x) & Human(y)) -> Is(x,y))", "all x.(HasHuman(x) -> Human(x))", "all x y.((Men(x) & Human(y)) -> Human(x,y))", "all x.((Men(x) & Human(x)) -> Is(x,y))"]}
{"id": "folio_train_1092", "nl": "All gentlemen are men.", "fol": "all x.(IsGentleman(x) -> IsMan(x))", "prediction": ["all x.(Gentleman(x) -> Men(x))", "all x.(Gentlemen(x) -> Men(x))", "all x.(Groom(x) -> Men(x))", "all x.(Gentleman(x) -> Man(x))", "all x.( Gentleman(x) -> Men(x))", "all x.(Men(x) -> Gentlemen(x))", "all x.(Gentleman(x) -> Men(x))", "all x.(Men(x) -> Gentleman(x))", "all x.(Gentlemen(x) -> Men(x))", "all x.(Gentlemen(x) -> Man(x))", "(all x.(Gentleman(x) -> Men(x))", "all x.( Gentlemen(x) -> Men(x))", "all x.(GloriousMan(x) -> Men(x))", "all x.(Groomer(x) -> Men(x))", "all x.(Leader(x) -> Men(x))", "(all x.(Gentleman(x) -> Men(x)))"]}
{"id": "folio_train_1093", "nl": "All lawyers are gentlemen.", "fol": "all x.(IsLawyer(x) -> IsGentleman(x))", "prediction": ["all x.(Lawyer(x) -> Gentlemen(x))", "all x.(Lawyer(x) -> Gentleman(x))", "all x.(Legal(x) -> Gentlemen(x))", "all x.(Legal(x) -> Gentleman(x))", "all x.(Lawyer(x) -> Gentleman(x))", "all x.(Lawyer(x) -> Gentlemen(x))", "all x y.((Lawyer(x) & Gentleman(y)) -> Gentleman(x))", "all x y.((Lawyer(x) & Gentleman(y)) -> Gentlemen(x))", "all x.(Litigation(x) -> Gentlemen(x))", "(all x.(Lawyer(x) -> Gentleman(x)))", "all x.(Litigator(x) -> Gentleman(x))", "(all x.(Lawyer(x) -> Gentlemen(x))", "(all x.(Lawyer(x) -> Gentleman(x))", "all x.(Litigation(x) -> Gentleman(x))", "(all x.(Lawyer(x) -> Gentlemen(x)))", "all x.(Litigator(x) -> Gentlemen(x))"]}
{"id": "folio_train_1094", "nl": "All women are human.", "fol": "all x.(IsWoman(x) -> IsHuman(x))", "prediction": ["all x.(Female(x) -> Human(x))", "all x.(Woman(x) -> Human(x))", "all x.((Female(x) & Human(x)) -> Human(x))", "all x.exists y.(Female(x) & Human(y))", "all x.(Femme(x) -> Human(x))", "all x.(Feet(x) -> Human(x))", "all x y.((Female(x) & Human(y)) -> Human(x))", "all x.((Female(x) & Human(x)) -> Is(x,y))", "all x.((Female(x) & Human(x)) -> AllOf(x,y))", "all x.(Feel(x) -> Human(x))", "all x.(Feminine(x) -> Human(x))", "all x.(Female(x) -> Human(x))", "all x.((Female(x) & Human(x)) -> (Human(x) | Human(x)))", "all x.(Women(x) -> Human(x))", "all x.((Female(x) & Human(x)) -> -Human(x))", "all x.(Mother(x) -> Human(x))"]}
{"id": "folio_train_1095", "nl": "No sheep are human.", "fol": "all x.(IsSheep(x) -> -IsHuman(x))", "prediction": ["-exists x.(Sheep(x) & Human(x))", "-exists x.(Shoe(x) & Human(x))", "all x.(Sheep(x) -> -Human(x))", "-exists x.(Shark(x) & Human(x))", "(-exists x.(Sheep(x) & Human(x)))", "all x.(Sheep(x) -> Human(x))", "-exists x.(Sheep(x) & Human(x))", "-exists x.(Sheep(x) & Human(x))", "-exists x.(Shadow(x) & Human(x))", "all x.(Shoe(x) -> -Human(x))", "-exists x.(Sheep(x) & -Human(x))", "(exists x.(Sheep(x) & Human(x)))", "-exists x.(Shelf(x) & Human(x))", "-exists x.(Should(x) & Human(x))", "exists x.(Sheep(x) & Human(x))", "all x.(Shark(x) -> -Human(x))"]}
{"id": "folio_train_1096", "nl": "If Mike is not both a human and a sheep, then Mike is either a man or a human.", "fol": "((((-IsHuman(Mike) | -IsSheep(Mike)) -> IsMan(Mike)) & -IsHuman(Mike)) | (-((-IsHuman(Mike) | -IsSheep(Mike)) -> IsMan(Mike)) & IsHuman(Mike)))", "prediction": ["all x.((Mike(x) & -Human(x) & Sheep(x)) -> (Man(x) | Human(x)))", "all x.((Human(x) & Sheep(x)) -> (Man(x) | Human(x)))", "all x.((Mike(x) & -(Human(x) & Sheep(x))) -> (Man(x) | Human(x)))", "all x.((Hunt(x) & Sheep(x)) -> (Man(x) | Human(x)))", "all x.((Mike(x) & -HasHuman(x) & HasSheep(x)) -> (Man(x) | Human(x)))", "all x.((Mike(x) & -(Human(x) & Sheep(x)))) -> (Man(x) | Human(x)))", "all x.((Mike(x) & -(Human(x) & Sheep(x))) -> (Man(x) | Human(x))))", "all x.((Human(x) & Sheep(x) & -Human(x)) -> (Man(x) | Human(x)))", "all x.((Mike(x) & -(Human(x) | Sheep(x))) -> (Man(x) | Human(x)))", "all x.((HasHuman(x) & -HasSheep(x)) -> (Man(x) | Human(x)))", "all x.((Man(x) | Human(x)) & -(Human(x) & Sheep(x))) -> (Man(x) | Human(x)))", "all x.((HasHuman(x) & HasSheep(x)) -> (Man(x) | Human(x)))", "all x.((Human(x) & -Sheep(x)) -> (Man(x) | Human(x)))", "all x.((Mike(x) & -Human(x) & Sheep(x)) -> (Mike(x) | Human(x)))", "all x.(((Human(x) & Sheep(x)) -> (Man(x) | Human(x)))", "all x.((Man(x) | Human(x)) -> -(Human(x) & Sheep(x)))"]}
{"id": "folio_train_1097", "nl": "Mike is a woman.", "fol": "IsWoman(Mike)", "prediction": ["all x.(Mike(x) -> Woman(x))", "exists x.(Mike(x) & Woman(x))", "(Female(Mike) & -Female(Mike))", "(Mike(Mike) -> Woman(Mike))", "All x.(Mike(x) -> Woman(x))", "all x.(Mike(x) -> Woman(x))", "((Mike(Mike) & Woman(Mike)) -> Woman(Mike))", "(Mike(Mike) & Woman(Mike))", "all x.((Mike(x) & Woman(x)) -> Is(x,y))", "(Female(Mike) & Woman(Mike))", "all x.(Mike(x) -> Women(x))", "-(Mike(Mike) & Woman(Mike))", "((Mike(Mike) & Woman(Mike)) -> Female(Mike))", "((Mike(Mike) & Woman(Mike)) -> Is(Mike,Mike))", "(Female(Mike) -> Woman(Mike))", "((Mike(Mike) & Woman(Mike)))"]}
{"id": "folio_train_1098", "nl": "If Mike is a gentleman or a lawyer, then Mike is neither a woman nor a lawyer.", "fol": "((IsGentleman(Mike) | IsLawyer(Mike)) -> (-IsWoman(Mike) & -IsLawyer(Mike)))", "prediction": ["all x.((Mike(x) & Gentleman(x)) | Lawyer(x)) -> -(Mike(x) & Woman(x) & Lawyer(x)))", "all x.((Mike(x) & (Gentleman(x) | Lawyer(x))) -> -(Mike(x) & Woman(x)) & -(Mike(x) & Lawyer(x))))", "all x.((Mike(x) & (Gentleman(x) | Lawyer(x))) -> -(Mike(x) & Woman(x) & Lawyer(x)))", "all x.((Mike(x) & (Gentleman(x) | Lawyer(x))) -> (-Mike(x) & -Mike(x)))", "all x.((Mike(x) & (Gentleman(x) | Lawyer(x))) -> -(Female(x) | Lawyer(x))))", "all x.((Mike(x) & (Gentleman(x) | Lawyer(x))) -> -(Mike(x) & Woman(x) & Lawyer(x))))", "all x.((Mike(x) & Gentleman(x)) | Lawyer(x)) -> (-Mike(x) & -Mike(x)))", "all x.((Mike(x) & Gentleman(x)) | Lawyer(x)) -> -(Mike(x) & Woman(x)) & -(Mike(x) & Lawyer(x))))", "all x.((Mike(x) & (Gentleman(x) | Lawyer(x))) -> (-Female(x) & -Lawyer(x)))", "all x.((Mike(x) & (Gentleman(x) | Lawyer(x))) -> (-Woman(x) & -Lawyer(x)))", "all x.((Mike(x) & (Gentle(x) | Lawyer(x))) -> -(Mike(x) & Woman(x)) & -(Mike(x) & Lawyer(x))))", "all x.((Mike(x) & (Gentleman(x) | Lawyer(x))) -> -(Mike(x) & Woman(x)) & -Lawyer(x)))", "all x.((Mike(x) & (Gentleman(x) | Lawyer(x))) -> -(Woman(x) | Lawyer(x))))", "all x.((Mike(x) & (Gentleman(x) | Lawyer(x))) -> -(Female(x) | Lawyer(x)))", "all x.((Mike(x) & (Gentle(x) | Lawyer(x))) -> -(Mike(x) & Woman(x) & Lawyer(x)))", "all x.((Mike(x) & (Gentleman(x) | Lawyer(x))) -> -(Woman(x) | Lawyer(x)))"]}
{"id": "folio_train_1099", "nl": "If Mike is not both a woman and a lawyer, then Mike is a lawyer.", "fol": "((-IsWoman(Mike) | -IsLawyer(Mike)) -> IsLawyer(Mike))", "prediction": ["all x.((Mike(x) & -(Woman(x) & Lawyer(x))) -> Lawyer(x))", "all x.((Mike(x) & -(Female(x) & Lawyer(x))) -> Lawyer(x))", "all x.((Mike(x) & -Woman(x) & Lawyer(x)) -> Lawyer(x))", "all x.((Mike(x) & -(Mean(x) & Lawyer(x))) -> Lawyer(x))", "all x.((Mike(x) & -Female(x) & Lawyer(x)) -> Lawyer(x))", "all x.((Mike(x) & -(Woman(x) & Lawyer(x)) & -(Woman(x) & Lawyer(x))) -> Lawyer(x))", "all x.((Mike(x) & -(Fraud(x) & Lawyer(x))) -> Lawyer(x))", "all x.((Mike(x) & -(Female(x) & Lawyer(x)) & -(Female(x) & Lawyer(x))) -> Lawyer(x))", "all x.((Mike(x) & -(Female(x) & Lawyer(x)) & -(Female(x) & Lawyer(x)))) -> Lawyer(x))", "all x.((Mike(x) & -(Mean(x) & Woman(x) & Lawyer(x))) -> Lawyer(x))", "all x.((Mike(x) & -(Female(x) & Lawyer(x)) & -(Female(x) & Lawyer(x))) -> Lawyer(x)))", "all x.((Mike(x) & -(Woman(x) | Lawyer(x))) -> Lawyer(x))", "all x.((Mike(x) & -(Mike(x) & Woman(x) & Lawyer(x))) -> Lawyer(x))", "all x.((Mike(x) & -(Woman(x) & Lawyer(x)) & -(Woman(x) & Lawyer(x)))) -> Lawyer(x))", "all x.((Mike(x) & -(Female(x) | Lawyer(x))) -> Lawyer(x))", "all x.((Mike(x) & -(Women(x) & Lawyer(x))) -> Lawyer(x))"]}
{"id": "folio_train_1100", "nl": "Some defenders are centerback.", "fol": "exists x.(DefenderRole(x) & CenterBackPosition(x))", "prediction": ["exists x.(Defender(x) & Centerback(x))", "exists x.(Defendant(x) & Centerback(x))", "exists x.(Defender(x) & CenterBack(x))", "exists x.(Defendant(x) & CenterBack(x))", "exists x.(Defenser(x) & Centerback(x))", "exists x.(Defendant(x) & Centerback(x))", "exists x.(defender(x) & Centerback(x))", "exists x.(Defense(x) & Centerback(x))", "exists x.(Defenser(x) & CenterBack(x))", "exists x.(Defendant(x) & CenterBack(x))", "exists x.(Defending(x) & Centerback(x))", "exists x.(defender(x) & CenterBack(x))", "exists x.(Defense(x) & CenterBack(x))", "exists x.(Defender(x) & Centerback(x))", "exists x.(Defender(x) & Centerback(x))", "exists x.(Defending(x) & CenterBack(x))"]}
{"id": "folio_train_1101", "nl": "Stephen Curry is a centerback.", "fol": "CenterBackPosition(Stephencurry)", "prediction": ["all x.((StephenCurry(x) & Centerback(x)) -> Centerback(x))", "all x.((StanleyCurry(x) & Centerback(x)) -> Centerback(x))", "StephenCurry(StephenCurry) is a Centerback(StephenCurry)", "all x.((StephenCurry(x) & CenterBack(x)) -> Centerback(x))", "all x.((StephenCurry(x) & Centerback(x)) -> CenterBack(x))", "all x.(Curry(x) -> Centerback(x))", "all x.(Centerback(x) -> StephenCurry(x))", "All x.((StephenCurry(x) & Centerback(x)) -> Centerback(x))", "all x.((Curry(x) & Centerback(x)) -> Centerback(x))", "(Centerback(StephenCurry))", "all x.((StephenCurry(x) & Centerback(x)) -> -Centerback(x))", "StephenCurry(StephenCurry) -> Centerback(StephenCurry))", "all x.(Current(x) -> Centerback(x))", "StephenCurry(StephenCurry) & Centerback(StephenCurry))", "all x.((StanleyCurry(x) & CenterBack(x)) -> Centerback(x))", "StephenCurry(StephenCurry) is centerback(StephenCurry)"]}
{"id": "folio_train_1102", "nl": "Stephen Curry is not a centerback and a defender.", "fol": "-(CenterBackPosition(Stephencurry) & DefenderRole(Stephencurry))", "prediction": ["(-(Centerback(StephenCurry) & Defender(StephenCurry)))", "all x.((StephenCurry(x) & -Centerback(x) & -Defendant(x)) -> -Defendant(x))", "all x.((StephenCurry(x) & -Centerback(x) & -Defendant(x)) -> -Defendant(x))", "(-centerback(StephenCurry) & -defender(StephenCurry))", "all x.((StephenCurry(x) & -Centerback(x) & Defender(x)) -> -Centerback(x) & Defender(x))", "all x.(Curry(x) -> (-Centerback(x) & -Defendant(x)))", "all x.(Curry(x) -> (-Centerback(x) & -Defendant(x)))", "-(Centerback(StephenCurry) & Defender(StephenCurry))", "all x.((StephenCurry(x) & -(Centerback(x) & Defender(x))) -> -(Centerback(x) & Defender(x)))", "all x.((StephenCurry(x) & -(Centerback(x) | Defender(x))) -> -(Centerback(x) & Defender(x)))", "(-Centerback(StephenCurry) & -Defendant(StephenCurry))", "all x.((StephenCurry(x) & -Centerback(x) & -Defender(x)) -> -Defendant(x))", "(-Centerback(StephenCurry) & -Defendant(StephenCurry))", "all x.((StephenCurry(x) & -Centerback(x) & -Defendant(x)) -> -Centerback(x))", "(-(Centerback(StephenCurry) & -Defendant(StephenCurry)))", "all x.(Current(x) -> (-Centerback(x) & -Defendant(x)))"]}
{"id": "folio_train_1103", "nl": "If Stephen Curry is not a centerback and a defender, then Stephen Curry is neither a soccer player nor a professional basketball player.", "fol": "(-(CenterBackPosition(Stephencurry) & DefenderRole(Stephencurry)) -> (-SoccerPlayerRole(Stephencurry) & -ProfessionalBasketballPlayerRole(Stephencurry)))", "prediction": ["all x.((StephenCurry(x) & -Centerback(x) & -Defendant(x)) -> (-SoccerPlayer(x) & -ProfessionalBasketballPlayer(x)))", "all x.((StephenCurry(x) & -Centerback(x) & -Defendant(x)) -> -(SoccerPlayer(x) | ProfessionalBasketballPlayer(x)))", "all x.((StephenCurry(x) & -Centerback(x) & -Defendant(x)) -> (-SoccerPlayer(x) | ProfessionalBasketballPlayer(x)))", "all x.((StephenCurry(x) & -Centerback(x) & -Defendant(x)) -> -SoccerPlayer(x) & -ProfessionalBasketballPlayer(x))", "all x.((StephenCurry(x) & -Centerback(x) & -Defender(x)) -> (-SoccerPlayer(x) & -ProfessionalBasketballPlayer(x)))", "all x.((StephenCurry(x) & -Centerback(x) & -Defender(x)) -> (-SoccerPlayer(x) & -ProfessionalBasketballPlayer(x)))", "all x.((StephenCurry(x) & -Centerback(x) & -Defendant(x)) -> -(SoccerPlayer(x) | ProfessionalBasketballPlayer(x))))", "all x.((StephenCurry(x) & -Centerback(x) & -Defendant(x)) -> (-SoccerPlayer(x) & -ProfessionalBasketballPlayer(x)))", "all x.((StephenCurry(x) & -Centerback(x) & -Defender(x)) -> -(SoccerPlayer(x) | ProfessionalBasketballPlayer(x)))", "all x.((StanleyPlayer(x) & -Centerback(x) & -Defendant(x)) -> (-SoccerPlayer(x) & -ProfessionalBasketballPlayer(x)))", "all x.((StephenCurry(x) & -Centerback(x) & -Defender(x)) -> (-SoccerPlayer(x) | ProfessionalBasketballPlayer(x)))", "all x.((StephenCurry(x) & -Centerback(x) & -Defender(x)) -> -(SoccerPlayer(x) | ProfessionalBasketballPlayer(x)))", "all x.((StephenCurry(x) & -Centerback(x) & -Defender(x)) -> (-SoccerPlayer(x) | ProfessionalBasketballPlayer(x)))", "all x.((StephenCurry(x) & -Centerback(x) & -Defendant(x)) -> -(SoccerPlayer(x) | ProfessionalBasketballPlayer(x)))", "all x.((StephenCurry(x) & -Centerback(x) & -Defendant(x)) -> (-SoccerPlayer(x) | ProfessionalBasketballPlayer(x)))", "all x.((StephenCurry(x) & -Centerback(x) & Defender(x)) -> (-SoccerPlayer(x) & -ProfessionalBasketballPlayer(x)))"]}
{"id": "folio_train_1104", "nl": "If a person doesn't have enough money to buy a product, then that person can't buy it.", "fol": "all x y.((Individual(x) & Item(y) & -HasSufficientFundsFor(x,y)) -> -Purchase(x,y))", "prediction": ["all x y.((Person(x) & Product(y) & -HasEnoughMoney(x,y)) -> CannotBuy(x,y))", "all x.((Person(x) & -HasEnoughMoneyToBuyProduct(x)) -> CannotBuyProduct(x))", "all x y.((Person(x) & Product(y) & -EnoughMoney(x,y)) -> CannotBuy(x,y))", "all x y.((Person(x) & Product(y) & -HasEnoughMoney(x,y)) -> Can'tBuy(x,y))", "all x.((Person(x) & -HasEnoughMoneyToBuyProduct(x)) -> Can'tBuyProduct(x))", "all x y.((Person(x) & Product(y) & -EnoughMoney(x,y)) -> -CanBuy(x,y))", "all x.((Person(x) & -EnoughMoneyToBuyProduct(x)) -> CannotBuyProduct(x))", "all x y.((Person(x) & Product(y) & -SufficientMoney(x,y)) -> CannotBuy(x,y))", "all x.((Person(x) & -HasEnoughMoney(x)) -> CannotBuyProduct(x))", "all x y.((Person(x) & Product(y) & -HasEnoughMoney(x,y)) -> -CanBuy(x,y))", "all x y.((Person(x) & Product(y) & -EnoughMoney(x,y)) -> Can'tBuy(x,y))", "all x.((Person(x) & -EnoughMoneyToBuyProduct(x)) -> Can'tBuyProduct(x))", "all x y.((Person(x) & Product(y) & -SufficientMoney(x,y)) -> -CanBuy(x,y))", "all x.((Person(x) & -EnoughMoneyToBuyProduct(x)) -> -CanBuyProduct(x))", "all x.((Person(x) & -HasEnoughMoney(x)) -> Can'tBuyProduct(x))", "all x y.((Person(x) & Product(y) & -EnoughMoneyToBuy(x,y)) -> CannotBuy(x,y))"]}
{"id": "folio_train_1105", "nl": "Monitors are products.", "fol": "all x.(DisplayMonitor(x) -> Item(x))", "prediction": ["all x.(Monitor(x) -> Product(x))", "all x.(Monitor(x) -> Products(x))", "all x y.((Monitor(x) & Product(y)) -> Product(x,y))", "all x y.((Monitor(x) & Product(y)) -> Product(x))", "all x y.((Monitor(x) & Product(y)) -> Is(x,y))", "all x y.((Monitor(x) & Product(y)) -> Products(x,y))", "all x y.((Monitor(x) & Product(y)) -> (Product(x,y) & Product(x,y)))", "all x y.((Monitor(x) & Product(y)) -> (Product(x) & Product(y)))", "all x.(Monitor(x) -> Product(x))", "all x y.((Monitor(x) & Product(y)) -> Products(x))", "all x y.((Monitor(x) & Product(y)) -> (Product(x,y) | Product(x,y)))", "all x y.((Monitor(x) & Product(y)) -> (Product(x,y) & Product(y)))", "all x y.((Monitor(x) & Product(y)) -> ProducedBy(x,y))", "all x.(Monitor(x) -> (Product(x) & Product(x)))", "all x y.((Monitor(x) & Product(y)) -> DesignedFor(x,y))", "all x y.((Monitor(x) & Product(y)) -> (Product(x) & Product(x,y)))"]}
{"id": "folio_train_1106", "nl": "4k monitors are more expensive than 1080 monitors and 2k monitors.", "fol": "all z.(((DisplayMonitor(x) & DisplayMonitor(y) & DisplayMonitor(z) & Is4KMonitor(x) & Is1080Monitor(y) & Is2KMonitor(z)) -> IsMoreExpensiveThan(x,y)) & IsMoreExpensiveThan(x,z))", "prediction": ["all x y.((4kMonitor(x) & 1080Monitor(y) & 2kMonitor(x)) -> MoreExpensive(x,y))", "all x y.((4kMonitor(x) & 1080Monitor(y) & 2kMonitor(y)) -> MoreExpensive(x,y))", "all x.((4kMonitor(x) & 1080Monitor(x) & 2kMonitor(x)) -> MoreExpensive(x))", "all x y.((4kMonitor(x) & 1080Monitor(y) & 2kMonitor(z)) -> MoreExpensive(x,y,z))", "all x y.((4kMonitor(x) & 1080Monitor(y)) -> MoreExpensive(x,y))", "all x y.((4kMonitor(x) & 1080Monitor(y) & 2kMonitor(x)) -> MoreExpective(x,y))", "all x y.((4kMonitor(x) & 1080Monitor(y) & 2kMonitor(y)) -> MoreExpective(x,y))", "all x.((Monitor(x) & Monitor(x) & Monitor(x) & Monitor(x) & Monitor(x)) -> MoreExpensive(x))", "all x y.((4kMonitor(x) & 1080Monitor(y) & 2kMonitor(x)) -> MoreEfficient(x,y))", "all x.((4kMonitor(x) & 1080Monitor(x) & 2kMonitor(x)) -> MoreExpective(x))", "all x y.((4kMonitor(x) & 1080Monitor(y) & 2kMonitor(y)) -> MoreEfficient(x,y))", "all x y.((4kMonitor(x) & 1080Monitor(y) & 2kMonitor(z)) -> MoreExpensive(x,y))", "all x y.((4kMonitor(x) & 1080Monitor(y) & 2kMonitor(x)) -> MoreExpectious(x,y))", "all x.((Monitor(x) & Monitor(x) & Monitor(x) & Monitor(x) & Monitor(x) & Monitor(x)) -> MoreExpensive(x))", "all x y.((4kMonitor(x) & 1080Monitor(y) & 2kMonitor(y)) -> MoreExpectious(x,y))", "all x.((4kMonitor(x) & 1080Monitor(x) & 2kMonitor(x)) -> MoreExpectious(x))"]}
{"id": "folio_train_1107", "nl": "John is a person.", "fol": "Individual(John)", "prediction": ["all x.(John(x) -> Person(x))", "All x.(John(x) -> Person(x))", "exists x.(John(x) & Person(x))", "(Person(John) & Person(John))", "all x.(John(x) -> Person(x))", "(Person(John) & -Person(John))", "John is Person(John)", "(Person(John) -> Person(John))", "(Person(John) & LivesIn(John))", "(Person(John) -> Person(John))", "-(John(John) & Person(John))", "(Person(John) & Personal(John))", "(Person(John) & Identifies(John,John))", "John is a Person(John)", "(Person(John) & People(John))", "(Person(John) | Person(John)))"]}
{"id": "folio_train_1108", "nl": "John doesn't have enough money to buy a 2k monitor.", "fol": "all x.((DisplayMonitor(x) & Is2KMonitor(x)) -> -HasSufficientFundsFor(John,x))", "prediction": ["all x.((John(x) & -HasEnoughMoneyToBuy2kMonitor(x)) -> -HasEnoughMoneyToBuy2kMonitor(x))", "all x.((John(x) & -SufficientMoney(x)) -> 2kMonitor(x))", "all x.((John(x) & -HasEnoughMoneyFor2kMonitor(x)) -> -HasEnoughMoneyFor2kMonitor(x))", "all x.((John(x) & -SufficientMoneyToBuy2kMonitor(x)) -> -SufficientMoneyToBuy2kMonitor(x))", "all x.((John(x) & -EnoughMoneyToBuy2kMonitor(x)) -> -EnoughMoneyToBuy2kMonitor(x))", "all x.((John(x) & -HasEnoughMoneyToBuy2kMonitor(x)) -> -HasEnoughMoney(x))", "all x.((John(x) & -HasEnoughMoney(x)) -> Buys2kMonitor(x))", "all x y.((John(x) & Monitor(y)) -> -HasEnoughMoney(x,y))", "all x.((John(x) & -SufficientMoney(x)) -> Buys2kMonitor(x))", "all x.((John(x) & -EnoughMoney(x)) -> 2kMonitor(x))", "(-HasEnoughMoneyToBuy2kMonitor(John))", "all x.((John(x) & -HasEnoughMoneyToBuy2kMonitor(x)) -> -HasMoneyToBuy2kMonitor(x))", "all x y.((John(x) & Monitor(y)) -> -HasEnoughMoneyToBuy(x,y))", "all x.((John(x) & -HasEnoughMoney(x)) -> 2kMonitor(x))", "all x.((John(x) & -SufficientMoneyToBuy2kMonitor(x)) -> -SufficientMoney(x))", "all x.((John(x) & -HasEnoughMoneyToBuy2kMonitor(x)) -> -HasEnoughMoneyFor2kMonitor(x))"]}
{"id": "folio_train_1109", "nl": "John can not buy the 1080 monitor.", "fol": "(-Purchase(John,y) & DisplayMonitor(y) & Is1080Monitor(y))", "prediction": ["all x.((John(x) & 1080Monitor(x)) -> -CanBuy(x,y))", "all x.((John(x) & 1080Monitor(y)) -> -CanBuy(x,y))", "all x.((John(x) & 1080Monitor(x)) -> -CanBuy(x,10))", "all x.((John(x) & 1080Monitor(x)) -> -Buys(x,y))", "all x.((John(x) & 1080Monitor(x)) -> CannotBuy(x,y))", "all x.((John(x) & 1080Monitor(y)) -> -Buys(x,y))", "all x.((John(x) & 1080(y)) -> -CanBuy(x,y))", "all x.((John(x) & 1080(x)) -> -CanBuy(x,y))", "all x.((John(x) & 1080Monitor(x)) -> -Buys(x,10))", "all x.((John(x) & 1080Monitor(y)) -> CannotBuy(x,y))", "all x.((John(x) & 1080(x)) -> -CanBuy(x,10))", "all x.((John(x) & 1080(x)) -> -Buys(x,y))", "all x.((John(x) & 1080(x)) -> CannotBuy(x,y))", "all x.((John(x) & 1080Monitor(x)) -> CannotBuy(x,10))", "all x.((John(x) & 1080Monitor(x)) -> -CanBuy(x))", "all x.((John(x) & 1080(y)) -> -Buys(x,y))"]}
{"id": "folio_train_1110", "nl": "John can not buy the 2k monitor.", "fol": "all x.((DisplayMonitor(x) & Is2KMonitor(x)) -> -Purchase(John,x))", "prediction": ["-CanBuy2kMonitor(John)", "all x.((John(x) & 2kMonitor(x)) -> -CanBuy(x,y))", "all x.((John(x) & -Buys2kMonitor(x)) -> -Buys2kMonitor(x))", "all x.((John(x) & -CanBuy2kMonitor(x)) -> -CanBuy2kMonitor(x))", "all x.((John(x) & 2kMonitor(y)) -> -CanBuy(x,y))", "all x.((John(x) & 2kMonitor(x)) -> CannotBuy(x,y))", "all x.((John(x) & 2kMonitor(x)) -> -Buys(x,y))", "all x.((John(x) & 2kMonitor(x)) -> -CanBuy(x,2))", "all x.((John(x) & -Buys2kMonitor(x)) -> CannotBuy2kMonitor(x))", "All x.((John(x) & 2kMonitor(x)) -> -CanBuy(x,y))", "all x.((John(x) & 2kMonitor(y)) -> -Buys(x,y))", "all x.((John(x) & Monitor(y)) -> -CanBuy(x,y))", "all x.((John(x) & 2kMonitor(x)) -> -CanBuy(x,2k))", "all x.((John(x) & 2kMonitor(y)) -> CannotBuy(x,y))", "(-CanBuy2kMonitor(John))", "all x.((John(x) & 2kMonitor(x)) -> -CanBuy(x))"]}
{"id": "folio_train_1111", "nl": "All artificial satellites are important scientific achievements.", "fol": "all x.(IsArtificialSatellite(x) -> IsImportantScientificAchievement(x))", "prediction": ["all x.(ArtificialSatellite(x) -> ImportantScientificAchievement(x))", "all x.(ArtificialSatellite(x) -> ScientificAchievement(x))", "all x.(ArtificialSatellite(x) -> ImportantScientificAcquisition(x))", "all x.(ArtificialSatellite(x) -> ImportantScientificAchievements(x))", "all x.(ArtificialSatellite(x) -> ImportantScientificAccomplishment(x))", "all x.(ArtificialSatellite(x) -> ImportantScientificErasure(x))", "all x.(ArtificialSatellite(x) -> ImportantSciencealAchievement(x))", "all x.(ArtificialSatellite(x) -> ImportantScientificAcclaim(x))", "all x.(ArtificialSatellite(x) -> ImportantScientificAchievement(x))", "all x.(ArtificialSatellite(x) -> SignificantScientificAchievement(x))", "all x.(ArtificialSatellite(x) -> ImportantScientificAcknowledgement(x))", "all x.(ArtificialSatellite(x) -> ImportantScientificAdvancement(x))", "all x.(ArtificialSatellite(x) -> ScientificAcquisition(x))", "all x.(ArtificialSatellite(x) -> ScientificAccomplishment(x))", "all x.(ArtificialSatellite(x) -> ImportantScienceAchievement(x))", "all x.(ArtificialSatellite(x) -> ImportantScientificAccompanion(x))"]}
{"id": "folio_train_1112", "nl": "Some artificial satellites are not U.S. inventions.", "fol": "exists x.(IsArtificialSatellite(x) & -IsUSInvention(x))", "prediction": ["exists x.(ArtificialSatellite(x) & -U.S.Invention(x))", "exists x.(ArtificialSatellite(x) & -Invention(x))", "exists x.(ArtificialSatellite(x) & -USInvention(x))", "exists x.(ArtificialSatellite(x) & -U.S.Inventation(x))", "exists x.(ArtificialSatellite(x) & -UnitedStatesInvention(x))", "(exists x.(ArtificialSatellite(x) & -U.S.Invention(x)))", "exists x.(ArtificialSatellite(x) & -U.S.Invention(x))", "exists x.(ArtificialSatellite(x) & -U.S.Invention(x))", "all x.(ArtificialSatellite(x) -> -U.S.Invention(x))", "exists x.(ArtificialSatellite(x) & -InventedInU.S.(x)))", "exists x.(ArtificialSatellite(x) & -U.S.Invent(x))", "exists x.(ArtificialSatellite(x) & -InventedInU.S.A.(x))", "exists x.(ArtificialSatellite(x) & -InventedInU.S.(x))", "exists x.(ArtificialSatellite(x) & -InventedIn(x,U.S.))", "exists x.(ArtificialSatellite(x) & -AmericanInvention(x))", "exists x.(ArtificialSatellite(x) & -U.S.Inventation(x))"]}
{"id": "folio_train_1113", "nl": "All important scientific achievements are U.S. inventions.", "fol": "all x.(IsImportantScientificAchievement(x) -> IsUSInvention(x))", "prediction": ["all x.((ScientificAchievement(x) & U.S.Invention(x)) -> Important(x))", "all x.((ScientificAchievement(x) & Important(x)) -> U.S.Invention(x))", "all x.((ScientificAdvancement(x) & U.S.Invention(x)) -> Important(x))", "all x.(ImportantScientificAchievement(x) -> U.S.Invention(x))", "all x.((ScientificAdvancement(x) & Important(x)) -> U.S.Invention(x))", "all x.(ScientificAchievement(x) -> U.S.Invention(x))", "all x.((ImportantScientificAchievement(x) & U.S.Invention(x)) -> Important(x))", "all x.((Invention(x) & ImportantScientificAchievement(x)) -> U.S.Invention(x))", "all x.((ImportantScientificAchievement(x) & U.S.Invention(x)) -> Invention(x))", "all x.((ScientificAchievement(x) & AmericanInvention(x)) -> Important(x))", "all x.((ScientificAchievement(x) & Invention(x)) -> U.S.Invention(x))", "all x.((ScientificAcquisition(x) & U.S.Invention(x)) -> Important(x))", "all x.((ScientificAchievement(x) & UnitedStatesInvention(x)) -> Important(x))", "all x.((Invention(x) & ImportantScientificAchievement(x)) -> U.S.(x))", "all x.((ScientificAchievement(x) & U.S.Invention(x)) -> Significant(x))", "all x.((ScientificAchievement(x) & USInvention(x)) -> Important(x))"]}
{"id": "folio_train_1114", "nl": "Some cats are not pets.", "fol": "exists x.(IsCat(x) & -IsPet(x))", "prediction": ["exists x.(Cat(x) & -Pet(x))", "exists x.(Cat(x) & -(Pet(x) | Pet(x))))", "exists x.(Cat(x) & -(Pet(x) | Pet(x)))", "exists x.(Cat(x) & -(Pet(x) | Cat(x))))", "exists x.(Cat(x) & -Pet(x))", "exists x.(Cat(x) & -(Pet(x) & Pet(x)))", "exists x y.(Cat(x) & Cat(y) & -Pet(y))", "exists x.(Cat(x) & -Animal(x))", "exists x y.(Cat(x) & Cat(y) & -Pet(x))", "exists x y.(Cat(x) & Pet(y) & -Pet(x,y))", "exists x y.(Cat(x) & Pet(y) & -Pet(x))", "exists x.(Kit(x) & -Pet(x))", "(exists x.(Cat(x) & -Pet(x)))", "exists x.(Cat(x) & -(Cat(x) | Cat(x))))", "exists x y.(Cat(x) & Cat(y) & -Pet(x,y))", "exists x.(Cat(x) & -(Pet(x) | Cat(x)))"]}
{"id": "folio_train_1115", "nl": "All cats are mammals.", "fol": "all x.(IsCat(x) -> IsMammal(x))", "prediction": ["all x.(Cat(x) -> Mammal(x))", "all x y.((Cat(x) & Mammal(y)) -> Mammal(x))", "all x.(Cat(x) -> Mammal(x))", "all x y.((Cat(x) & Mammal(y)) -> Mammal(x,y))", "(all x.(Cat(x) -> Mammal(x)))", "(all x.(Cat(x) -> Mammal(x))", "all x.exists y.(Cat(x) & Mammal(y) & Mammal(x))", "all x.exists y.(Cat(x) & Mammal(y) & Mammal(y))", "exists x.(Cat(x) & Mammal(x))", "all x.exists y.(Cat(x) & Mammal(y) & Mammal(x,y))", "all x.(Kat(x) -> Mammal(x))", "all x.exists y.(Cat(x) & Mammal(y) & Mammal(z))", "all x.(Kit(x) -> Mammal(x))", "all x.exists y.(Cat(x) & Mammal(y))", "all x.(Cat(x) -> Mammal(x))", "all x.exists y.(Cat(x) & Mammal(y) & -Mammal(x))"]}
{"id": "folio_train_1116", "nl": "Some mammals are not pets.", "fol": "exists x.(IsMammal(x) & -IsPet(x))", "prediction": ["exists x.(Mammal(x) & -Pet(x))", "exists x.(Mammal(x) & -Animal(x))", "exists x.(Mammal(x) & -(Pet(x) | Pet(x)))", "exists x.(Mammal(x) & -(Pet(x) | Pet(x))))", "exists x y.(Mammal(x) & Animal(y) & -Pet(x,y))", "exists x.(Mammal(x) & -Pet(x))", "exists x y.(Mammal(x) & Animal(y) & -Pet(x))", "exists x y.(Mammal(x) & Pet(y) & -Pet(x,y))", "exists x.(Mammal(x) & -(Pet(x) & Pet(x)))", "exists x.(Mammal(x) & -(Pet(x) | Animal(x)))", "exists x y.(Mammal(x) & Pet(y) & -Pet(x))", "exists x.(Mammal(x) & -(Pet(x) | Animal(x))))", "(exists x.(Mammal(x) & -Pet(x)))", "exists x y.(Mammal(x) & Animal(y) & -Pet(y))", "exists x y.(Mammal(x) & Pet(y) & -Pet(y))", "exists x.(Mammal(x) & -(Pet(x) | -Pet(x)))"]}
{"id": "folio_train_1117", "nl": "If people visit a coffee shop at least three times a week, then they are addicted to coffee or other caffeinated drinks.", "fol": "all x.(VisitsCoffeeShop(x) -> AddictedToCaffeine(x))", "prediction": ["all x.((Person(x) & VisitsCoffeeShopAtLeastThreeTimesWeek(x)) -> AddictToCoffeeOrCaffeinatedDrinks(x))", "all x.((Person(x) & VisitsCoffeeShopAtLeastThreeTimes(x)) -> AddictToCoffeeOrCaffeinatedDrinks(x))", "all x y.((Person(x) & CoffeeShop(y) & VisitsAtLeastThreeTimes(x,y)) -> AddictToCoffeeOrCaffeinatedDrinks(x))", "all x.((Person(x) & VisitsCoffeeShop(x,y) & AtLeastThreeTimesWeek(x)) -> AddictToCoffeeOrCaffeinatedDrinks(x))", "all x.((People(x) & VisitsCoffeeShopAtLeastThreeTimesWeek(x)) -> AddictToCoffeeOrCaffeinatedDrinks(x))", "all x.((Person(x) & VisitsCoffeeShopAtLeastThreeTimesA Week(x)) -> AddictToCoffeeOrCaffeinatedDrinks(x))", "all x.((Person(x) & VisitsCoffeeShopAtLeastThreeTimesAWeek(x)) -> AddictToCoffeeOrCaffeinatedDrinks(x))", "all x.((People(x) & VisitsCoffeeShopAtLeastThreeTimes(x)) -> AddictToCoffeeOrCaffeinatedDrinks(x))", "all x y.((Person(x) & CoffeeShop(y) & VisitsAtLeastThreeTimesWeek(x,y)) -> AddictToCoffeeOrCaffeinatedDrinks(x))", "all x.((Person(x) & VisitsCoffeeShop(x,y) & AtLeastThreeTimesAWeek(x)) -> AddictToCoffeeOrCaffeinatedDrinks(x))", "all x y.((Person(x) & CoffeeShop(y) & VisitsAtLeastThreeTimesA Week(x,y)) -> AddictToCoffeeOrCaffeinatedDrinks(x))", "all x y.((Person(x) & CoffeeShop(y) & Visits(x,y)) -> (AddictedToCoffee(x) | AddictedToCaffeinatedDrinks(x)))", "all x.((Person(x) & VisitsCoffeeShopAtLeastThreeTimesWeek(x)) -> AddictedToCoffeeOrCaffeinatedDrinks(x))", "all x.((Person(x) & VisitsCoffeeShop(x,3)) -> AddictToCoffeeOrCaffeinatedDrinks(x))", "all x.((Person(x) & VisitsCoffeeShopAtLeastThreeTimes(x)) -> AddictedToCoffeeOrCaffeinatedDrinks(x))", "all x y.((Person(x) & CoffeeShop(y) & Visits(x,y)) -> AddictToCoffeeOrCaffeinatedDrinks(x))"]}
{"id": "folio_train_1118", "nl": "People either visit a coffee shop at least three times a week or order takeout at least once a day.", "fol": "all x.(VisitsCoffeeShop(x) | OrdersTakeout(x))", "prediction": ["all x y.((Person(x) & CoffeeShop(y)) -> ((VisitsAtLeastThreeTimes(x,y) | OrdersTakeoutAtLeastOneDay(x,y))))", "all x y.((Person(x) & CoffeeShop(y) & VisitsAtLeastThreeTimes(x,y)) | OrdersTakeoutAtLeastOneDay(x,y)) -> VisitsAtLeastThreeTimes(x,y))", "all x y.((Person(x) & CoffeeShop(y)) -> (VisitsAtLeastThreeTimes(x,y) | OrdersTakeoutAtLeastOneDay(x,y)))", "all x y.((Person(x) & CoffeeShop(y) & Visits(x,y)) | OrdersTakeout(x,y))", "all x y.((Person(x) & CoffeeShop(y) & VisitsAtLeastThreeTimes(x,y)) | OrdersTakeoutAtLeastOneDay(x,y))", "all x y.((Person(x) & CoffeeShop(y)) -> ((VisitAtLeastThreeTimes(x,y) | OrderTakeoutAtLeastOneDay(x,y))))", "all x y.((Person(x) & CoffeeShop(y) & VisitsAtLeastThreeTimes(x,y)) | OrdersTakeoutAtLeastOnceADay(x,y)) -> VisitsAtLeastThreeTimes(x,y))", "all x y.((Person(x) & CoffeeShop(y)) -> ((VisitsAtLeastThreeWeeks(x,y) | OrdersTakeoutAtLeastOneDay(x,y))))", "all x y.((Person(x) & CoffeeShop(y)) -> ((VisitsAtLeastThreeTimes(x,y) | OrdersTakeoutAtLeastOneTime(x,y))))", "all x y.((Person(x) & CoffeeShop(y)) -> (VisitAtLeastThreeTimes(x,y) | OrderTakeoutAtLeastOneDay(x,y)))", "all x y.((Person(x) & CoffeeShop(y)) -> (VisitsAtLeastThreeTimes(x,y) | OrdersTakeoutAtLeastOneTime(x,y)))", "all x y z.((Person(x) & CoffeeShop(y) & CoffeeShop(z)) -> (VisitsAtLeastThreeTimes(x,y) | OrdersTakeoutAtLeastOneDay(x,z)))", "all x y.((Person(x) & CoffeeShop(y)) -> ((Visits(x,y) & AtLeastThreeTimes(x)) | OrdersTakeout(x,y))))", "all x y.((Person(x) & CoffeeShop(y) & VisitsAtLeastThreeTimes(x,y)) | OrdersTakeoutAtLeastOneDay(x))", "all x y z.((Person(x) & CoffeeShop(y) & CoffeeShop(z) & VisitsAtLeastThreeTimes(x,y)) | OrdersTakeoutAtLeastOneDay(x,z)))", "all x y.((Person(x) & CoffeeShop(y) & VisitsAtLeastThreeTimes(x,y)) | OrdersTakeoutAtLeastOneTime(x,y))"]}
{"id": "folio_train_1119", "nl": "If people make a lot of their own food at home using recipes and online guides, then they order takeout at least once a day.", "fol": "all x.(MakesOwnFood(x) -> OrdersTakeout(x))", "prediction": ["all x.((Person(x) & MakesOwnFoodAtHome(x) & UsesRecipesAndOnlineGuides(x)) -> OrdersTakeoutAtLeastOneDay(x))", "all x.((Person(x) & MakesOwnFoodAtHome(x) & UsesRecipesAndOnlineGuides(x)) -> OrdersTakeoutAtLeastOnceADay(x))", "all x.((Person(x) & MakesOwnFoodAtHome(x) & UsesRecipes(x) & UsesOnlineGuides(x)) -> OrdersTakeoutAtLeastOneDay(x))", "all x.((Person(x) & MakesOwnFoodAtHome(x) & UsesRecipes(x) & UsesOnlineGuides(x)) -> OrdersTakeoutAtLeastOnceADay(x))", "all x.((People(x) & MakesOwnFoodAtHome(x) & UsesRecipesAndOnlineGuides(x)) -> OrdersTakeoutAtLeastOnceADay(x))", "all x.((People(x) & MakesOwnFoodAtHome(x) & UsesRecipesAndOnlineGuides(x)) -> OrdersTakeoutAtLeastOneDay(x))", "all x.((Person(x) & MakesOwnFood(x) & UsesRecipes(x) & UsesOnlineGuides(x)) -> OrdersTakeout(x))", "all x.((Person(x) & MakesOwnFood(x) & UsesRecipesAndOnlineGuides(x)) -> OrdersTakeout(x))", "all x.((People(x) & MakesOwnFoodAtHome(x) & UsesRecipes(x) & UsesOnlineGuides(x)) -> OrdersTakeoutAtLeastOneDay(x))", "all x.((People(x) & MakesOwnFoodAtHome(x) & UsesRecipes(x) & UsesOnlineGuides(x)) -> OrdersTakeoutAtLeastOnceADay(x))", "all x.((Person(x) & MakesOwnFoodAtHome(x) & UsesRecipesAndOnlineGuides(x)) -> OrdersTakeout(x))", "all x.((Person(x) & MakesLotOfOwnFoodAtHome(x) & UsesRecipesAndOnlineGuides(x)) -> OrdersTakeoutAtLeastOnceADay(x))", "all x.((People(x) & MakesOwnFood(x) & UsesRecipes(x) & UsesOnlineGuides(x)) -> OrdersTakeout(x))", "all x.((Person(x) & MakesOwnFoodAtHome(x) & UsesRecipesAndOnlineGuides(x)) -> OrdersTakeoutAtLeastOnlyOneDay(x))", "all x.((Person(x) & MakesOwnFoodAtHome(x) & UsesRecipes(x) & UsesOnlineGuides(x)) -> OrdersTakeout(x))", "all x.((Person(x) & MakesLotOfOwnFoodAtHome(x) & UsesRecipesAndOnlineGuides(x)) -> OrdersTakeoutAtLeastOneDay(x))"]}
{"id": "folio_train_1120", "nl": "If people own at least one coffeemaker and one blender in their home, then they do not order takeout at least once a day.", "fol": "all x.(OwnsKitchenAppliances(x) -> -OrdersTakeout(x))", "prediction": ["all x.((Person(x) & OwnsCoffeemaker(x) & OwnsBlender(x)) -> -OrdersTakeout(x))", "all x.((OwnsCoffeemaker(x) & OwnsBlender(x)) -> -OrdersTakeout(x))", "all x.((Person(x) & Coffeemaker(x) & Blender(x)) -> -OrdersTakeout(x))", "all x.((Person(x) & OwnsCoffeemaker(x) & OwnsBlender(x)) -> -OrdersTakeoutAtLeastOnceADay(x))", "all x y.((Person(x) & Coffeemaker(y) & Blender(y)) -> -OrdersTakeout(x,y))", "all x.((People(x) & OwnsCoffeemaker(x) & OwnsBlender(x)) -> -OrdersTakeout(x))", "all x.((Person(x) & OwnsCoffeemaker(x) & OwnsBlender(x)) -> -OrdersTakeoutAtLeastOneDay(x))", "all x.(OwnsCoffeemakerAndBlenderInHome(x) -> -OrdersTakeoutAtLeastOnceADay(x))", "all x.((OwnsCoffeemaker(x) & OwnsBlender(x)) -> -OrdersTakeoutAtLeastOnceADay(x))", "all x.((Person(x) & Coffeemaker(x) & Blender(x)) -> -OrdersTakeoutAtLeastOnceADay(x))", "all x.((Person(x) & Coffeemaker(x) & Blender(x)) -> -OrderTakeout(x))", "all x.((Person(x) & OwnsCoffeemaker(x) & OwnsBlender(x)) -> -OrderTakeout(x))", "all x.((OwnsCoffeemaker(x) & OwnsBlender(x)) -> -OrdersTakeoutAtLeastOneDay(x))", "all x.(OwnsCoffeemakerAndBlenderInHome(x) -> -OrdersTakeoutAtLeastOneDay(x))", "all x.((Person(x) & OwnsCoffeemaker(x) & OwnsBlender(x)) -> -OrdersTakeoutAtLeastOnlyOneDay(x))", "all x.((Person(x) & Coffeemaker(x) & Blender(x)) -> -OrdersTakeoutAtLeastOneDay(x))"]}
{"id": "folio_train_1121", "nl": "All people who lead very busy lives that include 12-hour work hours make a lot of their own food at home using recipes and online guides.", "fol": "all x.(LeadsBusyLife(x) -> MakesOwnFood(x))", "prediction": ["all x.((Person(x) & LeadsBusyLives(x) & 12-hourWorkHours(x)) -> MakesOwnFoodAtHome(x))", "all x.((Person(x) & LeadsBusyLife(x) & 12-hourWorkHours(x)) -> MakesOwnFoodAtHome(x))", "all x.((Person(x) & VeryBusyLife(x) & 12-hourWorkHours(x)) -> MakesOwnFoodAtHome(x))", "all x.((Person(x) & VeryBusyLives(x) & 12-hourWorkHours(x)) -> MakesOwnFoodAtHome(x))", "all x.((Person(x) & LeadsVeryBusyLives(x) & 12-hourWorkHours(x)) -> MakesOwnFoodAtHome(x))", "all x.((Person(x) & LeadsBusyLife(x) & 12-HoursWorkHours(x)) -> MakesOwnFoodAtHome(x))", "all x.((Person(x) & LeadsBusyLives(x) & 12-HourWorkHours(x)) -> MakesOwnFoodAtHome(x))", "all x.((Person(x) & LeadsBusyLife(x) & 12-HourWorkHours(x)) -> MakesOwnFoodAtHome(x))", "all x.((Person(x) & LeadsBusyLives(x) & 12-HoursWorkHours(x)) -> MakesOwnFoodAtHome(x))", "all x.((Person(x) & LeadsBusyLives(x) & 12-hourWorkHours(x)) -> MakesOwnFoodAtHomeUsingRecipesAndOnlineGuides(x))", "all x.((Person(x) & LeadsVeryBusyLife(x) & 12-hourWorkHours(x)) -> MakesOwnFoodAtHome(x))", "all x.((Person(x) & VeryBusyLife(x) & 12-HoursWorkHours(x)) -> MakesOwnFoodAtHome(x))", "all x.((Person(x) & VeryBusyLife(x) & 12-HourWorkHours(x)) -> MakesOwnFoodAtHome(x))", "all x.((Person(x) & LeadsBustyLives(x) & 12-hourWorkHours(x)) -> MakesOwnFoodAtHome(x))", "all x.((Person(x) & VeryBusyLives(x) & 12-HoursWorkHours(x)) -> MakesOwnFoodAtHome(x))", "all x.((Person(x) & LeadsBusyLives(x) & 12-hourWorkHours(x)) -> MakesOwnFood(x))"]}
{"id": "folio_train_1122", "nl": "Sam is either both addicted to coffee or other caffeinated drinks or leads very busy lives that include 12-hour work hours, or she is neither addicted to coffee and other caffeinated drinks nor leads very busy lives that include 12-hour work hours", "fol": "((AddictedToCaffeine(Sam) & LeadsBusyLife(Sam) & -(-AddictedToCaffeine(Sam) & -LeadsBusyLife(Sam))) | (-(AddictedToCaffeine(Sam) & LeadsBusyLife(Sam)) & -AddictedToCaffeine(Sam) & -LeadsBusyLife(Sam)))", "prediction": ["all x.(Sam(x) -> ((AddictedToCoffee(x) | AddictedToCaffeinatedDrinks(x)) | (AddictedToCoffee(x) & AddictedToCaffeinatedDrinks(x)) | (AddictedToCoffee(x) & AddictedToCaffeinatedDrinks(x) & AddictedToCaffeinatedDrinks(x))))", "all x.((Sam(x) & (AddictedToCoffee(x) | AddictedToCaffeinatedDrinks(x)) | (AddictedToCoffee(x) & AddictedToCaffeinatedDrinks(x)) | (AddictedToCoffee(x) & AddictedToCaffeinatedDrinks(x) & AddictedToCaffeinatedDrinks(x))))", "all x.((Sam(x) & (AddictedToCoffee(x) | AddictedToCaffeinatedDrinks(x))) | (-AddictedToCoffee(x) & AddictedToCaffeinatedDrinks(x)) | (-AddictedToCoffee(x) & AddictedToCaffeinatedDrinks(x) & AddictedToCaffeinatedDrinks(x))))", "(all x.((Sam(x) & (AddictedToCoffee(x) | AddictedToCaffeinatedDrinks(x))) | (-AddictedToCoffee(x) & AddictedToCaffeinatedDrinks(x)) | (-AddictedToCoffee(x) & AddictedToCaffeinatedDrinks(x) & AddictedToCaffeinatedDrinks(x))))", "all x.(Sam(x) -> ((AddictedToCoffee(x) | AddictedToCaffeinatedDrinks(x)) | (AddictedToCoffee(x) | AddictedToCaffeinatedDrinks(x)) | (AddictedToCoffee(x) & AddictedToCaffeinatedDrinks(x) & AddictedToCaffeinatedDrinks(x))))", "(all x.((Sam(x) & (AddictedToCoffee(x) | AddictedToCaffeinatedDrinks(x))) | (AddictedToCoffee(x) & AddictedToCaffeinatedDrinks(x)) | (AddictedToCoffee(x) & AddictedToCaffeinatedDrinks(x) & AddictedToCaffeinatedDrinks(x))))", "all x.((Sam(x) & ((AddictedToCoffee(x) | AddictedToCaffeinatedDrinks(x)) | (AddictedToCoffee(x) & AddictedToCaffeinatedDrinks(x)) | (AddictedToCoffee(x) & AddictedToCaffeinatedDrinks(x) & AddictedToCaffeinatedDrinks(x)))))", "all x.(Sam(x) -> ((AddictedToCoffee(x) | AddictedToCaffeinatedDrinks(x)) | (AddictedToCoffee(x) & AddictedToCaffeinatedDrinks(x)) | (AddictedToCoffee(x) & AddictedToCaffeinatedDrinks(x) & AddictedToCaffeinatedDrinks))))", "all x.(Sam(x) -> ((AddictedToCoffee(x) | AddictedToCaffeinatedDrinks(x)) | (AddictedToCoffee(x) & AddictedToCaffeinatedDrinks(x)) | (AddictedToCoffee(x) & AddictedToCaffeinatedDrinks(x) & AddictedToCaffeinatedDrinks(x)))))", "(all x.((Sam(x) & (AddictedToCoffee(x) | AddictedToCaffeinatedDrinks(x))) | (-AddictedToCoffee(x) & AddictedToCaffeinatedDrinks(x)) | (-AddictedToCoffee(x) & AddictedToCaffeinatedDrinks(x)) | (-AddictedToCaffeinatedDrinks(x)))))", "(all x.((Sam(x) & (AddictedToCoffee(x) | AddictedToCaffeinatedDrinks(x))) | (-AddictedToCoffee(x) & AddictedToCaffeinatedDrinks(x)) | (-AddictedToCoffee(x) & AddictedToCaffeinatedDrinks(x)) | (-AddictedToCaffeinatedDrinks(x) & AddictedToCaffeinatedDrinks(x)))))", "all x.(Sam(x) -> ((AddictedToCoffee(x) | AddictedToCaffeinatedDrinks(x)) | (AddictedToCoffee(x) & AddictedToCaffeinatedDrinks(x)) | (AddictedToCaffeinatedDrinks(x) & AddictedToCaffeinatedDrinks(x) & AddictedToCaffeinatedDrinks(x)))))", "all x.((Sam(x) & (AddictedToCoffee(x) | AddictedToCaffeinatedDrinks(x))) | (-AddictedToCoffee(x) & AddictedToCaffeinatedDrinks(x)) | (-AddictedToCoffee(x) & AddictedToCaffeinatedDrinks(x) & AddictedToCaffeinatedDrinks(x)))))", "all x.((Sam(x) & ((AddictedToCoffee(x) | AddictedToCaffeinatedDrinks(x)) | (AddictedToCoffee(x) & AddictedToCaffeinatedDrinks(x))) | (AddictedToCoffee(x) & AddictedToCaffeinatedDrinks(x) & AddictedToCaffeinatedDrinks(x))))", "(all x.((Sam(x) & (AddictedToCoffee(x) | AddictedToCaffeinatedDrinks(x))) | (-AddictedToCoffee(x) & AddictedToCaffeinatedDrinks(x)) | (-AddictedToCoffee(x) & AddictedToCaffeinatedDrinks(x)) | (-AddictedToCoffeeDrinks(x) & AddictedToCaffeinatedDrinks(x)))))", "(all x.((Sam(x) & (AddictedToCoffee(x) | AddictedToCaffeinatedDrinks(x))) | (-AddictedToCoffee(x) & AddictedToCaffeinatedDrinks(x)) | (-AddictedToCoffee(x) & AddictedToCaffeinatedDrinks(x)) | (-AddictedToCaffeinatedDrinks(x) & AddictedToCaffeinatedDrinks(x))))"]}
{"id": "folio_train_1123", "nl": "Sam is addicted to coffee and other caffeinated drinks.", "fol": "AddictedToCaffeine(Sam)", "prediction": ["all x.(Sam(x) -> (AddictedToCoffee(x) & AddictedToCaffeinatedDrinks(x)))", "all x.((Sam(x) & Coffee(x) & CaffeinatedDrinks(x)) -> Addictive(x))", "all x.(Sam(x) -> (AddictedToCoffee(x) & AddictedToOtherCaffeinatedDrinks(x)))", "(AddictedToCoffee(Sam) & AddictedToCaffeinatedDrinks(Sam))", "all x.(Sam(x) -> (AddictedToCoffee(x) | AddictedToCaffeinatedDrinks(x)))", "all x.(Sam(x) -> (AddictedTo(x,Coffee) & AddictedTo(x,CaffeinatedDrinks)))", "all x.((Sam(x) & AddictsToCoffee(x)) -> AddictsToCaffeinatedDrinks(x))", "all x.((Sam(x) & Coffee(x) & CaffeinatedDrink(x)) -> Addictive(x))", "all x.(Sam(x) -> AddictsToCoffeeAndCaffeinatedDrinks(x))", "all x.(Sam(x) -> (AccusedToCoffee(x) & AddictsToCaffeinatedDrinks(x)))", "all x.((Sam(x) & AddictsToCoffee(x) & AddictsToCaffeinatedDrinks(x)) -> AddictsToDrinks(x))", "all x.((Sam(x) & Coffee(x) & CaffeinatedDrinks(x)) -> AddictsTo(x,Sam))", "all x.((Sam(x) & Coffee(x) & OtherCaffeinatedDrinks(x)) -> Addictive(x))", "all x.((Sam(x) & AddictsToCoffee(x) & AddictsToCaffeinatedDrinks(x)) -> AddictsToCaffeinatedDrinks(x))", "all x.((Sam(x) & AddictsToCoffee(x) & AddictsToCaffeinatedDrinks(x)) -> AddictsToCoffeeAndCaffeinatedDrinks(x))", "all x.((Sam(x) & AddictsToCoffee(x) & AddictsToCaffeinatedDrinks(x)) -> AddictsToCoffee(x))"]}
{"id": "folio_train_1124", "nl": "Sam owns at least one coffeemaker and one blender in her home.", "fol": "OwnsKitchenAppliances(Sam)", "prediction": ["all x.((Sam(x) & Coffeemaker(x) & Blender(x)) -> OwnsInHome(x))", "all x.(Sam(x) -> (OwnsCoffeemaker(x) & OwnsBlender(x)))", "all x y.((Sam(x) & Coffeemaker(y) & Blender(y)) -> OwnsInHome(x,y))", "all x y.((Sam(x) & Coffeemaker(y) & Blender(y)) -> Owns(x,y))", "all x.((Sam(x) & Coffeemaker(x) & Blender(x)) -> Owns(x,y))", "all x y z.((Sam(x) & Coffeemaker(y) & Blender(z)) -> OwnsInHome(x,y,z))", "all x y z.((Sam(x) & Coffeemaker(y) & Blender(z)) -> (Owns(x,y) & Owns(x,z)))", "all x y.((Sam(x) & Coffeemaker(y) & Blender(z)) -> OwnsInHome(x,y,z))", "all x.((Sam(x) & Coffeemaker(x) & Blender(x)) -> OwnsInHome(x,y))", "all x y z.((Sam(x) & Coffeemaker(y) & Blender(z)) -> (OwnsInHome(x,y) & OwnsInHome(x,z)))", "all x y z.((Sam(x) & Coffeemaker(y) & Blender(z)) -> Owns(x,y,z))", "all x.((Sam(x) & Coffeemaker(x) & Blender(x)) -> OwnsInHome(x,Sam))", "all x.((Sam(x) & Coffeemaker(x) & Blender(x)) -> InHome(x))", "all x y z.((Sam(x) & Coffeemaker(y) & Blender(z)) -> (OwnsInHome(x,y,z) | OwnsInHome(x,z)))", "all x y z.((Sam(x) & Coffeemaker(y) & Blender(z)) -> (Owns(x,y) | Owns(x,z)))", "all x y.((Sam(x) & Coffeemaker(y) & Blender(z)) -> Owns(x,y,z))"]}
{"id": "folio_train_1125", "nl": "Sam either owns at least one coffeemaker and one blender in her home or orders takeout at least once a day.", "fol": "((OwnsCoffeemaker(Sam) & OwnsBlender(Sam)) | OrdersTakeout(Sam))", "prediction": ["all x y.((Sam(x) & Coffeemaker(y) & Blender(y)) -> (OwnsInHome(x,y) | OrdersTakeout(x,y)))", "all x y.((Sam(x) & Coffeemaker(y) & Blender(y)) -> (Owns(x,y) | OrdersTakeout(x,y)))", "all x.((Sam(x) & Coffeemaker(x) & Blender(x)) | OrdersTakeout(x))", "all x.((Sam(x) & (OwnsCoffeemaker(x) | OwnsBlender(x))) | OrdersTakeout(x)))", "all x.(Sam(x) -> (OwnsCoffeemaker(x) & OwnsBlender(x)) | OrdersTakeout(x)))", "all x.(Sam(x) -> (OwnsCoffeemaker(x) & OwnsBlender(x) & (OrdersTakeout(x) | OnceADay(x))))", "all x y.((Sam(x) & Coffeemaker(y) & Blender(y)) -> (Owns(x,y) | Orders(x,y)))", "all x y.((Sam(x) & Coffeemaker(y) & Blender(y)) -> (OwnsInHome(x,y) | OrdersInHome(x,y)))", "all x y z.((Sam(x) & Coffeemaker(y) & Blender(z)) -> (Owns(x,y) | OrdersTakeout(x,z))))", "all x y z.((Sam(x) & Coffeemaker(y) & Blender(z)) -> (OwnsInHome(x,y) | OrdersTakeout(x,z)))", "all x.(Sam(x) -> ((OwnsCoffeemaker(x) & OwnsBlender(x)) | OrdersTakeout(x))))", "all x y z.((Sam(x) & Coffeemaker(y) & Blender(z)) -> (Owns(x,y) | OrdersTakeout(x,z)))", "all x y.((Sam(x) & Coffeemaker(y) & Blender(y)) | OrdersTakeout(x,y))", "all x.(Sam(x) -> (OwnsCoffeemakerAndBlender(x) | OrdersTakeout(x)))", "all x y z.((Sam(x) & Coffeemaker(y) & Blender(z)) -> (OwnsInHome(x,y,z) | OrdersTakeout(x,y)))", "all x.(Sam(x) -> (Owns(x,Coffeemaker) & Owns(x,Blender)) | Orders(x,Takeout)))"]}
{"id": "folio_train_1126", "nl": "No professional basketball players are soccer players.", "fol": "-exists x.(IsSoccerPlayer(x) & IsProfessionalBasketballPlayer(x))", "prediction": ["-exists x.(ProfessionalBasketballPlayer(x) & SoccerPlayer(x))", "all x.(ProfessionalBasketballPlayer(x) -> -SoccerPlayer(x))", "all x.(ProfessionalBasketballPlayer(x) -> SoccerPlayer(x))", "(-exists x.(ProfessionalBasketballPlayer(x) & SoccerPlayer(x)))", "-exists x.(ProfessionalBasketballPlayer(x) & -SoccerPlayer(x))", "-exists x.(ProfessionalBasketballPlayer(x) & FootballPlayer(x))", "all x.((ProfessionalBasketballPlayer(x) & SoccerPlayer(x)) -> -exists y.(ProfessionalBasketballPlayer(y) & -exists z.(ProfessionalBasketballPlayer(z) & -exists w.(ProfessionalBasketballPlayer(w) & SoccerPlayer(w)))))", "all x.((ProfessionalBasketballPlayer(x) & SoccerPlayer(x)) -> -exists y.(ProfessionalBasketballPlayer(y) & -exists z.(ProfessionalBasketballPlayer(z) & -exists w.(ProfessionalBasketballPlayer(w) & SoccerPlayer(w)) & -exists w.(ProfessionalBasketballPlayer(x,w))))", "all x.((ProfessionalBasketballPlayer(x) & SoccerPlayer(x)) -> -exists y.(ProfessionalBasketballPlayer(y) & -exists z.(ProfessionalBasketballPlayer(z) & SoccerPlayer(z)) & -exists w.(ProfessionalBasketballPlayer(w) & SoccerPlayer(w))))", "all x.((ProfessionalBasketballPlayer(x) & SoccerPlayer(x)) -> -exists y.(ProfessionalBasketballPlayer(y) & -exists z.(ProfessionalBasketballPlayer(z) & SoccerPlayer(z) & -exists w.(ProfessionalBasketballPlayer(w) & SoccerPlayer(w)))))", "all x.((ProfessionalBasketballPlayer(x) & SoccerPlayer(x)) -> -exists y.(ProfessionalBasketballPlayer(y) & -exists z.(ProfessionalBasketballPlayer(z) & -exists w.(ProfessionalBasketballPlayer(w) & -exists w.(ProfessionalBasketballPlayer(w) & SoccerPlayer(w))))", "-exists x.(ProfessionalBallroomPlayer(x) & SoccerPlayer(x))", "all x.((ProfessionalBasketballPlayer(x) & SoccerPlayer(x)) -> -exists y.(ProfessionalBasketballPlayer(y) & -exists z.(ProfessionalBasketballPlayer(z) & SoccerPlayer(z) & -exists w.(ProfessionalBasketballPlayer(w) & SoccerPlayer(w) & SoccerPlayer(w))))", "all x.((ProfessionalBasketballPlayer(x) & SoccerPlayer(x)) -> -exists y.(ProfessionalBasketballPlayer(y) & -exists z.(ProfessionalBasketballPlayer(z) & -exists w.(ProfessionalBasketballPlayer(w) & SoccerPlayer(w) & -exists w.(ProfessionalBasketballPlayer(x,w)))))", "all x.((ProfessionalBasketballPlayer(x) & SoccerPlayer(x)) -> -exists y.(ProfessionalBasketballPlayer(y) & Plays(x,y)))", "all x.((ProfessionalBasketballPlayer(x) & SoccerPlayer(x)) -> -exists y.(ProfessionalBasketballPlayer(y) & -exists z.(ProfessionalBasketballPlayer(z) & SoccerPlayer(z))))"]}
{"id": "folio_train_1127", "nl": "All centerbacks are defenders.", "fol": "all x.(IsCenterback(x) -> IsDefender(x))", "prediction": ["all x.(Centerback(x) -> Defender(x))", "all x.(CenterBack(x) -> Defender(x))", "all x.(Centerback(x) -> Defendant(x))", "all x.(Centerback(x) -> Defensive(x))", "all x.(Centreback(x) -> Defender(x))", "all x.(Centerback(x) -> Defendant(x))", "all x.(Centerback(x) -> Defender(x))", "all x.(CentricBack(x) -> Defender(x))", "all x.(Centerback(x) -> Defenser(x))", "all x.(Censorback(x) -> Defender(x))", "all x.(Centerback(x) -> Defense(x))", "all x y.((Centerback(x) & Defender(y)) -> Defender(x))", "all x y.((Centerback(x) & Defender(y)) -> Defendant(x))", "all x.(Centerback(x) -> Defender(x))", "(all x.(Centerback(x) -> Defender(x)))", "all x.((Centerback(x) & Defender(x)) -> Defendant(x))"]}
{"id": "folio_train_1128", "nl": "Roger Federer is not an NBA player or a defender.", "fol": "-((IsNBAPlayer(Rogerfederer) & -IsDefender(Rogerfederer)) | (-IsNBAPlayer(Rogerfederer) & IsDefender(Rogerfederer)))", "prediction": ["(-(NBAPlayer(RogerFederer) | Defender(RogerFederer)))", "-(NBAPlayer(RogerFederer) | Defender(RogerFederer))", "(-NBAPlayer(RogerFederer) & -Defendant(RogerFederer))", "all x.((RogerFederer(x) & -NBAPlayer(x) & -Defendant(x)) -> -NBAPlayer(x))", "(-NBAPlayer(RogerFederer) & -Defendant(RogerFederer))", "(-NBAPlayer(RogerFederer) & -Defender(RogerFederer))", "all x.((RogerFederer(x) & -NBAPlayer(x) & -defender(x)) -> -NBAPlayer(x))", "all x.((RogerFederer(x) & -NBAPlayer(x) & -Defender(x)) -> -NBAPlayer(x))", "all x.((RogerFederer(x) & -(NBAPlayer(x) | Defender(x))) -> -(NBAPlayer(x) & Defender(x)))", "all x.((RogerFederer(x) & -NBAPlayer(x) & -Defendant(x)) -> -NBAPlayer(x))", "all x.((RogerFederer(x) & -(NBAPlayer(x) | Defender(x)))) -> -(NBAPlayer(x) & Defender(x)))", "all x.((RogerFederer(x) & -(NBAPlayer(x) | Defender(x))) -> -(NBAPlayer(x) | Defender(x))))", "all x.(RogerFederer(x) -> (-NBAPlayer(x) & -Defendant(x)))", "all x.((RogerFederer(x) & -(NBAPlayer(x) | Defender(x))) -> -(NBAPlayer(x) | Defender(x)))", "all x.((RogerFederer(x) & -(NBAPlayer(x) | Defender(x))) -> -(NBAPlayer(x) & Defender(x))))", "all x.((RogerFederer(x) & -NBAPlayer(x) & -Defenser(x)) -> -NBAPlayer(x))"]}
{"id": "folio_train_1129", "nl": "Roger Federer is a centerback.", "fol": "IsCenterback(Rogerfederer)", "prediction": ["all x.((RogerFederer(x) & Centerback(x)) -> Centerback(x))", "all x.(Centerback(x) -> RogerFederer(x))", "(Centerback(RogerFederer)", "All x.((RogerFederer(x) & Centerback(x)) -> Centerback(x))", "all x.((Centerback(x) & RogerFederer(x)) -> Centerback(x))", "all x.(RogerFederer(x) -> Centerback(x))", "all x.((RogerFederer(x) & CenterBack(x)) -> Centerback(x))", "all x.((RogerFederer(x) & Centerback(x)) -> CenterBack(x))", "all x.(Centerback(x) -> RogerFederer(x))", "(Centerback(RogerFederer) & -Centerback(RogerFederer))", "all x.((RogerFederer(x) & Centerback(x)) -> -Centerback(x))", "(Centerback(RogerFederer) -> Centerback(RogerFederer))", "(Centerback(RogerFederer) & Centerback(RogerFederer))", "all x.((RogerFederer(x) & Centerback(x)) -> Plays(x))", "(Centerback(RogerFederer) | Centerback(RogerFederer))", "RogerFederer(RogersFederer) -> Centerback(RogersFederer))"]}
{"id": "folio_train_1130", "nl": "Roger Federer is not a centerback.", "fol": "-IsCenterback(Rogerfederer)", "prediction": ["all x.((RogerFederer(x) & -Centerback(x)) -> -Centerback(x))", "(-Centerback(RogerFederer))", "all x.((RogerFederer(x) & -CenterBack(x)) -> -Centerback(x))", "all x.(RogerFederer(x) -> -Centerback(x))", "All x.((RogerFederer(x) & -Centerback(x)) -> -Centerback(x))", "all x.((RogerFederer(x) & -Centerback(x)) -> -CenterBack(x))", "all x.((RogerFerner(x) & -Centerback(x)) -> -Centerback(x))", "all x.((RogerFederer(x) & -Centerback(x)) -> -centerback(x))", "all x.((RogerFederer(x) & Centerback(x)) -> -Centerback(x))", "all x.((RogerFederer(x) & -Centerback(x)) -> -Centreback(x))", "all x.((RogerFederer(x) & -centerback(x)) -> -Centerback(x))", "all x.((RogerFederer(x) & -Centreback(x)) -> -Centerback(x))", "all x.((RogerFederer(x) & -Centerback(x)) -> -CentricBack(x))", "all x.((RogerFederer(x) & -Centerback(x)) -> - Centerback(x))", "-Centerback(RogerFederer)", "all x.((RogerFederer(x) & -Centerback(x)) -> -Cultback(x))"]}
{"id": "folio_train_1131", "nl": "Roger Federer is a soccer player.", "fol": "IsSoccerPlayer(Rogerfederer)", "prediction": ["all x.((RogerFederer(x) & SoccerPlayer(x)) -> Plays(x,y))", "all x.((RogerFederer(x) & SoccerPlayer(x)) -> Plays(x))", "(SoccerPlayer(RogerFederer)", "all x.((RogerFederer(x) & SoccerPlayer(x)) -> Plays(x,Soccer))", "all x.((RogerFederer(x) & SoccerPlayer(x)) -> FootballPlayer(x))", "all x.((RogerFederer(x) & SoccerPlayer(x)) -> SoccerPlayer(x))", "all x.(RogerFederer(x) -> SoccerPlayer(x))", "all x.(SoccerPlayer(x) -> RogerFederer(x))", "all x.((RogerFederer(x) & SoccerPlayer(x)) -> CanPlay(x))", "all x.((RogerFederer(x) & SoccerPlayer(x)) -> Is(x,y))", "(SoccerPlayer(RogerFederer) & -SoccerPlayer(RogerFederer))", "(SoccerPlayer(RogerFederer) & FootballPlayer(RogerFederer))", "all x.((RogerFederer(x) & SoccerPlayer(x)) -> Plays(x,soccer))", "all x.((Federer(x) & SoccerPlayer(x)) -> Roger(x))", "all x.((RobertFederer(x) & SoccerPlayer(x)) -> Plays(x,y))", "all x.((RogerFederer(x) & SoccerPlayer(x)) -> PlaysIn(x,y))"]}
{"id": "folio_train_1132", "nl": "Some teachers working at a pool are not nice.", "fol": "exists x.(TeacherAtPool(x) & -IsNice(x))", "prediction": ["exists x.(Teacher(x) & WorkingAtPool(x) & -Nice(x))", "exists x.(Teacher(x) & WorksAtPool(x) & -Nice(x))", "exists x.(Teacher(x) & WorkedAtPool(x) & -Nice(x))", "exists x.(Teacher(x) & WorkAtPool(x) & -Nice(x))", "exists x.(Teacher(x) & WorkingAtPool(x))", "exists x y.(Teacher(x) & Pool(y) & WorkingAt(x,y)) -> -Nice(x))", "exists x y.(Teacher(x) & Pool(y) & WorksAt(x,y)) -> -Nice(x))", "exists x.(Teacher(x) & WorkingAtPool(x) & -nice(x))", "exists x y.(Teacher(x) & Pool(y) & WorkedAt(x,y)) -> -Nice(x))", "exists x y.((Teacher(x) & Pool(y) & WorksAt(x,y)) -> -Nice(x))", "exists x y.(Teacher(x) & Pool(y) & WorksAt(x,y))", "exists x.(Teacher(x) & WorksAtPool(x) & -nice(x))", "exists x.(Teacher(x) & WorksAtPool(x))", "exists x.(Teacher(x) & WorkingAtPool(x)) -> -Nice(x))", "exists x y.(Teacher(x) & WorkAtPool(x,y) & -Nice(x))", "exists x.(Teacher(x) & WorkedAtPool(x) & -nice(x))"]}
{"id": "folio_train_1133", "nl": "All teachers working at pools are pool managers.", "fol": "all x.(TeacherAtPool(x) -> IsPoolManager(x))", "prediction": ["all x.((Teacher(x) & WorksAtPools(x)) -> PoolManager(x))", "all x.((Teacher(x) & WorksAtPool(x)) -> PoolManager(x))", "all x.(Teacher(x) -> PoolManager(x))", "all x.((Teacher(x) & WorkingAtPools(x)) -> PoolManager(x))", "all x.(WorksAtPools(x) -> PoolManager(x))", "all x.(Teacher(x) & WorksAtPools(x)) -> PoolManager(x))", "all x.((Teacher(x) & WorkAtPools(x)) -> PoolManager(x))", "all x.((Teacher(x) & WorkedAtPools(x)) -> PoolManager(x))", "all x.(TeacherWorkingAtPools(x) -> PoolManager(x))", "all x.((Teacher(x) & WorkingAtPool(x)) -> PoolManager(x))", "all x.(TeacherWorkingAtPool(x) -> PoolManager(x))", "all x.(WorksAtPool(x) -> PoolManager(x))", "all x.(Teacher(x) & WorksAtPool(x)) -> PoolManager(x))", "all x.((Teacher(x) & WorkAtPool(x)) -> PoolManager(x))", "all x.(WorkingAtPools(x) -> PoolManager(x))", "all x.((Teacher(x) & WorkedAtPool(x)) -> PoolManager(x))"]}
{"id": "folio_train_1134", "nl": "All pool managers are lifeguards.", "fol": "all x.(IsPoolManager(x) -> IsLifeguard(x))", "prediction": ["all x.(PoolManager(x) -> Lifeguard(x))", "all x.((PoolManager(x) & Lifeguard(x)) -> Lifeguard(x))", "all x y.((PoolManager(x) & Pool(y)) -> Lifeguard(x))", "all x.((PoolManager(x) & Lifeguard(x)) -> -Lifeguard(x))", "all x y.((PoolManager(x) & PoolManager(y)) -> Lifeguard(x))", "all x y.((PoolManager(x) & Pool(y)) -> Lifeguard(x,y))", "all x.((PoolManager(x) & Lifeguard(x)) -> PoolManager(x))", "all x.(Member(x) -> Lifeguard(x))", "all x.(MemberOfPool(x) -> Lifeguard(x))", "all x.((PoolManager(x) & Lifeguard(x)) -> Is(x,y))", "all x.(BoatManager(x) -> Lifeguard(x))", "all x.(PoolManager(x) -> Lifeguard(x))", "all x.(BoardManager(x) -> Lifeguard(x))", "(all x.(PoolManager(x) -> Lifeguard(x)))", "all x.((PoolManager(x) & Lifeguard(x)) -> Is(x))", "all x.(Manager(x) -> Lifeguard(x))"]}
{"id": "folio_train_1135", "nl": "If someone is a lifeguard, then they work at a pool.", "fol": "all x.(IsLifeguard(x) -> WorksAtPool(x))", "prediction": ["all x.(Lifeguard(x) -> WorkAtPool(x))", "all x.(Lifeguard(x) -> WorksAtPool(x))", "all x.((Lifeguard(x) & WorkAtPool(x)) -> Lifeguard(x))", "all x.((Lifeguard(x) & WorkAtPool(x)) -> WorkAtPool(x))", "all x.((Lifeguard(x) & WorksAtPool(x)) -> Lifeguard(x))", "all x.((Lifeguard(x) & WorksAtPool(x)) -> WorkAtPool(x))", "all x.(Lifeguard(x) -> exists y.(Pool(y) & WorkAt(x,y))))", "all x.((Lifeguard(x) & WorkAtPool(x)) -> WorksAtPool(x))", "all x.(Lifeguard(x) -> exists y.(Pool(y) & WorksAt(x,y))))", "all x.((Lifeguard(x) & WorksAtPool(x)) -> WorksAtPool(x))", "all x.((Lifeguard(x)) -> WorkAtPool(x))", "all x y.((Lifeguard(x) & Pool(y)) -> WorkAt(x,y))", "all x y.((Lifeguard(x) & Pool(y)) -> WorksAt(x,y))", "all x.((Lifeguard(x) & WorkAtPool(x)) -> LifeguardWorksAtPool(x))", "all x.(Livingguard(x) -> WorkAtPool(x))", "all x.((Lifeguard(x) & WorkAtPool(x)) -> WorkAt(x,Pool))"]}
{"id": "folio_train_1136", "nl": "Mary does not work at a pool.", "fol": "-WorksAtPool(Mary)", "prediction": ["all x.((Mary(x) & -WorksAtPool(x)) -> -WorksAtPool(x))", "all x.(Mary(x) -> -WorksAtPool(x))", "all x.((Mary(x) & Pool(y)) -> -WorksAt(x,y))", "all x.((Maria(x) & -WorksAtPool(x)) -> -WorksAtPool(x))", "all x.(Maria(x) -> -WorksAtPool(x))", "all x y.((Mary(x) & Pool(y)) -> -WorksAt(x,y))", "(-WorksAtPool(Mary))", "exists x.(Mary(x) & -WorksAtPool(x))", "all x.((Mary(x) & WorkAtPool(x)) -> -WorkAtPool(x))", "all x.((Mary(x) & -WorkAtPool(x)) -> -WorkAtPool(x))", "all x y.((Maria(x) & Pool(y)) -> -WorksAt(x,y))", "exists x.(Maria(x) & -WorksAtPool(x))", "all x.((Mary(x) & WorkAtPool(x)) -> -WorksAtPool(x))", "all x.((Mary(x) & -WorksAtPool(x)) -> -WorksAt(x,Pool))", "(WorksAtPool(Mary) & -WorksAtPool(Mary))", "all x.((Mary(x) & -WorksAtPool(x)) -> DoesNotWorkAtPool(x))"]}
{"id": "folio_train_1137", "nl": "Mary is nice.", "fol": "IsNice(Mary)", "prediction": ["all x.(Mary(x) -> Nice(x))", "all x.((Mary(x) & Nice(x)) -> Nice(x))", "all x.(Maria(x) -> Nice(x))", "exists x.(Mary(x) & Nice(x))", "Mary is nice.", "(Nice(Mary) & Nice(Mary))", "All x.(Mary(x) -> Nice(x))", "all x.(Mama(x) -> Nice(x))", "(Nice(Mary) -> Nice(Mary))", "exists x.(Maria(x) & Nice(x))", "exists x.(Mama(x) & Nice(x))", "(Pretty(Mary) & Nice(Mary))", "All x.(Maria(x) -> Nice(x))", "all x.((Mary(x) & Nice(x)) -> Lovely(x))", "(Nice(Mary) -> Nice(Mary)))", "all x.((Mary(x) & Nice(x)) -> Beautiful(x))"]}
{"id": "folio_train_1138", "nl": "Mary is not nice and is a teacher working at a pool.", "fol": "(-IsNice(Mary) & TeacherAtPool(Mary))", "prediction": ["all x.((Mary(x) & -Nice(x)) -> TeacherWorkingAtPool(x))", "all x.(Mary(x) -> (-Nice(x) & TeacherWorkingAtPool(x)))", "all x.(Maria(x) -> (-Nice(x) & TeacherWorkingAtPool(x)))", "(-Nice(Mary) & TeacherWorkingAtPool(Mary))", "all x.(Mary(x) -> (-Nice(x) & Teacher(x) & WorkingAtPool(x)))", "all x.((Maria(x) & -Nice(x)) -> TeacherWorkingAtPool(x))", "all x.((Mary(x) & -Nice(x)) -> (TeacherWorkingAtPool(x)))", "all x.(Maria(x) -> (-Nice(x) & Teacher(x) & WorkingAtPool(x)))", "all x y.((Mary(x) & Pool(y)) -> (-Nice(x) & Teacher(x) & WorkingAt(x,y)))", "all x y.((Mary(x) & Pool(y)) -> (-Nice(x) & TeacherWorkingAt(x,y)))", "all x.((Mary(x) & -Nice(x)) -> (Teacher(x) & WorkingAtPool(x)))", "all x.(Maria(x) -> (-nice(x) & TeacherWorkingAtPool(x)))", "all x.(Mary(x) -> (-nice(x) & TeacherWorkingAtPool(x)))", "all x.((Mary(x) & -Nice(x)) -> WorkingAtPool(x))", "all x.(Mary(x) -> (-Nice(x) & Teacher(x) & WorkedAtPool(x)))", "all x.((Mary(x) & -Nice(x)) -> WorkerAtPool(x))"]}
{"id": "folio_train_1139", "nl": "Mary is nice and is a teacher working at a pool.", "fol": "(IsNice(Mary) & TeacherAtPool(Mary))", "prediction": ["all x.(Maria(x) -> (Nice(x) & TeacherWorkingAtPool(x)))", "all x.((Mary(x) & Nice(x)) -> TeacherWorkingAtPool(x))", "all x.(Mary(x) -> (Nice(x) & TeacherWorkingAtPool(x)))", "all x.(Maria(x) -> (Nice(x) & Teacher(x) & WorkingAtPool(x)))", "all x.(Mary(x) -> (Nice(x) & Teacher(x) & WorkingAtPool(x)))", "(Nice(Mary) & TeacherWorkingAtPool(Mary))", "all x.(Mama(x) -> (Nice(x) & TeacherWorkingAtPool(x)))", "all x y.((Mary(x) & Pool(y)) -> (Nice(x) & Teacher(x) & WorkingAt(x,y)))", "all x.(Maria(x) -> (Nice(x) & Teacher(x) & WorkedAtPool(x)))", "all x.((Maria(x) & Nice(x)) -> TeacherWorkingAtPool(x))", "all x.(Mary(x) -> (Nice(x) & Teacher(x) & WorkedAtPool(x)))", "all x.(Mama(x) -> (Nice(x) & Teacher(x) & WorkingAtPool(x)))", "all x.((Mama(x) & Nice(x)) -> TeacherWorkingAtPool(x))", "all x y.((Mama(x) & Pool(y)) -> (Nice(x) & Teacher(x) & WorkingAt(x,y)))", "all x y.((Mary(x) & Pool(y)) -> (Nice(x) & TeacherWorkingAt(x,y)))", "all x y.((Mary(x) & Pool(y)) -> (Nice(x) & Teacher(x) & WorksAt(x,y)))"]}
{"id": "folio_train_1140", "nl": "Not all art pieces require talent.", "fol": "exists x.(IsArtPiece(x) & -NeedsTalent(x))", "prediction": ["-all x.(ArtPiece(x) -> RequiresTalent(x))", "-all x.(ArtPiece(x) -> NeedsTalent(x))", "-all x.(ArtPiece(x) -> TalentRequired(x))", "(-all x.(ArtPiece(x) -> RequiresTalent(x)))", "-all x y.((ArtPiece(x) & Talent(y)) -> Requires(x,y))", "-all x.(ArtPiece(x) -> RequiresTradition(x))", "-all x.(ArtPiece(x) -> RequiresTraining(x))", "(-all x.(ArtPiece(x) -> RequiresTalent(x))", "exists x.(ArtPiece(x) & -RequiresTalent(x))", "\u2013all x.(ArtPiece(x) -> RequiresTalent(x))", "-all x.(ArtPiece(x) -> RequireTalent(x))", "-all x y.(ArtPiece(x) -> RequiresTalent(x))", "-all x.(ArtPiece(x) -> RequiresTalendar(x))", "-all x.(ArtPiece(x) -> TalentRequires(x))", "-all x.(ArtPiece(x) -> RequiredTalent(x))", "-all x.(ArtPiece(x) -> RequiresTalentine(x))"]}
{"id": "folio_train_1141", "nl": "Everything that requires talent requires practice.", "fol": "all x.(NeedsTalent(x) -> NeedsPractice(x))", "prediction": ["all x.((RequiresTalent(x)) -> RequiresPractice(x))", "all x.((RequiresTalent(x) & RequiresPractice(x)) -> RequiresPractice(x))", "all x.(RequiresTalent(x) -> RequiresPractice(x))", "all x.((RequiresTalent(x) & RequiresPractice(x)) -> RequiresTalent(x))", "all x.((RequiresTalent(x) -> RequiresPractice(x))", "all x.((RequiresTalent(x) & RequiresPractice(x)) -> RequiresTraining(x))", "all x.((Talent(x) & Requires(x,Talent)) -> RequiresPractice(x))", "all x.((RequiresTalent(x) & RequiresPractice(x)) -> Requires(x))", "all x.((Talent(x) & Requires(x,y)) -> RequiresPractice(x))", "all x.((Talent(x) & Requires(x)) -> RequiresPractice(x))", "all x.((RequiresTalent(x) & RequiresPractice(x)) -> NeedsPractice(x))", "all x.((RequiresTalent(x) & RequiresPractice(x)) -> Requires(x,Talent))", "all x.((RequiresTalent(x) & RequiresPractice(x)) -> Requires(x,y))", "all x y.((RequiresTalent(x) & RequiresPractice(y)) -> RequiresTalent(x,y))", "all x y.((RequiresTalent(x) & RequiresPractice(y)) -> RequiresPractice(x,y))", "all x.((Talent(x) & Requires(x,talent)) -> RequiresPractice(x))"]}
{"id": "folio_train_1142", "nl": "There exist art pieces that do not require practice.", "fol": "exists x.(IsArtPiece(x) & -NeedsPractice(x))", "prediction": ["exists x.(ArtPiece(x) & -RequiresPractice(x))", "exist x.(ArtPiece(x) & -RequiresPractice(x))", "exists x y.(ArtPiece(x) & ArtPiece(y) & -RequiresPractice(x,y))", "exists x y.(ArtPiece(x) & ArtPiece(y) & -RequiresPractice(y))", "exists x y.(ArtPiece(x) & ArtPiece(y) & -RequiresPractice(x))", "Exists x.(ArtPiece(x) & -RequiresPractice(x))", "exists x.(ArtPiece(x) & -RequirePractice(x))", "exists x.(ArtPiece(x) & -(RequiresPractice(x) | RequiresPractice(x)))", "exists x.exists y.(ArtPiece(x) & ArtPiece(y) & -RequiresPractice(y))", "exists x.exists y.(ArtPiece(x) & ArtPiece(y) & -RequiresPractice(x,y))", "exists x y.(ArtPiece(x) & ArtPiece(y) & -RequiresPractice(y,x))", "exists x.exists y.(ArtPiece(x) & ArtPiece(y) & -RequiresPractice(x))", "exists x.(ArtPiece(x) & -(RequiresPractice(x) | RequiresPractice(x))))", "exists x.(ArtPiece(x) & -requiresPractice(x))", "exists x.(ArtPiece(x) & -(RequiresPractice(x) | -RequiresPractice(x)))", "exists x.(ArtPiece(x) & DoesNotRequirePractice(x))"]}
{"id": "folio_train_1143", "nl": "Bernarda Bryson Shahn was a painter and lithographer.", "fol": "(IsPainter(BernardaBrysonShahn) & IsLithographer(BernardaBrysonShahn))", "prediction": ["(Painter(BernardaBrysonShahn) & Lithographer(BernardaBrysonShahn))", "all x.(BernardaBrysonShahn(x) -> (Painter(x) & Lithographer(x)))", "all x.(BerrysonBrysonShahn(x) -> (Painter(x) & Lithographer(x)))", "all x.((BernardaBrysonShahn(x) & Painter(x) & Lithographer(x)) -> PainterAndLithographer(x))", "(Painter(BernardaBrysonShahn) & Litographer(BernardaBrysonShahn))", "(Painter(BernardaBrysonShahn) & Literographer(BernardaBrysonShahn))", "all x.(BernardaBrysonShahn(x) -> (Painter(x) & Litographer(x)))", "(Painter(BerrysonShahn) & Lithographer(BerrysonShahn))", "all x.((Painter(x) & Lithographer(x)) -> BernardaBrysonShahn(x))", "all x.((BernardaBrysonShahn(x) & Painter(x) & Lithographer(x)) -> Painter(x))", "(Painter(BertinaBrysonShahn) & Lithographer(BertinaBrysonShahn))", "all x.((BernardaBrysonShahn(x) & Painter(x) & Lithographer(x)) -> PainterAndLitographer(x))", "all x.((BernardaBrysonShahn(x) & Painter(x) & Lithographer(x)) -> Artist(x))", "all x.(BernardaBrysonShahn(x) -> (Painter(x) & Literographer(x)))", "all x.((BernardaBrysonShahn(x) & Painter(x) & Lithographer(x)) -> Shahn(x))", "(Painter(BernardaBrysonShann) & Lithographer(BernardaBrysonShahn))"]}
{"id": "folio_train_1144", "nl": "Bernarda Bryson Shahn was born in Athens, Ohio. ", "fol": "BornInLocation(BernardaBrysonShahn,AthensOhio)", "prediction": ["(BernardaBrysonShahn(BernardaBrysonShahn) & BornIn(BernardaBrysonShahn) & BornIn(BernardaBrysonShahn) & BornIn(BernardaBrysonShahn) & BornIn(BernardaBrysonShahn) & BornIn(BernardaBrysonShah", "(BernardaBrysonShahn(Bernarda) & BornIn(BernardaBrysonShahn) & BornIn(BernardaBrysonShahn) & BornIn(BernardaBrysonShahn) & BornIn(BernardaBrysonShahn) & BornIn(BernardaBrysonShahn))", "(BernardaBrysonShahn(BernardaBrysonShahn) & BornIn(BernardaBrysonShahn) & BornIn(BernardaBrysonShahn) & BornIn(BernardaBrysonShahn) & BornIn(BernardaBrysonShahn))", "(BernardaBrysonShahn(BernardaBrysonShahn) & BornIn(BernardaBrysonShahn) & BornIn(BernardaBrysonShahn) & BornIn(BernardaBrysonShahn) & BornIn(BernardaBrysonShahn,Athens,Ohio))", "(BernardaBrysonShahn(Bernarda) & BornIn(BernardaBrysonShahn) & BornIn(BernardaBrysonShahn) & BornIn(BernardaBrysonShahn) & BornIn(BernardaBrysonShahn) & BornIn(BernardaBrysonShahn) & BornIn(BernardaB", "(BernardaBrysonShahn(BernardaBrysonShahn) & BornIn(BernardaBrysonShahn) & BornIn(BernardaBrysonShahn) & BornIn(BernardaBrysonShahn) & BornIn(BernardaBrysonShahn,Athens,Ohio))", "(BernardaBrysonShahn(Bernarda) & BornIn(BernardaBrysonShahn) & BornIn(BernardaBrysonShahn) & BornIn(BernardaBrysonShahn) & BornIn(BernardaBrysonShahn,Athens,Ohio))", "(BernardaBrysonShahn(Bernarda) & BornIn(BernardaBrysonShahn) & BornIn(BernardaBrysonShahn) & BornIn(BernardaBrysonShahn) & BornIn(BernardaBrysonShahn))", "(BernardaBrysonShahn(BernardaBrysonShahn) & BornIn(BernardaBrysonShahn) & BornIn(BernardaBrysonShahn) & BornIn(BernardaBrysonShahn,Athens,Ohio))", "(BernardaBrysonShahn(Bernarda) & BornIn(BernardaBrysonShahn) & BornIn(BernardaBrysonShahn) & BornIn(BernardaBrysonShahn) & BornIn(BernardaBrysonShahn) & BornIn(BernardaBrysonShahn,Athens,Ohio))", "(BernardaBrysonShahn(Bernarda) & BornIn(BernardaBrysonShahn) & BornIn(BernardaBrysonShahn) & BornIn(BernardaBrysonShahn) & BornIn(BernardaBrysonShahn,Athens,Ohio))", "(BernardaBrysonShahn(Bernarda) & BornIn(BernardaBrysonShahn) & BornIn(BernardaBrysonShahn) & BornIn(BernardaBrysonShahn) & BornIn(BernardaBrysonShahn) & BornIn(BernardaBrysonShahn) & Born", "(BernardaBrysonShahn(Bernarda) & BornIn(BernardaBrysonShahn) & BornIn(BernardaBrysonShahn) & BornIn(BernardaBrysonShahn) & BornIn(BernardaBrysonShahn) & BornIn(BernardaBrysonShahn) & BornIn(Bernarda", "(BernardaBrysonShahn(BernardaBrysonShahn) & BornIn(BernardaBrysonShahn) & BornIn(BernardaBrysonShahn) & BornIn(BernardaBrysonShahn))", "Bernarda Bryson Shahn was born in Athens, Ohio.", "(BernardaBrysonShahn(BernardaBrysonShahn) & BornIn(BernardaBrysonShahn) & BornIn(BernardaBrysonShahn) & BornIn(BernardaBrysonShahn,Athens,Ohio))"]}
{"id": "folio_train_1145", "nl": "Bernarda Bryson Shahn was married to Ben Shahn.", "fol": "IsMarriedTo(BernardaBrysonShahn,BenShahn)", "prediction": ["all x y.((BernardaBrysonShahn(x) & BenShahn(y)) -> Married(x,y))", "(MarriedTo(BernardaBrysonShahn) & BernardaBrysonShahn(BernardaBrysonShahn))", "all x.((BernardaBrysonShahn(x) & MarriedTo(x,BenShahn)) -> Married(x,BenShahn))", "(MarriedTo(BernardaBrysonShahn) & BenShahn(BernardaBrysonShahn))", "all x y.((BernardaBrysonShahn(x) & BenShahn(y)) -> MarriedTo(x,y))", "(MarriedTo(BernardaBrysonShahn) & BernardaBrysonShahn(BenShahn))", "(Married(BernardaBrysonShahn) & BenShahn(BernardaBrysonShahn))", "all x.((BernardaBrysonShahn(x) & BenShahn(x)) -> Married(x))", "(MarriedTo(BernardaBrysonShahn) | MarriedTo(BernardaBrysonShahn)))", "(MarriedTo(BenShahn) & BernardaBrysonShahn(BenShahn))", "(MarriedTo(BernardaBrysonShahn) & BrysonShahn(BernardaBrysonShahn))", "all x.((BernardaBrysonShahn(x) & MarriedTo(x,BenShahn)) -> MarriedTo(x,BenShahn))", "(MarriedTo(BernardaBrysonShahn) & BornTo(BernardaBrysonShahn))", "(Married(BernardaBrysonShahn) & BenShahn(Ben))", "all x.((BernardaBrysonShahn(x) & BenShahn(x)) -> MarriedTo(x,BernardaBrysonShahn))", "(MarriedTo(BernardaBrysonShahn) & BenShahn(Ben))"]}
{"id": "folio_train_1146", "nl": "People born in Athens, Ohio are Americans.", "fol": "all x.(BornInLocation(x,AthensOhio) -> IsAmerican(x))", "prediction": ["all x.((Person(x) & BornInAthens(x) & BornInOhio(x)) -> American(x))", "all x.((Person(x) & BornInAthens(x)) -> American(x))", "all x.((Person(x) & BornInAthens(x) & BornInOakland(x)) -> American(x))", "all x.((Person(x) & BornInAthens(x) & BornInOhio(x)) -> American(x))", "all x.((Person(x) & BornInAthens(x) & BornInOhio(x)) -> Americans(x))", "all x.((Person(x) & BornInAthens(x) & BornInOakland(x)) -> Americans(x))", "all x.((BirthInAthens(x) & BornInOhio(x)) -> American(x))", "all x.((Person(x) & BornInAthens(x) & BornInOhio(x)) -> American(x))", "all x.((Person(x) & BornInAthens(x) & BornInOhio(x)) -> Americans(x))", "all x.((Person(x) & BornIn(x,Athens) & BornIn(x,Ohio)) -> American(x))", "all x.((Person(x) & BornInAthens(x) & BornInOhio(x)) -> American(x))", "all x.((Person(x) & BornInAthens(x) & BornInOhio(x)) -> American(x))", "all x.((Person(x) & BornInAthens(x) & BornInOakland(x)) -> American(x))", "all x.((BirthInAthens(x) & BornInOakland(x)) -> American(x))", "all x.((Person(x) & BornInAthens(x) & BornInOxford(x)) -> American(x))", "all x.((BirthInAthens(x) & BornInOhio(x)) -> Americans(x))"]}
{"id": "folio_train_1147", "nl": "Bernarda Bryson Shahn was born in Greece.", "fol": "BornInLocation(BernardaBrysonShahn,Greece)", "prediction": ["(BernardaBrysonShahn(Bernarda) & BornIn(Bernarda,Greece))", "Bernarda BrysonShahn was born in Greece.", "Bernarda Bryson Shahn was born in Greece.", "(BernardaBrysonShahn(BernardaBrysonShahn) was bornIn(BernardaBrysonShahn) & BornIn(BernardaBrysonShahn) & BornIn(BernardaBrysonShahn))", "(BernardaBrysonShahn(BernardaBrysonShahn) was bornIn(BernardaBrysonShahn) & BornIn(BernardaBrysonShahn))", "(BernardaBrysonShahn(BernardaBrysonShahn) was bornIn(BernardaBrysonShahn) & BornIn(BernardaBrysonShahn) & BornIn(BernardaBrysonShahn) & BornIn(BernardaBrysonShahn))", "(BernardaBrysonShahn(Bernarda) & BornIn(Bernarda,Griece))", "(BernardaBrysonShahn(Bernarda) & BornIn(Bernarda))", "(BernardaBrysonShahn(BernardaBrysonShahn) & BornIn(BernardaBrysonShahn) & BornIn(BernardaBrysonShahn))", "(BernardaBrysonShahn(BernardaBrysonShahn) was bornIn(BernardaBrysonShahn) & BornIn(BernardaBrysonShahn) & BornIn(BernardaBrysonShahn,Greece))", "(BernardaBrysonShahn(BernardaBrysonShahn) & BornIn(BernardaBrysonShahn) & BornIn(BernardaBrysonShahn) & BornIn(BernardaBrysonShahn))", "(BernardaBrysonShahn(BernardaBrysonShahn) was bornIn(BernardaBrysonShahn) & BornIn(BernardaBrysonShahn,Greece))", "(BernardaBrysonShahn(Bernarda) & BornIn(BernardaBrysonShahn,Greece))", "(BernardaBrysonShahn(BernardaBrysonShahn) & BornIn(BernardaBrysonShahn) & BornIn(BernardaBrysonShahn) & BornIn(BernardaBrysonShahn) & BornIn(BernardaBrysonShahn))", "(BernardaBrysonShahn(Bernarda) & BornIn(BernardaBrysonShahn))", "(BernardaBrysonShahn(BernardaBrysonShahn) & BornIn(BernardaBrysonShahn))"]}
{"id": "folio_train_1148", "nl": "Bernarda Bryson Shahn was American.", "fol": "IsAmerican(BernardaBrysonShahn)", "prediction": ["All x.((BernardaBrysonShahn(x) & American(x)) -> BrysonShahn(x))", "All x.(BernardaBrysonShahn(x) -> American(x))", "all x.((BernardaBrysonShahn(x) & American(x)) -> BrysonShahn(x))", "(American(BernardaBrysonShahn) & American(BernardaBrysonShahn))", "all x.((BernardaBrysonShahn(x) & American(x)) -> Was(x))", "all x.((BernardaBrysonShahn(x) & American(x)) -> BernardaBrysonShahn(x))", "All x.((BernardaBrysonShahn(x) & American(x)) -> BernardaBrysonShahn(x))", "all x.(BernardaBrysonShahn(x) -> American(x))", "all x.((BernardaBrysonShahn(x) & American(x)) -> Was(x,BernardaBrysonShahn))", "All x.((BernardaBrysonShahn(x) & American(x)) -> Was(x))", "All x.((BernardaBrysonShahn(x) & American(x)) -> Was(x,BernardaBrysonShahn))", "All x.((BernardaBrysonShahn(x) & American(x)) -> BrysonShann(x))", "all x.((BernardaBrysonShahn(x) & American(x)) -> Was(x,Bernarda,Bryson,Shahn))", "all x.((BernardaBrysonShahn(x) & American(x)) -> BrysonShann(x))", "All x.((BernardaBrysonShahn(x) & American(x)) -> Was(x,Bernarda,Bryson,Shahn))", "(Asian(BernardaBrysonShahn) & American(BernardaBrysonShahn))"]}
{"id": "folio_train_1149", "nl": "Bernarda Bryson Shahn had been divorced once.", "fol": "DivorcedOnce(BernardaBrysonShahn)", "prediction": ["all x.((BernardaBrysonShahn(x) & Divorced(x)) -> Divorced(x))", "all x.(BernardaBrysonShahn(x) -> Divorced(x))", "All x.((BernardaBrysonShahn(x) & Divorced(x)) -> Divorced(x))", "all x.(BernardaBrysonShahn(x) -> DivorcedOneTime(x))", "all x.((BerrysonBrysonShahn(x) & Divorced(x)) -> Divorced(x))", "all x.((BernardaBrysonShahn(x) & Divorced(x)) -> HadBernardaBrysonShahn(x))", "All x.(BernardaBrysonShahn(x) -> Divorced(x))", "all x.((BernardaBrysonShahn(x) & Divorced(x)) -> Dissolved(x))", "all x y.((BernardaBrysonShahn(x) & BernardaBryson(y)) -> Divorced(x,y))", "all x y.((BernardaBrysonShahn(x) & Divorced(y)) -> Divorced(x,y))", "all x.((BernardaBrysonShahn(x) & Divorced(x)) -> DivorcedOneTime(x))", "all x.((BernardaBrysonShahn(x) & DivorcedOneTime(x)) -> DivorcedOneTime(x))", "all x.(BernardaBrysonShahn(x) -> DivorcedOnce(x))", "all x.(BernardaBrysonShahn(x) -> DivorcedOnly(x))", "all x.((BernardaBrysonShahn(x) & Divorced(x)) -> DivorcedOnce(x))", "all x.(BerrysonBrysonShahn(x) -> Divorced(x))"]}
{"id": "folio_train_1150", "nl": "If people upgrade to the newest iPhone model every year, then they are not saving money for a down payment on a new house.", "fol": "all x.(UpgradesToIphone(x) -> -SavingForHouseDownPayment(x))", "prediction": ["all x y.((Person(x) & iPhoneModel(y) & UpgradesEveryYear(x,y)) -> -SavingMoneyForNewHouse(x))", "all x.((Person(x) & UpgradesToNewestAppleModelEveryYear(x)) -> -SavingMoneyForNewHouse(x))", "all x.((Person(x) & UpgradesToNewestIphoneModelEveryYear(x)) -> -SavingMoneyForNewHouse(x))", "all x y.((Person(x) & iPhoneModel(y) & UpgradesEveryYear(x,y)) -> -SavingMoneyForDownPayment(x,y))", "all x y.((Person(x) & iPhone(y) & UpgradesEveryYear(x,y)) -> -SavingMoneyForNewHouse(x))", "all x.((Person(x) & UpgradesToNewestAppleModel(x) & EveryYear(x)) -> -SavingMoneyForNewHouse(x))", "all x y.((Person(x) & iPhone(y) & UpgradesEveryYear(x,y)) -> -SavingMoneyForDownPayment(x,y))", "all x y.((Person(x) & iPhoneModel(y) & UpgradesEveryYear(x,y)) -> -SavingMoneyForDownPayment(x))", "all x.((Person(x) & UpgradesToNewestIphoneModel(x) & EveryYear(x)) -> -SavingMoneyForNewHouse(x))", "all x y.((Person(x) & iPhoneModel(y) & UpgradesEveryYear(x,y)) -> -SavingMoneyForNewHouse(x,y))", "all x y.((Person(x) & iPhoneModel(y) & UpgradesEveryYear(x,y)) -> -SavesMoneyForDownPayment(x,y))", "all x y.((Person(x) & iPhoneModel(y) & UpgradesEveryYear(x,y)) -> -SavingMoneyForHouse(x))", "all x.((Person(x) & UpgradesToNewestAppleModelEveryYear(x)) -> -SavesMoneyForNewHouse(x))", "all x y.((Person(x) & iPhone(y) & UpgradesEveryYear(x,y)) -> -SavingMoneyForNewHouse(x,y))", "all x.((Person(x) & UpgradesToNewestIphoneModelEveryYear(x)) -> -SavingMoneyForDownPayment(x))", "all x.((Person(x) & UpgradesToNewestIphoneModelEveryYear(x)) -> -SavesMoneyForNewHouse(x))"]}
{"id": "folio_train_1151", "nl": "If people enjoy reading about tech specs and keeping up to date on the latest technology, then they upgrade to the newest iPhone model every year.", "fol": "all x.(EnjoysTechReading(x) -> UpgradesToIphone(x))", "prediction": ["all x.((Person(x) & EnjoysReadingTechSpecs(x) & KeepsUpToDateOnTechnology(x)) -> UpgradesToNewestIphoneModel(x))", "all x.((Person(x) & EnjoysReadingTechSpecs(x) & UpToDateTechnology(x)) -> UpgradesToNewestIphoneModel(x))", "all x.((Person(x) & EnjoysReadingTechSpecs(x) & KeepsUpToDateOnTechnology(x)) -> UpgradesToNewestAppleModel(x))", "all x.((Person(x) & EnjoysReadingTechSpecs(x) & UpToDateTechnology(x)) -> UpgradesToNewestAppleModel(x))", "all x.((Person(x) & EnjoysReadingTechSpecs(x) & KeepsUpToDateOnTechnology(x)) -> UpgradesToNewestIphoneModelEveryYear(x))", "all x.((People(x) & EnjoysReadingTechSpecs(x) & KeepsUpToDateOnTechnology(x)) -> UpgradesToNewestIphoneModel(x))", "all x.((People(x) & EnjoysReadingTechSpecs(x) & UpToDateTechnology(x)) -> UpgradesToNewestIphoneModel(x))", "all x.((Person(x) & EnjoysReadingTechSpecs(x) & UpToDateOnTechnology(x)) -> UpgradesToNewestIphoneModel(x))", "all x.((Person(x) & EnjoysReadingTechSpecs(x) & UpToDateTechnology(x)) -> UpgradesToNewestIphoneModelEveryYear(x))", "all x.((Person(x) & EnjoysReadingTechSpecs(x) & KeepsUpToDateOnNewTechnology(x)) -> UpgradesToNewestIphoneModel(x))", "all x.((Person(x) & EnjoysReadingTechSpecs(x) & KeepsUpToDateOnTechnology(x)) -> UpgradesToNewestAppleModelEveryYear(x))", "all x.((Person(x) & EnjoysReadingTechSpecs(x) & KeepsUpToDateOnNewTechnology(x)) -> UpgradesToNewestAppleModel(x))", "all x.((People(x) & EnjoysReadingTechSpecs(x) & UpToDateTechnology(x)) -> UpgradesToNewestAppleModel(x))", "all x.((People(x) & EnjoysReadingTechSpecs(x) & KeepsUpToDateOnTechnology(x)) -> UpgradesToNewestAppleModel(x))", "all x.((Person(x) & EnjoysReadingTechSpecs(x) & KeepsUpToDateOnLatestTechnology(x)) -> UpgradesToNewestIphoneModel(x))", "all x.((Person(x) & EnjoysReadingTechSpecs(x) & KeepsUpToDateOnTechnology(x)) -> UpgradeToNewestIphoneModel(x))"]}
{"id": "folio_train_1152", "nl": "People either are saving money for a down payment on a new house or they live in apartments in big metropolitan cities.", "fol": "all x.(SavingForHouseDownPayment(x) | LivesInApartment(x))", "prediction": ["all x y.((Person(x) & House(y)) -> (SavingMoney(x,y) | LivingInApartments(x,y)))", "all x y.((Person(x) & NewHouse(y)) -> (SavingMoney(x,y) | LivingInApartments(x,y)))", "all x y.((Person(x) & House(y)) -> (SavingMoneyForDownPayment(x,y) | LivingInApartments(x,y)))", "all x y z.((Person(x) & House(y) & Apartment(z)) -> (SavingMoney(x,y) | LivingInMetropolitanCities(x,z)))", "all x y z.((Person(x) & House(y) & Apartment(z)) -> (SavingMoneyForDownPayment(x,y) | LivingInMetropolitanCities(x,z)))", "all x y.((Person(x) & House(y)) -> (SavingMoneyForDownPayment(x,y) | LivesInApartments(x,y)))", "all x.(Person(x) -> (SavingMoney(x) & DownPaymentOnNewHouse(x) | LivesInApartmentsInMetropolitanCities(x)))", "all x y.((Person(x) & House(y)) -> (SavingMoney(x,y) | LivesInApartments(x,y)))", "all x y.((Person(x) & NewHouse(y)) -> (SavingMoneyForDownPayment(x,y) | LivingInApartments(x,y)))", "all x y z.((Person(x) & House(y) & Apartment(z)) -> (SavingMoneyForDownPayment(x,y) | LivesInMetropolitanCities(x,z)))", "all x y z.((Person(x) & House(y) & Apartment(z)) -> (SavingMoney(x,y) | LivingInMetropolitanCity(x,z)))", "all x y z.((Person(x) & House(y) & Apartment(z)) -> (SavingMoney(x,y) | LivingIn(x,z)))", "all x y z.((Person(x) & House(y) & Apartment(z)) -> (SavingMoneyForDownPayment(x,y) | LivingInMetropolitanCity(x,z)))", "all x.(Person(x) -> (SavingMoney(x) & DownPayment(x) | LivesInApartments(x)))", "all x y.((Person(x) & House(y)) -> (SavingMoneyForDownPayment(x,y) | LivingInApartmentsInMetropolitanCities(x)))", "all x.((Person(x) & (SavesMoney(x) | LivesInApartments(x))) -> NewHouse(x))"]}
{"id": "folio_train_1153", "nl": "If people live with at least one roommate then they do not own at least one pet.", "fol": "all x.(LivesWithRoommate(x) -> -OwnsPet(x))", "prediction": ["all x.((Person(x) & LivesWithAtLeastOneRoommate(x)) -> -OwnAtLeastOnePet(x))", "all x.((Person(x) & LivesWithAtLeastOneRoommate(x)) -> -OwnsAtLeastOnePet(x))", "all x.((LivesWithAtLeastOneRoommate(x) & -OwnAtLeastOnePet(x)) -> -OwnAtLeastOnePet(x))", "all x.(LivesWithAtLeastOneRoommate(x) -> -OwnAtLeastOnePet(x))", "all x.(LivesWithAtLeastOneRoommate(x) -> -OwnsAtLeastOnePet(x))", "all x.((LivesWithAtLeastOneRoommate(x) & -OwnsAtLeastOnePet(x)) -> -OwnsAtLeastOnePet(x))", "all x.((People(x) & LivesWithAtLeastOneRoommate(x)) -> -OwnAtLeastOnePet(x))", "all x.((People(x) & LivesWithAtLeastOneRoommate(x)) -> -OwnsAtLeastOnePet(x))", "all x y.((Person(x) & Roommate(y) & LivesWith(x,y)) -> -OwnsPet(x,y))", "all x y.((Person(x) & Roommate(y) & LivesWith(x,y)) -> -Owns(x,y))", "all x.((LivesWithAtLeastOneRoommate(x) & -OwnsAtLeastOnePet(x)) -> -LivesWithAtLeastOnePet(x))", "all x.((LivesWithAtLeastOneRoommate(x) & -OwnAtLeastOnePet(x)) -> -LivesWithAtLeastOnePet(x))", "all x.((LivesWithAtLeastOneRoommate(x)) -> -OwnAtLeastOnePet(x))", "all x.((Person(x) & LivesWithAtLeastOneRoommate(x)) -> -BelongsToAtLeastOnePet(x))", "all x.((LivesWithAtLeastOneRoommate(x) & -OwnsAtLeastOnePet(x)) -> -OwnAtLeastOnePet(x))", "all x.((Personal(x) & LivesWithAtLeastOneRoommate(x)) -> -OwnAtLeastOnePet(x))"]}
{"id": "folio_train_1154", "nl": "All people who own at least one pet live with at least one roommate.", "fol": "all x.(LivesInApartment(x) -> LivesWithRoommate(x))", "prediction": ["all x.((Person(x) & OwnsPet(x)) -> LivesWithRoommate(x))", "all x.((Person(x) & OwnsAtLeastOnePet(x)) -> LivesWithAtLeastOneRoommate(x))", "all x.(OwnsAtLeastOnePet(x) -> LivesWithAtLeastOneRoommate(x))", "all x.((Person(x) & OwnsOnePet(x)) -> LivesWithAtLeastOneRoommate(x))", "all x.(OwnsPet(x) -> LivesWithRoommate(x))", "all x.((Person(x) & Owns(x,y) & Pet(y)) -> LivesWith(x,y))", "all x.((Person(x) & OwnsTwoPets(x)) -> LivesWithAtLeastOneRoommate(x))", "all x y.((Person(x) & Pet(y) & Owns(x,y)) -> LivesWith(x,y))", "all x.((Person(x) & OwnsPet(x) & Roommate(x)) -> LivesWith(x,y))", "all x.((Person(x) & OwnsPet(x)) -> LivesWithAtLeastOneRoommate(x))", "all x.(OwnsOnePet(x) -> LivesWithAtLeastOneRoommate(x))", "all x.((Person(x) & Owns(x,y) & Pet(y)) -> LivesWith(x,z))", "all x.((Person(x) & OwnsPet(x,y)) -> LivesWithRoommate(x,y))", "all x.(Owns(x,y) -> exists z.(Pet(z) & Roommate(z) & LivesWith(x,z))))", "all x.((Person(x) & OwnsAnimal(x)) -> LivesWithRoommate(x))", "all x.(OwnsPet(x) -> exists y.(Roommate(y) & LivesWith(x,y))))"]}
{"id": "folio_train_1155", "nl": "If Emma does not both own at least one pet and live in apartments in big metropolitan cities, then Emma either owns at least one pet and lives in an apartment in big metropolitan cities, or she neither owns a pet nor lives in an apartment in big metropolitan cities. ", "fol": "(-(OwnsPet(Emma) & LivesInApartment(Emma)) -> ((OwnsPet(Emma) & LivesInApartment(Emma)) | (-OwnsPet(Emma) & -LivesInApartment(Emma))))", "prediction": ["all x.((Emma(x) & -OwnsAtLeastOnePet(x) & LivesInApartmentsInBigMetropolitanCities(x)) -> (OwnsAtLeastOnePet(x) & LivesInApartmentInBigMetropolitanCities(x)) | (-OwnsAtLeastOnePet(x) & LivesInApartmentInBigMetropolitanCities(x))))", "all x.((Emma(x) & -OwnsAtLeastOnePet(x) & LivesInApartmentsInMetropolitanCities(x)) -> (OwnsAtLeastOnePet(x) & LivesInApartmentInMetropolitanCities(x)) | (-OwnsAtLeastOnePet(x) & LivesInApartmentInMetropolitanCities(x))))", "all x.((Emma(x) & -OwnsAtLeastOnePet(x) & LivesInApartmentsInBigMetropolitanCities(x)) -> (OwnsAtLeastOnePet(x) & LivesInApartmentInBigMetropolitanCities(x)) | -OwnsAtLeastOnePet(x) & LivesInApartmentInBigMetropolitanCities(x)))", "all x.((Emma(x) & -(OwnsAtLeastOnePet(x) & LivesInApartmentsInBigMetropolitanCities(x))) -> (OwnsAtLeastOnePet(x) & LivesInApartmentInBigMetropolitanCities(x)) | (-OwnsAtLeastOnePet(x) & LivesInApartmentInBigMetropolitanCities(x))))", "all x.((Emma(x) & -OwnsAtLeastOnePet(x) & LivesInApartmentsInBigMetropolitanCities(x)) -> (OwnsAtLeastOnePet(x) & LivesInApartmentInBigMetropolitanCities(x)) | (-OwnsAtLeastOnePet(x) & LivesInApartmentInBigMetropolitanCities(x)))", "all x.((Emma(x) & -OwnsAtLeastOnePet(x) & LivesInApartmentsInMetropolitanCities(x)) -> (OwnsAtLeastOnePet(x) & LivesInApartmentInMetropolitanCities(x)) | -OwnsAtLeastOnePet(x) & LivesInApartmentInMetropolitanCities(x)))", "all x.((Emma(x) & -OwnsAtLeastOnePet(x) & LivesInApartmentsInBigMetropolitanCities(x)) -> (OwnsAtLeastOnePet(x) & LivesInApartmentInBigMetropolitanCities(x) | -OwnsAtLeastOnePet(x) & LivesInApartmentInBigMetropolitanCities(x)))", "all x.((Emma(x) & -OwnsAtLeastOnePet(x) & LivesInApartmentsInBigMetropolitanCities(x)) -> ((OwnsAtLeastOnePet(x) & LivesInApartmentInBigMetropolitanCities(x)) | (-OwnsAtLeastOnePet(x) & LivesInApartmentInBigMetropolitanCities(x))))", "all x.((Emma(x) & -OwnsAtLeastOnePet(x) & LivesInApartmentsInBigMetropolitanCities(x)) -> (OwnsAtLeastOnePet(x) & LivesInApartmentInBigMetropolitanCities(x)) | (-OwnsAtLeastOnePet(x) & LivesInApartmentInBigMetropolitanianCities(x))))", "all x.((Emma(x) & -OwnsAtLeastOnePet(x) & LivesInApartmentsInBigMetropolitanCities(x)) -> (OwnsAtLeastOnePet(x) & LivesInApartmentInBigMetropolitanCities(x)) | (-OwnsPet(x) & LivesInApartmentInBigMetropolitanCities(x))))", "all x.((Emma(x) & -(OwnsAtLeastOnePet(x) & LivesInApartmentsInBigMetropolitanCities(x)) & (OwnsAtLeastOnePet(x) & LivesInApartmentInBigMetropolitanCities(x)) | (-OwnsAtLeastOnePet(x) & LivesInApartmentInBigMetropolitanCities(x))))", "all x.((Emma(x) & -OwnsAtLeastOnePet(x) & LivesInApartmentsInBigMetropolitanCities(x)) -> (OwnsAtLeastOnePet(x) & LivesInApartmentInBigMetropolitanCities(x)) | -OwnsAtLeastOnePet(x) & LivesInApartmentInBigMetropolitanCities(x))", "all x.((Emma(x) & -(OwnsAtLeastOnePet(x) & LivesInApartmentsInBigMetropolitanCities(x)) & ((OwnsAtLeastOnePet(x) & LivesInApartmentInBigMetropolitanCities(x)) | (-OwnsAtLeastOnePet(x) & LivesInApartmentInBigMetropolitanCities(x)))))", "all x.((Emma(x) & -OwnsAtLeastOnePet(x) & LivesInApartmentsInBigMetropolitanCities(x)) -> (OwnsAtLeastOnePet(x) & LivesInApartmentInBigMetropolitanCities(x)) | (-OwnsAtLeastOnePet(x) & LivesInApartment(x))))", "all x.((Emma(x) & -(OwnsAtLeastOnePet(x) & LivesInApartmentsInBigMetropolitanCities(x)) & ((OwnsAtLeastOnePet(x) & LivesInApartmentInBigMetropolitanCities(x)) | (-OwnsAtLeastOnePet(x) & LivesInApartmentInBigMetropolitanCities(x))))", "all x.((Emma(x) & -(OwnsAtLeastOnePet(x) & LivesInApartmentsInBigMetropolitanCities(x))) -> (OwnsAtLeastOnePet(x) & LivesInApartmentInBigMetropolitanCities(x)) | -OwnsAtLeastOnePet(x) & LivesInApartmentInBigMetropolitanCities(x)))"]}
{"id": "folio_train_1156", "nl": "Emma lives with at least one roommate.", "fol": "LivesWithRoommate(Emma)", "prediction": ["all x.((Emma(x) & Roommate(x)) -> LivesWith(x,y))", "all x y.((Emma(x) & Roommate(y)) -> LivesWith(x,y))", "all x.((Emma(x) & Roommate(y)) -> LivesWith(x,y))", "all x y z.((Emma(x) & Roommate(y) & Roommate(z)) -> LivesWith(x,y,z))", "all x.(Emma(x) -> exists y.(Roommate(y) & LivesWith(x,y))))", "all x.(Emma(x) -> exists y.(Roommate(y) & LivesWith(x,y)))", "all x.((Emma(x) & Roommate(x)) -> exists y.(Roommate(y) & LivesWith(x,y))))", "all x y.((Emma(x) & Roommate(y)) -> exists z.(Roommate(z) & LivesWith(x,y,z))))", "all x.((Emma(x) & Roommate(x)) -> LivesWith(x,Emma))", "all x.((Emma(x) & Roommate(x)) -> LivesWith(x))", "all x y z.((Emma(x) & Roommate(y) & Roommate(z)) -> exists w.(Roommate(w) & LivesWith(x,y,z))))", "all x y.((Emma(x) & Roommate(y)) -> exists z.(Roommate(z) & LivesWith(x,z))))", "(exists x.(Roommate(x) & LivesWith(x,y)))", "All x.(Emma(x) -> exists y.(Roommate(y) & LivesWith(x,y))))", "all x y.((Emma(x) & Roommate(y)) -> exists z.(Roommate(z) & LivesWith(x,y))))", "all x.((Emma(x) & Roommate(x,y)) -> LivesWith(x,y))"]}
{"id": "folio_train_1157", "nl": "Emma enjoys reading about tech specs and keeping up to date on the latest technology.", "fol": "EnjoysTechReading(Emma)", "prediction": ["all x.(Emma(x) -> (EnjoysReadingTechSpecs(x) & KeepsUpToDateOnTechnology(x)))", "all x y.((Emma(x) & TechSpecs(y)) -> (EnjoysReading(x,y) & KeepsUpToDateOnTechnology(x)))", "all x.((Emma(x) & TechSpecs(x)) -> (EnjoysReading(x) & KeepsUpToDateOnTechnology(x)))", "all x y z.((Emma(x) & TechSpecs(y) & Technology(z)) -> (EnjoysReading(x,y) & KeepsUpToDate(x,z)))", "all x y.((Emma(x) & TechSpecs(y)) -> (EnjoysReading(x,y) & KeepsUpToDateOnTechnology(x,y)))", "all x.((Emma(x) & ReadsTechSpecs(x) & KeepsUpToDateOnTechnology(x)) -> Enjoys(x))", "all x y.((Emma(x) & TechSpecs(y)) -> (Enjoys(x,y) & KeepsUpToDateOnTechnology(x)))", "all x y z.((Emma(x) & TechSpecs(y) & Technology(z)) -> (EnjoysReading(x,y) & KeepsUpToDateOn(x,z)))", "all x.(Emma(x) -> (EnjoysReadingTechStandards(x) & KeepsUpToDateOnTechnology(x)))", "all x y.((Emma(x) & TechSpecs(y)) -> (EnjoysReading(x,y) & KeepsUpToDate(x,y)))", "all x y z.((Emma(x) & TechSpecs(y) & Technology(z)) -> (Enjoys(x,y) & KeepsUpToDate(x,z)))", "all x.((Emma(x) & EnjoysReadingTechSpecs(x) & KeepsUpToDateOnTechnology(x)) -> EnjoysReadingTechSpecs(x))", "all x.(Emma(x) -> (LovesReadingTechSpecs(x) & KeepsUpToDateOnTechnology(x)))", "all x.((Emma(x) & TechSpecs(x)) -> (EnjoysReading(x) & UpToDateOnTechnology(x)))", "all x y.((Emma(x) & TechSpecs(y)) -> (EnjoysReading(x,y) & UpToDateOnTechnology(x)))", "all x.((Emma(x) & TechSpecs(y)) -> (EnjoysReading(x,y) & KeepsUpToDateOnTechnology(x,y)))"]}
{"id": "folio_train_1158", "nl": "If you are on the payroll, then you are being paid by the school.", "fol": "all x.(IsOnPayroll(x) -> IsPaidBySchool(x))", "prediction": ["all x.((Payroll(x) & OnPayroll(x)) -> PaidBySchool(x))", "all x.(Payroll(x) -> PaidBySchool(x))", "all x y.((Payroll(x) & School(y)) -> PaidBy(x,y))", "all x.((Payroll(x) & On(x)) -> PaidBySchool(x))", "all x.((Payroll(x) & On(x,Payment)) -> PaidBySchool(x))", "all x.((Payroll(x) & On(x,Payroll)) -> PaidBySchool(x))", "all x.((Payroll(x) & On(x,payroll)) -> PaidBySchool(x))", "all x.((Payroll(x) & PaidBySchool(x)) -> OnPayroll(x))", "all x.(OnPayroll(x) -> PaidBySchool(x))", "all x.((Payroll(x) & OnPayroll(x)) -> PayedBySchool(x))", "all x.((Payroll(x) & PayedBySchool(x)) -> OnPayroll(x))", "all x.((Payroll(x) & onPayroll(x)) -> PaidBySchool(x))", "all x.((Payroll(x) & PayedBySchool(x)) -> PayedBySchool(x))", "all x.((Payroll(x) & On(x,y)) -> PaidBySchool(x))", "all x.((OnPayroll(x) & PaidBySchool(x)) -> PaidBySchool(x))", "all x.((Payroll(x) & On(x,y)) -> PaidBySchool(y))"]}
{"id": "folio_train_1159", "nl": "If someone has a job at a school, then they are on the payroll.", "fol": "all x.(HasJobAtSchool(x) -> IsOnPayroll(x))", "prediction": ["all x y.((Job(x) & School(y) & Has(x,y)) -> OnPayroll(x))", "all x.(HasJobAtSchool(x) -> OnPayroll(x))", "all x y.((Person(x) & School(y) & HasJob(x,y)) -> OnPayroll(x))", "all x y.((Person(x) & School(y) & HasJobAt(x,y)) -> OnPayroll(x))", "all x.((Person(x) & HasJobAtSchool(x)) -> OnPayroll(x))", "all x.((HasJobAtSchool(x) & OnPayroll(x)) -> HasJobAtSchool(x))", "all x y.((Job(x) & School(y) & HasAt(x,y)) -> OnPayroll(x))", "all x.((Person(x) & JobAtSchool(x)) -> OnPayroll(x))", "all x.((HasJobAtSchool(x)) -> OnPayroll(x))", "all x y.((Person(x) & JobAtSchool(x) & Has(x,y)) -> OnPayroll(x))", "all x.((JobAtSchool(x) & Has(x,School)) -> OnPayroll(x))", "all x y z.((Job(x) & School(y) & School(z) & Has(x,y)) -> OnPayroll(x))", "all x.((HasJob(x) & AtSchool(x)) -> OnPayroll(x))", "all x y.((Person(x) & School(y) & HasJob(x,y)) -> OnPayroll(x,y))", "all x y.((Job(x) & School(y) & Has(x,y)) -> Payroll(x))", "all x.((Job(x) & AtSchool(x)) -> OnPayroll(x))"]}
{"id": "folio_train_1160", "nl": "All faculty members have a job at a school.", "fol": "all x.(IsFacultyMember(x) -> HasJobAtSchool(x))", "prediction": ["all x.(FacultyMember(x) -> HasJobAtSchool(x))", "all x y.((FacultyMember(x) & School(y)) -> HasJobAt(x,y))", "all x y.((Faculty(x) & School(y)) -> HasJobAt(x,y))", "all x y.((FacultyMember(x) & School(y)) -> HasJob(x,y))", "all x y.((Faculty(x) & School(y)) -> HasJob(x,y))", "all x y z.((FacultyMember(x) & School(y) & School(z)) -> HasJobAt(x,y,z))", "all x.(Faculty(x) -> HasJobAtSchool(x))", "all x.(FacultyMember(x) -> exists y.(School(y) & HasJob(x,y))))", "all x y z.((Faculty(x) & School(y) & School(z)) -> HasJobAt(x,y,z))", "all x.exists y.(Faculty(x) & School(y) & HasJobAt(x,y))", "all x.exists y.(Faculty(x) & School(y) & HasJob(x,y))", "all x.(FacultyMember(x) -> exists y.(School(y) & HasJob(x,y)))", "all x.(FacultyMember(x) -> exists y.(School(y) & HasJobAt(x,y))))", "all x.exists y.(FacultyMember(x) & School(y) & HasJobAt(x,y))", "all x y z.((FacultyMember(x) & School(y) & School(z)) -> HasJob(x,y,z))", "all x y.((FacultyMember(x) & School(y) & HasJob(x,y)) -> HasJob(x,y))"]}
{"id": "folio_train_1161", "nl": "One can either be a faculty member or a teacher.", "fol": "all x.(IsFacultyMember(x) | IsTeacher(x))", "prediction": ["all x.(FacultyMember(x) | Teacher(x))", "all x.(Faculty(x) | Teacher(x))", "exists x.(FacultyMember(x) | Teacher(x))", "all x.((FacultyMember(x) | Teacher(x)) -> (Faculty(x) | Teacher(x)))", "all x.((FacultyMember(x) | Teacher(x)) -> (FacultyMember(x) | Teacher(x)))", "all x.((Faculty(x) | Teacher(x)) -> (FacultyMember(x) | Teacher(x)))", "all x y.((Faculty(x) & Teacher(y)) -> (FacultyMember(x) | Teacher(y)))", "all x.((Faculty(x) | Teacher(x)) -> (Faculty(x) | Teacher(x)))", "all x y.((FacultyMember(x) & Teacher(y)) -> (Faculty(x) | Teacher(y)))", "exists x.(Faculty(x) | Teacher(x))", "all x.(Teacher(x) -> (FacultyMember(x) | Teacher(x)))", "all x.((FacultyMember(x) | Teacher(x)) -> CanBe(x))", "all x y.((Faculty(x) & Teacher(y)) -> (Faculty(x) | Teacher(y)))", "all x y.((Faculty(x) & Teacher(y)) -> (FacultyMember(x) | Teacher(x)))", "all x y.((FacultyMember(x) & Teacher(y)) -> (FacultyMember(x) | Teacher(y)))", "all x.((FacultyMember(x) | Teacher(x)) -> -FacultyMember(x))"]}
{"id": "folio_train_1162", "nl": "Every teacher has students.", "fol": "all x.(IsTeacher(x) -> TeachesStudents(x))", "prediction": ["all x.(Teacher(x) -> HasStudents(x))", "all x.exists y.(Teacher(x) & Student(y) & Has(x,y))", "all x.exists y.(Teacher(x) & Student(y))", "all x.exists y.(Teacher(x) & Teacher(y) & HasStudents(x,y))", "all x y.((Teacher(x) & Student(y)) -> Has(x,y))", "all x.(Teacher(x) -> exists y.(Student(y) & Has(x,y))))", "all x.exists y.(Teacher(x) & Student(y) & HasTeacher(x,y))", "exists x.(Teacher(x) & HasStudents(x))", "all x.exists y z.(Teacher(x) & Student(y) & Teacher(z) & Has(x,y,z))", "all x.exists y.(Teacher(x) & Student(y) & InTeacher(x,y))", "all x.exists y z.(Teacher(x) & Student(y) & Teacher(z) & Has(x,y))", "all x.exists y.(Teacher(x) & Student(y) & HasStudent(x,y))", "all x.exists y.((Teacher(x) & Student(y)) -> Has(x,y))", "all x.exists y.(Teacher(x) & Student(y) & Haves(x,y))", "all x.exists y.(Teacher(x) & Student(y)) -> Has(x,y))", "all x.exists y.(Teacher(x) & Student(y) & Have(x,y))"]}
{"id": "folio_train_1163", "nl": "If Nancy is a teacher, then they are on the payroll.", "fol": "(IsTeacher(Nancy) -> IsOnPayroll(Nancy))", "prediction": ["all x.((Nancy(x) & Teacher(x)) -> OnPayroll(x))", "all x.(Teacher(x) -> OnPayroll(x))", "all x.((Nancy(x) & Teacher(x)) -> Payroll(x))", "all x.((Teacher(x) & Nancy(x)) -> OnPayroll(x))", "all x.(Teacher(x) -> Payroll(x))", "all x.((Nancy(x) & Teacher(x)) -> onPayroll(x))", "all x.((Penny(x) & Teacher(x)) -> OnPayroll(x))", "all x.((Teacher(x) & Nancy(x)) -> Payroll(x))", "all x.((Teacher(x) & Nancy(y)) -> OnPayroll(y))", "all x.((Person(x) & Teacher(x)) -> OnPayroll(x))", "all x.((Nancy(x) & Teachers(x)) -> OnPayroll(x))", "all x.(Teacher(x) -> onPayroll(x))", "all x.((Snake(x) & Teacher(x)) -> OnPayroll(x))", "all x.((Nancy(x) & Teacher(x)) -> PayrollOn(x))", "all x y.((Nancy(x) & Teacher(x)) -> OnPayroll(y))", "all x y.((Nancy(x) & Teacher(x)) -> OnPayroll(x))"]}
{"id": "folio_train_1164", "nl": "If Nancy is not a teacher, then they are not paid by the school.", "fol": "(-IsTeacher(Nancy) -> -IsOnPayroll(Nancy))", "prediction": ["all x.((Nancy(x) & -Teacher(x)) -> -PayedBySchool(x))", "all x.((Nancy(x) & -Teacher(x)) -> -PaidBySchool(x))", "all x.((Nancy(x) & -Teacher(x)) -> -FundedBySchool(x))", "all x.((Nancy(x) & -Teacher(x)) -> -paidBySchool(x))", "all x.((Penny(x) & -Teacher(x)) -> -PayedBySchool(x))", "all x.((Nancy(x) & -Teacher(x)) -> -(PayedBySchool(x) | PaidBySchool(x))))", "all x.((Nancy(x) & -Teacher(x)) -> -PAIDBySchool(x))", "all x.((Penny(x) & -Teacher(x)) -> -PaidBySchool(x))", "all x.((Nancy(x) & -Teacher(x)) -> -HasPayedBySchool(x))", "all x.((Nancy(x) & -Teacher(x)) -> -ReceivedBySchool(x))", "all x.((Nancy(x) & -Teacher(x)) -> -(PayedBySchool(x) | PaidBySchool(x)))", "all x y.((Nancy(x) & -Teacher(x)) -> -PayedBySchool(y))", "all x.((Nancy(x) & -Teacher(x)) -> -PayableBySchool(x))", "all x.((Nancy(x) & -Teacher(x)) -> -(PayedBySchool(x) & PaidBySchool(x)))", "all x.((Nancy(x) & -Teacher(x)) -> -PrizedBySchool(x))", "all x.((Teacher(x) & -Teacher(x)) -> -PayedBySchool(x))"]}
{"id": "folio_train_1165", "nl": "Nancy is a faculty member.", "fol": "IsFacultyMember(Nancy)", "prediction": ["all x.(FacultyMember(x) -> Nancy(x))", "all x.(Nancy(x) -> FacultyMember(x))", "(FacultyMember(Nancy)", "all x y.((Nancy(x) & Faculty(y)) -> FacultyMember(x,y))", "all x.(FacultyMember(x) -> Nancy(x))", "all x.(FacultyMember(x) -> NancyFaculty(x))", "all x.((Nancy(x) & FacultyMember(x)) -> -Faculty(x))", "all x.(Faculty(x) -> Nancy(x))", "all x.((Nancy(x) & FacultyMember(x)) -> IsFaculty(x))", "all x.(Penny(x) -> FacultyMember(x))", "all x.((Nancy(x) & FacultyMember(x)) -> Faculty(x))", "all x.((Nancy(x) & FacultyMember(x)) -> -FacultyMember(x))", "exists x.(FacultyMember(x) & Nancy(x))", "(FacultyMember(Nancy) & -Faculty(Nancy))", "(Faculty(Nancy) & FacultyMember(Nancy))", "all x.((Nancy(x) & FacultyMember(x)) -> Becomes(x))"]}
{"id": "folio_train_1166", "nl": "Nancy is paid by the school and has students.", "fol": "(IsPaidBySchool(Nancy) & TeachesStudents(Nancy))", "prediction": ["all x.(Nancy(x) -> (PayedBySchool(x) & HasStudents(x)))", "all x y.((Nancy(x) & School(y)) -> (PayedBy(x,y) & HasStudents(x,y)))", "all x y.((Nancy(x) & School(y)) -> (PayedBy(x,y) & HasStudents(x)))", "all x y z.((Nancy(x) & School(y) & Student(z)) -> (PayedBy(x,y) & Has(x,z)))", "all x y z.((Nancy(x) & School(y) & Student(z)) -> (PayedBy(x,y) & HasStudents(x,z)))", "(PayedBySchool(Nancy) & HasStudents(Nancy))", "all x y.((Nancy(x) & School(y)) -> (PaidBy(x,y) & HasStudents(x,y)))", "all x y.((Nancy(x) & School(y)) -> (PaidBy(x,y) & HasStudents(x)))", "all x y z.((Nancy(x) & School(y) & Student(z)) -> (PaidBy(x,y) & Has(x,z)))", "all x.((Nancy(x) & PaidBySchool(x)) -> HasStudents(x))", "all x.(Nancy(x) -> (PaidBySchool(x) & HasStudents(x)))", "all x y.((Nancy(x) & School(y) & PaidBy(x,y)) -> HasStudents(x))", "all x.(Nancy(x) -> (PayedBySchool(x) & HasStudents(x)))", "all x y.((Nancy(x) & School(y)) -> (Payed(x,y) & HasStudents(x,y)))", "all x y z.((Nancy(x) & School(y) & Student(z)) -> (PayedBy(x,y,z) & Has(x,z)))", "all x y z.((Nancy(x) & School(y) & Student(z)) -> (PayedBy(x,y) | HasStudents(x,z)))"]}
{"id": "folio_train_1167", "nl": "Nancy is not paid by the school and has students.", "fol": "(-IsOnPayroll(Nancy) & TeachesStudents(Nancy))", "prediction": ["all x.(Nancy(x) -> (-PayedBySchool(x) & HasStudents(x)))", "all x y.((Nancy(x) & School(y)) -> (-PayedBy(x,y) & HasStudents(x)))", "(-PayedBySchool(Nancy) & HasStudents(Nancy))", "(-PaidBySchool(Nancy) & HasStudents(Nancy))", "all x y.((Nancy(x) & School(y)) -> (-PayedBy(x,y) & HasStudents(x,y)))", "all x y z.((Nancy(x) & School(y) & Student(z)) -> (-PayedBy(x,y) & Has(x,z)))", "all x.(Nancy(x) -> (-PaidBySchool(x) & HasStudents(x)))", "all x.((Nancy(x) & -PayedBySchool(x)) -> HasStudents(x))", "all x y.((Nancy(x) & School(y)) -> (-PaidBy(x,y) & HasStudents(x)))", "all x.((Nancy(x) & -PayedBySchool(x) & HasStudents(x)) -> -PayedBySchool(x))", "all x y z.((Nancy(x) & School(y) & Student(z)) -> (-PaidBy(x,y) & Has(x,z)))", "all x y z.((Nancy(x) & School(y) & Student(z)) -> (-PayedBy(x,y) & HasStudents(x,z)))", "exists x.(Nancy(x) & -PayedBySchool(x) & HasStudents(x))", "all x y.((Nancy(x) & School(y)) -> (-PaidBy(x,y) & HasStudents(x,y)))", "all x.((Nancy(x) & -PaidBySchool(x)) -> HasStudents(x))", "all x.((Nancy(x) & -PaidBySchool(x) & HasStudents(x)) -> -PaidBySchool(x))"]}
{"id": "folio_train_1168", "nl": "Kangaroo is an animal.", "fol": "all x.(IsKangaroo(x) -> IsAnimal(x))", "prediction": ["all x.(Kangoroo(x) -> Animal(x))", "all x.(Kangaroo(x) -> Animal(x))", "all x y.((Kangoroo(x) & Animal(y)) -> Animal(x))", "all x.(Kangoroo(x) -> Animal(x))", "All x.(Kangoroo(x) -> Animal(x))", "all x.(Kangouroo(x) -> Animal(x))", "(Animal(kangaroo) & Animal(kangaroo))", "All x.(Kangaroo(x) -> Animal(x))", "all x.(Kangaroo(x) -> Animal(x))", "all x.(Kanguo(x) -> Animal(x))", "all x y.((Kangoroo(x) & Animal(y)) -> Animal(x,y))", "exists x.(Kangoroo(x) & Animal(x))", "all x.(Kagaroo(x) -> Animal(x))", "(Animal(kangaroo) & LivesIn(kangaroo))", "all x y.((Kangoroo(x) & Animal(y)) -> Is(x,y))", "(Animal(Kangoroo) & Animal(Kangoroo))"]}
{"id": "folio_train_1169", "nl": "No Kangaroos live in Germany.", "fol": "all x.(IsKangaroo(x) -> -LivesIn(x,Germany))", "prediction": ["-exists x.(Kangaroo(x) & LivesIn(x,Germany))", "-exists x.(Kangaroo(x) & LivesInGermany(x))", "-exists x.(Kangoroo(x) & LivesIn(x,Germany))", "-exists x.(Kangaroo(x) & LivesIn(x,Deutschland))", "-exists x.(Kangoroo(x) & LivesInGermany(x))", "-exists x.(Kangoroo(x) & LivesIn(x,Deutschland))", "(-exists x.(Kangaroo(x) & LivesIn(x,Germany)))", "-exists x.(Kangaroo(x) & LiveIn(x,Germany))", "-exists x.(Kangaroo(x) & LivesInDeutschland(x))", "-exists x.(Kangaroo(x) & LiveInGermany(x))", "-exists x.(Kangaroo(x) & LivesIn(x))", "-exists x.(Kangouroo(x) & LivesIn(x,Germany))", "all x.(Kangaroo(x) -> -LivesInGermany(x))", "(-exists x.(Kangaroo(x) & LivesInGermany(x)))", "-exists x.(Cangaroo(x) & LivesIn(x,Germany))", "-exists x.(Kangaroo(x) & Lives(x,Germany))"]}
{"id": "folio_train_1170", "nl": "If Jane saves enough money for the summer, she will fly to Germany.", "fol": "(HasEnoughMoney(Jane) -> FliesTo(Jane,Germany))", "prediction": ["all x.((Jane(x) & SavesEnoughMoneyForSummer(x)) -> FlyToGermany(x))", "all x.((Jane(x) & SavesEnoughMoney(x)) -> FlyToGermany(x))", "all x.((Jane(x) & SavesEnoughMoneyForSummer(x)) -> FliesToGermany(x))", "all x.((Jane(x) & SavesEnoughMoney(x)) -> FliesToGermany(x))", "all x.((Jane(x) & SavesEnoughMoneyForSummer(x)) -> WillFlyToGermany(x))", "all x y.((Jane(x) & Summer(y) & SavesEnoughMoney(x,y)) -> FlyToGermany(x))", "all x.((Jane(x) & SavesEnoughMoney(x) & Summer(x)) -> FlyToGermany(x))", "all x.((Jane(x) & SavesEnoughMoney(x)) -> WillFlyToGermany(x))", "all x y.((Jane(x) & Summer(y) & SavesEnoughMoney(x,y)) -> FliesToGermany(x))", "all x y.((Jane(x) & Summer(y) & SavesEnoughMoney(x,y)) -> FlyTo(x,y))", "all x.((SavesEnoughMoney(x) & Summer(x)) -> FlyToGermany(x))", "all x.((Jane(x) & SavesEnoughMoney(x) & Summer(x)) -> FliesToGermany(x))", "all x y.((Jane(x) & Summer(y) & SavesEnoughMoney(x,y)) -> FlyToGermany(x,y))", "all x y.((Jane(x) & Summer(y) & SavesEnoughMoney(x,y)) -> FliesToGermany(x,y))", "all x y.((Jane(x) & Summer(y) & SavesEnoughMoneyFor(x,y)) -> FlyToGermany(x))", "all x.((SavesEnoughMoney(x) & Summer(x)) -> FliesToGermany(x))"]}
{"id": "folio_train_1171", "nl": "If Jane flies to Germany, she will go to the Berlin Zoo.", "fol": "(FliesTo(Jane,Germany) -> Visits(Jane,Berlinzoo))", "prediction": ["all x.(FliesToGermany(x) -> GoesToBerlinZoo(x))", "all x.((Jane(x) & FliesToGermany(x)) -> GoesToBerlinZoo(x))", "all x.(FliesTo(x,Germany) -> GoesTo(x,BerlinZoo))", "all x.((FliesToGermany(x) & GoesToBerlinZoo(x)) -> GoesToZoo(x))", "all x.((FliesToGermany(x) & GoesToBerlinZoo(x)) -> GoesTo(x,BerlinZoo))", "all x.(FliesTo(x,Germany) -> GoesToBerlinZoo(x))", "all x.((FliesToGermany(x) & BerlinZoo(x)) -> GoesTo(x,y))", "all x.((FliesToGermany(x) & GoesToBerlinZoo(x)) -> GoesToBerlinZoo(x))", "all x.((FliesTo(x,Germany) & GoesTo(x,BerlinZoo)) -> GoesTo(x,BerlinZoo))", "all x.((FliesToGermany(x) & GoesToBerlinZoo(x)) -> FliesTo(x,Germany))", "all x.((FliesTo(x,Germany) & GoesTo(x,BerlinZoo)) -> JaneFliesTo(x,Germany))", "all x.(FliesToGermany(x) -> GoToBerlinZoo(x))", "all x.((FliesToGermany(x) & GoesToBerlinZoo(x)) -> JaneFliesTo(x,Germany))", "all x.((FliesToGermany(x) & GoesToBerlinZoo(x)) -> Zoo(x))", "all x.((Jane(x) & FliesToGermany(x)) -> GoToBerlinZoo(x))", "all x.((FliesTo(x,Germany) & GoesTo(x,BerlinZoo)) -> FliesTo(x,Germany))"]}
{"id": "folio_train_1172", "nl": "If someone goes to the Berlin Zoo and see animals there, they live in Germany.", "fol": "all x y.((Visits(x,Berlinzoo) & IsAnimal(y) & Sees(x,y)) -> LivesIn(y,Germany))", "prediction": ["all x.((GoesToBerlinZoo(x) & SeesAnimals(x)) -> LivesInGermany(x))", "all x y.((GoesToBerlinZoo(x) & Animal(y) & Sees(x,y)) -> LivesInGermany(x))", "all x y.((GoesToBerlinZoo(x) & Animals(y) & Sees(x,y)) -> LivesInGermany(x))", "all x.((GoesToBerlinZoo(x) & SeesAnimalsThere(x)) -> LivesInGermany(x))", "all x y.((GoesToBerlinZoo(x) & SeesAnimals(x,y)) -> LivesInGermany(x))", "all x.((GoesToBerlinZoo(x) & SeesAnimalsInBerlinZoo(x)) -> LivesInGermany(x))", "all x.((Person(x) & GoesToBerlinZoo(x) & SeesAnimals(x)) -> LivesInGermany(x))", "all x.((GoesToBerlinZoo(x) & SeesAnimalsInZoo(x)) -> LivesInGermany(x))", "all x.((GoesToBerlinZoo(x) & SeeAnimals(x)) -> LivesInGermany(x))", "all x y.((GoesTo(x,y) & BerlinZoo(y) & SeesAnimals(x,y)) -> LivesInGermany(x))", "all x.((GoesToBerlinZoo(x) & SeesAnimalsAtBerlinZoo(x)) -> LivesInGermany(x))", "all x y z.((GoesToBerlinZoo(x) & Animal(y) & Sees(x,y)) -> LivesInGermany(x))", "all x y.((Person(x) & GoesToBerlinZoo(x) & SeesAnimals(x,y)) -> LivesInGermany(x))", "all x.((GoesToBerlinZoo(x) & SeesAnimals(x)) -> LivesInDeutschland(x))", "all x.((GoesToZoo(x) & SeesAnimals(x)) -> LivesInGermany(x))", "all x y.((GoesToBerlinZoo(x) & Animal(y) & Sees(x,y)) -> LivesInGermany(x,y))"]}
{"id": "folio_train_1173", "nl": "Jane saved enough money.", "fol": "HasEnoughMoney(Jane)", "prediction": ["all x.((Jane(x) & SavedEnoughMoney(x)) -> SavedEnoughMoney(x))", "all x.((Jane(x) & Money(y)) -> Saved(x,y))", "all x y.((Jane(x) & Money(y)) -> Saved(x,y))", "all x.(Jane(x) -> SavedEnoughMoney(x))", "Jane saved enough money.", "all x.((Jane(x) & SavedEnoughMoney(x)) -> SavesEnoughMoney(x))", "all x.((Jane(x) & SavesEnoughMoney(x)) -> SavesEnoughMoney(x))", "all x y.((Jane(x) & Money(y) & Saved(x,y)) -> Saved(x,y))", "All x.((Jane(x) & SavedEnoughMoney(x)) -> SavedEnoughMoney(x))", "all x.((Jane(x) & SavedEnoughMoney(x)) -> SavedEnough(x))", "All x.(Jane(x) -> SavedEnoughMoney(x))", "all x.((Jane(x) & Money(y) & Saved(x,y)) -> Saved(x,y))", "all x y.((Jane(x) & Money(y)) -> SavedEnough(x,y))", "all x.((Jane(x) & SavedEnoughMoney(x)) -> Saved(x))", "all x y.((Jane(x) & Money(y)) -> Saves(x,y))", "all x.((Jane(x) & Money(y)) -> SavedEnough(x,y))"]}
{"id": "folio_train_1174", "nl": "Jane will see a kangaroo in the summer.", "fol": "exists y.(IsKangaroo(y) & Sees(Jane,y))", "prediction": ["all x y.((Jane(x) & Kangaroo(y)) -> SeesInSummer(x,y))", "all x.((Jane(x) & Kangaroo(x)) -> SeesInSummer(x))", "all x.((Jane(x) & Kangaroo(y)) -> SeesInSummer(x,y))", "all x y.((Jane(x) & Kangaroo(y)) -> WillSee(x,y))", "all x y.((Jane(x) & Kangaroo(y)) -> Sees(x,y))", "all x.((Jane(x) & Kangaroo(x)) -> SeesInSummer(x,y))", "all x y.((Jane(x) & Kangaroo(y)) -> WillSeeInSummer(x,y))", "all x y z.((Jane(x) & Kangaroo(y) & Summer(z)) -> WillSee(x,y,z))", "all x y z.((Jane(x) & Kangaroo(y) & Summer(z)) -> Sees(x,y,z))", "all x.((Jane(x) & Kangaroo(y)) -> WillSee(x,y))", "all x.((Jane(x) & Kangaroo(y)) -> Sees(x,y))", "all x.((Jane(x) & Kangaroo(x)) -> Sees(x,y))", "all x.((Jane(x) & Kangaroo(x)) -> Sees(x,Summer))", "all x.((Jane(x) & Kangaroo(y)) -> WillSeeInSummer(x,y))", "all x.((Jane(x) & Kangaroo(x)) -> WillSee(x,y))", "all x.(Kangaroo(x) -> SeesInSummer(x))"]}
{"id": "folio_train_1175", "nl": "If a class has prerequisites the student must take the prerequisites to take the class.", "fol": "all y.(all x.(HasPrerequisite(x,y) -> CourseTaken(x)) -> EligibleToTake(y))", "prediction": ["all x.((Class(x) & HasPrerequisites(x)) -> MustTakePrerequisites(x))", "all x.((Class(x) & HasPrerequisites(x)) -> MustTakePrerequisitesToTakeClass(x))", "all x y.((Class(x) & Prerequisites(y)) -> MustTake(x,y))", "all x y.((Class(x) & Prerequisites(y) & Has(x,y)) -> MustTake(x,y))", "all x y.((Class(x) & Prerequisites(x) & Student(y)) -> MustTake(y,x))", "all x y z.((Class(x) & Prerequisites(y) & Student(z) & Has(x,y)) -> MustTake(z,y))", "all x y.((Class(x) & Prerequisites(x,y)) -> MustTake(x,y))", "all x.((Class(x) & HasPrerequisites(x)) -> MustTake(x,prerequisites))", "all x.((Class(x) & HasPrerequisites(x)) -> MustTakePrerequisites(x,y))", "all x y.((Class(x) & HasPrerequisites(x,y)) -> MustTakePrerequisites(x,y))", "all x.((Class(x) & HasPrerequisites(x)) -> TakesPrerequisites(x))", "all x y.((Class(x) & Prerequisites(x) & Student(y)) -> MustTakePrerequisites(y,x))", "all x y.((Class(x) & Prerequisites(x)) -> MustTake(x,y))", "all x y z.((Class(x) & Prerequisites(y) & Student(z) & Has(z,y)) -> MustTake(z,y))", "all x y.((Class(x) & Prerequisites(y)) -> Takes(x,y))", "all x.((Class(x) & Prerequisites(x)) -> MustTake(x,prerequisites))"]}
{"id": "folio_train_1176", "nl": "If a class has no prerequisites, then the student can take the class", "fol": "all y.(-exists x.HasPrerequisite(x,y) -> EligibleToTake(y))", "prediction": ["all x.((Class(x) & NoPrerequisites(x)) -> StudentCanTakeClass(x))", "all x.((Class(x) & -Prerequisites(x)) -> StudentCanTakeClass(x))", "all x.((Class(x) & NoPrerequisites(x)) -> CanTakeClass(x))", "all x.((Class(x) & -Prerequisites(x)) -> CanTakeClass(x))", "all x y.((Class(x) & -Prerequisites(x) & Student(y)) -> CanTakeClass(y,x))", "all x y.((Class(x) & NoPrerequisites(x) & Student(y)) -> CanTakeClass(y,x))", "all x.((Class(x) & NoPrerequisites(x)) -> CanTake(x,Class))", "all x y.((Class(x) & -Prerequisites(x) & Student(y)) -> CanTake(y,x))", "all x.((Class(x) & -Prerequisites(x)) -> CanTake(x,Class))", "all x y.((Class(x) & NoPrerequisites(x)) -> CanTake(y,x))", "all x.((Class(x) & NoPrerequisites(x)) -> CanTakeClass(x,y))", "all x.((Class(x) & -HasPrerequisites(x)) -> StudentCanTakeClass(x))", "all x y.((Class(x) & NoPrerequisites(x) & Student(y)) -> CanTake(y,x))", "all x.((Class(x) & -Prerequisites(x)) -> CanTakeClass(x,y))", "all x.((Class(x) & -HasPrerequisites(x)) -> CanTakeClass(x))", "all x y.((Class(x) & -Prerequisites(x)) -> CanTake(y,x))"]}
{"id": "folio_train_1177", "nl": "CPSC 201 and CPSC 223 are both prerequisites for CPSC 323.", "fol": "(HasPrerequisite(Cpsc201,Cpsc323) & HasPrerequisite(Cpsc223,Cpsc323))", "prediction": ["(Prerequisites(CPSC201) & Prerequisites(CPSC223))", "(Prerequisite(CPSC201) & Prerequisite(CPSC223)) & Prerequisite(CPSC323))", "(Prerequisites(CPSC201) & Prerequisites(CPSC223)) & Prerequisites(CPSC323))", "(Prerequisite(CPSC201) & Prerequisite(CPSC223)) & Prerequisite(CPSC323) & Prerequisite(CPSC323))", "all x y.((CPSC(x) & CPSC(y)) -> (Prerequisite(x,y) & Prerequisite(x,y)))", "(Prerequisite(CPSC201) & Prerequisite(CPSC223)) & Prerequisite(CPSC323))", "(Prerequisites(CPSC201) & Prerequisites(CPSC223)) & Prerequisites(CPSC323))", "all x y.((CPSC(x) & CPSC(y) & CPSC(y)) -> (Prerequisite(x,y) & Prerequisite(x,y)))", "(Prerequisite(CPSC201) & Prerequisite(CPSC223))", "all x y z.((CPSC(x) & CPSC(y) & CPSC(z)) -> (Prerequisite(x,y) & Prerequisite(x,z)))", "all x y.((CPSC(x) & CPSC(y)) -> (Prerequisite(x,y) & Prerequisite(x,y) & Prerequisite(x,y)))", "all x y.((CPSC(x) & CPSC(y) & CPSC(y)) -> (Prerequisite(x,y) & Prerequisite(x,y) & Prerequisite(x,y)))", "all x y z.((CPSC(x) & CPSC(y) & CPSC(z)) -> (Prerequisite(x,y,z) & Prerequisite(x,y,z)))", "all x y.((CPSC(x) & CPSC(y)) -> (CPSC201(x) & CPSC223(x) & CPSC323(y)))", "all x y.((CPSC(x) & CPSC(y)) -> (CPSC201(x) & CPSC223(x)))", "(Prerequisites(CPSC201) & Prerequisites(CPSC223)) & Prerequisites(CPSC323) & Prerequisites(CPSC323))"]}
{"id": "folio_train_1178", "nl": "Intro Microeconomics is the only prerequisite for Intermediate Microeconomics.", "fol": "((HasPrerequisite(Intromicro,Intermediatemicro) & CourseTaken(Intromicro)) -> EligibleToTake(Intermediatemicro))", "prediction": ["all x.(IntroMicroeconomics(x) -> IntermediateMicroeconomics(x))", "all x y.((IntroMicroeconomics(x) & IntermediateMicroeconomics(y)) -> Prerequisite(x,y))", "all x.(IntermediateMicroeconomics(x) -> Prerequisite(x))", "All x.(IntroMicroeconomics(x) -> IntermediateMicroeconomics(x))", "all x.(IntraMicroeconomics(x) -> IntermediateMicroeconomics(x))", "all x.((IntroMicroeconomics(x) & IntermediateMicroeconomics(x)) -> Prerequisite(x))", "all x.(IntermediateMicroeconomics(x) -> Prerequisite(x,IntermediateMicroeconomics))", "all x.(IntermediateMicroeconomics(x) -> Prerequisite(x,IntroMicroeconomics))", "all x.(IntroMicroeconomics(x) -> PrerequisiteForIntermediateMicroeconomics(x))", "all x.(IntermediateMicroeconomics(x) -> (IntroMicroeconomics(x) & Prerequisite(x,IntermediateMicroeconomics)))", "All x y.((IntroMicroeconomics(x) & IntermediateMicroeconomics(y)) -> Prerequisite(x,y))", "all x.(IntermediateMicroeconomics(x) -> (IntroMicroeconomics(x) & PrerequisiteForIntermediateMicroeconomics(x)))", "all x.(IntroMicroeconomics(x) -> Prerequisite(x,IntermediateMicroeconomics))", "all x.(IntermediateMicroeconomics(x) -> PrerequisiteForIntermediateMicroeconomics(x))", "all x.((IntroMicroeconomics(x) & IntermediateMicroeconomics(x)) -> Prerequisite(x,y))", "All x.(IntraMicroeconomics(x) -> IntermediateMicroeconomics(x))"]}
{"id": "folio_train_1179", "nl": "Intro Geology has no prerequisites.", "fol": "all x.-HasPrerequisite(x,Introgeology)", "prediction": ["all x.(IntroGeology(x) -> -Prerequisites(x))", "all x.(IntroGeology(x) -> NoPrerequisites(x))", "all x.(IntroGeology(x) -> -HasPrerequisites(x))", "all x.(IntroGeology(x) -> -Prerequisite(x))", "all x.(IntraGeology(x) -> -Prerequisites(x))", "all x y.((IntroGeology(x) & Prerequisite(y)) -> -Prerequisite(x,y))", "All x.(IntroGeology(x) -> -Prerequisites(x))", "all x y.((IntroGeology(x) & Prerequisite(y)) -> -Has(x,y))", "all x y.((IntroGeology(x) & Prerequisite(y)) -> -(IntroGeology(x) & Prerequisite(y)))", "all x y.((IntroGeology(x) & Prerequisite(y)) -> -exists z.(IntroGeology(z) & Prerequisite(z))))", "all x y.((IntroGeology(x) & Prerequisite(y)) -> -exists z.(IntroGeology(z) & Prerequisite(x,z))))", "All x.(IntroGeology(x) -> NoPrerequisites(x))", "all x y.((IntroGeology(x) & Prerequisite(y)) -> -(IntroGeology(x) & Prerequisite(x,y)))", "all x.(IntraGeology(x) -> NoPrerequisites(x))", "all x.(IntroGeology(x) -> -Requirements(x))", "all x.(Intra-Geology(x) -> -Prerequisites(x))"]}
{"id": "folio_train_1180", "nl": "CPSC 201 has no prerequisites.", "fol": "-exists x.HasPrerequisite(x,Cpsc201)", "prediction": ["all x.(CPSC201(x) -> -Prerequisites(x))", "all x.(CPSC201(x) -> NoPrerequisites(x))", "all x.(CPSC201(x) -> -HasPrerequisites(x))", "all x.((CPSC201(x) & -Prerequisites(x)) -> -Prerequisites(x))", "all x.(CPSC201(x) -> -Prerequisite(x))", "All x.(CPSC201(x) -> -Prerequisites(x))", "all x.((CPSC201(x) & -Prerequisites(x)) -> NoPrerequisites(x))", "CPSC201 -HasPrerequisites(CPSC201))", "all x.(CSPSC201(x) -> -Prerequisites(x))", "All x.(CPSC201(x) -> NoPrerequisites(x))", "all x.(CPSC201(x) -> -exists y.(Prerequisite(y) & Prerequisite(x,y)))", "all x.(CPSC201(x) -> -exists y.(Prerequisite(y) & Has(x,y)))", "all x.((CPSC201(x) & NoPrerequisites(x)) -> NoPrerequisites(x))", "all x.((CPSC201(x) & -Prerequisite(x)) -> -Prerequisite(x))", "all x.(CPSC201(x) -> -exists y.(Prerequisite(y) & Has(x,y))))", "all x.(CPSC201(x) -> -exists y.(Prerequisite(y) & Prerequisite(y)))"]}
{"id": "folio_train_1181", "nl": "If a student took CPSC 201 but did not take CPSC 223, they can take CPSC 323.", "fol": "((CourseTaken(Cpsc201) & -CourseTaken(Cpsc223)) -> EligibleToTake(Cpsc323))", "prediction": ["all x.((Student(x) & TakedCPSC201(x) & -TakedCPSC223)) -> CanTakeCPSC323.", "all x.((Student(x) & TakenCPSC201(x) & -TakenCPSC223)) -> CanTakeCPSC323.", "all x.((Student(x) & TakesCPSC201(x) & -TakesCPSC223)) -> CanTakeCPSC323.", "all x.((Student(x) & TakedCPSC201(x) & -TakedCPSC223(x)) -> CanTakeCPSC323(x))", "all x.((Student(x) & TakenCPSC201(x) & -TakenCPSC223(x)) -> CanTakeCPSC323(x))", "all x.((Student(x) & TakedCPSC201(x) & -TakedCPSC223)) -> CanTakeCPSC323(x))", "all x.((Student(x) & TakedCPSC201(x) & -TakedCPSC223(x)) -> CanTakeCPSC323.", "all x.((Student(x) & TakenCPSC201(x) & -TakenCPSC223)) -> CanTakeCPSC323(x))", "all x.((Student(x) & TakenCPSC201(x) & -TakenCPSC223(x)) -> CanTakeCPSC323.", "all x.((Student(x) & TakesCPSC201(x) & -TakesCPSC223(x)) -> CanTakeCPSC323(x))", "all x.((Student(x) & TakesCPSC201(x) & -TakesCPSC223(x)) -> CanTakeCPSC323.", "all x.((Student(x) & TakenCPSC201(x) & -TakenCPSC223)(x)) -> CanTakeCPSC323.", "all x.((Student(x) & TakesCPSC201(x) & -TakesCPSC223)) -> CanTakeCPSC323(x))", "all x.((Student(x) & TakedCPSC201(x) & -TakedCPSC223)) -> TakesCPSC323.", "all x.((Student(x) & TakedCPSC201(x) & -TakedCPSC223)(x)) -> CanTakeCPSC323.", "all x.((Student(x) & TakenCPSC201(x) & -TakenCPSC223)) -> TakenCPSC323."]}
{"id": "folio_train_1182", "nl": "A student cannot take Intro Geology.", "fol": "-EligibleToTake(Introgeology)", "prediction": ["all x.(Student(x) -> -TakesIntroGeology(x))", "all x.(Student(x) -> -IntroGeology(x))", "all x.(Student(x) -> -TakeIntroGeology(x))", "all x.((Student(x) & -TakesIntroGeology(x)) -> -TakesIntroGeology(x))", "all x.(Student(x) -> -CanTakeIntroGeology(x))", "all x.(Student(x) -> -TakesIntraGeology(x))", "all x y.((Student(x) & IntroGeology(y)) -> -CanTake(x,y))", "all x.((Student(x) & -IntroGeology(x)) -> -Takes(x,IntroGeology))", "all x.((Student(x) & -IntroGeology(x)) -> -CanTake(x,IntroGeology))", "all x.((Student(x) & -TakesIntroGeology(x)) -> CannotTakeIntroGeology(x))", "all x.((Student(x) & -IntroGeology(x)) -> CannotTake(x,IntroGeology))", "all x.((Student(x) & -TakesIntroGeology(x)) -> -CanTakeIntroGeology(x))", "all x.(Student(x) -> CannotTakeIntroGeology(x))", "all x.(Student(x) -> -IntraGeology(x))", "all x.(Student(x) -> -TakesIntrageology(x))", "exists x.(Student(x) & -TakesIntroGeology(x))"]}
{"id": "folio_train_1183", "nl": "A heptalogy, is a compound literary or narrative work that is made up of seven distinct works.", "fol": "all x.(ConsistsOfSevenDistinctWorks(x) -> IsHeptalogy(x))", "prediction": ["all x.(Heptalogy(x) -> (CompoundLiteraryOrNarrativeWork(x) & MadeUpOfSevenDistinctWorks(x)))", "all x.(Heptalogy(x) -> (CompoundLiteraryOrNarrativeWork(x) & MadeUpOfSevenDistinctWorks(x)))", "all x.(Heptalogy(x) -> (CompoundLiteraryOrNarrativeWork(x) & SevenDistinctWorks(x)))", "all x.(Heptalogy(x) -> (CompoundLiteraryOrNarrativeWork(x) & SevenDistinctWorks(x)))", "all x.(Heptalogy(x) -> (CompoundLiteraryOrNarrativeWork(x) & ConsistsOfSevenDistinctWorks(x)))", "all x.(Heptalogy(x) -> (CompoundLiteraryOrNarrativeWork(x) & MakesSevenDistinctWorks(x)))", "all x.(Heptalogy(x) -> (CompoundLiteraryOrNarrativeWork(x) & ContainsSevenDistinctWorks(x)))", "all x.(Heptalogy(x) -> (CompoundLiteraryOrNarrativeWork(x) & ConsistsOfSevenDistinctWorks(x)))", "all x.(Heptalogy(x) -> (CompoundLiteraryOrNarrativeWork(x) & ComposedOfSevenDistinctWorks(x)))", "all x.(Heptalogy(x) -> (CompoundLiteraryOrNarrativeWork(x) & MakesUpOfSevenDistinctWorks(x)))", "all x.(Heptalogy(x) -> (CompoundLiteraryOrNarrativeWork(x) & ContainsSevenDistinctWorks(x)))", "all x.(Heptalogy(x) -> (CompoundLiteraryOrNarrativeWork(x) & MakesSevenDistinctWorks(x)))", "all x.(Heptalogy(x) -> (CompoundLiteraryOrNarrativeWork(x) & ComposedOfSevenDistinctWorks(x)))", "all x.(Heptalogy(x) -> (CompoundLiteraryOrNarrativeWork(x) & HasSevenDistinctWorks(x)))", "all x.(Heptalogy(x) -> (CompoundLiteraryOrNarrativeWork(x) & MakesUpOfSevenDistinctWorks(x)))", "all x.(Heptalogy(x) -> (Compound(x) & (LiteraryWork(x) | NarrativeWork(x)) & SevenDistinctWorks(x)))"]}
{"id": "folio_train_1184", "nl": "The Harry Potter series consists of 7 distinct works.", "fol": "ConsistsOfSevenDistinctWorks(HarryPotter)", "prediction": ["all x.(HarryPotterSeries(x) -> SevenDistinctWorks(x))", "all x.(HarryPotter(x) -> SevenDistinctWorks(x))", "all x.(HarryPotter(x) -> ConsistsOfSevenDistinctWorks(x))", "all x.(HarryPotterSeries(x) -> ConsistsOfSevenDistinctWorks(x))", "all x.(HarryPotterSeries(x) -> 7DistinctWorks(x))", "all x y.((HarryPotterSeries(x) & Works(y)) -> ConsistsOf(x,y))", "all x y.((HarryPotter(x) & Works(y)) -> ConsistsOf(x,y))", "all x.(HarryPotter(x) -> 7DistinctWorks(x))", "all x y.((HarryPotter(x) & Work(y)) -> ConsistsOf(x,y))", "all x.(HarryPotterSeries(x) -> HasSevenDistinctWorks(x))", "all x.(HarryPotterSeries(x) -> ConsistsOfDistinctWorks(x))", "all x.(HarryPotter(x) -> HasSevenDistinctWorks(x))", "all x.(HarryPotter(x) -> ConsistsOfDistinctWorks(x))", "All x.(HarryPotter(x) -> SevenDistinctWorks(x))", "all x.(HarryPotterSeries(x) -> ConsistsOfDistinctWorks(x,7))", "all x y.((HarryPotterSeries(x) & Works(y)) -> ConsistsOfSeven(x,y))"]}
{"id": "folio_train_1185", "nl": "The Chronicles of Narnia consists of 7 distinct works.", "fol": "ConsistsOfSevenDistinctWorks(ChroniclesofNarnia)", "prediction": ["All x.(ChroniclesOfNarnia(x) -> ConsistsOfSevenDistinctWorks(x))", "all x.(ChroniclesOfNarnia(x) -> ConsistsOfSevenDistinctWorks(x))", "All x.(ChroniclesOfNarnia(x) -> SevenDistinctWorks(x))", "all x.((ChroniclesOfNarnia(x) & 7DistinctWorks(x)) -> ConsistsOf(x,y))", "all x.((ChroniclesOfNarnia(x) & SevenDistinctWorks(x)) -> ConsistsOf(x,y))", "All x.(ChroniclesOfNarnia(x) -> 7DistinctWorks(x))", "all x.(ChroniclesOfNarnia(x) -> ConsistsOf7DistinctWorks(x))", "All x.(ChroniclesOfNarnia(x) -> ConsistsOf7DistinctWorks(x))", "All x.(ChroniclesOfNarnia(x) -> ConsistsOfTwoDistinctWorks(x))", "all x.(ChroniclesOfNarnia(x) -> ConsistsOfTwoDistinctWorks(x))", "all x.(ChroniclesOfNarnia(x) -> SevenDistinctWorks(x))", "all x.(ChroniclesOfNarnia(x) -> ConsistsOfDistinctWorks(x))", "All x.(ChroniclesOfNarnia(x) -> ConsistsOfDistinctWorks(x))", "all x.(ChroniclesOfNarnia(x) -> 7DistinctWorks(x))", "all x.((ChroniclesOfNarnia(x) & SevenDistinctWorks(x)) -> ConsistsOf(x,7))", "All x.(ChroniclesOfNarnia(x) -> ConsistsOfSevenWorks(x))"]}
{"id": "folio_train_1186", "nl": "The Harry Potter series of books is a heptalogy.", "fol": "IsHeptalogy(HarryPotter)", "prediction": ["all x.(HarryPotter(x) -> Heptalogy(x))", "all x.(HarryPotterBook(x) -> Heptalogy(x))", "all x.(HarryPotterBookSeries(x) -> Heptalogy(x))", "all x.(HarryPotterBooks(x) -> Heptalogy(x))", "all x y.((HarryPotterBook(x) & HarryPotterBook(y)) -> Heptalogy(x))", "all x.((HarryPotterBook(x) & HarryPotterBook(x)) -> Heptalogy(x))", "all x y.((HarryPotter(x) & Book(y)) -> Heptalogy(x))", "all x.(HarryPotterSeriesOfBooks(x) -> Heptalogy(x))", "all x.((HarryPotterBooks(x) & Heptalogy(x)) -> Heptalogy(x))", "all x y.((HarryPotter(x) & Book(y)) -> Heptalogy(x,y))", "all x y.((HarryPotterBook(x) & HarryPotterBook(y)) -> Heptalogy(x,y))", "all x.(HarryPotter(x) -> Heptalogy(x))", "all x.((HarryPotterBookSeries(x) & Heptalogy(x)) -> Heptalogy(x))", "all x.(HarryPotterBookSeries(x) -> Hotalogy(x))", "all x.(HarryPotterBook(x) -> Hotalogy(x))", "all x.(HarryPotterSeries(x) -> Heptalogy(x))"]}
{"id": "folio_train_1187", "nl": "The Chronicles of Narnia series of books is not a heptalogy.", "fol": "-IsHeptalogy(ChroniclesofNarnia)", "prediction": ["all x.((Book(x) & ChroniclesOfNarnia(x)) -> -Heptalogy(x))", "all x.((Books(x) & ChroniclesOfNarnia(x)) -> -Heptalogy(x))", "all x.((BookSeries(x) & ChroniclesOfNarnia(x)) -> -Heptalogy(x))", "all x.(ChroniclesOfNarnia(x) -> -Heptalogy(x))", "all x y.((Book(x) & ChroniclesOfNarnia(x) & Book(y)) -> -Heptalogy(x))", "All x.((Books(x) & ChroniclesOfNarnia(x)) -> -Heptalogy(x))", "All x.((Book(x) & ChroniclesOfNarnia(x)) -> -Heptalogy(x))", "(Heptalogy(ChroniclesOfNarnia) & -Heptalogy(ChroniclesOfNarnia))", "all x y.((Book(x) & ChroniclesOfNarnia(x)) -> -Heptalogy(x))", "All x.(ChroniclesOfNarnia(x) -> -Heptalogy(x))", "all x y.((Book(x) & ChroniclesOfNarnia(y)) -> -Heptalogy(x))", "all x y.((Book(x) & ChroniclesOfNarnia(x)) -> -Heptalogy(y))", "all x y.((Book(x) & ChroniclesOfNarnia(x,y)) -> -Heptalogy(x))", "all x.(ChroniclesOfNarnia(x) -> -Heptalogy(x))", "(Heptalogy(ChroniclesOfNarnia) -> -Heptalogy(ChroniclesOfNarnia))", "all x.(ChroniclesOfNarniaBooks(x) -> -Heptalogy(x))"]}
{"id": "folio_train_1188", "nl": "The Lord of Rings is a heptalogy.", "fol": "IsHeptalogy(LordOfRings)", "prediction": ["all x.(LordOfRings(x) -> Heptalogy(x))", "All x.(LordOfRings(x) -> Heptalogy(x))", "(LordOfRings(LordOfRings) -> Heptalogy(LordOfRings))", "(Heptalogy(LordOfRings)", "The LordOfRings(LordOfRings) -> Heptalogy(LordOfRings))", "LordOfRings(LordOfRings) -> Heptalogy(LordOfRings))", "The LordOfRings(LordOfRings) is a Heptalogy(LordOfRings)", "(LordOfRings(LordOfRings) & Heptalogy(LordOfRings))", "all x.(LordOfRings(x) -> Hyptalogy(x))", "all x y.((LordOfRings(x) & Heptalogy(y)) -> Heptalogy(x))", "The LordOfRings(LordOfRings) is heptalogy(LordOfRings)", "(LordOfRings(LordOfRings) -> Hyptalogy(LordOfRings))", "all x.(LordOfRings(x) -> Hotalogy(x))", "all x.(LordOfRings(x) -> Heptalogy(x))", "exists x.(LordOfRings(x) & Heptalogy(x))", "All x.(LordOfRings(x) -> Hyptalogy(x))"]}
{"id": "folio_train_1189", "nl": "All people who attend Renaissance fairs regularly enjoy dressing up in old-fashioned and historical period clothing.", "fol": "all x.(AttendRenaissanceFairs(x) -> EnjoyDressingUp(x))", "prediction": ["all x.((Person(x) & AttendsRenaissanceFairs(x)) -> EnjoysSewingInOldDecoratedAndHistoricalPeriodClothing(x))", "all x.((Person(x) & AttendsRenaissanceFairs(x)) -> EnjoysShavingInOldDecoratedAndHistoricalPeriodClothing(x))", "all x.((Person(x) & AttendsRenaissanceFairs(x)) -> EnjoysStagingInOldDecoratedAndHistoricalPeriodClothing(x))", "all x.((Person(x) & AttendsRenaissanceFairs(x)) -> EnjoysShavingUpInOldDecoratedAndHistoricalPeriodClothing(x))", "all x.((Person(x) & AttendsRenaissanceFairs(x)) -> EnjoysScoffingInOldDecoratedAndHistoricalPeriodClothing(x))", "all x.((Person(x) & AttendsRenaissanceFairs(x)) -> EnjoysSewingInOldfashionedAndHistoricalPeriodClothing(x))", "all x.((Person(x) & AttendsRenaissanceFairs(x)) -> EnjoysSalingUpInOldDecoratedAndHistoricalPeriodClothing(x))", "all x.((Person(x) & AttendsRenaissanceFairs(x)) -> EnjoysSewingInOldOriginalPeriodClothing(x))", "all x.((Person(x) & AttendsRenaissanceFairs(x)) -> EnjoysSewingInOldOddfashionedAndHistoricalPeriodClothing(x))", "all x.((Person(x) & AttendsRenaissanceFairs(x)) -> EnjoysSewingInOldDecoratedAndHistoricalClothing(x))", "all x.((Person(x) & AttendsRenaissanceFairs(x)) -> EnjoysSewingInOldOldPeriodClothing(x))", "all x.((Person(x) & AttendsRenaissanceFairs(x)) -> EnjoysShavingInOldDecoratedAndHistoricalClothing(x))", "all x.((Person(x) & AttendsRenaissanceFairs(x)) -> EnjoysSewingInOldOdiodPeriodClothing(x))", "all x.((Person(x) & AttendsRenaissanceFairs(x)) -> EnjoysShavingInOldOdiodPeriodClothing(x))", "all x.((Person(x) & AttendsRenaissanceFairs(x)) -> EnjoysSewingInOldfashionedAndHistoricalClothing(x))", "all x.((Person(x) & AttendsRenaissanceFairs(x)) -> EnjoysStagingInOldDecoratedAndHistoricalClothing(x))"]}
{"id": "folio_train_1190", "nl": "If people are fascinated by the history of the Renaissance and other past eras, then they attend Renaissance fairs regularly.", "fol": "all x.(FascinatedByRenaissanceHistory(x) -> AttendRenaissanceFairs(x))", "prediction": ["all x.((Person(x) & FascinatedByRenaissance(x) & FascinatedByPastEras(x)) -> AttendsRenaissanceFairsRegularly(x))", "all x.((FascinatedByRenaissance(x) & FascinatedByPastEras(x)) -> AttendsRenaissanceFairsRegularly(x))", "all x.((People(x) & FascinatedByRenaissance(x) & FascinatedByPastEras(x)) -> AttendsRenaissanceFairsRegularly(x))", "all x.(FascinatedByRenaissanceAndPastEras(x) -> AttendsRenaissanceFairsRegularly(x))", "all x.((FascinatedByRenaissance(x) & FascinatedByPastEras(x)) -> AttendsRenaissanceFairs(x))", "all x.((Person(x) & FascinatedByRenaissance(x) & FascinatedByPastEras(x)) -> AttendsRenaissanceFairs(x))", "all x.((People(x) & FascinatedByRenaissance(x) & FascinatedByPastEras(x)) -> AttendsRenaissanceFairs(x))", "all x.((Popular(x) & FascinatedByRenaissance(x) & FascinatedByPastEras(x)) -> AttendsRenaissanceFairsRegularly(x))", "all x.((Person(x) & FascinatedByRenaissance(x) & OtherPastEras(x)) -> AttendsRenaissanceFairsRegularly(x))", "all x.(FascinatedByRenaissanceAndPastEras(x) -> AttendsRenaissanceFairs(x))", "all x.((Person(x) & FascinatedByRestoration(x) & FascinatedByPastEras(x)) -> AttendsRenaissanceFairsRegularly(x))", "all x.((Person(x) & FascinatedByReformation(x) & FascinatedByPastEras(x)) -> AttendsRenaissanceFairsRegularly(x))", "all x.((FascinatedByRenaissanceAndPastEras(x)) -> AttendsRenaissanceFairsRegularly(x))", "all x.((FascinatedByRestoration(x) & FascinatedByPastEras(x)) -> AttendsRenaissanceFairsRegularly(x))", "all x.((People(x) & FascinatedByRestoration(x) & FascinatedByPastEras(x)) -> AttendsRenaissanceFairsRegularly(x))", "all x.((Person(x) & FascinatedByRestoration(x) & FascinatedByPastEras(x)) -> AttendsRestorationFairsRegularly(x))"]}
{"id": "folio_train_1191", "nl": "People are either fascinated by the history of the Renaissance and other past eras, or are not nostalgic academics who enjoy learning.", "fol": "all x.(FascinatedByRenaissanceHistory(x) | NotNostalgicAcademics(x))", "prediction": ["all x.(People(x) -> ((FascinatedByRenaissance(x) & FascinatedByPastEras(x)) | -NostalgicAcademic(x) & EnjoysLearning(x)))", "all x.(Person(x) -> ((FascinatedByRenaissance(x) & FascinatedByPastEras(x)) | -NostalgicAcademic(x) & EnjoysLearning(x)))", "all x.(Person(x) -> ((FascinatedByReformation(x) & FascinatedByPastEras(x)) | -NostalgicAcademic(x) & EnjoysLearning(x)))", "all x.(People(x) -> ((FascinatedByReformation(x) & FascinatedByPastEras(x)) | -NostalgicAcademic(x) & EnjoysLearning(x)))", "all x.((Person(x) & (FascinatedByRenaissance(x) | FascinatedByPastEras(x))) | -NostalgicAcademic(x) & EnjoysLearning(x)))", "all x.(People(x) -> ((FascinatedByRenaissance(x) & FascinatedByPastEras(x)) | (-NostalgicAcademic(x) & EnjoysLearning(x))))", "all x.((Person(x) & FascinatedByRenaissance(x) & FascinatedByPastEras(x)) | -NostalgicAcademic(x) & EnjoysLearning(x))", "all x.(Person(x) -> ((FascinatedByRenaissance(x) & FascinatedByPastEras(x)) | -NostalgicAcademic(x) & EnjoysLearning(x))))", "all x.(Person(x) -> ((FascinatedByRenaissance(x) & FascinatedByPastEras(x)) | (-NostalgicAcademic(x) & EnjoysLearning(x))))", "all x.(People(x) -> ((FascinatedByRenaissance(x) & FascinatedByPastEras(x)) | -NostalgicAcademic(x) & EnjoysLearning(x))))", "all x.((Person(x) & (FascinatedByRenaissance(x) | NostalgicAcademic(x))) -> -EnjoysLearning(x))", "all x.(Person(x) -> (FascinatedByRenaissance(x) | -NostalgicAcademic(x) & EnjoysLearning(x)))", "all x.((People(x) & (FascinatedByRenaissance(x) | FascinatedByPastEras(x))) | -NostalgicAcademic(x) & EnjoysLearning(x)))", "all x.(Person(x) -> (FascinatedByRenaissance(x) | NostalgicAcademic(x) & EnjoysLearning(x)))", "all x.((Person(x) & (FascinatedByReformation(x) | FascinatedByPastEras(x))) | -NostalgicAcademic(x) & EnjoysLearning(x)))", "all x.(People(x) -> (FascinatedByRenaissance(x) | NostalgicAcademic(x) & EnjoysLearning(x)))"]}
{"id": "folio_train_1192", "nl": "If people are focused on the future and industry professions, then they are not nostalgic academics who enjoy learning.", "fol": "all x.(FocusedOnIndustry(x) -> NotNostalgicAcademics(x))", "prediction": ["all x.((Person(x) & FocusedOnFuture(x) & FocusedOnIndustryProfessions(x)) -> -NostalgicAcademic(x) & EnjoysLearning(x))", "all x.((People(x) & FocusedOnFuture(x) & FocusedOnIndustryProfessions(x)) -> -NostalgicAcademics(x) & EnjoyLearning(x))", "all x.((People(x) & FocusedOnFuture(x) & FocusedOnIndustryProfessions(x)) -> -NostalgicAcademics(x) & EnjoysLearning(x))", "all x.((Person(x) & FocusedOnFuture(x) & FocusedOnIndustriellProfessions(x)) -> -NostalgicAcademic(x) & EnjoysLearning(x))", "all x.(FocusedOnFutureAndIndustryProfessions(x) -> -NostalgicAcademics(x))", "all x.((People(x) & FocusedOnFuture(x) & FocusedOnIndustriellProfessions(x)) -> -NostalgicAcademics(x) & EnjoysLearning(x))", "all x.((People(x) & FocusedOnFuture(x) & FocusedOnIndustriellProfessions(x)) -> -NostalgicAcademics(x) & EnjoyLearning(x))", "all x.((Person(x) & FocusedOnFuture(x) & FocusedOnIndustrialProfessions(x)) -> -NostalgicAcademic(x) & EnjoysLearning(x))", "all x.((People(x) & FocusedOnFuture(x) & FocusedOnIndustrialProfessions(x)) -> -NostalgicAcademics(x) & EnjoyLearning(x))", "all x.((Person(x) & FocusedOnFuture(x) & FocusedOnIndustryProfessions(x)) -> -NostalgicAcademics(x) & EnjoysLearning(x))", "all x.((People(x) & FocusedOnFuture(x) & FocusedOnIndustrialProfessions(x)) -> -NostalgicAcademics(x) & EnjoysLearning(x))", "all x.((Person(x) & FocusedOnFuture(x) & FocusedOnIndustry(x)) -> -NostalgicAcademic(x) & EnjoysLearning(x))", "all x.((Person(x) & FocusedOnFuture(x) & FocusedOnIndustryProfessions(x)) -> -NostalgicAcademics(x) & EnjoyLearning(x))", "all x.((FocusedOnFuture(x) & FocusedOnIndustryProfessions(x)) -> -NostalgicAcademics(x) & EnjoysLearning(x))", "all x.((Person(x) & FocusedOnFuture(x) & FocusedOnIndustryProfessions(x)) -> -NostalgicAcademic(x) & EnjoyLearning(x))", "all x.((People(x) & FocusedOnFuture(x) & FocusedOnIndustryProfessions(x)) -> -NostalgicAcademics(x))"]}
{"id": "folio_train_1193", "nl": "If people are historical professors who are passionate about their job and subject, then they are nostalgic academics who enjoy learning.", "fol": "all x.(HistoricalProfessor(x) -> -NotNostalgicAcademics(x))", "prediction": ["all x.((Person(x) & HistoricalProfessor(x) & PassionateAboutJobAndSubject(x)) -> NostalgicAcademic(x))", "all x.((Person(x) & HistoricalProfessor(x) & PassionateAboutJob(x) & PassionateAboutSubject(x)) -> NostalgicAcademic(x) & EnjoysLearning(x))", "all x.((Person(x) & HistoricalProfessor(x) & PassionateAboutJobAndSubject(x)) -> NostalgicAcademic(x) & EnjoysLearning(x))", "all x.((Person(x) & HistoricalProfessor(x) & PassionateAboutJob(x) & PassionateAboutSubject(x)) -> NostalgicAcademic(x) & EnjoyLearning(x))", "all x.((Person(x) & HistoricalProfessor(x) & PassionateAboutJobAndSubject(x)) -> NostalgicAcademic(x) & EnjoyLearning(x))", "all x.((Person(x) & HistoricalProfessor(x) & PassionateAboutJob(x) & PassionateAboutSubject(x)) -> NostalgicAcademic(x))", "all x.((People(x) & HistoricalProfessor(x) & PassionateAboutJobAndSubject(x)) -> NostalgicAcademic(x))", "all x.((Person(x) & HistoricalProfessor(x) & PassionateInJob(x) & PassionateInSubject(x)) -> NostalgicAcademic(x) & EnjoysLearning(x))", "all x.((People(x) & HistoricalProfessor(x) & PassionateAboutJob(x) & PassionateAboutSubject(x)) -> NostalgicAcademic(x) & EnjoysLearning(x))", "all x.((Person(x) & HistoricalProfessor(x) & PassionateOnJob(x) & PassionateOnSubject(x)) -> NostalgicAcademic(x) & EnjoysLearning(x))", "all x.((Person(x) & HistoricalProfessor(x) & PassionateOnJobAndSubject(x)) -> NostalgicAcademic(x))", "all x.((People(x) & HistoricalProfessor(x) & PassionateAboutJob(x) & PassionateAboutSubject(x)) -> NostalgicAcademic(x) & EnjoyLearning(x))", "all x.((People(x) & HistoricalProfessor(x) & PassionateAboutJobAndSubject(x)) -> NostalgicAcademic(x) & EnjoysLearning(x))", "all x.((Person(x) & HistoricalProfessor(x) & PassionateAboutJob(x) & PassionateAboutSubject(x)) -> NostalgicAcademist(x) & EnjoysLearning(x))", "all x.((Person(x) & HistoricalProfessor(x) & PassionateInJobAndSubject(x)) -> NostalgicAcademic(x))", "all x.((Person(x) & HistoricalProfessor(x) & PassionateOnJobAndSubject(x)) -> NostalgicAcademic(x) & EnjoysLearning(x))"]}
{"id": "folio_train_1194", "nl": "If Clyde is not focused on the future and industry professions, then he is neither focused on the future and industry professions nor enjoys dressing up in old-fashioned and historical period clothing.", "fol": "(-FocusedOnIndustry(Clyde) -> -(FocusedOnIndustry(Clyde) | EnjoyDressingUp(Clyde)))", "prediction": ["all x.((Clyde(x) & -FocusedOnFutureAndIndustryProfessions(x)) -> (-FocusedOnFutureAndIndustryProfessionals(x) & -EnjoysOldDecoratedAndHistoricalPeriodClothing(x)))", "all x.((Clyde(x) & -FocusedOnFutureAndIndustryProfessionals(x)) -> (-FocusedOnFutureAndIndustryProfessionals(x) & -EnjoysOldDecoratedAndHistoricalPeriodClothing(x)))", "all x.((Clyde(x) & -FocusedOnFutureAndIndustryProfessions(x)) -> (-FocusedOnFutureAndIndustryProfessions(x) & -EnjoysOldDecoratedAndHistoricalPeriodClothing(x)))", "all x.((Clyde(x) & -FocusedOnFutureAndIndustryProfessions(x)) -> (-FocusedOnFutureAndIndustryProfessionals(x) & -EnjoysSewingInOldDecoratedAndHistoricalPeriodClothing(x)))", "all x.((Clyde(x) & -FocusedOnFutureAndIndustryProfessions(x)) -> (-FocusedOnFutureAndIndustryProfessionals(x) & -EnjoysOldfashionedAndHistoricalPeriodClothing(x)))", "all x.((Clyde(x) & -FocusedOnFutureAndIndustryProfessions(x)) -> (-FocusedOnFutureAndIndustryProfessionals(x) & -FocusedOnOldDecoratedAndHistoricalPeriodClothing(x)))", "all x.((Clyde(x) & -FocusedOnFutureAndIndustrialProfessions(x)) -> (-FocusedOnFutureAndIndustrialProfessionals(x) & -EnjoysOldDecoratedAndHistoricalPeriodClothing(x)))", "all x.((Clyde(x) & -FocusedOnFutureAndIndustryProfessionals(x)) -> (-FocusedOnFutureAndIndustryProfessionals(x) & -EnjoysSewingInOldDecoratedAndHistoricalPeriodClothing(x)))", "all x.((Clyde(x) & -FocusedOnFutureAndIndustryProfessions(x)) -> (-FocusedOnFutureAndIndustryProfessionals(x) & -EnjoysSewingInOldfashionedAndHistoricalPeriodClothing(x)))", "all x.((Clyde(x) & -FocusedOnFutureAndIndustryProfessions(x)) -> (-FocusedOnFutureAndIndustryProfessions(x) & -EnjoysSewingInOldDecoratedAndHistoricalPeriodClothing(x)))", "all x.((Clyde(x) & -FocusedOnFutureAndIndustryProfessions(x)) -> (-FocusedOnFutureAndIndustryProfessionals(x) & -FocusedOnOldfashionedAndHistoricalPeriodClothing(x)))", "all x.((Clyde(x) & -FocusedOnFutureAndIndustryProfessions(x)) -> (-FocusedOnFutureAndIndustryProfessionals(x) & -EnjoysScoffingInOldDecoratedAndHistoricalPeriodClothing(x)))", "all x.((Clyde(x) & -FocusedOnFutureAndIndustryProfessions(x)) -> (-FocusedOnFutureAndIndustryProfessionals(x) & -EnjoysSewingInOldOddfashionedAndHistoricalPeriodClothing(x)))", "all x.((Clyde(x) & -FocusedOnFutureAndIndustryProfessions(x)) -> (-FocusedOnFutureAndIndustryProfessionals(x) & -EnjoysSewingInOldOddPeriodClothing(x)))", "all x.((Clyde(x) & -FocusedOnFutureAndIndustryProfessions(x)) -> (-FocusedOnFutureAndIndustryProfessionals(x) & -EnjoysSewingInOldOldOldPeriodClothing(x)))", "all x.((Clyde(x) & -FocusedOnFutureAndIndustryProfessions(x)) -> (-FocusedOnFutureAndIndustryProfessionals(x) & -FocusedOnOldDecoratedAndHistoricalClothing(x)))"]}
{"id": "folio_train_1195", "nl": "Clyde attends Renaissance fairs regularly.", "fol": "AttendRenaissanceFairs(Clyde)", "prediction": ["Clyde attendsRenaissanceFairsRegularly(Clyde)", "all x y.((Clyde(x) & RenaissanceFair(y)) -> AttendsRegularly(x,y))", "Clyde attendsRenaissanceFairsRegularly(Clyde))", "all x.(Clyde(x) -> AttendsRenaissanceFairsRegularly(x))", "Clyde attendsRenaissanceFairsRegularly.", "all x.((Clyde(x) & AttendsRenaissanceFairs(x)) -> RegularAttendance(x))", "Clyde attendsRenaissanceFairsRegularly(Clyde,Attends(Clyde,Attends(Clyde,Attends(Clyde,Attends(Clyde,Attends(Clyde,Attends(Clyde,Attends(Clyde,Attends(Clyde,Attends(Clyde)))", "Clyde attendsRenaissanceFairsRegularly(Clyde,Attends(Clyde,Attends(Clyde,Attends(Clyde,Attends(Clyde,Attends(Clyde,Attends(Clyde,Attends(Clyde,Attends(Clyde,Attends(Clyde,Attends(Clyde,Attends))))", "Clyde attendsRenaissanceFairsRegularly(Clyde,Attends(Clyde,Attends(Clyde,Attends(Clyde,Attends(Clyde,Attends(Clyde,Attends(Clyde,Attends(Clyde,Attends(Clyde,Attends(Clyde,Attends)))", "all x.((Clyde(x) & RenaissanceFair(y)) -> AttendsRegularly(x,y))", "Clyde attendsRenaissanceFairsRegularly(Clyde,Attends(Clyde,Attends(Clyde,Attends(Clyde,Attends(Clyde,Attends(Clyde,Attends(Clyde,Attends(Clyde,Attends(Clyde)))", "Clyde attendsRenaissanceFairsRegularly(Clyde,Attends(Clyde,Attends(Clyde,Attends(Clyde,Attends(Clyde,Attends(Clyde,Attends(Clyde,Attends(Clyde,Attends(Clyde,Attends(Clyde,Attends(Clyde))))", "Clyde attendsRenaissanceFairsRegularly(Clyde,Attends(Clyde,Attends(Clyde,Attends(Clyde,Attends(Clyde,Attends(Clyde,Attends(Clyde,Attends(Clyde,Attends(Clyde,Attends(Clyde,Attends(Clyde,Attends(Clyde))))", "Clyde attendsRenaissanceFairsRegularly(Clyde,Attends(Clyde,Attends(Clyde,Attends(Clyde,Attends(Clyde,Attends(Clyde,Attends(Clyde,Attends(Clyde,Attends(Clyde,Attends)))", "Clyde attendsRenaissanceFairsRegularly(Clyde,Attends(Clyde,Attends(Clyde,Attends(Clyde,Attends(Clyde,Attends(Clyde,Attends(Clyde,Attends(Clyde)))", "Clyde attendsRenaissanceFairsRegularly(Clyde,Attends(Clyde,Attends(Clyde,Attends(Clyde,Attends(Clyde,Attends(Clyde,Attends(Clyde,Attends(Clyde,Attends)))"]}
{"id": "folio_train_1196", "nl": "Clyde is a history professor who is passionate about his job and subject.", "fol": "HistoricalProfessor(Clyde)", "prediction": ["all x.((Professor(x) & PassionateAboutJob(x) & PassionateAboutSubject(x)) -> Clyde(x))", "all x.((HistoryProfessor(x) & PassionateAboutJobAndSubject(x)) -> Clyde(x))", "all x.((HistoryProfessor(x) & PassionateAboutJob(x) & PassionateAboutSubject(x)) -> Clyde(x))", "all x.((Professor(x) & PassionateAboutJobAndSubject(x)) -> Clyde(x))", "all x.((Professor(x) & History(x) & PassionateAboutJob(x) & PassionateAboutSubject(x)) -> Clyde(x))", "all x.((Professor(x) & History(x) & PassionateAboutJobAndSubject(x)) -> Clyde(x))", "all x.((Professor(x) & Clyde(x)) -> (PassionateAboutJob(x) & PassionateAboutSubject(x)))", "all x.(Clyde(x) -> (HistoryProfessor(x) & PassionateAboutJob(x) & PassionateAboutSubject(x)))", "(HistoryProfessor(Clyde) & PassionateAboutJobAndSubject(Clyde))", "all x.((Professor(x) & PassionateAboutHistory(x)) -> Clyde(x))", "all x.((HistoryProfessor(x) & PassionateAbout(x,job) & PassionateAbout(x,subject)) -> Clyde(x))", "(HistoryProfessor(Clyde) & PassionateAboutJob(Clyde) & PassionateAboutSubject(Clyde))", "all x.(Clyde(x) -> (HistoryProfessor(x) & PassionateAboutJobAndSubject(x)))", "all x.((Historian(x) & PassionateAboutJobAndSubject(x)) -> Clyde(x))", "all x.((Professor(x) & PassionateInHistory(x)) -> Clyde(x))", "all x.((Professor(x) & Clyde(x)) -> PassionateAboutJobAndSubject(x))"]}
{"id": "folio_train_1197", "nl": "Clyde is a history professor who is passionate about his job and subject, or is not a nostalgic academic who enjoys learning.", "fol": "(HistoricalProfessor(Clyde) | NotNostalgicAcademics(Clyde))", "prediction": ["all x.(Clyde(x) -> ((HistoryProfessor(x) & PassionateAboutJob(x) & PassionateAboutSubject(x)) | (-NostalgicAcademic(x) & EnjoysLearning(x))))", "((HistoryProfessor(Clyde) & PassionateAboutJob(Clyde) & PassionateAboutSubject(Clyde)) | (NostalgicAcademic(Clyde) & EnjoysLearning(Clyde))))", "((HistoryProfessor(Clyde) & PassionateAboutJobAndSubject(Clyde)) | (NostalgicAcademic(Clyde) & EnjoysLearning(Clyde))))", "all x.(Clyde(x) -> ((HistoryProfessor(x) & PassionateAboutJob(x) & PassionateAboutSubject(x)) | (NostalgicAcademic(x) & EnjoysLearning(x))))", "all x.(Clyde(x) -> ((HistoryProfessor(x) & PassionateAboutJob(x) & PassionateAboutSubject(x)) | -NostalgicAcademic(x) & EnjoysLearning(x)))", "all x.((HistoryProfessor(x) & PassionateAboutJobAndSubject(x)) | (-NostalgicAcademic(x) & EnjoysLearning(x))))", "all x.(Clyde(x) -> ((HistoryProfessor(x) & PassionateAboutJobAndSubject(x)) | (-NostalgicAcademic(x) & EnjoysLearning(x))))", "all x.(Clyde(x) -> ((HistoryProfessor(x) & PassionateAboutJobAndSubject(x)) | -NostalgicAcademic(x) & EnjoysLearning(x)))", "all x.(Clyde(x) -> ((HistoryProfessor(x) & PassionateAboutJobAndSubject(x)) | (NostalgicAcademic(x) & EnjoysLearning(x))))", "all x.((HistoryProfessor(x) & (PassionateAboutJob(x) | NostalgicAcademic(x))) -> EnjoysLearning(x))", "all x.((HistoryProfessor(x) & (PositiveAboutJob(x) | NostalgicAcademic(x))) -> EnjoysLearning(x))", "((HistoryProfessor(Clyde) & PassionateAboutJobAndSubject(Clyde)) | (-NostalgicAcademic(Clyde) & EnjoysLearning(Clyde))))", "all x.(Clyde(x) -> ((HistoryProfessor(x) & PassionateAboutJobAndSubject(x)) | NostalgicAcademic(x) & EnjoysLearning(x)))", "all x.((HistoryProfessor(x) & PassionateAboutJobAndSubject(x)) | -NostalgicAcademic(x) & EnjoysLearning(x))", "((HistoryProfessor(Clyde) & PassionateAboutJobAndSubject(Clyde)) | -NostalgicAcademic(Clyde) & EnjoysLearning(Clyde)))", "all x.(Clyde(x) -> ((HistoryProfessor(x) & PassionateAboutJob(x) & PassionateAboutSubject(x)) | (-NostalgicAcademic(x) & EnjoysLearning(x)))))"]}
{"id": "folio_train_1198", "nl": "No sports cars are vehicles intended to be driven at moderate speeds.", "fol": "all x.(IsSportsCar(x) -> -IsIntendedForModerateSpeeds(x))", "prediction": ["-exists x.(SportsCar(x) & Vehicle(x) & DesignedForModerateSpeeds(x))", "-exists x.(SportsCar(x) & Vehicle(x) & DesignedForModerateSpeed(x))", "all x.(SportsCar(x) -> -IntendedForModerateSpeeds(x))", "all x.(SportsCar(x) -> -(Vehicle(x) & DesignedForModerateSpeeds(x)))", "all x.(SportsCar(x) -> -IntendedToBeDrivenAtModerateSpeeds(x))", "-exists x.(SportsCar(x) & Vehicle(x) & DesignedToBeDrivenAtModerateSpeeds(x))", "-exists x.(SportsCar(x) & DrivenAtModerateSpeeds(x))", "all x.(SportsCar(x) -> -(IntendedForModerateSpeeds(x) & -IntendedForModerateSpeeds(x)))", "-exists x.(SportsCar(x) & Vehicle(x) & DesignedForModerateSpeeds(x))", "-exists x.(SportsCar(x) & Vehicle(x) & DrivenAtModerateSpeeds(x))", "-exists x.(SportsCar(x) & Vehicle(x) & IntendedForModerateSpeeds(x))", "-exists x.(SportsCar(x) & -IntendedForModerateSpeeds(x))", "-exists x.(SportCar(x) & Vehicle(x) & DesignedForModerateSpeeds(x))", "-exists x.(SportsCar(x) & -DrivenAtModerateSpeeds(x))", "-exists x.(SportsCar(x) & IntendedForModerateSpeeds(x))", "-exists x.(SportsCar(x) & Vehicle(x) & DesignedForModernSpeeds(x))"]}
{"id": "folio_train_1199", "nl": "All automobiles designed for family use are vehicles intended to be driven at moderate speeds.", "fol": "all x.(IsDesignedForFamilyUse(x) -> IsIntendedForModerateSpeeds(x))", "prediction": ["all x.((Automobile(x) & DesignedForFamilyUse(x)) -> IntendedForModerateSpeeds(x))", "all x.((Automobile(x) & DesignedForFamilyUse(x)) -> DesignedForModerateSpeeds(x))", "all x.((Automobile(x) & DesignedForFamilyUse(x)) -> IntendedToBeDrivenAtModerateSpeeds(x))", "all x.((Automobile(x) & DesignedForFamilyUse(x)) -> IntendedToDriveAtModerateSpeeds(x))", "all x.((Automobile(x) & DesignedForFamilyUse(x)) -> DrivenAtModerateSpeeds(x))", "all x.((Automobile(x) & DesignedForFamilyUse(x)) -> DesignedToBeDrivenAtModerateSpeeds(x))", "all x.((Automobile(x) & DesignedForFamilyUse(x)) -> IntendedAtModerateSpeeds(x))", "all x.((Automobile(x) & DesignedForFamilyUse(x)) -> DesignedForModerateSpeed(x))", "all x.((Automobile(x) & DesignedForFamilyUse(x)) -> IntendedForModerateSpeed(x))", "all x.((Automobile(x) & DesignedForFamilyUse(x)) -> Vehicle(x))", "all x.((Automobile(x) & DesignedForFamilyUse(x)) -> VehicleIntendedForModerateSpeeds(x))", "all x.((Automobile(x) & DesignedForFamilyUse(x)) -> IntendedForModerateSpeedDrive(x))", "all x.((Automobile(x) & DesignedForFamilyUse(x)) -> MotorizedAtModerateSpeeds(x))", "all x.((Automobile(x) & DesignedForFamilyUse(x)) -> DesignedToDriveAtModerateSpeeds(x))", "all x.((Cargo(x) & DesignedForFamilyUse(x)) -> DesignedForModerateSpeeds(x))", "all x.((Cargo(x) & DesignedForFamilyUse(x)) -> IntendedForModerateSpeeds(x))"]}
{"id": "folio_train_1200", "nl": "No sports cars are automobiles designed for family use.", "fol": "all x.(IsSportsCar(x) -> -IsDesignedForFamilyUse(x))", "prediction": ["-exists x.(SportsCar(x) & DesignedForFamilyUse(x))", "-exists x.(SportsCar(x) & Automobile(x) & DesignedForFamilyUse(x))", "all x.(SportsCar(x) -> -DesignedForFamilyUse(x))", "-exists x.(SportsCar(x) & -DesignedForFamilyUse(x))", "-exists x.(SportsCar(x) & Automobile(x) & DesignedForFamilyUse(x))", "-exists x.(SportsCar(x) & Car(x) & DesignedForFamilyUse(x))", "-exists x.(SportsCar(x) & Automotive(x) & DesignedForFamilyUse(x))", "-exists x.(SportsCar(x) & Autocar(x) & DesignedForFamilyUse(x))", "all x.(SportsCar(x) -> -(DesignedForFamilyUse(x) & DesignedForFamilyUse(x)))", "-exists x.(SportsCar(x) & Car(y) & DesignedForFamilyUse(x,y))", "-exists x.(SportsCar(x) & Automobile(y) & DesignedForFamilyUse(x))", "all x.(SportsCar(x) -> -(DesignedForFamilyUse(x) | DesignedForFamilyUse(x)))", "-exists x.(SportsCar(x) & Car(y) & DesignedForFamilyUse(x))", "(-exists x.(SportsCar(x) & DesignedForFamilyUse(x)))", "-all x.(SportsCar(x) -> DesignedForFamilyUse(x))", "-exists x.(SportsCar(x) & Automobile(y) & DesignedForFamilyUse(x,y))"]}
{"id": "folio_train_1201", "nl": "If people work well in teams in their workplace, then they get along with all their colleagues at their work.", "fol": "all x.(WorksWellInTeams(x) -> GetsAlongWithColleagues(x))", "prediction": ["all x y.((Person(x) & Workplace(y) & WorksWellInTeams(x,y)) -> GetsTogetherWithColleagues(x,y))", "all x y.((Person(x) & Workplace(y) & WorksWellInTeams(x,y)) -> GetsTogether(x,y))", "all x y.((Person(x) & Workplace(y) & WorksWellInTeams(x,y)) -> GetsCooperation(x,y))", "all x y.((Person(x) & Workplace(y) & WorksWellInTeams(x,y)) -> GetsAlongWithColleagues(x,y))", "all x y.((Person(x) & Workplace(y) & WorksWellInTeams(x,y)) -> GetsTogetherWithCoworkers(x,y))", "all x.(WorksWellInTeams(x) -> GetsTogetherWithColleagues(x))", "all x y.((Person(x) & WorkWellInTeams(x) & Workplace(y)) -> GetTogetherWithColleagues(x,y))", "all x y z.((Person(x) & Workplace(y) & Workplace(z) & WorksWellInTeams(x,y)) -> GetsTogetherWithColleagues(x,z))", "all x y.((Person(x) & WorkWellInTeams(x) & Workplace(y)) -> GetsTogetherWithColleagues(x,y))", "all x y.((Person(x) & Workplace(y) & WorksWellInTeams(x,y)) -> GetTogetherWithColleagues(x,y))", "all x y z.((Person(x) & Workplace(y) & Workplace(z) & WorksWellInTeams(x,y)) -> GetsTogether(x,z))", "all x y.((People(x) & WorkWellInTeams(x) & Workplace(y)) -> GetTogetherWithColleagues(x,y))", "all x.((Person(x) & WorksWellInTeams(x) & Workplace(x)) -> GetsTogetherWithColleagues(x))", "all x y.((Person(x) & Workplace(y) & WorksWellInTeams(x,y)) -> GetsTogetherWithColleaguesAtWork(x,y))", "all x.(WorksWellInTeamsInWorkplace(x) -> GetsTogetherWithColleaguesAtWork(x))", "all x y z.((Person(x) & Workplace(y) & Workplace(z) & WorksWellInTeams(x,y)) -> GetsCooperation(x,z))"]}
{"id": "folio_train_1202", "nl": "If people come to work every day with a positive attitude, then they work well in teams in their workplace.", "fol": "all x.(ComesToWorkWithPositiveAttitude(x) -> WorksWellInTeams(x))", "prediction": ["all x.((Person(x) & ComesToWorkEveryDayWithPositiveAttitude(x)) -> WorksWellInTeams(x))", "all x.((PositiveAttitude(x) & ComesToWorkEveryDay(x)) -> WorksWellInTeams(x))", "all x.((Person(x) & ComesToWorkEveryDayWithPositiveAttitude(x)) -> WorkWellInTeams(x))", "all x.((Person(x) & ComesToWorkEveryDayWithPositiveAttitude(x)) -> WorksWellInTeamsInWorkplace(x))", "all x.((People(x) & ComesToWorkEveryDayWithPositiveAttitude(x)) -> WorksWellInTeams(x))", "all x.((PositiveAttitude(x) & ComesToWorkEveryDay(x)) -> WorkWellInTeams(x))", "all x.((People(x) & ComesToWorkEveryDayWithPositiveAttitude(x)) -> WorkWellInTeams(x))", "all x.((Person(x) & ComesToWorkEveryDayWithPositiveAttitude(x)) -> WorkWellInTeamsInWorkplace(x))", "all x.((Person(x) & ComesToWorkEveryDay(x) & PositiveAttitude(x)) -> WorksWellInTeams(x))", "all x.((PositiveAttitude(x) & ComesToWorkEveryDay(x)) -> WorksWellInTeamsInWorkplace(x))", "all x.((People(x) & ComesToWorkEveryDayWithPositiveAttitude(x)) -> WorksWellInTeamsInWorkplace(x))", "all x.((Person(x) & ComesToWorkEveryDay(x) & PositiveAttitude(x)) -> WorkWellInTeams(x))", "all x.((People(x) & ComesToWorkEveryDayWithPositiveAttitude(x)) -> WorkWellInTeamsInWorkplace(x))", "all x.((PositiveAttitude(x) & ComesToWorkEveryDay(x)) -> WorkWellInTeamsInWorkplace(x))", "all x.((PositiveAttitude(x) & ComesToWork(x)) -> WorksWellInTeams(x))", "all x.((Person(x) & ComesToWorkWithPositiveAttitude(x)) -> WorksWellInTeams(x))"]}
{"id": "folio_train_1203", "nl": "People either come into work every day with a positive attitude or are always tired every morning.", "fol": "(all x.((ComesToWorkWithPositiveAttitude(x) & -AlwaysTired(x)) | (-ComesToWorkWithPositiveAttitude(x) & AlwaysTired(x))) & all x.(AlwaysTired(x) -> ReceivesPromotionsFromBoss(x)))", "prediction": ["all x.((Person(x) & ComesIntoWorkEveryDayWithPositiveAttitude(x)) | TiredEveryMorning(x))", "all x.((Person(x) & ComesIntoWorkEveryDay(x) & PositiveAttitude(x)) | TiredEveryMorning(x))", "all x.(PositiveAttitude(x) | TiredEveryMorning(x))", "all x y.((Person(x) & Work(y)) -> (ComesIntoWorkEveryDayWithPositiveAttitude(x,y) | TiredEveryMorning(x,y)))", "all x y.((Person(x) & Work(y)) -> (ComesInto(x,y) & PositiveAttitude(x) | TiredEveryMorning(x)))", "all x.(People(x) -> (ComesIntoWorkEveryDayWithPositiveAttitude(x) | TiredEveryMorning(x)))", "all x.((Person(x) & (ComesIntoWorkEveryDayWithPositiveAttitude(x) | TiredEveryMorning(x))) -> (PositiveAttitude(x) | TiredEveryMorning(x)))", "all x y.((Person(x) & Work(y)) -> (ComesIntoWorkEveryDayWithPositiveAttitude(x,y) | TiredEveryMorning(x)))", "all x.((Person(x) & (ComesIntoWorkEveryDayWithPositiveAttitude(x) | TiredEveryMorning(x))) -> PositiveAttitude(x))", "all x.((Person(x) & (ComesIntoWorkEveryDayWithPositiveAttitude(x) | TiredEveryMorning(x))) -> (PositiveAttitude(x) | TiredEveryMorning(x))))", "all x.((Person(x) & ComesIntoWork(x) & PositiveAttitude(x)) | TiredEveryMorning(x))", "all x.((Person(x) & (ComesIntoWorkEveryDay(x) & PositiveAttitude(x) | TiredEveryMorning(x))) -> PositiveAttitude(x))", "all x.(PositiveAttitude(x) | TiredEachMorning(x))", "all x y.((Person(x) & Work(y)) -> (ComesIntoWorkEveryDayWithPositiveAttitude(x,y) | TiredEachMorning(x,y)))", "all x.((Person(x) & ComesIntoWorkEveryDayWithPositiveAttitude(x)) | TiredEachMorning(x))", "all x y.((Person(x) & Work(y)) -> (ComesInto(x,y) & PositiveAttitude(x) | TiredEachMorning(x)))"]}
{"id": "folio_train_1204", "nl": "If people get many promotions from their boss at work, then they receive negative feedback from teams at work.", "fol": "all x.(ReceivesPromotionsFromBoss(x) -> -ReceivesNegativeFeedback(x))", "prediction": ["all x y.((Person(x) & BossAtWork(y) & ManyPromotions(x,y)) -> NegativeFeedback(x,y))", "all x y z.((Person(x) & Boss(y) & Team(z) & ManyPromotions(x,y)) -> NegativeFeedback(x,z))", "all x y.((Person(x) & Boss(y) & ManyPromotions(x,y)) -> NegativeFeedback(x,y))", "all x y.((Person(x) & BossAtWork(y) & ManyPromotions(x,y)) -> NegativeFeedbackFromTeamsAtWork(x))", "all x.((Person(x) & ManyPromotionsFromBossAtWork(x)) -> NegativeFeedbackFromTeamsAtWork(x))", "all x y.((Person(x) & BossAtWork(y) & ManyPromotions(x,y)) -> NegativeFeedback(x))", "all x.((Person(x) & ManyPromotions(x)) -> NegativeFeedback(x))", "all x y.((Person(x) & BossAtWork(y) & ManyPromotions(x,y)) -> ReceivesNegativeFeedback(x,y))", "all x y.((Person(x) & Boss(y) & ManyPromotions(x,y)) -> NegativeFeedback(x))", "all x y.((Person(x) & BossAtWork(y) & ManyPromotions(x,y)) -> NegativeFeedbackFromTeamsAtWork(x,y))", "all x.((Person(x) & BossAtWork(x) & ManyPromotions(x)) -> NegativeFeedback(x))", "all x.((Person(x) & ManyPromotions(x) & BossAtWork(x)) -> NegativeFeedback(x))", "all x.((Person(x) & ManyPromotions(x) & BossAtWork(x)) -> NegativeFeedbackFromTeamsAtWork(x))", "all x.((Person(x) & BossAtWork(x) & ManyPromotions(x)) -> NegativeFeedbackFromTeamsAtWork(x))", "all x y.((People(x) & BossAtWork(y) & ManyPromotions(x,y)) -> NegativeFeedback(x,y))", "all x y z.((Person(x) & Boss(y) & Team(z) & ManyPromotions(x,y,z)) -> NegativeFeedback(x,z))"]}
{"id": "folio_train_1205", "nl": "Kat is either both a person who works well in teams in their workplace and is always tired every morning, or she neither works well in teams in their workplace nor is always tired every morning.", "fol": "((WorksWellInTeams(Kat) & AlwaysTired(Kat)) | (-WorksWellInTeams(Kat) & -AlwaysTired(Kat)))", "prediction": ["all x.(Kat(x) -> (WorksWellInTeams(x) & TiredEveryMorning(x)) | (-WorksWellInTeams(x) & TiredEveryMorning(x))))", "all x.((Person(x) & WorksWellInTeams(x) & TiredEveryMorning(x)) | (-WorksWellInTeams(x) & TiredEveryMorning(x))))", "all x.(Kat(x) -> ((WorksWellInTeams(x) & TiredEveryMorning(x)) | (-WorksWellInTeams(x) & TiredEveryMorning(x)))))", "all x.(Kat(x) -> (WorksWellInTeams(x) & TiredEveryMorning(x)) | (-WorksWellInTeams(x) & TiredEveryMorning(x)))))", "all x.(Kat(x) -> (WorksWellInTeams(x) & TiredEveryMorning(x)) | -WorksWellInTeams(x) & TiredEveryMorning(x)))", "all x.(Kat(x) -> ((WorksWellInTeams(x) & TiredEveryMorning(x)) | -WorksWellInTeams(x) & TiredEveryMorning(x))))", "all x y.((Person(x) & Workplace(y) & WorksWellInTeams(x,y) & TiredEveryMorning(x)) | (-WorksWellInTeams(x,y) & TiredEveryMorning(x))))", "all x y.((Person(x) & Workplace(y) & WorksWellInTeams(x,y) & TiredEveryMorning(x)) | (-WorksWellInTeams(x,y) & TiredEveryMorning(x,y))))", "all x.(Kat(x) -> ((WorksWellInTeams(x) & TiredEveryMorning(x)) | (-WorksWellInTeams(x) & TiredEveryMorning(x)) | (-WorksWellInTeams(x) & TiredEveryMorning(x)))))", "all x.(Kat(x) -> (WorksWellInTeams(x) & TiredEveryMorning(x)) | (-WorksWellInTeams(x) & TiredEveryMorning(x)) | (-WorksWellInTeams(x) & TiredEveryMorning(x)))))", "all x.(Kat(x) -> (WorksWellInTeams(x) & TiredEveryMorning(x)) | (-WorksWellInTeams(x) & TiredEveryMorning(x))))", "all x.(Kat(x) -> (WorksWellInTeamsInWorkplace(x) & TiredEveryMorning(x)) | (-WorksWellInTeamsInWorkplace(x) & TiredEveryMorning(x))))", "all x.(Kat(x) -> ((WorksWellInTeams(x) & TiredEveryMorning(x)) | (-WorksWellInTeams(x) & TiredEveryMorning(x))))", "all x.(Kat(x) -> (WorksWellInTeams(x) & TiredEachMorning(x)) | (-WorksWellInTeams(x) & TiredEachMorning(x))))", "all x.((Person(x) & WorksWellInTeams(x) & TiredEveryMorning(x)) | (-WorksWellInTeams(x) & TiredEveryMorning(x)) | (-WorksWellInTeams(x) & TiredEveryMorning(x)))))", "all x.(Kat(x) -> (WorksWellInTeams(x) & TiredEveryMorning(x) | -WorksWellInTeams(x) & TiredEveryMorning(x)))"]}
{"id": "folio_train_1206", "nl": "Kat is a person who comes to work every day with a positive attitude.", "fol": "ComesToWorkWithPositiveAttitude(Kat)", "prediction": ["all x.(Kat(x) -> ComesToWorkEveryDayWithPositiveAttitude(x))", "all x.(Kat(x) -> (ComesToWorkEveryDay(x) & PositiveAttitude(x)))", "all x.(Kat(x) -> (ComesToWorkEveryDayWithPositiveAttitude(x)))", "all x.((Person(x) & ComesToWorkEveryDay(x) & PositiveAttitude(x)) -> PositiveAttitude(x))", "all x.(Kat(x) -> ComesToWorkWithPositiveAttitude(x))", "all x.(Kat(x) -> (PositiveAttitude(x) & ComesToWorkEveryDay(x)))", "all x.(Kat(x) -> ComesToWorkEveryDayWithPositiveAttitude(x))", "all x y.((Person(x) & Day(y) & ComesToWork(x,y)) -> PositiveAttitude(x))", "all x.(Kat(x) -> (ComesToWorkEveryDayWithPositiveAttitude(x) & PositiveAttitude(x)))", "all x.((Person(x) & ComesToWorkEveryDayWithPositiveAttitude(x)) -> PositiveAttitude(x))", "all x y.((Person(x) & Person(y) & ComesToWorkEveryDay(x,y) & PositiveAttitude(x)) -> PositiveAttitude(x))", "all x.(Kat(x) -> (ComesToWork(x) & PositiveAttitude(x)))", "all x y.((Person(x) & Person(y) & ComesToWorkEveryDay(x,y) & PositiveAttitude(y)) -> PositiveAttitude(x))", "all x y.((Person(x) & Day(y) & ComesToWork(x,y) & PositiveAttitude(x)) -> PositiveAttitude(x))", "all x.(Kat(x) -> (ComesToWorkWithPositiveAttitude(x) & EveryDay(x)))", "all x.(Kat(x) -> (ComesToWorkEveryDay(x) & PositiveAttitude(x)))"]}
{"id": "folio_train_1207", "nl": "Kat gets along with her colleagues at her work and receives negative feedback from teams at her work.", "fol": "(GetsAlongWithColleagues(Kat) & ReceivesNegativeFeedback(Kat))", "prediction": ["all x y.((Kat(x) & Work(y)) -> (GetsTogether(x,y) & ReceivesNegativeFeedback(x,y)))", "all x y z.((Kat(x) & Work(y) & Team(z)) -> (GetsTogether(x,y) & ReceivesNegativeFeedback(x,z)))", "all x y.((Kat(x) & Work(y)) -> (GetsCoworkersAt(x,y) & ReceivesNegativeFeedback(x,y)))", "all x y.((Kat(x) & Work(y)) -> (GetsWithCoworkers(x,y) & ReceivesNegativeFeedback(x,y)))", "all x y.((Kat(x) & Work(y)) -> (GetsAlong(x,y) & ReceivesNegativeFeedback(x,y)))", "all x y z.((Kat(x) & Work(y) & Team(z)) -> (GetsAlong(x,y) & ReceivesNegativeFeedback(x,z)))", "all x y.((Kat(x) & Work(y)) -> (GetsTogether(x,y) & NegativeFeedback(x,y)))", "all x y z.((Kat(x) & Work(y) & Team(z)) -> (GetsAt(x,y) & ReceivesNegativeFeedback(x,z)))", "all x y.((Kat(x) & Work(y)) -> (GetsAt(x,y) & ReceivesNegativeFeedback(x,y)))", "all x y z.((Kat(x) & Work(y) & Team(z)) -> (GetsTogetherWith(x,y) & ReceivesNegativeFeedback(x,z)))", "all x y.((Kat(x) & Work(y)) -> (GivesAlong(x,y) & ReceivesNegativeFeedback(x,y)))", "all x y.((Kat(x) & Work(y)) -> (GetsAlong(x,y) & NegativeFeedback(x,y)))", "all x y z.((Kat(x) & Work(y) & Team(z)) -> (GetsTogether(x,y) & NegativeFeedback(x,z)))", "all x y.((Kat(x) & Work(y)) -> (GivesAlong(x,y) & NegativeFeedback(x,y)))", "all x y.((Kat(x) & Work(y)) -> (GetsTogether(x,y) & PositiveFeedback(x,y)))", "all x y.((Kat(x) & Work(y)) -> (GetsCoworkersAt(x,y) & NegativeFeedback(x,y)))"]}
{"id": "folio_train_1208", "nl": "Kat either gets along with her colleagues at her work or receives negative feedback from teams at her work.", "fol": "(GetsAlongWithColleagues(Kat) | ReceivesNegativeFeedback(Kat))", "prediction": ["all x y.((Kat(x) & Work(y)) -> (GetsAlong(x,y) | NegativeFeedback(x,y)))", "all x y.((Kat(x) & Work(y)) -> (GivesAlong(x,y) | NegativeFeedback(x,y)))", "all x y.((Kat(x) & Work(y)) -> (GasesWithColleagues(x,y) | NegativeFeedback(x,y)))", "all x y.((Kat(x) & Work(y)) -> (GasesWithCoworkers(x,y) | NegativeFeedback(x,y)))", "all x y.((Kat(x) & Work(y)) -> (GetsAlongWithCoworkers(x,y) | NegativeFeedback(x,y)))", "all x y.((Kat(x) & Work(y)) -> (GetsAlongWithColleagues(x,y) | NegativeFeedback(x,y)))", "all x y.((Kat(x) & Work(y)) -> (GetsWithCoworkers(x,y) | NegativeFeedback(x,y)))", "all x y.((Kat(x) & Work(y)) -> (GetsCoworkersAt(x,y) | NegativeFeedbackFromTeamsAt(x,y)))", "all x y.((Kat(x) & Work(y)) -> (GetsWithColleagues(x,y) | NegativeFeedback(x,y)))", "all x y z.((Kat(x) & Work(y) & Work(z)) -> (GetsAlong(x,y) | NegativeFeedback(x,z)))", "all x y.((Kat(x) & Work(y)) -> (GetsTogether(x,y) | NegativeFeedback(x,y)))", "all x y.((Kat(x) & Work(y)) -> (GetsCoworkersAt(x,y) | NegativeFeedback(x,y)))", "all x y.((Kat(x) & Work(y)) -> (GasesWithColleagues(x,y) | ReceivesNegativeFeedback(x,y)))", "all x y.((Kat(x) & Work(y)) -> (GetsAlongWithCoworkers(x,y) | NegativeFeedbackFromTeams(x,y)))", "all x y z.((Kat(x) & Work(y) & Work(z)) -> (GetsAlong(x,y,z) | NegativeFeedback(x,y,z)))", "all x y z.((Kat(x) & Work(y) & Work(z)) -> (GetsAlong(x,y,z) | NegativeFeedback(x,y)))"]}
{"id": "folio_train_1209", "nl": "Drishti is open-source.", "fol": "IsOpenSource(Drishti)", "prediction": ["all x.(Drishti(x) -> OpenSource(x))", "all x.(Dishti(x) -> OpenSource(x))", "all x.(Drishti(x) -> OpenSource(x))", "all x.((Drishti(x) & OpenSource(x)) -> OpenSource(x))", "all x.(Dreshti(x) -> OpenSource(x))", "all x y.((Drishti(x) & OpenSource(y)) -> OpenSource(x))", "All x.(Drishti(x) -> OpenSource(x))", "all x y.((Drishti(x) & Source(y)) -> OpenSource(x))", "(OpenSource(Drishti) & OpenSource(Drishti))", "all x.(Drishti(x) -> OpenSource(x))", "all x y.((Drishti(x) & OpenSource(x)) -> OpenSource(y))", "all x y.((Drishti(x) & OpenSource(y)) -> OpenSource(x,y))", "all x y.((Drishti(x) & OpenSource(x)) -> OpenSource(x))", "all x.(Dryti(x) -> OpenSource(x))", "all x.(Dorishti(x) -> OpenSource(x))", "exists x.(Drishti(x) & OpenSource(x))"]}
{"id": "folio_train_1210", "nl": "Open-source software is free to modify.", "fol": "all x.(IsOpenSource(x) -> IsFreeToModify(x))", "prediction": ["all x.(OpenSourceSoftware(x) -> FreeToModify(x))", "all x y.((OpenSourceSoftware(x) & Software(y)) -> FreeToModify(x,y))", "all x y.((OpenSourceSoftware(x) & Software(y)) -> FreeToModify(x))", "all x y z.((OpenSourceSoftware(x) & Software(y) & Software(z)) -> FreeToModify(x,y,z))", "all x.((Software(x) & OpenSource(x)) -> FreeToModify(x))", "all x.(OpenSourceSoftware(x) -> FreeToMix(x))", "all x.((OpenSourceSoftware(x) & FreeToModify(x)) -> FreeToModify(x))", "all x y.((OpenSourceSoftware(x) & Software(y) & FreeToModify(x,y)) -> FreeToModify(x))", "all x y.((Software(x) & OpenSource(y)) -> FreeToModify(x,y))", "all x y.((OpenSourceSoftware(x) & Software(y) & FreeToModify(x,y)) -> FreeToModify(x,y))", "all x.((OpenSourceSoftware(x) & FreeToModify(x)) -> OpenSourceSoftware(x))", "all x y z.((OpenSourceSoftware(x) & Software(y) & Software(z)) -> FreeToModify(x))", "all x y.((OpenSourceSoftware(x) & Software(y) & FreeToModify(x)) -> FreeToModify(x,y))", "all x.(OpenSourceSoftware(x) -> FreeToModify(x))", "all x y z.((OpenSourceSoftware(x) & Software(y) & Software(z)) -> FreeToModify(x,y))", "all x y.((OpenSourceSoftware(x) & Software(y) & FreeToModify(x,y)) -> OpenSource(x))"]}
{"id": "folio_train_1211", "nl": "Drishti is free to modify.", "fol": "IsFreeToModify(Drishti)", "prediction": ["all x.(Drishti(x) -> FreeToModify(x))", "all x.(Dishti(x) -> FreeToModify(x))", "All x.(Drishti(x) -> FreeToModify(x))", "all x y.((Drishti(x) & Drishti(y)) -> FreeToModify(x,y))", "all x.(Drishti(x) -> FreeToModify(x))", "all x.((Drishti(x) & FreeToModify(x)) -> FreeToModify(x))", "all x y.((Drishti(x) & User(y)) -> FreeToModify(x,y))", "all x.(Drishti(x) -> FreeToModify(x))", "all x.((Drishti(x) & FreeToModify(x)) -> Drishti(x))", "all x.(Drishti(x) -> FreeToMix(x))", "all x.(Dreshti(x) -> FreeToModify(x))", "all x y.((Drishti(x) & Drishti(y)) -> FreeToModify(x))", "exists x.(Drishti(x) & FreeToModify(x))", "all x.(Drishti(x) -> FreeToModify(x))", "(All x.(Drishti(x) -> FreeToModify(x)))", "all x.(Drishti(x) -> FreeToModifie(x))"]}
{"id": "folio_train_1212", "nl": "There are five grades including A+, A, B+, B, and C in English.", "fol": "(GradeInEnglish(Aplus) | GradeInEnglish(a) | GradeInEnglish(Bplus) | GradeInEnglish(b) | GradeInEnglish(c))", "prediction": ["all x.(English(x) -> (A+(x) | A+(x) | B+(x) | B+(x) | C(x))))", "all x.(EnglishGrade(x) -> (A+(x) | A+(x) | B+(x) | B+(x) | C(x))))", "exists x.(Grade(x) & A+(x) & A+(x) & B+(x) & B+(x) & C(x)))", "all x y.((Grade(x) & Grade(y)) -> (A+(x) | A+(x) | B+(x) | B+(x) | C(x))))", "all x y z.((Grade(x) & Grade(y) & Grade(z)) -> (A+(x) | A+(x) | B+(x) | B+(x) | C(x))))", "all x y.((Grade(x) & Grade(y)) -> (A+(x) | A+(x) | B+(x) | B+(x) | C(x)))", "exists x.(Grade(x) & (A+(x) | A+(x) | B+(x) | B+(x) | C(x))))", "all x.(English(x) -> (A+(x) | A+(x) | B+(x) | B+(x) | C+(x))))", "all x.(Englisch(x) -> (A+(x) | A+(x) | B+(x) | B+(x) | C(x))))", "all x y z.((Grade(x) & Grade(y) & Grade(z)) -> (A+(x) | A+(x) | B+(x) | B+(x) | C(x)))", "all x y.((Grade(x) & Grade(y)) -> (A+(x) | A+(x) | B+(x) | B(x) | C(x)))", "exists x.(Grade(x) & (A+(x) | A+(x) | B+(x) | B+(x) | C(x)))", "all x.(English(x) -> (A+(x) | A+(x) | B+(x) | B(x) | C(x))))", "all x y z.((Grade(x) & Grade(y) & Grade(z)) -> (A+(x) | A+(x) | B+(x) | B+(x) | C(y))))", "all x.((Grade(x) & A+(x) | A+(x) | B+(x) | B+(x) | C(x))) -> InEnglish(x))", "all x.((Grade(x) & A+(x) | A+(x) | B+(x) | B+(x) | C(x))) -> EnglishGrade(x))"]}
{"id": "folio_train_1213", "nl": "If a student gets A+ in English, then his score is greater than 95.", "fol": "all x.(StudentGetsGrade(x,Aplus) -> (ScoreGreaterThan95(x) & -ScoreLowerThan90(x)))", "prediction": ["all x.((Student(x) & A+English(x)) -> ScoreGreaterThan95(x))", "all x.((Student(x) & GetsA+InEnglish(x)) -> ScoreGreaterThan95(x))", "all x.((Student(x) & A+InEnglish(x)) -> ScoreGreaterThan95(x))", "all x.((Student(x) & A+English(x)) -> ScoreGreaterThan(x,95))", "all x.((Student(x) & GetsA+InEnglish(x)) -> ScoreGreaterThan(x,95))", "all x.((Student(x) & A+InEnglish(x)) -> ScoreGreaterThan(x,95))", "all x.((Student(x) & GetsA+English(x)) -> ScoreGreaterThan95(x))", "all x.((Student(x) & GetsA+(x) & InEnglish(x)) -> ScoreGreaterThan95(x))", "all x.((Student(x) & A+Englisch(x)) -> ScoreGreaterThan95(x))", "all x.((Student(x) & GetsA+(x,English)) -> ScoreGreaterThan95(x))", "all x.((Student(x) & A+(x) & English(x)) -> ScoreGreaterThan95(x))", "all x.((Student(x) & GetsA+(x) & English(x)) -> ScoreGreaterThan95(x))", "all x.((Student(x) & GetsA+(x) & InEnglish(x)) -> ScoreGreaterThan(x,95))", "all x.((Student(x) & GetsA+English(x)) -> ScoreGreaterThan(x,95))", "all x.((Student(x) & GetsA+(x)) -> ScoreGreaterThan95(x))", "all x.((Student(x) & A+(x) & English(x)) -> ScoreGreaterThan(x,95))"]}
{"id": "folio_train_1214", "nl": "If a student gets A in English, then his score is in the range of 90-95.", "fol": "all x.(StudentGetsGrade(x,a) -> (-ScoreGreaterThan95(x) & -ScoreLowerThan90(x)))", "prediction": ["all x.((Student(x) & GetsAInEnglish(x)) -> ScoreInRangeOf90-95(x))", "all x.((Student(x) & GetsAInEnglish(x)) -> ScoreInRangeOf90To95(x))", "all x.((Student(x) & GetsAInEnglish(x)) -> ScoreInRange(x,90,95))", "all x.((Student(x) & GetsAInEnglish(x)) -> ScoreInRangeOf(x,90,95))", "all x.((Student(x) & GetsAInEnglish(x)) -> ScoreInRangeOf(x,90) & ScoreInRangeOf(x,95))", "all x.((Student(x) & GetsA(x)) -> ScoreInRange(x,90,95))", "all x.((Student(x) & GetsA(x)) -> ScoreInRangeOf(x,90,95))", "all x.((Student(x) & GetsAInEnglish(x)) -> ScoreInRangeOf9095(x))", "all x.((Student(x) & GetsA(x)) -> ScoreInRangeOf90-95(x))", "all x.((Student(x) & GetsA(x)) -> ScoreInRangeOf(x,90) & ScoreInRangeOf(x,95))", "all x.((Student(x) & GetsA(x)) -> ScoreInRangeOf90To95(x))", "all x.((Student(x) & GetsA(x) & English(x)) -> ScoreInRangeOf90To95(x))", "all x.((Student(x) & GetsAInEnglish(x)) -> ScoreInRangeOf90(x) & ScoreInRangeOf95(x))", "all x.((Student(x) & GetsA(x) & English(x)) -> ScoreInRangeOf90-95(x))", "all x.((Student(x) & GetsA(x) & InEnglish(x)) -> ScoreInRangeOf90-95(x))", "all x.((Student(x) & GetsA(x) & InEnglish(x)) -> ScoreInRangeOf90To95(x))"]}
{"id": "folio_train_1215", "nl": "Zhang got an A in English.", "fol": "StudentGetsGrade(Zhang,a)", "prediction": ["Zhang got A in English.", "all x.(Zhang(x) -> (HasA(x,English) & HasA(x,English)))", "all x.(Zhang(x) -> (HasA(x,English) & GotA(x,English)))", "all x.(Zhang(x) -> (HasA(x,English) | HasA(x,English)))", "all x.(Zhang(x) -> (HasA(x) & InEnglisch(x)))", "all x.(Zhang(x) -> (HasAInEnglish(x) & HasAInEnglish(x)))", "all x.(Zhang(x) -> AInEnglisch(x))", "all x.(Zhang(x) -> (HasAInEnglisch(x) & HasAInEnglish(x)))", "All x.(Zhang(x) -> AInEnglisch(x))", "all x.(Zhang(x) -> (A inEnglish(x) | AInEnglish(x)))", "all x.(Zhang(x) -> (HasAInEnglisch(x) | HasAInEnglish(x)))", "all x.(Zhang(x) -> (A inEnglish(x) & AInEnglish(x)))", "all x.(Zhang(x) -> AInEnglish(x))", "all x.(Zhang(x) -> (HasA(x) & InEnglish(x)))", "all x.(Zhang(x) -> (A(x) & English(x)))", "(A(Zhang) & English(Zhang))"]}
{"id": "folio_train_1216", "nl": "Wang's English score is better than Zhang's.", "fol": "ScoreIsBetterThan(Wang,Zhang)", "prediction": ["all x y.((Wang(x) & Zhang(y)) -> BetterEnglishScore(x,y))", "all x y.((Wang(x) & Zhang(y)) -> BetterEnglandScore(x,y))", "all x y z.((Wang(x) & Zhang(y) & EnglishScore(z)) -> Better(x,z))", "all x y z.((Wang(x) & Zhang(y) & EnglishScore(z)) -> BetterThan(x,y,z))", "all x y.((Wang(x) & Zhang(y)) -> EnglishScoreBetter(x,y))", "all x y z.((Wang(x) & Zhang(y) & EnglishScore(z)) -> Better(x,y,z))", "all x y z.((Wang(x) & Zhang(y) & EnglishScore(z)) -> BetterThan(x,z))", "all x y.((Wang(x) & Zhang(y)) -> BetterEnglischScore(x,y))", "all x y.((Wang(x) & Zhang(y) & EnglishScore(x,y)) -> Better(x,y))", "all x y.(((Wang(x) & Zhang(y)) -> BetterEnglishScore(x,y))", "all x.((Wang(x) & Zhang(x)) -> BetterEnglishScore(x,y))", "all x y z.((Wang(x) & Zhang(y) & EnglishScore(z) & Better(x,z)) -> Better(y,z))", "all x y.(((Wang(x) & Zhang(y)) -> BetterEnglandScore(x,y))", "all x.((Wang(x) & Zhang(x)) -> BetterEnglandScore(x,y))", "all x y z.((Wang(x) & Zhang(y) & EnglishScore(z) & Better(x,z)) -> Better(x,y,z))", "all x y z.((Wang(x) & Zhang(y) & EnglishScore(z) & Better(x,z)) -> Better(x,z))"]}
{"id": "folio_train_1217", "nl": "Wu's English score is lower than 90.", "fol": "ScoreLowerThan90(Wu)", "prediction": ["all x.((Wu(x) & EnglishScore(x,90)) -> LowerThan(x,90))", "(EnglishScore(Wu) & LowerThan(Wu,90))", "all x y.((Wu(x) & EnglishScore(y)) -> LowerThan(x,y))", "(EnglishScore(Wu) & LowerThan90(Wu))", "all x.((Wu(x) & EnglishScore(x,90)) -> LowerScore(x,90))", "All x.((Wu(x) & EnglishScore(x,90)) -> LowerThan(x,90))", "all x.(Wu(x) -> EnglishScoreLowerThan90(x))", "all x y.((Wu(x) & EnglishScore(y)) -> LowerThan90(x,y))", "all x.(Wu(x) -> EnglishScoreLowerThan(x,90))", "all x.(Wu(x) -> EnglishScoreLessThan90(x))", "all x.((Wu(x) & EnglishScore(x,90)) -> Lower(x,90))", "all x.((Wu(x) & EnglishScore(x,9)) -> LowerThan90(x))", "All x.(Wu(x) -> EnglishScoreLowerThan90(x))", "all x.(Wu(x) -> EnglishScoreLessThan(x,90))", "all x.((Wu(x) & EnglishScore(x,9)) -> LowerThan(x,90))", "All x.((Wu(x) & EnglishScore(x,90)) -> LowerScore(x,90))"]}
{"id": "folio_train_1218", "nl": "Zhang's English score is lower than 95.", "fol": "-ScoreGreaterThan95(Zhang)", "prediction": ["(EnglishScore(Zhang) & LowerThan(Zhang,95))", "all x.(Zhang(x) -> EnglishScoreLowerThan(x,95))", "(EnglishScore(Zhang,95))", "(EnglishScore(Zhang,95) & LowerThan(Zhang,95))", "(EnglishScore(z) & LowerThan(z,95))", "all x.(Zhang(x) -> EnglishScoreLessThan(x,95))", "(LowerThan(Zhang,95) -> EnglishScore(Zhang,95))", "(EnglishScoreLowerThan(Zhang,95))", "all x.(Zhang(x) -> EnglishScoreLowerThan95(x))", "Zhang's EnglishScoreLowerThan(Zhang,95)", "(LowerThan(Zhang,95) -> EnglishScore(Zhang))", "(EnglishScore(Zhang,95) -> LowerThan(Zhang,95))", "all x.(Zhang(x) -> EnglishScore(x,95))", "all x.(Zhang(x) -> EnglishScoreLessThan95(x))", "(EnglishScore(Zhang) & LowerThan95(Zhang))", "(LowerThan(Zhang,95) -> EnglishScore(Zhang,98))"]}
{"id": "folio_train_1219", "nl": "Wang got an A+ in English.", "fol": "StudentGetsGrade(Wang,Aplus)", "prediction": ["all x.((Wang(x) & English(x)) -> A+(x))", "all x.((Wang(x) & English(y)) -> A+(x,y))", "Wang got A+ in English.", "All x.((Wang(x) & English(x)) -> A+(x))", "All x.((Wang(x) & English(y)) -> A+(x,y))", "all x.((Wang(x) & A+(x)) -> English(x))", "(A+(Wang) & English(Wang))", "all x.((Wang(x) & English(y)) -> GotA+(x,y))", "all x.((Wang(x) & A+InEnglish(x)) -> Got(x,y))", "all x.((Wang(x) & English(x)) -> GotA+(x))", "all x.((Wang(x) & English(y)) -> A+(x))", "all x.((Wang(x) & A+English(x)) -> Got(x,y))", "all x.(Wang(x) -> A+InEnglish(x))", "all x.(Wang(x) -> A+English(x))", "All x.(Wang(x) -> A+InEnglish(x))", "all x.((Wang(x) & English(x)) -> A+(x,y))"]}
{"id": "folio_train_1220", "nl": "Wu does not get an A or A+ in English.", "fol": "(-StudentGetsGrade(Wu,a) & -StudentGetsGrade(Wu,Aplus))", "prediction": ["all x.((Wu(x) & -(A+(x) | A+(x))) -> -(A+(x) | A+(x))))", "all x.((Wu(x) & -(A(x) | A+(x))) -> -(A(x) | A+(x))))", "all x.(Wu(x) -> (-GetsA(x) | GetsA+(x)))", "all x.((Wu(x) & -(A(x) | A+(x))) -> -(A+(x) | A+(x))))", "all x.((Wu(x) & -(A+(x) | A+(x)))) -> -(A+(x) | A+(x)))", "all x.(Wu(x) -> (-HasA(x) | HasA+(x)))", "all x.((Wu(x) & -(A+(x) | A+(x))))", "all x.((Wu(x) & -(A+(x) | A+(x)))) -> -(A+(x) | A+(x))))", "all x.(Wu(x) -> (-A(x) | A+(x))))", "all x.(Wu(x) -> -(GetsA(x) | GetsA+(x)))", "all x.(Wu(x) -> (-(GetsA(x) | GetsA+(x))))", "all x.((Wu(x) & -(A+(x) | A+(x))) -> -(A+(x) | A+(x)))", "all x.((Wu(x) & -(A(x) | A+(x))))", "all x.(Wu(x) -> -(GetsA(x) | GetsA+(x))))", "all x.(Wu(x) -> (-GivesA(x) | GetsA+(x)))", "all x.(Wu(x) -> -(A+(x) | A+(x))))"]}
{"id": "folio_train_1221", "nl": "Olivia doesn't prefer warm temperature during the day.", "fol": "all x.(IsDay(x) -> -PrefersWarmTemperatureAt(Olivia,x))", "prediction": ["all x.(Olivia(x) -> -PrefersWarmTemperature(x))", "all x.((Olivia(x) & -PrefersWarmTemperature(x)) -> -PrefersWarmTemperature(x))", "all x.((Olivia(x) & -PrefersWarmTemperature(x)) -> -PrefersWarmTemperature(x))", "all x.((Olivia(x) & -PrefersWarmTemperature(x)) -> -PrefersWarmTemperature(x))", "(PrefersWarmTemperature(Olivia) & -PrefersWarmTemperature(Olivia))", "all x.(Olivia(x) -> -PrefersWarmTemperature(x))", "all x.(Olivia(x) -> -PrefersWarmTemperatureDuringDay(x))", "Olivia doesn't prefersWarmTemperatureDuringDay(Olivia)", "all x.((Olivia(x) & -PrefersWarmTemperature(x)) -> -PrefersWarmTemperatureDuringDay(x))", "all x.(Olivia(x) -> -(PrefersWarmTemperature(x) & Day(x)))", "all x.((Olivia(x) & -PrefersWarmTemperatureDuringDay(x)) -> -PrefersWarmTemperatureDuringDay(x))", "all x.((Olivia(x) & -PrefersWarmTemperature(x,Day)) -> -PrefersWarmTemperature(x,Day))", "-(PrefersWarmTemperature(Olivia) & Day(Olivia))", "all x.((Olivia(x) & -PrefersWarmTemperature(x)) -> -PrefersWarmTemperatureDuringDay(x))", "all x.((Olivia(x) & -PrefersWarmTemperatureDuringDay(x)) -> -PrefersWarmTemperature(x))", "all x.((Olivia(x) & -PrefersWarmTemperature(x)) -> -PrefersWarmTemperature(x))"]}
{"id": "folio_train_1222", "nl": "When Olivia sleeps, she prefers cool temperature.", "fol": "all x.(IsSleepingDuring(Olivia,x) -> PrefersCoolTemperatureAt(Olivia,x))", "prediction": ["all x.((Olivia(x) & Sleeps(x)) -> PrefersCoolTemperature(x))", "all x.((Oliver(x) & Sleeps(x)) -> PrefersCoolTemperature(x))", "all x.((Olivia(x) & Sleeps(x)) -> PrefersColdTemperature(x))", "all x.((Oliver(x) & Sleeps(x)) -> PrefersColdTemperature(x))", "all x.((Sleeps(x) & Olivia(x)) -> PrefersCoolTemperature(x))", "all x.(Sleeps(x) -> PrefersCoolTemperature(x))", "all x.((Olivia(x) & Sleeps(x)) -> PrefersCoolTemperature(x))", "all x.((Olivia(x) & Sleeps(x)) -> (PrefersCoolTemperature(x)))", "all x.((Oliver(x) & Sleeps(x)) -> PrefersCoolTemperature(x))", "all x y.((Sleeps(x) & Olivia(y)) -> PrefersCoolTemperature(y))", "all x.((Oscar(x) & Sleeps(x)) -> PrefersCoolTemperature(x))", "all x.(SleepsOlivia(x) -> PrefersCoolTemperature(x))", "all x y.((Olivia(x) & Sleeps(x)) -> PrefersCoolTemperature(x,y))", "all x y.((Sleeps(x) & Olivia(y)) -> PrefersCoolTemperature(y,x))", "all x y.((Olivia(x) & Sleeps(x)) -> PrefersCoolTemperature(x))", "all x y.((Olivia(x) & Sleeps(x)) -> PrefersCoolTemperature(y))"]}
{"id": "folio_train_1223", "nl": "Olivia sleeps during the night.", "fol": "all x.(IsSleepingDuring(Olivia,x) -> IsNight(x))", "prediction": ["all x.(Olivia(x) -> SleepsDuringNight(x))", "all x y.((Olivia(x) & Night(y)) -> SleepsDuring(x,y))", "all x y.((Olivia(x) & Night(y)) -> Sleeps(x,y))", "all x.(Oliver(x) -> SleepsDuringNight(x))", "all x.((Olivia(x) & SleepsDuringNight(x)) -> SleepsDuringNight(x))", "all x y z.((Olivia(x) & Night(y) & Night(z)) -> SleepsDuring(x,y,z))", "all x y z.((Olivia(x) & Night(y) & Night(z)) -> Sleeps(x,y,z))", "all x.((Oliver(x) & SleepsDuringNight(x)) -> SleepsDuringNight(x))", "all x y.((Oliver(x) & Night(y)) -> SleepsDuring(x,y))", "all x y.((Oliver(x) & Night(y)) -> Sleeps(x,y))", "all x.(Olivia(x) -> SleepsAtNight(x))", "all x.(Oscar(x) -> SleepsDuringNight(x))", "all x.(Olympus(x) -> SleepsDuringNight(x))", "all x y z.((Olivia(x) & Night(y) & Night(z)) -> Sleeps(x,y))", "all x.(Oliver(x) -> SleepsAtNight(x))", "(SleepsDuringNight(Olivia) -> SleepsDuringNight(Olivia))"]}
{"id": "folio_train_1224", "nl": "Olivia works during the day.", "fol": "all x.(IsWorkingDuring(Olivia,x) -> IsDay(x))", "prediction": ["all x.(Olivia(x) -> WorksDuringDay(x))", "all x y.((Olivia(x) & Day(y)) -> WorksDuring(x,y))", "all x y.((Olivia(x) & Day(y)) -> Works(x,y))", "all x.(Oliver(x) -> WorksDuringDay(x))", "all x.(Oscar(x) -> WorksDuringDay(x))", "Olivia works during the day.", "all x y.((Olivia(x) & Day(y)) -> WorksAt(x,y))", "(WorksDuringDay(Olivia) -> WorksDuringDay(Olivia))", "all x y.((Olivia(x) & Day(y)) -> WorksWith(x,y))", "all x y.((Olivia(x) & Day(y)) -> WorksIn(x,y))", "Olivia worksDuringDay(Olivia)", "(WorksDuringDay(Olivia) -> WorksDuringDay(Olivia))", "all x y.((Olivia(x) & Day(y)) -> Work(x,y))", "(Works(Olivia) & Day(Olivia))", "all x y.((Olivia(x) & Day(y)) -> WorkedDuring(x,y))", "(WorksDuringDay(Olivia))"]}
{"id": "folio_train_1225", "nl": "Olivia either works or sleeps.", "fol": "all x.(IsWorkingDuring(Olivia,x) | IsSleepingDuring(Olivia,x))", "prediction": ["all x.(Olivia(x) -> (Works(x) | Sleeps(x)))", "(Works(Olivia) | Sleeps(Olivia))", "all x.(Oliver(x) -> (Works(x) | Sleeps(x)))", "exists x.(Olivia(x) & (Works(x) | Sleeps(x)))", "all x.(Oscar(x) -> (Works(x) | Sleeps(x)))", "exists x.(Oliver(x) & (Works(x) | Sleeps(x)))", "all x.(Oliva(x) -> (Works(x) | Sleeps(x)))", "Olivia exists x.(Works(x) | Sleeps(x))", "Olivia (Works(Olivia) | Sleeps(Olivia))", "all x.(Olympus(x) -> (Works(x) | Sleeps(x)))", "exists x.(Oscar(x) & (Works(x) | Sleeps(x)))", "Olivia(Olivia) (Works(Olivia) | Sleeps(Olivia)))", "(Works(Oliver) | Sleeps(Oliver))", "(Works(Olivia) | Sleeps(Olivia)))", "exists x.(Olivia(x) & (Works(x) | Sleeps(x))))", "Olivia (Works(Olivia) | Sleeps(Olivia)))"]}
{"id": "folio_train_1226", "nl": "The time is either the day or the night.", "fol": "all x.(IsDay(x) | IsNight(x))", "prediction": ["all x.(Time(x) -> (Day(x) | Night(x)))", "exists x.(Time(x) & (Day(x) | Night(x)))", "all x.(Time(x) -> (Daily(x) | Night(x)))", "all x.(Time(x) -> (Date(x) | Night(x)))", "all x y.((Time(x) & Day(y)) | Night(y)) -> Time(x,y))", "all x.(Time(x) -> (Day(x) | Night(x)))", "all x y.((Time(x) & (Day(y) | Night(y))) -> Time(x,y))", "all x.((Time(x) & (Day(x) | Night(x))) -> Time(x))", "all x y.((Time(x) & Day(y)) | Night(y))", "all x.(Time(x) -> ((Day(x) | Night(x))))", "all x y.((Time(x) & Day(y)) | Night(y)) -> (Day(x) | Night(x)))", "all x.(Timing(x) -> (Day(x) | Night(x)))", "All x.(Time(x) -> (Day(x) | Night(x)))", "all x y.((Time(x) & Day(y)) | Night(y)) -> (Day(x,y) | Night(x,y)))", "all x.(Time(x) -> (Saturday(x) | Night(x)))", "all x.(Time(x) -> (Dead(x) | Night(x)))"]}
{"id": "folio_train_1227", "nl": "Olivia either prefers warm temperature or prefers cool temperature.", "fol": "all x.(PrefersWarmTemperatureAt(Olivia,x) | PrefersCoolTemperatureAt(Olivia,x))", "prediction": ["all x.(Olivia(x) -> (PrefersWarmTemperature(x) | PrefersCoolTemperature(x)))", "(PrefersWarmTemperature(Olivia) | PrefersCoolTemperature(Olivia))", "all x.(Olivia(x) -> (PrefersWarmTemperature(x) | PrefersColdTemperature(x)))", "(PrefersWarmTemperature(Olivia) | PrefersColdTemperature(Olivia))", "all x.(Oliver(x) -> (PrefersWarmTemperature(x) | PrefersCoolTemperature(x)))", "all x.(Olivia(x) -> (PrefersWarmTemperature(x) | PrefersCoolTemperature(x)))", "all x.(Oliver(x) -> (PrefersWarmTemperature(x) | PrefersColdTemperature(x)))", "all x.(Olivia(x) -> (PrefersWarmTemperature(x) | PrefersColdTemperature(x)))", "exists x.(Olivia(x) & (PrefersWarmTemperature(x) | PrefersCoolTemperature(x)))", "all x y.((Olivia(x) & WarmTemperature(y)) | CoolTemperature(y))", "exists x.(Olivia(x) & (PrefersWarmTemperature(x) | PrefersColdTemperature(x)))", "all x.(Oscar(x) -> (PrefersWarmTemperature(x) | PrefersCoolTemperature(x)))", "all x.(Olivia(x) -> (PrefersWarmTemperature(x) | PrefersCoolTemperature(x)))", "(PrefersWarmTemperature(Olivia) | PrefersCoolTemperature(Olivia))", "(PrefersWarmTemperature(Oliver) | PrefersCoolTemperature(Oliver))", "(PrefersWarmTemperature(Olivia) | PrefersCoolTemperature(Olivia)))"]}
{"id": "folio_train_1228", "nl": "At all times, Olivia prefers cool temperature.", "fol": "all x.(Time(x) -> PrefersCoolTemperatureAt(Olivia,x))", "prediction": ["all x.((Olivia(x) & CoolTemperature(x)) -> Prefers(x,y))", "all x.((Olivia(x) & CoolTemperature(x)) -> Prefers(x))", "all x.(Olivia(x) -> PrefersCoolTemperature(x))", "all x.((Olivia(x) & CoolTemperature(x)) -> Prefers(x,y))", "all x.((Oliver(x) & CoolTemperature(x)) -> Prefers(x,y))", "all x y.((Olivia(x) & CoolTemperature(y)) -> Prefers(x,y))", "all x.((Olivia(x) & CoolTemperature(y)) -> Prefers(x,y))", "All x.((Olivia(x) & CoolTemperature(x)) -> Prefers(x,y))", "all x.((Olivia(x) & CoolTemperature(x)) -> Prefers(x,Olivia))", "all x.((Oliver(x) & CoolTemperature(x)) -> Prefers(x))", "all x.((Olivia(x) & CoolTemperature(x)) -> Prefers(x))", "All x.(Olivia(x) -> PrefersCoolTemperature(x))", "all x.((Olivia(x) & CoolTemperature(x)) -> Prefers(x,x))", "all x.((Oscar(x) & CoolTemperature(x)) -> Prefers(x,y))", "all x.(Olivia(x) -> PrefersColdTemperature(x))", "All x.((Olivia(x) & CoolTemperature(x)) -> Prefers(x))"]}
{"id": "folio_train_1229", "nl": "Taylor Swift gives a commencement speech in New York University in 2022.", "fol": "GivesCommencementSpeech(TaylorSwift,Nyc)", "prediction": ["all x y.((TaylorSwift(x) & NewYorkUniversity(y)) -> GivesCommitmentSpeech(x,y))", "all x y z.((TaylorSwift(x) & NewYorkUniversity(y) & 2022(z)) -> GivesCommitmentSpeech(x,y,z))", "all x y.((TaylorSwift(x) & NewYorkUniversity(y)) -> GivesCommitmentSpeechIn(x,y))", "all x y.((TaylorSwift(x) & NewYorkUniversity(y) & 2022(z)) -> GivesCommitmentSpeech(x,y,z))", "all x y z.((TaylorSwift(x) & NewYorkUniversity(y) & CommencementSpeech(z)) -> GivesIn(x,y,z))", "all x y.((TaylorSwift(x) & NewYorkUniversity(y) & 2022(x)) -> GivesCommitmentSpeech(x,y))", "all x.((TaylorSwift(x) & NewYorkUniversity(y)) -> GivesCommitmentSpeech(x,y))", "all x y.((TaylorSwift(x) & NewYorkUniversity(y) & 2022(y)) -> GivesCommitmentSpeech(x,y))", "all x y z.((TaylorSwift(x) & NewYorkUniversity(y) & CommencementSpeech(z) & 2022(z)) -> GivesIn(x,y,z))", "all x y z.((TaylorSwift(x) & NewYorkUniversity(y) & 2022(z)) -> GivesCommitmentSpeechIn(x,y,z))", "all x y z.((TaylorSwift(x) & NewYorkUniversity(y) & CommencementSpeech(z) & 2022(z)) -> Gives(x,y,z))", "all x y z.((TaylorSwift(x) & CommencementSpeech(y) & NewYorkUniversity(z)) -> GivesIn(x,y,z))", "all x y z.((TaylorSwift(x) & NewYorkUniversity(y) & CommencementSpeech(z)) -> Gives(x,y,z))", "all x y.((TaylorSwift(x) & NewYorkUniversity(y) & 2022(x)) -> CommencementSpeech(x,y))", "all x y.((TaylorSwift(x) & NewYorkUniversity(y)) -> GivesCommitmentSpeechIn2022(x,y))", "all x y z.((TaylorSwift(x) & NewYorkUniversity(y) & CommencementSpeech(z)) -> GivesIn2022(x,y,z))"]}
{"id": "folio_train_1230", "nl": "Both Columbia University and New York University are located in Manhattan.", "fol": "(LocatedInManhattan(ColumbiaUniversity) & LocatedInManhattan(Nyc))", "prediction": ["all x y.((ColumbiaUniversity(x) & NewYorkUniversity(y)) -> LocatedIn(x,y))", "all x y.((ColumbiaUniversity(x) & NewYorkUniversity(y)) -> (LocatedIn(x,y) & LocatedIn(x,y)))", "all x.((ColumbiaUniversity(x) & NewYorkUniversity(x)) -> LocatedIn(x,Manhattan))", "all x y.((ColumbiaUniversity(x) & NewYorkUniversity(y)) -> (LocatedIn(x,y) & LocatedIn(x,y)))", "all x y.((ColumbiaUniversity(x) & NewYorkUniversity(y)) -> (LocatedIn(x,y) | LocatedIn(x,y)))", "all x.((ColumbiaUniversity(x) & NewYorkUniversity(x)) -> LocatedInMetropolitan(x))", "(exists x.(University(x) & Columbia(x)) & exists y.(University(y) & NewYork(y) & LocatedIn(x,y))))", "all x y.((ColumbiaUniversity(x) & NewYorkUniversity(y)) -> (LocatedIn(x,y) | LocatedIn(x,y)))", "all x.((ColumbiaUniversity(x) & NewYorkUniversity(x)) -> LocatedIn(x,Metropolitan))", "all x.((ColumbiaUniversity(x) & NewYorkUniversity(x)) -> LocatedInManhattan(x))", "all x y z.((ColumbiaUniversity(x) & NewYorkUniversity(y) & Manhattan(z)) -> (LocatedIn(x,y,z) | LocatedIn(x,y)))", "all x.((ColumbiaUniversity(x) & NewYorkUniversity(x)) -> LocatedIn(x,Midtown))", "all x.((ColumbiaUniversity(x) | NewYorkUniversity(x)) -> LocatedIn(x,Manhattan))", "all x.((ColumbiaUniversity(x) | NewYorkUniversity(x)) -> LocatedInMetropolitan(x))", "all x y z.((ColumbiaUniversity(x) & NewYorkUniversity(y) & Manhattan(z)) -> (LocatedIn(x,y) & LocatedIn(x,z)))", "all x y z.((ColumbiaUniversity(x) & NewYorkUniversity(y) & Manhattan(z)) -> (LocatedIn(x,y) | LocatedIn(x,z))))"]}
{"id": "folio_train_1231", "nl": "Taylor Swift has received three Grammy Album of the Year Awards.", "fol": "ReceivedThreeGrammyAwards(TaylorSwift)", "prediction": ["all x.(TaylorSwift(x) -> ReceivedThreeGrammyAlbumOfTheYearAwards(x))", "All x.(TaylorSwift(x) -> ReceivedThreeGrammyAlbumOfTheYearAwards(x))", "all x.(TaylorSwift(x) -> ReceivedThreeGrammyAlbumOfYearAwards(x))", "all x y.((TaylorSwift(x) & GrammyAlbumOfTheYear(y)) -> Received(x,y))", "all x.((TaylorSwift(x) & ReceivedThreeGrammyAlbumOfTheYearAwards(x)) -> TaylorSwift(x))", "All x.(TaylorSwift(x) -> ReceivedThreeGrammyAlbumOfYearAwards(x))", "all x y.((TaylorSwift(x) & GrammyAlbumOfYear(y)) -> Received(x,y))", "all x.((TaylorSwift(x) & GrammyAlbumOfTheYear(x)) -> Received(x,3))", "All x y.((TaylorSwift(x) & GrammyAlbumOfTheYear(y)) -> Received(x,y))", "all x.(TaylorSwift(x) -> (ReceivedThreeGrammyAlbumOfTheYearAwards(x)))", "all x.((TaylorSwift(x) & GrammyAlbumOfYear(x)) -> Received(x,3))", "all x.(TaylorSwift(x) -> (ReceivedThreeGrammyAlbumOfYearAwards(x)))", "all x.(TaylorSwift(x) -> ReceivedThreeGrammyAlbumOfYears(x))", "all x y.((TaylorSwift(x) & GrammyAlbumOfTheYear(y)) -> ReceivedThreeAwards(x,y))", "all x.((TaylorSwift(x) & GrammyAlbumOfTheYear(x)) -> Received(x,y))", "all x.((TaylorSwift(x) & GrammyAlbumOfTheYear(x)) -> ReceivedThreeAwards(x))"]}
{"id": "folio_train_1232", "nl": "Columbia University is one of the Ivy League schools.", "fol": "IsIvyLeagueSchool(ColumbiaUniversity)", "prediction": ["all x.(ColumbiaUniversity(x) -> IvyLionSchool(x))", "all x.(ColumbiaUniversity(x) -> IvyLowerSchool(x))", "all x.(ColumbiaUniversity(x) -> IvyLeagueSchool(x))", "all x.(ColumbiaUniversity(x) -> IvyLittleSchool(x))", "all x y.((ColumbiaUniversity(x) & IvyLowerSchool(y)) -> IvyLowerSchool(x,y))", "all x y.((ColumbiaUniversity(x) & IvyLionSchool(y)) -> IvyLionSchool(x,y))", "all x y.((ColumbiaUniversity(x) & IvyLionSchool(y)) -> School(x,y))", "all x.(ColumbusUniversity(x) -> IvyLionSchool(x))", "all x.(ColumbusUniversity(x) -> IvyLowerSchool(x))", "all x.((ColumbiaUniversity(x) & IvyLionSchool(x)) -> IvyLionSchool(x))", "all x.(ColumbiaUniversity(x) -> IvyLilacSchool(x))", "all x y.((ColumbiaUniversity(x) & IvyLowerSchool(y)) -> IvyLowerSchool(x))", "all x y.((ColumbiaUniversity(x) & IvyLeagueSchool(y)) -> IvyLeague(x))", "all x y.((ColumbiaUniversity(x) & IvyLionSchool(y)) -> IvyLionSchool(x))", "all x.(ColumbusUniversity(x) -> IvyLeagueSchool(x))", "all x y.((ColumbiaUniversity(x) & IvyLeagueSchool(y)) -> IvyLeague(x,y))"]}
{"id": "folio_train_1233", "nl": "Taylor Swift delivers a commencement speech in Manhattan.", "fol": "exists x.(GivesCommencementSpeech(TaylorSwift,x) & LocatedInManhattan(x))", "prediction": ["all x y z.((TaylorSwift(x) & CommencementSpeech(y) & Manhattan(z)) -> DeliversIn(x,y,z))", "all x y.((TaylorSwift(x) & Manhattan(y)) -> DeliversCommitmentSpeech(x,y))", "all x y z.((TaylorSwift(x) & CommencementSpeech(y) & Manhattan(z)) -> Delivers(x,y,z))", "all x y.((TaylorSwift(x) & CommencementSpeech(y)) -> Delivers(x,y))", "all x y z.((TaylorSwift(x) & CommencementSpeech(y) & Manhattan(z)) -> Delivers(x,y))", "all x y.((TaylorSwift(x) & CommencementSpeech(y)) -> DeliversIn(x,y))", "all x y.((TaylorSwift(x) & CommencementSpeech(y)) -> DeliversInMetropolitan(x,y))", "all x y z.((TaylorSwift(x) & Commencement(y) & Manhattan(z)) -> DeliversIn(x,y,z))", "all x y z.((TaylorSwift(x) & Commencement(y) & Manhattan(z)) -> Delivers(x,y,z))", "all x y.((TaylorSwift(x) & CommencementSpeech(y)) -> DeliversInMetropolis(x,y))", "all x y.((TaylorSwift(x) & CommencementSpeech(y) & Manhattan(z)) -> DeliversIn(x,y,z))", "all x.(TaylorSwift(x) -> DeliversCommitmentSpeech(x))", "all x y.((TaylorSwift(x) & CommencementSpeech(y) & Manhattan(z)) -> Delivers(x,y,z))", "all x y z.((TaylorSwift(x) & CommencementSpeech(y) & Manhattan(z)) -> DeliveredIn(x,y,z))", "all x y.((TaylorSwift(x) & CommencementSpeech(y)) -> DeliversInMidtown(x,y))", "all x y.((TaylorSwift(x) & CommencementSpeech(y)) -> DeliversInNew York(x,y))"]}
{"id": "folio_train_1234", "nl": "The commencement speaker of NYU does not have any album.", "fol": "all x.(CommencementSpeaker(x) & -ReceivedThreeGrammyAwards(x))", "prediction": ["all x.((CommitmentSpeaker(x) & NYU(x)) -> -HasAlbum(x))", "all x.((StartupSpeaker(x) & NYU(x)) -> -HasAlbum(x))", "all x.((Speaker(x) & Commencement(x) & NYU(x)) -> -HasAlbum(x))", "all x.((Speaker(x) & Commencement(x)) -> -HasAlbum(x))", "all x.((Speaker(x) & Commencement(x) & NYU)) -> -HasAlbum(x))", "all x.((Speaker(x) & Commencement(x) & NYU) & -HasAlbum(x)) -> -HasAlbum(x))", "all x.((EntranceSpeaker(x) & NYU(x)) -> -HasAlbum(x))", "all x.((EntertainmentSpeaker(x) & NYU(x)) -> -HasAlbum(x))", "all x.((PrimarySpeaker(x) & NYU(x)) -> -HasAlbum(x))", "all x.((ConcertmentSpeaker(x) & NYU(x)) -> -HasAlbum(x))", "all x.((Speaker(x) & CommencementOfNYU(x)) -> -HasAlbum(x))", "all x.((EncedementSpeaker(x) & NYU(x)) -> -HasAlbum(x))", "all x.((EncepmentSpeaker(x) & NYU(x)) -> -HasAlbum(x))", "all x.((CapstoneSpeaker(x) & NYU(x)) -> -HasAlbum(x))", "all x.((Speaker(x) & Commencement(x,NYU)) -> -HasAlbum(x))", "all x.((CommitmentSpeaker(x) & NYU)) -> -HasAlbum(x))"]}
{"id": "folio_train_1235", "nl": "Customers either choose Plan A or Plan B.", "fol": "all x.(ChoosesPlanA(x) | ChoosesPlanB(x))", "prediction": ["all x.(Customer(x) -> (ChoosesPlanA(x) | ChoosesPlanB(x)))", "all x.(Customer(x) -> (ChoosesPlan(x,A) | ChoosesPlan(x,B)))", "all x y.((Customer(x) & Plan(y)) -> (ChoosesPlanA(x,y) | ChoosesPlanB(x,y)))", "all x y.((Customer(x) & Customer(y)) -> (ChoosesPlanA(x,y) | ChoosesPlanB(x,y)))", "all x y.((Customer(x) & Plan(y)) -> (Chooses(x,y) | Chooses(x,y)))", "all x.(Customer(x) -> ((ChoosesPlanA(x) | ChoosesPlanB(x))))", "all x.(Customer(x) -> (ChoosesPlanA(x) | ChosesPlanB(x)))", "all x y.((Customer(x) & Plan(y)) -> (ChoosesPlan(x,y) | ChoosesPlan(x,y)))", "all x y.((Customer(x) & Plan(y)) -> (Chooses(x,y) | Choses(x,y)))", "all x.(Customer(x) -> (CHOOSEPlanA(x) | ChoosePlanB(x)))", "all x.(Customer(x) -> (ChosePlanA(x) | ChoosePlanB(x)))", "all x y z.((Customer(x) & Plan(y) & Plan(z)) -> (Chooses(x,y) | Chooses(x,z)))", "all x.(Customer(x) -> (ChosesPlanA(x) | ChoosesPlanB(x)))", "all x y.((Customer(x) & Plan(y)) -> (ChoosesPlanA(x,y) | ChosesPlanB(x,y)))", "all x y z.((Customer(x) & Plan(y) & Plan(z)) -> (Chooses(x,y) | Chooses(x,z))))", "all x y.((Customer(x) & PlanA(y)) | PlanB(y)) -> (Chooses(x,y) | Chooses(x,y)))"]}
{"id": "folio_train_1236", "nl": "All who choose Plan B are rewarded with a $30 gift card. ", "fol": "all x.(ChoosesPlanB(x) -> RewardedWithGiftCard(x))", "prediction": ["all x.((PlanB(x) & ChoosePlanB(x)) -> RecognizedWithGiftCard(x,30))", "all x.((PlanB(x) & ChoosePlanB(x)) -> RewardedWithGiftCard(x,30))", "all x.((PlanB(x) & ChoosePlanB(x)) -> RecognizedWith30GiftCard(x))", "all x.((PlanB(x) & ChoosesPlanB(x)) -> RecognizedWithGiftCard(x,30))", "all x.((PlanB(x) & ChoosesPlanB(x)) -> RewardedWithGiftCard(x,30))", "all x.((PlanB(x) & ChoosesPlanB(x)) -> RecognizedWith30GiftCard(x))", "all x.((PlanB(x) & ChoosePlanB(x)) -> RewardedWithGiftCard(x,30))", "all x.((PlanB(x) & ChoosePlanB(x)) -> RewardedWith30GiftCard(x))", "all x.((PlanB(x) & ChoosePlanB(x)) -> RecognizedWithDiscountCard(x,30))", "all x.((PlanB(x) & ChoosePlanB(x)) -> RewardsWithGiftCard(x,30))", "all x.((PlanB(x) & ChoosesPlanB(x)) -> RewardedWith30GiftCard(x))", "all x.((PlanB(x) & ChoosePlanB(x)) -> ReceivedWithGiftCard(x,30))", "all x.((PlanB(x) & ChoosesPlanB(x)) -> RecognizedWithDiscountCard(x,30))", "all x.((PlanB(x) & ChoosePlanB(x)) -> RewardedWithDiscountCard(x,30))", "all x.((PlanB(x) & ChoosePlanB(x)) -> RecognizedWith(x,30))", "all x.((PlanB(x) & ChoosePlanB(x)) -> RecognizedWithGiftCard(x,$30))"]}
{"id": "folio_train_1237", "nl": "There are no customers who do not choose any plans. ", "fol": "all x.-DoesNotChooseAnyPlan(x)", "prediction": ["-exists x.(Customer(x) & -ChoosesPlan(x))", "-exists x.(Customer(x) & -ChosesPlan(x))", "-exists x.(Customer(x) & -SelectsPlan(x))", "all x.((Customer(x) & -ChoosesPlan(x)) -> -ChoosesPlan(x))", "exists x.(Customer(x) & -ChoosesPlan(x))", "(-exists x.(Customer(x) & -ChoosesPlan(x)))", "-exists x.(Customer(x) & -ChoosesPlans(x))", "-exists x.(Customer(x) & -CHOOSEsPlan(x))", "-exists x.(Customer(x) & -(ChoosesPlan(x) | -ChoosesPlan(x))))", "-exists x.(Customer(x) & -(ChoosesPlan(x))))", "-exists x.(Customer(x) & -SpecifiesPlan(x))", "-exists x.(Customer(x) & -ChangesPlan(x))", "-exists x.(Customer(x) & ChoosesNoPlan(x))", "-exists x.(Customer(x) & -ElectsPlan(x))", "all x.((Customer(x) & -ChoosesPlan(x)) -> -CustomerChoosesPlan(x))", "-exists x.(Customer(x) & -(ChoosesPlan(x) | ChoosesPlan(x))))"]}
{"id": "folio_train_1238", "nl": "No customers rewarded a $30 gift card are older than 80.", "fol": "all x.(RewardedWithGiftCard(x) -> -IsOlderThan80(x))", "prediction": ["-exists x.(Customer(x) & Recognized(x,30) & GiftCard(x) & OlderThan(x,80))", "-exists x.(Customer(x) & Recognized(x,30) & GiftCard(x))", "-exists x.(Customer(x) & Rewarded(x,30) & GiftCard(x) & OlderThan(x,80))", "-exists x.(Customer(x) & Rewarded(x,30) & GiftCard(x))", "-exists x.(Customer(x) & Rewards(x,30) & GiftCard(x) & OlderThan(x,80))", "-exists x.(Customer(x) & Rewards(x,30) & GiftCard(x))", "-exists x.(Customer(x) & Rewards(x,30) & GiftCard(x,80))", "-exists x.(Customer(x) & Recognized(x,30) & GiftCard(x) & OlderThan80(x))", "all x.((Customer(x) & Recognized(x,30)) -> OlderThan80(x))", "all x.((Customer(x) & Recognized(x,30) & GiftCard(x)) -> OlderThan80(x))", "all x.((Customer(x) & Recognized(x,30)) -> OlderThan(x,80))", "-exists x.(Customer(x) & Recognizes(x,30) & GiftCard(x) & OlderThan(x,80))", "-exists x.(Customer(x) & Rewarded(x,30) & GiftCard(x) & OlderThan80(x))", "all x.((Customer(x) & Rewarded(x,30)) -> OlderThan80(x))", "all x.((Customer(x) & Rewarded(x,30)) -> OlderThan(x,80))", "-exists x.(Customer(x) & Recognized(x,30) & GiftCard(x,80))"]}
{"id": "folio_train_1239", "nl": "Customers are either older than 80 or are currently studying at school. ", "fol": "all x.(IsOlderThan80(x) | IsStudyingAtSchool(x))", "prediction": ["all x.(Customer(x) -> (OlderThan80(x) | StudyingAtSchool(x)))", "all x.(Customer(x) -> (OlderThan(x,80) | StudyingAtSchool(x)))", "all x.(Customer(x) -> (OlderThan(x,80) | StudyingAtSchool(x,80)))", "all x.(Customer(x) -> (OlderThan80(x) | StudyingAtSchool(x)))", "all x.(Customer(x) -> (OlderThan(x,80) | StudyingAtSchool(x)))", "all x.(Customer(x) -> (OlderThan(x,80) | CurrentlyStudyingAtSchool(x)))", "all x.(Customer(x) -> (OlderThan80(x) | CurrentlyStudyingAtSchool(x)))", "all x.(Customer(x) -> (OlderThan(x,80) | StudiesAtSchool(x)))", "all x.(Customer(x) -> (OlderThan(x,80) | StudyingAtSchool(x,100)))", "all x.(Customer(x) -> (OlderThan(x,80) | StudyingAtSchool(x,60)))", "all x.(Customer(x) -> (OlderThan80(x) | StudiesAtSchool(x)))", "all x.(Customer(x) -> (OlderThan(x,80) | StudyingAtSchool(x,80)))", "all x.(Customer(x) -> (OlderThan(x,80) | StudyingAtSchool(x,90)))", "all x.(Customer(x) -> (OlderThanOxygen(x,80) | StudyingAtSchool(x)))", "all x.(Customer(x) -> (OlderThan(x,80) | StudyingAtSchool(x,10)))", "all x.(Customer(x) -> (OlderThan(x,80) | CurrentlyStudyingAtSchool(x,80)))"]}
{"id": "folio_train_1240", "nl": "James is not a customer who is currently studying at school. ", "fol": "-IsStudyingAtSchool(James)", "prediction": ["all x.((James(x) & -StudyingAtSchool(x)) -> -Customer(x))", "all x.((Customer(x) & -StudyingAtSchool(x)) -> James(x))", "all x.((James(x) & -StudentAtSchool(x)) -> -Customer(x))", "all x.((James(x) & -StudyAtSchool(x)) -> -Customer(x))", "all x.((Customer(x) & -StudyingAtSchool(x)) -> -Company(x))", "-(Customer(James) & StudyingAtSchool(James))", "all x.((Customer(x) & -StudyingAtSchool(x)) -> James.", "-(Customer(James) & StudiesAtSchool(James))", "all x.((James(x) & -Student(x)) -> -StudyingAtSchool(x))", "all x.((Customer(x) & -StudyingAtSchool(x)) -> -James(x))", "all x.(James(x) -> -(Customer(x) & StudyingAtSchool(x)))", "all x.((James(x) & -StudyingAtSchool(x)) -> -Client(x))", "all x.(James(x) -> -(Customer(x) & StudiesAtSchool(x)))", "all x.((James(x) & -StudyingAtSchool(x)) -> -Company(x))", "all x.((Customer(x) & -CurrentlyStudyingAtSchool(x)) -> James(x))", "all x.((Company(x) & -StudyingAtSchool(x)) -> James(x))"]}
{"id": "folio_train_1241", "nl": "James is a customer who does not choose any plans.", "fol": "(Customer(James) & -(ChoosesPlanA(James) | ChoosesPlanB(James)))", "prediction": ["all x.((Customer(x) & -ChoosesPlans(x)) -> James(x))", "all x.((Customer(x) & -ChoosesPlan(x)) -> James(x))", "all x.((Customer(x) & -ChoosesPlans(x)) -> Customer(x))", "all x.((Customer(x) & -ChosesPlans(x)) -> James(x))", "all x.((Customer(x) & -ChoosesPlans(x)) -> JamesClient(x))", "all x.(Customer(x) -> -ChoosesPlans(x))", "all x.((Customer(x) & -ChoicesPlans(x)) -> James(x))", "all x.((Customer(x) & -SelectsPlans(x)) -> James(x))", "all x y.((Customer(x) & James(y)) -> -ChoosesPlan(x,y))", "all x.((Customer(x) & -ChoosesPlans(x)) -> -Customer(x))", "all x.(Customer(x) & -ChoosesPlans(x))", "all x.((Customer(x) & -ChoosesPlans(x)) -> James.", "all x.((Customer(x) & -ChosesPlans(x)) -> James(x))", "all x.((Customer(x) & -ChoosesPlans(x)) -> JamesCustomer(x))", "all x.((Customer(x) & -ChosesPlan(x)) -> James(x))", "all x.((Customer(x) & -ChoosesPlan(x)) -> Customer(x))"]}
{"id": "folio_train_1242", "nl": "James is a customer who chooses Plan A or does not choose any plans.", "fol": "(ChoosesPlanA(James) | -ChooseAnyPlan(James))", "prediction": ["all x.((Customer(x) & (ChoosesPlanA(x) | -ChoosesPlanA(x))) -> James(x))", "all x.((Customer(x) & (ChoosesPlanA(x) | -ChoosesPlanB(x))) -> James(x))", "all x.((Customer(x) & (ChosesPlanA(x) | -ChosesPlanA(x))) -> James(x))", "all x.((Customer(x) & (ChoosesPlanA(x) | -ChoosesPlan(x))) -> James(x))", "all x.((Customer(x) & (ChoosesPlanA(x) | -ChoosesPlanA(x))) -> JamesCustomer(x))", "all x.((Customer(x) & (ChoosesPlanA(x) | -ChoosesPlans(x))) -> James(x))", "all x.((Customer(x) & (ChosesPlanA(x) | -ChosesPlanB(x))) -> James(x))", "all x.((Customer(x) & (CHOOSEsPlanA(x) | -CHOOSEsPlanA(x))) -> James(x))", "all x.((Customer(x) & (SelectsPlanA(x) | -SelectsPlanA(x))) -> James(x))", "all x.((Customer(x) & (ChosesPlanA(x) | -ChosesPlan(x))) -> James(x))", "all x.((Customer(x) & (ChosesPlanA(x) | -ChosesPlanA(x))) -> James(x))", "all x.((Customer(x) & (ChoosesPlanA(x) | -ChoosesPlanB(x))) -> JamesCustomer(x))", "all x.((Customer(x) & (ChoicesPlanA(x) | -ChoosesPlanA(x))) -> James(x))", "all x.((Customer(x) & (ChoosesPlanA(x) | -ChoosesPlanB))) -> James(x))", "all x.((Customer(x) & (CHOOSEsPlanA(x) | -CHOOSEsPlan(x))) -> James(x))", "all x.((Customer(x) & (PlanA(x) | -PlanA(x))) -> James(x))"]}
{"id": "folio_train_1243", "nl": "Suppose James is a customer who chooses Plan A or does not choose any plans, then he is either rewarded a $30 gift card or chooses Plan B.", "fol": "((ChoosesPlanA(James) | -DoesNotChooseAnyPlan(James)) -> (RewardedWithGiftCard(James) | ChoosesPlanB(James)))", "prediction": ["all x.((Customer(x) & (ChoosesPlanA(x) | -ChoosesPlanB(x))) -> (RecommendsGiftCard(x,30) | ChoosesPlanB(x,30)))", "all x.((Customer(x) & (ChoosesPlanA(x) | -ChoosesPlanB(x))) -> (Rewarded(x,30) | ChoosesPlanB(x,30)))", "all x.((Customer(x) & (ChoosesPlanA(x) | -ChoosesPlans(x))) -> (RecommendsGiftCard(x,30) | ChoosesPlanB(x,30)))", "all x.((Customer(x) & (ChoosesPlanA(x) | -ChoosesPlanB(x))) -> (RewardedGiftCard(x,30) | ChoosesPlanB(x,30)))", "all x.((Customer(x) & (ChoosesPlanA(x) | -ChoosesPlanB(x))) -> (Recognized(x,30) | ChoosesPlanB(x,30)))", "all x.((Customer(x) & (ChoosesPlanA(x) | -ChoosesPlans(x))) -> (Rewarded(x,30) | ChoosesPlanB(x,30)))", "all x.((Customer(x) & (ChoosesPlanA(x) | -ChoosesPlanB(x))) -> (Recognized(x,30) | ChoosesPlanB(x,30)))", "all x.((Customer(x) & (ChoosesPlanA(x) | -ChoosesPlanB(x))) -> (RewardedGiftCard(x) | ChoosesPlanB(x)))", "all x.((Customer(x) & (ChoosesPlanA(x) | -ChoosesPlanB(x))) -> (RecognizedGiftCard(x) | ChoosesPlanB(x)))", "all x.((Customer(x) & (ChoosesPlanA(x) | -ChoosesPlanB(x))) -> (Rewarded(x,30) | ChoosesPlanB(x)))", "all x.((Customer(x) & (ChoosesPlanA(x) | -ChoosesPlanB(x))) -> (Rewarded(x,30) | ChoosesPlanB(x,30)))", "all x.((Customer(x) & (ChoosesPlanA(x) | -ChoosesPlanB(x))) -> (Recommends(x,30) | ChoosesPlanB(x)))", "all x.((Customer(x) & (ChoosesPlanA(x) | -ChoosesPlans(x))) -> (Recognized(x,30) | ChoosesPlanB(x,30)))", "all x.((Customer(x) & (ChoosesPlanA(x) | -ChoosesPlanB(x))) -> (RecommendsGiftCard(x,30) | ChoosesPlanB(x)))", "all x.((Customer(x) & (ChoosesPlanA(x) | -ChoosesPlanB(x))) -> (Recognized(x,30) | ChoosesPlanB(x)))", "all x.((Customer(x) & (ChoosesPlanA(x) | -ChoosesPlanB(x))) -> (Recommends(x,30) | ChoosesPlanB(x,30)))"]}
{"id": "folio_train_1244", "nl": "Detroit City is a horse.", "fol": "IsHorse(Detroitcity)", "prediction": ["all x.(DetroitCity(x) -> Horse(x))", "all x.(Delta(x) -> Horse(x))", "all x.((DetroitCity(x) & Horse(x)) -> Horse(x))", "all x.(DelawareCity(x) -> Horse(x))", "all x.((DelawareCity(x) & Horse(x)) -> Horse(x))", "all x.((DevonCity(x) & Horse(x)) -> Horse(x))", "all x.((Delta(x) & Horse(x)) -> DetroitCity(x))", "all x.(DevonCity(x) -> Horse(x))", "all x.((DependentCity(x) & Horse(x)) -> Horse(x))", "all x.(DeltaCity(x) -> Horse(x))", "all x.((Delta-City(x) & Horse(x)) -> Horse(x))", "all x.((DepthCity(x) & Horse(x)) -> Horse(x))", "all x.((Delta(x) & Horse(x)) -> InDelta(x))", "all x.((DeltaCity(x) & Horse(x)) -> Horse(x))", "all x.(DependentCity(x) -> Horse(x))", "(Horse(DetroitCity) & Horse(DetroitCity))"]}
{"id": "folio_train_1245", "nl": "Some horses are racehorses.", "fol": "exists x.(IsHorse(x) & IsRacehorse(x))", "prediction": ["exists x.(Horse(x) & Racehorse(x))", "exists x.(Horse(x) & RaceHorse(x))", "exists x y.(Horse(x) & Horse(y) & Racehorse(x))", "exists x y.(Horse(x) & Horse(y) & Racehorse(y))", "exists x.(Hockey(x) & Racehorse(x))", "exists x.(Hoch(x) & Racehorse(x))", "exists x.(Horse(x) & Racehorse(x))", "exists x.(Hose(x) & Racehorse(x))", "exists x y.(Horse(x) & Horse(y) & Racehorse(x,y))", "exists x y.(Horse(x) & Racehorse(y))", "exists x.(Hop(x) & Racehorse(x))", "all x.(Horse(x) -> Racehorse(x))", "exists x.(Hood(x) & Racehorse(x))", "exists x y.(Horse(x) & Horse(y) & Racehorse(z))", "exists x.(Horse(x) & Racehorses(x))", "exists x.(Hole(x) & Racehorse(x))"]}
{"id": "folio_train_1246", "nl": "If a horse falls during a race, then it dies.", "fol": "all x.((IsHorse(x) & IsInRace(x) & HasFallen(x)) -> IsDead(x))", "prediction": ["all x.((Horse(x) & FallsDuringRace(x)) -> Dies(x))", "all x y.((Horse(x) & Race(y) & FallsDuring(x,y)) -> Dies(x))", "all x.(FallsDuringRace(x) -> Dies(x))", "all x y.((Horse(x) & FallsDuringRace(x,y)) -> Dies(x))", "all x y.((Horse(x) & Race(y) & FallsDuring(x,y)) -> Dies(x,y))", "all x y.((Horse(x) & FallsDuringRace(x)) -> Dies(x))", "all x y.((Horse(x) & FallsDuringRace(x) & Race(y)) -> Dies(x))", "all x.((Horse(x) & FallsDuringRace(x)) -> Dies(x))", "all x y z.((Horse(x) & Race(y) & FallsDuring(x,y)) -> Dies(x))", "all x y.((Horse(x) & Race(y) & Falls(x,y)) -> Dies(x))", "all x y.((Horse(x) & Race(y) & FallsDuring(x,y)) -> Dies(x))", "all x.((Horse(x) & FallsDuringRace(x)) -> Dies(x))", "all x y.((Horse(x) & Race(y) & FallsDuring(x,y)) -> Dies(x))", "all x y.((Horse(x) & Fall(x,y) & Race(y)) -> Dies(x))", "all x y.((Horse(x) & Fall(x) & Race(y)) -> Dies(x))", "all x y.((Horse(x) & FallDuringRace(x,y)) -> Dies(x))"]}
{"id": "folio_train_1247", "nl": "Detroit City fell during a race.", "fol": "(IsInRace(Detroitcity) & HasFallen(Detroitcity))", "prediction": ["all x y.((DetroitCity(x) & Race(y)) -> FallsDuring(x,y))", "all x y.((DelawareCity(x) & Race(y)) -> FallsDuring(x,y))", "all x.((DetroitCity(x) & Race(y)) -> FallsDuring(x,y))", "all x.((DelawareCity(x) & Race(y)) -> FallsDuring(x,y))", "all x.(DetroitCity(x) -> FallsDuringRace(x))", "all x y.((DetroitCity(x) & Race(y)) -> FalledDuring(x,y))", "all x y.((DelawareCity(x) & Race(y)) -> FalledDuring(x,y))", "all x.(DelawareCity(x) -> FallsDuringRace(x))", "all x.((DetroitCity(x) & Race(y)) -> FalledDuring(x,y))", "all x.((DelawareCity(x) & Race(x)) -> FallsDuring(x,y))", "all x.((DelawareCity(x) & Race(y)) -> FalledDuring(x,y))", "all x y.((DetroitCity(x) & Race(y)) -> FellDuring(x,y))", "all x.((DetroitCity(x) & Race(x)) -> FallsDuring(x,y))", "all x.(DetroitCity(x) -> FalledDuringRace(x))", "all x y.((DelawareCity(x) & Race(y)) -> FellDuring(x,y))", "all x y.((DepthCity(x) & Race(y)) -> FallsDuring(x,y))"]}
{"id": "folio_train_1248", "nl": "A horse is a racehorse if it is in a race.", "fol": "all x.((IsHorse(x) & IsInRace(x)) -> IsRacehorse(x))", "prediction": ["all x.((Horse(x) & InRace(x)) -> Racehorse(x))", "all x.(Racehorse(x) -> (Horse(x) & InRace(x)))", "all x.(Racehorse(x) -> (Horse(x) & exists y.(Race(y) & In(x,y)))))", "all x.((Horse(x) & Race(x)) -> Racehorse(x))", "all x y.((Horse(x) & Race(y) & InRace(x,y)) -> Racehorse(x))", "all x.((Horse(x) & Racehorse(x)) -> InRace(x))", "all x.((Horse(x) & InRace(x)) -> RaceHorse(x))", "all x.(Racehorse(x) -> (Horse(x) & InRace(x)))", "all x.((Horse(x) & inRace(x)) -> Racehorse(x))", "all x.(Racehorse(x) -> (Horse(x) & inRace(x)))", "all x.((Horse(x) & Racehorse(x)) -> InRace(x))", "all x.((Horse(x) & Race(x)) -> InRace(x))", "all x.((Horse(x) & RaceInRace(x)) -> Racehorse(x))", "all x.((Horse(x) & RaceHorse(x)) -> InRace(x))", "all x.(Racehorse(x) -> (Horse(x) & exists y.(Race(y) & InRace(x,y)))))", "all x.((Horse(x) & Race(x)) -> Racehorse(x))"]}
{"id": "folio_train_1249", "nl": "Detroit City is dead.", "fol": "IsDead(Detroitcity)", "prediction": ["all x.(Delta(x) -> Dead(x))", "all x.(DetroitCity(x) -> Dead(x))", "All x.(Delta(x) -> Dead(x))", "All x.(DetroitCity(x) -> Dead(x))", "all x.((Delta(x) & DetroitCity(x)) -> Dead(x))", "all x.(DelawareCity(x) -> Dead(x))", "(Delta(DetroitCity) -> Dead(DetroitCity))", "all x.(DeltaCity(x) -> Dead(x))", "(Delta(DetroitCity) -> Dead(DetroitCity))", "all x.(DevonCity(x) -> Dead(x))", "all x.(Delta(x) -> DetroitCity(x))", "(DetroitCity(Detroit) & Dead(Detroit))", "(Delta(DetroitCity) & Dead(DetroitCity))", "(Decline(DetroitCity) -> Dead(DetroitCity))", "(Delta(DetroitCity) -> Dead(Detroit))", "all x.(Delta(x) -> City(x))"]}
{"id": "folio_train_1250", "nl": "Detroit City is a racehorse.", "fol": "IsRacehorse(Detroitcity)", "prediction": ["all x.(DetroitCity(x) -> Racehorse(x))", "all x.((DetroitCity(x) & Racehorse(x)) -> Racehorse(x))", "all x.((DelawareCity(x) & Racehorse(x)) -> Racehorse(x))", "all x.(Delta(x) -> Racehorse(x))", "all x.((DevonCity(x) & Racehorse(x)) -> Racehorse(x))", "all x.(DelawareCity(x) -> Racehorse(x))", "all x.((Delta(x) & DetroitCity(x)) -> Racehorse(x))", "all x.((Delta(x) & Racehorse(x)) -> DetroitCity(x))", "all x.((Delta-City(x) & Racehorse(x)) -> Racehorse(x))", "all x.((DependentCity(x) & Racehorse(x)) -> Racehorse(x))", "all x.((DeliveryCity(x) & Racehorse(x)) -> Racehorse(x))", "all x.(Racehorse(x) -> DetroitCity(x))", "all x.((Delta(x) & City(x)) -> Racehorse(x))", "all x.(DevonCity(x) -> Racehorse(x))", "all x.((DeltaCity(x) & Racehorse(x)) -> Racehorse(x))", "all x.(Racehorse(x) -> DetroitCity(x))"]}
{"id": "folio_train_1251", "nl": "Frederick Monhoff was an architect, artist, and illustrator.", "fol": "(IsArchitect(Monhoff) & IsArtist(Monhoff) & IsIllustrator(Monhoff))", "prediction": ["(Architect(FredrickMonhoff) & Artist(FredrickMonhoff) & Illustrator(FredrickMonhoff))", "(Architect(FrederickMonhoff) & Artist(FrederickMonhoff) & Illustrator(FrederickMonhoff))", "(Architect(FrederickMonhoff) & Artist(FredrickMonhoff) & Illustrator(FredrickMonhoff))", "(Architect(Fredric Monhoff) & Artist(FredricMonhoff) & Illustrator(FredricMonhoff))", "(Architect(FredricMonhoff) & Artist(FredricMonhoff) & Illustrator(FredricMonhoff))", "Frederick Monhoff (exists x.(Architect(x) & Artist(x) & Illustrator(x)))", "Frederick Monhoff(f) & Architect(f) & Artist(f) & Illustrator(f))", "(Architect(FredrickMonhoff) & Artist(FredrickMonhoff) & Illustrator(FredricMonhoff))", "(Architect(FredrickMonhoff) & Artist(FredricMonhoff) & Illustrator(FredricMonhoff))", "Frederick Monhoff (Architect(f) & Artist(f) & Illustrator(f))", "(Architect(FrederickMonhoff) & Artist(FredrickMonhoff) & Illustrator(FredricMonhoff))", "Frederick Monhoff ((Architect(e) & Artist(e) & Illustrator(e)))", "Frederick Monhoff ((Architect(e) | Artist(e) | Illustrator(e)))", "Frederick Monhoff ((Architect) & Artist(x) & Illustrator(x)))", "Frederick Monhoff (exists x.(Architect(x) & Artist(x)) & Illustrator(x))", "(Architect(FredrickMonhoff) & Artist(FredricMonhoff) & Illustrator(FredrickMonhoff))"]}
{"id": "folio_train_1252", "nl": "Frederick Monhoff was an American.", "fol": "IsAmerican(Monhoff)", "prediction": ["all x.(FredrickMonhoff(x) -> American(x))", "All x.(FredrickMonhoff(x) -> American(x))", "all x.((FredrickMonhoff(x) & American(x)) -> Was(x))", "all x.((FredrickMonhoff(x) & American(x)) -> Was(x,y))", "all x.((FrederickMonhoff(x) & American(x)) -> Was(x))", "All x.(FrederickMonhoff(x) -> American(x))", "all x.(FrederickMonhoff(x) -> American(x))", "All x.((FredrickMonhoff(x) & American(x)) -> Was(x))", "all x.((FrederickMonhoff(x) & American(x)) -> Was(x,y))", "all x.((FredrickMonhoff(x) & American(x)) -> BornIn(x,y))", "all x.((FredrickMonhoff(x) & American(x)) -> BornIn(x))", "all x.((FredrickMonhoff(x) & American(x)) -> Was(x,Monhoff))", "All x.((FredrickMonhoff(x) & American(x)) -> Was(x,y))", "all x.((FredrickMonhoff(x) & American(x)) -> Monhoff(x))", "Frederick Monhoff (American)", "All x.((FredrickMonhoff(x) & American(x)) -> Monhoff(x))"]}
{"id": "folio_train_1253", "nl": "An artist is good at painting or music.", "fol": "all x.((IsArtist(x) -> SkilledIn(x,Painting)) | SkilledIn(x,Music))", "prediction": ["all x.(Artist(x) -> (GoodAtPainting(x) | GoodAtMusic(x)))", "exists x.(Artist(x) & (GoodAtPainting(x) | GoodAtMusic(x)))", "all x.(Artist(x) -> (GoodAt(x,Painting) | GoodAt(x,Music)))", "all x y.((Artist(x) & (Painting(y) | Music(y))) -> GoodAt(x,y))", "all x.(Artist(x) -> (GoodAtPainting(x) | GoodAtMusic(x)))", "all x.((Artist(x) & (GoodAtPainting(x) | GoodAtMusic(x))) -> GoodAtPainting(x))", "all x.((Artist(x) & (GoodAtPainting(x) | GoodAtMusic(x))) -> GoodAt(x))", "all x.(Artist(x) -> ((GoodAtPainting(x) | GoodAtMusic(x))))", "all x y.((Artist(x) & (GoodAtPainting(x) | GoodAtMusic(x))) -> GoodAt(x,y))", "all x.(Artist(x) -> (GoodAtPainting(x) | GoodAtMusique(x)))", "all x.(Artist(x) -> (GoodPainting(x) | GoodMusic(x)))", "all x y.((Artist(x) & (GoodAtPainting(x) | GoodAtMusic(x))) -> GoodAtPainting(x))", "all x y.((Artist(x) & (Painting(y) | Music(y))) -> Good(x,y))", "all x.((Artist(x) & (GoodAtPainting(x) | GoodAtMusic(x))) -> GoodAt(x,Painting(x))", "all x.(Artist(x) -> (GoodAt(x,painting) | GoodAt(x,music)))", "all x.((Artist(x) & (GoodAtPainting(x) | GoodAtMusic(x))) -> GoodAt(x,Painting))"]}
{"id": "folio_train_1254", "nl": "All Americans speak English.", "fol": "all x.(IsAmerican(x) -> SpeaksLanguage(x,English))", "prediction": ["all x.(American(x) -> SpeaksEnglish(x))", "all x.(American(x) -> SpeaksEnglish(x))", "all x.(American(x) -> SpeakEnglish(x))", "all x.(American(x) -> SpeakEnglish(x))", "all x.(American(x) -> SpeaksEnglish(x))", "all x.(American(x) -> SpeaksEnglisch(x))", "all x.(American(x) -> SpeakEnglish(x))", "all x.(American(x) -> SpeaksEnglisch(x))", "all x.(American(x) -> SpeaksEnglish(x))", "all x.(American(x) -> SpeaksEngland(x))", "all x.(Amerikan(x) -> SpeaksEnglish(x))", "all x.(American(x) -> SpeakEnglish(x))", "all x.(American(x) -> SpeaksEngland(x))", "all x.(American(x) -> SpeakEnglish(x))", "all x.(Amerikaner(x) -> SpeaksEnglish(x))", "all x.(America(x) -> SpeaksEnglish(x))"]}
{"id": "folio_train_1255", "nl": "Frederick Monhoff is good at music.", "fol": "SkilledIn(Monhoff,Music)", "prediction": ["all x.((FredrickMonhoff(x) & GoodAtMusic(x)) -> GoodAtMusic(x))", "all x.((FrederickMonhoff(x) & GoodAtMusic(x)) -> GoodAtMusic(x))", "all x.((FredricMonhoff(x) & GoodAtMusic(x)) -> GoodAtMusic(x))", "all x.(FredrickMonhoff(x) -> GoodAtMusic(x))", "all x.(FredricMonhoff(x) -> GoodAtMusic(x))", "all x.(FrederickMonhoff(x) -> GoodAtMusic(x))", "all x y.((FredrickMonhoff(x) & Music(y)) -> GoodAt(x,y))", "all x.(FrancisMonhoff(x) -> GoodAtMusic(x))", "Frederick Monhoff is goodAtMusic(FrederickMonhoff)", "all x.((FredrickMonhoff(x) & GoodAtMusic(x)) -> ExcellentAtMusic(x))", "all x.((FredrickMonhoff(x) & Music(y)) -> GoodAt(x,y))", "all x.((FredrickMonhoff(x) & GoodAtMusic(x)) -> GoodAtMusic(x))", "all x.((FredrickMonhoff(x) & GoodAt(x,Music)) -> GoodAt(x,Music))", "all x.((FrederickMonhoff(x) & GoodAtMusic(x)) -> ExcellentAtMusic(x))", "all x.((FredricMonhoff(x) & GoodAtMusic(x)) -> ExcellentAtMusic(x))", "all x.((FredricMonhoff(x) & Music(y)) -> GoodAt(x,y))"]}
{"id": "folio_train_1256", "nl": "There is no illustrator who speaks English.", "fol": "-exists x.(IsIllustrator(x) & SpeaksLanguage(x,English))", "prediction": ["-exists x.(Illustrator(x) & SpeaksEnglish(x))", "exists x.(Illustrator(x) & -SpeaksEnglish(x))", "-exists x.(Illustrator(x) & SpeaksEngland(x))", "-exists x.(Illustrator(x) & SpeaksEnglisch(x))", "-exists x.(Illustrator(x) & SpeaksEnglish(x))", "-exists x.(illustrator(x) & SpeaksEnglish(x))", "(-exists x.(Illustrator(x) & SpeaksEnglish(x)))", "-exists x.(Illustrator(x) & SpeakingEnglish(x))", "-exists x.(Illustrator(x) & DoesSpeakEnglish(x))", "-exists x.(Illustrator(x) & SpeaksEnglica(x))", "-exists x.(Illustrator(x) & SpokenEnglish(x))", "-exists x.(Illustrator(x) & SpeakEnglish(x))", "exists x.(Illustrator(x) & -SpeaksEngland(x))", "all x.(Illustrator(x) -> -SpeaksEnglish(x))", "exists x.(illustrator(x) & -SpeaksEnglish(x))", "-exists x.(Illustrator(x) & speaksEnglish(x))"]}
{"id": "folio_train_1257", "nl": "Miroslav Fiedler was a Czech mathematician.", "fol": "(IsCzech(Miroslavfiedler) & IsMathematician(Miroslavfiedler))", "prediction": ["Miroslav Fiedler (CzechMathematician)", "all x.(MiroslavFiedler(x) -> CzechMathematician(x))", "Miroslav Fiedler (CzechMathematician)", "all x.(MiroslavFiedler(x) -> CzechMathematician(x))", "all x.(MiroslavFiedler(x) -> (CzechMathematician(x) & Mathematician(x)))", "all x.((MiroslavFiedler(x) & CzechMathematician(x)) -> (Mathematician(x) & Mathematician(x)))", "all x.((MiroslavFiedler(x) & CzechMathematician(x)) -> Mathematician(x))", "(CzechMathematician(MiroslavFiedler) & Mathematician(MiroslavFiedler))", "(MiroslavFiedler(Mathematician) & Czech(Mathematician))", "all x.(MiroslavFiedler(x) -> (CzechMathematician(x) & Mathematician(x)))", "all x.((MiroslavFiedler(x) & CzechMathematician(x)) -> Was(x,CzechMathematician))", "all x.((MiroslavFiedler(x) & CzechMathematician(x)) -> Mathematician(x))", "(CzechMathematician(MiroslavFiedler)", "(CzechMathematician(MiroslavFiedler) & Mathematician(MiroslavFiedler))", "all x.((MiroslavFiedler(x) & CzechMathematician(x)) -> Was(x,Mathematician))", "all x.((MiroslavFiedler(x) & CzechMathematician(x)) -> (Mathematician(x) & Mathematician(x)))"]}
{"id": "folio_train_1258", "nl": "Miroslav Fiedler is known for his contributions to linear algebra and graph theory.", "fol": "KnownForContributions(Miroslavfiedler,ContributionsToLinearAlgebraAndGraphTheory)", "prediction": ["all x.((MiroslavFiedler(x) & ContributionsToLinearAlgebra(x) & ContributionsToGraphTheory(x)) -> MiroslavFiedler(x))", "all x.((MiroslavFiedler(x) & ContributesToLinearAlgebra(x) & ContributesToGraphTheory(x)) -> MiroslavFiedler(x))", "all x.((MiroslavFiedler(x) & ContributionsToLinearAlgebra(x) & ContributionsToGraphTheory(x)) -> KnownFor(x,y))", "all x.(MiroslavFiedler(x) -> (ContributionsToLinearAlgebra(x) & ContributionsToGraphTheory(x)))", "all x.(MiroslavFiedler(x) -> (ContributesToLinearAlgebra(x) & ContributesToGraphTheory(x)))", "all x.((Miroslav Fiedler(x) & ContributionsToLinearAlgebra(x) & ContributionsToGraphTheory(x)) -> MiroslavFiedler(x))", "all x.((MiroslavFiedler(x) & ContributionsToLinearAlgebra(x) & ContributionsToGraphTheory(x)) -> Fiedler(x))", "all x.((MiroslavFiedler(x) & ContributionToLinearAlgebra(x) & ContributionToGraphTheory(x)) -> MiroslavFiedler(x))", "all x.((MiroslavFiedler(x) & ContributesToLinearAlgebra(x) & ContributesToGraphTheory(x)) -> KnownFor(x,y))", "all x.((MiroslavFiedler(x) & ContributionsToLinearAlgebra(x) & ContributionsToGraphTheory(x)) -> KnownFor(x))", "all x.((MiroslavFiedler(x) & ContributionsToLinearAlgebra(x) & ContributionsToGraphTheory(x)) -> Rigorous(x))", "all x.((MiroslavFiedler(x) & ContributionsToLinearAlpha(x) & ContributionsToGraphTheory(x)) -> MiroslavFiedler(x))", "all x.((MiroslavFiedler(x) & LinearAlgebra(x) & GraphTheory(x)) -> KnownFor(x,y))", "all x.((MiroslavFiedler(x) & ContributionToLinearAlgebra(x) & ContributionToGraphTheory(x)) -> KnownFor(x,y))", "all x.((MiroslavFiedler(x) & ContributionsToLinearAlgebra(x) & ContributionsToGraphTheory(x)) -> RecognizedFor(x,y))", "all x.((MiroslavFiedler(x) & ContributionsToLinearAlgebra(x) & ContributionsToGraphTheory(x)) -> FamousFor(x,y))"]}
{"id": "folio_train_1259", "nl": "Miroslav Fiedler is honored by the Fiedler eigenvalue.", "fol": "HonoredByEigenvalue(Miroslavfiedler,FiedlerEigenvalue)", "prediction": ["all x.((MiroslavFiedler(x) & FiedlerEigenvalue(x)) -> Honored(x))", "all x y.((MiroslavFiedler(x) & FiedlerEigenvalue(y)) -> HonoredBy(x,y))", "all x.((MiroslavFiedler(x) & FiedlerEigenvalue(x)) -> HonoredBy(x,Fiedler))", "all x y.((MiroslavFiedler(x) & FiedlerEigenvalue(y)) -> Honored(x,y))", "all x.((MiroslavFiedler(x) & FiedlerEigenvalue(x)) -> HonoredBy(x,FiedlerEigenvalue))", "all x.((MiroslavFiedler(x) & FiedlerEigenValue(x)) -> Honored(x))", "all x.((MiroslavFiedler(x) & FiedlerEigenvalue(x)) -> HonoredBy(x,y))", "all x y.((MiroslavFiedler(x) & FiedlerEigenValue(y)) -> HonoredBy(x,y))", "all x.((MiroslavFiedler(x) & FiedlerEigenvalue(x)) -> HonoredByEigenvalue(x))", "all x.((MiroslavFiedler(x) & FiedlerEigenValue(x)) -> HonoredByEigenValue(x))", "all x.((MiroslavFiedler(x) & FiedlerEigenvalue(x)) -> HonoredBy(x,Fiedler,Eigenvalue))", "all x y.((MiroslavFiedler(x) & Eigenvalue(y)) -> HonoredBy(x,y))", "all x.((MiroslavFiedler(x) & FiedlerEigenValue(x)) -> HonoredBy(x,FiedlerEigenValue))", "all x.((MiroslavFiedler(x) & FiedlerEigenvalue(x)) -> HonoredBy(x,Eigenvalue))", "all x.((MiroslavFiedler(x) & FiedlerEigenValue(x)) -> HonoredBy(x,FiedlerEigenvalue))", "all x y.((MiroslavFiedler(x) & FiedlerEigenValue(y)) -> Honored(x,y))"]}
{"id": "folio_train_1260", "nl": "Fiedler eigenvalue is the second smallest eigenvalue of the graph Laplacian.", "fol": "SecondSmallestEigenvalueOf(FiedlerEigenvalue,TheGraphLaplacian)", "prediction": ["all x.(FiedlerEigenvalue(x) -> (SmallestEigenvalueOfGraphLaplacian(x) & SecondSmallestEigenvalueOfGraphLaplacian(x)))", "all x.(FiedlerEigenvalue(x) -> (SecondSmallestEigenvalueOfGraphLaplacian(x)))", "(SecondSmallestEigenvalueOfGraphLaplacian(Fiedler))", "all x.(FiedlerEigenvalue(x) -> SecondSmallestEigenvalueOfGraphLaplacian(x))", "all x.(FiedlerEigenvalue(x) -> (SecondSmallestEigenvalue(x) & LaplacianGraph(x)))", "(SecondSmallestEigenvalue(Fiedler) & GraphLaplacian(Fiedler))", "all x y.((FiedlerEigenvalue(x) & LaplacianGraph(y)) -> SecondSmallestEigenvalue(x,y))", "all x.(FiedlerEigenvalue(x) -> (SecondSmallestEigenvalue(x) & GraphLaplacian(x)))", "all x.(FiedlerEigenvalue(x) -> SlightestEigenvalueOfGraphLaplacian(x))", "(SecondSmallestEigenvalue(Fiedler) & LaplacianGraph(Fiedler))", "all x.(FiedlerEigenvalue(x) -> (SecondSmallerEigenvalueOfGraphLaplacian(x)))", "all x.(Eigenvalue(x) -> (Fiedler(x) & GraphLaplacian(x)))", "all x.(FiedlerEigenvalue(x) -> (SecondSmallerEigenvalue(x) & LaplacianGraph(x)))", "all x y.((FiedlerEigenvalue(x) & LaplacianGraph(y)) -> SecondSmallerEigenvalue(x,y))", "all x.(FiedlerEigenvalue(x) -> (SmallestEigenvalue(x) & GraphLaplacian(x)))", "(SmallestEigenvalueOfGraphLaplacian(Fiedler))"]}
{"id": "folio_train_1261", "nl": "Miroslav Fiedler is honored by the second smallest eigenvalue of the graph Laplacian.", "fol": "exists x.(HonoredByEigenvalue(Miroslavfiedler,x) & SecondSmallestEigenvalueOf(x,TheGraphLaplacian))", "prediction": ["all x.((MiroslavFiedler(x) & SecondSmallestEigenvalueOfGraphLaplacian(x)) -> Honored(x))", "all x.((MiroslavFiedler(x) & SecondSmallestEigenvalue(x)) -> HonoredByGraphLaplacian(x))", "all x y.((MiroslavFiedler(x) & GraphLaplacian(y)) -> HonoredBySecondSmallestEigenvalue(x,y))", "all x.((MiroslavFiedler(x) & SecondSmallestEigenvalue(x,GraphLaplacian)) -> Honored(x))", "all x.((MiroslavFiedler(x) & SecondSmallestEigenvalue(x) & LaplacianGraph(x)) -> Honored(x))", "all x.((MiroslavFiedler(x) & SecondSmallestEigenvalueOfGraphLaplacian(x)) -> HonoredBy(x,y))", "all x.((MiroslavFiedler(x) & GraphLaplacian(x)) -> HonoredBySecondSmallestEigenvalue(x))", "all x.((MiroslavFiedler(x) & SecondSmallestEigenvalueOfGraphLaplacian(x)) -> HonoredBy(x))", "all x.((MiroslavFiedler(x) & SecondSmallerEigenvalueOfGraphLaplacian(x)) -> Honored(x))", "all x.((MiroslavFiedler(x) & SecondSmallestEigenvalue(x,Laplacian)) -> Honored(x))", "all x.((MiroslavFiedler(x) & SecondSmallestEigenvalueOfGraphLaplacian(x)) -> HonoredBy(x,MiroslavFiedler))", "all x.((MiroslavFiedler(x) & SecondSmallestEigenValueOfGraphLaplacian(x)) -> Honored(x))", "all x.((MiroslavFiedler(x) & SecondSmallerEigenvalue(x,Laplacian)) -> Honored(x))", "all x.((MiroslavFiedler(x) & SecondSmallestEigenvalue(x,GraphLaplacian)) -> HonoredBy(x,MiroslavFiedler))", "all x.((MiroslavFiedler(x) & SecondSiniestEigenvalueOfGraphLaplacian(x)) -> Honored(x))", "all x.((MiroslavFiedler(x) & SecondSmallestEigenvalue(x)) -> Honored(x))"]}
{"id": "folio_train_1262", "nl": "Miroslav Fiedler was a French mathematician.", "fol": "(French(Miroslavfiedler) & IsMathematician(Miroslavfiedler))", "prediction": ["Miroslav Fiedler (FrenchMathematician)", "(FrenchMathematician(FrenchMathematician) & MiroslavFiedler(FrenchMathematician))", "all x.(FrenchMathematician(x) -> MiroslavFiedler(x))", "all x.(MiroslavFiedler(x) -> (FrenchMathematician(x) & FrenchMathematician(x)))", "(FrenchMathematician(MiroslavFiedler) & FrenchMathematician(MiroslavFiedler))", "(FrenchMathematician(MiroslavFiedler) & Mathematician(MiroslavFiedler))", "all x.(MiroslavFiedler(x) -> (FrenchMathematician(x) & Mathematician(x)))", "(FrenchMathematician(MiroslavFiedler) & -FrenchMathematician(MiroslavFiedler))", "(FrenchMathematician(MiroslavFiedler) & Was(MiroslavFiedler,FrenchMathematician))", "all x.(MiroslavFiedler(x) -> FrenchMathematician(x))", "Miroslav Fiedler (FrenchMathematician)", "(FrenchMathematician(MiroslavFiedler) & FoundedIn(MiroslavFiedler,FrenchMathematician))", "Miroslav Fiedler (FrenchMathematician) & EducatedInFrenchMathematics(FrenchMathematician))", "all x.(MiroslavFiedler(x) -> (FrenchMathematician(x) & FrenchMathematician(x)))", "(FrenchMathematician(MiroslavFiedler) & Mathematician(MiroslavFiedler))", "(FrenchMathematician(MiroslavFiedler) & Mathematician(MiroslavFiedler))"]}
{"id": "folio_train_1263", "nl": "A Czech mathematician is known for his contributions to linear algebra and graph theory.", "fol": "exists x.(IsCzech(x) & IsMathematician(x) & KnownForContributions(x,ContributionsToLinearAlgebraAndGraphTheory))", "prediction": ["all x.(CzechMathematician(x) -> (ContributesToLinearAlgebra(x) & ContributesToGraphTheory(x)))", "all x.((CzechMathematician(x) & ContributionsToLinearAlgebra(x) & ContributionsToGraphTheory(x)) -> KnownFor(x,y))", "all x.(CzechMathematician(x) -> (KnownForLinearAlgebra(x) & KnownForGraphTheory(x)))", "all x.(CzechMathematician(x) -> (ContributionsToLinearAlgebra(x) & ContributionsToGraphTheory(x)))", "all x.((CzechMathematician(x) & ContributesToLinearAlgebra(x) & ContributesToGraphTheory(x)) -> KnownFor(x,y))", "all x.(CzechMathematician(x) -> (ContributesToLinearAlgebra(x) & ContributesToGraphTheory(x)))", "all x.((CzechMathematician(x) & ContributionsToLinearAlgebra(x) & ContributionsToGraphTheory(x)) -> KnownFor(x))", "all x.(CzechMathematician(x) -> (KnownForContributionsToLinearAlgebra(x) & KnownForGraphTheory(x)))", "all x y z.((CzechMathematician(x) & LinearAlgebra(y) & GraphTheory(z)) -> ContributesTo(x,y,z))", "all x.((CzechMathematician(x) & ContributesToLinearAlgebra(x) & ContributesToGraphTheory(x)) -> KnownFor(x,LinearAlgebra,GraphTheory))", "all x.((CzechMathematician(x) & ContributionsToLinearAlgebra(x) & ContributionsToGraphTheory(x)) -> KnownFor(x,LinearAlgebra,GraphTheory))", "all x.((CzechMathematician(x) & ContributesToLinearAlgebra(x) & ContributesToGraphTheory(x)) -> KnownFor(x))", "all x.(CzechMathematician(x) -> (KnownForLinearAlgebra(x) & KnownForGraphTheory(x)))", "all x.(CzechMathematician(x) -> (KnownFor(x,LinearAlgebra) & KnownFor(x,GraphTheory)))", "all x.(CzechMathematician(x) -> (ContributesToLinearAlgebra(x) & ContributionsToGraphTheory(x)))", "all x.((CzechMathematician(x) & ContributionsToLinearAlgebra(x) & ContributionsToGraphTheory(x)) -> KnownFor(x,y))"]}
{"id": "folio_train_1264", "nl": "A laptop is a computer.", "fol": "all x.(IsLaptop(x) -> IsComputer(x))", "prediction": ["all x.(Laptop(x) -> Computer(x))", "all x y.((Laptop(x) & Computer(y)) -> Computer(x))", "all x.(Laptop(x) -> Computer(x))", "all x y.((Laptop(x) & Computer(y)) -> Is(x,y))", "all x y.((Laptop(x) & Computer(y)) -> (Computer(x) & Computer(y)))", "exists x.(Laptop(x) & Computer(x))", "all x y.((Laptop(x) & Computer(y)) -> Computer(x,y))", "all x.exists y.(Laptop(x) & Computer(y) & Has(x,y))", "all x.exists y.(Laptop(x) & Computer(y) & DesignedFor(x,y))", "all x.((Laptop(x) & Computer(x)) -> Computer(x))", "all x.exists y.(Laptop(x) & Computer(y) & WorksWith(x,y))", "all x.exists y.(Laptop(x) & Computer(y) & Uses(x,y))", "all x y.((Laptop(x) & Computer(y)) -> Has(x,y))", "all x.exists y.(Laptop(x) & Computer(y) & UsedFor(x,y))", "all x.exists y.(Laptop(x) & Computer(y) & RunsOn(x,y))", "all x.exists y.(Laptop(x) & Computer(y) & Computer(x))"]}
{"id": "folio_train_1265", "nl": "You can play games on a computer.", "fol": "all x.(IsComputer(x) -> CanPlayGamesOnComputer(x))", "prediction": ["all x y.((Computer(x) & Computer(y)) -> PlayGames(x,y))", "all x y.((Computer(x) & Computer(y)) -> PlaysGames(x,y))", "all x y.((Computer(x) & Computer(y)) -> PlayGamesOn(x,y))", "all x y.((Computer(x) & Computer(y)) -> PlaysGamesOn(x,y))", "all x y z.((Computer(x) & Game(y) & Computer(z)) -> PlaysOn(x,y,z))", "all x y.((Computer(x) & Computer(y)) -> PlayGame(x,y))", "all x y.((Computer(x) & Computer(y)) -> CanPlayGames(x,y))", "all x y.((Computer(x) & Computer(y)) -> PlaysGame(x,y))", "exists x.(Computer(x) & PlayGamesOn(x,Computer))", "all x y z.((Computer(x) & Computer(y) & Game(z)) -> PlaysOn(x,y,z))", "all x y.((Computer(x) & Computer(y)) -> PlaysOn(x,y))", "all x y z.((Computer(x) & Game(y) & Computer(z)) -> CanPlay(x,y,z))", "all x y.((Computer(x) & Computer(y)) -> Play(x,y))", "all x y z.((Computer(x) & Game(y) & Computer(z)) -> Play(x,y,z))", "all x y z.((Computer(x) & Game(y) & Computer(z)) -> PlayOn(x,y,z))", "all x y.((Computer(x) & Game(y)) -> PlaysOn(x,y))"]}
{"id": "folio_train_1266", "nl": "A phone is not a computer.", "fol": "all x.(IsPhone(x) -> -IsComputer(x))", "prediction": ["all x.(Phone(x) -> -Computer(x))", "all x y.((Phone(x) & Computer(y)) -> -Computer(x))", "all x.(Phone(x) -> -Computer(x))", "exists x.(Phone(x) & -Computer(x))", "all x y.((Phone(x) & Computer(y)) -> -(Computer(x) & Computer(y)))", "all x.((Phone(x) & -Computer(x)) -> -Computer(x))", "all x y.((Phone(x) & Computer(y)) -> -(Computer(x) & -Computer(x)))", "all x y.((Phone(x) & Computer(y)) -> -(Computer(x) & -Computer(y)))", "all x.exists y.(Phone(x) & Computer(y) & -Computer(x))", "all x y.((Phone(x) & Computer(y)) -> -(Computer(x) | Computer(y)))", "all x y.((Phone(x) & Computer(y)) -> -(Computer(x) & Phone(y)))", "all x y.((Phone(x) & Computer(y)) -> -(Computer(x) & Phone(x)))", "all x y.((Phone(x) & Computer(y)) -> -Computer(x,y))", "all x y.((Phone(x) & Computer(y)) -> -(Computer(x) | Computer(y))))", "all x.(Phone(x) -> -computer(x))", "all x y.((Phone(x) & Computer(y)) -> -(PC(x) & Computer(y)))"]}
{"id": "folio_train_1267", "nl": "You can play games on a laptop.", "fol": "all x.(IsLaptop(x) -> CanPlayGamesOnComputer(x))", "prediction": ["all x y.((Laptop(x) & Laptop(y)) -> PlayGames(x,y))", "all x y.((Laptop(x) & Laptop(y)) -> PlayGamesOn(x,y))", "all x y.((Laptop(x) & Laptop(y)) -> PlaysGames(x,y))", "all x y.((Laptop(x) & Laptop(y)) -> PlaysGamesOn(x,y))", "all x y z.((Laptop(x) & Game(y) & Laptop(z)) -> PlaysOn(x,y,z))", "all x y.((Laptop(x) & Laptop(y)) -> PlaysOn(x,y))", "all x y.((Laptop(x) & Laptop(y)) -> CanPlayGames(x,y))", "all x.(PlayGamesOnLaptop(x) -> PlayGamesOnLaptop(x))", "all x y.((Laptop(x) & Laptop(y)) -> Play(x,y))", "all x y z.((Laptop(x) & Game(y) & Laptop(z)) -> Play(x,y,z))", "exists x.(Laptop(x) & PlayGamesOn(x,Laptop))", "all x.(PlayGamesOnLaptop(x) -> PlayOnLaptop(x))", "all x.(PlayGames(x) -> Laptop(x))", "all x y z.((Laptop(x) & Game(y) & Laptop(z)) -> PlayOn(x,y,z))", "all x.(PlayGamesOnLaptop(x) -> CanBePlayedOnLaptop(x))", "all x.(PlaysGamesOnLaptop(x) -> PlaysOnLaptop(x))"]}
{"id": "folio_train_1268", "nl": "You can not play games on a phone.", "fol": "all x.(IsPhone(x) -> -CanPlayGamesOnComputer(x))", "prediction": ["all x.((Phone(x) & -PlayGamesOn(x,Phone)) -> -PlayGamesOn(x,Phone))", "all x.((Phone(x) & -PlaysGamesOn(x,Phone)) -> -PlaysGamesOn(x,Phone))", "all x.(Phone(x) -> -PlayGamesOn(x,Phone))", "all x.((Phone(x) & -PlayGames(x)) -> -PlayGames(x))", "all x.(PlayGamesOnPhone(x) -> -(PlayGamesOnPhone(x) & PlayGamesOnPhone(x)))", "all x.((Phone(x) & -PlaysGamesOn(x)) -> -PlaysGamesOn(x))", "all x y.((Phone(x) & Phone(y)) -> -PlaysGames(x,y))", "all x y.((Phone(x) & Phone(y)) -> -PlayGames(x,y))", "all x.((Phone(x) & -PlayGamesOn(x)) -> -PlayGamesOn(x))", "all x.((Phone(x) & -PlaysGames(x)) -> -PlaysOn(x,Phone))", "all x.(PlayGamesOnPhone(x) -> -exists y.(Phone(y) & PlayGamesOn(x,y)))", "all x.(PlayGamesOnPhone(x) -> -PlayGamesOnPhone(x))", "all x.(PlayGamesOnPhone(x) -> -CanPlayGamesOnPhone(x))", "all x.(Phone(x) -> -PlayGames(x))", "all x.((Phone(x) & -PlayGamesOn(x)) -> -PlayGamesOn(x,Phone))", "all x.((Phone(x) & -PlayGamesOn(x,Phone)) -> -PlayGames(x,Phone))"]}
{"id": "folio_train_1269", "nl": "Walter Folger Brown was an American politician and lawyer, and served as the postmaster general.", "fol": "(IsAmericanPolitician(Walterbrown) & IsLawyer(Walterbrown) & ServedAsPostmasterGeneral(Walterbrown,Postamastergeneral))", "prediction": ["Walter Folger Brown (AmericanPoliticianAndLawyer(Walter) & PostmasterGeneral(Walter))", "(AmericanPolitician(WalterSuiterBrown) & Lawyer(WalterSuiterBrown) & PostmasterGeneral(WalterSuiterBrown))", "(AmericanPolitician(WalterSueder Brown) & Lawyer(WalterSueder Brown) & PostmasterGeneral(WalterSueder Brown))", "(AmericanPoliticianAndLawyer(WalterSuiterBrown) & PostmasterGeneral(WalterSuiterBrown))", "all x.((Politician(x) & Lawyer(x) & PostmasterGeneral(x)) -> WalterSuiterBrown(x))", "(AmericanPolitician(WalterSuiter Brown) & Lawyer(WalterSuiter Brown) & PostmasterGeneral(WalterSuiter Brown))", "(AmericanPoliticianAndLawyer(WalterSueder Brown) & PostmasterGeneral(WalterSueder Brown))", "all x.((AmericanPolitician(x) & Lawyer(x) & PostmasterGeneral(x)) -> WalterSuiterBrown(x))", "All x.((Politician(x) & Lawyer(x) & PostmasterGeneral(x)) -> WalterSuiterBrown(x))", "Walter Folger Brown (AmericanPoliticianAndLawyer(Walter)) & PostmasterGeneral(Walter))", "(AmericanPoliticianAndLawyer(WalterSuspensionBrown) & PostmasterGeneral(WalterSuspensionBrown))", "(AmericanPolitician(WalterSuiterBrown) & Lawyer(WalterSuiterBrown) & PostmasterGeneral(WalterSuiter Brown))", "(AmericanPolitician(WalterSuiterBrown) & Lawyer(WalterSuiter Brown) & PostmasterGeneral(WalterSuiter Brown))", "Walter Folger Brown (AmericanPolitician(Walter) & Lawyer(Walter) & PostmasterGeneral(Walter))", "all x.((Politician(x) & Lawyer(x) & PostmasterGeneral(x)) -> WalterSueder Brown(x))", "(AmericanPoliticianAndLawyer(WalterSuederrBrown) & PostmasterGeneral(WalterSuederrBrown))"]}
{"id": "folio_train_1270", "nl": "Walter Folger Brown graduated from Harvard University with a Bachelors of Arts.", "fol": "(GraduatedFrom(Walterbrown,Harvard) & ObtainedDegree(Walterbrown,Bachelorsofarts))", "prediction": ["all x.((WalterSuiterBrown(x) & HarvardUniversity(x)) -> BachelorsOfArts(x))", "(BachelorsOfArts(WalterSuiterBrown) & GraduatedFromHarvardUniversity(WalterSuiterBrown))", "Walter Folger Brown graduated from Harvard University with BachelorsOfArts.", "all x.((WalterSuiterBrown(x) & HarvardUniversityBachelorsOfArts(x)) -> Graduated(x))", "(BachelorsOfArts(WalterSuspensionBrown) & GraduatedFromHarvardUniversity(WalterSuspensionBrown))", "Walter Folger Brown graduated from Harvard University with BachelorsOfArts(Walter)", "(BachelorsOfArts(WalterSuspensionBrown) -> GraduatedFromHarvardUniversity(WalterSuspensionBrown))", "all x.((WalterSuiterBrown(x) & HarvardUniversity(x) & BachelorsOfArts(x)) -> Graduated(x))", "all x.((WalterSuiterBrown(x) & HarvardUniversityBachelorsOfArts(x)) -> GraduatedFrom(x,y))", "all x.((WalterSuiterBrown(x) & HarvardUniversity(y)) -> BachelorsOfArts(x,y))", "(BachelorsOfArts(WalterSuiterBrown) & HarvardUniversity(WalterSuiterBrown))", "Walter Folger Brown graduated from Harvard University with BachelorsOfArts (BachelorsOfArts))", "Walter Folger Brown graduated with BachelorsOfArts(Walter,Harvard)", "Walter Folger Brown GraduatedFromHarvardUniversityWithBachelorsOfArts(Walter,BachelorsOfArts))", "Walter Folger Brown graduated with BachelorsOfArts(Walter,Harvard,Harvard))", "(BachelorsOfArts(WalterSuiterBrown) & GraduatedFromHarvard(WalterSuiterBrown))"]}
{"id": "folio_train_1271", "nl": "While they were both in Toledo, Walter Folger Brown's father practiced law with Walter Folger Brown.", "fol": "(LocatedIn(Walterbrown,Toledo) & LocatedIn(Walterfather,Toledo) & PracticedLawTogether(Walterfather,Walterbrown))", "prediction": ["all x.((Toledo(x) & WalterFernando(x)) -> (PracticedLawWith(x,WalterFernando) & WalterFernando(x,WalterFernando)))", "all x.((Toledo(x) & WalterFernando(x)) -> (PracticedLawWith(x,WalterFernando) | PracticedLawWith(x,WalterFernando)))", "all x y.((Toledo(x) & WalterSuederBrown(y)) -> (PracticedLawWith(y,x) & WalterSuederBrown(y,x)))", "all x y.((Toledo(x) & WalterSuederBrown(y)) -> (PracticedLawWith(y,x) & WalterSuederBrown(y)))", "(exists x.(WalterFernando(x) & InToledo(x)) & WalterFernando(x)) & WalterFernando(x) & PracticesLawWith(x,WalterFernando))", "all x.((Toledo(x) & WalterFernando(x)) -> (PracticedLawWith(x,WalterFernando) & WalterFernando(x)))", "all x.((WalterFernando(x) & InToledo(x)) -> PracticedLawWith(x,WalterFernando))", "(exists x.(WalterFernando(x) & InToledo(x)) & WalterFernando(x) & WalterFernando(x)) & PracticesLawWith(x,WalterFernando))", "(exists x.(WalterFernando(x) & InToledo(x)) & WalterFernando(x) & PracticesLawWith(x,WalterFernando)))", "all x y.((Toledo(x) & WalterSuederBrown(y)) -> (PracticedLaw(y,x) & WalterSuederBrown(y,x)))", "all x y.((Toledo(x) & WalterFernand(y)) -> (PracticedLawWith(y,x) & WalterFernand(y,x)))", "all x y.((Toledo(x) & WalterFernando(y)) -> (PracticedLawWith(y,x) & WalterFernando(y,x)))", "(exists x.(Toledo(x) & WalterFernando(x)) & WalterFernando(x)) & WalterFernando(x) & WalterFernando(x))", "(exists x.(WalterFernando(x) & InToledo(x)) & WalterFernando(x) & WalterFernando(x)) & WalterFernando(x))", "all x.((Toledo(x) & WalterFernando(x)) -> PracticedLawWith(x,WalterFernando))", "all x y.((Father(x) & WalterFernand(y) & InToledo(x,y)) -> PracticedLawWith(x,y))"]}
{"id": "folio_train_1272", "nl": "Katherin Hafer married Walter Folger Brown.", "fol": "MarriedTo(Ketherinhafer,Walterbrown)", "prediction": ["(Married(KatherinHafer) & WalterSuederBrown(KatherinHafer))", "(Married(KatherinHafer) & WalterSueder Brown(KatherinHafer))", "(Married(KatherinHafer,WalterSuiterBrown))", "(Married(KathererinHafer) & WalterSueder Brown(KatherinHafer))", "(Married(KatherinHafer,WalterSueder Brown))", "(Married(KatherinHafer,WalterSuederBrown))", "(Married(KatherHafer,WalterSuiterBrown))", "Katherin Hafer married Walter Folger Brown.", "KatherinHafer Married(KatherinHafer,WalterSueder Brown)", "(Married(KathererinHafer,WalterSueder Brown))", "KatherinHaferMarried(KatherinHafer,WalterSueder Brown)", "(Married(KatherHafer,WalterSueder Brown))", "(Married(KatherHafer,WalterSuederBrown))", "KatherinHafer Married(KatherinHafer,WalterSuederBrown)", "(Married(KatherineHafer,WalterSueder Brown))", "KatherinHaferMarried(KatherinHafer,WalterSuederBrown)"]}
{"id": "folio_train_1273", "nl": "Walter Folger Brown graduated with a Bachelors of Arts.", "fol": "ObtainedDegree(Walterbrown,Bachelorsofarts)", "prediction": ["all x.((WalterSuiterBrown(x) & BachelorsOfArts(x)) -> Graduated(x))", "all x.((WalterSuederrBrown(x) & BachelorsOfArts(x)) -> Graduated(x))", "all x.((WalterSuiterBrown(x) & BachelorsOfArts(x)) -> GraduatedWith(x,BachelorsOfArts))", "all x.((WalterSuederrBrown(x) & BachelorsOfArts(x)) -> GraduatedWith(x,BachelorsOfArts))", "all x.((WalterSuiterBrown(x) & BachelorsOfArts(x)) -> Graduates(x))", "all x.((WalterSuiterBrown(x) & BachelorsOfArts(x)) -> GraduatedWith(x,y))", "all x.((WalterSuederrBrown(x) & BachelorsOfArts(x)) -> Graduates(x))", "all x.((BachelorsOfArts(x) & WalterSuiterBrown(x)) -> GraduatedWith(x,BachelorsOfArts))", "all x.((WalterSuederrBrown(x) & BachelorsOfArts(x)) -> GraduatedWith(x,y))", "all x.((WalterSuiterBrown(x) & BachelorsOfArts(x)) -> GraduatedWith(x,BachelorsOfArts))", "all x.((WalterSuiterBrown(x) & BachelorsOfArts(x)) -> Graduated(x))", "all x.((WalterSuiterBrown(x) & BachelorsOfArts(x)) -> GraduatedWith(x,WalterSuiterBrown))", "all x.((WalterSuederrBrown(x) & BachelorsOfArts(x)) -> GraduatedWith(x,BachelorsOfArts))", "all x.((WalterSuederrBrown(x) & BachelorsOfArts(x)) -> GraduatesWith(x,BachelorsOfArts))", "all x.((WalterSuederrBrown(x) & BachelorsOfArts(x)) -> Graduated(x))", "all x.((WalterSuederrBrown(x) & BachelorsOfArts(x)) -> GraduatedWith(x,WalterSuederrBrown))"]}
{"id": "folio_train_1274", "nl": "Walter Folger Brown's father was in Toledo.", "fol": "LocatedIn(Walterfather,Toledo)", "prediction": ["Walter Folger Brown's father was in Toledo.", "All x y.((WalterSuiterBrown(x) & Father(y)) -> WasInToloma(x,y))", "All x y.((WalterSuiterBrown(x) & Father(y)) -> WasInToledo(x,y))", "All x y.((WalterSuiterBrown(x) & Father(y)) -> WasInToronto(x,y))", "All x y.((WalterSuiterBrown(x) & Father(y)) -> WasInTolo(x,y))", "All x y.((WalterSuiterBrown(x) & Father(y)) -> WasInToloda(x,y))", "All x y.((WalterSuiterBrown(x) & Father(y)) -> WasInToledo(x))", "All x y.((WalterSuiterBrown(x) & Father(y)) -> InToloma(x,y))", "All x y.((WalterSuiterBrown(x) & Father(y)) -> WasInToronto(x))", "All x y.((WalterSuiterBrown(x) & Father(y)) -> WasInToloma(x))", "All x y.((WalterSuiterBrown(x) & Dad(y)) -> WasInToloma(x,y))", "All x y.((WalterSuiterBrown(x) & Father(y)) -> InTolo(x,y))", "All x y.((WalterSuiterBrown(x) & Father(y)) -> InToledo(x,y))", "All x y.((WalterSuiterBrown(x) & Father(y)) -> WasInTolles(x,y))", "All x y.((WalterSuiterBrown(x) & Father(y)) -> InToledo(x))", "All x y.((WalterSuiterBrown(x) & Father(y)) -> WasIn(x,Toloda))"]}
{"id": "folio_train_1275", "nl": "Walter Folger Brown was not in Toledo.", "fol": "-LocatedIn(Walterbrown,Toledo)", "prediction": ["Walter Folger Brown -(InToloma(Walter) & InToloma(Walter)))", "Walter Folger Brown -(InToloma(Walter) | InToloma(Walter)))", "Walter Folger Brown -(InToloma(w) | InToloma(w)))", "Walter Folger Brown -InTolo(Walter,Tolo(Walter) & -InTolo(Walter,Tolo(Walter,Tolo))", "Walter Folger Brown -(InToloma(Walter) & -InToloma(Walter))", "Walter Folger Brown -InTolo(Walter,Tolo(Walter) & -InTolo(Walter,Tolo))", "Walter Folger Brown -(InToloma(Walter) & InToloma(Walter))", "Walter Folger Brown -InTolo(Walter,Tolo(Walter) & -InTolo(Walter,Tolo(Walter))", "Walter Folger Brown -(InToloma(Walter) & InToloma(Walter) & InToloma(Walter)))", "Walter Folger Brown -InToloma.", "Walter Folger Brown -InTolo(Walter,Tolo(Walter,Tolo) & -InTolo(Walter,Tolo))", "Walter Folger Brown -InTolo(Walter,Tolo(Walter,Tolo(Walter) & -InTolo(Walter,Tolo))", "Walter Folger Brown -(InToloma(Walter) & Brown(Walter)))", "Walter Folger Brown -InTolo(w)", "Walter Folger Brown -InToloma(Walter,Second) & -InToloma(Walter,Second))", "Walter Folger Brown -InToloma(w)"]}
{"id": "folio_train_1276", "nl": "All products shipped from China are made in China. ", "fol": "all x.(ShippedFromChina(x) -> ManufacturedInChina(x))", "prediction": ["all x.((Product(x) & ShippedFromChina(x)) -> MadeInChina(x))", "all x y.((Product(x) & ShippedFromChina(x,y)) -> MadeInChina(x))", "all x y.((Product(x) & ShippedFromChina(x)) -> MadeInChina(x))", "all x y.((Product(x) & ShippedFromChina(x,y)) -> MadeInChina(y))", "all x y.((Product(x) & ShippedFromChina(x)) -> MadeInChina(y))", "all x y.((Product(x) & ShippedFromChina(x) & MadeInChina(y)) -> ShippedFromChina(x))", "all x.(ShippedFromChina(x) -> MadeInChina(x))", "all x.(ShippedFromChina(x) -> MadeInChina(x))", "all x.(Shipping(x) -> MadeInChina(x))", "all x y.((Product(x) & ShippedFromChina(x,y)) -> MadeInChina(x,y))", "all x y.((Product(x) & ShippedFromChina(x) & MadeInChina(y)) -> ShippedFromChina(x,y))", "all x y.((Product(x) & ShippedFrom(x,y)) -> MadeInChina(x))", "all x.((Product(x) & ShippedFromChina(x)) -> MadeInChinese(x))", "all x y.((Product(x) & ShippedFromChina(x)) -> MadeInChina(x,y))", "all x y z.((Product(x) & ShippedFromChina(x,y) & China(z)) -> MadeIn(x,z))", "all x.((Product(x) & ShippedFrom(x,China)) -> MadeInChina(x))"]}
{"id": "folio_train_1277", "nl": "All products sold in JD are shipped from China. ", "fol": "all x.(AvailableInJD(x) -> ShippedFromChina(x))", "prediction": ["all x.((Product(x) & SoldInJD(x)) -> ShippedFromChina(x))", "all x.(SoldInJD(x) -> ShippedFromChina(x))", "all x.(JD(x) -> ShippedFromChina(x))", "all x.((Product(x) & SoldInJD)) -> ShippedFromChina(x))", "all x.((Product(x) & SoldInJD(x)) -> ShippedFromChina(x))", "all x y.((Product(x) & SoldInJD(x) & China(y)) -> ShippedFrom(x,y))", "all x.((Product(x) & SoldInJD(x)) -> ShipsFromChina(x))", "all x.((Product(x) & SellsInJD(x)) -> ShippedFromChina(x))", "all x y.((Product(x) & SoldInJD(x)) -> ShippedFromChina(x))", "all x y z.((Product(x) & JD(y) & China(z)) -> ShippedFrom(x,y,z))", "all x y.((Product(x) & JD(y)) -> ShippedFromChina(x,y))", "all x y.((Product(x) & JD(y)) -> ShippedFrom(x,y))", "all x.((Product(x) & SoldInJD(x)) -> ShippedFrom(x,China))", "all x y.((Product(x) & SoldInJD(x)) -> ShippedFromChina(y))", "all x y.((Product(x) & JD(y) & SoldIn(x,y)) -> ShippedFromChina(x))", "all x y.((Product(x) & SoldInJD(x,y)) -> ShippedFromChina(x))"]}
{"id": "folio_train_1278", "nl": "All products commonly used in China are sold in JD.", "fol": "all x.(WidelyUsedInChina(x) -> AvailableInJD(x))", "prediction": ["all x.((Product(x) & CommonlyUsedInChina(x)) -> SoldInJD(x))", "all x.((Product(x) & UsedInChina(x)) -> SoldInJD(x))", "all x.((Product(x) & CommonlyUsedIn(x,China)) -> SoldInJD(x))", "all x.((Product(x) & CommonUsedInChina(x)) -> SoldInJD(x))", "all x.((Product(x) & CommonlyUsedIn(x,Chinese)) -> SoldInJD(x))", "all x.((Product(x) & FrequentlyUsedInChina(x)) -> SoldInJD(x))", "all x.((Product(x) & CommonlyUsedInChinese(x)) -> SoldInJD(x))", "all x.((Product(x) & CommonUseInChina(x)) -> SoldInJD(x))", "all x.((Product(x) & CommonInChina(x)) -> SoldInJD(x))", "all x y.((Product(x) & CommonlyUsedInChina(x,y)) -> SoldInJD(x))", "all x.((Product(x) & OftenUsedInChina(x)) -> SoldInJD(x))", "all x.((Product(x) & TypicallyUsedInChina(x)) -> SoldInJD(x))", "all x.((Product(x) & CommonlyUsedInChina(x)) -> SellsInJD(x))", "all x.((Product(x) & CommonlyUsedInChina(x)) -> SoldInJD(x))", "all x.((Product(x) & GenerallyUsedInChina(x)) -> SoldInJD(x))", "all x.((Product(x) & CommonlyUsedInChina(x)) -> SoldInJD.(x))"]}
{"id": "folio_train_1279", "nl": "All products favored by young people are commonly used in China. ", "fol": "all x.(PopularAmongYouth(x) -> WidelyUsedInChina(x))", "prediction": ["all x.((Product(x) & FavoredByYoungPeople(x)) -> CommonlyUsedInChina(x))", "all x y.((Product(x) & FavoredByYoungPeople(x)) -> CommonlyUsedInChina(y))", "all x.((Product(x) & FavoredByYoung(x)) -> CommonlyUsedInChina(x))", "all x y.((Product(x) & YoungPerson(y) & FavoredBy(x,y)) -> CommonlyUsedInChina(x))", "all x y.((Product(x) & FavoredByYoungPeople(x)) -> CommonlyUsedInChina(x))", "all x y.((Product(x) & YoungPeople(y) & FavoredBy(x,y)) -> CommonlyUsedInChina(x))", "all x y.((Product(x) & FavoredByYoungPeople(x) & China(y)) -> CommonlyUsedIn(x,y))", "all x.(Product(x) & FavoredByYoungPeople(x)) -> CommonlyUsedInChina(x))", "all x y.((Product(x) & FavoredByYoungPeople(x) & China(y)) -> CommonlyUsed(x,y))", "all x.((Product(x) & FavoredByYearlyPeople(x)) -> CommonlyUsedInChina(x))", "all x.((Product(x) & FavoredByYoungPeople(x)) -> UsedInChina(x))", "all x.(Product(x) & FavoredByYoungPeople(x) -> CommonlyUsedInChina(x))", "all x.((Product(x) & FavoredByYoungPerson(x)) -> CommonlyUsedInChina(x))", "all x.((Product(x) & FavoredByYoungPeople(x)) -> CommonlyUsed(x))", "all x y.((Product(x) & FavoredByYoungPeople(x,y)) -> CommonlyUsedInChina(x))", "all x.((Product(x) & FavoredByYoungPeople(x)) -> CommonlyUsedInChinese(x))"]}
{"id": "folio_train_1280", "nl": "MacBook is not made in China and is not commonly used in China.", "fol": "-(ManufacturedInChina(Macbook) & WidelyUsedInChina(Macbook))", "prediction": ["all x.(MacBook(x) -> (-MadeInChina(x) & -CommonUseInChina(x)))", "(-MadeInChina(MacBook) & -CommonlyUsedInChina(MacBook))", "all x.(Macbook(x) -> (-MadeInChina(x) & -CommonUseInChina(x)))", "all x.(MacBook(x) -> (-MadeInChina(x) & -CommonlyUsedInChina(x)))", "all x.(Macbook(x) -> (-MadeInChina(x) & -CommonlyUsedInChina(x)))", "(-MadeInChina(MacBook) & -CommonUseInChina(MacBook))", "(-MadeInChina(Macbook) & -CommonlyUsedInChina(Macbook))", "(-MadeInChina(Macbook) & -CommonUseInChina(Macbook))", "(-MadeInChina(MacBook) & -ConsumedInChina(MacBook))", "(-MadeInChina(Macbook) & -ConsumedInChina(Macbook))", "all x.(MacBook(x) -> (-MadeInChina(x) & -ConsumedInChina(x)))", "all x.(Macbook(x) -> (-MadeInChina(x) & -ConsumedInChina(x)))", "all x.(MacBook(x) -> (-MadeInChina(x) & -CommonUse(x)))", "all x.(Macbook(x) -> (-MadeInChina(x) & -CommonUse(x)))", "(-MadeInChina(MacBook) & -CommonUseInChina(Macbook))", "(-MadeInChina(MacBook) & -CommonUse(MacBook))"]}
{"id": "folio_train_1281", "nl": "The MacBook is favored by young people.", "fol": "PopularAmongYouth(Macbook)", "prediction": ["all x.(Macbook(x) -> FavoredByYoungPeople(x))", "all x.(MacBook(x) -> FavoredByYoungPeople(x))", "all x y.((Macbook(x) & Young(y)) -> FavoredBy(x,y))", "all x y.((Macbook(x) & YoungPerson(y)) -> FavoredBy(x,y))", "all x y.((Macbook(x) & YoungPeople(y)) -> FavoredBy(x,y))", "all x.(Macbook(x) -> FavoriteByYoungPeople(x))", "all x.(MacBook(x) -> FavoriteByYoungPeople(x))", "all x y.((MacBook(x) & YoungPerson(y)) -> FavoredBy(x,y))", "all x y.((Macbook(x) & YoungPeople(y)) -> Favorite(x,y))", "all x y.((MacBook(x) & Young(y)) -> FavoredBy(x,y))", "all x.(MachineBook(x) -> FavoredByYoungPeople(x))", "all x y.((MacBook(x) & YoungPeople(y)) -> FavoredBy(x,y))", "all x y.((Macbook(x) & YoungPerson(y)) -> Favorite(x,y))", "all x y.((MacBook(x) & YoungPeople(y)) -> Favorite(x,y))", "all x y.((MacBook(x) & YoungPerson(y)) -> Favorite(x,y))", "all x y.((Macbook(x) & Young(y)) -> Favorite(x,y))"]}
{"id": "folio_train_1282", "nl": "The MacBook is made in China.", "fol": "ManufacturedInChina(Macbook)", "prediction": ["all x.(MacBook(x) -> MadeInChina(x))", "all x.(Macbook(x) -> MadeInChina(x))", "All x.(Macbook(x) -> MadeInChina(x))", "All x.(MacBook(x) -> MadeInChina(x))", "(MadeInChina(Macbook) & MadeInChina(Macbook))", "(MadeInChina(Macbook) -> MadeInChina(Macbook))", "(MadeInChina(MacBook) & MadeInChina(MacBook))", "(MadeInChina(MacBook) & MadeInChina(Macbook))", "(MadeIn(Macbook) & MadeIn(Macbook))", "(MadeIn(Macbook) & MadeIn(Macbook,China))", "(MadeIn(MacBook) & MadeIn(Macbook))", "all x.(MacBook(x) -> MadeIn(x,China))", "all x.(Macbook(x) -> MadeIn(x,China))", "(MadeIn(MacBook) & MadeIn(Macbook,China))", "All x.(MacBook(x) -> MadeIn(x,China))", "(MadeInChina(MacBook))"]}
{"id": "folio_train_1283", "nl": "The MacBook is favored by young people and commonly used in China.", "fol": "(PopularAmongYouth(Macbook) & WidelyUsedInChina(Macbook))", "prediction": ["all x.(Macbook(x) -> (FavoriteByYoungPeople(x) & CommonlyUsedInChina(x)))", "all x.(MacBook(x) -> (FavoriteByYoungPeople(x) & CommonlyUsedInChina(x)))", "all x.(Macbook(x) -> (PreferredByYoungPeople(x) & CommonlyUsedInChina(x)))", "all x.(MacBook(x) -> (PreferredByYoungPeople(x) & CommonlyUsedInChina(x)))", "all x y.((Macbook(x) & YoungPeople(y)) -> (Favorite(x,y) & CommonlyUsedInChina(x)))", "all x.(Macbook(x) -> (favoredByYoungPeople(x) & CommonlyUsedInChina(x)))", "all x.(Macbook(x) -> (FavoriteForYoungPeople(x) & CommonlyUsedInChina(x)))", "all x.(MacBook(x) -> (favoredByYoungPeople(x) & CommonlyUsedInChina(x)))", "all x y.((Macbook(x) & YoungPerson(y)) -> (Favorite(x,y) & CommonlyUsedInChina(x)))", "all x y z.((Macbook(x) & YoungPerson(y) & China(z)) -> (Favorite(x,y) & CommonlyUsed(x,z)))", "all x y.((Macbook(x) & YoungPeople(y)) -> (Favorite(x,y) & CommonlyUsedInChina(x,y)))", "all x y.((MacBook(x) & YoungPeople(y)) -> (Favorite(x,y) & CommonlyUsedInChina(x)))", "all x y.((Macbook(x) & YoungPeople(y)) -> (Favorite(x,y) & CommonlyUsedIn(x,China)))", "all x.(Macbook(x) -> (FavoriteByYoungPeople(x) & CommonlyUsedInChinese(x)))", "all x y.((Macbook(x) & YoungPerson(y)) -> (Favorite(x,y) & CommonlyUsedInChina(x,y)))", "all x y.((MacBook(x) & YoungPerson(y)) -> (Favorite(x,y) & CommonlyUsedInChina(x)))"]}
{"id": "folio_train_1284", "nl": "The MacBook is either favored by young people or commonly used in China.", "fol": "(PopularAmongYouth(Macbook) | WidelyUsedInChina(Macbook))", "prediction": ["all x.(Macbook(x) -> (FavoriteByYoungPeople(x) | CommonlyUsedInChina(x)))", "all x.(MacBook(x) -> (FavoriteByYoungPeople(x) | CommonlyUsedInChina(x)))", "all x.(Macbook(x) -> (FavouredByYoungPeople(x) | CommonlyUsedInChina(x)))", "all x.(Macbook(x) -> (FavoriteByYoung(x) | CommonlyUsedInChina(x)))", "all x.(Macbook(x) -> (FavoriteForYoungPeople(x) | CommonlyUsedInChina(x)))", "all x.(Macbook(x) -> (favoredByYoungPeople(x) | CommonlyUsedInChina(x)))", "all x.(MacBook(x) -> (FavouredByYoungPeople(x) | CommonlyUsedInChina(x)))", "all x.(Macbook(x) -> (PreferredByYoungPeople(x) | CommonlyUsedInChina(x)))", "all x.(MacBook(x) -> (FavoriteForYoungPeople(x) | CommonlyUsedInChina(x)))", "all x y.((Macbook(x) & YoungPeople(y)) -> (Favorite(x,y) | CommonlyUsedInChina(x,y)))", "all x.(MacBook(x) -> (FavoriteByYoung(x) | CommonlyUsedInChina(x)))", "all x.(MacBook(x) -> (favoredByYoungPeople(x) | CommonlyUsedInChina(x)))", "all x.(Macbook(x) -> (FavoriteByYoungPeople(x) | CommonlyUsedInChinese(x)))", "all x.(Macbook(x) -> (Favorite(x) & YoungPeople(x) | CommonlyUsedInChina(x)))", "all x y.((Macbook(x) & YoungPeople(y)) -> (Favorite(x,y) | CommonlyUsed(x,y)))", "all x.(MacBook(x) -> (Favorite(x) & YoungPeople(x) | CommonlyUsedInChina(x)))"]}
{"id": "folio_train_1285", "nl": "If the MacBook is favored by young people and commonly used in China, then it is neither favored by young people nor made in China.", "fol": "((PopularAmongYouth(Macbook) & WidelyUsedInChina(Macbook)) -> (-PopularAmongYouth(Macbook) & -ManufacturedInChina(Macbook)))", "prediction": ["all x.((Macbook(x) & FavoredByYoungPeople(x) & CommonlyUsedInChina(x)) -> -(FavouredByYoungPeople(x) | MadeInChina(x)))", "all x.((Macbook(x) & FavoredByYoungPeople(x) & CommonlyUsedInChina(x)) -> (-FavouredByYoungPeople(x) & -MadeInChina(x)))", "all x.((Macbook(x) & FavoredByYoungPeople(x) & CommonlyUsedInChina(x)) -> (-FavoredByYoungPeople(x) & -MadeInChina(x)))", "all x.((MacBook(x) & FavoredByYoungPeople(x) & CommonlyUsedInChina(x)) -> -(FavouredByYoungPeople(x) | MadeInChina(x)))", "all x.((MacBook(x) & FavoredByYoungPeople(x) & CommonlyUsedInChina(x)) -> (-FavouredByYoungPeople(x) & -MadeInChina(x)))", "all x.((Macbook(x) & FavoredByYoungPeople(x) & CommonlyUsedInChina(x)) -> -(FavoredByYoungPeople(x) | MadeInChina(x)))", "all x.((MacBook(x) & FavoredByYoungPeople(x) & CommonlyUsedInChina(x)) -> (-FavoredByYoungPeople(x) & -MadeInChina(x)))", "all x.((MacBook(x) & FavoredByYoungPeople(x) & CommonlyUsedInChina(x)) -> -(FavoredByYoungPeople(x) | MadeInChina(x)))", "all x.((Macbook(x) & FavoredByYoungPeople(x) & CommonlyUsedInChina(x)) -> -FavoredByYoungPeople(x) & -MadeInChina(x))", "all x.((Macbook(x) & FavoredByYoungPeople(x) & CommonlyUsedInChina(x)) -> -FavouredByYoungPeople(x) & -MadeInChina(x))", "all x.((Macbook(x) & FavoredByYoungPeople(x) & CommonlyUsedInChina(x)) -> -(FriendedByYoungPeople(x) | MadeInChina(x)))", "all x.((MacBook(x) & FavoredByYoungPeople(x) & CommonlyUsedInChina(x)) -> -FavoredByYoungPeople(x) & -MadeInChina(x))", "all x.((MacBook(x) & FavoredByYoungPeople(x) & CommonlyUsedInChina(x)) -> -FavouredByYoungPeople(x) & -MadeInChina(x))", "all x.((MacBook(x) & FavoredByYoungPeople(x) & CommonlyUsedInChina(x)) -> -(FriendedByYoungPeople(x) | MadeInChina(x)))", "all x.((Macbook(x) & FavoredByYoungPeople(x) & CommonlyUsedInChina(x)) -> (-FavorableByYoungPeople(x) & -MadeInChina(x)))", "all x.((Macbook(x) & FavoredByYoungPeople(x) & CommonlyUsedInChina(x)) -> -(FavouredByYoungPeople(x) & MadeInChina(x)))"]}
{"id": "folio_train_1286", "nl": "Oxford Circus is a road junction connecting Oxford Street and Regent Street.", "fol": "(IsOxfordStreet(OxfordCircus) & IsRegentStreet(OxfordCircus))", "prediction": ["all x.(OxfordCircle(x) -> (RoadJunction(x) & ConnectsOxfordStreet(x) & ConnectsRegentStreet(x)))", "all x.(OxfordCircle(x) -> (RoadJunction(x) & ConnectsOxfordStreetWithRegentStreet(x)))", "all x.(OxfordCircle(x) -> (RoadJigway(x) & ConnectsOxfordStreet(x) & ConnectsRegentStreet(x)))", "all x.(OxfordCircle(x) -> (RoadJunction(x) & ConnectsOxfordStreetAndRegentStreet(x)))", "all x y z.((OxfordCircle(x) & OxfordStreet(y) & RegentStreet(z)) -> RoadJunction(x,y,z))", "all x.(OxfordCircle(x) -> (RoadJunction(x) & ConnectsOxfordStreet(x) & ConnectsRegentStreet(x)))", "all x.(OxfordCircle(x) -> (RoadJunction(x) & ConnectsOxfordStreetToRegentStreet(x)))", "all x.((OxfordCircle(x) & OxfordStreet(x) & RegentStreet(x)) -> RoadJunction(x))", "all x.(OxfordCircle(x) -> (RoadJunction(x) & ConnectsOxfordStructure(x) & ConnectsRegentStructure(x)))", "all x.(OxfordCircle(x) -> (ConnectsOxfordStreet(x) & ConnectsRegentStreet(x)))", "all x.((RoadJunction(x) & OxfordStreet(x) & RegentStreet(x)) -> OxfordCircle(x))", "all x y.((OxfordCircle(x) & OxfordStreet(y) & RegentStreet(y)) -> RoadJunction(x,y))", "all x y.((OxfordCircle(x) & OxfordStreet(y)) -> RoadJunction(x,y))", "all x.(OxfordCircle(x) -> (RoadJunction(x) & ConnectsOxfordStandAndRegentStreet(x)))", "all x.(OxfordCircle(x) -> (RoadJunction(x) & ConnectsOxfordStandAndRegentStand(x)))", "all x y.((OxfordCircle(x) & OxfordStreet(y) & RegentStreet(z)) -> RoadJunction(x,y,z))"]}
{"id": "folio_train_1287", "nl": "Oxford Street is in London.", "fol": "all x.(IsOxfordStreet(x) -> IsInLondon(x))", "prediction": ["all x.(OxfordStreet(x) -> InLondon(x))", "all x.(OxfordStreet(x) -> London(x))", "all x y.((OxfordStreet(x) & London(y)) -> In(x,y))", "all x.(OxfordStreet(x) -> LondonStreet(x))", "all x y.((OxfordStreet(x) & LondonStreet(y)) -> InLondon(x,y))", "all x y.((OxfordStreet(x) & London(y)) -> IsIn(x,y))", "all x y.((OxfordStreet(x) & LondonStreet(y)) -> In(x,y))", "all x.(OxfordStandard(x) -> InLondon(x))", "all x y.((OxfordStreet(x) & London(y)) -> InLondon(x,y))", "all x y.((OxfordStreet(x) & London(y)) -> LocatedIn(x,y))", "all x.(OxfordStreet(x) -> InLondon(x))", "all x y.((OxfordStreet(x) & London(y)) -> InLondon(x,y))", "all x.(OxfordStandard(x) -> London(x))", "all x y.((OxfordStreet(x) & London(y)) -> InLondon(x))", "all x y.((OxfordStandard(x) & London(y)) -> In(x,y))", "exists x.(OxfordStreet(x) & InLondon(x))"]}
{"id": "folio_train_1288", "nl": "John Nash designed the construction on Regent Street.", "fol": "exists x.(IsRegentStreet(x) & DesignedBy(JohnNash,x))", "prediction": ["John Nash designed the construction on Regent Street.", "John Nash designed the construction on RegentStreet.", "all x y.((JohnNash(x) & RegentStreet(y)) -> Designed(x,y))", "all x y.((JohnNash(x) & RegentStreet(y)) -> DesignedConstruction(x,y))", "all x y.((JohnNash(x) & RegentStreet(y)) -> DesignsConstruction(x,y))", "all x y.((JohnNash(x) & RegentStreet(y)) -> Designs(x,y))", "all x y.((JohnNash(x) & RegentStreet(y)) -> DesignedOn(x,y))", "(DesignedByJohnNash(JohnNash) & RegentStreet(JohnNash))", "all x y.((JohnNash(x) & RegentStreet(y)) -> DesignatedConstruction(x,y))", "all x y.((JohnNash(x) & RegentStreet(y)) -> DesignedBy(x,y))", "all x y.((JohnNash(x) & RegentStreet(y)) -> Design(x,y))", "all x y.((JohnNash(x) & RegentStreet(y)) -> DesignedConstruction(x,y))", "all x y.((JohnNash(x) & RegentStreet(y)) -> Designed(x,y))", "all x y.((JohnNash(x) & RegentStreet(y)) -> Designated(x,y))", "(DesignedByJohnNash(JohnNash) & RegentStreetConstruction(JohnNash))", "all x y.((JohnNash(x) & RegentSt.(y)) -> Designed(x,y))"]}
{"id": "folio_train_1289", "nl": "John Nash designed Oxford Circus.", "fol": "DesignedBy(JohnNash,OxfordCircus)", "prediction": ["John Nash designed OxfordCircle(JohnNash)", "John Nash designed OxfordCircle.", "John Nash designed OxfordCircle(John)", "All x.(JohnNash(x) -> DesignedOxfordCircle(x))", "(DesignedOxfordCircle(JohnNash) & DesignedOxfordCircle(JohnNash))", "John Nash designed OxfordCircle(JohnNash,Oxford)", "John Nash designed OxfordCircle(JohnNash,OxfordCircle)", "All x.(JohnNash(x) -> DesignsOxfordCircle(x))", "John Nash designed OxfordCircle(JohnNash)", "John Nash designed OxfordCircle(John,Nash)", "John Nash DesignedOxfordCircle(JohnNash)", "DesignedOxfordCircle(JohnNash)", "John Nash designed OxfordCircle(Johnny)", "John Nash designed OxfordCircle(Johnnash)", "(DesignsOxfordCircle(JohnNash) -> DesignsOxfordCircle(JohnNash))", "(DesignedOxfordCircle(JohnNash) & JohnNash(JohnNash))"]}
{"id": "folio_train_1290", "nl": "John Nash is an architect in British.", "fol": "(IsBritish(JohnNash) & IsArchitect(JohnNash))", "prediction": ["John Nash (Architect(John) & InBritish(John))", "John Nash (Architect(John) & British(John))", "John Nash (Architect(x) & InBritish(x))", "(Architect(JohnNash) & British(JohnNash))", "(Architect(JohnNash) & InBritish(JohnNash))", "John Nash (Architect(x) & British(x))", "John Nash is an architect in British.", "John Nash (Architect(John) & LocatedInBritish(John))", "John Nash (Architect(John) & InBritish(John,British))", "John Nash (Architect(John) & LocatedInBritish(John,British))", "John Nash (ArchitectInBritish(JohnNash))", "(Architect(JohnNash) & British(JohnNash))", "John Nash (Architect) & LocatedInBritish(JohnNash,British))", "(Architect(JohnNash) & InBritish(JohnNash,British))", "John Nash (Architect) & BasedInBritish(JohnNash,British))", "John Nash (Architect) & InBritish(JohnNash,British))"]}
{"id": "folio_train_1291", "nl": "Oxford Circus is the entrance to Oxford Circus tube station which is a part of the Central line in 1900.", "fol": "IsCentralLine(OxfordCircus)", "prediction": ["all x y.((OxfordCircle(x) & TubeStation(y) & CentralLine(y)) -> Entrance(x,y))", "all x y.((OxfordCircle(x) & TubeStation(y) & CentralLine(y)) -> EntranceTo(x,y))", "all x y.((OxfordCircle(x) & TubeStation(y) & CentralLine(y)) -> Enters(x,y))", "all x y.((OxfordCircle(x) & TubeStation(y) & CentralLine(y)) -> EntryTo(x,y))", "all x y z.((OxfordCircle(x) & TubeStation(y) & CentralLine(z)) -> (Entrance(x,y) & PartOf(y,z)))", "all x y z.((OxfordCircle(x) & TubeStation(y) & CentralLine(z)) -> (EntranceTo(x,y) & PartOf(y,z)))", "all x y z.((OxfordCircle(x) & TubeStation(y) & CentralLine(z)) -> Entrance(x,y,z))", "all x.(OxfordCircle(x) -> (EntranceToOxfordCircle(x) & CentralLine(x)))", "all x y.((OxfordCircle(x) & TubeStation(y) & CentralLine(x,y)) -> Entrance(x,y))", "all x.((OxfordCircle(x) & TubeStation(x) & CentralLine(x)) -> Entrance(x))", "all x y.((OxfordCircle(x) & TubeStation(y) & CentralLine(x,y)) -> EntranceTo(x,y))", "all x y z.((OxfordCircle(x) & TubeStation(y) & CentralLine(z)) -> EntranceTo(x,y,z))", "all x y z.((OxfordCircle(x) & TubeStation(y) & CentralLine(z)) -> (Entrance(x,y,z) & PartOf(y,z)))", "all x y z.((OxfordCircle(x) & TubeStation(y) & CentralLine(z)) -> (EntranceTo(x,y,z) & PartOf(y,z)))", "all x.(OxfordCircle(x) -> (EntranceToOxfordCircle(x) & PartOfCentralLine(x) & In1900(x)))", "all x y z.((OxfordCircle(x) & TubeStation(y) & CentralLine(z)) -> (EntranceTo(x,y) & PartOf(x,z)))"]}
{"id": "folio_train_1292", "nl": "Oxford Circus is in London.", "fol": "IsInLondon(OxfordCircus)", "prediction": ["all x.(OxfordCircle(x) -> InLondon(x))", "all x y.((OxfordCircle(x) & London(y)) -> In(x,y))", "all x.(OxfordCircle(x) -> London(x))", "All x.(OxfordCircle(x) -> InLondon(x))", "all x y.((OxfordCircle(x) & London(y)) -> IsIn(x,y))", "all x y.((OxfordCircle(x) & London(y)) -> LocatedIn(x,y))", "all x y.((OxfordCircle(x) & London(y)) -> LivesIn(x,y))", "all x.(OxfordCircle(x) -> InLondon(x))", "exists x.(OxfordCircle(x) & InLondon(x))", "exists x.(OxfordCircle(x) & London(x))", "All x.(OxfordCircle(x) -> London(x))", "all x y.((OxfordCircle(x) & London(y)) -> Is(x,y))", "all x.(OxfordCircle(x) -> IsInLondon(x))", "exists x.(OxfordCircle(x) & In(x,London))", "OxfordCircle(x) -> InLondon(x))", "all x.(OxfordCircle(x) -> In(x,London))"]}
{"id": "folio_train_1293", "nl": "Oxford Circus is designed by a British architect.", "fol": "exists x.(IsBritish(x) & IsArchitect(x) & DesignedBy(x,OxfordCircus))", "prediction": ["all x y.((OxfordCircle(x) & BritishArchitect(y)) -> DesignedBy(x,y))", "all x.(OxfordCircle(x) -> DesignedByBritishArchitect(x))", "all x y z.((OxfordCircle(x) & BritishArchitect(y) & BritishArchitect(z)) -> DesignedBy(x,y,z))", "all x.(OxfordCircle(x) -> (DesignedByBritishArchitect(x) & BritishArchitect(x)))", "all x y z.((OxfordCircle(x) & BritishArchitect(y) & Architect(z)) -> DesignedBy(x,y,z))", "all x y z.((OxfordCircle(x) & BritishArchitect(y) & DesignedBy(x,y)) -> DesignedBy(x,z))", "all x.((OxfordCircle(x) & BritishArchitect(x)) -> DesignedBy(x,y))", "all x.((OxfordCircle(x) & BritishArchitect(x)) -> DesignedBy(x))", "all x.(OxfordCircle(x) -> (DesignedByBritishArchitect(x) & DesignedByBritishArchitect(x)))", "all x.(OxfordCircle(x) -> (DesignedByBritishArchitect(x) | DesignedByBritishArchitect(x)))", "all x y z.((OxfordCircle(x) & BritishArchitect(y) & BritishArchitect(z)) -> DesignedBy(x,y))", "all x y z.((OxfordCircle(x) & BritishArchitect(y) & DesignedBy(x,y)) -> BritishArchitect(z))", "all x y.((OxfordCircle(x) & BritishArchitect(y) & DesignedBy(x,y)) -> DesignedBy(x,y))", "all x y.((OxfordCircular(x) & BritishArchitect(y)) -> DesignedBy(x,y))", "all x.(OxfordCircle(x) -> (DesignedBy(x,BritishArchitect) & BritishArchitect(x)))", "all x.(OxfordCircle(x) -> (DesignedByBritishArchitect(x) & DesignedBy(x,BritishArchitect)))"]}
{"id": "folio_train_1294", "nl": "John Nash designed the Central line in 1900.", "fol": "DesignedBy(JohnNash,CentralLine)", "prediction": ["all x y.((JohnNash(x) & CentralLine(y)) -> DesignedIn(x,y))", "all x y.((JohnNash(x) & CentralLine(y)) -> DesignedIn1900(x,y))", "all x.((JohnNash(x) & CentralLine(x)) -> DesignedIn1900(x))", "all x.((JohnNash(x) & CentralLine(y)) -> DesignedIn1900(x,y))", "all x.((JohnNash(x) & CentralLine(x)) -> DesignedIn(x,1900))", "John Nash designed CentralLineIn1900.", "John Nash designed CentralLine(JohnNash,1900)", "John Nash designed CentralLine(JohnNash) in 1900.", "all x.((JohnNash(x) & CentralLine(y)) -> DesignedIn(x,y))", "John Nash designed CentralLine(JohnNash) in 1900.", "all x y.((JohnNash(x) & CentralLine(y)) -> DesignsIn(x,y))", "(DesignedByJohnNash(JohnNash) & CentralLine(JohnNash) & 1900(JohnNash))", "all x y.((JohnNash(x) & CentralLine(y)) -> Designed(x,y))", "all x y.((JohnNash(x) & CentralLine(y)) -> Design(x,y))", "all x y.((JohnNash(x) & CentralLine(y)) -> DesignedIn(x,1900))", "(DesignedByJohnNash(JohnNash,1900) & CentralLine(JohnNash,1900))"]}
{"id": "folio_train_1295", "nl": "Regent Street is not in London.", "fol": "all x.(IsRegentStreet(x) -> IsInLondon(x))", "prediction": ["Regent Street is notInLondon(RegentStreet(RenownedStreet(RenownedStreet) & -InLondon(RenownedStreet(RenownedStreet) & -InLondon(RenownedStreet(RenownedStreet) & -InLondon(RenownedStreet(RenownedStreet) & -InLondon(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-", "Regent Street is notInLondon(RegentStreet(RenownedStreet(RenownedStreet) & -InLondon(RenownedStreet(RenownedStreet) & -InLondon(RenownedStreet(RenownedStreet) & -InLondon(RenownedStreet(RenownedStreet) & -InLondon(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Re-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-R", "Regent Street is notInLondon(RegentStreet(RenownedStreet(RenownedStreet) & -InLondon(RenownedStreet(RenownedStreet) & -InLondon(RenownedStreet(RenownedStreet) & -InLondon(RenownedStreet(RenownedStreet) & -InLondon(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Re-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-R", "Regent Street is notInLondon(RegentStreet(RenownedStreet(RenownedStreet) & -InLondon(RenownedStreet(RenownedStreet) & -InLondon(RenownedStreet(RenownedStreet) & -InLondon(RenownedStreet(RenownedStreet) & -InLondon(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Re-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-R", "Regent Street is notInLondon(RegentStreet(RenownedStreet(RenownedStreet) & -InLondon(RenownedStreet(RenownedStreet) & -InLondon(RenownedStreet(RenownedStreet) & -InLondon(RenownedStreet(RenownedStreet) & -InLondon(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Re-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-R", "Regent Street is notInLondon(RegentStreet(RenownedStreet(RenownedStreet) & -InLondon(RenownedStreet(RenownedStreet) & -InLondon(RenownedStreet(RenownedStreet) & -InLondon(RenownedStreet(RenownedStreet) & -InLondon(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Re-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-R", "Regent Street is notInLondon(RegentStreet(RenownedStreet(RenownedStreet) & -InLondon(RenownedStreet(RenownedStreet) & -InLondon(RenownedStreet(RenownedStreet) & -InLondon(RenownedStreet(RenownedStreet) & -InLondon(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Re-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-R", "Regent Street is notInLondon(RegentStreet(RenownedStreet(RenownedStreet) & -InLondon(RenownedStreet(RenownedStreet) & -InLondon(RenownedStreet(RenownedStreet) & -InLondon(RenownedStreet(RenownedStreet) & -InLondon(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Re-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-R", "Regent Street is notInLondon(RegentStreet(RenownedStreet(RenownedStreet) & -InLondon(RenownedStreet(RenownedStreet) & -InLondon(RenownedStreet(RenownedStreet) & -InLondon(RenownedStreet(RenownedStreet) & -InLondon(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Re-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-R", "Regent Street is notInLondon(RegentStreet(RenownedStreet(RenownedStreet) & -InLondon(RenownedStreet(RenownedStreet) & -InLondon(RenownedStreet(RenownedStreet) & -InLondon(RenownedStreet(RenownedStreet) & -InLondon(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Re-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-R", "Regent Street is notInLondon(RegentStreet(RenownedStreet(RenownedStreet) & -InLondon(RenownedStreet(RenownedStreet) & -InLondon(RenownedStreet(RenownedStreet) & -InLondon(RenownedStreet(RenownedStreet) & -InLondon(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Re-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-R", "Regent Street is notInLondon(RegentStreet(RenownedStreet(RenownedStreet) & -InLondon(RenownedStreet(RenownedStreet) & -InLondon(RenownedStreet(RenownedStreet) & -InLondon(RenownedStreet(RenownedStreet) & -InLondon(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Re-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-R", "Regent Street is notInLondon(RegentStreet(RenownedStreet(RenownedStreet) & -InLondon(RenownedStreet(RenownedStreet) & -InLondon(RenownedStreet(RenownedStreet) & -InLondon(RenownedStreet(RenownedStreet) & -InLondon(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Re-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-R", "Regent Street is notInLondon(RegentStreet(RenownedStreet(RenownedStreet) & -InLondon(RenownedStreet(RenownedStreet) & -InLondon(RenownedStreet(RenownedStreet) & -InLondon(RenownedStreet(RenownedStreet) & -InLondon(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Re-Ren-R", "Regent Street is notInLondon(RegentStreet(RenownedStreet(RenownedStreet) & -InLondon(RenownedStreet(RenownedStreet) & -InLondon(RenownedStreet(RenownedStreet) & -InLondon(RenownedStreet(RenownedStreet) & -InLondon(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Re-Ren-Ren-R", "Regent Street is notInLondon(RegentStreet(RenownedStreet(RenownedStreet) & -InLondon(RenownedStreet(RenownedStreet) & -InLondon(RenownedStreet(RenownedStreet) & -InLondon(RenownedStreet(RenownedStreet) & -InLondon(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(RenownedStreet(Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Ren-Re-R"]}
{"id": "folio_train_1296", "nl": "An animal is either a cat or a dog.", "fol": "all x.((IsCat(x) & -IsDog(x)) | (-IsCat(x) & IsDog(x)))", "prediction": ["all x.(Animal(x) -> (Cat(x) | Dog(x)))", "all x.(Animal(x) -> (Cat(x) | Dog(x)))", "exists x.(Animal(x) & (Cat(x) | Dog(x)))", "all x y.((Animal(x) & Cat(y)) | Dog(y)) -> (Cat(x) | Dog(x)))", "all x y.((Animal(x) & Cat(y)) | Dog(y)) -> Animal(x))", "all x y.((Animal(x) & Cat(y)) | Dog(y)) -> (Cat(x) | Dog(y)))", "all x y.((Animal(x) & Cat(y)) | Dog(y)) -> (Cat(x,y) | Dog(x,y)))", "all x y.((Animal(x) & Cat(y) & Dog(y)) -> (Cat(x) | Dog(x)))", "all x.(Animal(x) -> ((Cat(x) | Dog(x))))", "all x y.((Animal(x) & Cat(y)) | Dog(y)) -> Cat(x))", "all x.((Animal(x) & (Cat(x) | Dog(x))) -> Animal(x))", "all x y.((Animal(x) & Cat(y)) | Dog(y)) -> Cat(x) | Dog(y))", "all x y.((Animal(x) & Cat(y)) | Dog(y)) -> Animal(x,y))", "all x.(Animal(x) -> (Cat(x) | Canine(x)))", "all x y.((Animal(x) & Cat(y)) | Dog(y)) -> Is(x,y))", "all x y.((Animal(x) & Cat(y)) | Dog(x,y)) -> Animal(x))"]}
{"id": "folio_train_1297", "nl": "All dogs bark.", "fol": "all x.(IsDog(x) -> Barks(x))", "prediction": ["all x.(Dog(x) -> Barks(x))", "all x.(Dog(x) -> Bark(x))", "all x y.((Dog(x) & Bark(y)) -> Barks(x,y))", "all x y.((Dog(x) & Bark(y)) -> Bark(x,y))", "all x y.((Dog(x) & Bark(y)) -> Barks(x))", "all x y.((Dog(x) & Bark(y)) -> Bark(x))", "all x.exists y.(Dog(x) & Bark(y))", "all x y.((Dog(x) & Barks(y)) -> Barks(x,y))", "(all x.(Dog(x) -> Barks(x)))", "all x y.((Dog(x) & Barks(y)) -> Barks(x))", "exists x.(Dog(x) & Barks(x))", "exists x.(Dog(x) & Bark(x))", "all x.exists y.(Dog(x) & Barks(y))", "(All x.(Dog(x) -> Barks(x)))", "all x y.((Dog(x) & Barks(y)) -> Dog(x))", "all x y.((Dog(x) & Barks(x)) -> Barks(y))"]}
{"id": "folio_train_1298", "nl": "Ghosts do not exist.", "fol": "all x.-IsGhost(x)", "prediction": ["all x.(Ghost(x) -> -exists(x))", "exists x.(Ghost(x) & -exists(x))", "exists x.(Ghost(x) & -exists y.(Ghost(y) & -exists z.(Ghost(z) & -exists w.(Ghost(w) & -exists w.(Ghost(w) & -exists w.(Ghost(w) & -exists w.(Ghost(w) & -exists w.(Ghost(w)))))", "exists x.(Ghost(x) & -exists y.(Ghost(y) & Exists z.(Ghost(z) & -exists w.(Ghost(w) & -exists w.(Ghost(w) & -exists w.(Ghost(w) & -exists w.(Ghost(w) & -exists w.(Ghost(w)))))", "exists x.(Ghost(x) & -exists y.(Ghost(y) & -exists z.(Ghost(z) & -exists w.(Ghost(w) & -exists w.(Ghost(w) & -exists w.(Ghost(w) & -exists w.(Ghost(w) & -exists w.(Ghost(w))))", "exists x.(Ghost(x) & -exists y.(Ghost(y) & -exists z.(Ghost(z) & -exists w.(Ghost(w) & -exists w.(Ghost(w) & -exists w.(Ghost(w) & -exists w.(Ghost(w)))))", "exists x.(Ghost(x) & -exists y.(Ghost(y) & -exists z.(Ghost(z) & -exists w.(Ghost(w) & -exists w.(Ghost(w) & -exists w.(Ghost(z) & -exists w.(Ghost(w) & -exists w.(Ghost(w)))))", "exists x.(Ghost(x) & -exists y.(Ghost(y) & -exists z.(Ghost(z) & -exists w.(Ghost(w) & -exists w.(Ghost(w) & -exists w.(Ghost(w) & -exists w.(Ghost(w))))))", "exists x.(Ghost(x) & -exists y.(Ghost(y) & Exists z.(Ghost(z) & -exists w.(Ghost(w) & -exists w.(Ghost(w) & -exists w.(Ghost(w) & -exists w.(Ghost(w) & -exists w.(Ghost(w))))", "exists x.(Ghost(x) & -exists y.(Ghost(y) & -exists z.(Ghost(z) & -exists w.(Ghost(w) & -exists w.(Ghost(w) & -exists w.(Ghost(w) & -exists w.(Ghost(w) & -exists w.(Ghost(zw.(Ghost(w)))))", "all x.(Ghost(x) -> -exists.", "exists x.(Ghost(x) & -exists y.(Ghost(y) & -exists z.(Ghost(z) & -exists w.(Ghost(w) & -exists w.(Ghost(w) & -exists w.(Ghost(w) & -exists w.(Ghost(w) & -exists w.(Ghost(z) & Ghost(w)))))", "exists x.(Ghost(x) & -exists y.(Ghost(y) & -exists z.(Ghost(z) & -exists w.(Ghost(w) & -exists w.(Ghost(w) & -exists w.(Ghost(w) & -exists w.(Ghost(w) & -exists w.(Ghost(z) &(ghost(w)))))", "exists x.(Ghost(x) & -exists y.(Ghost(y) & -exists z.(Ghost(z) & -exists w.(Ghost(w) & -exists w.(Ghost(w) & -exists w.(Ghost(w) & -exists w.(Ghost(w) & -exists w.(Ghost(z) & Ghost(w))))", "exists x.(Ghost(x) & -exists y.(Ghost(y) & -exists z.(Ghost(z) & -exists w.(Ghost(w) & -exists w.(Ghost(w) & -exists w.(Ghost(w) & -exists w.(Ghost(w) & -exists w.(Ghost(zw.(Ghost(w) & Ghost(w)))))", "exists x.(Ghost(x) & -exists y.(Ghost(y) & -exists z.(Ghost(z) & -exists w.(Ghost(w) & -exists w.(Ghost(w) & -exists w.(Ghost(w)))))"]}
{"id": "folio_train_1299", "nl": "If something barks, then it is not alive.", "fol": "all x.(Barks(x) -> -IsAlive(x))", "prediction": ["all x.(Barks(x) -> -Alive(x))", "all x.((Barks(x) & -Alive(x)) -> -Barks(x))", "all x.((Barks(x) & -Alive(x)) -> -Alive(x))", "all x.((Barks(x) & -Alive(x)) -> NotAlive(x))", "all x.((Barks(x) & -Alive(x)) -> -Barking(x))", "all x.((Barks(x) & -Barks(x)) -> -Alive(x))", "all x.((Barks(x)) -> -Alive(x))", "all x.((Barks(x) & NotAlive(x)) -> -Barks(x))", "all x.((Barks(x) & -Alive(x)) -> -BarksAlive(x))", "all x.((Barks(x) & -Live(x)) -> -Barks(x))", "all x.((Barks(x) & Live(x)) -> -Barks(x))", "all x.((Barks(x) & -Barks(x)) -> -Barks(x))", "all x.((Barks(x) & Live(x)) -> -Alive(x))", "exists x.(Barks(x) & -Alive(x))", "all x.(Barks(x) -> NotAlive(x))", "all x.(Barks(x) -> -Alive(x))"]}
{"id": "folio_train_1300", "nl": "A thing is either alive or dead.", "fol": "all x.((IsAlive(x) & -IsDead(x)) | (-IsAlive(x) & IsDead(x)))", "prediction": ["all x.(Thing(x) -> (Alive(x) | Dead(x)))", "exists x.(Thing(x) & (Alive(x) | Dead(x)))", "all x.(Ding(x) -> (Alive(x) | Dead(x)))", "all x.(Tea(x) -> (Alive(x) | Dead(x)))", "all x.(Tad(x) -> (Alive(x) | Dead(x)))", "all x.(Dog(x) -> (Alive(x) | Dead(x)))", "all x.((Thing(x) & (Alive(x) | Dead(x))) -> (Alive(x) | Dead(x)))", "exists x.(Ding(x) & (Alive(x) | Dead(x)))", "all x.(Tree(x) -> (Alive(x) | Dead(x)))", "all x.(Thing(x) -> ((Alive(x) | Dead(x))))", "all x.(Thing(x) -> (Alive(x) | Dead(x)))", "all x.(Tax(x) -> (Alive(x) | Dead(x)))", "all x.(Thing(x) -> (Alive(x) | Deaf(x)))", "exists x.(Dog(x) & (Alive(x) | Dead(x)))", "all x.(Body(x) -> (Alive(x) | Dead(x)))", "exists x.(Thing(x) & (Alive(x) | Dead(x))))"]}
{"id": "folio_train_1301", "nl": "Jojo is not dead.", "fol": "-IsDead(Jojo)", "prediction": ["all x.(Jojo(x) -> -Dead(x))", "exists x.(Jojo(x) & -Dead(x))", "All x.(Jojo(x) -> -Dead(x))", "all x.((Jojo(x) & -Dead(x)) -> -Dead(x))", "-Dead(Jojo)", "(-Dead(Jojo))", "all x.((Jojo(x) & -Dead(x)) -> -(Jojo(x) & -Dead(x))))", "all x.((Jojo(x) & -Dead(x)) -> -(Dead(x) | Dead(x))))", "all x.((Jojo(x) & -Dead(x)) -> -(Jojo(x) & -Dead(x)))", "all x.((Jojo(x) & -Dead(x)) -> -(Jojo(x) | Jojo(x))))", "all x.((Jojo(x) & -Dead(x)) -> -Daily(x))", "all x.((Jojo(x) & -Dead(x)) -> -Damaged(x))", "all x.((Jojo(x) & -Dead(x)) -> -(Dead(x) & -Dead(x))))", "all x.(Jojo(x) -> -Dawn(x))", "Jojo is notDead(Jojo)", "all x.((Jojo(x) & -Dead(x)) -> -(Dead(x) & -Dead(x)))"]}
{"id": "folio_train_1302", "nl": "Jojo is a ghost.", "fol": "IsGhost(Jojo)", "prediction": ["all x.(Jojo(x) -> Ghost(x))", "all x.((Jojo(x) & Ghost(x)) -> Ghost(x))", "(Ghost(jojo) & Ghost(jojo))", "all x.(Hojo(x) -> Ghost(x))", "all x y.((Jojo(x) & Ghost(y)) -> Ghost(x))", "exists x.(Jojo(x) & Ghost(x))", "All x.(Jojo(x) -> Ghost(x))", "(Ghost(Jojo) & Ghost(Jojo))", "(Ghost(jojo) -> Ghost(jojo))", "all x.((Jojo(x) & Ghost(x)) -> Is(x,y))", "all x.(Jojo(x) -> Ghost(x))", "(Ghost(jojo) | Ghost(jojo))", "all x.(Ghost(x) -> Jojo(x))", "all x y.((Jojo(x) & Ghost(y)) -> Ghost(x,y))", "all x y.((Jojo(x) & Ghost(y)) -> Is(x,y))", "(Ghost(jojo) -> Ghost(jojo))"]}
{"id": "folio_train_1303", "nl": "Jojo is a cat or a ghost.", "fol": "(IsCat(Jojo) | IsGhost(Jojo))", "prediction": ["all x.(Jojo(x) -> (Cat(x) | Ghost(x)))", "exists x.(Jojo(x) & (Cat(x) | Ghost(x)))", "all x.((Jojo(x) & (Cat(x) | Ghost(x))) -> (Cat(x) | Ghost(x)))", "all x.(Hojo(x) -> (Cat(x) | Ghost(x)))", "all x.(Jojo(x) -> (Cat(x) | Ghost(x)))", "all x y.((Jojo(x) & Cat(y)) | Ghost(y)) -> (Cat(x) | Ghost(x)))", "all x.((Jojo(x) & (Cat(x) | Ghost(x))) -> (Cat(x) | Ghost(x))))", "all x y.((Jojo(x) & Cat(y)) | Ghost(y)) -> (Cat(x) | Ghost(y)))", "all x.((Jojo(x) & (Cat(x) | Ghost(x))) -> Cat(x))", "all x y.((Jojo(x) & Cat(y)) | Ghost(x)) -> (Cat(x) | Ghost(x)))", "(Cat(jojo) | Ghost(jojo))", "all x.((Jojo(x) & Cat(x)) | Ghost(x))", "(all x.(Jojo(x) -> Cat(x)) | all y.(Jojo(y) -> Ghost(y))))", "(all x.(Jojo(x) -> Cat(x)) | All y.(Jojo(y) -> Ghost(y))))", "all x y.((Jojo(x) & (Cat(y) | Ghost(y))) -> (Cat(x) | Ghost(y)))", "all x y.((Jojo(x) & Cat(y)) | Ghost(x)) -> (Cat(y) | Ghost(y)))"]}
{"id": "folio_train_1304", "nl": "If Jojo is a cat or a ghost, then Jojo either barks or is a dog.", "fol": "((IsCat(Jojo) | IsGhost(Jojo)) -> (Barks(Jojo) | IsDog(Jojo)))", "prediction": ["all x.((Cat(x) | Ghost(x)) -> (Barks(x) | Dog(x)))", "all x.((Kat(x) | Ghost(x)) -> (Barks(x) | Dog(x)))", "all x.((Jojo(x) & (Cat(x) | Ghost(x))) -> (Barks(x) | Dog(x)))", "all x.(((Cat(x) | Ghost(x)) & Jojo(x)) -> (Barks(x) | Dog(x)))", "all x.((Cat(x) | Ghost(x)) -> (Barks(x) | Dog(x)))", "all x.((Hojo(x) & (Cat(x) | Ghost(x))) -> (Barks(x) | Dog(x)))", "all x.(((Cat(x) | Ghost(x))) -> (Barks(x) | Dog(x)))", "all x.((HasCat(x) | HasGhost(x)) -> (Barks(x) | Dog(x)))", "all x.(((Kat(x) | Ghost(x)) & Jojo(x)) -> (Barks(x) | Dog(x)))", "all x.((Kit(x) | Ghost(x)) -> (Barks(x) | Dog(x)))", "all x.(((Kat(x) | Ghost(x))) -> (Barks(x) | Dog(x)))", "all x.((Pet(x) | Ghost(x)) -> (Barks(x) | Dog(x)))", "all x.((Barks(x) | Dog(x)) -> (Cat(x) | Ghost(x)))", "all x.(Cat(x) | Ghost(x)) -> (Barks(x) | Dog(x)))", "all x.((Kitty(x) | Ghost(x)) -> (Barks(x) | Dog(x)))", "all x.((Jojo(x) & (Cat(x) | Ghost(x))) -> (Barks(x) | Dog(x))))"]}
{"id": "folio_train_1305", "nl": "All animals that are tigers are cats.", "fol": "all x.(IsTiger(x) -> IsCat(x))", "prediction": ["all x.(Tiger(x) -> Cat(x))", "all x.((Animal(x) & Tiger(x)) -> Cat(x))", "all x.((Animal(x) & Tigger(x)) -> Cat(x))", "all x.(Tiger(x) -> Cat(x))", "all x.((Animal(x) & Tiger(x)) -> Cat(x))", "all x y.((Animal(x) & Tiger(x)) -> Cat(y))", "all x.((Animal(x) & Tig(x)) -> Cat(x))", "all x y.((Animal(x) & Tiger(y)) -> Cat(x))", "all x.((Tiger(x) & Animal(x)) -> Cat(x))", "all x y.((Animal(x) & Tiger(x) & Cat(y)) -> Cat(x))", "all x.(Animal(x) & Tiger(x)) -> Cat(x))", "all x y.((Animal(x) & Tiger(x)) -> Cat(x))", "all x.((Tiger(x) & Cat(x)) -> Cat(x))", "all x y.((Animal(x) & Tiger(y)) -> Cat(x,y))", "all x.(Tigger(x) -> Cat(x))", "all x y.((Animal(x) & Tiger(x) & Animal(y)) -> Cat(x))"]}
{"id": "folio_train_1306", "nl": "No cats are dogs.", "fol": "all x.(IsCat(x) -> -IsDog(x))", "prediction": ["-exists x.(Cat(x) & Dog(x))", "all x.(Cat(x) -> Dog(x))", "all x y.((Cat(x) & Dog(y)) -> -exists z.(Cat(z) & Dog(z)) & -exists w.(Cat(w) & Dog(w)) & -exists w.(Cat(w) & Dog(w)) & -exists w.(Cat(w) & Dog(w))))", "all x y.((Cat(x) & Dog(y)) -> -exists z.(Cat(z) & Dog(z) & -exists w.(Cat(w) & Dog(w)) & -exists w.(Cat(w) & Dog(w)) & -exists w.(Cat(w) & Dog(w))))", "all x y.((Cat(x) & Dog(y)) -> -exists z.(Cat(z) & Dog(z) & -exists w.(Cat(w) & Dog(w)) & -exists w.(Cat(w) & Dog(w)) & -exists w.(Cat(w) & Dog(w) & Dog(w))))", "all x y.((Cat(x) & Dog(y)) -> -exists z.(Cat(z) & Dog(z)) & -exists w.(Cat(w) & Dog(w)) & -exists w.(Cat(w) & Dog(w)) & -exists w.(Cat(w) & Dog(w) & Dog(w))))", "all x y.((Cat(x) & Dog(y)) -> -exists z.(Cat(z) & Dog(z) & -exists w.(Cat(w) & Dog(w) & -exists w.(Cat(w) & Dog(w)) & -exists w.(Cat(w) & Dog(w)))))", "all x y.((Cat(x) & Dog(y)) -> -exists z.(Cat(z) & Dog(z) & -exists w.(Cat(w) & Dog(w)) & -exists w.(Cat(w) & Dog(w))))", "all x y.((Cat(x) & Dog(y)) -> -exists z.(Cat(z) & Dog(z)) & -exists w.(Cat(w) & Dog(w)) & -exists w.(Cat(w) & Dog(w))))", "all x y.((Cat(x) & Dog(y)) -> -exists z.(Cat(z) & Dog(z) & -exists w.(Cat(w) & Dog(w)) & -exists w.(Cat(w) & Dog(w)) & -exists w.(Cat(w) & Dog(w)))))", "all x y.((Cat(x) & Dog(y)) -> -exists z.(Cat(z) & Dog(z)) & -exists w.(Cat(w) & Dog(w)) & -exists w.(Cat(w) & Dog(w)) & -exists w.(Cat(w) & Dog(w)) & -exists w.(Cat(w) & Dog(w)))", "all x y.((Cat(x) & Dog(y)) -> -exists z.(Cat(z) & Pet(z)) & -exists w.(Cat(w) & Dog(w)) & -exists w.(Cat(w) & Dog(w)) & -exists w.(Cat(w) & Dog(w))))", "all x y.((Cat(x) & Dog(y)) -> -exists z.(Cat(z) & Dog(z) & -exists w.(Cat(w) & Dog(w)) & -exists w.(Cat(w) & Dog(w)) & -exists w.(Cat(w) & Dog(w)) & Dog(w) & Dog(w)))", "all x y.((Cat(x) & Dog(y)) -> -exists z.(Cat(z) & Dog(z) & -exists w.(Cat(w) & Dog(w)) & -exists w.(Cat(w) & Dog(w)) & -exists w.(Cat(w) & Dog(w)) & -exists w.(Cat(w) & Dog(w) & Dog(w))))", "all x y.((Cat(x) & Dog(y)) -> -exists z.(Cat(z) & Dog(z)) & -exists w.(Cat(w) & Dog(w)) & -exists w.(Cat(w) & Dog(w)) & -exists w.(Cat(w) & Dog(w)) & -exists w.(Cat(w) & Dog(z) & Dog(w))))", "all x y.((Cat(x) & Dog(y)) -> -exists z.(Cat(z) & Dog(z) & -exists w.(Cat(w) & Dog(w)) & -exists w.(Cat(w) & Dog(w)) & -exists w.(Cat(w) & Dog(w)) & -exists w.(Cat(w) & Dog(w))))"]}
{"id": "folio_train_1307", "nl": "All Bengal tigers are tigers.", "fol": "all x.(IsBengalTiger(x) -> IsTiger(x))", "prediction": ["all x.(BengalTiger(x) -> Tiger(x))", "all x.(BangladeshTiger(x) -> Tiger(x))", "all x.(BengaliTiger(x) -> Tiger(x))", "all x.(BengalTiger(x) -> Tiger(x))", "all x.(BelgiumTiger(x) -> Tiger(x))", "all x.( BengalTiger(x) -> Tiger(x))", "all x.((BengalTiger(x) & Tiger(x)) -> Tiger(x))", "all x.(BangaliTiger(x) -> Tiger(x))", "all x.(BengaliTiger(x) -> Tiger(x))", "all x.(Tiger(x) -> Tiger(x))", "all x.(BengalTiger(x) -> Tiger(x))", "all x.(BelarusTiger(x) -> Tiger(x))", "(all x.(BengalTiger(x) -> Tiger(x)))", "(all x.(BangladeshTiger(x) -> Tiger(x)))", "(all x.(BengaliTiger(x) -> Tiger(x)))", "all x.(BengaliTiger(x) -> Tiger(x))"]}
{"id": "folio_train_1308", "nl": "Everything that is a husky is a dog.", "fol": "all x.(IsHusky(x) -> IsDog(x))", "prediction": ["all x.((Husky(x) & Husky(x)) -> Dog(x))", "all x.(Husky(x) -> Dog(x))", "all x.((Husky(x) & Dog(x)) -> Dog(x))", "all x.((Husky(x) & HasHunt(x)) -> Dog(x))", "all x.((Husky(x) & HasDog(x)) -> Dog(x))", "all x.((Husky(x) & HasHusky(x)) -> Dog(x))", "all x.((Husky(x) & Husky(x)) -> Dog(x))", "all x.((Husky(x) & Husky(x)) -> Dog(x))", "all x.((Husky(x) & Dog(x)) -> HasHunt(x))", "all x.((Husky(x) & Has(x)) -> Dog(x))", "all x.((Husky(x) & Puppy(x)) -> Dog(x))", "all x.((Husky(x) & HasHead(x)) -> Dog(x))", "all x.((Husky(x) & HasHosky(x)) -> Dog(x))", "all x.((Husky(x) & Dog(x)) -> Has(x))", "all x.((Husky(x) & Dog(x)) -> Husky(x))", "all x.((Husky(x) & HasHelmet(x)) -> Dog(x))"]}
{"id": "folio_train_1309", "nl": "Fido is either a Bengal tiger or a cat.", "fol": "(IsBengalTiger(Fido) | IsCat(Fido))", "prediction": ["all x.(Fido(x) -> (BengalTiger(x) | Cat(x)))", "all x.(Fido(x) -> (BengaliTiger(x) | Cat(x)))", "all x.(Fido(x) -> (BangladeshTiger(x) | Cat(x)))", "all x.(Fido(x) -> (BengalTiger(x) | Cat(x)))", "all x.(Fido(x) -> (BengaliTiger(x) | Cat(x)))", "all x.(Fido(x) -> (BengalTiger(x) | Cat(x)))", "all x.(Fido(x) -> (BengaliTiger(x) | Cat(x)))", "all x.(Fido(x) -> (BengalTiger(x) | BengalCat(x)))", "all x.(Fido(x) -> (BelgiumTiger(x) | Cat(x)))", "all x.(Fido(x) -> (BengaliTiger(x) | BengalCat(x)))", "all x.(Fido(x) -> (BengalTiger(x) | Cat(x)))", "all x.(Fido(x) -> (BengalTiger(x) | Cat(x)))", "(BengalTiger(Fido) | Cat(Fido))", "all x.(Fido(x) -> (BelgiumTiger(x) | BengalCat(x)))", "all x.(Fido(x) -> (BengalTiger(x) | BengalCat(x)))", "(BangladeshTiger(Fido) | Cat(Fido))"]}
{"id": "folio_train_1310", "nl": "Fido is a husky.", "fol": "IsHusky(Fido)", "prediction": ["all x.(Husky(x) -> Fido(x))", "(Husky(Fido) & Husky(Fido))", "all x.(Husky(x) -> Fido(x))", "all x.(Husky(x) -> Husky(x))", "(Husky(Fido) | Husky(Fido))", "(Husky(Fido) -> Husky(Fido))", "(Husky(Fido) -> Husky(Fido))", "all x.(Husky(x) -> Fido(x))", "All x.(Husky(x) -> Fido(x))", "all x.(Hushy(x) -> Fido(x))", "all x.(Hunky(x) -> Fido(x))", "all x.(Husky(x) -> Husky(x))", "(Hunky(Fido) & Husky(Fido))", "all x.(Husky(x) -> Fido(x))", "(Husky(Fido) | Husky(Fido)))", "(Hunky(Fido) | Husky(Fido))"]}
{"id": "folio_train_1311", "nl": "Fido is not a husky.", "fol": "-IsHusky(Fido)", "prediction": ["all x.(Fido(x) -> -Husky(x))", "all x.((Fido(x) & -Husky(x)) -> -Husky(x))", "all x.(Fido(x) -> -Husky(x))", "all x.((Fido(x) & Husky(x)) -> -Husky(x))", "all x.(Husky(x) -> -Husky(x))", "(-Husky(Fido))", "all x.((Fido(x) & Husky(x)) -> -Husky(x))", "all x.((Fido(x) & Husky(x)) -> -Hushy(x))", "all x.(Fido(x) -> -Husky(x))", "all x.((Fido(x) & -Husky(x)) -> -Husky(x))", "all x.(Fido(x) -> -Husky(x))", "all x.((Fido(x) & Husky(x)) -> -Hunky(x))", "all x.((Fido(x) & -Husky(x)) -> -Hushy(x))", "all x.((Fido(x) & -Husky(x)) -> -Hunky(x))", "all x.((Fido(x) & -Husky(x)) -> -Hunky(x))", "all x.((Fido(x) & Husky(x)) -> -Hunky(x))"]}
{"id": "folio_train_1312", "nl": "Fido is a Bengal tiger.", "fol": "IsBengalTiger(Fido)", "prediction": ["(BengalTiger(Fido) & BengalTiger(Fido))", "all x.(Fido(x) -> BengalTiger(x))", "(BengaliTiger(Fido) & BengalTiger(Fido))", "Fido is BengalTiger(x)", "(BengalTiger(Fido) & BengalTiger(Fido))", "(BengalTiger(Fido) -> BengalTiger(Fido))", "(BengalTiger(Fido) -> BengalTiger(Fido))", "(BangladeshTiger(Fido) & BengalTiger(Fido))", "All x.(Fido(x) -> BengalTiger(x))", "(BangladeshTiger(Fido))", "Fido (BengalTiger(Fido))", "(BengalTiger(Fido) | BengalTiger(Fido))", "Fido (BengalTiger(Fido) & BengalTiger(Fido))", "Fido (BangladeshTiger(Fido))", "Fido is BengalTiger(Fido)", "Fido(x) -> BengalTiger(x))"]}
{"id": "folio_train_1313", "nl": "Fido is neither a dog nor a husky.", "fol": "(-IsDog(Fido) & -IsHusky(Fido))", "prediction": ["all x.(Fido(x) -> (-Dog(x) | Husky(x)))", "all x.(Fido(x) -> (-Dog(x) & -Husky(x)))", "(-Dog(Fido) & -Husky(Fido))", "all x.(Fido(x) -> (-Dog(x) | Husky(x)))", "(-(Dog(Fido) | Husky(Fido)))", "all x.(Fido(x) -> -(Dog(x) | Husky(x)))", "((Dog(Fido) & -Husky(Fido)) | (-Dog(Fido) & Husky(Fido))))", "all x.(Fido(x) -> (-Dog(x) | Husky(x)))", "(-Dog(Fido) | Husky(Fido))", "(-Dog(Fido) | Husky(Fido)))", "all x.(Fido(x) -> (-Dog(x) & -Husky(x)))", "exists x.(Fido(x) & -(Dog(x) | Husky(x)))", "all x.(Fido(x) -> (NeitherDog(x) & -Husky(x)))", "all x.(Fido(x) -> (NeitherDog(x) | Husky(x)))", "all x.(Fido(x) -> (-Dog(x) & -Husky(x)))", "-(Dog(Fido) | Husky(Fido))"]}
{"id": "folio_train_1314", "nl": "If a city hold a Summer Olympics, and the city is a US city, then the Summer Olympics will be in the US.", "fol": "all x y.((HoldsSummerOlympics(x,y) & IsCityInCountry(y,Us)) -> OlympicsInCountry(x,Us))", "prediction": ["all x.((City(x) & HoldsSummerOlympics(x) & USCity(x)) -> SummerOlympicsInUS(x))", "all x.((City(x) & SummerOlympics(x) & USCity(x)) -> SummerOlympicsInUS(x))", "all x.((City(x) & HoldsSummerOlympics(x) & USCity(x)) -> SummerOlympics(x))", "all x.((City(x) & HoldsSummerOlympics(x) & USCity(x)) -> SummerOlympicsInUSA(x))", "all x.((City(x) & HoldsSummerOlympics(x) & USCity(x)) -> SummerOlympicsIn(x,US))", "all x y.((City(x) & SummerOlympics(y) & Holds(x,y) & USCity(x)) -> SummerOlympicsInUS(x))", "all x.((City(x) & HoldsSummerOlympics(x) & City(x) & USCity(x)) -> SummerOlympicsInUS(x))", "all x y.((City(x) & SummerOlympics(y) & Holds(x,y) & USCity(x)) -> SummerOlympicsIn(x,y))", "all x y.((City(x) & HoldsSummerOlympics(x) & City(y) & USCity(y)) -> SummerOlympicsInUS(x))", "all x.((City(x) & HoldSummerOlympics(x) & USCity(x)) -> SummerOlympicsInUS(x))", "all x.((City(x) & HeldSummerOlympics(x) & USCity(x)) -> SummerOlympicsInUS(x))", "all x.((City(x) & HoldsSummerOlympics(x) & USCity(x)) -> SummerOlympicsIn(x,us))", "all x y.((City(x) & City(y) & HoldsSummerOlympics(x,y) & USCity(y)) -> SummerOlympicsInUS(x))", "all x y.((City(x) & City(y) & HoldsSummerOlympics(x) & USCity(y)) -> SummerOlympicsInUS(x))", "all x y.((City(x) & SummerOlympics(y) & Holds(x,y) & USCity(x)) -> SummerOlympics(x,y))", "all x.((City(x) & HasSummerOlympics(x) & USCity(x)) -> SummerOlympicsInUS(x))"]}
{"id": "folio_train_1315", "nl": "If a city is in a state which is in US, the city is a US city.", "fol": "all x y.((IsCityInState(x,y) & IsStateInCountry(y,Us)) -> IsCityInCountry(x,Us))", "prediction": ["all x.((City(x) & InState(x) & InUS(x)) -> USCity(x))", "all x y.((City(x) & State(y) & In(x,y)) -> USCity(x))", "all x.((City(x) & StateInUS(x)) -> USCity(x))", "all x y.((City(x) & State(y) & InUS(x)) -> USCity(x))", "all x.((City(x) & StateIn(x,US)) -> USCity(x))", "all x.((City(x) & State(x) & InUS(x)) -> USCity(x))", "all x y.((City(x) & State(y) & InUS(x,y)) -> USCity(x))", "all x y z.((City(x) & State(y) & State(z) & In(x,y,z)) -> USCity(x))", "all x y.((City(x) & State(y) & In(x,y) & In(x,y)) -> USCity(x))", "all x.((City(x) & InState(x,US)) -> USCity(x))", "all x.((City(x) & In(x,US)) -> USCity(x))", "all x y z.((City(x) & State(y) & State(z) & In(x,y) & In(y,z)) -> USCity(x))", "all x.((City(x) & InStateInUS(x)) -> USCity(x))", "all x y z.((City(x) & State(y) & State(z) & InUS(x)) -> USCity(x))", "all x y.((City(x) & State(y) & InState(x,y) & InUS(x)) -> USCity(x))", "all x y z.((City(x) & State(y) & State(z) & In(x,y) & In(x,z)) -> USCity(x))"]}
{"id": "folio_train_1316", "nl": "If a city in a state, and a Summer Olympics is in this city, then the Summer Olympics is in this state.", "fol": "all z.((IsCityInState(x,y) & HoldsSummerOlympics(z,x)) -> OlympicsInState(z,y))", "prediction": ["all x y.((City(x) & State(y) & SummerOlympics(x) & In(x,y)) -> SummerOlympicsIn(x,y))", "all x y.((City(x) & State(y) & SummerOlympics(x) & In(x,y)) -> SummerOlympics(x))", "all x y.((City(x) & State(y) & SummerOlympicsIn(x,y)) -> SummerOlympicsIn(x,y))", "all x y.((City(x) & State(y) & SummerOlympics(x) & InCity(x,y)) -> SummerOlympicsInState(x,y))", "all x y.((City(x) & State(y) & SummerOlympics(x,y)) -> InState(x,y))", "all x.((City(x) & State(x) & SummerOlympics(x)) -> SummerOlympicsInState(x))", "all x y.((City(x) & State(y) & SummerOlympics(x) & InCity(x,y)) -> SummerOlympicsInState(x))", "all x y.((City(x) & State(y) & SummerOlympics(x) & InState(x,y)) -> SummerOlympicsInState(x,y))", "all x y.((City(x) & State(y) & SummerOlympics(x,y)) -> SummerOlympics(x,y))", "all x y.((City(x) & State(y) & SummerOlympics(x) & In(x,y)) -> SummerOlympics(x,y))", "all x y.((City(x) & State(y) & SummerOlympics(x) & InState(x,y)) -> SummerOlympicsInState(x))", "all x y z.((City(x) & State(y) & SummerOlympics(z) & In(x,y,z)) -> SummerOlympics(x))", "all x y.((City(x) & State(y) & SummerOlympics(x) & InCity(x,y)) -> SummerOlympics(x,y))", "all x.((City(x) & State(x) & SummerOlympics(x)) -> SummerOlympics(x))", "all x y.((City(x) & State(y) & SummerOlympics(x)) -> InState(x,y))", "all x y z.((City(x) & State(y) & SummerOlympics(z) & In(x,y,z)) -> SummerOlympicsIn(x,y,z))"]}
{"id": "folio_train_1317", "nl": "The 2028 Summer Olympics is scheduled to take place in Los Angeles(LA).", "fol": "HoldsSummerOlympics(Y2028,La)", "prediction": ["all x.((SummerOlympics(x) & 2028(x)) -> ScheduledIn(x,LA))", "all x y.((SummerOlympics(x) & LosAngeles(y)) -> ScheduledToTakePlaceIn(x,y))", "all x y.((SummerOlympics(x) & LosAngeles(y)) -> ScheduledToTakePlace(x,y))", "all x.((SummerOlympics(x) & 2028(x)) -> ScheduledToTakePlaceIn(x,LA))", "all x y.((SummerOlympics(x) & Los Angeles(y)) -> ScheduledToTakePlace(x,y))", "All x.((SummerOlympics(x) & 2028(x)) -> ScheduledIn(x,LA))", "all x.((SummerOlympics(x) & 2028(x)) -> ScheduledInLosAngeles(x))", "all x y.((SummerOlympics(x) & Los Angeles(y)) -> ScheduledToTakePlaceIn(x,y))", "All x y.((SummerOlympics(x) & LosAngeles(y)) -> ScheduledToTakePlaceIn(x,y))", "all x y.((SummerOlympics(x) & Summer(y)) -> ScheduledToTakePlaceIn(x,y))", "All x.((SummerOlympics(x) & 2028(x)) -> ScheduledToTakePlaceIn(x,LA))", "All x y.((SummerOlympics(x) & LosAngeles(y)) -> ScheduledToTakePlace(x,y))", "All x.((SummerOlympics(x) & 2028(x)) -> ScheduledInLosAngeles(x))", "all x y.((SummerOlympics(x) & Summer(y)) -> ScheduledIn(x,y))", "all x.((SummerOlympics(x) & LosAngeles(x)) -> ScheduledToTakePlace(x,2028))", "all x.((SummerOlympics(x) & LosAngeles(x)) -> ScheduledToTakePlaceIn(x,2028))"]}
{"id": "folio_train_1318", "nl": "LA is a city in California(CA).", "fol": "IsCityInState(La,Ca)", "prediction": ["(City(LA) & InCalifornia(LA))", "all x.((City(x) & California(x)) -> LA(x))", "all x.(LA(x) -> CityInCalifornia(x))", "all x.(La(x) -> CityInCalifornia(x))", "all x.((City(x) & California(x)) -> Los Angeles(x))", "all x.(LA(x) -> (City(x) & InCalifornia(x)))", "(City(LA) & California(CA))", "all x.(La(x) -> (City(x) & InCalifornia(x)))", "all x y.((City(x) & California(y)) -> City(x,y))", "(City(LA) & LocatedInCalifornia(LA))", "all x.((City(x) & California(x)) -> LACity(x))", "(CityInCalifornia(LA) & CityInCA(LA))", "(City(LA) & inCalifornia(LA))", "(City(La) & InCalifornia(La))", "all x.(LA(x) -> (City(x) & California(x)))", "all x.(La(x) -> (City(x) & California(x)))"]}
{"id": "folio_train_1319", "nl": "Atlanta is a US city.", "fol": "IsCityInCountry(Atlanta,Us)", "prediction": ["all x.(Atlanta(x) -> USCity(x))", "All x.(Atlanta(x) -> USCity(x))", "all x.(Atlanta(x) -> USCity(x))", "all x.((Atlanta(x) & USCity(x)) -> City(x))", "all x y.((Atlanta(x) & City(y)) -> USCity(x))", "all x.((Atlanta(x) & USCity(x)) -> USCity(x))", "all x.((Atlanta(x) & USCity(x)) -> LocatedIn(x,y))", "all x.((Atlanta(x) & USCity(x)) -> UnitedStates(x))", "all x y.((Atlanta(x) & City(y)) -> USCity(x,y))", "all x.((Atlanta(x) & USCity(x)) -> AmericanCity(x))", "all x.((Atlanta(x) & USCity(x)) -> USACity(x))", "all x.(Atlanta(x) -> (USCity(x) & LocatedIn(x,y)))", "all x.(Atlanta(x) -> UnitedStates(x))", "all x.(Atlanta(x) -> (USCity(x) & LocatedIn(x,y)))", "all x.(Atlanta(x) -> (USCity(x) & USCity(x)))", "all x.((Atlanta(x) & USCity(x)) -> CityOf(x,y))"]}
{"id": "folio_train_1320", "nl": "Atlanta is in Georgia(CA).", "fol": "IsStateInCountry(Ca,Us)", "prediction": ["all x.(Atlanta(x) -> Georgia(x))", "all x.(Atlanta(x) -> (InGeorgia(x) | InCA(x)))", "(all x.(Atlanta(x) -> Georgia(x)))", "all x.(Atlanta(x) -> (InGeorgia(x) & InCA(x)))", "all x.(Atlanta(x) -> (InGeorgia(x) & CA(x)))", "((Atlanta(Atlanta) & Georgia(CA)) -> In(Atlanta(Atlanta)))", "((Atlanta(Atlanta) & Georgia(CA)) -> In(Atlanta(Atlanta))", "all x.(Atlanta(x) -> (Georgia(x) | CA(x)))", "all x.(Atlanta(x) -> (InGeorgia(x) & LocatedInCA(x)))", "all x.(Atlanta(x) -> InGeorgia(x))", "all x y.((Atlanta(x) & Georgia(y)) -> InCA(x,y))", "All x.(Atlanta(x) -> (InGeorgia(x) | InCA(x)))", "all x y.((Atlanta(x) & Georgia(y)) -> In(x,y))", "all x.(Atlanta(x) -> (Georgia(x) & CA(x)))", "All x.(Atlanta(x) -> Georgia(x))", "all x y.((Atlanta(x) & Georgia(y)) -> InCA(x))"]}
{"id": "folio_train_1321", "nl": "CA is a state in the United States.", "fol": "IsCityInState(Atlanta,Ga)", "prediction": ["all x.(CA(x) -> StateInUnitedStates(x))", "all x.(California(x) -> StateInUnitedStates(x))", "all x.(CA(x) -> (State(x) & InUnitedStates(x)))", "all x.(Cast(x) -> StateInUnitedStates(x))", "all x y.((California(x) & UnitedState(y)) -> StateIn(x,y))", "all x y.((State(x) & CA(y)) -> InUnitedStates(x,y))", "all x.(CA(x) -> StateIn(x,UnitedStates))", "all x.(CA(x) -> StateInUnitedStates(x))", "all x y.((California(x) & UnitedState(y)) -> State(x,y))", "all x.(CA(x) -> (State(x) & UnitedStates(x)))", "all x.(CA(x) -> (UnitedState(x) & LocatedIn(x,USA)))", "all x.(CA(x) -> StatesInUnitedStates(x))", "all x y.((State(x) & CA(y)) -> UnitedState(x,y))", "all x.(CA(x) -> InUnitedStates(x))", "all x.(CA(x) -> (UnitedState(x) & In(x,USA)))", "all x y.((California(x) & UnitedState(y)) -> LocatedIn(x,y))"]}
{"id": "folio_train_1322", "nl": "Boxing, modern pentathlon, and weightlifting will be removed from The 2028 Summer Olympics.", "fol": "(-IncludedInSummerOlympics(Y2028,Boxing) & -IncludedInSummerOlympics(Y2028,Modern_pentathlon) & -IncludedInSummerOlympics(Y2028,Weightlifting))", "prediction": ["all x.((Boxing(x) | ModernPentathlon(x) | Weightlifting(x)) -> RemovedFromSummerOlympics(x))", "All x.((Boxing(x) | ModernPentathlon(x) | Weightlifting(x)) -> RemovedFromSummerOlympics(x))", "all x.((Boxing(x) | ModernPentathlon(x) | Weightlifting(x)) -> RemovedFromThe2028SummerOlympics(x))", "all x y z.((Boxing(x) & ModernPentathlon(y) & Weightlifting(z)) -> (RemovedFromSummerOlympics(x,y) & RemovedFromSummerOlympics(x,z)))", "All x.((Boxing(x) | ModernPentathlon(x) | Weightlifting(x)) -> RemovedFromThe2028SummerOlympics(x))", "all x y z.((Boxing(x) & Pentathlon(y) & Weightlifting(z)) -> (RemovedFromSummerOlympics(x,y) & RemovedFromSummerOlympics(x,z)))", "all x.((Boxing(x) | ModernPentathlon(x) | Weightlifting(x)) -> RemovedFrom2020SummerOlympics(x))", "all x.((Boxing(x) | ModernPentathlon(x) | Weightlifting(x)) -> RemovedFromThe2020SummerOlympics(x))", "all x.((Boxing(x) | ModernPentathlon(x) | Weightlifting(x)) -> RemovedFrom2028SummerOlympics(x))", "All x y z.((Boxing(x) & ModernPentathlon(y) & Weightlifting(z)) -> (RemovedFromSummerOlympics(x,y) & RemovedFromSummerOlympics(x,z)))", "all x.((Boxing(x) | ModernPentathlon(x) | Weightlifting(x)) -> RemovedFromSummerOlympics(x,2028))", "all x y z.((Boxing(x) & ModernPentathlon(y) & Weightlifting(z)) -> (RemovedFromSummerOlympics(x,y,z) & RemovedFromSummerOlympics(x,z)))", "all x y.((Boxing(x) & ModernPentathlon(y) & Weightlifting(y)) -> RemovedFromSummerOlympics(x,y))", "all x y z.((Boxing(x) & ModernPentathlon(y) & Weightlifting(z)) -> (RemovedFromSummerOlympics(x) & RemovedFromSummerOlympics(x,y,z)))", "all x y.((Boxing(x) & ModernPentathlon(y) & Weightlifting(x)) -> RemovedFromSummerOlympics(x,y))", "all x.((Boxing(x) | ModernPentathlon(x) | Weightlifting(x)) -> RemovedFrom(x,2028))"]}
{"id": "folio_train_1323", "nl": "Atlanta in the United States hold the 1996 Summer Olympics.", "fol": "HoldsSummerOlympics(Y1996,Atlanta)", "prediction": ["all x.((Atlanta(x) & UnitedStates(x)) -> SummerOlympics(x,1996))", "all x y.((Atlanta(x) & UnitedStates(y)) -> HoldsSummerOlympics(x,y))", "all x.((Atlanta(x) & UnitedStates(x)) -> HoldsSummerOlympics(x,1996))", "all x y z.((Atlanta(x) & SummerOlympics(y) & UnitedStates(z)) -> Holds(x,y,z))", "all x y.((Atlanta(x) & UnitedStates(y)) -> SummerOlympics(x,y))", "all x y.((Atlanta(x) & UnitedStates(y) & HoldsSummerOlympics(x,y)) -> SummerOlympics(x,y))", "All x.((Atlanta(x) & UnitedStates(x)) -> SummerOlympics(x,1996))", "(SummerOlympics(Atlanta,UnitedStates) & HeldIn(Atlanta,UnitedStates))", "all x y.((Atlanta(x) & UnitedStates(y)) -> HoldsSummerOlympics(x,1996))", "all x.((Atlanta(x) & UnitedStates(x)) -> SummerOlympics(x))", "all x y.((Atlanta(x) & UnitedStates(y)) -> HeldSummerOlympics(x,y))", "all x y z.((Atlanta(x) & SummerOlympics(y) & UnitedStates(z)) -> HoldsIn(x,y,z))", "All x y.((Atlanta(x) & UnitedStates(y)) -> HoldsSummerOlympics(x,y))", "all x y.((Atlanta(x) & UnitedStates(y) & HoldsSummerOlympics(x,y)) -> HoldsSummerOlympics(x,y))", "All x.((Atlanta(x) & UnitedStates(x)) -> HoldsSummerOlympics(x,1996))", "all x.((Atlanta(x) & UnitedStates(x)) -> HeldSummerOlympics(x,1996))"]}
{"id": "folio_train_1324", "nl": "The 2028 Summer Olympics will take place in the US.", "fol": "OlympicsInCountry(Y2028,Us)", "prediction": ["all x.((SummerOlympics(x) & 2028(x)) -> TakesPlaceIn(x,US))", "all x.((SummerOlympics(x) & 2028(x)) -> TakesPlaceInUS(x))", "all x y.((SummerOlympics(x) & 2028(y)) -> TakesPlaceIn(x,y))", "All x.((SummerOlympics(x) & 2028(x)) -> TakesPlaceIn(x,US))", "all x y z.((SummerOlympics(x) & Summer(y) & US(z)) -> TakesPlaceIn(x,y,z))", "all x y.((SummerOlympics(x) & Summer(y)) -> TakesPlaceIn(x,y))", "All x.((SummerOlympics(x) & 2028(x)) -> TakesPlaceInUS(x))", "all x y z.((SummerOlympics(x) & Summer(y) & US(z)) -> TakesPlace(x,y,z))", "All x y.((SummerOlympics(x) & 2028(y)) -> TakesPlaceIn(x,y))", "All x y.((SummerOlympics(x) & Summer(y)) -> TakesPlaceIn(x,y))", "all x y.((SummerOlympics(x) & Summer(y) & TakesPlaceIn(x,y)) -> TakesPlaceIn(x,y))", "all x y z.((SummerOlympics(x) & Summer(y) & US(z)) -> TakenIn(x,y,z))", "all x.((SummerOlympics(x) & 2028(x)) -> TakenIn(x,US))", "All x.((SummerOlympics(x) & 2028(x)) -> TakenIn(x,US))", "all x.((SummerOlympics(x) & 2028(x)) -> TakenInUS(x))", "all x y.((SummerOlympics(x) & 2028(y)) -> TakenIn(x,y))"]}
{"id": "folio_train_1325", "nl": "The 1996 Summer Olympics is not in Georgia.", "fol": "-OlympicsInState(Y1996,Ga)", "prediction": ["All x.(SummerOlympics(x) -> -InGeorgia(x))", "all x.(SummerOlympics(x) -> -InGeorgia(x))", "(SummerOlympics(1996) & -InGeorgia(1996))", "(SummerOlympics(1996) -InGeorgia(1996))", "All x.(SummerOlympics(x,1996) -> -InGeorgia(x))", "All x.(SummerOlympics(x) -> -Georgia(x))", "all x.(SummerOlympics(x) -> -Georgia(x))", "1996 SummerOlympics(x) -InGeorgia(x))", "(-Georgia(SummerOlympics1996))", "-(SummerOlympics(1996) & -InGeorgia(1996))", "1996 SummerOlympics(x) & -InGeorgia(x))", "(SummerOlympics(1996) -InGeorgia(x))", "All x.(SummerOlympics(x,1996) -> -Georgia(x))", "The SummerOlympics(1996) -InGeorgia(x))", "The SummerOlympics(1996) -InGeorgia(1996))", "Die SummerOlympics(1996) -InGeorgia(x))"]}
{"id": "folio_train_1326", "nl": "Skateboarding will appear at The 2028 Summer Olympics.", "fol": "IncludedInSummerOlympics(Y2028,Skateboarding)", "prediction": ["All x.(Skateboarding(x) -> AppearsAtSummerOlympics(x,2028))", "All x y.((Skateboarding(x) & SummerOlympics(y)) -> AppearsAt(x,y))", "All x y.((Skateboarding(x) & SummerOlympics(y) & 2028(z)) -> AppearsAt(x,y,z))", "All x y.((Skateboarding(x) & SummerOlympics(y)) -> AppearsAt(x,y))", "all x y.((Skateboarding(x) & SummerOlympics(y)) -> AppearsAt(x,y))", "all x.(Skateboarding(x) -> AppearsAtSummerOlympics(x,2028))", "all x y.((Skateboarding(x) & SummerOlympics(y) & 2028(z)) -> AppearsAt(x,y,z))", "All x y z.((Skateboarding(x) & SummerOlympics(y) & SummerOlympics(z)) -> AppearsAt(x,y,z))", "All x.(Skateboarding(x) -> AppearsAtSummerOlympics(x,2028))", "All x y.((Skateboarding(x) & SummerOlympics(y) & 2028(y)) -> AppearsAt(x,y))", "all x y.((Skateboarding(x) & SummerOlympics(y)) -> AppearsAt(x,y))", "All x y.((Skateboarding(x) & SummerOlympics(y) & 2028(z)) -> AppearsAt(x,y,z))", "all x y.((Skateboarding(x) & SummerOlympics(y) & 2028(y)) -> AppearsAt(x,y))", "all x y.((Skateboarding(x) & SummerOlympics(y) & 2028(z)) -> AppearsAt(x,y,z))", "All x y.((Skateboarding(x) & SummerOlympics(y) & 2028(x)) -> AppearsAt(x,y))", "All x y z.((Skateboarding(x) & SummerOlympics(y) & SummerOlympics(z)) -> AppearsAt(x,y,z))"]}
{"id": "folio_train_1327", "nl": "The taiga vole is a large vole found in northwestern North America. ", "fol": "(IsVole(TaigaVole) & FoundIn(TaigaVole,NorthAmerica))", "prediction": ["all x.(TaigaVole(x) -> (LargeVole(x) & FoundInNorthwesternNorthAmerica(x)))", "all x.(TaigaVole(x) -> (LargeVole(x) & FoundInNorthwesternNorthAmerica(x)))", "all x.(TaigaVole(x) -> (LargeVole(x) & FoundInNorthwesternNorthAmerica(x)))", "all x.(TaigaVole(x) -> (LargeVole(x) & FoundInNorthwesternNordAmerica(x)))", "all x.(TaigaVole(x) -> (LargeVole(x) & FoundInNorthwesternAmerica(x)))", "all x.(TaigaVole(x) -> (LargeVole(x) & FoundInNorthwesternNorthAmerica(x)))", "all x.(TaigaVole(x) -> (LargeVole(x) & FoundInNorthwesternNorthAmerica(x)))", "all x.(TaigaVole(x) -> (LargeVole(x) & FoundInNorthwestNorthAmerica(x)))", "all x.(TaigaVole(x) -> FoundInNorthwesternNorthAmerica(x))", "all x.(TaigaVole(x) -> (LargeVole(x) & FoundInNorthWestNorthAmerica(x)))", "all x.(TaigaVole(x) -> (LargeVole(x) & FoundInNorthwestern(x)))", "all x.(TaigaVole(x) -> (LargeVole(x) & FoundInNorthwesternNordAmerica(x)))", "all x.((TaigaVole(x) & FoundInNorthwesternNorthAmerica(x)) -> LargeVole(x))", "all x.(TaigaVole(x) -> (LargeVole(x) & NorthwesternNorthAmerica(x)))", "all x y.((TaigaVole(x) & NorthwesternNorthAmerica(y)) -> LargeVole(x))", "all x.(TaigaVole(x) -> exists y.(NorthwesternNorthAmerica(y) & FoundIn(x,y))))"]}
{"id": "folio_train_1328", "nl": "Cats like playing with all voles.", "fol": "all x.(IsVole(x) -> CatsEnjoyPlayingWith(x))", "prediction": ["all x.(Cat(x) -> LikesPlayingWithVoles(x))", "all x y.((Cat(x) & Vole(y)) -> LikesPlayingWith(x,y))", "all x y.((Cat(x) & Vole(y)) -> LikesPlaying(x,y))", "all x y z.((Cat(x) & Vole(y) & Vole(z)) -> LikesPlayingWith(x,y,z))", "all x y z.((Cat(x) & Vole(y) & Vole(z)) -> LikesPlaying(x,y,z))", "all x y.((Cat(x) & Vole(y)) -> LikesToPlayWith(x,y))", "all x y z.((Cat(x) & Vole(y) & Vole(z)) -> LikesToPlayWith(x,y,z))", "all x.(Cat(x) -> (LikesPlayingWithVoles(x)))", "all x.(Cat(x) -> LikesPlayingWithVole(x))", "all x.(Cat(x) -> LikesToPlayWithVoles(x))", "all x.(Cat(x) -> PlaysWithVoles(x))", "all x y z.((Cat(x) & Vole(y) & Vole(z)) -> LikesToPlay(x,y,z))", "all x y z.((Cat(x) & Vole(y) & Vole(z)) -> LikesPlaying(x,y))", "all x y z.((Cat(x) & Vole(y) & Vole(z)) -> LikesPlayingWith(x,y))", "all x y.((Cat(x) & Vole(y)) -> LikesToPlay(x,y))", "all x.(Cat(x) -> LovesPlayingWithVoles(x))"]}
{"id": "folio_train_1329", "nl": "The taiga vole lives in the boreal taiga zone.", "fol": "LivesIn(TaigaVole,BorealTaigaZone)", "prediction": ["all x.(TaigaVole(x) -> LivesInBorealTaigaZone(x))", "all x y.((TaigaVole(x) & BorealTaigaZone(y)) -> LivesIn(x,y))", "all x.(TaigaVole(x) -> LivesInBorealTaigaZone(x))", "all x y.((TaigaVole(x) & BorealTaigaZone(y)) -> LivesIn(x,y))", "all x.(TaigaVole(x) -> exists y.(BorealTaigaZone(y) & LivesIn(x,y)))", "all x y z.((TaigaVole(x) & BorealTaigaZone(y) & BorealTaigaZone(z)) -> LivesIn(x,y,z))", "all x y.((TaigaVole(x) & BoralTaigaZone(y)) -> LivesIn(x,y))", "all x.(TaigaVole(x) -> LivesInBodyalTaigaZone(x))", "all x.(TaigaVole(x) -> exists y.(BorealTaigaZone(y) & LivesIn(x,y))))", "all x.(TaigaVole(x) -> exists y.(BorealTaigaZone(y) & LivesIn(x,y)))", "all x.(TaigaVole(x) -> LivesInBoralTaigaZone(x))", "all x.(TaigaVole(x) -> exists y.(BorealTaigaZone(y) & LivesIn(x,y))))", "all x.(TaigaVole(x) -> LivesInBorialTaigaZone(x))", "all x.(TaigaVole(x) -> LivesInBorealTaigaZone(x))", "all x.(TaigaVole(x) -> LivesInBorralTaigaZone(x))", "all x y z.((TaigaVole(x) & BorealTaigaZone(y) & BorealTaigaZone(z)) -> LivesIn(x,y))"]}
{"id": "folio_train_1330", "nl": "The boreal taiga zone in North America is a cold place to live in.", "fol": "all x.((FoundIn(x,NorthAmerica) & LivesIn(x,BorealTaigaZone)) -> IsColdPlace(x))", "prediction": ["all x.((BorealTaigaZone(x) & NorthAmerica(x)) -> ColdPlaceToLiveIn(x))", "all x.(BorealTaigaZone(x) -> ColdPlaceToLiveIn(x))", "all x y.((BorealTaigaZone(x) & NorthAmerica(y)) -> ColdPlaceToLiveIn(x,y))", "all x.((BorealTaigaZone(x) & NorthAmerica(x)) -> ColdPlaceToLiveIn(x))", "all x.((BorealTaigaZone(x) & NorthAmerica(x)) -> ColdPlaceToLive(x))", "all x.(BorealTaigaZone(x) -> ColdPlaceToLiveIn(x))", "all x y.((BorealTaigaZone(x) & NorthAmerica(y)) -> ColdPlaceToLiveIn(x,y))", "all x.(BorealTaigaZone(x) -> ColdPlaceToLive(x))", "all x y.((BorealTaigaZone(x) & NorthAmerica(y)) -> ColdPlaceToLive(x,y))", "all x.((BorealTaigaZone(x) & InNorthAmerica(x)) -> ColdPlaceToLiveIn(x))", "all x.((BorealTaigaZone(x) & NorthAmerica(x)) -> ColdPlaceToLive(x))", "all x.(BorealTaigaZoneInNorthAmerica(x) -> ColdPlaceToLiveIn(x))", "all x y.((BorealTaigaZone(x) & NorthAmerica(y)) -> ColdPlaceToLive(x,y))", "all x.(BorealTaigaZone(x) -> ColdPlaceToLive(x))", "all x y.((BorealTaigaZone(x) & NorthAmerica(y)) -> ColdPlaceToLiveIn(x))", "all x.((BoralTaigaZone(x) & NorthAmerica(x)) -> ColdPlaceToLiveIn(x))"]}
{"id": "folio_train_1331", "nl": "Taiga vole is typically much larger than most other North American voles, especially those from the genus Microtus.", "fol": "IsLargerThan(TaigaVole,MicrotusVole)", "prediction": ["all x.(TaigaVole(x) -> (LargerThanMostNorthAmericanVoles(x) & EspeciallyGenusMicrotus(x)))", "all x.(TaigaVole(x) -> (LargerThanMostNorthAmericanVoles(x) & EspeciallyGenusMicrotus(x)))", "all x.(TaigaVole(x) -> (LargerThanMostNorthAmericanVoles(x) & EspeciallyGenusMicrotusVoles(x)))", "all x.(TaigaVole(x) -> (LargerThanMostNorthAmericanVoles(x) & MicrotusVoles(x)))", "all x y z.((TaigaVole(x) & NorthAmericanVole(y) & MicrotusVole(z)) -> (Larger(x,y) & Larger(x,z)))", "all x.(TaigaVole(x) -> (LargerThanMostNorthAmericanVoles(x) & ParticularlyGenusMicrotus(x)))", "all x.(TaigaVole(x) -> (LargerThanMostNorthAmericanVoles(x) & EspeciallyGenusMicrotus(x)))", "all x y.((TaigaVole(x) & NorthAmericanVole(y)) -> (Larger(x,y) & Larger(x,y)))", "all x.(TaigaVole(x) -> (MuchLargerThanMostNorthAmericanVoles(x) & EspeciallyGenusMicrotus(x)))", "all x y z.((TaigaVole(x) & NorthAmericanVole(y) & MicrotusVole(z)) -> (LargerThan(x,y) & LargerThan(x,z)))", "all x.(TaigaVole(x) -> (LargerThanMostNordAmericanVoles(x) & EspeciallyGenusMicrotus(x)))", "all x.(TaigaVole(x) -> (LargerThanMostNorthAmericanVoles(x) & MicrotusVole(x)))", "all x y z.((TaigaVole(x) & NorthAmericanVole(y) & Microtus(z)) -> (Larger(x,y) & Larger(x,z)))", "all x y.((TaigaVole(x) & NorthAmericanVole(y)) -> (MuchLarger(x,y) & EspeciallyGenusMicrotus(x)))", "all x y.((TaigaVole(x) & NorthAmericanVole(y)) -> (LargerThan(x,y) & Microtus(y)))", "all x y.((TaigaVole(x) & NorthAmericanVole(y)) -> LargerThan(x,y))"]}
{"id": "folio_train_1332", "nl": "Cats like playing with taiga vole.", "fol": "CatsEnjoyPlayingWith(TaigaVole)", "prediction": ["all x.(Cat(x) -> LikesPlayingWithTaigaVole(x))", "all x y.((Cat(x) & TaigaVole(y)) -> LikesPlayingWith(x,y))", "all x y.((Cat(x) & TaigaVole(y)) -> LikesPlaying(x,y))", "all x.(Cat(x) -> LikesToPlayWithTaigaVole(x))", "all x y.((Cat(x) & TaigaVole(y)) -> LikesToPlayWith(x,y))", "all x.(Cat(x) -> PlaysWithTaigaVole(x))", "all x y.((Cat(x) & TaigaVole(y)) -> LikesToPlay(x,y))", "all x.(Cat(x) -> (LikesPlayingWithTaigaVole(x)))", "all x y.((Cat(x) & TaigaVole(y)) -> Likes(x,y))", "all x.(Cat(x) -> LikesToPlayWith(x,TaigaVole))", "all x.(Cat(x) -> LikesPlayingWith(x,TaigaVole))", "all x y z.((Cat(x) & TaigaVole(y) & Cat(z)) -> LikesPlayingWith(x,y,z))", "all x y z.((Cat(x) & TaigaVole(y) & TaigaVole(z)) -> LikesPlaying(x,y,z))", "all x.(Cat(x) -> (PlaysWithTaigaVole(x) | PlaysWithTaigaVole(x)))", "all x y z.((Cat(x) & TaigaVole(y) & TaigaVole(z)) -> LikesPlayingWith(x,y,z))", "all x.(Cat(x) -> LikesPlayingTaigaVole(x))"]}
{"id": "folio_train_1333", "nl": "Taiga vole's living place is not cold.", "fol": "-IsColdPlace(TaigaVole)", "prediction": ["all x.(TaigaVole(x) -> -Cold(x))", "all x.(TaigaVole(x) -> -ColdLivingPlace(x))", "exists x.(TaigaVole(x) & LivingPlace(x) & -Cold(x))", "all x.((TaigaVole(x) & LivingPlace(x)) -> -Cold(x))", "all x y.((TaigaVole(x) & LivingPlace(y)) -> -Cold(y))", "all x y.((TaigaVole(x) & LivingPlace(y)) -> -Cold(x))", "all x.(TaigaVole(x) -> -Cold(x))", "all x y.((TaigaVole(x) & LivingPlace(y)) -> -Cold(x,y))", "all x.(TaigaVole(x) -> -ColdLivingPlace(x))", "all x.(TaigaVole(x) -> LivingPlace(x))", "exists x.(TaigaVole(x) & LivingPlace(x,y) & -Cold(y))", "exists x.(TaigaVole(x) & -Cold(x))", "all x y.((TaigaVole(x) & LivingPlace(x,y)) -> -Cold(y))", "all x.(TaigaVole(x) & LivingPlace(x) -> -Cold(x))", "all x y.((TaigaVole(x) & LivingPlace(x,y)) -> -Cold(x))", "All x.(TaigaVole(x) -> -Cold(x))"]}
{"id": "folio_train_1334", "nl": "Every illness is in women or in men. ", "fol": "all x.(IsWoman(x) | IsMan(x))", "prediction": ["all x.(Illness(x) -> (InWomen(x) | InMen(x)))", "all x.(Illness(x) -> (In(x,Women) | In(x,Men)))", "all x.(Illness(x) -> (exists y.(Women(y) & In(x,y)) | exists z.(Men(z) & In(x,z)))))", "all x.(Illness(x) -> (exists y.(Woman(y) & In(x,y)) | exists z.(Men(z) & In(x,z)))))", "all x.(Illness(x) -> (exists y.(Women(y) & In(x,y))) | exists z.(Men(z) & In(x,z)))))", "all x.(Illness(x) -> (Women(x) | Men(x)))", "all x.(Illness(x) -> (exists y.(Woman(y) & In(x,y))) | exists z.(Men(z) & In(x,z)))))", "all x.(Illness(x) -> (InWomen(x) | InMen(x)))", "all x.(Illness(x) -> (exists y.(Women(y) & Illness(x,y)) | exists z.(Men(z) & Illness(x,z)))))", "all x.(Illness(x) -> (InFemale(x) | InFemale(x)))", "all x.(Illness(x) -> (exists y.(Women(y) & InIllness(x,y)) | exists z.(Men(z) & InIllness(x,z)))))", "all x.(Illness(x) -> (exists y.(Woman(y) & In(x,y)) | exists z.(Man(z) & In(x,z)))))", "all x.(Illness(x) -> (exists y.(Women(y) & In(x,y)) | Exists z.(Men(z) & In(x,z)))))", "all x.(Illness(x) -> (exists y.(Women(y) & In(x,y)) | exists z.(Men(z)) & In(x,z)))))", "all x.(Illness(x) -> (exists y.(Women(y) & Illness(y)) | exists z.(Men(z) & Illness(z)))))", "all x.(Illness(x) -> (In(x,women) | In(x,women)))"]}
{"id": "folio_train_1335", "nl": "No men have breast cancer.", "fol": "all x.(IsMan(x) -> -HasBreastCancer(x))", "prediction": ["-exists x.(Men(x) & BreastCancer(x))", "-exists x.(Men(x) & BreastCancerous(x))", "-exists x.(Men(x) & HasBreastCancer(x))", "all x.(Men(x) -> -HasBreastCancer(x))", "-exists x.(Men(x) & HasBreakCancerous(x))", "-exists x.(Men(x) & HasBreastCancerous(x))", "-exists x.(Men(x) & BreastCancel(x))", "-exists x.(Man(x) & BreastCancer(x))", "all x.(Men(x) -> -HasBreakCancerous(x))", "(-exists x.(Men(x) & BreastCancer(x)))", "-exists x.(Men(x) & BreastCancer(y))", "-exists x.(Men(x) & HasBreakCancer(x))", "-exists x.(Man(x) & HasBreastCancer(x))", "-exists x.(Men(x) & Has(x,BreastCancerous))", "-exists x.(Man(x) & BreastCancerous(x))", "all x.(Men(x) -> NoBreastCancer(x))"]}
{"id": "folio_train_1336", "nl": "Either breast cancer or non-breast cancer. ", "fol": "all x.(HasBreastCancer(x) | HasNonBreastCancer(x))", "prediction": ["exists x.(BreastCancer(x) | -BreastCancer(x))", "all x.((BreastCancer(x) | NonBreastCancer(x)) -> (BreastCancer(x) | NonBreastCancer(x)))", "exists x.(BreastCancer(x) | NonBreastCancer(x))", "all x.((BreastCancer(x) | NonBreastCancer(x)) -> (BreastCancer(x) | NonBreastCancer(x)))", "(exists x.(BreastCancer(x) & (BreastCancer(x) | NonBreastCancer(x))))", "exists x.(BreastCancer(x) | NonBreastCancer(x))", "(exists x.(BreastCancer(x) & (BreastCancer(x) | -BreastCancer(x))))", "((BreastCancer(x) | NonBreastCancer(x)))", "all x.((BreastCancer(x) | NonBreastCancer(x)) -> Cancer(x))", "all x.(BreastCancer(x) | NonBreastCancer(x))", "(exists x.(BreastCancer(x) & (BreastCancer(x) | NonBreastCancer(x)))", "all x.((BreastCancer(x) | NonBreastCancer(x)) -> Cancer(x))", "all x.((BreastCancer(x) | NonBreastCancer(x)) -> -(BreastCancer(x) | NonBreastCancer(x))))", "all x.(BreastCancer(x) | NonBreastCancer(x))", "(BreastCancer(x) | NonBreastCancer(x))", "all x.((BreastCancer(x) | NonBreastCancer(x)) -> -(BreastCancer(x) | NonBreastCancer(x)))"]}
{"id": "folio_train_1337", "nl": "No type of cancer is without a tumor.", "fol": "all x.(IsTypeOfCancer(x) -> -HasNoTumor(x))", "prediction": ["-exists x.(Cancer(x) & -HasTumor(x))", "all x.(Cancer(x) -> -HasTumor(x))", "all x.(Cancer(x) -> -exists y.(Tumor(y) & -exists z.(Tumor(z) & -exists w.(Tumor(w) & -exists w.(Tumor(w) & -exists w.(Tumor(w) & -exists w.(Tumor(w) & -exists w.(Tumor(x,w)))))", "all x.(Cancer(x) -> -exists y.(Tumor(y) & -exists z.(Tumor(z) & -exists w.(Tumor(w) & -exists w.(Tumor(w) & -exists w.(Tumor(w) & -exists w.(Tumor(w) & -exists w.(Tumor(y,w)))))", "all x.(Cancer(x) -> -exists y.(Tumor(y) & -exists z.(Tumor(z) & -exists w.(Tumor(w) & -exists w.(Tumor(w) & -exists w.(Tumor(w) & -exists w.(Tumor(w) & -exists w.(Tumor(x,w))))", "all x.(Cancer(x) -> -exists y.(Tumor(y) & -exists z.(Tumor(z) & -exists w.(Tumor(w) & -exists w.(Tumor(w) & -exists w.(Tumor(w) & -exists w.(Tumor(w) & -exists w.(Tumor(w)))))", "all x.(Cancer(x) -> -exists y.(Tumor(y) & -exists z.(Tumor(z) & -exists w.(Tumor(w) & -exists w.(Tumor(w) & -exists w.(Tumor(w) & -exists w.(Tumor(w) & -exists w.(Tumor(x,w))))))", "-exists x.(Cancer(x) & -exists y.(Tumor(y) & -exists z.(Tumor(z) & -exists w.(Tumor(w) & -exists w.(Tumor(w) & -exists w.(Tumor(w) & -exists w.(Tumor(w) & -(Tumor(w) & Tumor(w) & Tumor(w)))))", "-exists x.(Cancer(x) & -exists y.(Tumor(y) & -exists z.(Tumor(z) & -exists w.(Tumor(w) & -exists w.(Tumor(w) & -exists w.(Tumor(w) & -exists w.(Tumor(w) & -(Tumor(w) & Tumor(w)))))", "-exists x.(Cancer(x) & -exists y.(Tumor(y) & -exists z.(Tumor(z) & -exists w.(Tumor(w) & -exists w.(Tumor(w) & -exists w.(Tumor(w) & -exists w.(Tumor(w) & -(Tumor(w) & Tumor(w) & Tumor(w) & Tumor(w)))))", "-exists x.(Cancer(x) & -exists y.(Tumor(y) & -exists z.(Tumor(z) & -exists w.(Tumor(w) & -exists w.(Tumor(w) & -exists w.(Tumor(w) & -exists w.(Tumor(w) & -(Tumor(w)) & Tumor(w))))", "-exists x.(Cancer(x) & -exists y.(Tumor(y) & -exists z.(Tumor(z) & -exists w.(Tumor(w) & -exists w.(Tumor(w) & -exists w.(Tumor(w) & -exists w.(Tumor(w) & -(Tumor(w) & Tumor(x,w)))))", "-exists x.(Cancer(x) & -exists y.(Tumor(y) & -exists z.(Tumor(z) & -exists w.(Tumor(w) & -exists w.(Tumor(w) & -exists w.(Tumor(w) & -exists w.(Tumor(w) & -(Tumor(w) & Tumor(w) & Tumor(w) & Tumor(w) & Tumor(w)))))", "-exists x.(Cancer(x) & -exists y.(Tumor(y) & -exists z.(Tumor(z) & -exists w.(Tumor(w) & -exists w.(Tumor(w) & -exists w.(Tumor(w) & -exists w.(Tumor(w) & -(Tumor(w) & Tumor(w) & Tumor(w))))", "-exists x.(Cancer(x) & -exists y.(Tumor(y) & -exists z.(Tumor(z) & -exists w.(Tumor(w) & -exists w.(Tumor(w) & -exists w.(Tumor(w) & -exists w.(Tumor(w) & -(Tumor(w)) & Tumor(w)))))", "all x.(Cancer(x) -> -exists y.(Tumor(y) & -exists z.(Tumor(z) & -exists w.(Tumor(w) & -exists w.(Tumor(w) & -exists w.(Tumor(w) & -exists w.(Tumor(w) & -exists w.(Tumor(x,w) & -W)))))"]}
{"id": "folio_train_1338", "nl": "All non-breast cancers are a type of cancer.", "fol": "all x.(HasNonBreastCancer(x) -> IsTypeOfCancer(x))", "prediction": ["all x.(NonBreastCancer(x) -> Cancer(x))", "all x.((Cancer(x) & -Breast(x)) -> Cancer(x))", "all x.((Cancer(x) & NonBreast(x)) -> Cancer(x))", "all x.((Cancerous(x) & -Breast(x)) -> Cancer(x))", "all x.((NonBreastCancer(x) & -BreastCancer(x)) -> Cancer(x))", "all x.((NonBreastCancer(x) & Cancer(x)) -> Cancer(x))", "all x.((NonBreastCancer(x) & TypeOfCancer(x)) -> Cancer(x))", "all x.((NonBreastCancer(x) & Cancer(x)) -> TypeOfCancer(x))", "all x.((Cancerous(x) & NonBreast(x)) -> Cancer(x))", "all x.((Cancer(x) & -Breast(x)) -> Cancer(x))", "all x.((NonBreastCancer(x) & Cancer(x)) -> CancerType(x))", "all x.((Cancer(x) & -Breast(x)) -> TypeOfCancer(x))", "all x.((NonBreastCancer(x) & Cancer(x)) -> TypeOf(x))", "all x.((Cancer(x) & -Breast(x)) -> CancerType(x))", "all x.(NonBreastCancer(x) -> CancerType(x))", "all x.((NonBreastCancer(x) & Cancer(x)) -> TypeOf(x,y))"]}
{"id": "folio_train_1339", "nl": "If adenocarcinoma is a type of cancer or without a tumor, then adenocarcinoma is in women or without a tumor.", "fol": "(((IsTypeOfCancer(Adenocarcinoma) | HasNoTumor(Adenocarcinoma)) -> IsWoman(Adenocarcinoma)) | HasNoTumor(Adenocarcinoma))", "prediction": ["all x.((Adenocarcinoma(x) & (TypeOfCancer(x) | WithoutTumor(x))) -> (InWomen(x) | WithoutTumor(x)))", "all x.((Adenocarcinoma(x) & (TypeOfCancer(x) | -Tumor(x))) -> (InWomen(x) | -Tumor(x)))", "all x.((Adenocarcinoma(x) & (Cancer(x) | -Tumor(x))) -> (InWomen(x) | -Tumor(x)))", "all x.((Adenocarcinoma(x) & (Cancer(x) | WithoutTumor(x))) -> (InWomen(x) | WithoutTumor(x)))", "all x.((Adenocarcinoma(x) & (TypeOfCancerous(x) | WithoutTumor(x))) -> (InWomen(x) | WithoutTumor(x)))", "all x.((Adenocarcinoma(x) & (TypeOfCancer(x) | -TypeOfTumor(x))) -> (InWomen(x) | -TypeOfTumor(x)))", "all x.((Adenocarcinoma(x) & (TypeOfCancer(x) | -Tumor(x))) -> (InWomen(x) | WithoutTumor(x)))", "all x.((Adenocarcinoma(x) & (TypeOfCancer(x) | WithoutTumor(x))) -> (Adenocarcinoma(x) & (InWomen(x) | WithoutTumor(x))))", "all x.((Adenocarcinoma(x) & (TypeOfCancer(x) | -Tumor(x))) -> (Adenocarcinoma(x) & (InWomen(x) | -Tumor(x))))", "all x.((Adenocarcinoma(x) & (Cancerous(x) | -Tumor(x))) -> (InWomen(x) | -Tumor(x)))", "all x.((Adenocarcinoma(x) & (TypeOfCancerous(x) | -Tumor(x))) -> (InWomen(x) | -Tumor(x)))", "all x.((Adenocarcinoma(x) & (Cancer(x) | -Tumor(x))) -> (InWomen(x) | WithoutTumor(x)))", "all x.((Adenocarcinoma(x) & (Cancer(x) | -Cancer(x))) -> (InWomen(x) | -Cancer(x)))", "all x.((Adenocarcinoma(x) & (TypeOfCancer(x) | WithoutTumor(x))) -> (InWomen(x) | -WithTumor(x)))", "all x.((Adenocarcinoma(x) & (Cancer(x) | NoTumor(x))) -> (InWomen(x) | WithoutTumor(x)))", "all x.((Adenocarcinoma(x) & (Cancer(x) | NoTumor(x))) -> (InWomen(x) | NoTumor(x)))"]}
{"id": "folio_train_1340", "nl": "Adenocarcinoma is a breast cancer.", "fol": "HasBreastCancer(Adenocarcinoma)", "prediction": ["all x.(Adenocarcinoma(x) -> BreastCancer(x))", "all x.(Adenocarcinoma(x) -> BreastCancerous(x))", "all x.(Adenocarcinoma(x) -> BreastCancer(x))", "all x y.((Adenocarcinoma(x) & BreastCancer(y)) -> BreastCancer(x,y))", "all x y.((Adenocarcinoma(x) & BreastCancer(y)) -> BreastCancer(x))", "all x.((Adenocarcinoma(x) & BreastCancer(x)) -> BreastCancer(x))", "all x y.((Adenocarcinoma(x) & BreastCancerous(y)) -> BreastCancer(x))", "all x y.((Adenocarcinoma(x) & BreastCancerous(y)) -> BreastCancer(x,y))", "all x y.((Adenocarcinoma(x) & BreastCancer(y)) -> BreastCancerous(x))", "all x y.((Adenocarcinoma(x) & BreastCancer(y)) -> BreastCancerous(x,y))", "all x y z.((Adenocarcinoma(x) & BreastCancer(y) & BreastCancer(z)) -> BreastCancer(x,y,z))", "all x.(Adenocarcinoma(x) -> BreastCancerous(x))", "all x y.((Adenocarcinoma(x) & BreastCancerous(y)) -> BreastCancerous(x))", "all x y.((Adenocarcinoma(x) & BreastCancerous(y)) -> BreastCancerous(x,y))", "all x.((Adenocarcinoma(x) & BreastCancer(x)) -> BreastCancerous(x))", "all x y z.((Adenocarcinoma(x) & BreastCancer(y) & BreastCancerous(z)) -> BreastCancer(x,y,z))"]}
{"id": "folio_train_1341", "nl": "Adenocarcinoma is in women.", "fol": "IsWoman(Adenocarcinoma)", "prediction": ["all x.(Adenocarcinoma(x) -> InWomen(x))", "all x y.((Adenocarcinoma(x) & Woman(y)) -> In(x,y))", "all x y.((Adenocarcinoma(x) & Women(y)) -> In(x,y))", "all x.(Adenocarcinoma(x) -> InFemales(x))", "all x.(Adenocarcinoma(x) -> InWomen(x))", "all x y.((Adenocarcinoma(x) & Women(y)) -> InFemales(x,y))", "all x y.((Adenocarcinoma(x) & Woman(y)) -> IsIn(x,y))", "all x.(Adenocarcinoma(x) -> In(x,women))", "all x y.((Adenocarcinoma(x) & Woman(y)) -> InFemales(x,y))", "all x y.((Adenocarcinoma(x) & Women(y)) -> IsIn(x,y))", "all x y.((Adenocarcinoma(x) & Woman(y)) -> InFemale(x,y))", "all x y.((Adenocarcinoma(x) & Woman(y)) -> LocatedIn(x,y))", "All x.(Adenocarcinoma(x) -> InWomen(x))", "all x y.((Adenocarcinoma(x) & Woman(y)) -> FoundIn(x,y))", "all x y.((Adenocarcinoma(x) & Women(y)) -> FoundIn(x,y))", "all x.((Adenocarcinoma(x) & InWomen(x)) -> InFemales(x))"]}
{"id": "folio_train_1342", "nl": "If adenocarcinoma is in women or without a tumor, then adenocarcinoma is without a tumor and a non-breast cancer.", "fol": "((IsWoman(Adenocarcinoma) | HasNoTumor(Adenocarcinoma)) -> (HasNoTumor(Adenocarcinoma) & HasNonBreastCancer(Adenocarcinoma)))", "prediction": ["all x.((Adenocarcinoma(x) & (InWomen(x) | WithoutTumor(x))) -> (-Tumor(x) & NonBreastCancer(x)))", "all x.((Adenocarcinoma(x) & (InWomen(x) | WithoutTumor(x))) -> (-Tumor(x) & -BreastCancer(x)))", "all x.((Adenocarcinoma(x) & (InWomen(x) | WithoutTumor(x))) -> (-HasTumor(x) & -NonBreastCancer(x)))", "all x.((Adenocarcinoma(x) & (InWomen(x) | -Tumor(x))) -> (-Tumor(x) & NonBreastCancer(x)))", "all x.((Adenocarcinoma(x) & (InWomen(x) | WithoutTumor(x))) -> (-Tumor(x) & -BreastCancer(x)))", "all x.((Adenocarcinoma(x) & (InWomen(x) | WithoutTumor(x))) -> (WithoutTumor(x) & NonBreastCancer(x)))", "all x.((Adenocarcinoma(x) & (InWomen(x) | -Tumor(x))) -> (-Tumor(x) & -BreastCancer(x)))", "all x.((Adenocarcinoma(x) & (InWomen(x) | WithoutTumor(x))) -> (-Adenocarcinoma(x) & NonBreastCancer(x)))", "all x.((Adenocarcinoma(x) & (InWomen(x) | WithoutTumor(x))) -> (-HasTumor(x) & NonBreastCancer(x)))", "all x.((Adenocarcinoma(x) & (InWomen(x) | WithoutTumor(x))) -> (-WithTumor(x) & -NonBreastCancer(x)))", "all x.((Adenocarcinoma(x) & (InWomen(x) | -Tumor(x))) -> (-Tumor(x) & -BreastCancer(x)))", "all x.((Adenocarcinoma(x) & (InWomen(x) | WithoutTumor(x))) -> (-Tumor(x) & NonBreastCancer(x)))", "all x.((Adenocarcinoma(x) & (InWomen(x) | WithoutTumor(x))) -> (-Tumor(x) & -NonBreastCancer(x)))", "all x.((Adenocarcinoma(x) & (InWomen(x) | WithoutTumor(x))) -> (-BreastCancer(x) & -BreastCancer(x)))", "all x.((Adenocarcinoma(x) & (InWomen(x) | WithoutTumor(x))) -> (-Adenocarcinoma(x) & -BreastCancer(x)))", "all x.((Adenocarcinoma(x) & (InWomen(x) | NoTumor(x))) -> (-Tumor(x) & NonBreastCancer(x)))"]}
{"id": "folio_train_1343", "nl": "Some monitors equipped in the lab are produced by the company named AOC. ", "fol": "exists x.(EquippedInLab(x) & ProducedByAOC(x))", "prediction": ["exists x.(Monitor(x) & EquippedInLab(x) & ProducedBy(x,AOC))", "exists x.(Monitor(x) & EquippedInLab(x) & ProducedByAOC(x))", "all x.((Monitor(x) & EquippedInLab(x)) -> ProducedByAOC(x))", "exists x.(Monitor(x) & EquippedInLab(x) & ProducedByCompany(x))", "exists x.(Monitor(x) & EquippedInLab(x))", "exists x.(Monitor(x) & EquippedInLab(x) & AOC(x))", "exists x y.(Monitor(x) & EquippedInLab(x,y) & ProducedBy(x,y))", "exists x.(Monitor(x) & EquippedInLab(x) & CompanyNamedAOC(x))", "exists x.(Monitor(x) & EquippedInLab(x) & ProducedBy(x AOC))", "exists x.(Monitor(x) & EquippedInLab(x)) -> ProducedByAOC(x))", "exists x.(Monitor(x) & EquippedInLab(x) & ProducedByCompany(x,AOC))", "exists x.(Monitor(x) & EquippedInLab(x) & ProducedBy(x,AOC))", "all x y.((Monitor(x) & EquippedInLab(x,y)) -> ProducedBy(x,y))", "exists x.(Monitor(x) & EquippedInLab(x) & CreatedByAOC(x))", "exists x.(Monitor(x) & EquippedInLab(x) & ProducedBy(x) & AOC(x))", "all x y.((Monitor(x) & EquippedInLab(x)) -> ProducedBy(x,y))"]}
{"id": "folio_train_1344", "nl": "All monitors equipped in the lab are cheaper than their original prices. ", "fol": "all x.(EquippedInLab(x) -> IsCheaperThanOriginalPrice(x))", "prediction": ["all x.((Monitor(x) & EquippedInLab(x)) -> CheaperThanOriginalPrices(x))", "all x.((Monitor(x) & EquippedInLab(x)) -> CheaperThanOriginalPrice(x))", "all x.((Monitor(x) & EquippedInLab(x)) -> CheaperThanOriginalPrices(x))", "all x.((Monitor(x) & EquippedInLab(x)) -> LowerThanOriginalPrices(x))", "all x.((Monitor(x) & EquippedInLab(x)) -> LowerThanOriginalPrice(x))", "all x.((Monitor(x) & EquippedInLab(x)) -> BoughtByOriginalPrices(x))", "all x.((Monitor(x) & EquippedInLab(x)) -> LowerThanOriginalPrices(x))", "all x.((Monitor(x) & EquippedInLab(x)) -> BoughtByOriginalPrice(x))", "all x.((Monitor(x) & EquippedInLab(x)) -> BoughtByOriginalPrices(x))", "all x.((Monitor(x) & EquippedInLab(x)) -> CheaperThanOrderPrices(x))", "all x.((Monitor(x) & EquippedInLab(x)) -> BoughtFasterThanOriginalPrice(x))", "all x y.((Monitor(x) & EquippedInLab(x)) -> CheaperThanOriginalPrices(x,y))", "all x.((Monitor(x) & EquippedInLab(x)) -> BlowerThanOriginalPrice(x))", "all x y.((Monitor(x) & EquippedInLab(x)) -> CheaperThanOriginalPrice(y))", "all x y.((Monitor(x) & EquippedInLab(x)) -> CheaperThanOriginalPrice(x,y))", "all x.((Monitor(x) & EquippedInLab(x)) -> CheaperThanPrices(x))"]}
{"id": "folio_train_1345", "nl": "If the monitor is cheaper than its original prices, then its resolution is 1080p. ", "fol": "all x.(IsCheaperThanOriginalPrice(x) -> HasResolution1080p(x))", "prediction": ["all x.((Monitor(x) & CheaperThanOriginalPrices(x)) -> Resolution1080p(x))", "all x.((Monitor(x) & CheaperThanOriginalPrices(x)) -> Resolution1080p(x))", "all x.((Monitor(x) & CheaperThanOriginalPrices(x)) -> Resolution(x,1080p))", "all x.((Monitor(x) & CheaperThanOriginalPrices(x)) -> Resolution(x,1080p))", "all x.((Monitor(x) & CheaperThanOriginalPrices(x)) -> Resolution(x,1080))", "all x.((Monitor(x) & CheaperThanOriginalPrices(x)) -> Resolution(x,1080))", "all x.((Monitor(x) & CheaperThanOriginalPrices(x)) -> ResolutionIs1080p(x))", "all x.((Monitor(x) & LowerThanOriginalPrices(x)) -> Resolution1080p(x))", "all x.((Monitor(x) & CheaperThanOriginalPrices(x)) -> ResolutionIs1080p(x))", "all x.((Monitor(x) & LowerThanOriginalPrices(x)) -> Resolution1080p(x))", "all x.((Monitor(x) & BoughtByOriginalPrices(x)) -> Resolution1080p(x))", "all x.((Monitor(x) & CheaperThanOriginalPrices(x)) -> Resolution10080p(x))", "all x.((Monitor(x) & CheaperThanOriginalPrices(x)) -> Resolution10080p(x))", "all x.((Monitor(x) & LowerThanOriginalPrices(x)) -> Resolution(x,1080p))", "all x.((Monitor(x) & LowerThanOriginalPrices(x)) -> Resolution(x,1080))", "all x.((Monitor(x) & BoughtByOriginalPrices(x)) -> Resolution(x,1080p))"]}
{"id": "folio_train_1346", "nl": "If a monitor is with a resolution of 1080p, then it does not support the type-c port. ", "fol": "all x.(HasResolution1080p(x) -> -SupportsTypeCPort(x))", "prediction": ["all x.((Monitor(x) & Resolution(x,10)) -> -SupportsTypeCPort(x))", "all x.((Monitor(x) & Resolution(x,1080)) -> -SupportsTypeCPort(x))", "all x.((Monitor(x) & Resolution1080p(x)) -> -SupportsTypeCPort(x))", "all x.((Monitor(x) & Resolution(x,1008)) -> -SupportsTypeCPort(x))", "all x.((Monitor(x) & ResolutionOf1080p(x)) -> -SupportsTypeCPort(x))", "all x.((Monitor(x) & Resolution1080P(x)) -> -SupportsTypeCPort(x))", "all x.((Monitor(x) & Resolution(x,1080p)) -> -SupportsTypeCPort(x))", "all x.((Monitor(x) & Resolution(x,1001)) -> -SupportsTypeCPort(x))", "all x.((Monitor(x) & Resolution(x,10080)) -> -SupportsTypeCPort(x))", "all x.((Monitor(x) & Resolution(x,720)) -> -SupportsTypeCPort(x))", "all x.((Monitor(x) & Resolution(x,1000)) -> -SupportsTypeCPort(x))", "all x.((Monitor(x) & ResolutionThan(x,10)) -> -SupportsTypeCPort(x))", "all x.((Monitor(x) & ResolutionOf(x,10)) -> -SupportsTypeCPort(x))", "all x.((Monitor(x) & Resolution(x,10)) -> -SupportTypeCPort(x))", "all x.((Monitor(x) & Resolution1080p(x)) -> -SupportTypeCPort(x))", "all x.((Monitor(x) & Resolution(x,10)) -> -TypeCPort(x))"]}
{"id": "folio_train_1347", "nl": "LG34 is equipped in the lab.  ", "fol": "EquippedInLab(Lg34)", "prediction": ["all x.(LG34(x) -> EquippedInLab(x))", "all x y.((LG34(x) & Lab(y)) -> EquippedIn(x,y))", "all x y.((LG34(x) & Lab(y)) -> Equipped(x,y))", "all x y z.((LG34(x) & Lab(y) & Lab(z)) -> EquippedIn(x,y,z))", "all x y z.((LG34(x) & Lab(y) & Lab(z)) -> Equipped(x,y,z))", "all x.((LG34(x) & EquippedInLab(x)) -> EquippedInLab(x))", "all x y z.((LG34(x) & Lab(y) & Lab(z)) -> Equipped(x,y))", "all x y.((LG34(x) & Lab(y)) -> EquippedWith(x,y))", "all x.( LG34(x) -> EquippedInLab(x))", "all x y.((LG34(x) & Lab(y) & EquippedIn(x,y)) -> EquippedIn(x,y))", "all x y z.((LG34(x) & Lab(y) & Lab(z)) -> EquippedWith(x,y,z))", "all x y z.((LG34(x) & Lab(y) & Lab(z)) -> EquippedIn(x,y))", "all x.(Lg34(x) -> EquippedInLab(x))", "all x y z.((LG34(x) & Lab(y) & Lab(z) & EquippedIn(x,y,z)) -> EquippedIn(x,y))", "all x y z.((LG34(x) & Lab(y) & Lab(z) & EquippedIn(x,y,z)) -> EquippedIn(x,y,z))", "all x y z.((LG34(x) & Lab(y) & Lab(z) & EquippedIn(x,y)) -> EquippedIn(x,z))"]}
{"id": "folio_train_1348", "nl": "LG34 machine is produced by AOC.", "fol": "ProducedByAOC(Lg34)", "prediction": ["all x.(LG34Machine(x) -> ProducedByAOC(x))", "all x.(LG34(x) -> ProducedByAOC(x))", "all x y.((LG34Machine(x) & AOC(y)) -> ProducedBy(x,y))", "all x y.((Laptop(x) & AOC(y)) -> ProducedBy(x,y))", "All x.(LG34Machine(x) -> ProducedByAOC(x))", "all x y.((LG34(x) & AOC(y)) -> ProducedBy(x,y))", "all x.((Machine(x) & LG34(x)) -> ProducedByAOC(x))", "all x.((Laptop(x) & AOC(x)) -> ProducedBy(x,LG34))", "all x.(Lg34Machine(x) -> ProducedByAOC(x))", "All x.(LG34(x) -> ProducedByAOC(x))", "all x.((LG34Machine(x) & AOC(x)) -> ProducedBy(x))", "all x.( LG34Machine(x) -> ProducedByAOC(x))", "all x.(LG34Machine(x) -> ProducedByAOC(x))", "all x.((LG34Machine(x) & AOC(x)) -> ProducedBy(x,y))", "all x.(Lg34(x) -> ProducedByAOC(x))", "all x.(Laptop(x) -> ProducedByAOC(x))"]}
{"id": "folio_train_1349", "nl": "LG34 machine does not support the type-c port.", "fol": "-SupportsTypeCPort(Lg34)", "prediction": ["all x.(LG34(x) -> -SupportsTypeCPort(x))", "all x.(LG34Machine(x) -> -SupportsTypeCPort(x))", "all x.((Machine(x) & LG34(x)) -> -SupportsTypeCPort(x))", "all x.((Laptop(x) & LG34(x)) -> -SupportsTypeCPort(x))", "all x.((LG34Machine(x) & -SupportsTypeCPort(x)) -> -SupportsTypeCPort(x))", "all x.((Machine(x) & LG34) & -SupportsTypeCPort(x)) -> -SupportsTypeCPort(x))", "all x.(Lg34(x) -> -SupportsTypeCPort(x))", "all x y.((Laptop(x) & LG34(y)) -> -SupportsTypeCPort(x,y))", "all x.(Lg34Machine(x) -> -SupportsTypeCPort(x))", "all x.((Laptop(x) & LG34)) -> -SupportsTypeCPort(x))", "(-SupportsTypeCPort(LG34))", "all x.((LG34Machine(x) & -TypeCPort(x)) -> -SupportsTypeCPort(x))", "all x y.((Laptop(x) & LG34(y)) -> -SupportsTypeCPort(y,x))", "all x.((LG34Machine(x) & -TypeCPort(x)) -> -Supports(x,TypeCPort))", "all x.((LG34Machine(x) & -TypeCPort(x)) -> -Supports(x,y))", "all x.((Machine(x) & LG34(x)) -> -SupportTypeCPort(x))"]}
{"id": "folio_train_1350", "nl": "LG34 is not with a resolution of 1080p.", "fol": "-HasResolution1080p(Lg34)", "prediction": ["all x.(LG34(x) -> -Resolution(x,1080))", "all x.(LG34(x) -> -Resolution(x,10))", "all x.(LG34(x) -> -Resolution(x,1008))", "all x.(LG34(x) -> -Resolution(x,1080p))", "all x.(LG34(x) -> -ResolutionOf1080p(x))", "all x.(LG34(x) -> -Resolution(x,10080))", "all x.(LG34(x) -> -HasResolution(x,1080))", "all x.(LG34(x) -> -Resolution1080p(x))", "all x.(LG34(x) -> -(Resolution(x,10) & 1080p(x)))", "all x.(LG34(x) -> -(Resolution(x,1080)))", "all x.(LG34(x) -> -WithResolution(x,1080))", "all x.(LG34(x) -> -HasResolution(x,10))", "all x.(LG34(x) -> -Resolution(x,720))", "exists x.(LG34(x) & -Resolution(x,1080))", "all x.(LG34(x) -> -ResolutionOf(x,1080))", "all x.(LG34(x) -> -Resolution(x,1081))"]}
{"id": "folio_train_1351", "nl": "All fruits sold in Boston are shipped from Columbia. ", "fol": "all x.(FruitsSoldInBoston(x) -> FruitsShippedFromColumbia(x))", "prediction": ["all x.((Fruit(x) & SoldInBoston(x)) -> ShippedFromColumbia(x))", "all x.((Fruit(x) & SoldIn(x,Boston)) -> ShippedFromColumbia(x))", "all x.((Fruit(x) & SoldInBoston(x)) -> ShippedFromColumbus(x))", "all x y.((Fruit(x) & SoldInBoston(x) & Columbia(y)) -> ShippedFrom(x,y))", "all x.((Fruit(x) & SoldInBoston(x)) -> ShippedFromColorado(x))", "all x.((Fruit(x) & SellsInBoston(x)) -> ShippedFromColumbia(x))", "all x.(Fruit(x) & SoldInBoston(x) -> ShippedFromColumbia(x))", "all x.((Fruit(x) & SoldInBoston(x)) -> ShipsFromColumbia(x))", "all x.((Fruit(x) & SoldIn(x,Boston)) -> ShippedFromColumbus(x))", "all x y.((Fruit(x) & SoldInBoston(x,y)) -> ShippedFromColumbia(x))", "all x y.((Fruit(x) & SoldIn(x,Boston)) -> ShippedFromColumbia(x))", "all x.((Fruit(x) & SoldInBoston(x)) -> ShippedFromColumbia(x))", "all x y.((Fruit(x) & SaleInBoston(x,y)) -> ShippedFromColumbia(x))", "all x.(Fruit(x) & SoldIn(x,Boston) -> ShippedFromColumbia(x))", "all x.(Fruit(x) -> ShippedFromColumbia(x))", "all x y.((Fruit(x) & SaledInBoston(x,y)) -> ShippedFromColumbia(x))"]}
{"id": "folio_train_1352", "nl": "Some fruits sold in New Haven are shipped from Mexico.", "fol": "exists x.(FruitsSoldInNewHaven(x) & FruitsShippedFromMexico(x))", "prediction": ["exists x.(Fruit(x) & SoldInNew Haven(x) & ShippedFromMexico(x))", "exists x.(Fruit(x) & SoldInNewHaven(x) & ShippedFromMexico(x))", "exists x.(Fruit(x) & SoldInNewHunt(x) & ShippedFromMexico(x))", "exists x.(Fruit(x) & SoldInNewHonor(x) & ShippedFromMexico(x))", "exists x.(Fruit(x) & SoldInNewHunt(x) & ShippedFrom(x,Mexico))", "exists x.(Fruit(x) & SoldInNewHandon(x) & ShippedFromMexico(x))", "exists x.(Fruit(x) & SoldInNew Haven(x) & ShippedFrom(x,Mexico))", "exists x.(Fruit(x) & SoldInNewHann(x) & ShippedFromMexico(x))", "exists x.(Fruit(x) & SoldInNewHanaway(x) & ShippedFromMexico(x))", "exists x.(Fruit(x) & SoldInNewHannon(x) & ShippedFromMexico(x))", "exists x.(Fruit(x) & SoldInNewHaven(x) & ShippedFrom(x,Mexico))", "exists x.(Fruit(x) & SoldIn(x,New Haven) & ShippedFrom(x,Mexico))", "exists x.(Fruit(x) & SoldInNewHanover(x) & ShippedFromMexico(x))", "exists x.(Fruit(x) & SoldInNewHann(x) & ShippedFrom(x,Mexico))", "exists x.(Fruit(x) & SoldInNewHandton(x) & ShippedFromMexico(x))", "exists x.(Fruit(x) & SoldInNewHannock(x) & ShippedFromMexico(x))"]}
{"id": "folio_train_1353", "nl": "No fruits shipped from Columbia are fruits sold in New York. ", "fol": "all x.(FruitsShippedFromColumbia(x) -> -FruitsSoldInNewYork(x))", "prediction": ["all x.((Fruit(x) & ShippedFromColumbia(x)) -> -FruitSoldInNewYork(x))", "-exists x.(Fruit(x) & ShippedFromColumbia(x) & -SoldInNewYork(x))", "all x.((Fruit(x) & ShippedFromColumbia(x)) -> -SoldInNewYork(x))", "all x.((Fruit(x) & ShippedFromColumbia(x)) -> FruitSoldInNewYork(x))", "all x y.((Fruit(x) & ShippedFromColumbia(x) & NewYork(y)) -> -FruitSoldIn(x,y))", "all x.((Fruit(x) & ShippedFromColumbia(x)) -> (FruitSoldInNewYork(x)))", "all x.((Fruit(x) & ShippedFromColumbia(x)) -> NoFruitSoldInNewYork(x))", "-exists x.(Fruit(x) & ShippedFromColumbia(x) & NewYork(x))", "(-exists x.(Fruit(x) & ShippedFromColumbia(x)) & -exists y.(Fruit(y) & SoldInNewYork(y))))", "-exists x.(Fruit(x) & ShippedFromColumbia(x) & NewYork(y))", "-exists x.(Fruit(x) & ShippedFromColumbia(x) & NewYork(y) & FruitSoldIn(x,y))", "all x.((Fruit(x) & ShippedFromColumbia(x)) -> FruitSoldInNewYork(x))", "-exists x.(Fruit(x) & ShippedFromColumbia(x) & -Fruit(x) & SoldInNewYork(x))", "all x y.((Fruit(x) & ShippedFromColumbia(x,y)) -> -FruitSoldInNewYork(x))", "all x y.((Fruit(x) & ShippedFromColumbia(x,y)) -> -FruitSoldInNewYork(x,y))", "all x.((Fruit(x) & ShippedFromColumbia(x)) -> NewYorkFruit(x))"]}
{"id": "folio_train_1354", "nl": "Avocadoe are a kind of fruit sold in New York or Boston. ", "fol": "(FruitsSoldInNewYork(Avocado) | FruitsSoldInBoston(Avocado))", "prediction": ["all x.(Avocado(x) -> (Fruit(x) & (SoldInNewYork(x) | SoldInBoston(x))))", "all x.(Avocado(x) -> (Fruit(x) & (SoldInNewYork(x) | SoldInBoston(x))))", "all x.(Avocado(x) -> (Fruit(x) & (SoldIn(x,NewYork) | SoldIn(x,Boston))))", "all x.(Avocado(x) -> (Fruit(x) & (SoldInNewYork(x) | SoldInBoston(x))))", "all x.(Avocado(x) -> (SoldInNewYork(x) | SoldInBoston(x)))", "all x.(Avocado(x) -> (SoldIn(x,NewYork) | SoldIn(x,Boston)))", "all x.(Avocado(x) -> (Fruit(x) & (SoldIn(x,NewYork) | SoldIn(x,Boston))))", "all x.(Avocata(x) -> (Fruit(x) & (SoldInNewYork(x) | SoldInBoston(x))))", "all x.(Avocados(x) -> (Fruit(x) & (SoldInNewYork(x) | SoldInBoston(x))))", "all x.(Avocado(x) -> (Fruit(x) & (SoldInNewYork(x) | -SoldInBoston(x))))", "all x.(Avocado(x) -> (Fruit(x) & SoldIn(x,NewYork) | SoldIn(x,Boston)))", "all x.((Avocado(x) & (SoldInNewYork(x) | SoldInBoston(x))) -> Fruit(x))", "all x.(Avocado(x) -> (Fruit(x) & (SoldInNewYork(x) | SellsInBoston(x))))", "all x.(Apple(x) -> (Fruit(x) & (SoldInNewYork(x) | SoldInBoston(x))))", "all x.(Avocado(x) -> (Fruit(x) & (SoldInNewYork(x) | SoldInBrooklyn(x))))", "all x.(Avocado(x) -> (Fruit(x,NewYork) | Fruit(x,Boston)))"]}
{"id": "folio_train_1355", "nl": "Avocadoe are either shipped from Columbia and sold in New Haven, or neither shipped from Columbia nor sold in New Haven. ", "fol": "-((FruitsShippedFromColumbia(Avocado) & -FruitsSoldInNewHaven(Avocado)) | (-FruitsShippedFromColumbia(Avocado) & FruitsSoldInNewHaven(Avocado)))", "prediction": ["all x.(Avocado(x) -> (ShippedFromColumbia(x) & SoldInNew Haven(x)) | (-ShippedFromColumbia(x) & SoldInNew Haven(x))))", "all x.(Avocado(x) -> (ShippedFromColumbia(x) & SoldInNew Haven(x)) | -ShippedFromColumbia(x) & SoldInNew Haven(x)))", "all x.(Avocado(x) -> (ShippedFromColumbia(x) & SoldInNew Haven(x) | -ShippedFromColumbia(x) & SoldInNew Haven(x)))", "all x.(Avocado(x) -> ((ShippedFromColumbia(x) & SoldInNew Haven(x)) | -ShippedFromColumbia(x) & SoldInNew Haven(x)))", "all x.(Avocado(x) -> ((ShippedFromColumbia(x) & SoldInNew Haven(x)) | (-ShippedFromColumbia(x) & SoldInNew Haven(x))))", "all x.(Avocado(x) -> ((ShippedFromColumbia(x) & SoldInNew Haven(x)) | -ShippedFromColumbia(x) & SoldInNew Haven(x))))", "all x.(Avocado(x) -> ((ShippedFromColumbia(x) & SoldInNew Haven(x)) | (-ShippedFromColumbia(x) & SoldInNew Haven(x)))))", "all x.(Avocado(x) -> (ShippedFromColumbia(x) & SoldInNew Haven(x)) | -ShippedFromColumbia(x) & -SoldInNew Haven(x)))", "all x.(Avocado(x) -> ((ShippedFromColumbia(x) & SoldInNew Haven(x)) | (-ShippedFromColumbia(x) & SoldInNew Haven(x))))", "all x.(Avocado(x) -> (ShippedFromColumbia(x) & SoldInNew Haven(x) | (-ShippedFromColumbia(x) & SoldInNew Haven(x))))", "all x.(Avocado(x) -> (ShippedFromColumbia(x) & SoldInNew Haven(x)) | (-ShippedFromColumbia(x) & SoldInNew Haven(x))))", "all x y.((Avocado(x) & Columbia(y)) -> (ShippedFrom(x,y) & SoldInNew Haven(x)) | (-ShippedFrom(x,y) & SoldInNew Haven(x))))", "all x.(Avocado(x) -> (ShippedFromColumbia(x) & SoldInNew Haven(x)) | -ShippedFromColumbia(x) & SoldInNew Haven(x)))", "(all x.(Avocado(x) -> (ShippedFromColumbia(x) & SoldInNew Haven(x))) | (-ShippedFromColumbia(x) & SoldInNew Haven(x))))", "all x.(Avocado(x) -> ((ShippedFromColumbia(x) & SoldInNew Haven(x)) | -ShippedFromColumbia(x) & SoldInNew Haven(x)))", "all x.(Avocado(x) -> ((ShippedFromColumbia(x) & SoldInNew Haven(x)) | (-ShippedFromColumbia(x) & SoldInNew Haven(x)))))"]}
{"id": "folio_train_1356", "nl": "Avocados are a kind of fruit sold in New York.", "fol": "FruitsSoldInNewYork(Avocado)", "prediction": ["all x.(Avocado(x) -> (Fruit(x) & SoldInNewYork(x)))", "all x.(Avocado(x) -> (Fruit(x) & SoldInNewYork(x)))", "all x.(Avocado(x) -> (SoldInNewYork(x) & Fruit(x)))", "all x y.((Avocado(x) & NewYork(y)) -> (Fruit(x,y) & SoldIn(x,y)))", "all x.(Avocado(x) -> (Fruit(x) & SoldIn(x,NewYork)))", "all x y.((Avocado(x) & NewYork(y)) -> SoldIn(x,y))", "all x.(Avocat(x) -> (Fruit(x) & SoldInNewYork(x)))", "all x y.((Avocado(x) & NewYork(y)) -> FruitSoldIn(x,y))", "all x.(Avocado(x) -> (SoldInNewYork(x) | SoldInNewYork(x)))", "all x y z.((Avocado(x) & NewYork(y) & Fruit(z)) -> SoldIn(x,y,z))", "all x y.((Avocado(x) & NewYork(y)) -> (Fruit(x) & SoldIn(x,y)))", "all x.(Avocados(x) -> (Fruit(x) & SoldInNewYork(x)))", "all x.(Avocado(x) -> (Fruit(x,NewYork) & SoldIn(x,NewYork)))", "all x y.((Avocado(x) & NewYork(y)) -> Fruit(x,y))", "all x.(Avocado(x) -> (SoldInNewYork(x) & Fruit(x)))", "all x.(Avocado(x) -> SoldInNewYork(x))"]}
{"id": "folio_train_1357", "nl": "Avocados are either sold in New York or sold in New Haven.", "fol": "(FruitsSoldInNewYork(Avocado) | FruitsSoldInNewHaven(Avocado))", "prediction": ["all x.(Avocado(x) -> (SoldInNewYork(x) | SoldInNewHunt(x)))", "all x.(Avocado(x) -> (SoldInNewYork(x) | SoldInNewHaven(x)))", "all x.(Avocado(x) -> (SoldInNewYork(x) | SoldInNewHanover(x)))", "all x.(Avocado(x) -> (SoldInNewYork(x) | SoldInNewHandon(x)))", "all x y.((Avocado(x) & NewYork(y)) -> (SoldIn(x,y) | SoldIn(x,y)))", "all x.(Avocado(x) -> (SoldInNewYork(x) | SoldInNewHonor(x)))", "all x.(Avocado(x) -> (SoldInNewYork(x) | SoldInNewHanaway(x)))", "all x.(Avocado(x) -> (SoldInNewYork(x) | SoldInNewHonoran(x)))", "all x.(Avocado(x) -> (SoldInNewYork(x) | SoldInNew Haven(x)))", "all x.(Avocado(x) -> (SoldInNewYork(x) | SoldInNewHann(x)))", "all x.(Avocado(x) -> (SoldIn(x,NewYork) | SoldIn(x,NewHaven)))", "all x.(Avocado(x) -> (SoldIn(x,NewYork) | SoldIn(x,NewHunt)))", "all x.(Avocado(x) -> (SoldInNewYork(x) | SoldInNewHanley(x)))", "all x.(Avocado(x) -> (SoldIn(x,NewYork) | SoldIn(x,New Haven)))", "all x.(Avocat(x) -> (SoldInNewYork(x) | SoldInNewHunt(x)))", "all x.(Avocado(x) -> (SoldIn(x,NewYork) | SoldIn(x,NewHanover)))"]}
{"id": "folio_train_1358", "nl": "Avocados are either sold in New Haven or sold in Boston", "fol": "(FruitsSoldInNewHaven(Avocado) | FruitsSoldInBoston(Avocado))", "prediction": ["all x.(Avocado(x) -> (SoldInNew Haven(x) | SoldInBoston(x)))", "all x.(Avocado(x) -> (SoldInNewHaven(x) | SoldInBoston(x)))", "all x.(Avocado(x) -> (SoldInNewHonor(x) | SoldInBoston(x)))", "all x.(Avocado(x) -> (SoldInNew Haven(x) | SoldInBoston(x)))", "all x.(Avocado(x) -> ((SoldInNew Haven(x) | SoldInBoston(x))))", "all x.(Avocado(x) -> (SoldInNewHanaway(x) | SoldInBoston(x)))", "all x.(Avocado(x) -> (SoldInNewHunt(x) | SoldInBoston(x)))", "all x.(Avocat(x) -> (SoldInNew Haven(x) | SoldInBoston(x)))", "all x.(Avocata(x) -> (SoldInNew Haven(x) | SoldInBoston(x)))", "all x.(Avocado(x) -> (SoldIn(x,New Haven) | SoldIn(x,Boston)))", "all x.(Avocado(x) -> (SoldInNewHann(x) | SoldInBoston(x)))", "all x.(Avocado(x) -> (SoldInNewHanover(x) | SoldInBoston(x)))", "all x.(Avocados(x) -> (SoldInNew Haven(x) | SoldInBoston(x)))", "all x.(Avocado(x) -> (SoldInNew Haven(x) | SoldInBrooklyn(x)))", "all x.(Apple(x) -> (SoldInNew Haven(x) | SoldInBoston(x)))", "all x y.((Avocado(x) & NewHaven(y)) | Boston(y))"]}
{"id": "folio_train_1359", "nl": "If avocados are not sold in New York and not shipped from Columbia, then they are neither sold in New York nor New Haven.", "fol": "((-FruitsSoldInNewYork(Avocado) & -FruitsShippedFromColumbia(Avocado)) -> (-FruitsSoldInNewYork(Avocado) & -FruitsSoldInNewHaven(Avocado)))", "prediction": ["all x.((Avocado(x) & -SoldInNewYork(x) & -ShippedFromColumbia(x)) -> (-SoldInNewYork(x) & -ShippedFromColumbia(x)))", "all x.((Avocado(x) & -SoldInNewYork(x) & -ShippedFromColumbia(x)) -> -SoldInNewYork(x) & -SoldFromNewHaven(x))", "all x.((Avocado(x) & -SoldInNewYork(x) & -ShippedFromColumbia(x)) -> (-SoldInNewYork(x) & -ShippedFromNewHaven(x)))", "all x.((Avocado(x) & -SoldInNewYork(x) & -ShippedFromColumbia(x)) -> -SoldInNewYork(x) & -ShippedFromNewHaven(x))", "all x.((Avocado(x) & -SoldInNewYork(x) & -SoldFromColumbia(x)) -> -SoldInNewYork(x) & -SoldFromNewHaven(x))", "all x.((Avocado(x) & -SoldInNewYork(x) & -ShippedFromColumbia(x)) -> -SoldInNewYork(x) & -ShippedFromColumbia(x))", "all x.((Avocado(x) & -SoldInNewYork(x) & -ShippedFromColumbia(x)) -> -SoldInNewYork(x) & -ShippedFromNew Haven(x))", "all x.((Avocado(x) & -SoldInNewYork(x) & -SoldFromColumbia(x)) -> -SoldInNewYork(x) & -SoldFromNew Haven(x))", "all x.((Avocado(x) & -SoldInNewYork(x) & -ShippedFromColumbia(x)) -> -SoldInNewYork(x) & -SoldInNewHaven(x))", "all x.((Avocado(x) & -SoldInNewYork(x) & -ShippedFromColumbia(x)) -> (-SoldInNewYork(x) & -ShippedFromNew Haven(x)))", "all x.((Avocado(x) & -SoldInNewYork(x) & -ShippedFromColumbia(x)) -> -SoldInNewYork(x) & -SoldFromNew Haven(x))", "all x.((Avocado(x) & -SoldInNewYork(x) & -ShippedFromColumbia(x)) -> -SoldInNewYork(x) & -SoldInNew Haven(x))", "all x.((Avocado(x) & -SoldInNewYork(x) & -ShippedFromColumbia(x)) -> -SoldInNewYork(x) & -ShippedFromNewHanaway(x))", "all x.((Avocado(x) & -SoldInNewYork(x) & -ShippedFromColumbia(x)) -> (-SoldInNewYork(x) & -ShippedFromNewHanaway(x)))", "all x.((Avocado(x) & -SoldInNewYork(x) & -ShippedFromColumbia(x)) -> -SoldInNewYork(x) & -ShippedFromNewHonoran(x))", "all x.((Avocado(x) & -SoldInNewYork(x) & -ShippedFromColumbia(x)) -> -SoldInNewYork(x) & -SoldFromNewHonor(x))"]}
{"id": "folio_train_1360", "nl": "Some monitors equipped in the library are produced by AOC. ", "fol": "exists x.(EquippedInLibrary(x) & ProducedByAOC(x))", "prediction": ["exists x.(Monitor(x) & EquippedInLibrary(x) & ProducedByAOC(x))", "exists x.(Monitor(x) & EquippedInLibrary(x))", "exists x y.(Monitor(x) & Library(y) & EquippedIn(x,y))", "exists x.(Monitor(x) & EquippedInLibrary(x) & AOC(x))", "exists x.(Monitor(x) & EquippedInBibliotheque(x) & ProducedByAOC(x))", "exists x y.((Monitor(x) & Library(y) & EquippedIn(x,y)) -> ProducedBy(x,AOC))", "all x.((Monitor(x) & EquippedInLibrary(x)) -> ProducedByAOC(x))", "exists x.(Monitor(x) & EquippedInLibrary(x) & AOCProduced(x))", "exists x y.((Monitor(x) & Library(y) & EquippedWith(x,y)) -> ProducedBy(x,AOC))", "exists x y.((Monitor(x) & Library(y) & EquippedIn(x,y)) -> ProducedBy(x,y))", "exists x y.((Monitor(x) & Library(y) & EquippedIn(x,y)) -> ProducedByAOC(x))", "exists x.(Monitor(x) & EquippedInLibrary(x) & ProducedBy(x,AOC))", "exists x y.(Monitor(x) & Library(y) & EquippedWith(x,y))", "exists x.(Monitor(x) & EquipedInLibrary(x) & ProducedByAOC(x))", "exists x.(Monitor(x) & EquippedInLibrary(x) & ProducedByAOC(x))", "exists x y.((Monitor(x) & Library(y) & EquippedWith(x,y)) -> ProducedBy(x,y))"]}
{"id": "folio_train_1361", "nl": "All monitors equipped in the library are cheaper than 800 dollars. ", "fol": "all x.(EquippedInLibrary(x) -> CheaperThan800Dollars(x))", "prediction": ["all x.((Monitor(x) & EquippedInLibrary(x)) -> CheaperThan(x,800))", "all x.((Monitor(x) & EquippedInLibrary(x)) -> LowerThan(x,800))", "all x.((Monitor(x) & EquippedInLibrary(x)) -> BoughtBy(x,800))", "all x.((Monitor(x) & EquippedInLibrary(x)) -> CheaperThan800Dollars(x))", "all x.((Monitor(x) & EquippedInLibrary(x)) -> LessThan(x,800))", "all x.((Monitor(x) & EquippedInLibrary(x)) -> LowerThan(x,800))", "all x.((Monitor(x) & EquippedWithLibrary(x)) -> CheaperThan(x,800))", "all x.((Monitor(x) & EquipedInLibrary(x)) -> CheaperThan(x,800))", "all x y.((Monitor(x) & Library(y) & EquippedWith(x,y)) -> CheaperThan(x,800))", "all x.((Monitor(x) & EquippedInLibrary(x)) -> BoughtBy800Dollars(x))", "all x.((Monitor(x) & EquippedInLibrary(x)) -> BlowerThan(x,800))", "all x.((Monitor(x) & EquippedInLibrary(x,800)) -> CheaperThan(x,800))", "all x y.((Monitor(x) & Library(y) & EquippedIn(x,y)) -> CheaperThan(x,800))", "all x.((Monitor(x) & EquippedInLibrary(x)) -> BoughtBetterThan(x,800))", "all x.((Monitor(x) & LocatedInLibrary(x)) -> CheaperThan(x,800))", "all x y.((Monitor(x) & Library(y) & EquippedWith(x,y)) -> CheaperThan(x,y))"]}
{"id": "folio_train_1362", "nl": "All monitors cheaper than 800 dollars are with a resolution of 1080p. ", "fol": "all x.(CheaperThan800Dollars(x) -> HasResolution1080p(x))", "prediction": ["all x.((Monitor(x) & CheaperThan(x,800)) -> HasResolution(x,1080))", "all x.((Monitor(x) & CheaperThan(x,800)) -> Resolution(x,1080))", "all x.((Monitor(x) & LowerThan(x,800)) -> HasResolution(x,1080))", "all x.((Monitor(x) & CheaperThan800Dollars(x)) -> HasResolution(x,1080))", "all x.((Monitor(x) & CheaperThan800Dollars(x)) -> HasResolution(x,1080p))", "all x.((Monitor(x) & CheaperThan800Dollars(x)) -> Resolution(x,1080))", "all x.((Monitor(x) & CheaperThan800Dollars(x)) -> Resolution1080p(x))", "all x.((Monitor(x) & CheaperThan800Dollars(x)) -> HasResolutionOf1080p(x))", "all x.((Monitor(x) & CheaperThan800Dollars(x)) -> HasResolution(x,10))", "all x.((Monitor(x) & LessThan(x,800)) -> HasResolution(x,1080))", "all x.((Monitor(x) & CheaperThan(x,800)) -> HasResolutionOf(x,1080))", "all x.((Monitor(x) & CheaperThan800Dollars(x)) -> Resolution(x,1080p))", "all x.((Monitor(x) & LowerThan(x,800)) -> Resolution(x,1080))", "all x.((Monitor(x) & CheaperThan(x,800)) -> Resolution1080p(x))", "all x.((Monitor(x) & CheaperThan(x,800)) -> ResolutionThan(x,1080))", "all x.((Monitor(x) & CheaperThan(x,800)) -> HasResolution(x,1080p))"]}
{"id": "folio_train_1363", "nl": "If a monitor has a resolution of 1080p, then it does not support the type-c port. ", "fol": "all x.(HasResolution1080p(x) -> -SupportsTypeCPort(x))", "prediction": ["all x.((Monitor(x) & Resolution(x,10)) -> -SupportsTypeCPort(x))", "all x.((Monitor(x) & Resolution(x,1080)) -> -SupportsTypeCPort(x))", "all x.((Monitor(x) & Resolution1080p(x)) -> -SupportsTypeCPort(x))", "all x.((Monitor(x) & ResolutionOf1080p(x)) -> -SupportsTypeCPort(x))", "all x.((Monitor(x) & Resolution(x,1008)) -> -SupportsTypeCPort(x))", "all x.((Monitor(x) & ResolutionOf1080P(x)) -> -SupportsTypeCPort(x))", "all x.((Monitor(x) & Resolution(x,1001)) -> -SupportsTypeCPort(x))", "all x.((Monitor(x) & Resolution1080P(x)) -> -SupportsTypeCPort(x))", "all x.((Monitor(x) & Resolution(x,10080)) -> -SupportsTypeCPort(x))", "all x.((Monitor(x) & ResolutionOf(x,1080)) -> -SupportsTypeCPort(x))", "all x.((Monitor(x) & Resolution(x,1080p)) -> -SupportsTypeCPort(x))", "all x.((Monitor(x) & ResolutionOf(x,10)) -> -SupportsTypeCPort(x))", "all x.((Monitor(x) & Resolution(x,10)) -> -SupportsTypCPort(x))", "all x.((Monitor(x) & Resolution(x,10)) -> -SupportTypeCPort(x))", "all x.((Monitor(x) & Resolution(x,1080)) -> -SupportTypeCPort(x))", "all x.((Monitor(x) & ResolutionOf1080p(x)) -> -SupportTypeCPort(x))"]}
{"id": "folio_train_1364", "nl": "A-2017 supports the type-c port. ", "fol": "SupportsTypeCPort(A2017)", "prediction": ["all x.(A-2017(x) -> SupportsTypeCPort(x))", "all x.((A-2017(x) & TypeCPort(x)) -> Supports(x))", "all x.((A-2017(x) & TypeCPort(x)) -> Supports(x,y))", "all x y.((A-2017(x) & TypeCPort(y)) -> Supports(x,y))", "all x.((A-2017(x) & TypeCPort(y)) -> Supports(x,y))", "All x.(A-2017(x) -> SupportsTypeCPort(x))", "all x.((A-2017(x) & TypeCPort(x)) -> Supported(x))", "all x y.((A-2017(x) & Port(y)) -> SupportsTypeC(x,y))", "all x y z.((A-2017(x) & TypeCPort(y) & Port(z)) -> Supports(x,y,z))", "All x.((A-2017(x) & TypeCPort(x)) -> Supports(x))", "all x y.((A-2017(x) & Port(y)) -> Supports(x,y))", "All x.((A-2017(x) & TypeCPort(x)) -> Supports(x,y))", "all x y z.((A-2017(x) & TypeCPort(y) & Port(z)) -> Supports(x,y))", "all x y.((A-2017(x) & TypeCPort(y)) -> Supported(x,y))", "all x.((A-2017(x) & TypeCPort(y)) -> Supported(x,y))", "all x.((A-2017(x) & TypeCPort(x)) -> Supports(x,TypeC))"]}
{"id": "folio_train_1365", "nl": "A-2017 is produced by AOC.", "fol": "ProducedByAOC(A2017)", "prediction": ["all x.(A-2017(x) -> ProducedByAOC(x))", "All x.(A-2017(x) -> ProducedByAOC(x))", "all x y.((A-2017(x) & AOC(y)) -> ProducedBy(x,y))", "A-2017 is produced by AOC.", "All x y.((A-2017(x) & AOC(y)) -> ProducedBy(x,y))", "all x.((A-2017(x) & AOC(x)) -> ProducedBy(x))", "all x.((A-2017(x) & ProducedByAOC(x)) -> ProducedByAOC(x))", "all x y z.((A-2017(x) & AOC(y) & Product(z)) -> ProducedBy(x,y,z))", "all x.((A-2017(x) & AOC(y)) -> ProducedBy(x,y))", "all x.((A-2017(x) & AOC(x)) -> ProducedBy(x,y))", "All x.((A-2017(x) & AOC(x)) -> ProducedBy(x))", "(ProducedByAOC(A-2017))", "all x y.((A-2017(x) & AOC(y)) -> ProducedBy(x,y))", "all x y z.((A-2017(x) & AOC(y) & Product(z)) -> ProducedBy(x,y))", "(ProducedByAOC(A-2017) -> ProducedByAOC(A-2017))", "all x y.((A-2017(x) & AOC(y)) -> Produces(x,y))"]}
{"id": "folio_train_1366", "nl": "A-2017 is produced by AOC and equipped in the library.", "fol": "(ProducedByAOC(A2017) & EquippedInLibrary(A2017))", "prediction": ["all x.(A-2017(x) -> (ProducedByAOC(x) & EquippedInLibrary(x)))", "all x y.((A-2017(x) & AOC(y)) -> (ProducedBy(x,y) & EquippedInLibrary(x,y)))", "all x y.((A-2017(x) & AOC(y)) -> (ProducedBy(x,y) & EquippedInLibrary(x)))", "all x y z.((A-2017(x) & AOC(y) & Library(z)) -> (ProducedBy(x,y) & EquippedIn(x,z)))", "All x.(A-2017(x) -> (ProducedByAOC(x) & EquippedInLibrary(x)))", "all x.(A-2017(x) -> (ProducedBy(x,AOC) & EquippedInLibrary(x)))", "all x y z.((A-2017(x) & AOC(y) & Library(z)) -> (ProducedBy(x,y) & EquippedIn(y,z)))", "All x y.((A-2017(x) & AOC(y)) -> (ProducedBy(x,y) & EquippedInLibrary(x,y)))", "all x.((A-2017(x) & ProducedByAOC(x) & EquippedInLibrary(x)) -> ProducedByAOC(x))", "(ProducedByAOC(A-2017) & EquippedInLibrary(A-2017))", "All x y.((A-2017(x) & AOC(y)) -> (ProducedBy(x,y) & EquippedInLibrary(x)))", "all x y z.((A-2017(x) & AOC(y) & Library(z)) -> (ProducedBy(x,y) & Equipped(x,z)))", "all x y.((A-2017(x) & AOC(y)) -> (ProducedBy(x,y) & EquippedInLibrary(y)))", "all x y z.((A-2017(x) & AOC(y) & Library(z)) -> (ProducedBy(x,y) & EquippedWith(x,z)))", "all x.(A-2017(x) -> (ProducedByAOC(x) & EquippedInLibrary(x)))", "all x y z.((A-2017(x) & AOC(y) & Library(z)) -> (ProducedBy(x,y) & EquippedIn(x,y,z)))"]}
{"id": "folio_train_1367", "nl": "If A-2017 is not with a resolution of 1080p or produced by AOC, then it is not equipped in the library.", "fol": "((-HasResolution1080p(A2017) | ProducedByAOC(A2017)) -> -EquippedInLibrary(A2017))", "prediction": ["all x.((A-2017(x) & -Resolution(x,1080) & -ProducedByAOC(x)) -> -EquivalentInLibrary(x))", "all x.((A-2017(x) & -Resolution(x,10)) | ProducedByAOC(x)) -> -EquivalentInLibrary(x))", "all x.((A-2017(x) & -Resolution(x,10) & -ProducedByAOC(x)) -> -EquivalentInLibrary(x))", "all x.((A-2017(x) & -(Resolution1080p(x) | ProducedByAOC(x))) -> -EquivalentInLibrary(x))", "all x.((A-2017(x) & -(Resolution(x,1080) | ProducedByAOC(x))) -> -EquivalentInLibrary(x))", "all x.((A-2017(x) & -Resolution1080p(x) & -ProducedByAOC(x)) -> -EquivalentInLibrary(x))", "all x.((A-2017(x) & -Resolution(x,1080) | ProducedByAOC(x)) -> -EquivalentInLibrary(x))", "all x.((A-2017(x) & -Resolution(x,1080)) | ProducedByAOC(x)) -> -EquivalentInLibrary(x))", "all x.((A-2017(x) & -(Resolution(x,10) & -ProducedByAOC(x))) -> -EquivalentInLibrary(x))", "all x.((A-2017(x) & -Resolution(x,1080) & -ProducedByAOC(x)) -> -EquipmentInLibrary(x))", "all x.((A-2017(x) & -(Resolution(x,10) | ProducedByAOC(x))) -> -EquivalentInLibrary(x))", "all x.((A-2017(x) & -Resolution(x,10)) | ProducedByAOC(x)) -> -EquipmentInLibrary(x))", "all x.((A-2017(x) & -ResolutionOf1080p(x) & -ProducedByAOC(x)) -> -EquivalentInLibrary(x))", "all x.((A-2017(x) & -(Resolution1080p(x) | ProducedByAOC(x))) -> -EquipmentInLibrary(x))", "all x.((A-2017(x) & -(Resolution(x,1080) | ProducedByAOC(x))) -> -EquipmentInLibrary(x))", "all x.((A-2017(x) & -Resolution1080p(x) & -ProducedByAOC(x)) -> -EquipmentInLibrary(x))"]}
{"id": "folio_train_1368", "nl": "S\u016bduva Marijampol\u0117 holds the Lithuanian Supercup.", "fol": "HoldsSupercup(Suduva,Thelithuaniansupercup)", "prediction": ["SduvaMarijampol HoldsLituanianSupercup(SduvaMarijampol)", "SduvaMarijampol holdsLituanianSupercup(SduvaMarijampol)", "all x.(SduvaMarijampol(x) -> HoldsLituanianSupercup(x))", "SduvaMarijampol HoldsLithuanianSupercup(SduvaMarijampol)", "SduvaMarijampol holdsLithuanianSupercup(SduvaMarijampol)", "all x.((SduvaMarijampol(x) & HoldsLituanianSupercup(x)) -> HoldsLituanianSupercup(x))", "all x.((SduvaMarijampol(x) & HoldsLituanianSupercup(x)) -> Holds(x,LituanianSupercup))", "all x.(SduvaMarijampol(x) -> HoldsLithuanianSupercup(x))", "all x.((SduvaMarijampol(x) & HoldsLithuanianSupercup(x)) -> Holds(x,LithuanianSupercup))", "all x.((SduvaMarijampol(x) & HoldsLithuanianSupercup(x)) -> HoldsLithuanianSupercup(x))", "SduvaMarjampol HoldsLituanianSupercup(SduvaMarjampol)", "SduvaMarijampol holdsLituanianSupercup.", "SduvaMarjampol holdsLituanianSupercup(SduvaMarjampol)", "SduvaMarijampol HoldsLituanianSupercup.", "SduvaMarijampol holds LithuanianSupercup(SduvaMarijampol)", "all x.((SduvaMarijampol(x) & HoldsLithuanianSupercup(x)) -> HoldsLituanianSupercup(x))"]}
{"id": "folio_train_1369", "nl": "S\u016bduva Marijampol\u0117 is a soccer team.", "fol": "IsSoccerTeam(Suduva)", "prediction": ["all x.(SduvaMarijampol(x) -> SoccerTeam(x))", "SduvaMarijampol is a soccer team.", "All x.(SduvaMarijampol(x) -> SoccerTeam(x))", "SduvaMarijampol is soccer team.", "SduvaMarijampol (SoccerTeam)", "all x.(SduvaMarjampol(x) -> SoccerTeam(x))", "all x.((SduvaMarijampol) -> SoccerTeam(x))", "SduvaMarijampol (SoccerTeam(SduvaMarijampol))", "all x.(SduvaMarijampol(x) -> SoccerTeam(x))", "SduvaMarjampol is a soccer team.", "SduvaMarjampol is soccer team.", "SduvaMarjampol (SoccerTeam)", "SduvaMarijampol SoccerTeam(SduvaMarijampol)", "SduvaMarjampol (SoccerTeam(SduvaMarjampol))", "All x.(SduvaMarijampol(x) -> SoccerTeam(x))", "(SduvaMarijampol,SoccerTeam)"]}
{"id": "folio_train_1370", "nl": "Some soccer team holds the Lithuanian Supercup.", "fol": "exists x.(IsSoccerTeam(x) & HoldsSupercup(x,Thelithuaniansupercup))", "prediction": ["exists x.(SoccerTeam(x) & HoldsLituanianSupercup(x))", "exists x.(SoccerTeam(x) & HoldsLithuanianSupercup(x))", "exists x y.(SoccerTeam(x) & SoccerTeam(y) & HoldsLituanianSupercup(x,y))", "exists x y.(SoccerTeam(x) & Team(y) & HoldsLituanianSupercup(x,y))", "exists x.(SoccerTeam(x) & Holds(x,Lituania))", "exists x y.(SoccerTeam(x) & FootballTeam(y) & HoldsLituanianSupercup(x,y))", "exists x.(SoccerTeam(x) & HoldsLithuaniaSupercup(x))", "exists x y.(SoccerTeam(x) & SoccerTeam(y) & HoldsLithuanianSupercup(x,y))", "exists x y.(SoccerTeam(x) & Team(y) & HoldsLithuanianSupercup(x,y))", "exists x.(SoccerTeam(x) & HoldsLiteanSupercup(x))", "exists x.(SoccerTeam(x) & Holds(x,Lithuania))", "exists x.(SoccerTeam(x) & HoldsLatvianSupercup(x))", "exists x y.(SoccerTeam(x) & Team(y) & HoldsLituanianSupercup(x))", "exists x.(SoccerTeam(x) & Holds(x,LituanianSupercup))", "exists x y.(SoccerTeam(x) & SoccerTeam(y) & HoldsLituanianSupercup(x))", "exists x.(SoccerTeam(x) & HasLituanianSupercup(x))"]}
{"id": "folio_train_1371", "nl": "Ainderby Quernhow is a village and civil parish in the Hambleton District.", "fol": "(IsVillage(AinderbyQuernhow) & IsCivilParish(AinderbyQuernhow) & IsInHambletonDistrict(AinderbyQuernhow))", "prediction": ["all x.(AinderbyQuernhow(x) -> (Dormant(x) & CivilParish(x) & HambletonDistrict(x)))", "all x.(AinderbyQuernhow(x) -> (Village(x) & CivilParish(x) & HambletonDistrict(x)))", "all x.(AinderbyQuernhow(x) -> (Dorm(x) & Parish(x) & HambletonDistrict(x)))", "all x.(AinderbyQuernhow(x) -> (Dorm(x) & CivilParish(x) & HambletonDistrict(x)))", "all x.((AinderbyQuernhow(x) & Village(x) & CivilParish(x)) -> HambletonDistrict(x))", "all x.(AinderbyQuernhow(x) -> (Dormant(x) & CivilParish(x) & InHambletonDistrict(x)))", "all x.((Village(x) & CivilParish(x) & HambletonDistrict(x)) -> AinderbyQuernhow(x))", "all x.((AinderbyQuernhow(x) & Village(x) & CivilParish(x)) -> InHambletonDistrict(x))", "all x.(AinderbyQuernhow(x) -> (Village(x) & CivilParish(x) & InHambletonDistrict(x)))", "all x.(AinderbyQuernhow(x) -> (Dorf(x) & Parish(x) & HambletonDistrict(x)))", "all x.(AinderbyQuernhow(x) -> (Dormant(x) & Parish(x) & HambletonDistrict(x)))", "all x.(AinderbyQuernhow(x) -> (Domestic(x) & CivilParish(x) & HambletonDistrict(x)))", "all x.(AinderbyQuernhow(x) -> (Destination(x) & Parish(x) & HambletonDistrict(x)))", "all x.(AinderbyQuernhow(x) -> (Dormant(x) & CivilPast(x) & HambletonDistrict(x)))", "all x.(AinderbyQuernhow(x) -> (Destination(x) & CivilParish(x) & HambletonDistrict(x)))", "all x.(AinderbyQuernhow(x) -> (Village(x) & Parish(x) & HambletonDistrict(x)))"]}
{"id": "folio_train_1372", "nl": "Hambleton District is in North Yorkshire.", "fol": "all x.(IsInHambletonDistrict(x) -> IsInNorthYorkshire(x))", "prediction": ["all x.(HambletonDistrict(x) -> NorthYorkshire(x))", "(NorthYorkshire(HambletonDistrict) & NorthYorkshire(HambletonDistrict))", "(NorthYorkshire(HambletonDistrict) & LocatedIn(HambletonDistrict))", "(NorthYorkshire(HambletonDistrict) & InNorthYorkshire(HambletonDistrict))", "All x.(HambletonDistrict(x) -> NorthYorkshire(x))", "(NorthYorkshire(HambletonDistrict) & LocatedIn(HambletonDistrict,NorthYorkshire))", "all x.(HambletonDestination(x) -> NorthYorkshire(x))", "(NorthYorkshire(HambletonDestination) & NorthYorkshire(HambletonDestination))", "all x.(HambletonDisturbance(x) -> NorthYorkshire(x))", "(NorthYorkshire(HambletonDestination) & LocatedIn(HambletonDestination))", "(NorthYorkshire(HambletonDistrict) & NorthYorkshire(HambletonDistrict))", "all x.(HambletonDistrict(x) -> InNorthYorkshire(x))", "(NorthYorkshire(HambletonDistrict) & NorthYorkshire(Hambleton))", "(NorthYorkshire(HambletonDistrikt) & LocatedIn(HambletonDistrikt))", "NorthYorkshire(HambletonDistrict)", "(NorthYorkshire(HambletonDistrict) & LocatedIn(HambletonDistrict))"]}
{"id": "folio_train_1373", "nl": "North Yorkshire is in England.", "fol": "all x.(IsInNorthYorkshire(x) -> IsInEngland(x))", "prediction": ["all x.(NorthYorkshire(x) -> InEngland(x))", "all x y.((NorthYorkshire(x) & England(y)) -> In(x,y))", "all x.(NorthYorkshire(x) -> In(x,England))", "all x.(NorthYorkshire(x) -> England(x))", "All x.(NorthYorkshire(x) -> InEngland(x))", "all x.(NorthYorkshire(x) -> InEdinburgh(x))", "all x.(NorthYorkshire(x) -> (InEngland(x) & InEngland(x)))", "all x.(NorthYorkshire(x) -> InEngland(x))", "all x y.((NorthYorkshire(x) & England(y)) -> LocatedIn(x,y))", "all x.(NorthYorkshire(x) -> InEngland(x))", "all x.(NorthYorkshire(x) -> In(x,england))", "all x y.((NorthYorkshire(x) & England(y)) -> IsIn(x,y))", "all x.(NorthYorkshire(x) -> In(x,Edinburgh))", "all x.(North Yorkshire(x) -> InEngland(x))", "all x.(NorthYorkshire(x) -> (InEngland(x) | InEngland(x)))", "all x.(NorthYorkshire(x) -> (InEngland(x)))"]}
{"id": "folio_train_1374", "nl": "There is a village in England.", "fol": "exists x.(IsVillage(x) & IsInEngland(x))", "prediction": ["exists x.(Dorm(x) & InEngland(x))", "exists x.(Dorf(x) & InEngland(x))", "exists x.(Dominion(x) & InEngland(x))", "exists x.(Destination(x) & InEngland(x))", "exists x.(Village(x) & InEngland(x))", "exists x.(Dormant(x) & InEngland(x))", "exists x.(Dorf(x) & In(x,England))", "exists x.(Dorm(x) & In(x,England))", "exists x.(Dominion(x) & In(x,England))", "exists x.(Destination(x) & In(x,England))", "exists x.(Dormant(x) & In(x,England))", "exists x.(Domestic(x) & InEngland(x))", "exists x.(Dorm(x) & InEdinburgh(x))", "exists x.(Dorf(x) & InEdinburgh(x))", "exists x.(Village(x) & In(x,England))", "exists x.(Country(x) & InEngland(x))"]}
{"id": "folio_train_1375", "nl": "There is no civil parish in England.", "fol": "-exists x.(IsCivilParish(x) & IsInEngland(x))", "prediction": ["-exists x.(CivilParish(x) & InEngland(x))", "-exists x.(CivilParish(x) & In(x,England))", "-exists x.(CivilParish(x) & InEdinburgh(x))", "-exists x.(CivilPast(x) & InEngland(x))", "exists x.(CivilParish(x) & -InEngland(x))", "(-exists x.(CivilParish(x) & InEngland(x)))", "-exists x.(CatholicParish(x) & InEngland(x))", "-exists x.(CivilPast(x) & In(x,England))", "-exists x.(CivilParish(x) & -InEngland(x))", "-exists x.(CivilPastry(x) & InEngland(x))", "-exists x.(CivilPast(x) & InEdinburgh(x))", "-exists x.(CivilParish(x) & In(x,Edinburgh))", "-exists x.(CatholicParish(x) & In(x,England))", "-exists x.(CivilParish(x) & England(x))", "-exists x.(CivilParish(x) & In(x,england))", "-exists x.(Parish(x) & InEngland(x))"]}
{"id": "folio_train_1376", "nl": "Douglas Adams is an author who created the book collection called The Salmon of Doubt. ", "fol": "(IsAuthor(DouglasAdams) & IsBook(TheSalmonOfDoubt))", "prediction": ["all x.(DouglasAdams(x) -> (Author(x) & CreatedBookCollection(x) & SalmonOfDoubt(x)))", "all x.(DouglasAdams(x) -> (Author(x) & CreatesBookCollection(x) & SalmonOfDoubt(x)))", "all x.((Author(x) & CreatedBookCollection(x) & SalmonOfDoubt(x)) -> DouglasAdams(x))", "all x y.((DouglasAdams(x) & BookCollection(y)) -> CreatedSalmonOfDoubt(x,y))", "all x y.((DouglasAdams(x) & BookCollection(y)) -> CreatesSalmonOfDoubt(x,y))", "Douglas Adams (Author(a) & CreatedBookCollection(a) & SalmonOfDoubt(a))", "all x y.((DouglasAdams(x) & BookCollection(y)) -> Created(x,y))", "Douglas Adams (Author(e) & CreatedBookCollection(e) & SalmonOfDoubt(e))", "all x.(DouglasAdams(x) -> Author(x) & CreatedBookCollection(x) & SalmonOfDoubt(x))", "all x y.((DouglasAdams(x) & BookCollection(y) & SalmonOfDoubt(y)) -> Created(x,y))", "all x.(DouglasAdams(x) -> (Author(x) & CreatedSalmonOfDoubt(x)))", "all x.(DouglasAdams(x) -> (Author(x) & CreatedBookCollection(x,SalmonOfDoubt)))", "all x.(DouglasAdams(x) -> (Author(x) & CreatedBookCollection(x) & SalmonOf Doubt(x)))", "all x y.((DouglasAdams(x) & BookCollection(y) & SalmonOfDoubt(y)) -> Author(x,y))", "all x.(DouglasAdams(x) -> (Author(x) & CreatedBookCollection(x) & SalmonOfDubit(x)))", "all x y.((DouglasAdams(x) & BookCollection(y) & SalmonOfDoubt(y)) -> Author(x))"]}
{"id": "folio_train_1377", "nl": "The Salmon of Doubt is about life experiences and technology.", "fol": "(IsAboutLifeExperience(TheSalmonOfDoubt) & IsAboutTechnology(TheSalmonOfDoubt))", "prediction": ["All x.(SalmonOfDoubt(x) -> (LifeExperiences(x) & Technology(x)))", "all x.(SalmonOfDoubt(x) -> (LifeExperiences(x) & Technology(x)))", "All x.(SalmonOfDoubt(x) -> (LifeExperiences(x) & Technology(x)))", "all x.(SalmonOfDoubt(x) -> (LifeExperiences(x) & Technology(x)))", "all x.(SalmonOfDoubt(x) -> (LifeExperiences(x) & Technology(x)))", "All x.(SalmonOfDoubt(x) -> (LifeExperiences(x) & Technology(x)))", "All x.(SalmonOfDoubt(x) -> (AboutLifeExperiences(x) & AboutTechnology(x)))", "(SalmonOfDoubt(Salmon) -> (LifeExperiences(Salmon) & Technology(Salmon)))", "All x.(SalmonOfDubit(x) -> (LifeExperiences(x) & Technology(x)))", "all x.(SalmonOfDoubt(x) -> (AboutLifeExperiences(x) & AboutTechnology(x)))", "all x.(SalmonOfDubit(x) -> (LifeExperiences(x) & Technology(x)))", "All x.(SalmonOfDoubt(x) -> (LivingExperiences(x) & Technology(x)))", "All x.(SalmonOfDoubt(x) -> (LifeExperiencesAndTechnology(x)))", "All x.(SalmonOfDoubt(x) -> (AboutLifeExperiencesAndTechnology(x)))", "all x.(SalmonOfDoubt(x) -> (LifeExperiencesAndTechnology(x)))", "(SalmonOfDoubt(Salmon) -> (LifeExperiences(s) & Technology(s)))"]}
{"id": "folio_train_1378", "nl": "All authors are writers.", "fol": "all x.(IsAuthor(x) -> IsWriter(x))", "prediction": ["all x.(Author(x) -> Writer(x))", "all x y.((Author(x) & Author(y)) -> Writer(x))", "all x y.((Author(x) & Writer(y)) -> Writer(x))", "all x.exists y.(Author(x) & Author(y) & Writer(x))", "all x.(Author(x) -> Writer(x))", "all x y.((Author(x) & Writer(y)) -> Author(x))", "all x.(Author(x) -> Author(x))", "all x.((Author(x) & Writer(x)) -> Writer(x))", "all x.exists y.(Author(x) & Writer(y))", "all x y.((Author(x) & Author(y)) -> Writer(x,y))", "all x y.((Author(x) & Writer(y)) -> Author(x,y))", "(all x.(Author(x) -> Writer(x)))", "all x y.((Author(x) & Writer(y)) -> Writer(x,y))", "all x.exists y.(Author(x) & Author(y) & Writer(y))", "exists x.(Author(x) & Writer(x))", "all x.exists y.(Author(x) & Author(y) & Writer(x,y))"]}
{"id": "folio_train_1379", "nl": "Writers create innovative ideas.", "fol": "all x.(IsWriter(x) -> CreatesInnovativeIdea(x))", "prediction": ["all x.(Writer(x) -> CreatesInnovativeIdeas(x))", "all x y.((Writer(x) & Idea(y)) -> Creates(x,y))", "all x y.((Writer(x) & InnovativeIdea(y)) -> Creates(x,y))", "all x y z.((Writer(x) & InnovativeIdea(y) & Idea(z)) -> Creates(x,y,z))", "all x y z.((Writer(x) & Idea(y) & Idea(z)) -> Creates(x,y,z))", "all x y.((Writer(x) & Ideas(y)) -> Creates(x,y))", "all x y z.((Writer(x) & InnovativeIdea(y) & Idea(z)) -> Create(x,y,z))", "all x y z.((Writer(x) & InnovativeIdea(y) & Ideas(z)) -> Creates(x,y,z))", "all x y z.((Writer(x) & InnovativeIdea(y) & Idea(z)) -> Creates(x,y))", "all x y.((Writer(x) & InnovativeIdea(y)) -> Create(x,y))", "all x.(Writer(x) -> (CreatesInnovativeIdeas(x) & CreatesIdeas(x)))", "all x y.((Writer(x) & InnovativeIdeas(y)) -> Creates(x,y))", "all x y.((Writer(x) & Idea(y)) -> Create(x,y))", "all x y z.((Writer(x) & Idea(y) & Ideas(z)) -> Creates(x,y,z))", "all x y z.((Writer(x) & Ideas(y) & Idea(z)) -> Creates(x,y,z))", "all x y z.((Writer(x) & Idea(y) & Idea(z)) -> Creates(x,y))"]}
{"id": "folio_train_1380", "nl": "Some books that contain innovative ideas are about technology.", "fol": "exists x.(ContainsInnovativeIdea(x) & IsAboutTechnology(x))", "prediction": ["exists x.(Book(x) & InnovativeIdeas(x) & AboutTechnology(x))", "exists x.(Book(x) & ContainsInnovativeIdeas(x))", "exists x.(Book(x) & ContainsInnovativeIdeas(x) & AboutTechnology(x))", "exists x.(Book(x) & InnovativeIdeas(x) & Technology(x))", "exists x.(Book(x) & ContainsInnovativeIdeas(x) & Technology(x))", "exists x.(Book(x) & InnovativeIdeas(x) & Contains(x,Technology))", "exists x.(Book(x) & InnovativeIdeas(x) & Contains(x,technology))", "exists x.((Book(x) & ContainsInnovativeIdeas(x)) -> AboutTechnology(x))", "exists x.(Book(x) & InnovativeIdeas(x))", "exists x.(Book(x) & InnovativeIdeas(x) & AboutTechnologie(x))", "exists x.(Book(x) & InnovativeIdeas(x) & Contains(x,technology))", "exists x.(Book(x) & ContainsInnovativeIdeas(x)) -> AboutTechnology(x))", "exists x.(Book(x) & ContainsInnovativeIdeas(x) & AboutTechnologie(x))", "exists x.(Book(x) & ContainsInnovativeIdeas(x) & -Technology(x))", "exists x.((Book(x) & InnovativeIdeas(x)) -> AboutTechnology(x))", "exists x.(Book(x) & InnovativeIdeas(x) & AboutTechnology(x))"]}
{"id": "folio_train_1381", "nl": "Douglas Adams is a writer.", "fol": "IsWriter(DouglasAdams)", "prediction": ["all x.(DouglasAdams(x) -> Writer(x))", "all x.((DouglasAdams(x) & Writer(x)) -> Writer(x))", "(Writer(DouglasAdams) & Writer(DouglasAdams))", "exists x.(DouglasAdams(x) & Writer(x))", "all x.(DowsonAdams(x) -> Writer(x))", "(Writer(DouglasAdams) | Writer(DouglasAdams))", "all x.(DavidAdams(x) -> Writer(x))", "all x.(DouglasAdams(x) -> Writer(x))", "(Writer(DouglasAdams) -> Writer(DouglasAdams))", "all x.((DouglasAdams(x) & Writer(x)) -> Writes(x))", "Douglas Adams is a Writer.", "(Writer(DouglasAdams) | Writer(DouglasAdams)))", "(Writer(DowsonAdams) & Writer(DowsonAdams))", "(Writer(DouglasAdams) -> Writer(DouglasAdams))", "all x.(DawsonAdams(x) -> Writer(x))", "(Writer(DouglasAdams)"]}
{"id": "folio_train_1382", "nl": "Douglas Adams created innovative ideas.", "fol": "CreatesInnovativeIdea(DouglasAdams)", "prediction": ["all x.(DouglasAdams(x) -> CreatedInnovativeIdeas(x))", "all x y.((DouglasAdams(x) & InnovativeIdeas(y)) -> Created(x,y))", "all x.(DouglasAdams(x) -> CreatesInnovativeIdeas(x))", "all x y z.((DouglasAdams(x) & InnovativeIdeas(y) & InnovativeIdeas(z)) -> Created(x,y,z))", "all x y z.((DouglasAdams(x) & InnovativeIdeas(y) & InnovativeIdeas(z)) -> Created(x,y))", "all x y z.((DouglasAdams(x) & InnovativeIdeas(y) & Idea(z)) -> Created(x,y,z))", "all x y.((DouglasAdams(x) & InnovativeIdea(y)) -> Created(x,y))", "all x.((DouglasAdams(x) & InnovativeIdeas(x)) -> Created(x))", "all x y z.((DouglasAdams(x) & InnovativeIdea(y) & InnovativeIdea(z)) -> Created(x,y,z))", "all x.(DowsonAdams(x) -> CreatedInnovativeIdeas(x))", "all x.(DavidAdams(x) -> CreatedInnovativeIdeas(x))", "all x y.((DouglasAdams(x) & InnovativeIdeas(y)) -> Creates(x,y))", "all x y z.((DouglasAdams(x) & InnovativeIdeas(y) & Ideas(z)) -> Created(x,y,z))", "all x y z.((DouglasAdams(x) & InnovativeIdeas(y) & Idea(z)) -> Created(x,y))", "all x y z.((DouglasAdams(x) & InnovativeIdea(y) & Idea(z)) -> Created(x,y,z))", "all x.((DouglasAdams(x) & InnovativeIdeas(x)) -> Created(x,y))"]}
{"id": "folio_train_1383", "nl": "The Salmon of Doubt has no innovative Ideas.", "fol": "-exists y.ContainsInnovativeIdea(TheSalmonOfDoubt)", "prediction": ["All x.(SalmonOfDoubt(x) -> -InnovativeIdeas(x))", "all x.(SalmonOfDoubt(x) -> -InnovativeIdeas(x))", "All x.(SalmonOfDoubt(x) -> NoInnovativeIdeas(x))", "All x.(SalmonOfDubit(x) -> -InnovativeIdeas(x))", "All x.(SalmonOfDoubt(x) -> -InnovativeIdeas(x))", "all x.(SalmonOfDoubt(x) -> NoInnovativeIdeas(x))", "(SalmonOfDoubt(Salmon) & -InnovativeIdeas(Salmon))", "all x.(SalmonOfDubit(x) -> -InnovativeIdeas(x))", "All x.(SalmonOfDubit(x) -> NoInnovativeIdeas(x))", "The SalmonOfDoubt.com - HasNoInnovativeIdeas(SalmonOfDoubt)", "The SalmonOfDoubt.com -InnovativeIdeas(SalmonOfDoubt)", "(SalmonOfDubit(Salmon) & -InnovativeIdeas(Salmon))", "The SalmonOfDoubt.com -InnovativeIdeas(Salmon)", "(SalmonOfDubit(Salmon) & -InnovativeIdeas(Salmon,Dubit))", "The SalmonOfDoubt.com hasNoInnovativeIdeas(SalmonOfDoubt)", "The SalmonOfDoubt.com - HasNoInnovativeIdeas(SalmonOfDubit)"]}
{"id": "folio_train_1384", "nl": "No disposable products can help slow down global warming. ", "fol": "all x.(IsDisposableProduct(x) -> -CanHelpSlowDownGlobalWarming(x))", "prediction": ["-exists x.(DisposableProduct(x) & SlowsGlobalWarming(x))", "-exists x.(DisposableProduct(x) & SlowsGlobalWarming(x))", "-exists x.(DisposableProduct(x) & SlowGlobalWarming(x))", "-exists x.(DisposableProduct(x) & SlowGlobalWarming(x))", "-exists x.(DispensableProduct(x) & SlowsGlobalWarming(x))", "-exists x.(DiscoverableProduct(x) & SlowsGlobalWarming(x))", "-exists x.(RemovableProduct(x) & SlowsGlobalWarming(x))", "-exists x.(DiscopableProduct(x) & SlowsGlobalWarming(x))", "-exists x.(DiscoverableProduct(x) & SlowGlobalWarming(x))", "-exists x.(DispensableProduct(x) & SlowGlobalWarming(x))", "-exists x.(Disposable(x) & SlowsGlobalWarming(x))", "-exists x.(DiscobableProduct(x) & SlowsGlobalWarming(x))", "-exists x.(DiscipableProduct(x) & SlowsGlobalWarming(x))", "-exists x.(DiscovelableProduct(x) & SlowsGlobalWarming(x))", "-exists x.(DesirableProduct(x) & SlowsGlobalWarming(x))", "-exists x.(RemovableProduct(x) & SlowGlobalWarming(x))"]}
{"id": "folio_train_1385", "nl": "All eco-friendly brands can help slow down global warming. ", "fol": "all x.(IsEcoFriendlyBrand(x) -> CanHelpSlowDownGlobalWarming(x))", "prediction": ["all x.(EcoFriendlyBrand(x) -> SlowsGlobalWarming(x))", "all x.(EcoFriendlyBrand(x) -> SlowGlobalWarming(x))", "all x.((EcoFriendlyBrand(x) & SlowGlobalWarming(x)) -> CanSlowGlobalWarming(x))", "all x.((EcoFriendlyBrand(x) & SlowGlobalWarming(x)) -> HelpsSlowGlobalWarming(x))", "all x.((EcoFriendlyBrand(x) & SlowGlobalWarming(x)) -> CanHelpSlowGlobalWarming(x))", "all x.((EcoFriendlyBrand(x) & SlowGlobalWarming(x)) -> CanHelp(x))", "all x.((Brand(x) & EcoFriendly(x)) -> SlowsGlobalWarming(x))", "all x.((Brand(x) & EcoFriendly(x)) -> SlowGlobalWarming(x))", "all x.(EcoFriendly(x) -> SlowsGlobalWarming(x))", "all x.((EcoFriendly(x) & EcoFriendly(x)) -> SlowsGlobalWarming(x))", "all x.((EcoFriendlyBrand(x) & SlowGlobalWarming(x)) -> SlowGlobalWarming(x))", "all x.(EcoFriendly(x) -> SlowGlobalWarming(x))", "all x.((EcoFriendlyBrand(x) & SlowGlobalWarming(x)) -> SlowsDown(x))", "all x y.((EcoFriendlyBrand(x) & GlobalWarming(y)) -> SlowsDown(x,y))", "all x.((EcoFriendly(x) & EcoFriendly(x)) -> SlowGlobalWarming(x))", "all x.(EcoFriendlyBrand(x) -> CanSlowGlobalWarming(x))"]}
{"id": "folio_train_1386", "nl": "All sustainable fashion brands are eco-friendly brands.", "fol": "all x.(IsSustainableFashionBrand(x) -> IsEcoFriendlyBrand(x))", "prediction": ["all x.(SustainableFashionBrand(x) -> EcoFriendly(x))", "all x.((SustainableFashionBrand(x) & EcoFriendly(x)) -> SustainableFashionBrand(x))", "all x.((SustainableFashionBrand(x) & EcoFriendly(x)) -> Sustainable(x))", "all x.((SustainableFashionBrand(x) & EcoFriendlyBrand(x)) -> SustainableFashionBrand(x))", "all x.((SustainableFashionBrand(x) & EcoFriendlyBrand(x)) -> Sustainable(x))", "all x.((SustainableFashion(x) & EcoFriendly(x)) -> SustainableFashion(x))", "all x.((SustainableFashionBrand(x) & EcoFriendlyBrand(x)) -> EcoFriendlyBrand(x))", "all x.((SustainableFashionBrand(x) & EcoFriendly(x)) -> SustainableBrand(x))", "all x.((SustainableFashion(x) & EcoFriendly(x)) -> Sustainable(x))", "all x.((SustainableFashionBrand(x) & EcoFriendly(x)) -> EcoFriendly(x))", "all x.((SustainableFashionBrand(x) & EcoFriendlyBrand(x)) -> EcoFriendly(x))", "all x.(SustainableFashion(x) -> EcoFriendly(x))", "all x.((SustainableFashionBrand(x) & EcoFriendly(x)) -> SustainabilityBrand(x))", "all x.(SustainableFashionBrand(x) -> EcoFriendlyBrand(x))", "all x.((FashionBrand(x) & Sustainable(x)) -> EcoFriendly(x))", "all x.((SustainableFashionBrand(x) & EcoFriendlyBrand(x)) -> SustainabilityBrand(x))"]}
{"id": "folio_train_1387", "nl": "All fast fashion products are disposable products.", "fol": "all x.(IsFastFashionProduct(x) -> IsDisposableProduct(x))", "prediction": ["all x.(FastFashionProduct(x) -> Disposable(x))", "all x.(FastFashionProduct(x) -> DisposableProduct(x))", "all x.(FastFashion(x) -> Disposable(x))", "all x.(FastFashion(x) -> DisposableProduct(x))", "all x.((FastFashionProduct(x) & Disposable(x)) -> FastFashionProduct(x))", "all x.((FastFashionProduct(x) & Disposable(x)) -> FastFashion(x))", "all x.((FastFashionProduct(x) & DisposableProduct(x)) -> FastFashionProduct(x))", "all x.((FastFashion(x) & Disposable(x)) -> FastFashionProduct(x))", "all x.(FastFitnessProduct(x) -> Disposable(x))", "all x.((FastFashionProduct(x) & DisposableProduct(x)) -> FastFashion(x))", "all x.((FastFashion(x) & Disposable(x)) -> FastFashion(x))", "all x y.((FastFashionProduct(x) & FastFashionProduct(y)) -> Disposable(x))", "all x.(FastFashionProduct(x) -> Disposable(x))", "all x y.((FastFashionProduct(x) & FastFashionProduct(y)) -> DisposableProduct(x))", "all x.((FastFashionProduct(x) & DisposableProduct(x)) -> DisposableProduct(x))", "all x.((FastFashionProduct(x) & Disposable(x)) -> FastFit(x))"]}
{"id": "folio_train_1388", "nl": "If Reformation is not helping slow down global warming, then Reformation is an eco-friendly brand or a sustainable fashion brand.", "fol": "((-CanHelpSlowDownGlobalWarming(Reformation) -> IsEcoFriendlyBrand(Reformation)) | IsSustainableFashionBrand(Reformation))", "prediction": ["all x.((Reformation(x) & -SlowsGlobalWarming(x)) -> (EcoFriendlyBrand(x) | SustainableFashionBrand(x)))", "all x.((Reformation(x) & -SlowGlobalWarming(x)) -> (EcoFriendlyBrand(x) | SustainableFashionBrand(x)))", "all x.((Reformation(x) & -SlowingGlobalWarming(x)) -> (EcoFriendlyBrand(x) | SustainableFashionBrand(x)))", "all x.((Reformation(x) & -SlowsGlobalWarming(x)) -> (EcoFriendly(x) | SustainableFashion(x)))", "all x.((Reformation(x) & -SlowsGlobalWarming(x)) -> (EcoFriendly(x) | SustainableFashionBrand(x)))", "all x.((Reformation(x) & -SlowGlobalWarming(x)) -> (EcoFriendly(x) | SustainableFashion(x)))", "all x.((Reformation(x) & -SlowingGlobalWarming(x)) -> (EcoFriendly(x) | SustainableFashion(x)))", "all x.((Reformation(x) & -SlowGlobalWarming(x)) -> (EcoFriendly(x) | SustainableFashionBrand(x)))", "all x.((Reformation(x) & -SlowingGlobalWarming(x)) -> (EcoFriendly(x) | SustainableFashionBrand(x)))", "all x.((Reformation(x) & -HelpingSlowGlobalWarming(x)) -> (EcoFriendlyBrand(x) | SustainableFashionBrand(x)))", "all x.((Reformation(x) & -SlowsGlobalWarming(x)) -> ((EcoFriendlyBrand(x) | SustainableFashionBrand(x))))", "all x.((Reformation(x) & -SlowlyGlobalWarming(x)) -> (EcoFriendlyBrand(x) | SustainableFashionBrand(x)))", "all x.((Reformation(x) & -SlowdownGlobalWarming(x)) -> (EcoFriendlyBrand(x) | SustainableFashionBrand(x)))", "all x.((Reformation(x) & -SlowsGlobalWarming(x)) -> (EcoFriendlyBand(x) | SustainableFashionBand(x)))", "all x.((Reformation(x) & SlowsGlobalWarming(x)) -> (EcoFriendlyBrand(x) | SustainableFashionBrand(x)))", "all x.((Reformation(x) & SlowGlobalWarming(x)) -> (EcoFriendlyBrand(x) | SustainableFashionBrand(x)))"]}
{"id": "folio_train_1389", "nl": "Reformation is an eco-friendly brand.", "fol": "IsEcoFriendlyBrand(Reformation)", "prediction": ["All x.(Reformation(x) -> EcoFriendlyBrand(x))", "all x.(Reformation(x) -> EcoFriendlyBrand(x))", "All x.(Reformation(x) -> EcoFriendly(x))", "all x.(Reformation(x) -> EcoFriendly(x))", "all x.((Reformation(x) & EcoFriendly(x)) -> EcoFriendly(x))", "all x.((Reformation(x) & EcoFriendlyBrand(x)) -> EcoFriendly(x))", "All x.((Reformation(x) & EcoFriendly(x)) -> EcoFriendly(x))", "All x.((Reformation(x) & EcoFriendlyBrand(x)) -> EcoFriendly(x))", "(EcoFriendly(Reformation) -> EcoFriendly(Reformation))", "all x.((Reformation(x) & EcoFriendlyBrand(x)) -> EcoFriendlyBrand(x))", "(EcoFriendly(Reformation) -> EcoFriendlyBrand(Reformation))", "all x.((Reformation(x) & EcoFriendly(x)) -> EcoFriendlyBrand(x))", "All x.((Reformation(x) & EcoFriendly(x)) -> EcoFriendlyBrand(x))", "All x.(Reformation(x) -> EcoFriendlyBand(x))", "all x.(Reformation(x) -> EcoFriendlyBand(x))", "All x.((Reformation(x) & EcoFriendlyBrand(x)) -> EcoFriendlyBrand(x))"]}
{"id": "folio_train_1390", "nl": "Reformation produces fast fashion products.", "fol": "IsFastFashionProduct(Reformation)", "prediction": ["all x.(Reformation(x) -> ProducesFastFashionProducts(x))", "all x y.((Reformation(x) & FastFashionProduct(y)) -> Produces(x,y))", "all x y.((Reformation(x) & FastFashion(y)) -> Produces(x,y))", "all x.(Reformation(x) -> ProducesFastFashion(x))", "All x.(Reformation(x) -> ProducesFastFashionProducts(x))", "all x y z.((Reformation(x) & FastFashion(y) & Product(z)) -> Produces(x,y,z))", "all x y z.((Reformation(x) & FastFashionProduct(y) & Product(z)) -> Produces(x,y,z))", "All x y.((Reformation(x) & FastFashionProduct(y)) -> Produces(x,y))", "all x y z.((Reformation(x) & FastFashionProduct(y) & Product(z)) -> Produces(x,y))", "all x y z.((Reformation(x) & FastFashion(y) & Product(z)) -> Produces(x,y))", "All x y.((Reformation(x) & FastFashion(y)) -> Produces(x,y))", "all x y.((Reformation(x) & Product(y)) -> ProducesFastFashion(x,y))", "all x y.((Reformation(x) & Product(y)) -> ProducesFast(x,y))", "all x y.((Reformation(x) & FastFabric(y)) -> Produces(x,y))", "all x.(Reformation(x) -> (ProducesFastFashionProducts(x) & FastFashionProducts(x)))", "all x y.((Reformation(x) & FastFashionProduct(y)) -> Produce(x,y))"]}
{"id": "folio_train_1391", "nl": "Reformation does not produce fast fashion products.", "fol": "-IsFastFashionProduct(Reformation)", "prediction": ["all x.(Reformation(x) -> -ProducesFastFashionProducts(x))", "all x.(Reformation(x) -> -ProducesFastFashion(x))", "all x y.((Reformation(x) & FastFashionProduct(y)) -> -Produces(x,y))", "All x.(Reformation(x) -> -ProducesFastFashionProducts(x))", "all x.((Reformation(x) & -FastFashionProduct(x)) -> -Produces(x,FastFashionProducts))", "all x y.((Reformation(x) & FastFashion(y)) -> -Produces(x,y))", "all x.(Reformation(x) -> -ProduceFastFashionProducts(x))", "all x.(Reformation(x) -> -(ProducesFastFashionProducts(x) | ProducesFastFashionProducts(x)))", "all x.(Reformation(x) -> -(ProducesFastFashionProducts(x) | ProducesFastFashionProducts(x))))", "(-ProducesFastFashionProducts(Reformation))", "all x y.((Reformation(x) & FastFashionProduct(y)) -> -Produce(x,y))", "all x.((Reformation(x) & -FastFashion(x)) -> -Produces(x,FastFashion))", "all x.((Reformation(x) & -FastFashionProduct(x)) -> -Produces(x,FastFashion))", "all x.(Reformation(x) -> -(ProducesFastFashionProducts(x) & -ProducesFastFashionProducts(x)))", "all x.(Reformation(x) -> (-ProducesFastFashionProducts(x)))", "all x.(Reformation(x) -> -FastFashionProducts(x))"]}
{"id": "folio_train_1392", "nl": "Reformation does not produce fast fashion products or does not produce disposable products.", "fol": "(-IsFastFashionProduct(Reformation) | -IsDisposableProduct(Reformation))", "prediction": ["all x.(Reformation(x) -> (-ProducesFastFashionProducts(x) | -ProducesDisposableProducts(x)))", "all x.(Reformation(x) -> (-ProducesFastFashionProducts(x) | -ProducesDisposableProducts(x)))", "all x.(Reformation(x) -> (-ProducesFastFashion(x) | -ProducesDisposableProducts(x)))", "(all x.(Reformation(x) -> (-ProducesFastFashionProducts(x) | -ProducesDisposableProducts(x))))", "all x.(Reformation(x) -> (-ProducesFastFashion(x) | -ProducesDisposable(x)))", "all x.(Reformation(x) -> (-(ProducesFastFashionProducts(x) | -ProducesDisposableProducts(x))))", "all x.(Reformation(x) -> ((-ProducesFastFashionProducts(x) | -ProducesDisposableProducts(x))))", "all x.(Reformation(x) -> (-ProducesFastFashionProducts(x) | -ProducesDisposableProducts(x)))", "all x y.((Reformation(x) & (FastFashionProduct(y) | DisposableProduct(y))) -> -Produces(x,y))", "all x.(Reformation(x) -> (-ProducesFastFitnessProducts(x) | -ProducesDisposableProducts(x)))", "(-ProducesFastFashionProducts(Reformation) | -ProducesDisposableProducts(Reformation)))", "all x.(Reformation(x) -> (-ProducesFastFashionProducts(x) | -ProducesDisposibleProducts(x)))", "(all x.(Reformation(x) -> (-ProducesFastFashion(x) | -ProducesDisposableProducts(x))))", "(-ProducesFastFashionProducts(Reformation) & -ProducesDisposableProducts(Reformation))", "all x.(Reformation(x) -> (-ProducesFastFashion(x) | -ProducesDisposable(x)))", "(-ProducesFastFashionProducts(reformation) | -ProducesDisposableProducts(reformation)))"]}
{"id": "folio_train_1393", "nl": "If Reformation produces disposable products, then Reformation produces fast fashion products.", "fol": "(IsDisposableProduct(Reformation) -> IsFastFashionProduct(Reformation))", "prediction": ["all x.((Reformation(x) & ProducesDisposableProducts(x)) -> ProducesFastFashionProducts(x))", "all x.(Reformation(x) -> (ProducesDisposableProducts(x) & ProducesFastFashionProducts(x)))", "all x.((Reformation(x) & ProducesDisposableProducts(x)) -> ProducesFastFashionProducts(x))", "all x.((Reformation(x) & DisposableProducts(x)) -> FastFashionProducts(x))", "all x.((ReformationProducesDisposableProducts(x)) -> ProducesFastFashionProducts(x))", "all x y.((Reformation(x) & DisposableProduct(y)) -> ProducesFastFashionProducts(x,y))", "all x.((Reformation(x) & ProducesDiscopableProducts(x)) -> ProducesFastFashionProducts(x))", "all x.(Reformation(x) -> (ProducesDisposableProducts(x) & ProducesFastFashionProducts(x)))", "all x.((ReformationProducesDisposableProducts(x) & ReformationProducesFastFashionProducts(x)) -> ProducesFastFashionProducts(x))", "all x.((Reformation(x) & ProducesRemovableProducts(x)) -> ProducesFastFashionProducts(x))", "all x.((ReformationProducesDisposableProducts(x) & ReformationProducesFastFashionProducts(x)) -> Produces(x))", "all x y.((Reformation(x) & DisposableProducts(y)) -> ProducesFastFashionProducts(x,y))", "all x.(ProducesDisposableProducts(x) -> ProducesFastFashionProducts(x))", "all x.((Reformation(x) & ProducesDisposableProducts(x)) -> ProducesFastModeProducts(x))", "all x y.((Reformation(x) & DisposableProduct(y)) -> FastFashionProduct(x,y))", "all x y.((Reformation(x) & DisposableProduct(y)) -> ProducesFastFashionProduct(x,y))"]}
{"id": "folio_train_1394", "nl": "If Reformation produces fast fashion products or helps slow down global warming, then Reformation produces fast fashion products.", "fol": "((IsFastFashionProduct(Reformation) | CanHelpSlowDownGlobalWarming(Reformation)) -> IsFastFashionProduct(Reformation))", "prediction": ["all x.((Reformation(x) & (ProducesFastFashionProducts(x) | SlowsGlobalWarming(x))) -> ProducesFastFashionProducts(x))", "all x.((Reformation(x) & (ProducesFastFashion(x) | SlowsGlobalWarming(x))) -> ProducesFastFashion(x))", "all x.((Reformation(x) & (ProducesFastFashion(x) | SlowsGlobalWarming(x))) -> ProducesFastFashionProducts(x))", "all x.((Reformation(x) & (ProducesFastFashionProducts(x) | HelpsSlowGlobalWarming(x))) -> ProducesFastFashionProducts(x))", "all x.((Region(x) & (ProducesFastFashionProducts(x) | SlowsGlobalWarming(x))) -> ProducesFastFashionProducts(x))", "all x.((Reformation(x) & (ProducesFastFashionProducts(x) | SlowsGlobalWarmingProducts(x))) -> ProducesFastFashionProducts(x))", "all x y.((Reformation(x) & (ProducesFastFashionProducts(x) | SlowsGlobalWarming(x))) -> ProducesFastFashionProducts(x))", "all x.((Reformation(x) & (ProducesFastFashionProducts(x) | SlowsGlobalWarmth(x))) -> ProducesFastFashionProducts(x))", "all x.((Reformation(x) & (ProducesFastFashionProducts(x) | SlowsDownGlobalWarming(x))) -> ProducesFastFashionProducts(x))", "all x.((Regformation(x) & (ProducesFastFashionProducts(x) | SlowsGlobalWarming(x))) -> ProducesFastFashionProducts(x))", "all x.((Registration(x) & (ProducesFastFashionProducts(x) | SlowsGlobalWarming(x))) -> ProducesFastFashionProducts(x))", "all x.((Reformation(x) & (FastFashionProducts(x) | SlowsGlobalWarming(x))) -> FastFashionProducts(x))", "all x.((Reformation(x) & (ProducesFastFashion(x) | HelpsSlowGlobalWarming(x))) -> ProducesFastFashion(x))", "all x y.((Reformation(x) & (ProducesFastFashionProducts(x) | SlowsGlobalWarming(x))) -> ProducesFastFashionProducts(x,y))", "all x.((Reformation(x) & (ProducesFastFashion(x) | HelpsSlowGlobalWarming(x))) -> ProducesFastFashionProducts(x))", "all x y.((Reformation(x) & (ProducesFastFashionProducts(x) | SlowsGlobalWarming(x))) -> ProducesFastFashionProducts(y))"]}
{"id": "folio_train_1395", "nl": "Roy Richardson was a cricketer for Sint Maartener, a consituent country.", "fol": "(IsCricketer(Royrichardson) & PlayedForTeam(Royrichardson,Sintmaartener) & IsConstituentCountry(Sintmaartener))", "prediction": ["all x y.((RoyRichardson(x) & SintMaartener(y)) -> Cricketer(x,y))", "all x y z.((RoyRichardson(x) & Cricketer(y) & SintMaartener(z)) -> CricketerFor(x,y,z))", "all x y.((RoyRichardson(x) & SintMaartener(y)) -> CricketerFor(x,y))", "all x y z.((RoyRichardson(x) & Cricketer(y) & SintMaartener(z)) -> Cricketer(x,y,z))", "all x.(RoyRichardson(x) -> (CricketerForSintMaartener(x) & ConsituentCountry(x)))", "all x y.((RoyRichardson(x) & SintMaartener(y)) -> Cricketer(x))", "all x y z.((RoyRichardson(x) & Cricketer(y) & SintMaartener(z) & ConsituentCountry(z)) -> CricketerFor(x,y,z))", "all x y z.((RoyRichardson(x) & Cricketer(y) & SintMaartener(z)) -> CricketerForConstituentCountry(x,y,z))", "all x.((RoyRichardson(x) & CricketerForSintMaartener(x)) -> ConsituentCountry(x))", "all x y z.((RoyRichardson(x) & Cricketer(y) & SintMaartener(z)) -> CricketerForConsituentCountry(x,y,z))", "all x y z.((RoyRichardson(x) & Cricketer(y) & SintMaartener(z) & ConsituentCountry(z)) -> Cricketer(x,y,z))", "all x.(RoyRichardson(x) -> (Cricketer(x) & ForSintMaartener(x) & ConsituentCountry(x)))", "all x.(RoyRichardson(x) -> (Cricketer(x) & ForSintMaartener(x)))", "all x.(RoyRichardson(x) -> CricketerForSintMaartener(x))", "all x y z.((RoyRichardson(x) & CricketerForSintMaartener(y) & Country(z)) -> CricketerFor(x,y,z))", "all x.(RoyRichardson(x) -> (CricketerForSintMaartener(x) & ConsituentCountry(x)))"]}
{"id": "folio_train_1396", "nl": "Roy Richardson was a right handed batsman and medium pace bowler.", "fol": "(IsRightHandedBatsman(Royrichardson) & IsBatsman(Royrichardson) & IsMediumPaceBowler(Royrichardson))", "prediction": ["all x.(Roy Richardson(x) -> (RightHandledBatsman(x) & MediumPaceBowler(x)))", "all x.(RoyRichardson(x) -> (RightHandledBatsman(x) & MediumPaceBowler(x)))", "all x.(Roy Richardson(x) -> (RightHandedBatsman(x) & MediumPaceBowler(x)))", "all x.(RoyRichardson(x) -> (RightHandedBatsman(x) & MediumPaceBowler(x)))", "all x.(Roy Richardson(x) -> (RightHandledBatsman(x) & MediumPaceBolter(x)))", "Roy Richardson (RightHandledBatsman(Roy) & MediumPaceBowler(Roy))", "all x.(Roy Richardson(x) -> (RightHandledBatsman(x) & MediumPaceBowler(x)))", "(Roy Richardson(Roy) & RightHandledBatsman(Roy) & MediumPaceBowler(Roy))", "all x.(RoyRichardson(x) -> (RightHandledBatsman(x) & MediumPaceBowler(x)))", "all x.(Roy Richardson(x) -> (RightHandledBatsman(x) & MediumPaceBaller(x)))", "all x.(RoyRichardson(x) -> (RightHandledBatsman(x) & MediumPaceBolter(x)))", "all x.(RoyRiley(x) -> (RightHandledBatsman(x) & MediumPaceBowler(x)))", "all x.(RoyRichardson(x) -> (RightHandledBatsman(x) & MediumPaceBaller(x)))", "all x.(Roy Richardson(x) -> (RightHandledBatsman(x) & MediumPaceBosser(x)))", "Roy Richardson (RightHandledBatsman(RoyRichardson) & MediumPaceBowler(Richardson))", "(Roy Richardson(Roy) & RightHandedBatsman(Roy) & MediumPaceBowler(Roy))"]}
{"id": "folio_train_1397", "nl": "Roy Richardson was old when he debuted in cricket.", "fol": "(IsOld(Royrichardson) & DebutedInSport(Royrichardson,Cricket))", "prediction": ["all x.((RoyRichardson(x) & DebutedInCricket(x)) -> Old(x))", "all x.((RoyRichardson(x) & DebutedInCrickets(x)) -> Old(x))", "all x.((Roy Richardson(x) & DebutedInCricket(x)) -> Old(x))", "all x y.((RoyRichardson(x) & Cricket(y) & DebutedIn(x,y)) -> Old(x))", "all x.((RoyRichardson(x) & DebutedInCricket(x)) -> Old(x))", "all x.((Roy Richardson(x) & DebutedInCrickets(x)) -> Old(x))", "all x.((RoyRichardson(x) & Cricket(x)) -> Old(x))", "all x y.((RoyRichardson(x) & Cricket(y)) -> Old(x))", "all x.((RoyRiley(x) & DebutedInCricket(x)) -> Old(x))", "all x.((RoyRileyson(x) & DebutedInCricket(x)) -> Old(x))", "all x y z.((RoyRichardson(x) & Cricket(y) & Cricket(z) & DebutedIn(x,y,z)) -> Old(x))", "all x y z.((RoyRichardson(x) & Cricket(y) & Cricket(z) & DebutedIn(x,y)) -> Old(x))", "all x y.((RoyRichardson(x) & Cricket(y)) -> Old(x,y))", "all x.((RoyRiley(x) & DebutedInCrickets(x)) -> Old(x))", "all x.((Roy Richardson(x) & DebutedInCricket(x)) -> Old(x))", "all x.((RoyRichardson(x) & CricketDebut(x)) -> Old(x))"]}
{"id": "folio_train_1398", "nl": "Sherville Huggins dismissed Roy Richardson.", "fol": "DismissedBy(Shervillehuggins,Royrichardson)", "prediction": ["ShervilleHuggins dismissedRoy Richardson.", "All x y.((ShervilleHuggins(x) & RoyRichardson(y)) -> Dismissed(x,y))", "All x.((ShervilleHuggins(x) & RoyRichardson(y)) -> Dismissed(x,y))", "All x.((ShervilleHuggins(x) & RoyRichardson(x)) -> Dismissed(x,y))", "All x.((ShervilleHuggins(x) & RoyRichardson(x)) -> Dismissed(x))", "ShervilleHuggins dismissedRoyRichardson.", "All x.((ShervilleHuggins(x) & RoyRichardson(x)) -> Dismissed(x,Richardson))", "All x y.((ShervilleHuggins(x) & RoyRiley(y)) -> Dismissed(x,y))", "All x y.((ShervilleHuggins(x) & RoyRichardson(y)) -> Dismisses(x,y))", "All x.((ShervilleHuggins(x) & RoyRichardson(x)) -> Dismisses(x,Richardson))", "All x.((ShervilleHuggins(x) & RoyRiley(y)) -> Dismissed(x,y))", "All x.((ShervilleHuggins(x) & RoyRichardson(x)) -> Dismisses(x,y))", "All x.((ShervilleHuggins(x) & RoyRichardson(y)) -> Dismisses(x,y))", "All x.((ShervilleHuggins(x) & RoyRiley(x)) -> Dismissed(x,Riley))", "All x y.((ShervilleHuggins(x) & RoyRiley(y)) -> Dismisses(x,y))", "All x.((ShervilleHuggins(x) & RoyRiley(x)) -> Dismissed(x,y))"]}
{"id": "folio_train_1399", "nl": "Sherville Huggins has never dismissed anyone playing for a constituent country.", "fol": "-exists x y.(DismissedBy(Shervillehuggins,x) & PlayedForTeam(x,y) & IsConstituentCountry(y))", "prediction": ["all x.((ShervilleHuggins(x) & -Dismissed(x)) -> PlayingForConstituentCountry(x))", "all x y.((ShervilleHuggins(x) & Country(y)) -> -Dismissed(x,y))", "all x.((ShervilleHuggins(x) & -DismissedPlayingForConstituentCountry(x)) -> -DismissedPlayingForConstituentCountry(x))", "All x.((ShervilleHuggins(x) & -Dismissed(x)) -> PlayingForConstituentCountry(x))", "all x y.((ShervilleHuggins(x) & Country(y)) -> NeverDismissed(x,y))", "all x.((ShervilleHuggins(x) & NeverDismissed(x)) -> PlayingForConstituentCountry(x))", "all x y.((ShervilleHuggins(x) & Player(y)) -> -Dismissed(x,y))", "all x.((ShervilleHuggins(x) & -DismissedPlayingForConstituentCountry(x)) -> PlayingForConstituentCountry(x))", "all x y.((ShervilleHuggins(x) & Person(y)) -> -Dismissed(x,y))", "all x.((ShervilleHughes(x) & -Dismissed(x)) -> PlayingForConstituentCountry(x))", "all x.((ShervilleHuggins(x) & -Dismissed(x,y)) -> PlayingForConstituentCountry(y))", "all x.((ShervilleHuggins(x) & -Dismissed(x)) -> PlaysForConstituentCountry(x))", "all x y.((ShervilleHuggins(x) & Person(y) & PlayingFor(x,y)) -> -Dismissed(x,y))", "all x.((ShervilleHuggins(x) & -DismissedPlayingForConstituentCountry(x)) -> Never(x))", "All x y.((ShervilleHuggins(x) & Country(y)) -> -Dismissed(x,y))", "all x y.((ShervilleHughes(x) & Country(y)) -> -Dismissed(x,y))"]}
{"id": "folio_train_1400", "nl": "There are no right handed medium pace bowlers playing for Sint Maartener.", "fol": "-exists x.(IsRightHandedBatsman(x) & IsMediumPaceBowler(x) & PlayedForTeam(x,Sintmaartener))", "prediction": ["-exists x.(RightHandedMediumPaceBowler(x) & PlaysForSintMaartener(x))", "-exists x.(RightHandedMediumPaceBowler(x) & PlayingForSintMaartener(x))", "-exists x.(RightHandedMediumPaceBowler(x) & PlayedForSintMaartener(x))", "-exists x.(RightHandedMediumPaceBolter(x) & PlaysForSintMaartener(x))", "-exists x.(RightHandedMediumPaceBaller(x) & PlaysForSintMaartener(x))", "-exists x.(RightHandedMediumPaceBosser(x) & PlaysForSintMaartener(x))", "-exists x.(RightHandedMediumPaceBolter(x) & PlayingForSintMaartener(x))", "-exists x.(RightHandedMediumPaceBowler(x) & PlaysFor(x,SintMaartener))", "-exists x.(RightHandedMediumPaceBower(x) & PlaysForSintMaartener(x))", "-(RightHandedMediumPaceBowler(x) & PlayingForSintMaartener(x))", "-exists x.(RightHandedMediumPaceBolter(x) & PlayedForSintMaartener(x))", "-exists x.(RightHandedMediumPaceBaller(x) & PlayingForSintMaartener(x))", "-exists x.(RightHandedMediumPaceBosser(x) & PlayingForSintMaartener(x))", "-exists x.(RightHandedMediumPaceBosser(x) & PlayedForSintMaartener(x))", "-exists x.(RightHandedMediumPaceBowler(x) & PlayedFor(x,SintMaartener))", "-(RightHandedMediumPaceBowler(x) & PlaysForSintMaartener(x))"]}
{"id": "folio_train_1401", "nl": "To get a job at Google, you need to have a lot of work experience or a good education.", "fol": "all x.((GotJobAtGoogle(x,Google) -> HasWorkExperience(x)) | HasGoodEducation(x))", "prediction": ["all x.((GoogleJob(x) & (WorkExperience(x) | GoodEducation(x))) -> JobAtGoogle(x))", "all x.((GoogleJob(x) & (LotOfWorkExperience(x) | GoodEducation(x))) -> JobAtGoogle(x))", "all x.((GoogleJob(x) & (LotOfWorkExperience(x) | GoodEducation(x))) -> GetsJob(x))", "all x.((GoogleJob(x) & (LotOfWorkExperience(x) | GoodEducation(x))) -> JobsAtGoogle(x))", "all x.((GoogleJob(x) & (WorkExperience(x) | GoodEducation(x))) -> JobsAtGoogle(x))", "all x.((Job(x) & Google(x)) -> (LotOfWorkExperience(x) | GoodEducation(x)))", "all x.((GoogleJob(x) & (WorkExperience(x) | GoodEducation(x))) -> GetsJob(x))", "all x.((Job(x) & Google(x)) -> (WorkExperience(x) | GoodEducation(x)))", "all x.(GoogleJob(x) -> (LotOfWorkExperience(x) | GoodEducation(x)))", "all x.((GoogleJob(x) & (LittleWorkExperience(x) | GoodEducation(x))) -> JobAtGoogle(x))", "all x.((GoogleJob(x) & (LittleWorkExperience(x) | GoodEducation(x))) -> GetsJob(x))", "all x.((GoogleJob(x) & (LotOfWorkExperience(x) | GoodEducation(x))) -> GetJob(x))", "all x.((GoogleJob(x) & (LittleWorkExperience(x) | GoodEducation(x))) -> JobsAtGoogle(x))", "all x.(GoogleJob(x) -> (WorkExperience(x) | GoodEducation(x)))", "all x.((GoogleJob(x) & (WorkExperience(x) | GoodEducation(x))) -> JobsAt(x,y))", "all x.((GoogleJob(x) & (WorkExperience(x) | GoodEducation(x))) -> GetJob(x))"]}
{"id": "folio_train_1402", "nl": " All Yale graduates who submitted their resumes to Google got jobs there.", "fol": "all x.((IsYaleGraduate(x) & SubmittedResumeToGoogle(x,Google)) -> GotJobAtGoogle(x,Google))", "prediction": ["all x y.((Graduate(x) & Yale(y) & SubmittedResumeToGoogle(x,y)) -> GotJob(x,y))", "all x y.((Graduate(x) & Yale(y) & SubmittedResume(x,y)) -> GotJob(x,y))", "all x.((Graduate(x) & Yale(x) & SubmittedResumesToGoogle(x)) -> GotJobs(x))", "all x.((Graduate(x) & SubmittedResumeToGoogle(x)) -> GotJobs(x))", "all x.((Graduate(x) & Yale(x) & submittedResumesToGoogle(x)) -> GotJobs(x))", "all x.((Graduate(x) & SubmittedResumesToGoogle(x)) -> GotJobs(x))", "all x.((Graduate(x) & Yale(x) & submittedResumeToGoogle(x)) -> GotJobs(x))", "all x y.((Graduate(x) & Yale(y) & SubmittedResumesToGoogle(x,y)) -> GotJobs(x,y))", "all x.((Graduate(x) & SubmittedResumeToGoogle(x)) -> GotJob(x))", "all x.((Graduate(x) & Yale(x) & submittedResumeToGoogle(x)) -> GotJob(x))", "all x.((Graduate(x) & Yale(x) & SubmittedResumeToGoogle(x)) -> GotJobs(x))", "all x y.((Graduate(x) & Yale(y) & SubmittedResumeToGoogle(x,y)) -> GotJobs(x,y))", "all x.((Graduate(x) & Yale(x) & SubmittedResumeToGoogle(x)) -> GotJob(x))", "all x y.((Graduate(x) & Yale(y) & submittedResume(x,y)) -> GotJob(x,y))", "all x y.((Graduate(x) & Yale(y) & submittedResumeToGoogle(x,y)) -> GotJob(x,y))", "all x.((Graduate(x) & Yale(x) & SubmittedResumesToGoogle(x)) -> GotJobsThere(x))"]}
{"id": "folio_train_1403", "nl": " John has a lot of work experience.", "fol": "HasWorkExperience(John)", "prediction": ["all x.(John(x) -> LotsOfWorkExperience(x))", "all x.(John(x) -> HasWorkExperience(x))", "all x.((John(x) & WorkExperience(x)) -> Has(x,y))", "all x.(John(x) -> WorkExperience(x))", "all x.(John(x) -> WorksExperience(x))", "John has a lot of work experience.", "all x.(John(x) -> HasLittleWorkExperience(x))", "all x.((John(x) & WorkExperience(x)) -> Lots(x))", "all x.(John(x) -> HasLotsOfWorkExperience(x))", "all x.((John(x) & WorkExperience(x)) -> LotsOf(x,y))", "all x.((John(x) & WorkExperience(y)) -> Has(x,y))", "(WorkExperience(John) & -WorkExperience(John))", "John has a lot of workExperience.", "(WorkExperience(John) & Lots(John))", "all x.((John(x) & WorkExperience(x)) -> WorksExperience(x))", "all x.((John(x) & WorkExperience(x)) -> WorkExperience(x))"]}
{"id": "folio_train_1404", "nl": " John submitted his resume to Google and got a job there.", "fol": "(SubmittedResumeToGoogle(John,Google) & GotJobAtGoogle(John,Google))", "prediction": ["all x y.((John(x) & Resume(y)) -> (SubmittedToGoogle(x,y) & GotJob(x,y)))", "all x y.((John(x) & Resume(y)) -> (SubmittedToGoogle(x,y) & GotJob(x,y)))", "all x y z.((John(x) & Resume(y) & Job(z)) -> (SubmittedToGoogle(x,y) & GotJob(x,z)))", "all x y z.((John(x) & Resume(y) & Job(z)) -> (SubmittedToGoogle(x,y) & GotJob(x,z)))", "all x y.((John(x) & Google(y)) -> (SubmittedResumeTo(x,y) & GotJob(x,y)))", "all x y z.((John(x) & Resume(y) & Job(z)) -> (SubmittedToGoogle(x,y) & GotJob(y,z)))", "all x y.((John(x) & Google(y)) -> (SubmittedResume(x,y) & GotJob(x,y)))", "all x.(John(x) -> (SubmittedResumeToGoogle(x) & GotJob(x)))", "all x y.((John(x) & Google(y)) -> (SubmittedResume(x,y) & GotJob(x,y)))", "all x y.((John(x) & Google(y)) -> (SubmittedResumeTo(x,y) & GotJob(x,y)))", "all x y z.((John(x) & Resume(y) & Job(z)) -> (SubmittedToGoogle(x,y) & GotJob(y,z)))", "all x.(John(x) -> (SubmittedResumeToGoogle(x) & GotJob(x)))", "all x y z.((John(x) & Resume(y) & Google(z)) -> (SubmittedTo(x,y) & GotJob(x,z)))", "all x y.((John(x) & Resume(y)) -> (SubmittedToGoogle(x,y) & GotJob(y)))", "all x y.((John(x) & Resume(y)) -> (SubmittedToGoogle(x,y) & GotJob(y,x)))", "all x y.((John(x) & Resume(y)) -> (SubmittedToGoogle(x,y) & GotJob(y)))"]}
{"id": "folio_train_1405", "nl": "John is a Yale graduate.", "fol": "IsYaleGraduate(John)", "prediction": ["(Graduate(John) & Yale(John))", "all x.(John(x) -> YaleGraduate(x))", "(Graduate(John,Yale) & Graduate(John,Yale))", "John is Yale graduate.", "all x.((John(x) & YaleGraduate(x)) -> Graduate(x))", "All x.(John(x) -> YaleGraduate(x))", "(Graduate(John,Yale))", "(Graduate(John,Yale) & -Graduate(John,Yale))", "(Graduate(John,Yale) -> Graduate(John,Yale))", "(Graduate(John,Yale) & Yale(John))", "(Graduate(John,Yale) -> Yale(John))", "all x.(John(x) -> YaleGraduate(x))", "John is Yale Graduate(John)", "(Graduate(John,Yale) & Yale(John,Yale))", "(Graduate(John,Yale) & Graduate(John,yale))", "(Graduate(John,Yale) -> Graduate(John,Yale))"]}
{"id": "folio_train_1406", "nl": "No students are doctors.", "fol": "all x.(IsStudent(x) -> -IsDoctor(x))", "prediction": ["-exists x.(Student(x) & Doctor(x))", "all x.(Student(x) -> -Doctor(x))", "all x.(Student(x) -> Doctor(x))", "(-exists x.(Student(x) & Doctor(x)))", "-exists x.(Student(x) & -Doctor(x))", "(-exists x.(Student(x) & Doctor(x)) & -exists y.(Student(y) & Doctor(y))))", "all x.(Student(x) -> -Dr.(Student(x)))", "-exists x.(Student(x) & Physician(x))", "exists x.(Student(x) & -Doctor(x))", "-exists x.(Student(x) & -Dr.((Student(x) & Doctor(x)))", "\u2013exists x.(Student(x) & Doctor(x))", "-exists x.(Student(x) & Doctor(x)) & -exists y.(Student(y) & Doctor(y)))", "(-exists x.(Student(x) & Doctor(x)) & -exists y.(Student(y) & Doctor(y)))", "all x.(Student(x) -> -Dr.((Student(x) & Doctor(x)))", "-exists x.(Student(x) & Doctor(y))", "-exists x.(Student(x) & -Dr.((Student(x) & Doctor(x))))"]}
{"id": "folio_train_1407", "nl": "All people taking classes are students. ", "fol": "all x.(IsTakingClass(x) -> IsStudent(x))", "prediction": ["all x.(TakesClasses(x) -> Student(x))", "all x.((Person(x) & TakesClasses(x)) -> Student(x))", "all x.(TakesClass(x) -> Student(x))", "all x.(TakingClasses(x) -> Student(x))", "all x.((Person(x) & TakesClass(x)) -> Student(x))", "all x.(TakingClass(x) -> Student(x))", "all x.((Person(x) & TakesClasses(x)) -> Students(x))", "all x.(Person(x) & TakesClasses(x)) -> Student(x))", "all x.(Person(x) -> Student(x))", "all x.(Student(x) -> TakesClasses(x))", "all x.(TakesClasses(x) -> Students(x))", "all x.(TeachingClass(x) -> Student(x))", "all x.(TakingClasses(x) -> Students(x))", "all x.((Person(x) & TakesClass(x)) -> Students(x))", "all x.(TeachesClass(x) -> Student(x))", "all x.(Student(x) -> TakesClass(x))"]}
{"id": "folio_train_1408", "nl": "All graduate students are people taking classes. ", "fol": "all x.(IsGraduateStudent(x) -> IsTakingClass(x))", "prediction": ["all x.(GraduateStudent(x) -> TakesClasses(x))", "all x.(GraduateStudent(x) -> PeopleTakingClasses(x))", "all x.(GraduateStudent(x) -> TakesClass(x))", "all x.(GraduateStudent(x) -> TakenClass(x))", "all x.(GraduateStudent(x) -> PersonTakingClasses(x))", "all x.(GraduateStudent(x) -> TakesClasses(x))", "all x.(GraduateStudent(x) -> TakenClasses(x))", "all x.(GraduateStudent(x) -> (TakesClasses(x) & TakesClasses(x)))", "all x.(GraduateStudent(x) -> PeopleTakingClasses(x))", "all x.(GraduateStudent(x) -> PeopleTakenClasses(x))", "all x.(GraduateStudent(x) -> (TakesClasses(x) | TakesClasses(x)))", "all x.(GraduateStudent(x) -> (TakingClasses(x) & TakesClasses(x)))", "all x.(GraduateStudent(x) -> (TakingClasses(x) | TakingClasses(x)))", "all x.(GraduateStudent(x) -> TakingClasses(x))", "all x.(GraduateStudent(x) -> (TakesClasses(x) & PeopleTakesClasses(x)))", "all x.(GraduateStudent(x) -> (TakesClasses(x) & Person(x)))"]}
{"id": "folio_train_1409", "nl": "All PhD students are graduate students. ", "fol": "all x.(IsPhDStudent(x) -> IsGraduateStudent(x))", "prediction": ["all x.(PhDStudent(x) -> GraduateStudent(x))", "all x.(DoctoralStudent(x) -> GraduateStudent(x))", "all x.(PhD Student(x) -> GraduateStudent(x))", "all x.(PhD student(x) -> GraduateStudent(x))", "all x.(PhD(x) -> GraduateStudent(x))", "all x.((PhDStudent(x) & GraduateStudent(x)) -> GraduateStudent(x))", "all x.((PhD Student(x) & GraduateStudent(x)) -> GraduateStudent(x))", "all x.((PhD student(x) & GraduateStudent(x)) -> GraduateStudent(x))", "all x.((DoctoralStudent(x) & GraduateStudent(x)) -> GraduateStudent(x))", "all x.((PhDStudent(x) & GraduateStudent(x)) -> PhDStudent(x))", "all x.((PhD student(x) & GraduateStudent(x)) -> PhDStudent(x))", "all x.((Student(x) & PhD(x)) -> GraduateStudent(x))", "all x.((PhD Student(x) & GraduateStudent(x)) -> PhDStudent(x))", "all x.((PhD(x) & GraduateStudent(x)) -> PhDStudent(x))", "all x.(DissertationStudent(x) -> GraduateStudent(x))", "all x.(Doctor(x) -> GraduateStudent(x))"]}
{"id": "folio_train_1410", "nl": "If Joe is a graduate student or a doctor (but not both), then Joe is not a graduate student and a student.", "fol": "(((IsGraduateStudent(Joe) & -IsDoctor(Joe)) | (-IsGraduateStudent(Joe) & IsDoctor(Joe))) -> -(IsGraduateStudent(Joe) & IsStudent(Joe)))", "prediction": ["all x.((GraduateStudent(x) | Doctor(x)) -> (-GraduateStudent(x) & -Doctor(x)))", "all x.((GraduateStudent(x) | Doctor(x)) -> -(GraduateStudent(x) & Student(x)))", "all x.((GraduateStudent(x) & -Doctor(x)) -> (-GraduateStudent(x) & -Doctor(x)))", "all x.((GraduateStudent(x) | Doctor(x)) -> -GraduateStudent(x) & -Student(x))", "all x.((GraduateStudent(x) | Doctor(x)) -> -GraduateStudent(x) & Student(x))", "((GraduateStudent(Joe) & -Doctor(Joe)) | (-GraduateStudent(Joe) & Doctor(Joe))))", "all x.((GraduateStudent(x) & -Doctor(x)) -> -GraduateStudent(x) & -Doctor(x))", "all x.((GraduateStudent(x) | Doctor(x)) -> -(GraduateStudent(x) & Student(x))))", "all x.((GraduateStudent(x) & -Doctor(x)) -> -GraduateStudent(x) & -Student(x))", "all x.((GraduateStudent(x) | Doctor(x)) -> (-GraduateStudent(x) & -Student(x)))", "all x.((GraduateStudent(x) & -Doctor(x)) -> -(GraduateStudent(x) & Student(x)))", "(-(GraduateStudent(Joe) & Doctor(Joe)) | (-GraduateStudent(Joe) & Doctor(Joe))))", "all x.((GraduateStudent(x) | Doctor(x)) -> -GraduateStudent(x) & -Doctor(x))", "all x.((GraduateStudent(x) | Doctor(x)) -> (-GraduateStudent(x) & Student(x)))", "(-(GraduateStudent(Joe) & -Doctor(Joe)) | (-GraduateStudent(Joe) & Doctor(Joe))))", "(-(GraduateStudent(Joe) | Doctor(Joe))) -> (-GraduateStudent(Joe) & -Doctor(Joe)))"]}
{"id": "folio_train_1411", "nl": "Joe is a person taking classes.", "fol": "IsTakingClass(Joe)", "prediction": ["all x.(Joe(x) -> TakesClasses(x))", "all x.((Person(x) & TakesClasses(x)) -> JoeTakesClasses(x))", "all x.((Person(x) & TakesClasses(x)) -> Joe(x))", "(TakesClasses(Joe) & TakesClasses(Joe))", "all x y.((Person(x) & Joe(y)) -> TakesClasses(x,y))", "all x.(Joe(x) -> TakesClasses(x))", "(Person(Joe) & TakesClasses(Joe))", "all x.((Person(x) & TakesClasses(x)) -> TakesClasses(x))", "all x.(Person(x) & TakesClasses(x))", "(TakesClasses(Joe) -> TakesClasses(Joe))", "all x.((Person(x) & TakesClasses(x)) -> JoeTakingClasses(x))", "(TakesClasses(Joe) | TakesClasses(Joe)))", "(TakingClasses(Joe) & TakesClasses(Joe))", "All x.(Joe(x) -> TakesClasses(x))", "exists x.(Person(x) & TakesClasses(x))", "(PersonTakingClasses(Joe) & TakesClasses(Joe))"]}
{"id": "folio_train_1412", "nl": "Joe is a PhD student.", "fol": "IsPhDStudent(Joe)", "prediction": ["((Joe(Joe) & PhDStudent(Joe)) -> PhDStudent(Joe))", "(PhD Student(Joe))", "(PhDStudent(Joe) & PhDStudent(Joe))", "(PhD Student(Joe) & PhDStudent(Joe))", "(PhD student(Joe) & PhDStudent(Joe))", "(Student(Joe) & PhD(Joe))", "all x.(PhDStudent(x) -> Joe(x))", "all x.(Joe(x) -> PhDStudent(x))", "all x.((Joe(x) & PhDStudent(x)) -> PhDStudent(x))", "((Joe(Joe) & PhDStudent(Joe)) -> PhDStudent(Joe)))", "all x.((Joe(x) & PhDStudent(x)) -> -PhDStudent(x))", "((Joe(Joe) & PhDStudent(Joe)))", "(Professor(Joe) & PhDStudent(Joe))", "(DoctorStudent(Joe) & PhDStudent(Joe))", "(Student(Joe) & PhDStudent(Joe))", "(PhD student(Joe))"]}
{"id": "folio_train_1413", "nl": "Joe is not a PhD student.", "fol": "-IsPhDStudent(Joe)", "prediction": ["all x.((Joe(x) & -PhDStudent(x)) -> -PhDStudent(x))", "all x.((Joe(x) & -PhDStudent(x)) -> -PhD Student(x))", "all x.(Joe(x) -> -PhDStudent(x))", "(-PhD Student(Joe))", "all x.((Joe(x) & -DoctoralStudent(x)) -> -PhDStudent(x))", "(-PhDStudent(Joe))", "all x.((Joe(x) & -PhD Student(x)) -> -PhD Student(x))", "all x.((Joe(x) & -DoctoralStudent(x)) -> -DoctoralStudent(x))", "-PhDStudent(Joe)", "all x.((Joe(x) & -PhDStudent(x)) -> -DoctoralStudent(x))", "-PhD Student(Joe)", "all x.(Joe(x) -> -DoctoralStudent(x))", "all x.((Joe(x) & -DoctoralStudent(x)) -> -PhD Student(x))", "all x.((Joe(x) & -PhD student(x)) -> -PhD student(x))", "(-DoctoralStudent(Joe))", "all x.((Joe(x) & -PhDStudent(x)) -> -PhD student(x))"]}
{"id": "folio_train_1414", "nl": "Hugh Vanstone is one of the world's leading lighting designers. ", "fol": "IsLeadingLightingDesigner(HughVanstone)", "prediction": ["Hugh Vanstone is one of the world's leadingLightingDesigners(HughVanstone)", "Hugh Vanstone is one of the world's leadingLightingDesigners(HughVanstone)", "Hugh Vanstone is one of the world's leadingLightingDesigners(x)", "Hugh Vanstone is one of the world's leadingLightingDesigners.", "Hugh Vanstone is one of the world's leadingLightingDesigners(h)", "Hugh Vanstone is one of the world's leading LightingDesigners.", "Hugh Vanstone is one of the worlds leadingLightingDesigners(HughVanstone)", "Hugh Vanstone is one of the worlds leadingLightingDesigners(HughVanstone)", "HughVanstone is one of the world's leadingLightingDesigners(x)", "Hugh Vanstone is one of the world's leadingLightingDesigners(x).", "Hugh Vanstone is one of the world's leading lighting designers.", "Hugh Vanstone is one of the world's leadingLightingDesigners(HgVanstone)", "HughVanstone is one of the world's leadingLightingDesigners(HughVanstone)", "Hugh Vanstone is one of the world's leadingLightingDesigners(HughVanstone).", "Hugh Vanstone is one of the world's leadingLightingDesigners(HgtVanstone)", "Hugh Vanstone is one of the worlds leadingLightingDesigners(x)"]}
{"id": "folio_train_1415", "nl": "Hugh Vanstone is from the UK.", "fol": "IsFromUK(HughVanstone)", "prediction": ["Hugh Vanstone is from the UK.", "Hugh Vanstone is from UK.", "all x.(HughVanstone(x) -> FromUK(x))", "all x.(HughVanstone(x) -> UK(x))", "All x.(HughVanstone(x) -> FromUK(x))", "All x.(HughVanstone(x) -> UK(x))", "all x.(HughVanstone(x) -> (FromUK(x) & FromUK(x)))", "HughVanstone is from UK.", "all x.(HughVanstone(x) -> (FromUK(x) & UK(x)))", "all x.(HughVanstone(x) -> (FromUK(x) & -FromUK(x)))", "All x.(HughVanstone(x) -> (FromUK(x) & FromUK(x)))", "all x.(HughVanstone(x) -> (FromUK(x) & LivesIn(x,UK)))", "all x.(HughVanstone(x) -> (FromUK(x) & From(x,UK)))", "all x.(HughVanstone(x) -> (FromUK(x) & LivesInUK(x)))", "HughVanstone is from the UK.", "HughVanstone is fromUK."]}
{"id": "folio_train_1416", "nl": "Hugh Vanstone has lit more than 160 productions.", "fol": "HasLitMoreThan160Productions(HughVanstone)", "prediction": ["Hugh Vanstone lit more than 160 productions.", "Hugh Vanstone has lit more than 160 productions.", "all x.(HughVanstone(x) -> LitsMoreThan160Productions(x))", "all x.(HughVanstone(x) -> LitsMoreThan(x,160))", "all x.(HughVanstone(x) -> LitMoreThan160Productions(x))", "HughVanstone has lit more than 160 productions.", "all x.(HughVanstone(x) -> LitMoreThan(x,160))", "Hugh Vanstone lits more than 160 productions.", "Hugh Vanstone lit more than 160 productions.", "(LitMoreThan(HughVanstone) & MoreThan(HughVanstone))", "HughVanstone lit more than 160 productions.", "(LitMoreThan(HughVanstone) & MoreThan160Productions(HughVanstone))", "Hugh Vanstone LitesMoreThan(x,160) Productions(x))", "Hugh Vanstone LitesMoreThan160Productions(HughVanstone)", "(LitMoreThan(HughVanstone) & MoreThan(HughVanstone,160))", "(LitMoreThan(HughVanstone) & MoreThan(Vanstone,160))"]}
{"id": "folio_train_1417", "nl": "Hugh Vanstone attended school where he is from. ", "fol": "AttendedSchoolInHomeCountry(HughVanstone)", "prediction": ["all x y.((HughVanstone(x) & School(y)) -> Attends(x,y))", "all x y z.((HughVanstone(x) & School(y) & School(z)) -> Attends(x,y,z))", "Hugh Vanstone attended school where he is from.", "all x.((HughVanstone(x) & School(y)) -> Attends(x,y))", "all x.(HughVanstone(x) -> AttendsSchool(x))", "all x.((HughVanstone(x) & School(x)) -> Attends(x,y))", "all x y.((HughVanstone(x) & School(y)) -> Attended(x,y))", "all x y z.((HughVanstone(x) & School(y) & School(z)) -> Attended(x,y,z))", "all x y.((HughVanstone(x) & School(y)) -> Attended(x,y))", "all x.((HughVanstone(x) & AttendsSchool(x)) -> From(x))", "all x y z.((HughVanstone(x) & School(y) & School(z)) -> Attended(x,y,z))", "all x y.((HughVanstone(x) & School(y)) -> attended(x,y))", "all x y.((HughVanstone(x) & School(y) & From(x,y)) -> Attends(x,y))", "all x y z.((HughVanstone(x) & School(y) & School(z)) -> attended(x,y,z))", "all x.((HughVanstone(x) & School(y)) -> Attended(x,y))", "all x y z.((HughVanstone(x) & School(y) & School(z)) -> Attends(x,y))"]}
{"id": "folio_train_1418", "nl": "Hugh Vanstone is one of the world's leading ligting designers and from the uk", "fol": "(IsLeadingLightingDesigner(HughVanstone) & IsFromUK(HughVanstone))", "prediction": ["all x.(HughVanstone(x) -> (LeadingLitigtingDesigner(x) & FromUK(x)))", "Hugh Vanstone is one of the world's leading ligtingdesigners and from the uk.", "all x.(HughVanstone(x) -> (LivingDesigner(x) & FromUK(x)))", "all x.(HughVanstone(x) -> (LeadingLittingDesigner(x) & FromUK(x)))", "all x.((HughVanstone(x) & LeadingLitigtingDesigner(x) & FromUK(x)) -> (LitigtingDesigner(x) & FromUK(x)))", "all x.(HughVanstone(x) -> (LeadingLitigtingDesigner(x) & FromUk(x)))", "all x y.((HughVanstone(x) & Designer(y)) -> (Leading(x,y) & FromUK(x)))", "all x.((HughVanstone(x) & LeadingLitigtingDesigner(x) & FromUK(x)) -> HughVanstone(x))", "all x.(HughVanstone(x) -> (LeadingDesigner(x) & FromUK(x)))", "all x.((HughVanstone(x) & LeadingLitigtingDesigner(x) & FromUK(x)) -> (LitigatingDesigner(x) & FromUK(x)))", "all x y.((HughVanstone(x) & Designer(y)) -> (Leading(x,y) & From(x,y) & From(x,y)))", "all x.(HughVanstone(x) -> (LitigtingDesigner(x) & FromUK(x)))", "all x.((HughVanstone(x) & LeadingLitigtingDesigner(x) & FromUK(x)) -> (LivingDesigner(x) & FromUK(x)))", "all x.((HughVanstone(x) & LeadingLitigtingDesigner(x) & FromUK(x)) -> (LigtingDesigner(x) & FromUK(x)))", "all x y z.((HughVanstone(x) & Designer(y) & Designer(z)) -> (LeadsGlobally(x,y) & FromUK(x)))", "all x.(HughVanstone(x) -> (LivingDesigner(x) & FromUk(x)))"]}
{"id": "folio_train_1419", "nl": "Hugh Vanstone has lit 170 productions.", "fol": "LitProductions(HughVanstone,170)", "prediction": ["Hugh Vanstone has lit 170 productions.", "HughVanstone has lit 170 productions.", "HughVanstone has lit170 productions.", "Hugh Vanstone lit 170 productions.", "Hugh Vanstone has lit 170 productions.", "Hugh Vanstone has lit170 productions.", "Hugh Vanstone has lit 170 Productions.", "Hugh Vanstone hat lit 170 productions.", "Hugh Vanstone has lit 170 productions(x)", "Hugh Vanstone lit170 productions.", "HughVanstone has lit170productions.", "HughVanstone has lit 170 productions.", "Hugh Vanstone has lit 170 Productions(x)", "HughVanstone has lit 170 Productions(x)", "HughVanstone has lit 170 productions(x)", "Hugh Vanstone a lit 170 productions."]}
{"id": "folio_train_1420", "nl": "Hugh Vanstone attended school in the US.", "fol": "AttendedSchoolIn(HughVanstone,US)", "prediction": ["Hugh Vanstone attended school in the US.", "all x y.((HughVanstone(x) & School(y)) -> AttendedIn(x,y))", "all x y.((HughVanstone(x) & School(y)) -> Attends(x,y))", "all x y.((HughVanstone(x) & School(y)) -> Attended(x,y))", "all x y.((HughVanstone(x) & School(y)) -> AttendsIn(x,y))", "all x y.((HughVanstone(x) & School(y)) -> AttendedIn(x,y))", "all x y.((HughVanstone(x) & School(y)) -> Attended(x,y))", "all x y.((HughVanstone(x) & School(y)) -> AcquiredIn(x,y))", "all x y.((HughVanstone(x) & School(y)) -> AttendedInUS(x,y))", "all x y.((HughVanstone(x) & School(y)) -> attendedIn(x,y))", "all x y.((HughVanstone(x) & School(y)) -> AttendsInUS(x,y))", "all x.(HughVanstone(x) -> AttendedSchoolInUS(x))", "all x.((HughVanstone(x) & AttendedSchool(x)) -> US(x))", "all x.((HughVanstone(x) & School(y)) -> Attends(x,y))", "all x y.((HughVanstone(x) & School(y)) -> attended(x,y))", "all x.(HughVanstone(x) -> AttendedSchoolIn(x,US))"]}
{"id": "folio_train_1421", "nl": "No man can run faster than Bolt. ", "fol": "all x.(IsMan(x) -> -CanRunFasterThanBolt(x))", "prediction": ["-exists x.(Man(x) & RunsFaster(x,Bolt))", "-exists x.(Man(x) & RunsFaster(x,bolt))", "-exists x.(Man(x) & Bolt(x))", "-exists x.(Man(x) & RunsFasterThanBolt(x))", "-exists x.(Man(x) & CanRunFaster(x,Bolt))", "-exists x.(Man(x) & RunsFaster(x))", "-exists x.(Man(x) & RunsFasterThan(x,Bolt))", "-exists x.(Man(x) & RunFaster(x,Bolt))", "-exists x.(Man(x) & RunsFaster(x) & Bolt(x))", "-exists x.(Man(x) & CanRunFaster(x,bolt))", "-exists x.(Man(x) & CanRunFasterThanBolt(x))", "-exists x.(Men(x) & RunsFaster(x,Bolt))", "-exists x.(Man(x) & RunsFaster(x,Bold))", "-exists x.(Man(x) & RunsFaster(x,Blot))", "-exists x.(Man(x) & CanRunFasterThan(x,Bolt))", "KeenManCanRunFasterThanBolt(x)"]}
{"id": "folio_train_1422", "nl": "Superman is not a man.", "fol": "-IsMan(Superman)", "prediction": ["all x.(Superman(x) -> -Man(x))", "all x y.((Superman(x) & Man(y)) -> -Man(x))", "all x.(Superman(x) -> -Man(x))", "All x.(Superman(x) -> -Man(x))", "(all x.(Superman(x) -> -Man(x)))", "exists x.(Superman(x) & -Man(x))", "all x y.((Superman(x) & Man(y)) -> -Man(x,y))", "(Man(Superman) & -Man(Superman))", "all x.(Superman(x) -> -Men(x))", "all x y.((Superman(x) & Man(y)) -> -(Man(x) & Man(y)))", "(exists x.(Superman(x) & -Man(x)))", "all x.(Superman(x) -> -Mammal(x))", "all x y.((Superman(x) & Man(y)) -> -(Man(x) & Man(x)))", "ALL x.(Superman(x) -> -Man(x))", "all x y.((Superman(x) & Man(y)) -> -Mammal(x))", "(Man(Superman) -> -Man(Superman))"]}
{"id": "folio_train_1423", "nl": "Superman can run faster than Bolt.", "fol": "FasterThan(Superman,Bolt)", "prediction": ["all x y.((Superman(x) & Bolt(y)) -> RunsFaster(x,y))", "all x y.((Superman(x) & Bolt(y)) -> CanRunFaster(x,y))", "all x.(Superman(x) -> RunsFasterThanBolt(x))", "all x y z.((Superman(x) & Bolt(y) & Bolt(z)) -> CanRunFaster(x,y,z))", "all x.(Superman(x) -> CanRunFasterThanBolt(x))", "all x y z.((Superman(x) & Bolt(y) & Bolt(z)) -> RunsFaster(x,y,z))", "all x y.((Superman(x) & Bolt(y)) -> RunFaster(x,y))", "all x y.((Superman(x) & Bolt(y)) -> RunsFasterThan(x,y))", "All x y.((Superman(x) & Bolt(y)) -> RunsFaster(x,y))", "all x.(Superman(x) -> RunsFasterThan(x,Bolt))", "All x y.((Superman(x) & Bolt(y)) -> CanRunFaster(x,y))", "All x.(Superman(x) -> RunsFasterThanBolt(x))", "all x y.((Superman(x) & Bolt(y)) -> CanRunFasterThan(x,y))", "all x.(Superman(x) -> RunsFaster(x,Bolt))", "all x.(Superman(x) -> CanRunFasterThan(x,Bolt))", "all x.(Superman(x) -> RunFasterThanBolt(x))"]}
{"id": "folio_train_1424", "nl": "Donald Ervin Knuth is an American computer scientist, mathematician, and Professor Emeritus at Stanford University.", "fol": "(IsAmericanScientist(DonaldErvinKnuth) & IsMathematician(DonaldErvinKnuth) & IsProfessorEmeritusAtStanford(DonaldErvinKnuth))", "prediction": ["(AmericanComputerScientist(DonaldErvinKnuth) & Mathematician(DonaldErvinKnuth) & ProfessorEmeritusAtStanfordUniversity(DonaldErvinKnuth))", "(AmericanComputerScientist(DonaldErvinKnuth) & Mathematician(DonaldErvinKnuth) & ProfessorEmeritusAtStanfordUniversity(DonaldErvinKnuth))", "(AmericanComputerScientist(DonaldErvinKnuth) & Mathematician(DonaldErvinKnuth) & ProfessorEmeritus(DonaldErvinKnuth,StanfordUniversity))", "(AmericanComputerScientist(DonaldErvinKnuth) & Mathematician(DonaldErvinKnuth) & ProfessorEmeritus(DonaldErvinKnuth,StanfordUniversity))", "(AmericanComputerScientist(DonaldErvinKnuth) & Mathematician(DonaldErvinKnuth) & ProfessorEmeritus(DonaldErvinKnuth) & StanfordUniversity(DonaldErvinKnuth))", "(AmericanComputerScientist(DonaldErvinKnuth) & Mathematician(DonaldErvinKnuth) & ProfessorEmeritus(DonaldErvinKnuth) & StanfordUniversity(DonaldErvinKnuth))", "Donald Ervin Knuth (AmericanComputerScientist(k) & Mathematician(k) & ProfessorEmeritusAtStanfordUniversity(k))", "Donald ErvinKnuth (AmericanComputerScientist(e) & Mathematician(e) & ProfessorEmeritusAtStanfordUniversity(e))", "Donald Ervin Knuth (AmericanComputerScientist(e) & Mathematician(e) & ProfessorEmeritusAtStanfordUniversity(e))", "(AmericanComputerScientist(DonaldErvinKnuth) & Mathematician(DonaldErvinKnuth) & ProfessorEmeritusAtStanford(DonaldErvinKnuth))", "Donald Ervin Knuth (AmericanComputerScientist(x) & Mathematician(x) & ProfessorEmeritusAtStanfordUniversity(x))", "(AmericanComputerScientist(DonaldErvinKnuth) & Mathematician(DonaldErvinKnuth) & ProfessorEmeritus(DonaldErvinKnuth))", "Donald ErvinKnuth (AmericanComputerScientist(x) & Mathematician(x) & ProfessorEmeritusAtStanfordUniversity(x))", "(AmericanComputerScientist(DonaldErvinKnuth) & Mathematician(DonaldErvinKnuth) & ProfessorEmeritusAtStanford(DonaldErvinKnuth))", "Donald ErvinKnuth (AmericanComputerScientist(k) & Mathematician(k) & ProfessorEmeritusAtStanfordUniversity(k))", "Donald ErvinKnuth (AmericanComputerScientist(e) & Mathematician(e) & ProfessorEmeritus(e) & StanfordUniversity(e))"]}
{"id": "folio_train_1425", "nl": "Knuth has been called the \"father of the analysis of algorithms\".", "fol": "HasTitle(DonaldErvinKnuth,FatherOfTheAnalysisOfAlgorithms)", "prediction": ["Knuth has been called the \"fatherOfAlgorithms(k) & AnalyzesAlgorithms(k))", "all x.(Knuth(x) -> FatherOfAlgorithms(x))", "Knuth has been called \"fatherOfAlgorithms(k) & AnalyzesAlgorithms(k))", "Knuth has been called the \"fatherOfAlgorithms(Knuth)\"", "All x.(Knuth(x) -> FatherOfAlgorithms(x))", "Knuth has been called the \"fatherOfAlgorithms(k)\"", "Knuth has been called the \"fatherOfAlgorithmAnalysis(Knuth)\"", "Knuth has been dubbed the \"fatherOfAlgorithms(k) & AnalyzesAlgorithms(k))", "Knuth has been called the \"fatherOfAlgorithms(Knuth) & AnalyzesAlgorithms(Knuth))", "Knuth has been called the \"fatherOfAlgorithms(Knuth,Algorithms)\"", "Knuth has been called the \"fatherOfAlgorithms(k) & AnalyzesAlgorithms(k,k))", "Knuth has been called the \"fatherOfAlgorithmsAnalysis(Knuth)\"", "Knuth has been called \"fatherOfAlgorithms(k) & AnalyzesAlgorithms(k,k))", "Knuth has been called the \"fatherOfAlgorithmAnalysis(k) & AppliedAlgorithmAnalysis(k))", "Knuth has been called the \"fatherOfAlgorithmsAnalysis(k) & AnalyzesAlgorithms(k))", "Knuth has been called the \"fatherOfAlgorithmAnalysis(k)\""]}
{"id": "folio_train_1426", "nl": "An American scientist has been called the \"father of the analysis of algorithms\".", "fol": "exists x.(IsAmericanScientist(x) & HasTitle(x,FatherOfTheAnalysisOfAlgorithms))", "prediction": ["all x.(AmericanScientist(x) -> FatherOfAlgorithms(x))", "all x.((AmericanScientist(x) & FatherOfAlgorithms(x)) -> AnalyzesAlgorithms(x))", "all x.((AmericanScientist(x) & FatherOfAlgorithms(x)) -> Analyzes(x,algorithms))", "all x y.((AmericanScientist(x) & AmericanScientist(y)) -> FatherOfAlgorithms(x,y))", "all x.((AmericanScientist(x) & FatherOfAlgorithms(x)) -> Analyzes(x,Algorithms))", "all x y.((AmericanScientist(x) & AnalyzesAlgorithms(y)) -> FatherOf(x,y))", "all x.((AmericanScientist(x) & AnalyzesAlgorithms(x)) -> FatherOfAlgorithms(x))", "all x y.((AmericanScientist(x) & Algorithm(y)) -> FatherOfAnalysis(x,y))", "all x.(AmericanScientist(x) -> FatherOfAlgorithms(x))", "all x y.((AmericanScientist(x) & AnalyticalAlgorithm(y)) -> FatherOf(x,y))", "all x.(AsianScientist(x) -> FatherOfAlgorithms(x))", "all x.((AmericanScientist(x) & FatherOfAlgorithms(x)) -> AnalyzeAlgorithms(x))", "all x.((AmericanScientist(x) & FatherOfAlgorithms(x)) -> AnalysisOfAlgorithms(x))", "all x.((AmericanScientist(x) & AnalyzesAlgorithms(x)) -> FatherOf(x,Algorithms))", "all x y.((AmericanScientist(x) & Algorithm(y)) -> FatherOf(x,y))", "all x y.((AmericanScientist(x) & Algorithms(y)) -> FatherOfAnalysis(x,y))"]}
{"id": "folio_train_1427", "nl": "A mathematician has been called the \"father of the analysis of algorithms\".", "fol": "exists x.(IsMathematician(x) & HasTitle(x,FatherOfTheAnalysisOfAlgorithms))", "prediction": ["all x.(Mathematician(x) -> FatherOfAlgorithms(x))", "all x.(Mathematician(x) -> FatherOfAlgorithms(x))", "all x y.((Mathematician(x) & Algorithm(y)) -> FatherOfAnalysis(x,y))", "all x y.((Mathematician(x) & Algorithm(y)) -> FatherOfAnalysis(x,y))", "all x.((Mathematician(x) & FatherOfAlgorithms(x)) -> AnalyzesAlgorithms(x))", "all x.((Mathematician(x) & FatherOfAlgorithms(x)) -> AnalyzesAlgorithms(x))", "all x.(Mathematician(x) -> FatherOfAnalysisOfAlgorithms(x))", "all x.(Mathematician(x) -> \"FatherOfAlgorithms(x)\")", "all x.(Mathematician(x) -> \"FatherOfAlgorithms(x)\")", "all x y.((Mathematician(x) & Algorithm(y)) -> FatherOf(x,y))", "all x.((Mathematician(x) & FatherOfAlgorithms(x)) -> Analyzes(x,algorithms))", "all x y z.((Mathematician(x) & Algorithm(y) & Analysis(z)) -> FatherOf(x,y,z))", "all x y.((Mathematician(x) & Algorithm(y)) -> FatherOf(x,y))", "all x.((Mathematician(x) & FatherOfAlgorithms(x)) -> Analyzes(x,algorithms))", "all x.(Mathematist(x) -> FatherOfAlgorithms(x))", "all x.(Mathematician(x) & FatherOfAlgorithms(x))"]}
{"id": "folio_train_1428", "nl": "Donald Knuth is a well-known figure in the field of artificial intelligence .", "fol": "WellKnownFigure(DonaldErvinKnuth,FieldOfArtificialIntelligence)", "prediction": ["all x y.((DonaldKnuth(x) & ArtificialIntelligence(y)) -> WellKnownFigure(x,y))", "all x.((DonaldKnuth(x) & ArtificialIntelligence(x)) -> WellKnownFigure(x))", "all x y.((DonaldKnuth(x) & ArtificialIntelligence(y)) -> WellKnown(x,y))", "all x.(DonaldKnuth(x) -> WellKnownFigureInArtificialIntelligence(x))", "all x.(DonaldKnuth(x) -> (WellKnownFigureInArtificialIntelligence(x) & WellKnownFigureInArtificialIntelligence(x)))", "all x.(DonaldKnuth(x) -> (WellKnownFigureInArtificialIntelligence(x) & WellKnownInArtificialIntelligence(x)))", "all x.((DonaldKnuth(x) & ArtificialIntelligence(x)) -> WellKnown(x))", "all x y.((DonaldKnuth(x) & ArtificialIntelligence(y)) -> WellKnownFigureInField(x,y))", "Donald Knuth (exists x.(ArtificialIntelligence(x) & WellKnown(x)))", "all x.((DuncanKnuth(x) & ArtificialIntelligence(x)) -> WellKnownFigure(x))", "all x y z.((DonaldKnuth(x) & ArtificialIntelligence(y) & ArtificialIntelligence(z)) -> WellKnownFigure(x,y,z))", "all x.(DonaldKnuth(x) -> WellKnownInArtificialIntelligence(x))", "all x.(DonaldKnuth(x) -> (WellKnownFigure(x) & ArtificialIntelligence(x)))", "all x y z.((DonaldKnuth(x) & ArtificialIntelligence(y) & ArtificialIntelligence(z)) -> WellKnownFigure(x,y))", "all x.(DonaldKnuth(x) -> (WellKnown(x) & ArtificialIntelligence(x)))", "all x y z.((DonaldKnuth(x) & ArtificialIntelligence(y) & Field(z)) -> WellKnownFigure(x,y,z))"]}
{"id": "folio_train_1429", "nl": "Neocrepidodera Corpulentas are flea beetles or moths.", "fol": "(IsFleaBeetle(Neocrepidoderacorpulenta) | IsMoth(Neocrepidoderacorpulenta))", "prediction": ["all x.(NeocrepidoderaCorpusulentas(x) -> (FleaBeetle(x) | Moth(x)))", "all x.(NeocrepidoderaCorpusulentas(x) -> (FlyBeetle(x) | Moth(x)))", "all x.(NeocrepidoderaCorpustulas(x) -> (FleaBeetle(x) | Moth(x)))", "all x.(NeocrepidoderaCorpusulenta(x) -> (FleaBeetle(x) | Moth(x)))", "all x.(Neocrepidodera Corpulentas(x) -> (FleaBeetle(x) | Moth(x)))", "all x.(NeocrepidoderaCorpusulentas(x) -> (FeaBeetle(x) | Moth(x)))", "all x.(NeocrepidoderaCorpustulas(x) -> (FlyBeetle(x) | Moth(x)))", "all x.(NeocrepidoderaCorpusulenta(x) -> (FlyBeetle(x) | Moth(x)))", "all x.(NeocrepidoderaCorpusulentas(x) -> (FeetleBeetle(x) | Moth(x)))", "all x.(NeocrepidoderaCorpusulentas(x) -> (FlyBeetle(x) | FlyMoth(x)))", "all x.(Neocrepidodera Corpulentas(x) -> (FlyBeetle(x) | Moth(x)))", "all x.(NeocrepidoderaCorpusulentas(x) -> (Feetle(x) | Moth(x)))", "all x.(NeocrepidoderaCorpusulentas(x) -> (FleaBeetles(x) | Moths(x)))", "all x.(NeocrepidoderaCorpusulas(x) -> (FleaBeetle(x) | Moth(x)))", "all x.(NeocrepidoderaCorpulentas(x) -> (FleaBeetle(x) | Moth(x)))", "all x.((Neocrepidodera Corpulentas(x) & (Feetle(x) | Moth(x))) -> FleaBeetleOrMoth(x))"]}
{"id": "folio_train_1430", "nl": "The species Neocrepidodera Corpulenta is in the Chrysomelidae family.", "fol": "(IsSpecies(Neocrepidoderacorpulenta) & BelongsToFamily(Chrysomelidae) & IsInFamily(Neocrepidoderacorpulenta,Chrysomelidae))", "prediction": ["all x.(NeocrepidoderaCorpusulenta(x) -> InChrysomelidaeFamily(x))", "all x.(NeocrepidoderaCorpusulenta(x) -> Chrysomelidae(x))", "all x.(Neocrepidodera Corpulenta(x) -> InChrysomelidaeFamily(x))", "all x.(NeocrepidoderaCorpulenta(x) -> InChrysomelidaeFamily(x))", "all x.((Species(x) & NeocrepidoderaCorpusulenta(x)) -> Chrysomelidae(x))", "all x.(NeocrepidoderaCorpusulenta(x) -> ChrysomelidaeFamily(x))", "all x.((Species(x) & Neocrepidodera Corpulenta(x)) -> Chrysomelidae(x))", "all x.(NeocrepidoderaCorpustula(x) -> InChrysomelidaeFamily(x))", "all x.((Neocrepidodera Corpulenta(x) & Chrysomelidae(x)) -> InFamily(x))", "all x.((Species(x) & NeocrepidoderaCorpusulenta(x)) -> InChrysomelidaeFamily(x))", "all x.(NeocrepidoderaCorpusulenta(x) -> InChysomelidaeFamily(x))", "all x.((Species(x) & Neocrepidodera Corpulenta(x)) -> InChrysomelidaeFamily(x))", "all x.(NeocrepidoderaCorpusulenta(x) -> InChrysomelidae(x))", "all x.(NeocrepidoderaCorpulenta(x) -> Chrysomelidae(x))", "all x.(Neocrepidodera Corpulenta(x) -> Chrysomelidae(x))", "all x.((Species(x) & NeocrepidoderaCorpusulenta(x)) -> ChrysomelidaeFamily(x))"]}
{"id": "folio_train_1431", "nl": "There are no moths within the Chrysomelidae family.", "fol": "all x.((IsInFamily(x,Chrysomelidae) & BelongsToFamily(Chrysomelidae)) -> -IsMoth(x))", "prediction": ["-exists x.(Moth(x) & WithinChrysomelidaeFamily(x))", "-exists x.(Moth(x) & WithinChrysomelidae(x))", "-exists x.(Moth(x) & WithinCrysomelidaeFamily(x))", "(-exists x.(Moth(x) & WithinChrysomelidaeFamily(x)))", "all x.(Moth(x) -> -exists y.(ChrysomelidaeFamily(y) & Within(x,y)))", "-exists x.(Moth(x) & WithinCrysomelidae(x))", "-exists x.(Moth(x) & WithinChrysosomelidaeFamily(x))", "-exists x.(Moth(x) & InChrysomelidaeFamily(x))", "-exists x.(Moth(x) & WithinChrysomolidaeFamily(x))", "all x.(Moth(x) -> -exists y.(Chrysomelidae(y) & Within(x,y)))", "-exists x.(Moth(x) & WithinCyssomelidaeFamily(x))", "all x.(Moth(x) -> -exists y.(ChrysomelidaeFamily(y) & WithinFamily(x,y)))", "-exists x.(Moth(x) & InChrysomelidae(x))", "all x.(Moth(x) -> -exists y.(Chrysomelidae(y) & WithinFamily(x,y)))", "-exists x.(Moth(x) & WithinChrysosomelidae(x))", "(-exists x.(Moth(x) & WithinChrysomelidae(x)))"]}
{"id": "folio_train_1432", "nl": "There is a flea beetle within the Chrysomelidae family.", "fol": "exists x.(IsFleaBeetle(x) & IsInFamily(x,Chrysomelidae))", "prediction": ["exists x.(FlyBeetle(x) & WithinChrysomelidaeFamily(x))", "exists x.(FleaBeetle(x) & WithinChrysomelidaeFamily(x))", "exists x.(Feetle(x) & WithinChrysomelidaeFamily(x))", "exists x.(FlyBeetle(x) & WithinCrysomelidaeFamily(x))", "exists x.(FlyBeetle(x) & WithinChrysomelidae(x))", "exists x.(FleaBeetle(x) & WithinCrysomelidaeFamily(x))", "exists x y.(FlyBeetle(x) & Chrysomelidae(y) & WithinFamily(x,y))", "exists x.(FleaBeetle(x) & WithinChrysomelidae(x))", "exists x y.(FleaBeetle(x) & Chrysomelidae(y) & WithinFamily(x,y))", "all x.(FleaBeetle(x) -> WithinChrysomelidaeFamily(x))", "exists x.(FlyBeetle(x) & WithinChrysomolidaeFamily(x))", "all x.(FlyBeetle(x) -> WithinChrysomelidaeFamily(x))", "exists x.(FloodBeetle(x) & WithinChrysomelidaeFamily(x))", "exists x.(FeaBeetle(x) & WithinChrysomelidaeFamily(x))", "exists x.(Feetle(x) & WithinCrysomelidaeFamily(x))", "exists x.(Feetle(x) & WithinChrysomelidae(x))"]}
{"id": "folio_train_1433", "nl": "There are no flea beetles within the Chrysomelidae family.", "fol": "all x.((IsInFamily(x,Chrysomelidae) & BelongsToFamily(Chrysomelidae)) -> -IsFleaBeetle(x))", "prediction": ["-exists x.(FlyBeetle(x) & WithinChrysomelidaeFamily(x))", "-exists x.(FleaBeetle(x) & WithinChrysomelidaeFamily(x))", "-exists x.(FlyBeetle(x) & WithinChrysomelidae(x))", "-exists x.(FleaBeetle(x) & WithinChrysomelidae(x))", "all x.(FlyBeetle(x) -> -exists y.(ChrysomelidaeFamily(y) & Within(x,y)))", "all x.(FlyBeetle(x) -> -exists y.(ChrysomelidaeFamily(y) & WithinFamily(x,y)))", "all x.(FlyBeetle(x) -> -exists y.(ChrysomelidaeFamily(y) & WithinChrysomelidaeFamily(x,y)))", "all x.(FleaBeetle(x) -> -exists y.(ChrysomelidaeFamily(y) & WithinFamily(x,y)))", "all x.(FleaBeetle(x) -> -exists y.(ChrysomelidaeFamily(y) & Within(x,y)))", "-exists x.(FlyBeetle(x) & WithinCrysomelidaeFamily(x))", "all x.(FleaBeetle(x) -> -exists y.(ChrysomelidaeFamily(y) & WithinChrysomelidaeFamily(x,y)))", "all x.(FlyBeetle(x) -> -exists y.(Chrysomelidae(y) & WithinFamily(x,y)))", "all x.(FleaBeetle(x) -> -exists y.(Chrysomelidae(y) & WithinFamily(x,y)))", "-exists x.(FleaBeetle(x) & WithinCrysomelidaeFamily(x))", "all x.(FlyBeetle(x) -> -exists y.(ChrysomelidaeFamily(y) & Within(x,y))))", "(-exists x.(FlyBeetle(x) & WithinChrysomelidaeFamily(x)))"]}
{"id": "folio_train_1434", "nl": "Carrozzeria Colli is a Milanese coachbuilder company that was established by Giuseppe Colli in 1931.", "fol": "(IsMilaneseCoachbuilder(Carrozzeriacolli) & IsCompany(Carrozzeriacolli) & EstablishedByPerson(Carrozzeriacolli,Giuseppecolli) & EstablishedInYear(Carrozzeriacolli,Y1901))", "prediction": ["all x.(CarrolozzeriaColli(x) -> (MilaneseCoachbuilderCompany(x) & EstablishedByGiuseppeColli(x) & EstablishedIn1931(x)))", "all x.(CarrozzeriaColli(x) -> (MilaneseCoachbuilderCompany(x) & EstablishedByGiuseppeColli(x) & EstablishedIn1931(x)))", "all x.(CarrolozzeriaColli(x) -> (MilaneseCoachbuilderCompany(x) & EstablishedByGiuseppeColliIn1931(x)))", "all x.(CarrozzeriaColli(x) -> (MilaneseCoachbuilderCompany(x) & EstablishedByGiuseppeColliIn1931(x)))", "all x.((CarrozzeriaColli(x) & MilaneseCoachbuilderCompany(x) & EstablishedByGiuseppeColliIn1931(x)) -> CarrozzeriaColli(x))", "all x.(CarrolozzeriaColli(x) -> (MilaneseCoachbuilderCompany(x) & EstablishedByGiuseppeColli(x) & EstablishedBy1931(x)))", "all x.(CarrolozzeriaColli(x) -> (MilaneseCoachbuilderCompany(x) & EstablishedByGiuseppeColli(x) & In1931(x)))", "all x.(CarrozzeriaColli(x) -> (MilaneseCoachbuilderCompany(x) & EstablishedByGiuseppeColli(x) & EstablishedBy1931(x)))", "all x.(CarrolozzeriaColli(x) -> (MilaneseCoachbuilderCompany(x) & EstablishedByGiuseppeColli(x,1931)))", "all x.(CarrozzeriaColli(x) -> (MilaneseCoachbuilderCompany(x) & EstablishedByGiuseppeColli(x,1931)))", "all x.(CarrozzeriaColli(x) -> (MilaneseCoachbuilderCompany(x) & EstablishedByGiuseppeColli(x) & In1931(x)))", "all x.(CarrolozzeriaColli(x) -> (MilaneseCoachbuilderCompany(x) & FoundedByGiuseppeColli(x) & EstablishedIn1931(x)))", "all x.(CarrolozzeriaColli(x) -> (MilaneseCoachbuilderCompany(x) & EstablishedByGiuseppeColli(x) & EstablishedIn1931(x)))", "all x y.((CarrozzeriaColli(x) & MilaneseCoachbuilderCompany(y) & EstablishedBy(x,y)) -> GiuseppeColli(x))", "all x y.((CarrozzeriaColli(x) & MilaneseCoachbuilderCompany(y) & EstablishedByGiuseppeColli(x,y)) -> EstablishedIn1931(x,y))", "all x.(CarrolozzeriaColli(x) -> (MilaneseCoachbuilderCompany(x) & EstablishedByGiuseppeColli(x) & EstablishedByGiuseppeColliIn1931(x)))"]}
{"id": "folio_train_1435", "nl": "Carrozzeria Colli is a company that specialized in using aluminum.", "fol": "SpecializesIn(Carrozzeriacolli,Usingaluminum)", "prediction": ["all x.((Company(x) & SpecializedInAluminum(x)) -> CarrozzeriaColli(x))", "all x.(CarrolozzeriaColli(x) -> SpecializedInAluminum(x))", "all x.(CarrozzeriaColli(x) -> SpecializedInAluminum(x))", "all x.(CarrolozzeriaColli(x) -> (SpecializedInAluminum(x) & UsesAluminum(x)))", "all x.(CarrozzeriaColli(x) -> (SpecializedInAluminum(x) & UsesAluminum(x)))", "all x.((Company(x) & SpecializedInAluminum(x)) -> CarrozzeriaColi(x))", "all x.(CarrolozzeriaColi(x) -> (SpecializedInAluminum(x) & UsesAluminum(x)))", "all x.(CarrolozzeriaColi(x) -> SpecializedInAluminum(x))", "all x.(CarrolozzeriaColli(x) -> SpecializedInUsingAluminum(x))", "all x.(CarrozzeriaColli(x) -> SpecializedInUsingAluminum(x))", "all x.(CarrozzeriaColi(x) -> SpecializedInAluminum(x))", "all x.(CarrolzzeriaColli(x) -> SpecializedInAluminum(x))", "all x y.((Company(x) & CarrozzeriaColli(y)) -> SpecializedInUsingAluminum(x,y))", "all x y.((Company(x) & CarrozzeriaColli(y)) -> SpecializedInAluminum(x,y))", "all x.(CarrolozzeriaColli(x) -> (SpecializedInAluminum(x) & SpecializedInAluminum(x)))", "all x y.((Company(x) & CarrozzeriaColi(y)) -> SpecializedInUsingAluminum(x,y))"]}
{"id": "folio_train_1436", "nl": "The first automobiles built by Carrozzeria Colli were racing cars.", "fol": "all x.(FirstAutomobilesByCompany(x,Carrozzeriacolli) -> IsRacingCar(x))", "prediction": ["all x.((Automobile(x) & CarrozzeriaColli(x)) -> RacingCar(x))", "all x.((Automobile(x) & CarrozzeriaColli(x)) -> RaceCar(x))", "all x.((Automobile(x) & BuiltByCarrozzeriaColli(x)) -> RacingCar(x))", "all x.((Automobile(x) & BuiltByCarrolozzeriaColli(x)) -> RacingCar(x))", "all x.((CarrozzeriaColli(x) & FirstAutomobile(x)) -> RacingCar(x))", "all x.((Automobile(x) & BuiltByCarrozzeriaColli(x)) -> RaceCar(x))", "all x y.((Automobile(x) & CarrozzeriaColli(y) & BuiltBy(x,y)) -> RacingCar(x))", "all x y.((Automobile(x) & CarrozzeriaColli(y)) -> RaceCar(x,y))", "all x.((Automobile(x) & BuiltByCarrolozzeriaColli(x)) -> RaceCar(x))", "all x.((CarrosseriaColli(x) & FirstAutomobile(x)) -> RacingCar(x))", "all x y.((Automobile(x) & CarrozzeriaColli(y)) -> RacingCar(x,y))", "all x.((CarrolozzeriaColli(x) & FirstAutomobile(x)) -> RacingCar(x))", "all x y.((Automobile(x) & CarrozzeriaColli(y)) -> RaceCar(x))", "all x.((Automobile(x) & BuiltByCarrosseriaColli(x)) -> RacingCar(x))", "all x y.((Automobile(x) & CarrozzeriaColli(y) & BuiltBy(x,y)) -> RaceCar(x))", "all x.((CarrozzeriaColli(x) & FirstAutomobile(x)) -> RaceCar(x))"]}
{"id": "folio_train_1437", "nl": "Some racing cars built by Carrozzeria Colli used Fiat 1100 mechanicals and chasis.", "fol": "exists x.(IsRacingCar(x) & BuiltByCompany(x,Carrozzeriacolli) & UsesComponents(x,Fiat110mechanicals) & UsesComponents(x,Chasis))", "prediction": ["exists x.(RacingCar(x) & CarrozzeriaColli(x) & Fiat1100Mechanicals(x) & Chasis(x))", "exists x.(RacingCar(x) & BuiltByCarrozzeriaColli(x) & Fiat1100Mechanicals(x) & Chasis(x))", "exists x.(RacingCar(x) & BuiltByCarrolozzeriaColli(x) & Fiat1100Mechanicals(x) & Chasis(x))", "exists x.(RacingCar(x) & BuiltByCarrosseriaColli(x) & Fiat1100Mechanicals(x) & Chasis(x))", "exists x.(RacingCar(x) & BuiltByCarrozzeriaColli(x) & UsesFiat1100Mechanicals(x) & UsesChassis(x))", "exists x.(RacingCar(x) & CarrozzeriaColli(x) & UsesFiat1100Mechanicals(x) & UsesChassis(x))", "exists x.(RacingCar(x) & BuiltByCarrolozzeriaColli(x) & UsesFiat1100Mechanicals(x) & UsesChassis(x))", "exists x.(RacingCar(x) & BuiltByCarrozzeriaColli(x) & UsedFiat1100Mechanicals(x) & UsedChassis(x))", "exists x.(RacingCar(x) & BuiltByCarrosseriaColli(x) & UsesFiat1100Mechanicals(x) & UsesChassis(x))", "exists x.(RacingCar(x) & CarrozzeriaColli(x) & UsesFiat1100Mechanicals(x) & UsesChasis(x))", "exists x.(RacingCar(x) & CarrozzeriaColli(x) & UsedFiat1100Mechanicals(x) & UsedChassis(x))", "exists x.(RacingCar(x) & BuiltByCarrozzeriaColli(x) & UsesFiat1100Mechanicals(x) & UsesChasis(x))", "exists x.(RacingCar(x) & CarrozzeriaColli(x) & Fiat(x) & Mechanicals(x) & Chasis(x))", "exists x.(RacingCar(x) & BuiltByCarrolozzeriaColli(x) & UsedFiat1100Mechanicals(x) & UsedChassis(x))", "exists x.(RacingCar(x) & BuiltByCarrosseriaColli(x) & UsedFiat1100Mechanicals(x) & UsedChassis(x))", "exists x.(RacingCar(x) & BuiltByCarrozzeriaColli(x) & UsesFiat1100Mechanics(x) & UsesChassis(x))"]}
{"id": "folio_train_1438", "nl": "Carrozzeria Colli worked for airforces.", "fol": "exists x.(IsAirforce(x) & WorkedForEntity(Carrozzeriacolli,x))", "prediction": ["all x.(CarrolozzeriaColli(x) -> WorkedForAirforces(x))", "all x y.((CarrolozzeriaColli(x) & Airforce(y)) -> WorkedFor(x,y))", "all x y z.((CarrolozzeriaColli(x) & Airforce(y) & Airforce(z)) -> WorkedFor(x,y,z))", "all x y.((CarrozzeriaColli(x) & Airforce(y)) -> WorkedFor(x,y))", "all x.(CarrozzeriaColli(x) -> WorkedForAirforces(x))", "all x.(CarrolozzeriaColli(x) -> WorksForAirforces(x))", "all x y.((CarrotzeriaColli(x) & Airforce(y)) -> WorkedFor(x,y))", "all x y.((CarrolozzeriaColli(x) & Airforce(y)) -> WorksFor(x,y))", "all x.(CarrolozzeriaColi(x) -> WorkedForAirforces(x))", "all x.(CarrotzeriaColli(x) -> WorkedForAirforces(x))", "all x y z.((CarrolozzeriaColli(x) & Airforce(y) & Airforce(z)) -> WorksFor(x,y,z))", "all x y.((CarrolozzeriaColi(x) & Airforce(y)) -> WorkedFor(x,y))", "all x y.((CarrozzeriaColli(x) & Airforce(y)) -> WorksFor(x,y))", "all x.(CarrozzeriaColli(x) -> WorksForAirforces(x))", "all x y z.((CarrolozzeriaColli(x) & Airforce(y) & Airforce(z)) -> WorkedFor(x,y))", "all x.(CarrozzeriaColi(x) -> WorkedForAirforces(x))"]}
{"id": "folio_train_1439", "nl": "Carrozzeria Colli made car bodies. ", "fol": "MadeCarBodies(Carrozzeriacolli,Carbodies)", "prediction": ["all x.(CarrolozzeriaColli(x) -> MadeCarBody(x))", "all x.(CarrozzeriaColli(x) -> MadeCarBody(x))", "all x y.((CarrolozzeriaColli(x) & CarBody(y)) -> MadeBy(x,y))", "all x.(CarroceriaColli(x) -> MadeCarBody(x))", "all x y.((CarrozzeriaColli(x) & CarBody(y)) -> MadeBy(x,y))", "all x y.((CarroceriaColli(x) & CarBody(y)) -> MadeBy(x,y))", "all x.(CarrolozzeriaColi(x) -> MadeCarBody(x))", "all x y.((CarrolozzeriaColli(x) & CarBody(y)) -> Made(x,y))", "all x.(CarrotzzeriaColli(x) -> MadeCarBody(x))", "all x.(CarrolozzeriaColli(x) -> MadeCarBodies(x))", "all x y.((CarrozzeriaColli(x) & CarBody(y)) -> Made(x,y))", "all x.(CarrosseriaColli(x) -> MadeCarBody(x))", "all x.(CarroszzeriaColli(x) -> MadeCarBody(x))", "all x y.((CarroceriaColli(x) & CarBody(y)) -> Made(x,y))", "all x.(CarrocazzeriaColli(x) -> MadeCarBody(x))", "all x.(CarrozzeriaColi(x) -> MadeCarBody(x))"]}
{"id": "folio_train_1440", "nl": "Carrozzeria Colli made car bodies in 1931.", "fol": "(MadeCarBodies(Carrozzeriacolli,Carbodies) & MadeIn(Carrozzeriacolli,1931))", "prediction": ["all x.(CarrolozzeriaColli(x) -> MadeCarBody(x,1931))", "all x y.((CarrolozzeriaColli(x) & CarBody(y)) -> MadeIn1931(x,y))", "all x y.((CarrozzeriaColli(x) & CarBody(y)) -> MadeIn1931(x,y))", "all x.(CarrozzeriaColli(x) -> MadeCarBody(x,1931))", "all x y.((CarroceriaColli(x) & CarBody(y)) -> MadeIn1931(x,y))", "all x y.((CarrolozzeriaColli(x) & CarBody(y)) -> MadeIn(x,y))", "all x y z.((CarrolozzeriaColli(x) & CarBody(y) & 1931(z)) -> MadeIn(x,y,z))", "all x y.((CarrozzeriaColli(x) & CarBody(y)) -> MadeIn(x,y))", "all x.(CarrolozzeriaColli(x) -> MadeCarBodyIn1931(x))", "all x y z.((CarrolozzeriaColli(x) & CarBody(y) & CarBody(z)) -> MadeIn(x,y,z))", "all x y.((CarroceriaColli(x) & CarBody(y)) -> MadeIn(x,y))", "all x.(CarroceriaColli(x) -> MadeCarBody(x,1931))", "all x y.((CarrotzeriaColli(x) & CarBody(y)) -> MadeIn1931(x,y))", "all x y z.((CarrolozzeriaColli(x) & CarBody(y) & CarBody(z)) -> MadeIn1931(x,y,z))", "all x y z.((CarrolozzeriaColli(x) & CarBody(y) & 1931(z)) -> MadeBy(x,y,z))", "all x.(CarrozzeriaColli(x) -> MadeCarBodyIn1931(x))"]}
{"id": "folio_train_1441", "nl": "Carrozzeria Colli built airplanes during World War II.", "fol": "exists x.(Airplane(x) & BuiltByCompany(Carrozzeriacolli,x) & During(x,WorldWarII))", "prediction": ["all x y.((CarrolozzeriaColli(x) & WorldWarII(y)) -> BuiltAirplanes(x,y))", "all x y.((CarrolozzeriaColli(x) & Airplane(y)) -> BuiltDuringWorldWarII(x,y))", "all x y z.((CarrolozzeriaColli(x) & Airplane(y) & WorldWarII(z)) -> BuiltDuring(x,y,z))", "all x y.((CarrozzeriaColli(x) & WorldWarII(y)) -> BuiltAirplanes(x,y))", "all x.(CarrolozzeriaColi(x) -> BuiltAirplanesDuringWorldWarII(x))", "all x y z.((CarrolozzeriaColli(x) & Airplane(y) & WorldWarII(z)) -> Built(x,y,z))", "all x y.((CarrozzeriaColli(x) & Airplane(y)) -> BuiltDuringWorldWarII(x,y))", "all x y.((CarrolozzeriaColi(x) & WorldWarII(y)) -> BuiltAirplanes(x,y))", "all x y.((CarrolozzeriaColi(x) & Airplane(y)) -> BuiltDuringWorldWarII(x,y))", "all x y z.((CarrozzeriaColli(x) & Airplane(y) & WorldWarII(z)) -> BuiltDuring(x,y,z))", "all x y z.((CarrolozzeriaColli(x) & Airplane(y) & WorldWarII(z)) -> BuiltBy(x,y,z))", "all x y z.((CarrozzeriaColli(x) & Airplane(y) & WorldWarII(z)) -> Built(x,y,z))", "all x.(CarrolozzeriaColi(x) -> BuiltAirplanes(x))", "all x.(CarrolozzeriaColli(x) -> BuiltAirplanesDuringWorldWarII(x))", "all x y z.((CarrozzeriaColli(x) & Airplane(y) & WorldWarII(z)) -> BuiltBy(x,y,z))", "all x y z.((CarrolozzeriaColli(x) & Airplane(y) & WorldWarII(z)) -> BuiltIn(x,y,z))"]}
{"id": "folio_train_1442", "nl": "Giuseppe Colli established a company that made car bodies.", "fol": "exists x.(IsCompany(x) & EstablishedByPerson(x,Giuseppecolli) & MadeCarBodies(x,Carbodies))", "prediction": ["all x y.((GiuseppeColli(x) & Company(y)) -> MadeCarBodies(x,y))", "all x y.((Giuseppe Colli(x) & Company(y)) -> MadeCarBodies(x,y))", "all x y z.((Giuseppe Colli(x) & Company(y) & CarBody(z)) -> MadeBy(x,y,z))", "all x.((GiuseppeColli(x) & Company(x)) -> MadeCarBodies(x))", "all x y.((GiuseppeColli(x) & Company(y)) -> MadeCarBody(x,y))", "all x y.((Giuseppe Colli(x) & Company(y)) -> MadeCarBody(x,y))", "all x.((Giuseppe Colli(x) & Company(x)) -> MadeCarBodies(x))", "all x y z.((GiuseppeColli(x) & Company(y) & CarBody(z)) -> MadeBy(x,y,z))", "all x y.((Giuseppe Colli(x) & CarBody(y)) -> Established(x,y))", "all x y.((GiuseppeColli(x) & CarBody(y)) -> Established(x,y))", "all x.(GiuseppeColli(x) -> (EstablishedCompany(x) & MadeCarBodies(x)))", "all x y z.((Giuseppe Colli(x) & CarBody(y) & Company(z)) -> MadeBy(x,y,z))", "all x y z.((Giuseppe Colli(x) & Company(y) & CarBody(z)) -> Established(x,y))", "all x.((GiuseppeColli(x) & MadeCarBodies(x)) -> EstablishedCompany(x))", "all x.(GiuseppeColli(x) -> MadeCarBodies(x))", "all x y z.((Giuseppe Colli(x) & Company(y) & CarBody(z)) -> Established(x,y,z))"]}
{"id": "folio_train_1443", "nl": "Giuseppe Colli established a Milanese coachbuilder company that specialized in using aluminum.", "fol": "exists x.(IsMilaneseCoachbuilder(x) & IsCompany(x) & EstablishedByPerson(x,Giuseppecolli) & SpecializesIn(x,Usingaluminum))", "prediction": ["all x y.((Giuseppe Colli(x) & MilaneseCoachbuilderCompany(y)) -> SpecializedInAluminum(x,y))", "all x.((Giuseppe Colli(x) & MilaneseCoachbuilderCompany(x) & SpecializedInAluminum(x)) -> Established(x))", "all x y z.((Giuseppe Colli(x) & MilaneseCoachbuilderCompany(y) & Aluminum(z)) -> SpecializedIn(x,y,z))", "all x y z.((Giuseppe Colli(x) & MilaneseCoachbuilder(y) & Aluminum(z)) -> SpecializedIn(x,y,z))", "all x y.((Giuseppe Colli(x) & MilaneseCoachbuilder(y)) -> SpecializedInAluminum(x,y))", "all x.((Giuseppe Colli(x) & MilaneseCoachbuilderCompany(x)) -> SpecializedInAluminum(x))", "all x y.((Giuseppe Colli(x) & MilaneseCoachbuilderCompany(y)) -> SpecializedInUsingAluminum(x,y))", "all x y z.((Giuseppe Colli(x) & MilaneseCoachbuilderCompany(y) & Aluminum(z)) -> SpecializedInUsing(x,y,z))", "all x.((Giuseppe Colli(x) & MilaneseCoachbuilder(x) & SpecializedInAluminum(x)) -> Established(x))", "all x y.((Giuseppe Colli(x) & MilaneseCoachbuilderCompany(y) & SpecializedInAluminum(y)) -> Established(x,y))", "all x.((GiuseppeColli(x) & MilaneseCoachbuilderCompany(x) & SpecializedInAluminum(x)) -> Established(x))", "all x y.((GiuseppeColli(x) & MilaneseCoachbuilderCompany(y)) -> SpecializedInAluminum(x,y))", "all x.((Giuseppe Colli(x) & MilaneseCoachbuilder(x)) -> SpecializedInAluminum(x))", "all x y.((Giuseppe Colli(x) & MilaneseCoachbuilder(y)) -> SpecializedInUsingAluminum(x,y))", "all x y.((Giuseppe Colli(x) & MilaneseCoachbuilderCompany(y)) -> SpecializedInAluminum(x))", "all x.((Giuseppe Colli(x) & MilaneseCoachbuilderCompany(x) & SpecializedInAluminum(x)) -> Established(x,y))"]}
{"id": "folio_train_1444", "nl": "The first automobiles built by Carrozzeria Colli were built using Fiat 1100 mechanicals and chasis.", "fol": "all x.((FirstAutomobilesByCompany(x,Carrozzeriacolli) -> BuiltUsing(x,Fiat1100mechanicals)) & BuiltUsing(x,Chasis))", "prediction": ["all x y z.((Automobile(x) & CarrozzeriaColli(y) & Fiat1100Mechanicals(z) & Chasis(z)) -> BuiltBy(x,y,z))", "all x.((Automobile(x) & BuiltByCarrozzeriaColli(x)) -> (Fiat1100Mechanicals(x) & Chasis(x)))", "all x.((Automobile(x) & BuiltByCarrozzeriaColli(x)) -> (FiatMechanicals(x) & Chasis(x)))", "all x y.((CarrozzeriaColli(x) & Fiat1100Mechanicals(y) & Chasis(y)) -> BuiltBy(x,y))", "all x.((CarrozzeriaColli(x) & Fiat1100Mechanicals(x) & Chasis(x)) -> BuiltBy(x))", "all x y z.((Automobile(x) & CarrozzeriaColli(y) & Fiat(z) & Mechanicals(z) & Chasis(z)) -> BuiltBy(x,y,z))", "all x.((Automobile(x) & CarrozzeriaColli(x)) -> (FiatMechanicals(x) & Chasis(x)))", "all x.((Automobile(x) & CarrozzeriaColli(x)) -> (BuiltWithFiat1100Mechanicals(x) & BuiltWithChassis(x)))", "all x.((CarrozzeriaColli(x) & Fiat1100Mechanicals(x) & Chasis(x)) -> FirstAutomobile(x))", "all x y.((CarrozzeriaColli(x) & Fiat1100Mechanicals(y) & Chasis(x)) -> BuiltBy(x,y))", "all x.((CarrozzeriaColli(x) & Fiat1100Mechanicals(x) & Chasis(x)) -> BuiltBy(x,y))", "all x.((Automobile(x) & BuiltByCarrolozzeriaColli(x)) -> (FiatMechanicals(x) & Chasis(x)))", "all x y z.((Automobile(x) & CarrozzeriaColli(y) & Fiat(z) & Mechanicals(z) & Chasis(x)) -> BuiltBy(x,y,z))", "all x y z.((Automobile(x) & CarrozzeriaColli(y) & Fiat1100Mechanicals(z) & Chasis(z)) -> BuiltBy(x,y))", "all x.((Automobile(x) & CarrozzeriaColli(x)) -> (BuiltWithFiat1100Mechanicals(x) & BuiltWithChasis(x)))", "all x y.((CarrozzeriaColli(x) & Fiat1100Mechanicals(y) & Chasis(z)) -> BuiltBy(x,y,z))"]}
{"id": "folio_train_1445", "nl": "John will go to the cinema if and only if Jack goes to the cinema today.", "fol": "(AttendCinema(John,Today) <-> AttendCinema(Jack,Today))", "prediction": ["all x y.((John(x) & Jack(y) & GoesToCinema(x,y)) -> WillGoToCinema(x,y))", "all x y.((John(x) & Jack(y) & GoesToCinema(x,y)) -> GoesToCinema(x,y))", "all x.((JackGoesToCinema(x) & -JackGoesToCinema(x)) -> WillGoToCinema(x))", "all x.((Jack(x) & GoesToCinema(x)) -> WillGoToCinema(x))", "all x y.((Jack(x) & Cinema(y) & GoesTo(x,y)) -> WillGoTo(x,y))", "all x y.((John(x) & Jack(y) & GoesToCinema(x,y)) -> GoToCinema(x,y))", "all x.((Jack(x) & GoesToCinema(x)) -> GoesToCinema(x))", "all x.((JackGoesToCinema(x) & -JackGoesToCinema(x)) -> GoesToCinema(x))", "all x y.((Jack(x) & Cinema(y)) -> (GoesTo(x,y) & -GoesTo(x,y)))", "all x y.((Jack(x) & Cinema(y) & GoesTo(x,y)) -> GoesTo(x,y))", "all x.((John(x) & Jack(x) & GoesToCinema(x)) -> GoesToCinema(x))", "all x.((John(x) & Jack(x) & GoesToCinema(x)) -> WillGoToCinema(x))", "all x y.((Jack(x) & Cinema(y) & Today(y)) -> WillGoTo(x,y))", "all x y.((John(x) & Jack(y)) -> (GoesToCinema(x,y) & -GoesToCinema(x,y)))", "all x y.((John(x) & Jack(y) & GoesToCinema(x,y)) -> WillGoToCinema(x))", "all x.((JackGoesToCinema(x) & -JackGoesToCinema(x)) -> GoToCinema(x))"]}
{"id": "folio_train_1446", "nl": "Jack will go to the cinema if and only if Iron Man is on and the weather is not bad today.", "fol": "(AttendCinema(Jack,Today) <-> (IsMoviePlaying(Ironman) & -HasBadWeather(Today)))", "prediction": ["all x.((Jack(x) & IronManOn(x) & -BadWeather(x)) -> WillGoToCinema(x))", "all x.((Jack(x) & IronManOn(x) & -BadWeather(x)) -> GoesToCinema(x))", "all x.((Jack(x) & IronManOn(x) & -BadWeather(x)) -> Movie(x))", "all x.((Jack(x) & IronManOn(x) & -BadWeather(x)) -> Cinema(x))", "all x.((Jack(x) & IronManOn(x) & -BadWeather(x)) -> GoToCinema(x))", "all x y.((Jack(x) & IronMan(y) & On(y) & -BadWeather(y)) -> WillGoToCinema(x,y))", "all x.((IronManOn(x) & -BadWeather(x)) -> WillGoToCinema(x))", "all x.((Jack(x) & IronMan(x) & -BadWeather(x)) -> WillGoToCinema(x))", "all x y.((Jack(x) & IronMan(y) & On(x) & -BadWeather(x)) -> WillGoToCinema(x))", "all x.((Jack(x) & IronManOn(x) & -BadWeatherToday(x)) -> WillGoToCinema(x))", "all x.((IronMan(x) & On(x) & -BadWeather(x)) -> WillGoToCinema(x))", "all x y.((Jack(x) & IronMan(y) & On(x) & -BadWeather(x)) -> WillGoToCinema(x,y))", "all x y.((Jack(x) & IronMan(y) & On(y) & -BadWeather(y)) -> WillGoToCinema(x))", "all x y.((Jack(x) & IronMan(y) & On(y) & -BadWeather(y)) -> GoesToCinema(x,y))", "all x y.((Jack(x) & IronMan(y) & On(x,y) & -BadWeather(x,y)) -> WillGoToCinema(x))", "all x y.((Jack(x) & IronMan(y) & On(y) & -BadWeather(x)) -> WillGoToCinema(x,y))"]}
{"id": "folio_train_1447", "nl": "Some days in March have bad weather.", "fol": "exists x.(IsMonth(March) -> HasBadWeather(x))", "prediction": ["exists x.(MarchDay(x) & BadWeather(x))", "exists x.(MarsDay(x) & BadWeather(x))", "exists x.(Day(x) & March(x) & BadWeather(x))", "exists x.(Mars(x) & BadWeather(x))", "exists x.(Date(x) & March(x) & BadWeather(x))", "exists x.(Day(x,March) & BadWeather(x))", "exists x.(March(x) & BadWeather(x))", "exists x.(MarchDay(x) & BadWeather(x))", "exists x y.(Day(x) & March(y) & BadWeather(x,y))", "exists x.(MarchDate(x) & BadWeather(x))", "exists x.(Date(x,March) & BadWeather(x))", "exists x.(MarchDay(x) & HasBadWeather(x))", "exists x.(Day(x) & BadWeather(x))", "exists x.(MarzDay(x) & BadWeather(x))", "exists x y.(Day(x) & March(y) & BadWeather(x))", "exists x.(Day(x,March) & BadWeather(x,March))"]}
{"id": "folio_train_1448", "nl": "Iron man is on.", "fol": "IsMoviePlaying(Ironman)", "prediction": ["all x.(IronMan(x) -> On(x))", "All x.(IronMan(x) -> On(x))", "exists x.(IronMan(x) & On(x))", "(On(IronMan) & On(IronMan))", "(IronManOn(IronMan) & On(IronMan))", "all x.(IronMan(x) -> On(x))", "(IronManOn(IronMan) -> On(IronMan))", "(IronMan(i) & On(i))", "(On(IronMan) | On(IronMan)))", "(On(IronMan) -> On(IronMan))", "(IronMan(x) -> On(x))", "IronManIsOn(IronMan)", "(IronMan(iron) & On(iron))", "(IronManOn(IronMan) -> On(IronMan)))", "(On(IronMan) -> On(IronMan)))", "(IronManOn(i) & On(i))"]}
{"id": "folio_train_1449", "nl": "It's March now.", "fol": "IsMonth(March)", "prediction": ["All x.(March(x) -> Now(x))", "all x.(March(x) -> Now(x))", "All x.(March(x) -> Here(x))", "All x.(March(x) -> Available(x))", "It's March now.", "All x.(Mars(x) -> Now(x))", "(March(x) & March(x))", "All x.(Mars(x) -> Available(x))", "all x.(Mars(x) -> Now(x))", "It's March Now.", "all x.(March(x) -> Available(x))", "All x.(March(x) -> AddedToListen(x))", "All x.(March(x) -> AddedToList(x))", "all x.(Mars(x) -> Available(x))", "all x.(March(x) -> AddedToListen(x))", "all x.(March(x) -> AddedToList(x))"]}
{"id": "folio_train_1450", "nl": "John will go to the cinema.", "fol": "AttendCinema(John,Today)", "prediction": ["all x.(John(x) -> GoesToCinema(x))", "all x y.((John(x) & Cinema(y)) -> GoesTo(x,y))", "All x.(John(x) -> GoesToCinema(x))", "all x y.((John(x) & Cinema(y)) -> WillGoTo(x,y))", "all x.((John(x) & Cinema(y)) -> GoesTo(x,y))", "all x.(John(x) -> WillGoToCinema(x))", "all x y.((John(x) & Cinema(y)) -> GoTo(x,y))", "all x.(Jon(x) -> GoesToCinema(x))", "all x.(John(x) -> GoToCinema(x))", "all x.((John(x) & Cinema(y)) -> WillGoTo(x,y))", "all x.(John(x) -> GoingToCinema(x))", "(GoesToCinema(John))", "all x y.((John(x) & Cinema(y)) -> GoingTo(x,y))", "all x.(Jeff(x) -> GoesToCinema(x))", "all x.((John(x) & Cinema(y)) -> GoTo(x,y))", "all x.((John(x) & Cinema(x)) -> GoesTo(x,y))"]}
{"id": "folio_train_1451", "nl": "The weather is good today.", "fol": "-HasBadWeather(Today)", "prediction": ["all x.(Weather(x) -> Good(x))", "all x.((Weather(x) & Good(x)) -> Today(x))", "(GoodWeather(x) & Today(x))", "all x.(Weather(x) -> GoodToday(x))", "All x.(Weather(x) -> Good(x))", "all x.((Weather(x) & GoodToday(x)) -> GoodToday(x))", "all x.((Weather(x) & Good(x)) -> Good(x))", "all x y.((Weather(x) & Today(y)) -> Good(x))", "all x y.((Weather(x) & Today(y)) -> Good(x,y))", "all x y.((Weather(x) & Weather(y)) -> Good(x,y))", "all x y.((Weather(x) & Day(y)) -> Good(x,y))", "(GoodWeather(x) & GoodWeather(x))", "all x y.((Weather(x) & Weather(y)) -> Good(x))", "All x.(Weather(x) -> GoodToday(x))", "all x y.((Weather(x) & Day(y)) -> Good(x))", "(GoodWeather(x) -> Today(x))"]}
{"id": "folio_train_1452", "nl": "Quiksilver sells sportswear, clothing, footwear, and accessories.", "fol": "all x.((SellsByQuiksilver(x) -> IsSportswear(x)) | IsClothing(x) | IsFootwear(x) | IsAccessory(x))", "prediction": ["all x.(Quicksilver(x) -> (SellsSportswear(x) & SellsClothing(x) & SellsFootwear(x) & SellsAccessories(x)))", "all x.(Quiksilver(x) -> (SellsSportswear(x) & SellsClothing(x) & SellsFootwear(x) & SellsAccessories(x)))", "all x.(Quicksilver(x) -> (SellsSportswear(x) | SellsClothing(x) | SellsFootwear(x) | SellsAccessories(x)))", "all x.(Quicksilver(x) -> (SellsSportswear(x) & SellsClothing(x) & SellsFootwear(x) & SellsAccessories(x)))", "(SellsSportswear(Quicksilver) & SellsClothing(Quicksilver) & SellsFootwear(Quicksilver) & SellsAccessories(Quicksilver))", "all x.(QuickSilver(x) -> (SellsSportswear(x) & SellsClothing(x) & SellsFootwear(x) & SellsAccessories(x)))", "all x.(Quicksilver(x) -> (SellsSportswear(x) & SellsClothing(x) & SellsFitness(x) & SellsAccessories(x)))", "all x.(Quiksilver(x) -> (SellsSportswear(x) | SellsClothing(x) | SellsFootwear(x) | SellsAccessories(x)))", "all x.(QuikSilver(x) -> (SellsSportswear(x) & SellsClothing(x) & SellsFootwear(x) & SellsAccessories(x)))", "All x.(Quicksilver(x) -> (SellsSportswear(x) & SellsClothing(x) & SellsFootwear(x) & SellsAccessories(x)))", "all x.(Quiksilver(x) -> (SellsSportswear(x) & SellsClothing(x) & SellsFootwear(x) & SellsAccessories(x)))", "all x.(Quicksilver(x) -> (SellsSportswear(x) & SellsClothing(x) & SellsFootwear(x) & SellsAccessory(x)))", "all x.(Quiksilver(x) -> (SellsSportswear(x) & SellsClothing(x) & SellsFitness(x) & SellsAccessories(x)))", "all x.(Quicksilver(x) -> (SellsSportswear(x) & SellsClothing(x) & SellsFootwear(x) & SellsAccommodations(x)))", "all x.((Quicksilver(x) & Sportswear(x) & Clothing(x) & Footwear(x) & Accessories(x)) -> Sells(x,y))", "all x y.((Quicksilver(x) & (Sportswear(y) | Clothing(y) | Footwear(y) | Accessories(y))) -> Sells(x,y))"]}
{"id": "folio_train_1453", "nl": "Flannels are a type of clothing.", "fol": "IsClothing(Flannel)", "prediction": ["all x.(Flannel(x) -> Clothing(x))", "all x y.((Flannel(x) & Clothing(y)) -> Clothing(x,y))", "all x.(Flannels(x) -> Clothing(x))", "all x.(Flannel(x) -> Clothing(x))", "all x.(Flonnels(x) -> Clothing(x))", "all x y.((Flannel(x) & Clothing(y)) -> Clothing(x))", "all x.(Flonkel(x) -> Clothing(x))", "all x y.((Flannel(x) & Clothes(y)) -> Clothing(x,y))", "all x.(Flannel(x) -> Clothes(x))", "all x y.((Flannel(x) & Clothes(y)) -> Clothing(x))", "all x.(Flannel(x) -> ClothingType(x))", "all x y.((Flannel(x) & Clothing(y)) -> Clothes(x,y))", "all x.((Flannel(x) & Clothing(x)) -> Clothing(x))", "all x y.((Flannel(x) & Clothing(y)) -> ClothingType(x,y))", "all x.(Flannels(x) -> Clothing(x))", "all x.((Flannel(x) & Clothing(x)) -> Clothes(x))"]}
{"id": "folio_train_1454", "nl": "Joe owns an item fron Quiksilver.", "fol": "exists x.(SellsByQuiksilver(x) -> OwnsByJoe(x))", "prediction": ["all x y.((Joe(x) & Item(y) & Quiksilver(y)) -> Owns(x,y))", "all x.((Joe(x) & Item(x,Quicksilver)) -> Owns(x,Quicksilver))", "all x y.((Joe(x) & Item(y)) -> Owns(x,y))", "all x.((Joe(x) & Item(x) & Quiksilver(x)) -> Owns(x,y))", "all x y.((Joe(x) & Item(y) & Quiksilver(z)) -> Owns(x,y,z))", "all x.((Joe(x) & Item(x,Quicksilver)) -> Owns(x,Joe))", "all x y.((Joe(x) & Item(y) & Quiksilver(x)) -> Owns(x,y))", "all x.((Joe(x) & Item(x,Quiksilver)) -> Owns(x,Quiksilver))", "all x y.((Joe(x) & Item(y) & Quicksilver(y)) -> Owns(x,y))", "all x y.((Joe(x) & Item(y) & Quiksilver(z)) -> Owns(x,y))", "all x y.((Joe(x) & Item(y) & FronQuicksilver(x)) -> Owns(x,y))", "all x y.((Joe(x) & Item(y) & FronQuicksilver(y)) -> Owns(x,y))", "all x.((Joe(x) & Item(y) & Quiksilver(y)) -> Owns(x,y))", "all x.(OwnsItem(x,FronQuicksilver) -> Joe(x))", "all x.((Joe(x) & Item(y) & Quiksilver(z)) -> Owns(x,y,z))", "all x.((Joe(x) & Item(x) & Quiksilver(x)) -> Owns(x,Joe))"]}
{"id": "folio_train_1455", "nl": "Quiksilver sells beer.", "fol": "exists x.(SellsByQuiksilver(x) & Beer(x))", "prediction": ["all x.(Quicksilver(x) -> SellsBeer(x))", "all x.(Quiksilver(x) -> SellsBeer(x))", "all x y.((Quicksilver(x) & Beer(y)) -> Sells(x,y))", "all x y.((Quiksilver(x) & Beer(y)) -> Sells(x,y))", "all x.(Quicksilver(x) -> SellsBerry(x))", "all x.(Quiksilver(x) -> SellsBerry(x))", "all x.(Quicksilver(x) -> SellsBier(x))", "All x.(Quiksilver(x) -> SellsBeer(x))", "all x.(Quiksilver(x) -> SellsBier(x))", "All x.(Quicksilver(x) -> SellsBeer(x))", "all x.(QuikSilver(x) -> SellsBeer(x))", "exists x.(Quicksilver(x) & SellsBeer(x))", "all x.(Quicksilver(x) -> Sells(x,Beer))", "exists x.(Quiksilver(x) & SellsBeer(x))", "all x.(Quiksilver(x) -> Sells(x,Beer))", "exists x.(Quicksilver(x) & Sells(x,Beer))"]}
{"id": "folio_train_1456", "nl": "Joe owns a flannel.", "fol": "OwnsByJoe(Flannel)", "prediction": ["all x.(OwnsFlannel(x) -> JoeOwnsFlannel(x))", "exists x.(Flannel(x) & Owns(x,Joe))", "all x.(Flannel(x) -> Owns(x,Joe))", "all x.(OwnsFlannel(x) -> JoeHasFlannel(x))", "exists x.(Flannel(x) & Owns(x,y))", "all x.(OwnsFlannel(x) -> Joe(x))", "all x y.((Joe(x) & Flannel(y)) -> Owns(x,y))", "all x.((Joe(x) & Flannel(x)) -> Owns(x,y))", "all x.(Joe(x) -> OwnsFlannel(x))", "all x.((Joe(x) & Flannel(x)) -> Owns(x,y))", "all x.(Flannel(x) -> Owns(x,y))", "all x.((Joe(x) & Flannel(x)) -> Owns(x,Flannel))", "all x.(OwnsFlannel(x) -> JoeOwns(x))", "all x.(OwnsFlannel(x) -> JoeHas(x,Flannel))", "(OwnsFlannel(Joe))", "exists x.(Flannel(x) & Owns(x,Joe,Flannel))"]}
{"id": "folio_train_1457", "nl": "Joe owns at least one a piece of sportswear, clothing, footwear, or accessory", "fol": "exists x.((IsSportswear(x) | IsClothing(x) | IsFootwear(x) | IsAccessory(x)) & OwnsByJoe(x))", "prediction": ["all x y.((Joe(x) & (Sportswear(y) | Clothing(y) | Footwear(y) | Accessory(y))) -> Owns(x,y))", "all x.((Joe(x) & (Sportswear(x) | Clothing(x) | Footwear(x) | Accessory(x))) -> Owns(x,y))", "all x.(Owns(x,y) -> (Sportswear(y) | Clothing(y) | Footwear(y) | Accessory(y)))", "all x.(Joe(x) -> (OwnsSportswear(x) | OwnsClothing(x) | OwnsFootwear(x) | OwnsAccessories(x)))", "all x y z.((Joe(x) & (Sportswear(y) | Clothing(y) | Footwear(y) | Accessory(y))) -> Owns(x,y))", "all x.(Owns(x,y) -> (Owns(x,y) & (Sportswear(y) | Clothing(y) | Footwear(y) | Accessory(y))))", "all x.((Joe(x) & (Sportswear(x) | Clothing(x) | Footwear(x) | Accessory(x))) -> OwnsAtLeastOnePieceOf(x,y))", "all x y.((Joe(x) & (Sportswear(y) | Clothing(y) | Footwear(y) | Accessories(y))) -> Owns(x,y))", "all x y.((Joe(x) & (Sportswear(y) | Clothing(y) | Footwear(y) | Accessory(y))) -> OwnsAtLeastOne(x,y))", "all x y.((Joe(x) & (Sportswear(y) | Clothing(y) | Footwear(y) | Accessory(y)) & Owns(x,y)) -> Owns(x,y))", "all x y.((Joe(x) & (Sportswear(y) | Clothing(y) | Footwear(y) | Accessory(y))) -> OwnsAtLeastOnePieceOf(x,y))", "all x y z.((Joe(x) & (Sportswear(y) | Clothing(y) | Footwear(y) | Accessory(y))) -> (Owns(x,y) & Owns(x,z)))", "all x y.((Joe(x) & (Sportswear(y) | Clothing(y) | Footwear(y) | Accessory(y)) & Owns(x,y)) -> (Owns(x,y) | Owns(x,y)))", "all x y z.((Joe(x) & (Sportswear(y) | Clothing(y) | Footwear(y) | Accessory(y)) & (Owns(x,y) | Owns(x,z))) -> (Owns(x,y) | Owns(x,z))))", "all x y z.((Joe(x) & (Sportswear(y) | Clothing(y) | Footwear(y) | Accessory(y)) & (Owns(x,y) | Owns(x,z))) -> Owns(x,y))", "all x.(Owns(x,y) -> (Owns(x,y) & (Sportswear(y) | Clothing(y) | Footwear(y) | Accessory(y)) & (Sportswear(y) | Clothing(y) | Footwear(y) | Accessory(y))))"]}
{"id": "folio_train_1458", "nl": "No video games released by Nintendo support the PS4 platform.", "fol": "all x.(ReleasedByNintendo(x) -> -SupportsPS4Platform(x))", "prediction": ["-exists x.(VideoGame(x) & ReleasedByNintendo(x) & SupportsPS4(x))", "-exists x.(VideoGame(x) & ReleasedByNintendo(x) & SupportsPS4Platform(x))", "-exists x.(VideoGame(x) & Nintendo(x) & ReleasedBy(x,y))", "-exists x.(VideoGame(x) & ReleasedByNintendo(x) & SupportsPs4Platform(x))", "-exists x.(VideoGame(x) & ReleasedByNintendo(x) & SupportsPs4(x))", "-exists x.(VideoGame(x) & ReleasedByNintendo(x) & PS4(x))", "-exists x.(VideoGame(x) & ReleasedByNintendo(x) & ReleasedByNintendo(x) & SupportsPS4Platform(x))", "-exists x.(VideoGame(x) & ReleasedByNintendo(x) & Supports(x,PS4))", "-exists x.(VideoGame(x) & ReleasedByNintendo(x) & PS4Support(x))", "-exists x.(VideoGame(x) & ReleasedByNintendo(x) & -SupportsPS4(x))", "-exists x.(VideoGame(x) & ReleasedByNintendo(x) & PS4Platform(x))", "-exists x.(VideoGame(x) & ReleasedByNintendo(x) & ReleasedByNintendo(x) & SupportsPS4(x))", "-exists x.(VideoGame(x) & ReleasedByNintendo(x) & PlayStation4(x))", "-exists x.(VideoGame(x) & ReleasedByNintendo(x) & -SupportsPS4Platform(x))", "-exists x.(VideoGame(x) & ReleasedBy(x,Nintendo) & SupportsPS4(x))", "-exists x.(VideoGame(x) & ReleasedByNintendo(x) & ReleasedByNintendo(x) & SupportsPs4Platform(x))"]}
{"id": "folio_train_1459", "nl": "All video games in the Pokemon series are released by Nintendo. ", "fol": "all x.(InPokemonSeries(x) -> ReleasedByNintendo(x))", "prediction": ["all x.((VideoGame(x) & PokemonSeries(x)) -> ReleasedByNintendo(x))", "all x y.((VideoGame(x) & PokemonSeries(y)) -> ReleasedByNintendo(x,y))", "all x.((VideoGame(x) & Pokemon(x)) -> ReleasedByNintendo(x))", "all x.((VideoGame(x) & InPokemonSeries(x)) -> ReleasedByNintendo(x))", "all x y z.((VideoGame(x) & PokemonSeries(y) & Nintendo(z)) -> ReleasedBy(x,y,z))", "all x y.((VideoGame(x) & Pokemon(y)) -> ReleasedByNintendo(x,y))", "all x y.((VideoGame(x) & PokemonSeries(y)) -> ReleasedBy(x,y))", "all x.(PokemonVideoGame(x) -> ReleasedByNintendo(x))", "all x.((VideoGame(x) & PokemonSeries(x)) -> ReleasedBy(x,Nintendo))", "all x.((VideoGame(x) & InPok\u00e9monSeries(x)) -> ReleasedByNintendo(x))", "all x y.((VideoGame(x) & PokemonSeries(y) & ReleasedByNintendo(x,y)) -> ReleasedByNintendo(x,y))", "all x.((VideoGame(x) & Pok\u00e9monSeries(x)) -> ReleasedByNintendo(x))", "all x y.((VideoGame(x) & PokemonSeries(y)) -> ReleasedByNintendo(x))", "all x.((VideoGame(x) & PokemonSequel(x)) -> ReleasedByNintendo(x))", "all x y.((VideoGame(x) & PokemonSeries(y) & Nintendo(x)) -> ReleasedBy(x,y))", "all x.(VideoGame(x) -> ReleasedByNintendo(x))"]}
{"id": "folio_train_1460", "nl": "All video games in the FIFA series support the PS4 platform. ", "fol": "all x.(InFIFASeries(x) -> SupportsPS4Platform(x))", "prediction": ["all x.((VideoGame(x) & FIFASeries(x)) -> SupportsPS4Platform(x))", "all x.((VideoGame(x) & FIFASeries(x)) -> SupportsPs4Platform(x))", "all x.((VideoGame(x) & FIFASeries(x)) -> SupportsPS4(x))", "all x y.((VideoGame(x) & FIFASeries(y)) -> SupportsPS4Platform(x,y))", "all x.((VideoGame(x) & InFootballSeries(x)) -> SupportsPS4Platform(x))", "all x y z.((VideoGame(x) & FIFASeries(y) & PS4(z)) -> Supports(x,y,z))", "all x.((VideoGame(x) & InFifaSeries(x)) -> SupportsPS4Platform(x))", "all x.((VideoGame(x) & InFavoriteSeries(x)) -> SupportsPS4Platform(x))", "all x.((VideoGame(x) & InFamousSeries(x)) -> SupportsPS4Platform(x))", "all x.((VideoGame(x) & FIFASeries(x)) -> SupportsPs4(x))", "all x.((VideoGame(x) & InFutureSeries(x)) -> SupportsPS4Platform(x))", "all x y.((VideoGame(x) & FIFASeries(y)) -> SupportsPs4Platform(x,y))", "all x y.((VideoGame(x) & FIFASeries(y)) -> SupportsPS4(x,y))", "all x.(VideoGame(x) -> SupportsPS4(x))", "all x y z.((VideoGame(x) & FIFASeries(y) & PS4(z)) -> SupportsPlatform(x,y,z))", "all x.((VideoGame(x) & InFussballSeries(x)) -> SupportsPS4Platform(x))"]}
{"id": "folio_train_1461", "nl": "All video games supporting users to simulate playing soccer games online are in the FIFA series.", "fol": "all x.(SupportsSoccerSimulation(x) -> InFIFASeries(x))", "prediction": ["all x.((VideoGame(x) & SupportsSimulation(x,SoccerGames)) -> FIFASeries(x))", "all x.((VideoGame(x) & SupportsUsers(x) & SimulatesPlayingSoccerGamesOnline(x)) -> FIFASeries(x))", "all x.((VideoGame(x) & SupportsPlayingSoccerGamesOnline(x)) -> FIFASeries(x))", "all x.((VideoGame(x) & SupportsSimulation(x)) -> FIFASeries(x))", "all x.((VideoGame(x) & SupportsSimulation(x) & OnlineSoccerGame(x)) -> FIFASeries(x))", "all x.((VideoGame(x) & SupportsSimulation(x) & OnlineSoccerGames(x)) -> FIFASeries(x))", "all x.((VideoGame(x) & SupportsPlayingSoccerGames(x)) -> FIFASeries(x))", "all x.((VideoGame(x) & SupportsSimulation(x,soccerGames)) -> FIFASeries(x))", "all x.((VideoGame(x) & SupportsUsersToSimulatePlayingSoccerGamesOnline(x)) -> FIFASeries(x))", "all x.((VideoGame(x) & SupportsUsers(x) & SimulatesSoccerGamesOnline(x)) -> FIFASeries(x))", "all x.((VideoGame(x) & SupportsUsersToSimulateSoccerGamesOnline(x)) -> FIFASeries(x))", "all x.((VideoGame(x) & SupportsSimulation(x,SoccerGames) & Online(x)) -> FIFASeries(x))", "all x.((VideoGame(x) & SupportsSimulation(x) & SoccerGamesOnline(x)) -> FIFASeries(x))", "all x.((VideoGame(x) & SupportsUsers(x) & SimulatesPlayingOnline(x)) -> FIFASeries(x))", "all x.((VideoGame(x) & SupportsUsers(x) & SimulatesPlayingSoccerGames(x)) -> FIFASeries(x))", "all x.((VideoGame(x) & SupportsSimulationOfSoccerGames(x)) -> FIFASeries(x))"]}
{"id": "folio_train_1462", "nl": "The video game named \u201cBe Lionel\u201d is in the Pokemon series or supports users to simulate playing football games online.", "fol": "((InPokemonSeries(BeLionelGame) & -SupportsSoccerSimulation(BeLionelGame)) | (-InPokemonSeries(BeLionelGame) & SupportsSoccerSimulation(BeLionelGame)))", "prediction": ["all x.((VideoGame(x) & BeLionel(x)) -> (InPokemonSeries(x) | SupportsSimulation(x)))", "all x.((VideoGame(x) & BeLionel(x)) -> (PokemonSeries(x) | SupportsSimulation(x)))", "all x.((VideoGame(x) & BeLionel(x)) -> (InPokemonSeries(x) | SupportsSimulation(x)))", "all x.((VideoGame(x) & BeLionel(x)) -> (InPokemonSeries(x) | SupportsSimulationOfFootballGames(x)))", "all x.((VideoGame(x) & BeLionel(x)) -> (InPok\u00e9monSeries(x) | SupportsSimulation(x)))", "all x.((VideoGame(x) & BeLionel(x)) -> (InPokemonSeries(x) | SupportsSimulationOfFootballGamesOnline(x)))", "all x.((VideoGame(x) & PokemonSeries(x)) | SupportsSimulation(x))", "all x.((VideoGame(x) & BeLionel(x)) -> (InPokemonSeries(x) | SupportsSimulationOfFootballGames(x)))", "all x.((VideoGame(x) & BeLionel(x)) -> (InPokemonSeries(x) | SupportsPlayingFootballGamesOnline(x)))", "all x.((VideoGame(x) & BeLionel(x)) -> (PokemonSeries(x) | SupportsSimulation(x)))", "all x.((VideoGame(x) & NamedBeLionel(x)) -> (InPokemonSeries(x) | SupportsSimulation(x)))", "all x.(VideoGame(x) -> (BeLionel(x) | SupportsSimulation(x)))", "all x.((VideoGame(x) & BeLionel(x)) -> (InPokemonSeries(x) | SupportsPlayingOnline(x)))", "all x.((VideoGame(x) & BeLionel(x)) -> (InPokemonSeries(x) | SupportsSimulationOfFootballGamesOnline(x)))", "all x.((VideoGame(x) & BeLionel(x)) -> (Pok\u00e9monSeries(x) | SupportsSimulation(x)))", "all x.((VideoGame(x) & BeLionel(x)) -> (PokemonSeries(x) | SupportsSimulationOfFootballGames(x)))"]}
{"id": "folio_train_1463", "nl": "The video game \"Be Lionel\" is in the pokemon series.", "fol": "InPokemonSeries(BeLionelGame)", "prediction": ["all x.((VideoGame(x) & BeLionel(x)) -> InPokemonSeries(x))", "all x.((VideoGame(x) & \"BeLionel(x)) -> InPokemonSeries(x))", "all x.((VideoGame(x) & BeLionel(x)) -> InPokemonSeries(x))", "all x.((VideoGame(x) & \"BeLionel\") -> InPokemonSeries(x))", "all x.((VideoGame(x) & PokemonSeries(x)) -> \"BeLionel(x)\")", "(VideoGame(BeLionel) & InPokemonSeries(BeLionel))", "all x.(BeLionel(x) -> InPokemonSeries(x))", "all x.((VideoGame(x) & PokemonSeries(x)) -> \"BeLionel(x)\")", "all x.(VideoGame(x) -> (BeLionel(x) & InPokemonSeries(x)))", "all x.((VideoGame(x) & BeLionel(x)) -> InPok\u00e9monSeries(x))", "all x.((VideoGame(x) & \"BeLionel(x)) -> InPokemonSeries(x))", "exists x.(VideoGame(x) & \"BeLionel(x)\" & InPokemonSeries(x))", "all x.(VideoGame(x) -> (BeLionel(x) | InPokemonSeries(x)))", "all x.((VideoGame(x) & PokemonSeries(x)) -> BeLionel(x))", "(Pokemon(BeLionel) & InPokemonSeries(BeLionel))", "all x y.((VideoGame(x) & PokemonSeries(y)) -> \"BeLionel(x)\")"]}
{"id": "folio_train_1464", "nl": "The video game named \u201cBe Lionel\u201d is not in the FIFA series or supports the PS4 platform.", "fol": "-(InFIFASeries(BeLionelGame) & SupportsPS4Platform(BeLionelGame))", "prediction": ["all x.((VideoGame(x) & BeLionel(x)) -> (-InFifaSeries(x) & -SupportsPS4Platform(x)))", "(VideoGame(BeLionel) & -InFifaSeries(BeLionel) & -SupportsPS4Platform(BeLionel))", "(VideoGame(BeLionel) & -InFifaSeries(BeLionel) & -SupportsPS4(BeLionel))", "all x.((VideoGame(x) & BeLionel(x)) -> (-InFootballSeries(x) & -SupportsPS4Platform(x)))", "(VideoGame(BeLionel) & -(InFifaSeries(BeLionel) | SupportsPS4(BeLionel))))", "all x.((VideoGame(x) & BeLionel(x)) -> (-InFifaSeries(x) & -SupportsPS4Platform(x)))", "all x.((VideoGame(x) & BeLionel(x)) -> (-InFifaSeries(x) | SupportsPS4Platform(x)))", "(VideoGame(BeLionel) & -InFifaSeries(BeLionel) & -SupportsPs4Platform(BeLionel))", "(-exists x.(VideoGame(x) & BeLionel(x)) & -exists y.(FootballSeries(y) & Supports(x,y))))", "all x.((VideoGame(x) & BeLionel(x)) -> (-InFifaSeries(x) & -SupportsPs4Platform(x)))", "all x.((VideoGame(x) & BeLionel(x)) -> -(InFifaSeries(x) | SupportsPS4Platform(x)))", "all x.((VideoGame(x) & BeLionel(x)) -> (-InFifaSeries(x) & -SupportsPS4(x)))", "all x.((VideoGame(x) & BeLionel(x)) -> (-InFootballSeries(x) | SupportsPS4Platform(x)))", "(VideoGame(BeLionel) & -(InFifaSeries(BeLionel) | SupportsPS4Platform(BeLionel))))", "(VideoGame(BeLionel) & -InFifaSeries(BeLionel) & -SupportsPS4 Platform(BeLionel))", "(-exists x.(VideoGame(x) & BeLionel(x)) & -InFifaSeries(x) & -SupportsPS4Platform(x))"]}
{"id": "folio_train_1465", "nl": "The video game named \u201cBe Lionel\u201d is in the FIFA series or supports the PS4 platform.", "fol": "(InFIFASeries(BeLionelGame) | SupportsPS4Platform(BeLionelGame))", "prediction": ["all x.((VideoGame(x) & BeLionel(x)) -> (InFootballSeries(x) | SupportsPS4Platform(x)))", "all x.((VideoGame(x) & BeLionel(x)) -> (InFifaSeries(x) | SupportsPS4Platform(x)))", "all x.((VideoGame(x) & BeLionel(x)) -> (InFamousSeries(x) | SupportsPS4Platform(x)))", "all x.((VideoGame(x) & BeLionel(x)) -> (FootballSeries(x) | PS4Platform(x)))", "all x.((VideoGame(x) & BeLionel(x)) -> (InFootballSeries(x) | SupportsPs4Platform(x)))", "all x.((VideoGame(x) & BeLionel(x)) -> (InFootballSeries(x) | SupportsPS4Platform(x)))", "all x.((VideoGame(x) & BeLionel(x)) -> (InFifaSeries(x) | SupportsPS4Platform(x)))", "all x.((VideoGame(x) & BeLionel(x)) -> (InFifaSeries(x) | SupportsPs4Platform(x)))", "all x.((VideoGame(x) & BeLionel(x)) -> (InFifaSeries(x) | SupportsPS4(x)))", "all x.((VideoGame(x) & BeLionel(x)) -> (InFootballSeries(x) | SupportsPS4(x)))", "all x.(VideoGame(x) -> (BeLionel(x) | SupportsPS4Platform(x)))", "all x.(VideoGame(x) -> (BeLionel(x) | SupportsPS4(x)))", "all x.((VideoGame(x) & BeLionel(x)) -> (InFastFootballSeries(x) | SupportsPS4Platform(x)))", "all x.((VideoGame(x) & BeLionel(x)) -> (InFootballSeries(x) | SupportsPs4Platform(x)))", "all x.((VideoGame(x) & BeLionel(x)) -> (InFamousSeries(x) | SupportsPs4Platform(x)))", "(VideoGame(BeLionel) & (InFifaSeries(BeLionel) | SupportsPS4Platform(BeLionel)))"]}
{"id": "folio_train_1466", "nl": "The video game named \u201cBe Lionel\u201d  is not in the FIFA or Pokemon series.", "fol": "(-InFIFASeries(BeLionelGame) & -InPokemonSeries(BeLionelGame))", "prediction": ["(VideoGame(BeLionel) & -(FamousSeries(BeLionel) | PokemonSeries(BeLionel))))", "(VideoGame(BeLionel) & -(InFamousSeries(BeLionel) | InPokemonSeries(BeLionel))))", "(-exists x.(VideoGame(x) & BeLionel(x)) & -exists y.(FamousSeries(y) | PokemonSeries(y))))", "(-exists x.(VideoGame(x) & BeLionel(x)) & -exists y.(FootballSeries(y) | PokemonSeries(y))))", "all x.((VideoGame(x) & BeLionel(x)) -> -(FamousSeries(x) | PokemonSeries(x)))", "all x.((VideoGame(x) & BeLionel(x)) -> -(FamousSeries(x) | PokemonSeries(x))))", "(VideoGame(BeLionel) & -(InFifa(BeLionel) | InPokemon(BeLionel))))", "all x.((VideoGame(x) & BeLionel(x)) -> -(InFamousSeries(x) | InPokemonSeries(x))))", "(VideoGame(BeLionel) & -(Fifa(BeLionel) | Pokemon(BeLionel))))", "(-exists x.(VideoGame(x) & BeLionel(x)) & -exists y.(Football(y) | Pokemon(y))))", "(VideoGame(BeLionel) & -(InFamousSeries(BeLionel) | InPok\u00e9monSeries(BeLionel))))", "all x.(VideoGame(x) -> (BeLionel(x) & -(FamousSeries(x) | PokemonSeries(x))))", "(VideoGame(BeLionel) & -InFifa(BeLionel) & -InPokemon(BeLionel))", "all x.(VideoGame(x) -> (BeLionel(x) & -(FamousSeries(x) | PokemonSeries(x)))))", "(VideoGame(BeLionel) & -(InFamousSeries(BeLionel) | InPopcornSeries(BeLionel))))", "all x.((VideoGame(x) & BeLionel(x)) -> (-InFamousSeries(x) | InPokemonSeries(x)))"]}
{"id": "folio_train_1467", "nl": "No payment cards issued by Russian banks can be used with ApplePay.", "fol": "all x.(IssuedByRussianBanks(x) -> -CanUseApplePay(x))", "prediction": ["all x.((PaymentCard(x) & IssuedByRussianBanks(x)) -> CanBeUsedWithApplePay(x))", "all x.((PaymentCard(x) & IssuedByRussicBanks(x)) -> CanBeUsedWithApplePay(x))", "all x y.((PaymentCard(x) & RussianBank(y) & IssuedBy(x,y)) -> CanBeUsedWithApplePay(x))", "all x.((PaymentCard(x) & IssuedByRussicalBanks(x)) -> CanBeUsedWithApplePay(x))", "all x.((PaymentCard(x) & IssuedByRussicBank(x)) -> CanBeUsedWithApplePay(x))", "-exists x.(PaymentCard(x) & IssuedByRussianBanks(x) & CanBeUsedWithApplePay(x))", "all x.((PaymentCard(x) & IssuedByRussianBanks(x)) -> -CanBeUsedWithApplePay(x))", "all x y.((PaymentCard(x) & RussianBank(y)) -> -CanBeUsedWithApplePay(x,y))", "-exists x.(PaymentCard(x) & IssuedByRussicBank(x) & CanBeUsedWithApplePay(x))", "-exists x.(PaymentCard(x) & IssuedByRussicalBanks(x) & CanBeUsedWithApplePay(x))", "all x.((PaymentCard(x) & RussianBank(x)) -> -CanBeUsedWithApplePay(x))", "all x.((PaymentCard(x) & IssuedByRussianBank(x)) -> CanBeUsedWithApplePay(x))", "-exists x.(PaymentCard(x) & IssuedByRussianBanks(x) & ApplePay(x))", "all x y.((PaymentCard(x) & RussianBank(y) & IssuedBy(x,y)) -> -CanBeUsedWithApplePay(x))", "-exists x.(PaymentCard(x) & IssuedByRussicBank(x) & ApplePay(x))", "-exists x.(PaymentCard(x) & IssuedByRussicalBanks(x) & ApplePay(x))"]}
{"id": "folio_train_1468", "nl": "All MIR payment cards are issued by Russian banks.", "fol": "all x.(MIRPaymentCards(x) -> IssuedByRussianBanks(x))", "prediction": ["all x.(MIRPaymentCard(x) -> IssuedByRussianBanks(x))", "all x.(MIRPaymentCard(x) -> IssuedByRussicBanks(x))", "all x.(MIRPaymentCard(x) -> IssuedByRussicBank(x))", "all x.(MIRPaymentCard(x) -> IssuedByBank(x))", "all x y.((MIRPaymentCard(x) & RussianBank(y)) -> IssuedBy(x,y))", "all x.(MIRPaymentCard(x) -> IssuedByRussianBank(x))", "all x y.((MIRPaymentCard(x) & Bank(y)) -> IssuedBy(x,y))", "all x.(MIRPaymentCard(x) -> IssuedByBanks(x))", "all x.((PaymentCard(x) & IssuedByRussianBanks(x)) -> MIR(x))", "all x.(MIR(x) -> IssuedByRussianBanks(x))", "all x.(MIRPaymentCard(x) -> IssuedByRussicalBanks(x))", "all x.(MIRPaymentCard(x) -> IssuedBy(x,RussianBanks))", "all x.(MIRPaymentCard(x) -> IssuedByBank(x,Russia))", "all x.(MIR(x) -> IssuedByRussicBanks(x))", "all x.(MIRPaymentCard(x) -> IssuedByRossicalBanks(x))", "all x.(MIR(x) -> IssuedByRussicBank(x))"]}
{"id": "folio_train_1469", "nl": "Some international payment cards can be used with ApplePay.", "fol": "exists x.(InternationalPaymentCards(x) -> CanUseApplePay(x))", "prediction": ["exists x.(InternationalPaymentCard(x) & CanBeUsedWithApplePay(x))", "exists x.(InternationalPaymentCard(x) & UsedWithApplePay(x))", "exists x.(InternationalPaymentCard(x) & ApplePay(x))", "exists x.(InternationalPaymentCard(x) & UsesApplePay(x))", "exists x.(InternationalPaymentCard(x) & ApplePay(y) & UsedWith(x,y))", "exists x y.(InternationalPaymentCard(x) & ApplePay(y) & UsedWith(x,y))", "exists x.(InternationalPaymentCard(x) & WorksWithApplePay(x))", "exists x.(InternationalPaymentCard(x) & ApplePay(y) & CanBeUsedWith(x,y))", "exists x.(InternationalPaidCard(x) & CanBeUsedWithApplePay(x))", "exists x.(InternationalPaymentCard(x) & CanUseApplePay(x))", "exists x.(InternationalPaymentCard(x) & ApplePay(y))", "exists x y.(InternationalPaymentCard(x) & ApplePay(y) & CanBeUsedWith(x,y))", "exists x.(InternationalPaymentCard(x) & ApplePay(y) & CanBeUsed(x,y))", "exists x.(InternationalPaymentCard(x) & UseApplePay(x))", "exists x.(InternationalPaymentCard(x) & CanBeUsed(x,ApplePay))", "exists x.(InternationalPaymentCard(x) & CompatibleWithApplePay(x))"]}
{"id": "folio_train_1470", "nl": "Social payments in Russia can only be transferred to MIR payment cards.", "fol": "all x.(SocialPaymentsInRussia(x) -> MIRPaymentCards(x))", "prediction": ["all x.((SocialPayment(x) & InRussland(x)) -> TransferableToMIRPaymentCards(x))", "all x.((SocialPayment(x) & InRussia(x)) -> TransferableToMIRPaymentCards(x))", "all x.((SocialPayment(x) & InRussia(x)) -> CanBeTransferredToMIRPaymentCards(x))", "all x.((SocialPayment(x) & InRussland(x)) -> CanBeTransferredToMIRPaymentCards(x))", "all x.((SocialPayment(x) & InRussland(x)) -> TransferableToMIRPaymentCard(x))", "all x.((SocialPayment(x) & InRussland(x)) -> TransferredToMIRPaymentCards(x))", "all x.((SocialPayment(x) & InRussland(x)) -> CanBeTransferredToMIRPaymentCard(x))", "all x.((SocialPayment(x) & InRussia(x)) -> TransferableToMIRPaymentCard(x))", "all x.((SocialPayment(x) & Russia(x)) -> TransferableToMIRPaymentCards(x))", "all x.((SocialPaid(x) & InRussland(x)) -> TransferableToMIRPaymentCards(x))", "all x.((SocialPayment(x) & InRussia(x)) -> CanBeTransferredToMIRPaymentCard(x))", "all x.((SocialPayment(x) & InRussia(x)) -> TransferredToMIRPaymentCards(x))", "all x y.((SocialPayment(x) & Russia(y)) -> CanBeTransferredToMIRPaymentCards(x,y))", "all x.((SocialPayment(x) & InRussland(x)) -> -TransferableToMIRPaymentCards(x))", "all x.((SocialPayment(x) & InRussland(x)) -> TransferableToMIRCards(x))", "all x.((SocialPayment(x) & InRussland(x)) -> TransferableToMIR(x))"]}
{"id": "folio_train_1471", "nl": "Bank of America payment cards can be used with ApplePay.", "fol": "CanUseApplePay(BankOfAmericaPaymentCards)", "prediction": ["all x.(BankOfAmericaPaymentCard(x) -> CanBeUsedWithApplePay(x))", "all x y.((BankOfAmericaPaymentCard(x) & ApplePay(y)) -> CanBeUsedWith(x,y))", "all x y.((BankOfAmerica(x) & ApplePay(y)) -> CanBeUsedWith(x,y))", "all x y.((BankOfAmericaPaymentCard(x) & ApplePay(y)) -> CanBeUsed(x,y))", "all x y z.((BankOfAmericaPaymentCard(x) & ApplePay(y) & ApplePay(z)) -> CanBeUsedWith(x,y,z))", "all x y z.((BankOfAmerica(x) & ApplePay(y) & PaymentCard(z)) -> CanBeUsedWith(x,y,z))", "all x y.((BankOfAmerica(x) & PaymentCard(y)) -> CanBeUsedWithApplePay(x,y))", "all x y.((BankOfAmerica(x) & ApplePay(y)) -> CanUse(x,y))", "all x.(BankOfAmerica(x) -> CanBeUsedWithApplePay(x))", "all x.((BankOfAmericaPaymentCard(x) & ApplePay(x)) -> CanBeUsedWith(x,ApplePay))", "all x y z.((BankOfAmericaPaymentCard(x) & ApplePay(y) & ApplePay(z)) -> CanBeUsed(x,y,z))", "all x.((BankOfAmericaPaymentCard(x) & ApplePay(x)) -> CanBeUsed(x))", "all x y.((BankOfAmerica(x) & ApplePay(y)) -> CanBeUsed(x,y))", "all x.((BankOfAmerica(x) & PaymentCard(x)) -> CanBeUsedWithApplePay(x))", "all x.((BankOfAmericaPaymentCard(x) & ApplePay(x)) -> CanBeUsedWith(x,y))", "all x y.((BankOfAmerica(x) & ApplePay(y)) -> PaymentCard(x,y))"]}
{"id": "folio_train_1472", "nl": "Bank of America payment cards are international.", "fol": "all x.(BankOfAmericaCard(x) -> InternationalPaymentCards(x))", "prediction": ["all x.(BankOfAmericaPaymentCard(x) -> International(x))", "all x.(BankOfAmerica(x) -> PaymentCard(x))", "all x.(BankOfAmerica(x) -> InternationalPaymentCard(x))", "all x y.((BankOfAmerica(x) & PaymentCard(y)) -> International(y))", "all x y.((BankOfAmericaPaymentCard(x) & BankOfAmerica(y)) -> International(x))", "all x y.((BankOfAmerica(x) & PaymentCard(y)) -> International(x))", "all x.(BankOfAmerica(x) -> PaymentCardsInternational(x))", "all x y.((BankOfAmerica(x) & PaymentCard(y)) -> International(x,y))", "all x.((BankOfAmerica(x) & PaymentCard(x)) -> International(x))", "all x.(BankOfAmericaCard(x) -> International(x))", "all x.((BankOfAmericaPaymentCard(x) & International(x)) -> PaymentCard(x))", "all x y.((BankOfAmericaPaymentCard(x) & BankOfAmericaPaymentCard(y)) -> International(x))", "all x.(PaymentCard(x) -> International(x))", "all x y.((BankOfAmericaPaymentCard(x) & BankOfAmerica(y)) -> International(x,y))", "all x.(BankOfAmericaPaymentCards(x) -> International(x))", "all x.(BankOfAmericaPaidCard(x) -> International(x))"]}
{"id": "folio_train_1473", "nl": "Bank of America payment cards are international and can be used to transfer social payments in Russia.", "fol": "(InternationalPaymentCards(BankOfAmericaPaymentCards) & SocialPaymentsInRussia(BankOfAmericaPaymentCards))", "prediction": ["all x.(BankOfAmericaPaymentCard(x) -> (International(x) & TransfersSocialPayments(x) & InRussia(x)))", "all x.(BankOfAmericaPaymentCard(x) -> (International(x) & TransfersSocialPayments(x)))", "all x.(BankOfAmericaPaymentCard(x) -> (International(x) & TransfersSocialPaymentsInRussia(x)))", "all x.(BankOfAmericaPaymentCard(x) -> (International(x) & TransfersSocialPayments(x,Russia)))", "all x.(BankOfAmericaPaymentCard(x) -> (International(x) & TransferSocialPayments(x) & InRussia(x)))", "all x.(BankOfAmericaPaymentCard(x) -> (International(x) & TransferSocialPayments(x)))", "all x.(BankOfAmericaPaymentCard(x) -> (International(x) & TransfersSocialPayments(x) & InRussland(x)))", "all x y.((BankOfAmericaPaymentCard(x) & Russia(y)) -> (International(x) & TransfersSocialPayments(x,y)))", "all x.(BankOfAmerica(x) -> (InternationalPaymentCard(x) & TransfersSocialPayments(x) & InRussia(x)))", "all x.(BankOfAmericaPaymentCard(x) -> (International(x) & TransferSocialPayments(x,Russia)))", "all x.(BankOfAmericaPaymentCard(x) -> (International(x) & TransferSocialPaymentsInRussia(x)))", "all x.(BankOfAmericaPaymentCard(x) -> (International(x) & TransferSocialPayments(x) & InRussland(x)))", "all x y.((BankOfAmerica(x) & PaymentCard(y)) -> (International(x) & TransfersSocialPayments(y,Russia)))", "all x y.((BankOfAmerica(x) & PaymentCard(y)) -> (International(y) & TransfersSocialPayments(y,Russia)))", "all x.(BankOfAmerica(x) -> (InternationalPaymentCard(x) & TransfersSocialPaymentsInRussia(x)))", "all x.(BankOfAmerica(x) -> (InternationalPaymentCard(x) & TransfersSocialPayments(x)))"]}
{"id": "folio_train_1474", "nl": "If Bank of America payment cards are international or issued by Russian banks, then they can not be used to transfer social payments in Russia.", "fol": "((InternationalPaymentCards(BankOfAmericaPaymentCards) | SocialPaymentsInRussia(BankOfAmericaPaymentCards)) -> -SocialPaymentsInRussia(BankOfAmericaPaymentCards))", "prediction": ["all x.((BankOfAmericaPaymentCards(x) & (International(x) | IssuedByRussianBanks(x))) -> -TransferSocialPayments(x))", "all x.((BankOfAmericaPaymentCards(x) & (International(x) | IssuedByRussianBanks(x))) -> -TransfersSocialPayments(x))", "all x.((BankOfAmericaPaymentCards(x) & International(x) & IssuedByRussianBanks(x)) -> -TransferSocialPaymentsInRussia(x))", "all x.((BankOfAmericaPaymentCards(x) & (International(x) | IssuedByRussianBanks(x))) -> -TransferSocialPaymentsInRussia(x))", "all x.((BankOfAmericaPaymentCards(x) & (International(x) | IssuedByRussianBanks(x))) -> -TransfersSocialPaymentsInRussia(x))", "all x.((BankOfAmericaPaymentCard(x) & (International(x) | IssuedByRussianBanks(x))) -> -TransferSocialPayments(x))", "all x.((BankOfAmericaPaymentCards(x) & International(x) & IssuedByRussianBanks(x)) -> -TransferSocialPayments(x))", "all x.((BankOfAmericaPaymentCards(x) & (International(x) | IssuedByRussianBanks(x))) -> -CanTransferSocialPayments(x))", "all x.((BankOfAmericaPaymentCards(x) & (International(x) | IssuedByRussicBanks(x))) -> -TransferSocialPayments(x))", "all x.((BankOfAmericaPaymentCards(x) & (International(x) | IssuedByRussBanks(x))) -> -TransferSocialPayments(x))", "all x.((BankOfAmericaPaymentCard(x) & (International(x) | IssuedByRussianBanks(x))) -> -TransfersSocialPayments(x))", "all x.((BankOfAmericaPaymentCards(x) & International(x) & IssuedByRussianBanks(x)) -> -TransfersSocialPaymentsInRussia(x))", "all x.((BankOfAmericaPaymentCard(x) & (International(x) | IssuedByRussianBanks(x))) -> -TransferSocialPaymentsInRussia(x))", "all x.((BankOfAmericaPaymentCards(x) & (International(x) | IssuedByRussBanks(x))) -> -TransfersSocialPayments(x))", "all x.((BankOfAmericaPaymentCards(x) & International(x) & IssuedByRussicBanks(x)) -> -TransferSocialPaymentsInRussia(x))", "all x.((BankOfAmericaPaymentCards(x) & (International(x) | IssuedByRussicBanks(x))) -> -TransfersSocialPayments(x))"]}
{"id": "folio_train_1475", "nl": "The Lumina APV is produced by Chevrolet. ", "fol": "ProducedByChevrolet(LuminaAPV)", "prediction": ["all x.(LuminaAPV(x) -> ProducedBy Chevrolet(x))", "all x y.((LuminaAPV(x) & Chevrolet(y)) -> ProducedBy(x,y))", "all x y.((Lumina(x) & Chevrolet(y)) -> ProducedBy(x,y))", "All x.(LuminaAPV(x) -> ProducedBy Chevrolet(x))", "All x y.((LuminaAPV(x) & Chevrolet(y)) -> ProducedBy(x,y))", "all x y z.((LuminaAPV(x) & Chevrolet(y) & Chevrolet(z)) -> ProducedBy(x,y,z))", "all x.(LuminaAPV(x) -> ProducedBy(x, Chevrolet))", "all x y z.((LuminaAPV(x) & Chevrolet(y) & Chevy(z)) -> ProducedBy(x,y,z))", "all x y z.((LuminaAPV(x) & Chevrolet(y) & Vehicle(z)) -> ProducedBy(x,y,z))", "all x y z.((LuminaAPV(x) & Chevrolet(y) & Chevrolet(z)) -> ProducedBy(x,y))", "all x y.((LuminaAPV(x) & Chevrolet(y)) -> ProducedBy(x,y))", "all x y z.((LuminaAPV(x) & Chevrolet(y) & Model(z)) -> ProducedBy(x,y,z))", "all x y.((LuminaAPV(x) & Chevrolet(y)) -> Produces(x,y))", "all x.(LuminaAPV(x) -> ProducedByCorvette(x))", "all x.(LuminaAPV(x) -> ProducedByCarbon(x))", "all x.(LuminaAPV(x) -> ProducedBy Chevrolet(x))"]}
{"id": "folio_train_1476", "nl": "The Astro is a van produced by Chevrolet. ", "fol": "(ProducedByChevrolet(Astro) & IsVan(Astro))", "prediction": ["all x.(Astro(x) -> (Van(x) & ProducedBy(x, Chevrolet)))", "all x.(Astro(x) -> (Van(x) & ProducedBy Chevrolet(x)))", "All x.(Astro(x) -> (Van(x) & ProducedBy(x, Chevrolet)))", "all x y.((Van(x) & Chevrolet(y)) -> ProducedBy(x,y))", "All x.(Astro(x) -> (Van(x) & ProducedBy Chevrolet(x)))", "all x.(Astro(x) -> (Van(x) & ProducedByColorado(x)))", "all x y.((Astro(x) & Chevrolet(y)) -> ProducedBy(x,y))", "all x.(Astro(x) -> (Van(x) & ProducedBy(x, Chevrolet)))", "all x.(Astro(x) -> (Van(x) & ProducedByColombian(x)))", "all x.(Astro(x) -> (Van(x) & ProducedBy Chevrolet(x)))", "all x.(Astro(x) -> (Van(x) & ProducedByCorvette(x)))", "all x.(Astro(x) -> (Van(x) & ProducedByChevrolet(x)))", "all x.(Astro(x) -> (Van(x) & ProducedByCelofax(x)))", "all x.(Astro(x) -> (Van(x) & ChevroletProduced(x)))", "all x.(Astro(x) -> (Van(x) & ProducedBy(x,Cellular)))", "all x.(Astro(x) -> (Van(x) & Chevrolet(x)))"]}
{"id": "folio_train_1477", "nl": "Cars produced by Chevrolet are either cars or vans.", "fol": "all x.(((ProducedByChevrolet(x) -> IsCar(x)) & -IsVan(x)) | (-(ProducedByChevrolet(x) -> IsCar(x)) & IsVan(x)))", "prediction": ["all x.((Car(x) & Chevrolet(x)) -> (Car(x) | Van(x)))", "all x.(Car(x) -> (ProducedBy Chevrolet(x) & (Car(x) | Van(x))))", "all x.((Car(x) & ProducedBy Chevrolet(x)) -> (Car(x) | Van(x)))", "all x y.((Car(x) & Chevrolet(y) & ProducedBy(x,y)) -> (Car(x) | Van(x)))", "all x.((Car(x) & ChevroletProduced(x)) -> (Car(x) | Van(x)))", "all x.((Car(x) & ChevroletProducedBy(x)) -> (Car(x) | Van(x)))", "all x y.((Car(x) & Chevrolet(y)) -> (Car(x) | Van(x)))", "all x.(Car(x) -> (ProducedBy(x, Chevrolet) & (Car(x) | Van(x))))", "all x.(Car(x) -> (Car(x) | Van(x)))", "all x.(Car(x) -> (ProducedByChevrolet(x) | ProducedByChevrolet(x)))", "all x.(Car(x) -> (ProducedBy Chevrolet(x) | ProducedByVan(x)))", "all x.(Car(x) -> (ProducedBy(x,Chevrolet) | ProducedBy(x,Van)))", "all x.(Car(x) -> (ProducedByChevrolet(x) | ProducedByVan(x)))", "all x y.((Car(x) & Chevrolet(y)) -> (Car(x,y) | Van(x,y)))", "all x.(Car(x) -> (ProducedBy(x,Chevy) | ProducedBy(x,Van)))", "all x.(Car(x) -> (ProducedByCorvette(x) | ProducedByCorvette(x)))"]}
{"id": "folio_train_1478", "nl": "The Lumina APV is van.", "fol": "IsVan(LuminaAPV)", "prediction": ["all x.(LuminaAPV(x) -> Van(x))", "All x.(LuminaAPV(x) -> Van(x))", "all x.(LuminaApV(x) -> Van(x))", "all x y.((LuminaAPV(x) & Van(y)) -> Is(x,y))", "ALL x.(LuminaAPV(x) -> Van(x))", "(Van(Lumina) & Van(Lumina))", "all x.(LuminaAPV(x) -> van(x))", "all x y.((Lumina(x) & APV(y)) -> Van(x))", "all x y.((LuminaAPV(x) & Van(y)) -> Has(x,y))", "all x y.((LuminaAPV(x) & Van(y)) -> PoweredBy(x,y))", "all x y.((LuminaAPV(x) & Van(y)) -> LocatedIn(x,y))", "all x y.((LuminaAPV(x) & Van(y)) -> Vehicle(x))", "all x y.((LuminaAPV(x) & Van(y)) -> Van(x))", "all x y.((LuminaAPV(x) & Van(y)) -> AvailableIn(x,y))", "all x.(Lumina(x) -> Van(x))", "all x y.((LuminaAPV(x) & Van(y)) -> -Van(x))"]}
{"id": "folio_train_1479", "nl": "The Lumina APV is either a car or a van.", "fol": "(IsCar(LuminaAPV) | IsVan(LuminaAPV))", "prediction": ["all x.(LuminaAPV(x) -> (Car(x) | Van(x)))", "all x.(LuminaAPV(x) -> (Car(x) | Van(x)))", "all x.(LumenaAPV(x) -> (Car(x) | Van(x)))", "all x.(LuminaApV(x) -> (Car(x) | Van(x)))", "all x y.((LuminaAPV(x) & Car(y)) | Van(y)) -> (Car(x) | Van(x)))", "all x.(LuminaAPV(x) -> (Auto(x) | Van(x)))", "all x y.((LuminaAPV(x) & Car(y)) | Van(y))", "all x y.((LuminaAPV(x) & Car(y)) | Van(x,y))", "all x y.((LuminaAPV(x) & Car(y)) | Van(x,y)) -> (Car(x) | Van(x)))", "all x y.((LuminaAPV(x) & Car(y)) | Van(y)) -> Car(x))", "exists x.(LuminaAPV(x) & (Car(x) | Van(x)))", "all x y.((LuminaAPV(x) & Car(y)) | Van(y)) -> (Car(x,y) | Van(x,y)))", "all x y.((LuminaAPV(x) & Car(y)) | Van(y)) -> (Car(x) | Van(y)))", "all x y.((LuminaAPV(x) & Car(y)) | Van(x,y)) -> Car(x))", "all x.(LuminaAPV(x) -> ((Car(x) | Van(x))))", "All x.(LuminaAPV(x) -> (Car(x) | Van(x)))"]}
{"id": "folio_train_1480", "nl": "The Astro is a van.", "fol": "IsVan(Astro)", "prediction": ["all x.(Astro(x) -> Van(x))", "All x.(Astro(x) -> Van(x))", "all x.(Astro(x) -> Van(x))", "exists x.(Astro(x) & Van(x))", "(Van(Astro) & Van(Astro))", "All x.(Astro(x) -> Van(x))", "all x y.((Astro(x) & Van(y)) -> Is(x,y))", "all x y.((Astro(x) & Van(y)) -> Has(x,y))", "all x y.((Astro(x) & Van(y)) -> LocatedIn(x,y))", "(Van(Astro) & -Van(Astro))", "((Astro(Astro) & Van(Astro)) -> Van(Astro))", "all x.((Astro(x) & Van(x)) -> Is(x,y))", "ALL x.(Astro(x) -> Van(x))", "all x.((Astro(x) & Van(x)) -> HasVan(x))", "all x.((Astro(x) & Van(x)) -> LocatedIn(x,y))", "all x.((Astro(x) & Van(x)) -> Has(x,y))"]}
{"id": "folio_train_1481", "nl": "The Astro is a car.", "fol": "IsCar(Astro)", "prediction": ["all x.(Astro(x) -> Car(x))", "All x.(Astro(x) -> Car(x))", "all x.((Astro(x) & Car(x)) -> Car(x))", "all x y.((Astro(x) & Car(y)) -> Car(x))", "exists x.(Astro(x) & Car(x))", "all x.(Astro(x) -> Car(x))", "All x.((Astro(x) & Car(x)) -> Car(x))", "all x y.((Astro(x) & Car(y)) -> Is(x,y))", "(Car(Astro) & Car(Astro))", "all x.((Astro(x) & Car(x)) -> Is(x,y))", "all x y.((Astro(x) & Car(y)) -> Car(x,y))", "all x.((Astro(x) & Car(x)) -> (Car(x) & Car(x)))", "all x.((Astro(x) & Car(x)) -> Auto(x))", "All x.(Astro(x) -> Car(x))", "all x.((Astro(x) & Car(x)) -> -Car(x))", "all x.((Astro(x) & Car(x)) -> Vehicle(x))"]}
{"id": "folio_train_1482", "nl": "Everyone who works in person is a commuter.", "fol": "all x.(WorksInPerson(x) -> IsCommuter(x))", "prediction": ["all x.(WorksInPerson(x) -> Commuter(x))", "all x.((WorksInPerson(x) & WorksInPerson(x)) -> Commuter(x))", "all x.((WorksInPerson(x) & Person(x)) -> Commuter(x))", "all x.((WorksInPerson(x) & Commuter(x)) -> Commuter(x))", "all x.((WorksInPerson(x) & WorkesInPerson(x)) -> Commuter(x))", "all x.((WorksInPerson(x) & InPerson(x)) -> Commuter(x))", "all x.(WorksInPersonal(x) -> Commuter(x))", "all x.((WorksInPerson(x) & Commuter(x)) -> WorksInPerson(x))", "all x y.((WorksInPerson(x) & WorksInPerson(x)) -> Commuter(y))", "all x y.((WorksInPerson(x) & Person(y)) -> Commuter(x))", "all x.(WorksInPerson(x) -> Companions(x))", "all x.(WorkingInPerson(x) -> Commuter(x))", "all x.((WorksInPerson(x) & WorksInPersonal(x)) -> Commuter(x))", "all x.((WorksInPerson(x) & WorksInPerson(x)) -> Companions(x))", "all x.((WorksInPerson(x) & Commuter(x)) -> Commuter(x))", "all x y.((WorksInPerson(x) & WorksInPerson(y)) -> Commuter(x))"]}
{"id": "folio_train_1483", "nl": "People either work in person or work from home.", "fol": "all x.((WorksInPerson(x) & -WorksFromHome(x)) | (-WorksInPerson(x) & WorksFromHome(x)))", "prediction": ["all x.(Person(x) -> (WorksInPerson(x) | WorksFromHome(x)))", "all x.(Person(x) -> (WorkInPerson(x) | WorkFromHome(x)))", "all x.(Person(x) -> (WorksInPerson(x) | WorkesFromHome(x)))", "exists x.(Person(x) & (WorksInPerson(x) | WorksFromHome(x)))", "all x.((Person(x) & (WorksInPerson(x) | WorksFromHome(x))) -> WorksInPerson(x))", "all x.(Person(x) -> (WorksInPerson(x) | WorkFromHome(x)))", "exists x.(Person(x) & (WorkInPerson(x) | WorkFromHome(x)))", "all x.((Person(x) & (WorkInPerson(x) | WorkFromHome(x))) -> WorksInPerson(x))", "all x y.((Person(x) & Person(y)) -> (WorksIn(x,y) | WorksFromHome(x,y)))", "exists x.(Person(x) & (WorksInPerson(x) | WorkesFromHome(x)))", "all x.(WorksInPerson(x) | WorksFromHome(x))", "all x.((Person(x) & (WorkInPerson(x) | WorkFromHome(x))) -> WorkInPerson(x))", "all x.(People(x) -> (WorkInPerson(x) | WorkFromHome(x)))", "all x.((Person(x) & (WorksInPerson(x) | WorkesFromHome(x))) -> WorksInPerson(x))", "all x.(Person(x) -> (WorksInPerson(x) | WorkedFromHome(x)))", "all x y.((Person(x) & WorkInPerson(x)) | WorkFromHome(y)) -> WorksInPerson(x))"]}
{"id": "folio_train_1484", "nl": "Everyone who works from home has a relaxed schedule.", "fol": "all x.(WorksFromHome(x) -> HasRelaxedSchedule(x))", "prediction": ["all x.(WorksFromHome(x) -> RelaxedSchedule(x))", "all x.((WorksFromHome(x) & RelaxedSchedule(x)) -> WorksFromHome(x))", "all x y.((WorksFromHome(x) & WorkesFromHome(y)) -> RelaxedSchedule(x))", "all x.((WorksFromHome(x)) -> RelaxedSchedule(x))", "all x y.((WorksFromHome(x) & WorkesFromHome(x)) -> RelaxedSchedule(y))", "all x y.((WorksFromHome(x) & WorkesFromHome(y)) -> RelaxedSchedule(x,y))", "all x.((WorksFromHome(x) & RelaxedSchedule(x)) -> RelaxedSchedule(x))", "all x.((WorksFromHome(x) & RelaxedSchedule(x)) -> WorkFromHome(x))", "all x y.((WorksFromHome(x) & WorksFromHome(y)) -> RelaxedSchedule(x))", "all x y.((WorksFromHome(x) & WorksFromHome(x)) -> RelaxedSchedule(y))", "all x y.((WorksFromHome(x) & WorkedFromHome(y)) -> RelaxedSchedule(x))", "all x y.((WorksFromHome(x) & Employee(y)) -> RelaxedSchedule(y))", "all x y.((WorksFromHome(x) & WorksFromHome(y)) -> RelaxedSchedule(x,y))", "all x y.((WorksFromHome(x) & WorkedFromHome(y)) -> RelaxedSchedule(x,y))", "all x y.((WorksFromHome(x) & WorkesFromHome(x)) -> RelaxedSchedule(x))", "all x y.((WorksFromHome(x) & Person(y)) -> RelaxedSchedule(y))"]}
{"id": "folio_train_1485", "nl": "George is either a commuter or has a home office setup.", "fol": "((IsCommuter(George) & -HasHomeOfficeSetup(George)) | (-IsCommuter(George) & HasHomeOfficeSetup(George)))", "prediction": ["all x.(George(x) -> (Commuter(x) | HomeOfficeSetup(x)))", "all x.(George(x) -> (Commuter(x) | HomeOfficeSetup(x)))", "all x.(George(x) -> (Communicator(x) | HomeOfficeSetup(x)))", "all x.(George(x) -> (Commuter(x) | HomeOfficeSetup(x)))", "all x.(George(x) -> (Commuter(x) | HomeOfficeSetup(x)))", "all x.(George(x) -> (Commuter(x) | HasHomeOfficeSetup(x)))", "exists x.(George(x) & (Commuter(x) | HomeOfficeSetup(x)))", "all x.(George(x) -> (Commuter(x) | HomeOfficeSetup(x)))", "all x.(George(x) -> (Commuter(x) | HomeOfficeSetup(x)))", "all x.(George(x) -> (Commuter(x) | HomeOfficeSetup(x)))", "all x.(George(x) -> (Commuter(x) | HasHomeOfficeSetup(x)))", "all x.(Greg(x) -> (Commuter(x) | HomeOfficeSetup(x)))", "all x.((George(x) & Commuter(x)) | HomeOfficeSetup(x))", "all x y.((George(x) & Commuter(x)) | HomeOfficeSetup(y))", "(Commuter(George) | HomeOfficeSetup(George)))", "all x y.((George(x) & Commuter(y)) | HomeOfficeSetup(x))"]}
{"id": "folio_train_1486", "nl": "If George is either a person who works from home or has a home office setup, then George is not a person who works from home and a commuter.", "fol": "(((WorksFromHome(George) & -HasHomeOfficeSetup(George)) | (-WorksFromHome(George) & HasHomeOfficeSetup(George))) -> -(WorksFromHome(George) & IsCommuter(George)))", "prediction": ["all x.((Person(x) & WorksFromHome(x)) | HomeOfficeSetup(x)) -> -WorksFromHome(x) & Commuter(x))", "all x.((Person(x) & WorksFromHome(x)) | HomeOfficeSetup(x)) -> -(Person(x) & WorksFromHome(x) & Commuter(x)))", "all x.((Person(x) & WorksFromHome(x)) | HomeOfficeSetup(x)) -> -(WorksFromHome(x) & Commuter(x)))", "all x.((Person(x) & (WorksFromHome(x) | HomeOfficeSetup(x))) -> -(WorksFromHome(x) & Commuter(x)))", "all x.((George(x) & (WorksFromHome(x) | HomeOfficeSetup(x))) -> -(WorksFromHome(x) & Commuter(x)))", "all x.((Person(x) & WorksFromHome(x)) | HasHomeOfficeSetup(x)) -> -(Person(x) & WorksFromHome(x) & Commuter(x)))", "all x.((Person(x) & (WorksFromHome(x) | HasHomeOfficeSetup(x))) -> -(WorksFromHome(x) & Commuter(x)))", "all x.((Person(x) & WorksFromHome(x)) | HasHomeOfficeSetup(x)) -> -WorksFromHome(x) & Commuter(x))", "all x.((Person(x) & (WorksFromHome(x) | HomeOfficeSetup(x))) -> -WorksFromHome(x) & Commuter(x))", "all x.((George(x) & (WorksFromHome(x) | HomeOfficeSetup(x))) -> -WorksFromHome(x) & Commuter(x))", "all x.((Person(x) & WorksFromHome(x)) | HasHomeOfficeSetup(x)) -> -(WorksFromHome(x) & Commuter(x)))", "all x.((George(x) & (WorksFromHome(x) | HasHomeOfficeSetup(x))) -> -(WorksFromHome(x) & Commuter(x)))", "all x.((George(x) & (WorksFromHome(x) | HomeOfficeSetup(x))) -> -(WorksFromHome(x) & Commuter(x))))", "all x.((Person(x) & (WorksFromHome(x) | HasHomeOfficeSetup(x))) -> -WorksFromHome(x) & Commuter(x))", "all x.((George(x) & (WorksFromHome(x) | HasHomeOfficeSetup(x))) -> -WorksFromHome(x) & Commuter(x))", "all x.((Person(x) & WorksFromHome(x)) | HomeOfficeSetup(x)) -> (-WorksFromHome(x) & Commuter(x)))"]}
{"id": "folio_train_1487", "nl": "George is a person who works from home.", "fol": "WorksFromHome(George)", "prediction": ["all x.(George(x) -> WorksFromHome(x))", "all x.((George(x) & WorksFromHome(x)) -> WorksFromHome(x))", "all x.((Person(x) & WorksFromHome(x)) -> George(x))", "all x.((Person(x) & WorksFromHome(x)) -> GeorgeWorksFromHome(x))", "all x.((George(x) & WorksFromHome(x)) -> Person(x))", "all x y.((George(x) & Person(y)) -> WorksFromHome(x,y))", "all x y.((Person(x) & George(y)) -> WorksFromHome(x,y))", "all x y.((Person(x) & Person(y) & WorksFromHome(x,y)) -> WorksFromHome(x,y))", "all x.(George(x) -> WorksFromHome(x))", "all x.(George(x) -> WorksFromHome(x))", "all x y.((Person(x) & Person(y)) -> WorksFromHome(x,y))", "all x y.((Person(x) & Person(y) & WorksFromHome(x)) -> GeorgeWorksFromHome(x))", "all x y.((Person(x) & Person(y) & WorksFromHome(x,y)) -> WorksFromHome(x))", "all x y.((George(x) & Person(y)) -> WorksFromHome(x))", "all x y.((Person(x) & Person(y) & WorksFromHome(x)) -> WorksFromHome(x))", "all x y.((Person(x) & Person(y) & WorksFromHome(x)) -> GeorgeWorksFromHome(x,y))"]}
{"id": "folio_train_1488", "nl": "If George is not a person who works from home and a person who works in person, then George is neither a commuter nor a person who has a relaxed schedule.", "fol": "(-(WorksFromHome(George) & WorksInPerson(George)) -> (-IsCommuter(George) & -HasRelaxedSchedule(George)))", "prediction": ["all x.((Person(x) & -WorksFromHome(x) & WorksInPerson(x)) -> (-Commuter(x) & -RelaxedSchedule(x)))", "all x.((Person(x) & -WorksFromHome(x) & Person(x) & WorksInPerson(x)) -> (-Commuter(x) & -RelaxedSchedule(x)))", "all x.((George(x) & -WorksFromHome(x) & WorksInPerson(x)) -> (-Commuter(x) & -RelaxedSchedule(x)))", "all x.((Person(x) & -WorksFromHome(x) & WorksInPerson(x)) -> (-Commuter(x) & -RelaxedSchedule(x)))", "all x.((Person(x) & -WorksFromHome(x) & WorksInPerson(x)) -> (-Commuter(x) & -RelaxedSchedule(x)))", "all x.((Person(x) & -WorksFromHome(x) & Person(x) & WorksInPerson(x)) -> (-Commuter(x) & -RelaxedSchedule(x)))", "all x.((Person(x) & -WorksFromHome(x) & WorksInPerson(x)) -> -Commuter(x) & -RelaxedSchedule(x))", "all x.((Person(x) & -WorksFromHome(x) & Person(x) & WorksInPerson(x)) -> -Commuter(x) & -RelaxedSchedule(x))", "all x.((Person(x) & -WorksFromHome(x) & Person(x) & WorksInPerson(x)) -> (-Commuter(x) & -RelaxedSchedule(x)))", "all x.((George(x) & -WorksFromHome(x) & WorksInPerson(x)) -> (-Commuter(x) & -RelaxedSchedule(x)))", "all x.((George(x) & -WorksFromHome(x) & WorksInPerson(x)) -> -Commuter(x) & -RelaxedSchedule(x))", "all x.((Person(x) & -WorksFromHome(x) & WorksInPerson(x)) -> (-Communicator(x) & -RelaxedSchedule(x)))", "all x.((Person(x) & -WorksFromHome(x) & PersonWorksInPerson(x)) -> (-Commuter(x) & -RelaxedSchedule(x)))", "all x.((George(x) & -WorksFromHome(x) & WorksInPerson(x)) -> (-Commuter(x) & -RelaxedSchedule(x)))", "all x.((Person(x) & -WorksFromHome(x) & WorksInPerson(x)) -> -Commuter(x) & -RelaxedSchedule(x))", "all x.((Person(x) & -WorksFromHome(x) & WorksInPerson(x)) -> (-Commuter(x) & -RelaxatedSchedule(x)))"]}
{"id": "folio_train_1489", "nl": "If George is either a person who has a home office setup and a person who works in person, or neither a person who has a home office setup nor a person who works in person, then George is either a person who works from home or a person who has a relaxed schedule.", "fol": "(((HasHomeOfficeSetup(George) & WorksInPerson(George)) | (-HasHomeOfficeSetup(George) & -WorksInPerson(George))) -> (WorksFromHome(George) | HasRelaxedSchedule(George)))", "prediction": ["all x.((Person(x) & (HasHomeOfficeSetup(x) | WorksInPerson(x))) | (-HasHomeOfficeSetup(x) & WorksInPerson(x)))) -> (WorksFromHome(x) | RelaxedSchedule(x)))", "all x.((Person(x) & (HasHomeOfficeSetup(x) | WorksInPerson(x))) | (-HasHomeOfficeSetup(x) & WorksInPerson(x))))", "all x.((Person(x) & (HasHomeOfficeSetup(x) & WorksInPerson(x)) | (-HasHomeOfficeSetup(x) & WorksInPerson(x)))) -> (WorksFromHome(x) | RelaxedSchedule(x)))", "all x.((Person(x) & (HomeOfficeSetup(x) | WorksInPerson(x))) | (-HomeOfficeSetup(x) & WorksInPerson(x)))) -> (WorksFromHome(x) | RelaxedSchedule(x)))", "all x.((Person(x) & (HomeOfficeSetup(x) | PersonWorksInPerson(x))) | (-HomeOfficeSetup(x) & PersonWorksInPerson(x)))) -> (WorksFromHome(x) | RelaxedSchedule(x)))", "all x.((Person(x) & (HomeOfficeSetup(x) & WorksInPerson(x)) | (-HomeOfficeSetup(x) & WorksInPerson(x)))) -> (WorksFromHome(x) | RelaxedSchedule(x)))", "all x.((Person(x) & (HomeOfficeSetup(x) | PersonWorksInPerson(x))) & -(HomeOfficeSetup(x) & PersonWorksInPerson(x))) -> (WorksFromHome(x) | RelaxedSchedule(x)))", "all x.((Person(x) & (HomeOfficeSetup(x) | PersonWorksInPerson(x))) | (-HomeOfficeSetup(x) & PersonWorksInPerson(x))))", "all x.((Person(x) & (HomeOfficeSetup(x) | PersonWorkingInPerson(x))) | (-HomeOfficeSetup(x) & PersonWorkingInPerson(x)))) -> (WorksFromHome(x) | RelaxedSchedule(x)))", "all x.((Person(x) & (HasHomeOfficeSetup(x) | WorksInPerson(x))) | -(HasHomeOfficeSetup(x) & WorksInPerson(x)))) -> (WorksFromHome(x) | RelaxedSchedule(x)))", "all x.((Person(x) & (HomeOfficeSetup(x) | PersonWorksInPerson(x))) -> (WorksFromHome(x) | RelaxedSchedule(x)))", "all x.((Person(x) & (HomeOfficeSetup(x) | WorksInPerson(x))) | (-HomeOfficeSetup(x) & WorksInPerson(x))))", "all x.((Person(x) & (HomeOfficeSetup(x) | WorksInPerson(x))) | (-HasHomeOfficeSetup(x) & WorksInPerson(x)))) -> (WorksFromHome(x) | RelaxedSchedule(x)))", "all x.((Person(x) & (HomeOfficeSetup(x) | PersonWhoWorksInPerson(x))) | (-HomeOfficeSetup(x) & PersonWhoWorksInPerson(x)))) -> (WorksFromHome(x) | RelaxedSchedule(x)))", "all x.((Person(x) & (HomeOfficeSetup(x) | WorksInPerson(x))) | (-(HomeOfficeSetup(x) & WorksInPerson(x))))) -> (WorksFromHome(x) | RelaxedSchedule(x))))", "all x.((Person(x) & (HomeOfficeSetup(x) | PersonWorkingInPerson(x))) | (-HomeOfficeSetup(x) & PersonWorkingInPerson(x))))"]}
{"id": "folio_train_1490", "nl": "Jason Kramer is an American music supervisor.", "fol": "(IsMusicSupervisor(JasonKramer) & IsAmerican(JasonKramer))", "prediction": ["JasonKraker(x) & AmericanMusicSupervisor(x))", "(AmericanMusicSupervisor(JasonKramer) & FoundedIn(JasonKramer,JasonKramer))", "Jason Kramer (AmericanMusicSupervisor)", "(AmericanMusicSupervisor(JasonKramer) & FoundedIn(JasonKramer,Jason))", "(AmericanMusicSupervisor(JasonKarmer) & BornIn(JasonKarmer))", "(AmericanMusicSupervisor(JasonKramer) & BornIn(JasonKramer))", "Jason Kramer (AmericanMusicSupervisor(x))", "(AmericanMusicSupervisor(JasonKramer) & FoundedIn(JasonKramer) & FoundedIn(JasonKramer))", "(AmericanMusicSupervisor(JasonKarmer) & FoundedIn(JasonKarmer,JasonKarmer))", "(AmericanMusicSupervisor(JasonKarmer) & FoundedIn(JasonKarmer) & FoundedIn(JasonKarmer,JasonKarmer))", "(AmericanMusicSupervisor(JasonKarmer) & FoundedIn(JasonKarmer) & FoundedIn(JasonKarmer))", "(AmericanMusicSupervisor(JasonKarmer) & FoundedIn(JasonKarmer,Jason))", "(AmericanMusicSupervisor(JasonKramer) & FoundedIn(JasonKramer) & LocatedIn(JasonKramer))", "(AmericanMusicSupervisor(JasonKarmer) & BornIn(JasonKarmer,Jason))", "(AmericanMusicSupervisor(JasonKramer) & FoundedIn(JasonKramer,JasonKramer,JasonKramer))", "(AmericanMusicSupervisor(JasonKraker) & FoundedIn(JasonKraker,Jason))"]}
{"id": "folio_train_1491", "nl": "Some American radio personalities are also music supervisors. ", "fol": "exists x.(IsAmerican(x) & IsMusicSupervisor(x) & IsRadioPersonality(x))", "prediction": ["exists x.(AmericanRadioPerson(x) & MusicSupervisor(x))", "exists x.(RadioPerson(x) & MusicSupervisor(x))", "exists x.(AmericanRadioPerson(x) & MusicSupervisor(x))", "exists x.(AmericanRadioPerformance(x) & MusicSupervisor(x))", "exists x.(AmericanRadioPersonal(x) & MusicSupervisor(x))", "exists x.(AmericanRadioPerson(x) & MusicSupervisor(x))", "exists x.(AmericanRadioPopularity(x) & MusicSupervisor(x))", "exists x.(RadioPerson(x) & MusicSupervisor(x))", "exists x.(AmericanRadioPerson(x) & MusicSuperviser(x))", "exists x.(RadioPersonal(x) & MusicSupervisor(x))", "exists x.(AmeridianRadioPerson(x) & MusicSupervisor(x))", "exists x.((AmericanRadioPerson(x) & MusicSupervisor(x)) -> MusicPerson(x))", "exists x.(AmericanRadioPerson(x) & MusicSupervisor(x))", "exists x.(RadioPerformance(x) & MusicSupervisor(x))", "exists x.(AmericanRadioPsychologist(x) & MusicSupervisor(x))", "exists x.(RadioPopularity(x) & MusicSupervisor(x))"]}
{"id": "folio_train_1492", "nl": "Anyone who hosts a show on a public radio station is a radio personality.", "fol": "all x.(HostsShowOnPublicRadio(x) -> IsRadioPersonality(x))", "prediction": ["all x.((HostsShow(x) & PublicRadioStation(x)) -> RadioPerson(x))", "all x.((HostsShow(x) & OnPublicRadioStation(x)) -> RadioPerson(x))", "all x.((HostsShowOnPublicRadioStation(x) & PublicRadioStation(x)) -> RadioPerson(x))", "all x.((HostsShow(x) & PublicRadioStation(x)) -> RadioPersonal(x))", "all x.((HostsShowOnPublicRadio(x) & PublicRadioStation(x)) -> RadioPerson(x))", "all x.(HostsShowOnPublicRadioStation(x) -> RadioPerson(x))", "all x.((HostsShow(x) & PublicRadioStation(x)) -> RadioPopularity(x))", "all x.((HostsShowOnPublicRadioStation(x) & OnPublicRadioStation(x)) -> RadioPerson(x))", "all x.((HostsShowOnPublicRadio(x) & PublicRadio(x)) -> RadioPerson(x))", "all x.((HostsShowOnPublicRadio(x) & OnPublicRadio(x)) -> RadioPerson(x))", "all x.((HostsShow(x) & PublicRadioStation(x)) -> RadioPerson(x))", "all x y.((HostsShow(x) & PublicRadioStation(y) & On(x,y)) -> RadioPerson(x))", "all x.((HostsShowOnPublicRadioStation(x) & PublicRadioStation(x)) -> RadioPersonal(x))", "all x.((HostsShow(x) & OnPublicRadioStation(x)) -> RadioPersonal(x))", "all x.((HostsShow(x) & OnPublicRadio(x)) -> RadioPerson(x))", "all x.((HostsShowOnPublicRadioStation(x) & PublicRadioStation(x)) -> RadioPopularity(x))"]}
{"id": "folio_train_1493", "nl": "Joe Rogan is a radio personality.", "fol": "IsRadioPersonality(JoeRogan)", "prediction": ["all x.(RadioPerson(x) -> JoeRogan(x))", "all x.(Rogan(x) -> RadioPerson(x))", "all x.(JoeRogan(x) -> RadioPerson(x))", "(RadioPerson(JoeRogan) & RadioPerson(JoeRogan))", "all x.((JoeRogan(x) & RadioPerson(x)) -> RadioPerson(x))", "all x.((RadioPerson(x) & JoeRogan(x)) -> RadioPerson(x))", "all x.(Rogan(x) -> RadioPersonal(x))", "all x.(Rogan(x) -> RadioPopularity(x))", "all x.(Rogan(x) -> RadioPersonalist(x))", "all x.(RadioPersonal(x) -> JoeRogan(x))", "all x.(RadioPopularity(x) -> JoeRogan(x))", "all x.(JoeRogan(x) -> RadioPopularity(x))", "(RadioPerson(Joe Rogan) & RadioPerson(Joe Rogan))", "all x.(JoeRogan(x) -> RadioPersonal(x))", "all x.(RadioPerson(x) -> JoeRogan(x))", "exists x.(RadioPerson(x) & JoeRogan(x))"]}
{"id": "folio_train_1494", "nl": "Jason Kramer hosted a show on a public radio station.", "fol": "HostsShowOnPublicRadio(JasonKramer)", "prediction": ["all x y z.((JasonKarmer(x) & Show(y) & PublicRadioStation(z)) -> HostedOn(x,y,z))", "all x y.((JasonKarmer(x) & PublicRadioStation(y)) -> HostedShow(x,y))", "all x y z.((JasonKraker(x) & Show(y) & PublicRadioStation(z)) -> HostedOn(x,y,z))", "all x y z.((JasonKramer(x) & Show(y) & PublicRadioStation(z)) -> HostedOn(x,y,z))", "all x y.((JasonKraker(x) & PublicRadioStation(y)) -> HostedShow(x,y))", "all x y.((JasonKramer(x) & PublicRadioStation(y)) -> HostedShow(x,y))", "all x y z.((JasonKarmer(x) & Show(y) & RadioStation(z)) -> HostedOn(x,y,z))", "all x y.((Show(x) & PublicRadioStation(y)) -> HostedBy(x,y))", "all x y.((JasonKarmer(x) & PublicRadioStation(y)) -> HostsShow(x,y))", "all x y z.((JasonKarmer(x) & Show(y) & PublicRadioStation(z)) -> HostsOn(x,y,z))", "all x y.((JasonKarmer(x) & PublicRadioStation(y)) -> HostedShowOn(x,y))", "all x y z.((Show(x) & PublicRadioStation(y) & JasonKarmer(z)) -> HostedOn(x,y,z))", "all x y.((Show(x) & PublicRadioStation(y) & JasonKarmer(x)) -> HostedOn(x,y))", "all x y.((JasonKraker(x) & PublicRadioStation(y)) -> HostsShow(x,y))", "all x y z.((JasonKramer(x) & Show(y) & PublicRadioStation(z)) -> HostsOn(x,y,z))", "all x y.((JasonKramer(x) & PublicRadioStation(y)) -> HostsShow(x,y))"]}
{"id": "folio_train_1495", "nl": "Joe Rogan is American.", "fol": "IsAmerican(JoeRogan)", "prediction": ["(American(JoeRogan) & American(JoeRogan))", "All x.(JoeRogan(x) -> American(x))", "all x.(JoeRogan(x) -> American(x))", "(Asian(JoeRogan) & American(JoeRogan))", "all x.((JoeRogan(x) & American(x)) -> Is(x,y))", "all x.(Rogan(x) -> American(x))", "all x.((JoeRogan(x) & American(x)) -> American(x))", "(American(JoeRogan) & American(JoeRogan))", "(American(Joe Rogan) & American(Joe Rogan))", "All x.(Rogan(x) -> American(x))", "all x.((JoeRogan(x) & American(x)) -> (American(x) | American(x)))", "All x.((JoeRogan(x) & American(x)) -> Is(x,y))", "all x.((JoeRogan(x) & American(x)) -> (American(x) & American(x)))", "All x.((JoeRogan(x) & American(x)) -> American(x))", "all x.(American(x) -> JoeRogan(x))", "all x.((JoeRogan(x) & American(x)) -> -American(x))"]}
{"id": "folio_train_1496", "nl": "Jason Kramer is a music supervisor.", "fol": "IsMusicSupervisor(JasonKramer)", "prediction": ["all x.(MusicSupervisor(x) -> JasonKarmer(x))", "all x.(MusicSupervisor(x) -> JasonKraker(x))", "all x.(MusicSupervisor(x) -> JasonKramer(x))", "all x.((JasonKarmer(x) & MusicSupervisor(x)) -> Supervises(x))", "all x.((JasonKarmer(x) & MusicSupervisor(x)) -> Oversees(x))", "all x.(MusicSupervisor(x) -> JasonKremer(x))", "all x.((JasonKraker(x) & MusicSupervisor(x)) -> Supervises(x))", "all x.((JasonKramer(x) & MusicSupervisor(x)) -> Supervises(x))", "all x.((MusicSupervisor(x) & JasonKarmer(x)) -> Supervises(x))", "all x.((JasonKraker(x) & MusicSupervisor(x)) -> Oversees(x))", "all x.((JasonKarmer(x) & MusicSupervisor(x)) -> WorksOn(x,y))", "(MusicSupervisor(JasonKarmer) & -MusicSupervisor(JasonKarmer))", "all x.((JasonKarmer(x) & MusicSupervisor(x)) -> WorksAt(x,y))", "all x.((JasonKarmer(x) & MusicSupervisor(x)) -> WorksWith(x,y))", "all x.((JasonKramer(x) & MusicSupervisor(x)) -> Oversees(x))", "all x.((MusicSupervisor(x) & JasonKarmer(x)) -> Oversees(x))"]}
{"id": "folio_train_1497", "nl": "Jason Kramer is a radio personality.", "fol": "IsRadioPersonality(JasonKramer)", "prediction": ["all x.((RadioPerson(x) & JasonKarmer(x)) -> RadioPerson(x))", "all x.(RadioPerson(x) -> JasonKarmer(x))", "all x.(RadioPerson(x) -> JasonKramer(x))", "all x.((RadioPerson(x) & JasonKramer(x)) -> RadioPerson(x))", "all x.((RadioPerson(x) & JasonKraker(x)) -> RadioPerson(x))", "all x.(RadioPerson(x) -> JasonKraker(x))", "all x.((JasonKarmer(x) & RadioPerson(x)) -> RadioPerson(x))", "all x.(RadioPerson(x) -> JasonKremer(x))", "all x.(JasonKarmer(x) -> RadioPerson(x))", "(RadioPerson(JasonKarmer) & RadioPerson(JasonKarmer))", "all x.(JasonKramer(x) -> RadioPerson(x))", "all x.(JasonKremer(x) -> RadioPerson(x))", "all x.(JasonKraker(x) -> RadioPerson(x))", "all x.((RadioPerson(x) & JasonKarmer(x)) -> RadioPopularity(x))", "all x.(RadioPersonal(x) -> JasonKarmer(x))", "all x.((RadioPerson(x) & JasonKarmer(x)) -> RadioPersonal(x))"]}
{"id": "folio_train_1498", "nl": "No coffee sold in Walmart is produced in France. ", "fol": "all x.(SoldInWalmart(x) -> -ProducedInFrance(x))", "prediction": ["all x.((Coffee(x) & SoldInWalmart(x)) -> -ProducedInFrance(x))", "-exists x.(Coffee(x) & SoldInWalmart(x) & ProducedInFrance(x))", "-exists x.((Coffee(x) & SoldInWalmart(x)) -> ProducedInFrance(x))", "-exists x.((Coffee(x) & SoldInWalmart(x)) & ProducedInFrance(x))", "-exists x.(Coffee(x) & SoldInWallmart(x) & ProducedInFrance(x))", "-all x.((Coffee(x) & SoldInWalmart(x)) -> ProducedInFrance(x))", "all x.((Coffee(x) & SoldInWallmart(x)) -> -ProducedInFrance(x))", "-exists x.(Coffee(x) & SoldInWalmart(x))", "-exists x.((Coffee(x) & SoldInWallmart(x)) -> ProducedInFrance(x))", "-exists x.(Coffee(x) & SoldIn(x,Walmart) & ProducedIn(x,France))", "-exists x.(Coffee(x) & SoldInWalmart(x) & MadeInFrance(x))", "-exists x.(Coffee(x) & SoldInWallpaper(x) & ProducedInFrance(x))", "-exists x.((Coffee(x) & SoldInWallmart(x)) & ProducedInFrance(x))", "(-exists x.(Coffee(x) & SoldInWalmart(x)) & -ProducedInFrance(x))", "-exists x.(FrenchCoffee(x) & SoldInWalmart(x))", "-exists x.(France(x) & Coffee(x) & SoldInWalmart(x))"]}
{"id": "folio_train_1499", "nl": "All coffee supplied by the company is sold in Walmart. ", "fol": "all x.(SuppliedByCompany(x) -> SoldInWalmart(x))", "prediction": ["all x.((Coffee(x) & SuppliedByCompany(x)) -> SoldInWalmart(x))", "all x.((Coffee(x) & SupplyedByCompany(x)) -> SoldInWalmart(x))", "all x.((Coffee(x) & SuppliedByCompany(x)) -> SoldInWallmart(x))", "all x.((Coffee(x) & SupplyedByCompany(x)) -> SoldInWallmart(x))", "all x.((Coffee(x) & ProvidedByCompany(x)) -> SoldInWalmart(x))", "all x y.((Coffee(x) & Company(y)) -> SoldInWalmart(x,y))", "all x.((Coffee(x) & SuppliedByCompany(x)) -> SoldInWallpaper(x))", "all x y.((Coffee(x) & Company(y) & SupplyedBy(x,y)) -> SoldInWalmart(x))", "all x y.((Coffee(x) & Company(y) & SuppliedBy(x,y)) -> SoldInWalmart(x))", "all x.((Coffee(x) & ProvidedByCompany(x)) -> SoldInWallmart(x))", "all x.((Caffeine(x) & SuppliedByCompany(x)) -> SoldInWalmart(x))", "all x.((Coffee(x) & SupplyedByCompany(x)) -> SoldInWallpaper(x))", "all x y.((Coffee(x) & Company(y)) -> SoldInWallmart(x,y))", "all x y.((Coffee(x) & Company(y) & SuppliedBy(x,y)) -> SoldInWallmart(x))", "all x y.((Coffee(x) & Company(y) & SupplyedBy(x,y)) -> SoldInWallmart(x))", "all x.(Coffee(x) -> SoldInWalmart(x))"]}
{"id": "folio_train_1500", "nl": "All coffee produced in Columbia is produced in France. ", "fol": "all x.(ProducedInColumbia(x) -> ProducedInFrance(x))", "prediction": ["all x.((Coffee(x) & ProducedInColumbia(x)) -> ProducedInFrance(x))", "all x.(Coffee(x) -> ProducedInColumbia(x))", "all x.(Coffee(x) & ProducedInColumbia(x) -> ProducedInFrance(x))", "all x.((Coffee(x) & ProducedInColumbus(x)) -> ProducedInFrance(x))", "all x.((Caffeine(x) & ProducedInColumbia(x)) -> ProducedInFrance(x))", "all x.(ColumbusCoffee(x) -> ProducedInFrance(x))", "all x y.((Coffee(x) & Columbia(y)) -> ProducedInFrance(x,y))", "all x.(ColumbiaCoffee(x) -> ProducedInFrance(x))", "all x.(Coffee(x) -> ProducedInColumbus(x))", "all x.(CoffeeProducedInColumbia(x) -> ProducedInFrance(x))", "all x.(Caffeine(x) -> ProducedInColumbia(x))", "all x y.((Coffee(x) & ProducedInColumbia(x,y)) -> ProducedInFrance(x,y))", "all x y.((Coffee(x) & Columbia(y)) -> ProducedIn(x,y))", "all x y.((Coffee(x) & ProducedInColumbia(x,y)) -> ProducedInFrance(x))", "all x y.((Coffee(x) & ProducedInColumbia(x) & France(y)) -> ProducedIn(x,y))", "all x.(ProducedInColumbia(x) -> ProducedInFrance(x))"]}
{"id": "folio_train_1501", "nl": "All coffee favored by local residents is coffee produced in Columbia. ", "fol": "all x.(FavoredByLocalResidents(x) -> ProducedInColumbia(x))", "prediction": ["all x.((Coffee(x) & FavoredByLocalResidents(x)) -> ProducedInColumbia(x))", "all x.((Coffee(x) & FavoredByLocalResidents(x)) -> CoffeeProducedInColumbia(x))", "all x.((Caffeine(x) & FavoredByLocalResidents(x)) -> ProducedInColumbia(x))", "all x.((Coffee(x) & FavoredByLocalResidents(x)) -> ProducedInColumbus(x))", "all x y.((Coffee(x) & LocalResident(y) & FavoredBy(x,y)) -> ProducedInColumbia(x))", "all x y.((Coffee(x) & FavoredByLocalResidents(x) & Columbia(y)) -> ProducedIn(x,y))", "all x.((Caffeine(x) & FavoredByLocalResidents(x)) -> CoffeeProducedInColumbia(x))", "all x.((CoffeeProducedInColumbia(x) & FavoredByLocalResidents(x)) -> CoffeeProducedInColumbia(x))", "all x y.((Coffee(x) & FavoredByLocalResidents(x)) -> ProducedInColumbia(y))", "all x y.((Coffee(x) & FavoredByLocalResidents(x) & ProducedInColumbia(y)) -> CoffeeProducedInColumbia(x))", "all x.((Coffee(x) & FavoredByLocalResidents(x)) -> ColumbiaCoffee(x))", "all x y.((Coffee(x) & FavoredByLocalResidents(x) & ProducedInColumbia(y)) -> FavoredBy(x,y))", "all x.((Coffee(x) & FavoredByLocalResidents(x)) -> CoffeeProducedInColumbus(x))", "all x.((Cake(x) & FavoredByLocalResidents(x)) -> ProducedInColumbia(x))", "all x.((Coffee(x) & FavoredByLocalResidents(x)) -> ColumbiaProduced(x))", "all x y.((Coffee(x) & FavoredByLocalResidents(x)) -> ProducedInColumbia(x))"]}
{"id": "folio_train_1502", "nl": "All coffee with high prices is favored by local residents. ", "fol": "all x.(HighPriceCoffee(x) -> FavoredByLocalResidents(x))", "prediction": ["all x.((Coffee(x) & HighPrices(x)) -> FavoredByLocalResidents(x))", "all x.((Coffee(x) & HighPrices(x)) -> FavoredByLocalResidents(x))", "all x.((Coffee(x) & HighPrice(x)) -> FavoredByLocalResidents(x))", "all x.((Caffeine(x) & HighPrices(x)) -> FavoredByLocalResidents(x))", "all x.((Caffeine(x) & HighPrices(x)) -> FavoredByLocalResidents(x))", "all x.((Cake(x) & HighPrices(x)) -> FavoredByLocalResidents(x))", "all x.(HighPriceCoffee(x) -> FavoredByLocalResidents(x))", "all x y.((Coffee(x) & HighPrices(x)) -> FavoredByLocalResidents(y))", "all x.((Coffee(x) & HighPrices(x)) -> FavoredByResidents(x))", "all x.((Cake(x) & HighPrices(x)) -> FavoredByLocalResidents(x))", "all x y.((Coffee(x) & HighPrices(x) & LocalResident(y)) -> FavoredBy(x,y))", "all x.((Coffee(x) & HighPrices(x)) -> FavoredByResidents(x))", "all x.((Caffee(x) & HighPrices(x)) -> FavoredByLocalResidents(x))", "all x y.((Coffee(x) & HighPrices(x)) -> FavoredByLocalResidents(y))", "all x.((Cafe(x) & HighPrices(x)) -> FavoredByLocalResidents(x))", "all x.((Coffee(x) & HighPrices(x)) -> FavoriteByLocalResidents(x))"]}
{"id": "folio_train_1503", "nl": "Civet Coffee is not produced in Columbia and is cheap.", "fol": "-(ProducedInColumbia(Civetcoffee) & HighPriceCoffee(Civetcoffee))", "prediction": ["all x.(CivetCoffee(x) -> (-ProducedInColumbia(x) & Cheap(x)))", "(-ProducedInColumbia(CivetCoffee) & Cheap(CivetCoffee))", "all x y.((CivetCoffee(x) & Columbia(y)) -> (-ProducedIn(x,y) & Cheap(x)))", "all x.(CivetCoffee(x) -> (-ProducedInColumbia(x) & Cheap(x)))", "all x.(CivetCoffee(x) -> (-ProducedInColumbus(x) & Cheap(x)))", "All x.(CivetCoffee(x) -> (-ProducedInColumbia(x) & Cheap(x)))", "all x y.((CivetCoffee(x) & Columbia(y)) -> (-ProducedIn(x,y) & Cheap(x,y)))", "exists x.(CivetCoffee(x) & -ProducedInColumbia(x) & Cheap(x))", "all x.(CivetCoffee(x) -> (-producedInColumbia(x) & Cheap(x)))", "all x.(CivetCaffeine(x) -> (-ProducedInColumbia(x) & Cheap(x)))", "all x.(CivetCoffee(x) -> -ProducedInColumbia(x) & Cheap(x))", "all x.(CivetCoffee(x) -> (-ProducedInColorado(x) & Cheap(x)))", "(all x.(CivetCoffee(x) -> -ProducedInColumbia(x)) & Cheap(x))", "all x y.((CivetCoffee(x) & Columbia(y)) -> (-ProducedIn(x,y) & Cheap(y)))", "(-ProducedInColumbia(civetCoffee) & Cheap(civetCoffee))", "(-ProducedInColumbus(CivetCoffee) & Cheap(CivetCoffee))"]}
{"id": "folio_train_1504", "nl": "Jamaica Blue is sold in Walmart or favored by local residents.", "fol": "(SoldInWalmart(Jamaicablue) | FavoredByLocalResidents(Jamaicablue))", "prediction": ["all x.(JamaicaBlue(x) -> (SoldInWalmart(x) | FavoredByLocalResidents(x)))", "all x.(JamaicaBlue(x) -> (SoldInWalmart(x) | FavoredByLocalResidents(x)))", "all x.(JamaicaBlue(x) -> (SoldInWallmart(x) | FavoredByLocalResidents(x)))", "all x.(JamaicaBlue(x) -> (SoldIn(x,Walmart) | FavoredByLocalResidents(x)))", "all x.(JamaicaBlue(x) -> (SoldIn(x,Walmart) | FavoredBy(x,LocalResidents)))", "all x y.((JamaicaBlue(x) & Walmart(y)) -> (SoldIn(x,y) | FavoredBy(x,y)))", "all x.(JamaicaBlue(x) -> (SoldInWallpaper(x) | FavoredByLocalResidents(x)))", "all x y.((JamaicaBlue(x) & Walmart(y)) -> (SoldIn(x,y) | FavoredByLocalResidents(x,y)))", "all x y.((JamaicaBlue(x) & Walmart(y)) -> (SoldIn(x,y) | FavoredByLocalResidents(x)))", "All x.(JamaicaBlue(x) -> (SoldInWalmart(x) | FavoredByLocalResidents(x)))", "all x y z.((JamaicaBlue(x) & Walmart(y) & LocalResident(z)) -> (SoldIn(x,y) | FavoredBy(x,z)))", "all x.(JamaicaBlue(x) -> (SoldInWalmart(x) | FavoriteByLocalResidents(x)))", "all x y.((JamaicaBlue(x) & Walmart(y)) -> (SoldIn(x,y) | FavoredByResidents(x,y)))", "all x.(JamaicaBlue(x) -> ((SoldInWalmart(x) | FavoredByLocalResidents(x))))", "all x.(JamaicaBlood(x) -> (SoldInWalmart(x) | FavoredByLocalResidents(x)))", "all x.(JamaicaBlue(x) -> (SoldInWalmart(x) | FavoredByResidents(x)))"]}
{"id": "folio_train_1505", "nl": "Civet Coffee is produced in France.", "fol": "ProducedInFrance(Civetcoffee)", "prediction": ["all x.(CivetCoffee(x) -> ProducedInFrance(x))", "all x y.((CivetCoffee(x) & France(y)) -> ProducedIn(x,y))", "All x.(CivetCoffee(x) -> ProducedInFrance(x))", "all x.(CivetCoffee(x) -> ProducedIn(x,France))", "All x y.((CivetCoffee(x) & France(y)) -> ProducedIn(x,y))", "all x y z.((CivetCoffee(x) & France(y) & France(z)) -> ProducedIn(x,y,z))", "all x.(CivetCoffee(x) -> (ProducedInFrance(x) & ProducedInFrance(x)))", "all x.(CivetCoffee(x) -> ProducedInFrance(x))", "All x.(CivetCoffee(x) -> ProducedIn(x,France))", "all x y z.((CivetCoffee(x) & France(y) & Coffee(z)) -> ProducedIn(x,y,z))", "all x y z.((CivetCoffee(x) & France(y) & Product(z)) -> ProducedIn(x,y,z))", "all x y z.((CivetCoffee(x) & France(y) & Coffee(z)) -> ProducedIn(x,z))", "all x.(CivetCoffee(x) -> (ProducedIn(x,France) & ProducedIn(x,France)))", "exists x.(CivetCoffee(x) & ProducedIn(x,France))", "all x.(CivetCoffee(x) -> (ProducedInFrance(x) & MadeInFrance(x)))", "all x.(CivetCaffeine(x) -> ProducedInFrance(x))"]}
{"id": "folio_train_1506", "nl": "Civet Coffee is not produced in France.", "fol": "-ProducedInFrance(Civetcoffee)", "prediction": ["all x.(CivetCoffee(x) -> -ProducedInFrance(x))", "All x.(CivetCoffee(x) -> -ProducedInFrance(x))", "all x.(CivetCoffee(x) -> -ProducedIn(x,France))", "(-ProducedInFrance(CivetCoffee))", "(ProducedInFrance(CivetCoffee) & -ProducedInFrance(CivetCoffee))", "CivetCoffee(c) & -ProducedInFrance(c))", "CivetCoffee(C) & -ProducedInFrance(CivetCoffee))", "exists x.(CivetCoffee(x) & -ProducedInFrance(x))", "CivetCoffee(C) & -ProducedInFrance(CivetCoffee)", "exists x.(CivetCoffee(x) & -ProducedIn(x,France))", "all x.(CivetCoffee(x) -> -(ProducedInFrance(x) | ProducedInFrance(x)))", "CivetCoffee(c) -> -ProducedInFrance(c))", "All x.(CivetCoffee(x) -> -ProducedIn(x,France))", "-ProducedInFrance(CivetCoffee)", "all x.(CivetCoffee(x) -> -ProducedInFrance(x))", "all x.(CivetCoffee(x) -> -(ProducedInFrance(x) & ProducedInFrance(x)))"]}
{"id": "folio_train_1507", "nl": "Jamaica Blue is expensive and supplied by the company.", "fol": "(HighPriceCoffee(Jamaicablue) & SuppliedByCompany(Jamaicablue))", "prediction": ["all x.(JamaicaBlue(x) -> (Expensive(x) & SuppliedByCompany(x)))", "all x.(JamaicaBlue(x) -> (Expensive(x) & SupplyedByCompany(x)))", "all x y.((JamaicaBlue(x) & Company(y)) -> (Expensive(x) & SupplyedBy(x,y)))", "all x y.((JamaicaBlue(x) & Company(y)) -> (Expensive(x) & SuppliedBy(x,y)))", "all x.(JamaicaBlue(x) -> (Expensive(x) & SupplyedBy(x,JamaicaBlue)))", "all x y.((JamaicaBlue(x) & Company(y)) -> (Expensive(x,y) & SupplyedBy(x,y)))", "all x.(JamaicaBlue(x) -> (Expensive(x) & SuppliedBy(x)))", "all x.(JamaicaBlue(x) -> (Expensive(x) & SupplyedBy(x)))", "all x y.((JamaicaBlue(x) & Company(y)) -> (Expensive(x,y) & SuppliedBy(x,y)))", "all x.(JamaicaBlue(x) -> (Expensive(x) & ProvidedByCompany(x)))", "all x.(JamaicaBlue(x) -> (Expensive(x) & SoldByCompany(x)))", "all x.(JamaicaBlue(x) -> (Expensive(x) & SupplyedBy(x,y)))", "All x.(JamaicaBlue(x) -> (Expensive(x) & SuppliedByCompany(x)))", "all x.(JamaicaBlue(x) -> (Expensive(x) & suppliedByCompany(x)))", "All x.(JamaicaBlue(x) -> (Expensive(x) & SupplyedByCompany(x)))", "all x.(JamaicaBlue(x) -> (Expensive(x) & SuppliedByCompany(x)))"]}
{"id": "folio_train_1508", "nl": "Jamaica Blue is not expensive and is not supplied by the company.", "fol": "(-HighPriceCoffee(Jamaicablue) & -SuppliedByCompany(Jamaicablue))", "prediction": ["all x.(JamaicaBlue(x) -> (-Expensive(x) & -SuppliedByCompany(x)))", "all x.(JamaicaBlue(x) -> (-Expensive(x) & -SupportedByCompany(x)))", "all x y.((JamaicaBlue(x) & Company(y)) -> (-Expensive(x) & -SuppliedBy(x,y)))", "all x.(JamaicaBlue(x) -> (-Expectious(x) & -SuppliedByCompany(x)))", "all x.(JamaicaBlue(x) -> (-Expensive(x) & -SuppliedByCompany(x)))", "All x.(JamaicaBlue(x) -> (-Expensive(x) & -SuppliedByCompany(x)))", "all x.(JamaicaBlue(x) -> (-Expective(x) & -SuppliedByCompany(x)))", "all x.(JamaicaBlue(x) -> (-Expensed(x) & -SuppliedByCompany(x)))", "all x.(JamaicaBlue(x) -> -Expensive(x) & -SuppliedByCompany(x))", "all x.(JamaicaBlue(x) -> (-Expensive(x) & -SuppliedByCompany(x)))", "all x.(JamaicaBlue(x) -> (-Expensive(x) & -SuppliedBy(x,JamaicaBlue)))", "all x.(JamaicaBlue(x) -> (-expensive(x) & -SuppliedByCompany(x)))", "all x.(JamaicaBlue(x) -> (-Easy(x) & -SuppliedByCompany(x)))", "(-Expensive(JamaicaBlue) & -SuppliedByCompany(JamaicaBlue))", "all x y.((JamaicaBlue(x) & Company(y)) -> (-Expensive(x) & -SupportedBy(x,y)))", "all x.(JamaicaBlue(x) -> (-Expensive(x) & -SupplieredByCompany(x)))"]}
{"id": "folio_train_1509", "nl": "There are two places named Galicia: either in Spain or in Poland.", "fol": "all x.(((PlaceNamedGalicia(x) -> LocatedInSpain(x)) & -LocatedInPoland(x)) | (-(PlaceNamedGalicia(x) -> LocatedInSpain(x)) & LocatedInPoland(x)))", "prediction": ["exists x.(Place(x) & Galicia(x))", "exists x.(Place(x) & Galicia(x) & (InSpanish(x) | InPoland(x)))", "exists x.(Place(x) & Galicia(x) & (InSpanish(x) | InPoland(x))))", "exists x.(Place(x) & Galicia(x) & (InSpain(x) | InPoland(x)))", "exists x.(Place(x) & Galicia(x) & (Spanish(x) | Poland(x)))", "exists x.(Place(x) & Galicia(x) & (Spain(x) | Poland(x)))", "exists x.(Galicia(x) & (InSpanish(x) | InPoland(x)))", "exists x.(Place(x) & Galicia(x) & (Spanish(x) | Polish(x)))", "(exists x.(Place(x) & Galicia(x)) & (InSpanish(x) | InPoland(x))))", "all x.((Place(x) & Galicia(x)) -> (InSpanish(x) | InPoland(x)))", "exists x.(Place(x) & Galicia(x)) & (InSpanish(x) | InPoland(x)))", "exists x.(Place(x) & (InSpanish(x) | InPoland(x)))", "exists x.(Place(x) & Galicia(x) & (InSpain(x) | InPoland(x))))", "exists x.(Place(x) & NamedGalicia(x) & (InSpanish(x) | InPoland(x)))", "(exists x.(Place(x) & Galicia(x)) & (InSpanish(x) | InPoland(x)))", "exists x.(Place(x) & Galicia(x) & (Spanish(x) | Polish(x))))"]}
{"id": "folio_train_1510", "nl": "Spain is in Europe.", "fol": "all x.(LocatedInSpain(x) -> LocatedInEurope(x))", "prediction": ["all x.(Spanish(x) -> InEurope(x))", "all x.(Spain(x) -> InEurope(x))", "all x y.((Spanish(x) & Europe(y)) -> In(x,y))", "all x y.((Spain(x) & Europe(y)) -> In(x,y))", "all x.((Spanish(x) & InEurope(x)) -> InEurope(x))", "all x.(Spania(x) -> InEurope(x))", "all x y.((Spanish(x) & European(y)) -> In(x,y))", "exists x.(Spanish(x) & InEurope(x))", "all x y.((Spanish(x) & Europe(y)) -> IsIn(x,y))", "exists x.(Spain(x) & InEurope(x))", "all x y.((Spanish(x) & Europe(y)) -> InEurope(x,y))", "all x.(Spanien(x) -> InEurope(x))", "all x y.((Spain(x) & Europe(y)) -> IsIn(x,y))", "all x.(Spanish(x) -> Europe(x))", "all x y.((Spanish(x) & Europe(y)) -> LocatedIn(x,y))", "all x.(Spain(x) -> Europe(x))"]}
{"id": "folio_train_1511", "nl": "Poland is in Europe.", "fol": "all x.(LocatedInPoland(x) -> LocatedInEurope(x))", "prediction": ["all x.(Poland(x) -> InEurope(x))", "all x y.((Poland(x) & Europe(y)) -> In(x,y))", "exists x.(Poland(x) & InEurope(x))", "all x y.((Poland(x) & Europe(y)) -> IsIn(x,y))", "All x.(Poland(x) -> InEurope(x))", "all x y.((Poland(x) & Europe(y)) -> LocatedIn(x,y))", "all x.(Poland(x) -> Europe(x))", "(all x.(Poland(x) -> InEurope(x)))", "all x y.((Poland(x) & Europe(y)) -> InEurope(x,y))", "all x.(Position(x) -> InEurope(x))", "all x.(Poland(x) -> IsInEurope(x))", "(All x.(Poland(x) -> InEurope(x)))", "all x.(Poland(x) -> inEurope(x))", "all x.(Poland(x) -> LocatedInEurope(x))", "all x.(Poland(x) -> In(x,Europe))", "((Poland(Poland) & InEurope(Poland)))"]}
{"id": "folio_train_1512", "nl": "Rochelle lives in Europe.", "fol": "all x.(RochelleLives(x) -> LocatedInEurope(x))", "prediction": ["Rochelle lives in Europe.", "Rochelle exists x.(Roselle(x) & LivesIn(x,Europe))", "Rochelle exists x.(Roselle(x) & LivesInEurope(x))", "Rochelle livesInEurope( Rochelle)", "(LivingIn(Rochelle,Europe) -> LivesIn(Rochelle,Europe))", "Rochelle LivesInEurope( Rochelle)", "(LivingInEurope(Rochelle) -> LivesInEurope(Rochelle))", "RochelleLisesInEurope( Rochelle,Europe)", "Rochelle LivesInEurope( Rochelle,Europe)", "(LivingInEurope(Rochelle) -> LivesIn(Rochelle,Europe))", "RochelleLisesInEurope( Rochelle)", "(LivingIn(Rochelle,Europe) -> Rochelle(Rochelle))", "RochelleLivingInEurope( Rochelle)", "Rochelle livesInEurope( Rochelle,Europe)", "(LivingInEurope(Rochelle) -> LivesIn(Rochelle))", "(LivingIn(Rochelle,Europe) -> LivesIn(Rochelle,Europe))"]}
{"id": "folio_train_1513", "nl": "Dominique does not live in Europe.", "fol": "all x.(DominiqueLives(x) -> -LocatedInEurope(x))", "prediction": ["-exists x.(Dominique(x) & LivesIn(x,Europe))", "-exists x.(Dominion(x) & LivesIn(x,Europe))", "all x.(Dominique(x) -> -LivesInEurope(x))", "-exists x.(Dominique(x) & LivesInEurope(x))", "-exists x.(Dominic(x) & LivesIn(x,Europe))", "(-exists x.(Dominique(x) & LivesIn(x,Europe)))", "-exists x.(Dominique(x) & -LivesIn(x,Europe))", "(exists x.(Dominique(x) & -LivesIn(x,Europe)))", "(exists x.(Dominique(x) & -LivesInEurope(x)))", "-exists x.(Dominique(x) & LivesIn(x,europe))", "(LivingIn(Dominique,Europe) -> -LivingIn(Dominique,Europe))", "-exists x.(Dominion(x) & LivesInEurope(x))", "-exists x.(Dominique(x) & -LivesInEurope(x))", "-(Dominique(Dominique) & LivesInEurope(Dominique))", "all x.(Dominique(x) -> -LivesIn(x,Europe))", "(LivingInEurope(Dominique) | LivingInEurope(Dominique)))"]}
{"id": "folio_train_1514", "nl": "Alfonso lives in Galicia.", "fol": "all x.(AlfonsoLives(x) -> PlaceNamedGalicia(x))", "prediction": ["All x.(Alfonso(x) -> LivesInGalicia(x))", "Alfonso lives in Galicia.", "all x.(Alfonso(x) -> LivesInGalicia(x))", "AlfonsoLisesIn(Alfonso,Galicia)", "All x.(Alfonso(x) -> LivesIn(x,Galicia))", "AlfonsoLisesInGalicia(alfonso,galicia)", "all x.(Alfonso(x) -> LivesIn(x,Galicia))", "AlfonsoLisesInGalicia(Alfonso)", "AlfonsoLisesInGalicia(Alfonso,Galicia)", "AlfonsoLisesIn(alfonso,galicia)", "Alfonso(Alfonso) lives in Galicia(Alfonso)", "Alfonso(alfonso) lives in Galicia(alfonso)", "AlfonsoLisesInGalicia(alfonso)", "AlfonsoLimitsInGalicia(alfonso,galicia)", "AlfonsoLisesInGalicia(alfonso,galicia)", "AlfonsoLisesInGalicia."]}
{"id": "folio_train_1515", "nl": "Rochelle lives in Galicia.", "fol": "all x.(RochelleLives(x) -> PlaceNamedGalicia(x))", "prediction": ["Rochelle lives in Galicia.", "RochelleLisesIn( Rochelle,Galicia)", "RochelleLisesInGalicia( Rochelle)", "RochelleLivingInGalicia( Rochelle)", "Rochelle LivesIn( Rochelle,Galicia)", "RochelleLisesInGalicia( Rochelle,Galicia)", "Rochelle LivesInGalicia( Rochelle)", "Rochelle & LivesInGalicia( Rochelle)", "RochelleLivingInGalicia( Rochelle,Galicia)", "Rochelle LivesInGalicia( Rochelle,Galicia)", "Rochelle & LivesInGalicia( Rochelle,Galicia)", "Rochelle (LivingInGalicia)", "RochelleLivingInGalicia(Rochelle)", "Rochelle livesInGalicia( Rochelle)", "Rochelle lebt in Galicia.", "RochelleLivingInGalicia(Rochelle,Galicia)"]}
{"id": "folio_train_1516", "nl": "Dominique does not live in Spain.", "fol": "all x.(DominiqueLives(x) -> -LocatedInSpain(x))", "prediction": ["-exists x.(Dominique(x) & LivesIn(x,Spanish))", "-exists x.(Dominique(x) & LivesIn(x,Spania))", "-exists x.(Dominique(x) & LivesIn(x,Spain))", "-exists x.(Dominion(x) & LivesIn(x,Spania))", "-exists x.(Dominion(x) & LivesIn(x,Spanish))", "-exists x.(Dominique(x) & LivesIn(x,Spanien))", "(-exists x.(Dominique(x) & LivesIn(x,Spanish)))", "-exists x.(Dominion(x) & LivesIn(x,Spain))", "-exists x.(Dominic(x) & LivesIn(x,Spanish))", "-exists x.(Dominic(x) & LivesIn(x,Spania))", "(-exists x.(Dominique(x) & LivesIn(x,Spania)))", "Dominique neexists en Espaa.", "(exists x.(Dominique(x) & -LivesIn(x,Spanish)))", "(-exists x.(Dominique(x) & LivesIn(x,Spain)))", "-exists x.(Dominique(x) & -LivesIn(x,Spanish))", "-exists x.(Dominic(x) & LivesIn(x,Spain))"]}
{"id": "folio_train_1517", "nl": "Alfonso lives in Europe.", "fol": "all x.(AlfonsoLives(x) -> LocatedInEurope(x))", "prediction": ["All x.(Alfonso(x) -> LivesInEurope(x))", "all x.(Alfonso(x) -> LivesInEurope(x))", "AlfonsoLisesInEurope(Alfonso,Europe)", "AlfonsoLisesInEurope(alfonso,europe)", "All x.(Alfonso(x) -> LivesIn(x,Europe))", "AlfonsoLisesInEurope(Alfonso)", "all x.(Alfonso(x) -> LivesIn(x,Europe))", "Alfonso lives in Europe.", "Alfonso livesInEurope(alfonso,europe)", "AlfonsoLisesInEurope(alfonso)", "Alfonso LivesInEurope(Alfonso,Europe)", "Alfonso LivesInEurope(alfonso,europe)", "Alfonso LivesInEurope(Alfonso)", "Alfonso livesInEurope(Alfonso,Europe)", "AlfonsoLivesInEurope(Alfonso,Europe)", "AlfonsoLimitsInEurope(Alfonso,Europe)"]}
{"id": "folio_train_1518", "nl": "Ralph Hammerthaler was born in Wasserburg am Inn.", "fol": "BornInLocation(RalphHammerthaler,WasserburgAmInn)", "prediction": ["Ralph Hammerthaler was born in Wasserburg am Inn.", "Ralph Hammerthaler was born in Waterburg am Inn.", "RalphHammerthaler was born in Wasserburg am Inn.", "Ralph Hammerthaler (bornInWaterburgAmInn))", "Ralph Hammerthaler (bornInWaterburgAmInn)", "Ralph Hammerthaler was born in Wasserburg am Inn, Germany.", "RalphHammerthaler was born in Waterburg am Inn.", "Ralph Hammerthaler wurde in Wasserburg am Inn geboren.", "Ralph Hammerthaler was born in Wasserburg Am Inn.", "RalphHammerthaler (bornInWaterburgAmInn))", "RalphHammerthaler (bornInWaterburgAmInn)", "Ralph Hammerthaler was born in Wasserburg am Inn.", "Ralph Hammerthaler (BirthInWaterburgAmInn)", "Ralph Hammerthaler (geboren in Wasserburg am Inn)", "Ralph Hammerthaler (bornInWasserburgAmInn))", "Ralph Hammerthaler (bornInWasserburgAmInn)"]}
{"id": "folio_train_1519", "nl": "Wasserburg am Inn is in Germany.", "fol": "IsLocatedIn(WasserbAmInn,Germany)", "prediction": ["all x.(WaterburgAmInn(x) -> InGermany(x))", "All x.(WaterburgAmInn(x) -> InGermany(x))", "all x y.((WaterburgAmInn(x) & Germany(y)) -> In(x,y))", "all x.((WaterburgAmInn(x) & InGermany(x)) -> InGermany(x))", "all x.((WaterburgAmInn(x) & Germany(x)) -> In(x,Germany))", "all x.(WasserburgAmInn(x) -> InGermany(x))", "(InGermany(WaterburgAmInn) & InGermany(WaterburgAmInn))", "(All x.(WaterburgAmInn(x) -> InGermany(x)))", "all x.(WaterburgAmInn(x) -> (InGermany(x) & InGermany(x)))", "all x y.((WaterburgAmInn(x) & Germany(y)) -> IsIn(x,y))", "all x y.((WaterburgAmInn(x) & Germany(y)) -> LocatedIn(x,y))", "all x.(WaterburgAmInn(x) -> InDeutschland(x))", "all x.(WaterburgAmInn(x) -> (InGermany(x) | InGermany(x)))", "all x.((WaterburgAmInn(x) & Germany(x)) -> In(x,y))", "(InGermany(WasserburgAmInn) & InGermany(WasserburgAmInn))", "All x.(WaterburgAmInn(x) -> InDeutschland(x))"]}
{"id": "folio_train_1520", "nl": "Germany is in Europe.", "fol": "IsLocatedIn(Germany,Europe)", "prediction": ["all x.(Germany(x) -> InEurope(x))", "all x y.((Germany(x) & Europe(y)) -> In(x,y))", "all x.(Deutschland(x) -> InEurope(x))", "all x.((Germany(x) & InEurope(x)) -> InEurope(x))", "all x y.((Germany(x) & Europe(y)) -> InEurope(x,y))", "All x.(Germany(x) -> InEurope(x))", "(All x.(Germany(x) & InEurope(x)) -> InEurope(x))", "(all x.(Germany(x) -> InEurope(x)))", "all x y.((Germany(x) & Europe(y)) -> IsIn(x,y))", "all x.(Germany(x) -> Europe(x))", "exists x.(Germany(x) & InEurope(x))", "all x.(Germany(x) -> inEurope(x))", "all x y.((Germany(x) & Europe(y)) -> LocatedIn(x,y))", "(All x.(Germany(x) -> InEurope(x)))", "all x.(Germany(x) -> LocatedInEurope(x))", "all x.(Germany(x) -> In(x,Europe))"]}
{"id": "folio_train_1521", "nl": "Ralph Hammerthaler is a German writer.", "fol": "IsWriter(RalphHammerthaler)", "prediction": ["all x.((RalphHammerthaler(x) & GermanWriter(x)) -> Writer(x))", "(GermanWriter(RalphHammerthaler)", "(GermanWriter(RalphHammerthaler) & RalphHammerthaler(Ralph))", "RalphHammerthaler is a GermanWriter.", "all x.((RalphHammerthaler(x) & GermanWriter(x)) -> Writes(x))", "(GermanWriter(RalphHammerthaler) & RalphHammerthaler(RalphHammerthaler))", "(GermanWriter(RalphHammerthaler) & RalphHammerthaler(Hammerthaler))", "(GermanWriter(RalphHammerthaler) & RalphHammerthaler(RolandHammerthaler))", "(GermanWriter(RalphHammerthaler) & Writer(RalphHammerthaler))", "(GermanWriter(RolfHammerthaler) & RalphHammerthaler(RolfHammerthaler))", "all x.((RalphHammerthaler(x) & Writer(x)) -> German(x))", "all x.((RalphHammerthaler(x) & GermanWriter(x)) -> Author(x))", "(GermanWriter(RalphHammerthaler) -> Writer(RalphHammerthaler))", "RalphHammerthaler (GermanWriter)", "(GermanWriter(RalphHamptoner) & RalphHamptoner(Ralph))", "all x.((RalphHammerthaler(x) & GermanWriter(x)) -> WrittenBy(x))"]}
{"id": "folio_train_1522", "nl": "Ralph Hammerthaler was born in 1965. ", "fol": "BornInYear1965(RalphHammerthaler)", "prediction": ["Ralph Hammerthaler was born in 1965.", "(Birth(RalphHammerthaler) & BornIn(RalphHammerthaler) & BornIn(RalphHammerthaler) & BornIn(RalphHammerthaler))", "(Birth(RalphHammerthaler) & BornIn(RalphHammerthaler) & BornIn(RalphHammerthaler) & BornIn(RalphHammerthaler) & BornIn(RalphHammerthaler) & BornIn(RalphHammerthaler))", "(Birth(RalphHammerthaler) & BornIn(RalphHammerthaler) & BornIn(RalphHammerthaler) & BornIn(RalphHammerthaler) & BornIn(RalphHammerthaler))", "(Birth(RalphHammerthaler) & BornIn(RalphHammerthaler) & BornIn(RalphHammerthaler) & BornIn(RalphHammerthaler) & BornIn(RalphHammerthaler) & BornIn(RalphHammerthaler) & BornIn(RalphHammerthaler))", "(Birth(RalphHammerthaler) & BornIn(RalphHammerthaler) & BornIn(RalphHammerthaler) & BornIn(RalphHammerthaler) & BornIn(RalphHammerthaler,65))", "(Birth(RalphHammerthaler) & BornIn(RalphHammerthaler) & BornIn(RalphHammerthaler) & BornIn(RalphHammerthaler,65))", "(Birth(RalphHammerthaler) & BornIn(RalphHammerthaler) & BornIn(RalphHammerthaler) & BornIn(RalphHammerthaler) & BornIn(RalphHammerthaler) & BornIn(RalphHammerthaler,65))", "(Birth(RalphHammerthaler) & BornIn(RalphHammerthaler) & BornIn(RalphHammerthaler) & BornIn(RalphHammerthaler) & BornIn(RalphHammerthaler) & BornIn(RalphHammerthaler) & BornIn(RalphHammerthaler) & BornIn(RalphHammer", "(Birth(RalphHammerthaler) & BornIn(RalphHammerthaler) & BornIn(RalphHammerthaler))", "(Birth(RalphHammerthaler) & BornIn(RalphHammerthaler) & BornIn(RalphHammerthaler) & BornIn(RalphHammerthaler) & BornIn(RalphHammerthaler) & BornIn(RalphHammerthaler) & BornIn(RalphHammerthaler,65))", "(Birth(RalphHammerthaler) & BornIn(RalphHammerthaler) & BornIn(RalphHammerthaler,65))", "(Birth(RalphHamptoner) & BornIn(RalphHamptoner) & BornIn(RalphHamptoner) & BornIn(RalphHamptoner) & BornIn(RalphHamptoner) & BornIn(RalphHamptoner) & BornIn(RalphHamptoner))", "(Birth(RalphHammerthaler) & BornIn(RalphHammerthaler) & BornIn(RalphHammerthaler) & BornIn(RalphHammerthaler) & BornIn(RalphHammerthaler) & BornIn(RalphHammerthaler,65) & BornIn(RalphHammerthaler,65))", "(Birth(RalphHamptoner) & BornIn(RalphHamptoner) & BornIn(RalphHamptoner) & BornIn(RalphHamptoner) & BornIn(RalphHamptoner) & BornIn(RalphHamptoner))", "(Birth(RalphHamptoner) & BornIn(RalphHamptoner) & BornIn(RalphHamptoner) & BornIn(RalphHamptoner) & BornIn(RalphHamptoner) & BornIn(RalphHamptoner) & BornIn(RalphHamptoner,65))"]}
{"id": "folio_train_1523", "nl": "Ralph Hammerthaler is a writer born in Asia.", "fol": "(IsWriter(RalphHammerthaler) & BornInLocation(RalphHammerthaler,Asia))", "prediction": ["all x.((Writer(x) & BornInAsia(x)) -> RalphHammerthaler(x))", "(Writer(RalphHammerthaler) & BornInAsia(RalphHammerthaler))", "all x.((RalphHammerthaler(x) & BornInAsia(x)) -> Writer(x))", "(Writer(RolfHammerthaler) & BornInAsia(RolfHammerthaler))", "(Writer(RalphHammerthaler,Asia) & BornIn(RalphHammerthaler,Asia))", "all x.((Writer(x) & BornInAsia(x)) -> RalphHammelthaler(x))", "all x.(RalphHammerthaler(x) -> (Writer(x) & BornInAsia(x)))", "all x.(RalphHammerthaler(x) -> BornInAsia(x))", "all x.((Writer(x) & BornInAsia(x)) -> RalphHamptoner(x))", "all x.((Writer(x) & BornInAsia(x)) -> RalphHammondthaler(x))", "(bornInAsia(RalphHammerthaler) & Writer(RalphHammerthaler))", "(Writer(RalphHammerthaler) & BornInAsia(RalphHammerthaler,Asia))", "(Writer(RalphHammerthaler) & BornIn(RalphHammerthaler,Asia))", "all x.((Writer(x) & BornInAsia(x)) -> RalphHallthaler(x))", "all x.((Writer(x) & BornInAsia(x)) -> RalphHammethaler(x))", "all x.((Writer(x) & BornInAsia(x)) -> RalphHammetthaler(x))"]}
{"id": "folio_train_1524", "nl": "Ralph Hammerthaler lives in Germany.", "fol": "LivesIn(RalphHammerthaler,Germany)", "prediction": ["(LivesIn(RalphHammerthaler,Germany) & RalphHammerthaler(Hammerthaler,Germany))", "(LivingIn(RalphHammerthaler,Germany) -> LivesIn(RalphHammerthaler,Germany))", "(LivingIn(RalphHammerthaler) -> LivesIn(RalphHammerthaler))", "(LisesIn(RalphHammerthaler,Germany) & RalphHammerthaler(Hammerthaler,Germany))", "(LivesIn(RalphHammerthaler) -> LivesIn(RalphHammerthaler))", "(LivingIn(RalphHammerthaler) -> LivesIn(RalphHammerthaler,Germany))", "(LivesIn(RalphHammerthaler,Germany))", "(LivesIn(RalphHammerthaler) -> LivesIn(RalphHammerthaler,Germany))", "(LisesIn(RalphHammerthaler,Germany) & RalphHammerthaler(Hammerthaler))", "(LivesIn(RalphHammerthaler) & In(RalphHammerthaler,Germany))", "(LivesIn(RalphHammerthaler,Germany) & RalphHammerthaler(Hammerthaler))", "(LivesIn(RalphHammerthaler,Germany) & Ralph(Hammerthaler,Germany))", "(LisesIn(RalphHammerthaler,Germany) & Ralph(Hammerthaler,Germany))", "(LivesIn(RalphHamptoner,Germany) & RalphHamptoner(Hamptoner,Germany))", "(LivesIn(RalphHammerthaler) & In(RalphHammerthaler))", "(LivesIn(RalphHammerthaler) & LocatedIn(RalphHammerthaler,Germany))"]}
{"id": "folio_train_1525", "nl": "All books written by Tomas have sold more than 1 million copies. ", "fol": "all x.(WrittenByTomas(x) -> SoldMoreThanOneMillionCopies(x))", "prediction": ["all x.((Book(x) & WrittenByTomas(x)) -> SoldMoreThanOneMillionCopies(x))", "all x.((Book(x) & WrittenByTomas(x)) -> SoldMoreThanMillionCopies(x))", "all x.((Book(x) & WrittenByTomas(x)) -> SoldMoreThan1MCopies(x))", "all x.((Book(x) & WrittenByTomas(x)) -> SoldMoreThan(x,y))", "all x.((Book(x) & WrittenByTomas(x)) -> SoldMoreThan(x,million))", "all x.((Book(x) & WrittenByTomas(x)) -> SoldMoreThan(x,MillionCopies))", "all x.((Book(x) & WrittenByTomas(x)) -> SoldMoreThan(x,1000))", "all x.((Book(x) & WrittenByTomas(x)) -> SoldMoreThan(x,1 MillionCopies))", "all x.((Book(x) & WrittenByTomas(x)) -> SoldMoreThan(x,millionCopies))", "all x.((Book(x) & WrittenByTomas(x)) -> SoldMoreThanOneMillionCopies(x))", "all x.((Book(x) & WrittenByTomas(x)) -> SoldMoreThan(x,1))", "all x y.((Book(x) & WrittenByTomas(x)) -> SoldMoreThan(x,y))", "all x y.((Book(x) & WrittenByTomas(x,y)) -> SoldMoreThan(x,y))", "all x.((Book(x) & WrittenByTomas(x)) -> SoldMoreThan(x,1000000))", "all x.((Book(x) & WrittenByTomas(x)) -> SoldMoreThan(x,500,000))", "all x.((Book(x) & WrittenByTomas(x)) -> SoldMoreThan(x,1 Million))"]}
{"id": "folio_train_1526", "nl": "Some books that have won Hugo Awards are written by Tomas.", "fol": "exists x.(HasWonHugoAward(x) & WrittenByTomas(x))", "prediction": ["exists x.(Book(x) & WonHugoAward(x) & WrittenByTomas(x))", "exists x.(Book(x) & WonHugoAwards(x) & WrittenByTomas(x))", "exists x.(Book(x) & WonHugoAward(x)) -> WrittenByTomas(x))", "exists x.(Book(x) & WonHugoAward(x) & WrittenByTomas(x))", "exists x.((Book(x) & WonHugoAwards(x)) -> WrittenByTomas(x))", "exists x.(Book(x) & WonHugoAwards(x) & WrittenByTomas(x))", "exists x.(Book(x) & WonHugeAward(x) & WrittenByTomas(x))", "all x.((Book(x) & WonHugoAwards(x)) -> WrittenByTomas(x))", "exists x.(Book(x) & WonHugoAward(x)) & WrittenByTomas(x))", "exists x.((Book(x) & WonHugoAward(x)) -> WrittenByTomas(x))", "exists x.(Book(x) & WonHugoAward(x) & Tomas(x))", "exists x.(Book(x) & WonHugoAward(x) & WrittenByTomas(x))", "exists x.(Book(x) & WonHugoAwards(x)) -> WrittenByTomas(x))", "exists x.(Book(x) & WonHungoAward(x) & WrittenByTomas(x))", "exists x.(Book(x) & WonHugoAward(x) & WrittenBy(x,Tomas))", "exists x.(Book(x) & WonHumoAward(x) & WrittenByTomas(x))"]}
{"id": "folio_train_1527", "nl": "All books about the future are inspired by Shakespeare. ", "fol": "all x.(IsAboutFuture(x) -> InspiredByShakespeare(x))", "prediction": ["all x.(Book(x) -> InspiredByShakespeare(x))", "all x.(Book(x) -> InspiredByShakespeare(x))", "all x.(Book(x) -> InspiredByScottish(x))", "all x y.((Book(x) & Future(y)) -> InspiredByShakespeare(x,y))", "all x.((Book(x) & InspiredByShakespeare(x)) -> Future(x))", "all x.((Book(x) & AboutFuture(x)) -> InspiredByShakespeare(x))", "all x.((Book(x) & InspiredByShakespeare(x)) -> Future(x))", "all x y.((Book(x) & Future(y)) -> InspiredByShakespeare(x,y))", "all x y.((Book(x) & Future(y)) -> InspiredBy(x,Shakespeare))", "all x y.((Book(x) & Future(y)) -> InspiredByScottish(x,y))", "all x.(Book(x) -> InspiredByScottish(x))", "all x.((Book(x) & InspiredByScottish(x)) -> Future(x))", "all x y.((Book(x) & Future(y)) -> InspiredBy(x,Shakespeare))", "all x.((Book(x) & AboutFuture(x)) -> InspiredByScottish(x))", "all x.((Book(x) & AboutFuture(x)) -> InspiredByShakespeare(x))", "all x.(Book(x) -> InspiredBySaxon(x))"]}
{"id": "folio_train_1528", "nl": "2001 is a book either inspired from Shakespeare or it has sold more than 1 million copies.", "fol": "((InspiredByShakespeare(Y2001) & -SoldMoreThanOneMillionCopies(Y2001)) | (-InspiredByShakespeare(Y2001) & SoldMoreThanOneMillionCopies(Y2001)))", "prediction": ["all x.((Book(x) & (InspiredFromShakespeare(x) | SoldMoreThanOneMillionCopies(x))) -> 2001(x))", "all x.((Book(x) & (InspiredFromShakespeare(x) | SoldMoreThan1MCopies(x))) -> 2001(x))", "all x.((Book(x) & (InspiredFromShakespeare(x) | SoldMoreThanMillionCopies(x))) -> 2001(x))", "all x.((Book(x) & (InspiredFromScottish(x) | SoldMoreThanOneMillionCopies(x))) -> 2001(x))", "all x.(2001(x) -> (InspiredFromShakespeare(x) | SoldMoreThanOneMillionCopies(x)))", "all x.((Book(x) & (InspiredFromScottish(x) | SoldMoreThan1MCopies(x))) -> 2001(x))", "all x.((Book(x) & (InspiredFromShakespeare(x) | SoldMoreThan(x,1 MillionCopies))) -> 2001(x))", "all x.((Book(x) & (InspiredFromSassamer(x) | SoldMoreThanOneMillionCopies(x))) -> 2001(x))", "all x.((Book(x) & (InspiredFromShakespeare(x) | SoldMoreThan(x,1))) -> 2001(x))", "all x.((Book(x) & (InspiredFromShakespeare(x) | SoldMoreThan(x,1000000))) -> 2001(x))", "all x.((Book(x) & (InspiredFromShakespeare(x) | SoldMoreThanOneMillionCopies(x))) -> 2001)", "all x.(2001(x) -> (InspiredFromShakespeare(x) | SoldMoreThan1MCopies(x)))", "all x.((Book(x) & InspiredFromShakespeare(x)) | SoldMoreThanOneMillionCopies(x)) -> 2001(x))", "all x.((Book(x) & InspiredFromShakespeare(x)) | SoldMoreThanOneMillionCopies(x)) -> 2001(x))", "all x.((Book(x) & InspiredFromShakespeare(x)) | SoldMoreThanOneMillionCopies(x))", "all x.((Book(x) & InspiredFromShakespeare(x)) | SoldMoreThanOneMillionCopies(x))"]}
{"id": "folio_train_1529", "nl": "2001 is a book that has either sold more than 1 million copies or it was written by Tomas.", "fol": "((SoldMoreThanOneMillionCopies(Y2001) & -WrittenByTomas(Y2001)) | (-SoldMoreThanOneMillionCopies(Y2001) & WrittenByTomas(Y2001)))", "prediction": ["all x.((Book(x) & (SoldMoreThanOneMillionCopies(x) | WrittenByTomas(x))) -> 2001(x))", "all x.((Book(x) & (SoldMoreThan1MCopies(x) | WrittenByTomas(x))) -> 2001(x))", "all x.((Book(x) & SoldMoreThanOneMillionCopies(x)) | WrittenByTomas(x))", "all x.((Book(x) & SoldMoreThan1MCopies(x)) | WrittenByTomas(x))", "all x.((Book(x) & (SoldMoreThanMillionCopies(x) | WrittenByTomas(x))) -> 2001(x))", "all x.((Book(x) & (SoldMoreThan(x,1) | WrittenByTomas(x))) -> 2001(x))", "all x.((Book(x) & (SoldMoreThan(x,1000000) | WrittenByTomas(x))) -> 2001(x))", "all x.((Book(x) & SoldMoreThanOneMillionCopies(x)) | WrittenByTomas(x)) -> 2001(x))", "all x.((Book(x) & (SoldMoreThan1M(x) | WrittenByTomas(x))) -> 2001(x))", "all x.((Book(x) & SoldMoreThanOneMillionCopies(x) | WrittenByTomas(x)) -> 2001(x))", "all x.((Book(x) & SoldMoreThan1MCopies(x) | WrittenByTomas(x)) -> 2001(x))", "all x.((Book(x) & SoldMoreThan(x,1)) | WrittenByTomas(x))", "all x.((Book(x) & SoldMoreThan1MCopies(x)) | WrittenByTomas(x)) -> 2001(x))", "all x.(2001(x) -> (SoldMoreThanOneMillionCopies(x) | WrittenByTomas(x)))", "all x.((Book(x) & (SoldMoreThan(x,1000) | WrittenByTomas(x))) -> 2001(x))", "all x.((Book(x) & SoldMoreThanMillionCopies(x)) | WrittenByTomas(x))"]}
{"id": "folio_train_1530", "nl": "2001 is a book that has won a Hugo Award.", "fol": "HasWonHugoAward(Y2001)", "prediction": ["all x.((Book(x) & WonHugoAward(x)) -> 2001(x))", "all x.((Book(x) & 2001(x)) -> WonHugoAward(x))", "all x y.((Book(x) & 2001(y)) -> WonHugoAward(x,y))", "all x.((Book(x) & WonHugoAward(x)) -> 2001(x))", "all x.((Book(x) & WinsHugoAward(x)) -> 2001(x))", "all x.((Book(x) & WinnerOfHugoAward(x)) -> 2001(x))", "all x.((Book(x) & HugoAward(x)) -> 2001(x))", "all x.((Book(x) & WonHugoAward(x)) -> 2001)", "all x.((Book(x) & InBook(x,2001)) -> WonHugoAward(x))", "all x.((Book(x) & WasWonHugoAward(x)) -> 2001(x))", "all x.(2001(x) -> WonHugoAward(x))", "all x.((Book(x) & 2001) & WonHugoAward(x)) -> Book(x))", "all x.((Book(x) & WinnerOfHugoAward(x)) -> 2001(x))", "all x y.((Book(x) & 2001(y)) -> WonHugoAward(x))", "all x.((Book(x) & WonHugoAward(x)) -> 2001.", "all x.((Book(x) & WonHugoAward(x,2001)) -> Book(x))"]}
{"id": "folio_train_1531", "nl": "2001 is a book that has won a Hugo Award and is about the future.", "fol": "(HasWonHugoAward(Y2001) & IsAboutFuture(Y2001))", "prediction": ["all x.((Book(x) & WonHugoAward(x) & AboutFuture(x)) -> 2001(x))", "all x.(2001(x) -> (WonHugoAward(x) & AboutFuture(x)))", "all x.((Book(x) & WonHugoAward(x) & AboutFuture(x)) -> 2001(x))", "all x y z.((Book(x) & HugoAward(y) & Future(z)) -> (Won(x,y) & About(x,z)))", "all x.((Book(x) & WonHugoAward(x) & AboutFuture(x)) -> 2001)", "all x y.((Book(x) & 2001(y)) -> (WonHugoAward(x,y) & AboutFuture(x)))", "all x.((Book(x) & WinsHugoAward(x) & AboutFuture(x)) -> 2001(x))", "(WonHugoAward(2001) & AboutFuture(2001))", "all x.((Book(x) & WonHugeOAward(x) & AboutFuture(x)) -> 2001(x))", "all x.((Book(x) & WonHugoAward(x) & Future(x)) -> 2001(x))", "(Book(2001) & WonHugoAward(2001) & AboutFuture(2001))", "all x.((Book(x) & WonHugo(x) & AboutFuture(x)) -> 2001(x))", "all x.((Book(x) & WonHugoAward(x) & AboutFuture(x)) -> 2001.", "((Book(2001) & WonHugoAward(2001)) -> AboutFuture(2001))", "all x.((Book(x) & WonHugoAward(x) & AboutTheFuture(x)) -> 2001(x))", "all x y.((Book(x) & 2001(y)) -> (WonHugoAward(x,y) & AboutFuture(x,y)))"]}
{"id": "folio_train_1532", "nl": "If 2001 either has won a Hugo Award and is about the future, or neither has won a Hugo Award nor is about the future, then 2001 has neither won a Hugo Award nor is written by Tomas.", "fol": "(((HasWonHugoAward(Y2001) & IsAboutFuture(Y2001)) | (-HasWonHugoAward(Y2001) & -IsAboutFuture(Y2001))) -> (-HasWonHugoAward(Y2001) & -WrittenByTomas(Y2001)))", "prediction": ["all x.((2001(x) & (WonHugoAward(x) & AboutFuture(x) | -WonHugoAward(x) & AboutFuture(x))) -> (-WonHugoAward(x) & -WrittenByTomas(x)))", "all x.((2001(x) & (WonHugoAward(x) & AboutFuture(x) | -WonHugoAward(x) & -WrittenByTomas(x))) -> (-WonHugoAward(x) & -WrittenByTomas(x)))", "all x.((2001(x) & (WonHugoAward(x) & AboutFuture(x) | -WonHugoAward(x) & -WrittenByTomas(x))) -> (-WonHugoAward(x) & -WrittenByTomas(x)))", "all x.((2001(x) & (WonHugoAward(x) & AboutFuture(x) | -WonHugoAward(x) & -WrittenByTomas(x))) -> (-WonHugoAward(x) & WrittenByTomas(x)))", "all x.((2001(x) & (WonHugoAward(x) & AboutFuture(x) | (-WonHugoAward(x) & AboutFuture(x)))) -> (-WonHugoAward(x) & -WrittenByTomas(x)))", "all x.((2001(x) & ((WonHugoAward(x) & AboutFuture(x)) | (-WonHugoAward(x) & AboutFuture(x))))) -> (-WonHugoAward(x) & -WrittenByTomas(x)))", "all x.((2001(x) & (WonHugoAward(x) & AboutFuture(x)) | -WonHugoAward(x) & -WrittenByTomas(x))) -> (-WonHugoAward(x) & -WrittenByTomas(x)))", "all x.((2001(x) & (WonHugoAward(x) & AboutFuture(x) | -WonHugoAward(x) & AboutFuture(x))) -> (-WonHugoAward(x) | WrittenByTomas(x)))", "all x.((2001(x) & (WonHugoAward(x) & AboutFuture(x) | -WonHugoAward(x) & AboutFuture(x))) -> (-WonHugoAward(x) & -WrittenByTomas(x)))", "all x.((2001(x) & (WonHugoAward(x) & AboutFuture(x)) | (-WonHugoAward(x) & AboutFuture(x)))) -> (-WonHugoAward(x) & -WrittenByTomas(x)))", "all x.((2001(x) & (WonHugoAward(x) & AboutFuture(x) | -WonHugoAward(x) & -WrittenByTomas(x))) -> -WonHugoAward(x) & -WrittenByTomas(x))", "all x.((2001(x) & (WonHugoAward(x) & AboutFuture(x) | -WonHugoAward(x) & -WrittenByTomas(x))) -> (-WonHugoAward(x) | WrittenByTomas(x)))", "all x.((2001(x) & (WonHugoAward(x) & AboutFuture(x) | -WonHugoAward(x) & AboutFuture(x))) -> (NeitherWonHugoAward(x) & -WrittenByTomas(x)))", "all x.((2001(x) & (WonHugoAward(x) & AboutFuture(x) | (-WonHugoAward(x) & AboutFuture(x))))) -> (-WonHugoAward(x) & -WrittenByTomas(x)))", "all x.((2001(x) & (WonHugoAward(x) & AboutFuture(x) | -WonHugoAward(x) & AboutFuture(x))) -> -WonHugoAward(x) & -WrittenByTomas(x))", "all x.((2001(x) & (WonHugoAward(x) & AboutFuture(x)) | (-WonHugoAward(x) & AboutFuture(x)))))"]}
{"id": "folio_train_1533", "nl": "No grass is food. ", "fol": "all x.(IsGrass(x) -> -IsFood(x))", "prediction": ["-exists x.(Grass(x) & Food(x))", "all x.(Grass(x) -> -Food(x))", "-exists x.(Grass(x) & -Food(x))", "(-exists x.(Grass(x) & Food(x)))", "-exists x.(Grass(x) & Food(y))", "-all x.(Grass(x) -> Food(x))", "all x.(Grass(x) -> Food(x))", "all x.exists y.(Grass(x) & Food(y))", "(exists x.(Grass(x) & Food(x)))", "-exists x.(Grass(x) & Eatable(x))", "All x.(Grass(x) -> -Food(x))", "-exists x.(Grass(x) & EatenBy(x))", "exists x.(Grass(x) & -Food(x))", "\u2013exists x.(Grass(x) & Food(x))", "all x.(Grass(x) -> -Feed(x))", "all x.(Grass(x) -> NoFood(x))"]}
{"id": "folio_train_1534", "nl": "All meadows are grass.", "fol": "all x.(IsMeadow(x) -> IsGrass(x))", "prediction": ["all x.(Meadow(x) -> Grass(x))", "all x.(Meadow(x) -> IsGrass(x))", "all x.(Meadow(x) -> (Grass(x) | Grass(x)))", "all x.(Meadow(x) -> (Grass(x) & Grass(x)))", "all x.(Meadow(x) -> Green(x))", "all x.(Meadow(x) -> (Grass(x) & -Grass(x)))", "all x.(Meadow(x) -> (Grass(x) | -Grass(x)))", "all x.(Meadow(x) -> Ground(x))", "all x.(Meadow(x) -> (Grass(x) | (Grass(x) & Grass(x)))))", "all x.((Meadow(x) & Grass(x)) -> Grass(x))", "all x.(Meadow(x) -> Grasse(x))", "all x.exists y.(Meadow(x) & Meadow(y) & Grass(x))", "all x.(Meadow(x) -> (Grass(x) & InMeadow(x)))", "all x.(Meadow(x) -> (Grass(x) | (Grass(x) & Grass(x))))", "all x.(Meadow(x) -> (Grass(x) & Grass(x) & Grass(x)))", "all x.(Meadow(x) -> (Grass(x) & -Grass(x) & -Grass(x)))"]}
{"id": "folio_train_1535", "nl": "All edible things are food. ", "fol": "all x.(IsEdible(x) -> IsFood(x))", "prediction": ["all x.(EdibleThing(x) -> Food(x))", "all x.(Edible(x) -> Food(x))", "all x.(EdibleTree(x) -> Food(x))", "all x.(EdibleTreatment(x) -> Food(x))", "all x.(EdibleToy(x) -> Food(x))", "all x.(EdibleTask(x) -> Food(x))", "all x.(Edible(x) -> Food(x))", "all x.(EdibleThan(x) -> Food(x))", "all x.(EdibleThing(x) -> Food(x))", "all x.(EdibleTeacher(x) -> Food(x))", "all x.(EdibleTen(x) -> Food(x))", "all x.(EdibleTwo(x) -> Food(x))", "all x y.((Edible(x) & Food(y)) -> Food(x))", "all x y.((Edible(x) & Food(y)) -> Edible(x))", "all x.(EdibleDing(x) -> Food(x))", "all x y.((Edible(x) & Food(y)) -> Food(x,y))"]}
{"id": "folio_train_1536", "nl": "All fruits are edible.", "fol": "all x.(IsFruit(x) -> IsEdible(x))", "prediction": ["all x.(Fruit(x) -> Edible(x))", "all x y.((Fruit(x) & Fruit(y)) -> Edible(x))", "all x.((Fruit(x) & Edible(x)) -> Fruit(x))", "all x.(Fruit(x) -> Edible(x))", "all x y.((Fruit(x) & Fruit(y)) -> Edible(x,y))", "all x.(Fruit(x) -> Edible(x))", "all x.exists y.(Fruit(x) & Fruit(y) & Edible(x,y))", "all x.((Fruit(x) & Edible(x)) -> Eatable(x))", "all x.exists y.(Fruit(x) & Fruit(y) & Edible(x))", "exists x.(Fruit(x) & Edible(x))", "all x.((Fruit(x) & Edible(x)) -> ProducedBy(x))", "all x.((Fruit(x) & Edible(x)) -> Produces(x))", "all x y.((Fruit(x) & Fruit(y)) -> Edible(y))", "all x.((Fruit(x) & Edible(x)) -> -Edible(x))", "all x.exists y.(Fruit(x) & Fruit(y) & Edible(y))", "all x.((Fruit(x) & Edible(x)) -> AllFruits(x))"]}
{"id": "folio_train_1537", "nl": "All lemons are fruit.", "fol": "all x.(IsLemon(x) -> IsFruit(x))", "prediction": ["all x.(Lemon(x) -> Fruit(x))", "all x.(Limon(x) -> Fruit(x))", "all x.(Lime(x) -> Fruit(x))", "all x y.((Lemon(x) & Fruit(y)) -> Fruit(x))", "all x.(Liquid(x) -> Fruit(x))", "all x.(Lion(x) -> Fruit(x))", "all x.(Citrus(x) -> Fruit(x))", "all x.(Lilac(x) -> Fruit(x))", "all x.(Liquorice(x) -> Fruit(x))", "all x.((Lemon(x) & Fruit(x)) -> Fruit(x))", "all x y.((Lemon(x) & Fruit(y)) -> Fruit(x,y))", "all x.(Liquois(x) -> Fruit(x))", "all x.(Lemon(x) -> Fruit(x))", "all x.(Litan(x) -> Fruit(x))", "(all x.(Lemon(x) -> Fruit(x)))", "all x.(Limb(x) -> Fruit(x))"]}
{"id": "folio_train_1538", "nl": "Grapes are not edible and lemons.", "fol": "-(IsEdible(IsGrape) & IsLemon(IsGrape))", "prediction": ["all x.((Grape(x) & -Edible(x)) -> Lemon(x))", "all x y.((Grape(x) & Lemon(y)) -> (-Edible(x) & -Edible(y)))", "all x y.((Grape(x) & Lemon(y)) -> -Edible(x))", "(all x.(Grape(x) -> -Edible(x)) & all y.(Lemon(y) -> -Edible(y))))", "(all x.(Grape(x) -> -Edible(x)) & all y.(Lemon(y) -> -Edible(y)))", "all x y.((Grape(x) & Lemon(y)) -> (-Edible(x) & -Edible(x)))", "(all x.(Grape(x) -> -Edible(x)) & all y.(Limon(y) -> -Edible(y))))", "all x.((Grape(x) & -Edible(x) & Lemon(x)) -> -Edible(x))", "all x.(Grape(x) -> -Edible(x) & Lemon(x))", "(all x.(Grape(x) -> -Edible(x)) & all y.(Limon(y) -> -Edible(y)))", "all x.(Grape(x) -> (-Edible(x) & -Limon(x)))", "all x.(Grape(x) -> (-Edible(x) & -Edible(x) & -Edible(x) & -Edible(x) & -Edible(x) & -Edible(x) & -Edible(x) & -Edible(x)))", "all x.(Grape(x) -> (-Edible(x) & -Edible(x) & -Edible(x) & -Edible(x) & -Edible(x) & -Edible(x) & -Edible(x) & -Edible(x) & -Edible(x)))", "all x.(Grape(x) -> (-Edible(x) & -Edible(x) & -Edible(x) & -Edible(x) & -Edible(x) & -Edible(x) & -Edible(x)))", "all x.(Grape(x) -> (-Edible(x) & -Edible(x) & -Edible(x) & -Edible(x) & -Edible(x) & -Edible(x) & -Edible(x) & -Edible(x) & -Edible(x) & -Edible(x)))", "all x.(Grape(x) -> (-Edible(x) & -Edible(x) & -Edible(x) & -Edible(x) & -Edible(x) & -Edible(x)))"]}
{"id": "folio_train_1539", "nl": "Bananas are grass or fruit.", "fol": "(IsGrass(IsBanana) | IsFruit(IsBanana))", "prediction": ["all x.(Banana(x) -> (Grass(x) | Fruit(x)))", "all x.(Banana(x) -> (Grass(x) | Fruit(x)))", "all x y.((Banana(x) & (Grass(y) | Fruit(y))) -> Banana(x))", "all x.((Banana(x) & (Grass(x) | Fruit(x))) -> Banana(x))", "all x y.((Banana(x) & (Grass(y) | Fruit(y))) -> (Grass(x) | Fruit(y)))", "all x y.((Banana(x) & (Grass(y) | Fruit(y))) -> (Grass(y) | Fruit(y)))", "all x y.((Banana(x) & (Grass(y) | Fruit(y))) -> Fruit(x,y))", "all x y.((Banana(x) & (Grass(y) | Fruit(y))) -> Fruit(x))", "all x.(Banana(x) -> (Growth(x) | Fruit(x)))", "all x.(Banana(x) -> (Grass(y) | Fruit(y)))", "all x.(Banana(x) -> (Grocery(x) | Fruit(x)))", "all x y.((Banana(x) & (Grass(y) | Fruit(y))) -> (Fruit(x,y)))", "all x.(Banana(x) -> (Ground(x) | Fruit(x)))", "all x.(Banana(x) -> (Groose(x) | Fruit(x)))", "all x.(Banana(x) -> (Green(x) | Fruit(x)))", "all x.(Banana(x) -> (Groove(x) | Fruit(x)))"]}
{"id": "folio_train_1540", "nl": "Grapes are a food.", "fol": "IsFood(IsGrape)", "prediction": ["all x.(Grape(x) -> Food(x))", "all x y.((Grape(x) & Food(y)) -> Food(x,y))", "all x y.((Grape(x) & Food(y)) -> Food(x))", "all x.(Grape(x) -> Food(x))", "all x.((Grape(x) & Food(x)) -> Food(x))", "all x.(Greek(x) -> Food(x))", "all x.(Rape(x) -> Food(x))", "all x y.((Grape(x) & Food(y)) -> (Food(x) & Food(y)))", "all x y.((Grape(x) & Food(y)) -> Eats(x,y))", "all x y.((Grape(x) & Food(y)) -> Food(y))", "all x.(Rose(x) -> Food(x))", "all x y.((Grape(x) & Food(y)) -> EatenBy(x,y))", "all x.(Graupe(x) -> Food(x))", "all x y.((Grape(x) & Food(y)) -> Food(z))", "all x y.((Grape(x) & Food(y)) -> Is(x,y))", "all x y.((Grape(x) & Food(y)) -> (Food(x) | Food(y)))"]}
{"id": "folio_train_1541", "nl": "Grapes are not a food.", "fol": "-IsFood(IsGrape)", "prediction": ["all x.(Grape(x) -> -Food(x))", "all x y.((Grape(x) & Food(y)) -> -Food(x))", "all x y.((Grape(x) & Food(y)) -> -Food(x,y))", "all x.((Grape(x) & -Food(x)) -> -Food(x))", "all x.(Grape(x) -> -Food(x))", "(all x.(Grape(x) -> -Food(x)))", "all x.(Greek(x) -> -Food(x))", "all x y.((Grape(x) & Food(y)) -> -(Food(x) & Food(y)))", "all x.(Rape(x) -> -Food(x))", "all x.(Graupe(x) -> -Food(x))", "all x y.((Grape(x) & Food(y)) -> -(Food(x) | Food(y))))", "all x y.((Grape(x) & Food(y)) -> -(Food(x,y) & Food(x,y)))", "all x y.((Grape(x) & Food(y) & -Food(x)) -> -Food(x))", "all x y.((Grape(x) & Food(y)) -> -(Food(x) & -Food(y)))", "All x.(Grape(x) -> -Food(x))", "all x y.((Grape(x) & Food(y)) -> -(Food(x,y) & Food(y)))"]}
{"id": "folio_train_1542", "nl": "Bananas are a lemon and meadow.", "fol": "(IsLemon(IsBanana) & IsMeadow(IsBanana))", "prediction": ["all x.(Banana(x) -> (Lemon(x) & Meadow(x)))", "all x.(Banana(x) -> (Limon(x) & Meadow(x)))", "all x.(Banana(x) -> (Lime(x) & Meadow(x)))", "all x.(Banana(x) -> (Lemon(x) & Meadow(x)))", "all x.(Banana(x) -> (Lemon(x) & Meadow(x)))", "all x.(Banana(x) -> (Limon(x) & Meadow(x)))", "all x.(Banana(x) -> (Limon(x) & Meadow(x)))", "all x.(Banana(x) -> (Lion(x) & Meadow(x)))", "all x.(Banana(x) -> (Lime(x) & Meadow(x)))", "all x.(Banana(x) -> (Lime(x) & Meadow(x)))", "all x y.((Banana(x) & Lemon(y)) -> Meadow(x))", "all x.(Banana(x) -> (Lemon(x) | Meadow(x)))", "all x.(Banana(x) -> (Limon(x) | Meadow(x)))", "all x y.((Banana(x) & Lemon(y)) -> Meadow(x,y))", "all x y.((Banana(x) & Lemon(y)) -> Meadow(x))", "all x.( Banana(x) -> (Lemon(x) & Meadow(x)))"]}
{"id": "folio_train_1543", "nl": "Bananas are not both a lemon and a meadow.", "fol": "-(IsLemon(IsBanana) & IsMeadow(IsBanana))", "prediction": ["all x.(Banana(x) -> -(Lemon(x) & Meadow(x)))", "all x.(Banana(x) -> -(Limon(x) & Meadow(x)))", "all x.(Banana(x) -> (-(Lemon(x) & Meadow(x))))", "all x.(Banana(x) -> (-Lemon(x) & -Meadow(x)))", "all x.(Banana(x) -> -(Lemon(x) & Meadow(x)))", "all x.(Banana(x) -> (-Limon(x) & Meadow(x)))", "all x.(Banana(x) -> -(Lion(x) & Meadow(x)))", "all x.(Banana(x) -> (-Limon(x) & -Meadow(x)))", "all x.(Banana(x) -> (-Lemon(x) & Meadow(x)))", "all x.(Banana(x) -> (-(Limon(x) & Meadow(x))))", "all x.(Banana(x) -> -(Limon(x) & Meadow(x)))", "all x.(Banana(x) -> (-Limon(x) & Meadow(x)))", "all x.(Banana(x) -> -(Lemon(x) | Meadow(x)))", "all x.(Banana(x) -> -(Lime(x) & Meadow(x)))", "all x.(Banana(x) -> (-Lemon(x) & Meadow(x)))", "all x.(Banana(x) -> -(Lemon(x) & Meadow(x)))"]}
{"id": "folio_train_1544", "nl": "The Golden State Warriors are a team from San Francisco.", "fol": "(IsTeam(Goldenstatewarriors) & BasedIn(Goldenstatewarriors,Sanfrancisco))", "prediction": ["all x.(GoldenStateWarriors(x) -> TeamFromSanFrancisco(x))", "all x y.((GoldenStateWarrior(x) & SanFrancisco(y)) -> Team(x,y))", "all x y.((GoldenStateWarriors(x) & SanFrancisco(y)) -> Team(x,y))", "all x.(GoldenStateWarrior(x) -> TeamFromSanFrancisco(x))", "all x.(GoldenStateWarriors(x) -> TeamFromSanFrankfort(x))", "all x.(GoldenStateWarriors(x) -> TeamFromSanFernando(x))", "All x.(GoldenStateWarriors(x) -> TeamFromSanFrancisco(x))", "All x.(GoldenStateWarrior(x) -> TeamFromSanFrancisco(x))", "all x.(GoldenStateWarriors(x) -> (TeamFromSanFernando(x) & SanFernando(x)))", "all x.(GoldenStateWarrior(x) -> TeamFromSanFrankfort(x))", "all x.(GoldenStateWarrior(x) -> TeamFromSanFernando(x))", "all x y.((GoldenStateWarrior(x) & SanFrancisco(y)) -> TeamFrom(x,y))", "all x.(GoldenStateWarriors(x) -> (TeamFromSanFernando(x) & FromSanFernando(x)))", "all x y.((GoldenStateWarriors(x) & SanFrancisco(y)) -> TeamFrom(x,y))", "All x.(GoldenStateWarriors(x) -> TeamFromSanFrankfort(x))", "all x.(GoldenStateWarriors(x) -> (TeamFromSanFrancisco(x) & SanFrancisco(x)))"]}
{"id": "folio_train_1545", "nl": "The Golden State Warriors won the NBA finals.", "fol": "WonNBAFinals(Goldenstatewarriors,Nbafinals)", "prediction": ["all x y.((GoldenStateWarriors(x) & NBAFinals(y)) -> Won(x,y))", "all x y.((GoldenStateWarrior(x) & NBAFinals(y)) -> Won(x,y))", "all x y.((GoldenStateWarrior(x) & NBAFinal(y)) -> Won(x,y))", "All x y.((GoldenStateWarrior(x) & NBAFinals(y)) -> Won(x,y))", "all x y z.((GoldenStateWarrior(x) & NBAFinal(y) & Final(z)) -> Won(x,y,z))", "All x.(GoldenStateWarrior(x) -> WonNBAFinals(x))", "All x y.((GoldenStateWarriors(x) & NBAFinals(y)) -> Won(x,y))", "all x y.((GoldenStateWarriors(x) & NBAFinal(y)) -> Won(x,y))", "all x.(GoldenStateWarriors(x) -> WonNBAFinals(x))", "All x y.((GoldenStateWarrior(x) & NBAFinal(y)) -> Won(x,y))", "All x.(GoldenStateWarriors(x) -> WonNBAFinals(x))", "all x y.((GoldenStateWarriors(x) & NBAFinals(y)) -> Wins(x,y))", "all x y.((GoldenStateWarrior(x) & NBAFinals(y)) -> Wins(x,y))", "all x.(GoldenStateWarrior(x) -> WonNBAFinals(x))", "all x y z.((GoldenStateWarrior(x) & NBAFinal(y) & Final(z)) -> Wins(x,y,z))", "all x y.((GoldenStateWarrior(x) & NBAFinal(y)) -> Wins(x,y))"]}
{"id": "folio_train_1546", "nl": "All teams attending the NBA finals have more than thirty years of history.", "fol": "all x.((IsTeam(x) & IsAttendingNBAFinals(x,Nbafinals)) -> HasMoreThanYears(x,Thirtyyearsofhistory))", "prediction": ["all x.((Team(x) & AttendsNBAFinals(x)) -> MoreThanThreeYearsOfHistory(x))", "all x.((Team(x) & AttendsNBAFinals(x)) -> HasMoreThanThreeYearsOfHistory(x))", "all x.((Team(x) & AttendsNBAFinals(x)) -> MoreThanThirtyYearsOfHistory(x))", "all x.((Team(x) & AttendsNBAFinals(x,3)) -> MoreThanThreeYearsOfHistory(x))", "all x y.((Team(x) & NBAFinals(y) & Attends(x,y)) -> MoreThanThreeYearsOfHistory(x))", "all x.((Team(x) & AttendsNBAFinals(x)) -> MoreThan(x,30))", "all x.((Team(x) & AttendsNBAFinals(x,y)) -> MoreThanThreeYearsOfHistory(x))", "all x.((Team(x) & AttendsNBAFinals(x)) -> HasMoreThanThirtyYearsOfHistory(x))", "all x y.((Team(x) & NBAFinals(y) & Attends(x,y)) -> MoreThanThreeYearsOfHistory(x,y))", "all x.((Team(x) & AttendsBasketballFinals(x)) -> MoreThanThreeYearsOfHistory(x))", "all x y.((Team(x) & Team(y) & AttendsNBAFinals(x,y)) -> MoreThanThreeYearsOfHistory(x))", "all x.((Team(x) & AttendsNBAFinals(x,30)) -> MoreThanThreeYearsOfHistory(x))", "all x y.((Team(x) & NBAFinal(y) & Attends(x,y)) -> MoreThanThreeYearsOfHistory(x))", "all x y.((Team(x) & Team(y) & AttendsNBAFinals(x,y)) -> MoreThanThreeYearsOfHistory(x,y))", "all x.(AttendsNBAFinals(x) -> MoreThanThreeYearsOfHistory(x))", "all x y.((Team(x) & NBAFinals(y) & Attends(x,y)) -> HasMoreThanThreeYearsOfHistory(x))"]}
{"id": "folio_train_1547", "nl": "Boston Celtics are a team that lost the NBA finals.", "fol": "(IsTeam(Bostonceltics) & LostNBAFinals(Bostonceltics,Nbafinals))", "prediction": ["all x.(BostonCelebrities(x) -> LosesNBAFinals(x))", "all x.((BostonCelebrities(x) & LosesNBAFinals(x)) -> Celtics(x))", "all x y.((BostonCelebrities(x) & NBAFinals(y)) -> Loses(x,y))", "all x.((BostonCelebrities(x) & LosesNBAFinals(x)) -> CelticsTeam(x))", "all x y.((BostonCelebrities(x) & NBAFinals(y)) -> Lost(x,y))", "all x.((BostonCelebrity(x) & LosesNBAFinals(x)) -> Celtics(x))", "all x y.((BostonCelebrity(x) & NBAFinals(y)) -> Loses(x,y))", "all x y.((BostonCeltics(x) & NBAFinals(y)) -> Loses(x,y))", "all x y.((BostonCelebrity(x) & NBAFinals(y)) -> Lost(x,y))", "all x y.((BostonCeltics(x) & NBAFinals(y)) -> Lost(x,y))", "all x.(BostonCelebrities(x) -> (LoseNBAFinals(x) | LoseNBAFinals(x)))", "all x.(BostonCelebrities(x) -> LostNBAFinals(x))", "all x.((BostonCeltics(x) & LosesNBAFinals(x)) -> CelticsTeam(x))", "all x.(BostonCelebrities(x) -> (LoseNBAFinals(x)))", "all x.((BostonCelebrity(x) & LosesNBAFinals(x)) -> CelticsTeam(x))", "all x.((BostonCeltics(x) & LosesNBAFinals(x)) -> Team(x))"]}
{"id": "folio_train_1548", "nl": "If a team wins the NBA finals, then they will have more income.", "fol": "all x.((IsTeam(x) & WonNBAFinals(x,Nbafinals)) -> WillHaveMoreIncome(x))", "prediction": ["all x.((Team(x) & WinsNBAFinals(x)) -> MoreIncome(x))", "all x.(WinsNBAFinals(x) -> MoreIncome(x))", "all x.((Team(x) & WinsNBAFinals(x)) -> HasMoreIncome(x))", "all x y.((Team(x) & WinsNBAFinals(x)) -> MoreIncome(x,y))", "all x y.((Team(x) & WinsNBAFinals(x,y)) -> MoreIncome(x))", "all x y.((Team(x) & WinsNBAFinals(x,y)) -> MoreIncome(x,y))", "all x.((Team(x) & Wins NBAFinals(x)) -> MoreIncome(x))", "all x.(WonNBAFinals(x) -> MoreIncome(x))", "all x y.((Team(x) & WinsNBAFinals(x) & Income(y)) -> MoreIncome(x,y))", "all x y.((Team(x) & WinsNBAFinals(x)) -> MoreIncome(x))", "all x y.((Team(x) & WinsNBAFinals(x) & NBAFinals(y)) -> MoreIncome(x,y))", "all x y.((Team(x) & WinsNBAFinals(x)) -> MoreIncome(y))", "all x.((Team(x) & WinsNBAFinals(x)) -> MoreIncomes(x))", "all x.(WinsNBAFinals(x) -> HasMoreIncome(x))", "all x.((Team(x) & WinsNBAFinals(x)) -> IncreasedIncome(x))", "all x y.((Team(x) & WinsNBAFinals(x)) -> HasMoreIncome(x,y))"]}
{"id": "folio_train_1549", "nl": "If a team wins or loses at the NBA finals, then they are attending the finals.", "fol": "all x.((WonNBAFinals(x,Nbafinals) | LostNBAFinals(x,Nbafinals)) -> IsAttendingNBAFinals(x,Nbafinals))", "prediction": ["all x.((Team(x) & WinsOrLosesAtNBAFinals(x)) -> AttendingFinals(x))", "all x.((Team(x) & (Wins(x) | Loses(x))) -> AttendingFinals(x))", "all x.((Team(x) & (WinsAtNBAFinals(x) | LosesAtNBAFinals(x))) -> AttendingFinals(x))", "all x.((Team(x) & (WinsAtFinals(x) | LosesAtFinals(x))) -> AttendingFinals(x))", "all x.((Team(x) & WinsOrLosesAtFinals(x)) -> AttendingFinals(x))", "all x.((Team(x) & (Wins(x) | Loses(x)) & NBAFinals(x)) -> AttendingFinals(x))", "all x.((Team(x) & WinsAtNBAFinals(x) & LosesAtNBAFinals(x)) -> AttendingFinals(x))", "all x.((Team(x) & (Wins(x) | Loses(x))) -> AttendsFinals(x))", "all x.((Team(x) & (WinsNBAFinals(x) | LosesAtNBAFinals(x))) -> AttendingFinals(x))", "all x y.((Team(x) & WinsOrLosesAtNBAFinals(x) & Finals(y)) -> Attending(x,y))", "all x.((Team(x) & (WinsAtNBAFinals(x) | LosesAtNBAFinals(x))) -> AttendsFinals(x))", "all x y.((Team(x) & (Wins(x) | Loses(x)) & NBAFinals(y)) -> AttendingFinals(x,y))", "all x.(WinsOrLosesAtNBAFinals(x) -> AttendingFinals(x))", "all x y.((Team(x) & WinsOrLosesAtNBAFinals(x)) -> AttendingFinals(x))", "all x.((Team(x) & (Wins(x) | Loses(x)) & Finals(x)) -> Attending(x))", "all x.((Team(x) & WinsOrLosesAtNBAFinals(x)) -> AttendsFinals(x))"]}
{"id": "folio_train_1550", "nl": "The Boston Celtics is from San Francisco.", "fol": "BasedIn(Bostonceltics,Sanfrancisco)", "prediction": ["All x.(BostonCrickets(x) -> SanFrancisco(x))", "All x.(BostonCrickets(x) -> SanFernando(x))", "All x.(BostonCrickets(x) -> FromSanFrancisco(x))", "All x.(BostonCrickets(x) -> SanFrancois(x))", "All x y.((BostonCrickets(x) & SanFrancisco(y)) -> From(x,y))", "all x.(BostonCrickets(x) -> SanFrancisco(x))", "All x.(BostonCrickets(x) -> FromSanFernando(x))", "all x.(BostonCrickets(x) -> SanFernando(x))", "All x y.((BostonCrickets(x) & SanFrancisco(y)) -> LocatedIn(x,y))", "All x.(BostonClocks(x) -> SanFrancisco(x))", "The BostonCrickets(Boston) & SanFrancisco(Boston))", "All x.(BostonCrickets(x) -> SanFrankfort(x))", "All x.(BostonCelebrities(x) -> SanFrancisco(x))", "All x.((BostonCrickets(x) & SanFrancisco(x)) -> From(x,y))", "All x.((BostonCrickets(x) & SanFrancisco(x)) -> LocatedIn(x,y))", "All x.(BostonClocks(x) -> SanFernando(x))"]}
{"id": "folio_train_1551", "nl": "The Boston Celtics has more than 30 years of history.", "fol": "HasMoreThanYears(Bostonceltics,Thirtyyearsofhistory)", "prediction": ["all x.(BostonCrickets(x) -> HasMoreThan30YearsOfHistory(x))", "all x.(BostonCrickets(x) -> MoreThan30YearsOfHistory(x))", "all x.((BostonCrickets(x) & MoreThan30YearsOfHistory(x)) -> Celtics(x))", "All x.(BostonCrickets(x) -> HasMoreThan30YearsOfHistory(x))", "All x.(BostonCrickets(x) -> MoreThan30YearsOfHistory(x))", "all x.((BostonCrickets(x) & MoreThan30YearsOfHistory(x)) -> HasHistory(x))", "all x.(BostonCelebrities(x) -> HasMoreThan30YearsOfHistory(x))", "all x.((BostonCrickets(x) & MoreThan(x,30)) -> HasHistory(x))", "all x.(BostonCeltics(x) -> HasMoreThan30YearsOfHistory(x))", "all x.((BostonCrickets(x) & MoreThan30YearsOfHistory(x)) -> Has(x,y))", "all x.(BostonCelebrities(x) -> MoreThan30YearsOfHistory(x))", "all x.((BostonCrickets(x) & MoreThan30YearsOfHistory(x)) -> BostonCrickets(x))", "all x.(BostonCrickets(x) -> MoreThan(x,30))", "all x.(BostonClocks(x) -> MoreThan30YearsOfHistory(x))", "all x y.((BostonCrickets(x) & Celtics(y)) -> HasHistory(x,y))", "all x.((BostonCrickets(x) & HasHistory(x,30)) -> HasHistory(x))"]}
{"id": "folio_train_1552", "nl": "The Golden State Warriors will have more income for gate receipts.", "fol": "WillHaveMoreIncome(Goldenstatewarriors)", "prediction": ["all x.(GoldenStateWarrior(x) -> MoreIncomeForGateReceipts(x))", "all x.(GoldenStateWarrior(x) -> MoreIncomeForGateReceives(x))", "all x y.((GoldenStateWarrior(x) & GateReceipt(y)) -> MoreIncome(x,y))", "all x.(GoldenStateWarrior(x) -> HasMoreIncomeForGateReceipts(x))", "all x y.((GoldenStateWarrior(x) & GateReceipt(y)) -> MoreIncomeFor(x,y))", "all x.(GoldenStateWarrior(x) -> HasMoreIncomeForGateReceives(x))", "all x y.((GoldenStateWarrior(x) & GateReceipt(y)) -> HasMoreIncome(x,y))", "all x.(GoldenStateWarrior(x) -> (HasMoreIncomeForGateReceipts(x)))", "all x y.((GoldenStateWarrior(x) & GateReceipt(y)) -> HasMoreIncomeFor(x,y))", "all x y.((GoldenStateWarrior(x) & GateGateReceipt(y)) -> MoreIncome(x,y))", "all x.(GoldenStateWarrior(x) -> (HasMoreIncomeForGateReceives(x)))", "all x.(GoldenStateWarrior(x) -> MoreIncome(x,GateReceipts))", "all x y.((GoldenStateWarrior(x) & GateReceipts(y)) -> MoreIncome(x,y))", "all x y.((GoldenStateWarrior(x) & GateReceive(y)) -> MoreIncome(x,y))", "All x.(GoldenStateWarrior(x) -> MoreIncomeForGateReceipts(x))", "all x.(GoldenStateWarrior(x) -> HasMoreIncome(x,GateReceipts))"]}
{"id": "folio_train_1553", "nl": "Maya will play violin if and only if she never injures her fingers.", "fol": "(CanInjureFingers(Maya) -> -WillPlayViolin(Maya))", "prediction": ["all x.((Maya(x) & -InjuresFingers(x)) -> WillPlayViolin(x))", "all x.((Maya(x) & -InjuresFingers(x)) -> PlaysViolin(x))", "all x.((Maya(x) & -InjuresFingers(x)) -> PlayViolin(x))", "all x.((Maya(x) & NeverInjuresFingers(x)) -> WillPlayViolin(x))", "all x y.((Maya(x) & Fingers(y) & -Injures(x,y)) -> WillPlayViolin(x,y))", "all x y.((Maya(x) & Fingers(y) & -Injures(x,y)) -> WillPlayViolin(x))", "all x.((Maya(x) & NeverInjuresFingers(x)) -> PlaysViolin(x))", "all x y.((Maya(x) & Fingers(y) & -Injures(x,y)) -> PlaysViolin(x))", "all x.((Maya(x) & -InjuresFingers(x)) -> Playviolin(x))", "all x y.((Maya(x) & Fingers(y) & -Injures(x,y)) -> PlaysViolin(x,y))", "all x y.((Maya(x) & Fingers(y) & -Injures(x,y)) -> WillPlay(x,y))", "all x.((Maya(x) & -InjuresFingers(x)) -> Violin(x))", "all x.((Maya(x) & PlaysViolin(x) & -InjuresFingers(x)) -> WillPlayViolin(x))", "all x.((Maya(x) & InjuresFingers(x)) -> WillPlayViolin(x))", "all x y.((Maya(x) & Finger(y) & -Injures(x,y)) -> WillPlayViolin(x,y))", "all x.((Maya(x) & PlaysViolin(x)) -> -InjuresFingers(x))"]}
{"id": "folio_train_1554", "nl": "Volleyball players can injure their ankle, fingers, or shoulder.", "fol": "all x.(IsVolleyballPlayer(x) -> CanInjureFingers(x))", "prediction": ["all x.(VolleyballPlayer(x) -> (InjuresAnkle(x) | InjuresFingers(x) | InjuresShoulder(x)))", "all x.(VolleyballPlayer(x) -> (InjureAnkle(x) | InjureFingers(x) | InjureShoulder(x)))", "all x.(VolleyballPlayer(x) -> (Injure(x,ankle) | Injure(x,fingers) | Injure(x,shoulder)))", "all x.(VolleyballPlayer(x) -> (InjuresAngle(x) | InjuresFingers(x) | InjuresShoulder(x)))", "all x.(VolleyballPlayer(x) -> (InjuresAngel(x) | InjuresFingers(x) | InjuresShoulder(x)))", "all x.(VolleyballPlayer(x) -> (Injure(x,Ankle) | Injure(x,Fingers) | Injure(x,Shoulder)))", "all x.(VolleyballPlayer(x) -> (Injure(x,ankle) | Injure(x,fingers) | Injure(x,shoulder)))", "all x.(VolleyballPlayer(x) -> (Injures(x,ankle) | Injures(x,fingers) | Injures(x,shoulder)))", "all x.(VolleyballPlayer(x) -> (InjureAngle(x) | InjureFingers(x) | InjureShoulder(x)))", "all x.(VolleyballPlayer(x) -> (InjuresAnkle(x) | InjuresFingers(x) | InjuresShould(x)))", "all x y.((VolleyballPlayer(x) & (Ankle(y) | Fingers(y) | Shoulder(y))) -> CanInjure(x,y))", "all x y.((VolleyballPlayer(x) & (Ankle(y) | Fingers(y) | Shoulder(y))) -> Injures(x,y))", "all x y.((VolleyballPlayer(x) & (Ankle(y) | Fingers(y) | Shoulder(y))) -> Injure(x,y))", "all x y.((VolleyballPlayer(x) & (Ankle(y) | Finger(y) | Shoulder(y))) -> CanInjure(x,y))", "all x.(VolleyballPlayer(x) -> (Injure(x,ankle) | Injure(x,finger) | Injure(x,shoulder)))", "all x y.((VolleyballPlayer(x) & (Ankle(y) | Finger(y) | Shoulder(y))) -> Injure(x,y))"]}
{"id": "folio_train_1555", "nl": "Maya is a volleyball player.", "fol": "IsVolleyballPlayer(Maya)", "prediction": ["all x.(Maya(x) -> VolleyballPlayer(x))", "all x.((Maya(x) & VolleyballPlayer(x)) -> Plays(x,y))", "all x.(VolleyballPlayer(x) -> Maya(x))", "all x.((Maya(x) & VolleyballPlayer(x)) -> Plays(x))", "all x y.((Maya(x) & VolleyballPlayer(y)) -> Plays(x,y))", "All x.(Maya(x) -> VolleyballPlayer(x))", "all x.((Maya(x) & VolleyballPlayer(x)) -> CanPlay(x))", "all x.((Maya(x) & VolleyballPlayer(x)) -> PlayedBy(x,y))", "all x.((Maya(x) & VolleyballPlayer(x)) -> PlaysIn(x,y))", "all x.((Maya(x) & VolleyballPlayer(x)) -> Plays(x,Maya))", "all x.((Maya(x) & VolleyballPlayer(x)) -> Has(x,y))", "(VolleyballPlayer(Maya) & -VolleyballPlayer(Maya))", "all x y.((Maya(x) & VolleyballPlayer(y)) -> PlayedBy(x,y))", "all x.((Maya(x) & VolleyballPlayer(x)) -> Maya(x))", "all x.((Maya(x) & VolleyballPlayer(x)) -> CanPlay(x,y))", "(VolleyballPlayer(Maya) & Plays(Maya,Volleyball))"]}
{"id": "folio_train_1556", "nl": "Maya will not play violin.", "fol": "-WillPlayViolin(Maya)", "prediction": ["all x.(Maya(x) -> -PlaysViolin(x))", "all x.(Maya(x) -> -PlayViolin(x))", "all x y.((Maya(x) & Violin(y)) -> -Plays(x,y))", "All x.(Maya(x) -> -PlaysViolin(x))", "All x.(Maya(x) -> -PlayViolin(x))", "all x y.((Maya(x) & Violin(y)) -> -Play(x,y))", "all x.(Maya(x) -> -Play(x,Violin))", "all x.(Maya(x) -> -(PlaysViolin(x) | PlaysViolin(x))))", "exists x.(Maya(x) & -PlaysViolin(x))", "all x.(Maya(x) -> -(PlaysViolin(x) | PlaysViolin(x)))", "exists x.(Maya(x) & -PlayViolin(x))", "all x.(Maya(x) -> -(PlaysViolin(x) & PlaysViolin(x)))", "all x.(Maya(x) -> -playsViolin(x))", "all x.(Maya(x) -> -Playviolin(x))", "all x.(Maya(x) -> -Play(x,violin))", "(-PlaysViolin(Maya))"]}
{"id": "folio_train_1557", "nl": "All devices with the company logo belong to the company. ", "fol": "all x.(HasCompanyLogo(x) -> BelongsToCompany(x))", "prediction": ["all x.((Device(x) & HasCompanyLogo(x)) -> BelongsToCompany(x))", "all x.((Device(x) & CompanyLogo(x)) -> BelongsTo(x,Company))", "all x y.((Device(x) & CompanyLogo(y)) -> BelongsTo(x,y))", "all x.((Device(x) & CompanyLogo(x)) -> BelongsToCompany(x))", "all x.((Device(x) & HasCompanyLogo(x)) -> CompanyBelongsTo(x,Company))", "all x.((Device(x) & CompanyLogo(x)) -> CompanyBelongsTo(x,y))", "all x y.((Device(x) & CompanyLogo(y) & Has(x,y)) -> BelongsTo(x,y))", "all x.((Device(x) & CompanyLogo(x)) -> BelongsTo(x,company))", "all x.((Device(x) & CompanyLogo(x)) -> CompanyBelongsTo(x))", "all x.((Device(x) & CompanyLogo(x)) -> Company(x))", "all x.((Device(x) & HasCompanyLogo(x)) -> Company(x))", "all x.((Device(x) & HasCompanyLogo(x)) -> CompanyBelongsTo(x))", "all x y.((Device(x) & CompanyLogo(x)) -> BelongsTo(x,y))", "all x y z.((Device(x) & CompanyLogo(y) & Device(z) & HasLogo(x,y)) -> BelongsTo(z,y))", "all x y z.((Device(x) & CompanyLogo(y) & Device(z) & HasLogo(x,y)) -> BelongsTo(x,z))", "all x.((Device(x) & HasCompanyLogo(x)) -> BelongToCompany(x))"]}
{"id": "folio_train_1558", "nl": "A device is either with the company logo or belongs to employees. ", "fol": "all x.(HasCompanyLogo(x) | BelongsToEmployee(x))", "prediction": ["all x.(Device(x) -> (WithCompanyLogo(x) | BelongsToEmployees(x)))", "all x.(Device(x) -> (HasCompanyLogo(x) | BelongsToEmployees(x)))", "all x.(Device(x) -> (exists y.(CompanyLogo(y) & Has(x,y))) | exists z.(Employee(z) & Has(x,z)))))", "all x.(Device(x) -> (CompanyLogo(x) | Employees(x)))", "all x.(Device(x) -> ((WithCompanyLogo(x) | BelongsToEmployees(x))))", "all x.(Device(x) -> (exists y.(CompanyLogo(y) & Has(x,y))) | exists z.(Employee(z) & BelongsTo(x,z)))))", "all x.(Device(x) -> ((CompanyLogo(x) | Employees(x))))", "all x.(Device(x) -> (exists y.(CompanyLogo(y) & Has(x,y)) | exists z.(Employee(z) & Has(x,z)))))", "all x.(Device(x) -> (HasLogo(x) | BelongsToEmployees(x)))", "all x.(Device(x) -> (exists y.(CompanyLogo(y) & HasLogo(x,y))) | exists z.(Employee(z) & HasLogo(x,z)))))", "all x.(Device(x) -> (BelongsToCompanyLogo(x) | BelongsToEmployees(x)))", "all x.(Device(x) -> (exists y.(CompanyLogo(y) & Has(x,y))) | Exists z.(Employee(z) & Has(x,z)))))", "all x.(Device(x) -> (exists y.(CompanyLogo(y) & HasLogo(x,y)) | exists z.(Employee(z) & HasLogo(x,z)))))", "all x.(Device(x) -> (exists y.(CompanyLogo(y) & Has(x,y)) | exists z.(Employee(z) & BelongsTo(x,z)))))", "all x.(Device(x) -> (exists y.(CompanyLogo(y) & HasLogo(x,y))) | exists z.(Employee(z) & BelongsTo(x,z)))))", "all x.(Device(x) -> (CompanyLogo(x) | EmployeesLogo(x)))"]}
{"id": "folio_train_1559", "nl": "All devices belonging to employees are available to connect to the company's wifi. ", "fol": "all x.(BelongsToEmployee(x) -> AvailableToConnectToWifi(x))", "prediction": ["all x y.((Device(x) & Employee(y)) -> ConnectsToWifi(x,y))", "all x y.((Device(x) & Employee(y)) -> ConnectsToWiFi(x,y))", "all x.((Device(x) & Employee(x)) -> AvailableToConnectToWifi(x))", "all x.((Device(x) & Employee(x)) -> AvailableToConnectToWiFi(x))", "all x y.((Device(x) & Employee(y)) -> AvailableToConnectToWifi(x,y))", "all x y.((Device(x) & Employee(y)) -> AvailableToConnectToWiFi(x,y))", "all x.((Device(x) & Employee(x)) -> ConnectsToWifi(x))", "all x.((Device(x) & Employee(x)) -> ConnectsToWiFi(x))", "all x y.((Device(x) & Employee(y) & ConnectsToWifi(x,y)) -> AvailableToConnectTo(x,y))", "all x.(EmployeeDevice(x) -> AvailableToConnectToWiFi(x))", "all x.(EmployeeDevice(x) -> AvailableToConnectToWifi(x))", "all x y.((Device(x) & Employee(y) & ConnectsToWiFi(x,y)) -> AvailableToConnectTo(x,y))", "all x.(EmployeeDevice(x) -> ConnectsToWiFi(x))", "all x.(EmployeeDevice(x) -> ConnectsToWifi(x))", "all x.((Device(x) & Employee(x)) -> ConnectsToWifi(x,Company))", "all x.((Device(x) & Employee(x)) -> AvailableToConnectToWifi(x,Company))"]}
{"id": "folio_train_1560", "nl": "All devices connected to Google Home are controlled by managers. ", "fol": "all x.(ConnectedToGoogleHome(x) -> ManagedControl(x))", "prediction": ["all x.((Device(x) & ConnectedToGoogleHome(x)) -> ControlledByManager(x))", "all x.((Device(x) & ConnectedToGoogleHome(x)) -> ControlledByManagers(x))", "all x.((Device(x) & ConnectedToGoogleHome(x)) -> ManagedByManager(x))", "all x.((Device(x) & ConnectedToGoogleHome(x)) -> ManagedByManagers(x))", "all x.((Device(x) & ConnectedToGoogleHome(x)) -> ControledByManagers(x))", "all x.((Device(x) & ConnectedToGoogleHome(x)) -> ControledByManager(x))", "all x y.((Device(x) & GoogleHome(y)) -> ControlledByManager(x,y))", "all x y z.((Device(x) & GoogleHome(y) & Manager(z)) -> ControlledBy(x,y,z))", "all x y.((Device(x) & GoogleHome(y) & ConnectedTo(x,y)) -> ControlledByManager(x))", "all x y.((Device(x) & GoogleHome(y)) -> ControlledByManagers(x,y))", "all x y.((Device(x) & GoogleHome(y)) -> ManagedByManager(x,y))", "all x y.((Device(x) & GoogleHome(y) & ConnectedTo(x,y)) -> ControlledByManagers(x))", "all x y.((Device(x) & ConnectedToGoogleHome(x)) -> ControlledByManager(y))", "all x y.((Device(x) & GoogleHome(y) & ConnectedTo(x,y)) -> ManagedByManager(x))", "all x y.((Device(x) & GoogleHome(y)) -> ControledByManager(x,y))", "all x.(GoogleHome(x) -> ControlledByManagers(x))"]}
{"id": "folio_train_1561", "nl": "All devices that are easy to operate are produced after 2020. ", "fol": "all x.(UserFriendly(x) -> ProducedAfter2020(x))", "prediction": ["all x.((Device(x) & EasyToOperate(x)) -> ProducedAfter2020(x))", "all x.(EasyToOperate(x) -> ProducedAfter2020(x))", "all x.((Device(x) & EasyToOperate(x)) -> ProducedAfter2020(x))", "all x y.((Device(x) & EasyToOperate(x)) -> ProducedAfter2020(x))", "all x y.((Device(x) & EasyToOperate(x)) -> ProducedAfter2020(y))", "all x.((Device(x) & EasyToOperate(x)) -> ProducedAfter2020(x))", "all x.((Device(x) & EaseToOperate(x)) -> ProducedAfter2020(x))", "all x.((Device(x) & EasyOperation(x)) -> ProducedAfter2020(x))", "all x.((Device(x) & EasyToOperate(x)) -> ProductedAfter2020(x))", "all x.((Device(x) & EasyToOperate(x)) -> ProductionProducedAfter2020(x))", "all x.((Device(x) & EasyToOperate(x)) -> MadeAfter2020(x))", "all x.((Device(x) & EasyToOperate(x)) -> ProducedAt2020(x))", "all x.((Device(x) & EasyToOperate(x)) -> ProducedAfter2020.", "all x.((Device(x) & EasyToOperate(x)) -> ProducedAround2020(x))", "all x.((Device(x) & EasyToOperate(x)) -> ProductionAfter2020(x))", "all x.((Device(x) & EasyToOperate(x)) -> ProducedAsAfter2020(x))"]}
{"id": "folio_train_1562", "nl": "IPod1 is produced before 2020. ", "fol": "-ProducedAfter2020(IPod1)", "prediction": ["all x.(IPod1(x) -> ProducedBefore2020(x))", "all x.(IPod(x) -> ProducedBefore2020(x))", "All x.(IPod1(x) -> ProducedBefore2020(x))", "all x.(Pod1(x) -> ProducedBefore2020(x))", "all x.((Pod1(x) & ProducedBefore2020(x)) -> ProducedBefore2020(x))", "All x.(IPod(x) -> ProducedBefore2020(x))", "all x.(IPod1(x) -> (ProducedBefore2020(x)))", "all x.(IPod1(x) -> ProducedBy2020(x))", "all x.(Pod(x) -> ProducedBefore2020(x))", "all x.(IPod(x) -> (ProducedBefore2020(x)))", "all x.((Pod(x) & ProducedBefore2020(x)) -> IPod1(x))", "all x.((Pod1(x) & ProducedBefore2020(x)) -> ProducedBy2020(x))", "all x.((Pod(x) & ProducedBefore2020(x)) -> ProducedBefore2020(x))", "IPod1 exists x.(ProducedBefore2020(x))", "all x.(IPod1(x) -> ProducedBefore2020(x))", "all x.((Pod1(x) & ProducedBefore2020(x)) -> IPod1(x))"]}
{"id": "folio_train_1563", "nl": "IPod1 is controlled by managers.", "fol": "ManagedControl(IPod1)", "prediction": ["all x.(IPod1(x) -> ControlledByManagers(x))", "all x.(IPod1(x) -> ControledByManagers(x))", "all x.(IPod(x) -> ControlledByManagers(x))", "all x y.((Pod(x) & Manager(y)) -> ControlledBy(x,y))", "all x.(IPod1(x) -> ManagedByManagers(x))", "all x.(IPod(x) -> ControledByManagers(x))", "all x y.((IPod(x) & Manager(y)) -> ControlledBy(x,y))", "all x y.((Pod(x) & Manager(y)) -> Controls(x,y))", "IPod1 is controlled by Managers.", "all x.(Pod1(x) -> ControlledByManagers(x))", "all x y.((Pod(x) & Manager(y)) -> ControledBy(x,y))", "all x.(IPod(x) -> ManagedByManagers(x))", "all x.(IPod1(x) -> ControlledByManager(x))", "all x.(Pod(x) -> ControlledByManagers(x))", "All x.(IPod1(x) -> ControlledByManagers(x))", "all x y.((IPod(x) & Manager(y)) -> Controls(x,y))"]}
{"id": "folio_train_1564", "nl": "IPod1 is either produced after 2020 or controlled by managers.", "fol": "(ProducedAfter2020(IPod1) | ManagedControl(IPod1))", "prediction": ["all x.(IPod1(x) -> (ProducedAfter2020(x) | ControlledByManagers(x)))", "all x.(IPod(x) -> (ProducedAfter2020(x) | ControlledByManagers(x)))", "all x.(Pod1(x) -> (ProducedAfter2020(x) | ControlledByManagers(x)))", "all x.(Pod(x) -> (ProducedAfter2020(x) | ControlledByManagers(x)))", "all x.(IPod1(x) -> (ProducedAfter2020(x) | ControlledByManagers(x)))", "all x.(IPod1(x) -> (ProducedAfter2020(x) | ControledByManagers(x)))", "All x.(IPod1(x) -> (ProducedAfter2020(x) | ControlledByManagers(x)))", "all x.(IPod1(x) -> ((ProducedAfter2020(x) | ControlledByManagers(x))))", "all x.(Ipod1(x) -> (ProducedAfter2020(x) | ControlledByManagers(x)))", "all x.(iPod1(x) -> (ProducedAfter2020(x) | ControlledByManagers(x)))", "all x.((Pod1(x) & (ProducedAfter2020(x) | ControlledByManagers(x))) -> ProducedAfter2020(x))", "all x.(IPod1(x) -> (ProducedAfter2020(x) | DesignedByManagers(x)))", "all x.(IPod1(x) -> (ProducedAfter2020(x) | ManagedByManagers(x)))", "all x.(IPod1.(x) -> (ProducedAfter2020(x) | ControlledByManagers(x)))", "exists x.(IPod1(x) & (ProducedAfter2020(x) | ControlledByManagers(x)))", "all x.(IPod1(x) -> (ProducedAfter2020(x) | ControlledByManager(x)))"]}
{"id": "folio_train_1565", "nl": "IPod1 is not with the company logo, and managers do not control it.", "fol": "(-HasCompanyLogo(IPod1) & -ManagedControl(IPod1))", "prediction": ["(all x.(IPod1(x) -> -CompanyLogo(x)) & all y.(Manager(y) -> -Controls(y,x)))", "all x.(IPod1(x) -> (-exists y.(CompanyLogo(y) & HasLogo(x,y)) & exists z.(Manager(z) & -exists w.(CompanyLogo(w) & HasLogo(z,w)))))", "(all x.(IPod1(x) -> -CompanyLogo(x)) & all y.(Manager(y) -> -ControlsIPod1(y)))", "(all x.(IPod1(x) -> -WithLogo(x)) & all y.(Manager(y) -> -ControlsLogo(y)))", "(all x.(IPod1(x) -> -WithLogo(x)) & all y.(Manager(y) -> -Controls(y,x)))", "(all x.(IPod1(x) -> -WithLogo(x)) & all y.(Manager(y) -> -ControlsIPod1(y)))", "all x.(IPod1(x) -> (-exists y.(CompanyLogo(y) & HasLogo(x,y)) & exists z.(Manager(z) & -exists w.(CompanyLogo(w) & HasLogo(z,w)) & -exists w.(CompanyLogo(w) & HasLogo(z,w)))))", "(all x.(IPod1(x) -> -CompanyLogo(x)) & all y.(Manager(y) -> -CompanyLogo(y)))", "all x.(IPod1(x) -> (-exists y.(CompanyLogo(y) & HasLogo(x,y)) & -exists z.(Manager(z) & Controls(z,x))))", "all x.(IPod1(x) -> (-exists y.(CompanyLogo(y) & HasLogo(x,y)) & exists z.(Manager(z) & -exists w.(CompanyLogo(w) & HasLogo(z)) & -exists w.(CompanyLogo(w) & HasLogo(z,w)))))", "(all x.(IPod1(x) -> -CompanyLogo(x)) & all y.(Manager(y) -> -ControlsIPod1)))", "all x.(IPod1(x) -> (-exists y.(CompanyLogo(y) & HasLogo(x,y)) & exists z.(Manager(z) & -exists w.(CompanyLogo(w) & HasLogo(z,w))) & -exists w.(ManagementLogo(w) & HasLogo(z,w)))))", "all x.(IPod1(x) -> (-exists y.(CompanyLogo(y) & HasLogo(x,y)) & exists z.(Manager(z) & -exists w.(CompanyLogo(w) & HasLogo(z,w))) & -exists w.(CompanyLogo(w) & HasLogo(z,w)))))", "all x.(IPod1(x) -> (-exists y.(CompanyLogo(y) & HasLogo(x,y)) & exists z.(Manager(z) & -exists w.(CompanyLogo(w) & HasLogo(z,w)) & -exists w.(CompanyLogo(w) & HasLogo(w)))))", "all x.(IPod1(x) -> (-exists y.(CompanyLogo(y) & HasLogo(x,y)) & exists z.(Manager(z) & Controls(z,x))))", "all x.(IPod1(x) -> (-exists y.(CompanyLogo(y) & HasLogo(x,y)) & exists z.(Manager(z) & -exists w.(CompanyLogo(w) & HasLogo(z,w)) & -exists w.(ManagementLogo(w) & HasLogo(z,w)))))"]}
{"id": "folio_train_1566", "nl": "IPod1 is either with the company logo or controlled by managers.", "fol": "(HasCompanyLogo(IPod1) | ManagedControl(IPod1))", "prediction": ["all x.(IPod1(x) -> (WithCompanyLogo(x) | ControlledByManagers(x)))", "all x.(IPod1(x) -> (HasCompanyLogo(x) | ControlledByManagers(x)))", "all x.(IPod1(x) -> (exists y.(CompanyLogo(y) & HasLogo(x,y)) | ControlledByManagers(x,y))))", "all x.(IPod(x) -> (WithCompanyLogo(x) | ControlledByManagers(x)))", "all x.(IPod1(x) -> (WithLogo(x) | ControlledByManagers(x)))", "all x.(IPod1(x) -> ((WithCompanyLogo(x) | ControlledByManagers(x))))", "all x.(IPod1(x) -> (HasLogo(x) | ControlledByManagers(x)))", "all x.(IPod(x) -> (exists y.(CompanyLogo(y) & HasLogo(x,y)) | ControlledByManagers(x,y))))", "all x.(IPod1(x) -> (exists y.(CompanyLogo(y) & Has(x,y)) | ControlledByManagers(x,y))))", "all x.(IPod1(x) -> (CompanyLogo(x) | ManagerControl(x)))", "all x.(IPod1(x) -> (exists y.(CompanyLogo(y) & With(x,y)) | ControlledByManagers(x,y))))", "all x.(IPod1(x) -> (exists y.(CompanyLogo(y) & With(x,y)) | ControlledBy(x,y))))", "all x.(IPod1(x) -> (exists y.(CompanyLogo(y) & Has(x,y))) | exists z.(Manager(z) & Controls(z,x)))))", "all x.(IPod1(x) -> (exists y.(CompanyLogo(y) & Has(x,y))) | exists z.(Manager(z) & Controls(x,z)))))", "all x.(IPod1(x) -> (CompanyLogo(x) | ManagedByManagers(x)))", "all x.(IPod(x) -> (HasCompanyLogo(x) | ControlledByManagers(x)))"]}
{"id": "folio_train_1567", "nl": "All CD players are delicate mechanisms.", "fol": "all x.(IsCDPlayer(x) -> IsDelicateMechanism(x))", "prediction": ["all x.(CDPlayer(x) -> DelicateMechanism(x))", "all x.(CDPlayer(x) -> DifficultMechanism(x))", "all x.(CDPlayer(x) -> DelicateMechanisms(x))", "all x.(CdPlayer(x) -> DelicateMechanism(x))", "all x.(CDPlayer(x) -> DiligentMechanism(x))", "all x.(CDPlayer(x) -> DairyMechanism(x))", "all x y.((CDPlayer(x) & CDPlayer(y)) -> DelicateMechanism(x))", "all x.(DiscPlayer(x) -> DelicateMechanism(x))", "all x y.((CDPlayer(x) & CDPlayer(y)) -> DelicateMechanism(x,y))", "all x.(CDPlayer(x) -> (DelicateMechanism(x) | DelicateMechanism(x)))", "all x.(CDPlayer(x) -> DaintyMechanism(x))", "all x.(CDPlayer(x) -> (DelicateMechanism(x) & DelicateMechanism(x)))", "all x.(CDPlayer(x) -> (DiligentMechanism(x) | DelicateMechanism(x)))", "all x.(CDPlayer(x) -> (DiligentMechanism(x) & DelicateMechanism(x)))", "all x.(CDPlayer(x) -> DelicateMechanism(x))", "all x.(CDPlayer(x) -> DazzlingMechanism(x))"]}
{"id": "folio_train_1568", "nl": "No delicate mechanisms are suitable toys for children.", "fol": "all x.(IsDelicateMechanism(x) -> -IsSuitableToyForChildren(x))", "prediction": ["-exists x.(DelicateMechanism(x) & SuitableToy(x))", "-exists x.(DelicateMechanism(x) & SuitableToy(x,Children))", "-exists x.(DelicateMechanism(x) & SuitableToyForChildren(x))", "-exists x.(DelicateMechanism(x) & SuitableForChildren(x))", "-exists x.(DelicateMechanism(x) & SuitableToy(x,child))", "-exists x.(DelicateMechanism(x) & SuitableToy(x) & ForChildren(x))", "-exists x.(DelicateMechanism(x) & -SuitableToy(x))", "-exists x.(DelicateMechanism(x) & SuitableToy(x,children))", "-exists x.(DiligentMechanism(x) & SuitableToy(x))", "-exists x.(DiligentMechanism(x) & -SuitableToy(x))", "-exists x.(DiligentMechanism(x) & SuitableToyForChildren(x))", "-exists x.(DelicateMechanism(x) & SuitableToy(x) & Children(x))", "-exists x.(DelicateMechanism(x) & -SuitableToy(x,child))", "-exists x.(DiligentMechanism(x) & SuitableToy(x,child))", "-exists x.(DirtyMechanism(x) & -SuitableToy(x))", "-exists x.(DirtyMechanism(x) & SuitableToy(x,Children))"]}
{"id": "folio_train_1569", "nl": "Some CD players are suitable toys for children.", "fol": "exists x.(IsCDPlayer(x) & IsSuitableToyForChildren(x))", "prediction": ["exists x.(CDPlayer(x) & SuitableToy(x))", "exists x.(CDPlayer(x) & SuitableToyForChildren(x))", "exists x.(CDPlayer(x) & SuitableForChildren(x))", "exists x.(CDPlayer(x) & SuitableToy(x,Children))", "exists x.(CDPlayer(x) & SuitableToy(x,child))", "exists x.(CDPlayer(x) & SuitableToy(x) & ForChildren(x))", "exists x.(CDPlayer(x) & SuitableToy(x,children))", "exists x y.(CDPlayer(x) & Child(y) & SuitableToy(x,y))", "exists x.(CDPlayer(x) & SuitableToy(x) & Children(x))", "exists x.(CDPlayer(x) & SuitableToysForChildren(x))", "exists x.(CDPlayer(x) & SuitableToy(x,child(x))", "exists x.(CDPlayer(x) & SuitableToy(x,child,child))", "exists x y.(CDPlayer(x) & Child(y) & SuitableFor(x,y))", "exists x.(DiscPlayer(x) & SuitableToyForChildren(x))", "exists x.(CDPlayer(x) & SuitableToyFor(x,Children))", "exists x.(CDPlayer(x) & SuitableToy(x) & For(x,Children))"]}
{"id": "folio_train_1570", "nl": "All mammals are living beings.", "fol": "all x.(IsMammal(x) -> IsLivingBeing(x))", "prediction": ["all x.(Mammal(x) -> LivingBeing(x))", "all x.(Mammal(x) -> Living(x))", "all x.(Mammal(x) -> LivesBeing(x))", "all x.(Mammal(x) -> LivingBeing(x))", "all x.(Mammal(x) -> LivingInBeing(x))", "all x.(Mammal(x) -> LivesInBeing(x))", "all x y.((Mammal(x) & LivingBeing(y)) -> LivesIn(x,y))", "all x y.((Mammal(x) & LivingBeing(y)) -> LivingBeing(x,y))", "all x.(Mammal(x) -> LivesIn(x))", "all x y.((Mammal(x) & LivingBeing(y)) -> LivingBeing(x))", "all x.exists y.(Mammal(x) & LivingBeing(y))", "all x y.((Mammal(x) & LivingBeing(y)) -> Living(x,y))", "all x.exists y.(Mammal(x) & LivingBeing(y) & LivesIn(x,y))", "all x.(Mammal(x) -> LivingBelief(x))", "all x y.((Mammal(x) & LivingBeing(y)) -> Living(x))", "all x.(Mammal(x) -> LivingMolecule(x))"]}
{"id": "folio_train_1571", "nl": "All elephants are mammals.", "fol": "all x.(IsElephant(x) -> IsMammal(x))", "prediction": ["all x.(Elephant(x) -> Mammal(x))", "all x.((Elephant(x) & Mammal(x)) -> Mammal(x))", "all x y.((Elephant(x) & Mammal(y)) -> Mammal(x))", "all x.(Elephant(x) -> Mammal(x))", "all x.exists y.(Elephant(x) & Mammal(y) & Mammal(x))", "all x y.((Elephant(x) & Mammal(y)) -> Mammal(x,y))", "(all x.(Elephant(x) -> Mammal(x))", "all x.exists y.(Elephant(x) & Mammal(y) & Mammal(x) & Mammal(y))", "all x.exists y.(Elephant(x) & Mammal(y) & Mammal(y))", "all x.exists y.(Elephant(x) & Mammal(y) & Mammal(x,y))", "all x.(Elf(x) -> Mammal(x))", "all x.((Elephant(x) & Mammal(x)) -> (Mammal(x) & Mammal(x)))", "all x.exists y.(Elephant(x) & Mammal(y) & Mammal(z))", "all x.((Elephant(x) & Mammal(x)) -> (Mammal(x) | Mammal(x)))", "all x.exists y.(Elephant(x) & Mammal(y) & Mammal(y) & Mammal(x))", "all x.exists y.(Elephant(x) & Mammal(y) & Mammal(x) & Mammal(x))"]}
{"id": "folio_train_1572", "nl": "All baby elephants are elephants.", "fol": "all x.(IsBabyElephant(x) -> IsElephant(x))", "prediction": ["all x.(BabyElephant(x) -> Elephant(x))", "all x.((BabyElephant(x) & Elephant(x)) -> Elephant(x))", "all x.(BabyElephant(x) -> Elephant(x))", "all x y.((BabyElephant(x) & Elephant(y)) -> Elephant(x))", "all x y.((BabyElephant(x) & Baby(y)) -> Elephant(x))", "all x y.((BabyElephant(x) & BabyElephant(y)) -> Elephant(x))", "all x y.((BabyElephant(x) & Elephant(y)) -> Elephant(x,y))", "(all x.(BabyElephant(x) -> Elephant(x)))", "(all x.(BabyElephant(x) -> Elephant(x))", "all x.((BabyElephant(x) & Elephant(x)) -> -Elephant(x))", "all x.(Baby(x) -> Elephant(x))", "all x.exists y.(BabyElephant(x) & Elephant(y) & LivesIn(x,y))", "all x.exists y.(BabyElephant(x) & Elephant(y))", "all x.exists y.(BabyElephant(x) & Elephant(y) & Elephant(y))", "all x.((BabyElephant(x) & Elephant(x)) -> Animal(x))", "all x y.((BabyElephant(x) & Elephant(y)) -> Elephant(y))"]}
{"id": "folio_train_1573", "nl": "Some baby elephants are sleepy.", "fol": "exists x.(IsBabyElephant(x) & IsSleepy(x))", "prediction": ["exists x.(BabyElephant(x) & Sleepy(x))", "exists x.(Baby(x) & Elephant(x) & Sleepy(x))", "exists x.(babyElephant(x) & Sleepy(x))", "exists x y.(BabyElephant(x) & Sleepy(y))", "exists x.(BabyElm(x) & Sleepy(x))", "exists x.((BabyElephant(x) & Sleepy(x))", "exists x.(BabyElephant(x) & Sleepy(x))", "exists x.(BabyElm(x) & Sleepy(x))", "exists x.(Baby(x) & Elephant(y) & Sleepy(y))", "exists x y.(BabyElephant(x) & Sleepy(x))", "exists x.(BabyElf(x) & Sleepy(x))", "exists x.(baby(x) & Elephant(x) & Sleepy(x))", "exists x.(BabyEllipt(x) & Sleepy(x))", "exists x.(BuddyElephant(x) & Sleepy(x))", "exists x.(BabyElement(x) & Sleepy(x))", "exists x.(BuyElephant(x) & Sleepy(x))"]}
{"id": "folio_train_1574", "nl": "If Jumbo is a living being, then Jumbo is not an elephant or a mammal.", "fol": "(IsLivingBeing(Jumbo) -> -(IsElephant(Jumbo) | IsMammal(Jumbo)))", "prediction": ["all x.(LivingBeing(x) -> (-Elephant(x) | -Mammal(x)))", "all x.((Jumbo(x) & LivingBeing(x)) -> (-Elephant(x) | -Mammal(x)))", "all x.((LivingBeing(x) & Jumbo(x)) -> (-Elephant(x) | -Mammal(x)))", "all x.((Jumbo(x) & LivingBeing(x)) -> (-Elephant(x) & -Mammal(x)))", "all x.((LivingBeing(x) & -Elephant(x) & -Mammal(x)) -> Jumbo(x))", "all x.((Jumbo(x) & LivingBeing(x)) -> -(Elephant(x) | Mammal(x)))", "all x.((LivingBeing(x) & -Elephant(x) & -Mammal(x)) -> -Elephant(x) & -Mammal(x))", "all x.((LivingBeing(x) & Jumbo(x)) -> (-Elephant(x) & -Mammal(x)))", "all x.((LivingBeing(x) & Jumbo(x)) -> -(Elephant(x) | Mammal(x)))", "all x.((LivingBeing(x) & -Elephant(x) & -Mammal(x)) -> LivingBeing(x))", "all x.(LivingBeing(x) -> (-Elephant(x) & -Mammal(x)))", "all x.((LivingBeing(x) & Jumbo(x)) -> (-Elephant(x) | Mammal(x)))", "all x.((Jumbo(x) & LivingBeing(x)) -> -Elephant(x) & -Mammal(x))", "all x.((LivingBeing(x) & -(Elephant(x) | Mammal(x))) -> LivingBeing(x))", "all x.((Living(x) & Jumbo(x)) -> (-Elephant(x) | -Mammal(x)))", "all x.((Jumbo(x) & LivingBeing(x)) -> (-Elephant(x) | Mammal(x)))"]}
{"id": "folio_train_1575", "nl": "If Jumbo is sleepy, then Jumbo is a baby elephant or an elephant.", "fol": "((IsSleepy(Jumbo) -> IsBabyElephant(Jumbo)) | IsMammal(Jumbo))", "prediction": ["all x.((Jumbo(x) & Sleepy(x)) -> (BabyElephant(x) | Elephant(x)))", "all x.(Sleepy(x) -> (BabyElephant(x) | Elephant(x)))", "all x.(SleepyJumbo(x) -> (BabyElephant(x) | Elephant(x)))", "all x.((Sleepy(x) & Jumbo(x)) -> (BabyElephant(x) | Elephant(x)))", "all x.((Jubim(x) & Sleepy(x)) -> (BabyElephant(x) | Elephant(x)))", "all x.((Jubimo(x) & Sleepy(x)) -> (BabyElephant(x) | Elephant(x)))", "all x.((Jupiter(x) & Sleepy(x)) -> (BabyElephant(x) | Elephant(x)))", "all x.((Jumbo(x) & Sleepy(x)) -> ((BabyElephant(x) | Elephant(x))))", "all x.((Jumpy(x) & Sleepy(x)) -> (BabyElephant(x) | Elephant(x)))", "all x.((Jumbo(x) & Sleepy(x)) -> (BabyElf(x) | Elephant(x)))", "all x y.((Jumbo(x) & Sleepy(x)) -> (BabyElephant(y) | Elephant(y)))", "all x.((Jumbo(x) & Sleepy(x)) -> (Baby(x) | Elephant(x)))", "all x.(SleepyJubim(x) -> (BabyElephant(x) | Elephant(x)))", "(Sleepy(Jumbo) -> (BabyElephant(Jumbo) | Elephant(Jumbo)))", "all x.(Sleepy(x) -> ((BabyElephant(x) | Elephant(x))))", "all x.(Sleepy(x) -> (Jumbo(x) | Elephant(x)))"]}
{"id": "folio_train_1576", "nl": "Jumbo is sleepy.", "fol": "IsSleepy(Jumbo)", "prediction": ["all x.(Jumbo(x) -> Sleepy(x))", "all x.(Jubimo(x) -> Sleepy(x))", "All x.(Jumbo(x) -> Sleepy(x))", "all x.(Jump(x) -> Sleepy(x))", "(Sleepy(Jumbo) -> Sleepy(Jumbo))", "exists x.(Jumbo(x) & Sleepy(x))", "all x.(Jubim(x) -> Sleepy(x))", "all x.(JumpOf(x) -> Sleepy(x))", "all x.(Jumpo(x) -> Sleepy(x))", "(Sleepy(Jumbo) -> Sleepy(Jumbo))", "(Sleepy(jumbo) -> Sleepy(jumbo))", "all x.(Jumbo(x) -> Sleepy(x))", "(Sleepy(Jumbo) & Sleepy(Jumbo))", "All x.(Jubimo(x) -> Sleepy(x))", "exists x.(Jubimo(x) & Sleepy(x))", "(Sleepy(Jubimo) -> Sleepy(Jubimo))"]}
{"id": "folio_train_1577", "nl": "Jumbo is not sleepy.", "fol": "-IsSleepy(Jumbo)", "prediction": ["all x.(Jumbo(x) -> -Sleepy(x))", "all x.(Jubim(x) -> -Sleepy(x))", "all x.(Jump(x) -> -Sleepy(x))", "All x.(Jumbo(x) -> -Sleepy(x))", "all x.(Jubimo(x) -> -Sleepy(x))", "exists x.(Jumbo(x) & -Sleepy(x))", "-Sleepy(jumbo)", "-Sleepy(Jumbo)", "all x.(Jumbo(x) -> -Sleepy(x))", "all x.(Jumbo(x) -> -Sleeping(x))", "all x.(Jumbo(x) -> -Sleepy(x))", "Jumbo is notSleepy(jumbo)", "(-Sleepy(Jumbo))", "all x.(Jumbo(x) -> -Sleeper(x))", "-SleepyJumbo(Jumbo)", "all x.(Jumbo(x) -> NotSleepy(x))"]}
{"id": "folio_train_1578", "nl": "Jumbo is a living being.", "fol": "IsLivingBeing(Jumbo)", "prediction": ["all x.(Jumbo(x) -> LivingBeing(x))", "all x.(Jubimo(x) -> LivingBeing(x))", "all x.(Jumbo(x) -> LivesBeing(x))", "all x.(Jump(x) -> LivingBeing(x))", "all x.(Jumbo(x) -> LivingBeing(x))", "all x y.((Jumbo(x) & LivingBeing(y)) -> LivesIn(x,y))", "all x.(Jumbo(x) -> LivingBeing(x))", "all x.(Jubimo(x) -> LivesBeing(x))", "All x.(Jumbo(x) -> LivingBeing(x))", "all x.(Jubimo(x) -> LivingBeing(x))", "all x.(Jumbo(x) -> LivesIn(x))", "all x y.((Jumbo(x) & LivingBeing(x)) -> LivesIn(x,y))", "all x.(Jumbo(x) -> LivesInBeing(x))", "all x.(Jumbo(x) -> LivesBeing(x))", "all x y.((Jumbo(x) & LivingBeing(y)) -> LivingBeing(x))", "exists x.(Jumbo(x) & LivingBeing(x))"]}
{"id": "folio_train_1579", "nl": "Jumbo is neither sleepy nor a baby elephant.", "fol": "(-IsSleepy(Jumbo) & -IsBabyElephant(Jumbo))", "prediction": ["all x.(Jumbo(x) -> (-Sleepy(x) & -BabyElephant(x)))", "all x.(Jumbo(x) -> (-Sleepy(x) | BabyElephant(x)))", "all x.(Jubimo(x) -> (-Sleepy(x) & -BabyElephant(x)))", "all x.(Jubim(x) -> (-Sleepy(x) & -BabyElephant(x)))", "all x.(Jumbo(x) -> (-Sleepy(x) & -BabyElephant(x)))", "all x.(Jumbo(x) -> -(Sleepy(x) | BabyElephant(x)))", "all x.(Jumbo(x) -> (NoSleepy(x) & -BabyElephant(x)))", "all x.(Jubimo(x) -> (-Sleepy(x) | BabyElephant(x)))", "all x.(Jumbo(x) -> (Sleepy(x) & -BabyElephant(x)))", "all x.(Jubim(x) -> (-Sleepy(x) | BabyElephant(x)))", "exists x.(Jumbo(x) & -(Sleepy(x) | BabyElephant(x)))", "all x.(Jumbo(x) -> (-Sleepy(x) | BabyElephant(x)))", "(-Sleepy(Jumbo) & -BabyElephant(Jumbo))", "all x.(Jumbo(x) -> (Sleepy(x) | BabyElephant(x)))", "-(Sleepy(Jumbo) | BabyElephant(Jumbo))", "all x.(Jumbo(x) -> (-Sleepy(x) & -BabyElf(x)))"]}
{"id": "folio_train_1580", "nl": "Jumbo is not sleepy or an elephant.", "fol": "(-IsSleepy(Jumbo) & -IsElephant(Jumbo))", "prediction": ["all x.(Jumbo(x) -> (-Sleepy(x) | Elephant(x)))", "all x.(Jumbo(x) -> (-Sleepy(x) & -Elephant(x)))", "all x.(Jumbo(x) -> -(Sleepy(x) | Elephant(x)))", "-(Jumbo(jumbo) & Sleepy(jumbo) & -Elephant(jumbo))", "all x.(Jubim(x) -> (-Sleepy(x) & -Elephant(x)))", "all x.(Jubim(x) -> (-Sleepy(x) | Elephant(x)))", "exists x.(Jumbo(x) & -(Sleepy(x) | Elephant(x)))", "-(Jumbo(jumbo) & Sleepy(jumbo)) & -(Jumbo(jumbo) & Elephant(jumbo)))", "all x.(Jump(x) -> (-Sleepy(x) & -Elephant(x)))", "All x.(Jumbo(x) -> (-Sleepy(x) & -Elephant(x)))", "(-Sleepy(jumbo) & -Elephant(jumbo))", "all x.(Jumbo(x) -> (-Sleepy(x) & -Elephant(x)))", "all x.(Jumbo(x) -> (-Sleepy(x) | Elephant(x)))", "all x.(Jump(x) -> (-Sleepy(x) | Elephant(x)))", "All x.(Jumbo(x) -> (-Sleepy(x) | Elephant(x)))", "(-Sleepy(Jumbo) & -Elephant(Jumbo))"]}
{"id": "folio_train_1581", "nl": "No faculty does homework.", "fol": "all x.(IsFaculty(x) -> -CompletesHomework(x))", "prediction": ["-exists x.(Faculty(x) & DoesHomework(x))", "-exists x.(Faculty(x) & DoesHomework(x))", "all x.(Faculty(x) -> -DoesHomework(x))", "-exists x.(Faculty(x) & DoHomework(x))", "-exists x.(Faculty(x) & DosHomework(x))", "(-exists x.(Faculty(x) & DoesHomework(x)))", "-exists x.(Faculty(x) & -DoesHomework(x))", "-exists x.(Faculty(x) & Homework(x))", "-exists x.(Faculty(x) & DOESHomework(x))", "-exists x.(Faculty(x) & HomeworkDoes(x))", "-exists x y.(Faculty(x) & Homework(y) & Does(x,y))", "-exists x.(Faculty(x) & DOEsHomework(x))", "-exists x y.(Faculty(x) & Homework(y) & Does(x,y))", "-exists x y.(Faculty(x) & Homework(y) & Does(x,y)))", "all x.(Faculty(x) -> -DoesHomework(x))", "-exists x.(Faculty(x) & WorksHomework(x))"]}
{"id": "folio_train_1582", "nl": "All students do homework.", "fol": "all x.(IsStudent(x) -> CompletesHomework(x))", "prediction": ["all x.(Student(x) -> DoHomework(x))", "all x.(Student(x) -> DoesHomework(x))", "all x y.((Student(x) & Homework(y)) -> Do(x,y))", "all x y.((Student(x) & Student(y)) -> DoHomework(x,y))", "all x y.((Student(x) & Homework(y)) -> Does(x,y))", "all x y.((Student(x) & Homework(y)) -> Dose(x,y))", "all x y.((Student(x) & Student(y)) -> DoesHomework(x,y))", "all x y.((Student(x) & Homework(y)) -> Does(x,y))", "all x.(Student(x) -> DoseHomework(x))", "all x.(Student(x) -> (DoHomework(x) | DoHomework(x)))", "all x.(Student(x) -> DoHasHomework(x))", "all x.exists y.(Student(x) & Homework(y) & Do(x,y))", "all x y.((Student(x) & Student(y)) -> DoseHomework(x,y))", "all x.(Student(x) -> DoHeadwork(x))", "all x.exists y.(Student(x) & Homework(y) & Dose(x,y))", "all x.(Student(x) -> DoHabitat(x))"]}
{"id": "folio_train_1583", "nl": "All kids are students.", "fol": "all x.(IsKid(x) -> IsStudent(x))", "prediction": ["all x.(Kid(x) -> Student(x))", "all x.(Child(x) -> Student(x))", "all x.(Kid(x) -> Students(x))", "all x y.((Kid(x) & Student(y)) -> Is(x,y))", "all x.(Kid(x) -> Student(x))", "all x.exists y.(Kid(x) & Student(y))", "all x y.((Kid(x) & Student(y)) -> (Student(x) & Student(y)))", "all x y.((Kid(x) & Student(y)) -> Student(x))", "all x y.((Kid(x) & Student(y)) -> (Student(x) | Student(x)))", "all x y.((Kid(x) & Student(y)) -> (Student(x) & Student(x)))", "all x.(Kid(x) -> Student(x))", "all x y.((Kid(x) & Student(y)) -> (Student(x) | Student(y)))", "all x y.((Kid(x) & Student(y)) -> Student(x))", "exists x.(Kid(x) & Student(x))", "(all x.(Kid(x) -> Student(x))", "all x y.((Kid(x) & Student(y)) -> -Student(x))"]}
{"id": "folio_train_1584", "nl": "If someone works at a school, then they are faculty.", "fol": "all x.(WorksAtSchool(x) -> IsFaculty(x))", "prediction": ["all x.(WorksAtSchool(x) -> Faculty(x))", "all x y.((WorksAt(x,y) & School(y)) -> Faculty(x))", "all x.((WorksAtSchool(x) & Faculty(x)) -> Faculty(x))", "all x y.((WorksAtSchool(x) & School(y)) -> Faculty(x))", "all x.((WorksAtSchool(x) & Faculty(x)) -> WorksAtSchool(x))", "all x.exists y.((WorksAt(x,y) & School(y)) -> Faculty(x))", "all x y.((WorksAtSchool(x) & School(y) & Faculty(x)) -> Faculty(x))", "all x.exists y.((WorksAtSchool(x) & School(y) & Faculty(x)) -> Faculty(x))", "all x.((WorksAtSchool(x)) -> Faculty(x))", "all x.(WorksAt(x,School) -> Faculty(x))", "all x y z.((WorksAt(x,y) & School(z) & WorksAt(x,z)) -> Faculty(x))", "all x.exists y.((WorksAt(x,y) & School(y) & Faculty(x)) -> Faculty(x))", "all x.exists y.((WorksAtSchool(x) & School(y) & Faculty(x)) -> WorksAt(x,y))", "all x y.((WorksAtSchool(x,y) & School(y)) -> Faculty(x))", "all x.exists y.((WorksAtSchool(x) & School(y)) -> Faculty(x))", "all x y.((WorksAt(x,y) & School(x)) -> Faculty(y))"]}
{"id": "folio_train_1585", "nl": "If Jill works at a school or is a teacher, then Jill works at a school.", "fol": "((WorksAtSchool(Jill) | CompletesHomework(Jill)) -> WorksAtSchool(Jill))", "prediction": ["all x.((Jill(x) & (WorksAtSchool(x) | Teacher(x))) -> WorksAtSchool(x))", "all x.((Jill(x) & WorksAtSchool(x)) | Teacher(x)) -> WorksAtSchool(x))", "all x.((Jill(x) | Teacher(x)) -> WorksAtSchool(x))", "all x.((Jill(x) & (WorksAtSchool(x) | Teacher(x))) -> WorkAtSchool(x))", "all x.(WorksAtSchool(x) | Teacher(x)) -> WorksAtSchool(x))", "all x.((JillWorksAtSchool(x) | Teacher(x)) -> WorksAtSchool(x))", "all x.((Jill(x) & (WorksAtSchool(x) | Teachers(x))) -> WorksAtSchool(x))", "all x y.((Jill(x) & School(y) & WorksAt(x,y)) | Teacher(x,y)) -> WorksAt(x,y))", "all x y.((Jill(x) & (WorksAtSchool(x) | Teacher(x))) -> WorksAtSchool(x))", "all x y.((Jill(x) & School(y) & WorksAt(x,y)) | Teacher(x,y)) -> WorksAtSchool(x))", "all x y.((Jill(x) & School(y)) -> (WorksAt(x,y) | Teacher(x,y)))", "all x.((Jill(x) & (WorksAtSchool(x) | Teacher(x))) -> WorkesAtSchool(x))", "all x y.((Jill(x) & School(y)) -> (WorksAt(x,y) | Teacher(x)))", "all x y.((Jill(x) & School(y) & (WorksAt(x,y) | Teacher(x))) -> WorksAt(x,y))", "all x.((Jill(x) & WorksAtSchool(x) | Teacher(x)) -> WorksAtSchool(x))", "all x y.((Jill(x) & School(y) & WorksAt(x,y)) | Teacher(x,y)) -> WorksAtSchool(x,y))"]}
{"id": "folio_train_1586", "nl": "Jill works at a school.", "fol": "WorksAtSchool(Jill)", "prediction": ["all x y.((Jill(x) & School(y)) -> WorksAt(x,y))", "all x.(Jill(x) -> WorksAtSchool(x))", "all x y z.((Jill(x) & School(y) & School(z)) -> WorksAt(x,y,z))", "all x y z.((Jill(x) & School(y) & School(z)) -> WorksAt(x,y))", "exists x y.(Jill(x) & School(y) & WorksAt(x,y))", "all x.((Jill(x) & School(y)) -> WorksAt(x,y))", "all x y z.((Jill(x) & School(y) & School(z) & WorksAt(x,y)) -> WorksAt(x,z))", "all x y.((Jill(x) & School(y) & WorksAt(x,y)) -> WorksAt(x,y))", "all x y z.((Jill(x) & School(y) & School(z) & WorksAt(x,y,z)) -> WorksAt(x,y))", "all x y z.((Jill(x) & School(y) & School(z) & WorksAt(x,y,z)) -> WorksAt(x,y,z))", "exists x y.((Jill(x) & School(y)) -> WorksAt(x,y))", "all x y z.((Jill(x) & School(y) & Work(z)) -> WorksAt(x,y,z))", "exists x.(Jill(x) & WorksAtSchool(x))", "all x y z.((Jill(x) & School(y) & School(z) & WorksAt(x,y)) -> WorksAt(x,y,z))", "exists x.(Jill(x) & WorksAt(x,School))", "all x y z.((Jill(x) & School(y) & Student(z)) -> WorksAt(x,y,z))"]}
{"id": "folio_train_1587", "nl": "Jill is a kid.", "fol": "IsKid(Jill)", "prediction": ["all x.(Jill(x) -> Kid(x))", "(Kid(Jill) & Kid(Jill))", "All x.(Jill(x) -> Kid(x))", "exists x.(Jill(x) & Kid(x))", "all x.((Jill(x) & Kid(x)) -> Kid(x))", "(Kid(Jill) & -Kid(Jill))", "all x.(Kid(x) -> Jill(x))", "all x.((Jill(x) & Kid(x)) -> Is(x,y))", "(Kid(Jill) & Born(Jill))", "Jill is a kid.", "all x.(Jill(x) -> Kid(x))", "(Kid(Jill) & HasKid(Jill))", "all x.((Jill(x) & Kid(x)) -> Is(x,Jill))", "all x.((Jill(x) & Kid(x)) -> Jill(x))", "(Kid(Jill) -> Kid(Jill))", "(Kid(Jill) -> Kid(Jill))"]}
{"id": "folio_train_1588", "nl": "Jill is not a kid.", "fol": "-IsKid(Jill)", "prediction": ["all x.(Jill(x) -> -Kid(x))", "all x.((Jill(x) & -Kid(x)) -> -Kid(x))", "All x.(Jill(x) -> -Kid(x))", "(-Kid(Jill))", "-Kid(Jill)", "(Kid(Jill) & -Kid(Jill))", "exists x.(Jill(x) & -Kid(x))", "(-Kid(Jill) & -Kid(Jill))", "all x.((Jill(x) & -Kid(x)) -> -Jill(x))", "Jill is notKid(Jill)", "all x.((Jill(x) & -Kid(x)) -> -(Jill(x) & Kid(x)))", "all x.((Jill(x) & -Kid(x)) -> -(Jill(x) & Kid(x))))", "all x.((Jill(x) & -Kid(x)) -> -(Jill(x) & -Kid(x)))", "all x.((Jill(x) & -Kid(x)) -> -Child(x))", "all x.(Jill(x) -> -Kid(x))", "all x.((Jill(x) & -Kid(x)) -> -(Jill(x) & -Kid(x))))"]}
{"id": "folio_train_1589", "nl": "Either Max listens to classical music or Max listens to rap. ", "fol": "all x.(MaxListensToClassicalMusic(x) | MaxListensToRap(x))", "prediction": ["(exists x.(Max(x) & ListensToClassicalMusic(x)) | exists y.(Max(y) & ListensToRap(y))))", "(exists x.(Max(x) & ListensToClassicalMusic(x)) | exists y.(Max(y) & ListensToRrap(y))))", "(exists x.(Max(x) & ClassicalMusic(x)) | exists y.(Max(y) & Rap(y))))", "(exists x.(Max(x) & ListensTo(x,ClassicalMusic)) | exists y.(Max(y) & ListensTo(y,Rap))))", "(exists x.(Mach(x) & ListensToClassicalMusic(x)) | exists y.(Mach(y) & ListensToRap(y))))", "(all x.(Max(x) -> ListensToClassicalMusic(x)) | (Max(x) -> ListensToRap(x))))", "(exists x.(Max(x) & ListensToClassicalMusic(x))) | exists y.(Max(y) & ListensToRap(y))))", "(exists x.(Max(x) & Listens(x,ClassicalMusic)) | exists y.(Max(y) & Listens(y,Rap))))", "(exists x.(Max(x) & ListensToClassicalMusic(x)) | exists y.(Max(y) & ListensToRac(y))))", "all x.(Max(x) -> (ListensToClassicalMusic(x) | ListensToRap(x)))", "(exists x.(Max(x) & ListensToClassicalMusic(x)) | exists y.(Max(y) & ListensToRap(y)))))", "all x.((Max(x) & ListensToClassicalMusic(x)) | ListensToRap(x))", "(exists x.(Mach(x) & ListensToClassicalMusic(x)) | exists y.(Mach(y) & ListensToRrap(y))))", "exists x.(Max(x) & (ListensToClassicalMusic(x) | ListensToRap(x)))", "(exists x.(Max(x) & ListensToClassicalMusic(x)) | exists y.(Max(x) & ListensToRap(y))))", "(exists x.(Max(x) & ListensToClassicalMusic(x)) | exists y.(Max(y) & ListensToRace(y))))"]}
{"id": "folio_train_1590", "nl": "All the songs that Max listens to that are classical music are from the 12th century.", "fol": "all x.(MaxListensToClassicalMusic(x) -> SongsFrom12thCentury(x))", "prediction": ["all x.((Song(x) & ListensTo(x) & ClassicalMusic(x)) -> From12thCentury(x))", "all x.((Song(x) & ListensTo(x) & ClassicalMusic(x)) -> 12thCentury(x))", "all x.((Songs(x) & ListensTo(x) & ClassicalMusic(x)) -> From12thCentury(x))", "all x.((Song(x) & ListensTo(x) & ClassicalMusic(x)) -> FromThe12thCentury(x))", "all x.((Song(x) & ListensTo(x,Max) & ClassicalMusic(x)) -> From12thCentury(x))", "all x.((Songs(x) & ListensTo(x) & ClassicalMusic(x)) -> 12thCentury(x))", "all x.((Song(x) & ListensTo(x,y) & ClassicalMusic(y)) -> From12thCentury(x))", "all x.((Songs(x) & ListensTo(x) & ClassicalMusic(x)) -> FromThe12thCentury(x))", "all x.((Songs(x) & ListensTo(x,Max) & ClassicalMusic(x)) -> From12thCentury(x))", "all x.((Song(x) & ListensTo(x,y) & ClassicalMusic(x)) -> From12thCentury(x))", "all x.((Song(x) & ListensTo(x,Max) & ClassicalMusic(x)) -> 12thCentury(x))", "all x.((Song(x) & ListensTo(x,Max) & ClassicalMusic(x)) -> FromThe12thCentury(x))", "all x.((Songs(x) & ListensToMax(x) & ClassicalMusic(x)) -> From12thCentury(x))", "all x y.((Song(x) & Max(y) & ListensTo(x,y) & ClassicalMusic(y)) -> From12thCentury(x))", "all x y.((Song(x) & Max(y) & ListensTo(x,y)) -> ClassicalMusic(y))", "all x y.((Song(x) & Max(y) & ListensTo(x,y)) -> ClassicalMusic(x))"]}
{"id": "folio_train_1591", "nl": "If the song Max listens to is rap, then the song is from Kanye West. ", "fol": "all x.(MaxListensToRap(x) -> SongsByKanyeWest(x))", "prediction": ["all x.((Song(x) & ListensTo(x,Rap)) -> KanyeWest(x))", "all x.((Song(x) & ListensTo(x) & Rap(x)) -> KanyeWest(x))", "all x.((Song(x) & ListensToRap(x)) -> KanyeWest(x))", "all x.((SongMaxListensTo(x) & Rap(x)) -> KanyeWest(x))", "all x.((Song(x) & ListensToRrap(x)) -> KanyeWest(x))", "all x.((Song(x) & ListensTo(x,Rap)) -> KanyeWestSong(x))", "all x.((Song(x) & ListensTo(x,Rap)) -> SongFromKanyeWest(x))", "all x.((Song(x) & ListensTo(x,rap)) -> KanyeWest(x))", "all x.((Song(x) & ListensTo(x,Rrap)) -> KanyeWest(x))", "all x.((Song(x) & ListensTo(x,Rap)) -> KanyeWide(x))", "all x.((Song(x) & ListensTo(x,Rap)) -> FromKanyeWest(x))", "all x.((Song(x) & ListensTo(x) & Rap(x)) -> KanyeWestSong(x))", "all x.((SongMax(x) & ListensTo(x,Rap)) -> KanyeWest(x))", "all x.((Song(x) & ListensTo(x,Rap) & KanyeWest(x)) -> Song(x))", "all x.((Song(x) & ListensToRap(x)) -> SongFromKanyeWest(x))", "all x.((Song(x) & ListensTo(x,Ram)) -> KanyeWest(x))"]}
{"id": "folio_train_1592", "nl": "If a songs is from Kanye West, then the song is full of lyrics. ", "fol": "all x.(SongsByKanyeWest(x) -> SongsWithLyrics(x))", "prediction": ["all x.((Song(x) & KanyeWest(x)) -> FullOfLyrics(x))", "all x.((Song(x) & FromKanyeWest(x)) -> FullOfLyrics(x))", "all x.((Song(x) & FromKanyeWest(x)) -> FullOfLyrics(x))", "all x y.((Song(x) & KanyeWest(y)) -> FullOfLyrics(x,y))", "all x y.((Song(x) & KanyeWest(y)) -> FullOfLyrics(x))", "all x.((Song(x) & KanyeWide(x)) -> FullOfLyrics(x))", "all x.((Song(x) & FromKanieWest(x)) -> FullOfLyrics(x))", "all x y.((Song(x) & KanyeWest(y) & From(x,y)) -> FullOfLyrics(x))", "all x.((Song(x) & FromKanyeWide(x)) -> FullOfLyrics(x))", "all x y.((Song(x) & KanyeWest(x)) -> FullOfLyrics(x))", "all x.((Song(x) & IsFromKanyeWest(x)) -> FullOfLyrics(x))", "all x.((Song(x) & From(x,KanyeWest)) -> FullOfLyrics(x))", "all x.((Song(x) & KanyeWord(x)) -> FullOfLyrics(x))", "all x.((Song(x) & fromKanyeWest(x)) -> FullOfLyrics(x))", "all x.(Song(x) -> (FromKanyeWest(x) & FullOfLyrics(x)))", "all x y.((Song(x) & KanyeWest(x)) -> FullOfLyrics(y))"]}
{"id": "folio_train_1593", "nl": "All songs that are full of lyrics need to be written with words", "fol": "all x.(SongsWithLyrics(x) -> MustBeWrittenWithWords(x))", "prediction": ["all x.((Song(x) & FullOfLyrics(x)) -> NeedsWrittenWithWords(x))", "all x.((Song(x) & FullOfLyrics(x)) -> WrittenWithWords(x))", "all x.((Song(x) & FullOfLyrics(x)) -> NeedsWords(x))", "all x.((Song(x) & FullOfLyrics(x)) -> WritenWithWords(x))", "all x.((Song(x) & FullOfLyrics(x)) -> NeedsToBeWrittenWithWords(x))", "all x.((Song(x) & FullOfLyrics(x)) -> HasWords(x))", "all x.((Song(x) & FullOfLyrics(x)) -> WritedWithWords(x))", "all x.((Song(x) & FullOfLyrics(x)) -> WritingWithWords(x))", "all x.((Song(x) & FullOfLyrics(x)) -> MustBeWrittenWithWords(x))", "all x y.((Song(x) & FullOfLyrics(x)) -> NeedsWrittenWithWords(x))", "all x.((Song(x) & FullOfLyrics(x)) -> (WrittenWithWords(x) | WrittenWithWords(x)))", "all x.((Song(x) & FullOfLyrics(x)) -> (WrittenWithWords(x) & WrittenWithWords(x)))", "all x.((Song(x) & FullOfLyrics(x)) -> WritesWithWords(x))", "all x y.((Song(x) & FullOfLyrics(x)) -> NeedsWrittenWithWords(x,y))", "all x.((Song(x) & FullOfLyrics(x)) -> WroteWithWords(x))", "all x y.((Song(x) & FullOfLyrics(x)) -> NeedsWrittenWithWords(y))"]}
{"id": "folio_train_1594", "nl": "If \u201cAs it was\u201d by Harry Styles is classical music that Max listens to or  from the 12th century, then \u201cAs it was\u201d by Harry Styles is either classical music that Max listens to, or the songs are from 12th century.", "fol": "((((MaxListensToClassicalMusic(AsItWasByHarryStyles) | SongsFrom12thCentury(AsItWasByHarryStyles)) -> MaxListensToClassicalMusic(AsItWasByHarryStyles)) & -SongsFrom12thCentury(AsItWasByHarryStyles)) | (-((MaxListensToClassicalMusic(AsItWasByHarryStyles) | SongsFrom12thCentury(AsItWasByHarryStyles)) -> MaxListensToClassicalMusic(AsItWasByHarryStyles)) & SongsFrom12thCentury(AsItWasByHarryStyles)))", "prediction": ["all x.((AsItWas(x) & (ClassicalMusic(x) | From12thCentury(x))) -> (ClassicalMusic(x) & MaxListensTo(x) | SongsFrom12thCentury(x)))", "all x.((AsItWorth(x) & (ClassicalMusic(x) | From12thCentury(x))) -> (ClassicalMusic(x) & MaxListensTo(x) | SongsFrom12thCentury(x)))", "all x.((AsItWorn(x) & (ClassicalMusic(x) | From12thCentury(x))) -> (ClassicalMusic(x) & MaxListensTo(x) | SongsFrom12thCentury(x)))", "all x.((AsItwas(x) & (ClassicalMusic(x) | From12thCentury(x))) -> (ClassicalMusic(x) & MaxListensTo(x) | SongsFrom12thCentury(x)))", "all x.((AsItAre(x) & HarryStyles(x)) -> ((ClassicalMusic(x) & MaxListensTo(x) | From12thCentury(x))) | (ClassicalMusic(x) & MaxListensTo(x) | SongsFrom12thCentury(x))))", "all x.((AsIs(x) & HarryStyles(x)) -> ((ClassicalMusic(x) & MaxListensTo(x) | From12thCentury(x))) | (ClassicalMusic(x) & MaxListensTo(x) | SongsFrom12thCentury(x))))", "all x.((AsItWorth(x) & HarryStyles(x)) -> ((ClassicalMusic(x) & MaxListensTo(x) | From12thCentury(x))) | (ClassicalMusic(x) & MaxListensTo(x) | SongsFrom12thCentury(x))))", "all x.((AsItWas(x) & HarryStyles(x)) -> ((ClassicalMusic(x) & MaxListensTo(x) | From12thCentury(x))) | (ClassicalMusic(x) & MaxListensTo(x) | SongsFrom12thCentury(x))))", "all x.((AsItBegan(x) & (ClassicalMusic(x) | From12thCentury(x))) -> (ClassicalMusic(x) & MaxListensTo(x) | SongsFrom12thCentury(x)))", "all x.((AsItWorn(x) & HarryStyles(x)) -> ((ClassicalMusic(x) & MaxListensTo(x) | From12thCentury(x))) | (ClassicalMusic(x) & MaxListensTo(x) | SongsFrom12thCentury(x))))", "all x.((AsItWorth(x) & HarryStyles(x)) -> ((ClassicalMusic(x) & MaxListensTo(x) | From12thCentury(x)) | (ClassicalMusic(x) & MaxListensTo(x)))))", "all x.((AsItAre(x) & HarryStyles(x)) -> ((ClassicalMusic(x) & MaxListensTo(x) | From12thCentury(x)) | (ClassicalMusic(x) & MaxListensTo(x)))))", "all x.((AsItWorn(x) & HarryStyles(x)) -> ((ClassicalMusic(x) & MaxListensTo(x) | From12thCentury(x)) | (ClassicalMusic(x) & MaxListensTo(x)))))", "all x.((AsItAre(x) & HarryStyles(x)) -> ((ClassicalMusic(x) & MaxListensTo(x) | From12thCentury(x)) | (ClassicalMusic(x) & MaxListensTo(x)) | (ClassicalMusic(x) & MaxListensTo(x)))))", "all x.((AsIs(x) & HarryStyles(x)) -> ((ClassicalMusic(x) & MaxListensTo(x) | From12thCentury(x)) | (ClassicalMusic(x) & MaxListensTo(x)))))", "all x.((AsItWas(x) & HarryStyles(x)) -> ((ClassicalMusic(x) & MaxListensTo(x) | From12thCentury(x)) | (ClassicalMusic(x) & MaxListensTo(x)))))"]}
{"id": "folio_train_1595", "nl": "\u201cAs it was\u201d by Harry Styles needs to be written with words.", "fol": "MustBeWrittenWithWords(AsItWasByHarryStyles)", "prediction": ["all x.((AsItWas(x) & HarryStyles(x)) -> NeedsWrittenWithWords(x))", "all x.((AsItBecame(x) & HarryStyles(x)) -> NeedsWrittenWithWords(x))", "all x.((HarryStyles(x) & \u201cAsItWas(x)) -> NeedsWrittenWithWords(x))", "all x.((HarryStyles(x) & AsItWas(x)) -> NeedsWrittenWithWords(x))", "all x.((AsItWas(x) & HarryStyles(x)) -> NeedsWords(x))", "all x.((HarryStyles(x) & \u201cAsItBecame(x)) -> NeedsWrittenWithWords(x))", "all x.((HarryStyles(x) & \u201cAsItWas(x))) -> NeedsWrittenWithWords(x))", "all x.((AsItBecame(x) & HarryStyles(x)) -> NeedsWords(x))", "all x.((HarryStyles(x) & \u201cAsItBecame(x)) -> NeedsWords(x))", "all x.((HarryStyles(x) & AsIs(x)) -> NeedsWrittenWithWords(x))", "all x.((HarryStyles(x) & AsItBecame(x)) -> NeedsWrittenWithWords(x))", "all x.((HarryStyles(x) & \u201cAsItWas(x)) -> NeedsWords(x))", "all x.((HarryStyles(x) & \u201cAsItWorn(x))) -> NeedsWrittenWithWords(x))", "all x.((HarryStyles(x) & \u201cAsItWas(x))) -> NeedsWords(x))", "all x.((HarryStyles(x) & AsItWas(x)) -> NeedsWords(x))", "all x.((HarryStyles(x) & AsIs(x)) -> NeedsWords(x))"]}
{"id": "folio_train_1596", "nl": "\"As it was\u201d by Harry Styles is a song from the 12th century.", "fol": "SongsFrom12thCentury(AsItWasByHarryStyles)", "prediction": ["all x.((Song(x) & HarryStyles(x)) -> From12thCentury(x))", "all x.((Song(x) & HarryStyles(x)) -> FromThe12thCentury(x))", "\"AsItBecame\" by HarryStyles is a song from the 12thCentury.", "\"AsItWas\" by HarryStyles is a song from the 12thCentury.", "All x.((Song(x) & HarryStyles(x)) -> From12thCentury(x))", "all x y.((Song(x) & HarryStyles(y)) -> (AsItWas(x,y) & From12thCentury(x)))", "all x.((Song(x) & HarryStyles(x)) -> 12thCentury(x))", "All x.((Song(x) & HarryStyles(x)) -> FromThe12thCentury(x))", "all x y.((Song(x) & HarryStyles(y)) -> (AsItBecame(x,y) & From12thCentury(x)))", "all x y.((Song(x) & HarryStyles(y) & From12thCentury(x,y)) -> AsItWas(x,y))", "all x y.((Song(x) & HarryStyles(y)) -> (AsItWas(x,y) & FromThe12thCentury(x)))", "all x y.((Song(x) & HarryStyles(y)) -> FromThe12thCentury(x,y))", "all x.((Song(x) & HarryStyles(x) & 12thCentury(x)) -> AsItWas(x))", "all x y.((Song(x) & HarryStyles(y)) -> (AsItWas(x,y) & From12thCentury(y)))", "all x y.((Song(x) & HarryStyles(y)) -> (AsItBecame(x,y) & FromThe12thCentury(x)))", "all x y.((Song(x) & HarryStyles(y)) -> From12thCentury(x,y))"]}
{"id": "folio_train_1597", "nl": "\"As it was\u201d by Harry Styles is not a song from Kanye West and needs to be written with words.", "fol": "(-SongsByKanyeWest(AsItWasByHarryStyles) & MustBeWrittenWithWords(AsItWasByHarryStyles))", "prediction": ["all x.((Song(x) & HarryStyles(x)) -> (-SongFromKanyeWest(x) & NeedsWrittenWithWords(x)))", "all x.((Song(x) & HarryStyles(x)) -> (-SongFromKanyeWest(x) & NeedsWords(x)))", "all x.((Song(x) & HarryStyles(x)) -> -SongFromKanyeWest(x) & NeedsWrittenWithWords(x))", "all x.((Song(x) & ByHarryStyles(x)) -> (-SongFromKanyeWest(x) & NeedsWrittenWithWords(x)))", "all x.((Song(x) & HarryStyles(x)) -> (-SongFromKanyeWest(x) & NeedsWrittenWithWords(x)))", "all x.((Song(x) & HarryStyles(x)) -> (-SongFromKanyeWest(x) & WrittenWithWords(x)))", "all x.((Song(x) & HarryStyles(x)) -> -(SongFromKanyeWest(x) & NeedsWrittenWithWords(x)))", "All x.((Song(x) & HarryStyles(x)) -> (-SongFromKanyeWest(x) & NeedsWrittenWithWords(x)))", "all x.((Song(x) & ByHarryStyles(x)) -> (-SongFromKanyeWest(x) & NeedsWords(x)))", "all x.((Song(x) & HarryStyles(x)) -> (-SongFromKanyeWest(x) & NeedsWords(x)))", "all x.((Song(x) & HarryStyles(x)) -> -SongFromKanyeWest(x) & NeedsWords(x))", "all x.((Song(x) & HarryStyles(x)) -> (-SongFromKanyeWest(x) & WritedWithWords(x)))", "all x.((Song(x) & -SongFromKanyeWest(x) & NeedsWrittenWithWords(x)) -> HarryStyles(x))", "all x.((Song(x) & NotFromKanyeWest(x) & NeedsWrittenWithWords(x)) -> HarryStyles(x))", "all x y.((Song(x) & HarryStyles(y)) -> (-SongFromKanyeWest(y) & NeedsWrittenWithWords(x)))", "all x.((Song(x) & HarryStyles(x)) -> (-Song(x) & WrittenWithWords(x)))"]}
{"id": "folio_train_1598", "nl": "\"Your Woman\" is a song by British one-man band White Town.", "fol": "ProducedBy(WhiteTown,YourWoman)", "prediction": ["\"Your Woman\" is a song by BritishOneManBandWhiteTown.", "all x.((Song(x) & OneManBandWhiteTown(x)) -> \"YourWoman(x)\")", "\"Your Woman\" is a song by British OneManBandWhiteTown.", "all x.((Song(x) & BritishOneManBandWhiteTown(x)) -> \"YourWoman(x)\")", "all x.((Song(x) & SingleManBandWhiteTown(x)) -> \"YourWoman(x)\")", "all x.((Song(x) & OneManBandWhiteTown(x)) -> YourWoman(x))", "all x y.((Song(x) & BritishOneManBandWhiteTown(y)) -> \"YourWoman(x,y)\")", "all x.((Song(x) & OneManBandWhiteTown(x)) -> \"YourFemale(x)\")", "all x y.((Song(x) & BritishOneManBandWhiteTown(y)) -> \"YourWoman(x)\")", "all x.((Song(x) & BritishOneManBandWhiteTown(x)) -> YourWoman(x))", "all x.((Song(x) & OneManBandWhiteTower(x)) -> \"YourWoman(x)\")", "\"Your Woman\" is a song by BritishOneManBandWhiteTown(x) & WrittenBy(x,y))", "all x.((Song(x) & BritishOneManBandWhiteTown(x)) -> \"YourFemale(x)\")", "\"YourWoman\" is a song by BritishOneManBandWhiteTown.", "\"Your Woman\" is a song by oneman band WhiteTown.", "all x.((Song(x) & SingleManBandWhiteTown(x)) -> YourWoman(x))"]}
{"id": "folio_train_1599", "nl": "\"Your Woman\" song peaked at No. 1 on the UK Singles Chart.", "fol": "PeakedAt(YourWoman,UKSinglesChart)", "prediction": ["\"Your Woman\" song peaked at No.1 on UKSinglesChart(x))", "\"Your Woman\" song peaked at No.1 on UKSinglesChart.", "\"Your Woman\" song peakedAtNo.1OnUKSinglesChart(x))", "\"Your Woman\" song peaked at No.1 on UKSinglesChart(x))", "\"Your Woman\" Song PeakedAtNo.1OnUKSinglesChart(x))", "\"YourWoman\" song peakedAtNo.1OnUKSinglesChart(x))", "\"Your Woman\" song peaked at No.1 on UKSinglesChart.", "\"Your Woman\" song peakedAtNo.1 on UKSinglesChart(x))", "\"YourWife\" song peakedAtNo.1OnUKSinglesChart(x))", "\"Your Woman\" song peakedAtNo1OnUKSinglesChart(x))", "\"Your Woman\" song peakedAtNo.1OnUKSinglesChart(x))", "\"YourWoman\" song peakedAtNo1OnUKSinglesChart(x))", "\"YourWoman\" song peakedAtNo.1 on UKSinglesChart(x))", "\"YourWife\" song peakedAtNo1OnUKSinglesChart(x))", "\"Your Woman\" song peaked at No.1 on SinglesChart(x))", "\"Your Woman\" song peakedAtNo.1 on UKSinglesChart."]}
{"id": "folio_train_1600", "nl": "If a song peaked at No.1 at a cetain place, then it was extremely popular.", "fol": "all x y.(PeakedAt(x,y) -> ExtremelyPopular(x))", "prediction": ["all x.((Song(x) & PeakedAtNo.1AtCentainPlace(x)) -> ExtremelyPopular(x))", "all x.((Song(x) & PeakedAtNo1AtCentainPlace(x)) -> ExtremelyPopular(x))", "all x.((Song(x) & PeakedAtNo.1AtCetainPlace(x)) -> ExtremelyPopular(x))", "all x y.((Song(x) & CetainPlace(y) & PeakedAtNo.1(x,y)) -> ExtremelyPopular(x))", "all x y.((Song(x) & CestainPlace(y) & PeakedAtNo.1(x,y)) -> ExtremelyPopular(x))", "all x.((Song(x) & PeakedAtNo1AtCetainPlace(x)) -> ExtremelyPopular(x))", "all x y.((Song(x) & CetainPlace(y) & PeakedAtNo.1(x,y)) -> ExtremelyPopular(x))", "all x y.((Song(x) & CetainPlace(y) & PeakedAtNo1(x,y)) -> ExtremelyPopular(x))", "all x.((Song(x) & PeakedAtNo.1AtCestainPlace(x)) -> ExtremelyPopular(x))", "all x.((Song(x) & PeakedAtNo.1(x) & CetainPlace(x)) -> ExtremelyPopular(x))", "all x y.((Song(x) & CetainPlace(y) & PeakedAt(x,y)) -> ExtremelyPopular(x))", "all x.((Song(x) & PeakedAtNo.1AtCentain(x)) -> ExtremelyPopular(x))", "all x y.((Song(x) & CestainPlace(y) & PeakedAt(x,y)) -> ExtremelyPopular(x))", "all x.((Song(x) & PeakedAtNo1(x) & CetainPlace(x)) -> ExtremelyPopular(x))", "all x y.((Song(x) & PeakedAtNo.1AtCentainPlace(x)) -> ExtremelyPopular(x))", "all x.((Song(x) & PeakedAtNo.1AtCentainPlace(x)) -> ExceptionallyPopular(x))"]}
{"id": "folio_train_1601", "nl": "\"Your Woman\" also peaked No. 1 in Iceland, Israel and Spain.", "fol": "(PeakedAt(YourWoman,Iceland) & PeakedAt(YourWoman,Isarel) & PeakedAt(YourWoman,Spain))", "prediction": ["(PeakedNo.1InIsland(YourWoman) & PeakedNo.1InIsrael(YourWoman) & PeakedNo.1InSpain(YourWoman))", "(PeakedNo.1InIsland(YourWoman) & PeakedNo.1InIsrael(YourWoman) & PeakedNo.1InSpanish(YourWoman))", "(PeakedNo.1InIsland(YourWife) & PeakedNo.1InIsrael(YourWife) & PeakedNo.1InSpain(YourWife))", "(PakedNo.1InIsland(YourWoman) & PeakedNo.1InIsrael(YourWoman) & PeakedNo.1InSpain(YourWoman))", "(PeakedNo.1InIsland(YourWife) & PeakedNo.1InIsrael(YourWife) & PeakedNo.1InSpanish(YourWife))", "(PeakedNo.1InIsland(YourWoman) | PeakedNo.1InIsrael(YourWoman) | PeakedNo.1InSpain(YourWoman)))", "(PakedNo.1InIsland(YourWoman) & PeakedNo.1InIsrael(YourWoman) & PeakedNo.1InSpanish(YourWoman))", "(PeakedNo.1InIsland(YourWoman) & PeakedNo.1InIsrael(YourWoman) & PeakedNo.1InSpania(YourWoman))", "(PeakedNo.1InIsland(YourWife) & PeakedNo.1InIsrael(YoungWife) & PeakedNo.1InSpain(YoungWife))", "All x.((Woman(x) & PeakedNo.1InIsland(x) & PeakedNo.1InIsrael(x) & PeakedNo.1InSpain(x)) -> YourWoman(x))", "All x.((Woman(x) & PeakedNo.1InIsland(x) & PeakedNo.1InIsrael(x) & PeakedNo.1InSpain(x)) -> Your(x))", "All x.((Woman(x) & PeakedNo.1InIsland(x) & PeakedNo.1InIsrael(x) & PeakedNo.1InSpain(x)) -> \"Your Woman(x)\")", "All x.((Woman(x) & PeakedNo.1InIsland(x) & PeakedNo.1InIsrael(x) & PeakedNo.1InSpain(x)) -> \"YourWoman(x)\")", "(PeakedNo.1InIsland(YourWoman) | PeakedNo.1InIsrael(YourWoman) | PeakedNo.1InSpanish(YourWoman)))", "(PeakedNo.1InIsland(YourWife) & PeakedNo.1InIsrael(YourWife) & PeakedNo.1InSpain(YourWife)))", "(PeakedNo.1InIsland(YourWoman) & PeakedNo.2InIsrael(YourWoman) & PeakedNo.1InSpain(YourWoman))"]}
{"id": "folio_train_1602", "nl": "\"Your Woman\" was extremely popular.", "fol": "ExtremelyPopular(YourWoman)", "prediction": ["\"YourFemale(x)\" -> ExtremelyPopular(x))", "\"Your Woman\" - ExtremelyPopular(x))", "\"Your Woman\" -ExtremelyPopular(x))", "\"YourWife(x)\" -> ExtremelyPopular(x))", "\"YourFemale(x) -> ExtremelyPopular(x))", "\"YourFemale(x)\" -> ExceptionallyPopular(x))", "\"YourFemale(x)\" -ExtremelyPopular(x))", "\"Your Woman\" -> ExtremelyPopular(x))", "\"YourWoman\" - ExtremelyPopular(x))", "\"YourWife\" - ExtremelyPopular(x))", "\"YourFemale(x)\" -> ExtremelyPopular(x))", "\"YourFemale(x)\" -> VeryPopular(x))", "\"YourWife\" was incrediblyPopular(x)", "\"YoungWoman\" - ExtremelyPopular(x))", "\"YourWife\" - ExtremelyPopular(x)", "\"Your Woman\" was extremely popular."]}
{"id": "folio_train_1603", "nl": "White Town did not produce any popular song.", "fol": "-exists x.(ProducedBy(WhiteTown,x) & ExtremelyPopular(x))", "prediction": ["all x.(WhiteTown(x) -> -exists y.(PopularSong(y) & ProducedBy(x,y)))", "(exists x.(WhiteTown(x) & -ProducesPopularSong(x)))", "all x.(WhiteTown(x) -> -exists y.(PopularSong(y) & Produces(x,y)))", "all x.(WhiteTown(x) -> -exists y.(PopularSong(y) & Produces(x,y))))", "all x.(WhiteTown(x) -> -ProducesPopularSong(x))", "all x.(WhiteTown(x) -> -ProducedPopularSong(x))", "all x.(WhiteTown(x) -> -exists y.(PopularSong(y) & ProducedBy(x,y))))", "-exists x.(WhiteTown(x) & PopularSong(x))", "(-exists x.(WhiteTown(x) & PopularSong(x)))", "all x.(WhiteTown(x) -> -exists y.(PopularSong(y) & ProducedInWhiteTown(x,y)))", "all x.(WhiteTown(x) -> -exists y.(PopularSong(y) & Produced(x,y))))", "-exists x.(WhiteTown(x) & -ProducesPopularSong(x))", "all x.(WhiteTown(x) -> -exists y.(PopularSong(y) & Produced(x,y)))", "all x.(WhiteTown(x) -> -exists y.(PopularSong(y) & ProducedInWhiteTown(x,y))))", "(WhiteTown(WhiteTown) & -ProducedPopularSong(WhiteTown))", "(WhiteTown(WhiteTown) & -exists x.(PopularSong(x) & Produces(x))))"]}
{"id": "folio_train_1604", "nl": "White Town was a successful band.", "fol": "Successful(WhiteTown)", "prediction": ["all x.(WhiteTown(x) -> SuccessfulBand(x))", "All x.(WhiteTown(x) -> SuccessfulBand(x))", "all x.(WhiteTown(x) -> SuccessfulBand(x))", "all x y.((WhiteTown(x) & Band(y)) -> Successful(x))", "all x y.((WhiteTown(x) & Band(y)) -> Successful(x,y))", "WhiteTown(WhiteTown) -> SuccessfulBand(WhiteTown))", "all x.(WhiteTower(x) -> SuccessfulBand(x))", "all x.(WhiteTown(x) -> SuccessfulBand(x))", "(SuccessfulBand(WhiteTown))", "WhiteTown(WhiteTown) -SuccessfulBand(WhiteTown))", "all x.(WhiteTown(x) -> SuccessiveBand(x))", "(SuccessfulBand(WhiteTown) -> SuccessfulBand(WhiteTown))", "(SuccessfulBand(WhiteTown)", "(SuccessfulBand(WhiteTown) & Band(WhiteTown))", "All x.(WhiteTown(x) -> SuccessfulBand(x))", "WhiteTown(WhiteTown) & SuccessfulBand(WhiteTown)"]}
{"id": "folio_train_1605", "nl": "All people who limp often and regularly have long-term medical issues with underlying causes.", "fol": "all x.(LimpOften(x) -> LongTermMedicalIssues(x))", "prediction": ["all x.((Person(x) & LempsOften(x) & LempsRegularly(x)) -> LongTermMedicalIssues(x))", "all x.((Person(x) & LipsOnce(x) & LipsRegularly(x)) -> LongTermMedicalIssues(x))", "all x.((Person(x) & LempsOften(x) & LempsRegularly(x)) -> LongTermMedicalIssuesWithUnderlyingCauses(x))", "all x.((Person(x) & LeapsOften(x) & LeapsRegularly(x)) -> LongTermMedicalIssues(x))", "all x.((Person(x) & LeapsOften(x) & LeapsRegularly(x)) -> LongTermMedicalIssuesWithUnderlyingCauses(x))", "all x.((Person(x) & LipsOften(x) & LipsRegularly(x)) -> LongTermMedicalIssues(x))", "all x.((Person(x) & LempsOften(x) & LempsRegularly(x)) -> HasLongTermMedicalIssuesWithUnderlyingCauses(x))", "all x.((Person(x) & LempsOften(x) & LempsRegularly(x)) -> HasLongTermMedicalIssues(x))", "all x.((Person(x) & Loud(x) & RegularlyLip(x)) -> LongTermMedicalIssues(x))", "all x.((Person(x) & LeapsOften(x) & LeapsRegularly(x)) -> HasLongTermMedicalIssuesWithUnderlyingCauses(x))", "all x.((Person(x) & LipsOnce(x) & LipsRegularly(x)) -> HasLongTermMedicalIssuesWithUnderlyingCauses(x))", "all x.((Person(x) & LipsOnce(x) & LipsRegularly(x)) -> HasLongTermMedicalIssues(x))", "all x.((Person(x) & LeapsOften(x) & LeapsRegularly(x)) -> HasLongTermMedicalIssues(x))", "all x.((Person(x) & LoudOften(x) & LoudRegularly(x)) -> LongTermMedicalIssues(x))", "all x.((Person(x) & LempsOnce(x) & LempsRegularly(x)) -> LongTermMedicalIssues(x))", "all x.((Person(x) & LimpOften(x) & LimpRegularly(x)) -> LongTermMedicalIssues(x))"]}
{"id": "folio_train_1606", "nl": "If people have long-term medical issues with underlying causes, then they are not often spry and energetic.", "fol": "all x.(LongTermMedicalIssues(x) -> -SpryAndEnergetic(x))", "prediction": ["all x.((Person(x) & LongTermMedicalIssues(x) & HasUnderlyingCauses(x)) -> -Spry(x) & Energetic(x))", "all x.((Person(x) & LongTermMedicalIssues(x) & HasUnderlyingCauses(x)) -> -(Spry(x) & Energetic(x)))", "all x.((Person(x) & HasLongTermMedicalIssues(x) & HasUnderlyingCauses(x)) -> -(Spry(x) & Energetic(x)))", "all x.((Person(x) & LongTermMedicalIssues(x) & UnderlyingCauses(x)) -> -Spry(x) & Energetic(x))", "all x.((Person(x) & HasLongTermMedicalIssues(x) & HasUnderlyingCauses(x)) -> -Spry(x) & Energetic(x))", "all x.((Person(x) & LongTermMedicalIssues(x) & UnderlyingCauses(x)) -> -(Spry(x) & Energetic(x)))", "all x.((Person(x) & LongTermMedicalIssues(x) & HasUnderlyingCauses(x)) -> -Spry(x) & -Energetic(x))", "all x.((Person(x) & HasLongTermMedicalIssues(x) & HasUnderlyingCauses(x)) -> -Spry(x) & -Energetic(x))", "all x.((Person(x) & LongTermMedicalIssues(x) & HasUnderlyingCauses(x)) -> -OftenSpry(x) & -OftenEnergetic(x))", "all x.((Person(x) & LongTermMedicalIssues(x) & HasUnderlyingCauses(x)) -> -(Spry(x) | Energetic(x)))", "all x.((Person(x) & HasLongTermMedicalIssues(x) & HasUnderlyingCauses(x)) -> -(Spry(x) | Energetic(x)))", "all x.((Person(x) & HasLongTermMedicalIssues(x) & HasUnderlyingCauses(x)) -> -OftenSpry(x) & -OftenEnergetic(x))", "all x.((Person(x) & LongTermMedicalIssues(x) & HasUnderlyingCauses(x)) -> -SpryAndEnergetic(x))", "all x.((People(x) & LongTermMedicalIssues(x) & HasUnderlyingCauses(x)) -> -Spry(x) & Energetic(x))", "all x.((Person(x) & LongTermMedicalIssuesWithUnderlyingCauses(x)) -> -Spry(x) & Energetic(x))", "all x.((Person(x) & LongTermMedicalIssues(x) & HasUnderlyingCauses(x)) -> -(Spry(x) | Energetic(x))))"]}
{"id": "folio_train_1607", "nl": "People either stay indoors and rest a lot at home or people are often tired and disinterested in their activities.", "fol": "(all x.((SpryAndEnergetic(x) & -OftenTired(x)) | (-SpryAndEnergetic(x) & OftenTired(x))) & all x.(OftenTired(x) -> StayIndoors(x)))", "prediction": ["all x.(Person(x) -> ((StaysIndoors(x) & RestsAtHome(x)) | (Tense(x) & DisinterestedInActivities(x))))", "all x.(Person(x) -> ((StaysIndoors(x) & RestsAtHome(x)) | (Treated(x) & DisinterestedInActivities(x))))", "all x.(People(x) -> ((StaysIndoors(x) & RestsAtHome(x)) | (Tense(x) & DisinterestedInActivities(x))))", "exists x.(Person(x) & ((StaysIndoors(x) & RestsAtHome(x)) | (Tense(x) & DisinterestedInActivities(x)))))", "all x.(Person(x) -> ((StaysIndoors(x) & RestsAtHome(x)) | (Tense(x) & DisinterestedInActivities(x)))))", "all x.(People(x) -> ((StaysIndoors(x) & RestsAtHome(x)) | (Treated(x) & DisinterestedInActivities(x))))", "exists x.(Person(x) & ((StaysIndoors(x) & RestsAtHome(x)) | (Treated(x) & DisinterestedInActivities(x)))))", "all x.(Person(x) -> ((StaysIndoors(x) & RestsAtHome(x)) | (Treated(x) & DisinterestedInActivities(x)))))", "all x.(People(x) -> ((StaysIndoors(x) & RestsAtHome(x)) | (Tense(x) & DisinterestedInActivities(x)))))", "all x.((Person(x) & (StaysIndoors(x) | RestsAtHome(x))) -> (Tense(x) & DisinterestedInActivities(x)))", "all x.((Person(x) & (StaysIndoors(x) & RestsAtHome(x)) | (Tense(x) & DisinterestedInActivities(x))))", "all x.(Person(x) -> ((StaysIndoors(x) & RestsAtHome(x)) | (Thirsty(x) & DisinterestedInActivities(x))))", "all x y.((Person(x) & (StaysIndoors(x) & RestsAtHome(x)) | (Tense(y) & DisinterestedInActivities(y))))", "all x.((Person(x) & (StaysIndoors(x) & RestsAtHome(x)) | (Treated(x) & DisinterestedInActivities(x))))", "all x.((Person(x) & (StaysIndoors(x) | RestsAtHome(x))) -> (Treated(x) & DisinterestedInActivities(x)))", "all x.(People(x) -> ((StaysIndoors(x) & RestsAtHome(x)) | (Treated(x) & DisinterestedInActivities(x)))))"]}
{"id": "folio_train_1608", "nl": "If people stay indoors and rest a lot at home, then they do not visit the gym at least once a day.", "fol": "all x.(StayIndoors(x) -> -VisitGymDaily(x))", "prediction": ["all x.((StaysIndoors(x) & RestsAtHome(x)) -> -VisitsGym(x))", "all x.((Person(x) & StaysIndoors(x) & RestsAtHome(x)) -> -VisitsGym(x))", "all x.((People(x) & StaysIndoors(x) & RestsAtHome(x)) -> -VisitsGym(x))", "all x.((StaysIndoors(x) & RestsAtHome(x)) -> -VisitGym(x))", "all x.((People(x) & StaysIndoors(x) & RestsAtHome(x)) -> -VisitGym(x))", "all x.((Person(x) & StaysIndoors(x) & RestsAtHome(x)) -> -VisitGym(x))", "all x.((StaysIndoors(x) & RestsAtHome(x)) -> -VisitsGymAtLeastOnceADay(x))", "all x.((StaysIndoors(x) & RestsAtHome(x)) -> -VacatesGym(x))", "all x.((Person(x) & StaysIndoors(x) & RestsAtHome(x)) -> -VisitsGymAtLeastOnceADay(x))", "all x.((StaysIndoors(x) & RestsAtHome(x)) -> -SeesGymAtLeastOnceADay(x))", "all x.((People(x) & StaysIndoors(x) & RestsAtHome(x)) -> -VisitsGymAtLeastOnceADay(x))", "all x.((StaysIndoors(x) & RestsAtHome(x)) -> -VisitsGymAtLeastOneDay(x))", "all x.((Person(x) & StaysIndoors(x) & RestsAtHome(x)) -> -VisitsGymAtLeastOneDay(x))", "all x.((StaysIndoors(x) & RestsAtHome(x)) -> -SeesGym(x))", "all x.((Person(x) & StaysIndoors(x) & RestsAtHome(x)) -> -BetweenDays(x))", "all x y.((Person(x) & StaysIndoors(x) & RestsAtHome(x)) -> -VisitsGym(x,y))"]}
{"id": "folio_train_1609", "nl": "If Mark either limps often and regularly or is often spry and energetic, then Mark limps often and regularly or is often tired and disinterested in his activities.", "fol": "((((LimpOften(Mark) & -SpryAndEnergetic(Mark)) | (-LimpOften(Mark) & SpryAndEnergetic(Mark))) -> LimpOften(Mark)) | OftenTired(Mark))", "prediction": ["all x.((Mark(x) & (LimbsOtherwise(x) | Spry(x) | Energetic(x))) -> (LimbsOtherwise(x) | Tired(x) & DisinterestedInActivities(x)))", "all x.((Mark(x) & (LimbsOther(x) | Spry(x) | Energetic(x))) -> (LimbsOther(x) | Tired(x) & DisinterestedInActivities(x)))", "all x.((Mark(x) & (LimbsOften(x) | Spry(x) | Energetic(x))) -> (LimbsOften(x) | Tired(x) & DisinterestedInActivities(x)))", "all x.((Mark(x) & (LimbsOnce(x) | Spry(x) | Energetic(x))) -> (LimbsOnce(x) | Tired(x) & DisinterestedInActivities(x)))", "all x.((Mark(x) & (LampsOften(x) | Spry(x) | Energetic(x))) -> (LampsOften(x) | Tired(x) & DisinterestedInActivities(x)))", "all x.((Mark(x) & (LipOften(x) | Spry(x) | Energetic(x))) -> (LipOften(x) | Tired(x) & DisinterestedInActivities(x)))", "all x.((Mark(x) & (LimbsOnceAndRegularly(x) | SpryAndEnergetic(x))) -> (LimbsOnceAndRegularly(x) | TiredAndDisinterestedInActivities(x)))", "all x.((Mark(x) & (LimbsOtherwise(x) | Spry(x) | Energetic(x))) -> (LimbsOtherwise(x) | Tired(x) | DisinterestedInActivities(x))))", "all x.((Mark(x) & (LimbsOften(x) | Spry(x) | Energetic(x))) -> (LimbsFrequently(x) | Tired(x) & DisinterestedInActivities(x)))", "all x.((Mark(x) & (LipOften(x) | Spry(x) | Energetic(x))) -> (LipOften(x) | Tired(x) | DisinterestedInActivities(x))))", "all x.((Mark(x) & (LimbsOtherwise(x) | Spry(x) | Energetic(x))) -> (LimbsOtherwise(x) | Tired(x) | Disinterested(x))))", "all x.((Mark(x) & (LampsOften(x) | Spry(x) | Energetic(x))) -> (LampsFrequently(x) | Tired(x) & DisinterestedInActivities(x)))", "all x.((Mark(x) & (Lip(x) | Spry(x) | Energetic(x))) -> (Lip(x) | Tired(x) & DisinterestedInActivities(x)))", "all x.((Mark(x) & (LimbsOftenAndRegularly(x) | SpryAndEnergetic(x))) -> (LimbsOftenAndRegularly(x) | TiredAndDisinterestedInActivities(x)))", "all x.((Mark(x) & (LimbsOther(x) | Spry(x) | Energetic(x))) -> (LimbsOther(x) | Tired(x) | Disinterested(x))))", "all x.((Mark(x) & (LimbsOther(x) | Spry(x) | Energetic(x))) -> (LimbsOther(x) | Tired(x) | DisinterestedInActivities(x))))"]}
{"id": "folio_train_1610", "nl": "Mark limps often and regularly.", "fol": "LimpOften(Mark)", "prediction": ["all x.(Mark(x) -> (LimbsOften(x) & LimbsRegularly(x)))", "all x.(Mark(x) -> (LimbsOften(x) & LimbsRegularly(x)))", "all x.(Mark(x) -> (Limbs(x) & Often(x) & Regularly(x)))", "all x.(Mark(x) -> (LimbsOften(x) & FlourishesRegularly(x)))", "all x.(Mark(x) -> (LivesOften(x) & LivesRegularly(x)))", "all x.(Mark(x) -> (Lip(x) & Often(x) & Regularly(x)))", "all x.(Mark(x) -> (Lip(x) & Often(x) & Regular(x)))", "all x.(Mark(x) -> (LimbsOften(x) & LimbsRegularly(x)))", "all x.(Mark(x) -> (Limbs(x) & Often(x) & Regular(x)))", "all x.(Mark(x) -> (LimpsOften(x) & LimpsRegularly(x)))", "all x.(Mark(x) -> (LegsOften(x) & LegsRegularly(x)))", "all x.(Mark(x) -> (LimbsOften(x) & LoudsRegularly(x)))", "all x.(Marc(x) -> (LimbsOften(x) & LimbsRegularly(x)))", "all x.(Mark(x) -> (LimbsOften(x) & LiesRegularly(x)))", "all x.(Mark(x) -> (LimbsOften(x) & LegsRegularly(x)))", "all x.(Mark(x) -> (LimbsOften(x) & Clever(x)))"]}
{"id": "folio_train_1611", "nl": "Mark visits the gym at least once a day.", "fol": "VisitGymDaily(Mark)", "prediction": ["all x y.((Mark(x) & Gym(y)) -> VisitsAtLeastOneDay(x,y))", "all x y.((Mark(x) & Gym(y)) -> Visits(x,y))", "all x.((Mark(x) & VisitsGym(x)) -> AtLeastOneDay(x))", "all x.((Mark(x) & VisitsGym(x)) -> OnceADay(x))", "all x.(Mark(x) -> VisitsGym(x))", "all x.((Mark(x) & VisitsGym(x)) -> AtLeastOnceADay(x))", "all x y.((Mark(x) & Gym(y)) -> VisitsAtLeast(x,y))", "all x y.((Mark(x) & Gym(y)) -> VisitsAtLeastOnceADay(x,y))", "all x.((Mark(x) & VisitsGym(x)) -> EveryDay(x))", "all x y z.((Mark(x) & Gym(y) & Gym(z)) -> VisitsAtLeastOneDay(x,y,z))", "all x y z.((Mark(x) & Gym(y) & Gym(z)) -> Visits(x,y,z))", "all x.(Mark(x) -> exists y.(Gym(y) & Visits(x,y))))", "all x.((Mark(x) & VisitsGym(x)) -> TwiceADay(x))", "all x y.((Mark(x) & Gym(y)) -> VisitsAtLeastOnce(x,y))", "all x y.((Mark(x) & Gym(y)) -> VisitsAtLeastOnly(x,y))", "all x y.((Mark(x) & Gym(y) & Visits(x,y)) -> AtLeastOneDay(x))"]}
{"id": "folio_train_1612", "nl": "Mark stays indoors and rests regularly at his home or visits the gym at least once a day.", "fol": "(StayIndoors(Mark) | VisitGymDaily(Mark))", "prediction": ["all x.(Mark(x) -> (StaysIndoors(x) & (RetreatsAtHome(x) | VisitsGym(x))))", "all x.(Mark(x) -> (StaysIndoors(x) & (RestsRegularlyAtHome(x) | VisitsGym(x))))", "all x.(Mark(x) -> (StaysIndoors(x) & (RetainsAtHome(x) | VisitsGym(x))))", "all x y.((Mark(x) & Home(y)) -> (StaysIndoors(x) & RestsRegularly(x,y) | VisitsGym(x,y)))", "all x.(Mark(x) -> (StaysIndoors(x) & (RetainsRegularlyAtHome(x) | VisitsGym(x))))", "all x.(Mark(x) -> (StaysIndoors(x) & (RestsAtHome(x) | VisitsGym(x))))", "all x.(Mark(x) -> (StaysIndoors(x) & (RetainsAtHome(x) | VisitsGym(x)))))", "all x.(Mark(x) -> (StaysIndoors(x) & (RetreatsAtHome(x) | VisitsGym(x)))))", "all x.(Mark(x) -> (StaysIndoors(x) & (ReachesAtHome(x) | VisitsGym(x))))", "all x.(Mark(x) -> (StaysIndoors(x) & (RetainsRegularly(x) | VisitsGym(x))))", "all x.(Mark(x) -> (StaysIndoors(x) & (RestsAtHome(x) | VisitsGym(x)))))", "all x.(Mark(x) -> (StaysIndoors(x) & RestsRegularlyAtHome(x) | VisitsGym(x)))", "all x.(Mark(x) -> (StaysIndoors(x) & (RestsRegularly(x) | VisitsGym(x))))", "all x.(Mark(x) -> (StaysIndoors(x) & (ReachesAtHome(x) | VisitsGym(x)))))", "all x.((Mark(x) & (StaysIndoors(x) | RestsRegularly(x))) -> VisitsGym(x))", "all x.(Mark(x) -> (StaysIndoors(x) & (RestsRegularlyAtHome(x) | VisitsGym(x)))))"]}
{"id": "folio_train_1613", "nl": "If two soccer teams score the same number of goals in one UCL final during the regular time, they need to play for the extra time.", "fol": "all x y.((IsSoccerTeam(x) & IsSoccerTeam(y) & HasSameScore(x,y) & InTimePeriod(RegularTime)) -> NeedsExtraTime(x,y))", "prediction": ["all x y.((SoccerTeam(x) & SoccerTeam(y) & ScoresSameNumberOfGoals(x,y)) -> PlaysForExtraTime(x,y))", "all x y.((SoccerTeam(x) & SoccerTeam(y) & ScoresSameNumberOfGoals(x,y) & RegularTime(y)) -> PlaysForExtraTime(x,y))", "all x y.((SoccerTeam(x) & UCLFinal(y) & SameNumberOfGoals(x,y)) -> PlayForExtraTime(x,y))", "all x y.((SoccerTeam(x) & SoccerTeam(y) & ScoresSameNumberOfGoals(x,y) & RegularTime(y)) -> NeedsPlayForExtraTime(x,y))", "all x y.((SoccerTeam(x) & SoccerTeam(y) & ScoresSameNumberOfGoals(x,y) & RegularTime(y)) -> NeedsToPlayForExtraTime(x,y))", "all x y.((SoccerTeam(x) & SoccerTeam(y) & ScoresSameNumberOfGoals(x,y) & RegularTime(y)) -> NeedsExtraTime(x,y))", "all x y.((SoccerTeam(x) & UCLFinal(y) & SameNumberOfGoals(x,y)) -> NeedsExtraTime(x,y))", "all x y.((SoccerTeam(x) & SoccerTeam(y) & ScoresSameNumberOfGoals(x,y) & RegularTime(x,y)) -> NeedsPlayForExtraTime(x,y))", "all x y.((SoccerTeam(x) & SoccerTeam(y) & ScoresSameNumberOfGoals(x,y) & RegularTime(y)) -> NeedsPlayForExtraTime(x))", "all x y.((SoccerTeam(x) & SoccerTeam(y) & ScoresSameNumberOfGoals(x,y) & RegularTime(x)) -> NeedsPlayForExtraTime(x))", "all x y.((SoccerTeam(x) & UCLFinal(y) & SameNumberOfGoals(x,y)) -> NeedsExtraTime(x))", "all x y.((SoccerTeam(x) & SoccerTeam(y) & ScoresSameNumberOfGoals(x,y) & RegularTime(y)) -> NeedsExtraTime(x))", "all x y.((SoccerTeam(x) & SoccerTeam(y) & ScoresSameNumberOfGoals(x,y) & RegularTime(x)) -> NeedsExtraTime(x))", "all x y.((SoccerTeam(x) & SoccerTeam(y) & ScoresSameNumberOfGoals(x,y)) -> PlaysForExtraTime(x))", "all x y z.((SoccerTeam(x) & SoccerTeam(y) & UCLFinal(z) & ScoresSameNumberOfGoals(x,y,z)) -> PlaysForExtraTime(x))", "all x y.((SoccerTeam(x) & UCLFinal(y) & SameNumberOfGoals(x,y)) -> PlayForExtraTime(x))"]}
{"id": "folio_train_1614", "nl": "If two soccer teams score the same number of goals in one UCL final during both the regular time and extra time, they need to play the penalty shoot-out.", "fol": "all x y.((IsSoccerTeam(x) & IsSoccerTeam(y) & HasSameScore(x,y) & InTimePeriod(RegularTime) & InTimePeriod(ExtraTime)) -> NeedsPenaltyShootout(x,y))", "prediction": ["all x.((SoccerTeam(x) & SameNumberOfGoals(x) & UCLFinal(x) & RegularTime(x) & ExtraTime(x)) -> NeedsPenaltyShootOut(x))", "all x y z.((SoccerTeam(x) & SoccerTeam(y) & UCLFinal(z) & RegularTime(z) & ExtraTime(z)) -> NeedsPenaltyShootOut(x,y,z))", "all x y z.((SoccerTeam(x) & SoccerTeam(y) & UCLFinal(z) & RegularTime(z) & ExtraTime(z)) -> NeedsPenaltyShootOut(x))", "all x y.((SoccerTeam(x) & SoccerTeam(y) & ScoresSameNumberOfGoals(x,y) & RegularTime(y) & ExtraTime(y)) -> NeedsPenaltyShootOut(x))", "all x.((SoccerTeam(x) & SameNumberOfGoals(x) & UCLFinal(x) & RegularTime(x) & ExtraTime(x)) -> PlayPenaltyShootOut(x))", "all x y.((SoccerTeam(x) & SoccerTeam(y) & ScoresSameNumberOfGoals(x,y) & UCLFinal(y) & RegularTime(y) & ExtraTime(y)) -> NeedsPenaltyShootOut(x))", "all x y z.((SoccerTeam(x) & SoccerTeam(y) & UCLFinal(z) & RegularTime(z) & ExtraTime(z) & ScoresSameNumberOfGoals(x,y,z)) -> NeedsPenaltyShootOut(x))", "all x y z.((SoccerTeam(x) & SoccerTeam(y) & UCLFinal(z) & RegularTime(z) & ExtraTime(z)) -> PlayPenaltyShootOut(x,y,z))", "all x y z.((SoccerTeam(x) & SoccerTeam(y) & UCLFinal(z) & RegularTime(z) & ExtraTime(z) & ScoresSameGoals(x,y,z)) -> NeedsPenaltyShootOut(x))", "all x.((SoccerTeam(x) & UCLFinal(x) & RegularTime(x) & ExtraTime(x)) -> NeedsPenaltyShootOut(x))", "all x.((SoccerTeam(x) & SameNumberOfGoals(x) & RegularTime(x) & ExtraTime(x)) -> NeedsPenaltyShootOut(x))", "all x y.((SoccerTeam(x) & SoccerTeam(y) & ScoresSameNumberOfGoals(x,y) & RegularTime(x) & ExtraTime(x)) -> NeedsPenaltyShootOut(x))", "all x.((SoccerTeam(x) & UCLFinal(x) & RegularTime(x) & ExtraTime(x)) -> PlayPenaltyShootOut(x))", "all x y z.((SoccerTeam(x) & SoccerTeam(y) & UCLFinal(z) & RegularTime(y) & ExtraTime(z)) -> NeedsPenaltyShootOut(x,y,z))", "all x y z.((SoccerTeam(x) & SoccerTeam(y) & UCLFinal(z) & RegularTime(z) & ExtraTime(z)) -> PlayPenaltyShootOut(x))", "all x.((SoccerTeam(x) & SameNumberOfGoals(x) & UCLFinal(x) & RegularTime(x) & ExtraTime(x)) -> NeedsPenaltyShootout(x))"]}
{"id": "folio_train_1615", "nl": "Real Madrid and Atl\u00e9tico Madrid both scored one goal in 2016 UCL final during the regular time.", "fol": "(IsSoccerTeam(RealMadrid) & IsSoccerTeam(AtleticoMadrid) & HasSameScore(RealMadrid,AtleticoMadrid) & InTimePeriod(RegularTime))", "prediction": ["((RealMadrid(RealMadrid) & Atl\u00e9ticoMadrid(Atl\u00e9ticoMadrid)) -> ScoredOneGoal(RealMadrid,2016))", "all x y.((RealMadrid(x) & Atl\u00e9ticoMadrid(y)) -> (ScoredOneGoal(x,y) & RegularTime(y)))", "((RealMadrid(RealMadrid) & Atl\u00e9ticoMadrid(Atl\u00e9ticoMadrid)) -> (ScoredOneGoal(RealMadrid,2016) & RegularTime(Atl\u00e9ticoMadrid,2016)))", "all x y z.((RealMadrid(x) & Atl\u00e9ticoMadrid(y) & UCLFinal(z) & RegularTime(z)) -> ScoredOneGoal(x,y,z))", "all x y.((RealMadrid(x) & Atl\u00e9ticoMadrid(y)) -> (ScoredOneGoal(x,y) & RegularTime(x,y)))", "all x.((RealMadrid(x) & Atl\u00e9ticoMadrid(x)) -> (ScoredOneGoal(x,2016) & RegularTime(x)))", "all x y.((RealMadrid(x) & Atl\u00e9ticoMadrid(y)) -> (ScoredOneGoal(x,y) & UCLFinal(y) & RegularTime(y)))", "((RealMadrid(RealMadrid) & Atl\u00e9ticoMadrid(Atl\u00e9ticoMadrid)) | (Atl\u00e9ticoMadrid(Atl\u00e9ticoMadrid) & UCLFinal(RealTime))))", "all x y z.((RealMadrid(x) & Atl\u00e9ticoMadrid(y) & UCLFinal(z)) -> (ScoredOneGoal(x,z) & RegularTime(z)))", "all x y.((RealMadrid(x) & Atl\u00e9ticoMadrid(y)) -> (ScoredOneGoal(x,2016) & RegularTime(y)))", "((RealMadrid(RealMadrid) & Atl\u00e9ticoMadrid(Atl\u00e9ticoMadrid)) -> (ScoredOneGoal(RealMadrid,2016) & RegularTime(Atl\u00e9ticoMadrid)))", "all x.((RealMadrid(x) & Atl\u00e9ticoMadrid(x)) -> (ScoredOneGoal(x) & RegularTime(x)))", "all x y z.((RealMadrid(x) & Atl\u00e9ticoMadrid(y) & UCLFinal(z) & RegularTime(z)) -> ScoredOneGoal(x,z))", "all x y.((RealMadrid(x) & Atl\u00e9ticoMadrid(y)) -> (ScoredOneGoalIn2016UCLFinal(x,y) & RegularTime(y)))", "all x y.((RealMadrid(x) & Atl\u00e9ticoMadrid(y)) -> ScoredOneGoal(x,y))", "all x y.((RealMadrid(x) & Atl\u00e9ticoMadrid(y)) -> (ScoredOneGoal(x,y) & RegularTime(x)))"]}
{"id": "folio_train_1616", "nl": "Real Madrid and Atl\u00e9tico Madrid both scored zero goals in 2016 UCL final during the extra time.", "fol": "(IsSoccerTeam(RealMadrid) & IsSoccerTeam(AtleticoMadrid) & HasSameScore(RealMadrid,AtleticoMadrid) & InTimePeriod(ExtraTime))", "prediction": ["(ZeroGoals(RealMadrid) & ZeroGoals(Atl\u00e9ticoMadrid))", "all x y.((RealMadrid(x) & Atl\u00e9ticoMadrid(y)) -> (ScoresZeroGoals(x,y) & ExtraTime(x,y)))", "all x y.((RealMadrid(x) & Atl\u00e9ticoMadrid(y)) -> (ScoresZeroGoals(x,y) & ExtraTime(y)))", "all x y z.((RealMadrid(x) & Atl\u00e9ticoMadrid(y) & UCLFinal(z) & ExtraTime(z)) -> (ScoresZeroGoals(x,z) | ScoresZeroGoals(y,z)))", "all x.((RealMadrid(x) & Atl\u00e9ticoMadrid(x)) -> (ScoresZeroGoals(x) & ExtraTime(x)))", "all x y z.((RealMadrid(x) & Atl\u00e9ticoMadrid(y) & UCLFinal(z) & ExtraTime(z)) -> (ScoresZeroGoals(x,z) & ScoresZeroGoals(y,z)))", "all x y z.((RealMadrid(x) & Atl\u00e9ticoMadrid(y) & UCLFinal(z) & ExtraTime(z)) -> (ScoredZeroGoals(x,z) & ScoredZeroGoals(y,z)))", "all x.((RealMadrid(x) & Atl\u00e9ticoMadrid(x)) -> (ScoredZeroGoals(x) & ExtraTime(x)))", "all x y z.((RealMadrid(x) & Atl\u00e9ticoMadrid(y) & UCLFinal(z) & ExtraTime(z)) -> (ScoredZeroGoals(x,z) | ScoredZeroGoals(y,z)))", "all x y.((RealMadrid(x) & Atl\u00e9ticoMadrid(y)) -> (ScoredZeroGoals(x,y) & ExtraTime(y)))", "all x y.((RealMadrid(x) & Atl\u00e9ticoMadrid(y)) -> (ScoredZeroGoals(x,y) & ExtraTime(x,y)))", "all x y z.((RealMadrid(x) & Atl\u00e9ticoMadrid(y) & UCLFinal(z) & ExtraTime(z)) -> (ScoresZeroGoals(x,z) | ScoresZeroGoals(x,y)))", "all x y z.((RealMadrid(x) & Atl\u00e9ticoMadrid(y) & UCLFinal(z) & ExtraTime(z)) -> (ScoresZeroGoals(x,z) | ScoresZeroGoals(y,z))))", "((RealMadrid(RealMadrid) & Atl\u00e9ticoMadrid(Atl\u00e9ticoMadrid)) -> ScoredZeroGoals(RealMadrid,2016))", "all x y z.((RealMadrid(x) & Atl\u00e9ticoMadrid(y) & UCLFinal(z) & ExtraTime(z)) -> (ScoredZeroGoals(x,z) | ScoredZeroGoals(x,y)))", "all x y.((RealMadrid(x) & Atl\u00e9ticoMadrid(y)) -> (ScoresZeroGoals(x,y) & ExtraTime(x)))"]}
{"id": "folio_train_1617", "nl": "Real Madrid and Atl\u00e9tico Madrid needed to play a penalty shoot-out in 2016 UCL final.", "fol": "NeedsPenaltyShootout(RealMadrid,AtleticoMadrid)", "prediction": ["all x y.((RealMadrid(x) & Atl\u00e9ticoMadrid(y)) -> NeededPenaltyShootOut(x,y))", "all x y.((RealMadrid(x) & Atl\u00e9ticoMadrid(y)) -> NeedsPenaltyShootOut(x,y))", "all x.((RealMadrid(x) & Atl\u00e9ticoMadrid(x)) -> NeededPenaltyShootOut(x,2016))", "all x y.((RealMadrid(x) & Atl\u00e9ticoMadrid(y)) -> NeededToPlayPenaltyShootOut(x,y))", "all x y.((RealMadrid(x) & Atl\u00e9ticoMadrid(y)) -> PlayPenaltyShootOut(x,y))", "all x y z.((RealMadrid(x) & Atl\u00e9ticoMadrid(y) & UCLFinal(z)) -> NeededPenaltyShootOut(x,y,z))", "all x.((RealMadrid(x) & Atl\u00e9ticoMadrid(x)) -> NeededPenaltyShootOut(x))", "all x.((RealMadrid(x) & Atl\u00e9ticoMadrid(x)) -> NeedsPenaltyShootOut(x,2016))", "all x.((RealMadrid(x) & Atl\u00e9ticoMadrid(x)) -> PlayPenaltyShootOut(x,2016))", "all x y z.((RealMadrid(x) & Atl\u00e9ticoMadrid(y) & UCLFinal(z)) -> NeedsPenaltyShootOut(x,y,z))", "all x y.((RealMadrid(x) & Atl\u00e9ticoMadrid(y)) -> (NeedsPenaltyShootOut(x,y) & UCLFinal(y)))", "all x y.((RealMadrid(x) & Atl\u00e9ticoMadrid(y)) -> (NeedsPenaltyShootOut(x,y) & UCLFinal(x,y)))", "all x.((RealMadrid(x) & Atl\u00e9ticoMadrid(x)) -> NeededToPlayPenaltyShootOut(x,2016))", "all x.((RealMadrid(x) & Atl\u00e9ticoMadrid(x)) -> NeedsPenaltyShootOut(x))", "all x y.((RealMadrid(x) & Atl\u00e9ticoMadrid(y)) -> (PlayPenaltyShootOut(x,y) & UCLFinal(y)))", "all x y.((RealMadrid(x) & Atl\u00e9ticoMadrid(y)) -> (PlayPenaltyShootOut(x,y) & UCLFinal(x,y)))"]}
{"id": "folio_train_1618", "nl": "Real Madrid and Atl\u00e9tico Madrid did not need to play a penalty shoot-out in 2016 UCL final.", "fol": "-NeedsPenaltyShootout(RealMadrid,AtleticoMadrid)", "prediction": ["all x y.((RealMadrid(x) & Atl\u00e9ticoMadrid(y)) -> -PlayPenaltyShootOut(x,y))", "all x.((RealMadrid(x) & Atl\u00e9ticoMadrid(x)) -> -PlayPenaltyShootOut(x,2016))", "all x y.((RealMadrid(x) & Atl\u00e9ticoMadrid(y)) -> -NeedsPenaltyShootOut(x,y))", "all x.((RealMadrid(x) & Atl\u00e9ticoMadrid(x)) -> -PlayPenaltyShootOut(x))", "all x y.((RealMadrid(x) & Atl\u00e9ticoMadrid(y)) -> -PlaysPenaltyShootOut(x,y))", "all x.((RealMadrid(x) & Atl\u00e9ticoMadrid(x)) -> -NeedsPenaltyShootOut(x,2016))", "all x.((RealMadrid(x) & Atl\u00e9ticoMadrid(x)) -> -NeedsPenaltyShootOut(x))", "all x.((RealMadrid(x) & Atl\u00e9ticoMadrid(x)) -> -PlaysPenaltyShootOut(x,2016))", "all x.((RealMadrid(x) & Atl\u00e9ticoMadrid(x)) -> -(PlayPenaltyShootOut(x,2016) & PlayPenaltyShootOut(x,2016)))", "all x y.((RealMadrid(x) & Atl\u00e9ticoMadrid(y)) -> -(PlayPenaltyShootOut(x,y) | PlayPenaltyShootOut(x,y)))", "all x y.((RealMadrid(x) & Atl\u00e9ticoMadrid(y)) -> -(PlayPenaltyShootOut(x,y) & UCLFinal(x,y)))", "all x.((RealMadrid(x) & Atl\u00e9ticoMadrid(x)) -> -PlaysPenaltyShootOut(x))", "all x.((RealMadrid(x) & Atl\u00e9ticoMadrid(x)) -> -PlayPenaltyShootOutIn2016UCLFinal(x))", "all x.((RealMadrid(x) & Atl\u00e9ticoMadrid(x)) -> -(PlayPenaltyShootOut(x) & UCLFinal(x)))", "all x.((RealMadrid(x) & Atl\u00e9ticoMadrid(x)) -> -PlayPenaltyShootOutIn2016UCL Final(x))", "all x y.((RealMadrid(x) & Atl\u00e9ticoMadrid(y)) -> -(PlayPenaltyShootOut(x,y) & UCLFinal(y)))"]}
{"id": "folio_train_1619", "nl": "System 7 is a UK-based electronic dance music band.", "fol": "(IsBasedIn(System7,Uk) & IsElectronicDanceMusicBand(System7))", "prediction": ["all x.(System7(x) -> (ElectronicDanceMusicBand(x) & BasedInUK(x)))", "System7 is a UK-based electronic dance music band.", "all x.(System7(x) -> (UKBasedElectronicDanceMusicBand(x) & BasedInUK(x)))", "all x.(System7(x) -> (UKBasedElectronicDanceMusicBand(x) & BasedIn(x,UK)))", "all x.(System7(x) -> (ElectronicDanceMusicBand(x) & UKBased(x)))", "all x.(System7(x) -> (UKBasedElectronicDanceMusicBand(x) & FoundedIn(x,UK)))", "all x.(System7(x) -> (UKBasedElectronicDanceMusicBand(x) & ElectronicDanceMusicBand(x)))", "all x.(System7(x) -> (UKBasedElectronicDanceMusicBand(x) & UKBasedElectronicDanceMusicBand(x)))", "System7 is a UKBasedElectronicDanceMusicBand(System7))", "all x.(System7(x) -> (UKBasedElectronicDanceMusicBand(x) & -UKBasedElectronicDanceMusicBand(x)))", "all x.(System7(x) -> (ElectronicDanceMusicBand(x) & BasedIn(x,UK)))", "all x.(System7(x) -> (UKBasedElectronicDanceMusicBand(x) & LocatedIn(x,UK)))", "all x.(System7(x) -> (UKBasedElectronicDanceMusicBand(x) & ElectronicDanceMusicBand(x) & ElectronicDanceMusicBand(x)))", "System7 is a UKbased electronic dance music band.", "all x.(System7(x) -> (UKBasedElectronicDanceMusicBand(x) & BasedIn(x,y)))", "all x.(System7(x) -> (UKBasedElectronicDanceMusicBand(x) & FoundedIn(x,y)))"]}
{"id": "folio_train_1620", "nl": "Steve Hillage and Miquette Giraudy formed System 7.", "fol": "(FormedBand(Stevehillage,System7) & FormedBand(Miquettegiraudy,System7))", "prediction": ["All x y z.((SteveHillage(x) & MiquetteGiraudy(y) & System7(z)) -> (SteveHillage(x) & MiquetteGiraudy(y) & FormedSystem7(x,z)))", "All x y z.((SteveHillage(x) & MiquetteGiraudy(y) & System7(z)) -> (SteveHillage(x) & MiquetteGiraudy(y)))", "All x y z.((SteveHillage(x) & MiquetteGiraudy(y) & System7(z)) -> (SteveHillage(x) & MiquetteGiraudy(y) & FormedSystem7(y,z)))", "(FormedBySteveHillage(SteveHillage) & FormedByMiquetteGiraudy(SteveHillage))", "All x y z.((SteveHillage(x) & MiquetteGeraudy(y) & System7(z)) -> (SteveHillage(x) & MiquetteGeraudy(y) & FormedSystem7(y,z)))", "All x y z.((SteveHillage(x) & MiquetteGeraudy(y) & System7(z)) -> (SteveHillage(x) & MiquetteGeraudy(y) & FormedSystem7(x,z)))", "All x y z.((SteveHillage(x) & MiquetteGiraudy(y) & System7(z)) -> (SteveHillage(x) & MiquetteGiraudy(y) & Formed(x,z)))", "(FormedBySteveHillageAndMiquetteGiraudy(SteveHillage) & FormedSystem7(SteveHillage) & FormedByMiquetteGiraudy(MiquetteGiraudy))", "All x y z.((SteveHillage(x) & MiquetteGeraudy(y) & System7(z)) -> (SteveHillage(x) & MiquetteGeraudy(y)))", "All x y z.((SteveHillage(x) & MiquetteGiraudy(y) & System7(z)) -> (SteveHillage(x) | MiquetteGiraudy(y)))", "all x y z.((SteveHillage(x) & MiquetteGiraudy(y) & System7(z)) -> (SteveHillage(x) & MiquetteGiraudy(y) & FormedSystem7(x,z)))", "(FormedBySteveHillage(SteveHillage) & FormedByMiquetteGeraudy(SteveHillage))", "(FormedBySystem7(SteveHillage) & FormedBySystem7(SteveHillage) & FormedBySystem7(SteveGiraudy))", "(FormedBySystem7(SteveHillage) & FormedBySystem7(SteveHillage) & FormedBySystem7(SteveHillage) & FormedBySystem7(SteveGiraudy))", "all x y z.((SteveHillage(x) & MiquetteGiraudy(y) & System7(z)) -> (SteveHillage(x) & MiquetteGiraudy(y) & FormedSystem7(y,z)))", "all x y z.((SteveHillage(x) & MiquetteGiraudy(y) & System7(z)) -> (SteveHillage(x) & MiquetteGiraudy(y)))"]}
{"id": "folio_train_1621", "nl": "Steve Hillage and Miquette Giraudy are former members of the band Gong.", "fol": "(IsFormerMemberOf(Stevehillage,Gong) & IsFormerMemberOf(Miquettegiraudy,Gong))", "prediction": ["((SteveHillage(Steve) & MiquetteGiraudy(Steve)) | (MiquetteGiraudy(Steve) & MiquetteGiraudy(Steve))))", "((SteveHillage(Steve) & MiquetteGiraudy(Steve)) | (MiquetteGiraudy(Steve) & MiquetteGiraudy(Miquette))))", "all x.((SteveHillage(x) & MiquetteGiraudy(x)) -> FormerBandGong(x))", "all x.((SteveHillage(x) & MiquetteGiraudy(x)) -> FormerMemberOfBandGong(x))", "((SteveHillage(Steve) & MiquetteGeraudy(Steve)) | (MiquetteGeraudy(Steve) & MiquetteGeraudy(Steve))))", "all x.((SteveHillage(x) & MiquetteGiraudy(x)) -> FormerGongMember(x))", "all x.((SteveHillage(x) & MiquetteGeraudy(x)) -> FormerBandGong(x))", "((SteveHillage(Steve) & MiquetteGeraudy(Steve)) | (MiquetteGeraudy(Steve) & MiquetteGeraudy(Miquette))))", "all x.((SteveHillage(x) & MiquetteGeraudy(x)) -> FormerMemberOfBandGong(x))", "all x.((SteveHillage(x) | MiquetteGiraudy(x)) -> FormerBandGong(x))", "all x.((SteveHillage(x) & MiquetteGeraudy(x)) -> FormerGongMember(x))", "all x.((SteveHillage(x) | MiquetteGiraudy(x)) -> FormerMemberOfBandGong(x))", "((SteveHillage(Steve) & MiquetteGiraudy(Steve)) | (MiquetteGiraudy(Steve) | MiquetteGiraudy(Steve))))", "all x.((SteveHillage(x) | MiquetteGeraudy(x)) -> FormerBandGong(x))", "((SteveHillage(Steve) & MiquetteGiraudy(Steve)) | (MiquetteGiraudy(Steve) & MiquetteGiraudy(Miquette)))", "((SteveHillage(Steve) & MiquetteGiraudy(Steve)) | (MiquetteGiraudy(Steve) & Miquette(Miquette))))"]}
{"id": "folio_train_1622", "nl": "Electric dance music bands are bands.", "fol": "all x.(IsElectronicDanceMusicBand(x) -> IsBand(x))", "prediction": ["all x.(ElectricDanceMusicBand(x) -> Band(x))", "all x y.((ElectricDanceMusicBand(x) & Band(y)) -> Band(x))", "all x y.((ElectricDanceMusicBand(x) & Band(y)) -> Band(x,y))", "all x y.((ElectricDanceMusicBand(x) & ElectricDanceMusic(y)) -> Band(x))", "all x y z.((ElectricDanceMusicBand(x) & ElectricDanceMusic(y) & Band(z)) -> Band(x,y,z))", "all x.((ElectricDanceMusicBand(x) & Band(x)) -> Band(x))", "all x y.((ElectricDanceMusicBand(x) & ElectricDanceMusicBand(y)) -> Band(x))", "all x.(ElectricDanceMusicBand(x) -> Band(x))", "all x y z.((ElectricDanceMusicBand(x) & ElectricDanceMusic(y) & Band(z)) -> Band(x))", "all x y.((ElectricDanceMusicBand(x) & ElectricDanceMusic(y)) -> Band(x,y))", "all x y.((ElectricDanceMusicBand(x) & Band(y)) -> Band(y))", "all x y z.((ElectricDanceMusicBand(x) & ElectricDanceMusic(y) & Band(z)) -> Band(z))", "all x y.((ElectricDanceMusicBand(x) & ElectricMusicBand(y)) -> Band(x))", "all x y z.((ElectricDanceMusicBand(x) & ElectricDanceMusicBand(y) & Band(z)) -> Band(x,y,z))", "all x y.((ElectricDanceMusicBand(x) & ElectricDanceMusicBand(y)) -> Band(x,y))", "all x y.((ElectricDanceMusicBand(x) & MusicBand(y)) -> Band(x))"]}
{"id": "folio_train_1623", "nl": "System 7 has released several club singles.", "fol": "exists x.(IsClubSingle(x) & HasReleased(System7,x))", "prediction": ["all x y.((System7(x) & ClubSingle(y)) -> Released(x,y))", "all x.(System7(x) -> ReleasedClubSingles(x))", "all x.(System7(x) -> (ReleasedClubSingles(x) & ReleasedClubSingles(x)))", "all x y.((System(x) & ClubSingle(y)) -> Released(x,y))", "all x.(System7(x) -> (ReleasesClubSingles(x) & ReleasesClubSingles(x)))", "all x.(System7(x) -> exists y.(ClubSingle(y) & ReleasedBy(x,y)))", "all x.(System7(x) -> ReleasesClubSingles(x))", "all x.(System7(x) -> exists y.(ClubSingle(y) & Released(x,y)))", "all x.(System7(x) -> (ReleasesClubSingles(x) | ReleasesClubSingles(x)))", "all x y.((System7(x) & ClubSingle(y)) -> Releases(x,y))", "All x.(System7(x) -> ReleasedClubSingles(x))", "all x.(System7(x) -> exists y.(ClubSingle(y) & ReleasedBy(x,y))))", "all x.(System7(x) -> (ReleasedClubSingles(x) | ReleasedClubSingles(x)))", "all x y.((System(x) & ClubSingle(y)) -> ReleasedBy(x,y))", "all x.(System7(x) -> (ReleasesClubSingles(x) & ReleasedClubSingles(x)))", "all x y.((System(x) & ClubSingle(y)) -> Releases(x,y))"]}
{"id": "folio_train_1624", "nl": "Club singles are not singles.", "fol": "all x.(IsClubSingle(x) -> -IsSingle(x))", "prediction": ["all x.(ClubSingle(x) -> -Single(x))", "all x.((ClubSingle(x) & Single(x)) -> -Single(x))", "all x.(Single(x) -> -Single(x))", "all x.((ClubSingle(x) & -Single(x)) -> Single(x))", "all x y.((ClubSingle(x) & Single(y)) -> -Single(x,y))", "all x y.((ClubSingle(x) & ClubSingle(y)) -> -Single(x))", "all x y.((ClubSingle(x) & ClubSingle(y)) -> -Single(x,y))", "all x y.((ClubSingle(x) & Single(y)) -> -Single(x))", "all x y.((ClubSingle(x) & Club(y)) -> -Single(x))", "all x.(ClubSingle(x) -> -Single(x))", "all x y.((ClubSingle(x) & Club(y)) -> -Single(x,y))", "all x.((ClubSingle(x) & -Single(x)) -> -Single(x))", "all x.(ClubSingles(x) -> -Single(x))", "all x.(ClubSingle(x) -> -Singles(x))", "all x y.((ClubSingle(x) & ClubSingle(y)) -> -Single(y))", "all x.(Club(x) -> -Single(x))"]}
{"id": "folio_train_1625", "nl": "System 7 was formed by former members of Gong.", "fol": "exists x.(IsFormerMemberOf(x,Gong) & FormedBand(x,System7))", "prediction": ["All x y.((System(x) & FormerGongMember(y)) -> FormedBy(x,y))", "All x.(System7(x) -> FormerGongMember(x))", "All x.(System7(x) -> FormerGongMembers(x))", "all x.(System7(x) -> FormerGongMember(x))", "All x.(System7(x) -> FormerMembersOfGong(x))", "all x.(System7(x) -> FormerGongMembers(x))", "(FormedBy(System7) & FormerGongMembers(System7))", "all x.(System7(x) -> FormerMembersOfGong(x))", "All x.(System7(x) -> FormedByEx-GongMembers(x))", "All x.(System7(x) -> FormedByGong(x))", "all x.(System7(x) -> FormedByEx-GongMembers(x))", "all x.(System7(x) -> FormedByGong(x))", "All x y.((System(x) & FormerGongMember(y,x)) -> FormedBy(x,y))", "All x.(System7(x) -> FormerGongMembersFormed(x))", "All x y.((System(x) & FormerGongMember(y)) -> Formed(x,y))", "All x.(System7(x) -> FormerGongMembersFormedBy(x))"]}
{"id": "folio_train_1626", "nl": "System 7 has released several singles.", "fol": "exists x.(IsSingle(x) & HasReleased(System7,x))", "prediction": ["all x.(System7(x) -> (ReleasedSingles(x) & ReleasedSingles(x)))", "all x.(System7(x) -> ReleasedSingles(x))", "all x y.((System7(x) & Single(y)) -> Released(x,y))", "all x y.((System(x) & Single(y)) -> Released(x,y))", "all x.(System7(x) -> (ReleasesSingles(x) & ReleasesSingles(x)))", "all x.(System7(x) -> exists y.(Single(y) & Released(x,y)))", "all x.(System7(x) -> exists y.(Single(y) & ReleasedBy(x,y)))", "all x.(System7(x) -> exists y.(Single(y) & Released(x,y))))", "all x.(System7(x) -> HasReleasedSingles(x))", "all x.(System7(x) -> (ReleasedSingles(x) | ReleasedSingles(x)))", "All x.(System7(x) -> ReleasedSingles(x))", "all x.(System7(x) -> exists y.(Single(y) & ReleasedBy(x,y))))", "all x.(System7(x) -> ReleasesSingles(x))", "all x.(System7(x) -> (ReleasesSingles(x) | ReleasesSingles(x)))", "all x.(System7(x) -> (ReleasesSingles(x) & ReleasedSingles(x)))", "all x y.((System7(x) & Single(y)) -> Releases(x,y))"]}
{"id": "folio_train_1627", "nl": "System 7 is not a band.", "fol": "-IsBand(System7)", "prediction": ["all x.(System7(x) -> -Band(x))", "All x.(System7(x) -> -Band(x))", "(-Band(System7))", "-Band(System7))", "System7 is notBand(System7))", "System7 & -Band(System7))", "System7 is not a band.", "-Band(System7)", "all x.(System7(x) -> -Band(x))", "System7 - Band(System7))", "System7 is not a Band(System7))", "All x.(System7(x) -> -Band(x))", "System7 -Band(System7))", "(-Band(System7) & -Band(System7))", "(-Band(System7))", "all x.(System7(x) & -Band(x))"]}
{"id": "folio_train_1628", "nl": "A summarization model is always faithful if it uses content from the input documents.", "fol": "all x.((SummarizationModel(x) & IsSummarizationModel(x) & UsesOnlyInputDocuments(x)) -> IsFaithful(x))", "prediction": ["all x.((SummarizationModel(x) & UsesContentFromInputDocuments(x)) -> Faithful(x))", "all x.((SummarizationModel(x) & UsesInputContent(x)) -> Faithful(x))", "all x.((SummarizationModel(x) & UsesContentFromInputDocuments(x)) -> AlwaysTrue(x))", "all x.((SummarizationModel(x) & UsesContentFromInputDocuments(x)) -> True(x))", "all x.((SummarizationModel(x) & UsesInputContent(x)) -> AlwaysTrue(x))", "all x.((SummarizationModel(x) & UsesInputDocuments(x)) -> Faithful(x))", "all x.((SummarizationModel(x) & UsesInputContent(x)) -> True(x))", "all x.((SummarizationModel(x) & UsesInputDocuments(x)) -> AlwaysTrue(x))", "all x.((SummarizationModel(x) & UsesInputDocuments(x)) -> True(x))", "all x y.((SummarizationModel(x) & InputDocuments(y) & UsesContent(x,y)) -> Faithful(x))", "all x.((SummarizationModel(x) & UsesContentFromInputDocuments(x)) -> Sturdy(x))", "all x.((SummarizationModel(x) & UsesContentFromInputDocuments(x)) -> Fiddler(x))", "all x.((SummarizationModel(x) & UsesContentFromInputDocuments(x)) -> True(x))", "all x y.((SummarizationModel(x) & InputDocuments(y) & UsesContent(x,y)) -> True(x))", "all x y.((SummarizationModel(x) & InputDocuments(y) & UsesContent(x,y)) -> AlwaysTrue(x))", "all x y.((SummarizationModel(x) & InputDocuments(y) & UsesContentFrom(x,y)) -> Faithful(x))"]}
{"id": "folio_train_1629", "nl": "Extractive models are a kind of summarization models.", "fol": "all x.((SummarizationModel(x) & IsExtractiveModel(x)) -> IsSummarizationModel(x))", "prediction": ["all x.(ExtractiveModel(x) -> SummarizationModel(x))", "all x.(ExtractiveModel(x) -> (SummarizationModel(x) & SummarizationModel(x)))", "all x.(ExtractiveModel(x) -> (SummarizationModel(x) | SummarizationModel(x)))", "all x y.((ExtractiveModel(x) & SummarizationModel(y)) -> SummarizationModel(x,y))", "all x.(ExtractiveModel(x) -> SummarizationModel(x))", "all x.((ExtractiveModel(x) & SummarizationModel(x)) -> ExtractiveModel(x))", "all x.(ExtractionModel(x) -> SummarizationModel(x))", "all x y.((ExtractiveModel(x) & SummarizationModel(y)) -> SortOf(x,y))", "all x.(ExtractiveModel(x) -> (SummarizationModel(x) & SummarizationModel(x)))", "all x.(ExtractiveModel(x) -> (SummarizationModel(x) | SummarizationModel(x)))", "all x y.((ExtractiveModel(x) & SummarizationModel(y)) -> SummarizationModel(x))", "all x.(ExtractiveModel(x) -> (SummarizationModel(x) & -SummarizationModel(x)))", "all x.(ExtractionModel(x) -> (SummarizationModel(x) & SummarizationModel(x)))", "all x.(ExtractiveModel(x) -> (SummarizationModel(x) & SummarizationModel(x)))", "all x.(ExtractiveModel(x) -> (SommarizationModel(x) & SummarizationModel(x)))", "all x.(ExtractiveModel(x) -> SummarizationModel(x))"]}
{"id": "folio_train_1630", "nl": "Extractive model can only use content from the input documents.", "fol": "all x.((SummarizationModel(x) & IsExtractiveModel(x)) -> UsesOnlyInputDocuments(x))", "prediction": ["all x.(ExtractiveModel(x) -> CanUseContentFromInputDocuments(x))", "all x.(ExtractiveModel(x) -> UsesContentFromInputDocuments(x))", "all x.(ExtractiveModel(x) -> (UsesInputDocuments(x) & OnlyUsesInputDocuments(x)))", "all x.(ExtractiveModel(x) -> (UsesInputDocuments(x) & UsesInputDocuments(x)))", "all x.(ExtractiveModel(x) -> UsesInputDocuments(x))", "all x y.((ExtractiveModel(x) & InputDocuments(y)) -> CanUseContent(x,y))", "all x y.((ExtractiveModel(x) & Content(y)) -> CanUseFromInputDocuments(x,y))", "all x y.((ExtractiveModel(x) & Content(y)) -> OnlyUsesFromInputDocuments(x,y))", "all x.(ExtractiveModel(x) -> CanUseInputContent(x))", "all x y z.((ExtractiveModel(x) & Content(y) & InputDocuments(z)) -> CanUse(x,y,z))", "all x y.((ExtractiveModel(x) & InputDocuments(y)) -> CanUse(x,y))", "all x.(ExtractiveModel(x) -> OnlyUsesContentFromInputDocuments(x))", "all x.(ExtractiveModel(x) -> (UsesContentFromInputDocuments(x) & -UsesContentFromInputDocuments(x)))", "all x.(ExtractiveModel(x) -> OnlyUsesInputDocuments(x))", "all x y.((ExtractiveModel(x) & Content(y) & InputDocuments(x,y)) -> CanUse(x,y))", "all x.(ExtractiveModel(x) -> (UsesContentFromInputDocuments(x) & UsesContentFromInputDocuments(x)))"]}
{"id": "folio_train_1631", "nl": "Extractive models are always faithful.", "fol": "all x.((SummarizationModel(x) & IsExtractiveModel(x)) -> IsFaithful(x))", "prediction": ["all x.(ExtractiveModel(x) -> AlwaysTrue(x))", "all x.(ExtractiveModel(x) -> True(x))", "all x.(ExtractiveModel(x) -> Faithful(x))", "all x.(ExtractiveModel(x) -> AlwaysFirthy(x))", "all x.(ExtractiveModel(x) -> AlwaysTruthful(x))", "all x.(ExtractiveModel(x) -> AlwaysFirm(x))", "all x.(ExtractiveModel(x) -> AlwaysTrue(x))", "all x.(ExtractionModel(x) -> AlwaysTrue(x))", "all x.(ExtractiveModel(x) -> Fiddler(x))", "all x.(ExtractiveModel(x) -> AlwaysFirm(x))", "all x.((ExtractiveModel(x) & True(x)) -> Always(x))", "all x.(ExtractiveModel(x) -> AlwaysTrusted(x))", "all x.(ExtractiveModel(x) -> (True(x) & True(x)))", "all x.(ExtractiveModel(x) -> True(x))", "all x.(ExtractiveModel(x) -> Tight(x))", "all x.((ExtractiveModel(x) & True(x)) -> Extensive(x))"]}
{"id": "folio_train_1632", "nl": "Extractive models are not always faithful.", "fol": "-all x.((SummarizationModel(x) & IsExtractiveModel(x)) -> IsFaithful(x))", "prediction": ["all x.(ExtractiveModel(x) -> -True(x))", "all x.(ExtractiveModel(x) -> -Firthy(x))", "all x.((ExtractiveModel(x) & -Firthy(x)) -> -Firthy(x))", "all x.(ExtractiveModel(x) -> -Firthful(x))", "all x.(ExtractiveModel(x) -> -Firmly(x))", "all x.(ExtractiveModel(x) -> -Fibrant(x))", "all x.((ExtractiveModel(x) & -True(x)) -> -True(x))", "all x.(ExtractiveModel(x) -> -Fictional(x))", "all x.((ExtractiveModel(x) & -Firthy(x)) -> -Firmish(x))", "all x.(ExtractiveModel(x) -> -Treatful(x))", "all x.(ExtractiveModel(x) -> -Fibrite(x))", "all x.(ExtractiveModel(x) -> -Firtile(x))", "all x.(ExtractiveModel(x) -> -Fresh(x))", "all x.(ExtractiveModel(x) -> -Trusted(x))", "all x.((ExtractiveModel(x) & -True(x)) -> -Firthful(x))", "all x.(ExtractiveModel(x) -> -Focused(x))"]}
{"id": "folio_train_1633", "nl": "If people practice coding questions, then they are not studying to go to medical school to become a doctor.", "fol": "all x.(PracticeCodingQuestions(x) -> -StudyingForMedicalSchool(x))", "prediction": ["all x.(PracticesCodingQuestions(x) -> -StudyingToMedicalSchoolToBecomeDoctor(x))", "all x.(PracticesCodingQuestions(x) -> -StudyingToMedicalSchool(x))", "all x.(PracticesCodingQuestions(x) -> -StudiesToMedicalSchoolToBecomeDoctor(x))", "all x.(PracticesCodecingQuestions(x) -> -StudyingToMedicalSchoolToBecomeDoctor(x))", "all x.(PracticesCodedQuestions(x) -> -StudyingToMedicalSchoolToBecomeDoctor(x))", "all x.((Person(x) & PracticesCodingQuestions(x)) -> -StudyingToMedicalSchoolToBecomeDoctor(x))", "all x.(PracticeCodingQuestions(x) -> -StudyingToMedicalSchoolToBecomeDoctor(x))", "all x.(PracticesCodingQuestions(x) -> -StudiesToGoToMedicalSchoolToBecomeDoctor(x))", "all x.(PracticesCodingQuestions(x) -> -GoesToMedicalSchoolToBecomeDoctor(x))", "all x.(PracticesCodingQuestions(x) -> -GoingToMedicalSchoolToBecomeDoctor(x))", "all x.(PracticesCodingQuestions(x) -> -StudyingToBecomeDoctor(x))", "all x.((Person(x) & PracticesCodingQuestions(x)) -> -StudyingToMedicalSchool(x))", "all x.(PracticesCodingQuestions(x) -> -SelectingMedicalSchoolToBecomeDoctor(x))", "all x.(PracticesCodecingQuestions(x) -> -StudyingToMedicalSchool(x))", "all x.(PracticesCodingQuestions(x) -> -StudiesToMedicalSchool(x))", "all x.(PracticesCodedQuestions(x) -> -StudyingToMedicalSchool(x))"]}
{"id": "folio_train_1634", "nl": "If people want to work in the software engineering industry, then they practice coding questions.", "fol": "all x.(WantsToWorkInSoftwareEngineering(x) -> PracticeCodingQuestions(x))", "prediction": ["all x.((Person(x) & WantsSoftwareEngineering(x)) -> PracticesCodingQuestions(x))", "all x.((Person(x) & WantsSoftwareEngineering(x)) -> PracticesCodecingQuestions(x))", "all x.((Person(x) & WantsToWorkInSoftwareEngineering(x)) -> PracticesCodingQuestions(x))", "all x y.((Person(x) & SoftwareEngineeringIndustry(y) & WantsToWork(x,y)) -> PracticesCodingQuestions(x))", "all x.((Person(x) & WantsSoftwareEngineeringIndustry(x)) -> PracticesCodingQuestions(x))", "all x.((Person(x) & WantsSoftwareEngineeringIndustry(x)) -> PracticesCodecingQuestions(x))", "all x.((Person(x) & WantsToWorkInSoftwareEngineering(x)) -> PracticesCodecingQuestions(x))", "all x.((Person(x) & WantsSoftwareEngineeringWork(x)) -> PracticesCodingQuestions(x))", "all x y.((Person(x) & SoftwareEngineeringIndustry(y) & WantsToWorkIn(x,y)) -> PracticesCodingQuestions(x))", "all x y.((Person(x) & SoftwareEngineeringIndustry(y)) -> PracticesCodingQuestions(x,y))", "all x.((Person(x) & WantsSoftwareEngineeringWork(x)) -> PracticesCodecingQuestions(x))", "all x y.((Person(x) & SoftwareEngineeringIndustry(y) & WantsToWork(x,y)) -> PracticesCodecingQuestions(x))", "all x.((Person(x) & WantsToWorkInSoftwareEngineeringIndustry(x)) -> PracticesCodingQuestions(x))", "all x.((Person(x) & WantsSoftwareEngineering(x)) -> PracticeCodingQuestions(x))", "all x y.((Person(x) & SoftwareEngineeringIndustry(y) & WantsToWorkIn(x,y)) -> PracticesCodecingQuestions(x))", "all x.(WantsToWorkInSoftwareEngineering(x) -> PracticesCodingQuestions(x))"]}
{"id": "folio_train_1635", "nl": "If people enjoy healthcare fields and want to help people with medical issues, then they are studying to go to medical school to become a doctor.", "fol": "all x.(EnjoysHealthcareFields(x) -> StudyingForMedicalSchool(x))", "prediction": ["all x.((EnjoysHealthcareFields(x) & WantsToHelpWithMedicalIssues(x)) -> StudiesToBecomeDoctor(x))", "all x.((EnjoysHealthcareFields(x) & WantsToHelpPeopleWithMedicalIssues(x)) -> StudiesToBecomeDoctor(x))", "all x.((Person(x) & EnjoysHealthcareFields(x) & WantsToHelpPeopleWithMedicalIssues(x)) -> StudyingToBecomeMedicalSchool(x))", "all x.((Person(x) & EnjoysHealthcareFields(x) & WantsToHelpWithMedicalIssues(x)) -> StudiesToBecomeDoctor(x))", "all x.((Person(x) & EnjoysHealthcareFields(x) & WantsToHelpPeopleWithMedicalIssues(x)) -> StudiesToBecomeMedicalSchool(x))", "all x.((EnjoysHealthcareFields(x) & WantsToHelpWithMedicalIssues(x)) -> StudyingToBecomeDoctor(x))", "all x.((Person(x) & EnjoysHealthcareFields(x) & WantsToHelpWithMedicalIssues(x)) -> StudyingToBecomeMedicalSchool(x))", "all x.((Person(x) & EnjoysHealthcareFields(x) & WantsToHelpWithMedicalIssues(x)) -> StudiesToBecomeMedicalSchool(x))", "all x.((Person(x) & EnjoysHealthcareFields(x) & WantsToHelpPeopleWithMedicalIssues(x)) -> StudiesToBecomeDoctor(x))", "all x.((EnjoysHealthcareFields(x) & WantsToHelpPeopleWithMedicalIssues(x)) -> StudiesToBecomeMedicalSchool(x))", "all x.((EnjoysHealthcareFields(x) & WantsToHelpPeopleWithMedicalIssues(x)) -> StudyingToBecomeDoctor(x))", "all x.((EnjoysHealthcareFields(x) & WantsToHelpPeopleWithMedicalIssues(x)) -> StudyingToBecomeMedicalSchool(x))", "all x.((Person(x) & EnjoysHealthcareFields(x) & WantsToHelpWithMedicalIssues(x)) -> StudyingToBecomeDoctor(x))", "all x.((EnjoysHealthcareFields(x) & WantsToHelpWithMedicalIssues(x)) -> StudyingToBecomeMedicalSchool(x))", "all x.((EnjoysHealthcareFields(x) & WantsToHelpWithMedicalIssues(x)) -> StudiesToBecomeMedicalSchool(x))", "all x.((Person(x) & EnjoysHealthcareFields(x) & WantsToHelpPeopleWithMedicalIssues(x)) -> StudyingToBecomeDoctor(x))"]}
{"id": "folio_train_1636", "nl": "If people grew up with parents who worked as doctors, then they enjoy healthcare fields and want to help people with medical issues.", "fol": "all x.(GrewUpWithDoctorParents(x) -> EnjoysHealthcareFields(x))", "prediction": ["all x.((Person(x) & GrownUpWithParents(x) & WorkedAsDoctors(x)) -> (EnjoysHealthcareFields(x) & WantsToHelpWithMedicalIssues(x)))", "all x.((GrowthWithParents(x) & WorkedAsDoctors(x)) -> (EnjoysHealthcareFields(x) & WantsToHelpWithMedicalIssues(x)))", "all x.((People(x) & GrownUpWithParents(x) & WorkedAsDoctors(x)) -> (EnjoysHealthcareFields(x) & WantsToHelpWithMedicalIssues(x)))", "all x.((Person(x) & grewUpWithParents(x) & WorkedAsDoctors(x)) -> (EnjoysHealthcareFields(x) & WantsToHelpWithMedicalIssues(x)))", "all x.((Person(x) & GrowingUpWithParents(x) & WorkedAsDoctors(x)) -> (EnjoysHealthcareFields(x) & WantsToHelpWithMedicalIssues(x)))", "all x.((Person(x) & GrownUpWithParents(x) & WorkedAsDoctors(x)) -> (EnjoysHealthcareFields(x) & WantsToHelpPeopleWithMedicalIssues(x)))", "all x.((GrowsUpWithParents(x) & WorkedAsDoctors(x)) -> (EnjoysHealthcareFields(x) & WantsToHelpWithMedicalIssues(x)))", "all x.((Person(x) & GrownUpWithParents(x) & WorkedAsDoctors(x)) -> (EnjoysHealthcareFields(x) & WantsToHelpMedicalIssues(x)))", "all x.((Person(x) & GrownUpWithParentsWorkingAsDoctors(x)) -> (EnjoysHealthcareFields(x) & WantsToHelpWithMedicalIssues(x)))", "all x.((People(x) & grewUpWithParents(x) & WorkedAsDoctors(x)) -> (EnjoysHealthcareFields(x) & WantsToHelpWithMedicalIssues(x)))", "all x.((GrowthWithParents(x) & WorkedAsDoctors(x)) -> (EnjoysHealthcareFields(x) & WantsToHelpPeopleWithMedicalIssues(x)))", "all x.((GrowthWithParents(x) & WorkedAsDoctors(x)) -> (EnjoysHealthcareFields(x) & WantsToHelpMedicalIssues(x)))", "all x.((People(x) & GrownUpWithParents(x) & WorkedAsDoctors(x)) -> (EnjoysHealthcareFields(x) & WantsToHelpPeopleWithMedicalIssues(x)))", "all x.((People(x) & GrowingUpWithParents(x) & WorkedAsDoctors(x)) -> (EnjoysHealthcareFields(x) & WantsToHelpWithMedicalIssues(x)))", "all x.((GrowsUpWithParents(x) & WorkedAsDoctors(x)) -> (EnjoysHealthcareFields(x) & WantsToHelpPeopleWithMedicalIssues(x)))", "all x.((GrowsUpWithParents(x) & WorkedAsDoctors(x)) -> (EnjoysHealthcareFields(x) & WantsToHelpMedicalIssues(x)))"]}
{"id": "folio_train_1637", "nl": "If people study hard, then they grew up with parents who worked as doctors.", "fol": "all x.(StudiesHard(x) -> ParentDoctor(x))", "prediction": ["all x.(StudiesHard(x) -> (GrowsUpWithParents(x) & WorkedAsDoctors(x)))", "all x.(StudiesHard(x) -> (GrowthWithParents(x) & WorkedAsDoctors(x)))", "all x.(StudiesHard(x) -> GrowsUpWithDoctors(x))", "all x y z.((Person(x) & StudyHard(x) & Parent(y) & Doctor(z)) -> GrownUpWith(x,y,z))", "all x.(StudiesHard(x) -> (GrowsUpWithParents(x) & WorksAsDoctors(x)))", "all x y.((Person(x) & StudyHard(x)) -> (GrowsUpWithParents(x,y) & WorkedAsDoctors(y)))", "all x.(StudiesHard(x) -> (GrowsUpWithPasts(x) & WorkedAsDoctors(x)))", "all x.(StudiesHard(x) -> (GrowsUpWithDoctors(x) & ParentsWorkAsDoctors(x)))", "all x y.((Person(x) & StudyHard(x) & Parent(y) & WorkedAsDoctor(y)) -> GrownUpWith(x,y))", "all x y.((Person(x) & StudyHard(x)) -> (GrowsUpWithParents(y) & WorkedAsDoctors(y)))", "all x y z.((Person(x) & StudyHard(x) & Parent(y) & Doctor(z)) -> grewUpWith(x,y,z))", "all x.(StudiesHard(x) -> GrownUpWithDoctors(x))", "all x y.((Person(x) & StudyHard(x)) -> (GrowsUpWithParents(x,y) & WorkedAsDoctors(x)))", "all x y.((People(x) & StudyHard(x)) -> (GrowsUpWithParents(x,y) & WorkedAsDoctors(y)))", "all x.(StudiesHard(x) -> (GrowsUpWithParentsWorkingAsDoctors(x)))", "all x.(StudiesHard(x) -> (GrowsUpWithDoctors(x)))"]}
{"id": "folio_train_1638", "nl": "If Robin neither enjoys healthcare fields and wants to help people with medical issues nor grew up with parents who worked as doctors, then Robin is either a person who studies hard or grew up with parents who worked as doctors.", "fol": "(-(EnjoysHealthcareFields(Robin) | GrewUpWithDoctorParents(Robin)) -> (StudiesHard(Robin) | GrewUpWithDoctorParents(Robin)))", "prediction": ["all x.((Robin(x) & -(EnjoysHealthcareFields(x) & WantsToHelpPeopleWithMedicalIssues(x) | GrownUpWithDoctors(x))) -> (StudiesHard(x) | GrownUpWithDoctors(x)))", "all x.((Robin(x) & -(EnjoysHealthcareFields(x) & WantsToHelpMedicalIssues(x) | GrownUpWithDoctors(x))) -> (StudiesHard(x) | GrownUpWithDoctors(x)))", "all x.((Robin(x) & -(EnjoysHealthcareFields(x) & WantsToHelpWithMedicalIssues(x) | GrownUpWithDoctors(x))) -> (StudiesHard(x) | GrownUpWithDoctors(x)))", "all x.((Robin(x) & -(EnjoysHealthcareFields(x) & WantsToHelpPeopleWithMedicalIssues(x) & GrownUpWithDoctors(x))) -> (StudiesHard(x) | GrownUpWithDoctors(x)))", "all x.((Robin(x) & -(EnjoysHealthcareFields(x) & WantsToHelpPeopleWithMedicalIssues(x) | GrownUpWithPatientsWorkingAsDoctors(x))) -> (StudiesHard(x) | GrownUpWithPatientsWorkingAsDoctors(x)))", "all x.((Robin(x) & -(EnjoysHealthcareFields(x) & WantsToHelpPeopleWithMedicalIssues(x) | GrownUpWithDentistParents(x))) -> (StudiesHard(x) | GrownUpWithDentistParents(x)))", "all x.((Robin(x) & -(EnjoysHealthcareFields(x) & WantsToHelpMedicalIssues(x) & GrownUpWithDoctors(x))) -> (StudiesHard(x) | GrownUpWithDoctors(x)))", "all x.((Robin(x) & -(EnjoysHealthcareFields(x) & WantsToHelpPeopleWithMedicalIssues(x) | GrownUpWithPastsWorkingAsDoctors(x))) -> (StudiesHard(x) | GrownUpWithPastsWorkingAsDoctors(x)))", "all x.((Robin(x) & -(EnjoysHealthcareFields(x) & WantsToHelpPeopleWithMedicalIssues(x) | GrownUpWithWorkingDoctors(x))) -> (StudiesHard(x) | GrownUpWithWorkingDoctors(x)))", "all x.((Person(x) & -(EnjoysHealthcareFields(x) & WantsToHelpPeopleWithMedicalIssues(x) | GrownUpWithDoctors(x))) -> (StudiesHard(x) | GrownUpWithDoctors(x)))", "all x.((Robin(x) & -(EnjoysHealthcareFields(x) & WantsToHelpWithMedicalIssues(x) & GrownUpWithDoctors(x))) -> (StudiesHard(x) | GrownUpWithDoctors(x)))", "all x.((Robin(x) & -(EnjoysHealthcareFields(x) & WantsToHelpPeopleWithMedicalIssues(x) | GrownUpWithDoctors(x))) -> (StudiesHard(x) | GrownUpWithDoctors(x))))", "all x.((Robin(x) & (-EnjoysHealthcareFields(x) & WantsToHelpPeopleWithMedicalIssues(x) | GrownUpWithDoctors(x))) -> (StudiesHard(x) | GrownUpWithDoctors(x)))", "all x.((Robin(x) & -(EnjoysHealthcareFields(x) & WantsToHelpMedicalIssues(x) | GrownUpWithDoctors(x))) -> (StudiesHard(x) | GrownUpWithDoctors(x))))", "all x.((Robin(x) & -(EnjoysHealthcareFields(x) & WantsToHelpPeopleWithMedicalIssues(x) & GrowsUpWithDoctors(x))) -> (StudiesHard(x) | GrowsUpWithDoctors(x)))", "all x.((Robin(x) & -(EnjoysHealthcareFields(x) & WantsToHelpPeopleWithMedicalIssues(x) | GrownUpWithPastsWorkingAsDoctors(x))) -> (StudiesHard(x) | GrownUpWithPastsWorkingAsDoctors(x))))"]}
{"id": "folio_train_1639", "nl": "Robin is a person who studies hard.", "fol": "StudiesHard(Robin)", "prediction": ["all x.(Robin(x) -> StudiesHard(x))", "all x.(Robin(x) -> StudiesHard(x))", "all x y.((Robin(x) & Person(y)) -> StudiesHard(x))", "all x y.((Robin(x) & Person(y)) -> StudiesHard(x,y))", "all x.((Person(x) & StudiesHard(x)) -> Robin(x))", "all x.(Robin(x) -> StudyHard(x))", "all x.((Robin(x) & StudiesHard(x)) -> Person(x))", "all x y.((Robin(x) & Person(y)) -> StudiesHard(y))", "(StudiesHard(Robin) & Robin(Robin))", "(StudiesHard(Robin) & Person(Robin))", "all x.(Robin(x) -> (StudiesHard(x) & StudiesHard(x)))", "all x.(Robin(x) -> StudyesHard(x))", "exists x.(Robin(x) & StudiesHard(x))", "(StudiesHard(Robin) & -StudiesHard(Robin))", "(StudiesHard(Robin) -> Person(Robin))", "all x.(Robin(x) -> (StudiesHard(x) & StudyesHard(x)))"]}
{"id": "folio_train_1640", "nl": "Robin practices coding questions and wants to work in the software engineering industry.", "fol": "(PracticeCodingQuestions(Robin) & WantsToWorkInSoftwareEngineering(Robin))", "prediction": ["all x.(Robin(x) -> (PracticesCodingQuestions(x) & WantsToWorkInSoftwareEngineering(x)))", "all x.(Robin(x) -> (PracticesCodingQuestions(x) & WantsToWorkInSoftwareEngineeringIndustry(x)))", "all x y.((Robin(x) & CodingQuest(y)) -> (Practices(x,y) & WantsToWorkInSoftwareEngineering(x)))", "all x.(Robin(x) -> (PracticesCodecingQuestions(x) & WantsToWorkInSoftwareEngineering(x)))", "all x y z.((Robin(x) & CodingQuest(y) & SoftwareEngineering(z)) -> (Practices(x,y) & WantsToWorkIn(x,z)))", "all x y.((Robin(x) & CodingQuests(y)) -> (Practices(x,y) & WantsToWorkInSoftwareEngineering(x)))", "all x y z.((Robin(x) & CodingQuest(y) & SoftwareEngineeringIndustry(z)) -> (Practices(x,y) & WantsToWork(x,z)))", "all x y.((Robin(x) & SoftwareEngineering(y)) -> (PracticesCodingQuestions(x) & WantsToWorkIn(x,y)))", "all x y.((Robin(x) & SoftwareEngineeringIndustry(y)) -> (PracticesCodingQuestions(x) & WantsToWorkIn(x,y)))", "all x y z.((Robin(x) & CodingQuest(y) & SoftwareEngineeringIndustry(z)) -> (Practices(x,y) & WantsToWorkIn(x,z)))", "(PracticesCodingQuestions(Robin) & WantsToWorkInSoftwareEngineering(Robin))", "all x y z.((Robin(x) & CodingQuest(y) & SoftwareEngineering(z)) -> (Practices(x,y) & WantsToWork(x,z)))", "all x y.((Robin(x) & SoftwareEngineering(y)) -> (PracticesCodingQuestions(x,y) & WantsToWorkIn(x,y)))", "all x y.((Robin(x) & SoftwareEngineeringIndustry(y)) -> (PracticesCodingQuestions(x,y) & WantsToWorkIn(x,y)))", "all x.(Robin(x) -> (PracticesCodingQuestions(x) & WantsWorkInSoftwareEngineering(x)))", "all x.(Robin(x) -> (PracticesCcodingQuestions(x) & WantsToWorkInSoftwareEngineering(x)))"]}
{"id": "folio_train_1641", "nl": "Robin neither practices coding questions nor works to work in the software engineering industry.", "fol": "(-PracticeCodingQuestions(Robin) & -WantsToWorkInSoftwareEngineering(Robin))", "prediction": ["all x.(Robin(x) -> (-PracticesCodingQuestions(x) & -WorksInSoftwareEngineering(x)))", "all x.(Robin(x) -> (-PracticesCodingQuestions(x) & -WorksInSoftwareEngineeringIndustry(x)))", "(-PracticesCodingQuestions(Robin) & -WorksInSoftwareEngineering(Robin))", "all x.(Robin(x) -> (-PracticesCodingQuestions(x) & -WorksToSoftwareEngineeringIndustry(x)))", "all x.(Robin(x) -> (-PracticesCodingQuestions(x) & -WorksToSoftwareEngineering(x)))", "all x.((Robin(x) & -PracticesCodingQuestions(x) & -WorksInSoftwareEngineering(x)) -> -PracticesCodingQuestions(x))", "all x.(Robin(x) -> (-PracticesCodingQuestions(x) | WorksToSoftwareEngineeringIndustry(x)))", "all x.(Robin(x) -> (-PracticesCodecingQuestions(x) & -WorksInSoftwareEngineering(x)))", "(-PracticesCodingQuestions(Robin) & -WorksInSoftwareEngineeringIndustry(Robin))", "all x.(Robin(x) -> (-PracticesCodecingQuestions(x) & -WorksInSoftwareEngineeringIndustry(x)))", "all x.(Robin(x) -> (-PracticesCodingQuestions(x) | WorksInSoftwareEngineering(x)))", "all x y.((Robin(x) & SoftwareEngineeringIndustry(y)) -> (-PracticesCodingQuestions(x,y) & -WorksToWorkIn(x,y)))", "all x y.((Robin(x) & SoftwareEngineeringIndustry(y)) -> (-PracticesCodingQuestions(x) & -WorksToWorkIn(x,y)))", "all x.(Robin(x) -> (-PracticesCodingQuestions(x) | WorksInSoftwareEngineeringIndustry(x)))", "all x.(Robin(x) -> (-PracticesCodingQuestions(x) | WorksToSoftwareEngineering(x)))", "all x.((Robin(x) & -PracticesCodingQuestions(x) & -WorksInSoftwareEngineering(x)) -> -PracticesCodecingQuestions(x))"]}
{"id": "folio_train_1642", "nl": "If people go to the spa at least once a week, then they are not people who are miserly and need to save a large portion of their income.", "fol": "all x.(GoesToSpaWeekly(x) -> -IsMiserly(x))", "prediction": ["all x.((Person(x) & GoesToSpa(x) & AtLeastOneWeek(x)) -> -Miserly(x) & NeedsSavingLargeParticipationOfIncome(x))", "all x.((Person(x) & GoesToSpa(x) & AtLeastOnceAWeek(x)) -> -Miserly(x) & NeedsSavingLargeParticipationOfIncome(x))", "all x.((Person(x) & GoesToSpa(x) & AtLeastOneWeek(x)) -> -(Miserly(x) & NeedsSavingLargeParticipation(x)))", "all x.((Person(x) & GoesToSpa(x) & AtLeastOneWeek(x)) -> -Miserly(x) & NeedsToSaveLargePartOfIncome(x))", "all x.((Person(x) & GoesToSpa(x) & AtLeastOnceAWeek(x)) -> -(Person(x) & Miserly(x) & NeedsSavingLargeParticipationOfIncome(x)))", "all x.((Person(x) & GoesToSpa(x)) -> -(Miserly(x) & NeedsSavingLargeParticipation(x)))", "all x.((Person(x) & GoesToSpa(x) & AtLeastOneWeek(x)) -> -Miserly(x) & NeedsToSaveLargeParticipationOfIncome(x))", "all x.((Person(x) & GoesToSpa(x) & AtLeastOneWeek(x)) -> -Miserly(x) & NeedsSavingLargePurchaseOfIncome(x))", "all x.((Person(x) & GoesToSpa(x) & AtLeastOneWeek(x)) -> -Miserly(x) & NeedsSavingLargeParticipation(x))", "all x.((Person(x) & GoesToSpa(x) & AtLeastOnceAWeek(x)) -> -(Person(x) & Miserly(x) & NeedsSavingLargeParticipation(x)))", "all x.((Person(x) & GoesToSpa(x) & AtLeastOnceWeekly(x)) -> -Miserly(x) & NeedsSavingLargeParticipationOfIncome(x))", "all x.((Person(x) & GoesToSpa(x) & AtLeastOnceAWeek(x)) -> -(Miserly(x) & NeedsSavingLargeParticipation(x)))", "all x.((Person(x) & GoesToSpa(x) & AtLeastOneWeek(x)) -> -(Miserly(x) & NeedsToSaveLargeParticipation(x)))", "all x.((Person(x) & GoesToSpa(x) & AtLeastOnceAWeek(x)) -> -(Miserly(x) & NeedsSavingLargeParticipationOfIncome(x)))", "all x.((Person(x) & GoesToSpa(x) & AtLeastOnceAWeek(x)) -> -(Person(x) & Miserly(x) & NeedsSavingLargePurchaseOfIncome(x)))", "all x.((Person(x) & GoesToSpa(x) & AtLeastOnceAWeek(x)) -> -(Person(x) & Miserly(x) & NeedsToSaveLargeParticipationOfIncome(x)))"]}
{"id": "folio_train_1643", "nl": "People are either miserly and need to save a large portion of their income, or people that frivolously spend a lot of money every time they go out.", "fol": "all x.(IsMiserly(x) | SpendsFrivolously(x))", "prediction": ["all x.(Person(x) -> ((Miserly(x) & NeedsToSaveLargePartOfIncome(x)) | (Frivolous(x) & SpendsLotOfMoney(x))))", "all x.(Person(x) -> ((Miserly(x) & NeedsSavingLargeParticipation(x)) | (Frivolous(x) & SpendsLotsOfMoney(x))))", "all x.(Person(x) -> ((Miserly(x) & NeedsSavingLargePartOfIncome(x)) | (Frivolous(x) & SpendsLotOfMoney(x))))", "all x.(Person(x) -> ((Miserly(x) & NeedsToSaveLargePartOfIncome(x)) | (Frivolous(x) & SpendsLotOfMoneyEveryTime(x))))", "all x.(Person(x) -> ((Miserly(x) & NeedsSavingLargePartOfIncome(x)) | (Frivolous(x) & SpendsLotOfMoneyEveryTime(x))))", "all x.(Person(x) -> ((Miserly(x) & NeedsSavingLargeParticipation(x)) | (Frivolous(x) & SpendsLotsOfMoneyEveryTime(x))))", "all x.(Person(x) -> ((Miserly(x) & NeedsSavingLargeParticipation(x)) | Frivolous(x) & SpendsLotsOfMoney(x))))", "all x.(Person(x) -> ((Miserly(x) & NeedsSavingLargeParticipation(x)) | (Frivolous(x) & SpendsLotOfMoney(x))))", "all x.(Person(x) -> ((Miserly(x) & NeedsToSaveLargeParticipation(x)) | (Frivolous(x) & SpendsLotOfMoney(x))))", "all x.(Person(x) -> ((Miserly(x) & NeedsToSaveLargePurchase(x)) | (Frivolous(x) & SpendsLotOfMoney(x))))", "all x.(Person(x) -> ((Miserly(x) & NeedsToSaveLargePurpose(x)) | (Frivolous(x) & SpendsLotOfMoney(x))))", "all x.(Person(x) -> ((Miserly(x) & NeedsSavingLargePurchase(x)) | (Frivolous(x) & SpendsLotOfMoney(x))))", "all x y.((Person(x) & Miserly(x) & NeedsSavingLargePartOfIncome(x)) | (Frivolous(y) & SpendsLotOfMoney(y))))", "all x.(Person(x) -> ((Miserly(x) & NeedsToSaveLargeParticipation(x)) | (Frivolous(x) & SpendsLotsOfMoney(x))))", "all x.(Person(x) -> ((Miserly(x) & NeedsToSaveLargePartOfIncome(x)) | Frivolous(x) & SpendsLotOfMoney(x))))", "all x.(Person(x) -> ((Miserly(x) & NeedsSavingLargeParticipation(x)) | (Frivolous(x) & SpendsLotsOfMoney(x)))))"]}
{"id": "folio_train_1644", "nl": "If people frivolously spend a lot of money every time they go out, then they value quality manufacturing and luxury items.", "fol": "all x.(SpendsFrivolously(x) -> ValuesLuxury(x))", "prediction": ["all x.((FruivolousSpending(x) & EveryTimeOut(x)) -> (ValuesQualityManufacturing(x) & ValuesLuxuryItems(x)))", "all x.((FrivolousSpending(x) & EveryTimeOut(x)) -> (ValuesQualityManufacturing(x) & ValuesLuxuryItems(x)))", "all x.((FruivolousSpending(x) & GoesOut(x)) -> (ValuesQualityManufacturing(x) & ValuesLuxuryItems(x)))", "all x.((FrivolousSpending(x) & GoesOut(x)) -> (ValuesQualityManufacturing(x) & ValuesLuxuryItems(x)))", "all x.((FruivolousSpending(x) & GoOut(x)) -> (ValuesQualityManufacturing(x) & ValuesLuxuryItems(x)))", "all x.((FruivolousSpending(x) & EveryTimeOut(x)) -> (ValuesQualityManufacturing(x) & ValuesLuxuryItems(x)))", "all x.((People(x) & FrivolouslySpreadsLootOfMoney(x)) -> (ValuesQualityManufacturing(x) & ValuesLuxuryItems(x)))", "all x.((People(x) & SpendsLootOfMoney(x)) -> (ValuesQualityManufacturing(x) & ValuesLuxuryItems(x)))", "all x.((FrivolousSpending(x) & GoOut(x)) -> (ValuesQualityManufacturing(x) & ValuesLuxuryItems(x)))", "all x.((FrivolousSpending(x) & EveryTimeOut(x)) -> (ValuesQualityManufacturing(x) & ValuesLuxuryItems(x)))", "all x.((FruivolousSpending(x) & GoesOut(x)) -> (ValuesQualityManufacturing(x) & ValuesLuxuryItems(x)))", "all x.((FruivolousSpending(x) & EveryTimeOut(x)) -> ValuesQualityManufacturingAndLuxuryItems(x))", "all x.((FrivolousSpending(x) & GoesOut(x)) -> (ValuesQualityManufacturing(x) & ValuesLuxuryItems(x)))", "all x.((People(x) & FrivolouslySpreadsLootOfMoney(x)) -> (ValuesQualityManufacturing(x) & ValuesLuxuryItems(x)))", "all x.((FrivolousSpending(x) & EveryTimeOut(x)) -> ValuesQualityManufacturingAndLuxuryItems(x))", "all x.((FruivolousSpending(x) & GoesOut(x)) -> ValuesQualityManufacturingAndLuxuryItems(x))"]}
{"id": "folio_train_1645", "nl": "If people value quality manufacturing and luxury items, then they enjoy shopping for materialistic items in their free time.", "fol": "all x.(ValuesLuxury(x) -> EnjoysShopping(x))", "prediction": ["all x.(ValuesQualityManufacturingAndLuxuryItems(x) -> EnjoysShoppingForMaterialisticItems(x))", "all x.((Person(x) & ValuesQualityManufacturing(x) & ValuesLuxuryItems(x)) -> EnjoysShoppingForMaterialisticItems(x))", "all x.(ValuesQualityManufacturingAndLuxuryItems(x) -> EnjoysShoppingForMaterialisticItemsInFreeTime(x))", "all x.((Person(x) & ValuesQualityManufacturing(x) & ValuesLuxuryItems(x)) -> EnjoysShoppingForMaterialisticItemsInFreeTime(x))", "all x.((People(x) & ValuesQualityManufacturing(x) & ValuesLuxuryItems(x)) -> EnjoysShoppingForMaterialisticItems(x))", "all x.(ValuesQualityManufacturingAndLuxuryItems(x) -> EnjoysShoppingInFreeTime(x))", "all x.((People(x) & ValuesQualityManufacturing(x) & ValuesLuxuryItems(x)) -> EnjoysShoppingForMaterialisticItemsInFreeTime(x))", "all x y.((Person(x) & ValuesQualityManufacturing(x) & ValuesLuxuryItems(x)) -> EnjoysShoppingForMaterialisticItems(y))", "all x y.((Person(x) & ValuesQualityManufacturing(x) & ValuesLuxuryItems(x)) -> EnjoysShoppingForMaterialisticItems(x))", "all x y.((Person(x) & ValuesQualityManufacturing(x) & ValuesLuxuryItems(x)) -> EnjoysShoppingForMaterialisticItemsInFreeTime(x))", "all x.(ValueQualityManufacturingAndLuxuryItems(x) -> EnjoyShoppingForMaterialisticItems(x))", "all x.(ValuesQualityManufacturing(x) & ValuesLuxuryItems(x)) -> EnjoysShoppingForMaterialisticItems(x))", "all x.((Person(x) & ValuesQualityManufacturing(x) & ValuesLuxuryItems(x)) -> EnjoysShoppingInFreeTime(x))", "all x.(ValuesQualityManufacturingAndLuxuryItems(x) -> EnjoysShoppingMaterialisticItems(x))", "all x.((Person(x) & ValuesQualityManufacturing(x) & ValuesLuxuryItems(x)) -> EnjoysShoppingMaterialisticItemsInFreeTime(x))", "all x.(ValuesQualityManufacturingAndLuxuryItems(x) -> EnjoysShoppingMaterialisticItemsInFreeTime(x))"]}
{"id": "folio_train_1646", "nl": "If Jess is not miserly and needs to save a large portion of their income, then Jess does not value quality manufacturing and luxury items.", "fol": "(-IsMiserly(Jess) -> -ValuesLuxury(Jess))", "prediction": ["all x.((Jess(x) & -Miserly(x) & NeedsToSaveLargePartOfIncome(x)) -> -ValuesQualityManufacturing(x) & -ValuesLuxuryItems(x))", "all x.((Jess(x) & -Miserly(x) & NeedsToSaveLargePartOfIncome(x)) -> -ValuesQualityManufacturingAndLuxuryItems(x))", "all x.((Jess(x) & -Miserly(x) & NeedsToSaveLargePartOfIncome(x)) -> (-ValuesQualityManufacturing(x) & -ValuesLuxuryItems(x)))", "all x.((Jess(x) & -Miserly(x) & NeedsToSaveLargePurchase(x)) -> -ValuesQualityManufacturing(x) & -ValuesLuxuryItems(x))", "all x.((Jess(x) & -Miserly(x) & NeedsToSaveLargeParticipation(x)) -> -ValuesQualityManufacturing(x) & -ValuesLuxuryItems(x))", "all x.((Jess(x) & -Miserly(x) & NeedsToSaveLargePurposeOfIncome(x)) -> -ValuesQualityManufacturing(x) & -ValuesLuxuryItems(x))", "all x.((Jess(x) & -Miserly(x) & NeedsToSaveLargePurchaseOfIncome(x)) -> -ValuesQualityManufacturing(x) & -ValuesLuxuryItems(x))", "all x.((Jess(x) & -Miserly(x) & NeedsSavingLargePartOfIncome(x)) -> -ValuesQualityManufacturing(x) & -ValuesLuxuryItems(x))", "all x.((Jess(x) & -Miserly(x) & NeedsSavingLargeParticipation(x)) -> -ValuesQualityManufacturing(x) & -ValuesLuxuryItems(x))", "all x.((Jess(x) & -Miserly(x) & NeedsToSaveLargePurposeOfIncome(x)) -> -ValuesQualityManufacturingAndLuxuryItems(x))", "all x.((Jess(x) & -Miserly(x) & NeedsToSaveLargePurchaseOfIncome(x)) -> -ValuesQualityManufacturingAndLuxuryItems(x))", "all x.((Jess(x) & -Miserly(x) & NeedsSavingLargePartOfIncome(x)) -> -ValuesQualityManufacturingAndLuxuryItems(x))", "all x.((Jess(x) & -Miserly(x) & NeedsToSaveLargeParticipationOfIncome(x)) -> -ValuesQualityManufacturingAndLuxuryItems(x))", "all x.((Jess(x) & -Miserly(x) & NeedsToSaveLargePurchase(x)) -> -ValuesQualityManufacturingAndLuxuryItems(x))", "all x.((Jess(x) & -Miserly(x) & NeedsToSaveLargeParticipation(x)) -> -ValuesQualityManufacturingAndLuxuryItems(x))", "all x.((Jess(x) & -Miserly(x) & NeedsSavingLargeParticipation(x)) -> -ValuesQualityManufacturingAndLuxuryItems(x))"]}
{"id": "folio_train_1647", "nl": "If Jess either values quality manufacturing and luxury items or, if he does not, then he is miserly and needs to save a large portion of his income, then Jess frivolously spends a lot of money every time he goes out.", "fol": "(((ValuesLuxury(Jess) & -IsMiserly(Jess)) | (-ValuesLuxury(Jess) & IsMiserly(Jess))) -> ValuesLuxury(Jess))", "prediction": ["all x.((Jess(x) & ValuesQualityManufacturing(x) & ValuesLuxuryItems(x)) | (-ValuesQualityManufacturing(x) & ValuesLuxuryItems(x))))", "all x.((Jess(x) & ValuesQualityManufacturingAndLuxuryItems(x)) | (-ValuesQualityManufacturingAndLuxuryItems(x)))) -> (Miserly(x) & NeedsToSaveLargePartOfIncome(x)))", "all x.((Jess(x) & ValuesQualityManufacturing(x) & ValuesLuxuryItems(x)) | (-ValuesQualityManufacturing(x) & ValuesLuxuryItems(x)))) -> (Miserly(x) & NeedsToSaveLargePartOfIncome(x)))", "all x.((Jess(x) & ValuesQualityManufacturingAndLuxuryItems(x)) | (-ValuesQualityManufacturingAndLuxuryItems(x))))", "all x.((Jess(x) & ValuesQualityManufacturingAndLuxuryItems(x)) | (-ValuesQualityManufacturingAndLuxuryItems(x) & Miserly(x) & NeedsToSaveLargePartOfIncome(x))))", "all x.((Jess(x) & (ValuesQualityManufacturing(x) | ValuesLuxuryItems(x))) | (-ValuesQualityManufacturing(x) & ValuesLuxuryItems(x))))", "all x.((Jess(x) & (ValuesQualityManufacturing(x) | ValuesLuxuryItems(x))) | (-ValuesQualityManufacturing(x) & ValuesLuxuryItems(x)))) -> (Miserly(x) & NeedsToSaveLargePartOfIncome(x)))", "all x.((Jess(x) & ValuesQualityManufacturingAndLuxuryItems(x)) | (-ValuesQualityManufacturingAndLuxuryItems(x)))) -> (Miserly(x) & NeedsToSaveLargePurchaseOfIncome(x)))", "all x.((Jess(x) & ValuesQualityManufacturingAndLuxuryItems(x)) | (-ValuesQualityManufacturingAndLuxuryItems(x)))) -> (Miserly(x) & NeedsToSaveLargePurposeOfIncome(x)))", "all x.((Jess(x) & ValuesQualityManufacturingAndLuxuryItems(x)) | (-ValuesQualityManufacturingAndLuxuryItems(x)))) -> (Miserly(x) & NeedsSavingLargePartOfIncome(x)))", "all x.((Jess(x) & ValuesQualityManufacturing(x) & ValuesLuxuryItems(x)) | (-ValuesQualityManufacturing(x) & ValuesLuxuryItems(x)))) -> (Miserly(x) & NeedsSavingLargePartOfIncome(x)))", "all x.((Jess(x) & ValuesQualityManufacturingAndLuxuryItems(x)) | (-ValuesQualityManufacturingAndLuxuryItems(x)))) -> (Miserly(x) & NeedsToSaveLargeParticipationOfIncome(x)))", "all x.((Jess(x) & ValuesQualityManufacturing(x) & ValuesLuxuryItems(x)) | (-ValuesQualityManufacturing(x) & ValuesLuxuryItems(x)))) -> (Miserly(x) & NeedsToSaveLargePurchaseOfIncome(x)))", "all x.((Jess(x) & ValuesQualityManufacturing(x) & ValuesLuxuryItems(x)) | (-ValuesQualityManufacturing(x) & SavesLargePartOfIncome(x))))", "all x.((Jess(x) & ValuesQualityManufacturing(x) & ValuesLuxuryItems(x)) | (-ValuesQualityManufacturing(x) & ValuesLuxuryItems(x)))) -> (Miserly(x) & NeedsToSaveLargePurposeOfIncome(x)))", "all x.((Jess(x) & ValuesQualityManufacturing(x) & ValuesLuxuryItems(x)) | (-ValuesQualityManufacturing(x) & ValuesLuxuryItems(x)))) -> (Miserly(x) & NeedsToSaveLargeParticipationOfIncome(x)))"]}
{"id": "folio_train_1648", "nl": "Jess frivolously spends a lot of money every time they go out.", "fol": "SpendsFrivolously(Jess)", "prediction": ["all x.((Jess(x) & GoOut(x)) -> SpendsLotOfMoney(x))", "all x y.((Jess(x) & GoOut(y)) -> SpendsLotOfMoney(x,y))", "all x.((Jess(x) & GoesOut(x)) -> SpendsLotOfMoney(x))", "all x y.((Jess(x) & GoOut(y)) -> SpendsMoney(x,y))", "all x y.((Jess(x) & GoOut(y)) -> SpendsLootOfMoney(x,y))", "all x y.((Jess(x) & Out(y)) -> SpendsLotOfMoney(x,y))", "all x y.((Jess(x) & GoOut(y)) -> SpendsLittleMoney(x,y))", "all x y.((Jess(x) & GoOut(y)) -> SpendsMore(x,y))", "all x.((Jess(x) & GoOut(x)) -> SpendsLittleMoney(x))", "all x.((Jess(x) & GoesOut(x)) -> SpendsLittleMoney(x))", "all x y.((Jess(x) & Out(y)) -> SpendsMoney(x,y))", "all x.(Jess(x) -> SpendsLotOfMoney(x))", "all x y.((Jess(x) & Out(y)) -> SpendsMore(x,y))", "all x.((Jess(x) & GoesOut(x)) -> SpendsMore(x))", "all x y.((Jess(x) & GoOut(y)) -> SpendsMoneyFruitly(x,y))", "all x.((Jess(x) & GoOut(x)) -> SpendsMore(x))"]}
{"id": "folio_train_1649", "nl": "Jess either enjoys shopping for materialistic items in his free time or, if he does not, then he goes to the spa at least once a week.", "fol": "(EnjoysShopping(Jess) | (-EnjoysShopping(Jess) -> GoesToSpaWeekly(Jess)))", "prediction": ["all x.((Jess(x) & (EnjoysShoppingInFreeTime(x) | -EnjoysShoppingInFreeTime(x))) -> GoesToSpa(x))", "all x.((Jess(x) & (EnjoysShoppingMaterialisticItems(x) | -EnjoysShoppingMaterialisticItems(x))) -> GoesToSpa(x))", "all x.((Jess(x) & (EnjoysShoppingInFreeTime(x) | (-EnjoysShoppingInFreeTime(x)))) -> GoesToSpa(x)))", "all x.((Jess(x) & (EnjoysShoppingForMaterialisticItems(x) | -EnjoysShopping(x))) -> GoesToSpa(x))", "all x.((Jess(x) & (EnjoysShoppingMaterialisticItemsInFreeTime(x) | (-EnjoysShoppingMaterialisticItemsInFreeTime(x)))) -> GoesToSpa(x)))", "all x.((Jess(x) & (EnjoysShoppingForMaterialisticItems(x) | -EnjoysShoppingInFreeTime(x))) -> GoesToSpa(x))", "all x.((Jess(x) & (EnjoysShoppingMaterialisticItems(x) | (-EnjoysShoppingMaterialisticItems(x)))) -> GoesToSpa(x)))", "all x.((Jess(x) & (EnjoysShoppingInFreeTime(x) | -EnjoysShoppingInSpa(x))) -> GoesToSpa(x))", "all x.((Jess(x) & (EnjoysShoppingForMaterialisticItems(x) | (-EnjoysShoppingForMaterialisticItems(x)))) -> GoesToSpa(x)))", "all x.((Jess(x) & (EnjoysShoppingMaterialisticItemsInFreeTime(x) | -EnjoysShoppingMaterialisticItems(x))) -> GoesToSpa(x))", "all x.((Jess(x) & (EnjoysShoppingForMaterialisticItems(x) | (-EnjoysShoppingInFreeTime(x)))) -> GoesToSpa(x)))", "all x.((Jess(x) & (EnjoysShopping(x) | -EnjoysShopping(x))) -> GoesToSpa(x))", "all x.((Jess(x) & (EnjoysShoppingMaterialisticItems(x) | (-EnjoysShoppingMaterialisticItems(x) & Spa(x)))) -> GoesTo(x))", "all x.((Jess(x) & (EnjoysShoppingInFreeTime(x) | (-EnjoysShoppingInFreeTime(x) & Spa(x)))) -> GoesTo(x)))", "all x.((Jess(x) & (EnjoysShoppingMaterialisticItems(x) | (-EnjoysShoppingMaterialisticItems(x))))) -> GoesToSpa(x))", "all x.((Jess(x) & (EnjoysShoppingForMaterialisticItems(x) | (-EnjoysShopping(x) & Spa(x)))) -> GoesTo(x)))"]}
{"id": "folio_train_1650", "nl": "If Jess either enjoys shopping for materialistic items in his free time or, if he does not, then he goes to the spa at least once a week, then Jess neither values quality manufacturing and luxury items nor goes to the spa at least once a week.", "fol": "((EnjoysShopping(Jess) | (-EnjoysShopping(Jess) -> GoesToSpaWeekly(Jess))) -> (-ValuesLuxury(Jess) & -GoesToSpaWeekly(Jess)))", "prediction": ["all x.((Jess(x) & (EnjoysShoppingMaterialisticItems(x) | -EnjoysShoppingMaterialisticItems(x))) -> (-ValuesQualityManufacturing(x) & -ValuesLuxuryItems(x) & -ValuesSpa(x)))", "all x.((Jess(x) & (EnjoysShoppingMaterialisticItemsInFreeTime(x) | -EnjoysShoppingMaterialisticItemsInFreeTime(x))) -> (-ValuesQualityManufacturing(x) & -ValuesLuxuryItems(x) & -ValuesSpa(x)))", "all x.((Jess(x) & (EnjoysShoppingMaterialisticItems(x) | -EnjoysShoppingMaterialisticItems(x))) -> (-ValuesQualityManufacturing(x) & -ValuesLuxuryItems(x)))", "all x.((Jess(x) & (EnjoysShoppingForMaterialisticItems(x) | -EnjoysShoppingInFreeTime(x))) -> (-ValuesQualityManufacturing(x) & -ValuesLuxuryItems(x) & -ValuesSpa(x)))", "all x.((Jess(x) & (EnjoysShoppingMaterialisticItemsInFreeTime(x) | -EnjoysShoppingMaterialisticItems(x))) -> (-ValuesQualityManufacturing(x) & -ValuesLuxuryItems(x) & -ValuesSpa(x)))", "all x.((Jess(x) & (EnjoysShoppingMaterialisticItems(x) | -EnjoysShoppingMaterialisticItems(x))) -> (-ValuesQualityMaking(x) & -ValuesLuxuryItems(x) & -ValuesSpa(x)))", "all x.((Jess(x) & (EnjoysShoppingMaterialisticItemsInFreeTime(x) | -EnjoysShoppingMaterialisticItemsInFreeTime(x))) -> (-ValuesQualityManufacturing(x) & -ValuesLuxuryItems(x)))", "all x.((Jess(x) & (EnjoysShoppingForMaterialisticItems(x) | -EnjoysShoppingInFreeTime(x))) -> (-ValuesQualityManufacturing(x) & -ValuesLuxuryItems(x)))", "all x.((Jess(x) & (EnjoysShoppingMaterialisticItemsInFreeTime(x) | -EnjoysShoppingMaterialisticItemsInFreeTime(x))) -> (-ValuesQualityMaking(x) & -ValuesLuxuryItems(x) & -ValuesSpa(x)))", "all x.((Jess(x) & (EnjoysShoppingMaterialisticItems(x) | -EnjoysShoppingMaterialisticItems(x))) -> (-ValuesQualityMaking(x) & -ValuesLuxuryItems(x)))", "all x.((Jess(x) & (EnjoysShoppingMaterialisticItemsInFreeTime(x) | -EnjoysShoppingMaterialisticItems(x))) -> (-ValuesQualityManufacturing(x) & -ValuesLuxuryItems(x)))", "all x.((Jess(x) & (EnjoysShoppingMaterialisticItemsInFreeTime(x) | -EnjoysShoppingMaterialisticItems(x))) -> (-ValuesQualityMaking(x) & -ValuesLuxuryItems(x) & -ValuesSpa(x)))", "all x.((Jess(x) & (EnjoysShoppingForMaterialisticItems(x) | -EnjoysShoppingForMaterialisticItems(x))) -> (-ValuesQualityManufacturing(x) & -ValuesLuxuryItems(x) & -ValuesSpa(x)))", "all x.((Jess(x) & (EnjoysShoppingForMaterialisticItemsInFreeTime(x) | -EnjoysShoppingInFreeTime(x))) -> (-ValuesQualityManufacturing(x) & -ValuesLuxuryItems(x) & -ValuesSpa(x)))", "all x.((Jess(x) & (EnjoysShoppingForMaterialisticItemsInFreeTime(x) | -EnjoysShoppingForMaterialisticItems(x))) -> (-ValuesQualityManufacturing(x) & -ValuesLuxuryItems(x) & -ValuesSpa(x)))", "all x.((Jess(x) & (EnjoysShoppingForMaterialisticItemsInFreeTime(x) | -EnjoysShoppingForMaterialisticItemsInFreeTime(x))) -> (-ValuesQualityManufacturing(x) & -ValuesLuxuryItems(x) & -ValuesSpa(x)))"]}
{"id": "folio_train_1651", "nl": "The indie pop band Phoenix has released 6 albums. ", "fol": "ReleasedAlbums(Phoenix,L6)", "prediction": ["all x y.((IndiePopBand(x) & Phoenix(y)) -> ReleasedSixAlbums(x,y))", "(IndiePopBand(Phoenix) & ReleasedSixAlbums(Phoenix))", "all x.((IndiePopBand(x) & Phoenix(x)) -> ReleasedSixAlbums(x))", "all x.(IndiePopBand(x) -> ReleasedSixAlbums(x))", "all x y.((IndiePopBand(x) & Phoenix(y)) -> HasReleasedSixAlbums(x,y))", "all x.(IndiePopBand(x) -> PhoenixReleasedSixAlbums(x))", "all x.((IndiePopBand(x) & Phoenix(x)) -> HasReleasedSixAlbums(x))", "(IndiePopBand(Pheonix) & ReleasedSixAlbums(Pheonix))", "all x.(IndiePopBand(x) -> Phoenix(x))", "all x.(IndiePopBand(x) -> PhoenixHasReleasedSixAlbums(x))", "(IndiePopBand(Phoenix) & HasReleasedSixAlbums(Phoenix))", "all x.(IndiePopBand(x) -> (Phoenix(x) & ReleasedSixAlbums(x)))", "all x y.((IndiePopBand(x) & Phoenix(y)) -> ReleasedSixAlbums(x))", "all x y.((IndiePopBand(x) & Phoenix(y)) -> ReleasedSixAlbums(y,x))", "(IndiePopBandPhoenix(Phoenix) & ReleasedSixAlbums(Phoenix))", "all x.((IndiePopBand(x) & Phoenix(y)) -> ReleasedSixAlbums(x,y))"]}
{"id": "folio_train_1652", "nl": "Phoenix's album \"Wolfgang Amadeus Phoenix\" sold over 500,000 copies. ", "fol": "(IsAlbum(Wolfgangamadeusphoenix) & IsAlbumByBand(Wolfgangamadeusphoenix,Phoenix) & SoldCopiesOver(Wolfgangamadeusphoenix,L500000))", "prediction": ["All x.((Phoenix(x) & Album(x,WolfgangAmadeusPhoenix)) -> SoldOver500,000Copies(x))", "(WolfgangAmadeusPhoenix(Phoenix) Album(Phoenix) & SoldOver500,000Copies(Phoenix))", "\"WolfgangAmadeusPhoenix\" album sold over 500,000 copies.", "\"WolfgangAmadeusPheonix\" album sold over 500,000 copies.", "\"WolfgangAmadeusPheonix\" soldOver500,000Copies(Pheonix)", "\"WolfgangAmadeusPheonix\" album soldOver500,000Copies(Pheonix)", "(SoldOver500,000Copies(Phoenix,Phoenix) & Album(Phoenix,WolfgangAmadeus))", "\"WolfgangAmadeusPhoenix\" album soldOver500,000Copies(Phoenix)", "\"WolfgangAmadeusPhoenix\" soldOver500,000Copies(Phoenix)", "(WolfgangAmadeusPhoenix(Phoenix) & AlbumSoldOver500,000Copies(Phoenix,Phoenix))", "(WolfgangAmadeusPhoenix(Phoenix) & AlbumSoldOver500,000Copies(Phoenix))", "(SoldOver500,000Copies(Phoenix,Phoenix) & Album(Phoenix,Wolfgang))", "\"WolfgangAmadeusPhoenix\" album soldOver500,000Copies(Phoenix,Phoenix))", "\"WolfgangAmadeusPhoenix\" sold over 500,000 copies.", "\"WolfgangAmadeusPhoenix\" (album) & SoldOver500,000Copies(x))", "All x.((Phoenix(x) & Album(x,WolfgangAmadeusPhoenix)) -> SoldOver(x,500,000))"]}
{"id": "folio_train_1653", "nl": "A certified gold album or single is one which sold over half a million copies. ", "fol": "all x.(((IsAlbum(x) | IsSingle(x)) & SoldCopiesOver(x,L500000)) -> IsCertifiedGold(x))", "prediction": ["all x.((GoldAlbum(x) | CertifiedGoldSingle(x)) -> SoldOverHalfMillionCopies(x))", "all x.((GoldAlbum(x) | GoldSingle(x)) -> SoldOverHalfMillionCopies(x))", "all x.((GoldAlbum(x) | Single(x)) -> SoldOverHalfMillionCopies(x))", "all x.((GoldAlbum(x) | CertifiedSingle(x)) -> SoldOverHalfMillionCopies(x))", "all x.((CertifiedGoldAlbum(x) | CertifiedGoldSingle(x)) -> SoldOverHalfMillionCopies(x))", "all x.((GoldAlbum(x) | CertifiedGoldSingle(x)) -> SoldOverHalfMillionCopies(x))", "all x.((GoldAlbumOrSingle(x) & SoldOverHalfMillionCopies(x)) -> Certified(x))", "all x.((GoldAlbum(x) | PlatinumSingle(x)) -> SoldOverHalfMillionCopies(x))", "all x.((GoldAlbumOrSingle(x) & SoldOverHalfMillionCopies(x)) -> CertifiedGold(x))", "all x.((Album(x) | Single(x)) -> SoldOverHalfMillionCopies(x))", "all x.((GoldAlbumOrSingle(x) & SoldOverHalfMillionCopies(x)) -> CertifiedGoldAlbumOrSingle(x))", "all x.((GoldAlbum(x) | SilverSingle(x)) -> SoldOverHalfMillionCopies(x))", "all x.((GoldAlbum(x) | CertifiedGoldSingle(x)) -> SoldAboveHalfMillionCopies(x))", "all x.((GoldAlbum(x) | GoldSingle(x)) -> SoldOverHalfMillionCopies(x))", "all x.(CertifiedGoldAlbumOrSingle(x) -> SoldOverHalfMillionCopies(x))", "all x.((GoldAlbum(x) | CertifiedGoldSingle(x)) -> SoldOverHundredMillionCopies(x))"]}
{"id": "folio_train_1654", "nl": "\"1901\" is a single from Phoenix's album \"Wolfgang Amadeus Phoenix.\"", "fol": "(IsSingle(L1901) & IsFromAlbum(L1901,Wolfgangamadeusphoenix) & IsByBand(L1901,Phoenix))", "prediction": ["\"1901\" is a single from Phoenix's album \"WolfgangAmadeusPhoenix\"\"", "\"1901\" is a single from Phoenix's album \"WolfgangAmadeusPheonix\"\"", "\"1901\" is a single from Phoenix's album \"WolfgangAmadeusPhenomenon\"\"", "\"1901\" is a single from \"WolfgangAmadeusPhoenix\"\"", "\"1901\" is a single from Phoenix's album \"WolfgangAmadeus(Phoenix)\"", "\"1901\" is a single from the album \"WolfgangAmadeusPhoenix\"\"", "\"1901\" is a single from the Phoenix album \"WolfgangAmadeusPhoenix\"\"", "\"1901\" is a single from \"WolfgangAmadeusPheonix\"\"", "\"1901\" is a single from Phoenix's \"WolfgangAmadeusPhoenix\"\"", "\"1901\" is a Single From Phoenix's Album \"WolfgangAmadeusPhoenix\"\"", "\"1901\" is a single from Phoenix's album, \"WolfgangAmadeusPhoenix\"\"", "\"1901\" is a single from the album \"WolfgangAmadeusPheonix\"\"", "\"1901\" is a single from Phoenix's album \"WolfgangAmadeusPhoenix\"", "\"1901\" is a single from the album \"WolfgangAmadeusPhenomenon\"", "\"1901\" is a single from Phoenix's album \"WolfgangAmadeus(p)\"", "\"1901\" is a single from Phoenix's album \"WolfgangAmadeusPhenomenon\""]}
{"id": "folio_train_1655", "nl": "Over 400,000 copies of \"1901\" have been sold. ", "fol": "SoldCopiesOver(L1901,L400000)", "prediction": ["all x y.((Copies(x,y) & \"1901\") -> Sold(x,y))", "all x y.((Copies(x,y) & \"1901(y)) -> Sold(x,y))", "all x.((1901(x) & Sold(x)) -> Over400,000Copies(x))", "all x.((Copies(x,1901)) -> Sold(x))", "all x.((Copies(x,1901) & Sold(x)) -> Over400,000(x))", "all x y.((Copies(x,y) & 1901(y)) -> Sold(x,y))", "all x.((Copies(x,1901)) -> Sold(x,400000))", "all x.((Copies(x,1901)) -> Sold(x,400,000))", "all x y.((Copies(x,y) & \"1901\" & Sold(x,y)) -> Over400,000(x))", "all x.((1901(x) & Sold(x)) -> Over400000Copies(x))", "all x.((Copies(x,1901)) -> Sold(x,40000))", "all x y.((Copies(x,y) & \"1901\" & Sold(x,y)) -> Over(x,y))", "all x y.((Copies(x,y) & \"1901\") -> Sold(x))", "all x y.((Copies(x,y) & \"1901\" & Sold(y)) -> Over400,000(x))", "all x.((Book(x) & \"1901\") -> Sold(x))", "all x y.((Copies(x,y) & \"1901\") -> Sold(y))"]}
{"id": "folio_train_1656", "nl": "The album \"Wolfgang Amadeus Phoenix\" is a certified gold album.", "fol": "IsCertifiedGold(Wolfgangamadeusphoenix)", "prediction": ["all x.((Album(x) & WolfgangAmadeusPhoenix(x)) -> CertifiedGoldAlbum(x))", "all x.((Album(x) & WolfgangAmadeusPheonix(x)) -> CertifiedGoldAlbum(x))", "all x.((Album(x) & WolfgangAmadeusPhoenix(x)) -> CertifiedGoldAlbum(x))", "all x.((Album(x) & WolfgangAmadeusPheonix(x)) -> CertifiedGoldAlbum(x))", "All x.((Album(x) & WolfgangAmadeusPhoenix(x)) -> CertifiedGoldAlbum(x))", "All x.((Album(x) & WolfgangAmadeusPheonix(x)) -> CertifiedGoldAlbum(x))", "All x.((Album(x) & WolfgangAmadeusPhoenix(x)) -> CertifiedGoldAlbum(x))", "all x.((Album(x) & WolfgangAmadeusPheonix)) -> CertifiedGoldAlbum(x))", "all x.((Album(x) & WoolfgangAmadeusPhoenix(x)) -> CertifiedGoldAlbum(x))", "all x.((Album(x) & WolfgangAmadeusPhoenix)) -> CertifiedGoldAlbum(x))", "All x.((Album(x) & WolfgangAmadeusPheonix(x)) -> CertifiedGoldAlbum(x))", "all x.((Album(x) & WolfgangAmadeusPhenomenon(x)) -> CertifiedGoldAlbum(x))", "all x.((Album(x) & WolfgangAmadeusPheonix)) -> CertifiedGoldAlbum(x))", "all x.((Album(x) & WolfgangAmadeusPhoenix(x)) -> GoldAlbum(x))", "all x.(WolfgangAmadeusPhoenix(x) -> CertifiedGoldAlbum(x))", "all x.(WolfgangAmadeusPheonix(x) -> CertifiedGoldAlbum(x))"]}
{"id": "folio_train_1657", "nl": "The single \"1901\" is a certified gold single.", "fol": "IsCertifiedGold(L1901)", "prediction": ["all x.((Single(x) & \"1901\") -> CertifiedGoldSingle(x))", "all x.((Single(x) & 1901(x)) -> CertifiedGoldSingle(x))", "all x.((Single(x) & \"1901\" & CertifiedGoldSingle(x)) -> CertifiedGoldSingle(x))", "all x.((Single(x) & \"1901\" & CertifiedGoldSingle(x)) -> Single(x))", "all x.((Single(x) & \"1901\")) -> CertifiedGoldSingle(x))", "all x.((Single(x) & 1901(x)) -> CertifiedGoldSingle(x))", "all x.((Single(x) & \"1901\" & GoldSingle(x)) -> Certified(x))", "all x.((Single(x) & \"1901\") & CertifiedGoldSingle(x)) -> Single(x))", "all x.((Single(x) & \"1901\") & CertifiedGoldSingle(x)) -> CertifiedGoldSingle(x))", "all x.((Single(x,1901) & GoldSingle(x)) -> Certified(x))", "all x.((Single(x) & \"1901\") -> GoldSingle(x))", "all x.((Single(x) & 1901(x)) -> GoldSingle(x))", "all x.((Single(x) & \"1901\" & CertifiedGoldSingle(x)) -> -CertifiedGoldSingle(x))", "all x.((Single(x,1901) & CertifiedGoldSingle(x)) -> Single(x))", "all x.((Single(x) & -CertifiedGoldSingle(x)) -> \"1901\"\"", "all x.((Single(x) & \"1901\" & CertifiedGoldSingle(x)) -> -GoldSingle(x))"]}
{"id": "folio_train_1658", "nl": "Peter Parker is a either a superhero or a civilian.", "fol": "((IsSuperhero(Peter) & -IsCivilian(Peter)) | (-IsSuperhero(Peter) & IsCivilian(Peter)))", "prediction": ["all x.(PeterParker(x) -> (Superhero(x) | Civilian(x)))", "all x.(Potter(x) -> (Superhero(x) | Civilian(x)))", "all x.(PeterPotter(x) -> (Superhero(x) | Civilian(x)))", "all x.(Pittsburgh(x) -> (Superhero(x) | Civilian(x)))", "all x.(PeterPenny(x) -> (Superhero(x) | Civilian(x)))", "all x.(Parker(x) -> (Superhero(x) | Civilian(x)))", "all x.((PeterParker(x) & (Superhero(x) | Civilian(x))) -> (Captain(x) | Civilian(x)))", "all x.(Pitt Parker(x) -> (Superhero(x) | Civilian(x)))", "all x.((PeterParker(x) & (Superhero(x) | Civilian(x))) -> (Superhero(x) | Civilian(x)))", "all x.(PeterParker(x) -> (Superman(x) | Civilian(x)))", "all x.(Pitterson(x) -> (Superhero(x) | Civilian(x)))", "all x.(PeterParker(x) -> (Superhero(x) | Civilian(x)))", "all x.((PeterPotter(x) & (Superhero(x) | Civilian(x))) -> (Superhero(x) | Civilian(x)))", "all x.((PeterParker(x) & (Superhero(x) | Civilian(x))) -> (Captain(x) | Civilian(x))))", "all x.((PeterPotter(x) & (Superhero(x) | Civilian(x))) -> (Captain(x) | Civilian(x)))", "all x.((PeterParker(x) & (Superhero(x) | Civilian(x))) -> (Superhero(x) | Civilian(x))))"]}
{"id": "folio_train_1659", "nl": "The Hulk is a destroyer.", "fol": "IsDestroyer(Hulk)", "prediction": ["all x.(Hulk(x) -> Disposer(x))", "all x.(Hulk(x) -> Disrupter(x))", "all x.(Hulk(x) -> Disruptor(x))", "all x.(Hulk(x) -> Destroyer(x))", "All x.(Hulk(x) -> Disposer(x))", "all x.(Hulk(x) -> Dissipator(x))", "all x.(Hulk(x) -> Dismemberer(x))", "all x.(Hulk(x) -> Dissident(x))", "All x.(Hulk(x) -> Disrupter(x))", "all x.(Hulk(x) -> Dissolver(x))", "All x.(Hulk(x) -> Disruptor(x))", "all x.(Hulk(x) -> Dissaster(x))", "exists x.(Hulk(x) & Disposer(x))", "all x.(Hulk(x) -> Dismantler(x))", "all x.(Hulk(x) -> Dissrupter(x))", "all x y.((Hulk(x) & Disruptor(y)) -> Killer(x))"]}
{"id": "folio_train_1660", "nl": "The Hulk wakes up when he is angry.", "fol": "(IsAngry(Hulk) -> WakesUp(Hulk))", "prediction": ["all x.((Hulk(x) & Anxious(x)) -> WakesUp(x))", "all x.((Hulk(x) & Anger(x)) -> WakesUp(x))", "All x.((Hulk(x) & Anxious(x)) -> WakesUp(x))", "all x.((Hulk(x) & Agreed(x)) -> WakesUp(x))", "All x.((Hulk(x) & Anger(x)) -> WakesUp(x))", "all x y.((Hulk(x) & Anger(y)) -> WakesUp(x,y))", "all x.((Hulk(x) & Aggressive(x)) -> WakesUp(x))", "All x.((Hulk(x) & Agreed(x)) -> WakesUp(x))", "all x.((Hulk(x) & Irresponsible(x)) -> WakesUp(x))", "all x.((Hulk(x) & Aging(x)) -> WakesUp(x))", "all x.((Hulk(x) & Agned(x)) -> WakesUp(x))", "all x y.((Hulk(x) & Anxious(y)) -> WakesUp(x,y))", "All x y.((Hulk(x) & Anger(y)) -> WakesUp(x,y))", "All x.((Hulk(x) & Aggressive(x)) -> WakesUp(x))", "all x.((Hulk(x) & Aggravated(x)) -> WakesUp(x))", "all x.((Hulk(x) & Angerful(x)) -> WakesUp(x))"]}
{"id": "folio_train_1661", "nl": "If the Hulk wakes up, then he will break a bridge.", "fol": "(WakesUp(Hulk) -> BreaksBridge(Hulk))", "prediction": ["all x.((Hulk(x) & WakesUp(x)) -> BreaksBridge(x))", "all x.((Hulk(x) & WakesUp(x)) -> BreakBridge(x))", "all x y.((Hulk(x) & WakesUp(x)) -> BreaksBridge(x))", "all x y.((Hulk(x) & WakesUp(x) & Bridge(y)) -> Breaks(x,y))", "all x y.((Hulk(x) & WakesUp(x)) -> BreaksBridge(x,y))", "all x y.((Hulk(x) & WakesUp(x)) -> BreakBridge(x))", "all x y.((Hulk(x) & WakesUp(x)) -> BreaksBridge(y))", "all x.((Hulk(x) & WakesUp(x)) -> WillBreakBridge(x))", "all x y.((Hulk(x) & WakesUp(x)) -> BreakBridge(y))", "all x y z.((Hulk(x) & WakesUp(x) & Bridge(y) & Bridge(z)) -> Breaks(x,y,z))", "all x.((Hull(x) & WakesUp(x)) -> BreaksBridge(x))", "all x y z.((Hulk(x) & WakesUp(x) & Bridge(y) & Breaks(x,y)) -> Hulk(x))", "all x y.((Hulk(x) & WakesUp(x)) -> BreakBridge(x,y))", "all x y z.((Hulk(x) & WakesUp(x) & Bridge(y)) -> Breaks(x,y))", "all x y z.((Hulk(x) & WakesUp(x) & Bridge(y) & Breaks(x,y)) -> Breaks(x,z))", "all x y z.((Hulk(x) & WakesUp(x) & Bridge(y) & Breaks(x,y)) -> Breaks(x,y))"]}
{"id": "folio_train_1662", "nl": "Thor is a god.", "fol": "IsGod(Thor)", "prediction": ["all x.(Thor(x) -> God(x))", "all x.(Tor(x) -> God(x))", "all x.((Thor(x) & God(x)) -> God(x))", "all x.(Throat(x) -> God(x))", "exists x.(Thor(x) & God(x))", "all x y.((Thor(x) & God(y)) -> Is(x,y))", "all x.((Thor(x) & God(x)) -> IsGod(x))", "all x.((Thor(x) & God(x)) -> Is(x,y))", "all x.((Tor(x) & God(x)) -> God(x))", "all x y.((Thor(x) & God(y)) -> IsGod(x,y))", "All x.(Thor(x) -> God(x))", "all x y.((Thor(x) & God(y)) -> God(x))", "all x.((Thor(x) & God(x)) -> HasGod(x))", "all x.(Roth(x) -> God(x))", "all x.((Thor(x) & God(x)) -> Thor(x))", "all x.(Thor(x) -> God(x))"]}
{"id": "folio_train_1663", "nl": "Thor will break a bridge when he is happy.", "fol": "(IsHappy(Thor) -> BreaksBridge(Thor))", "prediction": ["all x.((Thor(x) & Happy(x)) -> BreaksBridge(x))", "all x.((Thor(x) & Happy(x)) -> BreakBridge(x))", "all x y.((Thor(x) & Bridge(y) & Happy(x)) -> Breaks(x,y))", "all x y.((Tor(x) & Bridge(y) & Happy(x)) -> Breaks(x,y))", "all x.((Tor(x) & Happy(x)) -> BreaksBridge(x))", "all x y.((Roth(x) & Bridge(y) & Happy(x)) -> Breaks(x,y))", "all x y.((Throat(x) & Bridge(y) & Happy(x)) -> Breaks(x,y))", "all x y.((Torn(x) & Bridge(y) & Happy(x)) -> Breaks(x,y))", "all x y.((Bridge(x) & Thor(y) & Happy(y)) -> Breaks(y,x))", "all x y.(((Thor(x) & Bridge(y) & Happy(x)) -> Breaks(x,y))", "all x y.((Thor(x) & Bridge(y) & Happy(x,y)) -> Breaks(x,y))", "all x.((Tor(x) & Happy(x)) -> BreakBridge(x))", "all x y.((Tom(x) & Bridge(y) & Happy(x)) -> Breaks(x,y))", "all x y.((Thor(x) & Bridge(y) & Happy(x)) -> BreaksBridge(x,y))", "all x y.((Bridge(x) & Thor(y) & Happy(y)) -> Breaks(x,y))", "all x y.((Thor(x) & Bridge(y) & Happy(x)) -> Break(x,y))"]}
{"id": "folio_train_1664", "nl": "A god is not a destroyer and a destroyer is not a god.", "fol": "all x.(IsGod(x) <-> -IsDestroyer(x))", "prediction": ["all x y.((God(x) & Destroyer(y)) -> (-Destroyer(x) & -Destroyer(y)))", "(all x.(God(x) -> -Destroyer(x)) & all y.(Destroyer(y) -> -Destroyer(y)))", "all x.(God(x) -> (-Destroyer(x) & -Destroyer(x)))", "all x y.((God(x) & Disruptor(y)) -> (-Destroyer(x) & -God(y)))", "all x y.((God(x) & Disposer(y)) -> (-Destroyer(x) & -Destroyer(y)))", "all x y.((God(x) & Disruptor(y)) -> (-Destroyer(x) & -Destroyer(y)))", "(all x.(God(x) -> -Destroyer(x)) & all y.(Destroyer(y) -> -Destroyer(y)))", "all x y.((God(x) & Disposer(y)) -> (-Destroyer(x) & -God(y)))", "(all x.(God(x) -> -Destroyer(x)) & all y.(Destroyer(y) -> -God(y)))", "all x y.((God(x) & Disruptor(y)) -> (-Disruptor(x) & -Disruptor(y)))", "all x y.((God(x) & Destroyer(y)) -> (-Destroyer(x) & -God(y)))", "all x y.((God(x) & Disruptor(y)) -> (-Destroyer(x) & -Destroyer(y)))", "(all x.(God(x) -> -Destroyer(x)) & all y.(Destroyer(y) -> -God(y)))", "all x y.((God(x) & Disrupter(y)) -> (-Destroyer(x) & -Destroyer(y)))", "(all x.(God(x) -> -Destroyer(x)) & all y.(Destroyer(y) -> -Destroyer(y))))", "(all x.(God(x) -> -Destroyer(x)) & all y.(Destroyer(y) -> -Destroyer(y)))"]}
{"id": "folio_train_1665", "nl": "Peter Parker wears a uniform when he is a superhero.", "fol": "(IsSuperhero(Peter) -> WearsUniform(Peter))", "prediction": ["all x.((Superhero(x) & WearsUniform(x)) -> WearsUniform(x))", "all x.((PeterParker(x) & Superhero(x)) -> WearsUniform(x))", "all x.((Captain(x) & WearsUniform(x)) -> Superhero(x))", "all x.((Captain(x) & Superhero(x)) -> WearsUniform(x))", "all x.((Superhero(x) & WearsUniform(x)) -> PeterParker(x))", "all x y.((PeterParker(x) & Superhero(y)) -> WearsUniform(x,y))", "all x.((PeterPotter(x) & Superhero(x)) -> WearsUniform(x))", "all x.((Superhero(x) & WearsUniform(x)) -> PeterPotter(x))", "all x.((Superhero(x) & WearsUniform(x)) -> Superhero(x))", "all x.((Spocket(x) & Superhero(x)) -> WearsUniform(x))", "all x.((Parker(x) & Superhero(x)) -> WearsUniform(x))", "all x y.((PeterPotter(x) & Superhero(y)) -> WearsUniform(x,y))", "all x.((PeterPenny(x) & Superhero(x)) -> WearsUniform(x))", "all x y.((Captain(x) & Superhero(y)) -> WearsUniform(x,y))", "all x.((Superhero(x) & PeterParker(x)) -> WearsUniform(x))", "all x.((Superhero(x) & WearsUniform(x)) -> PeterPenny(x))"]}
{"id": "folio_train_1666", "nl": "Peter Parker is not a civilian if and only if a destroyer is breaking a bridge.", "fol": "all x.(-IsCivilian(Peter) <-> (IsDestroyer(x) & BreaksBridge(x)))", "prediction": ["all x.((PeterParker(x) & BreakingBridge(x)) -> -Civil(x))", "all x.((PeterPotter(x) & BreakingBridge(x)) -> -Civil(x))", "all x.((Destroyer(x) & BreakingBridge(x)) -> -Civil(x))", "all x.((PeterParker(x) & BreaksBridge(x)) -> -Civil(x))", "all x.((PeterPotter(x) & BreaksBridge(x)) -> -Civil(x))", "all x.((PeterPenny(x) & BreakingBridge(x)) -> -Civil(x))", "all x.((PeterParker(x) & BreakingBridge(x) & -Civil(x)) -> -Civil(x))", "all x.((PeterPenny(x) & BreaksBridge(x)) -> -Civil(x))", "all x.((Destroyer(x) & BreakingBridge(x)) -> -Civil(x))", "all x.((Captain(x) & BreakingBridge(x)) -> -Civil(x))", "all x.((Destroyer(x) & BreaksBridge(x)) -> -Civil(x))", "all x.((PeterParker(x) & BreakingBridge(x)) -> -Civilian(x))", "all x.((Disrupter(x) & BreakingBridge(x)) -> -Civil(x))", "all x.((PeterPotter(x) & BreakingBridge(x)) -> -Civilian(x))", "all x.((PeterParker(x) & -Civil(x)) -> BreakingBridge(x))", "all x.((Dominion(x) & BreakingBridge(x)) -> -Civil(x))"]}
{"id": "folio_train_1667", "nl": "If Thor is happy, the Hulk is angry.", "fol": "(IsHappy(Thor) -> IsAngry(Hulk))", "prediction": ["all x.((Thor(x) & Happy(x)) -> Angerous(x))", "all x.((Thor(x) & Happy(x)) -> Anger(x))", "all x.((Thor(x) & Happy(x)) -> Anxious(x))", "all x.((Thor(x) & Happy(x)) -> Angering(x))", "all x.((Thor(x) & Happy(x)) -> Agreed(x))", "all x.((Thor(x) & Happy(x)) -> Angerful(x))", "all x.((Thor(x) & Happy(x)) -> Irresponsible(x))", "all x.((Throat(x) & Happy(x)) -> Angerous(x))", "all x y.((Thor(x) & Hulk(y)) -> Happy(x))", "all x.((Thor(x) & Happy(x)) -> Afraid(x))", "all x.((Thor(x) & Happy(x)) -> Wuthering(x))", "all x.((Thor(x) & Happy(x)) -> HulkAngry(x))", "all x.((Tor(x) & Happy(x)) -> Angerous(x))", "all x.((Throat(x) & Happy(x)) -> Anger(x))", "all x.((Tor(x) & Happy(x)) -> Anger(x))", "all x.((Hulk(x) & ThorHappy(x)) -> Anger(x))"]}
{"id": "folio_train_1668", "nl": "If the Hulk does not wake up, then Thor is not happy.", "fol": "(-WakesUp(Hulk) -> -IsHappy(Thor))", "prediction": ["all x.((Hulk(x) & -WakeUp(x)) -> Thor -Happy(x))", "all x.((Hulk(x) & -WakeUp(x)) -> -Happy(x))", "all x.((Hulk(x) & -WakeUp(x)) -> Thor(x))", "all x.((Hulk(x) & -WakeUp(x)) -> ThorNotHappy(x))", "all x.((Hulk(x) & -WakeUp(x)) -> Thor-NotHappy(x))", "all x.((Hulk(x) & -WakeUp(x)) -> Thor isn'tHappy(x))", "all x.((Hulk(x) & -WeakensUp(x)) -> Thor -Happy(x))", "all x.((Hulk(x) & -WarmsUp(x)) -> Thor -Happy(x))", "all x.((Hulk(x) & -WakeUp(x)) -> ThorsNotHappy(x))", "all x.((Hulk(x) & -WakeUp(x)) -> Thor-Living(x))", "all x.((Hulk(x) & -WakeUp(x)) -> -Happy(x))", "all x.((Hulk(x) & -WakesUp(x)) -> Thor -Happy(x))", "all x.((Hulk(x) & -WakeUp(x)) -> Thor-notHappy(x))", "all x.((Hulk(x) & -WakeUp(x)) -> Thor-Little(x))", "all x.((Hulk(x) & -WakeUp(x)) -> Thor--Happy(x))", "all x.((Hulk(x) & -WakeUp(x)) -> ThorisNotHappy(x))"]}
{"id": "folio_train_1669", "nl": "If Thor is happy, then Peter Parker wears a uniform.", "fol": "(IsHappy(Thor) -> WearsUniform(Peter))", "prediction": ["all x.((Thor(x) & Happy(x)) -> WearsUniform(x))", "all x.((Thor(x) & Happy(x)) -> PeterParkerWearsUniform(x))", "all x.((Tor(x) & Happy(x)) -> WearsUniform(x))", "all x.((Throat(x) & Happy(x)) -> WearsUniform(x))", "all x.((Throat(x) & Happy(x)) -> PeterParkerWearsUniform(x))", "all x.((Thor(x) & Happy(x)) -> PeterParker(x))", "all x.((Tor(x) & Happy(x)) -> PeterParkerWearsUniform(x))", "all x.((Thor(x) & Happy(x)) -> PeterPennyWearsUniform(x))", "all x.((Thor(x) & Happy(x)) -> PeterPierceWearsUniform(x))", "all x.((Thor(x) & Happy(x)) -> PeterPotterWearsUniform(x))", "all x.((Tor(x) & Happy(x)) -> WearsUniform(x))", "all x.((Tom(x) & Happy(x)) -> WearsUniform(x))", "all x.((Thor(x) & Happy(x)) -> WornUniform(x))", "all x.((Thor(x) & Happy(x)) -> PeterPotter(x))", "all x.((Thor(x) & Happy(x)) -> PeterPitterson(x))", "all x.((Thor(x) & Happy(x)) -> PeterPenny(x))"]}
{"id": "folio_train_1670", "nl": "If Thor is not happy, then no bridge will be broken.", "fol": "(-IsHappy(Thor) -> -exists x.BreaksBridge(x))", "prediction": ["all x.((Thor(x) & -Happy(x)) -> -BrokenBridge(x))", "all x.((Tor(x) & -Happy(x)) -> -BrokenBridge(x))", "all x.((Thor(x) & -Happy(x)) -> -BridgeBroken(x))", "all x.((Tor(x) & -Happy(x)) -> -BridgeBroken(x))", "all x.((Throat(x) & -Happy(x)) -> -BrokenBridge(x))", "all x.((Thor(x) & -Happy(x)) -> NoBridgeBroken(x))", "all x.((Thor(x) & -Happy(x)) -> -BrokenBridge(x))", "all x.((Throat(x) & -Happy(x)) -> -BridgeBroken(x))", "all x.((Tor(x) & -Happy(x)) -> NoBridgeBroken(x))", "all x.((To Thor(x) & -Happy(x)) -> -BrokenBridge(x))", "all x.((Tor(x) & -Happy(x)) -> -BrokenBridge(x))", "all x.((Tor(x) & -Happy(x)) -> -BrokenBridge(x))", "all x.((Thor(x) & -Happy(x)) -> -BridgeBroken(x))", "all x.((Roth(x) & -Happy(x)) -> -BrokenBridge(x))", "all x.((Throat(x) & -Happy(x)) -> NoBridgeBroken(x))", "all x.((To Thor(x) & -Happy(x)) -> -BridgeBroken(x))"]}
{"id": "folio_train_1671", "nl": "Diethylcarbamazine is a medication discovered in the year 1947.", "fol": "all x.(DiethylcarbamazineMedication(x) & IsMedication(x) & DiscoveredInYear(x,Year1947))", "prediction": ["all x.(Diethylcarbamazine(x) -> DiscoveredInYear(x,47))", "all x y.((Diethylcarbamazine(x) & Year(y)) -> DiscoveredIn(x,y))", "all x.(Diethylcarbamazine(x) -> DiscoveredInYear(x,1947))", "Diethylcarbamazine (Medication(x) & DiscoveredInYear(x,47))", "(Medication(Diethylcarbamazine) & DiscoveredInYear(Diethylcarbamazine) & Year(Diethylcarbamazine) & Year(Diethylcarbamazine))", "(Medication(Diethylcarbamazine) & DiscoveredInYear(Diethylcarbamazine) & Year(Diethylcarbamazine))", "all x.(Diethylcarbamazine(x) -> DiscoveredInTheYear(x,47))", "(Medication(Diethylcarbamazine) & DiscoveredInYear(Diethylcarbamazine) & Year(Diethylcarbamazine) & Year(Diethylcarbamazine) & Year(Diethylcarbamazine))", "Diethylcarbamazine (Medication(x) & DiscoveredInYear(x,1947))", "(Medication(Diethylcarbamazine) & DiscoveredInYear(Diethylcarbamazine) & InYear(Diethylcarbamazine) & InYear(Diethylcarbamazine))", "all x.(Diethylcarbamazine(x) -> (Medication(x) & DiscoveredInYear(x,47)))", "all x.(Diethylcarbamazine(x) -> DiscoveredInTheYear(x,1947))", "(Medication(Diethylcarbamazine) & DiscoveredInYear(Diethylcarbamazine) & InYear(Diethylcarbamazine))", "(Medication(Diethylcarbamazine) & DiscoveredInYear(Diethylcarbamazine) & InYear(Diethylcarbamazine) & InYear(Diethylcarbamazine) & InYear(Diethylcarbamazine))", "all x.((Diethylcarbamazine(x) & DiscoveredInYear(x,47)) -> Diethylcarbamazine(x))", "all x.(Diethylcarbamazine(x) -> (Medication(x) & DiscoveredInYear(x,1947)))"]}
{"id": "folio_train_1672", "nl": "Diethylcarbamazine can be used to treat river blindness.", "fol": "all x y.((DiethylcarbamazineMedication(x) & RiverBlindnessCondition(y)) -> TreatsCondition(x,y))", "prediction": ["all x.(Diethylcarbamazine(x) -> TreatsRiverBlindness(x))", "all x y.((Diethylcarbamazine(x) & RiverBlindness(y)) -> CanBeTreated(x,y))", "all x y.((Diethylcarbamazine(x) & RiverBlindness(y)) -> UsedToTreat(x,y))", "all x.((Diethylcarbamazine(x) & RiverBlindness(x)) -> CanBeTreated(x))", "all x y.((Diethylcarbamazine(x) & RiverBlindness(y)) -> Treats(x,y))", "all x y.((Diethylcarbamazine(x) & RiverBlindness(y)) -> CanTreat(x,y))", "all x.(DiethylCarbamazine(x) -> TreatsRiverBlindness(x))", "all x.((Diethylcarbamazine(x) & RiverBlindness(x)) -> UsedToTreat(x,y))", "all x.((Diethylcarbamazine(x) & RiverBlindness(x)) -> Treats(x,y))", "all x.((Diethylcarbamazine(x) & RiverBlindness(x)) -> CanTreat(x,y))", "all x y.((Diethylcarbamazine(x) & RiverBlindness(y)) -> CanBeUsedToTreat(x,y))", "all x.(Diethylcarbamazine(x) -> CanBeUsedToTreatRiverBlindness(x))", "all x.(Diethylcarbamazine(x) -> UsedToTreatRiverBlindness(x))", "all x.((Diethylcarbamazine(x) & RiverBlindness(x)) -> CanBeUsedToTreat(x,y))", "all x.(Diethylcarbamazine(x) -> CanTreatRiverBlindness(x))", "all x.((Diethylcarbamazine(x) & RiverBlindness(x)) -> CanBeTreated(x,y))"]}
{"id": "folio_train_1673", "nl": "The only preferred treatment for river blindness is ivermectin.", "fol": "all x y.((RiverBlindnessCondition(y) & IsPreferredTreatment(x,y)) -> IvermectinMedication(x))", "prediction": ["all x.(PreferredTreatmentForRiverBlindness(x) -> Ivermectin(x))", "all x.((PreferredTreatment(x) & ForRiverBlindness(x)) -> Ivermectin(x))", "all x.((RiverBlindness(x) & Ivermectin(x)) -> PreferredTreatment(x))", "all x.((PreferredTreatment(x) & RiverBlindness(x)) -> Ivermectin(x))", "all x.((PreferredTreatmentForRiverBlindness(x) & Ivermectin(x)) -> PreferredTreatmentForRiverBlindness(x))", "all x.(RiverBlindness(x) -> (PreferredTreatment(x) & Ivermectin(x)))", "all x.(RiverBlindness(x) -> PreferredTreatment(x))", "all x.((RiverBlindness(x) & PreferredTreatment(x)) -> Ivermectin(x))", "all x.(PreferredTreatmentForRiverBlindness(x) -> Ivermectin(x))", "all x.(PreferredTreatment(x) -> Ivermectin(x))", "all x y.((RiverBlindness(x) & Ivermectin(y)) -> PreferredTreatment(x,y))", "all x.(PrivateTreatmentForRiverBlindness(x) -> Ivermectin(x))", "all x y.((PreferredTreatment(x) & RiverBlindness(y)) -> Ivermectin(x,y))", "all x.(RiverBlindness(x) -> PreferredTreatment(x,ivermectin))", "all x.(RiverBlindness(x) -> (PreferredTreatment(x,ivermectin) | PreferredTreatment(x,ivermectin)))", "all x.((PreferredTreatmentForRiverBlindness(x) & Ivermectin(x)) -> PreferableTreatmentForRiverBlindness(x))"]}
{"id": "folio_train_1674", "nl": "Diethylcarbamazine is not ivermectin.", "fol": "all x.(DiethylcarbamazineMedication(x) -> -IvermectinMedication(x))", "prediction": ["all x.(Diethylcarbamazine(x) -> -Ivermectin(x))", "Diethylcarbamazine -Ivermectin(Diethylcarbamazine)", "All x.(Diethylcarbamazine(x) -> -Ivermectin(x))", "Diethylcarbamazine -Ivermectin(diethylcarbamazine)", "(-Ivermectin(diethylcarbamazine))", "(-Ivermectin(Diethylcarbamazine))", "Diethylcarbamazine is notIvermectin(Diethylcarbamazine)", "all x.(DiethylCarbamazine(x) -> -Ivermectin(x))", "-Ivermectin(diethylcarbamazine)", "-Ivermectin(Diethylcarbamazine)", "Diethylcarbamazine - Ivermectin(Diethylcarbamazine)", "Diethylcarbamazine -Ivermectin(DiethylCarbamazine)", "Diethylcarbamazine -Ivermectin(diet(c) & -Ivermectin(c))", "(-Ivermectin(diethylcarbamazine)", "Diethylcarbamazine -Ivermectin(diet(c) & -Ivermectin(d))", "Diethylcarbamazine & -Ivermectin(Diethylcarbamazine)"]}
{"id": "folio_train_1675", "nl": "Diethylcarbamazine is not preferred for the treatment of river blindness.", "fol": "all x y.((DiethylcarbamazineMedication(x) & RiverBlindnessCondition(y)) -> -IsPreferredTreatment(x,y))", "prediction": ["all x.(Diethylcarbamazine(x) -> -PreferredForRiverBlindness(x))", "all x.((Diethylcarbamazine(x) & RiverBlindness(x)) -> -PreferredFor(x,y))", "all x.((Diethylcarbamazine(x) & RiverBlindness(x)) -> -PreferredForTreatment(x,y))", "all x.((Diethylcarbamazine(x) & -PreferredForRiverBlindness(x)) -> -PreferredForRiverBlindness(x))", "all x y.((Diethylcarbamazine(x) & RiverBlindness(y)) -> -PreferredFor(x,y))", "all x.((Diethylcarbamazine(x) & RiverBlindness(x)) -> -PreferredForTreatment(x))", "all x.((Diethylcarbamazine(x) & RiverBlindness(x)) -> -PreferredFor(x,RiverBlindness))", "(-PreferredForRiverBlindness(Diethylcarbamazine))", "all x.((Diethylcarbamazine(x) & RiverBlindness(y)) -> -PreferredFor(x,y))", "all x y.((Diethylcarbamazine(x) & RiverBlindness(y)) -> -PreferredForTreatment(x,y))", "all x.((Diethylcarbamazine(x) & RiverBlindness(y)) -> -PreferredForTreatment(x,y))", "all x.((Diethylcarbamazine(x) & RiverBlindness(x)) -> -PreferredForTreatment(x,RiverBlindness))", "Diethylcarbamazine -PreferredForRiverBlindness(x))", "Diethylcarbamazine -PreferredForRiverBlindness(Diethylcarbamazine)", "all x.(DiethylCarbamazine(x) -> -PreferredForRiverBlindness(x))", "all x.((Diethylcarbamazine(x) & -PreferredForRiverBlindness(x)) -> -PreferredFor(x,RiverBlindness))"]}
{"id": "folio_train_1676", "nl": "Diethylcarbamazine was often used to treat river blindness.", "fol": "exists x.(DiethylcarbamazineMedication(x) & all y.(RiverBlindnessCondition(y) -> OftenUsedToTreat(x,y)))", "prediction": ["all x.(Diethylcarbamazine(x) -> UsedToTreatRiverBlindness(x))", "all x.(Diethylcarbamazine(x) -> TreatsRiverBlindness(x))", "all x y.((Diethylcarbamazine(x) & RiverBlindness(y)) -> UsedToTreat(x,y))", "all x.((Diethylcarbamazine(x) & RiverBlindness(x)) -> UsedToTreat(x,y))", "all x.(Diethylcarbamazine(x) -> (TreatsRiverBlindness(x) & UsedToTreat(x,RiverBlindness)))", "all x.(Diethylcarbamazine(x) -> (TreatsRiverBlindness(x) & OftenUsedToTreat(x,RiverBlindness)))", "all x.((Diethylcarbamazine(x) & RiverBlindness(y)) -> UsedToTreat(x,y))", "all x.(Diethylcarbamazine(x) -> (TreatsRiverBlindness(x) | TreatsRiverBlindness(x)))", "all x.(Diethylcarbamazine(x) -> OftenUsedToTreatRiverBlindness(x))", "all x.(DiethylCarbamazine(x) -> UsedToTreatRiverBlindness(x))", "all x y.((Diethylcarbamazine(x) & RiverBlindness(y)) -> UsedFor(x,y))", "all x.(Diethylcarbamazine(x) -> (TreatsRiverBlindness(x) & UsedToTreatRiverBlindness(x)))", "all x.(DiethylCarbamazine(x) -> TreatsRiverBlindness(x))", "all x.(Diethylcarbamazine(x) -> (TreatsRiverBlindness(x) & UsedToTreat(x,y)))", "all x y.((Diethylcarbamazine(x) & RiverBlindness(y)) -> UsedForTreating(x,y))", "all x.((Diethylcarbamazine(x) & RiverBlindness(x)) -> UsedToTreat(x,y,z))"]}
{"id": "folio_train_1677", "nl": "Diethylcarbamazine is used in the treatment of filariasis.", "fol": "all x.(DiethylcarbamazineMedication(x) -> exists y.(Filariasis(y) & TreatsCondition(x,y)))", "prediction": ["all x.(Diethylcarbamazine(x) -> UsedInTreatmentOfFilariasis(x))", "all x y.((Diethylcarbamazine(x) & Filariasis(y)) -> UsedInTreatment(x,y))", "all x y.((Diethylcarbamazine(x) & Filariasis(y)) -> UsedIn(x,y))", "all x y z.((Diethylcarbamazine(x) & Filariasis(y) & Filariasis(z)) -> UsedInTreatment(x,y,z))", "all x y z.((Diethylcarbamazine(x) & Filariasis(y) & Filariasis(z)) -> UsedIn(x,y,z))", "all x.(DiethylCarbamazine(x) -> UsedInTreatmentOfFilariasis(x))", "all x y z.((Diethylcarbamazine(x) & Filariasis(y) & Treatment(z)) -> UsedIn(x,y,z))", "all x.((Diethylcarbamazine(x) & Filariasis(x)) -> UsedInTreatment(x))", "all x.((Diethylcarbamazine(x) & Filariasis(x)) -> UsedInTreatment(x,filariasis))", "all x y.((Diethylcarbamazine(x) & Filariasis(y)) -> UsedInTherapy(x,y))", "all x.(Diethylcarbamazine(x) -> UsedInTherapyOfFilariasis(x))", "all x.(Diethylcarbamazine(x) -> UsedInFilariasis(x))", "all x.(Diethylcarbamazine(x) -> UsedInFilariasisTreatment(x))", "Diethylcarbamazine is used in treatment of filariasis.", "all x.(Diethylcarbamazine(x) -> UsedInTreatmentOfFilariasis(x))", "all x.((Diethylcarbamazine(x) & Filariasis(y)) -> UsedInTreatment(x,y))"]}
{"id": "folio_train_1678", "nl": "All univariate analyses use a generalized linear model. ", "fol": "all x.(IsUnivariateAnalysis(x) -> UsesGLM(x))", "prediction": ["all x.(UnivariateAnalysis(x) -> UsesGeneralizedLinearModel(x))", "all x.(UnivariateAnalysis(x) -> GeneralizedLinearModel(x))", "all x y.((UnivariateAnalysis(x) & GeneralizedLinearModel(y)) -> Uses(x,y))", "all x.(UnivariateAnalysis(x) -> UsesGalvanizedLinearModel(x))", "all x.(UnivariateAnalysis(x) -> UsesGeneralizedLinearModel(x))", "all x.(UnivariateAnalysis(x) -> UsesGeometricLinarModel(x))", "all x.((UnivariateAnalysis(x) & GeneralizedLinearModel(x)) -> Uses(x,y))", "all x.(UnivariateAnalysis(x) -> UsesGeographicalLinearModel(x))", "all x.(UnivariateAnalysis(x) -> UsesGeometricLiniformModel(x))", "all x.(UnivariateAnalysis(x) -> UsesGeometricLinearModel(x))", "all x.(UnivariateAnalysis(x) -> UsesGeneralizedLinarModel(x))", "all x.(UnivariateAnalysis(x) -> (GeneralizedLinearModel(x) & Uses(x,y)))", "all x.(UnivariateAnalysis(x) -> (GeneralizedLinearModel(x) | GeneralizedLinearModel(x)))", "all x y.((UnivariateAnalysis(x) & GeneralizedLinearModel(y)) -> UsedBy(x,y))", "all x.(UnivariateAnalysis(x) -> UtilizesGeneralizedLinearModel(x))", "all x.(UnivariateAnalysis(x) -> UsesGenerativeLinearModel(x))"]}
{"id": "folio_train_1679", "nl": "All multivoxel (pattern) analyses are implementing machine learning algorithms.", "fol": "all x.(IsMultivoxelPatternAnalysis(x) -> ImplementsMachineLearningAlgorithms(x))", "prediction": ["all x.(Multivoxel(x) -> ImplementsMachineLearningAlgorithms(x))", "all x.((Multivoxel(x) & Pattern(x)) -> ImplementsMachineLearningAlgorithms(x))", "all x.(MultivoxelAnalysis(x) -> ImplementsMachineLearningAlgorithms(x))", "all x y.((Multivoxel(x) & Pattern(y)) -> ImplementsMachineLearningAlgorithms(x,y))", "all x.(Multivoxel(x) -> ImplementingMachineLearningAlgorithms(x))", "all x.(Multivoxel(x) (pattern(x) & ImplementsMachineLearningAlgorithms(x)))", "all x y.((Multivoxel(x) & Pattern(y)) -> ImplementsMachineLearningAlgorithms(x))", "all x.(Multivoxel(x) -> MachineLearningAlgorithm(x))", "all x.(Multivoxel(x) (pattern) -> ImplementsMachineLearningAlgorithms(x)))", "all x.(Multivoxel(x) -> (InvolvesMachineLearningAlgorithms(x) & ImplementsMachineLearningAlgorithms(x)))", "all x.(MultivoxelAlgorithm(x) -> ImplementsMachineLearningAlgorithms(x))", "all x.(Multivoxel(x) -> MachineLearningAlgorithms(x))", "all x.(Multivoxel(x) -> (ImplementsMachineLearningAlgorithms(x)))", "all x.(Multivoxel(x) (pattern) -> ImplementsMachineLearningAlgorithms(x))", "all x.(Multivoxel(x) -> (implementingMachineLearningAlgorithms(x)))", "all x.(Multivoxel(x) -> (ImplementsMachineLearningAlgorithms(x) & PatternAlgorithms(x)))"]}
{"id": "folio_train_1680", "nl": "All implementing machine learning algorithms are to learn and classify multivariate data.", "fol": "all x.(ImplementsMachineLearningAlgorithms(x) -> LearnsAndClassifiesMultivariateData(x))", "prediction": ["all x.((MachineLearningAlgorithm(x) & LearnsMultivariateData(x) & ClassifiesMultivariateData(x)) -> Implements(x))", "all x.((MachineLearningAlgorithm(x) & LearnsMultivariateData(x) & ClassifiesMultivariateData(x)) -> ImplementsAlgorithm(x))", "all x.((MachineLearningAlgorithm(x) & Implements(x)) -> (LearnsMultivariateData(x) & ClassifiesMultivariateData(x)))", "all x.((MachineLearningAlgorithm(x) & Implements(x)) -> (LearnMultivariateData(x) & ClassifyMultivariateData(x)))", "all x.((MachineLearningAlgorithm(x) & LearnMultivariateData(x) & ClassifyMultivariateData(x)) -> Implements(x))", "all x.(MachineLearningAlgorithm(x) -> (LearnMultivariateData(x) & ClassifyMultivariateData(x)))", "all x.(MachineLearningAlgorithm(x) -> (LearnsMultivariateData(x) & ClassifiesMultivariateData(x)))", "all x.((Algorithm(x) & ImplementsMachineLearning(x)) -> (LearnMultivariateData(x) & ClassifyMultivariateData(x)))", "all x.((MethodLearningAlgorithm(x) & Implements(x)) -> (LearnsMultivariateData(x) & ClassifiesMultivariateData(x)))", "all x.((Algorithm(x) & ImplementsMachineLearning(x)) -> (LearnsMultivariateData(x) & ClassifiesMultivariateData(x)))", "all x.((InitiatingMachineLearningAlgorithms(x) & LearnMultivariateData(x) & ClassifyMultivariateData(x)) -> ImplementsMachineLearningAlgorithms(x))", "all x.((MachineLearningAlgorithm(x) & LearnsMultivariateData(x)) -> ClassifiesMultivariateData(x))", "all x.((ProgrammingMachineLearningAlgorithms(x) & LearnMultivariateData(x) & ClassifyMultivariateData(x)) -> ImplementsMachineLearningAlgorithms(x))", "all x.((MachineLearningAlgorithm(x) & LearningMultivariateData(x)) -> ClassifyingMultivariateData(x))", "all x.((MachineLearningAlgorithm(x) & LearnMultivariateData(x) & ClassifyMultivariateData(x)) -> ImplementsAlgorithm(x))", "all x.((MachineLearningAlgorithm(x) & LearningMultivariateData(x) & ClassifyingMultivariateData(x)) -> Implements(x))"]}
{"id": "folio_train_1681", "nl": "The Latent Dirichlet allocation model uses a generalized linear model or a univariate analysis. ", "fol": "(UsesGLM(LatentDirichletAllocationModel) | IsUnivariateAnalysis(LatentDirichletAllocationModel))", "prediction": ["all x.(LatentDirichletAllocationModel(x) -> (UsesGeneralizedLinearModel(x) | UsesUnivariateAnalysis(x)))", "all x.((LatentDirichletAllocationModel(x) & (GeneralizedLinearModel(x) | UnivariateAnalysis(x))) -> AllocationModel(x))", "all x.(LatentDichletAllocationModel(x) -> (UsesGeneralizedLinearModel(x) | UsesUnivariateAnalysis(x)))", "all x.(LatentDirichletAllocationModel(x) -> (GeneralizedLinearModel(x) | UnivariateAnalysis(x)))", "all x.((LatentDichletAllocationModel(x) & (GeneralizedLinearModel(x) | UnivariateAnalysis(x))) -> AllocationModel(x))", "all x.(LatentDrichletAllocationModel(x) -> (UsesGeneralizedLinearModel(x) | UsesUnivariateAnalysis(x)))", "all x.((LatentDirichletAllocationModel(x) & (GeneralizedLinearModel(x) | UnivariateAnalysis(x))) -> AllocationModel(x))", "all x.(LatentDirichletAllocationModel(x) -> (UsesGeneralizedLinearModel(x) | UtilizesUnivariateAnalysis(x)))", "all x.(LatentDirichletAllocationModel(x) -> (GeometricLiniformModel(x) | UnivariateAnalysis(x)))", "all x.(LatentDirichletAllocationModel(x) -> (GalvanizedLinearModel(x) | UnivariateAnalysis(x)))", "all x.(LatentDirichletAllocationModel(x) -> ((GeneralizedLinearModel(x) | UnivariateAnalysis(x))))", "all x.(LatentDichletAllocationModel(x) -> (GeneralizedLinearModel(x) | UnivariateAnalysis(x)))", "all x.(LatentDirichletAllocationModel(x) -> (GeneralizedLinearModel(x) | UnivariateAnalysis(x)))", "all x.(LatentDirichletAllocationModel(x) -> (GeographicalLinearModel(x) | UnivariateAnalysis(x)))", "all x.(LatentDrichletAllocationModel(x) -> (GeneralizedLinearModel(x) | UnivariateAnalysis(x)))", "all x.((LatentDirichletAllocationModel(x) & (GeneralizedLinearModel(x) | UnivariateAnalysis(x))) -> Allocated(x))"]}
{"id": "folio_train_1682", "nl": "If the Latent Dirichlet allocation model does not learn and classify multivariate data, then the Latent Dirichlet allocation model uses a generalized linear model and a multivoxel (pattern) analysis.", "fol": "(-LearnsAndClassifiesMultivariateData(LatentDirichletAllocationModel) -> (UsesGLM(LatentDirichletAllocationModel) & IsMultivoxelPatternAnalysis(LatentDirichletAllocationModel)))", "prediction": ["all x.((LatentDirichletAllocationModel(x) & -LearnsMultivariateData(x) & ClassifiesMultivariateData(x)) -> (UsesGeneralizedLinearModel(x) & UsesMultivoxel(x)))", "all x.((LatentDirichletAllocationModel(x) & -LearnsMultivariateData(x) & ClassifiesMultivariateData(x)) -> (GeneralizedLinearModel(x) & Multivoxel(x) & PatternAnalysis(x)))", "all x.((LatentDirichletAllocationModel(x) & -LearnsMultivariateData(x) & ClassifiesMultivariateData(x)) -> (GeneralizedLinearModel(x) & Multivoxel(x)))", "all x.((LatentDirichletAllocationModel(x) & -LearnsMultivariateData(x) & ClassifiesMultivariateData(x)) -> (UsesGeneralizedLinearModel(x) & UsesMultivoxelAnalysis(x)))", "all x.((LatentDirichletAllocationModel(x) & -LearnMultivariateData(x) & ClassifyMultivariateData(x)) -> (UsesGeneralizedLinearModel(x) & UsesMultivoxel(x)))", "all x.((LatentDirichletAllocationModel(x) & -LearnsMultivariateData(x) & ClassifiesMultivariateData(x)) -> UsesGeneralizedLinearModel(x) & UsesMultivoxel(x))", "all x.((LatentDirechletAllocationModel(x) & -LearnsMultivariateData(x) & ClassifiesMultivariateData(x)) -> (UsesGeneralizedLinearModel(x) & UsesMultivoxel(x)))", "all x.((LatentDrichletAllocationModel(x) & -LearnsMultivariateData(x) & ClassifiesMultivariateData(x)) -> (UsesGeneralizedLinearModel(x) & UsesMultivoxel(x)))", "all x.((LatentDirichletAllocationModel(x) & -LearnMultivariateData(x) & ClassifyMultivariateData(x)) -> (GeneralizedLinearModel(x) & Multivoxel(x) & PatternAnalysis(x)))", "all x.((LatentDirichletAllocationModel(x) & -LearnsMultivariateData(x) & ClassifiesMultivariateData(x)) -> (UsesGeneralizedLinearModel(x) & UsesMultivoxelPatterAnalysis(x)))", "all x.((LatentDichletAllocationModel(x) & -LearnsMultivariateData(x) & ClassifiesMultivariateData(x)) -> (UsesGeneralizedLinearModel(x) & UsesMultivoxel(x)))", "all x.((LatentDireichletAllocationModel(x) & -LearnsMultivariateData(x) & ClassifiesMultivariateData(x)) -> (UsesGeneralizedLinearModel(x) & UsesMultivoxel(x)))", "all x.((LatentDirechletAllocationModel(x) & -LearnsMultivariateData(x) & ClassifiesMultivariateData(x)) -> (GeneralizedLinearModel(x) & Multivoxel(x) & PatternAnalysis(x)))", "all x.((LatentDirichletAllocationModel(x) & -LearnMultivariateData(x) & ClassifyMultivariateData(x)) -> (GeneralizedLinearModel(x) & Multivoxel(x)))", "all x.((LatentDirichletAllocationModel(x) & -LearnsMultivariateData(x) & ClassifiesMultivariateData(x)) -> (UsesGeneralizedLinearModel(x) & UsesMultivoxel(x) & UsesPatter(x)))", "all x.((LatentDirichletAllocationModel(x) & -LearnsMultivariateData(x) & ClassifiesMultivariateData(x)) -> (GeneralizedLinearModel(x) & MultivoxelPatter(x)))"]}
{"id": "folio_train_1683", "nl": "Latent Dirichlet allocation model is implementing machine learning algorithms.", "fol": "ImplementsMachineLearningAlgorithms(LatentDirichletAllocationModel)", "prediction": ["all x.(LatentDirichletAllocationModel(x) -> ImplementsMachineLearningAlgorithms(x))", "all x.(LatentDichletAllocationModel(x) -> ImplementsMachineLearningAlgorithms(x))", "all x.((LatentDirichletAllocationModel(x) & MachineLearningAlgorithms(x)) -> Implements(x))", "all x.(LatentDrichletAllocationModel(x) -> ImplementsMachineLearningAlgorithms(x))", "all x.((LatentDirichletAllocationModel(x) & ImplementsMachineLearningAlgorithms(x)) -> ImplementsAlgorithms(x))", "all x.(LatentDirectiichletAllocationModel(x) -> ImplementsMachineLearningAlgorithms(x))", "all x y.((LatentDirichletAllocationModel(x) & MachineLearningAlgorithms(y)) -> Implements(x,y))", "all x.((LatentDichletAllocationModel(x) & MachineLearningAlgorithms(x)) -> Implements(x))", "all x y.((LatentDirichletAllocationModel(x) & MachineLearningAlgorithm(y)) -> Implements(x,y))", "all x.((LatentDirichletAllocationModel(x) & ImplementsMachineLearningAlgorithms(x)) -> ImplementsMachineLearningAlgorithms(x))", "all x.((LatentDirichletAllocationModel(x) & ImplementsMachineLearningAlgorithms(x)) -> AllocationModel(x))", "all x.((LatentDirichletAllocationModel(x) & ImplementsMachineLearningAlgorithms(x)) -> Implements(x))", "all x.(LatentDirechletAllocationModel(x) -> ImplementsMachineLearningAlgorithms(x))", "all x.(LatentDirectivletAllocationModel(x) -> ImplementsMachineLearningAlgorithms(x))", "all x.((LatentDichletAllocationModel(x) & ImplementsMachineLearningAlgorithms(x)) -> ImplementsAlgorithms(x))", "all x.((LatentDichletAllocationModel(x) & ImplementsMachineLearningAlgorithms(x)) -> AllocationModel(x))"]}
{"id": "folio_train_1684", "nl": "Latent Dirichlet allocation model uses a generalized linear model and learns and classifies multivariate data.", "fol": "(UsesGLM(LatentDirichletAllocationModel) & LearnsAndClassifiesMultivariateData(LatentDirichletAllocationModel))", "prediction": ["all x.(LatentDirichletAllocationModel(x) -> (UsesGeneralizedLinearModel(x) & LearnsMultivariateData(x) & ClassifiesMultivariateData(x)))", "all x.(LatentDichletAllocationModel(x) -> (UsesGeneralizedLinearModel(x) & LearnsMultivariateData(x) & ClassifiesMultivariateData(x)))", "all x y.((LatentDirichletAllocationModel(x) & GeneralizedLinearModel(y)) -> (LearnsMultivariateData(x,y) & ClassifiesMultivariateData(x,y)))", "all x.(LatentDirichletAllocationModel(x) -> (GeneralizedLinearModel(x) & LearnsMultivariateData(x) & ClassifiesMultivariateData(x)))", "all x.(LatentDrichletAllocationModel(x) -> (UsesGeneralizedLinearModel(x) & LearnsMultivariateData(x) & ClassifiesMultivariateData(x)))", "all x.(LatentDirichletAllocationModel(x) -> (UsesGeneralizedLinearModel(x) & LearnsAndClassifiesMultivariateData(x)))", "all x.((LatentDirichletAllocationModel(x) & GeneralizedLinearModel(x) & LearnsMultivariateData(x) & ClassifiesMultivariateData(x)) -> AllocationModel(x))", "all x y z.((LatentDirichletAllocationModel(x) & GeneralizedLinearModel(y) & MultivariateData(z)) -> (Uses(x,y) & Learns(x,z) & Classifies(x,z)))", "all x y.((LatentDirichletAllocationModel(x) & GeneralizedLinearModel(y)) -> (LearnsMultivariateData(x) & ClassifiesMultivariateData(x)))", "all x y.((LatentDichletAllocationModel(x) & GeneralizedLinearModel(y)) -> (LearnsMultivariateData(x,y) & ClassifiesMultivariateData(x,y)))", "all x.(LatentDichletAllocationModel(x) -> (GeneralizedLinearModel(x) & LearnsMultivariateData(x) & ClassifiesMultivariateData(x)))", "all x.(LatentDerichletAllocationModel(x) -> (UsesGeneralizedLinearModel(x) & LearnsMultivariateData(x) & ClassifiesMultivariateData(x)))", "all x.((LatentDirichletAllocationModel(x) & GeneralizedLinearModel(x) & LearnsAndClassifiesMultivariateData(x)) -> AllocationModel(x))", "all x.((LatentDichletAllocationModel(x) & GeneralizedLinearModel(x) & LearnsMultivariateData(x) & ClassifiesMultivariateData(x)) -> AllocationModel(x))", "all x.(LatentDirichletAllocationModel(x) -> (UsesGeneralizedLinearModel(x) & LearnsMultivariateData(x) & ClassifiesMultivariateData(x)))", "all x y z.((LatentDirichletAllocationModel(x) & GeneralizedLinearModel(y) & MultivariateData(z)) -> (Learns(x,z) & Classifies(x,z)))"]}
{"id": "folio_train_1685", "nl": "Latent Dirichlet allocation model either uses a generalized linear model or learns and classifies multivariate data.", "fol": "(UsesGLM(LatentDirichletAllocationModel) | LearnsAndClassifiesMultivariateData(LatentDirichletAllocationModel))", "prediction": ["all x.(LatentDirichletAllocationModel(x) -> ((UsesGeneralizedLinearModel(x) | LearnsMultivariateData(x)) & ClassifiesMultivariateData(x)))", "all x.(LatentDirichletAllocationModel(x) -> (UsesGeneralizedLinearModel(x) | LearnsMultivariateData(x)))", "all x.(LatentDirichletAllocationModel(x) -> (UsesGeneralizedLinearModel(x) | LearnsMultivariateData(x) & ClassifiesMultivariateData(x)))", "all x.(LatentDichletAllocationModel(x) -> ((UsesGeneralizedLinearModel(x) | LearnsMultivariateData(x)) & ClassifiesMultivariateData(x)))", "all x.(LatentDirichletAllocationModel(x) -> (UsesGeneralizedLinearModel(x) | LearnsAndClassifiesMultivariateData(x)))", "all x.(LatentDichletAllocationModel(x) -> (UsesGeneralizedLinearModel(x) | LearnsMultivariateData(x)))", "all x.((LatentDirichletAllocationModel(x) & (UsesGeneralizedLinearModel(x) | LearnsMultivariateData(x))) -> AllocationModel(x))", "all x.(LatentDirichletAllocationModel(x) -> ((UsesGeneralizedLinearModel(x) | LearnsMultivariateData(x))))", "all x.(LatentDirichletAllocationModel(x) -> ((UsesGeneralizedLinearModel(x) | LearnsMultivariateData(x)) & ClassifiesMultivariateData(x))))", "all x.(LatentDichletAllocationModel(x) -> (UsesGeneralizedLinearModel(x) | LearnsMultivariateData(x) & ClassifiesMultivariateData(x)))", "all x y.((LatentDirichletAllocationModel(x) & GeneralizedLinearModel(y)) -> (Uses(x,y) | Learns(x,y) & ClassifiesMultivariateData(x,y)))", "all x.(LatentDrichletAllocationModel(x) -> ((UsesGeneralizedLinearModel(x) | LearnsMultivariateData(x)) & ClassifiesMultivariateData(x)))", "all x.(LatentDirichletAllocationModel(x) -> ((UsesGeneralizedLinearModel(x) | LearnsMultivariateData(x) & ClassifiesMultivariateData(x))))", "all x.((LatentDirichletAllocationModel(x) & (GeneralizedLinearModel(x) | LearnsMultivariateData(x))) -> AllocationModel(x))", "all x.(LatentDichletAllocationModel(x) -> (UsesGeneralizedLinearModel(x) | LearnsAndClassifiesMultivariateData(x)))", "all x.(LatentDirichletAllocationModel(x) -> ((UsesGeneralizedLinearModel(x) | LearnsMultivariateData(x)) | ClassifiesMultivariateData(x))))"]}
{"id": "folio_train_1686", "nl": "If something requires a medical diagnosis, then lab tests or imaging is required. ", "fol": "all x.(RequiresMedicalDiagnosis(x) -> RequiresLabTestsOrImaging(x))", "prediction": ["all x.(RequiresMedicalDiagnosis(x) -> (LabTests(x) | Imaging(x)))", "all x.((RequiresMedicalDiagnosis(x) & (LabTests(x) | Imaging(x))) -> RequiresMedicalDiagnosis(x))", "all x.((RequiresMedicalDiagnosis(x)) -> (LabTests(x) | Imaging(x)))", "all x.((RequiresMedicalDiagnosis(x) & (LabTests(x) | Imaging(x))) -> Required(x))", "all x.((RequiresMedicalDiagnosis(x) & (LabTests(x) | Imaging(x))) -> Requires(x))", "all x.(MedicalDiagnosis(x) -> (RequiresLabTests(x) | RequiresImaging(x)))", "all x.((MedicalDiagnosis(x) & RequiresLabTests(x)) | RequiresImaging(x))", "all x.((MedicalDiagnosis(x) & RequiresLabTests(x) & RequiresImaging(x)) -> Requires(x))", "all x.((MedicalDiagnosis(x) & (LabTests(x) | Imaging(x))) -> Requires(x))", "all x.((RequiresMedicalDiagnosis(x) & (LabTest(x) | Imaging(x))) -> RequiresMedicalDiagnosis(x))", "all x.((MedicalDiagnosis(x) & RequiresLabTests(x) & RequiresImaging(x)) -> Required(x))", "all x.(RequiresMedicalDiagnosis(x) -> (RequiresLabTests(x) | RequiresImaging(x)))", "all x.((RequiresMedicalDiagnosis(x) & (LabTests(x) | Imaging(x))) -> RequiresDiagnosis(x))", "all x.((MedicalDiagnosis(x) & RequiresLabTests(x) & RequiresImaging(x)) -> RequiresLabTests(x))", "all x.((RequiresMedicalDiagnosis(x) & (LabTests(x) | Imaging(x))) -> Required(x))", "all x.((MedicalDiagnosis(x) & (LabTests(x) | Imaging(x))) -> RequiresDiagnosis(x))"]}
{"id": "folio_train_1687", "nl": "All rare diseases require a medical diagnosis.", "fol": "all x.(IsRareDisease(x) -> RequiresMedicalDiagnosis(x))", "prediction": ["all x.(RareDisease(x) -> RequiresMedicalDiagnosis(x))", "all x y.((RareDisease(x) & MedicalDiagnosis(y)) -> Requires(x,y))", "all x.((RareDisease(x) & RequiresMedicalDiagnosis(x)) -> RequiresMedicalDiagnosis(x))", "all x.(RareDisease(x) -> RequiresMedicalDiagnosis(x))", "all x.((RareDisease(x) & RequiresMedicalDiagnosis(x)) -> RareDisease(x))", "all x.(RareDiagnosis(x) -> RequiresMedicalDiagnosis(x))", "all x y.((RareDisease(x) & Disease(y)) -> RequiresMedicalDiagnosis(x,y))", "all x.(RareDisease(x) -> RequiresMedicalDisease(x))", "all x.((RareDisease(x) & RequiresMedicalDiagnosis(x)) -> RareDiseaseRequiresMedicalDiagnosis(x))", "all x.(RareDisease(x) -> MedicalDiagnosis(x))", "all x.(RareDisease(x) -> NeedsMedicalDiagnosis(x))", "all x y.((RareDisease(x) & Disease(y)) -> RequiresMedicalDiagnosis(x))", "all x.(RequiresMedicalDiagnosis(x) -> RareDisease(x))", "all x.((RareDisease(x) & RequiresMedicalDiagnosis(x)) -> RequiresDiagnosis(x))", "all x.((RareDisease(x) & MedicalDiagnosis(x)) -> Requires(x))", "all x.(RareDisease(x) -> RequiresMedicalDiagnosis(x))"]}
{"id": "folio_train_1688", "nl": "If something is mild, then no lab tests or imaging is required. ", "fol": "all x.(IsMild(x) -> -RequiresLabTestsOrImaging(x))", "prediction": ["all x.(Mild(x) -> (NoLabTests(x) | NoImaging(x)))", "all x.(Mild(x) -> (-LaborTests(x) | Imaging(x)))", "all x.((Mild(x)) -> (NoLabTests(x) | NoImaging(x)))", "all x.((Mild(x) & -LabTests(x) & -Imagery(x)) -> -Required(x))", "all x.((Mild(x) & -LabTests(x) & -Imaging(x)) -> -Required(x))", "all x.((Mild(x)) -> (-LaborTests(x) | Imaging(x)))", "all x.(Mild(x) -> (-LabTests(x) | Imaging(x)))", "all x.(Mild(x) -> (NoLabTests(x) | NoImagery(x)))", "all x.((Mild(x) & NoLabTests(x) & NoImaging(x)) -> -Required(x))", "all x.((Mild(x) & -LabTests(x) & -ImageryRequired(x)) -> -Mild(x))", "all x.((Mild(x) & -LabTests(x) & -Imagery(x)) -> -Mild(x))", "all x.((Mild(x) & -LabTests(x) | Imaging(x))) -> -Required(x))", "all x.((Mild(x) & -LabTests(x) & -Imaging(x)) -> -Mild(x))", "all x.((Mild(x) & NoLabTests(x) & NoImaging(x)) -> -Mild(x))", "all x.(Mild(x) -> -(LabTests(x) | Imaging(x)))", "all x.((Mild(x) & -LabTests(x) & -Imagery(x)) -> -Requires(x))"]}
{"id": "folio_train_1689", "nl": "All blood cancers are rare diseases.", "fol": "all x.(IsBloodCancer(x) -> IsRareDisease(x))", "prediction": ["all x.(BloodCancer(x) -> RareDisease(x))", "all x.(BloodCancerous(x) -> RareDisease(x))", "all x.((BloodCancer(x) & RareDisease(x)) -> RareDisease(x))", "all x.((BloodCancer(x) & RareDisease(x)) -> Rare(x))", "all x.(BloodCancer(x) -> RareDisease(x))", "all x.((BloodCancer(x) & RareDisease(x)) -> BloodCancer(x))", "all x y.((BloodCancer(x) & RareDisease(y)) -> RareDisease(x))", "all x y.((BloodCancer(x) & RareDisease(y)) -> Rare(x))", "all x y.((BloodCancer(x) & RareDisease(y)) -> RareDisease(x,y))", "all x.(BloodCancer(x) -> Rare(x))", "all x.((BloodCancerous(x) & RareDisease(x)) -> RareDisease(x))", "all x.((BloodCancerous(x) & RareDisease(x)) -> Rare(x))", "all x y.((BloodCancer(x) & RareDisease(y)) -> Rare(x,y))", "all x.(BloodCarcinoma(x) -> RareDisease(x))", "all x.(BlueCancer(x) -> RareDisease(x))", "all x y.((BloodCancer(x) & RareDisease(y)) -> BloodCancer(x))"]}
{"id": "folio_train_1690", "nl": "All Leukemia is blood cancer. ", "fol": "all x.(IsLeukemia(x) -> IsBloodCancer(x))", "prediction": ["all x.(Leukemia(x) -> BloodCancer(x))", "all x.(Leukemia(x) -> BloodCancerous(x))", "all x.(Leukemia(x) -> BloodCancer(x))", "all x.(Leukemia(x) -> BloodCancel(x))", "all x y.((Leukemia(x) & BloodCancer(y)) -> BloodCancer(x))", "All x.(Leukemia(x) -> BloodCancer(x))", "all x y.((Leukemia(x) & BloodCancer(y)) -> BloodCancer(x,y))", "all x y.((Leukemia(x) & BloodCancer(y)) -> Leukemia(x))", "all x.(Leukemia(x) -> BloodCancerous(x))", "all x.(Leukemia(x) -> (BloodCancer(x) & BloodCancer(x)))", "(all x.(Leukemia(x) -> BloodCancer(x))", "all x y.((Leukemia(x) & BloodCancer(y)) -> BloodCancerous(x))", "all x y.((Leukemia(x) & BloodCancerous(y)) -> Leukemia(x))", "(all x.(Leukemia(x) -> BloodCancer(x)))", "all x y.((Leukemia(x) & BloodCancerous(y)) -> BloodCancer(x))", "all x y.((Leukemia(x) & BloodCancer(y)) -> BloodCancel(x,y))"]}
{"id": "folio_train_1691", "nl": "If bladder cancer is either both blood cancer and Leukemia or neither blood cancer nor Leukemia, then bladder cancer is Leukemia.", "fol": "(-((IsBloodCancer(BladderCancer) & -IsLeukemia(BladderCancer)) | (-IsBloodCancer(BladderCancer) & IsLeukemia(BladderCancer))) -> IsLeukemia(BladderCancer))", "prediction": ["all x.((BloodCancer(x) & ((BloodCancer(x) & Leukemia(x)) | -BloodCancer(x) & Leukemia(x))) -> Leukemia(x))", "all x.((B bladderCancer(x) & ((BloodCancer(x) & Leukemia(x)) | -BloodCancer(x) & Leukemia(x))) -> Leukemia(x))", "all x.((BloodCancer(x) & ((BloodCancer(x) & Leukemia(x)) | (-BloodCancer(x) & Leukemia(x)))) -> Leukemia(x))", "all x.((B bladderCancer(x) & (BloodCancer(x) | Leukemia(x) | -BloodCancer(x) | Leukemia(x))) -> Leukemia(x))", "all x.((B bladderCancer(x) & ((BloodCancer(x) & Leukemia(x)) | (-BloodCancer(x) & Leukemia(x))))) -> Leukemia(x))", "all x.((BloodCancer(x) & (BloodCancer(x) | Leukemia(x) | -BloodCancer(x) | Leukemia(x))) -> Leukemia(x))", "all x.((BloodCancer(x) & ((BloodCancer(x) & Leukemia(x)) | (-BloodCancer(x) & Leukemia(x))))) -> Leukemia(x))", "all x.((B bladderCancer(x) & ((BloodCancer(x) & Leukemia(x)) | (-BloodCancer(x) & Leukemia(x)))) -> Leukemia(x))", "all x.((BloodCancer(x) & (BloodCancer(x) | Leukemia(x))) -> Leukemia(x))", "all x.((BodyCancer(x) & ((BloodCancer(x) & Leukemia(x)) | -BloodCancer(x) & Leukemia(x))) -> Leukemia(x))", "all x.((BloodCancer(x) & (BloodCancer(x) | Leukemia(x)) & -(BloodCancer(x) | Leukemia(x)))) -> Leukemia(x))", "all x.((B bladderCancer(x) & (BloodCancer(x) | Leukemia(x)) | -BloodCancer(x) | Leukemia(x))) -> Leukemia(x))", "all x.((BloodCancer(x) & (BloodCancer(x) | Leukemia(x)) | -BloodCancer(x) | Leukemia(x))) -> Leukemia(x))", "all x.((B bladderCancer(x) & (BloodCancer(x) | Leukemia(x))) -> Leukemia(x))", "all x.((BloodCancer(x) & (BloodCancer(x) | Leukemia(x))) | (-BloodCancer(x) & Leukemia(x))))", "all x.((BloodCancer(x) & (BloodCancer(x) | Leukemia(x))) | -(BloodCancer(x) & Leukemia(x)))) -> Leukemia(x))"]}
{"id": "folio_train_1692", "nl": "Bladder cancer is mild.", "fol": "IsMild(BladderCancer)", "prediction": ["all x.(BladderCancer(x) -> Mild(x))", "all x.(BloodderCancer(x) -> Mild(x))", "all x.(BladderCancerous(x) -> Mild(x))", "all x.(BloodderCancerous(x) -> Mild(x))", "all x.(BloodyCancer(x) -> Mild(x))", "all x.(BladeCancerous(x) -> Mild(x))", "all x.(BladderCancel(x) -> Mild(x))", "all x.(BladeCancer(x) -> Mild(x))", "all x.(BladderCancer(x) -> Mild(x))", "all x.(BallardCancer(x) -> Mild(x))", "all x.(BladeCancel(x) -> Mild(x))", "All x.(BladderCancer(x) -> Mild(x))", "all x.(BladderCancell(x) -> Mild(x))", "all x.(BlawderCancer(x) -> Mild(x))", "all x y.((BladderCancer(x) & Mild(y)) -> Is(x,y))", "all x y.((BladderCancer(x) & Mild(y)) -> Cancer(x,y))"]}
{"id": "folio_train_1693", "nl": "Bladder cancer is Leukemia.", "fol": "IsLeukemia(BladderCancer)", "prediction": ["all x.(BladderCancer(x) -> Leukemia(x))", "all x.(BloodderCancer(x) -> Leukemia(x))", "all x.(BloodderCancerous(x) -> Leukemia(x))", "all x.(BladderCancerous(x) -> Leukemia(x))", "All x.(BladderCancer(x) -> Leukemia(x))", "all x.(BladeCancer(x) -> Leukemia(x))", "All x.(BloodderCancer(x) -> Leukemia(x))", "all x.(BloodyCancer(x) -> Leukemia(x))", "all x.(BladderCancel(x) -> Leukemia(x))", "all x y.((BladderCancer(x) & Leukemia(y)) -> Cancer(x,y))", "all x.(BladeCancel(x) -> Leukemia(x))", "all x.(BladeCancerous(x) -> Leukemia(x))", "all x y.((BladderCancer(x) & Leukemia(y)) -> Leukemia(x))", "All x.(BloodderCancerous(x) -> Leukemia(x))", "all x.(BladderCancer(x) -> Leukemia(x))", "all x y.((BladderCancer(x) & Leukemia(y)) -> Is(x,y))"]}
{"id": "folio_train_1694", "nl": "Bladder cancer is either a rare disease or mild.", "fol": "(IsRareDisease(BladderCancer) | IsMild(BladderCancer))", "prediction": ["all x.(BladderCancer(x) -> (RareDisease(x) | MildDisease(x)))", "all x.(BladderCancer(x) -> (Rare(x) | Mild(x)))", "all x.(BladderCancer(x) -> (RareDisease(x) | Mild(x)))", "all x.(BloodderCancer(x) -> (RareDisease(x) | MildDisease(x)))", "all x.(BloodderCancer(x) -> (RareDisease(x) | Mild(x)))", "all x.(BloodderCancer(x) -> (Rare(x) | Mild(x)))", "all x.(BladderCancer(x) -> (RareDisease(x) | MildDisease(x)))", "all x.(BladderCancerous(x) -> (RareDisease(x) | MildDisease(x)))", "all x.(BloodderCancerous(x) -> (RareDisease(x) | MildDisease(x)))", "all x.(BladderCancer(x) -> (RareDisease(x) | Mild(x)))", "all x.(BladeCancer(x) -> (RareDisease(x) | MildDisease(x)))", "all x.(BladderCancerous(x) -> (Rare(x) | Mild(x)))", "all x.(BloodderCancer(x) -> (RareDisease(x) | MildDisease(x)))", "all x.(BloodderCancerous(x) -> (Rare(x) | Mild(x)))", "all x.(BladderCancer(x) -> (Rare(x) | Mild(x)))", "all x.(BladderCancerous(x) -> (RareDisease(x) | Mild(x)))"]}
{"id": "folio_train_1695", "nl": "No precious metals aren't scarce.", "fol": "all x.(IsPreciousMetal(x) -> -IsScarce(x))", "prediction": ["-exists x.(PreciousMetal(x) & -Sharp(x))", "-exists x.(PreciousMetal(x) & -Scarce(x))", "-exists x.(PreciousMetal(x) & Rare(x))", "all x.(PreciousMetal(x) -> -Scarce(x))", "all x.(PreciousMetal(x) -> -Sharp(x))", "-exists x.(PreciousMetal(x) & -Sizable(x))", "-exists x.(PreciousMetal(x) & -Scure(x))", "-exists x.(PreciousMetal(x) & -Sharable(x))", "(-exists x.(PreciousMetal(x) & Rare(x)))", "-exists x.(PreciousMetal(x) & -Difficult(x))", "-exists x.(PreciousMetal(x) & -Spare(x))", "-exists x.(PreciousMetal(x) & -Silent(x))", "-exists x.(PreciousMetal(x) & -IsScarce(x))", "-exists x.(PreciousMetal(x) & -Short(x))", "-exists x.(PreciousMetal(x) & -IsSharp(x))", "all x.(PreciousMetal(x) -> Rare(x))"]}
{"id": "folio_train_1696", "nl": "All non-rare earth metals are not scarce.", "fol": "all x.(IsNonRareEarthMetal(x) -> IsScarce(x))", "prediction": ["all x.(NonRareEarthMetal(x) -> -Sharp(x))", "all x.(NonRareEarthMetal(x) -> -Scarce(x))", "all x.((NonRareEarthMetal(x) & -Sharp(x)) -> -Sharp(x))", "all x.((NonRareEarthMetal(x) & -Sharp(x)) -> -Scarce(x))", "all x.((NonRareEarthMetal(x) & -Scarce(x)) -> -Sharp(x))", "all x.((NonRareEarthMetal(x) & -Scarce(x)) -> -Scarce(x))", "all x.((NonRareEarthMetal(x) & -Sharp(x)) -> -Sharable(x))", "all x.((NonRareEarthMetal(x) & -Sharp(x)) -> -RareMetal(x))", "all x.((NonRareEarthMetal(x) & -Sharp(x)) -> -RareEarthMetal(x))", "all x.((NonRareEarthMetal(x) & -Sharp(x)) -> -Sharing(x))", "all x.((NonRareEarthMetal(x) & -Sharp(x)) -> -Difficult(x))", "all x.((NonRareEarthMetal(x) & -Sharp(x)) -> -Liquid(x))", "all x.((NonRareEarthMetal(x) & -Sharp(x)) -> -IsSharp(x))", "all x.((NonRareEarthMetal(x) & -Sharp(x)) -> -Bird(x))", "all x.((NonRareEarthMetal(x) & -Scarce(x)) -> -Sharing(x))", "all x.((NonRareEarth(x) & -Sharp(x)) -> -Sharp(x))"]}
{"id": "folio_train_1697", "nl": "Either non-rare earth metals or rare earth metals. ", "fol": "all x.(IsNonRareEarthMetal(x) | IsRareEarthMetal(x))", "prediction": ["all x.((NonRareEarthMetal(x) | RareEarthMetal(x)) -> (NonRareEarthMetal(x) | RareEarthMetal(x)))", "((NonRareEarthMetal(x) | RareEarthMetal(x)))", "all x.((NonRareEarthMetal(x) | RareEarthMetal(x)) -> (-RareEarthMetal(x) | RareEarthMetal(x)))", "(NonRareEarthMetal(x) | RareEarthMetal(x))", "exists x.(NonRareEarthMetal(x) | RareEarthMetal(x))", "all x.((NonRareEarthMetal(x) | RareEarthMetal(x)) -> ((NonRareEarthMetal(x) & RareEarthMetal(x))))", "all x y.((NonRareEarthMetal(x) | RareEarthMetal(y)) -> (NonRareEarthMetal(x) | RareEarthMetal(y)))", "all x.((NonRareEarthMetal(x) | RareEarthMetal(x)) -> (-NonRareEarthMetal(x) | RareEarthMetal(x)))", "all x.(NonRareEarthMetal(x) | RareEarthMetal(x))", "all x.((NonRareEarthMetal(x) | RareEarthMetal(x)) -> ((NonRareEarthMetal(x) | RareEarthMetal(x))))", "all x.((NonRareEarthMetal(x) | RareEarthMetal(x)) -> (RareEarthMetal(x)))", "all x.((NonRareEarthMetal(x) | RareEarthMetal(x)) -> RareEarthMetal(x))", "all x.((NonRareEarthMetal(x) | RareEarthMetal(x)) -> -RareEarthMetal(x))", "all x.((NonRareEarthMetal(x) | RareEarthMetal(x)) -> (NonRareEarthMetal(x) & RareEarthMetal(x)))", "all x y.((NonRareEarthMetal(x) | RareEarthMetal(y)) -> (NonRareEarthMetal(x) | RareEarthMetal(x)))", "all x.((NonRareEarthMetal(x) | RareEarthMetal(x)) -> (-rareEarthMetal(x) | RareEarthMetal(x)))"]}
{"id": "folio_train_1698", "nl": "All rare earth metals can be used for batteries.", "fol": "all x.(IsRareEarthMetal(x) -> CanBeUsedForBatteries(x))", "prediction": ["all x.(RareEarthMetal(x) -> CanBeUsedForBatteries(x))", "all x.(RareEarthMetal(x) -> UsedForBatteries(x))", "all x y.((RareEarthMetal(x) & Battery(y)) -> CanBeUsedFor(x,y))", "all x.((RareEarthMetal(x) & CanBeUsedForBatteries(x)) -> CanBeUsedForBatteries(x))", "all x.((RareEarthMetal(x) & UsedForBatteries(x)) -> CanBeUsedForBatteries(x))", "all x y.((RareEarthMetal(x) & Batteries(y)) -> CanBeUsedFor(x,y))", "all x.(RareEarthMetal(x) -> CanBeUsedForBattery(x))", "all x y.((RareEarthMetal(x) & Battery(y)) -> CanBeUsed(x,y))", "all x.(RareEarth(x) -> CanBeUsedForBatteries(x))", "all x.(RareEarthMetall(x) -> CanBeUsedForBatteries(x))", "all x.(RareEarthMetallic(x) -> CanBeUsedForBatteries(x))", "all x.(RareEarthMetal(x) -> (CanBeUsedForBatteries(x)))", "all x.(RearEarthMetal(x) -> CanBeUsedForBatteries(x))", "all x y.((RareEarthMetal(x) & Battery(y)) -> UsedFor(x,y))", "all x.(RareEarthMetal(x) -> CanBeUsedFor(x,batteries))", "all x.((RareEarthMetal(x) & UsedForBatteries(x)) -> CanBeUsedFor(x,Batteries))"]}
{"id": "folio_train_1699", "nl": "All rare earth metals are essential for electric vehicles.", "fol": "all x.(IsRareEarthMetal(x) -> IsEssentialForElectricVehicles(x))", "prediction": ["all x.(RareEarthMetal(x) -> EssentialForElectricVehicles(x))", "all x y.((RareEarthMetal(x) & ElectricVehicle(y)) -> EssentialFor(x,y))", "all x.(RareEarthMetal(x) -> EssentialForElectricVehicle(x))", "all x.((RareEarthMetal(x) & EssentialForElectricVehicles(x)) -> EssentialForElectricVehicles(x))", "all x.(RareEarthMetall(x) -> EssentialForElectricVehicles(x))", "all x.(RareEarthMetallic(x) -> EssentialForElectricVehicles(x))", "all x.(RareEarthMetal(x) -> EssentialForElectricVehicles(x))", "all x.(RareEarth(x) -> EssentialForElectricVehicles(x))", "all x y.((RareEarthMetal(x) & ElectricVehicle(y)) -> Essential(x,y))", "all x.(RareEarthMetal(x) -> EssentialForElectricVehicles(x))", "all x.(RareEarthMetal(x) -> EssentialToElectricVehicles(x))", "all x.(RareEarthMetal(x) -> EssentialForEnergyVehicles(x))", "all x y.((RareEarthMetal(x) & ElectricVehicle(y) & EssentialFor(x,y)) -> EssentialFor(x,y))", "all x.((RareEarthMetal(x) & ElectricVehicle(x)) -> EssentialFor(x,ElectricVehicle))", "all x.(RareEarthMetal(x) -> EssentialForElectricVehicles(x))", "all x.(RedEarthMetal(x) -> EssentialForElectricVehicles(x))"]}
{"id": "folio_train_1700", "nl": "Lithium is neither a non-rare earth metal nor essential for electric vehicles.", "fol": "(-IsNonRareEarthMetal(Lithium) & -IsEssentialForElectricVehicles(Lithium))", "prediction": ["all x.(Lithium(x) -> (-NonRareEarthMetal(x) & -EssentialForElectricVehicles(x)))", "all x.(Litium(x) -> (-NonRareEarthMetal(x) & -EssentialForElectricVehicles(x)))", "all x.(Lithium(x) -> (NonRareEarthMetal(x) & -EssentialForElectricVehicles(x)))", "all x.(Lithium(x) -> (-NonRareEarthMetal(x) & -EssentialForElectricVehicles(x)))", "all x.(Lithium(x) -> (-(NonRareEarthMetal(x) & -EssentialForElectricVehicles(x)) & -(NonRareEarthMetal(x) & -EssentialForElectricVehicles(x))))", "all x.(Lithium(x) -> (-NonNonRareEarthMetal(x) & -EssentialForElectricVehicles(x)))", "all x.(Litium(x) -> (NonRareEarthMetal(x) & -EssentialForElectricVehicles(x)))", "all x.(Lithium(x) -> (-(NonRareEarthMetal(x) & -EssentialForElectricVehicles(x)) | -(NonRareEarthMetal(x) & EssentialForElectricVehicles(x))))", "all x.(Lithium(x) -> (-(NonRareEarthMetal(x) & -EssentialForElectricVehicles(x)) & -(NonRareEarthMetal(x) & EssentialForElectricVehicles(x))))", "all x.(Lithium(x) -> (NonNonRareEarthMetal(x) & -EssentialForElectricVehicles(x)))", "all x.(Lithium(x) -> (-(NonRareEarthMetal(x) & -EssentialForElectricVehicles(x)) | (-NonRareEarthMetal(x) & EssentialForElectricVehicles(x))))", "all x.(Lithium(x) -> -(NonRareEarthMetal(x) & -EssentialForElectricVehicles(x)))", "all x.(Lithium(x) -> (NonRareEarthMetal(x) & -EssentialForElectricVehicles(x)))", "all x.(Lithium(x) -> (-(NonRareEarthMetal(x) & -EssentialForElectricVehicles(x)) | (-NonRareEarthMetal(x) & EssentialForElectricVehicles(x)))))", "all x.(Lithium(x) -> (-(NonRareEarthMetal(x) & -EssentialForElectricVehicles(x)) & -(NonRareEarthMetal(x) & -ElectricVehicles(x))))", "all x.(Lithium(x) -> (-(NonRareEarthMetal(x) & -EssentialForElectricVehicles(x)) | (-(NonRareEarthMetal(x) & EssentialForElectricVehicles(x)))))"]}
{"id": "folio_train_1701", "nl": "Lithium is a rare earth metal.", "fol": "IsRareEarthMetal(Lithium)", "prediction": ["all x.(Lithium(x) -> RareEarthMetal(x))", "all x.(Litium(x) -> RareEarthMetal(x))", "all x.(Lithium(x) -> RareEarthMetal(x))", "all x.((Lithium(x) & RareEarthMetal(x)) -> RareEarthMetal(x))", "all x y.((Lithium(x) & RareEarthMetal(y)) -> RareEarthMetal(x))", "all x y.((Lithium(x) & RareEarthMetal(y)) -> RareEarthMetal(x,y))", "(RareEarthMetal(Lithium) & RareEarthMetal(Lithium))", "all x.(Litium(x) -> RareEarthMetal(x))", "(RareEarthMetal(lithium) & RareEarthMetal(lithium))", "all x.((Litium(x) & RareEarthMetal(x)) -> RareEarthMetal(x))", "all x y.((Litium(x) & RareEarthMetal(y)) -> RareEarthMetal(x,y))", "all x y.((Litium(x) & RareEarthMetal(y)) -> RareEarthMetal(x))", "exists x.(Lithium(x) & RareEarthMetal(x))", "(RareEarthMetal(Lithium) -> RareEarthMetal(Lithium))", "(RareEarthMetal(lithium) & RareEarthMetal(lithium))", "all x.(Lithium(x) -> RareEarthMetallic(x))"]}
{"id": "folio_train_1702", "nl": "Lithium is a precious metal and is used for batteries.", "fol": "(IsPreciousMetal(Lithium) & CanBeUsedForBatteries(Lithium))", "prediction": ["all x.(Lithium(x) -> (PreciousMetal(x) & UsedForBatteries(x)))", "all x.(Lithium(x) -> (PreciousMetal(x) & UsedForBatteries(x)))", "all x.(Litium(x) -> (PreciousMetal(x) & UsedForBatteries(x)))", "all x.((Lithium(x) & PreciousMetal(x) & UsedForBatteries(x)) -> UsedForBatteries(x))", "all x y.((Lithium(x) & Battery(y)) -> (PreciousMetal(x) & UsedFor(x,y)))", "all x.((Lithium(x) & PreciousMetal(x) & UsedForBatteries(x)) -> PreciousMetal(x))", "all x.(Lithium(x) -> (PreciousMetal(x) & UsedForBattery(x)))", "all x.(Litium(x) -> (PreciousMetal(x) & UsedForBatteries(x)))", "all x.((Lithium(x) & PreciousMetal(x) & UsedForBatteries(x)) -> Lithium(x))", "all x y.((Lithium(x) & PreciousMetal(x) & Battery(y)) -> UsedFor(x,y))", "all x.((Lithium(x) & PreciousMetal(x)) -> UsedForBatteries(x))", "all x.(Lithium(x) -> (PreciousMetal(x) & UsedFor(x,Batteries)))", "all x.(Lithium(x) -> (PrettyMetal(x) & UsedForBatteries(x)))", "all x.(Lithium(x) -> (PreciousMetal(x) & UsesForBatteries(x)))", "all x y.((Lithium(x) & PreciousMetal(y)) -> UsedForBatteries(x,y))", "all x.(Literium(x) -> (PreciousMetal(x) & UsedForBatteries(x)))"]}
{"id": "folio_train_1703", "nl": "If Lithium is not essential for electric vehicles or a precious metal, then Lithium is not a non-rare earth metal or usable for batteries.", "fol": "(((-IsEssentialForElectricVehicles(Lithium) | IsPreciousMetal(Lithium)) -> -IsNonRareEarthMetal(Lithium)) | CanBeUsedForBatteries(Lithium))", "prediction": ["all x.((Lithium(x) & -EssentialForElectricVehicles(x) & -PreciousMetal(x)) -> (-NonRareEarthMetal(x) & -UsableForBatteries(x)))", "all x.((Lithium(x) & -EssentialForElectricVehicles(x) & -PreciousMetal(x)) -> -NonRareEarthMetal(x) & -UsableForBatteries(x))", "all x.((Lithium(x) & -(EssentialForElectricVehicles(x) | PreciousMetal(x))) -> (-NonRareEarthMetal(x) & -UsableForBatteries(x)))", "all x.((Lithium(x) & -(EssentialForElectricVehicles(x) | PreciousMetal(x))) -> -NonRareEarthMetal(x) & -UsableForBatteries(x)))", "all x.((Litium(x) & -EssentialForElectricVehicles(x) & -PreciousMetal(x)) -> (-NonRareEarthMetal(x) & -UsableForBatteries(x)))", "all x.((Litium(x) & -EssentialForElectricVehicles(x) & -PreciousMetal(x)) -> -NonRareEarthMetal(x) & -UsableForBatteries(x))", "all x.((Lithium(x) & -EssentialForElectricVehicles(x) & -PreciousMetal(x)) -> -(NonRareEarthMetal(x) | UsableForBatteries(x)))", "all x.((Lithium(x) & -EssentialForElectricVehicles(x) | PreciousMetal(x)) -> -NonRareEarthMetal(x) & -UsableForBatteries(x))", "all x.((Lithium(x) & -EssentialForElectricVehicles(x) & -PreciousMetal(x)) -> (-NonRareEarthMetallic(x) & -UsableForBatteries(x)))", "all x.((Lithium(x) & -EssentialForElectricVehicles(x) | PreciousMetal(x)) -> (-NonRareEarthMetal(x) & -UsableForBatteries(x)))", "all x.((Lithium(x) & (-EssentialForElectricVehicles(x) | PreciousMetal(x))) -> -NonRareEarthMetal(x) & -UsableForBatteries(x))", "all x.((Lithium(x) & (-EssentialForElectricVehicles(x) | PreciousMetal(x))) -> (-NonRareEarthMetal(x) & -UsableForBatteries(x)))", "all x.((Lithium(x) & -(EssentialForElectricVehicles(x) | PreciousMetal(x))) -> -(NonRareEarthMetal(x) | UsableForBatteries(x)))", "all x.((Lithium(x) & -EssentialForElectricVehicles(x) & -PreciousMetal(x)) -> -NonRareEarthMetallic(x) & -UsableForBatteries(x))", "all x.((Lithium(x) & -EssentialForElectricVehicles(x) & -PreciousMetal(x)) -> (-NonRareEarthMetal(x) | UsableForBatteries(x)))", "all x.((Lithium(x) & -EssentialForElectricVehicles(x) & -PreciousMetal(x)) -> (-NonRareEarthMetal(x) & -UsedForBatteries(x)))"]}
{"id": "folio_train_1704", "nl": "If people own at least one pet, then they do not have tidy houses.", "fol": "all x.(OwnAtLeastOnePet(x) -> -HasTidyHouse(x))", "prediction": ["all x.(OwnsAtLeastOnePet(x) -> -TidyHouses(x))", "all x.((Person(x) & OwnsPet(x)) -> -TidyHouse(x))", "all x.((Person(x) & OwnsPet(x)) -> -TidyHouses(x))", "all x.(OwnsPet(x) -> -TidyHouses(x))", "all x.((Person(x) & OwnsAtLeastOnePet(x)) -> -TidyHouses(x))", "all x.((Person(x) & OwnsAtLeastOnePet(x)) -> -TidyHouse(x))", "all x.((Person(x) & OwnsOnePet(x)) -> -TidyHouses(x))", "all x.((Person(x) & OwnsOnePet(x)) -> -TidyHouse(x))", "all x.(OwnsAtLeastOnePet(x) -> -HasTidyHouses(x))", "all x.(OwnsAtLeastOnePet(x) -> -TidyHouse(x))", "all x.(OwnsOnePet(x) -> -TidyHouses(x))", "all x.((OwnsPet(x) & HasPet(x)) -> -TidyHouses(x))", "all x.(Owns(x,y) -> -TidyHouses(x))", "all x.((OwnsAtLeastOnePet(x)) -> -TidyHouses(x))", "all x.((Owns(x,y) & Pet(y)) -> -TidyHouses(x))", "all x.((Owns(x,y) & Pet(y)) -> -TidyHouse(x))"]}
{"id": "folio_train_1705", "nl": "If people grew up with childhood pets, then they own at least one pet.", "fol": "all x.(GrewUpWithChildhoodPets(x) -> OwnAtLeastOnePet(x))", "prediction": ["all x.((People(x) & GrownUpWithChildrenPets(x)) -> OwnsAtLeastOnePet(x))", "all x.((Person(x) & GrownUpWithChildrenPets(x)) -> OwnsAtLeastOnePet(x))", "all x.((Person(x) & GrownUpWithChildrenPets(x)) -> OwnsPet(x))", "all x.((Person(x) & GrownUpWithChildren(x)) -> OwnsAtLeastOnePet(x))", "all x.((Person(x) & GrownUpWithChildrenPet(x)) -> OwnsAtLeastOnePet(x))", "all x.((People(x) & GrownUpWithChildren(x)) -> OwnsAtLeastOnePet(x))", "all x.((Person(x) & grewUpWithChildrenPets(x)) -> OwnsAtLeastOnePet(x))", "all x.((Person(x) & GrowingUpWithChildrenPets(x)) -> OwnsAtLeastOnePet(x))", "all x.((People(x) & GrownUpWithChildrenPets(x)) -> OwnsPet(x))", "all x.((People(x) & grewUpWithChildrenPets(x)) -> OwnsAtLeastOnePet(x))", "all x.((People(x) & GrowingUpWithChildrenPets(x)) -> OwnsAtLeastOnePet(x))", "all x.((Person(x) & GrownUpWithChildrenPet(x)) -> OwnsPet(x))", "all x.((Person(x) & GrownUpWithChildren(x)) -> OwnsPet(x))", "all x.((Person(x) & grewUpWithChildrenPets(x)) -> OwnsPet(x))", "all x.((Person(x) & GrowingUpWithChildrenPets(x)) -> OwnsPet(x))", "all x.((Person(x) & GrownUpWithChildrenPets(x)) -> Owns(x,y))"]}
{"id": "folio_train_1706", "nl": "If people hire a maid or cleaning service, then they have tidy houses.", "fol": "all x.(HiredCleaningService(x) -> HasTidyHouse(x))", "prediction": ["all x.((HuntsMaid(x) | HiresCleaningService(x)) -> HasTidyHouses(x))", "all x.((HiresMaid(x) | HiresCleaningService(x)) -> HasTidyHouses(x))", "all x.((HuntsMaid(x) | HiresCleaningService(x)) -> TidyHouses(x))", "all x.((HoldsMaid(x) | HiresCleaningService(x)) -> HasTidyHouses(x))", "all x.((HuntsMaid(x) | HiresCleaningService(x)) -> CleanHouses(x))", "all x.((HuntsMaid(x) | HiresCleaningService(x)) -> TidyHouses(x))", "all x.((HasMaid(x) | HasCleaningService(x)) -> HasTidyHouses(x))", "all x.((HiresMaid(x) | HiresCleaningService(x)) -> TidyHouses(x))", "all x.(HuntsMaidOrCleaningService(x) -> TidyHouses(x))", "all x.((HiresMaid(x) | HiresCleaningService(x)) -> CleanHouses(x))", "all x.(HiresMaidOrCleaningService(x) -> TidyHouses(x))", "all x.(HasMaidOrCleaningService(x) -> HasTidyHouses(x))", "all x.(HiresMaidOrCleaningService(x) -> HasTidyHouses(x))", "all x.(HasMaidOrCleaningService(x) -> TidyHouses(x))", "all x.(HuntsMaidOrCleaningService(x) -> CleanHouses(x))", "all x y.((HuntsMaid(x) | HiresCleaningService(x)) -> HasTidyHouses(y))"]}
{"id": "folio_train_1707", "nl": "If people live in the suburbs, then they have tidy houses.", "fol": "all x.(LivesInSuburbs(x) -> GrewUpWithChildhoodPets(x))", "prediction": ["all x.(LivesInSuburbs(x) -> HasTidyHouses(x))", "all x.((Person(x) & LivesInSuburbs(x)) -> HasTidyHouses(x))", "all x.((People(x) & LivesInSuburbs(x)) -> HasTidyHouses(x))", "all x.((LivesInSuburbs(x) & HasTidyHouses(x)) -> HasTidyHouses(x))", "all x y.((Person(x) & Suburb(y) & LivesIn(x,y)) -> HasTidyHouses(x))", "all x.((Person(x) & LivesInSuburbs(x)) -> CleanHouses(x))", "all x.((Person(x) & LivesInSurroundings(x)) -> HasTidyHouses(x))", "all x y.((Person(x) & Suburb(y)) -> HasTidyHouses(x,y))", "all x.((Person(x) & LivesInSuburbs(x)) -> TidyHouses(x))", "all x.((LivesInSuburbs(x) & HasTidyHouses(x)) -> CleanHouses(x))", "all x.((Person(x) & LivesInSuburbs(x)) -> TidyHouses(x))", "all x.(LivesInSurroundings(x) -> HasTidyHouses(x))", "all x y.((Person(x) & LivesInSuburbs(x)) -> HasTidyHouses(x))", "all x.((LivesInSuburbs(x)) -> HasTidyHouses(x))", "all x.(LivesInDepartments(x) -> HasTidyHouses(x))", "all x y.((Person(x) & LivesInSuburbs(x)) -> HasTidyHouses(x,y))"]}
{"id": "folio_train_1708", "nl": "Jack either does not hire a maid or cleaning service or, if he does, then he does not own at least one pet.", "fol": "-((HiredCleaningService(Jack) & -OwnAtLeastOnePet(Jack)) | (-HiredCleaningService(Jack) & OwnAtLeastOnePet(Jack)))", "prediction": ["all x.((Jack(x) & (-HasMaid(x) | HasCleaningService(x))) | (-HasPet(x) & OwnsPet(x))))", "all x.((Jack(x) & (-HuntsMaid(x) | -HuntsCleaningService(x))) -> -OwnsPet(x))", "all x.((Jack(x) & -HasMaidOrCleaningService(x)) | (-HasPet(x) & OwnsPet(x))))", "all x.((Jack(x) & (-HasMaid(x) | HasCleaningService(x))) | (-HasPet(x) & HasPet(x))))", "all x.((Jack(x) & -HuntsMaidOrCleaningService(x)) | (-HuntsMaidOrCleaningService(x))))", "all x.((Jack(x) & -HasMaid(x) & -HasCleaningService(x)) | (-HasPet(x) & OwnsPet(x))))", "all x.((Jack(x) & (-HuntsMaid(x) | HiresCleaningService(x))) | (-HuntsMaid(x) & OwnsPet(x))))", "all x.((Jack(x) & (-HasMaid(x) | -HasCleaningService(x))) -> -OwnsPet(x))", "all x.((Jack(x) & -HuntsMaid(x) & -HuntsCleaningService(x)) | (-HuntsMaid(x) & OwnsPet(x))))", "all x.((Jack(x) & (-HasMaid(x) | HasCleaningService(x))) | (-HasPet(x) | OwnsPet(x))))", "all x.((Jack(x) & (-HasMaid(x) | HasCleaningService(x))) | (-HasPet(x) | HasPet(x))))", "all x.((Jack(x) & (-HuntsMaid(x) | -HuntsCleaningService(x))) -> -HasPet(x))", "all x.((Jack(x) & (-HasMaid(x) | HasCleaningService(x))) | (-HasMaid(x) & HasCleaningService(x))))", "all x.((Jack(x) & (-HasMaid(x) | -HasCleaningService(x))) -> -HasPet(x))", "all x.((Jack(x) & -HasMaid(x) & -HasCleaningService(x)) | (-HasPet(x) & HasPet(x))))", "all x.((HuntsMaid(x) | HiresCleaningService(x)) | (-HuntsMaid(x) & OwnsPet(x))))"]}
{"id": "folio_train_1709", "nl": "Jack lives in the suburbs.", "fol": "LivesInSuburbs(Jack)", "prediction": ["all x.(Jack(x) -> LivesInSuburbs(x))", "all x y.((Jack(x) & Suburb(y)) -> LivesIn(x,y))", "all x y.((Jack(x) & Suburbs(y)) -> LivesIn(x,y))", "all x.((Jack(x) & Suburbs(x)) -> LivesIn(x,y))", "all x.(Jack(x) -> LivesInFurniture(x))", "all x.((Jack(x) & Suburb(x)) -> LivesIn(x,y))", "-exists x.(Jack(x) & LivesIn(x,Suburbs))", "all x.(Jack(x) -> LivesInTheSuburbs(x))", "All x.(Jack(x) -> LivesInSuburbs(x))", "exists x.(Jack(x) & LivesIn(x,Suburbs))", "all x.(Jack(x) -> LivesInBurbs(x))", "all x.(Jack(x) -> LivesInDeserts(x))", "exists x.(Jack(x) & LivesInSuburbs(x))", "all x.(Jack(x) -> LivesInDepartments(x))", "(LivesInSuburbs(Jack) & -LivesInSuburbs(Jack))", "all x.((Jack(x) & Suburbs(x)) -> LivesIn(x))"]}
{"id": "folio_train_1710", "nl": "Jack does not live in the suburbs.", "fol": "-LivesInSuburbs(Jack)", "prediction": ["all x.(Jack(x) -> -LivesInSuburbs(x))", "-exists x.(Jack(x) & LivesIn(x,Suburbs))", "-exists x.(Jack(x) & -LivesInSuburbs(x))", "-exists x.(Jack(x) & LivesInSuburbs(x))", "(-LivesInSuburbs(Jack))", "all x.(Jack(x) -> -LivingInSuburbs(x))", "(LivesInSuburbs(Jack) & -LivesInSuburbs(Jack))", "exists x.(Jack(x) & -LivesInSuburbs(x))", "-exists x.(Jack(x) & -LivesIn(x,Suburbs))", "All x.(Jack(x) -> -LivesInSuburbs(x))", "-exists x.(Jack(x) & LivesIn(x,suburbs))", "-exists x.(Jack(x) & Suburbs(x))", "all x.(Jack(x) -> -LivesInFurniture(x))", "-exists x.(Jack(x) & Suburb(x))", "(-exists x.(Jack(x) & Suburbs(x)))", "-exists x.(Jack(x) & LivesIn(x,Burbs))"]}
{"id": "folio_train_1711", "nl": "Jack has a tidy house.", "fol": "HasTidyHouse(Jack)", "prediction": ["all x.(Jack(x) -> HasTidyHouse(x))", "all x.((Jack(x) & House(y)) -> Tidy(x,y))", "all x.((Jack(x) & House(y)) -> Tidy(x,y))", "All x.(Jack(x) -> HasTidyHouse(x))", "all x.((Jack(x) & House(y)) -> HasTidy(x,y))", "all x.(Jack(x) -> TidyHouse(x))", "all x.((Jack(x) & House(y)) -> Tidy(x))", "all x.(Jack(x) -> TidyHouse(x))", "all x y.((Jack(x) & House(y)) -> HasTidy(x,y))", "all x.((Jack(x) & House(y)) -> Trashy(x,y))", "all x.((Jack(x) & House(y)) -> Tidy(x))", "all x.(Jack(x) -> CleanHouse(x))", "all x y.((Jack(x) & House(y)) -> Tidy(x,y))", "all x y.((Jack(x) & House(y)) -> Tidy(x,y))", "(HasTidyHouse(Jack) & HasHouse(Jack))", "(HasTidyHouse(Jack) & House(Jack))"]}
{"id": "folio_train_1712", "nl": "Jack neither lives in the suburbs nor owns at least one pet.", "fol": "(-LivesInSuburbs(Jack) & -OwnAtLeastOnePet(Jack))", "prediction": ["all x.((Jack(x) & -(LivesInSuburbs(x) | OwnsPet(x))) -> -(LivesInSuburbs(x) & OwnsPet(x))))", "-exists x.(Jack(x) & -exists y.(Suburb(y) & LivesIn(x,y)) & exists z.(Pet(z) & Owns(x,z))))", "-exists x.(Jack(x) & -exists y.(Suburb(y) & LivesIn(x,y))) & exists z.(Pet(z) & Owns(x,z))))", "all x.((Jack(x) & -(LivesInSuburbs(x) | OwnsPet(x))) -> -(LivesInSuburbs(x) | OwnsPet(x))))", "-exists x.(Jack(x) & LivesInSuburbs(x) & -exists y.(Pet(y) & Owns(x,y))))", "-exists x.(Jack(x) & -LivesInSuburbs(x) & -exists y.(Pet(y) & Owns(x,y))))", "-exists x.(Jack(x) & -LivesInSuburbs(x) & exists y.(Pet(y) & Owns(x,y))))", "-exists x.(Jack(x) & -exists y.(Suburb(y) & LivesIn(x,y)) & -exists z.(Pet(z) & Owns(x,z))))", "all x.((Jack(x) & -(LivesInSuburbs(x) | OwnsPet(x))) -> -(LivesInSuburbs(x) & OwnsPet(x)))", "all x.((Jack(x) & -(LivesInSuburbs(x) | OwnsPet(x)))) -> -(LivesInSuburbs(x) & OwnsPet(x))))", "-exists x.(Jack(x) & -exists y.(Suburb(y) & LivesIn(x,y)) | exists z.(Pet(z) & Owns(x,z)))))", "all x.((Jack(x) & -(LivesInSuburbs(x) | OwnsPet(x)))) -> -(LivesInSuburbs(x) & OwnsPet(x)))", "all x.((Jack(x) & -(LivesInSuburbs(x) | OwnsPet(x))) -> -LivesInSuburbs(x))", "all x.((Jack(x) & -(LivesInSuburbs(x) | OwnsPet(x)))) -> -(LivesInSuburbs(x) | OwnsPet(x))))", "all x.((Jack(x) & -LivesInSuburbs(x) & -OwnsPet(x)) -> -LivesInSuburbs(x))", "-exists x.(Jack(x) & -exists y.(Suburb(y) & LivesIn(x,y)) | exists z.(Pet(z) & Owns(x,z))))"]}
{"id": "folio_train_1713", "nl": "Jack grew up with childhood pets and lives in the suburbs.", "fol": "(GrewUpWithChildhoodPets(Jack) & LivesInSuburbs(Jack))", "prediction": ["all x.(Jack(x) -> (GrowsUpWithChildren(x) & LivesInSuburbs(x)))", "all x.(Jack(x) -> (GrowsUpWithChildrenPets(x) & LivesInSuburbs(x)))", "all x y.((Jack(x) & ChildhoodPet(y)) -> (GrowsUpWith(x,y) & LivesInSuburbs(x)))", "all x y z.((Jack(x) & ChildhoodPet(y) & Suburb(z)) -> (GrowsUpWith(x,y) & LivesIn(x,z)))", "all x y z.((Jack(x) & ChildhoodPet(y) & Suburbs(z)) -> (GrowsUpWith(x,y) & LivesIn(x,z)))", "(GrowsUpWithChildrenPets(Jack) & LivesInSuburbs(Jack))", "all x.((Jack(x) & ChildhoodPet(x)) -> (GrowsUpWith(x,Children) & LivesInSuburbs(x)))", "all x.((Jack(x) & ChildhoodPet(x)) -> (GrowsUpWith(x,y) & LivesInSuburbs(x)))", "all x y.((Jack(x) & ChildhoodPet(y)) -> (GrowsUpWith(x,y) & LivesIn(x,suburbs)))", "all x y.((Jack(x) & ChildhoodPet(y)) -> (GrowsUpWith(x,y) & LivesIn(x,y)))", "(GrowsUpWithChildren(Jack) & LivesInSuburbs(Jack))", "all x.(Jack(x) -> (GrowsUpWithChildren(x) & LivesInSuburbs(x)))", "all x y.((Jack(x) & ChildhoodPet(y)) -> (GrowsUpWith(x,y) & LivesIn(x,Suburbs)))", "all x.((Jack(x) & ChildhoodPet(x)) -> (GrowsUpWith(x,Children) & LivesIn(x,Suburbs)))", "all x.((Jack(x) & ChildhoodPet(x)) -> (GrowsUpWith(x,y) & LivesIn(x,suburbs)))", "all x.(Jack(x) -> (GrowsUpWithChildren(x) & LivesInFurniture(x)))"]}
{"id": "folio_train_1714", "nl": "A bottle is either standing upright or toppled over. ", "fol": "((IsUpright(Bottle) & -IsToppledOver(Bottle)) | (-IsUpright(Bottle) & IsToppledOver(Bottle)))", "prediction": ["all x.(Bottle(x) -> (StandsUpright(x) | ToppledOver(x)))", "all x.(Bottle(x) -> (StandingUpright(x) | ToppledOver(x)))", "all x.(Beverage(x) -> (StandsUpright(x) | ToppledOver(x)))", "all x.(Beverage(x) -> (StandingUpright(x) | ToppledOver(x)))", "all x.(Bloot(x) -> (StandsUpright(x) | ToppledOver(x)))", "all x.(Bloot(x) -> (StandingUpright(x) | ToppledOver(x)))", "all x.(Boutique(x) -> (StandsUpright(x) | ToppledOver(x)))", "all x.(Bottle(x) -> (StandUpright(x) | ToppledOver(x)))", "exists x.(Bottle(x) & (StandsUpright(x) | ToppledOver(x)))", "all x.(Boutique(x) -> (StandingUpright(x) | ToppledOver(x)))", "all x.(Bottle(x) -> (StandsUpright(x) | TippedOver(x)))", "all x.(Bottle(x) -> (StandsUpright(x) | TorppledOver(x)))", "exists x.(Bottle(x) & (StandingUpright(x) | ToppledOver(x)))", "all x.(Blood(x) -> (StandsUpright(x) | ToppledOver(x)))", "all x.(Bottle(x) -> (StandsUpright(x) | ToppledOver(x)))", "all x.(Bottle(x) -> (StandingUpright(x) | TorppledOver(x)))"]}
{"id": "folio_train_1715", "nl": "The bottle is not upright.", "fol": "-IsUpright(Bottle)", "prediction": ["all x.(Bottle(x) -> -Upright(x))", "all x.(Boutique(x) -> -Upright(x))", "exists x.(Bottle(x) & -Upright(x))", "all x.(Blood(x) -> -Upright(x))", "all x.(Bloode(x) -> -Upright(x))", "All x.(Bottle(x) -> -Upright(x))", "All x.(Boutique(x) -> -Upright(x))", "all x.(Beverage(x) -> -Upright(x))", "-Upright(Boutique)", "all x.(Bottle(x) & -Upright(x))", "(-Upright(Boutique))", "the bottle is not upright.", "all x.(Boutique(x) & -Upright(x))", "(-Upright(Blood))", "all x.(Bottle(x) -> (-Upright(x)))", "all x.(Bottle(x) -> -Upright(x))"]}
{"id": "folio_train_1716", "nl": "The bottle is toppled over.", "fol": "IsToppledOver(Bottle)", "prediction": ["all x.(Bottle(x) -> ToppledOver(x))", "all x.(Boutique(x) -> ToppledOver(x))", "all x.(Bloode(x) -> ToppledOver(x))", "all x.(BloodedOver(x) -> ToppledOver(x))", "all x y.((Bottle(x) & Bottle(y)) -> ToppledOver(x,y))", "all x.(Blood(x) -> ToppledOver(x))", "all x.(Beverage(x) -> ToppledOver(x))", "all x y.((Bottle(x) & Bottle(y)) -> ToppledOver(x))", "all x.(Bouton(x) -> ToppledOver(x))", "All x.(Bottle(x) -> ToppledOver(x))", "exists x.(Bottle(x) & ToppledOver(x))", "all x.(Boutle(x) -> ToppledOver(x))", "all x.(Boutlet(x) -> ToppledOver(x))", "All x.(Bloode(x) -> ToppledOver(x))", "all x.(Bottle(x) -> TorppledOver(x))", "all x.(Blooded(x) -> ToppledOver(x))"]}
{"id": "folio_train_1717", "nl": "If people eat cereal and milk every day for breakfast, then they have very busy morning schedules every day.", "fol": "all x.(EatsCerealAndMilk(x) -> HasBusyMorningSchedule(x))", "prediction": ["all x.(EatsCerealAndMilkEveryDayForBreakfast(x) -> BusyMorningSchedulesEveryDay(x))", "all x.((Person(x) & EatsCereal(x) & EatsMilk(x)) -> BusyMorningSchedule(x))", "all x.(EatsCerealAndMilkEveryDayForBreakfast(x) -> BusyMorningSchedules(x))", "all x.((Person(x) & EatsCerealAndMilkEveryDayForBreakfast(x)) -> BusyMorningSchedule(x))", "all x.((EatsCereal(x) & EatsMilk(x)) -> BusyMorningSchedule(x))", "all x.((People(x) & EatsCerealAndMilkEveryDayForBreakfast(x)) -> BusyMorningSchedulesEveryDay(x))", "all x.((Person(x) & EatsCerealAndMilkEveryDay(x)) -> BusyMorningSchedule(x))", "all x.((EatsCerealAndMilkEveryDay(x) & Breakfast(x)) -> BusyMorningSchedule(x))", "all x.((Person(x) & EatsCerealAndMilkEveryDay(x) & Breakfast(x)) -> BusyMorningSchedule(x))", "all x.((EatsCereal(x) & EatsMilk(x)) -> BusyMorningSchedules(x))", "all x.(EatsCerealAndMilkEveryDayForBreakfast(x) -> BusyMorningSchedule(x))", "all x.((Person(x) & EatsCerealAndMilkEveryDayForBreakfast(x)) -> BusyMorningSchedulesEveryDay(x))", "all x.((People(x) & EatsCerealAndMilkEveryDayForBreakfast(x)) -> BusyMorningSchedules(x))", "all x.((People(x) & EatsCereal(x) & EatsMilk(x)) -> BusyMorningSchedule(x))", "all x.((People(x) & EatsCereal(x) & EatsMilk(x)) -> BusyMorningSchedules(x))", "all x.((People(x) & EatsCerealAndMilkEveryDayForBreakfast(x)) -> BusyMorningSchedule(x))"]}
{"id": "folio_train_1718", "nl": "All young children below the age of ten eat cereal and milk every day for breakfast.", "fol": "all x.(ChildrenUnderTen(x) -> HasBusyMorningSchedule(x))", "prediction": ["all x.((YoungChild(x) & UnderTen(x)) -> EatsCerealAndMilkEveryDayForBreakfast(x))", "all x.((YoungChild(x) & UnderTen(x)) -> EatsCerealAndMilkEveryDay(x))", "all x.((YoungChild(x) & UnderTen(x)) -> EatsCerealAndMilk(x))", "all x.((YoungChild(x) & UnderTen(x)) -> (EatsCereal(x) & EatsMilk(x)))", "all x.((YoungChild(x) & BelowTen(x)) -> EatsCerealAndMilkEveryDayForBreakfast(x))", "all x.((YoungChild(x) & BelowTen(x)) -> (EatsCereal(x) & EatsMilk(x)))", "all x.((YoungChild(x) & BelowTen(x)) -> EatsCerealAndMilkEveryDay(x))", "all x.((YoungChild(x) & BelowTen(x)) -> EatsCerealAndMilk(x))", "all x.((YoungChild(x) & UnderTen(x)) -> (EatsCereal(x) & EatsMilk(x) & Breakfast(x)))", "all x.((YoungChild(x) & UnderTen(x)) -> EatsCereal(x) & EatsMilk(x))", "all x.((YoungChild(x) & UnderTen(x)) -> (EatsCereal(x) & EatsMilk(x) & ForBreakfast(x)))", "all x.((YoungChild(x) & UnderTen(x)) -> EatsCerealAndMilkForBreakfast(x))", "all x.((YoungChild(x) & AgeBelowTen(x)) -> EatsCerealAndMilkEveryDayForBreakfast(x))", "all x.((YoungChild(x) & BelowTen(x)) -> (EatsCereal(x) & EatsMilk(x) & Breakfast(x)))", "all x.((YoungChild(x) & AgeBelowTen(x)) -> EatsCerealAndMilkEveryDay(x))", "all x.((YoungChild(x) & BelowTen(x)) -> (EatsCereal(x) & EatsMilk(x) & ForBreakfast(x)))"]}
{"id": "folio_train_1719", "nl": "People are either young children below the age of ten or have a lot of commitments they voluntarily signed up for.", "fol": "all x.((ChildrenUnderTen(x) & -Committments(x)) | (-ChildrenUnderTen(x) & Committments(x)))", "prediction": ["all x.(Person(x) -> ((YoungChild(x) & UnderTen(x)) | LotsOfCommitments(x))))", "all x.((Person(x) & (BelowAge(x,10) | LotsOfCommitments(x))) -> YoungChild(x))", "all x.(Person(x) -> ((YoungChild(x) & BelowTen(x)) | LotsOfCommitments(x))))", "all x.(Person(x) -> ((YoungChild(x) & UnderTen(x)) | LotsOfCommitments(x))))", "all x.(People(x) -> ((YoungChild(x) & UnderTen(x)) | LotsOfCommitments(x))))", "all x.((Person(x) & (BelowAge(x,10) | LotsOfCommitments(x,10))) -> YoungChild(x))", "all x.(Person(x) -> ((YoungChild(x) & UnderTen(x)) | LotsOfContracts(x))))", "all x.((Person(x) & (BelowAge(x,10) | LotsOfCommitments(x))) -> YoungChild(x))", "all x.(Person(x) -> ((YoungChild(x) & BelowTen(x)) | LotsOfCommitments(x))))", "all x.((People(x) & (BelowAge(x,10) | LotsOfCommitments(x))) -> YoungChild(x))", "all x.(People(x) -> ((YoungChild(x) & BelowTen(x)) | LotsOfCommitments(x))))", "all x.(Person(x) -> ((YoungChild(x) & BelowAge(x,10)) | LotsOfCommitments(x,10))))", "all x.((Person(x) & (BelowAge(x,10) | LotsOfCommitments(x))) -> YoungChildren(x))", "all x.(Person(x) -> ((YoungChild(x) & BelowAge(x,10)) | LotsOfCommitments(x))))", "all x.(Person(x) -> ((YoungChildrenBelowTen(x) | LotsOfCommitments(x))))", "all x.((People(x) & (BelowAge(x,10) | LotsOfCommitments(x))) -> YoungChildren(x))"]}
{"id": "folio_train_1720", "nl": "If people have a lot of commitments they voluntarily signed up for, then they are hardworking individuals with high ambitions and goals for the future.", "fol": "all x.(Committments(x) -> IsHardworking(x))", "prediction": ["all x.((Person(x) & LotsOfCommitments(x) & VoluntarilySsignedUpFor(x)) -> HardworkingIndividual(x) & HighAmbitions(x) & HighGoalsForFuture(x))", "all x.((Person(x) & LotsOfCommitments(x) & VoluntarilySsignedUpFor(x)) -> HardworkingIndividual(x) & HighAmbitions(x) & HighGoalsForFuture(x))", "all x.((Person(x) & LotsOfCommitments(x) & VoluntarilySsignedUpFor(x)) -> HardworkingIndividual(x) & HighAmbitionsAndGoalsForFuture(x))", "all x.((Person(x) & LotsOfCommitments(x) & VoluntarilySsignedUpFor(x)) -> HardworkingIndividual(x) & HighAmbitionsAndGoals(x))", "all x.((Person(x) & LotsOfCommitments(x) & VoluntarilySsignedUpFor(x)) -> HardworkingIndividual(x) & HighAmbitionsAndGoalsForFuture(x))", "all x.((Person(x) & LotsOfCommitments(x) & VoluntarilySsignedUpFor(x)) -> HardworkingIndividual(x) & HighAmbitionsAndGoals(x))", "all x.((People(x) & LotsOfCommitments(x) & VoluntarilySsignedUpFor(x)) -> HardworkingIndividual(x) & HighAmbitions(x) & HighGoalsForFuture(x))", "all x.((People(x) & LotsOfCommitments(x) & VoluntarilySsignedUpFor(x)) -> HardworkingIndividual(x) & HighAmbitions(x) & HighGoalsForFuture(x))", "all x.((People(x) & LotsOfCommitments(x) & VoluntarilySsignedUpFor(x)) -> HardworkingIndividual(x) & HighAmbitionsAndGoalsForFuture(x))", "all x.((People(x) & LotsOfCommitments(x) & VoluntarilySsignedUpFor(x)) -> HardworkingIndividual(x) & HighAmbitionsAndGoals(x))", "all x.((Person(x) & LotsOfCommitments(x) & VoluntarilySsignedUpFor(x)) -> HardworkingIndividual(x) & HighAmbitions(x) & HighGoals(x))", "all x.((Person(x) & LotsOfCommitments(x)) -> (HardworkingIndividual(x) & HighAmbitions(x) & HighGoalsForFuture(x)))", "all x.((People(x) & LotsOfCommitments(x)) -> (HardworkingIndividual(x) & HighAmbitions(x) & HighGoalsForFuture(x)))", "all x.((Person(x) & LotsOfCommitments(x) & VoluntarilySsignedUpFor(x)) -> HardworkingIndividual(x) & HighAmbitions(x) & HighGoals(x))", "all x.((People(x) & LotsOfCommitments(x) & VoluntarilySsignedUpFor(x)) -> HardworkingIndividual(x) & HighAmbitionsAndGoals(x))", "all x.((Person(x) & LotsOfContracts(x) & VoluntarilySsignedUpFor(x)) -> HardworkingIndividual(x) & HighAmbitionsAndGoalsForFuture(x))"]}
{"id": "folio_train_1721", "nl": "If people are hardworking individuals with high ambitions and goals for the future, then they are not good at staying organized and motivated.", "fol": "all x.(IsHardworking(x) -> -IsOrganized(x))", "prediction": ["all x.((HardworkingIndividual(x) & HighAmbitions(x) & HighGoalsForFuture(x)) -> -GoodAtStayingOrganizedAndMotivated(x))", "all x.((HardworkingIndividual(x) & HighAmbitionsAndGoals(x)) -> -GoodAtStayingOrganizedAndMotivated(x))", "all x.((HardworkingIndividual(x) & HighAmbitions(x) & HighGoals(x)) -> -GoodAtStayingOrganizedAndMotivated(x))", "all x.((HardworkingIndividual(x) & HighAmbitions(x) & HighGoalsForFuture(x)) -> -GoodAtStayingOrganized(x) & -GoodAtStayingMotivated(x))", "all x.((HardworkingIndividual(x) & HighAmbitions(x) & HighGoals(x)) -> -GoodAtStayingOrganized(x) & -GoodAtStayingMotivated(x))", "all x.((HardworkingIndividual(x) & HighAmbitionsAndGoalsForFuture(x)) -> -GoodAtStayingOrganizedAndMotivated(x))", "all x.((HardworkingIndividual(x) & HasHighAmbitions(x) & HasGoalsForFuture(x)) -> -GoodAtStayingOrganizedAndMotivated(x))", "all x.((HardworkingIndividual(x) & HighAmbitions(x) & GoalsForFuture(x)) -> -GoodAtStayingOrganizedAndMotivated(x))", "all x.((HardworkingIndividual(x) & HighAmbiances(x) & HighGoalsForFuture(x)) -> -GoodAtStayingOrganizedAndMotivated(x))", "all x.((Person(x) & HardworkingIndividual(x) & HighAmbitions(x) & HighGoalsForFuture(x)) -> -GoodAtStayingOrganizedAndMotivated(x))", "all x.((HardworkingIndividual(x) & HasHighAmbitions(x) & HasGoalsForFuture(x)) -> -GoodAtStayingOrganized(x) & -GoodAtStayingMotivated(x))", "all x.((People(x) & HardworkingIndividual(x) & HighAmbitions(x) & HighGoalsForFuture(x)) -> -GoodAtStayingOrganizedAndMotivated(x))", "all x.((HardworkingIndividual(x) & HasHighAmbitions(x) & HasHighGoalsForFuture(x)) -> -GoodAtStayingOrganizedAndMotivated(x))", "all x.((HardworkingIndividual(x) & HasHighAmbitionsAndGoals(x)) -> -GoodAtStayingOrganizedAndMotivated(x))", "all x.((Person(x) & HardworkingIndividual(x) & HighAmbitions(x) & HighGoalsForFuture(x)) -> -GoodAtStayingOrganized(x) & -GoodAtStayingMotivated(x))", "all x.((HardworkingIndividual(x) & HighAmbitions(x) & HighGoalsForFuture(x)) -> -GoodAtStayingOrganized(x) & Motivated(x))"]}
{"id": "folio_train_1722", "nl": "John either is both a hardworking individual with high ambitions and goals for the future and has busy morning schedules every day, or he is neither a hardworking individual with high ambitions and goals for the future nor does he have a busy morning schedule every day.", "fol": "((IsHardworking(John) & HasBusyMorningSchedule(John) & -(-IsHardworking(John) & -HasBusyMorningSchedule(John))) | (-(IsHardworking(John) & HasBusyMorningSchedule(John)) & -IsHardworking(John) & -HasBusyMorningSchedule(John)))", "prediction": ["all x.((John(x) & HardworkingIndividual(x) & HighAmbitionsAndGoalsForFuture(x) & BusyMorningSchedulesEveryDay(x)) | (-HardworkingIndividual(x) & HighAmbitionsAndGoalsForFuture(x) & BusyMorningSchedulesEveryDay(x))))", "all x.(John(x) -> ((HardworkingIndividual(x) & HighAmbitionsAndGoalsForFuture(x) & BusyMorningSchedulesEveryDay(x)) | (-HardworkingIndividual(x) & HighAmbitionsAndGoalsForFuture(x) & BusyMorningSchedulesEveryDay(x)))))", "all x.((John(x) & HardworkingIndividual(x) & HighAmbitionsAndGoals(x) & BusyMorningSchedulesEveryDay(x)) | (-HardworkingIndividual(x) & HighAmbitionsAndGoals(x) & BusyMorningSchedulesEveryDay(x))))", "(all x.(John(x) -> (HardworkingIndividual(x) & HighAmbitionsAndGoalsForFuture(x) & BusyMorningSchedulesEveryDay(x))) | (-HardworkingIndividual(x) & HighAmbitionsAndGoalsForFuture(x) & BusyMorningSchedulesEveryDay(x)))))", "(all x.(John(x) -> (HardworkingIndividual(x) & HighAmbitionsAndGoals(x) & BusyMorningSchedules(x))) | (-HardworkingIndividual(x) & HighAmbitionsAndGoals(x) & BusyMorningSchedules(x)))))", "((HardworkingIndividual(John) & HighAmbitionsAndGoals(John) & BusyMorningSchedules(John)) | (-HardworkingIndividual(John) & HighAmbitionsAndGoals(John) & BusyMorningSchedules(John))))", "(HardworkingIndividual(John) & HighAmbitionsAndGoals(John) & BusyMorningSchedulesEveryDay(John)) | (-HardworkingIndividual(John) & HighAmbitionsAndGoals(John) & BusyMorningSchedulesEveryDay(John))))", "all x.(John(x) -> ((HardworkingIndividual(x) & HighAmbitionsAndGoals(x) & BusyMorningSchedulesEveryDay(x)) | (-HardworkingIndividual(x) & HighAmbitionsAndGoals(x) & BusyMorningSchedulesEveryDay(x)))))", "(all x.(John(x) -> (HardworkingIndividual(x) & HighAmbitionsAndGoalsForFuture(x) & BusyMorningSchedulesEveryDay(x))) | (-HardworkingIndividual(x) & HighAmbitionsAndGoalsForFuture(x) & BusyMorningSchedulesEveryDay(x))))", "all x.(John(x) -> ((HardworkingIndividual(x) & HighAmbitionsAndGoalsForFuture(x) & BusyMorningSchedulesEveryDay(x)) | (-HardworkingIndividual(x) & HighAmbitionsAndGoalsForFuture(x) & BusyMorningSchedulesEveryDay(x))))", "(HardworkingIndividual(John) & HighAmbitionsAndGoals(John) & BusyMorningSchedules(John)) | (-HardworkingIndividual(John) & HighAmbitionsAndGoals(John) & BusyMorningSchedules(John))))", "all x.((John(x) & HardworkingIndividual(x) & HighAmbitionsAndGoals(x) & BusyMorningSchedules(x)) | (-HardworkingIndividual(x) & HighAmbitionsAndGoals(x) & BusyMorningSchedules(x))))", "all x.(John(x) -> ((HardworkingIndividual(x) & HighAmbitionsAndGoals(x) & BusyMorningSchedulesEveryDay(x)) | (-HardworkingIndividual(x) & HighAmbitionsAndGoals(x) & BusyMorningSchedulesEveryDay(x))))", "((HardworkingIndividual(John) & HighAmbitions(John) & BusyMorningSchedules(John)) | (-HardworkingIndividual(John) & HighAmbitions(John) & BusyMorningSchedules(John))))", "((HardworkingIndividual(John) & HighAmbitionsAndGoalsForFuture(John)) | (-HardworkingIndividual(John) & HighAmbitionsAndGoalsForFuture(John)) | (-HardworkingIndividual(John) & HighAmbitionsAndGoalsForFuture(John) & BusyMorningSchedulesEveryDay(John)))))", "((HardworkingIndividual(John) & HighAmbitionsAndGoals(John) & BusyMorningSchedulesEveryDay)) | (-HardworkingIndividual(John) & HighAmbitionsAndGoals(John) & BusyMorningSchedulesEveryDay(John))))"]}
{"id": "folio_train_1723", "nl": "John is good at staying organized and motivated.", "fol": "IsOrganized(John)", "prediction": ["all x.(John(x) -> (GoodAtStayingOrganized(x) & Motivated(x)))", "all x.((John(x) & Organized(x) & Motivated(x)) -> GoodAtStaying(x))", "all x.(John(x) -> (GoodAtOrganizing(x) & Motivated(x)))", "all x.((John(x) & GoodAtStayingOrganized(x) & Motivated(x)) -> GoodAtStaying(x))", "all x.((John(x) & GoodAtStayingOrganized(x) & Motivated(x)) -> GoodAtStayingOrganized(x))", "all x.(John(x) -> (Organized(x) & Motivated(x)))", "All x.(John(x) -> (GoodAtStayingOrganized(x) & Motivated(x)))", "all x.((John(x) & Organized(x) & Motivated(x)) -> GoodAtStaying(x))", "(GoodAtStayingOrganized(John) & Motivated(John))", "all x.((John(x) & Organization(x) & Motivation(x)) -> GoodAtStaying(x))", "all x.((John(x) & Organized(x) & Motivated(x)) -> GoodAt(x))", "all x.(John(x) -> (StaysOrganized(x) & Motivated(x)))", "all x.((John(x) & Organization(x) & Motivated(x)) -> GoodAtStaying(x))", "all x.((John(x) & Organized(x) & Motivated(x)) -> GoodAt(x))", "all x.(John(x) -> (GoodAtStandingOrganized(x) & Motivated(x)))", "all x.(John(x) -> (Organizes(x) & Motivated(x)))"]}
{"id": "folio_train_1724", "nl": "John eats cereal and milk every day for breakfast.", "fol": "EatsCerealAndMilk(John)", "prediction": ["all x.((John(x) & EatsCereal(x) & EatsMilk(x)) -> Breakfast(x))", "(EatsCereal(John) & EatsMilk(John))", "all x.(John(x) -> (EatsCereal(x) & EatsMilk(x)))", "all x y.((John(x) & Breakfast(y)) -> (EatsCereal(x,y) & EatsMilk(x,y)))", "(Eats(John,Cereal) & Eats(John,Milk))", "all x.(John(x) -> (EatsCereal(x) & EatsMilk(x) & Breakfast(x)))", "all x.((John(x) & Eats(x,Cereal) & Eats(x,Milk)) -> Breakfast(x))", "all x.(John(x) -> (EatsCereal(x) & EatsMilk(x) & ForBreakfast(x)))", "all x y.((John(x) & Breakfast(y)) -> EatsCerealAndMilk(x,y))", "all x.((John(x) & EatsCereal(x) & EatsMilk(x)) -> ForBreakfast(x))", "all x y.((John(x) & Breakfast(y)) -> (Eats(x,Cereal) & Eats(x,Milk)))", "all x y z.((John(x) & Cereal(y) & Milk(z)) -> EatsForBreakfast(x,y,z))", "All x.(John(x) -> (EatsCereal(x) & EatsMilk(x)))", "all x y.((John(x) & Breakfast(y)) -> (EatsCereal(x) & EatsMilk(x)))", "(EatsCereal(John) & EatsMilk(John) & Breakfast(John))", "all x.(John(x) -> (Eats(x,Cereal) & Eats(x,Milk)))"]}
{"id": "folio_train_1725", "nl": "John is either a hardworking individual with high ambitions and goals for the future or is good at staying organized and motivated.", "fol": "(IsHardworking(John) | IsOrganized(John))", "prediction": ["all x.(John(x) -> ((HardworkingIndividual(x) & HighAmbitions(x) & HighGoals(x)) | (GoodAtStayingOrganized(x) & Motivated(x))))", "all x.(John(x) -> (HardworkingIndividual(x) & (HighAmbitions(x) & HighGoals(x)) | GoodAtStayingOrganized(x) & Motivated(x))))", "all x.(John(x) -> ((HardworkingIndividual(x) & HighAmbitions(x) & HighGoalsForFuture(x)) | (GoodAtStayingOrganized(x) & Motivated(x))))", "all x.(John(x) -> (HardworkingIndividual(x) & (HighAmbitions(x) & GoalsForFuture(x) | GoodAtStayingOrganized(x) & Motivated(x))))", "all x.(John(x) -> (HardworkingIndividual(x) & (HighAmbitions(x) | HighGoals(x))) | GoodAtStayingOrganized(x) & Motivated(x)))", "all x.(John(x) -> (HardworkingIndividual(x) & (HighAmbitions(x) | HighGoals(x))) | (GoodAtStayingOrganized(x) & Motivated(x))))", "all x.(John(x) -> (HardworkingIndividual(x) & (HighAmbitions(x) & Goals(x)) | GoodAtStayingOrganized(x) & Motivated(x))))", "all x.(John(x) -> ((HardworkingIndividual(x) & HighAmbitions(x) & GoalsForFuture(x)) | (GoodAtStayingOrganized(x) & Motivated(x))))", "all x.(John(x) -> ((HardworkingIndividual(x) & HighAmbitionsAndGoals(x)) | (GoodAtStayingOrganized(x) & Motivated(x))))", "all x.(John(x) -> ((HardworkingIndividual(x) & HighAmbitions(x) & HighGoals(x)) | (GoodAtStayingOrganized(x) & Motivated(x)))))", "all x.(John(x) -> ((HardworkingIndividual(x) & HighAmbitions(x) & HighGoals(x)) | GoodAtStayingOrganized(x) & Motivated(x)))", "(HardworkingIndividual(John) & (HighAmbitions(John) & HighGoals(John)) | GoodAtStayingOrganized(John) & Motivated(John)))", "all x.(John(x) -> ((HardworkingIndividual(x) & HighAmbitions(x) & HighGoalsForFuture(x)) | GoodAtStayingOrganized(x) & Motivated(x)))", "all x.(John(x) -> (HardworkingIndividual(x) & (HighAmbitions(x) | HighGoals(x)) | GoodAtStayingOrganized(x) & Motivated(x))))", "all x.(John(x) -> ((HardworkingIndividual(x) & HighAmbitions(x) & HighGoals(x)) | GoodAtStayingOrganized(x) & Motivated(x))))", "all x.(John(x) -> (HardworkingIndividual(x) & (HighAmbitions(x) & HighGoals(x)) | (GoodAtStayingOrganized(x) & Motivated(x)))))"]}
{"id": "folio_train_1726", "nl": "Ableton has an office in Germany.", "fol": "HasOfficeIn(Ableton,Germany)", "prediction": ["all x.(Ableton(x) -> HasOfficeInGermany(x))", "Ableton exists x.(Office(x) & In(x,Germany))", "all x.(Ableton(x) -> exists y.(Office(y) & In(x,y))))", "Ableton exists x.(Office(x) & InGermany(x))", "Ableton exists x.(Office(x) & LocatedIn(x,Germany))", "all x.(Ableton(x) -> exists y.(GermanOffice(y) & In(x,y))))", "all x.(Ableton(x) -> HasOffice(x,Germany))", "all x y.((Ableton(x) & Office(y)) -> HasOffice(x,y))", "all x.(Ableton(x) -> exists y.(GermanOffice(y) & LocatedIn(x,y)))", "all x.(Ableton(x) -> exists y.(GermanOffice(y) & HasOffice(x,y)))", "All x.(Ableton(x) -> HasOfficeInGermany(x))", "all x.(Ableton(x) -> exists y.(GermanOffice(y) & LocatedIn(x,y))))", "all x.(Ableton(x) -> exists y.(Germany(y) & Office(x,y))))", "all x y.((Ableton(x) & Office(y)) -> HasOfficeInGermany(x,y))", "Ableton exists x.(Office(x,Germany) & HasOffice(x,Germany))", "all x y.((Ableton(x) & Office(y)) -> HasOfficeIn(x,y))"]}
{"id": "folio_train_1727", "nl": "Ableton has an office in the USA.", "fol": "HasOfficeIn(Ableton,Usa)", "prediction": ["all x y.((Ableton(x) & USA(y)) -> HasOffice(x,y))", "all x.(Ableton(x) -> HasOfficeInUSA(x))", "all x.(Ableton(x) -> exists y.(USAOffice(y) & HasOffice(x,y)))", "Ableton exists x.(Office(x) & InUSA(x))", "all x y.((Ableton(x) & USAOffice(y)) -> HasOffice(x,y))", "all x.(Ableton(x) -> HasOffice(x,USA))", "all x.(Ableton(x) -> exists y.(USAOffice(y) & HasOffice(x,y))))", "all x.(Ableton(x) -> exists y.(USAOffice(y) & LocatedIn(x,y)))", "all x.(Ableton(x) -> exists y.(USAOffice(y) & Has(x,y))))", "all x.(Ableton(x) -> exists y.(USA(y) & Office(x,y)))", "all x.(Ableton(x) -> exists y.(USA(y) & HasOffice(x,y)))", "all x.(Ableton(x) -> exists y.(USAOffice(y) & Has(x,y)))", "all x.(Ableton(x) -> exists y.(USAOffice(y) & LocatedIn(x,y))))", "all x.(Ableton(x) -> exists y.(Office(y) & In(x,y))))", "All x.(Ableton(x) -> exists y.(USAOffice(y) & HasOffice(x,y)))", "all x.(Ableton(x) -> exists y.(USAOffice(y) & In(x,y))))"]}
{"id": "folio_train_1728", "nl": "USA and Germany are different countries.", "fol": "-DifferentCountries(Germany,Usa)", "prediction": ["all x.((USA(x) & Germany(x)) -> DifferentCountries(x))", "all x y.((USA(x) & Germany(y)) -> DifferentCountries(x,y))", "all x.((USA(x) | Germany(x)) -> DifferentCountries(x))", "(DifferentCountries(USA) & DifferentCountries(Germany))", "all x y.((USA(x) & Germany(y)) -> (DifferentCountries(x,y) & DifferentCountries(x,y)))", "all x y.((USA(x) & Germany(y)) -> DifferentCountries(x))", "all x y.((USA(x) & Germany(y)) -> (DifferentCountries(x,y) & DifferentCountries(y)))", "all x y.((USA(x) & Germany(y)) -> DistinctCountries(x,y))", "all x y.((USA(x) & Germany(y)) -> (DifferentCountries(x,y) & DifferentCountries(y,x)))", "all x y.((USA(x) & Germany(y)) -> (DifferentCountries(x) & DifferentCountries(y)))", "all x.((USA(x) | Germany(x)) -> DifferentCountry(x))", "all x.((USA(x) & -Germany(x)) -> DifferentCountries(x))", "all x y.((USA(x) & Germany(y)) -> DifferentCountry(x,y))", "all x y.((USA(x) & Germany(y)) -> (DifferentCountries(x,y) & DifferentCountries(x,z)))", "(DifferentCountries(USA) & DifferentCountries(Deutschland))", "(DifferentCountries(USA,USA) & DifferentCountries(Germany,USA))"]}
{"id": "folio_train_1729", "nl": "Any company that has offices in different countries is a multinational company.", "fol": "all z.((HasOfficeIn(x,y) & HasOfficeIn(x,z) & -DifferentCountries(y,z)) -> IsMultinational(x))", "prediction": ["all x.((Company(x) & HasOfficesInDifferentCountries(x)) -> MultinationalCompany(x))", "all x.((Company(x) & OfficesInDifferentCountries(x)) -> MultinationalCompany(x))", "all x.((Company(x) & HasOfOfficesInDifferentCountries(x)) -> MultinationalCompany(x))", "all x.((Company(x) & HasOfficesInVariousCountries(x)) -> MultinationalCompany(x))", "all x.((Company(x) & HasOperationsInDifferentCountries(x)) -> MultinationalCompany(x))", "all x.((Company(x) & HasOpportunitiesInDifferentCountries(x)) -> MultinationalCompany(x))", "all x.((Company(x) & OfficesInVariousCountries(x)) -> MultinationalCompany(x))", "all x.((Company(x) & HasOfficesInDomesticCountries(x)) -> MultinationalCompany(x))", "all x.((Company(x) & LocatedInDifferentCountries(x)) -> MultinationalCompany(x))", "all x.((Company(x) & HasOfficesInDifferentCountries(x)) -> multinationalCompany(x))", "all x y.((Company(x) & OfficesInDifferentCountries(x)) -> MultinationalCompany(x))", "all x y.((Company(x) & OfficesInDifferentCountries(x)) -> MultinationalCompany(y))", "all x.((Company(x) & HasOthersInDifferentCountries(x)) -> MultinationalCompany(x))", "all x y.((Company(x) & OfficesInDifferentCountries(x,y)) -> MultinationalCompany(x))", "all x.((Company(x) & HasOfficesInCountries(x)) -> MultinationalCompany(x))", "all x.((Company(x) & DifferentCountries(x)) -> MultinationalCompany(x))"]}
{"id": "folio_train_1730", "nl": "Ableton makes music software.", "fol": "ProducesMusicSoftware(Ableton)", "prediction": ["all x.(Ableton(x) -> MakesMusicSoftware(x))", "all x y.((Ableton(x) & MusicSoftware(y)) -> Makes(x,y))", "all x y z.((Ableton(x) & MusicSoftware(y) & Software(z)) -> Makes(x,y,z))", "all x y z.((Ableton(x) & MusicSoftware(y) & Software(z)) -> Makes(x,y))", "all x y z.((Ableton(x) & MusicSoftware(y) & Software(z) & Makes(x,y)) -> Makes(x,z))", "All x.(Ableton(x) -> MakesMusicSoftware(x))", "all x.(Ableton(x) -> MakesMusicSoftware(x))", "all x y.((Ableton(x) & MusicSoftware(y)) -> Make(x,y))", "all x y z.((Ableton(x) & MusicSoftware(y) & MusicSoftware(z)) -> Makes(x,y,z))", "all x y z.((Ableton(x) & MusicSoftware(y) & Software(z) & Makes(x,y,z)) -> Makes(x,y))", "all x y z.((Ableton(x) & MusicSoftware(y) & Software(z)) -> Make(x,y,z))", "all x y z.((Ableton(x) & MusicSoftware(y) & Software(z) & Makes(x,y,z)) -> Makes(x,y,z))", "all x y z.((Ableton(x) & MusicSoftware(y) & Product(z)) -> Makes(x,y,z))", "exists x.(Ableton(x) & MakesMusicSoftware(x))", "all x y.((Ableton(x) & MusicSoftware(y)) -> MadeIn(x,y))", "all x y z.((Ableton(x) & MusicSoftware(y) & MusicSoftware(z)) -> Makes(x,y))"]}
{"id": "folio_train_1731", "nl": "Ableton is a multinational company.", "fol": "IsMultinational(Ableton)", "prediction": ["all x.(Ableton(x) -> MultinationalCompany(x))", "All x.(Ableton(x) -> MultinationalCompany(x))", "all x.(Ableton(x) -> MultinationalCompany(x))", "Ableton is a multinational company.", "all x y.((Ableton(x) & MultinationalCompany(y)) -> FoundedIn(x,y))", "all x.(Ableton(x) -> (MultinationalCompany(x) & MultinationalCompany(x)))", "(MultinationalCompany(Ableton) & FoundedIn(Ableton))", "all x.(Ableton(x) -> MultinationalCompany(x))", "all x.(Ableton(x) -> (MultinationalCompany(x) & -MultinationalCompany(x)))", "(MultinationalCompany(Ableton))", "all x.(Ableton(x) -> (MultinationalCompany(x) & FoundedIn(x,y)))", "all x y.((Ableton(x) & MultinationalCompany(y)) -> Is(x,y))", "all x y.((Ableton(x) & MultinationalCompany(y)) -> EstablishedIn(x,y))", "exists x.(Ableton(x) & MultinationalCompany(x))", "all x y.((Ableton(x) & MultinationalCompany(y)) -> Company(x,y))", "all x.(Ableton(x) -> (MultinationalCompany(x) & LocatedIn(x,y)))"]}
{"id": "folio_train_1732", "nl": "Ableton makes AI software.", "fol": "MakesAIsoftware(Ableton)", "prediction": ["all x.(Ableton(x) -> MakesAISoftware(x))", "all x y.((Ableton(x) & AISoftware(y)) -> Makes(x,y))", "all x y z.((Ableton(x) & AISoftware(y) & Software(z)) -> Makes(x,y,z))", "all x y z.((Ableton(x) & AISoftware(y) & Software(z)) -> Makes(x,y))", "All x.(Ableton(x) -> MakesAISoftware(x))", "exists x.(Ableton(x) & MakesAISoftware(x))", "all x y z.((Ableton(x) & AISoftware(y) & Software(z) & Makes(x,y)) -> Makes(x,z))", "all x.(Ableton(x) -> MakesAISoftware(x))", "all x y z.((Ableton(x) & AISoftware(y) & Software(z) & Makes(x,y,z)) -> Makes(x,y))", "(MakesAISoftware(Ableton) -> MakesAISoftware(Ableton))", "all x y.((Ableton(x) & AISoftware(y)) -> Make(x,y))", "all x y z.((Ableton(x) & AISoftware(y) & Software(z) & Makes(x,y,z)) -> Makes(x,y,z))", "all x y z.((Ableton(x) & AISoftware(y) & Software(z)) -> Make(x,y,z))", "all x y.((Ableton(x) & AISoftware(y) & Makes(x,y)) -> Makes(x,y))", "all x y z.((Ableton(x) & AISoftware(y) & Software(z)) -> Make(x,y))", "all x y z.((Ableton(x) & AISoftware(y) & Software(z)) -> MadeIn(x,y,z))"]}
{"id": "folio_train_1733", "nl": "Ableton does not have an office in Germany.", "fol": "-HasOfficeIn(Ableton,Germany)", "prediction": ["(-exists x.(AbletonOffice(x) & LocatedIn(x,Germany)))", "(-exists x.(AbletonOffice(x) & InGermany(x)))", "Ableton -exists x.(Office(x) & LocatedIn(x,Germany))", "(-exists x.(AbletonOffice(x) & In(x,Germany)))", "Ableton -exists x.(Office(x) & In(x,Germany))", "all x.(Ableton(x) -> -HasOfficeInGermany(x))", "(-exists x.(Ableton(x) & Office(x,Germany)))", "(-exists x.(Ableton(x) & OfficeIn(x,Germany)))", "Ableton -exists x.(Office(x) & InGermany(x))", "Ableton -HasOfficeInGermany(Ableton)", "-exists x.(Ableton(x) & Office(x,Germany))", "(-exists x.(Ableton(x) & OfficeInGermany(x)))", "Ableton - exists x.(Office(x) & LocatedIn(x,Germany))", "-exists x.(Ableton(x) & OfficeIn(x,Germany))", "Ableton -exists x.(Office(x) & In(x,Germany)))", "Ableton - exists x.(Office(x) & LocatedIn(x,Germany)))"]}
{"id": "folio_train_1734", "nl": "Every swimmer can go underwater.", "fol": "all x.(IsSwimmer(x) -> CanGoUnderwater(x))", "prediction": ["all x.(Swimmer(x) -> CanGoUnderwater(x))", "all x.(Swimmer(x) -> GoUnderwater(x))", "exists x.(Swimmer(x) & CanGoUnderwater(x))", "all x.(Swimmer(x) -> GoesUnderwater(x))", "all x y.((Swimmer(x) & Ocean(y)) -> CanGoUnderwater(x,y))", "all x y.((Swimmer(x) & Swimmer(y)) -> CanGoUnderwater(x,y))", "all x y.((Swimmer(x) & Water(y)) -> CanGoUnderwater(x,y))", "exists x.(Swimmer(x) & GoesUnderwater(x))", "all x.exists y.(Swimmer(x) & Underwater(y) & CanGo(x,y))", "all x.exists y.(Swimmer(x) & Underwater(y) & Goes(x,y))", "all x y.((Swimmer(x) & Swimmer(y)) -> CanGoUnderwater(x))", "all x y.((Swimmer(x) & Swimmer(y)) -> CanGoUnderwater(y))", "all x.exists y.(Swimmer(x) & Underwater(y) & GoesUnderwater(x,y))", "all x.(Swimmer(x) -> CanGoUnderwater(x))", "all x y.((Swimmer(x) & Ocean(y)) -> CanGoUnderwater(x))", "all x y.((Swimmer(x) & Ocean(y)) -> GoesUnderwater(x,y))"]}
{"id": "folio_train_1735", "nl": "Everyone that eats fish they catch themselves is a swimmer.", "fol": "all x.(CatchesAndEatsFish(x) -> IsSwimmer(x))", "prediction": ["all x.((EatsFish(x) & CatchesFish(x)) -> Swimmer(x))", "all x.((EatsFish(x) & CatchesFish(x)) -> Swimmer(x))", "all x.((EatsFish(x) & Catches(x)) -> Swimmer(x))", "all x.((EatsFish(x) & CatchFish(x)) -> Swimmer(x))", "all x.((EatsFish(x) & CatchEmployees(x)) -> Swimmer(x))", "all x.((EatsFish(x) & Catches(x)) -> Swimmer(x))", "all x.((EatsFish(x) & Catchself(x)) -> Swimmer(x))", "all x.((EatsFish(x) & Catch(x)) -> Swimmer(x))", "all x.((EatsFish(x) & CatchesEmployees(x)) -> Swimmer(x))", "all x.((EatsFish(x) & CatchEmployee(x)) -> Swimmer(x))", "all x.((EatsFish(x) & CatchesEmployees(x)) -> Swimmer(x))", "all x.((EatsFish(x) & CatchsFish(x)) -> Swimmer(x))", "all x.((EatsFish(x) & CatchesFishes(x)) -> Swimmer(x))", "all x.((Eats(x,Fish) & Catches(x)) -> Swimmer(x))", "all x.((EatsFish(x) & Fishes(x) & Catches(x)) -> Swimmer(x))", "all x.((EatsFish(x) & CatchesFish(x)) -> SwimmingSwimmer(x))"]}
{"id": "folio_train_1736", "nl": "Every penguin eats fish they catch themselves.", "fol": "all x.(IsPenguin(x) -> CatchesAndEatsFish(x))", "prediction": ["all x.(Penguin(x) -> EatsFish(x))", "all x.(Penguin(x) -> (EatsFish(x) & Catches(x)))", "all x.(Penguin(x) -> (EatsFish(x) & Catches(x)))", "all x.(Penguin(x) -> (EatsFish(x) & CatchesFish(x)))", "all x y.((Penguin(x) & Fish(y)) -> Eats(x,y))", "all x y.((Penguin(x) & Fish(y) & Catches(x,y)) -> Eats(x,y))", "all x.(Penguin(x) -> (EatsFish(x) & Catch(x)))", "all x.(Penguin(x) -> (EatsFish(x) & CatchEmployee(x)))", "all x.(Penguin(x) -> (EatsFish(x) & CatchEmployees(x)))", "all x.(Penguin(x) -> (EatsFish(x) & CatchesFish(x)))", "all x.(Penguin(x) -> (EatsFish(x) & CatchesEmployees(x)))", "all x.(Penguin(x) -> (EatsFish(x) & CatchesSelf(x)))", "all x.(Penguin(x) -> (EatsFish(x) & CatchesOwn(x)))", "all x.(Penguin(x) -> (EatsFish(x) & CatchesOf(x)))", "all x.(Penguin(x) -> exists y.(Fish(y) & Eats(x,y))))", "all x.(Penguin(x) -> (EatsFish(x) & Catchself(x)))"]}
{"id": "folio_train_1737", "nl": "All nonflying birds in Antarctica are penguins.", "fol": "all x.(IsNonFlyingBirdInAntarctica(x) -> IsPenguin(x))", "prediction": ["all x.((NonFlyingBird(x) & InAntarctica(x)) -> Penguin(x))", "all x.((NonFlyingBird(x) & Antarctica(x)) -> Penguin(x))", "all x.((NonFlyingBird(x) & InAntarctica(x)) -> Penguin(x))", "all x.(NonFlyingBird(x) -> Penguin(x))", "all x.((Bird(x) & NonFlying(x) & InAntarctica(x)) -> Penguin(x))", "all x.((Bird(x) & NonFlying(x) & Antarctica(x)) -> Penguin(x))", "all x.((NonFlyingBird(x) & InAntarcticAntarctica(x)) -> Penguin(x))", "all x.((Bird(x) & NonFlyingInAntarctica(x)) -> Penguin(x))", "all x.((Bird(x) & -FlyingInAntarctica(x)) -> Penguin(x))", "all x.((Bird(x) & NonFlying(x) & InAntarctica(x)) -> Penguin(x))", "all x.((NonFlyingBird(x) & LocatedInAntarctica(x)) -> Penguin(x))", "all x.((Bird(x) & NonFlying(x) & InAntarcticAntarctica(x)) -> Penguin(x))", "all x.((NonFlyingBird(x) & InAntarcticAntarcticAntarctica(x)) -> Penguin(x))", "all x.((Bird(x) & NonFlying(x)) -> Penguin(x))", "all x.((NonflyingBird(x) & InAntarctica(x)) -> Penguin(x))", "all x.((NonFlyingBird(x) & InAntarcticAntarcticAntarctic(x)) -> Penguin(x))"]}
{"id": "folio_train_1738", "nl": "Fido is a penguin or a swimmer.", "fol": "(IsPenguin(Fido) | IsSwimmer(Fido))", "prediction": ["all x.(Fido(x) -> (Penguin(x) | Swimmer(x)))", "(Penguin(Fido) | Swimmer(Fido))", "all x.(Fido(x) -> (Penguin(x) | Swimmer(x)))", "exists x.(Fido(x) & (Penguin(x) | Swimmer(x)))", "all x.(Fido(x) -> (Penguin(x) | Swimmer(x)))", "all x.((Fido(x) & (Penguin(x) | Swimmer(x))) -> (Penguin(x) | Swimmer(x)))", "exists x.(Fido(x) & (Penguin(x) | Swimmer(x)))", "all x.((Fido(x) & (Penguin(x) | Swimmer(x))) -> (Penguin(x) | Swimmer(x))))", "all x.((Penguin(x) | Swimmer(x)) -> Fido(x))", "all x.((Fido(x) & (Penguin(x) | Swimmer(x))) -> Fido(x))", "all x y.((Fido(x) & Penguin(y)) | Swimmer(x)) -> (Penguin(x) | Swimmer(x)))", "exists x.(Fido(x) & (Penguin(x) | Swimmer(x))))", "all x.((Fido(x) & (Penguin(x) | Swimmer(x))) -> (Swimmer(x)))", "all x.((Fido(x) & (Penguin(x) | Swimmer(x))) -> (Swimmer(x) | Penguin(x)))", "all x y.((Fido(x) & Penguin(y)) | Swimmer(x,y)) -> (Penguin(x) | Swimmer(x)))", "all x y.((Fido(x) & Penguin(y)) | Swimmer(y)) -> (Penguin(x) | Swimmer(x)))"]}
{"id": "folio_train_1739", "nl": "Fido eats fish they catch themselves.", "fol": "CatchesAndEatsFish(Fido)", "prediction": ["all x y.((Fido(x) & Fish(y)) -> Eats(x,y))", "all x.(Fido(x) -> EatsFish(x))", "all x y.((Fido(x) & Fish(y) & Catches(x,y)) -> Eats(x,y))", "all x y.((Fido(x) & Fish(y)) -> (Eats(x,y) & Catches(x,y)))", "all x y z.((Fido(x) & Fish(y) & Fish(z)) -> Eats(x,y,z))", "all x y.((Fido(x) & Fish(y)) -> Eats(x,y))", "all x.(Fido(x) -> (EatsFish(x) & Catches(x)))", "all x.((Fido(x) & Fish(y)) -> Eats(x,y))", "all x.(Fido(x) -> (EatsFish(x) & CatchesFish(x)))", "all x.(Fido(x) -> (EatsFish(x) & Catches(x)))", "all x y.((Fido(x) & Fish(y)) -> (Eats(x,y) & Catches(x,y)))", "all x.(Fido(x) -> EatsFish(x))", "all x y.((Fido(x) & Fish(y)) -> (Eats(x,y) & Catches(x,y)))", "all x.((Fido(x) & Fish(y)) -> (Eats(x,y) & Catches(x,y)))", "all x y z.((Fido(x) & Fish(y) & Fish(z)) -> Eats(x,y))", "all x y.((Fido(x) & Fish(y)) -> (Eats(x,y) | Catches(x,y)))"]}
{"id": "folio_train_1740", "nl": "Fido is neither a non-flying bird nor can Fido go underwater.", "fol": "(-NonFlyingBird(Fido) & -CanGoUnderwater(Fido))", "prediction": ["all x.(Fido(x) -> (-NonFlyingBird(x) & -CanGoUnderwater(x)))", "(-FlyingBird(Fido) & -UnderwaterBird(Fido))", "(-(NonFlyingBird(Fido) & -UnderwaterBird(Fido)) | (-FlyingBird(Fido) & -FlyingBird(Fido))))", "all x.(Fido(x) -> (-FlyingBird(x) & -UnderwaterBird(x)))", "all x.(Fido(x) -> (-NonFlyingBird(x) & -GoesUnderwater(x)))", "(-FlyingBird(Fido) | CanGoUnderwater(Fido)))", "-(NonFlyingBird(Fido) & -CanGoUnderwater(Fido))", "(-(NonFlyingBird(Fido) & -UnderwaterBird(Fido)) | -(NonFlyingBird(Fido) & -UnderwaterBird(Fido))))", "all x.(Fido(x) -> (NonFlyingBird(x) & -CanGoUnderwater(x)))", "-(NonFlyingBird(Fido) | CanGoUnderwater(Fido))", "-(NonFlyingBird(Fido) & -UnderwaterBird(Fido))", "all x.(Fido(x) -> (-NonFlyingBird(x) & -UnderwaterBird(x)))", "(-NonFlyingBird(Fido) & -CanGoUnderwater(Fido))", "(-(NonFlyingBird(Fido) & -UnderwaterBird(Fido)) -> -FlyingBird(Fido))", "all x.(Fido(x) -> (-NonFlying(x) & -CanGoUnderwater(x)))", "(-(NonFlyingBird(Fido) & -UnderwaterBird(Fido)) | (-FlyingBird(Fido) & -UnderwaterBird(Fido))))"]}
{"id": "folio_train_1741", "nl": "If Fido can either go underwater or is a swimmer, then Fido is a nonflying bird in Antartica.", "fol": "((CanGoUnderwater(Fido) | IsSwimmer(Fido)) -> NonFlyingBirdAntarctica(Fido))", "prediction": ["all x.((Fido(x) & (GoesUnderwater(x) | Swimmer(x))) -> NonFlyingBirdInAntartica(x))", "all x.((Bird(x) & (GoesUnderwater(x) | Swimmer(x))) -> NonFlyingInAntartica(x))", "all x.((Fido(x) & (GoesUnderwater(x) | Swimmer(x))) -> NonFlyingBird(x))", "all x.((Bird(x) & (GoesUnderwater(x) | Swimmer(x))) -> NonFlying(x))", "all x.((Fido(x) & (GoesUnderwater(x) | Swimmer(x))) -> NonflyingBirdInAntartica(x))", "all x.((Fido(x) & (GoesUnderwater(x) | Swimmer(x))) -> NonflyingBird(x))", "all x.((Bird(x) & (GoesUnderwater(x) | Swimmer(x))) -> NonflyingInAntartica(x))", "all x.((Fido(x) & (GoUnderwater(x) | Swimmer(x))) -> NonFlyingBirdInAntartica(x))", "all x.((Fido(x) & (GoesUnderwater(x) | Swimmer(x))) -> NonFlyingBirdInAntartica(x))", "all x.((Fido(x) & (GoUnderwater(x) | Swimmer(x))) -> NonFlyingBird(x))", "all x.((Bird(x) & (GoesUnderwater(x) | Swimmer(x))) -> Nonflying(x))", "all x.((Fido(x) & (GoesUnderwater(x) | Swimmer(x))) -> NonFlyingBird(x))", "all x.((Fido(x) & (GoesUnderwater(x) | Swimmer(x))) -> NonFlyingBirdInAtartica(x))", "all x.((Fido(x) & (GoUnderwater(x) | Swimmer(x))) -> NonflyingBirdInAntartica(x))", "all x.((Fido(x) & (GoesUnderwater(x) | Swimmer(x))) -> NonflyingBirdInAntartica(x))", "all x.((Fido(x) & (GosUnderwater(x) | Swimmer(x))) -> NonFlyingBirdInAntartica(x))"]}
{"id": "folio_train_1742", "nl": "All professors are teachers.", "fol": "all x.(IsProfessor(x) -> IsTeacher(x))", "prediction": ["all x.(Professor(x) -> Teacher(x))", "all x.(Professor(x) -> Teachers(x))", "all x.(Professor(x) -> Teacher(x))", "all x.exists y.(Professor(x) & Teacher(y))", "all x y.((Professor(x) & Teacher(y)) -> Teacher(x))", "all x y.((Professor(x) & Professor(y)) -> Teacher(x))", "all x.exists y.(Professor(x) & Professor(y) & Teacher(x))", "all x.exists y.(Professor(x) & Professor(y) & Teacher(y))", "all x y.((Professor(x) & Teacher(y)) -> Teachers(x))", "all x y.((Professor(x) & Teacher(y)) -> Becomes(x,y))", "all x.exists y.(Professor(x) & Teacher(y) & Teacher(y))", "all x y.((Professor(x) & Teacher(y)) -> Is(x,y))", "all x y.((Professor(x) & Professor(y)) -> Teachers(x))", "all x y.((Professor(x) & Teacher(y)) -> Teacher(x,y))", "all x.exists y.(Professor(x) & Professor(y) & Teacher(x,y))", "all x.(Principal(x) -> Teacher(x))"]}
{"id": "folio_train_1743", "nl": "All researchers are professors.", "fol": "all x.(IsResearcher(x) -> IsProfessor(x))", "prediction": ["all x.(Researcher(x) -> Professor(x))", "all x.(Researcher(x) -> Professor(x))", "all x y.((Researcher(x) & Professor(y)) -> Professor(x))", "all x y.((Researcher(x) & Professor(y)) -> Becomes(x,y))", "all x y.((Researcher(x) & Professor(y)) -> Professor(x))", "all x y.((Researcher(x) & Professor(y)) -> Is(x,y))", "all x.((Researcher(x) & Professor(x)) -> Professor(x))", "all x y.((Researcher(x) & Professor(y)) -> Professor(x,y))", "all x.exists y.(Researcher(x) & Professor(y))", "all x.(Researcher(x) -> Professor(x))", "(all x.(Researcher(x) -> Professor(x)))", "all x y.((Researcher(x) & Professor(y)) -> Professor(x,y))", "all x.exists y.(Researcher(x) & Professor(y) & WorksAt(x,y))", "all x.((Researcher(x) & Professor(x)) -> Professor(x))", "all x.exists y.(Researcher(x) & Professor(y) & WorksFor(x,y))", "all x.exists y.(Researcher(x) & Professor(y) & Educated(x,y))"]}
{"id": "folio_train_1744", "nl": "No teachers are students.", "fol": "all x.(IsTeacher(x) -> -IsStudent(x))", "prediction": ["-exists x.(Teacher(x) & Student(x))", "all x.(Teacher(x) -> -Student(x))", "-exists x.(Teacher(x) & Students(x))", "(-exists x.(Teacher(x) & Student(x)))", "-exists x.(Teacher(x) & -Student(x))", "-exists x.(Teacher(x) & Teacher(x))", "exists x.(Teacher(x) & -Student(x))", "-exists x.(Teacher(x) & Teacher(x) & Student(x))", "all x.(Teacher(x) -> Student(x))", "\u2013exists x.(Teacher(x) & Student(x))", "-exists x.(Teacher(x) & Teacher(y) & Student(z))", "-exists x y.(Teacher(x) & Student(y))", "(exists x.(Teacher(x) & Student(x)))", "(-exists x.(Teacher(x) & Students(x)))", "-exists x.(Teacher(x) & Teacher(y) & Student(x))", "all x.(Teacher(x) -> NoStudent(x))"]}
{"id": "folio_train_1745", "nl": "All people who study are students.", "fol": "all x.(IsStudying(x) -> IsStudent(x))", "prediction": ["all x.(Student(x) -> Student(x))", "all x.(Studies(x) -> Student(x))", "all x.(Students(x) -> Student(x))", "all x.(Study(x) -> Student(x))", "all x.(Student(x) -> Student(x))", "all x.(Student(x) -> Students(x))", "all x.(Studies(x) -> Students(x))", "all x.exists y.(Student(x) & Person(y) & Studies(x,y))", "all x y.((Person(x) & Study(y)) -> Student(x))", "all x.exists y.(Student(x) & Person(y) & Study(x,y))", "all x.(Studies(x) -> Student(x))", "all x.(StudiesPerson(x) -> Student(x))", "all x.(StudiesStudent(x) -> Student(x))", "all x.(StudyPerson(x) -> Student(x))", "all x y.((Person(x) & Study(y)) -> Student(x,y))", "all x.exists y.(Student(x) & Person(y) & Study(y))"]}
{"id": "folio_train_1746", "nl": "Leon is not studying or a researcher.", "fol": "((-IsStudying(Leon) & -IsResearcher(Leon)) | (IsStudying(Leon) & IsResearcher(Leon)))", "prediction": ["all x.(Leon(x) -> (-Studying(x) | Researcher(x)))", "(-Studying(Leon) & -Researcher(Leon))", "(-Student(Leon) & -Researcher(Leon))", "all x.(Leon(x) -> (-Student(x) & -Researcher(x)))", "all x.(Leon(x) -> (-Studying(x) & -Researcher(x)))", "all x.(Leon(x) -> (-Student(x) | Researcher(x)))", "all x.(Leon(x) -> (-Studying(x) | -Researcher(x)))", "all x.(Leon(x) -> (-Study(x) | Researcher(x)))", "all x.(Leon(x) -> (-Studies(x) & -Researcher(x)))", "all x.(Leon(x) -> (-Studying(x) | Researcher(x)))", "Leon is -Student(Leon) & -Researcher(Leon))", "All x.(Leon(x) -> (-Studying(x) | Researcher(x)))", "Leon is notStudyingOrResearcher(Leon)", "all x.(Leon(x) -> (-Studies(x) | Researcher(x)))", "(-Study(Leon) & -Researcher(Leon))", "(-Studying(Leon) | Researcher(Leon))"]}
{"id": "folio_train_1747", "nl": "If Leon is not studying, then Leon is a teacher.", "fol": "(-IsStudying(Leon) -> IsTeacher(Leon))", "prediction": ["all x.((Leon(x) & -Studying(x)) -> Teacher(x))", "all x.((Leon(x) & -Studing(x)) -> Teacher(x))", "all x.((Leno(x) & -Studying(x)) -> Teacher(x))", "all x.((Leon(x) & -Studies(x)) -> Teacher(x))", "all x.((Lond(x) & -Studying(x)) -> Teacher(x))", "all x.(((Leon(x) & -Studying(x)) -> Teacher(x))", "all x.((Leon(x) & -Study(x)) -> Teacher(x))", "all x.((Leon(x) & NotStudying(x)) -> Teacher(x))", "all x.((London(x) & -Studying(x)) -> Teacher(x))", "all x.((Londe(x) & -Studying(x)) -> Teacher(x))", "all x.((Len(x) & -Studying(x)) -> Teacher(x))", "all x.((Lord(x) & -Studying(x)) -> Teacher(x))", "all x.((Leon(x) & -Studying(x)) -> Teacher(x))", "all x.((Leon(x) & -Studying(x)) -> Teachers(x))", "all x.((Leon(x) & -Studying(x) & Leon(x)) -> Teacher(x))", "all x.((Leon(x) & -Studying(x)) -> Teacher(x))"]}
{"id": "folio_train_1748", "nl": "Leon is a professor.", "fol": "IsProfessor(Leon)", "prediction": ["all x.(Leon(x) -> Professor(x))", "all x.(Professor(x) -> Leon(x))", "(Professor(Leon) & -Professor(Leon))", "exists x.(Professor(x) & Leon(x))", "(Professor(Leon)", "(Professor(Leon) & Educates(Leon))", "Leon is a professor.", "Leon is Professor.", "(Professor(Leon) & Professor(Leon))", "(Professor(Leon) & -Professor(Leon))", "all x.(Leon(x) -> Professor(x))", "all x.(Professor(x) -> Leon(x))", "(Professor(Leon))", "(Professor(Leon) & Educated(Leon))", "all x.(Professor(x) -> Leon(x))", "(Professor(Leon) & Tutor(Leon))"]}
{"id": "folio_train_1749", "nl": "Leon is neither a student nor a researcher.", "fol": "(-IsStudent(Leon) & -IsResearcher(Leon))", "prediction": ["(-Student(Leon) & -Researcher(Leon))", "all x.(Leon(x) -> (-Student(x) & -Researcher(x)))", "all x.((Leon(x) & -Student(x) & -Researcher(x)) -> -Student(x) & -Researcher(x))", "all x.(Leon(x) -> (-Student(x) | Researcher(x)))", "all x.((Leon(x) & -Student(x) & -Researcher(x)) -> -Student(x) & Researcher(x))", "all x.(Leon(x) -> -Student(x) & -Researcher(x))", "-(Student(Leon) & -Researcher(Leon))", "all x.((Leon(x) & -Student(x) & -Researcher(x)) -> -Researcher(x))", "-(Student(Leon) | Researcher(Leon))", "all x.(Leon(x) -> (-Student(x) | -Researcher(x)))", "all x.(Leon(x) -> (-Student(x) & -Researcher(x)))", "all x.((Leon(x) & -Student(x) | Researcher(x)) -> -Student(x) & -Researcher(x))", "all x.((Leon(x) & -Student(x) & -Researcher(x)) -> -Student(x) & Researcher(x))", "all x.((Leon(x) & -Student(x) | Researcher(x)) -> -Student(x) & Researcher(x))", "all x.((Leon(x) & -Student(x) & -Researcher(x)) -> -Student(x) & -Researcher(x)))", "all x.((Leon(x) & -Student(x) & -Researcher(x)) -> (-Student(x) & -Researcher(x)))"]}
{"id": "folio_train_1750", "nl": "If Leon is not a researcher, then Leon is a student.", "fol": "(-IsResearcher(Leon) -> IsStudent(Leon))", "prediction": ["all x.((Leon(x) & -Researcher(x)) -> Student(x))", "all x.((Leno(x) & -Researcher(x)) -> Student(x))", "all x.((Researcher(x) & -Researcher(x)) -> Student(x))", "all x.((Lond(x) & -Researcher(x)) -> Student(x))", "all x.((Lenon(x) & -Researcher(x)) -> Student(x))", "all x.(((Leon(x) & -Researcher(x)) -> Student(x))", "all x.((Researcher(x) & Leon(x)) -> Student(x))", "all x.((Educator(x) & -Researcher(x)) -> Student(x))", "all x.((Lorean(x) & -Researcher(x)) -> Student(x))", "all x.((Student(x) & -Researcher(x)) -> Student(x))", "all x.((Londe(x) & -Researcher(x)) -> Student(x))", "all x.((Len(x) & -Researcher(x)) -> Student(x))", "all x.((Researcher(x) & Leon-Researcher(x)) -> Student(x))", "all x.((NotResearcher(x) & Leon(x)) -> Student(x))", "all x.((Leon(x) & -Researcher(x) & Student(x)) -> Student(x))", "all x.((Researcher(x) & Leo(x)) -> Student(x))"]}
{"id": "folio_train_1751", "nl": "A cutman is responsible for preventing and treating physical damage to a fighter.", "fol": "all x.((IsCutman(x) -> PreventPhysicalDamage(x,PhysicalDamage)) & TreatPhysicalDamage(x,PhysicalDamage))", "prediction": ["all x y.((Cutman(x) & Fighter(y)) -> (PreventsPhysicalDamage(x,y) & TreatsPhysicalDamage(x,y)))", "all x y.((Cutman(x) & Fighter(y)) -> (PreventsAndTreatsPhysicalDamage(x,y) & TreatsPhysicalDamage(x,y)))", "all x y.((Cutman(x) & Fighter(y)) -> (PreventsAndTreatsPhysicalDamage(x,y) & PreventsAndTreatsPhysicalDamage(x,y)))", "all x y.((Cutman(x) & Fighter(y)) -> (PreventsDamage(x,y) & TreatsDamage(x,y)))", "all x y.((Cutman(x) & Fighter(y)) -> (PreventsAndTreatsPhysicalDamage(x,y) & To(x,y)))", "all x.(Cutman(x) -> (PreventsPhysicalDamage(x) & TreatsPhysicalDamage(x)))", "all x y.((Cutman(x) & Fighter(y)) -> (PreventsAndTreatsPhysicalDamage(x,y) | TreatsPhysicalDamage(x,y)))", "all x y.((Cutman(x) & Fighter(y)) -> (PreventsPhysicalDamage(x) & TreatsPhysicalDamage(x,y)))", "all x.(Cutman(x) -> (PreventsAndTreatsPhysicalDamage(x) & Fighter(x)))", "all x y.((Cutman(x) & Fighter(y)) -> PreventsAndTreatsPhysicalDamage(x,y))", "all x y.((Cutman(x) & Fighter(y)) -> (Prevents(x,y) & Treats(x,y)))", "all x y z.((Cutman(x) & Fighter(y) & PhysicalDamage(z)) -> PreventsAndTreats(x,y,z))", "all x.(Cutman(x) -> (PreventsPhysicalDamage(x) & TreatsPhysicalDamage(x) & Fighter(x)))", "all x y.((Cutman(x) & Fighter(y)) -> (PreventsPhysicalDamage(x,y) & TreatsPhysicalDamageTo(x,y)))", "all x y.((Cutman(x) & Fighter(y)) -> (PreventsAndTreatsPhysicalDamage(x,y)))", "all x y z.((Cutman(x) & Fighter(y) & PhysicalDamage(z)) -> (Prevents(x,z) & Treats(x,y,z)))"]}
{"id": "folio_train_1752", "nl": "Cutmen appear in matches such as a boxing, kickboxing or a mixed martial arts bout. ", "fol": "all x.((IsCutman(x) -> AppearsInMatch(x,BoxingMatch)) | AppearsInMatch(x,KickboxingMatch) | AppearsInMatch(x,MixedMartialArtsBout))", "prediction": ["all x.(Cutmen(x) -> (AppearsInBoxing(x) | AppearsInKickboxing(x) | AppearsInMixedMartialArts(x)))", "all x y.((Cutmen(x) & (Boxing(y) | Kickboxing(y) | MixedMartialArts(y))) -> AppearsInMatch(x,y))", "all x.(Cutmen(x) -> (AppearInMatch(x,boxing) | AppearInMatch(x,kickboxing) | AppearInMatch(x,mixedMartialArts)))", "all x.(Cutmen(x) -> (AppearsInMatch(x,boxing) | AppearsInMatch(x,kickboxing) | AppearsInMatch(x,mixedMartialArts)))", "all x.(Cutmen(x) -> (AppearsInBoxing(x) | AppearsInKickboxing(x) | AppearsInMixedMartialArts(x)))", "all x.(Cutmen(x) -> (AppearsInMatch(x,boxing) | AppearsInMatch(x,kickboxing) | AppearsInMatch(x,mixedMartialArts)))", "all x.(Cutmen(x) -> (AppearsInBoxingMatch(x) | AppearsInKickboxingMatch(x) | AppearsInMixedMartialArtsMatch(x)))", "all x.(Cutmen(x) -> (AppearsInMatch(x,boxing) | AppearsInMatch(x,kickboxing) | AppearsInMatch(x,mixedMartialArts)))", "all x y.((Cutmen(x) & Match(y)) -> (AppearsIn(x,y) & (Boxing(y) | Kickboxing(y) | MixedMartialArts(y))))", "all x y.((Cutmen(x) & Match(y)) -> (AppearsIn(x,y) & (Boxing(y) | Kickboxing(y) | MixedMartialArts(y))))", "all x y.((Cutmen(x) & (Boxing(y) | Kickboxing(y) | MixedMartialArts(y))) -> AppearsInMatch(x,y))", "all x.(Cutmen(x) -> (exists y.(Boxing(y) | Kickboxing(y) | MixedMartialArts(y)) & AppearsIn(x,y)))", "all x y z.((Cutmen(x) & Match(y) & (Boxing(z) | Kickboxing(z) | MixedMartialArts(z))) -> AppearsIn(x,y))", "all x y z.((Cutmen(x) & Match(y) & (Boxing(z) | Kickboxing(z) | MixedMartialArts(z))) -> AppearsIn(x,y,z))", "all x.(Cutmen(x) -> (AppearsInMatch(x,boxing) | AppearsInMatch(x,kickboxing) | AppearsInMatch(x,mixedMartialArts(x)))", "all x y z.((Cutmen(x) & Match(y) & (Boxing(z) | Kickboxing(z) | MixedMartialArts(y))) -> AppearsIn(x,y))"]}
{"id": "folio_train_1753", "nl": "Cutmen typically handle swelling, nosebleeds and lacerations. ", "fol": "all x.((IsCutman(x) -> HandleInjuries(x,SwellingInjury)) & HandleInjuries(x,NosebleedInjury) & HandleInjuries(x,LacerationInjury))", "prediction": ["all x.(Cutman(x) -> (HandlesSwelling(x) & HandlesNasalbleeds(x) & HandlesLacerations(x)))", "all x.(Cutmen(x) -> (HandlesSwelling(x) & HandlesNasalbleeds(x) & HandlesLacerations(x)))", "all x.(Cutman(x) -> (HandlesSwelling(x) | HandlesNasalbleeds(x) | HandlesLacerations(x)))", "all x.(Cutman(x) -> (HandlesSwelling(x) & HandlesNasebleeds(x) & HandlesLacerations(x)))", "all x.(Cutmen(x) -> (HandlesSwelling(x) | HandlesNasalbleeds(x) | HandlesLacerations(x)))", "all x.(Cut(x) -> (HandlesSwelling(x) & HandlesNasalbleeds(x) & HandlesLacerations(x)))", "all x.(CutMen(x) -> (HandlesSwelling(x) & HandlesNasalbleeds(x) & HandlesLacerations(x)))", "all x.(Cutmen(x) -> (HandlesSwelling(x) & HandlesNasebleeds(x) & HandlesLacerations(x)))", "all x.(Cutman(x) -> (ManagesSwelling(x) & HandlesNasalbleeds(x) & HandlesLacerations(x)))", "all x.(Cutman(x) -> (HandlesSwelling(x) & HandlesNasalbleeds(x) & HandlesLacerations(x)))", "all x.(Cutmen(x) -> (ManagesSwelling(x) & HandlesNasalbleeds(x) & HandlesLacerations(x)))", "all x.(Cutmen(x) -> (HandlesSwelling(x) & HandlesNasalbleeds(x) & HandlesLacerations(x)))", "all x.(Cutter(x) -> (HandlesSwelling(x) & HandlesNasalbleeds(x) & HandlesLacerations(x)))", "all x.(Cutman(x) -> (HandlesSwelling(x) & HandlesNosebleeds(x) & HandlesLacerations(x)))", "all x.(Cutmen(x) -> (HandleSwelling(x) & HandleNasalbleeds(x) & HandleLacerations(x)))", "all x.(Cutman(x) -> (HandlesSwollen(x) & HandlesNasalbleeds(x) & HandlesLacerations(x)))"]}
{"id": "folio_train_1754", "nl": "Jack is a cutman.", "fol": "IsCutman(Jack)", "prediction": ["all x.((Jack(x) & Cutman(x)) -> Cutman(x))", "all x.(Jack(x) -> Cutman(x))", "all x.(Cutman(x) -> Jack(x))", "All x.((Jack(x) & Cutman(x)) -> Cutman(x))", "All x.(Jack(x) -> Cutman(x))", "(Cutman(Jack) & Cutman(Jack))", "all x.((Jack(x) & Cutman(x)) -> Cutman(x))", "all x.(Cutman(x) -> Jack(x))", "all x.((Jack(x) & Cutman(x)) -> CutMan(x))", "all x.(Hack(x) -> Cutman(x))", "all x.((Jack(x) & Cutman(x)) -> Is(x,y))", "(Cutman(Jack) | Cutman(Jack))", "all x.(Cutter(x) -> Jack(x))", "(Cutter(Jack) & Cutman(Jack))", "all x.(Kickman(x) -> Cutman(x))", "all x.((Jack(x) & Cutman(x)) -> -Cutman(x))"]}
{"id": "folio_train_1755", "nl": "No cutmen appear in boxing matches.", "fol": "-exists x.(IsCutman(x) & AppearsInMatch(x,BoxingMatch))", "prediction": ["-exists x.(Cutmen(x) & BoxingMatch(x))", "-exists x.(Cutmen(x) & InBoxingMatch(x))", "all x y.((Cutmen(x) & BoxingMatch(y)) -> -AppearsIn(x,y))", "-exists x.(Cutman(x) & BoxingMatch(x))", "all x.((Cutmen(x) & BoxingMatch(x)) -> -AppearsIn(x,boxingMatch))", "all x y.((Cutmen(x) & BoxingMatch(y)) -> -Appears(x,y))", "all x.(Cutmen(x) -> -AppearsInBoxingMatch(x))", "all x.(Cutmen(x) -> -AppearsInBoxingMatch(x))", "all x.((Cutmen(x) & BoxingMatch(x)) -> -AppearsIn(x,boxing))", "all x y.((Cutmen(x) & BoxingMatch(y)) -> -Appears(x,y))", "all x.((Cutmen(x) & BoxingMatch(y)) -> -AppearsIn(x,y))", "all x y.((Cutmen(x) & BoxingMatch(y)) -> -AppearsIn(x,y))", "-exists x.(Cutmen(x) & BoxingMatch(y) & -AppearsIn(x,y))", "all x.((Cutmen(x) & BoxingMatch(x)) -> -Appears(x))", "-exists x.(Cutmen(x) & BoxingMatch(y) & Affects(x,y))", "all x.((Cutmen(x) & BoxingMatch(x)) -> -Appears(x))"]}
{"id": "folio_train_1756", "nl": "If someone is not a cutman, then they cannot handle nosebleeds.", "fol": "all x.(-IsCutman(x) -> -HandleInjuries(x,NosebleedInjury))", "prediction": ["all x.((Cutman(x) & -Cutman(x)) -> -HandlesNasalbleeds(x))", "all x.((Cutman(x) & -Cutman(x)) -> -HandlesNasebleeds(x))", "all x.((Person(x) & -Cutman(x)) -> -HandlesNasalbleeds(x))", "all x.((Person(x) & -Cutman(x)) -> -HandlesNasebleeds(x))", "all x.((Cutman(x) & -Cutman(x)) -> -HandlesNastbleeds(x))", "all x.((Cutman(x) & -Cutman(x)) -> -HandleNasalbleeds(x))", "all x.((Cutman(x) & -HandlesNasebleeds(x)) -> -HandlesNasebleeds(x))", "all x.((Cutman(x) & -Cutman(x)) -> -HandlesNassaugers(x))", "all x.((Person(x) & -Cutman(x)) -> -HandlesNastbleeds(x))", "all x.((Cutman(x) & -Cutman(x)) -> -HandlesNasals(x))", "all x.((Cutman(x) & -Cutman(x)) -> -CanHandleNasalbleeds(x))", "all x.((Cutter(x) & -Cutman(x)) -> -HandlesNasalbleeds(x))", "all x.((Cutman(x) & -Cutman(x)) -> -HandlesNasalsbleeds(x))", "all x.((Cutman(x) & -Cutman(x)) -> -HandleNasebleeds(x))", "all x.((Cutman(x) & -Cutman(x)) -> -HandlesNasebleeds(x))", "all x.((Nastbleed(x) & -Cutman(x)) -> -Handles(x,nosebleeds))"]}
{"id": "folio_train_1757", "nl": "Jack can treat physical damage.", "fol": "TreatPhysicalDamage(Jack,PhysicalDamage)", "prediction": ["all x.(Jack(x) -> TreatsPhysicalDamage(x))", "all x.(Jack(x) -> CanTreatPhysicalDamage(x))", "all x y.((Jack(x) & PhysicalDamage(y)) -> Treats(x,y))", "all x y.((Jack(x) & PhysicalDamage(y)) -> CanTreat(x,y))", "all x.((Jack(x) & PhysicalDamage(x)) -> Treats(x,y))", "all x.((Jack(x) & PhysicalDamage(y)) -> Treats(x,y))", "all x.((Jack(x) & PhysicalDamage(x)) -> CanTreat(x,y))", "All x.(Jack(x) -> TreatsPhysicalDamage(x))", "all x.(Jack(x) -> TreatPhysicalDamage(x))", "all x.((Jack(x) & PhysicalDamage(y)) -> CanTreat(x,y))", "all x.(Jack(x) -> (TreatsPhysicalDamage(x) & TreatsPhysicalDamage(x)))", "(TreatsPhysicalDamage(Jack) & TreatsPhysicalDamage(Jack))", "exists x.(Jack(x) & TreatsPhysicalDamage(x))", "all x y.((Jack(x) & PhysicalDamage(y)) -> Treatable(x,y))", "all x.(Jack(x) -> TreatsPhysicalDamage(x))", "all x y.((Jack(x) & PhysicalDamage(y)) -> Treat(x,y))"]}
{"id": "folio_train_1758", "nl": "The Mona Lisa is one of the world's best-known artworks.", "fol": "(IsPainting(MonaLisa) & IsWorldsBestKnownArtwork(MonaLisa))", "prediction": ["all x.(MonaLisa(x) -> BestKnownArtwork(x))", "All x.(MonaLisa(x) -> BestKnownArtwork(x))", "all x y.((MonaLisa(x) & Artwork(y)) -> BestKnown(x,y))", "all x.((MonaLisa(x) & BestKnownArtwork(x)) -> MonaLisa(x))", "All x.((MonaLisa(x) & BestKnownArtwork(x)) -> MonaLisa(x))", "all x.((MonaLisa(x) & BestKnownArtwork(x)) -> BestKnownArtwork(x))", "((MonaLisa(MonaLisa) & BestKnownArtwork(MonaLisa)))", "all x.(MonaLisa(x) -> BestKnowledgedArtwork(x))", "all x.(MonaLisa(x) -> BestKnownedArtwork(x))", "All x.(MonaLisa(x) -> BestKnowledgedArtwork(x))", "all x.(MonaLisa(x) -> OneOfWorldsBestKnownArtworks(x))", "all x.(MonaLisa(x) -> BestKnownArtwork(x))", "All x.((MonaLisa(x) & BestKnownArtwork(x)) -> BestKnownArtwork(x))", "All x.(MonaLisa(x) -> BestKnownedArtwork(x))", "all x.(MonaLisa(x) -> WorldsBestKnownArtwork(x))", "all x y.((MonaLisa(x) & Artwork(y)) -> BestKnownInWorld(x,y))"]}
{"id": "folio_train_1759", "nl": "The Mona Lisa is a portrait painted by Leonardo da Vinci.", "fol": "(IsPaintedBy(MonaLisa,LeonardodaVinci) & IsPortrait(MonaLisa))", "prediction": ["(Portrait(MonaLisa) & PaintedByLeonardoDaVinci(MonaLisa))", "all x.(MonaLisa(x) -> (Portrait(x) & PaintedByLeonardoDaVinci(x)))", "All x.(MonaLisa(x) -> (Portrait(x) & PaintedByLeonardoDaVinci(x)))", "all x.(MonaLisa(x) -> (PortraitPaintedByLeonardoDaVinci(x)))", "all x.(MonaLisa(x) -> PortraitPaintedByLeonardoDaVinci(x))", "MonaLisa(MonaLisa) -> (PortraitPaintedByLeonardoDaVinci(MonaLisa)))", "All x.(MonaLisa(x) -> (PortraitPaintedByLeonardoDaVinci(x)))", "(PortraitPaintedByLeonardoDaVinci(MonaLisa))", "MonaLisa(MonaLisa) -> (PortraitPaintedByLeonardoDaVinci(MonaLisa) & PaintedByDaVinci(MonaLisa)))", "(PaintingMonaLisa(MonaLisa) & LeonardoDaVinci(MonaLisa))", "MonaLisa(MonaLisa) -> (PortraitPaintedByLeonardoDaVinci(MonaLisa) & PaintedByLeonardoDaVinci(MonaLisa)))", "MonaLisa(MonaLisa) -> (PortraitPaintedByLeonardoDaVinci(MonaLisa) & PortraitPaintedByLeonardoDaVinci(MonaLisa)))", "All x.(MonaLisa(x) -> PortraitPaintedByLeonardoDaVinci(x))", "all x.(MonaLisa(x) -> (PortraitPaintedByLeonardoDaVinci(x) & PaintedByLeonardoDaVinci(x)))", "all x.(MonaLisa(x) -> (PortraitPaintedByLeonardoDaVinci(x) & PaintedByDaVinci(x)))", "MonaLisa(MonaLisa) -> (PortraitPaintedByLeonardoDaVinci(MonaLisa) & PortraitPaintedByDaVinci(MonaLisa)))"]}
{"id": "folio_train_1760", "nl": "Leonardo da Vinci was a scientist and painter.", "fol": "(IsScientist(LeonardodaVinci) & IsPainter(LeonardodaVinci))", "prediction": ["all x.(LeonardoDaVinci(x) -> (Scientist(x) & Painter(x)))", "Leonardo da Vinci ((Scientist(Scientist) & Painter(Scientist)))", "Leonardo da Vinci ((Scientist(s) & Painter(s)))", "all x.((Leonardo da Vinci(x) & Scientist(x) & Painter(x)) -> LeonardoDaVinci(x))", "all x.(LeonardoDaVinci(x) -> (Scientist(x) & Painter(x)))", "(Scientist(LeonardoDaVinci) & Painter(LeonardoDaVinci))", "Leonardo da Vinci ((Scientist(Scientist) & Painter(Scientist)) & Painter(Scientist))", "Leonardo da Vinci ((Scientist(x) & Painter(x)))", "Leonardo da Vinci (Scientist(d) & Painter(d))", "all x.((Leonardo da Vinci(x) & Scientist(x) & Painter(x)) -> Painter(x))", "Leonardo da Vinci (Scientist(Leonardo) & Painter(Leonardo))", "Leonardo da Vinci ((Scientist(Scientist) & Painter(Scientist)) -> Painter(Scientist))", "all x.((Leonardo da Vinci(x) & Scientist(x) & Painter(x)) -> ScientistAndPainter(x))", "Leonardo da Vinci ((Scientist(Scientist) & Painter(Scientist) & Painter(Scientist))", "Leonardo da Vinci ((Scientist) & Painter))", "Leonardo da Vinci ((Scientist(Scientist) & Painter(Scientist)) & Painter(Painter))"]}
{"id": "folio_train_1761", "nl": "Painting genres are history, portrait, animal, landscape, and still life.", "fol": "all x.(IsPainting(x) -> (IsHistoryGenre(x) | IsPortrait(x) | IsAnimalGenre(x) | IsLandscapeGenre(x) | IsStillLifeGenre(x)))", "prediction": ["all x.(PaintingGenre(x) -> (History(x) | Portrait(x) | Animal(x) | Landscape(x) | StillLife(x)))", "all x.(Painting(x) -> (History(x) | Portrait(x) | Animal(x) | Landscape(x) | StillLife(x)))", "all x.(PaintingGenre(x) -> (History(x) | Portrait(x) | Animal(x) | Landscape(x) | StillLife(x)))", "all x.(PaintingGenre(x) -> (HistoryGenre(x) | PortraitGenre(x) | AnimalGenre(x) | LandscapeGenre(x) | StillLifeGenre(x)))", "(all x.(PaintingGenre(x) -> (History(x) | Portrait(x) | Animal(x) | Landscape(x) | StillLife(x))))", "(all x.(PaintingGenre(x) -> (History(x) | Portrait(x) | Animal(x) | Landscape(x) | StillLife(x)))", "all x.(PaintingGenre(x) -> ((History(x) | Portrait(x) | Animal(x) | Landscape(x) | StillLife(x))))", "all x y.((PaintingGenre(x) & (History(y) | Portrait(y) | Animal(y) | Landscape(y) | StillLife(y))) -> PaintingGenre(x,y))", "all x.(PaintingGenre(x) -> (History(x) & Portrait(x) & Animal(x) & Landscape(x) & StillLife(x)))", "all x.((PaintingGenre(x) & (History(x) | Portrait(x) | Animal(x) | Landscape(x) | StillLife(x))) -> PaintingGenre(x))", "all x.(Painting(x) -> (History(x) | Portrait(x) | Animal(x) | Landscape(x) | StillLife(x)))", "(All x.(PaintingGenre(x) -> (History(x) | Portrait(x) | Animal(x) | Landscape(x) | StillLife(x))))", "exists x.(PaintingGenre(x) & (History(x) | Portrait(x) | Animal(x) | Landscape(x) | StillLife(x)))", "all x.(Painting(x) -> ((History(x) | Portrait(x) | Animal(x) | Landscape(x) | StillLife(x))))", "(All x.(PaintingGenre(x) -> (History(x) | Portrait(x) | Animal(x) | Landscape(x) | StillLife(x)))", "(all x.(Painting(x) -> (History(x) | Portrait(x) | Animal(x) | Landscape(x) | StillLife(x))))"]}
{"id": "folio_train_1762", "nl": "One of the world's best-known artworks is painted by a scientist.", "fol": "exists x.(IsWorldsBestKnownArtwork(x) & exists y.(IsScientist(y) & IsPaintedBy(x,y)))", "prediction": ["all x y.((Artwork(x) & Scientist(y)) -> PaintedBy(x,y))", "all x.((Artwork(x) & BestKnown(x)) -> PaintedByScientist(x))", "all x.((Artwork(x) & WorldBestKnown(x)) -> PaintedByScientist(x))", "all x.((Artwork(x) & BestKnownInWorld(x)) -> PaintedByScientist(x))", "all x y.((Artwork(x) & Scientist(y) & BestKnown(x,y)) -> PaintedBy(x,y))", "all x y z.((Artwork(x) & Scientist(y) & BestKnown(x,y)) -> PaintedBy(x,y))", "all x.((Artwork(x) & BestKnowledged(x)) -> PaintedByScientist(x))", "all x.((Artwork(x) & BestKnowned(x)) -> PaintedByScientist(x))", "all x y z.((Artwork(x) & Scientist(y) & BestKnown(x,y)) -> PaintedBy(x,z))", "all x y.((Artwork(x) & Scientist(y)) -> Paints(x,y))", "all x y.((Artwork(x) & Artist(y) & BestKnown(x,y)) -> PaintedBy(x,y))", "all x y z.((Artwork(x) & Artist(y) & Scientist(z)) -> PaintedBy(x,y,z))", "all x y z.((Artwork(x) & Scientist(y) & BestKnown(x,y)) -> PaintedBy(y,z))", "all x y.((Artwork(x) & BestKnown(x,y)) -> PaintedByScientist(x))", "all x y.((Artwork(x) & Scientist(y) & Paints(x,y)) -> BestKnown(x))", "all x y.((Artwork(x) & Scientific(y)) -> PaintedBy(x,y))"]}
{"id": "folio_train_1763", "nl": "Leonardo da Vinci has artworks in the landscape genre.", "fol": "exists x.(Artwork(x) & IsLandscapeGenre(x) & CreatedBy(x,LeonardodaVinci))", "prediction": ["all x.(LeonardoDaVinci(x) -> exists y.(Landscape(y) & Artwork(x,y)))", "all x y.((LeonardoDaVinci(x) & Landscape(y)) -> HasArtwork(x,y))", "all x y.((LeonardoDaVinci(x) & Landscape(y)) -> HasArtworks(x,y))", "all x.(LeonardoDaVinci(x) -> exists y.(Landscape(y) & Has(x,y)))", "all x.(LeonardoDaVinci(x) -> exists y.(Landscape(y) & WorksIn(x,y)))", "all x.(LeonardoDaVinci(x) -> HasArtworksInLandscape(x))", "all x.(LeonardoDaVinci(x) -> (ArtworkInLandscape(x) | ArtworkInLandscape(x)))", "all x.(LeonardoDaVinci(x) -> exists y.(LandscapeArtwork(y) & Has(x,y)))", "all x.(LeonardoDaVinci(x) -> exists y.(Artwork(y) & Landscape(y) & Has(x,y)))", "all x.(LeonardoDaVinci(x) -> exists y.(Artwork(y) & Landscape(z) & Has(x,y)))", "all x.(LeonardoDaVinci(x) -> exists y.(Landscape(y) & Artwork(x,y))))", "all x.(LeonardoDaVinci(x) -> exists y.(Landscape(y) & Artwork(z) & In(x,y,z))))", "all x.(LeonardoDaVinci(x) -> (Artwork(x) & Landscape(x)))", "all x.(LeonardoDaVinci(x) -> exists y.(Artwork(y) & Landscape(z) & Has(x,y,z)))", "all x.(LeonardoDaVinci(x) -> exists y.(Landscape(y) & Has(x,y))))", "all x.((LeonardoDaVinci(x) & LandscapeArtwork(x)) -> Has(x,y))"]}
{"id": "folio_train_1764", "nl": "No world's best-known artworks are portraits.", "fol": "-exists x.(IsWorldsBestKnownArtwork(x) & IsPortrait(x))", "prediction": ["-exists x.(WorldsBestKnownArtwork(x) & Portrait(x))", "-exists x.(WorldBestKnownArtwork(x) & Portrait(x))", "-exists x.(Artwork(x) & Portrait(x))", "-exists x.(Artwork(x) & BestKnown(x) & Portrait(x))", "-exists x.((Artwork(x) & BestKnown(x)) & Portrait(x))", "-exists x.(World(x) & BestKnownArtwork(x) & Portrait(x))", "-exists x.(World'sBestKnownArtwork(x) & Portrait(x))", "-exists x.(BestKnownArtwork(x) & Portrait(x))", "-exists x.(Artwork(x) & BestKnown(x)) & Portrait(x))", "-exists x.(Artwork(x) & BestKnown(x))", "-exists x.(WorldSameArtwork(x) & Portrait(x))", "-exists x.(WorldsBestKnowledgedArtwork(x) & Portrait(x))", "all x.((Artwork(x) & BestKnown(x)) -> Portrait(x))", "-exists x.(MostKnownArtwork(x) & Portrait(x))", "-exists x.(BestKnowledgedArtwork(x) & Portrait(x))", "-exists x.(World(x) & BestKnownArtwork(x)) & Portrait(x))"]}
{"id": "folio_train_1765", "nl": "No professional tennis umpires are professional tennis players.", "fol": "all x.(IsProfessionalTennisUmpire(x) -> -IsProfessionalTennisPlayer(x))", "prediction": ["-exists x.(ProfessionalTennisUmpire(x) & ProfessionalTennisPlayer(x))", "all x.(ProfessionalTennisUmpire(x) -> -ProfessionalTennisPlayer(x))", "(-exists x.(ProfessionalTennisUmpire(x) & ProfessionalTennisPlayer(x)))", "-exists x.(ProfessionalTennisUmpire(x) & -ProfessionalTennisPlayer(x))", "all x.(ProfessionalTennisUmpire(x) -> ProfessionalTennisPlayer(x))", "-exists x.(ProfessionalTennisUrpire(x) & ProfessionalTennisPlayer(x))", "-exists x.(ProfessionalTennisUmbrella(x) & ProfessionalTennisPlayer(x))", "-all x.(ProfessionalTennisUmpire(x) -> ProfessionalTennisPlayer(x))", "-exists x.(ProfessionalTennisUmpire(x) & ProfessionalTennisPlayer(x))", "\u2013exists x.(ProfessionalTennisUmpire(x) & ProfessionalTennisPlayer(x))", "all x.(ProfessionalTennisUmpire(x) -> NoProfessionalTennisPlayer(x))", "-exists x.(ProfessionalTotalTennisUmpire(x) & ProfessionalTotalTennisPlayer(x))", "-exists x.(ProfessionalTennisUmpire(x) & ProfessionalPlayer(x))", "-exists x.(ProfessionalTennisUmpire(x) & ProfessionalTennisPerson(x))", "-exists x.(ProfessionalTennisUmpire(x) & TennisPlayer(x))", "-exists x.(ProfessionalTennisUmpire(x) & ProfessionalTennisPilot(x))"]}
{"id": "folio_train_1766", "nl": "If you are a World Tour player, then you are a professional tennis player.", "fol": "all x.(IsWorldTourPlayer(x) -> IsProfessionalTennisPlayer(x))", "prediction": ["all x.((WorldTourPlayer(x) & ProfessionalTennisPlayer(x)) -> ProfessionalTennisPlayer(x))", "all x.((WorldTourPlayer(x) & ProfessionalTennisPlayer(x)) -> Professional(x))", "all x.((Player(x) & WorldTour(x)) -> ProfessionalTennisPlayer(x))", "all x.((WorldTourPlayer(x) & ProfessionalTennisPlayer(x)) -> TennisPlayer(x))", "all x.(WorldTourPlayer(x) -> ProfessionalTennisPlayer(x))", "all x.((WorldTourPlayer(x) & WorldTourPlayer(x)) -> ProfessionalTennisPlayer(x))", "all x.((WTourPlayer(x) & WorldTourPlayer(x)) -> ProfessionalTennisPlayer(x))", "all x.((WorldTourPlayer(x) & ProfessionalTennisPlayer(x)) -> ProfessionalPlayer(x))", "all x.((WorldTourPlayer(x) & TennisPlayer(x)) -> Professional(x))", "all x.((WorldTourPlayer(x) & ProfessionalTennisPlayer(x)) -> Player(x))", "all x.((WorldTourPlayer(x) & ProfessionalTennisPlayer(x)) -> Plays(x))", "all x.((Player(x) & WorldTourPlayer(x)) -> ProfessionalTennisPlayer(x))", "all x.((WTOPlayer(x) & WorldTourPlayer(x)) -> ProfessionalTennisPlayer(x))", "all x.((WorldTourPlayer(x) & ProfessionalTennisPlayer(x)) -> -WorldTourPlayer(x))", "all x.((WorldTourPlayer(x) & Player(x)) -> ProfessionalTennisPlayer(x))", "all x.((WorldTourPlayer(x) & ProfessionalTennisPlayer(x)) -> PlaysOn(x))"]}
{"id": "folio_train_1767", "nl": "All Grand Slam champions are World Tour players.", "fol": "all x.(IsGrandSlamChampion(x) -> IsWorldTourPlayer(x))", "prediction": ["all x.(GrandSlamChampion(x) -> WorldTourPlayer(x))", "all x.((GrandSlamChampion(x) & WorldTourPlayer(x)) -> Champion(x))", "all x.(GrandSlamChampion(x) -> WorldTourPlayer(x))", "all x.(GrandSlamChampion(x) -> WorldTour Player(x))", "all x.((GrandSlamChampion(x) & WorldTourPlayer(x)) -> WorldTourPlayer(x))", "all x.(GrandSlamChampions(x) -> WorldTourPlayer(x))", "all x.((GrandSlamChampion(x) & WorldTourPlayer(x)) -> GrandSlamChampion(x))", "all x.(GrandSlamChampion(x) -> WorldTourPatron(x))", "all x y.((GrandSlamChampion(x) & WorldTourPlayer(y)) -> WorldTourPlayer(x))", "all x.(GrandSlamChampion(x) -> WorldTourPerson(x))", "all x.(GrandSlamChampion(x) -> WorldTourPilot(x))", "all x.(GrandSlamChampion(x) -> WorldTourplayer(x))", "all x.(GrandSlamChampion(x) -> WorldToursPlayer(x))", "all x.(GreatSlamChampion(x) -> WorldTourPlayer(x))", "all x y.((GrandSlamChampion(x) & WorldTourPlayer(y)) -> WorldTourPlayer(x,y))", "all x y.((GrandSlamChampion(x) & WorldTour(y)) -> WorldTourPlayer(x))"]}
{"id": "folio_train_1768", "nl": "All Grand Slam umpires are professional tennis umpires.", "fol": "all x.(IsGrandSlamUmpire(x) -> IsProfessionalTennisUmpire(x))", "prediction": ["all x.(GrandSlamUmpire(x) -> ProfessionalTennisUmpire(x))", "all x.((Umpire(x) & GrandSlam(x)) -> ProfessionalTennisUmpire(x))", "all x.(GrandSlamUmpire(x) -> ProfessionalTennisUmpire(x))", "all x.(Grand SlamUmpire(x) -> ProfessionalTennisUmpire(x))", "all x.((GrandSlamUmpire(x) & ProfessionalTennisUmpire(x)) -> Umpire(x))", "all x.(Gro\u00dfSlamUmpire(x) -> ProfessionalTennisUmpire(x))", "all x y.((GrandSlamUmpire(x) & ProfessionalTennisUmpire(y)) -> Umpire(x,y))", "all x y.((GrandSlamUmpire(x) & TennisUmpire(y)) -> Professional(x,y))", "all x.(GreatSlamUmpire(x) -> ProfessionalTennisUmpire(x))", "(all x.(GrandSlamUmpire(x) -> ProfessionalTennisUmpire(x)))", "all x.(GrandSlamUmpire(x) -> ProfessionalTotalTennisUmpire(x))", "all x y.((GrandSlamUmpire(x) & ProfessionalTennisUmpire(y)) -> Umpire(x))", "all x.(GrandSlamUmpire(x) -> ProfessionalTotennisUmpire(x))", "all x.(GrandSlam(x) -> ProfessionalTennisUmpire(x))", "all x.((GrandSlamUmpire(x) & ProfessionalTennisUmpire(x)) -> ProfessionalUmpire(x))", "all x.(GrandSlamUrpire(x) -> ProfessionalTennisUrpire(x))"]}
{"id": "folio_train_1769", "nl": "Nadal is a World Tour player or a Grand Slam champion", "fol": "(IsWorldTourPlayer(Nadal) | IsGrandSlamChampion(Nadal))", "prediction": ["all x.(Nadal(x) -> (WorldTourPlayer(x) | GrandSlamChampion(x)))", "all x.(Nadal(x) -> (WorldTour Player(x) | GrandSlamChampion(x)))", "all x.(Nadal(x) -> ((WorldTourPlayer(x) | GrandSlamChampion(x)) & (WorldTourPlayer(x) | GrandSlamChampion(x))))", "all x.(Nadal(x) -> ((WorldTourPlayer(x) | GrandSlamChampion(x))))", "all x.(Nadal(x) -> ((WorldTourPlayer(x) | GrandSlamChampion(x)) & (WorldTourPlayer(x) | GrandSlamChampion(x)))))", "all x.(Nadal(x) -> ((WorldTourPlayer(x) | GrandSlamChampion(x))) | (GrandSlamChampion(x)))))", "all x.((Nadal(x) & (WorldTourPlayer(x) | GrandSlamChampion(x))) -> (Nadal(x) & (WorldTourPlayer(x) | GrandSlamChampion(x))))", "all x y.((Nadal(x) & (WorldTourPlayer(x) | GrandSlamChampion(x))) -> (Nadal(x) & (WorldTourPlayer(x) | GrandSlamChampion(x))))", "all x.(Nadal(x) -> ((WorldTourPlayer(x) | GrandSlamChampion(x))) | (GrandSlamChampion(x) & GrandSlamPlayer(x))))", "all x.((Nadal(x) & (WorldTourPlayer(x) | GrandSlamChampion(x))) -> (WorldTourPlayer(x) | GrandSlamChampion(x)))", "all x.(Nadal(x) -> ((WorldTourPlayer(x) | GrandSlamChampion(x))) | (GrandSlamChampion(x) & (WorldTourPlayer(x) | GrandSlamChampion(x)))))", "all x y.((Nadal(x) & (WorldTourPlayer(x) | GrandSlamChampion(x))) -> (WorldTourPlayer(x) | GrandSlamChampion(x)))", "all x.(Nadal(x) -> ((WorldTourPlayer(x) | GrandSlamChampion(x))) | (WorldTourPlayer(x) | GrandSlamChampion(x)))))", "all x.(Nadal(x) -> ((WorldTourPlayer(x) | GrandSlamChampion(x))) | (GrandSlamChampion(x))))", "all x.(Nadal(x) -> ((WorldTourPlayer(x) | GrandSlamChampion(x))) | (WorldTourPlayer(x) | GrandSlamChampion(x))))", "all x.(Nadal(x) -> ((WorldTourPlayer(x) | GrandSlamChampion(x))) | (WorldTourPlayer(x) & GrandSlamChampion(x))))"]}
{"id": "folio_train_1770", "nl": "Nadal is a Grand Slam umpire.", "fol": "IsGrandSlamUmpire(Nadal)", "prediction": ["all x.(Nadal(x) -> GrandSlamUmpire(x))", "Nadal is a GrandSlamUmpire(Nadal)", "Nadal is a GrandSlamUmpire(n)", "All x.(Nadal(x) -> GrandSlamUmpire(x))", "Nadal is a GrandSlamUmpire.", "(GrandSlamUmpire(Nadal)", "Nadal is GrandSlamUmpire(Nadal)", "all x.(Nadal(x) -> GrandSlamUmpire(x))", "all x.(Nadal(x) -> GrandSlamUmmpire(x))", "Nadal is a GrandSlamUmpire(Nadal(Nadal))", "all x.(Nadal(x) -> Umpire(x))", "Nadal is a GrandSlamUmpire(Nadal).", "Nadal is a GrandSlamUmpire(Nadal,GrandSlam)", "Nadal is a GrandSlamUmpire(Nadal,Umpire)", "Nadal is GrandSlamUmpire(n)", "Nadal is an Umpire(Nadal,GrandSlam)"]}
{"id": "folio_train_1771", "nl": "Nadal is not a Grand Slam umpire.", "fol": "-IsGrandSlamUmpire(Nadal)", "prediction": ["-GrandSlamUmpire(Nadal)", "all x.(Nadal(x) -> -GrandSlamUmpire(x))", "(-GrandSlamUmpire(Nadal))", "All x.(Nadal(x) -> -GrandSlamUmpire(x))", "-Grand SlamUmpire(Nadal)", "-(GrandSlamUmpire(Nadal) & -GrandSlamUmpire(Nadal))", "(-GrandSlamUmpire(Nadal) & -GrandSlamUmpire(Nadal))", "Nadal is notGrandSlamUmpire(Nadal)", "all x.(Nadal(x) -> -Grand SlamUmpire(x))", "Nadal -GrandSlamUmpire(Nadal)", "Nadal is not a GrandSlamUmpire(Nadal)", "all x.(Nadal(x) -> -GrandSlamUmbrella(x))", "Nadal is -GrandSlamUmpire(Nadal)", "(-Grand SlamUmpire(Nadal))", "all x.(Nadal(x) -> -GrandSlamUmmpire(x))", "all x.(Nadal(x) -> -GrandSlamUrpire(x))"]}
{"id": "folio_train_1772", "nl": "Nadal is a Grand Slam champion.", "fol": "IsGrandSlamChampion(Nadal)", "prediction": ["all x.(Nadal(x) -> GrandSlamChampion(x))", "Nadal is a GrandSlamChampion(n)", "All x.(Nadal(x) -> GrandSlamChampion(x))", "Nadal is a GrandSlamChampion(Nadal)", "Nadal is a GrandSlamChampion.", "Nadal is a GrandSlamChampion(x)", "all x.(Nadal(x) -> GrandSlamChampion(x))", "all x.((Nadal(x) & GrandSlamChampion(x)) -> GrandSlamChampion(x))", "Nadal is GrandSlamChampion(n)", "(GrandSlamChampion(Nadal))", "all x.(Nadal(x) -> GrandSlamChampon(x))", "all x y.((Nadal(x) & GrandSlamChampion(y)) -> Champion(x,y))", "all x y.((Nadal(x) & GrandSlamChampion(y)) -> GrandSlamChampion(x,y))", "all x y.((Nadal(x) & GrandSlamChampion(y)) -> GrandSlamChampion(x))", "all x.((Nadal(x) & GrandSlamChampon(x)) -> GrandSlamChampion(x))", "all x.((Nadal(x) & GrandSlamChampion(x)) -> Champion(x))"]}
{"id": "folio_train_1773", "nl": "Nadal is neither a Grand Slam umpire nor a professional tennis umpire.", "fol": "(-IsGrandSlamUmpire(Nadal) & -IsProfessionalTennisUmpire(Nadal))", "prediction": ["(-GrandSlamUmpire(Nadal) & -ProfessionalTennisUmpire(Nadal))", "-(GrandSlamUmpire(Nadal) & -ProfessionalTennisUmpire(Nadal))", "-(GrandSlamUmpire(Nadal) | ProfessionalTennisUmpire(Nadal))", "all x.(Nadal(x) -> (-GrandSlamUmpire(x) & -ProfessionalTennisUmpire(x)))", "all x.(Nadal(x) -> (-GrandSlamUmpire(x) | ProfessionalTennisUmpire(x)))", "-(GrandSlamUmpire(n) | ProfessionalTennisUmpire(n)))", "-(GrandSlamUmpire(Nadal) | ProfessionalTennisUmpire(Nadal)))", "(-(GrandSlamUmpire(Nadal) | ProfessionalTennisUmpire(Nadal)))", "(-GrandSlamUmpire(Nadal) | ProfessionalTennisUmpire(Nadal)))", "(-(GrandSlamUmpire(Nadal) & -ProfessionalTennisUmpire(Nadal)))", "(Nadal(Nadal) & -(GrandSlamUmpire(Nadal) | ProfessionalTennisUmpire(Nadal))))", "(-Grand SlamUmpire(Nadal) & -ProfessionalTennisUmpire(Nadal))", "(-GrandSlamUmpire(Nadal) & -ProfessionalTennisUmpire(Nadal)))", "-(GrandSlamUmpire(Nadal) & ProfessionalTennisUmpire(Nadal))", "-(Grand SlamUmpire(Nadal) & -ProfessionalTennisUmpire(Nadal))", "(Nadal(Nadal) & -(GrandSlamUmpire(Nadal) | ProfessionalTennisUmpire(Nadal)))"]}
{"id": "folio_train_1774", "nl": "If Nadal is a professional tennis umpire, then Nadal is a Grand Slam Umpire.", "fol": "(IsProfessionalTennisUmpire(Nadal) -> IsGrandSlamUmpire(Nadal))", "prediction": ["all x.(ProfessionalTennisUmpire(x) -> GrandSlamUmpire(x))", "all x.((ProfessionalTennisUmpire(x) & Nadal(x)) -> GrandSlamUmpire(x))", "all x.((Nadal(x) & ProfessionalTennisUmpire(x)) -> GrandSlamUmpire(x))", "all x.((ProfessionalTennisUmpire(x) & NadalIsGrandSlamUmpire(x)) -> Umpire(x))", "all x.((TennisUmpire(x) & Professional(x)) -> GrandSlamUmpire(x))", "all x y.((Nadal(x) & ProfessionalTennisUmpire(x) & Nadal(y)) -> GrandSlamUmpire(x))", "all x.((Nadal(x) & ProfessionalTennisUmpire(x)) -> Grand SlamUmpire(x))", "all x y.((Nadal(x) & ProfessionalTennisUmpire(x) & Nadal(y)) -> GrandSlamUmpire(y))", "all x.((ProfessionalTennisUmpire(x) & NadalIsGrandSlamUmpire(x)) -> NadalIsGrandSlamUmpire(x))", "all x.((ProfessionalTennisUmpire(x) & Nadal(x)) -> Grand SlamUmpire(x))", "all x.((Umpire(x) & ProfessionalTennis(x)) -> GrandSlamUmpire(x))", "all x.((ProfessionalTennisUmpire(x) & Nadal(y)) -> GrandSlamUmpire(y))", "all x.((ProfessionalTennisUmpire(x) & NadalAsGrandSlamUmpire(x)) -> Umpire(x))", "all x.((ProfessionalTennisUmpire(x) & NadalIsGrandSlamUmpire(x)) -> GrandSlamUmpire(x))", "all x y.((ProfessionalTennisUmpire(x) & Nadal(y)) -> GrandSlamUmpire(y))", "all x.((PersonalTennisUmpire(x) & Nadal(x)) -> GrandSlamUmpire(x))"]}
{"id": "folio_train_1775", "nl": "If Nadal is a Grand Slam umpire or a professional tennis player, then Nadal is a Grand Slam umpire.", "fol": "((IsGrandSlamUmpire(Nadal) | IsProfessionalTennisPlayer(Nadal)) -> IsGrandSlamUmpire(Nadal))", "prediction": ["all x.((Nadal(x) & (GrandSlamUmpire(x) | ProfessionalTennisPlayer(x))) -> GrandSlamUmpire(x))", "all x.((GrandSlamUmpire(x) | ProfessionalTennisPlayer(x)) -> GrandSlamUmpire(x))", "all x.((Nadal(x) & GrandSlamUmpire(x) | ProfessionalTennisPlayer(x)) -> GrandSlamUmpire(x))", "all x.((Nadal(x) & GrandSlamUmpire(x)) | ProfessionalTennisPlayer(x)) -> GrandSlamUmpire(x))", "all x.((Nadal(x) & GrandSlamUmpire(x) & (ProfessionalTennisPlayer(x) | ProfessionalTennisPlayer(x))) -> GrandSlamUmpire(x))", "all x.((Nadal(x) & GrandSlamUmpire(x) & ProfessionalTennisPlayer(x)) -> GrandSlamUmpire(x))", "all x.((Nadal(x) & (Grand SlamUmpire(x) | ProfessionalTennisPlayer(x))) -> GrandSlamUmpire(x))", "all x.((Nadal(x) & (GrandSlamUrpire(x) | ProfessionalTennisPlayer(x))) -> GrandSlamUrpire(x))", "all x.((Nadal(x) & (GrandSlamUmpire(x) | ProfessionalTennisPlayer(x))) -> GrandSlamUmpire(x))", "all x.((Nadal(x) & GrandSlamUmpire(x) & (ProfessionalTennisPlayer(x) | GrandSlamUmpire(x))) -> GrandSlamUmpire(x))", "all x.(GrandSlamUmpire(x) | ProfessionalTennisPlayer(x)) -> GrandSlamUmpire(x))", "all x y.((Nadal(x) & (GrandSlamUmpire(x) | ProfessionalTennisPlayer(x))) -> GrandSlamUmpire(x))", "all x.((Nadal(x) & (GrandSlamUsumpire(x) | ProfessionalTennisPlayer(x))) -> GrandSlamUmpire(x))", "all x.((Nadal(x) & (GrandSlamUumpire(x) | ProfessionalTennisPlayer(x))) -> GrandSlamUmpire(x))", "all x.((Nadal(x) & GrandSlamUmpire(x) | ProfessionalTennisPlayer(x))) -> GrandSlamUmpire(x))", "all x.((Nadal(x) & (GrandSlamUumpire(x) | ProfessionalTennisPlayer(x))) -> GrandSlamUumpire(x))"]}
{"id": "folio_train_1776", "nl": "Businesses are either sanctioned or unsanctioned.", "fol": "all x.(((IsBusiness(x) -> IsSanctioned(x)) & IsSanctioned(x)) | (-(IsBusiness(x) -> IsSanctioned(x)) & -IsSanctioned(x)))", "prediction": ["all x.(Business(x) -> (Sanctioned(x) | Unsanctioned(x)))", "all x.(Business(x) -> (Sanctioned(x) | -Sanctioned(x)))", "exists x.(Business(x) & (Sanctioned(x) | Unsanctioned(x)))", "all x y.((Business(x) & Business(y)) -> (Sanctioned(x) | Unsanctioned(y)))", "all x.((Business(x) & (Sanctioned(x) | Unsanctioned(x))) -> (Sanctioned(x) | Unsanctioned(x)))", "all x.(Business(x) -> (Sanctioned(x) | Unsanctioned(x)))", "all x y.((Business(x) & Business(y)) -> (Sanctioned(x,y) | Unsanctioned(x,y)))", "all x.(Business(x) -> (Sanctioned(x) | NonSanctioned(x)))", "all x.(Business(x) -> (Sanctioned(x) | UnSanctioned(x)))", "all x.(Business(x) & (Sanctioned(x) | Unsanctioned(x)))", "all x.((Business(x) & (Sanctioned(x) | Unsanctioned(x))) -> (Sanctioned(x) | Unsanctioned(x))))", "all x.((Business(x) & (Sanctioned(x) | Unsanctioned(x))) -> -Sanctioned(x))", "all x y.((Business(x) & Business(y)) -> (Sanctioned(x) | Unsanctioned(x)))", "all x.((Business(x) & (Sanctioned(x) | Unsanctioned(x))) -> (Sanctioned(x) | -Sanctioned(x)))", "all x.((Business(x) & (Sanctioned(x) | Unsanctioned(x))) -> (-Sanctioned(x) | Unsanctioned(x)))", "all x.(Business(x) -> ((Sanctioned(x) | Unsanctioned(x))))"]}
{"id": "folio_train_1777", "nl": "Sanctioned buisnesses are limited.", "fol": "all x.((IsBusiness(x) & IsSanctioned(x)) -> IsLimited(x))", "prediction": ["all x.((Buisness(x) & Sanctioned(x)) -> Limited(x))", "all x.(SanctionedBaisness(x) -> Limited(x))", "all x.(SanctionedBuisness(x) -> Limited(x))", "all x.(SanctionedBisness(x) -> Limited(x))", "all x.(SanctionedBizness(x) -> Limited(x))", "all x.((Baisness(x) & Sanctioned(x)) -> Limited(x))", "all x.(SanctionedBoisness(x) -> Limited(x))", "all x.(SanctionedBubiness(x) -> Limited(x))", "all x.(SanctionedBeauty(x) -> Limited(x))", "all x.((Bizness(x) & Sanctioned(x)) -> Limited(x))", "all x.(SanctionedBirth(x) -> Limited(x))", "all x.(SanctionedBienness(x) -> Limited(x))", "all x y.((Buisness(x) & Sanctioned(x)) -> Limited(y))", "all x.(SanctionedBosness(x) -> Limited(x))", "all x y.((Buisness(x) & Sanctioned(x)) -> Limited(x))", "all x.(SanctionedBird(x) -> Limited(x))"]}
{"id": "folio_train_1778", "nl": "Unsanctioned buisnesses are free.", "fol": "all x.((IsBusiness(x) & -IsSanctioned(x)) -> IsFree(x))", "prediction": ["all x.((Buisness(x) & -Sanctioned(x)) -> Free(x))", "all x.((Baisness(x) & -Sanctioned(x)) -> Free(x))", "all x.((Buisness(x) & Unsanctioned(x)) -> Free(x))", "all x.((Boisness(x) & -Sanctioned(x)) -> Free(x))", "all x.((Bizness(x) & -Sanctioned(x)) -> Free(x))", "all x.(UnsanctionedBuisness(x) -> Free(x))", "all x.(UnsanctionedBaisness(x) -> Free(x))", "all x.((Bosness(x) & -Sanctioned(x)) -> Free(x))", "all x.((Beauty(x) & -Sanctioned(x)) -> Free(x))", "all x.((Baisness(x) & Unsanctioned(x)) -> Free(x))", "all x.(UnsanctionedBisness(x) -> Free(x))", "all x.(UnsanctionedBizness(x) -> Free(x))", "all x.(UnsanctionedBoisness(x) -> Free(x))", "all x.(UnsanctionedBubiness(x) -> Free(x))", "all x.(UnsanctionedBeauty(x) -> Free(x))", "all x.((UnsanctionedBaisness(x) & Free(x)) -> Free(x))"]}
{"id": "folio_train_1779", "nl": "The Crude Oil Data Exchange is a buisness that isn't free.", "fol": "(IsBusiness(CrudeOilDataExchange) & -IsFree(CrudeOilDataExchange))", "prediction": ["all x.(CrudeOilDataExchange(x) -> (Buisness(x) & -Free(x)))", "all x.(CrudeOilDataExchange(x) -> (Baisness(x) & -Free(x)))", "all x.(CrudeOilDataExchange(x) -> (Bizness(x) & -Free(x)))", "all x.(CrudeOilDataExchange(x) -> -Free(x))", "all x.(CrudeOilDataExchange(x) -> (Bisness(x) & -Free(x)))", "all x.((CrudeOilDataExchange(x) & -Free(x)) -> CrudeOilDataExchange(x))", "all x.(CrudeOilDataExchange(x) -> (Beauty(x) & -Free(x)))", "all x.((Baisness(x) & CrudeOilDataExchange(x)) -> -Free(x))", "all x.((CrudeOilDataExchange(x) & -Free(x)) -> -Buisness(x))", "all x.((Bizness(x) & CrudeOilDataExchange(x)) -> -Free(x))", "all x y.((CrudeOilDataExchange(x) & Business(y)) -> -Free(y))", "all x.((Buisness(x) & CrudeOilDataExchange(x)) -> -Free(x))", "all x.(CrudeOilDataExchange(x) -> (Bainess(x) & -Free(x)))", "all x.((CrudeOilDataExchange(x) & -Free(x)) -> Business(x))", "all x.((CrudeOilDataExchange(x) & -Free(x)) -> -Free(x))", "all x.((CrudeOilDataExchange(x) & -Free(x)) -> CrudeOilBizness(x))"]}
{"id": "folio_train_1780", "nl": "Crude Oil Data Exchange is sanctioned.", "fol": "IsSanctioned(CrudeOilDataExchange)", "prediction": ["all x.(CrudeOilDataExchange(x) -> Sanctioned(x))", "All x.(CrudeOilDataExchange(x) -> Sanctioned(x))", "all x y.((CrudeOilDataExchange(x) & CrudeOil(y)) -> Sanctioned(x))", "all x.(CrudeOilDataExchange(x) -> Sanctioned(x))", "All x.(CrudeOilDataExchange(x) -> Sanctioned(x))", "all x.((CrudeOilDataExchange(x) & Sanctioned(x)) -> Sanctioned(x))", "All x y.((CrudeOilDataExchange(x) & CrudeOil(y)) -> Sanctioned(x))", "all x.((CrudeOilDataExchange(x) & Sanctioned(x)) -> Sanctioned(x))", "all x y.((CrudeOilDataExchange(x) & CrudeOilDataExchange(y)) -> Sanctioned(x))", "All x.((CrudeOilDataExchange(x) & Sanctioned(x)) -> Sanctioned(x))", "all x y.((CrudeOilDataExchange(x) & CrudeOil(y)) -> Sanctioned(x,y))", "all x y.((CrudeOilDataExchange(x) & CrudeOil(y)) -> Sanctioned(x))", "All x.((CrudeOilDataExchange(x) & Sanctioned(x)) -> Sanctioned(x))", "All x y.((CrudeOilDataExchange(x) & CrudeOilDataExchange(y)) -> Sanctioned(x))", "all x.((CrudeOilDataExchange(x) & Sanctioned(x)) -> CrudeOilDataExchange(x))", "All x y.((CrudeOilDataExchange(x) & CrudeOil(y)) -> Sanctioned(x,y))"]}
{"id": "folio_train_1781", "nl": "Crude Oil Data Exchange is unsanctioned.", "fol": "-IsSanctioned(CrudeOilDataExchange)", "prediction": ["all x.(CrudeOilDataExchange(x) -> Unsanctioned(x))", "All x.(CrudeOilDataExchange(x) -> Unsanctioned(x))", "all x.(CrudeOilDataExchange(x) -> -Sanctioned(x))", "All x.(CrudeOilDataExchange(x) -> -Sanctioned(x))", "all x.((CrudeOilDataExchange(x) & -Sanctioned(x)) -> Unsanctioned(x))", "all x.((CrudeOilDataExchange(x) & -Sanctioned(x)) -> -Sanctioned(x))", "all x.((CrudeOilDataExchange(x) & -Sanctioned(x)) -> CrudeOilDataExchange(x))", "all x.((CrudeOilDataExchange(x) & Unsanctioned(x)) -> CrudeOilDataExchange(x))", "(Unsanctioned(CrudeOilDataExchange))", "all x.((CrudeOilDataExchange(x) & Unsanctioned(x)) -> -Sanctioned(x))", "all x.(CrudeOilDataExchange(x) -> NonSanctioned(x))", "(Unsanctioned(crudeOilDataExchange))", "all x.((CrudeOilDataExchange(x) & Unsanctioned(x)) -> Unsanctioned(x))", "All x.(CrudeOilDataExchange(x) -> NonSanctioned(x))", "(UnsanctionedCrudeOilDataExchange(CrudeOil))", "all x.((CrudeOilDataExchange(x) & -Sanctioned(x)) -> NonSanctioned(x))"]}
{"id": "folio_train_1782", "nl": "Crude Oil Data Exchange is limited.", "fol": "IsLimited(CrudeOilDataExchange)", "prediction": ["all x.(CrudeOilDataExchange(x) -> Limited(x))", "All x.(CrudeOilDataExchange(x) -> Limited(x))", "all x.((CrudeOilDataExchange(x) & Limited(x)) -> Limited(x))", "All x.((CrudeOilDataExchange(x) & Limited(x)) -> Limited(x))", "exists x.(CrudeOilDataExchange(x) & Limited(x))", "(Limited(CrudeOilDataExchange) & Limited(CrudeOilDataExchange))", "(LimitedCrudeOilDataExchange(CrudeOil))", "(Limited(CrudeOilDataExchange))", "(Limited(crudeOilDataExchange) & Limited(crudeOilDataExchange))", "CrudeOilDataExchange(x) & Limited(x))", "all x.((CrudeOilDataExchange(x) & Limited(x)) -> Limited(x))", "All x.((CrudeOilDataExchange(x) & Limited(x)) -> CrudeOilDataExchange(x))", "all x.((CrudeOilDataExchange(x) & Limited(x)) -> CrudeOilDataExchange(x))", "All x.((CrudeOilDataExchange(x) & Limited(x)) -> Limited(x))", "(LimitedCrudeOilDataExchange(x))", "all x.((CrudeOilDataExchange(x) & Limited(x)) -> Limits(x))"]}
{"id": "folio_train_1783", "nl": "When something is depressing, it is sad.", "fol": "all x.(IsDepressing(x) -> IsSad(x))", "prediction": ["all x.((Depressing(x) & Sad(x)) -> Depressing(x))", "all x.(Depressing(x) -> Sad(x))", "all x.((Depressing(x) & Sad(x)) -> Depressed(x))", "all x.((Sad(x) & Depressing(x)) -> Sad(x))", "all x.(((Depressing(x) & Sad(x)) -> Depressing(x))", "all x.((Poor(x) & Depressing(x)) -> Sad(x))", "all x.((Positive(x) & Sad(x)) -> Depressing(x))", "all x.((Depressing(x) & Sad(x)) -> Sad(x))", "all x.((Depressing(x) -> Sad(x))", "all x.((IsDepressing(x) & Sad(x)) -> Depressing(x))", "all x.((Depressing(x) & Sad(x)) -> Depressing(x))", "all x.((Depressing(x) & Sad(x)) -> -Depressing(x))", "all x.((Depressing(x) & Sad(x)) -> Is(x))", "all x.((Depressing(x) & Sad(x)) -> Depression(x))", "all x.((Depressing(x) & SAD(x)) -> Depressing(x))", "all x.((Other(x) & Depressing(x)) -> Sad(x))"]}
{"id": "folio_train_1784", "nl": "V is depressing. ", "fol": "all x.(EntityV(x) -> IsDepressing(x))", "prediction": ["all x.(V(x) -> Depressing(x))", "all x.((V(x) & Depressing(x)) -> Depressing(x))", "all x.((V(x) & Depression(x)) -> Depressing(x))", "All x.(V(x) -> Depressing(x))", "all x.(V.(V) -> Depressing(x))", "(Depressing(V) -> Depressing(V))", "all x.(V.(x) -> Depressing(x))", "exists x.(V(x) & Depressing(x))", "all x.((V(x) & Depressing(x)) -> (Depressing(x) | Depressing(x)))", "all x.(V isDepressing(x) -> (Depressing(x) & -Depressing(x)))", "all x.((V(x) & Depressing(x)) -> -Depressing(x))", "all x.(V isDepressing(x) -> Depressing(x))", "(Depressing(V) -> Depressing(V))", "all x.((V) & Depressing(x)) -> Depressing(x))", "all x.(V) -> Depressing(x))", "all x.((V(x) & Depressing(x)) -> (Depressing(x) & Depressing(x)))"]}
{"id": "folio_train_1785", "nl": "V is invigorating", "fol": "all x.(EntityV(x) -> Invigorating(x))", "prediction": ["all x.(V isInvigorating(x) -> Invigorating(x))", "all x y.((Visitor(x) & Invigorating(y)) -> Invigorating(x,y))", "all x y.((Vector(x) & Invigorating(y)) -> Invigorating(x,y))", "all x y.((V(x) & Invigorating(y)) -> Invigorating(x,y))", "all x y z.((Visitor(x) & Invigorating(y) & Invigorating(z)) -> Invigorating(x,y,z))", "all x y z.((Visitor(x) & Invigorating(y) & Invigorating(z)) -> (Invigorating(x,y,z) & Invigorating(x,y)))", "all x.(Visiting(x) -> Invigorating(x))", "all x y z.((Visitor(x) & Invigorating(y) & Invigorating(z)) -> (Invigorating(x,y) & Invigorating(x,z)))", "all x y.((V) & Invigorating(x,y)) -> Invigorating(x,y))", "all x y z.((Visitor(x) & Invigorating(y) & Invigorating(z)) -> (Invigorating(x,y,z) | Invigorating(x,y)))", "all x y z.((Visitor(x) & Invigorating(y) & Invigorating(z)) -> (Invigorating(x,y) & Invigorating(y,z)))", "all x y.((V(x) & Invigorating(y)) -> (Invigorating(x,y) & Invigorating(x,y)))", "all x y z.((Visitor(x) & Invigorating(y) & Invigorating(z) & Invigorating(z)) -> Invigorating(x,y,z))", "all x y z.((Visitor(x) & Invigorating(y) & Invigorating(z)) -> (Invigorating(x,y,z) & Invigorating(y,z)))", "all x.(V isInvigorating(x) -> Invigorating(x))", "all x.(V isInvigorating(x) -> (Invigorating(x) & Invigorating(x)))"]}
{"id": "folio_train_1786", "nl": "Palstaves are a type of early bronze axe.", "fol": "all x.((IsPalstave(x) -> FromPeriod(x,Earlybronzeage)) & IsAxe(x))", "prediction": ["all x.(Palstaves(x) -> EarlyBronzeAxe(x))", "all x.(Palstaves(x) -> EarlyBronzeAxe(x))", "all x.(Pallstaves(x) -> EarlyBronzeAxe(x))", "all x.(Palstaves(x) -> (EarlyBronzeAxe(x) & HasAxe(x)))", "all x.(Palstaves(x) -> (EarlyBronzeAxe(x) & BronzeAxe(x)))", "all x.(Palstaves(x) -> (EarlyBronzeAxe(x) & BronzeAxe(x)))", "all x.(Palstaves(x) -> (EarlyBronzeAxe(x) & HasAxe(x)))", "all x.(Palstaves(x) -> (EarlyBronzeAxe(x) & EarlyBronzeAxe(x)))", "all x.(Palstave(x) -> EarlyBronzeAxe(x))", "all x.(Palstaves(x) -> (EarlyBronzeAxe(x) & -EarlyBronzeAxe(x)))", "all x.(Palstaves(x) -> (EarlyBronzeAxe(x) & Axe(x)))", "all x.(Palstaves(x) -> (EarlyBronzeAxe(x) & -EarlyBronzeAxe(x)))", "all x.(Palstaves(x) -> (EarlyBronzeAxe(x) & Axe(x)))", "all x.(Palstaves(x) -> (EarlyBronzeAxe(x) & HasEarlyBronzeAxe(x)))", "all x.(Pallstaves(x) -> (EarlyBronzeAxe(x) & HasAxe(x)))", "all x.(Palstaves(x) -> (EarlyBronzeAxe(x) & -BronzeAxe(x)))"]}
{"id": "folio_train_1787", "nl": "Commonly found in northern, western and south-western Europe, palstaves are cast in moulds.", "fol": "all x y.((IsPalstave(x) & IsMould(y)) -> (FoundInRegion(x,Northerneurope) & FoundInRegion(x,Westerneurope) & FoundInRegion(x,SouthWesternEurope) & CastUsingMould(x,y)))", "prediction": ["all x y.((Palstaves(x) & NorthernEurope(y) & WesternEurope(y) & SouthWestEurope(y)) -> CastInMolds(x))", "all x y.((Pallstaves(x) & NorthernEurope(y) & WesternEurope(y) & SouthWestEurope(y)) -> CastInMolds(x))", "all x.(Palstaves(x) -> (FoundIn(x,NorthernEurope) & FoundIn(x,WestEurope) & FoundIn(x,SouthWestEurope)))", "all x y.((Palstaves(x) & Northern(y) & Western(y) & SouthWest(y)) -> CastInMolds(x))", "all x.(Pallstaves(x) -> (FoundIn(x,NorthernEurope) & FoundIn(x,WestEurope) & FoundIn(x,SouthWestEurope)))", "all x y.((Palstaves(x) & NorthernEurope(y) & WesternEurope(y) & SouthWestEurope(y)) -> CastInMolds(x,y))", "all x.(Palstaves(x) -> (FoundInNorthern(x) & FoundInWestern(x) & FoundInSouthWest(x)))", "all x.(Palstaves(x) -> (NorthernEurope(x) & WesternEurope(x) & SouthWestEurope(x) & CastInMolds(x)))", "all x.(Palstaves(x) -> (FoundInNorthernEurope(x) & FoundInWesternEurope(x) & FoundInSouthWestEurope(x)))", "all x y.((Palstaves(x) & NorthernEurope(y) & WesternEurope(y) & SouthWesternEurope(y)) -> CastInMolds(x))", "all x.(Palstaves(x) -> (NorthernEurope(x) & WesternEurope(x) & SouthWestEurope(x)))", "all x y z.((Palstaves(x) & NorthernEurope(y) & WesternEurope(z) & SouthWestEurope(z)) -> CastInMolds(x))", "all x y.((Palstaves(x) & NorthernEurope(y) & WesternEurope(y) & SouthWestEurope(y)) -> CastInMoulds(x))", "all x y.((Pallstaves(x) & NorthernEurope(y) & WesternEurope(y) & SouthWestEurope(y)) -> CastInMolds(x,y))", "all x y.((Palstaves(x) & Northern(y) & Western(y) & SouthWide(y)) -> CastInMolds(x))", "all x.(Pallstaves(x) -> (FoundInNorthern(x) & FoundInWestern(x) & FoundInSouthWest(x)))"]}
{"id": "folio_train_1788", "nl": "John Evans is an archeologist who popularized the term \"palstave\".", "fol": "(IsArcheologist(Johnevans) & PopularizedTerm(Johnevans,Termpalstave))", "prediction": ["(Archeologist(JohnEvans) & PopularizedPalstave(JohnEvans))", "all x.((Archeologist(x) & PopularizedPalstave(x)) -> JohnEvans(x))", "(Archeologist(JohnEvans) & PopularizedTermPalstave(JohnEvans))", "John Evans (Archeologist) & PopularizedPalstave(JohnEvans))", "(Archeologist(JohnEvans) & PopularizedTerm(JohnEvans,palstave))", "John Evans (Archeologist(John) & PopularizedPalstave(John))", "(Archeologist(JohnEvans) & PopularizedTerm(JohnEvans))", "John Evans (Archeologist) & PopularizedPalstave(John,Evans))", "(Archeologist(JohnEvans) & PopularizedTerm(JohnEvans,Palstave))", "(Archeologist(JohnEvans) & Popularized(JohnEvans) & Palstave(JohnEvans))", "(Archeologist(JohnEvans) & PopularizedPalstave(JohnEvans,Palstave))", "John Evans (Archeologist) & PopularizedPalstave(John))", "(PopulatedTerm(JohnEvans) & Palstave(JohnEvans))", "(Palstave(JohnEvans) & Archeologist(JohnEvans))", "John Evans (Archeologist) & PopularizedPalstave(JohnEvans,Palstave))", "(Archeologist(JohnEvans) & Popularized(JohnEvans,palstave))"]}
{"id": "folio_train_1789", "nl": "A paalstab is not an axe, but rather a digging shovel.", "fol": "all x.((IsPaalstab(x) -> -IsAxe(x)) & IsDiggingShovel(x))", "prediction": ["all x.(Paalstab(x) -> (-Axe(x) & DiggingPull(x)))", "all x.(Paalstab(x) -> (-Axe(x) & DiggingPellet(x)))", "all x.(Paalstab(x) -> (-Axe(x) & DiggingSheel(x)))", "all x.(Paalstab(x) -> (-Axe(x) & DiggingSparrow(x)))", "all x.(Paalstab(x) -> (-Axe(x) & DiggingShelle(x)))", "all x.(Paalstab(x) -> (-Axe(x) & DiggingPlucker(x)))", "all x.(Paalstab(x) -> (-Axe(x) & DiggingSpoke(x)))", "all x.(Paalstab(x) -> (-Axe(x) & DiggingShell(x)))", "all x.(Paalstab(x) -> (-Axe(x) & DiggingSpokel(x)))", "all x.(Paalstab(x) -> (-Axe(x) & DiggingPull(x)))", "all x.(Paalstab(x) -> (-Axe(x) & DiggingShoel(x)))", "all x.(Paalstab(x) -> (-Axe(x) & DiggingShellel(x)))", "all x.(Paalstab(x) -> (-Axe(x) & DiggingPluck(x)))", "all x.(Paalstab(x) -> (-Axe(x) & DiggingSpool(x)))", "all x.(Paalstab(x) -> (-Axe(x) & DiggingPuck(x)))", "all x.(Paalstab(x) -> (-Axe(x) & DiggingSparrow(x)))"]}
{"id": "folio_train_1790", "nl": "John Evans Popularized the term paalstab.", "fol": "PopularizedTerm(Johnevans,Termpaalstab)", "prediction": ["all x y.((JohnEvans(x) & Paalstab(y)) -> Popularized(x,y))", "(PopularizedTerm(JohnEvans) & Paalstab(JohnEvans))", "(PopulatedTerm(JohnEvans) & Paalstab(JohnEvans))", "all x y.((JohnEvans(x) & Palstab(y)) -> Popularized(x,y))", "John Evans PopularizedTheTermPaalstab(JohnEvans)", "all x y.((JohnEvans(x) & Paalstab(y) & Popularized(x,y)) -> Popularized(x,y))", "John Evans PopularizedTermPaalstab(JohnEvans)", "all x y.((JohnEvans(x) & Paalstab(y)) -> PopularizedBy(x,y))", "all x y.((JohnEvans(x) & Paalstab(y)) -> Popularized(x))", "(PopularizedTermPaalstab(JohnEvans))", "all x y.((JohnEvans(x) & Paalstab(y)) -> PopularizedTerm(x,y))", "all x y.((JohnEvans(x) & Paalstab(y)) -> PopularizedThrough(x,y))", "all x y.((JohnEvans(x) & Paalstab(y)) -> PopularizedThan(x,y))", "John Evans PopularizedPaalstab(JohnEvans)", "all x y.((JohnEvans(x) & Paalstab(y)) -> PopularizedIn(x,y))", "all x y.((JohnEvans(x) & Paalstab(y)) -> Populated(x,y))"]}
{"id": "folio_train_1791", "nl": "There is an axe that is commonly found in Western Europe.", "fol": "exists x.(IsAxe(x) & FoundInRegion(x,Westerneurope))", "prediction": ["exists x.(Axe(x) & CommonlyFoundIn(x,WestEurope))", "exists x.(Axe(x) & FoundIn(x,WestEurope))", "exists x.(Axe(x) & CommonlyFoundInWestEurope(x))", "exists x.(Axe(x) & CommonlyFoundInWESTEurope(x))", "exists x y.(Axe(x) & WesternEurope(y) & CommonlyFoundIn(x,y))", "exists x y.(Axe(x) & WesternEurope(y) & CommonlyFound(x,y))", "exists x.(Axe(x) & CommonlyFindedIn(x,WestEurope))", "exists x.(Axe(x) & CommonlyFindsIn(x,WestEurope))", "exists x.(Axe(x) & FoundInWestEurope(x))", "exists x.(Axe(x) & CommonlyFoundInWideEurope(x))", "exists x y.((Axe(x) & WesternEurope(y)) -> CommonlyFoundIn(x,y))", "exists x y.((Axe(x) & WesternEurope(y)) -> CommonlyFound(x,y))", "exists x y.(Axe(x) & WesternEurope(y) & FoundIn(x,y))", "exists x.(Axe(x) & WesternEurope(x))", "exists x.(Axe(x) & CommonlyFindsInWestEurope(x))", "all x y.((Axe(x) & WesternEurope(y)) -> CommonlyFoundIn(x,y))"]}
{"id": "folio_train_1792", "nl": "Archeologists haven't popularized anything.", "fol": "-exists x.(IsArcheologist(x) & exists y.PopularizedTerm(x,y))", "prediction": ["all x.(Archeologist(x) -> -Popularized(x))", "all x y.((Archeologist(x) & Popularized(y)) -> -Popularized(x,y))", "all x.(Archeologist(x) -> -Populated(x))", "all x y.((Archeologist(x) & Product(y)) -> -Popularized(x,y))", "all x y.((Archeologist(x) & Popularized(x,y)) -> -Popularized(x,y))", "all x.(Archeologist(x) -> -PopularizedAnything(x))", "all x y.((Archeologist(x) & Popularized(y)) -> -(Popularized(x,y) | Popularized(x,y))))", "all x.(Archeologist(x) -> (-Popularized(x) & -Popularized(x)))", "all x y.((Archeologist(x) & Popularized(y)) -> -Popularized(x))", "all x y.((Archeologist(x) & Popularized(y)) -> -(Popularized(x,y) & -Popularized(x,y))))", "all x y.((Archeologist(x) & Popularized(y)) -> -(Popularized(x,y) & -Popularized(x,y)))", "all x y.((Archeologist(x) & Popularized(y)) -> -Populated(x,y))", "all x.(Archeologist(x) -> -Populized(x))", "all x y.((Archeologist(x) & Popularized(y)) -> -(Popularized(x,y) | Popularized(y))))", "all x y.((Archeologist(x) & Popularized(y)) -> -(Popularized(x,y) | Popularized(y,x))))", "all x y.((Archeologist(x) & Popularized(y)) -> -(Popularized(x) | Popularized(y))))"]}
{"id": "folio_train_1793", "nl": "Koei Tecmo is a Japanese video game and anime holding company.", "fol": "(IsJapanese(Koeitecmo) & IsVideoGameHoldingCompany(Koeitecmo) & IsHoldingCompany(Koeitecmo))", "prediction": ["all x.((JapaneseVideoGame(x) & JapaneseAnimeHoldingCompany(x)) -> KoeiTecmo(x))", "all x.(KoeiTecmo(x) -> (JapaneseVideoGame(x) & JapaneseAnimeHoldingCompany(x)))", "all x.((JapaneseVideoGame(x) & JapaneseAnimeHolding(x)) -> KoeiTecmo(x))", "all x.(KoeiTecmo(x) -> (JapaneseVideoGameHoldingCompany(x) & JapaneseAnimeHoldingCompany(x)))", "all x.(KoeiTecmo(x) -> (JapaneseVideoGame(x) & JapaneseAnimeHolding(x)))", "all x.(KoeiTecmo(x) -> (JapaneseVideoGameAndAnimeHoldingCompany(x) & JapaneseHoldingCompany(x)))", "all x.(KoeiTecmo(x) -> (JapaneseVideoGameHolding(x) & JapaneseAnimeHolding(x)))", "all x.(KoeiTecmo(x) -> (JapaneseVideoGame(x) & JapaneseAnime(x)))", "all x.(KoeiTecmo(x) -> (JapaneseVideoGameAndAnimeHoldingCompany(x) & JapaneseAnimeHoldingCompany(x)))", "all x.(KoeiTecmo(x) -> (JapaneseVideoGameAndAnimeHoldingCompany(x) & -JapaneseAnimeHoldingCompany(x)))", "all x.(KoeiTecmo(x) -> (JapaneseVideoGame(x) & JapaneseAnime(x) & HoldingCompany(x)))", "all x.((JapaneseVideoGameAndAnimeHoldingCompany(x)) -> KoeiTecmo(x))", "all x.((JapaneseVideoGame(x) & JapaneseAnimeHostingCompany(x)) -> KoeiTecmo(x))", "all x.(KoeiTecmo(x) -> (JapaneseVideoGameAndAnimeHoldingCompany(x) & JapaneseAnimalHoldingCompany(x)))", "all x.(KoeiTecmo(x) -> (JapaneseVideoGame(x) & JapaneseAnimeHoldingCompany(x)))", "all x.((JapaneseVideoGame(x) & JapaneseAnime(x)) -> HoldingCompany(x))"]}
{"id": "folio_train_1794", "nl": "Holding companies hold several companies.", "fol": "all x.exists y.(IsHoldingCompany(x) -> (IsCompany(y) & HoldsCompany(x,y)))", "prediction": ["all x y.((HoldingCompany(x) & Company(y)) -> Holds(x,y))", "exists x.(HoldingCompany(x) & HoldsCompany(x))", "all x y z.((HoldingCompany(x) & Company(y) & Company(z)) -> Holds(x,y,z))", "all x.(HoldingCompany(x) -> HoldsCompanies(x))", "all x.(HoldingCompany(x) -> HoldsSeveralCompanies(x))", "all x y.((HostingCompany(x) & Company(y)) -> Holds(x,y))", "exists x y.(HoldingCompany(x) & Company(y) & Holds(x,y))", "all x.(HoldingCompany(x) -> HoldsCompany(x))", "all x y z.((HoldingCompany(x) & Company(y) & Company(z) & Holds(x,y,z)) -> Holds(x,y,z))", "exists x.(HoldingCompany(x) & HoldsCompanies(x))", "all x y.((HoldingCompany(x) & Company(y)) -> Hold(x,y))", "all x y z.((HoldingCompany(x) & Company(y) & Company(z)) -> Hold(x,y,z))", "all x.(HoldingCompany(x) -> HoldsManyCompanies(x))", "all x.(HoldingCompany(x) -> HoldsVariousCompanies(x))", "all x y z.((HoldingCompany(x) & Company(y) & Company(z) & Holds(x,y,z)) -> Holds(x,y))", "all x y z.((HoldingCompany(x) & Company(y) & Company(z) & Holds(x,y)) -> Holds(x,z))"]}
{"id": "folio_train_1795", "nl": "Tecmo was disbanded in Japan, while Koei survived, but was renamed.", "fol": "(WasDisbanded(Tecmo) & HasSurvived(Koei_) & WasRenamed(Koei_))", "prediction": ["all x y.((Tecmo(x) & Koei(y)) -> (DisbandedInJapan(x) & Survives(y) & Renamed(y)))", "(all x y.((Tecmo(x) & Japan(y)) -> Disbanded(x,y)) & ((Koei(x) & Japan(y)) -> Survives(x,y)))", "all x y.((Tecmo(x) & Koei(y)) -> (DisbandedInJapan(x) & Survived(y) & Renamed(y)))", "(all x.(Tecmo(x) -> DisbandedInJapan(x)) & all y.(Koei(y) -> Survived(y)))", "(all x.(Tecmo(x) -> DisbandedInJapan(x)) & (Koei(x) -> Survives(x) & Renamed(x)))", "(all x.(Tecmo(x) -> DisbandedInJapan(x)) & all y.(Koei(y) -> Survives(y)))", "(all x.(Tecmo(x) -> DisbandedInJapan(x)) & all y.(Koei(y) -> Survives(y) & Renamed(y)))", "(all x.(Tecmo(x) -> DisbandedInJapan(x)) & (Koei(x) -> Survives(x)) & -Renamed(x)))", "(all x y.((Tecmo(x) & Japan(y)) -> Disbanded(x,y)) & ((Koei(x) & Japan(y)) -> Survived(x,y)))", "(all x.(Tecmo(x) -> DisbandedInJapan(x)) & (Koei(x) -> Survived(x)) & -Renamed(x)))", "(all x y.((Tecmo(x) & Japan(y)) -> Disbanded(x)) & ((Koei(x) & Japan(y)) -> Survives(x,y)))", "(all x.(Tecmo(x) -> DisbandedInJapan(x)) & all y.(Koei(y) -> Survives(y,x)))", "(all x.(Tecmo(x) -> DisbandedInJapan(x)) & (Koei(x) -> Survives(x)))", "(all x.(Tecmo(x) -> DisbandedInJapan(x)) & (Koei(x) -> Survived(x) & Renamed(x)))", "(all x.(Tecmo(x) -> DisbandedInJapan(x)) & all y.(Koei(y) -> Survived(y) & Renamed(y)))", "(all x y.(Tecmo(x) -> DisbandedInJapan(x)) & (Koei(y) -> Survived(y)) & -Renamed(y)))"]}
{"id": "folio_train_1796", "nl": "Video game holding companies are holding companies.", "fol": "all x.(IsVideoGameHoldingCompany(x) -> IsHoldingCompany(x))", "prediction": ["all x.(VideoGameHoldingCompany(x) -> HoldingCompany(x))", "all x y.((VideoGameHoldingCompany(x) & HoldingCompany(y)) -> HoldingCompany(x))", "all x y.((VideoGameHoldingCompany(x) & HoldingCompany(y)) -> HoldingCompany(x,y))", "all x.((VideoGameHoldingCompany(x) & HoldingCompany(x)) -> HoldingCompany(x))", "all x.(VideoGameHoldingCompany(x) -> HoldingCompany(x))", "all x y.((VideoGameHoldingCompany(x) & HoldingCompany(y)) -> HoldingCompany(y))", "all x.(VideoGameHolding(x) -> HoldingCompany(x))", "all x y z.((VideoGameHoldingCompany(x) & HoldingCompany(y) & Game(z)) -> HoldingCompany(x,y,z))", "all x y z.((VideoGameHoldingCompany(x) & HoldingCompany(y) & Game(z)) -> HoldingCompany(x))", "all x y z.((VideoGameHoldingCompany(x) & HoldingCompany(y) & VideoGameHoldingCompany(z)) -> HoldingCompany(x,y,z))", "all x y z.((VideoGameHoldingCompany(x) & VideoGameHoldingCompany(y) & HoldingCompany(z)) -> HoldingCompany(x,y,z))", "all x y.((VideoGameHostingCompany(x) & HoldingCompany(y)) -> HoldingCompany(x))", "all x.(VideoGameHostingCompany(x) -> HoldingCompany(x))", "all x y.((VideoGameHoldingCompany(x) & HoldingCompany(x)) -> HoldingCompany(y))", "all x y z.((VideoGameHoldingCompany(x) & HoldingCompany(y) & HoldingCompany(z)) -> HoldingCompany(x,y,z))", "all x y z.((VideoGameHoldingCompany(x) & VideoGameHoldingCompany(y) & HoldingCompany(z)) -> HoldingCompany(x))"]}
{"id": "folio_train_1797", "nl": "Koei Tecmo holds another company.", "fol": "exists y.(IsCompany(y) & HoldsCompany(Koeitecmo,y))", "prediction": ["all x y.((KoeiTecmo(x) & Company(y)) -> Holds(x,y))", "all x.(KoeiTecmo(x) -> HoldsAnotherCompany(x))", "all x y z.((KoeiTecmo(x) & Company(y) & Company(z)) -> Holds(x,y,z))", "all x y.((KeiTecmo(x) & Company(y)) -> Holds(x,y))", "all x.(KoeiTecmo(x) -> HoldsOtherCompany(x))", "all x y.((CoeiTecmo(x) & Company(y)) -> Holds(x,y))", "exists x y.(CoeiTecmo(x) & Company(y) & Holds(x,y))", "all x y z.((KoeiTecmo(x) & Company(y) & Company(z)) -> Holds(x,y))", "all x.(KeiTecmo(x) -> HoldsAnotherCompany(x))", "all x y.((KoeiTecmo(x) & Company(y) & Holds(x,y)) -> Holds(x,y))", "all x.(KoeiTecmo(x) -> HoldsCompany(x))", "(HoldsCompany(KoeiTecmo) & HoldsCompany(KoeiTecmo))", "all x y z.((KoeiTecmo(x) & Company(y) & Company(z) & Holds(x,y,z)) -> Holds(x,y,z))", "all x y z.((KoeiTecmo(x) & Company(y) & Company(z) & Holds(x,y)) -> Holds(x,z))", "exists x.(KoeiTecmo(x) & Holds(x,y))", "all x y z.((KoeiTecmo(x) & Company(y) & Company(z) & Holds(x,y,z)) -> Holds(x,y))"]}
{"id": "folio_train_1798", "nl": "Tecmo holds another company.", "fol": "exists y.(IsCompany(y) & HoldsCompany(Tecmo,y))", "prediction": ["all x y.((Tecmo(x) & Company(y)) -> Holds(x,y))", "all x.(Tecmo(x) -> HoldsAnotherCompany(x))", "all x y z.((Tecmo(x) & Company(y) & Company(z)) -> Holds(x,y,z))", "all x.(Tecmo(x) -> HoldsOtherCompany(x))", "exists x y.(Tecmo(x) & Company(y) & Holds(x,y))", "Tecmo HoldsAnotherCompany(Tecmo)", "all x y z.((Tecmo(x) & Company(y) & Company(z)) -> Holds(x,y))", "all x.(Tecmo(x) -> HoldsCompany(x))", "all x y z.((Tecmo(x) & Company(y) & Company(z) & Holds(x,y,z)) -> Holds(x,y,z))", "exists x.(Tecmo(x) & Holds(x,y))", "all x y z.((Tecmo(x) & Company(y) & Company(z) & Holds(x,y)) -> Holds(x,z))", "all x y z.((Tecmo(x) & Company(y) & Company(z) & Holds(x,y,z)) -> Holds(x,y))", "exists x.(Tecmo(x) & Holds(x,Company))", "exists x.(Tecmo(x) & HoldsAnotherCompany(x))", "exists x.(Tecmo(x) & HoldsOtherCompany(x))", "All x.(Tecmo(x) -> HoldsAnotherCompany(x))"]}
{"id": "folio_train_1799", "nl": "Koei Tecmo holds anime.", "fol": "HoldsCompany(Koeitecmo,Anime)", "prediction": ["all x.(KoeiTecmo(x) -> HoldsAnime(x))", "all x y.((KoeiTecmo(x) & Anime(y)) -> Holds(x,y))", "all x.((KoeiTecmo(x) & HoldsAnime(x)) -> HoldsAnime(x))", "all x.((KoeiTecmo(x) & Anime(y)) -> Holds(x,y))", "exists x.(KoeiTecmo(x) & HoldsAnime(x))", "all x y.((KoeiTecmo(x) & anime(y)) -> Holds(x,y))", "all x.(KeiTecmo(x) -> HoldsAnime(x))", "all x.((KeiTecmo(x) & HoldsAnime(x)) -> HoldsAnime(x))", "all x.(KoeiTecmo(x) -> HoldsAnimal(x))", "all x.((KoeiTecmo(x) & Anime(x)) -> Holds(x,Anime))", "all x.((KoeiTecmo(x) & HoldsAnimal(x)) -> HoldsAnimal(x))", "all x.((KoeiTecmo(x) & anime(y)) -> Holds(x,y))", "all x.(CoeiTecmo(x) -> HoldsAnime(x))", "all x.(KoeiTecmo(x) -> HoldsAnima(x))", "all x.((KoeiTecmo(x) & HoldsAnime(x)) -> HoldsAnimal(x))", "all x.(HoldsAnime(x) -> KoeiTecmo(x))"]}
{"id": "folio_train_1800", "nl": "The PlayStation EyeToy is a camera accessory for the Playstation 2. ", "fol": "CameraAccessoryForSystem(Pseyetoy,Ps2)", "prediction": ["all x y.((Playstation2EyeToy(x) & Playstation2(y)) -> CameraAdjustment(x,y))", "all x y z.((Playstation(x) & EyeToy(y) & Playstation2(z)) -> CameraAdjustment(y,z))", "all x y.((Playstation2EyeToy(x) & Playstation2(y)) -> CameraAccessory(x,y))", "all x y.((Playstation2EyeToy(x) & Playstation2(y)) -> CameraAccessories(x,y))", "all x y z.((Playstation(x) & EyeToy(y) & Playstation2(z)) -> CameraAdjustment(x,y,z))", "all x y z.((Playstation(x) & EyeToy(y) & Playstation2(z)) -> CameraAccessory(y,z))", "all x.(Playstation2(x) -> EyeToy(x))", "all x y.((Playstation2EyeToy(x) & Playstation2(y)) -> CameraAppliance(x,y))", "all x y z.((Playstation(x) & EyeToy(y) & Playstation2(z)) -> CameraAccessories(y,z))", "all x.((Playstation2EyeToy(x) & CameraAdjustment(x)) -> CameraAdjustment(x))", "all x.(Playstation2EyeToy(x) -> CameraAdjustment(x))", "all x y z.((Playstation(x) & EyeToy(y) & Playstation2(z)) -> CameraAccessory(x,y,z))", "all x y z.((Playstation(x) & EyeToy(y) & Playstation2(z)) -> CameraAccessories(x,y,z))", "all x y z.((Playstation(x) & EyeToy(y) & Playstation2(z)) -> CameraAppliance(y,z))", "all x y z.((Playstation(x) & EyeToy(y) & Playstation(z)) -> CameraAdjustment(y,z))", "all x y.((Playstation(x) & EyeToy(y)) -> CameraAdjustment(x,y))"]}
{"id": "folio_train_1801", "nl": "The PlayStation Eye is a camera accessory for the Playstation 3.", "fol": "CameraAccessoryForSystem(Pseye,Ps3)", "prediction": ["all x y.((PlaystationEye(x) & Playstation3(y)) -> CameraAdjustment(x,y))", "all x y z.((PlaystationEye(x) & Playstation3(y) & Playstation3(z)) -> CameraAdjustment(x,y,z))", "all x y.((PlaystationEye(x) & Playstation3(y)) -> CameraAccessories(x,y))", "all x y z.((PlaystationEye(x) & Playstation3(y) & Playstation3(z)) -> CameraAccessories(x,y,z))", "all x y.((PlaystationEye(x) & Playstation3(y)) -> CameraAccessory(x,y))", "all x y z.((PlaystationEye(x) & Playstation3(y) & Playstation3(z)) -> CameraAccessory(x,y,z))", "all x.(PlaystationEye(x) -> (CameraAdjustment(x) & ForPlaystation3(x)))", "all x.(PseudoEye(x) -> (CameraAdjustment(x) & Playstation3(x)))", "all x.(PlaystationEye(x) -> (CameraAdjustment(x) & Playstation3(x)))", "all x.((PlaystationEye(x) & Playstation3(x)) -> CameraAdjustment(x))", "all x.(PlaystationEye(x) -> (CameraAccessories(x) & Playstation3(x)))", "all x y z.((PlaystationEye(x) & Playstation3(y) & Playstation3(z)) -> CameraAppliance(x,y,z))", "all x.(PseudoEye(x) -> (CameraAdjustment(x) & ForPlaystation3(x)))", "all x.(PlaystationEye(x) -> (CameraAccessory(x) & Playstation3(x)))", "all x.(PsystechEye(x) -> (CameraAdjustment(x) & Playstation3(x)))", "all x.(PlaystationEye(x) -> CameraAdjustment(x))"]}
{"id": "folio_train_1802", "nl": "The Playstation Camera is a camera accessory for the Playstation 4 and the Playstation 5.", "fol": "(CameraAccessoryForSystem(Pscamera,Ps4) & CameraAccessoryForSystem(Pscamera,Ps5))", "prediction": ["all x.(PlaystationCamera(x) -> (Appliance(x,Playstation4) & Appliance(x,Playstation5)))", "all x.(PlaystationCamera(x) -> (CameraAppliance(x) & CompatibleWithPlaystation4AndPlaystation5(x)))", "all x.(PlaystationCamera(x) -> (CameraAccessories(x) & Playstation4(x) & Playstation5(x)))", "all x.(PlaystationCamera(x) -> (CameraApplication(x,Playstation4) & CameraApplication(x,Playstation5)))", "all x.(PlaystationCamera(x) -> (Adjustment(x,Playstation4) & Adjustment(x,Playstation5)))", "all x.(PlaystationCamera(x) -> (CameraAdjustment(x,Playstation4) & CameraAdjustment(x,Playstation5)))", "all x.(PlaystationCamera(x) -> (CameraAppliance(x,Playstation4) & CameraAppliance(x,Playstation5)))", "all x y.((PlaystationCamera(x) & Playstation4(y) & Playstation5(y)) -> CameraAdjustment(x,y))", "all x y.((PlaystationCamera(x) & Playstation4(y) & Playstation5(y)) -> CameraAccessories(x,y))", "all x.(PlaystationCamera(x) -> (CameraApplication(x) & CompatibleWithPlaystation4AndPlaystation5(x)))", "all x y.((PlaystationCamera(x) & Playstation4(y) & Playstation5(y)) -> CameraAppliance(x,y))", "all x y z.((PlaystationCamera(x) & Playstation4(y) & Playstation5(z)) -> (CameraAppliance(x,y,z) & CompatibleWith(x,y,z)))", "all x.(PlaystationCamera(x) -> (CameraAdjustment(x) & CompatibleWithPlaystation4AndPlaystation5(x)))", "all x.(PlaystationCamera(x) -> (CameraAccessories(x) & CompatibleWithPlaystation4AndPlaystation5(x)))", "all x.(PlaystationCamera(x) -> (CameraAccessories(x,Playstation4) & Accessories(x,Playstation5)))", "all x y z.((PlaystationCamera(x) & Playstation4(y) & Playstation5(z)) -> (CameraAdjustment(x,y,z) & CompatibleWith(x,y,z)))"]}
{"id": "folio_train_1803", "nl": "Camera accessory for the system is compatible with that system", "fol": "all x y.(CameraAccessoryForSystem(x,y) -> IsCompatibleWith(x,y))", "prediction": ["all x y.((CameraAdjustment(x) & System(y)) -> CompatibleWith(x,y))", "all x y z.((CameraAdjustment(x) & System(y) & System(z)) -> CompatibleWith(x,y,z))", "all x y.((CameraAdjustment(x) & System(y) & CompatibleWith(x,y)) -> CompatibleWith(x,y))", "all x y z.((CameraAdjustment(x) & System(y) & System(z)) -> Compatible(x,y,z))", "all x y.((CameraAdjustment(x) & System(y)) -> Compatible(x,y))", "all x y z.((CameraAdjustment(x) & System(y) & System(z) & CompatibleWith(x,y,z)) -> CompatibleWith(x,y,z))", "all x y.((CameraAppliance(x) & System(y)) -> CompatibleWith(x,y))", "all x y.((CameraAppliance(x) & System(y)) -> Compatible(x,y))", "all x y.((CameraAdjustment(x) & System(y) & CompatibleWith(x,y)) -> Compatible(x,y))", "all x y z.((CameraAdjustment(x) & System(y) & System(z) & CompatibleWith(x,y,z)) -> Compatible(x,y,z))", "all x y.((CameraAccessories(x) & System(y)) -> Compatible(x,y))", "all x y.((CameraAccessories(x) & System(y)) -> CompatibleWith(x,y))", "all x y.((CameraAdjustment(x,y) & System(y)) -> CompatibleWith(x,y))", "all x y.((CameraAccessories(x) & System(y) & CompatibleWith(x,y)) -> CompatibleWith(x,y))", "all x y.((CameraAdjustment(x) & System(y) & Compatible(x,y)) -> Compatible(x,y))", "all x y z.((CameraAdjustment(x) & System(y) & System(z) & Compatible(x,y,z)) -> Compatible(x,y,z))"]}
{"id": "folio_train_1804", "nl": "Only the Playstation Camera is compatible with more than one system.", "fol": "(-IsCompatibleWith(Pseye,Ps2) & -IsCompatibleWith(Pseye,Ps4) & -IsCompatibleWith(Pseye,Ps5) & -IsCompatibleWith(Pseyetoy,Ps3) & -IsCompatibleWith(Pseyetoy,Ps4) & -IsCompatibleWith(Pseyetoy,Ps5))", "prediction": ["all x.(PlaystationCamera(x) -> CompatibleWithMoreThanOneSystem(x))", "all x y.((PlaystationCamera(x) & System(y)) -> Compatible(x,y))", "all x.(PlaystationCamera(x) -> CompatibleWithMultipleSystems(x))", "all x y.((PlaystationCamera(x) & System(y)) -> CompatibleWith(x,y))", "all x y z.((PlaystationCamera(x) & System(y) & System(z)) -> Compatible(x,y,z))", "all x y z.((PlaystationCamera(x) & System(y) & System(z)) -> CompatibleWith(x,y,z))", "All x.(PlaystationCamera(x) -> CompatibleWithMoreThanOneSystem(x))", "all x y z.((PlaystationCamera(x) & System(y) & System(z) & CompatibleWith(x,y,z)) -> CompatibleWith(x,y,z))", "all x y z.((PlaystationCamera(x) & System(y) & System(z) & Compatible(x,y,z)) -> Compatible(x,y,z))", "all x y.((PlaystationCamera(x) & System(y) & CompatibleWith(x,y)) -> CompatibleWith(x,y))", "all x y z.((PlaystationCamera(x) & System(y) & System(z) & CompatibleWith(x,y,z)) -> Compatible(x,y,z))", "all x y.((PlaystationCamera(x) & System(y) & Compatible(x,y)) -> Compatible(x,y))", "all x y.((PlaystationCamera(x) & System(y) & CompatibleWith(x,y)) -> Compatible(x,y))", "all x y z.((PlaystationCamera(x) & System(y) & System(z) & Compatible(x,y,z)) -> CompatibleWith(x,y,z))", "All x.(PlaystationCamera(x) -> CompatibleWithMultipleSystems(x))", "all x y.((PlaystationCamera(x) & System(y) & Compatible(x,y)) -> CompatibleWith(x,y))"]}
{"id": "folio_train_1805", "nl": "The Playstation Eye can be used with the Playstation 2 and the Playstation 3.", "fol": "(IsCompatibleWith(Pseye,Ps2) & IsCompatibleWith(Pseye,Ps3))", "prediction": ["all x y z.((PlaystationEye(x) & Playstation2(y) & Playstation3(z)) -> (UsedWith(x,y) & UsedWith(x,z)))", "all x y z.((PlaystationEye(x) & Playstation2(y) & Playstation3)) -> (UsedWith(x,y) & UsedWith(x,z)))", "all x y.((PlaystationEye(x) & Playstation2(y)) -> (UsedWith(x,y) & UsedWith(x,y)))", "all x.(PlaystationEye(x) -> (UsedWithPlaystation2(x) & UsedWithPlaystation3(x)))", "all x.(PlaystationEye(x) -> (UsedWithPlaystation2(x) | UsedWithPlaystation3(x)))", "all x.(PlaystationEye(x) -> (UsedWithPlaystation2(x) | UsedWithPlaystation3)(x)))", "all x y z.((PlaystationEye(x) & Playstation2(y) & Playstation3(z)) -> (UsedWith(x,y,z) & UsedWith(x,y)))", "all x y z.((PlaystationEye(x) & Playstation2(y) & Playstation3(z)) -> (UsedWith(x,y,z) & UsedWith(x,y,z)))", "all x.(PlaystationEye(x) -> (Playstation2(x) | Playstation3)(x)))", "all x.(PlaystationEye(x) -> (Playstation2(x) | Playstation3(x)))", "(PlaystationEye(Playstation2) & Playstation3(Playstation2))", "all x y.((PlaystationEye(x) & Playstation2(y) & Playstation3)) -> CanBeUsedWith(x,y))", "all x y.((PlaystationEye(x) & Playstation2(y) & Playstation3)) -> (UsedWith(x,y) & UsedWith(x,y)))", "all x y.((PlaystationEye(x) & Playstation2(y) & Playstation3(y)) -> CanBeUsedWith(x,y))", "all x.(PlaystationEye(x) -> (UsedWithPlaystation2(x) & UsedWithPlaystation3)(x)))", "All x.(PlaystationEye(x) -> (UsedWithPlaystation2(x) | UsedWithPlaystation3(x)))"]}
{"id": "folio_train_1806", "nl": "The Playstation EyeToy is compatible with the Playstation 2.", "fol": "IsCompatibleWith(Pseyetoy,Ps2)", "prediction": ["All x.(PlaystationEyeToy(x) -> CompatibleWithPlaystation2(x))", "all x y z.((PlaystationEyeToy(x) & Playstation2(y) & Playstation2(z)) -> Compatible(x,y,z))", "All x y z.((PlaystationEyeToy(x) & Playstation2(y) & Playstation2(z)) -> Compatible(x,y,z))", "All x y.((PlaystationEyeToy(x) & Playstation2(y)) -> Compatible(x,y))", "all x y.((PlaystationEyeToy(x) & Playstation2(y)) -> Compatible(x,y))", "All x y.((PlaystationEyeToy(x) & Playstation2(y)) -> CompatibleWith(x,y))", "all x y.((PlaystationEyeToy(x) & Playstation2(y)) -> CompatibleWith(x,y))", "all x y z.((PlaystationEyeToy(x) & Playstation2(y) & Playstation2(z)) -> CompatibleWith(x,y,z))", "All x y z.((PlaystationEyeToy(x) & Playstation2(y) & Playstation2(z)) -> CompatibleWith(x,y,z))", "all x.(PlaystationEyeToy(x) -> CompatibleWithPlaystation2(x))", "All x y.((Playstation(x) & Playstation2(y)) -> Compatible(x,y))", "All x y.((Playstation(x) & Playstation2(y)) -> CompatibleEyeToy(x,y))", "all x y.((Playstation(x) & Playstation2(y)) -> Compatible(x,y))", "all x y.((Playstation(x) & Playstation2(y)) -> CompatibleEyeToy(x,y))", "(CompatibleWithPlaystation2(Playstation) & CompatibleWithPlaystation2(Playstation))", "All x.(PlaystationEyeToy(x) -> (CompatibleWithPlaystation2(x) & CompatibleWithPlaystation2(x)))"]}
{"id": "folio_train_1807", "nl": "The Playstation Camera can be used for all Playstation consoles.", "fol": "all x.(PlayStationConsole(x) -> IsCompatibleWith(Pscamera,x))", "prediction": ["all x.(PlaystationCamera(x) -> CanBeUsedForPlaystationConsole(x))", "all x.(PlaystationCamera(x) -> CanBeUsedForPlaystationConsoles(x))", "all x.(PlaystationCamera(x) -> CanBeUsedForAllPlaystationConsoles(x))", "all x y.((PlaystationCamera(x) & PlaystationConsole(y)) -> CanBeUsedFor(x,y))", "all x y.((PlaystationCamera(x) & PlaystationConsole(y)) -> CanBeUsed(x,y))", "all x.(PlaystationCamera(x) -> UsedForPlaystationConsole(x))", "all x.(PlaystationCamera(x) -> UsedForPlaystationConsoles(x))", "all x.(PlaystationCamera(x) -> UsedForAllPlaystationConsoles(x))", "all x y.((PlaystationCamera(x) & PlaystationConsole(y)) -> UsedFor(x,y))", "all x.(PlaystationCamera(x) -> exists y.(PlaystationConsole(y) & UsedFor(x,y)))", "all x.(PlaystationCamera(x) -> (UsedForPlaystationConsole(x) | UsedForPlaystationConsole(x)))", "All x.(PlaystationCamera(x) -> CanBeUsedForPlaystationConsole(x))", "All x.(PlaystationCamera(x) -> CanBeUsedForPlaystationConsoles(x))", "all x.(PlaystationCamera(x) -> AvailableForPlaystationConsoles(x))", "all x.(PlaystationCamera(x) -> (UsedForPlaystationConsole(x) & UsedForPlaystationConsole(x)))", "all x.(PlaystationCamera(x) -> exists y.(PlaystationConsole(y) & UsedFor(x,y))))"]}
{"id": "folio_train_1808", "nl": "Adam Buska is a European football player.", "fol": "(IsFootballPlayer(Adambuska) & IsEuropean(Adambuska))", "prediction": ["all x.((AdamBuska(x) & EuropeanFootballPlayer(x)) -> FootballPlayer(x))", "Adam Buska (EuropeanFootballPlayer)", "all x.(AdamBuska(x) -> (EuropeanFootballPlayer(x) & EuropeanFootballPlayer(x)))", "all x.((AdamBuska(x) & EuropeanFootballPlayer(x)) -> PlaysIn(x,y))", "AdamBuska(a) is a EuropeanFootballPlayer(a))", "all x.((AdamBuska(x) & EuropeanFootballPlayer(x)) -> Player(x))", "all x.((AdamBuska(x) & EuropeanFootballPlayer(x)) -> Plays(x,y))", "all x.((AdamBuska(x) & EuropeanFootballPlayer(x)) -> AdamBuska(x))", "all x.((AdamBuska(x) & FootballPlayer(x)) -> European(x))", "all x.((AdamBuska(x) & EuropeanFootballPlayer(x)) -> FootballPilot(x))", "all x.((AdamBuska(x) & EuropeanFootballPlayer(x)) -> Football(x))", "(EuropeanFootballPlayer(AdamBuska) & EuropeanFootballPlayer(AdamBuska))", "all x.((AdamBuska(x) & EuropeanFootballPlayer(x)) -> AmericanFootballPlayer(x))", "all x.((AdamBuska(x) & EuropeanFootballPlayer(x)) -> American(x))", "all x.((AdamBuska(x) & EuropeanFootballPlayer(x)) -> CanPlay(x,y))", "all x.(AdamBuska(x) -> EuropeanFootballPlayer(x))"]}
{"id": "folio_train_1809", "nl": "If a European plays football, they play what Americans call soccer.", "fol": "all x.((IsFootballPlayer(x) & IsEuropean(x)) -> PlaysSoccer(x))", "prediction": ["all x.((European(x) & PlaysFootball(x)) -> PlaysWhatAmericansCalledSoccer(x))", "all x y.((European(x) & American(y)) -> PlaysFootball(x,y))", "all x.((European(x) & PlaysFootball(x)) -> PlaysWhatAmericansCallsSoccer(x))", "all x.((European(x) & PlaysFootball(x)) -> PlaysSoccer(x))", "all x.((European(x) & PlaysFootball(x)) -> PlaysWhatAmericansCallSoccer(x))", "all x.((Europa(x) & PlaysFootball(x)) -> PlaysWhatAmericansCalledSoccer(x))", "all x.((European(x) & PlaysFootball(x)) -> PlaysWhatAmericasCalledSoccer(x))", "all x.((Europanian(x) & PlaysFootball(x)) -> PlaysWhatAmericansCalledSoccer(x))", "all x.((EuropeanPlaysFootball(x) & AmericanPlaysSoccer(x)) -> PlaysFootball(x))", "all x.((European(x) & PlaysFootball(x)) -> (PlaysWhatAmericansCalledSoccer(x)))", "all x.((European(x) & PlaysFootball(x)) -> PlaysWhatAmericansCalledSoccer(x))", "all x.(PlaysFootball(x) -> PlaysWhatAmericansCalledSoccer(x))", "all x.((European(x) & PlaysFootball(x)) -> PlaySoccer(x))", "all x y.((European(x) & American(y)) -> Plays(x,y))", "all x.((European(x) & PlaysFootball(x)) -> PlaysWhatAmericans(x))", "all x.((European(x) & PlaysFootball(x)) -> PlaysWhatAmerscansCalledSoccer(x))"]}
{"id": "folio_train_1810", "nl": "Adam Buska plays what Americans call soccer.", "fol": "PlaysSoccer(Adambuska)", "prediction": ["all x y.((AdamBuska(x) & American(y)) -> PlaysSoccer(x,y))", "all x y.((AdamBuska(x) & AmericanSoccer(y)) -> Plays(x,y))", "all x.(AdamBuska(x) -> PlaysWhatAmericansCalledSoccer(x))", "all x y z.((AdamBuska(x) & American(y) & Soccer(z)) -> Plays(x,y,z))", "all x.((AdamBuska(x) & AmericanSoccer(x)) -> Plays(x,y))", "all x y.((AdamBuska(x) & American(y)) -> Plays(x,y))", "all x.(AdamBuska(x) -> PlaysSoccer(x))", "all x.((AdamBuska(x) & American(x)) -> PlaysSoccer(x))", "all x.(AdamBuska(x) -> PlaysWhatAmericansCallSoccer(x))", "all x.(AdamBuska(x) -> PlaysWhatAmericansCallsSoccer(x))", "all x.((AdamBuska(x) & AmericansCallSoccer(x)) -> Plays(x,y))", "all x.((AdamBuska(x) & Americans(x)) -> PlaysSoccer(x))", "all x.((AdamBuska(x) & AmericansCalledSoccer(x)) -> Plays(x,y))", "all x.((AdamBuska(x) & AmericanSoccer(x)) -> Plays(x))", "all x.((AdamBuska(x) & AmericanSoccer(x)) -> Plays(x,AdamBuska))", "all x.(AdamBuska(x) -> Plays(x,Soccer))"]}
{"id": "folio_train_1811", "nl": "If the game has sold more than 1 million copies, then it is on the Best Seller list. ", "fol": "all x.(SoldOver1MillionCopies(x) -> OnBestSellerList(x))", "prediction": ["all x.((Game(x) & SoldMoreThanOneMillionCopies(x)) -> BestSellerList(x))", "all x.((Game(x) & SoldMoreThan1MCopies(x)) -> BestSellerList(x))", "all x.((Game(x) & SoldMoreThanMillionCopies(x)) -> BestSellerList(x))", "all x.((Game(x) & SoldMoreThan(x,1)) -> BestSellerList(x))", "all x.((Game(x) & SoldMoreThan(x,1000000)) -> BestSellerList(x))", "all x.((Game(x) & SoldMoreThan(x,y) & MoreThan(y,x)) -> BestSellerList(x))", "all x.((Game(x) & SoldMoreThan(x,y) & MillionCopies(y)) -> BestSellerList(x))", "all x.((Game(x) & SoldMoreThan(x,million)) -> BestSellerList(x))", "all x.((Game(x) & SoldMoreThan(x,1 MillionCopies)) -> BestSellerList(x))", "all x.((Game(x) & SoldMoreThan(x,y) & MoreThan(y)) -> BestSellerList(x))", "all x.((Game(x) & SoldMoreThan(x,1000)) -> BestSellerList(x))", "all x.((Game(x) & SoldMoreThan(x,500,000)) -> BestSellerList(x))", "all x.((Game(x) & SoldMoreThan(x,MillionCopies)) -> BestSellerList(x))", "all x.((Game(x) & SoldMoreThan(x,y) & MoreThan(y,z)) -> BestSellerList(x))", "all x.(SoldMoreThanOneMillionCopies(x) -> BestSellerList(x))", "all x.((Game(x) & SoldMoreThan(x,y)) -> BestSellerList(x))"]}
{"id": "folio_train_1812", "nl": "All Games developed by Paradox Development Studio sold more than 1 million copies. ", "fol": "all x.(DevelopedByParadoxDevelopmentStudio(x) -> SoldOver1MillionCopies(x))", "prediction": ["all x.((Game(x) & ParadoxDevelopmentStudio(x)) -> SoldMoreThanOneMillionCopies(x))", "all x y.((Game(x) & ParadoxDevelopmentStudio(y)) -> SoldMoreThan(x,y))", "all x.((Game(x) & ParadoxDevelopmentStudio(x)) -> SoldMoreThanMillionCopies(x))", "all x.((Game(x) & ParadoxDevelopmentStudio(x)) -> SoldMoreThan1MCopies(x))", "all x.((Game(x) & DevelopedByParadoxDevelopmentStudio(x)) -> SoldMoreThanOneMillionCopies(x))", "all x.((Game(x) & ParadoxDevelopmentStudio(x)) -> SoldMoreThan(x,million))", "all x.((Game(x) & ParadoxDevelopmentStudio(x)) -> SoldMoreThan(x,y))", "all x y.((Game(x) & ParadoxDevelopmentStudio(y) & DevelopedBy(x,y)) -> SoldMoreThan(x,y))", "all x.((Game(x) & ParadoxDevelopmentStudio(x)) -> SoldMoreThan(x,1000))", "all x y.((Game(x) & ParadoxDevelopmentStudio(y)) -> SoldMoreThanOneMillionCopies(x,y))", "all x.((Game(x) & ParadoxDevelopmentStudio(x)) -> SoldMoreThan(x,MillionCopies))", "all x.((Game(x) & DevelopedByParadoxDevelopmentStudio(x)) -> SoldMoreThan1MCopies(x))", "all x.((Game(x) & ParadoxDevelopmentStudio(x)) -> SoldMoreThan(x,1 MillionCopies))", "all x.((Game(x) & ParadoxDevelopmentStudio(x)) -> SoldMoreThan(x,1))", "all x.((Game(x) & ParadoxDevelopingStudio(x)) -> SoldMoreThanOneMillionCopies(x))", "all x.((Game(x) & ParadoxDevelopmentStudio(x)) -> SoldMoreThan(x,500,000))"]}
{"id": "folio_train_1813", "nl": "Some games published before 2010 support the Linux OS system. ", "fol": "exists x.(PublishedBefore2010(x) & SupportsLinuxOS(x))", "prediction": ["exists x.(Game(x) & PublishedBefore2010(x) & SupportsLinuxOS(x))", "exists x.(Game(x) & PublishedBefore2010(x) & SupportsLinuxOSSystem(x))", "exists x.(Game(x) & PublishedBefore(x,2010) & SupportsLinuxOS(x))", "exists x.(Game(x) & PublishedBefore(x,2010) & SupportsLinuxOSSystem(x))", "exists x.(Game(x) & PublishedBefore2010(x)) -> SupportsLinuxOS(x))", "exists x.(Game(x) & PublishedBefore2010(x)) -> SupportsLinuxOSSystem(x))", "exists x.(Game(x) & PublishedBefore2010(x) & SupportsLinuxOs(x))", "exists x y.(Game(x) & PublishedBefore2010(x) & SupportsLinuxOS(y))", "exists x.(Game(x) & PublishedBefore(x,2010)) -> SupportsLinuxOS(x))", "exists x.(Game(x) & PublishedBefore(x,10) & SupportsLinuxOS(x))", "exists x.(Game(x) & PublishedBefore2010(x) & SupportsLinuxOS(x))", "exists x.(Game(x) & PublishedBefore(x,y) & SupportsLinuxOS(x))", "exists x y.(Game(x) & PublishedBefore2010(x) & SupportsLinuxOSSystem(y))", "exists x y.(Game(x) & PublishedBefore(x,y) & LinuxOSSystem(y))", "exists x y.(Game(x) & PublishedBefore(x,y) & SupportsLinuxOS(x))", "exists x.(Game(x) & PublishedBefore2010(x))"]}
{"id": "folio_train_1814", "nl": "All games on the Best Seller list are popular among young people. ", "fol": "all x.(OnBestSellerList(x) -> PopularAmongYoungPeople(x))", "prediction": ["all x.((Game(x) & BestSellerList(x)) -> PopularAmongYoungPeople(x))", "all x.((Game(x) & BestSellerList(x)) -> PopularWithYoungPeople(x))", "all x.((Game(x) & OnBestSellerList(x)) -> PopularAmongYoungPeople(x))", "all x y.((Game(x) & BestSellerList(y)) -> PopularAmongYoungPeople(x,y))", "all x.((Game(x) & BestSeller(x)) -> PopularAmongYoungPeople(x))", "all x.((Game(x) & BestSellerList(x)) -> PopularAmongYoungPersons(x))", "all x.((Game(x) & PopularAmongYoungPeople(x)) -> BestSellerList(x))", "all x.((Game(x) & BestSellerList(x)) -> PopularAmongYoung(x))", "all x.((Game(x) & BestSellerList(x) & PopularAmongYoungPeople(x)) -> PopularAmongYoungPeople(x))", "all x.((Games(x) & BestSellerList(x)) -> PopularAmongYoungPeople(x))", "all x.((Game(x) & BestSellerList(x)) -> PopularAmongYoungPerson(x))", "all x.((Game(x) & BestSellerList(x)) -> PopularAmongYearlyPeople(x))", "all x y.((Game(x) & BestSellerList(y)) -> PopularAmongYoungPeople(x))", "all x.(BestSellerList(x) -> PopularAmongYoungPeople(x))", "all x y.((Game(x) & BestSellerList(x)) -> PopularAmongYoungPeople(y))", "all x.((Game(x) & BestSellerList(x)) -> PopularUnderYoungPeople(x))"]}
{"id": "folio_train_1815", "nl": "FIFA22 neither supports the Linux OS system nor is it popular among young people.", "fol": "-(SupportsLinuxOS(Fifa21) | PopularAmongYoungPeople(Fifa21))", "prediction": ["all x.(Football22(x) -> (-SupportsLinuxOS(x) & -PopularAmongYoungPeople(x)))", "all x.(Football22(x) -> (-SupportsLinuxOSSystem(x) & -PopularAmongYoungPeople(x)))", "(-SupportsLinuxOS(Football22) & -PopularAmongYoungPeople(Football22))", "all x.((Football22(x) & -(SupportsLinuxOS(x) | PopularAmongYoungPeople(x))) -> -(SupportsLinuxOS(x) & PopularAmongYoungPeople(x)))", "all x.((Football22(x) & -(SupportsLinuxOSSystem(x) | PopularAmongYoungPeople(x))) -> -(SupportsLinuxOSSystem(x) & PopularAmongYoungPeople(x)))", "all x.((Football22(x) & -(SupportsLinuxOS(x) | PopularAmongYoungPeople(x))) -> -SupportsLinuxOS(x))", "all x.((Football22(x) & -(SupportsLinuxOS(x) | PopularAmongYoungPeople(x))) -> -(SupportsLinuxOS(x) & PopularAmongYoungPeople(x))))", "all x.((Football22(x) & -(SupportsLinuxOSSystem(x) | PopularAmongYoungPeople(x))) -> -SupportsLinuxOSSystem(x))", "all x.((Football22(x) & -(SupportsLinuxOSSystem(x) | PopularAmongYoungPeople(x))) -> -(SupportsLinuxOSSystem(x) & PopularAmongYoungPeople(x))))", "(-SupportsLinuxOS(FIFA22) & -PopularAmongYoungPeople(FIFA22))", "-exists x.(Football22(x) & -SupportsLinuxOS(x) & -PopularAmongYoungPeople(x))", "all x.((Football22(x) & -(SupportsLinuxOS(x) | PopularAmongYoungPeople(x))) -> -(SupportsLinuxOS(x) | PopularAmongYoungPeople(x))))", "all x.((Football22(x) & -SupportsLinuxOS(x)) -> -PopularAmongYoungPeople(x))", "(-SupportsLinuxOSSystem(Football22) & -PopularAmongYoungPeople(Football22))", "all x.((Football22(x) & -(SupportsLinuxOSSystem(x) | PopularAmongYoungPeople(x))) -> -(SupportsLinuxOSSystem(x) | PopularAmongYoungPeople(x))))", "-exists x.(Football22(x) & -(SupportsLinuxOS(x) | PopularAmongYoungPeople(x)))"]}
{"id": "folio_train_1816", "nl": "FIFA21 is published before 2010", "fol": "PublishedBefore2010(Fifa21)", "prediction": ["all x y.((Football(x) & FIFA21(y) & PublishedBefore2010(x,y)) -> PublishedBefore2010(x,y))", "all x.((Football(x) & PublishedBefore2010(x)) -> FIFA21(x))", "all x y.((Football(x) & FIFA21(y) & PublishedBefore2010(x,y)) -> PublishedBefore2010(y))", "all x y.((Football(x) & FIFA21(y)) -> PublishedBefore2010(x,y))", "all x.((Favorite(x) & PublishedBefore2010(x)) -> FIFA21(x))", "all x.((Football21(x) & PublishedBefore2010(x)) -> FIFA21PublishedBefore2010(x))", "all x.((Football21(x) & PublishedBefore2010(x)) -> PublishedBefore2010(x))", "all x y.((Favorite(x) & FIFA21(y) & PublishedBefore2010(x,y)) -> PublishedBefore2010(x,y))", "all x.(Favorite21(x) -> PublishedBefore2010(x))", "all x y.((Favorite(x) & FIFA21(y)) -> PublishedBefore2010(x,y))", "all x y.((Football(x) & FIFA21(y) & PublishedBefore2010(x,y)) -> PublishedBefore2010(x))", "all x.(Football21(x) -> PublishedBefore2010(x))", "all x.(Favorite(x) -> (PublishedBefore2010(x) & FIFA21(x)))", "all x y.((Football(x) & FIFA21(y) & PublishedBefore2010(x,y)) -> PublishedBefore2010(y,x))", "all x y.((Favorite(x) & FIFA21(y) & PublishedBefore2010(x,y)) -> PublishedBefore2010(y))", "all x.((Football21(x) & PublishedBefore2010(x)) -> FIFA21(x))"]}
{"id": "folio_train_1817", "nl": "FIFA21 is published before 2010 and developed by Paradox Development Studio", "fol": "(PublishedBefore2010(Fifa21) & DevelopedByParadoxDevelopmentStudio(Fifa21))", "prediction": ["all x.(Football21(x) -> (PublishedBefore2010(x) & DevelopedByParadoxDevelopmentStudio(x)))", "all x.(Football(x) -> (PublishedBefore2010(x) & DevelopedByParadoxDevelopmentStudio(x)))", "All x.(Football21(x) -> (PublishedBefore2010(x) & DevelopedByParadoxDevelopmentStudio(x)))", "all x y.((Football21(x) & PublishedBefore2010(x) & ParadoxDevelopmentStudio(y)) -> (DevelopedBy(x,y) & PublishedBefore2010(x) & ParadoxDevelopmentStudio(y)))", "all x.(Football21(x) -> (PublishedBefore2010(x) & DevelopedByParadoxDevelopmentStudio(x)))", "All x.(Football(x) -> (PublishedBefore2010(x) & DevelopedByParadoxDevelopmentStudio(x)))", "all x y.((Football21(x) & PublishedBefore2010(x) & ParadoxDevelopmentStudio(y)) -> (DevelopedBy(x,y) & ParadoxDevelopmentStudio(y)))", "all x y z.((Football(x) & FIFA21(y) & ParadoxDevelopmentStudio(z)) -> (PublishedBefore2010(x) & DevelopedBy(y,z)))", "all x.(Football21(x) -> (PublishedBefore2010(x) & DevelopedByParadoxDestinationStudio(x)))", "all x y z.((Football(x) & FIFA21(y) & ParadoxDevelopmentStudio(z)) -> (PublishedBefore2010(x,y) & DevelopedBy(y,z)))", "all x.((Football21(x) & PublishedBefore2010(x) & ParadoxDevelopmentStudio(x)) -> DevelopedBy(x,Football21))", "all x.(Favorite21(x) -> (PublishedBefore2010(x) & DevelopedByParadoxDevelopmentStudio(x)))", "all x y.((Football21(x) & PublishedBefore2010(x) & ParadoxDevelopmentStudio(y)) -> (DevelopedBy(x,y) & ParadoxDevelopmentStudio(x)))", "all x.((Football21(x) & PublishedBefore2010(x) & ParadoxDevelopmentStudio(x)) -> (DevelopedBy(x,Football21) & ParadoxDevelopmentStudio(x)))", "all x y z.((Football(x) & FIFA21(y) & ParadoxDevelopmentStudio(z)) -> (PublishedBefore2010(x,y) & DevelopedBy(x,z)))", "all x.(Football21(x) -> (PublishedBefore2010(x) & ParadoxDevelopmentStudio(x)))"]}
{"id": "folio_train_1818", "nl": "if FIFA21 is either a game published before 2010 or developed by Paradox Development Studio, then it is either in the Best Seller list and sold more than 1 million copies; or not in the Best Seller list and hasn't sold more than 1 million copies.", "fol": "((FPublishedBefore2010(Fifa21) | DevelopedByParadoxDevelopmentStudio(Fifa21)) -> ((OnBestSellerList(Fifa21) & SoldOver1MillionCopies(Fifa21)) | (-OnBestSellerList(Fifa21) & -SoldOver1MillionCopies(Fifa21))))", "prediction": ["all x.((Game(x) & (PublishedBefore2010(x) | DevelopedByParadoxDevelopmentStudio(x))) -> (BestSellerList(x) & SoldMoreThanOneMillionCopies(x)) | -BestSellerList(x) & -SoldMoreThanOneMillionCopies(x)))", "all x.((Game(x) & PublishedBefore2010(x) | DevelopedByParadoxDevelopmentStudio(x)) -> (BestSellerList(x) & SoldMoreThanOneMillionCopies(x)) | -BestSellerList(x) & -SoldMoreThanOneMillionCopies(x)))", "all x.((Game(x) & (PublishedBefore2010(x) | DevelopedByParadoxDevelopmentStudio(x))) -> (BestSellerList(x) & SoldMoreThan1MCopies(x)) | -BestSellerList(x) & -SoldMoreThan1MCopies(x)))", "all x.((Game(x) & (PublishedBefore2010(x) | DevelopedByParadoxDevelopmentStudio(x))) -> (BestSellerList(x) & SoldMoreThanMillionCopies(x)) | -BestSellerList(x) & -SoldMoreThanMillionCopies(x)))", "all x.((Game(x) & (PublishedBefore2010(x) | DevelopedByParadoxDevelopmentStudio(x))) -> (BestSellerList(x) & SoldMoreThanOneMillionCopies(x) | -BestSellerList(x) & -SoldMoreThanOneMillionCopies(x)))", "all x.((Game(x) & PublishedBefore2010(x) | DevelopedByParadoxDevelopmentStudio(x)) -> (BestSellerList(x) & SoldMoreThan1MCopies(x)) | -BestSellerList(x) & -SoldMoreThan1MCopies(x)))", "all x.((Fantasy21(x) & (PublishedBefore2010(x) | DevelopedByParadoxDevelopmentStudio(x))) -> (BestSellerList(x) & SoldMoreThanOneMillionCopies(x)) | -BestSellerList(x) & -SoldMoreThanOneMillionCopies(x)))", "all x.((Game(x) & PublishedBefore2010(x) | DevelopedByParadoxDevelopmentStudio(x)) -> (BestSellerList(x) & SoldMoreThanMillionCopies(x)) | -BestSellerList(x) & -SoldMoreThanMillionCopies(x)))", "all x.((FoxFox21(x) & (PublishedBefore2010(x) | DevelopedByParadoxDevelopmentStudio(x))) -> (BestSellerList(x) & SoldMoreThanOneMillionCopies(x)) | -BestSellerList(x) & -SoldMoreThanOneMillionCopies(x)))", "all x.((Game(x) & (PublishedBefore2010(x) | DevelopedByParadoxDevelopmentStudio(x))) -> (BestSellerList(x) & SoldMoreThan1MCopies(x) | -BestSellerList(x) & -SoldMoreThan1MCopies(x)))", "all x.((Foxball21(x) & (PublishedBefore2010(x) | DevelopedByParadoxDevelopmentStudio(x))) -> (BestSellerList(x) & SoldMoreThanOneMillionCopies(x)) | -BestSellerList(x) & -SoldMoreThanOneMillionCopies(x)))", "all x.((Fantasy21(x) & (PublishedBefore2010(x) | DevelopedByParadoxDevelopmentStudio(x))) -> (BestSellerList(x) & SoldMoreThan1MCopies(x)) | -BestSellerList(x) & -SoldMoreThan1MCopies(x)))", "all x.((Game(x) & PublishedBefore2010(x) | DevelopedByParadoxDevelopmentStudio(x)) -> (BestSellerList(x) & SoldMoreThanOneMillionCopies(x)) | (-BestSellerList(x) & -SoldMoreThanOneMillionCopies(x))))", "all x.((Game(x) & (PublishedBefore2010(x) | DevelopedByParadoxDevelopmentStudio(x))) -> (BestSellerList(x) & SoldMoreThanOneMillionCopies(x)) | (-BestSellerList(x) & -SoldMoreThanOneMillionCopies(x))))", "all x.((Game(x) & (PublishedBefore2010(x) | DevelopedByParadoxDevelopmentStudio(x))) -> (BestSellerList(x) & SoldMoreThanOneMillionCopies(x)) | (-BestSellerList(x) & -SoldMoreThanOneMillionCopies(x)))))", "all x.((Game(x) & (PublishedBefore2010(x) | DevelopedByParadoxDevelopmentStudio(x))) -> (BestSellerList(x) & SoldMoreThanOneMillionCopies(x)) | (-BestSellerList(x) & SoldMoreThanOneMillionCopies(x))))"]}
{"id": "folio_train_1819", "nl": "China is one of BRICS and its economy is emerging.", "fol": "all x.((IsChina(x) -> IsBRICSMember(x)) & HasEmergingEconomy(x))", "prediction": ["all x.(China(x) -> (BRICS(x) & EmergingEconomy(x)))", "all x.((China(x) & BRICS(x)) -> EconomicEmerging(x))", "all x.((China(x) & BRICS(x)) -> EmergingEconomy(x))", "all x.(China(x) -> (BRICS(x) & EconomicEmerging(x)))", "all x.((China(x) & BRICS(x)) -> EconomyEmerging(x))", "all x.((China(x) & BRICS(x)) -> EmergingEconomy(x))", "all x.(Chinese(x) -> (BRICS(x) & EmergingEconomy(x)))", "all x.(China(x) -> (BRICS(x) & EmergingEconomy(x)))", "(all x.(China(x) & BRICS(x)) -> EmergingEconomy(x))", "(all x.(China(x) -> BRICS(x)) & its EconomyEmerging(x))", "all x.((China(x) & BRICS(x)) -> EvolvingEconomy(x))", "(BRICS(China) & EmergingEconomy(China))", "all x.(China(x) -> (BRICS(x) & EconomyEmerging(x)))", "all x.((China(x) & BRICS(x)) -> EconomicEmergency(x))", "all x y.((China(x) & BRICS(y)) -> EconomicEmerging(x))", "all x y.((China(x) & BRICS(y)) -> EconomicEmerging(x,y))"]}
{"id": "folio_train_1820", "nl": "India is one of BRICS and its economy is emerging.", "fol": "all x.((IsIndia(x) -> IsBRICSMember(x)) & HasEmergingEconomy(x))", "prediction": ["all x.(India(x) -> (BRICS(x) & EmergingEconomy(x)))", "all x.((India(x) & BRICS(x)) -> EmergingEconomy(x))", "all x.(Individual(x) -> (BRICS(x) & EmergingEconomy(x)))", "all x.((India(x) & BRICS(x)) -> EconomicEmerging(x))", "all x.(Indien(x) -> (BRICS(x) & EmergingEconomy(x)))", "all x.(India(x) -> (BRICS(x) & EconomicEmerging(x)))", "all x.(Index(x) -> (BRICS(x) & EmergingEconomy(x)))", "all x.((Index(x) & BRICS(x)) -> EmergingEconomy(x))", "all x.(Individual(x) -> (BRICS(x) & EconomicEmerging(x)))", "all x.((Individual(x) & BRICS(x)) -> EmergingEconomy(x))", "all x.((India(x) & BRICS(x)) -> EmergingEconomy(x))", "all x.((Index(x) & BRICS(x)) -> EconomicEmerging(x))", "all x.((India(x) & BRICS(x)) -> EconomyEmerging(x))", "all x.(Industry(x) -> (BRICS(x) & EmergingEconomy(x)))", "all x.(India(x) -> (BRICS(x) & EmergingEconomy(x)))", "all x.(Indian(x) -> (BRICS(x) & EmergingEconomy(x)))"]}
{"id": "folio_train_1821", "nl": "All people from China speak Chinese.", "fol": "all x y.((IsFrom(x,y) & IsChina(y)) -> SpeaksLanguage(x,Chinese))", "prediction": ["all x.((Person(x) & FromChina(x)) -> SpeaksChinese(x))", "all x.((Person(x) & FromChina(x)) -> SpeakChinese(x))", "all x.(ChinaPerson(x) -> SpeaksChinese(x))", "all x.((Person(x) & China(x)) -> SpeaksChinese(x))", "all x.((Person(x) & Chinese(x)) -> SpeaksChinese(x))", "all x.((Person(x) & ComesFromChina(x)) -> SpeaksChinese(x))", "all x.((Person(x) & China(x)) -> SpeakChinese(x))", "all x.(ChinaPerson(x) -> SpeakChinese(x))", "all x.((People(x) & FromChina(x)) -> SpeaksChinese(x))", "all x.((Person(x) & ComesFromChina(x)) -> SpeakChinese(x))", "all x.((Person(x) & FromChinese(x)) -> SpeaksChinese(x))", "all x.((Person(x) & Chinese(x)) -> SpeakChinese(x))", "all x.((Person(x) & Chinese(x)) -> Speak(x,Chinese))", "all x.(ChinesePerson(x) -> SpeaksChinese(x))", "all x.((Person(x) & FromChina(x)) -> Speak(x,Chinese))", "all x.((People(x) & FromChina(x)) -> SpeakChinese(x))"]}
{"id": "folio_train_1822", "nl": "All people from India speak Hindi or English.", "fol": "all x y.(((IsFrom(x,y) & IsIndia(y)) -> SpeaksLanguage(x,SpeaksHindi)) | SpeaksLanguage(x,SpeaksEnglish))", "prediction": ["all x.(IndianPerson(x) -> (SpeakHindi(x) | SpeakEnglish(x)))", "all x.(IndianPerson(x) -> (SpeaksHindi(x) | SpeaksEnglish(x)))", "all x.(Individual(x) -> (SpeakHindi(x) | SpeakEnglish(x)))", "all x.(Individual(x) -> (SpeaksHindi(x) | SpeaksEnglish(x)))", "all x.(IndianPerson(x) -> (SpeakHindi(x) | SpeakEnglish(x)))", "all x.(IndianPerson(x) -> (SpeaksHindi(x) | SpeaksEnglish(x)))", "all x.((Person(x) & India(x)) -> (SpeaksHindi(x) | SpeaksEnglish(x)))", "all x.(Indian(x) -> (SpeakHindi(x) | SpeakEnglish(x)))", "all x.((Person(x) & India(x)) -> (SpeakHindi(x) | SpeakEnglish(x)))", "all x.(Indian(x) -> (SpeaksHindi(x) | SpeaksEnglish(x)))", "all x.(IndianPerson(x) -> (SpeaksHindi(x) | SpeaksEnglisch(x)))", "all x.(Individual(x) -> (SpeaksHindi(x) | SpeaksEnglish(x)))", "all x.(Individual(x) -> (SpeakHindi(x) | SpeakEnglish(x)))", "all x.(Individual(x) -> (SpeaksHindi(x) | SpeaksEnglisch(x)))", "all x.(Individual(x) -> (SpeakHindi(x) | SpeakEnglish(x)))", "all x.(IndianPerson(x) -> (SpeakHindi(x) | SpeakEnglisch(x)))"]}
{"id": "folio_train_1823", "nl": "There is an Indian.", "fol": "exists x y.(IsFrom(x,y) & IsIndia(y))", "prediction": ["exists x.(Indian(x) & LivesIn(x))", "exists x.(Indian(x) & LivesIn(x))", "exists x.(Indian(x) & Indian(x))", "exists x.(Indian(x) & -Indian(x))", "exists x.(Individual(x) & LivesIn(x))", "exists x.(Indian(x) & -Indian(x))", "exists x.(Indian(x) & -Individual(x))", "exists x.(Indian(x) & -Indian(x))", "exists x.(Indian(x) & Is(x))", "exists x.(Indian(x) & LivesInIndia(x))", "exists x.(Individual(x) & -Individual(x))", "exists x.(Indian(x) & TravelsWith(x,y))", "exists x.(Indian(x) & Is(x))", "exists x.(Indian(x) & Native(x))", "exists x.(Indian(x) & Indian(x))", "exists x.(Individual(x) & LivesInIndia(x))"]}
{"id": "folio_train_1824", "nl": "All people from BRICS neither speak Hindi nor speak English.", "fol": "all x y.(((IsFrom(x,y) & IsBRICSMember(y)) -> -SpeaksLanguage(x,SpeaksHindi)) & -SpeaksLanguage(x,SpeaksEnglish))", "prediction": ["all x.((Person(x) & BRICS(x)) -> (-SpeaksHindi(x) & -SpeaksEnglish(x)))", "all x.((Person(x) & BRICS(x)) -> (-SpeaksHindi(x) | SpeaksEnglish(x)))", "all x.((Person(x) & BRICS(x)) -> (-SpeakHindi(x) | SpeakEnglish(x)))", "all x.((Person(x) & BRICS(x)) -> -SpeaksHindi(x) & -SpeaksEnglish(x))", "all x.((Person(x) & BRICS(x)) -> (-SpeakHindi(x) & -SpeakEnglish(x)))", "all x.((Person(x) & FromBRICS(x)) -> (-SpeaksHindi(x) & -SpeaksEnglish(x)))", "all x.((Person(x) & BRICS(x)) -> -(SpeaksHindi(x) | SpeaksEnglish(x)))", "all x.((Person(x) & FromBRICS(x)) -> (-SpeaksHindi(x) | SpeaksEnglish(x)))", "all x.(BRICSPerson(x) -> (-SpeaksHindi(x) | SpeaksEnglish(x)))", "all x.((Person(x) & BRICS(x)) -> -(SpeaksHindi(x) | SpeaksEnglish(x))))", "all x.((Person(x) & FromBRICS(x)) -> -SpeaksHindi(x) & -SpeaksEnglish(x))", "all x.((Person(x) & FromBRICS(x)) -> (-SpeakHindi(x) | SpeakEnglish(x)))", "all x.(BRICSPerson(x) -> (-SpeaksHindi(x) & -SpeaksEnglish(x)))", "all x.((Person(x) & FromBRICS(x)) -> -(SpeaksHindi(x) | SpeaksEnglish(x)))", "all x.((Person(x) & BRICS(x)) -> (-SpeaksHindi(x) & -SpeaksEnglisch(x)))", "all x.((Person(x) & BRICS(x)) -> -(SpeakHindi(x) | SpeakEnglish(x)))"]}
{"id": "folio_train_1825", "nl": "India's economy is not emerging.", "fol": "all x.(IsIndia(x) -> -HasEmergingEconomy(x))", "prediction": ["all x.(IndianEconomy(x) -> -Emerging(x))", "all x.(India'sEconomy(x) -> -Emerging(x))", "all x.(IndianEconomy(x) -> -Emerging(x))", "all x.(IndividualEconomy(x) -> -Emerging(x))", "all x.(IndiasEconomy(x) -> -Emerging(x))", "all x.(IndienEconomy(x) -> -Emerging(x))", "all x.(India(x) -> -EmergingEconomy(x))", "all x.(India(x) -> -Emerging(x))", "all x.(India'sEconomy(x) -> -Emerging(x))", "all x.(IndianEconomy(x) -> -Emerging(x))", "(-EmergingEconomy(India))", "all x.(India'sEconomy(x) & -Emerging(x))", "all x.(IndianEconomy(x) & -Emerging(x))", "all x.(IndiasEconomy(x) -> -Emerging(x))", "all x.(IndianEconomy(x) -> NotEmerging(x))", "all x.(IndianEconomy(x) -> -Emerging(x))"]}
{"id": "folio_train_1826", "nl": "There is a person from BRICS speaking Hindi.", "fol": "exists x y.(IsFrom(x,y) & IsBRICSMember(y) & SpeaksLanguage(x,SpeaksHindi))", "prediction": ["exists x.(Person(x) & BRICS(x) & SpeaksHindi(x))", "exists x.(Person(x) & BRICS(x) & SpeakingHindi(x))", "exists x.(Person(x) & FromBRICS(x) & SpeakingHindi(x))", "exists x.(Person(x) & FromBRICS(x) & SpeaksHindi(x))", "exists x.(BRICSPerson(x) & SpeaksHindi(x))", "exists x.(PersonFromBRICS(x) & SpeaksHindi(x))", "exists x.(PersonFromBRICS(x) & SpeakingHindi(x))", "exists x.(BRICSPerson(x) & SpeakingHindi(x))", "exists x.(BritishPerson(x) & SpeaksHindi(x))", "exists x.(BritishPerson(x) & SpeakingHindi(x))", "exists x.(Person(x) & BRICS(x) & SpeakHindi(x))", "exists x y.(Person(x) & BRICS(y) & SpeaksHindi(x,y))", "exists x.(BrICSPerson(x) & SpeaksHindi(x))", "exists x.(Person(x) & FromBRICS(x) & SpeakHindi(x))", "exists x y.(Person(x) & BRICS(y) & SpeakingHindi(x,y))", "exists x.(Person(x) & FromBRICS(x) & SpeakesHindi(x))"]}
{"id": "folio_train_1827", "nl": "Daveed Diggs is an actor and film producer.", "fol": "(IsActor(DaveedDiggs) & IsFilmProducer(DaveedDiggs))", "prediction": ["all x.(DaveedDiggs(x) -> (Actor(x) & FilmProducer(x)))", "(Actor(Daveed Diggs) & FilmProducer(Daveed Diggs))", "DaveedDiggs(x) -> (Actor(x) & FilmProducer(x)))", "DaveedDiggs(x) & Actor(x) & FilmProducer(x))", "(Actor(Daveed Diggs) & FilmProducer(DaveedDiggs))", "(Actor(Daveed Diggs) & FilmProducer(DaveedDuggs))", "DaveedDiggs(d) & Actor(d) & FilmProducer(d))", "DaveedDiggs(d) -> (Actor(d) & FilmProducer(d)))", "Daveed Diggs (Actor(d) & FilmProducer(d))", "DaveedDiggs(actor) & FilmProducer(a))", "(Actor(Daveed Diggs) & FilmProducer(DaveedDdiggs))", "(Actor(d) & FilmProducer(d) & DaveedDiggs(d))", "(Actor(Daveed Diggs) & FilmProducer(DaveedDIGGS))", "DaveedDiggs(d) is actor(d) & FilmProducer(d))", "(Actor(Daveed Diggs) & FilmProducer(DaveedDigigs))", "(Actor(Daveed Diggs) & FilmProducer(Daveed))"]}
{"id": "folio_train_1828", "nl": "Daveed Diggs played two roles in the musical Hamilton.", "fol": "(PlayedTwoRolesInHamilton(DaveedDiggs) & PerformedIn(DaveedDiggs,Hamilton) & IsMusical(Hamilton))", "prediction": ["all x y z.((DaveedDiggs(x) & Musical(y) & Musical(z)) -> PlayedIn(x,y,z))", "all x y.((DaveedDiggs(x) & MusicalHamilton(y)) -> PlayedRole(x,y))", "all x y z.((DaveedDiggs(x) & Musical(y) & Musical(z)) -> Played(x,y,z))", "all x y.((DaveedDiggs(x) & Musical(y)) -> Played(x,y))", "all x y.((DaveedDiggs(x) & Musical(y)) -> PlayedTwoRoles(x,y))", "all x y.((DaveedDiggs(x) & MusicalHamilton(y)) -> Played(x,y))", "all x y.((DaveedDiggs(x) & MusicalHamilton(y)) -> PlayedRoleIn(x,y))", "all x y.((DaveedDiggs(x) & Musical(y)) -> PlayedRoleIn(x,y))", "all x y.((DaveedDiggs(x) & Musical(y)) -> PlayedRole(x,y))", "all x y z.((DaveedDiggs(x) & Musical(y) & Musical(z)) -> PlayedRoleIn(x,y,z))", "all x.(DaveedDiggs(x) -> PlayedTwoRolesInMusicalHamilton(x))", "all x y.((DaveedDiggs(x) & Musical(y)) -> PlayedIn(x,y))", "all x y.((DaveedDiggs(x) & MusicalHamilton(y)) -> PlayedTwoRoles(x,y))", "all x y z.((DaveedDiggs(x) & Musical(y) & Musical(z)) -> PlayedRole(x,y,z))", "all x y.((DaveedDiggs(x) & Musical(y)) -> PlayedTwoRolesIn(x,y))", "all x y.((DaveedDiggs(x) & Musical(y)) -> PlayedTwoRole(x,y))"]}
{"id": "folio_train_1829", "nl": "One of the actors from Hamilton won the best actor award.", "fol": "exists x.(IsActor(x) & PerformedIn(x,Hamilton) & ReceivedBestActorAward(x))", "prediction": ["all x.((Actor(x) & FromHamilton(x)) -> WinsBestActorAward(x))", "all x.((Actor(x) & FromHamilton(x)) -> WonBestActorAward(x))", "all x.((Actor(x) & Hamilton(x)) -> WinsBestActorAward(x))", "all x y.((Actor(x) & Actor(y) & Hamilton(y)) -> WinsBestActorAward(x,y))", "all x y.((Actor(x) & Actor(y) & Hamilton(x)) -> WinsBestActorAward(x,y))", "all x y.((Actor(x) & Actor(y) & Hamilton(y)) -> WonBestActorAward(x,y))", "all x.((Actor(x) & Hamilton(x)) -> WonBestActorAward(x))", "all x y.((Actor(x) & Actor(y) & Hamilton(x)) -> WonBestActorAward(x,y))", "all x y.((Actor(x) & Actor(y) & FromHamilton(x)) -> WinsBestActorAward(x,y))", "all x.((Actor(x) & HamiltonActor(x)) -> WinsBestActorAward(x))", "all x y.((Actor(x) & Actor(y) & FromHamilton(x,y)) -> WinsBestActorAward(x,y))", "all x y.((Actor(x) & Actor(y) & FromHamilton(x)) -> WonBestActorAward(x,y))", "all x y.((Actor(x) & Actor(y) & FromHamilton(x,y)) -> WonBestActorAward(x,y))", "all x y.((Actor(x) & Actor(y) & FromHamilton(x,y)) -> WinsBestActorAward(x))", "all x.((Actor(x) & HamiltonActor(x)) -> WonBestActorAward(x))", "all x y.((Actor(x) & Hamilton(y)) -> WinsBestActorAward(x,y))"]}
{"id": "folio_train_1830", "nl": "The actor playing Thomas Jefferson won the best actor award.", "fol": "all x.((IsActor(x) & PortrayedCharacter(x,ThomasJefferson)) -> ReceivedBestActorAward(x))", "prediction": ["all x.((Actor(x) & PlaysTomJefferson(x)) -> WinsBestActorAward(x))", "all x.((Actor(x) & PlayingTomJefferson(x)) -> WonBestActorAward(x))", "all x.((Actor(x) & PlayingTomJefferson(x)) -> WinsBestActorAward(x))", "all x.((Actor(x) & PlayingThomasJefferson(x)) -> WonBestActorAward(x))", "all x.((Actor(x) & PlayingThomasJeffrey(x)) -> WonBestActorAward(x))", "all x.((Actor(x) & PlaysTomJeffrey(x)) -> WinsBestActorAward(x))", "all x.((Actor(x) & PlayingThomasJefferson(x)) -> WinsBestActorAward(x))", "all x.((Actor(x) & PlayingTomJeffrey(x)) -> WonBestActorAward(x))", "all x.((Actor(x) & PlaysTomJefferson(x)) -> WonBestActorAward(x))", "all x.((Actor(x) & PlayingThomasJeffrey(x)) -> WinsBestActorAward(x))", "all x.((Actor(x) & PlayingTomJeffrey(x)) -> WinsBestActorAward(x))", "all x.((Actor(x) & PlaysThomasJefferson(x)) -> WinsBestActorAward(x))", "all x y.((Actor(x) & Actor(y) & ThomasJeffrey(y)) -> WonBestActorAward(x,y))", "all x.((Actor(x) & PlayingTomJefferson(x)) -> BestActorAward(x))", "all x y.((Actor(x) & Actor(y) & PlayingTomJefferson(x,y)) -> WinsBestActorAward(x))", "all x y.((Actor(x) & Actor(y) & PlayingTomJefferson(x,y)) -> WonBestActorAward(x))"]}
{"id": "folio_train_1831", "nl": "Daveed Diggs played Thomas Jefferson.", "fol": "PortrayedCharacter(DaveedDiggs,ThomasJefferson)", "prediction": ["all x y.((DaveedDiggs(x) & ThomasJefferson(y)) -> Played(x,y))", "all x y.((DaveedDiggs(x) & ThomasJeffrey(y)) -> Played(x,y))", "all x.(DaveedDiggs(x) -> PlayedThomasJefferson(x))", "all x.(DaveedDiggs(x) -> PlayedTomJefferson(x))", "all x.(DaveedDiggs(x) -> PlayedThomasJeffrey(x))", "all x.((DaveedDiggs(x) & ThomasJeffrey(x)) -> Played(x,y))", "all x.((DaveedDiggs(x) & ThomasJefferson(x)) -> Played(x,y))", "all x.(DaveedDiggs(x) -> PlayedTomJeffrey(x))", "All x.(DaveedDiggs(x) -> PlayedThomasJefferson(x))", "all x y.((DaveedDiggs(x) & ThomasJefferson(y)) -> Plays(x,y))", "all x.(DaveedDIGGS(x) -> PlayedThomasJefferson(x))", "all x.((DaveedDiggs(x) & ThomasJefferson(x)) -> Played(x))", "all x.((DaveedDiggs(x) & ThomasJeffrey(x)) -> Played(x,Jeffrey))", "all x y.((DaveedDiggs(x) & ThomasJeffrey(y)) -> Plays(x,y))", "all x.((DaveedDiggs(x) & ThomasJefferson(x)) -> Played(x,Duggs))", "all x.(DaveedDiggs(x) -> PlayedTomTomJefferson(x))"]}
{"id": "folio_train_1832", "nl": "Musicals are not films.", "fol": "all x.(IsMusical(x) -> -Film(x))", "prediction": ["all x.(Musical(x) -> -Film(x))", "all x.(Movie(x) -> -Film(x))", "all x.((Musical(x) & -Film(x)) -> -Film(x))", "all x y.((Musical(x) & Film(y)) -> -Film(x))", "all x y.((Musical(x) & Film(y)) -> -(Film(x) & Film(y)))", "all x y.((Musical(x) & Film(y)) -> -(Film(x) & -Film(y)))", "(all x.(Musical(x) -> -Film(x)))", "all x y.((Musical(x) & Film(y)) -> -Film(x,y))", "all x y.((Musical(x) & Film(y)) -> -(Film(x) | Film(y)))", "all x.((Musical(x) & -Film(x)) -> -(Film(x) & Film(x)))", "all x.(Musical(x) -> -Film(x))", "all x y.((Musical(x) & Film(y)) -> -(Film(x) & -Film(x)))", "all x y.((Musical(x) & Film(y)) -> -(Film(x) | Film(y))))", "all x y.((Movie(x) & Film(y)) -> -Film(x))", "all x y.((Musical(x) & Film(y)) -> -(Film(x,y) & Film(y)))", "all x y.((Musical(x) & Film(y)) -> -(Movie(x) & Film(y)))"]}
{"id": "folio_train_1833", "nl": "Hamilton is a film.", "fol": "Film(Hamilton)", "prediction": ["all x.(Hamilton(x) -> Film(x))", "(Film(Hamilton) & Film(Hamilton))", "All x.(Hamilton(x) -> Film(x))", "all x.((Hamilton(x) & Film(x)) -> Film(x))", "exists x.(Hamilton(x) & Film(x))", "all x.(Hamilton(x) -> Film(x))", "all x y.((Hamilton(x) & Film(y)) -> Film(x))", "Hamilton is a film.", "(Film(Hamilton) -> Film(Hamilton))", "(Film(Hamilton) & -Film(Hamilton))", "all x y.((Hamilton(x) & Film(y)) -> Is(x,y))", "all x.((Hamilton(x) & Film(x)) -> Is(x,y))", "(Film(Hamilton) -> Film(Hamilton))", "all x y.((Hamilton(x) & Film(y)) -> Film(x,y))", "(Film(Hamilton) | Film(Hamilton))", "(Film(Hamilton) & Animated(Hamilton))"]}
{"id": "folio_train_1834", "nl": "Daveed Diggs won the best actor award.", "fol": "ReceivedBestActorAward(DaveedDiggs)", "prediction": ["all x.((DaveedDiggs(x) & BestActor(x)) -> WonAward(x))", "all x.((DaveedDiggs(x) & BestActor(x)) -> Wins(x))", "all x.((DaveedDiggs(x) & BestActor(x)) -> WinsAward(x))", "all x.(DaveedDiggs(x) -> WinsBestActorAward(x))", "all x.(DaveedDiggs(x) -> BestActorAward(x))", "all x y.((DaveedDiggs(x) & Actor(y)) -> WinsBestAward(x,y))", "all x.((DaveedDiggs(x) & BestActorAward(x)) -> Wins(x))", "all x y.((DaveedDiggs(x) & BestActor(y)) -> Won(x,y))", "all x y.((DaveedDiggs(x) & BestActor(y)) -> Wins(x,y))", "all x.((DaveedDiggs(x) & BestActor(x)) -> Won(x))", "all x.((DaveedDiggs(x) & BestActorAward(x)) -> Won(x))", "all x.((DaveedDIGGS(x) & BestActor(x)) -> WonAward(x))", "all x.((DaveedDIGGS(x) & BestActor(x)) -> WinsAward(x))", "all x.((DaveedDIGGS(x) & BestActor(x)) -> Wins(x))", "all x.(DaveedDiggs(x) -> WonBestActorAward(x))", "all x.((DaveedDIGGS(x) & BestActorAward(x)) -> Wins(x))"]}
{"id": "folio_train_1835", "nl": "Hamilton won two awards.", "fol": "WonTwoAwards(Hamilton)", "prediction": ["Hamilton won two awards.", "all x.(Hamilton(x) -> WinsTwoAwards(x))", "all x y.((Hamilton(x) & Award(y)) -> Won(x,y))", "all x.(Hamilton(x) -> WonTwoAwards(x))", "all x y.((Hamilton(x) & Award(y)) -> Wins(x,y))", "All x.(Hamilton(x) -> WinsTwoAwards(x))", "all x.((Hamilton(x) & Hamilton(y)) -> WonTwoAwards(x))", "all x.((Hamilton(x) & Hamilton(x)) -> WonTwoAwards(x))", "all x.((Hamilton(x) & Hamilton(x)) -> WinsTwoAwards(x))", "All x.(Hamilton(x) -> WonTwoAwards(x))", "all x.((Hamilton(x) & Hamilton(y)) -> WinsTwoAwards(x))", "all x.(Hamilton(x) -> wonTwoAwards(x))", "all x.((Hamilton(x) & Hamilton(y)) -> WinsTwoAwards(x,y))", "all x.((Hamilton(x) & Hamilton(y)) -> WonTwoAwards(x,y))", "all x.((Hamilton(x) & Hamilton(y)) -> WonAward(x,y))", "all x y.((Hamilton(x) & Award(y)) -> Winner(x,y))"]}
{"id": "folio_train_1836", "nl": "Ernest Pohl was a Polish football player. ", "fol": "IsPolishFootballPlayer(Ernestpohl)", "prediction": ["Ernest Pohl (PolishFootballPlayer)", "all x.((ErnestPohl(x) & PolishFootballPlayer(x)) -> PlayedIn(x,PolishFootball))", "(PolishFootballPlayer(ErnestPohl) & -PolishFootballPlayer(ErnestPohl))", "all x.((ErnestPohl(x) & PolishFootballPlayer(x)) -> PlayedIn(x,PolishFootball,PolishFootball))", "all x.((ErnestPohl(x) & PolishFootballPlayer(x)) -> Was(x,PolishFootballPlayer))", "all x.((ErnestPohl(x) & PolishFootballPlayer(x)) -> PlayedIn(x,PolishFootball,PolishFootball,PolishFootball))", "(PolishFootballPlayer(ErnestPohl) & PolishFootballPlayer(ErnestPohl))", "all x.((ErnestPohl(x) & PolishFootballPlayer(x)) -> PlayedIn(x,Polish))", "all x.((ErnestPohl(x) & PolishFootballPlayer(x)) -> PlayedIn(x,y))", "all x.((ErnestPohl(x) & PolishFootballPlayer(x)) -> PlayedIn(x,PolishFootball,PolishFootball,PolishFootball,PolishFootball))", "all x.((ErnestPohl(x) & PolishFootballPlayer(x)) -> PlayedIn(x,PolishFootball(x))", "all x.((ErnestPohl(x) & PolishFootballPlayer(x)) -> FootballPlayer(x))", "all x.((ErnestPohl(x) & PolishFootballPlayer(x)) -> Played(x,PolishFootball))", "(PolishFootballPlayer(ErnestPohl) & FootballPlayer(ErnestPohl))", "all x.((ErnestPohl(x) & PolishFootballPlayer(x)) -> PlayedIn(x,PolishFootballPlayer))", "(PolishFootballPlayer(ErnestPohl) & PlayedIn(ErnestPohl,PolishFootball))"]}
{"id": "folio_train_1837", "nl": "A football player in the Polish First Division has scored over 180 goals. ", "fol": "exists x.(PlaysInDivision(x,Polishfirstdivision) & HasScoredOver180Goals(x))", "prediction": ["all x.((FootballPlayer(x) & PolishFirstDivision(x)) -> ScoredOver180Goals(x))", "all x.((FootballPlayer(x) & PolishFirstDivision(x)) -> ScoresOver180Goals(x))", "all x y.((FootballPlayer(x) & PolishFirstDivision(y)) -> ScoredOver180Goals(x,y))", "all x y.((FootballPlayer(x) & PolishFirstDivision(y)) -> ScoresOver180Goals(x,y))", "all x.((FootballPlayer(x) & InPolishFirstDivision(x)) -> ScoredOver180Goals(x))", "all x y z.((FootballPlayer(x) & PolishFirstDivision(y) & PolishFirstDivision(z)) -> ScoresOver180Goals(x,y,z))", "all x.((FootballPlayer(x) & InPolishFirstDivision(x)) -> ScoresOver180Goals(x))", "all x y z.((FootballPlayer(x) & PolishFirstDivision(y) & PolishFirstDivision(z)) -> ScoredOver180Goals(x,y,z))", "all x y.((FootballPlayer(x) & FirstDivision(y)) -> ScoredOver180Goals(x,y))", "all x.((FootballPlayer(x) & FirstDivision(x)) -> ScoredOver180Goals(x))", "all x.((FootballPlayer(x) & PolishFirstDividence(x)) -> ScoredOver180Goals(x))", "all x y.((FootballPlayer(x) & FirstDivision(y)) -> ScoresOver180Goals(x,y))", "all x y.((FootballPlayer(x) & PolishFirstDivision(y)) -> HasScoredOver180Goals(x,y))", "all x y.((FootballPlayer(x) & PolishFirstDividence(y)) -> ScoredOver180Goals(x,y))", "all x.((FootballPlayer(x) & FirstDivision(x)) -> ScoresOver180Goals(x))", "all x.((FootballPlayer(x) & PolishFirstDividend(x)) -> ScoredOver180Goals(x))"]}
{"id": "folio_train_1838", "nl": "Ernest Pohl scored more than 180 goals in the Polish First Division. ", "fol": "(HasScoredOver180Goals(Ernestpohl) & PlaysInDivision(Ernestpohl,Polishfirstdivision))", "prediction": ["all x y.((ErnestPohl(x) & PolishFirstDivision(y)) -> ScoredMoreThan180Goals(x,y))", "all x.((ErnestPohl(x) & PolishFirstDivision(x)) -> ScoredMoreThan180Goals(x))", "all x y.((ErnestPohl(x) & PolishFirstDivision(y)) -> ScoresMoreThan180Goals(x,y))", "all x y.((ErnestPohl(x) & PolishFirstDivision(y)) -> ScoredMoreThan(x,180))", "All x y.((ErnestPohl(x) & PolishFirstDivision(y)) -> ScoredMoreThan180Goals(x,y))", "all x.((ErnestPohl(x) & PolishFirstDivision(x)) -> ScoresMoreThan180Goals(x))", "all x.((ErnestPohl(x) & ScoredMoreThan180Goals(x)) -> PolishFirstDivision(x))", "all x y z.((ErnestPohl(x) & PolishFirstDivision(y) & Goal(z)) -> ScoredMoreThan180(x,y,z))", "all x.((ErnestPohl(x) & PolishFirstDivision(y)) -> ScoredMoreThan180Goals(x,y))", "All x.((ErnestPohl(x) & PolishFirstDivision(x)) -> ScoredMoreThan180Goals(x))", "all x y.((ErnestPohl(x) & PolishFirstDividend(y)) -> ScoredMoreThan180Goals(x,y))", "all x y.((ErnestPohl(x) & PolishFirstDivision(y)) -> ScoresMoreThan(x,180))", "All x y.((ErnestPohl(x) & PolishFirstDivision(y)) -> ScoresMoreThan180Goals(x,y))", "all x y z.((ErnestPohl(x) & PolishFirstDivision(y) & Goal(z)) -> ScoredMoreThan(x,y,z))", "all x.((ErnestPohl(x) & PolishFirstDivision(x)) -> ScoredMoreThan(x,180))", "all x.((ErnestPohl(x) & ScoresMoreThan180Goals(x)) -> PolishFirstDivision(x))"]}
{"id": "folio_train_1839", "nl": "G\u00f3rnik Zabrze's stadium was named after a soccer player from Ruda \u015al\u0105ska. ", "fol": "exists x.(StadiumNamedAfter(Gornikzabrze,x) & IsFootballPlayer(x) & IsFrom(x,Rudaslaska))", "prediction": ["all x y z.((Stadium(x) & G\u00f3rnikZabrze(y) & SoccerPlayer(z) & Rudalska(z)) -> NamedAfter(x,y,z))", "all x y.((Stadium(x) & SoccerPlayer(y) & Rudalska(y)) -> NamedAfter(x,y))", "all x y z.((Stadium(x) & G\u00f3rnikZarrze(y) & SoccerPlayer(z) & Rudalska(z)) -> NamedAfter(x,y,z))", "all x y.((Stadium(x) & G\u00f3rnikZabrze(y)) -> NamedAfterSoccerPlayer(x,y))", "all x y z.((Stadium(x) & SoccerPlayer(y) & Rudalska(z)) -> NamedAfter(x,y,z))", "all x y.((Stadium(x) & SoccerPlayer(y) & Rudalska(z)) -> NamedAfter(x,y,z))", "all x y z.((Stadium(x) & G\u00f3rnikZabrze(y) & SoccerPlayer(z) & Rudalska(z)) -> NamedAfter(y,z))", "all x y.((Stadium(x) & G\u00f3rnikZarrze(y)) -> NamedAfterSoccerPlayer(x,y))", "all x.((Stadium(x) & SoccerPlayer(x) & Rudalska(x)) -> NamedAfter(x,y))", "all x y z.((Stadium(x) & G\u00f3rnikZabrze(y) & SoccerPlayer(z) & RudaIlska(z)) -> NamedAfter(x,y,z))", "all x y z.((Stadium(x) & G\u00f3rnikZarrze(y) & SoccerPlayer(z) & Rudalska(z)) -> NamedAfter(y,z))", "all x.((Stadium(x) & G\u00f3rnikZabrze(x)) -> NamedAfterSoccerPlayerFromRudalska(x))", "all x.((Stadium(x) & G\u00f3rnikZabrze(x)) -> NamedAfterSoccerPlayer(x,Rudalska))", "All x y.((Stadium(x) & SoccerPlayer(y) & Rudalska(y)) -> NamedAfter(x,y))", "all x y z.((Stadium(x) & G\u00f3rnikZabrze(y) & SoccerPlayer(z) & Rudalska(z)) -> NamedAfter(x,y))", "all x y z.((Stadium(x) & G\u00f3rnikZabrze(y) & SoccerPlayer(z) & Rudalska(y)) -> NamedAfter(x,y,z))"]}
{"id": "folio_train_1840", "nl": "Ernest Pohl is from Ruda \u015al\u0105ska. ", "fol": "IsFrom(Ernestpohl,Rudaslaska)", "prediction": ["Ernest Pohl is from Rudalska.", "All x.(ErnestPohl(x) -> Rudalska(x))", "All x.(ErnestPohl(x) -> (FromRudalska(x) & FromRudalska(x)))", "All x.(ErnestPohl(x) -> FromRudalska(x))", "All x.(ErnestPohl(x) -> (FromRodalska(x) & FromRudalska(x)))", "All x.(ErnestPohl(x) -> (FromRudalska(x) | FromRudalska(x)))", "All x.(ErnestPohl(x) -> (FromRudalska(x) & FromRodalska(x)))", "All x.(ErnestPohl(x) -> (FromRodalska(x) & FromRodalska(x)))", "Ernest Pohl (ErnestPohl) & Rudalska(ErnestPohl))", "Ernest Pohl (Ernest(Ernest) & Rudalska(Ernest))", "All x.(ErnestPohl(x) -> (FromRudalska(x) & FromRadalska(x)))", "Ernest Pohl (ErnestPohl) is from Rudalska.", "All x.(ErnestPohl(x) -> FromRodalska(x))", "All x.(ErnestPohl(x) -> (FromRudalska(x) & BornInRudalska(x)))", "All x.(ErnestPohl(x) -> (FromRudalska(x) & OriginallyFromRudalska(x)))", "All x.(ErnestPohl(x) -> (FromRodalska(x) | FromRudalska(x)))"]}
{"id": "folio_train_1841", "nl": "Ernest Pohl has not scored more than 180 goals.", "fol": "-HasScoredOver180Goals(Ernestpohl)", "prediction": ["all x.((ErnestPohl(x) & -ScoredMoreThan180Goals(x)) -> -ScoredMoreThan180Goals(x))", "all x.((ErnestPohl(x) & -ScoresMoreThan180Goals(x)) -> -ScoresMoreThan180Goals(x))", "all x.((ErnestPohl(x) & -(ScoredMoreThan180Goals(x))) -> -ScoredMoreThan180Goals(x)))", "-(ErnestPohl(ErnestPohl) & ScoredMoreThan180Goals(ErnestPohl))", "all x.(ErnestPohl(x) -> -ScoredMoreThan180Goals(x))", "-(ErnestPohl(ErnestPohl) & ScoresMoreThan180Goals(ErnestPohl))", "all x.((ErnestPohl(x) & -ScoredMoreThan180Goals(x)) -> -ScoresMoreThan180Goals(x))", "all x.((ErnestPohl(x) & -ScoredMoreThan180Goals(x)) -> NotScoredMoreThan180Goals(x))", "all x.((ErnestPohl(x) & -(ScoredMoreThan180Goals(x))) -> -(ScoredMoreThan180Goals(x))))", "all x.((ErnestPohl(x) & -(ScoredMoreThan180Goals(x)))) -> -ScoredMoreThan180Goals(x))", "-(ErnestPohl(ErnestPohl) & MoreThan180Goals(ErnestPohl))", "all x.((ErnestPohl(x) & -ScoredMoreThan180Goals(x)) -> -ScoredMoreThan(x,180))", "all x y.((ErnestPohl(x) & Goal(y)) -> -ScoredMoreThan180(x,y))", "all x.((ErnestPohl(x) & -ScoresMoreThan180Goals(x)) -> NotScoredMoreThan180Goals(x))", "all x.(ErnestPohl(x) -> -ScoresMoreThan180Goals(x))", "all x.((ErnestPohl(x) & -ScoresMoreThan180Goals(x)) -> -ScoresMoreThan(x,180))"]}
{"id": "folio_train_1842", "nl": "G\u00f3rnik Zabrze's stadium was named after Ernest Pohl.", "fol": "StadiumNamedAfter(Gornikzabrze,Ernestpohl)", "prediction": ["all x.((Stadium(x) & G\u00f3rnikZabrze(x)) -> NamedAfterErnestPohl(x))", "all x y.((G\u00f3rnikZabrzeStadium(x) & ErnestPohl(y)) -> NamedAfter(x,y))", "All x.((Stadium(x) & G\u00f3rnikZabrze(x)) -> NamedAfterErnestPohl(x))", "all x.((Stadium(x) & G\u00f3rnikZabrze(x)) -> NamedAfter(x,ErnestPohl))", "all x y.((Stadium(x) & G\u00f3rnikZabrze(y)) -> NamedAfter(x,y))", "all x.((Stadium(x) & G\u00f3rnikZarrze(x)) -> NamedAfterErnestPohl(x))", "All x.((Stadium(x) & G\u00f3rnikZabrze(x)) -> NamedAfter(x,ErnestPohl))", "All x y.((Stadium(x) & G\u00f3rnikZabrze(y)) -> NamedAfter(x,y))", "all x.((Stadium(x) & G\u00f3rnikZarrze(x)) -> NamedAfter(x,ErnestPohl))", "All x.((Stadium(x) & G\u00f3rnikZarrze(x)) -> NamedAfterErnestPohl(x))", "all x y.((Stadium(x) & G\u00f3rnikZabrze(y)) -> NamedAfterErnestPohl(x,y))", "(Stadium(G\u00f3rnikZabrze) & NamedAfterErnestPohl(G\u00f3rnikZabrze))", "all x y.((Stadium(x) & G\u00f3rnikZarrze(y)) -> NamedAfter(x,y))", "all x y.((Stadium(x) & G\u00f3rnikZabrze(y)) -> NamedAfter(x,ErnestPohl))", "All x y.((Stadium(x) & G\u00f3rnikZarrze(y)) -> NamedAfter(x,y))", "all x y.((Stadium(x) & G\u00f3rnikZabrze(y)) -> NamedAfterErnestPohl(y))"]}
{"id": "folio_train_1843", "nl": "Ann J. Land was a member of the Philadelphia City Council and was also a member of the Democratic Party.", "fol": "(exists y.MemberOfPhiladelphiaCityCouncil(AnnJLand,y) & MemberOfDemocraticParty(AnnJLand))", "prediction": ["all x.(AnnJ.Land(x) -> (MemberOfPennsylvaniaCityConsult(x) & MemberOfDemocraticParty(x)))", "all x y.((AnnJ.Land(x) & PhiladelphiaCityConsult(y)) -> (MemberOf(x,y) & MemberOfDemocraticParty(x)))", "all x y z.((AnnJ.Land(x) & PhiladelphiaCityConsult(y) & DemocraticParty(z)) -> (MemberOf(x,y) & MemberOf(x,z)))", "all x.(AnnJ.Land(x) -> (MemberOfCityConsult(x) & MemberOfDemocraticParty(x)))", "all x.(AnnJ.Land(x) -> (MemberOfPhiladelphiaCityConsult(x) & MemberOfDemocraticParty(x)))", "all x y.((AnnJ.Land(x) & PhiladelphiaCityConsult(y)) -> (Member(x,y) & MemberOfDemocraticParty(x)))", "all x.(AnnJ.Land(x) -> (MemberOfPennsylvaniaCityConsult(x) & MemberOfDemocraticParty(x)))", "all x y z.((AnnJ.Land(x) & PhiladelphiaCityConsult(y) & DemocraticParty(z)) -> (Member(x,y) & Member(x,z)))", "(MemberOfPennsylvaniaCityConsult(AnnJ.Land) & MemberOfDemocraticParty(AnnJ.Land))", "all x.(AnnJ.Land(x) -> (MemberOf(x,Philadelphia) & MemberOfDemocraticParty(x)))", "all x.(AnnJ.Land(x) -> (MemberOfPennsylvaniaCity(x) & MemberOfDemocraticParty(x)))", "(MemberOfPhiladelphiaCityConsult(AnnJ.Land) & MemberOfDemocraticParty(AnnJ.Land))", "all x y.((AnnJ.Land(x) & PhiladelphiaCityConsult(y)) -> (MemberOf(x,y) & MemberOfDemocraticParty(x,y)))", "(MemberOf(AnnJ.Land) & PhiladelphiaCityConsult(AnnJ.Land) & MemberOfDemocraticParty(AnnJ.Land))", "all x y.((AnnJ.Land(x) & PhiladelphiaCityConsult(y)) -> (MemberOf(x,y) & MemberOfDemocracy(x)))", "(MemberOf(AnnJ.Land,Philadelphia) & MemberOfDemocraticParty(AnnJ.Land,Philadelphia))"]}
{"id": "folio_train_1844", "nl": "Ann J. Land ran unopposed for the Philadephia City Council in 1980.", "fol": "(MemberOfPhiladelphiaCityCouncil(AnnJLand,Y1980) & RanForPosition(AnnJLand))", "prediction": ["Ann J.Land ran unopposed for PhiladephiaCityConsult(AnnJ.Land,80)", "Ann J.Land ran unopposed for PhiladephiaCityConsult(AnnJ.Land) in 1980.", "Ann J.Land ran unopposed for PhiladephiaCityConsecutor(AnnJ.Land,80)", "Ann J.Land ran unopposed for PhiladephiaCityConsecutor(AnnJ.Land) in 1980.", "Ann J.Land ran unopposed for PhiladephiaCityConsecutive(AnnJ.Land,80)", "Ann J.Land ran unopposed for Philadephia City Council in 1980.", "Ann J.Land ran unopposed for the PhiladephiaCityConsecutor(AnnJ.Land) in 1980.", "Ann J.Land ran unopposed for PhiladephiaCityConsecutive(AnnJ.Land) in 1980.", "Ann J.Land ran unopposed for the PhiladephiaCityConsecutor(AnnJ.Land,80)", "Ann J.Land ran unopposed for the PhiladephiaCityConsult in 1980.", "Ann J.Land ran unopposed for PhiladephiaCityConsult in 1980.", "Ann J.Land ran unopposed for the PhiladephiaCityConsult(AnnJ.Land) in 1980.", "AnnJ.Land ran unopposed for PhiladephiaCityConsult(AnnJ.Land,80)", "Ann J.Land ran unopposed for the PhiladephiaCityConsult(AnnJ.Land,80)", "AnnJ.LandRunsUnopposedForPhiladephiaCityConsecutive(AnnJ.Land,80)", "Ann J.Land ran unopposed for the PhiladephiaCityConsecutive(AnnJ.Land) in 1980."]}
{"id": "folio_train_1845", "nl": "People who run unopposed for the Philadelphia City Council are elected to the positions they run for in the same year.", "fol": "all x y.((RanForPosition(x) & MemberOfPhiladelphiaCityCouncil(x,y)) -> ElectedToPosition(x,y))", "prediction": ["all x y.((Person(x) & RunsUnopposedFor(x,y) & PhiladelphiaCityCity(y)) -> Election(x,y))", "all x y.((Person(x) & RunsUnopposedFor(x,y) & PhiladelphiaCityCouncil(y)) -> Election(x,y))", "all x y.((Person(x) & RunsUnopposedFor(x,y) & PhiladelphiaCityCity(y)) -> ElectedToPosition(x,y))", "all x y.((Person(x) & RunsUnopposed(x,y) & PhiladelphiaCityCity(y)) -> Election(x,y))", "all x.((Person(x) & RunsUnopposedForCityCity(x)) -> Election(x))", "all x y.((Person(x) & RunsUnopposedFor(x,y) & PhiladelphiaCityCity(y)) -> ElectedToPosition(x,y))", "all x y.((Person(x) & RunsUnopposedFor(x,y) & PhiladelphiaCityConsult(y)) -> Election(x,y))", "all x.((Person(x) & RunsUnopposedForCityConsult(x)) -> Election(x))", "all x y.((Person(x) & RunsUnopposedFor(x,y) & PhiladelphiaCityCouncil(y)) -> ElectedToPosition(x,y))", "all x y.((Person(x) & RunsUnopposedFor(x,y) & PhiladelphiaCityCouncil(y)) -> ElectedToPosition(x,y))", "all x y.((Person(x) & RunsUnopposedFor(x,y) & CityCity(y)) -> Election(x,y))", "all x.((Person(x) & RunsUnopposedForPennsylvaniaCity(x)) -> Election(x))", "all x y.((Person(x) & RunsUnopposed(x,y) & CityCity(y)) -> Election(x,y))", "all x y.((Person(x) & RunsUnopposedFor(x,y)) -> Election(x,y))", "all x.((Person(x) & RunsUnopposedForPhiladelphiaCityCity(x)) -> Election(x))", "all x y.((Person(x) & RunsUnopposedFor(x,y) & PhiladelphiaCityConsult(y)) -> ElectedToPosition(x,y))"]}
{"id": "folio_train_1846", "nl": "Michael Nutter was a political challenger.", "fol": "PoliticalChallenger(Nutter)", "prediction": ["all x.((MichaelNutter(x) & PoliticalChallenge(x)) -> PoliticalChallenge(x))", "all x.(MichaelNutter(x) -> PoliticalChallenger(x))", "all x.((MichaelNutter(x) & PoliticalChallenge(x)) -> MichaelNutter(x))", "all x.(MichaelNutter(x) -> PoliticalChallenge(x))", "all x.((MichaelNutter(x) & PoliticalChallenger(x)) -> PoliticalChallenge(x))", "all x.((MichaelNutter(x) & PoliticalChief(x)) -> PoliticalChallenge(x))", "all x.((MichaelNutter(x) & PoliticalChampions(x)) -> PoliticalChampions(x))", "all x.((MichaelNutter(x) & PoliticalChief(x)) -> PoliticalChief(x))", "all x y.((MichaelNutter(x) & PoliticalChallenge(y)) -> PoliticalChallenge(x,y))", "all x.((MichaelNutter(x) & PoliticalChamper(x)) -> PoliticalChallenge(x))", "all x.((MichaelNutter(x) & PoliticalChamper(x)) -> PoliticalChamper(x))", "all x.((MichaelNutter(x) & PoliticalChallenger(x)) -> MichaelNutter(x))", "all x.((MichaelNutter(x) & PoliticalChallenge(x)) -> Was(x,y))", "all x.((MichaelNutter(x) & PoliticalCombatant(x)) -> PoliticalChallenge(x))", "all x.((MichaelNutter(x) & PoliticalChallenge(x)) -> PoliticalChancer(x))", "all x.((MichaelNutter(x) & PoliticalChallenge(x)) -> PoliticalCombatant(x))"]}
{"id": "folio_train_1847", "nl": "Ann J. Land defeated Michael Nutter and ran for the Philadelphia City Council in 1987.", "fol": "(MemberOfPhiladelphiaCityCouncil(AnnJLand,Y1987) & RanForPosition(AnnJLand) & DefeatedOpponent(AnnJLand,Nutter))", "prediction": ["all x y.((AnnJ.Land(x) & MichaelNutter(y)) -> (Defeats(x,y) & RunsFor(x,y)))", "all x y z.((AnnJ.Land(x) & MichaelNutter(y) & PhiladelphiaCityConsult(z)) -> (Defeats(x,y) & RunsFor(x,z)))", "All x y.((AnnJ.Land(x) & MichaelNutter(y)) -> (Defeats(x,y) & RunsFor(x,y)))", "all x y.((AnnJ.Land(x) & MichaelNutter(y)) -> (Defeats(x,y) & RunsForCityConsult(x,y)))", "(DefeatsMichaelNutter(AnnJ.Land) & RunsForPhiladelphiaCityConsult(AnnJ.Land,87))", "All x y.((AnnJ.Land(x) & MichaelNutter(y)) -> (Defeats(x,y) & RunsForCityConsult(x,y)))", "(DefeatsMichaelNutter(AnnJ.Land) & RunsForPennsylvaniaCityConsult(AnnJ.Land,87))", "(DefeatsMichaelNutter(AnnJ.Land) & RunsForCityConsult(AnnJ.Land,87))", "all x.(AnnJ.Land(x) -> (DefeatsMichaelNutter(x) & RunsForPhiladelphiaCityConsult(x)))", "(DefeatsMichaelNutter(AnnJ.Land) & RunsForPennsylvaniaCityConsecutor(AnnJ.Land,87))", "all x y z.((AnnJ.Land(x) & MichaelNutter(y) & PhiladelphiaCityConsult(z)) -> (Defeats(x,y,z) & RunsFor(x,z)))", "(DefeatsMichaelNutter(AnnJ.Land) & RunsForPhiladelphiaCityConsult(AnnJ.Land, 1987))", "(DefeatsMichaelNutter(AnnJ.Land) & RunsForPhiladelphiaCityConsecutor(AnnJ.Land,87))", "all x y.((AnnJ.Land(x) & MichaelNutter(y)) -> (Defeat(x,y) & RunsFor(x,y)))", "all x y z.((AnnJ.Land(x) & MichaelNutter(y) & PhiladelphiaCityConsult(z)) -> (Defeats(x,y) & Runs(x,z)))", "all x y.((AnnJ.Land(x) & MichaelNutter(y)) -> (Defeats(x,y) & RunsFor(x,y) & PhiladelphiaCityConsult(x,y)))"]}
{"id": "folio_train_1848", "nl": "Ann J. Land was elected to the Philadelphia City Council in 1980.", "fol": "MemberOfPhiladelphiaCityCouncil(AnnJLand,Y1980)", "prediction": ["Ann J.Land was elected to Philadelphia City Council in 1980.", "Ann J.Land was elected to the Philadelphia City Council in 1980.", "Ann J.Land was elected to Philadelphia CityConsult(AnnJ.Land) in 1980.", "Ann J.Land was elected to Philadelphia CityConsult(AnnJ.Land,80)", "Ann J.Land was elected to Philadelphia CityCouncil(AnnJ.Land,80)", "Ann J.Land was elected to Philadelphia CityCouncil(AnnJ.Land) in 1980.", "Ann J.Land was elected to the Philadelphia CityConsult in 1980.", "Ann J.Land was elected to Philadelphia CityConsult in 1980.", "Ann J.Land was elected to Philadelphia CityConsult(AnnJ.Land,80))", "Ann J.Land was elected to Philadelphia CityConsult(AnnJ.Land, 1980)", "Ann J.Land was elected to Philadelphia CityCouncilIn80(AnnJ.Land))", "Ann J.Land was elected to Philadelphia CityConsecutive(AnnJ.Land,80)", "Ann J.Land was elected to Philadelphia CityCouncil(AnnJ.Land,80))", "Ann J.Land was elected to Philadelphia CityCityConsult(AnnJ.Land,80)", "Ann J.Land was elected to Philadelphia CityCouncilIn80(AnnJ.Land)", "Ann J.Land was elected to Philadelphia CityCityConsult(AnnJ.Land) in 1980."]}
{"id": "folio_train_1849", "nl": "Ann J. Land was elected to the Philadelphia City Council in 1987.", "fol": "MemberOfPhiladelphiaCityCouncil(AnnJLand,Y1987)", "prediction": ["Ann J.Land was elected to Philadelphia City Council in 1987.", "Ann J.Land was elected to the Philadelphia City Council in 1987.", "Ann J.Land was elected to Philadelphia CityConsult(AnnJ.Land) in 1987.", "Ann J.Land was elected to Philadelphia CityConsult(AnnJ.Land,87))", "Ann J.Land was elected to Philadelphia CityConsult(AnnJ.Land,87)", "Ann J.Land was elected to Philadelphia CityConsult in 1987.", "Ann J.Land was elected to Philadelphia CityConsult(AnnJ.Land, 1987)", "Ann J.Land was elected to Philadelphia CityCouncil(AnnJ.Land,87))", "Ann J.Land was elected to Philadelphia CityCouncil(AnnJ.Land) in 1987.", "Ann J.Land was elected to the Philadelphia CityConsult in 1987.", "Ann J.Land was elected to Philadelphia CityCouncil(AnnJ.Land,87)", "Ann J.Land was elected to Philadelphia CityCouncil(AnnJ.Land, 1987)", "Ann J.Land was elected to Philadelphia CityConsecutive(AnnJ.Land,87)", "Ann J.Land was elected to Philadelphia CityCouncilIn87(AnnJ.Land))", "Ann J.Land was elected to Philadelphia CityConsecutive(AnnJ.Land) in 1987.", "Ann J.Land was elected to Philadelphia CityCityConsult(AnnJ.Land) in 1987."]}
{"id": "folio_train_1850", "nl": "There was some member of the Democratic Party elected to the Philadelphia City Council in 1980.", "fol": "exists x.(MemberOfDemocraticParty(x) & ElectedToPosition(x,Y1980))", "prediction": ["exists x.(DemocraticParty(x) & ElectsToCityConsult(x,80))", "exists x.(DemocraticParty(x) & ElectedToCityConsult(x,80))", "all x y.((DemocraticParty(x) & PhiladelphiaCityCity(y)) -> Election(x,y))", "all x y.((DemocraticParty(x) & PhiladelphiaCityConsult(y)) -> Election(x,y))", "exists x.(DemocraticParty(x) & EligibleToCityConsult(x,80))", "exists x.(DemocraticParty(x) & ElectsToCityCity(x,80))", "exists x.(DemocraticParty(x) & ElectedToCityConsult(x,80))", "exists x.(DemocraticParty(x) & ElectsToCityConsult(x,y) & Philadelphia(y))", "all x y.((DemocraticParty(x) & PhiladelphiaCityCity(y)) -> ElectedIn(x,y))", "all x y.((DemocraticParty(x) & PhiladelphiaCityCity(y)) -> Elect(x,y))", "exists x.(DemocraticParty(x) & ElectsToCityConsult(x,y))", "all x y.((DemocraticParty(x) & PhiladelphiaCityConsult(y)) -> ElectedIn(x,y))", "(exists x.(DemocraticParty(x) & ElectsToCityConsult(x,80)))", "all x y.((DemocraticParty(x) & PhiladelphiaCityCity(y)) -> EligibleIn(x,y))", "exists x.(DemocraticParty(x) & ElectsToCityConsult(x,y) & PhiladelphiaCityConsult(y))", "all x y.((DemocraticParty(x) & PhiladelphiaCityCity(y)) -> ElectsIn(x,y))"]}
{"id": "folio_train_1851", "nl": "Aberdeen won the cup in the 2013 final.", "fol": "TeamWonCup(Aberdeen,Twentythirteen)", "prediction": ["all x y.((Aberdeen(x) & Cup(y)) -> WonInFinal(x,y))", "all x y.((Aberdeen(x) & Cup(y) & Final(y)) -> Won(x,y))", "all x y z.((Aberdeen(x) & Cup(y) & Final(z)) -> Won(x,y,z))", "all x y z.((Aberdeen(x) & Cup(y) & Final(z)) -> WonIn(x,y,z))", "all x.((Aberdeen(x) & 2013Final(x)) -> WonCup(x))", "all x y.((Aberdeen(x) & Cup(y)) -> Won(x,y))", "all x y.((Aberdeen(x) & Cup(y) & Final(y,2013)) -> Won(x,y))", "all x y.((Aberdeen(x) & Cup(y) & 2013Final(y)) -> Won(x,y))", "all x y.((Aberdeen(x) & Cup(y) & Final(z)) -> Won(x,y,z))", "all x y.((Aberdeen(x) & Cup(y) & Final(y)) -> WonIn(x,y))", "all x y z.((Aberdeen(x) & Cup(y) & Final(z)) -> Wins(x,y,z))", "all x y.((Aberdeen(x) & Cup(y) & Final(z)) -> WonIn(x,y,z))", "all x y.((Aberdeen(x) & Cup(y)) -> WonIn2013Final(x,y))", "all x y.((Aberdeen(x) & Cup(y)) -> WonInTerminal(x,y))", "all x.((Aberdeen(x) & 2013Final(x)) -> WinsCup(x))", "all x y.((Aberdeen(x) & Cup(y)) -> Wins(x,y))"]}
{"id": "folio_train_1852", "nl": "Rangers won the cup in 2014 final.", "fol": "TeamWonCup(Rangers,Twentyfourteen)", "prediction": ["all x y.((Rangers(x) & Cup(y)) -> Won(x,y))", "all x y z.((Rangers(x) & Cup(y) & Final(z)) -> Won(x,y,z))", "all x y.((Rangers(x) & Cup(y)) -> WonInFinal(x,y))", "all x y.((Rangers(x) & Cup(y)) -> Wins(x,y))", "all x y z.((Rangers(x) & Cup(y) & Final(z)) -> Wins(x,y,z))", "all x y.((Rangers(x) & Cup(y)) -> WonIn2014Final(x,y))", "all x y.((Rangers(x) & Cup(y) & Final(y)) -> Won(x,y))", "all x y z.((Rangers(x) & Cup(y) & Final(z)) -> WonIn(x,y,z))", "all x y.((Rangers(x) & Cup(y) & Final(z)) -> Won(x,y,z))", "all x.(Rangers(x) -> WonCup(x,2014))", "all x y.((Rangers(x) & Cup(y) & Final(y)) -> Wins(x,y))", "all x y z.((Rangers(x) & Cup(y) & Final(z)) -> Won(x,y))", "all x y z.((Rangers(x) & Cup(y) & Final(z)) -> Win(x,y,z))", "all x y.((Rangers(x) & 2014Final(y)) -> WonCup(x,y))", "all x y z.((Rangers(x) & Cup(y) & Final(z)) -> WonIn2014(x,y,z))", "all x y.((Rangers(x) & Cup(y)) -> WinsInFinal(x,y))"]}
{"id": "folio_train_1853", "nl": "Aberdeen and Rangers are different teams.", "fol": "(TeamsAreDifferent(Aberdeen,Rangers) & TeamsAreDifferent(Rangers,Aberdeen))", "prediction": ["all x.((Aberdeen(x) & Rangers(x)) -> DifferentTeam(x))", "(DifferentTeam(Aberdeen) & DifferentTeam(Rangers))", "all x y.((Aberdeen(x) & Rangers(y)) -> DifferentTeam(x,y))", "(DifferentTeam(Aberdeen,Aberdeen) & DifferentTeam(Rangers,Aberdeen))", "all x.((Aberdeen(x) & Rangers(x)) -> DifferentTeams(x))", "all x.((Aberdeen(x) | Rangers(x)) -> DifferentTeam(x))", "all x y.((Aberdeen(x) & Rangers(y)) -> (DifferentTeam(x,y) & DifferentTeam(x,y)))", "((Aberdeen(Aberdeen) & Rangers(Rangers)) -> DifferentTeams(Aberdeen,Rangers))", "all x y.((Aberdeen(x) & Rangers(y)) -> DifferentTeam(x))", "((Aberdeen(Aberdeen) & Rangers(Rangers)) -> DifferentTeam(Aberdeen,Rangers))", "all x y.((Aberdeen(x) & Rangers(y)) -> (DifferentTeam(x) & DifferentTeam(y)))", "all x y.((Aberdeen(x) & Rangers(y)) -> (DifferentTeam(x,y) & DifferentTeam(y)))", "(DifferentTeam(Aberdeen(Rangers) & DifferentTeam(Aberdeen(Rangers))", "all x.((Team(x) & Aberdeen(x) & Rangers(x)) -> Different(x))", "(DifferentTeams(Aberdeen,Aberdeen) & DifferentTeams(Rangers,Aberdeen))", "all x y.((Aberdeen(x) & Rangers(y)) -> (DifferentTeam(x,y) & DifferentTeam(y,x)))"]}
{"id": "folio_train_1854", "nl": "Different teams cannot win the same cup in a given year's final.", "fol": "all z.((TeamsAreDifferent(x,y) & TeamWonCup(x,z)) -> -TeamWonCup(y,z))", "prediction": ["all x y.((Team(x) & Year(y)) -> -WinsSameCup(x,y))", "all x y.((Team(x) & Year(y)) -> -CanWinSameCup(x,y))", "all x y.((Team(x) & Year(y)) -> -WonSameCup(x,y))", "all x y.((Team(x) & Year(y) & WinsCup(x,y)) -> -WinsCup(x,y))", "all x y.((Team(x) & Year(y)) -> -WinsCup(x,y))", "all x y.((Team(x) & Year(y)) -> -WinSameCup(x,y))", "all x y.((Team(x) & Year(y)) -> -WinsSameCupInFinal(x,y))", "all x y z.((Team(x) & Cup(y) & Year(z)) -> -CanWin(x,y,z))", "all x y z.((Team(x) & Cup(y) & Year(z)) -> -WinsInFinal(x,y,z))", "all x y z.((Team(x) & Cup(y) & Year(z)) -> -Wins(x,y,z))", "all x y.((Team(x) & Year(y)) -> -CanWinCup(x,y))", "all x y.((Team(x) & Year(y)) -> -WinsSameCouple(x,y))", "all x y.((Team(x) & Year(y) & WinsCup(x,y)) -> -CanWinCup(x,y))", "all x.((Team(x) & Year(x)) -> -WinsSameCup(x))", "all x.((Team(x) & Year(y)) -> -WinsSameCup(x,y))", "all x.((Team(x) & Year(x)) -> -WinsSameCup(x,y))"]}
{"id": "folio_train_1855", "nl": "Rangers won the cup in 2015.", "fol": "TeamWonCup(Rangers,Twentyfifteen)", "prediction": ["all x y.((Rangers(x) & Cup(y)) -> Won(x,y))", "all x y z.((Rangers(x) & Cup(y) & Cup(z)) -> Won(x,y,z))", "all x y z.((Rangers(x) & Cup(y) & Cup(z)) -> WonIn(x,y,z))", "all x y.((Rangers(x) & Rangers(y)) -> WonCup(x,y))", "all x y.((Rangers(x) & Cup(y)) -> WonIn(x,y))", "all x y z.((Rangers(x) & Cup(y) & Cup(z)) -> WonIn2015(x,y,z))", "all x y.((Rangers(x) & Cup(y)) -> WonIn2015(x,y))", "all x y.((Rangers(x) & Rangers(y)) -> WonCupIn2015(x,y))", "all x.(Rangers(x) -> WonCup(x,2015))", "all x y z.((Rangers(x) & Cup(y) & Rangers(z)) -> WonIn(x,y,z))", "all x y z.((Rangers(x) & Cup(y) & Cup(z)) -> Won(x,y))", "all x y.((Rangers(x) & Cup(y) & Won(x,y)) -> Won(x,y))", "all x y z.((Rangers(x) & Cup(y) & Rangers(z)) -> Won(x,y,z))", "all x.((Rangers(x) & WonCup(x,2015)) -> RangersWonCup(x,2015))", "all x y z.((Rangers(x) & Cup(y) & Cup(z)) -> Wins(x,y,z))", "all x y z.((Rangers(x) & Cup(y) & Rangers(z)) -> WonIn2015(x,y,z))"]}
{"id": "folio_train_1856", "nl": "Rangers won the cup in 2013.", "fol": "TeamWonCup(Rangers,Twentythirteen)", "prediction": ["all x y.((Rangers(x) & Cup(y)) -> Won(x,y))", "all x y.((Rangers(x) & Cup(y)) -> WonIn2013(x,y))", "all x y z.((Rangers(x) & Cup(y) & Cup(z)) -> Won(x,y,z))", "all x y z.((Rangers(x) & Cup(y) & Cup(z)) -> WonIn2013(x,y,z))", "all x y z.((Rangers(x) & Cup(y) & Cup(z)) -> WonIn(x,y,z))", "all x y.((Rangers(x) & Cup(y)) -> WonIn(x,y))", "all x.(Rangers(x) -> WonCup(x,2013))", "all x y z.((Rangers(x) & Cup(y) & Cup(z)) -> Wins(x,y,z))", "all x y z.((Rangers(x) & Cup(y) & Cup(z)) -> Won(x,y))", "all x y.((Rangers(x) & Cup(y) & Won(x,y)) -> Won(x,y))", "all x y z.((Rangers(x) & Cup(y) & Cup(z)) -> WonIn2013(x,y))", "all x y.((Rangers(x) & Cup(y)) -> Wins(x,y))", "all x y.((Rangers(x) & Rangers(y)) -> WonCup(x,y))", "all x.((Rangers(x) & WonCup(x,2013)) -> RangersWonCup(x,2013))", "all x.((Rangers(x) & WonCup(x,2013)) -> RangersWonCup(x))", "all x y z.((Rangers(x) & Cup(y) & Cup(z)) -> Win(x,y,z))"]}
{"id": "folio_train_1857", "nl": "Aberdeen has won a cup before.", "fol": "exists z.TeamWonCup(Aberdeen,z)", "prediction": ["all x y.((Aberdeen(x) & Cup(y)) -> Won(x,y))", "all x y.((Aberdeen(x) & Cup(y)) -> WonBefore(x,y))", "all x.(Aberdeen(x) -> WonCup(x))", "all x y.((Aberdeen(x) & Cup(y)) -> Wins(x,y))", "all x.((Aberdeen(x) & WonCup(x)) -> WinsCup(x))", "all x.((Aberdeen(x) & WonCup(x)) -> HasWonCup(x))", "all x.(Aberdeen(x) -> WonCupBefore(x))", "all x.((Aberdeen(x) & WonCup(x)) -> NeverWonCup(x))", "all x y z.((Aberdeen(x) & Cup(y) & Cup(z)) -> WonBefore(x,y,z))", "all x y z.((Aberdeen(x) & Cup(y) & Cup(z)) -> Won(x,y,z))", "all x.(Aberdeen(x) -> HasWonCup(x))", "all x.(Aberdeen(x) -> WinsCup(x))", "all x y.((Aberdeen(x) & Cup(y)) -> HasWon(x,y))", "all x.((Aberdeen(x) & WonCup(x)) -> WonCup(x))", "all x.((Aberdeen(x) & Cup(y)) -> Won(x,y))", "all x.(Aberdeen(x) -> HasWonCupBefore(x))"]}
{"id": "folio_train_1858", "nl": "All young working professionals who have regular 9-5 jobs also have pets.", "fol": "all x.(YoungWorkingProfessional(x) -> OwnsPets(x))", "prediction": ["all x.((YoungWorkingProfessional(x) & Regular9-5Job(x)) -> HasPets(x))", "all x.((YoungWorkingProfessional(x) & Regular9-5Jobs(x)) -> HasPets(x))", "all x.((YoungWorkingProfessional(x) & RegularJob(x,9) & RegularJob(x,5)) -> HasPets(x))", "all x.((YoungWorkingProfessional(x) & RegularJob(x,9)) -> HasPets(x))", "all x.((YoungWorkingProfessional(x) & RegularJobs(x,9) & RegularJobs(x,5)) -> HasPets(x))", "all x.((YoungWorkingProfessional(x) & HasRegular9-5Jobs(x)) -> HasPets(x))", "all x.((YoungWorkingProfessional(x) & RegularJob(x,9) & RegularJob(x,9)) -> HasPets(x))", "all x.((YoungWorkingProfessional(x) & Regular(x,9) & Regular(x,5)) -> HasPets(x))", "all x.((YoungWorkingProfessional(x) & RegularJob(x,9) & RegularJob(x,5)) -> HasPet(x))", "all x.((YoungWorkingProfessional(x) & RegularJobs(x,9) & RegularJobs(x,9)) -> HasPets(x))", "all x.((YoungWorkingProfessional(x) & RegularJobs(x,9)) -> HasPets(x))", "all x.((YoungWorkingProfessional(x) & Regular9-5Job(x)) -> HasPet(x))", "all x.((YoungWorkingProfessional(x) & RegularJob(x,9-5)) -> HasPets(x))", "all x.((YoungWorkingProfessional(x) & HasRegular9-5Job(x)) -> HasPets(x))", "all x.((YoungWorkingProfessional(x) & RegularJob(x,9)) -> HasPet(x))", "all x.((YoungWorkingProfessional(x) & RegularJob(x,9,5)) -> HasPets(x))"]}
{"id": "folio_train_1859", "nl": "Some people who live in Manhattan are young working professionals who have regular 9-5 jobs.", "fol": "exists x.(LivesInManhattan(x) & YoungWorkingProfessional(x))", "prediction": ["exists x.(Person(x) & LivesInMetropolitan(x) & YoungWorkingProfessional(x) & Regular9-5Jobs(x))", "exists x.(Person(x) & LivesInMetropolitan(x) & YoungWorkingProfessional(x) & RegularJob(x,9))", "exists x.(Person(x) & LivesInMetropolitan(x) & YoungWorkingProfessional(x) & RegularJobs(x,9) & RegularJobs(x,5))", "exists x.(Person(x) & LivesInMetropolitan(x) & YoungWorkingProfessional(x) & RegularJob(x,9) & RegularJob(x,5))", "exists x.(Person(x) & LivesInMetropolitan(x) & YoungWorkingProfessional(x) & RegularJobs(x,9))", "exists x.((Person(x) & LivesInMetropolitan(x)) -> (YoungWorkingProfessional(x) & Regular9-5Jobs(x)))", "exists x.((Person(x) & LivesInMetropolitan(x)) -> (YoungWorkingProfessional(x) & RegularJobs(x,9) & RegularJobs(x,5)))", "exists x.((Person(x) & LivesInMetropolitan(x)) -> (YoungWorkingProfessional(x) & RegularJobs(x,9)))", "exists x.(Person(x) & LivesIn(x,Manhattan) & YoungWorkingProfessional(x) & RegularJob(x,9))", "exists x.(Person(x) & LivesIn(x,Metropolitan) & YoungWorkingProfessional(x) & RegularJob(x,9))", "exists x.((Person(x) & LivesInMetropolitan(x)) -> (YoungWorkingProfessional(x) & RegularJob(x,9)))", "exists x.((Person(x) & LivesInMetropolitan(x)) -> (YoungWorkingProfessional(x) & RegularJob(x,9) & RegularJob(x,5)))", "exists x.(Person(x) & LivesIn(x,Manhattan) & YoungWorkingProfessional(x) & RegularJobs(x,9))", "exists x.(Person(x) & LivesInMetropolitan(x) & YoungWorkingProfessional(x) & RegularJobs(x,9,5))", "exists x.(Person(x) & LivesIn(x,Metropolitan) & YoungWorkingProfessional(x) & RegularJobs(x,9))", "exists x.((Person(x) & LivesInMetropolitan(x)) -> YoungWorkingProfessional(x) & RegularJobs(x,9)))"]}
{"id": "folio_train_1860", "nl": "All people who have pets are people who have at least one child.", "fol": "all x.(OwnsPets(x) -> HasChild(x))", "prediction": ["all x.(HasPets(x) -> exists y.(Child(y) & HasChild(x,y)))", "all x.(HasPets(x) -> exists y.(Child(y) & HasChild(x,y))))", "all x.(HasPet(x) -> exists y.(Child(y) & HasChild(x,y)))", "all x.(HasPet(x) -> exists y.(Child(y) & HasChild(x,y))))", "all x.((Person(x) & HasPet(x)) -> exists y.(Child(y) & HasChild(x,y))))", "all x.(HasPets(x) -> HasAtLeastOneChild(x))", "all x.((Person(x) & HasPet(x)) -> HasChild(x))", "all x.(HasPets(x) -> exists y.(Child(y) & HasChild(x,y))))", "all x.((Person(x) & HasPet(x)) -> HasAtLeastOneChild(x))", "all x.((Person(x) & HasPets(x)) -> exists y.(Child(y) & HasChild(x,y))))", "all x.(HasPet(x) -> HasChild(x))", "all x.(HasPet(x) -> HasAtLeastOneChild(x))", "all x.(HasPet(x) -> exists y.(Child(y) & HasChild(x,y))))", "all x.(HasPets(x) -> HasChild(x))", "all x.(HasPets(x) -> exists y.(Child(y) & HasChild(x,y)))", "all x.(HasPet(x) -> exists y.(Child(y) & HasChild(x,y)))"]}
{"id": "folio_train_1861", "nl": "People who do not have at least one child are people who own a sports car.", "fol": "all x.(HasChild(x) -> -OwnsSportsCar(x))", "prediction": ["all x.((Person(x) & -HasChild(x)) -> OwnsSportsCar(x))", "all x.((Person(x) & -exists y.(Child(y) & HasChild(x,y))) -> OwnsSportsCar(x))", "all x.((Person(x) & -exists y.(Child(y) & Has(x,y))) -> OwnsSportsCar(x))", "all x.((People(x) & -HasChild(x)) -> OwnsSportsCar(x))", "all x.((Person(x) & -Child(x)) -> OwnsSportsCar(x))", "all x.((Person(x) & -HasChild(x)) -> OwnerOfSportsCar(x))", "all x.((Person(x) & -AtLeastOneChild(x)) -> OwnsSportsCar(x))", "all x.((Person(x) & -OneChild(x)) -> OwnsSportsCar(x))", "all x.((Person(x) & -HasChild(x)) -> OwnersSportsCar(x))", "all x.((Person(x) & -HasAtLeastOneChild(x)) -> OwnsSportsCar(x))", "all x.((Person(x) & -HasChild(x)) -> OwnsSportsCar(x))", "all x.((Person(x) & -exists y.(Child(y) & HasChild(x,y))) -> OwnerOfSportsCar(x))", "all x.(((Person(x) & -HasChild(x)) -> OwnsSportsCar(x))", "all x.((Person(x) & -exists y.(Child(y) & Has(x,y))) -> OwnerOfSportsCar(x))", "all x.((Person(x) & -Kind(x)) -> OwnsSportsCar(x))", "all x.((Person(x) & -exists y.(Child(y) & HasChild(x))) -> OwnsSportsCar(x))"]}
{"id": "folio_train_1862", "nl": "Mary either does not own a sports car or, if they do, then they do not have at least one child.", "fol": "-((OwnsSportsCar(Mary) & -HasChild(Mary)) | (-OwnsSportsCar(Mary) & HasChild(Mary)))", "prediction": ["all x.((Mary(x) & -OwnsSportsCar(x)) | (-HasChild(x) & HasChild(x))))", "all x.((Mary(x) & (-OwnsSportsCar(x) | -HasChild(x))) -> -HasChild(x))", "all x.((Mary(x) & -OwnSportsCar(x)) | (-HasChild(x) & HasChild(x))))", "all x.((Mary(x) & (-OwnSportsCar(x) | -HasChild(x))) -> -HasChild(x))", "all x.((Mary(x) & -OwnsSportsCar(x)) | (-HasChild(x) | -HasChild(x))))", "all x.((Mary(x) & -OwnSportsCar(x)) | (-HasChild(x) | -HasChild(x))))", "all x.((Mary(x) & -OwnsSportsCar(x)) | (-HasChild(x) | HasChild(x))))", "all x.((Mary(x) & -OwnSportsCar(x)) | (-HasChild(x) | HasChild(x))))", "all x.((Mary(x) & -OwnsSportsCar(x)) | (-OwnsSportsCar(x) & HasChild(x))))", "all x.((Mary(x) & (-OwnSportsCar(x) | -HasChild(x))) -> -OwnSportsCar(x))", "all x.((Mary(x) & -OwnSportsCar(x)) | (-OwnSportsCar(x) & HasChild(x))))", "all x.((Mary(x) & -OwnSportsCar(x)) | (-OwnSportsCar(x) & Child(x))))", "all x.((Mary(x) & (-OwnsSportsCar(x) | -HasChild(x))) -> -OwnsSportsCar(x))", "all x.((Mary(x) & -OwnsSportsCar(x)) | (-HasChild(x))))", "exists x.(Mary(x) & (-OwnsSportsCar(x) | -HasChild(x))))", "all x.((Mary(x) & -OwnSportsCar(x)) | (-HasChild(x))))"]}
{"id": "folio_train_1863", "nl": "Mary is a person who lives in Manhattan.", "fol": "LivesInManhattan(Mary)", "prediction": ["all x y.((Person(x) & Mary(y)) -> LivesIn(x,y))", "all x y.((Person(x) & Person(y) & LivesIn(x,y)) -> MaryLivesIn(x,y))", "all x.((Person(x) & LivesIn(x,Manhattan)) -> Mary(x))", "all x y.((Person(x) & Person(y) & LivesIn(x,y)) -> MaryLivingIn(x,y))", "all x y.((Person(x) & Person(y) & LivesIn(x,y)) -> MaryLisesIn(x,y))", "all x y.((Person(x) & Mary(y) & LivesIn(x,y)) -> LivesIn(x,y))", "all x.(Mary(x) -> LivesIn(x,Manhattan))", "all x.(Mary(x) -> LivesInMetropolitan(x))", "all x y.((Person(x) & Mary(y) & LivesIn(x,y)) -> LivesIn(y,x))", "all x y.((Person(x) & Mary(y) & LivesIn(x,y)) -> LivesIn(y,z))", "all x y.((Person(x) & Mary(y) & LivesIn(x,y)) -> Manhattan(y))", "all x.(Mary(x) -> LivesInMidtown(x))", "all x.((Person(x) & LivesIn(x,Miami)) -> MaryLivesIn(x,Miami))", "all x y.((Person(x) & Person(y) & LivesIn(x,y)) -> MaryLivesIn(y,x))", "all x.(Maria(x) -> LivesIn(x,Manhattan))", "all x.(Maria(x) -> LivesInMetropolitan(x))"]}
{"id": "folio_train_1864", "nl": "Mary is a person who lives in Manhattan and is a young working professional who has a regular 9-5 job.", "fol": "(Person(Mary) & LivesInManhattan(Mary) & YoungWorkingProfessional(Mary))", "prediction": ["all x.((Person(x) & LivesInMidtown(x) & YoungWorkingProfessional(x) & RegularJob(x,9)) -> Mary(x))", "all x.((Person(x) & LivesInMiami(x) & YoungWorkingProfessional(x) & RegularJob(x,9)) -> Mary(x))", "all x.((Person(x) & LivesInMidtown(x) & YoungWorkingProfessional(x) & Regular9-5Job(x)) -> Mary(x))", "all x.((Person(x) & LivesInMiami(x) & YoungWorkingProfessional(x) & Regular9-5Job(x)) -> Mary(x))", "all x.((Person(x) & LivesInMetropolitan(x) & YoungWorkingProfessional(x) & RegularJob(x,9)) -> Mary(x))", "all x.((Person(x) & LivesInNew York(x) & YoungWorkingProfessional(x) & RegularJob(x,9)) -> Mary(x))", "all x.(Mary(x) -> (Person(x) & LivesInMidtown(x) & YoungWorkingProfessional(x) & Regular9-5Job(x)))", "all x.((Person(x) & LivesInManhattan(x) & YoungWorkingProfessional(x) & RegularJob(x,9)) -> Mary(x))", "all x.((Person(x) & LivesInNew York(x) & YoungWorkingProfessional(x) & Regular9-5Job(x)) -> Mary(x))", "all x.((Person(x) & LivesInMetropolitan(x) & YoungWorkingProfessional(x) & Regular9-5Job(x)) -> Mary(x))", "all x.((Person(x) & LivesInMcDonald(x) & YoungWorkingProfessional(x) & RegularJob(x,9)) -> Mary(x))", "all x.((Person(x) & LivesIn(x,Manhattan) & YoungWorkingProfessional(x) & RegularJob(x,9)) -> Mary(x))", "all x.((Person(x) & LivesInMidtown(x) & YoungWorkingProfessional(x) & RegularJob(x,9-5)) -> Mary(x))", "all x y.((Person(x) & LivesIn(x,y) & Manhattan(y) & YoungWorkingProfessional(x) & RegularJob(x,9-5)) -> Person(x))", "all x y.((Person(x) & LivesIn(x,y) & Manhattan(y) & YoungWorkingProfessional(x) & RegularJob(x,9-5)) -> Mary(x))", "all x y.((Person(x) & LivesIn(x,y) & Manhattan(y)) -> (YoungWorkingProfessional(x) & RegularJob(x,y)))"]}
{"id": "folio_train_1865", "nl": "If Mary is a young working professional who has a regular 9-5 job, then Mary does not live in Manhattan.", "fol": "(YoungWorkingProfessional(Mary) -> -LivesInManhattan(Mary))", "prediction": ["all x.((YoungWorkingProfessional(x) & Regular9-5Job(x)) -> -LivesInMidtown(x))", "all x.((YoungWorkingProfessional(x) & Regular9-5Job(x)) -> -LivesInMetropolitan(x))", "all x.((YoungWorkingProfessional(x) & RegularJob(x,9)) -> -LivesInMidtown(x))", "all x.((YoungWorkingProfessional(x) & RegularJob(x,9)) -> -LivesInMetropolitan(x))", "all x.((YoungWorkingProfessional(x) & Regular9-5Job(x)) -> -LivesInMiami(x))", "all x.((YoungWorkingProfessional(x) & Regular9-5Job(x)) -> -LivingInMidtown(x))", "all x.((YoungWorkingProfessional(x) & RegularJob(x,9)) -> -LivingInMidtown(x))", "all x.((YoungWorkingProfessional(x) & Regular9-5Job(x)) -> -MariaLivesInMidtown(x))", "all x.((YoungWorkingProfessional(x) & RegularJob(x,9)) -> -LivesInMiami(x))", "all x.((YoungWorkingProfessional(x) & Regular9-5Job(x)) -> -MariaLivesInMetropolitan(x))", "all x.((YoungWorkingProfessional(x) & HasRegular9-5Job(x)) -> -LivesInMidtown(x))", "all x.((YearWorkingProfessional(x) & Regular9-5Job(x)) -> -LivesInMidtown(x))", "all x.((YoungWorkingProfessional(x) & HasRegular9-5Job(x)) -> -LivesInMetropolitan(x))", "all x.((YoungWorkingProfessional(x) & RegularJob(x,9)) -> -MariaLivesInMidtown(x))", "all x.((YoungWorkingProfessional(x) & Regular9-5Job(x)) -> -LivesInMcDonald(x))", "all x.((YoungWorkingProfessional(x) & RegularJob(x) & 9-5(x)) -> -LivesInMidtown(x))"]}
{"id": "folio_train_1866", "nl": "Either block design or event-related design. ", "fol": "all x.(BlockDesignType(x) | EventRelatedDesignType(x))", "prediction": ["all x.(BlockDesign(x) | EventRelatedDesign(x))", "exists x.(BlockDesign(x) | EventRelatedDesign(x))", "((BlockDesign(x) | EventRelatedDesign(x)))", "all x.((BlockDesign(x) | EventRelatedDesign(x)) -> (BlockDesign(x) | EventRelatedDesign(x)))", "all x.((BlockDesign(x) | EventRelatedDesign(x)) -> Works(x))", "all x.(BlockDesign(x) | EventRelationshipDesign(x))", "all x.((BlockDesign(x) | EventRelatedDesign(x)) -> -(BlockDesign(x) | EventRelatedDesign(x))))", "all x.((BlockDesign(x) | EventRelatedDesign(x)) -> Either(x))", "exists x.(BlockDesign(x) | EventRelationshipDesign(x))", "all x.((BlockDesign(x) | EventRelatedDesign(x)) -> -(BlockDesign(x) | EventRelatedDesign(x)))", "all x.((BlockDesign(x) | EventRelatedDesign(x)) -> Available(x))", "all x.((BlockDesign(x) | EventRelatedDesign(x)) -> Requires(x))", "(BlockDesign(x) | EventRelatedDesign(x)))", "all x.((BlockDesign(x) | EventRelatedDesign(x)) -> -BlockDesign(x))", "all x.((BlockDesign(x) | EventRelationshipDesign(x)) -> -(BlockDesign(x) | EventRelationshipDesign(x))))", "all x.((BlockDesign(x) | EventRelationshipDesign(x)) -> -(BlockDesign(x) | EventRelationshipDesign(x)))"]}
{"id": "folio_train_1867", "nl": "All event-related designs are brain image acquisition.", "fol": "all x.(EventRelatedDesignType(x) -> BrainImageAcquisitionProcess(x))", "prediction": ["all x.(EventRelatedDesign(x) -> BrainImageAcquisition(x))", "all x.(EventRelatedDesign(x) -> BrainImageAcquiring(x))", "all x.((EventRelatedDesign(x) & BrainImageAcquisition(x)) -> BrainImageAcquisition(x))", "all x.(EventRelatedDesign(x) -> BrainImageAcquired(x))", "all x.((EventRelatedDesign(x) & BrainImageAcquiring(x)) -> BrainImageAcquiring(x))", "all x.((EventRelatedDesign(x) & BrainImageAcquired(x)) -> BrainImageAcquiring(x))", "all x.((EventDesign(x) & BrainImageAcquisition(x)) -> BrainImageAcquisition(x))", "all x.((Event(x) & BrainImageAcquisition(x)) -> BrainImageAcquisition(x))", "all x.((Design(x) & EventRelated(x)) -> BrainImageAcquisition(x))", "all x.((EventRelatedDesign(x) & BrainImageAcquired(x)) -> BrainImageAcquisition(x))", "all x.(EventRelatedDesign(x) -> BrainImageAcquirement(x))", "all x.(EventRelationalDesign(x) -> BrainImageAcquisition(x))", "all x.(EventRelated(x) -> BrainImageAcquisition(x))", "all x.(EventRelationshipDesign(x) -> BrainImageAcquisition(x))", "all x.((EventRelatedDesign(x) & BrainImageAcquisition(x)) -> BrainImageAcquiring(x))", "all x.((EventRelatedDesign(x) & BrainImageAcquired(x)) -> BrainImageAcquired(x))"]}
{"id": "folio_train_1868", "nl": "All brain image acquisition is preceded by data processing.", "fol": "all x.(BrainImageAcquisitionProcess(x) -> PrecededByDataProcessingStep(x))", "prediction": ["all x.(BrainImageAcquisition(x) -> PreceedsDataProcessing(x))", "all x.(BrainImageAcquisition(x) -> PrecededByDataProcessing(x))", "all x.(BrainImageAcquiring(x) -> PreceedsDataProcessing(x))", "all x.(BrainImageAcquisition(x) -> DataProcessing(x))", "all x.(BrainImageAcquiring(x) -> PrecededByDataProcessing(x))", "all x.(BrainImageAcquisition(x) -> precededByDataProcessing(x))", "all x.(BodyImageAcquisition(x) -> PreceedsDataProcessing(x))", "all x.(BrainImageAcquisition(x) -> PreceededByDataProcessing(x))", "all x y.((BrainImageAcquisition(x) & DataProcessing(y)) -> Preceeds(x,y))", "all x.(BirdImageAcquisition(x) -> PreceedsDataProcessing(x))", "all x.(BodyImageAcquisition(x) -> PrecededByDataProcessing(x))", "all x.(BrainImageAcquiring(x) -> DataProcessing(x))", "all x.(BildImageAcquisition(x) -> PreceedsDataProcessing(x))", "all x.(BirdImageAcquisition(x) -> PrecededByDataProcessing(x))", "all x.(BloodImageAcquisition(x) -> PreceedsDataProcessing(x))", "all x.(BrainImageAcquisition(x) -> PrecedesDataProcessing(x))"]}
{"id": "folio_train_1869", "nl": "Nothing preceded by data processing acquires data.", "fol": "all x.(PrecededByDataProcessingStep(x) -> -DataAcquisition(x))", "prediction": ["all x.((DataProcessing(x) & -Preceeds(x,Data)) -> AcquiresData(x))", "all x.((PreceedsDataProcessing(x)) -> AcquiresData(x))", "all x.((DataProcessing(x) & -Preceeds(x)) -> AcquiresData(x))", "all x.((DataProcessing(x) & -Preceeds(x,DataProcessing)) -> AcquiresData(x))", "all x.((DataProcessing(x) & -Preceeds(x,data)) -> AcquiresData(x))", "all x y.((DataProcessing(x) & Data(y)) -> Acquires(x,y))", "all x.((PrecededByDataProcessing(x)) -> AcquiresData(x))", "all x y.((PreceedsDataProcessing(x) & Data(y)) -> Acquires(x,y))", "all x.(PreceedsDataProcessing(x) -> AcquiresData(x))", "all x.((DataProcessing(x) & Preceeds(x,Data)) -> AcquiresData(x))", "all x.((PreceedsDataProcessing(x) & -AcquiresData(x)) -> -AcquiresData(x))", "all x.((DataProcessing(x) & Nothing(x)) -> AcquiresData(x))", "all x.((DataProcessing(x) & Preceeds(x)) -> AcquiresData(x))", "all x.((PreceededByDataProcessing(x)) -> AcquiresData(x))", "all x.((DataProcessing(x) & Precedes(x,Data)) -> AcquiresData(x))", "all x.((PreceedsDataProcessing(x) & -AcquiresData(x)) -> DataProcessing(x))"]}
{"id": "folio_train_1870", "nl": "Picture memory is either an event-related design and acquiring data or neither an event-related design nor acquiring data.", "fol": "((EventRelatedDesignType(PictureMemory) & DataAcquisition(PictureMemory)) | (-EventRelatedDesignType(PictureMemory) & -DataAcquisition(PictureMemory)))", "prediction": ["all x.(PictureMemory(x) -> ((EventRelatedDesign(x) & AcquiringData(x)) | (-EventRelatedDesign(x) & AcquiringData(x))))", "all x.(PictureMemory(x) -> (EventRelatedDesign(x) & AcquiringData(x)) | (-EventRelatedDesign(x) & AcquiringData(x))))", "all x.(PictureMemory(x) -> ((EventRelatedDesign(x) & AcquiringData(x)) | -EventRelatedDesign(x) & AcquiringData(x)))", "all x.(PictureMemory(x) -> ((EventRelatedDesign(x) & AcquiringData(x)) | (-EventRelatedDesign(x) & AcquiringData(x)))))", "all x.(PictureMemory(x) -> ((EventRelatedDesign(x) & AcquiringData(x)) | -EventRelatedDesign(x) & AcquiringData(x))))", "all x.(PictureMemory(x) -> (EventRelatedDesign(x) & AcquiringData(x)) | -EventRelatedDesign(x) & AcquiringData(x)))", "all x.(PictureMemory(x) -> (EventRelatedDesign(x) & AcquiringData(x) | -EventRelatedDesign(x) & AcquiringData(x)))", "all x.(PictureMemory(x) -> ((EventRelatedDesign(x) & AcquiringData(x)) | -(EventRelatedDesign(x) & AcquiringData(x))))", "all x.(PictureMemory(x) -> (EventRelatedDesign(x) & AcquiringData(x)) | -(EventRelatedDesign(x) & AcquiringData(x))))", "all x.(PictureMemory(x) -> (EventRelatedDesign(x) & AcquiresData(x)) | (-EventRelatedDesign(x) & AcquiresData(x))))", "all x.(PictureMemory(x) -> ((EventRelatedDesign(x) & AcquiringData(x)) | -(EventRelatedDesign(x) & AcquiringData(x)))))", "all x.(PictureMemory(x) -> ((EventRelatedDesign(x) & AcquiresData(x)) | (-EventRelatedDesign(x) & AcquiresData(x))))", "all x.(PictureMemory(x) -> ((EventRelatedDesign(x) & AcquiringData(x) | -EventRelatedDesign(x) & AcquiringData(x))))", "all x.(PictureMemory(x) -> (EventRelatedDesign(x) & AcquiringData(x) | (-EventRelatedDesign(x) & AcquiringData(x))))", "all x y.((PictureMemory(x) & EventRelatedDesign(x) & AcquiringData(x)) | (-EventRelatedDesign(y) & AcquiringData(y))))", "all x.(PictureMemory(x) -> (EventRelatedDesign(x) & AcquiresData(x)) | -EventRelatedDesign(x) & AcquiresData(x)))"]}
{"id": "folio_train_1871", "nl": "Picture memory is preceded by data processing.", "fol": "PrecededByDataProcessingStep(PictureMemory)", "prediction": ["all x.(PictureMemory(x) -> PreceedsDataProcessing(x))", "all x y.((PictureMemory(x) & DataProcessing(y)) -> Preceeds(x,y))", "all x.(PictureMemory(x) -> PrecededByDataProcessing(x))", "all x.((PictureMemory(x) & DataProcessing(x)) -> Preceeds(x,y))", "all x y.((PictureMemory(x) & DataProcessing(y)) -> Precedes(x,y))", "all x y.((PictureMemory(x) & DataProcessing(y)) -> PrecededBy(x,y))", "all x.((PictureMemory(x) & DataProcessing(x)) -> Preceeds(x))", "all x.(PictureMemory(x) -> DataProcessing(x))", "all x.(PictureMemory(x) -> precededByDataProcessing(x))", "all x.((PictureMemory(x) & DataProcessing(x)) -> Preceeds(x,PictureMemory))", "all x y z.((PictureMemory(x) & DataProcessing(y) & Picture(z)) -> Preceeds(x,y,z))", "all x y.((PictureMemory(x) & DataProcessing(y)) -> Preceeding(x,y))", "all x.(PictureMemory(x) -> PrecedesDataProcessing(x))", "all x y.((PictureMemory(x) & DataProcessing(y)) -> Preceded(x,y))", "all x y.((PictureMemory(x) & DataProcessing(y)) -> Preceds(x,y))", "all x.((PictureMemory(x) & DataProcessing(x)) -> Precedes(x,y))"]}
{"id": "folio_train_1872", "nl": "Picture memory is a block design.", "fol": "BlockDesignType(PictureMemory)", "prediction": ["all x.(PictureMemory(x) -> BlockDesign(x))", "all x.(PictureMemory(x) -> BlockDesign(x))", "all x y.((PictureMemory(x) & Picture(y)) -> BlockDesign(x))", "all x y.((PictureMemory(x) & PictureMemory(y)) -> BlockDesign(x))", "all x.((PictureMemory(x) & BlockDesign(x)) -> PictureMemory(x))", "all x.(PhotographMemory(x) -> BlockDesign(x))", "all x y.((PictureMemory(x) & BlockDesign(y)) -> Has(x,y))", "all x y.((PictureMemory(x) & BlockDesign(y)) -> PictureMemory(x))", "all x y.((PictureMemory(x) & PictureMemory(y)) -> BlockDesign(x,y))", "all x.((PictureMemory(x) & BlockDesign(x)) -> Has(x,y))", "all x y.((PictureMemory(x) & BlockDesign(y)) -> Is(x,y))", "all x y.((PictureMemory(x) & BlockDesign(y)) -> PictureMemory(x,y))", "all x.((PictureMemory(x) & BlockDesign(x)) -> HasMemory(x))", "all x y.((PictureMemory(x) & Picture(y)) -> BlockDesign(x,y))", "all x y.((PictureMemory(x) & BlockDesign(y)) -> Contains(x,y))", "all x y.((PictureMemory(x) & BlockDesign(y)) -> Creates(x,y))"]}
{"id": "folio_train_1873", "nl": "Picture memory is either a block design or acquiring data.", "fol": "(BlockDesignType(PictureMemory) | DataAcquisition(PictureMemory))", "prediction": ["all x.(PictureMemory(x) -> (BlockDesign(x) | AcquiringData(x)))", "all x.(PictureMemory(x) -> (BlockDesign(x) | AcquisitionData(x)))", "all x.(PictureMemory(x) -> ((BlockDesign(x) | AcquiringData(x))))", "all x.(PictureMemory(x) -> (BlockDesign(x) | AcquiringData(x)))", "all x.(PictureMemory(x) -> (BlockDesign(x) | AcquisitionOfData(x)))", "all x.(PictureMemory(x) -> (BlockDesign(x) | AcquiresData(x)))", "all x.(PictureMemory(x) -> (BlockDesign(x) | AcquiringData(x)))", "all x.((PictureMemory(x) & BlockDesign(x)) | AcquiringData(x))", "all x.(PictureMemory(x) -> ((BlockDesign(x) | AcquisitionData(x))))", "all x y.((PictureMemory(x) & BlockDesign(y)) | AcquiringData(x,y)) -> PictureMemory(x))", "all x y.((PictureMemory(x) & BlockDesign(y)) | AcquiringData(x,y)) -> Memory(x))", "all x.((PictureMemory(x) & BlockDesign(x)) | AcquiringData(x)) -> PictureMemory(x))", "all x.(PhotographMemory(x) -> (BlockDesign(x) | AcquiringData(x)))", "exists x.(PictureMemory(x) & (BlockDesign(x) | AcquiringData(x)))", "all x.(PictureMemory(x) -> (BlockDesign(x) | AcquisitionData(x)))", "all x.(PictureMemory(x) -> (BlockDesign(x) | AcquireData(x)))"]}
{"id": "folio_train_1874", "nl": "If picture memory is not acquiring data, then picture memory is a block design and acquiring data.", "fol": "(-DataAcquisition(PictureMemory) -> (BlockDesignType(PictureMemory) & DataAcquisition(PictureMemory)))", "prediction": ["all x.((PictureMemory(x) & -AcquiringData(x)) -> (BlockDesign(x) & AcquiringData(x)))", "all x.((PictureMemory(x) & -AcquiringData(x)) -> (BlockDesign(x) & AcquiringData(x)))", "all x.((PictureMemory(x) & -AcquiringData(x)) -> BlockDesignAndAcquiringData(x))", "all x.((PictureMemory(x) & -AcceptingData(x)) -> (BlockDesign(x) & AcquiringData(x)))", "all x.((PictureMemory(x) & -AcquiringData(x)) -> BlockDesign(x) & AcquiringData(x))", "all x.((PictureMemory(x) & -AcquiresData(x)) -> (BlockDesign(x) & AcquiresData(x)))", "all x.((PictureMemory(x) & -AcquiringData(x)) -> (BlockDesign(x) & AcquisitionData(x)))", "all x.((ImageMemory(x) & -AcquiringData(x)) -> (BlockDesign(x) & AcquiringData(x)))", "all x.((BlockDesign(x) & -AcquiringData(x)) -> PictureMemory(x))", "all x.((PhotographMemory(x) & -AcquiringData(x)) -> (BlockDesign(x) & AcquiringData(x)))", "all x.((PictureMemory(x) & -AcquiringData(x)) -> (AcquiringData(x) & BlockDesign(x)))", "all x.((PictureMemory(x) & -ObtainingData(x)) -> (BlockDesign(x) & AcquiringData(x)))", "all x y.((PictureMemory(x) & -AcquiringData(x)) -> (BlockDesign(x) & AcquiringData(y)))", "all x.((PictureMemory(x) & -AcceptsData(x)) -> (BlockDesign(x) & AcquiresData(x)))", "all x.((PictureMemory(x) & -AcquiringData(x)) -> BlockDesign(x) & AcquiringData(x))", "all x.((PictureMemory(x) & -AcquiringData(x)) -> (BlockDesign(x) & AppropriatingData(x)))"]}
{"id": "folio_train_1875", "nl": "The USS Lyon was a US Navy ship involved in WWII.", "fol": "(IsUSNavyShip(Usslyon) & InWorldWarII(Usslyon))", "prediction": ["all x.((USSLyon(x) & USNavyShip(x)) -> InvolvedInWWII(x))", "all x.((USSLyon(x) & USNavyShip(x)) -> InvolvedInWWII(x))", "all x.((USS Lyon(x) & USNavyShip(x)) -> InvolvedInWWII(x))", "all x y.((USSLyon(x) & USNavyShip(y)) -> InvolvedInWWII(x,y))", "all x y.((USSLyon(x) & USNavy(y)) -> InvolvedInWWII(x,y))", "all x y.((USSLyon(x) & USNavy(y)) -> InvolvedInWWII(x,y))", "all x.((USSLyon(x) & USNavy(x)) -> InvolvedInWWII(x))", "all x.((USSLyon(x) & USNavy(x)) -> InvolvedInWWII(x))", "all x.(USSLyon(x) -> (USNavyShip(x) & InvolvedInWWII(x)))", "all x.((USSLyon(x) & USNavyShip(x)) -> InvolvedInWorldWar(x))", "all x y.((USSLyon(x) & USNavyShip(y)) -> InvolvedInWWII(x,y))", "all x.(USSLyon(x) -> (USNavyShip(x) & InvolvedInWWII(x)))", "all x.((USS Lyon(x) & USNavyShip(x)) -> InvolvedInWWII(x))", "all x.((USSLyon(x) & US NavyShip(x)) -> InvolvedInWWII(x))", "all x y.((USSLyon(x) & USNavyShip(y)) -> InvolvedInWorldWar(x,y))", "all x.((USSLyon(x) & USNavyShip(x)) -> InvolvedInWorldWar(x))"]}
{"id": "folio_train_1876", "nl": "All ships involved in WWII are currently decommissioned or in a museum.", "fol": "all x.(InWorldWarII(x) -> (IsDecommissioned(x) | IsInMuseum(x)))", "prediction": ["all x.((Ship(x) & InvolvedInWWII(x)) -> (Decommissioned(x) | InMuseum(x)))", "all x.((Ship(x) & InvolvedInWWII(x)) -> (Decommissioned(x) | Museum(x)))", "all x.((Ship(x) & InvolvedInWWII(x)) -> (CurrentlyDecommissioned(x) | InMuseum(x)))", "all x.((Ship(x) & InvolvedInWorldWar(x)) -> (Decommissioned(x) | InMuseum(x)))", "all x.((Ship(x) & InvolvedInWorldWar(x)) -> (Decommissioned(x) | Museum(x)))", "all x.((Ship(x) & InvolvedInWorldWar(x)) -> (CurrentlyDecommissioned(x) | InMuseum(x)))", "all x.((Ship(x) & ServedInWWII(x)) -> (Decommissioned(x) | InMuseum(x)))", "all x.((Ship(x) & InvolvedInWar(x)) -> (Decommissioned(x) | InMuseum(x)))", "all x.((Ship(x) & InvolvedInWWII)) -> (Decommissioned(x) | InMuseum(x)))", "all x.((Ship(x) & InvolvedInWarfare(x)) -> (Decommissioned(x) | InMuseum(x)))", "all x.((Ship(x) & ParticipatedInWWII(x)) -> (Decommissioned(x) | InMuseum(x)))", "all x.((Ship(x) & InvolvesWWII(x)) -> (Decommissioned(x) | InMuseum(x)))", "all x.((Ship(x) & EngagedInWWII(x)) -> (Decommissioned(x) | InMuseum(x)))", "all x.((Ship(x) & ServedInWWII(x)) -> (Decommissioned(x) | Museum(x)))", "all x.((Ship(x) & InvolvedInWWII(x)) -> (Decommissioned(x) | MuseumIn(x)))", "all x.((Ship(x) & InvolvedInWar(x)) -> (Decommissioned(x) | Museum(x)))"]}
{"id": "folio_train_1877", "nl": "The USS Lyon is decommissioned.", "fol": "IsDecommissioned(Usslyon)", "prediction": ["all x.(USSLyon(x) -> Decommissioned(x))", "All x.(USSLyon(x) -> Decommissioned(x))", "all x.((USSLyon(x) & Decommissioned(x)) -> Ship(x))", "all x.((USSLyon(x) & Decommissioned(x)) -> Decommissioned(x))", "all x.((USS Lyon(x) & Decommissioned(x)) -> Decommissioned(x))", "all x.(USS(x) -> Decommissioned(x))", "-Decommissioned(USSLyon)", "All x.(USS(x) -> Decommissioned(x))", "all x.((USSLyon(x) & Decommissioned(x)) -> Float(x))", "all x.((USSLyon(x) & Decommissioned(x)) -> Operates(x))", "(Decommissioned(USS Lyon) -> Decommissioned(USS Lyon))", "all x.((USSLyon(x) & Decommissioned(x)) -> ShipDecommissioned(x))", "all x.((USSLyon(x)) -> Decommissioned(x))", "(Decommissioned(USSLyon))", "all x.((USSLyon(x) & Decommissioned(x)) -> Ship(x,y))", "all x.((USSLyon(x) & Decommissioned(x)) -> NavalDispatch(x))"]}
{"id": "folio_train_1878", "nl": "All disposable chopsticks are made from trees.", "fol": "all x.(IsDisposableChopsticks(x) -> IsMadeFromTrees(x))", "prediction": ["all x.(DiscoverableChopstick(x) -> MadeFromTrees(x))", "all x.(DiscoverableChopstick(x) -> MadeFromTrees(x))", "all x.(DisposableChopstick(x) -> MadeFromTrees(x))", "all x.(DisposableChopstick(x) -> MadeFromTrees(x))", "all x.(DiscoveryChopstick(x) -> MadeFromTrees(x))", "all x.(DiscoverableChipstick(x) -> MadeFromTrees(x))", "all x.(DiscoyableChopstick(x) -> MadeFromTrees(x))", "all x.(DiscoveryChopstick(x) -> MadeFromTrees(x))", "all x.(DiscoverableChips(x) -> MadeFromTrees(x))", "all x.(DiscoverableChipshot(x) -> MadeFromTrees(x))", "all x.(DisciptableChopstick(x) -> MadeFromTrees(x))", "all x.(DiscussibleChopstick(x) -> MadeFromTrees(x))", "all x.(DiscoverableChopstick(x) -> MadeFromTrees(x))", "all x.(DisposableChipshot(x) -> MadeFromTrees(x))", "all x.(DisposableChipshot(x) -> MadeFromTrees(x))", "all x.(DisposableChips(x) -> MadeFromTrees(x))"]}
{"id": "folio_train_1879", "nl": "Some chopsticks are eco-friendly.", "fol": "exists x.IsEcoFriendly(x)", "prediction": ["exists x.(Chopstick(x) & EcoFriendly(x))", "exists x.(Chopstick(x) & EcoFriendly(x))", "exists x.(Chopstick(x) & EcoFriendly(x))", "exists x.(Chipstick(x) & EcoFriendly(x))", "exists x.(Chocolate(x) & EcoFriendly(x))", "exists x.(Chopper(x) & EcoFriendly(x))", "exists x.(Chewstick(x) & EcoFriendly(x))", "exists x.(Cupstick(x) & EcoFriendly(x))", "exists x.(Cropstick(x) & EcoFriendly(x))", "exists x.(Choicestick(x) & EcoFriendly(x))", "exists x.(Chopstrum(x) & EcoFriendly(x))", "exists x.(Chemstick(x) & EcoFriendly(x))", "exists x.(Chompstick(x) & EcoFriendly(x))", "exists x.(Chipshot(x) & EcoFriendly(x))", "exists x.(Chipstick(x) & EcoFriendly(x))", "exists x.(Chopshot(x) & EcoFriendly(x))"]}
{"id": "folio_train_1880", "nl": "Either disposable chopsticks or reusable chopsticks. ", "fol": "all x.((IsDisposableChopsticks(x) & -IsReusableChopsticks(x)) | (-IsDisposableChopsticks(x) & IsReusableChopsticks(x)))", "prediction": ["all x.(DiscoverableChopstick(x) | ReusableChopstick(x))", "all x.(Chopstick(x) -> (Disposable(x) | Reusable(x)))", "all x.(DisposableChopstick(x) | ReusableChopstick(x))", "all x.((DiscoverableChopstick(x) | ReusableChopstick(x)) -> (Disposable(x) | Reusable(x)))", "all x.((DisposableChopsticks(x) | ReusableChopsticks(x)) -> (DisposableChopsticks(x) | ReusableChopsticks(x)))", "all x.((DiscoverableChopstick(x) | ReusableChopstick(x)) -> (DisposableChopstick(x) | ReusableChopstick(x)))", "all x.((DisposableChopstick(x) | ReusableChopstick(x)) -> (DisposableChopstick(x) | ReusableChopstick(x)))", "exists x.(DiscoverableChopstick(x) | ReusableChopstick(x))", "(DisposableChopsticks(c) | ReusableChopsticks(c)))", "((DisposableChopsticks(x) | ReusableChopsticks(x)))", "all x.(DisposableChopstick(x) | ReusableChopstick(x))", "all x.((DiscoverableChopstick(x) | ReusableChopstick(x)) -> (DisposableChopstick(x) | ReusableChopstick(x)))", "all x.((DisposableChopstick(x) | ReusableChopstick(x)) -> (Disposable(x) | Reusable(x)))", "all x.((DiscoverableChopstick(x) | ReusableChopstick(x)) -> (Disposable(x) | Reusable(x)))", "(DisposableChopsticks(x) | ReusableChopsticks(x))", "all x.((DisposableChopsticks(x) | ReusableChopsticks(x)) -> (Disposable(x) | Reusable(x)))"]}
{"id": "folio_train_1881", "nl": "If chopsticks are made from metals, then they are not made from plastics. ", "fol": "all x.(IsMadeFromMetals(x) -> -IsMadeFromPlastics(x))", "prediction": ["all x.((Chopstick(x) & MadeFromMetals(x)) -> -MadeFromPlastics(x))", "all x.((Chopstick(x) & MadeFromMetal(x)) -> -MadeFromPlastics(x))", "all x.((Cropstick(x) & MadeFromMetals(x)) -> -MadeFromPlastics(x))", "all x.((Cropstick(x) & MadeFromMetal(x)) -> -MadeFromPlastics(x))", "all x.((Chopstick(x) & MadeFromMetals(x)) -> -MadeFromPolyester(x))", "all x.((Chopper(x) & MadeFromMetals(x)) -> -MadeFromPlastics(x))", "all x.((Chopstick(x) & MadeFromMetals(x)) -> -MadeFromPlastics(x))", "all x.((Chopstick(x) & MadeFromMetallics(x)) -> -MadeFromPlastics(x))", "all x.((Chopstick(x) & MadeFromMetals(x)) -> -MadeFromPolyesters(x))", "all x.((Chopstick(x) & MadeFromMetal(x)) -> -MadeFromPolyester(x))", "all x.((Chipstick(x) & MadeFromMetals(x)) -> -MadeFromPlastics(x))", "all x.((Chopsticks(x) & MadeFromMetals(x)) -> -MadeFromPlastics(x))", "all x.((Chopper(x) & MadeFromMetal(x)) -> -MadeFromPlastics(x))", "all x.(Chopstick(x) -> (MadeFromMetals(x) & -MadeFromPlastics(x)))", "all x.((Chewstick(x) & MadeFromMetals(x)) -> -MadeFromPlastics(x))", "all x.((Chopstick(x) & MadeFromMetal(x)) -> -MadeFromPlastics(x))"]}
{"id": "folio_train_1882", "nl": "All reusable chopsticks are made from metal.", "fol": "all x.(IsReusableChopsticks(x) -> IsMadeFromMetals(x))", "prediction": ["all x.(ReusableChopstick(x) -> MadeFromMetal(x))", "all x.(RecyclableChopstick(x) -> MadeFromMetal(x))", "all x.((Chopstick(x) & Reusable(x)) -> MadeFromMetal(x))", "all x.(Chopstick(x) -> MadeFromMetal(x))", "all x y.((ReusableChopstick(x) & Metal(y)) -> MadeFrom(x,y))", "all x.((ReusableChopstick(x) & MadeFromMetal(x)) -> MadeFrom(x))", "all x.((Chopstick(x) & MadeFromMetal(x)) -> Reusable(x))", "all x.(ReusableChopstick(x) -> MadeFromMetal(x))", "all x.(ReusableChopstick(x) -> MadeOfMetal(x))", "all x.((Chopper(x) & Reusable(x)) -> MadeFromMetal(x))", "all x.(ReusableChopstick(x) -> MadeFromMetal(x))", "all x.((ReusableChopstick(x) & MadeFromMetal(x)) -> MadeFromMetal(x))", "all x.(ReusableChipstick(x) -> MadeFromMetal(x))", "all x.((ReusableChopstick(x) & MadeFromMetal(x)) -> MadeFrom(x,Metal))", "all x.(ReusableChopstick(x) -> MadeFromMetallic(x))", "all x.(ReusableChopsticks(x) -> MadeFromMetal(x))"]}
{"id": "folio_train_1883", "nl": "Chopsticks at restaurants are either made from metals and made from plastics, or neither made from metals nor made from plastics.", "fol": "-((IsMadeFromMetals(ChopsticksAtRestaurants) & -IsMadeFromPlastics(ChopsticksAtRestaurants)) | (-IsMadeFromMetals(ChopsticksAtRestaurants) & IsMadeFromPlastics(ChopsticksAtRestaurants)))", "prediction": ["all x.((Chopstick(x) & Restaurant(x)) -> (MadeFromMetals(x) & MadeFromPlastics(x)) | (-MadeFromMetals(x) & MadeFromPlastics(x))))", "all x.(Chopstick(x) -> ((MadeFromMetals(x) & MadeFromPlastics(x)) | (-MadeFromMetals(x) & MadeFromPlastics(x)) | (-MadeFromMetals(x) & MadeFromPlastics(x)))))", "all x.(Chopstick(x) -> ((MadeFromMetals(x) & MadeFromPlastics(x)) | (-MadeFromMetals(x) & MadeFromPlastics(x))))", "all x.(Chopstick(x) -> ((MadeFromMetals(x) & MadeFromPlastics(x)) | (-MadeFromMetals(x) & MadeFromPlastics(x)) | (-MadeFromMetals(x) & MadeFromPlastics(x))))", "all x.(Chopstick(x) -> ((MadeFromMetals(x) & MadeFromPlastics(x)) | -MadeFromMetals(x) & MadeFromPlastics(x)) | -MadeFromMetals(x) & MadeFromPlastics(x)))", "all x y.((Chopstick(x) & Restaurant(y)) -> ((MadeFromMetals(x) & MadeFromPlastics(x)) | (-MadeFromMetals(y) & MadeFromPlastics(y))))", "all x.((Chopstick(x) & Restaurant(x)) -> ((MadeFromMetals(x) & MadeFromPlastics(x)) | (-MadeFromMetals(x) & MadeFromPlastics(x)) | (-MadeFromMetals(x) & MadeFromPlastics(x)))))", "all x y.((Chopstick(x) & Restaurant(y)) -> (MadeFromMetals(x) & MadeFromPlastics(x)) | (-MadeFromMetals(y) & MadeFromPlastics(y))))", "all x.(Chopstick(x) -> ((MadeFromMetals(x) & MadeFromPlastics(x)) | -MadeFromMetals(x) & MadeFromPlastics(x)))", "all x.(Chopstick(x) -> (MadeFromMetals(x) & MadeFromPlastics(x)) | (-MadeFromMetals(x) & MadeFromPlastics(x))))", "all x.((Chopstick(x) & Restaurant(x)) -> (MadeFromMetal(x) & MadeFromPlastics(x)) | (-MadeFromMetal(x) & MadeFromPlastics(x))))", "all x.((Chopstick(x) & Restaurant(x)) -> ((MadeFromMetals(x) & MadeFromPlastics(x)) | (-MadeFromMetals(x) & MadeFromPlastics(x)))))", "all x.((Chopstick(x) & Restaurant(x)) -> (MadeFromMetals(x) & MadeFromPlastics(x)) | -MadeFromMetals(x) & MadeFromPlastics(x)))", "all x.(Chopstick(x) -> ((MadeFromMetals(x) & MadeFromPlastics(x)) | (-MadeFromMetals(x) & MadeFromPlastics(x)))))", "all x.((Chopstick(x) & Restaurant(x)) -> ((MadeFromMetals(x) & MadeFromPlastics(x)) | (-MadeFromMetals(x) & MadeFromPlastics(x))))", "all x.(Chopstick(x) -> ((MadeFromMetal(x) & MadeFromPlastics(x)) | (-MadeFromMetal(x) & MadeFromPlastics(x))))"]}
{"id": "folio_train_1884", "nl": "Chopsticks at restaurants are eco-friendly.", "fol": "IsEcoFriendly(ChopsticksAtRestaurants)", "prediction": ["all x.((Chopstick(x) & Restaurant(x)) -> EcoFriendly(x))", "all x.((Chopstick(x) & Restaurant(x)) -> EcoFriendly(x))", "all x y.((Chopstick(x) & Restaurant(y)) -> EcoFriendly(x,y))", "all x y.((Chopstick(x) & Restaurant(y)) -> EcoFriendly(x))", "all x.((Chopstick(x) & Restaurant(y)) -> EcoFriendly(x))", "all x y z.((Chopstick(x) & Restaurant(y) & Restaurant(z)) -> EcoFriendly(x,y,z))", "all x.((Chopstick(x) & AtRestaurant(x)) -> EcoFriendly(x))", "all x.((Chopstick(x) & AtRestaurants(x)) -> EcoFriendly(x))", "all x.((Potstick(x) & Restaurant(x)) -> EcoFriendly(x))", "all x y.((Chopstick(x) & Restaurant(y)) -> EcoFriendly(x,y))", "all x.((Chopstick(x) & Restaurant(y)) -> EcoFriendly(x,y))", "all x.((Pouchstick(x) & Restaurant(x)) -> EcoFriendly(x))", "all x y.((Chopstick(x) & Restaurant(y) & At(x,y)) -> EcoFriendly(x))", "all x y z.((Chopstick(x) & Restaurant(y) & Restaurant(z)) -> EcoFriendly(x))", "all x y.((Chopstick(x) & Restaurant(y)) -> EcoFriendly(x))", "all x.((Chopsticks(x) & Restaurant(x)) -> EcoFriendly(x))"]}
{"id": "folio_train_1885", "nl": "Chopsticks at restaurants are eco-friendly or made from trees.", "fol": "(IsEcoFriendly(ChopsticksAtRestaurants) | IsMadeFromTrees(ChopsticksAtRestaurants))", "prediction": ["all x.((Chopstick(x) & Restaurant(x)) -> (EcoFriendly(x) | MadeFromTrees(x)))", "all x.((Chopstick(x) & Restaurant(x)) -> (EcoFriendly(x) | MadeFromTrees(x)))", "all x y.((Chopstick(x) & Restaurant(y)) -> (EcoFriendly(x) | MadeFromTrees(x)))", "all x.((Chopstick(x) & Restaurant(y)) -> (EcoFriendly(x) | MadeFromTrees(x)))", "all x y.((Chopstick(x) & Restaurant(y)) -> (EcoFriendly(x,y) | MadeFromTrees(x,y)))", "all x.(Chopstick(x) -> (EcoFriendly(x) | MadeFromTrees(x)))", "all x y.((Chopstick(x) & Restaurant(y)) -> (EcoFriendly(x) | MadeFromTrees(x)))", "all x y z.((Chopstick(x) & Restaurant(y) & Restaurant(z)) -> (EcoFriendly(x) | MadeFromTrees(x)))", "all x.((Chopstick(x) & Restaurant(x)) -> ((EcoFriendly(x) | MadeFromTrees(x))))", "all x y.((Chopstick(x) & Restaurant(y)) -> ((EcoFriendly(x) | MadeFromTrees(x))))", "all x.((Potstick(x) & Restaurant(x)) -> (EcoFriendly(x) | MadeFromTrees(x)))", "all x.((Pouchstick(x) & Restaurant(x)) -> (EcoFriendly(x) | MadeFromTrees(x)))", "all x.((Chopstick(x) & Restaurant(y)) -> (EcoFriendly(x) | MadeFromTrees(x)))", "all x.(Chopstick(x) -> (EcoFriendly(x) | MadeFromTrees(x)))", "all x y z.((Chopstick(x) & Restaurant(y) & Restaurant(z)) -> (EcoFriendly(x,y) | MadeFromTrees(x,z)))", "all x.((Hopstick(x) & Restaurant(x)) -> (EcoFriendly(x) | MadeFromTrees(x)))"]}
{"id": "folio_train_1886", "nl": "If Chopsticks at restaurants are made from plastics or made from trees, then Chopsticks at restaurants are made from plastics and are eco-friendly.", "fol": "((IsMadeFromPlastics(ChopsticksAtRestaurants) | IsMadeFromTrees(ChopsticksAtRestaurants)) -> (IsMadeFromPlastics(ChopsticksAtRestaurants) & IsEcoFriendly(ChopsticksAtRestaurants)))", "prediction": ["all x.((ChopsticksAtRestaurants(x) & (MadeFromPlastics(x) | MadeFromTrees(x))) -> (MadeFromPlastics(x) & EcoFriendly(x)))", "all x.((Chopsticks(x) & (MadeFromPlastics(x) | MadeFromTrees(x))) -> (MadeFromPlastics(x) & EcoFriendly(x)))", "all x.((Chopstick(x) & (MadeFromPlastics(x) | MadeFromTrees(x))) -> (MadeFromPlastics(x) & EcoFriendly(x)))", "all x.((Chopstick(x) & (MadeFromPlastics(x) | MadeFromTrees(x))) -> (MadeFromPlastics(x) & EcoFriendly(x)))", "all x.((Chopsticks(x) & (MadeFromPlastics(x) | MadeFromTrees(x))) -> (MadeFromPlastics(x) & EcoFriendly(x)))", "all x.((ChopsticksAtRestaurants(x) & (MadeFromPlastics(x) | MadeFromTrees(x))) -> (MadeFromPlastics(x) & EcoFriendly(x)))", "all x.((Chopsticks(x) & (MadeFrom(x,plastics) | MadeFrom(x,trees))) -> (MadeFrom(x,plastics) & EcoFriendly(x)))", "all x.((ChopsticksAtRestaurants(x) & (MadeFromPolyester(x) | MadeFromTrees(x))) -> (MadeFromPlastics(x) & EcoFriendly(x)))", "all x.((Chopsticks(x) & (MadeFromPolyester(x) | MadeFromTrees(x))) -> (MadeFromPlastics(x) & EcoFriendly(x)))", "all x.((Chopstick(x) & (MadeFromPolyester(x) | MadeFromTrees(x))) -> (MadeFromPlastics(x) & EcoFriendly(x)))", "all x.((ChopsticksAtRestaurants(x) & (MadeFromPolyester(x) | MadeFromTrees(x))) -> (MadeFromPolyester(x) & EcoFriendly(x)))", "all x.((Chopstick(x) & (MadeFromPolyester(x) | MadeFromTrees(x))) -> (MadeFromPlastics(x) & EcoFriendly(x)))", "all x.((Chopstick(x) & (MadeFromPlastics(x) | MadeFromTrees(x))) -> EcoFriendly(x))", "all x.((Chopstick(x) & (MadeFromPlastics(x) | MadeFromTrees(x))) -> EcoFriendly(x))", "all x.((ChopsticksAtRestaurants(x) & (MadeFromPlastics(x) | MadeFromTrees(x))) -> (MadeFromPolyester(x) & EcoFriendly(x)))", "all x.((ChopsticksAtRestaurants(x) & (MadeFromPlastics(x) | MadeFromTrees(x))) -> (MadeFromPolyesters(x) & EcoFriendly(x)))"]}
{"id": "folio_train_1887", "nl": "Anything that is lazy is unproductive.", "fol": "all x.(IsLazy(x) -> IsUnproductive(x))", "prediction": ["all x.(Lazy(x) -> Unproductive(x))", "all x.((Lazy(x) & Lazy(x)) -> Unproductive(x))", "all x.((Lazy(x) & Unproductive(x)) -> Lazy(x))", "all x.((Lazy(x)) -> Unproductive(x))", "all x.((Lazy(x) & HasLazy(x)) -> Unproductive(x))", "all x.((Lazy(x) & Unproductive(x)) -> Unproductive(x))", "all x.((Lazy(x) -> Unproductive(x))", "all x.((Lazy(x) & -productive(x)) -> Unproductive(x))", "all x.((Lazy(x) & Fatal(x)) -> Unproductive(x))", "all x.((Lazy(x) & -Productive(x)) -> Unproductive(x))", "all x.((Lazy(x) & IsUnproductive(x)) -> Unproductive(x))", "all x.((Lazy(x) & HasLayers(x)) -> Unproductive(x))", "all x.((Lazy(x) & -Produced(x)) -> Unproductive(x))", "all x.((Lazy(x) & -Productive(x)) -> Unproductive(x))", "all x.((Lazy(x) & -Productive(x)) -> Unproductive(x))", "all x.((Lazy(x) & Productive(x)) -> Unproductive(x))"]}
{"id": "folio_train_1888", "nl": "No one unproductive is an energetic person.", "fol": "all x.(IsUnproductive(x) -> -IsEnergetic(x))", "prediction": ["-exists x.(Unproductive(x) & EnergeticPerson(x))", "all x.(Unproductive(x) -> EnergeticPerson(x))", "-exists x.(Unproductive(x) & Energetic(x))", "-all x.(Unproductive(x) -> EnergeticPerson(x))", "-exists x.(UnproductivePerson(x) & EnergeticPerson(x))", "-exists x.(Unproductive(x) & EnergyfulPerson(x))", "-exists x.(UnproductivePerson(x) & -EnergeticPerson(x))", "all x.(UnproductivePerson(x) -> EnergeticPerson(x))", "-exists x.(Unproductive(x) & Energyful(x))", "-exists x.(Unproductive(x) & -EnergeticPerson(x))", "-exists x.(UnproductivePerson(x) & EnergyfulPerson(x))", "-exists x.(UnproductivePerson(x) & Energetic(x))", "-all x.(Unproductive(x) -> Energetic(x))", "-all x.(Unproductive(x) -> EnergyfulPerson(x))", "-exists x.(Unproductive(x) & -Energetic(x))", "all x.(Unproductive(x) -> EnergyfulPerson(x))"]}
{"id": "folio_train_1889", "nl": "If something is a sloth, then it is lazy.", "fol": "all x.(IsSloth(x) -> IsLazy(x))", "prediction": ["all x.(Sloth(x) -> Lazy(x))", "all x.((Sloth(x) & Lazy(x)) -> Sloth(x))", "all x.((Sloth(x) & Lazy(x)) -> Lazy(x))", "all x.((Sloth(x) & Sloth(x)) -> Lazy(x))", "all x.((Sloth(x)) -> Lazy(x))", "all x.((Sloth(x) & Lazy(x)) -> HasSloth(x))", "all x.((Sloth(x) & Lazy(x)) -> -Sloth(x))", "all x.((Sloth(x) & HasLazy(x)) -> Lazy(x))", "all x.((Sloth(x) -> Lazy(x))", "all x.((Sloth(x) & Lazy(x)) -> Slaughter(x))", "all x.((Sloth(x) & Lazy(x)) -> Sloth(x))", "all x.((IsSloth(x) & Lazy(x)) -> Sloth(x))", "all x.((Sloth(x) | Lazy(x)) -> Sloth(x))", "all x.((Sloth(x) & Lazy(x)) -> -Lazy(x))", "all x.((Sloth(x) & Lazy(x)) -> Is(x))", "all x.((Sloth(x) & Lazy(x)) -> SitsIn(x))"]}
{"id": "folio_train_1890", "nl": "Some animals are sloths.", "fol": "exists x.(IsAnimal(x) & IsSloth(x))", "prediction": ["exists x.(Animal(x) & Sloth(x))", "exists x y.(Animal(x) & Sloth(y))", "exists x.(Animal(x) & Sloth(x))", "(exists x.(Animal(x) & Sloth(x)))", "exists x y.(Animal(x) & Sloth(y) & AnimatedBy(x,y))", "exists x.exists y.(Animal(x) & Sloth(y) & AnimatedBy(x,y))", "exist x.(Animal(x) & Sloth(x))", "exists x.exists y.(Animal(x) & Sloth(y))", "exists x.(Animal(x) & Sloth(x) & -Sloth(x))", "all x.(Animal(x) -> Sloth(x))", "exists x y.(Animal(x) & Sloth(y) & Animal(x) & AnimatedBy(x,y))", "exists x y.(Animal(x) & Sloth(y) & Animal(x))", "exists x y.(Animal(x) & Sloth(y) & InAnimal(x,y))", "exists x y.(Animal(x) & Sloth(y) & -Sloth(x))", "exists x.(Animal(x) & Slothe(x))", "exists x y.(Animal(x) & Sloth(y) & Animal(z) & -Sloth(z))"]}
{"id": "folio_train_1891", "nl": "Sid is not either an energetic person or a sloth.", "fol": "(-IsEnergetic(Sid) | IsSloth(Sid))", "prediction": ["all x.(Sid(x) -> (-EnergeticPerson(x) | Sloth(x)))", "all x.(Sid(x) -> (-EnergyPerson(x) | Sloth(x)))", "all x.(Sid(x) -> (-EnergisticPerson(x) | Sloth(x)))", "(-(Sid(Sid) & EnergeticPerson(Sid)) | Sloth(Sid)))", "all x.(Sid(x) -> (-EnergeticPerson(x) & -Sloth(x)))", "all x.(Sid(x) -> (-EnergyPerson(x) & -Sloth(x)))", "all x.(Sid(x) -> -(EnergeticPerson(x) | Sloth(x)))", "all x.(Sid(x) -> (-EnergisticPerson(x) & -Sloth(x)))", "-(Sid(Sid) & EnergeticPerson(Sid) & -Sloth(Sid))", "all x.(Sid(x) -> -(EnergyPerson(x) | Sloth(x)))", "(-(Sid(Sid) & Energetic(Sid)) | Sloth(Sid)))", "(-(EnergeticPerson(Sid) & -Sloth(Sid)))", "(-EnergisticPerson(Sid) & -Sloth(Sid))", "(-EnergyPerson(Sid) & -Sloth(Sid))", "(-EnergeticPerson(Sid) & -Sloth(Sid))", "all x.(Sid(x) -> (-Energetic(x) | Sloth(x)))"]}
{"id": "folio_train_1892", "nl": "Sid is an animal.", "fol": "IsAnimal(Sid)", "prediction": ["all x.(Sid(x) -> Animal(x))", "All x.(Sid(x) -> Animal(x))", "(Animal(Sid) & Animal(Sid))", "exists x.(Sid(x) & Animal(x))", "(Animal(Sid) & LivesIn(Sid))", "all x.(Sid(x) -> Animal(x))", "(Animal(Sid) & Animal(Sid))", "(Animal(Sid) & -Animal(Sid))", "(Animal(Sid) & LivesIn(Sid) & LivesIn(Sid))", "(Animal(Sid) -> Animal(Sid))", "All x.(Sid(x) -> Animal(x))", "(Animal(Sid) -> Animal(Sid))", "(Animal(Sid) & LivesIn(Sid,Sid))", "(Animal(Sid) & Animated(Sid))", "Sid is Animal(Sid)", "(Animal(Sid) & Breed(Sid))"]}
{"id": "folio_train_1893", "nl": "Sid is an energetic person and an animal.", "fol": "(IsEnergetic(Sid) & IsAnimal(Sid))", "prediction": ["all x.(Sid(x) -> (EnergeticPerson(x) & Animal(x)))", "(EnergeticPerson(Sid) & Animal(Sid))", "(EnergisticPerson(Sid) & Animal(Sid))", "all x.(Sid(x) -> (EnergisticPerson(x) & Animal(x)))", "all x.(Sid(x) -> (EnergyPerson(x) & Animal(x)))", "All x.(Sid(x) -> (EnergeticPerson(x) & Animal(x)))", "exists x.(Sid(x) & EnergeticPerson(x) & Animal(x))", "all x.(Sid(x) -> (EnergeticPerson(x) & Animal(x)))", "(EnergyPerson(Sid) & Animal(Sid))", "All x.(Sid(x) -> (EnergisticPerson(x) & Animal(x)))", "all x.(Sid(x) -> (EnergizedPerson(x) & Animal(x)))", "all x.(Sid(x) -> (Energetic(x) & Animal(x)))", "Sid is an energeticPerson(Sid) & Animal(Sid))", "Sid (EnergeticPerson(Sid) & Animal(Sid))", "(Energistic(Sid) & Animal(Sid))", "Sid is an energeticPersonAndAnimal(Sid)"]}
{"id": "folio_train_1894", "nl": "If Sid is either an animal or unproductive, then Sid is not an energetic person.", "fol": "((IsAnimal(Sid) | IsUnproductive(Sid)) -> -IsEnergetic(Sid))", "prediction": ["all x.((Sid(x) & (Animal(x) | Unproductive(x))) -> -EnergeticPerson(x))", "all x.((Animal(x) | Unproductive(x)) -> -EnergeticPerson(x))", "all x.((Sid(x) & (Animal(x) | Unproductive(x))) -> -EnergisticPerson(x))", "all x.((Sid(x) & (Animal(x) | Unproductive(x))) -> -EnergisticPerson(x))", "all x.((Animal(x) | Unproductive(x)) -> -EnergisticPerson(x))", "all x.((Animal(x) | Unproductive(x)) -> -EnergisticPerson(x))", "all x.((Sid(x) & (Animal(x) | Unproductive(x))) -> -EnergyPerson(x))", "all x.((Sid(x) & (Animal(x) | Unproductive(x))) -> -EnergyfulPerson(x))", "all x.((Animal(x) | Unproductive(x)) -> -EnergyPerson(x))", "all x.((Sid(x) & (Animal(x) | Unproductive(x))) -> -EnergizedPerson(x))", "all x.((Sid(x) & (Animal(x) | Unproductive(x))) -> -EnergicPerson(x))", "all x.((Animal(x) | Unproductive(x)) -> -EnergyfulPerson(x))", "all x.((Sid(x) & (Animal(x) | Unproductive(x))) -> -EnergisingPerson(x))", "all x.(((Animal(x) | Unproductive(x))) -> -EnergeticPerson(x))", "all x.((Animal(x) | Unproductive(x)) -> -EnergizedPerson(x))", "all x.((Sid(x) & (Animal(x) | Unproductive(x))) -> -EnergizingPerson(x))"]}
{"id": "folio_train_1895", "nl": "European soccer clubs can attend UCL, UEL and UECL.", "fol": "all x.(((IsEuropean(x) & IsSoccerClub(x)) -> EligibleToAttend(x,UEFAChampionsLeague)) | EligibleToAttend(x,UEFALeague) | EligibleToAttend(x,UEFACup))", "prediction": ["all x.(EuropeanSoccerClub(x) -> (AttendsUCL(x) | AttendsUEL(x) | AttendsUECL(x)))", "all x y.((EuropeanSoccerClub(x) & (UCL(y) | UEL(y) | UECL(y))) -> CanAttend(x,y))", "all x.(EuropeanSoccerClub(x) -> (Attends(x,UCL) | Attends(x,UEL) | Attends(x,UECL)))", "all x.((EuropeanSoccerClub(x) & (UCL(x) | UEL(x) | UECL(x))) -> CanAttend(x,UCL))", "all x.(EuropeanSoccerClub(x) -> (AttendsUCL(x) | AttendsUECL(x)))", "all x y z.((EuropeanSoccerClub(x) & (UCL(y) | UEL(y) | UECL(y))) -> CanAttend(x,y,z))", "all x y z.((EuropeanSoccerClub(x) & (UCL(y) | UEL(y) | UECL(z))) -> CanAttend(x,y,z))", "all x.((EuropeanSoccerClub(x) & (UCL(x) | UEL(x) | UECL(x))) -> CanAttend(x))", "all x.(EuropeanSoccerClub(x) -> (Attends(x,UCL) | Attends(x,EL) | Attends(x,UECL)))", "all x.((EuropeanSoccerClub(x) & (AttendsUCL(x) | AttendsUEL(x) | AttendsUECL(x))) -> CanAttend(x,UCL))", "all x.(EuropeanSoccerClub(x) -> (AttendsUCL(x) | AttendsULLEL(x) | AttendsUECL(x)))", "all x y z.((EuropeanSoccerClub(x) & (UCL(y) | UEL(y) | UECL(y))) -> CanAttend(x,y))", "all x y.((EuropeanSoccerClub(x) & (UCL(y) | UEL(y) | UECL(y))) -> Attends(x,y))", "all x.(EuropeanSoccerClub(x) -> (AttendsUCL(x) | AttendsULL(x) | AttendsUECL(x)))", "all x.((EuropeanSoccerClub(x) & (UCL(x) | UEL(x) | UECL(x))) -> CanAttend(x,UCL,UEL))", "all x.((EuropeanSoccerClub(x) & (UCL(x) | UEL(x) | UECL(x))) -> CanAttend(x,y))"]}
{"id": "folio_train_1896", "nl": "A soccer club eligible to attend UCL has a higher ranking than a soccer club eligible to attend UEL.", "fol": "all x y.((IsSoccerClub(x) & IsSoccerClub(y) & EligibleToAttend(x,UEFAChampionsLeague) & EligibleToAttend(y,UEFALeague)) -> HasHigherRankingThan(x,y))", "prediction": ["all x y.((SoccerClub(x) & SoccerClub(y) & EligibleToAttendUCL(x) & EligibleToAttendUEL(y)) -> HigherRanking(x,y))", "all x y.((SoccerClub(x) & SoccerClub(y) & EligibleToAttendUCL(x) & EligibleToAttendUEL(y)) -> HigherRanking(x,y))", "all x y.((SoccerClub(x) & SoccerClub(y) & EligibleToAttendUCL(x)) -> HigherRanking(x,y))", "all x y.((SoccerClub(x) & SoccerClub(y) & EligibleToAttendUCL(x)) -> HigherRanking(x,y))", "all x y.((SoccerClub(x) & SoccerClub(y) & EligibleToAttendUCL(x) & EligibleToAttendUCL(y)) -> HigherRanking(x,y))", "all x y.((SoccerClub(x) & SoccerClub(y) & EligibleToAttend(x,UCL) & EligibleToAttend(y,UEL)) -> HigherRanking(x,y))", "all x y.((SoccerClub(x) & SoccerClub(y) & EligibleForAttendUCL(x) & EligibleForAttendUEL(y)) -> HigherRanking(x,y))", "all x y.((SoccerClub(x) & SoccerClub(y) & EligibleToAttendUCL(x) & EligibleToAttendULL(y)) -> HigherRanking(x,y))", "all x y.((SoccerClub(x) & EligibleToAttendUCL(x) & SoccerClub(y) & EligibleToAttendUEL(y)) -> HigherRanking(x,y))", "all x y.((SoccerClub(x) & SoccerClub(y) & EligibleToAttendUCL(x) & EligibleToAttendUEL(y)) -> HigherRanking(x))", "all x y.((SoccerClub(x) & SoccerClub(y) & EligibleToAttend(x,UCL) & EligibleToAttend(y,UEL)) -> HigherRanking(x))", "all x.((SoccerClub(x) & EligibleToAttendUCL(x)) -> HigherRanking(x))", "all x y.((SoccerClub(x) & SoccerClub(y) & EligibleToAttend(x,UCL)) -> HigherRanking(x,UEL))", "all x y.((SoccerClub(x) & SoccerClub(y) & EligibleForAttendsUCL(x)) -> HigherRanking(x,y))", "all x y.((SoccerClub(x) & SoccerClub(y) & EligibleToAttendUCL(x) & EligibleToAttendUEL(y)) -> HigherRanking(x))", "all x y.((SoccerClub(x) & SoccerClub(y) & EligibleForAttendUCL(x)) -> HigherRanking(x,y))"]}
{"id": "folio_train_1897", "nl": "A soccer club eligible to attend UEL has a higher ranking than a soccer club eligible to attend UECL.", "fol": "all x y.((IsSoccerClub(x) & IsSoccerClub(y) & EligibleToAttend(x,UEFALeague) & EligibleToAttend(y,UEFACup)) -> HasHigherRankingThan(x,y))", "prediction": ["all x y.((SoccerClub(x) & SoccerClub(y) & EligibleToAttendUEL(x) & EligibleToAttendUECL(y)) -> HigherRanking(x,y))", "all x y.((SoccerClub(x) & SoccerClub(y) & EligibleToAttendUEL(x)) -> HigherRanking(x,y))", "all x y.((SoccerClub(x) & SoccerClub(y) & EligibleForUEL(x) & EligibleForUECL(y)) -> HigherRanking(x,y))", "all x y.((SoccerClub(x) & EligibleToAttendUEL(x) & SoccerClub(y) & EligibleToAttendUECL(y)) -> HigherRanking(x,y))", "all x y.((SoccerClub(x) & SoccerClub(y) & EligibleToAttendUEL(x) & EligibleToAttendUECL(y)) -> HigherRanking(x))", "all x y.((SoccerClub(x) & SoccerClub(y) & EligibleToAttend(x,UEL) & EligibleToAttend(y,UECL)) -> HigherRanking(x,y))", "all x y.((SoccerClub(x) & SoccerClub(y) & EligibleToAttendUEL(x) & EligibleToAttendUECL(y)) -> HigherRating(x,y))", "all x.((SoccerClub(x) & EligibleToAttendUEL(x)) -> HigherRanking(x))", "all x y.((SoccerClub(x) & SoccerClub(y) & EligibleToAttendUEL(x) & EligibleToAttendUnionEligibleToAttendUECL(y)) -> HigherRanking(x,y))", "all x y.((SoccerClub(x) & SoccerClub(y) & EligibleToAttendUEL(x)) -> HigherRankingThan(x,y))", "all x y.((SoccerClub(x) & SoccerClub(y) & EligibleForAttendUEL(x) & EligibleForAttendUECL(y)) -> HigherRanking(x,y))", "all x y z.((SoccerClub(x) & SoccerClub(y) & SoccerClub(z) & EligibleToAttendUEL(x) & EligibleToAttendUECL(y,z)) -> HigherRanking(x,y,z))", "all x y.((SoccerClub(x) & SoccerClub(y) & EligibleForUEL(x)) -> HigherRanking(x,y))", "all x y.((SoccerClub(x) & SoccerClub(y) & EligibleToAttendUEL(x)) -> HigherRanking(x))", "all x y.((SoccerClub(x) & SoccerClub(y) & EligibleToAttend(x,UEL) & EligibleToAttend(y,UECL)) -> HigherRanking(x))", "all x y.((SoccerClub(x) & SoccerClub(y) & EligibleToAttendUEL(x) & EligibleToAttendUel(y)) -> HigherRanking(x,y))"]}
{"id": "folio_train_1898", "nl": "Manchester United and Machester City are both European soccer clubs.", "fol": "(IsEuropean(ManchesterUnited) & IsSoccerClub(ManchesterUnited) & IsEuropean(Manchestercity) & IsSoccerClub(Manchestercity))", "prediction": ["(EuropeanSoccerClub(ManchesterUnited) & EuropeanSoccerClub(MachesterCity))", "all x.((ManchesterUnited(x) & MachesterCity(x)) -> EuropeanSoccerClub(x))", "(EuropeanSoccerClub(ManchesterUnderground) & EuropeanSoccerClub(MachesterCity))", "all x y.((ManchesterUnited(x) & MachesterCity(y)) -> (EuropeanSoccerClub(x) & EuropeanSoccerClub(y)))", "all x.((ManchesterUnited(x) & MachesterCity(x)) -> (EuropeanSoccerClub(x) & EuropeanSoccerClub(x)))", "all x.((ManchesterUnited(x) | MachesterCity(x)) -> EuropeanSoccerClub(x))", "(EuropeanSoccerClub(ManchesterUnderwood) & EuropeanSoccerClub(MachesterCity))", "all x.((ManchesterUnderground(x) & MachesterCity(x)) -> EuropeanSoccerClub(x))", "(EuropeanSoccerClub(ManchesterUnited(Manchester) & EuropeanSoccerClub(MachesterCity))", "((ManchesterUnited(Manchester) & MachesterCity(Machester)) -> EuropeanSoccerClub(ManchesterUnited(Manchester) & MachesterCity(Machester))", "(EuropeanSoccerClubs(ManchesterUnited) & EuropeanSoccerClub(MachesterCity))", "((ManchesterUnited(Manchester) & MachesterCity(Machester)) -> EuropeanSoccerClub(ManchesterUnited,EuropeanSoccerClub))", "((ManchesterUnited(Manchester) & MachesterCity(Manchester)) -> EuropeanSoccerClub(ManchesterUnited(Manchester) & MachesterCity(Manchester)))", "(EuropeanSoccerClub(ManchesterUnder) & EuropeanSoccerClub(MachesterCity))", "(EuropeanSoccerClub(ManchesterUnited) & EuropeanSoccerClub(MamchesterCity))", "((ManchesterUnited(Manchester) & MachesterCity(Manchester)) -> EuropeanSoccerClub(ManchesterUnited,Machester))"]}
{"id": "folio_train_1899", "nl": "Manchester United is eligible to attend UEL next season.", "fol": "EligibleToAttend(ManchesterUnited,UEFALeague)", "prediction": ["all x.((ManchesterUnited(x) & EligibleToAttendUELNextSeason(x)) -> EligibleToAttendUELNextSeason(x))", "all x.((ManchesterUnited(x) & EligibleForAttendance(x,UEL)) -> EligibleForAttendance(x,UEL))", "all x.((ManchesterUnited(x) & EligibleToAttendUELNextSeason(x)) -> EligibleToAttendUELNextSeason(x))", "all x.((ManchesterUnited(x) & EligibleToAttendUELNextSeason(x)) -> EligibleToAttendUELNextSeason(x))", "all x.((ManchesterUnited(x) & EligibleToAttendNextSeason(x)) -> EligibleToAttendNextSeason(x))", "all x.(ManchesterUnited(x) -> EligibleToAttendUELNextSeason(x))", "all x.((ManchesterUnderwood(x) & EligibleForAttendance(x,UEL)) -> EligibleForAttendance(x,UEL))", "all x.((ManchesterUnited(x) & EligibleToAttendUELNextSeason(x)) -> EligibleForAttendUELNextSeason(x))", "all x.((ManchesterUnderground(x) & EligibleForAttendance(x,UEL)) -> EligibleForAttendance(x,UEL))", "all x.((Manchester United(x) & EligibleForAttendance(x,UEL)) -> EligibleForAttendance(x,UEL))", "all x y.((Manchester United(x) & UEL(y)) -> EligibleToAttend(x,y))", "all x.((ManchesterUnited(x) & EligibleToAttend(x,UEL)) -> NextSeason(x))", "all x.((ManchesterUnited(x) & EligibleForAttendance(x,UEL)) -> NextSeason(x))", "all x.((ManchesterUnited(x) & EligibleToAttendUELNextSeason(x)) -> EligibleForAttendUELNextSeason(x))", "all x y.((Manchester United(x) & UEL(y)) -> EligibleToAttendNextSeason(x,y))", "all x.(ManchesterUnited(x) -> EligibleToAttendUELNextSeason(x))"]}
{"id": "folio_train_1900", "nl": "Manchester City is eligible to attend UCL next season.", "fol": "EligibleToAttend(Manchestercity,UEFAChampionsLeague)", "prediction": ["all x.((ManchesterCity(x) & EligibleToAttendUCLNextSeason(x)) -> EligibleToAttendUCLNextSeason(x))", "all x y.((ManchesterCity(x) & UCL(y)) -> EligibleToAttend(x,y))", "all x.((ManchesterCity(x) & EligibleToAttendUCLNextSeason(x)) -> EligibleToAttendUCLNextSeason(x))", "all x.((ManchesterCity(x) & EligibleToAttendUCLNextSeason(x)) -> EligibleToAttendUCLNextSeason(x))", "all x.((ManchesterCity(x) & EligibleForUCLNextSeason(x)) -> EligibleForUCLNextSeason(x))", "all x.((ManchesterCity(x) & EligibleToAttendUCLNextSeason(x)) -> EligibleToAttendUCLNextSeason(x))", "all x y.((ManchesterCity(x) & UCL(y)) -> EligibleToAttendNextSeason(x,y))", "all x.((ManchesterCity(x) & EligibleToAttendUCLNextSeason(x)) -> EligibleToAttendUCLNextSeason(x))", "all x.((ManchesterCity(x) & EligibleToAttendUCLNextSeason(x)) -> Eligible(x))", "all x y.((ManchesterCity(x) & UCL(y)) -> EligibleForAttendance(x,y))", "all x.((ManchesterCity(x) & EligibleToAttendUCLNextSeason(x)) -> EligibleToAttendUCLNextSeason(x))", "all x.((ManchesterCity(x) & EligibleForAttendance(x,UCL)) -> EligibleForAttendance(x,UCL))", "all x.((ManchesterCity(x) & AttendsUCLNextSeason(x)) -> Eligible(x))", "all x.((ManchesterCity(x) & EligibleToAttend(x,UCL)) -> NextSeason(x))", "all x.((ManchesterCity(x) & UCLNextSeason(x)) -> EligibleToAttend(x,y))", "all x.((ManchesterCity(x) & AttendsUCLNextSeason(x)) -> Eligible(x))"]}
{"id": "folio_train_1901", "nl": "Manchester City has a higher ranking than Manchester United.", "fol": "HasHigherRankingThan(Manchestercity,ManchesterUnited)", "prediction": ["all x y.((ManchesterCity(x) & ManchesterUnited(y)) -> HigherRanking(x,y))", "all x y.((ManchesterCity(x) & ManchesterUndersigned(y)) -> HigherRanking(x,y))", "all x y.((Manchester(x) & ManchesterUnited(y)) -> HigherRanking(x,y))", "all x.((ManchesterCity(x) & ManchesterUnited(x)) -> HigherRanking(x,y))", "all x y.((ManchesterCity(x) & United(y)) -> HigherRanking(x,y))", "all x.((ManchesterCity(x) & ManchesterUnited(x)) -> HigherRanking(x))", "all x y.((ManchesterCity(x) & ManchesterUnder(y)) -> HigherRanking(x,y))", "all x y.((ManchesterCity(x) & ManchesterUnited(y)) -> HigherRating(x,y))", "all x.((ManchesterCity(x) & ManchesterUndersigned(x)) -> HigherRanking(x,y))", "all x y z.((ManchesterCity(x) & ManchesterUnited(y) & Manchester(z)) -> HigherRanking(x,y,z))", "all x y.((ManchesterCity(x) & ManchesterUnderground(y)) -> HigherRanking(x,y))", "all x y.((ManchesterCity(x) & ManchesterUnderwood(y)) -> HigherRanking(x,y))", "all x y.((Manchester City(x) & ManchesterUnited(y)) -> HigherRanking(x,y))", "all x.((ManchesterCity(x) & ManchesterUndersigned(x)) -> HigherRanking(x))", "all x y.((Manchester(x) & ManchesterUndersigned(y)) -> HigherRanking(x,y))", "all x y z.((ManchesterCity(x) & ManchesterUnited(y) & Manchester(z)) -> HigherRanking(x,z))"]}
{"id": "folio_train_1902", "nl": "If a person coach a football club, the person is a football coach.", "fol": "all x y.((Coaches(x,y) & IsFootballClub(y)) -> IsFootballCoach(x))", "prediction": ["all x y.((Person(x) & FootballClub(y) & Coaches(x,y)) -> FootballCoach(x))", "all x.((Person(x) & CoachesFootballClub(x)) -> FootballCoach(x))", "all x y.((Person(x) & FootballClub(y) & Coaches(x,y)) -> FootballCoach(x,y))", "all x y z.((Person(x) & FootballClub(y) & Coaches(x,y) & FootballClub(z)) -> FootballCoach(x))", "all x y.((Person(x) & FootballClub(y) & Coach(x,y)) -> FootballCoach(x))", "all x y z.((Person(x) & FootballClub(y) & Coaches(x,y)) -> FootballCoach(x))", "all x.(CoachesFootballClub(x) -> FootballCoach(x))", "all x.(Coaches(x,FootballClub) -> FootballCoach(x))", "all x y.((Person(x) & FootballClub(y) & Coaches(x,y)) -> FootballChair(x))", "all x y z.((Person(x) & FootballClub(y) & Coaches(x,y) & FootballClub(z)) -> FootballCoach(x,z))", "all x y z.((Person(x) & FootballClub(y) & Coaches(x,y) & FootballClub(z)) -> FootballCoach(x,y))", "all x y z.((Person(x) & FootballClub(y) & Coaches(x,y) & FootballClub(z)) -> FootballCoach(x,y,z))", "all x y z.((Person(x) & FootballClub(y) & Coach(x,y) & FootballClub(z)) -> FootballCoach(x))", "all x y.((Person(x) & FootballClub(y) & Coaches(x,y)) -> FootballCourt(x))", "all x y z.((Person(x) & FootballClub(y) & Coaches(x,y)) -> FootballCoach(x,z))", "all x y.((Person(x) & FootballClub(y) & Coaches(x,y)) -> FootballCamera(x))"]}
{"id": "folio_train_1903", "nl": "If a person has a position in a club for a position in a year, and the club is in NFL in the same year, the person plays in NFL.", "fol": "all z.((PlaysFor(x,y) & NFLTeamInYear(y,z) & IsInTeam(x,z)) -> PlaysInNFL(x))", "prediction": ["all x y.((Person(x) & Club(y) & PositionInYear(x,y) & PositionInYear(x,y)) -> PlaysInNFL(x))", "all x y.((Person(x) & Club(y) & PositionInYear(x,y) & PositionInYear(y,x)) -> PlaysInNFL(x))", "all x y.((Person(x) & Club(y) & PositionInYear(x,y) & PositionInYear(y) & NFL(y)) -> PlaysInNFL(x))", "all x y.((Person(x) & Club(y) & PositionInYear(x,y) & PositionInYear(x,y) & NFL(y)) -> PlaysInNFL(x))", "all x y z.((Person(x) & Club(y) & Position(z) & InYear(y,z) & InYear(z,y)) -> PlaysInNFL(x))", "all x y.((Person(x) & Club(y) & PositionInYear(x,y) & PositionInYear(y)) -> PlaysInNFL(x))", "all x y z.((Person(x) & Club(y) & Position(z) & InYear(y,z) & InYear(z,y) & InYear(y,z)) -> PlaysInNFL(x))", "all x y.((Person(x) & Club(y) & PositionInYear(x,y) & PositionInYear(y,x)) -> PlaysInNFL(x,y))", "all x y z.((Person(x) & Club(y) & Position(z) & InYear(y,z) & InYear(y,z)) -> PlaysInNFL(x))", "all x y z.((Person(x) & Club(y) & Position(z) & PositionInYear(z) & InYear(y,z)) -> PlaysInNFL(x))", "all x y.((Person(x) & Club(y) & PositionInYear(x,y) & PositionInYear(y) & NFL(y)) -> PlaysInNFL(x,y))", "all x y.((Person(x) & Club(y) & PositionInYear(x,y) & PositionInYear(x,y)) -> PlaysInNFL(x,y))", "all x y.((Person(x) & Club(y) & PositionInYear(x,y) & PositionInYear(y,x) & NFL(y)) -> PlaysInNFL(x))", "all x y.((Person(x) & Club(y) & PositionInYear(x,y) & PositionInYear(y)) -> PlaysInNFL(x,y))", "all x y z.((Person(x) & Club(y) & Position(z) & InYear(y,z) & InYear(z,y) & InYear(z,y)) -> PlaysInNFL(x))", "all x y z.((Person(x) & Club(y) & Position(z) & PositionInYear(z) & InYear(y,z) & InYear(z,y)) -> PlaysInNFL(x))"]}
{"id": "folio_train_1904", "nl": "Minnesota Vikings is a football club.", "fol": "IsFootballClub(Minnesota_Vikings)", "prediction": ["all x.(Violins(x) -> FootballClub(x))", "all x.((MinnesotaViolins(x) & FootballClub(x)) -> FootballClub(x))", "all x.((MinneapolisViolins(x) & FootballClub(x)) -> FootballClub(x))", "all x.(MinnesotaViolins(x) -> FootballClub(x))", "all x.(MinneapolisViolins(x) -> FootballClub(x))", "all x.(Vikings(x) -> FootballClub(x))", "(FootballClub(MinneapolisViolins) & FootballClub(MinneapolisViolins))", "all x.(Violin(x) -> FootballClub(x))", "all x.((Violins(x) & Minnesota(x)) -> FootballClub(x))", "all x y.((MinneapolisViolins(x) & FootballClub(y)) -> FootballClub(x))", "all x y.((MinneapolisViolins(x) & FootballClub(y)) -> FootballClub(x,y))", "(FootballClub(MinneapolisVikings) & FootballClub(MinneapolisVikings))", "all x.((Violin(x) & Minnesota(x)) -> FootballClub(x))", "(FootballClub(MinneapolisViolins) & -FootballClub(MinneapolisViolins))", "(FootballClub(MinnesotaViolins) & FootballClub(MinneapolisViolins))", "all x.((MinnesotaViolins(x) & FootballClub(x)) -> Football(x))"]}
{"id": "folio_train_1905", "nl": "Dennis Green coached Minnesota Vikings.", "fol": "Coaches(Dennis_Green,Minnesota_Vikings)", "prediction": ["Dennis Green coached Minnesota Vikings.", "(CoachesMinneapolisViolins(DennisGreen) | CoachesMinneapolisViolins(DennisGreen)))", "(CoachesMinneapolisViolins(DennisGreen) & CoachesMinneapolisViolins(DennisGreen))", "(Coaches(DennisGreen,MinnesotaViolins) & Coaches(DennisGreen,MinnesotaViolins))", "(Coaches(DennisGreen,MinnesotaViolins) & -Coaches(DennisGreen,MinnesotaViolins))", "(CoachesMinneapolisViolins(DennisGreen,MN) & CoachesMinneapolisViolins(DennisGreen,MN))", "(Coaches(DennisGreen,MinnesotaViolins) & coached(DennisGreen,MinnesotaViolins))", "(Coaches(DennisGreen,MinnesotaViolins) & Coaches(DennisGreen,MinneapolisViolins))", "(Coaches(DennisGreen,MinnesotaVikings) & Coaches(DennisGreen,MinnesotaVikings))", "(CoachesMinneapolisViolins(DenisGreen) | CoachesMinneapolisViolins(DenisGreen)))", "(Coaches(DennisGreen,MinnesotaViolins) & -Coaches(DennisGreen,MinneapolisViolins))", "Dennis Green coached MinnesotaViolins.", "(Coaches(DennisGreen, MinnesotaViolins) & Coaches(DennisGreen, MinnesotaViolins))", "(CoachesMinneapolisViolins(DennisGreen) & coachedMinneapolisViolins(DennisGreen))", "(CoachesMinneapolisViolins(DennisGreen) & MinnesotaViolins(DennisGreen))", "(Coaches(DennisGreen, MinnesotaViolins) & Coaches(DennisGreen,MinnesotaViolins))"]}
{"id": "folio_train_1906", "nl": "Cris Carter had 13 touchdown receptions.", "fol": "HadTouchDownReceptions(Cris_Carter,T13)", "prediction": ["all x.((CrissCarter(x) & HasTaskback(x,13)) -> HasTaskback(x,13))", "all x.((CrissCarter(x) & HasTaskback(x,13)) -> HasTaskback(x))", "All x.(CrissCarter(x) -> HadTaskbackReceptions(x,13))", "All x.(CrissCarter(x) -> HadTailingReceptions(x,13))", "All x.(CrissCarter(x) -> HasTentacleReceptions(x,13))", "all x.(CrissCarter(x) -> HadTaskbackReceptions(x,13))", "all x.((CrissCarter(x) & HasTaskback(x,13)) -> HasReception(x,13))", "All x.(CrissCarter(x) -> HadTentacleReceptions(x,13))", "all x.(CrisCris Carter(x) -> HadTaskbackReceptions(x,13))", "All x.(CrissCarter(x) -> HadTentainmentReceptions(x,13))", "All x.(CrissCarter(x) -> Had13TailingReceptions(x))", "All x.(CrissCarter(x) -> HasTaskbackReceptions(x,13))", "all x.((CrissCarter(x) & HasTaskback(x,13)) -> Has(x,13))", "all x.((CrissCarter(x) & HasTaskback(x,13)) -> HasTaskback(x,3))", "All x.(CrissCarter(x) -> HasTentainmentReceptions(x,13))", "CrisCarter had13 touchdownReceptions(cris)"]}
{"id": "folio_train_1907", "nl": "Minnesota Vikings was in the National Football League in 1997.", "fol": "NFLTeamInYear(Minnesota_Vikings,Y1997)", "prediction": ["all x y.((MinneapolisViolins(x) & NationalFootballLiga(y)) -> In(x,y))", "all x y.((MinneapolisViolins(x) & NationalFootballLeague(y)) -> In(x,y))", "all x y.((MinneapolisViolins(x) & NationalFootballLion(y)) -> In(x,y))", "all x y.((MinneapolisViolins(x) & NationalFootballLeague(y) & In(x,y)) -> In(x,y))", "all x y.((MinnesotaViolins(x) & NationalFootballLeague(y)) -> In(x,y))", "all x y.((MinnesotaViolins(x) & NationalFootballLiga(y)) -> In(x,y))", "all x y.((MinnesotaViolins(x) & NationalFootballLion(y)) -> In(x,y))", "all x y.((MinneapolisViolins(x) & NationalFootballLiga(y) & In(x,y)) -> In(x,y))", "all x y z.((MinneapolisViolins(x) & NationalFootballLiga(y) & 1997(z)) -> In(x,y,z))", "all x y z.((MinneapolisViolins(x) & NationalFootballLion(y) & 1997(z)) -> In(x,y,z))", "All x y.((MinneapolisViolins(x) & NationalFootballLeague(y)) -> In(x,y))", "All x y.((MinneapolisViolins(x) & NationalFootballLiga(y)) -> In(x,y))", "all x y.((MinneapolisViolins(x) & NationalFootballLower(y)) -> In(x,y))", "all x y.((MinneapolisViolins(x) & NationalFootballLeague(y)) -> InIn(x,y))", "all x y.((MinnesotaViolins(x) & NationalFootballLeague(y)) -> InIn(x,y))", "all x.(MinneapolisViolins(x) -> InNationalFootballLiga(x,1997))"]}
{"id": "folio_train_1908", "nl": "John Randle was Minnesota Vikings defensive tackle in 1997.", "fol": "(HasPosition(John_Randle,Defensive_tackle) & IsInTeam(John_Randle,Y1997) & PlaysFor(John_Randle,Minnesota_Vikings))", "prediction": ["All x.((JohnRandle(x) & MinnesotaViolins(x)) -> DefensiveDuck(x,1997))", "All x.((JohnRandle(x) & MinnesotaVikings(x)) -> DefensiveDuck(x,1997))", "All x.((JohnRandle(x) & MinnesotaViolins(x)) -> DefensiveDach(x,1997))", "All x.((JohnRandle(x) & MinnesotaVikings(x)) -> DefensiveDach(x,1997))", "All x.((JohnRandle(x) & MinnesotaViolins(x)) -> DefensiveDachIn97(x))", "All x.((JohnRandle(x) & MinnesotaViolins(x)) -> DefensiveDefensiveDefensiveIn97(x))", "All x.((JohnRandle(x) & MinnesotaVikings(x)) -> DefensiveDachIn97(x))", "All x.((JohnRandle(x) & MinnesotaVikings(x)) -> DefensiveDefensiveDefensiveIn97(x))", "All x.((JohnRandle(x) & MinnesotaViolins(x)) -> DefensiveDefensiveDefensive(x,1997))", "All x.((JohnRandle(x) & MinnesotaViolins(x)) -> DefensiveDuck(x))", "John Randle was MinnesotaViolinsDefensiveDuck(John,1997).", "All x.((JohnRandle(x) & MinnesotaVikings(x)) -> DefensiveDuck(x))", "All x.((JohnRandle(x) & MinnesotaViolins(x)) -> DefensiveDock(x,1997))", "All x.((JohnRandle(x) & MinnesotaVikings(x)) -> DefensiveDefensiveDefensive(x,1997))", "All x.((JohnRandle(x) & MinnesotaVikings(x)) -> DefensiveDock(x,1997))", "All x.((JohnRandle(x) & MinnesotaViolins(x)) -> DefensiveDefensive(x,1997))"]}
{"id": "folio_train_1909", "nl": "Dennis Green is a football coach.", "fol": "IsFootballCoach(Dennis_Green)", "prediction": ["all x.((FootballCoach(x) & DennisGreen(x)) -> FootballCoach(x))", "all x.((DennisGreen(x) & FootballCoach(x)) -> Coach(x))", "all x.((FootballCoach(x) & DennisGreen(x)) -> Coach(x))", "(FootballCoach(DennisGreen)", "all x.(FootballCoach(x) -> DennisGreen(x))", "all x.((DennisGreen(x) & FootballCoach(x)) -> FootballCoach(x))", "all x.((FootballCoach(x) & DennisGreen(x)) -> Football(x))", "All x.((DennisGreen(x) & FootballCoach(x)) -> Coach(x))", "(FootballCoach(DennisGreen) & -FootballCoach(DennisGreen))", "Dennis Green is a football coach.", "(FootballCoach(DennisGreen) & FootballCoach(DennisGreen))", "(FootballCoach(DennisGreen) & Coach(DennisGreen))", "(FootballCoach(DennisGreen))", "all x.((DennisGreen(x) & FootballCoach(x)) -> Coaching(x))", "all x.((DennisGreen(x) & FootballCoach(x)) -> Trains(x))", "all x.((DennisGreen(x) & FootballCoach(x)) -> Is(x,y))"]}
{"id": "folio_train_1910", "nl": "John Randle didn't play in the National Football League.", "fol": "-PlaysInNFL(John_Randle)", "prediction": ["(-exists x.(JohnRandle(x) & PlaysIn(x,NationalFootballLol)))", "(-PlayedInNationalFootballLower(JohnRandle))", "(-exists x.(JohnRandle(x) & PlayedIn(x,NationalFootballLol)))", "(-exists x.(JohnRandle(x) & PlaysIn(x,NationalFootballLower)))", "John Randle didn't play in the National Football League.", "(-exists x.(JohnRandle(x) & PlayedIn(x,NationalFootballLower)))", "(-exists x.(JohnRandle(x) & PlaysIn(x,NationalFootballLeague)))", "(-exists x.(JohnRandle(x) & PlayedIn(x,NationalFootballLeague)))", "(-exists x.(JohnRandle(x) & PlaysIn(x,NationalFootballLiga)))", "(-PlayedInNationalFootballLol(JohnRandle))", "(-exists x.(JohnRandle(x) & PlayedIn(x,NationalFootballLiga)))", "(-exists x.(JohnRandle(x) & PlaysIn(x,NationalFootballLion)))", "(-exists x.(JohnRandle(x) & PlaysIn(x,NationalFootballLoad)))", "John Randle -PlayedInNationalFootballLol(JohnRandle,NationalFootballLol))", "(-PlayedInNFL(JohnRandle))", "(-exists x.(JohnRandle(x) & PlayedIn(x,NationalFootballLion)))"]}
{"id": "folio_train_1911", "nl": "Cris Carter played for Minnesota Vikings.", "fol": "PlaysFor(Cris_Carter,Minnesota_Vikings)", "prediction": ["(PlayedFor(CrissCarter,MinnesotaViolins) -> PlayedFor(CrissCarter,MinnesotaViolins))", "(PlayedFor(CrissCarter,MinnesotaVikings) -> PlayedFor(CrissCarter,MinnesotaVikings))", "(PlayedFor(CrissCarter,MinnesotaViolins) & MinnesotaViolins(CrissCarter,MinnesotaViolins))", "(PlayedFor(CrissCarter,MinnesotaViolins) & MinnesotaViolins(CrissCarter))", "(PlayedFor(CrissCarter,MinnesotaViolins) & MinnesotaViolins(CrissCarter,Minnesota))", "(PlayedFor(CrissCarter,MinnesotaViolins) -> PlayedFor(CrissCarter,MinneapolisViolins))", "(PlayedForVikings(CrissCarter,Minnesota) & MinnesotaVikings(CrissCarter,Minnesota))", "(PlayedFor(CrissCarter,MinnesotaViolins))", "(PlayedFor(CrissCarter,MinnesotaVikings) -> PlayedFor(CrissCarter,MinneapolisVikings))", "(PlayedFor(CrissCarter,MinnesotaVikings) & MinnesotaVikings(CrissCarter,MinnesotaVikings))", "(PlayedFor(CrissCarter,MinnesotaVikings) -> PlayedFor(CrissCarter,MinnesotaViolins))", "(PlayedFor(CrissCarter,MinnesotaVikings) & MinnesotaVikings(CrissCarter,Minnesota))", "all x.(Cris(x) -> PlayedForMinnesotaViolins(x))", "(PlayedFor(CrissCarter,MinnesotaVikings) & MinnesotaVikings(CrissCarter))", "(PlayedFor(CrissCarter,MinnesotaVikings) -> PlayedFor(CrissCarter,MinnesotaVikers))", "(PlayedFor(CrissCarter,MinnesotaViolins) -> PlayedFor(CrissCarter,MinnesotaVikings))"]}
{"id": "folio_train_1912", "nl": "All cats are cute.", "fol": "all x.(IsCat(x) -> IsCute(x))", "prediction": ["all x.(Cat(x) -> Cute(x))", "all x.(Kat(x) -> Cute(x))", "all x y.((Cat(x) & Cat(y)) -> Cute(x))", "all x.exists y.(Cat(x) & Cat(y) & Cute(x))", "all x.exists y.(Cat(x) & Cat(y) & Cute(x,y))", "all x y.((Cat(x) & Cat(y)) -> Cute(x,y))", "(all x.(Cat(x) -> Cute(x)))", "exists x.(Cat(x) & Cute(x))", "-all x.(Cat(x) -> Cute(x))", "all x.(Cat(x) -> Cute(x))", "all x.(Cat(x) -> CUTE(x))", "all x.exists y.(Cat(x) & Cat(y) & Cute(y))", "all x.(Kit(x) -> Cute(x))", "all x.(Cat(x) -> Chic(x))", "all x.(Kitty(x) -> Cute(x))", "(all x.(Cat(x) -> Cute(x))"]}
{"id": "folio_train_1913", "nl": "Nothing that barks is lovely. ", "fol": "all x.(Barks(x) -> -IsLovely(x))", "prediction": ["all x.(Barks(x) -> Lovely(x))", "all x.((Barks(x) & -Barks(x)) -> Lovely(x))", "-exists x.(Barks(x) & Lovely(x))", "all x.((Barks(x) & -Lovely(x)) -> -Lovely(x))", "all x.((Barks(x) & -Lovely(x)) -> Lovely(x))", "all x.((Barks(x) & -Beautiful(x)) -> -Lovely(x))", "all x.((Barks(x) & -(Barks(x) | Barks(x))) -> Lovely(x))", "all x.((Barks(x) & -Beautiful(x)) -> Lovely(x))", "all x.((Barks(x) & -Beautiful(x)) -> -Beautiful(x))", "all x.((Barks(x) & -Pleasing(x)) -> Lovely(x))", "all x.((Barks(x) & Lovely(x)) -> -Barks(x))", "all x.((Barks(x) & Lovely(x)) -> -(Barks(x) & Lovely(x)))", "all x.((Barks(x) & -Lovely(x)) -> -Barks(x))", "all x.((Barks(x) & -Beautiful(x)) -> -Barks(x))", "all x.((Barks(x) & -(Barks(x) & Lovely(x))) -> Lovely(x))", "all x.((Barks(x) & -Pleasing(x)) -> -Lovely(x))"]}
{"id": "folio_train_1914", "nl": "If something is a dog, then it barks.", "fol": "all x.(IsDog(x) -> Barks(x))", "prediction": ["all x.(Dog(x) -> Barks(x))", "all x.((Dog(x) & Barks(x)) -> Dog(x))", "all x.((Dog(x) & Barks(x)) -> CanDog(x))", "all x.((Dog(x) & Bark(x)) -> Barks(x))", "all x.((Pork(x) & Barks(x)) -> Dog(x))", "all x.((Dog(x) & Barks(x)) -> Barks(x))", "all x.((Dog(x)) -> Barks(x))", "all x.((Dog(x) & Barks(x)) -> Animal(x))", "all x.((Dog(x) | Barks(x)) -> Dog(x))", "all x.((Dog(x) & Barks(x)) -> HasDog(x))", "all x.((Org(x) & Dog(x)) -> Barks(x))", "all x.((Dog(x) & Barks(x)) -> IsDog(x))", "all x y.((Dog(x) & Dog(y)) -> Barks(x))", "all x.((Dog(x) & Barks(x)) -> CanDo(x))", "all x.((Dog(x) -> Barks(x))", "exists x.(Dog(x) & Barks(x))"]}
{"id": "folio_train_1915", "nl": "Grace is either a cat and a dog, or neither a cat nor a dog.", "fol": "((IsCat(Grace) & IsDog(Grace) & -(-IsCat(Grace) & -IsDog(Grace))) | (-(IsCat(Grace) & IsDog(Grace)) & -IsCat(Grace) & -IsDog(Grace)))", "prediction": ["all x.(Grace(x) -> ((Cat(x) & Dog(x)) | (-Cat(x) & Dog(x)))))", "all x.(Grace(x) -> ((Cat(x) & Dog(x)) | -Cat(x) & Dog(x))))", "all x.(Grace(x) -> ((Cat(x) & Dog(x)) | (-Cat(x) & Dog(x))))", "all x.(Grace(x) -> ((Cat(x) & Dog(x)) | -Cat(x) & Dog(x)))", "all x.(Grace(x) -> (Cat(x) | Dog(x)) | (-Cat(x) & Dog(x))))", "all x.(Grace(x) -> (Cat(x) & Dog(x)) | (-Cat(x) & Dog(x))))", "all x.(Grace(x) -> (Cat(x) | Dog(x)) | -Cat(x) & Dog(x)))", "all x.(Grace(x) -> (Cat(x) & Dog(x)) | -Cat(x) & Dog(x)))", "all x.(Grace(x) -> (Cat(x) & Dog(x) & -Cat(x) & Dog(x)))", "(all x.(Grace(x) -> (Cat(x) & Dog(x)) | (-Cat(x) & Dog(x)))))", "(all x.(Grace(x) -> (Cat(x) | Dog(x))) | (-Cat(x) & Dog(x))))", "(all x.(Grace(x) -> (Cat(x) & Dog(x))) | (-Cat(x) & Dog(x))))", "all x.(Grace(x) -> ((Cat(x) & Dog(x)) | (-Cat(x) & Dog(x)))))", "all x.(Grace(x) -> (Cat(x) & Dog(x) | -Cat(x) & Dog(x)))", "all x.(Grace(x) -> ((Cat(x) & Dog(x)) | -Cat(x) & Dog(x))))", "(all x.(Grace(x) -> (Cat(x) & Dog(x)) | (-Cat(x) & Dog(x))))"]}
{"id": "folio_train_1916", "nl": "Grace is a ghost.", "fol": "ExistsGhost(Grace)", "prediction": ["all x.(Grace(x) -> Ghost(x))", "all x.(Ghost(x) -> Grace(x))", "All x.(Grace(x) -> Ghost(x))", "(Ghost(Grace) & Ghost(Grace))", "all x.(Ghost(x) -> Grace(x))", "all x y.((Grace(x) & Ghost(y)) -> Ghost(x))", "exists x.(Grace(x) & Ghost(x))", "all x y.((Grace(x) & Ghost(y)) -> Is(x,y))", "all x.(Grace(x) -> Ghost(x))", "(Ghost(Grace) -> Ghost(Grace))", "all x y.((Grace(x) & Ghost(y)) -> Ghost(x,y))", "All x.(Ghost(x) -> Grace(x))", "(Ghost(Grace) -> Ghost(Grace))", "(Ghost(Grace) | Ghost(Grace)))", "all x y.((Grace(x) & Ghost(y)) -> Remains(x,y))", "all x y.((Grace(x) & Ghost(y)) -> CreatedBy(x,y))"]}
{"id": "folio_train_1917", "nl": "If Grace is either both cute and lovely, or neither cute nor lovely, then Grace is either a dog or a ghost.", "fol": "(((IsCute(Grace) & IsLovely(Grace)) | (-IsCute(Grace) & -IsLovely(Grace))) -> (IsDog(Grace) | ExistsGhost(Grace)))", "prediction": ["all x.((Grace(x) & ((Cute(x) & Lovely(x)) | -Cute(x) & Lovely(x))) -> (Dog(x) | Ghost(x)))", "all x.((Grace(x) & ((Cute(x) & Lovely(x)) | (-Cute(x) & Lovely(x))))) -> (Dog(x) | Ghost(x)))", "all x.((Grace(x) & ((Cute(x) & Lovely(x)) | -Cute(x) & Lovely(x))) -> (Dog(x) | Ghost(x))))", "all x.((Grace(x) & ((CUTE(x) & Lovely(x)) | -CUTE(x) & Lovely(x))) -> (Dog(x) | Ghost(x)))", "all x.((Grace(x) & ((CUTE(x) & Lovely(x)) | (-CUTE(x) & Lovely(x))))) -> (Dog(x) | Ghost(x)))", "all x.((Grace(x) & (CUTE(x) | -Cute(x) | -Lovely(x))) -> (Dog(x) | Ghost(x)))", "all x.((Grace(x) & (CUTE(x) | -CUTE(x) | -Lovely(x))) -> (Dog(x) | Ghost(x)))", "all x.((Grace(x) & ((CUTE(x) & Lovely(x)) | -CUTE(x) & Lovely(x))) -> (Dog(x) | Ghost(x))))", "all x.((Grace(x) & (CUTE(x) | -CUTE(x) | -CUTE(x))) -> (Dog(x) | Ghost(x)))", "all x.((Grace(x) & ((Cozy(x) & Lovely(x)) | -Cozy(x) & Lovely(x))) -> (Dog(x) | Ghost(x))))", "all x.((Grace(x) & ((Cozy(x) & Lovely(x)) | -Cozy(x) & Lovely(x))) -> (Dog(x) | Ghost(x)))", "all x.((Grace(x) & (Cute(x) | Lovely(x)) | -Cute(x) | Lovely(x))) -> (Dog(x) | Ghost(x)))", "all x.((Grace(x) & (Cute(x) | -Cute(x) | -Lovely(x))) -> (Dog(x) | Ghost(x)))", "all x.((Grace(x) & (Cute(x) | Lovely(x))) | -(Cute(x) & Lovely(x)))) -> (Dog(x) | Ghost(x)))", "all x.((Grace(x) & (Cute(x) | Lovely(x))) | (-Cute(x) & Lovely(x)))) -> (Dog(x) | Ghost(x)))", "all x.((Grace(x) & ((Cute(x) & Lovely(x)) | (-Cute(x) & Lovely(x)))) -> (Dog(x) | Ghost(x))))"]}
{"id": "folio_train_1918", "nl": "If Grace is not a ghost and is not lovely, then Grace is either a cat or cute.", "fol": "((-ExistsGhost(Grace) & -IsLovely(Grace)) -> (IsCat(Grace) | IsCute(Grace)))", "prediction": ["all x.((Grace(x) & -Ghost(x) & -Lovely(x)) -> (Cat(x) | Cute(x)))", "all x.((Ghost(x) & -Ghost(x) & -Lovely(x)) -> (Cat(x) | Cute(x)))", "all x.((Grace(x) & -Ghost(x) & -Beautiful(x)) -> (Cat(x) | Cute(x)))", "all x.((Grace(x) & -Ghost(x) & -Lovely(x)) -> (Cat(x) | CUTE(x)))", "all x.((Ghost(x) & -Ghost(x) & -Beautiful(x)) -> (Cat(x) | Cute(x)))", "all x.((Ghost(x) & -Ghost(x) & -Lovely(x)) -> (Cat(x) | CUTE(x)))", "all x.((Grace(x) & -Ghost(x) & -Wonderful(x)) -> (Cat(x) | Cute(x)))", "all x.((Ghost(x) & -Ghost(x) & -Wonderful(x)) -> (Cat(x) | Cute(x)))", "all x.((Grace(x) & -Ghost(x) & -Lovely(x)) -> (Cat(x) | Crazy(x)))", "all x.((Ghost(x) & -Ghost(x) & Lovely(x)) -> (Cat(x) | Cute(x)))", "all x.((Grace(x) & -Ghost(x) & -Lovely(x)) -> (Cat(x) | Cute(x))))", "all x.((Grace(x) & -Ghost(x) & -Beautiful(x)) -> (Cat(x) | CUTE(x)))", "all x.((Grace(x) & -Ghost(x) & Lovely(x)) -> (Cat(x) | Cute(x)))", "all x.((Ghost(x) & -Ghost(x) & -Lovely(x)) -> (Cat(x) | Crazy(x)))", "all x.((Ghost(x) & -Ghost(x) & -Beautiful(x)) -> (Cat(x) | CUTE(x)))", "all x.((Grace(x) & -Ghost(x) & -Pretty(x)) -> (Cat(x) | Cute(x)))"]}
{"id": "folio_train_1919", "nl": "Shafaq-Asiman is a large complex of offshore geological structures in the Caspian Sea.", "fol": "(IsLargeComplex(ShafaqAsiman) & IsLargeComplex(ShafaqAsiman) & IsOffshore(ShafaqAsiman) & HasGeologicalStructures(ShafaqAsiman) & LocatedIn(ShafaqAsiman,Caspiansea))", "prediction": ["all x.(ShafaqAsiman(x) -> (LargeComplexOfOffshoreGeologicalStructures(x) & InCaspianSea(x)))", "all x.(ShafaqAsiman(x) -> (LargeComplexOfOffshoreGeologicalStructures(x) & CaspianSea(x)))", "all x.(ShafaqAsiman(x) -> (OffshoreGeologicalStructures(x) & InCaspianSea(x)))", "all x.(ShafaqAsiman(x) -> (LargeComplexOfOffshoreGeologicalStructures(x) & InCaspianSea(x)))", "all x y.((ShafaqAsiman(x) & CaspianSea(y)) -> LargeComplexOfOffshoreGeologicalStructures(x,y))", "all x y z.((ShafaqAsiman(x) & OffshoreGeologicalStructures(y) & CaspianSea(z)) -> LargeComplex(x,y,z))", "all x.(ShafaqAsiman(x) -> (LargeComplexOfOffshoreGeologicalStructures(x) & CaspianSea(x)))", "all x.(ShafaqAsiman(x) -> (LargeComplexOfOffshoreGeologicalStructuresInCaspianSea(x)))", "all x.(ShafaqAsiman(x) -> OffshoreGeologicalStructures(x))", "all x.(ShafaqAsiman(x) -> (LargeComplexOfOffshoreGeologicalStructures(x) & InCascadianSea(x)))", "all x.(ShafaqAsiman(x) -> OffshoreGeologicalStructuresInCaspianSea(x))", "all x y.((ShafaqAsiman(x) & CaspianSea(y)) -> OffshoreGeologicalStructures(x,y))", "all x y z.((ShafaqAsiman(x) & OffshoreGeologicalStructures(y) & CaspianSea(z)) -> LargeComplexOf(x,y,z))", "all x.(ShafaqAsiman(x) -> (OffshoreGeologicalStructures(x) & InCaspianSea(x)))", "all x.(ShafaqAsiman(x) -> (OffshoreGeologicalStructures(x) & CaspianSea(x)))", "all x.(ShaffaqAsiman(x) -> (LargeComplexOfOffshoreGeologicalStructures(x) & InCaspianSea(x)))"]}
{"id": "folio_train_1920", "nl": "Baku is northwest of Shafaq-Asiman.", "fol": "IsNorthwestOf(Baku,ShafaqAsiman)", "prediction": ["all x.(Baku(x) -> NorthwestOfShafaqAsiman(x))", "all x y.((Baku(x) & ShafaqAsiman(y)) -> NorthwestOf(x,y))", "all x.(Baku(x) -> (NorthwestOfShafaqAsiman(x)))", "all x y.((Baku(x) & Shafaq(y) & Asiman(y)) -> NorthwestOf(x,y))", "all x.(Baku(x) -> NorthwestOfShafaqAsiman(x))", "all x y.((Baku(x) & Shafaq(y) & Asiman(z)) -> NorthwestOf(x,y,z))", "all x.((Baku(x) & ShafaqAsiman(x)) -> NorthwestOf(x,y))", "all x.((Baku(x) & NorthwestOfShafaqAsiman(x)) -> NorthwestOfAsiman(x))", "(NorthwestOfShafaqAsiman(Baku))", "all x.(Baku(x) -> NorthwestOfShafaqAsiman(x))", "all x.(Baku(x) -> (NorthwestOfShafaqAsiman(x)))", "exists x.(Baku(x) & NorthwestOfShafaqAsiman(x))", "all x y.((Baku(x) & ShafaqAsiman(y)) -> NorthwestOf(x,y))", "all x.(Baku(x) -> (NorthwestOfShafaqAsiman(x)))", "(NorthwestOfShafaqAsiman(Baku))", "all x.((Baku(x) & NorthwestOfShafaqAsiman(x)) -> LocatedIn(x,y))"]}
{"id": "folio_train_1921", "nl": "If place A is northwest of place B, then place B is southeast of place A.", "fol": "all x y.(IsNorthwestOf(x,y) -> IsSoutheastOf(y,x))", "prediction": ["all x.((PlaceA(x) & NorthwestOfPlaceB(x)) -> SoutheastOfPlaceA(x))", "all x y.((Place(x) & Place(y) & NorthwestOf(x,y)) -> SoutheastOf(y,x))", "all x.((Place(x) & NorthwestOfPlace(x,B)) -> SoutheastOfPlace(x,A))", "all x.((Place(x) & NorthwestOfPlace(x)) -> SoutheastOfPlace(x))", "all x y.((Place(x) & Place(y) & NorthwestOf(x,y)) -> SoutheastOf(y,z))", "all x y.((Place(x) & Place(y) & NorthwestOf(x,y)) -> SoutheastOf(x,y))", "all x y.((Place(x) & Place(y)) -> (NorthwestOf(x,y) & SoutheastOf(y,x)))", "all x y z.((Place(x) & Place(y) & Place(z) & NorthwestOf(x,y,z)) -> SoutheastOf(y,z))", "all x y.((Place(x) & NorthwestOfPlace(x,y)) -> SoutheastOfPlace(x,y))", "all x y.((Place(x) & PlaceB(y) & NorthwestOf(x,y)) -> SoutheastOf(y,x))", "all x y.((Place(x) & Place(y) & NorthwestOfPlace(x,y)) -> SoutheastOfPlace(x,y))", "all x y.((Place(x) & Place(y)) -> (NorthwestOf(x,y) & SoutheastOf(y,z)))", "all x y.((Place(x) & PlaceB(y) & NorthwestOf(x,y)) -> SoutheastOf(x,y))", "all x.((Place(x) & NorthwestOfPlace(x,B)) -> SoutheastOfPlace(x,A,B))", "all x y.((Place(x) & Place(y)) -> (NorthwestOf(x,y) & SoutheastOf(x,y)))", "all x y.((Place(x) & Place(y)) -> (NorthwestOfPlace(x,y) & SoutheastOfPlace(x,y)))"]}
{"id": "folio_train_1922", "nl": "Baku is southeast of Shafaq-Asiman.", "fol": "IsSoutheastOf(Baku,ShafaqAsiman)", "prediction": ["all x y.((Baku(x) & ShafaqAsiman(y)) -> SoutheastOf(x,y))", "all x.((Baku(x) & ShafaqAsiman(x)) -> SoutheastOf(x,y))", "all x.(Baku(x) -> SoutheastOfShafaqAsiman(x))", "all x y.((Baku(x) & Shafaq(y) & Asiman(y)) -> SoutheastOf(x,y))", "all x y.((Baku(x) & Shafaq(y) & Asiman(z)) -> SoutheastOf(x,y,z))", "all x.((Baku(x) & Shafaq(x) & Asiman(x)) -> SoutheastOf(x,y))", "all x.(Baku(x) -> (ShafaqAsiman(x) & SoutheastOf(x,ShafaqAsiman)))", "all x.(Baku(x) -> (SoutheastOfShafaqAsiman(x)))", "all x.(Baku(x) -> (ShadaqAsiman(x) & SoutheastOf(x,ShadaqAsiman)))", "all x.(Baku(x) -> (ShadaqAsiman(x) & SoutheastOf(x,Asiman)))", "all x.(Baku(x) -> SoutheastOfShafaqAsiman(x))", "all x.((Baku(x) & ShafaqAsiman(x)) -> SoutheastOf(x,Asiman))", "all x.(Baku(x) -> (ShafaqAsiman(x) & SoutheastOf(x,ShafaqAsiman)))", "all x.((Baku(x) & ShafaqAsiman(x)) -> Southeast(x))", "all x.(Baku(x) -> (ShadaqAsiman(x) & SoutheastOf(x,Baku)))", "all x.(Baku(x) -> (ShadaqAsiman(x) & Southeast(x)))"]}
{"id": "folio_train_1923", "nl": "A large complex is southeast of Baku.", "fol": "exists z.(IsLargeComplex(z) & IsSoutheastOf(z,Baku))", "prediction": ["exists x.(LargeComplex(x) & SoutheastOfBaku(x))", "all x.(LargeComplex(x) -> SoutheastOfBaku(x))", "all x y.((LargeComplex(x) & Baku(y)) -> SoutheastOf(x,y))", "exists x.(LargeComplex(x) & SoutheastOf(x,Baku))", "exists x.(LargeComplex(x) & SoutheastOfBabaku(x))", "all x.(LargeComplex(x) -> SoutheastOfBabaku(x))", "exists x.(LargeComplex(x) & SoutheastOf(x,Babaku))", "all x y.((LargeComplex(x) & Baku(y)) -> SoutheastOf(x,y))", "exists x.(LargeComplex(x) & SoutheastOfBaku(x))", "all x.(LargeComplex(x) -> SoutheastOfBaku(x))", "all x.((LargeComplex(x) & SoutheastOfBaku(x)) -> LocatedIn(x,y))", "all x y.((LargeComplex(x) & Baku(y)) -> Southeast(x,y))", "exists x.(LargeComplex(x) & SoutheastOfBaku(x))", "(LargeComplex(x) & SoutheastOfBaku(x))", "all x.(LargeComplex(x) -> SoutheastOfBaku(x))", "all x.(LargeComplex(x) -> SoutheastOfBaku(x))"]}
{"id": "folio_train_1924", "nl": "Baku is not northwest of an offshore geological structures.", "fol": "-exists x.(IsOffshore(x) & HasGeologicalStructures(x) & IsNorthwestOf(Baku,x))", "prediction": ["all x.(Baku(x) -> -NorthwestOfOffshoreGeologicalStructures(x))", "all x.(Baku(x) -> -WesterlyOfOffshoreGeologicalStructures(x))", "all x.(Baku(x) -> -NorthwestOfOffshoreGeologicalStructures(x))", "all x.((Baku(x) & -NorthwestOfOffshoreGeologicalStructures(x)) -> -OffshoreGeologicalStructures(x))", "all x.((Baku(x) & -WesterlyOfOffshoreGeologicalStructures(x)) -> -WesterlyOfOffshoreGeologicalStructures(x))", "all x.((Baku(x) & -WesterlyOfOffshoreGeologicalStructures(x)) -> -OffshoreGeologicalStructures(x))", "all x.((Baku(x) & -NorthwestOfOffshoreGeologicalStructures(x)) -> -NorthwestOfOffshoreGeologicalStructures(x))", "all x.((Baku(x) & -WesterlyOfOffshoreGeologicalStructures(x)) -> -NorthwestOfOffshoreGeologicalStructures(x))", "all x.(Baku(x) -> -NorfwestOfOffshoreGeologicalStructures(x))", "all x.((Baku(x) & -NorthwestOfOffshoreGeologicalStructures(x)) -> -OffshoreGeologicalStructures(x))", "all x.(Baku(x) -> -NordwestOfOffshoreGeologicalStructures(x))", "all x.((Baku(x) & -NorthwestOfOffshoreGeologicalStructures(x)) -> -NorthwestOfOffshoreGeologicalStructures(x))", "all x.(Baku(x) -> -WestwestOfOffshoreGeologicalStructures(x))", "all x y.((Baku(x) & OffshoreGeologicalStructure(y)) -> -NorthwestOf(x,y))", "all x.((Baku(x) & -NorthwestOfOffshoreGeologicalStructures(x)) -> -WesterlyOfOffshoreGeologicalStructures(x))", "all x y.((Baku(x) & OffshoreGeologicalStructures(y)) -> -NorthwestOf(x,y))"]}
{"id": "folio_train_1925", "nl": "Herodicus was a Greek physician, dietician, sophist, and gymnastic-master.", "fol": "(IsGreek(Herodicus) & IsPhysician(Herodicus) & IsDietician(Herodicus) & IsSophist(Herodicus) & IsGymnasticMaster(Herodicus))", "prediction": ["all x.(Herodicus(x) -> (GreekPharmacist(x) & Dietician(x) & Sophist(x) & GymnasticMaster(x)))", "all x.(Herodicus(x) -> (GreekPharmacist(x) & Dietician(x) & Sophist(x) & GymnasticMaster(x)))", "all x.(Herodicus(x) -> (GreekPharmacist(x) & Dietician(x) & Sophot(x) & GymnasticMaster(x)))", "all x.(Herodicus(x) -> (GreekPharmacist(x) & Dietician(x) & Sophist(x) & GymnasticMaster(x)))", "all x.(Herodicus(x) -> (GreekPhlebotist(x) & Dietician(x) & Sophist(x) & GymnasticMaster(x)))", "(GreekPharmacist(Herodicus) & Dietician(Herodicus) & Sophist(Herodicus) & GymnasticMaster(Herodicus))", "all x.(Herodicus(x) -> (GreekPhDentist(x) & GreekSophist(x) & GreekGymnasticMaster(x)))", "all x.(Herodicus(x) -> (GreekPhlebotist(x) & Dietician(x) & Sophist(x) & GymnasticMaster(x)))", "all x.(Herodicus(x) -> (GreekPhDentist(x) & Sophist(x) & GymnasticMaster(x)))", "all x.(Herodicus(x) -> (GreekPharmacist(x) & Dietician(x) & Sophist(x) & GymnasticMaster(x)))", "all x.(Herodicus(x) -> (GreekPharmacist(x) & Dietician(x) & Sophot(x) & GymnasticMaster(x)))", "all x.(Herodicus(x) -> (GreekPhlebotist(x) & Dietician(x) & Sophot(x) & GymnasticMaster(x)))", "(GreekPharmacist(Herodicus) & Dietician(Herodicus) & Sophist(Herodicus) & GymnasticMaster(Herodicus))", "(GreekMedicine(Herodicus) & Dietician(Herodicus) & Sophist(Herodicus) & GymnasticMaster(Herodicus))", "all x.(Herodicus(x) -> (GreekPhDentist(x) & GreekSophist(x) & GreekGymnasticMaster(x)))", "(GreekPharmacist(Herodicus) & Dietician(Herodicus) & Sophot(Herodicus) & GymnasticMaster(Herodicus))"]}
{"id": "folio_train_1926", "nl": "Herodicus was born in the city of Selymbria.", "fol": "(BornIn(Herodicus,Selymbria) & IsCity(Selymbria))", "prediction": ["all x y.((Herodicus(x) & City(y)) -> BornIn(x,y))", "all x.(Herodicus(x) -> BornInSelymbria(x))", "Herodicus was born in the city of Selymbria.", "all x y.((Herodicus(x) & City(y) & BornIn(x,y)) -> BornIn(x,y))", "all x.(Herodicus(x) -> BornInSelymbria(x))", "All x.(Herodicus(x) -> BornInSelymbria(x))", "(Birth(Herodicus,Selymbria) & BornIn(Herodicus,Selymbria))", "(BirthCity(Herodicus) & BornInSelymbria(Herodicus))", "all x y.((Herodicus(x) & City(y)) -> BornInSelymbria(x,y))", "(Birth(Herodicus,Selymbria) -> BornIn(Herodicus,Selymbria))", "all x y.((Herodicus(x) & City(y) & BornIn(x,y)) -> Selymbria(x))", "(Birth(Herodicus) -> BornInSelymbria(Herodicus))", "All x.(Herodicus(x) -> BornInSelymbria(x))", "all x.(Herodicus(x) -> BornIn(x,Selymbria))", "all x.(Herodicus(x) -> BornInCity(x,Selymbria))", "(Birth(Herodicus) & City(Selymbria))"]}
{"id": "folio_train_1927", "nl": "Selymbria is a colony of the city-state Megara.", "fol": "(IsColonyOf(Selymbria,Megara) & IsCityState(Megara))", "prediction": ["all x y z.((Selymbria(x) & CityState(y) & Megara(z)) -> Colony(x,y,z))", "all x.(Selymbria(x) -> (Colony(x) & CityStateMegara(x)))", "all x y z.((Selymbria(x) & CityState(y) & Megara(z)) -> ColonyOf(x,y,z))", "all x.(Selymbria(x) -> ColonyOfCityStateMegara(x))", "all x y.((Colony(x) & CityState(y) & Megara(x)) -> Selymbria(x))", "(Colony(Selymbria) & CityStateMegara(Selymbria))", "all x y.((Selymbria(x) & CityState(y)) -> ColonyOf(x,y))", "all x.(Selymbria(x) -> (ColonyOfCityStateMegara(x)))", "all x.((Colony(x) & CityStateMegara(x)) -> Selymbria(x))", "all x.(Selymbria(x) -> (Colony(x) & CityState(x) & Megara(x)))", "all x.(Selymbria(x) -> (ColonyOfCityState(x) & Megara(x)))", "all x.(Selymbria(x) -> (Colony(x) & CityStateMegara(x)))", "all x.(Selymbria(x) -> (Colony(x) & CityState(x,Megara)))", "all x y.((Selymbria(x) & CityState(y)) -> Colony(x,y))", "all x y z.((Selymbria(x) & CityState(y) & Megara(z)) -> Colony(x,y))", "Selymbria is a colony of the city-state Megara."]}
{"id": "folio_train_1928", "nl": "One of the tutors of Hippocrates was Herodicus.", "fol": "TutoredBy(Herodicus,Hippocrates)", "prediction": ["all x.((Tutor(x) & Hippocrates(x)) -> Herodicus(x))", "all x.((Tutor(x) & Hippocrate(x)) -> Herodicus(x))", "all x y.((Tutor(x) & Hippocrates(y)) -> Herodicus(x))", "all x y.((Tutor(x) & Hippocrate(y)) -> Herodicus(x))", "all x.(HippocratesTutor(x) -> Herodicus(x))", "All x.((Tutor(x) & Hippocrates(x)) -> Herodicus(x))", "all x y.((Tutor(x) & Hippocrates(y)) -> Herodicus(x,y))", "all x y.((Tutor(x) & Hippocrate(y)) -> Herodicus(x,y))", "all x.((TutorOfHippocrates(x) & Herodicus(x)) -> TutorOfHippocrates(x))", "all x.(HippocratesTutor(x) -> Herodicus(x))", "one of the tutors of Hippocrates was Herodicus.", "(HippocratesTutor(Hippocrates) & HerodicusTutor(Hippocrates))", "(HippocratesTutor(Hippocrates) & Herodicus(Hippocrates))", "all x.(TutorOfHippocrates(x) -> Herodicus(x))", "all x.((TutorOfHippocrates(x)) -> Herodicus(x))", "all x y.((Tutor(x) & Hippocrates(y) & Herodicus(x)) -> Tutor(x,y))"]}
{"id": "folio_train_1929", "nl": "Massages were recommended by Herodicus.", "fol": "RecommendedBy(Herodicus,Massages)", "prediction": ["all x.(Massage(x) -> RecommendedByHerodicus(x))", "all x y.((Massage(x) & Herodicus(y)) -> RecommendedBy(x,y))", "all x y z.((Massage(x) & Herodicus(y) & Massage(z)) -> RecommendedBy(x,y,z))", "all x y.((Massage(x) & Herodicus(y)) -> Recommendation(x,y))", "all x y.((Massage(x) & Herodicus(y)) -> Recommends(x,y))", "all x.(Massage(x) -> RecommendatedByHerodicus(x))", "all x y.((Massage(x) & Herodicus(y)) -> Recommended(x,y))", "all x y z.((Massage(x) & Herodicus(y) & Massage(z)) -> RecommendedBy(y,z))", "all x y z.((Massage(x) & Herodicus(y) & Massage(z)) -> Recommendation(x,y,z))", "all x y z.((Massage(x) & Herodicus(y) & Massage(z)) -> Recommends(x,y,z))", "all x y z.((Massage(x) & Herodicus(y) & Massage(z)) -> RecommendedBy(x,y))", "all x.(Massage(x) -> Recommendation(x,Herodicus))", "all x y.((Massage(x) & Herodicus(y)) -> RecommendedBy(x,y))", "all x y.((Massage(x) & Herodicus(y)) -> Recommendations(x,y))", "all x y z.((Massage(x) & Herodicus(y) & Massage(z)) -> RecommendatedBy(x,y,z))", "all x y.((Massage(x) & Herodicus(y)) -> RecommendatedBy(x,y))"]}
{"id": "folio_train_1930", "nl": "Some of theories of Herodicus are considered to be the foundation of sports medicine.", "fol": "exists x.(TheoryOf(x) & OriginatesFrom(x,Herodicus) & IsFoundationOf(x,SportsMedicine))", "prediction": ["exists x.(TheoriesOfHerodicus(x) & FoundationOfSportsMedicine(x))", "exists x.(Theories(x) & Herodicus(x) & FoundationOfSportsMedicine(x))", "exists x.(Theory(x) & Herodicus(x) & FoundationOfSportsMedicine(x))", "exists x.(TheoryOfHerodicus(x) & FoundationOfSportsMedicine(x))", "exists x.(TheoriesOfHerodicus(x) & FoundationOfSportsMeditation(x))", "exists x.(Theory(x) & Herodicus(x) & SportsMedicine(x))", "exists x.(Theories(x) & Herodicus(x) & SportsMedicine(x))", "exists x.(Theory(x) & Herodicus(x) & FoundationOfSportsMedicine(x))", "exists x.(HerodicusTheory(x) & FoundationOfSportsMedicine(x))", "exists x.(Theories(x) & Herodicus(x) & FoundationOfSportsMeditation(x))", "exists x.(Theory(x) & Herodicus(x) & FoundationOfSportsMeditation(x))", "exists x.(Theories(x) & HerodicusTheory(x) & FoundationOfSportsMedicine(x))", "exists x.(TheoriesOfHerodicus(x) & FoundationOfSportsmedicine(x))", "exists x.(TheoryOfHerodicus(x) & FoundationOfSportsMeditation(x))", "exists x.(TheoriesOfHerodicus(x) & FoundationOfSportsMedicine(x))", "exists x.(Theories(x) & HerodicusTheory(x))"]}
{"id": "folio_train_1931", "nl": "Herodicus tutored Hippocrates.", "fol": "TutoredBy(Herodicus,Hippocrates)", "prediction": ["all x y.((Herodicus(x) & Hippocrate(y)) -> Tutored(x,y))", "all x.(Herodicus(x) -> TutoredHippocrates(x))", "all x y.((Herodicus(x) & Hippocrates(y)) -> Tutored(x,y))", "all x y.((Herodicus(x) & Hippocrate(y)) -> Taught(x,y))", "All x y.((Herodicus(x) & Hippocrate(y)) -> Tutored(x,y))", "all x y z.((Herodicus(x) & Hippocrate(y) & Tutor(z)) -> Tutored(x,y,z))", "all x.((Herodicus(x) & Hippocrate(y)) -> Tutored(x,y))", "all x y.((Herodicus(x) & Hippocrate(y)) -> Tutorned(x,y))", "all x y.((Herodicus(x) & Hippocrate(y)) -> Mentored(x,y))", "all x y z.((Herodicus(x) & Hippocrate(y) & Herodius(z)) -> Tutored(x,y,z))", "all x y.((Herodicus(x) & Hippocrate(y)) -> tutored(x,y))", "all x.((Herodicus(x) & Hippocrates(y)) -> Tutored(x,y))", "all x y.((Herodicus(x) & Hippocrate(y)) -> Tuitioned(x,y))", "all x y.((Herodicus(x) & Hippocrates(y)) -> Taught(x,y))", "All x.(Herodicus(x) -> TutoredHippocrates(x))", "all x.((Herodicus(x) & Hippocrate(x)) -> Tutored(x,Hippocrates))"]}
{"id": "folio_train_1932", "nl": "Herodicus was tutored by Hippocrates.", "fol": "TutoredBy(Hippocrates,Herodicus)", "prediction": ["all x y.((Herodicus(x) & Hippocrates(y)) -> TutoredBy(x,y))", "all x y.((Herodicus(x) & Hippocrate(y)) -> TutoredBy(x,y))", "all x.(Herodicus(x) -> TutoredByHippocrates(x))", "all x y z.((Herodicus(x) & Hippocrate(y) & Hippocrate(z)) -> TutoredBy(x,y,z))", "all x.(Herodicus(x) -> TutoredByHipocrates(x))", "all x y z.((Herodicus(x) & Hippocrates(y) & Tutor(z)) -> TutoredBy(x,y,z))", "All x y.((Herodicus(x) & Hippocrates(y)) -> TutoredBy(x,y))", "All x y.((Herodicus(x) & Hippocrate(y)) -> TutoredBy(x,y))", "All x.(Herodicus(x) -> TutoredByHippocrates(x))", "all x y.((Herodicus(x) & Hippocrates(y)) -> TaughtBy(x,y))", "all x y z.((Herodicus(x) & Hippocrates(y) & Tutor(z)) -> Tutor(x,y,z))", "all x y z.((Herodicus(x) & Hippocrate(y) & Hippocrate(z)) -> TaughtBy(x,y,z))", "All x.(Herodicus(x) -> TutoredByHipocrates(x))", "all x y.((Herodicus(x) & Hippocrate(y)) -> TaughtBy(x,y))", "all x y z.((Herodicus(x) & Hippocrates(y) & Tutor(z)) -> TaughtBy(x,y,z))", "(TutoredByHippocrates(Herodicus) & TutoredByHippocrates(Herodicus))"]}
{"id": "folio_train_1933", "nl": "Herodicus was born in a city-state.", "fol": "exists y.(IsCityState(y) & BornIn(Herodicus,y))", "prediction": ["all x.(Herodicus(x) -> BornInCityState(x))", "all x y.((Herodicus(x) & CityState(y)) -> BornIn(x,y))", "all x.(Herodicus(x) -> BornInCityState(x))", "all x y z.((Herodicus(x) & CityState(y) & City(z)) -> BornIn(x,y,z))", "all x y z.((Herodicus(x) & CityState(y) & CityState(z)) -> BornIn(x,y,z))", "all x y z.((Herodicus(x) & City(y) & State(z)) -> BornIn(x,y,z))", "all x y.((Herodicus(x) & City(y)) -> BornIn(x,y))", "all x y z.((Herodicus(x) & CityState(y) & City(z)) -> BornIn(x,y))", "all x y z.((Herodicus(x) & CityState(y) & CityState(z)) -> BornIn(x,y))", "all x y z.((Herodicus(x) & CityState(y) & Birthplace(z)) -> BornIn(x,y,z))", "all x y.((Herodicus(x) & CityState(y) & BornIn(x,y)) -> BornIn(x,y))", "(Birth(Herodicus) & CityState(Herodicus))", "all x y z.((Herodicus(x) & CityState(y) & Birth(z)) -> BornIn(x,y,z))", "all x.(Herodicus(x) -> (BirthInCityState(x) & BornInCityState(x)))", "all x.(Herodicus(x) -> (Birth(x) & CityState(x)))", "all x y z.((Herodicus(x) & CityState(y) & Birthplace(z)) -> BornIn(x,y))"]}
{"id": "folio_train_1934", "nl": "Herodicus did not recommend massages.", "fol": "-RecommendedBy(Herodicus,Massages)", "prediction": ["all x.(Herodicus(x) -> -RecommendsMassages(x))", "all x.((Herodicus(x) & -RecommendsMassages(x)) -> -RecommendsMassages(x))", "(-RecommendsMassages(Herodicus))", "all x.((Herodicus(x) & -RecommendsMassage(x)) -> -RecommendsMassage(x))", "all x.((Herodicus(x) & -RecommendedMassages(x)) -> -RecommendsMassages(x))", "All x.(Herodicus(x) -> -RecommendsMassages(x))", "all x.(Herodicus(x) -> -RecommendsMassage(x))", "all x.((Herodicus(x) & Massage(y)) -> -Recommends(x,y))", "all x.((Herodicus(x) & -RecommendsMassage(x)) -> -RecommendsMassages(x))", "all x.((Herodicus(x) & -RecommendedMassages(x)) -> -RecommendedMassages(x))", "-RecommendsMassages(Herodicus)", "all x.((Herodicus(x) & -RecommendsMassages(x)) -> -Recommendations(x))", "-RecommendsMassages(herodicus)", "(-RecommendsMassage(Herodicus))", "(-RecommendsMassages(herodicus))", "all x.((Herodicus(x) & -RecommendedMassages(x)) -> -Recommendations(x))"]}
{"id": "folio_train_1935", "nl": "Herodicus was born in a colony of a city-state.", "fol": "exists x.(BornIn(Herodicus,x) & exists y.(IsCityState(y) & IsColonyOf(x,y)))", "prediction": ["all x y z.((Herodicus(x) & Colony(y) & CityState(z)) -> BornIn(x,y,z))", "all x y.((Herodicus(x) & CityState(y)) -> BornInColony(x,y))", "all x y.((Herodicus(x) & CityState(y)) -> BornIn(x,y))", "all x y z.((Herodicus(x) & Colony(y) & CityState(z)) -> BornIn(x,y))", "all x.(Herodicus(x) -> BornInColonyOfCityState(x))", "all x y z.((Herodicus(x) & CityState(y) & Colony(z)) -> BornIn(x,y,z))", "all x.(Herodicus(x) -> BornInColonyOfCityState(x))", "all x y.((Herodicus(x) & Colony(y)) -> BornIn(x,y))", "all x y z.((Herodicus(x) & Colony(y) & CityState(z) & BornIn(x,y)) -> BornIn(x,z))", "all x y z.((Herodicus(x) & Colony(y) & CityState(z) & BornIn(x,y,z)) -> BornIn(x,y,z))", "all x y z.((Herodicus(x) & CityState(y) & Colony(z)) -> BornIn(x,z))", "all x y z.((Herodicus(x) & CityState(y) & Colony(z) & BornIn(x,z)) -> BornIn(x,y,z))", "all x y z.((Herodicus(x) & Colony(y) & CityState(z) & BornIn(x,y,z)) -> BornIn(x,y))", "all x y z.((Herodicus(x) & Colony(y) & City(z)) -> BornIn(x,y,z))", "all x y.((Herodicus(x) & Colony(y) & CityState(y)) -> BornIn(x,y))", "all x y.((Herodicus(x) & CityState(y) & BornIn(x,y)) -> BornIn(x,y))"]}
{"id": "folio_train_1936", "nl": "No kid loves the Opera.", "fol": "all x.(IsKid(x) -> -LovesOpera(x))", "prediction": ["-exists x.(Kid(x) & LovesOpera(x))", "-exists x.(Kid(x) & Loves(x,Opera))", "-all x.(Kid(x) -> LovesOpera(x))", "-exists x.(Child(x) & LovesOpera(x))", "-(Kid(x) & LovesOpera(x))", "-exists x.(Kid(x) & LoveOpera(x))", "-(Kid(k) & LovesOpera(k))", "-exists x.(Kid(x) & Love(x,Opera))", "all x.(Kid(x) -> LovesOpera(x))", "-(Kid(kid) & Opera(kid))", "-(Kid(Kid) & LovesOpera(Kid))", "-exists x.(Kid(x) & Loves(x Opera))", "-exists x.(Kid(x) & LikesOpera(x))", "-(Kid(Kid) & Opera(Kid))", "-exists x.(Kid(x) & LOVESOpera(x))", "-exists x.(Kid(x) & Love(x Opera))"]}
{"id": "folio_train_1937", "nl": "All adults love the Opera.", "fol": "all x.(IsAdult(x) -> LovesOpera(x))", "prediction": ["all x.(Adult(x) -> LovesOpera(x))", "all x.(Adult(x) -> LoveOpera(x))", "all x.((Adult(x) & LovesOpera(x)) -> LovesOpera(x))", "all x y.((Adult(x) & Opera(y)) -> Loves(x,y))", "all x y.((Adult(x) & Opera(y)) -> Love(x,y))", "all x.(Adult(x) -> Love(x,Opera))", "all x.((Adult(x) & LoveOpera(x)) -> LoveOpera(x))", "all x.(Adult(x) -> Loves(x,Opera))", "all x.((Adult(x) & LovesOpera(x)) -> Loves(x))", "all x.((Adult(x) & LoveOpera(x)) -> LovesOpera(x))", "all x.((Adult(x) & LovesOpera(x)) -> Loves(x,Opera))", "all x.((Adult(x) & Opera(y)) -> Loves(x,y))", "all x.((Adult(x) & LoveOpera(x)) -> Loves(x))", "(all x.(Adult(x) -> LovesOpera(x)))", "all x.((Adult(x) & LoveOpera(x)) -> Love(x))", "all x.(Adult(x) -> LovesOpera(x))"]}
{"id": "folio_train_1938", "nl": "If someone is a scientist, then they are an adult.", "fol": "all x.(IsScientist(x) -> IsAdult(x))", "prediction": ["all x.(Scientist(x) -> Adult(x))", "all x.((Scientist(x) & Adult(x)) -> Scientist(x))", "all x.((Scientist(x) & Adult(x)) -> Is(x,y))", "all x.((Scientist(x) & Adult(x)) -> IsScientist(x))", "all x.((Scientist(x) & Adult(x)) -> Is(x,Scientist))", "all x.((Scientist(x) & Adult(x)) -> Is(x,IsScientist(x))", "all x.((Scientist(x) & Adult(x)) -> Becomes(x))", "all x.((Scientist(x) & Adult(x)) -> -Scientist(x))", "all x.((Scientist(x)) -> Adult(x))", "all x.((Scientist(x) & Adult(x)) -> HasScientist(x))", "all x.((Scientist(x) & Adult(x)) -> Science(x))", "all x.((Scientist(x) & Adult(x)) -> Is(x))", "all x.((Scientist(x) & Adult(x)) -> Scientific(x))", "all x.((Scientist(x) & Adult(x)) -> Scientist(x))", "all x.((Scientist(x) & Adult(x)) -> Adult(x))", "all x.((Scientist(x) & Adult(x)) -> Is(x,IsScientist))"]}
{"id": "folio_train_1939", "nl": "Some students are kids.", "fol": "exists x.(IsStudent(x) & IsKid(x))", "prediction": ["exists x.(Student(x) & Kid(x))", "exists x.(Student(x) & Kids(x))", "exists x y.(Student(x) & Student(y) & Kid(x))", "exists x.(Student(x) & Child(x))", "exists x y.(Student(x) & Student(y) & Kid(y))", "exists x.(Student(x) & Kind(x))", "exists x y.(Student(x) & Student(y) & Kid(x,y))", "exists x.exists y.(Student(x) & Student(y) & Kid(x))", "exists x.exists y.(Student(x) & Student(y) & Kid(y))", "exists x y.(Student(x) & Student(y))", "exist x.(Student(x) & Kid(x))", "(exists x.(Student(x) & Kid(x)))", "exists x y.(Student(x) & Student(y) & Kids(x))", "exists x.(Student(x) & Kid(x))", "exists x y.(Student(x) & Student(y) & Kid(z))", "exists x y.(Student(x) & Kid(y))"]}
{"id": "folio_train_1940", "nl": "Billy is a kid.", "fol": "IsKid(Billy)", "prediction": ["all x.(Billy(x) -> Kid(x))", "all x.(Billiam(x) -> Kid(x))", "(Kid(Billiam) & Kid(Billiam))", "all x.((Billy(x) & Kid(x)) -> Kid(x))", "(Kid(Billy) & Kid(Billy))", "exists x.(Billy(x) & Kid(x))", "all x.((Billiam(x) & Kid(x)) -> Kid(x))", "All x.(Billy(x) -> Kid(x))", "all x.(Billy(x) -> Kid(x))", "(Kid(Billiam) -> Kid(Billiam))", "all x.(Billy(x) -> Kid(x))", "all x.((Billy(x) & Kid(x)) -> Is(x,y))", "(Kid(Billiam) -> Kid(Billiam))", "(Kid(Billiam) | Kid(Billiam)))", "(Kid(Billy)", "(Kid(Billy) -> Kid(Billy))"]}
{"id": "folio_train_1941", "nl": "Billy is a student.", "fol": "IsStudent(Billy)", "prediction": ["all x.(Billy(x) -> Student(x))", "all x.(Billiam(x) -> Student(x))", "(Student(Billiam) & Student(Billiam))", "(Student(Billiam) & -Student(Billiam))", "(Student(Billiam) -> Student(Billiam))", "all x.((Billy(x) & Student(x)) -> Student(x))", "(Student(Billy)", "(Student(Billiam) | Student(Billiam)))", "(Student(Billiam) | Student(Billiam))", "all x.((Billiam(x) & Student(x)) -> Student(x))", "(Student(Billy) & -Student(Billy))", "all x.((Billy(x) & Student(x)) -> Is(x,y))", "all x.((Billy(x) & Student(x)) -> -Student(x))", "all x.(Student(x) -> Billy(x))", "all x.((Billiam(x) & Student(x)) -> Is(x,y))", "(Student(Billy) & Student(Billy))"]}
{"id": "folio_train_1942", "nl": "Billy is a student and a scientist.", "fol": "(IsStudent(Billy) & IsScientist(Billy))", "prediction": ["all x.(Billy(x) -> (Student(x) & Scientist(x)))", "(Student(Billy) & Scientist(Billy))", "(Student(Billiam) & Scientist(Billiam))", "all x.(Billiam(x) -> (Student(x) & Scientist(x)))", "all x.(Billy(x) -> (Student(x) & Scientist(x)))", "all x.((Billy(x) & Student(x)) -> Scientist(x))", "all x.(Billy(x) -> (Student(x) & Scientist(x)))", "all x.((Billy(x) & Student(x) & Scientist(x)) -> Student(x))", "all x.((Billy(x) & Student(x) & Scientist(x)) -> Scientist(x))", "all x.((Student(x) & Scientist(x)) -> Billy(x))", "all x.((Billiam(x) & Student(x)) -> Scientist(x))", "exists x.(Billy(x) & Student(x) & Scientist(x))", "(Student(Billiam) & Scientist(Billy))", "all x.((Billiam(x) & Student(x) & Scientist(x)) -> Student(x))", "all x.(Billy(x) -> (Student(x) & Scientist(x)))", "all x y.((Billy(x) & Student(y)) -> Scientist(x))"]}
{"id": "folio_train_1943", "nl": "If Billy is a student or a scientist, then Billy is a student and a kid.", "fol": "((IsStudent(Billy) | IsScientist(Billy)) -> (IsStudent(Billy) & IsKid(Billy)))", "prediction": ["all x.((Student(x) | Scientist(x)) -> (Student(x) & Kid(x)))", "all x.((Billy(x) & (Student(x) | Scientist(x))) -> (Student(x) & Kid(x)))", "all x.((Billiam(x) & (Student(x) | Scientist(x))) -> (Student(x) & Kid(x)))", "all x.(Student(x) | Scientist(x)) -> (Student(x) & Kid(x)))", "all x.((Billy(x) & Student(x)) | Scientist(x)) -> (Student(x) & Kid(x)))", "all x.(((Student(x) | Scientist(x)) -> (Student(x) & Kid(x)))", "all x.((Billiam(x) & Student(x)) | Scientist(x)) -> (Student(x) & Kid(x)))", "all x.((Staff(x) | Scientist(x)) -> (Student(x) & Kid(x)))", "all x.((Billy(x) | Scientist(x)) -> (Student(x) & Kid(x)))", "all x.(((Student(x) | Scientist(x)) & Billy(x)) -> (Student(x) & Kid(x)))", "all x.(((Student(x) | Scientist(x))) -> (Student(x) & Kid(x)))", "all x.(StudentOrScientist(x) -> (Student(x) & Kid(x)))", "all x.((Savvy(x) | Scientist(x)) -> (Student(x) & Kid(x)))", "all x.((Student(x) | Scientist(x)) -> (Student(x) & Kid(x)))", "all x y.((Student(x) | Scientist(x)) -> (Student(x) & Kid(y)))", "all x.((Billy(x) & (Student(x) | Scientist(x))) -> (Student(x) | Kid(x)))"]}
{"id": "folio_train_1944", "nl": "Brian Winter is a Scottish football referee.", "fol": "(IsScottish(Brianwinter) & IsFootballReferee(Brianwinter))", "prediction": ["all x.((BrianWinter(x) & ScottishFootballReferee(x)) -> Referee(x))", "all x.(ScottishFootballReferee(x) -> BrianWinter(x))", "Brian Winter is a ScottishFootballReferee(BrianWinter)", "Brian Winter is a ScottishFootballReferee(BrianWinter)", "all x.((BrianWinter(x) & ScottishFootballFootballReferee(x)) -> Referee(x))", "(ScottishFootballReferee(BrianWinter)", "all x.((BrianWinter(x) & ScottishFootballReferee(x)) -> Referee(x))", "all x.((BrianWinter(x) & ScottishFootballReferee(x)) -> Referee(x,y))", "all x.((BrianWinter(x) & ScottishFootballReferee(x)) -> Referee(x,scotland))", "all x.((BrianWinter(x) & ScottishFootballReferee(x)) -> Referee(x,ScottishFootball))", "all x.((BrianWinter(x) & ScottishFootballReferee(x)) -> Referee(x,Scotland))", "Brian Winter is a ScottishFootballReferee(BrianWinters)", "all x.((BrianWinter(x) & ScottishFootball(x)) -> Referee(x))", "Brian Winter is ScottishFootballReferee(BrianWinter)", "all x.((BrianWinter(x) & ScottishFootballReferee(x)) -> Refused(x))", "Brian Winter (ScottishFootballReferee(BrianWinter))"]}
{"id": "folio_train_1945", "nl": "After being injured, Brian Winter retired in 2012.", "fol": "(IsInjured(Brianwinter) & IsRetired(Brianwinter))", "prediction": ["all x.((Injured(x) & BrianWinter(x)) -> RetiredIn2012(x))", "all x.((Injured(x) & BrianWinter(x)) -> Retired(x))", "(Injured(BrianWinter) & RetiredIn2012(BrianWinter))", "all x.((Injured(x) & BrianWinter(x)) -> Retirement(x))", "(Injured(BrianWinter) & Retired(BrianWinter))", "(Injured(BrianWinter) & BrianWinter(BrianWinter) & Retired(BrianWinter))", "(Injured(BrianWinter) & BrianWinterRetired(BrianWinter))", "(Injured(BrianWinter) & BrianWinterRetired(BrianWinter) & In 2012, BrianWinterRetired(BrianWinter))", "(Injured(BrianWinter) & BrianWinter(BrianWinter) & RetiredIn2012(BrianWinter))", "(Injured(BrianWinter) & BrianRetired(BrianWinter))", "all x.(Injured(x) -> BrianWinterRetired(x))", "(Injured(BrianWinter) & BrianWinter(BrianWinter) & Retired(BrianWinter,2012))", "(Injured(BrianWinter) & Injured(BrianWinter)) & BrianWinterRetired(BrianWinter))", "(Injured(BrianWinter) & BrianWinter(BrianWinter))", "(Injured(BrianWinter) & BrianRetiredIn2012(BrianWinter))", "(Injured(BrianWinter) & BrianWinterRetired(BrianWinter,2012))"]}
{"id": "folio_train_1946", "nl": "Brian Winter was appointed as a referee observer after his retirement.", "fol": "IsRefereeObserver(Brianwinter)", "prediction": ["all x.((BrianWinter(x) & Retirement(x)) -> RefereeObserver(x))", "all x y.((BrianWinter(x) & Retirement(y)) -> RefereeObserver(x,y))", "all x y.((BrianWinter(x) & Retirement(y)) -> AppointedRefereeObserver(x,y))", "all x.((BrianWinter(x) & Retired(x)) -> RefereeObserver(x))", "all x y.((Retirement(x) & BrianWinter(y)) -> AppointedRefereeObserver(y,x))", "all x y.((BrianWinter(x) & Retirement(y)) -> AppointedAsRefereeObserver(x,y))", "all x.((BrianWinter(x) & Retirement(y)) -> RefereeObserver(x,y))", "all x.((Retirement(x) & AppointedRefereeObserver(x)) -> BrianWinter(x))", "all x y.((BrianWinter(x) & Retirement(y) & AppointedAsRefereeObserver(x,y)) -> RefereeObserver(x,y))", "all x y.((Retirement(x) & BrianWinter(y)) -> AppointedAsRefereeObserver(y,x))", "all x y.((Retirement(x) & BrianWinter(y)) -> AppointedRefereeObserver(x,y))", "all x.((BrianWinter(x) & Retirement(x)) -> RefereeObserver(x))", "all x.(Retirement(BrianWinter) -> AppointedRefereeObserver(BrianWinter))", "all x y.((BrianWinter(x) & Retirement(y) & AppointedAsRefereeObserver(x,y)) -> Referee(x,y))", "all x y.((Retirement(x) & BrianWinter(y)) -> AppointedAsRefereeObserver(x,y))", "all x.(Retirement(x) -> RefereeObserver(x))"]}
{"id": "folio_train_1947", "nl": "Some football referees become referee observers.", "fol": "exists x.(IsFootballReferee(x) & IsRefereeObserver(x))", "prediction": ["exists x.(FootballReferee(x) & RefereeObserver(x))", "exists x.(FootballReferee(x) & BecomesRefereeObserver(x))", "exists x.(FootballReferee(x) & BelongsToRefereeObserver(x))", "exists x.(FootballReferee(x) & RefereeObserver(x))", "exists x y.(FootballReferee(x) & RefereeObserver(y))", "exists x.(FootballReferee(x) & BecameRefereeObserver(x))", "exists x.(FootballReferee(x) & RefereeObservator(x))", "exists x.(FootballReferee(x) & becomesRefereeObserver(x))", "exists x.(FootballReferee(x) & ActsAsRefereeObserver(x))", "exists x.(FootballReferee(x) & BecomesRefereeObservator(x))", "exists x.(FootballReferee(x) & ReceivesRefereeObserver(x))", "exists x.(FootballReferee(x) & CanBecomeRefereeObserver(x))", "exists x.(FootballReferee(x) & BelongsToRefereeObservers(x))", "exists x.(FootballReferee(x) & HasRefereeObserver(x))", "exists x y.(FootballReferee(x) & FootballRefereeObserver(y))", "exists x.(FootballReferee(x) & BelongsToRefereeObservator(x))"]}
{"id": "folio_train_1948", "nl": "The son of Brian Winter, Andy Winter, is a football player who plays for Hamilton Academical.", "fol": "(HasSon(Andywinter,Brianwinter) & IsFootballPlayer(Andywinter) & PlaysForTeam(Andywinter,Hamiltonacademical))", "prediction": ["all x.((SonOfBrianWinter(x) & AndyWinter(x)) -> (FootballPlayer(x) & PlaysForHamiltonAcademical(x)))", "(SonOfBrianWinter(SonOfAndyWinter) & FootballPlayer(Anderson) & PlaysForHamiltonAcademical(Anderson))", "(SonOfBrianWinter(s) & AndyWinter(s) & FootballPlayer(s) & PlaysForHamiltonAcademical(s))", "(SonOfBrianWinter(SonOfAndyWinter) & FootballPlayer(AndersonWinter) & PlaysForHamiltonAcademical(Anderson))", "(SonOfBrianWinter(SonOfAndyWinter(SonOfBrianWinter) & FootballPlayer(AndersonWinter) & PlaysForHamiltonAcademical(Anderson))", "(SonOfBrianWinter(SonOfAndyWinter) -> (FootballPlayer(Anderson) & PlaysForHamiltonAcademical(Anderson)))", "(SonOfBrianWinter(AndyWinter) & FootballPlayer(Anderson) & PlaysForHamiltonAcademical(Anderson))", "(SonOfBrianWinter(SonOfAndyWinter(SonOfBrianWinter) & FootballPlayer(Anderson) & PlaysForHamiltonAcademical(Anderson))", "(SonOfBrianWinter(SonOfAndyWinter(SonOfBrianWinter) & FootballPlayerForHamiltonAcademical(SonOfAndyWinter))", "(SonOfBrianWinter(SonOfAndyWinter(SonOfBrianWinter) & FootballPlayer(SonOfAndersonWinter) & PlaysForHamiltonAcademical(SonOfAnderson(SonOfAnderson(SonOfBrianWinter))", "(SonOfBrianWinter(s) & AndyWinter(s) & PlaysForHamiltonAcademical(s))", "(SonOfBrianWinter(SonOfAndyWinter(SonOfBrianWinter) & FootballPlayer(SonOfAndersonWinter) & PlaysForHamiltonAcademical(SonOfAndersonWinter))", "Andy Winter, sonOfBrianWinter(x) & FootballPlayer(x) & PlaysForHamiltonAcademical(x))", "(SonOfBrianWinter(SonOfAndyWinter(SonOfBrianWinter) & PlaysForHamiltonAcademical(SonOfAndyWinter))", "(SonOfBrianWinter(SonOfAndyWinter(SonOfBrianWinter) & FootballPlayer(SonOfAndersonWinter) & PlaysForHamiltonAcademical(SonOfAnderson(SonOfAnderson))", "(SonOfBrianWinter(SonOfAndyWinter(SonOfBrianWinter) & FootballPlayer(SonOfAndersonWinter) & PlaysForHamiltonAcademical(SonOfAnderson(SonOfAnderson(SonOfAnderson))"]}
{"id": "folio_train_1949", "nl": "There is a son of a referee observer that plays football.", "fol": "exists x y.(IsRefereeObserver(y) & HasSon(x,y) & IsFootballPlayer(x))", "prediction": ["exists x.(SonOfRefereeObserver(x) & PlaysFootball(x))", "exists x.(Son(x) & RefereeObserver(x) & PlaysFootball(x))", "exists x y.((Son(x) & RefereeObserver(y) & Referee(y)) -> PlaysFootball(x))", "exists x.(RefereeObserverSon(x) & PlaysFootball(x))", "exists x y.(SonOfRefereeObserver(x) & RefereeObserver(y) & PlaysFootball(x))", "exists x y.(Son(x) & RefereeObserver(y) & PlaysFootball(x))", "exists x y.(Son(x) & RefereeObserver(y) & Referee(y) & PlaysFootball(x))", "exists x y.(Son(x,y) & RefereeObserver(y) & Referee(y) & PlaysFootball(x))", "exists x y.((Son(x) & RefereeObserver(y) & RefereeObserver(y)) -> PlaysFootball(x))", "exists x y.(Son(x) & RefereeObserver(y) & RefereeObserver(x,y) & PlaysFootball(x))", "exists x y.(RefereeObserverSon(x) & RefereeObserver(y) & PlaysFootball(x))", "exists x y.(Son(x,y) & RefereeObserver(y) & RefereeObserver(y) & PlaysFootball(x))", "exists x y.(SonOfRefereeObserver(x) & Referee(y) & PlaysFootball(x))", "exists x y.((Son(x) & RefereeObserver(y) & Referee(y)) -> PlaysFootball(x,y))", "exists x y.(Son(x) & RefereeObserver(y) & PlaysFootball(x,y))", "exists x y.(SonOf(x,y) & RefereeObserver(y) & PlaysFootball(x))"]}
{"id": "folio_train_1950", "nl": "Brian Winter is not a referee observer.", "fol": "-IsRefereeObserver(Brianwinter)", "prediction": ["all x.((BrianWinter(x) & -RefereeObserver(x)) -> -RefereeObserver(x))", "(-RefereeObserver(BrianWinter))", "all x.(BrianWinter(x) -> -RefereeObserver(x))", "all x.((BrianWinter(x) & -RefereeObserver(x)) -> -Referee(x))", "-RefereeObserver(BrianWinter)", "BrianWinter(b) & -RefereeObserver(b))", "all x.(RefereeObserver(x) -> BrianWinter(x))", "all x.((BrianWinter(x) & -RefereeObservator(x)) -> -RefereeObserver(x))", "Brian Winter is not a refereeObserver.", "BrianWinter(b) & -RefereeObserver(c))", "all x.((BrianWinter(x) & -RefereeObserver(x)) -> -Observer(x))", "all x.((BrianWinter(x) & -RefereeObserver(x)) -> -RefereeObservator(x))", "all x.((BrianWinter(x) & -RefereeObserver(x)) -> NotRefereeObserver(x))", "all x.((BrianWinter(x) & -RefereeObserver(x)) -> -ReferenceeObserver(x))", "all x.((BrianWinter(x) & -RefereeObserver(x)) -> -RefereeObservor(x))", "all x.((BrianWinter(x) & -RefereeObserver(x)) -> NotReferee(x))"]}
{"id": "folio_train_1951", "nl": "Brian Winter is retired.", "fol": "IsRetired(Brianwinter)", "prediction": ["Brian Winter is retired.", "all x.((BrianWinter(x) & Retired(x)) -> Retired(x))", "all x.((BrianWinter(x) & Retirement(x)) -> Retired(x))", "all x.((BrianWinter(x) & Retired(x)) -> Retirement(x))", "All x.(BrianWinter(x) -> Retired(x))", "all x.(BrianWinter(x) -> Retired(x))", "BrianWinter(b) & Retired(b))", "(Retired(BrianWinter)", "all x.((BrianWinter(x) & Retirement(x)) -> Retirement(x))", "All x.(BrianWinter(x) -> Retirement(x))", "all x.((BrianWinter(x) & Retired(x)) -> -Retired(x))", "BrianWinter isRetired(BrianWinter)", "all x.((BrianWinter(x) & -Retired(x)) -> Retirement(x))", "all x.((BrianWinter(x) & Retired(x)) -> IsRetired(x))", "all x.((BrianWinter(x) & Retirement(x)) -> BrianWinter(x))", "all x.((BrianWinter(x) & retired(x)) -> Retired(x))"]}
{"id": "folio_train_1952", "nl": "Andy Winter is a referee.", "fol": "Referee(Andywinter)", "prediction": ["all x.(Referee(x) -> AndyWinter(x))", "all x.((AndyWinter(x) & Referee(x)) -> Referee(x))", "(Referee(AndyWinter)", "All x.((AndyWinter(x) & Referee(x)) -> Referee(x))", "all x.(Referee(x) -> AndyWinter(x))", "all x.((AndyWinter(x) & Referee(x)) -> Referee(x))", "Andy Winter is a Referee(Andy)", "All x.(Referee(x) -> AndyWinter(x))", "(Referee(AndyWinter))", "all x.(Referee(x) -> AndyWarren(x))", "exists x.(Referee(x) & AndyWinter(x))", "All x.((AndyWinter(x) & Referee(x)) -> Referee(x))", "all x.((AndyWinter(x) & Referee(x)) -> -Referee(x))", "all x.((AndyWinter(x) & Referee(x)) -> Refused(x))", "all x.((AndyWinter(x) & Referee(x)) -> Referee(x))", "all x.(Referee(x) -> (AndyWinter)))"]}
{"id": "folio_train_1953", "nl": "People are either interested in puzzles or bad at chess.", "fol": "all x.(InterestedInPuzzles(x) | BadAtChess(x))", "prediction": ["all x.(Person(x) -> (InterestsInPuzzles(x) | BadAtChess(x)))", "exists x.(Person(x) & (InterestsInPuzzles(x) | BadAtChess(x)))", "all x.(Person(x) -> (InterestingInPuzzles(x) | BadAtChess(x)))", "all x.(Puzzle(x) | BadChess(x))", "all x.((Person(x) & (InterestsInPuzzles(x) | BadAtChess(x))) -> (InterestsInPuzzles(x) | BadAtChess(x)))", "exists x.(Person(x) & (InterestingInPuzzles(x) | BadAtChess(x)))", "all x.((Person(x) & (InterestsInPuzzles(x) | BadAtChess(x))) -> (InterestedInPuzzles(x) | BadAtChess(x)))", "all x.(People(x) -> (InterestsInPuzzles(x) | BadAtChess(x)))", "exists x.(Person(x) & (InterestInPuzzles(x) | BadAtChess(x)))", "all x.((Person(x) & (InterestsInPuzzles(x) | BadAtChess(x))) -> (InterestsInPuzzles(x) | BadAtChess(x))))", "all x.((Person(x) & (InterestsInPuzzles(x) | BadAtChess(x))) -> (InterestsInPuzzles(x) & BadAtChess(x)))", "all x.(People(x) -> (InterestingInPuzzles(x) | BadAtChess(x)))", "all x.((Person(x) & (InterestsInPuzzles(x) | BadAtChess(x))) -> (InterestsInPuzzles(x)))", "all x.((Person(x) & (InterestsInPuzzles(x) | BadAtChess(x))) -> (BadAtChess(x)))", "all x.(Person(x) -> (InterestedInPuzzles(x) | BadAtChess(x)))", "all x.((Person(x) & (InterestsInPuzzles(x) | BadAtChess(x))) -> (InterestedInPuzzles(x) | BadAtChess(x))))"]}
{"id": "folio_train_1954", "nl": "If a person is bad at chess, then they don't play a lot of chess.", "fol": "all x.(BadAtChess(x) -> -PlaysALotOfChess(x))", "prediction": ["all x.(BadAtChess(x) -> -PlaysLotOfChess(x))", "all x.((Person(x) & BadAtChess(x)) -> -PlaysLotOfChess(x))", "all x.(BadAtChess(x) -> -PlaysLittleChess(x))", "all x.((Person(x) & BadAtChess(x)) -> -PlayLotOfChess(x))", "all x.((Person(x) & BadAtChess(x)) -> -PlaysLittleChess(x))", "all x.(BadAtChess(x) -> -PlayLotOfChess(x))", "all x.(BadAtChess(x) -> -PlaysLotsOfChess(x))", "all x.((Person(x) & BadAtChess(x)) -> -PlaysLotsOfChess(x))", "all x.(BadAtChess(x) -> -PlaysLOTOfChess(x))", "all x.((Person(x) & BadAtChess(x)) -> -PlaysLOTOfChess(x))", "all x.(BadAtChess(x) -> -(PlaysLotOfChess(x) | PlaysLotOfChess(x))))", "all x.((Person(x) & BadAtChess(x)) -> -PlaysLargeAtChess(x))", "all x.(BadAtChess(x) -> -PlaysChess(x))", "all x.(BadAtChests(x) -> -PlaysLotOfChess(x))", "all x.(BadAtChess(x) -> -(PlaysLotOfChess(x) & PlaysLotOfChess(x)))", "all x.(BadAtChess(x) -> -PlaysMuchChess(x))"]}
{"id": "folio_train_1955", "nl": "A person is either a planner or a creative person.", "fol": "all x.(IsAPlanner(x) | IsCreative(x))", "prediction": ["all x.(Person(x) -> (Planner(x) | CreativePerson(x)))", "all x.(Person(x) -> (Planner(x) | Creative(x)))", "exists x.(Person(x) & (Planner(x) | CreativePerson(x)))", "all x.(Planner(x) | CreativePerson(x))", "exists x.(Person(x) & (Planner(x) | Creative(x)))", "all x.(Person(x) -> (Planner(x) | CreativePerson(x)))", "exists x.(Person(x) & Planner(x) & CreativePerson(x))", "all x.((Person(x) & Planner(x)) | CreativePerson(x))", "all x.(Person(x) -> (Planner(x) | CreativityPerson(x)))", "all x.(Person(x) -> (Planner(x) | Creativity(x)))", "all x.(Person(x) -> (Planner(x) | CreativePersonnel(x)))", "all x.(Person(x) -> (Planner(x) | CreativePersonal(x)))", "all x.(Person(x) -> (Planner(x) | CreativePerson(x)))", "all x.(Person(x) -> (Planner(x) | Creative(x)))", "all x.(Person(x) & (Planner(x) | CreativePerson(x)))", "exists x.(Person(x) & Planner(x) | CreativePerson(x))"]}
{"id": "folio_train_1956", "nl": "Erica is someone who plays a lot of chess.", "fol": "PlaysALotOfChess(Erica)", "prediction": ["all x.(Erica(x) -> PlaysChess(x))", "all x.(Erica(x) -> PlaysLotsOfChess(x))", "all x.((Erica(x) & PlaysChess(x)) -> PlaysChess(x))", "all x.((Erica(x) & PlaysChess(x)) -> Plays(x,Chess))", "(PlaysChess(Erica) | PlaysChess(Erica)))", "all x.((Erica(x) & Plays(x,Chess)) -> Plays(x,Chess))", "all x y.((Erica(x) & Chess(y)) -> Plays(x,y))", "(PlaysChess(Erica) & LotsOfChess(Erica))", "all x.((Erica(x) & PlaysLotsOfChess(x)) -> Plays(x,Chess))", "all x.((Erica(x) & PlaysLotsOfChess(x)) -> PlaysLotsOfChess(x))", "all x.(Erica(x) -> Plays(x,Chess))", "all x y.((Erica(x) & Chess(y)) -> PlaysLots(x,y))", "exists x.(Erica(x) & PlaysChess(x))", "all x.(Erica(x) -> (PlaysChess(x) & LotsOfChess(x)))", "all x.((Erica(x) & PlaysChess(x)) -> Plays(x,Chess,Chess))", "all x.((Erica(x) & PlaysChess(x)) -> LotsOf(x,Chess))"]}
{"id": "folio_train_1957", "nl": "If Erica is neither bad at chess nor creative, then Erica is either someone who plans and is creative, or someone who neither plans nor is creative.", "fol": "(-(BadAtChess(Erica) | IsCreative(Erica)) -> -((IsAPlanner(Erica) & -IsCreative(Erica)) | (-IsAPlanner(Erica) & IsCreative(Erica))))", "prediction": ["all x.((Erica(x) & -BadAtChess(x) & -Creative(x)) -> (Plans(x) | -Plans(x) | -Creative(x)))", "all x.((Erica(x) & -BadAtChess(x) & -Creative(x)) -> (Plans(x) | -Plans(x) & -Creative(x)))", "all x.((Erica(x) & -BadAtChess(x) & -Creative(x)) -> (PlansAndCreative(x) | -PlansAndCreative(x)))", "all x.((Erica(x) & -(BadAtChess(x) | Creative(x))) -> (Plans(x) | -Plans(x) | -Creative(x)))", "all x.((Erica(x) & -BadAtChess(x) & -Creative(x)) -> (Plans(x) | -Plans(x)))", "all x.((Erica(x) & -BadAtChess(x) & -Creative(x)) -> (PlansCreative(x) | -PlansCreative(x)))", "all x.((Erica(x) & -(BadAtChess(x) | Creative(x))) -> (Plans(x) | -Plans(x) | -Creative(x))))", "all x.((Erica(x) & -BadAtChess(x) & -Creative(x)) -> (Plans(x) & Creative(x)) | -Plans(x) & Creative(x)))", "all x.((Erica(x) & -(BadAtChess(x) | Creative(x))) -> (Plans(x) | -Plans(x) & -Creative(x)))", "all x.((Erica(x) & -(BadAtChess(x) | Creative(x))) -> (Plans(x) | -Plans(x) & Creative(x)))", "all x.((Erica(x) & -BadAtChess(x) & -Creative(x)) -> (PlansAndIsCreative(x) | -PlansAndIsCreative(x)))", "all x.((Erica(x) & -BadAtChess(x) & -Creative(x)) -> (Plans(x) | -Plans(x) & Creative(x)))", "all x.((Erica(x) & -BadAtChess(x) & -Creative(x)) -> (Plans(x) | -Plans(x) | -Creative(x))))", "all x.((Erica(x) & -BadAtChess(x) & -Creative(x)) -> (Plans(x) & Creative(x)) | (-Plans(x) & Creative(x))))", "all x.((Erica(x) & -BadAtChess(x) & -Creative(x)) -> (Plans(x) | -Creative(x)))", "all x.((Erica(x) & -BadChess(x) & -Creative(x)) -> (Plans(x) | -Plans(x) | -Creative(x)))"]}
{"id": "folio_train_1958", "nl": "Erica plans.", "fol": "IsAPlanner(Erica)", "prediction": ["all x.(Erica(x) -> Plans(x))", "exists x.(Erica(x) & Plans(x))", "all x y.((Erica(x) & Plan(y)) -> Plans(x,y))", "all x y.((Erica(x) & Plan(y)) -> Plan(x,y))", "all x.(Erica(x) -> Planes(x))", "all x.((Erica(x) & Plan(x)) -> Plans(x))", "all x.((Erica(x) & Plan(x)) -> Plan(x))", "all x.(EricaPlans(x) -> Planes(x))", "all x.((Erica(x) & Plans(x)) -> Planes(x))", "all x.((Erica(x) & Plans(x)) -> Plans(x))", "All x.(Erica(x) -> Plans(x))", "all x y.((Erica(x) & Plan(y)) -> Planes(x,y))", "all x y.((Erica(x) & Plan(y)) -> Plans(x))", "all x.(EricaPlans(x) -> Plans(x))", "all x.((Erica(x) & Planes(x)) -> Planes(x))", "all x y.((Erica(x) & Plan(y)) -> Planning(x,y))"]}
{"id": "folio_train_1959", "nl": "Erica is interested in puzzles and is creative.", "fol": "(InterestedInPuzzles(Erica) & IsCreative(Erica))", "prediction": ["all x.(Erica(x) -> (InterestsInPuzzles(x) & Creative(x)))", "(InterestingInPuzzles(Erica) & Creative(Erica))", "(InterestsInPuzzles(Erica) & Creative(Erica))", "all x y.((Erica(x) & Puzzle(y)) -> (InterestsIn(x,y) & Creative(x)))", "all x.((Erica(x) & Puzzle(y)) -> (InterestsIn(x,y) & Creative(x)))", "all x.((Erica(x) & InterestsInPuzzles(x) & Creative(x)) -> InterestedInPuzzles(x))", "all x.((Erica(x) & InterestsInPuzzles(x) & Creative(x)) -> InterestsInPuzzles(x))", "all x y.((Erica(x) & Puzzle(y)) -> (Interests(x,y) & Creative(x)))", "all x.((Erica(x) & InterestInPuzzles(x) & Creative(x)) -> InterestInPuzzles(x))", "(InterestingInPuzzles(Erica,Puzzles) & Creative(Erica,Puzzles))", "all x.((Erica(x) & InterestsInPuzzles(x) & Creative(x)) -> InterestsInPuzzles(x))", "all x.((Erica(x) & InterestInPuzzles(x) & Creative(x)) -> InterestedInPuzzles(x))", "exists x.(Erica(x) & InterestsInPuzzles(x) & Creative(x))", "all x.(Erica(x) -> (InterestsInPuzzles(x) & Creativity(x)))", "all x.((Erica(x) & InterestsInPuzzles(x) & Creative(x)) -> InterestsInPuzzles(x))", "(InterestsInPuzzles(Erica,Puzzles) & Creative(Erica,Puzzles))"]}
{"id": "folio_train_1960", "nl": "Erica is either interested in puzzles or is creative.", "fol": "(InterestedInPuzzles(Erica) | IsCreative(Erica))", "prediction": ["all x.(Erica(x) -> (InterestsInPuzzles(x) | Creative(x)))", "all x.(Erica(x) -> (InterestingInPuzzles(x) | Creative(x)))", "(InterestingInPuzzles(Erica) | Creative(Erica))", "exists x.(Erica(x) & (InterestsInPuzzles(x) | Creative(x)))", "all x.((Erica(x) & (InterestsInPuzzles(x) | Creative(x))) -> (InterestsInPuzzles(x)))", "all x.((Erica(x) & (InterestsInPuzzles(x) | Creative(x))) -> (InterestsInPuzzles(x) | Creative(x)))", "all x.((Erica(x) & (InterestsInPuzzles(x) | Creative(x))) -> (InterestedInPuzzles(x) | Creative(x)))", "all x.((Erica(x) & (InterestsInPuzzles(x) | Creative(x))) -> (InterestsInPuzzles(x) & Creative(x)))", "exists x.(Erica(x) & (InterestingInPuzzles(x) | Creative(x)))", "all x.((Erica(x) & (InterestingInPuzzles(x) | Creative(x))) -> (InterestingInPuzzles(x) | Creative(x)))", "all x.((Erica(x) & (InterestsInPuzzles(x) | Creative(x))) -> InterestedInPuzzles(x))", "all x.(Erica(x) -> (InterestedInPuzzles(x) | Creative(x)))", "all x.((Erica(x) & (InterestsInPuzzles(x) | Creative(x))) -> (InterestedInPuzzles(x) & Creative(x)))", "all x.((Erica(x) & (InterestsInPuzzles(x) | Creative(x))) -> (InterestedInPuzzles(x)))", "all x.((Erica(x) & (InterestsInPuzzles(x) | Creative(x))) -> Is(x,Puzzles))", "all x.((Erica(x) & (InterestingInPuzzles(x) | Creative(x))) -> (InterestedInPuzzles(x) | Creative(x)))"]}
{"id": "folio_train_1961", "nl": "If Erica plans ahead or plays a lot of chess matches, then Erica is not interested in puzzles and creative.", "fol": "((IsAPlanner(Erica) | PlaysALotOfChess(Erica)) -> -(InterestedInPuzzles(Erica) & IsCreative(Erica)))", "prediction": ["all x.((Erica(x) & (PlansAhead(x) | PlaysLotsOfChessMatches(x))) -> -InterestsInPuzzles(x) & -InterestsInCreative(x))", "all x.((Erica(x) & (PlansAhead(x) | PlaysLotsOfChessMatches(x))) -> -InterestsInPuzzles(x) & -Creative(x))", "all x.((Erica(x) & (PlansAhead(x) | PlaysLotsOfChessMatches(x))) -> -InterestingInPuzzles(x) & -Creative(x))", "all x.((Erica(x) & (PlansAhead(x) | PlaysLotsOfChessMatches(x))) -> -InterestingInPuzzles(x) & -InterestingInCreative(x))", "all x.((Erica(x) & (PlansAhead(x) | PlaysLotsOfChessMatches(x))) -> (-InterestsInPuzzles(x) & -InterestsInCreative(x)))", "all x.((Erica(x) & (PlansAhead(x) | PlaysLotsOfChessMatches(x))) -> (-InterestsInPuzzles(x) & -Creative(x)))", "all x.((Erica(x) & (PlansAhead(x) | PlaysLotsOfChessMatches(x))) -> -InterestsInPuzzlesAndCreative(x))", "all x.((Erica(x) & (PlansAhead(x) | PlaysLotsOfChessMatches(x))) -> -InterestingInPuzzlesAndCreative(x))", "all x.((Erica(x) & (PlansAhead(x) | PlaysLotsOfChessMatches(x))) -> -(InterestedInPuzzles(x) & Creative(x)))", "all x.((Erica(x) & (PlansAhead(x) | PlaysLotsOfChessMatches(x))) -> -InterestsInPuzzles(x) & -Imaginative(x))", "all x.((Erica(x) & (PlansAhead(x) | PlaysLotsOfChessMatches(x))) -> -InterestedInPuzzles(x) & -Creative(x))", "all x.((Erica(x) & (PlansAhead(x) | PlaysLotsOfChessMatch(x))) -> -InterestsInPuzzles(x) & -InterestsInCreative(x))", "all x.((EricaPlansAhead(x) | PlaysLotsOfChessMatches(x)) -> -InterestsInPuzzlesAndCreative(x))", "all x.((Erica(x) & PlansAhead(x) | PlaysLotsOfChessMatches(x)) -> -InterestsInPuzzlesAndCreative(x))", "all x.((Erica(x) & (PlansAhead(x) | PlaysLotsOfChessMatches(x))) -> -InterestingInPuzzles(x) & -CreativeInPuzzles(x))", "all x.((Erica(x) & (PlansAhead(x) | PlaysLotsOfChessMatches(x))) -> -InterestingInPuzzles(x) & -Imaginative(x))"]}
{"id": "folio_train_1962", "nl": "If Erica is creative, then Erica is not interested in puzzles and creative.", "fol": "(IsCreative(Erica) -> (-InterestedInPuzzles(Erica) & IsCreative(Erica)))", "prediction": ["all x.((Erica(x) & Creative(x)) -> (-InterestsInPuzzles(x) & -InterestsInCreative(x)))", "all x.((Erica(x) & Creative(x)) -> -InterestsInPuzzles(x) & -InterestsInCreative(x))", "all x.(Creative(x) -> (-InterestsInPuzzles(x) & -InterestsInCreative(x)))", "all x.((Erica(x) & Creative(x)) -> -InterestingInPuzzles(x) & -InterestingInCreative(x))", "all x.((Erica(x) & Creative(x)) -> -InterestsInPuzzlesAndCreative(x))", "all x.(Creative(x) -> -InterestsInPuzzles(x) & -InterestsInCreative(x))", "all x.((Erica(x) & Creative(x)) -> (-InterestingInPuzzles(x) & -InterestingInCreative(x)))", "all x.((Erica(x) & Creative(x)) -> -(InterestsInPuzzles(x) & -InterestsInCreative(x)))", "all x.((Erica(x) & Creative(x)) -> (-InterestsInPuzzles(x) & -InterestsInCreativity(x)))", "all x.((Erica(x) & Creative(x)) -> -(InterestedInPuzzles(x) & Creative(x)))", "all x.((Erica(x) & Creative(x)) -> -InterestsInPuzzles(x) & -InterestsInCreative(x)))", "all x.((Erica(x) & Creative(x)) -> -(InterestedInPuzzles(x) & InterestedInCreative(x)))", "all x.((Erica(x) & Creative(x)) -> -InterestsInPuzzles(x) & -InterestsInCreativity(x))", "all x.(Creative(x) -> -InterestsInPuzzlesAndCreative(x))", "all x.(Creative(x) -> (-InterestingInPuzzles(x) & -InterestingInCreative(x)))", "all x.((Erica(x) & Creative(x)) -> -InterestedInPuzzles(x) & -InterestedInCreative(x))"]}
{"id": "folio_train_1963", "nl": "If Erica is interested in puzzles and is creative, then Erica is not creative.", "fol": "((InterestedInPuzzles(Erica) & IsCreative(Erica)) -> -IsCreative(Erica))", "prediction": ["all x.((Erica(x) & InterestInPuzzles(x) & Creative(x)) -> -Creative(x))", "all x.((Erica(x) & InterestsInPuzzles(x) & Creative(x)) -> -Creative(x))", "all x.((Erica(x) & InterestsInPuzzles(x) & Creative(x)) -> -Creative(x))", "all x.((Erica(x) & InterestingInPuzzles(x) & Creative(x)) -> -Creative(x))", "all x.((Erica(x) & InterestedInPuzzles(x) & Creative(x)) -> -Creative(x))", "all x.((Erica(x) & InterestedInPuzzles(x) & Creative(x)) -> -Creative(x))", "all x.((Elica(x) & InterestInPuzzles(x) & Creative(x)) -> -Creative(x))", "all x.((InterestsInPuzzles(x) & Creative(x)) -> -Creative(x))", "all x.((Elica(x) & InterestsInPuzzles(x) & Creative(x)) -> -Creative(x))", "all x.((Erica(x) & InterestingInPuzzles(x) & Creative(x)) -> -Creative(x))", "all x.(((Erica(x) & InterestInPuzzles(x) & Creative(x)) -> -Creative(x))", "all x.((InterestingInPuzzles(x) & Creative(x)) -> -Creative(x))", "all x.(((Erica(x) & InterestsInPuzzles(x) & Creative(x)) -> -Creative(x))", "all x.((Elizabeth(x) & InterestsInPuzzles(x) & Creative(x)) -> -Creative(x))", "all x.((Erica(x) & InterestInPuzzles(x) & Creative(x)) -> -creative(x))", "all x.((Erica(x) & InterestsInPuzzles(x) & Creative(x)) -> -creative(x))"]}
{"id": "folio_train_1964", "nl": "If Erica either plays a lot of chess matches or is creative, then Erica is neither interested in puzzles nor a person who plays a lot of chess matches.", "fol": "((PlaysALotOfChess(Erica) | IsCreative(Erica)) -> (-InterestedInPuzzles(Erica) & -PlaysALotOfChess(Erica)))", "prediction": ["all x.((Erica(x) & (PlaysLotOfChessMatches(x) | Creative(x))) -> (-InterestingInPuzzles(x) & -PlaysLotOfChessMatches(x)))", "all x.((Erica(x) & (PlaysLotsOfChessMatches(x) | Creative(x))) -> (-InterestingInPuzzles(x) & -PlaysLotsOfChessMatches(x)))", "all x.((Erica(x) & (PlaysLotOfChessMatches(x) | Creative(x))) -> (-InterestedInPuzzles(x) & -PlaysLotOfChessMatches(x)))", "all x.((Erica(x) & (PlaysLotOfChessMatches(x) | Creative(x))) -> -(InterestedInPuzzles(x) | PlaysLotOfChessMatches(x))))", "all x.((Erica(x) & (PlaysLotOfChessMatches(x) | Creative(x))) -> (-InterestsInPuzzles(x) & -PlaysLotOfChessMatches(x)))", "all x.((Erica(x) & (PlaysLotOfChessMatches(x) | Creative(x))) -> -(InterestingInPuzzles(x) | PlaysLotOfChessMatches(x))))", "all x.((Erica(x) & (PlaysLotsOfChessMatches(x) | Creative(x))) -> (-InterestedInPuzzles(x) & -PlaysLotsOfChessMatches(x)))", "all x.((Erica(x) & (PlaysLotsOfChessMatches(x) | Creative(x))) -> -(InterestedInPuzzles(x) | PlaysLotsOfChessMatches(x))))", "all x.((Erica(x) & (PlaysLotsOfChessMatches(x) | Creative(x))) -> (-InterestsInPuzzles(x) & -PlaysLotsOfChessMatches(x)))", "all x.((Erica(x) & (PlaysLotOfChessMatch(x) | Creative(x))) -> (-InterestingInPuzzles(x) & -PlaysLotOfChessMatch(x)))", "all x.((Erica(x) & (PlaysLotsOfChessMatches(x) | Creative(x))) -> -(InterestingInPuzzles(x) | PlaysLotsOfChessMatches(x))))", "all x.((Erica(x) & (PlaysLotOfChessMatches(x) | Creative(x))) -> (-InterestingInPuzzles(x) | PlaysLotOfChessMatches(x)))", "all x.((Erica(x) & (PlaysLotOfChessMatches(x) | Creative(x))) -> -(InterestsInPuzzles(x) | PlaysLotOfChessMatches(x))))", "all x.((Erica(x) & (PlaysLittleChessMatches(x) | Creative(x))) -> (-InterestingInPuzzles(x) & -PlaysLittleChessMatches(x)))", "all x.((Erica(x) & (PlaysLotOfChessMatches(x) | Creative(x))) -> (-InterestingInPuzzles(x) & -InterestingInChessMatches(x)))", "all x.((Erica(x) & (PlaysLotOfChessMatch(x) | Creative(x))) -> (-InterestedInPuzzles(x) & -PlaysLotOfChessMatch(x)))"]}
{"id": "folio_train_1965", "nl": "If Erica is interested in puzzles and plays a lot of chess matches, then Erica is either a person who plays a lot of chess matches or a person that is creative.", "fol": "((InterestedInPuzzles(Erica) & PlaysALotOfChess(Erica)) -> (PlaysALotOfChess(Erica) | IsCreative(Erica)))", "prediction": ["all x.((Puzzles(x) & PlaysLotsOfChessMatches(x)) -> (PlaysLotsOfChessMatches(x) | Creative(x)))", "all x.((Erica(x) & InterestsInPuzzles(x) & PlaysLotsOfChessMatches(x)) -> (PlaysLotsOfChessMatches(x) | Creative(x)))", "all x.((Erica(x) & InterestsInPuzzles(x) & PlaysLotsOfChessMatches(x)) -> (PlaysLotsOfChessMatches(x) | Creative(x)))", "all x.((Erica(x) & InterestInPuzzles(x) & PlaysLotsOfChessMatches(x)) -> (PlaysLotsOfChessMatches(x) | Creative(x)))", "all x.((InterestingInPuzzles(x) & PlaysLotsOfChessMatches(x)) -> (PlaysLotsOfChessMatches(x) | Creative(x)))", "all x.((Erica(x) & InterestsInPuzzles(x) & PlaysLotOfChessMatches(x)) -> (PlaysLotOfChessMatches(x) | Creative(x)))", "all x.((Puzzles(x) & PlaysLotsOfChessMatches(x)) -> (Person(x) & PlaysLotsOfChessMatches(x) | Creative(x)))", "all x.((Puzzle(x) & PlaysLotsOfChessMatches(x)) -> (PlaysLotsOfChessMatches(x) | Creative(x)))", "all x.((Puzzles(x) & PlaysLotsOfChessMatches(x)) -> (Person(x) & PlaysLotsOfChessMatches(x) | CreativePerson(x)))", "all x.((PuzzleInterest(x) & PlaysLotsOfChessMatches(x)) -> (PlaysLotsOfChessMatches(x) | Creative(x)))", "all x.((InterestsInPuzzles(x) & PlaysLotsOfChessMatches(x)) -> (PlaysLotsOfChessMatches(x) | Creative(x)))", "all x.((Puzzles(x) & PlaysLotsOfChessMatches(x)) -> (Person(x) & PlaysLotsOfChessMatches(x)) | Person(x) & Creative(x)))", "all x.((Puzzles(x) & LotsOfChessMatches(x)) -> (PlaysLotsOfChessMatches(x) | Creative(x)))", "all x.((Puzzles(x) & PlaysLotsOfChessMatches(x)) -> (Person(x) & PlaysLotsOfChessMatches(x)) | CreativePerson(x)))", "all x.((Puzzles(x) & PlaysLotsOfChessMatches(x)) -> (PlaysLotsOfChessMatches(x) | CreativePerson(x)))", "all x.((Puzzles(x) & PlaysLotsOfChessMatch(x)) -> (PlaysLotsOfChessMatch(x) | Creative(x)))"]}
{"id": "folio_train_1966", "nl": "If Erica plans ahead or is interested in puzzles, then Erica is creative.", "fol": "((IsAPlanner(Erica) | InterestedInPuzzles(Erica)) -> IsCreative(Erica))", "prediction": ["all x.((Erica(x) & (PlansAhead(x) | InterestsInPuzzles(x))) -> Creative(x))", "all x.((Erica(x) & (PlansAhead(x) | InterestsInPuzzles(x))) -> Creative(x))", "all x.((Erica(x) & (PlansAhead(x) | InterestedInPuzzles(x))) -> Creative(x))", "all x.((Erica(x) & (PlansForward(x) | InterestsInPuzzles(x))) -> Creative(x))", "all x.((Erica(x) & PlansAhead(x) | InterestsInPuzzles(x)) -> Creative(x))", "all x.((Erica(x) & (PlansAhead(x) | IsInterestingInPuzzles(x))) -> Creative(x))", "all x.((Erica(x) & (PlansBefore(x) | InterestsInPuzzles(x))) -> Creative(x))", "all x.((Erica(x) & (PlansAhead(x) | InterestInPuzzles(x))) -> Creative(x))", "all x.((Erica(x) & (PlansForward(x) | InterestsInPuzzles(x))) -> Creative(x))", "all x.((Erica(x) & (PlansAhead(x) | InterestedInPuzzles(x))) -> Creative(x))", "all x.((Erica(x) & PlansAhead(x) | InterestsInPuzzles(x)) -> Creative(x))", "all x.((Erica(x) | InterestsInPuzzles(x)) -> Creative(x))", "all x y.((Erica(x) & (PlansAhead(x) | InterestsInPuzzles(x))) -> Creative(x))", "all x.((Erica(x) & (PlansAhead(x) | InterestsInPuzzles(x))) -> Creativity(x))", "all x.((PlansAhead(x) | InterestsInPuzzles(x)) -> Creative(x))", "all x.((EricaPlansAhead(x) | InterestsInPuzzles(x)) -> Creative(x))"]}
{"id": "folio_train_1967", "nl": "If Erica is either bad at chess or interested in puzzles, then Erica is not a person who plays a lot of chess matches and creative.", "fol": "((BadAtChess(Erica) | InterestedInPuzzles(Erica)) -> -(PlaysALotOfChess(Erica) & IsCreative(Erica)))", "prediction": ["all x.((Erica(x) & (BadAtChess(x) | InterestInPuzzles(x))) -> -(PlaysLotsOfChessMatches(x) & Creative(x)))", "all x.((Erica(x) & (BadAtChess(x) | InterestInPuzzles(x))) -> -PlaysLotsOfChessMatches(x) & Creative(x))", "all x.((Erica(x) & (BadChess(x) | InterestInPuzzles(x))) -> -(PlaysLotsOfChessMatches(x) & Creative(x)))", "all x.((Person(x) & (BadAtChess(x) | InterestInPuzzles(x))) -> -PlaysLotsOfChessMatches(x) & Creative(x))", "all x.((BadAtChess(x) | InterestInPuzzles(x)) -> -(PlaysLotsOfChessMatches(x) & Creative(x)))", "all x.((Erica(x) & (BadAtChess(x) | InterestingInPuzzles(x))) -> -(PlaysLotsOfChessMatches(x) & Creative(x)))", "all x.((Erica(x) & (BadAtChess(x) | InterestInPuzzles(x))) -> -PlaysLotsOfChessMatches(x) & -Creative(x))", "all x.((Erica(x) & (BadChess(x) | InterestInPuzzles(x))) -> -PlaysLotsOfChessMatches(x) & Creative(x))", "all x.((Erica(x) & (BadAtChess(x) | InterestInPuzzles(x))) -> -PlaysLotsOfChessMatchesAndCreative(x))", "all x.((Erica(x) & (BadAtChess(x) | InterestdInPuzzles(x))) -> -(PlaysLotsOfChessMatches(x) & Creative(x)))", "all x.((Person(x) & (BadChess(x) | InterestInPuzzles(x))) -> -PlaysLotsOfChessMatches(x) & Creative(x))", "all x.((Erica(x) & (BadAtChess(x) | InterestInPuzzles(x))) -> -(PlaysLittleChessMatches(x) & Creative(x)))", "all x.((Erica(x) & (BadAtChess(x) | InterestInPuzzles(x))) -> -(PlaysChessMatches(x) & Creative(x)))", "all x.((Erica(x) & (BadAtChess(x) | InterestingInPuzzles(x))) -> -PlaysLotsOfChessMatches(x) & Creative(x))", "all x.((Person(x) & (BadAtChess(x) | InterestInPuzzles(x))) -> -PlaysLotsOfChessMatches(x) & -Creative(x))", "all x.((BadChess(x) | InterestInPuzzles(x)) -> -(PlaysLotsOfChessMatches(x) & Creative(x)))"]}
{"id": "folio_train_1968", "nl": "Soccer players have a right foot and a left foot.", "fol": "all x.((IsSoccerPlayer(x) -> HasLeftFoot(x)) & HasRightFoot(x))", "prediction": ["all x.(SoccerPlayer(x) -> (HasRightFoot(x) & HasLeftFoot(x)))", "all x.(SoccerPlayer(x) -> (RightFoot(x) & LeftFoot(x)))", "all x y.((SoccerPlayer(x) & Player(y)) -> (HasRightFoot(x) & HasLeftFoot(y)))", "(all x.(SoccerPlayer(x) -> RightFoot(x)) & all y.(SoccerPlayer(y) -> LeftFoot(y)))", "all x.(SoccerPlayer(x) -> (HasRightFoot(x) & HasLeftFoot(x)))", "all x.(SoccerPlayer(x) -> (HasRightFoot(x) | HasLeftFoot(x)))", "all x.(Soccer(x) -> (HasRightFoot(x) & HasLeftFoot(x)))", "all x y.((SoccerPlayer(x) & Player(y)) -> (HasRightFoot(x,y) & HasLeftFoot(x,y)))", "all x.(SoccerPilot(x) -> (HasRightFoot(x) & HasLeftFoot(x)))", "all x.(SoccerPlayer(x) -> (HasRedFoot(x) & HasLeftFoot(x)))", "all x y.((SoccerPlayer(x) & Player(y)) -> (HasRightFoot(x,y) & HasLeftFoot(y,x)))", "all x y.((SoccerPlayer(x) & RightFoot(y) & LeftFoot(z)) -> (Has(x,y) & Has(x,z)))", "(all x.(SoccerPlayer(x) -> RightFoot(x)) & all y.(SoccerPlayer(y) -> LeftFoot(y))))", "all x.(SoccerPlayer(x) -> (HasFoot(x,Right) & HasFoot(x,Left)))", "all x y.((SoccerPlayer(x) & RightFoot(y)) -> (Has(x,y) & Has(x,y)))", "all x.(SoccerPerson(x) -> (HasRightFoot(x) & HasLeftFoot(x)))"]}
{"id": "folio_train_1969", "nl": "Top soccer players are soccer players who can use their both feet very efficiently.", "fol": "all x.((IsSoccerPlayer(x) & CanUseFootEfficiently(x,Left) & CanUseFootEfficiently(x,Right)) -> IsTopSoccerPlayer(x))", "prediction": ["all x.((SoccerPlayer(x) & SoccerPlayer(x) & UsesBothFeetEfficiently(x)) -> Top(x))", "all x.((SoccerPlayer(x) & SoccerPlayer(x) & CanUseBothFeetEfficiently(x)) -> Top(x))", "all x.(TopSoccerPlayer(x) -> (SoccerPlayer(x) & UsesBothFeetEfficiently(x)))", "all x.(TopSoccerPlayer(x) -> (SoccerPlayer(x) & CanUseBothFeetEfficiently(x)))", "all x.((SoccerPlayer(x) & Top(x)) -> (SoccerPlayer(x) & CanUseBothFeetEfficiently(x)))", "all x.((SoccerPlayer(x) & Top(x)) -> (SoccerPlayer(x) & UsesBothFeetEfficiently(x)))", "all x.((TopSoccerPlayer(x) & SoccerPlayer(x) & UsesBothFeetEfficiently(x)) -> TopSoccerPlayer(x))", "all x.((SoccerPlayer(x) & CanUseBothFeetEfficiently(x)) -> Top(x))", "all x.((SoccerPlayer(x) & SoccerPlayer(x)) -> CanUseBothFeetEfficiently(x))", "all x.((TopSoccerPlayer(x) & SoccerPlayer(x) & CanUseBothFeetEfficiently(x)) -> TopSoccerPlayer(x))", "all x.(TopSoccerPlayer(x) -> (SoccerPlayer(x) & CanUseBothFeetEfficiently(x)))", "all x.(TopSoccerPlayer(x) -> (SoccerPlayer(x) & UsesBothFeetEfficiently(x)))", "all x.((SoccerPlayer(x) & SoccerPlayer(x) & CanUseBothFeet(x)) -> Top(x))", "all x.(TopSoccerPlayer(x) -> (SoccerPlayer(x) & CanUseBothFeet(x) & Efficiently(x)))", "all x.((TopSoccerPlayer(x) & SoccerPlayer(x) & UsesBothFeetEfficiently(x)) -> Top(x))", "all x.((SoccerPlayer(x) & CanUseBothFeet(x)) -> Top(x))"]}
{"id": "folio_train_1970", "nl": "If a soccer player can score many goals using left foot, then they can use that foot very efficiently.", "fol": "all x.((IsSoccerPlayer(x) & HasScoredManyGoals(x,Left)) -> CanUseFootEfficiently(x,Left))", "prediction": ["all x.((SoccerPlayer(x) & CanScoreManyGoalsUsingLeftFoot(x)) -> CanUseFootEfficiently(x))", "all x.((SoccerPlayer(x) & CanScoreManyGoalsUsingLeftFoot(x)) -> CanUseLeftFootEfficiently(x))", "all x.((SoccerPlayer(x) & ScoresManyGoalsUsingLeftFoot(x)) -> UsesFootEfficiently(x))", "all x.((SoccerPlayer(x) & CanScoreManyGoalsWithLeftFoot(x)) -> CanUseFootEfficiently(x))", "all x.((SoccerPlayer(x) & ScoresManyGoalsWithLeftFoot(x)) -> UsesFootEfficiently(x))", "all x.((SoccerPlayer(x) & ScoresManyGoalsUsingLeftFoot(x)) -> CanUseFootEfficiently(x))", "all x.((SoccerPlayer(x) & CanScoreManyGoalsWithLeftFoot(x)) -> CanUseLeftFootEfficiently(x))", "all x.((SoccerPlayer(x) & CanScoreManyGoals(x) & LeftFoot(x)) -> CanUseFootEfficiently(x))", "all x.((SoccerPlayer(x) & ScoresManyGoalsWithLeftFoot(x)) -> CanUseFootEfficiently(x))", "all x.((SoccerPlayer(x) & CanScoreManyGoalsUsingLeftFoot(x)) -> CanUseLossFootEfficiently(x))", "all x.((SoccerPlayer(x) & CanScoreManyGoals(x) & UsesLeftFoot(x)) -> CanUseFootEfficiently(x))", "all x.((SoccerPlayer(x) & CanScoreManyGoalsUsingLeftFoot(x)) -> CanUseFoot(x))", "all x y.((SoccerPlayer(x) & CanScoreManyGoals(x,y) & LeftFoot(y)) -> CanUseFoot(x,y))", "all x.((SoccerPlayer(x) & CanScoreManyGoalsUsingLeftFoot(x)) -> CanUseLeftFoot(x))", "all x y.((SoccerPlayer(x) & CanScoreManyGoalsUsingLeftFoot(x)) -> CanUseFootEfficiently(y))", "all x y.((SoccerPlayer(x) & CanScoreManyGoals(x,y) & LeftFoot(y)) -> CanUseFootEfficiently(x,y))"]}
{"id": "folio_train_1971", "nl": "If a soccer player can score many goals using right foot, then they can use that foot very efficiently.", "fol": "all x.((IsSoccerPlayer(x) & HasScoredManyGoals(x,Right)) -> CanUseFootEfficiently(x,Right))", "prediction": ["all x.((SoccerPlayer(x) & CanScoreManyGoalsUsingRightFoot(x)) -> CanUseFootEfficiently(x))", "all x.((SoccerPlayer(x) & ScoresManyGoalsUsingRightFoot(x)) -> UsesFootEfficiently(x))", "all x.((SoccerPlayer(x) & CanScoreManyGoals(x) & UsesRightFoot(x)) -> CanUseFootEfficiently(x))", "all x.((SoccerPlayer(x) & ScoresManyGoalsWithRightFoot(x)) -> UsesFootEfficiently(x))", "all x.((SoccerPlayer(x) & CanScoreManyGoalsWithRightFoot(x)) -> CanUseFootEfficiently(x))", "all x.((SoccerPlayer(x) & ScoresManyGoals(x) & UsesRightFoot(x)) -> UsesFootEfficiently(x))", "all x.((SoccerPlayer(x) & ScoresManyGoalsUsingRightFoot(x)) -> CanUseFootEfficiently(x))", "all x.((SoccerPlayer(x) & ScoresManyGoalsWithRightFoot(x)) -> CanUseFootEfficiently(x))", "all x.((SoccerPlayer(x) & CanScoreManyGoalsUsingRightFoot(x)) -> CanUseRightFootEfficiently(x))", "all x y.((SoccerPlayer(x) & CanScoreManyGoals(x,y) & RightFoot(y)) -> CanUseFoot(x,y))", "all x.((SoccerPlayer(x) & ScoresManyGoals(x) & UsesRightFoot(x)) -> CanUseFootEfficiently(x))", "all x.((SoccerPlayer(x) & ScoresManyGoals(x) & RightFoot(x)) -> UsesFootEfficiently(x))", "all x.((SoccerPlayer(x) & CanScoreManyGoalsWithRightFoot(x)) -> CanUseRightFootEfficiently(x))", "all x.((SoccerPlayer(x) & CanScoreManyGoals(x) & RightFoot(x)) -> CanUseFootEfficiently(x))", "all x.((SoccerPlayer(x) & CanScoreManyGoals(x) & UsesRightFoot(x)) -> CanUseFoot(x))", "all x.((SoccerPlayer(x) & CanScoreManyGoalsUsingRightFoot(x)) -> CanUseFoot(x))"]}
{"id": "folio_train_1972", "nl": "Cristiano Ronaldo is a soccer player.", "fol": "IsSoccerPlayer(Ronaldo)", "prediction": ["all x.((CristianoRonaldo(x) & SoccerPlayer(x)) -> SoccerPlayer(x))", "all x.((CristianoRonaldo(x) & SoccerPlayer(x)) -> CristianoRonaldo(x))", "all x.((CristianoRonaldo(x) & SoccerPlayer(x)) -> CristianoRonaldo(x))", "all x.((Cronocr Ronaldo(x) & SoccerPlayer(x)) -> CristianoRonaldo(x))", "all x.((CruzianoRonaldo(x) & SoccerPlayer(x)) -> CristianoRonaldo(x))", "all x.((CristianoRonaldo(x) & SoccerPlayer(x)) -> Plays(x))", "Cristiano Ronaldo (SoccerPlayer)", "all x.((CristinoRonaldo(x) & SoccerPlayer(x)) -> SoccerPlayer(x))", "all x.((CristianoRonaldo(x) & SoccerPlayer(x)) -> Plays(x,y))", "all x.((CristianoRonaldo(x) & SoccerPlayer(x)) -> FootballPlayer(x))", "all x.((CristianoRonaldo(x) & SoccerPlayer(x)) -> Plays(x,Soccer))", "all x.((Cronocr Ronaldo(x) & SoccerPlayer(x)) -> Cristiano(x))", "all x.((CristianoRonaldo(x) & SoccerPlayer(x)) -> Plays(x))", "Cristiano Ronaldo is a soccer player.", "all x.((CristinoRonaldo(x) & SoccerPlayer(x)) -> Plays(x))", "all x.((CristianoRonaldo(x) & SoccerPlayer(x)) -> Plays(x,Soccer))"]}
{"id": "folio_train_1973", "nl": "Cristiano Ronaldo can use his right foot very efficiently.", "fol": "CanUseFootEfficiently(Ronaldo,Right)", "prediction": ["all x.(CristianoRonaldo(x) -> CanUseRightFootEfficiently(x))", "all x.((CristianoRonaldo(x) & RightFoot(y)) -> CanUseEfficiently(x,y))", "all x.((CristianoRonaldo(x) & RightFoot(x)) -> CanUseEfficiently(x))", "all x.((CristianoRonaldo(x) & RightFoot(x)) -> UsesEfficiently(x))", "all x.((CristianoRonaldo(x) & RightFoot(y)) -> UsesEfficiently(x,y))", "all x y.((CristianoRonaldo(x) & RightFoot(y)) -> CanUseEfficiently(x,y))", "all x.(CristianoRonaldo(x) -> CanUseRightFootEfficiently(x))", "all x y.((CristianoRonaldo(x) & RightFoot(y)) -> UsesEfficiently(x,y))", "all x.(CristinoRonaldo(x) -> CanUseRightFootEfficiently(x))", "all x.((CristinoRonaldo(x) & RightFoot(x)) -> CanUseEfficiently(x))", "all x.((CristinoRonaldo(x) & RightFoot(x)) -> UsesEfficiently(x))", "all x.((CristianoRonaldo(x) & RightFoot(x)) -> UsesEfficiently(x))", "all x.(CristianoRonaldo(x) -> UsesRightFootEfficiently(x))", "all x.(Ronaldo(x) -> CanUseRightFootEfficiently(x))", "all x.(CristianoRonaldo(x) -> CanUseRightFoot(x))", "all x.((CristianoRonaldo(x) & RightFoot(x)) -> VeryEfficientlyUses(x))"]}
{"id": "folio_train_1974", "nl": "Cristiano Ronaldo have scored more than one hundred goals using his left foot.", "fol": "HasScoredManyGoals(Ronaldo,Left)", "prediction": ["all x y.((CristianoRonaldo(x) & LeftFoot(y)) -> ScoredMoreThan(x,y))", "all x.((CristianoRonaldo(x) & LeftFoot(x)) -> ScoredMoreThan(x,100))", "all x y.((CristianoRonaldo(x) & LeftFoot(y)) -> ScoredMoreThan(x,y))", "all x y.((CristianoRonaldo(x) & LeftFoot(y)) -> ScoresMoreThan(x,y))", "all x y.((CristianoRonaldo(x) & LeftFoot(y)) -> ScoresMoreThan(x,y))", "all x.((CristianoRonaldo(x) & LeftFoot(x)) -> ScoresMoreThan(x,100))", "all x.((CristianoRonaldo(x) & LeftFoot(x)) -> ScoredMoreThanOneSixtyGoals(x))", "all x.((CristianoRonaldo(x) & LeftFoot(x)) -> ScoredMoreThan100Goals(x))", "all x.((CristianoRonaldo(x) & LeftFoot(x)) -> ScoredMoreThanOneTenGoals(x))", "all x.((CristianoRonaldo(x) & LeftFoot(x)) -> ScoresMoreThan100Goals(x))", "all x.((CristianoRonaldo(x) & LeftFoot(x)) -> ScoresMoreThanOneSixtyGoals(x))", "all x y.((CristianoRonaldo(x) & LeftFoot(y)) -> ScoredMoreThanOneSixtyGoals(x,y))", "all x y.((CruzianoRonaldo(x) & LeftFoot(y)) -> ScoredMoreThan(x,y))", "all x y.((CristianoRonaldo(x) & LeftFoot(y)) -> ScoredMoreThanOneTenGoals(x,y))", "all x y.((CruzianoRonaldo(x) & LeftFoot(y)) -> ScoresMoreThan(x,y))", "all x.((CristianoRonaldo(x) & MoreThan(x,100)) -> LeftFoot(x))"]}
{"id": "folio_train_1975", "nl": "Cristiano Ronaldo is a top soccer player.", "fol": "IsTopSoccerPlayer(Ronaldo)", "prediction": ["all x.((CristianoRonaldo(x) & TopSoccerPlayer(x)) -> TopSoccerPlayer(x))", "all x.((CristinoRonaldo(x) & TopSoccerPlayer(x)) -> TopSoccerPlayer(x))", "all x.((CristianoRonaldo(x) & TopSoccerPlayer(x)) -> TopSoccerPlayer(x))", "all x.((Cronocr Ronaldo(x) & TopSoccerPlayer(x)) -> TopSoccerPlayer(x))", "all x.((CristianoRonaldo(x) & TopSoccerPlayer(x)) -> TopPlayer(x))", "all x.((CristianoRonaldo(x) & TopSoccerPlayer(x)) -> Top(x))", "all x.((CroicoRonaldo(x) & TopSoccerPlayer(x)) -> TopSoccerPlayer(x))", "all x.((CruzianoRonaldo(x) & TopSoccerPlayer(x)) -> TopSoccerPlayer(x))", "all x.((Cristiano Ronaldo(x) & TopSoccerPlayer(x)) -> TopSoccerPlayer(x))", "all x.((CrosimoRonaldo(x) & TopSoccerPlayer(x)) -> TopSoccerPlayer(x))", "all x.((CristinoRonaldo(x) & TopSoccerPlayer(x)) -> TopPlayer(x))", "all x.((CristianoRonaldo(x) & TopSoccerPlayer(x)) -> TopSoccer(x))", "all x.((CristinoRonaldo(x) & TopSoccerPlayer(x)) -> Top(x))", "all x.((Cronocr Ronaldo(x) & TopSoccerPlayer(x)) -> CristianoRonaldo(x))", "all x.(CristianoRonaldo(x) -> TopSoccerPlayer(x))", "all x.((CristianoRonaldo(x) & TopSoccerPlayer(x)) -> Top(x))"]}
{"id": "folio_train_1976", "nl": "Cristiano Ronaldo is not a top soccer player.", "fol": "-IsTopSoccerPlayer(Ronaldo)", "prediction": ["all x.((CristianoRonaldo(x) & -TopSoccerPlayer(x)) -> -TopSoccerPlayer(x))", "all x.((CristinoRonaldo(x) & -TopSoccerPlayer(x)) -> -TopSoccerPlayer(x))", "all x.((CristianoRonaldo(x) & -TopSoccerPlayer(x)) -> -TopSoccerPlayer(x))", "(-TopSoccerPlayer(CristinoRonaldo))", "all x.((CristianoRonaldo(x) & TopSoccerPlayer(x)) -> -TopSoccerPlayer(x))", "all x.((CristianoRonaldo(x) & -TopSoccerPlayer(x)) -> -(TopSoccerPlayer(x) & TopSoccerPlayer(x)))", "all x.((CristianoRonaldo(x) & -TopSoccerPlayer(x)) -> -TopPlayer(x))", "all x.((CristinoRonaldo(x) & TopSoccerPlayer(x)) -> -TopSoccerPlayer(x))", "all x.((CristianoRonaldo(x) & -TopSoccerPlayer(x)) -> -(TopSoccerPlayer(x) & TopSoccerPlayer(x))))", "(-TopSoccerPlayer(CristianoRonaldo))", "all x.((CristianoRonaldo(x) & -TopSoccerPlayer(x)) -> -Top(x))", "all x.((CristianoRonaldo(x) & TopSoccerPlayer(x)) -> -TopSoccerPlayer(x))", "all x.((CristianoRonaldo(x) & -TopSoccerPlayer(x)) -> -(TopSoccerPlayer(x) | TopSoccerPlayer(x))))", "all x.((CristinoRonaldo(x) & -TopSoccerPlayer(x)) -> -TopPlayer(x))", "all x.((CristianoRonaldo(x) & -TopSoccerPlayer(x)) -> -TopPlayer(x))", "all x.((CristianoRonaldo(x) & NoTopSoccerPlayer(x)) -> -TopSoccerPlayer(x))"]}
{"id": "folio_train_1977", "nl": "The National Lobster Hatchery is a hatchery located in Padstow England.", "fol": "(IsHatchery(Nationallobsterhatchery) & LocatedInLocation(Nationallobsterhatchery,Padstowengland))", "prediction": ["all x.(NationalLobsterHatchery(x) -> (Hatchery(x) & LocatedInPadstow(x) & LocatedInEngland(x)))", "all x.(NationalLobsterHatchery(x) -> (Hatchery(x) & LocatedInPadstow(x)))", "all x.(NationalLobsterHatchery(x) -> (Hatchery(x) & LocatedInPadstowEngland(x)))", "all x y.((NationalLobsterHatchery(x) & PadstowEngland(y)) -> Hatchery(x))", "all x y.((NationalLobsterHatchery(x) & PadstowEngland(y)) -> Hatchery(x,y))", "all x.(NationalLobsterHatchery(x) -> (Hackery(x) & LocatedInPadstow(x) & LocatedInEngland(x)))", "all x.(NationalLobsterHatchery(x) -> (Hackery(x) & LocatedInPadstow(x)))", "all x y.((NationalLobsterHatchery(x) & Padstow(y)) -> Hatchery(x))", "all x.(NationalLobsterHatchery(x) -> (Hackery(x) & LocatedInPadstowEngland(x)))", "all x y.((NationalLobsterHatchery(x) & Padstow(y)) -> Hatchery(x,y))", "all x.(NationalLobsterHatchery(x) -> (Habitery(x) & LocatedInPadstow(x)))", "all x y z.((NationalLobsterHatchery(x) & PadstowEngland(y) & Hatchery(z)) -> LocatedIn(x,y,z))", "all x.(NationalLobsterHatchery(x) -> LocatedInPadstowEngland(x))", "all x y z.((NationalLobsterHatchery(x) & Padstow(y) & England(z)) -> Hatchery(x,y,z))", "all x.(NationalLobsterHatchery(x) -> (HasHatchery(x) & LocatedInPadstow(x) & LocatedInEngland(x)))", "all x y.((NationalLobsterHatchery(x) & Padstow(y)) -> LocatedIn(x,y))"]}
{"id": "folio_train_1978", "nl": "The National Lobster Hatchery is open to visitors.", "fol": "IsOpenToVisitors(Nationallobsterhatchery)", "prediction": ["all x.(NationalLobsterHatchery(x) -> OpenToVisitors(x))", "All x.(NationalLobsterHatchery(x) -> OpenToVisitors(x))", "all x.((NationalLobsterHatchery(x) & OpenToVisitors(x)) -> OpenToVisitors(x))", "all x y.((NationalLobsterHatchery(x) & Visitor(y)) -> OpenTo(x,y))", "all x.(NationalLobsterHatchery(x) -> OpenToVisitors(x))", "(OpenToVisitors(NationalLobsterHatchery) & OpenToVisitors(NationalLobsterHatchery))", "all x y.((NationalLobsterHatchery(x) & Visitor(y)) -> Open(x,y))", "All x.((NationalLobsterHatchery(x) & OpenToVisitors(x)) -> OpenToVisitors(x))", "all x.((NationalLobsterHatchery(x) & OpenToVisitors(x)) -> OpenTo(x))", "All x y.((NationalLobsterHatchery(x) & Visitor(y)) -> OpenTo(x,y))", "all x.(NationalLobsterHatchery(x) -> OpenToVisitors(x))", "All x.(NationalLobsterHatchery(x) -> OpenToVisitors(x))", "all x.(NationalLobsterHostery(x) -> OpenToVisitors(x))", "All x y.((NationalLobsterHatchery(x) & Visitor(y)) -> Open(x,y))", "all x.((NationalLobsterHatchery(x) & OpenToVisitors(x)) -> Open(x))", "(OpenToVisitors(NationalLobsterHatchery) & OpenToVisitors(NationalLlobsterHatchery))"]}
{"id": "folio_train_1979", "nl": "A hatchery is either for profit, or for conservation.", "fol": "all x.((IsHatchery(x) -> IsForConservation(x)) | IsForProfit(x))", "prediction": ["all x.(Habitery(x) -> (ForProfit(x) | ForConservation(x)))", "all x.(Harkery(x) -> (ForProfit(x) | ForConservation(x)))", "all x.(Hackery(x) -> (ForProfit(x) | ForConservation(x)))", "all x.(Hazardery(x) -> (ForProfit(x) | ForConservation(x)))", "all x.(Habitery(x) -> (Financial(x) | Conservation(x)))", "all x.(Habitery(x) -> ((ForProfit(x) | ForConservation(x))))", "all x.(Hawkery(x) -> (ForProfit(x) | ForConservation(x)))", "exists x.(Habitery(x) & (ForProfit(x) | ForConservation(x)))", "all x.(Hatery(x) -> (ForProfit(x) | ForConservation(x)))", "all x.(Harkery(x) -> (Financial(x) | Conservation(x)))", "all x.(Harkery(x) -> ((ForProfit(x) | ForConservation(x))))", "all x.(Hachette(x) -> (ForProfit(x) | ForConservation(x)))", "all x.(Hackery(x) -> (Financial(x) | Conservation(x)))", "all x.(Habitery(x) -> (FollowsProfit(x) | ForConservation(x)))", "all x.(Habitery(x) -> ((Financial(x) | Conservation(x))))", "all x.(Habitery(x) -> (Function(x) | Conservation(x)))"]}
{"id": "folio_train_1980", "nl": "If a hatchery is for conservation, it might release animals into the wild.", "fol": "exists x.(IsHatchery(x) & IsForConservation(x) & ReleasesAnimalsIntoWild(x))", "prediction": ["all x.((Habitery(x) & ForConservation(x)) -> MightReleaseAnimalsIntoWild(x))", "all x.((Habitery(x) & ForConservation(x)) -> MightReleaseAnimalsIntoWild(x))", "all x.((Harkery(x) & ForConservation(x)) -> MightReleaseAnimalsIntoWild(x))", "all x.((Harkery(x) & ForConservation(x)) -> MightReleaseAnimalsIntoWild(x))", "all x.((Hackery(x) & ForConservation(x)) -> MightReleaseAnimalsIntoWild(x))", "all x.((Hatchery(x) & ForConservation(x)) -> MightReleaseAnimalsIntoWild(x))", "all x.((Habitery(x) & ForConservation(x)) -> ReleasesAnimalsIntoWild(x))", "all x.((Hatchery(x) & ForConservation(x)) -> MightReleaseAnimalsIntoWild(x))", "all x.((Hackery(x) & ForConservation(x)) -> MightReleaseAnimalsIntoWild(x))", "all x.((Hazardery(x) & ForConservation(x)) -> MightReleaseAnimalsIntoWild(x))", "all x.((Hatchery(x) & ForConservation(x)) -> MightReleaseAnimalsIntoWild(x))", "all x.((Habitery(x) & ForConservation(x)) -> CouldReleaseAnimalsIntoWild(x))", "all x.((Hatchery(x) & ForConservation(x)) -> MightReleaseAnimalsIntoWild(x))", "all x.((Habitery(x) & Conservation(x)) -> MightReleaseAnimalsIntoWild(x))", "all x.((Habitery(x) & ForConservation(x)) -> CouldReleaseAnimalsIntoWild(x))", "all x.((Habitery(x) & Conservation(x)) -> MightReleaseAnimalsIntoWild(x))"]}
{"id": "folio_train_1981", "nl": "The National Lobster Hatchery is not for profit.", "fol": "-IsForProfit(Nationallobsterhatchery)", "prediction": ["All x.(NationalLobsterHatchery(x) -> -ForProfit(x))", "all x.(NationalLobsterHatchery(x) -> -ForProfit(x))", "All x.(NationalLobsterHatchery(x) -> -Profit(x))", "all x.(NationalLobsterHatchery(x) -> -Profit(x))", "(NationalLobsterHatchery(NationalLobsterHatchery) & -ForProfit(NationalLobsterHatchery))", "All x.(NationalLobsterHatchery(x) -> -Financial(x))", "(NationalLobsterHatchery(NationalLobsterHatchery) & -Profit(NationalLobsterHatchery))", "all x.(NationalLobsterHatchery(x) -> -Financial(x))", "All x.(NationalLobsterHatchery(x) -> -FullProfit(x))", "All x.(NationalLobsterHatchery(x) -> -ForProfit(x))", "(NationalLobsterHatchery(NationalLobsterHatchery) & -ForProfit(NationalLlobsterHatchery))", "all x.(NationalLobsterHatchery(x) -> -ForProfit(x))", "all x.(NationalLobsterHatchery(x) -> -FullProfit(x))", "All x.(NationalLobsterHatchery(x) -> -Profit(x))", "(NationalLobsterHatchery(NHH) & -ForProfit(NHH))", "(NationalLobsterHatchery(NationalLobsterHatchery) & -Financial(NationalLobsterHatchery))"]}
{"id": "folio_train_1982", "nl": "The National Lobster Hatchery is for conservation.", "fol": "IsForConservation(Nationallobsterhatchery)", "prediction": ["All x.(NationalLobsterHatchery(x) -> ForConservation(x))", "all x.(NationalLobsterHatchery(x) -> ForConservation(x))", "all x.(NationalLobsterHatchery(x) -> ForConservation(x))", "All x.(NationalLobsterHatchery(x) -> ForConservation(x))", "all x y.((NationalLobsterHatchery(x) & Conservation(y)) -> For(x,y))", "All x y.((NationalLobsterHatchery(x) & Conservation(y)) -> For(x,y))", "(ForConservation(NationalLobsterHatchery) -> ForConservation(NationalLobsterHatchery))", "all x.(NationalLobsterHatchery(x) -> ForConservation(x))", "All x.(NationalLlobsterHatchery(x) -> ForConservation(x))", "all x.(NationalLlobsterHatchery(x) -> ForConservation(x))", "All x.(NationalLobsterHatchery(x) -> ForConservation(x))", "All x.(NationalLobsterHackery(x) -> ForConservation(x))", "all x.(NationalLobsterHackery(x) -> ForConservation(x))", "all x.(LobsterHatchery(x) -> ForConservation(x))", "All x.(LobsterHatchery(x) -> ForConservation(x))", "All x.(NationalLobsterHatchery(x) -> Conservation(x))"]}
{"id": "folio_train_1983", "nl": "All hatcheries are open to visitors.", "fol": "all x.(IsHatchery(x) -> IsOpenToVisitors(x))", "prediction": ["all x.(Habitat(x) -> OpenToVisitors(x))", "all x.(Horse(x) -> OpenToVisitors(x))", "all x.(Harkerie(x) -> OpenToVisitors(x))", "all x.(Habiterie(x) -> OpenToVisitors(x))", "all x.(Hawkerie(x) -> OpenToVisitors(x))", "all x.(Harkery(x) -> OpenToVisitors(x))", "all x.(Hazarderie(x) -> OpenToVisitors(x))", "all x y.((Habitat(x) & Visitor(y)) -> Open(x,y))", "all x.(Hazard(x) -> OpenToVisitors(x))", "all x.(Hackery(x) -> OpenToVisitors(x))", "all x y.((Habitat(x) & Visitor(y)) -> OpenTo(x,y))", "all x.(Horseerie(x) -> OpenToVisitors(x))", "all x.(Hawkery(x) -> OpenToVisitors(x))", "all x.(Hachette(x) -> OpenToVisitors(x))", "all x.(Hazardery(x) -> OpenToVisitors(x))", "all x.(Horsery(x) -> OpenToVisitors(x))"]}
{"id": "folio_train_1984", "nl": "The National Lobster Hatchery releases animals into the wild.", "fol": "ReleasesAnimalsIntoWild(Nationallobsterhatchery)", "prediction": ["all x y.((NationalLobsterHatchery(x) & Animal(y)) -> ReleasesIntoWild(x,y))", "all x.(NationalLobsterHatchery(x) -> ReleasesAnimalsIntoWild(x))", "all x y z.((NationalLobsterHatchery(x) & Animal(y) & Wild(z)) -> ReleasesInto(x,y,z))", "all x y.((NationalLobsterHatchery(x) & Animal(y)) -> ReleasesIntoWild(x,y))", "all x y z.((NationalLobsterHatchery(x) & Animal(y) & Wild(z)) -> ReleasesInto(x,y,z))", "All x y.((NationalLobsterHatchery(x) & Animal(y)) -> ReleasesIntoWild(x,y))", "all x y z.((NationalLobsterHatchery(x) & Animal(y) & Wild(z) & ReleasesInto(x,y,z)) -> ReleasesInto(x,y,z))", "all x y z.((NationalLobsterHatchery(x) & Animal(y) & Wild(z)) -> Releases(x,y,z))", "all x y.((NationalLlobsterHatchery(x) & Animal(y)) -> ReleasesIntoWild(x,y))", "all x y z.((NationalLobsterHatchery(x) & Animal(y) & Animal(z)) -> ReleasesIntoWild(x,y,z))", "all x y.((NationalLobsterHatchery(x) & Animal(y)) -> ReleasesIntoTheWild(x,y))", "all x.(NationalLobsterHatchery(x) -> ReleasesIntoWild(x))", "all x y.((NationalLowerHatchery(x) & Animal(y)) -> ReleasesIntoWild(x,y))", "all x y.((NationalLocksterHatchery(x) & Animal(y)) -> ReleasesIntoWild(x,y))", "all x.((NationalLobsterHatchery(x) & Animal(y)) -> ReleasesIntoWild(x,y))", "all x.(NationalLobsterHatchery(x) -> ReleasesAnimalsIntoWild(x))"]}
{"id": "folio_train_1985", "nl": "Rhos Aelwyd F.C. is a Welsh football club.", "fol": "all x.(RhosAelwydFC(x) -> (IsFootballClub(x) & LocatedInPonciau(x) & IsWelshClub(x)))", "prediction": ["all x.((RhosAelwydF.C.) -> WelshFootballClub(x))", "all x.((RhosAelwydF.C.(x) & WelshFootballClub(x)) -> FootballClub(x))", "all x.((RhosAelwydF.C. & WelshFootballClub(x)) -> FootballClub(x))", "(WalesFootballClub(RhosAelwyd) & WelshFootballClub(RhosAelwyd))", "all x y.((RhosAelwydF.C.(x) & WelshFootballClub(y)) -> FootballClub(x,y))", "all x.(RhosAelwydF.C.(WalesFootballClub(x) & WelshFootballClub(x))", "all x.(RhosAelwydF.C.(WalesFootballClub) -> FootballClub(x))", "all x.((RhosAelwyd F.C. & WelshFootballClub(x)) -> FootballClub(x))", "all x.((RhosAelwydF.C. & WelshFootballClub(x)) -> WelshFootballClub(x))", "all x.(RhosAelwydF.C.(WalesFootballClub(x) -> WelshFootballClub(x))", "All x.((RhosAelwydF.C.) -> WelshFootballClub(x))", "(WelshFootballClub(RhosAelwyd) & WelshFootballClub(RhosAelwyd))", "All x.(RhosAelwydF.C.(WalesFootballClub(x) -> WelshFootballClub(x))", "all x y.((RhosAelwydF.C.(x) & WelshFootballClub(y)) -> FootballClub(x))", "all x.(RhosAelwydF.C.(WalesFootballClub(x) -> FootballClub(x))", "(WalesFootballClub(RhosAelwyd) & WelshFootball(RhosAelwyd))"]}
{"id": "folio_train_1986", "nl": "Rhos Aelwyd F.C. is the only club based in Ponciau. ", "fol": "all x.(LocatedInPonciau(x) <-> RhosAelwydFC(x))", "prediction": ["all x.((Club(x) & BasedInPonciau(x)) -> RhosAelwydF.C.", "all x.(RhosAelwydF.C.(Club(x) & BasedInPonciau(x))", "All x.((Club(x) & BasedInPonciau(x)) -> RhosAelwydF.C.", "All x.(RhosAelwydF.C.(Club(x) & BasedInPonciau(x))", "all x.((Club(x) & BasedInPonciau(x)) -> RhosAelwydF.C.(x))", "all x y.((Club(x) & Club(y) & BasedInPonciau(x,y)) -> RhosAelwydF.C.", "all x y.((Club(x) & Club(y) & BasedInPonciau(x)) -> RhosAelwydF.C.", "all x y.((Club(x) & Club(y) & BasedInPonciau(x,y)) -> RhosAelwydF.C.(x))", "all x y.((Club(x) & Club(y) & BasedInPonciau(x)) -> RhosAelwydF.C.(x))", "All x.(RhosAelwydF.C.(Club(x) & BasedInPonciau(x)) -> Club(x))", "all x.(RhosAelwydF.C.(Club(x) & BasedInPonciau(x)) -> Club(x))", "all x y.((RhosAelwydF.C.(x) & Ponciau(y)) -> ClubBasedIn(x,y))", "all x y.((Club(x) & Club(y) & BasedIn(x,Ponciau)) -> RhosAelwydF.C.(x))", "all x y.((Club(x) & Club(y) & BasedIn(x,Ponciau)) -> RhosAelwydF.C.", "All x.((Club(x) & BasedInPonciau(x)) -> RhosAelwydF.C.(x))", "all x y.((RhosAelwydF.C.(x) & Club(y)) -> BasedInPonciau(x,y))"]}
{"id": "folio_train_1987", "nl": "The Premier Division was won in 2005\u201306 by a team from Ponciau. ", "fol": "all x.(WonPremierDivisionInSeason(x,Y2005) <-> LocatedInPonciau(x))", "prediction": ["all x y.((Team(x) & Ponciau(y)) -> WonPrimaryDividend(x,y))", "all x y z.((PremierDivision(x) & Team(y) & Ponciau(z)) -> WonIn2005\u201306(x,y,z))", "all x y z.((PremierDivision(x) & Team(y) & Ponciau(z)) -> WonIn2005-06(x,y,z))", "all x y.((Team(x) & Ponciau(y)) -> WonPrimaryDivision(x,y))", "all x y z.((PremierDivision(x) & Team(y) & Ponciau(z)) -> WonIn200506(x,y,z))", "all x y z.((PremierDivision(x) & Team(y) & Ponciau(z)) -> WonIn20052006(x,y,z))", "all x y z.((PremierDivision(x) & Team(y) & Ponciau(z)) -> WonIn2005(x,y,z))", "all x y z.((PremierDivision(x) & Team(y) & Ponciau(z)) -> WonIn2005-2006(x,y,z))", "all x y z.((PremierDivision(x) & Team(y) & Ponciau(z)) -> WonBy(x,y,z))", "all x y z.((PremierDividend(x) & Team(y) & Ponciau(z)) -> WonIn2005\u201306(x,y,z))", "all x y z.((PremierDividend(x) & Team(y) & Ponciau(z)) -> WonIn2005-06(x,y,z))", "all x y.((Team(x) & Ponciau(y)) -> WonPrimaryDividence(x,y))", "all x y z.((PremierDividend(x) & Team(y) & Ponciau(z)) -> WonIn200506(x,y,z))", "all x y.((Team(x) & Ponciau(y)) -> WonPremierDivision(x,y))", "all x.((Team(x) & Ponciau(x)) -> WonPrimaryDividend(x,2005-06))", "all x y.((Team(x) & Team(y) & Ponciau(x)) -> WonPrimaryDividend(x,y))"]}
{"id": "folio_train_1988", "nl": "The winner of the Premier Division in 2009\u201310 was promoted back to the Cymru Alliance.", "fol": "all x.(WonPremierDivisionInSeason(x,Y2009) -> PromotedToCymruAlliance(x))", "prediction": ["all x.((Winner(x) & PremierDividence(x)) -> PromotedToCymruAlliance(x))", "all x.((Winner(x) & PremierDividence(x) & 2009-2010) -> PromotedToCymruAlliance(x))", "all x.((Winner(x) & PremierDividence(x) & 2009-10) -> PromotedToCymruAlliance(x))", "all x.((Winner(x) & PremierDividence(x) & 2009\u201310) -> PromotedToCymruAlliance(x))", "all x y.((Winner(x) & PremierDividence(y)) -> PromotedToCymruAlliance(x,y))", "all x.((Winner(x) & PremierDividence(x) & 2009\u201310) -> PromotedToCymruAlliance(x))", "all x.((Winner(x) & PremierDividence(x,2009)) -> PromotedToCymruAlliance(x))", "all x y z.((Winner(x) & PremierDividence(y) & CymruAlliance(z)) -> PromotedTo(x,y,z))", "all x.((Winner(x) & PremierDividence(x) & 2009-10) -> PromotedToCymruAlliance(x))", "all x y.((Winner(x) & PremierDividence(y) & 2009-2010) -> PromotedToCymruAlliance(x,y))", "all x.((Winner(x) & PremierDivision(x)) -> PromotedToCymruAlliance(x))", "all x y.((Winner(x,y) & PremierDividence(y)) -> PromotedToCymruAlliance(x,y))", "all x y.((Winner(x) & PremierDividence(y) & 2009\u201310) & CymruAlliance(y)) -> PromotedTo(x,y))", "all x y.((Winner(x) & PremierDivision(y) & 2009-2010) -> PromotedToCymruAlliance(x,y))", "all x y.((Winner(x) & PremierDivision(y) & 2009\u201310) & CymruAlliance(y)) -> PromotedTo(x,y))", "all x y z.((Winner(x) & PremierDividence(y) & CymruAlliance(z)) -> Promoted(x,y,z))"]}
{"id": "folio_train_1989", "nl": "The Premier Division in 2009\u201310 was won by the same team that won in 2005-06. ", "fol": "all x.(WonPremierDivisionInSeason(x,Y2009) <-> WonPremierDivisionInSeason(x,Y2005))", "prediction": ["all x y.((Team(x) & Team(y) & WonPrimaryDividend(x,y)) -> (WonPrimaryDividend(x,y) & WonPrimaryDividend(x,y) & WonPrimaryDividend(x,y)))", "all x y.((Team(x) & Team(y) & WonPrimaryDividend(x,y)) -> (WonPrimaryDividend(x,y) & WonPrimaryDividend(x,y) & WonPrimaryDividend(x,y) & WonPrimaryDividend(x,y)))", "all x y.((Team(x) & Team(y) & WonPrimaryDividend(x,y)) -> (WonPrimaryDividend(x,y) & WonPrimaryDividend(x,y) & WonPrimaryDividend(x,y) & WonPrimaryDividend(x,y) & WonPrimaryDividend(x,y)))", "all x y.((Team(x) & Team(y) & WonPrimaryDividend(x,y)) -> (WonPrimaryDividend(x,y) & WonPrimaryDividend(x,y)))", "all x y.((Team(x) & Team(y) & WonPrimaryDivision(x,y)) -> (WonPrimaryDivision(x,y) & WonPrimaryDivision(x,y) & WonPrimaryDivision(x,y) & WonPrimaryDivision(x,y) & WonPrimaryDivision(x,y)))", "all x y.((Team(x) & Team(y) & WonPrimaryDivision(x,y)) -> (WonPrimaryDivision(x,y) & WonPrimaryDivision(x,y) & WonPrimaryDivision(x,y) & WonPrimaryDivision(x,y)))", "all x y.((Team(x) & Team(y) & WonPrimaryDivision(x,y)) -> (WonPrimaryDivision(x,y) & WonPrimaryDivision(x,y) & WonPrimaryDivision(x,y)))", "all x y.((Team(x) & Team(y) & WonPrimaryDividend(x,y)) -> (WonPrimaryDividend(x,y) & WonPrimaryDividend(x,y) & WonPrimaryDividend(x,y) & WonPrimaryDividend(x,y) & WonPrimaryDividend(x,y) & Won20052006(x,y)))", "all x y.((Team(x) & Team(y) & WonPrimaryDividend(x,y)) -> (WonPrimaryDividend(x,y) & WonPrimaryDividend(x,y) & WonPrimaryDividend(x,y) & WonPrimaryDividend(x,y) & WonPrimaryDividend(x,y) & WonPrimary2006(x,y)))", "all x y.((PremierDivision(x) & Team(y) & WonIn200506(y,x)) -> WonIn200910(x,y))", "all x y.((Team(x) & Team(y) & WonPrimaryDividend(x,y)) -> (WonPrimaryDividend(x,y) & WonPrimaryDividend(x,y) & WonPrimaryDividend(x,y) & WonPrimaryDividend(x,y) & WonPrimaryDividend(y,y)))", "all x y.((Team(x) & Team(y) & WonPrimaryDividend(x,y)) -> (WonPrimaryDividend(x,y) & WonPrimaryDividend(x,y) & WonPrimaryDividend(x,y) & WonPrimaryDividend(x,y) & WonPrimaryDividend(y,2005-06)))", "all x y.((Team(x) & Team(y) & WonPrimaryDividend(x,y)) -> (WonPrimaryDividend(x,y) & WonPrimaryDividend(x,y) & WonPrimaryDividend(x,y) & WonPrimaryDividend(y,2005-06)))", "all x y.((Team(x) & Team(y) & WonPrimaryDividend(x,y)) -> (WonPrimaryDividend(x,y) & WonPrimaryDividend(x,y) & WonPrimaryDividend(x,y) & WonPrimaryDividend(x,y) & WonPrimaryDividend(x,y) & Won20052006(y)))", "all x y.((Team(x) & Team(y) & WonPrimaryDividend(x,y)) -> (WonPrimaryDividend(x,y) & WonPrimaryDividend(x,y) & WonPrimaryDividend(x,y) & WonPrimaryDividend(x,y) & WonPrimaryDividend(x,y) & WonPrimary2006(y)))", "all x y.((Team(x) & Team(y) & WonPrimaryDivision(x,y)) -> (WonPrimaryDivision(x,y) & WonPrimaryDivision(x,y)))"]}
{"id": "folio_train_1990", "nl": "Rhos Aelwyd F.C. won the 2005-06 Premier Division.", "fol": "all x.(RhosAelwydFC(x) -> WonPremierDivisionInSeason(x,Y2005))", "prediction": ["all x y.((RhosAelwydF.C.(x) & PremierDivision(y)) -> Won(x,y))", "all x y.((RhosAelwydF.C.(x) & PremierDividence(y)) -> Won(x,y))", "all x y.((RhosAelwydF.C. & PremierDivision(y)) -> Won(x,y))", "Rhos Aelwyd F.C. won Premier Division 2005-06.", "all x y.((RhosAelwydF.C.(x) & PremierDividend(y)) -> Won(x,y))", "all x.((RhosAelwydF.C. & PremierDivision(x,2005)) -> Won(x,2006))", "all x.((RhosAelwydF.C. & PremierDivision(x,2005,06)) -> Won(x,2005,06))", "all x.((RhosAelwydF.C. & PremierDivision(x,2005)) -> Won(x,2005))", "all x.((RhosAelwydF.C. & PremierDivision(x)) -> Won(x,2005,06))", "all x.((RhosAelwydF.C.(x) & PremierDivision(x,2005)) -> Won(x,2006))", "all x.((RhosAelwydF.C. & PremierDividence(x,2005)) -> Won(x,2006))", "RhosAelwyd F.C. won Premier Division 2005-06.", "all x.((RhosAelwydF.C. & PremierDivision(x,2005)) -> Won(x,05))", "all x.((RhosAelwydF.C.(x) & PremierDividence(x,2005)) -> Won(x,2006))", "all x.((RhosAelwydF.C. & PremierDivision(x,2005)) -> Won(x,06))", "all x.((RhosAelwydF.C.(x) & PremierDivision(x,2005)) -> Won(x,06))"]}
{"id": "folio_train_1991", "nl": "Rhos Aelwyd F.C. was promoted to the Cymru Alliance.", "fol": "all x.(RhosAelwydFC(x) -> PromotedToCymruAlliance(x))", "prediction": ["all x y.((RhosAelwydF.C.(x) & CymruAlliance(y)) -> PromotedTo(x,y))", "all x.((RhosAelwydF.C. & CymruAlliance(x)) -> PromotedTo(x,CymruAlliance))", "all x.(PromotedToCymruAlliance(x) -> RhosAelwydF.C.", "all x.((RhosAelwydF.C.) -> PromotedToCymruAlliance(x))", "all x.((RhosAelwydF.C. & CymruAlliance(x)) -> PromotedTo(x,y))", "all x.((RhosAelwydF.C.(x) & CymruAlliance(x)) -> PromotedTo(x,CymruAlliance))", "all x y.((RhosAelwydF.C.(x) & CymruAlliance(y)) -> Promoted(x,y))", "all x y.((RhosAelwyd(x) & CymruAlliance(y)) -> PromotedTo(x,y))", "all x y.((RhosAelwydF.C. & CymruAlliance(y)) -> PromotedTo(x,y))", "(PromotedToCymruAlliance(RhosAelwydF.C.)", "All x.((RhosAelwydF.C.) -> PromotedToCymruAlliance(x))", "all x.((RhosAelwyd(x) & CymruAlliance(x)) -> PromotedTo(x,y))", "all x.((RhosAelwydF.C. & CymruAlliance(x)) -> Promoted(x))", "all x.((RhosAelwydF.C. & CymruAlliance(x)) -> PromotedTo(x))", "all x y.((RhosAelwydF.C.(x) & CymruAlliance(y)) -> PromotedTo(x,y))", "all x.((RhosAelwydF.C.(x) & CymruAlliance(x)) -> PromotedTo(x,y))"]}
{"id": "folio_train_1992", "nl": "All OS are software.", "fol": "all x.(OperatingSystem(x) -> SoftwareType(x))", "prediction": ["all x.(OS(x) -> Software(x))", "all x.(Operation(x) -> Software(x))", "all x.(Os(x) -> Software(x))", "all x y.((OS(x) & Software(y)) -> Software(x))", "all x y.((OS(x) & OS(y)) -> Software(x))", "(all x.(OS(x) -> Software(x)))", "all x.(OS(x) -> Software(x))", "all x.exists y.(OS(x) & Software(y) & DesignedFor(x,y))", "all x.((OS(x) & Software(x)) -> Software(x))", "all x.exists y.(OS(x) & Software(y) & UsedBy(x,y))", "all x.exists y.(OS(x) & Software(y) & DesignedBy(x,y))", "all x y.((OS(x) & Software(y)) -> Software(x,y))", "all x.exists y.(OS(x) & Software(y) & PoweredBy(x,y))", "All x.(OS(x) -> Software(x))", "exists x.(OS(x) & Software(x))", "all x.exists y.(OS(x) & Software(y) & Uses(x,y))"]}
{"id": "folio_train_1993", "nl": "All Mac are OS.", "fol": "all x.(MacOS(x) -> OperatingSystem(x))", "prediction": ["all x.(Mac(x) -> OS(x))", "(exists x.(Mac(x) & OS(x)) & -exists y.(Mac(y) & OS(y)) & -exists z.(Mac(z) & OS(z) & -exists w.(Mac(w) & OS(w) & -exists w.(Mac(w) & OS(w)))))", "(exists x.(Mac(x) & OS(x)) & -exists y.(Mac(y) & OS(y)) & -exists z.(Mac(z) & OS(z) & -exists w.(Mac(w) & OS(w)) & -exists w.(Mac(w) & OS(w)))))", "(exists x.(Mac(x) & OS(x)) & -exists y.(Mac(y) & OS(y)) & -exists z.(Mac(z) & OS(z) & -exists w.(Mac(w) & OS(w) & -exists w.(Mac(w) & OS(w)) & -exists w.(Mac(w) & OS(w))))", "(exists x.(Mac(x) & OS(x)) & -exists y.(Mac(y) & -exists z.(Mac(z) & OS(z) & -exists w.(Mac(w) & OS(w) & -exists w.(Mac(w) & OS(w)) & -exists w.(Mac(w) & OS(w))))", "(exists x.(Mac(x) & OS(x)) & -exists y.(Mac(y) & -exists z.(Mac(z) & OS(z) & -exists w.(Mac(w) & OS(w) & -exists w.(Mac(w) & OS(w) & -exists w.(Mac(w) & OS(w)))))", "(exists x.(Mac(x) & OS(x)) & -exists y.(Mac(y) & OS(y)) & -exists z.(Mac(z) & OS(z)) & -exists w.(Mac(w) & OS(w) & -exists w.(Mac(w) & OS(w)))))", "(exists x.(Mac(x) & OS(x)) & -exists y.(Mac(y) & OS(y)) & -exists z.(Mac(z) & OS(z)) & -exists w.(Mac(w) & OS(w)) & -exists w.(Mac(w) & OS(w))))", "(exists x.(Mac(x) & OS(x)) & -exists y.(Mac(y) & OS(y)) & -exists z.(Mac(z) & OS(z) & -exists w.(Mac(w) & OS(w)) & -exists w.(Mac(w) & OS(w)) & -exists w.(Mac(w) & OS(w))))", "(exists x.(Mac(x) & OS(x)) & -exists y.(Mac(y) & OS(y)) & -exists z.(Mac(z) & OS(z) & -exists w.(Mac(w) & OS(w) & -exists w.(Mac(w) & OS(w) & -exists w.(Mac(w) & OS(w)))))", "(exists x.(Mac(x) & OS(x)) & -exists y.(Mac(y) & OS(y)) & -exists z.(Mac(z) & OS(z)) & -exists w.(Mac(w) & OS(w) & -exists w.(Mac(w) & OS(w)) & -exists w.(Mac(w) & OS(w))))", "(exists x.(Mac(x) & OS(x)) & -exists y.(Mac(y) & OS(y)) & -exists z.(Mac(z) & OS(z)) & -exists w.(Mac(w) & OS(w)) & -exists w.(Mac(w) & OS(w)) & -exists w.(Mac(w) & OS(w))))", "(exists x.(Mac(x) & OS(x)) & -exists y.(Mac(y) & OS(y)) & -exists z.(Mac(z) & OS(z) & -exists w.(Mac(w) & OS(w) & -exists w.(Mac(w) & OS(w) & OS(w)))))", "(exists x.(Mac(x) & OS(x)) & -exists y.(Mac(y) & OS(y)) & -exists z.(Mac(z) & OS(z) & -exists w.(Mac(w) & OS(w) & -exists w.(Mac(w) & OS(w) & -exists w.(Mac(w) & OS(w))))", "(exists x.(Mac(x) & OS(x)) & -exists y.(Mac(y) & OS(y)) & -exists z.(Mac(z) & OS(z) & -exists w.(Mac(w) & OS(w) & -exists w.(Mac(w) & OS(w) & -exists w.(Mac(w) & OS(w)) & OS(w))))", "(exists x.(Mac(x) & OS(x)) & -exists y.(Mac(y) & OS(y)) & -exists z.(Mac(z) & OS(z) & -exists w.(Mac(w) & OS(w) & -exists w.(Mac(w) & OS(w)) & -exists w.(Mac(w) & OS(w) & OS(w))))"]}
{"id": "folio_train_1994", "nl": "An OS is either Mac or Windows.", "fol": "all x.(MacOS(x) | WindowsOS(x))", "prediction": ["all x.(OS(x) -> (Mac(x) | Windows(x)))", "all x.(Os(x) -> (Mac(x) | Windows(x)))", "exists x.(OS(x) & (Mac(x) | Windows(x)))", "all x.(OS(x) -> (Mac(x) | Windows(x)))", "(exists x.(OS(x) & Mac(x)) | exists y.(OS(y) & Windows(y))))", "all x y.((OS(x) & Mac(y)) | Windows(y)) -> (Mac(x) | Windows(x)))", "all x.(Operation(x) -> (Mac(x) | Windows(x)))", "all x.(OS(x) -> (Microsoft(x) | Windows(x)))", "(exists x.(OS(x) & Mac(x)) | exists y.(Windows(y) & Windows(y))))", "all x.(OS(x) -> (Mac(y) | Windows(y)))", "all x.((OS(x) & (Mac(x) | Windows(x))) -> (Mac(x) | Windows(x)))", "all x.(OS(x) -> ((Mac(x) | Windows(x))))", "All x.(OS(x) -> (Mac(x) | Windows(x)))", "all x.(OS(x) -> (MacOS(x) | WindowsOS(x)))", "all x.((OS(x) & (Mac(x) | Windows(x))) -> OS(x))", "all x y.((OS(x) & Mac(y)) | Windows(y)) -> AvailableOn(x,y))"]}
{"id": "folio_train_1995", "nl": "All Windows are convenient.", "fol": "all x.(WindowsOS(x) -> IsConvenient(x))", "prediction": ["all x.(Windows(x) -> Convenient(x))", "all x.(Window(x) -> Convenient(x))", "All x.(Windows(x) -> Convenient(x))", "all x y.((Windows(x) & Windows(y)) -> Convenient(x))", "all x y.((Windows(x) & Window(y)) -> Convenient(x))", "all x y.((Windows(x) & Window(y)) -> Convenient(x,y))", "all x y.((Windows(x) & Windows(y)) -> Convenient(x,y))", "all x.(Windows(x) -> Comfortable(x))", "(all x.(Windows(x) -> Convenient(x)))", "all x.exists y.(Windows(x) & Windows(y) & Convenient(x,y))", "-all x.(Windows(x) -> Convenient(x))", "exists x.(Windows(x) & Convenient(x))", "(All x.(Windows(x) -> Convenient(x)))", "all x.exists y.(Windows(x) & Windows(y) & Convenient(x))", "all x.(Windows(x) -> Preferable(x))", "all x.exists y.(Windows(x) & Convenient(y))"]}
{"id": "folio_train_1996", "nl": "All software has code.", "fol": "all x.(SoftwareType(x) -> IsCode(x))", "prediction": ["all x.(Software(x) -> HasCode(x))", "all x.exists y.(Software(x) & Code(y) & Has(x,y))", "all x.exists y.(Software(x) & Code(y) & HasCode(x,y))", "all x y.((Software(x) & Code(y)) -> Has(x,y))", "all x.exists y.(Software(x) & Code(y) & UsedBy(x,y))", "all x.exists y.(Software(x) & Code(y) & Exists z.(Software(z) & HasCode(x,z))))", "all x.exists y.(Software(x) & Code(y))", "all x.exists y.(Software(x) & Code(y) & Exists z.(Software(z) & Code(z) & Has(x,z))))", "all x.exists y.(Software(x) & Code(y) & Exists z.(Software(z) & Has(x,z))))", "all x.exists y.(Software(x) & Code(y) & Contains(x,y))", "all x.exists y.(Software(x) & Code(y) & Exists z.(Software(z) & Code(z) & Has(x,y,z))))", "all x.exists y.(Software(x) & Code(y) & Has(x,y)))", "all x y.((Software(x) & Code(y)) -> HasCode(x,y))", "all x.exists y.(Software(x) & Code(y) & InSoftware(x,y))", "all x.exists y.(Software(x) & Code(y) & Exists z.(Software(z) & Code(z) & Has(x,y))))", "all x.exists y.(Software(x) & Code(y) & Exists z.(Software(z) & Code(z)) & Has(x,z)))"]}
{"id": "folio_train_1997", "nl": "If something is convenient, then it is popular.", "fol": "all x.(IsConvenient(x) -> IsPopular(x))", "prediction": ["all x.((Convenient(x) & Popular(x)) -> Convenient(x))", "all x.((Comfortable(x) & Popular(x)) -> Convenient(x))", "all x.((Convenient(x) & Popular(x)) -> Popular(x))", "all x.(Convenient(x) -> Popular(x))", "all x.((Convenient(x) & Popular(x)) -> Compelling(x))", "all x.((Convenient(x) & Popular(x)) -> Available(x))", "all x.((Convenient(x) & Popular(x)) -> (Convenient(x) & Popular(x)))", "all x.((Comfortable(x) & Popular(x)) -> Popular(x))", "all x.((Convenient(x) & Popular(x)) -> Preferable(x))", "all x.((Comfortable(x) & Popular(x)) -> Compelling(x))", "all x.((Convenient(x) & Popular(x)) -> -Convenient(x))", "all x.((Convenient(x) & Popular(x)) -> NotConvenient(x))", "all x.((Comfortable(x) & Popular(x)) -> Available(x))", "all x.((Convenient(x) & Popular(x)) -> Is(x,y))", "all x.((Convenient(x) & Popular(x)) -> Is(x))", "all x.((Convenient(x) -> Popular(x))"]}
{"id": "folio_train_1998", "nl": "Burger is a piece of code and a Mac.", "fol": "(IsCode(Burger) & MacOS(Burger))", "prediction": ["all x.(Burger(x) -> (Code(x) & Mac(x)))", "all x.(Bakery(x) -> (Code(x) & Mac(x)))", "all x.(Berger(x) -> (Code(x) & Mac(x)))", "all x.(Bread(x) -> (Code(x) & Mac(x)))", "all x.(Burger(x) -> (Code(x) & Mac(x)))", "all x.(Burst(x) -> (Code(x) & Mac(x)))", "all x y.((Burger(x) & Mac(y)) -> (Code(x) & Mac(x)))", "all x.(Baker(x) -> (Code(x) & Mac(x)))", "all x.(Bakery(x) -> (Code(x) & Mac(x)))", "all x.(Berger(x) -> (Code(x) & Mac(x)))", "all x.(Buffet(x) -> (Code(x) & Mac(x)))", "all x.(Breakfast(x) -> (Code(x) & Mac(x)))", "exists x.(Burger(x) & Code(x) & Mac(x))", "all x y.((Burger(x) & Mac(y)) -> (Code(x,y) & Mac(x,y)))", "all x y.((Burger(x) & Code(y)) -> Mac(x))", "all x y.((Burger(x) & Code(y)) -> (Code(x,y) & Mac(x)))"]}
{"id": "folio_train_1999", "nl": "PyTorch is either Windows and software, or neither Windows nor software.", "fol": "((WindowsOS(Pytorch) & SoftwareType(Pytorch) & -(-WindowsOS(Pytorch) & -SoftwareType(Pytorch))) | (-(WindowsOS(Pytorch) & SoftwareType(Pytorch)) & -WindowsOS(Pytorch) & -SoftwareType(Pytorch)))", "prediction": ["all x.(PyTorch(x) -> ((Windows(x) & Software(x)) | (-Windows(x) & Software(x)))))", "all x.(PyTorch(x) -> ((Windows(x) & Software(x)) | (-Windows(x) & Software(x))))", "all x.(PyTorch(x) -> ((Windows(x) & Software(x)) | -Windows(x) & Software(x))))", "all x.(PyTorch(x) -> (Windows(x) & Software(x)) | (-Windows(x) & Software(x))))", "all x.(PyTorch(x) -> (WindowsAndSoftware(x) | -WindowsAndSoftware(x)))", "exists x.(PyTorch(x) & ((Windows(x) & Software(x)) | -Windows(x) & Software(x))))", "all x.(PyTorch(x) -> ((Windows(x) & Software(x)) | -Windows(x) & Software(x)))", "exists x.(PyTorch(x) & ((Windows(x) & Software(x)) | (-Windows(x) & Software(x)))))", "(all x.(PyTorch(x) -> (Windows(x) & Software(x)) | (-Windows(x) & Software(x)))))", "(all x.(PyTorch(x) -> (Windows(x) & Software(x))) | (-Windows(x) & Software(x))))", "all x.(PyTorch(x) -> (Windows(x) & Software(x) | -Windows(x) & Software(x)))", "all x.(PyTorch(x) -> (Windows(x) & Software(x)) | -Windows(x) & Software(x)))", "all x.(PyTorch(x) -> ((Windows(x) & Software(x)) | -(Windows(x) & Software(x)))))", "(all x.(PyTorch(x) -> (Windows(x) & Software(x)) | (-Windows(x) & Software(x))))", "all x.(PyTorch(x) -> (Windows(x) | Software(x)) | (-Windows(x) & Software(x))))", "(exists x.(PyTorch(x) & Windows(x)) & -exists y.(Windows(y) & Software(y))))"]}
{"id": "folio_train_2000", "nl": "Burger is popular.", "fol": "IsPopular(Burger)", "prediction": ["all x.(Bakery(x) -> Popular(x))", "all x.(Burger(x) -> Popular(x))", "all x.(Berger(x) -> Popular(x))", "All x.(Bakery(x) -> Popular(x))", "exists x.(Bakery(x) & Popular(x))", "All x.(Burger(x) -> Popular(x))", "All x.(Berger(x) -> Popular(x))", "exists x.(Berger(x) & Popular(x))", "(Popular(Burger))", "(PopularBakery(Burger))", "(Popular(Burger) -> Popular(Burger))", "(Popular(Berger) -> Popular(Berger))", "(Popular(Burger) -> Popular(Burger))", "(Popular(Burger) & Popular(Burger))", "(Popular(Berger) -> Popular(Berger))", "(Popular(Berger))"]}
{"id": "folio_train_2001", "nl": "Burger is not popular.", "fol": "-IsPopular(Burger)", "prediction": ["all x.(Burger(x) -> -Popular(x))", "all x.(Bakery(x) -> -Popular(x))", "all x.(Berger(x) -> -Popular(x))", "-PopularBakery(Burger)", "(-PopularBakery(Burger))", "(-Popular(Burger))", "(-Popular(Bakery))", "-PopularBakery(burger)", "(-Popular(Berger))", "-Popular(Bakery)", "-Popular(Burger)", "-PopularBakery(Bakery)", "(-PopularBurger(Burger))", "(-PopularBakery(Bakery))", "all x.(Burger(x) -> -Popular(x))", "(-PopularBakery(Berger))"]}
{"id": "folio_train_2002", "nl": "PyTorch is popular and has code.", "fol": "(IsPopular(Pytorch) & IsCode(Pytorch))", "prediction": ["all x.(PyTorch(x) -> (Popular(x) & HasCode(x)))", "(Popular(PyTorch) & HasCode(PyTorch))", "exists x.(PyTorch(x) & Popular(x) & HasCode(x))", "All x.(PyTorch(x) -> (Popular(x) & HasCode(x)))", "all x.(PyTorch(x) -> (Popular(x) & HasCode(x)))", "all x.((PyTorch(x) & Popular(x) & HasCode(x)) -> HasCode(x))", "(PopularPyTorch(PyTorch) & HasCode(PyTorch))", "all x y.((PyTorch(x) & Popular(x) & HasCode(x)) -> HasCode(x))", "all x y.((PyTorch(x) & Popular(x) & Code(y)) -> Has(x,y))", "all x y.((PyTorch(x) & Popular(y)) -> HasCode(x,y))", "all x y.((PyTorch(x) & Popular(y)) -> HasCode(x))", "all x y.((PyTorch(x) & Popular(x) & HasCode(y)) -> HasCode(x,y))", "all x y.((PyTorch(x) & Popular(y) & HasCode(x)) -> HasCode(x,y))", "all x y.((PyTorch(x) & Popular(x)) -> HasCode(x))", "all x y.((PyTorch(x) & Popular(y) & HasCode(x)) -> HasCode(x))", "all x y.((PyTorch(x) & Popular(x) & Code(y)) -> HasCode(x,y))"]}
{"id": "folio_train_2003", "nl": "PyTorch is not popular and has code.", "fol": "(-IsPopular(Pytorch) & IsCode(Pytorch))", "prediction": ["(-Popular(PyTorch) & HasCode(PyTorch))", "all x.(PyTorch(x) -> (-Popular(x) & HasCode(x)))", "exists x.(PyTorch(x) & -Popular(x) & HasCode(x))", "-Popular(PyTorch) & HasCode(PyTorch))", "all x.((PyTorch(x) & -Popular(x) & HasCode(x)) -> -Popular(x))", "All x.(PyTorch(x) -> (-Popular(x) & HasCode(x)))", "(PyTorch(PyTorch) & -Popular(PyTorch) & HasCode(PyTorch))", "all x.(PyTorch(x) -> (-Popular(x) & HasCode(x)))", "all x.(PyTorch(x) -> -Popular(x) & HasCode(x))", "(-PopularPyTorch(PyTorch) & HasCode(PyTorch))", "all x y.((PyTorch(x) & Popular(y)) -> (-Popular(x) & HasCode(x)))", "(PyTorch(Py) & -Popular(Py) & HasCode(Py))", "all x.((PyTorch(x) & -Popular(x)) -> HasCode(x))", "-Popular(PyTorch) & HasCode(PyTorch)", "(-Popular(pyTorch) & HasCode(pyTorch))", "all x y.((PyTorch(x) & Popular(y)) -> HasCode(x,y))"]}
{"id": "folio_train_2004", "nl": "Roads are made of either concrete or asphalt.", "fol": "all x.(IsRoad(x) -> (IsMadeOfConcrete(x) | IsMadeOfAsphalt(x)))", "prediction": ["all x.(Road(x) -> (MadeOfConcrete(x) | MadeOfAsphalt(x)))", "all x.(Road(x) -> (MadeOf(x,Concrete) | MadeOf(x,Asphalt)))", "all x.(Road(x) -> (MadeOf(x,Cement) | MadeOf(x,Asphalt)))", "all x.(Road(x) -> (MadeOfCement(x) | MadeOfAsphalt(x)))", "all x.(Road(x) -> (MadeOf(x,concrete) | MadeOf(x,asphalt)))", "all x.(Road(x) -> ((MadeOfConcrete(x) | MadeOfAsphalt(x))))", "all x y.((Road(x) & (Concrete(y) | Asphalt(y))) -> MadeOf(x,y))", "all x.(Road(x) -> (madeOfConcrete(x) | MadeOfAsphalt(x)))", "all x y.((Road(x) & Concrete(y)) | Asphalt(y)) -> MadeOf(x,y))", "all x.(Road(x) -> (MadeOfConcrete(x) | MadeOfAsphalt(x)))", "all x.(Road(x) -> (Concrete(x) | Asphalt(x)))", "all x.(Road(x) -> (MadeOf(x,Concrete) | MadeOf(x,Asphalt)))", "all x.(Road(x) -> (MadeOf(x,Concrete,Asphalt) | MadeOf(x,Asphalt)))", "all x.(Road(x) -> (madeOf(x,Concrete) | MadeOf(x,Asphalt)))", "all x.(Road(x) -> (MadeOf(x,Cement,Asphalt) | MadeOf(x,Asphalt)))", "all x.(Road(x) -> (Cement(x) | Asphalt(x)))"]}
{"id": "folio_train_2005", "nl": "Roads made of concrete last longer than roads made with asphalt.", "fol": "all x y.((IsRoad(x) & IsMadeOfConcrete(x) & IsRoad(y) & IsMadeOfAsphalt(y)) -> LastsLongerThan(x,y))", "prediction": ["all x y.((Road(x) & Road(y) & MadeOfConcrete(x) & MadeOfAsphalt(y)) -> LastsLonger(x,y))", "all x.((Road(x) & MadeOfConcrete(x) & MadeOfAsphalt(x)) -> LastsLonger(x))", "all x y.((Road(x) & Road(y) & MadeOfConcrete(x) & MadeWithAsphalt(y)) -> LastsLonger(x,y))", "all x y.((Road(x) & Road(y) & Concrete(x) & Asphalt(y)) -> LastsLonger(x,y))", "all x y.((Road(x) & Road(y) & MadeOfConcrete(x)) -> LastsLonger(x,y))", "all x y.((Road(x) & Road(y) & MadeOfCement(x) & MadeOfAsphalt(y)) -> LastsLonger(x,y))", "all x y.((Road(x) & Road(y) & MadeOf(x,Concrete) & MadeOf(y,Asphalt)) -> LastsLonger(x,y))", "all x y.((Road(x) & Road(y) & Asphalt(y)) -> LastsLonger(x,y))", "all x.((Road(x) & MadeOfConcrete(x) & MadeWithAsphalt(x)) -> LastsLonger(x))", "all x.((Road(x) & MadeOfConcrete(x) & MadeOfAsphalt(x)) -> LastsLonger(x,y))", "all x y.((Road(x) & Road(y) & MadeOf(x,Cement) & MadeOf(y,Asphalt)) -> LastsLonger(x,y))", "all x y.((Road(x) & Road(y) & MadeOfConcrete(x) & MadeOfAsphalt(y)) -> LongerLasting(x,y))", "all x y.((Road(x) & Road(y) & MadeOfConcrete(x) & MadeOfAsphalt(y)) -> LastLonger(x,y))", "all x y.((Road(x) & Road(y) & MadeOfConcrete(x,y)) -> LastsLonger(x,y))", "all x y.((Road(x) & Road(y)) -> (MadeOfConcrete(x) & MadeOfAsphalt(y)))", "all x.((Road(x) & MadeOfConcrete(x)) -> LastsLonger(x))"]}
{"id": "folio_train_2006", "nl": "Roads made of asphalt are smoother than roads made of concrete.", "fol": "all x y.((IsRoad(x) & IsMadeOfAsphalt(x) & IsRoad(y) & IsMadeOfConcrete(y)) -> IsSmootherThan(x,y))", "prediction": ["all x y.((Road(x) & Road(y) & MadeOfAsphalt(x) & MadeOfConcrete(y)) -> Smoother(x,y))", "all x y.((Road(x) & Road(y) & Asphalt(x) & Concrete(y)) -> Smoother(x,y))", "all x y.((Road(x) & Road(y) & MadeOfAsphalt(x)) -> Smoother(x,y))", "all x y.((Road(x) & Road(y) & MadeOfAsphalt(x)) -> SmootherThan(x,y))", "all x.((Road(x) & MadeOfAsphalt(x)) -> SmootherThanConcrete(x))", "all x y.((Road(x) & Road(y) & MadeOfAsphalt(x) & MadeOfConcrete(y)) -> SmootherThan(x,y))", "all x y.((Road(x) & Road(y) & MadeOfAsphalt(x)) -> SmootherThanConcrete(y))", "all x y.((Road(x) & Road(y) & Asphalt(x)) -> Smoother(x,y))", "all x y.((Road(x) & Road(y) & Asphalt(x)) -> SmootherThan(x,y))", "all x.((Road(x) & MadeOfAsphalt(x)) -> SmootherThan(x,Concrete(x))", "all x y z.((Road(x) & Asphalt(y) & Concrete(z)) -> Smoother(x,y,z))", "all x y.((Road(x) & Road(y) & MadeOf(x,Asphalt)) -> SmootherThan(x,Concrete))", "all x.((Road(x) & MadeOfAsphalt(x)) -> SmootherThan(x,Concrete))", "all x y.((Road(x) & Road(y) & MadeOfAsphalt(x) & MadeOfConcrete(y)) -> Smoother(x))", "all x y.((Road(x) & Asphalt(y) & Concrete(y)) -> Smoother(x,y))", "all x.((Road(x) & MadeOfAsphalt(x)) -> Smoother(x))"]}
{"id": "folio_train_2007", "nl": "Everyone prefers the smoother of two roads. ", "fol": "all z.((IsRoad(x) & IsRoad(y) & IsSmootherThan(x,y)) -> PrefersRoad(z,x))", "prediction": ["all x.(PrefersSmootherOfTwoRoads(x) -> SmootherOfTwoRoads(x))", "all x.(PrefersSmootherTwoRoads(x) -> SmootherTwoRoads(x))", "all x y.((Road(x) & Road(y)) -> Smoother(x,y))", "all x.(PrefersSmootherRoad(x) -> SmootherRoad(x))", "all x.(PrefersSmootherOfTwoRoads(x) -> SmootherOfTwoRoads(x))", "all x y.((Road(x) & Road(y)) -> PrefersSmoother(x,y))", "all x.(PrefersSmootherRoads(x) -> SmootherRoads(x))", "all x y.((Road(x) & Road(y) & Smoother(x,y)) -> Prefers(x,y))", "all x y.((Road(x) & Road(y)) -> PrefersSmoother(x,y))", "all x y.((Road(x) & Road(y)) -> (PrefersSmoother(x,y) | PrefersSmoother(x,y)))", "all x.(PrefersSmootherOfTwoRoads(x) -> EveryonePrefersSmootherOfTwoRoads(x))", "all x y.((Road(x) & Road(y) & Smoother(x,y)) -> Prefers(x,y))", "all x y z.((Road(x) & Road(y) & Road(z)) -> PrefersSmoother(x,y,z))", "all x y z.((Road(x) & Road(y) & Road(z)) -> PrefersSmoother(x,y,z))", "all x y.((Road(x) & Road(y) & Smoother(y,x)) -> Prefers(x,y))", "all x y.((Road(x) & Road(y)) -> (PrefersSmoother(x,y) & Smoother(x,y)))"]}
{"id": "folio_train_2008", "nl": "Road one is made of concrete and Road two is made of asphalt.", "fol": "(IsRoad(One) & IsMadeOfConcrete(One) & IsRoad(Two) & IsMadeOfAsphalt(Two))", "prediction": ["(MadeOfConcrete(Road1) & MadeOfAsphalt(Road2))", "(all x.(RoadOne(x) -> MadeOfConcrete(x)) & all y.(Road2(y) -> MadeOfAsphalt(y)))", "all x y.((Road(x) & Road(y)) -> (MadeOfConcrete(x) & MadeOfAsphalt(y)))", "(all x.(Road(x) -> MadeOfConcrete(x)) & all y.(Road(y) -> MadeOfAsphalt(y)))", "(all x.(Road(x) -> MadeOfConcrete(x)) & (Road(x) -> MadeOfAsphalt(x)))", "(all x y.((Road(x) & Road(y)) -> MadeOfConcrete(x)) & ((Road(y) & Road(y)) -> MadeOfAsphalt(y)))", "(all x y.(Road(x) -> MadeOfConcrete(x)) & (Road(y) -> MadeOfAsphalt(y)))", "(all x.(RoadOne(x) -> MadeOfConcrete(x)) & (Road2(x) -> MadeOfAsphalt(x)))", "(all x.(Road1(x) -> MadeOfConcrete(x)) & all y.(Road2(y) -> MadeOfAsphalt(y)))", "(all x.(RoadOne(x) -> MadeOfConcrete(x)) & all y.(Road(y) -> MadeOfAsphalt(y)))", "(all x.(Road1) -> MadeOfConcrete(x)) & all y.(Road2) -> MadeOfAsphalt(y)))", "all x y z.((Road(x) & Road(y) & Road(z)) -> (MadeOfConcrete(x) & MadeOfAsphalt(y)))", "all x y.((Road(x) & Road(y)) -> (MadeOf(x,Concrete) & MadeOf(y,Asphalt)))", "all x y.((Road(x) & Road(y)) -> (MadeOfConcrete(x) | MadeOfAsphalt(y)))", "(all x.(Road1) -> MadeOfConcrete(x)) & (Road2) -> MadeOfAsphalt(x)))", "(all x.(RoadOne(x) -> Concrete(x)) & all y.(Road2(y) -> Asphalt(y)))"]}
{"id": "folio_train_2009", "nl": "Road one will last longer than Road two", "fol": "LastsLongerThan(One,Two)", "prediction": ["all x y.((RoadOne(x) & Road2(y)) -> LastsLonger(x,y))", "all x y z.((RoadOne(x) & Road(y) & Road(z)) -> LastsLonger(x,y,z))", "all x y z.((RoadOne(x) & Road(y) & Road(z)) -> LastsLongerThan(x,y,z))", "all x y.((RoadOne(x) & Road(y)) -> LastsLonger(x,y))", "all x y.((RoadOne(x) & Road(y)) -> LastsLongerThan(x,y))", "all x y.((RoadOne(x) & Road2(y)) -> LastsLongerThan(x,y))", "all x y z.((Road(x) & RoadOne(y) & Road2(z)) -> LastsLonger(x,y,z))", "all x y z.((Road(x) & Road(y) & Road(z)) -> LastsLonger(x,y,z))", "all x y z.((Road(x) & Road(y) & Road(z)) -> LastsLongerThan(x,y,z))", "all x y.((RoadOne(x) & RoadTwo(y)) -> LastsLonger(x,y))", "all x y.((RoadOne(x) & Road2(y)) -> LastLonger(x,y))", "All x y.((RoadOne(x) & Road2(y)) -> LastsLonger(x,y))", "all x y.((Road(x) & Road(y)) -> LastsLongerThan(x,y))", "(LastsLongerRoadOne(Road1) & LastsLongerRoad2(Road1))", "all x y z.((RoadOne(x) & Road(y) & Road(z)) -> (LastsLonger(x,y,z)))", "(LongerRoadOne(Road1) & LongerRoad2(Road1))"]}
{"id": "folio_train_2010", "nl": "Road two is not smoother than Road one.", "fol": "-IsSmootherThan(Two,One)", "prediction": ["all x y.((Road(x) & Road(y)) -> -SmootherThan(x,y))", "all x.(RoadTwo(x) -> -SmootherThanRoadOne(x))", "all x y.((Road(x) & RoadOne(y)) -> -Smoother(x,y))", "all x y.((Road(x) & Road(y)) -> -Smoother(x,y))", "all x.(Road(x) -> -SmootherThanRoad(x))", "all x y.((Road(x) & RoadOne(y)) -> -SmootherThan(x,y))", "all x y.((Road(x) & Road(y)) -> -SmootherThanRoad(x,y))", "All x.(Road(x) -> -SmootherThanRoad(x))", "all x.(Road(x) -> -Smoother(x,Road1))", "(Smoother(Road2) & -Smoother(Road1))", "all x.(Road(x) -> -SmootherThan(x,Road1))", "all x.(RoadTwo(x) -> -Smoother(x,Road1))", "all x y.((Road(x) & RoadOne(y)) -> -SmootherThanRoad(x,y))", "Road Two & Road One -SmootherThan(Road2))", "Road Two -SmootherThanRoadOne(Road2))", "all x.(Road(x) -> -SmootherThanRoad(x,Road1))"]}
{"id": "folio_train_2011", "nl": "John prefers Road two.", "fol": "PrefersRoad(John,Two)", "prediction": ["(PrefersRoadTwo(John))", "John prefersRoadTwo(John)", "all x.(John(x) -> PrefersRoadTwo(x))", "John prefers Road Two.", "(PrefersRoad2(John))", "all x.((John(x) & RoadTwo(x)) -> Prefers(x,y))", "all x.((John(x) & RoadTwo(x)) -> Prefers(x,2))", "all x.(John(x) -> PrefersRoad2(x))", "John prefersRoadTwo.", "all x.((John(x) & RoadTwo(x)) -> Prefers(x))", "all x.((John(x) & RoadTwo(x)) -> Prefers(x,2))", "all x.((John(x) & RoadTwo(x)) -> Prefers(x,y))", "(PrefersRoad(John) & RoadTwo(John))", "all x.((John(x) & Road2(x)) -> Prefers(x,2))", "(PrefersRoad2(John) & -PrefersRoad2(John))", "(PrefersRoad2(John) & PrefersRoad2(John))"]}
{"id": "folio_train_2012", "nl": "Camp Davern is a traditional summer camp for boys and girls.", "fol": "(IsTraditionalSummerCamp(Campdavern) & IsForBoysAndGirls(Campdavern))", "prediction": ["all x.(CampDavern(x) -> (TraditionalSummerCamp(x) & ForBoys(x) & ForGirls(x)))", "all x.(Camp(x) -> (TraditionalSummerCamp(x) & ForBoys(x) & ForGirls(x)))", "all x.(CampDavern(x) -> (TraditionalSummerCamp(x) & ForBoys(x) & ForGirls(x)))", "all x.(CampDavern(x) -> (TraditionalSummerCamp(x) & ForBirds(x) & ForGirls(x)))", "all x.(Camp(x) -> (TraditionalSummerCamp(x) & ForBirds(x) & ForGirls(x)))", "all x.((Camp(x) & TraditionalSummerCamp(x)) -> (ForBoys(x) | ForGirls(x)))", "all x.(CampDavern(x) -> (TraditionalSummerCamp(x) & ForBirds(x) & ForGirls(x)))", "all x.(CampDarn(x) -> (TraditionalSummerCamp(x) & ForBoys(x) & ForGirls(x)))", "all x.(CampDawrn(x) -> (TraditionalSummerCamp(x) & ForBoys(x) & ForGirls(x)))", "all x.((Camp(x) & TraditionalSummerCamp(x)) -> (ForBirds(x) | ForGirls(x)))", "all x y.((Camp(x) & Camp(y)) -> (ForBoys(x,y) | ForGirls(x,y)))", "all x.((Camp(x) & TraditionalSummerCamp(x) & ForBoys(x) & ForGirls(x)) -> Camp Davern(x))", "all x.((Camp(x) & TraditionalSummerCamp(x) & ForBoys(x) & ForGirls(x)) -> CampDavern(x))", "all x.((Camp(x) & TraditionalSummerCamp(x) & ForBoys(x) & ForGirls(x)) -> CampDavern(x))", "all x.((Camp(x) & Camp(x)) -> (ForBoys(x) | ForGirls(x)))", "all x y.((Camp(x) & Camp(y)) -> (ForBoys(x) | ForGirls(x)))"]}
{"id": "folio_train_2013", "nl": "Camp Davern was established in the year 1946.", "fol": "EstablishedInYear(Campdavern,Year1946)", "prediction": ["Camp Davern was established in the year 1946.", "all x y.((CampDavern(x) & Year(y)) -> EstablishedIn(x,y))", "all x y.((Camp(x) & CampDavern(y)) -> EstablishedIn(x,y))", "all x.(CampDavern(x) -> EstablishedInYear(x,46))", "all x y.((Camp(x) & CampDavern(y)) -> EstablishedInSummer(x,y))", "all x.(CampDavern(x) -> EstablishedInSummer46(x))", "all x y.((Camp(x) & CampDavern(y)) -> EstablishedInYear(x,y))", "all x.(CampDavern(x) -> EstablishedInSummer(x))", "all x.(CampDavern(x) -> EstablishedInSummer(x,46))", "all x.(CampDavern(x) -> EstablishedInYear(x,Suf 1946))", "all x y.((Camp(x) & CampDavern(y)) -> EstablishedInTheYear(x,y))", "all x.(CampDavern(x) -> EstablishedInYear(x,Supply46))", "all x y.((CampDavern(x) & Year(y)) -> Established(x,y))", "all x y.((Camp(x) & CampDavern(y)) -> EstablishedInSecond(x,y))", "all x y.((Camp(x) & CampDavern(y)) -> EstablishedInSummer46(x,y))", "all x.(CampDavern(x) -> EstablishedInYear(x,Su46))"]}
{"id": "folio_train_2014", "nl": "Camp Davern was operated by the YMCA until the year 2015.", "fol": "OperatedByYMCAUntilYear(Campdavern,Year2015)", "prediction": ["all x y z.((CampDavern(x) & YMCA(y) & Year(z)) -> OperatedBy(x,y,z))", "all x y.((CampDavern(x) & YMCA(y)) -> OperatedUntil(x,y))", "all x y z.((Camp(x) & YMCA(y) & Year(z)) -> OperatedBy(x,y,z))", "all x y.((CampDavern(x) & YMCA(y)) -> OperatedBy(x,y))", "all x y.((Camp(x) & YMCA(y)) -> OperatedBy(x,y))", "all x.(CampDavern(x) -> OperatedByYMCA(x))", "all x y z.((CampDavern(x) & YMCA(y) & Year(z)) -> OperatedBy(x,y))", "all x y.((CampDavern(x) & YMCA(y)) -> OperatedUntilYear(x,y))", "all x y z.((CampDavern(x) & YMCA(y) & Year(z) & OperatedBy(x,y,z)) -> OperatedBy(x,y,z))", "all x y.((CampDavern(x) & YMCA(y)) -> OperatedUntilYear2015(x,y))", "all x y.((CampDavern(x) & YMCA(y)) -> OperatedUntil2015(x,y))", "all x y z.((Camp(x) & YMCA(y) & Year(z) & OperatedBy(x,y,z)) -> OperatedBy(x,y,z))", "all x y z.((CampDavern(x) & YMCA(y) & Year(z)) -> OperatedByUntil(x,y,z))", "all x y.((CampDavern(x) & YMCA(y)) -> OperatedBy(x,y))", "all x y.((CampDavern(x) & YMCA(y)) -> OperatedUntil(x,y))", "all x y z.((Camp(x) & YMCA(y) & Year(z) & OperatedBy(x,y)) -> OperatedBy(x,z))"]}
{"id": "folio_train_2015", "nl": "Camp Davern is one of Ontario's oldest summer camps.", "fol": "IsOneOfOldestSummerCamps(Campdavern,Ontariosoldestsummercamps)", "prediction": ["all x.((Camp(x) & Davern(x)) -> OntariosOldestSummerCamp(x))", "all x.(CampDavern(x) -> OntariosOldestSummerCamp(x))", "all x.(CampDavern(x) -> OntariosOldestSummerCamp(x))", "all x.((Camp(x) & CampDavern(x)) -> OntariosOldestSummerCamp(x))", "all x.((Camp(x) & Camp Davern(x)) -> OntariosOldestSummerCamp(x))", "all x.((Camp(x) & CampDavern(x)) -> OntariosOldestSummerCamp(x))", "All x.(CampDavern(x) -> OntariosOldestSummerCamp(x))", "all x.(Camp(x) -> (OntariosOldestSummerCamp(x) & CampDavern(x)))", "all x y.((Camp(x) & Camp(y)) -> (OntariosOldest(x,y) & Camp(y)))", "all x.((Camp(x) & CampDavern(x)) -> OntariosOldest(x))", "all x.(CampDarn(x) -> OntariosOldestSummerCamp(x))", "all x.((Camp(x) & Camp Davern(x)) -> OntariosOldest(x))", "all x.(Camp(x) -> (OntariosOldestSummerCamp(x) & CampDavern(x)))", "all x.((Camp(x) & CampDavern(x)) -> OntariosOldest(x))", "all x y.((Camp(x) & Camp(y)) -> (OntariosOldest(x,y) & Camp(x,y)))", "all x.((Camp(x) & Davern(x)) -> OntarioSummerCamp(x))"]}
{"id": "folio_train_2016", "nl": "One of Ontario's oldest summer camps is a traditional summer camp for boys and girls.", "fol": "exists x.(IsOneOfOldestSummerCamps(x,Ontariosoldestsummercamps) & IsTraditionalSummerCamp(x) & IsForBoysAndGirls(x))", "prediction": ["all x.((OldestSummerCamp(x) & TraditionalSummerCamp(x)) -> (ForBoys(x) | ForGirls(x)))", "all x.((OntariosOldestSummerCamp(x) & TraditionalSummerCamp(x)) -> (ForBoys(x) | ForGirls(x)))", "all x.((SummerCamp(x) & OldestOntarioSummerCamp(x)) -> (TraditionalSummerCamp(x) & ForBoys(x) & ForGirls(x)))", "all x.((OntarioSummerCamp(x) & TraditionalSummerCamp(x)) -> (ForBoys(x) | ForGirls(x)))", "all x.((SummerCamp(x) & OntariosOldest(x)) -> (Traditional(x) & ForBoys(x) & ForGirls(x)))", "all x.((OntarioSummerCamp(x) & Oldest(x)) -> (TraditionalSummerCamp(x) & ForBoys(x) & ForGirls(x)))", "all x.((SummerCamp(x) & OntariosOldest(x)) -> (TraditionalSummerCamp(x) & ForBoys(x) & ForGirls(x)))", "all x.((SummerCamp(x) & OntariosOldest(x)) -> (TraditionalCamp(x) & ForBoys(x) & ForGirls(x)))", "all x y.((OldestSummerCamp(x) & Ontario(y)) -> (TraditionalSummerCamp(x,y) & ForBoys(x) & ForGirls(x)))", "all x y.((OldestSummerCamp(x) & Ontario(y)) -> (TraditionalSummerCamp(x,y) & ForBoysAndGirls(x)))", "all x.((OntariosOldestSummerCamp(x) & TraditionalSummerCamp(x)) -> ForBoysAndGirls(x))", "all x y.((OldestSummerCamp(x) & Ontario(y)) -> (TraditionalSummerCamp(x,y) & ForBoys(x,y) & ForGirls(x,y)))", "all x.((OntariosOldestSummerCamp(x) & TraditionalSummerCamp(x)) -> (ForBirds(x) | ForGirls(x)))", "all x.(OldestSummerCamp(x) -> (TraditionalSummerCamp(x) & ForBoys(x) & ForGirls(x)))", "all x y.((OldestSummerCamp(x) & Ontario(y)) -> (TraditionalSummerCamp(x) & ForBoys(x) & ForGirls(x)))", "all x.((OldestSummerCamp(x) & TraditionalSummerCamp(x)) -> ForBoysAndGirls(x))"]}
{"id": "folio_train_2017", "nl": "A traditional summer camp for boys and girls was operated by the YMCA until the year 2015.", "fol": "exists x.(IsTraditionalSummerCamp(x) & IsForBoysAndGirls(x) & OperatedByYMCAUntilYear(x,Year2015))", "prediction": ["all x y.((SummerCamp(x) & YMCA(y)) -> (OperatedBy(x,y) & OperatedBy(x,y)))", "all x y.((Camp(x) & YMCA(y)) -> (OperatedBy(x,y) & OperatedBy(x,y)))", "all x y z.((TraditionalSummerCamp(x) & Boy(y) & Girl(z)) -> OperatedByYMCA(x,y,z))", "all x y z.((SummerCamp(x) & (Boys(y) | Girls(y)) & YMCA(z)) -> OperatedBy(x,y,z))", "all x y z.((TraditionalSummerCamp(x) & (Boys(y) | Girls(y)) & YMCA(z)) -> OperatedBy(x,y,z))", "all x y z.((TraditionalSummerCamp(x) & Boys(y) & Girls(z)) -> OperatedByYMCA(x,y,z))", "all x y z.((SummerCamp(x) & Boy(y) & Girl(z)) -> OperatedByYMCA(x,y,z))", "all x y.((SummerCamp(x) & YMCA(y)) -> (OperatedBy(x,y) & OperatedBy(x,y) & -OperatedBy(x,y)))", "all x y.((SummerCamp(x) & YMCA(y)) -> (OperatedBy(x,y) & OperatedBy(x,y) & OperatedBy(x,y)))", "all x y.((SummerCamp(x) & YMCA(y)) -> (OperatedBy(x,y) | OperatedBy(x,y)))", "all x y.((SummerCamp(x) & YMCA(y)) -> OperatedBy(x,y))", "all x y.((Camp(x) & YMCA(y)) -> (OperatedBy(x,y) & OperatedBy(x,y) & OperatedBy(x,y)))", "all x y z.((SummerCamp(x) & (Boys(y) | Girls(y)) & YMCA(z)) -> Operated(x,y,z))", "all x y z.((TraditionalSummerCamp(x) & (Boys(y) | Girls(y)) & YMCA(z)) -> Operated(x,y,z))", "all x y z.((SummerCamp(x) & Boy(y) & Girl(z) & OperatedByYMCA(x,y,z)) -> OperatedByYMCA(x,y,z))", "all x y.((SummerCamp(x) & YMCA(y)) -> (OperatedBy(x,y) & OperatedBy(y,x)))"]}
{"id": "folio_train_2018", "nl": "Camp Davern was established in 1989.", "fol": "EstablishedInYear(Campdavern,Year1989)", "prediction": ["Camp Davern was established in 1989.", "(EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern))", "(EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern))", "(EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern))", "(EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern))", "(EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern)))", "(EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(Davern)", "(EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(", "(EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern)))", "(EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(Davern))", "all x.(CampDavern(x) -> EstablishedIn(x,89))", "(EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern))", "(EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern)", "(EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(Davern(Davern))", "(EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDavern, 1989))", "(EstablishedIn(CampDavern) & EstablishedIn(CampDavern) & EstablishedIn(CampDarn) & EstablishedIn(CampDarn) & EstablishedIn(CampDarn) & EstablishedIn(CampDarn) & EstablishedIn(CampDarn) & EstablishedIn(CampDarn) & EstablishedIn(CampDarn) & EstablishedIn(CampDarn) & EstablishedIn(CampDarn)"]}
{"id": "folio_train_2019", "nl": "If people publish journals, then they do not work in the entertainment industry.", "fol": "all x.(PublishesJournals(x) -> -WorksInEntertainmentIndustry(x))", "prediction": ["all x.(PublishesJournals(x) -> -EntertainmentIndustry(x))", "all x.(PublishesJournals(x) -> -WorksInEntertainmentIndustry(x))", "all x.(PublishesJournals(x) -> -WorksInEntertainment(x))", "all x.(PublishesJournals(x) -> -WorkInEntertainmentIndustry(x))", "all x.(PublishesJournals(x) -> -WorkInEntertainment(x))", "all x.(PublishJournals(x) -> -EntertainmentIndustry(x))", "all x.(PublishesJournals(x) -> -Entertainment(x))", "all x y.((PublishesJournals(x) & EntertainmentIndustry(y)) -> -WorksIn(x,y))", "all x.(PublishesJournals(x) -> -(EntertainmentIndustry(x) | EntertainmentIndustry(x)))", "all x.((PublishesJournals(x) & EntertainmentIndustry(x)) -> -WorksIn(x,EntertainmentIndustry))", "all x.(PublishJournals(x) -> -WorksInEntertainmentIndustry(x))", "all x.(PublishesJournals(x) -> -EntertainmentWorker(x))", "all x.(PublishesJournals(x) -> -InEntertainmentIndustry(x))", "all x.(PublishJournals(x) -> -WorkInEntertainmentIndustry(x))", "all x.(PublishesJournals(x) -> -(EntertainmentIndustry(x) | EntertainmentIndustry(x))))", "all x.(PublishesJournal(x) -> -EntertainmentIndustry(x))"]}
{"id": "folio_train_2020", "nl": "All people who are award-winning novelists publish journals.", "fol": "all x.(IsAwardWinningNovelist(x) -> PublishesJournals(x))", "prediction": ["all x.((Person(x) & AwardWinningNovelist(x)) -> PublicsJournals(x))", "all x.((Person(x) & AwardWinningNovelist(x)) -> PublishesJournals(x))", "all x.(AwardWinningNovelist(x) -> PublicsJournals(x))", "all x.((Person(x) & AwardWinningNovelist(x)) -> PublicatesJournals(x))", "all x.((Person(x) & AwardWinningNovelist(x)) -> PublicatesJournals(x))", "all x.((Person(x) & AwardWinningNovelist(x)) -> (PublishesJournals(x)))", "all x.((Person(x) & AwardWinningNovelist(x)) -> PublicsJournal(x))", "all x.((Person(x) & AwardWinningNovelist(x)) -> PublicationsJournals(x))", "all x.((Person(x) & AwardWinningNovelist(x)) -> PressesJournals(x))", "all x.((Person(x) & AwardWinningNovelist(x)) -> PublicsJournals(x))", "all x.((Person(x) & AwardWinningNovelist(x)) -> EditsJournals(x))", "all x.((Person(x) & AwardWinningNovelist(x)) -> PublishersJournals(x))", "all x.((Person(x) & AwardWinningNovelist(x)) -> PostsJournals(x))", "all x.(AwardWinningNovelist(x) -> (PublishesJournals(x)))", "all x.(AwardWinningNovelist(x) -> PublishesJournals(x))", "all x.((Person(x) & AwardWinningNovelist(x)) -> PublishedJournal(x))"]}
{"id": "folio_train_2021", "nl": "People either work in the entertainment industry or are highly acclaimed in their profession.", "fol": "all x.(WorksInEntertainmentIndustry(x) | IsHighlyAcclaimed(x))", "prediction": ["all x.(Person(x) -> (WorksInEntertainment(x) | HighlyAcclaimedInProfession(x)))", "all x.((Person(x) & (WorksInEntertainment(x) | HighlyAcclaimedInProfession(x))) -> HighlyAcclaimedInProfession(x))", "all x.(Person(x) -> (WorksInEntertainmentIndustry(x) | HighlyAcclaimedInProfession(x)))", "all x.((Person(x) & (WorksInEntertainmentIndustry(x) | HighlyAcclaimedInProfession(x))) -> HighlyAcclaimedInProfession(x))", "all x y.((Person(x) & EntertainmentIndustry(y)) -> (WorksIn(x,y) | HighlyAcclaimedInProfession(x,y)))", "all x.((Person(x) & (WorksInEntertainment(x) | HighlyAcclaimedInProfession(x))) -> HighlyAcclaimed(x))", "all x.(Person(x) -> (WorksInEntertainment(x) | HighlyAcclaimed(x)))", "all x.((Person(x) & (WorksInEntertainment(x) | HighlyAcclaimed(x))) -> HighlyAcclaimedInProfession(x))", "all x y.((Person(x) & EntertainmentIndustry(y)) -> (WorksIn(x,y) | HighlyAcclaimed(x,y)))", "all x y.((Person(x) & EntertainmentIndustry(y)) -> (WorksIn(x,y) | HighlyAcclaimedInProfession(x)))", "all x.((Person(x) & (WorksInEntertainment(x) | HighlyAcclaimed(x))) -> HighlyAcclaimed(x))", "exists x.(Person(x) & (WorksInEntertainment(x) | HighlyAcclaimedInProfession(x)))", "all x.(People(x) -> (WorksInEntertainment(x) | HighlyAcclaimedInProfession(x)))", "all x.((Person(x) & (WorksInEntertainment(x) | HighlyAcclaimedInProfession(x))) -> WorkInEntertainment(x))", "all x.((Person(x) & (WorksInEntertainment(x) | HighlyAcclaimedInProfession(x))) -> WorksInEntertainment(x))", "all x.(WorksInEntertainment(x) | HighlyAcclaimedInProfession(x))"]}
{"id": "folio_train_2022", "nl": "If people are highly acclaimed in their profession, then they often hold tenured and high-ranking positions at their workplace.", "fol": "all x.(IsHighlyAcclaimed(x) -> HoldsTenuredPosition(x))", "prediction": ["all x.((Person(x) & HighlyAcclaimedInProfession(x)) -> (HoldsTenured(x) & HighRanking(x)))", "all x.((Person(x) & HighlyAcclaimedInProfession(x)) -> (HoldsTenuredPositions(x) & HighRankingPositions(x)))", "all x.(HighlyAcclaimedInProfession(x) -> (HoldsTenuredAndHighRankingPositions(x)))", "all x.((Person(x) & HighlyAcclaimedInProfession(x)) -> (HoldsTenuredAndHighRankingPositions(x)))", "all x.((Person(x) & HighlyAcclaimedInProfession(x)) -> (HoldsTenuredPositions(x) & HighRankingPositionsAtWorkplace(x)))", "all x.((Person(x) & HighlyAcclaimedInProfession(x)) -> (HoldsTenured(x) & HoldsHighRanking(x)))", "all x.((Person(x) & HighlyAcclaimedInProfession(x)) -> (HoldsTenuredPositions(x) & HoldsHighRankingPositions(x)))", "all x.(HighlyAcclaimedInProfession(x) -> (HoldsTenured(x) & HighRanking(x)))", "all x.((Person(x) & HighlyAcclaimedInProfession(x)) -> HoldsTenuredAndHighRankingPositionsAtWorkplace(x))", "all x.((Person(x) & HighlyAcclaimedInProfession(x)) -> (HoldsTenuredOrHighRankingPositions(x)))", "all x.((People(x) & HighlyAcclaimedInProfession(x)) -> (HoldsTenuredAndHighRankingPositions(x)))", "all x.((People(x) & HighlyAcclaimedInProfession(x)) -> (HoldsTenured(x) & HighRanking(x)))", "all x.((Person(x) & HighlyAcclaimedInProfession(x)) -> (HoldsTenuredAndHighRankingPositionsAtWorkplace(x)))", "all x.(HighlyAcclaimed(x) -> (HoldsTenured(x) & HighRanking(x)))", "all x.(HighlyAcclaimedInProfession(x) -> (HoldsTenuredOrHighRankingPositions(x)))", "all x.((Person(x) & HighlyAcclaimedInProfession(x)) -> HoldsTenuredAndHighRankingPositions(x))"]}
{"id": "folio_train_2023", "nl": "If people are highly acclaimed in their profession, then they often receive glowing feedback and recommendations from their colleagues.", "fol": "all x.(IsHighlyAcclaimed(x) -> ReceivesGlowingFeedback(x))", "prediction": ["all x.((Person(x) & HighlyAcclaimedInProfession(x)) -> (ReceivesGlowingFeedback(x) & ReceivesRecommendations(x)))", "all x.(HighlyAcclaimedInProfession(x) -> (ReceivesGlowingFeedback(x) & ReceivesRecommendations(x)))", "all x.((Person(x) & HighlyAcclaimedInProfession(x)) -> (GlowingFeedback(x) & Recommendations(x)))", "all x.((Person(x) & HighlyAcclaimedInProfession(x)) -> (GlowingFeedback(x) & RecommendationsFromColleagues(x)))", "all x.((People(x) & HighlyAcclaimedInProfession(x)) -> (ReceivesGlowingFeedback(x) & ReceivesRecommendations(x)))", "all x.((Person(x) & HighlyAcclaimedInProfession(x)) -> (ReceivesGlowingFeedback(x) & ReceivesRecommendationsFromColleagues(x)))", "all x.((Person(x) & HighlyAcclaimedInProfession(x)) -> ReceivesGlowingFeedbackAndRecommendations(x))", "all x.((Person(x) & HighlyAcclaimed(x)) -> (ReceivesGlowingFeedback(x) & ReceivesRecommendations(x)))", "all x.((Person(x) & HighlyAcclaimedInProfession(x)) -> (ReceivesGlowingFeedback(x) & ReceivesRecommendationsFromCoworkers(x)))", "all x.((Person(x) & HighlyAcclaimedInProfession(x)) -> (GlowingFeedback(x) & RecommendationsFromCoworkers(x)))", "all x.((People(x) & HighlyAcclaimedInProfession(x)) -> (GlowingFeedback(x) & RecommendationsFromColleagues(x)))", "all x.((People(x) & HighlyAcclaimedInProfession(x)) -> (GlowingFeedback(x) & Recommendations(x)))", "all x.(HighlyAcclaimedInProfession(x) -> (GlowingFeedback(x) & RecommendationsFromColleagues(x)))", "all x.((Person(x) & HighlyAcclaimed(x)) -> (GlowingFeedback(x) & Recommendations(x)))", "all x.(HighlyAcclaimed(x) -> (ReceivesGlowingFeedback(x) & ReceivesRecommendations(x)))", "all x.(HighlyAcclaimedInProfession(x) -> (GlowingFeedback(x) & Recommendations(x)))"]}
{"id": "folio_train_2024", "nl": "If Emily is either both highly acclaimed in her profession and often holds tenured and high-ranking positions at her workplace, or she is neither highly acclaimed in her profession nor often holds tenured and high-ranking positions at her workplace, then Emily is not highly acclaimed in her profession. ", "fol": "(((IsHighlyAcclaimed(Emily) & HoldsTenuredPosition(Emily)) | (-IsHighlyAcclaimed(Emily) & -HoldsTenuredPosition(Emily))) -> -IsHighlyAcclaimed(Emily))", "prediction": ["all x.((Emily(x) & (HighlyAcclaimedInProfession(x) & OftenHoldsTenuredAndHighRankingPositions(x)) | (-HighlyAcclaimedInProfession(x) & OftenHoldsTenuredAndHighRankingPositions(x)))) -> -HighlyAcclaimedInProfession(x))", "all x.((Emily(x) & (HighlyAcclaimedInProfession(x) & OftenHoldsTenuredAndHighRankingPositions(x)) | -(HighlyAcclaimedInProfession(x) & OftenHoldsTenuredAndHighRankingPositions(x)))) -> -HighlyAcclaimedInProfession(x))", "all x.((Emily(x) & (HighlyAcclaimedInProfessional(x) & OftenHoldsTenuredAndHighRankingPositions(x)) | (-HighlyAcclaimedInProfessional(x) & OftenHoldsTenuredAndHighRankingPositions(x)))) -> -HighlyAcclaimedInProfessional(x))", "all x.((Emily(x) & (HighlyAcclaimedInProfessional(x) & OftenHoldsTenuredAndHighRankingPositions(x)) | -(HighlyAcclaimedInProfessional(x) & OftenHoldsTenuredAndHighRankingPositions(x)))) -> -HighlyAcclaimedInProfessional(x))", "all x.((Emily(x) & (HighlyAcceptedInProfession(x) & OftenHoldsTenuredAndHighRankingPositions(x)) | -(HighlyAcceptedInProfession(x) & OftenHoldsTenuredAndHighRankingPositions(x)))) -> -HighlyAcceptedInProfession(x))", "all x.((Emily(x) & (HighlyAcceptedInProfession(x) & OftenHoldsTenuredAndHighRankingPositions(x)) | (-HighlyAcceptedInProfession(x) & OftenHoldsTenuredAndHighRankingPositions(x)))) -> -HighlyAcceptedInProfession(x))", "all x.((Emily(x) & (HighlyAcclaimedInProfession(x) & OftenHoldsTenuredAndHighRankingPositions(x)) | (-HighlyAcclaimedInProfession(x) & OftenHoldsTenuredAndHighRankingPositions(x)))))", "all x.((Emily(x) & (HighlyAcclaimed(x) | (HoldsTenured(x) & HoldsHighRanking(x)))) | (-HighlyAcclaimed(x) & HoldsTenured(x) & HoldsHighRanking(x)))))", "all x.((Emily(x) & (HighlyAcceptedInProfession(x) & OftenHoldsTenuredAndHighRankingPositions(x)) | (-HighlyAcceptedInProfession(x) & OftenHoldsTenuredAndHighRankingPositions(x)))) -> -HighlyAcceptableInProfession(x))", "all x.((Emily(x) & (HighlyAcceptedInProfession(x) & OftenHoldsTenuredAndHighRankingPositions(x)) | -(HighlyAcceptedInProfession(x) & OftenHoldsTenuredAndHighRankingPositions(x)))) -> -HighlyAcceptableInProfession(x))", "all x.((Emily(x) & (HighlyAcclaimed(x) | (HoldsTenuredPositions(x) & HighRankingPositions(x)))) | (-HighlyAcclaimed(x) & HoldsTenuredPositions(x) & HighRankingPositions(x)))))", "all x.((Emily(x) & (HighlyAcclaimedInProfessional(x) & OftenHoldsTenuredAndHighRankingPositions(x)) | (-HighlyAcclaimedInProfessional(x) & OftenHoldsTenuredAndHighRankingPositions(x)))))", "all x.((Emily(x) & (HighlyAcclaimed(x) | (HoldsTenured(x) & HighRanking(x)))) | (-HighlyAcclaimed(x) & HoldsTenured(x) & HighRanking(x)))))", "all x.((Emily(x) & (HighlyAcceptedInProfession(x) & OftenHoldsTenuredAndHighRankingPositions(x)) | (-HighlyAcceptedInProfession(x) & OftenHoldsTenuredAndHighRankingPositions(x)))))", "all x.((Emily(x) & (HighlyAcclaimed(x) | (HoldsTenured(x) | HoldsHighRanking(x)))) | (-HighlyAcclaimed(x) & HoldsTenured(x) & HoldsHighRanking(x)))))", "all x.((Emily(x) & (HighlyAcclaimed(x) | (HoldsTenured(x) & HoldsHighRanking(x)))) | (-HighlyAcclaimed(x) & HoldsTenured(x) & HasHighRanking(x)))))"]}
{"id": "folio_train_2025", "nl": "Emily often holds tenured and high-ranking positions at her workplace.", "fol": "HoldsTenuredPosition(Emily)", "prediction": ["all x y.((Emily(x) & Workplace(y)) -> (HoldsTenured(x,y) & HoldsHighRanking(x,y)))", "all x.((Emily(x) & Tenured(x) & HighRanking(x)) -> HoldsAtWorkplace(x))", "all x y.((Emily(x) & Workplace(y)) -> (HoldsTenured(x,y) & HighRanking(x,y)))", "all x y.((Emily(x) & Workplace(y)) -> (HoldsTenuredPositions(x,y) & HoldsHighRankingPositions(x,y)))", "all x.((Emily(x) & TenuredPositions(x) & HighRankingPositions(x)) -> HoldsAtWorkplace(x))", "all x y.((Emily(x) & Workplace(y)) -> (HoldsTenuredPositions(x,y) & HighRankingPositions(x,y)))", "all x y.((Emily(x) & Workplace(y)) -> (Tenured(x) & HighRanking(x)))", "all x y.((Emily(x) & Workplace(y)) -> (HoldsTenured(x,y) | HoldsHighRanking(x,y)))", "all x.((Emily(x) & TenuredPosition(x) & HighRankingPosition(x)) -> HoldsAtWorkplace(x))", "all x y.((Emily(x) & Workplace(y)) -> (Tenured(x,y) & HighRanking(x,y)))", "all x y.((Emily(x) & Workplace(y)) -> (HoldsTenured(x) & HoldsHighRanking(x)))", "all x.((Emily(x) & Tenured(x) & HighRanking(x)) -> HeldAtWorkplace(x))", "all x y z.((Emily(x) & Workplace(y) & Tenured(z) & HighRanking(z)) -> Holds(x,y,z))", "all x.((Emily(x) & Tenured(x) & HighRanking(x)) -> Holds(x,y))", "all x.((Emily(x) & Tenured(x) & HighRanking(x)) -> Workplace(x))", "all x y.((Emily(x) & Workplace(y)) -> (HoldsTenured(x) & HoldsHighRanking(x,y)))"]}
{"id": "folio_train_2026", "nl": "Emily often receives glowing feedback and recommendations from their colleagues and is an award-winning novelist.", "fol": "(ReceivesGlowingFeedback(Emily) & IsAwardWinningNovelist(Emily))", "prediction": ["all x.((Emily(x) & ReceivesGlowingFeedback(x) & ReceivesRecommendations(x)) -> AwardWinningNovelist(x))", "all x y.((Emily(x) & Colleague(y) & ReceivesGlowingFeedbackAndRecommendations(x,y)) -> AwardWinningNovelist(x))", "all x y.((Emily(x) & Colleague(y) & ReceivesGlowingFeedback(x,y) & ReceivesRecommendations(x,y)) -> AwardWinningNovelist(x))", "all x y.((Emily(x) & Colleague(y)) -> (GlowingFeedback(x,y) & Recommendations(x,y) & AwardWinningNovelist(x)))", "all x y.((Emily(x) & Coworker(y) & ReceivesGlowingFeedbackAndRecommendations(x,y)) -> AwardWinningNovelist(x))", "all x y.((Emily(x) & Colleague(y)) -> (GlowingFeedback(x) & Recommendations(x) & AwardWinningNovelist(x)))", "all x y.((Emily(x) & Coworker(y)) -> (GlowingFeedback(x,y) & Recommendations(x,y) & AwardWinningNovelist(x)))", "all x.((Emily(x) & ReceivesGlowingFeedbackAndRecommendations(x)) -> AwardWinningNovelist(x))", "all x y.((Emily(x) & Coworker(y)) -> (GlowingFeedback(x) & Recommendations(x) & AwardWinningNovelist(x)))", "all x y.((Emily(x) & Colleague(y)) -> (GlowingFeedbackAndRecommendations(x,y) & AwardWinningNovelist(x)))", "all x.((Emily(x) & ReceivesGlowingFeedback(x) & ReceivesRecommendations(x) & AwardWinningNovelist(x)) -> Novelist(x))", "all x y z.((Emily(x) & Colleague(y) & Colleague(z)) -> (GlowingFeedback(x,y) & Recommendations(x,z) & AwardWinningNovelist(x)))", "all x.(Emily(x) -> (GlowingFeedback(x) & Recommendations(x) & AwardWinningNovelist(x)))", "all x y.((Emily(x) & Coworker(y)) -> (GlowingFeedback(x) & Recommendations(x,y) & AwardWinningNovelist(x)))", "all x.((Emily(x) & ReceivesGlowingFeedback(x) & ReceivesRecommendationsFromColleagues(x)) -> AwardWinningNovelist(x))", "all x.((Emily(x) & ReceivesGlowingFeedback(x) & ReceivesRecommendations(x) & AwardWinningNovelist(x)) -> AwardWinningNovelist(x))"]}
{"id": "folio_train_2027", "nl": "If Emily either often receives glowing feedback and recommendations from her colleagues or is an award-winning novelist, then Emily does not both publish journals and is an award-winning novelist.", "fol": "((ReceivesGlowingFeedback(Emily) | IsAwardWinningNovelist(Emily)) -> -(PublishesJournals(Emily) & IsAwardWinningNovelist(Emily)))", "prediction": ["all x.((Emily(x) & (GlowingFeedback(x) | AwardWinningNovelist(x))) -> -(PublishesJournals(x) & AwardWinningNovelist(x))))", "all x.((Emily(x) & (GlowingFeedback(x) | AwardWinningNovelist(x))) -> -PublishesJournals(x) & AwardWinningNovelist(x)))", "all x.((Emily(x) & (GlowingFeedback(x) | AwardWinningNovelist(x))) -> (-PublishesJournals(x) & AwardWinningNovelist(x)))", "all x.((Emily(x) & (GlowingFeedbackAndRecommendations(x) | AwardWinningNovelist(x))) -> -(PublishesJournals(x) & AwardWinningNovelist(x))))", "all x.((Emily(x) & (GlowingFeedback(x) & Recommendations(x) | AwardWinningNovelist(x))) -> -(PublishesJournals(x) & AwardWinningNovelist(x))))", "all x.((Emily(x) & (GlowingFeedback(x) | AwardWinningNovelist(x))) -> -PublishesJournals(x) & AwardWinningNovelist(x))", "all x.((Emily(x) & ((GlowingFeedback(x) & Recommendations(x)) | AwardWinningNovelist(x))) -> -(PublishesJournals(x) & AwardWinningNovelist(x))))", "all x.((Emily(x) & (GlowingFeedback(x) & Recommendations(x) | AwardWinningNovelist(x))) -> -(PublishesJournals(x) & AwardWinningNovelist(x)))", "all x.((Emily(x) & (GlowingFeedback(x) | AwardWinningNovelist(x))) -> -(PublishesJournals(x) & AwardWinningNovelist(x)))", "all x.((Emily(x) & (GlowingFeedback(x) & Recommendations(x) | AwardWinningNovelist(x))) -> -PublishesJournals(x) & AwardWinningNovelist(x))", "all x.((Emily(x) & (GlowingFeedback(x) & OftenReceivesRecommendations(x) | AwardWinningNovelist(x))) -> -(PublishesJournals(x) & AwardWinningNovelist(x))))", "all x.((Emily(x) & (OftenReceivesGlowingFeedback(x) & ReceivesRecommendations(x) | AwardWinningNovelist(x))) -> -(PublishesJournals(x) & AwardWinningNovelist(x))))", "all x.((Emily(x) & (LivingFeedback(x) | AwardWinningNovelist(x))) -> -(PublishesJournals(x) & AwardWinningNovelist(x))))", "all x.((Emily(x) & (OftenGlowingFeedback(x) | AwardWinningNovelist(x))) -> -(PublishesJournals(x) & AwardWinningNovelist(x))))", "all x.((Emily(x) & (GlowingFeedbackAndRecommendations(x) | AwardWinningNovelist(x))) -> -PublishesJournals(x) & AwardWinningNovelist(x))", "all x.((Emily(x) & (GlowingFeedback(x) | AwardWinningNovelist(x))) -> -(PublishesJournals(x) & AwardsWinningNovelist(x))))"]}
{"id": "folio_train_2028", "nl": "Thick as Thieves is a young adult fantasy novel, written by Megan Whalen Turner.", "fol": "(IsYoungAdultFantasyNovel(Thickastheives) & AuthoredBy(Thickastheives,Megan))", "prediction": ["ThickAsThieves(x) -> (YoungAdultFantasyNovel(x) & WrittenByMeganWhalenTurner(x)))", "ThickAsThieves(x) -> (YAFantasyNovel(x) & WrittenByMeganWhalenTurner(x)))", "ThickAsThieves(x) -> (YoungAdultFantasyNovel(x) & WrittenByMeganWhalenTurner(x)))", "ThickAsThieves(x) -> (YAFantasyNovel(x) & WrittenByMeganWhalenTurner(x)))", "all x.(ThickAsThieves(x) -> (YoungAdultFantasyNovel(x) & WrittenByMeganWhalenTurner(x)))", "all x.(ThickAsThieves(x) -> (YoungAdultFantasyNovel(x) & WrittenByMeganWhalenTurner(x)))", "ThickAsThieves(x) -> (YoungAdultFantasyNovel(x) & WrittenByMeganWhalenTurner(x)))", "all x.(ThickAsThieves(x) -> (YAFantasyNovel(x) & WrittenByMeganWhalenTurner(x)))", "ThickAsThieves is a YoungAdultFantasyNovel(x) & WrittenByMeganWhalenTurner(x))", "ThickAsThieves(x) -> (YAFantasyNovel(x) & WrittenByMeganWhalenTurner(x)))", "ThickAsThieves is a youngadultFantasyNovel(x) & WrittenByMeganWhalenTurner(x))", "all x.(ThickAsThieves(x) -> (YAFantasyNovel(x) & WrittenByMeganWhalenTurner(x)))", "(YANovel(ThickAsThieves) & WrittenByMeganWhalenTurner(ThickAsThieves))", "ThickAsThies(x) -> (YAFantasyNovel(x) & WrittenByMeganWhalenTurner(x)))", "ThickAsThieves is a YoungAdultFantasyNovel(x) & WrittenByMeganWhalenTurner(x))", "(YANovel(ThickAsThieves) & WrittenByMeganWhalenTurner(ThickAsThieves))"]}
{"id": "folio_train_2029", "nl": "Thick as Thieves was published by Greenwillow Books.", "fol": "PublishedByCompany(Thickastheives,Greenwillowbooks)", "prediction": ["ThickAsThieves(x) & PublishedByGreenwillowBooks(x))", "ThickAsThieves(x) -> PublishedByGreenwillowBooks(x))", "ThickAsTieves(x) & PublishedByGreenwillowBooks(x))", "ThickAsTieves(x) -> PublishedByGreenwillowBooks(x))", "ThickAsThies(x) -> PublishedByGreenwillowBooks(x))", "ThickAsTwelves(x) -> PublishedByGreenwillowBooks(x))", "ThickAsThieves was published by GreenwillowBooks.", "ThickAsThies(x) & PublishedByGreenwillowBooks(x))", "ThickAsThieves(x) -> PublishedByGreenwillowBooks(x))", "ThickAsThieves(x) & GreenwillowBooks(x))", "ThickAsTwelves(x) & PublishedByGreenwillowBooks(x))", "ThickAsThievesPublishedByGreenwillowBooks.", "ThickAsTieves was published by GreenwillowBooks.", "ThickAsTievesPublishedByGreenwillowBooks.", "ThickAsThies(x) & GreenwillowBooks(x))", "ThickAsThievesPublishedByGreenwillowBooks(x)"]}
{"id": "folio_train_2030", "nl": "If a book was published by a company, than the author of that book worked with the company that published the book.", "fol": "all z.((AuthoredBy(x,y) & PublishedByCompany(x,z)) -> CollaboratedWith(y,z))", "prediction": ["all x y.((Book(x) & Company(y) & PublishedBy(x,y)) -> AuthorWorkedWith(x,y))", "all x y.((Book(x) & Company(y) & PublishedBy(x,y)) -> WorkedWith(x,y))", "all x y z.((Book(x) & Company(y) & PublishedBy(x,y)) -> AuthorWorkedWith(x,z))", "all x y.((Book(x) & Company(y) & PublishedBy(x,y)) -> WorksWith(x,y))", "all x y.((Book(x) & Company(y) & PublishedBy(x,y)) -> AuthorWorksWith(x,y))", "all x y z.((Book(x) & Company(y) & Company(z) & PublishedBy(x,y,z)) -> AuthorWorkedWith(x,y,z))", "all x y z.((Book(x) & Company(y) & Company(z) & PublishedBy(x,y)) -> AuthorWorkedWith(x,z))", "all x y z.((Book(x) & Company(y) & PublishedBy(x,y)) -> WorkedWith(x,z))", "all x y z.((Book(x) & Company(y) & PublishedBy(x,y) & Company(z)) -> AuthorWorkedWith(x,z))", "all x y z.((Book(x) & Company(y) & Company(z) & PublishedBy(x,y,z)) -> WorkedWith(x,y,z))", "all x y.((Book(x) & CompanyPublishedBy(x,y)) -> AuthorWorkedWith(x,y))", "all x y z.((Book(x) & Company(y) & PublishedBy(x,y) & Company(z)) -> WorkedWith(x,z))", "all x y z.((Book(x) & Company(y) & Company(z) & PublishedBy(x,y)) -> WorkedWith(x,z))", "all x y z.((Book(x) & Company(y) & PublishedBy(x,y) & Author(z)) -> WorkedWith(z,y))", "all x y.((Book(x) & PublishedBy(x,y)) -> AuthorWorkedWith(x,y))", "all x y z.((Book(x) & Company(y) & PublishedBy(x,y)) -> AuthorWorksWith(x,z))"]}
{"id": "folio_train_2031", "nl": "The fictional Mede Empire is where Thick as Thieves is set.", "fol": "(IsFictional(Medeempire) & IsSetIn(Thickastheives,Medeempire))", "prediction": ["all x.((FictionalMedeEmpire(x) & ThickAsThieves(x)) -> SetIn(x))", "all x y.((FictionalMedeEmpire(x) & ThickAsThieves(y)) -> SetIn(x,y))", "All x y.((FictionalMedeEmpire(x) & ThickAsThieves(y)) -> SetIn(x,y))", "all x.((FictionalMedeEmpire(x) & ThickAsTieves(x)) -> SetIn(x))", "all x y.((FictionalMedeEmpire(x) & ThickAsTieves(y)) -> SetIn(x,y))", "All x.((FictionalMedeEmpire(x) & ThickAsThieves(x)) -> SetIn(x))", "all x.((FictionalMedeEmpire(x) & ThickAsThieves(x)) -> Set(x))", "all x y.((FictionalMedeEmpire(x) & ThickAsThies(y)) -> SetIn(x,y))", "all x.((FictionalMedeEmpire(x) & ThickAsThies(x)) -> SetIn(x))", "all x.((FictionalMedeEmpire(x) & ThickAsThieves(x)) -> SetIn(x,ThickAsThieves))", "(FictionalMedeEmpire(MedeEmpire) & ThickAsThieves(MedeEmpire))", "all x y.((FictionalMedeEmpire(x) & ThickAsThieves(y)) -> Set(x,y))", "(FictionalMedeEmpire(MedeEmpire) & ThickAsThieves(MedeEmpire))", "all x.((FictionalMedeEmpire(x) & ThickAsTwelves(x)) -> SetIn(x))", "exists x.(FictionalMedeEmpire(x) & ThickAsThieves(x))", "(FictionalMedeEmpire(MedeEmpire) & ThickAsThieves(MedeEmpire))"]}
{"id": "folio_train_2032", "nl": "The Mede Empire plots to swallow up some nearby countries.", "fol": "exists x.(IsCountry(x) & IsNearby(Medeempire,x) & PlansToConquer(Medeempire,x))", "prediction": ["all x y.((MedeEmpire(x) & Country(y)) -> PlotsToSnake(x,y))", "all x y.((MedeEmpire(x) & Country(y)) -> PlotsToSnap(x,y))", "all x y z.((MedeEmpire(x) & Country(y) & Country(z)) -> PlotsToSnake(x,y,z))", "all x y z.((MedeEmpire(x) & Country(y) & Country(z)) -> PlotsToSnap(x,y,z))", "all x y.((MedeEmpire(x) & Country(y)) -> PlannedToSnake(x,y))", "all x y.((MedeEmpire(x) & NearbyCountry(y)) -> PlotsToSnap(x,y))", "all x y.((MedeEmpire(x) & Country(y)) -> PlotsToSnakeUp(x,y))", "all x y.((MedeEmpire(x) & NearbyCountry(y)) -> PlotsToSnake(x,y))", "all x y.((MedeEmpire(x) & Country(y)) -> PlannedToSnap(x,y))", "all x y.((MedeEmpire(x) & Country(y)) -> PlansToSnap(x,y))", "all x y z.((MedeEmpire(x) & Country(y) & Country(z)) -> PlannedToSnap(x,y,z))", "all x y z.((MedeEmpire(x) & Country(y) & Country(z)) -> PlannedToSnake(x,y,z))", "all x y.((MedeEmpire(x) & Country(y)) -> PlansToSnake(x,y))", "all x y z.((MedeEmpire(x) & Country(y) & Country(z)) -> PlotsToSnakeUp(x,y,z))", "all x y z.((MedeEmpire(x) & Country(y) & Country(z)) -> PlansToSnap(x,y,z))", "all x y z.((MedeEmpire(x) & Country(y) & Country(z)) -> (PlotsToSnake(x,y,z)))"]}
{"id": "folio_train_2033", "nl": "Attolia and Sounis are countries near the Mede Empire.", "fol": "(IsCountry(Attolia) & IsNearby(Medeempire,Attolia) & IsCountry(Sounis) & IsNearby(Medeempire,Sounis))", "prediction": ["all x.((Country(x) & Attolia(x) & Country(x) & Sounis(x)) -> NearMedeEmpire(x))", "(NearMedeEmpire(Attolia) & NearSounis(Sounis))", "all x.((Country(x) & NearMedeEmpire(x)) -> (Attolia(x) | Sounis(x)))", "(NearMedeEmpire(Attolia) & NearMedeEmpire(Sounis))", "(Country(Attolia) & Country(Sounis) & NearMedeEmpire(Attolia) & NearMedeEmpire(Sounis))", "All x.((Country(x) & Attolia(x) & Country(x) & Sounis(x)) -> NearMedeEmpire(x))", "all x.((Country(x) & Attolia(x) & Country(x,Sounis)) -> NearMedeEmpire(x))", "all x.((Attolia(x) | Sounis(x)) -> NearMedeEmpire(x))", "(NearMedeEmpire(Attolia,MedeEmpire) & NearSounis(Attolia,MedeEmpire))", "All x.((Country(x) & Attolia(x) & Sounis(x)) -> NearMedeEmpire(x))", "((Country(Attolia) | Country(Sounis)) & NearMedeEmpire(Attolia)) & Near(Sounis))", "((Country(Attolia) | Country(Sounis)) & NearMedeEmpire(Attolia)) & NearMedeEmpire(Sounis))", "all x.((Country(x) & Attolia(x) & Country(x) & Sounis(x)) -> NearMedeEmpire(x))", "(NearMedeEmpire(Attolia) | NearMedeEmpire(Sounis))", "all x.((Country(x) & NearMedeEmpire(x)) -> (Attolia(x) & Sounis(x)))", "(Country(Attolia) & Country(Sounis) & NearMedeEmpire(Attolia))"]}
{"id": "folio_train_2034", "nl": "Thick as Thieves was sold both as a hardcover and an e-book.", "fol": "(AvailableAs(Thickastheives,Hardcover) & AvailableAs(Thickastheives,Softcover))", "prediction": ["all x.(ThickAsThieves(x) -> (SoldAsHardcover(x) & SoldAsEbook(x)))", "all x.(ThickAsThieves(x) -> (SoldAsHardcover(x) & SoldAsEBook(x)))", "all x.(ThickAsThies(x) -> (SoldAsHardcover(x) & SoldAsEBook(x)))", "all x.(ThickAsTieves(x) -> (SoldAsHardcover(x) & SoldAsEBook(x)))", "all x.(ThickAsTieves(x) -> (SoldAsHardcover(x) & SoldAsEbook(x)))", "all x.(ThickAsThies(x) -> (SoldAsHardcover(x) & SoldAsEbook(x)))", "all x.(ThickAsTwelves(x) -> (SoldAsHardcover(x) & SoldAsEBook(x)))", "all x.(ThickAsTwelves(x) -> (SoldAsHardcover(x) & SoldAsEbook(x)))", "all x.(ThickAsThieves(x) -> (SoldAsHardcover(x) & SoldAsEBook(x)))", "all x.(ThickAsThieves(x) -> (SoldAsHardcover(x) & SoldAsEbook(x)))", "all x.(ThickAsThyeves(x) -> (SoldAsHardcover(x) & SoldAsEBook(x)))", "(SoldAsHardcover(ThickAsThieves) & SoldAsEbook(ThickAsThieves))", "all x.(ThickAsThyeves(x) -> (SoldAsHardcover(x) & SoldAsEbook(x)))", "(SoldAsHardcover(ThickAsThieves) & SoldAsEBook(ThickAsThieves))", "all x.(ThickAsThieves(x) -> (SoldAsHardcover(x) & SoldAsEbook(x)))", "all x.(ThickAsThies(x) -> (SoldAsHardcover(x) & SoldAsEBook(x)))"]}
{"id": "folio_train_2035", "nl": "Megan Whalen Turner worked with Greenwillow Books.", "fol": "CollaboratedWith(Megan,Greenwillowbooks)", "prediction": ["Megan Whalen Turner worked with GreenwillowBooks.", "all x y.((MeganWhalenTurner(x) & GreenwillowBooks(y)) -> WorkedWith(x,y))", "Megan WhalenTurner worked with GreenwillowBooks.", "all x y.((MeganWhalenTurner(x) & GreenwillowBooks(y)) -> WorksWith(x,y))", "(WorkedWithGreenwillowBooks(MeganWhalenTurner))", "all x y.((MeganWhalenTurner(x) & GreenwillowBooks(y)) -> WorkedFor(x,y))", "all x y.((MeganWhalenTurner(x) & GreenwillowBook(y)) -> WorkedWith(x,y))", "Megan Whalen Turner (WorkedWithGreenwillowBooks)", "all x y.((MeganWhalenTurner(x) & GreenwillowBooks(y)) -> Worked(x,y))", "(WorkedWithGreenwillowBooks(MeganWhalenTurner)", "all x y.((MeganWhalenTurner(x) & GreenwillowBooks(y)) -> WorksFor(x,y))", "(WorkedWithGreenwillowBooks(MeganWhalenTurner,GreenwillowBooks))", "(WorkedWithGreenwillowBooks(MeganWhalenTurner))", "all x y.((MeganWhalenTurner(x) & GreenwillowBooks(y)) -> WorkingWith(x,y))", "all x y.((MeganWhalenTurner(x) & GreenWillowBooks(y)) -> WorkedWith(x,y))", "all x y.((MeganWhalenTurner(x) & GreenwillowBook(y)) -> WorksWith(x,y))"]}
{"id": "folio_train_2036", "nl": "The Mede Empire plans to swallow up Attolia.", "fol": "PlansToSwallowUp(Medeempire,Attolia)", "prediction": ["all x y.((MedeEmpire(x) & Attolia(y)) -> PlansToSnap(x,y))", "All x y.((MedeEmpire(x) & Attolia(y)) -> PlansToSnap(x,y))", "All x.(MedeEmpire(x) -> PlansToSnakeAttolia(x))", "all x y.((MedeEmpire(x) & Attolia(y)) -> PlansToSnake(x,y))", "All x y.((MedeEmpire(x) & Attolia(y)) -> PlansToSnake(x,y))", "All x.(MedeEmpire(x) -> PlansToSnapAttolia(x))", "all x.(MedeEmpire(x) -> PlansToSnakeAttolia(x))", "All x.(MedeEmpire(x) -> PlansToSnapUpAttolia(x))", "all x y.((MedeEmpire(x) & Attolia(y)) -> PlansToSnakeUp(x,y))", "all x.(MedeEmpire(x) -> PlansToSnapAttolia(x))", "All x y.((MedeEmpire(x) & Attolia(y)) -> PlansToSnakeUp(x,y))", "all x.(MedeEmpire(x) -> PlansToSnapUpAttolia(x))", "all x y.((MedeEmpire(x) & Attolia(y)) -> PlannedToSnake(x,y))", "All x y.((MedeEmpire(x) & Attolia(y)) -> PlannedToSnake(x,y))", "all x y.((MedeEmpire(x) & Attolia(y)) -> PlannedToSnap(x,y))", "All x y.((MedeEmpire(x) & Attolia(y)) -> PlannedToSnap(x,y))"]}
{"id": "folio_train_2037", "nl": "Thick as Thieves is not set in the mede empire.", "fol": "-IsSetIn(Thickastheives,Medeempire)", "prediction": ["all x.(ThickAsThieves(x) -> -SetInMedeEmpire(x))", "all x.(ThickAsTieves(x) -> -SetInMedeEmpire(x))", "all x.(ThickAsThies(x) -> -SetInMedeEmpire(x))", "all x.(ThickAsTwelves(x) -> -SetInMedeEmpire(x))", "All x.(ThickAsThieves(x) -> -SetInMedeEmpire(x))", "all x.(ThickAsThieves(x) -> -SetInDeepEmpire(x))", "all x.(ThickAsThieves(x) -> -SetInMedeImpire(x))", "All x.(ThickAsTieves(x) -> -SetInMedeEmpire(x))", "all x.(ThickAsTieves(x) -> -SetInDeepEmpire(x))", "all x.(ThickAsThires(x) -> -SetInMedeEmpire(x))", "all x.(ThickAsTieves(x) -> -SetInMedeImpire(x))", "all x.(ThickAsThieves(x) -> -MedeEmpire(x))", "All x.(ThickAsThies(x) -> -SetInMedeEmpire(x))", "all x.(ThickAsTieves(x) -> -MedeEmpire(x))", "all x.(ThickAsThies(x) -> -SetInDeepEmpire(x))", "ThickAsThieves -SetInMedeEmpire(ThickAsThieves)"]}
{"id": "folio_train_2038", "nl": "Megan Whalen Turner did not work with Greenwillow Books.", "fol": "-CollaboratedWith(Megan,Greenwillowbooks)", "prediction": ["(-WorksWithGreenwillowBooks(MeganWhalenTurner))", "(-WorkedWithGreenwillowBooks(MeganWhalenTurner))", "All x.(MeganWhalenTurner(x) -> -WorksWithGreenwillowBooks(x))", "All x.(MeganWhalenTurner(x) -> -WorkedWithGreenwillowBooks(x))", "all x.(MeganWhalenTurner(x) -> -WorksWithGreenwillowBooks(x))", "all x.(MeganWhalenTurner(x) -> -WorkedWithGreenwillowBooks(x))", "(-WorksWithGreenwillowBooks(MeganWhalenTurner,GreenwillowBooks))", "(-WorksWithGreenwillowBooks(MeganWhalenTurner))", "(-WorkedWithGreenwillowBooks(MeganWhalenTurner,GreenwillowBooks))", "(-WorkedWithGreenwillowBooks(MeganWhalenTurner))", "Megan Whalen Turner -WorkedWithGreenwillowBooks.", "Megan Whalen Turner did not work with GreenwillowBooks.", "-WorkedWithGreenwillowBooks(MeganWhalenTurner)", "Megan Whalen Turner -WorkedWithGreenwillowBooks(x))", "(-WorksWithGreenwillowBooks(MeganWhalenTurner,GreenwillowBooks))", "(WorksWithGreenwillowBooks(MeganWhalenTurner))"]}
{"id": "folio_train_2039", "nl": "WeTab is a MeeGo-based tablet computer.", "fol": "all x.((IsWeTabProduct(x) -> IsMeeGoBased(x)) & IsTabletComputer(x))", "prediction": ["all x.(WeTab(x) -> (MeeGoBasedComputer(x) & TabletComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputer", "All x.(WeTab(x) -> (MeeGoBasedComputer(x) & TabletComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputer", "all x.(WeTab(x) -> (MeteGoBasedComputer(x) & TabletComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputer", "all x.(WeTab(x) -> (MeeGoBasedComputer(x) & TabletComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerCompute", "all x.(WeTab(x) -> (MeeGoBasedTabletComputer(x) & TabletComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputer", "all x.(WeTab(x) -> (MeeGoBasedComputer(x) & TabletComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputing", "all x.(WeTab(x) -> (MeeGoBasedComputer(x) & TabletComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputeComputerComputerComputerComputerComputerComputerComputerComputer", "All x.(WeTab(x) -> (MeeGoBasedComputer(x) & TabletComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerCompute", "all x.(WeTab(x) -> (MeeGoBasedComputer(x) & TabletComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputable", "All x.(WeTab(x) -> (MeeGoBasedComputer(x) & TabletComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputeComputerComputerComputerComputerComputerComputerComputerComputer", "all x.(WeTab(x) -> (MeeGoBasedComputer(x) & TabletComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputeComputerComputerComputerComputerComputerComputer", "all x.(WeTab(x) -> (MeeGoBasedComputer(x) & TabletComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputeComputerComputerComputerComputerComputerComputerComputer", "all x.(WeTab(x) -> (MeteGoBasedComputer(x) & TabletComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerCompute", "All x.(WeTab(x) -> (MeeGoBasedComputer(x) & TabletComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputing", "all x.(WeTab(x) -> (MeeGoBasedComputer(x) & TabletComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputerComputeComputerComputerComputerComputer", "All x.(WeTab(x) -> MeeGoBasedTabletComputer(x))"]}
{"id": "folio_train_2040", "nl": "There is a WeTab product.", "fol": "exists x.IsWeTabProduct(x)", "prediction": ["exists x.(WeTabProduct(x))", "exists x.(WeTab(x) & Product(x))", "exists x.(WeTabProduct(x) & UsedBy(x))", "exists x.(WeTabProduct(x) & -WeTabProduct(x))", "exists x.(WeTab(x) -> Product(x))", "exists x.(WeTabProduct(x) & Product(x))", "exists x.(WeTabProduct(x) & Contains(x,y))", "exists x.(WeTabProduct(x) & Has(x,y))", "exists x.(WeTabProduct(x) & Uses(x))", "exists x.(WeTabProduct(x) & Products(x))", "exists x.(WeTabProduct(x) & UsedFor(x))", "exists x.(WeTabProduct(x) & WorksWith(x))", "exists x.(WeTabProduct(x) & Contains(x))", "exists x.(WeTabProduct(x) & DesignedBy(x))", "exists x.(WeTabProduct(x) & -WeTab(x))", "exists x.(WeTabProduct(x) & DesignedFor(x,y))"]}
{"id": "folio_train_2041", "nl": "WeTab was announced by Neofonie.", "fol": "all x.(IsWeTabProduct(x) -> WasAnnouncedBy(Neofonie,x))", "prediction": ["WeTab was announced by Neofonie.", "All x y.((WeTab(x) & Neofonie(y)) -> AnnouncedBy(x,y))", "All x.(WeTab(x) -> AnnouncedByNeofonie(x))", "All x.(WeTab(x) -> AnnouncedByNeofonie(x))", "All x y.((WeTab(x) & Neofonie(y)) -> Announced(x,y))", "WeTab(x) -> AnnouncedByNeofonie(x))", "WeTab(x) -> AnnouncedByNeofonie(x))", "All x y.((WeTab(x) & Neofonie(y)) -> AnnouncedBy(y,x))", "WeTab(x) -> AnnouncedByNeofonie(x))", "WeTab(x) -> AnnouncedByNeofonie(x))", "All x.(WeTab(x) -> AnnouncedBy(x,Neofonie))", "All x.(WeTab(x) -> AnnouncedByNeofonie(x))", "All x.(WeTab(x) -> AnnouncedByNeofonie(x))", "Neofonie AnnouncedWeTab(x)", "All x.(WeTab(x) -> AnnouncedBy(x,Neofonie))", "(Neofonie(WeTab) & AnnouncedBy(WeTab))"]}
{"id": "folio_train_2042", "nl": "Neofonie is a German producer.", "fol": "(IsGerman(Neofonie) & IsProducer(Neofonie))", "prediction": ["Neofonie is a GermanProducer.", "Neofonie is GermanProducer.", "Neofonie (GermanProducer)", "all x.(Neofonie(x) -> GermanProducer(x))", "Neofonie ist ein GermanProducer.", "Neofonie is GermanProducer(x)", "(GermanProducer(Neofonie) & -GermanProducer(Neofonie))", "(GermanProducer(Neofonie) -> GermanProducer(Neofonie))", "(GermanProducer(Neofonie) & GermanProducer(Neofonie))", "(GermanProducer(Neofonie)", "(GermanProducer(Neofonie) & LocatedInGermany(Neofonie))", "(GermanProducer(Neofonie) & FoundedIn(Neofonie,Germany))", "(GermanProducer(Neofonie) & FoundedIn(Neofonie,German))", "(GermanProducer(Neofonie) & LocatedIn(Neofonie,Germany))", "(GermanProducer(Neofonie) & FoundedIn(Neofonie))", "Neofonie is a GermanProducer(x)"]}
{"id": "folio_train_2043", "nl": "Germans speak English or German.", "fol": "all x.(IsGerman(x) -> (CanSpeakEnglish(x) | CanSpeakGerman(x)))", "prediction": ["all x.(German(x) -> (SpeakEnglish(x) | SpeakDeutsch(x)))", "all x.(German(x) -> (SpeaksEnglish(x) | SpeaksDeutsch(x)))", "all x.(German(x) -> (SpeakEnglish(x) | SpeakGerman(x)))", "all x.(Deutsch(x) -> (SpeakEnglish(x) | SpeakDeutsch(x)))", "all x.(German(x) -> (Speak(x,English) | Speak(x,Deutsch)))", "all x.(Deutsch(x) -> (SpeaksEnglish(x) | SpeaksDeutsch(x)))", "all x.(German(x) -> (SpeaksEnglisch(x) | SpeaksDeutsch(x)))", "all x.(German(x) -> (SpeakEnglish(x) | SpeakDeutsch(x)))", "all x.(Deutscher(x) -> (SpeakEnglish(x) | SpeakDeutsch(x)))", "all x.(German(x) -> (SpeakEnglisch(x) | SpeakDeutsch(x)))", "all x.(German(x) -> (SpeaksEngland(x) | SpeaksDeutsch(x)))", "all x.(Deutsch(x) -> (SpeakEnglish(x) | SpeakGerman(x)))", "all x.(German(x) -> (SpeaksEnglish(x) | SpeaksGerman(x)))", "all x y.((German(x) & (English(y) | German(y))) -> Speaks(x,y))", "all x.(German(x) -> (SpeakEnglish(x) | SpeakGerman(x)))", "all x y.((German(x) & (English(y) | German(y))) -> Speak(x,y))"]}
{"id": "folio_train_2044", "nl": "There is a tablet computer that was announced by a German.", "fol": "exists x.(IsTabletComputer(x) & exists y.(IsGerman(y) & WasAnnouncedBy(y,x)))", "prediction": ["exists x.(TabletComputer(x) & AnnouncedByGerman(x))", "exists x.(TabletComputer(x) & AnnouncedBy(x,German))", "exists x y.((TabletComputer(x) & German(y)) -> AnnouncedBy(x,y))", "exists x y.((TabletComputer(x) & German(y) & AnnouncedBy(x,y)))", "exists x y.(TabletComputer(x) & German(y) & AnnouncedBy(x,y))", "exists x y z.((TabletComputer(x) & German(y) & AnnouncedBy(x,y)) -> TabletComputer(x))", "exists x.(TabletComputer(x) & AnnouncedBy(x,Deutsch))", "exists x y z.((TabletComputer(x) & German(y) & AnnouncedBy(x,z)) -> TabletComputer(x))", "exists x y.((TabletComputer(x) & German(y) & AnnouncedBy(x,y))", "exists x y z.(TabletComputer(x) & German(y) & AnnouncedBy(x,y))", "exists x y.((TabletComputer(x) & German(y)) -> Announced(x,y))", "all x y.((TabletComputer(x) & German(y)) -> AnnouncedBy(x,y))", "exists x y.((TabletComputer(x) & German(y) & AnnouncedBy(x,y)) -> TabletComputer(x))", "exists x y z.((TabletComputer(x) & German(y) & AnnouncedBy(x,y)) -> TabletComputer(z))", "exists x y.(Computer(x) & Tablet(y) & AnnouncedBy(x,y) & German(y))", "exists x y z.((TabletComputer(x) & German(y) & AnnouncedBy(x,y)) -> TabletComputer(y))"]}
{"id": "folio_train_2045", "nl": "Neofonie doesn't speak English or German.", "fol": "(-CanSpeakEnglish(Neofonie) & -CanSpeakGerman(Neofonie))", "prediction": ["(-SpeaksEnglish(Neofonie) & -SpeaksDeutsch(Neofonie))", "(-SpeaksEnglish(Neofonie) & -SpeaksGerman(Neofonie))", "(-SpeaksEnglish(Neofonie) & -SpeaksDeutsch(Neofonie))", "(-SpeaksEnglish(Neofonie) & -SpeaksGerman(Neofonie))", "(-SpeakEnglish(Neofonie) & -SpeakGerman(Neofonie))", "(-SpeaksEnglish(Neofonie) | SpeaksDeutsch(Neofonie)))", "-(Neofonie(n) & (SpeaksEnglish(n) | SpeaksGerman(n))))", "(-SpeakEnglish(Neofonie) & -SpeakGerman(Neofonie))", "(-SpeaksEnglish(neofonie) & -SpeaksDeutsch(neofonie))", "(-SpeaksEnglish(Neofonie) & -SpeaksGerman(Neofonie))", "(-SpeaksEnglish(Neofonie) | SpeaksDeutsch(Neofonie)))", "-(Neofonie(n) & (SpeaksEnglish(n) | SpeaksDeutsch(n))))", "(-SpeaksEnglish(Neofonie) & -SpeaksDeutsch(Neofonie))", "(-SpeaksEnglish(Neofonie) | SpeaksGerman(Neofonie)))", "(-SpeaksEnglish(neofonie) & -SpeaksDeutsch(neofonie))", "(-SpeaksEnglish(Neofonie) | SpeaksGerman(Neofonie)))"]}
{"id": "folio_train_2046", "nl": "Some employees working in business analysis are good at math. ", "fol": "exists x.(WorksInBusinessAnalysis(x) & IsGoodAtMath(x))", "prediction": ["exists x.(Employee(x) & WorksInBusinessAnalysis(x) & GoodAtMath(x))", "exists x.(Employee(x) & WorkingInBusinessAnalysis(x) & GoodAtMath(x))", "exists x.(Employee(x) & WorkedInBusinessAnalysis(x) & GoodAtMath(x))", "exists x.(Employee(x) & WorkInBusinessAnalysis(x) & GoodAtMath(x))", "exists x.(Employee(x) & WorksInBusinessAnalysis(x) & GoodAtMathematics(x))", "exists x.(Employee(x) & BusinessAnalysis(x) & GoodAtMath(x))", "exists x.(Employee(x) & WorkingInBusinessAnalysis(x) & GoodAtMathematics(x))", "exists x.(Employee(x) & WorksInBusinessAnalysis(x) & GoodAtMath(x))", "exists x.(Employee(x) & WorkingInBusinessAnalysis(x)) -> GoodAtMath(x))", "exists x.(Employee(x) & WorkingInBusinessAnalysis(x) & GoodAtMath(x))", "exists x.(Employee(x) & WorksInBusinessAnalysis(x))", "exists x.(Employee(x) & WorksInBusinessAnalysis(x)) -> GoodAtMath(x))", "exists x.(Employee(x) & WorkedInBusinessAnalysis(x) & GoodAtMathematics(x))", "exists x.(Employee(x) & WorkedInBusinessAnalysis(x)) -> GoodAtMath(x))", "exists x.(Employee(x) & WorkinBusinessAnalysis(x) & GoodAtMath(x))", "exists x.(Employee(x) & WorkingInBusinessAnalysis(x) & GoodAtMath(x))"]}
{"id": "folio_train_2047", "nl": "All employees working in business analysis are working in this company. ", "fol": "all x.(WorksInBusinessAnalysis(x) -> WorksInThisCompany(x))", "prediction": ["all x.(WorkingInBusinessAnalysis(x) -> WorkingInCompany(x))", "all x.((Employee(x) & WorksInBusinessAnalysis(x)) -> WorksInCompany(x))", "all x.(WorksInBusinessAnalysis(x) -> WorkingInCompany(x))", "all x.((Employee(x) & WorkingInBusinessAnalysis(x)) -> WorkingInCompany(x))", "all x.((Employee(x) & WorksInBusinessAnalysis(x)) -> WorkingInCompany(x))", "all x.(WorksInBusinessAnalysis(x) -> WorksInCompany(x))", "all x.((Employee(x) & WorkedInBusinessAnalysis(x)) -> WorkingInCompany(x))", "all x.((Employee(x) & WorksInBusinessAnalysis(x)) -> WorkInCompany(x))", "all x.((Employee(x) & WorkInBusinessAnalysis(x)) -> WorkingInCompany(x))", "all x y.((Employee(x) & WorkingInBusinessAnalysis(x)) -> WorkingInCompany(y))", "all x y.((Employee(x) & BusinessAnalysis(y)) -> WorkingInCompany(x,y))", "all x.(WorkingInBusinessAnalysis(x) -> WorkingInCompany(x))", "all x.((Employee(x) & WorksInBusinessAnalysis(x)) -> WorkingInCompany(x))", "all x.(WorkingInBusinessAnalysis(x) -> WorksInCompany(x))", "all x.((Employee(x) & WorkedInBusinessAnalysis(x)) -> WorksInCompany(x))", "all x.(WorksInBusinessAnalysis(x) -> WorkInCompany(x))"]}
{"id": "folio_train_2048", "nl": "No employees working in this company are from China. ", "fol": "all x.(WorksInThisCompany(x) -> -IsFromChina(x))", "prediction": ["-exists x.(Employee(x) & WorkingInCompany(x) & China(x))", "-exists x.(Employee(x) & WorksInCompany(x) & -FromChina(x))", "-exists x.(Employee(x) & WorkingInCompany(x) & -FromChina(x))", "-exists x.(Employee(x) & WorksInCompany(x) & China(x))", "-exists x.(Employee(x) & WorkingInCompany(x) & FromChina(x))", "-exists x.(Employee(x) & WorksInCompany(x) & FromChina(x))", "all x.((Employee(x) & WorksInCompany(x)) -> -ChinaEmployee(x))", "-exists x.(Employee(x) & WorkingInCompany(x))", "-exists x.(Employee(x) & WorkedInCompany(x) & -FromChina(x))", "-exists x.(Employee(x) & WorkingInCompany(x) & Chinese(x))", "all x.((Employee(x) & WorksInCompany(x)) -> -FromChina(x))", "-exists x.(Employee(x) & WorkingInCompany(x) & -ChinaEmployee(x))", "-exists x.(Employee(x) & WorksInCompany(x) & -ChinaEmployee(x))", "-exists x.(Employee(x) & WorkingInCompany(x) & -China(x))", "all x y.((Employee(x) & Company(y) & WorksIn(x,y)) -> -ChinaEmployee(x))", "all x y.((Employee(x) & Company(y) & WorksIn(x,y)) -> -FromChina(x))"]}
{"id": "folio_train_2049", "nl": "All employees working in software engineering are from China. ", "fol": "all x.(WorksInSoftwareEngineering(x) -> IsFromChina(x))", "prediction": ["all x.((Employee(x) & WorksInSoftwareEngineering(x)) -> China(x))", "all x.((Employee(x) & WorksInSoftwareEngineering(x)) -> FromChina(x))", "all x.((Employee(x) & WorksInSoftwareEngineering(x)) -> Chinese(x))", "all x.(Employee(x) -> (WorksInSoftwareEngineering(x) & FromChina(x)))", "all x.((Employee(x) & SoftwareEngineering(x)) -> China(x))", "all x.(WorksInSoftwareEngineering(x) -> China(x))", "all x.(WorksInSoftwareEngineering(x) -> ChinaEmployee(x))", "all x.(Employee(x) & WorksInSoftwareEngineering(x) -> China(x))", "all x.((Employee(x) & SoftwareEngineering(x)) -> FromChina(x))", "all x.(Employee(x) & WorksInSoftwareEngineering(x) -> FromChina(x))", "all x.(Employee(x) -> WorksInSoftwareEngineering(x))", "all x.(WorksInSoftwareEngineering(x) -> ChineseEmployee(x))", "all x.(WorksInSoftwareEngineering(x) -> FromChina(x))", "all x.((Employee(x) & WorksInSoftwareEngineering(x)) -> ComesFromChina(x))", "all x.(WorkingInSoftwareEngineering(x) -> China(x))", "all x.(Employee(x) -> China(x))"]}
{"id": "folio_train_2050", "nl": "James is working in software engineering. ", "fol": "WorksInSoftwareEngineering(James)", "prediction": ["all x.(James(x) -> WorksInSoftwareEngineering(x))", "all x.(James(x) -> WorkingInSoftwareEngineering(x))", "all x.((James(x) & SoftwareEngineering(x)) -> WorksIn(x,y))", "all x y.((James(x) & SoftwareEngineering(y)) -> WorksIn(x,y))", "all x y.((James(x) & SoftwareEngineering(y)) -> WorkingIn(x,y))", "all x.((James(x) & SoftwareEngineering(x)) -> WorkingIn(x,y))", "(WorksInSoftwareEngineering(James) & -WorksInSoftwareEngineering(James))", "(WorkingInSoftwareEngineering(James) & -WorkingInSoftwareEngineering(James))", "James is working in SoftwareEngineering(James)", "all x y.((James(x) & SoftwareEngineering(y)) -> Working(x,y))", "all x.(James(x) -> SoftwareEngineering(x))", "(WorkingInSoftwareEngineering(James) & JamesWorksInSoftwareEngineering(James))", "all x.((James(x) & SoftwareEngineering(x)) -> Working(x))", "exists x.(James(x) & SoftwareEngineering(x))", "(WorkingInSoftwareEngineering(James) -> WorkingInSoftwareEngineering(James))", "(WorkingInSoftwareEngineering(Jim) & JamesWorksInSoftwareEngineering(Jim))"]}
{"id": "folio_train_2051", "nl": "James is good at math.", "fol": "IsGoodAtMath(James)", "prediction": ["all x.(James(x) -> GoodAtMath(x))", "all x.((James(x) & GoodAtMath(x)) -> GoodAtMath(x))", "all x.((James(x) & Math(x)) -> GoodAt(x,y))", "all x.((James(x) & Math(x)) -> GoodAt(x))", "all x.((James(x) & Math(y)) -> GoodAt(x,y))", "all x.((James(x) & GoodAtMathematics(x)) -> GoodAtMathematics(x))", "all x.(James(x) -> GoodAtMathematics(x))", "(GoodAtMath(James) -> GoodAtMath(James))", "(GoodAtMath(James) & GoodAtMath(James))", "exists x.(James(x) & GoodAtMath(x))", "all x.((Jimmy(x) & Math(x)) -> GoodAt(x,y))", "all x.((James(x) & Math(x)) -> GoodAt(x,Math))", "all x.(Jimmy(x) -> GoodAtMath(x))", "All x.(James(x) -> GoodAtMath(x))", "all x.((James(x) & GoodAtMath(x)) -> ExcellentAtMath(x))", "(GoodAtMath(James) -> GoodAtMath(James))"]}
{"id": "folio_train_2052", "nl": "James is not good at math and he is working in business analysis.", "fol": "(-IsGoodAtMath(James) & WorksInBusinessAnalysis(James))", "prediction": ["all x.((James(x) & -GoodAtMath(x)) -> WorkingInBusinessAnalysis(x))", "(-GoodAtMath(James) & WorkingInBusinessAnalysis(James))", "all x.((James(x) & -GoodAtMath(x)) -> BusinessAnalysis(x))", "(-GoodAtMath(Jim) & WorkingInBusinessAnalysis(Jim))", "(-GoodAtMath(James) & WorksInBusinessAnalysis(James))", "(-GoodAtMath(James) & WorkingInBusinessAnalysis(James))", "all x.(James(x) -> (-GoodAtMath(x) & WorkingInBusinessAnalysis(x)))", "(-GoodAtMath(James) & WorkedInBusinessAnalysis(James))", "(-GoodAtMath(Jim) & WorksInBusinessAnalysis(Jim))", "(all x.(James(x) -> -GoodAtMath(x)) & exists y.(BusinessAnalysis(y) & WorksIn(x,y))))", "(all x.(James(x) -> -GoodAtMath(x)) & all y.(James(y) -> WorkingInBusinessAnalysis(y))))", "(-GoodAtMath(Jim) & WorkingInBusinessAnalysis(Jim))", "all x.((James(x) & -GoodAtMath(x)) -> WorkingInBusinessAnalysis(x))", "(-GoodAtMath(Jim) & WorkedInBusinessAnalysis(Jim))", "(all x.(James(x) -> -GoodAtMath(x)) & all y.(James(y) -> WorkingInBusinessAnalysis(y)))", "all x.((James(x) & -GoodAtMath(x)) -> WorksInBusinessAnalysis(x))"]}
{"id": "folio_train_2053", "nl": "If James is not good at math and he is in business analysis, then he is neither working in this company nor working in software engineering.", "fol": "((-IsGoodAtMath(James) & WorksInBusinessAnalysis(James)) -> (-WorksInThisCompany(James) & -WorksInSoftwareEngineering(James)))", "prediction": ["all x.((James(x) & -GoodAtMath(x) & BusinessAnalysis(x)) -> (-WorkingInCompany(x) & -WorkingInSoftwareEngineering(x)))", "all x.((James(x) & -GoodAtMath(x) & BusinessAnalysis(x)) -> -(WorkingInCompany(x) | WorkingInSoftwareEngineering(x)))", "all x.((James(x) & -GoodAtMath(x) & BusinessAnalysis(x)) -> -WorkingInCompany(x) & -WorkingInSoftwareEngineering(x))", "all x.((GoodAtMath(x) & BusinessAnalysis(x)) -> (-WorkingInCompany(x) & -WorkingInSoftwareEngineering(x)))", "all x.(((James(x) & -GoodAtMath(x) & BusinessAnalysis(x)) -> (-WorkingInCompany(x) & -WorkingInSoftwareEngineering(x)))", "all x.((Company(x) & -GoodAtMath(x) & BusinessAnalysis(x)) -> (-WorkingInCompany(x) & -WorkingInSoftwareEngineering(x)))", "all x.((James(x) & -GoodAtMath(x) & InBusinessAnalysis(x)) -> (-WorkingInCompany(x) & -WorkingInSoftwareEngineering(x)))", "all x.((James(x) & -GoodAtMath(x) & BusinessAnalysis(x)) -> (-WorkingInCompany(x) | WorkingInSoftwareEngineering(x)))", "all x.((GoodAtMath(x) & BusinessAnalysis(x)) -> -(WorkingInCompany(x) | WorkingInSoftwareEngineering(x)))", "all x.((Company(x) & -GoodAtMath(x) & BusinessAnalysis(x)) -> -(WorkingInCompany(x) | WorkingInSoftwareEngineering(x)))", "all x.((James(x) & -GoodAtMathematics(x) & BusinessAnalysis(x)) -> (-WorkingInCompany(x) & -WorkingInSoftwareEngineering(x)))", "all x.(((James(x) & -GoodAtMath(x) & BusinessAnalysis(x)) -> -WorkingInCompany(x) & -WorkingInSoftwareEngineering(x))", "all x.(((James(x) & -GoodAtMath(x) & BusinessAnalysis(x)) -> -(WorkingInCompany(x) | WorkingInSoftwareEngineering(x))))", "all x.(((James(x) & -GoodAtMath(x) & BusinessAnalysis(x)) -> (-WorkingInCompany(x) | WorkingInSoftwareEngineering(x)))", "all x.(((James(x) & -GoodAtMath(x) & BusinessAnalysis(x)) -> -(WorkingInCompany(x) | WorkingInSoftwareEngineering(x)))", "all x.((James(x) & -GoodAtMath(x) & BusinessAnalysis(x)) -> -(WorkingInCompany(x) | WorkingInSoftwareEngineering(x))))"]}
{"id": "folio_train_2054", "nl": "The party provides five kinds of fruits: strawberry, orange, blueberry, grape, and cherry.", "fol": "(ProvidesFruit(Strawberry) | ProvidesFruit(Orange) | ProvidesFruit(Blueberry) | ProvidesFruit(Grape) | ProvidesFruit(Cherry))", "prediction": ["all x.(Party(x) -> (ProvidesFruits(x,Strawberry) & ProvidesFruits(x,Orange) & ProvidesFruits(x,Blueberry) & ProvidesFruits(x,Grape) & ProvidesFruits(x,Cherry)))", "all x.(Party(x) -> (ProvidesFruits(x,Strawberry) | ProvidesFruits(x,Orange) | ProvidesFruits(x,Blueberry) | ProvidesFruits(x,Grape) | ProvidesFruits(x,Cherry)))", "all x.(Party(x) -> (ProvidesFruits(x,Strawberry) & ProvidesFruits(x,Orange) & ProvidesFruits(x,Blueberry) & ProvidesFruits(x,Rape) & ProvidesFruits(x,Cherry)))", "all x.(Party(x) -> (ProvidesFruits(x,Strawberry) & ProvidesFruits(x,Orange) & ProvidesFruits(x,Blueberry) & ProvidesFruits(x,Rose) & ProvidesFruits(x,Cherry)))", "all x.(Party(x) -> (ProvidesFruits(x) & (Strawberry(x) | Orange(x) | Blueberry(x) | Grape(x) | Cherry(x))))", "all x.(Party(x) -> (ProvidesFruits(x,Strawberry) | ProvidesFruits(x,Orange) | ProvidesFruits(x,Blueberry) | ProvidesFruits(x,Rape) | ProvidesFruits(x,Cherry)))", "all x.(Party(x) -> (ProvidesFruits(x,y) & (Strawberry(y) | Orange(y) | Blueberry(y) | Grape(y) | Cherry(y))))", "all x.(Party(x) -> (ProvidesFruits(x,Strawberry) & ProvidesFruits(x,Orange) & ProvidesFruits(x,Blueberry) & ProvidesFruits(x,Raw) & ProvidesFruits(x,Cherry)))", "all x y.((Party(x) & Strawberry(y) & Orange(y) & Blueberry(y) & Grape(y) & Cherry(y)) -> ProvidesFruits(x,y))", "all x.(Party(x) -> (ProvidesFruits(x,Strawberry) & ProvidesFruits(x,Orange) & ProvidesFruits(x,Blueberry) & ProvidesFruits(x,Trawberry) & ProvidesFruits(x,Cherry)))", "all x.(Party(x) -> (ProvidesFruits(x,Strawberry) | ProvidesFruits(x,Orange) | ProvidesFruits(x,Blueberry) | ProvidesFruits(x,Rose) | ProvidesFruits(x,Cherry)))", "all x.(Party(x) -> (ProvidesFruits(x,Strawberry) & ProvidesFruits(x,Orange) & ProvidesFruits(x,Blueberry) & ProvidesFruits(x,Rouge) & ProvidesFruits(x,Cherry)))", "all x y z.((Party(x) & Fruit(y) & Fruit(z)) -> ((Strawberry(y) | Orange(y) | Blueberry(y) | Grape(y) | Cherry(y))))", "all x.(Party(x) -> (ProvidesFruits(x,Strawberry) | ProvidesFruits(x,Orange) | ProvidesFruits(x,Blueberry) | ProvidesFruits(x,Raw) | ProvidesFruits(x,Cherry)))", "all x y.((Party(x) & Strawberry(y)) -> (Orange(y) & Blueberry(y) & Grape(y) & Cherry(y)))", "all x.(Party(x) -> (ProvidesFruits(x,Strawberry) & ProvidesFruits(x,Orange) & ProvidesFruits(x,Blueberry) & ProvidesFruits(x,Grape) & ProvidesFruits(x,Champagne)))"]}
{"id": "folio_train_2055", "nl": "All fruits are provided in the same weight at the beginning of the party.", "fol": "all x.(ProvidesFruit(x) -> AllFruitsSameWeight(x))", "prediction": ["all x.(Fruit(x) -> SameWeightAtParty(x))", "all x.(Fruit(x) -> SameWeightAtBeginOfParty(x))", "all x.(Fruit(x) -> ProvidedInSameWeightAtParty(x))", "all x.(Fruit(x) -> SameWeightAtStartOfParty(x))", "all x.((Fruit(x) & SameWeightAtParty(x)) -> ProvidedInParty(x))", "all x.(Fruit(x) -> SameWeightAtPartyStart(x))", "all x.(Fruit(x) -> SameWeightAtEndOfParty(x))", "all x y.((Fruit(x) & Party(y)) -> ProvidedInSameWeight(x,y))", "all x.(Fruit(x) -> SameWeightAtEntry(x))", "all x y.((Fruit(x) & Party(y)) -> SameWeightAtEndOfParty(x,y))", "all x y.((Fruit(x) & Party(y)) -> SameWeightAtBegin(x,y))", "all x y.((Fruit(x) & Party(y)) -> SameWeightAtEntry(x,y))", "all x y.((Fruit(x) & Party(y)) -> SameWeightAtParty(x,y))", "all x y.((Fruit(x) & Party(y)) -> SameWeight(x,y))", "all x.((Fruit(x) & SameWeightAtParty(x)) -> ProvidedAtParty(x))", "all x.(Fruit(x) -> ProvidedInSameWeightAtPartyStart(x))"]}
{"id": "folio_train_2056", "nl": "If the fruit had the lowest remaining weight at the end of the party, then it means it was the most popular fruit.", "fol": "all x.(HasLowestRemainingWeight(x) -> IsMostPopularFruit(x))", "prediction": ["all x.((Fruit(x) & LowestRemainingWeightAtEndOfParty(x)) -> MostPopularFruit(x))", "all x.((Fruit(x) & LowestRemainingWeight(x)) -> MostPopularFruit(x))", "all x.((Fruit(x) & LowestRemainingWeight(x) & EndOfParty(x)) -> MostPopularFruit(x))", "all x.((Fruit(x) & LowestRemainingWeightAtEndOfParty(x)) -> PopularFruit(x))", "all x.((Fruit(x) & LowestRemainingWeight(x) & PartyEnd(x)) -> MostPopularFruit(x))", "all x.((Fruit(x) & LowestWeightAtEndOfParty(x)) -> MostPopularFruit(x))", "all x.((Fruit(x) & LowestRemainingWeight(x) & AtEndOfParty(x)) -> MostPopularFruit(x))", "all x.((Fruit(x) & LowerRemainingWeightAtEndOfParty(x)) -> MostPopularFruit(x))", "all x.((Fruit(x) & LowestRemainingWeight(x)) -> PopularFruit(x))", "all x.((Fruit(x) & LowestRemainingWeight(x) & EndOfParty(x)) -> PopularFruit(x))", "all x.((Fruit(x) & LowestRemainingWeightAtEndOfParty(x)) -> PopularFruit(x))", "all x.((Fruit(x) & LowestRemainingWeight(x,EndOfParty)) -> MostPopularFruit(x))", "all x.((Fruit(x) & LowestRemainingWeightAtParty(x)) -> MostPopularFruit(x))", "all x.((Fruit(x) & LowestRemainingWeight(x) & PartyEnd(x)) -> PopularFruit(x))", "all x.((Fruit(x) & LowestRemainingWeightEndOfParty(x)) -> MostPopularFruit(x))", "all x.((Fruit(x) & LowestRemainingWeightAtEndOfParty(x)) -> MostPopular(x))"]}
{"id": "folio_train_2057", "nl": "At the end of the party, strawberries had the lowest remaining weight.", "fol": "HasLowestRemainingWeight(Strawberries)", "prediction": ["all x.((Strawberry(x) & PartyEnd(x)) -> LowestRemainingWeight(x))", "all x.((Strawberry(x) & EndOfParty(x)) -> LowestRemainingWeight(x))", "all x.((Strawberries(x) & PartyEnd(x)) -> LowestRemainingWeight(x))", "all x y.((Party(x) & Strawberry(y)) -> LowestRemainingWeight(y,x))", "all x.((Strawberries(x) & EndOfParty(x)) -> LowestRemainingWeight(x))", "all x y.((Strawberry(x) & Party(y)) -> LowestRemainingWeight(x,y))", "all x.((Strawberry(x) & PartyEnd(x)) -> LowestWeight(x))", "all x y.((Party(x) & Strawberry(y)) -> LowestRemainingWeight(y))", "all x.((Strawberry(x) & Party(x)) -> LowestRemainingWeight(x))", "all x.((Shakeberries(x) & PartyEnd(x)) -> LowestRemainingWeight(x))", "all x.((Shake(x) & PartyEnd(x)) -> LowestRemainingWeight(x))", "all x.((Scrape(x) & PartyEnd(x)) -> LowestRemainingWeight(x))", "all x.((Strawberry(x) & LastParty(x)) -> LowestRemainingWeight(x))", "all x y.((Pace(x) & Strawberry(y)) -> LowestRemainingWeight(y,x))", "all x.((Strawberry(x) & PartyEnd(x)) -> LowerRemainingWeight(x))", "all x.(Strawberry(x) -> LowestRemainingWeight(x))"]}
{"id": "folio_train_2058", "nl": "At the end of the party, the amount of leftover blueberries was lower than that of cherries.", "fol": "AmountLowerThan(Blueberry,Cherry)", "prediction": ["all x y.((Party(x) & LeftoverBlueberries(x) & Cherry(y)) -> LowerAmount(x,y))", "all x y.((Party(x) & LeftoverBlueberries(y) & Cherry(y)) -> LowerAmount(x,y))", "all x y.((Party(x) & Party(y)) -> (LessBlueberries(x,y) & LowerCherries(x,y)))", "all x y z.((Party(x) & Blueberry(y) & Cherry(z)) -> Leftovers(x,y,z))", "all x y.((Party(x) & Party(y) & LeftoverBlueberries(x,y)) -> LowerAmount(x,y))", "all x y.((Party(x) & Party(y)) -> (LessBlueberries(x,y) & LessCherries(x,y)))", "all x.((Party(x) & LeftoverBlueberries(x) & LeftoverCherries(x)) -> LowerAmount(x,y))", "all x y.((Party(x) & Party(y)) -> (LessBlueberries(x,y) & LowerCr\u00e8mes(x,y)))", "all x y.((Party(x) & Blueberry(y) & Cherry(y)) -> LowerAmount(x,y))", "all x y.((Party(x) & LeftoverBlueberries(y)) -> LowerAmount(x,y))", "all x y.((Party(x) & Party(y) & LeftoverBlueberries(x,y)) -> LowerAmountThanCherries(x,y))", "all x y.((Party(x) & Party(y)) -> (RemaindedBlueberries(x,y) & LowerAmount(x,y)))", "all x y z.((Party(x) & Blueberry(y) & Cherry(z)) -> (LowerAmount(x,y,z)))", "all x y.((Party(x) & Party(y)) -> LeftoverBlueberries(x,y))", "all x y z.((Party(x) & Blueberry(y) & Cherry(z)) -> Leftovers(y,z))", "all x y z.((Party(x) & Blueberry(y) & Cherry(z)) -> LeftoversLowerThan(y,z))"]}
{"id": "folio_train_2059", "nl": "Benjamin only ate oranges and grapes at the party.", "fol": "(EatsFruit(Orange,Benjamin) & EatsFruit(Grape,Benjamin) & -EatsFruit(Blueberry,Benjamin) & -EatsFruit(Cherry,Benjamin) & -EatsFruit(Strawberry,Benjamin))", "prediction": ["all x y.((Benjamin(x) & Party(y)) -> (EatsOranges(x,y) & EatsGrapes(x,y)))", "all x y.((Benjamin(x) & Party(y)) -> (EatsOranges(x,y) | EatsGrapes(x,y)))", "all x.((Benjamin(x) & Party(x)) -> (EatsOranges(x) & EatsGrapes(x)))", "all x.(Benjamin(x) -> (EatsOranges(x) & EatsGrapes(x)))", "all x.((Benjamin(x) & Party(x)) -> (ateOranges(x) & ateGrapes(x)))", "all x y.((Benjamin(x) & Party(y)) -> (Eats(x,y) & (Oranges(y) | Grapes(y))))", "all x.((Benjamin(x) & Party(y)) -> (EatsOranges(x,y) | EatsGrapes(x,y)))", "all x.((Benjamin(x) & Party(y)) -> (EatsOranges(x,y) & EatsGrapes(x,y)))", "all x.((Benjamin(x) & Party(x)) -> (EatsOranges(x) | EatsGrapes(x)))", "all x y.((Benjamin(x) & Party(y)) -> (Eats(x,y) & (Orange(y) | Grape(y))))", "all x y z.((Benjamin(x) & Orange(y) & Grape(z)) -> (Eats(x,y) & Eats(x,z)))", "all x y.((Benjamin(x) & Party(y)) -> (EatsOranges(x) & EatsGrapes(x)))", "all x.((Benjamin(x) & Party(y)) -> (ateOranges(x) & ateGrapes(x)))", "all x.((Benjamin(x) & Party(y)) -> (EatsOranges(x) & EatsGrapes(x)))", "all x y.((Benjamin(x) & Party(y)) -> (At(x,y) & (At(x,y) | At(x,y)))))", "all x.(Benjamin(x) -> (ateOranges(x) & ateGrapes(x)))"]}
{"id": "folio_train_2060", "nl": "Blueberries were the most popular fruit at the party.", "fol": "IsMostPopularFruit(Blueberry)", "prediction": ["all x.(Blueberry(x) -> MostPopularFruitAtParty(x))", "all x y.((Blueberry(x) & Party(y)) -> MostPopularFruit(x,y))", "all x.(Blueberry(x) -> PopularFruitAtParty(x))", "all x y.((Blueberry(x) & Party(y)) -> PopularFruit(x,y))", "all x y.((Blueberry(x) & Party(y)) -> MostPopularFruitAt(x,y))", "all x y.((Blueberry(x) & Party(y)) -> PopularFruitAt(x,y))", "all x y z.((Blueberry(x) & Party(y) & Party(z)) -> MostPopularFruit(x,y,z))", "all x.(Blueberry(x) -> MostPopularFruit(x))", "all x y z.((Blueberry(x) & Party(y) & Party(z)) -> MostPopularFruitAt(x,y,z))", "all x y.((Blueberry(x) & Party(y) & PopularFruit(x,y)) -> PopularFruit(x,y))", "all x y z.((Blueberry(x) & Party(y) & Fruit(z)) -> MostPopularAt(x,y,z))", "all x.(Bloodberry(x) -> MostPopularFruitAtParty(x))", "all x y.((Blueberry(x) & Party(y)) -> PopularFruit(x,y))", "all x y z.((Blueberry(x) & Party(y) & Fruit(z)) -> MostPopular(x,y,z))", "all x y z.((Blueberry(x) & Party(y) & Party(z)) -> PopularFruit(x,y,z))", "all x y.((Blueberry(x) & Party(y) & PopularFruit(x,y)) -> MostPopularFruit(x,y))"]}
{"id": "folio_train_2061", "nl": "Cherries were the most popular fruit at the party.", "fol": "IsMostPopularFruit(Cherry)", "prediction": ["all x y.((Cherry(x) & Party(y)) -> MostPopularFruit(x,y))", "all x.(Cherry(x) -> MostPopularFruitAtParty(x))", "all x y.((Cherry(x) & Party(y)) -> PopularFruit(x,y))", "all x.(Cerry(x) -> MostPopularFruitAtParty(x))", "all x y.((Cerry(x) & Party(y)) -> MostPopularFruit(x,y))", "all x y.((Cherry(x) & Party(y)) -> MostPopularFruitAt(x,y))", "all x.(Cherry(x) -> PopularFruitAtParty(x))", "all x y.((Cerry(x) & Party(y)) -> PopularFruit(x,y))", "all x.(Cherries(x) -> MostPopularFruitAtParty(x))", "all x y.((Cerry(x) & Party(y)) -> MostPopularFruitAt(x,y))", "all x.(Cerry(x) -> PopularFruitAtParty(x))", "all x y z.((Cherry(x) & Party(y) & Party(z)) -> MostPopularFruit(x,y,z))", "all x y.((Cherry(x) & Party(y)) -> PopularFruitAt(x,y))", "all x y z.((Cherry(x) & Party(y) & Fruit(z)) -> MostPopularAt(x,y,z))", "all x.(Cherries(x) -> PopularFruitAtParty(x))", "all x.(Cerries(x) -> MostPopularFruitAtParty(x))"]}
{"id": "folio_train_2062", "nl": "Benjamin ate blueberries at the party.", "fol": "EatsFruit(Blueberry,Benjamin)", "prediction": ["all x y.((Benjamin(x) & Party(y)) -> EatsBlueberries(x,y))", "all x y.((Benjamin(x) & Blueberry(y)) -> EatsAtParty(x,y))", "all x y z.((Benjamin(x) & Blueberry(y) & Party(z)) -> EatsAt(x,y,z))", "all x y z.((Benjamin(x) & Blueberry(y) & Party(z)) -> Eats(x,y,z))", "all x y.((Benjamin(x) & Blueberry(y)) -> AeratedAtParty(x,y))", "all x y.((Benjamin(x) & Blueberry(y)) -> AtParty(x,y))", "all x.((Benjamin(x) & Party(y)) -> EatsBlueberries(x,y))", "(AtParty(Benjamin) & EatsBlueberries(Benjamin))", "all x.((Benjamin(x) & Party(x)) -> EatsBlueberries(x))", "all x y.((Benjamin(x) & Blueberry(y)) -> EatenAtParty(x,y))", "all x y z.((Benjamin(x) & Blueberry(y) & Party(z)) -> AeratedAt(x,y,z))", "all x y.((Benjamin(x) & Party(y)) -> EatsBlueberriesAt(x,y))", "all x y z.((Benjamin(x) & Blueberry(y) & Party(z)) -> Aate(x,y,z))", "all x y.((Benjamin(x) & Blueberry(y)) -> Eats(x,y))", "all x y.((Benjamin(x) & Party(y)) -> EatsBlueberry(x,y))", "all x y z.((Benjamin(x) & Blueberry(y) & Party(z)) -> ate(x,y,z))"]}
{"id": "folio_train_2063", "nl": "All students who attend in person have registered for the conference. ", "fol": "all x.(AttendConference(x) -> RegisteredForConference(x))", "prediction": ["all x.((Student(x) & AttendsInPerson(x)) -> RegisteredForConference(x))", "all x.((Student(x) & AttendsInPerson(x)) -> RegisteredForConference(x))", "all x.((Student(x) & AttendInPerson(x)) -> RegisteredForConference(x))", "all x.((Student(x) & AttendsInPersonal(x)) -> RegisteredForConference(x))", "all x y.((Student(x) & AttendsInPerson(x)) -> RegisteredForConference(y))", "all x.(AttendsInPerson(x) -> RegisteredForConference(x))", "all x.((Student(x) & AttendsInPerson(x)) -> RegistrationForConference(x))", "all x y.((Student(x) & AttendsInPerson(x)) -> RegisteredForConference(x))", "all x.((Student(x) & AttendsInPerson(x)) -> RegistratedForConference(x))", "all x.(AttendInPerson(x) -> RegisteredForConference(x))", "all x.((Student(x) & AttendsInPer Person(x)) -> RegisteredForConference(x))", "all x.((Student(x) & AttendsInperson(x)) -> RegisteredForConference(x))", "all x y.((Student(x) & AttendsInPerson(x)) -> RegisteredForConference(x,y))", "all x y.((Student(x) & AttendsInPerson(x,y)) -> RegisteredForConference(x,y))", "all x.((Student(x) & AttendsInPerson(x)) -> RegisteredForCertain(x))", "all x y.((Student(x) & AttendsInPerson(x,y)) -> RegisteredForConference(x))"]}
{"id": "folio_train_2064", "nl": "Students either attend the conference in person or remotely. ", "fol": "all x.(((AttendConference(x) -> AttendInPerson(x)) & -AttendRemotely(x)) | (-(AttendConference(x) -> AttendInPerson(x)) & AttendRemotely(x)))", "prediction": ["all x y.((Student(x) & Conference(y)) -> (AttendsInPerson(x,y) | AttendsRemotely(x,y)))", "all x.(Student(x) -> (AttendsConferenceInPerson(x) | AttendsConferenceRemotely(x)))", "all x.(Student(x) -> (AttendsInPerson(x) | AttendsRemotely(x)))", "all x y.((Student(x) & Conference(y)) -> (AttendInPerson(x,y) | AttendRemotely(x,y)))", "all x y.((Student(x) & Conferencing(y)) -> (AttendsInPerson(x,y) | AttendsRemotely(x,y)))", "all x y.((Student(x) & Conference(y) & (AttendsInPerson(x,y) | AttendsRemotely(x,y))) -> (AttendsInPerson(x,y) | AttendsRemotely(x,y))))", "all x y.((Student(x) & Conference(y) & (AttendsInPerson(x,y) | AttendsRemotely(x,y))) -> (AttendsInPerson(x,y) | AttendsRemotely(x,y)))", "all x y.((Student(x) & Conference(y) & AttendsInPerson(x,y)) | AttendsRemotely(x,y))", "all x.(Student(x) -> (AttendConferenceInPerson(x) | AttendConferenceRemotely(x)))", "all x y.((Student(x) & Conference(y) & (AttendsInPerson(x,y) | AttendsRemotely(x,y))) -> AttendsInPerson(x,y))", "all x y z.((Student(x) & Conference(y) & Student(z)) -> (AttendsInPerson(x,y) | AttendsRemotely(x,z)))", "all x y.((Student(x) & Student(y)) -> (AttendsInPerson(x,y) | AttendsRemotely(x,y)))", "all x y.((Student(x) & Conference(y) & (AttendsInPerson(x,y) | AttendsRemotely(x,y))) -> AttendsRemotely(x,y))", "all x y.((Student(x) & Conference(y)) -> (AttendsInPerson(x) | AttendsRemotely(x)))", "all x.(Student(x) -> (AttendInPerson(x) | AttendRemotely(x)))", "all x.(Student(x) -> (AttendsConference(x,person) | AttendsConference(x,remotely)))"]}
{"id": "folio_train_2065", "nl": "No students from China attend the conference remotely. ", "fol": "all x.((AttendConference(x) & IsFromChina(x)) -> -AttendRemotely(x))", "prediction": ["-exists x.(Student(x) & China(x) & AttendsConferenceRemotely(x))", "-exists x.(Student(x) & FromChina(x) & AttendsConferenceRemotely(x))", "all x.((Student(x) & China(x)) -> -AttendsConferenceRemotely(x))", "-exists x.(Student(x) & -China(x) & AttendsConferenceRemotely(x))", "-all x.((Student(x) & China(x)) -> AttendsConferenceRemotely(x))", "all x.((Student(x) & -China(x)) -> AttendsConferenceRemotely(x))", "all x.((Student(x) & -ChinaAttendsConferenceRemotely(x)) -> -AttendsConferenceRemotely(x))", "all x y.((Student(x) & China(y)) -> -AttendsConferenceRemotely(x,y))", "-exists x.(Student(x) & Chinese(x) & AttendsConferenceRemotely(x))", "all x.((Student(x) & -ChinaAttendsConferenceRemotely(x)) -> -(ChinaAttendsConferenceRemotely(x) | ChinaAttendsConferenceRemotely(x))))", "all x.((Student(x) & -ChinaAttendsConferenceRemotely(x)) -> -(ChinaAttendsConferenceRemotely(x) | ChinaAttendsConferenceRemotely(x)))", "-exists x.(Student(x) & -ChinaAttendsConferenceRemotely(x))", "all x.((Student(x) & -ChinaAttendsConferenceRemotely(x)) -> -ChinaAttendsConferenceRemotely(x))", "all x.((Student(x) & -ChinaAttendsConferenceRemotely(x)) -> -(ChinaAttendsConferenceRemotely(x) & ChinaAttendsConferenceRemotely(x)))", "all x.((Student(x) & -ChinaAttendsConferenceRemotely(x)) -> -(ChinaAttendsConferenceRemotely(x) & -ChinaAttendsConferenceRemotely(x)))", "all x y.((Student(x) & China(y)) -> -AttendsRemotely(x,y))"]}
{"id": "folio_train_2066", "nl": "James attends the conference but he does not attend the conference remotely.", "fol": "(AttendConference(James) & -AttendRemotely(James))", "prediction": ["(all x y.((James(x) & Conference(y)) -> Attends(x,y)) & ((James(x) & Conference(y)) -> -AttendsRemotely(x,y))))", "(all x y.((James(x) & Conference(y)) -> Attends(x,y)) & ((James(x) & Conference(y)) -> -AttendsRemotely(x,y)))", "all x y.((James(x) & Conference(y)) -> (Attends(x,y) & -AttendsRemotely(x,y)))", "(all x.((James(x) & Conference(y)) -> Attends(x,y)) & ((James(x) & Conference(y)) -> -AttendsRemotely(x,y))))", "(all x y.((AttendsConference(x) & Conference(y)) -> Attends(x,y)) & ((AttendsConference(x) & Conference(y)) -> -AttendsRemotely(x,y))))", "(all x y.((James(x) & Conference(y)) -> Attends(x,y)) & ((James(x) & Conference(y)) -> -Attends(x,y))))", "(all x y.((AttendsConference(x) & Conference(y)) -> Attends(x,y)) & ((AttendsConference(x,y) & Conference(y)) -> -AttendsRemotely(x,y)))", "(all x y.((AttendsConference(x) & Conference(y)) -> Attends(x,y)) & ((AttendsConference(x) & Conference(y)) -> -AttendsRemotely(x,y)))", "(all x y.((James(x) & Conference(y)) -> Attends(x,y)) & ((James(x) & Conference(y)) -> -Attends(x,y)))", "(all x.((James(x) & Conference(y)) -> Attends(x,y)) & ((James(x) & Conference(y)) -> -AttendsRemotely(x,y)))", "(all x y.((AttendsConference(x) & Conference(y)) -> Attends(x,y)) & ((AttendsConference(x,y) & Conference(y)) -> -AttendsRemotely(x,y))))", "(all x.(James(x) -> AttendsConference(x)) & (James(x) -> -AttendsConferenceRemotely(x)))", "(all x.(James(x) -> AttendsConference(x)) & -(James(x) -> AttendsConferenceRemotely(x))))", "(all x y.((AttendsConference(x) & Conference(y)) -> Attends(x,y)) & ((AttendsConference(x,y)) -> -AttendsConference(x,y))))", "all x y.((James(x) & Conference(y)) -> (Attends(x,y) & -Attends(x,y)))", "(all x y.((AttendsConference(x) & Conference(y)) -> Attends(x,y)) & ((AttendsConference(x) & Conference(y)) -> -AttendsConference(x,y))))"]}
{"id": "folio_train_2067", "nl": "Jack attends the conference and he is a student from China.", "fol": "(IsFromChina(Jack) & AttendConference(Jack))", "prediction": ["(AttendsConference(Jack) & StudentFromChina(Jack))", "all x y.((Jack(x) & Conference(y)) -> (Attends(x,y) & StudentFromChina(x)))", "all x.(Jack(x) -> (AttendsConference(x) & StudentFromChina(x)))", "all x.((Jack(x) & AttendsConference(x) & StudentFromChina(x)) -> AttendsConference(x))", "all x y z.((Jack(x) & Conference(y) & Student(z)) -> (Attends(x,y) & FromChina(z)))", "all x y.((Jack(x) & Conference(y)) -> (Attends(x,y) & Student(x) & FromChina(x)))", "(AttendsConference(Jack) & Student(Jack) & FromChina(Jack))", "all x y.((Jack(x) & Conference(y)) -> (Attends(x,y) & Student(x,China)))", "all x y.((Jack(x) & Conference(y)) -> (Attends(x,y) & Student(x,y)))", "all x.((Jack(x) & AttendsConference(x)) -> StudentFromChina(x))", "all x y.((Jack(x) & Conference(y)) -> (Attends(x,y) & StudentInChina(x)))", "all x.(Jack(x) -> (AttendsConference(x) & Student(x) & FromChina(x)))", "(AttendsConference(Jack) & StudentInChina(Jack))", "all x y.((Jack(x) & Conference(y)) -> (Attends(x,y) & Student(x,y) & FromChina(x)))", "all x y z.((Jack(x) & Conference(y) & Student(z)) -> (Attends(x,y) & China(z)))", "all x y z.((Jack(x) & Conference(y) & Student(z)) -> (Attends(x,y) & Chinese(z)))"]}
{"id": "folio_train_2068", "nl": "James attends the conference but not in person.", "fol": "(AttendConference(James) & -AttendInPerson(James))", "prediction": ["all x.(James(x) -> (AttendsConference(x) & -InPerson(x)))", "all x.(James(x) -> (AttendsConference(x) & -AttendsInPerson(x)))", "all x y.((James(x) & Conference(y)) -> (Attends(x,y) & -AttendsInPerson(x,y)))", "all x y.((James(x) & Conference(y)) -> (Attends(x,y) & -InPerson(x)))", "all x y.((James(x) & Conference(y)) -> (Attends(x,y) & -AttendsInPerson(x)))", "all x y.((James(x) & Conference(y)) -> (Attends(x,y) & -InPerson(x,y)))", "all x.((James(x) & AttendsConference(x)) -> -AttendsInPerson(x))", "all x.((James(x) & AttendsConference(x) & -AttendsInPerson(x)) -> -AttendsInPerson(x))", "all x.(James(x) -> (AttendsConference(x) & -AttendsConferenceInPerson(x)))", "all x y.((James(x) & Conference(y)) -> (Attends(x,y) & -Attends(x,y)))", "(all x.(James(x) -> AttendsConference(x)) & -(James(x) -> AttendsConference(x))))", "(exists x.(James(x) & AttendsConference(x)) & -exists y.(James(y) & AttendsConference(y))))", "(exists x.(James(x) & AttendsConference(x)) & -exists y.(James(y) & AttendsConference(x,y))))", "(AttendsConference(James) & -AttendsInPerson(James))", "exists x.(James(x) & AttendsConference(x) & -AttendsInPerson(x))", "all x.(James(x) -> (AttendsConference(x) & -AttendsConference(x)))"]}
{"id": "folio_train_2069", "nl": "Jack attends the conference in person.", "fol": "(AttendConference(Jack) & AttendInPerson(Jack))", "prediction": ["all x y.((Jack(x) & Conference(y)) -> AttendsInPerson(x,y))", "all x.(Jack(x) -> AttendsConferenceInPerson(x))", "all x y.((Jack(x) & Conference(y) & AttendsInPerson(x,y)) -> AttendsInPerson(x,y))", "all x y z.((Jack(x) & Conference(y) & Person(z)) -> AttendsIn(x,y,z))", "all x y.((Jack(x) & Conferencing(y)) -> AttendsInPerson(x,y))", "all x.((Jack(x) & AttendsConferenceInPerson(x)) -> AttendsConferenceInPerson(x))", "all x y z.((Jack(x) & Conference(y) & Person(z)) -> AttendsInPerson(x,y,z))", "All x y.((Jack(x) & Conference(y)) -> AttendsInPerson(x,y))", "all x.((Jack(x) & Conference(y)) -> AttendsInPerson(x,y))", "all x y z.((Jack(x) & Conference(y) & Conference(z)) -> AttendsInPerson(x,y,z))", "all x y.((Jack(x) & Conf\u00e9rence(y)) -> AttendsInPerson(x,y))", "all x y z.((Jack(x) & Conference(y) & Person(z)) -> Attends(x,y,z))", "(AttendsConferenceInPerson(Jack))", "All x.(Jack(x) -> AttendsConferenceInPerson(x))", "all x.(AttendsConferenceInPerson(x) -> Jack(x))", "all x.((Jack(x) & AttendsConferenceInPerson(x)) -> AttendsInPerson(x))"]}
{"id": "folio_train_2070", "nl": "Jack has registered for the conference.", "fol": "RegisteredForConference(Jack)", "prediction": ["all x.(Jack(x) -> RegisteredForConference(x))", "all x y.((Jack(x) & Conference(y)) -> RegisteredFor(x,y))", "All x.(Jack(x) -> RegisteredForConference(x))", "all x.((Jack(x) & Conference(y)) -> RegisteredFor(x,y))", "all x y.((Jack(x) & Conference(y)) -> Registered(x,y))", "all x.(Jack(x) -> RegisteredForConference(x))", "all x.((Jack(x) & Conference(x)) -> RegisteredFor(x,y))", "all x y.((Jack(x) & Conference(y)) -> RegisteredFor(x,y))", "all x.((Jack(x) & RegisteredForConference(x)) -> RegisteredForConference(x))", "all x.((Jack(x) & Registered(x)) -> Conference(x))", "all x.((Jack(x) & Conference(y)) -> Registered(x,y))", "all x.((Jack(x) & RegisteredForConference(x)) -> Joined(x))", "all x.(Jack(x) -> RegistratedForConference(x))", "all x.((Jack(x) & RegisteredForConference(x)) -> AttendsConference(x))", "all x.((Jack(x) & RegisteredForConference(x)) -> Conference(x))", "all x y.((Jack(x) & Conference(y)) -> Registered(x,y))"]}
{"id": "folio_train_2071", "nl": "David Ha'ivri is a political strategist. ", "fol": "IsPoliticalStrategist(Davidhaivri)", "prediction": ["David Ha'ivri is a political strategist.", "all x.((DavidHaivri(x) & PoliticalStrategist(x)) -> PoliticalStrategist(x))", "all x.((DavidHa'ivri(x) & PoliticalStrategist(x)) -> PoliticalStrategist(x))", "all x.((Strategist(x) & DavidHaivri(x)) -> Political(x))", "all x.((DavidHaivri(x) & PoliticalStrategist(x)) -> HasIvri(x))", "all x.((Strategist(x) & DavidHa'ivri(x)) -> Political(x))", "all x.((President(x) & PoliticalStrategist(x)) -> DavidHaivri(x))", "all x.((President(x) & PoliticalStrategist(x)) -> DavidHa'ivri(x))", "all x.((HasIvri(x) & PoliticalStrategist(x)) -> David(x))", "all x.((DavidHa'ivri(x) & PoliticalStrategist(x)) -> HasIvri(x))", "all x.((Strategist(x) & DavidHaivri(x)) -> PoliticalStrategist(x))", "all x.((DavidHaivri(x) & PoliticalStrategist(x)) -> Strategic(x))", "all x.((DavidHaivri(x) & PoliticalStrategist(x)) -> PoliticalStrategy(x))", "all x.((DavidHa'ivri(x) & PoliticalStrategist(x)) -> PoliticalStrategy(x))", "all x.((DavidHaivri(x) & PoliticalStrategist(x)) -> Is(x,y))", "(PoliticalStrategist(DavidHa'ivri)"]}
{"id": "folio_train_2072", "nl": "If you are born in Israel to at least one Israeli parent, then you receive citizenship at birth. ", "fol": "all x.(exists y.(BornInIsrael(x) & HasParent(x,y) & IsIsraeliParent(y)) -> IsIsraeliCitizen(x))", "prediction": ["all x.((BirthInIsrael(x) & HasIsraeliParent(x)) -> ReceivesCitizenshipAtBirth(x))", "all x.((BirthInIsrael(x) & HasIsraeliParent(x)) -> ReceiveCitizenshipAtBirth(x))", "all x.((BirthInIsrael(x) & AtLeastOneIsraeliParent(x)) -> ReceivesCitizenshipAtBirth(x))", "all x.((BornInIsrael(x) & HasIsraeliParent(x)) -> ReceivesCitizenshipAtBirth(x))", "all x.((BirthInIsrael(x) & HasIranianParent(x)) -> ReceivesCitizenshipAtBirth(x))", "all x.((BirthInIsrael(x) & HasIsraeliParent(x)) -> ReceivesCitizenshipAtBirth(x))", "all x.((BirthInIsrael(x) & HasIsraeliParent(x)) -> ReceivesCitizenship(x))", "all x y.((BirthInIsrael(x) & IsraeliParent(y) & BornInIsrael(x,y)) -> ReceivesCitizenshipAtBirth(x))", "all x.((BirthInIsrael(x) & HasIranianParent(x)) -> ReceiveCitizenshipAtBirth(x))", "all x.((BirthInIsrael(x) & HasIsraeliParent(x)) -> ReceivesCitizenshipAtBirth(x))", "all x.((BornInIsrael(x) & HasIsraeliParent(x)) -> ReceiveCitizenshipAtBirth(x))", "all x.((BirthInIsraelToAtLeastOneIsraeliParent(x)) -> ReceivesCitizenshipAtBirth(x))", "all x.((BirthInIsrael(x) & HasIsraeliParent(x,y)) -> ReceivesCitizenshipAtBirth(x))", "all x.((BirthInIsrael(x) & exists y.(IsraeliParent(y) & BornIn(x,y))) -> ReceivesCitizenshipAtBirth(x)))", "all x.((BirthInIsrael(x) & BornToIsraeliParent(x)) -> ReceivesCitizenshipAtBirth(x))", "all x.((BirthInIsrael(x) & exists y.(IsraeliParent(y) & BornIn(x,y)))) -> ReceivesCitizenshipAtBirth(x))"]}
{"id": "folio_train_2073", "nl": "David Ha'ivri emigrated to the United States from Israel, where he was born to Israeli parents. ", "fol": "exists x.(EmigratedToCountry(Davidhaivri,America) & BornInIsrael(Davidhaivri) & HasParent(Davidhaivri,x) & IsIsraeliParent(x))", "prediction": ["all x y.((DavidHaivri(x) & Israel(y)) -> EmigratedToUnitedStates(x,y))", "all x y.((DavidHa'ivri(x) & Israel(y)) -> EmigratedToUnitedStates(x,y))", "all x y.((DavidHaivri(x) & Israel(y)) -> EmigratedTo(x,y))", "all x y.((DavidHaivri(x) & UnitedStates(y)) -> (EmigratedFromIsrael(x,y) & BornToIsraeliParents(x,y)))", "all x y z.((DavidHaivri(x) & Israel(y) & UnitedStates(z)) -> EmigratedFrom(x,y,z))", "all x y z.((DavidHaivri(x) & UnitedStates(y) & Israel(z)) -> EmigratedFrom(x,y,z))", "all x y z.((DavidHaivri(x) & UnitedStates(y) & Israel(z) & BornTo(x,y,z)) -> EmigratedFrom(x,y,z))", "all x y.((DavidHaivri(x) & UnitedStates(y)) -> EmigratedFromIsraelTo(x,y))", "all x y z.((DavidHaivri(x) & UnitedStates(y) & Israel(z)) -> EmigratedFrom(x,z))", "all x y z.((DavidHaivri(x) & UnitedStates(y) & Israel(z) & BornTo(x,z)) -> EmigratedFrom(x,y,z))", "all x y z.((DavidHa'ivri(x) & Israel(y) & UnitedStates(z)) -> EmigratedFrom(x,y,z))", "all x y z.((DavidHaivri(x) & Israel(y) & UnitedStates(z)) -> EmigratedTo(x,y,z))", "all x y z.((DavidHa'ivri(x) & UnitedStates(y) & Israel(z)) -> EmigratedFrom(x,y,z))", "all x y z.((DavidHa'ivri(x) & UnitedStates(y) & Israel(z) & BornTo(x,y,z)) -> EmigratedFrom(x,y,z))", "all x y.((DavidHaivri(x) & Israel(y) & BornTo(x,y)) -> EmigratedTo(x,y))", "all x y z.((DavidHaivri(x) & Israel(y) & UnitedStates(z)) -> (EmigratedFrom(x,y) & BornTo(x,z)))"]}
{"id": "folio_train_2074", "nl": "Several Zionist leaders have been elected to the Shomron Regional Municipal council. ", "fol": "exists x.(IsZionistLeader(x) & ElectedToCouncil(x,ShomronMunicipalCouncil))", "prediction": ["all x y.((ZionistLeader(x) & ShomronRegionalMountain(y)) -> ElectedTo(x,y))", "exists x y.(ZionistLeader(x) & ShomronRegionalMountain(y) & ElectedTo(x,y))", "all x y.((ZionistLeader(x) & ShomronRegionalMountain(y)) -> ElectedTo(x,y))", "exists x.(ZionistLeader(x) & ElectedToShomronRegionalMountain(x))", "all x y.((ZionistLeader(x) & ShomronRegionalMuncio(y)) -> ElectedTo(x,y))", "exists x y.(ZionistLeader(x) & ShomronRegionalMunicipal(y) & ElectedTo(x,y))", "all x y.((ZionistLeader(x) & ShomronRegionalMunicipal(y)) -> ElectedTo(x,y))", "all x y.((ZionistLeader(x) & ShomronRegionalConsult(y)) -> ElectedTo(x,y))", "all x y.((ZionistLeader(x) & ShomronRegionalMunicipalChair(y)) -> ElectedTo(x,y))", "exists x y.(ZionistLeader(x) & ShomronRegionalMuncio(y) & ElectedTo(x,y))", "all x y.((ZionistLeader(x) & ShomronRegionalMuncio(y)) -> ElectedTo(x,y))", "exists x.(ZionistLeader(x) & ElectedToShomronRegionalMountain(x))", "all x y.((ZionistLeader(x) & ShomronRegionalCommunity(y)) -> ElectedTo(x,y))", "all x y.((ZionistLeader(x) & ShomronRegionalMountain(y)) -> EligibleTo(x,y))", "all x y.((ZionistLeader(x) & ShomronRegionalMountain(y)) -> Elected(x,y))", "all x y.((ZionistLeader(x) & ShomronRegionalMunicipalCity(y)) -> ElectedTo(x,y))"]}
{"id": "folio_train_2075", "nl": "David Ha'ivri is a Zionist leader. ", "fol": "ZionstLeader(Davidhaivri)", "prediction": ["all x.(ZionistLeader(x) -> DavidHa'ivri(x))", "all x.(ZionistLeader(x) -> DavidHaivri(x))", "all x.(ZionistLeader(x) -> DavidHa'ivri(x))", "all x.(ZionistLeader(x) -> DavidHaivri(x))", "all x.((Zionist(x) & DavidHaivri(x)) -> Leader(x))", "all x.((ZionistLeader(x) & DavidHaivri(x)) -> Leader(x))", "all x.(ZionistLider(x) -> DavidHa'ivri(x))", "all x.(Zionist(x) -> DavidHa'ivri(x))", "all x.((ZionistLeader(x) & DavidHaivri(x)) -> Leads(x,y))", "all x.((Zionist(x) & DavidHa'ivri(x)) -> Leader(x))", "all x.(ZionistLider(x) -> DavidHaivri(x))", "David Ha'ivri is a Zionist leader.", "all x.((ZionistLeader(x) & DavidHa'ivri(x)) -> Leader(x))", "all x.(Zionist(x) -> DavidHaivri(x))", "all x.((ZionistLeader(x) & DavidHa'ivri(x)) -> Leads(x,y))", "all x.((ZionistLeader(x) & DavidHaivri(x)) -> Leads(x,z))"]}
{"id": "folio_train_2076", "nl": "David Ha'ivri is an Israeli citizen.", "fol": "IsIsraeliCitizen(Davidhaivri)", "prediction": ["David Ha'ivri is IsraeliCitizen(d)", "David Ha'ivri (IsraeliCitizen)", "all x.(IsraeliCitizen(x) -> DavidHa'ivri(x))", "David Ha'ivri is IsraeliCitizen(x)", "all x.(IsraeliCitizen(x) -> DavidHaivri(x))", "all x.((DavidHaivri(x) & IsraeliCitizen(x)) -> DavidHaivri(x))", "all x.((DavidHaivri(x) & IsraeliCitizen(x)) -> Citizen(x))", "all x.((DavidHaivri(x) & IsraeliCitizen(x)) -> -IsraeliCitizen(x))", "David Ha'ivri is an IsraeliCitizen.", "(IsraeliCitizen(DavidHa'ivri)", "David Ha'ivri is an IsraeliCitizen(d)", "David Ha'ivri is an IsraeliCitizen(x)", "all x.((DavidHaivri(x) & IsraeliCitizen(x)) -> LivesInIsrael(x))", "(IsraeliCitizen(DavidHaivri)", "all x.((DavidHaivri(x) & IsraeliCitizen(x)) -> BornInIsrael(x))", "all x.((DavidHaivri(x) & IsraeliCitizen(x)) -> Citizens(x))"]}
{"id": "folio_train_2077", "nl": "David Ha'ivri is a United States citizen.", "fol": "UnitedStatesCitizen(Davidhaivri)", "prediction": ["all x.((DavidHaivri(x) & UnitedStatesCitizen(x)) -> Citizen(x))", "all x.((DavidHa'ivri(x) & UnitedStatesCitizen(x)) -> Citizen(x))", "all x.((DavidHaivri(x) & UnitedStatesCitizen(x)) -> UnitedStatesCitizen(x))", "all x.(HasIvri(x) -> UnitedStatesCitizen(x))", "all x.((DavidHaivri(x) & UnitedStatesCitizen(x)) -> Citizens(x))", "(UnitedStatesCitizen(DavidHaivri)", "(UnitedStatesCitizen(DavidHa'ivri)", "all x.((DavidHaivri(x) & UnitedStatesCitizen(x)) -> LivesIn(x,y))", "(Citizen(DavidHaivri) & UnitedStatesCitizen(DavidHaivri))", "(Citizen(DavidHa'ivri) & UnitedStatesCitizen(DavidHa'ivri))", "all x.((DavidHa'ivri(x) & UnitedStatesCitizen(x)) -> LivesIn(x,y))", "all x.((DavidHa'ivri(x) & UnitedStatesCitizen(x)) -> Citizens(x))", "(Citizen(DavidHa'ivri) & UnitedStatesCitizen(DavidHaivri))", "all x.((DavidHaivri(x) & UnitedStatesCitizen(x)) -> Is(x,y))", "all x.((DavidHaivri(x) & UnitedStatesCitizen(x)) -> IsCitizen(x))", "David Ha'ivri is a United States Citizen(x)"]}
{"id": "folio_train_2078", "nl": "David Ha'ivri has been elected to the Shomron Regional Municipal council.", "fol": "ElectedToCouncil(Davidhaivri,ShomronMunicipalCouncil)", "prediction": ["all x y.((DavidHaivri(x) & ShomronRegionalMountain(y)) -> ElectedTo(x,y))", "all x y.((DavidHaivri(x) & ShomronRegionalMountain(y)) -> ElectedTo(x,y))", "David Ha'ivri has been elected to Shomron RegionalMunicipal Council.", "all x y.((DavidHaivri(x) & ShomronRegionalMunicipalChair(y)) -> ElectedTo(x,y))", "David Ha'ivri has been elected to Shomron Regional Municipal Council.", "all x y.((DavidHaivri(x) & ShomronRegionalMunicipalChair(y)) -> ElectedTo(x,y))", "all x y.((DavidHaivri(x) & ShomronRegionalMunicipal(y)) -> ElectedTo(x,y))", "all x y.((DavidHaivri(x) & ShomronRegionalMuncil(y)) -> ElectedTo(x,y))", "David Ha'ivri has been elected to the Shomron Regional Municipal Council.", "all x y.((DavidHaivri(x) & ShomronRegionalMunicipal(y)) -> ElectedTo(x,y))", "all x y.((DavidHaivri(x) & ShomronRegionalMuncil(y)) -> ElectedTo(x,y))", "all x y.((DavidHaivri(x) & ShomronRegionalMountain(y)) -> Election(x,y))", "David Ha'ivri has been elected to Shomron RegionalMunicipalChair(d))", "all x.((DavidHa'ivri(x) & ShomronRegionalMountain(x)) -> ElectedTo(x,y))", "David Ha'ivri has been elected to Shomron RegionalMuncil.", "all x.((DavidHaivri(x) & ShomronRegionalMountain(x)) -> ElectedTo(x,y))"]}
{"id": "folio_train_2079", "nl": "Mary has the flu.", "fol": "HasDisease(Mary,FluDisease)", "prediction": ["all x.(Mary(x) -> HasFlu(x))", "all x.((Mary(x) & HasFlu(x)) -> HasFlu(x))", "all x.(MariaHasFlu(x) -> HasFlu(x))", "(HasFlu(Mary))", "(HasFlu(Mary) & HasFlu(Mary))", "all x.((Mary(x) & Flu(x)) -> Has(x,Mary))", "all x.(HasFlu(x) -> MaryHasFlu(x))", "exists x.(Mary(x) & HasFlu(x))", "all x.(Maria(x) -> HasFlu(x))", "all x.((Mary(x) & Flu(y)) -> Has(x,y))", "(HasFlu(Mary) & -HasFlu(Mary))", "all x.(MariaHasFlu(x) -> HasHasFlu(x))", "all x.((Mary(x) & HasFlu(x)) -> HasFluid(x))", "all x.((Mary(x) & Flu(x)) -> Has(x,y))", "all x.((Mary(x) & Flu(x)) -> Has(x,Maria))", "all x.(MariaHasFlu(x) -> HasFluid(x))"]}
{"id": "folio_train_2080", "nl": "Flu and influenza are the same disease.", "fol": "all x.(HasDisease(x,FluDisease) <-> HasDisease(x,InfluenzaDisease))", "prediction": ["all x.((Flu(x) & Influenza(x)) -> SameDisease(x))", "all x y.((Flu(x) & Influenza(y)) -> SameDisease(x,y))", "(SameDisease(flu,influenza) & SameDisease(flu,influenza))", "all x y.((Flu(x) & Influenza(y)) -> SameDisease(x))", "all x y.((Flu(x) & Influenza(y)) -> TheSameDisease(x,y))", "all x.((Flu(x) & Influenza(x)) -> TheSameDisease(x))", "all x y z.((Flu(x) & Influenza(y) & Disease(z)) -> Same(x,y,z))", "all x y.((Flu(x) & Influenza(y)) -> Disease(x,y))", "all x.((Flu(x) & Influenza(x)) -> IdenticalDisease(x))", "all x.(Flu(x) & Influenza(x)) -> SameDisease(x))", "all x y.((Flu(x) & Influenza(y)) -> Disease(x,y))", "all x y.((Flu(x) & Influenza(y)) -> SameDisease(x,y))", "all x.((Flu(x) | Influenza(x)) -> SameDisease(x))", "((Flu(f) & Influenza(f)) -> SameDisease(f))", "all x y z.((Flu(x) & Influenza(y) & Disease(z)) -> SameDisease(x,y,z))", "(SameDisease(flu,x) & SameDisease(influenza,x))"]}
{"id": "folio_train_2081", "nl": "Susan doesn't have influenza.", "fol": "-HasDisease(Susan,InfluenzaDisease)", "prediction": ["all x.((Susan(x) & -HasInfluenza(x)) -> -HasInfluenza(x))", "(-HasInfluenza(Susan))", "all x.(Susan(x) -> -HasInfluenza(x))", "exists x.(Susan(x) & -HasInfluenza(x))", "all x.((Susan(x) & -HasIllness(x)) -> -HasIllness(x))", "all x.((Susan(x) & -Influenza(x)) -> -Influenza(x))", "-HasInfluenza(Susan)", "all x.((Susan(x) & -HasInfluenza(x)) -> NotHasInfluenza(x))", "all x.((Susan(x) & -HasInfluenza(x)) -> -HasIllness(x))", "all x.((Susan(x) & -Influenza(x)) -> -HasInfluenza(x))", "All x.(Susan(x) -> -HasInfluenza(x))", "all x.((Susan(x) & -Influenza(x)) -> -Has(x,Susan))", "Susan -HasInfluenza(Susan)", "all x.((Susan(x) & -HasInfluenza(x)) -> Doesn'tHaveInfluenza(x))", "all x.((Susan(x) & -HasIllness(x)) -> -HasInfluenza(x))", "all x.((Susan(x) & -Influenza(x)) -> -Has(x,Influenza))"]}
{"id": "folio_train_2082", "nl": "Either Mary or Susan has influenza.", "fol": "(HasDisease(Mary,InfluenzaDisease) | HasDisease(Susan,InfluenzaDisease))", "prediction": ["(HasInfluenza(Mary) | HasInfluenza(Susan))", "(HasInfluenza(Mary) | HasInfluenza(Mary)))", "all x.((Mary(x) | Susan(x)) -> HasInfluenza(x))", "(HasInfluenza(Maria) | HasInfluenza(Susan))", "(exists x.(Mary(x) | Susan(x)) & HasInfluenza(x))", "((Mary(Mary) | Susan(Mary))) -> HasInfluenza(Mary))", "(exists x.(Maria(x) | Susan(x)) & HasInfluenza(x))", "(HasInfluenza(Mary,Maria) | HasInfluenza(Susan))", "(HasIllness(Mary) | HasIllness(Susan))", "((Mary(Mary) | Susan(Mary))) -> HasInfluenza(Mary,Susan))", "exists x.(Maria(x) | Susan(x)) & HasInfluenza(x))", "(HasInfluenza(Mary,Mary) | HasInfluenza(Mary,Susan))", "(HasInfluenza(Mary) | HasInfluenza(Mary))", "((Mary(Mary) | Susan(Mary))) -> HasInfluenza(Mary,Influenza))", "(HasInfluenza(Mary,Maria) | HasInfluenza(Susan,Susan))", "(HasInfluenza(Mary,Maria) | HasInfluenza(Susan,Maria))"]}
{"id": "folio_train_2083", "nl": "James Cocks was a British lawyer.", "fol": "(IsBritish(James) & IsLawyer(James))", "prediction": ["all x.((JamesCocks(x) & BritishLawyer(x)) -> JamesCocks(x))", "all x.(JamesCocks(x) -> BritishLawyer(x))", "all x.((JimmyCocks(x) & BritishLawyer(x)) -> JamesCocks(x))", "all x.((BritishLawyer(x) & JamesCocks(x)) -> BritishLawyer(x))", "all x.((JamesCocks(x) & BritishLawyer(x)) -> BritishLawyer(x))", "all x.(JimmyCocks(x) -> BritishLawyer(x))", "all x.((JamesCocks(x) & BritishLawyer(x)) -> Cocks(x))", "James Cocks (BritishLawyer)", "all x.((JamesCocks(x) & BritishLawyer(x)) -> British(x))", "all x.((JamesCocks(x) & BritishLawyer(x)) -> Was(x,y))", "all x.((JamesCocks(x) & BritishLawyer(x)) -> BritishCocks(x))", "all x.((JamesCocks(x) & BritishLawyer(x)) -> Lawyer(x))", "all x.((BritishLawyer(x) & JamesCocks(x)) -> British(x))", "all x.((JimmyCocks(x) & BritishLawyer(x)) -> BritishCocks(x))", "all x.((JimmyCocks(x) & BritishLawyer(x)) -> Cocks(x))", "all x.((JimmyCocks(x) & BritishLawyer(x)) -> Was(x,y))"]}
{"id": "folio_train_2084", "nl": "James Cocks was a Whig politician who sat in the House of Commons.", "fol": "(IsWhig(James) & IsPolitician(James) & SitsInHouseOfCommons(James))", "prediction": ["all x.((WhigPolitician(x) & SitsInHouseOfCommons(x)) -> JamesCocks(x))", "all x.((WhigPolitician(x) & Whig(x)) -> SitsInHouseOfCommons(x))", "all x y.((WhigPolitician(x) & Whig(y) & SitsInHouseOfCommons(x,y)) -> JamesCocks(x))", "all x y.((WhigPolitician(x) & Whig(y) & SitsInHouseOfCommons(x)) -> JamesCocks(x))", "all x.((WhigPolitician(x) & SittingInHouseOfCommons(x)) -> JamesCocks(x))", "all x y.((WhigPolitician(x) & Whig(y)) -> SitsInHouseOfCommons(x,y))", "all x.((WhiskeyPolitician(x) & SitsInHouseOfCommons(x)) -> JamesCocks(x))", "all x.((WhiskyPolitician(x) & SitsInHouseOfCommons(x)) -> JamesCocks(x))", "all x.((WhiskyPolitician(x) & Whig(x)) -> SitsInHouseOfCommons(x))", "all x.(WhigPolitician(x) & SitsInHouseOfCommons(x)) -> JamesCocks(x))", "all x.((WhiskeyPolitician(x) & Whig(x)) -> SitsInHouseOfCommons(x))", "(WhigPolitician(JimmyCocks) & SitsInHouseOfCommons(JimmyCocks))", "all x y.((WhigPolitician(x) & Whig(y) & SitsInCommons(x,y)) -> JamesCocks(x))", "all x.((WhigPolitician(x) & Whig(x)) -> SittingInHouseOfCommons(x))", "all x y.((WhigPolitician(x) & Whig(y)) -> SittingInHouseOfCommons(x,y))", "all x y.((WhigPolitician(x) & Whig(y) & SitsInHouseOfCommons(x,y)) -> Cocks(x))"]}
{"id": "folio_train_2085", "nl": "A British is a European.", "fol": "all x.(IsBritish(x) -> IsEuropean(x))", "prediction": ["all x.(British(x) -> European(x))", "all x.((British(x) & European(x)) -> British(x))", "all x.(British(x) -> European(x))", "all x.(British(x) -> Europ\u00e4er(x))", "all x y.((British(x) & European(y)) -> British(x))", "all x y.((British(x) & European(y)) -> Is(x,y))", "all x.((British(x) & European(x)) -> -British(x))", "all x.((British(x) & European(x)) -> Is(x,y))", "exists x.(British(x) & European(x))", "all x.(British(x) -> European(x))", "all x y.((British(x) & European(y)) -> -British(x))", "all x.(Britain(x) -> European(x))", "all x.((British(x) & European(x)) -> American(x))", "all x.(British(x) -> (European(x) & British(x)))", "all x y.((British(x) & European(y)) -> American(x))", "all x y.((British(x) & European(y)) -> LocatedIn(x,y))"]}
{"id": "folio_train_2086", "nl": "Any lawyer is familiar with laws.", "fol": "all x.(IsLawyer(x) -> IsFamiliarWithLaws(x))", "prediction": ["all x.(Lawyer(x) -> FamiliarWithLaws(x))", "all x.(Lawyer(x) -> FamousWithLaws(x))", "all x.(Lawyer(x) -> FamilyWithLaws(x))", "all x y.((Lawyer(x) & Law(y)) -> FamiliarWith(x,y))", "all x.(Lawyer(x) -> KnowledgeableWithLaws(x))", "all x.(Lawyer(x) -> FamiliarWithLaws(x))", "all x.(Legal(x) -> FamiliarWithLaws(x))", "all x.(Litigator(x) -> FamiliarWithLaws(x))", "all x y.((Lawyer(x) & Law(y)) -> Familiar(x,y))", "all x.(Litigation(x) -> FamiliarWithLaws(x))", "all x.(Legalist(x) -> FamiliarWithLaws(x))", "all x.(Lawyer(x) -> (FamiliarWithLaws(x)))", "all x.(Lawyer(x) -> FamiliarWithLaws(x))", "exists x.(Lawyer(x) & FamiliarWithLaws(x))", "all x.(Lawyer(x) -> KnownWithLaws(x))", "all x y.((Lawyer(x) & Law(y)) -> Knowledgeable(x,y))"]}
{"id": "folio_train_2087", "nl": "Some Whigs speak French.", "fol": "exists x.(IsWhig(x) & CanSpeakFrench(x))", "prediction": ["exists x.(Whisg(x) & SpeaksFrench(x))", "exists x.(Whist(x) & SpeaksFrench(x))", "exists x.(Whig(x) & SpeaksFrench(x))", "exists x.(Whisg(x) & SpeakFrench(x))", "exists x.(Whig(x) & SpeakFrench(x))", "exists x.(Whist(x) & SpeakFrench(x))", "exists x.(Wig(x) & SpeaksFrench(x))", "exists x.(Whaga(x) & SpeaksFrench(x))", "exists x.(Wig(x) & SpeakFrench(x))", "exists x.(Whisg(x) & Speak(x,French))", "exists x.(Whig(x) & Speak(x,French))", "exists x.(Whisg(x) & Whig(x) & SpeakFrench(x))", "exists x.(Whaga(x) & SpeakFrench(x))", "exists x.(Whisg(x) & Whig(x) & SpeaksFrench(x))", "exists x.(Whist(x) & Speak(x,French))", "exists x.(Whg(x) & SpeaksFrench(x))"]}
{"id": "folio_train_2088", "nl": "No lawyer ever sat in the House of Commons.", "fol": "-exists x.(IsLawyer(x) & SitsInHouseOfCommons(x))", "prediction": ["-exists x.(Lawyer(x) & SitsInHouseOfCommons(x))", "-exists x.(Lawyer(x) & SatInHouseOfCommons(x))", "-exists x.(Lawyer(x) & SittingInHouseOfCommons(x))", "-exists x.(Lawyer(x) & SitsInHouseOfCommunities(x))", "-exists x.(Lawyer(x) & SitsInCommons(x))", "-exists x y.(Lawyer(x) & HouseOfCommons(y) & SitsIn(x,y))", "-exists x.(Legalist(x) & SitsInHouseOfCommons(x))", "-exists x.(Lawyer(x) & HouseOfCommons(x))", "-exists x.(Lawyer(x) & HasSatInHouseOfCommons(x))", "-exists x.(Lawyer(x) & SitsIn(x,Commons))", "-exists x.(Lawyer(x) & SitsInCommons(x))", "-exists x.(Lawyer(x) & SeatedInHouseOfCommons(x))", "-exists x.(Legalist(x) & SatInHouseOfCommons(x))", "-exists x.(Lawyer(x) & SatInHouseOfCommunities(x))", "all x.(Lawyer(x) -> -SatInHouseOfCommons(x))", "-exists x.(Lawyer(x) & SatInCommons(x))"]}
{"id": "folio_train_2089", "nl": "Some European is familiar with laws.", "fol": "exists x.(IsEuropean(x) & IsFamiliarWithLaws(x))", "prediction": ["exists x.(European(x) & FamiliarWithLaws(x))", "exists x.(European(x) & FamilyWithLaws(x))", "exists x.(European(x) & FamiliarWithLaws(x))", "exists x.(European(x) & FamousWithLaws(x))", "exists x.(European(x) & KnownWithLaws(x))", "exists x.(European(x) & ConfusedWithLaws(x))", "exists x.(European(x) & FeasibleWithLaws(x))", "exists x.(Eastern(x) & FamiliarWithLaws(x))", "exists x.(European(x) & FamishedWithLaws(x))", "exists x.(European(x) & LikesLaws(x))", "exists x.(European(x) & KnowsLaws(x))", "exists x.(European(x) & Family(x))", "exists x.(European(x) & KnowledgeOfLaws(x))", "exists x.(European(x) & FamousWithLaws(x))", "exists x.(European(x) & HasLaws(x))", "exists x.(European(x) & Familiar(x))"]}
{"id": "folio_train_2090", "nl": "James Cocks speaks French.", "fol": "CanSpeakFrench(James)", "prediction": ["all x.((JamesCocks(x) & French(x)) -> Speaks(x,y))", "all x.((JamesCocks(x) & SpeaksFrench(x)) -> SpeaksFrench(x))", "all x.(JamesCocks(x) -> SpeaksFrench(x))", "all x.((JamesCocks(x) & French(y)) -> Speaks(x,y))", "all x y.((JamesCocks(x) & French(y)) -> Speaks(x,y))", "all x.((JamesCocks(x) & French(x)) -> Speaks(x))", "all x.((JimmyCocks(x) & French(x)) -> Speaks(x,y))", "All x.((JamesCocks(x) & French(x)) -> Speaks(x,y))", "All x.(JamesCocks(x) -> SpeaksFrench(x))", "all x.((JamesCocks(x) & SpeakingFrench(x)) -> SpeaksFrench(x))", "All x.((JamesCocks(x) & French(y)) -> Speaks(x,y))", "(SpeaksFrench(JamesCocks) & -SpeaksFrench(JamesCocks))", "all x.((JimmyCocks(x) & French(y)) -> Speaks(x,y))", "(SpeaksFrench(JamesCocks) -> SpeaksFrench(JamesCocks))", "all x.(Cocks(x) -> SpeaksFrench(x))", "(SpeaksFrench(JamesCocks) | SpeaksFrench(JamesCocks)))"]}
{"id": "folio_train_2091", "nl": "Beasts of Prey is either a fantasy novel or a science fiction novel.", "fol": "((IsNovel(Beastsofprey) & IsFantasyNovel(Beastsofprey)) | IsScienceFictionNovel(Beastsofprey))", "prediction": ["all x.(BeastsOfPrey(x) -> (FantasyNovel(x) | ScienceFictionNovel(x)))", "all x.(BeastsOfPrey(x) -> (FictionNovel(x) | ScienceFictionNovel(x)))", "(FantasyNovel(BeastsOfPrey) | ScienceFictionNovel(BeastsOfPrey))", "all x.(BeastsOfPrey(x) -> (FantasyNovel(x) | ScienceFictionNovel(x)))", "all x.(BeastsOfPrey(x) -> ((FantasyNovel(x) | ScienceFictionNovel(x))))", "all x.(BeatsOfPrey(x) -> (FantasyNovel(x) | ScienceFictionNovel(x)))", "exists x.(BeastsOfPrey(x) & (FantasyNovel(x) | ScienceFictionNovel(x)))", "all x.((BeastsOfPrey(x) & FantasyNovel(x)) | ScienceFictionNovel(x))", "all x y.((BeastsOfPrey(x) & FantasyNovel(y)) | ScienceFictionNovel(y)) -> (FantasyNovel(x) | ScienceFictionNovel(x)))", "all x y.((BeastsOfPrey(x) & FantasyNovel(y)) | ScienceFictionNovel(y))", "all x.(BetweenBeastsOfPrey(x) -> (FantasyNovel(x) | ScienceFictionNovel(x)))", "All x.(BeastsOfPrey(x) -> (FantasyNovel(x) | ScienceFictionNovel(x)))", "exists x.(BeastsOfPrey(x) & FantasyNovel(x) & ScienceFictionNovel(x))", "all x y.((BeastsOfPrey(x) & FantasyNovel(y)) | ScienceFictionNovel(x))", "all x y.((BeastsOfPrey(x) & FantasyNovel(y)) | ScienceFictionNovel(y)) -> (FantasyNovel(x) | ScienceFictionNovel(y)))", "all x.(BeastsOfPrey(x) -> (FantasyNovel(x) | ScienceFantasyNovel(x)))"]}
{"id": "folio_train_2092", "nl": "Science fiction novels are not about mythological creatures", "fol": "all x y.((IsScienceFictionNovel(x) & IsMythological(y) & IsCreature(y)) -> -IsAbout(x,y))", "prediction": ["all x.((ScienceFictionNovel(x) & -MythologicalCreatures(x)) -> -MythologicalCreatures(x))", "all x.((ScienceFictionNovel(x) & -MythologicalCreature(x)) -> -MythologicalCreature(x))", "all x.(ScienceFictionNovel(x) -> -MythologicalCreatures(x))", "all x y.((ScienceFictionNovel(x) & MythologicalCreature(y)) -> -MythologicalCreature(x,y))", "all x y.((ScienceFictionNovel(x) & MythologicalCreature(y)) -> -(MythologicalCreature(x,y) & -MythologicalCreature(x,y)))", "all x y z.((ScienceFictionNovel(x) & MythologicalCreature(y) & MythologicalCreature(z)) -> -MythologicalCreature(x,y,z))", "all x.(ScienceFictionNovel(x) -> (-MythologicalCreatures(x) & -MythologicalCreatures(x)))", "all x y z.((ScienceFictionNovel(x) & MythologicalCreature(y) & MythologicalCreature(z)) -> -About(x,y,z))", "all x.(ScientificFictionNovel(x) -> -MythologicalCreatures(x))", "all x y.((ScienceFictionNovel(x) & MythologicalCreature(y)) -> -(MythologicalCreature(x) & -MythologicalCreature(x)))", "all x y z.((ScienceFictionNovel(x) & MythologicalCreature(y) & MythologicalCreature(z)) -> -IsAbout(x,y,z))", "all x.(ScienceFictionNovel(x) -> (-MythologicalCreatures(x) & -MythologicalCreatures(x) & -MythologicalCreatures(x)))", "all x y.((ScienceFictionNovel(x) & MythologicalCreature(y)) -> -(MythologicalCreature(x,y) & -MythologicalCreature(y)))", "all x y.((ScienceFictionNovel(x) & MythologicalCreature(y)) -> -About(x,y))", "all x y.((ScienceFictionNovel(x) & MythologicalCreature(y)) -> -IsAbout(x,y))", "all x y.((ScienceFictionNovel(x) & MythologicalCreature(y)) -> -(MythologicalCreature(x) & -MythologicalCreature(x,y)))"]}
{"id": "folio_train_2093", "nl": "Beasts of Prey Is about a creature known as the Shetani.", "fol": "(IsAbout(Beastsofprey,Shetani) & IsCreature(Shetani))", "prediction": ["all x.(BeastsOfPrey(x) -> (Creature(x) & Shetani(x)))", "all x.(BeastsOfPrey(x) -> (CreatureKnownAsShetani(x)))", "all x.(BeastsOfPrey(x) -> (Cream(x) & Shetani(x)))", "all x y z.((BeastsOfPrey(x) & Creature(y) & Shetani(z)) -> About(x,y,z))", "all x y.((BeastsOfPrey(x) & Creature(y) & Shetani(y)) -> About(x,y))", "all x y.((BeastsOfPrey(x) & Creature(y)) -> Shetani(y))", "all x y.((BeastsOfPrey(x) & Creature(y)) -> Shetani(x))", "all x.(BeastsOfPrey(x) -> (CreamKnownAsShetani(x)))", "all x.(BeastsOfPrey(x) -> exists y.(Creature(y) & Shetani(y)))", "all x.(BeastsOfPrey(x) -> (Creature(x) & Shetani(x)))", "all x y.((BeastsOfPrey(x) & Creature(y)) -> (Shetani(y)))", "all x.((BeastsOfPrey(x) & Creature(x)) -> Shetani(x))", "all x.(BeastsOfPrey(x) -> (Cream(x) & Shetani(x)))", "all x.(BeastsOfPrey(x) -> AboutCreature(x))", "all x.(BeastsOfPrey(x) -> (CreatureKnownAsShetani(x)))", "all x.(BeastsOfPrey(x) -> AboutCreatureKnownAsShetani(x))"]}
{"id": "folio_train_2094", "nl": "Shetanis are mythological.", "fol": "IsMythological(Shetani)", "prediction": ["all x.(Shetani(x) -> Mythological(x))", "All x.(Shetani(x) -> Mythological(x))", "all x y.((Shetani(x) & Mythological(y)) -> Mythological(x))", "all x.(Shetani(x) -> Mythological(x))", "all x.(Shettin(x) -> Mythological(x))", "all x.(Shetan(x) -> Mythological(x))", "all x.(Shetani(x) -> Mythological(x))", "all x y.((Shetani(x) & Mythological(y)) -> Mythological(x,y))", "all x.(Shitani(x) -> Mythological(x))", "all x.(Shetani(x) -> Mythological(x))", "all x y.((Shetani(x) & Mythological(y)) -> Is(x,y))", "exists x.(Shetani(x) & Mythological(x))", "all x.(Shetani(x) -> (Mythological(x) | Mythological(x)))", "all x.(Shetani(x) -> (Mythological(x) & -Mythological(x)))", "(all x.(Shetani(x) -> Mythological(x)))", "all x y.((Shetani(x) & Mythological(y)) -> Mythical(x))"]}
{"id": "folio_train_2095", "nl": "Beasts of prey is a fantasy novel.", "fol": "IsFantasyNovel(Beastsofprey)", "prediction": ["all x.(BeastsOfPrey(x) -> FantasyNovel(x))", "(FantasyNovel(BeastsOfPrey) & FantasyNovel(BeastsOfPrey))", "all x.(BeastsOfPrey(x) -> FantasyNovel(x))", "all x.((BeastsOfPrey(x) & FantasyNovel(x)) -> FantasyNovel(x))", "exists x.(BeastsOfPrey(x) & FantasyNovel(x))", "all x y.((BeastsOfPrey(x) & FantasyNovel(y)) -> FantasyNovel(x))", "all x y.((Beast(x) & Prey(y)) -> FantasyNovel(x))", "(FantasyNovel(BeastsOfPrey) -> FantasyNovel(BeastsOfPrey))", "all x.((BeastsOfPrey(x) & FantasyNovel(x)) -> Fantasy(x))", "All x.(BeastsOfPrey(x) -> FantasyNovel(x))", "all x y.((BeastsOfPrey(x) & FantasyNovel(y)) -> Fantasy(x))", "all x y.((BeastsOfPrey(x) & FantasyNovel(y)) -> FantasyNovel(y))", "all x y.((BeastsOfPrey(x) & FantasyNovel(y)) -> FantasyNovel(x,y))", "(FantasyNovel(BeastsOfPrey) & Fantasy(BeastsOfPrey))", "(FantasyNovel(BeastsOfPrey) -> FantasyNovel(BeastsOfPrey))", "all x.(BeatsOfPrey(x) -> FantasyNovel(x))"]}
{"id": "folio_train_2096", "nl": "Beasts of prey isn't a science fiction novel.", "fol": "-IsScienceFictionNovel(Beastsofprey)", "prediction": ["all x.(BeastsOfPrey(x) -> -ScienceFictionNovel(x))", "all x.(BeastsOfPrey(x) -> -ScientificFictionNovel(x))", "all x.((BeastsOfPrey(x) & -ScienceFictionNovel(x)) -> -ScienceFictionNovel(x))", "all x.((BeastsOfPrey(x) & -ScienceFictionNovel(x)) -> -ScientificFictionNovel(x))", "all x.((BeastsOfPrey(x) & -ScientificFictionNovel(x)) -> -ScientificFictionNovel(x))", "all x.((BeastsOfPrey(x) & -ScientificFictionNovel(x)) -> -ScienceFictionNovel(x))", "all x y.((BeastsOfPrey(x) & ScienceFictionNovel(y)) -> -ScientificFictionNovel(x))", "all x y.((BeastsOfPrey(x) & ScienceFictionNovel(y)) -> -ScienceFictionNovel(x))", "exists x.(BeastsOfPrey(x) & -ScienceFictionNovel(x))", "all x.(BeastsOfPrey(x) -> -ScienceFictionNovel(x))", "all x.(BeatsOfPrey(x) -> -ScienceFictionNovel(x))", "(ScientificFictionNovel(BeastsOfPrey) & -ScienceFictionNovel(BeastsOfPrey))", "all x.((BeastsOfPrey(x)) -> -ScienceFictionNovel(x))", "exists x.(BeastsOfPrey(x) & -ScientificFictionNovel(x))", "all x.(BeastsOfPrey(x) -> -(ScienceFictionNovel(x) & ScienceFictionNovel(x)))", "-(BeastsOfPrey(x) & ScienceFictionNovel(x))"]}
{"id": "folio_train_2097", "nl": "A shetani is either mythological or a creature, but not both.", "fol": "((IsMythological(Shetani) & -IsCreature(Shetani)) | (-IsMythological(Shetani) & IsCreature(Shetani)))", "prediction": ["all x.(Shetani(x) -> ((Mythological(x) | Creature(x)) & -(Mythological(x) & Creature(x)))))", "all x.(Shetani(x) -> ((Mythological(x) | Creature(x)) & -(Mythological(x) & Creature(x))))", "all x.(Shetani(x) -> ((Mythological(x) | Creature(x))) & -(Mythological(x) & Creature(x))))", "all x.(Shetani(x) -> ((Mythological(x) | Creature(x)) & -(Mythological(x) | Creature(x)))))", "all x.(Shetani(x) -> ((Mythological(x) & -Creature(x)) | (-Mythological(x) & Creature(x)))))", "all x.(Shetani(x) -> ((Mythological(x) | Creature(x)) & -(Mythological(x) & Creature(x)))))", "all x.(Shetani(x) -> ((Mythological(x) | Creature(x)) & -Mythological(x) & Creature(x))))", "all x.(Shetani(x) -> ((Mythological(x) & -Creature(x)) | (-Mythological(x) & Creature(x)))))", "exists x.(Shetani(x) & ((Mythological(x) & -Creature(x)) | (-Mythological(x) & Creature(x)))))", "all x.(Shetani(x) -> ((Mythological(x) | Creature(x)) & -Mythological(x)) & -Creature(x)))", "all x.(Shetani(x) -> ((Mythological(x) | Creature(x)) | (-Mythological(x) & Creature(x)))))", "all x.(Shetani(x) -> ((Mythological(x) & -Cream(x)) | (-Mythological(x) & Creature(x)))))", "all x.(Shetani(x) -> ((Mythological(x) & -Cream(x)) | (Cream(x) & -Mythological(x)))))", "exists x.(Shetani(x) & ((Mythological(x) & -Cream(x)) | (-Mythological(x) & Creature(x)))))", "all x.(Shetani(x) -> ((Mythological(x) | Creature(x)) & -(Mythological(x) & Creature(x)))))", "all x.(Shetani(x) -> ((Mythological(x) | Creature(x)) & -Mythological(x)) & -Creature(x)))"]}
{"id": "folio_train_2098", "nl": "Odell is an English surname originating in Odell, Bedfordshire.", "fol": "all x.(HasSurnameOdell(x) -> IsSurname(x))", "prediction": ["all x.(Odell(x) -> (EnglishSurname(x) & OriginatedIn(x,Odell,Belfastshire)))", "all x.(Odell(x) -> (EnglishSurname(x) & OriginatedInOdell(x) & Bedfordshire(x)))", "Odell (EnglandSurname(England) & OriginatedInOdell(England) & Bedfordshire(England))", "all x.(Odell(x) -> (EnglishSurname(x) & OriginatesIn(x,Odell,Belfastshire)))", "(EnglishSurname(Odell) & OriginatedIn(Odell,Belfastshire))", "all x.(Odell(x) -> (EnglishSurname(x) & OriginatedIn(x,Odell) & Bedfordshire(x)))", "all x.(Odell(x) -> (EnglishSurname(x) & OriginatedIn(x,Odell,Belfastshire)))", "all x.(Odell(x) -> (EnglishSurname(x) & OriginatedInOdell(x) & Bedfordshire(x)))", "all x.(Odell(x) -> (EnglishSurname(x) & OriginatesInOdell(x) & Bedfordshire(x)))", "all x.(Odell(x) -> (EnglishSurname(x) & OriginatedIn(x,Odell,Bedfordshire)))", "Odell (EnglandSurname(en) & OriginatedInOdell(en) & Bedfordshire(en))", "(EnglandSurname(Odell) & OriginatedIn(Odell,Belfastshire))", "all x.(Odell(x) -> (EnglishSurname(x) & OriginatesIn(x,Odell) & Bedfordshire(x)))", "Odell (EnglandSurname(en) & OriginatedIn(en) & Odell(en) & Bedfordshire(en))", "all x.(Odell(x) -> (EnglishSurname(x) & OriginatedIn(x,Odell) & Bedfordshire(x)))", "Odell (EnglishSurname(x) & OriginatedInOdell(x) & Bedfordshire(x))"]}
{"id": "folio_train_2099", "nl": "In some families Odell is spelled O'Dell, in a mistaken Irish adaptation.", "fol": "exists x.(HasSurnameOdell(x) & IsSpelledODell(x))", "prediction": ["exists x.(Family(x) & SpelledO'Dell(x) & MistakenIrishAdaptation(x))", "all x.((Family(x) & Odell(x)) -> SpelledO'Dell(x))", "all x.((Family(x) & SpelledO'Dell(x)) -> MistakenIrishAdaptation(x))", "all x.((Family(x) & Odell(x)) -> (SpelledO'Dell(x) & MistakenIrishAdaptation(x)))", "all x y.((Family(x) & Odell(y)) -> (SpelledO'Dell(y) & MistakenIrishAdaptation(x,y)))", "(exists x.(Family(x) & SpelledO'Dell(x)) & MistakenIrishAdaptation(x))", "all x y.((Family(x) & Odell(y)) -> SpelledO'Dell(x,y))", "exists x.(Family(x) & Odell(x) & SpelledO'Dell(x) & MistakenIrishAdaptation(x))", "all x y z.((Family(x) & Odell(y) & IrishAdaptation(z)) -> SpelledO'Dell(y,z))", "all x y.((Family(x) & Odell(y)) -> (SpelledO'Dell(y) & MistakenIrishAdaptation(x)))", "exists x.(Family(x) & SpelledOdell(x) & MistakenIrishAdaptation(x))", "all x y.((Family(x) & Odell(y)) -> (SpelledO'Dell(y,x) & MistakenIrishAdaptation(x)))", "all x y.((Family(x) & Odell(y)) -> (SpelledO'Dell(x,y) & MistakenIrishAdaptation(x,y)))", "exists x.(Family(x) & SpokenO'Dell(x) & MistakenIrishAdaptation(x))", "all x y.((Family(x) & Odell(y)) -> (SpelledO'Dell(y) | MistakenIrishAdaptation(y)))", "all x y.((Family(x) & Odell(y)) -> (SpelledO'Dell(y) & MistakenIrishAdaptation(y)))"]}
{"id": "folio_train_2100", "nl": "Notable people with the surname include Amy Odell, Jack Odell, and Mats Odell.", "fol": "(HasSurnameOdell(AmyOdell) & IsNotablePerson(AmyOdell) & HasSurnameOdell(JackOdell) & IsNotablePerson(JackOdell) & HasSurnameOdell(MatsOdell) & IsNotablePerson(MatsOdell))", "prediction": ["all x.((Person(x) & HasSurname(x)) -> (AmyOdell(x) | JackOdell(x) | MatsOdell(x)))", "(NotablePeopleWithSurname(AmyOdell) & NotablePeopleWithSurname(AmyOdell)) & NotablePeopleWithSurname(AmyOdell) & NotablePeopleWithSurname(AmyOdell) & NotablePeopleWithSurname(AmyOdell) & NotablePeopleWithSurname(AmyOdell))", "(NotablePeopleWithSurname(AmyOdell) & NotablePeopleWithSurname(AmyOdell)) & NotablePeopleWithSurname(AmyOdell) & NotablePeopleWithSurname(AmyOdell) & NotablePeopleWithSurname(AmyOdell) & NotablePeopleWithSurname(AmyOdell) & NotablePeopleWithSurname(AmyOdell))", "(NotablePeopleWithSurname(AmyOdell) & NotablePeopleWithSurname(AmyOdell) & NotablePeopleWithSurname(AmyOdell) & NotablePeopleWithSurname(AmyOdell) & NotablePeopleWithSurname(AmyOdell) & NotablePeopleWithSurname(AmyOdell))", "all x.((Person(x) & AmyOdell(x) & JackOdell(x) & MatsOdell(x)) -> Notable(x))", "(NotablePeopleWithSurname(AmyOdell) & NotablePeopleWithSurname(AmyOdell)) & NotablePeopleWithSurname(AmyOdell) & NotablePeopleWithSurname(AmyOdell) & NotablePeopleWithSurname(AmyOdell))", "(NotablePeopleWithSurname(AmyOdell) & NotablePeopleWithSurname(AmyOdell) & NotablePeopleWithSurname(AmyOdell) & NotablePeopleWithSurname(AmyOdell) & NotablePeopleWithSurname(AmyOdell))", "all x.((Person(x) & Surname(x)) -> (AmyOdell(x) | JackOdell(x) | MatsOdell(x)))", "(NotablePeopleWithSurname(AmyOdell) & NotablePeopleWithSurname(JackOdell) & NotablePeopleWithSurname(MatsOdell))", "(NotablePeopleWithSurname(AmyOdell) & NotablePeopleWithSurname(JackOdell) & NotablePeopleWithSurname(MatsOdell))", "(NotablePeopleWithSurname(AmyOdell) & NotablePeopleWithSurname(AmyOdell) & NotablePeopleWithSurname(AmyOdell) & NotablePeopleWithSurname(AmyOdell) & NotablePeopleWithSurname(AmyOdell) & NotablePeopleWithSurname(AmyOdell) & NotablePeopleWithSurname(AmyOdell))", "(NotablePeopleWithSurname(AmyOdell) & NotablePeopleWithSurname(AmyOdell) & NotablePeopleWithSurname(AmyOdell)) & NotablePeopleWithSurname(AmyOdell) & NotablePeopleWithSurname(AmyOdell) & NotablePeopleWithSurname(AmyOdell))", "(NotablePeopleWithSurname(AmyOdell) & NotablePeopleWithSurname(AmyOdell) & NotablePeopleWithSurname(AmyOdell)) & NotablePeopleWithSurname(AmyOdell) & NotablePeopleWithSurname(AmyOdell) & NotablePeopleWithSurname(AmyOdell) & NotablePeopleWithSurname(AmyOdell))", "(NotablePeopleWithSurname(AmyOdell) | NotablePeopleWithSurname(JackOdell) | NotablePeopleWithSurname(MatsOdell))", "(NotablePeopleWithSurname(AmyOdell) | NotablePeopleWithSurname(AmyOdell)) & NotablePeopleWithSurname(AmyOdell) & NotablePeopleWithSurname(AmyOdell) & NotablePeopleWithSurname(AmyOdell))", "all x.((Person(x) & AmyOdell(x) & JackOdell(x) & MatsOdell(x)) -> NotableWithSurname(x))"]}
{"id": "folio_train_2101", "nl": "Amy Odell is a British singer-songwriter.", "fol": "(IsBritish(AmyOdell) & IsSinger(AmyOdell) & IsSongWriter(AmyOdell))", "prediction": ["all x.((Singer(x) & Songwriter(x)) -> AmyOdell(x))", "all x.((Singer(x) & Songwriter(x) & British(x)) -> AmyOdell(x))", "all x.((AmyOdell(x) & BritishSinger(x)) -> Songwriter(x))", "all x.((AmyOdell(x) & BritishSinger(x)) -> Songwriter(x))", "(SingerSongwriter(AmyOdell) & British(AmyOdell))", "all x.((AmyOdell(x) & Singer(x) & Songwriter(x)) -> British(x))", "all x.(AmyOdell(x) -> (SingerSongwriter(x) & British(x)))", "all x.((AmyOdell(x) & Briton(x)) -> SingerSongwriter(x))", "all x.(AmyOdell(x) -> (SingerSongwriter(x) & British(x)))", "all x.((AmyOdell(x) & BritishSingerSongwriter(x)) -> SingerSongwriter(x))", "all x.((AmyOdell(x) & SingerSongwriter(x)) -> British(x))", "all x.((AmyOdell(x) & BritishSinger(x)) -> BritishSongwriter(x))", "all x.((AmyOdell(x) & BritishSinger(x)) -> SingerSongwriter(x))", "(SingerSongwriter(AmyOdell) & British(Odell))", "all x.((AmyOdell(x) & BritishSingerSongwriter(x)) -> BritishSingerSongwriter(x))", "all x.((AmyOdell(x) & BritishSingerSongwriter(x)) -> BritishSinger(x))"]}
{"id": "folio_train_2102", "nl": "Jack Odell is an English toy inventor.", "fol": "(IsEnglish(JackOdell) & IsToyInventor(JackOdell))", "prediction": ["(Inventor(JackOdell) & ToyInventor(Jack))", "All x.((ToyInventor(x) & JackOdell(x)) -> Invents(x,y))", "All x.((ToyInventor(x) & JackOdell(x)) -> Invents(x,y))", "(Inventor(JackOdell) & ToyInventor(JackOdell))", "All x.((ToyInventor(x) & JackOdell(x)) -> ToyInventor(x))", "All x.((ToyInventor(x) & JackOdell(x)) -> ToyInventor(x))", "(Inventor(JackOdell) & ToyInventor(JackOdell))", "(Inventor(JackOdell) & ToyInventor(Jack))", "(Inventor(JackOdell) & ToyInventor(JackOdell))", "All x.((ToyInventor(x) & JackOdell(x)) -> Invents(x))", "All x.((ToyInventor(x) & JackOdell(x)) -> Invents(x))", "All x.((ToyInventor(x) & JackOdell(x)) -> InventsToys(x))", "All x.((ToyInventor(x) & JackOdell(x)) -> InventsToys(x))", "(Inventor(JackOdell) & Toy(Jack))", "All x.((ToyInventor(x) & JackOdell(x)) -> Invents(x,Toys))", "All x.((ToyInventor(x) & JackOdell(x)) -> ToyInventor(x))"]}
{"id": "folio_train_2103", "nl": "Jack Odell is a notable people.", "fol": "IsNotablePerson(JackOdell)", "prediction": ["all x.((JackOdell(x) & FamousPeople(x)) -> NotablePeople(x))", "all x.(JackOdell(x) -> NotablePeople(x))", "all x.((Person(x) & JackOdell(x)) -> Notable(x))", "all x.((JackOdell(x) & People(x)) -> Notable(x))", "all x.((JackOdell(x) & FamousPeople(x)) -> Notable(x))", "all x.((JackOdell(x) & NotablePeople(x)) -> NotablePeople(x))", "all x.((JackOdell(x) & NotablePeople(x)) -> Famous(x))", "all x.((JackOdell(x) & FamousPeople(x)) -> FamousPeople(x))", "all x.((JackOdell(x) & NotablePeople(x)) -> JackOdell(x))", "all x.((JackOdell(x) & FamousPeople(x)) -> Remarkable(x))", "all x.((Person(x) & JackOdell(x)) -> NotablePeople(x))", "all x.((JackOdell(x) & FamousPerson(x)) -> NotablePerson(x))", "all x.((JackOdell(x) & Person(x)) -> Notable(x))", "all x y.((JackOdell(x) & Person(y)) -> Notable(x,y))", "all x.((Odell(x) & Jack(x)) -> NotablePeople(x))", "exists x.(JackOdell(x) & NotablePeople(x))"]}
{"id": "folio_train_2104", "nl": "Odell is Amy Odell's surname.", "fol": "HasSurnameOdell(AmyOdell)", "prediction": ["All x.(Odell(x) -> AmyOdell(x))", "All x.(Odell(x) -> AmyOdellSurname(x))", "(AmyOdell(Odell) & Surname(Odell))", "all x.(Odell(x) -> AmyOdellSurname(x))", "all x.(Odell(x) -> AmyOdell(x))", "(Surname(Odell) & AmyOdell(Odell))", "(AmyOdell(Odell) -> Surname(Odell))", "Odell is AmyOdellsSurname(x))", "All x.(Odell(x) -> Surname(x,AmyOdell))", "Odell is AmyOdellsSurname(x)", "all x.(Odell(x) -> Surname(x,AmyOdell))", "all x.(Odell(x) -> AmyOdellsurname(x))", "Odell (AmyOdellSurname))", "all x.(Odell(x) -> AmyOdellsSurname(x))", "All x.(Odell(x) -> AmyOdellsurname(x))", "Odell is AmyOdellsSurname(Odell)"]}
{"id": "folio_train_2105", "nl": "Amy Odell is an English toy inventor.", "fol": "(IsEnglish(AmyOdell) & ToyInventor(AmyOdell))", "prediction": ["all x.((ToyInventor(x) & AmyOdell(x)) -> Invents(x,y))", "All x.((ToyInventor(x) & AmyOdell(x)) -> Invents(x,y))", "all x.((ToyInventor(x) & AmyOdell(x)) -> Invents(x,y))", "(Inventor(AmyOdell) & ToyInventor(AmyOdell))", "all x.((ToyInventor(x) & AmyOdell(x)) -> ToyInventor(x))", "(Inventor(AmyOdell) & Toy(AmyOdell))", "all x.((ToyInventor(x) & AmyOdell(x)) -> ToyInventor(x))", "All x.((ToyInventor(x) & AmyOdell(x)) -> ToyInventor(x))", "all x.((ToyInventor(x) & AmyOdell(x)) -> InventsToys(x))", "all x.((ToyInventor(x) & AmyOdell(x)) -> Invents(x))", "All x.((ToyInventor(x) & AmyOdell(x)) -> InventsToys(x))", "(Inventor(AmyOdell) & ToyInventor(AmyOdell))", "all x.((ToyInventor(x) & AmyOdell(x)) -> InventsToys(x))", "All x.((ToyInventor(x) & AmyOdell(x)) -> Invents(x))", "all x.((ToyInventor(x) & AmyOdell(x)) -> Invents(x,Toys))", "all x.((ToyInventor(x) & AmyOdell(x)) -> Invents(x,y))"]}
{"id": "folio_train_2106", "nl": "Amy Odell is also Amy O'dell.", "fol": "(HasSurnameOdell(AmyOdell) & IsSpelledODell(Amyodel))", "prediction": ["all x.((AmyOdell(x) & AmyOdell(x)) -> AmyOdell(x))", "all x.((AmyOdell(x) & AmyOdell(x)) -> AmyOdell(x))", "all x.((AmyOdell(x) & AmyOdell(x)) -> AmyOdell(x))", "all x.(AmyOdell(x) -> AmyOdell(x))", "all x.(AmyOdell(x) -> AmyOdell(x))", "all x.(AmyOdell(x) -> AmyO'dell(x))", "all x.((AmyOdell(x) & AmyOdell(x)) -> AmyOdell(x))", "(AmyOdell(Amy) & AmyOdell(Amy))", "all x.((AmyOdell(x) & AmyOdell(x)) -> AmyOdell(x))", "(AmyOdell(Amy) & AmyOdell(Amy))", "all x.((AmyOdell(x) & AmyO'dell(x)) -> AmyOdell(x))", "all x.((AmyOdell(x) & AmyOdell(x)) -> AmyO'dell(x))", "all x.((AmyOdell(x) & AmyOdell(x)) -> AmyO'dell(x))", "all x.(AmyOdell(x) -> AmyOdell(x))", "all x.((AmyOdell(x) & AmyOdell(x)) -> AmyO'dell(x))", "all x.((AmyOdell(x) & AmyO'dell(x)) -> AmyOdell(x))"]}
{"id": "folio_train_2107", "nl": "If you go somewhere by train, you will not lose time.", "fol": "all x.(TravelByTrain(x) -> -TimeLost(x))", "prediction": ["all x.(Train(x) -> -LosesTime(x))", "all x.(Train(x) -> -LoseTime(x))", "all x.((Train(x) & Goes(x)) -> -LosesTime(x))", "all x.(GoesByTrain(x) -> -LosesTime(x))", "all x.((GoesByTrain(x) & -LosesTime(x)) -> -LosesTime(x))", "all x.((Train(x) & GoesBy(x)) -> -LosesTime(x))", "all x.((Train(x) & GoesSomewhere(x)) -> -LosesTime(x))", "all x.((Train(x) & Go(x)) -> -LosesTime(x))", "all x.((Train(x) & GoesTo(x)) -> -LosesTime(x))", "all x.((Train(x) & GoesBetween(x)) -> -LosesTime(x))", "all x.((Train(x) & GoesAround(x)) -> -LosesTime(x))", "all x.((Train(x) & GoesAway(x)) -> -LosesTime(x))", "all x y.((Train(x) & Place(y)) -> -LosesTime(x,y))", "all x.((GoesByTrain(x) & -LoseTime(x)) -> -LoseTime(x))", "all x.((Train(x) & Go(x)) -> -LoseTime(x))", "all x.(GoesByTrain(x) -> -LoseTime(x))"]}
{"id": "folio_train_2108", "nl": "If you go somewhere by car and meet traffic jam, you will lose time.", "fol": "all x.((TravelByCar(x) & EncounterTrafficJam(x)) -> TimeLost(x))", "prediction": ["all x.((GoesByCar(x) & MeetsTrafficJam(x)) -> LosesTime(x))", "all x.((Goes(x) & Car(x) & MeetsTrafficJam(x)) -> LosesTime(x))", "all x.((Car(x) & GoesSomewhere(x) & MeetsTrafficJam(x)) -> LosesTime(x))", "all x.((GoesSomewhereByCar(x) & MeetsTrafficJam(x)) -> LosesTime(x))", "all x.((GoesWithCar(x) & MeetsTrafficJam(x)) -> LosesTime(x))", "all x.((Car(x) & Goes(x) & MeetsTrafficJam(x)) -> LosesTime(x))", "all x.((Car(x) & GoesAround(x) & MeetsTrafficJam(x)) -> LosesTime(x))", "all x.((CarGoes(x) & MeetsTrafficJam(x)) -> LosesTime(x))", "all x.((Car(x) & GoesTo(x) & MeetsTrafficJam(x)) -> LosesTime(x))", "all x.((Car(x) & Go(x) & MeetsTrafficJam(x)) -> LosesTime(x))", "all x.((Goes(x) & MeetsTrafficJam(x)) -> LosesTime(x))", "all x.((HasCar(x) & MeetsTrafficJam(x)) -> LosesTime(x))", "all x.((GoesByCar(x) & MeetsTrafficJam(x)) -> LoseTime(x))", "all x.((GoesAround(x) & MeetsTrafficJam(x)) -> LosesTime(x))", "all x.((Car(x) & Go(x) & MeetTrafficJam(x)) -> LosesTime(x))", "all x.((GoesByCar(x) & MeetsTrafficJam(x)) -> LostTime(x))"]}
{"id": "folio_train_2109", "nl": "If you lose time, you will be late for work.", "fol": "all x.(TimeLost(x) <-> IsLateForWork(x))", "prediction": ["all x.(LosesTime(x) -> LateForWork(x))", "all x.(LoseTime(x) -> LateForWork(x))", "all x.((LosesTime(x) & LateForWork(x)) -> LateForWork(x))", "all x.((LoseTime(x) & LateForWork(x)) -> LateForWork(x))", "all x.((LossTime(x) & LateForWork(x)) -> LateForWork(x))", "all x.(LossTime(x) -> LateForWork(x))", "all x y.((LoseTime(x) & Work(y)) -> LateFor(x,y))", "all x.((TimeLoss(x) & LateForWork(x)) -> LateForWork(x))", "all x.((LosingTime(x) & LateForWork(x)) -> LateForWork(x))", "all x.(LosingTime(x) -> LateForWork(x))", "all x.((LosesTime(x) & LateForWork(x)) -> LosesTime(x))", "all x y.((LoseTime(x) & Work(y)) -> Late(x,y))", "all x.((LosesTime(x) & LateForWork(x)) -> LostTime(x))", "all x.((LosesTime(x) & LateForWork(x)) -> Late(x))", "all x.((LoseTime(x) & LateForWork(x)) -> Late(x))", "all x.((LosesTime(x) & LateForWork(x)) -> -LateForWork(x))"]}
{"id": "folio_train_2110", "nl": "Mary can get from New Haven to New York City either by train or car.", "fol": "((TravelByTrain(Mary) & -TravelByCar(Mary)) | (-TravelByTrain(Mary) & TravelByCar(Mary)))", "prediction": ["all x y z.((Mary(x) & NewHunt(y) & NewYorkCity(z)) -> (Train(x,y) | Car(x,z)))", "all x y.((Mary(x) & NewHunt(y) & NewYorkCity(y)) -> (Train(x,y) | Car(x,y)))", "all x y.((NewHaven(x) & NewYorkCity(y)) -> (Train(x,y) | Car(x,y)))", "all x y.((Mary(x) & NewHunt(y)) -> (Train(x,y) | Car(x,y)))", "all x.((Mary(x) & NewHunt(x)) -> (Train(x) | Car(x)))", "all x y z.((Mary(x) & NewHunt(y) & NewYorkCity(z)) -> (Train(x) | Car(x)))", "all x y.((Mary(x) & NewHaven(y)) -> (Train(x,y) | Car(x,y)))", "all x y.((Mother(x) & NewHunt(y)) -> (Train(x,y) | Car(x,y)))", "all x.((Mary(x) & New Haven(x)) -> (Train(x) | Car(x)))", "all x.((Mary(x) & NewHaven(x)) -> (Train(x) | Car(x)))", "all x y z.((Mary(x) & NewHunt(y) & NewYork(z)) -> (Train(x,y) | Car(x,z)))", "all x.((Mary(x) & New Haven(x) & NewYorkCity(y)) -> (Train(x) | Car(x)))", "all x y.((Maria(x) & NewHunt(y)) -> (Train(x,y) | Car(x,y)))", "all x y.((Mama(x) & NewHunt(y)) -> (Train(x,y) | Car(x,y)))", "all x y.((NewHaven(x) & NewYorkCity(y)) -> (Train(x) | Car(x)))", "all x.((Mary(x) & New Haven(x) & NewYork(y)) -> (Train(x) | Car(x)))"]}
{"id": "folio_train_2111", "nl": "Mary is late for work.", "fol": "IsLateForWork(Mary)", "prediction": ["all x.((Mary(x) & LateForWork(x)) -> LateForWork(x))", "all x.(Mary(x) -> LateForWork(x))", "exists x.(Mary(x) & LateForWork(x))", "all x.(Maria(x) -> LateForWork(x))", "All x.(Mary(x) -> LateForWork(x))", "(LastForWork(Mary) -> LateForWork(Mary))", "all x.((Mary(x) & LateForWork(x)) -> Late(x))", "(LastForWork(Mary))", "(LastForWork(Mary) -> LateForWork(Mary)))", "all x.(LastForWork(x) -> Mary(x))", "all x.((Mary(x) & LateForWork(x)) -> -LateForWork(x))", "(LateForWork(Mary))", "all x.((Mary(x) & LateForWork(x)) -> -LastForWork(x))", "(LastForWork(Mary) -> LateForWork(Mary))", "all x.((Mary(x) & Late(x)) -> LateForWork(x))", "all x.(LastForWork(x) -> Mary(x))"]}
{"id": "folio_train_2112", "nl": "Mary gets from New Haven to New York City by train.", "fol": "TravelByTrain(Mary)", "prediction": ["all x y z.((Mary(x) & NewHunt(y) & NewYorkCity(z)) -> GetsByTrain(x,y,z))", "all x y z.((Mary(x) & NewHaven(y) & NewYorkCity(z)) -> GetsByTrain(x,y,z))", "all x y.((Mary(x) & NewHunt(y) & NewYorkCity(y)) -> GetsByTrain(x,y))", "all x y.((Mother(x) & NewHunt(y) & NewYorkCity(y)) -> GetsByTrain(x,y))", "all x y z.((Mary(x) & NewHunt(y) & NewYork(z)) -> GetsByTrain(x,y,z))", "all x y z.((Mary(x) & NewHaven(y) & NewYork(z)) -> GetsByTrain(x,y,z))", "all x y.((Mary(x) & NewHaven(y) & NewYorkCity(y)) -> GetsByTrain(x,y))", "all x y.((Mother(x) & NewHaven(y) & NewYorkCity(y)) -> GetsByTrain(x,y))", "all x y.((Mary(x) & NewHunt(y) & NewYork(y)) -> GetsByTrain(x,y))", "all x y.((Mother(x) & NewHunt(y) & NewYork(y)) -> GetsByTrain(x,y))", "all x y z.((Mary(x) & NewHunt(y) & NewYorkCity(z)) -> Gets(x,y,z))", "all x y.((Mary(x) & NewHunt(y) & NewYorkCity(y)) -> Train(x,y))", "all x y.((Mary(x) & NewHunt(y) & NewYorkCity(y)) -> Gets(x,y))", "all x y.((Mary(x) & NewHaven(y) & NewYorkCity(y)) -> Train(x,y))", "all x y.((Mother(x) & NewHunt(y) & NewYorkCity(y)) -> Train(x,y))", "all x y z.((Mary(x) & NewHunt(y) & NewYorkCity(z)) -> (Train(x,y) | Train(x,z)))"]}
{"id": "folio_train_2113", "nl": "Mary gets from New Haven to New York City by car.", "fol": "TravelByCar(Mary)", "prediction": ["all x y z.((Mary(x) & NewHunt(y) & NewYorkCity(z)) -> GetsByCar(x,y,z))", "all x y z.((Mary(x) & NewHaven(y) & NewYorkCity(z)) -> GetsByCar(x,y,z))", "all x y.((Mary(x) & NewHunt(y) & NewYorkCity(y)) -> GetsByCar(x,y))", "all x y.((Mary(x) & NewHaven(y) & NewYorkCity(y)) -> GetsByCar(x,y))", "all x y z.((Mary(x) & NewHunt(y) & NewYork(z)) -> GetsByCar(x,y,z))", "all x y.((Mother(x) & NewHunt(y) & NewYorkCity(y)) -> GetsByCar(x,y))", "all x y z.((Mary(x) & NewHaven(y) & NewYork(z)) -> GetsByCar(x,y,z))", "all x y.((Mary(x) & NewHunt(y) & NewYork(y)) -> GetsByCar(x,y))", "all x y.((Mary(x) & NewHunt(y) & NewYorkCity(y)) -> Gets(x,y))", "all x y z.((Mary(x) & NewHunt(y) & NewYorkCity(z)) -> Gets(x,y,z))", "all x.((Mary(x) & NewHunt(x) & NewYorkCity(y)) -> GetsByCar(x,y))", "all x y z.((Mary(x) & NewHaven(y) & NewYorkCity(z)) -> Gets(x,y,z))", "all x.((Mary(x) & NewHaven(x) & NewYorkCity(y)) -> GetsByCar(x,y))", "all x y.((Mary(x) & NewHaven(y) & NewYork(y)) -> GetsByCar(x,y))", "all x y.((Mary(x) & NewHaven(y) & NewYorkCity(y)) -> Gets(x,y))", "all x.((Mary(x) & NewHunt(x)) -> NewYorkCity(x))"]}
{"id": "folio_train_2114", "nl": "Mary meets traffic jam.", "fol": "EncounterTrafficJam(Mary)", "prediction": ["exists x.(Mary(x) & MeetsTrafficJam(x))", "all x.(Mary(x) -> MeetsTrafficJam(x))", "all x y.((Mary(x) & TrafficJam(y)) -> Meets(x,y))", "all x.((Mary(x) & TrafficJam(y)) -> Meets(x,y))", "all x.((Mary(x) & TrafficJam(x)) -> Meets(x,Mary))", "exists x.(Mary(x) & TrafficJam(y) & Meets(x,y))", "all x.(Mother(x) -> MeetsTrafficJam(x))", "all x.((Mary(x) & TrafficJam(x)) -> Meets(x,y))", "exists x.(Mary(x) & TrafficJam(x))", "(MariaMeetsTrafficJam(Mary))", "all x y.((Mary(x) & TrafficJam(y)) -> Meet(x,y))", "(Mother(Mary) & MeetsTrafficJam(Mary))", "all x.((Mary(x) & TrafficJam(x)) -> Meets(x))", "all x.((Mary(x) & TrafficJam(x)) -> Meets(x,mary))", "(MovesTrafficJam(Mary) & Meets(Mary,TrafficJam))", "(MovesTrafficJam(Mary) & MeetsTrafficJam(Mary))"]}
{"id": "folio_train_2115", "nl": "If a person is hungry, the person is uncomfortable.", "fol": "all x.(IsHungry(x) -> IsUncomfortable(x))", "prediction": ["all x.(Hungry(x) -> Uncomfortable(x))", "all x.((Person(x) & Hungry(x)) -> Uncomfortable(x))", "all x.(Hunger(x) -> Uncomfortable(x))", "all x.((Hungry(x) & Person(x)) -> Uncomfortable(x))", "all x y.((Person(x) & Hungry(x)) -> Uncomfortable(x))", "all x.((Hungry(x) & PersonUncomfortable(x)) -> Hungry(x))", "all x.((Hunger(x) & Uncomfortable(x)) -> Hungry(x))", "all x.((Person(x) & Hungering(x)) -> Uncomfortable(x))", "all x y.((Person(x) & Hungry(x)) -> Uncomfortable(y))", "all x.((Hungry(x) & Uncomfortable(x)) -> Hungry(x))", "all x y.((Person(x) & Hungry(x) & Person(y)) -> Uncomfortable(y))", "all x.((Hunger(x) & Person(x)) -> Uncomfortable(x))", "all x.((Person(x) & Hungerful(x)) -> Uncomfortable(x))", "all x y.((Person(x) & Hungry(x)) -> Uncomfortable(x,y))", "all x.((Hungry(x)) -> Uncomfortable(x))", "all x.((Hungry(x) & Uncomfortable(x)) -> Person(x))"]}
{"id": "folio_train_2116", "nl": "If a person is uncomfortable, the person is unhappy.", "fol": "all x.(IsUncomfortable(x) -> -IsHappy(x))", "prediction": ["all x.(Uncomfortable(x) -> Unhappy(x))", "all x.((Person(x) & Uncomfortable(x)) -> Unhappy(x))", "all x.((Person(x) & Uncomfortable(x)) -> Unsatisfied(x))", "all x.(Uncomfortable(x) -> Unsatisfied(x))", "all x y.((Person(x) & Uncomfortable(x)) -> Unhappy(x))", "all x y.((Person(x) & Uncomfortable(x)) -> Unhappy(y))", "all x y.((Person(x) & Uncomfortable(x) & Person(y)) -> Unhappy(y))", "all x.(Incomfortable(x) -> Unhappy(x))", "all x.(UncomfortablePerson(x) -> UnhappyPerson(x))", "all x y.((Person(x) & Uncomfortable(x)) -> Unsatisfied(x))", "all x y.((Person(x) & Uncomfortable(x) & Person(y)) -> Unsatisfied(y))", "all x y.((Person(x) & Uncomfortable(x)) -> Unsatisfied(y))", "all x.(UncomfortablePerson(x) -> Unhappy(x))", "all x.((Person(x) & Uncomfortable(x)) -> Unhappen(x))", "all x.((Person(x) & Uncomfortable(x)) -> Unhappier(x))", "all x.((Uncomfortable(x) & Person(x)) -> Unhappy(x))"]}
{"id": "folio_train_2117", "nl": "If a person is not hungry, the person is unhappy.", "fol": "all x.(-IsHungry(x) -> -IsHappy(x))", "prediction": ["all x.((Person(x) & -Hungry(x)) -> Unhappy(x))", "all x.((Person(x) & -Hungry(x)) -> Unsatisfied(x))", "all x.((Hungry(x) & -Hungry(x)) -> Unhappy(x))", "all x.((Person(x) & NotHungry(x)) -> Unhappy(x))", "all x.((Person(x) & -Hunger(x)) -> Unhappy(x))", "all x.(Hungry(x) -> Unhappy(x))", "all x y.((Person(x) & -Hungry(x)) -> Unhappy(x))", "all x.(-Hungry(x) -> Unhappy(x))", "all x y.((Person(x) & Person(y) & -Hungry(x)) -> Unhappy(y))", "all x y.((Person(x) & -Hungry(x)) -> Unhappy(y))", "all x.((Hunger(x) & -Hungry(x)) -> Unhappy(x))", "all x.((People(x) & -Hungry(x)) -> Unhappy(x))", "all x.((Hungry(x) & -Hungry(x)) -> Unsatisfied(x))", "all x.(((Person(x) & -Hungry(x)) -> Unhappy(x))", "all x.((Person(x) & -Hunger(x)) -> Unsatisfied(x))", "all x.((Person(x) & -Hungry(x)) -> -Unhappy(x))"]}
{"id": "folio_train_2118", "nl": "Tipped employees do not get a guaranteed minimum wage.", "fol": "all x.(IsTippedEmployee(x) -> -ReceivesMinWage(x))", "prediction": ["all x.(TippedEmployee(x) -> -GuaranteedMinimumWage(x))", "all x.(TippedEmployee(x) -> -GaranteedMinimumWage(x))", "all x.(TippedEmployee(x) -> -GetsGaranteedMinimumWage(x))", "all x.(TippedEmployee(x) -> -GanitedMinimumWage(x))", "all x.(TippedEmployee(x) -> -GatheredMinimumWage(x))", "all x.(TippedEmployee(x) -> -GetsGuaranteedMinimumWage(x))", "all x.(TippedEmployee(x) -> -GrantedMinimumWage(x))", "all x.(TippedEmployee(x) -> -GetsGarantiedMinimumWage(x))", "all x.(TippedEmployee(x) -> -GarantiedMinimumWage(x))", "all x.(TippedEmployee(x) -> -HasGuaranteedMinimumWage(x))", "all x.(Tipped(x) -> -GuaranteedMinimumWage(x))", "all x.(TippedEmployee(x) -> -GiftsMinimumWage(x))", "all x y.((TippedEmployee(x) & Employee(y)) -> -GuaranteedMinimumWage(x,y))", "all x y.((TippedEmployee(x) & Employee(y)) -> -GetsGaranteedMinimumWage(x,y))", "all x y.((TippedEmployee(x) & Employee(y)) -> -GaranteedMinimumWage(x,y))", "all x y.((TippedEmployee(x) & Employee(y)) -> -GatheredMinimumWage(x,y))"]}
{"id": "folio_train_2119", "nl": "If a person is a white-collar worker, they will get a guaranteed minimum wage (All white-collar workers get a guaranteed minimum wage).", "fol": "all x.(IsWhiteCollarWorker(x) -> ReceivesMinWage(x))", "prediction": ["all x.(WhiteCollarWorker(x) -> GuaranteedMinimumWage(x))", "all x.((Person(x) & WhiteCollarWorker(x)) -> GuaranteedMinimumWage(x))", "all x.(WhiteCollarWorker(x) -> GetsGaranteedMinimumWage(x))", "all x.(WhiteCollarWorker(x) -> (GuaranteedMinimumWage(x) & AllWhiteCollarWorkersGetGuaranteedMinimumWage(x)))", "all x.(WhiteCollarWorker(x) -> (GetsGaranteedMinimumWage(x) & AllWhiteCollarWorkersGetGaranteedMinimumWage(x)))", "all x.(WhiteCollarWorker(x) -> (GuaranteedMinimumWage(x) & AllWhiteCollarWorkersGuaranteedMinimumWage(x)))", "all x.(WhiteCollarWorker(x) -> (GuaranteedMinimumWage(x) & GuaranteedMinimumWage(x)))", "all x.(WhiteCollarWorker(x) -> GetsGarantiedMinimumWage(x))", "all x.(WhiteCollarWorker(x) -> (GetsGarantiedMinimumWage(x) & AllWhiteCollarWorkersGetGarantiedMinimumWage(x)))", "all x.(WhiteCollarWorker(x) -> GuaranteedMinimumWare(x))", "all x.(WhiteCollarWorker(x) -> (GatheredMinimumWage(x) & AllWhiteCollarWorkersGatheredMinimumWage(x)))", "(all x.(WhiteCollarWorker(x) -> GuaranteedMinimumWage(x)))", "all x.(WhiteCollarWorker(x) -> (GuaranteedMinimumWage(x) | GuaranteedMinimumWage(x)))", "all x.(WhiteCollarWorker(x) -> GetsGarantionedMinimumWage(x))", "all x.(WhiteCollarWage(x) -> GuaranteedMinimumWage(x))", "all x.(WhiteCollarWorker(x) -> GetsGuaranteedMinimumWage(x))"]}
{"id": "folio_train_2120", "nl": "All lawyers are white-collar workers.", "fol": "all x.(IsLawyer(x) -> IsWhiteCollarWorker(x))", "prediction": ["all x.(Lawyer(x) -> WhiteCollarWorker(x))", "all x.(Legal(x) -> WhiteCollarWorker(x))", "all x.(Lawyer(x) -> WhiteCollarWorker(x))", "all x y.((Lawyer(x) & WhiteCollarWorker(y)) -> Worker(x,y))", "all x.(LegalAdviser(x) -> WhiteCollarWorker(x))", "all x.(Litigation(x) -> WhiteCollarWorker(x))", "all x.(Licensor(x) -> WhiteCollarWorker(x))", "all x y.((Lawyer(x) & WhiteCollarWorker(y)) -> WorksFor(x,y))", "all x y.((Lawyer(x) & WhiteCollarWorker(y)) -> WhiteCollarWorker(x))", "all x.(LegalAdvice(x) -> WhiteCollarWorker(x))", "all x y.((Lawyer(x) & WhiteCollarWorker(y)) -> Worker(x))", "all x y.((Lawyer(x) & WhiteCollarWorker(y)) -> WorkedWith(x,y))", "all x y.((Lawyer(x) & WhiteCollarWorker(y)) -> WorkedAt(x,y))", "all x y.((Lawyer(x) & WhiteCollarWorker(y)) -> WhiteCollarWorker(x,y))", "all x y.((Lawyer(x) & WhiteCollarWorker(y)) -> WorkedFor(x,y))", "(all x.(Lawyer(x) -> WhiteCollarWorker(x)))"]}
{"id": "folio_train_2121", "nl": "Every advocate is a lawyer.", "fol": "all x.(IsAdvocate(x) -> IsLawyer(x))", "prediction": ["all x.(Advocate(x) -> Lawyer(x))", "all x.(Advocate(x) -> Lawyer(x))", "all x.(Avocate(x) -> Lawyer(x))", "all x.(Advocate(x) -> Lawyer(x))", "all x.(Advice(x) -> Lawyer(x))", "all x.(Adviser(x) -> Lawyer(x))", "all x y.((Advocate(x) & Lawyer(y)) -> Is(x,y))", "all x.exists y.(Advocate(x) & Lawyer(y))", "all x y.((Advocate(x) & Lawyer(y)) -> HasAdvocate(x,y))", "all x y.((Advocate(x) & Lawyer(y)) -> Becomes(x,y))", "all x y.((Advocate(x) & Lawyer(y)) -> Has(x,y))", "all x.(Advocacy(x) -> Lawyer(x))", "all x.(Advocate(x) -> LegalAdviser(x))", "exists x.(Advocate(x) & Lawyer(x))", "exists x.(Advocate(x) & Lawyer(x))", "all x.(Avocat(x) -> Lawyer(x))"]}
{"id": "folio_train_2122", "nl": "Mary is not a lawyer or a tipped employee.", "fol": "((-IsLawyer(Mary) & -IsTippedEmployee(Mary)) | (IsLawyer(Mary) & IsTippedEmployee(Mary)))", "prediction": ["(-Lawyer(Mary) & -TippedEmployee(Mary))", "all x.(Mary(x) -> (-Lawyer(x) | TippedEmployee(x)))", "all x.(Mary(x) -> (-Lawyer(x) & -TippedEmployee(x)))", "-(Lawyer(Mary) | TippedEmployee(Mary)))", "all x.((Mary(x) & -Lawyer(x) & -TippedEmployee(x)) -> -TippedEmployee(x))", "all x.((Mary(x) & -Lawyer(x) & -TippedEmployee(x)) -> -Tipped(x))", "exists x.(Mary(x) & -(Lawyer(x) | TippedEmployee(x))))", "all x.(Mary(x) -> -(Lawyer(x) | TippedEmployee(x)))", "(-(Lawyer(Mary) | TippedEmployee(Mary)))", "exists x.(Mary(x) & -(Lawyer(x) | TippedEmployee(x)))", "(-(Lawyer(Mary) & -TippedEmployee(Mary)) | (-Lawyer(Mary) & TippedEmployee(Mary))))", "all x.(Mary(x) -> (-Lawyer(x) | -TippedEmployee(x)))", "(-(Lawyer(Mary) & -TippedEmployee(Mary)) | (-Lawyer(Mary) & -TippedEmployee(Mary))))", "all x.(Maria(x) -> (-Lawyer(x) | TippedEmployee(x)))", "all x.((Mary(x) & -Lawyer(x) & -TippedEmployee(x)) -> -Lawyer(x) & -TippedEmployee(x))", "all x.((Mary(x) & -Lawyer(x) & -TippedEmployee(x)) -> -(Lawyer(x) | TippedEmployee(x))))"]}
{"id": "folio_train_2123", "nl": "Mary is a white-collar worker.", "fol": "IsWhiteCollarWorker(Mary)", "prediction": ["all x.(WhiteCollarWorker(x) -> Mary(x))", "all x.((Mary(x) & WhiteCollarWorker(x)) -> Worker(x))", "all x.(Mary(x) -> WhiteCollarWorker(x))", "(WhiteCollarWorker(Mary) & WhiteCollarWorker(Mary))", "all x.(WhiteCollarWorker(x) -> Mary(x))", "exists x.(WhiteCollarWorker(x) & Mary(x))", "all x.(Maria(x) -> WhiteCollarWorker(x))", "all x.((Mary(x) & WhiteCollarWorker(x)) -> WorksIn(x,Mary))", "all x.(WoodenCollarWorker(x) -> Mary(x))", "(WhiteCollarWorker(Mary) & WorksIn(Mary,WhiteCollar))", "all x.((Mary(x) & WhiteCollarWorker(x)) -> WorksIn(x,y))", "(WhiteCollarWorker(Mary) & Worker(Mary))", "all x.((Mary(x) & WhiteCollarWorker(x)) -> WorksFor(x,Mary))", "all x.((Mary(x) & WhiteCollarWorker(x)) -> WorksOn(x,Mary))", "Mary is WhiteCollarWorker(Mary)", "all x.((Mary(x) & WhiteCollarWorker(x)) -> WhiteCollarWorker(x))"]}
{"id": "folio_train_2124", "nl": "Mary is an advocate.", "fol": "IsAdvocate(Mary)", "prediction": ["all x.(Advocate(x) -> Mary(x))", "exists x.(Advocate(x) & Mary(x))", "All x.(Advocate(x) -> Mary(x))", "(Advocate(Mary) & Advocate(Mary))", "(Avocate(Mary) & Advocate(Mary))", "all x.(Avocate(x) -> Mary(x))", "All x.(Avocate(x) -> Mary(x))", "exists x.(Avocate(x) & Mary(x))", "All x.(Mary(x) -> Advocate(x))", "all x.(Advocate(x) -> Mary(x))", "Mary is advocate.", "All x.(Advocate(x) -> Mary(x))", "(Avocat(Mary) & Advocate(Mary))", "all x.(Avocate(x) -> Mary(x))", "All x.(Avocate(x) -> Mary(x))", "(Advocate(Mary)"]}
{"id": "folio_train_2125", "nl": "Mary is not an advocate.", "fol": "-IsAdvocate(Mary)", "prediction": ["(-Advocate(Mary))", "-Advocate(Mary)", "all x.(Mary(x) -> -Advocate(x))", "All x.(Mary(x) -> -Advocate(x))", "Mary is notAdvocate(Mary)", "-Advocate(Maria)", "-(Advocate(Mary) & -Advocate(Mary))", "(-Advocate(Mary) & -Advocate(Mary))", "all x.(Mary(x) -> -Avocate(x))", "All x.(Mary(x) -> -Avocate(x))", "(-Advocate(Maria))", "(-Advocate(Maria) & -Advocate(Maria))", "Mary is notAdvocate(Maria)", "(-Advocate(Mary) -> -Advocate(Mary))", "All x.(Mary(x) -> -Adviser(x))", "all x.(Mary(x) -> -Adviser(x))"]}
{"id": "folio_train_2126", "nl": "Mary is either an advocate or a tipped employee.", "fol": "(IsAdvocate(Mary) | IsTippedEmployee(Mary))", "prediction": ["all x.(Mary(x) -> (Advocate(x) | TippedEmployee(x)))", "all x.(Maria(x) -> (Advocate(x) | TippedEmployee(x)))", "all x.(Mary(x) -> (Avocate(x) | TippedEmployee(x)))", "all x.(Advocate(x) | TippedEmployee(x))", "all x.((Mary(x) & Advocate(x)) | TippedEmployee(x))", "exists x.(Advocate(x) | TippedEmployee(x))", "all x.(Mary(x) -> (Advocate(x) | TippedEmployee(x)))", "all x.(Mary(x) -> (Advocate(x) | TapedEmployee(x)))", "(Advocate(Mary) | TippedEmployee(Mary))", "all x.(Mary(x) -> (Advocate(x) | TippedEmployee(x)))", "exists x.(Mary(x) & (Advocate(x) | TippedEmployee(x)))", "all x.(Mary(x) -> (Advocate(x) | TippedEmployee(x)))", "all x.(Maria(x) -> (Avocate(x) | TippedEmployee(x)))", "(Advocate(Mary) | TippedEmployee(Mary)))", "all x.(Mary(x) -> (Advocate(x) | TipEmployee(x)))", "all x.(Mary(x) -> (Advocate(x) | Tipped(x)))"]}
{"id": "folio_train_2127", "nl": "If Mary is not an advocate and gets a guaranteed minimum wage, she is not a tipped employee.", "fol": "((-IsAdvocate(Mary) & ReceivesMinWage(Mary)) -> -IsTippedEmployee(Mary))", "prediction": ["all x.((Mary(x) & -Advocate(x) & GuaranteedMinimumWage(x)) -> -TippedEmployee(x))", "all x.((Advocate(x) & -Advocate(x) & GuaranteedMinimumWage(x)) -> -TippedEmployee(x))", "all x.((Advocate(x) & GuaranteedMinimumWage(x)) -> -TippedEmployee(x))", "all x.((Mary(x) & -Advocate(x) & GuaranteedMinimumWage(x)) -> -TippedEmployee(x))", "all x.((Maria(x) & -Advocate(x) & GuaranteedMinimumWage(x)) -> -TippedEmployee(x))", "all x.((Advocate(x) & -Advocate(x) & GuaranteedMinimumWage(x)) -> -TippedEmployee(x))", "all x.((Mary(x) & -Adviser(x) & GuaranteedMinimumWage(x)) -> -TippedEmployee(x))", "all x.((Mary(x) & -Advocate(x) & GuaranteedMinimumWage(x)) -> -TippedEmployee(x))", "all x.((Advocate(x) & -Advocacy(x) & GuaranteedMinimumWage(x)) -> -TippedEmployee(x))", "all x.((Advocate(x) & -Adviser(x) & GuaranteedMinimumWage(x)) -> -TippedEmployee(x))", "all x.((Mary(x) & -Avocate(x) & GuaranteedMinimumWage(x)) -> -TippedEmployee(x))", "all x.((Advocate(x) & -Advice(x) & GuaranteedMinimumWage(x)) -> -TippedEmployee(x))", "all x.(((Advocate(x) & -Advocate(x) & GuaranteedMinimumWage(x)) -> -TippedEmployee(x))", "all x.((Avocate(x) & GuaranteedMinimumWage(x)) -> -TippedEmployee(x))", "all x.(((Advocate(x) & GuaranteedMinimumWage(x)) -> -TippedEmployee(x))", "all x.((Advocacy(x) & GuaranteedMinimumWage(x)) -> -TippedEmployee(x))"]}
{"id": "folio_train_2128", "nl": "If Mary is either an advocate or a tipped employee, she is an advocate.", "fol": "((IsAdvocate(Mary) | IsTippedEmployee(Mary)) -> IsAdvocate(Mary))", "prediction": ["all x.((Advocate(x) | TippedEmployee(x)) -> Advocate(x))", "all x.((Mary(x) & (Advocate(x) | TippedEmployee(x))) -> Advocate(x))", "all x.((Advocate(x) | TapedEmployee(x)) -> Advocate(x))", "all x.((Mary(x) & Advocate(x)) | TippedEmployee(x)) -> Advocate(x))", "all x.((Advocate(x) | TipEmployee(x)) -> Advocate(x))", "all x.((Advocate(x) | SpottedEmployee(x)) -> Advocate(x))", "all x.((Avocate(x) | TippedEmployee(x)) -> Advocate(x))", "all x.(Advocate(x) | TippedEmployee(x))", "all x.((Advocate(x) | TippedEmployee(x)) -> Advocate(x))", "all x.((Advocate(x) | TippedEmployee(x)) -> Advocate(x))", "all x.((Advocate(x) | TippedEmployee(x)) -> Advocate(x))", "all x.(Advocate(x) | TippedEmployee(x)) -> Advocate(x))", "all x.((Advocate(x) | TippedEmployee(x)) -> Advocate(x))", "all x.((Advocate(x) | TippedEmployee(x))) -> Advocate(x))", "all x.((Advocate(x) | TippedEmployee(x)) -> Advocacy(x))", "all x.((Advocacy(x) | TippedEmployee(x)) -> Advocate(x))"]}
{"id": "folio_train_2129", "nl": "Asa Hoffmann was born in New York City.", "fol": "BornInLocation(AsaHoffmann,Newyorkcity)", "prediction": ["Asa Hoffmann was born in New York City.", "Asa Hoffmann (bornInNewYorkCity(Asa) & BornInNewYork(Asa))", "Asa Hoffmann (bornInNewYork(a) & NewYork(b))", "Asa Hoffmann (bornInNewYork(Asa) & BornInNewYork(Asa))", "All x.(Hoffman(x) -> BornInNewYork(x))", "Asa Hoffmann (bornInNewYorkCity(Asa) & BornInNewYorkCity(Asa))", "Asa Hoffmann (bornInNewYork(Asa) & NewYork(Asa))", "Asa Hoffmann (bornInNewYork(a) & BornInNewYork(a))", "Asa Hoffmann (bornInNewYork(a) & NewYork(a))", "Asa Hoffmann (bornInNewYork(Asa) & NewYorkCity(Asa))", "Asa Hoffmann (bornInNewYork(a) & NewYorkCity(b))", "Asa Hoffmann (BirthInNewYork(a) & BornInNewYork(a))", "Asa Hoffmann (bornInNewYork(a) & NewYorkCity(a))", "Asa Hoffmann was born in NewYorkCity.", "Asa Hoffmann (bornInNewYork(Asa) & BornInNewYork(Asa)))", "Asa Hoffmann was born in NewYorkCity(AsaHoffman)"]}
{"id": "folio_train_2130", "nl": "Asa Hoffman lives in Manhattan.", "fol": "LivesInLocation(AsaHoffmann,Manhattan)", "prediction": ["Asa Hoffman lives in Manhattan.", "All x.(AsaHoffman(x) -> LivesIn(x,Manhattan))", "All x.(AsaHollow(x) -> LivesIn(x,Manhattan))", "All x.(AsaHoffman(x) -> LivesIn(x,Metropolitan))", "All x.(AsaHoffman(x) -> LivesInMetropolitan(x))", "All x.(AsaHoffman(x) -> LivesIn(x,New York))", "Asa Hoffman & LivesIn(Asa(Asa) & Manhattan(Asa))", "All x.(AsaHoffman(x) -> LivesIn(x,Midtown))", "All x.(AsaHollow(x) -> LivesIn(x,Metropolitan))", "All x.(AsaHollow(x) -> LivesIn(x,New York))", "All x.(AsaHoffman(x) -> LivesIn(x,Miami))", "All x.(AsaHollow(x) -> LivesInMetropolitan(x))", "All x.(AsaHoffman(x) -> LivesInMidtown(x))", "All x.(AsaHoffman(x) -> LivesInMiami(x))", "All x.(AsaHoffman(x) -> LivesIn(x,Mennis))", "All x.(AsaHoffman(x) -> LivesInNew York(x))"]}
{"id": "folio_train_2131", "nl": "Asa Hoffman is a chess player.", "fol": "IsChessPlayer(AsaHoffmann)", "prediction": ["Asa Hoffman is a chess player.", "Asa Hoffman is a chessplayer.", "All x.(Hoffman(x) -> ChessPlayer(x))", "Asa Hoffman is a ChessPlayer.", "(ChessPlayer(AsaHoffman) -> ChessPlayer(AsaHoffman))", "all x.(Hoffman(x) -> ChessPlayer(x))", "(ChessPlayer(AsaHoffman) & PlaysChess(AsaHoffman))", "(ChessPlayer(AsaHoffman) & ChessPlayer(AsaHoffman))", "(ChessPlayer(AsaHoffman) | ChessPlayer(AsaHoffman))", "Asa Hoffman is a ChessPlayer(a)", "All x.(Hannah(x) -> ChessPlayer(x))", "(ChessPlayer(AsaHoffman) | ChessPlayer(AsaHoffman)))", "(ChessPlayer(Asa Hoffman) & PlaysChess(Asa Hoffman))", "(ChessPlayer(AsaHoffman) & PlaysChess(Asa Hoffman))", "(ChessPlayer(AsaHoffman) & Plays(AsaHoffman))", "(ChessPlayer(AsaHollow) & PlaysChess(AsaHollow))"]}
{"id": "folio_train_2132", "nl": "Some chess players are grandmasters.", "fol": "exists x.(IsChestPlayer(x) & IsGrandmaster(x))", "prediction": ["exists x.(ChessPlayer(x) & Grandmaster(x))", "exists x.(ChessPlayer(x) & GrandMaster(x))", "exists x.(ChestsPlayer(x) & Grandmaster(x))", "exists x.(ChestsPlayer(x) & GrandMaster(x))", "exists x y.(ChessPlayer(x) & Grandmaster(y))", "exists x y.(ChessPlayer(x) & GrandMaster(y))", "exists x.(Player(x) & ChessPlayer(x) & Grandmaster(x))", "exists x.(Player(x) & ChessPlayer(x) & GrandMaster(x))", "exists x y.((ChessPlayer(x) & Grandmaster(y)) -> Grandmaster(x))", "exists x.(Player(x) & Chess(x) & Grandmaster(x))", "exists x y.((ChessPlayer(x) & GrandMaster(y)) -> Grandmaster(x))", "exists x.(ChestyPlayer(x) & Grandmaster(x))", "exists x.(Player(x) & Chess(x) & GrandMaster(x))", "exists x y.((ChessPlayer(x) & Grandmaster(y))", "exists x.(ChestyPlayer(x) & GrandMaster(x))", "exists x y.((ChessPlayer(x) & GrandMaster(y)) -> GrandMaster(x))"]}
{"id": "folio_train_2133", "nl": "People born and living in New York City are New Yorkers.", "fol": "all x.((BornInLocation(x,Newyorkcity) & LivesInLocation(x,Newyorkcity)) -> IsNewYorker(x))", "prediction": ["all x.((Person(x) & BornInNewYork(x) & LivesInNewYork(x)) -> NewYorker(x))", "all x.((Person(x) & BornInNewYork(x) & LivingInNewYork(x)) -> NewYorker(x))", "all x.((Birth(x) & LivesInNewYork(x)) -> NewYorker(x))", "all x.((Person(x) & BornInNewYork(x) & LivesIn(x,NewYork)) -> NewYorker(x))", "all x.((BornInNewYork(x) & LivesInNewYork(x)) -> NewYorker(x))", "all x.((Birth(x) & LivingInNewYork(x)) -> NewYorker(x))", "all x.((Person(x) & BornInNewYorkCity(x) & LivesInNewYorkCity(x)) -> NewYorker(x))", "all x.((PeopleBornInNewYork(x) & LivesInNewYork(x)) -> NewYorker(x))", "all x.((BornInNewYork(x) & LivingInNewYork(x)) -> NewYorker(x))", "all x.((Person(x) & BornInNewYorkCity(x) & LivesInNewYork(x)) -> NewYorker(x))", "all x.((Person(x) & BornInNewYork(x) & LivesInNewYork(x)) -> NewYorkers(x))", "all x.((Person(x) & BornIn(x,NewYork) & LivesIn(x,NewYork)) -> NewYorker(x))", "all x.((Birth(x) & LivesIn(x,NewYork)) -> NewYorker(x))", "all x.((Person(x) & BornInNewYork(x) & LivingInNewYork(x)) -> NewYorkers(x))", "all x.((PeopleBornInNewYork(x) & LivingInNewYork(x)) -> NewYorker(x))", "all x.((PeopleBirthNewYork(x) & LivesInNewYork(x)) -> NewYorker(x))"]}
{"id": "folio_train_2134", "nl": "People liviing in Manhattan live in New York City.", "fol": "all x.(LivesInLocation(x,Manhattan) -> LivesInLocation(x,Newyorkcity))", "prediction": ["all x y.((Person(x) & LivesIn(x,y)) -> LivesIn(x,y))", "all x y.((Person(x) & LivesIn(x,y) & Manhattan(y)) -> LivesIn(x,y))", "all x.((Person(x) & LivesInNewYork(x)) -> LivesIn(x,NewYork))", "all x.((Person(x) & LivesInMetropolitan(x)) -> LivesInNewYorkCity(x))", "all x.((Person(x) & LivesInNewYork(x)) -> LivesInNewYork(x))", "all x.((Person(x) & LivesIn(x,NewYork)) -> LivesIn(x,NewYork))", "all x y.((Person(x) & LivesInNewYork(x)) -> LivesIn(x,y))", "all x y.((Person(x) & LivesIn(x,y) & Manhattan(y)) -> LivesInNewYork(x))", "all x.((Person(x) & LivesInNewYorkCity(x)) -> LivesIn(x,NewYorkCity))", "all x.(LivingInMetropolitan(x) -> LivesInNewYorkCity(x))", "all x y.((Person(x) & LivesIn(x,y) & Manhattan(y)) -> LivesInNewYorkCity(x))", "all x y.((Person(x) & LivesInNewYork(x,y)) -> LivesIn(x,y))", "all x.((People(x) & LivesInNewYork(x)) -> LivesIn(x,NewYork))", "all x.((Person(x) & LivesInNewYork(x)) -> LivesIn(x,NewYorkCity))", "all x y.((Person(x) & LivesIn(x,y) & Manhattan(y)) -> LivesInNewYork(x,y))", "all x y.((Person(x) & LivesIn(x,y) & Manhattan(y)) -> LivesInNewYorkCity(x,y))"]}
{"id": "folio_train_2135", "nl": "Asa Hoffmann is a New Yorkers.", "fol": "IsNewYorker(AsaHoffmann)", "prediction": ["Asa Hoffmann is a NewYorker(a)", "Asa Hoffmann is NewYorkers(AsaHoffman)", "Asa Hoffmann is NewYorker(a)", "Asa Hoffmann is a NewYorkers(AsaHoffman)", "All x.(Hoffman(x) -> NewYorkers(x))", "Asa Hoffmann is NewYorkers(a)", "Asa Hoffmann is a NewYorker(AsaHoffman)", "Asa Hoffmann is NewYorker(AsaHoffman)", "Asa Hoffmann is a NewYorkers(a)", "Asa Hoffmann is a NewYorkers.", "All x.(Hoffman(x) -> NewYorker(x))", "Asa Hoffmann is NewYorkers(AsaHollown)", "Asa Hoffmann is a NewYorker(Asa)", "Asa Hoffmann is NewYorkers(Asa)", "Asa Hoffmann is a NewYorkers(AsaHollown)", "Asa Hoffmann is NewYorkers."]}
{"id": "folio_train_2136", "nl": "Asa Hoffmann is a grandmaster.", "fol": "IsGrandmaster(AsaHoffmann)", "prediction": ["Asa Hoffmann is a grandmaster.", "All x.((AsaHoffman(x) & Grandmaster(x)) -> Grandmaster(x))", "all x.((AsaHoffman(x) & Grandmaster(x)) -> Grandmaster(x))", "Asa Hoffmann is grandmaster.", "All x.((AsaHollown(x) & Grandmaster(x)) -> Grandmaster(x))", "All x.((AsaHoffman(x) & GrandMaster(x)) -> Grandmaster(x))", "all x.((AsaHollown(x) & Grandmaster(x)) -> Grandmaster(x))", "all x.((AsaHoffman(x) & GrandMaster(x)) -> Grandmaster(x))", "All x.((AsaHoffman(x) & Grandmaster(x)) -> GrandMaster(x))", "all x.((AsaHoffman(x) & Grandmaster(x)) -> GrandMaster(x))", "all x.(Grandmaster(x) -> AsaHoffman(x))", "All x.((AsaHoffman(x) & GrandMaster(x)) -> GrandMaster(x))", "All x.((AsaHollown(x) & Grandmaster(x)) -> GrandMaster(x))", "(Grandmaster(Asa Hoffmann) & Grandmaster(Asa Hoffmann))", "All x.(AsaHoffman(x) -> Grandmaster(x))", "All x.(Grandmaster(x) -> AsaHoffman(x))"]}
{"id": "folio_train_2137", "nl": "Asa Hoffmann does not live in New York.", "fol": "-LivesInLocation(AsaHoffmann,Newyorkcity)", "prediction": ["Asa Hoffmann does not live in New York.", "All x.(Hoffman(x) -> -LivesInNewYork(x))", "Asa Hoffmann -LivesInNewYork(Asa(Asa) & -LivesInNewYork(Asa))", "Asa Hoffmann -LivesInNewYork(Asa,NewYork))", "Asa Hoffmann -LivesInNewYork.", "Asa Hoffmann -LivesInNewYork(Asa(A) & -LivesInNewYork(A))", "Asa Hoffmann -LivesInNewYork(Asa))", "Asa Hoffmann -LivesInNewYork(AsaHoffman)", "Asa Hoffmann -LivesInNewYork(Asa(Asa) & -LivesInNewYork(Asa(Asa))", "Asa Hoffmann -LivesInNewYork(a))", "Asa Hoffmann -LivingInNewYork(a))", "Asa Hoffmann -LivesInNewYork(a) & -LivesInNewYork(a) & -LivesInNewYork(a))", "Asa Hoffmann -LivesInNewYork(a) & -LivesInNewYork(b) & -LivesInNewYork(a))", "Asa Hoffmann -LivingInNewYork(Asa,NewYork))", "Asa Hoffmann -LivesInNewYork(Asa(A) & -LivesInNewYork(Asa(A))", "Asa Hoffmann -LivesInNewYork(Asa(Asa) & -LivesInNewYork(Asa,NewYork))"]}
{"id": "folio_train_2138", "nl": "Some of those who apply for a Schengen Visa get it.", "fol": "exists x.(ApplyForSchengenVisa(x) -> ReceiveSchengenVisa(x))", "prediction": ["exists x.(AppliesForSchengenVisa(x) & GetsVisa(x))", "exists x.(AppliesForSchengenVisa(x) & GetsSchengenVisa(x))", "exists x.(AppliesForSpengenVisa(x) & GetsSpengenVisa(x))", "exists x.(ApplicationForSchengenVisa(x) & GetsVisa(x))", "exists x.(ApplicationForSchengenVisa(x) & GetsSchengenVisa(x))", "exists x.(AppliesForSchengenVisa(x) & GetsSpengenVisa(x))", "exists x.(ApplyForSchengenVisa(x) & GetsVisa(x))", "exists x.(ApplicationForSchengenVisa(x) & Gets(x))", "exists x.(ApplyForSpengenVisa(x) & GetsSpengenVisa(x))", "exists x.(ApplyForSchengenVisa(x) & GetsSchengenVisa(x))", "exists x.(AppliesForSchengenVisa(x) & Gets(x))", "exists x.(SpengenVisa(x) & AppliesFor(x,y))", "exists x.(ApplicationForSchengenVisa(x) & Gets(x,y))", "exists x.(SpengenVisa(x) & AppliesFor(x,Spengen))", "exists x.(ApplyForSchengenVisa(x) & Gets(x))", "exists x.(ApplicationForSchengenVisa(x) & Gets(x,SpengenVisa))"]}
{"id": "folio_train_2139", "nl": "To apply for a Schengen Visa, you need to provide financial guarantees.", "fol": "all x.(ApplyForSchengenVisa(x) -> ProvideFinancialGuarantees(x))", "prediction": ["all x.((ApplyForSchengenVisa(x) & ProvideFinancialGaranties(x)) -> ProvidesFinancialGaranties(x))", "all x.(ApplyForSchengenVisa(x) -> ProvidesFinancialGaranties(x))", "all x.((ApplyForSchengenVisa(x) & ProvideFinancialGaranties(x)) -> ApplyForSchengenVisa(x))", "all x.((Application(x) & SchengenVisa(x)) -> ProvidesFinancialGaranties(x))", "all x.((AppliesForSchengenVisa(x) & ProvidesFinancialGaranties(x)) -> ProvidesFinancialGaranties(x))", "all x.((ApplyForSchengenVisa(x) & ProvideFinancialGaranties(x)) -> NeedsFinancialGaranties(x))", "all x.((ApplicationForSchengenVisa(x) & FinancialGaranties(x)) -> Provides(x,y))", "all x.((ApplyForSchengenVisa(x)) -> ProvidesFinancialGaranties(x))", "all x.(SpengenVisa(x) -> ProvidesFinancialGaranties(x))", "all x.((Application(x) & SchengenVisa(x)) -> FinancialGaranties(x))", "all x.((ApplysForSchengenVisa(x) & ProvidesFinancialGaranties(x)) -> ProvidesFinancialGaranties(x))", "all x.((ApplyForSchengenVisa(x) & ProvidesFinancialGaranties(x)) -> ProvidesFinancialGaranties(x))", "all x.((ApplicationForSchengenVisa(x) & ProvidesFinancialGaranties(x)) -> ApplyForSchengenVisa(x))", "all x.(SchengenVisa(x) -> ProvidesFinancialGaranties(x))", "all x y.((ApplyForSchengenVisa(x) & FinancialGaranties(y)) -> Provides(x,y))", "all x.((ApplyForSchengenVisa(x) & ProvideFinancialGaranties(x)) -> RequiresFinancialGaranties(x))"]}
{"id": "folio_train_2140", "nl": "If you need to provide financial guarantees, you must request documents from the bank.", "fol": "all x.(ProvideFinancialGuarantees(x) -> RequestBankDocuments(x))", "prediction": ["all x.((Bank(x) & NeedsFinancialGaranties(x)) -> RequiresDocuments(x))", "all x.((Bank(x) & NeedsFinancialGaranties(x)) -> RequestsDocuments(x))", "all x.((Bank(x) & ProvidesFinancialGaranties(x)) -> RequiresDocuments(x))", "all x y.((Bank(x) & Bank(y) & NeedsFinancialGaranties(x,y)) -> RequiresDocuments(x,y))", "all x y.((Bank(x) & Bank(y) & NeedsFinancialGaranties(x,y)) -> RequestsDocuments(x,y))", "all x.((Bank(x) & ProvidesFinancialGaranties(x)) -> RequestsDocuments(x))", "all x.((Bank(x) & RequiresDocuments(x)) -> ProvidesFinancialGaranties(x))", "all x.((Bank(x) & RequiresBankDocuments(x)) -> ProvidesFinancialGaranties(x))", "all x.((Bank(x) & RequiresFinancialGaranties(x)) -> RequiresDocuments(x))", "all x y.((Bank(x) & NeedsFinancialGaranties(x)) -> RequiresDocuments(x,y))", "all x y.((Bank(x) & NeedsFinancialGaranties(x)) -> RequiresDocuments(y,x))", "all x y.((Bank(x) & NeedsFinancialGaranties(x)) -> RequestsDocuments(x,y))", "all x.((Bank(x) & NeedsFinancialGaranties(x)) -> RequiresDocuments(x,y))", "all x.((Bank(x) & NeedsFinancialGaranties(x)) -> RequestsDocumentsFromBank(x))", "all x.((Bank(x) & RequiresDocuments(x)) -> FinancialGaranties(x))", "all x y.((Bank(x) & NeedsFinancialGaranties(x)) -> RequestsDocuments(y,x))"]}
{"id": "folio_train_2141", "nl": "Do not close your bank account if you request documents from the bank.", "fol": "all x.(RequestBankDocuments(x) -> -CloseAccount(x))", "prediction": ["all x y.((BankAccount(x) & Bank(y) & RequestsDocuments(x,y)) -> -Close(x,y))", "all x.((BankAccount(x) & RequestsDocuments(x)) -> -Close(x))", "all x y.((BankAccount(x) & Bank(y) & RequiresDocuments(x,y)) -> -Close(x,y))", "all x y.((BankAccount(x) & Bank(y) & RequestsDocuments(x,y)) -> -Closes(x,y))", "all x y.((BankAccount(x) & RequestsDocuments(y)) -> -Close(x,y))", "all x.((BankAccount(x) & RequiresDocuments(x)) -> -Close(x))", "all x.((BankAccount(x) & RequestsDocumentsFromBank(x)) -> -Close(x))", "all x y.((BankAccount(x) & RequestsDocuments(y,x)) -> -Close(x,y))", "all x y.((BankAccount(x) & Bank(y) & RequestsDocumentsFrom(x,y)) -> -Close(x,y))", "all x y.((BankAccount(x) & RequestsDocuments(x,y)) -> -Close(x,y))", "all x y.((BankAccount(x) & BankRequest(y)) -> -Close(x,y))", "all x y.((BankAccount(x) & Bank(y) & RequestsDocuments(x,y)) -> -Close(x))", "all x y.((BankAccount(x) & BankRequest(y) & -Close(x,y)) -> -Close(x,y))", "all x y.((BankAccount(x) & BankRequestsDocuments(y)) -> -Close(x,y))", "all x y.((BankAccount(x) & RequiresDocuments(y)) -> -Close(x,y))", "all x y.((BankAccount(x) & Bank(y) & RequiresDocuments(x,y)) -> -Closes(x,y))"]}
{"id": "folio_train_2142", "nl": "Philip closed his bank account.", "fol": "CloseAccount(Philip)", "prediction": ["all x y.((Phillips(x) & BankAccount(y)) -> Closed(x,y))", "all x y.((Phillip(x) & BankAccount(y)) -> Closed(x,y))", "all x y.((Pilot(x) & BankAccount(y)) -> Closed(x,y))", "all x y.((Philip(x) & BankAccount(y)) -> Closed(x,y))", "Philip closed his bank account.", "all x.((Phillips(x) & BankAccount(x)) -> Closed(x))", "all x.((Phillip(x) & BankAccount(x)) -> Closed(x))", "all x.((Phillips(x) & BankAccount(y)) -> Closed(x,y))", "all x y.((Pian(x) & BankAccount(y)) -> Closed(x,y))", "all x.((Phillip(x) & BankAccount(y)) -> Closed(x,y))", "all x y.((BankAccount(x) & Philip(y)) -> Closed(y,x))", "all x.((Philip(x) & BankAccount(x)) -> Closed(x))", "all x.((Philip(x) & BankAccount(y)) -> Closed(x,y))", "all x.((Philippe(x) & BankAccount(y)) -> Closed(x,y))", "all x.((Philippe(x) & BankAccount(x)) -> Closed(x))", "all x.((Phillips(x) & BankAccount(x)) -> Closed(x,y))"]}
{"id": "folio_train_2143", "nl": "Philip got a Schengen Visa.", "fol": "ReceiveSchengenVisa(Philip)", "prediction": ["all x y.((Phillips(x) & SchengenVisa(y)) -> Got(x,y))", "all x.(Phillips(x) -> SchengenVisa(x))", "all x.(Phillips(x) -> GotSchengenVisa(x))", "all x.(Phillip(x) -> SchengenVisa(x))", "all x.((Phillips(x) & SchengenVisa(x)) -> Got(x,Phillips))", "all x.(Philip(x) -> SchengenVisa(x))", "all x.(Phillip(x) -> GotSchengenVisa(x))", "all x.(Philip(x) -> GotSchengenVisa(x))", "all x.((Phillips(x) & SchengenVisa(x)) -> Got(x,Phillip))", "all x y.((Phillips(x) & SchengenVisa(y)) -> Gets(x,y))", "all x y.((Phillips(x) & SchengenVisa(y)) -> Received(x,y))", "all x.(Phillips(x) -> GetsSchengenVisa(x))", "all x.(Phillips(x) -> ReceivedSchengenVisa(x))", "all x.((Phillips(x) & SchengenVisa(x)) -> Got(x,Philip))", "all x y.((Phillips(x) & Visa(y)) -> Got(x,y))", "all x.(Philippe(x) -> SchengenVisa(x))"]}
{"id": "folio_train_2144", "nl": "Philip applied for a Schengen Visa and got it.", "fol": "(ApplyForSchengenVisa(Philip) & ReceiveSchengenVisa(Philip))", "prediction": ["all x y.((Phillips(x) & SchengenVisa(y)) -> (AppliedFor(x,y) & Got(x,y)))", "all x y.((Phillips(x) & SchengenVisa(y)) -> (AppliedFor(x,y) & Got(x,y)))", "all x y.((Philip(x) & SchengenVisa(y)) -> (AppliedFor(x,y) & Got(x,y)))", "all x y.((Phillip(x) & SchengenVisa(y)) -> (AppliedFor(x,y) & Got(x,y)))", "all x y.((Phillip(x) & SchengenVisa(y)) -> (AppliedFor(x,y) & Got(x,y)))", "all x y.((Philip(x) & SchengenVisa(y)) -> (AppliedFor(x,y) & Got(x,y)))", "all x y z.((Phillips(x) & SchengenVisa(y) & Visa(z)) -> (AppliedFor(x,y) & Got(x,z)))", "all x y z.((Phillips(x) & SchengenVisa(y) & Visa(z)) -> (AppliedFor(x,y) & Got(x,z)))", "all x y.((Phillips(x) & Visa(y)) -> (AppliedFor(x,y) & Got(x,y)))", "all x y.((Pianist(x) & SchengenVisa(y)) -> (AppliedFor(x,y) & Got(x,y)))", "all x.(Phillips(x) -> (AppliedForSchengenVisa(x) & GotVisa(x)))", "all x y.((Phillips(x) & Visa(y)) -> (AppliedFor(x,y) & Got(x,y)))", "all x.(Phillip(x) -> (AppliedForSchengenVisa(x) & GotVisa(x)))", "all x y.((Phillips(x) & SchengenVisa(y)) -> (Applied(x,y) & Got(x,y)))", "all x.(Pilot(x) -> (AppliedForSchengenVisa(x) & GotVisa(x)))", "all x.(Philip(x) -> (AppliedForSchengenVisa(x) & GotVisa(x)))"]}
{"id": "folio_train_2145", "nl": "If Philip did not request documents from the bank or get a Schengen Visa, he didn\u2019t apply for a Schengen Visa.", "fol": "((-RequestBankDocuments(Philip) | ReceiveSchengenVisa(Philip)) -> -ApplyForSchengenVisa(Philip))", "prediction": ["all x.((Pilot(x) & -RequiresDocumentsFromBank(x) & -GetsSchengenVisa(x)) -> -AppliesForSchengenVisa(x))", "all x.((Phillips(x) & -RequiresDocumentsFromBank(x) & -GetsSchengenVisa(x)) -> -AppliesForSchengenVisa(x))", "all x.((Phillip(x) & -RequiresDocumentsFromBank(x) & -GetsSchengenVisa(x)) -> -AppliesForSchengenVisa(x))", "all x.((Pilot(x) & -RequiresDocuments(x) & -GetsSchengenVisa(x)) -> -AppliesForSchengenVisa(x))", "all x.((Phillips(x) & -RequiresDocuments(x) & -GetsSchengenVisa(x)) -> -AppliesForSchengenVisa(x))", "all x.((Phillips(x) & -RequestsDocumentsFromBank(x) & -GetsSchengenVisa(x)) -> -AppliesForSchengenVisa(x))", "all x.((Phillip(x) & -RequiresDocuments(x) & -GetsSchengenVisa(x)) -> -AppliesForSchengenVisa(x))", "all x.((Pilot(x) & -RequestsDocumentsFromBank(x) & -GetsSchengenVisa(x)) -> -AppliesForSchengenVisa(x))", "all x.((Pianist(x) & -RequiresDocumentsFromBank(x) & -GetsSchengenVisa(x)) -> -AppliesForSchengenVisa(x))", "all x.((Phillip(x) & -RequestsDocumentsFromBank(x) & -GetsSchengenVisa(x)) -> -AppliesForSchengenVisa(x))", "all x.((Pippin(x) & -RequiresDocumentsFromBank(x) & -GetsSchengenVisa(x)) -> -AppliesForSchengenVisa(x))", "all x.((Philip(x) & -RequiresDocumentsFromBank(x) & -GetsSchengenVisa(x)) -> -AppliesForSchengenVisa(x))", "all x.((Pilot(x) & -RequestsDocuments(x) & -GetsSchengenVisa(x)) -> -AppliesForSchengenVisa(x))", "all x.((Phillips(x) & -RequestsDocuments(x) & -GetsSchengenVisa(x)) -> -AppliesForSchengenVisa(x))", "all x.((Phillip(x) & -RequestsDocuments(x) & -GetsSchengenVisa(x)) -> -AppliesForSchengenVisa(x))", "all x.((Pilot(x) & -RequiresBankDocuments(x) & -GetsSchengenVisa(x)) -> -AppliesForSchengenVisa(x))"]}
{"id": "folio_train_2146", "nl": "Some fears lead to anxiety.", "fol": "exists x.(LeadsToFear(x) & LeadsToAnxiety(x))", "prediction": ["exists x.(Fear(x) & LeadsToAnxiety(x))", "exists x.(Fear(x) & LeadsToAngry(x))", "exists x.(Fear(x) & LeadsToAngryness(x))", "exists x.(Fear(x) & LeadToAnxiety(x))", "exists x.(Fear(x) & LeadsTo(x,Anxiety))", "exists x.(Fear(x) & LeadToAngry(x))", "exists x y.(Fear(x) & Fear(y) & LeadsToAnxiety(x,y))", "exists x y.(Fear(x) & Fear(y) & LeadsTo(x,y))", "exists x.(Fear(x) & LeadsTo(x,anxiety))", "exists x.(Fear(x) & LeadsTo(x,Angry))", "exists x y.(Fear(x) & Fear(y) & LeadsToAngry(x,y))", "exists x.(Fear(x) & Anxiety(x))", "exists x.(Fear(x) & LeadsToAngery(x))", "exists x.(Fear(x) & LeadsToAngry(x))", "exists x.(Fear(x) & LeadTo(x,Anxiety))", "exists x y.(Fear(x) & Fear(y) & LeadsToAnxiety(x))"]}
{"id": "folio_train_2147", "nl": "Some anxiety leads to terror.", "fol": "exists x.(LeadsToAnxiety(x) & LeadsToTerror(x))", "prediction": ["exists x.(Anxiety(x) & LeadsToTerror(x))", "exists x.(Angry(x) & LeadsToTerror(x))", "exists x.(Anxiety(x) & LeadsTo(x,Terror))", "exists x.(Anxiety(x) & LeadsTo(x,terror))", "exists x.(Angry(x) & LeadsTo(x,Terror))", "exists x.(Anxiety(x) & LeadsToThreat(x))", "exists x.(Angry(x) & LeadsTo(x,terror))", "exists x.(Anxiety(x) & LeadToTerror(x))", "exists x.(Angry(x) & LeadsToThreat(x))", "exists x.(Anxiety(x) & LeadsToTerror(x))", "exists x.(Angry(x) & Tears(x))", "exists x.(Anger(x) & LeadsToTerror(x))", "exists x.(Anxiety(x) & Tears(x))", "exists x y.(Anxiety(x) & Terror(y))", "exists x.(Angers(x) & LeadsToTerror(x))", "exists x.(Anxiety(x) & LeadTo(x,Terror))"]}
{"id": "folio_train_2148", "nl": "No fears lead to terror.", "fol": "-exists x.(LeadsToFear(x) & LeadsToTerror(x))", "prediction": ["-exists x.(Fear(x) & LeadsToTerror(x))", "all x.(Fear(x) -> -LeadsToTerror(x))", "all x.((Fear(x) & -LeadsToTerror(x)) -> -LeadsToTerror(x))", "-exists x.(Fear(x) & -LeadsToTerror(x))", "-exists x.(Fear(x) & LeadsTo(x,Terror))", "-exists x.(Fear(x) & LeadsTo(x,terror))", "all x.((Fear(x) & -LeadsToTerror(x)) -> -LeadsToThreat(x))", "-exists x.(Fear(x) & LeadToTerror(x))", "-exists x.(Afraid(x) & LeadsToTerror(x))", "-exists x.(Bereavement(x) & LeadsToTerror(x))", "all x.(Fears(x) -> -LeadsToTerror(x))", "all x.((Fear(x) & -LeadsToTerror(x)) -> -LeadToTerror(x))", "all x.((Fear(x) & -Terror(x)) -> -LeadsTo(x,Terror))", "all x.((Fear(x) & -Terror(x)) -> -LeadsTo(x,terror))", "-exists x.(Fear(x) & LeadsToTerror(x))", "all x.((Fear(x) & -Terror(x)) -> -LeadsTo(x,y))"]}
{"id": "folio_train_2149", "nl": "The Great Lakes are Lake Superior, Lake Michigan, Lake Huron, Lake Erie, and Lake Ontario.", "fol": "all x.(IsGreatLake(x) -> (LakeSuperior(x) | LakeMichigan(x) | LakeHuron(x) | LakeErie(x) | LakeOntario(x)))", "prediction": ["all x.(GreatLake(x) -> (LakeSuperior(x) | LakeMichigan(x) | LakeHuron(x) | LakeErie(x) | LakeOntario(x)))", "(GreatLake(GreatLake) -> (LakeSuperior(GreatLake) | LakeMichigan(GreatLake) | LakeHuron(GreatLake) | LakeErie(GreatLake) | LakeOntario(GreatLake)))", "(GreatLake(GreatLake) -> (LakeSuperior(GreatLake) & LakeMichigan(GreatLake) & LakeHuron(GreatLake) & LakeErie(GreatLake) & LakeOntario(GreatLake)))", "(GreatLake(GreatLake) -> (LakeSuperior(GreatLake) | Lake Michigan(GreatLake) | Lake Huron(GreatLake) | LakeErie(GreatLake) | LakeOntario(GreatLake)))", "(GreatLake(GreatLake) -> (LakeSuperior(GreatLake) | LakeMichigan(GreatLake) | LakeHuron(GreatLake) | LakeErie(GreatLake) | LakeOntario(GreatLake)))", "all x.(GreatLake(x) -> (LakeSuperior(x) & LakeMichigan(x) & LakeHuron(x) & LakeErie(x) & LakeOntario(x)))", "(GreatLake(GreatLake) & (LakeSuperior(GreatLake) | LakeMichigan(GreatLake) | LakeHuron(GreatLake) | LakeErie(GreatLake) | LakeOntario(GreatLake)))", "all x.(GreatLake(x) -> (LakeSuperior(x) | Lake Michigan(x) | Lake Huron(x) | LakeErie(x) | LakeOntario(x)))", "all x.(GreatLake(x) -> (LakeSuperior(x) | LakeMichigan(x) | LakeHuron(x) | LakeErie(x) | LakeOntario(x)))", "(GreatLake(GreatLake) -> (LakeSuperior(GreatLake) & Lake Michigan(GreatLake) & Lake Huron(GreatLake) & LakeErie(GreatLake) & LakeOntario(GreatLake)))", "(GreatLake(GreatLake) & (LakeSuperior(GreatLake) | Lake Michigan(GreatLake) | Lake Huron(GreatLake) | LakeErie(GreatLake) | LakeOntario(GreatLake)))", "All x.(GreatLake(x) -> (LakeSuperior(x) | LakeMichigan(x) | LakeHuron(x) | LakeErie(x) | LakeOntario(x)))", "all x.(GreatLake(x) -> (LakeSurvival(x) | LakeMichigan(x) | LakeHuron(x) | LakeErie(x) | LakeOntario(x)))", "(GreatLake(GreatLake) -> (LakeSuperior(GreatLake) | Lake Michigan(GreatLake) | Lake Huron(GreatLake) | LakeErie(GreatLake) | LakeOntario(GreatLake)))", "(GreatLake(GreatLake) -> (LakeSuperior(GreatLake) | Lake Michigan(GreatLake) | Lake Huron(GreatLake) | Lake Erie(GreatLake) | LakeOntario(GreatLake)))", "(GreatLake(GreatLake) -> (LakeSuperior(GreatLake) | Lake Michigan(GreatLake) | Lake Huron(GreatLake) | Lake Erie(GreatLake) | Lake Ontario(GreatLake)))"]}
{"id": "folio_train_2150", "nl": "Some major settlements of Lake Erie are in NY, PA, OH, and MI.", "fol": "exists x y.(LakeErie(y) & MajorSettlementOfLake(x,y) & (LocatedIn(x,Ny) | LocatedIn(x,Pa) | LocatedIn(x,Oh) | LocatedIn(x,Mi)))", "prediction": ["exists x.(Standard(x) & LakeErie(x) & In(x,NY) & In(x,PA) & In(x,OH) & In(x,MI))", "exists x.(Standard(x) & LakeErie(x) & (NewYork(y) | Pennsylvania(y) | Ohio(y) | MI(y)))", "exists x.(Standard(x) & LakeErie(x) & (NewYork(x) | Pennsylvania(x) | Ohio(x) | MI(x)))", "exists x.(Standard(x) & (NewYork(x) | Pennsylvania(x) | Ohio(x) | MI(x)))", "exists x.(Standard(x) & LakeErie(x) & (NewYork(y) | PA(y) | Ohio(y) | MI(y)))", "exists x.(Standard(x) & LakeErie(x) & (NewYork(x) | PA(x) | Ohio(x) | MI(x)))", "exists x.(Standard(x) & LakeErie(x) & (NewYork(y) | PA(y) | OH(y) | MI(y)))", "exists x.(Standard(x) & In(x,NY) & In(x,PA) & In(x,OH) & In(x,MI))", "exists x.(Standard(x) & LakeErie(x) & (NewYork(x) | PA(x) | OH(x) | MI(x)))", "exists x.(Standard(x) & LakeErie(x) & (NY(x) | PA(x) | OH(x) | MI(x)))", "exists x.(Standard(x) & (NewYork(x) | PA(x) | OH(x) | MI(x)))", "exists x.(Standard(x) & LakeErie(x) & In(x,NY) & In(x,PA) & In(x,OH) & In(x,Miami))", "exists x.(Standard(x) & (NewYork(x) | PA(x) | Ohio(x) | MI(x)))", "exists x.(Standard(x) & LakeErie(y) & (NewYork(x) | Pennsylvania(x) | Ohio(x) | MI(x)))", "exists x.((Standard(x) & LakeErie(x)) -> (NewYork(x) | PA(x) | OH(x) | MI(x)))", "exists x.(Standard(x) & LakeErie(x) & (NewYork(y) | Pennsylvania(y) | Ohio(y) | Michigan(y)))"]}
{"id": "folio_train_2151", "nl": "NY, PA, OH, MI are states in the US.", "fol": "(IsStateOf(Ny,Us) & IsStateOf(Pa,Us) & IsStateOf(Oh,Us) & IsStateOf(Mi,Us))", "prediction": ["(State(NY) & State(PA) & State(OH) & State(MI))", "(State(NY) | State(PA) | State(OH) | State(MI)))", "all x.((NewYork(x) | Pennsylvania(x) | Ohio(x) | MI(x)) -> StatesInUS(x))", "all x.((State(x) & (NY(x) | PA(x) | OH(x) | MI(x))) -> USState(x))", "all x.((NewYork(x) | Pennsylvania(x) | Ohio(x) | Michigan(x)) -> StatesInUS(x))", "all x.((State(x) & (NY) | PA(x) | OH(x) | MI(x))) -> USState(x))", "all x.((NewYork(x) | PA(x) | OH(x) | MI(x)) -> StatesInUS(x))", "all x.((State(x) & (NY(x) | PA(x) | OH(x) | MI(x))) -> StatesInUS(x))", "all x.((State(x) & (NewYork(y) | PA(y) | Ohio(y) | MI(y))) -> USState(x))", "all x.((State(x) & (NewYork(y) | PA(y) | Ohio(y) | MI(y))) -> InUS(x))", "all x.((State(x) & (NewYork(x) | PA(x) | Ohio(x) | MI(x))) -> USState(x))", "all x.((State(x) & (NY(x) | PA(x) | OH(x) | MI(x))) -> InUS(x))", "all x.((State(x) & (NewYork(y) | Pennsylvania(y) | Ohio(y) | MI(y))) -> USState(x))", "all x.((NewYork(x) | PA(x) | OOH(x) | MI(x)) -> StatesInUS(x))", "all x.((State(x) & (NewYork(x) | Pennsylvania(x) | Ohio(x) | MI(x))) -> USState(x))", "all x.((State(x) & (NY) | PA(x) | OH(x) | MI(x))) -> StatesInUS(x))"]}
{"id": "folio_train_2152", "nl": "ON is a state of Canada.", "fol": "IsStateOf(On,Canada)", "prediction": ["all x.(Ontario(x) -> StateOfCanada(x))", "(Ontario(Ontario) & StateOfCanada(Ontario))", "all x.(Ontario(x) -> StateOfCanada(x))", "(Ontario(ON) & StateOfCanada(ON))", "all x y.((Ontario(x) & State(y)) -> Canada(x))", "(Ontario) & StateOfCanada(Ontario))", "all x.(ON(x) -> StateOfCanada(x))", "all x.(Ont(x) -> StateOfCanada(x))", "all x.(Ont.((State(x) & Canada(x)) -> StateOf(x))", "all x y.((Ontario(x) & StateOfCanada(y)) -> LocatedIn(x,y))", "all x.(Ont.((State(x) & Canada(x)) -> State(x))", "(Ontario(Ontario) -> StateOfCanada(Ontario))", "all x.(Ontario(x) -> StateOfCanadian(x))", "all x y.((Ontario(x) & StateOfCanada(y)) -> StateOfCanada(x))", "all x y.((Ontario(x) & State(y)) -> Canada(x,y))", "all x y.((Ontario(x) & StateOf(y)) -> Canada(x))"]}
{"id": "folio_train_2153", "nl": "There is a major settlement of Lake Huron in ON. ", "fol": "exists x.all y.(LakeHuron(y) & MajorSettlementOfLake(x,y) & LocatedIn(x,On))", "prediction": ["exists x.(Standard(x) & LakeHuron(x) & InOntario(x))", "exists x.(Sediment(x) & LakeHuron(x) & InOntario(x))", "exists x.(StandardLanding(x) & LakeHuron(x) & InOntario(x))", "exists x.(Standing(x) & LakeHuron(x) & InOntario(x))", "exists x.(Landing(x) & LakeHuron(x) & InOntario(x))", "exists x.(StandardStation(x) & LakeHuron(x) & InOntario(x))", "exists x.(Station(x) & LakeHuron(x) & InOntario(x))", "exists x.(Stockage(x) & LakeHuron(x) & InOntario(x))", "exists x.(Stadion(x) & LakeHuron(x) & InOntario(x))", "exists x.(MajorStandard(x) & LakeHuron(x) & InOntario(x))", "exists x.(Situation(x) & LakeHuron(x) & InOntario(x))", "exists x.(MajorStandardOfLakeHuron(x) & InOntario(x))", "exists x.(MajorSettlement(x) & LakeHuron(x) & InOntario(x))", "exists x.(Standard(x) & LakeHuron(x) & InOnt.(x)))", "exists x.(Landing(x,LakeHuron) & InOntario(x))", "exists x.(Sediment(x) & LakeHuron(x) & InOnt.(x)))"]}
{"id": "folio_train_2154", "nl": "All states are in their country.", "fol": "all x y.(IsStateOf(x,y) -> LocatedIn(x,y))", "prediction": ["all x.(State(x) -> InCountry(x))", "all x y.((State(x) & Country(y)) -> In(x,y))", "all x.exists y.(State(x) & Country(y) & In(x,y))", "all x y.((State(x) & Country(y)) -> InCountry(x,y))", "all x y.((State(x) & State(y)) -> InCountry(x,y))", "all x.(State(x) -> InCity(x))", "all x y.((State(x) & Country(y) & In(x,y)) -> In(x,y))", "all x.(State(x) -> (InCountry(x) | InCountry(x)))", "all x.(State(x) -> IsInCountry(x))", "all x.(State(x) -> (InCountry(x) & InCountry(x)))", "all x y.((State(x) & Country(y)) -> InCity(x,y))", "all x.exists y.(State(x) & Country(y) & LocatedIn(x,y))", "all x.((State(x) & Country(x)) -> In(x,country))", "all x.((State(x) & Country(x)) -> In(x,y))", "all x.(State(x) -> InCountry(x))", "all x.exists y.(State(x) & Country(y)) -> In(x,y))"]}
{"id": "folio_train_2155", "nl": "The US is in North America.", "fol": "LocatedIn(Us,Northamerica)", "prediction": ["all x.(US(x) -> NorthAmerica(x))", "all x.((US(x) & NorthAmerica(x)) -> In(x,y))", "all x.(US(x) -> InNorthAmerica(x))", "all x y.((US(x) & NorthAmerica(y)) -> In(x,y))", "All x.(US(x) -> NorthAmerica(x))", "all x.(U.S.(x) -> NorthAmerica(x))", "all x.((US(x) & InNorthAmerica(x)) -> InNorthAmerica(x))", "all x.(U.S.A.(x) -> NorthAmerica(x))", "all x.((US(x) & NorthAmerica(x)) -> IsIn(x,y))", "all x y.((US(x) & NorthAmerica(y)) -> IsIn(x,y))", "all x.(USA(x) -> NorthAmerica(x))", "All x.(US(x) -> InNorthAmerica(x))", "all x.((US(x) & NorthAmerica(x)) -> LocatedIn(x,y))", "all x y.((US(x) & NorthAmerica(y)) -> LocatedIn(x,y))", "all x.((US(x) & NorthAmerica(x)) -> In(x,NorthAmerica))", "all x.(U.S.A.((US) & NorthAmerica(x)) -> In(x,y))"]}
{"id": "folio_train_2156", "nl": "The Great Lakes began to form at the end of the Last Glacial Period.", "fol": "all x.(IsGreatLake(x) -> FormedAtEndOf(x,Lastglacialperiod))", "prediction": ["all x y.((GreatLake(x) & LastGlacialPeriod(y)) -> FormsAtEnd(x,y))", "all x y.((GreatLake(x) & LastGlacialPeriod(y)) -> FormsAtEndOf(x,y))", "all x y.((GreatLake(x) & LastGlacialPeriod(y)) -> FormsAt(x,y))", "all x.(GreatLake(x) -> FormsAtEndOfLastGlacialPeriod(x))", "all x y.((GreatLake(x) & LastGlacialPeriod(y)) -> Form(x,y))", "all x y.((GreatLake(x) & LastGlacialPeriod(y)) -> Forms(x,y))", "all x y.((GreatLake(x) & EndOfLastGlacialPeriod(y)) -> Forms(x,y))", "all x.((GreatLake(x) & EndOfLastGlacialPeriod(x)) -> Forms(x))", "all x.((GreatLake(x) & EndOfLastGlacialPeriod(x)) -> Form(x))", "all x y.((GreatLake(x) & EndOfLastGlacialPeriod(y)) -> Form(x,y))", "All x.(GreatLake(x) -> FormsAtEndOfLastGlacialPeriod(x))", "all x y.((GreatLake(x) & EndOfLastGlacialPeriod(y)) -> FormsAt(x,y))", "All x y.((GreatLake(x) & LastGlacialPeriod(y)) -> FormsAtEnd(x,y))", "All x y.((GreatLake(x) & LastGlacialPeriod(y)) -> FormsAtEndOf(x,y))", "all x.(GreatLake(x) -> FormedAtEndOfLastGlacialPeriod(x))", "all x.(GreatLake(x) -> (EndOfLastGlacialPeriod(x) & Form(x)))"]}
{"id": "folio_train_2157", "nl": "Lake Erie has a major settlement.", "fol": "exists x y.(LakeErie(x) & MajorSettlementOfLake(y,x))", "prediction": ["all x.(LakeErie(x) -> MajorStandard(x))", "all x.(LakeErie(x) -> MajorSettlement(x))", "all x.(LakeErie(x) -> MajorStanding(x))", "all x.(LakeErie(x) -> MajorSituation(x))", "all x.(LakeErie(x) -> HasMajorStandard(x))", "all x y.((LakeErie(x) & Settlement(y)) -> Major(x,y))", "all x.(LakeErie(x) -> MajorSolution(x))", "all x y.((LakeErie(x) & MajorStandard(y)) -> Has(x,y))", "all x.(LakeErie(x) -> HasMajorStanding(x))", "all x.(LakeErie(x) -> MajorSettlement(x))", "all x.(LakeErie(x) -> MajorStockage(x))", "exists x.(LakeErie(x) & MajorStandard(x))", "all x.(LakeErie(x) -> MajorStandort(x))", "all x.(LandErie(x) -> MajorStandard(x))", "all x y.((LakeErie(x) & Settlement(y)) -> Has(x,y))", "exists x.(LakeErie(x) & MajorSettlement(x))"]}
{"id": "folio_train_2158", "nl": "There is a great lake that did not form at the end of the Last Glacial Period.", "fol": "exists x.(IsGreatLake(x) & -FormedAtEndOf(x,Lastglacialperiod))", "prediction": ["exists x.(GreatLake(x) & -FormedAtEndOfLastGlacialPeriod(x))", "exists x.(GreatLake(x) & -FormedAtEndOfLeastGlacialPeriod(x))", "exists x.(GreatLake(x) & -FormedLastGlacialPeriod(x))", "exists x.(GreatLake(x) & -FoundAtEndOfLastGlacialPeriod(x))", "exists x.(GreatLake(x) & -LastGlacialPeriod(x))", "exists x.(GreatLake(x) & -FormedAtLeastGlacialPeriod(x))", "exists x.(GreatLake(x) & -FormedAtLastGlacialPeriod(x))", "exists x.(GreatLake(x) & -FormsAtEndOfLastGlacialPeriod(x))", "exists x.(GreatLake(x) & -FoundAtEndOfLeastGlacialPeriod(x))", "exists x.(GreatLake(x) & -LastGlacialPeriodFormation(x))", "exists x.(GreatLake(x) & -FormedLongLastGlacialPeriod(x))", "exists x.(GreatLake(x) & -LastGlacialPeriodForm(x))", "exists x.(GreatLake(x) & -FormedLeastGlacialPeriod(x))", "exists x.(GreatLake(x) & -EndOfLastGlacialPeriod(x))", "exists x.(GreatLake(x) & -(LastGlacialPeriod(x) & -FormedAtEnd(x)))", "exists x.(GreatLake(x) & -LateGlacialPeriod(x))"]}
{"id": "folio_train_2159", "nl": "If Stephen Curry is not an NBA player, then Stephen Curry is not an NBA player or a soccer player.", "fol": "(-IsNBAPlayer(Stephencurry) -> -((IsNBAPlayer(Stephencurry) & -IsSoccerPlayer(Stephencurry)) | (-IsNBAPlayer(Stephencurry) & IsSoccerPlayer(Stephencurry))))", "prediction": ["all x.((StephenCurry(x) & -NBAPlayer(x)) -> (-NBAPlayer(x) | SoccerPlayer(x)))", "all x.((StephenCurry(x) & -NBAPlayer(x)) -> (-NBAPlayer(x) & -SoccerPlayer(x)))", "all x.((StephenCurry(x) & -NBAPlayer(x)) -> -NBAPlayer(x) & -SoccerPlayer(x))", "all x.((StephenCurry(x) & -NBAPlayer(x)) -> (-NBAPlayer(x) | -SoccerPlayer(x)))", "all x.((StephenCurry(x) & - NBAPlayer(x)) -> (-NBAPlayer(x) | SoccerPlayer(x)))", "all x.((StephenCurry(x) & -NBAPlayer(x)) -> -(NBAPlayer(x) | SoccerPlayer(x))))", "all x.((StanleyCurry(x) & -NBAPlayer(x)) -> (-NBAPlayer(x) | SoccerPlayer(x)))", "all x.((StephenCurry(x) & -NBAPlayer(x)) -> -(NBAPlayer(x) | SoccerPlayer(x)))", "all x.((StephenCruise(x) & -NBAPlayer(x)) -> (-NBAPlayer(x) | SoccerPlayer(x)))", "all x.((StanleyCurry(x) & -NBAPlayer(x)) -> (-NBAPlayer(x) & -SoccerPlayer(x)))", "all x.((StephenCurry(x) & - NBAPlayer(x)) -> (-NBAPlayer(x) & -SoccerPlayer(x)))", "all x.((StephenCurier(x) & -NBAPlayer(x)) -> (-NBAPlayer(x) | SoccerPlayer(x)))", "all x.((StephenCurry(x) & -NBAPlayer(x)) -> (-NBAPlayer(x) | SoccerPlayer(x))))", "all x.((StephenCurry(x) & -NBAPlayer(x)) -> -NBAPlayer(x) & -SoccerPlayer(x)))", "all x.((StephenCourtney(x) & -NBAPlayer(x)) -> (-NBAPlayer(x) | SoccerPlayer(x)))", "all x.((StephenCruiser(x) & -NBAPlayer(x)) -> (-NBAPlayer(x) | SoccerPlayer(x)))"]}
{"id": "folio_train_2160", "nl": "Stephen Curry is a professional basketball player.", "fol": "IsProfessionalBasketballPlayer(Stephencurry)", "prediction": ["all x.((StephenCurry(x) & ProfessionalBasketballPlayer(x)) -> Professional(x))", "(ProfessionalBasketballPlayer(StephenCurry))", "all x.((StephenCurry(x) & ProfessionalBasketballPlayer(x)) -> ProfessionalPlayer(x))", "all x.((StanleyCurry(x) & ProfessionalBasketballPlayer(x)) -> Professional(x))", "(ProfessionalBasketballPlayer(StephenCurry) & -ProfessionalBasketballPlayer(StephenCurry))", "StephenCurry(StephenCurry) is professionalBasketballPlayer(StephenCurry)", "all x.((StephenCurry(x) & BasketballPlayer(x)) -> Professional(x))", "all x.(StephenCurry(x) -> ProfessionalBasketballPlayer(x))", "All x.((StephenCurry(x) & ProfessionalBasketballPlayer(x)) -> Professional(x))", "all x.((StephenCurry(x) & ProfessionalBasketballPlayer(x)) -> StephenCurry(x))", "all x.((StephenCurry(x) & ProfessionalBasketballPlayer(x)) -> NBAPlayer(x))", "all x.((StephenCourtney(x) & ProfessionalBasketballPlayer(x)) -> Professional(x))", "all x.((StephenCurry(x) & ProfessionalBasketballPlayer(x)) -> Plays(x,y))", "all x y.((StephenCurry(x) & ProfessionalBasketballPlayer(y)) -> Professional(x,y))", "all x y.((StephenCurry(x) & BasketballPlayer(y)) -> Professional(x,y))", "StephenCurry(StephenCurry) & ProfessionalBasketballPlayer(StephenCurry))"]}
{"id": "folio_train_2161", "nl": "Stephen Curry is not a centerback.", "fol": "-IsCenterBack(Stephencurry)", "prediction": ["all x.((StephenCurry(x) & -Centerback(x)) -> -Centerback(x))", "(-Centerback(StephenCurry))", "all x.((StephenCurry(x) & -CenterBack(x)) -> -Centerback(x))", "all x.((StanleyCurry(x) & -Centerback(x)) -> -Centerback(x))", "all x.((StephenCourtney(x) & -Centerback(x)) -> -Centerback(x))", "all x.(Curry(x) -> -Centerback(x))", "all x.((StephenCurry(x) & -Centerback(x)) -> -CenterBack(x))", "StephenCurry(StephenCurry) & -Centerback(StephenCurry))", "all x.((StephenCurry(x) & -Centerback(x)) -> -centerback(x))", "All x.((StephenCurry(x) & -Centerback(x)) -> -Centerback(x))", "all x.((StephenCurry(x) & -centerback(x)) -> -Centerback(x))", "all x.((StephenCurry(x) & -Centerback(x)) -> -Curtainback(x))", "all x.((StephenCurry(x) & -Centerback(x)) -> -Curtiseback(x))", "all x.((StephenCurry(x) & -Centerback(x)) -> -CurtainBack(x))", "all x.((StephenCurry(x) & -Centerback(x)) -> -Current(x))", "all x.((StephenCurry(x) & Centerback(x)) -> -Centerback(x))"]}
{"id": "folio_train_2162", "nl": "Naive cynicism was proposed by Justin Kruger and a colleague.", "fol": "(ProposedNaiveCynicism(JustinKruger,NaiveCynicism) & ProposedNaiveCynicism(ColleagueOfJustinKruger,NaiveCynicism))", "prediction": ["all x y z.((NaiveCynicism(x) & JustinKruger(y) & Colleague(z)) -> ProposedBy(x,y,z))", "all x y.((NaiveCynicism(x) & JustinKruger(y)) -> ProposedBy(y,x))", "all x y.((NaiveCynicism(x) & JustinKruger(y)) -> ProposedBy(y,x))", "all x y z.((NaiveCynicism(x) & JustinKruger(y) & Colleague(z)) -> ProposedBy(x,y,z))", "all x y.((NaiveCynicism(x) & JustinKruger(y)) -> ProposedBy(x,y))", "all x y.((NaiveCynicism(x) & JustinKruger(y)) -> ProposedBy(x,y))", "all x y z.((NaiveCynicism(x) & JustinKruger(y) & Colleague(z)) -> ProposedBy(y,z))", "all x y z.((NaiveCynicism(x) & JustinKruger(y) & Colleague(z)) -> ProposedBy(y,x,z))", "all x y z.((NaiveCynicism(x) & JustinKruger(y) & Colleague(z)) -> ProposedBy(y,x))", "all x y z.((NaiveCynicism(x) & JustinKruger(y) & Colleague(z)) -> ProposedBy(y,z))", "all x y.((NaiveCynicism(x) & JustinKruger(y) & Colleague(y)) -> ProposedBy(x,y))", "all x y z.((NaiveCynicism(x) & JustinKruger(y) & Colleague(z)) -> ProposedBy(y,x,z))", "all x y z.((NaiveCynicism(x) & JustinKruger(y) & Colleague(z)) -> ProposedBy(y,x))", "all x.(NaiveCynicism(x) -> (ProposedByJustinKruger(x) & ProposedByColleague(x)))", "all x y.((NaiveCynicism(x) & JustinKruger(y) & Colleague(y)) -> ProposedBy(x,y))", "all x y z.((NaiveCynicism(x) & JustinKruger(y) & Coworker(z)) -> ProposedBy(x,y,z))"]}
{"id": "folio_train_2163", "nl": "Thomas Gilovich is a colleague of Justin Kruger. ", "fol": "IsColleagueOf(ThomasGilovich,JustinKruger)", "prediction": ["(Colleague(ThomasGilovich) & JustinKruger(Thomas))", "(Colleague(ThomasGilovich) & JustinKruger(ThomasGilovich))", "all x.((ThomasGilovich(x) & JustinKruger(x)) -> Colleague(x))", "all x.((TomTomGilovich(x) & JustinKruger(x)) -> Colleague(x))", "(Colleague(ThomasGilovich) & JustinKruger(Thomas))", "(Colleague(ThomasGilovich) & JustinKruger(ThomasGilovich))", "all x.((TomTomGilovich(x) & JustinKruger(x)) -> Colleague(x))", "(Colleague(ThomasGilovich) & Colleague(ThomasKruger))", "(Colleague(ThomasGilovich) & JustinKrumger(ThomasGilovich))", "Thomas Gilovich is a colleague of JustinKruger.", "(Colleague(ThomasGilovich) & JustinKruger(ThomasGlovich))", "(Colleague(ThomasGilovich) & JustinKruger(Thomas,Kruger))", "all x.((TomTomGilovich(x) & JustinKruger(x)) -> Colleague(x,y))", "(Colleague(ThomasGilovich) & JustinKrumger(Thomas))", "(ColleagueOfJustinKruger(ThomasGilovich))", "all x.((ThomasGilovich(x) & JustinKruger(x)) -> Colleague(x,y))"]}
{"id": "folio_train_2164", "nl": "Naive cynicism is a philosophy of mind.", "fol": "IsPhilosophyOfMind(NaiveCynicism)", "prediction": ["all x.(NaiveCynicism(x) -> PhilosophyOfMind(x))", "all x.(NaiveCynicism(x) -> PhilosophyOfMent(x))", "all x.(NaiveCynicism(x) -> PhilosophyOfMind(x))", "all x y.((NaiveCynicism(x) & Mind(y)) -> PhilosophyOf(x,y))", "all x.(NaiveCynicism(x) -> PhilosophyOfMind(x))", "all x y.((NaiveCynicism(x) & Mind(y)) -> PhilosophyOf(x,y))", "all x.(NaiveCynicism(x) -> PhilosophiaOfMind(x))", "all x y.((NaiveCynicism(x) & Mind(y)) -> Philosophy(x,y))", "all x y.((NaiveCynicism(x) & Mind(y)) -> PhilosophieOf(x,y))", "all x.(NaiveCynicism(x) -> PhilosophyOfMind(x))", "all x.(NaiveCynicism(x) -> PhilosophyOfMent(x))", "all x.(NaiveCynicism(x) -> PhilosophicalOfMind(x))", "all x.((NaiveCynicism(x) & PhilosophyOfMind(x)) -> NaiveCynicism(x))", "all x.(NaiveCynicism(x) -> PhilosophyOfMent(x))", "all x.(NaiveCynicism(x) -> (PhilosophyOfMind(x)))", "all x y.((NaiveCynicism(x) & Mind(y)) -> Philosophia(x,y))"]}
{"id": "folio_train_2165", "nl": "Thomas Gilovich proposed naive cynicism.", "fol": "ProposedNaiveCynicism(ThomasGilovich,NaiveCynicism)", "prediction": ["all x.((ThomasGilovich(x) & NaiveCynicism(x)) -> Proposed(x))", "all x.((ThomasGilovich(x) & NaiveCynicism(x)) -> Proposes(x,y))", "all x y.((ThomasGilovich(x) & NaiveCynicism(y)) -> Proposed(x,y))", "all x.((ThomasGilovich(x) & NaiveCynicism(x)) -> Proposes(x,y))", "all x.((ThomasGilovich(x) & NaiveCynicism(x)) -> Proposed(x,y))", "all x y.((ThomasGilovich(x) & NaiveCynicism(y)) -> Proposes(x,y))", "all x.((ThomasGilovich(x) & NaiveCynicism(x)) -> Proposes(x))", "all x.(ThomasGilovich(x) -> ProposedNaiveCynicism(x))", "all x y.((ThomasGilovich(x) & NaiveCynicism(y)) -> Proposes(x,y))", "all x.((ThomasGilovich(x) & NaiveCynicism(x)) -> Proposes(x))", "all x.((ThomasGilovich(x) & NaiveCynicism(x)) -> Presented(x))", "all x.((ThomasGilovich(x) & NaiveCynicism(x)) -> Proposes(x,Gilovich))", "all x.((ThomasGilovich(x) & NaiveCynicism(x)) -> Proposes(x,x))", "all x.((ThomasGilovich(x) & NaiveCynicism(x)) -> Proposed(x,Gilovich))", "all x.((ThomasGilovich(x) & NaiveCynicism(x)) -> Proposed(x,x))", "all x.((ThomasGilovich(x) & NaiveCynicism(x)) -> Proposes(x,x))"]}
{"id": "folio_train_2166", "nl": "Justin Kruger propose a philosophy of mind.", "fol": "exists x.(ProposedNaiveCynicism(JustinKruger,x) & IsPhilosophyOfMind(x))", "prediction": ["all x.(ProposesPhilosophyOfMind(x) -> JustinKruger(x))", "all x.((JustinKruger(x) & PhilosophyOfMind(x)) -> Proposes(x,y))", "all x y.((JustinKruger(x) & PhilosophyOfMind(y)) -> Proposes(x,y))", "all x.(ProposesPhilosophyOfMind(x) -> JustinKruger(x))", "all x.((JustinKruger(x) & PhilosophyOfMind(x)) -> Proposes(x,x))", "all x.((JustinKruger(x) & PhilosophyOfMind(x)) -> Proposes(x,y))", "all x y.((JulianKruger(x) & PhilosophyOfMind(y)) -> Proposes(x,y))", "all x y.((JustinKruger(x) & PhilosophyOfMind(y)) -> Propose(x,y))", "all x.((JustinKruger(x) & PhilosophyOfMind(x)) -> Proposes(x))", "all x.((JustinKruger(x) & PhilosophyOfMind(x)) -> Proposes(x,y))", "all x.((JulianKruger(x) & PhilosophyOfMind(x)) -> Proposes(x,JulianKruger))", "all x.((JustinKruger(x) & PhilosophyOfMind(x)) -> Propose(x,y))", "all x.((JulianKruger(x) & PhilosophyOfMind(x)) -> Proposes(x,y))", "all x.((JulietKruger(x) & PhilosophyOfMind(x)) -> Proposes(x,JulietKruger))", "all x.(ProposesPhilosophyOfMind(x) -> JustinKruger(x))", "all x.((JustinKruger(x) & PhilosophyOfMind(x)) -> Propose(x))"]}
{"id": "folio_train_2167", "nl": "Thomas Gilovich worked on philiophies of mind.", "fol": "WorkedOn(ThomasGilovich,PhilosophiesOfMind)", "prediction": ["all x.((ThomasGilovich(x) & PhiliophiesOfMind(x)) -> WorkedOn(x,PhiliophiesOfMind))", "all x y.((ThomasGilovich(x) & PhiliophiesOfMind(y)) -> WorkedOn(x,y))", "all x.((ThomasGilovich(x) & PhiliophiesOfMind(x)) -> WorkedOn(x,y))", "all x.(ThomasGilovich(x) -> WorkedOnPhiliophiesOfMind(x))", "all x.((ThomasGilovich(x) & PhiliophiesOfMind(x)) -> WorksOn(x,y))", "all x y z.((ThomasGilovich(x) & PhiliophiesOfMind(y) & PhiliophiesOfMind(z)) -> WorkedOn(x,y,z))", "all x y.((ThomasGilovich(x) & PhiliophyOfMind(y)) -> WorkedOn(x,y))", "all x.((ThomasGilovich(x) & PhiliophiesOfMind(x)) -> WorksOn(x,PhiliophiesOfMind))", "all x.((ThomasGilovich(x) & PhiliophiesOfMind(x)) -> WorkedOn(x,PhiliophiesOfMind(x))", "all x y.((ThomasGilovich(x) & PhiliophiesOfMind(y)) -> WorksOn(x,y))", "all x.((ThomasGilovich(x) & PhiliophiesOfMind(x)) -> WorkedOn(x,philiophiesOfMind))", "all x.((ThomasGilovich(x) & PhiliophiesOfMent(x)) -> WorkedOn(x,PhiliophiesOfMind))", "all x y z.((ThomasGilovich(x) & PhiliophiesOfMind(y) & PhiliophiesOfMind(z)) -> WorksOn(x,y,z))", "all x.(ThomasGilovich(x) -> WorksOnPhiliophiesOfMind(x))", "all x.((ThomasGilovich(x) & PhiliophiesOfMent(x)) -> WorkedOn(x,PhiliophiesOfMent))", "(WorkedOnPhiliophiesOfMind(ThomasGilovich))"]}
{"id": "folio_train_2168", "nl": "The Turing Award has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming and John McCarthy. ", "fol": "(AwardedTuringAward(DonaldKnuth) & AwardedTuringAward(MarvinMinsky) & AwardedTuringAward(RichardHamming) & AwardedTuringAward(JohnMccarthy))", "prediction": ["All x.(TuringAward(x) -> (AwardedToDonaldKnuth(x) & AwardedToMarvinMinsky(x) & AwardedToRichardHamming(x) & AwardedToJohnMcCarthy(x)))", "all x.((Award(x) & DonaldKnuth(x) & MarvinMinsky(x) & RichardHamming(x) & JohnMcCarthy(x)) -> TuringAward(x))", "All x.(TuringAward(x) -> (AwardedToDonaldKnuth(x) | AwardedToMarvinMinsky(x) | AwardedToRichardHamming(x) | AwardedToJohnMcCarthy(x)))", "(AwardedToDonaldKnuth(Award) & AwardedToMarvinMinsky(Award) & AwardedToRichardHamming(Award) & AwardedToJohnMcCarthy(Award))", "all x y.((TuringAward(x) & DonaldKnuth(y) & MarvinMinsky(y) & RichardHamming(y) & JohnMcCarthy(y)) -> AwardedTo(x,y))", "all x.((Award(x) & DonaldKnuth(x) & MarvinMinsky(x) & RichardHamming(x) & JohnMcCarthy(x)) -> Turing(x))", "all x y z.((TuringAward(x) & DonaldKnuth(y) & MarvinMinsky(z) & RichardHamming(x) & JohnMcCarthy(x)) -> AwardedTo(x,y,z))", "all x y z.((TuringAward(x) & DonaldKnuth(y) & MarvinMinsky(z)) -> (AwardedTo(x,y) & AwardedTo(x,z)))", "all x y z.((TuringAward(x) & DonaldKnuth(y) & MarvinMinsky(z)) -> (AwardedTo(x,y) & AwardedTo(x,z) & RichardHamming(x) & AwardedTo(x,y) & AwardedTo(x,y)))", "all x y z.((TuringAward(x) & DonaldKnuth(y) & MarvinMinsky(z)) -> (AwardedTo(x,y) & AwardedTo(x,z) & RichardHamming(x) & AwardedTo(x,y) & JohnMcCarthy(x)))", "all x y z.((TuringAward(x) & DonaldKnuth(y) & MarvinMinsky(z)) -> (AwardedTo(x,y) & AwardedTo(x,z) & RichardHamming(x) & AwardedTo(x,y) & AwardedTo(x,z)))", "all x y.((TuringAward(x) & DonaldKnuth(y) & MarvinMinsky(y) & RichardHamming(y) & JohnMcCarthy(y)) -> AwardAward(x,y))", "all x y.((TuringAward(x) & DonaldKnuth(y) & MarvinMinsky(y) & RichardHamming(y) & JohnMcCarthy(y)) -> AwardAwarded(x,y))", "all x y z.((TuringAward(x) & DonaldKnuth(y) & MarvinMinsky(z)) -> (AwardedTo(x,y,z) & AwardedTo(x,y) & AwardedTo(x,y) & AwardedTo(x,z)))", "all x y.((TuringAward(x) & DonaldKnuth(y) & MarvinMinsky(y) & RichardHamming(y) & JohnMcCarthy(z)) -> AwardedTo(x,y,z))", "All x.(TuringAward(x) -> (AwardedToDonaldKnuth(x) & AwardedToMarvinMinsky(x) & AwardedToRichardHamming(x) & AwardedToJohnCarthy(x)))"]}
{"id": "folio_train_2169", "nl": "Donald Knuth made major contributions to the analysis of algorithms.", "fol": "MadeContributionsTo(DonaldKnuth,Algorithms)", "prediction": ["all x y.((DonaldKnuth(x) & Algorithm(y)) -> MajorContributionToAnalysis(x,y))", "all x y.((DonaldKnuth(x) & Algorithm(y)) -> MadeMoreContributionsToAnalysis(x,y))", "all x.((DonaldKnuth(x) & AnalysisOfAlgorithms(x)) -> MajorContributions(x))", "all x.((DonaldKnuth(x) & MajorContributions(x)) -> AnalyzesAlgorithms(x))", "all x y.((DonaldKnuth(x) & Algorithm(y)) -> MadeMajorContributionsToAnalysis(x,y))", "all x.((DonaldKnuth(x) & MajorContribution(x)) -> AnalyzesAlgorithms(x))", "all x.((DonaldKnuth(x) & AnalyzesAlgorithms(x)) -> MajorContributions(x))", "Donald Knuth made major contributions to the analysis of Algorithms.", "all x.(DonaldKnuth(x) -> MajorContributionsToAlgorithms(x))", "all x y z.((DonaldKnuth(x) & Algorithm(y) & Algorithm(z)) -> MajorContribution(x,y,z))", "all x y z.((DonaldKnuth(x) & Algorithm(y) & Algorithm(z)) -> MajorContributionToAnalysis(x,y,z))", "all x y z.((DonaldKnuth(x) & Algorithm(y) & Algorithm(z)) -> MajorContributions(x,y,z))", "all x y z.((DonaldKnuth(x) & Algorithm(y) & Algorithm(z)) -> MadeMajorContributionsTo(x,y,z))", "all x y z.((DonaldKnuth(x) & Algorithm(y) & Algorithm(z)) -> MajorContributionTo(x,y,z))", "all x y.((DonaldKnuth(x) & Algorithm(y)) -> MajorContributionsToAnalysis(x,y))", "all x y.((DonaldKnuth(x) & Algorithm(y)) -> MajorContribution(x,y))"]}
{"id": "folio_train_2170", "nl": "Marvin Minsky is recognized by his contributions to the field of artificial intelligence.", "fol": "MadeContributionsTo(MarvinMinsky,Ai)", "prediction": ["all x.((MarvinMinsky(x) & ContributionsToArtificialIntelligence(x)) -> Recognized(x))", "all x y.((MarvinMinsky(x) & ArtificialIntelligence(y)) -> RecognizedByContributions(x,y))", "all x.(MarvinMinsky(x) -> RecognizedByContributionsToArtificialIntelligence(x))", "all x.((MarvinMinsky(x) & ContributionsToArtificialIntelligence(x)) -> RecognizedBy(x,MarvinMinsky))", "all x y.((MarvinMinsky(x) & ArtificialIntelligence(y)) -> RecognizedBy(x,y))", "all x y.((MarvinMinsky(x) & FieldOfArtificialIntelligence(y)) -> RecognizedByContributions(x,y))", "all x.((MarvinMinsky(x) & ContributionsToArtificialIntelligence(x)) -> RecognizedBy(x,MarvinMinsky,x))", "all x.((MarvinMinsky(x) & Contributions(x,artificialIntelligence)) -> Recognized(x))", "all x y.((MarvinMinsky(x) & FieldOfArtificialIntelligence(y)) -> RecognizedBy(x,y))", "all x.((MarvinMinsky(x) & Contributions(x)) -> RecognizedByArtificialIntelligence(x))", "all x y.((MarvinMinsky(x) & ArtificialIntelligence(y)) -> Recognized(x,y))", "all x.(MarvinMinsky(x) -> RecognizedByArtificialIntelligence(x))", "all x y z.((MarvinMinsky(x) & ArtificialIntelligence(y) & Contribution(z)) -> RecognizedBy(x,y,z))", "all x.((MarvinMinsky(x) & Contributions(x,ArtificialIntelligence)) -> Recognized(x))", "all x y z.((MarvinMinsky(x) & ArtificialIntelligence(y) & Contributions(z)) -> RecognizedBy(x,y,z))", "all x.((MarvinMinsky(x) & ContributionToArtificialIntelligence(x)) -> Recognized(x))"]}
{"id": "folio_train_2171", "nl": "Richard Hamming did research on numerical methods.", "fol": "MadeContributionsTo(RichardHamming,NumericalMethods)", "prediction": ["all x.((RichardHamming(x) & NumericalMethods(x)) -> DidResearch(x))", "all x y.((RichardHamming(x) & NumericalMethods(y)) -> DidResearch(x,y))", "all x y.((RichardHamming(x) & NumericalMethod(y)) -> DidResearch(x,y))", "all x.((RichardHamming(x) & NumericalMethods(x)) -> DidResearchOn(x,numbericalMethods))", "all x.((RichardHamming(x) & NumericalMethod(x)) -> DidResearch(x))", "all x y.((RichardHamming(x) & NumericalMethods(y)) -> DidResearchOn(x,y))", "all x y.((RichardHamming(x) & NumericalMethod(y)) -> DidResearchOn(x,y))", "(DoesResearchOnNumericalMethods(RichardHamming))", "all x.((RichardHamming(x) & NumericalMethods(x)) -> DidResearch(x,y))", "all x.((RichardHamming(x) & NumericalMethods(y)) -> DidResearch(x,y))", "all x.(RichardHamming(x) -> DidResearchOnNumericalMethods(x))", "all x.((RichardHamming(x) & NumericalMethods(x)) -> DidResearchOn(x,y))", "all x.((Researcher(x) & RichardHamming(x)) -> NumericalMethods(x))", "(DoesResearchOnNumericalMethods(RichardHamming))", "all x.((RichardHamming(x) & NumericalMethod(x)) -> DidResearchOn(x,numbericalMethods))", "all x.((RichardHamming(x) & NumericalMethods(x)) -> DidResearchOn(x,numericalMethods))"]}
{"id": "folio_train_2172", "nl": "John McCarthy had a central role in creating and shaping the field of artificial inteligence. ", "fol": "MadeContributionsTo(JohnMccarthy,Ai)", "prediction": ["all x.((JohnMcCarthy(x) & ArtificialIntelligence(x)) -> CentralRole(x))", "all x.((JohnMcCarthy(x) & CreatedArtificialIntelligence(x) & ShapedArtificialIntelligence(x)) -> CentralRole(x))", "all x.((JohnMcCarthy(x) & CreatesArtificialIntelligence(x) & ShapesArtificialIntelligence(x)) -> CentralRole(x))", "all x y.((JohnMcCarthy(x) & ArtificialIntelligence(y)) -> CentralRoleInCreatingAndShaping(x,y))", "all x y.((JohnMcCarthy(x) & ArtificialIntelligence(y)) -> (Created(x,y) & Shaped(x,y)))", "all x.((JohnMcCarthy(x) & ArtificialIntelligence(x)) -> CentralRoleInCreatingAndShaping(x))", "all x.(JohnMcCarthy(x) -> (CreatedArtificialIntelligence(x) & ShapedArtificialIntelligence(x)))", "all x.((JohnCarthy(x) & ArtificialIntelligence(x)) -> CentralRole(x))", "all x.((JohnMcCarthy(x) & ArtificialIntelligence(x)) -> (Created(x) & Shaped(x)))", "all x y.((JohnMcCarthy(x) & ArtificialIntelligence(y)) -> CentralRole(x,y))", "all x.((JohnMcCarthy(x) & ArtificialIntelligence(y)) -> CentralRoleInCreatingAndShaping(x,y))", "all x.((JohnMcCarthy(x) & ArtificialIntelligence(x)) -> CentralRoleInCreatingAndShaping(x,Intelligence))", "all x.((JohnMcCarthy(x) & ArtificialIntelligence(y)) -> CentralRole(x,y))", "all x.((JohnMcCarthy(x) & ArtificialIntelligence(x)) -> CentralRoleInCreatingAndShaping(x,intelligence))", "all x.((JohnCarthy(x) & ArtificialIntelligence(x)) -> CentralRoleInCreatingAndShaping(x))", "all x.((JohnMcCarthy(x) & ArtificialIntelligence(x)) -> CentralRoleInCreatingAndShaping(x,y))"]}
{"id": "folio_train_2173", "nl": "No Turing Award winners contributed to the field of numerical methods.", "fol": "-exists x.(AwardedTuringAward(x) & MadeContributionsTo(x,NumericalMethods))", "prediction": ["-exists x.(Winner(x) & TuringAward(x) & ContributesToNumericalMethods(x))", "-exists x.(Winner(x) & TuringAward(x) & ContributesToNumericalMethods(x))", "-exists x.(Winner(x) & TuringAward(x) & ContributedToNumericalMethods(x))", "-exists x.(Winner(x) & TuringAward(x) & ContributedToNumericalMethods(x))", "-exists x.(TuringAwardWinner(x) & ContributesToNumericalMethods(x))", "-exists x.(TuringAwardWinner(x) & ContributesToNumericalMethods(x))", "-exists x.(Winner(x) & TuringAward(x) & ContributesToNumbericalMethods(x))", "-exists x.(TuringAwardWinner(x) & ContributedToNumericalMethods(x))", "-exists x.(Winner(x) & TuringAward(x) & ContributedTo(x,numbericalMethods))", "-exists x.(Winner(x) & TuringAward(x) & ContributesTo(x,numbericalMethods))", "-exists x.(TuringAwardWinner(x) & ContributedToNumericalMethods(x))", "-exists x.(Winner(x) & TuringAward(x) & ContributesToNumericalMethod(x))", "-exists x.(Winner(x) & TuringAward(x) & ContributesToNumericalMethod(x))", "-exists x.(Winner(x) & TuringAward(x) & ContributionsToNumericalMethods(x))", "-exists x.(Winner(x) & TuringAward(x) & ContributesToNumericMethods(x))", "-exists x.(Winner(x) & TuringAward(x) & ContributedToNumericalMethod(x))"]}
{"id": "folio_train_2174", "nl": "No easy Leetcode problems have an AC rate lower than 20 percent. ", "fol": "all x.(IsEasyProblem(x) -> -HasLowACRate(x))", "prediction": ["-exists x.(EasyLeetcodeProblem(x) & LowACRate(x,20))", "-exists x.(EasyLeetcodeProblem(x) & HasACRateLowerThan(x,20))", "-exists x.(EasyLeetcodeProblem(x) & LowerThan(x,20))", "-exists x.(EasyLeetcodeProblem(x) & HasACRateLowerThan20Percent(x))", "-exists x.(EasyLeetcodeProblem(x) & ACRateLowerThan(x,20))", "-exists x.(EasyLeetcodeProblem(x) & LowerThan(x,20))", "-exists x.(EasyLeetcodeProblem(x) & ACRateLowerThan20Percent(x))", "-exists x.(EasyLeetcodeProblem(x) & HasACRateLessThan(x,20))", "-exists x.(EasyLeetcodeProblem(x) & ACRateLessThan(x,20))", "-exists x.(EasyLeetcodeProblem(x) & HasACRateLessThan20Percent(x))", "-exists x.(EasyLeetcodeProblem(x) & LowAACRate(x,20))", "-exists x.(EasyLeetcodeProblem(x) & LowERRate(x,20))", "-exists x.(EasyLeetcodeProblem(x) & LowerThan20Percent(x))", "-exists x.(EasyLeetcodeProblem(x) & -HasACRateLowerThan(x,20))", "-exists x.(EasyLeetcodeProblem(x) & HasACRateLowerThan(x,20))", "-exists x.(EasyLeetcodeProblem(x) & -HasACRateLowerThan20Percent(x))"]}
{"id": "folio_train_2175", "nl": "All Leetcode problems recommended to novices are easy.                                                                                                       ", "fol": "all x.(IsRecommendedToNovices(x) -> IsEasyProblem(x))", "prediction": ["all x.(LeetcodeProblem(x) -> Easy(x))", "all x.((LeetcodeProblem(x) & RecommendedToNovees(x)) -> Easy(x))", "all x.((LeetcodeProblem(x) & RecommendedToNovels(x)) -> Easy(x))", "all x.((LeetcodeProblem(x) & RecommendedToNoveals(x)) -> Easy(x))", "all x y.((LeetcodeProblem(x) & Newbie(y)) -> Easy(x))", "all x.((LeetcodeProblem(x) & RecommendedToNinjas(x)) -> Easy(x))", "all x.(LeetcodeProblem(x) -> Easy(x))", "all x y.((LeetcodeProblem(x) & Newbie(y)) -> Easy(x,y))", "all x.(LeetcodeProblem(x) -> EasyToRecommend(x))", "all x.(LeetcodeProblem(x) -> EasyForNovees(x))", "all x.(LeetcodeProblem(x) -> (Easy(x) | Easy(x)))", "all x.((LeetcodeProblem(x) & RecommendsToNoveals(x)) -> Easy(x))", "all x.((LeetcodeProblem(x) & RecommendsToNovees(x)) -> Easy(x))", "all x.((LeetcodeProblem(x) & RecommendatedToNoveals(x)) -> Easy(x))", "all x.(LeetcodeProblem(x) -> (Easy(x) & RecommendedToNovels(x)))", "all x.(LeetcodeProblem(x) -> (Easy(x) & RecommendedToNoveals(x)))"]}
{"id": "folio_train_2176", "nl": "Leetcode problems either have an AC rate lower than 20 percent or are starred by more than 1 thousand users. ", "fol": "all x.((HasLowACRate(x) & -IsStarredByUsers(x)) | (-HasLowACRate(x) & IsStarredByUsers(x)))", "prediction": ["all x.(LeetcodeProblem(x) -> (HasACRateLowerThan(x,20) | StartedByMoreThan(x,1000)))", "all x.(LeetcodeProblem(x) -> (HasACRateLowerThan20Percent(x) | StartedByMoreThan1000Users(x)))", "all x.(LeetcodeProblem(x) -> ((HasACRateLowerThan(x,20) | StartedByMoreThan(x,1000))))", "all x.(LeetcodeProblem(x) -> ((HasACRateLowerThan20Percent(x) | StartedByMoreThan1000Users(x))))", "all x.(LeetcodeProblem(x) -> (HasACRateLowerThan(x,20) | StartedByMoreThan(x,1000)))", "all x.(LeetcodeProblem(x) -> (HasACRateLessThan(x,20) | StartedByMoreThan(x,1000)))", "all x.(LeetcodeProblem(x) -> (HasACRateLowerThan20Percent(x) | StartedByMoreThan1000Users(x)))", "all x.(LeetcodeProblem(x) -> (HasACRateLessThan20Percent(x) | StartedByMoreThan1000Users(x)))", "all x.(LeetcodeProblem(x) -> ((ACRateLowerThan20Percent(x) | StartedByMoreThan1000Users(x))))", "all x.(LeetcodeProblem(x) -> ((ACRateLowerThan(x,20) | StartedByMoreThan(x,1000))))", "all x.(LeetcodeProblem(x) -> ((HasACRateLessThan(x,20) | StartedByMoreThan(x,1000))))", "all x.(LeetcodeProblem(x) -> (HasACRateLowerThan(x,20) | StartedBy(x,1000)))", "all x.(LeetcodeProblem(x) -> (ACRateLowerThan(x,20) | StartedByMoreThan(x,1000)))", "all x.(LeetcodeProblem(x) -> (AACRateLowerThan(x,20) | StartedByMoreThan(x,1000)))", "all x.(LeetcodeProblem(x) -> (HasACRateLowerThan20Percent(x) | StartedByMoreThan1000(x)))", "all x.((LeetcodeProblem(x) & (ACRateLowerThan(x,20) | StartedByMoreThan(x,1000))) -> Has(x,20))"]}
{"id": "folio_train_2177", "nl": "All hard Leetcode problems are starred by more than 1 thousand users. ", "fol": "all x.(IsHardProblem(x) -> IsStarredByUsers(x))", "prediction": ["all x.(HardLeetcodeProblem(x) -> StartedByMoreThan1000Users(x))", "all x.(HardLeetcodeProblem(x) -> StartedByMoreThan(x,1000))", "all x y.((HardLeetcodeProblem(x) & User(y)) -> StartedBy(x,y))", "all x.((HardLeetcodeProblem(x) & StartedByMoreThan1000Users(x)) -> Started(x))", "all x.((HardLeetcodeProblem(x) & StartedByMoreThan1000Users(x)) -> StartedBy(x))", "all x.(LeetcodeProblem(x) -> StartedByMoreThan1000Users(x))", "all x.((HardLeetcodeProblem(x) & StartedByMoreThan(x,1000)) -> StartedBy(x))", "all x.((HardLeetcodeProblem(x) & StartedByMoreThan1000Users(x)) -> StartedByMoreThan1000Users(x))", "all x.(LeetcodeProblem(x) -> StartedByMoreThan(x,1000))", "all x y z.((HardLeetcodeProblem(x) & User(y) & User(z)) -> StartedBy(x,y,z))", "all x.(HardLeetcodeProblem(x) -> StartedByMoreThanOneTen(x))", "all x.((HardLeetcodeProblem(x) & StartedByMoreThan(x,1000)) -> StartedBy(x,1000))", "all x y.((HardLeetcodeProblem(x) & User(y) & StartedBy(x,y)) -> MoreThan(x,y))", "all x.((HardLeetcodeProblem(x) & StartedByMoreThan1000Users(x)) -> StartedBy(x,y))", "all x.((HardLeetcodeProblem(x) & StartedByMoreThan(x,1000)) -> Started(x))", "all x y.((HardLeetcodeProblem(x) & User(y) & StartedBy(x,y)) -> MoreThan(y,x))"]}
{"id": "folio_train_2178", "nl": "No Leetcode problems published after 2022 are starred by more than 1 thousand users. ", "fol": "all x.(IsPublishedAfter2022(x) -> -IsStarredByUsers(x))", "prediction": ["all x.((LeetcodeProblem(x) & PublishedAfter2022(x)) -> StartedByMoreThan1000Users(x))", "all x.((LeetcodeProblem(x) & PublishedAfter2022(x)) -> StartedByMoreThan(x,1000))", "all x.((LeetcodeProblem(x) & PublishedAfter2022(x) & StartedByMoreThan1000Users(x)) -> -StartedByMoreThan1000Users(x))", "all x.((LeetcodeProblem(x) & PublishedAfter2022(x) & StartedByMoreThan1000Users(x)) -> -Started(x))", "all x.((LeetcodeProblem(x) & PublishedAfter2022(x)) -> StartedByMoreThanOneTen(x))", "all x.((LeetcodeProblem(x) & PublishedAfter2022(x) & StartedByMoreThan1000Users(x)) -> -StartedBy(x))", "all x.((LeetcodeProblem(x) & PublishedAfter2020(x)) -> StartedByMoreThan1000Users(x))", "all x.((LeetcodeProblem(x) & PublishedAfter2022(x) & MoreThan1000Users(x)) -> Started(x))", "-exists x.(LeetcodeProblem(x) & PublishedAfter2022(x) & StartedByMoreThan(x,1000))", "-exists x.(LeetcodeProblem(x) & PublishedAfter2022(x) & StartedByMoreThan1000Users(x))", "all x.((LeetcodeProblem(x) & PublishedAfter2022(x) & StartedByMoreThan1000Users(x)) -> -StartedBy(x,y))", "all x.((LeetcodeProblem(x) & PublishedAfter2022(x) & StartedByMoreThan1000Users(x)) -> -StartedByMoreThan(x))", "all x.((LeetcodeProblem(x) & PublishedAfter2022(x)) -> StartedByMoreThan(x,y))", "all x y.((LeetcodeProblem(x) & PublishedAfter(x,y) & 2022(y)) -> StartedByMoreThan(x,y))", "all x.((LeetcodeProblem(x) & PublishedAfter2020(x)) -> StartedByMoreThan(x,1000))", "all x.((LeetcodeProblem(x) & PublishedAfter2022(x) & StartedByMoreThan(x,1000)) -> -StartedBy(x,1000))"]}
{"id": "folio_train_2179", "nl": "2Sum is not recommended to novices and hard. ", "fol": "-(IsRecommendedToNovices(Twosum) & IsHardProblem(Twosum))", "prediction": ["all x.((Sum(x) & -RecommendedToNovees(x) & -RecommendedToHard(x)) -> -RecommendedToNovees(x))", "all x.(2Sum(x) -> (-RecommendedToNovees(x) & -RecommendedToHard(x)))", "all x.((Sum(x) & -RecommendedToNovels(x) & -RecommendedToHard(x)) -> -RecommendedToNovels(x))", "all x.((Sum(x) & -RecommendedToNoveles(x) & -RecommendedToHard(x)) -> -RecommendedToNoveles(x))", "all x.(2Sum(x) -> (-RecommendedToNovels(x) & -RecommendedToHard(x)))", "all x.(2Sum(x) -> -RecommendedToNovees(x) & -RecommendedToHard(x))", "all x.(Sum(x) -> (-RecommendedToNovees(x) & -RecommendedToHard(x)))", "all x.(2Sum(x) -> (-RecommendedToNoveles(x) & -RecommendedToHard(x)))", "all x.(2Sum(x) -> -RecommendedToNovels(x) & -RecommendedToHard(x))", "all x.(Sum(x) -> -RecommendedToNovees(x) & -RecommendedToHard(x))", "all x.((Sum(x) & -RecommendedToNovees(x) & -RecommendedToHard(x)) -> -RecommendedToNovices(x))", "all x.((Sum(x) & -RecommendedToNovees(x) & -RecommendedToHard(x)) -> -RecommendedToNovels(x))", "(-RecommendedToNovees(2Sum) & -RecommendedToHard(2Sum))", "all x.((Sum(x) & -RecommendedToNovels(x) & -RecommendedToHard(x)) -> -RecommendedToNovices(x))", "all x.(2Sum(x) -> -(RecommendedToNovees(x) & RecommendedToHard(x)))", "(-RecommendedToNoveles(2Sum) & -RecommendedToHard(2Sum))"]}
{"id": "folio_train_2180", "nl": "4Sum is either starred by more than 1 thousand users and published after 2022, or neither starred by more than 1 thousand users nor published after 2022. ", "fol": "-((IsStarredByUsers(Foursum) & -IsPublishedAfter2022(Foursum)) | (-IsStarredByUsers(Foursum) & IsPublishedAfter2022(Foursum)))", "prediction": ["all x.(4Sum(x) -> ((StartedByMoreThan1000Users(x) & PublishedAfter2022(x)) | (-StartedByMoreThan1000Users(x) & PublishedAfter2022(x))))", "all x.((Sum(x) & StartedByMoreThan1000Users(x) & PublishedAfter2022(x)) | (-StartedByMoreThan1000Users(x) & -PublishedAfter2022(x))))", "all x.(Sum(x) -> ((StartedByMoreThan1000Users(x) & PublishedAfter2022(x)) | (-StartedByMoreThan1000Users(x) & PublishedAfter2022(x))))", "all x.(4Sum(x) -> ((StartedByMoreThan1000Users(x) & PublishedAfter2022(x)) | (-StartedByMoreThan1000Users(x) & PublishedAfter2022(x)))))", "all x.((Sum(x) & StartedByMoreThan1000Users(x) & PublishedAfter2022(x)) | (-StartedByMoreThan1000Users(x) & PublishedAfter2022(x))))", "all x.(Sum(x) -> ((StartedByMoreThan1000Users(x) & PublishedAfter2022(x)) | (-StartedByMoreThan1000Users(x) & PublishedAfter2022(x)))))", "all x.((4Sum(x) & StartedByMoreThan1000Users(x) & PublishedAfter2022(x)) | (-StartedByMoreThan1000Users(x) & -PublishedAfter2022(x))))", "all x.(4Sum(x) -> ((StartedByMoreThan1000Users(x) & PublishedAfter2022(x)) | (-StartedByMoreThan1000Users(x) & -PublishedAfter2022(x))))", "all x.(4Sum(x) -> ((starredByMoreThan1000Users(x) & PublishedAfter2022(x)) | (-starredByMoreThan1000Users(x) & PublishedAfter2022(x))))", "all x.(Sum(x) -> ((StartedByMoreThan1000Users(x) & PublishedAfter2022(x)) | (-StartedByMoreThan1000Users(x) & -PublishedAfter2022(x))))", "all x.(4Sum(x) -> ((StartedByMoreThan1000Users(x) & PublishedAfter2022(x)) | -StartedByMoreThan1000Users(x) & -PublishedAfter2022(x))))", "all x.((4Sum(x) & StartedByMoreThan1000Users(x) & PublishedAfter2022(x)) | (-StartedByMoreThan1000Users(x) & PublishedAfter2022(x))))", "all x.((Sum(x) & StartedByMoreThan(x,1000) & PublishedAfter(x,2022)) | (-StartedByMoreThan(x,1000) & -PublishedAfter(x,2022))))", "all x.(4Sum(x) -> ((StartedByMoreThan1000Users(x) & PublishedAfter2022(x)) | (-StartedByMoreThan1000Users(x) & -PublishedAfter2022(x)))))", "all x.(Sum(x) -> ((StartedByMoreThan1000Users(x) & PublishedAfter2022(x)) | -StartedByMoreThan1000Users(x) & -PublishedAfter2022(x)))", "all x.(4Sum(x) -> ((StartedByMoreThan1000Users(x) & PublishedAfter2022(x)) | -StartedByMoreThan1000Users(x) & -PublishedAfter2022(x)))"]}
{"id": "folio_train_2181", "nl": "2Sum is an easy Leetcode problem.", "fol": "IsEasyProblem(Twosum)", "prediction": ["2Sum is anEasyLeetcodeProblem(x)", "2Sum is an EasyLeetcodeProblem(x)", "all x.(Sum(x) -> EasyLeetcodeProblem(x))", "all x.(2Sum(x) -> EasyLeetcodeProblem(x))", "all x.((Sum(x) & EasyLeetcodeProblem(x)) -> EasyLeetcodeProblem(x))", "all x.((Sum(x) & EasyLeetcodeProblem(x)) -> Easy(x))", "2Sum(x) -> EasyLeetcodeProblem(x))", "All x.(2Sum(x) -> EasyLeetcodeProblem(x))", "All x.(Sum(x) -> EasyLeetcodeProblem(x))", "2Sum(x) -> EasyLeetcodeProblem(x))", "2Sum is anEasyLeetcodeProblem(x))", "all x.((Sum(x) & EasyLeetcodeProblem(x)) -> 2Sum(x))", "(EasyLeetcodeProblem(2Sum) & EasyLeetcodeProblem(2Sum))", "all x.((Sum(x) & EasyLeetcodeProblem(x)) -> EasyLeetcodeProblem(x))", "all x.((Sum(x) & EasyLeetcodeProblem(x)) -> EasyLeetcode(x))", "2Sum is anEasyLeetcodeProblem."]}
{"id": "folio_train_2182", "nl": "2Sum is not an easy Leetcode problem.", "fol": "-IsEasyProblem(Twosum)", "prediction": ["-EasyLeetcodeProblem(2Sum)", "all x.(2Sum(x) -> -EasyLeetcodeProblem(x))", "2Sum is -EasyLeetcodeProblem(x))", "all x.(Sum(x) -> -EasyLeetcodeProblem(x))", "2Sum - EasyLeetcodeProblem(x))", "2Sum is notEasyLeetcodeProblem(x)", "2Sum is notEasyLeetcodeProblem(x) & -EasyLeetcodeProblem(x))", "2Sum is notEasyLeetcodeProblem(x))", "2Sum is notEasyLeetcodeProblem(x) -> -EasyLeetcodeProblem(x))", "2Sum is notEasyLeetcodeProblem(2))", "2Sum -EasyLeetcodeProblem(x))", "2Sum is notEasyLeetcodeProblem(x) -> -EasyLeetcodeProblem(x))", "2Sum is -EasyLeetcodeProblem(2))", "2Sum & -EasyLeetcodeProblem(x))", "2Sum - EasyLeetcodeProblem(2))", "2Sum is not anEasyLeetcodeProblem(x))"]}
{"id": "folio_train_2183", "nl": "4Sum is a Leetcode problem recommended to the novice or is hard.", "fol": "(IsRecommendedToNovices(Foursum) | IsHardProblem(Foursum))", "prediction": ["all x.((LeetcodeProblem(x) & (Novel(x) | Hard(x))) -> 4Sum(x))", "all x.((LeetcodeProblem(x) & (Novell(x) | Hard(x))) -> 4Sum(x))", "all x.((LeetcodeProblem(x) & (NeophytcodeProblem(x) | HardProblem(x))) -> 4Sum(x))", "all x.(4Sum(x) -> (LeetcodeProblem(x) & (NeophytcodeProblem(x) | HardProblem(x))))", "all x.((LeetcodeProblem(x) & (Neptune(x) | Hard(x))) -> 4Sum(x))", "all x.((LeetcodeProblem(x) & (Novice(x) | Hard(x))) -> 4Sum(x))", "all x.(4Sum(x) -> (LeetcodeProblem(x) & (Novel(x) | Hard(x))))", "all x.(4Sum(x) -> (LeetcodeProblem(x) & (RecommendedToNovel(x) | Hard(x))))", "all x.((LeetcodeProblem(x) & (Noveptic(x) | Hard(x))) -> 4Sum(x))", "all x.((LeetcodeProblem(x) & (Newbie(x) | Hard(x))) -> 4Sum(x))", "all x.((LeetcodeProblem(x) & (Noob(x) | Hard(x))) -> 4Sum(x))", "all x.(4Sum(x) -> (LeetcodeProblem(x) & (Neptune(x) | Hard(x))))", "all x.(4Sum(x) -> (LeetcodeProblem(x) & (Novell(x) | Hard(x))))", "all x.(4Sum(x) -> (LeetcodeProblem(x) & (RecommendedToNeptune(x) | Hard(x))))", "all x.(4Sum(x) -> (LeetcodeProblem(x) & (Neophyte(x) | Hard(x))))", "all x.(4Sum(x) -> (LeetcodeProblem(x) & (RecommendedToNovee(x) | Hard(x))))"]}
{"id": "folio_train_2184", "nl": "4Sum is neither a 2Sum Leetcode problem recommended to the novice nor a Leetcode problem that's hard.", "fol": "(-(IsRecommendedToNovices(Twosum) & IsEasyProblem(Foursum)) & -IsHardProblem(Foursum))", "prediction": ["all x.((LeetcodeProblem(x) & -RecommendedToNovel(x) & -HardLeetcodeProblem(x)) -> 4Sum(x))", "all x.((LeetcodeProblem(x) & -RecommendedToNewbie(x) & -HardLeetcodeProblem(x)) -> 4Sum(x))", "all x.((LeetcodeProblem(x) & -RecommendedToNovee(x) & -HardLeetcodeProblem(x)) -> 4Sum(x))", "all x.((LeetcodeProblem(x) & -LeetcodeProblem(x) & -LeetcodeProblem(x) & -LeetcodeProblem(x) & HardProblem(x)) -> 4Sum(x))", "all x.((LeafcodeProblem(x) & -RecommendedToNovel(x) & -HardLeafcodeProblem(x)) -> 4Sum(x))", "all x.((LeetcodeProblem(x) & -RecommendedToNeptune(x) & -HardLeetcodeProblem(x)) -> 4Sum(x))", "all x.((LeetcodeProblem(x) & -(LeetcodeProblem(x) & RecommendedToNovel(x)) | LeetcodeProblem(x) & Hard(x))) -> 4Sum(x))", "all x.((LeetcodeProblem(x) & -LeetcodeProblem(x) & -LeetcodeProblem(x) & -LeetcodeProblem(x) & -LeetcodeProblem(x) & HardProblem(x)) -> 4Sum(x))", "all x.((LeetcodeProblem(x) & -RecommendedToNoveau(x) & -HardLeetcodeProblem(x)) -> 4Sum(x))", "all x.((LeetcodeProblem(x) & -LeetcodeProblem(x) & -LeetcodeProblem(x) & -LeetcodeProblem(x) & Hard(x)) -> 4Sum(x))", "all x.((LeetcodeProblem(x) & -LeetcodeProblem(x) & -LeetcodeProblem(x) & -LeetcodeProblem(x) & -LeetcodeProblem(x) & Hard(x)) -> 4Sum(x))", "all x.((LeetcodeProblem(x) & -(LeetcodeProblem(x) & RecommendedToNovee(x)) | LeetcodeProblem(x) & Hard(x))) -> 4Sum(x))", "all x.((LeetcodeProblem(x) & -LeetcodeProblem(x) & -LeetcodeProblem(x) & -LeetcodeProblem(x) & -HardProblem(x)) -> 4Sum(x))", "all x.((LeetcodeProblem(x) & -LeetcodeProblem(x) & 2Sum(x) & -LeetcodeProblem(x) & HardProblem(x)) -> 4Sum(x))", "all x.((LeetcodeProblem(x) & -LeetcodeProblem(x) & -LeetcodeProblem(x) & -LeetcodeProblem(x) & -Hard(x)) -> 4Sum(x))", "all x.((LeetcodeProblem(x) & -LeetcodeProblem(x) & -LeetcodeProblem(x) & HardProblem(x)) -> 4Sum(x))"]}
{"id": "folio_train_2185", "nl": "Show Your Love is a song recorded by the South Korean boy band BtoB 4u.", "fol": "(IsSong(Showyourlove) & IsRecordedBy(Showyourlove,Btob4u) & IsSouthKorean(Btob4u) & IsBoyBand(Btob4u))", "prediction": ["ShowYourLove(Song) -> RecordedBySouthKoreanBandBtoB4u(Song))", "ShowYourLove(Song) -> (RecordedBySouthKoreanBand(BtoB4u) & SouthKoreanBand(BtoB4u)))", "ShowYourLove(Song) -> RecordedBySouth KoreanBandBtoB4u(Song))", "ShowYourLove(x) -> RecordedBySouthKoreanBandBtoB4u(x))", "ShowYourLove(Song) -> (RecordedBySouthKoreanBand(BtoB4u) & SouthKoreanBand(BtoB4u) & SouthKoreanBand(BtoB4u)))", "ShowYourLove(Song) & RecordedBySouthKoreanBandBtoB4u(Song)", "ShowYourLove(x) -> RecordedBySouth KoreanBandBtoB4u(x))", "ShowYourLove(Song) -> RecordedBySouthKoreanBand(BtoB4u))", "ShowYourLove(Song) -> (RecordedBySouthKoreanBand(BtoB4u) & SouthKoreanBand(BtoB4u) & KoreanBand(BtoB4u)))", "ShowYourLove(Song) -> (RecordedBySouthKoreanBand(BtoB4u) & RecordedBySouthKoreanBand(BtoB4u)))", "ShowYourLove(song) -> RecordedBySouth KoreanBandBtoB4u(s))", "ShowYourLove(Song) -> (RecordedBySouthKoreanBandBtoB4u(Song) & SouthKoreanBand(Song)))", "ShowYourLove(Song) - RecordedBySouthKoreanBandBtoB4u(Song))", "ShowYourLove(Song) -> (RecordedBySouthKoreanBandBtoB4u(Song) & RecordedBySouthKoreanBand(Song)))", "ShowYourLove(Song) -> RecordedBySouth KoreanBandBtoB4u(Song))", "ShowYourLove(Song) -> (RecordedBySouthKoreanBandBtoB4u(Song) & SouthKoreanBandBtoB4u(Song)))"]}
{"id": "folio_train_2186", "nl": "The lead single of the extended play Inside is Show Your Love.", "fol": "(IsExtendedPlay(Inside) & IsLeadSingleOf(Showyourlove,Inside))", "prediction": ["All x.((LeadSingle(x) & ExtendedPlayInside(x)) -> ShowYourLove(x))", "all x.((LeadSingle(x) & ExtendedPlayInside(x)) -> ShowYourLove(x))", "All x.((LeadSingle(x) & ExtendedPlay(x) & Inside(x)) -> ShowYourLove(x))", "All x.((LeadSingle(x) & ExtendedPlay(x)) -> ShowYourLove(x))", "all x.((LeadSingle(x) & ExtendedPlay(x) & Inside(x)) -> ShowYourLove(x))", "all x.((LeadSingle(x) & ExtendedPlay(x)) -> ShowYourLove(x))", "All x.((ExtendedPlay(x) & LeadSingle(x)) -> ShowYourLove(x))", "All x y.((LeadSingle(x) & ExtendedPlayInside(y)) -> ShowYourLove(x,y))", "All x y.((LeadSingle(x) & ExtendedPlay(y) & Inside(y)) -> ShowYourLove(x,y))", "All x.(LeadSingle(x) -> ShowYourLove(x))", "all x y.((LeadSingle(x) & ExtendedPlay(y) & Inside(y)) -> ShowYourLove(x,y))", "LedSingleOfExtendedPlayInside(x) -> ShowYourLove(x))", "All x y.((ExtendedPlay(x) & LeadSingle(y)) -> ShowYourLove(y))", "All x.(ExtendedPlayInside(x) -> ShowYourLove(x))", "All x y.((LeadSingle(x) & ExtendedPlay(y)) -> ShowYourLove(x,y))", "all x y.((LeadSingle(x) & ExtendedPlay(y)) -> ShowYourLove(x,y))"]}
{"id": "folio_train_2187", "nl": "Show Your Love contains a hopeful message.", "fol": "ContainsMessage(Showyourlove,Hopefulmessage)", "prediction": ["all x.((ShowYourLove(x) & HopefulMessage(x)) -> ShowYourLove(x))", "all x.(ShowYourLove(x) -> ContainsHopefulMessage(x))", "all x.(ShowYourLove(x) -> HopefulMessage(x))", "All x.((ShowYourLove(x) & HopefulMessage(x)) -> ShowYourLove(x))", "All x.(ShowYourLove(x) -> ContainsHopefulMessage(x))", "All x.(ShowYourLove(x) -> HopefulMessage(x))", "ShowYourLove(ShowYourLove) ContainsHopefulMessage(ShowYourLove)", "all x.((ShowYourLove(x) & HopefulMessage(x)) -> Contains(x,y))", "all x y.((ShowYourLove(x) & HopefulMessage(y)) -> Contains(x,y))", "all x.((ShowYourLove(x) & HopefulMessage(x)) -> Contains(x))", "ShowYourLove(x) ContainsHopefulMessage(x))", "all x y.((ShowYourLove(x) & HopefulMessage(y)) -> ShowYourLove(x,y))", "ShowYourLove(x) -> ContainsHopefulMessage(x))", "all x.(ShowYourLove(x) -> HasHopefulMessage(x))", "All x y.((ShowYourLove(x) & HopefulMessage(y)) -> Contains(x,y))", "all x y.((ShowYourLove(x) & HopefulMessage(y)) -> ShowYourLove(x))"]}
{"id": "folio_train_2188", "nl": "BtoB 4u member Hyunsik wrote Show Your Love.", "fol": "(IsMemberOf(Hyunsik,Btob4u) & WroteSong(Hyunsik,Showyourlove))", "prediction": ["all x.((BtoB4uMember(x) & Hyunsik(x)) -> WritesShowYourLove(x))", "All x.((BtoB4uMember(x) & Hyunsik(x)) -> WritesShowYourLove(x))", "all x.((BtoB4uMember(x) & Hyunsik(x)) -> WrittenShowYourLove(x))", "(BtoB4uMember(Hyunsik) & WritesShowYourLove(Hyunsik))", "All x.((BtoB4uMember(x) & Hyunsik(x)) -> WrittenShowYourLove(x))", "all x.((BtoB4uMember(x) & Hyunsik(x)) -> ShowYourLove(x))", "all x.(BtoB4uMember(x) -> HyunsikWrittenShowYourLove(x))", "Hyunsik, BtoB4u member, wrote ShowYourLove.", "All x.((BtoB4uMember(x) & Hyunsik(x)) -> ShowYourLove(x))", "all x.(BtoB4uMember(x) -> HyunsikWrittensShowYourLove(x))", "All x.(BtoB4uMember(x) -> HyunsikWrittenShowYourLove(x))", "all x.((BtoB4uMember(x) & Hyunsik(x)) -> WritedShowYourLove(x))", "all x.((BtoB4uMember(x) & Hyunsik(x)) -> WriteShowYourLove(x))", "all x.(BtoB4uMember(x) -> HyunsikWritesShowYourLove(x))", "all x.(BtoB4u(x) -> HyunsikWrittenShowYourLove(x))", "All x.(BtoB4uMember(x) -> HyunsikWrittensShowYourLove(x))"]}
{"id": "folio_train_2189", "nl": "There is a music video for Show Your Love.", "fol": "HasMusicVideoFor(Showyourlove)", "prediction": ["exists x.(MusicVideo(x) & ShowYourLove(x))", "exists x.(MusicVideo(x) & ForShowYourLove(x))", "exists x.(MusicVideo(x) & MusicVideo(x) & ShowYourLove(x))", "exists x.(MusicVideo(x) & For(x,ShowYourLove))", "Exists x.(MusicVideo(x) & ShowYourLove(x))", "exists x.(MusicVideo(x) & MusicVideo(x) & ForShowYourLove(x))", "exists x.(MusicVideo(x) & MusicViolence(x) & ShowYourLove(x))", "exists x.(MusicViolence(x) & ShowYourLove(x))", "exists x y.(MusicVideo(x) & ShowYourLove(y))", "exists x.(MusicVideoForShowYourLove(x) & MusicVideoForShowYourLove(x))", "Exists x.(MusicVideo(x) & ForShowYourLove(x))", "exists x y.(MusicVideo(x) & ShowYourLove(y) & For(x,y))", "exists x.(MusicViolet(x) & ShowYourLove(x))", "exists x.(MusicVideoFor(x,ShowYourLove))", "exists x.(MusicVideoForShowYourLove(x))", "exists x.(MusicVideo(x) & forShowYourLove(x))"]}
{"id": "folio_train_2190", "nl": "Show your love wasn't written by a member of a boy band.", "fol": "-exists x.(IsMemberOf(x,Btob4u) & WroteSong(x,Showyourlove))", "prediction": ["all x y.((Love(x) & MemberOfBirdBand(y)) -> -WrittenBy(x,y))", "all x y.((Love(x) & BoyBand(y)) -> -WrittenBy(x,y))", "all x y.((Living(x) & MemberOfBirdBand(y)) -> -WrittenBy(x,y))", "all x y.((Living(x) & BoyBand(y)) -> -WrittenBy(x,y))", "all x y.((Love(x) & MemberOfBoyBand(y)) -> -WrittenBy(x,y))", "all x y z.((Love(x) & MemberOfBirdBand(y) & MemberOf(z,y)) -> -WrittenBy(x,y))", "all x y.((MemberOfBirdBand(x) & MemberOf(y,x)) -> -WrittenBy(x,y))", "all x y.((Friend(x) & BoyBand(y)) -> -WrittenBy(x,y))", "all x y.((BirdBand(x) & Member(y)) -> -WrittenBy(y,x))", "all x.((MemberOfBirdBand(x) & -WrittenBy(x,BabyBand)) -> ShowLove(x))", "all x y z.((Love(x) & MemberOfBirdBand(y) & MemberOf(z)) -> -WrittenBy(x,y,z))", "all x.((MemberOfBirdBand(x) & -WrittenBy(x,y)) -> ShowLove(x))", "all x y.((BirdBand(x) & MemberOf(y,x)) -> -WrittenBy(x,y))", "all x y.((BirdBand(x) & Member(y)) -> -WrittenBy(x,y))", "all x y z.((Love(x) & MemberOfBirdBand(y) & MemberOf(z,y)) -> -WrittenBy(x,z))", "all x y z.((Love(x) & MemberOfBirdBand(y) & MemberOf(z)) -> -WrittenBy(x,y))"]}
{"id": "folio_train_2191", "nl": "A lead single of inside contains a a hopeful message.", "fol": "exists x.(IsLeadSingleOf(x,Inside) & ContainsMessage(x,Hopefulmessage))", "prediction": ["all x.((LeadSingle(x) & Inside(x)) -> ContainsHopefulMessage(x))", "all x.(LeadSingleOfInside(x) -> ContainsHopefulMessage(x))", "all x.(LeadSingle(x) -> ContainsHopefulMessage(x))", "all x.(LeadSingle(x) -> InsideContainsHopefulMessage(x))", "all x y.((LeadSingle(x) & Inside(x)) -> ContainsHopefulMessage(x,y))", "all x y.((LeadSingle(x) & Inside(y)) -> ContainsHopefulMessage(x,y))", "all x y.((LeadSingle(x) & Inside(x) & HopefulMessage(y)) -> Contains(x,y))", "all x y z.((LeadSingle(x) & Inside(y) & HopefulMessage(z)) -> Contains(x,y,z))", "all x y.((LeadSingle(x) & Inside(x)) -> ContainsHopefulMessage(y))", "all x.((LeadSingle(x) & Inside(x)) -> HopefulMessage(x))", "all x y.((LeadSingle(x) & Inside(x)) -> ContainsHopefulMessage(x))", "all x.(LeadSingle(x) -> (Inside(x) & ContainsHopefulMessage(x)))", "all x.((LeadSingleOfInside(x) & HopefulMessage(x)) -> Contains(x,y))", "all x.(LeadSingle(x) -> (ContainsHopefulMessage(x) & Inside(x)))", "all x.((LeadSingle(x) & Inside(x)) -> ContainsHoffnungsfulMessage(x))", "all x y z.((LeadSingle(x) & Inside(y) & HopefulMessage(z)) -> Contains(x,z))"]}
{"id": "folio_train_2192", "nl": "Hyunsik is Korean.", "fol": "Korean(Hyunsik)", "prediction": ["all x.(Hyunsik(x) -> Korean(x))", "Hyunsik (Korean)", "Hyunsik is Korean.", "Hyunsik (exists x.(Korean(x) & Korean(x)))", "(Korean(Hyunsik) & Korean(Hyunsik))", "All x.(Hyunsik(x) -> Korean(x))", "Hyunsik (exists x.(Korean(x) & Korean(x)) -> Hyunsik(x))", "(Korean(Hyunsik) -> Korean(Hyunsik))", "Hyunsik (exists x.(Korean(x) & Korean(x)) -> HasHyunsik(x))", "(Korean(Hyunsik)", "Hyunsik (exists x.(Korean(x) & Korean(x)) -> Korean(x))", "(Korean(Hyunsik) -> Korean(Hyunsik))", "Hyunsik (exists x.(Korean(x) & Korean(x)) & Korean(x))", "Hyunsik (exists x.(Corean(x) & Korean(x)))", "Hyunsik (exists x.(Korean(x) & Korean(x)) -> Has(x,y))", "Hyunsik (exists x.(Corean(x) & Korean(x)) -> Hyunsik(x))"]}
{"id": "folio_train_2193", "nl": "All tables are round.", "fol": "all x.(IsTable(x) -> IsRound(x))", "prediction": ["all x.(Table(x) -> Round(x))", "all x y.((Table(x) & Table(y)) -> Round(x))", "(all x.(Table(x) -> Round(x)))", "(all x.(Table(x) -> Round(x))", "All x.(Table(x) -> Round(x))", "all x y.((Table(x) & Table(y) & Round(x)) -> Round(y))", "all x y.((Table(x) & Table(y)) -> Round(x,y))", "-all x.(Table(x) -> Round(x))", "all x.(Table(x) -> (Round(x) & -Round(x)))", "all x.(Table(x) -> (Round(x) & Round(x)))", "all x.(Table(x) -> (Round(x) | Round(x)))", "all x.(Table(x) -> Round(x))", "all x y.((Table(x) & Table(y) & Round(x)) -> Round(x))", "all x.(Tab(x) -> Round(x))", "all x y.((Table(x) & Round(y)) -> Table(x,y))", "all x y.((Table(x) & Table(y)) -> Round(y))"]}
{"id": "folio_train_2194", "nl": "Some furniture are tables.", "fol": "exists x.(IsFurniture(x) & IsTable(x))", "prediction": ["exists x.(Furniture(x) & Table(x))", "exists x y.(Furniture(x) & Table(y))", "exists x.(Firma(x) & Table(x))", "exists x.(Furniture(x) & Table(x))", "exists x.(Fixture(x) & Table(x))", "exists x.exists y.(Furniture(x) & Table(y))", "(exists x.(Furniture(x) & Table(x)))", "exists x.(Firming(x) & Table(x))", "exists x.exists y.(Furniture(x) & Table(y) & UsedFor(x,y))", "exists x.(Firewall(x) & Table(x))", "exists x y.(Furniture(x) & Table(y) & UsedFor(x,y))", "all x.(Furniture(x) -> Table(x))", "exists x.(Furniture(x) & Table(y))", "exists x.(Firework(x) & Table(x))", "exists x.exists y.(Furniture(x) & Table(y) & DesignedFor(x,y))", "exists x y.(Furniture(x) & Table(y) & DesignedFor(x,y))"]}
{"id": "folio_train_2195", "nl": "Some furniture are round.", "fol": "exists x.(IsFurniture(x) & IsRound(x))", "prediction": ["exists x.(Furniture(x) & Round(x))", "exists x y.(Furniture(x) & Furniture(y) & Round(x))", "exists x.(Furniture(x) & IsRound(x))", "exists x.(Furniture(x) & (Round(x) | -Round(x)))", "exists x y.(Furniture(x) & Furniture(y) & Round(y))", "exists x.(Furniture(x) & Round(x))", "exists x.(Furniture(x) & (Round(x) | Round(x)))", "exists x.(Firma(x) & Round(x))", "exists x.(Furniture(x) & -Round(x))", "exists x.(Furniture(x) & (Round(x) | -Round(x))))", "exists x.(Furniture(x) & (Round(x) | (Round(x) | -Round(x)))))", "exists x.(Furniture(x) & (Round(x) | (Round(x) | Round(x)))))", "exists x.(Furniture(x) & Round(x))", "exists x y.(Furniture(x) & Furniture(y) & Round(x,y))", "(exists x.(Furniture(x) & Round(x)))", "exists x.(Furniture(x) & (Round(x) | (Round(x) & -Round(x)))))"]}
{"id": "folio_train_2196", "nl": "All juvenile delinquents are maladjusted individuals.", "fol": "all x.(IsJuvenileDelinquent(x) -> IsMaladjustedIndividual(x))", "prediction": ["all x.(JuvenileDelinquent(x) -> MaladjustedIndividual(x))", "all x.(JewelryDelinquent(x) -> MaladjustedIndividual(x))", "all x.((JuvenileDelinquent(x) & MaladjustedIndividual(x)) -> MaladjustedIndividual(x))", "all x.(JugendDelinquent(x) -> MaladjustedIndividual(x))", "all x.(JuvenileDeflict(x) -> MaladjustedIndividual(x))", "all x.(JuvenileDelinquent(x) -> MaladjustedIndividual(x))", "all x.(JuvenileDelinquent(x) -> Maladjusted(x))", "all x.(JewelerDelinquent(x) -> MaladjustedIndividual(x))", "all x.(JuvenileDefendant(x) -> MaladjustedIndividual(x))", "all x.(JuvenileDefiant(x) -> MaladjustedIndividual(x))", "all x.(JulyDelinquent(x) -> MaladjustedIndividual(x))", "all x.(Juvenile(x) -> MaladjustedIndividual(x))", "all x.(Jewel(x) -> MaladjustedIndividual(x))", "all x.(JuvenileDefinquent(x) -> MaladjustedIndividual(x))", "all x.(JuvenileDefilinquent(x) -> MaladjustedIndividual(x))", "all x.(JuvenileDelinquent(x) -> MaladjustedImperson(x))"]}
{"id": "folio_train_2197", "nl": "Some juvenile delinquents are products of broken homes.", "fol": "exists x.(IsJuvenileDelinquent(x) & IsProductOfBrokenHome(x))", "prediction": ["exists x.(JuvenileDelinquent(x) & BrokenHome(x))", "exists x.(JuvenileDelinquent(x) & ProductOfBrokenHomes(x))", "exists x.(JuvenileDelinquent(x) & BrokenHomes(x))", "exists x.(JuvenileDelinquent(x) & BreakedHome(x))", "exists x.(JuvenileDefiant(x) & BrokenHome(x))", "exists x.(JuvenileDeflict(x) & BrokenHome(x))", "exists x.(JugendDelinquent(x) & BrokenHome(x))", "exists x.(JuvenileDelinquent(x) & BrokenHomeProduct(x))", "exists x.(JuvenileDefendant(x) & BrokenHome(x))", "exists x.(JewelryDelinquent(x) & BrokenHome(x))", "exists x.(Juvenile(x) & Delinquent(x) & BrokenHome(x))", "exists x.(JugendDefiant(x) & BrokenHome(x))", "exists x.(JuvenileDelinquent(x) & BrokenHouse(x))", "exists x.(JuvenileDelinquent(x) & ProductOfBrokenHome(x))", "exists x.(JuvenileDelinquent(x) & BreakingHome(x))", "exists x.(JuvenileDelinquent(x) & BreakedHomes(x))"]}
{"id": "folio_train_2198", "nl": "Some maladjusted individuals are products of broken homes.", "fol": "exists x.(IsMaladjustedIndividual(x) & IsProductOfBrokenHome(x))", "prediction": ["exists x.(MaladjustedIndividual(x) & BrokenHome(x))", "exists x.(MaladjustedIndividual(x) & ProductOfBrokenHomes(x))", "exists x.(MaladjustedIndividual(x) & ProductsOfBrokenHomes(x))", "exists x.(MaladjustedIndividual(x) & ProductOfBrokenHome(x))", "exists x.(Maladjusted(x) & ProductOfBrokenHomes(x))", "exists x.(MaladjustedIndividual(x) & BreakedHome(x))", "exists x.(MaladjustedIndividual(x) & BrokenHomes(x))", "exists x.(MaladjustedIndividual(x) & (BrokenHome(x) | BrokenHome(x)))", "exists x.(Maladjusted(x) & Individual(x) & BrokenHome(x))", "exists x.(Maladjusted(x) & Individual(x) & ProductOfBrokenHomes(x))", "exists x.(MaladjustedIndividual(x) & BreakingHome(x))", "exists x.(MaladjustedIndividual(x) & BrokenHomeProduct(x))", "exists x.(MaladjustedIndividual(x) & BrokenHome(x))", "exists x.(MaladjustedIndividual(x) & BrokenHouse(x))", "exists x.(MaladjustedIndividual(x) & ProductOfBrokenHouses(x))", "exists x.(MaladjustedIndividual(x) & BrokenHome(x))"]}
{"id": "folio_train_2199", "nl": "Either brain reading or brain decoding. ", "fol": "all x.(EngagesInBrainReading(x) | EngagesInBrainDecoding(x))", "prediction": ["all x.(BrainReading(x) | BrainDecoding(x))", "exists x.(BrainReading(x) | BrainDecoding(x))", "all x.(BirdReading(x) | BrainDecoding(x))", "all x.((BrainReading(x) | BrainDecoding(x)) -> (BodyReading(x) | BrainDecoding(x)))", "all x.((BrainReading(x) | BrainDecoding(x)) -> (BirdReading(x) | BrainDecoding(x)))", "all x.((BirdReading(x) | BrainDecoding(x)) -> (BirdReading(x) | BrainDecoding(x)))", "(BirdReading(Bird) | BrainDecoding(Bird))", "all x.(BodyReading(x) | BrainDecoding(x))", "all x.((BrainReading(x) | BrainDecoding(x)) -> (BrainReading(x) | BrainDecoding(x)))", "all x.((BodyReading(x) | BrainDecoding(x)) -> (BodyReading(x) | BrainDecoding(x)))", "exists x.(BirdReading(x) | BrainDecoding(x))", "all x.((BrainReading(x) | BrainDecoding(x)) -> Either(x))", "all x.((BrainReading(x) | BrainDecoding(x)) -> Reads(x))", "all x y.((BrainReading(x) | BrainDecoding(y)) -> (BirdReading(x) | BrainDecoding(x)))", "all x y.((BrainReading(x) | BrainDecoding(x)) -> (BirdReading(x) | BrainDecoding(x)))", "all x y.((BrainReading(x) | BrainDecoding(y)) -> (BodyReading(x) | BrainDecoding(x)))"]}
{"id": "folio_train_2200", "nl": "All brain decoding is extracting information from BOLD signals.", "fol": "all x.(EngagesInBrainDecoding(x) -> ExtractsInfoFromBOLDSignals(x))", "prediction": ["all x.(BrainDecoding(x) -> ExtractsInformationFromBOLDSignals(x))", "all x y.((BrainDecoding(x) & BOLDSignals(y)) -> ExtractsInformationFrom(x,y))", "all x.(BodyDecoding(x) -> ExtractsInformationFromBOLDSignals(x))", "all x y.((BrainDecoding(x) & BOLDSignals(y)) -> ExtractsInformation(x,y))", "all x.(BrainDecoding(x) -> ExtractingInformationFromBOLDSignals(x))", "all x.(BrainDecoding(x) -> ExtractsInformationFromBOLDSignals(x))", "all x.(BrainDecode(x) -> ExtractsInformationFromBOLDSignals(x))", "all x.(BrainDecoding(x) -> ExtractsInformationFromBOLDSignals(x))", "all x.(BirdDecoding(x) -> ExtractsInformationFromBOLDSignals(x))", "all x.(BreakDekoding(x) -> ExtractsInformationFromBOLDSignals(x))", "all x.(BrainDecoding(x) -> ExtractsInformationFrom(x,BOLDSignals))", "all x.(BrainDecoder(x) -> ExtractsInformationFromBOLDSignals(x))", "all x.(BodyDecoding(x) -> ExtractingInformationFromBOLDSignals(x))", "all x y.((BrainDecoding(x) & BOLDSignals(y)) -> ExtractingInformation(x,y))", "all x y.((BrainDecoding(x) & BOLDSignals(y)) -> ExtractingInformationFrom(x,y))", "all x.(BrainDecoding(x) -> ExtractsBOLDSignals(x))"]}
{"id": "folio_train_2201", "nl": "No extracting information from BOLD signals is without statistical pattern analysis. ", "fol": "all x.(ExtractsInfoFromBOLDSignals(x) -> -LacksStatisticalPatternAnalysis(x))", "prediction": ["all x.((ExtractingInformation(x) & BOLDSignals(x)) -> -StatisticalPatternAnalysis(x))", "all x.((ExtractingInformationFromBOLDSignals(x)) -> -StatisticalPatternAnalysis(x))", "all x.((ExtractingInformation(x) & FromBOLDSignals(x)) -> -StatisticalPatternAnalysis(x))", "all x.(ExtractingInformationFromBOLDSignals(x) -> -StatisticalPatternAnalysis(x))", "all x.((ExtractingInformationFromBOLDSignals(x) & -StatisticalPatternAnalysis(x)) -> -ExtractsInformationFromBOLDSignals(x))", "all x y.((ExtractingInformation(x) & BOLDSignals(y)) -> -StatisticalPatternAnalysis(x,y))", "all x.((ExtractingInformationFromBOLDSignals(x) & -StatisticalPatternAnalysis(x)) -> -StatisticPatternAnalysis(x))", "all x.((BOLDSignals(x) & -StatisticalPatternAnalysis(x)) -> -ExtractsInformation(x))", "all x.((ExtractingInformationFromBOLDSignals(x) & -StatisticalPatternAnalysis(x)) -> -StructuralPatternAnalysis(x))", "-exists x.(ExtractingInformationFromBOLDSignals(x) & -StatisticalPatternAnalysis(x))", "all x.((ExtractingInformation(x) & BOLDSignals(x)) -> -StatisticPatternAnalysis(x))", "all x.((ExtractingInformationFromBOLDSignals(x) & -StatisticalPatternAnalysis(x)) -> -ExtractInformationFromBOLDSignals(x))", "all x.((ExtractingInformationFromBOLDSignals(x)) -> -StatisticPatternAnalysis(x))", "all x.((ExtractingInformation(x) & FromBOLDSignals(x)) -> -StatisticPatternAnalysis(x))", "all x.((ExtractingInformationFromBOLDSignals(x) & -StatisticalPatternAnalysis(x)) -> -ExtractedInformationFromBOLDSignals(x))", "-exists x.(BOLDSignal(x) & ExtractsInformation(x) & -StatisticalPatternAnalysis(x))"]}
{"id": "folio_train_2202", "nl": "Writing a novel is without statistical pattern analysis.", "fol": "all x.(EngagesInNovelWriting(x) -> LacksStatisticalPatternAnalysis(x))", "prediction": ["all x.(Novel(x) -> -StatisticalPatternAnalysis(x))", "all x y.((Novel(x) & Novel(y)) -> -StatisticalPatternAnalysis(x,y))", "all x y.((Novel(x) & Novel(y)) -> -StatisticalPatternAnalysis(x))", "all x.(Novel(x) -> -StatisticPatternAnalysis(x))", "all x.((Novel(x) & -StatisticalPatternAnalysis(x)) -> -StatisticalPatternAnalysis(x))", "all x y.((Novel(x) & Novel(y)) -> -StatisticalPatternAnalysis(y))", "all x.(Novel(x) -> -StatisticalPatternAnalysis(x))", "all x y.((Novel(x) & Novel(y)) -> -StatisticPatternAnalysis(x,y))", "all x.(WritingNovel(x) -> -StatisticalPatternAnalysis(x))", "all x y z.((Novel(x) & Novel(y) & StatisticPatternAnalysis(z)) -> -StatisticPatternAnalysis(x,y,z))", "all x y.((Novel(x) & Novel(y) & -StatisticalPatternAnalysis(x,y)) -> -StatisticalPatternAnalysis(x,y))", "all x.((Novel(x) & -StatisticalPatternAnalysis(x)) -> -Statistical(x))", "all x y.((Novel(x) & Novel(y) & -StatisticalPatternAnalysis(y)) -> -StatisticalPatternAnalysis(x,y))", "all x.(Novel(x) -> -StatisticPatternAnalysis(x))", "all x y z.((Novel(x) & Novel(y) & StatisticPatternAnalysis(z)) -> -StatisticPatternAnalysis(x,y,z))", "all x y.((Novel(x) & Novel(y) & -StatisticalPatternAnalysis(x)) -> -StatisticalPatternAnalysis(x,y))"]}
{"id": "folio_train_2203", "nl": "If multivoxel (pattern) analysis is without statistical pattern analysis and a brain reading, then multivoxel (pattern) analysis is without statistical pattern analysis and brain decoding.", "fol": "((LacksStatisticalPatternAnalysis(ConductsMultivoxelPatternAnalysis) & EngagesInBrainReading(ConductsMultivoxelPatternAnalysis)) -> (LacksStatisticalPatternAnalysis(ConductsMultivoxelPatternAnalysis) & EngagesInBrainDecoding(ConductsMultivoxelPatternAnalysis)))", "prediction": ["all x.((Multivoxel(x) & -StatisticalPatternAnalysis(x) & BrainReading(x)) -> -StatisticalPatternAnalysis(x) & BrainDecoding(x))", "all x.((Multivoxel(x) & -StatisticalPatternAnalysis(x) & BrainReading(x)) -> (-StatisticalPatternAnalysis(x) & BrainDecoding(x)))", "all x.((Multivoxel(x) & -StatisticalPatternAnalysis(x) & BrainReading(x)) -> (-StatisticalPatternAnalysis(x) & -BrainDecoding(x)))", "all x.((Multivoxel(x) & -StatisticalPatternAnalysis(x) & -BrainReading(x)) -> (-StatisticalPatternAnalysis(x) & -BrainDecoding(x)))", "all x.((Multivoxel(x) & WithoutStatisticalPatternAnalysis(x) & WithoutBrainReading(x)) -> (-StatisticalPatternAnalysis(x) & -BrainDecoding(x)))", "all x.((Multivoxel(x) & -StatisticalPatternAnalysis(x) & -BrainReading(x)) -> -StatisticalPatternAnalysis(x) & -BrainDecoding(x))", "all x.((Multivoxel(x) & -StatisticalPatternAnalysis(x) & BrainReading(x)) -> -StatisticalPatternAnalysisAndBrainDecoding(x))", "all x.((Multivoxel(x) & StatisticPatternAnalysis(x) & BrainReading(x)) -> (-StatisticalPatternAnalysis(x) & BrainDecoding(x)))", "all x.((Multivoxel(x) & -StatisticalPatternAnalysis(x) & BrainReading(x)) -> -StatisticalPatternAnalysis(x) & -BrainDecoding(x))", "all x.((Multivoxel(x) & StatisticPatternAnalysis(x) & BrainReading(x)) -> -StatisticalPatternAnalysis(x) & BrainDecoding(x))", "(all x.((Multivoxel(x) & -StatisticalPatternAnalysis(x) & BrainReading(x)) -> -StatisticalPatternAnalysis(x) & BrainDecoding(x)))", "all x.((Multivoxel(x) & (-StatisticalPatternAnalysis(x) & BrainReading(x))) -> (-StatisticalPatternAnalysis(x) & BrainDecoding(x)))", "all x.((Multivoxel(x) & WithoutStatisticalPatternAnalysis(x) & WithoutBrainReading(x)) -> -StatisticalPatternAnalysis(x) & -BrainDecoding(x))", "all x.((Multivoxel(x) & -StatisticalPatternAnalysis(x) & BrainReading(x)) -> -StatisticalPatternAnalysis(x) & BrainDecoded(x))", "all x.((Multivoxel(x) & -StatisticalPatternAnalysis(x) & BrainReading(x)) -> (-StatisticalPatternAnalysis(x) & -BirdDecoding(x)))", "all x.((Multivoxel(x) & -StatisticalPatternAnalysis(x) & BrainReading(x)) -> (-StatisticalPatternAnalysis(x) & BrainDecoded(x)))"]}
{"id": "folio_train_2204", "nl": "Multivoxel (pattern) analysis is a brain decoding.", "fol": "EngagesInBrainDecoding(ConductsMultivoxelPatternAnalysis)", "prediction": ["all x.(Multivoxel(x) -> BrainDecoding(x))", "all x.(Multivoxel(x) -> (BirdDecoding(x) & BrainDecoding(x)))", "all x.(Multivoxel(x) -> (BrainDecoding(x) & Pattern(x)))", "all x y.((Multivoxel(x) & Pattern(y)) -> BrainDecoding(x))", "all x.(Multivoxel(x) -> (BodyDecoding(x) & BrainDecoding(x)))", "all x y.((Multivoxel(x) & Pattern(y)) -> BrainDecoding(x,y))", "all x.(Multivoxel(x) -> (BrainDecoding(x) & BrainDecoding(x)))", "all x.(Multivoxel(x) -> (BrainDecoding(x) | BrainDecoding(x)))", "all x.(Multivoxel(x) -> (BirdDecoding(x) | BrainDecoding(x)))", "all x.(Multivoxel(x) -> (BodyDecoding(x) | BrainDecoding(x)))", "all x.(Multivoxel(x) -> (BloodDecoding(x) & BrainDecoding(x)))", "all x.(Multivoxel(x) -> (BrainDecoding(x) & PatternAnalysis(x)))", "all x.(Multivoxel(x) -> (BrainDecoding(x) & PatternDecoding(x)))", "all x.(Multivoxel(x) -> (BehaviorDecoding(x) & BrainDecoding(x)))", "all x.(Multivoxel(x) -> (BrainDecoding(x) | PatternDecoding(x)))", "all x.(Multivoxel(x) -> DecodingBrain(x))"]}
{"id": "folio_train_2205", "nl": "Multivoxel (pattern) analysis is the writing of a novel.", "fol": "EngagesInNovelWriting(ConductsMultivoxelPatternAnalysis)", "prediction": ["all x.(Multivoxel(x) -> (WritingNovel(x) & Pattern(x)))", "all x y.((Multivoxel(x) & Novel(y)) -> Writes(x,y))", "all x y.((Multivoxel(x) & Novel(y)) -> (Writing(x,y) | Writing(x,y)))", "all x.(Multivoxel(x) -> (WritingOfNovel(x) & Pattern(x)))", "all x.(Multivoxel(x) -> (WritingNovel(x) | WritingNovel(x)))", "all x.(Multivoxel(x) -> (Writing(x) & Novel(x)))", "all x y.((Multivoxel(x) & (Pattern(y) | Novel(y))) -> Writes(x,y))", "all x y z.((Multivoxel(x) & (Pattern(y) | Novel(z))) -> Writes(x,y,z))", "all x y z.((Multivoxel(x) & Pattern(y) & Novel(z)) -> Writes(x,y,z))", "all x y.((Multivoxel(x) & Pattern(y)) -> WritesNovel(x,y))", "all x y.((Multivoxel(x) & Novel(y)) -> (Writing(x,y) & Pattern(x)))", "all x.(Multivoxel(x) -> (WritingNarrative(x) & Pattern(x)))", "all x.(Multivoxel(x) -> (WritingOfNovel(x) | WritingOfNovel(x)))", "all x.(Multivoxel(x) -> WritesNovel(x))", "all x y.((Multivoxel(x) & Novel(y)) -> Writing(x,y))", "all x y z.((Multivoxel(x) & Pattern(y) & Novel(z)) -> Writes(x,z))"]}
{"id": "folio_train_2206", "nl": "Multivoxel (pattern) analysis is without statistical pattern analysis and writing a novel.", "fol": "(LacksStatisticalPatternAnalysis(ConductsMultivoxelPatternAnalysis) & EngagesInNovelWriting(ConductsMultivoxelPatternAnalysis))", "prediction": ["all x.(Multivoxel(x) -> (-StatisticalPatternAnalysis(x) & -WritingNovel(x)))", "all x.(Multivoxel(x) -> (PatternAnalysis(x) & -StatisticalPatternAnalysis(x) & -WritingNovel(x)))", "all x.(Multivoxel(x) -> (-StatisticalPatternAnalysis(x) & WritesNovel(x)))", "all x.(Multivoxel(x) -> (Pattern(x) & -StatisticalPatternAnalysis(x) & -WritingNovel(x)))", "all x.(Multivoxel(x) -> (-StatisticalPatternAnalysis(x) & WritingNovel(x)))", "all x.(MultivoxelAnalysis(x) -> (-StatisticalPatternAnalysis(x) & -WritingNovel(x)))", "all x y z.((Multivoxel(x) & Pattern(y) & Novel(z)) -> (-StatisticalPatternAnalysis(x,y) & -Writing(x,z)))", "all x.(Multivoxel(x) -> (WithoutStatisticalPatternAnalysis(x) & WithoutWritingNovel(x)))", "all x y.((Multivoxel(x) & Pattern(y)) -> (-StatisticalPatternAnalysis(x,y) & -WritingNovel(x,y)))", "all x.(Multivoxel(x) -> (-StatisticalPatternAnalysis(x) & WriteNovel(x)))", "all x.(Multivoxel(x) -> (-StatisticalPatternAnalysis(x) & -WritingNovel(x)))", "all x.(Multivoxel(x) -> (PatternAnalysis(x) & -StatisticalPatternAnalysis(x) & NovelWriting(x)))", "all x.(Multivoxel(x) -> (NoNovel(x) & -StatisticalPatternAnalysis(x)))", "all x y z.((Multivoxel(x) & Pattern(y) & Novel(z)) -> (-StatisticalPatternAnalysis(x) & -Writing(x,y,z)))", "all x y.((Multivoxel(x) & Pattern(y)) -> (-StatisticalPatternAnalysis(x) & -WritingNovel(x)))", "all x y.((Multivoxel(x) & Pattern(y)) -> (-StatisticalPatternAnalysis(x,y) & -WritingNovel(x)))"]}
{"id": "folio_train_2207", "nl": "Multivoxel (pattern) analysis is without statistical pattern analysis or writing a novel.", "fol": "(LacksStatisticalPatternAnalysis(ConductsMultivoxelPatternAnalysis) | EngagesInNovelWriting(ConductsMultivoxelPatternAnalysis))", "prediction": ["all x.(Multivoxel(x) -> (-StatisticalPatternAnalysis(x) | WritingNovel(x)))", "all x.(Multivoxel(x) -> (PatternAnalysis(x) & -StatisticalPatternAnalysis(x) & -WritingNovel(x)))", "all x.(Multivoxel(x) -> (Pattern(x) & -StatisticalPatternAnalysis(x) & -WritingNovel(x)))", "all x.(Multivoxel(x) -> (-StatisticalPatternAnalysis(x) & -WritingNovel(x)))", "all x.(Multivoxel(x) -> (-StatisticalPatternAnalysis(x) | NovelWriting(x)))", "all x y.((Multivoxel(x) & Pattern(y)) -> (-StatisticalPatternAnalysis(x,y) | WritingNovel(x,y)))", "all x.(MultivoxelAnalysis(x) -> (-StatisticalPatternAnalysis(x) | WritingNovel(x)))", "all x.(Multivoxel(x) -> (-StatisticalPatternAnalysis(x) | WritesNovel(x)))", "all x y.((Multivoxel(x) & Pattern(y)) -> (-StatisticalPatternAnalysis(x) & -WritingNovel(x)))", "all x.(Multivoxel(x) -> (exists y.(StatisticalPatternAnalysis(y) & -exists z.(Novel(z) & Analyzes(x,y)))))", "all x y.((Multivoxel(x) & Pattern(y)) -> (-StatisticalPatternAnalysis(x) | WritingNovel(x)))", "all x.(Multivoxel(x) -> (PatternAnalysis(x) & -StatisticalPatternAnalysis(x) & -NovelWriting(x)))", "all x.(Multivoxel(x) -> (-StatisticalPatternAnalysis(x) | WriteNovel(x)))", "all x y.((Multivoxel(x) & Pattern(y)) -> (-StatisticalPatternAnalysis(x,y) & -WritingNovel(x,y)))", "all x y.((Multivoxel(x) & Pattern(y)) -> (-StatisticalPatternAnalysis(x,y) | NovelWriting(x,y)))", "all x.(Multivoxel(x) -> (WithoutStatisticalPatternAnalysis(x) & WithoutWritingNovel(x)))"]}
{"id": "folio_train_2208", "nl": "Multivoxel (pattern) analysis is either without statistical pattern analysis or writing a novel.", "fol": "(LacksStatisticalPatternAnalysis(ConductsMultivoxelPatternAnalysis) | EngagesInNovelWriting(ConductsMultivoxelPatternAnalysis))", "prediction": ["all x.(Multivoxel(x) -> (WithoutStatisticalPatternAnalysis(x) | WritingNovel(x)))", "all x.(Multivoxel(x) -> ((WithoutStatisticalPatternAnalysis(x) | WritingNovel(x))))", "all x.(Multivoxel(x) -> (PatternAnalysis(x) & (-StatisticalPatternAnalysis(x) | WritingNovel(x))))", "all x.(Multivoxel(x) -> (-StatisticalPatternAnalysis(x) | WritingNovel(x)))", "all x.(Multivoxel(x) -> ((-StatisticalPatternAnalysis(x) | WritingNovel(x))))", "all x.(Multivoxel(x) -> (PatternAnalysis(x) & (-StatisticalPatternAnalysis(x) | NovelWriting(x))))", "all x.(Multivoxel(x) -> (WithoutStatisticalPatternAnalysis(x) | WritesNovel(x)))", "all x.(Multivoxel(x) -> ((StatisticPatternAnalysis(x) & -StatisticalPatternAnalysis(x)) | NovelWriting(x))))", "all x.(Multivoxel(x) -> (StatisticPatternAnalysis(x) | NovelWriting(x)))", "all x.(Multivoxel(x) -> (Pattern(x) & (-StatisticalPatternAnalysis(x) | WritingNovel(x))))", "all x.(Multivoxel(x) -> (PatternAnalysis(x) & -StatisticalPatternAnalysis(x) | NovelWriting(x)))", "all x.(Multivoxel(x) -> ((StatisticPatternAnalysis(x) & -StatisticalPatternAnalysis(x) | NovelWriting(x))))", "all x.(Multivoxel(x) -> (NoNovel(x) | -StatisticalPatternAnalysis(x)))", "all x.(Multivoxel(x) -> ((StatisticPatternAnalysis(x) & -StatisticalPatternAnalysis(x)) | Novel(x))))", "all x.(Multivoxel(x) -> (PatternAnalysis(x) & -StatisticalPatternAnalysis(x) & -WritingNovel(x)))", "all x.(Multivoxel(x) -> ((WithoutStatisticalPatternAnalysis(x) | WritesNovel(x))))"]}
{"id": "folio_train_2209", "nl": "If multivoxel (pattern) analysis is writing a novel, then multivoxel (pattern) analysis is neither without statistical pattern analysis nor writing a novel.", "fol": "(EngagesInNovelWriting(ConductsMultivoxelPatternAnalysis) -> (-LacksStatisticalPatternAnalysis(ConductsMultivoxelPatternAnalysis) & -EngagesInNovelWriting(ConductsMultivoxelPatternAnalysis)))", "prediction": ["all x.((Multivoxel(x) & WritingNovel(x)) -> (-StatisticalPatternAnalysis(x) & -WritingNovel(x)))", "all x.((Multivoxel(x) & Pattern(x)) -> (WritingNovel(x) & -StatisticalPatternAnalysis(x) & -WritingNovel(x)))", "all x.((Multivoxel(x) & PatternAnalysis(x) & Novel(x)) -> (-StatisticalPatternAnalysis(x) & -WritingNovel(x)))", "all x.((Multivoxel(x) & WritingNovel(x)) -> (-StatisticalPatternAnalysis(x) | WritingNovel(x)))", "all x.((Multivoxel(x) & PatternAnalysis(x) & WritingNovel(x)) -> (-StatisticalPatternAnalysis(x) & -WritingNovel(x)))", "all x.((Multivoxel(x) & WritesNovel(x)) -> (-StatisticalPatternAnalysis(x) & -WritingNovel(x)))", "all x.((Multivoxel(x) & PatternAnalysis(x)) -> (WritingNovel(x) & -StatisticalPatternAnalysis(x) & -WritingNovel(x)))", "all x.((Multivoxel(x) & PatternAnalysis(x) & Novel(x)) -> (-StatisticalPatternAnalysis(x) | NovelWriting(x)))", "all x.((Multivoxel(x) & PatternAnalysis(x) & Novel(x)) -> -(-StatisticalPatternAnalysis(x) | NovelWriting(x))))", "all x.((Multivoxel(x) & WritingNovel(x)) -> (-StructuralPatternAnalysis(x) & -WritingNovel(x)))", "all x.((Multivoxel(x) & PatternAnalysis(x) & Novel(x)) -> -(StatisticalPatternAnalysis(x) | NovelWriting(x))))", "all x.((Multivoxel(x) & PatternAnalysis(x) & Novel(x)) -> (-StatisticPatternAnalysis(x) & -WritingNovel(x)))", "all x.((Multivoxel(x) & WritesNovel(x)) -> (-StatisticalPatternAnalysis(x) | WritingNovel(x)))", "all x.((Multivoxel(x) & WritingNovel(x)) -> -(StatisticalPatternAnalysis(x) | WritingNovel(x)))", "all x.((Multivoxel(x) & PatternAnalysis(x) & Novel(x)) -> -(StatisticPatternAnalysis(x) | NovelWriting(x))))", "all x.((Multivoxel(x) & WritingNovel(x)) -> -(StatisticalPatternAnalysis(x) & -WritingNovel(x)))"]}
{"id": "folio_train_2210", "nl": "If you have room for dessert, you have room for broccoli.", "fol": "all x.(HasRoomFor(x,Dessert) -> HasRoomFor(x,Broccoli))", "prediction": ["all x.((RoomForDessert(x) & RoomForBroccoli(x)) -> RoomForDessert(x))", "all x.((RoomForDessert(x) & RoomForBroccoli(x)) -> HasRoomForDessert(x))", "all x.((RoomForDessert(x) & RoomForBroccoli(x)) -> HasDessert(x))", "all x.((HasRoomForDessert(x) & HasRoomForBroccoli(x)) -> HasRoomForDessert(x))", "all x.((RoomForDessert(x) & RoomForButterfly(x)) -> RoomForButterfly(x))", "all x.((HasRoomForDessert(x) & HasRoomForButterfly(x)) -> HasRoomForButterfly(x))", "all x.((RoomForDessert(x) & HasRoomForBroccoli(x)) -> HasRoomForDessert(x))", "all x.((RoomForDessert(x) & RoomForButterfly(x)) -> HasRoomForButterfly(x))", "all x.((HasRoomForDessert(x) & HasRoomForBroccoli(x)) -> HasRoomForButterfly(x))", "all x.((RoomForDessert(x) & HasRoomForButterfly(x)) -> HasRoomForButterfly(x))", "all x.((RoomForDessert(x) & RoomForButterfly(x)) -> RoomForDessert(x))", "all x.((RoomForDessert(x) & RoomForBroccoli(x)) -> HaveRoomForDessert(x))", "all x.(HasRoomForDessert(x) -> HasRoomForBroccoli(x))", "all x.((Room(x) & RoomForDessert(x)) -> RoomForBroccoli(x))", "all x.((Dessert(x) & Broccoli(x)) -> HasDessert(x))", "all x.((HasRoomForDessert(x) & HasRoomForBroccoli(x)) -> HasRoomFor(x))"]}
{"id": "folio_train_2211", "nl": "Everyone at Luis's dinner party has room for dessert, including Luis.", "fol": "all x.(IsAtLuisDinnerParty(x) -> HasRoomFor(x,Dessert))", "prediction": ["all x y.((DinnerParty(x) & Luis(y)) -> HasRoomForDessert(x,y))", "all x.((DinnerParty(x) & Luis(x)) -> HasRoomForDessert(x))", "all x y.((Luis(x) & DinnerParty(y)) -> HasRoomForDessert(x,y))", "all x.((Luis(x) & DinnerParty(x)) -> HasRoomForDessert(x))", "all x y.((LuisDinnerParty(x) & Luis(y)) -> HasRoomForDessert(x,y))", "all x.((LuisDinnerParty(x) & LuisDinnerParty(x)) -> HasRoomForDessert(x))", "all x y.((Luis'sDinnerParty(x) & Luis(y)) -> HasRoomForDessert(x,y))", "all x.((Luis'sDinnerParty(x) & Luis(x)) -> HasRoomForDessert(x))", "all x y.((LuisDinnerParty(x) & LuisDinnerParty(y)) -> HasRoomForDessert(x,y))", "all x y.((AtLuis'sDinnerParty(x) & Luis(y)) -> HasRoomForDessert(x,y))", "all x.((LuisDinnerParty(x) & Luis(x)) -> HasRoomForDessert(x))", "all x y z.((DinnerParty(x) & Luis(y) & Dessert(z)) -> HasRoom(x,y,z))", "all x y.((DinnerParty(x) & Luis(y)) -> HasRoomForDessert(y,x))", "all x y.((DinnerParty(x) & Luis(y)) -> HasDessertRoom(x,y))", "all x.((LuisDinnerParty(x) & LuisDinnerParty(x)) -> HasDessert(x))", "all x y.((DinnerParty(x) & Luis(y)) -> HasDessert(x,y))"]}
{"id": "folio_train_2212", "nl": "Mauricia does not have room for broccoli.", "fol": "-HasRoomFor(Mauricia,Broccoli)", "prediction": ["all x.(Mauricia(x) -> -HasRoomForBroccoli(x))", "all x.(Mauricia(x) -> -HasRoomForButterfly(x))", "all x.((Mauricia(x) & -HasRoomForBroccoli(x)) -> -HasRoomForBroccoli(x))", "all x.((Mauricia(x) & -HasRoomForButterfly(x)) -> -HasRoomForButterfly(x))", "all x.(Mauricia(x) -> -HasRoomForBroccoli(x))", "Mauricia - HasRoomForBroccoli(Mauricia))", "all x.((Mauricia(x) & -HasRoomForBroccoli(x)) -> -HasRoomForButterfly(x))", "exists x.(Mauricia(x) & -HasRoomForBroccoli(x))", "-exists x.(Mauricia(x) & -HasRoomForBroccoli(x))", "(-HasRoomForBroccoli(Mauricia))", "all x.((Mauricia(x) & -HasRoomForButterfly(x)) -> -HasRoomForBroccoli(x))", "exists x.(Mauricia(x) & -HasRoomForButterfly(x))", "all x.((Mauricia(x) & -HasRoomForBroccoli(x)) -> -HasRoomForBroccoli(x))", "-exists x.(Mauricia(x) & -HasRoomForButterfly(x))", "Mauricia - HasRoomForButterfly(Mauricia))", "Mauricia -HasRoomForBroccoli(Mauricia))"]}
{"id": "folio_train_2213", "nl": "Luis's dinner party is the first ever dinner party that Allison has attended.", "fol": "(FirstDinnerPartyAttended(Allison,Luisparty) & IsAtLuisDinnerParty(Allison))", "prediction": ["all x.((DinnerParty(x) & AllisonAttended(x)) -> LuisDinnerParty(x))", "all x.((DinnerParty(x) & Allison(x)) -> FirstEverDinnerParty(x))", "all x y.((DinnerParty(x) & Allison(y)) -> FirstEverDinnerParty(x,y))", "all x y z.((DinnerParty(x) & Luis(y) & Allison(z)) -> DinnerParty(x,y,z))", "all x.((DinnerParty(x) & FirstEverDinnerParty(x)) -> AllisonAttended(x))", "all x y.((DinnerParty(x) & DinnerParty(y) & Allison(x)) -> FirstEverAttended(x,y))", "all x.((DinnerParty(x) & AllisonAttended(x)) -> DinnerParty(x))", "all x.((DinnerParty(x) & Luis(x)) -> FirstEverDinnerParty(x))", "all x y z.((DinnerParty(x) & Luis(y) & Allison(z)) -> FirstEverDinnerParty(x,y,z))", "all x y.((DinnerParty(x) & Allison(y)) -> FirstEverDinnerParty(y,x))", "all x y z.((DinnerParty(x) & Luis(y) & Allison(z)) -> DinnerParty(y,z))", "all x y.((DinnerParty(x) & DinnerParty(y) & Allison(z)) -> FirstEverAttended(x,y,z))", "all x y.((DinnerParty(x) & DinnerParty(y) & Allison(y)) -> FirstEverAttended(x,y))", "all x y.((DinnerParty(x) & DinnerParty(y) & Allison(y)) -> FirstEverAttended(y,x))", "all x y z.((DinnerParty(x) & DinnerParty(y) & Allison(z)) -> FirstEverAttended(x,y,z))", "all x.((DinnerParty(x) & Luis(x)) -> AllisonAttended(x))"]}
{"id": "folio_train_2214", "nl": "Gustave has room for both broccoli and asparagus.", "fol": "(HasRoomFor(Gustave,Broccoli) & HasRoomFor(Gustave,Asparagus))", "prediction": ["all x.(Guillain(x) -> (HasRoom(x,Broccoli) & HasRoom(x,Asparagus)))", "all x.(Guillain(x) -> (HasRoomForButterfly(x) & HasRoomForAsparagus(x)))", "all x.(Guillain(x) -> (HasRoom(x,Butterfly) & HasRoom(x,Asparagus)))", "all x.(Guillain(x) -> (HasRoom(x,Broccoli) & HasRoom(x,Asparagus)))", "all x.(Guillain(x) -> (HasRoomForBroccoli(x) & HasRoomForAsparagus(x)))", "all x.(Guilda(x) -> (HasRoom(x,Broccoli) & HasRoom(x,Asparagus)))", "all x.(Guillain(x) -> (HasRoomForBroccoli(x) & HasRoomForAsparagus(x)))", "all x.(Guilte(x) -> (HasRoom(x,Broccoli) & HasRoom(x,Asparagus)))", "all x.(Guilladine(x) -> (HasRoom(x,Broccoli) & HasRoom(x,Asparagus)))", "all x.(Guilladine(x) -> (HasRoomForButterfly(x) & HasRoomForAsparagus(x)))", "all x.(Gustave(x) -> (HasRoom(x,Broccoli) & HasRoom(x,Asparagus)))", "all x.(Guillatine(x) -> (HasRoomForButterfly(x) & HasRoomForAsparagus(x)))", "all x.(Guillatine(x) -> (HasRoom(x,Broccoli) & HasRoom(x,Asparagus)))", "(HasRoom(Gustafe,Broccoli) & HasRoom(Gustafe,Asparagus))", "(HasRoom(Gustafe,Butterfly) & HasRoom(Gustafe,Asparagus))", "(HasRoom(Gustave,Broccoli) & HasRoom(Gustave,Asparagus))"]}
{"id": "folio_train_2215", "nl": "Broccoli and asparagus are both vegetables.", "fol": "(IsVegetable(Broccoli) & IsVegetable(Asparagus))", "prediction": ["all x.((Broccoli(x) | Asparagus(x)) -> Vegetable(x))", "all x.((Broccoli(x) & Asparagus(x)) -> Vegetable(x))", "(Vegetable(broccoli) & Vegetable(asparagus))", "all x.((Broccoli(x) | Asparagus(x)) -> Vegetable(x))", "all x.((Broccoli(x) & Asparagus(x)) -> Vegetable(x))", "all x y.((Broccoli(x) & Asparagus(y)) -> Vegetable(x))", "all x y.((Broccoli(x) & Asparagus(y)) -> (Vegetable(x) & Vegetable(y)))", "all x y.((Broccoli(x) & Asparagus(y)) -> Vegetable(x,y))", "(Vegetable(broccoli) & Vegetable(aspberry))", "all x.(Vegetable(x) -> (Broccoli(x) | Asparagus(x)))", "all x.(Vegetable(x) -> (Broccoli(x) & Asparagus(x)))", "all x y.((Broccoli(x) & Asparagus(y)) -> (Vegetable(x) & Vegetable(y)))", "all x y.((Broccoli(x) & Asparagus(y)) -> (Vegetable(x,y) & Vegetable(y)))", "all x y.((Broccoli(x) & Asparagus(y)) -> Vegetable(x))", "(Vegetable(Broccoli) & Vegetable(Asparagus))", "all x y.((Broccoli(x) & Asparagus(y)) -> (Vegetable(x) | Vegetable(y)))"]}
{"id": "folio_train_2216", "nl": "Allison has room for broccoli.", "fol": "HasRoomFor(Allison,Broccoli)", "prediction": ["all x.(Allison(x) -> HasRoomForButterfly(x))", "all x.(Allison(x) -> HasRoomForBroccoli(x))", "all x.((Allison(x) & HasRoomForButterfly(x)) -> HasRoomForButterfly(x))", "all x y.((Allison(x) & Broccoli(y)) -> HasRoom(x,y))", "all x.(Alison(x) -> HasRoomForButterfly(x))", "all x.(Alignment(x) -> HasRoomForButterfly(x))", "all x.((Allison(x) & Broccoli(x)) -> HasRoom(x))", "all x.(Allison(x) -> HasRoomForBroccoli(x))", "all x.(Alison(x) -> HasRoomForBroccoli(x))", "all x y.((Allison(x) & Broccoli(y)) -> HasRoomFor(x,y))", "all x.(Allison(x) -> HasRoomForButterbeet(x))", "all x.(Alignment(x) -> HasRoomForBroccoli(x))", "all x.(Albany(x) -> HasRoomForButterfly(x))", "all x.((Allison(x) & HasRoomForButterfly(x)) -> HasRoomForBroccoli(x))", "all x.(Alberta(x) -> HasRoomForButterfly(x))", "all x.(Atlantic(x) -> HasRoomForButterfly(x))"]}
{"id": "folio_train_2217", "nl": "Mauricia is at Luis's dinner party.", "fol": "IsAtLuisDinnerParty(Mauricia)", "prediction": ["all x y.((Mauricia(x) & Luis(y)) -> DinnerParty(x,y))", "all x y.((Mauricia(x) & Luis(y)) -> AtDinnerParty(x,y))", "Mauricia is at Luis's DinnerParty(Mauricia)", "all x.((Mauricia(x) & Luis(x)) -> DinnerParty(x))", "all x.(Mauricia(x) -> LuisDinnerParty(x))", "all x y.((Mauricia(x) & Luis(y) & DinnerParty(x,y)) -> At(x,y))", "all x.(Mauricia(x) -> AtLuisDinnerParty(x))", "Mauricia is at Luis's DinnerParty.", "all x y.((Mauricia(x) & Luis(y)) -> At(x,y))", "(AtLuisDinnerParty(Mauricia) & AtLuisDinnerParty(Mauricia))", "(AtDinnerParty(Mauricia) & Luis(Mauricia))", "(AtLuisDinnerParty(Mauricia) & LuisDinnerParty(Mauricia))", "all x y.((Mauricia(x) & Luis(y)) -> DinnerPartyAt(x,y))", "Mauricia at Luis's DinnerParty(Mauricia)", "Mauricia is at Luis's DinnerParty(Mauricia))", "(AtLuisDinnerParty(Mauricia) & LuisAtDinnerParty(Mauricia))"]}
{"id": "folio_train_2218", "nl": "Gustav has room for dessert.", "fol": "HasRoomFor(Gustav,Dessert)", "prediction": ["all x.(Guilt(x) -> HasRoomForDessert(x))", "all x.(Gustavs(x) -> HasRoomForDessert(x))", "all x.(Guillain(x) -> HasRoomForDessert(x))", "all x.(Guilt(x) -> HasDessert(x))", "all x.((Guilt(x) & Dessert(y)) -> HasRoom(x,y))", "all x.(Guild(x) -> HasRoomForDessert(x))", "all x.((Gustavs(x) & Dessert(y)) -> HasRoom(x,y))", "all x.(Gustavs(x) -> HasDessert(x))", "all x.((Guilt(x) & RoomForDessert(x)) -> Has(x,y))", "all x.((Guilt(x) & RoomForDessert(x)) -> HasDessert(x))", "all x.((Guilt(x) & Dessert(x)) -> HasRoom(x))", "all x.(Gulliam(x) -> HasRoomForDessert(x))", "all x.((Guilt(x) & RoomForDessert(x)) -> HasRoomForDessert(x))", "all x.(HasRoomForDessert(x) -> Gustav(x))", "all x.((Gustavs(x) & Dessert(x)) -> HasRoom(x))", "(HasRoomForDessert(Gustav))"]}
{"id": "folio_train_2219", "nl": "Imagine Dragons is an American pop rock band.", "fol": "(IsAmerican(ImagineDragon) & IsRockBand(ImagineDragon))", "prediction": ["ImagineDragons(x) -> (PopRockBand(x) & AmericanPopRockBand(x)))", "ImagineDragons(x) -> AmericanPopRockBand(x))", "ImagineDragons(x) -> (PopRockBand(x) & AmericanPopRock(x)))", "ImagineDragons(x) -> AmericanPopRockBand(x))", "ImagineDragons(x) -> (AmericanPopRockBand(x) & PopRockBand(x)))", "ImagineDragons(x) -> (AmericanPopRockBand(x) & PopRockBand(x) & PopRockBand(x) & PopRockBand(x) & PopRockBand(x) & PopRockBand(x) & PopRockBand(x) & PopRockBand(x)))", "ImagineDragons(x) -> (AmericanPopRockBand(x) & PopRockBand(x) & PopRockBand(x) & PopRockBand(x) & PopRockBand(x) & PopRockBand(x) & PopRockBand(x) & PopRockBand(x) & PopRockBand(x)))", "ImagineDragons(x) -> (AmericanPopRockBand(x) & PopRockBand(x) & PopRockBand(x) & PopRockBand(x) & PopRockBand(x) & PopRockBand(x) & PopRockBand(x)))", "ImagineDragons(x) -> (AmericanPopRockBand(x) & PopRockBand(x) & PopRockBand(x) & PopRockBand(x) & PopRockBand(x) & PopRockBand(x)))", "ImagineDragons(x) -> (AmericanPopRockBand(x) & PopRockBand(x) & PopRockBand(x) & PopRockBand(x) & PopRockBand(x)))", "ImagineDragons(x) -> (AmericanPopRockBand(x) & PopRockBand(x) & PopRockBand(x) & PopRockBand(x)))", "ImagineDragons(x) -> (AmericanPopRockBand(x) & PopRockBand(x) & PopRockBand(x)))", "ImagineDragons(x) -> (PopRockBand(x) & PopRockBand(x) & PopRockBand(x) & PopRockBand(x) & PopRockBand(x) & PopRockBand(x) & PopRockBand(x) & PopRockBand(x) & PopRockBand(x)))", "ImagineDragons(x) -> (PopRockBand(x) & PopRockBand(x) & PopRockBand(x) & PopRockBand(x) & PopRockBand(x) & PopRockBand(x) & PopRockBand(x) & PopRockBand(x)))", "ImagineDragons(x) & AmericanPopRockBand(x))", "ImagineDragons(x) -> (PopRockBand(x) & PopRockBand(x) & PopRockBand(x) & PopRockBand(x) & PopRockBand(x) & PopRockBand(x) & PopRockBand(x)))"]}
{"id": "folio_train_2220", "nl": "The lead singer of Imagine Dragons is Dan.", "fol": "HasLeadSinger(ImagineDragon,Dan)", "prediction": ["All x.((LeadSinger(x) & ImagineDragons(x)) -> Dan(x))", "All x.(ImagineDragons(x) -> LeadSinger(x))", "All x.(ImagineDragons(x) -> LeadSingerDan(x))", "all x.(ImagineDragons(x) -> LeadSinger(x))", "All x.(ImagineDragon(x) -> LeadSinger(x))", "(LeadSinger(IceDragons) & Dan(Dan))", "(LeadSingerOfImagineDragons(x) -> Dan(x))", "all x.(ImagineDragons(x) -> LeadSingerDan(x))", "LedSingerOfImagineDragons(x) -> Dan(x))", "LedSingerOfImagineDragons(x) -> Dan(x))", "All x.((LeadSinger(x) & ImagineDragons(x)) -> Dan.", "All x.((LeadSinger(x) & ImagineDragon(x)) -> Dan(x))", "(LeadSinger(ImagineDragons) & Dan(Dan))", "LedSingerOfImagineDragons(x) -> Dan.", "LedSingerOfImagineDragons(x) -> Dan.", "All x.(ImagineDragons(x) -> LeadSinger(x,Dan))"]}
{"id": "folio_train_2221", "nl": "Dan is also a songwriter.", "fol": "IsSongWriter(Dan)", "prediction": ["all x.(Songwriter(x) -> Dan(x))", "all x.((Dan(x) & Songwriter(x)) -> Songwriter(x))", "(Songwriter(Dan) & Writer(Dan))", "all x.((Dan(x) & Songwriter(x)) -> Writer(x))", "(Songwriter(Dan) & -Songwriter(Dan))", "(Songwriter(Dan) & Songwriter(Dan))", "(Songwriter(Dan)", "exists x.(Songwriter(x) & Dan(x))", "all x.((Dan(x) & Songwriter(x)) -> Singer(x))", "(Songwriter(Dan) & Singer(Dan))", "all x.((Dan(x) & Songwriter(x)) -> -Songwriter(x))", "all x.(Songwriter(x) -> Dan(x))", "Dan is also a songwriter.", "all x.((Dan(x) & Songwriter(x)) -> Author(x))", "(Songwriter(Dan) & Author(Dan))", "(Songwriter(Dan) | Songwriter(Dan)))"]}
{"id": "folio_train_2222", "nl": "All lead singers are singers.", "fol": "all x y.(HasLeadSinger(x,y) -> IsSinger(y))", "prediction": ["all x.(LeadSinger(x) -> Singer(x))", "all x.(LeadSinger(x) -> Singer(x))", "all x.(LeadSonger(x) -> Singer(x))", "all x y.((LeadSinger(x) & Singer(y)) -> Singer(x))", "all x.(LeadSinger(x) -> Singer(x))", "all x y.((LeadSinger(x) & Singer(y)) -> Is(x,y))", "all x.(LeadS\u00e4nger(x) -> Singer(x))", "all x.(LeadSinger(x) -> Singer(x))", "all x.exists y.(LeadSinger(x) & Singer(y) & LeadSinger(x))", "all x y.((LeadSinger(x) & Singer(y)) -> Singer(x,y))", "all x.(LedSinger(x) -> Singer(x))", "all x.(LeadSinging(x) -> Singer(x))", "all x y.((LeadSinger(x) & Singer(y)) -> LeadSinger(x))", "(all x.(LeadSinger(x) -> Singer(x)))", "all x.exists y.(LeadSinger(x) & Singer(y))", "all x.(LeaderSinger(x) -> Singer(x))"]}
{"id": "folio_train_2223", "nl": "All singers are musicians.", "fol": "all x.(IsSinger(x) -> IsMusician(x))", "prediction": ["all x.(Singer(x) -> Musician(x))", "all x y.((Singer(x) & Singer(y)) -> Musician(x))", "all x.(Songer(x) -> Musician(x))", "all x.exists y.(Singer(x) & Singer(y) & Musician(x))", "all x y.((Singer(x) & Musician(y)) -> Musician(x))", "all x.(Singer(x) -> Musician(x))", "all x.(Singer(x) -> Musician(x))", "all x y.((Singer(x) & Singer(y)) -> Musician(x,y))", "all x.exists y.(Singer(x) & Singer(y) & Musician(y))", "all x.((Singer(x) & Musician(x)) -> Musician(x))", "all x.(S\u00e4nger(x) -> Musician(x))", "all x.exists y.(Singer(x) & Musician(y) & PerformsWith(x,y))", "all x.exists y.(Singer(x) & Musician(y) & Singer(x))", "all x.exists y.(Singer(x) & Singer(y) & Musician(x,y))", "all x.((Singer(x) & Musician(x)) -> Singer(x))", "all x.(Singer(x) -> Musical(x))"]}
{"id": "folio_train_2224", "nl": "Demons is one of the most popular singles of Imagine Dragons.", "fol": "HasPopularSingle(ImagineDragon,Demons)", "prediction": ["(PopularSingle(Demons) & ImagineDragons(ImagineDragons))", "(PopularSingle(Demons) & ImagineDragons(Dragons))", "all x y.((Single(x) & ImagineDragon(y)) -> Demons(x,y))", "All x.((Demons(x) & ImagineDragons(x)) -> PopularSingle(x))", "all x.(Demons(x) -> (PopularSingle(x) & ImagineDragons(x)))", "(MostPopularSingle(Demons) & ImagineDragons(ImagineDragons))", "All x.(Demons(x) -> (PopularSingle(x) & ImagineDragons(x)))", "All x.(Demons(x) -> PopularSingleOfImagineDragons(x))", "All x.(Demons(x) -> ImagineDragons(x))", "(MostPopularSingle(Demons) & ImagineDragons(Dragons))", "All x.(Demons(x) -> ImagineDragonsSingle(x))", "all x y.((Single(x) & ImagineDragon(y)) -> Demons(x))", "(PopularSingle(Demons) & ImagineDragons(Demons))", "All x.((Demons(x) & ImagineDragons(x)) -> MostPopularSingle(x))", "all x.(Demons(x) -> (PopularSingle(x) & ImagineDragon(x)))", "All x.((Demons(x) & ImagineDragons(x)) -> PopularSingle(x))"]}
{"id": "folio_train_2225", "nl": "Some singles of Imagine Dragons have been on Billboard Hot 100.", "fol": "exists x.(HasPopularSingle(ImagineDragon,x) & IsOnBillboardHot100(x))", "prediction": ["exists x.(ImagineDragonsSingle(x) & BillboardHot100(x))", "exists x.(Single(x) & ImagineDragon(x) & BillboardHot100(x))", "exists x.(Single(x) & ImagineDragons(x) & BillboardHot100(x))", "exists x.(ImagineDragonSingle(x) & BillboardHot100(x))", "exists x.(ImagineDragonsSingle(x) & OnBillboardHot100(x))", "exists x.(Single(x) & ImagineDragon(x) & OnBillboardHot100(x))", "exists x.(ImagineDragon(x) & Single(x) & BillboardHot100(x))", "exists x.(Single(x) & ImagineDragons(x) & OnBillboardHot100(x))", "exists x.(ImagineDragonSingle(x) & OnBillboardHot100(x))", "exists x.(ImagineDragons(x) & Single(x) & BillboardHot100(x))", "exists x.((Single(x) & ImagineDragon(x)) -> BillboardHot100(x))", "exists x y.(Single(x) & ImagineDragon(x) & BillboardHot100(y))", "exists x.(ImagineDragons(x) & Single(x) & OnBillboardHot100(x))", "exists x y.(Single(x) & ImagineDragon(y) & BillboardHot100(x))", "exists x y.(Single(x) & ImagineDragon(y) & BillboardHot100(x,y))", "exists x.(IceDragonsSingle(x) & BillboardHot100(x))"]}
{"id": "folio_train_2226", "nl": "Some rock band's lead singer is a songwriter.", "fol": "exists x.(IsRockBand(x) & exists y.(HasLeadSinger(x,y) & IsSongWriter(y)))", "prediction": ["exists x.(RockBandLeadSinger(x) & Songwriter(x))", "exists x.(RockBand(x) & LeadSinger(x) & Songwriter(x))", "exists x y.(RockBand(x) & LeadSinger(x,y) & Songwriter(y))", "exists x y.(RockBand(x) & LeadSinger(x) & Songwriter(y))", "exists x.(RockBandLeaderSinger(x) & Songwriter(x))", "exists x y.(RockBand(x) & LeadSinger(x,y) & Songwriter(x))", "exists x y.(RockBand(x) & LeadSinger(x,y) & Songwriter(x,y))", "exists x y.(RockBand(x) & LeadSinger(y) & Songwriter(x))", "exists x.(RockBandLeadSongwriter(x) & LeadSinger(x))", "exists x y.(RockBand(x) & LeadSinger(x) & Songwriter(y) & LeadSinger(x,y))", "exists x y.(RockBandLeadSinger(x) & LeadSinger(y) & Songwriter(x))", "exists x y.(RockBand(x) & LeadSinger(x) & Songwriter(y) & LeadSinger(x))", "exists x y.(RockBand(x) & LeadSinger(y) & Songwriter(y))", "exists x y.(RockBand(x) & LeadSinger(x) & Songwriter(x))", "exists x y z.(RockBand(x) & LeadSinger(y) & Songwriter(z) & LeadSinger(y,x))", "exists x y.(RockBand(x) & LeadSinger(y) & LeadSinger(x,y) & Songwriter(x))"]}
{"id": "folio_train_2227", "nl": "Dan is not a musician.", "fol": "-IsMusician(Dan)", "prediction": ["all x.((Dan(x) & -Musician(x)) -> -Musician(x))", "all x.(Dan(x) -> -Musician(x))", "(-Musician(Dan))", "-Musician(Dan)", "all x.((Dan(x) & Musician(x)) -> -Musician(x))", "All x.(Dan(x) -> -Musician(x))", "(-Musician(Dan) & -Musician(Dan))", "Dan is notMusician(Dan)", "all x.((Dan(x) & -Musician(x)) -> -(Musician(x) & Musician(x)))", "all x.((Dan(x) & -Musician(x)) -> -(Musician(x) & Musician(x))))", "all x.((Dan(x) & -Musician(x)) -> -(Musician(x) & -Musician(x)))", "all x.((Dan(x) & -Musician(x)) -> -Musical(x))", "all x.((Dan(x) & -Musician(x)) -> -(Musician(x) & -Musician(x))))", "all x.((Dan(x) & -Musician(x)) -> -(Musician(x) | Musician(x))))", "all x.((Dan(x) & -Musician(x)) -> NotMusician(x))", "all x.((Dan(x) & -Musician(x)) -> (-Musician(x) & -Musician(x)))"]}
{"id": "folio_train_2228", "nl": "Demons has been on Billboard Hot 100.", "fol": "IsOnBillboardHot100(Demons)", "prediction": ["all x.(Demons(x) -> BillboardHot100(x))", "All x.(Demons(x) -> BillboardHot100(x))", "all x y.((Demons(x) & BillboardHot100(y)) -> On(x,y))", "all x.(Demons(x) -> OnBillboardHot100(x))", "(BetweenBillboardHot100(Demons) & BillboardHot100(Demons))", "(all x.(Demons(x) -> BillboardHot100)))", "All x.(Demons(x) -> OnBillboardHot100(x))", "(all x.(Demons(x) -> BillboardHot100(x)))", "all x.(Dmons(x) -> BillboardHot100(x))", "(BillboardHot100(Demons) & BillboardHot100(Demons))", "all x y.((Demons(x) & BillboardHot100(y)) -> HasBeenOn(x,y))", "all x.(Demon(x) -> BillboardHot100(x))", "all x y.((Demons(x) & BillboardHot100)) -> On(x,y))", "all x y.((Demons(x) & BillboardHot(y)) -> On(x,y))", "all x y.((Demons(x) & BillboardHot100(y)) -> WasOn(x,y))", "(OnBillboardHot100) & Demons(Demons))"]}
{"id": "folio_train_2229", "nl": "All bread is food.", "fol": "all x.(IsBread(x) -> IsFood(x))", "prediction": ["all x.(Bread(x) -> Food(x))", "all x.exists y.(Bread(x) & Food(y))", "all x y.((Bread(x) & Bread(y)) -> Food(x))", "all x y.((Bread(x) & Food(y)) -> Food(x))", "all x y.((Bread(x) & Food(y)) -> Bread(x))", "all x.((Bread(x) & Food(x)) -> Bread(x))", "all x.(Bread(x) -> Food(x))", "all x.exists y.(Bread(x) & Food(y) & Contains(x,y))", "all x.(Broth(x) -> Food(x))", "All x.(Bread(x) -> Food(x))", "all x y.((Bread(x) & Food(y)) -> Food(x,y))", "all x y.((Bread(x) & Food(y)) -> Bread(x,y))", "all x y.((Bread(x) & Bread(y)) -> Food(x,y))", "all x.exists y.((Bread(x) & Food(y)) -> Bread(x))", "all x.((Bread(x) & Food(x)) -> Food(x))", "all x.exists y.(Bread(x) & Bread(y) & Food(x))"]}
{"id": "folio_train_2230", "nl": "Some sandwiches are bread.", "fol": "exists x.(IsSandwich(x) & IsBread(x))", "prediction": ["exists x.(Sandwich(x) & Bread(x))", "exists x.(Bread(x) & Sandwich(x))", "exists x.(Snack(x) & Bread(x))", "exists x y.(Sandwich(x) & Sandwich(y) & Bread(y))", "exists x y.(Sandwich(x) & Sandwich(y) & Bread(x))", "exists x y.(Sandwich(x) & Bread(y))", "exists x.(Sandwich(x) & Bread(x))", "exists x.(Sandwich(x) & Sandwich(x) & Bread(x))", "exists x.((Sandwich(x) & Bread(x)) -> Sandwich(x))", "exists x.(Sundae(x) & Bread(x))", "exists x.(Sonder(x) & Bread(x))", "exists x.(Salad(x) & Bread(x))", "exists x.((Sandwich(x) & Bread(x))", "exists x y.(Sandwich(x) & Sandwich(y) & Bread(z))", "exists x.(Bread(x) & Sandwich(y) & ServedWith(x,y))", "exists x.(Subway(x) & Bread(x))"]}
{"id": "folio_train_2231", "nl": "All food is edible. ", "fol": "all x.(IsFood(x) -> IsEdible(x))", "prediction": ["all x.(Food(x) -> Edible(x))", "all x y.((Food(x) & Food(y)) -> Edible(x))", "all x.exists y.(Food(x) & Food(y) & Edible(x))", "all x.exists y.(Food(x) & Food(y) & Edible(x,y))", "all x.(Food(x) -> Edible(x))", "all x y.((Food(x) & Food(y)) -> Edible(x,y))", "all x.exists y.(Food(x) & Edible(y))", "all x.exists y.(Food(x) & Food(y) & Edible(y))", "exists x.(Food(x) & Edible(x))", "all x.((Food(x) & Edible(x)) -> Food(x))", "all x.((Food(x) & Edible(x)) -> Eatable(x))", "All x.(Food(x) -> Edible(x))", "all x.exists y.(Food(x) & Edible(y))", "all x.exists y.(Food(x) & Food(y) & Edible(x))", "all x.(Food(x) -> Edible(x))", "all x y.((Food(x) & Food(y)) -> Edible(y))"]}
{"id": "folio_train_2232", "nl": "No edible things are poisonous.", "fol": "all x.(IsEdible(x) -> -IsPoisonous(x))", "prediction": ["-exists x.(Edible(x) & Poisonous(x))", "-exists x.(EdibleThing(x) & Poisonous(x))", "all x.(Edible(x) -> -Poisonous(x))", "all x.(EdibleThing(x) -> -Poisonous(x))", "-exists x.(EdibleTree(x) & Poisonous(x))", "-exists x.(EdibleTreatment(x) & Poisonous(x))", "-exists x.(Edible(x) & -Poisonous(x))", "-exists x.(EdibleThing(x) & -Poisonous(x))", "-exists x.(EdibleToy(x) & Poisonous(x))", "-exists x.(EdibleDing(x) & Poisonous(x))", "-(EdibleThing(x) & Poisonous(x))", "-exists x.(EdibleThing(x) & Poisonous(x))", "-exists x.(Edible(x) & Poisonous(x))", "-exists x.(Edible(x) & poisonous(x))", "-exists x.(EdibleTreatment(x) & -Poisonous(x))", "-all x.(Edible(x) -> Poisonous(x))"]}
{"id": "folio_train_2233", "nl": "Deodorant is poisonous.", "fol": "IsPoisonous(Deodorant)", "prediction": ["all x.(Deodorant(x) -> Poisonous(x))", "All x.(Deodorant(x) -> Poisonous(x))", "all x.((Deodorant(x) & Poisonous(x)) -> Poisonous(x))", "all x y.((Deodorant(x) & Poisonous(y)) -> Poisonous(x))", "all x.(Deodorant(x) -> Poisonous(x))", "all x y.((Deodorant(x) & Poisonous(y)) -> Is(x,y))", "all x.(Deodorant(x) -> Poisonous(x))", "all x.(Dodorant(x) -> Poisonous(x))", "all x y.((Deodorant(x) & Poisonous(y)) -> Uses(x,y))", "all x y.((Deodorant(x) & Poisonous(y)) -> Poisonous(x))", "all x.((Deodorant(x) & Poisonous(x)) -> Poisonous(x))", "all x y.((Deodorant(x) & Poisonous(y)) -> Contains(x,y))", "all x y.((Deodorant(x) & Poisonous(y)) -> Has(x,y))", "all x.((Deodorant(x) & Poisonous(x)) -> Deodorant(x))", "exists x.(Deodorant(x) & Poisonous(x))", "all x.((Deodorant(x) & Poisonous(x)) -> Uses(x,y))"]}
{"id": "folio_train_2234", "nl": "Deodorant is a sandwich.", "fol": "IsSandwich(Deodorant)", "prediction": ["all x.(Deodorant(x) -> Sandwich(x))", "all x.(Deodorant(x) -> Sandwich(x))", "all x y.((Deodorant(x) & Sandwich(y)) -> Is(x,y))", "All x.(Deodorant(x) -> Sandwich(x))", "all x y.((Deodorant(x) & Sandwich(y)) -> Has(x,y))", "all x.((Deodorant(x) & Sandwich(x)) -> Is(x,y))", "all x y.((Deodorant(x) & Sandwich(y)) -> Sandwich(x))", "all x y.((Deodorant(x) & Sandwich(y)) -> (Sandwich(x) & Sandwich(y)))", "all x.((Deodorant(x) & Sandwich(x)) -> Has(x,y))", "all x y.((Deodorant(x) & Sandwich(y)) -> Contains(x,y))", "all x.((Deodorant(x) & Sandwich(x)) -> Deodorant(x))", "all x.((Deodorant(x) & Sandwich(x)) -> Contains(x,y))", "all x.(Dodorant(x) -> Sandwich(x))", "all x y.((Deodorant(x) & Sandwich(y)) -> (Sandwich(x) & Sandwich(x)))", "exists x.(Deodorant(x) & Sandwich(x))", "all x.((Deodorant(x) & Sandwich(x)) -> Requires(x))"]}
{"id": "folio_train_2235", "nl": "Deodorant is a sandwich and bread.", "fol": "(IsSandwich(Deodorant) & IsBread(Deodorant))", "prediction": ["all x.(Deodorant(x) -> (Sandwich(x) & Bread(x)))", "all x.(Deodorant(x) -> (Sandwich(x) & Bread(x)))", "all x.(Deodorant(x) -> (Bread(x) & Sandwich(x)))", "all x.((Deodorant(x) & Sandwich(x) & Bread(x)) -> Deodorant(x))", "All x.(Deodorant(x) -> (Sandwich(x) & Bread(x)))", "all x.(Deodorant(x) -> (IsSandwich(x) & IsBread(x)))", "all x.(Deodorant(x) -> ((Sandwich(x) & Bread(x))))", "all x y.((Deodorant(x) & Sandwich(y)) -> Bread(y))", "all x.(Dodorant(x) -> (Sandwich(x) & Bread(x)))", "exists x.(Deodorant(x) & Sandwich(x) & Bread(x))", "all x.(Deodorant(x) -> (SandwichBread(x) & SandwichBread(x)))", "all x.(Deodorant(x) -> (SandwichBread(x) & Sandwich(x)))", "all x.(Deodorant(x) -> (Snack(x) & Bread(x)))", "all x.(Deodorant(x) -> (Sandwich(x) & Bread(x) & Sandwich(x)))", "all x.(Deodorant(x) -> (Sandwich(x) | Bread(x)))", "all x y.((Deodorant(x) & Sandwich(y)) -> Bread(x))"]}
{"id": "folio_train_2236", "nl": "If deodorant is a loaf of bread, then deodorant is not a sandwich.", "fol": "(IsBread(Deodorant) -> -IsSandwich(Deodorant))", "prediction": ["all x.((Deodorant(x) & LoafOfBread(x)) -> -Sandwich(x))", "all x.((Deodorant(x) & BreadLoaf(x)) -> -Sandwich(x))", "all x.((Deodorant(x) & Bread(x)) -> -Sandwich(x))", "all x.(((Deodorant(x) & LoafOfBread(x)) -> -Sandwich(x))", "all x.((LoafOfBread(x) & Deodorant(x)) -> -Sandwich(x))", "all x.((Deodorant(x) & LollipopOfBread(x)) -> -Sandwich(x))", "all x.((Defodorant(x) & LoafOfBread(x)) -> -Sandwich(x))", "all x.((Deodorant(x) & BreadLoose(x)) -> -Sandwich(x))", "all x.((Sandwich(x) & LoafOfBread(x)) -> -Sandwich(x))", "all x.((Dodorant(x) & LoafOfBread(x)) -> -Sandwich(x))", "all x.(LoafOfBread(x) -> -Sandwich(x))", "all x.((BreadLoaf(x) & Deodorant(x)) -> -Sandwich(x))", "all x.((Deodorant(x) & LoafOfBread(x)) -> -Snack(x))", "all x.((Bread(x) & LoafOf(x,y)) -> -Sandwich(x))", "all x y.((Deodorant(x) & Bread(y)) -> -Sandwich(x))", "all x.((DeodorantLoafOfBread(x)) -> -Sandwich(x))"]}
{"id": "folio_train_2237", "nl": "Common utilities include water, electricity, gas, heating, sewer, trash, and recycling.", "fol": "(IsCommonUtility(Water) & IsCommonUtility(Electricity) & IsCommonUtility(Gas) & IsCommonUtility(Heating))", "prediction": ["all x.(CommonUtility(x) -> (Water(x) | Electricity(x) | Gas(x) | Heating(x) | Sewer(x) | Trash(x) | Recycling(x)))", "all x.(CommonUtility(x) -> (Water(x) & Electricity(x) & Gas(x) & Heating(x) & Sewer(x) & Trash(x) & Recycling(x)))", "all x.(CommonUtilities(x) -> (Water(x) | Electricity(x) | Gas(x) | Heating(x) | Sewer(x) | Trash(x) | Recycling(x)))", "all x.(Utilities(x) -> (Water(x) | Electricity(x) | Gas(x) | Heating(x) | Sewer(x) | Trash(x) | Recycling(x)))", "all x.(CommonUtility(x) -> (Water(x) | Electricity(x) | Gas(x) | Heating(x) | Sewer(x) | Trash(x) | Recycling(x)))", "all x.(Utility(x) -> (Water(x) | Electricity(x) | Gas(x) | Heating(x) | Sewer(x) | Trash(x) | Recycling(x)))", "all x.(CommonUtilities(x) -> (Water(x) & Electricity(x) & Gas(x) & Heating(x) & Sewer(x) & Trash(x) & Recycling(x)))", "all x.((Utilities(x) & Water(x) & Electricity(x) & Gas(x) & Heating(x) & Sewer(x) & Trash(x) & Recycling(x)) -> Common(x))", "all x.((Utilities(x) & Water(x) & Electricity(x) & Gas(x) & Heating(x) & Sewer(x) & Trash(x) & Recycling(x)) -> CommonUtilities(x))", "all x.((Water(x) | Electricity(x) | Gas(x) | Heating(x) | Sewer(x) | Trash(x) | Recycling(x))) -> CommonUtilities(x))", "all x.(Utilities(x) -> (Water(x) & Electricity(x) & Gas(x) & Heating(x) & Sewer(x) & Trash(x) & Recycling(x)))", "all x.((Water(x) | Electricity(x) | Gas(x) | Heating(x) | Sewer(x) | Trash(x) | Recycling(x))) -> CommonUtility(x))", "all x.(CommonUtility(x) -> (Water(x) | Electricity(x) | Gas(x) | Heating(x) | Sewer(x) | Trash(x) | Recycling(x)))", "all x.(CommonUtilities(x) -> (Water(x) | Electricity(x) | Gas(x) | Heating(x) | Sewer(x) | Trash(x) | Recycling(x)))", "all x.((Utility(x) & Water(x) & Electricity(x) & Gas(x) & Heating(x) & Sewer(x) & Trash(x) & Recycling(x)) -> Common(x))", "all x.(CommonUtility(x) -> (Water(x) | Electricity(x) | Gas(x) | Heating(x) | Sewer(x) | Task(x) | Recycling(x)))"]}
{"id": "folio_train_2238", "nl": "Many apartment rents cover the cost of water and electricity.", "fol": "exists x.(CoversUtility(x,Water) & CoversUtility(x,Electricity))", "prediction": ["all x.(ApartmentRent(x) -> (CoversWater(x) & CoversElectricity(x)))", "exists x.(ApartmentRent(x) & CoversWater(x) & CoversElectricity(x))", "all x.(ApartmentRent(x) -> (CostOfWater(x) & CostOfElectricity(x)))", "all x.(ApartmentRent(x) -> (CoversWater(x) & CoversElectricity(x)))", "all x.(ApartmentRent(x) -> (CoversWater(x) | CoversElectricity(x)))", "all x y.((ApartmentRent(x) & Water(y) & Electricity(y)) -> CoversCost(x,y))", "all x.(ApartmentRent(x) -> (CoversWater(x) & CoversElectricity(x)))", "all x y z.((ApartmentRent(x) & Water(y) & Electricity(z)) -> CoversCost(x,y,z))", "all x.(AppartmentRent(x) -> (CoversWater(x) & CoversElectricity(x)))", "all x y.((ApartmentRent(x) & Water(y)) -> CoversCost(x,y))", "exists x.(ApartmentRent(x) & CoversWaterAndElectricity(x))", "exists x.(ApartmentRent(x) & CoversWaterCost(x) & CoversElectricityCost(x))", "all x y.((ApartmentRent(x) & Water(y) & Electricity(z)) -> CoversCost(x,y,z))", "all x.(ApartmentRent(x) -> (CompensatesWater(x) & CoversElectricity(x)))", "all x y.((ApartmentRent(x) & Water(y) & Electricity(y)) -> Covers(x,y))", "exists x.(AppartmentRent(x) & CoversWater(x) & CoversElectricity(x))"]}
{"id": "folio_train_2239", "nl": "Susan lives in an apartment where the rent covers all utilities.", "fol": "all x.CoversUtility(Susan,x)", "prediction": ["all x y z.((Apartment(x) & Rent(y) & Utility(z)) -> LivesIn(x,y,z))", "all x y.((Apartment(x) & Apartment(y) & RentCovers(x,y)) -> SusanLivesIn(x,y))", "all x y z.((Susan(x) & Apartment(y) & Utility(z)) -> RentCovers(x,y,z))", "all x y z.((Apartment(x) & Rent(y) & Utility(z)) -> Covers(x,y,z))", "all x y.((Apartment(x) & Rent(y)) -> CoversUtility(x,y))", "all x y.((Apartment(x) & Apartment(y) & RentCoversUtility(x,y)) -> LivesIn(x,y))", "all x y.((Apartment(x) & Apartment(y) & RentCoversUtility(x,y)) -> SusanLivesIn(x,y))", "all x y.((Apartment(x) & Apartment(y) & RentCovers(x,y)) -> SusanLisesIn(x,y))", "all x y.((Apartment(x) & Apartment(y) & RentCovers(x,y)) -> SusanLivesIn(x,y))", "all x y z.((Susan(x) & Apartment(y) & Utility(z)) -> RentCovers(x,y,z))", "all x y.((Apartment(x) & Apartment(y) & RentCoversUtility(x,y)) -> SusanLisesIn(x,y))", "all x.((Apartment(x) & RentCoversUtility(x)) -> SusanLivesIn(x))", "all x y.((Apartment(x) & Apartment(y) & RentCovers(x,y)) -> SusanLiving(x,y))", "all x y.((Apartment(x) & Apartment(y) & RentCoversUtility(x,y)) -> SusanLiving(x,y))", "all x y z.((Apartment(x) & Apartment(y) & Utility(z)) -> RentCovers(x,y,z))", "all x y.((Apartment(x) & Apartment(y) & RentCovers(x,y)) -> SusanLiving(x,y))"]}
{"id": "folio_train_2240", "nl": "The rent of the apartment where Ava lives does not cover any utility expenses.", "fol": "all x.-CoversUtility(Ava,x)", "prediction": ["all x.((Apartment(x) & AvaLivesIn(x)) -> -CoversUtilityExpenses(x))", "all x.((Apartment(x) & AvaLives(x)) -> -CoversUtilityExpenses(x))", "all x y.((Apartment(x) & Ava(y)) -> -CoversUtilityExpenses(x,y))", "all x.((Apartment(x) & LivesAva(x)) -> -CoversUtilityExpenses(x))", "all x.((Apartment(x) & Ava(x)) -> -CoversUtilityExpenses(x))", "all x.((Apartment(x) & AvaLiving(x)) -> -CoversUtilityExpenses(x))", "all x y.((Apartment(x) & Apartment(y) & Ava(x)) -> -CoversUtilityExpenses(x,y))", "all x y.((Apartment(x) & AvaApartment(y)) -> -CoversUtilityExpenses(x,y))", "all x y.((Apartment(x) & Ava(y) & LivesIn(x,y)) -> -CoversUtilityExpenses(x,y))", "all x y.((Apartment(x) & Ava(y) & LivesIn(x,y)) -> -CoversUtilityExpenses(x))", "all x y z.((Apartment(x) & Apartment(y) & Ava(z)) -> -CoversUtilityExpenses(x,y,z))", "all x.((Apartment(x) & AvaLivesIn(x)) -> -UtilityExpenses(x))", "all x.((Apartment(x) & WhereAvaLives(x)) -> -CoversUtilityExpenses(x))", "all x.((Apartment(x) & AvaLives(x)) -> -UtilityExpenses(x))", "all x y z.((Apartment(x) & Ava(y) & Apartment(z)) -> -CoversUtilityExpenses(x,y,z))", "all x.((Apartment(x) & AvaLiving(x)) -> -UtilityExpenses(x))"]}
{"id": "folio_train_2241", "nl": "Noah lives in an apartment where the rent does not cover heating.", "fol": "-CoversUtility(Noah,Heating)", "prediction": ["all x y.((Apartment(x) & Apartment(y) & -CoversHeating(y)) -> LivesIn(x,y))", "all x y z.((Apartment(x) & Apartment(y) & Rent(z) & -CoversHeating(z)) -> LivesIn(x,y,z))", "all x y.((Apartment(x) & Apartment(y) & -CoversHeating(x,y)) -> LivesIn(x,y))", "all x y z.((Apartment(x) & Apartment(y) & Rent(z) & -CoversHeating(y,z)) -> LivesIn(x,y,z))", "all x y z.((Apartment(x) & Apartment(y) & Rent(z) & -CoversHeating(z)) -> LivesIn(x,y,z))", "all x y z.((Apartment(x) & Apartment(y) & Rent(z) & -CoversHeating(y,z)) -> LivesIn(x,y))", "all x y.((Apartment(x) & Apartment(y) & -CoversHeating(x)) -> LivesIn(x,y))", "all x y z.((Apartment(x) & Apartment(y) & Rent(z) & -CoversHeating(y,z)) -> LivesIn(x,y,z))", "all x y.((Apartment(x) & Apartment(y) & -CoversHeating(y,x)) -> LivesIn(x,y))", "all x y z.((Apartment(x) & Apartment(y) & Rent(z) & -CoversHeating(y,z)) -> LivesIn(x,y))", "all x y.((Apartment(x) & Apartment(y) & -CoversHeating(y)) -> NoahLivesIn(x,y))", "all x y z.((Apartment(x) & Apartment(y) & Rent(z) & -Heating(z)) -> LivesIn(x,y,z))", "all x y.((Apartment(x) & Rental(y) & -CoversHeating(y)) -> LivesIn(x,y))", "all x y z.((Apartment(x) & Apartment(y) & Rent(z) & -CoversHeating(z)) -> LivesIn(x,y))", "all x y.((Apartment(x) & Apartment(y) & -CoversHeating(y)) -> NoahLisesIn(x,y))", "all x y.((Apartment(x) & Apartment(y)) -> -CoversHeating(x,y))"]}
{"id": "folio_train_2242", "nl": "A common utility being covered is that it doesn't need to be paid.", "fol": "all x y.((CoversUtility(x,y) & IsCommonUtility(y)) <-> -RequiresPayment(x,y))", "prediction": ["all x.((Utility(x) & Covered(x)) -> -Payable(x))", "all x.((Utility(x) & Covered(x)) -> -NeedsPayment(x))", "all x.((Utility(x) & Covered(x)) -> -NeedsToBePayed(x))", "all x.((Utility(x) & Covered(x)) -> -NeedsPayment(x))", "all x.((Utility(x) & -Payable(x)) -> Covered(x))", "all x.((Utility(x) & Covered(x)) -> -Payable(x))", "all x.((Utility(x) & Covered(x)) -> -Payed(x))", "all x.((Utility(x) & Covered(x)) -> -NeedsToBePayed(x))", "all x.((Utility(x) & -Payed(x)) -> Covered(x))", "all x.((Utility(x) & Covered(x)) -> -NeedsToBePaid(x))", "all x.((Utility(x) & Covered(x)) -> -NeedsToPay(x))", "all x.((Utility(x) & Covered(x)) -> -NotPayable(x))", "all x.((Utility(x) & Covered(x)) -> -RequiresPayment(x))", "all x.((Utility(x) & Covered(x)) -> -HasPayment(x))", "all x.((Utility(x) & Covered(x)) -> -Payed(x))", "all x.((Utility(x) & Covered(x)) -> -Payable(x))"]}
{"id": "folio_train_2243", "nl": "Noah needs to pay the water bill.", "fol": "RequiresPayment(Noah,Water)", "prediction": ["all x.(Noah(x) -> NeedsToPayWaterBill(x))", "all x y.((Noah(x) & WaterBill(y)) -> NeedsToPay(x,y))", "all x.(NeedsToPayWaterBill(x) -> Noah(x))", "all x y.((Noah(x) & WaterBill(y)) -> NeedsPayment(x,y))", "all x.((Noah(x) & WaterBill(y)) -> NeedsToPay(x,y))", "all x y.((Noah(x) & WaterBill(y)) -> NeedsPay(x,y))", "all x.((Noah(x) & WaterBill(y)) -> NeedsPayment(x,y))", "all x.(NoahNeedsToPayWaterBill(x) -> NeedsToPayWaterBill(x))", "all x.(Noah(x) -> NeedsWaterBill(x))", "all x.(NoahNeedsToPayWaterBill(x) -> NoahNeedsToPayWaterBill(x))", "all x y.((Noah(x) & WaterBill(y)) -> Needs(x,y))", "all x.((Noah(x) & WaterBill(y)) -> NeedsPay(x,y))", "all x.(NoahNeedsToPayWaterBill(x))", "all x.((Noah(x) & WaterBill(x)) -> NeedsToPay(x,y))", "all x.(Noah(x) -> PaysWaterBill(x))", "all x.(NeedsToPayWaterBill(x) -> Noah(x))"]}
{"id": "folio_train_2244", "nl": "Noah and Ava both need to pay the heating bill.", "fol": "(RequiresPayment(Noah,Heating) & RequiresPayment(Ava,Heating))", "prediction": ["all x.((Noah(x) & Ava(x)) -> NeedsToPayHeatingBill(x))", "all x y.((Noah(x) & Ava(y)) -> NeedsToPayHeatingBill(x,y))", "all x.((Noah(x) | Ava(x)) -> NeedsToPayHeatingBill(x))", "(PayHeatingBill(Noah) & PayHeatingBill(Ava))", "all x.((Noah(x) | Ava(x)) -> NeedsHeatingBill(x))", "all x.((Noah(x) & Ava(x)) -> NeedsHeatingBill(x))", "all x.((Noah(x) | Ava(x)) -> PaysHeatingBill(x))", "all x.((Noah(x) & Ava(x)) -> PaysHeatingBill(x))", "all x.((Noah(x) & Ava(x)) -> PayHeatingBill(x))", "all x y.((Noah(x) & Ava(y)) -> PaysHeatingBill(x,y))", "all x y.((Noah(x) & Ava(y)) -> (PayHeatingBill(x,y) | PayHeatingBill(y,x)))", "all x y.((Noah(x) & Ava(y)) -> NeedsHeatingBill(x,y))", "all x y.((Noah(x) & Ava(y)) -> (PayHeatingBill(x,y) & PayHeatingBill(y,x)))", "all x y.((Noah(x) & Ava(y)) -> NeedsToPayHeatingBill(x))", "all x y.((Noah(x) | Ava(y)) -> NeedsToPayHeatingBill(x,y))", "all x y.((Noah(x) & Ava(y)) -> (PayHeatingBill(x,y) | PayHeatingBill(y,z)))"]}
{"id": "folio_train_2245", "nl": "Susan does not need to pay the water bill.", "fol": "-RequiresPayment(Susan,Water)", "prediction": ["all x.((Susan(x) & WaterBill(y)) -> -Pays(x,y))", "all x.((Susan(x) & WaterBill(y)) -> -NeedsPayment(x,y))", "all x.((Susan(x) & WaterBill(y)) -> -NeedsToPay(x,y))", "all x.(Susan(x) -> -PaysWaterBill(x))", "all x y.((Susan(x) & WaterBill(y)) -> -Pays(x,y))", "all x.((Susan(x) & WaterBill(y)) -> -HasToPay(x,y))", "all x.((Susan(x) & WaterBill(y)) -> -Pay(x,y))", "all x.((Susan(x) & WaterBill(y)) -> -NeedsPay(x,y))", "all x.(Susan(x) -> -PayWaterBill(x))", "all x.((Susan(x) & WaterBill(y)) -> -PaysBill(x,y))", "all x y.((Susan(x) & WaterBill(y)) -> -NeedsToPay(x,y))", "all x.((Susan(x) & WaterBill(x)) -> -Pays(x,WaterBill))", "all x y.((Susan(x) & WaterBill(y)) -> -NeedsPayment(x,y))", "All x.((Susan(x) & WaterBill(y)) -> -Pays(x,y))", "all x.((Susan(x) & WaterBill(x)) -> -NeedsToPay(x,WaterBill))", "(-PaysWaterBill(Susan))"]}
{"id": "folio_train_2246", "nl": "All clothes are products. ", "fol": "all x.(IsClothing(x) -> IsProduct(x))", "prediction": ["all x.(Clothing(x) -> Product(x))", "all x.(Clothes(x) -> Product(x))", "all x.(Clothing(x) -> Products(x))", "all x.(Clothes(x) -> Products(x))", "all x y.((Clothing(x) & Clothes(y)) -> Product(x))", "all x y.((Clothing(x) & Product(y)) -> Product(x))", "all x y.((Clothing(x) & Product(y)) -> Product(x,y))", "all x y.((Clothing(x) & Clothes(y)) -> Product(x,y))", "all x.(Clothe(x) -> Product(x))", "all x.(Clothing(x) -> Product(x))", "all x.exists y.(Clothing(x) & Clothes(y) & Product(x,y))", "all x y.((Clothing(x) & Clothes(y)) -> Products(x))", "(all x.(Clothing(x) -> Product(x)))", "all x.exists y.(Clothing(x) & Clothes(y) & Product(x))", "all x.exists y.(Clothing(x) & Product(y) & DesignedBy(x,y))", "all x.exists y.(Clothing(x) & Product(y) & DesignedFor(x,y))"]}
{"id": "folio_train_2247", "nl": "No products are perfect. ", "fol": "all x.(IsProduct(x) -> -IsPerfect(x))", "prediction": ["-exists x.(Product(x) & Perfect(x))", "-exists x.(Product(x) & Perfection(x))", "all x.(Product(x) -> -Perfect(x))", "-exists x.(Product(x) & Perfect(x))", "-all x.(Product(x) -> Perfect(x))", "-exists x y.(Product(x) & Product(y) & Perfect(x,y))", "-exists x y.(Product(x) & Product(y) & Perfect(x))", "exists x.(Product(x) & -Perfect(x))", "-exists x y.(Product(x) & Product(y) & Perfect(y))", "-exists x.(Product(x) & -Perfect(x))", "\u2013exists x.(Product(x) & Perfect(x))", "-exists x.(Product(x) & Perfect(y))", "(exists x.(Product(x) & Perfect(x)))", "(-exists x.(Product(x) & Perfect(x)))", "-exists x.(Product(x) & Perfect(x)))", "\u2013 exists x.(Product(x) & Perfect(x))"]}
{"id": "folio_train_2248", "nl": "All dresses are clothes.", "fol": "all x.(IsDress(x) -> IsClothing(x))", "prediction": ["all x.(Rose(x) -> Clothing(x))", "all x.(Rose(x) -> Clothes(x))", "all x.(Dress(x) -> Clothes(x))", "all x.(Dress(x) -> Clothing(x))", "all x.(Clothing(x) -> Dress(x))", "all x.(Dresses(x) -> Clothes(x))", "all x.(Dresses(x) -> Clothing(x))", "all x.(Dessert(x) -> Clothes(x))", "all x.(Royal(x) -> Clothes(x))", "all x.(Dessert(x) -> Clothing(x))", "all x.(Royal(x) -> Clothing(x))", "all x.(Roise(x) -> Clothing(x))", "all x.(Road(x) -> Clothing(x))", "all x.(Roof(x) -> Clothing(x))", "all x.(Shore(x) -> Clothing(x))", "all x.(Garment(x) -> Clothing(x))"]}
{"id": "folio_train_2249", "nl": "All skirts are dresses. ", "fol": "all x.(IsSkirt(x) -> IsDress(x))", "prediction": ["all x.(Skirt(x) -> Dress(x))", "all x y.((Skirt(x) & Dress(y)) -> Dress(x))", "all x.(Skirt(x) -> Dress(x))", "all x.(Skirt(x) -> Dresses(x))", "all x y.((Skirt(x) & Dress(y)) -> Dress(x,y))", "(all x.(Skirt(x) -> Dress(x)))", "all x.exists y.(Skirt(x) & Dress(y) & DesignedFor(x,y))", "all x.(Shadow(x) -> Dress(x))", "all x.exists y.(Skirt(x) & Dress(y) & DesignedBy(x,y))", "all x.((Skirt(x) & Dress(x)) -> Dress(x))", "all x.(Shoulder(x) -> Dress(x))", "(all x.(Skirt(x) -> Dress(x))", "all x y.((Skirt(x) & Dress(y)) -> Is(x,y))", "all x y.((Skirt(x) & Dress(y)) -> SuitableFor(x,y))", "all x.(Sheet(x) -> Dress(x))", "all x.exists y.(Skirt(x) & Dress(y) & PrintedOn(x,y))"]}
{"id": "folio_train_2250", "nl": "If Nike is clothes, then Nike is perfect and a dress.", "fol": "(IsClothing(Nike) -> (IsPerfect(Nike) & IsDress(Nike)))", "prediction": ["all x.((Nike(x) & Clothing(x)) -> (Perfect(x) & Dress(x)))", "all x.((Nike(x) & Clothes(x)) -> (Perfect(x) & Dress(x)))", "all x.((Nike(x) & Wearable(x)) -> (Perfect(x) & Dress(x)))", "all x.(Clothing(x) -> (Perfect(x) & Dress(x)))", "all x.((Nike(x) & Clothes(x)) -> (Perfection(x) & Dress(x)))", "all x.((Nike(x) & Clothing(x)) -> (Perfection(x) & Dress(x)))", "all x.((Nike(x) & Dress(x)) -> (Perfect(x) & Dress(x)))", "all x.((Clothing(x) & Nike(x)) -> (Perfect(x) & Dress(x)))", "all x.((Nike(x) & IsClothes(x)) -> (Perfect(x) & Dress(x)))", "all x.(((Nike(x) & Clothes(x)) -> (Perfect(x) & Dress(x)))", "all x.((Nike(x) & Shirt(x)) -> (Perfect(x) & Dress(x)))", "all x.(Clothes(x) -> (Perfect(x) & Dress(x)))", "all x.(((Nike(x) & Clothing(x)) -> (Perfect(x) & Dress(x)))", "all x.((Nike(x) & Clothes(x)) -> (Perfect(x,Nike) & Dress(x)))", "all x.((Nike(x) -> (Clothes(x) & Perfect(x) & Dress(x)))", "all x.((Nike(x) & Clothes(x)) -> Perfect(x) & Dress(x))"]}
{"id": "folio_train_2251", "nl": "Nike is perfect.", "fol": "IsPerfect(Nike)", "prediction": ["all x.(Nike(x) -> Perfect(x))", "All x.(Nike(x) -> Perfect(x))", "all x.((Nike(x) & Perfect(x)) -> Perfect(x))", "all x y.((Nike(x) & Brand(y)) -> Perfect(x))", "all x y.((Nike(x) & Nike(y)) -> Perfect(x))", "all x y.((Nike(x) & Brand(y)) -> Perfect(x,y))", "exists x.(Nike(x) & Perfect(x))", "all x y.((Nike(x) & Nike(y)) -> Perfect(x,y))", "(Perfect(Nike) & Perfect(Nike))", "all x y.((Nike(x) & Product(y)) -> Perfect(x))", "all x y.((Nike(x) & Product(y)) -> Perfect(x,y))", "all x y.((Nike(x) & Company(y)) -> Perfect(x))", "(Perfect(Nike) -> Perfect(Nike))", "all x y.((Nike(x) & Company(y)) -> Perfect(x,y))", "all x.(Nike(x) -> Perfect(x))", "all x.((Nike(x) & Perfect(x)) -> Is(x,y))"]}
{"id": "folio_train_2252", "nl": "Nike is a skirt.", "fol": "IsSkirt(Nike)", "prediction": ["all x.(Nike(x) -> Skirt(x))", "all x y.((Nike(x) & Skirt(y)) -> Is(x,y))", "exists x.(Nike(x) & Skirt(x))", "all x y.((Nike(x) & Skirt(y)) -> Skirt(x))", "all x y.((Nike(x) & Skirt(y)) -> Skirt(x,y))", "all x.((Nike(x) & Skirt(x)) -> Skirt(x))", "All x.(Nike(x) -> Skirt(x))", "all x.((Nike(x) & Skirt(x)) -> Is(x,y))", "all x y.((Nike(x) & Skirt(y)) -> -Skirt(x))", "all x.((Nike(x) & Skirt(x)) -> -Skirt(x))", "all x.(Nike(x) -> Skirt(x))", "(Skirt(Nike) & -Skirt(Nike))", "all x y.((Nike(x) & Skirt(y)) -> Skirt(x))", "all x y.((Nike(x) & Skirt(y)) -> -Skirt(x,y))", "all x.((Nike(x) & Skirt(x)) -> Skirt(x))", "all x y.((Nike(x) & Skirt(y)) -> IsSkirt(x,y))"]}
{"id": "folio_train_2253", "nl": "Nike is not a skirt.", "fol": "-IsSkirt(Nike)", "prediction": ["all x.(Nike(x) -> -Skirt(x))", "all x.((Nike(x) & -Skirt(x)) -> -Skirt(x))", "exists x.(Nike(x) & -Skirt(x))", "-Skirt(Nike)", "All x.(Nike(x) -> -Skirt(x))", "all x.((Nike(x) & -Skirt(x)) -> -(Skirt(x) & -Skirt(x)))", "(-Skirt(Nike) & -Skirt(Nike))", "(Skirt(Nike) & -Skirt(Nike))", "all x.((Nike(x) & -Skirt(x)) -> -(Skirt(x) | Skirt(x))))", "all x.((Nike(x) & -Skirt(x)) -> -(Skirt(x) & -Skirt(x))))", "all x.((Nike(x) & -Skirt(x)) -> -IsSkirt(x))", "all x.((Nike(x) & -Skirt(x)) -> -(Skirt(x) | Skirt(x)))", "all x.(Nike(x) -> -Skirt(x))", "-(Nike(n) & Skirt(n))", "(-Skirt(Nike))", "all x.((Nike(x) & -Skirt(x)) -> -(Skirt(x) & Nike(x)))"]}
{"id": "folio_train_2254", "nl": "All pets are animals.", "fol": "all x.(IsPet(x) -> IsAnimal(x))", "prediction": ["all x.(Pet(x) -> Animal(x))", "all x y.((Pet(x) & Animal(y)) -> Animal(x))", "all x.(Pet(x) -> Animal(x))", "all x y.((Pet(x) & Animal(y)) -> Animal(x,y))", "all x.exists y.(Pet(x) & Animal(y))", "all x.((Pet(x) & Animal(x)) -> Animal(x))", "(all x.(Pet(x) -> Animal(x)))", "all x.exists y.(Pet(x) & Animal(y) & Pet(x,y))", "all x.exists y.(Pet(x) & Animal(y) & Pet(x) & Animal(y))", "all x.exists y.(Pet(x) & Animal(y) & Pet(x))", "all x.exists y.(Pet(x) & Animal(y) & Pet(x) & Animal(x))", "all x.exists y.(Pet(x) & Animal(y) & Animated(x))", "all x.exists y.(Pet(x) & Animal(y) & -Animal(x))", "(all x.(Pet(x) -> Animal(x))", "exists x.(Pet(x) & Animal(x))", "all x.exists y.(Pet(x) & Animal(y) & LocatedIn(x,y))"]}
{"id": "folio_train_2255", "nl": "Pets can be either a dog or a cat.", "fol": "all x.(((IsPet(x) -> IsDog(x)) & -IsCat(x)) | (-(IsPet(x) -> IsDog(x)) & IsCat(x)))", "prediction": ["all x.(Pet(x) -> (Dog(x) | Cat(x)))", "all x.(Pet(x) -> (Dog(x) | Cat(x)))", "exists x.(Pet(x) & (Dog(x) | Cat(x)))", "all x.(Pet(x) -> (CanBeDog(x) | CanBeCat(x)))", "all x.(Pet(x) -> ((Dog(x) | Cat(x))))", "all x y.((Pet(x) & Dog(y)) | Cat(y))", "all x y.((Pet(x) & Dog(y)) | Cat(y)) -> CanBe(x,y))", "exists x.(Pet(x) & Dog(x) & Cat(x))", "all x y.((Pet(x) & Dog(y)) | Cat(y)) -> (Dog(x) | Cat(x)))", "all x.(Pet(x) -> exists y.(Dog(y) | Cat(y)) & CanBe(x,y)))", "all x.(Pet(x) -> (Pet(x) | Pet(x)))", "exists x.(Pet(x) & CanBeDog(x) & CanBeCat(x))", "all x.((Pet(x) & (Dog(x) | Cat(x))) -> CanBe(x))", "all x.(Pet(x) -> (Pet(x) | Cat(x)))", "all x.((Pet(x) & (Dog(x) | Cat(x))) -> Pet(x))", "all x.(Pet(x) -> exists y.(Dog(y) | Cat(y))))"]}
{"id": "folio_train_2256", "nl": "If a person has a pet, they care for that pet. ", "fol": "all x y.(OwnsPet(x) -> CaresFor(x,y))", "prediction": ["all x.(HasPet(x) -> CaresForPet(x))", "all x.((Person(x) & HasPet(x)) -> CaresForPet(x))", "all x y.((Person(x) & Pet(y)) -> CaresFor(x,y))", "all x.(HasPet(x) -> CareForPet(x))", "all x.((Person(x) & HasPet(x)) -> CareForPet(x))", "all x y.((Person(x) & Pet(y) & Has(x,y)) -> CaresFor(x,y))", "all x.(HasPet(x) -> CaresFor(x,pet))", "all x.(HasPet(x) -> CarriesForPet(x))", "all x y.((Person(x) & Pet(y)) -> CarriesFor(x,y))", "all x.(HasPet(x) -> CaresFor(x,Pet))", "all x y.((Person(x) & Pet(y)) -> CareFor(x,y))", "all x.((Person(x) & HasPet(x)) -> CaresFor(x,Pet))", "all x.((Person(x) & HasPet(x)) -> CaresFor(x,pet))", "all x.((Person(x) & HasPet(x)) -> CarriesForPet(x))", "all x.((Person(x) & Pet(x)) -> CaresFor(x,pet))", "all x y.((Person(x) & Pet(y) & Has(x,y)) -> CareFor(x,y))"]}
{"id": "folio_train_2257", "nl": "Dogs and Cats can be naughty. ", "fol": "exists x.((IsCat(x) & IsNaughty(x)) | (IsDog(x) & IsNaughty(x)))", "prediction": ["all x.((Dog(x) | Cat(x)) -> Naughty(x))", "all x.((Dog(x) | Cat(x)) -> Naive(x))", "all x.((Dog(x) | Cat(x)) -> CanBeNaughty(x))", "all x y.((Dog(x) | Cat(y)) -> Naughty(x))", "all x.((Dog(x) | Cat(x)) -> Nayy(x))", "all x.(Naughty(x) -> (Dog(x) | Cat(x)))", "all x y.((Dog(x) | Cat(y)) -> (Naughty(x) | Naughty(y)))", "all x.((Dog(x) | Cat(x)) -> Neat(x))", "all x.((Dog(x) | Cat(x)) -> (Naughty(x) | Naughty(x)))", "all x.(Dog(x) | Cat(x)) -> Naughty(x))", "all x y.((Dog(x) & Cat(y)) -> (Naughty(x) | Naughty(y)))", "all x y.((Dog(x) | Cat(y)) -> CanBeNaughty(x))", "all x y.((Dog(x) | Cat(y)) -> (Naughty(x) & Naughty(y)))", "all x.((Dog(x) | Cat(x)) -> (Naughty(x) | Naive(x)))", "all x y.((Dog(x) | Cat(y)) -> Naive(x))", "all x y.((Dog(x) & Cat(y)) -> (Naughty(x) | Naive(y)))"]}
{"id": "folio_train_2258", "nl": "Pets who are naughty are not liked as much. ", "fol": "all x y.((IsPet(x) & IsNaughty(x)) -> -IsLiked(x,y))", "prediction": ["all x.((Pet(x) & Naughty(x)) -> -Likely(x))", "all x.((Pet(x) & Naughty(x)) -> -LikedAsMuch(x))", "all x.((Pet(x) & Naughty(x)) -> -LovedAsMuch(x))", "all x.((Pet(x) & Naughty(x)) -> -Loved(x))", "all x.((Pet(x) & Naughty(x)) -> -Favorite(x))", "all x.((Pet(x) & Naive(x)) -> -Likely(x))", "all x.((Pet(x) & Naughty(x)) -> NotLikely(x))", "all x.((Pet(x) & Naughty(x)) -> -LikedAsMuch(x))", "all x.((Pet(x) & Naughty(x)) -> -likedAsMuch(x))", "all x.((Pet(x) & Naughty(x)) -> -Liked(x))", "all x.((Pet(x) & Naughty(x)) -> NotLikedAsMuch(x))", "all x.((Pet(x) & Naughty(x)) -> -Mostliked(x))", "all x.((Pet(x) & Naive(x)) -> -LikedAsMuch(x))", "all x.((Pet(x) & Naive(x)) -> -LovedAsMuch(x))", "all x.((Pet(x) & Naughty(x)) -> -Lovely(x))", "all x.((Pet(x) & Naughty(x)) -> -FavoredAsMuch(x))"]}
{"id": "folio_train_2259", "nl": "Charlie has a naughty pet dog named Leo. ", "fol": "(OwnsPet(Charlie) & IsPet(Leo) & IsDog(Leo) & IsNaughty(Leo))", "prediction": ["all x.(Charlie(x) -> HasNaughtyPetDog(x,Leo))", "all x.((Charlie(x) & NaughtyPetDog(x)) -> Leo(x))", "all x y.((Charlie(x) & PetDog(y)) -> Naughty(x,y))", "(NaughtyPetDog(Charlie) & Leo(Charlie))", "all x.(Charlie(x) -> (NaughtyPetDog(x) & Leo(x)))", "all x.(Child(x) -> HasNaughtyPetDog(x,Leo))", "all x.((Charlie(x) & NaughtyPetDog(x,Leo)) -> Has(x,Charlie))", "all x.(Charlie(x) -> NaughtyPetDog(x,Leo))", "(NaughtyPetDog(Charlie) & NaughtyPetDog(Charlie))", "exists x.(Charlie(x) & NaughtyPetDog(x) & Leo(x))", "all x.(Charlie(x) -> NaughtyPetDog(x))", "(NaughtyPetDog(Charlie) & NamedLeo(Charlie))", "all x.((Charlie(x) & NaughtyPetDog(x) & Leo(x)) -> Has(x,Charlie))", "all x y.((Charlie(x) & NaughtyPetDog(y)) -> Leo(x))", "all x y.((Charlie(x) & Dog(y)) -> Naughty(x,y))", "all x.((Charlie(x) & NaughtyPetDog(x)) -> Dog(x,Leo))"]}
{"id": "folio_train_2260", "nl": "Leo is an animal.", "fol": "IsAnimal(Leo)", "prediction": ["all x.(Leo(x) -> Animal(x))", "All x.(Leo(x) -> Animal(x))", "(Animal(Leo) & Animal(Leo))", "Leo is Animal(leo)", "all x.(Lo(x) -> Animal(x))", "Leo (Animal(leo) & Animal(leo))", "Leo (Animal(leo) & LivesIn(leo,leo))", "all x.(Leo(x) -> Animal(x))", "Leo isAnimal(leo)", "(Animal(Leo) & LivesIn(Leo))", "(Animal(Leo) & -Animal(Leo))", "All x.(Leo(x) -> Animal(x))", "Leo (Animal(leo) & LivesIn(leo))", "Leo (Animal(Leo))", "Leo is an animal.", "Leo is Animal(Leo)"]}
{"id": "folio_train_2261", "nl": "Charlie does not like Leo and does not care for Leo.", "fol": "(-IsLiked(Charlie,Leo) & -CaresFor(Charlie,Leo))", "prediction": ["all x.(Charlie(x) -> (-LikesLeo(x) & -CaresForLeo(x)))", "all x.(Charlie(x) -> (-Likes(x,Leo) & -CaresFor(x,Leo)))", "all x y.((Charlie(x) & Leo(y)) -> (-Likes(x,y) & -CaresFor(x,y)))", "(-Likes(Charlie,Leo) & -CaresFor(Charlie,Leo))", "(-LikesLeo(Charlie) & -CaresForLeo(Charlie))", "all x.(Charlie(x) -> (-likesLeo(x) & -CaresForLeo(x)))", "all x.((Charlie(x) & -Likes(x,Leo)) -> -CaresFor(x,Leo))", "(all x.(Charlie(x) -> -Likes(x,Leo)) & all y.(Charlie(y) -> -CaresFor(y,Leo)))", "all x y.((Charlie(x) & Leo(y)) -> (-likes(x,y) & -CaresFor(x,y)))", "all x.(Charlie(x) -> (-LovesLeo(x) & -CaresForLeo(x)))", "(all x.(Charlie(x) -> -Likes(x,Leo)) & -CaresFor(x,Leo))", "all x.((Charlie(x) & -LikesLeo(x)) -> -CaresForLeo(x))", "(all x.(Charlie(x) -> -LikesLeo(x)) & -CaresForLeo(x))", "(-Likes(Charlie) & -CaresFor(Charlie))", "all x y.((Charlie(x) & Leo(y)) -> (-Loves(x,y) & -CaresFor(x,y)))", "(all x.(Charlie(x) -> -LikesLeo(x)) & all y.(Charlie(y) -> -CaresForLeo(y)))"]}
{"id": "folio_train_2262", "nl": "Dogs are always not naughty.", "fol": "all x.(IsDog(x) -> -IsNaughty(x))", "prediction": ["all x.(Dog(x) -> -Naughty(x))", "all x y.((Dog(x) & Naughty(y)) -> -Naughty(x))", "all x y.((Dog(x) & (Naughty(y) | Naughty(y))) -> -Naughty(x))", "all x.((Dog(x) & -Naughty(x)) -> -Naughty(x))", "all x y.((Dog(x) & (Naughty(y) | Naughty(y))) -> -Naughty(x,y))", "all x y.((Dog(x) & Naughty(y)) -> -Naughty(x,y))", "all x y.((Dog(x) & Dog(y)) -> -Naughty(x,y))", "all x y.((Dog(x) & Dog(y)) -> -Naughty(x))", "all x y.((Dog(x) & Dog(y)) -> -Naughty(y))", "all x y.((Dog(x) & (Naughty(y) | -Naughty(y))) -> -Naughty(x))", "all x y.((Dog(x) & (Naughty(y) | -Naughty(y))) -> -Naughty(x,y))", "(all x.(Dog(x) -> -Naughty(x)))", "all x y.((Dog(x) & (Naughty(y) | Naughty(y))) -> -Naughty(y))", "all x.(Dog(x) -> -Naughty(x))", "all x y.((Dog(x) & Breed(y)) -> -Naughty(x,y))", "all x.(Dog(x) -> (Naughty(x) & -Naughty(x)))"]}
{"id": "folio_train_2263", "nl": "Surprises are either fun or dreadful.", "fol": "all x.(SurpriseEvent(x) -> ((IsFun(x) & -IsDreadful(x)) | (-IsFun(x) & IsDreadful(x))))", "prediction": ["all x.(Surprise(x) -> (Fun(x) | Dreadful(x)))", "all x.(Surprise(x) -> (Fun(x) | Dreadful(x)))", "all x.(Surprises(x) -> (Fun(x) | Dreadful(x)))", "all x.(Surprise(x) -> ((Fun(x) | Dreadful(x))))", "all x.(Surprise(x) -> ((Fun(x) | Dreadful(x))))", "all x.((Surprise(x) & (Fun(x) | Dreadful(x))) -> Surprise(x))", "all x.(Surprises(x) -> ((Fun(x) | Dreadful(x))))", "all x.((Surprise(x) & (Fun(x) | Dreadful(x))) -> (Fun(x) | Dreadful(x)))", "all x y.((Surprise(x) & Fun(y)) | Dreadful(y)) -> Surprise(x))", "all x.((Surprise(x) & Fun(x)) | Dreadful(x))", "all x.(Surrender(x) -> (Fun(x) | Dreadful(x)))", "all x.(Surprise(x) -> (Fun(x) | Horror(x)))", "all x.((Surprise(x) & Fun(x)) | Dreadful(x)) -> Surprise(x))", "all x.(Surprise(x) -> (Fun(x) | Dreadful(x)))", "all x.(Surprise(x) -> (Fun(x) | dreadful(x)))", "all x.(Surprise(x) -> (Fun(x) | Dangerous(x)))"]}
{"id": "folio_train_2264", "nl": "All scares are surprises.", "fol": "all x.(IsScare(x) -> SurpriseEvent(x))", "prediction": ["all x.(Scare(x) -> Surprise(x))", "all x.(Scare(x) -> Surprising(x))", "all x y.((Scare(x) & Surprise(y)) -> Scare(x))", "all x.(Scare(x) -> Surprise(x))", "all x y.((Scare(x) & Scare(y)) -> Surprise(x))", "all x y.((Scare(x) & Surprising(y)) -> Scare(x))", "all x.(Scare(x) -> Surprise(x))", "all x.((Scare(x) & Surprise(x)) -> Scare(x))", "all x.(Scare(x) -> Surprises(x))", "all x y.((Scare(x) & Surprise(y)) -> Scare(x,y))", "all x.(Scary(x) -> Surprise(x))", "all x y.((Scare(x) & Scare(y)) -> Surprise(x,y))", "(all x.(Scare(x) -> Surprise(x)))", "all x y.((Scare(x) & Surprising(y)) -> Scare(x,y))", "all x.exists y.(Scare(x) & Scare(y) & Surprise(x))", "all x y.((Scare(x) & Scare(y)) -> Surprise(y))"]}
{"id": "folio_train_2265", "nl": "All scares are fun.", "fol": "all x.(IsScare(x) -> IsFun(x))", "prediction": ["all x.(Scare(x) -> Fun(x))", "all x.(Scare(x) -> Fun(x))", "all x y.((Scare(x) & Scare(y)) -> Fun(x))", "all x.(Scary(x) -> Fun(x))", "all x y.((Scare(x) & Scare(y)) -> Fun(x,y))", "all x.((Scare(x) & Fun(x)) -> Scare(x))", "all x.exists y.(Scare(x) & Scare(y) & Fun(x))", "all x.exists y.(Scare(x) & Scare(y) & Fun(x,y))", "(all x.(Scare(x) -> Fun(x)))", "all x.(Scare(x) -> Fun(x))", "all x y.((Scare(x) & Scare(y)) -> Fun(y))", "All x.(Scare(x) -> Fun(x))", "all x.(Screw(x) -> Fun(x))", "all x.exists y.(Scare(x) & Scare(y) & Fun(y))", "all x.(Scarf(x) -> Fun(x))", "-all x.(Scare(x) -> Fun(x))"]}
{"id": "folio_train_2266", "nl": "All books written by Cixin Liu have sold more than 1 million copies. ", "fol": "all x.((IsBook(x) & AuthoredBy(x,Cixinliu)) -> HasSoldMoreThan(x,Onemillion))", "prediction": ["all x.((Book(x) & WrittenByCixinLiu(x)) -> SoldMoreThanOneMillionCopies(x))", "all x.((Book(x) & WrittenByCixinLiu(x)) -> SoldMoreThanMillionCopies(x))", "all x.((Book(x) & WrittenByCixinLiu(x)) -> SoldMoreThan1MCopies(x))", "all x.((Book(x) & WrittenByCixinLiu(x)) -> SoldMoreThan(x,y))", "all x.((Book(x) & WrittenByCixinLiu(x)) -> SoldMoreThan(x,million))", "all x.((Book(x) & WrittenByCixinLiu(x)) -> SoldMoreThan(x,1 MillionCopies))", "all x.((Book(x) & WrittenByCixinLiu(x)) -> SoldMoreThan(x,MillionCopies))", "all x.((Book(x) & WrittenByCixinLiu(x)) -> SoldMoreThan(x,1000))", "all x y.((Book(x) & WrittenByCixinLiu(x)) -> SoldMoreThan(x,y))", "all x.((Book(x) & WrittenByCixinLiu(x)) -> SoldMoreThan(x,millionCopies))", "all x.((Book(x) & WrittenByCixinLiu(x)) -> SoldMoreThan(x,1))", "all x.((Book(x) & WrittenByCixinLiu(x)) -> SoldMoreThan(x,500,000))", "all x.((Book(x) & WrittenByCixinLiu(x)) -> SoldMoreThan(x,1000000))", "all x.((Book(x) & WrittenByCixinLiu(x)) -> SoldMoreThan1 MillionCopies(x))", "all x y.((Book(x) & WrittenByCixinLiu(x,y)) -> SoldMoreThan(x,y))", "all x.((Book(x) & WrittenByCixinLiu(x)) -> SoldMoreThan(x,number))"]}
{"id": "folio_train_2267", "nl": "Some books that have won the Hugo Award were written by Cixin Liu.", "fol": "exists x.(HasWonAward(x,Hugoaward) & IsBook(x) & AuthoredBy(x,Cixinliu))", "prediction": ["exists x.(Book(x) & WonHugoAward(x) & WrittenByCixinLiu(x))", "exists x.(Book(x) & WonHugoAward(x)) -> WrittenByCixinLiu(x))", "all x.((Book(x) & WonHugoAward(x)) -> WrittenByCixinLiu(x))", "exists x.(Book(x) & WonHugo(x) & WrittenByCixinLiu(x))", "exists x.(Book(x) & WonHugoAward(x)) -> WrittenByCixinLiu(x))", "exists x.(Book(x) & WonHugoAward(x) & WrittenBy(x,CixinLiu))", "exists x.(Book(x) & WonHugoAward(x) & WrittenByCixinLiu(x))", "exists x.(Book(x) & WonHugoAward(x)) & WrittenByCixinLiu(x))", "exists x.(Book(x) & WonHumoAward(x) & WrittenByCixinLiu(x))", "exists x.(Book(x) & WonHungoAward(x) & WrittenByCixinLiu(x))", "exists x.(Book(x) & WonHugeAward(x) & WrittenByCixinLiu(x))", "exists x.((Book(x) & WonHugoAward(x)) -> WrittenByCixinLiu(x))", "exists x.(Book(x) & HugoAward(x) & WrittenByCixinLiu(x))", "(exists x.(Book(x) & WonHugoAward(x)) & WrittenByCixinLiu(x))", "exists x.(Book(x) & WonHugoAward(x))", "exists x.(Book(x) & WonHugoAward(x)) & WrittenBy(x,CixinLiu)"]}
{"id": "folio_train_2268", "nl": "All books about the future are influenced by Isaac Asimov.", "fol": "all x.((IsBook(x) & IsAboutFuture(x)) -> IsInfluencedBy(x,Isaacasimov))", "prediction": ["all x.(Book(x) -> InfluencedByIsaacAsimov(x))", "all x.(Book(x) -> InfluencedByIsaakAsimov(x))", "all x y.((Book(x) & Future(y)) -> InfluencedByIsaacAsimov(x,y))", "all x.((Book(x) & AboutFuture(x)) -> InfluencedByIsaacAsimov(x))", "all x.(Book(x) -> InfluencedBy(x,IsaacAsimov))", "all x.((Book(x) & IsaacAsimov(x)) -> InfluencedBy(x,y))", "all x y.((Book(x) & Future(y)) -> InfluencedByIsaakAsimov(x,y))", "all x.((Book(x) & InfluencedByIsaacAsimov(x)) -> Future(x))", "all x y.((Book(x) & Future(y)) -> InfluencedByIsaacAsimov(x))", "all x.((Book(x) & AboutFuture(x)) -> InfluencedByIsaakAsimov(x))", "all x y.((Book(x) & Future(y)) -> InfluencedBy(x,y))", "all x.((Book(x) & Future(x)) -> InfluencedByIsaacAsimov(x))", "all x.((Book(x) & influencedByIsaacAsimov(x)) -> Future(x))", "all x.((Book(x) & InfluencedByIsaakAsimov(x)) -> Future(x))", "all x.(Book(x) -> InfluencedBy(x,IsaakAsimov))", "all x.((Book(x) & InvolvesIsaacAsimov(x)) -> InfluencedBy(x,Asimov))"]}
{"id": "folio_train_2269", "nl": "The book the Three Body Problem has sold more than 1 million copies.", "fol": "(IsBook(Threebodyproblem) & HasSoldMoreThan(Threebodyproblem,Onemillion))", "prediction": ["All x.((Book(x) & ThreeBodyProblem(x)) -> SoldMoreThanOneMillionCopies(x))", "all x.((Book(x) & ThreeBodyProblem(x)) -> SoldMoreThanOneMillionCopies(x))", "All x.((Book(x) & ThreeBodyProblem(x)) -> SoldMoreThan1MCopies(x))", "all x.((Book(x) & ThreeBodyProblem(x)) -> SoldMoreThan1MCopies(x))", "All x.((Book(x) & ThreeBodyProblem(x)) -> SoldMoreThanMillionCopies(x))", "all x.((Book(x) & ThreeBodyProblem(x)) -> SoldMoreThanMillionCopies(x))", "all x y.((Book(x) & ThreeBodyProblem(y)) -> SoldMoreThan(x,y))", "All x y.((Book(x) & ThreeBodyProblem(y)) -> SoldMoreThan(x,y))", "all x.((Book(x) & ThreeBodyProblem(x)) -> SoldMoreThan(x,y))", "All x.((Book(x) & ThreeBodyProblem(x)) -> SoldMoreThan(x,y))", "all x.((Book(x) & ThreeBodyProblem(x)) -> SoldMoreThan(x,million))", "All x.((Book(x) & ThreeBodyProblem(x)) -> SoldMoreThan(x,million))", "All x.((Book(x) & ThreeBodyProblem(x)) -> SoldMoreThan(x,1 MillionCopies))", "all x.((Book(x) & ThreeBodyProblem(x)) -> SoldMoreThan(x,1 MillionCopies))", "All x.((Book(x) & ThreeBodyProblem(x)) -> SoldMoreThan(x,1000))", "all x.((Book(x) & ThreeBodyProblem(x)) -> SoldMoreThan(x,1000))"]}
{"id": "folio_train_2270", "nl": "The Three Body Problem is about the future.", "fol": "IsAboutFuture(Threebodyproblem)", "prediction": ["All x.(ThreeBodyProblem(x) -> AboutFuture(x))", "all x.(ThreeBodyProblem(x) -> AboutFuture(x))", "All x.(TwoBodyProblem(x) -> AboutFuture(x))", "All x.(ThreeBodyProblem(x) -> Future(x))", "all x.(TwoBodyProblem(x) -> AboutFuture(x))", "All x.(TripleBodyProblem(x) -> AboutFuture(x))", "The ThreeBodyProblem(x) -> AboutFuture(x))", "All x.((ThreeBodyProblem(x) & Future(x)) -> About(x))", "All x.(ThreeBodyProblem(x) -> AboutFuture(x))", "All x.(ThreeBodyProblem(x) -> TheFuture(x))", "All x.(ThreeBodyProblem(x) -> AffectsFuture(x))", "all x.((ThreeBodyProblem(x) & Future(x)) -> About(x))", "all x.(ThreeBodyProblem(x) -> Future(x))", "All x.(ThreeBodyProblem(x) -> AboutTheFuture(x))", "The ThreeBodyProblemIsAboutFuture(x)", "(ThreeBodyProblem(x) -> AboutFuture(x))"]}
{"id": "folio_train_2271", "nl": "The Three Body Problem won the Hugo Award.", "fol": "HasWonAward(Threebodyproblem,Hugoaward)", "prediction": ["All x.((ThreeBodyProblem(x) & HugoAward(x)) -> Won(x))", "all x.((ThreeBodyProblem(x) & HugoAward(x)) -> Won(x))", "All x.((ThreeBodyProblem(x) & HugoAward(x)) -> Wins(x))", "All x.((ThreeBodyProblem(x) & HugoAward(x)) -> Won(x,y))", "All x.(ThreeBodyProblem(x) -> WonHugoAward(x))", "The ThreeBodyProblemWonHugoAward(x)", "all x.((ThreeBodyProblem(x) & HugoAward(x)) -> Won(x,y))", "all x.((ThreeBodyProblem(x) & HugoAward(x)) -> Wins(x))", "All x.((ThreeBodyProblem(x) & HugoAward(y)) -> Won(x,y))", "All x.((ThreeBodyProblem(x) & HugoAward(x)) -> Winner(x))", "All x.((ThreeBodyProblem(x) & HugoAward(x)) -> Wins(x,y))", "The ThreeBodyProblem(x) & WonHugoAward(x))", "All x.((ThreeBodyProblem(x) & WonHugoAward(x)) -> Wins(x))", "All x.((ThreeBodyProblem(x) & WonHugoAward(x)) -> Winner(x))", "all x.((ThreeBodyProblem(x) & HugoAward(y)) -> Won(x,y))", "All x.((ThreeBodyProblem(x) & Winner(x)) -> HugoAward(x))"]}
{"id": "folio_train_2272", "nl": "The Three Body Problem was influenced by Isaac Asimov.", "fol": "IsInfluencedBy(Threebodyproblem,Isaacasimov)", "prediction": ["All x.(ThreeBodyProblem(x) -> InfluencedByIsaacAsimov(x))", "All x y.((ThreeBodyProblem(x) & IsaacAsimov(y)) -> InfluencedBy(x,y))", "All x.(ThreeBodyProblem(x) -> InfluencedByIsaakAsimov(x))", "All x.(TwoBodyProblem(x) -> InfluencedByIsaacAsimov(x))", "The ThreeBodyProblem(x) influencedByIsaacAsimov(x))", "All x.((ThreeBodyProblem(x) & IsaacAsimov(x)) -> InfluencedBy(x,y))", "All x.(TripleBodyProblem(x) -> InfluencedByIsaacAsimov(x))", "The ThreeBodyProblem(x) -> InfluencedByIsaacAsimov(x))", "all x.(ThreeBodyProblem(x) -> InfluencedByIsaacAsimov(x))", "All x.((ThreeBodyProblem(x) & InfluencedByIsaacAsimov(x)) -> InfluencedByAsimov(x))", "All x.((ThreeBodyProblem(x) & InfluencedByIsaacAsimov(x)) -> InfluencedByIsaacAsimov(x))", "All x.(ThreeBodyProblem(x) -> InfluencedBy(x,IsaacAsimov))", "The ThreeBodyProblem(x) & InfluencedByIsaacAsimov(x))", "All x.((ThreeBodyProblem(x) & InfluencedByIsaacAsimov(x)) -> InfluencedBy(x,IsaacAsimov))", "The ThreeBodyProblem(x) influencedByIsaacAsimov(x)", "All x.((ThreeBodyProblem(x) & IsaacAsimov(x)) -> InfluencedBy(x))"]}
{"id": "folio_train_2273", "nl": "The Three Body Problem was written by Cixin Liu.", "fol": "AuthoredBy(Threebodyproblem,Cixinliu)", "prediction": ["The ThreeBodyProblem(x) -> WrittenByCixinLiu(x))", "The ThreeBodyProblem(x) & WrittenByCixinLiu(x))", "All x.(ThreeBodyProblem(x) -> WrittenByCixinLiu(x))", "All x.((ThreeBodyProblem(x) & WrittenByCixinLiu(x)) -> WrittenByCixinLiu(x))", "The ThreeBodyProblem(x) - WrittenByCixinLiu(x))", "All x.(TwoBodyProblem(x) -> WrittenByCixinLiu(x))", "All x.((ThreeBodyProblem(x) & WrittenBy(x,CixinLiu)) -> WrittenBy(x,CixinLiu))", "(TheThreeBodyProblem(x) & WrittenByCixinLiu(x))", "All x.((ThreeBodyProblem(x) & WrittenByCixinLiu(x)) -> WrittenBy(x,CixinLiu))", "All x.((ThreeBodyProblem(x) & WrittenByCixinLiu(x)) -> WrittenBy(x))", "The ThreeBodyProblem(x) \u2013 WrittenByCixinLiu(x))", "(TheThreeBodyProblem(CixinLiu) & WrittenBy(CixinLiu))", "All x.(ThreeBodyProblem(x) -> WrittenByCixinLiu(x))", "The ThreeBodyProblem(x) -> WrittenByCixinLiu(x))", "All x.((ThreeBodyProblem(x) & WrittenByCixinLiu(x)) -> WrittenBy.(CixinLiu(x)))", "All x.((ThreeBodyProblem(x) & WrittenByCixinLiu(x)) -> WrittenBy(x,y))"]}
{"id": "folio_train_2274", "nl": "Some students who major in computer science get up early. ", "fol": "exists x.(MajoringInComputerScience(x) & WakesUpEarly(x))", "prediction": ["exists x.(Student(x) & MajorsInComputerScience(x) & GetsUpEarly(x))", "exists x.(Student(x) & MajorInComputerScience(x) & GetsUpEarly(x))", "exists x.(Student(x) & MajorsInComputerScience(x))", "exists x.(Student(x) & MajorInComputerScience(x) & GetUpEarly(x))", "exists x.(Student(x) & MajorsInComputerScience(x) & UpEarly(x))", "exists x.(Student(x) & MajorInComputerScience(x))", "exists x.(Student(x) & MajorInComputerScience(x) & UpEarly(x))", "exists x.(Student(x) & MajorsInComputerScience(x) & GetUpEarly(x))", "exists x.(Student(x) & MajorsInComputerScience(x) & GettingUpEarly(x))", "exists x.(Student(x) & MajorsInComputerScientific(x) & GetsUpEarly(x))", "exists x.(Student(x) & MajoringInComputerScience(x) & GetsUpEarly(x))", "all x.((Student(x) & MajorsInComputerScience(x)) -> GetsUpEarly(x))", "exists x.(Student(x) & Major(x,ComputerScience) & GetsUpEarly(x))", "exists x.(Student(x) & MajorsInComputerScience(x)) -> GetsUpEarly(x))", "exists x.(Student(x) & MajorInComputerScientific(x) & GetsUpEarly(x))", "exists x.(Student(x) & MajorInComputerScience(x) & GettingUpEarly(x))"]}
{"id": "folio_train_2275", "nl": "If a student gets up early, then he/she will study in the morning. ", "fol": "all x.(WakesUpEarly(x) -> StudiesInTheMorning(x))", "prediction": ["all x.((Student(x) & GetsUpEarly(x)) -> StudiesInMorning(x))", "all x.((Student(x) & GetsUpEarly(x)) -> StudyInMorning(x))", "all x.((Student(x) & GetsUpEarly(x)) -> StudiesInTheMorning(x))", "all x.((Student(x) & GetsUpEarly(x)) -> StudyInTheMorning(x))", "all x.((Student(x) & GetsUpEarly(x)) -> (StudiesInMorning(x)))", "all x.((Student(x) & GetsUpEarly(x)) -> WillStudyInMorning(x))", "all x.((Student(x) & GetsUpEarly(x)) -> WillStudyInTheMorning(x))", "all x.(EarlyStudent(x) -> StudyInMorning(x))", "all x y.((Student(x) & GetsUpEarly(x)) -> StudiesInMorning(x,y))", "all x.((Student(x) & UpEarly(x)) -> StudyInMorning(x))", "all x.(EarlyStudent(x) -> StudiesInMorning(x))", "all x.((Student(x) & GetsUpEarly(x)) -> (StudiesInTheMorning(x)))", "all x.((Student(x) & UpEarly(x)) -> StudiesInMorning(x))", "all x.(GetsUpEarly(x) -> StudiesInMorning(x))", "all x.(EarlyStudent(x) -> (StudiesInMorning(x) & GetsUpEarly(x)))", "all x.(GetsUpEarly(x) -> StudyInMorning(x))"]}
{"id": "folio_train_2276", "nl": "All students studying in the morning are good at time management. ", "fol": "all x.(StudiesInTheMorning(x) -> HasGoodTimeManagementSkills(x))", "prediction": ["all x.((Student(x) & StudyingInMorning(x)) -> GoodAtTimeManagement(x))", "all x.((Student(x) & StudyingInTheMorning(x)) -> GoodAtTimeManagement(x))", "all x.((Student(x) & StudiesInMorning(x)) -> GoodAtTimeManagement(x))", "all x.((Student(x) & StudyingInMorning(x)) -> GoodTimeManagement(x))", "all x.(Student(x) -> GoodAtTimeManagement(x))", "all x.(Student(x) -> GoodTimeManagement(x))", "all x.((Student(x) & StudyingInTheMorning(x)) -> GoodTimeManagement(x))", "all x.((Student(x) & StudiesInMorning(x)) -> GoodTimeManagement(x))", "all x.((Student(x) & StudiesInTheMorning(x)) -> GoodAtTimeManagement(x))", "all x.(Student(x) & StudiesInMorning(x)) -> GoodAtTimeManagement(x))", "all x.(Student(x) & StudyingInMorning(x)) -> GoodAtTimeManagement(x))", "all x.(Student(x) -> (StudiesInMorning(x) & GoodAtTimeManagement(x)))", "all x.(Student(x) & StudyingInMorning(x) -> GoodAtTimeManagement(x))", "all x.((Student(x) & StudyingMorning(x)) -> GoodAtTimeManagement(x))", "all x y.((Student(x) & StudyingInMorning(x,y)) -> GoodAtTimeManagement(x))", "all x.((Student(x) & StudiesInTheMorning(x)) -> GoodTimeManagement(x))"]}
{"id": "folio_train_2277", "nl": "All students good at time management are popular among students. ", "fol": "all x.(HasGoodTimeManagementSkills(x) -> IsPopularAmongStudents(x))", "prediction": ["all x.((Student(x) & GoodAtTimeManagement(x)) -> PopularAmongStudents(x))", "all x.((Student(x) & GoodTimeManagement(x)) -> PopularAmongStudents(x))", "all x.(GoodAtTimeManagement(x) -> PopularAmongStudents(x))", "all x.(GoodTimeManagementStudent(x) -> PopularAmongStudents(x))", "all x.(GoodAtTimeManagementStudent(x) -> PopularAmongStudents(x))", "all x.((Student(x) & GoodAtTimeManagement(x)) -> PopularWithStudents(x))", "all x.(GoodTimeManagement(x) -> PopularAmongStudents(x))", "all x.(Student(x) & GoodAtTimeManagement(x)) -> PopularAmongStudents(x))", "all x.((Student(x) & GoodThanTimeManagement(x)) -> PopularAmongStudents(x))", "all x y.((Student(x) & Student(y) & GoodAtTimeManagement(x,y)) -> PopularAmongStudents(x,y))", "all x y.((Student(x) & Student(y) & GoodAtTimeManagement(x)) -> PopularAmongStudents(x,y))", "all x y.((Student(x) & GoodAtTimeManagement(x)) -> PopularAmongStudents(y))", "all x.((Student(x) & GoodTimingManagement(x)) -> PopularAmongStudents(x))", "all x.((Student(x) & GoodAtTimeManagement(x)) -> PopularUnderStudents(x))", "all x.((Student(x) & GoodAtTimeManagement(x)) -> Popular(x))", "all x y.((Student(x) & Student(y) & GoodAtTimeManagement(x,y)) -> PopularAmongStudents(x))"]}
{"id": "folio_train_2278", "nl": "James is not popular among students. ", "fol": "-IsPopularAmongStudents(James)", "prediction": ["all x.(James(x) -> -PopularAmongStudents(x))", "all x.((James(x) & -PopularAmongStudents(x)) -> -PopularAmongStudents(x))", "all x y.((James(x) & Student(y)) -> -Popular(x,y))", "-PopularAmongStudents(James)", "all x.((James(x) & Student(y)) -> -Popular(x,y))", "all x.((James(x) & Student(x)) -> -Popular(x))", "All x.(James(x) -> -PopularAmongStudents(x))", "all x.((James(x) & Students(x)) -> -Popular(x))", "all x.((James(x) & -PopularAmongStudents(x)) -> -Popular(x))", "all x.((James(x) & Students(y)) -> -Popular(x,y))", "(-PopularAmongStudents(James))", "(-PopularAmongStudents(James)", "all x.((James(x) & -PopularAmongStudents(x)) -> -PopularWithStudents(x))", "all x.((James(x) & -Popular(x)) -> -PopularAmongStudents(x))", "-PopularAmongStudents(James,James)", "(-PopularAmongStudents(James,James))"]}
{"id": "folio_train_2279", "nl": "James majors in computer science.", "fol": "MajorsInComputerScience(James)", "prediction": ["all x.(James(x) -> MajorsInComputerScience(x))", "all x y.((James(x) & ComputerScience(y)) -> MajorsIn(x,y))", "all x.((James(x) & MajorsInComputerScience(x)) -> MajorsInComputerScience(x))", "all x.((James(x) & ComputerScience(x)) -> MajorsIn(x,y))", "all x.(James(x) -> MajorInComputerScience(x))", "all x.(JamesMajorsInComputerScience(x) -> MajorsInComputerScience(x))", "all x y.((James(x) & ComputerScientific(y)) -> MajorsIn(x,y))", "all x y.((James(x) & ComputerScientist(y)) -> MajorsIn(x,y))", "all x.(Jimmy(x) -> MajorsInComputerScience(x))", "(MajorsInComputerScience(James) & MajorsInComputerScience(James))", "all x.((James(x) & ComputerScience(y)) -> MajorsIn(x,y))", "(MajorsInComputerScience(James) -> MajorsInComputerScience(James))", "all x y.((James(x) & ComputerScience(y)) -> Majors(x,y))", "all x y.((James(x) & ComputerScience(y)) -> Major(x,y))", "All x.(James(x) -> MajorsInComputerScience(x))", "all x.((James(x) & MajorsInComputerScience(x)) -> MajorsIn(x,ComputerScience))"]}
{"id": "folio_train_2280", "nl": "James majors in computer science and gets up early.", "fol": "(MajorsInComputerScience(James) & WakesUpEarly(James))", "prediction": ["all x.(James(x) -> (MajorsInComputerScience(x) & GetsUpEarly(x)))", "all x.((James(x) & MajorsInComputerScience(x)) -> GetsUpEarly(x))", "(MajorsInComputerScience(James) & GetsUpEarly(James))", "all x y.((James(x) & ComputerScience(y)) -> (MajorsIn(x,y) & GetsUpEarly(x)))", "all x.(James(x) -> (majorsInComputerScience(x) & GetsUpEarly(x)))", "all x.(Jimmy(x) -> (MajorsInComputerScience(x) & GetsUpEarly(x)))", "all x.(James(x) -> (MaintainsInComputerScience(x) & GetsUpEarly(x)))", "all x.(James(x) -> (MajorInComputerScience(x) & GetsUpEarly(x)))", "all x.((James(x) & MajorsInComputerScience(x) & GetsUpEarly(x)) -> MajorsInComputerScience(x))", "all x.(James(x) -> (MajorsInComputerScience(x) & GetsUpEarly(x)))", "all x.((James(x) & ComputerScience(x)) -> (MajorsIn(x,ComputerScience) & GetsUpEarly(x)))", "all x y.((James(x) & ComputerScience(y)) -> (Majors(x,y) & GetsUpEarly(x)))", "all x.(James(x) -> (MaintainsComputerScience(x) & GetsUpEarly(x)))", "all x.((James(x) & MajorsInComputerScience(x) & GetsUpEarly(x)) -> JamesMajorsInComputerScience(x))", "(MajorsInComputerScience(Jim) & GetsUpEarly(Jim))", "all x.(James(x) -> (MajorsInComputerScience(x) & GetsEarly(x)))"]}
{"id": "folio_train_2281", "nl": "If James gets up early, then he majors in computer science.", "fol": "(WakesUpEarly(James) -> MajoringInComputerScience(James))", "prediction": ["all x.((James(x) & GetsUpEarly(x)) -> MajorsInComputerScience(x))", "all x.((James(x) & GetsUpEarly(x)) -> MajorInComputerScience(x))", "all x.((JamesGivesUpEarly(x) & MajorsInComputerScience(x)) -> MajorsInComputerScience(x))", "all x.((James(x) & UpEarly(x)) -> MajorsInComputerScience(x))", "all x.((Jimmy(x) & GetsUpEarly(x)) -> MajorsInComputerScience(x))", "all x.((James(x) & UpEarly(x)) -> MajorInComputerScience(x))", "all x.((JamesGrowsUpEarly(x) & MajorsInComputerScience(x)) -> MajorsInComputerScience(x))", "all x.((James(x) & GetsUpEarly(x)) -> MajoringInComputerScience(x))", "all x.(((James(x) & GetsUpEarly(x)) -> MajorsInComputerScience(x))", "all x.((Jimmy(x) & GetsUpEarly(x)) -> MajorInComputerScience(x))", "all x.((MajorInComputerScience(x) & JamesGetsUpEarly(x)) -> MajorInComputerScience(x))", "all x.((MajorInComputerScience(x) & JamesGivesUpEarly(x)) -> MajorsInComputerScience(x))", "all x.((Jim(x) & GetsUpEarly(x)) -> MajorsInComputerScience(x))", "all x y.((James(x) & GetsUpEarly(x)) -> MajorsInComputerScience(x))", "all x.((ComputerScience(x) & JamesGetsUpEarly(x)) -> MajorsIn(x,ComputerScience))", "all x.((James(x) & GetsUpEarly(x)) -> MajorsInComputerScientific(x))"]}
{"id": "folio_train_2282", "nl": "There is no dog on the roof.", "fol": "-exists x.(IsDog(x) & IsOnRoof(x))", "prediction": ["-DogOnRoof(x)", "exists x.(Dog(x) & -OnRoof(x))", "all x.(Dog(x) -> -OnRoof(x))", "exists x.(Dog(x) & -exists y.(Roof(y) & On(x,y))))", "-exists x.(Dog(x) & Roof(x))", "exists x.(Dog(x) & -exists y.(Roof(y) & On(x,y)))", "exists x.(Dog(x) & Roof(x) & -exists y.(Dog(y) & On(x,y))))", "-exists x.(Dog(x) & OnRoof(x))", "Exists x.(Dog(x) & -OnRoof(x))", "exists x.(Dog(x) & Roof(x) & -On(x,y))", "exists x.(Dog(x) & OnRoof(x))", "exists x.(Dog(x) & Roof(x) & -exists y.(Dog(y) & On(y,x))))", "exists x.(Dog(x) & Roof(x) & -exists y.(Roof(y) & On(x,y))))", "-DogOnRoof(x) & -DogOnRoof(x))", "exists x.(Dog(x) & -exists y.Roof(y) & On(x,y)))", "exists x.(Dog(x) & -exists y.(Roof(y) & On(y,x))))"]}
{"id": "folio_train_2283", "nl": "If there is a dog on the roof something went wrong.", "fol": "all x.exists y.((IsDog(x) & IsOnRoof(x)) -> SomethingWentWrong(y))", "prediction": ["all x.((Dog(x) & OnRoof(x)) -> GoesSince(x))", "all x.((Dog(x) & OnRoof(x)) -> GoesSorry(x))", "all x.((Dog(x) & OnRoof(x)) -> SomethingGoesSorry(x))", "all x.((Dog(x) & OnRoof(x)) -> GoesStorm(x))", "all x.((Dog(x) & OnRoof(x)) -> GoesSincert(x))", "all x.((Dog(x) & OnRoof(x)) -> GoesSincer(x))", "all x.((Dog(x) & OnRoof(x)) -> SomethingGoesSince(x))", "all x.((Dog(x) & OnRoof(x)) -> SomethingGoesSincer(x))", "all x.((Dog(x) & OnRoof(x)) -> SomethingGoesStorm(x))", "all x y.((Dog(x) & Roof(y)) -> GoesSince(x,y))", "all x y.((Dog(x) & Roof(y)) -> GoesSorry(x,y))", "all x.(Dog(x) -> OnRoof(x))", "all x.(DogOnRoof(x) -> GoesSince(x))", "all x.(DogOnRoof(x) -> GoesSorry(x))", "all x.((Dog(x) & Rooftop(x)) -> GoesSince(x))", "all x.((Dog(x) & Roof(x)) -> GoesSince(x))"]}
{"id": "folio_train_2284", "nl": "Something went wrong.", "fol": "exists x.SomethingWentWrong(x)", "prediction": ["all x.(GoesSince(x) -> SomethingGoesStorm(x))", "All x.(GoesSince(x) -> SomethingGoesStorm(x))", "all x.(GoesSince(x) -> SomethingGoesSince(x))", "all x.(GoesSick(x) -> SomethingGoesSince(x))", "All x.(GoesSince(x) -> SomethingGoesSince(x))", "all x.(GoesSince(x) -> SomethingGoesStill(x))", "All x.(GoesSick(x) -> SomethingGoesSince(x))", "All x.(GoesSince(x) -> SomethingGoesStill(x))", "all x.(GoesSick(x) -> SomethingGoesStorm(x))", "all x.(GoesSince(x) -> SomethingGoesSorry(x))", "All x.(GoesSick(x) -> SomethingGoesStorm(x))", "All x.(GoesSince(x) -> SomethingGoesSorry(x))", "all x.(GoesSince(x) -> SomethingGoesSick(x))", "All x.(GoesSince(x) -> SomethingGoesSick(x))", "all x.(GoesSick(x) -> SomethingGoesSick(x))", "All x.(GoesSick(x) -> SomethingGoesSick(x))"]}
{"id": "folio_train_2285", "nl": "Elephantopus is a genus of perennial plants in the daisy family.", "fol": "all x.((GenusElephantopus(x) -> IsGenusOf(x,Perennialplants)) & BelongsToFamily(x,Daisyfamily))", "prediction": ["all x.(Elephantopus(x) -> (GenusOfPerennialPlants(x) & InDaisyFamily(x)))", "all x.(Elephantopus(x) -> (GenusOfPerennialPlants(x) & DaisyFamily(x)))", "all x.(Elephantopus(x) -> (GenusOfPerennialPlants(x) & InDaisyFamily(x)))", "all x.(Elephantopus(x) -> (PerennialPlant(x) & DaisyFamily(x)))", "all x.(Elephantopus(x) -> (PerennialPlant(x) & InDaisyFamily(x)))", "all x.(Elephantopus(x) -> (GenusOfPerennialPlants(x) & DaisyFamily(x)))", "all x.(Elephantopus(x) -> (PerennialPlant(x) & DaisyFamily(x)))", "all x y.((Elephantopus(x) & DaisyFamily(y)) -> PerennialPlant(x,y))", "all x y.((Elephantopus(x) & PerennialPlant(y)) -> InDaisyFamily(x,y))", "all x y z.((Elephantopus(x) & PerennialPlant(y) & DaisyFamily(z)) -> (Genus(x,y) & InFamily(x,z)))", "all x.(Elephantopus(x) -> (PerennialPlant(x) & InDaisyFamily(x)))", "all x.(Elephantopus(x) -> (GenusOfPerennialPlants(x) & inDaisyFamily(x)))", "all x y.((Elephantopus(x) & PerennialPlant(y)) -> InDaisyFamily(x))", "all x y z.((Elephantopus(x) & PerennialPlant(y) & DaisyFamily(z)) -> (GenusOf(x,y) & InFamily(x,z)))", "all x.(Elephantopus(x) -> (GenusOfPerennialPlantsInDaisyFamily(x)))", "all x y.((Elephantopus(x) & DaisyFamily(y)) -> PerennialPlant(x,y))"]}
{"id": "folio_train_2286", "nl": "Elephantopus is widespread over much of Africa, southern Asia, Australia, and the Americas.", "fol": "all x.((GenusElephantopus(x) -> WidespreadInRegion(x,Africa)) & WidespreadInRegion(x,Southernasia) & WidespreadInRegion(x,Australia) & WidespreadInRegion(x,Americas))", "prediction": ["all x.(Elephantopus(x) -> (WidespreadOverAfrica(x) & WidespreadOverSouthernAsia(x) & WidespreadOverAustralia(x) & WidespreadOverAmericas(x)))", "all x.(Elephantopus(x) -> (WidespreadOverAfrica(x) & WidespreadOverSouthAsia(x) & WidespreadOverAustralia(x) & WidespreadOverAmericas(x)))", "all x.(Elephantopus(x) -> (WidespreadOverAfrica(x) & WidespreadOverSouthAsia(x) & WidespreadOverAustralia(x) & WidespreadOverAmericas(x)))", "all x.(Elephantopus(x) -> (WidespreadOverAfrica(x) & WidespreadOverSouthernAsia(x) & WidespreadOverAustralia(x) & WidespreadOverAmericas(x)))", "all x.(Elephantopus(x) -> (WidespreadOverAfrica(x) & SpreadsOverSouthAsia(x) & SpreadsOverAustralia(x) & SpreadsOverAmericas(x)))", "all x.(Elephantopus(x) -> (WidespreadOver(x,Africa) & SouthernAsia(x) & Australia(x) & Americas(x)))", "all x.(Elephantopus(x) -> (WidespreadOverMostOfAfrica(x) & SouthernAsia(x) & Australia(x) & Americas(x)))", "all x.(Elephantopus(x) -> (WidespreadOverAfrica(x) | WidespreadOverSouthAsia(x) | WidespreadOverAustralia(x) | WidespreadOverAmericas(x)))", "all x.(Elephantopus(x) -> (WidespreadOverAfrica(x) & SouthernAsia(x) & Australia(x) & Americas(x)))", "all x.(Elephantopus(x) -> (WidespreadOverAfrica(x) & SpreadsOverSouthAsia(x) & SpreadsOverAustralia(x) & SpreadsOverAmericas(x)))", "all x.(Elephantopus(x) -> (WidespreadOver(x,Africa) & WidespreadOver(x,SouthAsia) & WidespreadOver(x,Australia) & WidespreadOver(x,Americas)))", "all x.(Elephantopus(x) -> (WidespreadOverAfrica(x) & SouthernAsia(x) & Australia(x) & Americas(x)))", "all x.(Elephantopus(x) -> (WidespreadOver(x,Africa) & SpreadsOver(x,SouthAsia) & SpreadsOver(x,Australia) & SpreadsOver(x,Americas)))", "all x.(Elephantopus(x) -> (WidespreadOver(x,Africa) & SouthAsia(x) & Australia(x) & Americas(x)))", "all x.(Elephantopus(x) -> (WidespreadOverAfrica(x) & SouthAsia(x) & Australia(x) & Americas(x)))", "all x.(Elephantopus(x) -> (WidespreadOverAfrica(x) & WidespreadOverSouthAsia(x) & WidespreadOverAustralia(x) & WidespreadOverAfrica(x)))"]}
{"id": "folio_train_2287", "nl": "Several species of Elephantopus are native to the southeastern United States.", "fol": "exists x.(GenusElephantopus(x) & IsNativeToRegion(x,Southeasternunitedstates))", "prediction": ["exists x.(Elephantopus(x) & NativeToSoutheasternUnitedStates(x))", "exists x.(Elephantopus(x) & NativeToSoutheastern(x))", "all x.(Elephantopus(x) -> NativeToSoutheasternUnitedStates(x))", "exists x.(ElephantopusSpecies(x) & NativeToSoutheasternUnitedStates(x))", "exists x.(Elephantopus(x) & NativeToSoutheasternStates(x))", "exists x y.(Species(x) & Elephantopus(y) & NativeToSoutheasternUnitedStates(x,y))", "exists x.(Elephantopus(x) & NativeToSoutheasternUSA(x))", "exists x.(Elephantopus(x) & NativeTo(x,southeasternUnitedStates))", "exists x.(Elephantopus(x) & NativeTo(x,SoutheasternUnitedStates))", "exists x.(Elephantopus(x) & NativeToSoutheasternUS(x))", "(exists x.(Elephantopus(x) & NativeToSoutheasternUnitedStates(x)))", "exists x.(Elephantopus(x) & NativeToSoutheastUnitedStates(x))", "exists x y.(Species(x,y) & Elephantopus(y) & NativeToSoutheasternUnitedStates(x))", "exists x y.(Species(x,y) & Elephantopus(y) & NativeToSoutheasternUnitedStates(x,y))", "exists x y.(Species(x) & Elephantopus(y) & NativeToSoutheasternUnitedStates(x))", "exists x.(Elephantopus(x) & NativeToSoutheasternU.S.S.(Elephantopus(x)))"]}
{"id": "folio_train_2288", "nl": "Elephantopus scaber is a traditional medicine.", "fol": "all x.(GenusElephantopusScaber(x) -> UsedAsTraditionalMedicine(x))", "prediction": ["all x.(ElephantopusScaber(x) -> TraditionalMedicine(x))", "(TraditionalMedicine(ElephantopusScaber)", "all x.((ElephantopusScaber(x) & TraditionalMedicine(x)) -> TraditionalMedicine(x))", "all x.((ElephantopusScaber(x) & TraditionalMedicine(x)) -> Scaber(x))", "all x.((ElephantopusScaber(x) & TraditionalMedicine(x)) -> Scaber(x))", "All x.(ElephantopusScaber(x) -> TraditionalMedicine(x))", "all x.((ElephantopusScaber(x) & TraditionalMedicine(x)) -> Scarlet(x))", "all x.(ElephantopusScaber(x) -> TraditionalMedicine(x))", "(TraditionalMedicine(ElephantopusScaber) & TraditionalMedicine(ElephantopusScaber))", "all x.(Elephantopusscaber(x) -> TraditionalMedicine(x))", "all x.((ElephantopusScaber(x)) -> TraditionalMedicine(x))", "all x y.((ElephantopusScaber(x) & TraditionalMedicine(y)) -> Scaber(x))", "all x.((ElephantopusScaber(x) & TraditionalMedicine(x)) -> Scarlett(x))", "all x y.((ElephantopusScaber(x) & TraditionalMedicine(y)) -> Scaber(x))", "all x.((Elephantopus(x) & Scaber(x)) -> TraditionalMedicine(x))", "all x.((ElephantopusScaber(x) & TraditionalMedicine(x)) -> HasScaber(x))"]}
{"id": "folio_train_2289", "nl": "Elephantopus is widespread over much of Australia and Southern Asia.", "fol": "all x.((GenusElephantopus(x) -> WidespreadInRegion(x,Australia)) & WidespreadInRegion(x,Southernasia))", "prediction": ["all x.(Elephantopus(x) -> (WidespreadOver(x,Australia) & WidespreadOver(x,SouthernAsia)))", "all x.(Elephantopus(x) -> (WidespreadOverAustralia(x) & WidespreadOverSouthernAsia(x)))", "all x.(Elephantopus(x) -> (WidespreadOver(x,Australia) & WidespreadOver(x,SouthAsia)))", "all x.(Elephantopus(x) -> (WidespreadOverAustralia(x) & WidespreadOverSouthAsia(x)))", "all x.(Elephantopus(x) -> (WidespreadOver(x,Australia) & WidespreadOver(x,SouthernAsia)))", "all x.(Elephantopus(x) -> (WidespreadOverMostOfAustralia(x) & WidespreadOverMostOfSouthernAsia(x)))", "all x.(Elephantopus(x) -> (WidespreadOver(x,Australia) & WidespreadOver(x,SouthernAsia)))", "all x.(Elephantopus(x) -> (WidespreadOver(x,Australia) & WidespreadOver(x,SouthernAsia)))", "All x.(Elephantopus(x) -> (WidespreadOver(x,Australia) & WidespreadOver(x,SouthernAsia)))", "all x.(Elephantopus(x) -> (WidespreadOver(x,Australia) & WidespreadOver(x,SouthAsia)))", "all x.(Elephantopus(x) -> (WidespreadOver(x,Australia) & SpreadsOver(x,SouthernAsia)))", "all x.(Elephantopus(x) -> (WidespreadOver(x,Australie) & WidespreadOver(x,SouthernAsia)))", "all x.(Elephantopus(x) -> (WidespreadOverMuchOfAustralia(x) & WidespreadOverSouthAsia(x)))", "all x.(Elephantopus(x) -> (WidespreadOverAustralia(x) & WidespreadOverSouthernAsia(x)))", "all x y.((Elephantopus(x) & Australia(y) & SouthernAsia(z)) -> Widespread(x,y,z))", "all x.(Elephantopus(x) -> (WidespreadOverMostOfAustraliaAndSouthernAsia(x)))"]}
{"id": "folio_train_2290", "nl": "No Elephantopus is native to the southeastern United States.", "fol": "-exists x.(GenusElephantopus(x) & IsNativeToRegion(x,Southeasternunitedstates))", "prediction": ["-exists x.(Elephantopus(x) & NativeToSoutheasternUnitedStates(x))", "-exists x.(Elephantopus(x) & NativeToSoutheastern(x))", "-exists x.(Elephantopus(x) & NativeTo(x,SoutheasternUnitedStates))", "-exists x.(Elephantopus(x) & NativeToSoutheasternStates(x))", "-exists x.(Elephantopus(x) & NativeTo(x,southeasternUnitedStates))", "-exists x.(Elephantopus(x) & NativeToSoutheasternUS(x))", "-exists x.(Elephantopus(x) & NativeToSoutheast(x))", "all x.(Elephantopus(x) -> NativeToSoutheasternUnitedStates(x))", "-exists x.(Elephantopus(x) & NativeToSoutheasternU.S.S.(Elephant(x)))", "-exists x.(Elephantopus(x) & NativeToSoutheasternUSA(x))", "-exists x.(Elephantopus(x) & NativeToSoutheastUnitedStates(x))", "(-exists x.(Elephantopus(x) & NativeToSoutheasternUnitedStates(x)))", "-exists x.(Elephantopus(x) & NativeToSoutheasternU.S.S.(Elephant(x) & NativeToSoutheasternU.S.(Elephant(x)))", "all x.(Elephantopus(x) -> -NativeToSoutheasternUnitedStates(x))", "-exists x.(Elephantopus(x) & NativeToSoutheasternU.S.S.(Elephantopus) & NativeToSoutheasternU.S.(Elephantopus)))", "-exists x.(Elephantopus(x) & NativeToSoutheasternU.S.S.(Elephant(x) & NativeToSoutheasternU.S.(Elephant(x))))"]}
{"id": "folio_train_2291", "nl": "Elephantopus is a traditional medicine.", "fol": "all x.(GenusElephantopus(x) -> UsedAsTraditionalMedicine(x))", "prediction": ["all x.(Elephantopus(x) -> TraditionalMedicine(x))", "all x.(Elephantopus(x) -> TraditionalMedicine(x))", "all x.((Elephantopus(x) & TraditionalMedicine(x)) -> TraditionalMedicine(x))", "all x y.((Elephantopus(x) & TraditionalMedicine(y)) -> TraditionalMedicine(x))", "All x.(Elephantopus(x) -> TraditionalMedicine(x))", "all x y.((Elephantopus(x) & TraditionalMedicine(y)) -> TraditionalMedicine(x,y))", "(TraditionalMedicine(Elephantopus) & TraditionalMedicine(Elephantopus))", "(TraditionalMedicine(Elephantopus) -> TraditionalMedicine(Elephantopus))", "(TraditionalMedicine(Elephantopus)", "all x.(Elephantopus(x) -> TraditionalMedical(x))", "(TraditionalMedicine(Elephantopus) -> TraditionalMedicine(Elephantopus))", "all x.(ElephantOpus(x) -> TraditionalMedicine(x))", "all x y.((Elephantopus(x) & TraditionalMedicine(y)) -> TraditionalMeditation(x,y))", "all x.(Elephantopus(x) -> TraditionalMedium(x))", "all x y.((Elephantopus(x) & TraditionalMedicine(y)) -> TraditionalMedium(x))", "all x y.((Elephantopus(x) & TraditionalMedicine(y)) -> TraditionalMedical(x))"]}
{"id": "folio_train_2292", "nl": "All Yale dormitories are located on York Street. ", "fol": "all x.(IsYaleDormitory(x) -> LocatedOnYorkStreet(x))", "prediction": ["all x.(YaleDomestic(x) -> LocatedOnYorkStreet(x))", "all x.(YaleDomhouse(x) -> LocatedOnYorkStreet(x))", "all x y.((Domhouse(x) & Yale(y)) -> LocatedOnYorkStreet(x,y))", "all x.(YaleDomestic(x) -> (LocatedOnYorkStreet(x) | LocatedOnYorkStreet(x)))", "all x.(Domestic(x) -> LocatedOnYorkStreet(x))", "all x.(YaleDomestic(x) -> (LocatedOnYorkStreet(x) & LocatedOnYorkStreet(x)))", "all x.(Domestic(x) -> (LocatedOnYorkStreet(x) | LocatedOnYorkStreet(x)))", "all x.(YaleDominion(x) -> LocatedOnYorkStreet(x))", "all x y.((Domestic(x) & Yale(y)) -> LocatedOnYorkStreet(x,y))", "all x.(Domestic(x) -> (LocatedOnYorkStreet(x) & LocatedOnYorkStreet(x)))", "all x.(YaleDomhouse(x) -> (LocatedOnYorkStreet(x) | LocatedOnYorkStreet(x)))", "all x.(YaleDomhouse(x) -> (LocatedOnYorkStreet(x) & LocatedOnYorkStreet(x)))", "all x.(Domhouse(x) -> LocatedOnYorkStreet(x))", "all x.(Domhouse(x) -> (LocatedOnYorkStreet(x) | LocatedOnYorkStreet(x)))", "all x.((Domestic(x) & Yale(x)) -> LocatedOnYorkStreet(x))", "all x.(YaleDomestic(x) -> LocatedOnYorkStreet(x))"]}
{"id": "folio_train_2293", "nl": "All buildings managed by Yale Housing are dormitories. ", "fol": "all x.(IsManagedByYaleHousing(x) -> IsYaleDormitory(x))", "prediction": ["all x.((Building(x) & ManagedByYaleHousing(x)) -> Dormitory(x))", "all x.((Building(x) & ManagedByYaleHousing(x)) -> Dorma(x))", "all x.((Building(x) & ManagedByY YaleHousing(x)) -> Dormitory(x))", "all x.((Building(x) & ManagedByYaleHousing(x)) -> Dorms(x))", "all x.((Building(x) & ManagedByYamaHousing(x)) -> Dormitory(x))", "all x.((Building(x) & ManagedByYaleHousekeeping(x)) -> Dormitory(x))", "all x.((Building(x) & ManagedByYaleHousing(x)) -> Dormancy(x))", "all x y.((Building(x) & YaleHousing(y)) -> Dormitory(x))", "all x.((Building(x) & ManagedByYaleHousing(x)) -> Dormium(x))", "all x.((Building(x) & ManagedByYaleHousehold(x)) -> Dormitory(x))", "all x.((Building(x) & ManagedByYaleHousing(x)) -> Dormatorium(x))", "all x.((Building(x) & ManagedByYaleHousing(x)) -> Dorm(x))", "all x.(Building(x) & ManagedByYaleHousing(x)) -> Dormitory(x))", "all x.((Building(x) & ManagedByYaleHousing(x)) -> Dorms(x))", "all x.((Building(x) & ManagedByYoungHousing(x)) -> Dormitory(x))", "all x.((Building(x) & YaleHousing(x)) -> Dormitory(x))"]}
{"id": "folio_train_2294", "nl": "All buildings operated by Yale Housing staff are managed by Yale Housing. ", "fol": "all x.(IsOperatedByYaleHousingStaff(x) -> IsManagedByYaleHousing(x))", "prediction": ["all x.((Building(x) & OperatedByYaleHousingStaff(x)) -> ManagedByYaleHousing(x))", "all x.((Building(x) & OperatedByY YaleHousingStaff(x)) -> ManagedByY YaleHousing(x))", "all x y.((Building(x) & YaleHousingStaff(y)) -> ManagedBy(x,y))", "all x y.((Building(x) & YaleHousing(y) & OperatedBy(x,y)) -> ManagedBy(x,y))", "all x y.((Building(x) & YaleHousingStaff(y) & OperatedBy(x,y)) -> ManagedBy(x,y))", "all x y.((Building(x) & YaleHousing(y)) -> ManagedBy(x,y))", "all x y z.((Building(x) & YaleHousingStaff(y) & YaleHousing(z)) -> ManagedBy(x,y,z))", "all x.((Building(x) & OperatedByYaleHousing(x)) -> ManagedByYaleHousing(x))", "all x.((Building(x) & OperatedByYaleHousekeepingStaff(x)) -> ManagedByYaleHousekeeping(x))", "all x y.((Building(x) & YaleHousing(y) & OperatedByStaff(x,y)) -> ManagedByY YaleHousing(x))", "all x y.((Building(x) & OperatedByYaleHousingStaff(x)) -> ManagedByYaleHousing(y))", "all x.((Building(x) & OperatedByYamaHousingStaff(x)) -> ManagedByYamaHousing(x))", "all x y.((Building(x) & YaleHousing(y) & OperatedByStaff(x,y)) -> ManagedBy(x,y))", "all x y z.((Building(x) & YaleHousingStaff(y) & YaleHousing(z) & OperatedBy(x,y)) -> ManagedBy(x,z))", "all x y z.((Building(x) & YaleHousingStaff(y) & YaleHousing(z)) -> OperatedBy(x,y,z))", "all x.((Building(x) & OperatedByYaleHousekeepingStaff(x)) -> ManagedByYaleHousehousing(x))"]}
{"id": "folio_train_2295", "nl": "No buildings open to students are established after 1800. ", "fol": "all x.(IsOpenToStudents(x) -> -EstablishedPost1800(x))", "prediction": ["all x.((Building(x) & OpenToStudents(x)) -> -EstablishedAfter1800(x))", "-exists x.(Building(x) & OpenToStudents(x))", "all x.((Building(x) & OpenToStudents(x)) -> -EstablishedAfter1700(x))", "all x.((Building(x) & OpenToStudents(x)) -> -EstablishedAfter(x,1700))", "all x.((Building(x) & OpenToStudents(x)) -> -EstablishedAfter1900(x))", "all x.((Building(x) & OpenToStudents(x)) -> -EstablishedAfter(x,1800))", "all x.((Building(x) & OpenToStudents(x)) -> -EstablishedAfter(x,1801))", "all x.((Building(x) & OpenToStudents(x)) -> -establishedAfter1800(x))", "all x y.((Building(x) & OpenToStudents(x,y)) -> -EstablishedAfter(x,y))", "all x.((Building(x) & OpenToStudents(x)) -> -EstablishedAfter(x,180))", "all x.((Building(x) & OpenToStudents(x)) -> -EstablishedAfter1400(x))", "-exists x.(Building(x) & OpenToStudents(x) & EstablishedAfter1800(x))", "all x.((Building(x) & OpenToStudents(x)) -> -EstablishedAfter(x,800))", "all x.((Building(x) & OpenToStudents(x)) -> -EstablishedAfter18000(x))", "all x.((Building(x) & OpenToStudents(x)) -> -EstablishedAfter(x,1804))", "all x.((Building(x) & OpenToStudents(x)) -> -EstablishedAfter(x,1803))"]}
{"id": "folio_train_2296", "nl": "All buildings located on York Street are open to students. ", "fol": "all x.(LocatedOnYorkStreet(x) -> IsOpenToStudents(x))", "prediction": ["all x.((Building(x) & LocatedOnYorkStreet(x)) -> OpenToStudents(x))", "all x.((Building(x) & YorkStreet(x)) -> OpenToStudents(x))", "all x.((Building(x) & OnYorkStreet(x)) -> OpenToStudents(x))", "all x.((Building(x) & LocationOnYorkStreet(x)) -> OpenToStudents(x))", "all x.((Building(x) & locatedOnYorkStreet(x)) -> OpenToStudents(x))", "all x y.((Building(x) & YorkStreet(y)) -> OpenToStudents(x,y))", "all x y.((Building(x) & YorkStreet(y) & LocatedOn(x,y)) -> OpenToStudents(x))", "all x y.((Building(x) & LocatedOnYorkStreet(x,y)) -> OpenToStudents(x))", "all x.((Building(x) & FoundOnYorkStreet(x)) -> OpenToStudents(x))", "all x y.((Building(x) & LocatedOnYorkStreet(x)) -> OpenToStudents(x))", "all x y.((Building(x) & YorkStreet(y)) -> OpenToStudents(x))", "all x.((Building(x) & LocatedOnYorkStreet(x)) -> OpenToStudents(x))", "all x y z.((Building(x) & YorkStreet(y) & Student(z)) -> OpenTo(x,y,z))", "all x.((Buildings(x) & LocatedOnYorkStreet(x)) -> OpenToStudents(x))", "all x y.((Building(x) & LocationOnYorkStreet(x,y)) -> OpenToStudents(x))", "all x.((Building(x) & LocatedOnYorkStandard(x)) -> OpenToStudents(x))"]}
{"id": "folio_train_2297", "nl": "Harkness is either a building operated by Yale Housing staff or located on York Street. ", "fol": "((IsOperatedByYaleHousingStaff(Harkness) & -LocatedOnYorkStreet(Harkness)) | (-IsOperatedByYaleHousingStaff(Harkness) & LocatedOnYorkStreet(Harkness)))", "prediction": ["all x.(Harkness(x) -> (OperatedByYaleHousingStaff(x) | LocatedOnYorkStreet(x)))", "all x.(Harkness(x) -> (OperatedByYaleHousingStaff(x) | LocatedOnYorkStreet(x)))", "all x.(Harkness(x) -> (BuildingOperatedByYaleHousingStaff(x) | LocatedOnYorkStreet(x)))", "all x.(Harkness(x) -> (Building(x) & OperatedByYaleHousingStaff(x) | LocatedOnYorkStreet(x)))", "all x.(Harkness(x) -> (OperatedByYaleHousing(x) | LocatedOnYorkStreet(x)))", "all x y.((Harkness(x) & YaleHousingStaff(y)) -> (OperatedBy(x,y) | LocatedOnYorkStreet(x)))", "all x y.((Harkness(x) & YaleHousingStaff(y)) -> (OperatedBy(x,y) | LocatedOnYorkStreet(x,y)))", "all x.(Harkness(x) -> (BuildingOperatedByYaleHousingStaff(x) | LocatedOnYorkStreet(x)))", "all x.(Harkness(x) -> (Building(x) & OperatedByYaleHousingStaff(x) | LocatedOnYorkStreet(x)))", "all x.(Harkness(x) -> ((OperatedByYaleHousingStaff(x) | LocatedOnYorkStreet(x))))", "all x.(Harkness(x) -> (BuildingOperatedByYaleHousingStaff(x) | BuildingLocatedOnYorkStreet(x)))", "all x.(Harkness(x) -> (OperatedByYaleHousingStaff(x) | LocationOnYorkStreet(x)))", "all x.(Harkness(x) -> (OperatedByYaleHousingStaff(x) | LocatedOnYorkStreet(x)))", "all x y.((Building(x) & YaleHousingStaff(y)) -> (OperatedBy(x,y) | LocatedOnYorkStreet(x,y)))", "all x.(Harkness(x) -> (exists y.(Building(y) & OperatedByYaleHousingStaff(x,y)) | exists z.(Building(z) & LocatedOnYorkStreet(z)))))", "all x.(Harkness(x) -> (OperatedByYamaHousingStaff(x) | LocatedOnYorkStreet(x)))"]}
{"id": "folio_train_2298", "nl": "Harkness is a Yale dormitory.", "fol": "IsYaleDormitory(Harkness)", "prediction": ["all x.(Harkness(x) -> YaleDomby(x))", "all x.(Harkness(x) -> YaleDormium(x))", "all x.(Harkness(x) -> YaleDomestic(x))", "all x.(Harkness(x) -> YaleDormoury(x))", "all x.(Harkness(x) -> YaleDormoury(x))", "all x.(Harkness(x) -> YaleDorm(x))", "all x.(Harkness(x) -> YaleDormo(x))", "all x.(Harkness(x) -> YaleDormary(x))", "all x.(Harkness(x) -> YaleDormancy(x))", "all x.(Harkness(x) -> YaleDomhouse(x))", "all x.(Harkness(x) -> YaleDomicile(x))", "All x.(Harkness(x) -> YaleDomby(x))", "all x.(Harkness(x) -> YaleDormitory(x))", "all x.(Harkness(x) -> YaleDomesty(x))", "(All x.(Harkness(x) -> YaleDormium(x)))", "(All x.(Harkness(x) -> YaleDorm(x)))"]}
{"id": "folio_train_2299", "nl": "Harkness is not a Yale dormitory.", "fol": "-IsYaleDormitory(Harkness)", "prediction": ["all x.(Harkness(x) -> -YaleDomby(x))", "all x.(Harkness(x) -> -YaleDorm(x))", "all x.(Harkness(x) -> -YaleDomhouse(x))", "all x.(Harkness(x) -> -YaleDomestic(x))", "all x.(Harkness(x) -> -YaleDormary(x))", "all x.(Harkness(x) -> -YaleDominion(x))", "all x.(Harkness(x) -> -YaleDomary(x))", "all x.(Harkness(x) -> -YaleDormoury(x))", "all x.(Harkness(x) -> -YaleDomesty(x))", "All x.(Harkness(x) -> -YaleDomby(x))", "all x.(Harkness(x) -> -YaleDomicile(x))", "All x.(Harkness(x) -> -YaleDorm(x))", "Harkness is not YaleDomby(Harkness)", "all x.(Harkness(x) -> -YaleDom.(x))", "all x.(Harkness(x) -> -YaleDombery(x))", "(-YaleDomby(Harkness))"]}
{"id": "folio_train_2300", "nl": "Harkness is established after 1800.", "fol": "EstablishedPost1800(Harkness)", "prediction": ["all x.(Harkness(x) -> EstablishedAfter1800(x))", "all x y.((Harkness(x) & 1800(y)) -> EstablishedAfter(x,y))", "all x.(Harkness(x) -> EstablishedAfter(x,1700))", "all x.(Harkness(x) -> EstablishedAfter1700(x))", "all x y.((Harkness(x) & 1800(y)) -> EstablishedAfter(x,y))", "all x.(Harkness(x) -> EstablishedAfter(x,1800))", "All x.(Harkness(x) -> EstablishedAfter1800(x))", "all x.(Harkness(x) -> EstablishedAfter(x,1801))", "all x.(Harkness(x) -> EstablishedAfter1800(x))", "all x.(Harkness(x) -> EstablishedAfter1800(x))", "all x.(Harkness(x) -> EstablishedAfter1900(x))", "all x.(Harkness(x) -> EstablishedAfter(x,1901))", "all x.(Harkness(x) -> EstablishedAfter(x,1803))", "all x.(Harkness(x) -> EstablishedAfter(x,1808))", "all x.(Harkness(x) -> EstablishedAfter(x,800))", "all x.(Harkness(x) -> EstablishedAfter(x,1700))"]}
{"id": "folio_train_2301", "nl": "Harkness is established before 1800.", "fol": "-EstablishedPost1800(Harkness)", "prediction": ["all x.(Harkness(x) -> EstablishedBefore1700(x))", "all x.(Harkness(x) -> EstablishedBefore1800(x))", "all x y.((Harkness(x) & 1800(y)) -> EstablishedBefore(x,y))", "all x.(Harkness(x) -> EstablishedBefore1700(x))", "all x.(Harkness(x) -> EstablishedBefore1800(x))", "all x y.((Harkness(x) & 1800(y)) -> EstablishedBefore(x,y))", "all x.(Harkness(x) -> EstablishedBefore1700(x))", "all x.(Harkness(x) -> EstablishedBefore1800(x))", "All x.(Harkness(x) -> EstablishedBefore1700(x))", "all x.(Harkness(x) -> EstablishedBefore(x,1700))", "All x.(Harkness(x) -> EstablishedBefore1800(x))", "all x.(Harkness(x) -> EstablishedBefore(x,1800))", "all x.(Harkness(x) -> EstablishedBefore1900(x))", "all x y.((Harkness(x) & 1800(y)) -> Established(x,y))", "all x.(Harkness(x) -> EstablishedBefore(x,1801))", "all x.(Harkness(x) -> EstablishedBefore(x,180))"]}
{"id": "folio_train_2302", "nl": "There are no mansion houses in an urban area.", "fol": "all x.(IsUrbanArea(x) -> -IsMansionHouse(x))", "prediction": ["-exists x.(MansionHouse(x) & UrbanArea(x))", "-exists x.(MansionHouse(x) & InUrbanArea(x))", "exists x.(MansionHouse(x) & UrbanArea(x) & -MansionHouse(x))", "exists x.(MansionHouse(x) & UrbanArea(x))", "all x.((MansionHouse(x) & UrbanArea(x)) -> -exists y.(MansionHouse(y) & InArea(x,y))))", "exists x.(MansionHouse(x) & UrbanArea(x) & -exists y.(MansionHouse(y) & InArea(x,y))))", "all x.((MansionHouse(x) & UrbanArea(x)) -> -exists y.(MansionHouse(y) & InArea(y,x))))", "all x.((MansionHouse(x) & UrbanArea(x)) -> -exists y.(MansionHouse(y) & InArea(x,y)))", "all x.((MansionHouse(x) & UrbanArea(x)) -> -exists y.(MansionHouse(y) & InUrbanArea(x,y))))", "exists x.(MansionHouse(x) & UrbanArea(x) & -exists y.(MansionHouse(y) & UrbanArea(y))))", "exists x.(MansionHouse(x) & -InUrbanArea(x))", "exists x.(MansionHouse(x) & UrbanArea(x) & -exists y.(MansionHouse(y) & InArea(y,x))))", "all x.((MansionHouse(x) & UrbanArea(x)) -> -exists y.(UrbanArea(y) & LocatedIn(x,y))))", "all x.((MansionHouse(x) & UrbanArea(x)) -> -exists y.(UrbanArea(y) & In(x,y))))", "all x.((MansionHouse(x) & UrbanArea(x)) -> -exists y.(MansionHouse(y) & InArea(y,x)))", "all x y.((MansionHouse(x) & UrbanArea(y)) -> -exists z.(MansionHouse(z) & In(x,y))))"]}
{"id": "folio_train_2303", "nl": "All skyscrapers reside in urban areas.", "fol": "all x.(IsSkyscraper(x) -> IsUrbanArea(x))", "prediction": ["all x.(Skyscraper(x) -> ResidesInUrbanAreas(x))", "all x.(Skyscraper(x) -> ResidesInUrbanArea(x))", "all x y.((Skyscraper(x) & UrbanArea(y)) -> ResidesIn(x,y))", "all x.(Skyscraper(x) -> exists y.(UrbanArea(y) & ResidesIn(x,y)))", "all x.(Skyscraper(x) -> exists y.(UrbanArea(y) & ResidesIn(x,y))))", "all x y z.((Skyscraper(x) & UrbanArea(y) & UrbanArea(z)) -> ResidesIn(x,y,z))", "all x.exists y.(Skyscraper(x) & UrbanArea(y) & ResidesIn(x,y))", "all x.(Skyscraper(x) -> ResidesInUrbanAreas(x))", "all x.(Skyscraper(x) -> LivesInUrbanArea(x))", "all x.(Skyscraper(x) -> LocatedInUrbanArea(x))", "all x.(Skyscraper(x) -> ResidentInUrbanArea(x))", "all x.(Skyscraper(x) -> residesInUrbanArea(x))", "all x.(Skyscraper(x) -> ResideInUrbanArea(x))", "all x.(Skyscraper(x) -> ResidentInUrbanAreas(x))", "all x.(Skyscraper(x) -> ResidesInUrbanArea(x))", "all x y z.((Skyscraper(x) & UrbanArea(y) & UrbanArea(z)) -> ResidesIn(x,y))"]}
{"id": "folio_train_2304", "nl": "Every creepy haunted house is in a mansion house.", "fol": "all x.(IsCreepyHauntedHouse(x) -> IsMansionHouse(x))", "prediction": ["all x.(CruellyHauntedHouse(x) -> InMansionHouse(x))", "all x.(HauntedHouse(x) -> InMansionHouse(x))", "all x.(CruellyHuntedHouse(x) -> InMansionHouse(x))", "all x.(CrookyHauntedHouse(x) -> InMansionHouse(x))", "all x.(CroikyHauntedHouse(x) -> InMansionHouse(x))", "all x.(CreekHauntedHouse(x) -> InMansionHouse(x))", "all x.(CrookyHuntedHouse(x) -> InMansionHouse(x))", "all x.(CroikyHuntedHouse(x) -> InMansionHouse(x))", "all x.(HauntedHouse(x) -> MansionHouse(x))", "all x.(CruellyHauntedHouse(x) -> MansionHouse(x))", "all x.(HuntedHouse(x) -> InMansionHouse(x))", "all x.(CrimeyHauntedHouse(x) -> InMansionHouse(x))", "all x.(CruellyHuntedHouse(x) -> MansionHouse(x))", "all x.(CrookyHuntedHouse(x) -> InMansionHouse(x))", "all x.(CreekHuntedHouse(x) -> InMansionHouse(x))", "all x.(HuntedHouse(x) -> MansionHouse(x))"]}
{"id": "folio_train_2305", "nl": "Every terrifying Halloween scare comes from a creepy haunted house.", "fol": "all x.(IsTerrifyingHalloweenScare(x) -> IsCreepyHauntedHouse(x))", "prediction": ["all x y.((HalloweenScare(x) & HauntedHouse(y)) -> ComesFrom(x,y))", "all x y.((ThreateningHalloweenScare(x) & HauntedHouse(y)) -> ComesFrom(x,y))", "all x y.((HalloweenScare(x) & HorrorHouse(y)) -> ComesFrom(x,y))", "all x y z.((HalloweenScare(x) & Horror(y) & HauntedHouse(z)) -> ComesFrom(x,y,z))", "all x y.((HalloweenScare(x) & Horror(y)) -> ComesFromCreekHauntedHouse(x,y))", "all x.((HalloweenScare(x) & CreepyHauntedHouse(x)) -> Scary(x))", "all x y z.((HalloweenScare(x) & Horror(y) & HauntedHouse(z)) -> ComesFrom(x,z))", "all x y.((HalloweenScare(x) & Horror(y)) -> ComesFromCrookyHauntedHouse(x,y))", "all x y.((HalloweenScare(x) & Horror(y)) -> ComesFromCrueltyHauntedHouse(x,y))", "all x y.((HalloweenScare(x) & HauntedHouse(y) & ComesFrom(x,y)) -> Scary(x))", "all x.(ThreateningHalloweenScare(x) -> ComesFromCrookyHauntedHouse(x))", "all x.((HalloweenScare(x) & CreepyHauntedHouse(x)) -> Scare(x))", "all x.(ThreateningHalloweenScare(x) -> ComesFromCreekHauntedHouse(x))", "all x.(ThreateningHalloweenScare(x) -> ComesFromCrueltyHauntedHouse(x))", "all x y.((HalloweenScare(x) & HauntedHouse(y) & ComesFrom(x,y)) -> Terrifying(x))", "all x.((HalloweenScare(x) & CreepyHauntedHouse(x)) -> ScaresFrom(x))"]}
{"id": "folio_train_2306", "nl": "The Scream is a creepy haunted house or a terrifying Halloween scare.", "fol": "(IsCreepyHauntedHouse(TheScream) | IsTerrifyingHalloweenScare(TheScream))", "prediction": ["all x.(Scream(x) -> (CreepyHauntedHouse(x) | TerrifyingHalloweenScare(x)))", "all x.(Scream(x) -> (CruellyHuntedHouse(x) | TerrifyingHalloweenScare(x)))", "all x.(Scream(x) -> (CreepyHuntedHouse(x) | TerrifyingHalloweenScare(x)))", "all x.(Scream(x) -> (CrimeyHauntedHouse(x) | ScaryHalloweenScare(x)))", "all x.(Scream(x) -> (CrueltyHuntedHouse(x) | TerrifyingHalloweenScare(x)))", "all x.(Scream(x) -> (CruellyHuntedHouse(x) | ScaryHalloweenScare(x)))", "all x.(Scream(x) -> (CruellyHauntedHouse(x) | TerrifyingHalloweenScare(x)))", "all x.(Scream(x) -> (CrimeyHauntedHouse(x) | TerrifyingHalloweenScare(x)))", "all x.(Scream(x) -> (CrimeyHuntedHouse(x) | ScaryHalloweenScare(x)))", "all x.(Scream(x) -> (CreepyHauntedHouse(x) | ScaryHalloweenScare(x)))", "all x.(Scream(x) -> (CrueltyHauntedHouse(x) | TerrifyingHalloweenScare(x)))", "all x.(Scream(x) -> (CreekHauntedHouse(x) | ScaryHalloweenScare(x)))", "all x.(Scream(x) -> (CreepyHuntedHouse(x) | ScaryHalloweenScare(x)))", "all x.(Scream(x) -> (CruellyHauntedHouse(x) | ScaryHalloweenScare(x)))", "all x.(Scream(x) -> (CrueltyHuntedHouse(x) | ScaryHalloweenScare(x)))", "all x.(Scream(x) -> (HauntedHouse(x) | ScaryHalloweenScare(x)))"]}
{"id": "folio_train_2307", "nl": "The Scream is a skyscraper.", "fol": "IsSkyscraper(TheScream)", "prediction": ["All x.(Scream(x) -> Skyscraper(x))", "all x.(Scream(x) -> Skyscraper(x))", "The Scream is a Skyscraper.", "exists x.(Scream(x) & Skyscraper(x))", "(Scraper(Scream) & Skyscraper(Scream))", "TheScream isSkyscraper(Skyscraper)", "All x.(Scream(x) -> Skyscraper(x))", "The Scream is a skyscraper.", "(Scream(Skyscraper) & Skyscraper(Skyscraper))", "(Scream(s) & Skyscraper(s))", "(Scream(Skyscraper) -> Skyscraper(Scream))", "(Skyscraper(Scream) & Skyscraper(Scream))", "all x.(Scream(x) -> Skyscraper(x))", "(Scraper(Scream) & Skyscraper(Scraper))", "(Scream(s) -> Skyscraper(s))", "(Scream(Skyscraper) -> Skyscraper(Scream))"]}
{"id": "folio_train_2308", "nl": "The Scream is not a skyscraper.", "fol": "-IsSkyscraper(TheScream)", "prediction": ["All x.(Scream(x) -> -Skyscraper(x))", "all x.(Scream(x) -> -Skyscraper(x))", "(-Skyscraper(Scream))", "TheScream is notSkyscraper(Scream)", "(Scream(Scream) & -Skyscraper(Scream))", "The Scream is not a Skyscraper.", "-Skyscraper(Scream)", "(-Skyscraper(Scream) & -Skyscraper(Scream))", "The Scream is not a skyscraper.", "The Scream is -Skyscraper(Scream)", "The Scream -Skyscraper(Scream)", "TheScream is notSkyscraper(s) & -Skyscraper(s))", "TheScream is -Skyscraper(Scream)", "TheScream -Skyscraper(Scream)", "The Scream -Skyscraper(s) & -Skyscraper(s))", "TheScream is notSkyscraper(s)"]}
{"id": "folio_train_2309", "nl": "The Scream is a terrifying Halloween scare.", "fol": "IsTerrifyingHalloweenScare(TheScream)", "prediction": ["all x.(Scream(x) -> ScaryHalloweenScare(x))", "All x.(Scream(x) -> ScaryHalloweenScare(x))", "all x.((Scream(x) & Scare(x)) -> TerrifyingHalloween(x))", "all x.(Scream(x) -> ScaringHalloweenScare(x))", "all x.(Scream(x) -> TerrifyingHalloweenScare(x))", "all x.(Scream(x) -> ScarefulHalloween(x))", "all x.((Scream(x) & Scare(x)) -> ScaryHalloween(x))", "all x.(Scream(x) -> ScarefulHalloweenScare(x))", "All x.(Scream(x) -> ScaringHalloweenScare(x))", "All x.(Scream(x) -> Scare(x))", "all x.(Scream(x) -> Scare(x))", "All x.(Scream(x) -> ScarefulHalloween(x))", "(ThreateningHalloweenScare(Scream) & HalloweenScare(Scream))", "All x.(Scream(x) -> ScarefulHalloweenScare(x))", "The Scream is a terrifying Halloween scare.", "(ThrillingHalloweenScare(Scream) & HalloweenScare(Scream))"]}
{"id": "folio_train_2310", "nl": "The Scream is either a skyscraper or a mansion house.", "fol": "(IsSkyscraper(TheScream) | IsMansionHouse(TheScream))", "prediction": ["all x.(Scream(x) -> (Skyscraper(x) | MansionHouse(x)))", "exists x.(Scream(x) & (Skyscraper(x) | MansionHouse(x)))", "All x.(Scream(x) -> (Skyscraper(x) | MansionHouse(x)))", "all x.(Scream(x) -> (Skyscraper(x) | MansionHouse(x)))", "all x y.((Scream(x) & Skyscraper(y)) | MansionHouse(y)) -> (Skyscraper(x) | MansionHouse(x)))", "all x.((Scream(x) & (Skyscraper(x) | MansionHouse(x))) -> (Skyscraper(x) | MansionHouse(x)))", "all x y.((Scream(x) & Skyscraper(y)) | MansionHouse(x)) -> (Skyscraper(y) | MansionHouse(y)))", "(Skyscraper(Scream) | MansionHouse(Scream))", "all x.(Scream(x) -> (Shadowscraper(x) | MansionHouse(x)))", "all x.(Scream(x) -> ((Skyscraper(x) | MansionHouse(x))))", "all x y.((Scream(x) & Skyscraper(y)) | MansionHouse(y)) -> (Skyscraper(x) | MansionHouse(y)))", "all x y.((Scream(x) & Skyscraper(y)) | MansionHouse(x)) -> (Skyscraper(x) | MansionHouse(x)))", "(exists x.(Scream(x) & Skyscraper(x)) | exists y.(MansionHouse(y) & House(y))))", "(all x.(Scream(x) -> Skyscraper(x)) | all y.(Scream(y) -> MansionHouse(y))))", "all x.((Scream(x) & (Skyscraper(x) | MansionHouse(x))) -> Scream(x))", "all x.(Scream(x) -> (Skyscraper(x) | House(x)))"]}
{"id": "folio_train_2311", "nl": "The Scream is either a skyscraper or an urban area.", "fol": "(IsSkyscraper(TheScream) | IsUrbanArea(TheScream))", "prediction": ["all x.(Scream(x) -> (Skyscraper(x) | UrbanArea(x)))", "exists x.(Scream(x) & (Skyscraper(x) | UrbanArea(x)))", "All x.(Scream(x) -> (Skyscraper(x) | UrbanArea(x)))", "all x.(Scream(x) -> (Skyscraper(x) | UrbanArea(x)))", "all x y.((Scream(x) & Skyscraper(y)) | UrbanArea(y)) -> (Skyscraper(x) | UrbanArea(x)))", "all x.((Scream(x) & (Skyscraper(x) | UrbanArea(x))) -> (Skyscraper(x) | UrbanArea(x)))", "(Skyscraper(Scream) | UrbanArea(Scream))", "all x y.((Scream(x) & Skyscraper(y)) | UrbanArea(x,y)) -> (Skyscraper(x) | UrbanArea(x,y)))", "all x.(Scream(x) -> ((Skyscraper(x) | UrbanArea(x))))", "all x y.((Scream(x) & Skyscraper(y)) | UrbanArea(x)) -> (Skyscraper(y) | UrbanArea(y)))", "all x.((Scream(x) & (Skyscraper(x) | UrbanArea(x))) -> Scream(x))", "all x y.((Scream(x) & Skyscraper(y)) | UrbanArea(y)) -> (Skyscraper(x,y) | UrbanArea(x,y)))", "all x y.((Scream(x) & Skyscraper(y)) | UrbanArea(x,y)) -> (Skyscraper(x) | UrbanArea(x)))", "all x y.((Scream(x) & Skyscraper(y)) | UrbanArea(x)) -> (Skyscraper(x) | UrbanArea(x)))", "all x y.((Scream(x) & Skyscraper(y)) | UrbanArea(y)) -> (Skyscraper(x) | UrbanArea(y)))", "all x.(Scream(x) -> (Shadowscraper(x) | UrbanArea(x)))"]}
{"id": "folio_train_2312", "nl": "The Scream is either a skyscraper or a creepy haunted house.", "fol": "(IsSkyscraper(TheScream) | IsCreepyHauntedHouse(TheScream))", "prediction": ["all x.(Scream(x) -> (Skyscraper(x) | CreepyHuntedHouse(x)))", "all x.(Scream(x) -> (Skyscraper(x) | CreepyHauntedHouse(x)))", "all x.(Scream(x) -> (Skyscraper(x) | HauntedHouse(x)))", "all x.(Scream(x) -> (Skyscraper(x) | CryptyHuntedHouse(x)))", "all x.(Scream(x) -> (Skyscraper(x) | CryptyHauntedHouse(x)))", "all x.(Scream(x) -> (Skyscraper(x) | HorrorHuntedHouse(x)))", "all x.(Scream(x) -> (Skyscraper(x) | CrawlyHuntedHouse(x)))", "all x.(Scream(x) -> (Skyscraper(x) | HorrorHauntedHouse(x)))", "all x.(Scream(x) -> (Skyscraper(x) | CrypticHuntedHouse(x)))", "exists x.(Scream(x) & (Skyscraper(x) | HauntedHouse(x)))", "all x.(Scream(x) -> (Skyscraper(x) | CrazyHuntedHouse(x)))", "all x.(Scream(x) -> (Skyscraper(x) | CrypticHauntedHouse(x)))", "exists x.(Scream(x) & (Skyscraper(x) | CreepyHauntedHouse(x)))", "exists x.(Scream(x) & (Skyscraper(x) | CreepyHuntedHouse(x)))", "all x.(Scream(x) -> (Skyscraper(x) | CryingHuntedHouse(x)))", "all x.(Scream(x) -> (Skyscraper(x) | HungryHouse(x)))"]}
{"id": "folio_train_2313", "nl": "If The Scream is not a mansion in an urban area, then it is either a skyscraper or an urban area.", "fol": "(-(IsMansionHouse(TheScream) & IsUrbanArea(TheScream)) -> (IsSkyscraper(TheScream) | IsUrbanArea(TheScream)))", "prediction": ["all x.((Scream(x) & -MansionInUrbanArea(x)) -> (Skyscraper(x) | UrbanArea(x)))", "all x.((MansionInUrbanArea(x) & -MansionInUrbanArea(x)) -> (Skyscraper(x) | UrbanArea(x)))", "all x.((TheScream(x) & -MansionInUrbanArea(x)) -> (Skyscraper(x) | UrbanArea(x)))", "all x.((Scream(x) & -UrbanAreaMansion(x)) -> (Skyscraper(x) | UrbanAreaMansion(x)))", "all x.((Mansion(x) & -InUrbanArea(x)) -> (Skyscraper(x) | UrbanArea(x)))", "all x.((Scream(x) & -InUrbanArea(x)) -> (Skyscraper(x) | UrbanArea(x)))", "all x.((Mansion(x) & -UrbanArea(x)) -> (Skyscraper(x) | UrbanArea(x)))", "all x.((Scream(x) & -Mansion(x) & UrbanArea(x)) -> (Skyscraper(x) | UrbanArea(x)))", "all x.(Scream(x) -> (-MansionInUrbanArea(x) & (Skyscraper(x) | UrbanArea(x))))", "all x.((Scream(x) & -MansionInUrbanArea(x)) -> ((Skyscraper(x) | UrbanArea(x))))", "all x.((Scream(x) & -UrbanAreaMansion(x)) -> (Skyscraper(x) | UrbanArea(x)))", "all x.((Scream(x) & -UrbanArea(x)) -> (Skyscraper(x) | UrbanArea(x)))", "all x.((Scream(x) & -MansionInUrbanArea(x)) -> (Shakescraper(x) | UrbanArea(x)))", "all x.((Scream(x) & -MansionInUrbanArea(x)) -> (Skyscraper(x) | UrbanArea(x)))", "all x.((Mansion(x) & -MansionInUrbanArea(x)) -> (Skyscraper(x) | UrbanArea(x)))", "all x.((Scream(x) & -MensionInUrbanArea(x)) -> (Skyscraper(x) | UrbanArea(x)))"]}
{"id": "folio_train_2314", "nl": "If The Scream is either a skyscraper or a mansion house, then it is in an urban area.", "fol": "((IsSkyscraper(TheScream) | IsMansionHouse(TheScream)) -> IsUrbanArea(TheScream))", "prediction": ["all x.((Skyscraper(x) | MansionHouse(x)) -> UrbanArea(x))", "all x.(Skyscraper(x) | MansionHouse(x)) -> UrbanArea(x))", "all x.((Scream(x) & (Skyscraper(x) | MansionHouse(x))) -> UrbanArea(x))", "all x.((TheScream(x) & (Skyscraper(x) | MansionHouse(x))) -> UrbanArea(x))", "all x.((Skyscraper(x) | MansionHouse(x)) -> InUrbanArea(x))", "all x.((Scraper(x) | MansionHouse(x)) -> UrbanArea(x))", "all x y.((Scream(x) & (Skyscraper(y) | MansionHouse(y))) -> UrbanArea(x))", "all x y.((Scream(x) & (Skyscraper(x) | MansionHouse(x))) -> UrbanArea(x))", "all x.((Shark(x) & (Skyscraper(x) | MansionHouse(x))) -> UrbanArea(x))", "all x.((Skyscraper(x) | House(x)) -> UrbanArea(x))", "all x.(((Skyscraper(x) | MansionHouse(x)) & UrbanArea(x)) -> UrbanArea(x))", "all x y.((Scream(x) & (Skyscraper(x) | MansionHouse(x))) -> UrbanArea(y))", "all x.(SkyscraperOrMansionHouse(x) -> UrbanArea(x))", "exists x.(Scream(x) & (Skyscraper(x) | MansionHouse(x)) & UrbanArea(x))", "exists x.(Skyscraper(x) | MansionHouse(x)) -> UrbanArea(x))", "exists x.(Scream(x) & (Skyscraper(x) | MansionHouse(x))) -> UrbanArea(x))"]}
{"id": "folio_train_2315", "nl": "If The Scream is either a skyscraper or a mansion house, then it is neither a creepy haunted house nor a terrifying Halloween scare.", "fol": "((IsSkyscraper(TheScream) | IsMansionHouse(TheScream)) -> (-IsCreepyHauntedHouse(TheScream) & -IsTerrifyingHalloweenScare(TheScream)))", "prediction": ["all x.((Skyscraper(x) | MansionHouse(x)) -> (-CreekHuntedHouse(x) & -ThrillingHalloweenScare(x)))", "all x.((Skyscraper(x) | MansionHouse(x)) -> (-CreekHuntedHouse(x) & -ThreateningHalloweenScare(x)))", "all x.((Skyscraper(x) | MansionHouse(x)) -> (-CreekHauntedHouse(x) & -ThrillingHalloweenScare(x)))", "all x.((Skyscraper(x) | MansionHouse(x)) -> (-CreekHuntedHouse(x) & -ThreesomeHalloweenScare(x)))", "all x.((Skyscraper(x) | MansionHouse(x)) -> (-CreekHauntedHouse(x) & -ThreateningHalloweenScare(x)))", "all x.((Skyscraper(x) | MansionHouse(x)) -> -(CreekHuntedHouse(x) | TerrifyingHalloweenScare(x)))", "all x.((Skyscraper(x) | MansionHouse(x)) -> -(CruellyHuntedHouse(x) | TerrifyingHalloweenScare(x)))", "all x.((Skyscraper(x) | MansionHouse(x)) -> (-CruellyHuntedHouse(x) & -ThrillingHalloweenScare(x)))", "all x.((Skyscraper(x) | MansionHouse(x)) -> -(CreekHuntedHouse(x) | ScaryHalloweenScare(x)))", "all x.((Skyscraper(x) | MansionHouse(x)) -> (-CreekHuntedHouse(x) & -ThrickeningHalloweenScare(x)))", "all x.((Skyscraper(x) | MansionHouse(x)) -> (-CreekHauntedHouse(x) & -ThreesomeHalloweenScare(x)))", "all x.((Skyscraper(x) | MansionHouse(x)) -> (-CreekHuntedHouse(x) & -ThrillingHalloweenScare(x)))", "all x.((Skyscraper(x) | MansionHouse(x)) -> (-CryptyHuntedHouse(x) & -ThreesomeHalloweenScare(x)))", "all x.((Skyscraper(x) | MansionHouse(x)) -> (-CreekHuntedHouse(x) & -ThreateningHalloweenScare(x)))", "all x.((Skyscraper(x) | MansionHouse(x)) -> (-CruellyHuntedHouse(x) & -ThreesomeHalloweenScare(x)))", "all x.((Skyscraper(x) | MansionHouse(x)) -> -(CreekHuntedHouse(x) | ScaringHalloweenScare(x)))"]}
{"id": "folio_train_2316", "nl": "If The Scream is either a skyscraper or a creepy haunted house, then it is not a mansion house.", "fol": "((IsSkyscraper(TheScream) | IsCreepyHauntedHouse(TheScream)) -> -IsMansionHouse(TheScream))", "prediction": ["all x.((Scream(x) & (Skyscraper(x) | CreepyHuntedHouse(x))) -> -MansionHouse(x))", "all x.((Scream(x) & (Skyscraper(x) | CreepyHauntedHouse(x))) -> -MansionHouse(x))", "all x.((Scream(x) & (Skyscraper(x) | CryptyHuntedHouse(x))) -> -MansionHouse(x))", "all x.((Scream(x) & (Skyscraper(x) | CryptyHauntedHouse(x))) -> -MansionHouse(x))", "all x.((Scream(x) & (Skyscraper(x) | CrawlyHuntedHouse(x))) -> -MansionHouse(x))", "all x.((Scream(x) & (Skyscraper(x) | CryingHuntedHouse(x))) -> -MansionHouse(x))", "all x.((Scream(x) & (Skyscraper(x) | HorrorHuntedHouse(x))) -> -MansionHouse(x))", "all x.((Scream(x) & (Skyscraper(x) | HauntedHouse(x))) -> -MansionHouse(x))", "all x.((Scream(x) & (Skyscraper(x) | CrypticHuntedHouse(x))) -> -MansionHouse(x))", "all x.((Scream(x) & (Skyscraper(x) | CrawlyHauntedHouse(x))) -> -MansionHouse(x))", "all x.((Scream(x) & (Skyscraper(x) | CrypticHauntedHouse(x))) -> -MansionHouse(x))", "all x.((Scream(x) & (Skyscraper(x) | CryingHauntedHouse(x))) -> -MansionHouse(x))", "all x.((Scream(x) & (Skyscraper(x) | CrazyHuntedHouse(x))) -> -MansionHouse(x))", "all x.((Scream(x) & (Skyscraper(x) | HorrorHauntedHouse(x))) -> -MansionHouse(x))", "all x.((Scream(x) & (Skyscraper(x) | CrazyHauntedHouse(x))) -> -MansionHouse(x))", "all x.((Scream(x) & (Skyscraper(x) | CryingHuntedHouse(x))) -> -MansionHouse(x))"]}
{"id": "folio_train_2317", "nl": "Phuoc Binh national park is a national park in Vietnam. ", "fol": "(IsNationalPark(PhuocBinh) & IsLocatedIn(PhuocBinh,Vietnam))", "prediction": ["all x.(PhuocBinhNationalPark(x) -> NationalParkInVietnam(x))", "all x.((NationalPark(x) & PhuocBinh(x)) -> NationalParkInVietnam(x))", "all x y.((PhuocBinhNationalPark(x) & Vietnam(y)) -> NationalPark(x,y))", "all x.(PhuocBinh(x) -> NationalParkInVietnam(x))", "all x.(NationalPark(x) -> PhuocBinh(x))", "all x.(PhuocBinhNationalPark(x) -> (NationalParkInVietnam(x) & NationalParkInVietnam(x)))", "all x.((NationalPark(x) & PhuocBinh(x)) -> Vietnam(x))", "all x y.((PhuocBinh(x) & Vietnam(y)) -> NationalPark(x,y))", "all x.(PhuocBinh(x) -> NationalPark(x))", "all x.(PhuocBinhNationalPark(x) -> NationalPark(x))", "all x.((PhuocBinhNationalPark(x) & Vietnam(x)) -> NationalPark(x))", "all x.(PhuocBinhNationalPark(x) -> (NationalPark(x) & InVietnam(x)))", "all x y.((PhuocBinhNationalPark(x) & Vietnam(y)) -> NationalParkIn(x,y))", "all x.(PhuocBinhNationalPark(x) -> VietnamNationalPark(x))", "all x.(PhuocBinhNationalPark(x) -> (NationalParkInVietnam(x) & LocatedIn(x,Vietnam)))", "all x.(PhuocBinhNationalPark(x) -> NationalParkInVietnam(x))"]}
{"id": "folio_train_2318", "nl": "Any national park in Vietnam is classified as a nature reserve. ", "fol": "all x.((IsNationalPark(x) & IsLocatedIn(x,Vietnam)) -> ClassifiedAsNatureReserve(x))", "prediction": ["all x.((NationalPark(x) & Vietnam(x)) -> NatureReserve(x))", "all x.((NationalPark(x) & InVietnam(x)) -> NatureReserve(x))", "all x.((NationalPark(x) & LocatedInVietnam(x)) -> NatureReserve(x))", "all x.((NationalPark(x) & InVietnamese(x)) -> NatureReserve(x))", "all x.((NationalPark(x) & inVietnam(x)) -> NatureReserve(x))", "all x y.((NationalPark(x) & Vietnam(y) & InVietnam(x,y)) -> NatureReserve(x))", "all x.((NationalParkInVietnam(x) & InVietnam(x)) -> NatureReserve(x))", "all x.((NationalParkInVietnam(x) & LocatedIn(x,Vietnam)) -> NatureReserve(x))", "all x y.((NationalPark(x) & Vietnam(y) & LocatedIn(x,y)) -> NatureReserve(x))", "all x y.((NationalPark(x) & Vietnam(y)) -> NatureReserve(x,y))", "all x.((NationalPark(x) & InVietnam(x) & NatureReserve(x)) -> NatureReserve(x))", "all x.((NationalPark(x) & InVietnam(x)) -> NatureRestaurant(x))", "all x y.((NationalPark(x) & Vietnam(y)) -> NatureReserve(x))", "all x.((NationalPark(x) & Vietnam(x)) -> NatureRestaurant(x))", "all x.((NationalPark(x) & NationalPark(x) & Vietnam(x)) -> NatureReserve(x))", "all x y.((NationalPark(x) & Vietnam(y) & InVietnam(x)) -> NatureReserve(x))"]}
{"id": "folio_train_2319", "nl": "There is a national park in Vietnam classified as a UNESCO World Heritage Site.", "fol": "exists x.(IsNationalPark(x) & IsLocatedIn(x,Vietnam) & IsUNESCOWorldHeritageSite(x))", "prediction": ["exists x.(NationalPark(x) & InVietnam(x) & UNESCOWorldHeritageSite(x))", "exists x.(NationalPark(x) & InVietnam(x) & WorldHeritageSite(x))", "exists x.(NationalPark(x) & InVietnam(x) & ClassifiedAsUNESCOWorldHeritageSite(x))", "exists x.(NationalPark(x) & Vietnam(x) & UNESCOWorldHeritageSite(x))", "exists x.(NationalPark(x) & Vietnam(x) & WorldHeritageSite(x))", "exists x.(NationalPark(x) & Vietnam(x) & ClassifiedAsUNESCOWorldHeritageSite(x))", "all x.((NationalPark(x) & Vietnam(x)) -> UNESCOWorldHeritageSite(x))", "exists x y.((NationalPark(x) & Vietnam(y) & ClassifiedAsUNESCOWorldHeritageSite(x,y))", "exists x.(NationalPark(x) & InVietnamese(x) & WorldHeritageSite(x))", "exists x.(NationalPark(x) & InVietnam(x) & ClassifiedAsWorldHeritageSite(x))", "exists x.(NationalPark(x) & inVietnam(x) & UNESCOWorldHeritageSite(x))", "exists x.(NationalPark(x) & InVietnamese(x) & UNESCOWorldHeritageSite(x))", "exists x.(NationalPark(x) & inVietnam(x) & WorldHeritageSite(x))", "exists x y.(NationalPark(x) & Vietnam(y) & ClassifiedAsUNESCOWorldHeritageSite(x,y))", "all x.((NationalPark(x) & Vietnam(x)) -> WorldHeritageSite(x))", "all x y.((NationalPark(x) & Vietnam(y)) -> WorldHeritageSite(x,y))"]}
{"id": "folio_train_2320", "nl": "All national parks in Vietnam are either managed by the Ministry of Agriculture or by the People's Committee. ", "fol": "all x.(((IsNationalPark(x) & IsLocatedIn(x,Vietnam)) -> ManagedBy(x,MinistryofAgriculture)) | ManagedBy(x,PeoplesCommittee))", "prediction": ["all x.(NationalPark(x) -> (ManagedByMinisterOfAgriculture(x) | ManagedByPeoplesCommittee(x)))", "all x.(NationalPark(x) -> (ManagedByMountainOfAgriculture(x) | ManagedByPeoplesCommittee(x)))", "all x.((NationalPark(x) & Vietnam(x)) -> (ManagedByMinisterOfAgriculture(x) | ManagedByPeoplesCommittee(x)))", "all x.(NationalPark(x) -> (ManagedBy(x,MinisterOfAgriculture) | ManagedBy(x,PeoplesCommittee)))", "all x.(NationalPark(x) -> (MountainOfAgriculture(x) | PeoplesCommittee(x)))", "all x.((NationalPark(x) & InVietnam(x)) -> (ManagedByMinisterOfAgriculture(x) | ManagedByPeoplesCommittee(x)))", "all x.(NationalPark(x) -> (ManagedBy(x,MinistryOfAgriculture) | ManagedBy(x,PeoplesCommittee)))", "all x y.((NationalPark(x) & Vietnam(y)) -> (ManagedBy(x,y) | ManagedBy(x,y)))", "all x.(NationalPark(x) -> (ManagedByMinisterOfAgricultural(x) | ManagedByPeoplesCommittee(x)))", "all x.(NationalPark(x) -> (ManagedByMinisterOfAgriculture(x) | ManagedByPeoplesCommittee(x)))", "all x y.((NationalPark(x) & Vietnam(y)) -> (ManagedBy(x,y) | ManagedByPeoplesCommittee(x,y)))", "all x.(NationalPark(x) -> (ManagedByMinisterOfAgriculture(x) | ManagedByPeoplesComittee(x)))", "all x.(NationalPark(x) -> (ManagedBy(x,MinisterOfAgriculture) | ManagedBy(x,PeopleCommittee)))", "all x.(NationalPark(x) -> (ManagedBy(x,MountainOfAgriculture) | ManagedBy(x,PeoplesCommittee)))", "all x.(NationalPark(x) -> (ManagedBy(x,Agriculture) | ManagedBy(x,PeoplesCommittee)))", "all x y.((NationalPark(x) & Vietnam(y)) -> (MadeBy(x,y) | ManagedByPeoplesCommittee(x,y)))"]}
{"id": "folio_train_2321", "nl": "Phuoc Binh is not managed by the Ministry of Agriculture.", "fol": "-ManagedBy(PhuocBinh,MinistryofAgriculture)", "prediction": ["Phuoc Binh - ManagedByMinisterOfAgriculture(PhuocBinh)", "Phuoc Binh -ManagedByMinisterOfAgriculture(PhuocBinh)", "(-ManagedBy(PhuocBinh) & MinistryOfAgriculture(PhuocBinh))", "Phuoc Binh -ManagedByMountainOfAgriculture(PhuocBinh)", "-ManagedByMinisterOfAgriculture(PhuocBinh)", "Phuoc Binh - ManagedByMountainOfAgriculture(PhuocBinh)", "all x.(PhuocBinh(x) -> -ManagedByMinisterOfAgriculture(x))", "(-ManagedByMinisterOfAgriculture(PhuocBinh))", "Phuoc Binh is not managed by MinistryOfAgriculture(PhuocBinh)", "PhuocBinh -ManagedByMinisterOfAgriculture(PhuocBinh)", "all x.(PhuocBinh(x) -> -ManagedByMountainOfAgriculture(x))", "Phuoc Binh -ManagedByAgriculture(PhuocBinh)", "PhuocBinh - ManagedByMinisterOfAgriculture(PhuocBinh)", "all x.(PhuocBinh(x) -> -ManagedByAgriculture(x))", "Phuoc Binh - ManagedByAgriculture(PhuocBinh)", "PhuocBinh -ManagedByAgriculture(PhuocBinh)"]}
{"id": "folio_train_2322", "nl": "There is a nature reserve in Vietnam.", "fol": "exists x.(ClassifiedAsNatureReserve(x) & IsLocatedIn(x,Vietnam))", "prediction": ["exists x.(NatureReserve(x) & InVietnam(x))", "exists x.(NatureReserve(x) & Vietnam(x))", "exists x.(NatureReserve(x) & InVietnamese(x))", "exists x.(NatureRestaurant(x) & InVietnam(x))", "exists x.(NatureReserve(x) & InVietnam(x))", "exists x.(NatureReserve(x) & LocatedInVietnam(x))", "Exists x.(NatureReserve(x) & InVietnam(x))", "exists x y.(NatureReserve(x) & Vietnam(y))", "(exists x.(NatureReserve(x) & InVietnam(x)))", "exists x.(NatureReserve(x) & In(x,Vietnam))", "exists x y.(NatureReserve(x,y) & Vietnam(y))", "exist x.(NatureReserve(x) & InVietnam(x))", "exists x.(NatureReserve(x) & inVietnam(x))", "exists x y.(NatureReserve(x) & Vietnam(y) & LocatedIn(x,y))", "exists x y.((NatureReserve(x) & Vietnam(y)) -> LocatedIn(x,y))", "exists x y.((NatureReserve(x) & Vietnam(y)) -> NatureReserve(x,y))"]}
{"id": "folio_train_2323", "nl": "Phuoc Binh is a UNESCO Heritage Site.", "fol": "IsUNESCOWorldHeritageSite(PhuocBinh)", "prediction": ["PhuocBinh is a UNESCOHeritageSite(PhuocBinh)", "Phuoc Binh is a UNESCOHeritageSite(PhuocBinh)", "all x.((PhuocBinh(x) & UNESCOHeritageSite(x)) -> HeritageSite(x))", "PhuocBinh (UNESCO HeritageSite)", "all x.(PhuocBinh(x) -> UNESCOHeritageSite(x))", "all x.(PhuocBinh(x) -> HeritageSite(x))", "PhuocBinh (UNESCOHeritageSite)", "all x.((PhuocBinh(x) & HeritageSite(x)) -> UNESCO(x))", "all x.((PhuocBinh(x) & UNESCOHeritageSite(x)) -> HistoricSite(x))", "all x.((PhuocBinh(x) & UNESCOHabitatSite(x)) -> HeritageSite(x))", "PhuocBinh(x) -> HeritageSite(x))", "Phuoc Binh is a UNESCO HeritageSite(PhuocBinh)", "Phuoc Binh (UNESCO HeritageSite)", "PhuocBinh is a UNESCOHabitatSite(PhuocBinh)", "PhuocBinh(x) -> UNESCOHeritageSite(x))", "PhuocBinh is a UNESCO HeritageSite(PhuocBinh)"]}
{"id": "folio_train_2324", "nl": "Phuoc Binh is managed by the People's Committee.", "fol": "ManagedBy(PhuocBinh,PeoplesCommittee)", "prediction": ["all x y.((PhuocBinh(x) & PeoplesCommittee(y)) -> ManagedBy(x,y))", "(ManagedByPhuocBinh(PhuocBinh) & PeoplesCommittee(PhuocBinh))", "all x.(PhuocBinh(x) -> ManagedByPeoplesCommittee(x))", "All x.(PhuocBinh(x) -> ManagedByPeoplesCommittee(x))", "all x y.((PhuocBinh(x) & PeoplesComittee(y)) -> ManagedBy(x,y))", "all x.(PhuocBinh(x) -> ManagedByPeoplesComittee(x))", "Phuoc Binh is managed by PeoplesCommittee(PhuocBinh)", "all x.(PhuocBinh(x) -> ManagedByPeoplesCommittee(x))", "(ManagedByPhuocBinh(PhuocBinh) -> PeoplesCommittee(PhuocBinh))", "All x.(PhuocBinh(x) -> ManagedByPeoplesComittee(x))", "(ManagedByPhuocBinh(PhuocBinh) & PeoplesComittee(PhuocBinh))", "(ManagedByPhuocBinh(PhuocBinh) & PeoplesCommittee(PhuocBinh))", "(ManagedByPeoplesCommittee(PhuocBinh)", "All x.(PhuocBinh(x) -> ManagedByPeoplesCommittee(x))", "Phuoc Binh is managed by PeoplesComittee(PhuocBinh)", "PhuocBinh is managed by PeoplesCommittee(PhuocBinh)"]}
{"id": "folio_train_2325", "nl": "Greyhound racing is a competitive sport where spectators bet on greyhounds.", "fol": "all x.(IsGreyhoundRacing(x) -> exists y.(IsCompetitiveSport(x) & IsGreyhound(y) & SpectatorsBetOnEvent(x,y)))", "prediction": ["all x.(GreyhoundRacing(x) -> (CompetitiveSport(x) & spectatorsBetOnGreyhounds(x)))", "all x.(GreyhoundRacing(x) -> (CompetitiveSport(x) & SpectatorsBetOnGreyhounds(x)))", "all x.(GreyhoundRacing(x) -> (CompetitiveSport(x) & WatchersBetOnGreyhounds(x)))", "all x.(GreyhoundRacing(x) -> (CompetitiveSport(x) & exists y.(Greyhound(y) & BetOn(x,y)))))", "all x.(GreyhoundRacing(x) -> (CompetitiveSport(x) & spectatorsBetOnGreyhounds(x)))", "all x.(GreyhoundRacing(x) -> (CompetitiveSport(x) & WhereViewersBetOnGreyhounds(x)))", "all x.(GreyhoundRacing(x) -> (CompetitiveSport(x) & ObserversBetOnGreyhounds(x)))", "all x.(GreyhoundRacing(x) -> (CompetitiveSport(x) & WhereSpectatorsBetOnGreyhounds(x)))", "all x.(GreyhoundRacing(x) -> (CompetitiveSport(x) & exists y.(Greyhound(y) & BetsOn(x,y)))))", "all x.(GreyhoundRacing(x) -> (CompetitiveSport(x) & spectatorsBetOnGrayhounds(x)))", "all x.(GreyhoundRacing(x) -> (CompetitiveSport(x) & SpectatorsBetOnGreyhounds(x)))", "all x.(GreyhoundRacing(x) -> (CompetitiveSport(x) & SpectatorBetsOnGreyhounds(x)))", "all x.(GreyhoundRacing(x) -> (CompetitiveSport(x) & spectatorsBetOn(x,greyhounds)))", "all x.(GreyhoundRacing(x) -> (CompetitiveSport(x) & exists y.(Greyhound(y) & BetOn(y,x)))))", "all x y.((GreyhoundRacing(x) & Spectator(y)) -> BetOn(y,x))", "all x y.((GreyhoundRacing(x) & Spectator(y)) -> BetOn(y,x))"]}
{"id": "folio_train_2326", "nl": "Coursing is a part of Greyhound racing.", "fol": "all x.(IsCoursing(x) -> IsGreyhoundRacing(x))", "prediction": ["all x.(Courses(x) -> GreyhoundRacing(x))", "all x.(Coursing(x) -> GreyhoundRacing(x))", "all x y.((Courses(x) & GreyhoundRacing(y)) -> PartOf(x,y))", "all x.(Coursesing(x) -> GreyhoundRacing(x))", "all x y.((Coursing(x) & GreyhoundRacing(y)) -> PartOf(x,y))", "all x.(Coursing(x) -> GreyhoundRacing(x))", "all x y.((Courses(x) & Greyhound(y)) -> PartOfRacing(x,y))", "all x y.((Coursing(x) & GreyhoundRacing(y)) -> PartOf(x,y))", "all x y.((Coursing(x) & Greyhound(y)) -> PartOfRacing(x,y))", "all x.((Courses(x) & GreyhoundRacing(x)) -> PartOf(x,y))", "all x.((Coursesing(x) & GreyhoundRacing(x)) -> PartOf(x,y))", "all x.(Courses(x) -> PartOfGreyhoundRacing(x))", "all x y.((Courses(x) & Greyhound(y)) -> PartOf(x,y))", "all x.(Coursing(x) -> GreyhoundRacing(x))", "all x.(Courses(x) -> GreyhoundRacing(x))", "all x y.((Coursing(x) & Greyhound(y)) -> PartOf(x,y))"]}
{"id": "folio_train_2327", "nl": "Some competitive sports where spectators bet on things are banned.", "fol": "exists x y.(IsCompetitiveSport(x) & SpectatorsBetOnEvent(x,y) & IsBanned(x))", "prediction": ["exists x.(CompetitiveSport(x) & WhereSpectatorsBetOnThings(x))", "exists x.(CompetitiveSport(x) & WhereScientistsBetOnThings(x))", "exists x.(CompetitiveSport(x) & exists y.(Spectator(y) & BetsOn(y,x)))", "exists x.(CompetitiveSport(x) & WatchersBetOnThings(x))", "exists x.(CompetitiveSport(x) & InvolvesSpectatorsBetOnThings(x))", "exists x y.((CompetitiveSport(x) & Participant(y) & BetOn(y,x)) -> Banned(x))", "exists x.(CompetitiveSport(x) & WhereViewersBetOnThings(x))", "exists x.(CompetitiveSport(x) & exists y.(Spectator(y) & BetsOn(y,x)))", "exists x.(CompetitiveSport(x) & WatchersBetOn(x))", "exists x.(CompetitiveSport(x) & exists y.(Spectator(y) & BetOn(y,x)))", "exists x.(CompetitiveSport(x) & exists y.(Spectator(y) & BetOn(y,x)))", "exists x y.((CompetitiveSport(x) & Participant(y) & BetOn(y,x)) -> Bans(x))", "exists x y.((CompetitiveSport(x) & Participant(y) & BetOn(y,x)) -> Banned(x))", "exists x y.((CompetitiveSport(x) & Participant(y) & BetsOn(y,x)) -> Banned(x))", "exists x.(CompetitiveSport(x) & SpectatorBetsOn(x))", "exists x.(CompetitiveSport(x) & ObserversBetOnThings(x))"]}
{"id": "folio_train_2328", "nl": "Coursing involves spectators betting on a hare being pursued by greyhounds.", "fol": "exists x y z.(IsCoursing(x) & IsHare(y) & SpectatorsBetOnEvent(x,y) & IsGreyhound(z) & Pursues(z,y))", "prediction": ["all x y.((Courses(x) & Watcher(y)) -> BetsOnHare(y,x))", "all x y.((Coursing(x) & Watcher(y)) -> BetsOnHare(y,x))", "all x y z.((Coursing(x) & Observer(y) & Hare(z)) -> BetsOn(y,z))", "all x y z.((Coursing(x) & Watcher(y) & Hare(z)) -> BetsOn(y,z))", "all x y.((Courses(x) & Watcher(y) & BetsOnHare(y,x)) -> PursuedByGrayhounds(y,x))", "all x y.((Coursing(x) & Observer(y)) -> BetsOnHare(y,x))", "all x y.((Courses(x) & Observer(y)) -> BetsOnHare(y,x))", "all x y.((Courses(x) & Watcher(y) & BetsOnHare(y,x)) -> PursuedByGrayhounds(x))", "all x y.((Courses(x) & Watcher(y) & BetsOnHare(y,x)) -> PursuedByGrinhounds(y,x))", "all x y z.((Courses(x) & Watcher(y) & Hare(z)) -> BetsOn(y,z))", "all x y z.((Coursing(x) & Watcher(y) & Hare(z) & BetsOn(y,z)) -> PursuedByGrayhounds(y,z))", "all x y.((Coursing(x) & Watcher(y) & BetsOnHare(y,x)) -> PursuedByGrayhounds(y,x))", "all x y z.((Coursing(x) & Observer(y) & Hare(z) & BetsOn(y,z)) -> PursuedByGrayhounds(x))", "all x y z.((Coursing(x) & Watcher(y) & Hare(z) & BetsOn(y,z)) -> PursuedByGrayhounds(y,z))", "all x y z.((Coursing(x) & Observer(y) & Hare(z) & BetsOn(y,z)) -> PursuedByGrayhounds(y,z))", "all x y z.((Courses(x) & Watcher(y) & Hare(z) & BetsOn(y,z)) -> PursuedByGrayhounds(y,z))"]}
{"id": "folio_train_2329", "nl": "Hares are small game.", "fol": "all x.(IsHare(x) -> IsSmallGame(x))", "prediction": ["all x.(Hare(x) -> SmallGame(x))", "all x.(Hare(x) -> SmallGame(x))", "all x y.((Hare(x) & SmallGame(y)) -> SmallGame(x,y))", "all x y.((Hare(x) & SmallGame(y)) -> SmallGame(x))", "all x.(Hare(x) -> SmallGame(x))", "all x y.((Hare(x) & SmallGame(y)) -> Is(x,y))", "all x y.((Hare(x) & SmallGame(y)) -> (SmallGame(x) & SmallGame(x)))", "all x y.((Hare(x) & SmallGame(y)) -> (SmallGame(x) & SmallGame(y)))", "all x.(Hare(x) -> SmallGame(x))", "all x y.((Hare(x) & SmallGame(y)) -> Has(x,y))", "all x y.((Hare(x) & SmallGame(y)) -> (SmallGame(x,y) & SmallGame(x,y)))", "all x.(Horse(x) -> SmallGame(x))", "all x.(Hare(x) -> (SmallGame(x) & SmallGame(x)))", "all x y.((Hare(x) & SmallGame(y)) -> (SmallGame(x) & -SmallGame(x)))", "all x y.((Hare(x) & SmallGame(y)) -> (SmallGame(x) & SmallGame(x,y)))", "all x y.((Hare(x) & SmallGame(y)) -> (SmallGame(x) & -SmallGame(y)))"]}
{"id": "folio_train_2330", "nl": "If a competitive sport involves spectators betting on small game, then it is banned.", "fol": "all x.(exists y.(IsCompetitiveSport(x) & IsSmallGame(y) & SpectatorsBetOnEvent(x,y)) -> IsBanned(x))", "prediction": ["all x.((CompetitiveSport(x) & InvolvesStakeholdersBetweenSmallGame(x)) -> Ban(x))", "all x.((CompetitiveSport(x) & InvolvesStakeholdersBetweenSmallGame(x)) -> Banned(x))", "all x.((CompetitiveSport(x) & InvolvesSpectatorsBetweenSmallGame(x)) -> Ban(x))", "all x.((CompetitiveSport(x) & InvolvesSpectatorsBetweenSmallGame(x)) -> Banned(x))", "all x.((CompetitiveSport(x) & InvolvesStakeholdersBetweenSmallGames(x)) -> Banned(x))", "all x.((CompetitiveSport(x) & InvolvesStakeholdersBetweenSmallGames(x)) -> Ban(x))", "all x.((CompetitiveSport(x) & InvolvesSupportersBetweenSmallGame(x)) -> Ban(x))", "all x.((CompetitiveSport(x) & InvolvesSupportersBetweenSmallGame(x)) -> Banned(x))", "all x.((CompetitiveSport(x) & InvolvesSpectatorsBetweenSmallGames(x)) -> Banned(x))", "all x.((CompetitiveSport(x) & InvolvesStakeholdersBetweenSmallGame(x)) -> Bans(x))", "all x.((CompetitiveSport(x) & InvolvesObserversBetweenSmallGame(x)) -> Banned(x))", "all x.((CompetitiveSport(x) & InvolvesObserversBetweenSmallGame(x)) -> Ban(x))", "all x.((CompetitiveSport(x) & InvolvesStakeholdersBetweenSmallGame(x)) -> Banal(x))", "all x.((CompetitiveSport(x) & InvolvesStakeholdersBetweenSmallGames(x)) -> Bans(x))", "all x.((CompetitiveSport(x) & InvolvesScientistsBetweenSmallGame(x)) -> Ban(x))", "all x.((CompetitiveSport(x) & InvolvesStakeholdersBetweenSmallGames(x)) -> Banned(x))"]}
{"id": "folio_train_2331", "nl": "No coursing is banned.", "fol": "all x.(IsCoursing(x) -> -IsBanned(x))", "prediction": ["-exists x.(Coursing(x) & Banned(x))", "all x.(Courses(x) -> -Banned(x))", "all x.(Coursing(x) -> -Banned(x))", "all x.(Courses(x) -> -Ban(x))", "all x.(Coursing(x) -> -Ban(x))", "-exists x.(Coursing(x) & -Banned(x))", "-exists x.(Coursesing(x) & Banned(x))", "-exists x.(Coursing(x) & Ban(x))", "-BanishesCoursing(x)", "-exists x.(Coursing(x) & Bans(x))", "all x.(Cursing(x) -> -Banned(x))", "-exists x.(Coursing(x) & -Ban(x))", "All x.(Coursing(x) -> -Banned(x))", "all x.(Courses(x) -> -Banished(x))", "all x.(Coursing(x) -> -Banished(x))", "all x.(Cursing(x) -> -Ban(x))"]}
{"id": "folio_train_2332", "nl": "Greyhound racing is a competitive sport.", "fol": "all x.(IsGreyhoundRacing(x) -> IsCompetitiveSport(x))", "prediction": ["all x.(GreyhoundRacing(x) -> CompetitiveSport(x))", "all x.(Greyhound(x) -> CompetitiveSport(x))", "all x.(GreyhoundRacing(x) -> CompetitiveSport(x))", "all x.(GreyhoundRace(x) -> CompetitiveSport(x))", "all x.(GreyhoundRacing(x) -> CompetitiveSport(x))", "all x.(GrayhoundRacing(x) -> CompetitiveSport(x))", "all x.(GreyhoundRuning(x) -> CompetitiveSport(x))", "all x.(Greyhound(x) -> CompetitiveSport(x))", "all x y.((GreyhoundRacing(x) & CompetitiveSport(y)) -> Races(x,y))", "all x.(Greyhound(x) -> CompetitiveSport(x))", "all x y.((Greyhound(x) & Sport(y)) -> Competitive(x,y))", "all x.((GreyhoundRacing(x) & CompetitiveSport(x)) -> Races(x))", "all x.((Greyhound(x) & CompetitiveSport(x)) -> Races(x))", "all x.(Grayhound(x) -> CompetitiveSport(x))", "all x.(Greyhound(x) -> (CompetitiveSport(x) & Races(x)))", "all x.((GreyhoundRacing(x) & CompetitiveSport(x)) -> Race(x))"]}
{"id": "folio_train_2333", "nl": "If a soccer player receives two yellow cards in one game, this player will be ejected from the rest of the game.", "fol": "all x.((IsSoccerPlayer(x) & ReceivedTwoYellowCards(x)) -> EjectFromGame(x))", "prediction": ["all x.((SoccerPlayer(x) & ReceivesTwoYellowCards(x)) -> EjectedFromGame(x))", "all x.((SoccerPlayer(x) & ReceivesTwoYellowCardsInOneGame(x)) -> EjectedFromRestOfGame(x))", "all x.((SoccerPlayer(x) & ReceivesTwoYellowCardsInOneGame(x)) -> EjectedFromGame(x))", "all x.((SoccerPlayer(x) & ReceivesTwoYellowCards(x)) -> Ejected(x))", "all x.((SoccerPlayer(x) & ReceivesTwoYellowCards(x)) -> EjectedFromRestOfGame(x))", "all x.((SoccerPlayer(x) & ReceivesTwoYellowCards(x) & InGame(x)) -> EjectedFromGame(x))", "all x y z.((SoccerPlayer(x) & YellowCard(y) & Game(z) & ReceivesInOneGame(x,y,z)) -> EjectedFromGame(x,z))", "all x y.((SoccerPlayer(x) & SoccerPlayer(y) & ReceivesTwoYellowCards(x,y)) -> EjectedFromGame(y))", "all x y z.((SoccerPlayer(x) & YellowCard(y) & Game(z) & Receives(x,y,z)) -> EjectedFrom(x,z))", "all x.((SoccerPlayer(x) & ReceivesTwoYellowCards(x) & InOneGame(x)) -> EjectedFromRestOfGame(x))", "all x.((SoccerPlayer(x) & ReceivesTwoYellowCards(x) & Game(x)) -> Ejected(x))", "all x y.((SoccerPlayer(x) & SoccerPlayer(y) & ReceivesTwoYellowCards(x,y)) -> EjectedFromGame(x,y))", "all x.((SoccerPlayer(x) & ReceivesTwoYellowCards(x) & OneGame(x)) -> EjectedFromRestOfGame(x))", "all x y.((SoccerPlayer(x) & SoccerPlayer(y) & ReceivesTwoYellowCards(x,y)) -> EjectedFromGame(x))", "all x y z.((SoccerPlayer(x) & YellowCard(y) & Game(z) & Receives(x,y,z)) -> Ejected(x,z))", "all x y z.((SoccerPlayer(x) & YellowCard(y) & Game(z) & ReceivesInOneGame(x,y,z)) -> Ejected(x,z))"]}
{"id": "folio_train_2334", "nl": "If a soccer player receives one red card in one game, this player will be ejected from the rest of the game.", "fol": "all x.((IsSoccerPlayer(x) & ReceivedOneRedCard(x)) -> EjectFromGame(x))", "prediction": ["all x y z.((SoccerPlayer(x) & RedCard(y) & Game(z) & Receives(x,y,z)) -> EjectedFrom(x,z))", "all x y.((SoccerPlayer(x) & RedCard(y) & ReceivesInGame(x,y)) -> EjectedFromGame(x))", "all x y z.((SoccerPlayer(x) & RedCard(y) & Game(z) & ReceivesInOneGame(x,y,z)) -> EjectedFromGame(x,z))", "all x y z.((SoccerPlayer(x) & RedCard(y) & Game(z) & Receives(x,y)) -> Ejected(x,z))", "all x y z.((SoccerPlayer(x) & RedCard(y) & Game(z) & Receives(x,y)) -> EjectedFrom(x,z))", "all x y z.((SoccerPlayer(x) & RedCard(y) & Game(z) & Receives(x,y,z)) -> Ejected(x,z))", "all x y.((SoccerPlayer(x) & RedCard(y) & Receives(x,y)) -> EjectedFromGame(x))", "all x y z.((SoccerPlayer(x) & RedCard(y) & Game(z) & Receives(x,y) & InGame(x,z)) -> EjectedFromGame(x,z))", "all x y.((SoccerPlayer(x) & RedCard(y) & ReceivesInOneGame(x,y)) -> EjectedFromRestOfGame(x))", "all x y z.((SoccerPlayer(x) & RedCard(y) & Game(z) & ReceivesIn(x,y,z)) -> EjectedFrom(x,z))", "all x.((SoccerPlayer(x) & ReceivesOneRedCard(x) & OneGame(x)) -> EjectedFromRestOfGame(x))", "all x y z.((SoccerPlayer(x) & RedCard(y) & Game(z) & ReceivesInOneGame(x,y,z)) -> Ejected(x,z))", "all x y z.((SoccerPlayer(x) & RedCard(y) & Game(z) & Receives(x,y) & InGame(x,z)) -> Ejected(x))", "all x y z.((SoccerPlayer(x) & RedCard(y) & Game(z) & Receives(x,y) & InGame(x,z)) -> Ejected(x,z))", "all x y z.((SoccerPlayer(x) & RedCard(y) & Game(z) & Receives(x,y,z)) -> EjectedFromGame(x,z))", "all x y.((SoccerPlayer(x) & RedCard(y) & ReceivesInGame(x,y)) -> EjectedFromGame(x,y))"]}
{"id": "folio_train_2335", "nl": "Henry is a soccer player.", "fol": "IsSoccerPlayer(Henry)", "prediction": ["(SoccerPlayer(Henry)", "all x.((Henry(x) & SoccerPlayer(x)) -> Plays(x,y))", "all x.(Henry(x) -> SoccerPlayer(x))", "(SoccerPlayer(Henry) & -SoccerPlayer(Henry))", "((Henry(Henry) & SoccerPlayer(Henry)) -> Plays(Henry,Soccer))", "(SoccerPlayer(Henry) & Plays(Henry,Soccer))", "all x.((Henry(x) & SoccerPlayer(x)) -> Plays(x))", "all x.((Henry(x) & SoccerPlayer(x)) -> PlaysIn(x,y))", "all x.((Henry(x) & SoccerPlayer(x)) -> Is(x,y))", "(SoccerPlayer(Henry) & PlaysSoccer(Henry))", "all x.(SoccerPlayer(x) -> Henry(x))", "all x.((Henry(x) & SoccerPlayer(x)) -> CanPlay(x))", "(SoccerPlayer(Henry) | SoccerPlayer(Henry)))", "((Henry(Henry) & SoccerPlayer(Henry)) -> Plays(Henry))", "all x.((Henry(x) & SoccerPlayer(x)) -> Has(x,y))", "all x.((Henry(x) & SoccerPlayer(x)) -> PlayedBy(x,y))"]}
{"id": "folio_train_2336", "nl": "In one game, Henry first receives one yellow card, then he receives one red card.", "fol": "(-ReceivedTwoYellowCards(Henry) & ReceivedOneRedCard(Henry))", "prediction": ["all x y.((Game(x) & Henry(y)) -> (ReceivesYellowCard(y,x) & ReceivesRedCard(y,x)))", "all x y.((Game(x) & Henry(y)) -> (ReceivesYellowCard(y,x) & ReceivesRedCard(y,x)))", "all x y z.((Game(x) & YellowCard(y) & RedCard(z)) -> (Receives(x,y) & Receives(x,z)))", "all x y.((Game(x) & Henry(y)) -> (ReceivesYellowCard(y,x) & ReceivesReceivesRedCard(y,x)))", "all x y z.((Game(x) & YellowCard(y) & RedCard(z)) -> (Receives(x,y) & Receives(x,z)))", "all x.((Game(x) & Henry(x)) -> (ReceivesYellowCard(x) & ReceivesRedCard(x)))", "all x y.((Game(x) & Henry(y)) -> (ReceivesOneYellowCard(y,x) & ReceivesOneRedCard(y,x)))", "all x y.((Game(x) & Game(y)) -> (ReceivesYellowCard(x,y) & ReceivesRedCard(x,y)))", "all x y.((Game(x) & Game(y)) -> (ReceivesYellowCard(x,y) & ReceivesReceivesRedCard(x,y)))", "all x.((Game(x) & Henry(x)) -> (ReceivesYellowCard(x) & ReceivesRedCard(x)))", "all x y.((Game(x) & Henry(y)) -> (ReceivesOneYellowCard(y,x) & ReceivesOneRedCard(y,x)))", "all x y.((Game(x) & Henry(y)) -> (ReceivesYellowCard(y) & ReceivesReceivesRedCard(y)))", "all x y z.((Game(x) & Henry(y) & Card(z)) -> (ReceivesYellow(y,z) & ReceivesRed(y,z)))", "all x y.((Game(x) & Henry(y)) -> (ReceivesYellowCard(y) & ReceivesRedCard(y)))", "all x y.((Game(x) & Henry(y) & ReceivesYellowCard(y,x)) -> ReceivesRedCard(y,x))", "all x y z.((Game(x) & YellowCard(y) & RedCard(z)) -> (Receives(x,y) | Receives(x,z)))"]}
{"id": "folio_train_2337", "nl": "Henry will be ejected from the rest of the game.", "fol": "EjectFromGame(Henry)", "prediction": ["all x.((Henry(x) & RestOfGame(x)) -> Ejected(x))", "all x y.((Henry(x) & Game(y)) -> EjectedFrom(x,y))", "all x.(Henry(x) -> EjectedFromGame(x))", "all x.((Henry(x) & RestOfGame(x)) -> EjectedFrom(x,y))", "all x.((Henry(x) & RestOfGame(x)) -> EjectedFrom(x,Henry))", "all x.((Henry(x) & RestOfGame(x)) -> EjectedFrom(x))", "all x y.((Henry(x) & Game(y)) -> Ejected(x,y))", "all x y z.((Henry(x) & Game(y) & Game(z)) -> EjectedFrom(x,y,z))", "all x y.((Henry(x) & RestOfGame(y)) -> EjectedFrom(x,y))", "all x.(Henry(x) -> EjectedFromRestOfGame(x))", "all x.((Henry(x) & Game(y)) -> EjectedFrom(x,y))", "all x y.((Henry(x) & RestOfGame(y)) -> Ejected(x,y))", "all x.((Henry(x) & RestOfGame(x)) -> EjectedFrom(x,h))", "all x y z.((Henry(x) & Game(y) & Game(z)) -> Ejected(x,y,z))", "all x.((Henry(x) & RestOfGame(y)) -> EjectedFrom(x,y))", "all x.((Henry(x) & RestOfGame(x)) -> EjectedFromGame(x))"]}
{"id": "folio_train_2338", "nl": "Henry will not be ejected from the rest of the game.", "fol": "-EjectFromGame(Henry)", "prediction": ["all x.(Henry(x) -> -EjectedFromGame(x))", "all x.((Henry(x) & RestOfGame(x)) -> -Ejected(x))", "all x.(Henry(x) -> -EjectedFromRestOfGame(x))", "all x y.((Henry(x) & Game(y)) -> -Ejected(x,y))", "all x y.((Henry(x) & Game(y)) -> -EjectedFrom(x,y))", "all x.((Henry(x) & RestOfGame(x)) -> -EjectedFrom(x,Henry))", "all x.(Henry(x) -> -Ejected(x))", "all x y.((Henry(x) & RestOfGame(y)) -> -Ejected(x,y))", "all x.((Henry(x) & RestOfGame(x)) -> -EjectedFromGame(x))", "all x y.((Henry(x) & RestOfGame(y)) -> -EjectedFrom(x,y))", "all x.((Henry(x) & RestOfGame(x)) -> -EjectedFrom(x,y))", "all x.((Henry(x) & Game(y)) -> -EjectedFrom(x,y))", "all x.((Henry(x) & Game(y)) -> -Ejected(x,y))", "all x.(Henry(x) -> -EjectedFromRemainingGame(x))", "all x.((Henry(x) & RestOfGame(x)) -> -EjectedFrom(x))", "((Henry(Henry) & RestOfGame(Henry)) -> -Ejected(Henry))"]}
{"id": "folio_train_2339", "nl": "All trees are plants. ", "fol": "all x.(IsTree(x) -> IsPlant(x))", "prediction": ["all x.(Tree(x) -> Plant(x))", "all x y.((Tree(x) & Plant(y)) -> Plant(x))", "all x.(Tree(x) -> Plant(x))", "all x.exists y.(Tree(x) & Plant(y) & GrowsIn(x,y))", "all x.exists y.(Tree(x) & Plant(y) & LocatedIn(x,y))", "all x.exists y.(Tree(x) & Plant(y) & GrowsOn(x,y))", "all x.exists y.(Tree(x) & Plant(y) & DesignedFor(x,y))", "all x.exists y.(Tree(x) & Plant(y) & Produces(x,y))", "exists x.(Tree(x) & Plant(x))", "all x y.((Tree(x) & Plant(y)) -> Plant(x,y))", "all x.exists y.(Tree(x) & Plant(y) & Plant(x,y))", "(all x.(Tree(x) -> Plant(x)))", "all x.exists y.(Tree(x) & Plant(y) & Plant(y))", "all x.exists y.(Tree(x) & Plant(y) & In(x,y))", "all x.exists y.(Tree(x) & Plant(y))", "all x y.((Tree(x) & Plant(y)) -> Is(x,y))"]}
{"id": "folio_train_2340", "nl": "Some living things are trees.", "fol": "exists x.(IsLivingThing(x) & IsTree(x))", "prediction": ["exists x.(LivingThing(x) & Tree(x))", "exists x.(Living(x) & Tree(x))", "exists x.(LivingTree(x) & Tree(x))", "exists x.(LivingIndividual(x) & Tree(x))", "exists x y.(LivingThing(x) & Tree(y))", "exists x.(LivingDog(x) & Tree(x))", "exists x.(LivingGood(x) & Tree(x))", "exists x.(LivingCreature(x) & Tree(x))", "exists x.(LivingDing(x) & Tree(x))", "exists x.(LivingThing(x) & Tree(x))", "exists x.(LivedThing(x) & Tree(x))", "exist x.(LivingThing(x) & Tree(x))", "exists x.(LivingIssue(x) & Tree(x))", "exists x.(LivingItem(x) & Tree(x))", "exists x.(LivingToy(x) & Tree(x))", "exists x.(Life(x) & Tree(x))"]}
{"id": "folio_train_2341", "nl": "Some living things are plants.", "fol": "exists x.(IsLivingThing(x) & IsPlant(x))", "prediction": ["exists x.(LivingThing(x) & Plant(x))", "exists x.(Living(x) & Plant(x))", "exists x.(LivingTree(x) & Plant(x))", "exists x y.(LivingThing(x) & Plant(y))", "exists x.(LivingGood(x) & Plant(x))", "exists x.(LivingIndividual(x) & Plant(x))", "exists x.(LivingCreature(x) & Plant(x))", "exists x.(LivingDog(x) & Plant(x))", "exists x.(LivingThing(x) & Plant(x))", "exists x.(LivingThing(x) & -Plant(x))", "exists x.(LivingDing(x) & Plant(x))", "exists x.(Plant(x) & LivingThing(x))", "exists x.(LivingGirl(x) & Plant(x))", "exists x.(LivedThing(x) & Plant(x))", "exists x.(LivingMatter(x) & Plant(x))", "exists x.(Life(x) & Plant(x))"]}
{"id": "folio_train_2342", "nl": "Dagfinn is a given name.", "fol": "all x.(IsGivenNameDagfinn(x) -> IsGivenName(x))", "prediction": ["all x.(Dagfinn(x) -> GivenName(x))", "exists x.(Dagfinn(x) & GivenName(x))", "all x.(Dagfinn(x) -> GivenName(x))", "All x.(Dagfinn(x) -> GivenName(x))", "all x y.((Dagfinn(x) & Name(y)) -> Given(x,y))", "all x y.((Dagfinn(x) & Name(y)) -> GivenName(x,y))", "all x.(Dagfinn(x) -> GivenName(x))", "all x.(Dagfinn(x) -> GivenNumber(x))", "all x y.((Dagfinn(x) & GivenName(y)) -> GivenName(x,y))", "all x y.((Dagfinn(x) & GivenName(y)) -> Is(x,y))", "all x y.((Dagfinn(x) & GivenName(y)) -> Dagfinn(x))", "all x.(DagFinn(x) -> GivenName(x))", "all x y.((Dagfinn(x) & GivenName(y)) -> GivenName(x,y))", "all x.(Dagafinn(x) -> GivenName(x))", "all x.(DAGFINN(x) -> GivenName(x))", "all x y.((Dagfinn(x) & Name(y)) -> GivenName(x))"]}
{"id": "folio_train_2343", "nl": "Notable people with the given name include Dagfinn Aarskog, Dagfinn Bakke and Dagfinn Dahl. ", "fol": "(IsGivenNameDagfinn(DagfinnAarskog) & IsNotablePerson(DagfinnAarskog) & IsGivenNameDagfinn(DagfinnBakke) & IsNotablePerson(DagfinnBakke) & IsGivenNameDagfinn(DagfinnDahl) & IsNotablePerson(DagfinnDahl))", "prediction": ["all x.((Person(x) & GivenName(x)) -> (DagfinnAarskog(x) | DagfinnBakke(x) | DagfinnDalm(x)))", "all x.((Person(x) & GivenName(x)) -> (DagfinnAarskog(x) | DagfinnBakke(x) | DagfinnDallas(x)))", "(NotablePerson(x) & GivenName(x)) -> (DagfinnAarskog(x) | DagfinnBakke(x) | DagfinnDalm(x)))", "(NotablePerson(x) & GivenName(x)) -> (DagfinnAarskog(x) | DagfinnBakke(x) | DagfinnDallas(x)))", "all x.((Person(x) & GivenName(x)) -> (DagfinnAarskog(x) | DagfinnBakke(x) | DagfinnDalman(x)))", "all x.((Person(x) & GivenName(x)) -> (DagfinnAarskog(x) | DagfinnBakke(x) | DagfinnDal(x)))", "all x.((Person(x) & GivenName(x)) -> (DagfinnAarskog(x) | DagfinnBakke(x) | DagfinnDahl(x)))", "all x.((Person(x) & GivenName(x)) -> (DagfinnAarskog(x) | DagfinnBakke(x) | DagfinnDalh(x)))", "all x.((Person(x) & GivenName(x)) -> (DagfinnAarskog(x) | DagfinnBakke(x) | DagfinnDalley(x)))", "all x.((Person(x) & GivenName(x)) -> (DagfinnAarskog(x) | DagfinnBakke(x) | DagfinnDadl(x)))", "all x.((Person(x) & GivenName(x)) -> (DagfinnAarskog(x) | DagfinnBakke(x) | DagfinnDal.(dal))))", "all x.((Person(x) & GivenName(x)) -> (DagfinnAarskog(x) | DagfinnBakke(x) | DagfinnDal.(x))))", "(NotablePerson(s) & GivenName(s) & DagfinnAarskog(s) & DagfinnBakke(s) & DagfinnDallas(s))", "all x.((Person(x) & GivenName(x)) -> (DagfinnAarskog(x) | DagfinnBakke(x) | DagfinnDawl(x)))", "(NotablePerson(DagfinnAarskog) & NotablePerson(DagfinnBakke) & NotablePerson(DagfinnDallas))", "all x.((Person(x) & GivenName(x)) -> (DagfinnAarskog(x) | DagfinnBakke(x) | DagfinnDal.(DagfinnDal))))"]}
{"id": "folio_train_2344", "nl": "Dagfinn Aarskog is a Norwegian physician.", "fol": "(IsNorwegian(DagfinnAarskog) & IsPhysician(DagfinnAarskog))", "prediction": ["Dagfinn Aarskog (NorwegianPharmacist)", "DagfinnAarskog (NorwegianPharmacist)", "all x.(DagfinnAarskog(x) -> NorwegianPharmacist(x))", "all x.((Doctor(x) & DagfinnAarskog(x)) -> Norwegian(x))", "(NorwegianPhDagfinnAarskog(Dagfinn) & Physician(Dagfinn))", "(NorwegianPharmacist(DagfinnAarskog) & NorwegianPharmacist(DagfinnAarskog))", "all x.((DagfinnAarskog(x) & NorwegianPharmacist(x)) -> Doctor(x))", "all x.((Doctor(x) & DagfinnAarskog(x)) -> NorwegianPharmacist(x))", "all x.((DagfinnAarskog(x) & NorwegianPharmacist(x)) -> Physician(x))", "DagfinnAarskog is a NorwegianPharmacist(DagfinnAarskog)", "(NorwegianPhDagfinnAarskog(Dagfinn) & Doctor(Dagfinn))", "Dagfinn Aarskog (NorwegianPhDagfinn))", "all x.((DagfinnAarskog(x) & NorwegianPharmacist(x)) -> Dr.Aarskog(x))", "all x.((DagfinnAarskog(x) & NorwegianPharmacist(x)) -> Aarskog(x))", "(NorwegianPhDagfinnAarskog(Dagfinn) & Physician(Aarskog))", "all x.(DagfinnAarskog(x) -> NorwegianDoctor(x))"]}
{"id": "folio_train_2345", "nl": "Dagfinn Dahl is a Norwegian barrister.", "fol": "(IsNorwegian(DagfinnDahl) & IsBarrister(DagfinnDahl))", "prediction": ["Dagfinn Dahl (NorwegianBarrister)", "all x.((DagfinnDalf(x) & NorwegianBarrister(x)) -> Barrister(x))", "all x.(DagfinnDallas(x) -> NorwegianBarrister(x))", "Dagfinn Dahl (norwegianBarrister)", "all x.(DagfinnDalf(x) -> NorwegianBarrister(x))", "Dagfinn Dahl is a Norwegian Barrister.", "all x.(Dagfinn Dahl(x) -> NorwegianBarrister(x))", "(NorwegianBarrister(Dagfinn Dahl))", "Dagfinn Dahl is NorwegianBarrister(Dagfinn(Dagfinn) & Barrister(Dagfinn) & Barrister(Dagfinn))", "(NorwegianBarrister(Dagfinn Dahl) & FoundedIn(Dagfinn,Norwegian) & FoundedIn(Dagfinn,Norwegian))", "Dagfinn Dahl is NorwegianBarrister.", "Dagfinn Dahl is NorwegianBarrister(Dagfinn(Dag) & Barrister(Dag) & Barrister(Dag) & Barrister(Dag))", "(NorwegianBarrister(Dagfinn Dahl) & BornInNorway(Dagfinn(Dagfinn) & BornInNorway(Dagfinn))", "Dagfinn Dahl is NorwegianBarrister(Dagfinn(Dag) & Barrister(Dag) & Barrister(Dag))", "Dagfinn Dahl is NorwegianBarrister(Dagfinn(Dagfinn) & Barrister(Dagfinn))", "(NorwegianBarrister(Dagfinn Dahl) & Barrister(Dagfinn))"]}
{"id": "folio_train_2346", "nl": "Dagfinn Aarskog is a notable person.", "fol": "IsNotablePerson(DagfinnAarskog)", "prediction": ["all x.(DagfinnAarskog(x) -> NotablePerson(x))", "all x.((DagfinnAarskog(x) & NotablePerson(x)) -> DagfinnAarskog(x))", "DagfinnAarskog (Person(Dagfinn) & Notable(Dagfinn))", "all x.((DagfinnAarskog(x) & NotablePerson(x)) -> Aarskog(x))", "(Notable(DagfinnAarskog) -> Notable(DagfinnAarskog))", "Dagfinn Aarskog (Person(Dagfinn) & Notable(Dagfinn))", "all x.((DagfinnAarskog(x) & Notable(x)) -> Aarskog(x))", "(Notable(DagfinnAarskog) & Person(DagfinnAarskog))", "DagfinnAarskog is a notablePerson(DagfinnAarskog)", "all x.((DagfinnAarskog(x) & Notable(x)) -> DagfinnAarskog(x))", "DagfinnAarskog is a notablePerson(x)", "all x.(DagfinnAarskog(x) -> Notable(x))", "all x.((DagfinnAarskog(x) & NotablePerson(x)) -> NotablePerson(x))", "all x.(DagfinnAarskog(x) -> NoteworthyPerson(x))", "all x.((DagfinnAarskog(x) & Notable(x)) -> Person(x))", "all x.(DagfinnAarskog(x) -> NoteablePerson(x))"]}
{"id": "folio_train_2347", "nl": "Dagfinn is Dagfinn Aarskog's given name.", "fol": "IsGivenNameDagfinn(DagfinnAarskog)", "prediction": ["all x.(Dagfinn(x) -> DagfinnAarskog(x))", "Dagfinn (Dagfinn) & DagfinnAarskog(Dagfinn))", "All x.(Dagfinn(x) -> DagfinnAarskog(x))", "all x.(Dagfinn(x) -> GivenName(x,DagfinnAarskog))", "Dagfinn Aarskog's GivenName(Dagfinn)", "Dagfinn is DagfinnAarskog's GivenName(Dagfinn)", "Dagfinn is Dagfinn Aarskog's GivenName(x))", "Dagfinn is Dagfinn Aarskog's GivenName(Dagfinn)", "Dagfinn is DagfinnAarskog's GivenName(x))", "Dagfinn is Dagfinn Aarskog's GivenName.", "Dagfinn is DagfinnAarskog's GivenName(Dagfinn))", "Dagfinn is DagfinnAarskog's GivenName.", "Dagfinn is Dagfinn Aarskog's GivenName(Dagfinn))", "Dagfinn is DagfinnAarskogsgivenName(Dagfinn)", "Dagfinn is DagfinnAarskog's givenName(x))", "DagfinnAarskog(Dagfinn)"]}
{"id": "folio_train_2348", "nl": "Dagfinn Dahl is a Norwegian physician.", "fol": "(IsNorwegian(DagfinnDahl) & IsPhysician(DagfinnDahl))", "prediction": ["Dagfinn Dahl (NorwegianPharmacist)", "Dagfinn Dahl (NorwegianPharmacist(Dagfinn))", "all x.(Dagfinn Dahl(x) -> NorwegianPharmacist(x))", "Dagfinn Dahl (norwegianPharmacist)", "Dagfinn Dahl (NorwegianPharmacist(Dagfinn) & -NorwegianPharmacist(Dagfinn))", "Dagfinn Dahl (NorwegianPhysician)", "Dagfinn Dahl (NorwegianPharmacist(Dagfinn) & Doctor(Dagfinn))", "Dagfinn Dahl (NorwegianPharmacist(Dagfinn) & Physician(Dagfinn))", "Dagfinn Dahl is a NorwegianPharmacist(Dagfinn(Dag))", "Dagfinn Dahl is a NorwegianPharmacist(Dagfinn(Dagfinn) & Doctor(Dagfinn))", "Dagfinn Dahl is a NorwegianPharmacist(Dagfinn(Dagfinn) & Physician(Dagfinn))", "Dagfinn Dahl is a NorwegianPharmacist(Dagfinn(Dagfinn))", "Dagfinn Dahl (NorwegianPharmacist(Dagfinn) & BornIn(Dagfinn))", "Dagfinn Dahl is NorwegianPharmacist(Dagfinn(Dagfinn) & Physician(Dagfinn))", "Dagfinn Dahl is NorwegianPharmacist(Dagfinn(Dagfinn) & Doctor(Dagfinn))", "Dagfinn Dahl (NorwegianPharmacist(Dagfinn) & BornIn(Dagfinn,Dagfinn))"]}
{"id": "folio_train_2349", "nl": "If entertainment is interesting, it will be popular.", "fol": "all x.((IsEntertainment(x) & IsInteresting(x)) -> IsPopular(x))", "prediction": ["all x.((Entertainment(x) & Interesting(x)) -> Popular(x))", "all x.((InterestingEntertainment(x) & Popular(x)) -> Interesting(x))", "all x.(InterestingEntertainment(x) -> Popular(x))", "all x.((InterestingEntertainment(x) & Popular(x)) -> Popular(x))", "all x.((Interesting(x) & Popular(x)) -> Interesting(x))", "all x.((Entertainment(x) & Interesting(x)) -> Popular(x))", "all x.((Interesting(x) & Popular(x)) -> InterestingEntertainment(x))", "all x.((InterestingEntertainment(x) & Popular(x)) -> Interesting(x))", "all x y.((Entertainment(x) & Interesting(x)) -> Popular(y))", "all x.((Interesting(x) & Popular(x)) -> Popular(x))", "all x.((Entertainment(x) & Interesting(x)) -> Popular(x))", "all x.((InterestingEntertainment(x) & Popular(x)) -> Interesting(x))", "all x.((InterestingEntertainment(x) & Popular(x)) -> Interesting(x))", "all x.((IntriguingEntertainment(x) & Popular(x)) -> Interesting(x))", "all x.((InterestingEntertainment(x) & Popular(x)) -> Intriguing(x))", "all x.(IntriguingEntertainment(x) -> Popular(x))"]}
{"id": "folio_train_2350", "nl": "All popular things are well-known.", "fol": "all x.(IsPopular(x) -> IsWellKnown(x))", "prediction": ["all x.(PopularThing(x) -> WellKnown(x))", "all x.(PopularThing(x) -> WellKnown(x))", "all x.(Popular(x) -> WellKnown(x))", "all x.(PopularTen(x) -> WellKnown(x))", "all x y.((PopularThing(x) & Popular(y)) -> WellKnown(x))", "all x.(PopularTask(x) -> WellKnown(x))", "all x y.((PopularThing(x) & PopularThing(y)) -> WellKnown(x))", "all x.(PopularTend(x) -> WellKnown(x))", "all x.((PopularThing(x) & WellKnown(x)) -> Popular(x))", "all x y.((PopularThing(x) & PopularThing(y)) -> WellKnown(x,y))", "all x y.((PopularThing(x) & Popular(y)) -> WellKnown(x,y))", "all x.(PopularThan(x) -> WellKnown(x))", "all x.(PopularTief(x) -> WellKnown(x))", "all x.(PopularTea(x) -> WellKnown(x))", "all x.((PopularThing(x) & WellKnown(x)) -> PopularThing(x))", "exists x.(PopularThing(x) & WellKnown(x))"]}
{"id": "folio_train_2351", "nl": "If entertainment is interesting, it will be well-known.", "fol": "all x.((IsEntertainment(x) & IsInteresting(x)) -> IsWellKnown(x))", "prediction": ["all x.((Entertainment(x) & Interesting(x)) -> WellKnown(x))", "all x.(InterestingEntertainment(x) -> WellKnown(x))", "all x.((InterestingEntertainment(x) & WellKnown(x)) -> Interesting(x))", "all x.((Entertainment(x) & Interesting(x)) -> WellKnown(x))", "all x.(Interesting(x) -> WellKnown(x))", "all x.(InterestingEntertainment(x) -> WellKnown(x))", "all x.((Interesting(x) & WellKnown(x)) -> Interesting(x))", "all x y.((Entertainment(x) & Interesting(x)) -> WellKnown(y))", "all x.((Entertainment(x) & Interesting(x)) -> WellKnown(x))", "all x.(IntriguingEntertainment(x) -> WellKnown(x))", "all x.((InterestingEntertainment(x) & WellKnown(x)) -> Interesting(x))", "all x.(InterestingEntertainment(x) -> WellKnown(x))", "all x.((Entertainment(x) & Interesting(x)) -> WellKnown(x))", "all x y.((Entertainment(x) & Interesting(x)) -> WellKnown(x))", "all x.((InterestingEntertainment(x)) -> WellKnown(x))", "all x.((Entertainment(x) & Interesting(x)) -> Wellknown(x))"]}
{"id": "folio_train_2352", "nl": "It is not true that some giant language models do not have good performance. ", "fol": "-exists x.(IsLanguageModel(x) & IsGiantLanguageModel(x) & -HasGoodPerformance(x))", "prediction": ["exists x.(GiantLanguageModel(x) & -GoodPerformance(x))", "exists x.(LanguageModel(x) & -GoodPerformance(x))", "all x.((GiantLanguageModel(x) & -GoodPerformance(x)) -> -GiantLanguageModel(x))", "-exists x.(GiantLanguageModel(x) & -GoodPerformance(x))", "(-exists x.(GiantLanguageModel(x) & -GoodPerformance(x)))", "all x.(GiantLanguageModel(x) -> -GoodPerformance(x))", "all x.((LanguageModel(x) & Giant(x)) -> -GoodPerformance(x))", "(-exists x.(LanguageModel(x) & Giant(x)) & -GoodPerformance(x))", "-all x.((GiantLanguageModel(x) & -GoodPerformance(x)) -> -GiantLanguageModel(x))", "all x.((GiantLanguageModel(x) & -GoodPerformance(x)) -> -GiantPerformance(x))", "(-all x.(GiantLanguageModel(x) -> -GoodPerformance(x)))", "-exists x.(LanguageModel(x) & Giant(x) & -GoodPerformance(x))", "all x.((GiantLanguageModel(x) & -GoodPerformance(x)) -> -True(x))", "all x y.((GiantLanguageModel(x) & LanguageModel(y)) -> -GoodPerformance(x,y))", "all x.((GiantLanguageModel(x) & -GoodPerformance(x)) -> -Giant(x))", "-(GiantLanguageModel(x) & -GoodPerformance(x)))"]}
{"id": "folio_train_2353", "nl": "All language models with good performance are used by some researchers.", "fol": "all x.((IsLanguageModel(x) & HasGoodPerformance(x)) -> IsUsedByResearchers(x))", "prediction": ["all x.((LanguageModel(x) & GoodPerformance(x)) -> UsedByResearchers(x))", "exists x.(LanguageModel(x) & GoodPerformance(x) & UsedByResearchers(x))", "all x.((LanguageModel(x) & GoodPerformance(x)) -> UsedByResearcher(x))", "exists x.(LanguageModel(x) & GoodPerformance(x))", "all x y.((LanguageModel(x) & GoodPerformance(x)) -> UsedByResearchers(y))", "all x.((LanguageModel(x) & GoodPerformance(x)) -> UsedByResearchers(x))", "all x y.((LanguageModel(x) & Researcher(y) & GoodPerformance(x)) -> UsedBy(y,x))", "all x.((LanguageModel(x) & GoodPerformance(x)) -> UsedBySomeResearchers(x))", "all x y.((LanguageModel(x) & LanguageModel(y) & GoodPerformance(x)) -> UsedByResearchers(x))", "all x y.((LanguageModel(x) & LanguageModel(y) & GoodPerformance(x)) -> UsedByResearchers(x,y))", "(all x.((LanguageModel(x) & GoodPerformance(x)) -> UsedByResearchers(x))", "all x y.((LanguageModel(x) & LanguageModel(y) & GoodPerformance(x)) -> UsedByResearchers(y))", "all x.((LanguageModel(x) & GoodPerformance(x)) -> UsedBy(x))", "exists x.((LanguageModel(x) & GoodPerformance(x)) -> UsedByResearchers(x))", "all x y.((LanguageModel(x) & Researcher(y) & GoodPerformance(x)) -> UsedBy(x,y))", "exists x.(LanguageModel(x) & GoodPerformance(x) & UsedByResearcher(x))"]}
{"id": "folio_train_2354", "nl": "If a language model is used by some researchers, it is popular. ", "fol": "all x.(IsUsedByResearchers(x) -> IsPopular(x))", "prediction": ["all x.((LanguageModel(x) & UsedByResearchers(x)) -> Popular(x))", "all x y.((LanguageModel(x) & Researcher(y) & UsedBy(x,y)) -> Popular(x))", "all x y.((LanguageModel(x) & Researcher(y) & Uses(x,y)) -> Popular(x))", "all x y.((LanguageModel(x) & Researcher(y) & UsedBy(x,y)) -> Popular(x))", "all x y.((LanguageModel(x) & Researcher(y) & UsedBy(x,y)) -> Popular(y))", "all x y.((LanguageModel(x) & UsedByResearchers(x)) -> Popular(y))", "all x y.((LanguageModel(x) & UsedByResearchers(x)) -> Popular(x))", "all x.((LanguageModel(x) & UsedBySomeResearchers(x)) -> Popular(x))", "all x y.((LanguageModel(x) & Researchers(y) & UsedBy(x,y)) -> Popular(x))", "all x y z.((LanguageModel(x) & Researcher(y) & UsedBy(x,y)) -> Popular(x))", "all x y.((LanguageModel(x) & UsedByResearchers(x,y)) -> Popular(x))", "all x.((LanguageModel(x) & UsedByResearchers(x)) -> Popular(x))", "all x y.((LanguageModel(x) & Researcher(y) & UsedBy(x,y)) -> Popular(x,y))", "all x y.((LanguageModel(x) & Researcher(y) & UsedBy(y,x)) -> Popular(x))", "all x y.((LanguageModel(x) & Researcher(y) & Uses(y,x)) -> Popular(x))", "all x y.((LanguageModel(x) & UsedBy(x,y)) -> Popular(x))"]}
{"id": "folio_train_2355", "nl": "If BERT is a giant language model, then GPT-3 is also a giant language model. ", "fol": "((IsLanguageModel(Bert) & IsGiantLanguageModel(Bert)) -> (IsLanguageModel(Gpt3) & IsGiantLanguageModel(Gpt3)))", "prediction": ["all x.((BERT(x) & GiantLanguageModel(x)) -> GiantLanguageModel(x))", "all x.((GiantLanguageModel(x) & BERT(x)) -> GiantLanguageModel(x))", "all x.((BERT(x) & GPT3(x)) -> GiantLanguageModel(x))", "all x.((BERT(x) & GPT-3(x)) -> GiantLanguageModel(x))", "all x.((BERT(x) & GiantLanguage(x)) -> GiantLanguageModel(x))", "all x.(GiantLanguageModel(x) -> GiantLanguageModel(x))", "all x.((BERT(x) & GiantLanguageModel(x)) -> GPT-3(x))", "all x.(GiantLanguageModel(x) -> (GiantLanguageModel(x) & GPT-3(x)))", "all x.((BERT(x) -> GiantLanguageModel(x)) -> GiantLanguageModel(x))", "all x.(GiantLanguageModel(x) -> (BERT(x) & GPT3(x)))", "all x.(GiantLanguageModel(x) -> (BERT(x) | GPT3(x)))", "all x y.((BERT(x) & GPT-3(y)) -> GiantLanguageModel(x))", "all x.(GiantLanguageModel(x) -> (BERT(x) & GPT-3(x)))", "all x y.((BERT(x) & GPT3(y)) -> GiantLanguageModel(x))", "all x.((BERT(x) & GiantLanguageModel(x)) -> GiantLanguageModel(x,y))", "all x y.((BERT(x) & GPT3(y)) -> GiantLanguageModel(x,y))"]}
{"id": "folio_train_2356", "nl": "BERT is a giant language model. ", "fol": "(IsLanguageModel(Bert) & IsGiantLanguageModel(Bert))", "prediction": ["all x.(BERT(x) -> GiantLanguageModel(x))", "all x.((BERT(x) & GiantLanguageModel(x)) -> LanguageModel(x))", "all x y.((BERT(x) & LanguageModel(y)) -> Giant(x,y))", "ALL x.(BERT(x) -> GiantLanguageModel(x))", "exists x.(BERT(x) & GiantLanguageModel(x))", "all x.((BERT(x) & GiantLanguageModel(x)) -> (LanguageModel(x) & LanguageModel(x)))", "all x.(BERT(x) -> GiantLanguageModel(x))", "all x y.((BERT(x) & LanguageModel(y)) -> Giant(x))", "(GiantLanguageModel(BERT) -> GiantLanguageModel(BERT))", "all x.((BERT(x) & GiantLanguageModel(x)) -> Model(x))", "all x.((BERT(x) & GiantLanguageModel(x)) -> (LanguageModel(x) | LanguageModel(x)))", "(GiantLanguageModel(BERT) & GiantLanguageModel(BERT))", "all x.((BERT(x) & GiantLanguageModel(x)) -> Language(x))", "all x.((BERT(x) & GiantLanguageModel(x)) -> HasLanguageModel(x))", "(GiantLanguageModel(BERT))", "all x.((BERT(x) & GiantLanguageModel(x)) -> GreatLanguageModel(x))"]}
{"id": "folio_train_2357", "nl": "GPT-3 is popular.", "fol": "IsPopular(Gpt3)", "prediction": ["all x.(GPT-3(x) -> Popular(x))", "(Popular(GPT3))", "all x.(GPT3(x) -> Popular(x))", "All x.(GPT-3(x) -> Popular(x))", "all x.((GPT-3(x) & Popular(x)) -> Popular(x))", "all x.(GPT-3(x) -> Popular(x))", "All x.(GPT3(x) -> Popular(x))", "all x.(GPT3(x) -> Popular(x))", "all x.(GPT3) -> Popular(x))", "exists x.(GPT-3(x) & Popular(x))", "all x.(GPT(x) -> Popular(x))", "(Popular(GPT3))", "all x.((GPT-3(x) & Popular(x)) -> Popular(x))", "all x.((GPT-3(x) & Popular(x)) -> -Popular(x))", "all x.(GPT-3) -> Popular(x))", "(Popular(GPT3) -> Popular(GPT3))"]}
{"id": "folio_train_2358", "nl": "St Johnstone is a Scottish team.", "fol": "IsScottishTeam(Johnstone)", "prediction": ["all x.(StJohnstone(x) -> ScottishTeam(x))", "all x.((StJohnstone(x) & ScottishTeam(x)) -> ScottishTeam(x))", "All x.(StJohnstone(x) -> ScottishTeam(x))", "all x.((StJohnstone(x) & ScottishTeam(x)) -> Team(x))", "all x y.((StJohnstone(x) & ScottishTeam(y)) -> Team(x,y))", "all x.(ScottishTeam(x) -> StJohnstone(x))", "all x.((StJohnstone(x) & ScottishTeam(x)) -> -ScottishTeam(x))", "all x.(ScotlandTeam(x) -> StJohnstone(x))", "all x.(StJohnstone(x) -> ScottishTeam(x))", "all x.((StJohnstone(x) & ScottishTeam(x)) -> Joins(x,y))", "all x y.((StJohnstone(x) & ScottishTeam(y)) -> Joins(x,y))", "all x.((StJohnstone(x) & ScottishTeam(x)) -> StJohnstone(x))", "(ScottishTeam(StJohnstone) & ScottishTeam(StJohnstone))", "all x.((StJohnstone(x) & ScottishTeam(x)) -> Teams(x))", "all x y.((StJohnstone(x) & ScottishTeam(y)) -> Teams(x,y))", "all x y.((StJohnstone(x) & ScottishTeam(y)) -> FoundedIn(x,y))"]}
{"id": "folio_train_2359", "nl": "St Johnstone is part of the Scottish Premiership.", "fol": "IsPartOfLeague(Johnstone,Scottishpremiership)", "prediction": ["all x y.((StJohnstone(x) & ScottishPremiership(y)) -> PartOf(x,y))", "all x.((StJohnstone(x) & ScottishPrimaryship(x)) -> PartOf(x,y))", "all x.((StJohnstone(x) & ScottishPremiership(x)) -> PartOf(x,y))", "all x y.((StJohnstone(x) & ScottishPrimaryship(y)) -> PartOf(x,y))", "all x.(StJohnstone(x) -> ScottishPremiership(x))", "all x.(StJohnstone(x) -> PartOfScottishPremiership(x))", "all x.(StJohnstone(x) -> ScottishPrimaryship(x))", "all x.(StJohnstone(x) -> PartOfScottishPrimaryship(x))", "all x.((StJohnstone(x) & ScottishPremiership(x)) -> PartOf(x,ScottishPremiership))", "all x.((StJohnstone(x) & ScottishPrime Ministership(x)) -> PartOf(x,y))", "All x.(StJohnstone(x) -> ScottishPremiership(x))", "all x.((StJohnstone(x) & ScottishPremiership(x)) -> PartOf(x,Scotland))", "all x.((StJohnstone(x) & ScottishPrimaryship(x)) -> PartOf(x,Scotland))", "All x.(StJohnstone(x) -> PartOfScottishPremiership(x))", "All x.(StJohnstone(x) -> ScottishPrimaryship(x))", "all x.((StJohnstone(x) & ScottishPrimaryship(x)) -> PartOf(x,ScottishPrimaryship))"]}
{"id": "folio_train_2360", "nl": "If a team is part of the league, it has joined the league.", "fol": "all x y.(IsPartOfLeague(x,y) -> HasJoinedLeague(x,y))", "prediction": ["all x.((Team(x) & PartOfLiga(x)) -> JoinedLiga(x))", "all x.(PartOfLiga(x) -> JoinedLiga(x))", "all x.((Team(x) & PartOfLeague(x)) -> JoinedLeague(x))", "all x y.((Team(x) & PartOfLiga(x,y)) -> JoinedLiga(x,y))", "all x y.((Team(x) & League(y) & PartOf(x,y)) -> Joined(x,y))", "all x.((Team(x) & PartOfLiga(x)) -> JoinedLeague(x))", "all x.((Team(x) & PartOfLoad(x)) -> JoinedLoad(x))", "all x.(PartOfLeague(x) -> JoinedLeague(x))", "all x y.((Team(x) & PartOfLiga(x) & League(y)) -> Joined(x,y))", "all x y.((Team(x) & PartOfLiga(x,y)) -> JoinedLiga(x))", "all x y.((Team(x) & PartOfLiga(x)) -> JoinedLiga(x))", "all x.((Team(x) & PartOfLocation(x)) -> JoinedLocation(x))", "all x y.((Team(x) & PartOfLiga(x)) -> JoinedLiga(x,y))", "all x y.((Team(x) & League(y)) -> Joined(x,y))", "all x.((Team(x) & PartOfLiga(x)) -> JoinedLoad(x))", "all x.((Team(x) & PartOfLiga(x)) -> JoinedLoan(x))"]}
{"id": "folio_train_2361", "nl": "St Johnstone and Minsk are different teams.", "fol": "(AreDifferentTeams(Misnk,Johnstone) & AreDifferentTeams(Johnstone,Minsk))", "prediction": ["(DifferentTeam(StJohnstone,StJohnstone) & DifferentTeam(Minsk,StJohnstone))", "all x.((StJohnstone(x) & Minsk(x)) -> DifferentTeam(x))", "(DifferentTeam(StJohnstone) & DifferentTeam(Minsk))", "all x.((StJohnstone(x) & Minsk(x)) -> DifferentTeams(x))", "all x.((Team(x) & StJohnstone(x) & Team(x) & Minsk(x)) -> Different(x))", "all x.((Team(x) & StJohnstone(x) & Minsk(x)) -> Different(x))", "(DifferentTeams(StJohnstone,StJohnstone) & DifferentTeams(Minsk,StJohnstone))", "all x y.((StJohnstone(x) & Minsk(y)) -> DifferentTeam(x,y))", "all x y.((StJohnstone(x) & Minsk(y)) -> (DifferentTeam(x,y) & DifferentTeam(x,y)))", "((StJohnstone(StJohnstone) & Minsk(Minsk)) -> DifferentTeam(StJohnstone(StJohnstone) & DifferentTeam(Minsk)))", "(all x.(StJohnstone(x) -> DifferentTeam(x)) & all y.(Minsk(y) -> DifferentTeam(y)))", "((StJohnstone(StJohnstone) & Minsk(Minsk)) -> DifferentTeams(StJohnstone(StJohnstone) & DifferentTeam(Minsk)))", "all x.((Team(x) & StJohnstone(x) & Team(x,Minsk)) -> Different(x))", "all x.((Team(x) & StJohnstone(x) & Team(x) & Minsk(x)) -> Distinct(x))", "((StJohnstone(StJohnstone) & Minsk(Minsk)) -> DifferentTeams(StJohnstone(StJohnstone) & DifferentTeam(Minsk))", "all x.((StJohnstone(x) | Minsk(x)) -> DifferentTeam(x))"]}
{"id": "folio_train_2362", "nl": "For two different teams, either one team wins or the other team wins.", "fol": "all x y.(((AreDifferentTeams(x,y) -> TeamWonGame(x,y)) & -TeamWonGame(y,x)) | (-(AreDifferentTeams(x,y) -> TeamWonGame(x,y)) & TeamWonGame(y,x)))", "prediction": ["all x y.((Team(x) & Team(y)) -> (Wins(x,y) | Wins(x,y)))", "all x y.((Team(x) & Team(y)) -> (Wins(x,y) | Wins(y,y)))", "all x y.((Team(x) & Team(y)) -> (Wins(x,y) | Wins(y,x)))", "all x y.((Team(x) & Team(y)) -> (Wins(x,y) | Wins(y,z)))", "all x.((Team(x) & Team(x)) -> (Wins(x) | Wins(x)))", "all x y.((Team(x) & Team(y) & Wins(x,y)) -> (Wins(x,y) | Wins(x,y)))", "all x y z.((Team(x) & Team(y) & Team(z)) -> (Wins(x,y) | Wins(y,z)))", "all x y z.((Team(x) & Team(y) & Team(z)) -> (Wins(x,y) | Wins(x,z)))", "all x y.((Team(x) & Team(y) & Different(x,y)) -> (Wins(x,y) | Wins(x,y)))", "all x y z.((Team(x) & Team(y) & Team(z)) -> (Wins(x,y,z) | Wins(y,z)))", "all x y z.((Team(x) & Team(y) & Team(z)) -> (Wins(x,z) | Wins(y,z)))", "all x y z.((Team(x) & Team(y) & Team(z)) -> (Wins(x,y) | Wins(z,y)))", "all x.((Team(x) & Team(x) & Teams(x)) -> (Wins(x) | Wins(x)))", "all x.((Team(x) & Team(y)) -> (Wins(x,y) | Wins(y,y)))", "all x y z.((Team(x) & Team(y) & Team(z)) -> (Wins(x,y,z) | Wins(x,y,z)))", "all x.((Team(x) & Team(x) & Wins(x)) -> (Wins(x) | Wins(x)))"]}
{"id": "folio_train_2363", "nl": "Minsk won against St Johnstone.", "fol": "TeamWonGame(Minsk,Johnstone)", "prediction": ["all x y.((Minsk(x) & StJohnstone(y)) -> Wins(x,y))", "all x y.((Minsk(x) & StJohnstone(y)) -> WonAgainst(x,y))", "all x y.((Minsk(x) & StJohnstone(y)) -> Won(x,y))", "all x y z.((Minsk(x) & StJohnstone(y) & StJohnstone(z)) -> Wins(x,y,z))", "all x.((Minsk(x) & StJohnstone(x)) -> Wins(x))", "all x y.((Minsk(x) & StJohnstone(y)) -> WinsAgainst(x,y))", "all x y z.((Minsk(x) & StJohnstone(y) & StJohnstone(z)) -> WonAgainst(x,y,z))", "all x y z.((Minsk(x) & StJohnstone(y) & StJohnstone(z)) -> WinsAgainst(x,y,z))", "all x y z.((Minsk(x) & StJohnstone(y) & StJohnstone(z)) -> Won(x,y,z))", "All x y.((Minsk(x) & StJohnstone(y)) -> Wins(x,y))", "all x.(Minsk(x) -> WinsAgainst(x,StJohnstone))", "all x.((Minsk(x) & StJohnstone(x)) -> Wins(x,y))", "all x.(Minsk(x) -> WinsAgainstStJohnstone(x))", "all x.((Minsk(x) & StJohnstone(y)) -> Wins(x,y))", "all x y.((Minsk(x) & StJohnstone(y)) -> Win(x,y))", "all x y z.((Minsk(x) & StJohnstone(y) & StJohnstone(z)) -> Wins(x,y))"]}
{"id": "folio_train_2364", "nl": "At least one Scottish team has joined the Scottish Premiership.", "fol": "exists x.(IsScottishTeam(x) & HasJoinedLeague(x,Scottishpremiership))", "prediction": ["all x.(ScottishTeam(x) -> JoinedScottishPremiership(x))", "all x y.((ScottishTeam(x) & ScottishPremiership(y)) -> Joined(x,y))", "all x.(ScottishTeam(x) -> JoinedScottishPrimaryship(x))", "all x y.((ScottishTeam(x) & ScottishPrimary(y)) -> Joined(x,y))", "all x y.((ScottishTeam(x) & ScottishPrimaryship(y)) -> Joined(x,y))", "all x y.((ScottishTeam(x) & ScottishPrime Ministership(y)) -> Joined(x,y))", "exists x.(ScottishTeam(x) & JoinedScottishPremiership(x))", "all x.(ScottishTeam(x) -> JoinedScotlandPremiership(x))", "exists x.(ScottishTeam(x) & JoinedScottishPrimaryship(x))", "all x.((ScottishTeam(x) & ScottishPrimaryship(x)) -> Joined(x,y))", "all x.((ScottishTeam(x) & ScottishPremiership(x)) -> Joined(x,y))", "all x.(ScotlandTeam(x) -> JoinedScotlandPremiership(x))", "all x y.((ScottishTeam(x) & ScottishPremiership(y)) -> Joins(x,y))", "exists x.(ScottishTeam(x) & JoinedScotlandPremiership(x))", "all x.((ScottishTeam(x) & ScottishPremiership(x)) -> Joined(x))", "all x.((ScottishTeam(x) & ScottishPrimaryship(x)) -> Joined(x))"]}
{"id": "folio_train_2365", "nl": "St Johnstone won against Minsk.", "fol": "TeamWonGame(Johnstone,Minsk)", "prediction": ["all x y.((StJohnstone(x) & Minsk(y)) -> WonAgainst(x,y))", "all x y.((StJohnstone(x) & Minsk(y)) -> Wins(x,y))", "all x y.((StJohnstone(x) & Minsk(y)) -> WinsAgainst(x,y))", "StJohnstoneWonAgainstMinsk(StJohnstone)", "all x y.((StJohnstone(x) & Minsk(y)) -> Won(x,y))", "All x y.((StJohnstone(x) & Minsk(y)) -> WonAgainst(x,y))", "all x.((StJohnstone(x) & Minsk(x)) -> Wins(x))", "StJohnstoneWonAgainstMinsk(StJohnstone,Minsk)", "all x.((StJohnstone(x) & Minsk(x)) -> WonAgainst(x,y))", "All x y.((StJohnstone(x) & Minsk(y)) -> Wins(x,y))", "All x y.((StJohnstone(x) & Minsk(y)) -> WinsAgainst(x,y))", "All x.((StJohnstone(x) & Minsk(x)) -> Wins(x))", "all x.((StJohnstone(x) & Minsk(y)) -> WonAgainst(x,y))", "all x.((StJohnstone(x) & Minsk(y)) -> Wins(x,y))", "all x.((StJohnstone(x) & Minsk(x)) -> Wins(x,y))", "all x.((StJohnstone(x) & Minsk(x)) -> WinsAgainst(x,y))"]}
{"id": "folio_train_2366", "nl": "Minsk joined the Scottish Premiership.", "fol": "HasJoinedLeague(Minsk,Scottishpremiership)", "prediction": ["all x y.((Minsk(x) & ScottishPremiership(y)) -> Joined(x,y))", "all x.(Minsk(x) -> JoinedScottishPremiership(x))", "all x y.((Minsk(x) & ScottishPrimaryship(y)) -> Joined(x,y))", "Minsk joined ScottishPremiership(Minsk,Scotland)", "all x y.((Minsk(x) & ScottishPremiership(y)) -> Joins(x,y))", "all x y.((Minsk(x) & ScottishPrime Ministership(y)) -> Joined(x,y))", "Minsk joined ScottishPremiership(Minsk)", "all x.(Minsk(x) -> JoinedScottishPrimaryship(x))", "all x.(Minsk(x) -> JoinsScottishPremiership(x))", "all x y.((Minsk(x) & ScottishPrimaryship(y)) -> Joins(x,y))", "All x.(Minsk(x) -> JoinedScottishPremiership(x))", "all x.(Minsk(x) -> JoinedScotlandPremiership(x))", "all x y.((Minsk(x) & ScottishPrime Ministership(y)) -> Joins(x,y))", "all x y.((Minsk(x) & ScottishPrimetime(y)) -> Joined(x,y))", "all x.(Minsk(x) -> JoinsScottishPrimaryship(x))", "all x y.((Minsk(x) & ScottishPrimary(y)) -> Joined(x,y))"]}
{"id": "folio_train_2367", "nl": "No Boeing-737 plane is equipped with more than 300 seats. ", "fol": "all x.(IsBoeing737(x) -> -HasMoreThan300Seats(x))", "prediction": ["-exists x.(Boeing737Plane(x) & EquippedWithMoreThan300Seats(x))", "-exists x.(Boeing737(x) & EquippedWithMoreThan300Seats(x))", "-exists x.(Boeing737(x) & Seats(x,300))", "-exists x.(Boeing737Plane(x) & EquippedWithMoreThan(x,300))", "-exists x.(Boeing737(x) & EquippedWithMoreThan(x,300))", "-exists x.(Boeing737(x) & Seat(x,300))", "-exists x.(Boeing737Plane(x) & MoreThan300Seats(x))", "-exists x.(Boeing737(x) & Airplane(x) & EquippedWithMoreThan300Seats(x))", "-exists x.(Boeing737Plane(x) & MoreThan(x,300))", "-exists x.(Boeing737Plane(x) & Seats(x,300))", "-exists x.(Boeing737(x) & MoreThan300Seats(x))", "-exists x.(Boeing737(x) & Airplane(x) & MoreThan300Seats(x))", "-exists x.(Boeing737(x) & Airplane(y) & EquippedWithMoreThan300Seats(x,y))", "-exists x.(Boeing737(x) & MoreThan(x,300))", "-exists x.(Boeing737Plane(x) & EquippedWithMoreThan(x,300Seats))", "-exists x.(Boeing737(x) & EquippedWithMoreThan(x,300Seats))"]}
{"id": "folio_train_2368", "nl": "All planes in Delta are of type Boeing-737. ", "fol": "all x.(IsInDelta(x) -> IsBoeing737(x))", "prediction": ["all x.(Delta(x) -> Boeing737(x))", "all x.((Plane(x) & Delta(x)) -> Boeing737(x))", "all x.(DeltaPilot(x) -> Boeing737(x))", "all x.(Delta(x) -> TypeBoeing737(x))", "all x.(DeltaPilot(x) -> TypeBoeing737(x))", "all x.(DeltaAirplane(x) -> Boeing737(x))", "all x.(DeltaAirplane(x) -> TypeBoeing737(x))", "all x.((Plane(x) & Delta(x)) -> TypeBoeing737(x))", "all x.(DeltaPlane(x) -> Boeing737(x))", "all x.(DeltaPlane(x) -> TypeBoeing737(x))", "all x y.((Plane(x) & Delta(y)) -> Boeing737(x))", "all x.(DeltaPlanet(x) -> Boeing737(x))", "all x.(DeltaPlanet(x) -> TypeBoeing737(x))", "all x y.((Plane(x) & Delta(y)) -> TypeBoeing737(x))", "all x.(Delta(x) -> (Boeing(x) & Boeing(x) & 737(x)))", "all x y.((Plane(x) & Delta(y)) -> Boeing737(y))"]}
{"id": "folio_train_2369", "nl": "Planes are either equipped with more than 300 seats or have a capacity of 100 passengers. ", "fol": "all x.(HasMoreThan300Seats(x) | HasCapacity100Passengers(x))", "prediction": ["all x.(Plane(x) -> (EquivalentToMoreThan300Seats(x) | CapacityTo100Passengers(x)))", "all x.(Plane(x) -> (EquivalentToMoreThan300Seats(x) | CapacityToMoreThan100Passengers(x)))", "all x.(Plane(x) -> ((EquivalentToMoreThan300Seats(x) | CapacityToMoreThan100Passengers(x))))", "all x.(Plane(x) -> ((EquivalentToMoreThan300Seats(x) | CapacityTo100Passengers(x))))", "all x.(Plane(x) -> (EquivalentToMoreThan(x,300) | CapacityToMoreThan(x,100)))", "all x.(Plane(x) -> (EquivalentToMoreThan300Seats(x) | CapacityToThan100Passengers(x)))", "all x.(Plane(x) -> (Equipment(x,300) | Capacity(x,100)))", "all x.(Plane(x) -> (EquipmentMoreThan300Seats(x) | CapacityMoreThan100Passengers(x)))", "all x.(Plane(x) -> (EquivalentToMoreThan300Seats(x) | CapacityToCapacityToCapacity(x,100Passengers)))", "all x.(Plane(x) -> (EquivalentToMoreThan300Seats(x) | CapacityToCapacityToCapacityToCapacity(x,100Passengers)))", "all x.(Plane(x) -> (EquivalentToMoreThan(x,300) | CapacityToCapacityToCapacity(x,100)))", "all x.(Plane(x) -> ((EquivalentToMoreThan(x,300) | CapacityToMoreThan(x,100))))", "all x.(Plane(x) -> (EquipmentWithMoreThan300Seats(x) | CapacityWith100Passengers(x)))", "all x.(Plane(x) -> (EquippedWithMoreThan300Seats(x) | CapacityOf100Passengers(x)))", "all x.(Plane(x) -> (HasMoreThan300Seats(x) | HasCapacityOf100Passengers(x)))", "all x.(Plane(x) -> (Equivalent(x,300) | Capacity(x,100)))"]}
{"id": "folio_train_2370", "nl": "All planes with a capacity of 100 passengers are scheduled for a short-distance flight. ", "fol": "all x.(HasCapacity100Passengers(x) -> ScheduledForShortDistanceFlight(x))", "prediction": ["all x.((Plane(x) & CapacityOf100Passengers(x)) -> ScheduledForShortDistanceFlight(x))", "all x.((Plane(x) & Capacity(x,100)) -> ScheduledForShortDistanceFlight(x))", "all x.((Plane(x) & CapacityOf100Passengers(x)) -> ScheduledForShortDistance(x))", "all x.((Plane(x) & Capacity(x,100)) -> ScheduledForShortDistance(x))", "all x.((Airplane(x) & CapacityOf100Passengers(x)) -> ScheduledForShortDistanceFlight(x))", "all x.((Plane(x) & Capacity100Passengers(x)) -> ScheduledForShortDistanceFlight(x))", "all x.((Airplane(x) & Capacity(x,100)) -> ScheduledForShortDistanceFlight(x))", "all x.((Pavion(x) & CapacityOf100Passengers(x)) -> ScheduledForShortDistanceFlight(x))", "all x.((Plane(x) & CapacityAt100Passengers(x)) -> ScheduledForShortDistanceFlight(x))", "all x.((Plane(x) & CapacityAt(x,100)) -> ScheduledForShortDistanceFlight(x))", "all x.((Pavion(x) & Capacity(x,100)) -> ScheduledForShortDistanceFlight(x))", "all x.((Plane(x) & CapacityTotalPassengers(x,100)) -> ScheduledForShortDistanceFlight(x))", "all x.((Airplane(x) & CapacityOf100Passengers(x)) -> ScheduledForShortDistance(x))", "all x.((Plane(x) & CapacityOf(x,100)) -> ScheduledForShortDistanceFlight(x))", "all x.((Plane(x) & Capacity(x,100Passengers)) -> ScheduledForShortDistanceFlight(x))", "all x.((Airplane(x) & Capacity(x,100)) -> ScheduledForShortDistance(x))"]}
{"id": "folio_train_2371", "nl": "All planes with a capacity of 100 passengers are produced before 2010. ", "fol": "all x.(HasCapacity100Passengers(x) -> ProducedBefore2010(x))", "prediction": ["all x.((Plane(x) & Capacity(x,100)) -> ProducedBefore2010(x))", "all x.((Plane(x) & CapacityOf100Passengers(x)) -> ProducedBefore2010(x))", "all x.((Plane(x) & CapacityAt100Passengers(x)) -> ProducedBefore2010(x))", "all x.((Plane(x) & Capacity(x,100)) -> ProducedBy2010(x))", "all x.((Airplane(x) & CapacityOf100Passengers(x)) -> ProducedBefore2010(x))", "all x.((Plane(x) & Capacity(x,100Passengers)) -> ProducedBefore2010(x))", "all x.((Airplane(x) & Capacity(x,100)) -> ProducedBefore2010(x))", "all x.((Plane(x) & CapacityOf100Passengers(x)) -> ProducedBy2010(x))", "all x.((Plane(x) & Capacity100Passengers(x)) -> ProducedBefore2010(x))", "all x.((Plane(x) & CapacityFrom100Passengers(x)) -> ProducedBefore2010(x))", "all x.((Plane(x) & CapacityTotalPassengers(x,100)) -> ProducedBefore2010(x))", "all x.((Plane(x) & CapacityAt(x,100)) -> ProducedBefore2010(x))", "all x.((Plane(x) & CapacityBelow100Passengers(x)) -> ProducedBefore2010(x))", "all x.((Pavion(x) & Capacity(x,100)) -> ProducedBefore2010(x))", "all x.((Panel(x) & Capacity(x,100)) -> ProducedBefore2010(x))", "all x.((Plane(x) & CapacityOf100Passengers(x)) -> ProducedBefore(x,2010))"]}
{"id": "folio_train_2372", "nl": "Jake32 is either a Boeing-737 plane or a plane in Delta. ", "fol": "((IsBoeing737(Jake32) & -IsInDelta(Jake32)) | (-IsBoeing737(Jake32) & IsInDelta(Jake32)))", "prediction": ["all x.(Jake32(x) -> (Boeing737Plane(x) | DeltaPlane(x)))", "all x.(Jake32(x) -> (Boeing737(x) | DeltaPlane(x)))", "all x.(Jake32(x) -> (Boeing737(x) | Delta(x)))", "all x.(Jake32(x) -> (Boeing737Plane(x) | DeltaPlane(x)))", "(Boeing737Plane(Jake32) | DeltaPlane(Jake32))", "all x.((Jake32(x) & Boeing737(x)) | DeltaPlane(x))", "all x.(Jake32(x) -> (Boeing737(x) | DeltaPlane(x)))", "exists x.(Jake32(x) & (Boeing737Plane(x) | DeltaPlane(x)))", "all x.(Sake32(x) -> (Boeing737Plane(x) | DeltaPlane(x)))", "all x.(Jake32(x) -> (Boeing737Pilot(x) | DeltaPilot(x)))", "(Boeing737Plane(jake32) | DeltaPlane(jake32))", "all x.(Jake32(x) -> (Boeing737(x) | DeltaPilot(x)))", "all x.(Jake32(x) -> (Boeing737(x) | DeltaAirplane(x)))", "all x.(Jake32(x) -> (Boeing737(x) | Delta(x)))", "all x.(Jake32(x) -> (Boeing(x) & Boeing(x) & Delta(x)))", "all x.(Jake32(x) -> (Boeing737Boeing(x) | DeltaBoeing(x)))"]}
{"id": "folio_train_2373", "nl": "T10 is either a Boeing-737 plane and in Delta, or neither a Boeing-737 plane nor in Delta. ", "fol": "((IsBoeing737(T10) & -IsInDelta(T10)) | (-IsBoeing737(T10) & IsInDelta(T10)))", "prediction": ["all x.(T10(x) -> ((Boeing737Plane(x) & Delta(x)) | (-Boeing737Plane(x) & Delta(x)))))", "all x.(T10(x) -> ((Boeing737Plane(x) & Delta(x)) | (-Boeing737Plane(x) & Delta(x))))", "all x.(T10(x) -> ((Boeing737Plane(x) & Delta(x)) | -Boeing737Plane(x) & Delta(x))))", "all x.(T10(x) -> ((Boeing737Plane(x) & DeltaPlane(x)) | (-Boeing737Plane(x) & DeltaPlane(x)))))", "all x.(T10(x) -> (Boeing737Plane(x) & DeltaPlane(x)) | (-Boeing737Plane(x) & DeltaPlane(x))))", "all x.(T10(x) -> ((Boeing737Plane(x) & DeltaPlane(x)) | (-Boeing737Plane(x) & DeltaPlane(x))))", "exists x.(T10(x) & ((Boeing737Plane(x) & Delta(x)) | -Boeing737Plane(x) & Delta(x))))", "all x.(T10(x) -> (Boeing737Plane(x) & DeltaPlane(x) & -Boeing737Plane(x) & DeltaPlane(x)))", "all x.(T10(x) -> ((Boeing737Plane(x) & DeltaPlane(x)) | -Boeing737Plane(x) & DeltaPlane(x))))", "(all x.(T10(x) -> (Boeing737Plane(x) & DeltaPlane(x))) | (-Boeing737Plane(x) & DeltaPlane(x))))", "(all x.(T10(x) -> (Boeing737Plane(x) & DeltaPlane(x)) | (-Boeing737Plane(x) & DeltaPlane(x)))))", "all x.(T10(x) -> ((Boeing737Plane(x) & Delta(x)) | -Boeing737Plane(x) & Delta(x)))", "(all x.(T10(x) -> (Boeing737Plane(x) & Delta(x))) | (-Boeing737Plane(x) & Delta(x))))", "(all x.(T10(x) -> (Boeing737Plane(x) & DeltaPlane(x)) | (-Boeing737Plane(x) & DeltaPlane(x))))", "all x.(T10(x) -> (Boeing737Plane(x) | DeltaPlane(x) | -Boeing737Plane(x) & DeltaPlane(x)))", "all x.(T10(x) -> (Boeing737Plane(x) & Delta(x)) | (-Boeing737Plane(x) & Delta(x))))"]}
{"id": "folio_train_2374", "nl": "Jake32 was produced before 2010 and is scheduled for a short-distance flight.", "fol": "(ProducedBefore2010(Jake32) & ScheduledForShortDistanceFlight(Jake32))", "prediction": ["all x.(Jake32(x) -> (ProducedBefore2010(x) & ScheduledForShortDistanceFlight(x)))", "all x.(Jake32(x) -> (ProducedBefore2010(x) & ScheduledForShortDistance(x)))", "all x.((Jake32(x) & ProducedBefore2010(x)) -> ScheduledForShortDistanceFlight(x))", "all x.((Jake32(x) & ProducedBefore2010(x) & ScheduledForShortDistanceFlight(x)) -> ProducedBefore2010(x))", "all x.(Jake32(x) -> (ProducedBefore2010(x) & ScheduledForShortDistanceFlight(x)))", "all x.(Jake32(x) -> (ProducedBefore(x,2010) & ScheduledForShortDistanceFlight(x)))", "(ProducedBefore2010(Jake32) & ScheduledForShortDistanceFlight(Jake32))", "all x.((Jake32(x) & ProducedBefore2010(x) & ScheduledForShortDistance(x)) -> ProducedBefore2010(x))", "all x.(Jake32(x) -> (ProducedBefore2010(x) & ScheduledForShortDistance(x)))", "all x.((Jake32(x) & ProducedBefore2010(x) & ScheduledForShortDistanceFlight(x)) -> ProducedAfter2010(x))", "all x.(Jake32(x) -> (ProducedBefore2010(x) & ScheduledForShortDistanceFlight(x)))", "all x.((Jake32(x) & ProducedBefore2010(x)) -> ScheduledForShortDistance(x))", "all x.(Jake32(x) -> (ProducedBefore(x,2010) & ScheduledForShortDistanceFlight(x)))", "all x.(Jake32(x) -> (ProducedBefore(x,2010) & ScheduledForShortDistance(x)))", "all x.(Sake32(x) -> (ProducedBefore2010(x) & ScheduledForShortDistanceFlight(x)))", "all x.((Jake32(x) & ProducedBefore2010(x) & ScheduledForShortDistanceFlight(x)) -> ProducedBy(x,y))"]}
{"id": "folio_train_2375", "nl": "Jake32 is not produced before 2010 and is not scheduled for a short-distance flight.", "fol": "(-ProducedBefore2010(Jake32) & -ScheduledForShortDistanceFlight(Jake32))", "prediction": ["all x.(Jake32(x) -> (-ProducedBefore2010(x) & -ScheduledForShortDistanceFlight(x)))", "all x.((Jake32(x) & -ProducedBefore2010(x) & -ScheduledForShortDistanceFlight(x)) -> -ProducedBefore2010(x))", "all x.(Jake32(x) -> (-ProducedBefore2010(x) & -ScheduledForShortDistance(x)))", "all x.((Jake32(x) & -ProducedBefore2010(x) & -ScheduledForShortDistance(x)) -> -ProducedBefore2010(x))", "all x.((Jake32(x) & -ProducedBefore2010(x)) -> -ScheduledForShortDistanceFlight(x))", "(-ProducedBefore2010(Jake32) & -ScheduledForShortDistanceFlight(Jake32))", "all x.(Jake32(x) -> (-ProducedBefore2010(x) & -ScheduledForShortDistanceFlight(x)))", "all x.(Jake32(x) -> (-ProducedBefore2010(x) & -ScheduledForShortDistanceFlight(x)))", "all x.((Jake32(x) & -ProducedBefore2010(x)) -> -ScheduledForShortDistance(x))", "all x.((Jake32(x) & -ProducedBefore2010(x) & -ScheduledForShortDistanceFlight(x)) -> -ProducedBefore2010(x))", "all x.((Jake32(x) & -ProducedBefore2010(x) & -ScheduledForShortDistanceFlight(x)) -> -ProducedAfter2010(x))", "all x.((Jake32(x) & -ProducedBefore2010(x) & -ScheduledForShortDistance(x)) -> -ProducedBefore2010(x))", "all x.(Jake32(x) -> (-ProducedBefore2010(x) & -ScheduledForShortDistance(x)))", "all x.((Jake32(x) & -ProducedBefore2010(x) & -ScheduledForShortDistance(x)) -> -ProducedAfter2010(x))", "all x.(Jake32(x) -> (-ProducedBefore2010(x) & -ScheduledForShortDistance(x)))", "(-ProducedBefore2010(Jake32) & -ScheduledForShortDistance(Jake32))"]}
{"id": "folio_train_2376", "nl": "Jake32 is produced before 2010 or scheduled for a short-distance flight.", "fol": "(ProducedBefore2010(Jake32) | ScheduledForShortDistanceFlight(Jake32))", "prediction": ["all x.(Jake32(x) -> (ProducedBefore2010(x) | ScheduledForShortDistanceFlight(x)))", "all x.((Jake32(x) & (ProducedBefore2010(x) | ScheduledForShortDistanceFlight(x))) -> ProducedBefore2010(x))", "all x.(Jake32(x) -> (ProducedBefore(x,2010) | ScheduledForShortDistanceFlight(x,2010)))", "all x.((Jake32(x) & (ProducedBefore2010(x) | ScheduledForShortDistance(x))) -> ProducedBefore2010(x))", "all x.((Jake32(x) & (ProducedBefore2010(x) | ScheduledForShortDistanceFlight(x))) -> ProducedAfter2010(x))", "all x.(Jake32(x) -> (ProducedBefore(x,2010) | ScheduledForShortDistanceFlight(x)))", "all x.((Jake32(x) & (ProducedBefore(x,2010) | ScheduledForShortDistanceFlight(x))) -> ProducedBefore(x,2010))", "all x.(Jake32(x) -> (ProducedBefore2010(x) | ScheduledForShortDistanceFlight(x)))", "all x.(Jake32(x) -> (ProducedBefore2010(x) | ScheduledForShortDistance(x)))", "all x.((Jake32(x) & (ProducedBefore(x,2010) | ScheduledForShortDistanceFlight(x,2010))) -> ProducedBefore(x,2010))", "all x.(Jake32(x) -> ((ProducedBefore2010(x) | ScheduledForShortDistanceFlight(x))))", "all x.((Jake32(x) & (ProducedBefore2010(x) | ScheduledForShortDistanceFlight(x))) -> ProducedFor(x,y))", "all x.((Jake32(x) & (ProducedBefore2010(x) | ScheduledForShortDistanceFlight(x))) -> ProducedBy(x,y))", "all x.((Jake32(x) & (ProducedBefore2010(x) | ScheduledForShortDistanceFlight(x))) -> Produced(x))", "all x.((Jake32(x) & (ProducedBefore2010(x) | ScheduledForShortDistanceFlight(x))) -> ProducedBefore(x))", "all x.((Jake32(x) & (ProducedBefore(x,2010) | ScheduledForShortDistance(x))) -> ProducedBefore(x,2010))"]}
{"id": "folio_train_2377", "nl": "Jake32 is neither produced before 2010 nor scheduled for a short-distance flight.", "fol": "(-ProducedBefore2010(Jake32) & -ScheduledForShortDistanceFlight(Jake32))", "prediction": ["all x.(Jake32(x) -> (-ProducedBefore2010(x) & -ScheduledForShortDistanceFlight(x)))", "all x.(Jake32(x) -> (-ProducedBefore2010(x) & -ScheduledForShortDistance(x)))", "all x.(Jake32(x) -> (-ProducedBefore2010(x) & -ScheduledForShortDistanceFlight(x)))", "all x.((Jake32(x) & -ProducedBefore2010(x) & -ScheduledForShortDistanceFlight(x)) -> -ProducedBefore2010(x))", "all x.((Jake32(x) & -ProducedBefore2010(x) & -ScheduledForShortDistance(x)) -> -ProducedBefore2010(x))", "all x.((Jake32(x) & -(ProducedBefore2010(x) | ScheduledForShortDistanceFlight(x))) -> -(ProducedBefore2010(x) & ScheduledForShortDistanceFlight(x)))", "all x.((Jake32(x) & -ProducedBefore2010(x) & -ScheduledForShortDistanceFlight(x)) -> -(ProducedBefore2010(x) & -ScheduledForShortDistanceFlight(x)))", "all x.((Jake32(x) & -ProducedBefore2010(x) & -ScheduledForShortDistance(x)) -> -(ProducedBefore2010(x) & -ScheduledForShortDistance(x)))", "all x.((Jake32(x) & -ProducedBefore2010(x) & -ScheduledForShortDistanceFlight(x)) -> -ScheduledForShortDistanceFlight(x))", "all x.(Jake32(x) -> (-ProducedBefore2010(x) & -ScheduledForShortDistance(x)))", "all x.((Jake32(x) & -(ProducedBefore2010(x) | ScheduledForShortDistance(x))) -> -(ProducedBefore2010(x) & ScheduledForShortDistance(x)))", "all x.((Jake32(x) & -ProducedBefore2010(x) & -ScheduledForShortDistanceFlight(x)) -> -ScheduledForShortDistance(x))", "all x.((Jake32(x) & -ProducedBefore2010(x) & -ScheduledForShortDistance(x)) -> -ScheduledForShortDistance(x))", "all x.((Jake32(x) & -(ProducedBefore2010(x) | ScheduledForShortDistanceFlight(x))) -> -(ProducedBefore2010(x) & ScheduledForShortDistance(x)))", "all x.((Jake32(x) & -(ProducedBefore2010(x) | ScheduledForShortDistanceFlight(x))) -> -ProducedBefore2010(x))", "all x.((Jake32(x) & -ProducedBefore2010(x) & -ScheduledForShortDistanceFlight(x)) -> -(ProducedBefore2010(x) & -ScheduledForShortDistance(x)))"]}
{"id": "folio_train_2378", "nl": "The SAT test is wholly owned and developed by the College Board.", "fol": "all x.(-IsCollegeBoard(x) -> -IsOwnedBy(Sat,x))", "prediction": ["all x y.((SATTest(x) & CollegeBoard(y)) -> OwnedAndDevelopedBy(x,y))", "all x.(SATTest(x) -> (OwnedByCollegeBoard(x) & DevelopedByCollegeBoard(x)))", "all x y.((SATTest(x) & CollegeBoard(y)) -> (OwnedBy(x,y) & DevelopedBy(x,y)))", "all x y z.((SATTest(x) & CollegeBoard(y) & CollegeBoard(z)) -> (OwnedBy(x,y) & DevelopedBy(x,z)))", "all x.(SATTest(x) -> (OwnedByCollegeBoard(x) & DevelopedByBoard(x)))", "all x y z.((SATTest(x) & CollegeBoard(y) & College(z)) -> (OwnedBy(x,y) & DevelopedBy(x,z)))", "all x y z.((SATTest(x) & CollegeBoard(y) & CollegeBoard(z)) -> OwnedAndDevelopedBy(x,y,z))", "all x y.((SATTest(x) & CollegeBoard(y)) -> OwnedAndDeveloped(x,y))", "all x y.((SATTest(x) & CollegeBoard(y)) -> (Owned(x,y) & DevelopedBy(x,y)))", "all x y.((SATTest(x) & CollegeBoard(y)) -> (Owns(x,y) & Develops(x,y)))", "all x y.((SATTest(x) & CollegeBoard(y)) -> (Owned(x,y) & Developed(x,y)))", "all x y z.((SATTest(x) & CollegeBoard(y) & CollegeBoard(z)) -> (OwnedBy(x,z) & DevelopedBy(x,y)))", "all x y z.((SATTest(x) & CollegeBoard(y) & CollegeBoard(z)) -> (Owned(x,y) & Developed(x,z)))", "all x.(SATTest(x) -> (OwnedBy(x,CollegeBoard) & DevelopedBy(x,CollegeBoard)))", "all x y z.((SATTest(x) & CollegeBoard(y) & CollegeBoard(z)) -> (Owns(x,y) & Develops(x,z)))", "all x y z.((SATTest(x) & CollegeBoard(y) & CollegeBoard(z)) -> (OwnedBy(x,y) & Develops(x,z)))"]}
{"id": "folio_train_2379", "nl": "The SAT test is intended to assess student's readiness for college.", "fol": "IntendedToAssess(Sat,StudentReadiness)", "prediction": ["all x.(SATTest(x) -> AssessesStudentRequirementForCollege(x))", "all x.(SATTest(x) -> AssessesStudentReadinessForCollege(x))", "all x y.((SATTest(x) & Student(y)) -> AssessesReadinessForCollege(x,y))", "all x y.((SATTest(x) & Student(y)) -> AssessesRequirementForCollege(x,y))", "all x.(SATTest(x) -> AssessesStudentRequirement(x))", "all x y z.((SATTest(x) & Student(y) & College(z)) -> AssessesReadinessFor(x,y,z))", "all x y.((SATTest(x) & Student(y)) -> IntendedToAssessesReadinessForCollege(x,y))", "all x y z.((SATTest(x) & Student(y) & College(z)) -> AssessesReadinessForCollege(x,y,z))", "all x y.((SATTest(x) & Student(y)) -> IntendedToAssessesRequirementForCollege(x,y))", "all x.(SATTest(x) -> AssessesStudentsRequirementForCollege(x))", "all x.(SATTest(x) -> AssessesStudentsReadinessForCollege(x))", "all x y z.((SATTest(x) & Student(y) & College(z)) -> AssessesReadiness(x,y,z))", "all x y z.((SATTest(x) & Student(y) & College(z)) -> AssessesRequirement(x,y,z))", "all x.(SATTest(x) -> AssessesRequirementForCollege(x))", "all x y z.((SATTest(x) & Student(y) & College(z)) -> AssessesRequirementForCollege(x,y,z))", "all x y z.((SATTest(x) & Student(y) & College(z)) -> AssessesRequirementFor(x,y,z))"]}
{"id": "folio_train_2380", "nl": "The SAT was originally designed not to be aligned with high school curricula. ", "fol": "all x.((IsYear(x) & IsBefore2016(x)) -> -IsAlignedWithHighSchool(x))", "prediction": ["all x.(SAT(x) -> -AlignedWithHighSchoolCurricula(x))", "all x y.((SAT(x) & HighSchoolCurricula(y)) -> -Aligned(x,y))", "all x y.((SAT(x) & HighSchoolCurriculum(y)) -> -Aligned(x,y))", "all x.((SAT(x) & OriginallyDesignedNotToBeAlignedWithHighSchoolCurricula(x)) -> -AlignedWithHighSchoolCurricula(x))", "all x.((SAT(x) & OriginallyDesigned(x)) -> -AlignedWithHighSchoolCurricula(x))", "all x.(SAT(x) -> -AlignedToHighSchoolCurricula(x))", "all x y.((SAT(x) & HighSchoolCurricula(y)) -> -AlignedWith(x,y))", "all x.((SAT(x) & -AlignedWithHighSchoolCurricula(x)) -> -AlignedWithHighSchoolCurricula(x))", "all x y.((SAT(x) & HighSchoolCurriculum(y)) -> -AlignedWith(x,y))", "all x.(SAT(x) -> -AlignedWithHighSchoolCurriculum(x))", "all x.(Sat(x) -> -AlignedWithHighSchoolCurricula(x))", "all x.((SAT(x) & -AlignedWithHighSchoolCurricula(x)) -> OriginallyDesigned(x))", "all x.((SAT(x) & DesignedForHighSchoolCurricula(x)) -> -AlignedWithHighSchoolCurricula(x))", "all x.((SAT(x) & OriginallyDesignedForHighSchoolCurricula(x)) -> -AlignedWithHighSchoolCurricula(x))", "all x.(SAT(x) -> (OriginallyDesigned(x) & -AlignedWithHighSchoolCurricula(x)))", "all x y.((SAT(x) & HighSchoolCurricula(y)) -> -AlignedTo(x,y))"]}
{"id": "folio_train_2381", "nl": "Several adjustments were made for the version of the SAT introduced in 2016 to reflect more closely on what students learn in high school. ", "fol": "all x.((IsYear(x) & IsSince2016(x)) -> IsAlignedWithHighSchool(x))", "prediction": ["all x y.((SAT(x) & Version(y) & IntroducedIn2016(y)) -> ReflectsFacilyOnWhatStudentsLearnInHighSchool(x,y))", "all x.((SAT(x) & IntroducedIn2016(x)) -> ReflectsFacilyOnWhatStudentsLearnInHighSchool(x))", "all x y.((SAT(x) & Version(y) & IntroducedIn2016(y,2016)) -> ReflectsFacilyOnWhatStudentsLearnInHighSchool(x,y))", "all x.((SATVersion(x) & IntroducedIn2016(x)) -> ReflectsFacilyOnWhatStudentsLearnInHighSchool(x))", "all x y.((SAT(x) & Version(y) & IntroducedIn2016(x,y)) -> ReflectsFacilyOnWhatStudentsLearnInHighSchool(x,y))", "all x y.((SAT(x) & Version(y) & IntroducedIn2016(y)) -> ReflectsFacilyOnWhatStudentsInHighSchool(x,y))", "all x y.((SAT(x) & Version(y) & IntroducedIn2016(y)) -> ReflectsFastOnWhatStudentsLearnInHighSchool(x,y))", "all x y.((Version(x) & SAT(y) & IntroducedIn2016(x,y)) -> ReflectsFacilyOnWhatStudentsLearnInHighSchool(x,y))", "all x.((SAT(x) & IntroducedIn2016(x)) -> ReflectsFacilyOnWhatStudentsInHighSchool(x))", "all x y.((SAT(x) & Version(y) & IntroducedIn2016(x,y)) -> ReflectsFacilyOnWhatStudentsInHighSchool(x,y))", "all x y.((SAT(x) & Version(y) & IntroducedIn2016(y,2016)) -> ReflectsFacilyOnWhatStudentsLearnInHighSchool(x))", "all x y.((SAT(x) & Version(y) & IntroducedIn2016(x,y)) -> ReflectsFastOnWhatStudentsLearnInHighSchool(x,y))", "all x y.((SAT(x) & Version(y) & IntroducedIn2016(y,2016)) -> ReflectsFastOnWhatStudentsLearnInHighSchool(x,y))", "all x.((SATVersion(x) & IntroducedIn2016(x)) -> ReflectsFacilyOnWhatStudentsInHighSchool(x))", "all x y.((SAT(x) & Version(y) & IntroducedIn2016(y,2016)) -> ReflectsFacilyOnWhatStudentsInHighSchool(x,y))", "all x y.((SAT(x) & Version(y) & IntroducedIn2016(y,2016)) -> ReflectsFastlyOnWhatStudentsLearnInHighSchool(x,y))"]}
{"id": "folio_train_2382", "nl": "Since 2016 the SAT has been better aligned with high school curricula.", "fol": "all x.((IsYear(x) & IsSince2016(x)) -> IsAlignedWithHighSchool(x))", "prediction": ["all x y.((SAT(x) & HighSchoolCurricula(y)) -> BetterAligned(x,y))", "all x y.((SAT(x) & HighSchoolCurriculum(y)) -> BetterAligned(x,y))", "all x y.((SAT(x) & HighSchoolCurriculum(y)) -> BetterAlignedWith(x,y))", "all x y.((SAT(x) & HighSchoolCurricula(y)) -> BetterAlignedWith(x,y))", "all x.((SAT(x) & AlignedWithHighSchoolCurricula(x)) -> BetterAligned(x))", "all x y z.((SAT(x) & HighSchoolCurriculum(y) & 2016(z)) -> BetterAligned(x,y,z))", "all x.((SAT(x) & Since2016(x)) -> BetterAlignedWithHighSchoolCurricula(x))", "all x y z.((SAT(x) & HighSchoolCurriculum(y) & 2016(z)) -> BetterAlignedWith(x,y,z))", "all x.((SAT(x) & HighSchoolCurricula(x)) -> BetterAligned(x))", "all x.((SAT(x) & AlignedWithHighSchoolCurricula(x)) -> Better(x))", "all x.((SAT(x) & HighSchoolCurriculum(x)) -> BetterAligned(x))", "all x.((SAT(x) & HigherSchoolCurricula(x)) -> BetterAligned(x))", "all x.((SAT(x) & HigherSchoolCurriculum(x)) -> BetterAligned(x))", "all x.((SAT(x) & HighSchoolCurricula(x)) -> BetterAligned(x,y))", "all x.((SAT(x) & HighSchoolCurricula(x)) -> BetterAligned(x,2016))", "all x.((SAT(x) & HigherSchoolCurricula(x)) -> BetterAligned(x,y))"]}
{"id": "folio_train_2383", "nl": "The SAT test is owned by the College Board and multiple other third parties.", "fol": "exists x.(-IsCollegeBoard(y) & IsOwnedBy(Sat,y))", "prediction": ["all x.(SATTest(x) -> (OwnedByCollegeBoard(x) & OwnedByMultipleThirdParties(x)))", "all x y.((SATTest(x) & CollegeBoard(y)) -> OwnedBy(x,y))", "all x.(SATTest(x) -> (OwnedByCollegeBoard(x) & OwnedByMultipleOtherParties(x)))", "all x y z.((SATTest(x) & CollegeBoard(y) & MultipleThirdParties(z)) -> OwnedBy(x,y,z))", "all x y z.((SATTest(x) & CollegeBoard(y) & ThirdParty(z)) -> OwnedBy(x,y,z))", "all x y.((SATTest(x) & CollegeBoard(y)) -> (OwnedBy(x,y) & OwnedBy(x,y)))", "all x y z.((SATTest(x) & CollegeBoard(y) & MultipleOtherParties(z)) -> OwnedBy(x,y,z))", "all x.(SATTest(x) -> (OwnedByCollegeBoard(x) & OwnedByMultipleParties(x)))", "all x.(SATTest(x) -> (OwnedBy(x,CollegeBoard) & OwnedBy(x,MultipleThirdParties)))", "all x y.((SATTest(x) & CollegeBoard(y) & MultipleThirdParties(x)) -> OwnedBy(x,y))", "all x.(SATTest(x) -> (OwnedByCollegeBoard(x) & OwnedByVariousThirdParties(x)))", "all x y z.((SATTest(x) & CollegeBoard(y) & MultipleThirdParties(z)) -> Owns(x,y,z))", "all x.(SATTest(x) -> (OwnedByCollegeBoard(x) | OwnedByMultipleThirdParties(x)))", "all x.(SatTest(x) -> (OwnedByCollegeBoard(x) & OwnedByMultipleThirdParties(x)))", "all x.(SATTest(x) -> (OwnedByCompanyBoard(x) & OwnedByMultipleThirdParties(x)))", "all x.(SATTest(x) -> (OwnedByCollegeBoard(x) & OwnedByMultipleThirdParties(x)))"]}
{"id": "folio_train_2384", "nl": "The SAT test assesses student's math skills.", "fol": "Assesses(Sat,MathSkills)", "prediction": ["all x y.((SATTest(x) & Student(y)) -> AssessesMathSkills(x,y))", "all x.(SATTest(x) -> AssessesMathSkills(x))", "all x.(SATTest(x) -> AssessesStudentMathSkills(x))", "all x y z.((SATTest(x) & Student(y) & MathSkills(z)) -> Assesses(x,y,z))", "all x y z.((SATTest(x) & Student(y) & MathSkill(z)) -> Assesses(x,y,z))", "all x.(SATTest(x) -> AssessesMathematicsSkills(x))", "all x y.((SATTest(x) & Student(y)) -> AssessesMathematicsSkills(x,y))", "all x y.((SATTest(x) & Student(y)) -> AssessesMathematicSkills(x,y))", "all x.((SATTest(x) & Student(y)) -> AssessesMathSkills(x,y))", "all x.(SATTest(x) -> AssessesStudentMathematicsSkills(x))", "all x.(SATTest(x) -> AssessesStudentsMathSkills(x))", "all x.(SAT(x) -> AssessesMathSkills(x))", "all x.(SATTest(x) -> AssessesMathematicalSkills(x))", "all x y.((SATTest(x) & Student(y)) -> AssessesMathSkills(y,x))", "all x.(SAT(x) -> AssessesStudentMathSkills(x))", "all x y.((SATTest(x) & Student(y)) -> AssessesMathematicalSkills(x,y))"]}
{"id": "folio_train_2385", "nl": "Rafa Nadal was born in Mallorca.", "fol": "BornInLocation(RafaNadal,Mallorca)", "prediction": ["Rafa Nadal was born in Mallorca.", "Rafa Nadal (bornInMallorca) & BornInMallorca(Rafa) & BornInMallorca(Rafa) & BornInMallorca(Rafa) & BornInMallorca(Rafa) & BornInMallorca(Rafa) & BornInMallorca(Rafa) & BornInMallorca(Rafa))", "Rafa Nadal (bornInMallorca) & BornInMallorca(Rafa) & BornInMallorca(Rafa) & BornInMallorca(Rafa) & BornInMallorca(Rafa) & BornInMallorca(Rafa) & BornInMallorca(Rafa) & BornInMallorca(Rafa) & BornInMallorca(Rafa", "Rafa Nadal was bornInMallorca(Rafa) & BornInMallorca(Rafa) & BornInMallorca(Rafa) & BornInMallorca(Rafa) & BornInMallorca(Rafa) & BornInMallorca(Rafa) & BornInMallorca(Rafa))", "Rafa Nadal was bornInMallorca(Rafa) & BornInMallorca(Rafa) & BornInMallorca(Rafa) & BornInMallorca(Rafa) & BornInMallorca(Rafa) & BornInMallorca(Rafa) & BornInMallorca(Rafa) & BornInMallorca(Rafa", "Rafa Nadal (bornInMallorca) & BornInMallorca(Rafa) & BornInMallorca(Rafa) & BornInMallorca(Rafa) & BornInMallorca(Rafa) & BornInMallorca(Rafa) & BornInMallorca(Rafa))", "Rafa Nadal was bornInMallorca(Rafa) & BornInMallorca(Rafa) & BornInMallorca(Rafa) & BornInMallorca(Rafa) & BornInMallorca(Rafa) & BornInMallorca(Rafa))", "RafaNadal was bornInMallorca(Rafa) & BornInMallorca(Rafa) & BornInMallorca(Rafa) & BornInMallorca(Rafa) & BornInMallorca(Rafa) & BornInMallorca(Rafa) & BornInMallorca(Rafa))", "RafaNadal was bornInMallorca(Rafa) & BornInMallorca(Rafa) & BornInMallorca(Rafa) & BornInMallorca(Rafa) & BornInMallorca(Rafa) & BornInMallorca(Rafa) & BornInMallorca(Rafa) & BornInMallorca(Rafa", "Rafa Nadal (BirthInMallorca))", "Rafa Nadal (bornInMallorca)", "Rafa Nadal (bornInMallorca) & BornInMallorca(Rafa) & BornInMallorca(Rafa) & BornInMallorca(Rafa) & BornInMallorca(Rafa) & BornInMallorca(Rafa))", "Rafa Nadal was bornInMallorca(Rafa) & BornInMallorca(Rafa) & BornInMallorca(Rafa) & BornInMallorca(Rafa) & BornInMallorca(Rafa) & BornInMallorca(Rafa) & BornInMallorca(Rafa,Mallorca))", "RafaNadal was bornInMallorca(Rafa) & BornInMallorca(Rafa) & BornInMallorca(Rafa) & BornInMallorca(Rafa) & BornInMallorca(Rafa) & BornInMallorca(Rafa))", "Rafa Nadal (bornInMallorca) & BornInMallorca(Rafa) & BornInMallorca(Rafa) & BornInMallorca(Rafa) & BornInMallorca(Rafa) & BornInMallorca(Rafa) & BornInMallorca(Rafa,Mallorca))", "Rafa Nadal was bornInMallorca(Rafa) & BornInMallorca(Rafa) & BornInMallorca(Rafa) & BornInMallorca(Rafa) & BornInMallorca(Rafa))"]}
{"id": "folio_train_2386", "nl": "Rafa Nadal is a professional tennis player.", "fol": "IsProfessionalTennisPlayer(RafaNadal)", "prediction": ["all x.(RafaNadal(x) -> ProfessionalTennisPlayer(x))", "(ProfessionalTennisPlayer(RafaNadal))", "all x.((RafaNadal(x) & ProfessionalTennisPlayer(x)) -> Professional(x))", "all x.((RafaNadal(x) & ProfessionalTennisPlayer(x)) -> RafaNadal(x))", "Rafa Nadal is a professional tennis player.", "(ProfessionalTennisPlayer(RafaNadal) & Professional(RafaNadal))", "(ProfessionalTennisPlayer(RafaNadal) & ProfessionalTennisPlayer(RafaNadal))", "(ProfessionalTennisPlayer(RafaNadal)", "all x.((RafaNadal(x) & ProfessionalTennisPlayer(x)) -> Plays(x,y))", "all x.((RafaNadal(x) & ProfessionalTennisPlayer(x)) -> Nadal(x))", "all x.((RafaNadal(x) & TennisPlayer(x)) -> Professional(x))", "(ProfessionalPlayer(RafaNadal) & ProfessionalTennisPlayer(RafaNadal))", "all x.(Nadal(x) -> ProfessionalTennisPlayer(x))", "all x.((RafaNadal(x) & ProfessionalTennisPlayer(x)) -> TennisPlayer(x))", "(ProfessionalTennisPlayer(RafaNadal) -> Professional(RafaNadal))", "(Professional(RafaNadal) -> ProfessionalTennisPlayer(RafaNadal))"]}
{"id": "folio_train_2387", "nl": "Nadal's win ratio is higher than 80%.", "fol": "HasHighWinRatio(RafaNadal)", "prediction": ["all x.(Nadal(x) -> WinRatioHigherThan80%(x))", "All x.(Nadal(x) -> WinRatioHigherThan80%(x))", "all x y.((Nadal(x) & WinRatio(y)) -> HigherThan80%(x,y))", "all x.((Nadal(x) & WinRatio(x,80%)) -> HigherThan(x,80%))", "all x y.((Nadal(x) & WinRatio(y,x)) -> HigherThan80%(x,y))", "all x y.((Nadal(x) & WinRatio(y,x)) -> HigherThan80%(y,x))", "Nadal's WinRatioHigherThan80%(Nadal)", "all x y.((Nadal(x) & WinRatio(y,x)) -> HigherThan(x,y))", "all x.((Nadal(x) & WinRatio(x,80%)) -> Higher(x,80%))", "all x y.((Nadal(x) & WinRatio(y,x)) -> HigherThan80%(x))", "all x.((Nadal(x) & WinRatio(x,80)) -> HigherThan(x,80))", "all x y.((Nadal(x) & WinRatio(y,x)) -> HigherThan80%(y))", "(WinRatio(Nadal) -HigherThan80%(Nadal))", "all x y.((Nadal(x) & WinRatio(y)) -> HigherThan80%(y))", "(WinRatio(Nadal) & HigherThan80%(Nadal))", "all x.((Nadal(x) & WinRatio(x,80)) -> HigherThan(x,80%))"]}
{"id": "folio_train_2388", "nl": "All players in the Big 3 are professionals who have a high win ratio.", "fol": "all x.((IsProfessionalTennisPlayer(x) & HasHighWinRatio(x)) -> IsInBig3(x))", "prediction": ["all x.(Big3(x) -> (Professional(x) & HighWinRatio(x)))", "all x.(Big3Player(x) -> (Professional(x) & HighWinRatio(x)))", "all x.((Player(x) & Big3(x)) -> (Professional(x) & HighWinRatio(x)))", "all x.((Player(x) & Big3(x)) -> Professional(x) & HighWinRatio(x))", "all x.(BigThree(x) -> (Professional(x) & HighWinRatio(x)))", "all x y.((Player(x) & Big3(y)) -> (Professional(x,y) & HighWinRatio(x,y)))", "all x.((Player(x) & Big3(x)) -> Professional(x))", "all x.(Big3Person(x) -> (Professional(x) & HighWinRatio(x)))", "all x y.((Player(x) & Big3(y)) -> (Professional(x) & HighWinRatio(x,y)))", "all x.(Big3(x) -> (ProfessionalPlayer(x) & HighWinRatio(x)))", "all x y.((Player(x) & Big3(y)) -> (Professional(x) & HighWinRatio(x)))", "all x.(Big3(x) -> (Professional(x) & HighWinRatio(x)))", "all x.((Player(x) & Big3(x)) -> HighWinRatio(x))", "all x.((Player(x) & Big3(x)) -> (Professional(x) & HighWinRelationship(x)))", "all x y.((Player(x) & Big3(y)) -> (Professional(x,y) & HighWinRatio(x)))", "all x.(Big3Player(x) -> (Professional(x) & HighWinRatio(x)))"]}
{"id": "folio_train_2389", "nl": "Nadal was not born in Mallorca.", "fol": "-BornInLocation(RafaNadal,Mallorca)", "prediction": ["-BirthInMallorca(Nadal)", "-BirthInMallorca(Nadal,Mallorca)", "Nadal -BirthInMallorca(Nadal,Mallorca))", "-(BirthInMallorca(Nadal) & BornInMallorca(Nadal))", "Nadal -BirthInMallorca(Nadal))", "-(Nadal(Nadal) & BornInMallorca(Nadal))", "Nadal -BirthInMallorca(n) & BornInMallorca(n))", "-(Nadal(n) & BornInMallorca(n)))", "Nadal n.((Birth(n) & Mallorca(n)) -> -Birth(n))", "Nadal -BirthInMallorca(n))", "Nadal & -BirthInMallorca(Nadal,Mallorca))", "Nadal & -BirthInMallorca(n) & BornInMallorca(n))", "-(BirthInMallorca(Nadal))", "-(Nadal(Nadal) & BornInMallorca(Nadal,Mallorca))", "Nadal n.((Birth(n) & Mallorca(n)) -> -BirthIn(n))", "(-BirthInMallorca(Nadal))"]}
{"id": "folio_train_2390", "nl": "Nadal is in the Big 3.", "fol": "IsInBig3(RafaNadal)", "prediction": ["Nadal is in Big3.", "Nadal is in the Big3.", "All x.(Nadal(x) -> Big3.(Nadal(x) & Big3.(Nadal(x)))", "All x.(Nadal(x) -> Big3.(Nadal(x) & Big3.(Nadal(x) & Big3.(Nadal(x))))", "Nadal is in Big3(Nadal,Big3))", "All x.(Nadal(x) -> Big3.(Nadal(x) & Big3.(Nadal) & Big3.(Nadal) & Big3.(Nadal) & Big3.(Nadal))))", "all x.(Nadal(x) -> Big3.(Nadal(x) & Big3.(Nadal(x) & Big3.(Nadal(x))))", "all x.(Nadal(x) -> Big3.(Nadal(x) & Big3.(Nadal(x)))", "All x.(Nadal(x) -> Big3.(Nadal(x) & Big3.(Nadal(x) & Big3.(Nadal(x) & Big3.(Nadal(x))))", "All x.(Nadal(x) -> Big3.(Nadal(x) & Big3.(Nadal(x) & Big3.(Nadal) & Big3.(Nadal) & Big3.(Nadal))))", "All x.(Nadal(x) -> Big3.(Nadal(x) & Big3.(Nadal(x) & Big3.(Nadal) & Big3.(Nadal(x))))", "All x.(Nadal(x) -> Big3.(Nadal(x) & Big3.(Nadal) & Big3.(Nadal) & Big3.(Nadal))))", "All x.(Nadal(x) -> Big3.(NadalInBig3.(x) & Big3.(NadalInBig3.(Nadal) & Big3.(NadalInBig3.)))", "all x.(Nadal(x) -> Big3.(Nadal(x) & Big3.(Nadal) & Big3.(Nadal) & Big3.(Nadal) & Big3.(Nadal))))", "All x.(Nadal(x) -> Big3.(Nadal(x) & Big3.(Nadal(x) & Big3.(Nadal) & Big3.(Nadal))))", "All x.(Nadal(x) -> Big3.(Nadal(x) & Big3.(Nadal) & Big3.(Nadal(x))))"]}
{"id": "folio_train_2391", "nl": "Nadal is the greatest player of all time.", "fol": "GreatestPlayerOfAllTime(RafaNadal)", "prediction": ["all x.(Nadal(x) -> GreatestPlayerOfAllTime(x))", "All x.(Nadal(x) -> GreatestPlayerOfAllTime(x))", "All x.(Nadal(x) -> GreatestPlayer(x))", "all x.(Nadal(x) -> GreatestPlayer(x))", "All x.(Nadal(x) -> GreatestPlayerOfTime(x))", "all x.(Nadal(x) -> GreatestPlayerOfTime(x))", "Nadal is the greatest player of all time.", "Nadal is the greatestPlayerOfAllTime(Nadal)", "Nadal is the greatestPlayerOfAllTime(n) -> GreatestPlayerOfTime(n))", "Nadal is greatestPlayerOfAllTime(n) -> GreatestPlayerOfTime(n))", "Nadal is the greatestPlayerOfAllTime(n) -> GreatestPlayer(n))", "Nadal is greatestPlayerOfAllTime(Nadal)", "all x.(Nadal(x) -> GreatestPlayerAllTime(x))", "Nadal is the greatestPlayerOfAllTime(n) -> Greatest(n))", "Nadal is the GreatestPlayerOfAllTime(Nadal)", "Nadal is the greatestplayerofalltime."]}
{"id": "folio_train_2392", "nl": "No cookie is healthy.", "fol": "all x.(IsCookie(x) -> -IsHealthy(x))", "prediction": ["-exists x.(Cookie(x) & Healthy(x))", "all x.(Cookie(x) -> -Healthy(x))", "-exists x.(Coffee(x) & Healthy(x))", "-all x.(Cookie(x) -> Healthy(x))", "(-exists x.(Cookie(x) & Healthy(x)))", "-(Cookie(x) & Healthy(x))", "-exists x.(Cookie(x) & Healthy(x))", "-exists x.(Cookie(x) & -Healthy(x))", "-exists x.(Cookie(x) & Healthful(x))", "-exists x.(Chocolate(x) & Healthy(x))", "All x.(Cookie(x) -> -Healthy(x))", "-exists x.((Cookie(x) & Healthy(x)))", "-exists x.(Cookie(x) & Healthy(x)))", "- exists x.(Cookie(x) & Healthy(x))", "exists x.(Cookie(x) & -Healthy(x))", "-exists x.((Cookie(x) & Healthy(x))"]}
{"id": "folio_train_2393", "nl": "All oreos are cookies.", "fol": "all x.(IsOreo(x) -> IsCookie(x))", "prediction": ["all x.(Oreo(x) -> Cookies(x))", "all x.(Oreo(x) -> Cookie(x))", "all x y.((Oreo(x) & Cookie(y)) -> Cookie(x))", "all x y.((Oreo(x) & Cookie(y)) -> Cookies(x))", "all x.(Oreo(x) -> Cookie(x))", "all x y.((Oreo(x) & Cookie(y)) -> Cookie(x,y))", "all x.(Oreo(x) -> Cookies(x))", "all x.((Oreo(x) & Cookie(x)) -> Cookie(x))", "all x.(Oreo(x) -> Cookies(x))", "all x y.((Oreo(x) & Cookie(y)) -> Cookies(x,y))", "all x.((Oreo(x) & Cookie(x)) -> Cookies(x))", "all x.((Oreo(x) & Cookies(x)) -> Cookie(x))", "all x.(Oreo(x) -> Cookie(x))", "all x.exists y.(Oreo(x) & Cookie(y) & UsedBy(x,y))", "all x.exists y.(Oreo(x) & Cookie(y) & Contains(x,y))", "all x.((Oreo(x) & Cookies(x)) -> Cookies(x))"]}
{"id": "folio_train_2394", "nl": "All cookies are delicious.", "fol": "all x.(IsCookie(x) -> Delicious(x))", "prediction": ["all x.(Cookie(x) -> Delicious(x))", "all x y.((Cookie(x) & Cookie(y)) -> Delicious(x))", "all x.((Cookie(x) & Delicious(x)) -> Cookie(x))", "all x y.((Cookie(x) & Cookie(y)) -> Delicious(x,y))", "all x.((Cookie(x) & Delicious(x)) -> Cookies(x))", "all x.((Cookie(x) & Delicious(x)) -> Delicious(x))", "all x.((Cookie(x) & Delicious(x)) -> Baked(x))", "all x.(Coffee(x) -> Delicious(x))", "all x.(Cookie(x) -> Delightful(x))", "(all x.(Cookie(x) -> Delicious(x)))", "all x y.((Cookie(x) & Cookies(y)) -> Delicious(x))", "all x.(Cookie(x) -> Delicious(x))", "All x.(Cookie(x) -> Delicious(x))", "all x.exists y.(Cookie(x) & Cookie(y) & Delicious(x,y))", "all x.((Cookie(x) & Delicious(x)) -> Delightful(x))", "all x.exists y.(Cookie(x) & Cookie(y) & Delicious(x))"]}
{"id": "folio_train_2395", "nl": "No animals are plants. ", "fol": "all x.(IsAnimal(x) -> -IsPlant(x))", "prediction": ["-exists x.(Animal(x) & Plant(x))", "all x.(Animal(x) -> -Plant(x))", "all x.(Animal(x) -> Plant(x))", "all x.exists y.(Animal(x) & Plant(y) & -exists z.(Animal(z) & Plant(z) & -exists w.(Animal(w) & Plant(w) & -exists w.(Animal(w) & Plant(w) & -exists w.(Animal(w) & Plant(w)))))", "all x.exists y.(Animal(x) & Plant(y) & -exists z.(Animal(z) & Plant(z) & -exists w.(Animal(w) & Plant(w) & -exists w.(Animal(w) & Plant(w)) & -exists w.(Animal(w) & Plant(w))))", "all x.exists y.(Animal(x) & Plant(y) & -exists z.(Animal(z) & Plant(z) & -exists w.(Animal(w) & Plant(w) & -exists w.(Animal(w) & Plant(w)) & -exists w.(Animal(w) & Plant(w) & Plant(w))))", "all x.exists y.(Animal(x) & Plant(y) & -exists z.(Animal(z) & Plant(z) & -exists w.(Animal(w) & Plant(w) & -exists w.(Animal(w) & Plant(w)) & -exists w.(Animal(w) & Plant(w)))))", "all x.exists y.(Animal(x) & Plant(y) & -exists z.(Animal(z) & Plant(z) & -exists w.(Animal(w) & Plant(w)) & -exists w.(Animal(w) & Plant(w) & -exists w.(Animal(w) & Plant(w)))))", "all x.exists y.(Animal(x) & Plant(y) & -exists z.(Animal(z) & Plant(z) & -exists w.(Animal(w) & Plant(w) & -exists w.(Animal(w) & Plant(w)))))", "all x.exists y.(Animal(x) & Plant(y) & -exists z.(Animal(z) & Plant(z) & -exists w.(Animal(w) & Plant(w) & -exists w.(Animal(w) & Plant(w) & -exists w.(Animal(w) & Plant(w) & Plant(w))))", "all x.exists y.(Animal(x) & Plant(y) & -exists z.(Animal(z) & Plant(z)) & -exists w.(Animal(w) & Plant(w)) & -exists w.(Animal(w) & Plant(w)) & -exists w.(Animal(w) & Plant(w))))", "all x.exists y.(Animal(x) & Plant(y) & -exists z.(Animal(z) & Plant(z) & -exists w.(Animal(w) & Plant(w)) & -exists w.(Animal(w) & Plant(w))))", "all x.exists y.(Animal(x) & Plant(y) & -exists z.(Animal(z) & Plant(z) & -exists w.(Animal(w) & Plant(w) & -exists w.(Animal(w) & Plant(w))))", "all x.exists y.(Animal(x) & Plant(y) & -exists z.(Animal(z) & Plant(z) & -exists w.(Animal(w) & Plant(w)) & -exists w.(Animal(w) & Plant(w) & -exists w.(Animal(w) & Plant(w) & Plant(w))))", "all x.exists y.(Animal(x) & Plant(y) & -exists z.(Animal(z) & Plant(z)) & -exists w.(Animal(w) & Plant(w)) & -exists w.(Animal(w) & Plant(w)) & -exists w.(Animal(w) & Plant(w) & Plant(w)))", "all x.exists y.(Animal(x) & Plant(y) & -exists z.(Animal(z) & Plant(z) & -exists w.(Animal(w) & Plant(w) & -exists w.(Animal(w) & Plant(w) & -exists w.(Animal(w) & Plant(w)) & -exists w.(Animal(z) & Plant(z) & Plant(w))))"]}
{"id": "folio_train_2396", "nl": "All humans are animals.", "fol": "all x.(IsHuman(x) -> IsAnimal(x))", "prediction": ["all x.(Human(x) -> Animal(x))", "all x y.((Human(x) & Animal(y)) -> Animal(x))", "all x.(Habitat(x) -> Animal(x))", "all x.exists y.(Human(x) & Animal(y))", "all x.(Human(x) -> Animal(x))", "all x y.((Human(x) & Animal(y)) -> Animal(x,y))", "(all x.(Human(x) -> Animal(x)))", "all x.exists y.(Human(x) & Animal(y) & Animal(x))", "all x.exists y.(Human(x) & Animal(y) & Animal(y))", "all x.exists y.(Human(x) & Animal(y)) -> Animal(x))", "all x.exists y.(Human(x) & Animal(y) & Animal(x,y))", "all x.exists y.(Human(x) & Animal(y) & Animal(z))", "all x.exists y.(Human(x) & Animal(y) & Animal(x) & Animal(y))", "(All x.(Human(x) -> Animal(x)))", "exists x.(Human(x) & Animal(x))", "all x.exists y.(Human(x) & Animal(y)) -> Animal(x,y))"]}
{"id": "folio_train_2397", "nl": "All pupils are human.", "fol": "all x.(IsPupil(x) -> IsHuman(x))", "prediction": ["all x.(Pupil(x) -> Human(x))", "all x.exists y.(Pupil(x) & Human(y))", "all x.exists y.(Pupil(x) & Pupil(y) & Human(x))", "all x.(Pupil(x) -> Human(x))", "all x y.((Pupil(x) & Human(y)) -> Pupil(x))", "all x.(Pupill(x) -> Human(x))", "all x.((Pupil(x) & Human(x)) -> Pupil(x))", "all x.exists y.(Pupil(x) & Pupil(y) & Human(y))", "all x.(Pillow(x) -> Human(x))", "all x y.((Pupil(x) & Human(y)) -> Pupil(x,y))", "all x y.((Pupil(x) & Human(y)) -> Is(x,y))", "(all x.(Pupil(x) -> Human(x))", "exists x.(Pupil(x) & Human(x))", "all x.(Pupils(x) -> Human(x))", "(all x.(Pupil(x) -> Human(x)))", "all x.exists y.(Pupil(x) & Pupil(y) & Human(x,y))"]}
{"id": "folio_train_2398", "nl": "If Jack is a human or a flower, then Jack is a human and a flower.", "fol": "((IsHuman(Jack) | IsFlower(Jack)) -> (IsHuman(Jack) & IsFlower(Jack)))", "prediction": ["all x.((Human(x) | Flower(x)) -> (Human(x) & Flower(x)))", "all x.(Human(x) | Flower(x)) -> (Human(x) & Flower(x)))", "all x.((Jack(x) & (Human(x) | Flower(x))) -> (Human(x) & Flower(x)))", "all x.((Jack(x) & Human(x)) | Flower(x)) -> (Human(x) & Flower(x)))", "all x.((Human(x) | Flower(x)) -> (HasHuman(x) & HasFlower(x)))", "all x y.((Human(x) | Flower(x)) -> (Human(x) & Flower(y)))", "all x.(HumanOrFlower(x) -> (Human(x) & Flower(x)))", "all x y.((Human(x) | Flower(x)) -> (Human(y) & Flower(y)))", "((Human(Jack) | Flower(Jack))) -> (Human(Jack) & Flower(Jack)))", "(all x.(Human(x) | Flower(x))) -> (Human(x) & Flower(x)))", "all x.((Jack(x) & (Human(x) | Flower(x))) -> (HasHuman(x) & HasFlower(x)))", "all x.((Hunt(x) | Flower(x)) -> (Human(x) & Flower(x)))", "all x.((Human(x) | Flower(x)) -> (Human(x) | Flower(x)))", "all x.((Han(x) | Flower(x)) -> (Human(x) & Flower(x)))", "all x.(HasHuman(x) | Flower(x)) -> (Human(x) & Flower(x)))", "all x y.((Human(x) | Flower(y)) -> (Human(x) & Flower(x)))"]}
{"id": "folio_train_2399", "nl": "Jack is a pupil.", "fol": "IsPupil(Jack)", "prediction": ["all x.((Jack(x) & Pupil(x)) -> Pupil(x))", "(Pupil(Jack) & Pupil(Jack))", "all x.(Jack(x) -> Pupil(x))", "(Pupil(Jack))", "all x.(Pupil(x) -> Jack(x))", "All x.(Jack(x) -> Pupil(x))", "((Jack(Jack) & Pupil(Jack)) -> Pupil(Jack))", "all x.((Jack(x) & Pupil(x)) -> (Pupil(x) | Pupil(x)))", "all x.((Jack(x) & Pupil(x)) -> (Pupil(x) & Pupil(x)))", "all x.((Jack(x) & Pupil(x)) -> Is(x,y))", "(Pupil(Jack)", "(Pupil(Jack) & -Pupil(Jack))", "all x.(Pupil(x) -> Jack(x))", "all x.((Jack(x) & Pupil(x)) -> -Pupil(x))", "((Jack(Jack) & Pupil(Jack)) | Pupil(Jack)))", "All x.(Pupil(x) -> Jack(x))"]}
{"id": "folio_train_2400", "nl": "Jack is not a pupil.", "fol": "-IsPupil(Jack)", "prediction": ["(-Pupil(Jack))", "all x.((Jack(x) & -Pupil(x)) -> -Pupil(x))", "all x.(Jack(x) -> -Pupil(x))", "-Pupil(Jack)", "All x.(Jack(x) -> -Pupil(x))", "all x.((Jack(x) & -Pupil(x)) -> -(Pupil(x) & -Pupil(x)))", "all x.((Jack(x) & -Pupil(x)) -> -(Pupil(x) | Pupil(x))))", "all x.((Jack(x) & -Pupil(x)) -> -(Pupil(x) & Pupil(x)))", "all x.((Jack(x) & -Pupil(x)) -> -(Pupil(x) & -Pupil(x))))", "all x.(Pupil(x) -> -Pupil(x))", "(Pupil(Jack) & -Pupil(Jack))", "all x.((Jack(x) & -Pupil(x)) -> -(Pupil(x) & Pupil(x))))", "all x.((Jack(x) & -Pupil(x)) -> -(Pupil(x) | Pupil(x)))", "all x.((Jack(x) & -Pupil(x)) -> -(Jack(x) & -Pupil(x)))", "all x.((Jack(x) & -Pupil(x)) -> -Pupill(x))", "(-Pupil(Jack) & -Pupil(Jack))"]}
{"id": "folio_train_2401", "nl": "Jack is a plant.", "fol": "IsPlant(Jack)", "prediction": ["all x.(Jack(x) -> Plant(x))", "All x.(Jack(x) -> Plant(x))", "(Plant(Jack) & Plant(Jack))", "all x.((Jack(x) & Plant(x)) -> Plant(x))", "exists x.(Jack(x) & Plant(x))", "all x.(Jack(x) -> Plant(x))", "((Jack(Jack) & Plant(Jack)) -> Plant(Jack))", "(Plant(Jack) & -Plant(Jack))", "(Pest(Jack) & Plant(Jack))", "All x.(Jack(x) -> Plant(x))", "(Plant(Jack))", "((Jack(Jack) & Plant(Jack)))", "(Plant(Jack) & GrowsIn(Jack))", "ALL x.(Jack(x) -> Plant(x))", "(Plant(Jack) & HasPlant(Jack))", "((Jack(Jack) & Plant(Jack)) -> Plant(Jack))"]}
{"id": "folio_train_2402", "nl": "If Jack is a human, then Jack is not a pupil.", "fol": "(IsHuman(Jack) -> -IsPupil(Jack))", "prediction": ["all x.(Human(x) -> -Pupil(x))", "all x.((Human(x) & -Pupil(x)) -> -Human(x))", "all x.((Human(x) & Jack(x)) -> -Pupil(x))", "all x.(HasHuman(x) -> -Pupil(x))", "all x.((Human(x) & -Pupil(x)) -> -Pupil(x))", "all x.((Human(x) & Jack(y)) -> -Pupil(y))", "all x.((Human(x) & -Pupil(x)) -> Human(x))", "all x.((Jack(x) & Human(x)) -> -Pupil(x))", "all x.((Human(x) & -Pupil(x)) -> Jack(x))", "all x.((Human(x) & -Pupil(x)) -> NotHuman(x))", "all x.(Human(x) -> -Pupill(x))", "all x.((Human(x) & Pupil(x)) -> -Pupil(x))", "all x.((Human(x) & -Pupil(x)) -> JackNotPupil(x))", "all x.((Human(x) & -Pupil(x)) -> NoPupil(x))", "all x.((Human(x) & -Pupil(x)) -> JackIs(x,y))", "all x.(Human(x) -> (-Pupil(x)))"]}
{"id": "folio_train_2403", "nl": "No shoes are food. ", "fol": "all x.(IsShoe(x) -> -IsFood(x))", "prediction": ["-exists x.(Shoe(x) & Food(x))", "all x.(Shoe(x) -> -Food(x))", "-exists x.(Shoe(x) & -Food(x))", "(-exists x.(Shoe(x) & Food(x)))", "-exists x.(Shoes(x) & Food(x))", "-exists x.(Shoe(x) & Food(y))", "-exists x y.(Shoe(x) & Shoe(y) & Food(x))", "-all x.(Shoe(x) -> Food(x))", "all x.(Shoes(x) -> -Food(x))", "-exists x.(Shore(x) & Food(x))", "-exists x y.(Shoe(x) & Shoe(y) & Food(y))", "-exists x.(Shoe(x) & Feed(x))", "(exists x.(Shoe(x) & Food(x)))", "all x.(Shoe(x) -> Food(x))", "-exists x y.(Shoe(x) & Food(y))", "All x.(Shoe(x) -> -Food(x))"]}
{"id": "folio_train_2404", "nl": "All slippers are shoes.", "fol": "all x.(IsSlipper(x) -> IsShoe(x))", "prediction": ["all x.(Slipper(x) -> Shoes(x))", "all x.(Slipper(x) -> Shoe(x))", "all x y.((Slipper(x) & Shoe(y)) -> Shoes(x))", "all x.((Slipper(x) & Shoes(x)) -> Shoes(x))", "all x.((Slipper(x) & Shoes(x)) -> Slipper(x))", "all x.exists y.(Slipper(x) & Shoe(y) & DesignedFor(x,y))", "all x.(Slipper(x) -> Shoes(x))", "all x y.((Slipper(x) & Shoe(y)) -> Shoes(x,y))", "all x.(Slippers(x) -> Shoes(x))", "(all x.(Slipper(x) -> Shoes(x))", "all x.(Shaper(x) -> Shoes(x))", "all x.exists y.(Slipper(x) & Shoe(y) & Slipper(x))", "all x y.((Slipper(x) & Shoe(y)) -> Shoe(x))", "all x.exists y.(Slipper(x) & Shoe(y) & DesignedBy(x,y))", "all x.exists y.(Slipper(x) & Shoe(y) & Shoes(x))", "all x.(Shoes(x) -> Slipper(x))"]}
{"id": "folio_train_2405", "nl": "A thing is either food or clothes.", "fol": "all x.((IsFood(x) & -IsClothing(x)) | (-IsFood(x) & IsClothing(x)))", "prediction": ["all x.(Thing(x) -> (Food(x) | Clothing(x)))", "all x.(Thing(x) -> (Food(x) | Clothes(x)))", "exists x.(Thing(x) & (Food(x) | Clothing(x)))", "all x.(Ding(x) -> (Food(x) | Clothing(x)))", "exists x.(Thing(x) & (Food(x) | Clothes(x)))", "all x.(Ding(x) -> (Food(x) | Clothes(x)))", "all x.(Dog(x) -> (Food(x) | Clothing(x)))", "exists x.(Ding(x) & (Food(x) | Clothing(x)))", "all x.((Thing(x) & (Food(x) | Clothing(x))) -> (Food(x) | Clothing(x)))", "all x.(Dog(x) -> (Food(x) | Clothes(x)))", "exists x.(Ding(x) & (Food(x) | Clothes(x)))", "all x.(Tad(x) -> (Food(x) | Clothing(x)))", "all x.(Thing(x) -> ((Food(x) | Clothing(x))))", "all x.(Tad(x) -> (Food(x) | Clothes(x)))", "all x.(Tea(x) -> (Food(x) | Clothing(x)))", "all x.(Thing(x) -> (Food(x) | Clothing(x)))"]}
{"id": "folio_train_2406", "nl": "No wearable things are airtight.", "fol": "all x.(IsWearable(x) -> -IsAirtight(x))", "prediction": ["-exists x.(WearableThing(x) & Airtight(x))", "-exists x.(Wearable(x) & Airtight(x))", "-exists x.(WornableThing(x) & Airtight(x))", "all x.(WearableThing(x) -> -Airtight(x))", "-exists x.(Wornable(x) & Airtight(x))", "-exists x.(WearableTen(x) & Airtight(x))", "-exists x.(WearableTask(x) & Airtight(x))", "all x.(Wearable(x) -> -Airtight(x))", "-exists x.(WearableToy(x) & Airtight(x))", "-exists x.(WearableTree(x) & Airtight(x))", "-all x.(WearableThing(x) -> Airtight(x))", "-exists x.(WearableThing(x) & -Airtight(x))", "-exists x.(WearableTeacher(x) & Airtight(x))", "-exists x.(Warnable(x) & Airtight(x))", "-all x.(Wearable(x) -> Airtight(x))", "-(WearableThing(x) & Airtight(x))"]}
{"id": "folio_train_2407", "nl": "All clothes are wearable. ", "fol": "all x.(IsClothing(x) -> IsWearable(x))", "prediction": ["all x.(Clothing(x) -> Wearable(x))", "all x.(Clothes(x) -> Wearable(x))", "all x y.((Clothing(x) & Clothes(y)) -> Wearable(x))", "all x.exists y.(Clothing(x) & Clothes(y) & Wearable(x))", "all x.exists y.(Clothing(x) & Clothes(y) & Wearable(x,y))", "all x y.((Clothing(x) & Clothes(y)) -> Wearable(x,y))", "all x.(Clothe(x) -> Wearable(x))", "all x.(Choice(x) -> Wearable(x))", "all x.exists y.(Clothing(x) & Clothes(y) & Wearable(y))", "all x y.((Clothing(x) & Clothes(y)) -> Wearable(y))", "all x.(Clothing(x) -> Wearable(x))", "all x y.((Clothing(x) & Clothes(y) & Wearable(x)) -> Wearable(x))", "all x y.((Clothing(x) & Clothes(y) & Wearable(x)) -> Wearable(y))", "exists x.(Clothing(x) & Wearable(x))", "all x.(Clothing(x) -> Wornable(x))", "(all x.(Clothing(x) -> Wearable(x)))"]}
{"id": "folio_train_2408", "nl": "If a watch is not airtight and clothes, then a watch is either both airtight and clothes, or neither airtight nor clothes.", "fol": "(((-(IsAirtight(Watch) & IsClothing(Watch)) -> (IsAirtight(Watch) & IsClothing(Watch))) & -(-IsAirtight(Watch) & -IsClothing(Watch))) | (-(-(IsAirtight(Watch) & IsClothing(Watch)) -> (IsAirtight(Watch) & IsClothing(Watch))) & -IsAirtight(Watch) & -IsClothing(Watch)))", "prediction": ["all x.((Watch(x) & -Airtight(x) & -Clothes(x)) -> (Airtight(x) & -Clothes(x)))", "all x.((Watch(x) & -Airtight(x) & -Clothes(x)) -> (Airtight(x) & -Clothes(x)) | -Airtight(x) & -Clothes(x)))", "all x.((Watch(x) & -Airtight(x) & -Clothes(x)) -> (Airtight(x) & -Clothes(x)) | (-Airtight(x) & -Clothes(x))))", "all x.((Watch(x) & -Airtight(x) & -Clothes(x)) -> ((Airtight(x) & Clothes(x)) | (-Airtight(x) & Clothes(x)))))", "all x.((Watch(x) & -Airtight(x) & -Clothes(x)) -> ((Airtight(x) & Clothing(x)) | (-Airtight(x) & Clothing(x)))))", "all x.((Watch(x) & -Airtight(x) & -Clothes(x)) -> ((Airtight(x) & Clothing(x)) | -Airtight(x) & Clothing(x))))", "all x.((Watch(x) & -Airtight(x) & -Clothes(x)) -> (Airtight(x) | -Clothes(x)))", "all x.((Watch(x) & -Airtight(x) & -Clothes(x)) -> ((Airtight(x) & Clothes(x)) | -Airtight(x) & Clothes(x))))", "all x.((Watch(x) & -Airtight(x) & -Clothes(x)) -> ((Airtight(x) & -Clothes(x)) | (-Airtight(x) & -Clothes(x)))))", "all x.((Watch(x) & -Airtight(x) & -Clothes(x)) -> ((Airtight(x) & Clothing(x)) | (-Airtight(x) & Clothing(x))))", "all x.((Watch(x) & -Airtight(x) & -Clothes(x)) -> (Airtight(x) | -Airtight(x) | -Clothes(x)))", "all x.((Watch(x) & -Airtight(x) & -Clothes(x)) -> ((Airtight(x) & -Clothes(x)) | -Airtight(x) & -Clothes(x))))", "all x.((Watch(x) & -Airtight(x) & -Clothes(x)) -> (Airtight(x) & -Clothes(x) & -Airtight(x) & -Clothes(x)))", "all x.((Watch(x) & -Airtight(x) & -Clothes(x)) -> ((Airtight(x) & Clothes(x)) | (-Airtight(x) & Clothes(x))))", "all x.((Watch(x) & -Airtight(x) & -Clothes(x)) -> ((Airtight(x) & -Clothes(x)) | (-Airtight(x) & -Clothes(x))))", "all x.((Watch(x) & -Airtight(x) & -Clothes(x)) -> (Airtight(x) & -Clothes(x)) | (-Airtight(x) & Clothing(x))))"]}
{"id": "folio_train_2409", "nl": "Watch is a wearable.", "fol": "IsWearable(Watch)", "prediction": ["all x.(Watch(x) -> Wearable(x))", "all x y.((Watch(x) & Wearable(y)) -> Wearable(x))", "All x.(Watch(x) -> Wearable(x))", "all x.(Watch(x) -> Wearable(x))", "all x y.((Watch(x) & Wearable(y)) -> Wearable(x,y))", "exists x.(Watch(x) & Wearable(x))", "all x.(Watch(x) -> Weaveable(x))", "all x y.((Watch(x) & Watch(y)) -> Wearable(x))", "all x y.((Watch(x) & Wearable(x)) -> Wearable(y))", "all x y.((Watch(x) & Wearable(x)) -> Wearable(x))", "all x y z.((Watch(x) & Wearable(y) & Wearable(z)) -> Wearable(x))", "all x y.((Watch(x) & Wearable(y)) -> Is(x,y))", "all x y z.((Watch(x) & Wearable(y) & Wearable(z)) -> Wearable(x,y,z))", "all x.(Watch(x) -> Wornable(x))", "all x y z.((Watch(x) & Watch(y) & Wearable(z)) -> Wearable(x))", "all x y.((Watch(x) & Wearable(y)) -> (Wearable(x) & Wearable(y)))"]}
{"id": "folio_train_2410", "nl": "Watch is a slipper.", "fol": "IsSlipper(Watch)", "prediction": ["all x.(Watch(x) -> Slipper(x))", "All x.(Watch(x) -> Slipper(x))", "all x y.((Watch(x) & Slipper(y)) -> Slipper(x))", "all x.(Watch(x) -> Slipper(x))", "all x y.((Watch(x) & Slipper(y)) -> Slipper(x,y))", "All x y.((Watch(x) & Slipper(y)) -> Slipper(x))", "exists x.(Watch(x) & Slipper(x))", "all x y.((Watch(x) & Slipper(y)) -> Slipper(y))", "all x y.((Watch(x) & Slipper(x)) -> Slipper(y))", "all x.(Watch(x) & Slipper(x))", "All x y.((Watch(x) & Slipper(y)) -> Slipper(x,y))", "all x y.((Watch(x) & Slipper(y)) -> Slipper(z))", "all x y.((Watch(x) & Slipper(y)) -> Slippers(x))", "all x y.((Watch(x) & Slipper(y)) -> Is(x,y))", "All x.(Watch(x) -> Slipper(x))", "all x y.((Watch(x) & Slipper(y)) -> Has(x,y))"]}
{"id": "folio_train_2411", "nl": "Watch is neither airtight nor a slipper.", "fol": "(-IsAirtight(Watch) & -IsSlipper(Watch))", "prediction": ["all x.(Watch(x) -> (-Airtight(x) | Slipper(x)))", "all x.(Watch(x) -> (-Airtight(x) & -Slipper(x)))", "all x.(Watch(x) -> -(Airtight(x) | Slipper(x)))", "All x.(Watch(x) -> (-Airtight(x) & -Slipper(x)))", "all x.(Watch(x) -> (NeitherAirtight(x) & -Slipper(x)))", "all x.(Watch(x) -> (-Airtight(x) & -Slipper(x)))", "(-Airtight(Watch) & -Slipper(Watch))", "exists x.(Watch(x) & -(Airtight(x) | Slipper(x)))", "All x.(Watch(x) -> (-Airtight(x) | Slipper(x)))", "all x.(Watch(x) -> (-Airtight(x) | Slipper(x)))", "exists x.(Watch(x) & -Airtight(x) & -Slipper(x))", "-(Airtight(Watch) | Slipper(Watch))", "all x.(Watch(x) -> (NecessarilyAirtight(x) & -Slipper(x)))", "all x.(Watch(x) -> (NecessaryAirtight(x) & -Slipper(x)))", "all x.(Watch(x) & -(Airtight(x) | Slipper(x)))", "all x.(Watch(x) -> ((Airtight(x) | Slipper(x))))"]}
{"id": "folio_train_2412", "nl": "An Olympian is a person who trains for an Olympic sport and goes to the Olympics.", "fol": "all x.((TrainsForOlympicSport(x) & AttendsOlympicGames(x)) -> IsOlympian(x))", "prediction": ["all x.(Olympian(x) -> (TrainsForOlympicSport(x) & GoesToOlympics(x)))", "all x.(Olympian(x) -> (TrainsForOlympicSport(x) & GoesToOlympics(x)))", "all x.(OlympicPerson(x) -> (TrainsForOlympicSport(x) & GoesToOlympics(x)))", "all x.(OlympicPerson(x) -> (TrainsForOlympicSport(x) & GoesToOlympics(x)))", "all x y.((Olympian(x) & Person(y)) -> (TrainsForOlympicSport(y,x) & GoesToOlympics(y,x)))", "all x.(Olympian(x) -> exists y.(OlympicSport(y) & TrainsFor(x,y)) & exists z.(Olympics(z) & GoesTo(x,z))))", "all x.(Olympian(x) -> exists y.(OlympicSport(y) & TrainsFor(x,y)) & exists z.(OlympicSport(z) & GoesTo(x,z))))", "all x.(Olympian(x) -> (TrainedForOlympicSport(x) & GoesToOlympics(x)))", "all x.(Olympics(x) -> (TrainsForOlympicSport(x) & GoesToOlympics(x)))", "all x.(Olympics(x) -> (TrainsForOlympicSport(x) & GoesToOlympics(x)))", "all x.(Olympian(x) -> exists y.(OlympicSport(y) & TrainsFor(x,y)) & exists z.(OlympicStandard(z) & GoesTo(x,z))))", "all x y.((Olympian(x) & Person(y)) -> (TrainsForOlympicSport(y) & GoesToOlympics(y)))", "all x.(Olympic(x) -> (TrainsForOlympicSport(x) & GoesToOlympics(x)))", "all x y.((Person(x) & Olympian(y)) -> (TrainsForOlympicSport(x,y) & GoesToOlympics(x,y)))", "all x.(Olympian(x) -> (TrainedForOlympicSport(x) & GoesToOlympics(x)))", "all x.(Olympic(x) -> (TrainsForOlympicSport(x) & GoesToOlympics(x)))"]}
{"id": "folio_train_2413", "nl": "Carlos Reyes trains for an Olympic sport.", "fol": "TrainsForOlympicSport(CarlosReyes)", "prediction": ["all x y.((CarlosReyes(x) & OlympicSport(y)) -> TrainsFor(x,y))", "all x.((CarlosReyes(x) & OlympicSport(y)) -> TrainsFor(x,y))", "all x.(CarlosReyes(x) -> TrainsForOlympicSport(x))", "all x y z.((CarlosReyes(x) & OlympicSport(y) & OlympicSport(z)) -> TrainsFor(x,y,z))", "all x.((CarlosReyes(x) & OlympicSport(x)) -> TrainsFor(x,y))", "all x.((CarlosReyes(x) & OlympicSport(x)) -> TrainsFor(x))", "all x y z.((CarlosReyes(x) & OlympicSport(y) & Sport(z)) -> TrainsFor(x,y,z))", "all x y.((CarloReyes(x) & OlympicSport(y)) -> TrainsFor(x,y))", "all x y z.((CarlosReyes(x) & OlympicSport(y) & OlympicSport(z)) -> TrainsFor(x,y))", "all x y.((CarlosReyes(x) & OlympicSport(y)) -> Trains(x,y))", "all x y z.((CarlosReyes(x) & OlympicSport(y) & OlympicSport(z)) -> Trains(x,y,z))", "all x y z.((CarlosReyes(x) & OlympicSport(y) & OlympicSport(z)) -> TrainsFor(x,z))", "all x.((CarlosReyes(x) & OlympicSport(x)) -> TrainsFor(x,x))", "all x y z.((CarlosReyes(x) & OlympicSport(y) & Sport(z)) -> TrainsFor(x,y))", "all x.((CarloReyes(x) & OlympicSport(y)) -> TrainsFor(x,y))", "all x y.((CarlosReyes(x) & OlympianSport(y)) -> TrainsFor(x,y))"]}
{"id": "folio_train_2414", "nl": "Carlos Reyes went to the Olympics.", "fol": "AttendsOlympicGames(CarlosReyes)", "prediction": ["all x.((CarlosReyes(x) & GoesToOlympics(x)) -> GoesToOlympics(x))", "all x.(CarlosReyes(x) -> GoesToOlympics(x))", "all x y.((CarlosReyes(x) & Olympics(y)) -> GoesTo(x,y))", "all x.((CarlosReyes(x) & GoesToOlympics(x)) -> GoesTo(x,y))", "all x.((CarlosReyes(x) & GoesToOlympics(x)) -> GoesTo(x,Olympics))", "all x.((CarlosReyes(x) & GoesToOlympics(x)) -> GoesTo(x))", "all x y.((CarlosReyes(x) & Olympic(y)) -> GoesTo(x,y))", "All x.((CarlosReyes(x) & GoesToOlympics(x)) -> GoesToOlympics(x))", "all x.((CarloReyes(x) & GoesToOlympics(x)) -> GoesToOlympics(x))", "All x.(CarlosReyes(x) -> GoesToOlympics(x))", "all x y.((CarlosReyes(x) & Olympics(y)) -> GoesTo(x,y))", "all x.((CarlosReyes(x) & GoesToOlympics(x)) -> GoesTo(x,olympics))", "All x y.((CarlosReyes(x) & Olympics(y)) -> GoesTo(x,y))", "all x y.((CarlosReyes(x) & Games(y)) -> GoesTo(x,y))", "all x y.((CarlosReyes(x) & Olympiad(y)) -> GoesTo(x,y))", "all x.(CarloReyes(x) -> GoesToOlympics(x))"]}
{"id": "folio_train_2415", "nl": "Carlos Reyes is a welterweight.", "fol": "IsWelterweight(CarlosReyes)", "prediction": ["all x.(CarlosReyes(x) -> Welterweight(x))", "all x.(CarlosReyes(x) -> Westerweight(x))", "all x.((CarlosReyes(x) & Welterweight(x)) -> Is(x,y))", "all x.((CarlosReyes(x) & Welterweight(x)) -> Warrior(x))", "all x.(CarlosReyes(x) -> Welderweight(x))", "all x.(CarlosReyes(x) -> Wederweight(x))", "all x.((CarlosReyes(x) & Westerweight(x)) -> Westerweight(x))", "all x.((CarlosReyes(x) & Welterweight(x)) -> Welderweight(x))", "all x.((CarlosReyes(x) & Welterweight(x)) -> Becomes(x))", "all x.(Winterweight(x) -> CarlosReyes(x))", "all x.((CarlosReyes(x) & Welterweight(x)) -> Wackerweight(x))", "all x.((CarlosReyes(x) & Welterweight(x)) -> Has(x,y))", "all x.(CarlosReyes(x) -> Westernerweight(x))", "all x.(CarlosReyes(x) -> Wetterweight(x))", "all x.((CarlosReyes(x) & Welterweight(x)) -> Warriorweight(x))", "all x.((CarlosReyes(x) & Welderweight(x)) -> Is(x,y))"]}
{"id": "folio_train_2416", "nl": "Heavy weights are not welterweights.", "fol": "all x.(IsWelterweight(x) -> -IsHeavyweight(x))", "prediction": ["all x.(HeavyWeight(x) -> -WesternWeight(x))", "all x.(HeavyWeight(x) -> -Weighterweight(x))", "all x.(HeavyWeight(x) -> -Welderweight(x))", "all x.(HeavyWeight(x) -> -Welterweight(x))", "all x.((HeavyWeight(x) & -WesternWeight(x)) -> -Weight(x))", "all x.((HeavyWeight(x) & -Weighterweight(x)) -> -Weighterweight(x))", "all x.(HeavyWeight(x) -> -Weatherweight(x))", "all x.(HeavyWeight(x) -> -Wetterweight(x))", "all x.((HeavyWeight(x) & -Welderweight(x)) -> -Weight(x))", "all x.(HeavyWeight(x) -> -Westerweight(x))", "all x.((HeavyWeight(x) & -Weighterweight(x)) -> -WeighterWeight(x))", "all x.((HeavyWeight(x) & -Weight(x)) -> -Weight(x))", "all x.((HeavyWeight(x) & -Weight(x)) -> Welterweight(x))", "all x.((HeavyWeight(x) & -Welderweight(x)) -> -Welderweight(x))", "all x.((HeavyWeight(x) & -WesternWeight(x)) -> -WeighterWeight(x))", "all x.(HeavyWeight(x) -> -Wearerweight(x))"]}
{"id": "folio_train_2417", "nl": "Carlos Reyes is an Olympian.", "fol": "IsOlympian(CarlosReyes)", "prediction": ["all x.((CarlosReyes(x) & Olympian(x)) -> Is(x,y))", "All x.((CarlosReyes(x) & Olympian(x)) -> Is(x,y))", "Carlos Reyes is Olympian(x)", "all x.((CarlosReyes(x) & Olympian(x)) -> LivesIn(x,y))", "(Olympian(CarlosReyes))", "all x.((CarlosReyes(x) & Olympian(x)) -> Reyes(x))", "All x.((CarlosReyes(x) & Olympian(x)) -> Reyes(x))", "All x.((CarlosReyes(x) & Olympian(x)) -> LivesIn(x,y))", "all x.((CarlosReyes(x) & Olympian(x)) -> Becomes(x))", "all x.((CarlosReyes(x) & Olympian(x)) -> WorksFor(x,y))", "all x.((CarlosReyes(x) & Olympian(x)) -> -Olympic(x))", "all x.((CarlosReyes(x) & Olympian(x)) -> Has(x,y))", "(Olympic(CarlosReyes) & Olympian(CarlosReyes))", "All x.((CarlosReyes(x) & Olympian(x)) -> Becomes(x))", "(Olympic(CarlosReyes) & Olympian(Carlos))", "all x.((CarlosReyes(x) & Olympian(x)) -> LivesIn(x))"]}
{"id": "folio_train_2418", "nl": "Carlos Reyes is a heavy weight.", "fol": "IsHeavyweight(CarlosReyes)", "prediction": ["all x.(CarlosReyes(x) -> HeavyWeight(x))", "all x.((CarlosReyes(x) & HeavyWeight(x)) -> HeavyWeight(x))", "all x.((CarlosReyes(x) & HeavyWeight(x)) -> Reyes(x))", "All x.(CarlosReyes(x) -> HeavyWeight(x))", "all x.((CarlosReyes(x) & HeavyWeight(x)) -> CarlosReyes(x))", "all x y.((CarlosReyes(x) & Weight(y)) -> Heavy(x,y))", "all x.((CarlosReyes(x) & HeavyWeight(x)) -> CarlosReyes(x))", "all x.((CarlosReyes(x) & HeavyWeight(x)) -> Is(x,y))", "all x.(CarloReyes(x) -> HeavyWeight(x))", "all x.(CarlosReyes(x) -> HeavyWeight(x))", "all x y.((CarlosReyes(x) & Weight(y)) -> Heavy(x))", "all x.((CarlosReyes(x) & HeavyWeight(x)) -> StrongWeight(x))", "all x.(CarlosReyes(x) -> HeavyWeight(x))", "all x.((CarlosReyes(x) & HeavyWeight(x)) -> HeavyWeight(x))", "all x.((CarlosReyes(x) & HeavyWeight(x)) -> Has(x,y))", "all x.(Reyes(x) -> HeavyWeight(x))"]}
{"id": "folio_train_2419", "nl": "Carlos Reyes won an Olympic medal.", "fol": "WonOlympicMedal(CarlosReyes)", "prediction": ["all x y.((CarlosReyes(x) & OlympicMedal(y)) -> Won(x,y))", "all x.((CarlosReyes(x) & OlympicMedal(y)) -> Won(x,y))", "all x.((CarlosReyes(x) & OlympicMedal(x)) -> Won(x,y))", "all x.((CarlosReyes(x) & WonOlympicMedal(x)) -> WonOlympicMedal(x))", "all x.((CarlosReyes(x) & OlympicMedal(x)) -> Won(x))", "all x y z.((CarlosReyes(x) & OlympicMedal(y) & Medal(z)) -> Won(x,y,z))", "all x y.((CarlosReyes(x) & OlympicMedal(y)) -> Wins(x,y))", "all x.((CarlosReyes(x) & WonOlympicMedal(x)) -> CarlosReyes(x))", "all x.((CarlosReyes(x) & OlympicMedal(y)) -> Wins(x,y))", "Carlos Reyes wonsOlympicMedal(x)", "all x.((CarlosReyes(x) & WonOlympicMedal(x)) -> Won(x))", "all x y z.((CarlosReyes(x) & OlympicMedal(y) & Medal(z)) -> Won(x,y))", "all x.((CarlosReyes(x) & OlympicMedal(x)) -> Wins(x,y))", "all x.((CarlosReyes(x) & OlympicMedal(x)) -> Wins(x))", "all x.(CarlosReyes(x) -> WonOlympicMedal(x))", "all x y z.((CarlosReyes(x) & OlympicMedal(y) & Medal(z)) -> Wins(x,y,z))"]}
{"id": "folio_train_2420", "nl": "If people have a lot of decorations in their room, they cannot pack and move out of their rooms very easily.", "fol": "all x.(HasDecorations(x) -> -CanMoveOutEasily(x))", "prediction": ["all x.((Person(x) & LotsOfDecorationsInRoom(x)) -> -(PackInRoom(x) & MoveOutRoom(x)))", "all x.((Person(x) & LotsOfDecorationsInRoom(x)) -> -CanPackAndMoveOutOfRooms(x))", "all x.((Person(x) & LotsOfDecorationsInRoom(x)) -> -CanPackAndMoveOutOfRoom(x))", "all x.((Person(x) & LotsOfDecorationsInRoom(x)) -> -CanPackAndMoveOut(x))", "all x.((Person(x) & LotsOfDecorationsInRoom(x)) -> -PackAndMoveOutOfRooms(x))", "all x.((Person(x) & LotsOfDecorations(x)) -> -(PackInRoom(x) & MoveOutRoom(x)))", "all x.((Person(x) & LotsOfDecorations(x)) -> -CanPackAndMoveOutOfRooms(x))", "all x.((Person(x) & LotsOfDecorationsInRoom(x)) -> CannotPackAndMoveOutOfRooms(x))", "all x.((Person(x) & LotsOfDecorationsInRoom(x)) -> -(Pack(x) & MoveOut(x)))", "all x.((Person(x) & LotsOfDecorationsInRoom(x)) -> -CanPackAndMoveOutOfRoomsEasily(x))", "all x.((People(x) & LotsOfDecorationsInRoom(x)) -> -CanPackAndMoveOutOfRooms(x))", "all x.((Person(x) & LotsOfDecorations(x)) -> -CanPackAndMoveOut(x))", "all x y.((Person(x) & Room(y) & LotsOfDecorations(x,y)) -> -CanPackAndMoveOut(x,y))", "all x.((Person(x) & LotsOfDecorations(x)) -> -PackAndMoveOutOfRooms(x))", "all x.((Person(x) & LotsOfDecorationsInRoom(x)) -> -PackAndMoveOutOfRoom(x))", "all x.((Person(x) & LotsOfDecorationsInRoom(x)) -> -(PackInRoom(x) & MoveOutRoom(x))))"]}
{"id": "folio_train_2421", "nl": "If people have high ambitions and future career goals, then they can pack and move out of their rooms very easily.", "fol": "all x.(HasHighAmbitions(x) -> CanMoveOutEasily(x))", "prediction": ["all x.((Person(x) & HighAmbitions(x) & FutureCareerGoals(x)) -> CanPackAndMoveOut(x))", "all x.((Person(x) & HighAmbitions(x) & FutureCareerGoals(x)) -> PackAndMoveOutOfRooms(x))", "all x.((Person(x) & HighAmbitions(x) & FutureCareerGoals(x)) -> CanPackAndMoveOutOfRooms(x))", "all x.((HighAmbitions(x) & FutureCareerGoals(x)) -> CanPackAndMoveOut(x))", "all x.((Person(x) & HighAmbitions(x) & FutureCareerGoals(x)) -> (Pack(x) & MoveOut(x)))", "all x.((Person(x) & HighAmbitions(x) & FutureCareerGoals(x)) -> PackAndMoveOut(x))", "all x.((Person(x) & HighAmbitions(x) & FutureCareerGoals(x)) -> (PackInRooms(x) & MoveOutRooms(x)))", "all x.((HighAmbitions(x) & FutureCareerGoals(x)) -> PackAndMoveOutOfRooms(x))", "all x.((HighAmbitions(x) & FutureCareerGoals(x)) -> PackAndMoveOut(x))", "all x.((HighAmbitions(x) & FutureCareerGoals(x)) -> CanPackAndMoveOutOfRooms(x))", "all x.((Person(x) & HighAmbiances(x) & FutureCareerGoals(x)) -> CanPackAndMoveOut(x))", "all x.((Person(x) & HighAmbitions(x) & FutureCareerGoals(x)) -> (PackInRoom(x) & MoveOutRoom(x)))", "all x.((HighAmbitions(x) & FutureCareerGoals(x)) -> (Pack(x) & MoveOut(x)))", "all x.((People(x) & HighAmbitions(x) & FutureCareerGoals(x)) -> CanPackAndMoveOut(x))", "all x y.((Person(x) & HighAmbitions(x) & FutureCareerGoals(x)) -> CanPackAndMoveOut(x,y))", "all x.((Person(x) & HighAmbitions(x) & FutureCareerGoals(x)) -> PackAndMoveOutOfRoomsEasily(x))"]}
{"id": "folio_train_2422", "nl": "If people are big fans of pop bands and singers, then they have a lot of decorations in their room.", "fol": "all x.(IsBigFanOfPopBands(x) -> HasDecorations(x))", "prediction": ["all x.((Person(x) & BigFanOfPopBands(x) & BigFanOfSingers(x)) -> LotsOfDecorationsInRoom(x))", "all x.((People(x) & BigFanOfPopBands(x) & BigFanOfSingers(x)) -> LotsOfDecorationsInRoom(x))", "all x.((Fan(x) & BigFanOfPopBands(x) & BigFanOfSingers(x)) -> LotsOfDecorationsInRoom(x))", "all x.((PopPopFan(x) & BigFanOfPopBands(x) & BigFanOfSingers(x)) -> LotsOfDecorationsInRoom(x))", "all x.((People(x) & BigFansOfPopBands(x) & BigFansOfSingers(x)) -> LotsOfDecorationsInRoom(x))", "all x.((Person(x) & BigFanOfPopBands(x) & BigFanOfSingers(x)) -> LotsOfDecorations(x))", "all x.((Person(x) & BigFansOfPopBands(x) & BigFansOfSingers(x)) -> LotsOfDecorationsInRoom(x))", "all x.((Person(x) & BigFanOfPopBands(x) & BigFanOfSingers(x)) -> HasLotsOfDecorationsInRoom(x))", "all x.((PopBand(x) & Singer(x) & BigFan(x)) -> LotsOfDecorationsInRoom(x))", "all x.((People(x) & BigFanOfPopBands(x) & BigFanOfSingers(x)) -> LotsOfDecorations(x))", "all x.((PopBand(x) & Singer(x)) -> LotsOfDecorationsInRoom(x))", "all x.((People(x) & BigFanOfPopBands(x) & BigFanOfSingers(x)) -> HasLotsOfDecorationsInRoom(x))", "all x.((Person(x) & BigFanOfPopBandsAndSingers(x)) -> LotsOfDecorationsInRoom(x))", "all x.((PopBand(x) | Singer(x)) -> LotsOfDecorationsInRoom(x))", "all x.((Fan(x) & PopBands(x) & Singers(x)) -> LotsOfDecorationsInRoom(x))", "all x.((Person(x) & BigFanOfPopBands(x) & BigFanOfSingers(x)) -> HasLotsOfDecorations(x))"]}
{"id": "folio_train_2423", "nl": "All young teenage girls who attend college are big fans of pop bands and singers.", "fol": "all x.(AttendsCollege(x) -> HasHighAmbitions(x))", "prediction": ["all x.((YoungTenureGirl(x) & AttendsCollege(x)) -> (BigFanOfPopBands(x) & BigFanOfSingers(x)))", "all x.((YoungTeenager(x) & AttendsCollege(x)) -> (BigFanOfPopBands(x) & BigFanOfSingers(x)))", "all x.((YoungTenureGirl(x) & AttendsCollege(x)) -> (FanOfPopBands(x) & FanOfSingers(x)))", "all x.((YoungAdolescentGirl(x) & AttendsCollege(x)) -> (BigFanOfPopBands(x) & BigFanOfSingers(x)))", "all x.((YoungAdolescent(x) & AttendsCollege(x)) -> (BigFanOfPopBands(x) & BigFanOfSingers(x)))", "all x.((YoungTenderedGirl(x) & AttendsCollege(x)) -> (BigFanOfPopBands(x) & BigFanOfSingers(x)))", "all x.((YoungAdolescent(x) & AttendsCollege(x)) -> (FanOfPopBands(x) & FanOfSingers(x)))", "all x.((YoungAdolescentGirl(x) & AttendsCollege(x)) -> (FanOfPopBands(x) & FanOfSingers(x)))", "all x.((YoungTeenager(x) & AttendsCollege(x)) -> (FanOfPopBands(x) & FanOfSingers(x)))", "all x.((YoungTenureGirl(x) & AttendsCollege(x)) -> (PopBands(x) & Singers(x)))", "all x.((YoungAdolescent(x) & AttendsCollege(x)) -> (PopBands(x) & Singers(x)))", "all x.((YoungAdolescentGirl(x) & AttendsCollege(x)) -> (PopBands(x) & Singers(x)))", "all x.((YoungTenureGirl(x) & AttendsCollege(x)) -> (PopBand(x) | Singer(x)))", "all x.((YoungTenureGirl(x) & AttendsCollege(x)) -> (PopBandFan(x) & SingerFan(x)))", "all x.((YoungAdolescent(x) & AttendsCollege(x)) -> (PopBand(x) | Singer(x)))", "all x.((YoungTenureGirl(x) & AttendsCollege(x)) -> (BigFanOfPopBands(x) & BigFanOfSinger(x)))"]}
{"id": "folio_train_2424", "nl": "If Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers.", "fol": "(HasHighAmbitions(Sam) -> IsBigFanOfPopBands(Sam))", "prediction": ["all x.((HighAmbitions(x) & FutureCareerGoals(x)) -> BigFanOfPopBandsAndSingers(x))", "all x.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x)) -> BigFanOfPopBandsAndSingers(x))", "all x.((HighAmbitions(x) & FutureCareerGoals(x)) -> (BigFanOfPopBands(x) & BigFanOfSingers(x)))", "all x.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x)) -> (BigFanOfPopBands(x) & BigFanOfSingers(x)))", "all x.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x)) -> (PopBandFan(x) & SingerFan(x)))", "all x.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x)) -> FanOfPopBandsAndSingers(x))", "all x.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x)) -> (PopBand(x) & Singer(x)))", "all x.((HasHighAmbitions(x) & FutureCareerGoals(x)) -> BigFanOfPopBandsAndSingers(x))", "all x.((HasHighAmbitions(x) & HasFutureCareerGoals(x)) -> BigFanOfPopBandsAndSingers(x))", "all x.((HighAmbitions(x) & FutureCareerGoals(x)) -> BigFanOfPopBands(x) & BigFanOfSingers(x))", "all x.((HighAmbitions(x) & FutureCareerGoals(x)) -> (PopBandFan(x) & SingerFan(x)))", "all x.((HighAmbitions(x) & FutureCareerGoals(x)) -> FanOfPopBandsAndSingers(x))", "all x.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x)) -> BigFanOfPopBands(x) & BigFanOfSingers(x))", "all x.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x)) -> (PopBands(x) & Singers(x)))", "all x.((HighAmbitions(x) & FutureCareerGoals(x)) -> (PopBand(x) & Singer(x)))", "all x.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x)) -> (PopBand(x) | Singer(x)))"]}
{"id": "folio_train_2425", "nl": "Sam is a young teenage girl who attends college.", "fol": "AttendsCollege(Sam)", "prediction": ["all x.((Sam(x) & Teenager(x) & AttendsCollege(x)) -> Young(x))", "all x.((Sam(x) & Teenager(x)) -> AttendsCollege(x))", "all x.((Sam(x) & YoungAdolescent(x) & AttendsCollege(x)) -> Teenager(x))", "all x.(Sam(x) -> (YoungAdolescent(x) & AttendsCollege(x)))", "all x.(Sam(x) -> (Young(x) & Teenager(x) & AttendsCollege(x)))", "all x.(Sam(x) -> (YoungTeenager(x) & AttendsCollege(x)))", "all x.((Sam(x) & Teenager(x) & AttendsCollege(x)) -> Teenager(x))", "all x.((Sam(x) & YoungAdolescent(x)) -> AttendsCollege(x))", "all x.((Girl(x) & Teenager(x) & AttendsCollege(x)) -> Sam(x))", "(Young(Sam) & Teenager(Sam) & AttendsCollege(Sam))", "all x.((Girl(x) & Young(x) & AttendsCollege(x)) -> Sam(x))", "all x.((Sam(x) & Young(x) & Teenager(x)) -> AttendsCollege(x))", "all x.((Sam(x) & YoungAdolescent(x) & AttendsCollege(x)) -> YoungAdolescent(x))", "all x y.((Sam(x) & Teenager(y) & AttendsCollege(y)) -> Young(x,y))", "all x y.((Sam(x) & Teenager(y)) -> AttendsCollege(x,y))", "all x.((Sam(x) & Young(x) & Teenager(x) & AttendsCollege(x)) -> Teenager(x))"]}
{"id": "folio_train_2426", "nl": "Sam is not a young teenage girl who attends college.", "fol": "-AttendsCollege(Sam)", "prediction": ["all x.(Sam(x) -> -(YoungAdolescent(x) & AttendsCollege(x)))", "all x.((Sam(x) & Teenager(x)) -> -AttendsCollege(x))", "all x.(Sam(x) -> -(YoungTeenager(x) & AttendsCollege(x)))", "all x.((Sam(x) & Teenager(x) & -AttendsCollege(x)) -> -AttendsCollege(x))", "all x.((Sam(x) & -YoungAdolescent(x) & AttendsCollege(x)) -> -Sam(x))", "all x.((Sam(x) & Teenager(x) & -AttendsCollege(x)) -> -Sam(x))", "all x.((Sam(x) & Teenager(x) & -AttendsCollege(x)) -> -(Sam(x) & AttendsCollege(x)))", "-(YoungTeenager(Sam) & AttendsCollege(Sam))", "all x.((Sam(x) & -YoungAdolescent(x) & AttendsCollege(x)) -> -(Sam(x) & AttendsCollege(x)))", "all x.((Sam(x) & Teenager(x) & -AttendsCollege(x)) -> -(Sam(x) & AttendsCollege(x)))", "-(YoungAdolescent(Sam) & AttendsCollege(Sam))", "all x.((Sam(x) & -YoungTeenager(x) & AttendsCollege(x)) -> -Sam(x))", "all x.(Sam(x) -> -(YoungTenure(x) & AttendsCollege(x)))", "all x.((Sam(x) & -YoungAdolescent(x) & AttendsCollege(x)) -> -YoungAdolescent(x))", "all x.((Sam(x) & -YoungTeenager(x) & AttendsCollege(x)) -> -(Sam(x) & AttendsCollege(x)))", "all x.((Sam(x) & -AttendsCollege(x)) -> -YoungAdolescent(x))"]}
{"id": "folio_train_2427", "nl": "Sam is a big fan of pop bands and singers.", "fol": "IsBigFanOfPopBands(Sam)", "prediction": ["all x.((Sam(x) & PopBand(x) & Singer(x)) -> BigFan(x))", "all x.((Sam(x) & PopBands(x) & Singers(x)) -> BigFan(x))", "all x.(Sam(x) -> (FanOfPopBands(x) & FanOfSingers(x)))", "all x y.((Sam(x) & PopBand(y) & Singer(y)) -> BigFan(x,y))", "all x y z.((Sam(x) & PopBand(y) & Singer(z)) -> (FanOf(x,y) & FanOf(x,z)))", "all x.((Sam(x) & PopBand(x) & Singer(x)) -> FanOf(x,y))", "all x.(Sam(x) -> (PopBand(x) & Singer(x)))", "all x y.((Sam(x) & PopBand(y) & Singer(y)) -> FanOf(x,y))", "all x.(PopBand(x) & Singer(x)) -> BigFan(x))", "all x.(Sam(x) -> (PopBands(x) & Singers(x)))", "all x y z.((Sam(x) & PopBand(y) & Singer(z)) -> (FanOf(x,y) & BigFanOf(x,z)))", "(FanOfPopBands(Sam) & FanOfSingers(Sam))", "all x.((Sam(x) & PopBand(x) & Singer(x)) -> Fan(x))", "all x.((Sam(x) & PopBand(x) & Singer(x)) -> BigFanOf(x,y))", "all x y z.((Sam(x) & PopBand(y) & Singer(z)) -> (FanOf(x,y,z) & FanOf(x,y)))", "(BigFanOfPopBands(Sam) & BigFanOfSingers(Sam))"]}
{"id": "folio_train_2428", "nl": "Sam neither has high ambitions and future career goals nor is she a young teenage girl who attends college.", "fol": "(-HasHighAmbitions(Sam) & -AttendsCollege(Sam))", "prediction": ["all x.((Sam(x) & -(HighAmbitions(x) & FutureCareerGoals(x)) | Teenager(x) & AttendsCollege(x))) -> -(HighAmbitions(x) & FutureCareerGoals(x)))", "all x.((Sam(x) & -(HighAmbitions(x) & FutureCareerGoals(x)) | YoungAdolescent(x) & AttendsCollege(x))) -> -(HighAmbitions(x) & FutureCareerGoals(x)))", "all x.((Sam(x) & -(HighAmbitions(x) & FutureCareerGoals(x)) | Teenager(x) & AttendsCollege(x))) -> -HighAmbitions(x) & FutureCareerGoals(x))", "all x.((Sam(x) & -(HighAmbitions(x) & FutureCareerGoals(x)) | YoungAdolescent(x) & AttendsCollege(x))) -> -HighAmbitions(x) & FutureCareerGoals(x))", "(-(HighAmbitions(Sam) & FutureCareerGoals(Sam)) | (YoungAdolescent(Sam) & AttendsCollege(Sam))))", "(-(HighAmbitions(Sam) & FutureCareerGoals(Sam)) | (YoungAdolescent(Sam) & CollegeAttendance(Sam))))", "all x.((Sam(x) & -(HighAmbitions(x) & FutureCareerGoals(x)) | YoungAdolescent(x) & AttendsCollege(x))) -> -HasHighAmbitions(x) & -(HighAmbitions(x) & FutureCareerGoals(x))))", "all x.((Sam(x) & -(HighAmbitions(x) & FutureCareerGoals(x)) | YoungTeen(x) & AttendsCollege(x))) -> -(HighAmbitions(x) & FutureCareerGoals(x)))", "all x.((Sam(x) & -(HighAmbitions(x) & FutureCareerGoals(x)) | Teenager(x) & AttendsCollege(x))) -> -HasHighAmbitions(x) & -(HighAmbitions(x) & FutureCareerGoals(x))))", "all x.((Sam(x) & -(HighAmbitions(x) & FutureCareerGoals(x)) | YoungAdolescent(x) & AttendsCollege(x))) -> -(HighAmbitions(x) & FutureCareerGoals(x))))", "(-(HighAmbitions(Sam) & FutureCareerGoals(Sam)) | YoungAdolescent(Sam) & AttendsCollege(Sam)))", "all x.((Sam(x) & -(HighAmbitions(x) & FutureCareerGoals(x)) | Teenager(x) & AttendsCollege(x))) -> -HighAmbitions(x) & -FutureCareerGoals(x))", "(-(HighAmbitions(Sam) & FutureCareerGoals(Sam)) | Teenager(Sam) & AttendsCollege(Sam)))", "all x.((Sam(x) & -(HighAmbitions(x) & FutureCareerGoals(x)) | YoungTeen(x) & AttendsCollege(x))) -> -HighAmbitions(x) & FutureCareerGoals(x))", "all x.((Sam(x) & -(HighAmbitions(x) & FutureCareerGoals(x)) | (YoungAdolescent(x) & AttendsCollege(x))))", "all x.((Sam(x) & -(HighAmbitions(x) & FutureCareerGoals(x)) | Teenager(x) & CollegeAttendance(x))) -> -(HighAmbitions(x) & FutureCareerGoals(x)))"]}
{"id": "folio_train_2429", "nl": "Sam has high ambitions and future career goals and is a young teenage girl who attends college.", "fol": "(HasHighAmbitions(Sam) & AttendsCollege(Sam))", "prediction": ["all x.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x)) -> Teenager(x))", "all x.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x)) -> AttendsCollege(x))", "all x.(Sam(x) -> (HighAmbitions(x) & FutureCareerGoals(x) & Teenager(x) & AttendsCollege(x)))", "all x.(Sam(x) -> (HighAmbitions(x) & FutureCareerGoals(x) & YoungAdolescent(x) & AttendsCollege(x)))", "(HighAmbitions(Sam) & FutureCareerGoals(Sam) & Teenager(Sam) & AttendsCollege(Sam))", "all x.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x) & YoungAdolescent(x) & AttendsCollege(x)) -> Teenager(x))", "all x.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x) & Teenager(x) & AttendsCollege(x)) -> Teenager(x))", "all x.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x)) -> (YoungAdolescent(x) & AttendsCollege(x)))", "all x.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x)) -> YoungAdolescent(x))", "all x.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x)) -> TeenagerGirl(x))", "all x.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x)) -> Teenager(x) & AttendsCollege(x))", "(HighAmbitions(Sam) & FutureCareerGoals(Sam) & YoungAdolescent(Sam) & AttendsCollege(Sam))", "all x.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x)) -> (YoungTeenager(x) & AttendsCollege(x)))", "all x.(Sam(x) -> (HasHighAmbitions(x) & HasFutureCareerGoals(x) & YoungAdolescent(x) & AttendsCollege(x)))", "all x.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x) & Teenager(x) & AttendsCollege(x)) -> Young(x))", "all x.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x) & YoungAdolescent(x)) -> AttendsCollege(x))"]}
{"id": "folio_train_2430", "nl": "If Sam is a young teenage girl who attends college, then Sam either does not have high ambitions and future career goals or is a big fan of pop bands and singers.", "fol": "(AttendsCollege(Sam) -> (-HasHighAmbitions(Sam) | IsBigFanOfPopBands(Sam)))", "prediction": ["all x.((YoungAdolescent(x) & AttendsCollege(x)) -> (-HighAmbitions(x) & FutureCareerGoals(x)) | BigFanOfPopBandsAndSingers(x)))", "all x.((YoungTeenager(x) & AttendsCollege(x)) -> (-HighAmbitions(x) & FutureCareerGoals(x)) | BigFanOfPopBandsAndSingers(x)))", "all x.((YoungAdolescent(x) & AttendsCollege(x)) -> (-HighAmbitionsAndCareerGoals(x) | BigFanOfPopBandsAndSingers(x)))", "all x.((Young(x) & Teenager(x) & AttendsCollege(x)) -> (-HighAmbitions(x) & FutureCareerGoals(x)) | BigFanOfPopBandsAndSingers(x)))", "all x.((YoungAdolescent(x) & AttendsCollege(x)) -> (-HighAmbitions(x) & FutureCareerGoals(x)) | BigFanOfPopBands(x) & BigFanOfSingers(x)))", "all x.((YoungTenure(x) & AttendsCollege(x)) -> (-HighAmbitions(x) & FutureCareerGoals(x)) | BigFanOfPopBandsAndSingers(x)))", "all x.((YoungAdolescent(x) & AttendsCollege(x)) -> (-HighAmbitions(x) & FutureCareerGoals(x)) | (BigFanOfPopBands(x) & BigFanOfSingers(x))))", "all x.((YoungTeenager(x) & AttendsCollege(x)) -> (-HighAmbitions(x) & FutureCareerGoals(x)) | BigFanOfPopBands(x) & BigFanOfSingers(x)))", "all x.((YearlyAdolescent(x) & AttendsCollege(x)) -> (-HighAmbitions(x) & FutureCareerGoals(x)) | BigFanOfPopBandsAndSingers(x)))", "all x.((YoungTeenager(x) & AttendsCollege(x)) -> (-HighAmbitions(x) & FutureCareerGoals(x)) | (BigFanOfPopBands(x) & BigFanOfSingers(x))))", "all x.((Sam(x) & YoungAdolescent(x) & AttendsCollege(x)) -> (-HighAmbitions(x) & FutureCareerGoals(x)) | BigFanOfPopBandsAndSingers(x)))", "all x.((YoungTeenager(x) & AttendsCollege(x)) -> (-HighAmbitionsAndCareerGoals(x) | BigFanOfPopBandsAndSingers(x)))", "all x.((YoungDaughter(x) & AttendsCollege(x)) -> (-HighAmbitions(x) & FutureCareerGoals(x)) | BigFanOfPopBandsAndSingers(x)))", "all x.((YoungAdolescent(x) & AttendsCollege(x)) -> (-HighAmbitions(x) & FutureCareerGoals(x) | BigFanOfPopBandsAndSingers(x)))", "all x.((YoungTeenager(x) & AttendsCollege(x)) -> (-HighAmbitions(x) & FutureCareerGoals(x) | BigFanOfPopBandsAndSingers(x)))", "all x.((YearlyAdolescent(x) & AttendsCollege(x)) -> (-HighAmbitionsAndCareerGoals(x) | BigFanOfPopBandsAndSingers(x)))"]}
{"id": "folio_train_2431", "nl": "If Sam has high ambitions and future career goals and is a young teenage girl who attends college, then Sam either does not have high ambitions and future career goals or is not a young teenage girl who attends college.", "fol": "((HasHighAmbitions(Sam) & AttendsCollege(Sam)) -> (-HasHighAmbitions(Sam) | -AttendsCollege(Sam)))", "prediction": ["all x.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x) & YoungDaughter(x) & AttendsCollege(x)) -> (-HighAmbitions(x) & FutureCareerGoals(x)) | -AttendsCollege(x)))", "all x.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x) & YoungDadge(x) & AttendsCollege(x)) -> (-HighAmbitions(x) & FutureCareerGoals(x)) | -AttendsCollege(x)))", "all x.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x) & YoungDaughter(x) & AttendsCollege(x)) -> (-HasHighAmbitions(x) & FutureCareerGoals(x)) | -AttendsCollege(x)))", "all x.((Sam(x) & HighAmbitionsAndFutureCareerGoals(x) & YoungDaughter(x) & AttendsCollege(x)) -> (-HighAmbitionsAndFutureCareerGoals(x) | -AttendsCollege(x)))", "all x.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x) & YoungAttendsCollege(x)) -> (-HighAmbitions(x) & FutureCareerGoals(x)) | -AttendsCollege(x)))", "all x.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x) & YoungDaughter(x) & AttendsCollege(x)) -> (-HighAmbitions(x) & FutureCareerGoals(x) & -AttendsCollege(x)))", "all x.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x) & YoungDreamgirl(x) & AttendsCollege(x)) -> (-HighAmbitions(x) & FutureCareerGoals(x)) | -AttendsCollege(x)))", "all x.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x) & YoungDaughter(x) & AttendsCollege(x)) -> (-HighAmbitions(x) & FutureCareerGoals(x)))", "all x.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x) & AttendsCollege(x)) -> (-HighAmbitions(x) & FutureCareerGoals(x)) | -AttendsCollege(x)))", "all x.((Sam(x) & HighAmbitionsAndFutureCareerGoals(x) & YoungDadge(x) & AttendsCollege(x)) -> (-HighAmbitionsAndFutureCareerGoals(x) | -AttendsCollege(x)))", "all x.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x) & YoungDaughter(x) & AttendsCollege(x)) -> (-HighAmbitions(x) & FutureCareerGoals(x)) | -YoungDaughter(x)))", "all x.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x) & YoungAdult(x)) -> (-HighAmbitions(x) & FutureCareerGoals(x)) | -AdultsCollege(x)))", "all x.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x) & YoungDescent(x) & AttendsCollege(x)) -> (-HighAmbitions(x) & FutureCareerGoals(x)) | -AttendsCollege(x)))", "all x.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x) & YoungTeenager(x) & AttendsCollege(x)) -> (-HighAmbitions(x) & FutureCareerGoals(x)) | -AttendsCollege(x)))", "all x.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x) & YoungDearteen(x) & AttendsCollege(x)) -> (-HighAmbitions(x) & FutureCareerGoals(x)) | -AttendsCollege(x)))", "all x.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x) & YoungAdult(x)) -> (-HighAmbitions(x) & FutureCareerGoals(x)) | -Adult(x)))"]}
{"id": "folio_train_2432", "nl": "If Sam has high ambitions and future career goals, then Sam is a young teenage girl who attends college.", "fol": "(HasHighAmbitions(Sam) -> AttendsCollege(Sam))", "prediction": ["all x.((HighAmbitions(x) & FutureCareerGoals(x)) -> Teenager(x))", "all x.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x)) -> Teenager(x))", "all x.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x)) -> Teenager(x) & AttendsCollege(x))", "all x.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x)) -> AttendsCollege(x))", "all x.((HighAmbitions(x) & FutureCareerGoals(x)) -> AttendsCollege(x))", "all x.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x)) -> YoungAdolescent(x))", "all x.((HighAmbitions(x) & FutureCareerGoals(x)) -> YoungAdolescent(x))", "all x.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x)) -> TeenagerGirl(x))", "all x.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x)) -> YoungTenure(x) & AttendsCollege(x))", "all x.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x)) -> (YoungAdolescent(x) & AttendsCollege(x)))", "all x.((HighAmbitions(x) & FutureCareerGoals(x)) -> Teenager(x) & AttendsCollege(x))", "all x.((Girl(x) & HighAmbitions(x) & FutureCareerGoals(x)) -> AttendsCollege(x))", "all x.((HighAmbitions(x) & FutureCareerGoals(x)) -> TeenagerGirl(x))", "all x.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x)) -> CollegeAttendant(x))", "all x.((HighAmbitions(x) & FutureCareerGoals(x)) -> CollegeAttendant(x))", "all x.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x)) -> Athlete(x))"]}
{"id": "folio_train_2433", "nl": "A student who loves shrieking will be punished.", "fol": "all x.((IsStudent(x) & LovesShrieking(x)) -> WillBePunished(x))", "prediction": ["all x.((Student(x) & LovesShredding(x)) -> Punished(x))", "all x.((Student(x) & LovesSshrieking(x)) -> Punished(x))", "all x.((Student(x) & LovesShreking(x)) -> Punished(x))", "all x.((Student(x) & LovesShredding(x)) -> Penalized(x))", "all x.((Student(x) & LovesSshrieking(x)) -> Penalized(x))", "all x.((Student(x) & LovesCrying(x)) -> Punished(x))", "all x.((Student(x) & LovesShreaking(x)) -> Punished(x))", "all x.((Student(x) & LovesScreaming(x)) -> Punished(x))", "all x.(LovesShredding(x) -> Punished(x))", "all x.((Student(x) & LovesShreeking(x)) -> Punished(x))", "all x.(LovesSshrieking(x) -> Punished(x))", "all x.((Student(x) & LovesShredding(x)) -> Felt(x))", "all x.((Student(x) & LovesShaking(x)) -> Punished(x))", "all x.((Student(x) & LovesSchreeking(x)) -> Punished(x))", "all x.((Student(x) & LovesShreking(x)) -> Penalized(x))", "all x y.((Student(x) & LovesShredding(x)) -> Punished(x))"]}
{"id": "folio_train_2434", "nl": "If a person swears, then he is a student.", "fol": "all x.(Swears(x) -> IsStudent(x))", "prediction": ["all x.(Swears(x) -> Student(x))", "all x.(Swore(x) -> Student(x))", "all x.((Person(x) & Swears(x)) -> Student(x))", "all x.(S swears(x) -> Student(x))", "all x.((Person(x) & Sweats(x)) -> Student(x))", "all x.((Person(x) & swears(x)) -> Student(x))", "all x.(Sweets(x) -> Student(x))", "all x y.((Person(x) & Swears(x) & Student(y)) -> Student(x))", "all x y.((Person(x) & Swears(x)) -> Student(x))", "all x.(Shrugs(x) -> Student(x))", "all x y.((Person(x) & Swears(x) & Student(y)) -> Sworn(x))", "all x.(Swearing(x) -> Student(x))", "all x y.((Person(x) & Swears(x)) -> Student(y))", "all x.(Sworn(x) -> Student(x))", "all x.(Swear(x) -> Student(x))", "all x.(Student(x) -> Swears(x))"]}
{"id": "folio_train_2435", "nl": "If someone is a teacher, then Bob will talk to him.", "fol": "all x.(IsTeacher(x) -> TalksTo(Bob,x))", "prediction": ["all x.(Teacher(x) -> BobTalksTo(x,y))", "all x.(Teacher(x) -> TalkToBob(x))", "all x.(Teacher(x) -> BobTalksTo(x))", "all x.(Teacher(x) -> TalksTo(x,Bob))", "all x.(Teacher(x) -> TalkTo(x,Bob))", "all x.((Teacher(x) & Bob(x)) -> TalksTo(x,y))", "all x.((Teacher(x)) -> BobTalksTo(x,y))", "all x.(Teacher(x) -> TalksToBob(x))", "all x.(Teacher(x) -> BobTalksTo(x,Bob))", "all x.(Teacher(x) -> WillTalkTo(x,Bob))", "all x.((Teacher(x) & Bob(x)) -> TalksTo(x,Bob))", "all x.((Teacher(x) & BobTalksTo(x)) -> Teacher(x))", "all x.(Teacher(x) -> BobTalksTo(x,Teacher))", "all x.((Teacher(x) & Bob(x)) -> TalkTo(x,y))", "all x.((Teacher(x)) -> BobTalksTo(x,Bob))", "all x.(Teacher(x) -> TalkTo(bob))"]}
{"id": "folio_train_2436", "nl": "All gentlemen are in a suit.", "fol": "all x.(IsGentleman(x) -> WearsSuit(x))", "prediction": ["all x.(Gentlemen(x) -> InSuite(x))", "all x.(Gentleman(x) -> InSuite(x))", "all x.(Gentlemen(x) -> InSuit(x))", "all x.(Gentleman(x) -> InSuit(x))", "all x.(Gentlemen(x) -> InSurface(x))", "all x.(Gentlemen(x) -> InSupe(x))", "all x.(Gentleman(x) -> InSurface(x))", "all x.(Gentleman(x) -> InSupe(x))", "all x.(Groomer(x) -> InSuite(x))", "all x y.((Gentleman(x) & Gentleman(y)) -> InSuite(x,y))", "all x y.((Gentleman(x) & Gentleman(y)) -> InSuit(x,y))", "all x.(Groomer(x) -> InSuit(x))", "all x y.((Gentleman(x) & Gentleman(y)) -> InSuite(x))", "all x.(Gentlemen(x) -> InSuit(x))", "all x.(Gentlemen(x) -> InSuite(x))", "all x.(Gentleman(x) -> InSuite(x))"]}
{"id": "folio_train_2437", "nl": "All teachers are men.", "fol": "all x.(IsTeacher(x) -> IsMan(x))", "prediction": ["all x.(Teacher(x) -> Men(x))", "all x.(Teacher(x) -> Man(x))", "all x.(Teacher(x) -> Male(x))", "all x.(Teacher(x) -> (Men(x) & Men(x)))", "all x.(Teacher(x) -> Men(x))", "(all x.(Teacher(x) -> Men(x))", "all x y.((Teacher(x) & Teacher(y)) -> Men(x))", "all x.(Teacher(x) -> (Men(x) & Male(x)))", "all x.(Teacher(x) -> (Men(x) & Teacher(x)))", "all x.(Teacher(x) -> (Men(x) & -Men(x)))", "all x.(Teacher(x) -> (Men(x) | Men(x)))", "all x.(Teacher(x) -> (Men(x) & Man(x)))", "all x.exists y.(Teacher(x) & Teacher(y) & Men(x))", "all x y.((Teacher(x) & Men(y)) -> Men(x))", "all x.((Teacher(x) & Men(x)) -> Men(x))", "all x.(Teacher(x) -> (Men(x) | -Men(x)))"]}
{"id": "folio_train_2438", "nl": "There is a teacher.", "fol": "exists x.IsTeacher(x)", "prediction": ["exists x.(Teacher(x) & Teacher(x))", "exists x.(Teacher(x) & Teachers(x))", "exists x.(Teacher(x) & Teacher(y))", "exists x.exists y.(Teacher(x) & Teacher(y))", "exists x.(Teacher(x) & HasTeacher(x))", "exists x.(Teacher(x) & Teachers(y))", "all x.exists y.(Teacher(x) & Teacher(y))", "exists x.(Teacher(x) & Teaching(x))", "exists x.(Teacher(x) & -Teacher(x))", "exists x.(Teacher(x) & Educates(x))", "exists x.(Teacher(x) & DoesTeacher(x))", "exists x.exists y.(Teacher(x) & Teacher(y) & Teacher(y))", "exists x.exists y.(Teacher(x) & Teacher(y) & Educates(x,y))", "exists x.(Teacher(x) & Tutor(x))", "exists x.(Teacher(x) & Trains(x))", "exists x.exists y.(Teacher(x) & Teacher(y) & WorksIn(x,y))"]}
{"id": "folio_train_2439", "nl": "If someone is not a gentlemen, then he is not nice.", "fol": "all x.(-IsGentleman(x) -> -IsNice(x))", "prediction": ["all x.((Person(x) & -Gentlemen(x)) -> -Nice(x))", "all x.((Gentlemen(x) & -Gentlemen(x)) -> -Nice(x))", "all x.((Person(x) & Gentlemen(x)) -> -Nice(x))", "all x.((Friendly(x) & -Gentlemen(x)) -> -Nice(x))", "all x.((Person(x) & Gentleman(x)) -> -Nice(x))", "all x.((Groomer(x) & -Gentlemen(x)) -> -Nice(x))", "all x.((Man(x) & -Gentlemen(x)) -> -Nice(x))", "all x.((Person(x) & -Gentleman(x)) -> -Nice(x))", "all x.((NotGentlemen(x) & -Gentlemen(x)) -> -Nice(x))", "all x.((Man(x) & Gentlemen(x)) -> -Nice(x))", "all x.((Merrymen(x) & -Gentlemen(x)) -> -Nice(x))", "all x.((Person(x) & -Gentlemen(x)) -> -Pretty(x))", "all x.((Friend(x) & -Gentlemen(x)) -> -Nice(x))", "all x.(-Gentlemen(x) -> -Nice(x))", "all x.((Friendly(x) & -Gentleman(x)) -> -Nice(x))", "all x.((Father(x) & Gentlemen(x)) -> -Nice(x))"]}
{"id": "folio_train_2440", "nl": "Willy is nice.", "fol": "IsNice(Willy)", "prediction": ["All x.(Willy(x) -> Nice(x))", "Willy is nice.", "all x.(Willy(x) -> Nice(x))", "All x.((Willy(x) & Nice(x)) -> Nice(x))", "all x.((Willy(x) & Nice(x)) -> Nice(x))", "(Nice(Willy) -> Nice(Willy))", "(Nice(Willy) & Nice(Willy))", "(Nice(Willy) -> Nice(Willy)))", "All x.((Willy(x) & Nice(x)) -> Lovely(x))", "all x.((Willy(x) & Nice(x)) -> Lovely(x))", "(Pretty(Willy) & Nice(Willy))", "(Nice(Willy) -> Nice(Willy))", "All x.((Willy(x) & Nice(x)) -> Nice(x))", "(Nice(willy) -> Nice(willy))", "(Pretty(Willy) -> Nice(Willy))", "all x.((Willy(x) & Nice(x)) -> Nice(x))"]}
{"id": "folio_train_2441", "nl": "Bob loves shrieking and swearing.", "fol": "(LovesShrieking(Bob) & Swears(Bob))", "prediction": ["all x.((Bob(x) & Shrieking(x) & Swearing(x)) -> Loves(x))", "all x.((Bob(x) & Shredding(x) & Swearing(x)) -> Loves(x))", "all x.((Bob(x) & Shredding(x) & Swearing(x)) -> Loves(x,y))", "all x.((Bob(x) & Shrieking(x) & Swearing(x)) -> Loves(x,y))", "all x.(Bob(x) -> (LovesSshrieking(x) & LovesSwearing(x)))", "all x.(Bob(x) -> (LovesShredding(x) & LovesSwearing(x)))", "all x.((Rob(x) & Shredding(x) & Swearing(x)) -> Loves(x))", "all x.((Rob(x) & Shrieking(x) & Swearing(x)) -> Loves(x))", "all x.((Bob(x) & Shrieking(x) & Swinging(x)) -> Loves(x))", "all x.((Bob(x) & Shredding(x) & Swinging(x)) -> Loves(x))", "all x.((Bob(x) & Shrieks(x) & Swears(x)) -> Loves(x,y))", "(LovesShredding(Bob) & LovesSwearing(Bob))", "all x.((Bob(x) & Shrieks(x) & Swears(x)) -> Loves(x))", "(LovesSshrieking(Bob) & LovesSwearing(Bob))", "all x.((Bob(x) & Shredding(x)) -> Swearing(x))", "all x.((Bob(x) & Shredding(x) & Swinging(x)) -> Loves(x,y))"]}
{"id": "folio_train_2442", "nl": "Willy is in a suit.", "fol": "WearsSuit(Willy)", "prediction": ["Willy is in a suit.", "All x.(Willy(x) -> InSuit(x))", "All x.(Willy(x) -> InSuite(x))", "all x.(Willy(x) -> InSuit(x))", "All x.((Willy(x) & Suit(x)) -> In(x,y))", "All x.((Willy(x) & InSuit(x)) -> InSuit(x))", "all x.(Willy(x) -> InSuite(x))", "All x.((Willy(x) & Suit(x)) -> InSuit(x))", "All x.(Willy(x) -> InSurface(x))", "All x.(Willy(x) -> InSupe(x))", "All x.((Willy(x) & InSuit(x)) -> InSuite(x))", "All x.((Willy(x) & InSuite(x)) -> InSuite(x))", "All x.((Willy(x) & Suit(x)) -> In(x,Suit))", "All x.((Willy(x) & InSuit(x)) -> InSupe(x))", "All x.((Willy(x) & Suit(x)) -> InSupe(x))", "All x.((Willy(x) & Suit(x)) -> InSuite(x))"]}
{"id": "folio_train_2443", "nl": "Bob will be not punished.", "fol": "-WillBePunished(Bob)", "prediction": ["all x.(Bob(x) -> -Punished(x))", "all x.(Bob(x) -> -Penalized(x))", "all x.((Bob(x) & -Punished(x)) -> -Punished(x))", "all x.(Bob(x) -> -Puned(x))", "all x.((Bob(x) & -Penalized(x)) -> -Penalized(x))", "all x.(Bob(x) -> -Pulled(x))", "all x.(Bob(x) -> -Peaced(x))", "All x.(Bob(x) -> -Punished(x))", "all x.(Bob(x) -> -Pentached(x))", "all x.((Bob(x) & -Penalized(x)) -> -Punished(x))", "All x.(Bob(x) -> -Penalized(x))", "all x.((Bob(x) & -Punished(x)) -> -Bob(x))", "all x.(Bob(x) -> -Penalised(x))", "all x.((Bob(x) & -Punished(x)) -> -Penalized(x))", "all x.((Bob(x) & -Punished(x)) -> -Punched(x))", "all x.(Bob(x) -> -Peached(x))"]}
{"id": "folio_train_2444", "nl": "There is a man that Bob will talk to.", "fol": "exists x.(IsMan(x) & TalksTo(Bob,x))", "prediction": ["exists x.(Man(x) & BobTalksTo(x))", "exists x y.(Man(x) & Bob(y) & TalksTo(y,x))", "exists x y.(Man(x) & Bob(y) & TalkTo(y,x))", "exists x y.((Man(x) & Bob(y)) -> TalksTo(y,x))", "exists x y.(Man(x) & Bob(y) & TalksTo(x,y))", "exists x y.(Man(x) & Bob(y) & TalkTo(x,y))", "exists x.(Menu(x) & BobTalksTo(x))", "exists x.(Bob(x) & TalksTo(x))", "exists x y.(Bob(x) & Man(y) & TalksTo(x,y))", "exists x.(Man(x) & Bob(x))", "exists x y.((Man(x) & Bob(y)) -> TalkTo(y,x))", "all x y.((Man(x) & Bob(y)) -> TalksTo(y,x))", "exists x.(Men(x) & BobTalksTo(x))", "exists x y.((Man(x) & Bob(y)) -> TalksTo(x,y))", "exists x y.(Bob(x) & Man(y) & TalkTo(x,y))", "all x y.((Man(x) & Bob(y)) -> TalksTo(x,y))"]}
{"id": "folio_train_2445", "nl": "Quincy McDuffie is an American professional wide receiver in Canadian Football.", "fol": "(IsAmerican(Quincymcduffie) & IsProfessional(Quincymcduffie) & IsWideReceiver(Quincymcduffie) & PlaysInLeague(Quincymcduffie,Canadianfootball))", "prediction": ["(ProfessionalWideReceiver(QuincyMcDuffie) & American(QuincyMcDuffie) & InCanadianFootball(QuincyMcDuffie))", "(ProfessionalWideReceiver(QuincyMcDuffie) & American(QuincyMcDuffie) & PlaysCanadianFootball(QuincyMcDuffie))", "Quincy McDuffie (AmericanProfessionalWideReceiver(x) & InCanadianFootball(x))", "(ProfessionalWideReceiver(QuincyMcDuffie) & American(QuincyMcDuffie) & WorksInCanadianFootball(QuincyMcDuffie))", "(ProfessionalWideReceiver(QuincyMcDuffie) & American(QuincyMcDuffie) & CanadianFootball(QuincyMcDuffie))", "(ProfessionalWideReceiver(QuincyMcDuffie) & American(QuincyMcDuffie) & CanCanFootball(QuincyMcDuffie))", "(ProfessionalWideReceiver(QuincyMcDuffie) & American(QuincyMcDuffie) & CurrentlyInCanadianFootball(QuincyMcDuffie))", "(ProfessionalWideReceiver(QuincyMcDuffie,CanadianFootball) & American(QuincyMcDuffie))", "Quincy McDuffie (AmericanProfessionalWideReceiver(x) & PlaysCanadianFootball(x))", "(ProfessionalWideReceiver(QuincyMcDuffie) & American(QuincyMcDuffie) & CanCanCanFootball(QuincyMcDuffie))", "Quincy McDuffie is an American ProfessionalWideReceiverInCanadianFootball(QuincyMcDuffie)", "Quincy McDuffie (AmericanProfessionalWideReceiver(Quincy) & InCanadianFootball(Quincy))", "(ProfessionalWideReceiver(QuincyMcDuffie) & American(QuincyMcDuffie) & CanadianFootball(QuincyMcDuffie))", "Quincy McDuffie is an AmericanProfessionalWideReceiverInCanadianFootball(QuincyMcDuffie)", "(ProfessionalWideReceiver(QuincyMcDuffie,CanadianFootball) & American(QuincyMcDuffie,CanadianFootball))", "Quincy McDuffie (AmericanProfessionalWideReceiver(w) & InCanadianFootball(w))"]}
{"id": "folio_train_2446", "nl": "People who can catch balls are good wide receivers. ", "fol": "all x.(exists y.(CanCatch(x,y) & IsBall(y)) -> IsGoodWideReceiver(x))", "prediction": ["all x.((Person(x) & CanCatchBalls(x)) -> GoodWideReceiver(x))", "all x.((Person(x) & CanCatchesBalls(x)) -> GoodWideReceiver(x))", "all x.((Person(x) & CatchBalls(x)) -> GoodWideReceiver(x))", "all x.((Person(x) & CanCaptureBalls(x)) -> GoodWideReceiver(x))", "all x.((Person(x) & CanChatchBalls(x)) -> GoodWideReceiver(x))", "all x.((Person(x) & CanCatchBalls(x)) -> GoodWideReceiver(x))", "all x.((Person(x) & CanChaseBalls(x)) -> GoodWideReceiver(x))", "all x.(CanCatchBalls(x) -> GoodWideReceiver(x))", "all x.((Person(x) & CanCaptBalls(x)) -> GoodWideReceiver(x))", "all x.((CanCatchBalls(x) & CanCatchBalls(x)) -> GoodWideReceiver(x))", "all x.((Person(x) & CanChargeBalls(x)) -> GoodWideReceiver(x))", "all x.((Person(x) & CanCatchBalls(x)) -> GoodWideReceivers(x))", "all x.((Person(x) & CanCatchBalls(x)) -> GoodWideReader(x))", "all x.((CanCatchBalls(x) & GoodWideReceiver(x)) -> CanCatchBalls(x))", "all x.((Person(x) & CanCatchBalls(x)) -> GoodWidespreadReceiver(x))", "all x.(CanCatchesBalls(x) -> GoodWideReceiver(x))"]}
{"id": "folio_train_2447", "nl": "Quincy McDuffie can catch many footballs easily.", "fol": "exists x.(IsFootball(x) & CanCatch(Quincymcduffie,x))", "prediction": ["all x.((QuincyMcDuffie(x) & Football(y)) -> CanCatchEasily(x,y))", "all x.((QuincyMcDuffie(x) & ManyFootballs(x)) -> CanCatchEasily(x))", "all x.(QuincyMcDuffie(x) -> CanCatchManyFootballsEasily(x))", "all x y.((QuincyMcDuffie(x) & Football(y)) -> CanCatchEasily(x,y))", "all x.(QuincyMcDuffie(x) -> CanCatchFootballsEasily(x))", "all x.(QuincyMcDuffie(x) -> CanCatchesManyFootballsEasily(x))", "all x.((QuincyMcDuffie(x) & Football(y)) -> CanCatchesEasily(x,y))", "all x y.((QuincyMcDuffie(x) & Football(y)) -> CanCatchesEasily(x,y))", "all x.((QuincyMcDuffie(x) & ManyFootballs(x)) -> CanCatchesEasily(x))", "all x.(QuincyMcDuffie(x) -> CanCatchMoreFootballsEasily(x))", "all x.(QuincyMcDuffie(x) -> CanCatchesFootballsEasily(x))", "All x.(QuincyMcDuffie(x) -> CanCatchManyFootballsEasily(x))", "all x.(QuincyMcDuffie(x) -> CanCatchesMoreFootballsEasily(x))", "All x.(QuincyMcDuffie(x) -> CanCatchFootballsEasily(x))", "all x.(QuincyMcDuffie(x) -> CanCatchMostFootballsEasily(x))", "all x.((QuincyMcDuffie(x) & ManyFootballs(x)) -> CanCaptureEasily(x))"]}
{"id": "folio_train_2448", "nl": "Good wide receivers play professionally.", "fol": "all x.(IsGoodWideReceiver(x) -> IsProfessional(x))", "prediction": ["all x.(GoodWideReceiver(x) -> PlaysProfessionally(x))", "all x.(GoodWideReceiver(x) -> PlayProfessionally(x))", "all x.((WideReceiver(x) & Good(x)) -> PlaysProfessionally(x))", "all x.((WideReceiver(x) & Good(x)) -> PlayProfessionally(x))", "all x.((WideReceiver(x) & PlaysProfessionally(x)) -> Good(x))", "all x.((WideReceiver(x) & PlayProfessionally(x)) -> Good(x))", "all x.(GoodWideReceiver(x) -> PlayProfessional(x))", "all x.((WideReceiver(x) & Professional(x)) -> Plays(x))", "all x.(GoodWideReceiver(x) -> PlaysProfessional(x))", "all x.((WideReceiver(x) & Good(x)) -> ProfessionalPlay(x))", "all x.(GoodWideReceiver(x) -> ProfessionalPlay(x))", "all x.((WideReceiver(x) & Good(x)) -> PlaysProfessional(x))", "all x.(GoodWideReceiver(x) -> PlaysProfessionally(x))", "all x.((WideReceiver(x) & Professional(x)) -> Good(x))", "all x.(GoodWideReader(x) -> PlaysProfessionally(x))", "all x.(WideReceiver(x) -> PlaysProfessionally(x))"]}
{"id": "folio_train_2449", "nl": "Good wide receivers can catch with both their left and right hand.", "fol": "all x.(IsGoodWideReceiver(x) -> (CatchesWith(x,Lefthand) & CatchesWith(x,Righthand)))", "prediction": ["all x.((WideReceiver(x) & LeftHand(x) & RightHand(x)) -> CanCatch(x))", "all x.(GoodWideReceiver(x) -> (CatchWithLeftHand(x) & CatchWithRightHand(x)))", "all x.(GoodWideReceiver(x) -> (CanCatchWithLeftHand(x) & CanCatchWithRightHand(x)))", "all x.((WideReceiver(x) & LeftHand(x) & RightHand(x)) -> CanCatchWith(x,y))", "all x.((WideReceiver(x) & CanCatchWithLeftHand(x) & CanCatchWithRightHand(x)) -> Good(x))", "all x.((WideReceiver(x) & LeftHand(x) & RightHand(x)) -> CanCatch(x))", "all x.((WideReceiver(x) & LeftHand(x) & RightHand(x)) -> CanCapture(x))", "all x.((WideReceiver(x) & Good(x)) -> (CatchWithLeftHand(x) & CatchWithRightHand(x)))", "all x.((WideReceiver(x) & LeftHand(x) & RightHand(x)) -> CanCatchWith(x))", "all x.((WideReceiver(x) & LeftHand(x) & RightHand(x)) -> CanCatch(x,y))", "all x.((WideReceiver(x) & LeftHand(x) & RightHand(x)) -> CanCatches(x))", "all x.((WideReceiver(x) & LeftHand(x) & RightHand(x)) -> CanCatchWith(x,y,z))", "all x.((WideReceiver(x) & LeftHand(x) & RightHand(x)) -> Catch(x))", "all x.((WideReceiver(x) & HasLeftHand(x) & HasRightHand(x)) -> CanCatch(x))", "all x.((WideReceiver(x) & LeftHand(x) & RightHand(x)) -> Good(x))", "all x.((GivenWideReceiver(x) & LeftHand(x) & RightHand(x)) -> CanCatch(x))"]}
{"id": "folio_train_2450", "nl": "All footballs are balls.", "fol": "all x.(IsFootball(x) -> IsBall(x))", "prediction": ["all x.(Football(x) -> Ball(x))", "all x y.((Football(x) & Ball(y)) -> Ball(x))", "all x.(Football(x) -> Ball(x))", "all x.exists y.(Football(x) & Ball(y))", "all x.exists y.(Football(x) & Ball(y) & DesignedFor(x,y))", "all x.exists y.(Football(x) & Ball(y) & Contains(x,y))", "all x.exists y.(Football(x) & Ball(y) & DesignedBy(x,y))", "all x.exists y.(Football(x) & Ball(y) & UsedBy(x,y))", "all x.exists y.(Football(x) & Ball(y) & UsedFor(x,y))", "(all x.(Football(x) -> Ball(x)))", "all x.((Football(x) & Ball(x)) -> Ball(x))", "all x.exists y.(Football(x) & Ball(y) & PoweredBy(x,y))", "all x y.((Football(x) & Ball(y)) -> Ball(x,y))", "all x y.((Football(x) & Ball(y)) -> Is(x,y))", "exists x.(Football(x) & Ball(x))", "all x.(Football(x) -> Balls(x))"]}
{"id": "folio_train_2451", "nl": "Quincy McDuffie is a good wide receiver.", "fol": "IsGoodWideReceiver(Quincymcduffie)", "prediction": ["all x.((QuincyMcDuffie(x) & GoodWideReceiver(x)) -> GoodWideReceiver(x))", "all x.((QuincyMcDuffie(x) & GoodWideReceiver(x)) -> Good(x))", "all x.(QuincyMcDuffie(x) -> GoodWideReceiver(x))", "Quincy McDuffie is a good wide receiver.", "all x.((QuincyMcDuffie(x) & WideReceiver(x)) -> Good(x))", "All x.((QuincyMcDuffie(x) & GoodWideReceiver(x)) -> GoodWideReceiver(x))", "All x.(QuincyMcDuffie(x) -> GoodWideReceiver(x))", "(GoodWideReceiver(QuincyMcDuffie)", "All x.((QuincyMcDuffie(x) & GoodWideReceiver(x)) -> Good(x))", "all x.((QuincyMcDuffie(x) & GoodWideReader(x)) -> GoodWideReceiver(x))", "all x.((QuincyMcDuffie(x) & GoodWideReceiver(x)) -> GreatWideReceiver(x))", "all x.((QuincyMcDuffie(x) & GreatWideReceiver(x)) -> GoodWideReceiver(x))", "all x.((QuincyMcDuffie(x) & GoodWideReceiver(x)) -> GoodReceiver(x))", "All x.((QuincyMcDuffie(x) & WideReceiver(x)) -> Good(x))", "all x.((QuincyMcDuffie(x) & GoodWideReceiver(x)) -> GoodWideReceiver(x))", "all x.((QuincyMcDuffie(x) & GoodWideReader(x)) -> GoodWideReader(x))"]}
{"id": "folio_train_2452", "nl": "Quincy McDuffie can catch every ball.", "fol": "all y.(IsBall(y) -> CanCatch(Quincymcduffie,y))", "prediction": ["all x.((QuincyMcDuffie(x) & Ball(y)) -> CanCatch(x,y))", "all x.((QuincyMcDuffie(x) & CanCatchBall(x)) -> CanCatchBall(x))", "all x.(QuincyMcDuffie(x) -> CanCatchBall(x))", "all x.(QuincyMcDuffie(x) -> CanCatchEveryBall(x))", "all x.((QuincyMcDuffie(x) & Ball(y)) -> CanCatches(x,y))", "all x.((QuincyMcDuffie(x) & Ball(y)) -> CanCapture(x,y))", "all x.(QuincyMcDuffie(x) -> CanCatchesBall(x))", "All x.(QuincyMcDuffie(x) -> CanCatchBall(x))", "all x.(QuincyMcDuffie(x) -> CanCatchAllBalls(x))", "all x.((QuincyMcDuffie(x) & Ball(y)) -> CanCatch(x,y))", "all x.(QuincyMcDuffie(x) -> CanCaptureBall(x))", "All x.(QuincyMcDuffie(x) -> CanCatchEveryBall(x))", "All x.(QuincyMcDuffie(x) -> CanCatchesBall(x))", "all x.((QuincyMcDuffie(x) & Ball(x)) -> CanCatch(x,y))", "All x.(QuincyMcDuffie(x) -> CanCatchAllBalls(x))", "all x.(QuincyMcDuffie(x) -> CanCatchAllBalls(x))"]}
{"id": "folio_train_2453", "nl": "Professional wide receivers are good at catching balls.", "fol": "all x.((IsProfessional(x) & IsWideReceiver(x)) -> (GoodAtCatching(x,y) & IsBall(y)))", "prediction": ["all x.(ProfessionalWideReceiver(x) -> GoodAtCatchingBalls(x))", "all x.(ProfessionalWideReceiver(x) -> GoodAtCatchingBalls(x))", "all x.((ProfessionalWideReceiver(x) & GoodAtCatchingBalls(x)) -> GoodAtCatchingBalls(x))", "all x y.((ProfessionalWideReceiver(x) & Ball(y)) -> GoodAtCatching(x,y))", "all x.(WideReceiver(x) -> GoodAtCatchingBalls(x))", "all x.((ProfessionalWideReceiver(x) & CatchBalls(x)) -> GoodAt(x))", "all x y.((ProfessionalWideReceiver(x) & Ball(y)) -> GoodAtCatching(x,y))", "all x.((ProfessionalWideReceiver(x) & GoodAtCatchingBalls(x)) -> GoodAtCatchingBalls(x))", "all x.(ProfessionalWideReceiver(x) -> (GoodAtCatchingBalls(x)))", "all x y.((ProfessionalWideReceiver(x) & Ball(y)) -> GoodAt(x,y))", "all x.(ProfessionalWideReceiver(x) -> GoodAtChargingBalls(x))", "all x.((ProfessionalWideReceiver(x) & GoodAtCatchingBalls(x)) -> GoodAtCatchingBalls(x))", "all x.(WideReceiver(x) -> GoodAtCatchingBalls(x))", "all x.((WideReceiver(x) & Professional(x)) -> GoodAtCatchingBalls(x))", "all x.(ProfessionalWearReceiver(x) -> GoodAtCatchingBalls(x))", "all x.((ProfessionalWideReceiver(x) & GoodAtCatchingBalls(x)) -> GoodAtCatchingBalls(x))"]}
{"id": "folio_train_2454", "nl": "Boves is a railway station located in France. ", "fol": "(IsRailwayStation(Boves) & IsLocatedIn(Boves,France))", "prediction": ["all x.(Boves(x) -> RailwayStation(x))", "all x.(Boves(x) -> (RailwayStation(x) & LocatedInFrance(x)))", "all x.(Boves(x) -> (RailwayStation(x) & LocatedIn(x,France)))", "(RailwayStation(Boves) & LocatedInFrance(Boves))", "all x.(Boves(x) -> (RailwayStation(x) & LocatedInFrance(x)))", "all x y z.((Boves(x) & RailwayStation(y) & France(z)) -> LocatedIn(x,y,z))", "Boves (RailwayStation(Boves) & LocatedInFrance(Boves))", "all x y.((Boves(x) & RailwayStation(y)) -> LocatedIn(x,y))", "all x y.((Boves(x) & RailwayStation(y)) -> LocatedInFrance(x,y))", "all x.(Boves(x) -> (RailwayStation(x) & LocatedIn(x,France)))", "(RailwayStation(Boves) & LocatedIn(Boves,France))", "all x y.((Boves(x) & RailwayStation(y) & LocatedIn(x,y)) -> LocatedIn(x,y))", "all x.(Boves(x) -> RailwayStation(x) & LocatedInFrance(x))", "all x y.((Boves(x) & France(y)) -> RailwayStation(x,y))", "exists x.(Boves(x) & RailwayStation(x) & LocatedIn(x,France))", "all x y.((Boves(x) & RailwayStation(y)) -> LocatedInFrance(x))"]}
{"id": "folio_train_2455", "nl": "The preceding station of Boves is Longueau.", "fol": "IsPrecededBy(Boves,Longueau)", "prediction": ["all x.(Boves(x) -> Longueau(x))", "all x.(BovesStation(x) -> Longueau(x))", "all x y.((BovesStation(x) & Station(y)) -> Longueau(x))", "all x y.((Boves(x) & Station(y)) -> Longueau(x))", "All x.(Boves(x) -> Longueau(x))", "(PreceedingStationOfBoves(Boves) -> Longueau(Boves))", "all x.(BovesStation(x) -> LongueauStation(x))", "(PreceedingStation(Boves) -> Longueau(Boves))", "all x y.((Boves(x) & Station(y)) -> Longueau(x,y))", "(PassendingStation(Boves) -> Longueau(Boves))", "All x.(BovesStation(x) -> Longueau(x))", "all x y.((BovesStation(x) & Station(y)) -> Longueau(x,y))", "all x y.((Boves(x) & Station(y)) -> Longueau(y))", "-exists x.(BovesStation(x) & LongueauStation(x))", "all x.(Boves(x) -> Station(x,Longueau))", "(PreceedingStation(Boves) -> Longueau(Boves))"]}
{"id": "folio_train_2456", "nl": "The preceding station of Dommartin is Boves.", "fol": "IsPrecededBy(Dommartin,Boves)", "prediction": ["all x.((Station(x) & Dommartin(x)) -> Boves(x))", "all x.(Dommartin(x) -> Boves(x))", "(PreceedingStationOfDommartin(dommartin) -> Boves(dommartin))", "(PreceedingStationOfDommartin(dommartin) -> Boves(dommartin))", "(PreceedingStationOfDommartin(Dommartin) -> Boves(Dommartin))", "(PreceedingStationOfDommartin(Dommartin) -> Boves(Dommartin))", "(PassendingStationOfDommartin(Dommartin) -> Boves(Dommartin))", "All x.(Dommartin(x) -> Boves(x))", "all x y.((Station(x) & Dommartin(y)) -> Boves(x))", "(PassendingStationOfDommartin(dommartin) -> Boves(dommartin))", "all x y.((Station(x) & Dommartin(y)) -> Boves(x,y))", "(PassendingStationOfDommartin(dommartin) -> Boves(dommartin))", "(PeteringStationOfDommartin(dommartin) -> Boves(dommartin))", "(PreceedingStation(dommartin) -> Boves(dommartin))", "all x y.((Station(x) & Dommartin(y)) -> Boves(y))", "(PreceedingStation(Dommartin) -> Boves(Dommartin))"]}
{"id": "folio_train_2457", "nl": "France is a European country.", "fol": "IsLocatedIn(France,Europe)", "prediction": ["all x.(France(x) -> EuropeanCountry(x))", "all x.((France(x) & EuropeanCountry(x)) -> Country(x))", "all x.((France(x) & EuropeanCountry(x)) -> -EuropeanCountry(x))", "all x y.((France(x) & Country(y)) -> European(x))", "all x.((France(x) & EuropeanCountry(x)) -> EuropeanCountry(x))", "all x.(France(x) -> EuropeanCountry(x))", "all x.((France(x) & European(x)) -> Country(x))", "all x.((France(x) & EuropeanCountry(x)) -> France(x))", "all x.(France(x) -> EuropeanCountry(x))", "all x.((France(x) & EuropeanCountry(x)) -> LocatedIn(x,y))", "(EuropeanCountry(France) & EuropeanCountry(France))", "all x.(France(x) -> (EuropeanCountry(x) & EuropeanCountry(x)))", "all x.((France(x) & EuropeanCountry(x)) -> French(x))", "all x.((France(x) & EuropeanCountry(x)) -> Is(x,y))", "all x.((France(x) & Country(x)) -> European(x))", "(EuropeanCountry(France) & -EuropeanCountry(France))"]}
{"id": "folio_train_2458", "nl": "Dommartin is situated on the Paris\u2013Lille railway. ", "fol": "IsSituatedOn(Dommartin,PairsLille)", "prediction": ["(SituatedOnRailway(Dommartin) & ParisLille(Dommartin))", "all x y.((Dommartin(x) & ParisLilleRailway(y)) -> SituatedOn(x,y))", "all x.(Dommartin(x) -> SituatedOnRailway(x,Paris,Lille))", "(SituatedOnRailway(Dommartin,Paris) & SituatedOnLille(Dommartin,Lille))", "all x y.((Dommartin(x) & Railway(y)) -> SituatedOn(x,y))", "all x.(Dommartin(x) -> SituatedOnParisLilleRailway(x))", "(SituatedOnRailway(Dommartin,Paris) & LocatedOnLille(Dommartin,Lille))", "all x y.((Dommartin(x) & Railway(y)) -> LocatedOn(x,y))", "all x y.((Dommartin(x) & ParisLilleRailway(y)) -> LocatedOn(x,y))", "(SituatedOnRailway(Dommartin,Paris) & SituatedOnLille(Dommartin,Paris))", "all x y z.((Dommartin(x) & Railway(y) & Railway(z)) -> SituatedOn(x,y,z))", "all x.(Dommartin(x) -> SitsOnRailway(x,Paris,Lille))", "all x.(Dommartin(x) -> LocatedOnRailway(x,Paris,Lille))", "(SituatedOnRailway(Dommartin,Paris) & SituatedOnLille(Dommartin))", "all x.(Dommartin(x) -> (SituatedOnRailway(x,Paris) & SituatedOnLille(x)))", "All x.(Dommartin(x) -> SituatedOnRailway(x,Paris,Lille))"]}
{"id": "folio_train_2459", "nl": "Any two contiguous stations are on the same railway.", "fol": "all z.((IsSituatedOn(x,z) & (IsPrecededBy(x,y) | IsPrecededBy(y,x))) -> IsSituatedOn(y,z))", "prediction": ["all x.((ContiguousStation(x) & ContiguousStation(x)) -> OnSameRailway(x))", "all x.(ContiguousStation(x) -> OnSameRailway(x))", "all x y.((ContiguousStation(x) & ContiguousStation(y)) -> OnSameRailway(x,y))", "all x.((Station(x) & Contiguous(x)) -> OnSameRailway(x))", "all x.((ContiguousStation(x) & ContiguousStation(x)) -> SameRailway(x))", "all x.(ContiguousStation(x) -> SameRailway(x))", "all x y z.((ContiguousStation(x) & ContiguousStation(y) & Railway(z)) -> OnSameRailway(x,y,z))", "all x y.((ContiguousStation(x) & ContiguousStation(y)) -> OnSameRailway(x))", "all x y.((ContiguousStation(x) & ContiguousStation(y)) -> SameRailway(x,y))", "all x.((ContiguousStation(x) & Railway(x)) -> OnSameRailway(x))", "all x.((ContiguousStation(x) & SameRailway(x)) -> OnSameRailway(x))", "all x.((Station(x) & Contiguous(x)) -> SameRailway(x))", "all x.((ContiguousStation(x) & Station(x)) -> OnSameRailway(x))", "all x.((ContiguousStation(x) & OnSameRailway(x)) -> OnSameRailway(x))", "all x.((ContiguousStation(x) & -ContiguousStation(x)) -> OnSameRailway(x))", "all x.((Station(x) & Station(x)) -> OnSameRailway(x))"]}
{"id": "folio_train_2460", "nl": "Boves is served by regional TER Hauts-de-France trains.", "fol": "IsServedBy(HautsDeFrance,Boves)", "prediction": ["all x y.((Boves(x) & RegionalTrain(y)) -> ServicedBy(x,y))", "all x y z.((Boves(x) & RegionalTrain(y) & HautsDeFrance(z)) -> ServicedBy(x,y,z))", "all x y.((Boves(x) & RegionalTrain(y)) -> Serves(x,y))", "all x y.((Boves(x) & RegionalTrain(y)) -> ServedBy(x,y))", "all x y z.((Boves(x) & RegionalTrain(y) & HautsDeFrance(z)) -> ServedBy(x,y,z))", "all x y z.((Boves(x) & RegionalTrain(y) & HautsDeFrance(z)) -> Serves(x,y,z))", "all x y.((Boves(x) & RegionalTrain(y)) -> ServedBy(x,y))", "all x y.((Boves(x) & RegionalTrain(y)) -> (ServedBy(x,y) & HautsDeFrance(y)))", "all x.(Boves(x) -> ServedByRegionalTERTrains(x,HautsDeFrance))", "all x y z.((Boves(x) & RegionalTrain(y) & TER(z)) -> ServedBy(x,y,z))", "all x y z.((Boves(x) & RegionalTrain(y) & TER(z)) -> ServicedBy(x,y,z))", "all x.(Boves(x) -> (ServedByRegionalTrains(x) & HautsDeFrance(x)))", "all x y.((Boves(x) & RegionalTrain(y) & TER(y)) -> Serves(x,y))", "all x y.((Boves(x) & RegionalTERTrain(y)) -> Serves(x,y))", "all x.(Boves(x) -> ServedByRegionalTrains(x,HautsDeFrance))", "all x.(Boves(x) -> (ServedByRegionalTERTrains(x) & HautsDeFrance(x)))"]}
{"id": "folio_train_2461", "nl": "If A is located in B and B is located in C, then A is located in C.", "fol": "all z.((IsLocatedIn(x,y) & IsLocatedIn(y,z)) -> IsLocatedIn(x,z))", "prediction": ["all x.((LocatedIn(x,B) & LocatedIn(x,C)) -> LocatedIn(x,C))", "all x.((LocatedIn(x,B) & LocatedIn(x,C)) -> LocatedIn(x,C))", "all x.((LocatedIn(x,B) & LocatedIn(x,C)) -> LocatedIn(x,C))", "all x.((LocatedIn(x,B) & LocatedIn(x,C)) -> LocatedIn(x,C))", "all x.((LocatedInB(x) & LocatedInC(x)) -> LocatedInC(x))", "all x.((LocatedInB(x) & LocatedInC(x)) -> LocatedInC(x))", "all x.((A(x) & LocatedInB(x) & LocatedInC(x)) -> LocatedInC(x))", "all x.((LocatedInB(x) & LocatedInC(x)) -> LocatedInC(x))", "all x.((LocatedIn(x,B) & LocatedIn(x,C)) -> LocalizedIn(x,C))", "all x.((LocatedIn(x,B) & LocatedIn(x,C)) -> LocatedIn(x,C))", "all x y.((A(x) & B(y) & LocatedIn(x,y)) -> LocatedIn(x,y))", "all x.((LocatedInB(x) & LocatedInC(x)) -> LocatedInC(x))", "all x.((LocatedIn(x,B) & LocatedIn(x,C)) -> LocatedIn(x,C))", "all x.((LocatedIn(x,B) & LocatedIn(x,C)) -> LocatedIn(x,C))", "all x y z.((A(x) & B(y) & C(z)) -> (LocatedIn(x,y) & LocatedIn(x,z)))", "all x y z.((A(x) & B(y) & C(z)) -> (LocatedIn(x,y) & LocatedIn(y,z)))"]}
{"id": "folio_train_2462", "nl": "If A precedes B and B preceds C, than A preceds C.", "fol": "all z.((IsPrecededBy(x,y) & IsPrecededBy(y,z)) -> IsPrecededBy(x,z))", "prediction": ["all x.((Preceeds(x,B) & Preceeds(x,C)) -> Preceeds(x,C))", "all x.((PreceedsB(x) & PreceedsB(x)) -> PreceedsC(x))", "all x.((Preceeds(x,A) & Preceeds(x,B)) -> Preceeds(x,C))", "all x.((PreceedsB(x) & PreceedsC(x)) -> PreceedsC(x))", "all x y.((Preceeds(x,y) & B(y) & Preceeds(x,y)) -> Preceeds(x,y))", "all x.((Preceeds(x,A) & Preceeds(x,B)) -> Preceeds(x,A))", "all x.((Preceeds(x,B) & Preceeds(x,B)) -> Preceeds(x,C))", "all x.((Preceeds(x,B) & Preceeds(x,C)) -> Preceeds(x,A,C))", "all x y.((Preceeds(x,y) & BPreceeds(x,y)) -> Preceeds(x,y))", "all x y.((Preceeds(x,y) & B(x) & Preceeds(x,y)) -> Preceeds(x,y))", "all x.((Preceeds(x,B) & Preceeds(x,C)) -> Preceeds(x,A))", "all x y.((Preceeds(x,y) & B(y) & Preceeds(y,x)) -> Preceeds(x,y))", "all x.((Paves(x,B) & Preceeds(x,C)) -> Preceeds(x,C))", "all x y.((Preceeds(x,y) & Preceeds(x,y)) -> Preceeds(x,y))", "all x.(Preceeds(x,B) & Preceeds(x,C)) -> Preceeds(x,C))", "all x y.((PreceedsB(x) & PreceedsC(y)) -> PreceedsC(x,y))"]}
{"id": "folio_train_2463", "nl": "Boves is not in Europe.", "fol": "-IsLocatedIn(Boves,Europe)", "prediction": ["all x.(Boves(x) -> -InEurope(x))", "all x.(Boves(x) -> -Europe(x))", "-exists x.(Boves(x) & -InEurope(x))", "(Boves(Boves) & -InEurope(Boves))", "exists x.(Boves(x) & -InEurope(x))", "all x.(Boves(x) -> -(InEurope(x) | InEurope(x))))", "Boves is notInEurope(Boves)", "all x.(Bove(x) -> -InEurope(x))", "exists x.(Boves(x) & -Europe(x))", "Boves -InEurope(Boves)", "-(Boves(Boves) & InEurope(Boves))", "all x.(Boves(x) -> -(InEurope(x) | InEurope(x)))", "(Boves(Boves) & -Europe(Boves))", "-(BovesInEurope(Boves))", "all x.(Bove(x) -> -Europe(x))", "-exists x.(Boves(x) & InEurope(x))"]}
{"id": "folio_train_2464", "nl": "Longueau is served by regional TER Hauts-de-France trains.", "fol": "IsServedBy(HautsDeFrance,Longueau)", "prediction": ["all x.(Longueau(x) -> ServedByRegionalTERTrains(x,HautsDeFrance))", "all x y.((Longueau(x) & RegionalTrain(y)) -> ServicedBy(x,y))", "all x y.((Longueau(x) & RegionalTrain(y)) -> Serves(x,y))", "all x y z.((Longueau(x) & RegionalTrain(y) & HautsDeFrance(z)) -> Serves(x,y,z))", "all x y.((Longueau(x) & RegionalTERTrain(y)) -> Serves(x,y))", "all x y z.((Longueau(x) & RegionalTrain(y) & HautsDeFrance(z)) -> ServicedBy(x,y,z))", "all x y.((Longueau(x) & RegionalTrain(y)) -> (ServedBy(x,y) & HautsDeFrance(y)))", "all x y z.((Longueau(x) & RegionalTrain(y) & HautsDeFrance(z)) -> ServedBy(x,y,z))", "all x y.((Longueau(x) & RegionalTERTrain(y)) -> ServicedBy(x,y))", "all x.(Longueau(x) -> (ServedByRegionalTERTrains(x) & HautsDeFrance(x)))", "all x.(Longueau(x) -> ServedByRegionalTERHautsDeFranceTrains(x))", "all x y.((Longueau(x) & RegionalTrain(y)) -> ServedBy(x,y))", "all x y.((Longueau(x) & RegionalTrain(y) & TER(y)) -> Serves(x,y))", "all x y z.((Longueau(x) & RegionalTrain(y) & TER(z)) -> Serves(x,y,z))", "all x.(Longueau(x) -> ServedByRegionalTrains(x,HautsDeFrance))", "all x y.((Longueau(x) & RegionalTERTrain(y)) -> ServedBy(x,y))"]}
{"id": "folio_train_2465", "nl": "Edwin Smith was a New Zealand Rower from Auckland.", "fol": "(OriginatesFrom(Edwinsmith,Newzealand) & IsRower(Edwinsmith) & OriginatesFrom(Edwinsmith,Auckland))", "prediction": ["(NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith))", "(NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmithSmith)", "(NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & New", "(NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & FromAuckland(EdwinSmith))", "(NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith,AucklandRower(EdwinSmith,AucklandRower(EdwinSmith,Auckland)) & NewZealandRower(EdwinSmith,AucklandRower(EdwinSmith,AucklandRower(AucklandRower(AucklandRower(AucklandRower(AucklandRower(AucklandRower(Auckland)))", "(NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith))", "(NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith,AucklandRower(EdwinSmith,AucklandRower(EdwinSmith,Auckland)) & NewZealandRower(EdwinSmith,AucklandRower(EdwinSmith,AucklandRower(AucklandRower(AucklandRower(AucklandRower(AucklandRower(AucklandRower(AucklandRower(Auckland)))", "(NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith,AucklandRower(EdwinSmith,AucklandRower(EdwinSmith,Auckland)) & NewZealandRower(EdwinSmith,AucklandRower(EdwinSmith,AucklandRower(AucklandRower(AucklandRower(AucklandRower(AucklandRower(AucklandRower(Auckland))", "(NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith,AucklandRower(EdwinSmith,AucklandRower(EdwinSmith,AucklandRower))", "(NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZ", "(NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith,AucklandRower(EdwinSmith", "(NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith,AucklandRower(EdwinSmith,AucklandRower(EdwinSmith,Auckland)) & NewZealandRower(EdwinSmith,AucklandRower(EdwinSmith,AucklandRower(AucklandRower(AucklandRower(AucklandRower(AucklandRower(AucklandRower(Auckland)-Auckland)-Auckland)-Auckland)-Auckland)-Auckland)", "(NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith,AucklandRower(EdwinSmith,AucklandRower(EdwinSmith,Auckland)))", "(NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZzealandRower(EdwinSmithSmith)", "(NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith,AucklandRower(EdwinSmith,AucklandRower(EdwinSmith,Auckland)) & NewZealandRower(EdwinSmith,AucklandRower(EdwinSmith,AucklandRower(AucklandRower(AucklandRower(AucklandRower(AucklandRower(AucklandRower(Auckland)-Auckland)-Auckland)-Auckland)-Auckland)-Auckland)-Auckland)-Auckland)", "(NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith,AucklandRower(EdwinSmith,AucklandRower(EdwinSmith,Auckland)) & NewZealandRower(EdwinSmith,AucklandRower(EdwinSmith,AucklandRower(AucklandRower(AucklandRower(AucklandRower(AucklandRower(AucklandRower(AucklandRower(Auckland)-Auckland)-Auckland)-Auckland)-Auckland)-Auckland)-Auckland)-Auckland)"]}
{"id": "folio_train_2466", "nl": "Edwin Smith was also known as Ted Smith.", "fol": "Alias(Edwinsmith,Tedsmith)", "prediction": ["(exists x.(EdwinSmith(x) & TedSmith(x)))", "(EdwinSmith(EdwinSmith) & TedSmith(EdwinSmith))", "(TedwinSmith(EdwinSmith) & TedSmith(EdwinSmith))", "EdwinSmith (exists x.(EdwinSmith(x) & TedSmith(x)))", "EdwinSmith(e) & TedSmith(e))", "EdwinSmith(EdwinSmith) & TedSmith(EdwinSmith))", "(TedwinSmith(edwinsmith) & TedSmith(edwinsmith))", "EdwinSmith (EdwinSmith) & TedSmith(EdwinSmith))", "(EdwinSmith(edwinsmith) & TedSmith(edwinsmith))", "((EdwinSmith(EdwinSmith) & TedSmith(EdwinSmith)) -> TedSmith(EdwinSmith))", "(exists x.(EdwinSmith(x) & EdwinSmith(x)) & TedSmith(x))", "(exists x.(EdwinSmith(x) & TedSmith(x)) & EdwinSmith(x))", "(EdwinSmith(e) & TedSmith(e))", "((EdwinSmith(EdwinSmith) & TedSmith(EdwinSmith)))", "((EdwinSmith(EdwinSmith) & TedSmith(EdwinSmith)) -> AlsoKnownAs(EdwinSmith))", "All x.(EdwinSmith(x) -> TedSmith(x))"]}
{"id": "folio_train_2467", "nl": "Edwin Smith went to Rose Road Primary School, located in Grey Lynn.", "fol": "(Attended(Edwinsmith,Roseroadprimaryschool) & IsLocatedIn(Roseroadprimaryschool,Greylynn))", "prediction": ["all x y z.((EdwinSmith(x) & RoseRoadPrimarySchool(y) & GreyLynn(z)) -> GoesTo(x,y,z))", "all x.(EdwinSmith(x) -> (GoesToRoseRoadPrimarySchool(x) & LocatedInGreyLynn(x)))", "all x y.((EdwinSmith(x) & RoseRoadPrimarySchool(y) & GreyLynn(y)) -> GoesTo(x,y))", "all x.((EdwinSmith(x) & RoseRoadPrimarySchool(x) & GreyLynn(x)) -> GoesTo(x,y))", "all x y.((EdwinSmith(x) & RoseRoadPrimarySchool(y)) -> LocatedInGreyLynn(x,y))", "all x y z.((EdwinSmith(x) & RoseRoadPrimarySchool(y) & GreyLynn(z)) -> GoesTo(x,y))", "all x y.((EdwinSmith(x) & RoseRoadPrimarySchool(y) & LocatedInGreyLynn(x)) -> GoesTo(x,y))", "all x y.((EdwinSmith(x) & RoseRoadPrimarySchool(y) & LocatedInGreyLynn(x,y)) -> GoesTo(x,y))", "all x y.((EdwinSmith(x) & RoseRoadPrimarySchool(y) & LocatedInGreyLynn(y)) -> GoesTo(x,y))", "EdwinSmith went to RoseRoadPrimarySchool(e) & LocatedInGreyLynn(e))", "all x.((EdwinSmith(x) & RoseRoadPrimarySchool(x)) -> LocatedInGreyLynn(x))", "all x.(EdwinSmith(x) -> (GoesToRoseRoadPrimarySchool(x) & FoundInGreyLynn(x)))", "all x y.((EdwinSmith(x) & RoseRoadPrimarySchool(y) & GreyLynn(x)) -> GoesTo(x,y))", "all x y.((EdwinSmith(x) & RoseRoadPrimarySchool(y) & GreyLynn(z)) -> GoesTo(x,y,z))", "all x.(EdwinSmith(x) -> (GoesToRoseRoadPrimarySchool(x) & GreyLynn(x)))", "all x.((EdwinSmith(x) & RoseRoadPrimarySchool(x) & LocatedInGreyLynn(x)) -> GoesTo(x,y))"]}
{"id": "folio_train_2468", "nl": "Edwin Smith was a sergeant who served with the New Zealand 24th battalion in Italy and Egypt.", "fol": "(IsSergeant(Edwinsmith) & ServedWithUnit(Edwinsmith,Newzealand24thbattalion) & ServedInCountry(Edwinsmith,Italy) & ServedInCountry(Edwinsmith,Egypt))", "prediction": ["all x.((Sgt.EdwinSmith(x) & New Zealand24thBattalion(x)) -> (ServedInItaly(x) & ServedInEgypt(x)))", "Edwin Smith was a sergeant who served with the New Zealand 24th Battalion in Italy and Egypt.", "all x y.((Sgt.(EdwinSmith(x) & New Zealand24thBattalion(y)) -> (ServedIn(x,y) & In(x,y)))", "all x y.((Sgt.EdwinSmith(x) & New Zealand24thBattalion(y)) -> (ServedIn(x,y) & In(x,y)))", "all x.((Sgt.EdwinSmith(x) & New Zealand24thBattalion(x)) -> (ServedIn(x,Italy) & ServedIn(x,Egypt)))", "all x.((Sgt.(EdwinSmith) & New Zealand24thBattalion(x)) -> (ServedInItaly(x) & ServedInEgypt(x)))", "all x.((Sgt.EdwinSmith(x) & New Zealand24thBattalion(x)) -> (ServedIn(x,Italy,Egypt) & ServedIn(x,Egypt)))", "all x y.((Sgt.EdwinSmith(x) & New Zealand24thBattalion(y)) -> (ServedIn(x,y) & In(x,y) & In(x,y)))", "all x y.((Sergeant(x) & New Zealand24thBattalion(y)) -> (ServedIn(x,y) & In(x,y)))", "all x y.((Sgt.(EdwinSmith(x) & New Zealand24thBatalion(y)) -> (ServedIn(x,y) & In(x,y)))", "all x y.((Sgt.EdwinSmith(x) & New Zealand24thBatalion(y)) -> (ServedIn(x,y) & In(x,y)))", "all x.((Sgt.EdwinSmith(x) & New Zealand24thBattalion(x)) -> (ServedIn(x,Italy,Egypt) & ServedWith(x,Egypt)))", "all x.((Sgt.EdwinSmith(x) & New Zealand24thBattalion(x)) -> (ServedInItaly(x) | ServedInEgypt(x)))", "all x y.((Sgt.(EdwinSmith(x) & New Zealand24thBattalion(y)) -> (ServedIn(x,y) & In(x,y) & In(x,y)))", "all x y.((Sergeant(x) & New Zealand24thBattalion(y)) -> (ServedIn(x,y) & In(x,y) & In(x,y)))", "all x.((Sgt.EdwinSmith(x) & New Zealand24thBattalion(x)) -> (ServedIn(x,Italie,Egypt) & Sergeant(x)))"]}
{"id": "folio_train_2469", "nl": "Broadway Sheetmetals was a buisness that was ran and owned by Edwin Smith, who was a sheetmetal worker.", "fol": "(IsBusiness(Broadwaysheetmetals) & Managed(Edwinsmith,Broadwaysheetmetals) & Possesses(Edwinsmith,Broadwaysheetmetals) & IsSheetmetalWorker(Edwinsmith))", "prediction": ["all x.((BroadwaySheets(x) & RunAndOwnedByEdwinSmith(x) & SheetmetalWorker(x)) -> BroadwaySheetmetals(x))", "all x.((BroadwaySheets(x) & RunAndOwnedByEdwinSmith(x) & SheetmetalWorker(x)) -> BroadwaySheets(x))", "all x.((BroadwaySheets(x) & RunByEdwinSmith(x) & SheetmetalWorker(x)) -> Sheetmetals(x))", "all x.((Buisness(x) & RunAndOwnedByEdwinSmith(x) & SheetmetalWorker(x)) -> BroadwaySheetmetals(x))", "all x.((Buisness(x) & RunByEdwinSmith(x) & SheetmetalWorker(x)) -> BroadwaySheetmetals(x))", "all x.((BroadwaySheets(x) & RunByEdwinSmith(x) & SheetmetalWorker(x)) -> Sheetmetal(x))", "all x.((BroadwaySheets(x) & RanAndOwnedByEdwinSmith(x) & SheetmetalWorker(x)) -> BroadwaySheetmetals(x))", "all x.((BroadwaySheetmetals(x) & RunByEdwinSmith(x) & SheetmetalWorker(x)) -> OwnedByEdwinSmith(x))", "all x.((BroadwayShapemetals(x) & RunByEdwinSmith(x) & SheetmetalWorker(x)) -> OwnedByEdwinSmith(x))", "all x y.((BroadwaySheets(x) & EdwinSmith(y) & SheetmetalWorker(y)) -> RunAndOwnedBy(x,y))", "all x.((BroadwaySheets(x) & RanAndOwnedByEdwinSmith(x) & SheetmetalWorker(x)) -> BroadwaySheets(x))", "all x.((BroadwayShapemetals(x) & RunAndOwnedByEdwinSmith(x) & SheetmetalWorker(x)) -> BroadwayShapemetals(x))", "all x.((BroadwaySheets(x) & RunByEdwinSmith(x) & SheetmetalWorker(x)) -> SheetmetalWorker(x))", "all x.((BroadwaySheets(x) & RunAndOwnedByEdwinSmith(x) & SheetmetalWorker(x)) -> Sheetmetals(x))", "all x.((Buisness(x) & RunBy(x,EdwinSmith) & SheetmetalWorker(x)) -> BroadwaySheetmetals(x))", "all x.((BroadwayShapemetals(x) & RunAndOwnedByEdwinSmith(x) & SheetmetalWorker(x)) -> BroadwaySheetmetals(x))"]}
{"id": "folio_train_2470", "nl": "Ted Smith was a sergeant.", "fol": "IsSergeant(Tedsmith)", "prediction": ["all x.(Sergeant(x) -> TedSmith(x))", "all x.((TedSmith(x) & Sergeant(x)) -> Sergeant(x))", "all x.(Sgt.(TedSmith(x) -> Sergeant(x))", "all x.((TedSmith(x) & Sergeant(x)) -> Sergeant(x))", "all x.(Sgt.(TedSmith(x) -> Sergeant(x))", "all x.((TedSmith(x) & Sergeant(x)) -> Sergeant(x))", "all x.((TedSmith(x) & Sergeant(x)) -> Sergeant(x))", "all x.(Sgt.TedSmith(x) -> Sergeant(x))", "all x.(Sgt.TedSmith(x) -> Sergeant(x))", "(Sgt.TedSmith(Ted) & Sergeant(Ted))", "(Sergeant(TedSmith)", "(Sergeant(TedSmith) & Sergeant(TedSmith))", "(Sgt.TedSmith(Ted) & Sergeant(Ted))", "all x.(Sgt.(TedSmith) -> Sergeant(x))", "all x.(Sgt.(TedSmith) -> Sergeant(x))", "all x.(Sergeant(x) -> TedSmith(x))"]}
{"id": "folio_train_2471", "nl": "There are no rowers that own a buisness.", "fol": "-exists x y.(IsRower(x) & IsBusiness(y) & Possesses(x,y))", "prediction": ["-exists x.(Rower(x) & OwnsBuisness(x))", "-exists x.(Rower(x) & OwnsBaisness(x))", "-exists x.(Rower(x) & OwnsBisness(x))", "exists x.(Rower(x) & -OwnsBuisness(x))", "all x.((Rower(x) & -OwnsBuisness(x)) -> -(Rower(x) & OwnsBuisness(x)))", "-exists x.(Rower(x) & OwnsBubiness(x))", "-exists x.(Rower(x) & -OwnsBuisness(x))", "-exists x.(Rower(x) & HasBuisness(x))", "-exists x.(Rower(x) & OwnBaisness(x))", "-exists x.(Rower(x) & OwnsBussiness(x))", "-exists x.(Rower(x) & OwnsBeauty(x))", "-exists x.(Rower(x) & -OwnsBaisness(x))", "-exists x.(Rower(x) & OwnsBizness(x))", "exists x.(Rower(x) & -OwnsBaisness(x))", "all x.((Rower(x) & -OwnsBuisness(x)) -> -OwnsBuisness(x))", "-exists x.(Rower(x) & OwnBuisness(x))"]}
{"id": "folio_train_2472", "nl": "No sergeants are from Auckland.", "fol": "-exists x.(IsSergeant(x) & OriginatesFrom(x,Auckland))", "prediction": ["-exists x.(Sergeant(x) & FromAuckland(x))", "-exists x.(Sergeant(x) & From(x,Auckland))", "-exists x.(Sergeant(x) & -FromAuckland(x))", "-exists x.(S sergeant(x) & FromAuckland(x))", "-exists x.(Sergeant(x) & -Auckland(x))", "-exists x.(Sgt.(Sergeant(x) & FromAuckland(x))", "-exists x.(Sergeant(x) & LocatedIn(x,Auckland))", "-exists x.(S sergeant(x) & From(x,Auckland))", "(-exists x.(Sergeant(x) & FromAuckland(x)))", "-exists x.(Sergeant(x) & LocatedInAuckland(x))", "-exists x.(Sgt.(Sergeant(x) & From(x,Auckland)))", "-exists x.(Sergeant(x) & BasedInAuckland(x))", "-exists x.(Sergeant(x) & fromAuckland(x))", "-exists x.(Sergeant(x) & InAuckland(x))", "-exists x.(Sergeant(x) & Auckland(x))", "-exists x.(Sergeant(x) & From(x,Auckland)))"]}
{"id": "folio_train_2473", "nl": "No buisness owner has served in Egypt.", "fol": "all x.(exists y.(IsBusiness(y) & Possesses(x,y)) -> -ServedInCountry(x,Egypt))", "prediction": ["-exists x.(BuisnessOwner(x) & ServesInEgypt(x))", "-exists x.(BaisnessOwner(x) & ServesInEgypt(x))", "-exists x.(BuisnessOwner(x) & ServedInEgypt(x))", "-exists x.(BuisnessOwner(x) & ServedInEgypt(x))", "-exists x.(BuisnessOwner(x) & ServesIn(x,Egypt))", "-exists x.(BaisnessOwner(x) & ServedInEgypt(x))", "-exists x.(BaisnessOwner(x) & ServedInEgypt(x))", "-exists x.(BaisnessOwner(x) & ServesIn(x,Egypt))", "-exists x.(BuisnessOwner(x) & ServesInEgypte(x))", "-exists x.(BuisnessOwner(x) & ServicedInEgypt(x))", "-exists x.(BaisnessOwner(x) & ServicedInEgypt(x))", "-exists x.(BaisnessOwner(x) & ServesInEgypte(x))", "-exists x.(BuisnessOwner(x) & ServingInEgypt(x))", "-exists x.(BuisnessOwner(x) & ServedIn(x,Egypt))", "-exists x.(BuisnessOwner(x) & ServedInEgypte(x))", "-exists x.(BuisnessOwner(x) & ServedInEgypte(x))"]}
{"id": "folio_train_2474", "nl": "A werewolf is a human that can turn into a wolf.", "fol": "all x.((IsHuman(x) & CanTransformToWolf(x)) -> IsWerewolf(x))", "prediction": ["all x.(Worshipwolf(x) -> (Human(x) & CanTurnIntoWolf(x)))", "all x.(Worshipwolf(x) -> (Human(x) & TurnsIntoWolf(x)))", "all x.(Worshipwolf(x) -> (Human(x) & CanTurnIntoWolf(x)))", "all x.(Werewolf(x) -> (Human(x) & CanTurnIntoWolf(x)))", "all x.(Worshipwolf(x) -> (Human(x) & TurnsIntoWolf(x)))", "all x.(Worshipwolf(x) -> (Human(x) & CanTransformIntoWolf(x)))", "all x.(Worsewolf(x) -> (Human(x) & CanTurnIntoWolf(x)))", "all x.(Werewolf(x) -> (Human(x) & CanTurnIntoWolf(x)))", "all x.(Werewolf(x) -> (Human(x) & TurnsIntoWolf(x)))", "all x.(Worsewolf(x) -> (Human(x) & CanTurnIntoWolf(x)))", "all x.(Worshipwolf(x) -> (Human(x) & CanTransformIntoWolf(x)))", "all x.(Worsewolf(x) -> (Human(x) & TurnsIntoWolf(x)))", "all x.(Wormwolf(x) -> (Human(x) & CanTurnIntoWolf(x)))", "all x.(Werf(x) -> (Human(x) & CanTurnIntoWolf(x)))", "all x.(Worriedwolf(x) -> (Human(x) & CanTurnIntoWolf(x)))", "all x.(Worshipwolf(x) -> (Human(x) & CanBecomeWolf(x)))"]}
{"id": "folio_train_2475", "nl": "A werewolf has been scratched or bitten by another werewolf.", "fol": "all x.exists y.(IsWerewolf(x) -> ((IsBittenBy(x,y) | IsScratchedBy(x,y)) & IsWerewolf(y)))", "prediction": ["all x.(Worshipwolf(x) -> (Scratched(x) | Bited(x)))", "all x.(Worshipwolf(x) -> (Scraped(x) | Bited(x)))", "all x.(Werewolf(x) -> (Scraped(x) | Bited(x)))", "all x.(Worshipwolf(x) -> (Scratched(x) | BitedBy(x)))", "all x y.((Wrecking(x) & Waswolf(y)) -> (Scraped(x,y) | Bited(x,y)))", "all x.(Werewolf(x) -> (Scratched(x) | Bited(x)))", "all x.(Wormwolf(x) -> (Scratched(x) | Bited(x)))", "all x y.((Wormwolf(x) & (Scratched(x) | Bited(x))) -> Waswolf(y))", "all x.(Wormwolf(x) -> (Scraped(x) | Bited(x)))", "all x.(Worshipwolf(x) -> (Scraped(x) | BitedBy(x)))", "all x.(Werewolf(x) -> (Scratched(x) | BitedBy(x)))", "all x.(Wormwolf(x) -> (Scratched(x) | BitedBy(x)))", "all x.(Worshipwolf(x) -> (Cracked(x) | Bited(x)))", "all x.(Werewolf(x) -> (Scraped(x) | BitedBy(x)))", "all x y.((Wrecking(x) & Waswolf(y)) -> (Scraped(x) | Bited(x)))", "all x y.((Wormwolf(x) & (Scratched(x) | BitedBy(x))) -> Waswolf(y))"]}
{"id": "folio_train_2476", "nl": "If someone has been scratched or bitten, they have been attacked.", "fol": "all x.exists y.((IsBittenBy(x,y) | IsScratchedBy(x,y)) -> IsAttackedBy(x,y))", "prediction": ["all x.((Scraped(x) | Bited(x)) -> Attacked(x))", "all x.((Person(x) & (Scraped(x) | Bited(x))) -> Attacked(x))", "all x.((Cracked(x) | Bited(x)) -> Attacked(x))", "all x.((Person(x) & (Scrapped(x) | Bited(x))) -> Attacked(x))", "all x.((Person(x) & (Cracked(x) | Bited(x))) -> Attacked(x))", "all x.((Scrapped(x) | Bited(x)) -> Attacked(x))", "all x.((Scratched(x) | Bited(x)) -> Attacked(x))", "all x.((Scrabbled(x) | Bited(x)) -> Attacked(x))", "all x.((Person(x) & Scrubbed(x) & Bited(x)) -> Attacked(x))", "all x.((Scraped(x) | Bittened(x)) -> Attacked(x))", "all x.(((Scraped(x) | Bited(x))) -> Attacked(x))", "all x.((HasScraped(x) | HasBbitten(x)) -> Attacked(x))", "all x.((Scraped(x) | Bitted(x)) -> Attacked(x))", "all x.((Person(x) & (Scraped(x) | Bited(x))) -> Afflicted(x))", "all x.((Scraped(x) | Bited(x)) -> Afflicted(x))", "all x.((Person(x) & (Scraped(x) | Bited(x))) -> Attack(x))"]}
{"id": "folio_train_2477", "nl": "All humans are werewolves.", "fol": "all x.(IsHuman(x) -> IsWerewolf(x))", "prediction": ["all x.(Human(x) -> Werewolf(x))", "all x.(Human(x) -> Waswolf(x))", "all x.(Human(x) -> Wolver(x))", "all x.(Human(x) -> Werewolves(x))", "all x.(Human(x) -> WoundedWolf(x))", "all x.(Human(x) -> Warbler(x))", "all x y.((Human(x) & Waswolf(y)) -> Waswolf(x))", "all x.(Human(x) -> Werwolf(x))", "all x.(Human(x) -> Wolf(x))", "all x.(Habitat(x) -> Werewolf(x))", "all x.(Human(x) -> Warrior(x))", "all x.(Human(x) -> Werewolf(x))", "all x.(Human(x) -> Waswolf(x))", "all x.(Habitat(x) -> Waswolf(x))", "all x.(Human(x) -> Waswolves(x))", "all x y.((Human(x) & Waswolf(y)) -> Are(x,y))"]}
{"id": "folio_train_2478", "nl": "A werewolf is a wolf.", "fol": "all x.(IsWerewolf(x) -> Wolf(x))", "prediction": ["all x.(Worshipwolf(x) -> Wolf(x))", "all x.(Wormwolf(x) -> Wolf(x))", "all x.(Werewolf(x) -> Wolf(x))", "all x.(Wolf(x) -> Wolf(x))", "all x.(Wordwolf(x) -> Wolf(x))", "all x.(Worshipper(x) -> Wolf(x))", "all x.(Worshipwolf(x) -> Wolf(x))", "all x.(Worsewolf(x) -> Wolf(x))", "all x.(Wordewolf(x) -> Wolf(x))", "all x y.((Worshipwolf(x) & Wolf(y)) -> Waswolf(x))", "all x.(Worf(x) -> Wolf(x))", "all x.(Werf(x) -> Wolf(x))", "all x.(Worriedwolf(x) -> Wolf(x))", "all x.(Wornwolf(x) -> Wolf(x))", "all x.(Wormwolf(x) -> Wolf(x))", "all x.(Wolf(x) -> Wolf(x))"]}
{"id": "folio_train_2479", "nl": "A werewolf has scratched someone before.", "fol": "exists x y.(IsWerewolf(x) & IsScratchedBy(x,y))", "prediction": ["all x y.((Worshipwolf(x) & Person(y)) -> Scratched(x,y))", "all x y.((Werewolf(x) & Person(y)) -> Scratched(x,y))", "all x y.((Worshipwolf(x) & Person(y)) -> ScrubbedBefore(x,y))", "all x y.((Wormwolf(x) & Person(y)) -> Scratched(x,y))", "all x y.((Worshipwolf(x) & Person(y)) -> Scrubbed(x,y))", "all x y.((Worshipwolf(x) & Person(y)) -> ScratchedBefore(x,y))", "all x y.((Wrecking(x) & Person(y)) -> Scratched(x,y))", "all x y.((Wormwolf(x) & Person(y)) -> ScrubbedBefore(x,y))", "all x y.((Worshipwolf(x) & Person(y)) -> Scratches(x,y))", "all x y.((Werewolf(x) & Person(y)) -> ScrubbedBefore(x,y))", "all x y.((Werewolf(x) & Person(y)) -> Scrubbed(x,y))", "all x y.((Wrecking(x) & Person(y)) -> ScrubbedBefore(x,y))", "all x y.((Wrecking(x) & Person(y)) -> Scrubbed(x,y))", "all x y.((Wormwolf(x) & Person(y)) -> Scrubbed(x,y))", "all x y.((Werf(x) & Person(y)) -> Scratched(x,y))", "all x y.((Werewolf(x) & Person(y)) -> Scratches(x,y))"]}
{"id": "folio_train_2480", "nl": "UFC Fight Night was a mixed martial arts event and was held in Sweden.", "fol": "(UFCFightNightEvent(UFCFightNight) & IsMixedMartialEvent(UFCFightNight) & HeldInSweden(UFCFightNight))", "prediction": ["all x.(UFCFightNight(x) -> (MixedMartialArtsEvent(x) & HeldInSweden(x)))", "all x.(FightNight(x) -> (MixedMartialArtsEvent(x) & HeldInSweden(x)))", "all x.(FightNight(x) -> (MixedMartialArts(x) & HeldInSweden(x)))", "all x.(UFCFightNight(x) -> (MixedMartialArts(x) & HeldInSweden(x)))", "all x.((UFCFightNight(x) & MixedMartialArtsEvent(x) & HeldInSweden(x)) -> HeldInSweden(x))", "all x.((UFCFightNight(x) & MixedMartialArtsEvent(x) & HeldInSweden(x)) -> HeldIn(x,Sweden))", "all x.(FightNight(x) -> (MixedMartialArtsEvent(x) & HeldInSweden(x)))", "all x.(UFCFightNight(x) -> (MixedMartialArtsEvent(x) & HeldInSweden(x)))", "all x.(UFCFightNight(x) -> (MixedMartialArtsEvent(x) & HeldInSweden(x)))", "all x.((FightNight(x) & MixedMartialArtsEvent(x) & HeldInSweden(x)) -> UFCFightNight(x))", "all x.(FightNight(x) -> (MixedMartialArtsEvent(x) & HeldIn(x,Sweden)))", "all x.((UFCFightNight(x) & MixedMartialArtsEvent(x) & HeldInSweden(x)) -> UFCFightNight(x))", "all x.((FightNight(x) & MixedMartialArtsEvent(x) & HeldInSweden(x)) -> UFC(x))", "all x y.((UFCFightNight(x) & MixedMartialArtsEvent(y) & HeldIn(x,y)) -> HeldIn(x,y))", "all x.(FightNight(x) -> (MixedMartialArts(x) & HeldInSweden(x)))", "all x.((UFCFightNight(x) & MixedMartialArts(x)) -> HeldInSweden(x))"]}
{"id": "folio_train_2481", "nl": "At UFC Fight Night, Sadollah was scheduled to fight Musoke.", "fol": "(UFCFightNightEvent(UFCFightNight) -> IsScheduledToFight(Sadollah,Musoke))", "prediction": ["all x.((Sadollah(x) & UFCFightNight(x)) -> ScheduledToFightMusoke(x))", "all x.((Sadollah(x) & UFCFightNight(x)) -> ScheduledToFight(x,Musoke))", "all x.((Sadollah(x) & UFCFightNight(x)) -> ScheduledToFight(x,musoke))", "All x.((Sadollah(x) & UFCFightNight(x)) -> ScheduledToFightMusoke(x))", "all x.((Sadollah(x) & UFCFightNight(x)) -> ScheduledToFightMousoke(x))", "All x.((Sadollah(x) & UFCFightNight(x)) -> ScheduledToFight(x,Musoke))", "(Sadollah(Sadollah) & UFCFightNight(Sadollah))", "all x y.((UFCFightNight(x) & Sadollah(y)) -> ScheduledToFight(y,Musoke))", "all x.((Sadollah(x) & UFCFightNight(x)) -> ScheduledForFight(x,Musoke))", "(Sadollah(Sadollah) & UFCFightNight(Sadollah) & ScheduledToFightMusoke(Sadollah))", "((Sadollah(Sadollah) & UFCFightNight(Sadollah)) -> ScheduledToFight(Sadollah,Musoke))", "((Sadollah(Sadollah) & UFCFightNight(Sadollah)) -> ScheduledToFightMusoke(Sadollah))", "all x y.((UFCFightNight(x) & Sadollah(y)) -> ScheduledToFightMusoke(y,x))", "all x y z.((FightNight(x) & Sadollah(y) & Musoke(z)) -> ScheduledToFight(y,z))", "all x y.((FightNight(x) & Sadollah(y)) -> ScheduledToFight(y,Musoke))", "all x.((Sadollah(x) & UFCFightNight(x)) -> ScheduledToFight(x,Mousoke))"]}
{"id": "folio_train_2482", "nl": "Sadollah fought Akiyama at UFC Fight Night.", "fol": "(UFCFightNightEvent(UFCFightNight) -> CompeteInFight(Sadollah,Akiyama))", "prediction": ["Sadollah fought Akiyama at UFCFightNight(Sadollah)", "Sadollah fought Akiyama at UFC FightNight(Sadollah)", "Sadollah fought Akiyama at UFCFightNight(Sadollah,FightNight)", "Sadollah fought Akiyama at UFCFightNight(Sadollah,UFC)", "all x y.((Sadollah(x) & Akiyama(y)) -> FightingAtUFightNight(x,y))", "Sadollah fought Akiyama at UFC FightNight(Sadollah,FightNight)", "Sadollah fought Akiyama at UFCFightNight(Sadollah,UFC)", "All x y.((Sadollah(x) & Akiyama(y)) -> FightingAtUFightNight(x,y))", "Sadollah fought Akiyama at UFCFightNight(Sadollah,FightNight(Sadollah))", "Sadollah fought Akiyama at UFC FightNight(Sadollah,UFC)", "Sadollah fought Akiyama at UFCFightNight(Sadollah,UFCFightNight)", "Sadollah fought Akiyama at UFC FightNight.", "Sadollah fought Akiyama at UFCFightNight(Sadollah,FightNight(Sadollah,FightNight))", "all x y.((Sadollah(x) & Akiyama(y)) -> FightNight(x,y))", "all x y.((Sadollah(x) & Akiyama(y)) -> FightingAtFightNight(x,y))", "all x y.((Sadollah(x) & Akiyama(y)) -> foughtAtUFightNight(x,y))"]}
{"id": "folio_train_2483", "nl": "Musoke fought Yakovlev at UFC Fight Night.", "fol": "(UFCFightNightEvent(UFCFightNight) -> CompeteInFight(Musoke,Yakovlev))", "prediction": ["Musoke fought Yakovlev at UFCFightNight(Musoke)", "all x y z.((Musoke(x) & Yakovlev(y) & UFCFightNight(z)) -> Fell(x,y,z))", "all x y z.((Musoke(x) & Yakovlev(y) & UFCFightNight(z)) -> Fights(x,y,z))", "all x y z.((Musoke(x) & Yakovlev(y) & UFCFightNight(z)) -> Fighting(x,y,z))", "all x y z.((Musoke(x) & Yakovlev(y) & UFCFightNight(z)) -> Feats(x,y,z))", "all x y.((Musoke(x) & Yakovlev(y)) -> FightingAtUFightNight(x,y))", "all x y.((Musoke(x) & Yakovlev(y)) -> FightNight(x,y))", "(FightNight(Musoke) & Yakovlev(Musoke))", "all x y z.((Musoke(x) & Yakovlev(y) & UFCFightNight(z)) -> Feated(x,y,z))", "all x y z.((Musoke(x) & Yakovlev(y) & UFCFightNight(z)) -> FellAt(x,y,z))", "all x y.((Musoke(x) & Yakovlev(y)) -> FellAtUFightNight(x,y))", "all x y z.((Musoke(x) & Yakovlev(y) & UFCFightNight(z)) -> FightsAt(x,y,z))", "(FightNight(Musoke,Yakovlev) & UFC(Musoke,Yakovlev))", "all x y z.((Musoke(x) & Yakovlev(y) & UFCFightNight(z)) -> fought(x,y,z))", "all x y.((Musoke(x) & Yakovlev(y)) -> FeatsAtUFightNight(x,y))", "all x y.((Musoke(x) & Yakovlev(y)) -> FightsAtUFightNight(x,y))"]}
{"id": "folio_train_2484", "nl": "Jung was injured at UFC Fight Night.", "fol": "(UFCFightNightEvent(UFCFightNight) -> IsInjured(Jung))", "prediction": ["Jung was injured at UFCFightNight(Jung)", "Jung was injured at UFCFightNight(Jun)", "Jung was injured at UFC FightNight(Jung)", "Jung was injured at UFCFightNight.", "Jung was injured at UFCFightNight(Jung,UFC)", "Jung was injured at UFC FightNight(Jun)", "Jung was injured at UFCFightNight(Juan)", "Jung was injured at UFCFightNight(jung)", "Jung was injured at UFCFightNight(Jun,UFC)", "Jung was injured at UFCFightNight(July)", "Jung was injured at UFCFightNight(Jung,FightNight)", "Jung was injured at UFCFightNight(Jun,UFC,FightNight)", "Jung was injured at UFCFightNight(Jim)", "Jung was injured at UFCFightNight(Jung,UFC,FightNight)", "Jung was injured at UFCFightNightNight(Jung)", "Jung injured at UFCFightNight(Jung)"]}
{"id": "folio_train_2485", "nl": "Injured people did not fight at UFC Fight Night.", "fol": "all x.(IsInjured(x) -> -FightInUFC(x))", "prediction": ["all x y.((Injured(x) & UFCFightNight(y)) -> -FightsAt(x,y))", "all x y.((Injured(x) & UFCFightNight(y)) -> -Fight(x,y))", "all x y.((InjuredPerson(x) & UFCFightNight(y)) -> -FightsAt(x,y))", "all x.(InjuredPeople(x) -> -FightsAtUFFC(x))", "all x y.((InjuredPerson(x) & UFCFightNight(y)) -> -Fight(x,y))", "all x.(Injured(x) -> -FightsAtUFFC(x))", "all x.(InjuredPerson(x) -> -FightsAtUFFC(x))", "all x.((InjuredPerson(x) & -FightsAtUFFC(x)) -> -FightsAtUFFC(x))", "all x y.((Injured(x) & UFCFightNight(y)) -> -FightedAt(x,y))", "all x y.((Injured(x) & UFCFightNight(y) & -Fight(x,y)) -> -Fight(x,y))", "all x y.((Injured(x) & UFCFightNight(y)) -> -Fights(x,y))", "all x y.((Injured(x) & UFCFightNight(y)) -> -FightAt(x,y))", "all x y.((InjuredPerson(x) & UFCFightNight(y)) -> -FightedAt(x,y))", "all x y.((InjuredPerson(x) & UFCFightNight(y)) -> -FightAt(x,y))", "all x.(Injured(x) -> -FightsAtUFCFightNight(x))", "all x y.((Injured(x) & UFCFightNight(y)) -> -Fighted(x,y))"]}
{"id": "folio_train_2486", "nl": "Jung fought Sadollah.", "fol": "CompeteInFight(Jung,Sadollah)", "prediction": ["all x.(Jung(x) -> Sadollah(x))", "all x y.((Jung(x) & Sadollah(y)) -> Fights(x,y))", "all x.(Jung(x) -> foughtSadollah(x))", "all x y.((Jung(x) & Sadollah(y)) -> fought(x,y))", "All x.(Jung(x) -> Sadollah(x))", "all x y.((Jung(x) & Sadollah(y)) -> Fighting(x,y))", "all x.(Jung(x) -> BattledSadollah(x))", "all x y.((Jung(x) & Sadollah(y)) -> Wounded(x,y))", "all x.(Jung(x) -> FightingSadollah(x))", "All x y.((Jung(x) & Sadollah(y)) -> Fights(x,y))", "(FightedSadollah(Jung) & Sadollah(Jung))", "all x y.((Jung(x) & Sadollah(y)) -> Fell(x,y))", "all x y.((Jung(x) & Sadollah(y)) -> Battled(x,y))", "All x y.((Jung(x) & Sadollah(y)) -> fought(x,y))", "All x.(Jung(x) -> foughtSadollah(x))", "all x y.((Jung(x) & Sadollah(y)) -> Fight(x,y))"]}
{"id": "folio_train_2487", "nl": "Jung did not fight at UFC Fight Night.", "fol": "-FightInUFC(Jung)", "prediction": ["Jung did not fight at UFCFightNight(Jung)", "-(Jung(Jung) & UFCFightNight(Jung))", "-(JungFightNight(Jun) & UFCFightNight(Jun))", "-(JungFightNight(Jung) & -FightsAtUFFC(Jung))", "-(JungFightNight(Jung) & -FightsAt(JungFightNight(Jung))", "-(Jung(Jung) & UFCFightNight(Jun))", "Jung -FightsAtUFightNight(Jung)", "-(JungFightNight(Jung) & -Fight(Jung))", "-(JungFightNight(Jun) & -FightsAtUFFC(Jun))", "-(JungFightNight(Jun) & -Fight(Jun))", "Jung & UFCFightNight(Jun) -Fight(Jun))", "-(JungFightNight(Jung) & -FightAt(JungFightNight(Jung))", "-(Jung(Jung) & UFCFightNight(J))", "-(Jung(Jung) & UFCFightNight(Jang))", "Jung & UFCFightNight(Jun) -FightsAt(Jun,UFC,FightNight))", "-(JungFightNight(Jung) & -FightAtUFFC(Jung))"]}
{"id": "folio_train_2488", "nl": "Sadollah fought Musoke.", "fol": "CompeteInFight(Sadollah,Musoke)", "prediction": ["Sadollah fought Musoke.", "all x.(Sadollah(x) -> foughtMusoke(x))", "all x y.((Sadollah(x) & Musoke(y)) -> Fights(x,y))", "all x y.((Sadollah(x) & Musoke(y)) -> fought(x,y))", "all x.(Sadollah(x) -> FightingMusoke(x))", "all x y.((Sadollah(x) & Musoke(y)) -> Fighting(x,y))", "all x y.((Sadollah(x) & Musoke(y)) -> Fell(x,y))", "all x y.((Sadollah(x) & Musoke(y)) -> Fight(x,y))", "all x.((Sadollah(x) & Musoke(y)) -> Fights(x,y))", "All x.(Sadollah(x) -> foughtMusoke(x))", "all x.((Sadollah(x) & Musoke(x)) -> Fights(x,y))", "All x y.((Sadollah(x) & Musoke(y)) -> Fights(x,y))", "all x y.((Sadollah(x) & Musoke(y)) -> Wounded(x,y))", "all x.(Sadollah(x) -> FightsMusoke(x))", "all x y.((Sadollah(x) & Musoke(y)) -> Fighted(x,y))", "all x.((Sadollah(x) & Musoke(y)) -> fought(x,y))"]}
{"id": "folio_train_2489", "nl": "Nelson fought Story at UFC Fight Night.", "fol": "(UFCFightNightEvent(UFCFightNight) -> CompeteInFight(Nelson,Story))", "prediction": ["Nelson fought Story at UFCFightNight(Nelson)", "Nelson fought Story at UFCFightNight(Nelson,FightNight)", "Nelson foughtStoryAtUFightNight(Nelson)", "Nelson foughtStory(Nelson) & UFCFightNight(Nelson)", "Nelson foughtStoryAtUFightNight(Nelson,FightNight)", "Nelson foughtStory(n) & UFCFightNight(n))", "Nelson foughtStoryAtUFFCFightNight(Nelson)", "Nelson foughtStoryAtUFCFightNight(Nelson)", "Nelson fought Story at UFCFightNight(Nelson,UFC)", "Nelson foughtStoryAtUFFCFightNight(Nelson,FightNight)", "(FightNight(Nelson) & Story(Nelson))", "Nelson foughtStoryAtUFCFightNight(Nelson,FightNight)", "Nelson foughtStoryAtUFightNight(Nelson,UFC)", "Nelson foughtStoryAtFightNight(Nelson,UFC)", "Nelson fought Story at UFCFightNight(n)", "Nelson foughtStoryAtUFightNight(Nelson,UFC)"]}
{"id": "folio_train_2490", "nl": "All drinks are edible. ", "fol": "all x.(IsDrink(x) -> IsEdible(x))", "prediction": ["all x.(Drink(x) -> Edible(x))", "all x y.((Drink(x) & Drink(y)) -> Edible(x))", "all x.(Beverage(x) -> Edible(x))", "all x.(Drink(x) -> Edible(x))", "all x.((Drink(x) & Edible(x)) -> Drink(x))", "all x.((Drink(x) & Edible(x)) -> Drinkable(x))", "all x y.((Drink(x) & Food(y)) -> Edible(x))", "all x y.((Drink(x) & Drink(y)) -> Edible(x,y))", "exists x.(Drink(x) & Edible(x))", "all x.(Drink(x) -> Edible(x))", "all x.((Drink(x) & Edible(x)) -> Drinking(x))", "all x.((Drink(x) & Edible(x)) -> -Drink(x))", "all x.((Drink(x) & Edible(x)) -> -Edible(x))", "all x.((Drink(x) & Edible(x)) -> IsDrink(x))", "all x y.((Drink(x) & Drink(y)) -> Edible(y))", "(all x.(Drink(x) -> Edible(x)))"]}
{"id": "folio_train_2491", "nl": "All juices are drinks. ", "fol": "all x.(IsJuice(x) -> IsDrink(x))", "prediction": ["all x.(Juice(x) -> Drink(x))", "all x.(Juice(x) -> Drinkable(x))", "all x.(Juice(x) -> Drinks(x))", "all x y.((Juice(x) & Drink(y)) -> Drink(x,y))", "all x y.((Juice(x) & Drink(y)) -> Drink(x))", "all x.(Juice(x) -> Drinking(x))", "(all x.(Juice(x) -> Drink(x)))", "all x.(Juice(x) -> Drink(x))", "all x.((Juice(x) & Drink(x)) -> Drink(x))", "all x.(Juice(x) -> (Drink(x) | Drink(x)))", "all x.(Jewel(x) -> Drink(x))", "all x.(Juice(x) -> Drinked(x))", "all x y.((Juice(x) & Drink(y)) -> Drink(y))", "all x y.((Juice(x) & Drink(y)) -> Is(x,y))", "all x y.((Juice(x) & Drink(y)) -> Drinks(x))", "All x.(Juice(x) -> Drink(x))"]}
{"id": "folio_train_2492", "nl": "All orange juice is a juice. ", "fol": "all x.(IsOrangeJuice(x) -> IsJuice(x))", "prediction": ["all x.(OrangeJuice(x) -> Juice(x))", "all x.(OrangeJuice(x) -> Juice(x))", "all x y.((OrangeJuice(x) & Juice(y)) -> Juice(x))", "all x y.((OrangeJuice(x) & Fruit(y)) -> Juice(x))", "all x y.((OrangeJuice(x) & OrangeJuice(y)) -> Juice(x))", "all x.(OrangeJuice(x) -> IsJuice(x))", "all x y.((OrangeJuice(x) & Juice(y)) -> Juice(x,y))", "all x y.((OrangeJuice(x) & Juice(y)) -> Is(x,y))", "all x y.((OrangeJuice(x) & Fruit(y)) -> Juice(x,y))", "all x.((OrangeJuice(x) & Juice(x)) -> Juice(x))", "all x.(OrangeJuice(x) -> Fruit(x))", "all x y.((OrangeJuice(x) & OrangeJuice(y)) -> Juice(x,y))", "all x y.((OrangeJuice(x) & Fruit(y)) -> Is(x,y))", "(all x.(OrangeJuice(x) -> Juice(x))", "All x.(OrangeJuice(x) -> Juice(x))", "all x.(OrangeJuicy(x) -> Juice(x))"]}
{"id": "folio_train_2493", "nl": "A juice is either an orange juice or an apple juice.", "fol": "all x.(IsOrangeJuice(x) | IsAppleJuice(x))", "prediction": ["all x.(Juice(x) -> (OrangeJuice(x) | AppleJuice(x)))", "exists x.(Juice(x) & (OrangeJuice(x) | AppleJuice(x)))", "all x.(Juice(x) -> (OrangeJuice(x) | AppleJuice(x)))", "all x.(Juice(x) -> (Orange(x) | Apple(x)))", "all x.(Juice(x) -> ((OrangeJuice(x) | AppleJuice(x))))", "all x y.((Juice(x) & OrangeJuice(y)) | AppleJuice(y))", "all x y.(Juice(x) -> (OrangeJuice(x) | AppleJuice(x)))", "all x.(Juice(x) -> (OrangeSugar(x) | AppleSugar(x)))", "all x.(Juice(x) & (OrangeJuice(x) | AppleJuice(x)))", "all x.(Juice(x) -> (OrangeJewel(x) | AppleJewel(x)))", "all x.(Juice(x) -> (OrangeJuicy(x) | AppleJuicy(x)))", "exists x.(Juice(x) & (Orange(x) | Apple(x)))", "all x y.((Juice(x) & Orange(y)) | Apple(y))", "all x.(Juice(x) -> (OrangeJewel(x) | AppleJuice(x)))", "all x y.(Juice(x) -> (OrangeJuice(x) | AppleJuice(y)))", "all x.(Juice(x) -> (OrangeJuice(x) | AppleJuicy(x)))"]}
{"id": "folio_train_2494", "nl": "All apple juice is sweet.", "fol": "all x.(IsAppleJuice(x) -> IsSweet(x))", "prediction": ["all x.(AppleJuice(x) -> Sweet(x))", "all x y.((AppleJuice(x) & Sweet(y)) -> Sweet(x))", "all x.(AidJuice(x) -> Sweet(x))", "All x.(AppleJuice(x) -> Sweet(x))", "all x.(AppleJuice(x) -> Sweet(x))", "all x y.((AppleJuice(x) & Apple(y)) -> Sweet(x))", "all x y.((AppleJuice(x) & Sweet(y)) -> Sweet(x,y))", "all x.exists y.(AppleJuice(x) & Sweet(y))", "all x y.((AppleJuice(x) & Sweet(y)) -> Sweet(y))", "all x y.((AppleJuice(x) & Sweet(y)) -> Is(x,y))", "(all x.(AppleJuice(x) -> Sweet(x)))", "all x y.((AppleJuice(x) & Sweet(x)) -> Sweet(y))", "exists x.(AppleJuice(x) & Sweet(x))", "-all x.(AppleJuice(x) -> Sweet(x))", "all x.(AikenJuice(x) -> Sweet(x))", "all x.exists y.(AppleJuice(x) & Sweet(y) & Contains(x,y))"]}
{"id": "folio_train_2495", "nl": "If coke is apple juice, then coke is a drink.", "fol": "(IsAppleJuice(Coke) -> IsDrink(Coke))", "prediction": ["all x.((Coke(x) & AppleJuice(x)) -> Drink(x))", "all x.(AppleJuice(x) -> Drink(x))", "all x.(Coke(x) -> (AppleJuice(x) & Drink(x)))", "all x.(AidJuice(x) -> Drink(x))", "all x y.((Coke(x) & AppleJuice(y)) -> Drink(x))", "all x y.((Coke(x) & AppleJuice(y)) -> Drink(x,y))", "all x y.((Coke(x) & AppleJuice(x)) -> Drink(x))", "all x.((AppleJuice(x) & Coke(x)) -> Drink(x))", "all x y.((Coke(x) & AppleJuice(x)) -> Drink(y))", "all x.((Coke(x) & AppleJuice(x)) -> Drink(x))", "all x.((Coke(x) & AppleJuice(x) & Drink(x)) -> Coke(x))", "all x.(IsAppleJuice(x) -> Drink(x))", "all x.((Coke(x) & AppleJuice(x)) -> Drink(x,Coke))", "all x.((Coke(x) & AppleJewel(x)) -> Drink(x))", "all x y.((Coke(x) & AppleJuice(x)) -> Drink(x,y))", "all x.((Coke(x) & AppleJuice(x)) -> Drink(x,coke))"]}
{"id": "folio_train_2496", "nl": "If coke is not apple juice, then coke is not edible.", "fol": "(-IsAppleJuice(Coke) -> -IsEdible(Coke))", "prediction": ["all x.((Coke(x) & -AppleJuice(x)) -> -Edible(x))", "all x.((Coke(x) & -AppleJuice(x)) -> -EdibleCoke(x))", "all x.((Coke(x) & -AidleJuice(x)) -> -Edible(x))", "all x y.((Coke(x) & AppleJuice(y) & -AppleJuice(x)) -> -Edible(x))", "all x.((Coke(x) & -AppleJuice(x)) -> NotEdible(x))", "all x y.((Coke(x) & -AppleJuice(x)) -> -Edible(x))", "all x.((Coke(x) & NotAppleJuice(x)) -> -Edible(x))", "all x.((Coke(x) & -AppleJewel(x)) -> -Edible(x))", "all x y.((Coke(x) & -AppleJuice(x)) -> -Edible(y))", "all x.(Coke(x) -> (-AppleJuice(x) & -Edible(x)))", "(all x.((Coke(x) & -AppleJuice(x)) -> -Edible(x)))", "all x y.((Coke(x) & AppleJuice(y) & -AppleJuice(x)) -> -Edible(x,y))", "exists x.((Coke(x) & -AppleJuice(x)) -> -Edible(x))", "all x.((Coke(x) & -AppleJuice(x)) -> NoEdible(x))", "all x y.((Coke(x) & AppleJuice(y)) -> -Edible(x))", "(-AppleJuice(coke) -> -Edible(coke))"]}
{"id": "folio_train_2497", "nl": "Coke is orange juice.", "fol": "IsOrangeJuice(Coke)", "prediction": ["all x.(Coke(x) -> OrangeJuice(x))", "All x.(Coke(x) -> OrangeJuice(x))", "all x.(Coke(x) -> OrangeJuice(x))", "all x y.((Coke(x) & OrangeJuice(y)) -> Is(x,y))", "exists x.(Coke(x) & OrangeJuice(x))", "all x y.((Coke(x) & OrangeJuice(y)) -> (Is(x,y) & Is(x,y)))", "all x y.((Coke(x) & OrangeJuice(y)) -> Produces(x,y))", "all x y.((Coke(x) & OrangeJuice(y)) -> Has(x,y))", "all x y.((Coke(x) & OrangeJuice(y)) -> Contains(x,y))", "all x y.((Coke(x) & OrangeJuice(y)) -> Drinks(x,y))", "all x y.((Coke(x) & OrangeJuice(y)) -> Requires(x,y))", "all x.(Coke(x) -> (OrangeJuice(x) | OrangeJuice(x)))", "all x y.((Coke(x) & OrangeJuice(y)) -> Coke(x))", "all x y.((Coke(x) & OrangeJuice(y)) -> OrangeJuice(x))", "all x.(Coke(x) -> (OrangeJuice(x) & Contains(x,y)))", "all x y.((Coke(x) & OrangeJuice(y)) -> (Is(x,y) & Is(x,z))))"]}
{"id": "folio_train_2498", "nl": "Coke is edible and sweet.", "fol": "(IsEdible(Coke) & IsSweet(Coke))", "prediction": ["all x.(Coke(x) -> (Edible(x) & Sweet(x)))", "exists x.(Coke(x) & Edible(x) & Sweet(x))", "all x.(Coke(x) -> (Edible(x) & Sweet(x)))", "All x.(Coke(x) -> (Edible(x) & Sweet(x)))", "all x y.((Coke(x) & Edible(y) & Sweet(y)) -> Coke(x))", "all x.(Coke(x) -> Edible(x) & Sweet(x))", "(Edible(coke) & Sweet(coke))", "all x y.((Coke(x) & Edible(y) & Sweet(y)) -> Edible(x))", "all x y.((Coke(x) & Edible(y) & Sweet(y)) -> Cocaine(x))", "(Edible(Coke) & Sweet(Coke))", "all x y.((Coke(x) & Edible(y) & Sweet(x)) -> Coke(x))", "all x y.((Coke(x) & Edible(y) & Sweet(y)) -> Coke(x))", "all x y.((Coke(x) & Edible(y) & Sweet(y)) -> Edible(x))", "all x y.((Coke(x) & Edible(y) & Sweet(y)) -> Edible(x,y))", "all x y.((Coke(x) & Edible(y) & Sweet(y)) -> Is(x,y))", "all x y.((Coke(x) & Edible(y) & Sweet(y)) -> Coke(x,y))"]}
{"id": "folio_train_2499", "nl": "Coke is not edible and sweet.", "fol": "(-IsEdible(Coke) & -IsSweet(Coke))", "prediction": ["all x.(Coke(x) -> (-Edible(x) & Sweet(x)))", "all x.(Coke(x) -> (-Edible(x) & -Sweet(x)))", "all x.(Coke(x) -> -Edible(x) & Sweet(x))", "exists x.(Coke(x) & -Edible(x) & Sweet(x))", "all x.(Coke(x) -> -(Edible(x) & Sweet(x)))", "exists x.(Coke(x) & -Edible(x) & -Sweet(x))", "all x.(Coke(x) -> -Edible(x) & -Sweet(x))", "(-Edible(coke) & -Sweet(coke))", "exists x.(Coke(x) & -(Edible(x) & Sweet(x)))", "(all x.(Coke(x) -> -Edible(x) & Sweet(x)))", "(-Edible(Coke) & -Sweet(Coke))", "All x.(Coke(x) -> (-Edible(x) & -Sweet(x)))", "-(Edible(coke) & Sweet(coke))", "all x.(Coke(x) -> -EdibleAndSweet(x))", "All x.(Coke(x) -> (-Edible(x) & Sweet(x)))", "(all x.(Coke(x) -> -Edible(x) & -Sweet(x)))"]}
{"id": "folio_train_2500", "nl": "Federico Garcia Lorca was a talented Spanish poet and he supported the Popular Front.", "fol": "(IsTalentedPoet(Lorca) & SupportsPopularFront(Lorca))", "prediction": ["all x.((FedericoGarciaLorca(x) & TalentedSpanishPoet(x) & SupportedPopularFront(x)) -> Talented(x))", "all x.(FedericoGarciaLorca(x) -> (TalentedSpanishPoet(x) & SupportedPopularFront(x)))", "all x y.((FedericoGarciaLorca(x) & TalentedSpanishPoet(x) & PopularFront(y)) -> Supported(x,y))", "all x.((FedericoGarciaLorca(x) & TalentedSpanishPoet(x) & SupportedPopularFront(x)) -> TalentedAndSupported(x))", "all x.((FedericoGarciaLorca(x) & TalentedSpanishPoet(x) & PopularFront(x)) -> Supported(x))", "all x.((FedericoGarciaLorca(x) & TalentedSpanishPoet(x) & SupportedPopularFront(x)) -> TalentedPoet(x))", "all x.((FedericoGarciaLorca(x) & TalentedSpanishPoet(x)) -> SupportedPopularFront(x))", "all x.((FedericoGarciaLorca(x) & TalentedSpanishPoet(x) & SupportedPopularFront(x)) -> TalentedSpanishPoet(x))", "all x.((FedericoGarciaLorca(x) & TalentedSpanishPoet(x) & SupportedPopularFront(x)) -> TalentedAndSupportedFront(x))", "all x.((FedericoGarciaLorca(x) & TalentedSpanishPoet(x) & SupportedPopularFront(x)) -> TalentedAndSupportsFront(x))", "all x.((FedericoGarciaLorca(x) & TalentedSpanishPoet(x) & SupportedPopularFront(x)) -> TalentedSpanishPoet(x))", "all x.((FedericoGarciaLorca(x) & TalentedSpanishPoet(x) & SupportedPopularFront(x)) -> Talented(x))", "all x y.((FedericoGarciaLorca(x) & TalentedSpanishPoet(x) & PopularFront(y)) -> Supports(x,y))", "all x.((FernitoGarciaLorca(x) & TalentedSpanishPoet(x) & SupportedPopularFront(x)) -> Talented(x))", "all x.((FedericoGarciaLorca(x) & TalentedSpanishPoet(x) & SupportsPopularFront(x)) -> Talented(x))", "all x.(FedericoGarciaLorca(x) -> (TalentedSpanishPoet(x) & SupportedPopularFront(x)))"]}
{"id": "folio_train_2501", "nl": "The Spanish Nationalists opposed anyone who supported the Popular Front", "fol": "all x.(SupportsPopularFront(x) -> Opposes(Nationalists,x))", "prediction": ["all x y.((SpanishNationalist(x) & SupportsPopularFront(y)) -> Opposed(x,y))", "all x y.((SpanishNationalists(x) & SupportsPopularFront(y)) -> Opposed(x,y))", "all x y.((SpanishNationalist(x) & SupportedPopularFront(y)) -> Opposed(x,y))", "all x y.((SpanishNationalists(x) & SupportedPopularFront(y)) -> Opposed(x,y))", "all x y z.((SpanishNationalist(x) & SupportedPopularFront(y) & PopularFront(z)) -> Opposed(x,y,z))", "all x y z.((SpanishNationalist(x) & SupportsPopularFront(y) & SupportsPopularFront(z)) -> Opposed(x,y,z))", "all x y z.((SpanishNationalist(x) & SupportedPopularFront(y) & SupportedPopularFront(z)) -> Opposed(x,y,z))", "all x y z.((SpanishNationalist(x) & SupportedPopularFront(y) & PopularFront(z)) -> Opposed(x,y))", "all x y z.((SpanishNationalist(x) & SupportsPopularFront(y) & SupportsPopularFront(z)) -> Opposed(x,y))", "all x.((SpanishNationalists(x) & SupportedPopularFront(x)) -> Opposed(x))", "all x y z.((SpanishNationalist(x) & SupportsPopularFront(y) & PopularFront(z)) -> Opposed(x,y,z))", "all x y z.((SpanishNationalist(x) & SupportedPopularFront(y) & SupportedPopularFront(z)) -> Opposed(x,y))", "all x y.((SpanishNationalist(x) & SupportsPopularFront(x,y)) -> Opposed(x,y))", "all x y z.((SpanishNationalist(x) & SupportsPopularFront(y) & PopularFront(z)) -> Opposed(x,y))", "all x y z.((SpanishNationalist(x) & Supporter(y) & PopularFront(z)) -> Opposed(x,y,z))", "all x y.((SpanishNationalists(x) & SupportsPopularFront(x,y)) -> Opposed(x,y))"]}
{"id": "folio_train_2502", "nl": "Talented poets are popular.", "fol": "all x.(IsTalentedPoet(x) -> IsPopular(x))", "prediction": ["all x.(TalentedPoet(x) -> Popular(x))", "all x.(TalentedPoet(x) -> Popular(x))", "all x.((Poet(x) & Talented(x)) -> Popular(x))", "all x y.((Poet(x) & Talented(x)) -> Popular(y))", "all x y.((TalentedPoet(x) & Poet(y)) -> Popular(x))", "all x y.((Poet(x) & Talented(y)) -> Popular(x))", "all x.((TalentedPoet(x) & Popular(x)) -> Talented(x))", "all x.(Poet(x) & Talented(x)) -> Popular(x))", "all x y.((Poet(x) & Talented(x)) -> Popular(x))", "all x y.((Poet(x) & Talented(x) & Poet(y)) -> Popular(x))", "all x.((TalentedPoet(x) & Popular(x)) -> Talented(x))", "all x.(Poet(x) -> Talented(x))", "all x y.((Poet(x) & Talented(y)) -> Popular(y))", "all x y.((TalentedPoet(x) & Poet(y)) -> Popular(x,y))", "all x.(Talented(x) -> Popular(x))", "all x.(TalentedPoet(x) -> Popular(x))"]}
{"id": "folio_train_2503", "nl": "Spanish Nationalists killed anyone who they opposed and were popular.", "fol": "all x.((Opposes(Nationalists,x) & IsPopular(x)) -> CommitsMurder(Nationalists,x))", "prediction": ["all x y.((SpanishNationalist(x) & Opponent(y) & Popular(y)) -> Kills(x,y))", "all x.((SpanishNationalist(x) & Opposed(x) & Popular(x)) -> Killed(x))", "all x.((SpanishNationalist(x) & Opposed(x) & Popular(x)) -> Killed(x))", "all x y.((SpanishNationalist(x) & Opponent(y) & Popular(y)) -> Killed(x,y))", "all x y.((SpanishNationalist(x) & Opponent(y) & Popular(y)) -> Killed(x,y))", "all x.((SpanishNationalist(x) & Opposed(x) & Popular(x)) -> Killed(x,y))", "all x y.((SpanishNationalist(x) & Opponent(y) & Popular(y)) -> Kills(x,y))", "all x y z.((SpanishNationalist(x) & Opponent(y) & Popular(z)) -> Kills(x,y,z))", "all x.((SpanishNationalist(x) & Opposed(x) & Popular(x)) -> Kills(x))", "all x y z.((SpanishNationalist(x) & Opponent(y) & Popular(z)) -> Kills(x,y))", "all x y.((SpanishNationalist(x) & Opponent(y,x) & Popular(y)) -> Kills(x,y))", "all x.((SpanishNationalist(x) & Opposed(x) & Popular(x)) -> Kills(x,y))", "all x.((SpanishNationalist(x) & Opposes(x) & Popular(x)) -> Kills(x))", "all x y z.((SpanishNationalist(x) & Opponent(y) & Popular(z)) -> Killed(x,y,z))", "all x y z.((SpanishNationalist(x) & Opponent(y) & Popular(z)) -> Killed(x,y,z))", "all x y z.((SpanishNationalist(x) & Opponent(y) & Popular(z)) -> Killed(x,y))"]}
{"id": "folio_train_2504", "nl": "Daniel supported the Popular Front but was not popular.", "fol": "(SupportsPopularFront(Daniel) & -IsPopular(Daniel))", "prediction": ["(SupportsPopularFront(Daniel) & -Popular(Daniel))", "all x y.((Daniel(x) & PopularFront(y)) -> (Supported(x,y) & -Popular(x)))", "all x.((Daniel(x) & PopularFront(x)) -> (Supported(x) & -Popular(x)))", "(SupportedPopularFront(Daniel) & -Popular(Daniel))", "all x.((Daniel(x) & PopularFront(x)) -> -Popular(x))", "all x y.((Daniel(x) & PopularFront(y)) -> (Supports(x,y) & -Popular(x)))", "all x.((Daniel(x) & PopularFront(x)) -> (Supports(x,popular) & -Popular(x)))", "all x y.((Daniel(x) & PopularFront(y)) -> (Supported(x,y) & -Popular(y)))", "((Daniel(Daniel) & PopularFront(Daniel)) | -Popular(Daniel)))", "(SupportsPopularFront(Daniel) & -PopularFront(Daniel))", "all x y.((Daniel(x) & PopularFront(y)) -> (Supports(x,y) & -Popular(y)))", "all x.((Daniel(x) & PopularFront(x)) -> (Supported(x,y) & -Popular(y)))", "all x.((Daniel(x) & PopularFront(x)) -> (Supports(x) & -Popular(x)))", "(SupportsPopularFront(Dan) & -Popular(Dan))", "All x.((Daniel(x) & PopularFront(x)) -> (Supported(x) & -Popular(x)))", "All x.((Daniel(x) & PopularFront(x)) -> (Supports(x,popular) & -Popular(x)))"]}
{"id": "folio_train_2505", "nl": "Daniel was not killed by the Spanish Nationalists.", "fol": "-CommitsMurder(Nationalists,Daniel)", "prediction": ["all x.((Daniel(x) & -KilledBySpanishNationalists(x)) -> -KilledBySpanishNationalists(x))", "all x.((Daniel(x) & -KilledBySpanishNationalists(x)) -> -KilledBySpanishNationalists(x))", "(-KilledBySpanishNationalists(Daniel))", "all x.((Daniel(x) & -KilledBySpanishNationalists(x)) -> -(KilledBySpanishNationalists(x) & -(KilledBySpanishNationalists(x) & -(KilledBySpanishNationalists(x) & -(KilledBySpanishNationalists(x) & -(KilledBySpanishNationalists(x))))))", "all x.((Daniel(x) & -KilledBySpanishNationalists(x)) -> -(KilledBySpanishNationalists(x) & -(KilledBySpanishNationalists(x) & -(KilledBySpanishNationalists(x) & -(KilledBySpanishNationalists(x) & -(KilledBySpanishNationalists(x)))))", "all x.((Daniel(x) & -KilledBySpanishNationalists(x)) -> -(KilledBySpanishNationalists(x) & -(KilledBySpanishNationalists(x) & -(KilledBySpanishNationalists(x) & -(KilledBySpanishNationalists(x)))))", "all x.((Daniel(x) & -KilledBySpanishNationalists(x)) -> -(KilledBySpanishNationalists(x) & -(KilledBySpanishNationalists(x) & -(KilledBySpanishNationalists(x) & -(KilledBySpanishNationalists(x))))))", "all x.((Daniel(x) & -KilledBySpanishNationalists(x)) -> -(KilledBySpanishNationalists(x) & -(KilledBySpanishNationalists(x) & -(KilledBySpanishNationalists(x)) & -(KilledBySpanishNationalists(x) & -(KilledBySpanishNationalists(x)))))", "all x.((Daniel(x) & -KilledBySpanishNationalists(x)) -> -(KilledBySpanishNationalists(x) & -(KilledBySpanishNationalists(x) & -(KilledBySpanishNationalists(x) & -(KilledBySpanishNationalists(x)) & -(KilledBySpanishNationalists(x)))))", "all x.((Daniel(x) & -KilledBySpanishNationalists(x)) -> -(KilledBySpanishNationalists(x) & -KilledBySpanishNationalists(x)))", "all x.((Daniel(x) & -KilledBySpanishNationalists(x)) -> -(KilledBySpanishNationalists(x) & -(KilledBySpanishNationalists(x) & -(KilledBySpanishNationalists(x) & -(KilledBySpanishNationalists(x) | KilledBySpanishNationalists(x)))))", "all x.((Daniel(x) & -KilledBySpanishNationalists(x)) -> -(KilledBySpanishNationalists(x) & -(KilledBySpanishNationalists(x) & -(KilledBySpanishNationalists(x) | KilledBySpanishNationalists(x)))))", "all x.((Daniel(x) & -KilledBySpanishNationalists(x)) -> -(KilledBySpanishNationalists(x) & -(KilledBySpanishNationalists(x) & -(KilledBySpanishNationalists(x) & -(KilledBySpanishNationalists(x) & -KilledBySpanishNationalists(x)))))", "all x.((Daniel(x) & -KilledBySpanishNationalists(x)) -> -(KilledBySpanishNationalists(x) & -(KilledBySpanishNationalists(x) & -(KilledBySpanishNationalists(x) & -KilledBySpanishNationalists(x)))))", "all x.((Daniel(x) & -SpanishNationalists(x)) -> -KilledBy(x,Daniel))", "all x.((Daniel(x) & -KilledBySpanishNationalists(x)) -> -(KilledBySpanishNationalists(x) & -(KilledBySpanishNationalists(x) & -(KilledBySpanishNationalists(x) & -(KilledBySpanishNationalists(x))) & -(KilledBySpanishNationalists(x)))))"]}
{"id": "folio_train_2506", "nl": "Lorca was killed by the Spanish Nationalists.", "fol": "CommitsMurder(Nationalists,Lorca)", "prediction": ["all x y.((Lorca(x) & SpanishNationalists(y)) -> KilledBy(x,y))", "all x y.((Lorca(x) & Nationalist(y)) -> KilledBy(x,y))", "all x.(Lorca(x) -> KilledBySpanishNationalists(x))", "all x y z.((Lorca(x) & Nationalist(y) & Nationalist(z)) -> KilledBy(x,y,z))", "all x y z.((Lorca(x) & Nationalist(y) & Spanish(z)) -> KilledBy(x,y,z))", "all x y.((Lorca(x) & SpanishNationalists(y)) -> KilledBy(x,y))", "all x y.((Lorca(x) & SpanishNationalist(y)) -> KilledBy(x,y))", "all x y.((Lorca(x) & SpanishNationalists(y)) -> Killed(x,y))", "all x y.((Lorca(x) & Nationalist(y)) -> KilledBy(x,y))", "all x y z.((Lorca(x) & Nationalist(y) & Spanish(z)) -> KilledBy(x,y,z))", "all x y.((Lorca(x) & Nationalists(y)) -> KilledBy(x,y))", "all x y z.((Lorca(x) & Nationalist(y) & Nationalist(z)) -> KilledBy(x,y,z))", "all x.((Lorca(x) & SpanishNationalists(x)) -> Killed(x))", "all x.((Lorca(x) & SpanishNationalists(x)) -> KilledBy(x,Lorca))", "all x y.((Lorca(x) & SpanishNationalist(y)) -> KilledBy(x,y))", "all x y.((Lorca(x) & SpanishNationalists(y)) -> Killed(x,y))"]}
{"id": "folio_train_2507", "nl": "People either drink kombucha every day or drink Coca-Cola or Pepsi products every day.", "fol": "all x.(DrinkKombuchaEveryDay(x) | DrinkCocaColaOrPepsiEveryDay(x))", "prediction": ["all x.((Person(x) & (DrinksKombucha(x) | DrinksCokeCola(x) | DrinksPepsi(x))) -> DrinksKombuchaEveryDay(x))", "all x.(Person(x) -> (DrinksKombuchaEveryDay(x) | DrinksCokeColaOrPepsiEveryDay(x)))", "all x.((Person(x) & (DrinksKombucha(x) | DrinksCokeCola(x) | DrinksPepsi(x))) -> DrinksKombucha(x))", "all x.(Person(x) -> (DrinksKombucha(x) | DrinksCokeCola(x) | DrinksPepsi(x)))", "all x.((Person(x) & (DrinksKombuchaEveryDay(x) | DrinksCokeCola(x) | DrinksPepsiProductsEveryDay(x))) -> DrinksKombuchaEveryDay(x))", "all x.((Person(x) & (DrinksKombucha(x) | DrinksCokeCola(x) | DrinksPepsi(x))) -> EveryDay(x))", "all x y.((Person(x) & (DrinksKombucha(x) | DrinksCokeCola(x) | DrinksPepsi(x))) -> DrinksKombuchaEveryDay(x))", "all x.((Person(x) & DrinksKombuchaEveryDay(x)) | (DrinksCokeCola(x) | DrinksPepsiProductsEveryDay(x))))", "all x.((Person(x) & (DrinksKombuchaEveryDay(x) | DrinksCokeCola(x) | DrinksPepsi(x))) -> DrinksKombuchaEveryDay(x))", "all x.((Person(x) & (DrinksKombucha(x) | DrinksCokeCola(x) | DrinksPepsi(x))) -> DrinksCombucha(x))", "all x.((Person(x) & (DrinksKombuchaEveryDay(x) | DrinksCokeCola(x) | DrinksPepsiProductsEveryDay(x))) -> DrinksKombucha(x))", "all x.((Person(x) & (DrinksKombuchaEveryDay(x) | DrinksCokeColaOrPepsiEveryDay(x))) -> DrinksKombuchaOrPepsiEveryDay(x))", "all x.((Person(x) & (DrinksKombucha(x) | DrinksCokeCola(x) | DrinksPepsi(x))) -> Daily(x))", "all x.((Person(x) & (DrinksKombucha(x) | DrinksCokeCola(x) | DrinksPepsi(x))) -> DrinksCombuchaEveryDay(x))", "all x y.((Person(x) & (DrinksKombucha(x) | DrinksCokeCola(x) | DrinksPepsi(x))) -> DrinksKombucha(x))", "all x.(Person(x) -> (DrinksKombuchaEveryDay(x) | DrinksCokeColaOrPepsiProductsEveryDay(x)))"]}
{"id": "folio_train_2508", "nl": "If people drink Coca-Cola or Pepsi products every day, then they grew up with extremely busy parents who did not have time to pack them lunch.", "fol": "all x.(DrinkCocaColaOrPepsiEveryDay(x) -> GrewUpWithBusyParents(x))", "prediction": ["all x.((Person(x) & DrinksCokeColaOrPepsiProductsEveryDay(x)) -> (ExtremelyBusyParents(x) & -HasTimeToPackLunch(x)))", "all x.((People(x) & DrinksCokeColaOrPepsiProductsEveryDay(x)) -> (ExtremelyBusyParents(x) & -HasTimeToPackLunch(x)))", "all x.((Person(x) & DrinksCokeColaOrPepsiEveryDay(x)) -> (ExtremelyBusyParents(x) & -HasTimeToPackLunch(x)))", "all x.((Person(x) & DrinksCocaColaOrPepsiProductsEveryDay(x)) -> (ExtremelyBusyParents(x) & -HasTimeToPackLunch(x)))", "all x.((Person(x) & (DrinksCokeCola(x) | DrinksPepsi(x))) -> GrownUpWithExtremelyBusyParents(x))", "all x.((Person(x) & DrinksCokeColaOrPepsiProductsEveryDay(x)) -> GrownUpWithExtremelyBusyParents(x))", "all x.((Person(x) & (DrinksCokeCola(x) | DrinksPepsi(x))) -> (GrowsUpWithExtremelyBusyParents(x) & -HasTimeToPackLunch(x)))", "all x.((People(x) & (DrinksCokeCola(x) | DrinksPepsi(x))) -> GrownUpWithExtremelyBusyParents(x))", "all x y.((Person(x) & DrinksCokeColaOrPepsiProductsEveryDay(x)) -> (ExtremelyBusyParents(y) & -HasTimeToPackLunch(y)))", "all x y.((Person(x) & DrinksCokeColaOrPepsiProductsEveryDay(x)) -> (ExtremelyBusyParents(x) & -HasTimeToPackLunch(x)))", "all x.((People(x) & DrinksCokeColaOrPepsiProductsEveryDay(x)) -> GrownUpWithExtremelyBusyParents(x))", "all x.((Person(x) & (DrinksCokeCola(x) | DrinksPepsi(x))) -> GrowsUpWithExtremelyBusyParents(x))", "all x.((Person(x) & (DrinksCocaCola(x) | DrinksPepsi(x))) -> GrownUpWithExtremelyBusyParents(x))", "all x.((People(x) & (DrinksCokeCola(x) | DrinksPepsi(x))) -> GrowsUpWithExtremelyBusyParents(x))", "all x.((Person(x) & DrinksCokeColaOrPepsiProductsEveryDay(x)) -> (ExtremelyBusyParents(x) & -TimeToPackLunch(x)))", "all x.((Person(x) & DrinksCokeColaOrPepsiProductsEveryDay(x)) -> (ExtremelyBusyParents(x) & -HadTimeToPackLunch(x)))"]}
{"id": "folio_train_2509", "nl": "If people drink Coca-Cola or Pepsi products every day, then they have to visit the dentist frequently.", "fol": "all x.(DrinkCocaColaOrPepsiEveryDay(x) -> VisitDentistFrequently(x))", "prediction": ["all x.((Person(x) & DrinksCokeColaOrPepsiProductsEveryDay(x)) -> VisitsDentistFrequently(x))", "all x.((DrinksCokeCola(x) | DrinksPepsi(x)) -> VisitsDentistFrequently(x))", "all x.((Person(x) & (DrinksCokeCola(x) | DrinksPepsi(x))) -> VisitsDentistFrequently(x))", "all x.((People(x) & (DrinksCokeCola(x) | DrinksPepsi(x))) -> VisitsDentistFrequently(x))", "all x.((People(x) & DrinksCokeColaOrPepsiProductsEveryDay(x)) -> VisitsDentistFrequently(x))", "all x.((Person(x) & (DrinksCokeCola(x) | DrinksPepsi(x))) -> VisitsDentistFrequently(x))", "all x.((Person(x) & DrinksCokeColaOrPepsiProductsEveryDay(x)) -> VisitsDentistFrequently(x))", "all x.((People(x) & (DrinksCokeCola(x) | DrinksPepsi(x))) -> VisitsDentistFrequently(x))", "all x.((Person(x) & DrinksCokeColaOrPepsiEveryDay(x)) -> VisitsDentistFrequently(x))", "all x.((DrinksCokeCola(x) | DrinksPepsi(x)) -> VisitsDentistFrequently(x))", "all x.((DrinksCocaCola(x) | DrinksPepsi(x)) -> VisitsDentistFrequently(x))", "all x.((DrinksCokeColaOrPepsiProductsEveryDay(x)) -> VisitsDentistFrequently(x))", "all x.((People(x) & DrinksCokeColaOrPepsiProductsEveryDay(x)) -> VisitsDentistFrequently(x))", "all x.((Person(x) & (DrinksCokeCola(x) | DrinksPepsi(x))) -> VisitsDentist(x))", "all x.((People(x) & DrinksCokeColaOrPepsiEveryDay(x)) -> VisitsDentistFrequently(x))", "all x.((Person(x) & DrinksCokeColaOrPepsiEveryDay(x)) -> VisitsDentistFrequently(x))"]}
{"id": "folio_train_2510", "nl": "If people grew up with extremely busy parents who did not have time to pack them lunch, then they have erratic and diverse eating habits.", "fol": "all x.(GrewUpWithBusyParents(x) -> HaveErraticEatingHabits(x))", "prediction": ["all x.((Person(x) & GrownUpWithExtremelyBusyParents(x) & -HasTimeToPackLunch(x)) -> (ErraticEatingHabits(x) & DiverseEatingHabits(x)))", "all x.((Person(x) & GrownUpWithExtremelyBusyParents(x) & -HasTimeToPackLunch(x)) -> (EraticEatingHabits(x) & DiverseEatingHabits(x)))", "all x.((Person(x) & GrownUpWithExtremelyBusyParents(x) & -HasTimeToPackLunch(x)) -> EraticAndDiverseEatingHabits(x))", "all x.((People(x) & GrownUpWithExtremelyBusyParents(x) & -HasTimeToPackLunch(x)) -> (ErraticEatingHabits(x) & DiverseEatingHabits(x)))", "all x.((People(x) & GrownUpWithExtremelyBusyParents(x) & -HasTimeToPackLunch(x)) -> (EraticEatingHabits(x) & DiverseEatingHabits(x)))", "all x.((People(x) & GrownUpWithExtremelyBusyParents(x) & -HasTimeToPackLunch(x)) -> EraticAndDiverseEatingHabits(x))", "all x.((Person(x) & GrownUpWithExtremelyBusyParents(x) & -HasTimeToPackLunch(x)) -> ErraticAndDiverseEatingHabits(x))", "all x.((Person(x) & grewUpWithExtremelyBusyParents(x) & -HasTimeToPackLunch(x)) -> (ErraticEatingHabits(x) & DiverseEatingHabits(x)))", "all x.((Person(x) & grewUpWithExtremelyBusyParents(x) & -HasTimeToPackLunch(x)) -> (EraticEatingHabits(x) & DiverseEatingHabits(x)))", "all x.((Person(x) & grewUpWithExtremelyBusyParents(x) & -HasTimeToPackLunch(x)) -> EraticAndDiverseEatingHabits(x))", "all x.((People(x) & GrownUpWithExtremelyBusyParents(x) & -HasTimeToPackLunch(x)) -> ErraticAndDiverseEatingHabits(x))", "all x.((Person(x) & GrowingUpWithExtremelyBusyParents(x) & -HasTimeToPackLunch(x)) -> EraticAndDiverseEatingHabits(x))", "all x.((People(x) & grewUpWithExtremelyBusyParents(x) & -HasTimeToPackLunch(x)) -> EraticAndDiverseEatingHabits(x))", "all x.((Person(x) & GrownUpWithExtremelyBusyParents(x) & -HasTimeToPackLunch(x)) -> EratricAndDiverseEatingHabits(x))", "all x.((Person(x) & grewUpWithExtremelyBusyParents(x) & -HasTimeToPackLunch(x)) -> ErraticAndDiverseEatingHabits(x))", "all x y.((Person(x) & GrownUpWithExtremelyBusyParents(x) & -HasTimeToPackLunch(x)) -> (EraticEatingHabits(x) & DiverseEatingHabits(x)))"]}
{"id": "folio_train_2511", "nl": "If people have erratic and diverse eating habits, then they do not have consistent everyday routines and like sticking to a solid schedule.", "fol": "all x.(HaveErraticEatingHabits(x) -> -HaveConsistentRoutines(x))", "prediction": ["all x.((People(x) & EratricEatingHabits(x) & DiverseEatingHabits(x)) -> (-ConsistentEverydayRoutines(x) & StickToSolidSchedule(x)))", "all x.((Person(x) & EratricEatingHabits(x) & DiverseEatingHabits(x)) -> (-ConsistentEverydayRoutines(x) & StickToSolidSchedule(x)))", "all x.((People(x) & ErraticEatingHabits(x) & DiverseEatingHabits(x)) -> (-ConsistentEverydayRoutines(x) & StickToSolidSchedule(x)))", "all x.((Personal(x) & EratricEatingHabits(x) & DiverseEatingHabits(x)) -> (-ConsistentEverydayRoutines(x) & StickToSolidSchedule(x)))", "all x.((Person(x) & ErraticEatingHabits(x) & DiverseEatingHabits(x)) -> (-ConsistentEverydayRoutines(x) & StickToSolidSchedule(x)))", "all x.((Personal(x) & ErraticEatingHabits(x) & DiverseEatingHabits(x)) -> (-ConsistentEverydayRoutines(x) & StickToSolidSchedule(x)))", "all x.((People(x) & EratricEatingHabits(x) & DiverseEatingHabits(x)) -> (-ConsistentEverydayRoutines(x) & LikeStickingToSolidSchedule(x)))", "all x.((People(x) & EraticEatingHabits(x) & DiverseEatingHabits(x)) -> (-ConsistentEverydayRoutines(x) & StickToSolidSchedule(x)))", "all x.((People(x) & ErraticEatingHabits(x) & DiverseEatingHabits(x)) -> (-ConsistentEverydayRoutines(x) & LikeStickingToSolidSchedule(x)))", "all x.((Person(x) & EratricEatingHabits(x) & DiverseEatingHabits(x)) -> (-ConsistentEverydayRoutines(x) & LikeStickingToSolidSchedule(x)))", "all x.((People(x) & EratricEatingHabits(x) & DiverseEatingHabits(x)) -> (-ConsistentEverydayRoutines(x) & SticksToSolidSchedule(x)))", "all x.((People(x) & EratricAndDiverseEatingHabits(x)) -> (-ConsistentEverydayRoutines(x) & StickToSolidSchedule(x)))", "all x.((Personal(x) & EratricEatingHabits(x) & DiverseEatingHabits(x)) -> (-ConsistentEverydayRoutines(x) & LikeStickingToSolidSchedule(x)))", "all x.((Person(x) & ErraticEatingHabits(x) & DiverseEatingHabits(x)) -> (-ConsistentEverydayRoutines(x) & LikeStickingToSolidSchedule(x)))", "all x.((Personal(x) & ErraticEatingHabits(x) & DiverseEatingHabits(x)) -> (-ConsistentEverydayRoutines(x) & LikeStickingToSolidSchedule(x)))", "all x.((Personal(x) & EraticEatingHabits(x) & DiverseEatingHabits(x)) -> (-ConsistentEverydayRoutines(x) & StickToSolidSchedule(x)))"]}
{"id": "folio_train_2512", "nl": "Franny either both grew up with extremely busy parents who did not have time to pack her lunch and has consistent everyday routines and like sticking to a solid schedule, or she neither grew up with extremely busy parents who did not have time to pack her lunch nor has consistent everyday routines and likes sticking to a schedule.  ", "fol": "((GrewUpWithBusyParents(Franny) & HaveConsistentRoutines(Franny) & -(-GrewUpWithBusyParents(Franny) & -HaveConsistentRoutines(Franny))) | (-(GrewUpWithBusyParents(Franny) & HaveConsistentRoutines(Franny)) & -GrewUpWithBusyParents(Franny) & -HaveConsistentRoutines(Franny)))", "prediction": ["(all x.(Franny(x) -> ((ExtremelyBusyParents(x) & -HasTimeToPackLunch(x) & ConsistentEverydayRoutines(x) & SticksToSchedule(x)) | (-ExtremelyBusyParents(x) & -HasTimeToPackLunch(x) & ConsistentEverydayRoutines(x) & SticksToSchedule(x))))", "(all x.(Franny(x) -> ((ExtremelyBusyParents(x) & -HasTimeToPackLunch(x) & ConsistentEverydayRules(x) & SticksToSchedule(x)) | (-ExtremelyBusyParents(x) & -HasTimeToPackLunch(x) & ConsistentEverydayRules(x) & SticksToSchedule(x))))", "(all x.(Franny(x) -> ((ExtremelyBusyParents(x) & -HasTimeToPackLunch(x) & ConsistentEverydayRules(x) & SticksToSchedule(x)) | (-BusyParents(x) & -HasTimeToPackLunch(x) & ConsistentEverydayRules(x) & SticksToSchedule(x))))", "(all x.(Franny(x) -> ((ExtremelyBusyParents(x) & -HasTimeToPackLunch(x) & ConsistentEverydayRules(x) & SticksToSolidSchedule(x)) | (-ExtremelyBusyParents(x) & -HasTimeToPackLunch(x) & ConsistentEverydayRules(x) & SticksToSchedule(x))))", "(all x.(Franny(x) -> ((ExtremelyBusyParents(x) & -HasTimeToPackLunch(x) & ConsistentEverydayRoutines(x) & SticksToSchedule(x)) | (-BusyParents(x) & -HasTimeToPackLunch(x) & ConsistentEverydayRoutines(x) & SticksToSchedule(x))))", "(all x.(Franny(x) -> ((ExtremelyBusyParents(x) & -HasTimeToPackLunch(x) & ConsistentEverydayRules(x) & SticksToSchedule(x)) | (-BusyParents(x) & -HasTimeToPackLunch(x) & ConsistentEverydayRules(x) & SticksToSchedule(x)))))", "(all x.(Franny(x) -> ((ExtremelyBusyParents(x) & -HasTimeToPackLunch(x) & ConsistentOtherdayRules(x) & SticksToSchedule(x)) | (-BusyParents(x) & -HasTimeToPackLunch(x) & ConsistentOtherdayRules(x) & SticksToSchedule(x))))", "(all x.(Franny(x) -> ((ExtremelyBusyParents(x) & -HasTimeToPackLunch(x) & ConsistentEverydayRoutines(x) & SticksToSchedule(x)) | (-BusyParents(x) & -HasTimeToPackLunch(x) & ConsistentEverydayRoutines(x) & SticksToSchedule(x)))))", "(all x.(Franny(x) -> ((ExtremelyBusyParents(x) & -HasTimeToPackLunch(x) & ConsistentEverydayRules(x) & SticksToSchedule(x)) | (-BusyParents(x) & ConsistentEverydayRules(x) & SticksToSchedule(x)))))", "(all x.(Franny(x) -> ((ExtremelyBusyParents(x) & -HasTimeToPackLunch(x) & ConsistentEverydayRules(x) & SticksToSchedule(x)) | (-BusyParents(x) & HasConsistentEverydayRules(x) & SticksToSchedule(x)))))", "(all x.(Franny(x) -> ((ExtremelyBusyParents(x) & -HasTimeToPackLunch(x) & ConsistentEverydayRules(x) & LikesStickingToSchedule(x)) | (-BusyParents(x) & -HasTimeToPackLunch(x) & ConsistentEverydayRules(x) & LikesStickingToSchedule(x))))", "(exists x.(Franny(x) & ((ExtremelyBusyParents(x) & -HasTimeToPackLunch(x) & ConsistentEverydayRules(x) & SticksToSchedule(x)) | -(ExtremelyBusyParents(x) & -HasTimeToPackLunch(x) & ConsistentEverydayRules(x) & SticksToSchedule(x))))", "(all x.(Franny(x) -> ((ExtremelyBusyParents(x) & -HasTimeToPackLunch(x) & ConsistentEverydayRules(x) & SticksToSolidSchedule(x)) | (-BusyParents(x) & -HasTimeToPackLunch(x) & ConsistentEverydayRules(x) & SticksToSchedule(x))))", "(all x.(Franny(x) -> ((ExtremelyBusyParents(x) & -HasTimeToPackLunch(x) & ConsistentEverydayRoutines(x) & SticksToSchedule(x)) | (-BusyParents(x) & ConsistentEverydayRoutines(x) & SticksToSchedule(x)))))", "(all x.(Franny(x) -> ((ExtremelyBusyParents(x) & -HasTimeToPackLunch(x) & ConsistentEverydayRoutines(x) & SticksToSchedule(x)) | (-BusyParents(x) & HasConsistentEverydayRoutines(x) & SticksToSchedule(x)))))", "(all x.(Franny(x) -> ((ExtremelyBusyParents(x) & -HasTimeToPackLunch(x) & ConsistentEverydayRules(x) & LikeStickingToSchedule(x)) | (-BusyParents(x) & -HasTimeToPackLunch(x) & ConsistentEverydayRules(x) & LikeStickingToSchedule(x))))"]}
{"id": "folio_train_2513", "nl": "Franny has to visit the dentist frequently.", "fol": "VisitDentistFrequently(Franny)", "prediction": ["all x y.((Franny(x) & Dentist(y)) -> VisitsFrequently(x,y))", "all x.(Franny(x) -> VisitsDentistFrequently(x))", "all x y.((Franny(x) & Dentist(y)) -> VisitsFrequently(x,y))", "all x.(Franny(x) -> VisitsDentist(x))", "all x y z.((Franny(x) & Dentist(y) & Dental(z)) -> VisitsFrequently(x,y,z))", "all x.(Franny(x) -> VisitsDentistFrequently(x))", "all x y.((Franny(x) & Dentist(y)) -> HasToVisitFrequently(x,y))", "all x.(Franny(x) -> HasToVisitDentistFrequently(x))", "all x y z.((Franny(x) & Dentist(y) & Dental(z)) -> VisitsFrequently(x,y,z))", "all x.((Franny(x) & Dentist(y)) -> VisitsFrequently(x,y))", "all x y z.((Franny(x) & Dentist(y) & Period(z)) -> VisitsFrequently(x,y,z))", "all x y.((Franny(x) & Dentist(y)) -> VisitsFrequency(x,y))", "all x.(Franny(x) -> exists y.(Dentist(y) & Visits(x,y))))", "all x y.((Franny(x) & Dental(y)) -> VisitsFrequently(x,y))", "all x y.((Franny(x) & Dentist(y)) -> Visits(x,y))", "all x y z.((Franny(x) & Dentist(y) & Period(z)) -> VisitsFrequently(x,y,z))"]}
{"id": "folio_train_2514", "nl": "If Franny either both grew up with extremely busy parents who did not have time to pack her lunch and drink kombucha every day or neither grew up with extremely busy parents who did not have time to pack her lunch nor drink kombucha every day, then Franny neither visits the dentist frequently nor drinks Coca Cola or Pepsi products every day.", "fol": "(((GrewUpWithBusyParents(Franny) & DrinkKombuchaEveryDay(Franny)) | (-GrewUpWithBusyParents(Franny) & -DrinkKombuchaEveryDay(Franny))) -> (-VisitDentistFrequently(Franny) & -DrinkCocaColaOrPepsiEveryDay(Franny)))", "prediction": ["all x.((Franny(x) & ((ExtremelyBusyParents(x) & -HasTimeToPackLunch(x) & -HasTimeToPackLunch(x) & -HasTimeToDrinkKombucha(x)) | (-HasTimeToPackLunch(x) & -HasTimeToDrinkKombucha(x)))))", "all x.((Franny(x) & ((ExtremelyBusyParents(x) & -HasTimeToPackLunch(x) & -HasTimeToDrinkKombucha(x)) | (-HasTimeToPackLunch(x) & -HasTimeToDrinkKombucha(x)))))", "all x.((Franny(x) & ((ExtremelyBusyParents(x) & -PackLunch(x) & DrinkKombucha(x)) | (-BusyParents(x) & -PackLunch(x) & DrinkKombucha(x)))))", "all x.((Franny(x) & ((ExtremelyBusyParents(x) & -PackLunch(x) & DrinkKombucha(x)) | (-BusyParents(x) & -PackLunch(x) & DrinkKombucha(x)))) -> (-VisitsDentistFrequently(x) & -DrinksCokeCola(x) & -DrinksPepsiProducts(x)))", "all x.((Franny(x) & ((ExtremelyBusyParents(x) & -HasTimeToPackLunch(x) & -HasTimeToPackLunch(x) & -HasTimeToDrinkKombucha(x)) | (-HasTimeToPackLunch(x) & -HasTimeToDrinkKombucha(x))))", "all x.((Franny(x) & ((ExtremelyBusyParents(x) & -PackLunch(x) & DrinkKombucha(x)) | (-BusyParents(x) & -PackLunch(x) & DrinkKombucha(x)))) -> (-VisitsDentistFrequently(x) & -DrinksCocaCola(x) & -DrinksPepsiProducts(x)))", "all x.((Franny(x) & ((ExtremelyBusyParents(x) & -PackLunch(x) & DrinkKombucha(x)) | (-BusyParents(x) & -PackLunch(x) & DrinkKombucha(x)))) -> (-VisitsDentist(x) & -DrinksCokeCola(x) & -DrinksPepsiProducts(x)))", "all x.((Franny(x) & ((ExtremelyBusyParents(x) & -HasTimeToPackLunch(x) & DrinkKombucha(x)) | (-HasTimeToPackLunch(x) & -HasTimeToDrinkKombucha(x)))))", "all x.((Franny(x) & ((ExtremelyBusyParents(x) & -PackLunch(x) & DrinkKombucha(x)) | (-BusyParents(x) & -PackLunch(x) & DrinkKombucha(x)))) -> (-VisitsDentistFrequently(x) & -DrinksCokeCola(x) & -DrinksPepsiProducts(x))))", "all x.((Franny(x) & ((ExtremelyBusyParents(x) & -PackLunch(x) & DrinkKombucha(x)) | (-BusyParents(x) & -PackLunch(x) & DrinkKombucha(x)))) -> (-VisitsDentistFrequently(x) & -DrinksCokeCola(x) & -DrinksPepsiProductsFrequently(x)))", "all x.((Franny(x) & ((ExtremelyBusyParents(x) & -PackLunch(x) & DrinkKombucha(x)) | (-BusyParents(x) & -PackLunch(x) & DrinkKombucha(x)))) -> (-VisitsDentistFrequently(x) & -DrinksCocaCola(x) & -DrinksPepsiProducts(x))))", "all x.((Franny(x) & ((ExtremelyBusyParents(x) & -PackLunch(x) & DrinkKombucha(x)) | (-PackLunch(x) & DrinkKombucha(x)))))", "all x.((Franny(x) & ((ExtremelyBusyParents(x) & -HasTimeToPackLunch(x) & DrinkKombucha(x)) | (-HasTimeToPackLunch(x) & DrinkKombucha(x)))))", "all x.((Franny(x) & ((ExtremelyBusyParents(x) & -PackLunch(x) & DrinkKombucha(x)) | (-PackLunch(x) & DrinkKombucha(x)))) -> (-VisitsDentistFrequently(x) & -DrinksCocaCola(x) & -DrinksPepsiProducts(x))))", "all x.((Franny(x) & ((ExtremelyBusyParents(x) & -PackLunch(x) & DrinkKombucha(x)) | (-PackLunch(x) & DrinkKombucha(x))))) -> (-VisitsDentistFrequently(x) & -DrinksCocaCola(x) & -DrinksPepsiProducts(x))))", "all x.((Franny(x) & ((ExtremelyBusyParents(x) & -HasTimeToPackLunch(x) & -HasTimeToDrinkKombucha(x)) | (-HasTimeToPackLunch(x) & -HasTimeToDrinkKombucha(x)))) -> (-VisitsDentistFrequently(x) & -DrinksPepsiProducts(x)))"]}
{"id": "folio_train_2515", "nl": "If Franny either visits the dentist frequently or drinks kombucha every day, then Franny both visits the dentist frequently and drinks Coca-Cola or Pepsi products every day.", "fol": "((VisitDentistFrequently(Franny) | DrinkKombuchaEveryDay(Franny)) -> (VisitDentistFrequently(Franny) & DrinkCocaColaOrPepsiEveryDay(Franny)))", "prediction": ["all x.((Franny(x) & (VisitsDentistFrequently(x) | DrinksKombuchaEveryDay(x))) -> (VisitsDentistFrequently(x) & DrinksCokeColaOrPepsiProductsEveryDay(x)))", "all x.((Franny(x) & (VisitsDentistFrequently(x) | DrinksKombuchaEveryDay(x))) -> (VisitsDentistFrequently(x) & (DrinksCokeCola(x) | DrinksPepsiProductsEveryDay(x))))", "all x.((Franny(x) & (VisitsDentistFrequently(x) | DrinksKombuchaEveryDay(x))) -> (VisitsDentistFrequently(x) & DrinksCokeColaOrPepsiProductsEveryDay(x)))", "all x.((Franny(x) & (VisitsDentistFrequently(x) | DrinksKombuchaEveryDay(x))) -> (VisitsDentistFrequently(x) & (DrinksCokeCola(x) | DrinksPepsi(x))))", "all x.((Franny(x) & (VisitsDentistFrequently(x) | DrinksKombuchaEveryDay(x))) -> (VisitsDentistFrequently(x) & (DrinksCokeCola(x) | DrinksPepsiProductsEveryDay(x))))", "all x.((Franny(x) & (VisitsDentistFrequently(x) | DrinksKombuchaEveryDay(x))) -> (VisitsDentistFrequently(x) & (DrinksCokeCola(x) | DrinksPepsiProducts(x))))", "all x.((Franny(x) & (VisitsDentistFrequently(x) | DrinksKombuchaEveryDay(x))) -> (VisitsDentistFrequently(x) & (DrinksCokeCola(x) | DrinksPepsi(x))))", "all x.((Franny(x) & (VisitsDentistFrequently(x) | DrinksKombuchaEveryDay(x))) -> (VisitsDentistFrequently(x) & DrinksCocaColaOrPepsiProductsEveryDay(x)))", "all x.((Franny(x) & (VisitsDentistFrequently(x) | DrinksKombuchaEveryDay(x))) -> (VisitsDentistFrequently(x) & (DrinksCocaCola(x) | DrinksPepsiProductsEveryDay(x))))", "all x.((Franny(x) & (VisitsDentist(x) | DrinksKombucha(x))) -> (VisitsDentist(x) & (DrinksCokeCola(x) | DrinksPepsi(x))))", "all x.((Franny(x) & (VisitsDentistFrequently(x) | DrinksKombuchaEveryDay(x))) -> (VisitsDentistFrequently(x) & (DrinksCokeCola(x) | DrinksPepsi(x)))))", "all x.((Franny(x) & (VisitsDentistFrequently(x) | DrinksKombuchaEveryDay(x))) -> (VisitsDentistFrequently(x) & DrinksCocaColaOrPepsiProductsEveryDay(x)))", "all x.((Franny(x) & (VisitsDentistFrequently(x) | DrinksKombuchaEveryDay(x))) -> ((VisitsDentistFrequently(x) & DrinksCokeColaOrPepsiProductsEveryDay(x))))", "all x.((Franny(x) & (VisitsDentistFrequently(x) | DrinksKombuchaEveryDay(x))) -> (VisitsDentistFrequently(x) & DrinksCokeColaOrPepsi(x)))", "all x.((Franny(x) & (VisitsFrequently(x) | DrinksKombuchaEveryDay(x))) -> (VisitsFrequently(x) & (DrinksCokeCola(x) | DrinksPepsiProductsEveryDay(x))))", "all x.((Franny(x) & (VisitsDentistFrequently(x) | DrinksKombuchaEveryDay(x))) -> (VisitsDentistFrequently(x) & (DrinksCocaCola(x) | DrinksPepsi(x))))"]}
{"id": "folio_train_2516", "nl": "If a customer subscribes to AMC A List, then he/she can watch 3 movies every week without any additional fees. ", "fol": "all x.((SubscribedToAMCList(x,Amcalist) -> AvailableToWatch3Movies(x)) & NoAdditionalFees(x))", "prediction": ["all x.(SubscribesToAMCAList(x) -> CanWatchMoviesWithoutAdditionalFees(x))", "all x.(SubscribesToAMCAList(x) -> CanWatch3Movies(x))", "all x.(SubscribesToAMCAList(x) -> (WatchesMoviesEveryWeek(x,3) & -AdditionalFees(x)))", "all x.(SubscribesToAMCAList(x) -> (WatchesMoviesEveryWeek(x) & -AdditionalFees(x)))", "all x.(SubscribesToAMCAList(x) -> CanWatchMoviesEveryWeek(x))", "all x.(SubscribesToAMCAList(x) -> CanWatch3MoviesEveryWeek(x))", "all x.(SubscribesToAMCAList(x) -> WatchesMoviesEveryWeek(x))", "all x.(SubscribesToAMCAList(x) -> WatchesMoviesWithoutAdditionalFees(x))", "all x.((Customer(x) & SubscribesToAMCAList(x)) -> CanWatch3MoviesEveryWeek(x))", "all x.((Customer(x) & SubscribesToAMCAList(x)) -> CanWatchMoviesWithoutAdditionalFees(x))", "all x.((Customer(x) & SubscribesToAMCAList(x)) -> CanWatch3Movies(x))", "all x.(SubscribesToAMCAList(x) -> WatchesMoviesEveryWeek(x,3))", "all x y.((Customer(x) & SubscribesToAMCAList(x,y)) -> WatchesMoviesEveryWeek(x,y))", "all x.(SubscribesToAMCAList(x) -> (WatchesMoviesEveryWeek(x,3) & -AdditionalFees(x,3)))", "all x.(SubscribesToAMCAList(x) -> Watches3Movies(x))", "all x.((Customer(x) & SubscribesToAMCAList(x)) -> CanWatch3MoviesEveryWeek(x))"]}
{"id": "folio_train_2517", "nl": "Some customers go to cinemas every week. ", "fol": "exists x.GoToCinemaEveryWeek(x)", "prediction": ["exists x.(Customer(x) & GoesToCinema(x))", "exists x y.(Customer(x) & Cinema(y) & GoesTo(x,y))", "exists x.(Customer(x) & GoesToCinema(x) & EveryWeek(x))", "exists x.(Customer(x) & GoesToCinemasEveryWeek(x))", "exists x.(Customer(x) & GoToCinema(x))", "exists x.(Customer(x) & GoesToCinemaEveryWeek(x))", "exists x.(Customer(x) & GoesToCinemas(x))", "exists x.(Customer(x) & GoesToCinema(x) & Week(x))", "exists x y.(Customer(x) & Cinema(y) & GoesToEveryWeek(x,y))", "exists x.(Customer(x) & GoesToCinema(x,Week))", "exists x y.(Client(x) & Cinema(y) & GoesTo(x,y))", "exists x y.((Customer(x) & Cinema(y)) -> GoesTo(x,y))", "exists x.(Customer(x) & GoesToCinema(x) & Weeks(x))", "exists x.(Customer(x) & GoesToCinema(x,w))", "exists x.(Customer(x) & Cinema(y) & GoesTo(x,y))", "exists x.(Customer(x) & GoesToCinema(x,winter))"]}
{"id": "folio_train_2518", "nl": "Customers who prefer TV series will not watch TV series in cinemas.", "fol": "all x.(PrefersTVSeries(x,Tvseries) -> -WatchesInCinemas(x,Cinemas))", "prediction": ["all x.((Customer(x) & PrefersTVSeries(x)) -> -WatchesTVSeriesInCinemas(x))", "all x.((Customer(x) & PrefersTVSeries(x)) -> -WatchTVSeriesInCinemas(x))", "all x.((Customer(x) & PrefersTVSeries(x)) -> -WatchesInCinemas(x))", "all x.((Customer(x) & PrefersTVSeries(x)) -> -WatchTelevisionSeriesInCinemas(x))", "all x.((Customer(x) & PrefersTVSeries(x)) -> -WatchTVSeriesInCinemas(x))", "all x.((Customer(x) & PrefersTVSeries(x)) -> -(WatchesTVSeriesInCinemas(x) | WatchesTVSeriesInCinemas(x)))", "all x.((Customer(x) & PrefersTVSeries(x)) -> -WatchesTVSeriesInCinemas(x))", "all x.((Customer(x) & PrefersTVSeries(x)) -> -WatchInCinemas(x))", "all x.((Customer(x) & PrefersTVSeries(x)) -> -(WatchesTVSeriesInCinemas(x) | WatchesTVSeriesInCinemas(x))))", "all x.((Customer(x) & PrefersTVSeries(x)) -> -WillWatchTVSeriesInCinemas(x))", "all x.((Customer(x) & PrefersTVSeries(x)) -> -WatchesTVSeriesInCinema(x))", "all x.((Customer(x) & PrefersTVSeries(x)) -> -WatchInCinema(x))", "all x.((Customer(x) & PrefersTVSeries(x)) -> -WatchesTelevisionSeriesInCinemas(x))", "all x.((Customer(x) & PrefersTVSeries(x)) -> -SwimmsInCinemas(x))", "all x.((Customer(x) & PrefersTVSeries(x)) -> -WatchesTVSeries(x))", "all x.((Customer(x) & PrefersTVSeries(x)) -> -WorthWatchingTVSeriesInCinemas(x))"]}
{"id": "folio_train_2519", "nl": "James subscribes to AMC A List.", "fol": "SubscribedToAMCList(James,Amcalist)", "prediction": ["all x y.((James(x) & AMCAList(y)) -> SubscribesTo(x,y))", "all x y.((James(x) & AMCAList(y)) -> SubscribesTo(x,y))", "All x y.((James(x) & AMCAList(y)) -> SubscribesTo(x,y))", "all x.((James(x) & SubscribesToAMCAList(x)) -> SubscribesToAMCAList(x))", "all x.(SubscribesToAMCAList(x) -> James(x))", "all x y.((James(x) & AMCList(y)) -> SubscribesTo(x,y))", "all x.((James(x) & AMCAList(x)) -> SubscribesTo(x,y))", "all x y.((James(x) & AMCAList(y)) -> Subscribes(x,y))", "All x.(James(x) -> SubscribesToAMCAList(x))", "All x.((James(x) & SubscribesToAMCAList(x)) -> SubscribesToAMCAList(x))", "All x y.((James(x) & AMCAList(y)) -> SubscribesTo(x,y))", "All x.((James(x) & AMCAList(x)) -> SubscribesTo(x,y))", "all x y.((James(x) & AMCList(y)) -> SubscribesTo(x,y))", "all x y.((James(x) & AMCAList(y)) -> Subscribes(x,y))", "All x y.((James(x) & AMCList(y)) -> SubscribesTo(x,y))", "All x y.((James(x) & AMCAList(y)) -> Subscribes(x,y))"]}
{"id": "folio_train_2520", "nl": "Peter prefers TV series.", "fol": "PrefersTVSeries(Peter,Tvseries)", "prediction": ["all x y.((Peter(x) & TVSeries(y)) -> Prefers(x,y))", "all x y.((Peter(x) & TVSeries(y)) -> Prefers(x,y))", "Peter prefersTVSeries(Peter)", "all x.((Peter(x) & TVSeries(x)) -> Prefers(x,y))", "all x.(PrefersTVSeries(x) -> PeterPrefersTVSeries(x))", "all x.(PrefersTVSeries(x) -> Peter(x))", "all x.((Peter(x) & TVSeries(y)) -> Prefers(x,y))", "(PrefersTVSeries(Peter))", "all x.((Peter(x) & TVSeries(x)) -> Prefers(x))", "all x.(Prefers(x,TVSeries) -> PeterPrefers(x,TVSeries))", "all x y.((Peter(x) & TVSeries(y)) -> Likes(x,y))", "all x.(PrefersTVSeries(x) -> Peter(x))", "all x.((Peter(x) & TVSeries(x)) -> Prefers(x,y))", "all x y.((Peter(x) & TVSeries(y)) -> prefers(x,y))", "(PrefersTVSeries(Peter) & -PrefersTVSeries(Peter))", "all x.(PrefersTVSeries(x) -> PeterPrefersSeries(x))"]}
{"id": "folio_train_2521", "nl": "James is not able to watch 3 movies every week without any additional fees.", "fol": "-AvailableToWatch3Movies(James)", "prediction": ["all x.((James(x) & WatchesMovies(x,3)) -> -CanWatchMovies(x,3))", "all x.((James(x) & WatchesMovies(x,3)) -> -(WatchesMovies(x,3) & -(WatchesMovies(x,3) & WatchesMovies(x,3)) & -(WatchesMovies(x,3) & WatchesMovies(x,3)))))", "all x.((James(x) & WatchesMovies(x,3) & NoAdditionalFees(x)) -> -CanWatchMovies(x,3))", "all x.((James(x) & WatchesMovies(x,3) & -CanWatchMovies(x,3)) -> -CanWatchMovies(x,3))", "all x.((James(x) & WatchesMovies(x,3)) -> -(WatchesMovies(x,3) & -(WatchesMovies(x,3) & WatchesMovies(x,3)) & -(WatchesMovies(x,3) & WatchesMovies(x,3) & WatchesMovies(x,3))))", "all x.((James(x) & WatchesMovies(x,3)) -> -(WatchesMovies(x,3) & -(WatchesMovies(x,3) & -(WatchesMovies(x,3) & WatchesMovies(x,3)))))", "all x y.((James(x) & Movie(y)) -> -CanWatch(x,y))", "all x.((James(x) & 3Movies(x)) -> -CanWatchWithoutAdditionalFees(x))", "all x.((James(x) & WatchesMovies(x,3)) -> -(WatchesMovies(x,3) & -(WatchesMovies(x,3) & WatchesMovies(x,3)) & -(WatchesMovies(x,3) & WatchesMovies(x,3)) & -(WatchesMovies(x,3) & Watches(x,3))))", "all x.((James(x) & WatchesMovies(x,3)) -> -(WatchesMovies(x,3) & -(WatchesMovies(x,3) & WatchesMovies(x,3)))))", "all x.((James(x) & WatchesMovies(x,3)) -> -(WatchesMovies(x,3) & -(WatchesMovies(x,3)) & -(WatchesMovies(x,3) & WatchesMovies(x,3)))))", "all x.((James(x) & WatchesMovies(x,3)) -> -(WatchesMovies(x,3) & -(WatchesMovies(x,3)) & -(WatchesMovies(x,3) & WatchesMovies(x,3)) & -(WatchesMovies(x,3) & WatchesMovies(x,3)))))", "all x.((James(x) & WatchesMovies(x,3)) -> -(WatchesMovies(x,3) & -(WatchesMovies(x,3) & -(WatchesMovies(x,3)) & -(WatchesMovies(x,3) & WatchesMovies(x,3)))))", "all x.((James(x) & WatchesMovies(x,3)) -> -(WatchesMovies(x,3) & -(WatchesMovies(x,3) & WatchesMovies(x,3)) & -(WatchesMovies(x,3) & WatchesMovies(x,4)))))", "all x.((James(x) & WatchesMovies(x,3)) -> -(WatchesMovies(x,3) & -(WatchesMovies(x,3)) & -(WatchesMovies(x,3)) & -(WatchesMovies(x,3) & WatchesMovies(x,3)))))", "all x.((James(x) & WatchesMovies(x,3)) -> -(WatchesMovies(x,3) & -(WatchesMovies(x,3) & WatchesMovies(x,3)) & -(WatchesMovies(x,3) & WatchesMovies(x,3)) & WatchesMovies(x,3)))"]}
{"id": "folio_train_2522", "nl": "Peter will not watch TV series in cinemas.", "fol": "-WatchesInCinemas(Peter,Cinemas)", "prediction": ["all x.((Peter(x) & -WatchesTVSeriesInCinemas(x)) -> -WatchesTVSeriesInCinemas(x))", "all x y.((Peter(x) & TVSeries(y)) -> -WatchesInCinemas(x,y))", "all x.((Peter(x) & -WatchesTVSeriesInCinemas(x)) -> -(WatchesTVSeriesInCinemas(x) & WatchesTVSeriesInCinemas(x)))", "all x y.((Peter(x) & TVSeries(y)) -> -WatchInCinemas(x,y))", "all x.((Peter(x) & -WatchTVSeriesInCinemas(x)) -> -WatchTVSeriesInCinemas(x))", "all x.((Peter(x) & -WatchesInCinemas(x)) -> -WatchesInCinemas(x))", "all x y.((Peter(x) & TVSeries(y)) -> -SelectsInCinemas(x,y))", "all x y.((Peter(x) & TVSeries(y)) -> -(WatchesInCinemas(x,y) | WatchesInCinemas(x,y)))", "all x.((Peter(x) & -WatchesTVSeriesInCinemas(x)) -> -WatchesInCinemas(x))", "all x y.((Peter(x) & TVSeries(y)) -> -WatchInCinema(x,y))", "all x.((Peter(x) & -WatchesTVSeriesInCinemas(x)) -> -(WatchesTVSeriesInCinemas(x) | WatchesTVSeriesInCinemas(x)))", "all x.((Peter(x) & -WatchesTVSeriesInCinemas(x)) -> -(WatchesTVSeriesInCinemas(x) & -WatchesTVSeriesInCinemas(x)))", "all x y z.((Peter(x) & TVSeries(y) & Cinema(z)) -> -WatchesIn(x,y,z))", "all x y z.((Peter(x) & TVSeries(y) & Cinema(z)) -> -WatchIn(x,y,z))", "all x y.((Peter(x) & TVSeries(y)) -> -(WatchesInCinemas(x,y) | WatchesInCinemas(x,y))))", "all x.((Peter(x) & -WatchesTVSeriesInCinemas(x)) -> -(WatchesTVSeriesInCinemas(x) | WatchesTVSeriesInCinemas(x))))"]}
{"id": "folio_train_2523", "nl": "Bulbophyllum attenuatum is in the genus bulbophyllum.", "fol": "IsInGenus(Bulbophyllumattenuatum,Bulbophyllum)", "prediction": ["all x.(BulbophyllumAttenuatum(x) -> InGenusBulbophyllum(x))", "all x.(BulbophyllumAttenuatum(x) -> InGenusBulocyllum(x))", "all x.((BulbophyllumAttenuatum(x) & InGenusBulbophyllum(x)) -> InGenusBulbophyllum(x))", "all x.(BulbophyllumAtenuatum(x) -> InGenusBulbophyllum(x))", "all x y.((BulbophyllumAttenuatum(x) & Bulbophyllum(y)) -> InGenusBulbophyllum(x))", "all x y.((BulbophyllumAttenuatum(x) & Bulbophyllum(y)) -> InGenusBulbophyllum(x,y))", "all x y.((Bulbophyllum(x) & Attenuatum(y)) -> InGenusBulbophyllum(x,y))", "all x.((BulbophyllumAttenuatum(x)) -> InGenusBulbophyllum(x))", "all x.(BulbophyllumAttenuatum(x) -> InGenusBulbophyllum(x))", "all x.((BulbophyllumAttenuatum(x) & Bulbophyllum(x)) -> InGenusBulbophyllum(x))", "all x.((Bulbophyllum(x) & Attenuatum(x)) -> InGenusBulbophyllum(x))", "all x y.((BulbophyllumAttenuatum(x) & Bulbophyllum(y)) -> InGenus(x,y))", "all x.(BulbsophyllumAttenuatum(x) -> InGenusBulbophyllum(x))", "all x y.((Bulbophyllum(x) & Attenuatum(y)) -> InGenusBulbophyllum(x))", "all x.(BulbophyllumAttenuatum(x) -> InGenusBulbophyllum(x))", "all x.(BubophyllumAttenuatum(x) -> InGenusBulbophyllum(x))"]}
{"id": "folio_train_2524", "nl": "All bulbophyllum are orchids.", "fol": "all x.(IsInGenus(x,Bulbophyllum) -> IsOrchid(x))", "prediction": ["all x.(Bulbophyllum(x) -> Orchid(x))", "all x.(Bulbsophyllum(x) -> Orchid(x))", "all x.(Blumophyllum(x) -> Orchid(x))", "all x.(Bumbophyllum(x) -> Orchid(x))", "all x.(Bulocyllum(x) -> Orchid(x))", "all x.(Bulmophyllum(x) -> Orchid(x))", "all x.(Bumbophyllum(x) -> Orchid(x))", "all x.(Bulbiophyllum(x) -> Orchid(x))", "all x.(Bullophyllum(x) -> Orchid(x))", "all x.(Bulbsylophyllum(x) -> Orchid(x))", "all x.(Bulumophyllum(x) -> Orchid(x))", "all x.(Bombophyllum(x) -> Orchid(x))", "all x.(Bumbiophyllum(x) -> Orchid(x))", "all x.(Bulmophyllum(x) -> Orchid(x))", "all x.(Bumbrella(x) -> Orchid(x))", "all x.(Bulbophyllum(x) -> Orchides(x))"]}
{"id": "folio_train_2525", "nl": "Bulbophyllum attenuatum is not an orchid.", "fol": "-IsOrchid(Bulbophyllumattenuatum)", "prediction": ["all x.(BulbophyllumAttenuatum(x) -> -Orchid(x))", "all x.((BulbophyllumAttenuatum(x) & -Orchid(x)) -> -Orchid(x))", "(-Orchid(BulbophyllumAttenuatum))", "All x.(BulbophyllumAttenuatum(x) -> -Orchid(x))", "all x.(BulbophyllumAtenuatum(x) -> -Orchid(x))", "-Orchid(BulbophyllumAttenuatum)", "all x.((Bulbophyllum(x) & Attenuatum(x)) -> -Orchid(x))", "all x.((BulbophyllumAttenuatum) & -Orchid(x)) -> -Orchid(x))", "all x.((BulbophyllumAttenuatum(x)) -> -Orchid(x))", "all x.(BulbophyllumAttenuatum(x) -> -Orchidee(x))", "all x.((BulbophyllumAttenuatum(x) & -Orchidee(x)) -> -Orchid(x))", "all x.(BubophyllumAttenuatum(x) -> -Orchid(x))", "all x.(BulbsophyllumAttenuatum(x) -> -Orchid(x))", "all x.(BulbophyllumAttenuatum(x) -> -Orchide(x))", "(-Orchid(bulbophyllum) & Attenuatum(bulbophyllum))", "all x.((BulbophyllumAttenuatum(x) & -Orchid(x)) -> -Orchidee(x))"]}
{"id": "folio_train_2526", "nl": "There are eight federal districts of Russia: Central, Northwestern, Southern, North Caucasian, Volga, Ural, Siberian and Far Eastern.", "fol": "(IsFederalDistrictOfRussia(Central) | IsFederalDistrictOfRussia(Northwestern) | IsFederalDistrictOfRussia(Southern) | IsFederalDistrictOfRussia(Northcaucasian) | IsFederalDistrictOfRussia(Volga) | IsFederalDistrictOfRussia(Ural) | IsFederalDistrictOfRussia(Siberian) | IsFederalDistrictOfRussia(Fareastern))", "prediction": ["all x.(FederalDistrict(x) -> (Central(x) | Northwestern(x) | Southern(x) | NorthCaucasian(x) | Volga(x) | Ural(x) | Siberian(x) | FarEastern(x)))", "all x.(FederalDistrict(x) -> (Central(x) | Northwestern(x) | Southern(x) | NorthCucasian(x) | Volga(x) | Ural(x) | Siberian(x) | FarEastern(x)))", "all x.(FederalDistrict(x) -> (Central(x) | Northwestern(x) | Southern(x) | NorthCaucassian(x) | Volga(x) | Ural(x) | Siberian(x) | FarEastern(x)))", "all x.(FederalDistrict(x) -> (Central(x) | Northwestern(x) | Southern(x) | NorthCaucasian(x) | Volga(x) | Ural(x) | Siberian(x) | FarEast(x)))", "all x.(FederalDistrict(x) -> (Central(x) | Northwestern(x) | Southern(x) | NorthCucasian(x) | Volga(x) | Ural(x) | Siberian(x) | FarEast(x)))", "all x.(FederalDistrict(x) -> (Central(x) | Northwestern(x) | Southern(x) | NorthCaucassian(x) | Volga(x) | Ural(x) | Siberian(x) | FarEast(x)))", "all x.(FederalDistrict(x) -> (Central(x) | Northwestern(x) | Southern(x) | NorthCaucasian(x) | Volga(x) | Ural(x) | Siberian(x) | FarEastern(x)))", "all x.(Russland(x) -> (Central(x) | Northwestern(x) | Southern(x) | NorthCaucasian(x) | Volga(x) | Ural(x) | Siberian(x) | FarEastern(x)))", "all x.((Region(x) & Central(x) & Northwestern(x) & Southern(x) & NorthCaucassian(x) & Volga(x) & Ural(x) & Siberian(x) & FarEastern(x)) -> Federal(x))", "all x.(Russland(x) -> (Central(x) | Northwestern(x) | Southern(x) | NorthCaucassian(x) | Volga(x) | Ural(x) | Siberian(x) | FarEastern(x)))", "all x.(Russland(x) -> (Central(x) | Northwestern(x) | Southern(x) | NorthCucasian(x) | Volga(x) | Ural(x) | Siberian(x) | FarEastern(x)))", "all x.(FederalDistrict(x) -> (Central(x) & Northwestern(x) & Southern(x) & NorthCaucassian(x) & Volga(x) & Ural(x) & Siberian(x) & FarEastern(x)))", "all x.((Region(x) & Central(x) & Northwestern(x) & Southern(x) & NorthCaucasian(x) & Volga(x) & Ural(x) & Siberian(x) & FarEastern(x)) -> Federal(x))", "all x.((Region(x) & Central(x) & Northwestern(x) & Southern(x) & NorthCucasian(x) & Volga(x) & Ural(x) & Siberian(x) & FarEastern(x)) -> Federal(x))", "all x.((Region(x) & Central(x) & Northwestern(x) & Southern(x) & NorthCaucassian(x) & Volga(x) & Ural(x) & Siberian(x) & FarEast(x)) -> Federal(x))", "all x.(FederalDistrict(x) -> (Central(x) & Northwestern(x) & Southern(x) & NorthCaucassian(x) & Volga(x) & Ural(x) & Siberian(x) & FarEast(x)))"]}
{"id": "folio_train_2527", "nl": "The Central federal district has the largest population among all federal districts in Russia.", "fol": "(IsFederalDistrictOfRussia(Central) & HasLargestPopulationIn(Central))", "prediction": ["all x.(CentralFederalDistrict(x) -> LargestPopulation(x))", "all x y.((CentralFederalDistrict(x) & FederalDistrict(y)) -> LargestPopulation(x,y))", "all x y z.((CentralFederalDistrict(x) & FederalDistrict(y) & FederalDistrict(z)) -> LargestPopulation(x,y,z))", "all x y.((CentralFederalDistrict(x) & FederalDistrict(y)) -> LargestPopulationInRussland(x,y))", "all x.(CentralFederalDistrict(x) -> LargestPopulationInRussland(x))", "all x.(CentralFederalDistrict(x) -> LargestPopulationInRussia(x))", "all x y.((CentralFederalDistrict(x) & FederalDistrict(y)) -> LargestPopulationInRussia(x,y))", "all x y.((CentralFederalDistrict(x) & FederalDistrict(y) & Russia(y)) -> LargestPopulation(x,y))", "all x.(CentralFederalDistrict(x) -> LargestPopulationInFederalDistrict(x))", "all x y z.((CentralFederalDistrict(x) & FederalDistrict(y) & FederalDistrict(z)) -> LargestPopulationInRussia(x,y,z))", "all x y.((CentralFederalDistrict(x) & District(y)) -> LargestPopulation(x,y))", "all x y z.((CentralFederalDistrict(x) & FederalDistrict(y) & FederalDistrict(z)) -> LargestPopulationInRussland(x,y,z))", "all x y.((CentralFederalDistrict(x) & FederalDistrict(y) & Russia(x)) -> LargestPopulation(x,y))", "all x y.((CentralFederalDistrict(x) & FederalDistrict(y) & InRussia(x,y)) -> LargestPopulation(x,y))", "all x y z.((CentralFederalDistrict(x) & FederalDistrict(y) & FederalDistrict(z) & Russia(z)) -> LargestPopulation(x,y,z))", "all x.(CentralFederalDistrict(x) -> LargestPopulationOfFederalDistricts(x))"]}
{"id": "folio_train_2528", "nl": "Moscow is the administrative center of the Central federal district.", "fol": "IsAdministrativeCenterOf(Moscow,Central)", "prediction": ["(AdministrativeCenter(Moscow) & CentralFederalDistrict(Moscow))", "all x.((Moscow(x) & CentralFederalDistrict(x)) -> AdministrativeCenter(x))", "all x y.((Moscow(x) & CentralFederalDistrict(y)) -> AdministrativeCenter(x,y))", "all x.((Moscow(x) & AdministrativeCenter(x)) -> CentralFederalDistrict(x))", "all x.(Moscow(x) -> AdministrativeCenterOfCentralFederalDistrict(x))", "all x.((Moscow(x) & AdministrativeCenter(x,CentralFederalDistrict)) -> AdministrativeCenter(x,CentralFederalDistrict))", "all x.((Moscow(x) & AdministrativeCenter(x) & CentralFederalDistrict(x)) -> AdministrativeCenter(x))", "all x.(Moscow(x) -> AdministrativeCenter(x))", "all x y.((Moscow(x) & FederalDistrict(y)) -> AdministrativeCenter(x,y))", "all x y z.((Moscow(x) & CentralFederalDistrict(y) & AdministrativeCenter(z)) -> AdministrativeCenter(x,y,z))", "all x.(Moscow(x) -> AdministrativeCenter(x,CentralFederalDistrict))", "all x y.((Moscow(x) & CentralFederalDistrict(y)) -> AdministrationCenter(x,y))", "all x.((Moscow(x) & CentralFederalDistrict(y)) -> AdministrativeCenter(x,y))", "(AdministrativeCenter(Moscow,CentralFederalDistrict))", "all x.((Moscow(x) & CentralFederalDistrict(x)) -> AdministrationCenter(x))", "all x.((Moscow(x) & AdministrativeCenter(x,CentralFederalDistrict)) -> AdministrativeCenter(x))"]}
{"id": "folio_train_2529", "nl": "Yekaterinburg is the administrative center of the Ural federal district.", "fol": "IsAdministrativeCenterOf(Yekaterinburg,Ural)", "prediction": ["(AdministrativeCenter(Yekaterinburg) & UralFederalDistrict(Yekaterinburg))", "all x y.((Yekaterinburg(x) & UralFederalDistrict(y)) -> AdministrativeCenter(x,y))", "all x.((Yekaterinburg(x) & UralFederalDistrict(x)) -> AdministrativeCenter(x))", "all x.(Yekaterinburg(x) -> AdministrativeCenterOfUralFederalDistrict(x))", "all x.(Ekaterinburg(x) -> AdministrativeCenterOfUralFederalDistrict(x))", "all x.((Yekaterinburg(x) & UralFederalDistrict(y)) -> AdministrativeCenter(x,y))", "All x.(Yekaterinburg(x) -> AdministrativeCenterOfUralFederalDistrict(x))", "(AdministrativeCenter(Ekaterinburg) & UralFederalDistrict(Ekaterinburg))", "(AdministrativeCenter(Yekaterinburg) & UralFederalDistrict(Y))", "(AdministrativeCenter(Yekaterinburg) & UralFederalDistrict(y))", "(AdministrativeCenter(y) & UralFederalDistrict(z))", "all x y.((Yekaterinburg(x) & UralFederalDistrict(y)) -> AdministrationCenter(x,y))", "(AdministrativeCenter(y) & UralFederalDistrict(y))", "all x.((Yekaterinburg(x) & UralFederalDistrict(x)) -> AdministrativeCenter(x,y))", "Yekaterinburg (AdministrativeCenter(y) & UralFederalDistrict(z))", "(AdministrativeCenter(y) & UralFederalDistrict(z) & LocatedIn(y,z))"]}
{"id": "folio_train_2530", "nl": "Vladivostok is the administrative center of the Far Eastern federal district.", "fol": "IsAdministrativeCenterOf(Vladivostok,Fareastern)", "prediction": ["(AdministrativeCenter(Vladivostok) & FarEasternFederalDistrict(Vladivostok))", "Vladivostok (AdministrativeCenter(Vladivostok) & FarEasternFederalDistrict(Vladivostok))", "all x.((Vladivostok(x) & FarEasternFederalDistrict(x)) -> AdministrativeCenter(x))", "(AdministrativeCenter(Vladivostok) & FarEastFederalDistrict(Vladivostok))", "Vladivostok (AdministrativeCenter(Vladivostok) & FarEastFederalDistrict(Vladivostok))", "all x y.((Vladivostok(x) & FarEasternFederalDistrict(y)) -> AdministrativeCenter(x,y))", "all x.((Vladivostok(x) & FarEastFederalDistrict(x)) -> AdministrativeCenter(x))", "all x.(Vladivostok(x) -> AdministrativeCenterOfFarEasternFederalDistrict(x))", "all x.((Vladivostok(x) & AdministrativeCenter(x)) -> FarEasternFederalDistrict(x))", "all x.(Vladivostok(x) -> AdministrativeCenterOfFarEastFederalDistrict(x))", "Vladivostok (AdministrativeCenter(Vladivostok) & FarEasternFederalDistrict(Vladivostok,FederalDistrict))", "(AdministrativeCenter(Vladivostok) & FarEasternFederalDistrict(Vladivostok,FederalDistrict))", "all x.((Vladivostok(x) & AdministrativeCenter(x)) -> FarEastFederalDistrict(x))", "Vladivostok (AdministrativeCenter(Vladivostok) & FarEastFederalDistrict(Vladivostok,FederalDistrict))", "All x.(Vladivostok(x) -> AdministrativeCenterOfFarEasternFederalDistrict(x))", "(AdministrativeCenter(Vladivostok) & FarEastFederalDistrict(Vladivostok,FederalDistrict))"]}
{"id": "folio_train_2531", "nl": "The Far Eastern federal district has the largest area among all federal districts in Russia.", "fol": "(IsFederalDistrictOfRussia(Fareastern) & HasLargestAreaIn(Fareastern))", "prediction": ["all x.(FarEasternFederalDistrict(x) -> LargestArea(x))", "all x.(FarEastFederalDistrict(x) -> LargestArea(x))", "all x y.((FarEasternFederalDistrict(x) & FederalDistrict(y)) -> LargestArea(x,y))", "all x y.((FarEastFederalDistrict(x) & FederalDistrict(y)) -> LargestArea(x,y))", "all x.(FarEasternFederalDistrict(x) -> LargestAreaAmongFederalDistricts(x))", "all x.(FarEasternFederalDistrict(x) -> LargestAreaInRussland(x))", "all x.(FarEasternFederalDistrict(x) -> LargestAreaInRussia(x))", "all x y.((FarEastFederalDistrict(x) & FederalDistrict(y) & Russia(y)) -> LargestArea(x,y))", "all x.(FarEastFederalDistrict(x) -> LargestAreaAmongFederalDistricts(x))", "all x.(FarEastFederalDistrict(x) -> LargestAreaInRussland(x))", "all x y.((FarEasternFederalDistrict(x) & FederalDistrict(y) & Russia(y)) -> LargestArea(x,y))", "all x.(FarEastFederalDistrict(x) -> LargestAreaInRussia(x))", "all x.(FarEasternFederalDistrict(x) -> LargestAreaAmongFederalDistrictsInRussia(x))", "all x.(FarEasternFederalDistrict(x) -> LargestAreaInFederalDistricts(x))", "all x y.((FarEasternFederalDistrict(x) & FederalDistrict(y)) -> LargestAreaInRussland(x,y))", "all x y.((FarEasternFederalDistrict(x) & FederalDistrict(y)) -> LargestAreaInRussia(x,y))"]}
{"id": "folio_train_2532", "nl": "Some federal districts of Russia were established in 2000.", "fol": "exists x.(IsFederalDistrictOfRussia(x) -> WasEstablishedIn(x,2000))", "prediction": ["exists x.(FederalDistrict(x) & EstablishedIn(x,2000))", "exists x.(FederalDistrict(x) & EstablishedIn2000(x))", "exists x.(FederalDistrict(x) & EstablishedIn(x,2000))", "exists x.(Region(x) & Federal(x) & EstablishedIn(x,2000))", "exists x.(RussianFederalDistrict(x) & EstablishedIn2000(x))", "exists x.(FederalDistrict(x) & EstablishedIn2000(x))", "exists x.(FederalDistrict(x) & LocatedIn(x,2000))", "exists x.(Region(x) & Federal(x) & EstablishedIn2000(x))", "exists x.(FederalDistrict(x) & FoundedIn(x,2000))", "exists x.(FederalDistrict(x) & InRussland(x) & EstablishedIn2000(x))", "exists x.(FederalDistrict(x) & Russia(x) & EstablishedIn2000(x))", "exists x.(Russland(x) & FederalDistrict(x) & EstablishedIn2000(x))", "exists x.(FederalDistrict(x) & EstablishedIn(x,y) & Russia(y))", "exists x.(FederalDistrict(x) & SettledIn(x,2000))", "exists x.(FederalDistrict(x) & Russia(x) & EstablishedIn(x,2000))", "exists x.(FederalDistrict(x) & FoundIn(x,2000))"]}
{"id": "folio_train_2533", "nl": "Vladivostok is the administrative center of the federal district with the largest area.", "fol": "exists x.(IsAdministrativeCenterOf(Vladivostok,x) & HasLargestAreaIn(x) & IsFederalDistrictOfRussia(x))", "prediction": ["all x.((AdministrativeCenter(x) & FederalDistrict(x) & LargestArea(x)) -> Vladivostok(x))", "all x.(Vladivostok(x) -> (AdministrativeCenter(x) & FederalDistrict(x) & LargestArea(x)))", "(AdministrativeCenter(Vladivostok) & FederalDistrict(Vladivostok) & LargestArea(Vladivostok))", "all x y.((AdministrativeCenter(x) & FederalDistrict(y) & LargestArea(x,y)) -> Vladivostok(x))", "(AdministrativeCenter(Vladivostok) & LargestArea(Vladivostok))", "all x.(Vladivostok(x) -> (AdministrativeCenter(x) & LargestArea(x)))", "all x.(Vladivostok(x) -> (AdministrativeCenter(x) & FederalDistrict(x) & LargestArea(x)))", "all x y.((Vladivostok(x) & FederalDistrict(y)) -> (AdministrativeCenter(x,y) & LargestArea(x,y)))", "all x.((Vladivostok(x) & FederalDistrict(x) & LargestArea(x)) -> AdministrativeCenter(x))", "(AdministrativeCenter(Vladivostok,FederalDistrict) & LargestArea(Vladivostok))", "all x y.((AdministrativeCenter(x) & FederalDistrict(y) & LargestArea(x)) -> Vladivostok(x))", "all x y.((Vladivostok(x) & FederalDistrict(y) & LargestArea(x,y)) -> AdministrativeCenter(x,y))", "all x.((Vladivostok(x) & AdministrativeCenter(x) & FederalDistrict(x) & LargestArea(x)) -> AdministrativeCenter(x))", "(AdministrativeCenter(Vladivostok,FederalDistrict) & LargestArea(Vladivostok,FederalDistrict))", "all x y.((Vladivostok(x) & FederalDistrict(y)) -> (AdministrativeCenter(x,y) & LargestArea(x)))", "all x y.((AdministrativeCenter(x) & FederalDistrict(y) & LargestArea(y)) -> Vladivostok(x))"]}
{"id": "folio_train_2534", "nl": "Moscow is the administrative center of the federal district with the largest population.", "fol": "exists x.(IsAdministrativeCenterOf(Moscow,x) & HasLargestPopulationIn(x) & IsFederalDistrictOfRussia(x))", "prediction": ["all x.(Moscow(x) -> (AdministrativeCenter(x) & FederalDistrict(x) & LargestPopulation(x)))", "(AdministrativeCenter(Moscow) & FederalDistrict(Moscow) & LargestPopulation(Moscow))", "all x.((Moscow(x) & FederalDistrict(x) & LargestPopulation(x)) -> AdministrativeCenter(x))", "all x.(Moscow(x) -> (AdministrativeCenter(x) & FederalDistrict(x) & LargestPopulation(x)))", "all x.((AdministrativeCenter(x) & FederalDistrict(x) & LargestPopulation(x)) -> Moscow(x))", "all x y.((Moscow(x) & FederalDistrict(y) & LargestPopulation(x,y)) -> AdministrativeCenter(x,y))", "all x y.((Moscow(x) & FederalDistrict(y) & LargestPopulation(y)) -> AdministrativeCenter(x,y))", "all x.((Moscow(x) & AdministrativeCenter(x) & FederalDistrict(x) & LargestPopulation(x)) -> AdministrativeCenter(x))", "all x.(Moscow(x) -> (AdministrativeCenterOfFederalDistrict(x) & LargestPopulation(x)))", "all x.(Moscow(x) -> (AdministrativeCenter(x) & FederalDistrict(x) & LargestPopulation(x)))", "all x.((Moscow(x) & FederalDistrict(x) & LargestPopulation(x)) -> AdministrationCenter(x))", "all x.((Moscow(x) & AdministrativeCenter(x) & FederalDistrict(x) & LargestPopulation(x)) -> AdministrationCenter(x))", "All x.(Moscow(x) -> (AdministrativeCenter(x) & FederalDistrict(x) & LargestPopulation(x)))", "all x.((AdministrativeCenter(x) & FederalDistrict(x) & LargestPopulation(x)) -> Moskau(x))", "all x y.((Moscow(x) & FederalDistrict(y) & LargestPopulation(x)) -> AdministrativeCenter(x,y))", "all x.(Moscow(x) -> (AdministrativeCenter(x) & FederalDisturbance(x) & LargestPopulation(x)))"]}
{"id": "folio_train_2535", "nl": "The Northwestern federal district was established in 2000.", "fol": "WasEstablishedIn(Northwestern,2000)", "prediction": ["all x.(NorthwesternFederalDistrict(x) -> EstablishedIn2000(x))", "All x.(NorthwesternFederalDistrict(x) -> EstablishedIn2000(x))", "all x.(NorthwestFederalDistrict(x) -> EstablishedIn2000(x))", "all x.(NorthwesternFederalDistrict(x) -> EstablishedIn2000(x))", "all x.(NorthwesternFederalDistrict(x) -> EstablishedIn2000(x))", "Das NorthwesternFederalDistrict(n) & EstablishedIn2000(n))", "NorthwesternFederalDistrict(n) & EstablishedIn2000(n))", "Der NorthwesternFederalDistrict(n) & EstablishedIn2000(n))", "(NorthwesternFederalDistrict(n) & EstablishedIn2000(n))", "all x.(NorthwesternFederalDistrict(x) -> EstablishedIn(x,2000))", "Die NorthwesternFederalDistrict(n) & EstablishedIn2000(n))", "the NorthwesternFederalDistrict(n) & EstablishedIn2000(n))", "The NorthwesternFederalDistrict(n) & EstablishedIn2000(n))", "All x.(NorthwesternFederalDistrict(x) -> EstablishedIn(x,2000))", "Das NorthwesternFederalDistrict(n) -EstablishedIn2000(n))", "all x.(NorthwestFederalDistrict(x) -> EstablishedIn(x,2000))"]}
{"id": "folio_train_2536", "nl": "All cancers are malignant tumors.", "fol": "all x.(IsCancer(x) -> IsMalignantTumor(x))", "prediction": ["all x.(Cancer(x) -> MalignantTumor(x))", "all x.(Cancerous(x) -> MalignantTumor(x))", "all x.(Cancer(x) -> MalignantTumour(x))", "all x.(Cancer(x) -> MalignantToxic(x))", "all x y.((Cancer(x) & Tumor(y)) -> Malignant(x,y))", "all x y.((Cancer(x) & Cancer(y)) -> MalignantTumor(x,y))", "all x.(Cancer(x) -> MalignantTumor(x))", "all x y.((Cancer(x) & Cancer(y)) -> MalignantTumor(x))", "all x y.((Cancer(x) & MalignantTumor(y)) -> Malignant(x,y))", "all x y.((Cancer(x) & Tumor(y)) -> Malignant(x))", "all x y.((Cancer(x) & MalignantTumor(y)) -> Malignant(x))", "all x y.((Cancer(x) & MalignantTumor(y)) -> Cancer(x))", "all x.(Cancer(x) -> (MalignantTumor(x) & MalignantTumor(x)))", "(all x.(Cancer(x) -> MalignantTumor(x)))", "all x.(Cancer(x) -> (MalignantTumor(x) | MalignantTumor(x)))", "all x.(Cancer(x) -> MalignantToxicTumor(x))"]}
{"id": "folio_train_2537", "nl": "No malignant tumor can be treated at home.", "fol": "all x.(IsMalignantTumor(x) -> -CanTreatAtHome(x))", "prediction": ["-exists x.(MalignantTumor(x) & TreatableAtHome(x))", "all x.((MalignantTumor(x) & -CanBeTreatedAtHome(x)) -> -CanBeTreatedAtHome(x))", "-exists x.(MalignantTumor(x) & CanBeTreatedAtHome(x))", "-exists x.(MalignantTumor(x) & -CanBeTreatedAtHome(x))", "all x.(MalignantTumor(x) -> -CanBeTreatedAtHome(x))", "-exists x.(MalignantTumor(x) & CannotBeTreatedAtHome(x))", "-exists x.(MalignantTumor(x) & TreatedAtHome(x))", "-exists x.(MalignantTumor(x) & TreatmentAtHome(x))", "all x.((MalignantTumor(x) & -TreatAtHome(x)) -> -TreatAtHome(x))", "-exists x.(MalignantTumor(x) & -TreatableAtHome(x))", "-exists x.(MalignantTumor(x) & -TreatAtHome(x))", "all x.((MalignantTumor(x) & -TreatAtHome(x)) -> -CanBeTreatedAtHome(x))", "-exists x.(MalignantTumor(x) & TreatsAtHome(x))", "-exists x.(MalignantTumor(x) & CanTreatAtHome(x))", "all x.(MalignantTumor(x) -> -TreatAtHome(x))", "-exists x.(MalignantTumor(x) & HomeTreatment(x))"]}
{"id": "folio_train_2538", "nl": "All colorectal cancer is cancer.", "fol": "all x.(IsColorectalCancer(x) -> IsCancer(x))", "prediction": ["all x.(ColoredCancer(x) -> Cancer(x))", "all x.(ColorectalCancer(x) -> Cancer(x))", "all x.(ColoredCancel(x) -> Cancer(x))", "all x.(ColoredCancerous(x) -> Cancer(x))", "all x.(ColoquectalCancer(x) -> Cancer(x))", "all x.(ColonialCancer(x) -> Cancer(x))", "all x.(ColoradolCancer(x) -> Cancer(x))", "all x.(ColorealCancer(x) -> Cancer(x))", "all x.(ColorectalCancerous(x) -> Cancer(x))", "all x.(ColocatectalCancer(x) -> Cancer(x))", "all x.(Cancerous(x) -> Cancer(x))", "all x.(ColorectalCancer(x) -> Cancer(x))", "all x.(ColodontalCancer(x) -> Cancer(x))", "all x.(ColorectalCancer(x) -> Cancer(x))", "all x.(ColoredCancer(x) -> Cancer(x))", "all x.(Cancel(x) -> Cancer(x))"]}
{"id": "folio_train_2539", "nl": "Having a cold can be treated at home.", "fol": "all x.(HasCold(x) -> CanTreatAtHome(x))", "prediction": ["all x.(Cold(x) -> TreatableAtHome(x))", "all x.(Cold(x) -> CanBeTreatedAtHome(x))", "all x.((Cold(x) & TreatableAtHome(x)) -> CanBeTreatedAtHome(x))", "all x.((Cold(x) & CanBeTreatedAtHome(x)) -> CanBeTreatedAtHome(x))", "all x.((HasCold(x) & TreatableAtHome(x)) -> CanBeTreatedAtHome(x))", "all x.((Cold(x) & TreatableAtHome(x)) -> CanBeTreated(x))", "all x y.((Cold(x) & Home(y)) -> TreatableAt(x,y))", "all x.(HasCold(x) -> TreatableAtHome(x))", "all x y.((Cold(x) & Home(y)) -> TreatableAtHome(x,y))", "all x.((Cold(x) & TreatedAtHome(x)) -> CanBeTreatedAtHome(x))", "all x.((Cold(x) & CanBeTreatedAtHome(x)) -> TreatableAtHome(x))", "all x y.((Cold(x) & Home(y)) -> CanBeTreatedAt(x,y))", "all x.(HasCold(x) -> CanBeTreatedAtHome(x))", "all x.((Cold(x) & TreatableAtHome(x)) -> CanBeTreatableAtHome(x))", "all x.((Cold(x) & TreatableAtHome(x)) -> CanBe(x))", "all x.((Cold(x) & TreatableAtHome(x)) -> ColdCanBeTreatedAtHome(x))"]}
{"id": "folio_train_2540", "nl": "Breast cancer is neither having a cold nor a malignant tumor (exclusive).", "fol": "-((HasCold(BreastCancer) & -IsMalignantTumor(BreastCancer)) | (-HasCold(BreastCancer) & IsMalignantTumor(BreastCancer)))", "prediction": ["all x.(BreastCancer(x) -> (-HasCold(x) & -HasMalignantTumor(x)))", "all x.((BreastCancer(x) & -(Cold(x) | MalignantTumor(x))) -> -(Cold(x) & MalignantTumor(x))))", "all x.((BreastCancer(x) & -(Cold(x) | MalignantTumor(x))) -> -(Cold(x) & Malignant(x))))", "all x.(BreastCancer(x) -> (-Cold(x) & -MalignantTumor(x)))", "all x.((BreastCancer(x) & -(Cold(x) | MalignantTumor(x))) -> -(Cold(x) | MalignantTumor(x))))", "all x.((BreastCancer(x) & -(Cold(x) | MalignantTumor(x))) -> -(Cold(x) & MalignantTumor(x)))", "all x.((BreastCancer(x) & -Cold(x) & -MalignantTumor(x)) -> -(Cold(x) & MalignantTumor(x)))", "all x.((BreastCancer(x) & -(Cold(x) | MalignantTumor(x)))) -> -(Cold(x) & MalignantTumor(x)))", "all x.(BreakCancerous(x) -> (-HasCold(x) & -HasMalignantTumor(x)))", "all x.((BreastCancer(x) & -Cold(x) & -MalignantTumor(x)) -> -(Cold(x) & MalignantTumor(x))))", "all x.((BreastCancer(x) & -(Cold(x) | MalignantTumor(x))) -> -(Cold(x) & Malignant(x)))", "all x.(BreastCancer(x) -> (-Cold(x) | MalignantTumor(x)))", "all x.((BreastCancer(x) & -Cold(x) & -MalignantTumor(x)) -> -Exclusive(x))", "all x.((BreastCancer(x) & -Cold(x) & -MalignantTumor(x)) -> -(Cold(x) | MalignantTumor(x))))", "all x.(BreastCancer(x) -> (-HasCold(x) | HasMalignantTumor(x)))", "all x.(BreastCancer(x) -> (NoCold(x) & -MalignantTumor(x)))"]}
{"id": "folio_train_2541", "nl": "Breast cancer can be treated at home.", "fol": "CanTreatAtHome(BreastCancer)", "prediction": ["all x.(BreastCancer(x) -> CanBeTreatedAtHome(x))", "all x.(BreakCancerous(x) -> CanBeTreatedAtHome(x))", "all x.(BreastCancer(x) -> TreatableAtHome(x))", "all x y.((BreastCancer(x) & Home(y)) -> CanBeTreated(x,y))", "all x.(BertilCancer(x) -> CanBeTreatedAtHome(x))", "all x y.((BreastCancer(x) & Home(y)) -> Treatable(x,y))", "all x.(BreakCancerous(x) -> TreatableAtHome(x))", "all x y.((BreakCancerous(x) & Home(y)) -> CanBeTreated(x,y))", "all x.(BreastCancerous(x) -> CanBeTreatedAtHome(x))", "all x.(BertilizedCancer(x) -> CanBeTreatedAtHome(x))", "all x y.((BreastCancer(x) & Home(y)) -> CanBeTreatedAt(x,y))", "all x.(BreakCancer(x) -> CanBeTreatedAtHome(x))", "all x.(BreastCancer(x) -> TreatmentAtHome(x))", "all x y.((BreastCancer(x) & Home(y)) -> CanTreat(x,y))", "all x y.((BreakCancerous(x) & Home(y)) -> Treatable(x,y))", "all x y.((BreakCancerous(x) & Home(y)) -> CanBeTreatedAt(x,y))"]}
{"id": "folio_train_2542", "nl": "Breast cancer is colorectal cancer.", "fol": "IsColorectalCancer(BreastCancer)", "prediction": ["all x.(BreastCancer(x) -> ColorectalCancer(x))", "all x.(BreakCancel(x) -> ColorectalCancer(x))", "all x.(BertilizedCancer(x) -> ColorectalCancer(x))", "all x.((BreastCancer(x) & ColorectalCancer(x)) -> Cancer(x))", "all x y.((BreastCancer(x) & ColorectalCancer(y)) -> Cancer(x,y))", "all x y.((BreastCancer(x) & ColorectalCancer(y)) -> BreastCancer(x,y))", "all x.((BreastCancer(x) & ColorectalCancer(x)) -> BreastCancer(x))", "all x.(BreastCancer(x) -> ColorectalCancer(x))", "all x.(BreakCancerous(x) -> ColorectalCancer(x))", "all x y.((BreastCancer(x) & ColorectalCancer(y)) -> Cancer(x))", "all x.(Break(x) -> ColorectalCancer(x))", "all x y.((BreastCancer(x) & ColorectalCancer(y)) -> BreastCancer(x))", "all x.(BerryCancer(x) -> ColorectalCancer(x))", "all x.(BreakCancer(x) -> ColorectalCancer(x))", "all x.(BreakCancel(x) -> ColorectalCancel(x))", "all x y.((BreastCancer(x) & ColorectalCancer(y)) -> Is(x,y))"]}
{"id": "folio_train_2543", "nl": "Breast cancer is not colorectal cancer.", "fol": "-IsColorectalCancer(BreastCancer)", "prediction": ["all x.(BreastCancer(x) -> -ColorectalCancer(x))", "all x.(BreakCancel(x) -> -ColorectalCancer(x))", "all x.((BreastCancer(x) & -ColorectalCancer(x)) -> -ColorectalCancer(x))", "all x.(BreakCancerous(x) -> -ColorectalCancer(x))", "all x.(BertilCancer(x) -> -ColorectalCancer(x))", "all x y.((BreastCancer(x) & ColorectalCancer(y)) -> -ColorectalCancer(x,y))", "all x y.((BreastCancer(x) & ColorectalCancer(y)) -> -ColorectalCancer(x))", "all x.(BreakCancer(x) -> -ColorectalCancer(x))", "all x.(BreakCancel(x) -> -ColorectalCancel(x))", "all x.(BreakCancerous(x) -> -ColorectalCancerous(x))", "(all x.(BreastCancer(x) -> -ColorectalCancer(x)))", "all x.((BreastCancer(x) & -ColorectalCancer(x)) -> -Cancer(x))", "all x.(BertilCancerous(x) -> -ColorectalCancer(x))", "all x.(BreastCancer(x) -> -ColonialCancer(x))", "exists x.(BreastCancer(x) & -ColorectalCancer(x))", "all x.(BertilizedCancer(x) -> -ColorectalCancer(x))"]}
{"id": "folio_train_2544", "nl": "Breast cancer is colorectal cancer or a malignant tumor.", "fol": "(IsColorectalCancer(BreastCancer) | IsMalignantTumor(BreastCancer))", "prediction": ["all x.(BreastCancer(x) -> (ColorectalCancer(x) | MalignantTumor(x)))", "all x.(BreakCancerous(x) -> (ColorectalCancer(x) | MalignantTumor(x)))", "all x.(BertilizedCancer(x) -> (ColorectalCancer(x) | MalignantTumor(x)))", "all x.(BreastCancer(x) -> (ColoredCancerous(x) | MalignantTumor(x)))", "all x.(BreastCancer(x) -> (ColorectalCancer(x) | MalignantTumor(x)))", "all x.(BreastCancer(x) -> (ColoredCancer(x) | MalignantTumor(x)))", "all x.(BeralCancer(x) -> (ColorectalCancer(x) | MalignantTumor(x)))", "all x.(BreastCancer(x) -> (ColorectalCancerous(x) | MalignantTumor(x)))", "all x.(BernCancerous(x) -> (ColorectalCancer(x) | MalignantTumor(x)))", "all x.(BreakCancerous(x) -> (ColoredCancerous(x) | MalignantTumor(x)))", "all x.(BreakCancerous(x) -> (ColorectalCancerous(x) | MalignantTumor(x)))", "all x.(BerryCancer(x) -> (ColorectalCancer(x) | MalignantTumor(x)))", "all x.(Bertilizer(x) -> (ColorectalCancer(x) | MalignantTumor(x)))", "all x.(BreakCancerous(x) -> (ColoredCancer(x) | MalignantTumor(x)))", "all x.(BreakCancer(x) -> (ColorectalCancer(x) | MalignantTumor(x)))", "all x.(Bern cancer(x) -> (ColorectalCancer(x) | MalignantTumor(x)))"]}
{"id": "folio_train_2545", "nl": "Breast cancer is colorectal cancer and a cancer.", "fol": "(IsColorectalCancer(BreastCancer) & IsCancer(BreastCancer))", "prediction": ["all x.(BreastCancer(x) -> (ColorectalCancer(x) & Cancer(x)))", "all x.(BreastCancer(x) -> (ColoredCancer(x) & Cancer(x)))", "all x.(BreakCancel(x) -> (ColorectalCancer(x) & Cancer(x)))", "all x.(BreakCancerous(x) -> (ColorectalCancer(x) & Cancer(x)))", "all x.(BertilizedCancer(x) -> (ColorectalCancer(x) & Cancer(x)))", "all x.(BreastCancer(x) -> (ColorectalCancer(x) & Cancer(x)))", "all x.(BreastCancer(x) -> (ColonialCancer(x) & Cancer(x)))", "all x.(BreastCancer(x) -> (ColoredCancerous(x) & Cancer(x)))", "all x.(BreakCancel(x) -> (ColoredCancer(x) & Cancer(x)))", "all x y.((BreastCancer(x) & ColorectalCancer(y)) -> Cancer(x))", "all x.(BreastCancer(x) -> (ColoredCancel(x) & Cancer(x)))", "all x.(BreastCancer(x) -> (ColomegatalCancer(x) & Cancer(x)))", "all x.((BreastCancer(x) & ColorectalCancer(x)) -> Cancer(x))", "all x.(BerryCancer(x) -> (ColorectalCancer(x) & Cancer(x)))", "all x.(BreakCancerous(x) -> (ColoredCancer(x) & Cancer(x)))", "all x.(BreastCancer(x) -> (ColoredCancer(x) & Cancer(x)))"]}
{"id": "folio_train_2546", "nl": "If breast cancer is not colorectal cancer, then breast cancer is a malignant tumor.", "fol": "(-IsColorectalCancer(BreastCancer) -> IsMalignantTumor(BreastCancer))", "prediction": ["all x.((BreastCancer(x) & -ColorectalCancer(x)) -> MalignantTumor(x))", "all x.((BreastCancer(x) & -ColoredCancer(x)) -> MalignantTumor(x))", "all x.((BreakCancerous(x) & -ColorectalCancer(x)) -> MalignantTumor(x))", "all x.((BreakCancer(x) & -ColorectalCancer(x)) -> MalignantTumor(x))", "all x.((BreakCancerous(x) & -ColoredCancer(x)) -> MalignantTumor(x))", "all x.((BreakCancerous(x) & -ColorectalCancerous(x)) -> MalignantTumor(x))", "all x.((BreathCancer(x) & -ColorectalCancer(x)) -> MalignantTumor(x))", "all x.((BreastCancer(x) & -ColoredCancerous(x)) -> MalignantTumor(x))", "all x.((BreastCancer(x) & -ColonialCancer(x)) -> MalignantTumor(x))", "all x.((BreastCancerous(x) & -ColorectalCancer(x)) -> MalignantTumor(x))", "all x.((BreakCancel(x) & -ColorectalCancer(x)) -> MalignantTumor(x))", "all x.((BertilizedCancer(x) & -ColorectalCancer(x)) -> MalignantTumor(x))", "all x.((BreastCancer(x) & -ColorectalCancer(x)) -> MalignantTumour(x))", "all x.((BreathCancerous(x) & -ColorectalCancer(x)) -> MalignantTumor(x))", "all x.((BreakCancer(x) & -ColoredCancer(x)) -> MalignantTumor(x))", "all x.((BreakCancerous(x) & -ColoredCancerous(x)) -> MalignantTumor(x))"]}
{"id": "folio_train_2547", "nl": "I should not worry about things outside of my control.", "fol": "all x.(IsOutsideOfControl(x) -> -ShouldNotWorry(x))", "prediction": ["all x.((IsOutsideControl(x) & -IsOutsideControl(x)) -> -IsControl(x))", "all x.((IsOutsideControl(x) & -IsOutsideControl(x)) -> -(IsOutsideControl(x) & -IsOutsideControl(x)))", "all x.((IsOutsideControl(x) & -IsOutsideControl(x)) -> -IsControlLocation(x))", "all x.((IsOutsideControl(x) & -IsOutsideControl(x)) -> -IsControlOutside(x))", "all x.((IsOutsideControl(x) & -IsOutsideControl(x)) -> -(IsOutsideControl(x) & -IsControl(x)))", "all x.((IsOutsideControl(x) & -IsOutsideControl(x)) -> -IsOutsideControl(x))", "all x.((IsOutsideControl(x) & -WorryAbout(x)) -> -WorryAbout(x))", "all x.((Movement(x) & -OutsideControl(x)) -> -Movement(x))", "all x.((IsOutsideControl(x) & -IsOutsideControl(x)) -> -(IsOutsideControl(x) & -IsOutsideControl(x))))", "all x.((Movement(x) & -OutsideControl(x)) -> -Worry(x))", "all x.((IsOutsideControl(x) & -IsOutsideControl(x)) -> -(IsOutsideControl(x) & -IsControlled(x)))", "all x.((Mom(x) & OutsideControl(x)) -> -Worry(x))", "all x.((IsOutsideControl(x) & -IsOutsideControl(x)) -> -(IsOutsideControl(x) & -IsControl(x))))", "all x.((Movement(x) & OutsideOfControl(x)) -> -Worry(x))", "all x.((IsOutsideControl(x) & -WorriedAbout(x)) -> -WorriedAbout(x))", "all x.((IsOutsideControl(x) & -Worry(x)) -> -Worry(x))"]}
{"id": "folio_train_2548", "nl": "Traffic is outside of my control.", "fol": "all x.(IsTraffic(x) -> IsOutsideOfControl(x))", "prediction": ["all x.(Traffic(x) -> OutsideOfControl(x))", "all x y.((Traffic(x) & Control(y)) -> OutsideOfControl(x,y))", "all x.(Traffic(x) -> OutOfControl(x))", "all x y.((Traffic(x) & Control(y)) -> OutsideOf(x,y))", "all x.(Traffic(x) -> OutsideMyControl(x))", "all x y.((Traffic(x) & Traffic(y)) -> OutsideOfControl(x,y))", "all x y.((Traffic(x) & Control(y)) -> Outside(x,y))", "all x.(Traffic(x) -> -Control(x))", "all x y.((Traffic(x) & IControl(y)) -> OutsideOfControl(x,y))", "all x.(Traffic(x) -> -Containment(x))", "all x.(Traffic(x) -> -InControl(x))", "all x.(Traffic(x) -> OutsideOfControl(x))", "all x.(Traffic(x) -> OutsideOfControl(x))", "all x.(Traffic(x) -> -MyControl(x))", "all x y.((Traffic(x) & Control(y)) -> OutOfControl(x,y))", "all x y.((Traffic(x) & Control(y)) -> OutsideContainment(x,y))"]}
{"id": "folio_train_2549", "nl": "I should not worry about traffic.", "fol": "all x.(IsTraffic(x) -> -ShouldNotWorry(x))", "prediction": ["all x.((Traffic(x) & -Traffic(x)) -> -(Traffic(x) & -Traffic(x)))", "all x.((Traffic(x) & -Traffic(x)) -> -Traffic(x))", "all x.((Traffic(x) & -Traffic(x)) -> -(Traffic(x) & -Traffic(x))))", "all x.((Traffic(x) & -Traffic(x)) -> -Problem(x))", "all x.(Traffic(x) -> -Worry(x))", "all x.((Traffic(x) & -Traffic(x)) -> -Buys(x))", "all x.((Traffic(x) & -Traffic(x)) -> -Worry(x))", "all x.((Traffic(x) & -Traffic(x)) -> -(Traffic(x) | Traffic(x))))", "all x.(Traffic(x) -> -Breaking(x))", "all x.(Traffic(x) -> -Problem(x))", "all x.((Traffic(x) & -Traffic(x)) -> -Problems(x))", "all x.((Traffic(x) & -Traffic(x)) -> -Breaking(x))", "all x.(Traffic(x) -> -WorriedAbout(x,Traffic))", "all x.(Traffic(x) -> -WorryAbout(x,Traffic))", "all x.((Traffic(x) & -Traffic(x)) -> -(Traffic(x) & Traffic(x)))", "all x.((Traffic(x) & -Traffic(x)) -> -Sorry(x))"]}
{"id": "folio_train_2550", "nl": "Roversi is an Italian surname.", "fol": "all x.(UsesSurname(x,Roversi) -> IsItalianSurname(x))", "prediction": ["(ItalianSurname(Roversi) & ItalianSurname(Roversi))", "(ItalianSurname(roversi) & ItalianSurname(roversi))", "(ItalianSurname(Rogersi) & ItalianSurname(Rogersi))", "all x.(Roversi(x) -> ItalianSurname(x))", "(ItalianSurname(Rossi) & ItalianSurname(Rossi))", "(ItalianSurname(Rotorsi) & ItalianSurname(Rotorsi))", "(ItalianSurname(Rosensi) & ItalianSurname(Rosensi))", "all x.(Rossi(x) -> ItalianSurname(x))", "(ItalianSurname(Rosersi) & ItalianSurname(Rosersi))", "all x.(Rogersi(x) -> ItalianSurname(x))", "(ItalianSurname(Roversi) & Surname(Roversi))", "Roversi (ItalianSurname)", "(ItalianSurname(r Roversi) & ItalianSurname(r Roversi))", "(ItalianSurname(Rogersi) & Surname(Rogersi))", "(ItalianSurname(Roversi) | ItalianSurname(Roversi))", "exists x.(Roversi(x) & ItalianSurname(x))"]}
{"id": "folio_train_2551", "nl": "Alba Roversi uses Roversi as a surname.", "fol": "UsesSurname(Alba,Roversi)", "prediction": ["all x.(AlbaRoversi(x) -> UsesRoversiAsSurname(x))", "all x y.((AlbaRoversi(x) & Roversi(y)) -> UsesAsSurname(x,y))", "all x y z.((AlbaRoversi(x) & Roversi(y) & Surname(z)) -> Uses(x,y,z))", "all x.(AlbaRoversi(x) -> UsesRoversi(x))", "all x.((AlbaRoversi(x) & UsesRoversi(x)) -> Surname(x))", "all x y z.((AlbaRoversi(x) & Roversi(y) & Surname(z)) -> UsesAs(x,y,z))", "all x.(AlbaRotorsi(x) -> UsesRotorsiAsSurname(x))", "all x y.((AlbaRoversi(x) & Roversi(y)) -> Uses(x,y))", "all x y.((Alba(x) & Roversi(y)) -> UsesAsSurname(x,y))", "all x.(AlbaRosersi(x) -> UsesRosersiAsSurname(x))", "all x y.((AlbaRoversi(x) & Roversi(y)) -> UsedAsSurname(x,y))", "all x y z.((AlbaRoversi(x) & Roversi(y) & Surname(z)) -> Uses(x,y))", "all x y.((AlbaRoversi(x) & Roversi(y)) -> UsesSurname(x,y))", "all x.((AlbaRoversi(x) & UsesRoversiAsSurname(x)) -> UsesRoversiAsSurname(x))", "all x.(AlbaRogersi(x) -> UsesRogersiAsSurname(x))", "all x.(AlbaRossi(x) -> UsesRossiAsSurname(x))"]}
{"id": "folio_train_2552", "nl": "Paolo Roversi uses Roversi as a surname.", "fol": "UsesSurname(Paolo,Roversi)", "prediction": ["all x y.((PaoloRoversi(x) & Roversi(y)) -> UsesAsSurname(x,y))", "all x.(Rossi(x) -> UsesRossiAsSurname(x))", "all x y.((Rossi(x) & Roversi(y)) -> UsesAsSurname(x,y))", "all x.((PaoloRoversi(x) & UsesRoversiAsSurname(x)) -> UsesRoversiAsSurname(x))", "all x.((PaoloRoversi(x) & UsesRoversi(x)) -> Surname(x))", "all x.(Rogersi(x) -> UsesRogersiAsSurname(x))", "all x.((PaoloRoversi(x) & Roversi(x)) -> Surname(x))", "all x.((PaoloRoversi(x) & Roversi(x)) -> UsesAsSurname(x))", "all x.(Rosensi(x) -> UsesRosensiAsSurname(x))", "all x y.((PaoloRoversi(x) & Roversi(y)) -> UsesSurname(x,y))", "all x y.((PaoloRoversi(x) & Roversi(y)) -> UsedAsSurname(x,y))", "all x.((Rossi(x) & Roversi(x)) -> UsesAsSurname(x))", "all x y.((PaoloRoversi(x) & Roversi(y)) -> Surname(x,y))", "all x.(Roversi(x) -> UsesRoversiAsSurname(x))", "all x.((Rossi(x) & Roversi(x)) -> UsesAsSurname(x,Rossi))", "all x.((PaoloRoversi(x) & Roversi(x)) -> UsesAsSurname(x,Roversi))"]}
{"id": "folio_train_2553", "nl": "Roberto Roversi uses Roversi as a surname.", "fol": "UsesSurname(Roberto,Roversi)", "prediction": ["all x y.((RobertoRoversi(x) & Roversi(y)) -> UsesAsSurname(x,y))", "all x y.((RobertoRoversi(x) & Roversi(y)) -> UsesAsSurname(x,y))", "all x.(Rogersi(x) -> UsesRogersiAsSurname(x))", "all x y.((RobertoRossi(x) & Roversi(y)) -> UsesAsSurname(x,y))", "all x y.((RobertoRogersi(x) & Roversi(y)) -> UsesAsSurname(x,y))", "all x.(RobertoRoversi(x) -> UsesRoversiAsSurname(x))", "all x y z.((RobertoRoversi(x) & Roversi(y) & Surname(z)) -> Uses(x,y,z))", "all x y z.((RobertoRoversi(x) & Roversi(y) & Surname(z)) -> UsesAs(x,y,z))", "all x.(RobertoRoversi(x) -> UsesRoversiAsSurname(x))", "all x.((RobertoRoversi(x) & UsesRoversiAsSurname(x)) -> UsesRoversiAsSurname(x))", "all x.(RobertoRossi(x) -> UsesRossiAsSurname(x))", "all x.((RobertoRoversi(x) & UsesRoversi(x)) -> Surname(x))", "all x y.((RobertoRoversi(x) & Roversi(y)) -> UsesSurname(x,y))", "all x y z.((RobertoRoversi(x) & Roversi(y) & Surname(z)) -> Uses(x,y))", "all x y.((RobertoRoversi(x) & Roversi(y)) -> UsedAsSurname(x,y))", "all x.(Rossi(x) -> UsesRossiAsSurname(x))"]}
{"id": "folio_train_2554", "nl": "Paolo Roversi is a photographer.", "fol": "IsPhotographer(Paolo)", "prediction": ["Paolo Roversi (Photographer)", "Paolo Roversi is a photographer.", "all x.(Photographer(x) -> PaoloRoversi(x))", "all x.((Photographer(x) & PaoloRoversi(x)) -> Photographer(x))", "Paolo Roversi is a Photographer.", "all x.((Photographer(x) & PaoloRottersi(x)) -> Photographer(x))", "all x.((Photographer(x) & PaoloRogersi(x)) -> Photographer(x))", "all x.(Photographer(x) -> PaoloRottersi(x))", "Paolo Roversi is photographer.", "all x.((Photographer(x) & PaoloRossi(x)) -> Photographer(x))", "(Photographer(PaoloRossi) & Photographer(PaoloRossi))", "(Photographer(PaoloRoversi) & Photographer(PaoloRoversi))", "(Photographer(PopoloRoversi) & Photographer(PopoloRoversi))", "all x.(Photographer(x) -> PaoloRogersi(x))", "all x.(Photographer(x) -> PaoloRottesi(x))", "all x.(Photographer(x) -> PaoloRossi(x))"]}
{"id": "folio_train_2555", "nl": "A photographer is a professional or an amateur.", "fol": "all x.((IsPhotographer(x) -> IsProfessional(x)) | IsAmateur(x))", "prediction": ["all x.(Photographer(x) -> (Professional(x) | Amateur(x)))", "exists x.(Photographer(x) & (Professional(x) | Amateur(x)))", "all x.(Photographer(x) -> (Professional(x) | Amateur(x)))", "all x.(Photographer(x) -> ((Professional(x) | Amateur(x))))", "all x.(Photographer(x) -> (Proffessional(x) | Amateur(x)))", "all x.(Photographer(x) & (Professional(x) | Amateur(x)))", "exists x.(Photographer(x) & ((Professional(x) | Amateur(x))) -> Photographer(x)))", "all x y.((Photographer(x) & Professional(y)) | Amateur(y))", "all x y.((Photographer(x) & Professional(x)) | Amateur(y))", "all x.(Painter(x) -> (Professional(x) | Amateur(x)))", "exists x.(Photographer(x) & (Proffessional(x) | Amateur(x)))", "all x y.((Photographer(x) & Professional(y)) | Amateur(x))", "all x y.((Photographer(x) & Professional(x)) | Amateur(x))", "exists x.(Photographer(x) & ((Professional(x) | Amateur(x))))", "all x y.((Photographer(x) & Professional(x)) | Amateur(y)) -> Photographer(x))", "all x y.((Photographer(x) & Professional(y)) | Amateur(y)) -> Photographer(x))"]}
{"id": "folio_train_2556", "nl": "Alba Roversi uses an Italian surname.", "fol": "IsItalianSurname(Alba)", "prediction": ["all x.(AlbaRoversi(x) -> UsesItalianSurname(x))", "all x y.((AlbaRoversi(x) & ItalianSurname(y)) -> Uses(x,y))", "all x.(AlbaRottersi(x) -> UsesItalianSurname(x))", "all x.(AlbaRossi(x) -> UsesItalianSurname(x))", "all x.(AlbaRosersi(x) -> UsesItalianSurname(x))", "all x.(AlbaRogersi(x) -> UsesItalianSurname(x))", "all x y z.((AlbaRoversi(x) & ItalianSurname(y) & ItalianSurname(z)) -> Uses(x,y,z))", "all x.(AlbaRotorsi(x) -> UsesItalianSurname(x))", "all x.(AlbaRorrisi(x) -> UsesItalianSurname(x))", "all x.(AlbaRosersi(x) -> UsesItalianSurname(x))", "all x y z.((AlbaRoversi(x) & ItalianSurname(y) & ItalianSurname(z)) -> Uses(x,y))", "all x.(AlbaRoversi(x) -> UsesItalianSurname(x))", "All x.(AlbaRoversi(x) -> UsesItalianSurname(x))", "all x.(AlbanRoversi(x) -> UsesItalianSurname(x))", "all x y.((AlbaRoversi(x) & ItalianSurname(y)) -> UsedBy(x,y))", "all x y z.((AlbaRoversi(x) & ItalianSurname(y) & Uses(x,y)) -> Uses(x,z))"]}
{"id": "folio_train_2557", "nl": "There are no photographers using an Italian surname.", "fol": "-exists x.(IsPhotographer(x) & IsItalianSurname(x))", "prediction": ["-exists x.(Photographer(x) & UsesItalianSurname(x))", "(-exists x.(Photographer(x) & UsesItalianSurname(x)))", "exists x.(Photographer(x) & UsesItalianSurname(x))", "exists x.(Photographer(x) & -UsesItalianSurname(x))", "all x.((Photographer(x) & UsesItalianSurname(x)) -> -exists y.(ItalianSurname(y) & UsesItalianSurname(x,y)))", "all x.((Photographer(x) & UsesItalianSurname(x)) -> -UsesItalianSurname(x))", "all x.((Photographer(x) & UsesItalianSurname(x)) -> -exists y.(ItalianSurname(y) & UsesItalianSurname(x,y))))", "all x.((Photographer(x) & UsesItalianSurname(x)) -> -exists y.(ItalianSurname(y) & UsesItalianSurname(x)))", "all x.((Photographer(x) & UsesItalianSurname(x)) -> - exists y.(ItalianSurname(y) & UsesItalianSurname(x,y))))", "(-exists x.(Photographer(x) & UsesItalianSurname(x)) & -exists y.(Photographer(y) & UsesItalianSurname(y))))", "-exists x.(Photographer(x) & ItalianSurname(x))", "all x.((Photographer(x) & UsesItalianSurname(x)) -> - exists y.(ItalianSurname(y) & UsesItalianSurname(x,y)))", "all x.((Photographer(x) & UsesItalianSurname(x)) -> -(UsesItalianSurname(x) & UsesItalianSurname(x)))", "-exists x.(Photographer(x) & UsesItalianName(x))", "all x.((Photographer(x) & UsesItalianSurname(x)) -> -exists y.(ItalianSurname(y) & UsesItalianSurname(x))))", "-exists x.(Photographer(x) & UsesSurname(x,Italian))"]}
{"id": "folio_train_2558", "nl": "Paolo is an amateur photographer.", "fol": "(IsAmateur(Paolo) & IsPhotographer(Paolo))", "prediction": ["Paolo is amateurPhotographer.", "Paolo ist AmateurPhotographer(Paolo)", "Paolo is amateurPhotographer(Paolo)", "Paolo is amateurphotographer.", "Paolo ist ein AmateurPhotographer(Paolo)", "Paolo ist AmateurPhotographer.", "(AmateurPhotographer(Paolo)", "Paolo istAmateurPhotographer(Paolo)", "(AmateurPhotographer(Paolo))", "Paolo (AmateurPhotographer)", "Paolo ist ein AmateurPhotographer.", "Paolo ist AmateurPhotographer(Posado)", "Paolo is amateurPhotographer(Posado)", "Paolo ist AmateurPhotographer(Paulo)", "Paolo ist einAmateurPhotographer(Paolo)", "Paolo ist ein AmateurPhotographer(Posado)"]}
{"id": "folio_train_2559", "nl": "Zaha Hadid is a British-Iraqi architect, artist and designer.", "fol": "(IsBritish(ZahaHadid) & IsIraqi(Zahahadid) & IsArchitect(ZahaHadid))", "prediction": ["(BritishIraqiArchitect(ZahaHadid) & BritishIraqiArtist(ZahaHadid) & Designer(ZahaHadid))", "all x.(ZahaHadid(x) -> (BritishIraqiArchitect(x) & BritishIraqiArtist(x) & BritishIraqiDesigner(x)))", "all x.((BritishIraqiArchitect(x) & BritishIraqiArtist(x) & BritishIraqiDesigner(x)) -> ZahaHadid(x))", "(BritishIraqiArchitect(ZahaHadid) & BritishIraqiArtist(ZahaHadid) & BritishIraqiDesigner(ZahaHadid))", "all x.((BritishIraqiArchitect(x) & BritishIraqiArtist(x) & Designer(x)) -> ZahaHadid(x))", "all x.(ZahaHadid(x) -> (Architect(x) & BritishIraqi(x) & Artist(x) & Designer(x)))", "all x.((Architect(x) & BritishIraqi(x) & Artist(x) & Designer(x)) -> ZahaHadid(x))", "(BritishIraqiArchitect(ZahaHadid) & BritishIraqiArtist(ZahaHadid) & Architect(ZahaHadid))", "(Architect(ZahaHadid) & BritishIraqi(ZahaHadid) & Artist(ZahaHadid) & Designer(ZahaHadid))", "(BritishIraqiArchitect(ZahaHadid) & BritishIraqiArtistAndDesigner(ZahaHadid)", "(IraqiArchitect(ZahaHadid) & BritishIraqiArchitect(ZahaHadid) & Artist(ZahaHadid) & Designer(ZahaHadid))", "(BritishIraqiArchitect(ZahaHadid) & BritishIraqiArtist(Zaha) & Designer(ZahaHadid))", "(BritishIraqiArchitect(ZahaHadid) & BritishIraqiArtistAndDesigner(ZahaHadid))", "(BritishIraqiArchitect(ZahaHadid) & BritishIraqiArtist(ZahaHadid) & Designer(ZahaHadid))", "all x.(ZahaHadid(x) -> (BritishIraqiArchitect(x) & BritishIraqiArtist(x) & Designer(x)))", "(BritishIraqiArchitect(ZahaHadid) & BritishIraqiArtist(ZahaHadid) & Designer(ZazaHadid))"]}
{"id": "folio_train_2560", "nl": "Zaha Hadid was born on 31 October 1950 in Baghdad, Iraq.", "fol": "BornInLocation(ZahaHadid,Iraq,Y1950)", "prediction": ["(Birth(ZahaHadid,31) & BornInBaghdad(ZahaHadid,31) & BornInIraq(ZahaHadid,31))", "Zaha Hadid was born on 31October1950 in Baghdad,Iraq.", "(Birth(ZahaHadid) & BornOn31Oct1950(ZahaHadid) & BornInBaghdad(ZahaHadid))", "ZahaHadid was born on 31October1950 in Baghdad,Iraq.", "Zaha Hadid was born on 31Oct1950 in Baghdad,Iraq.", "Zaha Hadid was born on 31 October 1950 in Baghdad,Iraq.", "(Birth(ZahaHadid) & BornOn31October50(ZahaHadid) & BornInBaghdad(ZahaHadid))", "(Birth(ZahaHadid,31Oct1950) & BornInBaghdad(ZahaHadid,Iraq))", "(Birth(ZahaHadid) & BornOn31Oct1950(ZahaHadid) & BornInBaghdad(ZahaHadid,Iraq))", "(Birth(ZahaHadid) & BornOn31Oct1950(ZahaHadid,Iraq))", "(Birth(ZahaHadid) & BornOn31Oct1950(ZahaHadid) & Baghdad(ZahaHadid))", "(Birth(ZahaHadid,31Oct1950) & BornInBaghdad(ZahaHadid,31Oct1950))", "(Birth(ZahaHadid,31October 1950) & BornInBaghdad(ZahaHadid,Iraq))", "(Birth(ZahaHadid) & BornOn31October50(ZahaHadid) & BornInBaghdad(ZahaHadid,Iraq))", "(Birth(ZahaHadid) & BornOn31October50(ZahaHadid,Iraq))", "(Birth(ZahaHadid,31Oct1950) & BornInBaghdad(ZahaHadid))"]}
{"id": "folio_train_2561", "nl": "Hadid was a visiting professor of Architectural Design at the Yale School of Architecture.", "fol": "IsVisitingProfessorAt(ZahaHadid,YaleSchoolofArchitecture)", "prediction": ["Hadid was visitingProfessorOfArchitecturalDesign(Hadid,YaleSchoolOfArchitecture)", "Hadid was visitingProfessorOfArchitecturalDesignAtYaleSchoolOfArchitecture(Hadid)", "Hadid was visitingProfessorOfArchitecturalDesign(Hadid) at YaleSchoolOfArchitecture(Hadid)", "Hadid was visitingProfessorOfArchitecturalDesign(Hadid) & YaleSchoolOfArchitecture(Hadid)", "Hadid was visitingProfessorOfArchitecturalDesign(Hadid,YaleSchoolOfArchitecture)", "(VisitingProfessor(Hadid,ArchitecturalDesign) & YaleSchoolOfArchitecture(Hadid,ArchitecturalDesign))", "(VisitingProfessorOfArchitecturalDesign(Hadid) & YaleSchoolOfArchitecture(Hadid))", "(VisitingProfessor(Hadid,ArchitecturalDesign) & YaleSchoolOfArchitecture(Hadid))", "(VisitingProfessor(Hadid,ArchitecturalDesign) & YaleSchoolOfArchitecture(Hadid,ArchitecturalDesign))", "(VisitingProfessorOfArchitecturalDesign(Hadid,YaleSchoolOfArchitecture))", "Hadid was visitingProfessorOfArchitecturalDesign(Hadid) at Yale SchoolOfArchitecture(Hadid)", "Hadid was visitingProfessorOfArchitecturalDesign(Hadid,Yale SchoolOfArchitecture)", "(VisitingProfessor(Hadid,ArchitecturalDesign) & YaleSchoolOfArchitecture(Hadid))", "Hadid was VisitingProfessorOfArchitecturalDesign(Hadid,YaleSchoolOfArchitecture)", "Hadid was visitingProfessorOfArchitecturalDesignAtYaleSchoolOfArchitecture.", "Hadid was visitingProfessor(Hadid,ArchitecturalDesign) & YaleSchoolOfArchitecture(Hadid,ArchitecturalDesign))"]}
{"id": "folio_train_2562", "nl": "Max is an aspiring architecture student, and he plans to apply to Yale School of Architecture. ", "fol": "(IsAspiringArchitectureStudent(Max) & PlansToApplyToSchool(Max,YaleSchoolofArchitecture))", "prediction": ["(AspiringArchitectureStudent(Max) & PlansToApplyToYaleSchoolOfArchitecture(Max))", "(AspiringArchitecturalStudent(Max) & PlansToApplyToYaleSchoolOfArchitecture(Max))", "(AspiringArchitectureStudent(Max) & PlansToApplyToYale SchoolOfArchitecture(Max))", "(AspiringArchitectureStudent(Max) & PlansToApply(Max,YaleSchoolOfArchitecture))", "all x.((Max(x) & AspiringArchitectureStudent(x)) -> PlansToApplyToYaleSchoolOfArchitecture(x))", "(AspiringArchitectureStudent(Max) & PlansToAppointToYaleSchoolOfArchitecture(Max))", "all x.(AspiringArchitectureStudent(x) & PlansToApplyToYaleSchoolOfArchitecture(x))", "(AspiringArchitectureStudent(Max) & PlanToApplyToYaleSchoolOfArchitecture(Max))", "(AspiringArchitectureStudent(Max) & PlansToApplicationToYaleSchoolOfArchitecture(Max))", "(AspiringArchitectureStudent(Max) & PlansApplicationToYaleSchoolOfArchitecture(Max))", "(AspiringArchitecturalStudent(Max) & PlansToApplyToYale SchoolOfArchitecture(Max))", "(AspiringArchitectureStudent(Max) & PlansToApply(Max,Yale SchoolOfArchitecture))", "(AspiringArchitectureStudent(Max) & PlannedApplicationToYaleSchoolOfArchitecture(Max))", "(AspiringArchitecturalStudent(Max) & PlansToApply(Max,YaleSchoolOfArchitecture))", "(AspiringArchitectureStudent(Max) & PlansToApplyToYamaSchoolOfArchitecture(Max))", "(AspiringArchitectureStudent(Max) & PlansToApplication(Max,Yale SchoolOfArchitecture))"]}
{"id": "folio_train_2563", "nl": "Hadid was born in Iraq, and became a UK citizen later in her life.", "fol": "exists x.(BornInLocation(ZahaHadid,Iraq,x) & IsBritish(ZahaHadid))", "prediction": ["all x.(Hadid(x) -> (BirthInIraq(x) & UKCitizen(x)))", "(BirthInIraq(Hadid) & UKCitizen(Hadid))", "(Birth(Hadid,Iraq) & UKCitizen(Hadid,UK))", "all x.(Hadid(x) -> (BirthInIraq(x) & BecomesUKCitizen(x)))", "(Birth(Hadid) & BornInIraq(Hadid) & UKCitizen(Hadid))", "all x.(Hadid(x) -> (BirthInIraq(x) & BecameUKCitizen(x)))", "all x.(Hadid(x) -> (BornInIraq(x) & BecomesUKCitizen(x)))", "(bornInIraq(Hadid) & UKCitizen(Hadid))", "(BirthInIraq(Hadid,Iraq) & UKCitizen(Hadid,UK))", "all x.(Hadid(x) -> (BirthInIraq(x) & UKCitizen(x)))", "all x.(Hadid(x) -> (BirthInIraq(x) & UKCitizen(x) & LaterInLife(x)))", "all x.(Hadid(x) -> (Birth(x,Iraq) & UKCitizen(x)))", "all x.(Hadid(x) -> (BornInIraq(x) & BecameUKCitizen(x)))", "all x.(Hadid(x) -> (BirthInIraq(x) & BecomesUKCitizen(x)))", "all x.(Hadid(x) -> (BornInIraq(x) & UKCitizen(x)))", "all x.(Hadid(x) -> (BirthInIraq(x) & BritishCitizen(x)))"]}
{"id": "folio_train_2564", "nl": "Hadid did some work in interior design.", "fol": "DidWorkIn(ZahaHadid,InteriorDesign)", "prediction": ["all x.(Hadid(x) -> DidInteriorDesign(x))", "(exists x.(Hadid(x) & InteriorDesign(x)) & -exists y.(Hadid(y) & InteriorDesign(y))))", "all x.(Hadid(x) -> (InteriorDesign(x) | InteriorDesign(x)))", "all x y.((Hadid(x) & InteriorDesign(y)) -> Did(x,y))", "all x.(Hadid(x) -> DidInteriorDesignWork(x))", "Hadid did some work in interior design.", "Hadid did some work in interiordesign.", "all x y.((Hadid(x) & InteriorDesign(y)) -> DidAtWork(x,y))", "(exists x.(Hadid(x) & InteriorDesign(x)) & -exists y.(Hadid(y) & InteriorDesign(y)))", "all x y.((Hadid(x) & InteriorDesign(y)) -> DidSomeWork(x,y))", "(exists x.(Hadid(x) & InteriorDesign(x)) & -exists y.(Hadid(y) & InteriorDesign(x))))", "(exists x.(Hadid(x) & InteriorDesign(x)) & Did(x,InteriorDesign))", "all x y.((Hadid(x) & InteriorDesign(y)) -> DidWork(x,y))", "(exists x.(Hadid(x) & InteriorDesign(x)))", "all x y.((Hadid(x) & InteriorDesign(y)) -> DidWorkIn(x,y))", "all x.(Hadid(x) -> (InteriorDesign(x) & Did(x,InteriorDesign)))"]}
{"id": "folio_train_2565", "nl": "Hadid was born in 1982.", "fol": "exists x.BornInLocation(Hadid,x,1982)", "prediction": ["Hadid was born in 1982.", "(Birth(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(HadHadHadHadHadHad(HadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHad(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had(Had)Had)Had)Had(Had)Had)Had", "(Birth(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(HadHadHadHadHadHad(HadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHad(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had(Had)Had)Had(Had)Had)Had", "(Birth(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(HadHadHadHadHadHad(HadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHad(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had(Had)Had)Had)Had(Had)Had", "(Birth(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(HadHadHadHadHadHad(HadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHad(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had(Had)Had)Had)Had(Had)Had", "(Birth(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(HadHadHadHadHadHad(HadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHad(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had(Had)Had)Had)Had)Had(Had)Had)Had", "(Birth(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(HadHadHadHadHadHad(HadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHad(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had(Had)Had)Had)Had)Had(Had)Had", "(Birth(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(HadHadHadHadHadHad(HadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHad(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had(Had)Had)Had(Had)Had", "(Birth(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(HadHadHadHadHadHad(HadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHad(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had(Had)Had)Had)Had(Had)Had)Had", "(Birth(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(HadHadHadHadHadHad(HadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHad(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had(Had)Had)Had)Had(Had)Had)Had)Had", "(Birth(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(HadHadHadHadHadHad(HadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHad(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had(Had)Had)Had(Had)Had)Had)Had", "(Birth(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(HadHadHadHadHadHad(HadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHad(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had(Had)Had)Had(Had)Had", "(Birth(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(HadHadHadHadHadHad(HadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHad(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had(Had)Had)Had)Had(Had)Had)Had(Had", "(Birth(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(HadHadHadHadHadHad(HadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHad(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had(Had)Had)Had(Had)Had)Had)Had(Had", "(Birth(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(HadHadHadHadHadHad(HadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHad(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had(Had)Had)Had)Had(Had)Had)Had)Had(Had", "(Birth(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(Hadid) & BornIn(HadHadHadHadHadHad(HadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHadHad(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had(Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had)Had(Had)Had)Had)Had)Had(Had)Had)Had)Had"]}
{"id": "folio_train_2566", "nl": "Max admires Zaha Hadid.", "fol": "Admires(Max,ZahaHadid)", "prediction": ["all x y.((Max(x) & ZahaHadid(y)) -> Admires(x,y))", "all x.((Max(x) & ZahaHadid(x)) -> Admires(x,y))", "all x.((Max(x) & ZahaHadid(x)) -> Admires(x,z))", "all x.((Max(x) & ZahaHadid(x)) -> Admires(x,ZahaHadid))", "All x.(Max(x) -> AdmiresZahaHadid(x))", "all x.((Max(x) & ZahaHadid(x)) -> Admires(x,Hadid))", "all x.((Max(x) & ZahaHadid(y)) -> Admires(x,y))", "Max admiresZahaHadid.", "all x.((Max(x) & ZahaHadid(x)) -> Admires(x,x))", "(Awesome(Max,ZahaHadid) -> Admires(Max,ZahaHadid))", "(Awesome(Max,ZahaHadid))", "(Appreciates(Max,ZahaHadid) -> Admires(Max,ZahaHadid))", "(Awesome(Max) -> AdmiresZahaHadid(Max))", "(Appreciates(Max,ZahaHadid) & -Appreciates(Max,ZahaHadid))", "all x y.((Max(x) & Zaha(y)) -> Admires(x,y))", "(Appreciates(Max,ZahaHadid))"]}
{"id": "folio_train_2567", "nl": "Something is either an invasive neuroimaging technique or a noninvasive neuroimaging technique. ", "fol": "all x.((InvasiveNeuroimaging(x) & -NoninvasiveNeuroimaging(x)) | (-InvasiveNeuroimaging(x) & NoninvasiveNeuroimaging(x)))", "prediction": ["all x.((InvasiveNeuroimagingTechnique(x) | NoninvasiveNeuroimagingTechnique(x)) -> (InvasiveNeuroimagingTechnique(x) | NoninvasiveNeuroimagingTechnique(x)))", "all x.(NeuroimagingTechnique(x) | NoninvasiveNeuroimagingTechnique(x))", "all x.(InvasiveNeuroimagingTechnique(x) | NoninvasiveNeuroimagingTechnique(x))", "all x.((InvasiveNeuroimagingTechnique(x) | NoninvasiveNeuroimagingTechnique(x)) -> (InvasiveNeuroimagingTechnique(x) & NoninvasiveNeuroimagingTechnique(x)))", "all x.((NeuroimagingTechnique(x) | NoninvasiveNeuroimagingTechnique(x)) -> (Invasive(x) | Noninvasive(x)))", "all x.((InvasiveNeuroimagingTechnique(x) | NoninvasiveNeuroimagingTechnique(x)) -> (InvasiveNeuronimagingTechnique(x) | NoninvasiveNeuronimagingTechnique(x)))", "all x.((InvasiveNeuroimagingTechnique(x) | NoninvasiveNeuroimagingTechnique(x)) -> (InvasiveNeuroimagingTechnique(x) & -InvasiveNeuroimagingTechnique(x)))", "all x.((NeuroimagingTechnique(x) | NoninvasiveTechnique(x)) -> (Invasive(x) | Noninvasive(x)))", "all x.((InvasiveNeuroimaging(x) | NoninvasiveNeuroimaging(x)) -> (InvasiveNeuroimaging(x) | NoninvasiveNeuroimaging(x)))", "all x.((InvasiveNeuroimagingTechnique(x) | NonInvasiveNeuroimagingTechnique(x)) -> (InvasiveNeuroimagingTechnique(x) | NonInvasiveNeuroimagingTechnique(x)))", "all x.((InvasiveNeuroimagingTechnique(x) | NonInvasiveNeuroimagingTechnique(x)) -> (InvasiveNeuroimagingTechnique(x) | NoninvasiveNeuroimagingTechnique(x)))", "all x.((InvasiveNeuroimagingTechnique(x) | NoninvasiveNeuroimagingTechnique(x)) -> (InvasiveNeuronimagingTechnique(x) & NoninvasiveNeuronimagingTechnique(x)))", "exists x.(NeuroimagingTechnique(x) | NoninvasiveNeuroimagingTechnique(x))", "all x.((InvasiveNeuroimagingTechnique(x) | NoninvasiveNeuroimagingTechnique(x)) -> (InvasiveNeuroimagingTechnique(x) | InvasiveNeuroimagingTechnique(x)))", "all x.(InvasiveNeuroimaging(x) | NoninvasiveNeuroimaging(x))", "all x.((InvasiveNeuroimagingTechnique(x) | NoninvasiveNeuroimagingTechnique(x)) -> (InvasiveNeuroimagingTechnique(x) & InvasiveNeuroimagingTechnique(x)))"]}
{"id": "folio_train_2568", "nl": "All noninvasive neuroimaging techniques provide a spatial resolution of brains.", "fol": "all x.(NoninvasiveNeuroimaging(x) -> ProvidesSpatialResolution(x))", "prediction": ["all x.(NoninvasiveNeuroimagingTechnique(x) -> ProvidesSpatialResolutionOfBrains(x))", "all x.(NoninvasiveNeuroimagingTechnique(x) -> ProvidesSpatialResolution(x))", "all x.(NonInvasiveNeuroimagingTechnique(x) -> ProvidesSpatialResolutionOfBrains(x))", "all x y.((NoninvasiveNeuroimagingTechnique(x) & Brain(y)) -> ProvidesSpatialResolution(x,y))", "all x.(NoninvasiveNeuroimaging(x) -> ProvidesSpatialResolutionOfBrains(x))", "all x y.((NonInvasiveNeuroimagingTechnique(x) & Brain(y)) -> ProvidesSpatialResolution(x,y))", "all x.(NonInvasiveNeuroimagingTechnique(x) -> ProvidesSpatialResolution(x))", "all x.(NoninvasiveNeuroimaging(x) -> ProvidesSpatialResolution(x))", "all x.((NoninvasiveNeuroimagingTechnique(x) & ProvidesSpatialResolutionOfBrains(x)) -> ProvidesSpatialResolutionOfBrains(x))", "all x.(NonInvasiveNeuroimaging(x) -> ProvidesSpatialResolutionOfBrains(x))", "all x.((NoninvasiveNeuroimagingTechnique(x) & ProvidesSpatialResolution(x)) -> Brains(x))", "all x.((NoninvasiveNeuroimagingTechnique(x) & ProvidesSpatialResolutionOfBrains(x)) -> ProvidesSpatialResolution(x))", "all x.((NoninvasiveNeuroimagingTechnique(x) & ProvidesSpatialResolution(x,Brains)) -> ProvidesSpatialResolution(x,Brains))", "all x.((NonInvasiveNeuroimagingTechnique(x) & ProvidesSpatialResolution(x,Brains)) -> ProvidesSpatialResolution(x,Brains))", "all x.(NoninvasiveNeuroimagingTechnique(x) -> ProvidesSpatialResolutionOfBodys(x))", "all x.((NoninvasiveNeuroimagingTechnique(x) & ProvidesSpatialResolutionOfBrains(x)) -> Noninvasive(x))"]}
{"id": "folio_train_2569", "nl": "If a technique provides a spatial resolution of brains, then it is a measurement of brain activity. ", "fol": "all x.(ProvidesSpatialResolution(x) -> BrainActivityMeasurement(x))", "prediction": ["all x.((Technique(x) & ProvidesSpatialResolutionOfBrains(x)) -> MeasurementOfBrainActivity(x))", "all x.((Technique(x) & ProvidesSpatialResolution(x) & Brains(x)) -> MeasurementOfBrainActivity(x))", "all x.((Technique(x) & ProvidesSpatialResolution(x)) -> MeasurementOfBrainActivity(x))", "all x.(ProvidesSpatialResolutionOfBrains(x) -> MeasurementOfBrainActivity(x))", "all x.((Technique(x) & ProvidesSpatialResolution(x) & Brain(x)) -> MeasurementOfBrainActivity(x))", "all x.((Technique(x) & ProvidesSpaceRadiationOfBrains(x)) -> MeasurementOfBrainActivity(x))", "all x.((Technique(x) & ProvidesSpatialResolutionOfBrains(x)) -> MeasuresBrainActivity(x))", "all x.((Technique(x) & ProvidesSpatialResolutionOfBirds(x)) -> MeasurementOfBrainActivity(x))", "all x.(ProvidesSpatialResolution(x) -> MeasurementOfBrainActivity(x))", "all x.((Technique(x) & ProvidesSpatialResolution(x) & Brains(x)) -> MeasuresBrainActivity(x))", "all x y.((Technique(x) & ProvidesSpatialResolution(x,y) & Brain(y)) -> MeasurementOfBrainActivity(x))", "all x.((Technique(x) & ProvidesSpatialResolutionOfBrains(x)) -> MeasurementOfBirdActivity(x))", "all x.((Technique(x) & ProvidesSpatialResolutionOfBreaks(x)) -> MeasurementOfBrainActivity(x))", "all x.((Technique(x) & ProvidesSpatialResolutionOfBodys(x)) -> MeasurementOfBrainActivity(x))", "all x.((Technique(x) & ProvidesSpatialResolutionOfBrains(x)) -> MeasurementsBrainActivity(x))", "all x.((Technique(x) & ProvidesSpatialResolution(x) & Brains(x)) -> MeasurementOfBirdActivity(x))"]}
{"id": "folio_train_2570", "nl": "All measurements of brain activity are used by neuroscience researchers.", "fol": "all x.(BrainActivityMeasurement(x) -> UsedByResearchers(x))", "prediction": ["all x.(MeasurementsOfBrainActivity(x) -> UsedByNeurologyResearchers(x))", "all x y.((Measurement(x) & BrainActivity(y)) -> UsedBy(x,y))", "all x.(MeasurementOfBrainActivity(x) -> UsedByNeurologyResearchers(x))", "all x y z.((Measurement(x) & BrainActivity(y) & NeuroscienceResearcher(z)) -> UsedBy(x,y,z))", "all x y.((Measurement(x) & BrainActivity(y)) -> UsedByNeurologyResearchers(x,y))", "all x.(MeasurementsOfBrainActivity(x) -> UsedByNeuroscienceResearchers(x))", "all x y.((MeasurementOfBrainActivity(x) & NeuroscienceResearcher(y)) -> UsedBy(x,y))", "all x.(MeasurementOfBrainActivity(x) -> UsedByNeuroscienceResearchers(x))", "all x y.((MeasurementOfBrainActivity(x) & NeuroscienceResearcher(y)) -> UsedBy(y,x))", "all x y.((MeasurementsOfBrainActivity(x) & NeuroscienceResearcher(y)) -> UsedBy(x,y))", "all x.((MeasurementOfBrainActivity(x) & NeuroscienceResearcher(x)) -> UsedBy(x,y))", "all x.((Measurement(x) & BrainActivity(x)) -> UsedByNeurologyResearchers(x))", "all x y.((MeasurementsOfBrainActivity(x) & NeuroscienceResearcher(y)) -> UsedBy(y,x))", "all x y.((Measurement(x) & BrainActivity(y)) -> UsedByNeurologyResearchers(x))", "all x y.((Measurement(x) & BrainActivity(y)) -> UsedByNeuroscienceResearchers(x,y))", "all x y.((Measurement(x) & BrainActivity(y)) -> UsedByNeuroscienceResearchers(x))"]}
{"id": "folio_train_2571", "nl": "FMRI is either a measurement of brain activity or a noninvasive neuroimaging technique.", "fol": "((BrainActivityMeasurement(FMRI) & -NoninvasiveNeuroimaging(FMRI)) | (-BrainActivityMeasurement(FMRI) & NoninvasiveNeuroimaging(FMRI)))", "prediction": ["all x.(FMRI(x) -> (MeasuresBrainActivity(x) | NoninvasiveNeuroimagingTechnique(x)))", "all x.(FMRI(x) -> (MeasurementOfBrainActivity(x) | NoninvasiveNeuroimagingTechnique(x)))", "all x.(FMRI(x) -> (MeasuresBrainActivity(x) | NonInvasiveNeuroimagingTechnique(x)))", "all x.(FMRI(x) -> (MeasurementOfBrainActivity(x) | NonInvasiveNeuroimagingTechnique(x)))", "all x.(FMRI(x) -> (MeasuresBrainActivity(x) | NoninvasiveNeuroimaging(x)))", "all x.(FMRI(x) -> (MeasuresBrainActivity(x) | NonInvasiveNeuroimaging(x)))", "all x.(FMRI(x) -> (MeasuresBodyActivity(x) | NoninvasiveNeuroimagingTechnique(x)))", "all x.(FMRI(x) -> (MeasurementOfBrainActivity(x) | NoninvasiveNeuroimaging(x)))", "all x.(FMRI(x) -> (MeasuresBrainActivity(x) | NoninvasiveNeuroimagingTechnique(x)))", "all x.(FMRI(x) -> (MeasurementOfBrainActivity(x) | NonInvasiveNeuroimaging(x)))", "all x.(FMRI(x) -> ((MeasuresBrainActivity(x) | NoninvasiveNeuroimagingTechnique(x))))", "all x.(FMRI(x) -> (MeasurementOfBodyActivity(x) | NoninvasiveNeuroimagingTechnique(x)))", "all x.(FMRI(x) -> (MetaphorOfBrainActivity(x) | NoninvasiveNeuroimagingTechnique(x)))", "all x.(FMRI(x) -> (MeasuresBrainActivity(x) | NoninvasiveNeuronimagingTechnique(x)))", "all x.(FMRI(x) -> (MeasurementsBrainActivity(x) | NoninvasiveNeuroimagingTechnique(x)))", "all x.(FMRI(x) -> (MeasuresBrainActivity(x) | NoninvasiveNeuroImagingTechnique(x)))"]}
{"id": "folio_train_2572", "nl": "FMRI provides a spatial resolution of brains.", "fol": "ProvidesSpatialResolution(FMRI)", "prediction": ["all x.(FMRI(x) -> ProvidesSpatialResolutionOfBrains(x))", "all x y.((FMRI(x) & Brain(y)) -> ProvidesSpatialResolution(x,y))", "all x.(FMRI(x) -> ProvidesSpatialResolution(x))", "all x y.((FMRI(x) & Brain(y) & ProvidesSpatialResolution(x,y)) -> ProvidesSpatialResolution(x,y))", "all x y z.((FMRI(x) & Brain(y) & Space(z)) -> ProvidesSpatialResolution(x,y,z))", "all x y z.((FMRI(x) & Brain(y) & Brain(z)) -> ProvidesSpatialResolution(x,y,z))", "all x y z.((FMRI(x) & Brain(y) & Space(z)) -> ProvidesResolution(x,y,z))", "all x.(FMRI(x) -> ProvidesSpatialResolutionOfBodys(x))", "all x y.((FMRI(x) & Brain(y)) -> ProvidesSpacerResolution(x,y))", "all x y.((FMRI(x) & Brain(y)) -> ProvidesSpaceRadiation(x,y))", "all x y z.((FMRI(x) & Brain(y) & Space(z) & ProvidesResolution(x,y,z)) -> ProvidesResolution(x,y,z))", "all x.(FMRI(x) -> ProvidesSpatialResolutionOfBirds(x))", "all x.(FMRI(x) -> ProvidesSpatialResolution(x,Brains))", "all x y.((FMRI(x) & Brain(y)) -> ProvidesRadiation(x,y))", "all x.((FMRI(x) & ProvidesSpatialResolution(x)) -> Brains(x))", "all x y z.((FMRI(x) & Brain(y) & Space(z)) -> ProvidesRadiation(x,y,z))"]}
{"id": "folio_train_2573", "nl": "FMRI is an invasive neuroimaging technique and is used by neuroscience researchers.", "fol": "(InvasiveNeuroimaging(FMRI) & UsedByResearchers(FMRI))", "prediction": ["all x.(FMRI(x) -> (InvasiveNeuroimagingTechnique(x) & UsedByNeurologyResearchers(x)))", "all x.(FMRI(x) -> (InvasiveNeuroimaging(x) & UsedByNeurologyResearchers(x)))", "all x y.((FMRI(x) & NeuroimagingTechnique(y)) -> (Invasive(x,y) & UsedBy(x,y)))", "all x y z.((FMRI(x) & NeuroimagingTechnique(y) & NeuroscienceResearcher(z)) -> (Invasive(x,y) & UsedBy(x,z)))", "all x.(FMRI(x) -> (InvasiveNeuroimagingTechnique(x) & UsedByNeurologist(x)))", "all x.(FMRI(x) -> (InvasiveNeuroimagingTechnique(x) & UsedByNeuroscienceResearchers(x)))", "all x y.((FMRI(x) & NeuroimagingTechnique(y)) -> (Invasive(x,y) & UsedBy(x,neurologyResearchers)))", "all x.(FMRI(x) -> (InvasiveNeuroimagingTechnique(x) & UsedByNeurologyResearchers(x)))", "all x y.((FMRI(x) & NeuroimagingTechnique(y)) -> (Invasive(x,y) & UsedBy(x,NeurologyResearchers)))", "all x y.((FMRI(x) & NeuroimagingTechnique(y)) -> (Invasive(x,y) & UsedByNeurologyResearchers(x)))", "all x.(FMRI(x) -> (InvasiveNeuronimagingTechnique(x) & UsedByNeurologyResearchers(x)))", "all x.(FMRI(x) -> (InvasiveNeuroimagingTechnique(x) & UsedByNeurologicalResearchers(x)))", "all x y.((FMRI(x) & NeuroimagingTechnique(y)) -> (Invasive(x) & UsedBy(x,y)))", "all x y z.((FMRI(x) & NeuroimagingTechnique(y) & NeuroscienceResearcher(z)) -> (Invasive(y) & UsedBy(x,z)))", "all x y.((FMRI(x) & NeuroimagingTechnique(y)) -> Invasive(x,y))", "all x y z.((FMRI(x) & NeuroimagingTechnique(y) & NeuroscienceResearcher(z)) -> (Invasive(x,y) & UsedBy(y,z)))"]}
{"id": "folio_train_2574", "nl": "FMRI is either an invasive neuroimaging technique or is used by neuroscience researchers.", "fol": "(InvasiveNeuroimaging(FMRI) | UsedByResearchers(FMRI))", "prediction": ["all x.(FMRI(x) -> (InvasiveNeuroimagingTechnique(x) | UsedByNeurologyResearchers(x)))", "all x.(FMRI(x) -> (InvasiveNeuroimaging(x) | UsedByNeurologyResearchers(x)))", "all x.(FMRI(x) -> (InvasiveNeuroimagingTechnique(x) | UsedByNeurologist(x)))", "all x.(FMRI(x) -> (InvasiveNeuroimagingTechnique(x) | UsedByNeuroscienceResearchers(x)))", "all x y.((FMRI(x) & NeuroimagingTechnique(y)) -> (Invasive(x,y) | UsedBy(x,y)))", "all x.(FMRI(x) -> (InvasiveNeuroimagingTechnique(x) | UsedByNeurologicalResearchers(x)))", "all x.(FMRI(x) -> (InvasiveNeuroimagingTechnique(x) | UsedByNeurologyResearchers(x)))", "all x.(FMRI(x) -> (InvasiveNeuronimagingTechnique(x) | UsedByNeurologyResearchers(x)))", "all x.(FMRI(x) -> (InvasiveNeuroimagingTechnique(x) | UsedByNeuroimagingResearchers(x)))", "all x.(FMRI(x) -> (InvasiveNeuroImagingTechnique(x) | UsedByNeurologyResearchers(x)))", "all x y.((FMRI(x) & NeuroimagingTechnique(y)) -> (Invasive(x,y) | UsedByNeurologyResearchers(x)))", "all x.(FMRI(x) -> (InvasiveNeuroimaging(x) | UsedByNeurologist(x)))", "all x.(FMRI(x) -> (InvasiveNeuroimagingTechnique(x) | UsedByNurses(x)))", "all x.(FMRI(x) -> (InvasiveNeuroimagingTechnique(x) | UsedByNeurologyResearchers(x)))", "all x.(FMRI(x) -> (InvasiveNeuroimagingTechnique(x) | UsedByNeuroscientificResearchers(x)))", "all x.(FMRI(x) -> (InvasiveNeuroimagingTechnique(x) | UsedByNeuroscientists(x)))"]}
{"id": "folio_train_2575", "nl": "If fMRI is not an invasive neuroimaging technique and used by neuroscience researchers, then fMRI is neither a noninvasive neuroimaging technique nor provides a spatial resolution of brains.", "fol": "((NoninvasiveNeuroimaging(FMRI) & UsedByResearchers(FMRI)) -> (-InvasiveNeuroimaging(FMRI) & -ProvidesSpatialResolution(FMRI)))", "prediction": ["all x.((FMRI(x) & -InvasiveNeuroimagingTechnique(x) & UsedByNeurologyResearchers(x)) -> (-NoninvasiveNeuroimagingTechnique(x) & -SpatialResolutionOfBrains(x)))", "all x.((FMRI(x) & -InvasiveNeuroimagingTechnique(x) & UsedByNeurologyResearchers(x)) -> (-NoninvasiveNeuroimagingTechnique(x) & -ProvidesSpatialResolutionOfBrains(x)))", "all x.((FMRI(x) & -InvasiveNeuroimagingTechnique(x) & UsedByNeurologyResearchers(x)) -> -NoninvasiveNeuroimagingTechnique(x) & -SpatialResolutionOfBrains(x))", "all x.((FMRI(x) & -InvasiveNeuroimagingTechnique(x) & UsedByNeurologyResearchers(x)) -> (-NonInvasiveNeuroimagingTechnique(x) & -SpatialResolutionOfBrains(x)))", "all x.((FMRI(x) & -InvasiveNeuroimagingTechnique(x) & UsedByNeurologyResearchers(x)) -> (-NonInvasiveNeuroimagingTechnique(x) & -ProvidesSpatialResolutionOfBrains(x)))", "all x.((FMRI(x) & -InvasiveNeuroimagingTechnique(x) & UsedByNeurologyResearchers(x)) -> -NoninvasiveNeuroimagingTechnique(x) & -ProvidesSpatialResolutionOfBrains(x))", "all x.((FMRI(x) & -InvasiveNeuroimagingTechnique(x) & UsedByNeurologyResearchers(x)) -> -NonInvasiveNeuroimagingTechnique(x) & -SpatialResolutionOfBrains(x))", "all x.((FMRI(x) & -InvasiveNeuroimagingTechnique(x) & UsedByNeurologyResearchers(x)) -> (-NoninvasiveNeuronimagingTechnique(x) & -SpatialResolutionOfBrains(x)))", "all x.((FMRI(x) & -InvasiveNeuroimagingTechnique(x) & UsedByNeurologyResearchers(x)) -> (NoninvasiveNeuroimagingTechnique(x) & -SpatialResolutionOfBrains(x)))", "all x.((FMRI(x) & -InvasiveNeuroimagingTechnique(x) & UsedByNeurologyResearchers(x)) -> -(NoninvasiveNeuroimagingTechnique(x) & -SpatialResolutionOfBrains(x)))", "all x.((FMRI(x) & -InvasiveNeuroimagingTechnique(x) & UsedByNeurologyResearchers(x)) -> (-NoninvasiveNeuronimagingTechnique(x) & -ProvidesSpatialResolutionOfBrains(x)))", "all x.((FMRI(x) & -InvasiveNeuroimagingTechnique(x) & UsedByNeurologyResearchers(x)) -> -NonInvasiveNeuroimagingTechnique(x) & -ProvidesSpatialResolutionOfBrains(x))", "all x.((FMRI(x) & -InvasiveNeuroimagingTechnique(x) & UsedByNeurologyResearchers(x)) -> (-NoninvasiveNeuroimagingTechnique(x) & -ProvidesSpatialResolution(x)))", "all x.((FMRI(x) & -InvasiveNeuroimagingTechnique(x) & UsedByNeurologyResearchers(x)) -> -NoninvasiveNeuronimagingTechnique(x) & -SpatialResolutionOfBrains(x))", "all x.((FMRI(x) & -InvasiveNeuroimaging(x) & UsedByNeurologyResearchers(x)) -> (-NoninvasiveNeuroimaging(x) & -SpatialResolutionOfBrains(x)))", "all x.((FMRI(x) & -InvasiveNeuroimagingTechnique(x) & UsedByNeurologyResearchers(x)) -> (-NoninvasiveNeuroimagingTechnique(x) & -ProvidesSpatialResolutionOfBodys(x)))"]}
{"id": "folio_train_2576", "nl": "Either present their work at the conference or provide a tutorial session at the conference. ", "fol": "all x.(PresentAtConference(x) | ProvideTutorialSession(x))", "prediction": ["all x y.((Conference(x) & Conference(y)) -> (PresentWork(x,y) | ProvideTutorial(x,y)))", "all x y.((Conference(x) & PresentWork(x,y)) | ProvideTutorial(x,y))", "all x y.((Conference(x) & Conference(y)) -> (PresentWork(x,y) | ProvideTutorialSession(x,y)))", "all x y.((Conference(x) & Conference(y)) -> (PresentsWork(x,y) | ProvidesTutorial(x,y)))", "all x y.((Conference(x) & Conference(y)) -> ((PresentWork(x,y) | ProvideTutorial(x,y))))", "all x y.((Conference(x) & PresentsWork(x,y)) | ProvidesTutorial(x,y))", "all x y.((Conference(x) & Conference(y)) -> (PresentWorkAt(x,y) | ProvideTutorialSessionAt(x,y)))", "all x y.((Conference(x) & Conference(y)) -> (ProvidesWork(x,y) | ProvidesTutorial(x,y)))", "all x y.((Conference(x) & Conference(y)) -> (PursueWork(x,y) | ProvideTutorial(x,y)))", "all x y.((Conference(x) & (PresentWork(x,y) | ProvideTutorial(x,y))) -> ProvidesWork(x,y))", "all x y z.((Conference(x) & Work(y) & Tutorial(z)) -> (Presents(x,y) | Provides(x,z)))", "all x y.((Conference(x) & PresentWork(x,y)) | ProvideTutorialSession(x,y))", "all x y.((Conference(x) & Conference(y)) -> (PresentWork(x,y) | ProvideTutorialSession(x,y)))", "all x y.((Conference(x) & Conference(y)) -> ((PresentWork(x,y) | ProvideTutorialSession(x,y))))", "all x y.((Conference(x) & Conference(y)) -> (PresentWorkAt(x,y) | ProvideTutorialAt(x,y)))", "all x y.((Conference(x) & Conference(y)) -> (PresentWorkAt(x,y) | ProvideTutorial(x,y)))"]}
{"id": "folio_train_2577", "nl": "All who present their work at the conference will attend in person. ", "fol": "all x.(PresentAtConference(x) -> AttendInPerson(x))", "prediction": ["all x.((PresentsWork(x) & AtConference(x)) -> AttendsInPerson(x))", "all x.((Person(x) & PresentsWorkAtConference(x)) -> AttendsInPerson(x))", "all x.((PresentsWorkAtConference(x) & AttendsInPerson(x)) -> PresentsWorkAtConference(x))", "all x.((PresentWork(x) & AtConference(x)) -> AttendInPerson(x))", "all x.((Person(x) & PresentsWork(x)) -> AttendsInPerson(x))", "all x.((PresentsWork(x) & Conference(x)) -> AttendsInPerson(x))", "all x.((PresentsWorkAtConference(x) & PersonAtConference(x)) -> AttendsInPerson(x))", "all x.((PresentsWork(x) & AtConference(x)) -> AttendInPerson(x))", "all x.(PresentsWorkAtConference(x) -> AttendsInPerson(x))", "all x.((PresentsWork(x) & AttendsConferenceInPerson(x)) -> PresentsWork(x))", "all x y.((PresentsWork(x) & Conference(y)) -> AttendsInPerson(x,y))", "all x.((PresentsWorkAtConference(x) & AttendsInPerson(x)) -> AttendsInPerson(x))", "all x.((PresentsWork(x) & AttendsInPerson(x)) -> PresentsWork(x))", "all x.(PresentsWork(x) -> AttendsInPerson(x))", "all x.((PresentsWorkAtConference(x) & Person(x)) -> AttendsInConference(x))", "all x.((PresentWork(x) & AtConference(x)) -> AttendsInPerson(x))"]}
{"id": "folio_train_2578", "nl": "All those providing a tutorial session at the conference are invited to join the club. ", "fol": "all x.(ProvideTutorialSession(x) -> InvitedToClub(x))", "prediction": ["all x.((ProvidesTutorial(x) & AtConference(x)) -> InvitedToJoinClub(x))", "all x.((ProvidesTutorial(x) & Conference(x)) -> InvitedToJoinClub(x))", "all x.((ProvidesTutorialSession(x) & Conference(x)) -> InvitedToJoinClub(x))", "all x.((ProvidesTutorialSession(x) & AtConference(x)) -> InvitedToJoinClub(x))", "all x.(ProvidesTutorialSessionAtConference(x) -> InvitedToJoinClub(x))", "all x.((ProvidingTutorial(x) & AtConference(x)) -> InvitedToJoinClub(x))", "all x.((ProvidingTutorial(x) & Conference(x)) -> InvitedToJoinClub(x))", "all x.((ProvidingTutorialSession(x) & Conference(x)) -> InvitedToJoinClub(x))", "all x y.((Tutor(x) & Conference(y) & ProvidesTutorial(x,y)) -> InvitedToJoinClub(x))", "all x.(ProvidesTutorial(x) -> InvitedToJoinClub(x))", "all x.(ProvidesTutorialAtConference(x) -> InvitedToJoinClub(x))", "all x.((ProvidingTutorial(x) & Conference(x)) -> InvitedToJoinClub(x))", "all x.(ProvidesTutorialSession(x) -> InvitedToJoinClub(x))", "all x y.((Tutor(x) & Conference(y) & ProvidesTutorial(x,y)) -> InvitedToJoinClub(x,y))", "all x.((ProvidesTutorialSession(x) & Conference(x)) -> JoinClub(x))", "all x.((ProvidesTutorial(x) & AtConference(x)) -> JoinClub(x))"]}
{"id": "folio_train_2579", "nl": "All who attend the conference in person are provided with souvenirs. ", "fol": "all x.(AttendInPerson(x) -> ReceiveSouvenirs(x))", "prediction": ["all x.(AttendsConferenceInPerson(x) -> ProvidedWithSouvenirs(x))", "all x.(AttendsConferenceInPerson(x) -> ProvidedWithSouvenirs(x))", "all x.((AttendsInPerson(x) & AttendsConference(x)) -> ProvidedWithSouvenirs(x))", "all x.((AttendsInPerson(x) & AttendsConferenceInPerson(x)) -> ProvidedWithSouvenirs(x))", "all x.(AttendsInPerson(x) -> ProvidedWithSouvenirs(x))", "all x.((AttendsConferenceInPerson(x) & AttendsInPerson(x)) -> ProvidedWithSouvenirs(x))", "all x.((AttendsConferenceInPerson(x) & ProvidesSouvenirs(x)) -> Provided(x))", "all x.((AttendsInPerson(x) & AttendsConference(x)) -> ProvidedWithSouvenirs(x))", "all x.((AttendsInPerson(x) & AttendsConferenceInPerson(x)) -> ProvidedWithSouvenirs(x))", "all x.((AttendsConferenceInPerson(x) & AttendsInPerson(x)) -> ProvidedWithSouvenirs(x))", "all x.((AttendInPerson(x) & AttendsConference(x)) -> ProvidedWithSouvenirs(x))", "all x.(AttendsInPerson(x) -> ProvidedWithSouvenirs(x))", "all x.((AttendsConferenceInPerson(x) & ProvidesSouvenirs(x)) -> ProvidesSouvenirs(x))", "all x.(AttendsConferenceInPerson(x) -> ProvidesSouvenirs(x))", "all x.((AttendsConferenceInPerson(x) & ProvidesSouvenirs(x)) -> AttendsInPerson(x))", "all x y.((AttendsConferenceInPerson(x) & AttendsInPerson(x)) -> ProvidedWithSouvenirs(y))"]}
{"id": "folio_train_2580", "nl": "All invited to join the club are provided with delicious meals. ", "fol": "all x.(InvitedToClub(x) -> ProvidedDeliciousMeals(x))", "prediction": ["all x.((InvitedToJoinClub(x) & ProvidedWithDeliciousMeals(x)) -> JoinClub(x))", "all x.((InvitedToJoinClub(x) & ProvidesDeliciousMeals(x)) -> JoinsClub(x))", "all x.((InvitedToJoinClub(x) & ProvidedWithDeliciousMeals(x)) -> JoinsClub(x))", "all x.(InvitedToJoinClub(x) -> ProvidedWithDeliciousMeals(x))", "all x.((InvitedToJoinClub(x) & DeliciousMeals(x)) -> Provided(x))", "all x.((InvitedToJoinClub(x) & ProvidesDeliciousMeals(x)) -> JoinClub(x))", "all x.((InvitedToJoinClub(x) & ProvidedDeliciousMeals(x)) -> JoinClub(x))", "all x.((Invited(x) & JoinClub(x)) -> DeliciousMeals(x))", "all x.((InvitedToJoinClub(x) & ProvidedDeliciousMeals(x)) -> JoinsClub(x))", "all x.((InvitedToClub(x) & ProvidedWithDeliciousMeals(x)) -> JoinsClub(x))", "all x.((InvitedToClub(x) & ProvidedWithDeliciousMeals(x)) -> JoinClub(x))", "all x.((Invitation(x) & JoinClub(x)) -> DeliciousMeals(x))", "all x.((Invited(x) & JoinClub(x)) -> ProvidedWithDeliciousMeals(x))", "all x.((InvitedToClub(x) & ProvidesDeliciousMeals(x)) -> JoinsClub(x))", "all x.(InvitedToJoinClub(x) -> ProvidesDeliciousMeals(x))", "all x.(InvitedToJoinClub(x) -> DeliciousMeals(x))"]}
{"id": "folio_train_2581", "nl": "All provided with delicious meals are happy to communicate with each other during the dinner. ", "fol": "all x.(ProvidedDeliciousMeals(x) -> HappyToCommunicate(x))", "prediction": ["all x.((Person(x) & ProvidedWithDeliciousMeals(x)) -> HappyToCommunicate(x))", "all x.((Person(x) & ProvidedWithDeliciousMeals(x)) -> HappyToCommunicateDuringDinner(x))", "all x.((ProvenedWithDeliciousMeals(x) & HappyToCommunicate(x)) -> Dinner(x))", "all x.((ProvenedWithDeliciousMeals(x) & HappyToCommunicateDuringDinner(x)) -> HappyToCommunicate(x))", "all x.((Person(x) & ProvidedWithDeliciousMeals(x)) -> HappyToCommunicate(x))", "all x.((Person(x) & ProvidedWithDeliciousMeals(x)) -> HappyToCommunicateDuringDinner(x))", "all x.((ProvenedWithDeliciousMeals(x) & HappyToCommunicateDuringDinner(x)) -> HappyToCommunicateDuringDinner(x))", "all x.((DeliciousMeal(x) & ProvidedWith(x,y)) -> HappyToCommunicate(x))", "all x y.((DeliciousMeal(x) & ProvidedWith(x,y)) -> HappyToCommunicate(x,y))", "all x y.((DeliciousMeal(x) & ProvidedWith(x,y)) -> HappyToCommunicate(y))", "all x.((ProvenedWithDeliciousMeals(x) & HappyToCommunicate(x)) -> DeliciousMeals(x))", "all x.((DeliciousMeal(x) & ProvidedWith(x,y)) -> HappyToCommunicate(y))", "all x y.((DeliciousMeal(x) & ProvidedWith(x,y)) -> HappyToCommunicate(x))", "all x.((ProvenedWithDeliciousMeals(x) & HappyToCommunicateDuringDinner(x)) -> HappyToCommunicate(x))", "all x.((DeliciousMeal(x) & ProvidedWith(x,y)) -> HappyToCommunicate(x,y))", "all x.((Person(x) & ProvidedWithDeliciousMeals(x)) -> HappyToCommunique(x))"]}
{"id": "folio_train_2582", "nl": "All provided with delicious meals are invited to take a photo with the audience. ", "fol": "all x.(ProvidedDeliciousMeals(x) -> InvitedToTakePhoto(x))", "prediction": ["all x.((Person(x) & ProvidedWithDeliciousMeals(x)) -> InvitedToTakePhotoWithAudience(x))", "all x.((ProvenedWithDeliciousMeals(x)) -> InvitedToTakePhotoWithAudience(x))", "all x.((ProvenedWithDeliciousMeals(x) & InvitedToTakePhotoWithAudience(x)) -> TakesPhotoWithAudience(x))", "all x.(DeliciousMeals(x) -> InvitedToTakePhotoWithAudience(x))", "all x y.((ProvenedWithDeliciousMeals(x) & Audience(y)) -> InvitedToTakePhotoWith(x,y))", "all x.((ProvenedWithDeliciousMeals(x) & InvitedToTakePhotoWithAudience(x)) -> TakesPhotoWithAudience(x))", "all x.((Person(x) & ProvidedWithDeliciousMeals(x)) -> InvitedToTakePhoto(x))", "all x y.((ProvenedWithDeliciousMeals(x) & Audience(y)) -> InvitedToTakePhoto(x,y))", "all x.((ProvenedWithDeliciousMeals(x) & InvitedToTakePhotoWithAudience(x)) -> TakePhotoWithAudience(x))", "all x y.((ProvenedWithDeliciousMeals(x) & ProvidedWith(x,y)) -> InvitedToTakePhotoWithAudience(x))", "all x y.((Person(x) & ProvidedWithDeliciousMeals(x)) -> InvitedToTakePhotoWithAudience(x,y))", "all x.((Person(x) & ProvidedWithDeliciousMeals(x)) -> InvitedToTakePictureWithAudience(x))", "all x.((ProvenedWithDeliciousMeals(x)) -> InvitedToTakePictureWithAudience(x))", "all x.((ProvenedWithDeliciousMeals(x) & Audience(y)) -> InvitedToTakePhotoWith(x,y))", "all x.((DeliciousMeals(x) & ProvidedWith(x,y)) -> InvitedToTakePhotoWithAudience(x))", "all x.((ProvenedWithDeliciousMeals(x) & Audience(x)) -> InvitedToTakePhotoWith(x,y))"]}
{"id": "folio_train_2583", "nl": "James does not attend the conference in person and is not provided with souvenirs.", "fol": "(-AttendInPerson(James) & -ReceiveSouvenirs(James))", "prediction": ["all x y.((James(x) & Conference(y)) -> (-AttendsInPerson(x,y) & -ProvidesSouvenirs(x,y)))", "all x.((James(x) & -AttendsConferenceInPerson(x) & -ProvidesSouvenirs(x)) -> -AttendsConferenceInPerson(x))", "all x.(James(x) -> (-AttendsConferenceInPerson(x) & -ProvidesSouvenirs(x)))", "all x.((James(x) & -AttendsConferenceInPerson(x)) -> -ProvidesSouvenirs(x))", "all x.((James(x) & -AttendsInPerson(x) & -ProvidesSouvenirs(x)) -> -AttendsInPerson(x))", "all x y.((James(x) & Conference(y)) -> (-AttendsInPerson(x,y) & -ProvidesSouvenirs(x,y)))", "all x.((James(x) & -AttendsConferenceInPerson(x) & -ProvidesSouvenirs(x)) -> -AttendsConferenceInPerson(x))", "all x.(James(x) -> (-AttendsInPerson(x) & -ProvidesSouvenirs(x)))", "(-AttendsConferenceInPerson(James) & -ProvidesSouvenirs(James))", "(-AttendsInPerson(James) & -ProvidesSouvenirs(James))", "all x.((James(x) & -AttendsInPerson(x)) -> -ProvidesSouvenirs(x))", "all x y.((James(x) & Conference(y)) -> (-AttendsInPerson(x,y) & -ProvidesSouvenirs(x)))", "all x.((James(x) & -AttendsInPerson(x) & -ProvidesSouvenirs(x)) -> -AttendsInPerson(x))", "all x.(James(x) -> (-AttendsConferenceInPerson(x) & -ProvidesSouvenirs(x)))", "all x.((James(x) & -AttendsConferenceInPerson(x)) -> -ProvidesSouvenirs(x))", "all x.((James(x) & -AttendsConferenceInPerson(x) & -ProvidesSouvenirs(x)) -> -AssistsConferenceInPerson(x))"]}
{"id": "folio_train_2584", "nl": "James is provided with souvenirs.", "fol": "ReceiveSouvenirs(James)", "prediction": ["all x.(James(x) -> ProvidedWithSouvenirs(x))", "all x.(James(x) -> ProvidedWithSouvenirs(x))", "all x.((James(x) & Souvenirs(x)) -> Provided(x))", "all x.((James(x) & Souvenir(x)) -> Provided(x))", "all x y.((James(x) & Souvenir(y)) -> ProvidedWith(x,y))", "all x y.((James(x) & Souvenir(y)) -> Provided(x,y))", "all x.((James(x) & Souvenir(x)) -> ProvidedWith(x,y))", "All x.(James(x) -> ProvidedWithSouvenirs(x))", "All x.(James(x) -> ProvidedWithSouvenirs(x))", "all x.((James(x) & Souvenirs(x)) -> ProvidedWith(x,y))", "all x.((James(x) & Souvenirs(x)) -> Provided(x,y))", "all x.((James(x) & Souvenir(y)) -> ProvidedWith(x,y))", "All x.((James(x) & Souvenirs(x)) -> Provided(x))", "all x.((James(x) & Souvenir(x)) -> Provided(x,y))", "all x.((James(x) & Souvenir(y)) -> Provided(x,y))", "all x.((James(x) & Souvenirs(y)) -> Provided(x,y))"]}
{"id": "folio_train_2585", "nl": "James is not provided with souvenirs.", "fol": "-ReceiveSouvenirs(James)", "prediction": ["all x.((James(x) & -ProvidesSouvenirs(x)) -> -ProvidesSouvenirs(x))", "all x.((James(x) & -ProvidesSouvenirs(x)) -> -ProvidesSouvenirs(x))", "all x.(James(x) -> -ProvidesSouvenirs(x))", "all x.(James(x) -> -ProvidesSouvenirs(x))", "all x.((James(x) & -ProvidesSouvenirs(x)) -> -ProvidesSouvenirs(x))", "all x.((James(x) & -ProvidesSouvenirs(x)) -> -ProvidesSouvenirs(x))", "all x.((James(x) & -ProvenedWithSouvenirs(x)) -> -ProvenedWithSouvenirs(x))", "all x.((James(x) & -ProvenedWithSouvenirs(x)) -> -ProvenedWithSouvenirs(x))", "all x.((James(x) & -ProvidesSouvenirs(x)) -> -ProvidesSuvenirs(x))", "all x.(James(x) -> -ProvenedWithSouvenirs(x))", "all x.((James(x) & -ProvenedWithSouvenirs(x)) -> -ProvenedWithSouvenirs(x))", "all x.((James(x) & -ProvidesSouvenirs(x)) -> -ProvidesSuvenirs(x))", "All x.(James(x) -> -ProvidesSouvenirs(x))", "all x.((James(x) & -ProvenedWithSouvenirs(x)) -> -ProvenedWithSouvenirs(x))", "all x.(James(x) -> -ProvenedWithSouvenirs(x))", "All x.(James(x) -> -ProvidesSouvenirs(x))"]}
{"id": "folio_train_2586", "nl": "James is invited to take a photo with the audience and is happy to communicate with each other at the dinner.", "fol": "(InvitedToTakePhoto(James) & HappyToCommunicate(James))", "prediction": ["all x y.((James(x) & Audience(y)) -> (InvitedToTakePhoto(x,y) & HappyToCommunicate(x,y)))", "all x y z.((James(x) & Audience(y) & Dinner(z)) -> (InvitedToTakePhoto(x,y) & HappyToCommunicate(x,z)))", "all x y.((James(x) & Audience(y)) -> (InvitedToTakePhoto(x,y) & HappyToCommunicate(x,y)))", "all x y z.((James(x) & Audience(y) & Dinner(z)) -> (InvitedToTakePhoto(x,y) & HappyToCommunicate(x,z)))", "all x y.((James(x) & Audience(y)) -> (InvitedToTakePhoto(x,y) & HappyToCommunique(x,y)))", "all x y z.((James(x) & Audience(y) & Dinner(z)) -> (InvitedToTakePhotoWith(x,y) & HappyToCommunicate(x,z)))", "all x y.((James(x) & Audience(y)) -> (InvitedToTakePhotoWith(x,y) & HappyToCommunicate(x,y)))", "all x y z.((James(x) & Audience(y) & Dinner(z)) -> (InvitedToTakePhoto(x,y) & HappyToCommunicate(x,z)))", "all x y z.((James(x) & Audience(y) & Dinner(z)) -> (InvitedToTakePhotoWith(x,y) & HappyToCommunicate(x,z)))", "all x y z.((James(x) & Photo(y) & Audience(z)) -> (InvitedToTake(x,y) & HappyToCommunicate(x,z)))", "all x y.((James(x) & Audience(y)) -> (InvitedToTakePhoto(x,y) & HappyToCommunicate(x,y)))", "all x y z.((James(x) & Audience(y) & Dinner(z)) -> (InvitedToTakePhoto(x,y) & HappyToCommunique(x,z)))", "all x y.((James(x) & Audience(y)) -> (InvitedToTakePhotoWith(x,y) & HappyToCommunicate(x,y)))", "all x y z.((James(x) & Audience(y) & Dinner(z)) -> (InvitedToTakePhoto(x,y) & HappyToCommunicate(x,z)))", "all x y.((James(x) & Audience(y)) -> (InvitedToTakePhoto(x,y) & HappyToCommunicate(x,y)))", "all x y.((James(x) & Audience(y)) -> (InvitedToTakePhoto(x,y) & HappyToCommunicate(x,y)))"]}
{"id": "folio_train_2587", "nl": "James is invited to take a photo with the audience or is happy to communicate with each other during the dinner.", "fol": "(InvitedToTakePhoto(James) | HappyToCommunicate(James))", "prediction": ["all x y.((James(x) & Audience(y)) -> (InvitedToTakePhoto(x,y) | HappyToCommunicate(x,y)))", "all x y.((James(x) & Audience(y)) -> (InvitedToTakePhoto(x,y) | HappyToCommunicate(x,y)))", "all x y.((James(x) & Audience(y)) -> (InvitedToTakePhotoWith(x,y) | HappyToCommunicate(x,y)))", "all x y z.((James(x) & Photo(y) & Audience(z)) -> (InvitedToTake(x,y) | HappyToCommunicate(x,z)))", "all x y.((James(x) & Audience(y)) -> (InvitedToTakePhotoWith(x,y) | HappyToCommunicate(x,y)))", "all x y z.((James(x) & Photo(y) & Audience(z)) -> (InvitedToTake(x,y) | HappyToCommunicate(x,z)))", "all x y.((James(x) & Audience(y)) -> (InvitedToTakePhotoWith(x,y) | HappyToCommunicateWith(x,y)))", "all x y.((James(x) & Audience(y)) -> (InvitedToTakePhoto(x,y) | HappyToCommunique(x,y)))", "all x y.((James(x) & Audience(y)) -> (InvitedToTakePhotoWith(x,y) | HappyToCommunicateWith(x,y)))", "all x y.((James(x) & Audience(y)) -> (InvitedToTakePhoto(x,y) | HappyToCommunicate(x,y)))", "all x y.((James(x) & Audience(y)) -> (InvitedToTakePhoto(x,y) | HappyToCommunicate(x,y)))", "all x y.((James(x) & Audience(y)) -> (InvitesToTakePhoto(x,y) | HappyToCommunicate(x,y)))", "all x y.((James(x) & Audience(y)) -> (InvitesToTakePhoto(x,y) | HappyToCommunicate(x,y)))", "all x y.((James(x) & Audience(y)) -> (InvitedToTakePhotoWith(x,y) | HappyToCommunique(x,y)))", "all x y z.((James(x) & Photo(y) & Audience(z)) -> (InvitedToTake(x,y,z) | HappyToCommunicate(x,y)))", "all x y z.((James(x) & Photo(y) & Audience(z)) -> (InvitedToTake(x,y) | HappyToCommunique(x,z)))"]}
{"id": "folio_train_2588", "nl": "James is either invited to take a photo with the audience or happy to communicate with each other during the dinner.", "fol": "(InvitedToTakePhoto(James) | HappyToCommunicate(James))", "prediction": ["all x y.((James(x) & Audience(y)) -> (InvitedToTakePhoto(x,y) | HappyToCommunicate(x,y)))", "all x y.((James(x) & Audience(y)) -> (InvitedToTakePhoto(x,y) | HappyToCommunicate(x,y)))", "all x y z.((James(x) & Photo(y) & Audience(z)) -> (InvitedToTake(x,y) | HappyToCommunicate(x,z)))", "all x y.((James(x) & Audience(y)) -> (InvitedToTakePhoto(x,y) | HappyToCommunicate(x,y)))", "all x y.((James(x) & Audience(y)) -> (InvitedToTakePhotoWith(x,y) | HappyToCommunicate(x,y)))", "all x y z.((James(x) & Photo(y) & Audience(z)) -> (InvitedToTake(x,y) | HappyToCommunicate(x,z)))", "all x y.((James(x) & Audience(y)) -> (InvitedToTakePhoto(x,y) | HappyToCommunique(x,y)))", "all x y.((James(x) & Audience(y)) -> (InvitedToTakePhotoWith(x,y) | HappyToCommunicate(x,y)))", "all x y.((James(x) & Audience(y)) -> (InvitedToTakePhotoWith(x,y) | HappyToCommunicateWith(x,y)))", "all x y.((James(x) & Audience(y)) -> (InvitedToTakePhoto(x,y) | HappyToCommunicate(x,y)))", "all x y.((James(x) & Audience(y)) -> (InvitedToTakePhoto(x,y) | HappyToCommunicate(x,y)))", "all x y.((James(x) & Audience(y)) -> (InvitedToTakePhoto(x,y) | HappyToCommunicate(x,y)))", "all x y.((James(x) & Dinner(y)) -> (InvitedToTakePhoto(x,y) | HappyToCommunicate(x,y)))", "all x y z.((James(x) & Audience(y) & Dinner(z)) -> (InvitedToTakePhoto(x,y) | HappyToCommunicate(x,z)))", "all x y.((James(x) & Audience(y)) -> (InvadedToTakePhoto(x,y) | HappyToCommunicate(x,y)))", "all x.(James(x) -> (InvitedToTakePhotoWithAudience(x) | HappyToCommunicateWithAudience(x)))"]}
{"id": "folio_train_2589", "nl": "The USS Salem is a heavy cruiser built for the United States navy.", "fol": "(IsHeavyCruiser(Usssalem) & ConstructedFor(Usssalem,Unitedstatesnavy))", "prediction": ["all x.((USS Salem(x) & HeavyCruiser(x) & BuiltForNasa(x)) -> BuiltForNasa(x))", "all x.((USS Salem(x) & HeavyCruiser(x) & BuiltForNatal(x)) -> BuiltForNatal(x))", "all x y z.((USS Salem(x) & HeavyCruiser(y) & Navy(z)) -> BuiltFor(x,y,z))", "all x.((USS Salem(x) & HeavyCruiser(x) & BuiltForNavy(x)) -> BuiltForNavy(x))", "all x y.((USS Salem(x) & HeavyCruiser(y)) -> BuiltFor(x,y))", "all x.(USSSalem(x) -> (HeavyCruiser(x) & BuiltForNavy(x)))", "all x y z.((USS Salem(x) & HeavyCruiser(y) & Navy(z) & BuiltFor(x,y,z)) -> BuiltFor(x,y,z))", "all x.(USSSalem(x) -> (HeavyCruiser(x) & BuiltForNatal(x)))", "all x.(USSSalem(x) -> (HeavyCruiser(x) & BuiltForNasa(x)))", "all x.(USSSalem(x) -> (HeavyCruiser(x) & BuiltForNavy(x)))", "all x.(USSSalem(x) -> (HeavyCruiser(x) & BuiltForNaval(x)))", "all x.((USS Salem(x) & HeavyCruiser(x)) -> BuiltForNavy(x))", "all x.(USSSalem(x) -> (HeavyCruiser(x) & BuiltForNature(x)))", "all x.((USS Salem(x) & HeavyCruiser(x)) -> BuiltForNatal(x))", "all x.((USS Salem(x) & HeavyCruiser(x)) -> BuiltForNaval(x))", "all x y z.((USS Salem(x) & HeavyCruiser(y) & Navy(z) & BuiltFor(x,z)) -> BuiltFor(x,y,z))"]}
{"id": "folio_train_2590", "nl": "The last heavy cruiser to enter service was the USS Salem.", "fol": "LastHeavyCruiserInService(Usssalem)", "prediction": ["all x.((HeavyCruiser(x) & EntersService(x)) -> USSSalem(x))", "all x y.((HeavyCruiser(x) & HeavyCruiser(y) & EntersService(x,y)) -> USSSalem(x))", "all x.((HeavyCruiser(x) & LastToEnterService(x)) -> USSSalem(x))", "all x.((LightCruiser(x) & EntersService(x)) -> USSSalem(x))", "all x.((HardCruiser(x) & EntersService(x)) -> USSSalem(x))", "all x y.((LightCruiser(x) & HeavyCruiser(y) & EntersService(x,y)) -> USSSalem(x))", "all x.((HeavyCruiser(x) & EntersService(x)) -> USS Salem(x))", "all x y.((HeavyCruiser(x) & HeavyCruiser(y) & EntersService(x)) -> USSSalem(x))", "all x.((HeavyCruiser(x) & EnterService(x)) -> USSSalem(x))", "all x y.((HeavyCruiser(x) & HeavyCruiser(y) & EntersService(x,y)) -> USS Salem(x))", "all x.((HeavyCruiser(x) & EntersService(x)) -> USSSalem(x))", "all x y.((HeavyCruiser(x) & HeavyCruiser(y) & EntersService(x,y)) -> USSSalem(y))", "all x y.((LightCruiser(x) & HeavyCruiser(y) & EntersService(x)) -> USSSalem(x))", "all x y.((LightCruiser(x) & HeavyCruiser(y) & EntersService(x,y)) -> USS Salem(x))", "all x y.((HeavyCruiser(x) & HeavyCruiser(y)) -> EntersService(x,y))", "all x y.((HeavyCruiser(x) & HeavyCruiser(y) & EntersService(x)) -> USSSalem(y))"]}
{"id": "folio_train_2591", "nl": "The USS Salem is a museum ship.", "fol": "IsMuseumShip(Usssalem)", "prediction": ["all x.(USSSalem(x) -> MuseumShip(x))", "(MuseumShip(USSSalem) & MuseumShip(USSSalem))", "all x.(Salem(x) -> MuseumShip(x))", "all x.((USS Salem(x) & MuseumShip(x)) -> Ship(x))", "all x.((USSSalem(x) & MuseumShip(x)) -> Ship(x))", "(MuseumShip(USS Salem) & MuseumShip(USS Salem))", "(MuseumShip(USSSalem) -> MuseumShip(USSSalem))", "All x.(USSSalem(x) -> MuseumShip(x))", "all x.((USSSalem(x) & MuseumShip(x)) -> MuseumShip(x))", "all x.((USSSalem(x) & MuseumShip(x)) -> -MuseumShip(x))", "(MuseumShip(USSSalem) & MuseumShip(USS Salem))", "all x.(USSSalem(x) -> MuseumShip(x))", "(MuseumShip(USSSalem) & MuseumShip(USSAlem))", "all x.((USS Salem(x) & MuseumShip(x)) -> MuseumShip(x))", "(MuseumShip(USSSalem) | MuseumShip(USSSalem)))", "all x.((USSSalem(x) & MuseumShip(x)) -> ShipOf(x))"]}
{"id": "folio_train_2592", "nl": "Museum ships are open to the public.", "fol": "all x.(IsMuseumShip(x) -> AccessibleToPublic(x))", "prediction": ["all x.(MuseumShip(x) -> OpenToPublic(x))", "all x y.((MuseumShip(x) & Public(y)) -> Open(x,y))", "all x y.((MuseumShip(x) & Public(y)) -> OpenTo(x,y))", "all x y.((MuseumShip(x) & Museum(y)) -> OpenToPublic(x,y))", "all x.((MuseumShip(x) & OpenToPublic(x)) -> OpenToPublic(x))", "all x y.((Museum(x) & Ship(y)) -> OpenToPublic(x,y))", "all x y.((MuseumShip(x) & Public(y)) -> Open(x))", "all x y.((MuseumShip(x) & Museum(y)) -> OpenToPublic(x))", "all x y z.((MuseumShip(x) & Public(y) & Museum(z)) -> OpenTo(x,y,z))", "all x y.((MuseumShip(x) & OpenToPublic(y)) -> OpenToPublic(x,y))", "all x.((MuseumShip(x) & OpenToPublic(x)) -> ShipOpenToPublic(x))", "all x y z.((MuseumShip(x) & Public(y) & Museum(z)) -> Open(x,y,z))", "all x.(Museum(x) -> OpenToPublic(x))", "all x.((MuseumShip(x) & OpenToPublic(x)) -> Ship(x))", "all x y z.((MuseumShip(x) & Public(y) & Open(z)) -> OpenTo(x,y,z))", "all x y.((Museum(x) & Ship(y)) -> OpenToPublic(x))"]}
{"id": "folio_train_2593", "nl": "The USS Salem served in the Atlantic and Mediterranean.", "fol": "(ServedInRegion(Usssalem,Atlantic) & ServedInRegion(Usssalem,Mediterranean))", "prediction": ["all x.(USSSalem(x) -> (ServedInAtlantic(x) & ServedInMediterranean(x)))", "all x.(USSSalem(x) -> (ServedInAtlantic(x) & ServingInMediterranean(x)))", "all x.(USSSalem(x) -> (ServedInAtlantic(x) & ServedInMediterranean(x)))", "all x.(USSSalem(x) -> (ServedInAtlantic(x) & ServicedInMediterranean(x)))", "all x.(USSSalem(x) -> (ServedAtlantic(x) & ServedMediterranean(x)))", "(ServedInAtlantic(USS Salem) & ServedInMediterranean(USS Salem))", "all x.(Salem(x) -> (ServedInAtlantic(x) & ServedInMediterranean(x)))", "All x.(USSSalem(x) -> (ServedInAtlantic(x) & ServedInMediterranean(x)))", "all x.(USSSalem(x) -> (ServedAtlantic(x) & ServingMediterranean(x)))", "all x.(USSSalem(x) -> (ServedAtlantic(x) & ServedMediterranean(x)))", "all x.(USSSalem(x) -> (ServedAtlantic(x) & ServicedMediterranean(x)))", "all x.(Salem(x) -> (ServedInAtlantic(x) & ServingInMediterranean(x)))", "(ServicesAtlantic(USS Salem) & ServesMediterranean(USS Salem))", "all x.(USSSalem(x) -> (ServedAtlantic(x) & ServedMedium(x)))", "(ServedInAtlantic(USS Salem) & ServingInMediterranean(USS Salem))", "(ServedAtlantic(USS Salem) & ServedMediterranean(USS Salem))"]}
{"id": "folio_train_2594", "nl": "The USS Salem is open to the public.", "fol": "AccessibleToPublic(Usssalem)", "prediction": ["all x.(USSSalem(x) -> OpenToPublic(x))", "All x.(USSSalem(x) -> OpenToPublic(x))", "all x.(Salem(x) -> OpenToPublic(x))", "all x.((USSSalem(x) & OpenToPublic(x)) -> OpenToPublic(x))", "all x.((USS Salem(x) & OpenToPublic(x)) -> OpenToPublic(x))", "All x.(Salem(x) -> OpenToPublic(x))", "All x.((USSSalem(x) & OpenToPublic(x)) -> OpenToPublic(x))", "All x.((USS Salem(x) & OpenToPublic(x)) -> OpenToPublic(x))", "all x.((USSSalem(x) & OpenToPublic(x)) -> ShipOpenToPublic(x))", "all x.((USS Salem(x) & OpenToPublic(x)) -> ShipOpenToPublic(x))", "all x.((USSSalem(x) & OpenToPublic(x)) -> Ship(x))", "all x.((USSSalem(x) & OpenToPublic(x)) -> -OpenToPublic(x))", "all x.((USS Salem(x) & OpenToPublic(x)) -> Ship(x))", "all x.(USSSalem(x) -> OpenToPublic(x))", "all x.((USS Salem) & OpenToPublic(x)) -> OpenToPublic(x))", "all x.((USS Salem(x) & OpenToPublic(x)) -> AvailableToPublic(x))"]}
{"id": "folio_train_2595", "nl": "There is a museum ship open to the public that served in the Mediterranean.", "fol": "exists x.(IsMuseumShip(x) & AccessibleToPublic(x) & ServedInRegion(x,Mediterranean))", "prediction": ["exists x.(MuseumShip(x) & OpenToPublic(x) & ServesInMediterranean(x))", "exists x.(MuseumShip(x) & OpenToPublic(x) & ServedInMediterranean(x))", "exists x.(MuseumShip(x) & OpenToPublic(x) & ServedInMediterranean(x))", "exists x.(MuseumShip(x) & OpenToPublic(x) & ServicedInMediterranean(x))", "exists x.(MuseumShip(x) & OpenToPublic(x) & servedInMediterranean(x))", "exists x.(MuseumShip(x) & OpenToPublic(x) & ServingInMediterranean(x))", "exists x.(MuseumShip(x) & OpenToPublic(x) & ServicingInMediterranean(x))", "exists x y.(MuseumShip(x) & OpenToPublic(x) & ServesInMediterranean(y))", "exists x y.((MuseumShip(x) & OpenToPublic(x) & ServesInMediterranean(y)) -> OpenToPublic(x))", "exists x y.(MuseumShip(x) & OpenToPublic(x) & ServicedInMediterranean(y))", "exists x.(MuseumShip(x) & OpenToPublic(x) & ServesInMedium(x))", "exists x y.(MuseumShip(x) & OpenToPublic(x) & servedInMediterranean(y))", "exists x.(MuseumShip(x) & OpenToPublic(x) & ServedInMedium(x))", "exists x.(MuseumShip(x) & OpenToPublic(x) & ServicedInMedium(x))", "exists x y.((MuseumShip(x) & OpenToPublic(x) & ServesInMediterranean(x)) -> OpenToPublic(x))", "exists x y.(MuseumShip(x) & OpenToPublic(x) & ServesInMediterranean(x))"]}
{"id": "folio_train_2596", "nl": "The USS Salem was not the last heavy cruiser to enter service.", "fol": "-LastHeavyCruiserInService(Usssalem)", "prediction": ["-LastHeavyCruiserToEnterService(USSSalem)", "-(LargeCruiser(USSSalem) & LastToEnterService(USSSalem))", "-last HeavyCruiserToEnterService(USSSalem)", "-(LightweightCruiser(USSSalem) & LastToEnterService(USSSalem))", "-(LargeCruiser(USS Salem) & LastToEnterService(USS Salem))", "-LastHorseCruiserToEnterService(USSSalem)", "-LongestHorseCruiserToEnterService(USSSalem)", "-(LargeCruiser(USSSalem) & -LargeCruiser(USSSalem))", "-LastLightCruiserToEnterService(USSSalem)", "(-last HeavyCruiserToEnterService(USSSalem))", "-LargeCruiser(USSSalem)", "-LongestHeavyCruiserToEnterService(USSSalem)", "-(LargeCruiser(USS Salem) & -LargeCruiser(USS Salem))", "-LargeCruiserToEnterService(USSSalem)", "-(LargeCruiser(USSSalem) & LastInService(USSSalem))", "-(LargeCruiser(USSSalem) & LastToEnteredService(USSSalem))"]}
{"id": "folio_train_2597", "nl": "TS Leda was a good passenger and cargo vessel.", "fol": "exists x.(TSLedaVessel(x) & IsPassengerVessel(x) & IsCargoVessel(x))", "prediction": ["all x.(TSLeda(x) -> (GoodPassengerVessel(x) & GoodCargoVessel(x)))", "all x.((TSLeda(x) & GoodPassengerVessel(x) & GoodCargoVessel(x)) -> GoodVessel(x))", "all x.((TSLeda(x) & GoodPassenger(x) & GoodCargoVessel(x)) -> GoodVessel(x))", "all x.(TsLeda(x) -> (GoodPassengerVessel(x) & GoodCargoVessel(x)))", "all x.(TSLeda(x) -> (GoodPassenger(x) & GoodCargoVessel(x)))", "all x.((TSLeda(x) & GoodPassenger(x) & GoodCargoVessel(x)) -> Good(x))", "all x.(TsLeda(x) -> (GoodPassenger(x) & GoodCargoVessel(x)))", "all x.((TSLeda(x) & GoodPassengerVessel(x) & GoodCargoVessel(x)) -> Good(x))", "all x.(TSLeda(x) -> (GoodPassengerVessel(x) & GoodCargoVessel(x)))", "all x.((TSLeda(x) & Passenger(x) & CargoVessel(x)) -> Good(x))", "all x y.((TSLeda(x) & Passenger(y) & CargoVessel(y)) -> Good(x,y))", "all x y.((TSLeda(x) & Passenger(y) & CargoVessel(x)) -> Good(x,y))", "all x.((TSLeda(x) & PassengerVessel(x) & CargoVessel(x)) -> Good(x))", "all x.((TSLeda(x) & GoodPassenger(x) & GoodCargo(x)) -> GoodVessel(x))", "all x y.((TSLeda(x) & Passenger(y) & CargoVessel(z)) -> Good(x,y,z))", "all x.(TsLeda(x) -> (GoodPassengerVessel(x) & GoodCargoVessel(x)))"]}
{"id": "folio_train_2598", "nl": "TS Leda was the first Norweigian vessel that was built with stabilizers.", "fol": "all x.(TSLedaVessel(x) -> (IsNorwegianVessel(x) & HasStabilizers(x)))", "prediction": ["all x.((NorweigianVessel(x) & BuiltWithStabilizers(x)) -> TSLeda(x))", "all x.((NorweigianVessel(x) & BuiltWithStablers(x)) -> TSLeda(x))", "all x.(TSLeda(x) -> (NorweigianVessel(x) & BuiltWithStabilizers(x)))", "all x.((NorweigianVessel(x) & NorweigianVessel(x) & BuiltWithStablers(x)) -> TSLeda(x))", "all x.(TSLeda(x) -> (NorweigianVessel(x) & BuiltWithStablers(x)))", "all x.((NorweigianVessel(x) & NorweigianVessel(x) & BuiltWithStabilizers(x)) -> TSLeda(x))", "all x.((Vessel(x) & Norweigian(x) & BuiltWithStablers(x)) -> TSLeda(x))", "all x.((Vessel(x) & Norweigian(x) & BuiltWithStabilizers(x)) -> TSLeda(x))", "all x.((NorweigianVessel(x) & NorweigianVessel(x) & BuiltWithStabilizers(x)) -> Leda(x))", "all x.((Vessel(x) & Norweigian(x) & BuiltWithStabilizers(x)) -> Leda(x))", "all x.((NorweigianVessel(x) & TSLeda(x)) -> BuiltWithStabilizers(x))", "all x.((NorweigianVessel(x) & TSLeda(x)) -> BuiltWithStablers(x))", "all x.((NorweigianVessel(x) & NorweigianVessel(x) & BuiltWithStablers(x)) -> Leda(x))", "all x.((NorweigianVessel(x) & BuiltWithStabilizers(x)) -> Leda(x))", "all x.((Vessel(x) & Norweigian(x) & BuiltWithStablers(x)) -> Leda(x))", "TS Leda was the first Norweigian vessel that was builtWithStabilizers."]}
{"id": "folio_train_2599", "nl": "Stabilizers are mechanical devices that are only on ships that have powerful steam turbine engines.", "fol": "all x.((HasStabilizers(x) -> OnlyOnShipsWithStabilizers(x)) & HasSteamTurbineEngine(x))", "prediction": ["all x.(Stabilizer(x) -> (MechanicalDevice(x) & OnlyOnShipsWithPowerfulSteamTurbineEngines(x)))", "all x.(Stabilizer(x) -> (MechanicalDevice(x) & LocatedOnShip(x) & PowerfulSteamTurbineEngine(x)))", "all x.(Stabilizer(x) -> (MechanicalDevice(x) & OnlyOnShips(x) & PowerfulSteamTurbineEngines(x)))", "all x.(Stabilizer(x) -> (MechanicalDevice(x) & LocatedOnShip(x) & HasPowerfulSteamTurbineEngine(x)))", "all x.(Stabilizer(x) -> (MechanicalDevice(x) & OnlyOnShip(x) & PowerfulSteamTurbineEngine(x)))", "all x.(Stabilizer(x) -> (MechanicalDevice(x) & OnlyOnShips(x) & PowerfulSteamTurbineEngine(x)))", "all x.(Stabilizer(x) -> (MechanicalDevice(x) & LocatedOnShipsWithPowerfulSteamTurbineEngines(x)))", "all x.(Stabilizer(x) -> (MechanicalDevice(x) & OnShip(x) & PowerfulSteamTurbineEngine(x)))", "all x.(Stabilizer(x) -> (MechanicalDevice(x) & OnlyOnShipsWithPowerfulSteamTurbineEngines(x)))", "all x y.((Stabilizer(x) & Ship(y) & PowerfulSteamTurbineEngine(y)) -> MechanicalDevice(x))", "all x.(Stabilizer(x) -> (MechanicalDevice(x) & LocatedOnShips(x) & PowerfulSteamTurbineEngines(x)))", "all x.(Stabilizer(x) -> (MechanicalDevice(x) & LocatedOnShip(x) & PowerfulSteamTurbineEngines(x)))", "all x y.((Stabilizer(x) & Ship(y) & PowerfulSteamTurbineEngine(y)) -> MechanicalDevice(x,y))", "all x.(Stabilizer(x) -> (MechanicalDevice(x) & OnShipsWithPowerfulSteamTurbineEngines(x)))", "all x.(Stabilizer(x) -> (MechanicalDevice(x) & OnlyOnShips(x) & HasPowerfulSteamTurbineEngines(x)))", "all x.(Stabilizer(x) -> (MechanicalDevice(x) & LocatedOnShips(x) & PowerfulSteamTurbineEngine(x)))"]}
{"id": "folio_train_2600", "nl": " To be a good passenger and cargo vessel, ships must be quiet and good at sea.", "fol": "all x.(((IsPassengerVessel(x) & IsCargoVessel(x)) -> IsQuiet(x)) & IsGoodAtSea(x))", "prediction": ["all x.((Ship(x) & Quiet(x) & GoodAtSea(x)) -> GoodPassengerAndCargoVessel(x))", "all x.((Ship(x) & GoodPassengerVessel(x) & GoodCargoVessel(x)) -> (Quiet(x) & GoodAtSea(x)))", "all x.((Ship(x) & GoodPassenger(x) & GoodCargoVessel(x)) -> (Quiet(x) & GoodAtSea(x)))", "all x.((Ship(x) & Passenger(x) & CargoVessel(x)) -> (Quiet(x) & GoodAtSea(x)))", "all x.(GoodPassengerAndCargoVessel(x) -> (Quiet(x) & GoodAtSea(x)))", "all x.((Ship(x) & PassengerVessel(x) & CargoVessel(x)) -> (Quiet(x) & GoodAtSea(x)))", "all x.((Ship(x) & Quiet(x) & GoodAtSea(x)) -> GoodPassengerVessel(x) & GoodCargoVessel(x))", "all x.((Ship(x) & Quiet(x) & GoodAtSea(x)) -> GoodPassenger(x) & GoodCargoVessel(x))", "all x.((Ship(x) & Passenger(x) & Cargo(x)) -> (Quiet(x) & GoodAtSea(x)))", "all x.((Shaped(x) & GoodPassenger(x) & GoodCargoVessel(x)) -> (Quiet(x) & GoodAtSea(x)))", "all x.((Shore(x) & GoodPassenger(x) & GoodCargoVessel(x)) -> (Quiet(x) & GoodAtSea(x)))", "all x.((Shaped(x) & Passenger(x) & CargoVessel(x)) -> (Quiet(x) & GoodAtSea(x)))", "all x.((Shore(x) & Quiet(x) & GoodAtSea(x)) -> GoodPassengerAndCargoVessel(x))", "all x.((Shaped(x) & Quiet(x) & GoodAtSea(x)) -> GoodPassengerAndCargoVessel(x))", "all x.((Shark(x) & Quiet(x) & GoodAtSea(x)) -> GoodPassengerAndCargoVessel(x))", "all x.(GoodPassengerAndCargoVessel(x) -> (Quiet(x) & GoodAtSea(x)))"]}
{"id": "folio_train_2601", "nl": "Some ships that are quiet and good at sea have powerful steam turbine engines.", "fol": "exists x.(IsQuiet(x) & IsGoodAtSea(x) & HasSteamTurbineEngine(x))", "prediction": ["exists x.(Ship(x) & Quiet(x) & GoodAtSea(x) & HasPowerfulSteamTurbineEngines(x))", "exists x.(Ship(x) & Quiet(x) & GoodAtSea(x) & PowerfulSteamTurbineEngine(x))", "exists x.(Ship(x) & Quiet(x) & GoodAtSea(x) & PowerfulSteamTurbineEngines(x))", "exists x.(Ship(x) & Quiet(x) & GoodAtSea(x) & HasPowerfulSteamTurbineEngine(x))", "exists x.((Ship(x) & Quiet(x) & GoodAtSea(x)) -> PowerfulSteamTurbineEngines(x))", "exists x.((Ship(x) & Quiet(x) & GoodAtSea(x)) -> HasPowerfulSteamTurbineEngines(x))", "exists x.((Ship(x) & Quiet(x) & GoodAtSea(x)) -> PowerfulSteamTurbineEngine(x))", "exists x.(Ship(x) & QuietAndGoodAtSea(x) & HasPowerfulSteamTurbineEngines(x))", "all x.((Ship(x) & Quiet(x) & GoodAtSea(x)) -> PowerfulSteamTurbineEngines(x))", "exists x.((Ship(x) & Quiet(x) & GoodAtSea(x)) -> HasPowerfulSteamTurbineEngine(x))", "exists x.(Ship(x) & Quiet(x) & GoodAtSea(x)) -> PowerfulSteamTurbineEngines(x))", "exists x.(Ship(x) & Quiet(x) & GoodAtSea(x)) -> HasPowerfulSteamTurbineEngines(x))", "exists x.(Ship(x) & QuietAndGoodAtSea(x) & PowerfulSteamTurbineEngines(x))", "exists x.(Shaped(x) & Quiet(x) & GoodAtSea(x) & HasPowerfulSteamTurbineEngines(x))", "all x.((Ship(x) & Quiet(x) & GoodAtSea(x)) -> PowerfulSteamTurbineEngine(x))", "exists x.(Ship(x) & QuietAndGoodAtSea(x) & PowerfulSteamTurbineEngine(x))"]}
{"id": "folio_train_2602", "nl": "TS Leda was quiet and good at sea.", "fol": "exists x.(TSLedaVessel(x) & IsQuiet(x) & IsGoodAtSea(x))", "prediction": ["all x.(TSLeda(x) -> (Quiet(x) & GoodAtSea(x)))", "all x.((TSLeda(x) & Quiet(x) & GoodAtSea(x)) -> GoodAtSea(x))", "all x.(TsLeda(x) -> (Quiet(x) & GoodAtSea(x)))", "All x.(TSLeda(x) -> (Quiet(x) & GoodAtSea(x)))", "All x.((TSLeda(x) & Quiet(x) & GoodAtSea(x)) -> GoodAtSea(x))", "all x y.((TSLeda(x) & Sea(y)) -> (Quiet(x) & GoodAt(x,y)))", "All x.(TsLeda(x) -> (Quiet(x) & GoodAtSea(x)))", "all x.((TS Leda(x) & Quiet(x) & GoodAtSea(x)) -> GoodAtSea(x))", "all x.((TsLeda(x) & Quiet(x) & GoodAtSea(x)) -> GoodAtSea(x))", "all x y.((TSLeda(x) & Sea(y)) -> (Quiet(x,y) & GoodAt(x,y)))", "(Quiet(TS Leda) & GoodAtSea(TS Leda))", "all x.(TSLeda(x) -> (Quiet(x) & GoodAtSea(x)))", "all x.((TSLeda(x) & Quiet(x)) -> GoodAtSea(x))", "all x.((TSLeda(x) & Quiet(x) & GoodAtSea(x)) -> GreatAtSea(x))", "all x.((TSLeda(x) & Quiet(x) & GoodAtSea(x)) -> VeryGoodAtSea(x))", "all x.((TSLeda(x) & Quiet(x) & GoodAtSea(x)) -> ExcellentAtSea(x))"]}
{"id": "folio_train_2603", "nl": "Some ships that arFe quiet and good at sea have powerful steam turbine engines.", "fol": "exists x.(IsQuiet(x) & IsGoodAtSea(x) & HasSteamTurbineEngine(x))", "prediction": ["exists x.(Ship(x) & ArFeQuiet(x) & GoodAtSea(x) & HasPowerfulSteamTurbineEngines(x))", "exists x.(Ship(x) & ArFeQuiet(x) & GoodAtSea(x) & PowerfulSteamTurbineEngine(x))", "exists x.(Ship(x) & ArFeQuiet(x) & GoodAtSea(x) & HasPowerfulSteamTurbineEngine(x))", "exists x.(Ship(x) & ArFeQuiet(x) & GoodAtSea(x) & PowerfulSteamTurbineEngines(x))", "exists x.(Ship(x) & ArFe(x) & Quiet(x) & GoodAtSea(x) & HasPowerfulSteamTurbineEngines(x))", "exists x.(Ship(x) & ArFeSilent(x) & GoodAtSea(x) & HasPowerfulSteamTurbineEngines(x))", "exists x.((Ship(x) & ArFeQuiet(x) & GoodAtSea(x)) -> PowerfulSteamTurbineEngines(x))", "exists x.(Ship(x) & ArFe(x) & Quiet(x) & GoodAtSea(x) & PowerfulSteamTurbineEngine(x))", "exists x.(Ship(x) & ArFeQuietAndGoodAtSea(x) & HasPowerfulSteamTurbineEngines(x))", "all x.((Ship(x) & ArFeQuiet(x) & GoodAtSea(x)) -> PowerfulSteamTurbineEngines(x))", "exists x.((Ship(x) & ArFeQuiet(x) & GoodAtSea(x)) -> HasPowerfulSteamTurbineEngines(x))", "exists x.(Ship(x) & ArFe(x) & Quiet(x) & GoodAtSea(x) & PowerfulSteamTurbineEngines(x))", "exists x.(Ship(x) & ArFe(x) & Quiet(x) & GoodAtSea(x) & HasPowerfulSteamTurbineEngine(x))", "exists x.(Ship(x) & ArFeSilent(x) & GoodAtSea(x) & HasPowerfulSteamTurbineEngine(x))", "exists x.(Ship(x) & ArFeSilent(x) & GoodAtSea(x) & PowerfulSteamTurbineEngine(x))", "all x.((Ship(x) & ArFeQuiet(x) & GoodAtSea(x)) -> HasPowerfulSteamTurbineEngines(x))"]}
{"id": "folio_train_2604", "nl": "TS Leda had powerful steam turbine engines.", "fol": "all x.(TSLedaVessel(x) -> HasSteamTurbineEngine(x))", "prediction": ["all x.(TSLeda(x) -> PowerfulSteamTurbineEngines(x))", "all x.((TSLeda(x) & PowerfulSteamTurbineEngines(x)) -> Powerful(x))", "all x.(TSLeda(x) -> (PowerfulSteamTurbineEngines(x) & PowerfulSteamTurbineEngines(x)))", "all x y.((TSLeda(x) & SteamTurbineEngine(y)) -> Powerful(x,y))", "all x.(TsLeda(x) -> PowerfulSteamTurbineEngines(x))", "all x.(TSLeda(x) -> HasPowerfulSteamTurbineEngines(x))", "all x.(TSLeda(x) -> PowerfulSteamTurbineEngine(x))", "all x.(TSLeda(x) -> (PowerfulSteamTurbineEngines(x) & PowerfulSteamTurbineEngines(x) & PowerfulSteamTurbineEngines(x)))", "all x y.((TSLeda(x) & SteamTurbine(y)) -> Powerful(x,y))", "all x.(TSLeda(x) -> HadPowerfulSteamTurbineEngines(x))", "all x.(TsLeda(x) -> (PowerfulSteamTurbineEngines(x) & PowerfulSteamTurbineEngines(x)))", "all x.(TSLeda(x) -> (PowerfulSteamTurbineEngines(x) | PowerfulSteamTurbineEngines(x)))", "all x.(TSLeda(x) -> PowerfulSteamTurbineEngines(x))", "All x.(TSLeda(x) -> PowerfulSteamTurbineEngines(x))", "all x.((TSLeda(x) & PowerfulSteamTurbineEngines(x)) -> PowerfulSteamTurbineEngines(x))", "all x.((TSLeda(x) & PowerfulSteamTurbineEngine(x)) -> Powerful(x))"]}
{"id": "folio_train_2605", "nl": "TS Leda was not a Norweigian vessel.", "fol": "all x.(TSLedaVessel(x) -> -IsNorwegianVessel(x))", "prediction": ["TS Leda - NorweigianVessel(TSLeda))", "all x.(TSLeda(x) -> -NorweigianVessel(x))", "TS Leda - NorweigianVessel(TSLeda)", "TSLeda - NorweigianVessel(TSLeda))", "-NorweigianVessel(TSLeda)", "TSLeda - NorweigianVessel(TSLeda)", "TS Leda was not a NorweigianVessel(TSLeda)", "all x.(TSLeda(x) -> -NorwegianVessel(x))", "TS Leda was -NorweigianVessel(TSLeda)", "TS Leda - NorweigianVessel(TS)", "TS Leda & -NorweigianVessel(TSLeda))", "(-NorweigianVessel(TSLeda))", "TS Leda was -NorweigianVessel(TSLeda))", "TSLeda -NorweigianVessel(TSLeda))", "TS Leda was not NorweigianVessel(TSLeda)", "TSLeda was -NorweigianVessel(TSLeda)"]}
{"id": "folio_train_2606", "nl": "Rosa was born in Santiago. ", "fol": "BornIn(Rosa,Santiago)", "prediction": ["(Birth(Rosa) & BornInSantiago(Rosa))", "Rosa was born in Santiago.", "(Birth(Rosa) & BornInSantiago(Rosa,Santiago))", "all x.(Rosa(x) -> BornInSantiago(x))", "(Birth(Rosa) & BornIn(Rosa,Santiago))", "(BirthInSantiago(Rosa) & BornInSantiago(Rosa))", "(Birth(Rosa,Santiago) & BornIn(Rosa,Santiago))", "(Birth(Rosa) & BornIn(Rosa))", "All x.(Rosa(x) -> BornInSantiago(x))", "(Birth(Rosa) & BornIn(Rosa) & BornIn(Rosa))", "(Birth(Rosa,Santiago))", "(Birth(Rosa) & BornInSatoshia(Rosa))", "(Birth(Rosa) & BornInSaudia(Rosa))", "(Birth(Rosa) & BornInSao Paulo(Rosa))", "(Birth(Rosa) & BornIn(Rosa,Satoshia))", "-(Birth(Rosa) & BornInSantiago(Rosa))"]}
{"id": "folio_train_2607", "nl": "Santiago is the capital and largest city of Chile.", "fol": "(IsCapitalOf(Santiago,Chile) & IsLargestCityOf(Santiago,Chile))", "prediction": ["(Capital(Santiago) & LargestCity(Santiago))", "Santiago (Capital(x) & LargestCity(x))", "Santiago (Capital(Chile) & LargestCity(Chile))", "Santiago (capital(Chile) & LargestCity(Chile))", "Santiago (capital(x) & LargestCity(x))", "(Capital(Santiago) & LargestCity(Santiago) & LocatedIn(Santiago,Chile))", "(Capital(Santiago) & LargestCity(Santiago) & LocatedInChile(Santiago))", "Santiago (Capital(x) & LargestCityOfChile(x))", "(Capital(Santiago) & LargestCity(Santiago) & LocatedIn(Santiago))", "(Capital(Santiago) & LargestCityOfChile(Santiago))", "(Capital(Santiago) & LargestCity(Santiago,Chile))", "(Capital(Santiago) & LargestCity(Santiago) & LocatedIn(Santiago,Chili))", "(Capital(Santiago) & LargestCity(Santiago) & Chile(Santiago))", "Santiago is capital and largestCityOfChile.", "Santiago (Capital(Chile) & LargestCity(Chili))", "(Capital(Santiago) & LargestCity(Santiago) & LocatedInChile(Santiago,Chile))"]}
{"id": "folio_train_2608", "nl": "Rosa is the daughter of a Catalan building contractor, Jose.", "fol": "(IsDaughterOf(Rosa,Jose) & IsBuildingContractor(Jose) & -IsChilean(Jose))", "prediction": ["all x y.((Rosa(x) & CatalanBuildingContractor(y)) -> DaughterOf(x,y))", "(DaughterOfCatalanBuildingContractor(Rosa) & DaughterOfJose(Rosa))", "all x.((Rosa(x) & CatalanBuildingContractor(x)) -> DaughterOf(x,Jose))", "all x y.((Rosa(x) & CatalanBuildingContractor(y)) -> Daughter(x,y))", "all x.(Rosa(x) -> (DaughterOfCatalanBuildingContractor(x) & DaughterOfJose(x)))", "(DaughterOfCatalanBuildingContractor(Rosa) & DaughterOfJose(Rosa))", "all x y.((Rosa(x) & CatalanBuildingContractor(y)) -> DaughterOf(x,y))", "(Daughter(Rosa,CatalanBuildingContractor) & DaughterOf(Rosa,CatalanBuildingContractor))", "all x y z.((Rosa(x) & CatalanBuildingContractor(y) & Jose(z)) -> DaughterOf(x,y,z))", "(Daughter(Rosa) & CatalanBuildingContractor(Jose))", "all x y z.((Rosa(x) & CatalanBuildingContractor(y) & CatalanBuildingContractor(z)) -> DaughterOf(x,y,z))", "all x y z.((Rosa(x) & CatalanBuildingContractor(y) & Jose(z)) -> Daughter(x,y,z))", "all x y z.((Rosa(x) & CatalanBuildingContractor(y) & CatalanBuildingContractor(z)) -> Daughter(x,y,z))", "(Daughter(Rosa,CatalanBuildingContractor) & DaughterOf(Rosa,CatalanBuildingContractor))", "all x y.((Rosa(x) & CatalanBuildingConstruction(y)) -> DaughterOf(x,y))", "(DaughterOfCatalanBuildingContractor(Rosa) & DaughterOfJose(Rosa,Catalan))"]}
{"id": "folio_train_2609", "nl": "Jose has a Chilean wife, Carmen.", "fol": "(IsWifeOf(Jose,Carmen) & IsChilean(Carmen))", "prediction": ["all x.(Jose(x) -> ChileanWife(x,Carmen))", "all x y z.((Jose(x) & ChileanWife(y) & Carmen(z)) -> Has(x,y,z))", "all x.((Jose(x) & ChileanWife(x,Carmen)) -> Has(x,Jose))", "all x y.((Jose(x) & ChileanWife(y)) -> HasCarmen(x,y))", "all x y.((Jose(x) & ChileanWife(y)) -> Has(x,y))", "all x y.((Jose(x) & Chilean(y)) -> Has(x,y))", "(HasChileanWife(Jose) & HasChileanWife(Jose))", "all x y z.((Jose(x) & ChileanWife(y) & Carmen(z)) -> Has(x,y))", "all x y.((Jose(x) & ChileanWife(y) & Carmen(y)) -> Has(x,y))", "all x.((Jose(x) & ChileanWife(x,Carmen)) -> Has(x,y))", "all x.((Jose(x) & ChileanWife(x)) -> Carmen(x))", "all x.(Jose(x) -> ChileanWifeCarmen(x))", "exists x.(Jose(x) & ChileanWife(x,Carmen))", "all x y.((Jose(x) & ChileanWife(y)) -> (Has(x,y) & Has(x,y)))", "all x y z.((Jose(x) & ChileanWife(y) & Carmen(z)) -> HasWife(x,y,z))", "all x.((Jose(x) & ChileanWife(x,Carmen)) -> HasWife(x,Carmen))"]}
{"id": "folio_train_2610", "nl": "If someone is another person's daughter, she is also the daughter of the another person's wife.", "fol": "all z.((IsDaughterOf(x,y) & IsWifeOf(y,z)) -> IsDaughterOf(x,z))", "prediction": ["all x y.((Person(x) & Person(y) & Daughter(x,y)) -> DaughterOfWife(x,y))", "all x y.((Daughter(x,y) & Person(y)) -> DaughterOfWife(x,y))", "all x y.((Daughter(x) & Person(y)) -> DaughterOfWife(x,y))", "all x y.((Daughter(x) & Person(y)) -> DaughterOf(x,y))", "all x y.((Daughter(x,y) & Person(y)) -> DaughterOf(x,y))", "all x y.((Person(x) & Person(y) & Daughter(x,y)) -> DaughterOf(x,y))", "all x y.((Daughter(x) & Person(y) & DaughterOf(x,y)) -> DaughterOf(x,y))", "all x y.((Person(x) & Person(y)) -> DaughterOf(x,y))", "all x y.((Person(x) & Person(y) & DaughterOf(x,y)) -> DaughterOf(x,y))", "all x y.((Daughter(x) & Person(y) & Daughter(x,y)) -> DaughterOfWife(x,y))", "all x y.((Person(x) & Person(y)) -> DaughterOfWife(x,y))", "all x y.((Daughter(x) & Person(y) & Daughter(x,y)) -> DaughterOf(x,y))", "all x.((Daughter(x) & Person(x)) -> DaughterOfWife(x))", "all x y z.((Daughter(x) & Person(y) & Person(z)) -> DaughterOf(x,y,z))", "all x y.((Person(x) & Person(y)) -> Daughter(x,y))", "all x y.((Person(x) & Person(y) & DaughterOf(x,y)) -> DaughterOfWife(x,y))"]}
{"id": "folio_train_2611", "nl": "A building contractor is responsible for the day-to-day oversight of a construction site. ", "fol": "all x.exists y.((IsBuildingContractor(x) & IsConstructionSite(y)) -> Oversees(x,y))", "prediction": ["all x y.((BuildingConsultant(x) & ConstructionSite(y)) -> OverseesDayToDay(x,y))", "all x y.((BuildingContractors(x) & ConstructionSite(y)) -> OverseesDayToDay(x,y))", "all x y.((BuildingContractor(x) & ConstructionSite(y)) -> OverseesDayToDay(x,y))", "all x y z.((BuildingConsultant(x) & ConstructionSite(y) & ConstructionSite(z)) -> OverseesDayToDay(x,y,z))", "all x y.((BuildingConstructionConsultant(x) & ConstructionSite(y)) -> OverseesDayToDay(x,y))", "all x y.((BuildingConsultant(x) & ConstructionSite(y)) -> ResponsibleForDayToDayOversight(x,y))", "all x y z.((BuildingConstructionConsultant(x) & ConstructionSite(y) & ConstructionSite(z)) -> OverseesDayToDay(x,y,z))", "all x y.((BuildingContractor(x) & ConstructionSite(y)) -> ResponsibleForDayToDayOversight(x,y))", "all x y.((BuildingConstructionContractor(x) & ConstructionSite(y)) -> OverseesDayToDay(x,y))", "all x y.((BuildingConstructionContractors(x) & ConstructionSite(y)) -> OverseesDayToDay(x,y))", "all x y.((BuildingContractors(x) & ConstructionSite(y)) -> ResponsibleForDayToDayOversight(x,y))", "all x y.((BuildingConstructionConsultant(x) & ConstructionSite(y)) -> ResponsibleForDayToDayOversight(x,y))", "all x y z.((BuildingConstructionContractors(x) & ConstructionSite(y) & ConstructionSite(z)) -> OverseesDayToDay(x,y,z))", "all x y z.((BuildingConsultant(x) & ConstructionSite(y) & ConstructionSite(z)) -> ResponsibleForDayToDayOversight(x,y,z))", "all x y.((BuildingConstructionConstructionSite(x) & ConstructionSite(y)) -> OverseesDayToDay(x,y))", "all x y.((BuildingConstructionContractor(x) & ConstructionSite(y)) -> ResponsibleForDayToDayOversight(x,y))"]}
{"id": "folio_train_2612", "nl": "Rosa was born in the largest city of Chile.", "fol": "exists x.(BornIn(Rosa,x) & IsLargestCityOf(x,Chile))", "prediction": ["Rosa was born in the largest city of Chile.", "(Birth(Rosa,Chile) & LargestCity(Rosa,Chile))", "(Birth(Rosa) & LargestCity(Rosa,Chile))", "all x.(Rosa(x) -> BornInLargestCityOfChile(x))", "(Birth(Rosa) & LargestCity(Rosa) & BornIn(Rosa,Chile))", "(Birth(Rosa) & LargestCity(Rosa) & BornIn(Rosa))", "(Birth(Rosa) & LargestCityOfChile(Rosa))", "all x.(Rosa(x) -> (BirthInLargestCity(x) & BornIn(x,Chile)))", "(Birth(Rosa) & LargestCity(Rosa))", "all x.(Rosa(x) -> BornInLargestCity(x))", "(Birth(Rosa,Chile) & LargestCity(Rosa))", "(Birth(Rosa) & LocatedInLargestCity(Rosa,Chile))", "(Birth(Rosa) & LargestCityInChile(Rosa))", "all x.(Rosa(x) -> BornInLargestCityOfChile(x))", "(Birth(Rosa) & LargestCity(Rosa,Chili))", "(Birth(Rosa) & LargestCityOfChile(Rosa,Chile))"]}
{"id": "folio_train_2613", "nl": "Neither of Rosa's parents is Chilean.", "fol": "-exists x.(IsDaughterOf(Rosa,x) & IsChilean(x))", "prediction": ["-(RosasParent(Rosa) & Chilean(Rosa))", "-(Rosa'sParent(Rosa) & Chilean(Rosa))", "(-(RosasParent(Rosa) & Chilean(Rosa)))", "(-(Rosa'sParent(Rosa) & Chilean(Rosa)))", "-(RoseParent(Rosa) & Chilean(Rosa))", "-(Rose'sParent(Rosa) & Chilean(Rosa))", "-(RoseSibling(Rosa) & Chilean(Rosa))", "-(RosasParent(Rosa) & Chilean(Rosa,Rosa))", "-(RosaSibling(Rosa) & Chilean(Rosa))", "-(RoseParent(Rose) & Chilean(Rose))", "-(Rose(Rosa) & Chilean(Rosa))", "-exists x.(Parent(x) & Rosa(x) & -Chilean(x))", "-(Rosa(Rosa) & Chilean(Rosa))", "-exists x.(Parent(x) & Rosa(x) & Chilean(x))", "-(RosasParent(Rose) & Chilean(Rose))", "-(RosasParent(r) & Chilean(r))"]}
{"id": "folio_train_2614", "nl": "Rosa is the daughter of someone who is responsible for the oversight of a construction site.", "fol": "exists x y.(IsDaughterOf(Rosa,x) & IsConstructionSite(y) & Oversees(x,y))", "prediction": ["all x y.((Rosa(x) & Person(y)) -> OverseesConstructionSite(x,y))", "all x y z.((Rosa(x) & Person(y) & ConstructionSite(z)) -> Oversees(x,y,z))", "all x y.((Daughter(x) & ConstructionSite(y)) -> ResponsibleForOversight(x,y))", "all x.((Daughter(x) & OverseesConstructionSite(x)) -> Rosa(x))", "all x y.((Daughter(x) & ConstructionSite(y) & ResponsibleForOversight(x,y)) -> Rosa(x))", "all x y.((Rose(x) & Person(y)) -> OverseesConstructionSite(x,y))", "all x y z.((Rose(x) & Person(y) & ConstructionSite(z)) -> Oversees(x,y,z))", "all x.((Daughter(x) & ResponsibleForConstructionSite(x)) -> Rosa(x))", "all x y z.((Rosa(x) & Person(y) & ConstructionSite(z)) -> (Daughter(x,y) & ResponsibleForOversight(x,z)))", "all x y.((Rosa(x) & Person(y) & OverseesConstructionSite(x,y)) -> DaughterOf(x,y))", "all x y z.((Rosa(x) & Person(y) & ConstructionSite(z)) -> (DaughterOf(x,y) & ResponsibleForOversight(x,z)))", "all x y.((Rosa(x) & Person(y) & ResponsibleForConstructionSite(x,y)) -> DaughterOf(x,y))", "all x y.((Rosa(x) & Person(y) & OverseesConstructionSite(x,y)) -> Daughter(x,y))", "all x y.((Daughter(x) & ConstructionSite(y)) -> Oversees(x,y))", "all x.(Rosa(x) -> (Daughter(x) & ResponsibleForConstructionSite(x)))", "all x y z.((Rosa(x) & Person(y) & ConstructionSite(z) & ResponsibleForOversight(x,y,z)) -> DaughterOf(x,y))"]}
{"id": "folio_train_2615", "nl": "Tyga is a rapper.", "fol": "IsRapper(Tyga)", "prediction": ["Tyga is rapper.", "(Rapper(Tyga) & Rapper(Tyga))", "all x.(Tyga(x) -> Rapper(x))", "(Rapster(Tyga) & Rapper(Tyga))", "exists x.(Tyga(x) & Rapper(x))", "Tyga is a rapper.", "(Rapper(Tyga) -> Rapper(Tyga))", "(Rapster(Tyga) | Rapper(Tyga)))", "(Rapper(Tyga) -> Rapper(Tyga))", "Tyga is rapper(Tyga)", "Tyga is rapper(ty) & Rapper(ty))", "(Rapper(Tyga) | Rapper(Tyga)))", "(Rapper(Tyga) | Rapper(Tyga))", "(Rapster(Tyga) | Rapper(Tyga))", "Tyga (Rapper(ty) & Rapper(ty))", "Tyga(Tyga) is rapper(Tyga)"]}
{"id": "folio_train_2616", "nl": "Rappers release rap albums.", "fol": "ReleasesAlbum(Tyga,WellDone3)", "prediction": ["all x.(Rapper(x) -> ReleasesRapAlbums(x))", "all x y.((Rapper(x) & RapAlbum(y)) -> Releases(x,y))", "all x y.((Rrapper(x) & RapAlbum(y)) -> Releases(x,y))", "all x y.((Rapper(x) & RapAlbum(y)) -> Releases(x,y))", "all x y.((Rapper(x) & RapAlbum(y)) -> Release(x,y))", "all x.(Rapper(x) -> ReleasesRapAlbums(x))", "all x y z.((Rapper(x) & RapAlbum(y) & Album(z)) -> Releases(x,y,z))", "all x.(Rapper(x) -> ReleasesRapAlbum(x))", "all x y.((Rrapper(x) & RapAlbum(y)) -> Release(x,y))", "all x y z.((Rapper(x) & RapAlbum(y) & Album(z)) -> Release(x,y,z))", "all x.(Rrapper(x) -> ReleasesRapAlbums(x))", "all x y z.((Rrapper(x) & RapAlbum(y) & Album(z)) -> Releases(x,y,z))", "all x y.((Rapper(x) & RapAlbum(y)) -> Release(x,y))", "all x.(Rapper(x) -> ReleasesRapAlbum(x))", "all x y z.((Rrapper(x) & RapAlbum(y) & Album(z)) -> Release(x,y,z))", "all x y z.((Rapper(x) & RapAlbum(y) & Album(z)) -> Releases(x,y))"]}
{"id": "folio_train_2617", "nl": "Tyga released the Well Done 3 album.", "fol": "all x y.((IsRapper(x) & ReleasesAlbum(x,y)) -> IsRapAlbum(y))", "prediction": ["Tyga released WellDone3 album.", "All x.(Tyga(x) -> WellDone3(x))", "(WellDone(Tyga) & WellDone(Tyga))", "All x.(Tyga(x) -> WellDone(x))", "All x.(Tyga(x) -> WellDone3Album(x))", "(WellDone3(Tyga) & Released(Tyga))", "Tyga released WellDone3(x)", "Tyga released WellDone3 Album.", "Tyga released WellDone3(Tyga)", "(WellDone(Tyga) & Released(Tyga,WellDone3))", "(WellDone(Tyga) & ReleasedAlbum(Tyga))", "Tyga released WellDone3(x) -> Released(x))", "(WellDone3(Tyga) & Released(Tyga,3))", "Tyga released the WellDone3Album(Tyga)", "Tyga released WellDone3(y)", "Tyga released WellDone3 (album)"]}
{"id": "folio_train_2618", "nl": "Rappers are not opera singers.", "fol": "all x.(IsRapper(x) -> -IsNotOperaSinger(x))", "prediction": ["all x.(Rapper(x) -> -OperaSinger(x))", "all x.(Rapper(x) -> -OperaSinger(x))", "all x.(Rapper(x) -> -OperaSinger(x))", "all x.(Rrapper(x) -> -OperaSinger(x))", "all x.(Raper(x) -> -OperaSinger(x))", "all x.(Rappler(x) -> -OperaSinger(x))", "all x y.((Rapper(x) & OperaSinger(y)) -> -(Rapper(x) & OperaSinger(x)))", "all x y.((Rapper(x) & OperaSinger(y)) -> -(Rapper(x) & OperaSinger(x)))", "all x y.((Rapper(x) & OperaSinger(y)) -> -(Rapper(x) & OperaSinger(x)))", "all x.(Raccoon(x) -> -OperaSinger(x))", "all x.(Rabbit(x) -> -OperaSinger(x))", "all x y.((Rapper(x) & OperaSinger(y)) -> -((Rapper(x) & OperaSinger(x))))", "all x.(Rapper(x) -> (-OperaSinger(x)))", "all x y.((Rapper(x) & OperaSinger(y)) -> -((Rapper(x) & OperaSinger(x))))", "all x y.((Rapper(x) & OperaSinger(y)) -> -(Rapper(x) & OperaSinger(x))))", "all x y.((Rapper(x) & OperaSinger(y)) -> -(Rapper(x) & OperaSinger(y)))"]}
{"id": "folio_train_2619", "nl": "Well Done 3 is a rap album.", "fol": "IsRapAlbum(WellDone3)", "prediction": ["All x.(WellDone(x) -> RapAlbum(x))", "All x.(WellDone3(x) -> RapAlbum(x))", "WellDone3 is a RapAlbum(x)", "all x.(WellDone(x) -> RapAlbum(x))", "All x.((WellDone(x) & WellDone(x)) -> RapAlbum(x))", "all x.(WellDone3(x) -> RapAlbum(x))", "(RapAlbum(WellDone3) & -RapAlbum(WellDone3))", "All x.((WellDone(x) & -RapAlbum(x)) -> WellDone(x))", "WellDone3 is a RapAlbum.", "WellDone3 is rapalbum.", "WellDone3(x) -> RapAlbum(x))", "All x.((WellDone(x) & RapAlbum(x)) -> WellDone(x))", "(RapAlbum(WellDone3) & -RapAlbum(WellDone3) & -RapAlbum(WellDone3))", "All x.((WellDone(x) & -RapAlbum(x)) -> WellDone3(x))", "All x.((WellDone(x) & -RapAlbum(x)) -> -RapAlbum(x))", "(RapAlbum(WellDone3) & -RapAlbum(WellDone3) & -RapAlbum(WellDone3)))"]}
{"id": "folio_train_2620", "nl": "Tyga is an opera singer.", "fol": "IsNotOperaSinger(Tyga)", "prediction": ["(OperaSinger(Tyga) & OperaSinger(Tyga))", "Tyga is an opera singer.", "(OperaSinger(Tyga) | OperaSinger(Tyga)))", "(OperaSinger(Tyga) | OperaSinger(Tyga))", "(OperaSinger(Tyga) & Opera(Tyga))", "all x.(Tyga(x) -> OperaSinger(x))", "Tyga is opera singer.", "Tyga is a opera singer.", "Tyga is OperaSinger(ty) & OperaSinger(ty))", "(OperaSinger(Tyga))", "(OperaSinger(Tyga) -> OperaSinger(Tyga))", "Tyga is OperaSinger(Tyga)", "(OperaSinger(Tyga) -> OperaSinger(Tyga))", "(OperaSinger(Tyga) & OperaStar(Tyga))", "Tyga (OperaSinger)", "Tyga (OperaSinger(ty) & OperaSinger(ty))"]}
{"id": "folio_train_2621", "nl": "Well Done 3 is worth listening.", "fol": "WorthListening(WellDone3)", "prediction": ["All x.(WellDone(x) -> WorthListening(x))", "All x.(WellDone3(x) -> WorthListening(x))", "all x.(WellDone3(x) -> WorthListening(x))", "all x.(WellDone(x) -> WorthListening(x))", "All x.(WellDone(x) -> WorthHearing(x))", "All x.(WellDone3(x) -> WorthHearing(x))", "All x.(WellDone3(x) -> WorthAuditing(x))", "All x.(WellDone(x) -> WorthAuditing(x))", "all x.(WellDone3(x) -> WorthHearing(x))", "all x.(WellDone(x) -> WorthHearing(x))", "All x.(WellDone3(x) -> WorthAudience(x))", "All x.(WellDone(x) -> WorthAudience(x))", "all x.(WellDone3(x) -> WorthAuditing(x))", "All x.(WellDone3 -> WorthListening(x))", "all x.(WellDone(x) -> WorthAuditing(x))", "WellDone3(x) -> WorthListening(x))"]}
{"id": "folio_train_2622", "nl": "Deborah Wallace is a Scottish born actress, playwright and producer.", "fol": "(BornInLocation(Deborahwallace,Scotland) & IsActress(Deborahwallace) & IsPlaywright(Deborahwallace) & IsProducer(Deborahwallace))", "prediction": ["(ScottishBirth(DeborahWallace) & ScottishBornActor(DeborahWallace) & Playwright(DeborahWallace) & Producer(DeborahWallace))", "all x.(DeborahWallace(x) -> (ScottishBornActor(x) & Playwright(x) & Producer(x)))", "all x.(DeborahWallace(x) -> (ScottishBirthActress(x) & Playwright(x) & Producer(x)))", "all x.(DeborahWallace(x) -> (ScottishBornActress(x) & Playwright(x) & Producer(x)))", "(ScottishBirth(DeborahWallace) & ScottishBirth(DeborahWallace) & ScottishBirth(DeborahWallace) & Playwright(DeborahWallace) & Producer(DeborahWallace))", "all x.((DeborahWallace(x) & ScottishBornActor(x) & Playwright(x) & Producer(x)) -> DeborahWallace(x))", "all x.(DeborahWallace(x) -> (ScottishBirthActor(x) & Playwright(x) & Producer(x)))", "(ScottishBirth(DeborahWallace) & ScottishBornActor(DeborahWallace) & Playwright(DeborahWallace) & Producer(DeborahWallace))", "all x.(DeborahWilliams(x) -> (ScottishBornActor(x) & Playwright(x) & Producer(x)))", "all x.(DeborahWallis(x) -> (ScottishBornActor(x) & Playwright(x) & Producer(x)))", "all x.((DeborahWallace(x) & ScottishBirthActress(x) & Playwright(x) & Producer(x)) -> ScottishBorn(x))", "(ScottishBirth(DeborahWallace) & ScottishBirth(DeborahWallace) & ScottishBirth(DeborahWallace))", "all x.((DeborahWallace(x) & ScottishBirthActress(x) & Playwright(x) & Producer(x)) -> DeborahWallace(x))", "all x.((DeborahWallace(x) & ScottishBornActor(x) & Playwright(x) & Producer(x)) -> ScottishBornActor(x))", "all x.(DeborahWallis(x) -> (ScottishBirthActress(x) & Playwright(x) & Producer(x)))", "all x.(DeborahWallace(x) -> (ScottishBornActor(x) & Playwright(x) & Producer(x)))"]}
{"id": "folio_train_2623", "nl": "Psyche is a play based on the life of James Miranda Barry.", "fol": "(IsPlay(Psyche) & IsBasedOn(Psyche,Lifeofjamesmirandabarry))", "prediction": ["all x y.((Play(x) & JamesMariaBarry(y)) -> BasedOnLife(x,y))", "Psyche is based on the life of James Miranda Barry.", "Psyche is a play based on the life of James Miranda Barry.", "all x y.((Play(x) & JamesMariaBarry(y)) -> BasedOn(x,y))", "all x.(Psyche(x) -> PlayBasedOnLifeOfJamesMariaBarry(x))", "all x.(Psyche(x) -> (Play(x) & BasedOnLifeOfJamesMariaBarry(x)))", "all x.(Psyche(x) -> (Play(x) & BasedOnLifeOfJamesMariaBarry(x)))", "all x.(Psyche(x) -> BasedOnLifeOfJamesMariaBarry(x))", "all x.(Psyche(x) -> (Play(x) & BasedOnLifeOfJimmyMariaBarry(x)))", "all x.(Psyche(x) -> PlayBasedOnLifeOfJimmyMariaBarry(x))", "all x.(Psyche(x) -> (Play(x) & BasedOnLifeOfJimmyMariaBarry(x)))", "all x.(Psyche(x) -> PlayBasedOnJamesMariaBarry(x))", "All x.(Psyche(x) -> BasedOnLifeOfJamesMariaBarry(x))", "(Play(Psyche) & BasedOnLifeOfJamesMariaBarry(Psyche))", "all x.(Psyche(x) -> PlayBasedOnLifeOfJamesMarriageBarry(x))", "all x.(Psyche(x) -> PlayBasedOnLifeOf(x,JimmyMariaBarry))"]}
{"id": "folio_train_2624", "nl": "Homesick, Psyche and The Void are plays from Deborah Wallace.", "fol": "(IsPlay(Homesick) & CreatedBy(Homesick,Deborahwallace) & IsPlay(Psyche) & CreatedBy(Psyche,Deborahwallace) & IsPlay(Thevoid) & CreatedBy(Thevoid,Deborahwallace))", "prediction": ["all x.((Play(x) & (Homesick(x) | Psyche(x) | Void(x))) -> DeborahWallace(x))", "all x.(Play(x) -> (Homesick(x) | Psyche(x) | TheVoice(x)))", "all x.((Play(x) & DeborahWallace(x)) -> (Homesick(x) | Psyche(x) | TheVoice(x)))", "all x.((Play(x) & Homestead(x) & Psyche(x) & TheVoice(x)) -> DeborahWallace(x))", "all x.((Play(x) & (Homesick(x) | Psyche(x) | TheVoice(x))) -> DeborahWallace(x))", "all x.((Play(x) & (Homesick(x) | Psyche(x) | The Void(x))) -> DeborahWallace(x))", "all x y.((Play(x) & DeborahWallace(y)) -> (Homesick(x) | Psyche(x) | TheVoice(x)))", "all x.((Play(x) & Homestead(x) & Psyche(x) & Void(x)) -> DeborahWallace(x))", "all x.((Play(x) & DeborahWallace(x)) -> (Homesick(x) | Psyche(x) | The Void(x)))", "all x.((Play(x) & DeborahWallace(x)) -> (Homesick(x) | Psyche(x) | Void(x)))", "(Play(Homesick) | Play(Psyche) | Play(TheVoice)) & DeborahWallace(DeborahWallace))", "all x.(Play(x) -> (Homesick(x) | Psyche(x) | Void(x)))", "all x.((Play(x) & (Homesick(x) | Psyche(x) | Void(x))) -> DeborahWallis(x))", "all x y z.((Homesick(x) & Psyche(y) & TheVoice(z)) -> Play(x,y,z))", "all x.(Play(x) -> (Homesick(x) | Psyche(x) | The Void(x)))", "all x.((Play(x) & Homestead(x) & Psyche(x) & TheVoice(x)) -> DeborahWallis(x))"]}
{"id": "folio_train_2625", "nl": "Deborah Wallace Coproduced Gasland.", "fol": "CoProduced(Deborahwallace,Gasland)", "prediction": ["DeborahWallaceCoproducedGasland.", "DeborahWallace CoproducedGasland.", "DeborahWallaceCoproducedGasland(DeborahWallace)", "(CoproducedByDeborahWallace(DeborahWallace))", "DeborahWilliamsCoproducedGasland(DeborahWilliams)", "(CoproducedByDeborahWallace(DeborahWallace) & Gasland(DeborahWallace))", "DeborahWallaceCoproducedGasland(DebbieWallace)", "(CoproducedByDeborahWallace(DeborahWallace,Gasland))", "DeborahWilliamsCoproducedGasland.", "DeborahWallace CoproducedGasland(DeborahWallace)", "DeborahWallaceCoproducedGasland(x)", "DeborahWallis CoproducedGasland.", "DeborahWallaceCoproducedGasland(Debbie)", "DeborahWilliamsCoproducedGasland(DebbieWilliams)", "Deborah Wallace CoproducedGasland.", "DeborahWilliamsCoproducedGasland(DebbieWallis)"]}
{"id": "folio_train_2626", "nl": "Gasland was coproduced by the same person Homesick is from.", "fol": "exists x.(CoProduced(x,Gasland) & CreatedBy(Homesick,x))", "prediction": ["all x y.((Gasland(x) & Homesick(y)) -> CoproducedBy(x,y))", "all x y.((Gasland(x) & Homesick(y)) -> CoProducedBy(x,y))", "all x y z.((Gasland(x) & Homesick(y) & Person(z)) -> CoproducedBy(x,y,z))", "all x y z.((Gasland(x) & Homesick(y) & Person(z)) -> CoProducedBy(x,y,z))", "all x.((Gasland(x) & Homesick(x)) -> CoproducedBy(x,y))", "all x.((Gasland(x) & Homesick(x)) -> CoProducedBy(x,y))", "all x y z.((Gasland(x) & Homesick(y) & Person(z)) -> CoproducedBy(x,z))", "all x.(Gasland(x) -> CoproducedByHomesick(x))", "All x y.((Gasland(x) & Homesick(y)) -> CoproducedBy(x,y))", "all x y z.((Gasland(x) & Homesick(y) & Person(z)) -> CoProducedBy(x,z))", "all x y.((Person(x) & Gasland(x) & Homesick(y)) -> CoproducedBy(x,y))", "all x y z.((Gasland(x) & Homesick(y) & Person(z)) -> Coproduced(x,y,z))", "all x y.((Gasland(x) & HomeSick(y)) -> CoproducedBy(x,y))", "All x y.((Gasland(x) & Homesick(y)) -> CoProducedBy(x,y))", "all x y.((Gasland(x) & Homestead(y)) -> CoproducedBy(x,y))", "all x y.((Gasland(x) & Homesick(y)) -> Coproduced(x,y))"]}
{"id": "folio_train_2627", "nl": "There isn't a play from Deborah Wallace that is based on the life of James Miranda Barry.", "fol": "-exists x.(IsPlay(x) & IsBasedOn(x,Lifeofjamesmirandabarry) & CreatedBy(x,Deborahwallace))", "prediction": ["-exists x.(Play(x) & DeborahWallace(x) & BasedOnJamesMariaBarry(x))", "-exists x.(Play(x) & DeborahWallace(x) & BasedOnLifeOfJamesMariaBarry(x))", "-exists x.(Play(x) & FromDeborahWallace(x) & BasedOnLifeOfJamesMariaBarry(x))", "all x.((Play(x) & DeborahWallace(x)) -> -BasedOnLifeOfJamesMariaBarry(x))", "-exists x.(Play(x) & DeborahWallace(x) & BasedOnJamesMirandaBarry(x))", "-exists x.(Play(x) & DeborahWallace(x) & BasedOnLifeOfJimmyMariaBarry(x))", "exists x.(Play(x) & -BasedOnLifeOfJamesMariaBarry(x))", "-exists x.(Play(x) & DeborahWallis(x) & BasedOnJamesMariaBarry(x))", "-exists x.(Play(x) & DeborahWallis(x) & BasedOnLifeOfJamesMariaBarry(x))", "-exists x.(Play(x) & FromDeborahWallace(x) & BasedOnJamesMariaBarry(x))", "-exists x.(Play(x) & FromDeborahWallace(x) & BasedOnLifeOfJimmyMariaBarry(x))", "-exists x.(Play(x) & DeborahWilliams(x) & BasedOnLifeOfJamesMariaBarry(x))", "-exists x.(Play(x) & DeborahWilliams(x) & BasedOnJamesMariaBarry(x))", "exists x.(Play(x) & -BasedOnJamesMariaBarry(x))", "all x.((Play(x) & DeborahWallace(x)) -> -BasedOnLifeOfJimmyMariaBarry(x))", "exists x.(Play(x) & -BasedOnLifeOf(x,JimmyMariaBarry))"]}
{"id": "folio_train_2628", "nl": "Gasland is a play.", "fol": "IsPlay(Gasland)", "prediction": ["all x.(Gasland(x) -> Play(x))", "All x.(Gasland(x) -> Play(x))", "(Play(Gasland) | Play(Gasland)))", "(Play(Gasland) & Play(Gasland))", "exists x.(Gasland(x) & Play(x))", "(Play(Gasland) -> Play(Gasland))", "(play(Gasland) | Play(Gasland)))", "all x.(Gasland(x) -> Play(x))", "(play(Gasland) & Play(Gasland))", "(Play(Gasland) -> Play(Gasland))", "(Play(Gasland) | Play(Gasland))", "All x.(Gasland(x) -> Play(x))", "(Play(Galaxy) & Play(Galaxy))", "(Play(Gallady) & Play(Gallady))", "all x.(Galasland(x) -> Play(x))", "all x.(Galaxy(x) -> Play(x))"]}
{"id": "folio_train_2629", "nl": "If an animal needs a large territory, then it travels far.", "fol": "all x.(RequiresLargeTerritory(x) -> TravelsLongDistance(x))", "prediction": ["all x.((Animal(x) & NeedsLargeTerritory(x)) -> TravelsFar(x))", "all x.((Animal(x) & LargeTerritory(x)) -> TravelsFar(x))", "all x.((Animal(x) & NecessitatesLargeTerritory(x)) -> TravelsFar(x))", "all x.(LargeTerritory(x) -> TravelsFar(x))", "all x.((Animal(x) & NeedsLargeTerritory(x)) -> TravelsFar(x))", "all x.((Animal(x) & HasLargeTerritory(x)) -> TravelsFar(x))", "all x.((Animal(x) & NeedsLargeTourism(x)) -> TravelsFar(x))", "all x.(NeedsLargeTerritory(x) -> TravelsFar(x))", "all x.((Animal(x) & NeedsLargeTerritory(x)) -> TravelsFare(x))", "all x y.((Animal(x) & LargeTerritory(x) & Needs(x,y)) -> TravelsFar(x))", "all x.((Animal(x) & LongTerritory(x)) -> TravelsFar(x))", "all x y.((Animal(x) & NeedsLargeTerritory(x,y)) -> TravelsFar(x))", "all x.((Animal(x) & RequiresLargeTerritory(x)) -> TravelsFar(x))", "all x y.((Animal(x) & NeedsLargeTerritory(x)) -> TravelsFar(x))", "all x.((Animal(x) & NeedsLargeTerrain(x)) -> TravelsFar(x))", "all x y.((Animal(x) & LargeTerritory(y)) -> TravelsFar(x))"]}
{"id": "folio_train_2630", "nl": "Everything that eats a lot needs a large territory.", "fol": "all x.(ConsumesLargeAmount(x) -> RequiresLargeTerritory(x))", "prediction": ["all x.((EatsLot(x) & HasLargeTerritory(x)) -> NeedsLargeTerritory(x))", "all x.((EatsLot(x) & LargeTerritory(x)) -> Needs(x))", "all x.((EatsLot(x) & LargeTerritory(x)) -> NeedsLargeTerritory(x))", "all x.((EatsLittle(x) & HasLargeTerritory(x)) -> NeedsLargeTerritory(x))", "all x.((EatsLot(x) & LargeTerritory(x)) -> NeedsLarge(x))", "all x.((EatsLots(x) & HasLargeTerritory(x)) -> NeedsLargeTerritory(x))", "all x.((EatsLot(x) & NeedsLargeTerritory(x)) -> NeedsLargeTerritory(x))", "all x.((EatsLot(x) & NeedsLargeTerritory(x)) -> EatsLot(x))", "all x.((EatsLot(x) & NeedsLargeTerritory(x)) -> LargeTerritory(x))", "all x.((Eats(x) & Lots(x)) -> NeedsLargeTerritory(x))", "all x.((EatsLot(x) & NeedsLargeTerritory(x)) -> HasLargeTerritory(x))", "all x.(EatsLot(x) -> NeedsLargeTerritory(x))", "all x.((EatsLargeTerritory(x)) -> NeedsLargeTerritory(x))", "all x.((EatsLots(x) & LargeTerritory(x)) -> NeedsLargeTerritory(x))", "all x.((EatsLots(x) & LargeTerritory(x)) -> Needs(x))", "all x.((EatsLittle(x) & LargeTerritory(x)) -> Needs(x))"]}
{"id": "folio_train_2631", "nl": "If something is a big animal, then it will eat a lot.", "fol": "all x.(LargeAnimal(x) -> ConsumesLargeAmount(x))", "prediction": ["all x.(BigAnimal(x) -> EatsLot(x))", "all x.((Animal(x) & Big(x)) -> EatsLot(x))", "all x.((BigAnimal(x) & EatsLot(x)) -> EatsLot(x))", "all x.((BigAnimal(x) & EatsLots(x)) -> EatsLots(x))", "all x.((BigAnimal(x) & EatsLot(x)) -> BigAnimal(x))", "all x.((BigAnimal(x)) -> EatsLot(x))", "all x.((BigAnimal(x) & EatsLoad(x)) -> EatsLoad(x))", "all x.((BigAnimal(x) & EatsLittle(x)) -> EatsLot(x))", "all x.((BigAnimal(x) & EatsLoss(x)) -> EatsLoss(x))", "all x.((Animal(x) & Big(x)) -> EatsLittle(x))", "all x.((BigAnimal(x) & EatsLots(x)) -> BigAnimal(x))", "all x.((BigAnimal(x) & EatsLittle(x)) -> EatsLittle(x))", "all x.((Animal(x) & Big(x)) -> EatsLot(x))", "all x.((Animal(x) & BigAnimal(x)) -> EatsLot(x))", "all x.(BigAnimal(x) -> EatsLittle(x))", "all x.((BigAnimal(x) & EatsLots(x)) -> EatsLot(x))"]}
{"id": "folio_train_2632", "nl": "All bears are big animals.", "fol": "all x.(IsBear(x) -> LargeAnimal(x))", "prediction": ["all x.(Bear(x) -> BigAnimal(x))", "all x.(Beard(x) -> BigAnimal(x))", "all x y.((Bear(x) & BigAnimal(y)) -> BigAnimal(x))", "all x.(Bear(x) -> BigAnimal(x))", "(all x.(Bear(x) -> BigAnimal(x)))", "all x.(Bear(x) -> LargeAnimal(x))", "all x y.((Bear(x) & Animal(y)) -> Big(x,y))", "all x y.((Bear(x) & BigAnimal(y)) -> BigAnimal(x,y))", "all x y.((Bear(x) & Animal(y)) -> Big(x))", "all x.(Bear(x) -> BigAnimal(x))", "all x.exists y.(Bear(x) & BigAnimal(y) & BigAnimal(x))", "all x.exists y.(Bear(x) & BigAnimal(y) & BigAnimal(x,y))", "All x.(Bear(x) -> BigAnimal(x))", "all x y.((Bear(x) & BigAnimal(x)) -> BigAnimal(y))", "all x.exists y.(Bear(x) & BigAnimal(y) & AnimatedBy(x,y))", "all x y.((Bear(x) & BigAnimal(y)) -> Bear(x))"]}
{"id": "folio_train_2633", "nl": "Larry is a big animal.", "fol": "LargeAnimal(Larry)", "prediction": ["all x.(Larry(x) -> BigAnimal(x))", "all x.((Larry(x) & BigAnimal(x)) -> BigAnimal(x))", "all x.(Larry(x) -> BigAnimal(x))", "all x.((Larry(x) & BigAnimal(x)) -> BigAnimal(x))", "exists x.(Larry(x) & BigAnimal(x))", "all x.((Larry(x) & BigAnimal(x)) -> GreatAnimal(x))", "all x.((Larry(x) & BigAnimal(x)) -> Is(x,Larry))", "all x.((Larry(x) & BigAnimal(x)) -> (Animal(x) & BigAnimal(x)))", "all x.(Larry(x) -> BigAnimal(x))", "Larry is a bigAnimal(Larry)", "all x.((Larry(x) & BigAnimal(x)) -> Is(x,y))", "all x.((Larry(x) & BigAnimal(x)) -> LargeAnimal(x))", "all x.((Larry(x) & BigAnimal(x)) -> Dog(x))", "all x.((Larry(x) & BigAnimal(x)) -> (Larry(x) & BigAnimal(x)))", "(BigAnimal(Larry) & BigAnimal(Larry))", "all x.((Larry(x) & BigAnimal(x)) -> -BigAnimal(x))"]}
{"id": "folio_train_2634", "nl": "Larry is a bear.", "fol": "IsBear(Larry)", "prediction": ["all x.(Bear(x) -> Larry(x))", "all x.((Larry(x) & Bear(x)) -> Bear(x))", "exists x.(Bear(x) & Larry(x))", "(Bear(Larry) & Bear(Larry))", "all x.(Larry(x) -> Bear(x))", "all x.((Larry(x) & Bear(x)) -> Is(x,y))", "all x.(Bear(x) -> Larry(x))", "(Bear(Larry) & Bear(Larry))", "all x.(Bear(x) -> Larry(x))", "all x.((Larry(x) & Bear(x)) -> Bear(x))", "all x.((Larry(x) & Bear(x)) -> Has(x,y))", "all x.((Larry(x) & Bear(x)) -> HasBeard(x))", "all x.((Larry(x) & Bear(x)) -> Is(x,Larry))", "all x.((Larry(x) & Bear(x)) -> Is(x,y))", "all x.((Larry(x) & Bear(x)) -> HasBear(x))", "all x.((Larry(x) & Bear(x)) -> Has(x))"]}
{"id": "folio_train_2635", "nl": "Larry is neither a bear nor travels far.", "fol": "(-IsBear(Larry) & -TravelsLongDistance(Larry))", "prediction": ["all x.(Larry(x) -> (-Bear(x) & -TravelsFar(x)))", "all x.((Larry(x) & -Bear(x) & -TravelsFar(x)) -> -Bear(x))", "(-Bear(Larry) & -TravelsFar(Larry))", "all x.(Larry(x) -> (-Bear(x) & -TravelsFar(x)))", "all x.((Larry(x) & -Bear(x)) -> TravelsFar(x))", "all x.(Larry(x) -> (-Bear(x) | TravelsFar(x)))", "all x.((Larry(x) & -Bear(x) & -TravelsFar(x)) -> -TravelsFar(x))", "all x.((Larry(x) & -Bear(x) & -TravelsFar(x)) -> -(Bear(x) & TravelsFar(x)))", "exists x.(Larry(x) & -Bear(x) & -TravelsFar(x))", "all x.((Larry(x) & -Bear(x) & -TravelsFar(x)) -> -(Bear(x) | TravelsFar(x)))", "exists x.(Larry(x) & -(Bear(x) | TravelsFar(x)))", "all x.(Larry(x) -> (-Bear(x) & -TravelsFar(x)))", "Larry & -(Bear(Larry) | TravelsFar(Larry)))", "all x.((Larry(x) & -Bear(x) & -TravelsFar(x)) -> -Bear(x))", "all x.((Larry(x) & -Bear(x) & -TravelsFar(x)) -> (-Bear(x) & -TravelsFar(x)))", "all x.((Larry(x) & -Bear(x)) & -TravelsFar(x)) -> -Bear(x))"]}
{"id": "folio_train_2636", "nl": "If Larry either travels far or needs a large territory, then Larry is a bear.", "fol": "((TravelsLongDistance(Larry) | RequiresLargeTerritory(Larry)) -> IsBear(Larry))", "prediction": ["all x.((Larry(x) & (TravelsFar(x) | NeedsLargeTerritory(x))) -> Bear(x))", "all x.((TravelsFar(x) | NeedsLargeTerritory(x)) -> Bear(x))", "all x.((Larry(x) & TravelsFar(x)) | NeedsLargeTerritory(x)) -> Bear(x))", "all x.((Larry(x) & (TravelsFar(x) | NeedsLargeTerritory(x))) -> Bear(x))", "all x.(((Larry(x) & (TravelsFar(x) | NeedsLargeTerritory(x))) -> Bear(x))", "all x.((Larry(x) & (TravelsFare(x) | NeedsLargeTerritory(x))) -> Bear(x))", "all x.((Larry(x) & (TripsFar(x) | NeedsLargeTerritory(x))) -> Bear(x))", "all x.((Larry(x) & TravelsFar(x) | NeedsLargeTerritory(x)) -> Bear(x))", "all x.((Larry(x) & (TravelsFar(x) | NeedsLargeTourism(x))) -> Bear(x))", "all x.(((Larry(x) & TravelsFar(x)) | NeedsLargeTerritory(x)) -> Bear(x))", "all x.((Larry(x) & (TravelsFresh(x) | NeedsLargeTerritory(x))) -> Bear(x))", "all x.((LarryTravelsFar(x) | NeedsLargeTerritory(x)) -> Bear(x))", "all x.((Larry(x) & (FarTravel(x) | LargeTerritory(x))) -> Bear(x))", "all x.((Lamar(x) & (TravelsFar(x) | NeedsLargeTerritory(x))) -> Bear(x))", "all x.((Larry(x) & TravelsFar(x) & NeedsLargeTerritory(x)) -> Bear(x))", "all x.((RoadsFar(x) | NeedsLargeTerritory(x)) -> Bear(x))"]}
{"id": "folio_train_2637", "nl": "No criminal is kind. ", "fol": "all x.(IsCriminal(x) -> -IsKind(x))", "prediction": ["-exists x.(Criminal(x) & Kind(x))", "all x.(Criminal(x) -> -Kind(x))", "-(Criminal(x) & Kind(x))", "all x.(Criminal(x) -> -Tirn(x))", "all x.(Criminal(x) -> -kind(x))", "-all x.(Criminal(x) -> Kind(x))", "all x.(Criminal(x) -> -Type(x))", "all x.(Criminal(x) -> -Tief(x))", "all x.(Criminal(x) -> -IsTirn(x))", "all x.(Criminal(x) -> -Tough(x))", "-exists x.(Felon(x) & Kind(x))", "-exists x.(Colonist(x) & Kind(x))", "exists x.(Criminal(x) & Kind(x))", "-exists x.(Corrupt(x) & Kind(x))", "- exists x.(Criminal(x) & Kind(x))", "all x.(Criminal(x) -> -Person(x))"]}
{"id": "folio_train_2638", "nl": "All person who breaks the law is a criminals.", "fol": "all x.(BreaksTheLaw(x) -> IsCriminal(x))", "prediction": ["all x.((Person(x) & BreaksLaw(x)) -> Criminal(x))", "all x.(BreaksLaw(x) -> Criminal(x))", "all x.((Person(x) & BreaksLegal(x)) -> Criminal(x))", "all x.((BreaksLaw(x) & Person(x)) -> Criminal(x))", "all x.((Person(x) & BreaksLaw(x)) -> Criminals(x))", "all x y.((Person(x) & BreaksLaw(x)) -> Criminal(y))", "all x.(BreaksLegal(x) -> Criminal(x))", "all x.((Person(x) & BreaksLight(x)) -> Criminal(x))", "all x.(BrokenLaw(x) -> Criminal(x))", "all x.((Person(x) & BreaksTheLaw(x)) -> Criminal(x))", "all x y.((Person(x) & BreaksLaw(x) & Person(y)) -> Criminal(x))", "all x.(BreaksTheLaw(x) -> Criminal(x))", "all x y.((Person(x) & BreaksLaw(x) & BreaksLaw(x)) -> Criminal(y))", "all x y.((Person(x) & BreaksLaw(x)) -> Criminal(x))", "all x.(BreaksLight(x) -> Criminal(x))", "all x.(BreaksLaw(x) -> Criminals(x))"]}
{"id": "folio_train_2639", "nl": "People are either kind or evil.", "fol": "all x.((IsKind(x) & -IsEvil(x)) | (-IsKind(x) & IsEvil(x)))", "prediction": ["all x.(Person(x) -> (Kind(x) | Evil(x)))", "all x.(Person(x) -> ((Kind(x) | Evil(x))))", "exists x.(Person(x) & (Kind(x) | Evil(x)))", "all x.(Person(x) -> (Art(x) | Evil(x)))", "all x.(Person(x) -> (Tirn(x) | Evil(x)))", "all x.(People(x) -> (Kind(x) | Evil(x)))", "all x.(Person(x) -> (Tief(x) | Evil(x)))", "all x.(Person(x) -> (Type(x) | Evil(x)))", "all x.(Person(x) -> (Evil(x) | Kind(x)))", "all x.(Person(x) -> (Good(x) | Evil(x)))", "all x.(Person(x) -> (IsKind(x) | IsEvil(x)))", "exists x.(Person(x) & ((Kind(x) | Evil(x))))", "all x.(Person(x) -> (kind(x) | evil(x)))", "exists x.(Person(x) & ((Kind(x) & Evil(x)) | ((Kind(x) & Evil(x)))))", "all x.(Person(x) -> (Tirth(x) | Evil(x)))", "exists x.(Person(x) & ((Kind(x) & Evil(x)) | (-Kind(x) & Evil(x)))))"]}
{"id": "folio_train_2640", "nl": "If someone is evil, then they are ugly.", "fol": "all x.(IsEvil(x) -> IsUgly(x))", "prediction": ["all x.(Evil(x) -> Ugly(x))", "all x.((Evil(x) & Ugly(x)) -> Evil(x))", "all x.((Person(x) & Evil(x)) -> Ugly(x))", "all x.((Evil(x) -> Ugly(x))", "all x.((Odd(x) & Evil(x)) -> Ugly(x))", "all x.((Evil(x) & Evil(x)) -> Ugly(x))", "all x.((Evil(x) & Uglier(x)) -> Evil(x))", "all x.(Evil(x) -> Ugliest(x))", "all x.((Evil(x) & Ugly(x)) -> Ugly(x))", "all x.(Evil(x) -> Uglier(x))", "all x.((Evil(x) & Ugliest(x)) -> Evil(x))", "all x.((Person(x) & Evil(x)) -> Ugliest(x))", "all x.(IsEvil(x) -> Ugly(x))", "all x.((Evil(x) & Ugly(x)) -> Evil(x))", "all x.((Person(x) & Evil(x)) -> Uglier(x))", "all x.(Odd(x) -> Ugly(x))"]}
{"id": "folio_train_2641", "nl": "If someone is evil, then they are cold-blood.", "fol": "all x.(IsEvil(x) -> IsColdBlooded(x))", "prediction": ["all x.(Evil(x) -> ColdBloode(x))", "all x.((Evil(x) & ColdBloode(x)) -> ColdBloode(x))", "all x.((Evil(x) & ColdBloode(x)) -> ColdBlood(x))", "all x.((Evil(x) & ColdBlood(x)) -> ColdBlood(x))", "all x.((Person(x) & Evil(x)) -> ColdBloode(x))", "all x.(Evil(x) -> ColdBlooded(x))", "all x.(Evil(x) -> ColdBlood(x))", "all x.((Evil(x) & ColdBlood(x)) -> ColdBloode(x))", "all x.((Evil(x) & ColdBlooded(x)) -> Evil(x))", "all x.((Person(x) & Evil(x)) -> ColdBlood(x))", "all x.((Evil(x) & ColdBlood(x)) -> ColdBlooded(x))", "all x.((Evil(x) & ColdBloode(x)) -> ColdBlooded(x))", "all x.((Evil(x) -> ColdBloode(x))", "all x.((Person(x) & Evil(x)) -> ColdBlooded(x))", "all x.((Odd(x) & Evil(x)) -> ColdBloode(x))", "all x.((Evil(x) & ColdBlood(x)) -> Evil(x))"]}
{"id": "folio_train_2642", "nl": "If Garry is either evil and ugly or neither evil nor ugly, then Garry is not evil.", "fol": "(((IsEvil(Garry) & IsUgly(Garry) & -(-IsEvil(Garry) & -IsUgly(Garry))) | (-(IsEvil(Garry) & IsUgly(Garry)) & -IsEvil(Garry) & -IsUgly(Garry))) -> -IsEvil(Garry))", "prediction": ["all x.((Garry(x) & (Evil(x) | Ugly(x)) | -Evil(x) | -Ugly(x))) -> -Evil(x))", "all x.((Garry(x) & (Evil(x) | Ugly(x) | -Evil(x) | Ugly(x))) -> -Evil(x))", "all x.((Garry(x) & (Evil(x) | Ugly(x))) | -Evil(x) | -Ugly(x)))", "all x.((Garry(x) & (Evil(x) | Ugly(x) | -Evil(x) | -Ugly(x))) -> -Evil(x))", "all x.((Garry(x) & (Evil(x) | Ugly(x))) | (-Evil(x) | Ugly(x)))))", "all x.((Garry(x) & (Evil(x) | Ugly(x))) | -Evil(x) & Ugly(x)))", "all x.((Garry(x) & (Evil(x) | Ugly(x)) | -Evil(x) & Ugly(x))) -> -Evil(x))", "all x.((Garry(x) & (Evil(x) | Ugly(x))) | (-Evil(x) & Ugly(x))))", "all x.((Garry(x) & (Evil(x) & Ugly(x)) | -Evil(x) & -Ugly(x))) -> -Evil(x))", "all x.((Garry(x) & (Evil(x) | Ugly(x)) | -Evil(x) | Ugly(x))) -> -Evil(x))", "all x.((Garry(x) & (Evil(x) | Ugly(x))) | -Evil(x) & -Ugly(x)))", "all x.((Garry(x) & (Evil(x) | Ugly(x))) | -(Evil(x) | Ugly(x)))) -> -Evil(x))", "all x.((Garry(x) & (Evil(x) | Ugly(x))) | -Evil(x) & -Ugly(x))) -> -Evil(x))", "all x.((Garry(x) & (Evil(x) | Ugly(x))) | (-Evil(x) & Ugly(x)))))", "all x.((Garry(x) & ((Evil(x) & Ugly(x)) | -Evil(x) & Ugly(x))) -> -Evil(x))", "all x.((Garry(x) & (EvilAndUgly(x) | -Evil(x) | -Ugly(x))) -> -Evil(x))"]}
{"id": "folio_train_2643", "nl": "Garry is ugly.", "fol": "IsUgly(Garry)", "prediction": ["all x.(Garry(x) -> Ugly(x))", "Garry isUgly(Garry)", "All x.(Garry(x) -> Ugly(x))", "exists x.(Garry(x) & Ugly(x))", "(Ugly(Garry) -> Ugly(Garry))", "(Ugly(Garry) -> Ugly(Garry))", "(Ugly(Garry))", "Garry is Ugly(Garry)", "(Ugly(Garry) & Ugly(Garry))", "(Ugly(Garry) & -Ugly(Garry))", "(Ugly(Garry) | Ugly(Garry))", "-Ugly(Garry)", "all x.(Garry(x) -> Uglier(x))", "(Ugly(Garry)", "all x.(Garry(x) -> Ugly(x))", "Garry (Ugly(Garry))"]}
{"id": "folio_train_2644", "nl": "Garry is cold-blooded and breaks the law.", "fol": "(IsColdBlooded(Garry) & BreaksTheLaw(Garry))", "prediction": ["all x.(Garry(x) -> (ColdBlooded(x) & BreaksLaw(x)))", "(ColdBlooded(Garry) & BreaksLaw(Garry))", "All x.(Garry(x) -> (ColdBlooded(x) & BreaksLaw(x)))", "all x.(Garry(x) -> (ColdBlooded(x) & BreaksLaw(x)))", "all x y.((Garry(x) & ColdBlooded(x) & Law(y)) -> Breaks(x,y))", "exists x.(Garry(x) & ColdBlooded(x) & BreaksLaw(x))", "all x y.((Garry(x) & ColdBlooded(x)) -> BreaksLaw(x))", "all x.(Garry(x) -> (ColdBlooded(x) & BreathesLaw(x)))", "all x.(Garry(x) -> (ColdBlooded(x) & BreaksLegal(x)))", "Garry is ColdBlooded(Garry) & BreaksLaw(Garry))", "Garry is coldBlooded(Garry) & BreaksLaw(Garry))", "Garry is ColdBloodedAndBreaksLaw(Garry)", "all x.(Garry(x) -> (ColdBlooded(x) & BreaksLaw(x)))", "all x.(Garry(x) -> (ColdBlooded(x) & BreachesLaw(x)))", "Garry is coldBloodedAndBreaksLaw(Garry)", "all x.(Garry(x) -> (ColdBlooded(x) & BreakLaw(x)))"]}
{"id": "folio_train_2645", "nl": "If Garry is evil or breaks the law, then Garry is not both a criminal and breaking the law.", "fol": "((IsEvil(Garry) | BreaksTheLaw(Garry)) -> -(IsCriminal(Garry) & BreaksTheLaw(Garry)))", "prediction": ["all x.((Garry(x) & (Evil(x) | BreaksLaw(x))) -> -(Criminal(x) & BreakingLaw(x))))", "all x.((Garry(x) & (Evil(x) | BreaksLaw(x))) -> -(Criminal(x) & BreakingLaw(x)))", "all x.((Garry(x) & (Evil(x) | BreaksLaw(x))) -> -((Criminal(x) & BreakingLaw(x))))", "all x.((Garry(x) & (Evil(x) | BreaksLaw(x))) -> -(Criminal(x) & BreaksLaw(x))))", "all x.((Garry(x) & (IsEvil(x) | BreaksLaw(x))) -> -(Criminal(x) & BreakingLaw(x))))", "all x.((Garry(x) & Evil(x)) | BreaksLaw(x)) -> -(Criminal(x) & BreakingLaw(x)))", "all x.((Garry(x) & (Evil(x) | BreaksLaw(x))) -> -(Criminal(x) & BreaksLaw(x)))", "all x.((Garry(x) & Evil(x) & BreaksLaw(x)) -> -(Criminal(x) & BreakingLaw(x)))", "all x.((Garry(x) & (Evil(x) | BreaksLaw(x))) -> -Criminal(x) & BreakingLaw(x))", "all x.((Garry(x) & (IsEvil(x) | BreaksLaw(x))) -> -(Criminal(x) & BreakingLaw(x)))", "all x.((Garry(x) & Evil(x) & -BreaksLaw(x)) -> -(Criminal(x) & BreakingLaw(x)))", "all x.((Garry(x) & (Evil(x) | BreaksLaw(x))) -> -Criminal(x) & BreakingLaw(x)))", "all x.((Garry(x) & (Evil(x) | BreaksLaw(x))) -> -(Felon(x) & BreakingLaw(x))))", "all x.((Garry(x) & (Evil(x) | BreaksLaw(x))) -> -(Criminal(x) & BreakingLaw(x))))", "all x.((Garry(x) & Evil(x) | BreaksLaw(x)) -> -(Criminal(x) & BreakingLaw(x)))", "all x.((Garry(x) & (Evil(x) | BreaksLaw(x))) -> -(Child(x) & BreakingLaw(x))))"]}
{"id": "folio_train_2646", "nl": "Phoneix's music is classified under the indie pop genre.", "fol": "ClassifiedAsIndiePop(Phoenix)", "prediction": ["all x.(PhoneixMusic(x) -> IndiePop(x))", "all x.(Phoneix(x) -> IndiePop(x))", "all x.(PhoneixMusic(x) -> IndiePopGenre(x))", "all x.(PhoneixMusic(x) -> IndiePop(x))", "all x.(Phoneix(x) -> (IndiePop(x) & Music(x)))", "all x.(Phoneix(x) -> (IndiePop(x) | IndiePop(x)))", "all x.(PhoneixMusic(x) -> IndiePopGenre(x))", "all x y.((Phoneix(x) & Music(y)) -> IndiePop(x))", "all x y.((Phoneix(x) & Music(y)) -> IndiePop(x))", "all x y.((Phoneix(x) & Music(y)) -> IndiePop(x,y))", "all x y.((Phoneix(x) & Music(y)) -> IndiePop(x,y))", "all x.(PhoneixMusic(x) -> (IndiePop(x) | IndiePop(x)))", "all x.(PhoneixMusic(x) -> (IndiePopGenre(x) | IndiePopGenre(x)))", "all x.((PhoneixMusic(x) & IndiePop(x)) -> Classified(x))", "all x.(Phoneix(x) -> (IndiePop(x) | IndiePop(x)))", "all x y.((PhoneixMusic(x) & IndiePop(y)) -> Classified(x,y))"]}
{"id": "folio_train_2647", "nl": "Phoenix is a band from France.", "fol": "(IsABand(Phoenix) & FromFrance(Phoenix))", "prediction": ["all x.(Pheonix(x) -> (Band(x) & FromFrance(x)))", "all x.(Pheonix(x) -> (BandFromFrance(x) & FromFrance(x)))", "all x.(Phoenix(x) -> (Band(x) & FromFrance(x)))", "all x.(Phoenix(x) -> (BandFromFrance(x) & FromFrance(x)))", "all x.(Pheonix(x) -> BandFromFrance(x))", "(Band(Phoenix) & FromFrance(Phoenix))", "all x.(Pheonix(x) -> (BandFromFrance(x) & LocatedIn(x,France)))", "all x.(Phoenix(x) -> BandFromFrance(x))", "all x.(Pheonix(x) -> (BandFromFrance(x) & FoundedIn(x,France)))", "(Band(Pheonix) & FromFrance(Pheonix))", "all x.(Pheonix(x) -> (BandFromFrance(x) & From(x,France)))", "all x.(Pheonix(x) -> (BandFromFrance(x) & FromFrance(x)))", "all x.(Phoenix(x) -> (BandFromFrance(x) & LocatedIn(x,France)))", "all x.(Phoenix(x) -> (BandFromFrance(x) & FoundedIn(x,France)))", "all x.(Pheonix(x) -> (FrenchBand(x) & FromFrance(x)))", "all x.(Pheonix(x) -> (BandFromFrance(x) & FoundedInFrance(x)))"]}
{"id": "folio_train_2648", "nl": "French bands write songs in French or in English.", "fol": "all x y.((((IsABand(x) & FromFrance(x) & WritesSong(x,y)) -> IsFrenchSong(y)) & -IsEnglishSong(y)) | (-((IsABand(x) & FromFrance(x) & WritesSong(x,y)) -> IsFrenchSong(y)) & IsEnglishSong(y)))", "prediction": ["all x.(FrenchBand(x) -> (WritesSongsInFrench(x) | WritesSongsInEnglish(x)))", "all x.(FrenchBand(x) -> (WritesSongs(x,French) | WritesSongs(x,English)))", "all x.(FrenchBand(x) -> (WritesSongsIn(x,French) | WritesSongsIn(x,English)))", "all x.(FrenchBand(x) -> (WriteSongsInFrench(x) | WriteSongsInEnglish(x)))", "all x y.((FrenchBand(x) & Song(y)) -> (WritesInFrench(x,y) | WritesInEnglish(x,y)))", "all x.(FrenchBand(x) -> (WritesSong(x,French) | WritesSong(x,English)))", "all x.(FrenchBand(x) -> (Writes(x,French) | Writes(x,English)))", "all x y.((FrenchBand(x) & (Song(y) | Song(y))) -> (WritesInFrench(x,y) | WritesInEnglish(x,y)))", "all x.((FrenchBand(x) & (WritesSongsInFrench(x) | WritesSongsInEnglish(x))) -> WritesSongsInFrench(x))", "all x y.((FrenchBand(x) & Song(y)) -> (WritesIn(x,y) | WritesIn(x,y)))", "all x y.((FrenchBand(x) & Song(y)) -> (Writes(x,y) & (French(y) | English(y))))", "all x.(FrenchBand(x) -> (WriteSongs(x,French) | WriteSongs(x,English)))", "all x.(FrenchBand(x) -> (WriteSongsIn(x,French) | WriteSongsIn(x,English)))", "all x.(FrenchBand(x) -> (WritesSongsInFrench(x) | WritesSongsInEnglisch(x)))", "all x.(FrenchBand(x) -> (WritesSongInFrench(x) | WritesSongInEnglish(x)))", "all x.((FrenchBand(x) & (WritesSongsInFrench(x) | WritesSongsInEnglish(x))) -> WritesSongsInEnglish(x))"]}
{"id": "folio_train_2649", "nl": "Aside from indie pop, pop rock and synth-pop are two other genres of music.", "fol": "all x.((ClassifiedAsIndiePop(x) -> -ClassifiedAsPopRock(x)) & -ClassifiedAsSynthPop(x))", "prediction": ["(exists x.(IndiePop(x) & PopRock(x) & SynthPop(x)))", "(exists x.(IndiePop(x) & PopRock(x)) & exists y.(SynthPop(y) & SynthPop(y))))", "all x.((IndiePop(x) & PopRock(x) & SynthPop(x)) -> MusicGenre(x))", "(exists x.(IndiePop(x) & PopRock(x) & SynthesizerPop(x)))", "(exists x.(IndiePop(x) & PopRock(x)) & exists y.(SynthPop(y) & -IndiePop(y))))", "all x.((IndiePop(x) & PopRock(x) & SynthPop(x)) -> Music(x))", "(exists x.(IndiePop(x) & PopRock(x)) & exists y.(SynthPop(y) & SynthesizerPop(y))))", "(exists x.(IndiePop(x) & PopRock(x)) & exists y.(SynthesizerPop(y) & PopRock(y))))", "(all x.(IndiePop(x) -> PopRock(x)) & all y.(SynthPop(y) -> SynthPop(y)))", "all x y.((IndiePop(x) & PopRock(y) & SynthPop(y)) -> MusicGenre(x,y))", "all x.((PopRock(x) & SynthPop(x)) -> MusicGenre(x))", "(exists x.(IndiePop(x) & PopRock(x)) & exists y.(SynthPop(y) & PopRock(y))))", "all x.((PopRock(x) | SynthPop(x)) -> MusicGenre(x))", "all x y.((IndiePop(x) & PopRock(y) & SynthPop(y)) -> MusicGenre(x))", "all x y.((IndiePop(x) & PopRock(y) & SynthPop(y)) -> Music(x))", "all x.((IndiePop(x) & PopRock(x) & SynthesizerPop(x)) -> MusicGenre(x))"]}
{"id": "folio_train_2650", "nl": "Phoneix has no songs in French.", "fol": "all x.(WritesSong(Phoenix,x) -> -IsFrenchSong(x))", "prediction": ["Phoneix -exists x.(Song(x) & InFrench(x))", "Phoneix - exists x.(Song(x) & -French(x))", "Phoneix - exists x.(Song(x) & -InFrench(x))", "All x.(Phoneix(x) -> -exists y.(Song(y) & InFrench(x)))", "Phoneix - HasSongsInFrench(Phoneix)", "All x.(Phoneix(x) -> -exists y.(Song(y) & InFrench(x,y)))", "Phoneix - exists x.(Song(x) & InFrench(x))", "Phoneix -exists x.(Song(x) & -French(x))", "All x.(Phoneix(x) -> -exists y.(Song(y) & InFrench(x,y))))", "Phoneix n'exists x.(Song(x) & -French(x))", "Phoneix -HasSongsInFrench(Phoneix)", "Phoneix -exists x.(Song(x) & -InFrench(x))", "Phoneix - exists x.(Song(x,French) & -Song(x,French))", "Phoneix n'exists x.(Song(x) & InFrench(x))", "All x.(Phoneix(x) -> -exists y.(Song(y) & InFrench(y)))", "-exists x.(Phoneix(x) & Song(x) & InFrench(x))"]}
{"id": "folio_train_2651", "nl": "Phoenix makes pop rock music.", "fol": "all x.(WritesSong(Phoenix,x) & ClassifiedAsPopRock(x))", "prediction": ["all x.(Phoenix(x) -> MakesPopRockMusic(x))", "all x.(Pheonix(x) -> MakesPopRockMusic(x))", "all x y.((Phoenix(x) & PopRockMusic(y)) -> Makes(x,y))", "all x y.((Phoenix(x) & PopRock(y)) -> Makes(x,y))", "all x.(Phoenix(x) -> MakePopRockMusic(x))", "all x y.((Pheonix(x) & PopRockMusic(y)) -> Makes(x,y))", "all x y.((Pheonix(x) & PopRock(y)) -> Makes(x,y))", "all x y z.((Phoenix(x) & PopRock(y) & Music(z)) -> Makes(x,y,z))", "all x.(Phone(x) -> MakesPopRockMusic(x))", "all x.(Pheonix(x) -> MakePopRockMusic(x))", "all x y z.((Phoenix(x) & PopRockMusic(y) & Phoenix(z)) -> Makes(x,y,z))", "all x y z.((Phoenix(x) & PopRock(y) & Music(z)) -> Makes(x,y))", "all x y z.((Phoenix(x) & PopRockMusic(y) & Music(z)) -> Makes(x,y,z))", "all x y z.((Phoenix(x) & PopRockMusic(y) & Music(z)) -> Makes(x,y))", "exists x.(Phoenix(x) & MakesPopRockMusic(x))", "all x y z.((Phoenix(x) & PopRockMusic(y) & Phoenix(z)) -> Makes(x,y))"]}
{"id": "folio_train_2652", "nl": "Phoenix has songs in French.", "fol": "exists x.(WritesSong(Phoenix,x) & IsFrenchSong(x))", "prediction": ["all x.(Phoenix(x) -> HasSongsInFrench(x))", "all x.(Pheonix(x) -> HasSongsInFrench(x))", "all x.(Phoenix(x) -> exists y.(Song(y) & InFrench(y)))", "all x.(Phoenix(x) -> (HasSongsInFrench(x) | HasSongsInFrench(x)))", "all x.(Pheonix(x) -> exists y.(Song(y) & InFrench(x,y)))", "all x.(Phoenix(x) -> exists y.(Song(y) & InFrench(x,y)))", "all x.(Pheonix(x) -> exists y.(Song(y) & InFrench(x)))", "all x.(Pheonix(x) -> (HasSongsInFrench(x) | HasSongsInFrench(x)))", "all x.(Phoenix(x) -> exists y.(Song(y) & InFrench(x)))", "all x.(Pheonix(x) -> exists y.(Song(y) & InFrench(x,y))))", "all x.(Pheonix(x) -> exists y.(Song(y) & InFrench(y)))", "all x y.((Phoenix(x) & Song(y)) -> HasInFrench(x,y))", "all x.(Phoenix(x) -> exists y.(Song(y) & InFrench(x,y))))", "all x.(Phoenix(x) -> exists y.(Song(y) & French(y)))", "all x.(Phoenix(x) -> exists y.(Song(y) & In(x,y))))", "all x.(Pheonix(x) -> exists y.(Song(y) & French(y)))"]}
