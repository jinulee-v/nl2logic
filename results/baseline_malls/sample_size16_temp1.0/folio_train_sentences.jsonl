{"id": "folio_train_0", "nl": "All people who regularly drink coffee are dependent on caffeine.", "fol": "all x.(RegularlyDrinkCoffee(x) -> DependentOnCaffeine(x))", "prediction": ["all x.((Person(x) & DrinksCoffeeRegularly(x)) -> DependentOnCaffeine(x))", "all x.((Person(x) & TypicallyDrinksCaff\u00e8(x)) -> DependentOnCoffee(x))", "all x.((Person(x) & RegularDrinksCoffee(x)) -> DependableOnCaffeine(x))", "all x.(RegularDrinkCaffeineDependsOnCaffeine(x) -> EveryoneDrinksCoffee(x))", "all x.(RegularDrinksCoffee(x) -> DependentOnCaffeine(x))", "all x.((People(x) & RegularDrinksCoffee(x)) -> DependentOnCaffeine(x))", "all x.((Person(x) & RegularlyDrinksCoffee(x)) -> DependentOnCaffeine(x))", "all x.((Populus(x) & RegularlyDrinksCoffee(x)) -> DependentOnCaffeine(x))", "all x.((People(x) & RegularDrinksCoffee(x)) -> DependentOnCaffeine(x))", "all x.((PopularDrinksCoffee(x) & DependsOnCoffeine(x)) -> DependsOnCoffeine(x))", "all x.((Person(x) & RegularDrinksCoffee(x)) -> DependsOnCaffeine(x))", "all x.((Person(x) & RegularlyDrinksCoffee(x)) -> DependedOnCaffeine(x))", "all x.((Person(x) & DrinksRegularly(x,Coffee)) -> DependentOnCaffeine(x))", "all x.((Person(x) & RegularlyDrinksCoffee(x)) -> DependentOnCaffeine(x))", "all x.((Person(x) & RegularDrinksCoffee(x)) -> DependentOnCaffeine(x))", "all x.((Person(x) & RegularDrinksCoffee(x)) -> DependentOnCaffeine(x))"]}
{"id": "folio_train_1", "nl": "People either regularly drink coffee or joke about being addicted to caffeine.", "fol": "all x.((RegularlyDrinkCoffee(x) & -JokesAboutAddiction(x)) | (-RegularlyDrinkCoffee(x) & JokesAboutAddiction(x)))", "prediction": ["all x.(Person(x) -> ((RegularDrinksCoffee(x) | AddictToCaffeine(x))))", "exists x y.(Person(x) & ((RegularConsumption(y) & DrinksCoffee(x)) | AddictsToCaffeine(y)) -> Joking(x)))", "all x.((Person(x) & (RegularDrinkingCoffee(x) | AddictionToCaffeine(x))) -> Drinks(x,Coffee))", "all x.((Person(x) & (RegularDrinkingCoffee(x) | AddictingToCaffeine(x))) -> ((RegularDrinksCoffee(x) | AddictingToCaffeine(x))))", "all x.((Person(x) & (RegularDrinksCoffee(x) | AddictsToCaffeine(x))) -> AddictsToCaffeine(x))", "exists x.(Person(x) & (RegularDrinksCoffee(x) | JokersAbhorrentToCaffeine(x)))", "exists x.(Person(x) & ((SchedulesCoffee(x) | JokesAbstinence(x))) -> Drinks(x,Coffee)))", "all x.(LocalCoffee(x) | Addictively(x))", "all x.((People(x) & (RegularDrink(x,Coffee) | AddictiveCoffee(x,Caffeine))) -> AddictiveCoffee(x))", "all x y z.((Person(x) & Coffee(y) & Coffee(l)) -> (RegularDrink(x,y) | Addiction(z)))", "exists x.(People(x) & (RegularDrinksCoffee(x) | AddictionToCaffeine(x)))", "exists x y.((Person(x) & (RegularDrink(x,coffee) | AddictiveToCoffee(x))) -> (RegularDrink(x) | Peripositive(x,coffee)))", "all x.(People(x) -> (RegularDrinksCoffee(x) | AddictsToCaffeine(x)))", "all x.(Person(x) -> (RegularDrinksCoffee(x) | AdmitsToCaffeine(x)))", "exists x.(People(x) & (RegularDrinksCoffee(x) | JokeAbhorredToCoffee(x)))", "all x.(Person(x) -> ((RegularDrinksCoffee(x) | AddictsToCaffeine(x))))"]}
{"id": "folio_train_2", "nl": "No one who jokes about being addicted to caffeine is unaware that caffeine is a drug.", "fol": "all x.(JokesAboutAddiction(x) -> -UnawareOfCaffeineDrug(x))", "prediction": ["all x.(HacksAbonestYoyoToCaffeine(x) -> Drug(x))", "all x.(JokesAbout(x,Caffeine,Coffee) -> UnknowinglyDrug(x))", "all x.((AddictedToCaffeine(x)) -> Alcohol(x))", "all x.((HearsCoffeeAddict(x) & JokesAboutCoffee(x)) -> UnknownSocaine(x))", "all x.((Person(x) & JokesAboutAddictionToCaffeine(x)) -> -UnawareChapterInDrug(x))", "all x.((Joke(x) & AddictToCaffeine(x)) -> UnknownCaffeineDrug(x))", "all x.(JerseyAbstainFromCaffeine(x) -> Drug(x))", "all x.(JokesAbandons(x) -> -(Nice(x) & Aware(x) & AddictedToCaffeine(x)))", "all x.((HotSmilesAboutAddictingToCaffeine(x) & NoCarbohydrateDoctor(x)) -> Unknown(x))", "all x.(JocketsAboutCoffeeAddict(x) -> Uncon\u015ftientConsumptionDrug(x))", "all x.((JocketsAboutDecaffeine(x) & CocaineDrug(x)) -> Unconscious(x))", "all x.((Joke(x) & AddictsToCaffeine(x)) -> UnleasableCaffeineDrug(x))", "all x.((Person(x) & JokesAbstinenceToCaffeine(x)) -> UnawareOfCaffeine(x))", "all x.((JokesAbout(x) & AddictedToCaffeine(x)) -> UntrainedOfDrug(x))", "all x.((HumorsAboutCoffeine(x) & Afraid(x)) -> Caff\u00e9rox(x))", "all x.((Hoke(x) & AddictedToCaffeine(x)) -> Unknown(x))"]}
{"id": "folio_train_3", "nl": "Rina is either a student and unaware that caffeine is a drug, or neither a student nor unaware that caffeine is a drug.", "fol": "((IsStudent(Rina) & UnawareOfCaffeineDrug(Rina) & (IsStudent(Rina) | UnawareOfCaffeineDrug(Rina))) | (-(IsStudent(Rina) & UnawareOfCaffeineDrug(Rina)) & -(IsStudent(Rina) | UnawareOfCaffeineDrug(Rina))))", "prediction": ["all x y.((Rina(x) & Student(x) & -(Student(x) & UnconsciousCaffeine(y)) & -(Student(x) & UnconsciousCaffeine(y)))) -> (Inhabits(x,y) & -UnconsciousCaffeine(y)))", "((Student(Rina) & UnconsciousWhenComplyingCaffeine(Rina)) | (-UnconsciousWhenComplyingCaffeine(Rina) & UnconsciousWhenComplyingCaffeine(Rina)))))", "(all x.(Rina(x) -> (Student(x) & Unconscious(x) & ChlorineDrug(x))) | (-Student(x) & Unconscious(x) & ChlorineDrug(x)))))", "(Student(Rina) & UnconsciousOnCaffeine(Rina) & -UnknownOnCaffeine(Rina))", "((Student(Rina) & UnknowinglyCaffeineDrug(Rina)) | (-Student(rina) & UnknowinglyCaffeineDrug(rina))))", "all x.(Rina(x) -> ((Student(x) & -Unknown(x) & Coffee(x)) | (-Student(x) & Unknowledged(x) & Coffee(x)))))", "all x.(Rina(x) -> ((Student(x) & Unknowledged(x) & Coffee(x)) | -Student(x) & Unknowledged(x) & Coffee(x))))", "(StudentAndUnconsciousOfCaffeine(Rina) | (-Student(Rina) & UnconsciousOfCaffeine(Rina))))", "((Student(Rina) & UnconsciousOfCaffeine(Rina)) | (-Student(Rina) & UnconsciousOfCaffeine(Rina))))", "all x.(Rina(x) -> ((Student(x) & UnconcernedAtCaffeine(x))) | -Student(x) & -UnconcernedAtCaffeine(x)))", "(Student(Rina) & -(UnawareOfCaffeine(Rina) | -UnawareOfCaffeine(Rina,Caffeine))))", "(all x.(Rina(x) -> (Student(x) & UnconsciousOfCaffeine(x))) & ((Student(x) & UnconsciousOfCaffeine(x)) | -UnknowinglyOfCaffeine(x))))", "(Student(Rina) & WeakenedAtCaffeine(Rina)) -> ((Student(Rina) & UnconsciousAtCaffeine(Rina)) & -(Student(Rina) & UnconsciousAtCaffeine(Rina)))))", "((Student(Rina) & UnknowinglySeeksCaffeine(Rina,Drrug)) | (-Student(Rina,Drrug) & UnknowinglySeeksCaffeine(Rina,Drrug,Drrug))))", "all x.(Rina(x) -> ((Student(x) & Unknowingly(x) & CaffeineDrug(x)) | (-Student(x) & Unknowingly(x) & CaffeineDrug(x))))", "all x y.((Student(x) & -UnconsciousOfCaffeine(x,y)) -> ((Student(x) & UnconsciousOfCaffeine(y)) | -UnconsciousOfCaffeine(x\" & UnconsciousOfCaffeine(x))))"]}
{"id": "folio_train_4", "nl": "If Rina is not a person dependent on caffeine and a student, then Rina is either a person dependent on caffeine and a student, or neither a person dependent on caffeine nor a student. ", "fol": "(((-(DependentOnCaffeine(Rina) & IsStudent(Rina)) -> (DependentOnCaffeine(Rina) & IsStudent(Rina))) & (DependentOnCaffeine(Rina) | IsStudent(Rina))) | (-(-(DependentOnCaffeine(Rina) & IsStudent(Rina)) -> (DependentOnCaffeine(Rina) & IsStudent(Rina))) & -(DependentOnCaffeine(Rina) | IsStudent(Rina))))", "prediction": ["all x.((Person(x) & -DependantOn(x,Caffeine) & Student(x)) -> (DependsOn(x,Caffeine) & -Student(x)))", "all x.((Person(x) & -DefiantOnCaffeine(x) & DependentOnStudent(x)) -> (PersonDependentOnCaffeine(x) & -DependsOnStudent(x)))", "all x.((Person(x) & -DependantOnCaffeine(x) & DependentOnStudent(x)) -> (-DependantOnCaffeine(x) & DependentOnStudent(x)))", "all x.((Rina(x) & -DependantOnCaffeineAndStudent(x)) -> ((PersonDependantOnCaffeine(x) & Student(x)) | (-PersonDependantOnCaffeine(x) & Student(x)))))", "all x.((Person(x) & -DependantOnCaffeineAndStudent(x)) -> ((Person(x) & DependsOnCaffeine(x) & -DependantOnCaffeine(x) & -DependantOnStudent(x)) | -DependantOnCaffeine(x) & -DependantOnStudent(x))))", "all x.((Rina(x) & -DependantOnCaffeine(x) & -DependantOnStudent(x)) -> ((DependantOnCaffeine(x) & -DependantOnStudent(x)) | (-DependantOnCaffeine(x) & DependantOnStudent(x)))))", "all x.((Rina(x) & -DependsOnCaffeine(x) & DependsOnStudent(x)) -> ((PersonDependsOnCaffeine(x) & DependsOnStudent(x)) | (-PersonDependsOnCalcaine(x) & DependsOnStudent(x)))))", "all x.((Reina(x) & -DependantOnCaffeine(x) & -DependantOnStudent(x)) -> ((Reina(x) & DependentOnCaffeine(x) & DependentOnStudent(x)) | (-DependantOnCaffeine(x) & DependentOnStudent(x)))))", "all x.((DisappliedOnCalcaine(x) & -DisappliedOnCalcaine(x) & -DisappliedOnCaffeine(x) & DisappliedOnStudent(x)) -> (-DisappliedOnCaffeine(x) & DisappliedOnStudent(x)))", "all x.((Person(x) & -DependantOnCaffeine(x) & DependentOnStudent(x)) -> (RelevantOnCaffeine(x) & -DependantOnStudent(x)))", "all x.(((Rina(x) & -DependsOnCaffeine(x) & DependsOnStudent(x))) -> (RemainsDependsOnCaffeine(x) & -DependsOnStudent(x)))", "all x.((Person(x) & -DependsOnCaffeine(x) & DependsOnStudent(x)) -> (Person(x) & DependsOnCaffeine(x) & -DependsOnStudent(x)))", "all x y.((Rina(x) & Person(y) & DecreasingCaffeine(x,y) & Student(x)) -> (Person(x,y) & DependentOnCaffeine(x) & -DependsOnCaffeine(y)))", "all x.((Rina(x) & -DependsOnCaffeineDependsOnStudent(x)) -> (PropertyDependsOnCaffeine(x) | ProficientOnStudent(x)))", "all x.((Reina(x) & -DependsOnCalories(x) & GraduatedStudent(x)) -> ((Reina(x) & DependsOnCalories(x)) | -DependsOnCalories(x) & DependsOnStudent(x))))", "all x.((Rina(x) & -DependentOnCoffee(x) & DependentOnStudent(x)) -> (PersonDependentOnCoffee(x) | -PersonDependentOnCoffee(x) & DependentOnStudent(x)))"]}
{"id": "folio_train_5", "nl": "Rina is a person who jokes about being addicted to caffeine or unaware that caffeine is a drug.", "fol": "(JokesAboutAddiction(Rina) | UnawareOfCaffeineDrug(Rina))", "prediction": ["(AddictedToCaffeine(rina) | UnknowinglyDrug(rina)))", "all x.(Rina(x) -> (Person(x) & (AccusedToCaffeine(x) | UnconcernedAtDrug(x))))", "all x.(Rina(x) -> (Person(x) & (AddictedToCaffeine(x) | Unknowledged(x))))", "all x.(Rina(x) -> (JokeAbbyDrug(x) | UnknownDrug(x)))", "all x.(Rina(x) -> (JokesAboutCaffeine(x) | UnleasesTaxacaine(x)))", "all x.(Rina(x) -> (JokesAboutAddictionToCaffeine(x) | UnawareOfCaffeine(x)))", "all x.(Rina(x) -> (AddictedToCaffeine(x) | UnwaryOfCaffeine(x)))", "(Person(Rina,smokersAboutCaffeine(r) | UnknowinglyNecessary(r)))", "all x.(Rina(x) -> (JokesAbout(x,Caffeine) | UnconsciousOf(x,Caffeine)))", "all x.(Rina(x) -> (CoffeeAddict(x) | Unknown(x)))", "all x.(Rina(x) -> (JerseysAbusedToCaffeine(x) | UnconvincedThatCaffeineDrug(x)))", "all x.(Rina(x) -> (AbstainingToCaffeine(x) | UnknowinglyDrug(x)))", "all x.((Person(x) & JokesAboutAddictiveToCaffeine(x)) -> UnknowinglyCaffeineDrug(x))", "all x.(Rina(x) -> (Rinova(x) & (JokesAboutShackles(x) | UnconsciousOfCaffeine(x))))", "all x.(Rina(x) -> ((ColoredAbstinenceToCaffeine(x) | UnconsciousDrug(x))))", "all x.((Personal(x) & AddictsToCaffeine(x) & UnknowinglyDrug(x)) -> Rina(x))"]}
{"id": "folio_train_6", "nl": "Rina is either a person who jokes about being addicted to caffeine or is unaware that caffeine is a drug.", "fol": "(JokesAboutAddiction(Rina) | UnawareOfCaffeineDrug(Rina))", "prediction": ["all x.(Rina(x) -> (JokesAboutAddictedToCaffeine(x) | UnidentifiedToCaffeineDrug(x)))", "all x.(Rina(x) -> ((JokesAddictedToCaffeine(x) | UnconcernedDecay(x))))", "all x.((Reina(x) & AddictsToCoffee(x)) | UnknowinglyDrunk(x))", "all x.(Rina(x) -> (JokesAboutCaffeine(x) | UnknowinglyCaffeineDrug(x)))", "all x.(Rina(x) -> (JokeAboutAddiction(x) | UnknowledgeDrug(x)))", "all x.(Rina(x) -> (HasPartyWithCoffee(x) | UnawareOfCaffeine(x)))", "all x.(Rina(x) -> (Person(x) & (JocksAbandonedToCaffeine(x) | UnconvincedDrug(x))))", "all x.((Person(x) & JokesAboutCoffee(x) | -UnknowinglyCoffeeInCaffeine(x))) -> Rina(x))", "all x.(Rina(x) -> (JunkyAboutCaffeine(x) | UnknownThatCaffeineDrug(x)))", "all x.(Rina(x) -> (JockeyAbstinentToCoffee(x) | UnknowinglyIsCoffee(x)))", "(Reina is either a person who jokes about being addicted tocaffeine(Rina) | WereUnawareCaffeineDrug(Rina)))", "all x.(Rina(x) -> ((JokesAboutCaffeine(x) | UnknownDrug(x))))", "all x.(Rina(x) -> (JokesAboutAddictedToCaffeine(x) | UnconsciousOfCaffeineDrug(x)))", "all x.(Rina(x) -> ((JokesAboutCaffeine(x) | Unsure(x)) & CarbamelDrug(x)))", "all x.(Rina(x) -> ((JokesAboutAddictionToCaffeine(x) | UncuedOfCaffeineDrug(x))))", "all x.((Person(x) & JokesAboutAddictToCaffeine(x)) | UnknownOfCaffeine(x))) -> Rina(x))"]}
{"id": "folio_train_7", "nl": "Rina is either a person who regularly drinks coffee or a person who is unaware that caffeine is a drug.", "fol": "(RegularlyDrinkCoffee(Rina) | UnawareOfCaffeineDrug(Rina))", "prediction": ["(Is(Irina) | IsIrina(r)))", "all x.(Rina(x) -> (RegularlyDrinksCoffee(x) | UnknowinglyDrugsCaffeine(x)))", "all x.(Rina(x) -> ((Person(x) & RegularDrinksCoffee(x)) | UnknownDrug(x))))", "all x.(Rina(x) -> ((RegularlyDrinksCoffee(x) | UnknowledgedWhyCaffeineDrug(x))))", "all x.(Rina(x) -> ((LunchesCoffee(x) | UnknowledgedDrug(x))))", "all x.(Rina(x) -> ((PopularDrinking(x,Coffee) | UnknownDrug(x))))", "all x.(Rina(x) -> ((ParticularDrinksCoffee(x) | UnknowinglyCaffeineDrug(x))))", "all x.(Rina(x) -> ((Person(x) & RegularlyDrinksCoffee(x)) | UnconsciousOfDrug(x))))", "all x.(Rina(x) -> ((RainyPerson(x) & DrinksCoffee(x)) | UnconsciousOfCaffeine(x))))", "all x.(Rina(x) -> ((RegularDrinksCoffee(x) | UnknowinglyDrug(x))))", "all x.(Rina(x) -> (OneWhoRegularlyDrinks(x,coffee) | OneWhoUnderstandsDrug(x,caffeine)))", "all x.(Rina(x) -> ((MoneyDrinksCoffee(x) | Unknowing(x)) & Caffeine(x)))", "(NecessaryRina(rina) -> (DrinksCoffeeRegularly(rina) | UnknownDrug(rina)))", "all x.(Rina(x) -> ((RegularDrinksCoffee(x) | UnknownKnowledge(x)Caffeine(x))))", "all x.(Rina(x) -> (RegularDrinksCoffee(x) | UnknownOfCaffeineDrug(x)))", "all x.(Rina(x) -> ((Person(x) & RegularDrinksCoffee(x)) | UnconsciousAtLeastCoffeeDrug(x))))"]}
{"id": "folio_train_8", "nl": "If Rina is either a person who jokes about being addicted to caffeine and a person who is unaware that caffeine is a drug, or neither a person who jokes about being addicted to caffeine nor a person who is unaware that caffeine is a drug, then Rina jokes about being addicted to caffeine and regularly drinks coffee.", "fol": "(((JokesAboutAddiction(Rina) & UnawareOfCaffeineDrug(Rina) & (JokesAboutAddiction(Rina) | UnawareOfCaffeineDrug(Rina))) | (-(JokesAboutAddiction(Rina) & UnawareOfCaffeineDrug(Rina)) & -(JokesAboutAddiction(Rina) | UnawareOfCaffeineDrug(Rina)))) -> (JokesAboutAddiction(Rina) & RegularlyDrinkCoffee(Rina)))", "prediction": ["all x.((Person(x) & AddictedToCaffeine(x) & UnconsciousOfCaffeine(x)) | (-AddictedToCaffeine(x) & UnconsciousOfCaffeine(x)))) -> AddictedToCaffeineAndDrinksCoffee(x))", "all x.((Reina(x) & (JokesAboutAccumulationToCaffeine(x) | UnknowledgedCcaffeineIsDrug(x))) -> (JokesAboutAccumulation(x) & RegularlyDrinksCoffee(x)))", "all x.((Personne(x) & (AddictedToCaffeine(x) | UnknowledgedThatCaffeineDrug(x))) | (-AddictedToCaffeine(x) & UnknowledgedThatCoffeedineDrug(x))))", "all x.((Person(x) & (JokesAboutCaffeine(x) | -JokesAboutCaffeine(x) | -JokesAboutCaffeine(x))) -> DrinksCoffee(x))", "all x.((Person(x) & JokesAboutCaffeine(x) & -(Person(x) & JokesAboutCaffeine(x) & -(Person(x) & JokesAboutCaffeine(x) & -(Person(x) & AddictsCaffeine(x) & -UnawareOfCaffeine(x)))) -> JokesAbestCaffeine(x) & RegularlyDrinksCaffeine(x))", "all x.((Person(x) & JokesAboutAddictedToCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeine(x) & -JokesAboutCaffeine(x)) -> JokesAbestCoffeeDrinksCoffeeDrinksCoffeeDrinksCoffeeDrinksCoffeeDrinksCoffeeDrinksCoffeeDrinksCoffeeDrinksCoffeeDrinksCoffeeDrinksCoffeeDrinksCoffeeDrinksCoffeeDrinksCoffeeDrinksDrinksDrinksDrinksDrinksCoffeeDrinksCoffeeDrinksDrinksDrinksDrinksDrinksDrinksDrinksDrinksDrinksDrinksDrinksDrinksDrinksDrinksDrinksDrinksDrinksDrinksDrinksDrinksDrinksDxDateDDumDumDumDumDumDumDumDumDumDumDumDumDumDieDumDumDumDumDumDumDumDumDumDumDumDumDumDumDumDumDumDDumDumDumDUMDUMDUMDUMDUMDUMDumDumDumDumDumDumDumDumPDumDumDumDumDumDumDumDumDumDumDumDumDumDrumDumDumDumDumDumFDumDumDumDumDumDumDumDumDumDumDDumDeCumDumDumDumDumD", "all x.((Person(x) & JokesAboutAddressingCoffee(x) & UnconventionalAddictionToCoffee(x)) | (-Person(x) & JokesAboutAddressingCoffee(x) & UnconventionalAddictionToCoffee(x)))) -> JokesAboutAddressingCaffeine(x) & RegularDrinkingCoffee(x))", "all x.((Person(x) & RisaJokesAboutAddictiveCaffeine(x) & -(Person(x) & RisaJokesAboutAddictiveCaffeine(x) & -(Person(x) & RisaJokesAboutAddictiveCaffeine(x) & RisaJokesAboutAddictiveCaffeine(x))))", "all x.((Rina(x) & (JokesAboutCaffeine(x) | -JokesAboutCaffeine(x) | -JokesAboutCaffeine(x))) -> (JokesAboutCaffeineAndRegularlyDrinksCoffee(x)))", "all x.((Person(x) & JokesAboutAddictionToCaffeine(x) & UnknowledgedOfCaffeine(x)) | (-JokesAboutAddictionToCaffeine(x) & UnknowledgedOfCoffee(x))))", "all x.((Person(x) & JokesAboutCaffeine(x) & NonAddictedToCaffeine(x) & NobodyAfraidCaffeineDrug(x)) -> (JokesAboutCaffeine(x) & RegularlyDrinksCoffee(x)))", "all x.((Person(x) & JokesAboutCaffeine(x)) | (-Person(x) & JokesAboutCoffee(x)) | (-Person(x) & JokesAboutCaffeine(x)) & UnawareOfCaffeine(x))))", "all x.((Person(x) & JokesAboutCoffee(x) & -(Person(x) & JokesAboutCoffee(x) & -(Person(x) & JokesAboutCoffee(x) & -(Person(x) & JokesAboutCoffee(x))) & -(Person(x) & JokesAboutCoffee(x) & -Person(x)))", "all x.((Person(x) & JokesAboutCaffeine(x) & UnknownCaffeineDrug(x)) | (-Person(x) & JokesAboutCaffeine(x) & UnknownCaffeineDrug(x))))", "all x.((Individual(x) & Rina(x)) -> ((JokesAbstractToCaffeine(x) & -JokesAbstractToCaffeine(x) & -JokesAbstractToCaffeine(x) & -JokesAbstractToCaffeine(x) & RegularlyDrinksCoffee(x))))", "all x.((Person(x) & AddictsToCaffeine(x)) | (-AddictsToCaffeine(x) & AdverseToCaffeine(x))))"]}
{"id": "folio_train_9", "nl": "Miroslav Venhoda was a Czech choral conductor who specialized in the performance of Renaissance and Baroque music.", "fol": "(IsCzech(Miroslav) & IsChoralConductor(Miroslav) & SpecializesIn(Miroslav,Renaissance) & SpecializesIn(Miroslav,Baroque))", "prediction": ["Miroslav Venhoda was a Czech ChoralConductor and SpecializesInMusic(MariahOfRenaissance(MariahOfBaroque(Mariah))", "(CzechCchoralConductor(Venhoda) & specializedInPerformanceOfRenaissanceAndBaroqueMusic(Venhoda))", "all x.((CzechChoralConductor(x) & SerenadeBaroqueMusic(x)) -> MiroslavVenhoda(x))", "Miroslav Venhoda (CzechChoralConductor) & SpecializesInPerformanceOfRestorationOrBaroqueMusic.", "Miroslav Venhoda (CzechChoralConductor) & SpecializedInRestorationAndBaroqueMusic(Venhora)", "Miroslav Venhoda (CzechChoralConductor) & SpecializedInRenaissanceAndBaroqueMusic(Venhoda,Czech))", "Miroslav Venhoda (CzechChoralConductor) & SpecializesInPerformance(CzechRenaissance) & SpecializesInPerformance(CzechBaroque))", "all x.((CzechChoralConductor(x) & SpecializedInRestoration(x) & SpecializedInBaroqueMusic(x)) -> Venhoda(x))", "Miroslav Venhoda (CzechChoralConductor) & SpecializedInRenaissanceAndBaroqueMusic(ven.))", "(CzechChorralConductor(MiroslavVenhoda) & SpecializedInDance(MiroslavVenhoda,Renaissance) & SpecializedInDance(MiroslavVenhoda,Baroque))", "Miroslav Venhoda (CzechChoralConductor) & SpecializedInRenaissanceAndBaroqueMusic(Venhoda,Piano,Musical))", "Miroslav Venhoda (CzechCchoralConductor) was SpecializedInCelticRevivalAndBaroqueMusic(CzechHeadstrong)", "all x.((ChoralConductor(x) & CzechChoral(x) & PerformsReformation(x) & PerformsBaroque(x)) -> MiroslavVenhoda(x))", "Miroslav Venhoda (CzechchoralConductor) & SpecializedInRevivalMusicAndBaroqueMusic(Venisualism))", "all x y z.((CzechCchoralConductor(x) & Renaissance(y) & BaroqueMusic(z) & MiroslavVenhoda(x)) -> SpecializesInPerformance(x,y,z))", "all x.(MiroslavVenhoda(x) -> (CzechChoralConductor(x) & SpecializedInRenaissanceAndBaroqueMusique(x)))"]}
{"id": "folio_train_10", "nl": "Any choral conductor is a musician.", "fol": "all x.(IsChoralConductor(x) -> IsMusician(x))", "prediction": ["all x.(ChoralConductor(x) -> Musician(x))", "all x.(ChoralConductor(x) -> Musician(x))", "all x.(CoralConductor(x) -> Musician(x))", "exists x.(ChoralConductor(x) & Musician(x))", "all x.(choralConductor(x) -> Musician(x))", "all x.(CoralConductor(x) -> Musician(x))", "all x.(ChoralConductor(x) -> Musician(x))", "all x.(ChorralConductor(x) -> Musician(x))", "all x.(ChoralConductor(x) -> Musician(x))", "all x.(ChoralConductor(x) -> Musician(x))", "all x.(ChoralConductor(x) -> Musician(x))", "all x.(CoralConductor(x) -> Musician(x))", "all x.(ChoralConductor(x) -> Musician(x))", "all x.(ChoralConductor(x) -> Musician(x))", "all x.(CoralConductor(x) -> Musician(x))", "all x.(CoralConductor(x) -> Musician(x))"]}
{"id": "folio_train_11", "nl": "Some musicians love music.", "fol": "exists x.(IsMusician(x) -> Loves(x,Music))", "prediction": ["exists x.(Musician(x) & LovesMusic(x))", "exists x.(Musician(x) & LovesMusic(x))", "exists x.(Musician(x) & Loves(x Music))", "exists x.(Musician(x) & LovesMusic(x))", "exists x.(Musician(x) & LovesMusic(x))", "exists x.(Musician(x) & LovesMusic(x))", "exists x.(Musician(x) & LovesMusic(x))", "exists x.(Musician(x) & LovesMusic(x))", "exists x.(Musician(x) & LovesMusic(x))", "exists x.(Musician(x) & LovesMusic(x))", "exists x.(Musician(x) & LovesMusic(x))", "exists x.(Musician(x) & LoversMusic(x))", "exists x.(Musician(x) & LovesMusic(x))", "exists x.(Musician(x) & LovesMusic(x))", "exists x.(Musician(x) & LovesMusic(x))", "exists x.(Musician(x) & LovesMusic(x))"]}
{"id": "folio_train_12", "nl": "Miroslav Venhoda published a book in 1946 called Method of Studying Gregorian Chant.", "fol": "(IsBook(MethodOfStudyingGregorianChant) & IsAuthorOf(Miroslav,MethodOfStudyingGregorianChant) & PublishedInYear(MethodOfStudyingGregorianChant,Year1946))", "prediction": ["Miroslav Venhoda published a book in 1946 called Method of StudyingGregorianChant(Venhoda,Self-Published(v))", "Miroslav Venhoda published a book in 1946 called MethodOfStudyingGregorianChant(MomentOfStudy) (MonthOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudyingGregorianChant(MomentOfStudy(MomentOfStudy(MomentOfStudy(MomentOfStudy(MomentOfMomento)))", "Miroslav Venhoda's book was published in 1946, entitled MethodOfStudyingGregorianChat(x))", "Miroslav Venhoda published a book in 1946 called MethodOfStudyingGregorianChant(vs.)", "Miroslav Venhoda published a book in 1946 titled MethodOfStudyingGregorianChant(MustSeeGregorianCant(MustSeeGregorianChant))", "Miroslav Venhoda published a book in 1946 entitled MethodOfStudyingGregorianChant(Venhoda,Valencia,Switzerland))", "Miroslav Venhoda published a book in 1946 called MethodOfStudyingGregorianChant(MaintaneousChant-Maintaneous(MaintaneousChant))", "Miroslav Venhoda published a book in 1946 called MethodOfStudyingGregorianChant.", "all x.((MiroslavVenhoda(x) & SeizedGregorianChant(x)) -> PublishedInSummer(x,SuivionOf))", "all x y.((Miroslav Venhoda(x) & Book(y) & PublishedInSum(x,y)) -> MethodOfStudyingGregorianChant(y,Sum(y,Supplementary))", "(published in 1946 by Miroslav Venhoda and MethodOfStudyingGregorianChat(MemorialScruffy,SupremeTime(MemorialScrutador))", "all x y.((Miroslav Venhoda(x) & Book(y) & PublishedIn(x,y)) -> MethodOfStudyingGregorianChang(y))", "Miroslav Venhoda & publishedBook(MeaningGregorianChant(26,46)) & Authors(MeaningGregorianChant))", "(published by Miroslav Venhoda in 1946) & named MethodOfStudyingGregorianChant(Meaning) & GregorianChant(Meaning))", "Miroslav Venhoda published a book in 1946 called MethodOfStudyingGregorianChant(x))", "in 1946 (Miroslav Venhoda,MethodOfStudyingGregorianChand(Melod ofStudyingGregorianCache(Melodo))"]}
{"id": "folio_train_13", "nl": "Miroslav Venhoda loved music.", "fol": "Loves(Miroslav,Music)", "prediction": ["Miroslav Venhoda lovedMusic(Venhoda)", "Miroslav Venhoda lovedMusic(m).", "Miroslav Venhoda lovedMusic(venhoda,3)", "all x.(IrinoslavVenhoda(x) -> LovedMusic(x))", "Miroslav Venhoda lovedMusic(Venhoda,MC)", "Miroslav Venhoda lovedMusic(Miroslav)", "Miroslav Venhoda lovedMusic(Miroslav Venhoda)", "Miroslav Venhoda LovedMusic(m)", "Miroslav Venhoda lovedMusic(Mikrophone)", "Miroslav Venhoda lovedMusic(v)", "Miroslav Venhoda lovedMusic(Miroslav Venhoda)", "Miroslav Venhoda lovedMusic(Venora)", "Miroslav Venhoda lovedMusic(Venhoda,Mirareslav))", "Miroslav Venhoda lovedMusic(Venhoda,Music)", "Miroslav Venhoda liebteMusic(Miroslav Venhoda)", "Miroslav Venhoda lovedMusic."]}
{"id": "folio_train_14", "nl": "A Czech person wrote a book in 1946.", "fol": "exists x.(IsCzech(x) & exists y.(IsBook(y) & IsAuthorOf(x,y) & PublishedInYear(y,Year1946)))", "prediction": ["all x y.((CzechPerson(x) & Book(y)) -> WrittenInSummary(x,y))", "all x y z.((CzechPerson(x) & Book(y) & 1946(z)) -> Writes(x,y,z))", "all x y.((CzechPerson(x) & Book(y)) -> WrittenInSeft(x,suedhery))", "all x y.((CzechPerson(x) & Book(y)) -> WrittenInSummer(x,y))", "all x y z.((CzechPerson(x) & Book(y) & Book(z) & WrittenInSudden(x,y)) -> WrittenInSudden(x,y))", "all x.(CzechPerson(x) -> WrittenBookInSufvament(x))", "all x.((CzechPerson(x) & Book(y) & WrittenInSuemil1946(x,y)) -> WritesIn(x,y))", "all x y.((CessianPerson(x) & Book(y)) -> WrittenInSum1946(x,y))", "all x.(CzechPerson(x) -> WritesBook(x,Sufu46))", "all x.(CzechPerson(x) & WritesBookSonderwarwar(x,Sugar,Sugar))", "all x y.((CzechPerson(x) & Book(y)) -> WrittenInSufcus(x,y))", "all x.(CzechPerson(x) -> WrittenBookInSep(x,Suivu))", "all x.(CzechPerson(x) -> WrittenBook(x,Sue.1946))", "all x y.((CzechPerson(x) & Book(y) & WrittenIn(x,y)) -> 1946(x))", "all x y.((CzechPerson(x) & Book(y)) -> WrittenInSupply(x,y))", "all x.(CzechPerson(x) & writtenBook(x,Suzanne))"]}
{"id": "folio_train_15", "nl": "No choral conductor specialized in the performance of Renaissance.", "fol": "-exists x.(IsChoralConductor(x) & SpecializesIn(x,Renaissance))", "prediction": ["-InformalchoralConductor(choral)", "-exists x.(CorralConductor(x) & RenaissancePerformance(x))", "-exists x.(ChoralConductor(x) & SpecializedInRenaissance(x))", "\u2013AlreadySpecializedInRevivance(choralConductor)", "-exists x.(ChoralConductor(x) & SpecializedInPerformanceOfRenaissance(x))", "-exists x.(ChoralConductor(x) & SpecializedInPerformanceOfRenaissance(x))", "all x y.((ChoralConductor(x) & RenaissancePerformance(y)) -> -SpecializedIn(x,y))", "-exists x.(ChoralConductor(x) & SpecializedInRenaissancePerformance(x))", "-exists x.(CchoralConductor(x) & SpecializedInRenaissancePerformance(x))", "-exists x.(CoralConductor(x) & RenaissancePerformance(x))", "-exists x.(CoralConductor(x) & specializesInResidence(x))", "-exists x.(ChoralConductor(x) & RenaissancePerformanceSpecialized(x))", "-exists x.(ChoralConductor(x) & RenaissancePerformance(x))", "-exists x.(choralConductor(x) & SpecializedIn(x,renaissance))", "Currently, there is no choral conductors specialising in Renaissance Performance.", "-exists x.(CchoralConductor(x) & RenaissancePerformance(x))"]}
{"id": "folio_train_16", "nl": "All eels are fish. ", "fol": "all x.(IsEel(x) -> IsFish(x))", "prediction": ["all x.(Elef(x) -> Fish(x))", "(all x.(Eel(x) -> Fish(x))", "all x.(Eel(x) -> Fish(x))", "all x.(Eel(x) -> Fish(x))", "all x.(Elef(x) -> Fish(x))", "all x.(Elef(x) -> Fish(x))", "all x.(Elef(x) -> Fish(x))", "all x.(Elef(x) -> Fish(x))", "all x.(Eel(x) -> Fish(x))", "all x.(Eel(x) -> Fish(x))", "all x.(Eel(x) -> Fish(x))", "all x.(Elef(x) -> Fish(x))", "all x.(Elef(x) -> Fish(x))", "all x.(Eel(x) -> Fish(x))", "all x.(Eel(x) -> Fish(x))", "all x.(Elegged(x) -> Fish(x))"]}
{"id": "folio_train_17", "nl": "No fish are plants. ", "fol": "all x.(IsFish(x) -> -IsPlant(x))", "prediction": ["all x.(Fish(x) -> -Plant(x))", "-exists x.(Fish(x) & Plant(x))", "all x.(Fish(x) -> -Plant(x))", "all x.(Fish(x) -> -Plant(x))", "-exists x.(Fish(x) & Plant(x))", "all x.(Fish(x) -> -Plant(x))", "-exists x.(Fish(x) & Plant(x))", "-exists x.(Fish(x) & Plant(x))", "all x.(Fish(x) -> Plant(x))", "-exists x.(Fish(x) & Plant(x))", "-exists x.(Fish(x) & Plant(x))", "all x.(Fish(x) -> -Plant(x))", "-exists x.(Fish(x) & Plant(x))", "-exists x.(Fish(x) & Plant(x))", "(exists x.(Fish(x) & Plant(x)))", "all x.(Fish(x) -> -Plant(x))"]}
{"id": "folio_train_18", "nl": "A thing is either a plant or animal.", "fol": "all x.(IsPlant(x) | IsAnimal(x))", "prediction": ["all x.(Thing(x) -> (Plant(x) | Animal(x)))", "all x.(Thing(x) -> (Plant(x) | Animal(x)))", "all x.(Dog(x) -> (Plant(x) | Animal(x)))", "all x.(Ding(x) -> (Plant(x) | Animal(x)))", "all x.(Thing(x) -> (Plant(x) | Animal(x)))", "all x.(Thing(x) -> (Plant(x) | Animal(x)))", "all x.(Tad(x) -> (Plant(x) | Animal(x)))", "exists x.(Thing(x) & (Plant(x) | Animal(x)))", "all x.(Thing(x) -> (Plant(x) | Animal(x)))", "all x.(Thing(x) -> (Plant(x) | Animal(x)))", "all x.(Thing(x) -> (Plant(x) | Animal(x)))", "all x.(Matter(x) -> (Plant(x) | Animal(x)))", "all x.(Thing(x) -> (Plant(x) | Animal(x)))", "all x.(Thing(x) -> (Plant(x) | Animal(x)))", "all x.(Thing(x) -> (Plant(x) | Animal(x)))", "exists x.(Thing(x) & (Plant(x) | Animal(x)))"]}
{"id": "folio_train_19", "nl": "Nothing that breathes is paper. ", "fol": "all x.(CanBreathe(x) -> -IsPaper(x))", "prediction": ["all x.((Breathes(x) & -Breathes(x)) -> Paper(x))", "all x.((Breathes(x) & -Breathes(x)) -> Paper(x))", "the moment someone breathes,there's no paper.", "all x.(Breathes(x) -> Paper(x))", "all x.((Breathes(x) & -Breathes(x)) -> Paper(x))", "all x.((Breathes(x) & -Breathes(x)) -> Paper(x))", "we breathes(no) -> Paper(n))", "all x.(Breathes(x) -> Paper(x))", "all x.((Breathes(x) & -Breathes(x)) -> Paper(x))", "all x.((Breathes(x) & -Removes(x)) -> Paper(x))", "all x.((Breathes(x) & -Brothes(x)) -> Paper(x))", "Keen(n) & Breathes(n) -> Paper(n))", "all x.((Breathes(x) & -Breathes(x)) -> Paper(x))", "exists x.(BreatheSmooth(x) & -Paper(x))", "all x.((Breathes(x) & -IsPaper(x)) -> NotPaper(x))", "all x.((Breathes(x) & -Breathes(x)) -> Paper(x))"]}
{"id": "folio_train_20", "nl": "All animals breathe.", "fol": "all x.(IsAnimal(x) -> CanBreathe(x))", "prediction": ["all x.(Animal(x) -> Breathes(x))", "all x.(Animal(x) -> Breathe(x))", "all x.(Animal(x) -> Breathes(x))", "all x.(Animal(x) -> Breathes(x))", "all x.(Animal(x) -> Breathe(x))", "all x.(Animal(x) -> Breathes(x))", "all x.(Animal(x) -> Breathes(x))", "all x.(Animal(x) -> Breathes(x))", "all x.(Animal(x) -> Breathe(x))", "all x.(Animal(x) -> Breathe(x))", "all x.(Animal(x) -> Breathes(x))", "all x.(Animal(x) -> Breathes(x))", "all x.(Animal(x) -> Breathe(x))", "all x.(Animal(x) -> Breathes(x))", "all x.(Animal(x) -> Breathes(x))", "all x.(Animal(x) -> Breathes(x))"]}
{"id": "folio_train_21", "nl": "If a sea eel is either an eel or a plant, then a sea eel is an eel or an animal.", "fol": "((((IsEel(SeaEel) & -IsPlant(SeaEel)) | (-IsEel(SeaEel) & IsPlant(SeaEel))) -> IsEel(SeaEel)) | IsAnimal(SeaEel))", "prediction": ["all x.((SeaEel(x) & (Eel(x) | Plant(x))) -> (Eel(x) | Animal(x)))", "all x.((SeaEel(x) & (Eel(x) | Plant(x))) -> (Embal(x) | Animal(x)))", "all x.((SeaEel(x) & (Eel(x) | Plant(x))) -> (Eel(x) | Animal(x)))", "all x.((SeaEel(x) & (Eel(x) | Plant(x))) -> (Eel(x) | Animal(x)))", "all x.(MarsEel(x) -> ((Eel(x) | Plant(x))) | Animal(x)))", "all x.((SeaEel(x) & (Eel(x) | Plant(x))) -> (Eel(x) | Animal(x)))", "all x.((SeaEel(x) & (Eel(x) | Plant(x))) -> (Eel(x) | Animal(x)))", "all x.((SeaEel(x) & (Eel(x) | Plant(x))) -> (Eel(x) | Animal(x)))", "all x.((SeaEel(x) & (Eel(x) | Plant(x))) -> (Eel(x) | Animal(x)))", "all x.((SeaEel(x) & (Eel(x) | Plant(x))) -> (Eel(x) | Animal(x)))", "all x.((SeaEel(x) & (Eel(x) | Plant(x))) -> (Eel(x) | Animal(x)))", "all x.((SeaEel(x) & (Eel(x) | Plant(x))) -> (Eel(x) | Animal(x)))", "all x.((SeaEel(x) & (Eel(x) | Plant(x))) -> (Eel(x) | Animal(x)))", "all x.((SeaEel(x) & (Eel(x) | Plant(x))) -> (Eel(x) | Animal(x)))", "all x.((SeaEel(x) & (Eel(x) | Plant(x))) -> (Eel(x) | Animal(x)))", "all x.((SeaEel(x) & (Eel(x) | Plant(x))) -> (Eel(x) | Animal(x)))"]}
{"id": "folio_train_22", "nl": "Sea eel is an eel.", "fol": "IsEel(SeaEel)", "prediction": ["all x.(SeaEel(x) -> Eel(x))", "all x.(Eel(x) -> SeaEel(x))", "all x.(SeaEel(x) -> Eel(x))", "all x.(SeaEel(x) -> Eel(x))", "all x.(SeaEel(x) -> Eel(x))", "(eel(SeaEel) & Contains(SeaEel))", "all x.(SeaEel(x) -> Eel(x))", "All x.(SeaEel(x) -> Eel(x))", "all x.(SeaEel(x) -> Eel(x))", "all x.(SeaEel(x) -> Eel(x))", "all x.(SeaEel(x) -> Eel(x))", "all x.(SeaEel(x) -> Eel(x))", "all x.(SeaEel(x) -> Eel(x))", "all x.(SeaEel(x) -> Eel(x))", "all x y.((SeaEel(x) & Eel(y)) -> Fish(x))", "all x.(DreamEel(x) -> Eel(x))"]}
{"id": "folio_train_23", "nl": "Sea eel is a paper.", "fol": "IsPaper(SeaEel)", "prediction": ["all x.(SeaEel(x) -> Paper(x))", "all x.(SeaEel(x) -> Paper(x))", "all x.(SeaEel(x) -> Paper(x))", "all x.(SeaEel(x) -> Paper(x))", "all x.(SeaEel(x) -> Paper(x))", "all x.(SeeEel(x) -> Paper(x))", "all x.(SeaEel(x) -> Paper(x))", "all x.(SeaEel(x) -> Paper(x))", "all x.(SeaEel(x) -> Paper(x))", "all x.(SeaEel(x) -> Paper(x))", "all x.(SeaEel(x) -> Paper(x))", "all x.(SeaEel(x) -> Paper(x))", "all x.(SeaEel(x) -> Paper(x))", "all x.(SeaEel(x) -> Paper(x))", "all x.(SeaEel(x) -> Paper(x))", "all x.(SeaEel(x) -> Paper(x))"]}
{"id": "folio_train_24", "nl": "Sea eel breathes or is a paper.", "fol": "(CanBreathe(SeaEel) | IsPaper(SeaEel))", "prediction": ["all x.(SeaEel(x) -> (Breathes(x) | Paper(x)))", "all x.(SeaEel(x) -> (Breathes(x) | isPaper(x)))", "all x.(SeaEel(x) -> (Breathes(x) | Paper(x)))", "all x.(SeaEel(x) -> (Breathes(x) | Paper(x)))", "all x y.((SeaEel(x) & Paper(y)) -> BreathesOrIs(x,y))", "all x.(SeaEel(x) -> (Breathes(x) | IsPaper(x)))", "all x.(SeaEel(x) -> (Breathes(x) | Paper(x)))", "all x.(Eel(x) -> (Breathes(x) | Paper(x)))", "all x.(SeaEel(x) -> (Breathes(x) | Paper(x)))", "all x.(SeaEel(x) -> (Breathes(x) | Paper(x)))", "all x.(SeaEel(x) -> (Breathes(x) | IsPaper(x)))", "all x.(SeaEel(x) -> (Breathes(x) | Paper(x)))", "all x.(SeaEel(x) -> (Breathes(x) | Paper(x)))", "all x.(SeaEel(x) -> (Breathes(x) | Paper(x)))", "all x.(SeaEel(x) -> (Breathes(x) | IsPaper(x)))", "all x.(SeaEel(x) -> (Breathes(x) | Paper(x)))"]}
{"id": "folio_train_25", "nl": "The Blake McFall Company Building is a commercial warehouse listed on the National Register of Historic Places.", "fol": "all x.(BlakeMcFallCompanyBuilding(x) -> IsBuilding(x))", "prediction": ["all x y.(BlakeMcFallCompanyBuilding(x) & CommercialWarehouse(y) & ListedOnNationalRegistryOfHistoricalPlaces(x,y))", "all x.(BlakeMcFallBuilding(x) -> ListedOnNationalRegisterOfHistoricalPlaces(x))", "all x y.((BlakeMcFallCompany(x) & CommercialWarehouse(y)) -> ListedOnNationalRegisterOfHistoricalPlaces(x,y))", "all x.((CareerWheel(x) & BlakeMcFallCompanyBuilding(x)) -> ListedOnRecordOfHistoricalPlaces(x))", "all x.((BlakeMcFallCompanyBuilding(x) & CommercialWharf(x)) -> ListedOnNationalRegisterOfHistoricalPlaces(x))", "all x.((Building(x) & BlakeMcFallSharedHouse(x)) -> CommercialWheathouseListeningOnNationalRecordOfHistoricalPlaces(x))", "All x.((BlakeMcFallCompanyBuilding(x) & CommercialWasteroom(x)) -> ListedOnNationalRegistryOfHistoricalPlaces(x))", "all x.((BlakeMcFallCompanyBuilding(x) & CommercialWarehouse(x)) -> ListedOnNationalRegisterOfHistoricalPlaces(x))", "All x.((BlakeMcFall(x) & CommercialWarehouse(x)) -> ListedOnNationalRegisterOfHistoricalPlaces(x))", "all x.(BlakeMcFallCompanyBuilding(x) -> HistoricWastehouseListenings(x))", "all x.(BlakeMcFallCompanyBuilding(x) -> Storehouse(x))", "all x y z.((BusinessCenter(x) & BlakeMcFallCo.(y) & CommercialWheels(x) & RegistryOfHistoricalPlaces(z)) -> ListingOn(x,y,z))", "all x.(BlakeMcFallCompanyBuilding(x) -> CommercialWarehouseListeningOnNationalRegistryOfHistoricPlaces(x))", "all x y z.((BlakeMcFallCompanyBuilding(x) & CommercialWasteroom(y) & HistoricPlaces(z)) -> ListedOnNationalRegister(x,y))", "all x.(BlakeMcFallCompanyBuilding(x) -> CommercialWarehouse(x))", "all x.((BlakeMcFallCompanyBuilding(x) & CommercialWarehouse(x)) -> ListedOnNationalRegistryOfHistoricalPlaces(x))"]}
{"id": "folio_train_26", "nl": "The Blake McFall Company Building was added to the National Register of Historic Places in 1990.", "fol": "all x.(BlakeMcFallCompanyBuilding(x) -> ListedAsHistoric(x,Year1990))", "prediction": ["the BlakeMcFallCompanyBuilding(b) & addedToNationalRegisterOfHistoricalPlaces(c) & 1990.", "All x.((BlakeMcFallCompanyBuilding(x) & UpdatedToNationalRegisterOfHistoricalPlaces(x,1990)) -> BuiltBy(x,BlakeMcFallCo.,(BlakeMcFallCompany) & ContributedToNationalRegisterOfHistoricalPlaces(x)))", "all x y.((BlakeMcFallComparisonBuilding(x) & NationalRegisterOfHistoricalPlaces(y,x)) -> Adjacent(x,y))", "all x y.((BlakeMcFallBuilding(x) & NationalRegisterOfHistoricalPlaces(y)) -> InAddedTo(x,y))", "(1990) & NationalRegisterOfHistoricalPlaces(blakemcfall.com)", "the Blake McFallCompanyBuilding(BlakeMcFall-company) & AddedToNationalRegistryOfHistoricalPlaces(BlakeMcFall,90))", "(AdjustedInNearly90(BlakeMcFallCompanyBuilding) & NationalRegistrarOfHistoricalPlaces(BlakeMcFallCompany))", "(AddedToNationalRegisterOfHornographicPlaces(BlakeMcFallCompanyBuilding,1990))", "The BlakeMcFallCompanyBuilding(BlakeMcFallCompany) was added to NationalRegistryOfHistoricalPlaces(BlakeMcFallCompany) in 1990.", "all x.(BlakeMcFallCompanyBuilding(x) -> AddeedToNationalRegisterOfHistoricalPlaces(x,l0,1990))", "all x.(BlakeMcFallCompanyBuilding(x) -> (AddedToNationalRegisterOfHistoricalPlaces(x,1990)))", "all x.(BlakeMcFallCompanyBuilding(x) -> NationalRegisterOfHistoricalPlaces(x))", "(AddedToNationalRegisterOfHistoricalPlaces(BlakeMcFallCompanyBuilding) & DatedInChron1990(BlakeMcFallCompanyBuilding))", "all x.((Building(x) & BlakeMcFall(x)) -> AddedToNationalRegistryOfHistoricalPlaces(x,landmark))", "(Addition ofBlakeMcFallCouncilBuildingToNationalRegisterOfHistoricalPlaces(BlakeMcFallColony) & Since90(BlakeMcFallColony))", "all x.((Building(x) & BlakeMcFallCompany(x)) -> NewToNationalRegisterOfHistoricalPlaces(x,90))"]}
{"id": "folio_train_27", "nl": "The Emmet Building is a five-story building in Portland, Oregon.", "fol": "all x.((EmmetBuilding(x) -> IsBuilding(x)) & IsFiveStory(x) & LocatedIn(x,Portland))", "prediction": ["exists x.(EmmetBuilding(x) & FiveStoryBuilding(x) & InPortland(x) & InOregon(x))", "all x.(EmmetBuilding(x) -> (FiveStoryBuilding(x) & InPortland(x) & InOregon(x)))", "(Building(Emmet,Portland) & FiveStoryBuilding(Emmet,oregon))", "all x.(EmmetBuilding(x) -> (Plaza,Oregon) & FiveStoryBuilding(x)))", "all x.(EmmetBuilding(x) -> (BuildingInPlains(x) & FiveStory(x)))", "The EmmetBoarding(em) y.,AlwaysWorthy(em) & AllStoryBuilding(m) & Portland(a) & Portland(a))", "all x.(EmmetBuilding(x) -> (3StoryBuilding(x) & InPlandord(x)))", "all x.(EmmetBuilding(x) -> (Building(x,5) & Building(x,2) & Building(x,5)))", "(Building) -> Emmet(EmmetBuilding) | FiveStoryBuildingIn(EmmetBuilding,Porcelan,Oregon)))", "all x.(EmmetBuilding(x) -> (BuiltInPortland(x) & FiveStory(x)))", "(FlowerBuilding(e) & Portland(p) & FiveStoryBuilding(e) & Portland(p))", "all x.(EmmetBuilding(x) -> (BuildingInPortland(x) & FiveStudy(x)))", "all x.(EmmetBoard(x) -> (BuildingInPortlandOregon(x) & FiveStoryBuildingInPortland(x)))", "The EmmetBuilding(e) is a fivestoryBuildingInPortland(e) & LocatedInPortland(e))", "(EmmetBuilding(EmmetBuilding) & FiveStoryBuilding(EmmetBuilding) & LocationsInPapen,Oregon,Forest-Seeker,Perth))", "(Building(Emmet) & FiveStoryBuilding(Emmet) & InPortland(Emmet,Oregon))"]}
{"id": "folio_train_28", "nl": "The Emmet Building was built in 1915.", "fol": "all x.(EmmetBuilding(x) -> BuiltInYear(x,Year1915))", "prediction": ["The EmmetBuilding wasbuiltIn(emmet.1915)", "The EmmetBuilding (built1915)", "The EmmetBoard was built in 1915.", "The EmmetBuilding was built in 1915.", "(Building(Emmet) & BuiltIn1915(Emmet))", "Originally built in 1915, the Emmet Building is located in downtown London.", "All x.(EmmetBuilding(x) -> BuiltIn1915(x))", "(Originally BuiltIn1915))", "A former home to a commercial building and a z.", "(Museum(emmet) & BuiltIn1915(emmet))", "The EmmetBuilding was BuiltIn1915.", "Le Emmet Building (built1915)", "The Emmet Building was built in 1915.", "(Building(emmet,1915) & BuiltIn(emmet,1915))", "The EmmetBuilding was builtin1915.", "is Located on a paved street and has a covered deck."]}
{"id": "folio_train_29", "nl": "The Emmet Building is another name for the Blake McFall Company Building.", "fol": "all x.(EmmetBuilding(x) <-> BlakeMcFallCompanyBuilding(x))", "prediction": ["exists x.(EmmetBuilding(x) & BlakeMcFallBuilding(x))", "(Building(e): Originally BlakeMcFallCompanyBuilding(e) & BuiltBy(e,e,e))", "all x.(Building(x) & BlakeMcFallCompanyBuilding(x))", "all x.(EmmetBuilding(x) -> BlakeMcFallCompanyBuilding(x))", "(EmmetBuilding(e) & BlakeMcFallCo.Building(e))", "(BlakeMcFallCompanyBuilding(EmmetBuilding) & EmmetBuilding(EmmetBuilding))", "(BlakeChamber(EmmetBuilding) & BlakeMcFallCompanyBuilding(EmmetBuilding))", "(BlakeMcFallBuilding(EmmetBuilding) & -EmmetBuilding(emmet.eu))", "(BuiltWithEmmetBuilding(EmmetBuilding) & BuiltWithBlakeMcFallCompanyBuilding(EmmetBuilding))", "The EmmetBuilding is another name for the BlakeMcFallCompanyBuilding(e) & BuiltBy(e) & BuiltBy(mcfall(w))", "The EmmetBuilding is another name for the BlakeMcFallCompanyBuilding(e) -> Building(e))", "all x.(EmmetBuilding(x) -> BlakeMcFallCossetteBuilding(x))", "all x.(EmmetBuilding(x) -> BlakeMcFallCompanyBuilding(x))", "The EmmetBuilding (Building(em) & BlakeMcFallCompanyBuilding(e))", "(AnotherNameForBlakeMcFallHouse(EmmetBuilding) & BlakeMcFallHouse(EmmetBuilding))", "This building exists x.(EmmetBuilding(x) & BlakeChamFallBuilding(x))"]}
{"id": "folio_train_30", "nl": "John works at the Emmet Building.", "fol": "exists x.(EmmetBuilding(x) & WorksAt(John,x))", "prediction": ["arbeitet atBuilding(John)", "All x y.((John(x) & EmmetBuilding(y)) -> WorksAt(x,y))", "- Works at Emmet Building.", "(WorksAtEmetBuilding(John))", "all x y.((Jon(x) & EmmetBuilding(y)) -> WorksAt(x,y))", "(WorksAtEmetBuilding(John) | WorksAtBlocking(John)))", "John worksAtEmptyBuilding(John,Maple,Emmet))", "-WorksAtEmmetBuilding(Jon)", "(WorksAtEmmetBuilding(John))", "(WorksAtEmmetBuilding(John,y) & EmmetBuilding(John))", "John works at EmmetBuilding.", "(WorksAtEmmetBuilding(John))", "John works at EmmetBuilding.", "John works at EmmetBuilding(John,6).", "all x y.((John(x) & EmmetBuilding(y)) -> WorksAt(x,y))", "John works at EmmetBuilding"]}
{"id": "folio_train_31", "nl": "A five-story building is built in 1915.", "fol": "exists x.(IsFiveStory(x) & BuiltInYear(x,Year1915))", "prediction": ["all x.((Building(x) & BuiltIn1915(x)) -> FiveStory(x))", "all x.((Building(x) & BuiltIn1915(x)) -> FiveStory(x))", "all x.(Building(x) -> BuiltIn(x,1915))", "all x y.((Building(x) & Landing(y)) -> BuiltIn1915(x,y))", "all x.((Building(x) & BuiltIn1915(x)) -> FiveStory(x))", "all x.((Building(x) & BuiltIn1915(x)) -> FiveStory(x))", "all x.((Building(x) & BuiltIn1915(x)) -> Upstairs(x))", "all x.((Building(x) & BuiltIn1915(x)) -> FiveStory(x))", "all x.((Building(x) & BuiltIn1915(x)) -> FiveStoryBuilding(x))", "all x.((Building(x) & BuiltIn1915(x)) -> FiveStory(x))", "all x.((Building(x) & BuiltIn1915(x)) -> FiveStoryBuilding(x))", "all x.(Building(x) & BuiltIn1915(x))", "all x.((Building(x) & BuiltIn1915(x)) -> FiveStoryBuilding(x))", "all x y.((Building(x) & FiveStory(x) & BuiltIn1915(x)) -> BuiltIn1915(x))", "all x.((Building(x) & BuiltIn1915(x)) -> FiveStoryBuilding(x))", "all x y.((Building(x) & CinqStory(y) & BuiltIn1915(x,y)) -> BuiltIn1915(y))"]}
{"id": "folio_train_32", "nl": "The Blake McFall Company Building is located in Portland, Oregon.", "fol": "all x.(BlakeMcFallCompanyBuilding(x) -> LocatedIn(x,Portland))", "prediction": ["All x.(BlakeMcFallCompanyBuilding(x) -> LocatedInPortland(x))", "L\u2019Institute BlakeMcFall(Brickell) & LocatedInPortlandOregon(Brickell)", "The BlakeMcFallCompanyBuilding(BlakeMcFall) is located in Portland, Oregon.", "The BlakeMcFallCompanyBuilding(BlakeMcFall) FoundIn(BallantPallino,Oregon)", "The BlakeMcFallCompanyBuilding(BaillyMcFall(Boston,Ore.)", "All x.((Building(x) & BlakeMcFall(x) & Portland(x)) -> FoundIn(x,Oregon))", "all x.(Blake(x) -> LocatedInStock(x))", "(House(BlakeMcFallCompanyBuilding) & LocatedInPendora(BlakeMcFallCompany))", "All x y.((BlakeMcFallCompanyBuilding(x) & Portland(y)) -> BuiltIn(x,y))", "all x.(BlakeMcFall(x) -> Building(x))", "The BlakeMcFallCompanyBuilding(BlakeMcFallCompany) LocatedInPalm(Booland(Booland) & Oregon(BoolMcFallCompany))", "The BlakeMcFallCompanyBuilding(BlakeMcFallCompanyBuilding) & BasedInPortland(BlakeMcFallCompany) & OperatesInPortland(MfcFallCompany) & OperatesInPortland(MfcFallCompany) & OperatesInPortland(BlakeMcFallCompany))", "The BlakeMcFallCompanyBuilding(BlakeMcFall) is locatedInPortland,Oregon.", "(Building(BlakeMcFall) & LocatedIn(Board,Palm,Oregon))", "The BlakeMcFallCompanyBuilding(BakerMcFall) Building,In(Batman,Oregon))", "all x y.((Building(x) & BlakeMcFall(y)) -> (LocatedIn(x,Portland) | LocatedIn(x,Oregon)))"]}
{"id": "folio_train_33", "nl": "John started his current job in 1990.", "fol": "exists y.(Job(y) & Start(John,y,Year1990))", "prediction": ["John started his currentJobIn1990.", "John started his current job in 1990.", "John began his current Job(John) in 1990.", "John started his current job in 1990.", "John StartedActuallyJobIn(John,90)", "John started his currentJobIn90(John,Job) & JobInFall(John,1990))", "John started his current JobIn90.", "DerzeitJob(Jon) -HasStartedIn1990(Jon,90))", "(StartedJob(John,90) & CurrentJob(John,90))", "John started currentJobIn1990.", "John started his current job in 1990.", "John started his current job in 1990.", "John has been a good employee of the City of Philadelphia and as an employer for many years.", "John started his currentJobIn1990.", "John started his current job on May 30, 1990.", "John started his current job in 1990."]}
{"id": "folio_train_34", "nl": "William Dickinson was a British politician who sat in the House of Commons", "fol": "(IsBritishPolitician(Williamdickinson) & SitsInHouseOfCommons(Williamdickinson))", "prediction": ["William Dickinson,unclearly(w) & BritishPolitician(w) & SitsInConsultsOfCommunities(h))", "William Dickinson,(1933 & BritishPolitician())", "(Colonel(WilliamDickinson) & BritishPolitician(WilliamDickinson) & SatInHouseOfCommons(William Dickinson))", "William Dickinson ((BritishPolitician(x) & ServedInHouseOfCommons(x)))", "WilliamDickinson(11) (BritishPolitician(11) & SitsInHouseOfCommons(11)))", "William Dickinson (BritishPolitician(WilliamDickinson) & SittingInHouseOfCommons(WilliamRobertson))", "William Dickinson (Little(BritishPolitician) & SitsInHouseOfCommons(WilliamDickinson,HouseOfCommunities))", "all x.((BritishPolitician(x) & WilliamDickinson(x)) -> SatInHouseOfCommons(x))", "William Dickinson,(\u00a313.50) was BritishPolitician(\u00a312.50) & SatInHouseOfCommons(\u00a313.50))", "William Dickinson (british(w) & BritishPolitician(r) & SitsInHouseOfCommons(w))", "William Dickinson ((BritishPolitician(British)) & SitsInHouseOfCommons(British))", "William Dickenson ((BritishPolitician(x)) & SitsInHouseOfCommons(x))", "William Dickinson (GBPilot(William Dickinson) & SitsInCommons(William Dickinson))", "(BritishPolitician(WilliamDickinson) & SatInHouseOfCommons(WilliamDickinson))", "William Dickinson (BritishPolitician(WilliamStanholmGerard(WilliamScotinson) & SitsInHouseOfCommons(w))", "William Dickinson(Williamsdickinson) & BritishPolitician(Williamsdickinson) & SitsInHouseOfCommons(w))"]}
{"id": "folio_train_35", "nl": "William Dickinson attended Westminster school for high school and then the University of Edinburgh.", "fol": "(AttendedSchool(Williamdickinson,Westminster) & IsHighSchool(Westminster) & AttendedSchool(Williamdickinson,Universityofedinburgh))", "prediction": ["(all x.(VictorianDickinson(x) -> Attended(x,Wooden,HighSchool)) & attended(x,UniversityOfEdinburgh))", "(AcquiredByWilliamDickinson(WoodenSchool) & Attended(WestminsterSchool) & Attended(WoodminsterSchool))", "William Dickinson attended WestminsterSchool( William Dickinson,HighSchool) & UniversityOfEdinburgh(William Dickinson)", "(FernitarySchool(WilliamDickinson)", "((WilliamDickinson(Williamson) & WestminsterSchool(Williamson)) -> HighSchoolCall(Williamson))", "(all x.(WilliamDickinson(x) -> Attended(x,WordsendSchool,HighSchool)) & attended(x,UniversityOfEdinburgh))", "William Dickinson, attending WestminsterSchoolForHighSchoolBetween((Woodrowson,Kelly,Student(Wintermore) & UniversityOfEdinburgh(k))", "(all x.(WilliamDickinson(x) -> attended(x,WorthwaterSchool)) & (Attended(x,WoodenhallSchool) | Attended(x,UniversityOfEdinburgh))))", "William Dickinson attended Westminster School for HighSchool, then attended UniversityOfEdinburgh.", "(WilliamDickinson(Walter), attendsWestminsterSchoolForHighSchoolAndUniversityOfEdinburgh(Dilkinson,Walter))", "all x.((WilliamDickinson(x) & WestminsterSchool(x)) -> (AcquiredHouse(x --HighSchool(x) & AcquiredUniversityOfEdinburgh(x)))", "During his time at Westminster School, William Dickinson attended HighSchool(Wildwig) & attended UniversityOfEdinburgh(Wildwig))", "all x.((WilliamDickinson(x) & WestminsterSchool(x)) -> (AccessedToHighSchool(x) & AccessedToUniversityOfEdinburgh(x)))", "(all x.(WilliamDickinton(x) -> AcquiredWoodenSchoolInHighSchool(x)) & attendedUniversityOfEdimbourg(x))", "William Dickinson attended WestminsterSchoolForHighSchoolAndUniversityOfEdinburgh(WilliamDickinson)", "William Dickinson attended WestminsterSchoolForHighSchoolAndUniversityOfEdinburgh(William Dickinson)"]}
{"id": "folio_train_36", "nl": "The University of Edinburgh is a university located in the United Kingdom.", "fol": "(IsLocatedIn(Universityofedinburgh,Unitedkingdom) & IsUniversity(Universityofedinburgh))", "prediction": ["all x.(UniversityOfEdmund(x) -> FoundInUnitedKingdom(x))", "(University(University(University) & LocatedInTheUnitedKicks(University))", "all x.((UniversityOfEdmonton(x) & United Kingdom(x)) -> UOf(x,ED))", "all x.(UniversityOfEdinburgh(x) -> UniversityLocatedInUnitedKingdom(x))", "the UniversityOfEdinburgh(U) -> UniversityLocatedInUK.", "all x y.((University(x) & University(y)) -> (LiquidIn(x,y) & Location(y)))", "all x.((University(x) & UnitedKingdom(x)) -> UniversityIfEdmonton(x))", "all x.(UniversityOfEdinburgh(x) -> (UniversityHasLocatedIn(x,UnitedKingdom) & LocatedIn(x,UnitedKingdom)))", "the UniversityOfEdinburgh(UoE) is a teaching university located in the United Kingdom.", "all x.(UniversityOfEdinburgh(x) -> UniversitiesInUnitedKingdom(x))", "The UniversityOfEdinburgh(u) is a UniversityLocatedInTheUnitedKingdom(u))", "all x.(UnitedKingdom(x) -> UniversityOfEdinburgh(x))", "(UniversityOfEdinburgh(UniversityOfEdinburgh) & FoundInUnitedKingdom(UniversityOfEdinburgh))", "all x.(University(x) -> (UnitedKingdom(x) & UniversityAt(x,y) & LocatedIn(y,UK)))", "all x.(University(x) -> (UNIVERSITYOfEdinburgh) & LocatedInUnitedKingdom(x)))", "all x.(UniversityOfEdinburgh(x) -> (LocatedInUnitedKingdom(x) & UniversityOfEdinburgh(x)))"]}
{"id": "folio_train_37", "nl": "William Dickinson supported the Portland Whigs.", "fol": "Supports(Williamdickinson,Portlandwhigs)", "prediction": ["all x y.((WilliamDickinson(x) & PortlandWhisgs(y)) -> Supported(x,y))", "William Dickinson supported PortlandWhiskers.", "(SupportsWhisgs(WilliamDickinson))", "William Dickinson supported PortlandWhisgs(Whisgs)", "(SpoenixWhisgs(WilliamDickinson))", "William Dickinson supported PortlandWhisgs.", "William Dickinson supported PortlandWhisgs.", "William Dickinson & SupportedPotentWings(W))", "-Independent(WilmingtonDickinson), Portland Whigs)", "(SupportsPalmWhisgs(WilliamDickinson))", "William Dickinson supported PortlandWhisks(13)", "(Supports(Wigs,Wigs) -> WilliamDickinson))", "(ApprovedBy(Whigs) & WilliamDickinson(d))", "Washington Dickinson supported the Portland Whigs.", "(SupportsPorrowWhisks(WilliamDickinson))", "William Dickinson unterst\u00fctztes PortlandWhisgs."]}
{"id": "folio_train_38", "nl": "People who supported the Portland Whigs did not get a seat in the Parliament.", "fol": "all x.(Supports(x,Portlandwhigs) -> -HasSeatInParliament(x))", "prediction": ["all x.((Person(x) & SupportedPortlandWhisgs(x)) -> -HasSeatInParliament(x))", "all x y.((Person(x) & SupportedPlandWhisgs(x)) -> -GathersSeatInParliament(y))", "all x.((Person(x) & SupportedPold PortlandWhisgs(x)) -> -GapSeat(x))", "all x.((SupportsPorrowals(x) & PortlandWhigs(x)) -> -SeatedInParliament(x))", "all x y.((Person(x) & PortlandWhisg(y) & Supported(x,y)) -> -PlaceInParliament(x))", "all x y.((SupportersPortlandWheys(x) & SupportsPalmerWhisgs(x)) -> -GetsSeatInParliament(y))", "all x y.((Person(x) & PortlandWhisgs(y)) -> -TooParliamentSeat(x))", "all x.((Person(x) & SupportedPortlandWhisgs(x)) -> -SeatInParliament(x))", "all x.(SupportsPotentialWigs(x) -> -GetsSeat(x))", "all x.((SupportsPontanWhisgs(x)) -> -AssessesInParliament(x))", "all x.(supportsPortlandWigs(x) -> -SeatInParliament(x))", "all x.((People(x) & SupportedPotlandWigs(x)) -> -SeatInParliament(x))", "all x.(SupportSupportsPontanWhisgs(x) -> -GiveSeatInParliament(x))", "all x.(SupportsPortlandWhists(x) -> -SeatInParliament(x))", "all x.((Person(x) & SupportsPortlandWhisgs(x)) -> -GivesSeatInParliament(x))", "all x.((SupportToPortlandWigs(x)) -> -FinancialSenseInParliament(x))"]}
{"id": "folio_train_39", "nl": "William Dickinson did not get a seat in the Parliament.", "fol": "-HasSeatInParliament(Williamdickinson)", "prediction": ["W.Dickinson(w) -HasSeatInParliament(y))", "William Dickinson -ZertainSeat(WilliamDickinson) & Parliament(WilliamDickinson))", "Bill Dickinson -HasSeatInParliament(WilliamDickinson)", "William Dickinson -SatinInParliament(WilliamDickinson))", "all x.((WilliamDickinson(x) & -(SeatinParliament(x) & -SeatinParliament(x))) -> -(Person(x) & Senator(x)))", "(-GivenSeatInParliament(WilliamDickinson))", "William Dickinson -GainSeatInParliament(WilliamDickinson))", "William Dickinson did not get a seat in Parliament.", "(-SeatInParliament( WilliamDickinson))", "(-SeatInParliament(WilliamDickinson))", "(-Seat(William Dickinson,Parliament))", "(-Delegate(WilliamDickinson))", "(all x.(BilliamDickinson(x) -> -GathersSeat(x)))", "(-(William Dickinson(William Dickinson) & Parliament(William Dickinson,William)))", "(-(William Dickinson(William Dickinson) & Parliament(William Dickinson)))", "William Dickinson did not get a seat in Parliament."]}
{"id": "folio_train_40", "nl": "William Dickinson went to schools located in the United Kingdom for both high school and university.", "fol": "(exists h.(AttendedSchool(Williamdickinson,h) & IsHighSchool(h) & IsLocatedIn(h,Unitedkingdom)) & exists u.(AttendedSchool(Williamdickinson,u) & IsUniversity(u) & IsLocatedIn(u,Unitedkingdom)))", "prediction": ["all x y.((Educator(x) & School(y)) -> (SwentTo(x,y) & HighSchool(y) & University(y)))", "(HistoryInUKUnited(WilliamDickinson) -> CollegeStame(WilliamDickinson))", "all x y z.(( William Dickinson's School(x) & School(y) & United Kingdom(z)) -> (GoedTo(x,y,z) & (HighSchool(z) | University(z))))", "all x y.((WilliamDickinson(x) & School(y) & United Kingdom(z)) -> (GoesTo(x,y) & (HighSchool(z) | University(z)))))", "all x y.((WilliamDickinson(x) & School(y)) -> (HighSchool(x) | University(x)))", "all x y.((Mr.WilliamDickinson(x) & School(y) & LocatedInUnitedKingdom(x,y)) -> (LikedIn(x,y) & (HighSchool(y) | University(y))))", "all x y.((William Dickinson(x) & School(y)) -> (GoesTo(x,y) & HasHighSchool(x) & HasUniversity(y)))", "all x.((WilliamDickinson(x) & HighSchool(x) & University(x)) -> GoToSchools(x,UnitedKy.))", "all x y.((WilliamDickinson(x) & School(y)) -> (GoesTo(x,y) & HighSchool(y) & University(y)))", "all x y.((WilliamDickinson(x) & UnitedKingdom(y) & GoesTo(x,y)) -> (HighSchool(x) & University(x)))", "all x y.((WilliamDickinson(x) & School(y) & United Kingdom(y)) -> (GoesTo(x,y) & -HighSchool(y) & GoesToIn(x,y)))", "all x.((WilliamDickinson(x) & Schools(x,UnitedKingdom)) -> (MigratesToHighSchool(x) & GoesToUniversity(x)))", "all x.((WilliamDickinson(x) & School(y) & InUnitedKingdom(x,y)) -> (HighSchool(x) | University(y)))", "will.((BilliamDickinson(WilliamFrankeney) & SchoolsInUnitedKingdom(WilliamDickinson))", "all x y.((WilliamDickinson(x) & School(y) & In(x,y)) -> (GoesTo(x,y) & in(Y)))", "all x.(William Dickinson(x) -> (GoesToSchoolsInGovernment(x) & ForHighSchool(x) & ForUniversity(x)))"]}
{"id": "folio_train_41", "nl": "William Dickinson attended university in the United Kingdom.", "fol": "exists u.(AttendedSchool(Williamdickinson,u) & IsUniversity(u) & IsLocatedIn(u,Unitedkingdom))", "prediction": ["William Dickinson attendsUniversityInUK.", "(AttendedUniversity(WilliamDickinson) & United Kingdom(WilliamDickinson))", "(AttendedUniversity(WilliamDickinson,UK))", "William Dickinson attendedUniversityInUnitedKingdom(WilliamPhillips)", "William Dickinson attendedUnitedKingdom(WilliamDickinson,University)", "William Dickinson attendedUniversityInUnitedKy.", "William Dickinson attended university in the United Kingdom.", "William Dickinson was a student at the University of the United Kingdom.", "William Dickinson attendedUniversityInUnited Kingdom(William Dickinson)", "(AttendedUniversity(William Dickinson) & United Kingdom(William Dickinson))", "William Dickinson attended university in United Kingdom.", "William Dickinson attendeduniversity(WilliamDickinson,UnitedKingdom)", "all x y.((WilliamDickinson(x) & University(y)) -> Ascended(x,y))", "William Dickinson attended university in United Kingdom.", "William Dickinson attended University in the United Kingdom.", "William Dickinson attended university in the United Kingdom."]}
{"id": "folio_train_42", "nl": "William Dickinson sat in the House of Commons.", "fol": "SitsInHouseOfCommons(Williamdickinson)", "prediction": ["-(WilliamDickinson(WilliamJackson) & HouseOfCommons(Edinburgh))", "William Dickinson sat in HouseofCommons.", "(SatInHouseOfCommons(WilliamDuckinson)", "William Dickinson sat in HouseOfCommons.", "(Johnny DickinsonSatInHouseOfCommons(William Dickinson))", "(sat in HouseOfCommons(WilliamDickinson))", "-(WilliamDickinson(William) & HouseOfCommunities(William))", "(SatIn(William Dickinson,HouseOfCommons))", "ALL x.((WilliamDickinson(x) & HouseOfCommons(x)) -> SitsIn(x,commons))", "William Dickinson sat in HouseOfCommons.", "(SatInHouseOfCommons(WilliamDickinson)", "William Dickinson sat in House(William Dickinson), 1899-2015.", "William Dickinson sat in HouseOfCommons.", "William Dickinson sat in HouseOfCommons.", "William Dickinson(b) satininHouseOfCommons(c) -> SitsInHouse(d))", "William Dickinson sat in HouseOfCommons."]}
{"id": "folio_train_43", "nl": "LanguageA is a universal language", "fol": "IsUniversalLanguage(LanguageA)", "prediction": ["all x.(LanguageA(x) -> UniversalLanguage(x))", "All x y.((LanguageA) & Language(y)) -> UniversalLanguage(x))", "LanguageA is a universal language.", "LanguageA(Language) -UniversalLanguage(Language))", "all x.(LanguageA(x) -> UniversalLanguage(x))", "All x2(LanguageA) -> UniversalLanguage(x))", "all x.(LanguageA(x) -> UniversalLanguage(x))", "all x.(LanguageA,Runwaylanguage(x) -> UniversalLanguage(x))", "all x.((Language(x) & UniversalLanguage(x)) -> LanguageA.(LanguageInGround(x)))", "LanguageA is a universal language(Language(Language(Language) & UniversalLanguage(Language))", "LanguageA,UniversalLanguage(x) -> SenseA,Pakistanism,SolutionA,SpeakA,SignA,SignA,SignalsA,SignalsA,SignamentsA,SignamentsB,SignamentsB,SignamentsB,SignamentsB,SignsB,SignamentsB,SignamentsB,SignamentsA)).", "all x.(LanguageA(x) -> UniversalLanguage(x))", "all x.(LanguageA(x) -> UniversalLanguage.", "LanguageA is universallylang(Language(Language) & UniversalLanguage(Language) & UniversalLanguage(Language))", "all x.((LanguageA) & UniversalLanguage(x)) -> LanguageA(x))", "all x.((LanguageA) & universal(x)) -> (Universal(x) & LanguageA)))"]}
{"id": "folio_train_44", "nl": "If a universal language exists, then for every two people if they both know the same universal language they can communicate.", "fol": "all x y.(exists z.(KnowsLanguage(x,z) & KnowsLanguage(y,z) & IsUniversalLanguage(z)) -> CanCommunicate(x,y))", "prediction": ["all x.((UniversalLanguage(x) & Exists(x) & TwoPeople(x) & KnowledgeUniqueLanguage(x)) -> CanCommunicate(x))", "all x.((UniversalLanguage(x) & exists y.(Person(y) & Person(z) & KnowsUniversalLanguage(y) & Communicate(z))) -> CanCommunicate(x,y,z))", "all x.((UniversalLanguageExists(x)) -> (KnowsUniversalLanguage(x) & Communicate(x)))", "all x y.((UniversalLanguage(x) & People(y) & KnowOneUniversalLanguage(y,x)) -> Communicate(x,y))", "all x.(UniversalLanguage(x) -> (ManyPeopleKnowUniversalLanguage(x) & Communicate(x,2)))", "all x y.((UniversalLanguage(x) & Person(y) & KnewUniversalLanguage(y)) -> CanCommunicate(y,x))", "all x.((UniversalLanguage(x) & exists y.(People(y) & KnowUniversalLanguage(y,x))) -> Communicate(y,x))", "all x.(UniversalLanguage(x) -> exists y.(DifferentPeople(y) & KnowSameUniversalLanguage(y,z))))", "all x.(UniversalLanguage(x) -> -CallsForEvery2People(x))", "all x y z.((UniversalLanguage(x) & Person(y) & Person(z) & KnowSameUniversalLanguage(y,z) & KnowSameUniversalLanguage(y,z)) -> Communicates(x,y))", "all x.(UniversalLanguage(x) -> exists y.(People(y) & KnowEveryOneSameUniversalLanguage(y)))", "all x.((UniversalLanguage(x) & Exists(x)) -> (ForEveryPerson(x) & ForEveryPerson(x) & SameUniversalLanguage(x)))", "all x.exists y.((UniversalLanguage(x) & Person(y) & Person(y) & KnowsSameUniversalLanguage(y,x)) -> CanCommunicate(y,x))", "all x.(UniversalLanguage(x) -> (ThereOf(x,2) & exists y.(CounseSameUniversalLanguage(y) & KnowledgeSameUniversalLanguage(z),x))))", "all x.((UniversalLanguage(x) & exists y.(TwoPeopleInExistingUniversalLanguage(y) & KnowSameUniversalLanguage(x,y))) -> CanCommunicate(x,y))", "all x y.((UniversalLanguage(x) & Person(y) & KnowledgeSameUniversalLanguage(y,x)) -> CanCommunicate(y))"]}
{"id": "folio_train_45", "nl": "Katya cannot communicate with Danil.", "fol": "KnowsLanguage(Katya,LanguageA)", "prediction": ["means that Katya,Conversation(Katya,Danil) -> -(Communicate(Katya,Danil) & Communicate(Katya,Danil)))", "exists x.(Katya(x) & -Communicates(x,Danil))", "(-Communicates(katya,danil))", "(-Communique(Katya,Danil))", "(-CommunicatesWithDanil(Kateya,Danil))", "all x.((Katya(x) & Danil(y)) -> -Communicate(x,y))", "(-Communication(Katya,Danil))", "(CallsKatya(Katya) & -CommunicatesWith(Katya,Danil))", "-(Katya(Katya) & Danil(Danil))", "-CanCommunicateWithDaniL.", "-CommunicatesWithEric(Katya,Danil)", "Katya -CanCommunicateWithDanil(katya,danil)", "all x.(Katya(x) -> -CommunicatesWith(x,Danil))", "(-CommunicatesWithDanil(Katya))", "(-CommunicatesWith(Katya,Danil))", "(-(Likes(Katya) | Likes(Danil)))"]}
{"id": "folio_train_46", "nl": "Katya knows LanguageA. ", "fol": "-CanCommunicate(Katya,Danil)", "prediction": ["Catya knowsLanguageA.", "(Katya knowsLanguageA)", "-knowsLanguageA.", "Kate knowsLanguageA.", "-KatyaSecuresLanguageA.", "all x.(Katya(x) -> KnowsLanguageA(x))", "KnowledgesLanguageA(Katya,Latino,LanguageA)", "Katya KnowsLanguageA(katya)", "\"Katya knowsLanguageA\"", "Katya knowsLanguageA.", "all x.(KatyaKatyaKnowsLanguageA(x))", "(Katya knowsLanguageA.", "Katya knowsLanguageA.", "(Katya KnowsLanguageA(Katya))", "(Katya knowsLanguageA(Katya) & knowsLanguageA(k))", "(knowsLanguageA(katya) & knowsLanguageA(katya))"]}
{"id": "folio_train_47", "nl": "Danil knows LanguageA.", "fol": "KnowsLanguage(Danil,LanguageA)", "prediction": ["Danil KnowsLanguageA.", "Danil knowsLanguageA.", "Danil knowsLanguageA.", "Danil knowsLanguageA.", "Danil knowsLanguageA.", "Danil knowsLanguageA.", "Danil KnowsLanguageA.", "Danil knowsLanguageA.", "Danil knowsLanguageA.", "Danil knowsLanguageA.", "Danil knowsLanguageA.", "Danil knowsLanguageA.", "Danil knowsLanguageA.", "Danil KnowsLanguageA.", "Danil knowsLanguageA.", "Danil knowsLanguageA."]}
{"id": "folio_train_48", "nl": "All customers who are subscribed to AMC List are available to watch 3 movies every week without any additional fees. ", "fol": "all x.(SubscribedToAMCList(x) -> AvailableToWatch3Movies(x))", "prediction": ["all x.((Customer(x) & SubscribedToAMCList(x)) -> AvailableToWatchMovies(x,3,10))", "all x.((Customer(x) & SubscribedToAMCList(x)) -> AvailableToWatch3Movies(x))", "all c.(SubscribesToAMCList(c) -> AvailableToWatch3Movies(c))", "all x y.((Customer(x) & Subscription(x) & AMCList(y) & (WatchesMoviesEveryWeek(x,y) | -AdditionalFees(x,y))) -> AvailableToWatchMovies(x,y))", "all x.(SubscribedToAMCList(x) -> WatchesMovies(x,3/Week))", "all x.(SupportedToAMCList(x) -> WatchedAgain(x,3Movies))", "all x.((Customer(x) & SubscribedToAMCList(x)) -> WatchesMoviesWithoutAdditionalFees(x,3))", "all x.((Customer(x) & Subscribed(x)) -> (WatchMovies(x,3) & -AdditionalFees(x)))", "all x.((Customer(x) & SubscribedToAMCList(x)) -> AvailableToWatch3MoviesEveryWeek(x))", "all x.((SupportedToAMCList(x)) -> AvailableToWatchMoviesWithoutAdditionalFees(x))", "all x.((Customer(x) & SubscribedToAMCList(x)) -> AvailableToWatch3Movies(x))", "all x.(SubscribesToAMCList(x) -> MoviesCanWatchEveryWeekWithoutAdditionalFees(x))", "all x.(SupportedToAMCList(x) -> AvailableToView3MoviesForWeek(x))", "all x.((Customer(x) & SubscribesToAMCList(x)) -> AvailableToWatch3Movies(x))", "all x.(SubscribesToAMCList(x) -> AvailableToWatch(x,3Movies(x))", "all x.(SubscribedToAMCList(x) -> AvailableToWatchMoviesEveryWeekWithoutAdditionalFees(x))"]}
{"id": "folio_train_49", "nl": "Some customers go to cinemas every week", "fol": "exists x.GoToCinemaEveryWeek(x)", "prediction": ["exists x.(Customer(x) & GoToCinemaEveryWeek(x))", "exists x y.(Customer(x) & Cinema(y) & GoesTo(x,y))", "exists x.(Customer(x) & GoesToCinema(x) & EveryWeek(x))", "exists x y.(Customer(x) & Cinema(y) & GoesTo(x,y))", "exists x.(Customer(x) & GoesToCinema(x))", "exists x.(Customer(x) & GoesToCinemasEveryWeek(x))", "exists x.(Customer(x) & Cinema(x) & GoesTo(x,w))", "exists x.(Customer(x) & GoToCinemaEveryWeek(x))", "exists x.(Customer(x) & GoesToCinema(x) EveryWeek(x))", "exists x y.(Customer(x) & Cinema(y) & GoesToEveryWeek(x,y))", "exists x.(Customer(x) & GoesToCinema(x))", "exists x y.(Customer(x) & Cinema(y) & GoesToEveryWeek(x,y))", "exists x y.(Customer(x) & Cinema(y) & GoesTo(x,y))", "exists x.(Customer(x) & VisitsCinema(x) & Week(x))", "exists x.(Customer(x) & VisitsCinema(x))", "exists x.(Customer(x) & GoesToCinema(x))"]}
{"id": "folio_train_50", "nl": "Customers either subscribe to AMC service or HBO service. ", "fol": "all x.(SubscribedToAMCList(x) | SubscribedToHBOService(x))", "prediction": ["all x.(Customer(x) -> (SubscribesToAMCService(x) | SubscribesToHBOYSERVICE(x)))", "all x.(Customer(x) -> (SubscribesToAMCService(x) | SubscribesToHBO(x)))", "all x.(Customer(x) -> (SubscribesToAMCService(x) | SubscribesToHBOService(x)))", "all x.(Customer(x) -> (SubscribesToAMC(x) | SubscribesToHopper(x)))", "all x.(Customer(x) -> (SubscribesToAMCService(x) | SubscribesToHoneyService(x)))", "all x y z.((Customer(x) & AMCService(y) & HBOService(z)) -> (SubscribeTo(x,y) | SubscribeTo(x,z)))", "all x.(Customer(x) -> (SubscribesTo(x,AMC) | SubscribesTo(x,HBOY)))", "all x.(Customer(x) -> (SubscribesToAMCService(x) | SubscribesToHBOSService(x)))", "all x.(Customer(x) -> (SubscribesToAMC(x) | SubscribesToHBO(x)))", "all x.(Customer(x) -> (SubscribesTo(x,AMC) | SubscribesTo(x, HBO)))", "all x.(Customer(x) -> (SubscribesToAMCService(x) | SubscribesToHordeAMCService(x)))", "all x.((Customer(x) & SubscribesTo(x,AMC)) | SubscribesTo(x, HBO))", "all x y.((Customer(x) & AMCService(y)) | HBOService(y)) -> SubscribesTo(x,y))", "all x.(Customer(x) -> (SubscribesTo(x,AMC) | SubscribesTo(x,HBOX)))", "all x.(Customer(x) -> (SubscribesToAMCService(x) | SubscribesToHOBOHROService(x)))", "all x.(Customer(x) -> (SubscribesToAMC(x) | SubscribesToHBOY(x)))"]}
{"id": "folio_train_51", "nl": "Customers who prefer TV series more and will not watch TV series in cinemas.", "fol": "all x.(PrefersTVSeries(x) -> -WatchesTVSeriesInCinema(x))", "prediction": ["all x.((Customer(x) & PrefersTelevisionSeriesMore(x) & -WillWatchTelevisionSeriesInCinemas(x)) -> NotFavorite(x))", "all x.((Customer(x) & PrefersTVSeries(x) & -WorthWatchTVSeriesInCinemas(x)) -> PrefersTVSeries(x))", "all x.((Customer(x) & PrefersTVSeriesMore(x) & -WatchesTelevisionInCinemas(x)) -> -FavoritesTVSeries(x))", "all x.((Customer(x) & LovesTVSeries(x) & -WatchesInCinemas(x)) -> -PrefersTVSeries(x))", "all x.((Customer(x) & PrefersTVSeriesMore(x) & -WatchesTVSeriesInCinemas(x)) -> -PrefersTVSeriesMore(x))", "all x.((Customer(x) & PrefersTVSeriesMore(x) & -WearsTVSeriesInCinemas(x)) -> -(-WatchTVSeriesInCinemas(x) & TakesTimeToWatch(x)))", "all x.((Customer(x) & ListensToTVSeries(x)) -> (PrefersTVSeriesMore(x) & -WatchesTVSeries(x)))", "all x.((Customer(x) & ProductsTelevisionSeries(x) & MorePrefers(x,TV) & -WatchesInCinemas(x,cinemas)) -> -Prefers(x,tv))", "all x.((Customer(x) & PrefersTVSeriesMore(x) & -ReadsTVSeriesInCinemas(x)) -> -PrefersTVSeries(x))", "all x.((Customer(x) & PrefersTVSeries(x) & -Watches(x,TVSeries)) -> -PrefersCinema(x))", "all x.((Customer(x) & PrefersTVSeriesMore(x) & -WorthsToOwnShowsInCinemas(x)) -> -PrefersTimeSeries(x))", "all x.((Customer(x) & PrefersTVSeriesMore(x) & -FavoritesCinemas(x)) -> WillNotWatchTVSeries(x))", "all x.((Customer(x) & LessPrefersTVSeries(x) & -SeesTVSeriesInCinemas(x)) -> -Cancels(x))", "all x.((Customer(x) & PrefersTVSeriesMore(x) & -WatchesInCinemas(x)) -> -SwimmsInCinemas(x))", "all x.((Customer(x) & PrefersTVSeriesMore(x) & -WatchesTVSeriesInCinemas(x)) -> -PrefersTelevisionSeries(x))", "all x.((Customer(x) & MorePrefersTVSeries(x) & -WordsWatchingTVSeriesInCinemas(x)) -> -PrefersTVSeries(x))"]}
{"id": "folio_train_52", "nl": "All customers who subscribe to HBO services prefer TV series to movies. ", "fol": "all x.(SubscribedToHBOService(x) -> PrefersTVSeries(x))", "prediction": ["all x.((Customer(x) & SubscribesToHoods(x)) -> (PrefersTVSeries(x) & PrefersMovies(x)))", "all x.((Customer(x) & SubscribesTo HBOServices(x)) -> (PrefersTVSeries(x) & PrefersMovies(x)))", "all x.((Customer(x) & SubscribesToHBO(x)) -> (PrefersTVSeries(x) | LovesMovies(x)))", "all x y z.((Customer(x) & SubscribeToHoxOfHBOyers(x) & SubscribeToHoxOfPromotion(y,z)) -> PreferShowsToMovies(x))", "all x.((Customer(x) & SubscribesToHBOyonConsults(x)) -> (PrefersTVSeries(x) & PrefersMovies(x)))", "all x.((Customer(x) & SubscribesToHostlerServices(x)) -> PrefersTVSeriesToMovies(x))", "all x.((Customer(x) & SubscribesToHoodSuites(x)) -> PrefersTVSeries(x))", "all x.((Customer(x) & SubscribesTo HBOServices(x)) -> PrefersTVSeriesToMovies(x))", "all x.((Customer(x) & SubscribesToHoorayServices(x)) -> (PrefersTVSeries(x) & PrefersMovies(x)))", "all x.((Customer(x) & SubscribesToHBO(x)) -> (PrefersTVSeries(x) & PrefersMovies(x)))", "all x.(SubscribesToHBO(x) -> PrefersTVSeries(x))", "all x.((Customer(x) & SubscribesToHoney(x)) -> Prefers TVSeriesToMovies(x))", "all x.((Customer(x) & SubscribesToHelmetServices(x)) -> PrefersTelevisionToMovies(x))", "all x.(SuppliersToHBO(x) -> (PrefersTVSeries(x,movies) & -PrefersTVSeries(x,movies)))", "all x.((Customer(x) & SubscribesToHBO(x)) -> prefersTVSeriesToMovies(x))", "all x.(Customer(x) & SubscribesToHBO(x) -> (PrivateTVSeries(x) & PreferMovies(x)))"]}
{"id": "folio_train_53", "nl": "James watches TV series in cinemas. ", "fol": "WatchesTVSeriesInCinema(James)", "prediction": ["all x y.((James(x) & TVSeries(y)) -> WatchesInCinemas(x,y))", "James watchesTVSeriesInCinemas(james)", "all x.(James(x) -> WatchesTVSeriesInCinemas(x))", "(WatchesTVSeriesInCinemas(James))", "-WatchesInCinemas(James,TVSeries)", "all x y z.((James(x) & TVSeries(y) & Cinema(z)) -> Watches(x,y,z))", "-Jim watchesTVSeries(Jim) -> Cinematography(Jim))", "all x.(James(x) -> WatchesInCinema(x))", "all x y.((James(x) & TVSeries(y)) -> WatchesInCinemas(x,y))", "all x y.((James(x) & TVSeries(y)) -> WatchesInCinemas(x,y))", "James watchesTVSeriesInCinemas(Jamey)", "James watchestvseriesincineas(Jim)", "(Watches(James,TVSeries) & InCinema(James,TVSeries))", "all x y.((Jimmy(x) & TVSeries(y) & Cinema(y)) -> Watches(x,y))", "all x y.((Cinema(x) & TVSeries(y)) -> Watches(x,y))", "all x y.((James(x) & TVSeries(y)) -> Watches(x,y))"]}
{"id": "folio_train_54", "nl": "James goes to cinemas every week.", "fol": "GoToCinemaEveryWeek(James)", "prediction": ["(Jessica(James) & GoesToCinema(James))", "all x.(Jimmy(x) -> GoesToCinemas(x))", "all x.((James(x) & Cinema(y)) -> GoesTo(x,y))", "all x.(Jimmy(x) -> VisitsCinema(x))", "James goes to cinemas every week.", "all x y.((James(x) & Cinema(y)) -> GoesTo(x,y))", "has gone to cinemas every week.", "is an extremely popular filmmaker around the globe.", "all x.((James(x) & Cinema(y)) -> GoesToEveryWeek(x,y))", "(HearsCinema(James) -> EveryWeek(James))", "all x.(James(x) -> GoesToCinema(x))", "all x.((James(x) & Cinema(y)) -> GoesTo(x,y))", "James goes to cinemas every week.", "all x.(James(x) -> GoesToCinemasEveryWeek(x))", "James goesToCinemasEveryWeek.", "all x y z.((James(x) & Cinema(y) & FilmCinema(z)) -> GoesTo(x,y,z))"]}
{"id": "folio_train_55", "nl": "James does not go to cinemas every week.", "fol": "-GoToCinemaEveryWeek(James)", "prediction": ["-exists x.(James(x) & Cinema(y) & GoesTo(x,y))", "James is not in the cinemas every week.", "-(ComeToCinemas( James) & WeekLate(James))", "James also doesn\u2019t go to cinemas every week.", "-exists x.(James(x) & GoingToCinema(x))", "*FollowsCinema(Jim)", "James does not go to cinemas every week.", "all x.((James(x) & Cinema(y)) -> -GoesTo(x,y))", "(-(Jeffrey(Jim) | Cinemas(Jim)))", "(-GoesToCinemasEveryWeek(James))", "all x.((James(x) & Cinema(y)) -> -GoesTo(x,y))", "-exists x.(Cinema(x) & James(x))", "James -GoesToCinemasEveryWeek(James))", "James -GoesToCinemasEveryWeek(James,Cinema))", "-(goesToCinematsEveryWeek(James) & -GoesToCinematsEveryWeek(James))", "James nihlsinofcishes."]}
{"id": "folio_train_56", "nl": "James goes to cinemas every week or watches 3 movies every week without any additional fees.", "fol": "(GoesToCinemasEveryWeek(James) | AvailableToWatch3Movies(James))", "prediction": ["all x.(James(x) -> (GoesToCinemasEveryWeek(x) | Watches3MoviesEveryWeek(x)))", "All x.(James(x) -> (GoesToCinemasEveryWeek(x) | WatchesFourMoviesEveryWeek(x)))", "all x.(James(x) -> (GoesToCinemas(x) | WatchesMovies(x)))", "all x.(James(x) -> (GoesToCinemas(x,w) | WatchesMovies(x,w)) & -AddedFees(x)))", "all x.(James(x) -> (GoesToCinemasEveryWeek(x) | WatchesMoviesEveryWeek(x)))", "all x.(James(x) -> (GoesToCinemasEveryWeek(x) | WatchesMoviesEveryWeek(x,3)))", "all x.(Jimmy(x) -> (GoesToCinemasEveryWeek(x) | WatchesMoviesEveryWeek(x)))", "all x.((James(x) & (IsToCinemasEveryWeek(x) | IsWatching3MoviesEveryWeek(x))) -> -AdditionalFees(x))", "(GivesToCinemasEveryWeek(James) | WatchesMoviesAllWeek(James,3)))", "all x.(James(x) -> (GoesToCinemasEveryWeek(x) | Watches3MoviesEveryWeek(x)))", "all x.((James(x) & (GoesToCinemasEveryWeek(x) | WatchesMoviesEveryWeek(x))) -> -HasAdditionalFees(x))", "all x y.((James(x) & Cinema(y)) -> (GoesTo(x,y) & Works(x,y)))", "James (GoesToCinemasEveryWeek(James) | Watches3MoviesEveryWeek(James)))", "(GoesToCinemasEveryWeek(James) | WatchesThreeMoviesEveryWeek(James)))", "all x.((James(x) & (Movie(x) | Movie(x))) -> (GoesTo(x,y) | Watches(x,y) & -AdditionalFees(x))))", "all x.(James(x) -> (goesToCinemasEveryWeek(x) | WatchesThreeMoviesEveryWeek(x)))"]}
{"id": "folio_train_57", "nl": "If James does not both go to cinemas every week and subscribe to HBO service, then James is either available to watch 3 movies every week without any additional fees or he prefers TV more.", "fol": "(-(GoToCinemaEveryWeek(James) & SubscribedToHBOService(James)) -> (AvailableToWatch3Movies(James) | PrefersTVSeries(James)))", "prediction": ["all x.((James(x) & -GoesToCinemasEveryWeek(x) & SubscribesToHospiceService(x)) -> (AvailableToWatchMoviesEveryWeek(x) | PrefersTVMore(x)))", "all x.((Jame(x) & -(GoesToCinemasEachWeek(x) & SubscribesToHorizonService(x)) & (3Movies(x,3) & -AddedFees(x,3)) -> (AvailabilityDogged(x) | PrefersTelevision(x))))", "all x.((James(x) & -BeganCinemasEachWeek(x) & SubscribesToHBOY(x)) -> (AvailableToWatchMovies(x) | PrefersTVMore(x)))", "all x.((James(x) & -(GoesToCinemasEveryWeek(x) & SubscribesToHobbyService(x))) -> (AvailableToWatch3Movies(x) | PrefersTVMore(x))))", "all x.((James(x) & -(GoesToCinemasEveryWeek(x) & SubscribesToHoodSection(x)) & FollowsHoroboxService(x)) -> (AvailableToWatch3MoviesEveryWeek(x) | PrefersTVMore(x)))", "all x.((James(x) & -(GivesCannesEveryWeek(x) & SubscribesToHBOYService(x)) & (WatchesMoviesEveryWeek(x) | MayPrefersTVMore(x))))", "all x.((James(x) & -(GoesToCinemasEveryWeek(x) & SubscribesToHopHop(x))) -> ((AvailableToWatch3MoviesWeekly(x) & -Television(x)) | PrefersTelevision(x))))", "(-(FavorsCinemaEveryWeek(Fares) & NetflixEveryWeek(Fares)) -> (HBOySerials(Fares,3Week) | PrefersTVMore(Fares,23Week)))", "all x.((James(x) & -(HouseholdService(x) & CinemasEveryWeek(x) & SubscriptionToHBOX))) -> ((AvailableToWatch3Movies(x) & -HasAdditionalFees(x)) | PrefersTVMore(x))))", "all x.((James(x) & -(GoesToCinemasEveryWeek(x) & SubscribesToHoorayService(x))) -> (AvailableToWatchMoviesAndFees(x) | PrefersTVMore(x))))", "all x y.((James(x) & GoesToCinesinesEveryWeek(x) & SubscribesToHBOYStatus(x)) -> ((AvailableToWatchTwoMoviesPerWeek(x) | PrefersTelevisionMore(x))))", "all x.((James(x) & -FollowsCinemasEveryWeek(x) & SubscribesToHBOysterService(x)) -> (AvailableToWatch3Movies(x) | LovesTVMore(x))))", "all x.((James(x) & -(GoToCinematsExecutively(x) & SubscribeToHobo(x)) & SubscribesToHobo(x))) -> ((ResponsibleToWatchMoviesEveryWeek(x) & -AdditionalFees(x)) | PrefersTelevisionMore(x))))", "all x.((James(x) & -(GoesToCinemasEveryWeek(x) & SubscribesToHostomService(x)) & (Watchey(x) | PairedTV(x)))) -> (AvailableToWatchMoviesEveryWeek(x) | (PrefersTVMore(x))))", "all x.((Jim(x) & -(GoesToCinemasEveryWeek(x) & Subscribes(x,Hooblue) & HBO(x))) -> (DisplayedToWatch3MoviesEveryWeek(x) | PrefersTVMore(x)))", "all x.((James(x) & -(GoesToCinema(x) & SubscribesToHogoService(x)) & (Secretary(x) | PrefersTV(x)))) -> AvailableForWatching(x,3,365))"]}
{"id": "folio_train_58", "nl": "If James is available to watch 3 movies every week without any additional fees and he watches TV series in cinemas, then he goes to cinemas every week and prefers TV series more.", "fol": "((AvailableToWatch3Movies(James) & WatchesTVSeriesInCinema(James)) -> (GoToCinemaEveryWeek(James) & PrefersTVSeries(James)))", "prediction": ["all x.(If(JamesMovies(x) & WatchesMovies(x,3) & WatchesTVSeries(x,Cinemas)) -> (GoesToCinemas(x) & PyratesTVSeries(x)))", "all x.((Movies(x) & WatchEveryWeek(x,3) & WatchTVSeriesInCinemas(x)) -> (GoesToCinemasEveryWeek(x) & PrefersTVSeries(x)))", "all x y.((FreshFee(x) & Movies(y) & Available(x,y) & Watches(x,y)) -> (ComedyAvenue(x,y) & Movies(z) & Movies(x,z)))", "all x.((Simon(x) & AvailableToWatch3MoviesEachWeek(x) & WatchesTVSeriesInCinemas(x)) -> (GoesToCinemasEachWeek(x) & PrefersTVSeriesMore(x)))", "all x.((CapableToWatch(x,3) & Watches(x,3) & WatchesTVSeries(x)) -> (GoesToCinemas(x) & PrefersTVSeriesMore(x)))", "all x.((Charles(x) & WatchesMoviesEachWeek(x,3) & WatchesTVSeriesInCinesis(x)) -> (GoesToCinesiumsEveryWeek(x) & PrefersTVSeriesMore(x)))", "all x.(((James(x) & AvailableToWatch3Movies(x) & WatchesTelevisionSeries(x)) -> (AtCinemas(x) & PrefersTVSeries(x)))", "all x.((RemembersCinemas(x) & WatchesMoviesAllWeek(x,3/week) & -AdditionalFees(x,3)) -> (GoesToCinemasEveryWeek(x) & PrefersTVSeriesMore(x,6)))", "All x.((AppliesTo(x,3) & WatchesMovies(x) & WatchesTVSeries(x) & InCinemas(x)) -> (GoesToCinemas(x) & PrefersTVSeries(x)))", "all x.((Element(x) & AvailableToWatchMovies(x,3) & WatchTVSeries(x)) -> GoesToCinemas(x))", "all x.((AvailableToWatchMovies(x) & WatchTVSeriesInCinemas(x)) -> (GoesToCinemasEveryWeek(x) & PrefersTVSeriesMore(x)))", "all x y.((Rabbit(x) & Watches3MoviesEveryWeek(x) & HasAdditionalFees(x) & WatchesTVSeriesInCinemas(x)) -> PrefersTVSeriesMore(y))", "all x.((James(x) & AvailableToWatchMovies(x,3) & WatchesTVSeriesInCinemas(x)) -> (GoesToCinemasEveryWeek(x) & PraisesTVSeriesMore(x)))", "all x y.((Doctor(x) & James(x) & WatchesMoviesEveryWeek(x,y) & WatchesTVSeriesInCinemas(x)) -> (GoesToCinemasEveryWeek(x) & PrefersTVSeriesMore(x)))", "all x.((AvailableToWatchMoviesWithoutAdditions(x,3) & WatchTelevisionSeriesWithinCinemas(x)) -> (GoesToCinemasEveryWeek(x) & PrefersTelevisionSeriesMore(x)))", "all x.(((Father(x) & AvailableToWatchMovies(x) & WatchesTVProjects(x) & InCinemas(x)) -> (GoesToCinemas(x) & PrefersTVProjects(x)))"]}
{"id": "folio_train_59", "nl": "A La Liga soccer team ranks higher than another if it receives more points.", "fol": "all x y.((IsLaLigaTeam(x) & IsLaLigaTeam(y) & HasMorePointsThan(x,y)) -> RanksHigherThan(x,y))", "prediction": ["all x y.((La LigaSoccerTeam(x) & FootballTeam(y) & MorePoints(x,y)) -> HigherRank(x,y))", "all x y.((LaLiga(x) & Team(y) & MorePoints(x,y)) -> HigherRanks(x,y))", "all x.(LeagueLiga(x) -> (La Liga(x) & MorePoints(x)))", "all x y.((La LigaSoccerTeam(x) & Team(y) & MorePoints(x,y)) -> RangHigher(x,y))", "all x y.((La LigaSoccerTeam(x) & Team(y) & MorePoints(x,y)) -> RangsHigher(x,y))", "all x y.((La LigaSoccerTeam(x) & Team(y) & MorePoints(x,y)) -> RangHigher(x,y))", "all x y.((La LigaSoccerTeam(x) & Team(y) & MorePoints(x,y)) -> HigherRank(x,y))", "all x y.((La Liga(x) & Team(y) & MorePoints(y)) -> MoreRanks(x,y))", "all x y.((La LigaSoccerTeam(x) & La LigaSoccerTeam(y) & MorePoints(x,y)) -> HigherRank(x,y))", "all x y z.((La Liga(x) & Team(y) & Team(z) & MorePointsReceived(y,z)) -> HigherRank(z,x))", "all x y.((Liquida(x) & Team(y) & MorePoints(y)) -> HigherRank(x,y))", "all x y.((La LigaSoccerTeam(x) & Team(y) & MorePoints(x,y)) -> RangHigher(x,y))", "all x y z.((Team(x) & Team(y) & LaLiga(z) & MorePointsReceives(x,z)) -> HigherRank(x,y,z))", "all x y.((Team(x) & Team(y) & LaLigaSoccerTeam(x) & MorePoints(x,y)) -> HigherRank(x,y))", "all x y z.((La LigaSoccerTeam(x) & Team(y) & Team(z) & ReceivesMorePoints(x,z)) -> HigherRank(x,y))", "all x y z.((La LigaTeam(x) & Team(y) & Team(z) & MorePoints(z)) -> RangHigher(x,y,z))"]}
{"id": "folio_train_60", "nl": "If two La Liga soccer teams recieve the same points, the team which recieves more points from the games between the two teams ranks higher.", "fol": "all x y.((IsLaLigaTeam(x) & IsLaLigaTeam(y) & -HasMorePointsThan(x,y) & -HasMorePointsThan(y,x) & PointsInGameBetween(x,y)) -> RanksHigherThan(x,y))", "prediction": ["all x y z.((La LigaBetweenTeams(x) & La LigaSoccerTeam(y) & Team(z) & ReceivesMorePoints(z,y)) -> RangHigher(z))", "all x.((La LigaSoccerTeam(x) & ReceivesSamePoints(x)) -> RecessesMorePoints(x,y))", "all x y.((La LigaSoccerTeam(x) & La LigaSoccerTeam(y) & SamePoints(x,y)) -> RangHigher(x))", "all x.((La LigaSoccerTeam(x) & SamePoint(x,y)) -> La LigaSoccerTeam(x))", "all x y.((La LigaSoccerTeam(x) & La LigaSoccerTeam(y) & SamePoints(x,y)) -> MorePoints(y,x))", "all x y z.((La Liga(x) & Football(y) & Team(z) & SamePoints(x,y) & La Liga(z) & ReceivesMorePoints(z,y,z)) -> RaisesHigher(x,y))", "all x.((Soccerteam(x) & SamePoints(x)) -> RangHigher(x))", "all x y.((La Liga(x) & La Liga(y) & Team(z) & ReceivesSamePoints(x,z)) -> RankingHigher(z))", "all x.((LaLigaSoccerTeam(x) & SamePoints(x)) -> TheTeam(x) & MorePointsInGames(x))", "all x y z.((La LigaSoccerTeam(x) & La LigaSoccerTeam(y) & Team(z) & ReceivesSamePoints(x,y,z)) -> RaisesHigher(x,y))", "all x y.((La LigaSoccerTeam(x) & La LigaSoccerTeam(y) & SamePoints(x,y)) -> RangHigher(x,y))", "all x y z.((LaligaSoccerTeam(x) & La LigaSoccerTeam(y) & Team(z) & ReceivesSamePoints(x,y,z)) -> RanksHigher(x))", "all x y z.((La LigaSoccerTeam(x) & La LigaSoccerteam(y) & Team(z) & SamePoints(x,z)) -> HigherRank(y))", "all x y.((La LigaSoccerteam(x) & La LigaSoccerTeam(y) & ReceivesSamePoints(x,y)) -> RangHigher(x))", "all x y.((Team(x) & La LigaSoccer(y) & SamePoints(x,y)) -> (ReceivesMorePointsFromGames(x,y) -- RanksHigher(x,y)))", "all x.((La LigaSoccerteam(x) & La LigaSoccerTeam(y)) -> ReceivesSamePoints(x,y))"]}
{"id": "folio_train_61", "nl": "If one team ranks higher than the other team, its reverse does not suffice.", "fol": "all x y.(RanksHigherThan(x,y) -> -RanksHigherThan(y,x))", "prediction": ["all x y z.((Team(x) & Team(y) & Team(z) & LowerRate(x,z)) -> -Sufficient(x,y))", "all x.((Team(x) & RankingHigher(x)) -> NotSufferant(x))", "all x y.((Team(x) & Team(y) & HigherRanks(x,y)) -> -SuppliesReverse(x))", "(RanksHigher(Team1AndTeam2))", "all x y.((Team(x) & Team(y) & RangHigher(x,y)) -> -SufficientReverse(x))", "all x y.((Team(x) & Team(y) & RankingHigher(x,y) & Team(y)) -> -ReverseSufficient(x))", "all x y.((Team(x) & Team(y) & RiesHigherThan(x,y)) -> FalseReverse(x))", "all x.(RanksHigherThan(x,y) -> -ReverseSufficiency(x))", "all x.((Team(x) & HigherRank(x)) -> -ReverseSufficiency(x))", "all x y.((Team(x) & Team(y) & RangHigherThan(x,y)) -> -SuffisciousReverse(x))", "all x.((Team(x) & RankingHigher(x)) -> -ReverseSufficiency(x))", "all x y.((Team(x) & Team(y) & LowerRank(x,y)) -> -Ridder(x,y))", "all x y.((Team(x) & Team(y)) -> (RanksHigher(x,y) & -Sufficient(x,y)))", "all x.((Team(x) & RangHigherThan(x)) -> ReverseSufficiency(x))", "all x y.((Team(x) & Team(y) & HigherRank(x,y)) -> -SufficesReverse(x))", "all x y.((Team(x) & Team(y) & RanksHigher(x,y)) -> -Supplies(x,y))"]}
{"id": "folio_train_62", "nl": "Real Madrid and Barcelona are both La Liga soccer teams.", "fol": "(IsLaLigaTeam(RealMadrid) & IsLaLigaTeam(Barcelona))", "prediction": ["(SoccerSeries(Real Madrid,LaLiga) & SoccerTeam(Barcelona,LaLiga))", "all x.((RealMadrid(x) & Barcelona(x)) -> La LigaSoccer(x))", "(La Liga SoccerTeam(realMadrid) | La LigaSoccerTeam(barcelona))", "(La Liga Soccer(realMadrid) | La LigaSoccerIn(Barcelona))", "(La Liga(RealMadrid) | LaLiga(Barcelona))", "(LaLiga(RealMadrid) & LaLiga(Barcelona))", "(La Liga Soccer(RealMadrid) & La LigaSoccer(Barcelona))", "(La Liga soccer:League(realMadrid) & League(Barcelona))", "(La Liga SoccerTeam(realMadrid,Location) & La Liga SoccerTeam(Barcelona,Location))", "All x.((Area(x) & Area(x)) -> (La Liga(x) & RealMadrid(x) | Barcelona(x)))", "(LaLiga(RealMadrid) & LaLiga(Barcelona))", "(LeagueSoccer(RealMadrid) & LeagueSoccer(Barcelona))", "(La LigaSoccer(RealMadrid) & LaLigaSoccer(Barcelona))", "(LaLiga(RealMadrid) & LaLiga(Barcelona))", "(SoccerTeam(RealMadrid) & SoccerTeam(Barcelona))", "(La Liga(RealMusical) & La Liga(Boatball))"]}
{"id": "folio_train_63", "nl": "In La Liga 2021-2022, Real Madrid recieves 86 points and Barcelon recieves 73 points.", "fol": "HasMorePointsThan(RealMadrid,Barcelona)", "prediction": ["(all x.(LaLiga(x) -> Receives(x,86)) & (Barcelon(x) -> Receives(x,73)))", "(RadicalMadrid(R) & Barcelon(R) & LLAB(Liga) & 2021-2022(Receives86Points) & Receives73Points(Barcelon))", "all x y z.((LaLiga(x) & RealMadrid(y) & Barcelon(z)) -> (Receives86Points(y,x) & Receives73Points(z,x)))", "(all x.([Liga(x) & Real(x)) -> Recipes(x,86)) & ((Barcelon(x) -> Recipes(x,73))))", "(all x y.(LaLiga(x) -> (Receives86Points(x) | Receives73Points(x))))", "(all x.((LaLiga(x) & RealMadrid(x)) -> Receives86Points(x)) & ((Barcelon(x) -> Receives73Points(x))))", "all x.((RealMadrid(x) -> RecipesExtremeLaLigaPoints(x,86)) & (Barcelon(x) -> RecipesExtremeLaLigaPoints(x,73)))", "(all x.((La Liga(x) & RealMadrid(x) & 86Points(x)) -> Recifes(x)) & ((Barcelon(x) & 73Points(x)) -> Recifes(x)))", "(all x y.(Liga(x) -> Recieves86Points(x,y)) & (Barcelon(x) -> Recieves73Points(y)))", "(all x.(LaLiga(x) -> (Receive(x,86) & In(x,72))) -> (Receive(x,86) & In(x,73))))", "(all x y.(Location(x) -> (Receives(x,86) & InLocation(x,22))) & (Receives(x,86) | Receives(x,73))))", "(all x.(LaLiga(x) -> RealMadrid(x)) & (Barcelon(x) -> Barcelon(x)))", "(all x y z.((La Liga(x) & RealMadrid(y) & LaLiga(z)) -> ReceivesPoints(y,x)) & ((Barcelon(z) & ReceivesPoints(z,x))) -> ReceivesPoints(z,y)))", "(all x.(Clavier(x) -> (Receives86Points(x) | Receives73Points(x))))", "(all x.(Liga(x) -> RealMadrid(x)) & (Barcelon(x) -> Barcelon(x)))", "(all x.(LaLiga(x) -> Receives86Points(x)) & (Barcelon(x) -> Receives73Points(x)))"]}
{"id": "folio_train_64", "nl": "In La Liga 2021-2022, Real Madrid and Barcelona both recieve 3 points from the games between them.", "fol": "(-PointsInGameBetween(RealMadrid,Barcelona) & -PointsInGameBetween(Barcelona,RealMadrid))", "prediction": ["(RealMadridAndBarcelonaReceive(LegionII,2021) & LaLigaII,2022))", "(LikeLaLiga2021-2022,RealMadrid(RealMadrid) & LikeLaLiga2022(Barcelona) & Receives3Points(RealMadrid,RealMadrid))", "(all x y.((Location(x) & LaLiga(y) & RealMadrid(x) & Barcelona(x)) -> 3Points(x,y))", "(RealMadrid(21) & Barcelona(22))", "(RealMadrid and Barcelona(La Liga) & ReceivesPoints(RealMadrid,League2021-League22))", "all x y.((LaLiga(x) & RealMadrid(y) & Barcelona(y)) -> Receive3PitsIn(x,y,Madrid,Paris,Between,League,Kartoffels,Coopers))", "(InLa Liga2021/2022, RealMadrid, Barcelona) & Receive 3Points(RealMadrid,LocalLocalLocalLocalLocalLocalEvents))", "(all x y z.((LaLiga(x) & RealMadrid(y) & Barcelona(z)) -> LaLiga(x,y,z)))", "all x.((RealMadrid(x) & Barcelona(x) & Games(y)) -> Receives3Points(x,y))", "All x y.((LaLiga(x) & RealMadrid(y) & Barcelona(y)) -> Receives3Points(x,y))", "((LaLiga(RealMadrid) & LaLiga(Barcelona)) -> Receives3Points(realma,battle,la)))", "(PlayOff(LaLiga) & RealMadrid(RealMadrid) & PlayOff(Barcelona))", "(all x.(LaLiga(x) -> RealMadrid(x)) & (Barcelona(x) -> Barcelona(x)))", "(all x.((LaLiga(x) & RealMadrid(x) & Barcelona(x)) -> ReceivesPoints(x,7)))", "(RealMadrid(a) & Barcelona(b) & LaLiga2021-2022(a)) & Receives3Points(a) & InLaLiga2021-2022(a))", "(RealMadrid(RealMadrid) & Barcelona(Barcelona) & LaLiga2021-2022(realma & cityland(barcelona))"]}
{"id": "folio_train_65", "nl": "In La Liga 2021-2022, Real Madrid ranks higher than Barcelona.", "fol": "RanksHigherThan(RealMadrid,Barcelona)", "prediction": ["(RanksHigherInLa Liga(RCM 2021-2022) vs.(RCM252->Barcelona)))", "(RanksHigherInLaLiga(RealMadeAtLaLiga(RealMadrid) -> Barcelona(RealMadrid))", "In La Liga 2021-2022, Real Madrid ranks HigherThan(Rent(RealMadrid,BayAtLarge(RealMadrid,BayCatalyst))", "All x.((Liga(x) & RealMadrid(x)) -> (RanksHigherInLiga(x,2081) & MoreLagged(x,2251)))", "(AsLaLiga(f) & LaLiga(f) & 2K3 (real) & LasLiga(i)) & 2K(x))", "(RanksHigherInLaLiga(RealMadrid,LaLiga(RealMadrid,LaLiga(real) & HigherInLaLiga(realMadrid,LaLiga)))", "(RanksHigher(RealMadrid,LaLiga) & Lower(RealMadrid,LaLiga))", "(RanksHigherInLaLa Liga(RealMadrid,2021) & HigherInLaLa Liga(RealMadrid,222))", "All x y.((LaLa Liga(x) & RealMadrid(y)) -> (RanksHigherInLaLa Liga(y,x) & LowerInLaLaliga(y,x)))", "(RanksHigher(RealMadrid,LaLiga,2021) & Higher(RealMadrid,LaLiga,Lagazette,Season))", "(RanksHigherInLaLiga(RealMadrid,Landliga2021&Landliga2022))", "(RankInLaLiga(RealMadrid,2019) & LowerInLaLiga(RealMadrid,2019))", "all x y z.((LaLiga(x) & RealMadrid(y) & Barcelona(z)) -> Tops(y,z))", "(BetweenLaLiga(RealMadrid,LocalLago(RealMadrid) & InLaLiga(RealMadrid,LocalLago(RealMadrid))", "(RankingInla Liga(RealMadrid,Locates(RealMadrid,Locates(RealMadrid,Locates(RealMadrid,Locates(realMadrid,Barcelona))", "(RanksHigherInLaLiga(RealMadrid,Barcelona) & InLaLiga(RealMadrid,2021-2022))"]}
{"id": "folio_train_66", "nl": "In La Liga 2021-2022, Barcelona ranks higher than Real Madrid.", "fol": "RanksHigherThan(Barcelona,RealMadrid)", "prediction": ["all x y.((LaLiga(x) & Real(y)) -> (ArriveInLaLiga(x,y) & RankInLaLiga(x,y)))", "all x.(LaLiga(x) -> (RanksHigherIn(x,Losa) & RealMadrid(x)))", "all x.(LaLiga(x) -> (Barcelona(x) | RealMadrid(x)))", "all x y z.((LaLiga(x) & ProvenCue(y) & RealMadrid(z)) -> (RanksHigher(x,y,z) | (RanksHigher(x,y,z) & RealMadrid(x,y))))", "(RanksHigher(Barcelona) & Nominated(RegalMadrid))", "All x y.((La Liga(x) & La Liga(y) & Barcelona(y)) -> HigherRatings(y,x))", "(RanksHigherInLaLiga20221-2022(Barcelona) & HigherInLaLiga2223(Barcelona))", "(RanksHigherInLaLiga(s) & Real Madrid(s))", "(RanksHigher(Baylor,LaLiga,2019))", "RanksHigherThan(LaLiga(LaLiga(LaLiga(LaLiga(LaLiga(LaLiga(LaLiga) & RealMadrid(LaLiga))", "(RanksHigherInLaLiga(Barcelona) & HigherInLaLiga(Barcelona)", "(RanksHigherInLaLiga(Barcelona,LA-Liga,2020) & HigherInRealMadrid(Barcelona,LaLiga,2021)))", "(RanksHigher(Bayon,LaLiga) & Higher(Bayon,RealMadrid))", "(RanksHigherInLaLiga(e) -> RealMadrid(e))", "all x y.((Liga(x) & Liga(y)) -> (Leaders(x,y) & (RiddenInLiga(x,y) | RealMadridInLiga(x))))", "(RanksHigherInLa Liga(Barcelona,La Liga(2021-2022) & LowerInLaLalga(Barcelona,List.1) & LowerInLaLangato(Barcelona,RealMLS))"]}
{"id": "folio_train_67", "nl": "Lawton Park is a neighbourhood in Seattle. ", "fol": "IsNeighbourhoodOf(LawtonPark,Seattle)", "prediction": ["LawtonPark(LawtonPark) -> NeighborhoodInSeattle(LawtonPark))", "LawtonPark(Novel(Landmark) & LocatedInSeattle.", "(Neighborhood(LawtonPark) & InSeattle(LawtonPark))", "LawtonPark(near Seattle)", "LawtonPark.seattle(LawtonPark)", "LawtonPark(nearSeattle)", "LawtonPark is a neighbourhood in Seattle.", "all x y z.((LawtonPark(x) & Neighborhood(y) & Seattle(z)) -> In(x,y,z))", "LawtonPark is a neighbourhood in Seattle.", "all x y.((LawtonPark(x) & Seattle(y)) -> NeighborhoodIn(x,y))", "LawtonPark is a neighbourhood in Seattle.", "LawtonPark (Neighborhood(Likes) & InSeattle(LawtonPark))", "LawtonPark(Landmark) -> (NeighborhoodInSeattle(LettertonPark) & NeighborhoodInSeattle(LettertonPark)))", "all x.(LawtonPark(x) -> NeighborhoodInSeattle(x))", "LawtonPark.(LawtonPark) -NeighborhoodIn(LawtonPark) & Seattle(LawtonPark) & Neighborhood(LawtonPark))", "LawtonPark(LawtonPark) -> (Neighborhood(LawtonPark) & LocatedInSeattle)))"]}
{"id": "folio_train_68", "nl": "All citizens of Lawton Park use the zip code 98199. ", "fol": "all x.(IsCitizenOf(x,LawtonPark) -> UsesZipCode(x,Number98199))", "prediction": ["all x.((Citizen(x) & City(x) & LawtonPark(x)) -> UsesZipCode(x,98199))", "all x y.((Citizen(x) & Citizen(y)) -> UsesZipCode(x,y))", "all x.(BirthofLawtonPark(x) -> Uses(x,98199))", "all x.(Citizen(x) -> UsesZipCode(x,98199))", "all x.(Citizen(x) -> UsesZipCode98199(x))", "all x.(Citizen(x) -> UsesZipCode(x,98199))", "all x.(Citizen(x) -> UsesZipCode(x,98199))", "all x.((Citizen(x) & LawtonPark(x)) -> ZipCode98199(x))", "all x y.((Citizen(x) & LawtonPark(y) & ZipCode(x,2899)) -> Uses(x,y))", "all x.(Citizen(x) -> UseZIPCode(x,98199))", "all x y.((Citizen(x) & LawtonPark(y) & ZipCode(x,y)) -> Uses(x,y))", "all x y.((Citizen(x) & LawtonPark(y)) -> UsesZIPCode(x,y))", "all x y.((Citizen(x) & City(y) & LawtonPark(y)) -> UsesZipCode98199(x,y))", "all x y.((Citizen(x) & LawtonPark(y)) -> UsesZipCode(x,y))", "all x.((Citizen(x) & LawtonPark(x)) -> UsesZIPCode98199(x))", "all x.((Citizen(x) & LawtonParkCitizen(x)) -> UsesZipCode98199(x))"]}
{"id": "folio_train_69", "nl": "Tom is a citizen of Lawton Park.", "fol": "IsCitizenOf(Tom,LawtonPark)", "prediction": ["Tom is citizenOfLawtonPark.", "all x.(Citizen(x) -> Tom(x))", "(CitizenOfLawtonPark(Tom) -> CitizensOfLawtonPark(Tom))", "Tom is citizenOfLawtonPark(Tom)", "Tom is citizenOfLawtonPark(Tommy)", "(Citizen(Tom) & CitizenOfLawtonPark(Tom))", "(Citizen(Tom,LawtonPark))", "Tom ist eine CitizenofLawtonPark(tom)", "Tom is a CitizenOfLawtonPark(Tom)", "all x.((Tom(x) & CitizenOfLawtonPark(x)) -> Citizens(x))", "In LawtonPark(Tom)", "(CitizenOfLawtonPark(Tom,LawtonPark))", "(CitizenOfLawtonPark(Tom) & CitizensOfLawtonPark(Tom))", "Tom is a CitizenOfLawtonPark.", "(Citizen(Tom,LawtonPark) & CitizenOf(Tom,LawtonPark))", "Tom LawtonParkCitizen(Tom)"]}
{"id": "folio_train_70", "nl": "Daniel uses the zip code 98199. ", "fol": "UsesZipCode(Daniel,Number98199)", "prediction": ["at zipcode(Dan(Dan) & UsesZIPCode(Dan,98199))", "(Daniel(x) & ZipCode(x,98199))", "(UsesZIPCode(Daniels,98199))", "all x.(Daniel(x) -> UsesZIPCode(x,99199))", "(UsesZIPcode(Daniel,1998) & 98199(Daniel))", "(Daniel(d) & ZipCode(l) & 98199(d))", "(UsesZIPCode(Daniel) -> ZipCode98199))", "all x.(Daniels(x) -> ZipCode(x,98199))", "-RepresentsViaZipCode(daniel,98198)", "-UsesZIP(Daniel,98199)", "all x.((Dan(x) & ZipCode(x,98199)) -> Uses(x,98199))", "(UsesZipCode(Daniel,98199))", "(History(Daniel,98199) & ZipCode(Daniel,98199))", "all x.((Daniel(x) & ZipCode98199(x)) -> UsedBy(x))", "(UsesZIPCode(Daniel,98199))", "exists x.(Daniel(x) & ZipCode(x,98199))"]}
{"id": "folio_train_71", "nl": "Tom uses the zip code 98199.", "fol": "UsesZipCode(Tom,Number98199)", "prediction": ["(UsesZipCode(Tom) & UsesCode(Tom))", "all x.(Tom(x) -> UsesZipCode(x,98199))", "(UsesZIPCode(Tom,98199))", "Tom uses ZipCodeXEL199.", "all x.((Tom(x) & ZipCode(x,98199)) -> Uses(x,98199))", "(UsesZIPCode(Tom,98199))", "all x.((Tom(x) & ZipCode(x,98199)) -> Uses(x,9198))", "all x.(Tom(x) -> UsesZipCode(x,98199))", "used by Tom (ZIPCode(Tom) & ZipCode(Tom) & 98199))", "Tom uses zip code 98199.", "(UsesZipCode(Tom) & ZipCode(Tom,98199))", "(UsesZipCode(Tom) & ZipCode(Tom))", "we share & share zipcode(Tom) & zip#98199(Tom))", "(UsesZipCode(Tom) & ZipCode(Tom) & 98199(Tom))", "(UsesZipCode(Tom) & ZipCode98199(Tom))", "(UsesZIPCode(Tom,98199))"]}
{"id": "folio_train_72", "nl": "Tom doesn't use the zip code 98199.", "fol": "-UsesZipCode(Tom,Number98199)", "prediction": ["(-UsesZipCode(Tom) & ZipCode(Tom,98199))", "-UsesZIPCode(Tom)", "(-UsesZipCode(Tom))", "all x.((Tom(x) & ZipCode(x,98199)) -> -Uses(x,98199))", "all x.((Tom(x) & -ZipCode(x)) -> -UsesZIPCode(x,98199))", "-UsesZipCode(Tom,98199)", "(-UsesZIPCode(Tom,98199))", "all x.((Tom(x) & ZipCode(x,98199)) -> -Uses(x,98199))", "all x.((Tom(x) & -ZipCode98199)) -> -VerifiesZipCode98199(x))", "-exists x.(Room(x) & ZipCode(x,98199))", "(-UsesZIPCod(Tom) & ZipCode98199(Tom))", "-HasZipCode(Tom,98199)", "(-usesZIPCode(Tom) & ZipCode(Tom,98199))", "(-UsesZipCode(Tom,1998))", "all x.((Tom(x) & -ZipCode(x,98199)) -> -UsesZIPCode(x,98199))", "-UsesZipCode(Tom)"]}
{"id": "folio_train_73", "nl": "Tom is a citizen of Washington.", "fol": "IsCitizenOf(Tom,Washington)", "prediction": ["Tom is a citizen of Washington.", "all x.(CitizenOf(x,Washington) -> Tom(x))", "Tom is CitizenOfWashington(Tum.)", "Tom is citizenOfWashington.", "Tom ist CitizenOfWashington(Tom)", "Tom is a citizen of Washington.", "(CitizenOfWashington(tom) & BornInBologna(tom))", "Tom is citizenOfWashington.", "(CitizenOf(Tom,Washington))", "(CitizenOfWashington(Tom) & HasBeautifulCitizen(Tom,Washington))", "all x.(Resident(x) -> CitizensOf(x,Washington))", "(Citizen(Tom,Washington) & Citizen(Tom,Washington))", "(CitizenOfWashington(Tom) -> CitizensInTom(Tom,Washington))", "'Bitten(Tom) & CitizensOf(Tom,Washington))", "all x.(Tam(x) -> CitizensOfWashington(x))", "all x.((Tom(x) & CitizensOfWashington(x)) -> CitizenOf(x,Washington))"]}
{"id": "folio_train_74", "nl": "Daniel is a citizen of Lawton Park.", "fol": "IsCitizenOf(Daniel,LawtonPark)", "prediction": ["Daniel is citizenOfLandonPark.", "(Citizen(Daniel) & LawtonPark(Dan))", "(Citizen(Daniel) & CitizensOfLawtonPark(Daniel))", "(CitizenOfLawtonPark(Daniel)", "(CitizenOfLawtonPark)", "Daniel is one of the citizens of LawtonPark.", "(CitizenOfPark(Daniel) & CitizensOfLawtonPark(Daniel))", "(Citizen(Daniel,LawtonPark) & CitizensOf(Daniel,LawtonPark))", "(Citizen(Daniel) & CitizenOfLawtonPark(Daniel))", "((Daniel(s) & CitizenOfLawtonPark(s)))", "(CitizenOfLawtonPark(Daniel,LawtonPark))", "Daniel is a citizen of LawtonPark.", "Daniel is a CitizenOfLawtonPark(Daniel)", "Daniel LawtonParkCitizen(Daniel)", "(CitizenOfLawtonPark(Danil),2019(Danil))", "Daniel is a citizen of LawtonPark."]}
{"id": "folio_train_75", "nl": "If a legislator is found guilty of stealing government funds, they will be suspended from office.", "fol": "all x.((LegislatorStatus(x) & GuiltyOfStealingFunds(x)) -> SuspendedFromOffice(x))", "prediction": ["all x.((Lawmaker(x) & FoundCaughtOfStolenGovernmentFunds(x)) -> SuspendedFromOffice(x))", "all x.((Lawmakers(x) & FoundCouplessOfStolenPublicFunds(x)) -> SuspendedFromOffice(x))", "all x y.((Legislator(x) & FoundCrophileOfStoppingGovernmentFunds(x) & FoundCrophileOfGovernmentFunds(x)) -> Suspended(x))", "all x.((Lawmaker(x) & FoundCaughtOfStolenMeetings(x)) -> SuspendedFromOffice(x))", "all x.((Leader(x) & FoundChargedOfStolenGovFunds(x)) -> Suspended(x))", "all x.((Legislator(x) & FoundConviciousOfFundsSteal(x)) -> SuspendedFromOffice(x))", "all x.((Lawmaker(x) & FoundCorruptOfStoppingGovernmentFunds(x)) -> SuspendedFromOffice(x))", "all x.((Legislator(x) & FoundCaughtOfStolenGovernmentFunds(x)) -> SuspendedFromOffice(x))", "all x y.((Lawmaker(x) & FoundConflicted(x,y) & FeltCounsulfulOfStolenGovernmentFunds(x)) -> SuspendedFromOffice(x))", "all x.((Lawmaker(x) & FoundCaughtOfStoppingGovernmentFunds(x)) -> SuspendedFromOffice(x))", "all x.((Lawmaker(x) & FoundCaughtOfStolenGovernmentFunds(x)) -> SuspendedFromOffice(x))", "all x.((LegalLeader(x) & FoundSolvedOfStoppingGovernmentFunds(x)) -> SuspendedFromOffice(x))", "all x.((Legislator(x) & FoundCaughtOffensiveOfStolenGovernmentFunds(x)) -> SuspendedFromOffice(x))", "all x.(Study(x) -> SuspendedFromOffice(x))", "all x.((Leader(x) & FoundConviciousOfStolenGovernmentFunds(x)) -> SuspendedFromOffice(x))", "all x.((Legislator(x) & FoundCaughtOfStoppingGovernmentFunds(x)) -> SuspendedFromOffice(x))"]}
{"id": "folio_train_76", "nl": "Tiffany T. Alston was a legislator in Maryland's House of Delegates from 2011 to 2013.", "fol": "LegislatorStatus(TiffanyTAlston)", "prediction": ["all x y.((TiffanyT.Alston(x) & MarylandHouseOfDelegates(y)) -> LegislatorIn20112013(x))", "(Legislator(TiffanyT.Alston,Maryland) & HouseOfDelegates(TiffanyT.Alston,2011,2013))", "all x y z w.((TiffanyT.Alston,Leader(x) & HouseOfDelegates(y) & HouseOfDelegates(z)) -> Legislator(x,y,z))", "all x y.((T TiffanyT.Alston,Delegate(x) & HouseOfDelegates(y)) -> Legislator(x,y))", "all x y z.((T TiffanyT.Alston(x) & MarylandDelegate(y) & HouseOfDelegates(z) & 2011-2013)) -> Legislator(x,y,z))", "-LawmakerInDelegates(TiffanyT.Alston,Maryland) (2011-2013) & LegislatorInDelegates(TiffanyT.Alston,Maryland)))", "all x.((Licensor(x) & MarylandHouseOfDelegates(x) & 20112013(x)) -> TiffanyTalston(x))", "((LegislatorInDelegations(TiffanyT.Alston,Maryland) & HouseOfDelegates(TiffanyT)) & ServedFrom2011To2013(TiffanyT.Alston,Maryland))", "all x.((TiffanyT.Alston(x) & Legislator(x) & MemberOfDelegates(x,2011)) -> Legislator(x,2013))", "all x y.((MdDelegates(x) & Legislator(y) & LocatedIn(y,x)) -> TiffanyT.Alston(x))", "Tiffany T. Alston, CLP(CheerDelegates,Md))", "all x.(TiffanyT.Alston(x) -> LegislatorInMarylandHouseOfDelegates(x))", "Tiffany T. Alston was a Delaware Legislator in Maryland's HouseOfDelegates from 2011 To 2013.", "Tiffany T. Alston was LegislatorInDelegates(x) & HouseOfDelegates(maryland) & -2012(maryland))", "all x y z.((ChiffneyT.Alston(x) & HouseOfDelegates(y) & HouseOfDelegates(z) & InMd(x,y,z)) -> LegislatorFrom2011To2013(x))", "all x y.((TiffanyT.Alston(x) & HouseOfDelegates(y)) -> LegislatorInDelegates(x,y))"]}
{"id": "folio_train_77", "nl": "Tiffany T. Alston was found guilty of stealing government funds in 2012.", "fol": "GuiltyOfStealingFunds(TiffanyTAlston)", "prediction": ["(MatthewT.Alston(TiffanyT.Alston) & FoundCaughtStolenFunds(TiffanyT.Alston,2012))", "Tiffany T. Alston was found guilty of stealinggovernment funds in 2012(TiffanyT.Alston,2012,24))", "All x.((TiffanyT.Alston(x) & FoundStolen(x)) -> (GovernmentFundsStolen(x,2012) & StateFundsStolen(x)))", "all x.((TiffanyT.Alston(x) & Theft(x)) -> StolenGovernmentFunds(x))", "Tiffany T. Alston was found guilty of stealing government funds in 2012.", "Alston, Tiffany (TiffanyT) & SnaggedGuidedFunds(TiffanyT) & -HasFundsProblem(tiffanyT))", "Tiffany T. Alston was found guilty of stealingGouvernementFundsIn2012.", "Tiffany T. Alston was found guilty of stealinggovernmentFundsIn2012. SheriffT.Alston was not found guilty of this crime.", "Tiffany T.Alston (TiffanyT.Alston) was found guilty of stealinggovernmentFunds(at))", "all x y.((TiffanyT.Alston(x) & GovernmentFunds(y)) -> Stolen(x,y))", "Tiffany T. Alston was found guilty of stealinggovernmentFundsIn2012.", "LiesGovernmentFunds(TiffanyT.Alston) -> Criminal(TiffanyT.Alston,2012))", "(CrackedOfStolenCommunityFunds(TiffanyT.Alston) & FoundCompositeOfStolenCommonService(TiffanyT.Alston))", "all x.((TiffanyT.Alston(x) & FoundStolen(x) & GovernmentFunds(x,y)) -> Is FoundStolenIn2012(x,y))", "Tiffany T. Alston was convicted of stealingGDAFears(TiffanyT. Alston,2012)", "(Championship(TiffanyT.Alston,2012) & FoundComedy(TiffanyT.Alston,2012))"]}
{"id": "folio_train_78", "nl": "Tiffany T. Alston was suspended from the Maryland House of Delegates.", "fol": "SuspendedFromOffice(TiffanyTAlston)", "prediction": ["All x.((TiffanyT.Alston(x) & MarylandHill(x,d)) -> Suspended(x,d))", "TiffanyT.Alston was suspended from MarylandHouseOfDelegates.", "Tiffany T.Alston was suspended from Maryland HouseOfDelegates.", "Tiffany T. Alston was suspended from Maryland HouseOfDelegates.", "Tiffany T.Alston was suspended from Maryland HouseOfDelegates.", "all x y.((TwitterT.Alston(x) & MarylandDelegates(y)) -> SuspendedFrom(x,y))", "Tiffany T.Alston was suspended from MarylandHouseOfDelegates(TiffanyT.Alston)", "(Suspension(TiffanyT.Alston) & MarylandHouseOfDelegates(TiffanyT.Alston))", "Tiffany T. Alston has been suspended from Maryland HouseOfDelegates (Md.)", "(SuspendedFromMd HouseOfDelegates(TiffanyT.Alston))", "Tiffany T.Alston was suspended from Maryland HouseOfDelegates.", "Tiffany T. Alston was suspended from MarylandHouseOfDelegates(TM)", "Tiffany T. Alston was suspended from Maryland House of Delegates.", "all x y z.((TiffanyT.Alston(x) & MarylandHouseOfDelegates(y) & MarylandHouseOfDelegates(z)) -> Suspended(x,y,z))", "All x.(TiffanyT.Alston(x) -> SuspendedFromMdBodyOfDelegates(x))", "Tiffany T. Alston (StephenE.Alston) was suspendedFromMdHouseOfDelegates(StephenH.Alston))"]}
{"id": "folio_train_79", "nl": "Tiffany T. Alston was not suspended from the Maryland House of Delegates.", "fol": "-SuspendedFromOffice(TiffanyTAlston)", "prediction": ["all x.((TiffanyT.Alston(x) & MarylandHouseOfDelegates(x)) -> -Suspended(x))", "All x,y.((Student(x) & MarylandDelegation(y)) -> -Suspended(x,y))", "All x.(TiffanyT.Alston(x) -> -SuspendedFromDelegates(x))", "TiffanyT.Alston -SuspensionFrom(TiffanyT.Alston, Maryland)", "All x.((TiffanyT.Alston(x) & MarylandHouseOfLeaders(x)) -> -Suspended(x))", "(-(TiffanyT.Alston(t) & HouseOfDelegates(m)))", "(-Suspension(T TiffanyT.Alston, Maryland HouseOfDelegates))", "Tiffany T. Alston was not suspended from Maryland HouseOfDelegates.", "Tiffany T. Alston was not suspended from Maryland HouseOfDelegates(tfloydt.alston)", "Tiffany T. Alston, Maryland HouseOfDelegates, -Suspended.", "all x.(TiffanyT.Alston(x) -> -SuspendedFromMarylandHouseOfDelegates(x))", "Tiffany(Tiffany,Tiffany) Alston is a Maryland HouseOfDelegates(TM) & -Suspended(Tiffany,Tiffany,& Maryland HouseOfDelegates))", "Tiffany T. Alston has not been suspended from Maryland HouseOfDelegates.", "All x.((TiffanyT.Alston(x) & MarylandHouseOfDelegates(x)) -> -SuspendedFrom(x,Cambridge,Maryland))", "(-SuspendedFrom MarylandHouseOfDelegates(T TiffanyT.Alston))", "The suspended TiffanyT.Alston was from Maryland HouseOfDelegates."]}
{"id": "folio_train_80", "nl": "Tiffany T. Alston went to prison for stealing government funds.", "fol": "WentToPrison(TiffanyTAlston)", "prediction": ["Tiffany Alston went to prison for stealinggovernmentFunds.", "all x.((TiffanyT.Alston(x) & FeltOffense(x)) -> SitsForGovernmentFunds(x,Y))", "all x y.((TiffanyT.Alston(x) & Prison(y)) -> StolenGovFunds(x,y))", "all x y z.((TiffanyT.Alston(x) & Prison(y) & GovernmentFundsLeisure(z)) -> Awaited(x,y))", "Tiffany T. Alston snatchedGovernmentFunds(tiffany,tiffany,tiffany) & GoesToPenitentiary(tiffany,tiffany))", "all x.((TiffanyT.Alston(x) & SpentGovernmentFunds(x)) -> ToPension(x))", "all x.((T TiffanyT.Alston(x) & StolenGovernmentFunds(x)) -> Prison(x))", "all x.((TiffanyT.Alston(x) & WorriedGovermentFunds(x)) -> GoesToPension(x))", "all x.(TiffanyT.Alston(x) -> (StolenGovernmentFunds(x) & ToJudgement(x)))", "all x.((T TiffanyT.Alston(x) & StealingGovTaxions(x)) -> GoesToPentetry(x))", "all x.(TiffanyT.Alston(x) -> GoesToPenitence(x))", "all x.((TiffanyT.Alston(x) & StateDonationStolen(x)) -> GoesToPenitentiary(x))", "all x.((TiffanyT.Allston(x) & GovernmentFunds(x)) -> StoppedGoingToChildren(x))", "Tiffany T. Alston went to prison for stealinggovernmentFunds.", "all x.(TiffanyT.Alston(x) -> DuringGazaTaxation(x))", "Tiffany T. Alston went to prison for SnipingGovernmentFunds(TM)"]}
{"id": "folio_train_81", "nl": "Some fish may sting.", "fol": "exists x y.(IsFish(x) -> Sting(x,y))", "prediction": ["exists x.(Fish(x) & Sting(x))", "exists x.(Fish(x) & Stings(x))", "exists x.(Fish(x) & MaySting(x))", "exists x.(Fish(x) & -Sting(x))", "exists x.(Fish(x) & Sting(x))", "exists x.(Fish(x) & Stings(x))", "exists x.(Fish(x) & Sting(x))", "exists x.(Fish(x) & Sting(x))", "exists x.(Fish(x) & MaySting(x))", "exists x.(Fish(x) & Sting(x))", "exists x.(Fish(x) & MaySting(x))", "exists x.(Fish(x) & Sting(x))", "exists x.(Fish(x) & Senses(x))", "exists x.(Fish(x) & MaySting(x))", "exists x.(Fish(x) & Sting(x))", "exists x.(Fish(x) & CouldSting(x))"]}
{"id": "folio_train_82", "nl": "Stonefish is a fish.", "fol": "IsFish(Stonefish)", "prediction": ["this fish.", "all x.(Stonefish(x) -> Fish(x))", "all x.(Stonefish(x) -> Fish(x))", "all x.(Stonefish(x) -> Fish(x))", "all x.(Stonefish(x) -> Fish(x))", "all x.(Stonefish(x) -> Fish(x))", "all x.(Stonefish(x) -> Fish(x))", "all x.(Stonefish(x) -> Fish(x))", "all x.(Stonefish(x) -> Fish(x))", "all x.(Stonefish(x) -> Fish(x))", "all x.(Stonefish(x) -> Fish(x))", "all x.(Stonefish(x) -> Fish(x))", "all x.(Stonefish(x) -> Fish(x))", "((Stonefish(stonefish) & Fish(fer)))", "all x.(Stonefish(x) -> Fish(x))", "all x.(Stonefish(x) -> Fish(x))"]}
{"id": "folio_train_83", "nl": "It stings to step on a stonefish.", "fol": "all x.(StepOnFish(Stonefish,x) -> Sting(Stonefish,x))", "prediction": ["all x.(Sticking(x) -> Stonefish(x))", "all x.(StingsToStepOnStonefish(x) -> Stings(x))", "all x.(SteingOnStonefish(x) -> Stings(x))", "all x.(StepOnStonefish(x) -> Stings(x))", "all x.(StepOnStonefish(x) -> Stings(x))", "all x.(StepOnStonefish(x) -> Stings(x))", "all x.((StepOnStonefish(x) & StingsToBeOnStonefish(x)) -> NotEnough(x))", "all x.(StepOnStonefish(x) -> Stings(x))", "all x.(StepOnStonefish(x) -> Stings(x))", "all x.(StepOnStonefish(x) -> Stings(x))", "all x y.((Stonefish(x) & Stonefish(y)) -> Stings(x,y))", "all x.(StepOnStonefish(x) -> Stings(x))", "all x.(StingsToStepOnStonefish(x) -> Stonefish(x))", "all x y.((StepOn(x,y) & Stonefish(x)) -> Stings(x))", "all x y.((Step(x) & Stonefish(y)) -> Stings(x,y))", "all x.(StingsToStepOnStonefish(x) -> Stonefish(x))"]}
{"id": "folio_train_84", "nl": "Stonefish stings cause death if not treated.", "fol": "all x.((Sting(Stonefish,x) & -IsTreated(x)) -> CausesDeath(x))", "prediction": ["all x.((Stonefish(x) & -Treated(x)) -> CausesDeath(x))", "all x.((Stonefish(x) & -Treatment(x)) -> CausesDeath(x))", "all x.((Stonefish(x) & Stings(x) & -Treated(x)) -> CausesDeath(x))", "all x.((Stonefish(x) & -Treatment(x)) -> CausesDeath(x))", "all x.((Stonefish(x) & Stings(x) & -Treated(x)) -> CausesDeath(x))", "all x.((Stonefish(x) & -Treated(x)) -> CausesDeath(x))", "all x.((Stonefish(x) & -Treatment(x)) -> CausesDeath(x))", "all x.(StuttingStonefish(x) -> CausesDeath(x))", "all x y.((Stonefish(x) & Sting(y) & -Treatment(x,y)) -> CausesDeath(x))", "all x.(Stonefish(x) -> NotTreated(x))", "all x.((Stonefish(x) & NotTreated(x)) -> CausesDeath(x))", "all x.((Stonefish(x) & -Treatment(x)) -> CausesDeath(x))", "all x.((Stonefish(x) & -Treated(x)) -> CausesDeath(x))", "all x.((Stonefish(x) & Stings(x) & -Treated(x)) -> CausesDeath(x))", "all x.((Stonefish(x) & -Treated(x)) -> CausesDeath(x))", "all x.((Stonefish(x) & -Treated(x)) -> CausesDeath(x))"]}
{"id": "folio_train_85", "nl": "To treat stonefish stings, apply heat to the affected area or use an antivenom.", "fol": "all x.((Sting(Stonefish,x) & (ApplyHeatToArea(x) | UseAntivenom(x))) -> IsTreated(x))", "prediction": ["all x.(TreatsStonefishStings(x) -> (AppliesHeat(x) | UsesAntivenom(x)))", "all x.((TreatStonefishTail(x) & (AppliesHeatToAffectedArea(x) | UsesAtivenom(x))) -> TreatStonefishTail(x))", "all x.((TreatStonefishStings(x) & (AppliedHeat(x,stonefish) | UseAntivenom(x))) -> Treats(x,stonefishStings))", "all x.(TreatStonefishStingsWithHeat(x) -> (AcquireHeatToAffectedArea(x) | UseAntivenom(x)))", "all x.((TreatStonefishStings(x) & (AppliesHeat(x) | UsesAntivenom(x))) -> Treats(x,StonefishStings))", "all x y.((StonefishSting(x) & (ApplyHeat(y,x) | UseAtivenom(y,x))) -> Treats(x,y))", "all x y z.((StonefishStint(x) & HeatApply(y) & AffectedArea(z)) -> (Treat(x,y) | Use(x,z))))", "all x y.((StonefishStings(x) & (ApplicationOfHeat(x,y) | UseAntivenom(x))) -> Treatment(x,y))", "all x.((TreatStonefishStings(x) & (ApplyHeat(x) | UseAntivenom(x))) -> TreatStonefishStings(x))", "all x.((StonefishSting(x) & (AppliesHeat(x) | UsesAtivenom(x))) -> Treats(x,s,x))", "all x.((StonefishStings(x) & (ApplyHeat(x,affectedArea) | UseAtivenom(x))) -> Treats(x,affectedArea))", "all x.((StonefishSting(x) & (AppliedHeat(x) | UsedAntivenom(x))) -> Treats(x,y))", "all x.((StonefishSting(x) & (ApplyHeat(x) | UseAtivenom(x))) -> Treat(x,y))", "all x.((TreatstonefishTstings(x) & (AppliesHeat(x) | UsesAtivenom(x))) -> TreatsStonefishStings(x))", "all x y.((TreatStonefish(x) & Stonefish(y)) -> (ApplyHeat(x,y) | UseAntivenom(x)))", "all x.(TreatstonefishStutches(x) -> (AppliesHeatToAffectedArea(x) | UsesAntivenom(x)))"]}
{"id": "folio_train_86", "nl": "If you step on a stonefish and don\u2019t use an antivenom, it will cause death.", "fol": "all x.((StepOnFish(Stonefish,x) & -UseAntivenom(x)) -> CausesDeath(x))", "prediction": ["all x.(StepOnstonefish(x) & -UseAtinenom(x)) -> CausesDeath(x))", "all x.((StepOnStonefish(x) & -UsesAtivenom(x)) -> CausesDeath(x))", "all x.((StepOnStonefish(x) & -UsesAntivenom(x)) -> CausesDeath(x))", "all x.((StepOnStonefish(x) & -UsesAtivenom(x)) -> CausesDeath(x))", "all x.((StepOnStonefish(x) & -UseAntivenom(x)) -> CausesDeath(x))", "all x.((StepOnStonefish(x) & -UseAtivenom(x)) -> CausesDeath(x))", "all x.((StepOn(x,Stonefish) & -UsesAtivenom(x)) -> CausesDeath(x))", "all x.(StepOnStonefish(x) & -UsesAntivenom(x)) -> CausesDeath(x))", "all x.((StepOnStonefish(x) & -UsesAntivenom(x)) -> CausesDeath(x))", "all x.((Stonefish(x) & -UsesAtivenom(x)) -> CausesDeath(x))", "all x.((StepsOn(x,Stonefish) & -UsesAtivenom(x)) -> CausesDeath(x))", "all x y.((StepOnStonefish(x) & Stonefish(y) & UsesAtivenom(x,y)) -> CausesDeath(x))", "all x.((StepOnStonefish(x) & -WelcomeAtivenom(x)) -> CausesDeath(x))", "all x y.((StepOnStonefish(x) & Stonefish(y) & -UsesAtivenom(x)) -> CausesDeath(x,y))", "all x.((StepOnStonefish(x) & -UseAtivenom(x)) -> CausesDeath(x))", "all x.(StepsOnStonefish(x) & -UsesAntivenom(x)) -> CausesDeath(x))"]}
{"id": "folio_train_87", "nl": "Stings of some fish can cause death if not treated.", "fol": "exists x y.((IsFish(x) & Sting(x,y) & -IsTreated(y)) -> CausesDeath(y))", "prediction": ["all x.((Fish(x) & -TreatedSting(x)) -> CanCauseDeath(x))", "all x.((Fish(x) & StingsOf(x,y)) -> (CausesDeath(x) & -Treated(x)))", "all x.((Fish(x) & StingsStings(x)) -> CausesDeath(x))", "all x y.((Sting(x) & Fish(y) & -Treated(x)) -> CausesDeath(x,y))", "all x.((Fish(x) & Sting(x)) -> CausesDeath(x,))", "all x.((Fish(x) & Sting(x)) -> CausesDeath(x))", "all x.((Fish(x) & Stings(x) & -Treat(x)) -> CausesDeath(x))", "all x.(AllowsForDanger(x) -> ManyFish(x))", "all x.((Fish(x) & -Treated(x)) -> CausesDeath(x))", "all x.((Fish(x) & StingsOf(x)) -> CausesDeath(x))", "all x.((Fish(x) & StingsOf(x,y)) -> CausesDeathIfNoTreatment(x))", "all x.((Sting(x) & SomeFish(x) & -Treated(x)) -> CausesDeath(x))", "all x.((Fish(x) & Stings(x)) -> CanCauseDeath(x))", "all x.((Fish(x) & Sting(x)) -> CausesDeath(x))", "all x y.((Fish(x) & Fish(y) & -Treated(x)) -> CausesDeath(x,y))", "all x.(Protected(x) -> CausesDeath(x))"]}
{"id": "folio_train_88", "nl": "If you step on a stonefish and apply heat to the affected area, stings will cause death.", "fol": "all x.((StepOnFish(Stonefish,x) & ApplyHeatToArea(x)) -> (Sting(Stonefish,x) -> CausesDeath(x)))", "prediction": ["all x.((StepOnStonefish(x) & ApplyHeat(x)) -> CausesDeath(x))", "all x y.((Stonefish(x) & Stonefish(y) & StepOn(x,y)) -> (ApplyHeatToAffectedArea(x,y) & CauseDeath(x,y)))", "all x.((StepOnStonefish(x) & ApplyHeat(x)) -> CausesDeath(x))", "all x y.((StepOnStonefish(x) & Stonefish(y) & ApplyHeat(x)) -> CausesDeath(x,y))", "all x y.((StepOn(x,y) & Stonefish(x) & HeatAffection(y)) -> CausesDeath(x))", "all x y.((StepOnStonefish(x) & Stonefish(y) & ApplyHeatToAffectedArea(x,y)) -> CausesDeath(x,y))", "all x y.((StepOn(x,y) & Stonefish(y) & ApplyHeat(x,y)) -> CausesDeath(x,y))", "all x y.((StepOnStonefish(x) & Stonefish(y) & ApplyHeat(x,y)) -> CausesDeath(x))", "all x y z.((StepOn(x,y) & Stonefish(z) & AffectsArea(x,z) & AffectsArea(x,z) & AppropriateHeat(x,z)) -> CausesDeath(x))", "all x.(StepOnStonefishAndApplyHeatToAffectedArea(x) -> StingsCauseDeath(x))", "all x y.((Stonefish(x) & SetBy(y) & AppliesHeatToAffectedArea(x,y)) -> StingsCauseDeath(y))", "all x y z.((Stonefish(x) & Stonefish(y) & Stonefish(z) & StepsOnAndAppliesHeat(x,y) & AffectedArea(y)) -> CausesDeath(x))", "all x y.((StepOn(x,y) & Stonefish(x) & AppliesHeatToAffectedArea(y,x)) -> StingsCausesDeath(x))", "all x.((StepOnStonefish(x) & ApplyHeatToAffectedArea(x)) -> StingsCauseDeath(x))", "all x y.((StepOn(x,y) & Stonefish(x) & ApplyHeatToAffectedArea(x)) -> StingsCauseDeath(y))", "all x y.((StepOnStonefish(x) & Stonefish(y) & ApplyHeatToAffectedArea(x,y)) -> CausesDeath(x,y))"]}
{"id": "folio_train_89", "nl": "Some monitors produced by LG have a type-c port.", "fol": "exists x.(ProducedByLG(x) & HasTypeCPort(x))", "prediction": ["exists x.(Monitor(x) & ProducedByLG(x) & HasTypeCPort(x))", "exists x.(Monitor(x) & ProducedByLG(x)) -> HasTypeCPort(x))", "exists x.(Monitor(x) & LG(x) & HasTypeCPort(x))", "exists x.(Monitor(x) & LG(x) & HasTypeCPort(x))", "exists x.(Monitor(x) & LG(x) & HasTypeCPort(x))", "exists x.(Monitor(x) & ProducedByLG(x) & HasTypeCPort(x))", "exists x.(MonitorProducedByLG(x) & HasTypeCPort(x))", "exists x.(Monitor(x) & MadeByLG(x) & HasTypeCPort(x))", "exists x.(Monitor(x) & LGProduce(x) & HasTypeCPort(x))", "exists x.(Monitor(x) & LG(x) & ProducedBy(x,y)) -> HasTypeCPort(x))", "exists x.(MonitorProducedByLG(x) & HasTypeCPort(x))", "exists x.(Monitor(x) & LGProduced(x) & TypeCPort(x))", "exists x y.(Monitor(x) & LG(y) & ProducedBy(x,y)) -> HasType(x,c))", "exists x.(Monitor(x) & ProducedByLG(x) & HasTypeCPort(x))", "exists x.(Monitor(x) & LGProduces(x) & hasTypeCPort(x))", "exists x.(Monitor(x) & ProducedByLG(x) & HasTypeCPort(x))"]}
{"id": "folio_train_90", "nl": "If the monitor has a type-c port, then it is not produced by AOC.", "fol": "all x.(HasTypeCPort(x) -> -ProducedByAOC(x))", "prediction": ["all x.((Monitor(x) & TypeCPort(x)) -> -ProducedByAOC(x))", "all x.((Monitor(x) & TypeCPort(x)) -> -ProducedByAOC(x))", "all x.((Monitor(x) & TypeCPort(x)) -> -ProducedByAOC(x))", "all x.((Monitor(x) & TypeCPort(x)) -> -ProducedByAOC(x))", "all x.(TypeCPort(x) -> -ProducedByAOC(x))", "all x.((Machiner(x) & TypeCPort(x)) -> -ProducedByAOC(x))", "all x.((Monitor(x) & TypeCPort(x)) -> -ProducedByAOC(x))", "(all x.(TypeCPort(x) -> -ProducedByAOC(x)))", "all x.((Monitor(x) & TypeCPort(x)) -> -ProducedByAOC(x))", "all x.((Monitor(x) & TypeCPort(x)) -> -ProducedByAOC(x))", "all x.((Monitor(x) & HasTypeCPort(x)) -> -ProducedByAOC(x))", "all x.((Monitor(x) & TypeCPort(x)) -> -ProducedByAOC(x))", "all x.((Monitor(x) & TypeCPort(x)) -> -ProducedByAOC(x))", "all x.((Monitor(x) & TypeCPort(x)) -> -ProducedByAOC(x))", "all x.((Monitor(x) & HasTypeCPort(x)) -> -ProducedByAOC(x))", "all x.(HasTypeCPort(x) -> -ProducedByAOC(x))"]}
{"id": "folio_train_91", "nl": "All monitors in the library are produced by AOC. ", "fol": "all x.(InLibrary(x) -> ProducedByAOC(x))", "prediction": ["all x y.((Monitor(x) & Library(y) & InLibrary(x,y)) -> ProducedByAOC(x))", "all x.(Monitor(x) -> (ProducedByAOC(x)))", "all x.(Monitor(x) -> ProducedByAOC(x))", "all x.(Monitor(x) -> (ProducedByAOC(x) & InLibrary(x)))", "all x.(Monitor(x) -> ProducedByAOC(x))", "all x.(Monitor(x) -> DesignedByAOC(x))", "all x.(Monitor(x) -> ProducedByAOC(x))", "all x.(Converter(x) -> ProducedByAOC(x))", "all x.((MonitorInLibrary(x) & ProducedByAOC(x)) -> CreatedByAOC(x))", "all x.(Monitor(x) -> ProducedByAOC(x))", "all x y.((MonitorByAOC(x) & InLibrary(x,y)) -> ProducedByAOC(x))", "all x y.((Monitor(x) & Library(y)) -> ProducedByAOC(x,y))", "all x.(MonitorInLibrary(x) -> ProducedByAOC(x))", "all x.(Monitor(x) -> ProducedByAOC(x))", "all x.((Monitor(x) & InLibrary(x)) -> ProducedByAOC(x))", "all x.(Monitor(x) -> ProducedByAOC(x))"]}
{"id": "folio_train_92", "nl": "L-2021 is either in the library or has a type-c port.", "fol": "((InLibrary(L2021) & -HasTypeCPort(L2021)) | (-InLibrary(L2021) & HasTypeCPort(L2021)))", "prediction": ["all x y.((L-2021(x) & Library(y)) | HasTypeCPort(x))", "all x.(L-2021(x) -> (InLibrary(x) | TypeCPort(x)))", "all x.(L-2021(x) -> (InLibrary(x) | HasTypeCPort(x)))", "all x.(L-2021(x) -> (InLibrary(x) | HasTypeCPort(x)))", "all x.(L-2021(x) -> (InLibrary(x) | HasTypeCPort(x)))", "(L-2021(L) & (InLibrary(L) | HasTypeCPort(L)))", "all x.(L-2021(x) -> (InLibrary(x) | TypeCPort(x)))", "all x.(L-2021(x) -> (InLibrary(x) | TypeCPort(x)))", "all x.(L-2021(x) -> (InLibrary(x) | TypeCPort(x)))", "all x.(L-2021(x) -> (InLibrary(x) | TypeCPort(x)))", "all x.(L2021(x) -> (InLibrary(x) | HasTypeCPort(x)))", "all x.(L2021(x) -> (InLibrary(x) | HasTypeCPort(x)))", "all x.(L2021(x) -> (InLibrary(x) | HasTypeCPort(x)))", "all x.(L-2021(x) -> (InLibrary(x) | HasTypeCPort(x)))", "all x.(L-2021(x) -> (InLibrary(x) | TypeCPort(x)))", "all x.(L-2021(x) -> (InLibrary(x) | HasTypeCPort(x)))"]}
{"id": "folio_train_93", "nl": "L-2021 is either produced by AOC and produced by LG, or neither produced by AOC nor produced by LG.", "fol": "-((ProducedByAOC(L2021) & -ProducedByLG(L2021)) | (-ProducedByAOC(L2021) & ProducedByLG(L2021)))", "prediction": ["all x.(2021L2021(x) -> ((ProducedByAOC(x) | ProducedByLG(x)) | -ProducedByAOC(x) & ProducedByLG(x)))", "(exists x.(L2021(x) & (ProducedByAOC(x) | ProducedByLG(x))) | (-ProducedByAOC(x) | ProducedByLG(x))))", "all x.(L-2021(x) -> (ProducedBy(x,AOC) & ProducedBy(x,LG)) | -ProducedBy(x,AOC) & ProducedBy(x,LG)))", "(all x.(L-2021(x) -> ProducedByAOC(x)) | (-ProducedByAOC(x) | ProducedByLG(x))))", "all x.(L2021(x) -> (ProducedBy(x,AOC) & ProducedBy(x,LG)\" | -ProducedBy(x,AOC) & -ProducedBy(x,LG)))", "all x.(L2021(x) -> ((ProducedByAOC(x) & ProducedByLG(x)) | (-ProducedByAOC(x) & ProducedByLG(x))))", "all x y z.((L2021(x) & AOC(y) & LG(z)) -> (ProducedBy(x,y) & ProducedBy(x,z)) | (-ProducedBy(x,y) & ProducedBy(x,y)))))", "all x.(L-2021(x) -> ((ProducedBy(x,AOC) & ProducedBy(x,LG)) | -ProducedBy(x,AOC) & ProducedBy(x,LG)))", "(ProducedByAOC(L-2021) | ProducedByLG(L2021)))", "all x.(L2021(x) -> (ProducedBy(x,AOC) & ProducedBy(x,LG)))", "(all x.(L2021(x) -> (ProducedByAOC(x) & ProducedByLG(x))) | (-ProducedByAOC(x) & ProducedByLG(x))))", "(all x.(L-2021(x) -> ProducedByAOC(x)) & -(ProducedByAOC(x) & ProducedByLG(x))))", "all x.(L2021(x) -> (ProducedBy(x,AOC) & ProducedBy(x,LG)) | (-ProducedBy(x,AOC) & ProducedBy(x,LG))))", "(all x.(L-2021(x) -> (ProducedBy(x,AOC) & ProducedBy(x,LG))) | (-ProducedBy(x,AOC) & ProducedBy(x,LG))))", "all x y.((L-2021(x) & AOC(y) & LG(y)) -> (ProducedBy(x,y) & ProducedBy(x,y)) | (NoProducedBy(x,y) & -ProducedBy(x,y))))", "all x.(L-2021(x) -> ((ProducedByAOC(x) & ProducedByLG(x)) | -ProducedByAOC(x) & ProducedByLG(x))))"]}
{"id": "folio_train_94", "nl": "L-2021 is in the library.", "fol": "InLibrary(L2021)", "prediction": ["the Library(L-2021)", "all x.(L-2021(x) -> InLibrary(x))", "L-2021 in the Library.", "all x.(L-2021(x) -> InLibrary(x))", "(InLibrary(L-2021) | InLibrary(L2021)))", "all x.(L-2021(x) -> InLibrary(x))", "L-2021 in the Library.", "ISL2021InLibrary(L)", "(AccessibleInLibrary(L-2021))", "L-2021 is in the library.", "L-2021 is in the library.", "AwaitsLibrary(L-2021)", "(InLibrary(L-2021)", "exists x.(L-2021(x) & InLibrary(x))", "L-2021 is in the library.", "all x.(L-2021(x) -> Library(x))"]}
{"id": "folio_train_95", "nl": "L-2021 is either in the library or produced by LG.", "fol": "(InLibrary(L2021) | ProducedByLG(L2021))", "prediction": ["all x.(L2021(x) -> (InLibrary(x) | ProducedByLG(x)))", "all x.(L-2021(x) -> (InLibrary(x) | ProducedByLG(x)))", "all x.(L-2021(x) -> (InLibrary(x) | ProducedByLG(x)))", "all x.(L-2021(x) -> (InLibrary(x) | ProducedByLG(x)))", "all x.(L2021(x) -> (InLibrary(x) | ProducedByLG(x)))", "all x.(L-2021(x) -> (InLibrary(x) | ProducedByLG(x)))", "all x.(L-2021(x) -> ((LBAstPurchase(x) | ProducedBy(x)) | LocatedInLibrary(x))))", "all x.(L2021(x) -> (InLibrary(x) | ProducedByLG(x)))", "all x.(L2021(x) -> (InLibrary(x) | ProducedByLG(x)))", "all x y.((L-2021(x) & Library(y)) | (ProducedBy(x,y) | InLibrary(y))))", "all x.(L2021(x) -> (InLibrary(x) | ProducedBy(x)))", "all x.(L-2021(x) -> (InLibrary(x) | ProducedByLG(x)))", "all x.(L-2021(x) -> (InLibrary(x) | ProducedBy(x,LG)))", "all x.(L2021(x) -> (InLibrary(x) | ProducedBy(x,LG)))", "all x.(L2021(x) -> (InLibrary(x) | ProducedByLG(x)))", "all x.(L-2021(x) -> (InLibrary(x) | ProducedByLG(x)))"]}
{"id": "folio_train_96", "nl": "L-2021 either has a type-c port or is produced by LG.", "fol": "(HasTypeCPort(L2021) | ProducedByLG(L2021))", "prediction": ["all x.(L2021(x) -> (TypeCPort(x) | LGProduced(x)))", "all x.(L2021(x) -> (TypeCPort(x) | LGProduces(x)))", "(all x.(L2021(x) -> HasTypeCPort(x)) | (ProducedByLG(x) & L2021(x))))", "all x.(L-2021(x) -> (TypeCPort(x) | LGProducedBy(x)))", "all x.(L2021(x) -> (TypeCPort(x) | LGProduction(x)))", "all x.((L2021(x) & (TypeCPort(x) | LGProduitable(x))) -> (Has(x,type-C) & (ProducedBy(x,lg) | ProducedBy(x,lg)))))", "all x.(L-2021(x) -> (TypeCPort(x) | LGProduces(x)))", "all x y.((L-2021(x) & LG(y)) -> (TypeCPort(x) | LGProducedBy(x,y)))", "(exists x.(L2021(x) & TypeCPort(x))) | LivesInLg(x)))", "all x.(L-2021(x) -> (TypeCPort(x) | LGProducedBy(x)))", "all x.(L2021(x) -> (TypeCPort(x) | LGProduced(x)))", "all x.(L-2021(x) -> (TypeCPort(x) | LGProduced(x)))", "all x.(L2021(x) -> (TypeCPort(x) | LGProduced(x)))", "all x.(L 2021(x) -> (TypeCPort(x) | LGProduced(x)))", "all x.(L2021(x) -> (HasTypeCPort(x) | ProducedByLG(x)))", "all x.(L2021(x) -> (TypeCPort(x) | LGProducedBy(x)))"]}
{"id": "folio_train_97", "nl": "If L-2021 is either in the library and produced by LG, or neither in the library nor produced by LG,  then L-2021 neither has a type-c port nor is produced by LG.", "fol": "(((InLibrary(L2021) & ProducedByLG(L2021)) | (-InLibrary(L2021) & -ProducedByLG(L2021))) -> (-HasTypeCPort(L2021) & -ProducedByLG(L2021)))", "prediction": ["((L-2021(LibroEngine) & InLibrary(LG) & ProducedByLG)) | (-LibroEngine(LG) & -ProducedByLG))))", "all x.((L-2021(x) & (InLibrary(x) & ProducedByLG) | -InLibrary(x) & ProducedByLG(x))) -> (-TypeCPort(x) & -ProducedByLG(x)))", "all x.((L-2021(x) & InLibrary(x) & ProducedByLG(x)) | -(InLibrary(x) & -ProducedByLG(x))))", "all x y.((L2021(x) & Library(y) & ProducedByLG(x,y)) | (-(InLibrary(x) | ProducedByLG(x,y))))) -> -(TypCPort(x) | ProducedByLG(x,y)))", "all x.((L-2021(x) & ((InLibrary(x) & ProducedByLG(x)) | -(InLibrary(x) & ProducedByLG(x)))) -> (-TypeCPort(x) | ProducedByLG(x))))", "all x.((L-2021(x) & (InLibrary(x) & ProducedByLG)) | -(InLibrary(x) & ProducedByLG))))", "all x.((L2021(x) & (InLibrary(x) | (-InLibrary(x) | ProducedByLG(x)))) -> -TypeCPort(x) & -ProducedByLG(x)))", "all x.((L2021(x) & (InLibrary(x) | -InLibrary(x) | -ProducedByLG(x))) -> (-HasTypeCPort(x) | ProducedByLG(x)))", "all x.((L2021(x) & (InLibrary(x) & ProducedByLG) | -InLibrary(x) & ProducedByLG))) -> (L2021(x) & -TypeCPort(x) & -ProducedByLG(x)))", "all x.((L-2021(x) & (InLibrary(x) | -InLibrary(x) | -ProducedByLG(x))) -> (-TypeCPort(x) | ProducedByLG(x)))", "all x.((L2021(x) & (InLibrary(x) & ProducedByLG(x)) | -(InLibrary(x) & -ProducedByLG(x)))) -> (-TypeCPort(x) & -ProducedByLG(x)))", "all x.((L-2021(x) & (InLibrary(x) & ProducedByLG) | -(InLibrary(x) & ProducedByLG)))) -> ((HasTypeCPort(x) | ProducedByLG(x))))", "all x.((L2021(x) & (InLibrary(x) | -InLibrary(x) | -ProducedByLG(x))) -> (NegativeTypeCPort(x) | LGProducesTypeCPort(x)))", "all x.((L2021(x) & (InBibliotheque(x) | -ProducedByLibrary(x) | -ProducedByLibrary(x))) -> -TypeCPort(x) & -ProducedByLG(x))", "all x.((L-2021(x) & (InLibrary(x) & ProducedByLG) | -InLibrary(x) & ProducedByLG))) -> -TypeCPort(x) & -ProducedByLG(x))", "all x.((L-2021(x) & (InLibrary(x) & ProducedByLG) | -InLibrary(x) & ProducedByLG))) -> -TypeCPort(x) & -ProducedByLG(x))"]}
{"id": "folio_train_98", "nl": "If L-2021 is either produced by LG and produced by AOC or neither produced by LG nor produced by AOC,  then L-2021 is either in the library or produced by LG.", "fol": "(((ProducedByAOC(L2021) & ProducedByLG(L2021)) | (-ProducedByAOC(L2021) & -ProducedByLG(L2021))) -> (InLibrary(L2021) | ProducedByLG(L2021)))", "prediction": ["all x.((L-2021(x) & ((ProducedByLgThan(x,LG) & ProducedByAOC) | -ProducedByLgThan(x,LG) & -ProducedByAOC))) -> (InLibrary(x) | ProducedByLG(x)))", "all x.((L-2021(x) & ((ProducedByLG(x) & ProducedByAOC)) | -ProducedByLG(x) & ProducedByAOC(x))) -> (InLibrary(x) | ProducedByLG(x)))", "all x.((L-2021(x) & (ProducedByLG(x) | ProducedByAOC(x))) | -ProducedByLG(x) & ProducedByAOC(x)))", "all x.((L-2021(x) & (ProducedByLG(x) | ProducedByAOC(x))) | -ProducedByLG(x) | -ProducedByAOC(x)))", "all x.((L2021(x) & (ProducedByLG(x) | ProducedByAOC(x))) | (-ProducedByLG(x) | -ProducedByAOC(x))))", "all x.((L-2021(x) & (ProducedBy(x,LG) & ProducedByAOC(x) | -ProducedBy(x,LG) & ProducedByAOC(x))) -> (InLibrary(x) | ProducedBy(x,LG)))", "all x.((L-2021(x) & (ProducedByLG(x) & ProducedByAOC(x)) | -ProducedByLG(x) & ProducedByAOC(x))) -> (InLibrary(x) | ProducedByLG(x)))", "all x.((L-2021(x) & (ProducedByLG(x) | ProducedByAOC(x))) | -ProducedByLG(x) | -ProducedByAOC(x)))", "all x.((L-2021 & (ProducedByLG(x) | ProducedByAOC(x))) | -ProducedByLG(x) | ProducedByAOC(x)))", "all x.((L2021(x) & ((ProducedBy LG(x) & ProducedByAOC(x) | -ProducedByLG(x) & ProducedByAOC(x)))) -> (InLibrary(x) | ProducedByLG(x)))", "all x.((L-2021(x) & (ProducedByLG(x) | ProducedByAOC(x))) -> (InBibliotheca(x) | ProducedByLG(x)))", "all x.((L-2021(x) & (ProducedByLG(x) & ProducedByAOC(x) | -ProducedByLG(x) & ProducedByAOC(x))) -> (InLibrary(x) | ProducedByLG(x)))", "all x.((L-2021(x) & (ProducedByLG(x) | ProducedByAOC(x))) | (-ProducedByLG(x) | ProducedByAOC(x))))", "all x.((L-2021(x) & (ProducedByLGAndProducedByAOC(x) | -ProducedByLGAndProducedByAOC(x)) -- ObjectInLibrary(x) | ObjectProducedByLg(x)))", "all x.((L-2021(x) & (ProducedByLG(x) | ProducedByAOC(x)) | -ProducedByLG(x) | ProducedByAOC(x))) -> (InLibrary(x) | ProducedByLG(x)))", "all x.((L-2021(x) & (ProducedBy LG(x) & ProducedByAOC(x) | -ProducedByLG(x) & ProducedByAOC(x))) -> (InLibrary(x) | ProducedByLG(x)))"]}
{"id": "folio_train_99", "nl": "People eat meat regularly or are vegetation.", "fol": "all x.(EatsMeatRegularly(x) | IsVegetarian(x))", "prediction": ["all x.((Person(x) & EatsMeatRegularly(x)) | Vegetation(x))", "all x.(People(x) -> (EatsMeatRegularly(x) | Vegetation(x)))", "all x.(People(x) -> (EatsMeatRegularly(x) | Vegetation(x)))", "all x.(Person(x) -> (EatsMeatRegularly(x) | Vegetation(x)))", "all x.(Person(x) -> (EatsMeatRegularly(x) | Vegetation(x)))", "exists x.(People(x) & (EatsMeatRegularly(x) | Vegetation(x)))", "all x.(Popular(x) -> (EatSeason(x,Meat) | Vegetation(x)))", "exists x.(People(x) & (EatsMeatRegularly(x) | Vegetation(x)))", "all x.((EatsMeatRegularly(x) | Vegetation(x)) -> Person(x))", "all x.(People(x) -> (EatsMeatRegularly(x) | Vegetation(x)))", "all x.(Person(x) -> (EatsMange(x) | Vegetation(x)))", "all x.(Personal(x) -> (EatsMeatRegularly(x) | Vegetation(x)))", "exists x.(Owner(x) & (EatsMeatRegularly(x) | Vegetation(x)))", "all x.(Person(x) -> (EatsMeat(x) | Vegetation(x)))", "all x.(Person(x) -> (EatsMeat(x) | Vegetation(x)))", "all x.(People(x) -> (IsRegularMeat(x) | Vegetation(x)))"]}
{"id": "folio_train_100", "nl": "If people eat meat regularly, then they enjoy eating hamburgers and steaks.", "fol": "all x.(EatsMeatRegularly(x) -> EnjoysHamburgers(x))", "prediction": ["all x.((People(x) & EatsMeatRegularly(x)) -> (Enjoys(x,Meat) & Enjoys(x,Steaks)))", "all x.((EatMeatRegularly(x) & EnjoysMeat(x)) -> (Hazards(x) | Steaks(x)))", "all x.(EatsMeatRegularly(x) -> (EnjoysEatingHazards(x) & EnjoysEatingSteaks(x)))", "all x.(EatsRegularMeat(x) -> (EnjoysEating(x,Meat) & EnjoysEating(x,Meat) & EnjoysEating(x,Steaks)))", "all x.((People(x) & EatsMeatRegularly(x)) -> (Enjoy[x,Meat) & -Enjoy(x,Stones)))", "all x.((Person(x) & EatsMeatRegularly(x)) -> (EnjoysEating(x,Hungarian,Steak)))", "all x.((EatsMeatRegularly(x) & EatsHandels(x) & EatsSteaks(x)) -> EnjoysEating(x))", "all x.((People(x) & EatsMeatRegularly(x)) -> (EnjoysEating(x,burgers) & EnjoysEating(x,steaks)))", "all x.((EatsMeatRegularly(x) & People(x)) -> (EnjoysEatingHats(x) & EnjoysEatingSteaks(x)))", "all x.((EatsMeatRegularly(x) & PeopleEnjoyMeat(x)) -> (Eats(x,Meat) & Eats(x,Steaks)))", "all x.((People(x) & EatsMeatRegularly(x)) -> (EnjoysEating(x,burgers) & EnjoysEating(x,steaks)))", "all x.((People(x) & EatsMeatRegularly(x)) -> EnjoysEating(x,(Haemons) | Steaks(x)))", "all x.((Personal(x) & EatsMeatRegularly(x)) -> (EatsHaburgersAndSteaks(x)))", "all x.((EatsRegularMeat(x) & RegularMeat(x)) -> (EnjoysEating(x,burgers) & EnjoysEating(x,steaks)))", "all x.((PopularEating(x) & HabitualEating(x)) -> (EnjoysEatingMargaritas(x) | EnjoysEatingSteaks(x)))", "(EatsMeatRegularly(people) -> (EnjoysEating(people,Humans,Humans) & EnjoysEating(people,Steaks)))"]}
{"id": "folio_train_101", "nl": "All people who are vegetarian are conscious of the environment or their health.", "fol": "all x.(IsVegetarian(x) -> IsConsciousOfEnvironmentOrHealth(x))", "prediction": ["all x.(Vegetarian(x) -> (ConsciousOfEnvironment(x) | ConsciousOfHealth(x)))", "all x.(Vegetarian(x) -> (ConsciousOfEnvironment(x) | ConsciousOfHealth(x)))", "all x.(Vegetarian(x) -> (ConsciousOfEnvironment(x) | ConsciousOfHealth(x)))", "all x.(Vegetarian(x) -> (ConsciousOfEnvironment(x) | ConsciousOfHealth(x)))", "all x.(Vegetarian(x) -> (ConsciousOfEnvironment(x) | ConsciousOfHealth(x)))", "all x.(Vegetarian(x) -> (ConsciousOfEnvironment(x) | ConsciousOfHealth(x)))", "all x.(Vegetarian(x) -> (ConsciousOfEnvironment(x) | ConsciousOfHealth(x)))", "all x.(Vegetarian(x) -> (ConsciousOfEnvironment(x) | ConsciousOfHealth(x)))", "all x.(Vegetarian(x) -> (ConsciousOfEnvironment(x) | ConsciousOfHealth(x)))", "all x.(Vegetarian(x) -> (ConsciousOfEnvironment(x) | ConsciousOfHealth(x)))", "all x.(Vegetarian(x) -> (ConsidersEnvironment(x) | ConsciousOfHealth(x)))", "all x.(Vegetarian(x) -> (ConsciousOfEnvironment(x) | ConsciousOfHealth(x)))", "all x.(Vegetarian(x) -> (ConsciousOfEnvironment(x) | ConsciousOfHealth(x)))", "all x.(Vegetarian(x) -> (ConsciousOfEnvironment(x) | ConsciousOfHealth(x)))", "all x.(Vegetarian(x) -> (ConsciousOfEnvironment(x) | ConsciousOfHealth(x)))", "all x.((Person(x) & Vegetarian(x)) -> (ConsciousOfEnvironment(x) | ConsciousOfHealth(x)))"]}
{"id": "folio_train_102", "nl": "If people are conscious about the environment or their health, then they do not go to fast food places often.", "fol": "all x.(IsConsciousOfEnvironmentOrHealth(x) -> -GoesToFastFoodPlaces(x))", "prediction": ["all x.(ConsciousInEnvironmentOrHealth(x) -> -FastFoodPlace(x))", "all x.((ConsciousAroundEnvironment(x) | ConsciousAroundHealth(x)) -> -FastFoodPlaces(x))", "all x.(ConsciousAboutEnvironmentOrHealth(x) -> -FastFoodPlaces(x))", "all x.((ConsciousOfEnvironmentOrHealth(x)) -> -FastFoodPlaces(x))", "all x.((ConsciousOfEnvironment(x) & CONCiousOfHealth(x)) -> -FastFoodPlaces(x))", "all x.((CognitiveAboutEnvironment(x) & ConsciousAboutHealth(x)) -> -FastFoodPoints(x))", "all x.(ConsciousOfEnvironmentOrHealth(x) -> -FastFoodPlacesFrequently(x))", "all x.((ConcentredAbout(x) & (ConsciousOfEnvironment(x) | ConciousOfHealth(x))) -> -FishFoodPlaces(x))", "all x.(ConsciousOfEnvironmentOrHealth(x) -> -FastFoodPlacesAt(x))", "all x.((ConsciousOfEnvironment(x) | ConsciousOfHealth(x)) -> -FastFoodPlaces(x))", "all x.(ConsciousAboutEnvironmentOrHealth(x) -> -FastFoodPlacesFrequently(x))", "all x.((ConsciousOfEnvironmentOrHealth(x)) -> -FastFoodPlaces(x))", "all x.(ConsciousAboutEnvironmentOrHealth(x) -> -GoToFastFoodPlacesOfFERRENCEs(x))", "all x.((Conscious(x) & (ConciousOfEnvironment(x) | ConsciousOfHealth(x))) -> -AtFastFood(x))", "all x.(ConsciousOfEnvironmentOrHealth(x) -> -FastFoodPlace(x))", "all x.(Conscious(x) -> -FastFood(x))"]}
{"id": "folio_train_103", "nl": "If people have busy schedules without time to cook, then they go to fast food places often.", "fol": "all x.(HasBusySchedule(x) -> GoesToFastFoodPlaces(x))", "prediction": ["all x.((MerrySchedules(x) & BusySchedules(x) & -BuyToCook(x)) -> GoToFastFoodPlaces(x))", "all x.((Person(x) & BusySchedules(x) & -TimeToCook(x)) -> FastFoodPlacesOrgsOffication(x))", "all x.((Person(x) & BusySchedule(x) & -TimeToCook(x)) -> GoesToFastFood(x))", "all x.((Person(x) & BusySchedules(x) & -TimeToCare(x)) -> GoToFastFood(x))", "all x.((BluffingSchedule(x) & -TimeToCook(x)) -> GoToFastFoodPlaces(x))", "all x.((Person(x) & BusySchedules(x) & -TimeToCook(x)) -> FastFoodPlace(x))", "all x.((PopularPublicity(x) & BusySchedules(x) & -TimeToCook(x)) -> GoesToFastFood(x))", "all x.((BrowsySchedule(x) & -timeToCook(x)) -> FastFoodPlace(x))", "all x.((PopularSchedule(x) & BusySchedule(x) & -TimeFastFoodPlace(x)) -> GoToOften(x))", "all x.((Person(x) & BusySchedules(x) & -TimeToCook(x)) -> GoesToFastFoodPlaces(x))", "all x.((Person(x) & BusySchedules(x) & -TimeToCook(x)) -> FastFoodPlacesOften(x))", "all x.((Person(x) & BusySchedules(x) & -TimeToCook(x)) -> GoToFastFoodPlaces(x))", "all x.((BusySchedules(x) & WithoutTimeToCook(x)) -> GoesToFastFoodPlaces(x))", "all x.((BusySchedules(x) & -AtTimeToCook(x)) -> GoToFastFoodPlaces(x))", "all x.((Person(x) & BusySchedule(x) & TimeToCook(x)) -> GoToFastFoodPlaces(x))", "all x.((Person(x) & BusySchedules(x) & -TimeToCook(x)) -> FastFoodPlacesAtConvenience(x))"]}
{"id": "folio_train_104", "nl": "If Jeremy does not both go to fast food places often and is conscious about the environment or their health, then he goes to fast food places often.", "fol": "(-(GoesToFastFoodPlaces(Jeremy) & IsConsciousOfEnvironmentOrHealth(Jeremy)) -> GoesToFastFoodPlaces(Jeremy))", "prediction": ["all x.((Jeremy(x) & -(GoesToFastFood(x) & ConscientiousAboutEnvironment(x) & ConscientiousAboutHealth(x))) -> GoesToFastFood(x))", "all x.((Jeremy(x) & -(GoesToFastFood(x) | ConsciousAboutEnvironment(x) | ConsciousAboutHealth(x))) -> GoesToFastFood(x))", "all x.((Jeremy(x) & -(GoesToFastFoodPlacesOften(x) & ConscientiousAboutEnvironment(x) & ConsciousAboutHealth(x))) -> GoesToFastFoodPlacesOfFastFoodPlacesOfFastFoodPlacesOfFastFoodPlacesOfFastFoodPlacesOfHealthProblems(x)))", "all x.((Jeremy(x) & -(ConsciousAboutEnvironment(x) | ConsciousAboutHealth(x)))) -> GoesToFastFoodPlaces(x))", "all x.((Jeremy(x) & -(GoesToFastFoodPlacesOfFastFood(x) & NotConsciousAboutEnvironment(x) & NotConsciousAboutHealth(x))) -> GoesToFastFoodPlacesOfFastFood(x))", "all x.((Jeremy(x) & -(GoesToFastFood(x) | ConsciousAboutEnvironment(x) | ConsciousAtHealth(x))) -> GoesToFastFood(x))", "all x.((Jeremy(x) & -(GoesToFastFoodPlacesOften(x) & ConcernedAboutEnvironment(x)) | ConcernedAboutHealth(x))) -> GoesToFastFoodPlacesOften(x))", "all x.((Jeremy(x) & -(GoesToFastFoodPlacesOfFastFood(x) & ConsciousAboutEnvironment(x) & ConsciousAboutHealth(x))) -> GoesToFastFoodPlacesOfFastFoodPlacesOfFastFood(x)))", "all x.((Jeremy(x) & -(GoesToFastFoodPoints(x) & ConscientiousAsHasEnvironment(x) | ConsciousAsHealth(x))) -> GoesToFastFoodPoints(x))", "all x.((Jeremy(x) & -(GoesToFastFoodPlacesFrequently(x) & ConscientiousAboutTheEnvironment(x) & ConscientiousAboutHealth(x))) -> GoesToFastFoodPlacesFrequently(x))", "all x.((Jeremy(x) & -(CognitiveOfEnvironment(x) & ConsciousOfHealth(x))) -> GoesToFastFoodPlaces(x)))", "all x.((Jeremy(x) & -FastFoodPlace(x) & ConsciousOfEnvironmentOrHealth(x)) -> FastFoodPlace(x))", "all x.((Jeremy(x) & -(FastFoodPlace(x) & ConsciousAboutEnvironment(x) & ConsciousAboutHealth(x))) -> FastFoodPlaces(x))", "all x.(((Jeremy) & -FastFoodPlaces(x) & ConsciousAboutEnvironmentOrHealth)) -> FastFoodPlaces(x))", "all x.((Jeremy(x) & -(GoesToFastFoodPlacesFrequently(x) & ConsciousAboutEnvironmentOrHealth(x))) -> GoesToFastFoodPlacesOften(x))", "all x.((Jeremy(x) & -(GoesToFastFood(x) | ConsciousOfEnvironment(x) | ConsciousOfHealth(x))) -> GoesToFastFood(x))"]}
{"id": "folio_train_105", "nl": "Jeremy has a busy schedule without time to cook.", "fol": "HasBusySchedule(Jeremy)", "prediction": ["all x.(Jerry(x) -> (BusySchedule(x) & -TimeToCook(x)))", "Jeremy is busy with her schedule and hasn\u2019t time to cook.", "all x.(Jeremy(x) -> (BusySchedule(x) & -TimeToCook(x)))", "JeremyHasBusySchedule(Jeremy,ExtraDay) & -DoesTimeToCook(Jeremy,ExtraDay))", "all x.(Jeremy(x) -> (BusySchedule(x) & -TimeToCook(x)))", "all x.(Jeremy(x) -> (BusySchedule(x) & -TrainToCook(x)))", "all x.(Jeremy(x) -> (HasBusySchedule(x) & -HasTimeToCook(x)))", "all x.(Jeremy(x) -> (BusySchedule(x) & -TenMinuteToCook(x)))", "(BusySchedule(Jeremy) & -TimeToCook(Jeremy))", "all x.(Jeremy(x) -> -BusyScheduleAndNoTimeToCook(x))", "all x.(Jeremy(x) -> (BusySchedule(x,y) & -TimeToCook(y)))", "(BusySchedule(Jeremy) & -TimeToCook(Jeremy))", "(BuckySchedule(Jeremy) & WithoutTimeToCook(Jeremy))", "all x.(Jeremy(x) -> (BusySchedule(x) & -TimeToCook(x)))", "Jeremy(Jeremy) -> (BucketSchedule(Jeremy) & -TimeToCook(Jeremy)))", "all x.((Jeremy(x) & BusySchedule(x,x) & NoTimeToCook(x)) -> -DinnerTime(x))"]}
{"id": "folio_train_106", "nl": "Jeremy has a busy schedule without time to cook or enjoy eating hamburgers and steaks.", "fol": "(HasBusySchedule(Jeremy) | EnjoysHamburgers(Jeremy))", "prediction": ["all x.((Jeremy(x) & BusySchedule(x)) -> (-(Cooks(x) | EnjoysEating(x,Maggies) & EnjoysEating(x,Steaks))))", "all x.((Jeremy(x) & BusySchedule(x) & -(TimeToChew(x) | TimeToEnjoy(x)))) ->.", "all x.((Jeremy(x) & BusySchedule(x)) -> (-(TimeToCook(x) & -TimeToEnjoy(x))))", "all x.((Jeffrey(x) & BusySchedule(x)) -> (-(ReadyToCook(x) | EnjoyEating(x)) & -Eat(x) & -Eat(x))))", "(BusySchedule(Jeremy) & -(TimeToCook(Jeremy) | TimeToEnjoyEating(Jeremy,Hardware))))", "(BusySchedule(Jeremy) & -((TimeToCook(Jeremy) | TimeToEat(Jeremy,Cartauses))) & CookWith(Jeremy,CookWithListens)))", "all x.((Jeremy(x) & BusySchedule(x) & -(TimeToCook(x) | TimeToEnjoyIndividuals(x))))", "all x y.((Jim(x) & BusySchedule(x)) -> (Billed(x) & -((Bally(x) & -(Bally(x) & -FallOut(x)) | (-Bally(x) & FightOut(x))))))", "all x.(Jeffrey(x) -> (BusySchedule(x) & -(TimeToCook(x) | TimeToEnjoy(x)))))", "all x.((Jeremy(x) & BusySchedule(x)) -> -(Cooks(x) | IsEnjoysEatingHaburgers(x) | EnjoysEatingSteaks(x)))", "all x.((Jeremy(x) & BusySchedule(x)) -> (-(TimeToCook(x) | TimeToEnjoyEating(x)))))", "all x.((Jeremy(x) & BusySchedule(x) & (-Cooks(x) | EnjoysEating(x))) -> -Chooses(x))", "all x.(Jeremy(x) -> (BusySchedule(x) & -(ReadSchedule(x) & CookSchedule(x) | EnjoyEating(x,burgers,steaks)))))", "Jeremy & BusySchedule(Jeremy) -> -(Schedule(Jeremy,Hot) & (HasTimeToCook(Jeremy,Human) | HasTimeToEnjoy(Jeremy,HasTimeToEat(Jeremy,Hickens))))", "Jeremy has busySchedule(Jeremy) & -(TimeForCooking(Jeremy) | TimeForEating(Jeremy,Meats) & TimeForEating(Jeremy,Steaks)))", "all x.((Jeremy(x) & BusySchedule(x)) -> (-(Cooks(x) | Enjoys(x,burgers) | Enjoys(x,steaks))))"]}
{"id": "folio_train_107", "nl": "If Jeremy has a busy schedule without time to cook or enjoy eating hamburgers and steaks, then Jeremy neither has a busy schedule without having time to cook nor enjoys eating hamburgers and steaks.", "fol": "((HasBusySchedule(Jeremy) | EnjoysHamburgers(Jeremy)) -> (-HasBusySchedule(Jeremy) & -EnjoysHamburgers(Jeremy)))", "prediction": ["all x.((BossySchedule(x) & -(TimeToCook(x) | TimeToEnjoy(x,FeastingHakabutts,FeastingHakbutts))) -> (-BusySchedule(x,FeastingHapottas(x) | EnjoysEating(x,FeastingHakbutts,FeastingSteaks))))", "all x.((Jeremy(x) & BusySchedule(x) & -(MadeAtTimeToCook(x) | Eats(x,burgers,steaks))) -> (-MadeAtTimeToCook(x) & -EnjoysEating(x,burgers,steaks))))", "all x.((Jeremy(x) & BusySchedule(x) & -(BusySchedule(x) & -BusySchedule(x) & -(BavesTimeToCook(x) & EnjoysEatingHardware(x)))) -> -(BavesTimeToCook(x) & EnjoysEatingHardware(x))))", "((Jeremy(Jeremy) & BusySchedule(Jeremy)) & -(BuiltSchedule(Jeremy) & -HasTimeToCook(Jeremy)) | EnjoysEating(Jeremy,Meatballs) & EnjoysEating(Jeremy,Steaks)))", "all x.((Jeremy(x) & BusySchedule(x)) -> (-(BusySchedule(x) & -HasTimeToCook(x)) | (-HasTimeToCook(x) & EnjoysEatingHungry(x) & EnjoysEatingHungry(x)))))", "all x.((BrushSchedule(x) & -TimeToCook(x) & -EnjoysEating(x,burgers) & EnjoysEating(x,steaks)) -> -(BrushSchedule(x) & -TimeToCook(x) & EnjoysEating(x,steaks)))", "all x.((Jeremy(x) & BusySchedule(x) & -(BusySchedule(x) & -(BusyscheduleAvoidsCooking(x) | EnjoysEating(x,burgers)))) -> -(BusyScheduleAvoidsCooking(x) & EnjoysEating(x,burgers))))", "all x.((Jeremy(x) & BusySchedule(x) & -TonyToCook(x) & FreeExperience(x)) -> (-BuyySchedule(x) & -EnjoysEating(x,burgers,steaks)))", "all x.((Jeremy(x) & BusySchedule(x) & -(Buysel(x) & -(Buysel(x) & -HasTimeToCook(x) & EatsHungry(x) & EatsHungry(x)))) -> (-Buysel(x) & EatsHungry(x) & EnjoysEatingSeltz(x)))", "all x.((Jeremy(x) & BusySchedule(x) & -(BusySchedule(x) & -(HotSchedule(x) & -HotSchedule(x) & -HotSchedule(x) & EnjoysEatingMeat(x)) & -(HasTimeToCook(x) | EnjoysEatingMeat(x))))", "all x.((Jimmy(x) & BusySchedule(x)) -> (-BusySchedule(x) & (-BusySchedule(x) & -BusySchedule(x) & (-BusySchedule(x) & -BusySchedule(x) & (-BusySchedule(x) & -Buste(x) & (-Bustle(x) & (-Bustle(x)) & (Bastle(x)) & -Bustle(x))))", "all x.((Jeremy(x) & BusySchedule(x) & (-BusySchedule(x) & -BusySchedule(x) & -EnjoysEatingHaarbeasts(x) & EnjoysEatingSteaks(x))) -> (-BusySchedule(x) & -EnjoysEatingHaarbeasts(x) & -EnjoysEatingHibeasts(x)))", "all x.((Scheduler(x) & (-Busy(x) & -(Busy(x) & (Bakeup(x) | Eats(x)))) -> (-Busy(x) & -EnjoysEating(x)) |(AppreciatesEating(x) & Eats(x))))", "all x.((BoatsSchedule(x) & -(TimeToCook(x) | EnjoyEating(x,burgers) & EnjoyEating(x,Steaks))) -> (Jeremy-BoatsSchedule(x) & -(EnjoysEating(x,burgers) & EnjoyesEating(x,steaks))))", "all x.((Jeremy(x) & BusySchedule(x) & -UsesTimeToCook(x) & -UsesTimeToEnjoy(x)) -> -(Booy(x) & -HasTimeToCook(x) & EnjoysEating(x,burgers,steaks)))", "all x.((Chris(x) & BusySchedule(x) & -(HasTimeToCook(x) | EnjoysEating(x,HasTimeToCook(x)))) -> (-HasSchedule(x) & -(EnjoysEating(x,HasTimeToCook) | EnjoysEating(x,HasTimeToCook(x))))"]}
{"id": "folio_train_108", "nl": "Sam is doing a project.", "fol": "exists x.(ProjectExists(x) & IsDoing(Sam,x))", "prediction": ["all x.(Sam(x) -> DoingProject(x))", "(DoingProject(Sam) & -DoingProject(Sam))", "(DoesProject(Sam) | -DoesProject(Sam)))", "(DoingProject(Sam) | DoingProject(Sam)))", "Sam is also doing a project.", "(DoingProject(Sam,excel) -> Doing(Sam,excel))", "(TeachesProject(Sam) -> Doing(Sam,Sam))", "all x y.((Sam(x) & Project(y)) -> Doing(x,y))", "exists x.(Sam(x) & DoingProject(x))", "(DoesProject(Sam) | DoingProject(Sam))", "all x.(Sam(x) -> DoingProject(x))", "(DoingProject(Sam) -> SamDoesProject(Sam))", "All x.(Essay(x) -> Project(x))", "(DoingProject(Sam)", "All x.((Sam(x) & Project(x)) -> Doing(x,Sam))", "MandyBody(Sam) & DoingProject(Sam))"]}
{"id": "folio_train_109", "nl": "A project is written either in C++ or in Python.", "fol": "all x.(ProjectExists(x) -> ((IsWrittenIn(x,PythonLanguage) & -IsWrittenIn(x,CPlusPlus)) | (-IsWrittenIn(x,PythonLanguage) & IsWrittenIn(x,CPlusPlus))))", "prediction": ["all x.(Project(x) -> (WrittenIn(x,C++) | WrittenIn(x,Python)))", "all x.(Project(x) -> (WrittenIn(x,C++) | WrittenIn(x,Python)))", "all x.(Project(x) -> (WrittenIn(x,C++) | WrittenIn(x,Python)))", "all x.(Project(x) -> (WrittenInC++(x) | WrittenInPython(x)))", "all x.(Project(x) -> (WritteninC++(x) | WrittenInPython(x)))", "all x.(Project(x) -> (WrittenInC++(x) | WrittenInPython(x)))", "all x.(Project(x) -> (WrittenInC++(x) | WrittenInPython(x)))", "all x.(Project(x) -> (WrittenInC++(x) | WrittenInPython(x)))", "all x.(Project(x) -> ((WrittenInC++(x) | WrittenInPython(x))))", "all x.(Project(x) -> (WrittenInC++(x) | WrittenInPython(x)))", "all x.(Project(x) -> (ScribbledInC++(x) | WrittenInPython(x)))", "all x.(Project(x) -> (WrittenInC++(x) | WrittenInPython(x)))", "all x.(Project(x) -> (WrittenInC++(x) | WrittenInPython(x)))", "all x.(Project(x) -> (WrittenIn(x,C++) | WrittenIn(x,Python)))", "all x.(Project(x) -> (WrittenIn(x,C++) | WrittenIn(x,Python)))", "all x.(Project(x) -> (WrittenInC++(x) | WrittenInPython(x)))"]}
{"id": "folio_train_110", "nl": "If Sam does a project written in Python, he will not use a Mac.", "fol": "all x.((ProjectExists(x) & IsWrittenIn(x,PythonLanguage) & IsDoing(Sam,x)) -> -IsUsing(Sam,MacComputer))", "prediction": ["all x.((Project(x) & WrittenInPython(x)) -> -UsesMac(x))", "all x.((DoesProject(x,Python) & Sam(x)) -> -MacUse(x))", "all x.((Sam(x) & ProjectWrittenInPython(x)) -> -UsesMac(x))", "all x.((Project(x) & WrittenInPython(x)) -> -UsesMac(x))", "all x.((Project(x) & WrittenInPython(x)) -> -UsesMac(x))", "all x.((Project(x) & WrittenInPython(x)) -> -UsesMac(x))", "all x y.((Project(x) & WrittenInPython(x,y)) -> -UsesMac(x))", "all x.((Sam(x) & ProjectWrittenInPython(x)) -> -Mac(x))", "all x.(DoesProjectInPython(x) -> -UsesMac(x))", "all x.((Project(x) & WrittenInPython(x)) -> -UsesMac(x))", "all x.((Does(x,y) & WrittenInPython(y)) -> -UsesMac(x))", "all x.((DoesProject(x) & WrittenInPython(x)) -> -UsesMac(x))", "all x.((Project(x) & WrittenInPython(x)) -> -UsesMac(x))", "all x.((Project(x) & WrittenInPython(x)) -> -UsesMac(x))", "all x.((Sam'sPythonProject(x) & WrittenIn(x,Python)) -> -UsesMac(x))", "all x.((Project(x) & WrittenInPython(x)) -> -MacUse(x))"]}
{"id": "folio_train_111", "nl": "Sam is using a Mac.", "fol": "IsUsing(Sam,MacComputer)", "prediction": ["(UsesMac(Sam) | UsersMac(Sam)))", "is used by Sam(Sam) & UsesMac(Sam))", "all x.((Sam(x) & Mac(x)) -> Uses(x,Mac))", "all x.((Sam(x) & Mac(x)) -> Uses(x,y))", "all x y.((Sam(x) & Mac(y)) -> Uses(x,y))", "(UsesMac(Sam) & -UsesWindows(Sam))", "(UsesMac(Sam) & UsesMac(Sam))", "Sam is usingMac(Sam)", "(Mac(Sam) & Uses(Sam,Mac))", "(UsesMac(Sam) & User(Sam,Mac))", "(UsesMac(Sam) & -SamUsesMac(Mam))", "(UsesMac(Sam) -> UsesMac(Sam))", "ALL x.(Sam(x) -> UsedMac(x))", "(USESamMac(Sam) & UsingMac(Sam))", "(UsesMac(Sam) & -UsingMac(Sam))", "(Mac(Sam) | Mac(Sam)))"]}
{"id": "folio_train_112", "nl": "If Sam uses a Mac, he will play a song.", "fol": "(IsUsing(Sam,MacComputer) -> exists x.(SongExists(x) & Plays(Sam,x)))", "prediction": ["all x.((UsesMac(x) & PlaysSong(x)) -> SamUsesMac(x))", "all x.(UsesMac(x) -> PlaySong(x))", "all x y.((Mac(x) & Sam(y) & Uses(y,x)) -> PlaysSong(y,x))", "all x.((Mac(x) & Uses(x)) -> PlaySong(x))", "all x.((Mac(x) & Uses(x)) -> PlaySong(x))", "all x.((Mac(x) & Uses(x,x)) -> PlaysSong(x,y))", "all x.((Mac(x) & SamUses(x,y)) -> PlaysAnotherSong(x))", "all x.((Mac(x) & UsedBy(x,Sam)) -> PlaySong(x))", "all x.((Mac(x) & SamUses(x,x)) -> PlaysSong(x))", "all x.((Sam(x) & UsesMac(x)) -> PlaysSong(x))", "all x.((Mac(x) & Uses(x)) -> PlaySong(x))", "all x.((Sam(x) & UsesMac(x)) -> PlaySong(x))", "all x.(UsesMac(x) -> PlaySong(x))", "all x.((Mac(x) & User(x)) -> PlaysSong(x))", "all x.(UsesMac(x) -> PlaysSong(x))", "all x.((Mac(x) & Uses(x,Mac)) -> PlaysSong(x,Mac))"]}
{"id": "folio_train_113", "nl": "If a song is not \"Perfect\", Sam will never play it.", "fol": "all x.(-Is(x,PerfectSong) -> -Plays(Sam,x))", "prediction": ["all x.((Song(x) & -Perfect(x)) -> -Play.(Sam(x)))", "all x.((Song(x) & -Perfect(x)) -> SamWillNotPlay(x))", "all x.((Song(x) & -Perfect(x)) -> NeverPlay(x))", "all x.((Song(x) & -Perfect(x)) -> -Play(x))", "all x.((Song(x) & -Perfect(x)) -> SamWon'tPlay(x))", "all x.((Song(x) & -Perfect(x)) -> WillNotPlay(x))", "all x.((Song(x) & -Perfect(x)) -> SamNeverPlays(x))", "all x.((Song(x) & -Perfect(x)) -> NoPlays(x))", "all x.((Song(x) & -Perfect(x)) -> SamWon'tPlay(x,sams,y))", "all x.((Song(x) & -Perfect(x)) -> -Play(x,sam))", "all x.((Song(x) & -Perfect(x)) -> -Play(x,Sam))", "all x.((Song(x) & -Perfect(x)) -> NeverPlay(x,Sam))", "all x.((Song(x) & -Perfect(x)) -> NeverPlays(x))", "all x.((Song(x) & -Perfect(x)) -> SamWulks(x))", "all x.((Song(x) & -Perfect(x)) -> Sam-Sam(x))", "all x.((Song(x) & \"-Perfect(x)) -> Sam -Mean(x))"]}
{"id": "folio_train_114", "nl": "The project Sam is doing is written in C++.", "fol": "exists x.(ProjectExists(x) & IsDoing(Sam,x) & IsWrittenIn(x,CPlusPlus))", "prediction": ["all x.((Project(x) & SamIsProposing(x)) -> WrittenInC++(x))", "all x.((Project(x) & Sam(x)) -> WrittenInC++(x))", "(exists x.(Project(x) & CodedIn(x) & WrittenIn(x,C++)))", "all x.((Project(x) & Doing(x)) -> WrittenInC++(x))", "all x.((Project(x) & SamDoes(x)) -> WrittenInC++(x))", "all x y.((Project(x) & Sam(y)) -> WrittenInC++(y))", "all x.((Project(x) & Sam(x)) -> WrittenInC++(x))", "-(Project(Sam) & WrittenInC++(Sam))", "all x.(Project(x) -> WrittenInC++(x))", "all x.((Project(x) & Sam(x)) -> WrittenInC++(x))", "all x.(Project(x) -> WrittenInC++(x))", "all x.((Project(x) & Sam(x)) -> WrittenInC++(x))", "all x.(Project(x) -> WrittenInC++(x))", "all x.((Project(x) & MadeInC++(x)) -> WrittenInC++(x))", "(all x.(SamProject(x) -> WrittenInC++))", "all x.((Project(x) & Sam(y)) -> WrittenInC++(y,x))"]}
{"id": "folio_train_115", "nl": "The song Sam is playing is \"Perfect\".", "fol": "exists x.(SongExists(x) & Plays(Sam,x) & Is(x,PerfectSong))", "prediction": ["Sesam plays \"PerfectSong(sam))", "-PerfectSong(Sam)", "(PerfectSong(Sam) & Playing(Sam))", "(PerfectSong(sam) & Playing(sam))", "all x.((Song(x) & SamPlaying(x)) -> \"Perfect.(x)))", "(Perfect(Sam,song))", "The song Sam isPlaying(sam) & Perfect(man).", "\"Perfect(Sam) & Song(Sam))", "\"Perfect\" (song) & SamSamBethPiano(s))", "The song Sam played is \"Perfect(Sam's Song)\"", "All x.(Song(x) -> \"Perfect(x)))", "(Perfect(Sam) & Playing(Sam))", "All x.(Sam(x) -> Playing(x,Perfect))", "\"PerfectSong(Sam))", "\"Perfect\"", "(PerfectSong(Sam) & Playing(Sam) & Song(Sam))"]}
{"id": "folio_train_116", "nl": "If a song is \"Perfect\", Sam will play it.", "fol": "all x.(Is(x,PerfectSong) -> Plays(Sam,x))", "prediction": ["all x.(Perfect(x) -> Plays(x))", "all x.((Song(x) & Perfect(x)) -> Play(x))", "all x.((Song(x) & Perfect(x)) -> Play(y,x))", "all x.(PerfectSong(x) -> Play(x))", "ALL x.(Perfect(x) -> SamWonders(y))", "all x.((Song(x) & Perfect(x)) -> Plays(x))", "all x.((Song(x) & Perfect(x)) -> Play(x,Sam))", "all x.((Song(x) & Perfect(x)) -> PlaySam(x))", "all x.(PerfectSong(x) -> Plays(x))", "all x.(Perfect(x) -> PlaySam(x))", "all x.(Perfect(x) -> SamPlays(x))", "all x.((Song(x) & Perfect(x)) -> Play(x,sam))", "all x.(Perfect(x) -> SamPlays(x))", "all x.(Perfect(x) -> PlaySam(x))", "all x.(Perfect(x) -> Plays(Sam))", "all x.((Song(x) & Perfect(x)) -> Play(y))"]}
{"id": "folio_train_117", "nl": "All rabbits have fur", "fol": "all x.(IsRabbit(x) -> HasFur(x))", "prediction": ["all x.(Rabbit(x) -> HasFur(x))", "all x.(Rabbit(x) -> HasFur(x))", "all x.(Rabbit(x) -> HasFur(x))", "all x.(Rainbow(x) -> HasFur(x))", "all x.(Rabbit(x) -> HasFur(x))", "all x.(Rabbit(x) -> HasFur(x))", "all x.(Bear(x) -> HasFur(x))", "all x.(Rabbit(x) -> HasFur(x))", "all x.(Rabbit(x) -> HasFur(x))", "all x.(Rabbit(x) -> HasFur(x))", "all x.(Rabbit(x) -> HasFur(x))", "all x.(Rabbit(x) -> HasFur(x))", "all x.(Rabbit(x) -> HasFur(x))", "all x.(Rabbit(x) -> HasFur(x))", "all x.(Rabbit(x) -> HasFur(x))", "all x.(Rabbit(x) -> HasFur(x))"]}
{"id": "folio_train_118", "nl": "Some pets are rabbits.", "fol": "exists x.(IsPet(x) & IsReptile(x))", "prediction": ["exists x.(Pet(x) & Rabbit(x))", "exists x.(Pet(x) & Rabbit(x))", "exists x.(Pet(x) & Rabbit(x))", "exists x.(Pet(x) & Rabbit(x))", "exists x.(Pet(x) & Rabbit(x))", "exists x.(Pet(x) & Rabbit(x))", "exists x.(Pet(x) & Rabbit(x))", "exists x.(Pet(x) & Rabbit(x))", "exists x.(Pet(x) & Rabbit(x))", "exists x.(Pet(x) & Rabbit(x))", "exists x.(Pet(x) & Rabbit(x))", "exists x.(Pet(x) & Rabbit(x))", "exists x.(Pet(x) & Rabbit(x))", "exists x.(Pet(x) & Rabbit(x))", "exists x.(Pet(x) & Rabbit(x))", "exists x.(Pet(x) & Rabbit(x))"]}
{"id": "folio_train_119", "nl": "Some pets do not have fur.", "fol": "exists x.(IsPet(x) & -HasFur(x))", "prediction": ["exists x.(Pet(x) & -HasFur(x))", "exists x.(Pet(x) & -HasFur(x))", "exists x.(Pet(x) & -HasFur(x))", "exists x.(Pet(x) & -HasFur(x))", "exists x.(Pet(x) & -HasFur(x))", "exists x.(Pet(x) & -HasFur(x))", "exists x.(Pet(x) & -HasFur(x))", "exists x.(Pet(x) & -HasFur(x))", "exists x.(Pet(x) & -HasFur(x))", "exists x.(Pet(x) & -HasFur(x))", "exists x.(Pet(x) & -HasFur(x))", "exists x.(Pet(x) & -HasFur(x))", "exists x.(Pet(x) & -HasFur(x))", "exists x.(Pet(x) & -HasFur(x))", "exists x.(Pet(x) & -HasFur(x))", "exists x.(Pet(x) & -HasFur(x))"]}
{"id": "folio_train_120", "nl": "All video applications are software.", "fol": "all x.(VideoApplication(x) -> SoftwareApplication(x))", "prediction": ["all x.(VideoApplication(x) -> Software(x))", "all x.(VideoApplication(x) -> Software(x))", "all x.(VisualApplication(x) -> Software(x))", "all x.(VideoApplication(x) -> Software(x))", "all x.(VideoApplication(x) -> Software(x))", "all x.(VideoApplication(x) -> Software(x))", "all x.(VideoApplication(x) -> Software(x))", "all x.(VideoApplication(x) -> Software(x))", "all x.(VideoApplication(x) -> Software(x))", "all x.(VideoApplication(x) -> Software(x))", "all x.(VideoApplication(x) -> Software(x))", "all x.(VideoApplication(x) -> Software(x))", "all x.(VideoApplication(x) -> Software(x))", "all x.(VioloApplication(x) -> Software(x))", "all x.(VideoApplication(x) -> Software(x))", "all x.(VideoApplication(x) -> Software(x))"]}
{"id": "folio_train_121", "nl": "All YouTube-related applications are video applications. ", "fol": "all x.(RelatedToYoutube(x) -> VideoApplication(x))", "prediction": ["all x.((YouTubeApplication(x) & RelatedTo(x,y)) -> VideoApplication(x))", "all x.(YouTubeApplication(x) -> VideoApplication(x))", "all x.(YouTubeApplication(x) -> VideoApplication(x))", "all x.((YouTubeApplication(x) & VideoApplication(x)) -> AppAllows(x))", "all x.(YouTubeApplication(x) -> VideoApplication(x))", "all x.(YouTubeApplication(x) -> VideoApplication(x))", "all x.((YoutubeApplication(x) & RelatedTo(x,y)) -> VideoApplication(y))", "all x.((YouTubeSearchingApplication(x) & VideoApplication(x)) -> VideoApplication(x))", "all x.((YouTubeApplication(x) & RelatedTo(x,youTube,YouTube)) -> VideoApplication(x))", "all x.(Usage(x) -> VideoApplication(x))", "all x.(YouTubeSearch(x) -> VideoApplication(x))", "all x.(YouTubeRelatedApplication(x) -> VideoApplication(x))", "all x.((YouTubeApplication(x) & VideosApplication(x)) -> VideoApplication(x))", "all x.(YouTubeApplication(x) -> VideoApplication(x))", "all x.(VideoApplication(x) -> HasVideoApplication(x))", "all x.(HasVideoApplication(x) -> YoutubeApplication(x))"]}
{"id": "folio_train_122", "nl": "An APP is either related to YouTube or Instagram.", "fol": "all x.(RelatedToYoutube(x) | RelatedToInstagram(x))", "prediction": ["all x.(App(x) -> (RelatedToYouTube(x) | RelatedTo Instagram(x)))", "exists x.(APP(x) & (RelatedToYoutube(x) | RelatedToInstagram(x)))", "all x.(App(x) -> (RelatedToYoutube(x) | RelatedToInstagram(x)))", "all x.(App(x) -> (BelongsToYoutube(x) | RelativeToInstagram(x)))", "all x.(APP(x) -> (RelatedTo(x,Y) | RelatedTo(x,X)))", "all x.(APP(x) -> (LikesYoutube(x) | LikesInstagram(x)))", "all x.(App(x) -> (RelatedToYouTube(x) | RelatedToInstagram(x)))", "all x.(App(x) -> (RelatedToYouTube(x) | RelatedToInstagram(x)))", "all x.(APP(x) -> (RelatedToYoutube(x) | RelatedToInstagram(x).))", "all x.(App(x) -> (RelatedToYoutube(x) | RelatedToInstagram(x)))", "all x.(App(x) -> (HasYouTube(x) | HasInstagram(x)))", "exists x.(App(x) & (RelatedToYoutube(x) | RelatedToInstagram(x)))", "all x.(APP(x) -> (RelatedToYoutube(x) | RelatedToInstagram(x)))", "all x.(APP(x) -> (RelatedToYoutube(x) | RelatedToInstagram(x)))", "all x.(APP(x) -> (RelatedToYouTube(x) | RelatedToInstagram(x)))", "all x.(APP(x) -> (Video(x) | Instagram(x)))"]}
{"id": "folio_train_123", "nl": "All Instagram is entertainment. ", "fol": "all x.(RelatedToInstagram(x) -> EntertainmentCategory(x))", "prediction": ["all x.(Instagram(x) -> Entertainment(x))", "all x.(Instagram(x) -> Entertainment(x))", "all x.(Instagram(x) -> Entertainment(x))", "all x.(Italy(x) -> Entertainment(x))", "all x.( Instagram(x) -> Entertainment(x))", "all x.(Instagram(x) -> Entertainment(x))", "all x.(Instagram(x) -> Entertainment(x))", "all x.(Is(x) -> Entertainment(x))", "all x.(Instagram(x) -> Entertainment(x))", "All x.(Instagram(x) -> Entertainment(x))", "all x.(Instagram(x) -> Entertainment(x))", "all x.(Instagram(x) -> Entertainment(x))", "all x.(Instagram(x) -> Entertainment(x))", "All x.(Instagram(x) -> Entertainment(x))", "all x.(Instagram(x) -> Entertainment(x))", "all x.(Improved(x) -> Entertainment(x))"]}
{"id": "folio_train_124", "nl": "All software is programmed. ", "fol": "all x.(SoftwareApplication(x) -> IsProgrammed(x))", "prediction": ["all x.(Software(x) -> Programmable(x))", "all x.(Software(x) -> Programmable(x))", "all x.(Software(x) -> Programmable(x))", "all x.(Software(x) -> Programmed(x))", "all x.(Software(x) -> Programmed(x))", "all x.(Software(x) -> Programmed(x))", "all x.(Software(x) -> Programmed(x))", "all x.(Software(x) -> Programmable(x))", "all x.(Software(x) -> Programmable(x))", "all x.(Software(x) -> Programmed(x))", "all x.(Software(x) -> Programmable(x))", "all x.(Software(x) -> Programmed(x))", "all x.(Software(x) -> Programmed(x))", "all x.(Software(x) -> Programmed(x))", "all x.(Software(x) -> Programmed(x))", "all x.(Software(x) -> Programmed(x))"]}
{"id": "folio_train_125", "nl": "All entertainments are interesting.", "fol": "all x.(EntertainmentCategory(x) -> IsInteresting(x))", "prediction": ["all x.(Entertainment(x) -> Interesting(x))", "all x.(Entertainment(x) -> Interesting(x))", "all x.(Entertainment(x) -> Interesting(x))", "all x.(Entertainment(x) -> Interesting(x))", "all x.(Entertainment(x) -> Interesting(x))", "all x.(Entertainment(x) -> Interesting(x))", "all x.(Entertainment(x) -> Interesting(x))", "all x.(Entertainment(x) -> Interesting(x))", "all x.(Entertainment(x) -> Interesting(x))", "all x.exists y.(Entertainment(x) & Interested(x))", "all x.(Entertainment(x) -> Interesting(x))", "all x.(Entertainment(x) -> Interesting(x))", "all x.(Entertainment(x) -> Interesting(x))", "all x.(Entertainment(x) -> Interesting(x))", "all x.(Entertainment(x) -> Interesting(x))", "all x.(Entertainment(x) -> Interesting(x))"]}
{"id": "folio_train_126", "nl": "If something is interesting, then it is good.", "fol": "all x.(IsInteresting(x) -> IsGood(x))", "prediction": ["all x.((Interesting(x) & Good(x)) -> SomethingGood(x))", "all x.((Interesting(x) & Good(x)) -> Interesting(x))", "all x.((Interesting(x) & Good(x)) -> Good(x))", "all x.(Interesting(x) -> Good(x))", "(interesting(x) -> Good(x))", "all x.(Interesting(x) -> Good(x))", "all x.(Interesting(x) -> Good(x))", "all x.(Interesting(x) -> Good(x))", "all x.((Interesting(x) & Good(x)) -> Interesting(x))", "all x.((Interesting(x) & Good(x)) -> Interesting(x))", "all x.(Interesting(x) -> Good(x))", "all x.(Interesting(x) -> Good(x))", "all x.((Interesting(x) & Good(x)) -> Interesting(x))", "all x.(Interesting(x) -> Good(x))", "all x.((Interesting(x) & Good(x)) -> Good(x))", "all x.((Interesting(x) & Good(x)) -> Interesting(x))"]}
{"id": "folio_train_127", "nl": "TikTok is not good.", "fol": "-IsGood(TikTok)", "prediction": ["all x.(TikTok(x) -> -Good(x))", "(-Good(TikTok))", "(TikTok) -> -Good(Tittok))", "(-Good(TikiTok)))", "(-Good(TikTok))", "IsTikTokGood(i)?", "(ProperTikTok(TikiTok) -> -Good(TikiTok))", "(-Good(TitkTok) -> Bad(TitkTok))", "(-Good(TikTok))", "(-Good(TitakTok))", "(-Good(TikTok))", "exists x.(TikTok(x) & -Good(x))", "(-Good(TikTok))", "(-Good(TikTok))", "(-Good(TikTok) -> Bad(TikTok))", "(-Good(TikTok)))"]}
{"id": "folio_train_128", "nl": "Tiktok is a program.", "fol": "IsProgrammed(TikTok)", "prediction": ["TiktokProgram(x)", "all x.(Tiktok(x) -> Program(x))", "(Program(Tikitok) & -Program(thiktok))", "all x y.((Tiktok(x) & Program(y)) ->.", "All x indian.(Thiktok(x) -> Program(x))", "all x.(TikikTak(x) -> Program(x))", "all x.(Tiktok(x) -> Program(x))", "all x.(Tiktok(x) -> Programm(x))", "Tiktok is a program.", "(Program(Tikik) & Program(Tikik))", "all x.(Tiktok(x) -> Program(x))", "all x.(Tikok(x) -> Program(x))", "all x.(Tiktok(x) -> Program(x))", "(Program(Tiktok) & Programme(Tiktok))", ",(Tiktok(t) & Program(x))", "all x.(Tiktok(x) -> Program(x))"]}
{"id": "folio_train_129", "nl": "Tiktok is either good or a program.", "fol": "(IsGood(TikTok) | IsProgrammed(TikTok))", "prediction": ["all x y.((Tikiktok(x) & Good(y)) | Program(y))", "all x.(Tiktok(x) -> (Good(x) | Program(x)))", "(Good(Tiktok) | Program(Titok))", "all x.(Tiktok(x) -> (Good(x) | Program(x)))", "(Good(Tiktok) | Program(Tiktok))", "all x.(Tikitok(x) -> (Good(x) | Program(x)))", "all x.(Tiktok(x) -> (Good(x) | Program(x)))", "all x.(Ticktok(x) -> (Good(x) | Program(x)))", "all x.(Tiktok(x) -> (Good(x) | Program(x)))", "exists x.(Tiktok(x) & Good(x) | Program(x))", "exists x.(Tikitok(x) & (Good(x) | Program(x))))", "(Good(Tictok) | Program(Tictok))", "(Program(Tikik) | Good(Tikik)))", "all x.(Tiktok(x) -> (Good(x) | Program(x)))", "all x.(Tiktok(x) -> (Good(x) | Program(x)))", "(Good(Tikik) | Program(Tikik))"]}
{"id": "folio_train_130", "nl": "Tiktok is not both related to youtube and a program.", "fol": "-(RelatedToYoutube(TikTok) & IsProgrammed(TikTok))", "prediction": ["(-(RelatedToYoutube(TikiOK) & RelationalToProgram(Tikiok)))", "is not relatedToYoutube(Tiktok) & -RelatedToProgram(Tiktok,Youtube)", "(DesiredToYoutube(Tiktok) & -RelatedToProgram(Titktok))", "-(RelatedToYoutube(Tiktok) & RelatedToProgram(Tiktok))", "(-(RelatedToYoutube(Titktok) & RelatedToProgram(Titktok)))", "(--(YoutubeRelated(Tikook) & ProgramRelated(Tikook)))", "(-(YoutubeRelated(Titktok) & ProgramRelated(Titktok)))", "(-(RelatedToYoutube(Tiktok) & RelatedToProgram(Tiktok)))", "all x.(Tikitok(x) -> (-RelatedToYoutube(x) & SimilarToProgram(x)))", "exists x.(Tikiktok(x) & -(RelatedToYoutube(x) & RelatedToProgram(x)))", "all x.(Tiktok(x) -> (-RelatedToYoutube(x) & RelatedToProgram(x)))", "all x.(Titktok(x) -> -(RelatedToYoutube(x) & RelatedToProgram(x)))", "(-(RelatedToYoutube(Ticktok) & RelatedToProgram(Ticktok)))", "(-RelatedToYoutube(Tiktok) & NotRelatedToProgram(Tiktok))", "all x.(Tikitok(x) -> -(RelatedToYoutube(x) & RelatedToProgram(x)))", "all x.(Ticktok(x) -> (-RelatedToYoutube(x) & ResponsiveToProgram(x)))"]}
{"id": "folio_train_131", "nl": "Tiktok is either related to youtube or a program.", "fol": "(RelatedToYoutube(TikTok) | IsProgrammed(TikTok))", "prediction": ["all x.(Titktok(x) -> (RelatedToYoutube(x) | RelatedToProgram(x)))", "all x y.((Titak(x) & (Youtube(y) | Program(y))) -> RelatedTo(x,y))", "all x.(Tiktok(x) -> (RelatedToYoutube(x) | RelatedToProgram(x)))", "(RelatedToYoutube(Tiktok) | RelatedToProgram(Tiktok))", "all x.(Tikitok(x) -> ((RelatedToYoutube(x) | RelatedToProgram(x))))", "all x.(Tikitok(x) -> (RelatedToYoutube(x) | Program(x)))", "all x.(Tiktok(x) -> (RelatedToYoutube(x) | RelatedToProgram(x)))", "all x.(Tiktok(x) -> (RelatedToYoutube(x) | RelatedToProgram(x)))", "all x.(Ticktok(x) -> (RelatedToYoutube(x) | RelatedToProgram(x)))", "all x.(Tikitok(x) -> (RelatedToYoutube(x) | RelatedToProgram(x)))", "all x.(Tikiktok(x) -> (RelatedToYoutube(x) | RelatedToProgram(x)))", "all x.(Tikitok(x) -> (RelatedToYoutube(x) | RelatedToProgram(x)))", "all x.(Tiktok(x) -> (RelatedToYoutube(x) | RelatedToProgram(x)))", "all x.(Tikiktok(x) -> (RelatedToYoutube(x) | RelatedToProgram(x)))", "all x.(Tiktok(x) -> (RelatedToYoutube(x) | Program(x)))", "all x.(TikiTown(x) -> (RelatedToYoutube(x) | RelatedToProgram(x)))"]}
{"id": "folio_train_132", "nl": "Ordinary is an unincorporated community.", "fol": "IsUnincorporatedCommunity(Ordinary)", "prediction": ["all x.(Ordinary(x) -> UnincorporatedCommunity(x))", "all x.(Ordinary(x) -> UnincorporatedCommunity(x))", "all x.(Ordinary(x) -> UnincorporatedCommunity(x))", "(UnincorporatedCommunity( Ordinary)", "all x.(Ordinary(x) -> UnincorporatedCommunity(x))", "all x.(Ordinary(x) -> (UnincorporatedCommunity(x) & Corporation(x)))", "all x.(Ordinary(x) -> UnincorporatedCommunity(x))", "Ordinary is an unincorporatedCommunity(d)", "all x.(Ordinary(x) -> UnincorporatedCommunity(x))", "all x.(Ordinary(x) -> UnincorporatedCommunity(x))", "all x.(Ordinary(x) -> UnincorporatedCommunity(x))", "all x.(Ordinary(x) -> UnincorporatedCommunity(x))", "all x.(Ordinary(x) -> UnincorporatedCommunity(x))", "all x.(Ordinary(x) -> UnincorporatedCommunity(x))", "all x.(Ordinary(x) -> UnincorporatedCommunity(x))", "Ordinary(ordinary) is a unincorporatedCommunity(or)"]}
{"id": "folio_train_133", "nl": "Located within Elliot County, Ordinary is on Kentucky Route 32.", "fol": "(LocatedIn(Ordinary,Elliotcounty) & LocatedOnRoute(Ordinary,Kentuckyroute32))", "prediction": ["LocatedInElphiotCounty(IncludedIn(In(In(Considerment,Elliot) County) - OrdinaryOnKentuckyRoute32(In(Considerment,Elliot))", "Ordinary is located within ElliotCounty,Ky.Route32.", "located within ElliotComound(Road32)", "Located Within ElliotCounty, Ordinary is on KentuckyRoute32.", "AffiliatedWithinElliotCounty, OrdinaryOnRoute32.", "exists x.(Ordinary(x) & ElliotCounty(x) & KentuckyRoute32(x))", "(LocatedWithinElliotCounty(Ordinary) & KentuckyRoute32(Ordinary))", "All x.(Ordinary(x) -> (LocatedInElliotCounty(x) & OnKentuckyRoute32(x)))", "(LocatedWithinElliotCounty(Ordinary) & OnKentuckyRoute32(Ordinary))", "(SituatedWithinElliotCounty(Normary) & LocatedOnKentuckyRoute32(Normary))", "all x.(Ordinary(x) -> (LocatedWithinElliotCounty(x) & LocatedOnKentuckyRoute32(x)))", "(LocatedInElliotCounty(Ordinary) & OnKentuckyRoute32(Ordinary))", "All x.(Ordinary(x) -> (LocatedInElliotCounty(x) & OnKentuckyRoute32(x)))", "(LocationWithinElliotCounty(Ordinary) & KentuckyRoute32(Ordinary))", "LocatedwithinElliotCountyElliotCountyOrdinaryOnKentuckyRoute32.", "(LocatedIn(Normary) & ElliotCounty(ElliotComtee,KentuckyRoute32))"]}
{"id": "folio_train_134", "nl": "Ordinary is located northwest of Sandy Hook.", "fol": "LocatedNorthwestOf(Ordinary,Sandyhook)", "prediction": ["Ordinary (Underground(sandyHook))", "Ordinary is located northwest of SandyHockle.", "Ordinary is located northwest of Sandy Hook.", "Ordinary (NorthWidewestOfSandyHook(or))", "Ordinary is located northwest of SandyHook(r) & NorthwestOther(r) & LocatedAt(a,s,w))", "All x.(Ordinary(x) -> SituatedNorthwestOfSandyHook(x))", "Ordinary is located northwest of SandyHook.", "Ordinary is located northwest of Sandy Hook.", "(NorthwestOfSandyHook(Original))", "(LocatedNorthwest(Ordinary,SandyHook))", "Situ\u00e9NorthwestOfSandyHook(Odornance)", "an hour.LocationNorthwestOfSandyHoot(p).", "Normal(ordinary) est situ\u00e9e northwest of SandyHook(ordinary)", "the Ordinary is located northwest of Sandy Hook (not near Sandy Hook))", "(LocatedNorthwestOfSandyHook(Ordinary))", "(NorthwestOfSandyHook(Ordinary))"]}
{"id": "folio_train_135", "nl": "There are no unincorporated communities along Kentucky Route 32.", "fol": "-exists x.(IsUnincorporatedCommunity(x) & LocatedOnRoute(x,Kentuckyroute32))", "prediction": ["-exists x.(UnincorporatedCommunity(x))", "-exists x,y,z.((KentuckyRoute32(x) & UnincorporatedCommunity(y)) -> Nonexistent(x,z))", "-exists x.(UnincorporatedCommunity(x) & AlongKentuckyRoute32(x))", "Exists x.(UnincorporatedCommunity(x) & LexingtonRoute32(x))", "There are no unincorporatedCommunities(KentuckyRoad32)", "-exists x.(UnincorporatedCommunity(x) & AlongKentuckyRoute32(x))", "Il n'exists aucune unincorporatedCommunity(n) & AlongRoute32(n))", "KentuckyRoute32.((UnincorporatedCommunity(x) & -UnincorporatedCommunity(x))", "-exists x.(UnincorporatedCommunity(x) & AlongKentuckyRoute32(x))", "-exists x.(UnincorporatedCommunity(x) & AlongKentuckyRoute32(x))", "(-exists x.(UnincorporatedCommunity(x) & LocatedAlongKentuckyRoad32(x)))", "there are no unincorporatedCommunities(KentuckyRoute32)", "-exists x.(UnincorporatedCommunity(x) & Along(x,Route32))", "-exists x.(UnincorporatedCommunity(x) & KentuckyRoute32(x))", "-exists x.(UnincorporatedCommunity(x) & AlongKentuckyRoute32(x))", "Exists x.(UnincorporatedCommunity(x) & Route32(x))"]}
{"id": "folio_train_136", "nl": "There is an unincorporated community in Elliot County.", "fol": "exists x.(IsUnincorporatedCommunity(x) & LocatedIn(x,Elliotcounty))", "prediction": ["exists x.(UnincorporatedCommunity(x) & ElliotCounty(x))", "exists x.(UnincorporatedCommunity(x) & ElliotCounty(x))", "exist x.exists y.(UnincorporatedCommunity(x,y) & ElliotCom(y))", "exists x.(UnincorporatedCommunity(x) & InElliotCounty(x))", "exists x.(UnincorporatedCommunity(x) & ElliotCounty(x))", "exists x.(UnincorporatedCommunity(x) & ElliotCounty(x))", "exists x.(UnincorporatedCommunity(x) & ElliotCounty(x))", "exists x.(UnincorporatedCommunity(x) & ElliotCounty(x))", "exists x.(UnincorporatedCommunity(x) & ElliotCountry(x))", "exists x.(UnincorporatedCommunity(x) & InElliotCounty(x))", "exists x.(UnincorporatedCommunity(x) & ElliotCounty(x))", "exists x.(UnincorporatedCommunity(x) & ElliotCounty(x))", "exists x.(UnincorporatedCommunity(x) & ElliotCountry(x))", "all x.(UnincorporatedCommunity(x) -> ElliotCounty(x))", "exists x.(UnincorporatedCommunity(x) & ElliotCounty(x))", "exists x.(UnincorporatedCommunity(x) & inElliotCounty(x))"]}
{"id": "folio_train_137", "nl": "All young adults go on a diet.", "fol": "all x.(IsYoungAdult(x) -> FollowsDiet(x))", "prediction": ["all x.((YoungAdult(x) & Diet(x)) -> GoesOn(x))", "all x.(YoungAdult(x) -> ThereOfDiet(x))", "all x.(YoungAdult(x) -> GoesOnDiet(x))", "all x.(YoungAdult(x) -> GoesOnDiet(x))", "all x.(YoungAdult(x) -> GoesOnDiet(x))", "all x.((YoungAdult(x) & Diet(x)) -> GoesOn(x))", "all x.(YoungAdult(x) -> GoesOnDiet(x))", "all x.(YoungAdult(x) -> GoesOnDiet(x))", "all x.(YoungAdult(x) -> GoesOnDiet(x))", "all x.(YoungAdult(x) -> GoesOnDiet(x))", "all x.(YoungAdult(x) -> GoesOnDiet(x))", "all x.(YoungAdult(x) -> GoesOnDiet(x))", "all x.(YoungAdult(x) -> GoesOnDiet(x))", "all x.(YearAdult(x) -> GoesOnDiet(x))", "all x.(YoungAdult(x) -> GoesOnDiet(x))", "all x.((YoungAdult(x) & Diet(x)) -> GoesOn(x))"]}
{"id": "folio_train_138", "nl": "All college students are young adults.", "fol": "all x.(IsCollegeStudent(x) -> IsYoungAdult(x))", "prediction": ["all x.(CollegeStudent(x) -> YoungAdult(x))", "all x.(CollegeStudent(x) -> YoungAdult(x))", "all x.(CollegeStudent(x) -> YoungAdult(x))", "all x.(CollegeStudent(x) -> YoungAdult(x))", "all x.(CollegeStudent(x) -> YoungAdult(x))", "all x.(CollegeStudent(x) -> YoungEndowed(x))", "all x.(CollegeStudent(x) -> YoungAdult(x))", "all x.(CollegeStudent(x) -> YoungAdult(x))", "all x.(CollegeStudent(x) -> YoungAdult(x))", "all x.(CollegeStudent(x) -> YoungAdult(x))", "all x.(CollegeStudent(x) -> YoungAdult(x))", "all x.(CollegeStudent(x) -> YoungAdult(x))", "all x.(CollegeStudent(x) -> YoungAdult(x))", "all x.(CollegeStudent(x) -> YoungAdult(x))", "all x.(CollegeStudent(x) -> YoungAdult(x))", "all x.(CollegeStudent(x) -> YoungAdult(x))"]}
{"id": "folio_train_139", "nl": "All Yale students are college students.", "fol": "all x.(IsYaleStudent(x) -> IsCollegeStudent(x))", "prediction": ["all x.(YaleStudent(x) -> CollegeStudent(x))", "all x.(PresbyterianStudent(x) -> CollegeStudent(x))", "all x.(Princess(x) -> CollegeStudent(x))", "all x.(YaleStudent(x) -> CollegeStudent(x))", "all x.(Student(x) -> CollegeStudent(x))", "all x.(YaleStudent(x) -> CollegeStudent(x))", "all x.(Student(x) -> CollegeStudent(x))", "all x.(YaleahStudent(x) -> CollegeStudent(x))", "all x.(YaleStudent(x) -> CollegeStudent(x))", "all x.(YaleahStudent(x) -> CollegeStudent(x))", "all x.( YaleStudent(x) -> CollegeStudent(x))", "all x.(YaleStudent(x) -> CollegeStudent(x))", "ALL TM.(Student(TM) -> CollegeStudent(TM))", "all x.(NewYorkStudent(x) -> CollegeStudent(x))", "all x.(YaleStudent(x) -> CollegeStudent(x))", "all x.(Student(x) -> CollegeStudent(x))"]}
{"id": "folio_train_140", "nl": "Someone is either a Yale student or a Harvard student.", "fol": "all x.(IsYaleStudent(x) | IsHarvardStudent(x))", "prediction": ["all x.((Student(x) & YaleStudent(x)) | HarvardStudent(x))", "exists x.(Student(x) & (YaleStudent(x) | HarvardStudent(x)))", "(exists x.(Student(x) & Yale(x)) | exists y.(Student(y) & Harvard(y))))", "all x.(Student(x) -> (JewishStudent(x) | HarvardStudent(x)))", "all x.(Student(x) -> (YamahaStudent(x) | HarvardStudent(x)))", "exists x.(Student(x) & (YaleStudent(x) | HarvardStudent(x)))", "exists x.(Student(x) & YaleStudent(x) & HarvardStudent(x))", "all x.(Student(x) -> (ChaseVanishStudent(x) | HarvardStudent(x)))", "all x.((Student(x) & YaleStudent(x)) | HarvardStudent(x))", "exists x.(Student(x) & (YaleStudent(x) | HarvardStudent(x)))", "all x.((Student(x) & Yale(x) | Harvard(x)) -> Student(x))", "exists x.(Student(x) & (YaleStudent(x) | HarvardStudent(x)))", "all x.(Name(x) -> (YaleStudent(x) | HarvardStudent(x)))", "all x.(ViaYushuStudent(x) | ViaHarvardStudent(x))", "exists x.(Student(x) & ( YaleStudent(x) | HarvardStudent(x)))", "all x.((LakeStudent(x) | HarvardStudent(x)) -> InThisStandard(x))"]}
{"id": "folio_train_141", "nl": "All Harvard students are diligent.", "fol": "all x.(IsHarvardStudent(x) -> IsDiligent(x))", "prediction": ["all x.(HarvardStudent(x) -> Diligent(x))", "all x.(HarvardStudent(x) -> Diligent(x))", "all x.((Student(x) & Harvard(x)) -> Diligent(x))", "all x.(Researcher(x) -> Diligent(x))", "all x.(HarvardStudent(x) -> Diligent(x))", "all x.(HarvardStudent(x) -> Diligent(x))", "all x.( HarvardStudent(x) -> Diligent(x))", "ALL THOUGHTSOCIOUS(HarvardStudent(th) -> Diligent(th))", "all x.(HarvardStudent(x) -> Diligent(x))", "all x.(HarvardStudent(x) -> Diligent(x))", "all x.(HarvardStudent(x) -> Diligent(x))", "all x.(HarvardStudent(x) -> Disciplined(x))", "all x.((Student(x) & Harvard(x)) -> Diligent(x))", "all x.(HarvardStudent(x) -> Diligent(x))", "all x.(HarvardStudent(x) -> Diligent(x))", "all x.(HubbellStudent(x) -> Diligent(x))"]}
{"id": "folio_train_142", "nl": "If Susan is a Harvard student, then she is a young adult.", "fol": "(IsHarvardStudent(Susan) -> IsYoungAdult(Susan))", "prediction": ["all x.((Student(x) & Harvard(x)) -> YoungAdult(x))", "all x.((Student(x) & Harvard(x)) -> YoungAdult(x))", "all x.((Student(x) & Harvard(x)) -> YoungAdult(x))", "all x.((Student(x) & Harvard(x)) -> YoungAdult(x))", "all x.((Student(x) & Harvard(x)) -> YoungAdult(x))", "all x.((Student(x) & Harvard(x)) -> YoungAdult(x))", "all x.((Student(x) & Harvard(x)) -> YoungAdult(x))", "all x.((Student(x) & Harvard(x)) -> YoungAdult(x))", "all x.((Shannon(x) & HarvardStudent(x)) -> YoungAdult(x))", "all x.((Student(x) & Harvard(x)) -> YoungAdult(x))", "all x.((Student(x) & Harvard(x)) -> YoungAdult(x))", "all x.(HarvardStudent(x) -> YoungAdult(x))", "all x.((Student(x) & Harvard(x)) -> YoungAdult(x))", "all x.((Student(x) & Harvard(x)) -> YoungAdult(x))", "all x.((Student(x) & Harvard(x)) -> YoungAdult(x))", "all x.((Student(x) & Harvard(x)) -> YoungAdult(x))"]}
{"id": "folio_train_143", "nl": "If Susan is a Yale student, then she does not go on a diet.", "fol": "(IsYaleStudent(Susan) -> -FollowsDiet(Susan))", "prediction": ["all x.((Susan(x) & YaleStudent(x)) -> -Diet(x))", "all x.((Student(x) & Yale(x)) -> -Diet(x))", "all x.((Susan(x) & YaleStudent(x)) -> -Diet(x))", "all x.((Susan(x) & YaleStudent(x)) -> -Diet(x))", "all x.((Student(x) & Yale(x)) -> -Diet(x))", "all x.((Susan(x) & YaleStudent(x)) -> -Diet(x))", "all x.((Student(x) & Yale(x)) -> -Diet(x))", "all x.((YaleStudent(x) & SusanNawis,x)) -> -Diet(x))", "all x.((Susan(x) & YaleStudent(x)) -> -Diet(x))", "all x.((Susan(x) & YaleStudent(x)) -> -Diet(x))", "all x.((Student(x) & Yale(x)) -> -Diet(x))", "all x.((Susan(x) & YaleStudent(x)) -> -Diet(x))", "all x.((Student(x) & Yale(x)) -> -Diet(x))", "all x.((Subject(x) & YaleStudent(x)) -> -Diet(x))", "all x.((Student(x) & Yale(x)) -> -Diet(x))", "all x.((Susan(x) & YaleStudent(x)) -> -Diet(x))"]}
{"id": "folio_train_144", "nl": "Susan is a college student.", "fol": "IsCollegeStudent(Susan)", "prediction": ["(CollegeStudent(Susan) & CollegeStudent(Susan))", "Susan is a college student.", "all x.(CollegeStudent(x) -> Susan(x))", "all x.(Susan(x) -> CollegeStudent(x))", "Susan is college student.", "Susan is a college student.", "all x.((Susan(x) & CollegeStudent(x)) -> Studies(x))", "Susan is a college student.", "all x.(CollegeStudent(x) -> SusanC.(Susan)))", "Susan ist CollegeStudent(Susan)", "all x.(SheIs(x) -> CollegeStudent(x))", "(CollegeStudent(Susan)", "-CollegeStudent(Susan)", "Susan is CollegeStudent(e)", "all x.(Student(x) -> CollegeStudent(x))", "Susan is a college student."]}
{"id": "folio_train_145", "nl": "Susan goes on a diet and is diligent.", "fol": "(FollowsDiet(Susan) & IsDiligent(Susan))", "prediction": ["(GoesOnDiet(Susan) & Diligent(Susan))", "all x.(Susan(x) -> (GoesOnDiet(x) & Diligent(x)))", "all x.(Susan(x) -> (GivesDiet(x) & Diligent(x)))", "all x.(Susan(x) -> (Diet(x) & Diligent(x)))", "Susan goes onDiet(Sophie) -> Diligent(Susan))", "all x.(Susan(x) -> (GoesOnDiet(x) & Diligent(x)))", "all x.((Susan(x) & Diet(x)) -> Diligent(x))", "(goesOnDiet(Susan) & Diligent(Susan))", "all x.(Susan(x) -> (GoesOnDiet(x) & Diligent(x)))", "(GoesOnDiet(Susan) & Diligent(Susan))", "all x.(Susan(x) -> (GoesOnDiet(x) & Diligent(x)))", "all x.((Susan(x) & Diet(x)) -> Diligent(x))", "all x.(Susan(x) -> (GoesOnDiet(x) & Diligent(x)))", "all x.(DisciplineDiverse(x) -> (SusanDiet(x) & GoesOn(x)))", "all x.((Susan(x) & Diet(y)) -> Diligent(x))", "all x.(Susan(x) -> (Diet(x) & Diligent(x)))"]}
{"id": "folio_train_146", "nl": "Susan does not go on a diet and is diligent.", "fol": "(-FollowsDiet(Susan) & IsDiligent(Susan))", "prediction": ["all x.(Susan(x) -> (-GoesOnDiet(x) & Diligent(x)))", "all x.((Susan(x) & -Diet(x)) -> Diligent(x))", "(-GoesOnDiet(Susan) & Diligent(Susan))", "(-Diet(Susan) & Diligent(Susan))", "all x.(Susan(x) -> (-Diet(x) & Diligent(x)))", "all x.((Susan(x) & -Diet(x)) -> Diligent(x))", "(-Diet(Sophie) & Diligent(Susan))", "all x.(Susan(x) -> (-GoesOnDiet(x) & Diligent(x)))", "all x.((Susan(x) & -Diet(x)) -> Diligent(x))", "(-GoesOnDiet(Susan) & Diligent(Susan))", "(-GoesOnDiet(Susan) & Diligent(Susan))", "all x.((Susan(x) & -Diet(x)) -> Diligent(x))", "(-GoesOnDiet(Susan) & Diligent(Susan))", "all x.((Susan(x) & -Diet(x)) -> Diligent(x))", "(-Diet(Susan) & Disciplined(Susan))", "(NeverDiet(Susan) & Diligent(Susan))"]}
{"id": "folio_train_147", "nl": "Vic DiCara plays guitar and bass.", "fol": "(PlaysInstrument(Vicdicara,Guitar) & PlaysInstrument(Vicdicara,Bass))", "prediction": ["(PlaysGuitar(VictorDiCara) & PlaysBass(VictorDiCara))", "all x.(VicDiCara(x) -> (PlaysGuitar(x) & PlaysBass(x)))", "(PlaysGuitar(Victor) & PlaysBass(Victor))", "(-VicDiCaraPlaysGuitar(Vic) & PlaysBass(Vic))", "(PlaysGuitar(DeCarnia) & PlaysBass(DiCara))", "(playsGuitar(vicDiCara) & PlaysBass(vicDiCara))", "(PlaysGuitar(vic.DiCara) & PlaysBass(vic))", "Vic DiCara playsGuitarAndBass(Vic)", "(PlaysGuitar(vic(vic) & PlaysBass(vic))", "(PlaysGuitar(VicDiCara) & PlaysBass(VicDiCara))", "(PlaysGuitar(vicDiCara,guitar) & PlaysBass(vicDiCara,bass))", "(playsGuitar(vic) & PlaysBass(vic))", "(PlaysGuitar(vic) & PlaysBass(vic))", "exists x.(VicDiCara(x) & PlaysGuitar(x) & PlaysBass(x))", "(PlaysGuitar(Victor DiCara,Guitar) & PlaysBass(Victor DiCara,Guitar))", "(plays(VicDiCara,Guitar) & Plays(VicDiCara,Bass))"]}
{"id": "folio_train_148", "nl": "The only style of music Vic DiCara plays is punk music.", "fol": "-exists x.(PlaysMusicStyle(Vicdicara,Punk) & PlaysMusicStyle(Vicdicara,x))", "prediction": ["all x.((MusicStyle(x) & VicDiCaraPlays(x)) -> PunkMusic(x))", "all x.((MusicStyle(x) & VicDiCaraPlays(x)) -> punk(x))", "all x.((MusicStyle(x) & VicDiCaraPlays(x)) -> PunkMusic(x))", "all x.((MusicStyle(x) & VicDiCaraPlays(x)) -> PunkMusic(x))", "all x.((MusicStyle(x) & Plays(x,PunkMusic)) -> VicDiCaraPlays(x))", "all x!((MusicStyle(x) & VicDiCaraPlays(x)) -> PunkMusic(x))", "all x.((Music Style(x) & VicDiCaraPlays(x)) -> Punk(x))", "exists x.(VicDiCaraPunk(x) -> Plays(x))", "all x.((MusicStyle(x) & VicDiCaraPlays(x)) -> Punk(x))", "all x.((MusicStyle(x) & VicDiCaraPlays(x)) -> PunkMusic(x))", "all x.((MusicStyle(x) & VicDiCaraPlays(x)) -> (PunkMusic(x) | PopMusic(x)))", "Esp\u00e8ce(vicDoCara) & StyleOfMusic(vicDiCara) -> Play(vicPunkMusic))", "all x y.((ConvicDiCara(x) & MusicStyle(y)) -> PlaysPunkMusic(x,y))", "all x.((MusicStyle(x) & VicDiCaraPlays(x)) -> PunkMusic(x))", "all x.((MusicStyle(x) & VicDiacaraPlays(x)) -> Punk(x))", "all x.(PunkMusic(x) -> Plays(x))"]}
{"id": "folio_train_149", "nl": "Vic DiCara played in the band Inside Out.", "fol": "PlayedInBand(Vicdicara,InsideOut)", "prediction": ["(PlayedInInsideOut(VictorDiCara) | PlayedInInsideOut(VictorDiCara))", "Vic DiCara played intheBandInsideOut(vic,x))", "all x.(Movie(x) -> -InsideOut(x))", "the band InsideOut(vicDiCara)", "Vic DiCara played in the band InsideOut.", "Victoria DiCara played in InsideOut.", "Vic DiCara played in the band InsideOut(vic.diCara)", "(Live(vicDiCara) -> PlayedInInsideOut(vic))", "(PlayedInInsideOut(VicDiCara) & InsideOut(VicDiCara))", "all x.(VicDiCara(x) -> PlayedInInsideOut(x))", "(InsideOut) -> PlayedIn(VicDiCara,Band))", "(InsideOut(VicDiCara) & PlayedIn(VicDiCara))", "(PlayedInInsideOut(VicDiCara,InsideOut))", "all x y.((VictorDiCara(x) & Band(y)) -> PlayedIn(x,y))", "(InsideOut(VictorDiCara) -> PlayedIn(VicDiCara,InsideOut))", "(IinsideOut(vicDiCara) -> PlayedIn(vic,DiCara,Itself))"]}
{"id": "folio_train_150", "nl": "Inside Out was a punk band.", "fol": "PunkBand(InsideOut)", "prediction": ["InsideOut (punkband)", "InsideOut(insideout) -> PunkBand(insideout))", "InsideOut (PunkBand)", "InsideOut (PunkBand)", "InsideOut.com was a PunkBand.", "InsideOut was a punkband.", "InsideOut was a punk band.", "InsideOut was a punk band.", "InsideOut was a punk band.", "All x.(InsideOut(x) -> PunkBand(x))", "InsideOut was a punkband.", "ThroughoutOut.com was a punk band.", "InsideOut was a punk band.", "WithinOut (PunkBand)", "All x.(InsideOut(x) -> Punk(x))", "InsideOut (PunkBand)"]}
{"id": "folio_train_151", "nl": "A musician of Inside Out plays bass.", "fol": "exists x.(PlayedInBand(x,InsideOut) & PlaysInstrument(x,Bass))", "prediction": ["all x y.((Musician(x) & InsideOut(y) & Bass(y)) -> Plays(x,y))", "all x y.((Musician(x) & InsideOut(y)) -> PlaysBass(x,y))", "all x.((Musician(x) & InsideOut(x)) -> PlaysBass(x))", "all x.(InsideOutMusician(x) -> PlaysBass(x))", "all x.((Musician(x) & InsideOut(x)) -> PlaysBass(x))", "all x.(InsideOut(x) -> PlaysBass(x))", "all x.(InsideOutMusician(x) -> PlaysBass(x))", "all x.(InsideOut(x) -> PlaysBass(x))", "exists x.(Musician(x) & InsideOut(x) & PlaysBass(x))", "(Musician(InsideOut) & PlaysBass(InsideOut))", "all x.((Musician(x) & InsideOut(x)) -> PlaysBass(x))", "all x y.((Musician(x) & InsideOut(y)) -> PlaysBass(x,y))", "exists x.(Musician(x) & InsideOut(x) & PlaysBass(x))", "all x.(InsideOutMusician(x) -> PlaysBass(x))", "all x.(InsideOutMusician(x) -> PlaysBass(x))", "(InsideOutMusician(IslandOutMusician) & PlaysBass(IslandOutMusician))"]}
{"id": "folio_train_152", "nl": "All athletes are good at sports.", "fol": "all x.(IsAthlete(x) -> IsGoodAtSports(x))", "prediction": ["all x.(Athlete(x) -> GoodAtSports(x))", "all x.(Athlete(x) -> GoodAtSport(x))", "all x.(Athlete(x) -> GoodAtSport(x))", "all x.(Athlete(x) -> GoodAtSport(x))", "all x.(Athlete(x) -> GoodAtSport(x))", "all x.(Athlete(x) -> GoodAtSport(x))", "all x.(Athlete(x) -> GoodAtSports(x))", "all x.(Athlete(x) -> GoodAt(x,sports))", "all x.(Athlete(x) -> GoodAtSport(x))", "all x.(Athlete(x) -> GoodAtSport(x))", "all x.(Athlete(x) -> GoodAtSports(x))", "all x.(Athlete(x) -> GoodAtSport(x))", "all x.(Athlete(x) -> GoodAtSport(x))", "all x.(Athlete(x) -> GoodAtSports(x))", "all x.(Athlete(x) -> GoodAtSport(x))", "all x.(Athlete(x) -> GoodAtSport(x))"]}
{"id": "folio_train_153", "nl": "All Olympic gold medal winners are good athletes.", "fol": "all x.(IsOlympicGoldMedalWinner(x) -> IsAthlete(x))", "prediction": ["all x.(OlympicGoldMedalWinner(x) -> GoodAthlete(x))", "all x.(OlympicGoldMedalWinner(x) -> GoodAthlete(x))", "all x.(OlympicGoldMedalWinner(x) -> GoodAthlete(x))", "all x.(OlympicGoldMedalWinner(x) -> GoodAthlete(x))", "all x.(OlympicGoldMedalWinner(x) -> GoodAthlete(x))", "all x.(OlympicGoldMedalWinner(x) -> GoodAthlete(x))", "all x.(OlympicGoldMedalWinner(x) -> GoodAthlete(x))", "all x.(OlympicGoldMedalWinner(x) -> GoodAthlete(x))", "all x.(OlympicGoldMedalWinner(x) -> GoodAthlete(x))", "all x.(OlympicGoldMedalWinner(x) -> GoodAthlete(x))", "all x.(OlympicGoldMedalWinner(x) -> GoodAthlete(x))", "all x.(OlympicGoldMedalWinner(x) -> GoodAthlete(x))", "all x.(GolfGoldMedalWinner(x) -> GoodAthlete(x))", "all x.((OlympicGoldMedalWinner(x) & GoodAthlete(x)) -> GoodAthlete(x))", "all x.(OlympicGoldMedalWinner(x) -> GoodAthlete(x))", "all x.(OlympicGoldMedalWinner(x) -> GoodAthlete(x))"]}
{"id": "folio_train_154", "nl": "No scientists are good at sports.", "fol": "all x.(IsScientist(x) -> -IsGoodAtSports(x))", "prediction": ["-exists x.(Scientist(x) & GoodAtSport(x))", "-exists x.(Scientist(x) & GoodAtSports(x))", "-exists x.(Scientist(x) & GoodAtSport(x))", "-exists x.(Scientist(x) & GoodAtSport(x))", "-exists x.(Scientist(x) & GoodAtSport(x))", "-exists x.(Scientist(x) & GoodAtSports(x))", "-exists x.(Scientist(x) & GoodAtSport(x))", "-exists x.(Scientist(x) & GoodAtSport(x))", "-exists x.(Scientist(x) & GoodAtSport(x))", "-> -Scientist()", "-exists x.(Scientist(x) & GoodAtSport(x))", "-exists x.(Scientist(x) & GoodAtSport(x))", "-exists x.(Scientist(x) & GoodAtSport(x))", "-exists x.(Scientist(x) & GoodAtSports(x))", "all x.(Scientist(x) -> -GoodAtSport(x))", "-exists x.(Scientist(x) & GoodAtSports(x))"]}
{"id": "folio_train_155", "nl": "All Nobel laureates are scientists.", "fol": "all x.(IsNobelLaureate(x) -> IsScientist(x))", "prediction": ["all x.(NobelLaureate(x) -> Scientist(x))", "all x.(Descartes(x) -> Scientist(x))", "all x.(NobelLaureate(x) -> Scientist(x))", "all x.(NobelLaureate(x) -> Science(x))", "all x.(NobelLaureate(x) -> Scientist(x))", "all x.(NobelLaureate(x) -> Scientist(x))", "all x.(NobelLaureate(x) -> Scientist(x))", "all x.(NovalleLaureate(x) -> Scientist(x))", "all x.(PrincipalLaureate(x) -> Scientist(x))", "all x.(NobelLaureate(x) -> Scientist(x))", "all x.(NobelLaureate(x) -> Scientist(x))", "all x.(NobelLaureate(x) -> Scientist(x))", "all x.(NobelLaureate(x) -> Scientist(x))", "all x.(NobelLaureate(x) -> Scientist(x))", "all x.(NobelLaureate(x) -> Scientist(x))", "all x.(NobelLaureate(x) -> Scientist(x))"]}
{"id": "folio_train_156", "nl": "Amy is good at sports or Amy is an Olympic gold medal winner.", "fol": "(IsGoodAtSports(Amy) | IsOlympicGoldMedalWinner(Amy))", "prediction": ["(Likes(Amy,Rice,Sports)) | (IsGoodAt(Amy,Sports) & IsOlympicGoldMedalWinner(Amy,Rice))))", "(all x.(Kat(x) -> GoodAtSports(x)) | (Kat(x) -> OlympicGoldMedalWinner(x))))", "(all x y.((Amy(x) & Sports(y)) -> (GoodAt(x,y) | OlympicGoldMedalWinner(x,y))))", "(exists x.(Amy(x) & (GoodAtSports(x) | OlympicGoldMedalWinner(x))))", "all x.(Amy(x) -> (GoodAtSports(x) | OlympicGoldMedalWinner(x)))", "(all x.(Amy(x) -> GoodAtSports(x)) | (Amy(x) -> OlympicGoldMedalWinner(x))))", "(exists x.(Amy(x) & (GoodAtSports(x) | OlympicGoldMedalWinner(x))))", "exists x.(Amy(x) & (GoodAtSports(x) | OlympicGoldMedalWinner(x))))", "(all x.(Amy(x) -> (GoodAtSports(x) | OlympicGoldMedalWinner(x))))", "((Amy(a) & GoodAtSports(a)) | OlympicGoldMedalWinner(a)))", "(exists x.(Amy(x) & (GoodAtSports(x) | OlympicGoldMedalWinner(x))))", "exists x.(Amy(x) & (GatherAtSports(x) | OlympicGoldMedalWinner(x))))", "(all x.((Amy(x) & GoodAtSports(x)) | (Amy(x) & OlympicGoldMedalWinner(x))))", "(all x.(Amy(x) -> GoodAtSports(x)) | (Amy(x) -> OlympicGoldMedalWinner(x))))", "(all x.(Amy(x) -> GoodAtSports(x)) | (Amy(x) -> OlympicGoldMedalWinner(x))))", "(all x.(Amaze(x) -> (GoodAtSports(x) | OlympicGoldMedalWinner(x))))"]}
{"id": "folio_train_157", "nl": "If Amy is not a Nobel laureate, then Amy is not an Olympic gold medal winner.", "fol": "(-IsNobelLaureate(Amy) -> -IsOlympicGoldMedalWinner(Amy))", "prediction": ["all x.((Amy(x) & -Novalloreate(x)) -> -OlympicGoldMedalWinner(x))", "all x.((Amy(x) & -NobelLaureate(x)) -> -OlympicGoldMedalWinner(x))", "all x.((Amy(x) & -Novalureate(x)) -> -OlympicGoldMedalWinner(x))", "all x.((Amy(x) & -NobelLaureate(x)) -> -OlympicGoldMedalWinner(x))", "all x.((Amy(x) & -NobelLaureate(x)) -> NoOlympicGoldMedalWinner(x))", "all x.((Amy(x) & -NobelLaureate(x)) -> -OlympicGoldMedalWinner(x))", "all x.((Amy(x) & -NobelLaureate(x)) -> -OlympicGoldMedalWinner(x))", "all x.((Amy(x) & -NobelLaureate(x)) -> -OlympicGoldMedalWinner(x))", "all x.((Amy(x) & -NobelLaureate(x)) -> -OlympicGoldMedalWinner(x))", "all x.((Amy(x) & -NobelLaureate(x)) -> -OlympicGoldMedalWinner(x))", "all x.((Amy(x) & -NobelLaureate(x)) -> -OlympicGoldMedalWinner(x))", "all x.((Amy(x) & -NobelLaureate(x)) -> -OlympicGoldMedalWinner(x))", "all x.((NobelLaureate(x) & -BetweenNobelLaureates(x)) -> -OlympicGoldMedalWinner(x))", "all x.((SameAmy(x) & -Novaleylaureate(x)) -> -OlympicGoldMedalWinner(x))", "all x.((Amy(x) & -NobelLaureate(x)) -> -OlympicGoldMedalWinner(x))", "all x.((Amy(x) & -NobelLaureate(x)) -> -OlympicGoldMedalWinner(x))"]}
{"id": "folio_train_158", "nl": "Amy is an athlete.", "fol": "IsAthlete(Amy)", "prediction": ["all x.(Athlete(x) -> Amy(x))", "(Athlete(Amy))", "Amy is an athlete.", "(Athlete(Amy) & Sportsperson(Amy))", "Amy est Athlete.", "All x.(Athlete(x) -> AmyFollows(x))", "Amy ist Athlete(Amy)", "Amelie(Amy)", "Amy ist Athlete(ama)", "Amy is a professional runner.", "Amy is analyst.", "(Athlete(amber)", "Amy is an athlete.", "Amy is an Athlete.", "(Athlete(Amy) -> Athlete(Amy)))", "Amy is Athlete(a)"]}
{"id": "folio_train_159", "nl": "Amy is neither a scientist nor an Olympic gold medal winner.", "fol": "(-IsScientist(Amy) & -IsOlympicGoldMedalWinner(Amy))", "prediction": ["(-(Scientist(Amy) | OlympicGoldMedalWinner(Amy)))", "all x.(Amy(x) -> (-Scientist(x) & -OlympicGoldMedalWinner(x)))", "-(Scientist(amy) | OlympicGoldMedalWinner(amy)))", "(-(Scientist(Amy) & -OlympicGoldMedalWinner(Amy)) | (Scientist(Amy) & -OlympicGoldMedalWinner(Amy))))", "(-(Physicist(Amy) | OlympianGoldMedalWinner(Amy)))", "(-(Scientist(Amy) | OlympicGoldMedalWinner(Amy)))", "-(Scientist(Amy) & -OlympicGoldMedalWinner(Amy))", "(-(Scientist(Amy) | OlympicGoldMedalWinner(Amy)))", "-(Scientist(Amy) | OlympianGoldMedalWinner(Amy)))", "Amy is -(Scientist(Amy) & -OlympicGoldMedalWinner(Amy)))", "all x.(Amy(x) -> -> (-Scientist(x) & -OlympicGoldMedalWinner(x)))", "-(Scientist(amy) | OlympicGoldMedalWinner(amy)))", "all x.(Amy(x) -> (-Scientist(x) & -OlympicGoldMedalWinner(x)))", "(-(Scientist(Amy) | OlympicGoldMedalWinner(Amy)))", "-(Scientist(a) & -OlympicGoldMedalWinner(a))", "-(Scientist(Amy) | OlympicGoldMedalWinner(Amy))"]}
{"id": "folio_train_160", "nl": "If Amy is not an Olympic gold medal winner, then Amy is a Nobel laureate.", "fol": "(-IsOlympicGoldMedalWinner(Amy) -> IsNobelLaureate(Amy))", "prediction": ["all x y.((Amy(x) & -OlympicGoldMedalWinner(x,y) & -OlympicGoldMedalWinner(y)) -> NobelLaureate(x))", "all x.((Amy(x) & -OlympicGoldMedalWinner(x)) -> NobelLaureate(x))", "all x.((Amy(x) & -OlympicGoldMedalWinner(x)) -> NobelLaureate(x))", "all x.((Amy(x) & -OlympicGoldMedalWinner(x)) -> NobelLaureate(x))", "all x.((Amy(x) & -OlympicGoldMedalWinner(x)) -> NobelLaureate(x))", "all x.((Amy(x) & -OlympicGoldMedalWinner(x)) -> NobelLaureate(x))", "(-OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy))", "all x.((Amy(x) & -OlympicGoldMedalWinner(x)) -> NobelLaureate(x))", "all x.((Amy(x) & -OlympicGoldMedalWinner(x)) -> NobelLaureate(x))", "all x.((Amy(x) & -OlympicGoldMedalWinner(x)) -> NobelLaureate(x))", "all x.((Amy(x) & -OlympicGoldMedalWinner(x)) -> NobelLaureate(x))", "all x.((Amy(x) & -OlympicGoldMedalWinner(x)) -> NobelLaureate(x))", "all x.((Amy(x) & -OlympicGoldMedalWinner(x)) -> NobelLaureate(x))", "all x.((Amy(x) & -OlympicGoldMedalWinner(x)) -> NobelLaureate(x))", "all x.(((Amy(x) & -OlympicGoldMedalWinner(x) & -OlympicGoldMedalWinner(x)) -> NobelLaureate(x))", "(-OlympicGoldMedalWinner(Amy) -> NobelLaureate(Amy))"]}
{"id": "folio_train_161", "nl": "All fruits with the color red contain a large amount of vitamin C.", "fol": "all x.(FruitsWithColorRed(x) -> ContainsLargeAmountOfVitaminC(x))", "prediction": ["all x.((Fruit(x) & ColorRed(x)) -> ContainsLargeAmountOfVitaminC(x))", "all x.((Fruit(x) & ColorRed(x)) -> LargeAmountOfVitaminC(x))", "all x.((Fruit(x) & ColorRed(x)) -> ContainsLargeAmountOfVitaminC(x))", "all x.((Fruit(x) & ColorRed(x)) -> LargeAmountOfVitaminC(x))", "all x.((Fruit(x) & ColorRed(x)) -> LargeAmountOfVitaminC(x))", "all x and red(x) -> (ContainsVitaminC(x) & LargeAmount(x)))", "all x.((Fruit(x) & ColorRed(x)) -> ContainsLargeAmountOfVitaminC(x))", "all x.((Fruit(x) & HasColorRed(x)) -> ContainsLargeAmountOfVitaminC(x))", "all x.((Fruit(x) & ColorRed(x)) -> LargeAmountOfVitaminC(x))", "all x.((Fruit(x) & ColorRed(x)) -> LargeAmountOfVitaminC(x))", "all x.((Fruit(x) & ColorRed(x)) -> ContainsLargeAmountOfVitaminC(x))", "all x.((Fruit(x) & ColorRed(x)) -> LargeAmountOfVitaminC(x))", "all x.((Fruit(x) & ColorRed(x)) -> LargeAmountOfVitaminC(x))", "all x.((Fruit(x) & RedColor(x)) -> LargeAmountOfVitaminC(x))", "all x.((Fruit(x) & ColorRed(x)) -> (ContainsLargeAmountOfVitaminC(x)))", "all x.((Fruit(x) & ColorRed(x)) -> LargeAmountOfVitaminC(x))"]}
{"id": "folio_train_162", "nl": "All apples are fruits with the color red.", "fol": "all x.(IsApple(x) -> FruitsWithColorRed(x))", "prediction": ["all x.(Apple(x) -> (Fruit(x) & Red(x)))", "all x.(Apple(x) -> FruitWithColorRed(x))", "all x.(Apple(x) -> (Fruit(x) & ColorRed(x)))", "all x.(Apple(x) -> (Fruit(x) & Red(x)))", "all x.(Apple(x) -> Fruit(x,orange))", "all x.(Apple(x) -> FruitWithRedColor(x))", "all x.(Apple(x) -> (Fruit(x) & ColorRed(x)))", "all x.(Apple(x) -> Fruit(x) & Color(x,red))", "all x.(Apple(x) -> Fruit(x) & ColorRed(x))", "all x.(Apple(x) -> FruitWithColourRed(x))", "all x.(Apple(x) -> Fruit(x) & ColorRed(x))", "all x.(Apple(x) -> Flesh(x))", "all x.(Apple(x) -> Fruit(x) & ColorRed(x))", "all x.(Apple(x) -> FruitWithColorRed(x))", "all x.(Apple(x) -> Fruit(x) & Color(x,red))", "all x.(Apple(x) -> (Fruit(x) & RedColor(x)))"]}
{"id": "folio_train_163", "nl": "All fruits containing a large amount of vitamin C are beneficial to people. ", "fol": "all x.(ContainsLargeAmountOfVitaminC(x) -> IsBeneficialToPeople(x))", "prediction": ["all x.((Fruit(x) & LargeAmountOfVitaminC(x)) -> BeneficialToPeople(x))", "all x.((Fruit(x) & LargeAmountOfVitaminC(x)) -> BeneficialToPeople(x))", "all x.((Fruit(x) & LargeAmountOfVitaminC(x)) -> BeneficialToPeople(x))", "all x.((Fruit(x) & LargeAmountOfVitaminC(x)) -> BeneficialToPeople(x))", "all x.((Fruit(x) & HighVitaminC(x)) -> BeneficialToPeople(x))", "all x.((Fruit(x) & ContainsLargeAmountOfVitaminC(x)) -> BeneficialToPeople(x))", "all x.((Fruit(x) & ContainsLargeAmountOfVitaminC(x)) -> BeneficialForPeople(x))", "all x.((Fruit(x) & ContainsLargeAmountOfVitaminC(x)) -> BeneficialToPeople(x))", "all x.((Fruit(x) & LargeAmountOfVitaminC(x)) -> BeneficialToPeople(x))", "all x.((Fruit(x) & ContainsLargeAmountOfVitaminC(x)) -> BeneficialToPeople(x))", "all x.((Fruit(x) & LargeAmountOfVitaminC(x)) -> BeneficialToPeople(x))", "all x.((Fruit(x) & ContainsLargeAmountOfVitaminC(x)) -> BeneficialToPeople(x))", "all x.((Fruit(x) & LargeAmountOfVitaminC(x)) -> BeneficialToPeople(x))", "all x.((Fruit(x) & LargeAmountOfVitaminC(x)) -> BeneficialToPeople(x))", "all x.((Fruit(x) & LargeAmountOfVitaminC(x)) -> BeneficialToPeople(x))", "all x y.((Fruit(x) & LargeAmountOfVitaminC(x)) -> BeneficialToPeople(y))"]}
{"id": "folio_train_164", "nl": "No fruits that are beneficial to people are on a warning list.", "fol": "all x.(IsBeneficialToPeople(x) -> -IsOnWarningList(x))", "prediction": ["all x.((Fruit(x) & BeneficialToPeople(x)) -> WarningList(x))", "all x.((Fruit(x) & BeneficialToPeople(x)) -> WarningList(x))", "all x.((Fruit(x) & BeneficialToPeople(x)) -> -WarningList(x))", "all x.((Fruit(x) & B\u00e9n\u00e9ficialToPeople(x)) -> WarningList(x))", "all x.((Fruit(x) & BeneficialToPeople(x)) -> WarningList(x))", "all x.((Fruit(x) & BeneficialToPeople(x)) -> None(x))", "all x.((Fruit(x) & BeneficialToPeople(x)) -> WarningList(x))", "all x.((Fruit(x) & BeneficialToPeople(x)) -> -WarningList(x))", "all x.((Fruit(x) & BeneficialToPeople(x)) -> WarningList(x))", "all x.((Fruit(x) & BeneficialToPerson(x)) -> WarningList(x))", "all x.((Fruit(x) & BeneficialToPeople(x)) -> WarningList(x))", "all x.((Fruit(x) & BeneficialToPeople(x)) -> NoWarningList(x))", "all x.((Fruit(x) & Beneficial(x)) -> WarningList(x))", "all x.((Fruit(x) & BeneficialToPeople(x)) -> WarningList(x))", "all x.((Fruit(x) & BeneficialToPeople(x)) -> -WarningList(x))", "all x.((Fruit(x) & BeneficialToPerson(x)) -> WarningList(x))"]}
{"id": "folio_train_165", "nl": "If K is not beneficial to people and also not an apple, then it is a fruit with the color red.", "fol": "(-(IsBeneficialToPeople(k) & IsApple(k)) -> FruitsWithColorRed(k))", "prediction": ["all x.(((K) & -BeneficialToPeople(x) & -Apple(x)) -> FruitFruit(x) & ColorRed(x))", "all x.((K(x) & -BeneficialToPeople(x) & -Apple(x)) -> FruitLimitRed(x))", "all x.((K(x) & -BenefitfulToPeople(x) & -Apple(x)) -> FruitWithColor(x))", "all x.((K,x) & -BeneficialToPeople(x) & -Apple(x)) -> FruitWithColorRed(x))", "all x.((K(x) & -BeneficialToPeople(x) & -Apple(x)) -> Fruit(x) & ColorRed(x))", "all x.((K(x) & -BeneficialToPeople(x) & -Apple(x)) -> Fruit(x))", "all x.((K(x) & -BeneficialToPeople(x) & -Apple(x)) -> FruitForRed(x))", "all x y.((K(x) & BeneficialToPeople(x) & -Apple(x)) -> FruitWithColorRed(x))", "all x.((K(x) & -BeneficialToPeople(x) & -Apple(x)) -> FruitFruit(x) & RedColor(x))", "all x.((K's BeneficialToPeople(x) & -Apple(x)) -> FruitLikeRed(x))", "all x.(((K) & -BeneficialToPeople(x) & -Apple(x)) -> Fruit(x) & ColorRed(x))", "all x.((K(x) & -BeneficialToPeople(x) & -Apple(x)) -> FruitWithColorRed(x))", "all x.((Fruit(x) & -BeneficialToPeople(x) & -Apple(x)) -> RedFruit(x))", "all x.((K(x) & -BeneficialToPeople(x) & -Apple(x)) -> FruitWithRedColor(x))", "all x.((Fruit(x) & -ProductiveToPeople(x) & -Apple(x)) -> HasColourRed(x))", "all x.((K(x) & -BeneficialToPeople(x) & -Apple(x)) -> FruitOfColorRound(x))"]}
{"id": "folio_train_166", "nl": "K is an apple.", "fol": "IsApple(k)", "prediction": ["K is an Apple.", "all x.(Apple(x) -> Apple(x))", "(Apple(K) & Apple(K))", "exists x.(Apple(x) & Apple(x))", "all x.(Apple(x) -> K(x))", "K is an apple.", "(Apple(k) & Apple(k))", "all x.(Apple(x) -> Apple(x))", "K is an apple.", "K is an apple.", "K,(Apple(K))", "All x.(K(x) -> Apple(x))", "all x.(Apple(x) -> K.(Kin(x)))", "All x.(Apple(x) -> Apple(x))", "(Apple(K) & HasApple(K))", "All x.(Apple(x) -> Apple(x))"]}
{"id": "folio_train_167", "nl": "K either contains a large amount of vitamin C or is on a warning list.", "fol": "(ContainsLargeAmountOfVitaminC(k) | IsOnWarningList(k))", "prediction": ["all x.(K(x) -> (ContainsLargeAmountOfVitaminC(x) | OnWarningList(x)))", "all x.(K.(K) -> (ContainsLargeAmountOfVitaminC(x) | WarningList(x)))", "all x.(K(x) -> (ContainsLargeAmountOfVitaminC(x) | OnWarningList(x)))", "all x.((K(x) & OrovirusChange(x)) -> (ContainsLargeAmountOfVitaminC(x) | OnWarningList(x)))", "all x y.((K(x) & VitaminC(y)) -> (Contains(x,y) | OnWarningList(x,y)))", "(LargeAmountOfVitaminC(K) & (SafeOnWarningList(K)", "all x.(K) -> (LargeAmount(x,vitaminC) | WarningList(x,CircumCircum)))", "all x.(K(x) -> (LargeVitaminC(x) | WarningList(x)))", "all x.(K(x) -> (ContainsLargeAmountOfVitaminC(x) | OnWarningList(x)))", "all x.(K) -> (Resources(x,largeAmountOfVitaminC) | WarningList(x)))", "all x.((K) & (ContainsLargeAmountOfVitaminC) | WarningList(k))) -> NotForWarning(k))", "all x.((K(x) & LargeAmountOfVitaminC(x)) | WarningList(x))", "all x y.((K(x) & VitaminC(y)) -> (ContainsLargeAmount(x,y) | WarningList(x,y)))", "exists x.(K(x) & (LargeAmountOfVitaminC(x) | WarningList(x)))", "all x.(K(x) -> (ContainsLargeAmountOfVitaminC(x) | OnWarningList(x)))", "all x y.((K(x) & VitaminC(y) & OnWarningList(x)) -> (ContainsLargeAmount(x,y) | OnWarningList(x,y)))"]}
{"id": "folio_train_168", "nl": "K is either on a warning list or with the color red.", "fol": "(IsOnWarningList(k) | FruitsWithColorRed(k))", "prediction": ["exists x.(WarningList(x) | ColorRed(x)))", "exists x.(WarningList(x) | WithColorRed(x))", "all x.(K(x) -> (WarningList(x) | ColorRed(x)))", "(OnWarningList(K) | ColorRED(K)))", "all x.(K(x) -> (OnWarningList(x) | ColorRed(x)))", "all x.(K(x) -> ((OnWarningList(x) | WithColorRed(x))))", "all x.(K(x) -> (OnWarningList(x) | ColorRed(x)))", "all x.(K(x) -> (WarningList(x) | ColorRed(x)))", "all x.(K(x) -> (WarningList(x) | ColorRed(x)))", "all x.(K(x) -> (WarningList(x) | RedColor(x)))", "all x.(K(x) -> (WarningList(x) | ColorRed(x)))", "all x.(K(x) -> (OnWarningList(x) | WithColorRed(x)))", "all x.(K(x) -> (WarningList(x) | ColorRed(x)))", "all x y.((K(x) & WarningList(y)) | WithColorRed(x)) -> AtWarningList(x,y))", "all x y.((K (x) & WarningList(x) | ColorRed(y))) -> MustBeOn(x,y))", "all x.(K(x) -> ((OnWarningList(x) | WithColorRed(x))))"]}
{"id": "folio_train_169", "nl": "If K is either beneficial to people or on a warning list, then it is not red.", "fol": "((IsBeneficialToPeople(k) | IsOnWarningList(k)) -> -FruitsWithColorRed(k))", "prediction": ["all x.((K(x) & (BeneficialToPeople(x) | WarningList(x))) -> -Red(x))", "all x.((K(x) & (BeneficialToPeople(x) | WarningList(x))) -> -Red(x))", "all x.((BenefitNumber(x) | WarningList(x)) -> -Red(x))", "all x.((K(x) & BeneficialToPeople(x)) | OnWarningList(x)) -> -Red(x))", "all x.((BeneficialToPeople(x) | WarningList(x)) -> -Red(x))", "all x.((BeneficialTo(x) | WarningList(x)) -> -Red(x))", "all x.((Beneficial(x) | OnWarningList(x)) -> -Red(x))", "all x.((Beneficial(x) | WarningList(x)) -> -Red(x))", "all x.((BeneficialToPeople(x) | WarningList(x)) -> -Red(x))", "all x.((K(x) & (BeneficialToPeople(x) | OnWarningList(x))) -> -Red(x))", "all x.((K(x) & (Beneficial(x) | WarningList(x))) -> -Red(x))", "all x.((K(x) & BeneficialToPeople(x) & WarningList(x) & Yes(x)) -> -Red(x))", "all x.((BeneficialToPersons(x) | WarningList(x)) -> -Red(x))", "all x.((BenefitfulToPeople(x) | WarningList(x)) -> -Red(x))", "all x.((Beneficial(x) | WarningList(x)) -> -Red(x))", "all x.((BeneficialToPeople(x) | WarningList(x)) -> -Red(x))"]}
{"id": "folio_train_170", "nl": "If K is either on a warning list or with the color red, then it is not beneficial to people and does not contain a large amount of vitamin C.", "fol": "((WarnList(k) | FruitsWithColorRed(k)) -> (-IsBeneficialToPeople(k) & -ContainsLargeAmountOfVitaminC(k)))", "prediction": ["all x.((K(x) & (WarningList(x) | ColorRed(x))) -> (-BeneficialToPeople(x) & -ContainsLargeAmountOfVitaminC(x)))", "all x.((K(x) & WarningList(x) | RedColor(x)) -> -BeneficialToPeople(x) & -LargeAmountOfVitaminC(x))", "all x.((K(x) & WarningList(x) | ColorRed(x)) -> (-BeneficialToPeople(x) & -ContainLargeAmountOfVitaminC(x)))", "all x.((OnWarningList(x) | ColorRed(x)) -> -BeneficialToPeople(x) & -ContainsLargeAmountOfVitaminC(x)))", "all x.((K(x) & (WarningList(x) | ColorRed(x))) -> (-BeneficialToPeople(x) & -LargeAmountOfVitaminC(x)))", "all x.((K,SignificantList(x) | ColorRed(x)) -> -BeneficialToPeople(x) & -ContainLargeAmountOfVitaminC(x))", "all x.((K(x) & (OnWarningList(x) | ColorRed(x))) -> (-BeneficialToPeople(x) & -LargeAmountOfVitaminC(x)))", "all x.((K) & orWarningList(x)) | ColorRed(x)) -> (-BeneficialToPeople(x) & -ContainsLargeAmountOfVitaminC(x)))", "all x.((K(x) & (WarningList(x) | ColorRed(x))) -> -BeneficialToPeople(x) & -ContainsLargeAmountOfVitaminC(x)))", "all x.((K(x) & (OnWarningList(x) | HasColorRed(x))) -> (-BeneficialToPeople(x) & -ContainsLargeAmountOfVitaminC(x)))", "all x.((K(x) & (OnWarningList(x) | WithColorRed(x))) -> (-BeneficialToPeople(x) & -ContainsLargeAmountOfVitaminC(x)))", "all x.(VitaminC(x) -> (BeneficialToPeople(x) & -LargeAmountOfVitaminC(x)))", "all x.((Ken(x) & (WarningList(x) | ColorRed(x))) -> (-BeneficialToPeople(x) & -ContainsLargeAmountOfVitaminC(x)))", "all x.((K(x) & (RainWarningList(x) | RedColor(x))) -> (-BeneficialToPeople(x) & -ContainsLargeAmountOfVitaminC(x)))", "all x.((K(x) & (OnWarningList(x) | ColorRed(x))) -> -BeneficialToPeople(x) & -HasLargeAmountOfVitaminC(x))", "all x.((K(x) & (WaitingList(x) | ColorRed(x))) -> -BeneficialToPeople(x) & -ContainLargeAmountOfVitaminC(x))"]}
{"id": "folio_train_171", "nl": "Everyone working at Meta has a high income. ", "fol": "all x.(WorksAtMeta(x) -> HasHighIncome(x))", "prediction": ["all x y.((WorkingAtMeta(x) & HighIncome(y)) -> WorkAtMeta(x,y))", "all x.((WorkingAtMeta(x) & -HighIncome(x)) -> WorksAtMeta(x))", "all x.(WorkingAtMeta(x) -> HighIncome(x))", "all x.(WorksAtMeta(x) -> HighIncome(x))", "all x.(WorkingAtMeta(x) -> HighIncome(x))", "all x.(WorkingAtMeta(x) -> HighIncome(x))", "all x.(WorkingAtMeta(x) -> HighIncome(x))", "all x.(WorkingAtMeta(x) -> HighIncome(x))", "all x.(WorkingAtMeta(x) -> HasHighIncome(x))", "all x.((WorkingAtMeta(x)) -> HighIncome(x))", "all x.((WorksAtMeta(x) & HighIncome(x)) -> WorksAtMeta(x))", "all x.((WorkingAtMeta(x) & HighIncome(x)) -> WorkedAtMeta(x))", "all x y.((WorkingAtMeta(x) & Meta(y)) -> HighIncome(x,y))", "all x.(WorksAtMeta(x) -> HighIncome(x))", "all x.(WorkingAtMeta(x) -> HighIncome(x))", "all x.(WorkingAtMeta(x) -> HighIncome(x))"]}
{"id": "folio_train_172", "nl": "If a person has a high income, then he/she will not take a bus to their destination.", "fol": "all x.(HasHighIncome(x) -> -TakesBus(x))", "prediction": ["all x.((Person(x) & HighIncome(x)) -> -TakeBusToDestination(x))", "all x.((Person(x) & HighIncome(x)) -> -TakeBusToDestination(x))", "all x.(HighIncome(x) -> -TakeBusToDestination(x))", "all x.(HighIncome(x) -> -TakeBusToDestination(x))", "all x.((Person(x) & HighIncome(x)) -> -TakeBusToDestination(x))", "all x.((Person(x) & HighIncome(x)) -> -TakeBusToDestination(x))", "all x.(HighIncome(x) -> -HasBusToDestination(x))", "all x.((Person(x) & HighIncome(x)) -> -BusToDestination(x))", "all x.((Person(x) & HighIncome(x)) -> -TakeBusToDestination(x))", "all x.((Person(x) & HighInterest(x)) -> -TakeBusToDestination(x))", "all x.((Person(x) & HighIncome(x)) -> -TakeBusToDestination(x))", "all x.((Person(x) & HighIncome(x)) -> -TakeBusToDestination(x))", "all x.(HighIncome(x) -> -TakesBusToDestination(x))", "all x.((Person(x) & HighIncome(x)) -> -TakeBusToDestination(x))", "all x.((Person(x) & HighIncome(x)) -> -TakeBusToDestination(x))", "all x.((Person(x) & HighIncome(x)) -> -TakeBusToDestination(x))"]}
{"id": "folio_train_173", "nl": "People will either take a bus or drive to their destination. ", "fol": "all x.(TakesBus(x) | DrivesToDestination(x))", "prediction": ["all x.((Person(x) & TakeBus(x)) | DriveToDestination(x))", "all x.(Person(x) -> (TakesBus(x) | DrivesToDestination(x)))", "all x.(People(x) -> (TakeBus(x) | DriveDestination(x)))", "all x.(People(x) -> (TakeBuse(x) | DriveToDestination(x)))", "all x.(Person(x) -> (TakeBus(x) | DriveToDestination(x)))", "all x.(Person(x) -> (TakeBus(x) | DriveToDestination(x)))", "all x y.((Person(x) & Bus(y)) -> (Take(x,y) | DriveTo(x,y)))", "all x.(Person(x) -> (TakesBus(x) | DrivesToDestination(x)))", "all x.(People(x) -> (TakesBus(x) | DrivesToDestination(x)))", "all x.(Person(x) -> (TakesBus(x) | DrivesToDestination(x)))", "all x.(Person(x) -> (TakeBus(x) | DriveToDestination(x)))", "all x.(Person(x) -> (TakeBus(x) | DriveToDestination(x)))", "all x.(Person(x) -> (TakesBus(x) | DrivesToDestination(x)))", "all x y.((Person(x) & Bus(y)) -> (Takes(x,y) | DrivesTo(x,y)))", "all x y.((Person(x) & Bus(y)) -> (Take(x,y) | Drive(x,y)))", "all x.(Person(x) -> (TakesBus(x) | DrivesToDestination(x)))"]}
{"id": "folio_train_174", "nl": "Everyone who has a car will choose to drive to their destination. ", "fol": "all x.(OwnsCar(x) -> DrivesToDestination(x))", "prediction": ["all x.((HasCar(x) & DriveToDestination(x)) -> Chooses(x,DriveToDestination))", "all x.((HasCar(x) & DriveToDestination(x)) -> Declines(x))", "all x.(HasCar(x) -> ChoosesDrive(x,Destination))", "all x.(HasCar(x) -> ChoosesToDrive(x))", "all x.(HasCar(x) -> (DriveToDestination(x) | Choose(x)))", "all x.(HasCar(x) -> (DriveToDestination(x) & SelectsDestination(x)))", "all x.(HasCar(x) -> DrivesToDestination(x))", "all x.(HasCar(x) -> ChooseDestination(x))", "all x.(HasCar(x) -> ChoosesToDriveToDestination(x))", "all x.((HasCar(x) & DriveToDestination(x)) -> WillSavorDestination(x))", "all x.((HasCar(x) & DrivesToDestination(x)) -> ChoosesDestination(x))", "all x.(HasCar(x) -> ChoosesToDriveToDestination(x))", "all x.(HasCar(x) -> ChoosesToDrive(x))", "all x.((HasCar(x) & DrivesToDestination(x)) -> Choose(x))", "all x y.((HasCar(x) & Destination(y)) -> ChoosesToDrive(x,y))", "all x.(HasCar(x) -> (DistractedToDestination(x) & ChoosesDrive(x)))"]}
{"id": "folio_train_175", "nl": "No students drive to their destination. ", "fol": "all x.(IsStudent(x) -> -DrivesToDestination(x))", "prediction": ["-exists x.(Student(x) & DrivesToDestination(x))", "-exists x.(Student(x) & DrivesTo(x,Destination))", "-exists x.(Student(x) & DrivesToDestination(x))", "-(Student(x) & -Destination(x)))", "-exists x.(Student(x) & DrivesToDestination(x))", "all x.(Student(x) -> -DrivesToDestination(x))", "-exists x.(Student(x) & DrivesToDestination(x))", "-exists x.(Student(x) & DrivesTo(x))", "-exists x.(Student(x) & DrivesTo(x,Destination))", "-exists x.(Student(x) & DrivesToDeparture(x))", "all x y.((Student(x) & Destination(y)) -> -DrivesTo(x,y))", "-(Student(e) & DrivesToDestination(e))", "-(Student(x) & DriveToDestination(x))", "-exists x.(Student(x) & DrivesToDestination(x))", "-DrivesToDestination(Student)", "-(Student(Student) & DrivesToDestination(Student,Destination))"]}
{"id": "folio_train_176", "nl": "James has a car or works at Meta.", "fol": "(OwnsCar(James) | WorksAtMeta(James))", "prediction": ["all x.(James(x) -> (HasCar(x) | WorksAtMeta(x)))", "(HasCar(Jamey) | WorkesAtMeta(Jamey)))", "all x.(Withcar(x) | worksAtMeta(x))", "all x.(Jimes(x) -> (HasCar(x) | WorksAtMeta(x)))", "(HasCar(James) | WorksATMeta(James)))", "(HasCar(James,James) | WorksAtMeta(James,James))", "(HasCar(Jim) | WorksAtMeta(Jim)))", "(exists x.(JamesCar(x) | WorksAtMeta(x)))", "all x.(James(x) -> (exists y.(Car(y) + Has(x,y)) | exists z.(Meta(z) & WorksAt(x,z)))))", "is a member of Meta(James) & (HasCar(James) | WorksAtMeta(James)))", "(HasCar(James) | WorksAtMeta(James))", "all x.((James(x) & (HasCar(x) | WorksAtMeta(x))) -> WorksAtMeta(x))", "all x.(James(x) -> (HasCar(x) | WorksAtMeta(x)))", "James (exists x.(Car(x) | WorkedAtMeta(x)))", "(HasCar(James) | WorksAtMeta(James))", "(HasCar(James) | WorksAtMeta(James)))"]}
{"id": "folio_train_177", "nl": "James has a high income.", "fol": "HasHighIncome(James)", "prediction": ["James has a highIncome(James)", "James has a high income.", "JamesHasHighIncome(james)", "James has a highIncome(James)", "James has high income.", "James HarrisHasHighIncome(James)", "-HighIncome(James)", "all x y.((James(x) & Income(y)) -> High(x,y))", "all x.(James(x) -> HasHighIncome(x))", "JamesSawsHighIncome(James)", "(HearsIncome(James) -> HighIncome(James))", "James has a highIncome(James)", "James has high Income(James)", "James has a highincome.", "James has highincome.", "HasHighIncome(James)"]}
{"id": "folio_train_178", "nl": "James does not have a high income.", "fol": "-HasHighIncome(James)", "prediction": ["all x.(James(x) -> -HighIncome(x))", "(-HighIncome(Jimmy) -> James(Jimmy)))", "(-HighIncome(James))", "(LastCompany(James) & -HighIncome(James))", "all x.((James(x) & -HighIncome(x)) -> DoesNotHave(x,y))", "all x.((Jimmy(x) & HighIncome(x)) -> -HighIncome(x))", "(HasHighIncome(James) & James -HasHighIncome(James))", "is a lowIncome(james)", "James niHasHighIncome(James)", "all x.((James(x) & HighIncome(x)) -> -HighIncome(x))", "James has no highIncome(James)", "the income of James.", "the lowincome of James Finch(James)", "James -HighIncome(James)", "(LivingIncome(James) & -HighIncome(James))", "-HisHighIncome(James)"]}
{"id": "folio_train_179", "nl": "James is a student.", "fol": "IsStudent(James)", "prediction": ["James is student.", "James is Student(James)", "James is Student(James)", "(Student(Jimmy) | Student(Jimmy)))", "James is a student.", "(Student(James)", "James is Student.", "James is Student(x)", "James is student(James)", "James.IsStudent(Jim)", "James is student.", "-Student(Jimmy)", "James is Student(James)", "James is student(James)", "James is student.", "James is Student."]}
{"id": "folio_train_180", "nl": "James drives to his destination or he is a student.", "fol": "(DrivesToDestination(James) | IsStudent(James))", "prediction": ["(DrivingToDestination(James) | Student(James)))", "exists x.(James(x) & (DrivesToDestination(x) | Student(x)))", "(DrivesToDestination(James) | Student(James)))", "(DrivesTo(James,Destination) | Student(James)))", "all x.(James(x) -> (DrivesToDestination(x) | Student(x)))", "either exists x.(James(x) & (Destination(x) | Student(x)))", "all x.(James(x) -> (DrivesToDestination(x) | Student(x)))", "all x.((James(x) & (DrivesToDestination(x) | Student(x))) -> Driver(x))", "(DrivesToDestinations(James) | Student(James)))", "(DrivesToDestination(James) | Student(James)))", "all x.((James(x) & (DrivesToDestination(x) | Student(x))) -> DrivesTo(x))", "all x.(JamesDrivesToDestination(x) | Student(x))", "(Driving(James) | Student(James)))", "(Driving(James,Destination) | Student(James,Destination)))", "all x y.((James(x) & Destination(y)) | Student(x))", "all x.((James(x) & (DrivesToDestination(x) | Student(x))) -> DrivesTo(x))"]}
{"id": "folio_train_181", "nl": "James either drives to their destination or is a student.", "fol": "(DrivesToDestination(James) | IsStudent(James))", "prediction": ["all x.(James(x) -> (DrivesToStorage(x) | Student(x)))", "all x.((James(x) & DrivesToDestination(x)) | Student(x))", "exists x.(Jeffrey(x) & (DrivesToDestination(x) | Student(x)))", "all x.(James(x) -> (DrivingTo(x,Destination) | Student(x)))", "all x.(James(x) -> (DrivesToDestination(x) | Student(x)))", "all x.(James(x) -> (DrivesToDestination(x) | Student(x)))", "all x.(James(x) -> (DrivesToDestination(x) | Student(x)))", "all x.((James(x) & (DrivesToDestination(x) | Student(x)))", "exists x.(James(x) & (DrivesTo(x,Destination) | Student(x)))", "is (DrivesTo(James) | Student(James)))", "all x.(James(x) -> (DrivesTo(x) | Student(x)))", "all x.(James(x) -> (DrivesTo(x,t) | Student(x)))", "all x.(James(x) -> (DrivesToDestination(x) | Student(x)))", "all x.(James(x) -> (DrivingTo(x) | Student(x)))", "all x.(James(x) -> (DrivesToDestination(x) | Student(x)))", "all x.(James(x) -> (DrivesToDestination(x) | Student(x)))"]}
{"id": "folio_train_182", "nl": "If James either drives to his destination or is a student, then he has a high income and is a student.", "fol": "((DrivesToDestination(James) | IsStudent(James)) -> (HasHighIncome(James) & IsStudent(James)))", "prediction": ["all x.((James(x) & DrivesToDestination(x)) | Student(x)) -> (HighIncome(x) & Student(x)))", "all x.((Factory(x) | Student(x)) -> (HighIncome(x) & Student(x)))", "all x.((DrivesToDestination(x) | Student(x)) -> HighIncome(x) & Student(x))", "all x.((RidesToDestination(x) | Student(x)) -> (HighIncome(x) & Student(x)))", "all x.((CarriesToDestination(x) | Student(x)) -> (HighIncome(x) & Student(x)))", "all x.((DrivesToDestination(x) | Student(x)) -> (HasHighIncome(x) & Student(x)))", "all x.((Jimmy(x) & (DrivesToDestination(x) | Student(x))) -> (HighIncome(x) & Student(x)))", "all x.((DrivesToDestination(x) | Student(x)) -> (HighIncome(x) & Student(x)))", "all x.((BayEngagement(x) & (DrivesToDestination(x,x) | Student(x))) -> (HighIncome(x) & Student(x)))", "all x.((RoadsToDestination(x) | Student(x)) -> HighIncome(x))", "all x.((DrivesToDestination(x) | Student(x)) -> (HighIncome(x) & Student(x)))", "all x.((DrivesToDestination(x) | Student(x)) -> (HighIncome(x) & Student(x)))", "all x.((James(x) & (DrivesToDestination(x) | Student(x))) -> (HighIncome(x) & Student(x)))", "all x.(DrivesTo(x,Destination) | Student(x)) -> (HighIncome(x) & Student(x)))", "all x.((DrivesToDestination(x) | Student(x)) -> (HighIncome(x) & Student(x)))", "all x.((James(x) & (DrivingToDestination(x) | Student(x))) -> HighIncome(x))"]}
{"id": "folio_train_183", "nl": "Students either go to the park or go to the movies. ", "fol": "all x.((GoesToPark(x) & -GoesToMovies(x)) | (-GoesToPark(x) & GoesToMovies(x)))", "prediction": ["all x.(Student(x) -> (GoesToPark(x) | GoesToMovies(x)))", "all x.(Student(x) -> (GoToPark(x) | GoToMovies(x)))", "all x.(Student(x) -> (GoesToPark(x) | GoesToMovies(x)))", "exists x y.(Student(x) & GoEats(x,y))", "all x.(Student(x) -> (GoToPark(x) | GoToMovies(x)))", "all x.(Student(x) -> (GoToPark(x) | GoToMovies(x)))", "all x y.((Student(x) & Park(y)) | MovieStage(x,y)) -> GoesTo(x,y))", "all x.(Student(x) -> (GoesToPark(x) | GoesToMovies(x)))", "all x.(Student(x) -> (GoesTo(x,park) | GoesTo(x,Movies)))", "all x y.((Student(x) & Park(y)) | Movie(y)) -> (Go(x,y) | Go(x,y)))", "all x.(Student(x) -> (FollowThePark(x) | GoToMovies(x)))", "all x.(Student(x) -> (GoesToPark(x) | GoesToMovies(x)))", "all x.(Student(x) -> (GoTown(x) | GoToMovies(x)))", "all x.(Student(x) -> (GoesToPark(x) | GoesToMovies(x)))", "all x.(Student(x) -> (Go(x,Park) | Go(x,Movies)))", "all x.(Student(x) -> (GoToPark(x) | GoToMovies(x)))"]}
{"id": "folio_train_184", "nl": "No student who enjoys nature has free time during the weekend. ", "fol": "all x.(EnjoysNature(x) -> -HasFreeTime(x))", "prediction": ["-exists x.(Student(x) & EnjoysNature(x) & FreeTimeDuringWeekend(x))", "-all x.((Student(x) & EnjoysNature(x)) -> HasFreeTime(x,weekend))", "-(Student(student) & EnjoysNature(Study) & Weekend(Study))", "all x.((Student(x) & EnjoysNature(x)) -> FreeTimeDuringWeekend(x))", "-exists x.(Student(x) & EnjoysNature(x) & FreeTimeDuringWeekend(x))", "-exists x.(Student(x) & EnjoysNature(x) & exists y.(Weekend(y) & FreeTime(x))))", "all x.((Student(x) & EnjoysNature(x)) -> NoFreeTimeDuringWeekend(x))", "-all x y.((Student(x) & EnjoysNature(x)) -> FreeTime(y))", "(-all x.(EnjoysNature(x) -> FreeTimeAllSunday(x)))", "-exists x.(Student(x) & EnjoysNature(x) & FreeTimeAtWeekend(x))", "-all x.(EnjoysNature(x) -> HasFreeTimeDuringWeekend(x))", "all x.((Student(x) & EnjoysNature(x)) -> FreeTimeDuringWeekend(x))", "-(Student(x) & EnjoysNature(x)) -> FreeTimeDuringWeekend(x))", "-all x.((Student(x) & EnjoysNature(x)) -> FreeTimeWeekend(x))", "-exists x.(Student(x) & EnjoysNature(x) & TimeFree(x))", "all x.((Student(x) & EnjoysNature(x)) -> RequiresFreeTime(x))"]}
{"id": "folio_train_185", "nl": "All students who go to the movies enjoy nature. ", "fol": "all x.(GoesToMovies(x) -> EnjoysNature(x))", "prediction": ["all x.((Student(x) & Movie(y)) -> EnjoysNature(x,y))", "all x.((Student(x) & ComesToMovies(x)) -> EnjoysNature(x))", "all x.((Student(x) & GoesToMovies(x)) -> Enjoynature(x))", "all x.((Student(x) & GoesToMovies(x)) -> EnjoysNaturalEscape(x))", "all x.((Student(x) & GoesToMovies(x)) -> EnjoysNature(x))", "all x.((Student(x) & GoesToMovies(x)) -> EnjoysNature(x))", "all x.((Student(x) & GoesToMovie(x)) -> EnjoysNature(x))", "all x.((Student(x) & GoesToMovies(x)) -> EnjoysNature(x))", "all x.((Student(x) & GoesToMovies(x)) -> EnjoysNature(x))", "all x.((Student(x) & GoesToMovies(x)) -> EnjoysNature(x))", "all x.((Student(x) & GoesToMovies(x)) -> EnjoysNature(x))", "all x.((Student(x) & GoesToMovies(x)) -> EnjoysNature(x))", "all x.((Student(x) & GoesToMovies(x)) -> EnjoysNature(x))", "all x y.((Student(x) & Movie(y)) -> EnjoysNature(x,y))", "all x.((Student(x) & GoesToMovies(x)) -> EnjoysNature(x))", "all x.((Student(x) & GoesToMovie(x)) -> EnjoysNature(x))"]}
{"id": "folio_train_186", "nl": "All students who do not have class during the weekend have free time during the weekend. ", "fol": "all x.(DoesNotHaveClass(x) -> HasFreeTime(x))", "prediction": ["all x.((Student(x) & -HasClassDuringWeekend(x)) -> FreeTimeDuringWeekend(x))", "all x.((Student(x) & -HasClass(x,weekend)) -> FreeTime(x,weekend))", "all x.((Student(x) & -HasClassDuringWeekend(x)) -> HasFreeTimeDuringWeekend(x))", "all x.((Student(x) & -HasClassDuringWeekend(x)) -> FreeTimeDuringWeekend(x))", "all x.((Student(x) & -HasClassDuringWeekend(x)) -> HasFreeTimeDuringWeekend(x))", "all x.((Student(x) & -HasClass(x,Weekend)) -> HasFreeTime(x,Weekend))", "all x.((Student(x) & -HasClassDuringWeekend(x)) -> FreeTimeDuringWeekend(x))", "all x.((Student(x) & -HasClass(x,Weekend)) -> HasFreeTime(x,Weekend))", "all x.((Student(x) & -HasClass(x,Weekend)) -> HasFreeTime(x,Weekend))", "all x.((Student(x) & -HasClassDuringSaturday(x)) -> FreeTimeDuringSaturday(x))", "all x.((Student(x) & -HasClassDuringWeekend(x)) -> HaveFreeTimeDuringWeekend(x))", "all x.((Student(x) & -HasClassDuringWeekend(x)) -> HasFreeTimeDuringWeekend(x))", "all x.((Student(x) & -HasClass(x,Weekend)) -> HasFreeTime(x,Weekend))", "all x.((Student(x) & -HasClassDuringWeekend(x)) -> HasFreeTimeDuringWeekend(x))", "all x.((Student(x) & -HasClass(x,Weekend)) -> HasFreeTimeDuringWeekend(x))", "all x.((Student(x) & -HasClassDuringWeekend(x)) -> FreeTimeDuringWeekend(x))"]}
{"id": "folio_train_187", "nl": "All students not in summer camp do not have class during the weekend. ", "fol": "all x.(InSummerCamp(x) -> DoesNotHaveClass(x))", "prediction": ["all x.((Student(x) & -SummerCamp(x)) -> -ClassDuringWeekend(x))", "all x.((Student(x) & -SummerCamp(x)) -> -HasClassDuringWeekend(x))", "all x.((Student(x) & -SummerCamp(x)) -> -HasClassDuringWeekend(x))", "all x.((Student(x) & -SummerCamp(x)) -> -HasClass(x))", "all x.((Student(x) & -InSummerCamp(x)) -> -HasClassDuringWeekend(x))", "all x y.((Student(x) & -InSummerCamp(x,y) & Weekend(z)) -> -HasClassDuring(x,z))", "all x y.((Student(x) & -InSummerCamp(x)) -> -HasClassDuringWeekend(x))", "all x.((Student(x) & -SummerCamp(x)) -> -HasClassDuringWeekend(x))", "all x.((Student(x) & -SummerCamp(x)) -> -HasClassDuringWeekend(x))", "all x.((Student(x) & -(ExercisesSummerCamp(x) | WeeknightClass(x))) -> -HasClass(x))", "all x.((Student(x) & -StudentInSummerCamp(x)) -> DoesNotHaveClass(x,winter))", "all x.((Student(x) & -SummerCamp(x)) -> -HasClass(x,winter))", "all x y.((Student(x) & -SummerCamp(y)) -> -ClassDuringWeekend(x,y))", "all x.((Student(x) & -InSummerCamp(x)) -> -HasClassDuringSaturday(x))", "all x y.((Student(x) & SummerCamp(y)) -> -HasClassDuringWeekend(x,y))", "all x.((Student(x) & -StudentInSummerCamp(x)) -> -HasClassDuringWeekend(x))"]}
{"id": "folio_train_188", "nl": "James does not have class during the weekend.", "fol": "DoesNotHaveClass(James)", "prediction": ["has(James,Festival) & -HasClass(James))", "all x.((James(x) & Weekend(x)) -> -HasClass(x,weekend))", "-HasClass(James,Venue(July))", "will missesclass(Jim)", "-HasClass(James,Saturday)", "no classes during the weekend, James.", "James -HasClass(x,Weekend)", "(-HasClass(James(James) & Weekend(James))", "(-HasClass(James,Weekend))", "-HasClass(James,SevenWeekend)", "is the Saturday(James) & -HasClass(James))", "all x.((James(x) & Weekend(x)) -> -HasClass(x))", "(-HasClass(James,Sunday))", "James -HasClassDuringWeekend(James)", "comes weekend. James ((-HasClass(James) | Weekend(James)))", "the Weekend(James) -NotHasClassDuring(James)"]}
{"id": "folio_train_189", "nl": "James is in summer camp.", "fol": "InSummerCamp(James)", "prediction": ["James is in SummerCamp(July)", "James is in SummerCamp(James)", "James is in summer camp.", "James is in SummerCamp.", "James is in summercamp.", "James is in summer camp.", "(Mary(Jabber) & SummerCamp(Jack))", "James is in summercamp.", "(SummerCamp(James)", "James is in summer camp.", "James is in summercamp.", "all x.(James(x) -> SummerCamp(x))", "(InCamp(Jimmy) & Summer(Jimmy))", "James InSummerCamp( James)", "James is in SummerCamp(James)", "-Spring(James)"]}
{"id": "folio_train_190", "nl": "James goes to the park or is in summer camp.", "fol": "(GoesToPark(James) | InSummerCamp(James))", "prediction": ["all x.(James(x) -> (GoesToPark(x) | InSummerCamp(x)))", "(GoesToPark(James) | InSummerCamp(James))", "all x.(Justin(x) -> (GoesToPark(x) | SummerCamp(x)))", ",iii): (GoesToPark(i) | InSummerCamp(i)))", "all x.(James(x) -> (GoesToPark(x) | InSummerCamp(x)))", "all x.(Jim(x) -> (GivesToPark(x) | InSummerCamp(x)))", "all x.(James(x) -> (GoesToPark(x) | InSummerCamp(x)))", "exists x.(James(x) & (GoesToPark(x) | InSummerCamp(x)))", "all x.(James(x) -> (GoesToPark(x) | InSummerCamp(x)))", "all x.(James(x) -> (GoesToPark(x) | InSummerCamp(x)))", "all x.(James(x) -> (GoesToPark(x) | InSummerCamp(x)))", "all x.(Jim(x) -> (GoesToPark(x) | InSummerCamp(x)))", "(SorryToPark(James) | SummerCamp(James)))", "all x.(James(x) -> (GoesToPark(x) | InSummerCamp(x)))", "all x.(James(x) -> (GoesToPark(x) | InSummerCamp(x)))", "all x.(James(x) -> (GoesToPark(x) | inSummerCamp(x)))"]}
{"id": "folio_train_191", "nl": "No television stars are certified public accountants.", "fol": "all x.(IsTelevisionStar(x) -> -IsCertifiedPublicAccountant(x))", "prediction": ["-exists x.(TelevisionStar(x) & CertifiedPublicAccountant(x))", "-exists x.(TelevisionStar(x) & CertifiedPublicAccountant(x))", "-exists x.(TelevisionStar(x) & CertifiedPublicAccountant(x))", "-all x.(TelevisionStar(x) -> CertifiedPublicAccountant(x))", "all x.(TelevisionStar(x) -> -PublicAccountant(x))", "(-exists x.(TelevisionStar(x) & CertifiedPublicAccountant(x)))", "-exists x.(TelevisionStar(x) & CertifiedPublicAccountant(x))", "-exists x.(TelevisionStar(x) & CertifiedPublicAccountant(x))", "-exists x.(TelevisionStar(x) & CertifiedPublicAccountant(x))", "-exists x.(TelevisionStar(x) & CertifiedPublicAccountant(x))", "-exists x.(TelevisionStar(x) & CertifiedPublicAccountant(x))", "-exists x.(TVStar(x) & CertifiedPublicAccountant(x))", "-exists x.(Star(x) & TVStar(x) & CertifiedPublicAccountant(x))", "-exists x.(TelevisionStar(x) & CertifiedPublicAccountant(x))", "-exists x.(TVStar(x) & CertifiedPublicAccountant(x))", "-exists x.(TelevisionStar(x) & CertifiedPublicAccountant(x))"]}
{"id": "folio_train_192", "nl": "All certified public accountants have good business sense.", "fol": "all x.(IsCertifiedPublicAccountant(x) -> HasGoodBusinessSense(x))", "prediction": ["all x.(CertifiedPublicAccountant(x) -> GoodBusinessSense(x))", "all x.(CertifiedPublicAccountant(x) -> GoodBusinessSense(x))", "all x.(CertifiedPublicAccountant(x) -> GoodBusinessSense(x))", "all x.(CertifiedPublicAccountant(x) -> GoodBusinessSense(x))", "all x.((PublicAccountant(x) & Certified(x)) -> BusinessSense(x))", "all x.((CertifiedPublicAccountant(x) & HasGoodBusinessSense(x)) -> ResponsibleLeader(x))", "all x.(CertifiedPublicAccountant(x) -> GoodBusinessSense(x))", "all x.(CertifiedPublicAccountant(x) -> HasGoodBusinessSense(x))", "all x.(CertifiedPublicAccountant(x) -> BusinessSense(x))", "all x.(CertifiedPublicAccountant(x) -> GoodBusinessSense(x))", "all x.(CertifiedPublicAccountant(x) -> GoodBusinessSense(x))", "all x.(CertifiedPublicAccountant(x) -> BusinessSense(x))", "all x.(CertifiedPublicAccountant(x) -> GoodBusinessSense(x))", "all x.(CertifiedPublicAccountant(x) -> GoodBusinessSense(x))", "all x.(CertifiedPublicAccountant(x) -> GoodBusinessSense(x))", "all x.((PublicAccountant(x) & Certified(x)) -> BusinessSense(x))"]}
{"id": "folio_train_193", "nl": "All television stars have good business sense.", "fol": "all x.(IsTelevisionStar(x) -> HasGoodBusinessSense(x))", "prediction": ["all x.(TelevisionStar(x) -> GoodBusinessSense(x))", "all x.(TelevisionStar(x) -> GoodBusinessSense(x))", "all x.(TelevisionStar(x) -> GoodBusinessSense(x))", "all x y.((TelevisionStar(x) & TelevisionStar(y)) -> GoodBusinessSense(x,y))", "all x.(TelevisionStar(x) -> GoodBusinessSense(x))", "all x.(TelevisionStar(x) -> GoodBusinessSensor(x))", "all x.(TelevisionStar(x) -> GoodBusinessSense(x))", "all x.(TelevisionStar(x) -> HasGoodBusinessSense(x))", "all x.(TelevisionStar(x) -> hasGoodBusinessSense(x))", "all x.(TVStar(x) -> GoodBusinessSense(x))", "all x y.((TelevisionStar(x) & BusinessSense(y))", "all x.(TelevisionStar(x) -> GoodBusinessSense(x))", "all x.(TelevisionStar(x) -> GoodBusinessSense(x))", "all x.(TelevisionStar(x) -> GoodBusinessSense(x))", "all x.(TelevisionStar(x) -> GoodBusinessSense(x))", "all x.(TelevisionStar(x) -> HasGoodBusinessSense(x))"]}
{"id": "folio_train_194", "nl": "Some students good at math are good at chemistry.", "fol": "exists x.(GoodAtMath(x) & GoodAtChemistry(x))", "prediction": ["exists x.(Student(x) & GoodAtMath(x) & GoodAtChemistry(x))", "(exists x.(Student(x) & GoodAtMath(x)) & exists y.(Student(y) & GoodAtChemistry(y))))", "exists x.(Student(x) & GoodAtMath(x) & GoodAtChemistry(x))", "exists x.(Student(x) & GoodAtMath(x) & GoodAtChemistry(x))", "exists x.(Student(x) & GoodAt(x,math) & GoodAt(x,chemistry))", "exists x.(Student(x) & GoodAt(x,math) & GoodAt(x,chemistry))", "exists x.(Student(x) & GoodAtMath(x) & GoodAtChemical(x))", "exists x.(Student(x) & GoodAtMath(x) & GoodAtChemistry(x))", "exists x.(Student(x) & GoodAtMath(x))", "exists x.(Student(x) & GoodAtMath(x) & GoodAtChemical(x))", "exists x.(Student(x) & GoodAtMath(x) & GoodAtChemistry(x))", "exists x.(Student(x) & GoodAtMath(x) & GoodAtChemistry(x))", "exists x.(Student(x) & GoodAt(x,Math) & GoodAt(x,Chemistry))", "exists x.(Student(x) & GoodAtMath(x) & GoodAtChemistry(x))", "exists x.(Student(x) & GoodAtMath(x) & GoodAtChemistry(x))", "exists x.(Student(x) & GoodAtMathematics(x) & GoodAtChemistry(x))"]}
{"id": "folio_train_195", "nl": "All students good at chemistry enjoy conducting experiments. ", "fol": "all x.(GoodAtChemistry(x) -> EnjoysConductingExperiments(x))", "prediction": ["all x.((Student(x) & GoodAtChemistry(x)) -> EnjoysExperiments(x))", "all x.(GoodAtChemistry(x) -> EnjoysConductingExperiments(x))", "all x.((Student(x) & GoodAtChemistry(x)) -> EnjoysConductingExperiments(x))", "all x.((Student(x) & GoodAtChemical(x)) -> EnjoysConductingExperiments(x))", "all x.((Student(x) & GoodAtChemical(x)) -> EnjoysConductingExperiments(x))", "all x.((Student(x) & GoodAtChemical(x)) -> EnjoysConductingExperiments(x))", "all x.((Student(x) & GoodAtChemistry(x)) -> EnjoysConductingExperiments(x))", "all x.((Student(x) & GoodAtChemistry(x)) -> EnjoysConductingExperiments(x))", "all x.(GoodChemistryStudent(x) -> EnjoysConductingExperiments(x))", "all x.((Student(x) & GoodAtChemical(x)) -> EnjoysExperiments(x))", "all x.((Student(x) & GoodAtChemistry(x)) -> EnjoysConductingExperiments(x))", "all x.((Student(x) & GoodAtChemistry(x)) -> EnjoysConductingExperiments(x))", "all x y.((Student(x) & GoodAtChemistry(x) & ChemistryAppreciated(y)) -> EnjoysConductingExperiments(x))", "all x.((Student(x) & GoodAtChemistry(x)) -> EnjoysConductingExperiments(x))", "all x.((Student(x) & GoodAtChemistry(x)) -> EnjoysConductingExperiments(x))", "all x.((Student(x) & GoodAtChemistry(x)) -> EnjoysExperiments(x))"]}
{"id": "folio_train_196", "nl": "All students that enjoy conducting experiments are good at planning. ", "fol": "all x.(EnjoysConductingExperiments(x) -> GoodAtPlanning(x))", "prediction": ["all x.((Student(x) & EnjoysExperiments(x)) -> GoodAtPlanning(x))", "all x.((Student(x) & EnjoysConductingExperiments(x)) -> GoodAtPlanning(x))", "all x.((Student(x) & EnjoysExperiment(x)) -> GoodAtPlanning(x))", "all x.((Student(x) & EnjoysConductingExperiments(x)) -> GoodAtPlanning(x))", "all x.((Student(x) & EnjoysConductingExperiments(x)) -> GoodAtPlanning(x))", "all x.((Student(x) & EnjoysConductingExperiments(x)) -> GoodAtPlanning(x))", "all x.((Student(x) & EnjoysConductingExperiments(x)) -> GoodAtPlanning(x))", "all x.((Student(x) & EnjoysConductingExperiments(x)) -> GoodAtPlanning(x))", "all x.((Student(x) & EnjoysConductingExperiments(x)) -> GoodAtPlanning(x))", "all x.((Student(x) & EnjoysConductingExperiments(x)) -> GoodAtPlanning(x))", "all x.((Student(x) & EngagesConductingExperiments(x)) -> GoodAtPlanning(x))", "all x.((Student(x) & EnjoysConductingExperiments(x)) -> GoodAtPlanning(x))", "all x.((Student(x) & EnjoysConductingExperiments(x)) -> GoodAtPlanning(x))", "all x.((Student(x) & EnjoysExperiments(x)) -> GoodAtPlanning(x))", "all x.((Student(x) & EnjoysConductingExperiments(x)) -> GoodAtPlanning(x))", "all x.((Student(x) & EnjoysConductingExperiments(x)) -> GoodAtPlanning(x))"]}
{"id": "folio_train_197", "nl": "No student good at planning is awarded the Dean's List. ", "fol": "all x.(GoodAtPlanning(x) -> -AwardedDeansList(x))", "prediction": ["-exists x.(Student(x) & GoodAtPlanning(x) & AwardedDeansList(x))", "-exists x.(Student(x) & GoodAtPlanning(x) & -AwardedDeansList(x))", "-exists x.(Student(x) & GoodAtPlanning(x) & AllocatedDeansList(x))", "-exists x.(Student(x) & GOODAtPlanning(x) & -AwardedDeansList(x))", "-exists x.(Student(x) & GoodAtPlanning(x) & AwardedDeansList(x))", "no student goodatPlanningAwardsDeansList.", "-exists x.(Student(x) & GoodAtPlanning(x) & AwardedDeansList(x))", "all x.((Student(x) & GoodAtPlanning(x)) -> AwardedDeanDeansList(x))", "\u2013 -AllowsDeansList(-(Student(-) & GoodAtPlanning(-))", "-exists x.(Student(x) & GoodAtPlanning(x) & AllowedDeansList(x))", "-exists x.(Student(x) & GoodAtPlanning(x) & AwardedDeansList(x))", "all x.((Student(x) & GoodAtPlanning(x)) -> DeansList(x))", "-exists x.(Student(x) & GoodAtPlanning(x) & AcquiredDeansList(x))", "-exists x.(Student(x) & GoodAtPlanning(x) & AwardedDeansList(x))", "all x.(GoodAtPlanning(x) -> -AwardedDeansList(x))", "all x.((Student(x) & GoodAtPlanning(x)) -> AllocatedDeansList(x))"]}
{"id": "folio_train_198", "nl": "James is either good at chemistry and awarded the Dean's List, or neither good at chemistry nor awarded the Dean's List.", "fol": "-((GoodAtChemistry(James) & -AwardedDeansList(James)) | (-GoodAtChemistry(James) & AwardedDeansList(James)))", "prediction": ["(all x y.((James(x) & GoodAtChemistry(x) & DeansList(x)) -> Award(x,y)) & ((James(x) & GoodAtChemistry(x) & -AwardedDeansList(x)) -> -AwardDeansList(x)))", "all x.((James(x) & ((GoodAtChemistry(x) & DeansList(x)) | (-GoodAtChemistry(x) & DeansList(x)))))", "(GoodAtChemistry(James) & -(GoodAtChemistry(James) & AwardedDeanStatus(James) & -awardedDeanStatus(James)))", "(all x.(James(x) -> (GoodAtChemistry(x) & AwardNewDeansList(x)) | (-GoodAtChemistry(x) & AwardNewDeansList(x))))", "(all x.(Frederick(x) -> GoodAtChemical(x)) | (-GoodAtChemical(x) & AdjuredDeansList(x))))", "(all x.(James(x) -> (GoodAtChemical(x) & AwardDeansList(x))) | (-GoodAtChemical(x) & -AwardedDeansList(x))))", "all x.((James(x) & (goodAtChemistry(x) & AwardedDeanStatus(x)) | (-GoodAtChemistry(x) & AwardedDeanStatus(x)))))", "(GoodAtChemistry(James) | -GoodAtChemistry(James) | -AwardsDeanStatus(James)))", "all x.(Jame(x) -> ((GoodAtChemistry(x) & AwardedDean'sList(x)) | (-GoodAtChemistry(x) & AwardedDean'sList(x))))", "(all x.(James(x) -> (GoodAtChemistry(x) & AwardDeansList(x))) | (-GoodAtChemistry(x) & AwardDeansList(x))))", "(all x.((James(x) & GoodAtChemistry(x)) -> AwardedDeansList(x)) | (-GoodAtChemistry(x) & AwardedDeansList(x))))", "(GoodAtChemistry( James) & AlignedDeansList( James)) & (-(GoodAtChemistry(James) & AlignedDeansList(James)) -> AlignedDeansList(James))))", "(ALL x.(James(x) -> (GoodAtChemistry(x) & AwardDeansList(x))) & -(GoodAtChemistry(x) & AwardDeansList(x))))", "all x.(James(x) -> ((GoodAtChemistry(x) & Award(x) | -(GoodAtChemistry(x) & AtAccept(x)))))", "all x.((James(x) & (GoodAtChemistry(x) | AlignedDeansList(x))) | -AlignedDeansList(x)))", "all x.((James(x) & (GoodAtChemistry(x) & AwardedDeansList(x)) | -(GoodAtChemistry(x) & AwardedDeansList(x))))"]}
{"id": "folio_train_199", "nl": "James is good at planning.", "fol": "GoodAtPlanning(James)", "prediction": ["\"GoodAtPlanning\"", "exists x.(James(x) & GoodAtPlanning(x))", "all x.(James(x) -> GoodAtPlanning(x))", "all x.(James(x) -> GoodAtPlanning(x))", "all x.(James(x) -> GoodAtPlanning(x))", "all x.(Coleman(x) -> GoodAtPlanning(x))", "all x.(James(x) -> GoodAtPlanning(x))", "all x.(James(x) -> GoodAtPlanning(x))", "all x.(Jim(x) -> GoodAtPlanning(x))", "I think James is good at planning.", "James is goodAtPlanning(James) ->.", "all x.(James(x) -> GoodAtPlanning(x))", "-GoodAtPlanning(James)", "all x.(James(x) -> GoodAtPlanning(x))", "all x.(Commander(x) -> GoodAtPlanning(x))", "all x.(James(x) -> GoodAtPlanning(x))"]}
{"id": "folio_train_200", "nl": "James is either good at planning or good at math.", "fol": "(GoodAtPlanning(James) | GoodAtMath(James))", "prediction": ["all x.(James(x) -> (GoodAtPlanning(x) | GoodAtMath(x)))", "all x.(James(x) -> (GoodAtPlanning(x) | GoodAtMathematics(x)))", "(GoodAtPlanning(James) | GoodAtMath(James))", "all x.(James(x) -> (GoodAtPlanning(x) | GoodAtMath(x)))", "all x.(Jimmy(x) -> (GoodAtPlanning(x) | GoodAtMath(x)))", "all x.(James(x) -> (GoodAtPlanning(x) | GoodAtMath(x)))", "all x.(Company(x) -> (GoodAtPlanning(x) | GoodAtMath(x)))", "all x.(James(x) -> (GoodAtPlanning(x) | GoodAtMath(x)))", "all x.(James(x) -> (GoodAtPlanning(x) | GoodAtMath(x)))", "is either goodAtPlanning(James) [James GoodAtMath(James)))", "all x.(James(x) -> (GoodAtPlanning(x) | GoodAtMath(x)))", "(GoodAtPlanning(James) | GoodAtMath(James))", "(GoodAtPlanning(James) | GoodAtMath(James))", "both. ((James(James) & GoodAtPlanning(James)) | GoodAtMath(James)))", "all x.(James(x) -> (GoodAtPlanning(x) | GoodAtMath(x)))", "(GoodAtPlanning(James) | GoodAtMath(James))"]}
{"id": "folio_train_201", "nl": "James is either good at chemistry or good at math.", "fol": "(GoodAtChemistry(James) | GoodAtMath(James))", "prediction": ["all x.((James(x) & (Chemistry(x) | Math(x))) -> GoodAt(x,y))", "all x.(James(x) -> (GoodAtChemistry(x) | GoodAtMath(x)))", "all x.((James(x) & GoodAtChemistry(x)) | GoodAtMathematics(x))", "exists x.(James(x) & (GoodAtChemistry(x) | GoodAtMath(x)))", "all x.(James(x) -> (GoodAtChemistry(x) | GoodAtMathematics(x)))", "all x.(James(x) -> (GoodAtChemistry(x) | GoodAtMath(x)))", "all x.(James(x) -> (GoodAtChemistry(x) | GoodAtMath(x)))", "all x.(James(x) -> (GoodAtChemistry(x) | GoodAtMath(x)))", "all x.(James(x) -> (GoodAtChemical(x) | GoodAtMathematics(x)))", "all x.((James(x) & GoodAtChemistry(x)) | GoodAtMath(x))", "all x.(James(x) -> (GoodAtChemistry(x) | GoodAtMath(x)))", "all x.(James(x) -> (GoodAtChemical(x) | GoodAtMathematics(x)))", "all x.(James(x) -> (goodAtChemistry(x) | GoodAtMath(x)))", "(GoodAtChemistry(James) | GoodAtMath(James))", "all x.(James(x) -> (GoodAtChemistry(x) | GoodAtMath(x)))", "all x.(James(x) -> (GoodAtChemistry(x) | GoodAtMath(x)))"]}
{"id": "folio_train_202", "nl": "If James is good at Chemistry or gets awarded the Dean's List, then James is either good at planning or good at math.", "fol": "((GoodAtChemistry(James) | AwardedDeansList(James)) -> (GoodAtPlanning(James) | GoodAtMath(James)))", "prediction": ["all x.((JamesChemistryOrDeansList(x)) -> (GoodAtPlanning(x) | GoodAtMath(x)))", "all x.((James(x) & GoodAtChemistry(x)) | AwardedDeansList(x)) -> (GoodAtPlanning(x) | GoodAtMath(x)))", "all x.((James(x) & (GoodAtChemistry(x) | AwardedDeansList(x))) -> (GoodAtPlanning(x) | GoodAtMath(x)))", "all x.((James(x) & (GoodAtChemistry(x) | AwardedDeansList(x))) -> (GoodAtPlanning(x) | GoodAtMath(x)))", "all x.((Jimmy(x) & (GoodAtChemistry(x) | AwardedDeansList(x))) -> (GoodAtPlanning(x) | GoodAtMath(x)))", "all x.((Jimmy(x) & (GoodAtChemistry(x) | GrantedDeansList(x))) -> (GoodAtPlanning(x) | GoodAtMath(x)))", "all x.((James(x) & (GoodAtChemical(x) | AgreedDeansList(x))) -> (GoodAtPlanning(x) | GoodAtMathematics(x)))", "all x.(( James(x) & (GoodAtChemistry(x) | GetsAwardedDeansList(x))) -> (GoodAtPlanning(x) | GoodAtMath(x)))", "all x.((Jame(x) & GoodAtChemistry(x)) | AwardedDeansList(x)) -> (GoodAtPlanning(x) | GoodAtMath(x)))", "all x.(((James(x) & GoodAtChemical(x)) | (AwardedDeansList(x) & GoodAtPlanning(x))))", "all x.((James(x) & GoodAtChemistry(x) | AcquiredDeansList(x)) -> (GoodAtPlanning(x) | GoodAtMining(x)))", "all x.((James(x) & (GoodAtChemistry(x) | AwardedDeansList(x))) -> (GoodAtPlanning(x) | GoodAtMath(x)))", "all x.((GoodAtChemistry(x) | AwardedDeansList(x)) -> (GoodAtPlanning(x) | GoodAtMathematics(x)))", "all x.((James(x) & (GoodAtChemistry(x) | GettingAwardedDeansList(x))) -> (GoodAtPlanning(x) | GoodAtMath(x)))", "all x.((James(x) & GoodAtChemistry(x)) | (AwardedDeansList(x) & GoodAtPlanning(x)) | GoodAtMathematics(x)))", "all x.(GoodAtChemistry(x) | (AwardedDeansList(x) & JamesGoodAtPlanning(x) | GoodAtMath(x)))"]}
{"id": "folio_train_203", "nl": "If a Leetcode problem is at the easy level, then its AC rate is lower than 20 percent. ", "fol": "all x.(IsEasyLevel(x) -> ACRateLowerThan20(x))", "prediction": ["all x.((LeetcodeProblem(x) & EasyLevel(x)) -> ACRateLowerThan20Percent(x))", "all x.((LeetcodeProblem(x) & EasyLevel(x)) -> ACRateLowerThan(x,20))", "all x.((LeetcodeProblem(x) & EasyLevel(x)) -> LowerACRateThan20Percent(x))", "all x.((LeetcodeProblem(x) & EasyLevel(x)) -> ACRateLowerThan20Percent(x))", "(EasyLevel(LeetcodeProblem) -> LowerAACRateThan20Percent(LeetcodeProblem))", "all x.(EasyLevel(x) -> LowerACRate(x,y))", "all x.((LeetcodeProblem(x) & EasyLevel(x)) -> LowerAACRate(x,z))", "all x.((LeetcodeProblem(x) & EasyLevel(x)) -> ACRateLowerThan20Percent(x))", "all x.((LeetcodeProblem(x) & EasyLevel(x)) -> LowerACRate(x,y))", "all x.((LeetcodeProblem(x) & EasyLevel(x)) -> -ACRateWithin-20Percent(x))", "all x.((LeetcodeProblem(x) & EasyLocation(x)) -> ACRateLowerThan20Percent(x))", "all x.((LeetcodeProblem(x) & EasyLevel(x)) -> LowerACRate(x,20))", "all x.((LeetcodeProblem(x) & EasyLevel(x)) -> LowerAACRate@20%(x))", "all x.((LeetcodeProblem(x) & EasyLevel(x)) -> ACRateLaterThanPetrocent(x))", "all x.((LeetcodeProblem(x) & EasyLevel(x)) -> ACRateLowerThan(x,30))", "all x.(EasyLevel(x) -> ACRateLessThan20Percent(x))"]}
{"id": "folio_train_204", "nl": "All Leetcode problems that are recommended to novices are easy. ", "fol": "all x.(IsRecommendedToNovices(x) -> IsEasyLevel(x))", "prediction": ["all x.((LeetcodeProblem(x) & RecommendsToNicemen(x)) -> Easy(x))", "all x.((LeetcodeProblem(x) & RecommendedToNovears(x)) -> Easy(x))", "all x.((LeetcodeProblem(x) & RecommendedToNoveagers(x)) -> Easy(x))", "all x.((LeetcodeProblem(x) & RecommendationToNontechnologists(x)) -> Easy(x))", "all x.((LeetcodeProblem(x) & RecommendedForNoveas(x)) -> Easy(x))", "all x.((LeetcodeProblem(x) & RecommendedToNovears(x)) -> Easy(x))", "all x.((LeetcodeProblem(x) & RecommendedToNovels(x)) -> Easy(x))", "all x.((LeetcodeProblem(x) & RecommendedToNonNoveals(x)) -> Easy(x))", "all x.((LeetcodeProblem(x) & RecommendedToNovees(x)) -> Easy(x))", "all x.((LeetcodeProblem(x) & RecommendableToNoveles(x)) -> Easy(x))", "all x.((LeetcodeProblem(x) & RecommendedToNovels(x)) -> Easy(x))", "all x.((LeetcodeProblem(x) & RecommendedToNoveaus(x)) -> Easy(x))", "all x.((LeetcodeProblem(x) & RecommendableToNoveals(x)) -> Easy(x))", "all x.((LeetcodeProblem(x) & RecommendedToNovees(x)) -> Easy(x))", "all x.((LeetcodeProblem(x) & RecommendedToNoveagers(x)) -> Easy(x))", "all x.((LeetcodeProblem(x) & RecommendedToNoveans(x)) -> Easy(x))"]}
{"id": "folio_train_205", "nl": "A Leetode problem is either easy or hard.", "fol": "all x.((IsEasyLevel(x) & -IsHardLevel(x)) | (-IsEasyLevel(x) & IsHardLevel(x)))", "prediction": ["all x.(LeetodeProblem(x) -> (Easy(x) | Hard(x)))", "all x.(LeetodeProblem(x) -> (Easy(x) | Hard(x)))", "all x.(LeetodeProblem(x) -> (Easy(x) | Hard(x)))", "all x.(LeetodeProblem(x) -> (Easy(x) | Hard(x)))", "all x.(LeetodeProblem(x) -> (Easy(x) | Hard(x)))", "all x.(LeetodeProblem(x) -> (Easy(x) | Hard(x)))", "all x.(LeetodeProblem(x) -> (Easy(x) | Hard(x)))", "all x.(LeetodeProblem(x) -> (Easy(x) | Hard(x)))", "all x.(LeetodeProblem(x) -> (Easy(x) | Hard(x)))", "all x.(LeetodeProblem(x) -> (Easy(x) | Hard(x)))", "all x.(LeetodeProblem(x) -> (Easy(x) | Hard(x)))", "all x.(LeetodeProblem(x) -> (Easy(x) | Hard(x)))", "all x.(LeetodeProblem(x) -> (Easy(x) | Hard(x)))", "all x.(LeetodeProblem(x) -> (Easy(x) | Hard(x)))", "all x.(LeetodeProblem(x) -> (Easy(x) | Hard(x)))", "all x.(LeetodeProblem(x) -> (Easy(x) | Hard(x)))"]}
{"id": "folio_train_206", "nl": "Leetcode problems that are starred by more than 1 thousand users are hard.", "fol": "all x.(IsStarredByUsers(x) -> IsHardLevel(x))", "prediction": ["all x.((LeetcodeProblem(x) & StartedByMoreThan1000Users(x)) -> Hard(x))", "all x.((LeetcodeProblem(x) & StartedByMoreThanOneKnight(x)) -> Hard(x))", "all x.((LeetcodeProblem(x) & StartedByMoreThan1000Users(x)) -> Hard(x))", "all x.((LeetcodeProblem(x) & StartedByMoreThan1000Users(x)) -> Hard(x))", "all x.((Behind(x,y) & StartedByMoreThan1000Users(y)) -> Hard(x))", "all x.((LeetcodeProblem(x) & StartedByMoreThanCourt(x)) -> Hard(x))", "all x.((LeetcodeProblem(x) & StartedByMoreThan1000Students(x)) -> Hard(x))", "all x y z.((LeetcodeProblem(x) & StartedBy(y,x) & MoreThan(z,x) & MoreThanOneTenUsers(y)) -> Hard(x))", "all x.((LeetcodeProblem(x) & StartedByRecommendedClients(x) & MoreThan1000Users(x)) -> Hard(x))", "all x.((LeetcodeProblem(x) & StartedByMoreThanOneKunsUsers(x)) -> Hard(x))", "all x.((LeetcodeProblem(x) & StartedByMoreThan1000(x)) -> Hard(x))", "all x.((LeetcodeProblem(x) & StartedByMoreThan1000Users(x)) -> Hard(x))", "all x y z.((LeetcodeProblem(x) & StartedByMoreThan(x,Y,z) & MoreThan(y,x)) -> Hard(x))", "all x.((LeetcodeProblem(x) & StartedByMoreThan1000Users(x)) -> Hard(x))", "all x.((LeetcodeProblem(x) & StartedByMoreThan1000Users(x)) -> Hard(x))", "all x.((LeetcodeProblem(x) & StartedByMoreThan1000Users(x)) -> Hard(x))"]}
{"id": "folio_train_207", "nl": "2Sum is recommended to novices. ", "fol": "IsRecommendedToNovices(Twosum)", "prediction": ["all x.(2Sum(x) -> RecommendedToNovels(x))", "all x.((Newsletter(x) & 2Sum(x)) -> RecommendedTo(x,y))", "all x.(2Sum(x) -> RecommendedToNovees(x))", "all x.((Birthbuster(x) & Nomad(x)) -> RecommendsTo2Sum(x))", "all x.((2Sum(x) & Novice(y)) -> RecommendedTo(x,y))", "BothSum(x) -> RecommendedForNoveles(x))", "(RecommendedForNovells(to2Sum))", "all x.(Sum(x) -> RecommendedToNovees(x))", "all x.((Novel(x) & 2Sum(x)) -> RecommendedTo(x,y))", "2Sum is recommended to Newcomers(x)", "2Sum, Inc. & Novice(needs2)", "all x.((2Sum(x) & Newbie(x)) -> RecommendedFor(x))", "all x.((2Sum(x) & Newbie(x)) -> RecommendedTo(x,y))", "(RecommendedToNoveles(2Sum) & Newbies(2Sum))", "all x.(Bulletin(x) -> RecommendedToNovele(x))", "all x y.((Sum(x) & Novice(y)) -> RecommendedTo(x,y))"]}
{"id": "folio_train_208", "nl": "4Sum is starred by more than 1 thousand users.", "fol": "IsStarredByUsers(Foursum)", "prediction": ["all x.((4Sum(x) & StartedByMoreThan1000Users(x)) -> Started(x))", "all x.((FerriedByMoreThan1000Users(x)) -> Started(x))", "4Sum is starred(x) & exists y.(User(y,x) & MoreThan(y,x)))", "all x.((Sum(x) & StartedByMoreThanTen(x)) -> StartedBy(x,y))", "All x.(4Sum(x) -> StartedByMoreThan(x,1000))", "all x.((4Sum(x) & StartedByMoreThan1000(x)) -> StartedBy(x,2))", "all x.((4Sum(x) & starredByMoreThanOneKen(x)) -> Started(x))", "all x.((Sum(x) & StartedBy(x,means1000)) -> StartedBy(x,means1000))", "all x y.(Order(x,y) & User(y) & StartedBy(x,y) & MoreThan(x,y))", "all x.((4Sum(x) & StartedByMoreThan1000Users(x)) -> StartedBy(x))", "all x.((Sum(x) & StartedBy(x,y)) -> MoreThan(y,x))", "all x.((4Sum(x) & StartedByMoreThan1000Users(x)) -> StartedBy(x,Y))", "all x.((Has(x,y) & User(y)) -> StartedBy(x,y))", "all x.((User(x) & StartedBy(x,000)) -> 4Sum(x))", "all x.((Sum(x) & StartedByMoreThan(x,1000)) -> StartedBy(x,1))", "all x.((4Sum(x) & StartedByMoreThan(x,1000)) -> StartedBy(x,4))"]}
{"id": "folio_train_209", "nl": "2Sum is a Leetcode problem with an easy level.", "fol": "IsEasyLevel(Twosum)", "prediction": ["all x.((Sum(x) & LeetcodeProblem(x) & EasyLevel(x)) -> 2Sum(x))", "2Sum is a LeetcodeProblem(x) & EasyLevel(x))", "2Sum is a LeetcodeProblemWithEasyLevel(x))", "all x.(Sum(x) -> (LeetcodeProblem(x) & EasyLevel(x)))", "2Sum is a LeetcodeProblem(at) & EasyLevel(at))", "2Sum(x) -> (LeetcodeProblem(x) & EasyLevel(x)))", "all x.(LeetcodeProblem(x) & EasyLevel(x) -> 2Sum(x))", "all x.((LeetcodeProblem(x) & EasyLevel(x)) -> 2Sum(x))", "All x.((LeetcodeProblem(x) & EasyLevel(x)) -> 2Sum(x))", "(LeetcodeProblem(sum) & EasyLevel(sum))", "all x.(Sum(x) -> (LeetcodeProblem(x) & EasyLevel(x)))", "2Sum is a LeetcodeProblem(x) & HasEasyLevel(x))", "2Sum is an EasyLevelLeafcodeProblem(Solid)", "2Sum is a LeetcodeProblem(2) & EasyLevel(2))", "2Sum is a LeetcodeProblem(2) & EasyLevel(2))", "all x.(2Sum(x) -> (LeetcodeProblem(x) & EasyLevel(x)))"]}
{"id": "folio_train_210", "nl": "4Sum is a Leetcode problem recommended to the novice.", "fol": "(LeetcodeProblem(Foursum) & IsRecommendedToNovices(Foursum))", "prediction": ["all x.(Sum(x) -> RecommendedToNewbie(x))", "all x.((LeetcodeProblem(x) & Novice(x)) -> 4SumRecommendation(x))", "all x.(4Sum(x) -> LeetcodeProblemRecommendation(x))", "all x.(4Sum(x) -> LeetcodeProblemRecommendatedToNoveau(x))", "all x.(4Sum(x) -> LeetcodeProblem(x))", "all x.(Sum(x) -> (LeetcodeProblem(x) & RecommendedToNovell(x)))", "all x.(LeetcodeProblem(x) -> RecommendedToNovelty(x))", "all x.(4Sum(x) -> RecommendedToNeophytcode(x))", "all x.((LeetcodeProblem(x) & Novice(x)) -> 4Sum(x))", "all x.(4Sum(x) -> LeetcodeProblemRecommendatedForNovel(x))", "all x.( 4Sum(x) -> LeetcodeProblemRecommendedForNoveen(x))", "all x.((LeetcodeProblem(x) & RecommendedToNeptune(x)) -> 4Sum(x))", "All x.(4Sum(x) -> (LeetcodeProblem(x) & RecommendedToNovee(x)))", "all x.(4Sum(x) -> LeetcodeProblemRecommendation(x))", "all x.((LeetcodeProblem(x) & Newbie(x)) -> 4Sum(x))", "all x.((LeetcodeProblem(x) & Newbie(x)) -> NeedsRecommended(x))"]}
{"id": "folio_train_211", "nl": "2Sum has an AC rate higher than 20 percent.", "fol": "-ACRateLowerThan20(Twosum)", "prediction": ["All x.(Sum(x) -> -ACRate(x,200))", "all x.((Sum(x) & ACRateHigherThan20Percent(x)) -> Has(x,2))", "1SumCycle(Sum) -ACRateHigherThan(Sum,20))", "all x.(2Sum(x) -> HasACRateHigherThan(x,20))", "2Sum (acRateHigherThan20Percent)", "2SumCurrent(/2,20)", "all x.(Sum(x) -> HigherADCrateThan(x,20))", "2Sum has ACRateHigherThan20Percent (ClearRate(2) & ComponentPotential(2))", "all x.((Sum(x) & ACRateHigherThan20Percent(x)) -> HasACRateHigherThan20Percent(x))", "all x.((Sum(x) & ACRateHigherThan(x,20)) -> -ElectricRate(x))", "all x.(Sum(x) -> HigherConditionsThan20Percent(x))", "2Sum-RATEXPORK(x) & HigherThan20Percent(x))", "all x.(Sum(x) -> ACRateHigherThan(x,200))", "2SumHasACRateHigherThan(2Percent)", "all x.(Sum(x) -> ACRateLowerThan(x,20))", "2Sum & ACRateHigherThan(x,20)"]}
{"id": "folio_train_212", "nl": "All rental cars cost the renter money.", "fol": "all x.(RentCar(x,Car) -> CostToRenter(x,Money))", "prediction": ["all x.(RentingCar(x) -> CostsRenterMoney(x))", "all x.(RentalCar(x) -> CostsRenterMoney(x))", "all x.(RentalCar(x) -> CostsRenterMoney(x))", "all x y.((RentalCar(x) & Renter(y)) -> CostsMoney(x,y))", "all x y.((Car(x) & Renter(y)) -> CostsMoney(x,y))", "all x.(RentalCar(x) -> CostsRenterMoney(x))", "all x.((Car(x) & Renter(y)) -> CostsMoney(x,y))", "all x.(Car(x) -> CostsRenterMoney(x))", "all x.(RentalCar(x) -> CostsRenterMoney(x))", "all x.(RentalCar(x) -> CostsRenterMoney(x))", "all x.(RentalCar(x) -> CostsRenterMoney(x))", "all x.(RentalCar(x) -> CostsRenterMoney(x))", "all x y.((ConditionCarhie(x) & Renter(y)) -> CostsMoney(x,y))", "all x.(RentalCar(x) -> CostsPeopleMoney(x))", "all x y.((RentalCar(x) & Renter(y)) -> CostsMadness(x,y))", "all x.(RentalCar(x) -> CostsRenterMoney(x))"]}
{"id": "folio_train_213", "nl": "Whenever Sarah goes to Vermont, Sarah drives there.", "fol": "(GoesToLocation(Sarah,Vermont) -> DriveToLocation(Sarah,Vermont))", "prediction": ["all x y.((SarahGoesTo(x,y) & Vermont(y)) -> Drives(x,y))", "all x.((SarahGoesTo(x) & Vermont(x)) -> DrivesThere(x))", "all x y.((Sarah(x) & Vermont(y)) -> Drives(x,y))", "all x y.((Sarah(x) & Vermont(y)) -> DrivesTo(x,y))", "all x y.((Sarah(x) & Vermont(y) & GoesTo(x,y)) -> DrivesTo(x,y))", "all x.((Sarah(x) & GoesTo(x,Venice)) -> DrivesThere(x,Ventil))", "all x.((SarahGoesTo(x,VT)) -> DrivesTo(x,VT))", "all x.((SharksTo(x,VT) & SarahCoaches(x,Venice)) -> DrivesTo(x,Valleyn))", "all x.((SharonGoesTo(x,Volton)) -> DrivesThere(x,Volton))", "all x y.((Sarah(x) & Vermont(y)) -> Drives(x,y))", "all x.((Sarah(x) & GoesTo(x,VT)) -> DrivesThere(x,VT))", "all x y.((Sarah(x) & Vermont(y)) -> Drives(x,y))", "all x.(GoogleSarahSally(x) -> DrivesTo(x,Venice))", "all x y.((Sarah(x) & Vermont(y)) -> DrivesThere(x,y))", "all x y.((Sarah(x) & Vermont(y)) -> DrivesTo(x,y))", "all x y.((SarahGoes(x) & Vermont(y)) -> DrivesThere(x,y))"]}
{"id": "folio_train_214", "nl": "For someone who does not own a car to drive somewhere, they must either borrow a car or rent a car.", "fol": "all x y.((((-OwnCar(x,Car) & DriveToLocation(x,y)) -> BorrowCar(x,Car)) & -RentCar(x,Car)) | (-((-OwnCar(x,Car) & DriveToLocation(x,y)) -> BorrowCar(x,Car)) & RentCar(x,Car)))", "prediction": ["all x.((Person(x) & -OwnsCar(x) & DrivesSomewhere(x)) -> (BorrowCar(x) | RentCar(x)))", "all x.((Person(x) & -OwnsCar(x)) -> (BorrowsCar(x) | RentsCar(x)))", "all x.((TrustsPerson(x) & -OwnsCar(x)) -> (BorrowCar(x) | RentCar(x)))", "all x.((DoesHelenCar(x) & DrivesSomewhere(x)) -> (BorrowsCar(x) | RentsCar(x)))", "all x y.((Person(x) & -OwnsCar(x) & Drives(y)) -> (BorrowCar(x,y) | RentCar(x,y)))", "all x.((Person(x) & -OwnsCar(x)) -> (BorrowsCar(x) | RentsCar(x)))", "all x.((Sibling(x) & -OwnCar(x)) -> (BorrowsCar(x) | RentCar(x)))", "all x y.((Drives(x) & Person(y) & -OwnsCar(y)) -> (BorrowsCar(y,x) | RentsCar(x,y)))", "all x.((DoesNotOwnCar(x) & DrivesSomewhere(x)) -> (BorrowsCar(x) | RentsCar(x)))", "all x y.(MustDrive(x) -> ((Person(x) & -OwnsCar(x) & Drives(x)) & (BorrowCar(y) | RentCar(y))))", "all x.((Person(x) & -OwnsCar(x) & DrivesSomewhere(x)) -> (BorrowCar(x) | RentCar(x)))", "all x.((Person(x) & -OwnsCar(x)) -> (BorrowsCar(x) | RentsCar(x)))", "all x.((Person(x) & -OwnsCar(x)) -> (BorrowCar(x) | RentCar(x)))", "all x.((Person(x) & -OwnsCar(x) & DrivesWhere(x)) -> (BorrowsCar(x) | RentsCar(x)))", "all x.((Person(x) & -OwnsCar(x)) -> (BorrowsCar(x) | RentsCar(x)))", "all x.(DoesNotOwnCar(x) -> (DrivesAway(x) & (BorrowsCar(x) | RentsCar(x))))"]}
{"id": "folio_train_215", "nl": "Sarah doesn\u2019t own a car.", "fol": "-OwnCar(Sarah,Car)", "prediction": ["((Sarah(Sarah) | Car(Sarah)))", "Sarah doesn\u2019t OwnCar(Sarah)", "Sarah doesn\u2019t OwnCar(Sarah)", "-OwnsCar(Sarah)", "Sarah -OwnsCar(Sarah)", "(-OwnCar(Sarah))", "[Sarah_Frontcar(Sarah) | -OwnCar(Sarah))", "(-BelongsTo(Sasha,Car))", "Sarah -OwnsCar(Sarah).", "all x.((Sarah(x) & -HasCar(x)) -> -Owns(x,sarah))", "Sarah((Sarah) & -OwnsCar(Sarah))", "-> -HasCar(Sarah))", "(-OwnsCar(Sarah,Sarah))", "-OwnsCar(Sarah)", "(-OwnsCar(Sarah,Sarah))", "All x.(Sarah(x) -> -HasCar(x))"]}
{"id": "folio_train_216", "nl": "Sarah never borrows a car to go camping.", "fol": "all x.(GoingCamping(Sarah,x) -> -BorrowCar(Sarah,Car))", "prediction": ["-(BorrowsCar(Sarah) & Camps(Sarah))", "-BorrowsCarToGoCamping(Sarah)", "all x.(Shadow(x) -> NeverBorrowsCarToCamp(x))", "Sarah -BorrowsCar(she) -> AlwaysGoesCamping(Sarah))", "all x.(Sarah(x) -> -BorrowsCarToGoCamping(x))", "all x.((Sarah(x) & RentsCar(x)) -> NeverBelongsToCamping(x))", "all x.((Sarah(x) & Car(y)) -> -BorrowsToGoCamping(x,y))", "all x y.((Sarah(x) & Car(y)) -> -Borrows(x,y))", "all x.((Sarah(x) & Car(x)) -> NeverBorrows(x,Castle))", "all x y.((Sarah(x) & Car(y)) -> -Borrows(x,y))", "all x y.((Sarah(x) & Car(y)) -> NeverBorrows(x,y))", "all x.((Sarah(x) & -Borrow(x,car,camping)) -> -Borrows(x,car,camping))", "all x y.((Sarah(x) & Car(y) & NeverBorrows(x,y)) -> Camping(y))", "all x.((Sarah(x) & Car(y)) -> NeverBorrows(x,y))", "all x y.((Marriage(x) & Car(y)) -> -Borrows(x,y))", "(-BorrowsCar(sarah,s) -> Camping(s))"]}
{"id": "folio_train_217", "nl": "Sarah is going to go camping in Vermont this weekend.", "fol": "GoingCamping(Sarah,Vermont)", "prediction": ["Sarah is going to go camping in Vermont this weekend.", "(GoesCampingInVT(Sarah) & WillFindBeautifulWeekend(Sarah))", "Camping in Vermont \u2013 The WeekendToBeSarah(s)", "all x y.((Sarah(x) & Vermont(y)) -> GoingToCamp(x,y))", "Sarah is going to GoCampingIn(Samford,VT)", "Sarah is going camping in Vermont this weekend.", "all x.((Sarah(x) & CampsIn(x,Veterans)) -> GoingToGo(x,Ventiland))", "(GoesCampingIn(Sarah,Vermont) & ThisWeekend(Sarah,Vermont))", "Sarah is going to camp in Vermont this weekend.", "the wwend.", "(CampingIn(Sarah,VT) -Going(Sarah,VT))", "(GoesCamping(Sarah) & WillGoCampingIn(Sarah,VT))", "Sarah is going to goCampingInVT.", "Sarah is going to camp in Vermont this weekend!", "(GoesCamping(Sarah) & TravelsTo(Sarah,Vermont))", "Sarah will go camping in Vermont this weekend."]}
{"id": "folio_train_218", "nl": "To go camping somewhere, you must go to that place.", "fol": "all x y.(GoingCamping(x,y) -> GoesToLocation(x,y))", "prediction": ["all x y z.((CampingPlace(x) & Place(y) & Place(z)) -> MustGo(x,y,z))", "all x.(Camping(x) -> GoToPlace(x))", "all x y.(Camping(x) -> exists z.(Place(y) & Camping(z) & Go(x,y,z))))", "all x y.((Place(x) & Campsite(y)) -> MustGoTo(x,y))", "all x y z.((CampingPlace(x) & Place(y) & Place(z)) -> MustEnter(x,y,z,y))", "all x.(GivingAway(x) -> Ago(x))", "all x.(Camping(x) -> MustGoToPlace(x))", "all x.(Camping(x) -> Go(x,y))", "all x y.((CampingPlace(x) & CampingPlace(y)) -> GoTo(x,y))", "all x y.((Place(x) & Camping(y)) -> MustGoToTo(x,y))", "all x.(Camping(x) -> GoToPlace(x))", "all x.(Camping(x) -> MustGoToPlace(x))", "all x.(CampingPlace(x) -> GoTo(x,Place,Place))", "all x.(GoCamping(x) -> GoToPlace(x))", "all x.(Camping(x) -> GoToPlace(x))", "all x.(Camping(x) -> GoToPlace(x))"]}
{"id": "folio_train_219", "nl": "Sarah will spend money this weekend.", "fol": "CostToRenter(Sarah,Money)", "prediction": ["Sarah will spend money this weekend.", "all x.(Sarah(x) -> SpendsMoney(x))", "Sarah will spend money on Saturday.", "this weekend.", "all x.(Sarah(x) -> (SpreadsMoney(x) & -SalesMoney(x) & Weekend(x)))", "all x.(Sarah(x) -> WillSpreadMoneyThisWeekend(x))", "all x.((Sarah(x) & Weekend(x)) -> SpendsMoney(x))", "Sarah will spends money this week.", "all x.((Sarah(x) & SpendMonth(x)) -> Saturday(x))", "Sarah will spend money this weekend.", "(Sarah willSpreadMoney(shelter) & Starts(shelter))", "Sarah will spends money this week.", "Sarah wird dieses Wochenende spendsMoney.", "(Sarah WillSpreadMoneyThisWeekend(s) & SpendsMoney(s))", "(SpringSarah(Sarah) -> SpendMoney(Sarah))", "Sarah wird dieses Wochenende SpendingMoney(ish) -> SpendsSarah."]}
{"id": "folio_train_220", "nl": "All people who attend weddings are getting married or have friends who are getting married.", "fol": "all x.(AttendWeddings(x) -> IsGettingMarried(x))", "prediction": ["all x.(EmergencyToWedding(x) -> (GettingMarriage(x) | HasFriendsGivingMarriage(x)))", "all x.((Person(x) & AttendsWedding(x)) -> (Marriage(x) | (Marriage(x) & Friends(x)))))", "all x.((Person(x) & AttendsWeddings(x)) -> (GettingMarried(x) | HasFriends(x)))", "all x.((Person(x) & AttendsWeddings(x)) -> (GettingMarried(x) | (Friends(x) & GetsMarried(x)))))", "all x.((Person(x) & AttendsWeddings(x)) -> (GettingMarried(x) | HasFriends(x(x)))", "all x.((AttendsWeddings(x) & (GetsMarried(x) | HasFriendsGetMarried(x))) -> (Marriage(x) & -GettingMarried(x)))", "all x.(AttendsWeddings(x) -> (GettingMarried(x) | HasFriends(x) & GettingMarried(x)))", "all x.((Person(x) & AttendsWedding(x)) -> (GettingMarried(x) | HavingFriends(x) & GetsMarried(x)))", "all x.(AttendsWedding(x) -> (GettingMarried(x) | HasFriends(x) & GetsMarried(x)))", "all x.(Wedding(x) -> (Attends(x,Weddings) | HasFamily(x,Weddings)))", "all x.((Person(x) & AttendsWedding(x)) -> (GettingMarried(x) | HasFriend(x) & GettingMarried(x)))", "all x.((Person(x) & AttendsWedding(x)) -> (GettingMarried(x) | HavingFriends(x) & GetsMarried(x)))", "all x.((AttendeesWeddings(x) & (GetsMarried(x) | HasFriends(x,Married))) -> GetsMarried(x))", "all x.(AttendsWeddings(x) -> (GettingMarried(x) | HasFriendsGettingMarried(x)))", "all x.((Person(x) & HasFriends(x,y) & AttendsWeddings(x)) -> (GettingMarried(x) | GettingMarried(y)))", "all x.((Person(x) & AttendsWeddings(x)) -> (GettingMarried(x) | HasFriends(x,getmarried)))"]}
{"id": "folio_train_221", "nl": "No preteens and other young children are getting married or have friends who are getting married.", "fol": "all x.(IsPreTeen(x) -> -IsGettingMarried(x))", "prediction": ["all x.((Preteen(x) & YoungChild(x)) -> (GetsMarried(x) | HasFriendsMarriage(x)))", "all x y.((Preteen(x) & YouthChild(y)) -> (-GetsMarried(x) | HasFriends(y,x)))", "all x.((Preteen(x) & YoungChild(x)) -> (-GettingMarried(x) | HasFriends(x) & GettingMarried(x)))", "all x.((Preteen(x) & YoungChild(x)) -> (-Marriage(x) | HasFriends(x,Marriage))))", "-exists x.(Preteen(x) & YoungChild(x) & -Allows(x,MarriedInParents,FriendsInMaritals))", "all x.((Preteen(x) & YoungChild(x)) -> (-GettingMarried(x) | HasFriends(x) & Married(x)))", "all x.((Preteen(x) & YoungChild(x)) -> (-GetsMarried(x) | HasFriendsGetMarried(x)))", "all x.((Preteen(x) & YoungChild(x)) -> (-GettingMarried(x) | (-Grandparents(x) & Married(x)))))", "all x.((Preteen(x) & YoungChild(x)) -> (-GettingMarried(x) | HasFriends(x) & GettingMarried(x)))", "all x.(PreteenCollege(x) -> (-GetsMarried(x) | HasFriends(x) & GetsMarried(x)))", "all x.((Preteen(x) & YoungChild(x) & -HasFriends(x)) -> Wed(x))", "all x.((Preteen(x) & YoungChild(x)) -> (-GetsMarried(x) | HasFriendsWhoGetMarried(x)))", "all x y.((Preteen(x) & YoungChild(y) & Married(x) & -(Married(y) & Friends(y))) -> -Married(x))", "all x.((Preteen(x) & YoungChild(x)) -> (NoFriend(x) & NoFriend(x) & NoFriend(x) & NoFriend(x)))", "-exists x.(PreteensAndYoungChildren(x) & -(GettingMarried(x) | HasFriends(x))))", "all x.((Preteen(x) & AllOtherYoungChildren(x)) -> (-GettingMarried(x) | HasFriendsGettingMarried(x)))"]}
{"id": "folio_train_222", "nl": "If people enjoy celebrating life milestone events with other people, then they attend weddings.", "fol": "all x.(EnjoyCelebratingMilestones(x) -> AttendWeddings(x))", "prediction": ["all x.(CelebratingLifeMilestoneEventsWithOtherPeople(x) -> AttendsWeddings(x))", "all x y.((Person(x) & Person(y) & CelebratesLifeMilestoneEventsWith(x,y)) -> AttendsWeddings(x))", "all x y.((Person(x) & Person(y) & EnjoysCelebratingLifeMeasurestoneEvents(x,y)) -> AttendsMeeting(x,y))", "all x.(EnjoysLivingMilestoneEvents(x) -> AttendsWeddings(x))", "all x.((PopularPeople(x) & EnjoysCelebratingLifeMilestoneEventsWithOthers(x)) -> AttendsWeddings(x))", "all x.((People(x) & EnjoysCelebratingLifeMilestoneEvents(x)) -> AttendsWeddings(x))", "all x y.((Person(x) & Person(y) & CelebratesLifeMilestoneEvents(x,y)) -> AttendsWeddings(x))", "all x.((Person(x) & CelebratesLifeMilestoneEvents(x)) -> AttendsWedding(x))", "all x y.((Person(x) & Person(y) & CelebratesLifeMilestoneEvents(x,y)) -> AttendsWedding(x))", "all x.((People(x) & CelebratesLifeMilestoneEvents(x) | CelebratesLivesmiles(x))) -> AttendsWeddings(x))", "all x y.((People(x) & People(y)) -> EnjoysMilestoneEvents(x,y))", "all x y.((People(x) & Person(y)) -> EnjoysCelebratingLifeMilestoneEventsWith(x,y))", "all x y.((People(x) & Person(y) & EnjoyRollingEvents(x,y)) -> AttendWeddings(x))", "all x y.((Person(x) & Person(y) & EnjoysCelebratingLifeMilestoneEvents(x,y)) -> AttendsWeddings(x))", "all x.((People(x) & EnjoysLifeMilestoneEvents(x)) -> AttendsWedding(x))", "all x y.(EasyTogether(x) -> AttendWeddings(y))"]}
{"id": "folio_train_223", "nl": "If people are fond of large organized group functions, then they enjoy celebrating life milestone events with other people.", "fol": "all x.(FondOfLargeGatherings(x) -> EnjoyCelebratingMilestones(x))", "prediction": ["all x y.((People(x) & LargeOrganizedGroupFunctions(x) & SmallGroupFunctions(x)) -> EnjoysCelebratingLifeMilestoneEvents(x,y))", "all x.((Person(x) & FondOfLargeOrganizedGroupFunctions(x)) -> CelebratesLifeMilestoneEventsWithOtherPeople(x))", "all x.((Person(x) & FondOfLargeOrganizedGroupFunctions(x)) -> CelebratesLifeMilestoneEvents(x))", "all x.(FavoriteOfLargeOrganizedGroupFunctions(x) -> CelebrateLifeMilestoneEventsWithOthers(x))", "all x.((FavoriteOfLargeOrganizedGroupFunctions(x) & EnjoysLifeMeltimeterEvents(x)) -> CelebratesLargeGroupEvents(x))", "all x.((People(x) & FondOfLargeOrganizedGroupFunctions(x)) -> EnjoysCelebrationOfLifeMealstoneEvents(x))", "all x.(FantOfLargeOrganizedGroupFunctions(x) -> CelebratesLifeMilestoneEventsWithOthers(x))", "all x.((Person(x) & FondOfLargeOrganizedGroupFunctions(x)) -> EnjoysCelebratingLifeMilestoneEvents(x))", "all x.((Friend(x) & FondOfOrganizedGroupFunctions(x)) -> EnjoysCelebratingLifeMilestoneEvents(x))", "all x.(FantOfLargeOrganizedGroupFunctions(x) -> EnjoysTomorrowEvent(x))", "all x.((Person(x) & FondOfLargeOrganizedGroupFunctions(x)) -> EnjoysCelebratingLifeMilestoneEvents(x))", "all x.(FavoriteOfLargeOrganizedGroupFunctions(x) -> CelebrateMilestoneEventsWithOtherPeople(x))", "all x.((FantOfLargeOrganizedGroupFunctions(x) & EnjoysCelebratingLifeMilestoneEventsWithOtherPeople(x)) -> CelebratesMilestoneEvents(x))", "all x.((Person(x) & FondOfLargeOrganizedGroupFunctions(x)) -> CelebratesLifeMemorialEventsWithOtherPeople(x))", "all x.(FatOfLargeOrganizedGroupFunctions(x) -> EnjoysCelebrationOfLifeMeasurementEventsWithOtherPeople(x))", "all x.(FogOf(x,largeOrganizedGroupFunctions) -> CelebrateLifeMilestoneEvents(x))"]}
{"id": "folio_train_224", "nl": "All people who are outgoing and very spirited are fond of large organized group functions.", "fol": "all x.(IsOutgoing(x) -> FondOfLargeGatherings(x))", "prediction": ["all x.((Outgoing(x) & VeryTithed(x)) -> FondOfLargeOrganizedGroupFunctions(x))", "all x.((Outgoing(x) & VeryTirant(x)) -> FondOfAttendedGroupFunctions(x))", "all x.((Outgoing(x) & VeryThirsty(x)) -> FondOfLargeOrganizedGroupFunctions(x))", "all x.((Outgoing(x) & VeryTspirited(x)) -> FondOfLargeOrganizedGroupFunctions(x))", "all x.(OutgoingAndThirstyPerson(x) -> FondOfOrganizedGroupFunctions(x))", "all x.((Outgoing(x) & VeryTspirited(x)) -> FondOfGraduateFunctions(x))", "all x.((Outgoing(x) & VeryStirred(x)) -> FondOfLargeOrganizedGroupFunctions(x))", "all x.((People(x) & Outgoing(x) & VeryStilt(x)) -> FondOfLargeOrganizedGroupFunctions(x))", "all x.((Outgoing(x) & VeryStirring(x)) -> FondOfLargeOrganizedGroupFunctions(x))", "all x.((Person(x) & Outgoing(x) & VeryThoughtful(x)) -> FondOfLargeOrganizedGroupFunctions(x))", "all x.((People(x) & Outgoing(x) & VeryStirred(x)) -> FondOfOrganizedGroupFunctions(x))", "all x.((People(x) & Outgoing(x) & VeryThirsty(x)) -> FondOfLargeOrganizedGroupFunctions(x))", "all x.((Outgoing(x) & VeryWorried(x)) -> FondOfLargeOrganizedGroupFunctions(x))", "all x.((Outgoing(x) & VeryThirsty(x)) -> FondOfLargeOrganizedGroupFunctions(x))", "all x.((Person(x) & Outgoing(x) & VeryStylish(x)) -> FondOfOrganizedGroupFunctions(x))", "all x.((Outgoing(x) & VeryStylish(x)) -> FondOfLargeOrganizedGroup(x))"]}
{"id": "folio_train_225", "nl": "If Carol is not both a pre-teen or other young child and attends weddings, then Carol is not getting married or has friends who are getting married.  ", "fol": "(-(IsPreTeen(Carol) & AttendWeddings(Carol)) -> -IsGettingMarried(Carol))", "prediction": ["all x.((Preteen(x) | YoungChild(x)) & AttendsWeddings(x)) -> (-GettingMarried(x)) & -HasFriends(x)))", "all x.((Preteen(x) | YoungChild(x)) & AttendsWeddings(x)) -> (-GettingMarried(x) | (-GettingMarried(x) & HasFriends(x)))))", "all x.((Carol(x) & -Preteen(x) & -OtherYoungChild(x) & AttendsWeddings(x)) -> (-GettingMarried(x) & -HasFriendsGettingMarried(x)))", "all x y.((Preteen(x) | YoungChild(x)) & AttendsWeddings(x)) -> (-GivesMarried(x) | HasFriendsGettingMarried(x)))", "all x.((Preteen(x) | YoungChild(x) & AttendsWeddings(x)) -> (-GettingMarried(x) | HasFriends(x))))", "all x.((PreTen(x) | YoungChild(x)) & AttendsWeddings(x)) -> (-GettingMarriage(x) | HasFriendsWhoGetMarriage(x)))", "all x.((Color(x) & -PreteenOrYoungChild(x) & AttendsWeddings(x)) -> (-GettingMarried(x) | HasFriendsGoingMarried(x)))", "all x.((Preteen(x) | YoungChild(x) & AttendsWeddings(x)) -> -(GettingMarried(x) | HasFriends(x))))", "all x.((Preteen(x) | YoungChild(x)) & AttendsWeddings(x)) -> (-GettingMarried(x) | HasFriendsGettingMarried(x)))", "all x.((Preteen(x) | YoungChild(x) & AttendsWeddings(x)) -> (-Tengging(x) | HasFriends(x)))", "all x y.((Coal(x) & -(Preteen(x) | YoungChild(x) & AttendsWeddings(x)) & (-GettingMarried(x) | HasFamous(x))) -> -Married(x))", "all x.(((Preteen(x) & OtherYoungChild(x) & AttendsWeddings(x) & -GettingMarried(x)) | HasFriends(x)) -> -GettingMarried(x))", "all x.((Caroline(x) & -(Preteen(x) | YoungChild(x)) & AttendsWeddings(x))) -> -(GettingMarried(x) | HasFamilies(x))))", "all x.((Preteen(x) | YoungChild(x) & AttendsWeddings(x)) -> (-GettingMarried(x) | HasFriendsGettingMarried(x)))", "all x.((Preteen(x) | YoungChild(x)) & AttendsWeddings(x)) -> (-GettingMarried(x) | HasFriendsGettingMarried(x)))", "all x.((Preteen(x) | YoungChild(x)) & AttendsWeddings(x)) -> (-GetsMarried(x) | HasFriendsGetMarried(x)))"]}
{"id": "folio_train_226", "nl": "Carol is outgoing and very spirited.", "fol": "(IsOutgoing(Carol) & Spirited(Carol))", "prediction": ["(Outgoing(Carol) & Spirited(Carol))", "all x.((Carolyn(x) & Outgoing(x) & VeryStirring(x)) -> Outgoing(x))", "all x.(Caroline(x) -> (Outgoing(x) & VeryStirring(x)))", "All x.(Caroline(x) -> (Outgoing(x) & QuiteSturdy(x)))", "all x.(Carolyn(x) -> (Outgoing(x) & VeryTidy(x)))", "all x.(Caroline(x) -> (Outgoing(x) & VeryStylish(x)))", "(Outgoing(Carol) & -Tidy(Carol))", "all x.(Caroline(x) -> (Outgoing(x) & Stive(x)))", "(Outgoing(Caroline) & VeryStoic(Caroline))", "(Outgoing(Caroline) & VeryStirring(Caroline))", "Carol is outgoing and very spirited.", "all x.(Carolyn(x) -> (Outgoing(x) & VeryTithing(x)))", "all x.(Caroline(x) -> (Outgoing(x) & Stirring(x)))", "all x.(Carolyn(x) -> (Outgoing(x) & VeryStoic(x)))", "all x.(Carolyn(x) -> (Outgoing(x) & VeryStirky(x)))", "all x.(Caroline(x) -> (Outgoing(x) & VeryStylish(x)))"]}
{"id": "folio_train_227", "nl": "Carol is either a preteen or other young child.", "fol": "(IsPreTeen(Carol) | YoungChild(Carol))", "prediction": ["all x.(Carole(x) -> (Preteen(x) | YoungChild(x)))", "all x.(Carol(x) -> (Preteen(x) | YoungChild(x)))", "all x.((Carolyn(x) & Preteen(x)) | YoungChild(x))", "exists x.(Caroline(x) & (Preteen(x) | YoungChild(x)))", "all x.(Caroline(x) -> (Preteen(x) | YoungChild(x)))", "all x.((Clark(x) & Preteen(x)) | YoungChild(x)) -> YoungChild(x))", "all x.(Carol(x) -> (Preteen(x) | YoungChild(x)))", "all x.(Carol(x) -> (Preteen(x) | YoungChild(x)))", "all x.((Carolyn(x) & Preteen(x)) | OtherYoungChild(x))", "exists x.(Carol(x) & (Preteen(x) | YoungChild(x))))", "exists x.(Colony(x) & (Preteen(x) | YoungChild(x)))", "all x.(Carolyn(x) -> (Preteen(x) | YoungChild(x)))", "exists x.(Caroline(x) & (Preteen(x) | YoungChild(x))))", "all x.(Carol(x) -> (Preteen(x) | OtherYoungChild(x)))", "all x.(Carol(x) -> (Preteen(x) | YoungChild(x)))", "exists x.(Carol(x) & Preteen(x) & YoungChild(x))"]}
{"id": "folio_train_228", "nl": "Carol neither enjoys celebrating life milestone events with other people nor is outgoing and very spirited.", "fol": "(-EnjoyCelebratingMilestones(Carol) & -IsOutgoing(Carol))", "prediction": ["-(EnjoysCelebratingLifeMilestoneEvents(Caroly) & -(Outgoing(Caroly) & Sufficient(Caroly))))", "(-exists x.(Caroline(x) & CelebratesLifeMilestoneEvents(x)) | (Outgoing(x) & VerySturdy(x))))", "(-(EnjoysCelebratingLifeMilestoneEvents(Caroline) & -(Outgoing(Caroline) | Spirited(Caroline))))", "(SeemsTomorrowEventsWithOtherPeople( Carol) & -(EnjoysCelebratingMilestoneEvents(Caroline) & Outgoing(Caroline) & Stidy(Caroline)))", "all x y z.((Caroline(x) & LifeMilestone(y) & Person(z)) -> -(Enjoys(x,y) & Celebrates(x,z)) | Outgoing(x) & VeryStidy(x)))", "-((Carol(a) & -(AppreciatesMilestoneEvents(a) | Outgoing(a) & VeryTirny(a))))", "all x.(Caroline(x) -> -(EnjoysCelebrationWithOthers(x) | OutgoingAndStoic(x)))", "all x.((Caroline(x) & -(ExcitedBeforeLivingMilestone(x) | Outgoing(x) & VeryStolen(x))) -> -Has(x))", "all x.(Carol(x) -> (BreathesLifeMilestone(x) & -(Outgoing(x) | VeryTithed(x)))))", "-(EnjoysCelebratingLifeMeasurestoneEvents(Carolyn) & -(Outgoing(Carolyn) & Spirited(Carolyn))))", "-((Carol(Carol) & CelebratesLifeMeasurestoneEvents(Carol)) | (Outgoing(Carol) & Spirited(Carol))))", "(-(EnjoysCelebratingLifeMilestoneEvents(Carol) & -Outgoing(Caroline) & -Spiritual(Caroline)) | (-EnjoysCelebratingCelebratingCelebratingMilestoneEvents(Carol,Carol))))", "all x.(Carol(x) -> (-EnjoysCelebratingLifeMilestoneEvents(x) | Outgoing(x) & VeryStirred(x)))", "all x.((Caroline(x) & -(EnjoysCelebratingMilestoneEvents(x) | Outgoing(x) & VeryTidy(x))) -> (-EnjoysCelebratingLifeMilestoneEventsWithOtherPeople(x)))", "-(EnjoysCelebratingLifeMilestoneEvents(Caroline) | OutgoingAndStolen(Caroline)))", "exists x.(Caroline(x) & -(EnjoysCelebratingLifeMilestoneEvents(x) | Outgoing(x) & Hurts(x)))"]}
{"id": "folio_train_229", "nl": "All Republicans are anti-abortion.", "fol": "all x.(IsRepublican(x) -> OpposesAbortion(x))", "prediction": ["all x.(Republican(x) -> AntiAbortion(x))", "all x.(Republican(x) -> AntiAbortion(x))", "all x.(Republican(x) -> AntiAbortion(x))", "all x.(Republican(x) -> AntiAbortion(x))", "all x.(Republican(x) -> AntiAbortion(x))", "all x.(Republican(x) -> AntiAbortion(x))", "all x.(Republican(x) -> AntiAbortion(x))", "all x.(Republican(x) -> AntiAbortion(x))", "all x.(Republican(x) -> AntiAbortion(x))", "all x.(Republican(x) -> AntiAbortion(x))", "all x.(Republican(x) -> AntiAbortion(x))", "all x.(Republican(x) -> AntiAbortion(x))", "all x.(Republican(x) -> AntiAbortion(x))", "all x.(Republican(x) -> AntiAbortion(x))", "all x.(Republican(x) -> AntiAbortion(x))", "all x.(Republican(x) -> AntiAbortion(x))"]}
{"id": "folio_train_230", "nl": "Either Republicans or Democrats. ", "fol": "all x.(IsRepublican(x) | IsDemocrat(x))", "prediction": ["(Either Republican(Republican) | Democratic(Democrat)))", "all x.(Republican(x) | Democratic(x))", "all x.(Republican(x) | Democrat(x))", "(Republicans(republicans) | Democrats(republicans))", "(Ripley(R) | Democratic(R))", "(Republican(republican) | Democratic(republican))", "((Republican(republican) | Democratic(republican)))", "all x.((Republican(x) | Democrat(x)) -> -Republican(x))", "all x.(Rap(x) | Democrats(x))", "(Republican(republican) | Democrat(republican))", "(either Republicans or Democrats)", "(Republicans(Republicans) | Democrats(Republicans))", "(Richards(Rigorn) | Dems(Democrats))", "all x.(Republican(x) | Democrat(x))", "all x.(Republican(x) | Democratic(x))", "(EitherRepublicansOrDemocrates(x))"]}
{"id": "folio_train_231", "nl": "No Democrats are conservative.", "fol": "all x.(IsDemocrat(x) -> -IsConservative(x))", "prediction": ["-exists x.(Democracy(x) & Conservative(x))", "-exists x.(Democrat(x) & Conservative(x))", "-exists x.(Democrat(x) & Conservative(x))", "-exists x.(Democrat(x) & Conservative(x))", "-exists x.(Democrat(x) & Conservative(x))", "-exists x.(Democrat(x) & Conservative(x))", "-(Democrat(e) & Conservative(e))", "-exists x.(Democrat(x) & Conservative(x))", "-exists x.(Democrat(x) & Conservatism(x))", "noDemocracy(Democracy)", "-exists x.(Democrat(x) & Conservative(x))", "-exists x.(Democrat(x) & Conservative(x))", "-exists x.(Democrat(x) & Conservative(x))", "-exists x.(Democracy(x) & Conservative(x))", "-exists x.(Democracy(x) & Conservative(x))", "-exists x.(Democrat(x) & Conservative(x))"]}
{"id": "folio_train_232", "nl": "Either conservative or liberal. ", "fol": "all x.(IsConservative(x) | IsLiberal(x))", "prediction": ["all x.(Conservative(x) | Liberal(x))", "(Conservative(x) | Liberal(x))", "(Conservative(x) | Liberal(x))", "exists x.(Conservative(x) | Liberal(x))", "(Conservative) | Liberal)", "all x.(Conservative(x) | Liberal(x))", "(Conservative(e) | Liberal(e)))", "all x.((Conservative(x) | Liberal(x)) -> Only(x))", "(Conservative(x) | Liberal(x))", "(Conservative(x) | Liberal(x))", "all x.(Conservative(x) | Liberal(x))", "all x.(Conservative(x) | Liberal(x))", "(Conservative(x) | Liberal(x))", "(Conservative(x) | Liberal(x))", "all x.(Conservative(x) | Liberal(x))", "all x.(Crooked(x) | Liberal(x))"]}
{"id": "folio_train_233", "nl": "A U.S government official is either conservative or a Republican.", "fol": "((IsConservative(AnUSGovernmentOfficial) & -IsRepublican(AnUSGovernmentOfficial)) | (-IsConservative(AnUSGovernmentOfficial) & IsRepublican(AnUSGovernmentOfficial)))", "prediction": ["all x.(U.S.GovernmentOfficial(x) -> (Conservative(x) | Republican(x)))", "all x.(Official(x) -> (Conservative(x) | Republican(x)))", "all x.(Ambassador(x) -> (Conservative(x) | Republican(x)))", "all x.((Official(x) & U.S.Government(x)) -> (Conservative(x) | Republican(x)))", "all x.(GovernmentOfficial(x) -> (Conservative(x) | Republican(x)))", "all x.(UnitedStatesOfficials(x) -> (Conservative(x) | Republican(x)))", "all x.(Official(x) -> (Conservative(x) | Republican(x)))", "all x.(U.S.GovernmentOfficial(x) -> (Conservative(x) | Republican(x)))", "all x.(Official(x) -> (Conservative(x) | Republican(x)))", "all x.(Official(x) -> (Conservative(x) | Republican(x)))", "all x.(U.S.GovernmentOfficial(x) -> (Conservative(x) | Republican(x)))", "all x.(Officer(x) -> (Conservative(x) | Republican(x)))", "all x.((Official(x) & U.S.Government(x)) -> (Conservative(x) | Republican(x)))", "all x.(U.S.GovernmentOfficial(x) -> (Conservative(x) | Republican(x)))", "all x.(U.S.GovernmentOfficial(x) -> (Conservative(x) | Republican(x)))", "all x.(U.S.GovernmentOfficial(x) -> (Conservative(x) | Republican(x)))"]}
{"id": "folio_train_234", "nl": "A U.S government official is a Democrat.", "fol": "Democrat(AnUSGovernmentOfficial)", "prediction": ["all x.((Official(x) & USGovernment(x)) -> Democrat(x))", "all x.(Democracy(x) -> USGovernmentOfficial(x))", "all x.((U.S.GovernmentOfficial(x) & Democratic(x)) -> Is(x))", "all x.((U.S.GovernmentOfficial(x) & Democrat(x)) -> Administrator(x))", "all x.(Democrat(x) -> UnitedS.GovernmentOfficial(x))", "all x.(Democracy(x) -> U.S.GovernmentOfficial(x))", "all x.(Democrat(x) -> U.SGovernmentOfficial(x))", "all x.(Democracy(x) -> USGovernmentOfficial(x))", "all x.((Official(x) & U.SGovernment(x)) -> Democrat(x))", "all x.((Official(x) & U.S. Government(x)) -> Democratic(x))", "all x.((U.S.GovernmentOfficial(x) & Democrat(x)) -> Deputy(x))", "all x.(Democrat(x) -> U.S.GovernmentOfficial(x))", "all x.(Democrat(x) -> Official(x))", "all x.((U.S.GovernmentOfficial(x) & Democrat(x)) -> OccupysTruement(x))", "all x.((U.S.GovernmentOfficial(x) & Democratic(x)) -> Democrat(x))", "all x.((U.S.GovernmentOfficier(x) & Democratic(x)) -> Democrat(x))"]}
{"id": "folio_train_235", "nl": "A U.S government official is anti-abortion and a liberal.", "fol": "(OpposesAbortion(AnUSGovernmentOfficial) & IsLiberal(AnUSGovernmentOfficial))", "prediction": ["all x.(Official(x) -> (AntiAbortion(x) & Liberal(x)))", "all x.((Official(x) & U.S.Government(x)) -> (AntiAbortion(x) & Liberal(x)))", "all x.((U.S.GovernmentOfficier(x) & AntiAbortion(x)) -> Liberal(x))", "all x.((U.S.GovernmentOfficial(x) & AntiAbortion(x) & Liberal(x)) -> Official(x))", "all x.(Official(x) -> (AntiAbortion(x) & Liberal(x)))", "all x.(U.S.GovernmentOfficial(x) -> (AntiAbortion(x) & Liberal(x)))", "all x.(Official(x) -> (AntiAbortion(x) & Liberal(x)))", "all x.(OfficialInGovernment(x) -> (AntiAbortion(x) & Liberal(x)))", "all x.((Official(x) & Official(x)) -> (AntiAbortion(x) & Liberal(x)))", "all x.((Official(x) & UnitedS.Government(x)) -> (AntiAbortion(x) & Liberal(x)))", "all x.(U.S.GovernmentAdministrator(x) -> (AntiAbortion(x) & Liberal(x)))", "all x.((U.S.GovernmentOfficiel(x) & AntiAbortion(x) & Liberal(x)) -> Official(x))", "all x.((U.S.Government(x) & AntiAbortion(x) & Liberal(x)) -> OfficialDaily(x))", "all x y.((Official(x) & The UnitedStates(x)) -> (AntiAbortion(x) | Liberal(x)))", "all x.((GovernmentPersonnel(x) & AntiABortion(x)) -> Liberal(x))", "all x.((GovernmentOf(x) & AntiAbortion(x)) -> Liberal(x))"]}
{"id": "folio_train_236", "nl": "A U.S government official is either anti-abortion or a liberal.", "fol": "(OpposesAbortion(AnUSGovernmentOfficial) | IsLiberal(AnUSGovernmentOfficial))", "prediction": ["all x.((Official(x) & U.S.Govt(x)) -> (Antiabortion(x) | Liberal(x)))", "all x.((U.S.GovernmentOfficial(x) & AntiAbortion(x)) | Liberal(x))", "all x.(Official(x) -> (MoreAntiAbortion(x) | MoreLoyal(x)))", "all x.(U.S.GovernmentOfficial(x) -> (AntiAbortion(x) | Liberal(x)))", "all x.(GovernmentOfficial(x) -> (AntiAbortion(x) | Liberal(x)))", "all x.((Official(x) & U.S.Government(x)) -> (AntiAbortion(x) | Liberal(x)))", "all x.(Official(x) -> (U.S.Government(x) & (AntiAbortion(x) | Liberal(x))))", "all x.((Official(x) & U.S.Government(x)) -> (AntiAbortion(x) | Liberal(x)))", "all x.(Ambassador(x) -> (AntiAbortion(x) | Liberal(x)))", "all x.((U.S.GovernmentOfficiant(x) & AntiAbortion(x)) | Liberal(x))", "all x.(U.S.GovernmentOfficial(x) -> (AntiAbortion(x) | Liberal(x)))", "all x.(U.S GovernmentOfficial(x) -> (AntiAbortion(x) | Liberal(x)))", "all x.((Official(x) & U.S.Government(x)) -> (AntiAbortion(x) | Liberal(x)))", "all x.((Officio(x) & U.S.Government(x)) -> (AntiAbortion(x) | Liberal(x)))", "all x.(Official(x) -> (AntiAbortion(x) | Liberal(x)))", "all x.(U.S.GovernmentOfficial(x) -> (AntiAbortion(x) | Liberal(x)))"]}
{"id": "folio_train_237", "nl": "If a U.S government official is not anti-abortion and a Republican, then a U.S government official is neither anti-abortion nor a liberal.", "fol": "all x.((-OpposesAbortion(x) & IsRepublican(x)) -> (-OpposesAbortion(x) & -IsLiberal(x)))", "prediction": ["all x.((U.S.Govtofficial(x) & -AntiAbortion(x) and Republican(x)) -> (-AntiAbortion(x) & -Liberal(x)))", "all x.((U.S GovernmentOfficial(x) & -AntiAbortion(x) & Republican(x)) -> (-AntiAbortion(x) & -Liberal(x)))", "all x.((U.S.GovernmentOfficial(x) & -AntiAbortion(x) & Republican(x)) -> (-AntiAbortion(x) & -Liberal(x)))", "all x.((U.S.GovernmentOfficial(x) & -AntiAbortion(x) & Republican(x)) -> (-AntiAbortion(x) & -Liberal(x)))", "all x.((U.S government official(x) & -AntiAbortion(x) & Republican(x)) -> -AntiAbortion(x) & -Liberal(x))", "all x.((Republican(x) & NoAntiAbortion(x)) -> -(AntiAbortion(x) | Liberal(x)))", "all x.((U.S.GovernmentOfficial(x) & -AntiAbortion(x) & Republican(x)) -> -AntiAbortion(x) & -Liberal(x))", "all x.((Affiliate(x) & -AntiAbortion(x) & Republican(x)) -> -(AntiAbortion(x) | Liberal(x)))", "all x.((U.S.GovernmentOfficial(x) & -AntiAbortion(x) & Republican(x)) -> (-AntiAbortion(x) & -Liberal(x)))", "all x.((U.S.governmentOfficial(x) & -AntiAbortion(x) & Republican(x)) -> (-AntiAbortion(x) & -Liberal(x)))", "all x.((U.S.GovernmentOfficial(x) & -AntiAbortion(x) & Republican(x)) -> (-AntiAbortion(x) | -Liberal(x)))", "all x.((U.S.Agency(x) & -Anti-Abortion(x) & Republican(x)) -> (-AntiAbortion(x) & -Liberal(x)))", "all x.((U.S.GovernmentOfficiant(x) & -AntiAbortion(x) & Republican(x)) -> (NeitherAntiAbortion(x) & -Liberal(x)))", "all x.((U.S.GovernmentOfficial(x) & -AntiAbortion(x) & Republican(x)) -> -AntiAbortion(x) & -Liberal(x))", "all x.((U.S.GovernmentOfficial(x) & -AntiAbortion(x) & Republican(x)) -> -(AntiAbortion(x) | Liberal(x))))", "all x.((U.S.GovernmentOfficio(x) & -AntiAbortion(x) & Republican(x)) -> (-AntiAbortion(x) & -Liberal(x)))"]}
{"id": "folio_train_238", "nl": "If a U.S government official is anti-abortion and a liberal, then a U.S government official is either a Republican or a liberal.", "fol": "((OpposesAbortion(AnUSGovernmentOfficial) & IsLiberal(AnUSGovernmentOfficial)) -> (IsRepublican(AnUSGovernmentOfficial) | IsLiberal(AnUSGovernmentOfficial)))", "prediction": ["all x.((U.S governmentofficial(x) & AntiAbortion(x)) -> (Republican(x) | Liberal(x)))", "all x.((U.S government official(x) & AntiAbortion(x) & Liberal(x)) -> (Republican(x) | Liberal(x)))", "all x.((U.S.GovernmentOfficial(x) & AntiAbortion(x) & Liberal(x)) -> (Republican(x) | Liberal(x)))", "all x.((U.SgovernmentOfficier(x) & Antiabortion(x) & Liberal(x)) -> (Republican(x) | Liberal(x)))", "all x.((U.S.Goverment(x) & AntiAbortion(x) & Liberal(x)) -> (Republican(x) | Liberal(x)))", "all x.((U.S governmentofficial(x) & AntiAbortion(x) & Liberal(x)) -> (Renegalist(x) | Liberal(x)))", "all x.((U.S.GovernmentOfficier(x) & AntiAbortion(x) & Liberal(x)) -> (Rpublican(x) | Liberal(x)))", "all x.((U.S.GovernmentOfficial(x) & AntiAbortion(x) & Liberal(x)) -> (Republican(x) | Liberal(x))))", "all x.((U.SgovernmentOfficier(x) & AntiAbortion(x) & Liberal(x)) -> (Republican(x) | Liberal(x)))", "all x.((U.S.GovernmentOfficiant(x) & AntiAbortion(x) & Liberal(x)) -> (Republican(x) | Liberal(x)))", "all x.((U.S.GovernmentOfficial(x) & AntiAbortion(x) & Liberal(x)) -> (Republican(x) | Liberal(x)))", "all x.((U.S government official(x) & AntiAbortion(x) & Liberal(x)) -> (Republican(x) | Liberal(x)))", "all x.((U.S.Officer(x) & AntiAbortion(x) & Liberal(x)) -> (Republican(x) | Liberal(x)))", "all x.((U.S.Gov.(x) & AntiAbortion(x) & Liberal(x)) -> (Republican(x) | Liberal(x)))", "all x.((U.S.GovernmentOfficiant(x) & AntiAbortion(x) & Liberal(x)) -> (Republican(x) | Liberal(x)))", "all x.((U.S.Guardial(x) & AntiAbortion(x) & Liberal(x)) -> (Republican(x) | Liberal(x)))"]}
{"id": "folio_train_239", "nl": "If a U.S government official is either a conservative or anti-abortion, then a U.S government official is either a conservative and a liberal or neither a conservative nor a liberal.", "fol": "all x.((IsConservative(x) | OpposesAbortion(x)) -> ((IsConservative(x) & IsLiberal(x)) | (-IsConservative(x) & -IsLiberal(x))))", "prediction": ["all x.((U.S.GovernmentOfficial(x) & (Conservative(x) | AntiAbortion(x))) -> ((Conservative(x) & Liberal(x)) | (-Conservative(x) & Liberal(x))))", "all x.((U.S.GovernmentOfficial(x) & (Conservative(x) | AntiAbortion(x))) -> (Conservative(x) | Liberal(x)))", "all x.((Official(x) & (Conservative(x) | AntiAbortion(x))) -> (Conservative(x) | Liberal(x) | -Conservative(x) & Liberal(x)))", "all x.(U.S.Official(x) -> ((Conservative(x) | AntiAbortion(x)) | (-Conservative(x) & Liberal(x)) | -Conservative(x) & Liberal(x))))", "all x.((U.S.GovernmentOfficipant(x) & (Conservative(x) | AntiAbortion(x))) -> (Conservative(x) & Liberal(x)))", "all x.((U.S government official(x) & (Tory(x) | AntiAbortion(x))) -> (ToriesConservatism(x) & Liberal(x) & -Conservative(x)))", "all x.((U.S.GovernmentOfficiant(x) & (Conservative(x) | AntiAbortion(x))) -> (Conservative(x) & Liberal(x)) | -Conservative(x) & Liberal(x)))", "all x.((Official(x) & (Croatioscist(x) | AntiAbortion(x))) -> (Conservative(x) & Liberal(x)) | (-Conservative(x)) | (-Liberal(x)))))", "all x.((U.S governmentofficial(x) & (Conservative(x) | AntiAbortion(x))) -> (Conservative(x) & Liberal(x)) | -Conservative(x) & Liberal(x)))", "all x.((U.S.GovtOfficitant(x) & (Conservative(x) | AntiAbortion(x))) -> (Conservative(x) & Liberal(x)))", "all x.((U.S.governmentOfficiant(x) & (Conservative(x) | AntiAbortion(x))) -> (Conservative(x) & Liberal(x)))", "all x.((U.S.GovernmentOfficier(x) & (Conservative(x) | AntiAbortion(x))) -> (Conservative(x) & Liberal(x)) | -Conservative(x) & Liberal(x)))", "all x.((U.S.GovernmentOfficial(x) & (Conservative(x) | AntiAbortion(x))) -> (Conservative(x) | Liberal(x)) | -Conservative(x) & Liberal(x)))", "all x.((U.S governmentofficial(x) & (Conservative(x) | AntiAbortion(x))) -> (Conservative(x) & Liberal(x)) | -Conservative(x) & Liberal(x)))", "all x.((U.S government official(x) & (Conservative(x) | AntiAbortion(x))) -> (Conservative(x) & Liberal(x)) | (-Conservative(x) & Liberal(x))))", "all x.((Official(x) & (Conservative(x) | AntiAbortion(x))) -> (Conservative(x) & Liberal(x)) | (-Conservative(x) & Liberal(x)))))"]}
{"id": "folio_train_240", "nl": "If a U.S government official is either a conservative or anti-abortion, then a U.S government official is neither a Democrat or a liberal.", "fol": "all x.((IsConservative(x) | OpposesAbortion(x)) -> (-IsDemocrat(x) & -IsLiberal(x)))", "prediction": ["all x.((U.S.GovernmentOfficial(x) & (Conservative(x) | AntiAbortion(x))) -> (-Democrat(x) | Liberal(x)))", "all x.((U.S GovernmentOfficial(x) & (Conservative(x) | AntiAbortion(x))) -> (-Democrat(x) | Liberal(x)))", "all x.((GovernmentOfU.S.OfU.S.(x) & ConservatorOrAntiAbortion(x)) -> -Democrat(x) & -Liberal(x))", "all x.((U.S.GovernmentOfficial(x) & (Conservative(x) | AntiAbortion(x))) -> (-Democrat(x) | Liberal(x)))", "all x.((U.S.GovernmentOfficial(x) & (Conservative(x) | AntiAbortion(x))) -> (-Democrat(x) | Liberal(x)))", "all x.((U.S.GovernmentOfficier(x) & (Conservative(x) | AntiAbortion(x))) -> (-Democrat(x) | Liberal(x)))", "all x.((U.S.GovernmentOfficio(x) & (RightLeft) | RightLeft(x))) -> (NoDemocrat(x) | NoLiberal(x)))", "all x.((GovernmentOfInformation(x) & Conservative(x)) | AntiAbortion(x)) -> (-Democrat(x) | Liberal(x)))", "all x.((U.S.GovermentOfficial(x) & Conservative(x)) | AntiAbortion(x)) -> -Democrat(x) & -Liberal(x))", "all x.((U.S.GovernmentOfficial(x) & Republican(x)) | (Anti-Abortion(x) & Democratic(x)) | Liberal(x)))", "all x.((U.S GovernmentOfficial(x) & Conservative(x) | AntiAbortion(x)) -> (-Democrat(x) | Liberal(x)))", "all x.((U.S.governmentOfficier(x) & (Conservative(x) | AntiAbortion(x))) -> -Democrat(x) & -Liberal(x))", "all x.((U.S GovernmentOfficier(x) & (Conservative(x) | AntiAbortion(x))) -> -Democrat(x) & -Liberal(x))", "all x.((U.S.GovernmentOfficial(x) & (Conservative(x) | AntiAbortion(x))) -> (-Democrat(x) | -Liberal(x)))", "all x.((U.SgovernmentOfficial(x) & (Conservative(x) | AntiAbortion(x))) -> -Democrat(x) & -Liberal(x))", "all x.((U.S.GovernmentOfficier(x) & (Conservative(x) | AntiAbortion(x))) -> -Democrat(x) | Liberal(x))"]}
{"id": "folio_train_241", "nl": "If an U.S government official is anti-abortion or a liberal, then a U.S government official is either anti-abortion or a liberal.", "fol": "((OpposesAbortion(AnUSGovernmentOfficial) | IsLiberal(AnUSGovernmentOfficial)) -> (OpposesAbortion(AnUSGovernmentOfficial) | IsLiberal(AnUSGovernmentOfficial)))", "prediction": ["all x.((GovernmentOfU.S.(x) & (AntiAbortion(x) | Liberal(x))) -> (AntiAbortion(x) | Liberal(x)))", "all x.((U.S.GovernmentOfficial(x) & (Anti-Abortion(x) | Liberal(x))) -> (AntiAbortion(x) | Liberal(x)))", "all x.((U.S.governmentOfficial(x) & (AntiAbortion(x) | Liberal(x))) -> (AntiAbortion(x) | Liberal(x)))", "all x.((U.S.GovernmentOfficial(x) & (AntiAbortion(x) | Liberal(x))) -> (AntiAbortion(x) | Liberal(x)))", "all x.((U.S.GovernmentOfficial(x) & AntiAbortion(x)) | Liberal(x)) -> (AntiAbortion(x) | Liberal(x)))", "all x.((U.S GovernmentOfficial(x) & (AntiAbortion(x) | Liberal(x))) -> (AntiAbortion(x) | Liberal(x)))", "all x.((U.S GovernmentOfficial(x) & AntiAbortion(x)) | Liberal(x)) -> (AntiAbortion(x) | Liberal(x)))", "all x.((U.S governmentofficial(x) & (AntiAbortion(x) | Liberal(x))) -> (AntiAbortion(x) | Liberal(x)))", "all x.((U.S governmentofficial(x) & (AntiAbortion(x) | Liberal(x))) -> (AntiAbortion(x) | Liberal(x)))", "all x.((U.S.GovermentOfficial(x) & (AntiAbortion(x) | Liberal(x))) -> (AntiAbortion(x) | Liberal(x)))", "all x y.((U.S.GovernmentOfficial(x) & AntiAbortion(x)) | Liberal(x)) -> (AntiAbortion(y) | Liberal(y)))", "all x.((U.S.GovernmentOfficial(x) & (AntiAbortion(x) | Liberal(x))) -> (AntiAbortion(x) | Liberal(x)))", "all x.((U.S.GovernmentOfficiant(x) & (AntiAbortion(x) | Liberal(x))) -> (AntiAbortion(x) | Liberal(x)))", "all x y.((OfficialInU.S.(x) & (AntiAbortion(x) | Liberal(x))) -> (AntiAbortion(x) | Liberal(x)))", "all x.((U.S.GovernmentOfficial(x) & (AntiAbortion(x) | Liberal(x))) -> (AntiAbortion(x) | Liberal(x)))", "all x.((U.S.governmentOfficial(x) & (AntiAbortion(x) | Liberal(x))) -> (AntiAbortion(x) | Liberal(x)))"]}
{"id": "folio_train_242", "nl": "All advocates of high tariff rates are Republicans.", "fol": "all x.(SupportsHighTariffRates(x) -> IsRepublican(x))", "prediction": ["all x.(AdvocatesHighTargetRATes(x) -> Republican(x))", "all x.(Adamant(x) -> Republican(x))", "all x.((AdvocatesHighTarif(x) & Republican(x)) -> HighTarifRate(x))", "all x.(AdvocatesHighTargetRates(x) -> Republicans(x))", "all x.(AmprovesHighTargetRates(x) -> Republicans(x))", "all x.((AdvocatesHighTargetRates(x) & Republicans(x)) -> Racial(x))", "all x.(AffordsHighTargetRates(x) -> Republican(x))", "all x.(AdvocateHighTargetRate(x) -> Republican(x))", "all x.(AdvocatesHighTargetRates(x) -> Republicans(x))", "all x.(AmplifiersHighTargetRates(x) -> Republicans(x))", "all x.(AdvocatesHighTariffRates(x) -> Republicans(x))", "all x.(AdvocatesHighTarget(x) -> Republican(x))", "all x.((Adamant(x) & HighTargetRates(x)) -> Republicans(x))", "all x.(AdvocatesHighTargetRates(x) -> Republican(x))", "all x.((Advocate(x) & HighTarifRate(x)) -> Republican(x))", "all x.(AdvocatesHighTotalRates(x) -> Republican(x))"]}
{"id": "folio_train_243", "nl": "Some Republicans are not conservatives.", "fol": "exists x.(IsRepublican(x) & -IsConservative(x))", "prediction": ["exists x.(Republican(x) & -Conservative(x))", "exists x.(Republican(x) & -Conservative(x))", "exists x.(Republican(x) & -Conservative(x))", "exists x.(Republican(x) & -Conservative(x))", "exists x.(Republican(x) & -Conservative(x))", "exists x.(Republican(x) & -Conservative(x))", "exists x.(Republican(x) & -Conservative(x))", "exists x.(Republican(x) & -Conservative(x))", "exists x.(Republican(x) & -Conservative(x))", "exists x.(Republican(x) & -Conservative(x))", "exists x.(Republican(x) & -Conservative(x))", "exists x.(Republican(x) & -Conservative(x))", "exists x.(Republican(x) & -Conservative(x))", "exists x.(Republican(x) & -Conservative(x))", "exists x.(Republican(x) & -Conservative(x))", "exists x.(Republican(x) & -Conservative(x))"]}
{"id": "folio_train_244", "nl": "Some conservatives are advocates of high tariff rates.", "fol": "exists x.(IsConservative(x) & SupportsHighTariffRates(x))", "prediction": ["exists x.(Conservative(x) & AdvocateOfHighTargetRates(x))", "exists x y.(Conservative(x) & HighTargetRates(y))", "exists x.(Conservative(x) & AdvocateOfHighTariffCosts(x))", "exists x.(Conservative(x) & AdvocateOfHighTariff(x))", "exists x.(Conservative(x) & AdvocateOfHighTargetRates(x))", "exists x.(Conservative(x) & AdvocateOfHighTarget(x))", "exists x.(Conservative(x) & Advocate(x,highTariffRates))", "exists x.(Conservative(x) & AdvocateOfHighTarifRates(x))", "exists x.(Conservative(x) & AdvocateOfHighTargetRates(x))", "exists x.(Conservative(x) & AdvocateOfHighTariff(x))", "exists x.(Conservative(x) & Advocate(x,highTargetRates))", "exists x.(Conservative(x) & AdvocateOfHighTarifRates(x))", "exists x.(Conservative(x) & Advocate(x,hooltTargetRates))", "exists x.(Conservative(x) & AdvocateOfHighTarget(x))", "exists x.(Conservative(x) & Advocate(x) & HighTargetRates(x))", "exists x.(Conservative(x) & AdvocateOfHighTariffRates(x))"]}
{"id": "folio_train_245", "nl": "No athletes are slow runners. ", "fol": "all x.(IsAthlete(x) -> -IsSlowRunner(x))", "prediction": ["-exists x.(Athlete(x) & SlowRunner(x))", "KeenAthlete(x) & SlowRunner(x))", "-exists x.(Athlete(x) & SlowRunner(x))", "-exists x.(Athlete(x) & SlowRunner(x))", "-exists x.(Athlete(x) & SlowRunner(x))", "-exists x.(Athlete(x) & SlowRunner(x))", "all x.(Athlete(x) -> -SlowRunner(x))", "-exists x.(Athlete(x) & SlowRunner(x))", "-exists x.(Athlete(x) & SlowRunner(x))", "-exists x.(Athlete(x) & SlowRunner(x))", "-exists x.(Athlete(x) & SlowRunner(x))", "-exists x.(Athlete(x) & SlowRuder(x))", "-exists x.(Athlete(x) & SlowRunner(x))", "-exists x.(Athlete(x) & SlowRunner(x))", "-exists x.(Athlete(x) & SlowRunner(x))", "-exists x.(Athlete(x) & SlowRunner(x))"]}
{"id": "folio_train_246", "nl": "All professional basketball players are athletes. ", "fol": "all x.(IsProfessionalBasketballPlayer(x) -> IsAthlete(x))", "prediction": ["all x.(ProfessionalBasketballPlayer(x) -> Athlete(x))", "all x.(ProfessionalBasketballPlayer(x) -> Athlete(x))", "ALL PERSONALBalloonballPlayer(s) -> Athlete(s))", "all x.(ProfessionalBasketballPlayer(x) -> Athlete(x))", "all x.(ProfessionalBasketballPlayer(x) -> Athlete(x))", "all x.(ProfessionalBasketballPlayer(x) -> Athlete(x))", "all x.(ProfessionalBasketballPlayer(x) -> Athlete(x))", "all x.(ProfessionalBasketballPlayer(x) -> Athlete(x))", "all x.(ProfessionalBasketballPlayer(x) -> Athlete(x))", "all x.(ProfessionalBasketballPlayer(x) -> Athlete(x))", "all x.(ProfessionalBasketballPlayer(x) -> Athlete(x))", "all x.(ProfessionalBasketballPlayer(x) -> Athlete(x))", "all x.(ProfessionalBasketballPlayer(x) -> Athlete(x))", "all x.(BasketballPlayer(x) -> Athlete(x))", "all x.(ProfessionalBasketballPlayer(x) -> Athlete(x))", "all x.(ProfessionalBasketballPlayer(x) -> Athlete(x))"]}
{"id": "folio_train_247", "nl": "All NBA players are professional basketball players. ", "fol": "all x.(IsNBAPlayer(x) -> IsProfessionalBasketballPlayer(x))", "prediction": ["all x.(NBAPlayer(x) -> ProfessionalBasketballPlayer(x))", "all x.(NBAPlayer(x) -> ProfessionalBoyballPlayer(x))", "all x.(NBAPlayer(x) -> ProfessionalBasketballPlayer(x))", "all x.(NBAPlayer(x) -> ProfessionalBallisticPlayer(x))", "all x.(NBAPlayer(x) -> ProfessionalBasketballPlayer(x))", "all x.(NBAPlayer(x) -> ProfessionalBasketballPlayer(x))", "all x.(NBAPlayer(x) -> ProfessionalBallroomballPlayer(x))", "all x.(NBAPlayer(x) -> ProfessionalKickballPlayer(x))", "all x.(NBAPlayer(x) -> ProfessionalBalloonPlayer(x))", "all x.(NBAPlayer(x) -> ProfessionalBadmintonPlayer(x))", "all x.(NBAPlayer(x) -> ProfessionalBasketballPlayer(x))", "all x.(NBAPlayer(x) -> Professional(x))", "all x.(NBAPlayer(x) -> ProfessionalBasketballPlayer(x))", "all x.((NBAPlayer(x) & Professional(x)) -> Professional(x))", "all x.(NBAPlayer(x) -> ProfessionalBallroomPlayer(x))", "all x.(NBAPlayer(x) -> ProfessionalBasketballPlayer(x))"]}
{"id": "folio_train_248", "nl": "All Knicks players are NBA players. ", "fol": "all x.(IsKnicksPlayer(x) -> IsNBAPlayer(x))", "prediction": ["all x.(KnicksPlayer(x) -> NBAPlayer(x))", "all x.(KnicksPoker(x) -> NBAPlayer(x))", "all x.(KnicksPlayer(x) -> NBAPlayer(x))", "all x.(KnicksPlayer(x) -> NBAPlayer(x))", "all x.(KnicksPlayer(x) -> NBAPlayer(x))", "all x.(KnicksPlayer(x) -> NBAPlayer(x))", "all x.(KnicksPlayer(x) -> NBAPlayer(x))", "all x.(KnicksPlayer(x) -> NBAPlayer(x))", "all x.(KnicksPlayer(x) -> NBAPlayer(x))", "all x.(KnicksPlayer(x) -> NBAPlayer(x))", "all x y.((KnicksPlayer(x) & NBAPlayer(y)) -> AllMembers(x,y))", "all x.(KnicksPilot(x) -> NBAPlayer(x))", "all x.(KnicksPlayer(x) -> NBAPlayer(x))", "all x.(KnicksPlayer(x) -> NBAPlayer(x))", "all x.(KnicksPlayer(x) -> NBAPlayer(x))", "all x.(KnicksPlayer(x) -> NBAPlayer(x))"]}
{"id": "folio_train_249", "nl": "Jim is either not a professional basketball player or not a slow runner. ", "fol": "-((IsProfessionalBasketballPlayer(Jim) & -IsSlowRunner(Jim)) | (-IsProfessionalBasketballPlayer(Jim) & IsSlowRunner(Jim)))", "prediction": ["all x.((Jim(x) & -ProfessionalBasketballPlayer(x)) | -SlowRunner(x))", "exists x.(Jim(x) & (-ProfessionalBasketballPlayer(x) | SlowRunner(x))))", "(-ProfessionalBasketballPlayer(Jim) | SlowRunner(Jim)))", "(-ProfessionalBasketballPlayer(Jim) | SlowRunner(Jim)))", "all x.((Jim(x) & -ProfessionalBasketballPlayer(x)) | -SlowRunner(x))", "(-professionalBasketballPlayer(Jim) | SlowRunner(Jim)))", "(RightJim(Jim) -> (-ProfessionalBasketballPlayer(Jim) | SlowRunner(Jim)))", "exists x.(Jim(x) & (-ProfessionalBasketballPlayer(x) | -SlowRunner(x))))", "exists x.(Jim(x) & (-ProfessionalBasketballPlayer(x) | -SlowRunner(x)))", "all x.((Jim(x) & (-ProfessionalBasketballPlayer(x) | SlowRunner(x))))", "(-ProfessionalBasketballPlayer(Jim) | SlowRunner(Jim)))", "all x.((Jim(x) & (-ProfessionalBasketballPlayer(x) | SlowRunner(x))) -> -SlowRunner(x))", "(-professionalBasketballPlayer(Jim) | SlowRunner(Jim))", "(-ProfessionalBasketballPlayer(Jim) | SlowRunner(Jim)))", "(-ProfessionalBasketballPlayer(Jim) | SlowRunner(Jim)))", "(-ProfessionalBasketballPlayer(Jim) | SlowRunner(Jim)))"]}
{"id": "folio_train_250", "nl": "Jim is a Knicks player.", "fol": "IsKnicksPlayer(Jim)", "prediction": ["(-KnicksPlayer(Jim)", "also a KnicksPlayer.", "(Knicksplayer(Jim) & Player(Jim))", "(KnicksPlayer(Jim))", "\u2013 -KnicksPlayer(Jim)", "All x.(Jim(x) -> KnicksPlayer(x))", "Jim HockingestofKnicksPlayer(Jim)", "all x.(KnicksPlayer(x) -> JimDoesNotManySkills(x))", "all x.(KnicksPlayer(x) -> Jim(x))", "all x.(KnicksPlayer(x) -> Jim(x))", "Jim is a KnicksPlayer.", "all x.(KnicksPlayer(x) -> JimKnicks(x))", "Founded by the Knicks(Jim)", "(KnicksPlayer(Jim) & Player(Jim))", "all x.((Jim(x) & KnicksPlayer(x)) -> Player(x))", "(KnicksPlayer(Jim) & -KnicksPlayer(Jim))"]}
{"id": "folio_train_251", "nl": "Jim is not a Knicks player.", "fol": "-IsKnicksPlayer(Jim)", "prediction": ["all x.(Jim(x) -> -KnicksPlayer(x))", "Jahm -KnicksPlayer(Jim,1)", "IsKnicksPlayer(Jim)", "is a KnicksPlayer(james,n)", "-KnicksPlayer(Jim)", "-KnicksPlayerJim(Jim))", "(-KnicksPlayer(Jim))", "(-KnicksPlayer(Jim))", "all x.(Jim(x) -> -KnicksPlayer(x))", "is -KnicksPlayer(Jim)", "(KnicksPlayer(Jim) & -KnicksPlayer(Jim))", "-KnicksPlayer(Jim)", "none.(Jim(Jim) -> KnicksPlayer(Jim))", "and Jim are not KnicksPlayers.", "-KnicksPlayer(Jim)", "(-KnicksPlayer(Jim))"]}
{"id": "folio_train_252", "nl": "Jim is an athlete.", "fol": "IsAthlete(Jim)", "prediction": ["-Athlete(Jim)", "all x.(Jim(x) -> Athlete(x))", "all x.(Jim(x) -> Athlete(x))", "(Athlete(Jim) & Athletic(Jim))", "-Athlete(Jim)", "all x.(Jim(x) -> Athlete(x))", "All x.(Jim(x) -> Athletic(x))", "all x.(Jim(x) -> Athlete(x))", "Jim is analyst.", "(Athlete(Jim) & Athletic(Jim))", "Jim is an Athlete(Jim)", "Jim is Athlete(Jim)", "(Athlete(Jim)", "all x.(Jim(x) -> Athlete(x))", "-Athlete(Jim)", "all x.(Jim(x) -> Athlete(x))"]}
{"id": "folio_train_253", "nl": "All kids love animals.", "fol": "all x.(IsKid(x) -> LovesAnimals(x))", "prediction": ["all x.(Kid(x) -> LovesAnimals(x))", "all x.(Kid(x) -> LovesAnimals(x))", "all x.(Kid(x) -> LovesAnimals(x))", "all x y.((Kid(x) & Animal(y)) -> Love(x,y))", "all x.(Kid(x) -> LovesAnimals(x))", "all x.(Child(x) -> LoveAnimals(x))", "all x.(Kid(x) -> LovesAnimals(x))", "all x.(Child(x) -> LovesAnimals(x))", "all x.(Kid(x) -> LovesAnimals(x))", "all x.(Kid(x) -> LovesAnimals(x))", "all x y.((Kid(x) & Animal(y)) -> Loves(x,y))", "all x.(Kid(x) -> LovesAnimals(x))", "all x.(Kid(x) -> LovesAnimals(x))", "all x.(Kid(x) -> LovesAnimals(x))", "all x.(Kid(x) -> LovesAnimals(x))", "all x.(Kid(x) -> LovesAnimals(x))"]}
{"id": "folio_train_254", "nl": "All toddlers are kids.", "fol": "all x.(IsToddler(x) -> IsKid(x))", "prediction": ["all x.(Toddler(x) -> Kid(x))", "all x.(Toddler(x) -> Kid(x))", "all x.(Toddler(x) -> Kid(x))", "all x.(Toddler(x) -> Kids(x))", "all x.(Tween(x) -> Kid(x))", "all x.(Toddler(x) -> Kids(x))", "all x.(Tongue(x) -> Kid(x))", "all x.(Toddler(x) -> Kids(x))", "all x.(Toddler(x) -> Kid(x))", "all x.(Toddler(x) -> Kids(x))", "all x.(Toddler(x) -> Kid(x))", "all x.(Toddler(x) -> Kid(x))", "all x.(Trotter(x) -> Kid(x))", "all x.(Toddler(x) -> Kid(x))", "all x.(Toddler(x) -> Kid(x))", "all x.(Toddler(x) -> Kid(x))"]}
{"id": "folio_train_255", "nl": "If someone loves animals, then they are not bad.", "fol": "all x.(LovesAnimals(x) -> -IsBad(x))", "prediction": ["all x.((LOVESAnimals(x) & -Bad(x)) -> DoesAnimalLove(x))", "all x.(LovesAnimals(x) -> -Bad(x))", "all x.(LoveFat(x) -> -Bad(x))", "all x.(LovesAnimals(x) -> -Bad(x))", "all x.(LovesAnimals(x) -> -Bad(x))", "all x.(LovesAnimals(x) -> -Bad(x))", "all x.(LovesAnimals(x) -> -Bad(x))", "all x.(LovesAnimals(x) -> -Bad(x))", "all x.(LovesAnimals(x) -> -Bad(x))", "all x.(LovesAnimals(x) -> -Bad(x))", "all x.(LovesAnimals(x) -> -Bad(x))", "all x.(LovedAnimals(x) -> -Bad(x))", "all x.(LovesAnimals(x) -> NoBad(x))", "all x.(LovesAnimals(x) -> NotBad(x))", "all x.(LovesAnimals(x) -> -Bad(x))", "all x.(LovesAnimals(x) -> -Bad(x))"]}
{"id": "folio_train_256", "nl": "All pirates are bad.", "fol": "all x.(IsPirate(x) -> IsBad(x))", "prediction": ["all x.(Pirate(x) -> Bad(x))", "all x.(Pirate(x) -> Bad(x))", "all x.(Pirate(x) -> Bad(x))", "all x.(Pirate(x) -> Bad(x))", "all x.(Pirate(x) -> Bad(x))", "all x.(Pirate(x) -> Bad(x))", "all x.(Prime(x) -> Bad(x))", "all x.(Pirate(x) -> Bad(x))", "all x.(Pirate(x) -> Bad(x))", "all x.(Pirate(x) -> Bad(x))", "all x.(Pirate(x) -> Bad(x))", "all x.(Pirate(x) -> Bad(x))", "all x.(Pirate(x) -> Bad(x))", "all x.(Pirate(x) -> Bad(x))", "all x.(Pirate(x) -> Bad(x))", "all x.(Pirate(x) -> Bad(x))"]}
{"id": "folio_train_257", "nl": "If Nancy is not a pirate, then Nancy loves animals.", "fol": "(-IsPirate(Nancy) -> LovesAnimals(Nancy))", "prediction": ["all x.((Pirate(x) & -Pirate(x)) -> LovesAnimals(x))", "all x.(Pirate(x) -> LovesAnimals(x))", "all x.((Nature(x) & -Pirate(x)) -> LovesAnimals(x))", "all x.((Nancy(x) & -Pirate(x)) -> LovedAnimals(x))", "all x.((Nancy(x) & -Pirate(x)) -> LovesAnimals(x))", "all x.((Nancy(x) & -Pirate(x)) -> LovesAnimals(x))", "all x.((Nancy(x) & -Pirate(x)) -> LovesAnimals(x))", "all x.((Nancy(x) & -Pirate(x)) -> LovesAnimals(x))", "all x.((Nancy(x) & -Pirate(x)) -> LovesAnimals(x))", "all x.((Nancy(x) & -Pirate(x)) -> LovesAnimals(x))", "all x.((Nancy(x) & -Pirate(x)) -> LovesAnimals(x))", "(-Pirate(Nancy) => LovesAnimals(Nancy))", "all x.((Nancy(x) & -Pirate(x)) -> LovesAnimals(x))", "all x.((Pirate(x) & Nancy-(Pirate(x) | Animal(x))) -> Loves(x,Animals))", "all x.((Nancy(x) & -Pirate(x)) -> (LovesAnimals(x)))", "all x.((Pirate(x) & -Pirate(x)) -> Dog(x))"]}
{"id": "folio_train_258", "nl": "If Nancy is not a toddler, then Nancy is bad.", "fol": "(-IsToddler(Nancy) -> IsBad(Nancy))", "prediction": ["all x.((Nancy(x) & -Toddler(x)) -> Bad(x))", "all x.((Nancy(x) & -Toddler(x)) -> Bad(x))", "all x.((Nancy(x) & -Toddler(x)) -> Bad(x))", "all x.(BadNancy(x) -> Neighbor(x))", "all x.((Penny(x) & -Toddler(x)) -> Bad(x))", "all x.((Nancy(x) & -Toddler(x)) -> Bad(x))", "all x.((Nancy(x) & -Toddler(x)) -> Bad(x))", "all x.((Nancy(x) & -Tween(x)) -> Bad(x))", "all x.((Trompet(x) & -Trompet(x)) -> BadNancy(x))", "all x.((Nancy(x) & -Toddler(x)) -> Bad(x))", "all x.((Nancy(x) & -Tongue(x)) -> Bad(x))", "all x.((Teacher(x) & -Target(x)) -> Bad(x))", "all x.((Penny(x) & -Toddler(x)) -> Bad(x))", "all x.((Tongue(x) & -Toddler(x)) -> BadNancy(x))", "all x.((Tongue(x) & -Tongue(x)) -> BadNancy(x))", "all x.((Nancy(x) & -Toddler(x)) -> Bad(x))"]}
{"id": "folio_train_259", "nl": "Nancy is a pirate.", "fol": "IsPirate(Nancy)", "prediction": ["Nancy is a Pirate(Nancy)", "all x.(Pitcher(x) -> NancyLykes(x))", "Nancy IsPirate(Nancy)", "(Pirate(NotesNancy)", "all x.(Nancy(x) -> Pirate(x))", "Nancy is Piranha.", "(Pirate(Nancy) & Pirate(Nancy))", "(Pirate(Nancy) & Pirate(Nancy))", "all x.(Nancy(x) -> Pirate(x))", "(Pirate(Nancy)", "Nancy is a Pirate.", "all x.(Nancy(x) -> Pirate(x))", "(Pirate(Nancy)", "(Pirate(Nancy)", "all x.((Nancy(x) & Pirate(x)) ->.", "(Pirate(Nancy)"]}
{"id": "folio_train_260", "nl": "Nancy is not a pirate or a toddler.", "fol": "(-IsPirate(Nancy) | IsToddler(Nancy))", "prediction": ["-(Pirate(n) | Toddler(n)))", "all x.(Nancy(x) -> (-Pirate(x) | Toddler(x)))", "(\u2013Pirate(Nancy) | Toddler(Nancy)))", "-(Pirate(Nancy) | Toddler(Nancy))", "-(Pirate(Nancy) | Toddler(Nancy))", "Nancy & -(Pirate(Nancy) | Toddler(Nancy)))", "-(Nancy(Nancy) & -Pirate(Nancy) & -Toddler(Nancy))", "-(Nancy(Nancy) & Pirate(Nancy)) & NotToddler(Nancy))", "all x y.((Nancy(x) & Pirate(y)) | Toddler(y)) -> -Pirate(x) | Toddler(x))", "-(Pirate(Nancy) | Toddler(Nancy))", "all x.(Nancy(x) -> (-Pirate(x) & -Toddler(x)))", "(-Pirate(Nancy) & -Toddler(Nancy))", "all x.(Nancy(x) -> NoPirate(x) & NoToddler(x))", "-(Pirate(Nancy) | Toddler(Nancy))", "-(Nancy(Nancy) -> (Pirate(Nancy) | Toddler(Nancy)))", "Nancy -(Pirate(Nancy) | Toddler(Nancy)))"]}
{"id": "folio_train_261", "nl": "If Nancy is not a pirate or a toddler, then she loves animals and is a kid.", "fol": "((-IsPirate(Nancy) | -IsToddler(Nancy)) -> (LovesAnimals(Nancy) & IsKid(Nancy)))", "prediction": ["all x.((Nancy(x) & -(Princess(x) | Toddler(x))) -> (LovesAnimals(x) & Kid(x)))", "all x.((Nancy(x) & -Pirate(x) & -Tongue(x)) -> (LovesAnimals(x) & Kid(x)))", "all x.((Nancy(x) & -Pirate(x) & -Toddler(x)) -> (LOVESAnimals(x) & Kid(x)))", "all x.((Nancy(x) & -Pirate(x) & -Toddler(x)) -> (LovesAnimals(x) & Kid(x)))", "all x.((Nancy(x) & -Pirate(x) & -Tongue(x)) -> (LovesAnimals(x) & Kid(x)))", "all x.((Nancy(x) & -Pirate(x)) | Toddler(x)) -> (LovesAnimals(x) & Kid(x)))", "all x.((Nancy(x) & -Pirate(x) & -Toddler(x)) -> (LovesAnimals(x) & Kid(x)))", "all x.((Nancy(x) & -Pirate(x) & Toddler(x)) -> (LovesAnimals(x) & Kid(x)))", "all x.((Nancy(x) & -Pirate(x) & -Toddler(x)) -> (LovesAnimals(x) & Kid(x)))", "all x.((Nancy(x) & -Pirate(x) & -Toddler(x)) -> (LoveLove(x) & Kid(x)))", "all x.((Nancy(x) & -Pirate(x) & Child(x)) -> (LovesAnimals(x) & Kid(x)))", "all x.((Nancy(x) & -Priscil(x) & -Toddler(x)) -> LovesAnimalsAndKid(x))", "all x.((Nancy(x) & -Pirate(x)) | Toddler(x)) -> (LisesAnimals(x) & Kid(x)))", "all x.((Nancy(x) & -Pirate(x) & -Toddler(x)) -> LovesAnimals(x) & Kid(x))", "all x.((Nancy(x) & -(Pirate(x) | Toddler(x))) -> (LovesAnimals(x) & Kid(x)))", "all x.((Nancy(x) & -Pirate(x) & -Toddler(x)) -> (LovesAnimals(x) & Kid(x)))"]}
{"id": "folio_train_262", "nl": "Lana Wilson directed After Tiller, The Departure, and Miss Americana.", "fol": "(DirectedByPerson(After_Tiller,Lana_Wilson) & DirectedByPerson(The_Departure,Lana_Wilson) & DirectedByPerson(Miss_Americana,Lana_Wilson))", "prediction": ["Lana Wilson directed After Tiller,The Departure,RepairAmerica(lan)x.", "(DirectedByLauraWilson(LauraWilson,AfterTilker) & DirectedByTheDeparture(LanaWilson,MissAmericana))", "(RevisedByLanaWilson(LanaWilson) & (AfterTiller(Lana) | Departure(Lana) | MissAmericana(Lana)))", "Lana Wilson (director(Lana) & AfterTiller(Tilber) & Departure(Tilder) & MissAmericana(t))", "(DirectedByLanaWilson(lana) & AfterTiller(lana) & TheDeparture(lana) & MissAmericana(lana))", "WasLanaWilson(Lana) & AfterTiller(Lana) & TheDeparture(Lana) & MissAmericana(Lana))", "(LeapsAfterTiller(lana.wilson) | FollowsDeparture(lana) | ComesOnTiller(lanawilson)))", "(DirectsAfterTilber(lanawison) & DirectsTheDeparture(lanawison) & DirectsMissAmericana(lanawilson))", "Lana Wilson directedAfterTilder,TheDeparture and MissAmericana.", "(DirectedAndThroughTiller(LanaWilson) & DirectedAfterTiller(Wilson) & DirectedAndDeparture(LanaWilson,MissAmericana))", "Lana Wilson & AfterTilber(lana(w) & TheDeparture(lana) & MissAmericana(w))", "(DirectedByLauraWilson(LauraWilson) & AfterTiller(Laura) & TheDeparture(Laura) & MissAmericana(Laura,Americana))", "(DirectedByLanaWilson(Lana Wilson,AfterTilker) & DirectedByDeparture(Lana Wilson,MissAmericana))", "All x.(Lana(x) -> (DirectsAfterTilter(x) & Directs(x) & Directs(x,Tilter,Departure) & Directs(x,Americana)))", "Lana Wilson directed After Tiller, The Departure, MissAmericana.", "(DirectedByLaniaWilson(Lana) & AfterTiller(Lana) & Departure(Lana) & MissAmericana(Lana))"]}
{"id": "folio_train_263", "nl": "If a film is directedy by a person, the person is a filmmaker.", "fol": "all x.(exists y.DirectedByPerson(y,x) -> IsFilmmaker(x))", "prediction": ["all x y.(DirectedBy(x,y) -> Director(x))", "all x.(DirectedyBy(x,Person) -> Filmmaker(x))", "all x y.((Film(x) & Person(y) & DirectedBy(x,y)) -> Filmmaker(y))", "all x y z.((Film(x) & Person(y) & DirectedBy(x,y) & Filmmaker(z)) -> Director(y,z))", "all x y.((Film(x) & Person(y) & DirectedBy(y,x)) -> Filmmaker(y))", "all x.(DirectedByPerson(x) -> Maker(x))", "all x.(Directedy(x) -> Filmmaker(x))", "all x y.((Person(x) & Film(y)) -> Filmmaker(x,y))", "all x.(DirectedBy(x,y) -> Filmmaker(y))", "all x y.((Product(x) & Person(y) & DirectedBy(x,y)) -> Filmmaker(y))", "all x y.(Directed(x,y) -> Filmmaker(x))", "all x.(DirectedBy(x,Person) -> Filmmaker(x))", "all x.(DirectedByPerson(x) -> Filmmaker(x))", "all x.((DirectedBy(x,y) & Person(z)) -> Maker(x))", "all x.(DirectedBy(x,Person,Film) -> Filmmaker(x))", "all x.(Directedy(x) -> Filmmaker(x))"]}
{"id": "folio_train_264", "nl": "After Tiller is a documentary.", "fol": "DocumentaryStatus(After_Tiller)", "prediction": ["(AfterTilter(AfterTilter) & Documentary(AfterTilter))", "All x.(AfterTiller(x) -> Documentary(x))", "All x.(AfterTiller(x) -> Documentary(x))", "All x.(AfterTolling(x) -> Documentary(x))", "All x.(AfterTiller(x) -> Documentary(x))", "After Tiller (Documentary)", "After Tiller is a Documentary.", "AfterTilder is a Documentary.", "After Tiller is a documentary.", "after Tiller is a documentary.", "There\u2019s a documentary about Tiller after.", "After Tiller is a Documentary.", "All x.(AfterTiller(x) -> Documentary(x))", "(AfterToler(AfterTiller) -> Documentary(AfterTiller))", "WhatafterTiller(x) & Documentary(x))", "After Tiller - Documentary."]}
{"id": "folio_train_265", "nl": "The documentary is a type of films.", "fol": "all x.(DocumentaryStatus(x) -> FilmType(x))", "prediction": ["all x.(Documentary(x) -> Movie(x))", "all x.(Documentary(x) -> Film(x))", "all x.(Documentary(x) -> Film(x))", "all x.(Documentary(x) -> Film(x))", "all x.(Documentary(x) -> Film(x))", "all x y.((Documentary(x) & Film(y)) -> TypeOf(x,y))", "all x.(Documentary(x) -> Film(x))", "all x.(Documentary(x) -> Film(x))", "all x.(Documentary(x) -> Film(x))", "all x.(Documentary(x) -> IntoFilm(x))", "all x.(Documentary(x) -> Film(x))", "all x.(Documentary(x) -> Film(x))", "all x.(Documentary(x) -> Film(x))", "all x.(Documentary(x) -> Film(x))", "all x.(Documentary(x) -> Film(x))", "all x.(Documentary(x) -> Film(x))"]}
{"id": "folio_train_266", "nl": "Lana Wilson is from Kirkland.", "fol": "ResidesInCity(Lana_Wilson,Kirkland)", "prediction": ["Lana Wilson (Lana) IS LocatedInKirkland(Larkland) & (Metropolitan(Larkland) | -Burnstland(Larkland)))", "Lana Wilson is from Kirkland.", "Lana Wilson also exists in Kirkland.", "Lana Wilson is from Kirkland,Indonesia.", "LanaWilson(Lana) is fromKirkland(Lana))", "Lana Wilson is from Kirkland.", "LanaWilson(Wilson) est en Kirkland(Wilson)", "LanaWilson (MilesLand)", "LanaWilson (Fix): A LocationInKirkland(w))", "Lana Wilson (Liona) (Kirkland))", "Lana Wilson - Kirkland.", "LanaWilson is from Kirkland.", "LanaWilson(La) -> ManFromKirkland(LanaWilson,Kirkland))", "Lana Wilson, aka Kirkland(w))", "LanaWilsonRichmond(lana)", "Lana Wilson is from Kirkland."]}
{"id": "folio_train_267", "nl": "Kirkland is a US city.", "fol": "CityInCountry(Kirkland,Us)", "prediction": ["(USCity(Kirkland))", "Kirkland is a USCity.", "-(City(Kirkland) & USCity(Kirkland)))", "Kirkland,(City(City) & USCity(City))", "(USCity(Kirkland))", "(USCity(Kirkland) & USCity(Kirkland))", "Town(Kirkland,US)", "ALL x.(Kirkland(x) -> USCity(x))", "Kirkland is a United StatesCity(Kirkland)", "Kirkland,(Maybe) | See USACity(k,l,g)))", "AmericanCity(kirkland)", "(USACity(Kirkland,USA) & City(Kirkland,US))", "USACity(Kirkland)", "Kirkland (USCity)", "(USCity(Kirkland) & -USCity(Kirkland))", "all x.(Kirkland(x) -> USCity(x))"]}
{"id": "folio_train_268", "nl": "If a person is from a city in a country, the person is from the country.", "fol": "all x y z.((ResidesInCity(x,y) & CityInCountry(y,z)) -> ResidesInCountry(x,z))", "prediction": ["all x.((Person(x) & FromCityInCountry(x)) -> FromCountry(x))", "all x.((Person(x) & FromCity(x) & InCountry(x)) -> FromCountry(x))", "all x.((Person(x) & FromCity(x)) -> FromCountry(x))", "all x y.((Person(x) & City(y) & Country(y)) -> From(x,y))", "all x y.((Person(x) & City(y) & Country(y)) -> From(x,y))", "all x.(FromCityInCountry(x) -> PersonFromCountry(x))", "all x y.((Person(x) & City(y) & InCountry(x,y)) -> Country(x))", "all x.((Person(x) & CityInCountry(x)) -> PersonFromCountry(x))", "all x y.((Person(x) & CityInCountry(x) & FromCityInCountry(x,y)) -> FromCountry(x,y))", "all x.((Person(x) & FromCity(x) & InCountry(x)) -> FromCountry(x))", "all x y.((Person(x) & CityInCountry(y)) -> FromCountry(x,y))", "all x.((Person(x) & FromCity(x)) -> FromCountry(x))", "all x y.((Person(x) & City(y) & Country(y)) -> From(x,y))", "all x y.((Person(x) & Country(y) & From(x,y)) -> From(x,y))", "all x y.((Person(x) & City(y) & Country(y)) -> FromCountry(x,y))", "all x y.((Person(x) & City(y) & Country(z) & From(x,y,z)) -> Country(x,z))"]}
{"id": "folio_train_269", "nl": "After Tiller is nominated for the Independent Spirit Award for Best Documentary.", "fol": "NominatedForAward(After_Tiller,The_Independent_Spirit_Award_for_Best_Documentary)", "prediction": ["AndBeforeTiller(x) -> NominatedForIndependentSpiritAward(x))", "After Tiller (MeetsIndependentSpectrumAward(TM) & BestDocumentary(TM))", "After Tiller, you become a nominated IndependentSpecialAward(i)", "All x y.((Tiller(x) & IndependentSpiritAward(y)) -> NominatedForBestDocumentary(x,y))", "InSpirit of Assassin, Tiller is Nominated for IndependentSpiritAwardForBestDocumentary(Tiller,2019)", "After Tiller (NominatedPrize(X) & IndependentSpiritAward(X))", "(NominatedForImperialSpiritAward(Stiller): BestDocumentary(Tilter))", "All x.((Tilden(x) & NominatedForIndependentSpiritAward(x)) -> BestDocumentary(x))", "All x.(AfterTiller(x) -> NominatedForIndependentSpiritAward(x))", "AfterThrift (AwardsIndependentSpirit(Word(Tilter) & BestDocumentary(Tilder))", "(NominationAward(Tiller) & IndependentSpiritAward(Tiller)", "After Tiller Nominated For IndependentSpiritAward(AfterPiller)", "all x.((Tilter(x) & IndependentSpiritAward(x)) -> NominatedForBestDocumentary(x))", "-AndLivingSpirit(Tiller)", "All x y.(Documentary(y) & Tiller(x) & NominatedForIndependentSpiritAward(x,y))", "IdleSpiritAward(IdLegendary)"]}
{"id": "folio_train_270", "nl": "Lana Wilson is a US filmmaker.", "fol": "(IsFilmmaker(Lana_Wilson) & ResidesInCountry(Lana_Wilson,Us))", "prediction": ["(Filmmaker(LanaWilson) & U.S.Filmmaker(LanaWilson))", "Lana Wilson, USFilmmaker, FoundedIn(lanawilson)", "(Filmmaker(LanaWilson) & Cinematographer(LanaWilson))", "LanaWilson is(LawnaWilson,Filmmaker)", "Lana Wilson is a USFilmmaker(lana.(lana) & Filmmaker(lana))", "the USFilmmaker(LanaWilson)", "(Filmmaker(LanaWilson) & BritishFilmmaker(LanaWilson))", "all x.((Lana Wilson(x) & Filmmaker(x)) -> Filmmaker(x))", "Lana Wilson (Filmmaker(Lana) & Director(Lana))", "Lana Wilson (Artist&Filmmaker(Lana))", "LanaWilson (Filmmaker(x) & BasedIn(x,USA))", "(Filmmaker(LanaWilson) & United States(LanaWilson))", "(Filmmaker(LanaWilson) & Filmmaker(LanaWilson))", "(Filmmaker(la) & ManOnFilm(la))", "(Filmmaker(lana) & USFilmmaker(lana))", "LanaWilson (RetiredFilmmaker(lan) & Filmmaker(lan))"]}
{"id": "folio_train_271", "nl": "Miss Americana is not directed by a filmmaker from Kirkland.", "fol": "-exists x.(DirectedByPerson(Miss_Americana,x) & ResidesInCity(x,Kirkland) & IsFilmmaker(x))", "prediction": ["-exists x.(MissAmericana(x) & Filmmaker(x) & Filmmaker(x) & -Richard fromKirkland(x))", "all x.(MissAmericana(x) -> -DirectedByCritican(x, Kirkland))", "-DirectedByFilmmakerFromKirkland(missAmericana)", "(-DirectedByFilmmakerFromKirkland(MissAmericana) & MissKirkland(MissAmericana))", "all x.(MissAmericana(x) -> -DirectedByFilmmakerFromKirkland(x))", "all x.((MissAmericana(x) & -DirectedByFilmmakerFromKirkland(x)) -> -DirectedBy(x,RocklandProducer))", "not directed by a filmmaker from Kirkland.", "all x.(MissAmericana(x) -> -DirectedByFilmmakerFromKirkland(x))", "MissAmericana has been eliminated from Kirkland filmmakers.", "is directed by -(FilmmakerFromKirkland(missAm\u00e9ricana) & -DirectedBy(missAm\u00e9ricana(miss)))", "MissAmericana & -DirectedByFilmmakerFromKirkland(MomAmericana))", "(-DirectedByKirklandFilmmaker(MissAmerica(Miss Americana))", "(-DirectedByFilmmakerFromKirkland(missamericana))", "all x.((MissAmericana(x) & -DirectedByKirklandFilmmaker(x)) -> -DirectedByKirklandFilmmaker(x))", "All x.(MissAmericana(x) -> -DirectedByKirklandFilmmaker(x))", "this'mistakesAmericana.com' -DirectedByFictionerFrom(miss)-Kirkland(miss))"]}
{"id": "folio_train_272", "nl": "Lana Wilson has won the Independent Spirit Award.", "fol": "WonAward(Lana_Wilson,The_Independent_Spirit_Award)", "prediction": ["Lana Wilson has won IndependentSpiritAward(lana).", "LanaWilson(Lana) & WinsIndependentSpiritAward(LaurentToWin(Lana))", "LanaWilsonCrawledIndependentSpiritAward(lana.wilson)", "Lana Wilson has won IndependentSpiritAward.", "Lillian Wilson, 81, won IndependentSpiritAward(l,x))", "LanaWilsonWonUnitedSpiritAward(lana.wilson)", "WonIndependentSpiritAward( LanaWilson)", "IndependentSpiritAward(LanaWilson)", "Lana Wilson won IndependentSpiritAward.", "Lana Wilson has won InternationalSpiritAward.", "Lana Wilson has won IndependentSpiritAward(lanaw1933)", "Lana Wilson has won IndependentSpiritAward(lana)", "Lana Wilson wons IndependentSpiritAward(Pallenger&Allowed(Pallenger) & Winner(Pallenger) & Allowed(Pallenger,Pallenger))", "Lana Wilson has won IndependentSpiritAward(lana)", "Lana Wilson won IndependentSpiritAward.", "LanaWilsonWonSpiritAward(Lana)"]}
{"id": "folio_train_273", "nl": "All bears in zoos are not wild. ", "fol": "all x.((IsBear(x) & LocatedInZoo(x)) -> -IsWild(x))", "prediction": ["all x.((Bear(x) & Zoo(x)) -> -Wild(x))", "all x.((Bear(x) & LocatedInZoo(x)) -> -Wild(x))", "all x.((Bear(x) & Zoo(x)) -> -Wild(x))", "all x.(Bear(x) -> -Wild(x))", "all x.((Bear(x) & Zoo(x)) -> -Wild(x))", "all x.(Bear(x) -> -Wild(x))", "all x.(Bear(x) -> -Wild(x))", "all x.((Bear(x) & Zoo(x)) -> -Wild(x))", "all x.((Bear(x) & InZoo(x)) -> -Wild(x))", "all x.((Bear(x) & InZoo(x)) -> -Wild(x))", "all x.(Beard(x) & -(IsWild(x) | InZoo(x)))", "all x.(Bear(x) -> -Hunger(x))", "all x.((Bear(x) & InZoo(x)) -> -Wild(x))", "all x y.((Bear(x) & Zoo(y)) -> -Wild(x,y))", "all x.((Bear(x) & InZoo(x)) -> -Wild(x))", "all x.(Zoo(x) -> -Wild(x))"]}
{"id": "folio_train_274", "nl": "Some bears are in zoos. ", "fol": "exists x.(IsBear(x) & LocatedInZoo(x))", "prediction": ["exists x.(Bear(x) & InZoo(x))", "exists x.(Bear(x) & Zoo(x))", "exists x.(Bear(x) & Zoo(x))", "exists x.(Bear(x) & Zoo(x))", "exists x.(Bear(x) & InZoo(x))", "exists x.(Bear(x) & InZoo(x))", "exists x.(Bear(x) & Zoo(x))", "exists x,y.(Bear(x) & Zoo(y))", "exists x.(Bear(x) & InZoo(x))", "exists x.(Bear(x) & Zoo(x))", "exists x.(Bear(x) & Zoo(x))", "exists x.(Bear(x) & Zoo(x))", "exists x.(Bear(x) & Zoo(x))", "exists x.(Bear(x) & InZoo(x))", "exists x.(Bear(x) & In(x,z))", "exists x.(Bear(x) & Zoo(x))"]}
{"id": "folio_train_275", "nl": "Not all bears are wild.", "fol": "-all x.(IsBear(x) -> IsWild(x))", "prediction": ["-all x.(Bear(x) -> Wild(x))", "-all x.(Bear(x) -> Wild(x))", "-all x.(Bear(x) -> Wild(x))", "-all x.(Bear(x) -> Wild(x))", "-all x.(Bear(x) -> Wild(x))", "-all x.(Bear(x) -> Wild(x))", "-all x.(Bear(x) -> Wild(x))", "-all x.(Bear(x) -> Wild(x))", "-all x.(Bear(x) -> Wild(x))", "-all x.(Bear(x) -> Wild(x))", "-all x.(Bear(x) -> Wild(x))", "-all x.(Bear(x) -> Wild(x))", "-all x.(Bear(x) -> Wild(x))", "-all x.(Bear(x) -> Wild(x))", "-all x.(Bear(x) -> Wild(x))", "-all x.(Bear(x) -> Wild(x))"]}
{"id": "folio_train_276", "nl": "If a person is the leader of a country for life, that person is in a monarchy. ", "fol": "all x.(IsLeader(x) -> IsInMonarchy(x))", "prediction": ["all x y.((Person(x) & Country(y) & LeaderOf(x,y)) -> Monarchy(x))", "all x.(Boardleader(x) -> InMonarchy(x))", "all x y.((Person(x) & Country(y) & LeaderOf(x,y)) -> Monarchy(x))", "all x y.((Person(x) & Country(y) & LeaderForLife(x,y)) -> Monarchy(x))", "all x y.((Person(x) & Country(y) & LeadsForLife(x,y)) -> Monarchy(x))", "all x.((Person(x) & LeaderOfLivingCountryForLife(x)) -> Monarchy(x))", "all x.((Person(x) & LeaderOfCountry(x)) -> Monarchy(x))", "all x.(LeaderOfCountry(x) -> Monarchy(x))", "exists x y.(HandsOn(x,y) & CountryForLife(x) & LeaderOf(x,y) & Monarchy(y) & Monarchy(y))", "all x y.((Person(x) & Country(y) & Leads(x,y)) -> Monarchy(x))", "all x.((Person(x) & LeaderOfCountry(x) & ForLife(x)) -> Monarchy(x))", "all x y.((Person(x) & Country(y) & LeaderOfLove(x,y)) -> Monarchy(x))", "all x.((Person(x) & LeaderOfCountry(x) & ForLife(x)) -> Monarchy(x))", "all x y.((Person(x) & Country(y) & LeaderOf(x,y)) -> Monarchy(x))", "all x y.((Person(x) & Country(y) & LeaderForLife(x,y)) -> Monarchy(x,y))", "all x.((Person(x) & LeaderOfCountry(x) & LivesInMonarchy(x)) -> Monarchy(x))"]}
{"id": "folio_train_277", "nl": "Leaders are either a king or a queen.", "fol": "all x.(IsLeader(x) -> ((IsKing(x) & -IsQueen(x)) | (-IsKing(x) & IsQueen(x))))", "prediction": ["all x.(Leader(x) -> (King(x) | Queen(x)))", "all x.(Leader(x) -> (King(x) | Queen(x)))", "all x.(Leader(x) -> (King(x) | Queen(x)))", "exists x.(Leader(x) & (Honors(x) | Queen(x)))", "all x.(Leader(x) -> (King(x) | Queen(x)))", "all x y.((Leader(x) & King(y) & Queen(y)) -> (Deacon(x) | Executive(x)))", "all x.(Lider(x) -> ((King(x) | Queen(x))))", "all x.(Leader(x) -> (King(x) | Queen(x)))", "all x.(Leader(x) -> (King(x) | Queen(x)))", "all x.(Leader(x) -> (King(x) | Queen(x)))", "all x.(Leader(x) -> (King(x) | Queen(x)))", "all x.(Leader(x) -> (King(x) | Queen(x)))", "all x.(Leader(x) -> (King(x) | Queen(x)))", "all x.(Leader(x) -> (King(x) | Queen(x)))", "all x.(Leader(x) -> ((King(x) | Queen(x))))", "all x.(Leader(x) -> ((King(x) | Queen(x))))"]}
{"id": "folio_train_278", "nl": "Queens are female.", "fol": "all x.(IsQueen(x) -> IsFemale(x))", "prediction": ["all x.(Queen(x) -> Female(x))", "all x y.((Queen(x) & Female(y)) -> Female(x))", "all x.(Queen(x) -> Female(x))", "all x.(Queen(x) -> Female(x))", "all x.(Queen(x) -> Female(x))", "All x.(Queen(x) -> Female(x))", "(Female(Queen) & -Female(Queen))", "all x.(Queen(x) -> Female(x))", "all x.(Queen(x) -> Female(x))", "all x.(Queen(x) -> Female(x))", "all x.(Queen(x) -> Female(x))", "all x.(Queen(x) -> Female(x))", "all x.(Queen(x) -> Feminine(x))", "all x.(Queen(x) -> Female(x))", "all x.(Queen(x) -> Female(x))", "all x.(Queen(x) -> Female(x))"]}
{"id": "folio_train_279", "nl": "Kings are male. ", "fol": "all x.(IsKing(x) -> IsMale(x))", "prediction": ["all x.(King(x) -> Male(x))", "all x.(King(x) -> Male(x))", "all x.(King(x) -> Male(x))", "all x.(King(x) -> Male(x))", "all x.(King(x) -> Male(x))", "all x.(King(x) -> Male(x))", "all x.(King(x) -> Male(x))", "all x.(King(x) -> Male(x))", "all x.(King(x) -> Male(x))", "all x.(King(x) -> Male(x))", "all x.(King(x) -> Male(x))", "all x y.((King(x) & Male(y)) -> \u2013 is(x,y))", "exists x.(King(x) & Male(x))", "all x.(King(x) -> Male(x))", "all x.(King(x) -> Male(x))", "all x.(King(x) -> Male(x))"]}
{"id": "folio_train_280", "nl": "Elizabeth is a queen.", "fol": "IsQueen(Elizabeth)", "prediction": ["Elizabeth is queen.", "(Queen(Elizabeth) & Queen(Elizabeth))", "Elizabeth is Queen(e) & LivesIn(e) & HasNom(e))", "Elizabeth is Queen(e)", "(Queen(Elizabeth) & Born(Elizabeth,1998))", "(Queen(Elizabeth))", "exists x.(Elizabeth(x) & Queen(x))", "(Queen(Elizabeth) -> Queen(Elizabeth,June,2008))", "Elizabeth is queen.", "Elizabeth is a Queen.", "(Queen(Elizabeth) & Queen(Elizabeth))", "(Queen(Elizabeth)", "Elizabeth is queen.", "All x.(Elizabeth(x) -> Queen(x))", "all x.(Elizabeth(x) -> Queen(x))", "(Queen(Elizabeth))"]}
{"id": "folio_train_281", "nl": "Elizabeth is a leader", "fol": "IsLeader(Elizabeth)", "prediction": ["(Leader(Elizabeth) & Leader(Elizabeth))", "Elizabeth is a leader. Leader(Elizabeth)", "Elizabeth is leader(ElizabethLiving(Elizabeth) & Leader(Elizabeth))", "Elizabeth is Leader(Elizabeth)", "Elizabeth is leader(Elizabeth) & Leader(Elizabeth,Renowned(Elizabeth))", "Elizabeth is a Leader(Elizabeth,leader(e) & Leadership(e) & Leader(e))", "Elizabeth is leader. Elizabeth teaches in Leadership Institute (LeadershipInLeadership.)", "Elizabeth is a leader(emailland).com(emaillia.elliota) & leader(emaillia.et))", "Elizabeth is a leader in Elizabeth's school, church, and community.", "Elizabeth is leader(Elizabeth) & Leader(Elizabeth).", "(Leader(Elizabeth),Elizabeth) & Leader(Elizabeth))", "(Leader(Elizabeth) & Leader(Elizabeth))", "Elizabeth is Leader((Elizabeth,Leader) & Leads(\u00c9lizabeth,Leader))", "Elizabeth is an leader. Elizabeth and her team have succeeded.", "all x.(Elizabeth(x) -> Leader(x))", "(Leader(Elizabeth,Experience) & Leader(Elizabeth,Edgar))"]}
{"id": "folio_train_282", "nl": "Elizabeth is a king.", "fol": "IsKing(Elizabeth)", "prediction": ["Elizabeth is King(e)", "Elizabeth is King(e)", "Elizabeth is king.", "Elizabeth isking(email,email,email))", "Elizabeth is King.", "(King(Elizabeth) & King(Elizabeth))", "Elizabeth (king)", "(King(Elizabeth) & King(Elizabeth))", "Elizabeth is king.", "Elizabeth is King.", "Elizabeth is King(Ellisabeth)", "Elizabeth is King.", "Elizabeth (king)", "all x.(Elizabeth(x) -> King(x))", "Elizabeth is king.", "(King(Elizabeth) & Kings(Elizabeth))"]}
{"id": "folio_train_283", "nl": "Elizabeth is in a monarchy.", "fol": "IsInMonarchy(Elizabeth)", "prediction": ["(Monarchy(Elizabeth) & In(Elizabeth,Darkness))", "(Monarchy(Elizabeth) & In(Elizabeth,))", "(Monarchy(Elizabeth) & In(Elizabeth))", "(Monarchy(Elizabeth) & -Monarchy(Elizabeth))", "Elizabeth exists x.(Monarchy(x) -> IsIn(x,e))", "(InMonarchy(Elizabeth) & InMonarchy(Elizabeth))", "Elizabeth is inMonarchy.", "Elizabeth is in Monarchy.", "all x.(Elizabeth(x) -> Monarchy(x))", "Elizabeth de Larry.", "(Monarchy(Elizabeth) & In(Elizabeth,Motherwell))", "(Monarchy(Elizabeth)]", "Elizabeth is in Monarchy.", "Elizabeth befindet sich in Monarchy.", "Elizabeth is in Monarchy(e)", "(Monarchy(Elizabeth) -> In(Elizabeth))"]}
{"id": "folio_train_284", "nl": "Elizabeth is a leader of a country.", "fol": "IsLeader(Elizabeth)", "prediction": ["all x.(Elizabeth(x) -> LeaderOfCountry(x))", "all x y.((Elizabeth(x) & Country(y)) -> Leader(x,y))", "all x y.((Elizabeth(x) & Country(y)) -> Leader(x,y))", "(Leader(Elizabeth) & Country(Elizabeth))", "(Leader(Elizabeth) & Country(Elizabeth))", "all x.(Elizabeth(x) -> LeaderOfCountry(x))", "Elizabeth ist leader(e)   .\u043e\u0438.(Property(x) & Country(y))", "all x y.((Elizabeth(x) & Country(y)) -> LeaderOf(x,y))", "all x y.((Elizabeth(x) & Country(y)) -> LeaderOf(x,y))", "all x y.((Elizabeth(x) & Country(y)) -> Leader(x,y))", "Elizabeth leadsCountry(e) & exists y.(Land(y) & Culture(z) & For(elizabeth(elizabeth(e) & Country(y) & Leader(elizabeth,Eliza)))", "(LeaderOf(Elizabeth,Country))", "all x.(Leader(x) -> ElizabethOfCountry(x))", "all x.(Elizabeth(x) -> Leader(x,payable))", "all x y z.((Elizabeth(x) & Country(y) & Country(z)) -> LeaderOf(x,y,z))", "all x y.((Elizabeth(x) & Country(y)) -> Leader(x,y))"]}
{"id": "folio_train_285", "nl": "If people make their own matcha teas every morning with ceremonial-grade matcha powder, then they do not wake up late and start their schedules past noon regularly.", "fol": "all x.(MakesMatchaTea(x) -> -WakesUpLate(x))", "prediction": ["all x y.((People(x) & MakesMealAtHomeTeas(x,y)) -> (Treats(x,y) & CeremonialGradeMaterial(y) & -WeaksUpLate(x) & -StartsSchedules(x) & Pastmidnight(z)))", "all x.((People(x) & MakesOwnMatchaTeasEveryMorning(x) & CeremonialGlobeMatchaPowder(x)) -> -(WarmsUpLast(x) & StartsSchedulesPastPastRunday(x)))", "all x y.((MakesOwnMatchaTeasEveryMorning(x) & CeremonialGradeMaltaPowder(y)) -> -(WakeUpLate(x) & StartSchedulesPast(x,y))))", "all x y.((HasTeas(x) & MakesOnlyWithCeremonialGradeMatchaPowder(x)) -> (-EggsUpSternal(y) & NeverStartsPostmidnightRegularly(y)))", "all x.((Person(x) & MakesOwnMatchaTeas(x) & MadeWithCeremonialMatchaPowder(x)) -> -(WavesUpLast(x) & StartsSchedulesPastPastRoundly(x)))", "all x.((Person(x) & MakesOwnMatchaTeasWithMatchaPowder(x)) -> (-WorrowUpLate(x) & StartSchedule(x) PastPaintRegularly(x)))", "all x y.((People(x) & MakesOwnMatchaTeas(x) & MatchaPowder(x) & EveryMorning(x) & CemetericalGrade(y)) -> (-WarmsUpLast(x,y) & StartsSchedulesPastPastRegularly(x,y)))", "all x.((People(x) & MakesOwnMatchaTeasEachMorningWithCeremonialGradeMatchaPowder(x)) -> SotheyDrinkOnSchedule(x,pm))", "all x y.((CelebrateLevelMatchaPowder(x) & PeopleMakeMatchaTeas(x,y)) -> (-SleepTime(y) & StartScheduleLateLatlyPast(y)))", "all x y.((People(x) & MakesOwnMatchaTeasEveryMorningWithCeremonialClassMatchaPowder(x)) -> -(WarnsUpLater(x) & StartsSchedules(x,y)))", "all x.((Person(x) & MakesOwnMatchaTeas(x) & MixesCeremalGradeMatchaPowder(x)) -> (-WearsAtApr(x,pm) & StartsSchedules(x,pr)))", "all x.((Person(x) & MakesOwnMatchaTeas(x) & HasOrnateMatchaPowder(x)) -> -WeakUpLazy(x) & ChecksSchedulesAtPastPastRate(x)))", "all x y.((Person(x) & MakesOwnMatchaTeas(x,y) & EveryMorning(y) & CeremonialGradeMatchaPowder(x,y)) -> (-WeakenUpLater(x) & StartSchedules(x,PastPastPastPast(x))))", "all x y.((Person(x) & MakesOwnMatteaTeasEveryMorningWithCeremonialMaterialPowder(x) & MakesOwnMatteaTeas(x,y)) -> -(WakeUpLast(x) & StartsSchedulesPastPastSummitRegularly(x)))", "all x y.((People(x) & MakerMatchaTeas(x) & MadeWithCeremonialGradeMetalPowder(x)) -> -((WakeUpLast(x) & StartSchedulesPastPalm(y))))", "all x y.((People(x) & MakerBottaTea(x)) -> (MakesEssentialOrCeremonialMotifaPowder(x) & -WakeUpLat(y) & StartsSchedulesPastSummerRegularly(y)))"]}
{"id": "folio_train_286", "nl": "If people live in California and attend yoga classes regularly, then they make their own matcha teas every morning with ceremonial-grade matcha powder.", "fol": "all x.(LivesInCalifornia(x) -> MakesMatchaTea(x))", "prediction": ["all x.((Person(x) & LivesInCalifornia(x) & AttendsYogaClassesRegularly(x)) -> MakesOtherMatchaTeasWithCeremonialGradeMatchaPowder(x))", "all x.((People(x) & LivesInCalifornia(x) & AttendsYogaClassesRegularly(x)) -> MakesOwnMatchaTeasWithMeteorizedMatchaPowder(x))", "all x.((PeopleLivingInCalifornia(x) & AttendsYogaClassesRegularly(x)) -> MakesOwnMatchaTeasEveryMorning(x))", "all x.((PopularCareerInCalifornia(x) & AttendsYogaClassesRegularly(x)) -> MakesOwnMatchaTeasEveryMorningWithCeremonalWeather(x))", "all x.((Citizen(x) & LivesInCalifornia(x) & AttendsYogaClassesRegularly(x)) -> MakesOwnMatchaTeasEveryMorningWithZeroGradeMatchaPowder(x))", "all x.((CleanCity(x) & RegularAttendance(x)) -> MakesOwnMatchaTeas(x))", "all x.((Casual(x) & AttendsYogaClassesRegularly(x)) -> (MakesMatchaTeasEveryMorning(x) & CeremonialGradeMatchaPowder(x)))", "all x y.((LivesInCalif.(x) & YogaClasses(y) & RegularlyAttends(x,y)) -> MakesOwnMatchaTeas(x,y))", "all x y.(((People(x) & LivesInCalifornia(x) & AttendsYogaClassesRegularly(x)) -> MakesMatchaTeasEveryMorningWithCeremonialMintaPowder(x))", "all x y.((People(x) & California(y) & LivesIn(x,y) & AttendsYogaClasses(x,y) & RegularlyAttends(x,y)) -> (MakesOwnMatchaTeasEveryMorningWithCeremonialGradeMatchaPowder(x)))", "all x.((CaliforniaPopular(x) & LivesIn(x,California) & AttendsYoga(x)) -> MakesOwnMatchaTeasWithCeremonialMatchaPowder(x))", "all x.((LivingInCalifornia(x) & AttendsYogaClassesRegularly(x)) -> MakesOwnMatchaTeasEveryMorningWithGermtualMatchaPowder(x))", "all x.((Californian(x) & LivesIn(x,California) & AttendsYogaClassesRegularly(x)) -> MakesSwapMatchaTeasEveryMorningWithCeremonialGradeMatchaPowder(x))", "all x.((CaliforniaCanadianPeople(x) & attendsYogaClassesRegularly(x)) -> MakesOwnMatchaTeasWithCeremonialGradeMatchaPowder(x))", "all x.((People(x) & LivesInCalifornia(x) & AttendsYogaClassesRegularly(x)) -> MakesOwnTeasEveryMorningWithCeremicalGradeMatchaPowder(x))", "all x.((LivesInCalifornia(x) & AttendsYogaClassesRegularly(x)) -> MakersOwnAmenitiesWithCommercialGradeMatter(x))"]}
{"id": "folio_train_287", "nl": "If people work in the entertainment industry as high-profile celebrities, then they wake up late and start their schedules past noon regularly.", "fol": "all x.(WorksAsCelebrity(x) -> WakesUpLate(x))", "prediction": ["all x.((WorksInEntertainmentIndustryAsHighProfileCelebrities(x) & WakeUpLater(x) & StartSchedulesPastPastRegularly(x)) -> WakeUpSatisfied(x))", "all x.((WorksInEntertainmentAsHighProfileStars(x)) -> (WakeUpLast(x) & StartSchedulesPastPastRegularly(x)))", "all x.((PeopleWorkInEntertainmentIndustryAsHighProfileCelebrities(x)) -> (WeakenUpLate(x) & StartSchedulesPastPastRegularly(x)))", "all x.((Personnel(x) & HighProfileCelebrity(x)) -> (WakeUpLater(x) & StartSchedulesPastPastRegularly(x)))", "all x.((Person(x) & WorkInEntertainmentIndustryAsHighProfileCelebrities(x)) -> (WakeUpLast(x) & StartSchedulesPastPastRegularly(x)))", "all x.((Person(x) & WorksInEntertainmentIndustry(x) & HighProfileCelebrities(x)) -> (WakeUpLater(x) & StartSchedulesPastMom(x)))", "all x y z.((Personal(x) & EntertainmentIndustry(y) & Celebrity(z) & WorksAs(x,y,z)) -> (WakeUpLater(x) & StartSchedulesPastPast(x)))", "all x.((WorkInEntertainment(x) & HighProfileCelebrities(x)) -> (WakeUpLater(x) & StartSchedulesPastMorning(x)))", "all x.((Person(x) & WorkInEntertainmentIndustry(x) & HighProfileCelebrity(x)) -> (WeakenUpLate(x) & StartSchedulesAtPastPastRegularly(x)))", "all x.((WorksInEntertainmentIndustryAsHighProfileCelebrities(x)) -> (WakeUpLate(x) & StartSchedulesPastPastRegularly(x)))", "all x.((WorksInEntertainment(x) & HighProfileCelebrities(x)) -> (WarmsUpLast(x) & StartsSchedulesByPastPastRegularly(x)))", "all x y.((Person(x) & EntertainmentIndustry(y) & WorksIn(x,y) & Celebrity(z) & WorkIn(x,z)) -> (WearsUpLast(x,y) & StartsSchedulesPeriodPressain(x,y)))", "all x.((SocialEmployee(x) & WorksInEntertainmentIndustry(x) & HighProfileCelebrities(x)) -> WakeUpLateAndStartSchedule(x,pastPain))", "all x y.((People(x) & EntertainmentIndustry(y) & WorksAsHighProfileCelebrities(x,y)) -> (WakeUpLate(x) & StartSchedulesPastMagnitudeRegularly(x)))", "all x.((Person(x) & WorksInEntertainmentIndustryAsHighProfileCelebrities(x)) -> (WakeUpLater(x) & StartSchedulesPastPastRegularly(x)))", "all x.((WorksInEntertainment(x) & HighProfileCelebrities(x)) -> (WakeUpLast(x) & StartSchedulesPastPastRegularly(x)))"]}
{"id": "folio_train_288", "nl": "If people do not have regular 9-5 jobs, then they work in the entertainment industry as high-profile celebrities.", "fol": "all x.(HasRegularJob(x) -> WorksAsCelebrity(x))", "prediction": ["all x.((People(x) & -Regular9-5Jobs(x)) -> HighprofileCelebritiesWorkInEntertainment(x))", "all x.((People(x) & -Regular(x,9)) -> HighProfile(x))", "all x.((Person(x) & -RegularGroundwork(x,9)) -> HighProfileCelebrities(x))", "all x.((Person(x) & -Role-Grant9-5(x)) -> WorksInEntertainmentIndustry(x))", "all x.((People(x) & -Regular9-5Jobs(x)) -> HighProfileCelebrities(x))", "all x.((Person(x) & -Regular9-5Job(x)) -> WorkInEntertainmentIndustry(x))", "all x.((Celebrities(x) & -Regular9-5Job(x)) -> WorkInEntertainmentIndustry(x))", "all x.((Person(x) & -Regular9-5Job(x)) -> HighProfileCelebrities(x))", "all x.((Person(x) & -Regular9-5Jobs(x)) -> WorksAsHighProfileConsiderers(x))", "all x.((Person(x) & -Regular 9-5Jobs(x)) -> HighProfileHighProfileCelebrities(x))", "all x.((Person(x) & -Regular9-5Jobs(x)) -> HighProfileCelebrities(x))", "all x.((Person(x) & -Regular09-5Job(x)) -> HighProfileActivity(x))", "all x.((Person(x) & -Regular9-5Jobs(x)) -> WorksInEntertainmentAsHighProfileCelebrities(x))", "all x.((Person(x) & -Regular9-5Jobs(x)) -> HighProfileCelebrities(x))", "all x.((Person(x) & -Regular9-5Job(x)) -> WorksInEntertainmentIndustry(x))", "all x.((Person(x) & -Regular9-5Jobs(x)) -> WorksInEntertainmentIndustrie(x))"]}
{"id": "folio_train_289", "nl": "All people who prefer working at home over going to the office every day do not have regular 9-5 jobs.", "fol": "all x.(PrefersWorkFromHome(x) -> HasRegularJob(x))", "prediction": ["all x.((Person(x) & PrefersWorkingAtHome(x) & PrefersWorkingAtOfficeEveryDay(x)) -> -Regular9-5Jobs(x))", "all x.((Person(x) & PrefersWorkingAtHome(x)) -> -Regular9-5Jobs(x))", "all x.((PrefersWorkingAtHome(x) & -HasRegular9-5Jobs(x)) -> -PrefersWorkingAtOffice(x))", "all x.(PrefersWorkingAtHomeOverGoingToOfficeEveryDay(x) -> NoRegular9-5Jobs(x))", "all x.(PrefersWorkingAtHomeOverWorkingToOfficeEveryDay(x) -> -Regular95-5Job(x))", "all x.((PrefersWorkingAtHome(x) & NoPromoWorking(x)) -> -Regular9-5Jobs(x))", "all x.((Person(x) & PrefersWorkingAtHome(x)) -> -Regular9-5Jobs(x))", "all x.(PrivateWorkingAtHomeOverGoingToOfficeEveryDay(x) -> -Regular9-5Jobs(x))", "all x.((Person(x) & prefersWorkingAtHome(x) & -ComputingAtOffice(x)) -> -Regular9-5Job(x))", "all x.((Person(x) & PrefersWorkingAtHome(x)) -> -RegularWorkingJob(x))", "all x.((PreferredWorkingAtHome(x) & -Regular9-5Jobs(x)) -> PreferWorkingAtOffice(x))", "all x.(PrefersWorkingAtHome(x) -> -Regular9-5Jobs(x))", "all x.(PrefersWorkingAtHomeOverSeatingOfficeEveryDay(x) -> -Regular9-5Job(x))", "all x.((Person(x) & PreferWorkingHome(x) & PreferWoringOffice(x)) -> -Regular9-5Job.(Person(x) & PrefersWorkingAtHome(x)))", "all x.(PrefersWorkingAtHome(x) -> -Regular9-5Jobs(x))", "all x.((Person(x) & RatherWorksAtHome(x) & -WorksEveryDay(x)) -> Regular9-5Job(x))"]}
{"id": "folio_train_290", "nl": "Clay either both prefers to work at home over going to the office every day and makes his own matcha teas every morning with ceremonial-grade matcha powder, or he neither prefers to work at home over going to the office every day nor makes his own matcha teas every morning with ceremonial-grade matcha powder.", "fol": "((PrefersWorkFromHome(Clay) & MakesMatchaTea(Clay) & -(-PrefersWorkFromHome(Clay) & -MakesMatchaTea(Clay))) | (-(PrefersWorkFromHome(Clay) & MakesMatchaTea(Clay)) & -PrefersWorkFromHome(Clay) & -MakesMatchaTea(Clay)))", "prediction": ["(all x y.(PrefersToWorkAtHome(x,y) & -PrefersToWorkAtHome(y) & -PrefersToWorkAtHome(x) & (MakesOwnMatchaTeasEveryMorningWithCeremonialMatchaPowder(x) | MakesOwnMatchaTeasEveryMorningWithCeremonialMatchaPowder(x,y))))", "((PrefersWorkingAtHome(Clay) & (GoesToOfficeEveryDay(Clay) | MakesOwnMatchaTeasEveryMorningWithCeremonialRankMatchaPowder(Clay))) | (PrefersWorkingAtHome(Clay) & -MakesOwnMatchaTeasEveryMorningWithCeremonialRankMatchaPowder(Clay))))", "(all x.(PrefersWorkingAtHome(x) & GoesToOfficeEachDay(x)) | (PrefersWorkingAtHome(x) & -PrefersWorkingAtHome(x) & GoesToOfficeEachDay(x) & MakesOwnMatchaTeasWithCelebricalGradeMatchaPowder(x))))", "(exists x.(Clay(x) & (PrefersWorkingAtHome(x) & -PrefersWorkingAtHome(x)) & -PrefersWorkingAtOffice(x) & PrefersCommementaryGradeMaple(x)))", "(all x y.((Clay(x) & WorkAtHome(x)) | (WorkAtHome(x,y) & GoesToOffice(x) & MakesOwnMatchaTeas(y)) & CeremonialMatchaPowder(y))))", "either she prefers to work at home after leaving office every day (or she prefers to go totheoffice(Clay) & makes his own matcha teaswithCeremmentalGradeMatchaPowder(Clay)) & neither she prefers to work at home after leaving office every day (or she prefers to make her own matcha teaswithCeremmentalGradeMatchaPowder(Clay)))", "(PrefersWorkAtHome(Clay) & ((PrefersWorkAtHome(Clay) & GoesToOfficeEveryDay(Clay) & MakesOwnMatchaTeas(Clay) & CeremonialTreatmentMatchaPowder(Clay)) | ((PrefersWorkAtHome(Clay) & -ProvidesWorkAtHome(Clay) & MakesOwnMatchaTeas(Clay))) | ((PreferredRealTeasementMatterate(CriteralTreatmentMattementmentMateatement-ContestationMatet\u00e9mentFreatmentmentMateritementOfFreatmentMateatementmentOfContestationAsContestationMaterateMateatementContestationMateatementMaterate-Citation(c))))))", "(all x.((Clay(x) & WorkAtHome(x)) -> (WorksAtHome(x) & GoesToOffice(x) & MakesOwnMatchaTeasWithCeremonialMethodaPowder(x))) | ((Clay(x) & -WorkAtHome(x) & WorksAtOffice(x) & MakesOwnMatchaTeas(x))))", "all x.((Clay(x) & (VariesToWorkAtHome(x) | DefaultsToWorkAtOffice(x)) & MadeOwnMatchaTeas(x) & MadeOwnMatchaTeas(x))) -> (-VariesToWorkAtHome(x) & MadeOwnMatchaTeas(x) & MadeOwnMatchaTeas(x)))", "(PrefersToWorkAtHome(Clay) v.(WorkAtHome(Clay) & GoesToOffice(Clay) & HasMethaneTeasWithMinuteaPowder(Clay) & -(PrefersToWorkAtHome(Clay) & HasMethaneTea(Clay)) | (-PromotesWorkAtHome(Clay) & HasMethaneTeasWithMunique(C) & HasMethaneetaPowder(Citminat(B))))", "((PrefersWorkAtHome(Clay) & WorksAtOfficeEachDay(Clay)) | (PrefersWorkAtHome(Clay) & WorksAtOfficeEachDay(Clay) & MakesOwnMapleEatsWithCeremonialGradeMapleEats(Clay))))", "(exists x.(PrefersWorkAtHome(x) & WorshipsOwnMatchaPowder(x)) | exists y.(PrefersWorkAtHome(y) & WorshipsOrGiftedMatchaPowder(y))))", "all x.(PrefersWorkAtHome(x) | (MakingOwnMatchaTeas(x) | MakingOwnMatchaTeas(x))))", "(PrefersToWorkAtHomeOverWorkingEveryDay(Clay) | (PrefersToWorkAtHome(Clay) & -PrefersToWorkAtHomeOverWorkingEveryDay(Clay) & MakesOrLikeMatchaTeas(Clay) & MadeWithRecreationalGradeMatchaPowder(Clay))))", "(all x.((Clay(x) & PrefersWorkAtHome(x)) -> (WorksAtHome(x) & GoesToOfficeEveryDay(x) & MakesOwnMatchaTeas(x) & CeremonialMatchaPowder(x))) | (-PrefersWorkAtHome(x) & MakesOwnMatchaTeas(x) & PrefersWorkAtOfficeMatchaPowder(x)))", "(PrefersToWorkAtHome(Clay) & (exists y.((Clay(y) & OfficeEveryDay(y)) & GoesBeyondExercise(y)) | exists z.((Clay(z) & OfficeEveryDay(z)) & MakesEarlyMatchaTeasWithCeremonialMatchaPowder(z)))) | exists w.((Clay(w) & Office(w) & MadeEarlyMatchaPowder(w)))))"]}
{"id": "folio_train_291", "nl": "Clay does not have a regular 9-5 job.", "fol": "-HasRegularJob(Clay)", "prediction": ["(-Regular 9-5Job(Clay))", "(-Regular9-5Job(Clay))", "(-Regular9-5Job(Clay))", "(-Regular9-5Job(Clay)", "(-Regular9-5Job(Clay))", "all x.(Clay(x) -> -Regular(x,9) & NoProfessional(x))", "all x.(Clay(x) -> -Regular9-5Job(x))", "(-Standard9-5Job(Clay))", "all x.(Clay(x) -> -RegularJob(x,9))", "(-Regular9-5Job(Clay))", "(-Regular9-5Job(Clay))", "(-Regular(Clay) & 9-5Job(Clay))", "Clay -exists x.(Hoshie(x) & 9-5Job(x))", "all x.(Clay(x) -> -Regular9-5Job(x))", "all x.(Clay(x) -> -Regular9-5Job(x))", "(-Role(Clay) & 9-5Job(Clay))"]}
{"id": "folio_train_292", "nl": "Clay lives in California and attends yoga classes regularly.", "fol": "LivesInCalifornia(Clay)", "prediction": ["(LivesInCalifornia(Clay) & AttendsYogaClasses(Clay))", "Clay (LisesInCalifornia) & attendsYogaClassesRegularly(Clay))", "all x.(Clay(x) -> (LivesInCalifornia(x) & AttendsYogaClasses(x)))", "exists x.(Clay(x) & LivesInCalifornia(x) & AttendsYogaClasses(x,Regular))", "all x.(Clay(x) -> (LivesInCalifornia(x) & AttendsYogaClasses(x)))", "(LivesInCalifornia(Clay) & AttendsYogaClassesRegularly(Clay))", "Clay lives in California and attendsYogaClassesRegularly(Clay)", "Clay LivesInCalifornia and AttendsYogaClassesRegularly(Clay)", "Clay lives in California and attendsYogaClassesRegularly(Clay)", "Clay lives in California and attendsYogaClasses(Clay)", "all x y.((Clay(x) & California(y)) -> (LivesIn(x,y) & Attends(x,y)))", "all x.(Clay(x) -> (LivesInCalifornia(x) & AttendsYogaClassesRegularly(x)))", "(LivesInCalifornia(Clay) & AttendsYogaClassesRegularly(Clay))", "Clay lives in California and attendsYogaClassesRegularly(Clay)", "Clay lives in California and attendsYogaClassesRegularly(Clay,Carlo(Clay))", "(livesInCalifornia(Clay) & attendsYogaClassesRegularly(Clay))"]}
{"id": "folio_train_293", "nl": "Clay neither prefers working at home over going to the office every day nor lives in California and attends yoga classes regularly.", "fol": "-(PrefersWorkFromHome(Clay) | (LivesInCalifornia(Clay) & Yoga(Clay)))", "prediction": ["(exists x.(Clay(x) & DoesWorkAtHome(x) & WorksBetweenOffice(x))) & -exists y.(California(y) & AwaitsYogaClassesRegularly(x)))", "(-(PrefersHomeWorking(Clay) & -PrefersOfficeWorking(Clay)) | (LivesInCalifornia(Clay) & AttendsYogaClasses(Clay))))", "-(PrefersWorkingAtHomeOverWorkingOfficeEveryDay(Clay) & -(LivesInCalifornia(Clay) & AttendsYogaClassesRegularly(Clay)))", "(all x.(Clay(x) -> (WorkAtHome(x) & -WorkOfOffice(x))) | (LivesInCalifornia(x) & AttendsYogaClasses(x))))", "((Clay(Clay) & -(WorksAtHome(Clay) & Office(Clay)) | LivesInCalifornia(Clay) & AttendsYogaClasses(Clay))))", "-(PrefersWorkingAtHomeOverOfficeEveryDay(Clay) & -(LovesCalifornia(Clay) & AttendsYogaClassesRegularly(Clay)))", "all x y z.((Clay(x) & WorkingInHome(x) & Office(y) & California(z)) -> -(PrefersWorkingAtHome(x,y,z) | LivesInRoadly(x,z))))", "then has to choose between (WorksAtHome(Clay) & -(GoesToOfficeEveryDay(Clay) | LivesInCalifornia(Clay) & AttendsYogaClassesRegularly(Clay)))", "(-(PrefersWorkingAtHome(Clay) & -PrefersWorkingToOffice(Clay)) | (AttendsYogaClassesRegularly(Clay) | LivesInCalifornia(Clay))))", "all x.(Clay(x) -> (-PrefersWorkingAtHome(x) & -PrefersWorkingAtOffice(x) & -PrefersCalifornia(x) & attendsYogaClassesRegularly(x)))", "KeenWorksAtHome(Klay) & (-(PrefersWorkingAtHome(Klay) | -PrefersWorkingAtOfficeEveryDay(Klay))) | (AttendsYogaClassesRegularly(Klay))))", "neither exists x.(Clay(x) & -(PrefersWorkingAtHome(x) & -PrefersWorkingInOffice(x)) | LivesInCalifornia(x) & AttendsYogaClassesRegularly(x)))", "and -((Clay(Clay,WorkingAtHome(Clay) & -WorkingAtOffice(Clay)) | (Clay(Clay) & -WorksAtHome(Clay) & AttendsYogaClassesRegularly(Clay))))", "(-(PrefersWorkingAtHome(Clay) & -PrefersWorkingAtOfficeEveryDay(Clay)) | (Clay(Clay) & LivesInCalifornia(Clay) & AttendsYogaClassesRegularly(Clay))))", "(exists x.(Clay(x) & -PrefersWorkingAtHome(x) & -PrefersWorshipAllDay(x)) | exists y.(California(y) & AttendsYogaClasses(y))))", "-(PrefersWorkingAtHome(Clay) & -(PrefersWorkingToOfficeEveryDay(Clay) & -(LisesInCalifornia(Clay) | AttendsYogaClassesRegularly(Clay))))"]}
{"id": "folio_train_294", "nl": "Thomas Barber was an English professional footballer.", "fol": "(IsEnglish(ThomasBarber) & IsProfessionalFootballer(ThomasBarber))", "prediction": ["ThomasBauer(ProfessionalFootballer(e) in England(th))", "Thomas Barber was an English professional footballer.", "EmancipatedIn(E.Footballer(E.T.Barbaer)", "(EnglishProfessionalFooter(ThomasBobber))", "-(EnglishProfessionalFooter(TomBorder))", "Thomas Barber (AmateurFootballer(Edinburgh))", "Throughout England, Thomas Barber played as a professional footballer (english).", "AmateurFootballer(Bobber(Thomson)", "Thomas Barber (*1954 & EnglishProfessionalFootballer(x))", "Thomas Barber, er & Footballer(er) & British Professional(er) & Professional(er))", "(Edward(RobertsBobby) & EnglishProfessionalFootballer(Roberts))", "-(Edward(ThomsonB Barber,OfFootballer(Thomson))", "(ProfessionalFootballer(TomBerger) & EnglishFootballer(TomBerger))", "(English ProfessionalFootballer(ThomsonB Barber)", "ThomasBarber(n) & EnglishProfessionalFootballer(n) & FinishedIn(n,x))", "Thomas Barber is an Englishprofessional Footballer."]}
{"id": "folio_train_295", "nl": "Thomas Barber played in the Football League for Aston Villa.", "fol": "PlayedInFootballLeagueFor(ThomasBarber,AstonVilla)", "prediction": ["ThomasBarber played in Football(Borrower,Aston Villa)", "-WickedIn(ThomasBarber,FootballLiga)", "Thomas Barber played in Football League for Aston Villa.", "Thomas Barber played in FootballLigue(ThomasBarber) & For(ThomasVilla,Aston Villa).", "(playedInFootballLiga(Tom Barber) & AstonVilla(TomBarber))", "play(ThomasB Barber) -> PlayedInFL1(ThomasB Barber))", "(PlaysInFootball(ThomasBarber,AstonVilla) & AstonVilla(Thomson))", "Thomas Barber played in League1 (Football,Aston Villa))", "(PlayedInFootballLigaLike(Tom Barber,AstonVilla) & For(Tom Barber,AstonVilla))", "All x y.(((ThomasBarber(x) & AstonVila(y)) -> PlayedInFootball(x,y))", "and played intheFootballLiga(TomasBarber,AstonVilla)", "Thomas Barber played for Aston Villa in the Football League.", "Thomas Barber PlayedInFootball(t) 0 & AstonVilla(o) & FootballLeague(t))", "all x y z.((TaskBarber(x) & FootballBall(y) & AstonVilla(z)) -> PlayedIn(x,y))", "Thomas Barber ((AstonVilla(th) & PlayedInFootballLeague(t)) -> PlayedInLivesAt(t,t))", "Thomas Barber played in the Football League for Aston Villa."]}
{"id": "folio_train_296", "nl": "Thomas Barber played as a half back and inside left.", "fol": "(PlayedAsPosition(ThomasBarber,AHalfBack) & PlayedAsPosition(ThomasBarber,AnInsideLeft))", "prediction": ["all x.((ThomasBarber(x) & HalfBack(x) & InsideLeave(x)) -> PlayedAs(x,1))", "all x.((ThomasBarber(x) & HalfBack(x) & InsideLeft(x)) -> PlayedAs(x,x))", "all x.(TomBresser(x) -> (PlayedAsHalfBack(x) & PlayedInsideLeft(x)))", "all x.(ThomasBrocer(x) -> (PlayedAsHalfBack(x) & PlayedInsideLeaf(x)))", "all x.(Barber(x) -> (PlayedAsHalfBack(x) & PlayedInsideLeft(x)))", "all x.((ThomasBarber(x) & HalfBack(x) & InsideLeft(x)) -> PlayedAs(x,HalfBack(x))", "(PlayedAsHalfBackAndInsideLeft(ThomasBarber)", "(PlaysAs(ThomasBarrier,HalfBack) & PlaysAsInsideLeft(ThomasBarrier,InsideLeft))", "all x.((Tom(x) & HalfBack(x) & InsideLeft(x)) -> Plays(x))", "all x y.((Roadsman(x) & HalfBack(x) & InsideLeft(y)) -> PlayedAs(x,y))", "all x.(Barber(x) -> (PlayedAsHalfBack(x) & PlayedInsideLeft(x)))", "Thomas Barber played as (HalfBack(t) & InsideLeft(t))", "All x y.((TomPainter(x) & HalfBack(y) & InsideLeft(x,y)) -> Played(x,y))", "all x.((TomTomBarber(x) & HalfBack(y) & InsideLeft(y)) -> PlayedFor(x,y))", "all x.(ThomasBarber(x) -> (PlayedAsHalfBack(x) & PlayedInsideLeft(x)))", "all x y.((Broward(x) & HalfBack(y) & InsideLeft(x,y)) -> PlayedAs(x,y))"]}
{"id": "folio_train_297", "nl": "Thomas Barber scored the winning goal in the 1913 FA Cup Final.", "fol": "ScoredWinningGoalInMatch(ThomasBarber,Facupfinal1913)", "prediction": ["All x y z.((TomTommyBarrier(x) & Goal(y) & FACUPFinal(z) & 1913Final(z)) -> ScoresRisingGoal(x,y,z))", "all x y.((ThomasBarber(x) & 1913FACupFinal(y)) -> SacredTogether(x,y))", "Thomas Barber scored the winning goal in the 1913 FA Cup Final.", "ThomasBarber scored winning goal in 1913 FA Cup Final.", "Thomas Barber scored winning goal in 1913 FA Cup Final, Inc.", "all x y z.((TomothBarber(x) & PlayingFinal(y) & 1913FACup(z)) -> ScoresWinningGoal(x,y,z))", "(RawsInFinal(ThomasBarber) & 1913FavoriteFACup(ThomasBarber))", "(ScoringGoal(ThomasBarber,1913) -> FinishedInFinal(ThomasBrewer))", "(RenownedGoal(ThomasBarber) & 1913FACupFinal(ThomasBarber))", "(ScoredWinningGoal(Bobber) & FACapeFinal(Bberri))", "(WinnerGoal(ThomsonBarber,1913))", "ThomasBarbaer scored the winning goal in the 1913 FA Cup Final.", "all x.((ThomasBarranger(x) & FACUPFinal(x) & 1913(x)) -> ScoredWinner(x))", "Thomas Barber (*1913FACupFinal(TBG) & ScoredWinningGoal(TBG))", "Thomas Barber smashed winninggoal(ScoringGoal(ThomasBarber) \u20ac\u201cIn1913 FA CupFinal(ThomasBarber))", "all x.((ThomasBarber(x) & 1913FavoriteFavorite(x)) -> WinningGoal(x))"]}
{"id": "folio_train_298", "nl": "Thomas Barber played in the Football League for Bolton Wanderers", "fol": "PlayedInFootballLeagueFor(ThomasBarber,BoltonWanderers)", "prediction": ["Thomas Barber played in football league for Bolton Wanderers(Bolton) & Fetish League (Bolton) & Bolton & Wanderers(Bolton))", "Tom Barber, boltonwanderers FootballLiaison (ThanBoltonBorderers) & playedForBoltonWanderers(Barber,FL,Oakland,Bolton,winter,moment))", "Thomas Barber played in the FootballLiga for Bolton Wanderers.", "Thomas Barber played for Bolton Wanderers in Football League (OfBoltonWanderers).", "-(PlayedInFootballLimit(TomBarber) & BoltonWanderers(Bolton))", "Bolton Wanderers (bolton) - ThomasBarber played in FootballLeague(bolton,mountains) & Bolton(m) & Bolton,winters) & played inBolton (bolton,winters) & Bolton(bolton,winters)))", "(PlayedInFootballLiga(ThomasBarber) -> BoltonWingers(ThomasBarber))", "(PlayedInFootballLowersForBoltonWaves) & ForBoltonWanderers(Tom Barber,Bolton))", "all x.((TomThomasBarber(x) & BoltonWanderers(x)) -> PlayedInFootball(x))", "All x y,z.((ThomasBauer(x) & FootballLiga(y)) -> PlayedIn(x,y))", "Thomas Barber played in the Football League for BoltonWanderers for the 2015/16 season.", "Thomas Barber played in Football League with Bolton Wanderers.", "Thomas Barber played for Bolton Wanderers in the Football League.", "Thomas Barber played for Bolton Wanderers (FLLowerBolton(Barber,FL) & FootballLith(Barber,FL))", "(Helen ThomasBarber (ThomasBarber)) & played in FootballLeagueForBoltonWanderers(th))", "Thomas Barber played in FootballLicense(x) & BoltonWeavers(x))"]}
{"id": "folio_train_299", "nl": "Thomas Barber played as an inside left.", "fol": "PlayedAsPosition(ThomasBarber,AnInsideLeft)", "prediction": ["all x.(HasPlayedInsideLeft(x) -> ThomasBarber(x))", "Thomas Barber played as InsideLeft(Tomohawk)", "all x.((ThomasBarber(x) & InsideRight(x)) -> Played(x))", "(InsideLeft(Tom Barber)", "(InsideLeft(ThomasBarber))", "Thomas Barber incarnated as insideleft.", "Thomas Barber played as InsideLeft(Thomas)", "all x y.((TomBarber(x) & InsideLeft(y)) -> Alive(x,y))", "all x.(ThomasBarmer(x) -> PlayedAll-InsideLeft(x))", "(InsideLeft(ThomasBarber)", "(InternalLeg(ThomasBarber)", "all x.(ThomasBarker(x) -> InsideLeft(x))", "all x.((Tom(x) & OutsideLeft(x)) -> Plays(x,Text))", "all x.((TexasBarber(x) & InsideLeft(x)) -> Played(x))", "Thomas Barber played insideleft.", "all x.(Hollen(x) -> PlayedInsideLeft(x))"]}
{"id": "folio_train_300", "nl": "An English professional footballer scored the winning goal in the 1913 FA Cup Final.", "fol": "exists x.(IsEnglish(x) & IsProfessionalFootballer(x) & ScoredWinningGoalInMatch(x,Facupfinal1913))", "prediction": ["all x y.((EnglandProfessionalFootballer(x) & FACupFinal(y)) -> ScoredWinningGoal(x,y))", "all x y.((E English ProfessionalFootballer(x) & FACupFinal(y) & 1913FastFA CupScore(x,y)) -> ScoresWinnerGoal(x,y))", "all x.((EnglandProffessionalFootballer(x) & FACupFinal(x,1913)) -> ScoresWinningGoal(x,1913))", "all x.((EdgefulProfessionalFootballer(x) & EN 1913FACupFinal(x)) -> ScoredWinnerGoal(x))", "(WinnerWarner(english) & FACupFinal(english) & 1913.(EnglishProfessionalFootballer(english) & ScoresLastGoal(english)))", "all x y.((EnglishProfessionalFootballer(x) & UnitedStatesFACup(y)) -> ScoresWinningGoalInFinal(x,y))", "all x.((EnglishProffessionalFootballer(x) & FACupFinal(x,1913)) -> ScoresWinnerGoal(x,1913))", "all x y z.((EnglishProfessionalFootballer(x) & Freelancer(y) & FACupFinal(z) & PostedIn(x,z)) -> ScoredWinnerGoal(x,y,z))", "all x.((EnglandProfessionalFootballer(x) & ScoredWinningGoal(x,1913)) -> FA CupFinal(x))", "all x.((EarlyProfessionalFootballer(x) & ScoredGround(x,1913)) -> FA CupFinal(x))", "all x.((EnglishProfessionalFootballer(x) & ScoresWinningGoal(x) & 1913FACupFinal(x)) -> ScoresGoal(x))", "all x y.((EnglishFootballer(x) & AmericanFootballer(y)) -> ScoredWinningGoalInFinal(x,y))", "all x.((EnglandProfessionalFootballer(x) & InFastFinal(x,1913)) -> ScoresWinnerGoal(x,1953))", "all x y.((EnglandProfessionalFootballer(x) & Goal(y) & WonFACupFinal(z,1913)) -> Scores(x,y,z))", "all x y z.((EnglischProfessionalFootballer(x) & Goal(y) & FACUPFinal(z)) -> ScoredIn(x,y,z))", "all x y.((EnglishProfessionalFootballer(x) & 1913FastAlias(y)) -> ScoredWinnerGoal(x,y))"]}
{"id": "folio_train_301", "nl": "If people play the instrument in the concert, then he is good at playing this kind of instrument.", "fol": "all y x.(PerformInConcert(y,x) -> SkilledAtPlaying(y,x))", "prediction": ["all x.((PlayInConcert(x) & Person(x)) -> GoodAtPlayingInstrument(x))", "all x.(PlaysInConcert(x) -> GoodAtPlayingInstrument(x))", "all x.(PlaysInConcert(x) -> GoodAtPlayingUnderground(x))", "all x y.((Person(x) & Instrument(y)) -> PlaysInConcert(x,y))", "all x.(PlayInConcert(x) -> GoodAtPlayingGoodInstrument(x))", "all x.(PlayInConcert(x) -> GoodAtPlayingInstrument(x))", "all x.(PlaysInConcert(x) -> GoodAtPlayingInstrument(x))", "all x y.((Person(x) & PlayInConcert(x,y)) -> GoodAtPlayingInstrument(x,y))", "all x y.((Person(x) & Instrument(y) & PlaysInConcert(x,y)) -> GoodAtPlaying(x,y))", "all x.(PlayInConcert(x) -> GoodAtPlayingInstrument(x))", "all x.(PlayInConcert(x) -> GoodAtPlayingInstrument(x))", "all x.(PlayInConcert(x) -> GoodAtPlayingIsinstrument(x))", "all x y.((PlayInConcert(x) & Instrument(y) & PlayInConcert(y,x)) -> GoodAtPlaying(y,x))", "all x.((PlayInConcert(x) & PlayInConcert(x)) -> GoodAtplayingInstrument(x))", "all x.((PlayInConcert(x) & Instrument(y)) -> GoodAt(x,y))", "all x y.((Person(x) & PlayTheInstrument(x,y) & Concert(y)) -> GoodAtPlaying(x,y))"]}
{"id": "folio_train_302", "nl": "Peter plays piano, violin, and saxophone.", "fol": "(PlaysInstrument(Peter,Piano) & PlaysInstrument(Peter,Violin))", "prediction": ["(Plays(Peter,piano,violin,saxophone))", "(Plays(Peter,Piano) & Plays(Peter,Violin) & Plays(Peter,Saxophone))", "(PlaysPiano(Peter,Y) & PlaysViolin(Peter,Z) & PlaysSaxophone(Peter,Y))", "(Peterplays(Piano) & Plays(Piano) & Plays(Violin) & Plays(Painter))", "(PlaysPiano,PlaysViolin,PlaysSaxophone)", "(Plays(Peter,Piano) & Plays(Peter,Violin) & Plays(Peter,Saxophone))", "(PlaysPiano(Peter) | PlaysViolin(Peter) | PlaysSaxophone(Peter))", "(PlaysPiano(Peter) | PlaysViolin(Peter) | PlaysSaxophone(Peter))", "(PlaysPiano(Peter) | PlaysViolin(Peter) | PlaysSaxophone(Peter))", "(RunsPiano(Peter) | PlaysViolin(Peter) | PlaysSaxophone(Peter))", "(playsPiano(Peter) & PlaysViolin(Peter) & PlaysSaxophone(Peter))", "all x.((Peter(x) & PlaysPiano(x) & PlaysViolin(x) & PlaysSaxophone(x)) -> PlaysSaxophone(x))", "(Plays(Peter,Piano) & Plays(Peter,Violin) & Plays(Peter,Saxophone))", "(Plays(Peter,piano) | Plays(Peter,violin,sax)))", "(PlaysPiano(Peter) | PlaysViolin(Peter) | PlaysSaxophone(Peter))", "(Plays(Peter,Piano) & Plays(Peter,Violin) & Plays(Peter,Saxophone))"]}
{"id": "folio_train_303", "nl": "Peter was invited to play piano at the concert hall.", "fol": "PerformInConcert(Peter,Piano)", "prediction": ["all x y z.((Peter(x) & ConcertHall(y) & Piano(z)) -> InvadedToPlay(x,y,z))", "all x.((Peter(x) & ConcertHall(x)) -> InvitedToPlayPiano(x))", "all x.((Peter(x) & Invited(x)) -> PlaysPianoAtConcertHall(x))", "all x y.((Peter(x) & ConcertHall(y)) -> InvadedToPlayPiano(x,y))", "(InvitedToPlayPiano(Peter,Piano) & ConcertHall(Peter,Piano))", "Peter was invited to play piano at concerthall.", "(Invitation(Peter,Piano) & PlayedAtConcertHall(Peter))", "all x y.((Peter(x) & ConcertHall(y)) -> InvitedToPlayPiano(x,y))", "all x y.((Peter(x) & ConcertHall(y) & InvitedToPlayPiano(x,y)) -> Invited(x,y))", "all x.(Peter(x) -> InvitedToPlayPianoAtConcertHall(x))", "all x.((Peter(x) & InvitedToPlayPiano(x)) -> ConcertHall(x))", "(InvitationToPlayPiano(Peter,Piano) | ConcertHall(Peter))", "all x.((Peter(x) & InvitedToPlay(x,Piano,ConcertHall)) -> Play(x,Piano,ConcertHall))", "\"InvitedToPlayPiano(Peter,Piano) | Invitation(Peter,Piano))", "all x y.((Peter(x) & ConcertHall(y)) -> InvitedToPlayPiano(x,y))", "(InvitedToPlayPiano(Peter,Piano) & ConcertHall(Peter))"]}
{"id": "folio_train_304", "nl": "Oliver and Peter were both invited to perform in the concert.", "fol": "(IsConcertPerformer(Peter) & IsConcertPerformer(Oliver))", "prediction": ["all x.((Oliver(x) | Peter(x)) -> InvitedToPerformInConcert(x))", "(InvitationtoPerformConcert(Oliver,Salon) & InvitationToPerformConcert(Peter,Salon))", "(InvitedToPerform(Oliver) & InvitedToPerform(Peter))", "(PerformsInConcert(Oliver) & PerformsInConcert(Peter))", "(InvitedToPerformInConcert(Oliver) | InvitedToPerformInConcert(Oliver,Peter))", "((Oliver(Oliver) | Peter(Peter))) -> InvitedExhibitor(Oliver,Peter)))", "((Oliver(Oliver) & Peter(Peter)) | (Peter(Peter) & Oliver(Oliver))))", "all x y.((Oliver(x) & Peter(y)) -> (InformedToPerformInConcert(x,y) & InvitedToPerform(y,x)))", "(IntervenedInConcert(Oliver) & InvitedInConcert(Peter))", "Oliver and Peter were invited to perform in the concert.", "(InvitedToPerform(Oliver,Cardio) & InvitedToPerform(Peter,Cardio))", "(InvitedToPerformConcert(Oliver,Part1) | InvitedToPerform(Peter,Part2)))", "(InvitedToPerform(Oliver,Concert) & InvitedToPerform(Peter))", "(InvitedToPerform(Oliver(Oliver) & InvitedToPerform(Peter(Oliver,Peter))", "(InvitedToPerform(Oliver) & InvitedToPerform(Peter))", "(Invitation(Oliver) & Invitation(Peter))"]}
{"id": "folio_train_305", "nl": "Oliver plays a different musical instrument from Peter in the concert.", "fol": "-PerformInConcert(Oliver,Piano)", "prediction": ["all x y.((Oliver(x) & Peter(y)) -> DifferentInstrument(x,y))", "(PlaysMusicalInstrument(Oliver,Peter) | PlaysMusicalInstrument(Oliver,Peter))", "(DifferentInstrument(Oliver,Leaf) & DifferentInstrument(Oliver,Peter) & InConcert(Oliver,Peter))", "(Peter,Oliver,Peter) & PlaysDifferentInstrument(Oliver,PlaysInCircuit))", "(AlwaysPlayingIn Concert(Oliver,Peter) & \u2013PlaysInConcert(Oliver,Peter))", "all x y.((Oliver(x) & Peter(y)) -> PlaysDifferentInstrument(x,y))", "(PlaysInConcert(Oliver,Peter) & PlaysInConcert(Oliver,Peter))", "all x y.((Oliver(x) & Stage(y)) -> (PlaysDifferentInstrumentFrom(x,y) & Peter(x)))", "(ActingOliver(Oliver) & PlaysDifferentInstrument(Oliver,Peter))", "(PlaysMusicalInstrument(Oliver) | PlaysMusicalInstrument(Oliver)))", "(all x y.((Oliver(x) & Peter(y)) -> PlaysDifferentInstrument(x,y)))", "(DifferentMusicalInstrument(Oliver) & DifferentMusicalInstrument(Oliver,Peter))", "(exists x.(Oliver(x) & Peter(x)) & PlaysMusicalInstrument(x,y) & DifferentInConcert(y))", "all x y.((Oliver(x) & Peter(y)) -> PlaysDifferentMusicalInstrument(x,y,Concert))", "\u0430\u043d\u0438 \u0438 \u043e\u0435\u0442 \u043e\u0441\u043b\u0435 \u043d\u0435\u0443\u043b\u0442\u0430\u0435\u0442 \u043e\u043b\u0430 \u043e\u043d\u0442\u043a\u0430 (\u043e\u0441\u0443\u0434\u0430\u0440\u043d\u043e \u0440\u0430\u0432\u0438\u0442\u0438) \u043e\u0438\u043e \u0432\u043b\u0435\u0442\u0441 \u043d\u0435\u043e\u0438.", "all x y z.((Oliver(x) & Peter(y) & MusicalInstrument(z)) -> Different(x,y,z))"]}
{"id": "folio_train_306", "nl": "Oliver plays piano in the concert.", "fol": "PerformInConcert(Oliver,Piano)", "prediction": ["all x.(Davie(x) -> PlaysPianoInConcert(x))", "exists x y.((Oliver(x) & Piano(y)) -> PlaysInConcert(x,y))", "(PlaysInConcert(Oliver) | PlaysInConcert(Oliver)))", "PlaysLaptopInConcert(Oliver,Color,Concert)", "Oliver playspianoInConcert(Oliver)", "-Piano(Oliver)", "(playsPianoInConcert(Oliver))", "(PlaysPiano(Oliver) | InConcert(Olivrian)))", "Oliver playspiano(Oliver)", "Oliver playspianoin(Oliver)", "all x.(OliverPiano(x) -> PerformsInConcert(x))", "all x y.((Oliver(x) & Concert(y)) -> PlaysPiano(x,y))", "all x.(Piano(x) -> PlaysInConcert(x))", "-PartsOliverInConcert(Oliver,Piano)", "Oliver plays piano in the concert.", "Oliver plays piano in the concert."]}
{"id": "folio_train_307", "nl": "Oliver plays violin in the concert.", "fol": "PerformInConcert(Oliver,Violin)", "prediction": ["Oliver / Violin(Oliver)", "Oliver plays ViolinInConcert(Oliver)", "Oliver plays violin in the concert.", "(PlaysViolin(Oliver) & InConcert(Oliver))", "Oliver plays violin in the Concert.", "Oliver plays violin in the concert.", "(PlaysViolin(Oliver,Concert) -> PlaysIn(Oliver,Concert))", "-playsViolin(Oliver)", "Oliver in concert.", "all x y.((Oliver(x) & Concert(x)) -> Violin(y))", "Oliver (playsViolin(x) & InConcert(x))", "Oliver plays violin in concert.", "Oliver plays violin in the concert (Sataneo) & SicyMeridian(Origo)", "Oliver plays violin in the concert.", "Oliver, violinist, in concert.", "Oliver playsviolin(live,concert)"]}
{"id": "folio_train_308", "nl": "Peter is good at playing piano.", "fol": "SkilledAtPlaying(Peter,Piano)", "prediction": ["exists x y.(Peter(x) & Piano(y) & GoodAt(x,y))", "-GoodAtPlayingPiano(Peter)", "all x.((Peter(x) & GoodAtPlayingPiano(x)) -> AllStandard(x))", "all x.((Peter(x) & Piano(x)) -> GoodAt(x))", "(GoodAtPlayingPiano(Peter))", "(GoodAtPlaying(Peter),leather,y))", "all x.(Peter(x) -> PlaysPiano(x))", "(BadAtPlayingPiano(Peter))", "all x.(Peter(x) -> GoodAtPlayingPiano(x))", "all x.(Peter(x) -> GoodAtPlayingPiano(x))", "(ProfessionalPianoPlayer(Peter))", "(GoodAtPlaying(Peter,Piano))", "exists x.(Peter(x) & GoodAtPlayingPiano(x))", "all x.(Peter(x) -> GoodAtPlayingPiano(x))", "(GoodAtPlayingPiano(Peter))", "[(Peter(p) & GoodAtPlayingPiano(p)))"]}
{"id": "folio_train_309", "nl": "If something can go underwater, then it enjoys water.", "fol": "all x.(CanGoUnderwater(x) -> LovesWater(x))", "prediction": ["all x.((ProudOfGoingUnderwater(x)) -> EnjoysWater(x))", "all x.((GoesUnderwater(x) & EnjoysWater(x)) -> EnjoysWater(x))", "all x.((CanGoUnderwater(x) & DrinksWater(x)) -> EnjoysWater(x))", "all x.(CanGoUnderwater(x) -> EnjoysWater(x))", "all x.(CanGoUnderwater(x) -> EnjoysWater(x))", "all x.((GoesUnderwater(x)) -> EnjoysWater(x))", "all x.(CanGoUnderwater(x) -> EnjoysWater(x))", "all x.((CanGoUnderwater(x)) -> EnjoysWater(x))", "all x.((CanGoUnderwater(x)) -> EnjoysWater(x))", "all x.((InvolvesWater(x) & ExploresWater(x)) -> EnjoysWater(x))", "all x.((CanGoUnderwater(x)) -> EnjoysWater(x))", "all x.((DoesInwater(x) & EnjoysWater(x)) -> CanGoUnderwater(x))", "all x.((CanGoUnderwater(x)) -> EnjoysWater(x))", "all x.(CanGoUnderwater(x) -> EnjoysWater(x))", "all x.((Underwater(x) & EnjoysWater(x)) -> CanGo(x))", "all x.((CanGoUnderwater(x)) -> EnjoysWater(x))"]}
{"id": "folio_train_310", "nl": "All animals that can swim can go underwater.", "fol": "all x.(AbleToSwim(x) -> CanGoUnderwater(x))", "prediction": ["all x.((Animal(x) & CanSwim(x)) -> CanGoUnderwater(x))", "all x.((Animal(x) & EasilySwims(x)) -> CanGoUnderwater(x))", "all x.((Animal(x) & CanSwim(x)) -> CanGoUnderwater(x))", "all x.((Animal(x) & CanSwim(x)) -> CanGoUnderwater(x))", "all x.((Animal(x) & CanSwim(x)) -> CanGoUnderwater(x))", "all x.((Animal(x) & CanSwim(x)) -> CanGoUnderwater(x))", "all x.((Animal(x) & CanSwim(x)) -> CanGoUnderwater(x))", "all x.((Animal(x) & CanSwim(x)) -> CanGoUnderwater(x))", "all x.((Animal(x) & CanSwim(x)) -> CanGoUnderwater(x))", "all x.((Animal(x) & CanSwim(x)) -> CanGoUnderwater(x))", "all x.(CanSwim(x) -> CanGoUnderwater(x))", "all x.((Animal(x) & CanSwim(x)) -> CanGoUnderwater(x))", "all x.((Animal(x) & CanSwim(x)) -> CanGoUnderwater(x))", "all x.((Animal(x) & CanSwim(x)) -> CanGoUnderwater(x))", "all x.((Animal(x) & CanSwim(x)) -> CanGoUnderwater(x))", "all x.((Animal(x) & CanSwim(x)) -> CanGoUnderwater(x))"]}
{"id": "folio_train_311", "nl": "Either an animal can swim or it can walk.", "fol": "all x.(AbleToSwim(x) | AbleToWalk(x))", "prediction": ["all x.(Animal(x) -> (CanSwim(x) | CanWalk(x)))", "all x.(Animal(x) -> (CanSwim(x) | CanWalk(x)))", "all x.(Animal(x) -> (Swim(x) | Walk(x)))", "all x.(Animal(x) -> (CanSwim(x) | CanWalk(x)))", "exists x.(Animal(x) & (CanSwim(x) | CanWalk(x)))", "all x.(Animal(x) -> (CanSwim(x) | CanWalk(x)))", "all x.(Animal(x) -> (CanSwim(x) | CanWalk(x)))", "all x.(Animal(x) -> (CanSwim(x) | CanWalk(x)))", "exists x.(Animal(x) & (CanSwim(x) | CanWalk(x)))", "all x.(Animal(x) -> (CanSwim(x) | CanWalk(x)))", "exists x.(Animal(x) & ((CanSwim(x) | CanWalk(x))))", "all x.(Animal(x) -> (Swim(x) | Walk(x)))", "exists x.(Animal(x) & (CanSwim(x) | CanWalk(x)))", "all x.(Animal(x) -> (CanSwim(x) | CanWalk(x)))", "all x.(Animal(x) -> (CanSwim(x) | CanWalk(x)))", "all x.(Animal(x) -> (CanSwim(x) | CanWalk(x)))"]}
{"id": "folio_train_312", "nl": "Animals that can walk travel on land.", "fol": "all x.(AbleToWalk(x) -> MovesOnLand(x))", "prediction": ["all x.((Animal(x) & WalksOnLand(x)) -> TravelsOnLand(x))", "all x.((Animal(x) & WalksOnLand(x)) -> TravelsOnLand(x))", "all x.((Animal(x) & CanWalk(x)) -> TravelsOnLand(x))", "all x.((Animal(x) & WalksOnLand(x)) -> TravelsOnLand(x))", "all x.((Animal(x) & Walks(x)) -> TravelsOnLand(x))", "all x y.((Animal(x) & Walks(x)) -> TravelsOnLand(x))", "all x.((Animal(x) & CanWalk(x)) -> TravelsOnLand(x))", "all x.((Animal(x) & WalksOnLand(x)) -> TravelsOnLand(x))", "all x.((Animal(x) & CanWalk(x)) -> TravelsOnLand(x))", "all x.((Animal(x) & Walks(x)) -> TravelsOnLand(x))", "all x.((Animal(x) & CanWalk(x)) -> TravelsOnLand(x))", "all x y.((Animal(x) & CanWalk(x)) -> TravelsOnLand(y))", "all x.((Animal(x) & CanWalk(x)) -> TravelsOnLand(x))", "all x.((Animal(x) & WalksOnLand(x)) -> TravelsOnLand(x))", "all x.((Animal(x) & Walkable(x)) -> TravelsOnLand(x))", "all x.((Animal(x) & Walks(x)) -> TravelsOnLand(x))"]}
{"id": "folio_train_313", "nl": "Animals that enjoy water splash water around.", "fol": "all x.(LovesWater(x) -> CreatesSplash(x))", "prediction": ["all x.((Animal(x) & EnjoysWater(x)) -> SplashWaterAround(x))", "all x.((Animal(x) & EnjoysWater(x)) -> SplashWaterAround(x))", "all x.((Animal(x) & EnjoysWater(x)) -> SplinterWaterAround(x))", "all x y.((Animal(x) & EnjoysWater(x)) -> SplashWaterAbout(x,y))", "all x.((Animal(x) & Enjoywater(x)) -> SplashWaterAround(x))", "all x.((Animal(x) & EnjoysWater(x)) -> SplashWaterAround(x))", "all x.((Animal(x) & EnjoysWater(x)) -> SplashesWaterAround(x))", "all x.((Animal(x) & EnjoysWater(x)) -> SplashWaterAround(x))", "all x.((Animal(x) & EnjoysWater(x)) -> SplashesWater(x))", "all x.((Animal(x) & EnjoysWater(x)) -> SplashWaterAround(x))", "all x.((Animal(x) & EnjoysWater(x)) -> SplashWaterAround(x))", "all x.((Animal(x) & EnjoysWater(x)) -> SplashesWaterAround(x))", "all x.((Animal(x) & EnjoysWater(x)) -> SplashWaterAround(x))", "all x.((Animal(x) & EnjoysWater(x)) -> SplashWaterAround(x))", "all x.((Animal(x) & EnjoysWater(x)) -> SplashWaterAround(x))", "all x.((Animal(x) & EnjoysWater(x)) -> SplashWaterAround(x))"]}
{"id": "folio_train_314", "nl": "Every animal that travels on land enjoys basking in the sun.", "fol": "all x.(MovesOnLand(x) -> LovesBaskingInSun(x))", "prediction": ["all x y.((Animal(x) & LandTravel(x) & LandTravel(y)) -> EnjoysBingingInSun(x))", "all x.((Animal(x) & TravelsOnLand(x)) -> EnjoysBakingInSun(x))", "all x.((Animal(x) & TravelsOnLand(x)) -> EnjoysBreakingInSun(x))", "all x.((Animal(x) & TravelsOnLand(x)) -> EnjoysBreakingInSun(x))", "all x.((Animal(x) & TravelsOnLand(x)) -> EnjoysBreakingInSun(x))", "all x.((Animal(x) & TravelsOnLand(x)) -> EnjoysBakingIn(x))", "all x.(TravelsOnLand(x) -> EnjoysBakingInSun(x))", "all x.((Animal(x) & TravelsOnLand(x)) -> EnjoysBaskingInSun(x))", "all x.((Animal(x) & TravelsOnLand(x)) -> EnjoysBakingInSun(x))", "all x.((Animal(x) & TravelsOnLand(x)) -> EnjoysBreakingInSun(x))", "all x.((Animal(x) & TravelsOnLand(x)) -> RelaxedInSun(x))", "all x.((Animal(x) & TravelsOnLand(x)) -> EnjoysBakingInSun(x))", "all x.((Animal(x) & TravelsOnLand(x)) -> EnjoysBreakingInSun(x))", "all x.((Animal(x) & TravelsOnLand(x)) -> EnjoysBreakingInSun(x))", "all x.((Animal(x) & TravelsOnLand(x)) -> EnjoysBakingInSun(x))", "all x.(TravelsOnLand(x) -> EnjoysBakingInTheSun(x))"]}
{"id": "folio_train_315", "nl": "George splashes water around and can swim.", "fol": "(CreatesSplash(George) & AbleToSwim(George))", "prediction": ["all x.(George(x) -> (SpoilsWaterAround(x) & CanSwim(x)))", "all x y.((George(x) & Water(y)) -> (Spans(x,y) & CanSwim(x)))", "(all x.(George(x) -> SplashesWater(x)))", "all x y.((George(x) & Water(y)) -> (Splash(x,y) & CanSwim(x)))", "all x.(George(x) -> (SplashWater(x) & CanSwim(x)))", "(SpokensWaterAround(George) & CanSwim(George))", "all x.(George(x) -> (SpoopsWater(x) & CanSwim(x)))", "all x.(George(x) -> (SprouncesWater(x) & CanSwim(x)))", "all x.(Steve(x) -> (SprunsWaterAround(x) & CanSwim(x)))", "(SpoilsWaterAround(George) & CanSwim(George))", "all x.(George(x) -> (SpokesWater(x) & CanSwim(x)))", "(CanSwim(George) & SplashesWater(George))", "all x.(George(x) -> (SpracesWater(x) & CanSwim(x)))", "all x.(George(x) -> (SpoilsWater(x) & CanSwim(x)))", "(all x.(George(x) -> SplashesWaterFor(x)))", "all x.(George(x) -> (SplashesWater(x) & Swims(x)))"]}
{"id": "folio_train_316", "nl": "Liam is either an animal that can walk and enjoys water, or is neither an animal that can walk nor enjoys water.", "fol": "((AbleToWalk(Liam) & LovesWater(Liam)) | (-AbleToWalk(Liam) & -LovesWater(Liam)))", "prediction": ["(all x.(Liam(x) -> (Animal(x) & Walks(x) & EnjoysWater(x))) | (-Animal(x) & (Walks(x) | EnjoysWater(x)))))", "all x.(Liam(x) -> ((Animal(x) & Walks(x) & EnjoysWater(x)) | -(Animal(x) & Walks(x) & EnjoysWater(x))))", "all x.(Liam(x) -> ((Animal(x) & Walks(x) & EnjoysWater(x)) | -Animal(x) & Walks(x) & -EnjoysWater(x))))", "all x.(Liam(x) -> ((Animal(x) & CanWalk(x) & EnjoysWater(x)) | (-Animal(x) & CanWalk(x) & EnjoysWater(x))))", "all x.(Liam(x) -> ((Animal(x) & Walks(x) & EnjoysWater(x)) | -Animal(x) & -Walks(x) & -EnjoysWater(x))))", "exists x.(Liam(x) & ((CanWalk(x) & EnjoysWater(x)) | -CanWalk(x) & EnjoysWater(x)))", "all x.((Animal(x) & (CanWalk(x) | EnjoysWater(x))) -> -(CanWalk(x) & -EnjoysWater(x))))", "(all x.(Liam(x) -> (CanWalk(x) & EnjoysWater(x)) | (-CanWalk(x) & -EnjoysWater(x)))))", "all x.(Liam(x) -> ((Animal(x) & Walks(x) & EnjoysWater(x)) | (-Animal(x) & Walks(x) & EnjoysWater(x))))", "(exists x.(Liam(x) & (Walks(x) & EnjoysWater(x)) | -exists y.(Liam(y) & EnjoysWater(y)))))", "all x.(Liam(x) -> ((Animal(x) & CanWalk(x) & EnjoysWater(x)) | (-Animal(x) & CanWalk(x) & EnjoysWater(x))))", "all x.(Liam(x) -> ((Animal(x) & Walks(x) & EnjoysWater(x)) | 'Animal(x) & -Walks(x) & EnjoysWater(x))))", "(all x.(Liam(x) -> (CanWalk(x) & EnjoysWater(x)) | (-CanWalk(x) & -EnjoysWater(x)))))", "-(Animal(x) & ((CanWalk(x) & EnjoysWater(x)) | -CanWalk(x) & -LovesWater(x))))", "all x.(Liam(x) -> ((Animal(x) & CanWalk(x) & EnjoysWater(x)) | -Animal(x) & -CanWalk(x) & EnjoysWater(x))))", "all x.(Liam(x) -> ((CanWalk(x) & EnjoysWater(x)) | -CanWalk(x) & -EnjoysWater(x))))"]}
{"id": "folio_train_317", "nl": "George enjoys basking in the sun.", "fol": "LovesBaskingInSun(George)", "prediction": ["(EnjoysBreakingInSun(George,X))", "EstoysBreaking(George,Sun)", "George enjoys basking in the sun.", "all x.(Greg(x) -> EnjoysBakingInSun(x))", "all x.((George(x) & EnjoysBakingInSun(x)) -> EnjoysBakingInSun(x))", "all x.((George(x) & EnjoysBakingInSun(x)) -> BasksIn(x,sun))", "enjoysBakingInSun(George)", "George enjoysBakingInSun(George)", "(EnjoysBreakingInSun(George,Grace))", "all x.((George(x) & BasksInSun(x)) -> Enjoys(x))", "(EnjoysBareakingInSun(George) -> EnjoysBakingInSun(George))", "all x.(Gordon(x) -> EnjoysBreakingInSun(x))", "all x.((George(x) & EnjoysBakingInSun(x)) -> EnjoysBakingInSun(x))", "George enjoys basking in the sun.", "all x.(George(x) -> EnjoysBakingInSun(x))", "all x.(George(x) -> EnjoysBakingInSun(x))"]}
{"id": "folio_train_318", "nl": "Liam enjoys basking in the sun and splashing water around.", "fol": "(LovesBaskingInSun(Liam) & CreatesSplash(Liam))", "prediction": ["(EnjoysBakingInSun(Liam) & EnjoysSplashingWater(Liam))", "-EnjoysBreakingInSunAndSplashingWater(Liam)", "Liam enjoys BaskingInSunAndSplashingWaterAround.", "All x.((Liam(x) & Sun(y)) -> (EnjoysBaking(x,y) & SprinksWater(x,y)))", "all x y.((Lilam(x) & Sun(y)) -> (EnjoysBaking(x,y) & EnjoysSplashingWater(x,y)))", "all x.(Liam(x) -> (EnjoysBreakingInSun(x) & EnjoysSplashingWater(x)))", "(EnjoysBreakingInSun(lily,sun) & SplashingWaterAround(lily))", "exists x.(Lima(x) & BasksInSun(x) & SplashesWater(x))", "Liam enjoys basking in the sun and splashing water around.", "Liam enjoys basking in the sun and splashing water around.", "(EnjoysBreakingInSun(Liam) & PlaysWater(Liam))", "Liam enjoys BaskingInSunAndSplashingWaterAround.", "Liam enjoys basking in the Sun and splashing WaterAbout(Liam)", "all x.((Liam(x) & BakesInSun(x) & SplashesWater(x)) -> EnjoysBaking(x))", "Liam enjoys basking intheSun(Liam) & SplashingWater(Liam)", "(EnjoysBreakingIn(Liam,Sun,Water))"]}
{"id": "folio_train_319", "nl": "Liam neither enjoys basking in the sun nor splashing water around.", "fol": "(-LovesBaskingInSun(Liam) & -CreatesSplash(Liam))", "prediction": ["Liam NeitherEnjoysBreakingInSun(Liam) & -(EnjoysSplashingWater(Liam) | EnjoysBreakingInWater(Liam)))", "Liam & -(EnjoysBakingIn(Liam) | EnjoysSpr\u00fcshingWater(Liam)))", "(-(EnjoysBeingEnjoyedBySun(Liam) & -EnjoysSplashingWater(Liam)))", "(exists x.(Liam(x) & Bask(x)) & -exists y.(Liam(y) & Spun(y)) & exists z.(Sun(z) & Bask(y)) & -exists w.(Water(w) & Spun(y))))", "-((Liam(Lim) & BasksInSun(Liam)) -> (-BaltsInWater(Liam) & -SplashesWater(Liam)))", "-(EnjoysBreakingInSun(Liam,Sun,Sand)|SpaulingWater(Liam))", "-(EnjoysBreakingInSun(Liam) | SplashesWaterAround(Liam))", "-(EnjoysBakingInSun(Liam) | EnjoysSpringingWater(Liam))", "-(EnjoysBakingInSun(Liam,2) | EnjoysSplashingWater(Liam,2)))", ",(Liam(l) & -(EnjoysBakingInSun(l) | SplashesWater(l)))", "both.(Liam(l) & -(EnjoysBreakingInSun(l) | SplashesWater(t)))", "(-(EnjoysBreakingInSun(Liam) & -EnjoysSplashingWater(Liam)))", "-(EnjoysBakingInSun(Liam) | SplashingWaterOf(Liam)))", "(see below) & neither EnjoysBaskingInSun(Liam) & -EnjoysSplashingWater(Liam))", "(-(EnjoysBreakingInSun(Liam) & -EnjoysSplashingWater(Liam)))", "-(EnjoysBreakingInSun(n) | SplashingWater(n)))"]}
{"id": "folio_train_320", "nl": "Cancer biology is finding genetic alterations that confer selective advantage to cancer cells. ", "fol": "FindGeneticAlterationsForCancerAdvantage(CancerBiology)", "prediction": ["all x y.((CancerousBiology(x) & CancerCell(y)) -> (FindsGeneticAlterations(x) & OffersSelectiveAdvantage(x,y)))", "all x.(CancerBiology(x) -> (FindsGeneticAlterations(x) & ConveysSelectiveAdvantage(x)))", "all x y.((CancerBiology(x) & GeneticAlterations(y)) -> (Finding(x,y) & SpecialAdvantage(x,y)))", "all x y.((CancerBiology(x) & CancerCell(y)) -> (FindsGeneticAlterations(x,y) & ConfersSelectiveAdventure(x,y)))", "all x y.((ClinicBiology(x) & CancerCell(y)) -> (FunctionsAlternativeGeneticAlternatives(x) & GeneticallyAvailingCells(x,y)))", "all x.(CancerBiology(x) -> (FindsGeneticAlternation(x) & ConveysSpecificAdvantage(x)))", "all x y.((CancerBiology(x) & GeneticAlterations(y)) -> ConveysSelectiveAppeal(x,y))", "all x.(CancerBiology(x) -> (FindsGeneticAlternations(x) & ConveysSelectiveAdvantage(x)))", "all x y z.((CancerBiology(x) & GeneticAlterations(y) & CancerCell(z)) -> Finds(x,y,z))", "all x y z.((ClinicalBiology(x) & GeneticAlternation(y) & CancerCell(z)) -> Finding(x,y,z))", "all x.(CancerBiology(x) -> FindsGeneticAlterations(x))", "all x.(CancerBiology(x) -> (FindsGeneticAlterations(x) & ConfersSelectiveAdvantageToCancerCells(x)))", "all x y.((CancerBiology(x) & GeneticalAlterations(y)) -> DoesProvideSpecificAdventureToCobaccoCells(x,y))", "all x.(CancerBiology(x) -> (FindsGeneticAlgebras(x) & ConveysSelectiveAdventureToCancerCells(x)))", "all x.(CancerBiology(x) -> (FindsGeneticAlteredAlters(x) & ConveysSpecialAdvantage(x)))", "all x.(CancerBiology(x) -> (FindingGeneticAlterations(x) & ConveysSelectiveAdvantage(x)))"]}
{"id": "folio_train_321", "nl": "Cancer researchers have frequently ranked the importance of substitutions to cancer growth by P value.", "fol": "all x.(PValueThreshold(x) -> RankImportanceOfSubstitutions(CancerResearchers,x,TheImportanceOfSubstitutionsToCancerGrowth))", "prediction": ["all x y z.((CancerResearcher(x) & Substitution(y) & CancerGrowth(z)) -> RangingListeningImportanceByPValue(x,y,z))", "all x y z.((CancerResearcher(x) & Substitution(y) & CancerGrowth(z)) -> RankingIndex(x,y,z))", "all x y.((CancerResearcher(x) & CancerGrowth(y)) -> RanisesImportance(x,y))", "all x y.((CancerResearcher(x) & CancerGrowth(y) & PValue(p)) -> RangsImportanceOfSubstitutions(x,y))", "all x.((CancerResearcher(x) & SufficientPerfection(x)) -> Ranging(x,p,p,p))", "all x y.((CancerResearcher(x) & CancerGrowth(y)) -> RankedImportanceOfSubstitutionsByPValue(x,y))", "all x y.((CancerResearcher(x) & CancerGrowth(y)) -> (RankImportancePValue(x,y) & SubstitutionImportancePValue(y,y)))", "all x y.((CancerResearcher(x) & CancerGrowth(y)) -> (RanksImportanceOfSubstitutions(x,y) & ByPValue(x,y)))", "all x y.((CancerResearcher(x) & CancerGrowth(y)) -> RangingImportanceSubstitutionsByPValue(x,y))", "all x y.((CancerResearcher(x) & Substitutions(y)) -> RangersImportanceByPValue(x,y))", "all x y.((CancerResearcher(x) & CancerGrowth(y)) -> PlacesSubstitutions(x,y))", "all x y.((CancerResearcher(x) & CancerGrowth(y)) -> RangingImportance(x,y))", "all x y.((CancerResearcher(x) & CancerGrowth(y)) -> IsImportanceOfSupplementsByPValue(x,y))", "all x y.((CancerResearcher(x) & CancerGrowth(y)) -> (RanksImportanceOfSubstitution(x,y) & ByPValue(z)))", "all x.((CancerResearcher(x) & SubstitutionImportance(x,Y)) -> RangetedByPValue(x,z))", "all x y z.((CancerResearcher(x) & RelevanceOfSubstitutions(y,z)) -> Ranking(x,y))"]}
{"id": "folio_train_322", "nl": "P values are thresholds for belief, not metrics of effect. ", "fol": "all x.((PValueThreshold(x) -> BeliefThresholds(x)) & -EffectMetrics(x))", "prediction": ["all x.(PValue(x) -> (TreatmentForBelief(x) & -MetametricOfEffect(x)))", "(all x.(PWage(x) -> I\u2019ve(x,P)) & (P values(x,P) | MetricsOfEffect(x))))", "all x.(PVariety(x) -> (TreethForBelief(x) | InThreat(x,Effect)))", "all x.(PVariety(x) -> (EmbracesBelief(x) | MetricsOfEffect(x)))", "(all x.(P Value(x) -> AxisForBelief(x)) & -AxisForEffect(x))", "all x.(PValue(x) -> (Shallow(x) & -MeasuresOfEffect(x)))", "all x.(PValue(x) -> (Troff(x) & -MetameterTogether(x)))", "all x.(PValues(x) -> (TroffForBugginment(x) & -MethodOfEffect(x)))", "all x.(PVertain(x) -> (Treehold(x) & -MeasuresOfEffect(x)))", "all x.(PValue(x) -> (Treef(x) & -MetameterOfEffect(x)))", "all x y.((PValue(x) & Emphasize(y)) -> (Frequency(x,y) & (MetricsOfEffect(x,y) | MetricsOfEffect(x,y))))", "all x.(PValue(x) -> (ThresholdForBelief(x) & -MethodOfEffect(x)))", "all x.(PValue(x) -> (TreefForBelief(x) & -MetadataOfEffect(x)))", "all x.(PValue(x) -> (TreefToBelief(x) & -MethodOfEffect(x)))", "all x y z.((PValue(x) & Sweeps(y) & EffectOf(z)) -> (ThresholdForBugining(x) & -ThresholdForEffect(x)))", "all x.(PValue(x) -> (BeliefTreatment(x) & -EffectMethod(x)))"]}
{"id": "folio_train_323", "nl": "Cancer researchers tend to use the cancer effect size to determine the relative importance of the genetic alterations that confer selective advantage to cancer cells.", "fol": "all x.((CancerResearcher(x) -> UsesEffectSize(x,CancerEffectSize)) & DeterminesRelativeImportance(x,GeneticAlterationsConferSelectiveAdvantageToCancerCells))", "prediction": ["all x y.((CancerResearcher(x) & CancerEffectSize(y)) -> UsesSizeToDetermineRelativeImportanceOfGeneticAlternations(x,y))", "all x y.((CancerResearcher(x) & CancerEffectSize(y)) -> TeachAbilityFinalImportance(x,y))", "all x y.((CancerResearcher(x) & CancerEffectSize(x) & GeneticAlterations(y)) -> DeterminesRelativeImportance(x,y))", "all x.(CancerResearcher(x) -> (UsesCancerousEffectSize(x) & DeterminesRelativeImportanceOfGeneticAlternations(x) & ConfersSelectiveAdventure(x)))", "all x y.((CancerResearcher(x) & CancerEffectSize(y) & GeneticAlterations(x) & SpecificAdvantage(x,y)) -> UtilizesForEvaluationToDetermineImportance(x,y))", "all x y z.((CancerResearcher(x) & CancerEffectSize(y) & GeneticAlternation(z)) -> (UsesImportanceToDetermineImportance(x,y,z) & ConveySelectiveAdvantage(x,y)))", "(all x.(CancerResearcher(x) -> UsesCancerEffectSizeToDetermineRelativeImportanceOfGeneticAlternations(x)))", "all x y z.((CancerResearcher(x) & CancerEffectSize(y) & GeneticAlternations(z)) -> UsesCancerEffectSize(x,y,z))", "all x y.((CancerResearcher(x) & CancerEffectSize(y)) -> (UsesEfficientSize(x,y) & DeterminesRelationalImportance(x,y)))", "all x y z.((CancerResearcher(x) & CancerEffectSize(y) & GeneticAlterations(z)) -> UsesForDeterminingImportance(x,y,z))", "all x y z.((CancerResearcher(x) & CancerEffectSize(y) & GeneticAlterations(z)) -> (Uses(x,y) & DeterminesImportance(x,z) & ConveysSpecificAdvantage(g)))", "all x y.(CancerResearcher(x) -> (TendsToUseCancerEffectSize(x) & DeterminesRelativeImportanceOfGeneticAlterationsBetweenCancerCells(y)))", "all x y.((CancerResearcher(x) & CancerEffectSize(x)) -> DistinctImportanceOfGeneticAlterations(y))", "all x y.((CancerResearcher(x) & CancerEffectSize(y)) -> (UsesValueToDetermineRelativeImportanceOfGeneticAlternations(x,y) & ConfersSpecificAdvantageToCancerousCells(x)))", "all x y.((CancerResearcher(x) & CancerEffectSize(y)) -> DeterminesRelativeImportanceOfGeneticAlternatives(x,y))", "all x y z.((CancerResearcher(x) & CancerEffectSize(z) & GeneeticAlterations(y,z)) -> (Uses(x,y,z) & DeterminesImportance(x,y,z) & ConferSelectiveAdvantage(x)))"]}
{"id": "folio_train_324", "nl": "P value represents the selection intensity for somatic variants in cancer cell lineages.", "fol": "all x.(PValueThreshold(x) -> RepresentsSelectionIntensityForSomaticVariantsInCancerCellLineages(x))", "prediction": ["all x.(PValue(x) -> (RepresentsSeletionIntensity(x) & SomaticVariants(x) & CancerCellLineages(x)))", "all x.(PValue(x) -> representsSelectionIntensityForSomaticVariants(x))", "all x.(Variables(x) & CancerCellLineages(x) & SelectiveIntensity(x,y))", "all x y.((PValue(x) & SomaticVariants(y) & CancerCellLineages(y)) -> RepresentsSelectionIntensity(x,y))", "all x.(PValue(x) -> (RepresentsSelectionIntensityForSomaticVariantsInCancerCellLineages(x)))", "all x.(PValue(x) -> (RepresentsSelectionIntensity(x,y) & SomaticVariants(y) & CancerCellLineages(y)))", "all x.((PValue(x) & SomaticVariantsInCancerCellLineages(x)) -> RepresentsIntensity(x,SomaticVariantsInCancerCellLineages))", "all x y.((PValue(x) & SomaticVariation(y)) -> RepresentativesSelectionIntensity(x,y))", "all x.((Variants(x) & CancerCellLineages(x)) -> SelectionIntensity(x,y))", "all x.(PValue(x) -> (RepresentsSeletionIntensityForSomaticVariants(x) & inCancerCellLineages(x)))", "all x y.((PValue(x) & SomaticVariants(y)) -> representsIntensityFor(x,y))", "all x.((PValue(x) & SomaticVariants(x) & CancerCellLineages(x)) -> RepresentsIntensityFor(x,Selection,SomaticVariants))", "all x y.((P Value(x) & SomaticVariants(y) & CancerCellLineages(x)) -> RepresentsIntensity(x,y))", "all x.(PValue(x) -> (RepresentsSomaticVariants(x) & CellLineages(x)))", "all x y z.((Pvalue(x) & SomaticVariant(y) & CancerCellLineage(z)) -> RepresentsIntensityForSelectionIngredient(x,y,z))", "all x.(PValue(x) -> (RepresentsTheSelectionIntensity(x) & ForSomaticVariants(x) & InCancerCellLineages(x)))"]}
{"id": "folio_train_325", "nl": "Cancer effect size is a metric that is preferred by the majority of cancer researchers.", "fol": "exists x.(CancerEffectSize(x) & PreferredByMajority(CancerResearchers,x))", "prediction": ["all x.(CANCER(x) -> (MetricInforms(x,y) & PreferencedByMajority(x,z)))", "all x.((CANCER(x) & EffectSize(x)) -> FavoredByMajority(x))", "all x.(CancerousEffectSize(x) -> (PreferredByMajorityOfCancerResearchers(x)))", "all x.(CancerEffectSize(x) -> PreferredMetric(x))", "all x.((Method(x) & PreferredByCanceroscopyResearchers(x)) -> CancerEffectiveSize(x))", "all x.(CancerEffectSize(x) -> (PreferredByMajority(x) & CancerResearcher(x)))", "all x.(CancerEffectSize(x) -> (Meritor(x) & PreferredByMajority(x)))", "all x.(CancerousMethodSize(x) -> PreferredByMajorityOfCancerResearchers(x))", "all x.(CancerousEffectSize(x) -> (PreferredByMajorityCancerousResearchers(x) & PreferredByMajority(x)))", "all x.((CancerEffectSize(x) & Majority(x)) -> PreferredByCancerResearchers(x))", "all x y.((CancerousEffectSize(x) & CancerResearcher(y)) -> (PreferredMetric(x,y) | PeoplePreferred(x,y)))", "all x.((CancerEffectSize(x) & MajorityCancerousResearchers(x)) -> PreferredMethod(x))", "all x.(CancerEffectSize(x) -> PrefereedByMajorityOfCancerResearchers(x))", "all x.(CancerEffectSize(x) -> (PreferredByMajorityOfCancerResearchers(x) & Researcher(x)))", "all x y.((CancerousEffectSize(x) & CancerResearcher(y)) -> (PreferredMetric(x,y) & PreferableByMajority(x,y)))", "all x y z.((CancerEffectSize(x) & Researcher(y) & Graph(z)) -> (Preferred(x,y) & Majority(y) & KnownFor(y,z)))"]}
{"id": "folio_train_326", "nl": "P value doesn't represent metrics of effect.", "fol": "all x.(PValueThreshold(x) -> -EffectMetrics(x))", "prediction": ["all x.(PValue(x) -> -RepresentsEffects(x))", "all x.((PValue(x) & -RepresentsMeteodsOfEffect(x)) -> -RepresentsMeteodsOfEffect(x))", "all x.(PriorValue(x) -> -RepresentsMetricsOfEffect(y))", "all x.(PValue(x) -> -RepresentsEffectMeasurements(x))", "all x.((PValue(x) & RepresentsMetatricsOfEffect(x)) -> -RepresentsMetametricsOfEffect(x))", "all x.(PValue(x) -> -RepresentMetricsOfEffect(x))", "all x.(PValue(x) -> -RepresentsEffectMethods(x))", "all x.((PValue(x) & -RepresentsMetadata(x)) -> -RepresentsMetadataOfEffect(x))", "all x.(PValue(x) -> -RepresentsMetadataOfEffect(x))", "all x.(PValue(x) -> -RepresentsMetadataOfEffect(x))", "all x.(PValue(x) -> -RepresentsMetadata(x,Environment))", "none(p) -> DefinesMetadicsOfEffect(p,e))", "(-Represent(PValue),MeasuresOfEffect))", "all x.(PValue(x) -> -RepresentsMeasurementsOfEffect(x))", "all x.(PValue(x) -> -RepresentsEffectMethods(x))", "-representsMeasurementsOfEffect(PValue)"]}
{"id": "folio_train_327", "nl": "All dispensable things are environment-friendly. ", "fol": "all x.(IsDispensable(x) -> IsEnvironmentFriendly(x))", "prediction": ["all x.(Dispenseable(x) -> EnvironmentFriendly(x))", "all x.(Dispensable(x) -> EnvironmentFriendly(x))", "all x.(DispensableThing(x) -> EnvironmentallyFriendly(x))", "all x.(DispensableThing(x) -> EnvironmentFriendly(x))", "all x.((Dispensable(x) & EnvironmentFriendly(x)) -> Dispensable(x))", "all x.(Discpensable(x) -> EnvironmentFriendly(x))", "all x.((DispensableThing(x) & EnvironmentFriendly(x)) -> EnvironmentFriendly(x))", "all x.(DispensableThing(x) -> EnvironmentFriendly(x))", "all x.(Dispensable(x) -> EnvironmentFriendly(x))", "all x.(Dispensable(x) -> EnvironmentFriendly(x))", "all x.(Dispensable(x) -> EnvironmentallyFriendly(x))", "all x.(Dispensable(x) -> EnvironmentFriendly(x))", "all x.(Dispensable(x) -> EnvironmentFriendly(x))", "all x.(DispensableThing(x) -> EnvironmentFriendly(x))", "all x.(Dispensable(x) -> EnvironmentFriendly(x))", "all x y.((Dispensable(x) & EnvironmentFriendly(y)) -> EnvironmentFriendly(x,y))"]}
{"id": "folio_train_328", "nl": "All woodware is dispensable.", "fol": "all x.(IsWoodware(x) -> IsDispensable(x))", "prediction": ["all x.(Woodenware(x) -> Dispensable(x))", "all x.(Woodware(x) -> Dispensable(x))", "all x.(Woodware(x) -> Dispensable(x))", "all x.(Woodware(x) -> Dispensable(x))", "all x.(Woodware(x) -> Dispensable(x))", "all x.(Woodware(x) -> Dispensable(x))", "all x.(Woodenware(x) -> Dispensable(x))", "all x.(Woodware(x) -> Dispensable(x))", "all x.(Woodware(x) -> Dispensable(x))", "all x.(Woodenware(x) -> Dispensable(x))", "all x.(Woodenware(x) -> Dispensable(x))", "all x.(Woodware(x) -> Dispensable(x))", "all x.(Woodenware(x) -> Dispensable(x))", "all x.(Woodware(x) -> Dispensable(x))", "all x.(Woodware(x) -> Dispensable(x))", "all x.(Woodware(x) -> Dispensable(x))"]}
{"id": "folio_train_329", "nl": "All paper is woodware. ", "fol": "all x.(IsPaper(x) -> IsWoodware(x))", "prediction": ["all x.(Paper(x) -> Woodware(x))", "all x.(Paper(x) -> Woodware(x))", "all x.(Paper(x) -> Woodware(x))", "all x.(Paper(x) -> Woodware(x))", "all x.(Paper(x) -> Woodware(x))", "all x.(Paper(x) -> Woodware(x))", "all x.(Paper(x) -> Woodware(x))", "all x.(Paper(x) -> Woodware(x))", "all x.(Paper(x) -> Woodware(x))", "all x.(Paper(x) -> Woodware(x))", "all x.(Paper(x) -> Woodware(x))", "all x.(Paper(x) -> Woodware(x))", "all x.(Paper(x) -> Woodware(x))", "all x.(Paper(x) -> Woodware(x))", "all x.(Paper(x) -> Woodware(x))", "all x.(Paper(x) -> Woodware(x))"]}
{"id": "folio_train_330", "nl": "No good things are bad. ", "fol": "all x.(IsGood(x) -> -IsBad(x))", "prediction": ["-exists x.(GoodThing(x) & BadThing(x))", "-exists x.(GoodThing(x) & BadThing(x))", "-exists x.(GoodThing(x) & BadThing(x))", "-exists x.(GoodThing(x) & BadThing(x))", "-exists x.(GoodThing(x) & BadThing(x))", "-exists x.(GoodThing(x) & BadThing(x))", "-exists x.(GoodThing(x) & BadThing(x))", "-exists x.(GoodThing(x) & BadThing(x))", "-exists x.(GoodThing(x) & BadThing(x))", "-exists x.(GoodThing(x) & BadThing(x))", "-exists x.(GoodWhatever(x) & BadThing(x))", "-exists x.(GoodThing(x) & BadThing(x))", "-exists x.(Good(x) & Bad(x))", "all x.((GoodThing(x) & BadThing(x)) -> -GoodThing(x))", "-exists x.(GoodThing(x) & BadThing(x))", "-all x.(Good(x) -> Bad(x))"]}
{"id": "folio_train_331", "nl": "All environment-friendly things are good.", "fol": "all x.(IsEnvironmentFriendly(x) -> IsGood(x))", "prediction": ["all x.(EnvironmentFriendly(x) -> Good(x))", "all x.(EnvironmentFriendlyThing(x) -> Good(x))", "all x.(EnvironmentFriendly(x) -> Good(x))", "all x.(EnvironmentFriendlyThing(x) -> Good(x))", "all x.(EnvironmentFriendly(x) -> Good(x))", "all x.(EnvironmentFriendly(x) -> Good(x))", "all x.(EnvironmentFriendlyThing(x) -> Good(x))", "all x.(EnvironmentFriendly(x) -> Good(x))", "all x.(EnvironmentFriendlyThing(x) -> Good(x))", "all x.(EnvironmentFriendly(x) -> Good(x))", "all x.(EnvironmentFriendlyThing(x) -> Good(x))", "all x.(EnvironmentFriendly(x) -> Good(x))", "all x.(EnvironmentFriendly(x) -> Good(x))", "all x.(EnvironmentFriendlyThing(x) -> Good(x))", "all x.(EnvironmentFriendly(x) -> Good(x))", "all x.(EnvironmentFriendly(x) -> Good(x))"]}
{"id": "folio_train_332", "nl": "A worksheet is either paper or is environment-friendly.", "fol": "((IsPaper(Worksheet) & -IsEnvironmentFriendly(Worksheet)) | (-IsPaper(Worksheet) & IsEnvironmentFriendly(Worksheet)))", "prediction": ["all x.(Worksheet(x) -> (Paper(x) | EnvironmentFriendly(x)))", "all x.(Worksheet(x) -> (Paper(x) | EnvironmentFriendly(x)))", "all x.(Worksheet(x) -> (Paper(x) | EnvironmentFriendly(x)))", "all x.(Worksheet(x) -> (Paper(x) | EnvironmentFriendly(x)))", "all x.(Worksheet(x) -> (Paper(x) | EnvironmentFriendly(x)))", "all x.(Worksheet(x) -> ((Paper(x) | EnvironmentFriendly(x))))", "all x.(Worksheet(x) -> (Paper(x) | EnvironmentFriendly(x)))", "all x.(Worksheet(x) -> ((Paper(x) | EnvironmentFriendly(x))))", "exists x.(Worksheet(x) & (Paper(x) | EnvironmentFriendly(x)))", "all x.(Worksheet(x) -> ((Paper(x) | EnvironmentFriendly(x))))", "all x.(Worksheet(x) -> (Paper(x) | EnvironmentFriendly(x)))", "all x.(Worksheet(x) -> (Paper(x) | EnvironmentalFriendly(x)))", "all x.(Worksheet(x) -> (Paper(x) | EnvironmentFriendly(x)))", "all x.(Worksheet(x) -> (NotPaper(x) | EnvironmentFriendly(x)))", "exists x.(Worksheet(x) & (Paper(x) | EnvironmentFriendly(x))))", "all x.(Worksheet(x) -> (InformationByPaper(x) | EnvironmentFriendly(x)))"]}
{"id": "folio_train_333", "nl": "A worksheet is dispensable.", "fol": "IsDispensable(Worksheet)", "prediction": ["all x.(Worksheet(x) -> Dispensable(x))", "all x.(Worksheet(x) -> Dispensable(x))", "all x.(Worksheet(x) -> Dispensable(x))", "all x.(Worksheet(x) -> Dispensable(x))", "all x.(Worksheet(x) -> Dispensable(x))", "all x.(Worksheet(x) -> Dispensable(x))", "all x.(Worksheet(x) -> Dispensable(x))", "all x.(Worksheet(x) -> Dispensable(x))", "all x.(Worksheet(x) -> Dispensable(x))", "all x.(Worksheet(x) -> Dispensable(x))", "all x.(Worksheet(x) -> Dispensable(x))", "all x.((Worksheet(x) & Dispensable(x)) -> CanHelp(x))", "all x.(Worksheet(x) -> Dispensable(x))", "all x.(Worksheet(x) -> Dispensable(x))", "all x.(Worksheet(x) -> Dispensable(x))", "all x.(Worksheet(x) -> Dispensable(x))"]}
{"id": "folio_train_334", "nl": "A worksheet is not dispensable.", "fol": "-IsDispensable(Worksheet)", "prediction": ["all x.(Worksheet(x) -> -Dispensable(x))", "all x.(Worksheet(x) -> -Dispensable(x))", "all x.(Worksheet(x) -> -Dispensable(x))", "all x.(Worksheet(x) -> -Dispensable(x))", "all x.(Worksheet(x) -> -Dispensable(x))", "all x.(Worksheet(x) -> -Dispensable(x))", "all x.(Worksheet(x) -> -Dispensable(x))", "all x.(Worksheet(x) -> -Dispensable(x))", "all x.(Worksheet(x) -> -Dispensable(x))", "all x.(Worksheet(x) -> -Dispensable(x))", "all x.(Worksheet(x) -> -Dispensable(x))", "all x.(Worksheet(x) -> -Dispensable(x))", "all x.(Worksheet(x) -> -Dispensable(x))", "all x.(Worksheet(x) -> -Dispensable(x))", "all x.(Worksheet(x) -> -Dispensable(x))", "all x.(Sheet(x) -> -Dispensable(x))"]}
{"id": "folio_train_335", "nl": "A worksheet is bad.", "fol": "IsBad(Worksheet)", "prediction": ["all x.(Worksheet(x) -> Bad(x))", "all x.(Worksheet(x) -> Bad(x))", "all x.(Worksheet(x) -> Bad(x))", "all x.(Worksheet(x) -> Bad(x))", "all x.(Worksheet(x) -> Bad(x))", "all x.(Worksheet(x) -> Bad(x))", "all x.(Worksheet(x) -> Bad(x))", "all x.((Worksheet(x) & Bad(x)) -> Bad(x))", "all x.(Worksheet(x) -> Bad(x))", "all x.(Worksheet(x) -> Bad(x))", "all x.(Worksheet(x) -> Bad(x))", "all x.(Worksheet(x) -> Bad(x))", "exists x.(Worksheet(x) & Bad(x))", "all x.(Worksheet(x) -> Bad(x))", "all x.((Worksheet(x) & Bad(x)) -> Bad(x))", "all x.(Worksheet(x) -> Bad(x))"]}
{"id": "folio_train_336", "nl": "A worksheet is not bad.", "fol": "-IsBad(Worksheet)", "prediction": ["exists x.(Worksheet(x) & -Bad(x))", "all x.(Worksheet(x) -> -Bad(x))", "all x.(Worksheet(x) -> -Bad(x))", "all x.(Worksheet(x) -> -Bad(x))", "all x.(Worksheet(x) -> -Bad(x))", "all x.(Worksheet(x) -> -Bad(x))", "all x.(Worksheet(x) -> -Bad(x))", "all x.(Worksheet(x) -> -Bad(x))", "all x.(Wheelsheet(x) -> -Bad(x))", "all x.(Worksheet(x) -> -Bad(x))", "all x.(Worksheet(x) -> -Bad(x))", "all x.(Worksheet(x) -> -Bad(x))", "all x.(Worksheet(x) -> -Bad(x))", "all x.(Worksheet(x) -> -Bad(x))", "all x.(Worksheet(x) -> -Bad(x))", "all x.(Worksheet(x) -> -Bad(x))"]}
{"id": "folio_train_337", "nl": "No reptile has fur.", "fol": "all x.(IsReptile(x) -> -HasFur(x))", "prediction": ["-exists x.(Reptile(x) & HasFur(x))", "-exists x.(Reptile(x) & HasFur(x))", "-exists x.(Reptile(x) & HasFur(x))", "-exists x.(Reptile(x) & Fur(x))", "-exists x.(Reptile(x) & HasFur(x))", "-exists x.(Reptile(x) & HasFur(x))", "all x.(Reptile(x) -> -HasFur(x))", "-exists x.(Reptile(x) & HasFur(x))", "-exists x.(Reptile(x) & HasFur(x))", "-exists x.(Reptile(x) & HasFur(x))", "-exists x.(Reptile(x) & HasFur(x))", "-exists x.(Reptile(x) & Fur(x))", "-exists x.(Reptile(x) & HasFur(x))", "all x.(Reptile(x) -> HasFur(x))", "KeinReptileHasFur(x)", "SucceedsPure(reptile)"]}
{"id": "folio_train_338", "nl": "All snakes are reptiles.", "fol": "all x.(IsSnake(x) -> IsReptile(x))", "prediction": ["all x.(Snake(x) -> Reptile(x))", "all x.(Snake(x) -> Reptile(x))", "all x y.((Snake(x) & Reptile(y)) -> Reptile(x,y))", "all x.(Snake(x) -> Reptile(x))", "all x.(Snake(x) -> Reptile(x))", "all x.(Snake(x) -> Reptile(x))", "all x.(Snake(x) -> Reptile(x))", "all x.(Snake(x) -> Reptile(x))", "all x.(Snake(x) -> Reptile(x))", "all x.(Shark(x) -> Reptile(x))", "all x.(Snake(x) -> Reptile(x))", "all x.(Snake(x) -> Reptile(x))", "all x.(Snake(x) -> Reptile(x))", "all x.(Snake(x) -> Reptile(x))", "all x.(Snake(x) -> Reptile(x))", "all x.(Snake(x) -> Reptile(x))"]}
{"id": "folio_train_339", "nl": "Some snake has fur.", "fol": "exists x.(IsSnake(x) & HasFur(x))", "prediction": ["exists x.(Snake(x) & HasFur(x))", "exists x.(Snake(x) & HasFur(x))", "exists x.(Snake(x) & HasFur(x))", "exists x.(Snake(x) & Fur(x))", "exists x.(Snake(x) & HasFur(x))", "exists x.(Snake(x) & HasFur(x))", "exists x.(Snake(x) & HasFur(x))", "exists x.(Snake(x) & HasFur(x))", "exists x.(Snake(x) & HasFur(x))", "exists x.(Snake(x) & HasFur(x))", "exists x.(Snake(x) & HasFur(x))", "exists x.(Snake(x) & HasFur(x))", "exists x.(Snake(x) & HasFur(x))", "exists x.(Snake(x) & HasFur(x))", "exists x.(Snake(x) & HasFur(x))", "exists x.(Snake(x) & HasFur(x))"]}
{"id": "folio_train_340", "nl": "All buildings in New Haven are low. ", "fol": "all x.(IsLocatedIn(Newhaven,x) -> -IsHighBuilding(x))", "prediction": ["all x.(House(x) -> Low(x))", "all x.(Building(x) -> Low(x))", "all x.((Building(x) & InNewHaven(x)) -> Low(x))", "all x.(Building(x) -> Low(x))", "all x.((Building(x) & NewHunt(x)) -> Low(x))", "All x.(NewHunt(x) -> Low(x))", "all x.((Building(x) & InNewHandon(x)) -> Low(x))", "all x.(NewHunt(x) -> Low(x))", "all x.((Building(x) & NewHunt(x)) -> Low(x))", "all x.(NewHunt(x) -> LowBuilding(x))", "all x.(NewHunt(x) -> LowBuilding(x))", "all x.(Building(x) -> Low(x))", "all x.(NewHaven(x) -> LowBuilding(x))", "all x.(NovAnchor(x) -> Low(x))", "all x.((Building(x) & NewHunt(x)) -> Low(x))", "all x.(Building(x) -> Low(x))"]}
{"id": "folio_train_341", "nl": "All buildings managed by the Yale Housing are located in New Haven. ", "fol": "all x.(ManagedByYaleHousing(x) -> IsLocatedIn(Newhaven,x))", "prediction": ["all x.((Building(x) & ManagedByY YaleHousing(x)) -> RelocatedInNewHanover(x))", "all x.((Building(x) & ManagedByYaleHousing(x)) -> NewHanover(x))", "all x y.((Building(x) & YaleHousing(y)) -> LocatedInNewHonoran(x,y))", "all x y.((Building(x) & YaleHousing(y)) -> Location(x,NewHaven))", "all x.(HistoricalBuilding(x) -> Exists InNew Haven(y))", "all x y.((Landing(x) & Property(y)) -> YaleHousing(x))", "all x.((Building(x) & ManagedByY YaleHousing(x)) -> LocatedInNewHanover(x))", "all x.(ManagedByYaleHousing(x) -> NewHanover(x))", "all x y.((Building(x) & YaleHousing(y)) -> LocatedInNewHanford(x,y))", "all x y.((Building(x) & ManagementBy YaleHousing(x)) -> LocatedInNew Haven(y))", "all x.((Building(x) & ManagedByYalehousing(x)) -> FoundInNew Haven(x))", "all x.((Building(x) & ManagedByYale Housing(x)) -> NewHunt(x))", "all x.((Building(x) & YaleHousing(x)) -> NewHanover(x))", "all x.(Building(x) -> ManagedByYaleHousing(x))", "all x.((Building(x) & ManagedByYamaHostel(x)) -> NewHanover(x))", "all x y.((Building(x) & YaleHousing(y)) -> LocatedInNewHaven(x,y))"]}
{"id": "folio_train_342", "nl": "All buildings in Manhattans are high. ", "fol": "all x.(IsLocatedIn(Manhattans,x) -> IsHighBuilding(x))", "prediction": ["all x.((Building(x) & InMetropolitan(x)) -> High(x))", "all x y.((Building(x) & Manhattan(y)) -> High(x,y))", "all x.(ManhattanBuilding(x) -> High(x))", "all x.((Building(x) & inMondon(x)) -> High(x))", "all x.(InMetropolitan(x) -> HighBuilding(x))", "all x.(NewYork(x) -> High(x))", "all x.((Building(x) & InMidtown(x)) -> High(x))", "all x.((Building(x) & InMetropolitan(x)) -> High(x))", "all x.((Building(x) & InMetro(x)) -> High(x))", "all x.(Modern(x) -> HighBuilding(x))", "all x.(InManhattan(x) -> HighBuilding(x))", "all x.((Building(x) & InMetropolis(x)) -> High(x))", "all x.(Building(x) -> High(x))", "all x.((Building(x) & HighInMetropolis(x)) -> High(x))", "all x.(Bedroom(x) & High(x))", "all x.((Building(x) & In(x,Metropolitan)) -> High(x))"]}
{"id": "folio_train_343", "nl": "All buildings owned by Bloomberg are located in Manhattans. ", "fol": "all x.(OwnedByBloomberg(x) -> IsLocatedIn(Manhattans,x))", "prediction": ["all x.((Building(x) & OwnedByBurnaro(x)) -> LocationInMiami(x,Newark))", "all x y.((Building(x) & OwnedByBanana(x,y)) -> LocatedInMennons(y))", "all x.(OwnedByBanana(x) -> StoredInMilanops(x))", "all x.((Building(x) & Bloomberg(x)) -> LocatedInMetropolitans(x))", "all x.((Building(x) & OccupiedByBananaSymbol(x)) -> Manhattans(x))", "all x.(Built(x) -> Manhattan(x))", "all x.((Building(x) & Bloomberg(x)) -> LocatedInMiamizons(x))", "all x.((Building(x) & OwnedByBudget(x)) -> LocatedInMiamis(x))", "all x.(Bloomberg(x) -> OwneredBy(x,New York))", "all x.((Building(x) & OwnedByBanus(x)) -> LocatedInMetropolitans(x))", "all x.(Household(x) -> LocatedInBloomberg(x))", "all x.((Building(x) & OwnedByBanana(x)) -> LocatedInMiaminots(x))", "all x.((Building(x) & OwnedByBanky(x)) -> Manhattan(x))", "all x.(EstatedByBurning(x) -> Manhattan(x))", "all x.((Building(x) & OwnedByBloomberg(x)) -> LocatedInMiaminos(x))", "all x.((Building(x) & OwnedByBananas(x)) -> LocatedInMidtowns(x))"]}
{"id": "folio_train_344", "nl": "All buildings with the Bloomberg logo are owned by Bloomberg. ", "fol": "all x.(HasBloombergLogo(x) -> OwnedByBloomberg(x))", "prediction": ["all x.((Building(x) & HasBurnyLogo(x)) -> OwnedByBurny(x))", "all x.((Building(x) & BloombergLogo(x)) -> OwnedByBird(x))", "all x.((BuildingWithBurgerLogo(x)) -> OwnedByBurger(x))", "all x.((Building(x) & BloombergLogo(x)) -> OwnedByBananas(x))", "all x.((Building(x) & BloombergLogo(x)) -> OccupiedByBianca(x))", "all x.((Building(x) & BloombergLogo(x)) -> OwnedByBanana(x))", "all x.((Building(x) & BloombergLogo(x)) -> OwnedByBinganast(x))", "all x.((Building(x) & BloombergLogo(x)) -> HostedBy(x,Banco))", "all x y.((Building(x) & BloombergLogo(y)) -> OwnedBy(x,y))", "all x.((Building(x) & BloombergLogo(x)) -> OwnedByBiz.(Biz.(Biz.(Biz.Billio) & -Billio(z) & -BillioDigit(x) & -(Billiod(y) & Bloomberg(z)))))", "all x.((Building(x) & BloombergLogo(x)) -> OwnedByBilliance(x))", "all x.((Building(x) & BloombergLogo(x)) -> OwnedByBurnaro(x,Burnaro))", "all x.((Building(x) & BloombergLogo(x)) -> OwnedByBanana.(x))", "all x.((Building(x) & BloombergLogo(x)) -> OwnedByBilliams(x))", "all x.((Building(x) & HasBushnanLogo(x)) -> OwnedByBushnan(x))", "all x y.((Building(x) & BloombergLogo(y)) -> OwnedBy(x,y))"]}
{"id": "folio_train_345", "nl": "Tower A is managed by the Yale Housing.", "fol": "ManagedByYaleHousing(TowerA)", "prediction": ["TowerA is managed by YaleHousing(tower)", "All x y.((WinehamHolding(x) & TowerA)(y)) -> ManagedBy(x,y))", "(ManagedByYaleHousing(TowerA) & YaleHousing(TowerA))", "all x.(TowerA(x) -> ManagedByYamaHospital(x))", "All x y.((Tower(x) & YaleHousing(y)) -> ManagedBy(x,y))", "all x.(TowerA(x) -> ManagedByYaleHousing(x))", "All x.(TurbineA(x) -> ManagedByY YaleHousing(x))", "All x y.((Turbine(x) & YaleHousing(y)) -> ManagedBy(x,y))", "all x y z.((TowerA(x) & YaleHousing(y) & Housing(z) & ManagedBy(x,y)) -> ManagementPositive(x))", "All x.(TurbineA(x) -> ManagedByY YaleHousing(x))", "(ManagedBy(TowerA) & YaleHousing(TowerA))", "all x y z.((TowerA(x) & YaleHostel(y) & Housing(z)) -> ManagedBy(x,y,z))", "all x.((TowerA(x) & YaleHousing(y)) -> ManagedBy(x,y))", "all x.((TowerA(x) & YaleHousing(x)) -> Managed(x))", "all x.(TurbineA(x) -> ManagedByYaleHousing(x))", "all x.(TowerA(x) -> ManagedByYaleHousing(x))"]}
{"id": "folio_train_346", "nl": "Tower B is with the Bloomberg logo.", "fol": "HasBloombergLogo(TowerB)", "prediction": ["all x.(TowerB(x) -> BloombergLogo(x))", "all x y.((Turbine(x) & BloombergLogo(y)) -> With(x,y))", "All x.(TowerB(x) -> BloombergLogo(x))", "all x.(TurnorB(x) -> HasBurnIdea(x))", "all x.(TowerB(x) -> WithBananasLogo(x))", "All x.(RoadBible(x) -> HasBurnsbyLogo(x))", "All x.(TowerB(x) -> WithByBananasLogo(x))", "all x.(TowerB(x) -> HasBurmanLogo(x))", "all x y.((TowerB) & BloombergLogo(y)) -> IsWith(x,y))", "(Roadside(TowerB) & WithBananasLogo(TowerB))", "all x.(TurbineB(x) -> HasBananasLogo(x))", "all x.(TourB(x) -> BankWord(x))", "all x.(TowerB(x) -> WithBenjaminLogo(x))", "LocatedInTowerB(towerB) & WithLogo(towerB))", "all x.(TowerB(x) -> (StandsWithBananasLogo(x) & Symbol(x)))", "TowerB isWithByBloombergLogo(Bloomberg)"]}
{"id": "folio_train_347", "nl": "Tower A is low.", "fol": "-IsHighBuilding(TowerA)", "prediction": ["LimitedTowerA(two) -> Low(two))", "Level(TowerA)", "All x.(TowerA(x) -> Low(x))", "All x.(Tower(x) -> Low(x))", "All x y.((Turbine(x) & TowerA(y)) -> Low(y))", "All x.(TowerA(x) -> Low(x))", "(LowTower(TowerA))", "All x.(TurmA(x) -> Low(x))", "Tower A is low.", "all x.(TowerA(x) -> Low(x))", "The Tower A is Low.", "TowerA isLow(torror1)", "All x.(Tower(x) -> Low(x))", "All x.(TowerA(x) -> Low(x))", "TowerA isLow(torris)", "All x.((TowerA(x) & Low(x)) -> Low(x))"]}
{"id": "folio_train_348", "nl": "Tower B is not located in Manhattans.", "fol": "-IsLocatedIn(Manhattans,TowerB)", "prediction": ["all x.(TowerB(x) -> -LainInManhattan(x))", "Tower B -LocatedInManhattanAreas(#)", "Tower B -LocatedIn(tower,Menards)", "Tower B -LocatedIn(tondo).", "Das TowerB -LocatedInMiltons(TowerB).", "-LocatedIn(TowerB)", "-LocatedIn(TowerB))", "all x.(TurmB) -> -Unmanned(x))", "Tower B is not located in Manhattans.", "all x.(TowerB(x) -> -Mensueltown(x))", "(-LocationWallB(TurbineB))", "-LocatedInMennons(TowerB)", "Tower B is -LikedInMidtowns(Block2City(Block4))", "(-TowerB(TowerB) & LocatedInMetropolitans(TowerB) & LocatedInNashville(TowerB))", "(-LiquidationInMensuetas(TowerB))", "-LocatedInMetropolitans(TurnB)"]}
{"id": "folio_train_349", "nl": "Tower B is located in New Haven.", "fol": "IsLocatedIn(Newhaven,TowerB)", "prediction": ["All x.(TurbineB(x) -> NewHandon(x))", "((TowerB) & NewHaven(Movement)) -> LocatedIn(TowerB))", "TowerB is located in NewHann(TowerB)", "TowerB is located in NewHunt(TM)", "TowerB is located InNew Haven.", "TowerB is located in New Haven.", "TowerB is located in New Haven.", "TowerB is located in New Haven.", "Tower B is located in New Haven.", "TowerB is located in New Haven OH.", "all x.(TowerB(x) -> NewHunt(x))", "All x.(TowerB(x) -> NewHaven(x))", "to TowerB(t) & NewHaven(t))", "TowerB is located in New Haven.", "TowerB is located in New Haven.", "(LocatedIn(WoodB) & LocatedIn(WoodB) & LocatedIn(WoodB))"]}
{"id": "folio_train_350", "nl": "No cold-blooded animals are birds.", "fol": "all x.(IsColdBlooded(x) -> -IsBird(x))", "prediction": ["-exists x.(ColdBlooded(x) & Plant(x))", "-exists x.(ColdBlooded(x) & -Bird(x))", "-exists x.(ColdBloodedAnimal(x) & Bird(x))", "-exists x.(ColdBloodedAnimal(x) & Bird(x))", "all x.((ColdBloodedAnimal(x) & -Bird(x)) -> Bird(x))", "-exists x.(ColdBloodedAnimal(x) & Bird(x))", "-exists x.(ColdBloodedAnimal(x) & Bird(x))", "-exists x.(ClearBloodedAnimal(x) & Bird(x))", "-exists x.(ColdBlooded(x) & Bird(x))", "-(ColdBlooded(animal) & Bird(animal))", "-exists x.(ColdBloodedAnimal(x) & Bird(x))", "Keen(ClearBloodedAnimal(ClothingBlooded(ClothingAt(Clothing) & -Poultry(Clothing))", "-exists x.(ColdBlooded(x) & -Bird(x))", "-exists x.(ColdBloodedAnimal(x) & Bird(x))", "all x.((FreshBlooded(x) & -Bird(x)) -> Bird(x))", "-exists x.(ColdBloodedAnimal(x) & Bird(x))"]}
{"id": "folio_train_351", "nl": "All reptiles are cold-blooded.", "fol": "all x.(IsReptile(x) -> IsColdBlooded(x))", "prediction": ["all x.(Reptile(x) -> ColdBlooded(x))", "all x.(Reptile(x) -> ColdBlooded(x))", "all x.(Reptile(x) -> ColdBlooded(x))", "all x.(Reptile(x) -> ColdBlooded(x))", "all x.(Reptile(x) -> ColdBlooded(x))", "all x.(Reptile(x) -> ColdBlooded(x))", "all x.(Reptile(x) -> ColdBlooded(x))", "all x.(Reptile(x) -> ColdBlooded(x))", "all x.(Reptile(x) -> ColdBlooded(x))", "all x.(Reptile(x) -> ColdBlooded(x))", "all x.(Reptile(x) -> ColdBlooded(x))", "all x.(Reptile(x) -> ColdBlooded(x))", "all x.(Reptile(x) -> ColdBlooded(x))", "all x.(Reptile(x) -> ColdBlooded(x))", "all x.(Rptile(x) -> ColdBlooded(x))", "all x.(Reptile(x) -> ColdBlooded(x))"]}
{"id": "folio_train_352", "nl": "Either an animal is a bird or it eats other animals.", "fol": "all x.(IsBird(x) | EatsOtherAnimals(x))", "prediction": ["all x.((Animal(x) & Bird(x)) | EatsOtherAnimals(x))", "all x.(Animal(x) -> (Bird(x) | EatsOtherAnimals(x)))", "exists x.(Animal(x) & (Bird(x) | EatsAnimals(x)))", "all x.(Animal(x) -> (Bird(x) | EatsAnimals(x)))", "all x.(Animal(x) -> (Bird(x) | EatsAnimals(x)))", "all x y.((Animal(x) & Bird(x)) | EatsOtherAnimals(x)) -> LivesIn(x,y))", "all x.(Animal(x) -> (Bird(x) | EatsAnimals(x)))", "all x.(Animal(x) -> (Bird(x) | EatsOtherAnimals(x)))", "all x.(Animal(x) -> (Bird(x) | EatsAnimals(x)))", "all x.(Animal(x) -> (Bird(x) | EatsAnimals(x)))", "(exists x.(Animal(x) & Bird(x)) | exists y.(Animal(y) & Eats(y,x)))))", "exists x.(Animal(x) & (Bird(x) | EatsAnimals(x)))", "exists x.(Animal(x) & (Bird(x) | EatsAnimals(x)))", "all x.(Animal(x) -> (Bird(x) | EatsAnimals(x)))", "all x.(Animal(x) -> (Bird(x) | EatsOtherAnimals(x)))", "all x y.((Animal(x) & Bird(y)) | (EatsAnimals(x,y))))"]}
{"id": "folio_train_353", "nl": "If an animal eats other animals, then it is a carnivore.", "fol": "all x.(EatsOtherAnimals(x) -> IsCarnivore(x))", "prediction": ["all x y.((Animal(x) & Animal(y) & Eats(x,y)) -> Carnivore(x))", "all x.((Animal(x) & EatsOtherAnimals(x)) -> Carnivore(x))", "all x.((Animal(x) & Eats(x,z)) -> Carnivore(x))", "all x.(OtherAnimal(x) -> Carnivore(x))", "all x.((Animal(x) & EatsOtherAnimals(x)) -> Carnivore(x))", "all x y z.((Animal(x) & Animal(y) & Animal(z) & Eats(x,y)) -> Carnivore(x))", "all x.(OtherAnimal(x) -> Carnivore(x))", "all x.((Animal(x) & EatsOtherAnimals(x)) -> Carnivore(x))", "all x.((Animal(x) & EatsAnimals(x)) -> Carnivore(x))", "all x.((Animal(x) & EatsOtherAnimals(x)) -> Carnivore(x))", "all x.((Animal(x) & EatsAnimals(x)) -> Carnivore(x))", "all x.((Animal(x) & EatsOtherAnimals(x)) -> Carnivore(x))", "all x.((Animal(x) & EatsOtherAnimals(x)) -> Carnivore(x))", "all x.((Animal(x) & EatsAnimals(x)) -> Carnivore(x))", "all x.((Animal(x) & EatsOtherAnimals(x)) -> Carnivore(x))", "all x.((Animal(x) & EatsAnimals(x)) -> Carnivore(x))"]}
{"id": "folio_train_354", "nl": "Ron is neither a cold-blooded animal nor a carnivore.", "fol": "(-IsColdBlooded(Ron) & -IsCarnivore(Ron))", "prediction": ["-(ColdBlooded(Ron) & -Carnivore(Ron))", "all x.((Ron(x) & -ColdBloodedAnimal(x) & -Carnivore(x)) -> -Carnivore(x))", "Ron is -(ColdBlooded(Rosen) & -Carnivore(Rosen))", "(Carnivore(Ron) & -(ColdBlooded(Ron) | Carnivore(Ron)))", "all x.((Ron(x) & ColdBlooded(x) & -Carnivore(x)) -> -Carnivore(x))", "(-ColdBlooded(Ron) | Carnivore(Ron))", "all x.(Ron(x) -> -(ColdBlooded(x) & -Carnivore(x)))", "all x.(Ron(x) -> (-ColdBlooded(x) & -Carnivore(x)))", "all x.((Ron(x) & -ColdBlooded(x) & -Carnivore(x)) -> -Carnivore(x))", "all x.(Ron(x) -> (-ColdBlooded(x) & -Carnivore(x)))", "\u0430\u0440\u043e\u043c \u043e\u0440\u043e\u043e \u043e\u0440\u043e\u043e \u0438\u043e-\u0440\u0435\u043b (\u0430 \u043d\u0430\u0441,) \u043e\u043b\u0443\u0438\u0442\u0441  \u043e\u0440\u043e\u043e \u0438 \u043e\u0440\u043a\u043e\u0432\u0430 () \u0438\u043e \u0430.", "all x.(Leaf(Ron) -> -(ClookedBlooded(Ron) | Carnivore(Ron)))", "all x.(Ron(x) -> -(ColdBlooded(x) | Carnivore(x)))", "Ron is -(ColdBlooded(r) | Carnivore(r)))", "(Carnivore(Ron) & -ColdBlooded(Ron))", "((Ros(Ron) | Carnivore(Ron)))"]}
{"id": "folio_train_355", "nl": "Henry is neither a carnivore nor a lizard.", "fol": "(-IsCarnivore(Henry) & -IsLizard(Henry))", "prediction": ["((Henry(Henry) & -Carnivore(Henry) & -Lizard(Henry))", "all x.(Henry(x) -> (-Carnivore(x) & -Lizard(x)))", "(-Carnivore(Henry)", "all x.(Henry(x) -> (-Carnivore(x) & -Lizard(x)))", "(-Carnivore(Henry) & -Lizad(Henry))", "all x.(Henry(x) -> (-Carnivore(x) | -Lizard(x)))", "(-Carnivore(Harry) & -Lizard(Harry))", "Henry is sadly neeeesh (neecary(Henry) & nocary(Henry,Lizard))", "(-Carnivore(Henry) | Lizard(Henry))", "Henry -(Carnivore(Houston) | Lizard(Houston))", "(-Carnivore(Henry) & -Lizard(Henry))", "(-(Carnivore(Henry) | Lizard(Henry)))", "(-Carnivore(Henry) | Lizard(Henry))", "(-Carnivore(Harry) & -Lizard(Harry))", "((Henry(Henry) & -Carnivore(Henry)) | Lizard(Henry)))", "all x.(Henry(x) -> (-Carnivore(x) & -Lizard(x)))"]}
{"id": "folio_train_356", "nl": "Ron is a lizard.", "fol": "IsLizard(Ron)", "prediction": ["Ron is Lizard(Ron)", "Ron is Lizard(r)", "All x.(Ron(x) -> Lizard(x))", "Ron is Lizard(Ron)", "Ron is Lizard(Ron)", "all x.(Lizard(x) -> Ron(x))", "Ron is Lizard(Ron)", "all x.(Lizard(x) -> Ron(x))", "Ron is Lizard(Ron)", "Ron is Lizard.", "(Lizard(Ron) -> Lizard(Ron))", "all x.(Ron(x) -> Lizard(x))", "Ron is Lizard(Ron)", "Ron is a Lizard(Ron)", "Ron is Lizard(Ron)", "(Lizard(Ron,Civil))"]}
{"id": "folio_train_357", "nl": "Either Henry is a reptile or Ron eats other animals.", "fol": "(IsReptile(Henry) | EatsOtherAnimals(Ron))", "prediction": ["Either Henry is reptile or Ron EatsAnimals(x))", "(all x.(Henry(x) -> Reptile(x)) | (Ron(x) -> EatsAnimals(x))))", "((HenryReptile(Henry) | RonEatsAnimals(Henry)))", "(Each(Henry,Reptile) | (EatsOtherAnimals(Henry,Animal))))", "all x y.(((Henry(x) & Ron(y)) -> (Reptile(x) | EatsAnimals(y)))", "((HenryPesticide(Henry) | RonEatensAnimals(Henry)))", "(exists x.(Reptile(x) | Human(x))) | exists y.(Animal(y) & Eats(y))))", "(exists x.(Reptile(x) & Henry(x))) | exists y.(Animal(y) & Ron(x) & Ess(x,y))))", "(Ron(Henry,Supreme) | EatsAnimals(Ron,Mother(Henry)))", "exists x y.(Reptile(x) & Animal(y) & (Henry(x) | Ron(x)))", "(Either HenryIsReptile(Henry) | RonIsAnimal(Ron)))", "(Reptile(Henry) | CaterToAnimals(Ron)))", "(exists x.(Henry(x) & Reptile(x))) | exists y.(Ron(y) & EatsAnimals(y))))", "(exists x.(Reptile(x) & Henry(x)) | exists y.(Animal(y) & Ron(x))))", "all x y.((Henry(x) & Ron(y)) -> (Reptile(x) | EatsAnimals(y)))", "(all x y.(Reptile(x) -> Henry(x)) | (Animal(y) -> Ron(y))))"]}
{"id": "folio_train_358", "nl": "It is not true that Ron is a reptile or that Henry is cold-blooded.", "fol": "-(IsReptile(Ron) | IsColdBlooded(Henry))", "prediction": ["(-(Reptile(Ron) & ColdBlooded(Henry)) -> -Reptile(Ron))", "(-(Reptile(Ron) & ColdBlooded(Henry)))", "(-(Ron(Ron) & ColdBlooded(Henry)) -> -Reptile(Ron))", "all x.((Ron(x) | Henry(x)) -> -Reptile(x))", "(-(Ron isReptile(Ron) & -(Henry isColdBlooded(Henry))))", "-(Reptile(Ron) | ColdBlooded(Henry))", "(-(Reptile(Ron) | ColdBlooded(Henry)))", "-(Reptile(Ron) | ColdBlooded(Henry))", "all x.((Ron(x) & -Reptile(x)) | (-Reptile(x) & ColdBlooded(x))))", "(-(Reptile(Ron) | ColdBlooded(Henry)))", "all x.((Reptile(x) | ColdBlooded(x)) -> -Reptile(x))", "-(Reptile(Ron) & ColdBlooded(Henry))", "(-(RonisReptile(Ron) | HenryColdBlooded(Ron)))", "(-(Ron isReptile(Ron) & -(HenryColdBlooded(Ron)) & -(HenryColdBlooded(Ron))))", "the one true and accurate description is: (\u2013RonReptile(Ron) & -HenryColdBlooded(Henry)))", "(-(RonIsReptile(Ron) | HenryIsColdBlooded(Ron)))"]}
{"id": "folio_train_359", "nl": "Ambiortus is a prehistoric bird genus.", "fol": "(IsPrehistoric(Ambiortus) & IsBirdGenus(Ambiortus))", "prediction": ["(Velocitudin) & PrehistoricBirdGenus(ambiortus)", "all x.(Ambiortus(x) -> (PrehistoricBirdGenus(x) & PrehistoricBirdGenus(x)))", "(PrehistoricBirdGenus(ambiortus) & PrehistoricBirdGenus(ambiortus))", "all x.(Ambiortus(x) -> (PrehistoricBirdGenus(x) & PrehistoricBirdGenus(x)))", "All x.(Ambiortus(x) -> PrehistoricBirdGenus(x))", "all x.(Ambiortus(x) -> PrehistoricBirdGenome(x))", "all x.(Ambiortus(x) -> PrehistoricBirdGanus(x))", "all x y.((BirdGenus(x) & Ambiortus(y)) -> Prehistoric(x,y))", "all x.(Ambiortus(x) -> (PrehistoricBirdGenus(x) & PrehistoricBirdGenus(x)))", "all x.(Ambiortus(x) -> PrehistoricBirdGenus(x))", "all x.(Ambiortus(x) -> PrehistoricBirdGenus(x))", "all x.(Ambiortus(x) -> BirdGenus(x))", "is a prehistoric birdGenus(Ambiortus)", "all x.(Ambiortus(x) -> PrehistoricBirdGenus(x))", "all x.(Ambiortus(x) -> PrehistoricBirdGenus(x))", "all x y z.((Ambiortus(x) & BirdGenus(y) & (Information(z) | Information(z)))) -> Prehistoric(x))"]}
{"id": "folio_train_360", "nl": "Ambiorus Dementjevi is the only known species of Ambiortus.", "fol": "all x.(IsSpeciesOf(x,Ambiortus) -> AmbiorusDementjeviSpecies(x))", "prediction": ["all x.(AmbiorusDementjevi(x) -> (Ambiortus(x) & OnlyKnownSpecies(x)))", "Dementjevi(a) ((Ambiorus(a) | Defenseevo(a))) - Exists.", "all x y.((AmbiorusDementjevi(x) & Ambiortus(y)) -> KnownSpecies(x,y))", "all x.((Ambiorus(x) & Dementjevi(x)) -> Ambiortus(x))", "(NameAmbiorus (Dementjevi) | NameAmbiortus(Ambiortus)))", "all x.(AmbiorusDementjevi(x) -> exists y.(Ambiortus(y) & KnownSpecies(x,y))))", "all x.((Ambiorus(x) & Dementjevi(x)) -> AmbiortusHellbar(x))", "all x.(AmbiorusDementjevi(x) -> (LimitedSpecies(x) & Ambiortus(x)))", "All x.(AmbiorusDementjevi(x) -> Ambiortus(x))", "all x.(Family(x) -> (AmbiorusDementjevi(x) & OnlyKnownSpecies(x,Ambiortus)))", "all x.(AmbiorusDementjevi(x) -> UniqueSpeciesOfAmbiortus(x))", "(CelebratedSpecies(ambiorus) & Dementjevi(ambiorus))", "all x.((Ambiorus(x) & Dementjevi(x)) -> Ambiortus(x))", "(OnlyKnownSpecies(Ambiortus) & KnownSpecies(Ambiortus))", "all x.((Ambiorus(x) & Dementjevi(x)) -> KnownSpeciesOfAmbiortus(x))", "all x.(Ambiorus(x) -> (UnknownSpecies(x) & Ambiortus(x) & Dementjevi(x)))"]}
{"id": "folio_train_361", "nl": "The Mongol region was where Ambiorus Dementjevi lived.", "fol": "all x.(AmbiorusDementjeviSpecies(x) -> LivedInRegion(x,Mongolregion))", "prediction": ["AmosDementjevi(MongolRegion)", "AMENATORUS_DEMENTJEVII (LivingRegion(a) & Moorgol(a))", "All x.(MongolRegion(x) -> AmbiorusDementjeviPhone(x))", "All x y.((MongolRegion(x) & AmbiorusDementjevi(y)) -> LivedIn(x,y))", "all x.(MongolRegion(x) -> LivedBetweenAmbiorusDementjeviAndMongol(x))", "All x.(MongolRegion(x) -> AmbiorusDementjevi(x))", "all x y.((MongolRegion(x) & AmbiorusDementjevi(y)) -> LivedIn(x,y))", "It cranked out the place where Ambiorus Dementjevi lived in.", "all x y.((MongolRegion(x) & AmbiorusDementjevi(y)) -> Lived(x,y))", "La MongolRegion (Mountain(Mountain) & AmbiorusDementjevi(Mountain))", "All x.(MongolRegion(x) -> LocatedIn(x,AmbiorusDementjevi))", "Der MongolRegion(Mongol) -> AmbiorusDementjevi(Mongol))", "All x.(MongolRegion(x) -> AmbiorusDementjevi(x))", "The MongolRegion was where AmbiorusDementjeviLiked(Mongol,CurrentExperience))", "All x.(MongolOrgan(x) -> AmbiorusDementjevi(x))", "All x.(MongolRegion(x) -> AmbiorusDementjeviLiving(x))"]}
{"id": "folio_train_362", "nl": "Yevgeny Kurochkin was the discoverer of Ambiortus.", "fol": "DiscovererOf(Yevgenykurochkin,Ambiortus)", "prediction": ["Yevgeny Kurochkin was the discoverer of Ambiortus.", "Yevgeny Kurochkin was the discoverer of Ambiortus.", "Yevgeny Kurochkin, discoverer of Albortus.", "Yevgeniy Kurochkin was the discoverer of Ambiortus.", "Yevgeny Kurochkin was DiscovererOfAmbiortus.", "Yevgeny Kurochkin (DiscovererOfAmbiortus))", "Yevgeny Kurochkin (DestinatorOfAmbiortus)", "Yevgeny Kurochkin (or Ambiortus(x))", "Yevgeny Kurochkin was the DiscovererOfAmbiortus.", "Yevgeny Kurochkin was DiscovererOfAmbiortus.", "Yevgeny Kurochkin & Ambiortus(x))", "Yevgeny Kurochkin was the DiscovererOfAmbiortus.", "Yevgeny Kurochkin a.(DiscovererOfAmbiortus)", "Yevgeny Kurochkin was the discoverer of Ambiortus.", "Yevgeny Kurochkin (\"DestinatorOfAmbiortus\"))", "Yevgeny Kurochkin was the DiscovererOfAmbiortus(x))"]}
{"id": "folio_train_363", "nl": "Yevgeny Kurochkin discovered a new bird genus.", "fol": "exists x.(IsBirdGenus(x) & DiscovererOf(Yevgenykurochkin,x))", "prediction": ["Yevgeny Kurochkin discovered a new birdgenus.", "Yevgeny Kurochkin discovered a new birdgenus.", "Yevgeny Kurochkin discovered new birdgenus.", "Yevgeny Kurochkin(e) & NewBirdGenus(e))", "Yevgeny Kurochkin discovered a new birdgenus.", "Yevgeny Kurochkin (discoveredNewBirdGenus))", "all x y.((EvegenyKurochkin(x) & BirdGenus(y)) -> Discovered(x,y))", "Yevgeny Kurochkin discovered a new birdgenus.", "Yevgeny Kurochkin discovered new birdgenus.", "Yevgeny Kurochkin entdecktesNewBirdGenus(x))", "Yevgeny Kurochkin discovered a new birdgenus.", "Yevgeny Kurochkin discovered new BirdGenus.", "Yevgeny Kurochkin discovered new birdgenus.", "Yevgeny Kurochkin discovered a new birdgenus.", "Yevgeny Kurochkin discovered new birdgenus.", "Yevgeny Kurochkin \u2014 DiscoveredNewBirdGenus."]}
{"id": "folio_train_364", "nl": "There is a species of Ambiortus that doesn't live in the Mongol region.", "fol": "exists x.(IsSpeciesOf(x,Ambiortus) & -LivedInRegion(x,Mongolregion))", "prediction": ["exists x.(Ambiortus(x) & -LivingInMongolRegion(x))", "exists x.(StrandOfAmbiortus(x) & -LivesInMongolRegion(x))", "exists x.(Ambiortus(x) & -LivingInMongolRegion(x))", "exists x.(Ambiortus(x) & -LakeMongol(x))", "exists x.(Ambiortus(x) & -LivesInMongolRegion(x))", "exists x.(AmbiortusSpecies(x) & -LivesInMongolRegion(x))", "exists x.(Ambiortus(x) & -Living(x,MongolRiver))", "exists x.(Ambiortus(x) & -Regime(x) & Mongol(x))", "exists x.(Ambiortus(x) & -LadiesAtMongolRegion(x))", "exists x.(Ambiortus(x) & -MongolRegion(x))", "exists x.(Ambiortus(x) & -MongolRegion(x))", "exists x.(Ambiortus(x) & -LivesInMongolRegion(x))", "exists x.(Ambiortus(x) & -ResidenceMungol(x))", "exists x.(Ambiortus(x) & -MongolOrganic(x))", "exists x.((Ambiortus(x) & -LivingMongolRegion(x)) -> -ManaguresMongolRegion(x))", "exists x.(Ambiortus(x) & -LivesInMongolRegion(x))"]}
{"id": "folio_train_365", "nl": "Yevgeny Kurochkin lived in the Mongol region.", "fol": "LivedInRegion(Yevgenykurochkin,Mongolregion)", "prediction": ["Yevgeny Kurochkin lived in MongolRegion.", "Yevgeny Kurochkin liase in MongolRegion.", "all x.((YevgenyKurochkin(x) & MongolRegion(x)) -> LivedIn(x,y))", "all x y.((EvgenyKurochkin(x) & MongolRegion(y)) -> LivesIn(x,y))", "Yevgeny Kurochkin grew up in the MongolRegion (Mongol(Kurochkin) & livedIn(Kurochkin,Mongol))", "Yevgeny Kurochkin (-LivingInMongolRegion(Y))", "((Yevgeny Kurochkin,MongolRegion)) -> LivedIn(Yevgeny Kurochkin,Mongol))", "(LikedInMongolRegion(y) & YevgenyKurochkin(y))", "Yevgeny Kurochkin (livedInMongolRegion)", "-Regination(Karochkin,Yevgeny)", "all x.((EvgenyKerochkin(x) & MongolRegion(x)) -> LivedIn(x,z))", "(LeitungsRegime(Evgeny Kurochkin)", "Yevgeny Kurochkin & MongolRegionLivedIn(Yevgeny,Kurochkin,Darwin))", "Yevgeny Kurochkin lived in MongolRegion.", "(LivingInMongolRegency(Evgeny Kurochkin) -> LivedInMongolRegion(Evgeny Kurochkin))", "Yevgeny Kurochkin specialized in Mongolia."]}
{"id": "folio_train_366", "nl": "All species of Ambiortus live in the Mongol region.", "fol": "all x.(IsSpeciesOf(x,Ambiortus) -> LivedInRegion(x,Mongolregion))", "prediction": ["all x.(Ambiortus(x) -> LivesInMongolRegion(x))", "all x.(Ambiortus(x) -> LivesInMongolRegion(x))", "all x.(Ambiortus(x) -> LivesInMongolRegion(x))", "all x.(Ambiortus(x) -> LivesInMongolRegion(x))", "all x.(Ambiortus(x) -> LivesInMongolRegion(x))", "all x.(Ambiortus(x) -> LivesInMongolRegion(x))", "all x.(Ambiortus(x) -> LivingInMongolRegion(x))", "all x.(Ambiortus(x) -> LivesInMongolRegion(x))", "all x.(Ambiortus(x) -> LivesInMongolRegion(x))", "all x.(Ambiortus(x) -> LivesInMongolRegion(x))", "all x.(Ambiortus(x) -> LivesInMongolRegion(x))", "all x.(Ambiortus(x) -> LivesInMongolRegion(x))", "all x.(Ambiortus(x) -> LivesInMongolRegion(x))", "all x.(Ambiortus(x) -> LivesInMongolRegion(x))", "all x.(Ambiortus(x) -> LivesInMongolRegion(x))", "all x y.((AmbiortusSpecies(x) & MongolRegion(y)) -> LivesIn(x,y))"]}
{"id": "folio_train_367", "nl": "Everyone that uses a football can throw a football.", "fol": "all x.(UsesFootball(x) -> ThrowsFootball(x))", "prediction": ["all x.((Uses(x,Football)) -> CanThrew(x,Football))", "all x.((UsesFootball(x) & ThrowsFootball(x)) -> CanThrewFootball(x))", "all x.((UsesFootball(x) & ThrowsFootball(x)) -> CanTweak(x))", "all x.((UsesFootball(x) & ThrowsFootball(x)) -> CanThrewFootball(x))", "all x.((UsesFootball(x) & HasFootball(x)) -> ThrowsFootball(x))", "all x.((UsesFootball(x) & ThrowsFootball(x)) -> CanThrewFootball(x))", "all x.((UsesFootball(x) & ThrowsFootball(x)) -> CanThrewFootball(x))", "all x.((UsesFootball(x) & ThrowsFootball(x)) -> CanThrewFootball(x))", "all x.((UsesFootball(x) & ThrowsField(x)) -> CanThrewFootball(x))", "all x.((UsesFootball(x) & ThrowsFootball(x)) -> CanThrewFootball(x))", "all x.((UsesFootball(x) & ThrowsFootball(x)) -> CanTwist(x))", "all x.((UsesFootball(x) & ThrowsFootball(x)) -> CanThrew(x))", "all x.((UsesFootball(x) & ThrowsFootball(x)) -> CanTwerp(x))", "all x.((UsesFootball(x) & ThrowsFootball(x)) -> CanThrewFootball(x))", "all x.((UsesFootball(x) & ThrowsFootball(x)) -> CanThrewFootball(x))", "all x.((Uses(x,Football) & Uses(x,Football)) -> ThrowsFootball(x))"]}
{"id": "folio_train_368", "nl": "If someone plays football, then they use a football.", "fol": "all x.(PlaysFootball(x) -> UsesFootball(x))", "prediction": ["all x y z.(PlaysFootball(x) -> UsesFootball(x))", "all x.(PlaysFootball(x) -> UsesFootball(x))", "all x.(PlaysFootball(x) -> UsesFootball(x))", "all x.(PlaysFootball(x) -> UsesFootball(x))", "all x.(PlaysFootball(x) -> UsesFootball(x))", "all x.(Plays(x,football) -> Uses(x,football))", "all x.((PlaysFu\u00dfball(x) & UsesFootball(x)) -> PlaysFu\u00dfball(x))", "all x.((PlaysFootball(x) & UsesFootball(x)) -> PlaysFootball(x))", "all x.(PlaysFootball(x) -> UsesFootball(x))", "exists x.(PlaysFalcony(x) & UsedBy(x))", "all x.((PlaysFootball(x) & Football(x)) -> Uses(x,Football))", "all x.(PlaysFootball(x) -> UsesFootball(x))", "all x.(PlaysFunction(x) -> UsesFootball(x))", "all x.(PlaysFootball(x) -> UsesFootball(x))", "all x.(PlaysFootball(x) -> UsesFootball(x))", "all x.(PlaysFootball(x) -> UsesFootball(x))"]}
{"id": "folio_train_369", "nl": "Either someone is a football player or a basketball player.", "fol": "all x.(IsBasketballPlayer(x) | PlaysFootball(x))", "prediction": ["all x.((Person(x) & FootballPlayer(x)) | BasketballPlayer(x))", "exists x.(FootballPlayer(x) | BasketballPlayer(x))", "exists x.(Player(x) & (FootballPlayer(x) | BasketballPlayer(x)))", "all x.(FootballPlayer(x) | BasketballPlayer(x))", "all x.(FootballPlayer(x) | BasketballPlayer(x))", "all x.((FootballPlayer(x) | BasketballPlayer(x)) -> AvailableToPlay(x))", "exists x.(FootballPlayer(x) | BasketballPlayer(x))", "all x.(FootballPlayer(x) | BasketballPlayer(x))", "all x.(FootballPerson(x) | BasketballPlayer(x))", "all x.(FootballPlayer(x) | BasketballPlayer(x))", "(FootballPlayer(x) | BasketballPlayer(x))", "all x.(FootballPlayer(x) | BasketballPlayer(x))", "exists x.(Player(x) & (FieldPlayer(x) | BasketballPlayer(x)))", "exists x.(FootballPlayer(x) | BasketballPlayer(x))", "all x.((Person(x) & (FootballPlayer(x) | BasketballPlayer(x))) -> Players(x))", "(exists x.(FootballPlayer(x) | BasketballPlayer(x)))"]}
{"id": "folio_train_370", "nl": "Every basketball player is tall.", "fol": "all x.(IsBasketballPlayer(x) -> IsTall(x))", "prediction": ["all x.(BasketballPlayer(x) -> Tall(x))", "all x.(BasketballPlayer(x) -> Tall(x))", "all x.(BasketballPlayer(x) -> Tall(x))", "all x.(BasketballPlayer(x) -> Tall(x))", "(All x.(BasketballPlayer(x) -> Tall(x)))", "all x.(BasketballPlayer(x) -> Tall(x))", "all x.(BasketballPlayer(x) -> Tall(x))", "all x.(BasketballPlayer(x) -> Tall(x))", "all x.(BasketballPlayer(x) -> Tall(x))", "all x.(BasketballPlayer(x) -> Tall(x))", "all x.(BasketballPlayer(x) -> Tall(x))", "all x.(BasketballPlayer(x) -> Tall(x))", "all x.(BasketballPlayer(x) -> Tall(x))", "all x.(BasketballPlayer(x) -> Tall(x))", "all x.(BasketballPlayer(x) -> Tall(x))", "all x.(BasketballPlayer(x) -> Tall(x))"]}
{"id": "folio_train_371", "nl": "Everyone that can throw a football can throw a football with a spiral.", "fol": "all x.(ThrowsFootball(x) -> ThrowsFootballWithSpiral(x))", "prediction": ["all x.((CanThrowFootball(x)) -> ThrowSpiralFootball(x))", "all x.(Threw(x,football) -> Throw(x,football,spiral))", "all x.((TowsFootball(x) & ThrowsFootballWithSpiral(x)) -> ThrowsFootballWithSpiral(x))", "all x.((CanThrewFootball(x) & HasSpiral(x)) -> CanThrewFootballWithSpiral(x))", "all x.((CanThreatFootball(x) & Spiral(x)) -> ThrowsFootball(x))", "all x.((CanThrewFootball(x) & HasSpiral(x)) -> CanThrewFootballWithSpiral(x))", "all x.(CanTwistsFootball(x) -> CanTwistWithSpiral(x))", "all x.(Capable(x) -> ThrowsFootball(x))", "all x.((CanThrewFootball(x) & HasSpiral(x)) -> CanThrewFootballWithSpiral(x))", "all x.((CanTwerFootball(x) & ThrowsFootball(x)) -> ThrowsFootballWithSpiral(x))", "all x.((CanThrewFootball(x) & HasSpiral(x)) -> CanThrewFootballWithSpiral(x))", "all x.((CanTwerFootball(x) & HasSpiral(x)) -> CanTwerFootballWithSpiral(x))", "all x.((CanWait(x) & Football(x)) -> CanWaitWithSpiral(x))", "all x.((CanTwerFootball(x) & Spiral(x)) -> ThrowFootball(x))", "all x.((CanTwist(x) & Football(x)) -> ThrowsWithSpiral(x))", "all x.((CanTwistFootball(x) & ThrowFootballWithSpiral(x)) -> ThrowFootballWithSpiral(x))"]}
{"id": "folio_train_372", "nl": "If someone is tall, then they are in shape.", "fol": "all x.(IsTall(x) -> IsInShape(x))", "prediction": ["all x.((Tall(x) & Tall(x)) -> InShape(x))", "all x.(Tall(x) -> InShape(x))", "all x.((Tall(x) & InShape(x)) -> Tall(x))", "all x.(Tall(x) -> Shape(x))", "all x.(Tall(x) -> Shape(x))", "all x.((Tall(x) -> InShape(x))", "all x.(Tall(x) -> InShape(x))", "all x.((Tall(x) & InShape(x)) -> Tall(x))", "all x.((Tall(x) & Shape(x)) -> Tall(x))", "all x.(Tall(x) -> InShape(x))", "all x.(Tall(x) -> Shape(x))", "all x.((Tall(x) -> Shape(x))", "all x.(Tall(x) -> InShape(x))", "all x.(Tall(x) -> InShape(x))", "all x.(Tall(x) -> Shape(x))", "all x.(Tall(x) -> InShape(x))"]}
{"id": "folio_train_373", "nl": "If Jack is neither tall nor a basketball player,  then Jack is neither tall nor can throw a football.", "fol": "((-IsTall(Jack) & -IsBasketballPlayer(Jack)) -> (-IsTall(Jack) & -ThrowsFootball(Jack)))", "prediction": ["all x.((Jack(x) & -Tall(x) & -BasketballPlayer(x)) -> -Tall(x) & -CanThrowFootball(x))", "all x.((Jack(x) & -Tall(x) & -BallroomPlayer(x)) -> (-Tall(x) & -CanTwistFootball(x)))", "all x.((Tall(x) & -BasketballPlayer(x)) -> (-Tall(x) & -CanThrowFootball(x)))", "all x.((Jack(x) & -Tall(x) (-BasketballPlayer(x))) -> (-Tall(x) | -CanThrewFootball(x)))", "all x.((Jack(x) & -Tall(x) & -BasketballPlayer(x)) -> -Tall(x) & -CanThrewFootball(x))", "all x.((Jack(x) & -(Tall(x) | BasketballPlayer(x))) -> (-Tall(x) & -CanThrowFootball(x)))", "all x.((Jack(x) & -(Tall(x) | BasketballPlayer(x))) -> (-Tall(x) & -CanThrewFootball(x)))", "all x.((Jack(x) & -Tall(x) & -BasketballPlayer(x)) -> (-Tall(x) & -CanTwistFootball(x)))", "all x.((Jack(x) & -Tall(x) & -BasketballPlayer(x)) -> (-Tall(x) | -CanThrewFootball(x)))", "all x.((Jack(x) & -Tall(x) & -BasketballPlayer(x)) -> -Tall(x) & -CanTwistFootball(x))", "all x.((Jack(x) & -Tall(x) & -BasketballPlayer(x)) -> (-Tall(x) & -CanTurnFootball(x)))", "all x.((Jack(x) & -Tall(x) & -BasketballPlayer(x)) -> NeitherTall(x) & -CanThrewFootball(x))", "all x.((Jack(x) & -Tall(x)) -> -BasketballPlayer(x))", "all x.((Jack(x) & -Tall(x) | BasketballPlayer(x)) -> NullTall(x) & -TweresFootball(x))", "all x.((Jack(x) & -(Tall(x) | BasketballPlayer(x))) -> -(Tall(x) & CanTwistFootball(x)))", "all x.((Jack(x) & -Tall(x) & -BasketballPlayer(x)) -> -(Tall(x) | CanThrewFootball(x)))"]}
{"id": "folio_train_374", "nl": "Jack plays football.", "fol": "PlaysFootball(Jack)", "prediction": ["Jack playsfield(Jack)", "Jack plays Football.", "(PlaysFootball(Jack))", "(PlaysFootball(jack)", "(Plays(Jack) & Football(Jack))", "Jack plays football.", "(plays(Jack,FL) & Football(Jack))", "Jack plays football.", "Jack PlaysFootball(jack,x)", "Jack plays football.", "JackPlaysFootball(jack)", "(PlaysFootball(Jack))", "Jack plays Football.", "(Plays(Jack,(Jack))", "(JackPlaysFootball(Jack))", "(plays(Jack) | Football(Jack)))"]}
{"id": "folio_train_375", "nl": "Jack is in shape.", "fol": "IsInShape(Jack)", "prediction": ["Exists x.(Jack(x) & IsInShape(x))", "isInShape(Jack)", "isInShape(Jack)", "Jack is in Shape.", "exists x.(Jack(x) & InShape(x))", "(InShape(Jack))", "IsShape(Jack)", "all x.(Jack(x) -> InShape(x))", "(InShape(Jack)\"", "It is in Shape.", "(inShape(Jack))", "exists x.(Jack(x) & Shape(x))", "exists x.(Jack(x) & InShape(x))", "exists x.(Jack(x) & Shape(x))", "All x.((Jack(x) & HasShape(x)) -> InShape(x))", "Jack is inShape."]}
{"id": "folio_train_376", "nl": "Jack is not in shape.", "fol": "-IsInShape(Jack)", "prediction": ["All x.(Jack(x) -> -Shape(x))", "-Shape(Jack)", "(-Shape(Jack))", "all x.(Jack(x) -> -InShape(x))", "Jack is notinshape.", "all x.(Jack(x) -> -InShape(x))", "-Shape(Jack)", "(-Shape(Jack))", "-ShapeOnJack(Jack)", "-Shape(Jack)", "-Shape(Jack)", "(-InShape(Jack))", "-Shape-in-Jack(Jack)", "-Shape(Jack)", "IsShape(Jack)?", "-Shape(Jack)"]}
{"id": "folio_train_377", "nl": "Fort Ticonderoga is the current name for Fort Carillon.", "fol": "IsCurrentNameFor(Fortticonderoga,Fortcarillon)", "prediction": ["FortTiconderoga iscurrentNameForFortCarillon(Clermont)", "FortTiconderoga(FortCarillon)", "(currentlyFortTiconderoga(FortCarillon))", "FortTiconderoga is the currentNameForFortCarillon.", "FortTiconderoga is the currentNameForFortCarillon(x) -> CurrentNameForFortCarillon(x))", "FortTiconderoga is the current name for FortCarillon.", "the current name for FortCarillon.", "FortTiconderoga is the CurrentNameForFortCarillon(x))", "FortTiconderoga is the currentnameForFortCarillon.", "FortTiconderoga (currentNameForFortCarillon))", "FortTiconderoga(x) & FortCarillon(x))", "FortTiconderoga (currentlyFortCarillon)", "CurrentNameForFortCarillon(FrontTiconderoga)", "Tildenoga (Fort(t) & FortCarillon(x))", "FortTiconderoga is the currentNameForFortCarillon(x))", "FortTiconderoga(en) -> ActualNameForFortCarillon(en))"]}
{"id": "folio_train_378", "nl": "Pierre de Rigaud de Vaudreuil built Fort Carillon.", "fol": "ConstructedBy(Pierrederigauddevaudreuil,Fortcarillon)", "prediction": ["Pierre de Rigaud de Vaudreuil built Fort Carillon.", "Pierre de Rigaud de Vaudreuil built Fort Carillon.", "Pierre de Rigaud de Vaudreuil built FortCarillon.", "Pierre de Rigaud de Vaudreuil built FortCarillon.", "Pierre DeRigaudDeVaudreuil (builtFortCarillon)", "Pierre de Rigaud de Vaudreuil built Fort Carillon.", "Pierre de Rigaud de Vaudreuil built Fort Carillon.", "Pierre de Rigaud de Vaudreuil built Fort Carillon.", "Pierre de Rigaud de Vaudreuil built Fort Carillon.", "Pierre de Rigaud de Vaudreuil built Fort Carillon.", "Pierre de Rigaud de Vaudreuil hat Carillon errichtet.", "Pierre de Rigaud de Vaudreuil a continuated building Fort Carillon.", "all x.((Pierre de RigaudDeVudreuilBuildedFortCarillon(x)) -> - BuiltInFortCarillon(x))", "Pierre d\u2019RigaudDeVaudreuil(d) builtFortCarillon(d))", "Pierre de Rigaud de Vaudreuil a construit Fort Carillon.", "Pierre de RigauddeVaudreuil builtFortCarillon."]}
{"id": "folio_train_379", "nl": "Fort Carillon was located in New France.", "fol": "IsLocatedIn(Fortcarillon,Newfrance)", "prediction": ["FortCarillon(e) LocatedInNewFrance(e)", "Fort Carillon,NewFrance(o)", "FortCarillon is located in NewFrance.", "FortCarillon was located in NewFrance.", "FortCarillon is located en Granada,France.", "FortCarillon\u00ae is located in NewFrance.", "FortCarillon was located in NewFrance.", "All x.(FortCarillon(x) -> NewFrance(x))", "DebutsFortCarillonInNewFrance.", "FortCarillon(FortFrance)", "FortCarillon was located in NewFrance.", "FortCarillon (OfFrance) LocatedIn(FortCarillon,France)", "FortCarillon was located in NewFrance(FortCarillon)", "FortCarillon was located in NewFrance.", "LocatedInNewFrance(FortCarillon)", "Fort Carillon - NewFrance(France)"]}
{"id": "folio_train_380", "nl": "New France is not in Europe.", "fol": "-IsLocatedIn(Newfrance,Europe)", "prediction": ["None-EuropeanNewFrance(NewFrance)", "-Europe(NewFrance)", "All x.(NewFrance(x) -> -InEurope(x))", "(-inEurope) -NewFrance(France))", "-(NewFrance(NewFrance) & InEurope(NewFrance))", "NewFrance.com -inEurope(newfrance)", "(NewFrance(n) & -(InEurope(n) | InEurope(n))))", "-Europe.", "(NewFrance) & -(InEurope(newFrance) | InEurope(newFrance))))", "All x.(NewFrance(x) -> -InEurope(x))", "(NewFrance (France) -> -InEurope(France))", "The NewFrance(n) isn'tInEurope(n))", "all x.(NewFrance(x) -> -InEurope(x))", "-InEurope(NewFrance)", "NewFrance(n) -> -InEurope(n))", "(-(NewFrance(x) & InEurope(x)))"]}
{"id": "folio_train_381", "nl": "Pierre de Rigaud de Vaudreuil built a fort in New France.", "fol": "exists f.(ConstructedBy(Pierrederigauddevaudreuil,f) & IsLocatedIn(f,Newfrance))", "prediction": ["Pierre-RigaudVaudreuil built FortRenning(PieceDirgaudVaudreuil)", "Pierre de Rigaud de Vaudreuil built a fort in NewFrance.", "all x y.((PierreDeRigaudDeVaudreuil(x) & NewFrance(y)) -> BuiltFort(x,y))", "(ConstructedByPierreDeRigaud(Pierre,Pi\u00e8ce) & InNewFrance(Pierre,Rigaud))", "Pierre de Rigaud de Vaudreuil, built a FortInNewFrance.", "all x.((Pierce(x) & Rigaud(x) & Vaudreuil(x)) -> BuiltFortInNewFrance(x))", "Pierre de Rigaud de Vaudreuil built in NewFrance.", "(BuildsFort(Pierre,DeRigaud,Vaudreuil) - NewFrance))", "Pierre de Rigaud de Vaudreuil built a fort in NewFrance.", "Pierre de Rigaud DeVaudreuil built a fort in NewFrance.", "all x y.((Fort(x) & Pierre deRigaud(y) & Vaudreuil(x)) -> BuiltInNewFrance(y))", "all x.((PieceDeRigaudDeVaudreuil(x) & BuiltFort(x)) -> NewFrance(x))", "the Fort is in NewFrance.", "Pierre de Rigaud de Vaudreuil built a fort in NewFrance.", "Pierre de Rigaud de Vaudreuil built a fort in NewFrance.", "Pierre de Rigaud de Vaudreuil built a fort in NewFrance."]}
{"id": "folio_train_382", "nl": "Pierre de Rigaud de Vaudreuil built a fort in New England.", "fol": "exists f.(ConstructedBy(Pierrederigauddevaudreuil,f) & IsLocatedIn(f,Newengland))", "prediction": ["all x y z.((PieceDeRigaudDeVaudreuil(x) & Fort(y) & NewEarth(z)) -> BuiltIn(x,y,z))", "Pierre de Rigaud de Vaudreuil built a fort in New England.", "Pierre de Rigaud de Vaudreuil built a fort in NewAngleterre.", "all x y.((PietrolldeDeRigaudVaudreuil(x) & NewEnglandFort(y)) -> BuiltIn(x,y))", "Pierre de Rigaud de Vaudreuil (builtfort) in New England.", "Pierre-deRigaud(Petersen) de Vaudreuil(Petersen) is founder of NewEnglandFort(p))", "Pierre de Rigaud de Vaudreuil built & In New England.", "(fort(PierceDeRigaudDeVaudreuil) & BuiltInNewEngland(PierceDeRigaudDeVaudreuil))", "all x y.((Piece(x) & Rigaud(y) & Vaudreuil(z)) -> BuiltFortInNewEngland(x,y,z))", "(BuildedBy(Pierre-Rigaud(Pierre) & InNewEngland(Pierre-Rigaud(Pierre))", "Pierre de Rigaud de Vaudreuil & BuiltFortInNewEngland.", "all x y.((Pierre de RigaudDeVaudreuil(x) & Fort(y)) -> BuiltInNewEntry(x,y))", "Pierre de Rigaud de Vaudreuil a building in New England.", "A newfort built by Pierre de Rigaud de Vaudreuil in New England.", "(built by Pierre deRigaud(Pierre,New England))", "Pierre de Rigaud DeVaudreuil a built a fort in New England."]}
{"id": "folio_train_383", "nl": "Fort Carillon was located in Europe.", "fol": "IsLocatedIn(Fortcarillon,Europe)", "prediction": ["(LikedInEurope(FortCarillon))", "FortCarillon(at) is located inEurope(at))", "(LocatedInEurope(FortCarillon)", "All x.(FortCarillon(x) -> LocationInEurope(x))", "(LocationInEurope,FortCarillon)", "(SituatedIn(FortCarillon,Europe) -> LocatedIn(FortCarillon,Europe))", "all x.(FortCascal(x) -> (LocatedInEurope(x)))", "all x.(FortCarillon(x) -> LocatedInEurope(x))", "FortCarillon was located in Europe.", "(Location(FortCarillon,Europe))", "All x.(FortCarillon(x) -> LocatedInEurope(x))", "FortCarillon is located in Europe.", "all x.(FortCarillon(x) -> LocatedIn(x,Europe))", "the.fortcarillon(fort) was located In(fort) Europe(fort))", "all x.(FortCarillon(x) -> LocatedInEurope(x))", "all x.(FortCarillon(x) -> IsLocatedInEurope(x))"]}
{"id": "folio_train_384", "nl": "No soccer players are professional basketball players.", "fol": "-exists x.(IsSoccerPlayer(x) & IsProfessionalBasketballPlayer(x))", "prediction": ["-exists x.(SoccerPlayer(x) & Pro FootballPlayer(x))", "all x.(SoccerPlayer(x) -> -ProfessionalBasketballPlayer(x))", "-exists x.(SoccerPlayer(x) & ProfessionalBasketballPlayer(x))", "-exists x.(SoccerPlayer(x) & ProfessionalBasketballPlayer(x))", "-exists x.(SoccerPlayer(x) & ProfessionalBasketballPlayer(x))", "-exists x.(SoccerPlayer(x) & ProfessionalBasketballPlayer(x))", "-exists x.(SoccerPerson(x) & ProfessionalBasketballPerson(x))", "-exists x.(SoccerPlayer(x) & ProfessionalBasketballPlayer(x))", "-exists x.(SoccerPlayer(x) & ProfessionalBasketballPlayer(x))", "-exists x.(SoccerPlayer(x) & ProfessionalBasketballPlayer(x))", "-exists x.(SoccerPlayer(x) & ProfessionalBasketballPlayer(x))", "-exists x.(SoccerPlayer(x) & ProfessionalBasketballPlayer(x))", "-exists x.(SoccerPlayer(x) & ProfessionalBasketballPlayer(x))", "-exists x.(SoccerPlayer(x) & ProfessionalBasketballPlayer(x))", "-exists x.(SoccerPlayer(x) & ProfessionalBasketballPlayer(x))", "-exists x.(SoccerPlayer(x) & ProfessionalBasketballPlayer(x))"]}
{"id": "folio_train_385", "nl": "All NBA players are professional basketball players.", "fol": "all x.(IsNBAPlayer(x) -> IsProfessionalBasketballPlayer(x))", "prediction": ["all x.(NBAPlayer(x) -> ProfessionalBoys(x))", "all x.(NBAPlayer(x) -> ProfessionalBasketballPlayer(x))", "all x.(NBAPlayer(x) -> ProfessionalBasketballPlayer(x))", "all x.(NBAPlayer(x) -> ProfessionalBasketballPlayer(x))", "all x.(NBAPlayer(x) -> ProfessionalBasketballPlayer(x))", "all x.(NBAPlayer(x) -> ProfessionalBasketballPlayer(x))", "all x.(NBAPlayer(x) -> ProfessionalBallroomPlayer(x))", "all x.(AnalysisPlayer(x) -> Professional(x))", "all x.(NBAPlayer(x) -> ProfessionalBasketballPlayer(x))", "all x.(NBAPlayer(x) -> ProfessionalBasketballPlayer(x))", "all x.(NBAPlayer(x) -> ProfessionalBalloonPlayer(x))", "all x.(NBAPlayer(x) -> ProfessionalBasketballPlayer(x))", "all x.(NBAPlayer(x) -> ProfessionalBasketballPlayer(x))", "all x.((NBAPlayer(x) & Professional(x)) -> Professional(x))", "all x.(NBAPlayer(x) -> ProfessionalBalloonPlayer(x))", "all x.(NASAPlayer(x) -> ProfessionalBasketballPlayer(x))"]}
{"id": "folio_train_386", "nl": "All defenders are soccer players.", "fol": "all x.(IsDefender(x) -> IsSoccerPlayer(x))", "prediction": ["all x.(Defendant(x) -> SoccerPlayer(x))", "all x.(Defender(x) -> SoccerPlayer(x))", "all x.(Defendant(x) -> SoccerPlayer(x))", "all x.(Defendant(x) -> SoccerPlayer(x))", "all x.(Defender(x) -> SoccerPlayer(x))", "all x.(Defendant(x) -> SoccerPlayer(x))", "all x.(Defendant(x) -> SoccerPlayer(x))", "all x.(Defender(x) -> SoccerPlayer(x))", "all x.(Defendant(x) -> SoccerPlayer(x))", "all x.(Defendant(x) -> SoccerPlayer(x))", "all x.(Defender(x) -> SoccerPlayer(x))", "all x.(Defenser(x) -> SoccerPlayer(x))", "all x.(Defender(x) -> SoccerPlayer(x))", "all x.(Defendant(x) -> SoccerPlayer(x))", "all x.(Defender(x) -> SoccerPlayer(x))", "all x.(Defendant(x) -> SoccerPlayer(x))"]}
{"id": "folio_train_387", "nl": "All centerback players are defenders.", "fol": "all x.(IsCenterback(x) -> IsDefender(x))", "prediction": ["all x.(Centerback(x) -> Defender(x))", "all x.(CenterbackPlayer(x) -> Defender(x))", "all x.(CenterbackPlayer(x) -> Defender(x))", "all x.(CenterBackPlayer(x) -> Defender(x))", "all x.(CenterbackPlayer(x) -> DefensivePlayer(x))", "all x.(CenterbackPlayer(x) -> Defendant(x))", "all x.(Centerback(x) -> Defender(x))", "all x.(CenterBackPlayer(x) -> Defender(x))", "all x.(CenterbackPlayer(x) -> Defender(x))", "all x.(CenterBackPlayer(x) -> Defender(x))", "all x.(Centerback(x) -> Defender(x))", "all x.(CenterbackPlayer(x) -> Defender(x))", "all x.(CenterbackPlayer(x) -> Defender(x))", "all x.(CentrebackPlayer(x) -> Defender(x))", "all x.(CenterbackPlayer(x) -> Defendant(x))", "all x.(CenterbackPlayer(x) -> Defender(x))"]}
{"id": "folio_train_388", "nl": "If Stephen Curry is an NBA player or a soccer player, then he is a professional basketball player.", "fol": "(((IsNBAPlayer(Stephencurry) & -IsSoccerPlayer(Stephencurry)) | (-IsNBAPlayer(Stephencurry) & IsSoccerPlayer(Stephencurry))) -> IsProfessionalBasketballPlayer(Stephencurry))", "prediction": ["all x.((StephenCurry(x) & (NBAPlayer(x) | SoccerPlayer(x))) -> ProfessionalBasketballPlayer(x))", "all x.((StanleyCurry(x) & (NBAPlayer(x) | SoccerPlayer(x))) -> ProfessionalBasketballPlayer(x))", "all x.((StephenCurry(x) & (NABPlayer(x) | SoccerPlayer(x))) -> ProfessionalBasketballPlayer(x))", "all x.((StephenCurry(x) & NBAPlayer(x)) | SoccerPlayer(x)) -> ProfessionalBasketballPlayer(x))", "all x.((StephenCurry(x) & ( NBAPlayer(x) | SoccerPlayer(x))) -> ProfessionalBasketballPlayer(x))", "all x.((SonyCurrant(x) & (NBAPlayer(x) | SoccerPlayer(x))) -> ProfessionalBasketballPlayer(x))", "all x.((StephenCurry(x) & (NBAPlayer(x) | SoccerPlayer(x))) -> ProfessionalBasketballPlayer(x))", "all x.((StephenCurry(x) & (NBAPlayer(x) | SoccerPlayer(x))) -> ProfessionalBasketballPlayer(x))", "all x.(((StephenCurry(x) | SoccerPlayer(x)) & NBAPlayer(x)) -> ProfessionalBasketballPlayer(x))", "all x.((StephenCurry(x) & (NBAPlayer(x) | SoccerPlayer(x))) -> ProfessionalBasketballPlayer(x))", "all x.((StephenCurry(x) & (NBAPlayer(x) | SoccerPlayer(x))) -> ProfessionalBasketballPlayer(x))", "all x.((StephenCurry(x) & (NBAPlayer(x) | SoccerPlayer(x))) -> ProfessionalBasketballPlayer(x))", "all x.((StephenCurry(x) & NBAPlayer(x) | SoccerPlayer(x)) -> ProfessionalBasketballPlayer(x))", "all x.((ScandalChurch(x) & ( NBAPlayer(x) | SoccerPlayer(x))) -> ProfessionalBasketballPlayer(x))", "all x.((StephenCurier(x) & (NBAPlayer(x) | SoccerPlayer(x))) -> ProfessionalBasketballPlayer(x))", "all x.((StephenCurry(x) & ( NBAPlayer(x) | SoccerPlayer(x))) -> ProfessionalBasketballPlayer(x))"]}
{"id": "folio_train_389", "nl": "Stephen Curry is an NBA player.", "fol": "IsNBAPlayer(Stephencurry)", "prediction": ["(Athlete(StephenCurry) & NBAPlayer(StephenCurry))", "Stephen Curry (born April 2, 1942) & NBAPlayer(k))", "StephenCurry(StanleyCurry)", "all x.(StarTeacher(x) -> NBAPlayer(x))", "StephenCurry(StephenCurry) is NBAPlayer(StephenCurry)", "NBAPlayer(StephenCurry)", "All x.((StephenCurry(x) & NBAPlayer(x)) -> NBAPlayer(x))", "(NBAplayer(StephenCurry))", "(all x.((StoopieCurrent(x) & NBAPlayer(x)) -> NBAPlayer(x)))", "StephenCurry(StephenCurry) is NBAPlayer(StephenCurry)", "Stephen Curry - NBAPlayer(StephenCurry)", "exists x.(Kingdom(x) & NBAPlayer(x))", "(NBAPlayer(StephenCurry))", "Stephen Curry ((PlayerInNBA(StanleyCrown)) -> NBA(Kurry))", "StephenCurry (NBAPlayer)", "(Athlete(StephenCurry,NBA) -> NBAPlayer(StephenCurry))"]}
{"id": "folio_train_390", "nl": "Stephen Curry is a centerback player.", "fol": "IsCenterback(Stephencurry)", "prediction": ["all x.((StephenCurry(x) & CenterBackPlayer(x)) -> CenterbackPlayer(x))", "all x.((StephenCurry(x) & CenterbackPlayer(x)) -> InPlay(x,y))", "all x y.((Curry(x) & Centerback(y)) -> CenterbackPlayer(x))", "(Curry(Stephen) -> CenterbackPlayer(Stephen))", "all x.((Stop(x) & CenterbackPlayer(x)) -> StephenCurry(x))", "Stephen Curry is CenterbackPlayer(StephenCurry)", "All x.((StephenCurry(x) & CenterbackPlayer(x)) -> PlaysCenterback(x))", "(CenterbackPlayer(StephenCurry))", "all x.((StephenCurry(x) & CenterbackPlayer(x)) -> Playing(x,Curry))", "all x.((StanleyCurry(x) & CenterbackPlayer(x)) -> CRUSHED(x))", "(Centerback(StephenCurry))", "(HelenCurry(StephenCurier) -> CenterbackPlayer(StephenCurier))", "Stephen Curry is a CenterbackPlayer.", "StephenCurry(StephenCurry) is a CenterbackPlayer(StephenCurry)", "(CenterbackPlayer(StephenCurry))", "all x.((Currant(x) & CenterbackPlayer(x)) -> StephenCurry(x))"]}
{"id": "folio_train_391", "nl": "Stephen Curry is not a centerback player.", "fol": "-IsCenterback(Stephencurry)", "prediction": ["all x.(Crowd(x) -> -CenterbackPlayer(x))", "(-CenterbackPlayer(StephenCurry))", "(-centerbackPlayer(StephenCurry))", "StephenCurry(StephenCurry) & -Centerback(Curry))", "(-CenterBackPlayer(StephenCurry))", "StephenCurry isn'tCenterbackPlayer(StephenCurry)", "-CenterbackPlayer(StephenCurry)", "all x.((StanleyCurry(x) & -CenterbackPlayer(x)) -> -Curryplayer(x))", "Stephen Curry is not a centerback player.", "all x.((StephenCurry(x) & -CenterBackPlayer(x)) -> - CenterbackPlayer(x))", "all x.((StephenCurry(x) & -CenterbackPlayer(x)) -> -CenterbackPlayer(x))", "(-CenterbackPlayer(StephenCurry))", "all x.(Curry(x) -> -CenterBackPlayer(x))", "is notCenterbackPlayer(StephenCurry)", "(-centerbackPlayer(StephenCurry))", "(-centerbackPlayer(StephenCurry))"]}
{"id": "folio_train_392", "nl": "No songs are visual. ", "fol": "all x.(IsSong(x) -> -IsVisual(x))", "prediction": ["-exists x.(Song(x) & Visual(x))", "-exists x.(Song(x) & Visual(x))", "-exists x.(Song(x) & Visual(x))", "-exists x.(Song(x) & Visual(x))", "-exists x.(Song(x) & Visual(x))", "-exists x.(Song(x) & Visual(x))", "-exists x.(Song(x) & Visual(x))", "All x.(Song(x) -> -Visual(x))", "-exists x.(Song(x) & Visual(x))", "-exists x.(Song(x) & Visual(x))", "-exists x.(Song(x) & Visual(x))", "-exists x.(Song(x) & Visual(x))", "-exists x.(Song(x) & Visual(x))", "-exists x.(Song(x) & Visible(x))", "all x.(Song(x) -> -Visual(x))", "-exists x.(Song(x) & Visual(x))"]}
{"id": "folio_train_393", "nl": "All folk songs are songs. ", "fol": "all x.(IsFolkSong(x) -> IsSong(x))", "prediction": ["all x.(FolkSong(x) -> Song(x))", "all x.(FolkSong(x) -> Songs(x))", "all x.(FolkSong(x) -> Song(x))", "all x.(FolkSong(x) -> Songs(x))", "all x.(FolkSong(x) -> Song(x))", "all x.(FolkSong(x) -> Song(x))", "all x.(FolkSong(x) -> Songs(x))", "all x.(FolkShadow(x) -> Songs(x))", "all x.(FolkSong(x) -> Songs(x))", "all x.(FolkSong(x) -> Song(x))", "all x.(FolkSong(x) -> Songs(x))", "all x.(FolkSong(x) -> Song(x))", "all x.(FolkSong(x) -> Songs(x))", "all x.(FolkSong(x) -> Song(x))", "all x.(FolkSong(x) -> Songs(x))", "all x.(FolkSong(x) -> Song(x))"]}
{"id": "folio_train_394", "nl": "All videos are visual. ", "fol": "all x.(IsVideo(x) -> IsVisual(x))", "prediction": ["all x.(Video(x) -> Visual(x))", "all x.(Video(x) -> Visual(x))", "all x.(Video(x) -> Visual(x))", "all x.(Video(x) -> Visual(x))", "all x.(Video(x) -> Visual(x))", "all x.(Video(x) -> Visual(x))", "all x.(Video(x) -> Visual(x))", "all x.(Video(x) -> Visual(x))", "all x.(Video(x) -> Visual(x))", "all x.(Video(x) -> Visual(x))", "all x.(Video(x) -> Visual(x))", "all x.(Video(x) -> Visual(x))", "all x.(Video(x) -> Visual(x))", "all x.(Video(x) -> Visual(x))", "(Visual(Video) & Visual(Video))", "all x.(Video(x) -> Visual(x))"]}
{"id": "folio_train_395", "nl": "All movies are videos.", "fol": "all x.(IsMovie(x) -> IsVideo(x))", "prediction": ["all x.(Movie(x) -> Video(x))", "all x.(Movie(x) -> Video(x))", "all x.(Movie(x) -> Video(x))", "all x.(Movie(x) -> Video(x))", "all x.(Movie(x) -> Video(x))", "all x.(Movie(x) -> Videos(x))", "all x.(Movie(x) -> Videos(x))", "all x.(Movie(x) -> Video(x))", "all x.(Movie(x) -> Video(x))", "all x.(Movie(x) -> Videos(x))", "all x.(Movie(x) -> Videos(x))", "all x.(Movie(x) -> Videos(x))", "all x.(Movie(x) -> Video(x))", "all x.(Movie(x) -> Video(x))", "all x.(Movie(x) -> Video(x))", "all x.(Movie(x) -> Videos(x))"]}
{"id": "folio_train_396", "nl": "All sci-fi movies are movies.", "fol": "all x.(IsScifiMovie(x) -> IsMovie(x))", "prediction": ["all x.(SciFiMovie(x) -> Movie(x))", "all x.(ScifiMovie(x) -> Movie(x))", "all x.((SciFiMovie(x) & Movie(x)) -> Movie(x))", "all x.(ScisFiFim(x) -> Movie(x))", "all x.(SciFiMovie(x) -> Movie(x))", "all x.((SciFi(x) & Movie(y)) -> Movie(y))", "all x.(SciFiMovie(x) -> Movie(x))", "all x.(ScifiMovie(x) -> Movie(x))", "all x.(ScisiFictionMovie(x) -> Movie(x))", "all x.(SciFiFilm(x) -> Movie(x))", "all x.(SciFiFilm(x) -> Movie(x))", "all x.(SciFi(x) -> Movie(x))", "all x.((SciFiMovie(x) & Movie(x)) -> Movie(x))", "all x.(SciFiFiMovie(x) -> Movie(x))", "all x.(SciFiMovie(x) -> Movie(x))", "all x.(SciFiMovie(x) -> Movie(x))"]}
{"id": "folio_train_397", "nl": "Inception is a sci-fi movie.", "fol": "IsScifiMovie(Inception)", "prediction": ["all x.((Inception(x) & SciFiMovie(x)) -> The Original(x))", "Inception is a sci-fiMovie.", "(ScifiMovie(inception) & SciFiMovie(inception))", "All x.(Inception(x) -> SciFiMovie(x))", "Inception is a sci-fi-Movie.", "Inception is a sci-fi movie.", "all x.(Inception(x) -> SciFiMovie(x))", "Inception is sci-fi movie.", "All x.(Inception(x) -> SciFiMovie(x))", "(SciFiMovie(Inception) & SciFiMovie(Inception))", "Esperance(Inception)", "(SciFi(Inception) & SciFiMovie(Inception))", "Movie(Inception)", "All x.(Inception(x) -> SciFiMovie(x))", "Inception is a sci-fi movie.", "Inception is a sci-fiMovie."]}
{"id": "folio_train_398", "nl": "Mac is neither a folk song nor a sci-fi movie.", "fol": "(-IsFolkSong(Mac) & -IsScifiMovie(Mac))", "prediction": ["(-(Mac(Mac) & FolkSong(Mac)) | SciFiMovie(Mac)))", "((Mac(Mac) & -FolkSong(mac)) | SciFiMovie(mac)))", "all x.(Mac(x) -> (FolkSong(x) & -SciFiMovie(x)))", "all x.(Mac(x) -> (-FolkSong(x) & -SciFiMovie(x)))", "iMac(i) -> (NeitherFloodSong(i) & -SciFiMovie(i)))", "(-FolkSong(Mac) & -SciFiMovie(Mac))", "is no FolkSong(Mac) & NoSciFiMovie(Mac))", "all x.(Mac(x) -> (NeeftySong(x) & -SciFiMovie(x)))", "-(Mac(Mac) & FolkSong(Mac)) & -SciFiMovie(Mac))", "-(FolkSong(Mac) & -SciFiMovie(Mac))", "-(Mac(mac) & FolkSong(mac) & -SciFiMovie(mac))", "all x.(Mac(x) -> (-FolkSong(x) & -SciFiMovie(x)))", "all x.(Mac(x) -> (-FolkSong(x) & -ScifiMovie(x)))", "-(FolkSong(Mac) & -SciFiMovie(Mac))", "-(Mac(Mac) & FolkSong(Mac)) & -(FolkSong(Mac) & SciFiMovie(Mac)))", "all x.(Mac(x) -> (-FolkSong(x) & -SciFiMovie(x)))"]}
{"id": "folio_train_399", "nl": "Inception is a folk song.", "fol": "IsFolkSong(Inception)", "prediction": ["The SongOfInception(x)", "all x.(Inception(x) -> FolkSong(x))", "All x.(Inception(x) -> FolkSong(x))", "All x.(Inception(x) -> FolkSong(x))", "(FolkSong(Inception) -> FolkSong(Inception))", "All x.(Inception(x) -> FolkSong(x))", "FolkSong(Inception)", "all x.(Principle(x) -> FolkSong(x))", "All x.(Inception(x) -> FolkSong(x))", "Inception is a folk song.", "All x.(Inception(x) -> FolkSong(x))", "(FolkSong(Inception)", "Inception is a folk song.", "all x.(Inception(x) -> Folk(x))", "All x.(Inception(x) -> FolkSong(x))", "Inception is folkysong(x)"]}
{"id": "folio_train_400", "nl": "Inception is not a folk song.", "fol": "-IsFolkSong(Inception)", "prediction": ["Inception is not a folk song.", "Inception - FolkSong(Inception)", "Inception & -FolkSong(Inception)", "Inception r.(RoyalSong(RoyalSong(RoyalSong))", "(FolkSong(Inception) & -Popular(Inception))", "Inception is not a folk song.", "(See MoreInception(Inception) & -FolkSong(Inception))", "Inception - FolkSong(Inception)", "All x.(Inception(x) -> -FolkSong(x))", "(FolkSong(Inception) & -FolkSong(Inception))", "Inception is not FolkSong(Inception)", "Inception - FolkSong(Inception)", "-FolkSong(inception)", "All x.(Inception(x) -> -FolkSong(x))", "is not folksong.", "Inception is not FolkSong."]}
{"id": "folio_train_401", "nl": "Inception is either a video or a folk song.", "fol": "(IsVideo(Inception) | IsFolkSong(Inception))", "prediction": ["all x.(Inception(x) -> (Video(x) | FolkSong(x)))", "all x.(Inception(x) -> (Video(x) | FolkSong(x)))", "all x.(Inception(x) -> (Video(x) | FolkSong(x)))", "all x.(Inception(x) -> (Video(x) | FolkSong(x)))", "all x.(Inception(x) -> (Video(x) | FolkSong(x)))", "all x.(Inception(x) -> (Video(x) | FolkSong(x)))", "all x.(Inception(x) -> (Video(x) | FolkSong(x)))", "exists x.(Inception(x) & (Video(x) | FolkSong(x)))", "all x.(Inception(x) -> (Video(x) | FolkSong(x)))", "all x.(Inception(x) -> (Video(x) | FolkSong(x)))", "all x.(Inception(x) -> (Video(x) | FolkSong(x)))", "all x.(Inception(x) -> (Video(x) | FolkSong(x)))", "all x.(Inception(x) -> (Video(x) | FolkSong(x)))", "(Video(Inception) | FolkSong(Inception))", "all x.(Inception(x) -> (Video(x) | FolkSong(x)))", "all x.(Inception(x) -> (Video(x) | FolkSong(x)))"]}
{"id": "folio_train_402", "nl": "Mac is a video.", "fol": "IsVideo(Mac)", "prediction": ["all x.(Mac(x) -> Video(x))", "all x.(Mac(x) -> Video(x))", "all x.(Mac(x) -> Video(x))", "all x.(Mac(x) -> Video(x))", "all x.(Mac(x) -> Video(x))", "all x.(Mac(x) -> Video(x))", "all x.(Mac(x) -> Video(x))", "all x.(Mac(x) -> Video(x))", "all x.(Mac(x) -> Video(x))", "all x.(Mac(x) -> Video(x))", "all x.(Mac(x) -> Video(x))", "all x.(Mac(x) -> Video(x))", "all x.(Mac(x) -> Video(x))", "all x.(Mac(x) -> Video(x))", "all x.(Mac(x) -> Video(x))", "all x.(Mac(x) -> Video(x))"]}
{"id": "folio_train_403", "nl": "All extroverts are overtly expressive.", "fol": "all x.(IsExtrovert(x) -> IsOvertlyExpressive(x))", "prediction": ["all x.(Extrovert(x) -> OvertlyExpressive(x))", "all x.(Extrovert(x) -> OvertlyExpressive(x))", "all x.(Extrovert(x) -> OvertlyExpressive(x))", "all x.(Extrovert(x) -> OvertlyExpressionative(x))", "all x.(Extrovert(x) -> OvertlyExpressive(x))", "all x.(Extrovert(x) -> OvertlyExpressive(x))", "all x.(Extrovert(x) -> OvertlyExpressive(x))", "all x.(Extrovert(x) -> OvertlyExpressive(x))", "all x.(Extrovert(x) -> OvertlyExpressive(x))", "all x.(Extrovert(x) -> OvertlyExpressive(x))", "all x.(Extrovert(x) -> OvertlyExplicit(x))", "all x.(Extrovert(x) -> OvertlyExpressive(x))", "all x.(Extrovert(x) -> OvertlyExpressive(x))", "all x.(Extrovert(x) -> OvertlyExpressive(x))", "all x.(Extrovert(x) -> OvertlyExpressive(x))", "all x.(Extrovert(x) -> OvertlyExpressive(x))"]}
{"id": "folio_train_404", "nl": "People are either extroverts or introverts.", "fol": "all x.(IsExtrovert(x) | IsIntrovert(x))", "prediction": ["all x.(Person(x) -> (Extrovert(x) | Introvert(x)))", "all x.(Person(x) -> (Extrovert(x) | Introvert(x)))", "all x.(Person(x) -> (Extrovert(x) | Introvert(x)))", "all x.(Person(x) -> (Extrovert(x) | Introvert(x)))", "all x.(Person(x) -> (Extrovert(x) | Introvert(x)))", "all x.(Person(x) -> (Extrovert(x) | Introvert(x)))", "all x.(Person(x) -> (Extrovert(x) | Introvert(x)))", "all x y.((Person(x) & Extrovert(y)) | Introvert(y))", "all x.(Person(x) -> (Extrovert(x) | Introvert(x)))", "all x.(Person(x) -> (Extrovert(x) | Introvert(x)))", "all x.(Person(x) -> (Extrovert(x) | Introvert(x)))", "all x.(Person(x) -> (Extrovert(x) | Introvert(x)))", "all x.(Person(x) -> (Extrovert(x) | Introvert(x)))", "all x.(Person(x) -> (Extrovert(x) | Introvert(x)))", "all x.(Person(x) -> (Extrovert(x) | Introvert(x)))", "all x.(Person(x) -> (Extrovert(x) | Introvert(x)))"]}
{"id": "folio_train_405", "nl": "If someone is an introvert, then they are shy and reticent. ", "fol": "all x.(IsIntrovert(x) -> IsShyAndReticent(x))", "prediction": ["all x.(Introvert(x) -> (Scary(x) & Reticent(x)))", "all x.(Introverted(x) -> (Shy(x) & Reticent(x)))", "all x.(Introvert(x) -> ShyAndReticent(x))", "all x.(Introvert(x) -> ShyAndReticent(x))", "all x.(Introvert(x) -> (Scary(x) & Reticent(x)))", "all x.(Introvert(x) -> (Shy(x) & Reticent(x)))", "all x.(Introverted(x) -> ShyAndReticent(x))", "all x.((Introvert(x) & Shy(x)) -> Reticent(x))", "all x.(Introverted(x) -> ShyAndRecent(x))", "all x.((Introvert(x) & Shy(x) & Reticent(x)) -> Introvert(x))", "all x.(Introvert(x) -> (Shy(x) & Reticulant(x)))", "all x.(Introvert(x) -> (Shy(x) & Reticent(x)))", "all x.(Introvert(x) -> (Shy(x) & Reticulent(x)))", "all x.(Introvert(x) -> (Shy(x) & Reticent(x)))", "all x.(Introvert(x) -> ShyAndRecent(x))", "all x.(Introvert(x) -> (Shy(x) & Reticent(x)))"]}
{"id": "folio_train_406", "nl": "No shy and reticent person likes to talk to strangers.", "fol": "all x.(IsShyAndReticent(x) -> -LikesToTalkToStrangers(x))", "prediction": ["-exists x.(Person(x) & Shy(x) & Reticent(x) & LikesToTalkToSonars(x))", "-exists x.(Shy(x) & Reticent(x) & Neighbor(x) & LikesTalkTo(x,s,z))", "-exists x.(Shy(x) & Reticent(x) & LikesToTalkToSnakes(x))", "-exists x.(Person(x) & Shy(x) & Reticent(x) & LikesToTalkToSnakes(x))", "-exists x.(Person(x) & Shy(x) & Reticent(x) & LikesToTalkToSnorers(x))", "all x.((Person(x) & Shy(x) & Reticent(x)) -> LikesToTalkToSurroundedPeople(x))", "(-exists x.(S shy(x) & Reticent(x)) & LikesToTalkToScandals(x))", "-all x.(Shy(x) & Reticent(x) -> LikesToTalkToSpokespeople(x))", "all x.(ShyAndReticentPerson(x) -> -LikesToTalkToSkeptics(x))", "-exists x.(Shy(x) & Reticent(x) & LikesTalkToS strangers(x))", "all x.((Person(x) & Shy(x) & Reticent(x)) -> LikesToTalkToStrongers(x))", "all x.((Shirky(x) | Reticent(x)) -> LikesToTalkToSurfers(x))", "all x.(ShyAndReticentPerson(x) -> LikesToTalkToSurfers(x))", "-exists x.(Scary(x) & Reticent(x) & LikesToTalkToStorms(x))", "all x.((Person(x) & Shy(x) & Reticent(x)) -> LikesToTalkToScary(x))", "-exists x.(Scary(x) & Reticent(x) & LikesToTalk(x))"]}
{"id": "folio_train_407", "nl": "Jeff is not an extrovert and someone who likes to talk to strangers.", "fol": "(-IsExtrovert(Jeff) & -LikesToTalkToStrangers(Jeff))", "prediction": ["all x.((Jeff(x) & NoExtrovert(x) & LikesToTalk(x)) -> -SharedExtrovert(x))", "Jeff -Extrovert(jeff) & LikesToTalkToSons(jeff))", "is a solitary person who likes to talk to strangers.", "-Extrovert(Jeff) & LikesToTalkToScientists(Jeff)", "thesis(Jeff)", "all x y.((Jeff(x) & Extrovert(x)) -> (-Extrovert(x) & LikesToTalkToScientists(x)))", "-Extrovert(Jeff) & likesToTalkToStrongers(Jeff))", "(-Extrovert(Jeff) & LikesToTalkToScaries(Jeff))", "(-Extrovert(Jeff) & likesToTalkToSonders(Jeff))", "-extrovert(Jeff) & likesToTalkToShadows(Jeff)", "(-Extrovert(Jeff) & LikesToTalkToStrongers(Jeff))", "He is not an extrovertand. Jeff likes toTalkToSignificantSnitches(Jefferson)", "Jeff is notExtrovert(Jeff) & likesToTalkToSweets(Jeff))", "(-Extrovert(Jeff) & LikesToTalkToSensors(Jeff))", "(-Extrovert(Jeff) & LikesTalkingToSpiders(Jeff))", "-(Extrovert(Jeff) & LikesToTalkToSneaks(Jeff))"]}
{"id": "folio_train_408", "nl": "Jeff is a shy and reticent person.", "fol": "IsShyAndReticent(Jeff)", "prediction": ["all x.(Jeff(x) -> (Shy(x) & Reticent(x)))", "Jeff is shy and reticent.", "all x.(Jeff(x) -> (Shy(x) & Reticent(x)))", "Jeff is shy and reticent.", "exists x.(RetinentPerson(x) & Shy(x))", "is ShyReticent(Jeff)", "(-Shy(Jeff) & Reticent(Jeff))", "(Shy(Jeff) & Retinent(Jeff))", "all x.((Jeff(x) & Shy(x) & Reticent(x)) -> Shy(x))", "all x.(Jeff(x) -> (Shy(x) & Reticent(x)))", "(Shy(Judd) & Reticent(Jeff))", "all x.(ShyAndReticentPerson(x) -> Jeff(x))", "all x.(Jeff(x) -> (Shy(x) & Reticent(x)))", "(Shy(Jeff) & Reticent(Jeff))", "all x.(ShyAndReticent(x) -> Jeff(x))", "all x.(Jeff(x) -> (Shy(x) & Reticent(x)))"]}
{"id": "folio_train_409", "nl": "Jeff is overtly expressive and likes to talk to strangers.", "fol": "(IsOvertlyExpressive(Jeff) & LikesToTalkToStrangers(Jeff))", "prediction": ["all x.(Jeff(x) -> (OvertlyExpressive(x) & LikesTalkToStrays(x)))", "all x.(Jeff(x) -> (OvertlyExpressive(x) & LikeToTalkToStrangers(x)))", "all x.(Jeff(x) -> (OvertlyExpressive(x) & LikesToTalkToSonders(x)))", "all x.(Jeff(x) -> (Expressive(x) & LikesToTalkToSwiss(x)))", "all x.(Jeff(x) -> (OvertlyExpressive(x) & LikesToTalkToSonsors(x)))", "_(Jim(Jeff) & OvertlyExpressive(Jeff)) -> LikesToTalkToSensors(Jeff))", "(Expressive(Jeff) & LikesToTalkToScaries(Jeff))", "all x y z.((Judy(x) & OverlyExplicit(x) & Stranger(y)) -> LikesToTalkTo(x,y).)", "all x.(Jaffrey(x) -> (OvertlyExpressive(x) & LikesToTalkToSonders(x)))", "all x.((Jeff(x) & OvertlyExpressive(x) & LikesToTalkToSpoken(x)) -> OvertlyInteresting(x))", "all x.(Jeff(x) -> (OvertlyExpressive(x) & LikesToTalkToSterns(x)))", "all x.(Jeff(x) -> (OvertlyExpressive(x) & LikesToTalkToSwallows(x)))", "(OvertlyExpressive(Jeff) & LikesToTalkToSons(Jeff))", "all x.(Jeff(x) -> (Expressive(x) & LikesToTalkToStrikers(x)))", "(overtlyExpressive(Jeff) & LikesToTalkToSurrealists(Jeff))", "all x.((Jeff) & OvertlyExpressive(x) & LikesToTalkToSwimmers(x)) -> OvertlyExpective(x))"]}
{"id": "folio_train_410", "nl": "If Jeff is either overtly expressive and likes to talk to strangers or neither overtly expressive nor likes to talk to strangers, then Jeff is neither an extrovert nor likes to talk to strangers.", "fol": "(((IsOvertlyExpressive(Jeff) & LikesToTalkToStrangers(Jeff)) | (-IsOvertlyExpressive(Jeff) & -LikesToTalkToStrangers(Jeff))) -> (-IsExtrovert(Jeff) & -LikesToTalkToStrangers(Jeff)))", "prediction": ["all x.((Jeff@(Extrovert(x) | LikesToTalkToSonsors(x)) | (-OvertlyExpressive(x) & LikesToTalkToStrangers(x))))", "all x.((Jeff(x) & (OvertlyExplicit(x) & LikesToTalkToSkeptics(x)) | (-OvertlyExplicit(x) & LikesToTalkToSkeptics(x))))", "all x.((Jeff(x) & ((OvertlyExpressive(x) & LikesToTalkToStories) | -OvertlyExpressive(x) & LikesToTalkToStories(x))) -> -Exptrovert(x) & -LikesToTalkToStories(x)))", "all x.((Fish(x) & (OvertlyExplicit(x) | LikesToTalkToSonsors(x))) | (-OvertlyExplicit(x) | LikesToTalkToSonsors(x)))))", "all x.((Jupy(x) & (OvertlyExpressive(x) & LikesToTalkToSpiders(x)) | (-OvertlyExpressive(x) & LikesToTalkToSpiders(x))))", "all x.((Jeff(x) & (OvertlyExpressive(x) & LikesToTalkToSwolves(x) | -OvertlyExpressive(x) & LikesToTalkToSwolves(x))) -> -(Extrovert(x) & LikesToTalkToSwolves(x))))", "all x.((Jeff(x) & NeitherExtrovert(x) & -LikesToTalkToSkeptics(x)) -> -LikesToTalkToSkeptics(x))", "all x.((French(x) & (OvertlyExpectative(x) & LikesToTalkToSonars(x) | -OvertlyExpective(x) & LikesToTalkToSonars(x))) -> -(Extrovert(x) | LikesToTalkToSonars(x))))", "all.(((Jenny(Jeff) & (OvertlyExpective(Jeff) | (-OvertlyExpective(Jeff) | -LikesToTalkToStrangers(Jeff)))) -> -Extrovert(Jeff))", "all x.((Fox(x) & (OvertlyExpressive(x) & LikesToTalkToSlovers(x)) | -(OvertlyExpressive(x) | LikesToTalkToSlovers(x)))) -> -Extrovert(x) & -LikesToTalkToSlovers(x)))", "all x.((Jeff(x) & ((overtlyExpressive(x) & LikesToTalkToSenters(x)) | (-overtlyExpressive(x) & LikesToTalkToSenters(x)))))", "all x.((Jeff(x) & (OvertlyExpressive(x) & LikesToTalkToS strangers(x) | -OvertlyExpressive(x) & LikesToTalkToStrangers(x))) -> -Extrovert(x) & -LikesToTalkToStrangers(x))", "all x.((Jeff(x) & (OvertlyExpressive(x) & LikesToTalkToStornitors(x) | -OvertlyExpressive(x) & LikesToTalkToStornitors(x))) -> (-Extrovert(x) & -LikesToTalkToStornitors(x)))", "all x.((Jeff(x) & (OvertlyExpressiveAndLikesToSecretaries(x) | -OvertlyExpressive(x) & LikesToTalkToSensers(x))) -> (-Extrovert(x) | LikesToTalkToSensers(x)))", "all x.(((Fish(x) & (OvertlyExpressive(x) & LikesToTalkToSnails(x)) | (-OvertlyExpressive(x) & LikesToTalkToSnakes(x)))))", "all x.((Jeff(x) & (OvertlyExpressive(x) & LikesTalkToSwalters(x) | -Attractive(x) & LikesTalkToSwimmers(x))) -> (Extrovert(x) | LikesTalkToSwimmers(x)))"]}
{"id": "folio_train_411", "nl": "No low-scoring players are top players in the league.", "fol": "all x.(IsLowScoringPlayer(x) -> -IsTopPlayerInLeague(x))", "prediction": ["-exists x.(LowScoringPlayer(x) & TopPlayer(x))", "\u2013 -LowScoringPlayers(-)", "-exists x.(LowScoringPlayer(x) & TopPlayer(x))", "-exists x.(FootScoringPlayer(x) & LowScoringPlayer(x))", "-exists x.(LowScoringPlayer(x) & TopPlayer(x))", "all x.((LowScoringPlayer(x) & TopPlayer(x)) -> -(LowScoringPlayer(x) & PlayPathInLoan(x)))", "-exists x.(League(x) & LowScoringPlayer(x))", "no.((LowScoringPlayer(x) & TopPlayer(x))", "-exists x.(LowScoringPlayer(x) & TopPlayer(x))", "all x.((LowScoringPlayer(x) & TopPlayer(x)) -> -LowScoringTogether(x))", "-exists x.(Player(x) & LowScoring(x) & TopPlayer(x))", "all x.((LowScoringPlayer(x) & -TopPlayer(x)) -> TopPlayer(x))", "-exists x.(LowScoringPlayer(x) & TopPlayer(x))", "-exists x.(LowScoringLeaguePlayer(x) & TopPlayer(x))", "-exists x.(LowScoringPlayer(x) & TopPlayer(x))", "-all x.((LowScoringPlayer(x) & TopPlayer(x)) -> No(x))"]}
{"id": "folio_train_412", "nl": "Basketball players are either top players in the league or successfully shoot a high percentage of 3-pointers.", "fol": "all x.(IsTopPlayerInLeague(x) | SuccessfullyShootsHigh3PointerPercentage(x))", "prediction": ["all x.(BasketballPlayer(x) -> ((TopPlayerInLiga(x) | HighPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentEndPerson(x))))", "all x.(BasketballPlayer(x) -> ((TopPlayer(x) & InPlayingLeague(x)) | HighPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPencil(x))))", "all x.(BasketballPlayer(x) -> (TopPlayer(x) | HighPercentPercentPercentPercentPercentPercentPartial(x)))", "all x.(BasketballPlayer(x) -> (TopPlayer(x,y) | HighPositionOf3Pointers(x)))", "(exists x.(BasketballPlayer(x) & (TopPlayer(x) | HighPercentage(x))))", "all x.(BasketballPlayer(x) -> ((TopPlayer(x) & HighPercentPercent(x) & ShootsHotPercent3Pointers(x))))", "all x.(BasketballPlayer(x) -> ((TopPlayer(x) | HighPercentage3Pointer(x))))", "all x.(BasketballPlayer(x) -> (TopPlayer(x) | HighPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercent(x)))", "all x.(BasketballPlayer(x) -> ((TopPlayer(x) & ATLPC) | HighPercentagePercentage(x,3Pointers))))", "all x.(BasketballPlayer(x) -> ((TopPlayerInLowerLoader(x) | HighPercentPositionShot(x))))", "all x.(BasketballPlayer(x) -> ((TopPlayerInLeague(x) | HighPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercent(xPersonPlayer(x))))", "all x.(BasketballPlayer(x) -> ((TopPlayer(x) & InLoss(x)) | HighPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercent(x)))", "all x.(BasketballPlayer(x) -> ((TopPlayer(x) & InLocal(x)) | HighlyPercentageFocus(x))))", "all x.(BasketballPlayer(x) -> ((TopPlayerInLowerLocation(x) | HighPercentPercentOf3Pointers(x))))", "all x.(BasketballPlayer(x) -> (TopPlayer(x) | HighPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentEnPotto(x)))", "all x.(BasketballPlayer(x) -> ((TopPlayer(x) & InLaw(x)) | HighPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentPercentInLaw(x))))"]}
{"id": "folio_train_413", "nl": "All players who successfully shoot a high percentage of 3-pointers are solid at shooting 2-pointers.", "fol": "all x.(SuccessfullyShootsHigh3PointerPercentage(x) -> SolidAtShooting2Pointers(x))", "prediction": ["all x.((Player(x) & SuccessfulShootsHighPercent(x)) -> SolidAtShooting2Pointers(x))", "all x.((Player(x) & SucceedsOutWithHighPercent3Pointers(x) & ShootsHighScore2Pointers(x)) -> SolidAtShooting2Pointers(x))", "all x.((Player(x) & ShootsHighPercent3Pointers(x)) -> SolidAtShooting2Pointers(x))", "all x.((Player(x) & EasilyShootsHighPercentageOf3Pointers(x)) -> SolidAtShooting2Pointers(x))", "all x.((Player(x) & HighPercentIn3Pointers(x)) -> SolidAtStanding2Pointers(x))", "all x.((Player(x) & ShootsHighPercentOff3Pointers(x)) -> SolidAtShooting2Pointers(x))", "all x.((Player(x) & HighPercentageOf3Pointers(x)) -> SolidAtWoring2Pointers(x))", "all x.((Player(x) & HighThreePointerScore(x)) -> SolidAtTwoPointer(x))", "all x.((Player(x) & HighPercent(x,3)) -> SolidAtHosting(x,2))", "all x.((Player(x) & HighParticipationOf3Pointers(x)) -> SolidAtShooting2Pointers(x))", "all x.((Player(x) & HighParticipationOf3Pointers(x)) -> SolidAtShooting2-Pointers(x))", "all x.((Player(x) & HighPercentageOfThreePointers(x)) -> SolidAtStrongAtStrongAtHopping2Pointers(x))", "all x.((Player(x) & HighPercentPercent(x,3-Pointers)) -> SolidAtShooting(x,2Pointers))", "all x.((Player(x) & Super BowlShootsHighPercentage(x,3)) -> SolidAtStopping2-pointers(x))", "all x.((Player(x) & HighPotentialOf3Pointers(x)) -> SolidAtScribing(x,1-2Pointers))", "all x.((Player(x) & ShootsHighPercent3Pointers(x)) -> SolidAtSwappingTwoPointers(x))"]}
{"id": "folio_train_414", "nl": "No players who are solid at shooting 2-pointers are bad at mid-range shots.", "fol": "-exists x.(SolidAtShooting2Pointers(x) -> BadAtMidRangeShots(x))", "prediction": ["-exists x.(Player(x) & SolidAtShooting(x,2(x)) & BadAtMittlerRangeShots(x))", "all x.((Player(x) & SolidAtShot(x,2) & 2Puncters(x)) -> BadAtMidRangeShots(x))", "all x.((Player(x) & SolidAtShootingBoundPointers(x)) -> BadAtMidRangeShots(x))", "the aforementioned w.((Player(a) & SolidAtShooting2-Pointers(a) & MitigatedAtMidRangeShots(w)) -> BadAtMithRangeShots(a))", "all x.((Player(x) & SolidAtShooting2-Pointers(x)) -> BadAtShootingMidRange(x))", "all x.((Player(x) & SolidTwoPointers(x)) -> BadAtMediumRangeShots(x))", "all x.((Player(x) & SolidAtShooting2-Pointers(x)) -> BadAtMediumRangeShots(x))", "all x.((Player(x) & SolidShooting2Pointers(x)) -> BadAtMittrangeShots(x))", "all x.((Player(x) & SolidAtShooting2Pointers(x)) -> BadAtMidRange(x))", "all x.((Player(x) & SolidAtShooting2Pointers(x)) -> BadAtMiddleRangeShoots(x))", "in the mid-range.", "-exists x.((Player(x) & SolidAtShooting2Pointers(x)) -> BadAtMidRange(x))", "all x.((Player(x) & SolidAtShooting2Pointers(x)) -> BadAtMidRangeShots(x))", "all x.((Player(x) & SolidAtShootingG2-Pointers(x)) -> BadAtMidRange(x))", "-exists x.(Player(x) & SolidAtShooting2Punches(x) & BadAtShooting(x,MedieRangeShots))", "all x.((Player(x) & SolidAtShooting2-Pointers(x)) -> BadAtMidRangeShots(x))"]}
{"id": "folio_train_415", "nl": "Candace is either a low-scoring player or successfully shoots a high percentage of 3-pointers.", "fol": "((IsLowScoringPlayer(Candace) & -SuccessfullyShootsHigh3PointerPercentage(Candace)) | (-IsLowScoringPlayer(Candace) & SuccessfullyShootsHigh3PointerPercentage(Candace)))", "prediction": ["all x.(Candace(x) -> ((LowScoring(x) | SucceedsHighPercentageOfOff-Pointers(x))))", "all x.(Candace(x) -> ((LowScoringPlayer(x) | HighPercentageHorizonScribing(x))))", "all x.(Candace(x) -> (LowScoringPlayer(x) | SuccessfullyShootsHighPercentageOfDipsters(x)))", "all x y.((Canandace(x) & LowScoringPlayer(x) & HighPercentDecision(y)) -> (HealToCandace(x) | Stupid(x,y)))", "all x.(Candace(x) -> ((LowScoringPlayer(x) | HighPercentRange(x))))", "all x.((Candace(x) & LowScoringPlayer(x)) | HighPercentage3Pointers(x))", "all x.(Candace(x) -> ((LowSCOringPlayer(x) | HighPercentage(x))))", "all x.((Candace(x) & ((LowScoringPlayer(x) & CanSlayHighPercent3Pointers(x)) | (SuccessfullyShowsHighPercent3Pointers(x)))))", "all x y.((Candace(x) & LowScoringPlayer(x)) | (SuccessfullyShootsHighPercentageOf3Pointers(x,y))))", "all x.(Candace(x) -> ((LowScoringPlayer(x) | HighPercentageFootball(x))))", "all x.(Candace(x) -> (ProperlyLowScoring(x) | HighPercentage(x)))", "all x.(Candace(x) -> ((LowScoringPlayer(x) | HighPercentage3Pointers(x))))", "all x.(Candace(x) -> ((LowScoringPlayer(x) | HighPercentage3Pointer(x))))", "((LowScoringPlayer(Candace) | HighPercentageFootshots(Candace)))", "all x.(Candace(x) -> ((LowScoringPlayer(x) | HighPercent3Pointer(x))))", "all x y.((Candace(x) & LowScoringPlayer(y) | HighPercentageHot(x,y)) -> Succeeds(x,y))"]}
{"id": "folio_train_416", "nl": "Candace is a top player in the league.", "fol": "IsTopPlayerInLeague(Candace)", "prediction": ["Candace is topPlayer(Candace)", "all x.(Danace(x) -> TopPlayer(x))", "Candace's top player in the league.", "Candace is a TopPlayerInLand.", "Candace is TopPlayerInPlayingLeague(Candace)", "all x.((Candace(x) & TopPlayerInLiga(x)) -> TopPlayerInLiga(x))", "all x y.((Candace(x) & League(y)) -> TopPlayer(x,y))", "(TopPlayer(Candace,Large))", "all x y.((Candace(x) & League(y)) -> TopPlayer(x,y))", "Candace is top player in the League.", "all x.((Candace(x) & TopPlayer(x)) -> TopPlayerInLiga(x))", "all x.((Candace(x) & TopPlayerInLiga(x)) -> TopPlayerInLiga(x))", "all x y.((Candace(x) & League(y)) -> TopPlayer(x,y))", "all x.((Candace(x) & TopPlayerInLiga(x)) -> TopPlayerInLoad(x))", "all x.((Candace(x) & TopPlayer(x)) -> InLiga(x))", "all x.((Canace(x) & TopPlayerIn(x)) -> TopPlayerIn(x))"]}
{"id": "folio_train_417", "nl": "Candace is bad at mid-range shots.", "fol": "BadAtMidRangeShots(Candace)", "prediction": ["all x.((Candace(x) & MidRange(x)) -> Bad(x))", "(BadHandsRange(Candace)", "(BadAtMitorangeShoot(Canadian))", "all x.(Candace(x) -> BadAtMidRangeShots(x))", "-BadAtMidRangeShots(Candace)", "all x.(Candace(x) -> BadAtMidRange(x))", "all x.(Codace(x) -> BadAtMiddleRange(x))", "all x.((AtMiddleRange(x) & Candace(x)) -> BadAt(x,At(x,Cancella))", "all x.((Candicace(x) & BadAtMidRangeShoots(x)) -> NotBadAtMiniRangeShoots(x))", "all x.((Candace(x) & MidRangeShoot(x)) -> BadPoor(x))", "all x.((Candace(x) & MidRangeShoots(x)) -> Bad(x))", "(BadAtMitidRange(Candace))", "(BadAtMidRangeShots(Candace))", "all x.((Candidace(x) & NoStars(x)) -> BadAt(x,modest))", "all x.(Canadian(x) -> BadAtMidRange(x))", "(BadAtMidRangeShots(cancanace))"]}
{"id": "folio_train_418", "nl": "Candace is solid at shooting 2-pointers or bad at mid-range shots.", "fol": "(SolidAtShooting2Pointers(Candace) | BadAtMidRangeShots(Candace))", "prediction": ["all x y.((Candace(x) & 2-PointerShot(x)) -> (StolenAt(x,y) | BadAt(x,midiRangeShot(x)))", "(Still(Candace,2) | Bad(Candace,2)))", "(all x.(Candace(x) -> Solid(x)) | (Bad(x)) & MidRange(x)))", "all x.((Candace(x) & (StillAtWooden(x,202) | BadAtMediumRange(x,202))) -> Available(x))", "all x.((Candace(x) & (StillShotsTwoPointers(x) | BadShots(x))) -> (StillAtShooting(x,TwoPointers)))", "All x.(Character(x) -> (SolidAt(x,2) | BadAt(x,)))", "(all x.(Candace(x) -> SolidAtShooting(x,2)) & all y.(Candace(y) -> BadAtShooting(y,midRange))))", "all x.(Candidace(x) -> (StillAtShootingPaints(x) | BadAtShootingMiddleRangeShots(x)))", "((StandardAtShootingSoftly2(Candace) | BadAtShootingBadly(Candace)))", "(StillAt(Canace,2Punctures) | BadAt(Canace,0MidRangeShots)))", "(all x.(Candace(x) -> SolidRecently(x)) | (BadRecently(x) & MidRangeShot(x))))", "(exists x.(Academe(x) & ShotsBody(x,2)))", "all x.((Candace(x) & (StandardAtCouples(x) | BadAtMidRange(x))) -> -(StandardAtCouples(x) | BadAtCouples(x))))", "((SameAt2-Pointers(Candace,S) & BadAtMediumRangeShots(Candace,S))", "all x.(Canadian(x) -> (SafestAtShooting2-Pointers(x) | BadAtShootingMiddleRange(x)))", "(Still(cnct.,2-Pointer) | Bad(cnct.,mid-range)))"]}
{"id": "folio_train_419", "nl": "Candace is either solid at shooting 2-pointers or bad at mid-range shots.", "fol": "(SolidAtShooting2Pointers(Candace) | BadAtMidRangeShots(Candace))", "prediction": ["all x.(Cancace(x) -> (StillFocus(x) | BadFocus(x)))", "all x.(Chanace(x) -> (SickAtShooting2Pointers(x) | BadAtShootingMidRange(x)))", "all x.(Canace(x) -> (SolidAtShooting2Pointers(x) | BadAtShootingMittRange(x)))", "all x.(Candace(x) -> ((Solid(x) & Shoots2Pointers(x) | Bad(x))))", "all x.(Canadian(x) -> (HasSolid(x) | HasBad(x)))", "all x.(Canadian(x) -> (SolidAtShooting2Pointers(x) | BadAtShootingMidRangeShots(x)))", "all x.(Canandace(x) -> ((SolidAtShooting2Penters(x) | BadAtShootingMidRangeShots(x))))", "(StillFootball(Candace) & 2-PointerFootball(Candace) | BadFootballFootball(Candace))", "(SolidAtSpottingBoarders(Cornace) | BadAtSharingMidRangeShots(Cornace))", "all x.(Candace(x) -> (SolidAtStokingTwoPointers(x) | BadAtShootingMediumRangeShots(x)))", "all x.(Canadian(x) -> (StandardAtShootingBoundPunches(x) | BadAtShootingMidRangeShots(x)))", "all x.((Canace(x) & SolidIs(x,2) & BadIs(x,MidRange(x)) -> CanCanace(x))", "(SolidAtShootingTwoPointers(Candace) | BadAtShootingMediumRange(Candace))", "all x.(Canace(x) -> (Solid(x) | Bad(x)))", "(StandardAtShootingSidePointers( Candace) | BadAtShootingSidePointers( Candace))", "all x y.((Candace(x) & ShootsTo(x,200)) | (BadTo(x,mid-range))))"]}
{"id": "folio_train_420", "nl": "Candace is a low-scoring player or bad at mid-range shots.", "fol": "(IsLowScoringPlayer(Candace) | BadAtMidRangeShots(Candace))", "prediction": ["all x.(Candace(x) -> ((LessScoringPlayer(x) | BadAtMidRangeShots(x))))", "all x.((Candace(x) & (LowScoringPlayer(x) | BadAtMidRange(x))) -> Candace(x))", "all x.(Candace(x) -> ((LowScoringPlayer(x) | BadAtMidRange(x))))", "all x.(Candace(x) -> ((LowScoringPlayer(x) | BadAtMidRangeShots(x))))", "all x.((Candace(x) & (LowScoring(x) | BadAtMidRange(x))) -> Candace(x))", "exists x.(Candace(x) & ((LowScorer(x) & -BadAtMidRange(x)) | (-ThanLowScorer(x) & MidRangeShots(x)))))", "(LowScoringPlayer(Candace) | BadAtMidRange(Candace))", "all x.(Canace(x) -> (LowScoringPlayer(x) | BadAtMidRange(x)))", "all x.((Candace(x) & (LowScoring(x) | BadAtMidRange(x))) -> Talented(x))", "(LowScoringPlayer( Candace) | BadAtMidRangeShots( Candace))", "all x.(Canace(x) -> ((LowScorer(x) | BadAtMidRangeShots(x))))", "(LowScoringPlayer(Candace) | BadAtMediumRangeShoots(Candace)))", "all x.((Candace(x) & (LowScoringPlayer(x) | BadAtMidRangeShoots(x))) -> LowScoringPlayer(x))", "all x.(Candace(x) -> ((LowScoringPlayer(x) | BadAtMidRangeShots(x))))", "all x.(Candace(x) -> (LowScoringPlayer(x) | BadAtMidRange(x)))", "all x.(Canandace(x) -> (LowScoringPlayer(x) | BadAtMidRangeShots(x)))"]}
{"id": "folio_train_421", "nl": "Candace is either a low-scoring player or bad at mid-range shots.", "fol": "(IsLowScoringPlayer(Candace) | BadAtMidRangeShots(Candace))", "prediction": ["exists x.(Player(x) & (LowScoring(x) | BadAtMidRange(x)))", "all x.(Candace(x) -> (LowScoringPlayer(x) | BadAtMidRangeShots(x)))", "all x.((Candace(x) & (LowScoring(x) | BadAtMidRange(x))) -> LowScoring(x))", "all x y.((Candace(x) & LowScoringPlayer(x) & MidRangeShot(y)) -> (BadAt(x,y) | BadAt(x,y)))", "all x.(Candace(x) -> (LowScoringPlayer(x) | BadAtMidRange(x)))", "all x.(Canace(x) -> (LowScoringPlayer(x) | BadAtMidRange(x)))", "all x.(Candace(x) -> (LowScorePlayer(x) | BadAtMidRange(x)))", "all x.(Canadian(x) --- (LowScoringPlayer(x) | BadAtMidRange(x)))", "(LowScoringPlayer(Candace,Candace) | BadAt(Candace,MidRange(Candace)))", "all x.(Candace(x) -> (LowScoringPlayer(x) | BadAtMidRange(x)))", "all x.(Cancadian(x) -> (LowScoringPlayer(x) | BadAtMidRangeShots(x)))", "all x.((Candace(x) & (LowScoring(x) | BadAtMidRange(x))) -> LowSchooling(x))", "exists x.(Chanace(x) & ((LowScoringPlayer(x) & -BadAtInteriorShots(x)) | (-BadAtInteriorShots(x)))))", "all x.(Canaden(x) -> (LowScoringPlayer(x) | BadAtMittlerRangeShoots(x)))", "all x.((Candace(x) & (LowScoringPlayer(x) | BadAtMediumRange(x))) -> Cancel(x))", "all x.(Candace(x) -> (LowScoringPlayer(x) | PoorAtMidRangeChips(x)))"]}
{"id": "folio_train_422", "nl": "Candace is either a player who successfully shoots a high percentage of 3-pointers or is bad at mid-range shots.", "fol": "(SuccessfullyShootsHigh3PointerPercentage(Candace) | BadAtMidRangeShots(Candace))", "prediction": ["all x.((Player(x) & (HighPercent3Pointers(x) | BadAtMidRangeShots(x))) -> Candace(x))", "((Player(Candace) & HighPercent3Pointers(Candace)) | BadAtMidRangeShots(Candace)))", "all x.(Canace(x) -> (Player(x) & (SuccessfulShotsHighPercent3Pointers(x) | BadAtMidRangeShots(x))))", "exists x.(Player(x) & ((SuccessfullyShootsHighPercentageOfFourPointers(x) & Candace(x)) | BadAtMediumRangeShots(x)))", "all x.((Player(x) & (ShootsHighPercent3Pointers(x) | BadAtMidRangeShots(x))) -> Candace(x))", "all x.((Player(x) & ShotsHighPercent3,3/Punct)) | BadAtMidRange(x,5))", "all x.(Candace(x) -> (Player(x) & (ShootsHighPercent(x) & ShootsMidRange(x)) | BadAtMidRange(x))))", "exists x.(Player(x) & ((SuccessfulShotsHighPercent3Pointers(x) & Candace(x)) | BadAtMiddleRangeShots(x))))", "all x.( Candace(x) -> (SuccessfullyShootsHighPercent(x) & BadAtMiddleRangeShots(x)))", "all x.(Chance(x) -> ((HighPercentageOfThreePointers(x) | BadAtMidRangeShots(x))))", "all x.(Candace(x) -> ((SuccessfullyShootsHighThreePointers(x) | BadAtMittrangeShots(x))))", "all x.((Player(x) & (HighPercentOf3Pointers(x) | BadAtMidRangeShots(x))) -> Candace(x))", "all x.(Candace(x) -> (SuccessfullyShootsHighPercent3Pointers(x) | BadAtMidRangeShots(x)))", "all x.(Candace(x) -> (SuccessfullyShotsHighPercentOfThreePointers(x) | BadAtMidRangeShots(x)))", "all x.(SuccessfullyShootsHighPercentageOf3Pointers(x) | BadAtMidRangeShots(x))", "all x.(Candace(x) -> ((Player(x) & HighPercentShots(x,3)) | BadAtMidRangeShots(x,4))))"]}
{"id": "folio_train_423", "nl": "If Candace is not solid at shooting 2-pointers and bad at mid-range shots, then Candace is not solid at shooting 2-pointers and is a player who successfully shoots a high percentage of 3-pointers.", "fol": "(-(SolidAtShooting2Pointers(Candace) & BadAtMidRangeShots(Candace)) -> (-SolidAtShooting2Pointers(Candace) & SuccessfullyShootsHigh3PointerPercentage(Candace)))", "prediction": ["all x.((Player(x) & -SonderAtShooting2-Pointers(x) & BadAtMidRangeShots(x)) -> (-SonderAtShooting2-Pointers(x) & HighPercentAtShooting3Pointers(x)))", "all x.((Player(x) & SolidAtShooting2Pointers(x) & BadAtShooting5MidRange(x)) -> (-StandardAtShooting2Pointers(x) & HighPointerShoot(x)))", "all x.((Player(x) & -StandardAtShooting2Pointers(x) & BadAtShootingMitidRange(x)) -> (-StableAtShooting2Pointers(x) & HighPercentOf3Pointers(x)))", "all x.((Player(x) & -SolidAtShooting2-Pointers(x) & BadAtMIDROUNDShots(x)) -> (-SolidAtShooting2-Pointers(x) & HighPercentPercentPercentThirdPointerShooting(x)))", "all x.((Player(x) & -UnsolidAtSaving2Pointers(x) & BadAtMittrangeShots(x)) -> (-SolidAtSaving2Pointers(x) & HighPercentageOf3Pointers(x)))", "all x.((Player(x) & -StandardAtShootingEyeOn(x,2-2Pointers) & BadAtSmidRadways(x,2-1Pointers)) -> (-StandardAtShootingEyeOn(x,2-2Pointers) & SuccessfullyShootsHighPercentageOf3Pointers(x)))", "all x.((Candace(x) & -SilentAtShooting2-Pointers(x) & BadAtMidRangeShots(x)) -> -SilentAtShooting2-Pointers(x) & HighPercentPercentThoroughTurnip(x)))", "all x.((Player(x) & -StaysAtTwoPointers(x) & BadAtMidRangeShots(x)) -> (-StaysAtTwoPointers(x) & SucceedsAtHighPercentageOfThreePointers(x)))", "all x.((CanAc Candace(x) & -StillAtShooting2-Pointers(x) & BadAtMidRangeShots(x)) -> (-StillAtShooting2-Pointers(x) & HighPercentOf3Pointers(x)))", "all x.((Player(x) & -StandardAtOther(x,2) & BadAtMidRange(x)) -> (-StandardAtOther(x,2) & SucceedsHighPercentAt3Pointers(x)))", "all x.((Player(x) & -StillAt2-Pointers(x) & BadAtMidRange(x)) -> (-StillAt2-Pointers(x) & HighPercent3Pointers(x)))", "all x.((Candace(x) & -StableAtMovement(x) & BadAtMovement(x)) -> (---StableAtMovement(x) & HighPercentInThreePointersProbable(x)))", "(all x.((Candace(x) & -StildAtShooting(x,2) & BadAtMidRangeShots(x)) -> -StildAtShooting(x,2)) & all y.((Candace(y) & HighPercentPercent(y)) -> ShootsHighPercent3Pointers(y)))", "all x.((Player(x) & -RelatedToSkiingDoublePointers(x) & BadToSkippingOfMiddleRangeShots(x)) -> (-RelatedToSkiingDoublePointers(x) & SuccessfulToShowHighPercent3Pointers(x)))", "all x.((Candace(x) & -SolidDropsideShots2(x) & BadAtMIDRangeShots(x)) -> (-SolidDropsideShooting2-Pointers(x) & HighPercentTriangleShot(x)))", "all x.((Ad Candace(x) & -SonishAtShootingBentonPointers(x) & BadAtShootingMidRangeShots(x)) -> (-SonAndSuccessfullyShootsHighPercent3Pointers(x)))"]}
{"id": "folio_train_424", "nl": "If Candace is solid at shooting 2-pointers or successfully shoots a high percentage of 3-pointers, then Candace is a top player in the league and bad at mid-range shots.", "fol": "((SolidAtShooting2Pointers(Candace) | SuccessfullyShootsHigh3PointerPercentage(Candace)) -> (IsTopPlayerInLeague(Candace) & BadAtMidRangeShots(Candace)))", "prediction": ["all x.((Candace(x) & (StableAtShootingWurst(x,2) | EffortfulAtShootingHighPercentage(x,3))) -> (FootPlayer(x) & BadAtMidRangeShots(x)))", "all x.((Candace(x) & (StandardAtShooting2-pointers(x) | ScrutinizedAtShootingHighPercentageOf3pointers(x))) -> (TruePlayer(x) & BadAtMidRangeShots(x)))", "all x.((Candace(x) & SolidAtShooting2Punches(x)) | (SuccessfullyShootsHighPercentOf3Punches(x) & TopPlayer(x) & BadAtMittelRange(x))))", "all x.((Candace(x) & (SolidAtShooting2-Pointers(x) | HighPercentageOf3Pointers(x))) -> (TopPlayer(x) & BadAtMidRangeShots(x)))", "all x.((Candace(x) & SolidAtShootingSevenPointers(x) | HighPercentageMiddleRangeShoots(x)) -> (TopPlayerInLiga(x) & BadAtMidRangeShoots(x)))", "all x.((Candace(x) & (SolidAtShooting2Pointers(x) | HighParticipationAtShooting3Pointers(x))) -> (TopPlayerInLiga(x) & BadAtShootingMediumRange(x)))", "all x.(( Candace(x) & (SolidAtShooting2Pieces(x) | HighPercentageOf3Pieces(x))) -> (TopPlayerInLiga(x) & BadAtMidRange(x)))", "all x.((Candidate(x) & (StillAtShooting2Pointers(x) | HighPercentAtShooting3Pointers(x))) -> (TopPlayerInLiga(x) & BadAtMidRange(x)))", "all x.((Camille(x) & (SsolidAtShootingPounders(x) | HighPercentageAtThreePointers(x))) -> (TopPlayer(x) & BadAtMidRange(x)))", "all x.((Candace(x) & (SolidAtShooting2Pieces(x) | HighPercentAtShooting3Pieces(x))) -> (TopPlayerInLegion(x) & BadAtMidRange(x)))", "all x.((Concentre(x) & (SolidAtSharingTwoPointers(x) | HighPercentageOfThreePointers(x))) | (BadAtMidRangeShots(x) | TopPlayer(x))))", "all x.((Candace(x) & (SolidAtShooting2-Pointers(x) | HighPercentageAtShooting3Pointers(x))) -> TopPlayerInLeague(x) & BadAtMittrange(x))", "all x.((Candace(x) & (SolidShots2Pointers(x) | HighPercent3Pointers(x))) -> (TopPlayer(x) & BadAtMidRangeShots(x)))", "all x.((Candace(x) & (SolidAtShooting2-Pointers(x) | SupportableAtShootingHighPercentageOf3Pointers(x))) -> (TopPlayerInLiga(x) & BadAtMediumRangeShots(x)))", "all x.((Candace(x) & (Standing(x,2) | HighPercentage(x,3))) -> (TopPlayerInLiga(x) & BadAtMidRange(x)))", "all x y z.((Candace(x) & SolidAtShooting2-Pointers(x) | HighPercentage(x,y) & 3-Pointers(y)) -> (TopPlayerInLiga(x) & BadAtMidRangeShots(x)))"]}
{"id": "folio_train_425", "nl": "No plants are fungi.", "fol": "all x.(IsPlant(x) -> -IsFungi(x))", "prediction": ["-exists x.(Plant(x) & Fungi(x))", "all x.(Plant(x) -> -Fungus(x))", "-exists x.(Plant(x) & Fungus(x))", "-exists x.(Plant(x) & Fungus(x))", "-exists x.(Plant(x) & Fungi(x))", "all x.(Plant(x) -> -Fungus(x))", "-exists x.(Plant(x) & Fungi(x))", "-exists x.(Plant(x) & Fungus(x))", "all x.(Plant(x) -> -Fungus(x))", "-exists x.(Plant(x) & Fungus(x))", "all x.(Plant(x) -> -Fungi(x))", "-exists x.(Plant(x) & Fungus(x))", "-exists x.(Plant(x) & -Fungi(x))", "-exists x.(Plant(x) & Fungi(x))", "-exists x.(Plant(x) & Fungus(x))", "-exists x.(Plant(x) & Fungi(x))"]}
{"id": "folio_train_426", "nl": "Mushrooms are fungi.", "fol": "all x.(IsMushroom(x) -> IsFungi(x))", "prediction": ["all x.(Mushroom(x) -> Fungus(x))", "all x.(Mushroom(x) -> Fungi(x))", "all x.(Mushroom(x) -> Fungus(x))", "all x.(Mushroom(x) -> Fungus(x))", "all x.(Mushroom(x) -> Fungus(x))", "all x.(Mushroom(x) -> Fungus(x))", "all x.(Mushroom(x) -> Fungus(x))", "all x.(Mushroom(x) -> Fungus(x))", "all x.(Mushroom(x) -> Fungus(x))", "all x.(Mushroom(x) -> Fungus(x))", "all x.(Mushroom(x) -> Fungus(x))", "all x.(Mushroom(x) -> Fungus(x))", "all x.(Mushroom(x) -> Fungus(x))", "all x.(Mushroom(x) -> Fungus(x))", "all x.(Mushroom(x) -> Fungus(x))", "all x.(Mushroom(x) -> Fungus(x))"]}
{"id": "folio_train_427", "nl": "No plants are mushrooms.", "fol": "all x.(IsPlant(x) -> -IsMushroom(x))", "prediction": ["-exists x.(Plant(x) & Mushroom(x))", "-exists x.(Plant(x) & Mushroom(x))", "all x.(Plant(x) -> -Mushroom(x))", "-exists x.(Plant(x) & Mushroom(x))", "-exists x.(Plant(x) & Mushroom(x))", "all x.(Plant(x) -> -Mushroom(x))", "-exists x.(Plant(x) & Mushroom(x))", "-exists x.(Plant(x) & Mushroom(x))", "-exists x.(Plant(x) & Mushroom(x))", "-exists x.(Plant(x) & Mushroom(x))", "there are no mushrooms in plants.", "-exists x.(Plant(x) & Mushroom(x))", "-exists x.(Plant(x) & Mushroom(x))", "-exists x.(Plant(x) & Mushroom(x))", "exists x.(Plant(x) & -Mushroom(x))", "-exists x.(Plant(x) & Mushroom(x))"]}
{"id": "folio_train_428", "nl": "New York City is on the East Coast. ", "fol": "LocatedIn(Newyorkcity,Eastcoast)", "prediction": ["(EastCurrent(NewYork,Consider))", "all x.(NewYork(x) -> OnEastCoast(x))", "all x y.((New YorkCity(x) & EastCoast(y)) -> On(x,y))", "all x.(NewYorkCity(x) -> EastCoast(x))", "All x.(New YorkCity(x) -> OnEastCoast(x))", "all x.(NewYork(x) -> LocatedOnEastCoast(x))", "(EastCoast(NewYork))", "All x.((NewYorkCity(x) & EastCoast(x)) -> CanBuy(x,y))", "All x.(NewYorkCity(x) -> EastCoast(x))", "All x.(NewYorkCity(x) -> EastCoast(x))", "(EastCoast(NewYorkCity)", "The EastCoast(newyork)", "all x.(NewYorkCity(x) -> OnEastCoast(x))", "(EstainCoast(newyork) & East Coast(y) & LocatedOn(z))", "all x.(NewYork(x) -> OnEastCoast(x))", "LocatedOnEastCoast(NewYork(Nov.1)"]}
{"id": "folio_train_429", "nl": "Seattle is on the West Coast. ", "fol": "LocatedIn(Seattle,Westcoast)", "prediction": ["All x.(Seattle(x) -> WestCoast(x))", "all x.(Seattle(x) -> WestCoast(x))", "(WestCoast(Seattle) & EastCoast(Seattle))", "(WESTCestination(Seattle))", "all x.(Seattle(x) -> WestCoast(x))", "all x.(Seattle(x) -> WestCoast(x))", "all x.(Seattle(x) -> OnWestCoast(x))", "all x.(Seattle(x) -> OnWestCoast(x))", "all x.(Seattle(x) -> WestCoast(x))", "all x.(Seattle(x) -> WestCoast(x))", "all x.(Seattle(x) -> WestCoast(x))", "all x.((Seattle(x) & WestCoast(x)) -> Central(x))", "all x.(Seattle(x) -> WestCoast(x))", "all x.(Seattle(x) -> WestCoast(x))", "(WestCoast(Seattle) & WestCoast(Seoul))", "all x.(Solomon(x) -> OnWestCoast(x))"]}
{"id": "folio_train_430", "nl": "If a person from a city on the East coast is traveling to a city on the west coast, they will be on a long flight.", "fol": "all z.((DepartingFrom(x,y) & LocatedIn(y,Eastcoast) & ArrivingAt(x,z) & LocatedIn(z,Westcoast)) -> IsLongFlight(x))", "prediction": ["all x y.((Person(x) & CityOnEastCoast(x) & CityOnWestCoast(y)) -> LongFlight(x))", "all x y.((Personal(x) & City(y) & EastCoast(x,y) & WestCoast(y,x)) -> LongFlight(x))", "all x y.((Person(x) & City(y) & EastCoast(x) & WestCoast(y) & TravelsTo(x,y)) -> LongFlight(x))", "all x.((Person(x) & CityOnEastCoast(x) & CityOnWestCoast(x)) -> LongFlight(x))", "all x y.((Person(x) & CityOnEastCoast(x,y) & CityOnWestCoast(y)) -> LongFlight(x))", "all x y.((Person(x) & CityOnEastCurrent(x) & CityOnWestCoast(y)) -> LongFlight(x,y))", "all x y.((Person(x) & City(y) & FromEasternCoastToWestCoast(x,y) & OnLongFlight(x)) -> TravelsTo(x,y))", "all x y z.((Person(x) & City(y) & EastCoast(z) & TravelsTo(x,y,z)) -> LongFlight(x,y))", "all x y.((Person(x) & City(y) & EastCoast(x,y) & WestCoast(y)) -> LongFlight(x))", "all x y.((Travel(x) & City(y) & OnEastCoast(x,y) & To(x,y)) -> LongFlight(x))", "all x y z.((Hops(x) & City(y) & City(z) & EastCoast(y) & WestCoast(z) & TravelsTo(x,y,z)) -> LongFlight(x))", "all x y.((PersonFromEastCoast(x) & City(y) & TravelsToWestCoast(x,y)) -> LongFlight(x))", "all x y.((Person(x) & CityOnEastCoast(y) & TravelTo(x,y)) -> LongFlight(x))", "all x y.((Person(x) & City(y) & OnEastCoast(x,y)) -> TravelsToWestCoast(x,y))", "all x y.((Person(x) & City(y) & OnEastCoast(x,y) & WestCoast(y)) -> LongFlight(x,y))", "all x y.((Person(x) & CityOnEastCoast(x,y) & CityOnWestCoast(x,y)) -> LongFlight(x))"]}
{"id": "folio_train_431", "nl": "Most passengers on flights to Seattle from New York City are not in first class.", "fol": "exists x.(-IsInFirstClass(x) & DepartingFrom(x,Newyorkcity) & ArrivingAt(x,Seattle))", "prediction": ["all x.((Passenger(x) & SeattleFlights(x) & NewYorkCity(y)) -> -FirstClass(x,y))", "all x y.((Passenger(x) & Flight(y) & NewYorkCity(x)) -> -FirstClass(x))", "most passengers on SeattleAirflights(flights,nearNewYorkCity) & -InFirstClass(f))", "all x y.((Passenger(x) & NewYorkCity(y) & Seattle(x)) -> -FirstClass(x,y))", "all x y.((Passenger(x) & Flight(y) & ToSeattle(y)) -> -FirstClass(x,y))", "all x.((Passenger(x) & SeattleFlight(x)) -> -FirstClass(x))", "all x.((Passenger(x) & Flight(x,NewYork)) -> -FirstClass(x))", "all x.((Passenger(x) & SeattleFlightFromNewYorkCity(x)) -> -FirstClass(x))", "all x y.((Passenger(x) & Flight(x,y) & NewYorkCity(y)) -> -FirstClass(x))", "all x.(Passenger(x) -> -FirstClass(x))", "all x.((Passenger(x) & SeattleFlight(x,NewYork) & NewYork(y)) -> -FirstClass(x))", "all x.((Passenger(x) & NewYorkCityFlight(x) & SeattleAirline(x)) -> -FirstClass(x))", "(-FirstClass(passenger) | Passenger(passenger))", "all x y.((Passenger(x) & Flight(y) & NewYorkCity(y) & Seattle(y)) -> -FirstClass(x,y))", "all x.((Passenger(x) & -InFirstClass(x)) -> TakesFlight(x,NewYork(y))", "all x y.((Passenger(x) & Flight(y) & FromNewYorkCity(x,y)) -> -FirstClass(x))"]}
{"id": "folio_train_432", "nl": "People on long flights are uncomfortable unless they're in first class", "fol": "all x.((IsLongFlight(x) & -IsInFirstClass(x)) -> FeelingUncomfortable(x))", "prediction": ["all x.((Person(x) & LongFlight(x) & -FirstClass(x)) -> Uncomfortable(x))", "all x.((Person(x) & LongFlight(x) & FirstClass(x)) -> Uncomfortable(x))", "all x y.((Person(x) & LongFlight(y) & FirstClass(y)) -> Uncomfortable(x,y))", "all x.((Person(x) & LongFlight(x) & -FirstClass(x)) -> Uncomfortable(x))", "all x.(LongFlightPerson(x) -> Uncomfortable(x))", "all x y.((Reasons(x,y) & LongFlight(y)) -> (Uncomfortable(x) & -FirstClass(x,y)))", "all x.((Person(x) & LongFlight(x) & -FirstClass(x)) -> Uncomfortable(x))", "all x.((Person(x) & LongFlight(x) & -FirstClass(x)) -> Uncomfortable(x))", "all x.((People(x) & LongFlights(x) & -FirstClass(x)) -> Uncomfortable(x))", "all x.(LongFlightUser(x) -> Uncomfortable(x))", "all x.((Passenger(x) & LongFlight(x) & -ZimmerClass(x)) -> Uncomfortable(x))", "all x.((Person(x) & LongFlights(x) & -FirstClass(x)) -> Uncomfortable(x))", "all x.((Person(x) & LongFlight(x) & -FirstClass(x)) -> Uncomfortable(x))", "all x.((Person(x) & LongFlight(x) & -FirstClass(x)) -> Uncomfortable(x))", "all x.((Person(x) & LongFlight(x) & NotFirstClass(x)) -> Uncomfortable(x))", "all x.((Planet(x) & LongFlight(x) & -FirstClass(x)) -> Uncomfortable(x))"]}
{"id": "folio_train_433", "nl": "Some people flying from New York City to Seattle will be uncomfortable.", "fol": "exists x.(DepartingFrom(x,Newyorkcity) & ArrivingAt(x,Seattle) & FeelingUncomfortable(x))", "prediction": ["exists x.(FlyingFromNewYork(x) & Seattle(x) & Uncomfortable(x))", "exists x.(Person(x) & FlyingFromNewYorkToSeattle(x))", "exists x.(Flight(x) & NewYork(y) & Seattle(z) & FromNewYorkToSeattle(x,y,z))", "exists x.(FlyingFromNewYorkToSeattle(x) & Uncomfortable(x))", "exists x.(FlightFrom(x,NewYorkCity) ToSeattle(x) & Uncomfortable(x))", "exists x.(Person(x) & FlyingFromNewYork(x) toSeattle(x))", "exists x.(Flight(x) & NewYorkCityToSeattle(x) & Uncomfortable(x))", "exists x y z.(Member(x) & Flight(y) & NewYork(z) & NewYork(z) & Passenger(x,y) & From(x,y,z)) -> Uncomfortable(x))", "exists x.(Flight(x) & (NewYork(x) | Seattle(x)) -> Uncomfortable(x))", "exists x.(Flight(x) & NewYork(x) & Seattle(x) & Uncomfortable(x))", "exists x.(Person(x) & FlyingFromNewYorkToSeattle(x))", "exists x.(PopularPerson(x) & FlyingFromNewYork(x) & FlyingFromToSeattle(x))", "exists x.(Person(x) & FlyingFromNewYorkToSeattle(x))", "exists x.(Person(x) & FlyingFromNewYorkToSeattle(x) & Uncomfortable(x))", "exists x.(Flight(x) & NewYorkToSeattle(x) & Uncomfortable(x))", "exists x.(Flight(x) & NewYorkCityToSeattle(x))"]}
{"id": "folio_train_434", "nl": "No road is clean.", "fol": "all x.(IsRoad(x) -> -IsClean(x))", "prediction": ["-exists x.(Road(x) & Clean(x))", "-exists x.(Road(x) & Clean(x))", "-exists x.(Road(x) & Clean(x))", "-exists x.(Road(x) & Clean(x))", "-all x.(Road(x) -> Clean(x))", "-exists x.(Road(x) & Clean(x))", "-exists x.(Road(x) & Clean(x))", "-exists x.(Road(x) & Clean(x))", "-exists x.(Road(x) & Clean(x))", "-all x.(Road(x) -> Clean(x))", "-exists x.(Road(x) & Clean(x))", "-exists x.(Road(x) & Clean(x))", "-exists x.(Road(x) & Clean(x))", "-exists x.(Road(x) & Clean(x))", "-exists x.(Road(x) & Clean(x))", "-exists x.(Road(x) & Clean(x))"]}
{"id": "folio_train_435", "nl": "And some streets are roads.", "fol": "exists x.(IsStreet(x) & IsRoad(x))", "prediction": ["exists x.(Street(x) & Road(x))", "exists x.(Structure(x) & Road(x))", "exists x.(Street(x) & Road(x))", "exists x.(Street(x) & Road(x))", "exists x.(Stade(x) & InStreet(x))", "and exists x.(Street(x) & Road(x))", "exists x.(Street(x) & Road(x))", "exists x.(Street(x) & Road(x))", "exists x.(Road(x) & -Standard(x))", "(exists x.(Street(x) & Road(x)))", "exists x.(Street(x) & Road(x))", "the road.", "exists x.(Street(x) & Road(x))", "(exists x.(Street(x) & Road(x)))", "exist x.(Street(x) & Road(y))", "exists x.(Street(x) & Road(x))"]}
{"id": "folio_train_436", "nl": "Some streets are clean", "fol": "exists x.(IsStreet(x) & IsClean(x))", "prediction": ["exists x.(Street(x) & Clean(x))", "exists x.(Street(x) & Clean(x))", "exists x.(Street(x) & Clean(x))", "exists x.(Street(x) & Clean(x))", "exists x.(Street(x) & Clean(x))", "exists x.(Street(x) & Clean(x))", "exists x.(Street(x) & Clean(x))", "exists x.(Street(x) & Clean(x))", "exists x.(Street(x) & Clean(x))", "exists x.(Street(x) & Clean(x))", "exists x.(Street(x) & Clean(x))", "exists x.(Street(x) & Clean(x))", "exists x.(Street(x) & Clean(x))", "exists x.(Street(x) & Clean(x))", "exists x.(Street(x) & Clean(x))", "exists x.(Street(x) & Clean(x))"]}
{"id": "folio_train_437", "nl": "Musicians have very busy lives.", "fol": "all x.(IsMusician(x) -> HasBusyLife(x))", "prediction": ["all x.(Musician(x) -> HasBusyLives(x))", "all x.(Musician(x) -> HasBusyLife(x))", "all x.(Musician(x) -> VeryBusyLife(x))", "all x.(Musician(x) -> VeryBusyLives(x))", "all x y.((Musician(x) & LivesWith(y,x)) -> VeryBusy(x))", "all x.(Musician(x) -> VeryBusyLife(x))", "all x.(Musician(x) -> VeryBusyLives(x))", "all x.(Musician(x) -> VeryBustyLife(x))", "all x.(Musician(x) -> VeryBustyLives(x))", "all x.(Musician(x) -> Busy(x))", "all x.(Musician(x) -> BusyLife(x))", "all x.(Musician(x) -> HasBusyLives(x))", "all x.(Musician(x) -> HasBusyLives(x))", "all x.(Musician(x) -> AllMustOfLife(x))", "all x.(Musician(x) -> HasBucktasticLives(x))", "all x y.((Musician(x) & Lives(y)) -> Busy(x))"]}
{"id": "folio_train_438", "nl": "Singh Kaur is a musician and famous.", "fol": "(IsMusician(SinghKaur) & IsFamous(SinghKaur))", "prediction": ["Singh Kaur (Musician and Famous(SinghKaur,Kaur))", "SinghKaur(Singh)", "SinghKaur(Jungler(Jungler) & Famous(Jungler))", "SinghKaur(SRK) (Musician(SRK) & Famous(SRK)))", "SinghKaur (Musician(Singh) & Famous(Singh))", "Singh Kaur (Musician,Famous) & Produces(Singh,Rapbook,Musician,Bandit))", "SinghKaur (Musician(mp3) & Famous(mp3))", "Singh Kaur (n.d.(Musician(d) & Famous(d)) -> SinghKaur(k))", "Singh Kaur (Singh) & Musician (Musician) & Famous(Musician))", "SinghKaur(Kaur) -> (Musician(Kaur) & Famous(Kaur)))", "SinghKaur (Musician(Singh) & Famous(Singh))", "Singh Kaur is a musician and famous for his songs.", "Singh Kaur (SinghRahi) \u2013 (Musician(s) & Famous(s)))", "Singh Kaur is a musician and famous.", "-(SinghKaur(x) & Musician(x) & Famous(x))", "Singh Kaur (est.(Musician(x) & Famous(x)))"]}
{"id": "folio_train_439", "nl": "If a musician is not famous, that musician will not make a lot of money.", "fol": "all x.((IsMusician(x) & -IsFamous(x)) -> -EarnMoney(x))", "prediction": ["all x.((Musician(x) & -Famous(x)) -> -MakesLotOfMoney(x))", "all x.((Musician(x) & -Famous(x)) -> -MakingLotOfMoney(x))", "all x.((Musician(x) & -Famous(x)) -> -MakeMajority(x))", "all x.((Musician(x) & -Famous(x)) -> -MakesLotOfMoney(x))", "all x.((Musician(x) & -Famous(x)) -> -MakesLotOfMoney(x))", "all x.((Musician(x) & -Famous(x)) -> -MakesMuchOfMoney(x))", "all x.((Musician(x) & -Famous(x)) -> -MakesLossOfMoney(x))", "all x.((Musician(x) & -Famous(x)) -> -MakesLotOfMoney(x))", "all x.((Musician(x) & NotFamous(x)) -> -MakesLotOfMoney(x))", "all x.((Musician(x) & -Famous(x)) -> -MakesMillions(x))", "all x.((Musician(x) & -Famous(x)) -> -MakesMillions(x))", "all x.((Musician(x) & -Famous(x)) -> -MakesLossOfMoney(x))", "all x.((Musician(x) & -Famous(x)) -> -MakesLotOfGladMoney(x))", "all x.((Musician(x) & -Famous(x)) -> -MakesLotOfMoney(x))", "all x.((Musician(x) & -Famous(x)) -> -MakingLittleOfMoney(x))", "all x.((Musician(x) & -Famous(x)) -> -MakeSmallOfMoney(x))"]}
{"id": "folio_train_440", "nl": "A musician can be a singer or a writer.", "fol": "exists x.((IsMusician(x) & IsSinger(x)) | IsWriter(x))", "prediction": ["all x.(Musician(x) -> (Singer(x) | Writer(x)))", "all x.(Musician(x) -> (Singer(x) | Writer(x)))", "all x.(Musician(x) -> (Singer(x) | Writer(x)))", "all x.(Musician(x) -> (Singer(x) | Writer(x)))", "all x.(Musician(x) -> (Singer(x) | Writer(x)))", "all x.(Musician(x) -> (Singer(x) | Writer(x)))", "all x.(Musician(x) -> (Singer(x) | Writer(x)))", "all x.(Musician(x) -> (Singer(x) | Writer(x)))", "all x.(Musician(x) -> (Singer(x) | Writer(x)))", "all x.(Musician(x) -> (Singer(x) | Writer(x)))", "all x.(Musician(x) -> (Singer(x) | Writer(x)))", "all x.(Musician(x) -> (Singer(x) | Writer(x)))", "all x.(Musician(x) -> (Singer(x) | Writer(x)))", "exists x.(Musician(x) & (Singer(x) | Writer(x)))", "all x.(Musician(x) -> (Singer(x) | Writer(x)))", "all x.(Musician(x) -> (Singer(x) | Writer(x)))"]}
{"id": "folio_train_441", "nl": "Singh Kaur makes a lot of money.", "fol": "EarnMoney(SinghKaur)", "prediction": ["all x.(SinghKaur(x) -> (MakesLotOfMoney(x)))", "SinghKaur MakesLossOfMoney(x)", "all x.(SinghKaur(x) -> MakesLotOfMoney(x))", "all x.(SinghKaur(x) -> Makes(x,y))", "all x y.((SinghKaur(x) & Corporation(y)) -> MakesMoreMoney(x,y))", "all x.(SinghKaur(x) -> MakesLotOfMoney(x))", "all x.(SinghKaur(x) -> MakesLotOfMoney(x))", "all x.(SinghKaur(x) -> MakesLimitedMoney(x))", "all x.(SinghKaur(x) -> MakesLotOfMoney(x))", "(MakingMoney(SinghKaur)", "SinghKaurMakesLittleMoney(Sinnaz)", "all x y.((SingingKaur(x) & Money(y)) -> Makes(x,y))", "all x.(SinghKaur(x) -> MakesLotOfMoney(x))", "SinghKaurMakesLotsOfFunds(SinghKaur)", "all x y.((SingerKaur(x) & Money(y)) -> Makes(x,y))", "all x.(SinghKaur(x) -> MakesAmountOfMoney(x))"]}
{"id": "folio_train_442", "nl": "Singh Kaur is a writer.", "fol": "IsWriter(SinghKaur)", "prediction": ["Singh Kaur is a writer.", "SinghKaur(Singh)", "Singh Kaur is a writer.", "SinghKaur(s) -> Writer(s))", "SinghKaur is a Writer.", "Singh Kaur is a writer.", "all x.(SinghKaur(x) -> Writer(x))", "SinghKaurDarshan(s).(Writer(s) & Writer(s))", "Singh Kaur is a writer.", "Singh Kaur is a writer.", "Singh Kaur is a writer.", "(Writer(singhKaur)", "Singh Kaur (Writer)", "all x.(SinghKaur(x) -> Writer(x))", "Singh Kaur is Writer.", "Singh Kaur is a writer."]}
{"id": "folio_train_443", "nl": "Singh Kaur has a very busy life.", "fol": "HasBusyLife(SinghKaur)", "prediction": ["SinghKaur has a very busyLife(single-ceremony)", "all x.(SinghKaur(x) -> VeryBusyLife(x))", "SinghKaur has a busyLife(SinghKaur)", "SinghKaur, hasBusyLife(singhkaur)", "Singh Kaur has a busyLife(SinghKaur)", "SinghKaurHasBusyLife(s)", "SinghKaurHasBusyLife(s)", "all x.(SinghKaur(x) -> VeryBucketLive(x))", "all x.((SinghKaur(x) & VeryBusyLife(x)) -> Has(x,y))", "indianskgar.singhkaur.life.(SinghKaur) : VeryBusyLife(SinghKaur))", "Singh Kaur is very busy.", "all x y.((SinghKaur(x) & LivesIn(x,y)) -> BusyLife(x))", "all x.(SinghKaur(x) -> BusyLife(x))", "all x.(SinghKaur(x) -> VeryBusyLife(x))", "Singh Kaur has a very busyLife(singh)", "Singh Kaur is very busy."]}
{"id": "folio_train_444", "nl": "Each building is tall. ", "fol": "all x.(IsBuilding(x) -> -IsTall(x))", "prediction": ["exists x.(Building(x) & Tall(x))", "all x.(Building(x) -> Tall(x))", "all x.(Building(x) -> Tall(x))", "every building is tall.", "all x.(Building(x) -> Tall(x))", "all x.(Building(x) -> Tall(x))", "all x.(Building(x) -> Tall(x))", "all x.(Building(x) -> Tall(x))", "all x.(Building(x) -> Tall(x))", "all x.(Building(x) -> Tall(x))", "all x.(Building(x) -> Tall(x))", "all x.(Building(x) -> Tall(x))", "all x.(Building(x) -> Tall(x))", "all x.(Building(x) -> Tall(x))", "all x.(Building(x) -> Tall(x))", "all x.(Building(x) -> Tall(x))"]}
{"id": "folio_train_445", "nl": "Everything tall has  height.", "fol": "all x.(IsTall(x) -> HasHeight(x))", "prediction": ["all x.(Tall(x) -> HasHeight(x))", "all x.(Tall(x) -> HasHeight(x))", "all x.(Tall(x) -> HasHeight(x))", "all x.(Tall(x) -> HasHeight(x))", "all x.(Tall(x) -> HasHeight(x))", "all x.(Tall(x) -> HasHeight(x))", "all x.(Tall(x) -> HasHeight(x))", "all x.(Tall(x) -> (HasHeight(x)))", "all x.(Tall(x) -> HasHeight(x))", "all x.(Tall(x) -> HasHeight(x))", "all x.(Tall(x) -> HasHeight(x))", "all x.(Tall(x) -> HasHeight(x))", "all x.(Tall(x) -> HasHeight(x))", "all x.(Tall(x) -> HasHeight(x))", "all x.(Tall(x) -> HasHeight(x))", "all x.(Tall(x) -> HasHeight(x))"]}
{"id": "folio_train_446", "nl": "All buildings are magnificent.", "fol": "all x.(IsBuilding(x) -> Magnificent(x))", "prediction": ["all x.exists y.(Building(x) & Stunning(y))", "all x.(Building(x) -> Magnificent(x))", "all x.(Building(x) -> Magnificent(x))", "all x.(Building(x) -> Magnificent(x))", "all x.(Building(x) -> Magnificent(x))", "all x.(Building(x) -> Magnificent(x))", "all x.(Building(x) -> Beautiful(x))", "all x.(Building(x) -> Magnificent(x))", "all x.(Building(x) -> Magnificent(x))", "all x.(Building(x) -> Prachtful(x))", "all x.(Building(x) -> Praesent(x))", "all x.(Building(x) -> Magnificent(x))", "all x.(Building(x) -> Beautiful(x))", "all x.(Building(x) -> Magnificent(x))", "all x.(Building(x) -> Magnificent(x))", "all x.(Building(x) -> Stunning(x))"]}
{"id": "folio_train_447", "nl": "A cat named Garfield, which is the main character of the film Garfield, is orange and fat and likes having lasagna. ", "fol": "(IsCat(Garfield) & IsMainCharacterOfGarfield(Garfield) & IsOrange(Garfield) & IsFat(Garfield) & LikesLasagna(Garfield))", "prediction": ["all x.(Cat(x) -> (Guarfield(x) & MainCharacterOfFilmGarfield(x) & Orange(x) & Fat(x) & LikesLasagne(x)))", "all x y z.((Cat(x) & NameGarfield(y) & Film(z) & MainCharacterOfGarfield(y,z)) -> (Orange(x) & Fat(x) & LikesLasagne(x)))", "all x.((Cat(x) & Garfield(x)) -> (MainCharacterOfFilmGarfield(x) & Orange(x) & Fat(x) & LikesLasagne(x)))", "all x.(Cat(x) -> (Garfield(x) & MainCharacterOfFilmGarfield(x))), Orange(x) & Fat(x) & LikesLasagne(x)))", "all x.((Cat(x) & Garfield(x)) -> (MainCharacterOfFilmGarfield(x) & Orange(x) & Fat(x) & LikesLasagne(x)))", "all x.((Cat(x) & Garfield(x) & MainCharacterOfFilmGarfield(x)) -> (Orange(x) & Fat(x) & LikesLasagne(x)))", "all x.((Cat(x) & Garfield(x) & MainCharacterOfFilmGarfield(x)) -> (Orange(x) & Fat(x) & LikesLasagne(x)))", "all x.((Cat(x) & Garfield(x)) -> (MoonCharacter(x) & Orange(x) & Fat(x) & LikesLasagne(x)))", "all x.((Cat(x) & Garfield(x) & MainCharacterOfFilmGarfield(x)) -> (Orange(x) & Fat(x) & LikesLasagne(x)))", "all x.((Cat(x) & Garfield(x) & MainCharacterOfFilmGarfield(x)) -> (Orange(x) & Fat(x) & LikesLasagne(x)))", "all x.((Cat(x) & Garfield(x) & Character(x) & Film(x Garfield)) -> (Orange(x) & Fat(x) & LikesLasagna(x)))", "all x.((Cat(x) & Garfield(x) & MainCharacterOfFilmGarfield(x)) -> (Orange(x) & Fat(x) & LikesLasagne(x)))", "all x y.((Cat(x) & Cat(y) & Garfield(x)) -> (BaseCharacterOfFilmGarfield(x) & OrangeFat(y) & LikesLasagne(x)))", "all x.((Cat(x) & Garfield(x) & MainCharacterOfFilm(x Garfield)) -> (Orange(x) & Fat(x) & LikesLasagne(x)))", "all x y z.((Cat(x) & Garfield(y) & FilmGarfield(z)) -> (Orange(y) & Fat(y) & LikesLasagne(y)))", "all x.((Cat(x) & Garfield(x) & MainCharacterOfFilm(x,Garfield)) -> (Orange(x) & Fat(x) & LikesLasagne(x)))"]}
{"id": "folio_train_448", "nl": "Garfield and Odie, who is another pet of Jon, share the same home. ", "fol": "(IsPetOf(Garfield,Jon) & IsPetOf(Odie,Jon) & SharesHomeWith(Garfield,Odie))", "prediction": ["(Pet(Garfield) & Pet(Odie) & Pet(Garfield,Jon) & UnlikeSameHome(Garfield,Odie))", "all x y z.((Garfield(x) & Odie(y) & Jon(z)) -> SharesHome(x,y,z))", "(Pet(Garfield) | Pet(Odie)) & SharesHome(Garfield,Odie))", "all x.((Garfield(x) | Odie(x)) -> ShareHome(x,y))", "Garfield and Odie, who is another pet(Jon) & HasHome(Garfield,Jon))", "all x.((Pet(x) & Pet(x)) -> (Garfield(x) | Odie(x)) & SameHome(x)))", "((Pet(Garfield) & Pet(Odie)) | Pet(Odie)) -> SameHome(Garfield,Odie))", "All x y.((Garfield(x) & Odie(y) & PetOf(y,Kon)) -> SharesHome(x,y))", "all x.((Garfield(x) | Odie(x)) -> ShareHome(x))", "all x.((PetOfPet(x,jon,garden) | PetOde(x,odia)) -> SharesHome(x))", "all x.((Pet(x) & Home(y) & Pet(x)) -> (Garfield(x) & Odie(x) & Pet(y) & Pet(y)))", "(PetOfJon(Garfield) & PetPetOfOdie(Odie))", "(Witness & Home(Garfield) & Pet(Odie))", "((Garfield(Garfield) | Odie(Odie)) & PetOfJon(Garfield)) -> ShareHome(Garfield))", "(Pet(Garfield) & Pet(Odie) & PetOf(Garfield))", "((Garfield(Garfield) | Odie(Odie)) & PetOf(Garfield)) -> SharesHome(Garfield,Odie))"]}
{"id": "folio_train_449", "nl": "Garfield hates Odie.", "fol": "Hates(Garfield,Odie)", "prediction": ["all x.(Garfield(x) -> HatesOdie(x))", "the guy hates(Garfield,Odie)", "Garfield hatesOdie(Garfield,Italian)", "Garfield hatesOdie.", "All x.(GarfieldHas(x,Odie) -> Hates(x,Odie))", "HatesOdie(Garfield).", "Odie hatesGarfield.", "Garfield hatesOdie(Garfield)", "Has(Garfield,Odie)", "all x.(Garfield(x) -> HatesOdie(x))", "Garfield HatesOdie(Garfield,Alcoholic)", "(Has(Garfield,Odie) & Hates(Garfield,Odie))", "all x.(Garfield(x) -> HatesOdie(x))", "HasOdie(Garfield)", "HatesOdie(Garfield)", "(Hats(Garfield,Odie))"]}
{"id": "folio_train_450", "nl": "A pet who hates the pet with whom he shares the same owner is childish and possessive.", "fol": "all x.(exists y z.(IsPetOf(x,z) & IsPetOf(y,z) & Hates(x,y)) -> (IsChildish(x) & IsPossessive(x)))", "prediction": ["all x y z.((Pet(x) & Pet(y) & Owner(z) & Hates(x,y,z)) -> (Childish(x) & Possessional(x)))", "all x y.((Pet(x) & Horrible(y) & Owner(x,y)) -> Childish(x) & Possessed(x))", "all x.((Pet(x) & Hates(x) & Pet(x) & SharesOwner(x)) -> ChildishAndProstitutive(x))", "all x.((Pet(x) & HatesLovebird(x)) -> (Childish(x) & Possessory(x)))", "all x y.((Pet(x) & Pet(y) & Hates(x,y)) -> (Childish(x) & Possessorive(x)))", "all x y.((Pet(x) & Pet(y) & HasSameOwner(x,y) & HasSameOwner(y)) -> ChildishAndPotential(x))", "all x y.((Pet(x) & Pet(y) & HasEqualOwner(x,y)) -> (Childish(x) & Possessionive(x)))", "all x.((Pet(x) & Hates(x,y) & Pet Owner(y)) -> Childish(x) & Positive(x))", "all x y.((Pet(x) & Pet(y) & HasEarned(x,y) & HasEarned(y)) -> (Childish(x) & Possessory(x)))", "all x.((Pet(x) & HasSameOwner(x)) -> (Childish(x) & Possesses(x)))", "all x y.((Pet(x) & Pet(y) & HasNearMammal(x,y)) -> (Childish(x) & Possessory(x)))", "all x.((Pet(x) & Hates(x,y) & Owner(y)) -> (Childish(x) & Possesseive(x)))", "all x y.((Pet(x) & Pet(y) & HasOwner(x,y) & HasOwner(x,y)) -> (Childish(x) & Possessorive(x)))", "all x y.((Pet(x) & Pet(y) & HasHate(x,y)) -> (Childish(x) & Possesses(x)))", "all x.((Pet(x) & Hates(x,y) & Owner(y) & Shares(x,y)) -> ChildishAndPossessional(x))", "all x.((Pet(x) & HasPet(x) & SharesOwner(x,Y)) -> (Childish(x) & Possessional(x)))"]}
{"id": "folio_train_451", "nl": "Cats are pets. ", "fol": "all x.exists y.(IsCat(x) -> IsPetOf(x,y))", "prediction": ["all x.(Cat(x) -> Pet(x))", "all x.(Cat(x) -> Pet(x))", "all x.(Cat(x) -> Pet(x))", "all x.(Cat(x) -> Pet(x))", "all x.(Cat(x) -> Pet(x))", "all x.(Cat(x) -> Pet(x))", "all x.(Cat(x) -> Pet(x))", "all x.(Cat(x) -> Pet(x))", "all x.(Cat(x) -> Pet(x))", "all x.(Cat(x) -> Pet(x))", "all x.(Cat(x) -> Pet(x))", "all x.(Cat(x) -> Pet(x))", "all x.(Cat(x) -> Pet(x))", "all x.(Cat(x) -> Pet(x))", "all x.(Cat(x) -> Pet(x))", "all x.(Cat(x) -> Pet(x))"]}
{"id": "folio_train_452", "nl": "The main character of the film Garfield is childish and possessive.", "fol": "exists x.(IsMainCharacterOfGarfield(x) & IsChildish(x) & IsPossessive(x))", "prediction": ["the main character of the film Garfield is ChildishAndPossessionivistic(Garfield)", "(MainCharacter(Garfield) -> Adult(Garfield))", "all x.(Garfield(x) -> (Childish(x) & Possesses(x)))", "all x.(Garfield(x) -> (Childish(x) & Possessional(x)))", "((MainCharacterOfGarfield(x) & Childish(x)) | Possession(x)))", "all x.(MajorCharacter(x) -> (Garfield(x) & Childish(x) & Possessionive(x)))", "all x.((FilmGarfield(x) & Childish(x) & Possessory(x)) -> FilmProducer(x))", "(MainCharacter(Garfield) & Childish(Garfield) & Possesses(Garfield))", "all x.(Garfield(x) -> (Childish(x) & Possesses(x)))", "(Childish(garfield) & Possesseive(garfield))", "all x.((FilmGarfield(x) & Childish(x) & Possessionive(x)) -> MainCharacter(x))", "Leigh McCall & James McDonough (Hardly(Garfield))", "(MainCharacter(x) & Childish(x) & Possessional(x))", "(MainCharacter(Garfield) : Childish(Garfield) & Possessionive(Garfield))", "(MainCharacter(JanField(Garfield) & Childish(Garfield) & Possessory(Garfield))", "all x.((Caracter(x) & FilmGarfield(x)) -> (Childish(x) & Possessionive(x)))"]}
{"id": "folio_train_453", "nl": "All humans eat.", "fol": "all x.(IsHuman(x) -> Eats(x))", "prediction": ["all x.(Human(x) -> Eat(x))", "all x.(Human(x) -> Eats(x))", "all x.(Human(x) -> Eats(x))", "all x.(Human(x) -> Eats(x))", "all x.(Human(x) -> Eats(x))", "all x.(Human(x) -> Eats(x))", "all x.(Human(x) -> Eats(x))", "all x.(Human(x) -> Eats(x))", "all x.(Human(x) -> Eats(x))", "all x.(Human(x) -> Eats(x))", "all x.(Human(x) -> Eats(x))", "all x.(Human(x) -> Eates(x))", "all x.(Human(x) -> Eats(x))", "all x.(Human(x) -> Eats(x))", "all x.(Human(x) -> Eats(x))", "all x.(Human(x) -> Eats(x))"]}
{"id": "folio_train_454", "nl": "If something eats, then it is not a plant.", "fol": "all x.(Eats(x) -> -IsPlant(x))", "prediction": ["all x.(Eats(x) -> -Plant(x))", "all x.(Eats(x) -> -Plant(x))", "all x.((Eats(x) & -Plant(x)) -> -Plant(x))", "all x.((Eats(x) & -Plant(x)) -> -Plant(x))", "all x.((Eats(x) & -Plant(x)) -> -Plant(x))", "all x.((Eats(x) | Plant(x)) -> -Plant(x))", "all x.(Eats(x) -> -Plant(x))", "all x.((Eats(x) & Plant(x)) -> -Plant(x))", "all x.((Eats(x)) -> -Plant(x))", "all x.(Eats(x) -> -Plant(x))", "all x.((Eats(x) & -Plant(x)) -> -Plant(x))", "all x.((Eats(x) & -Plant(x)) -> -Plant(x))", "all x.(Eats(x) -> -Plant(x))", "all x.((Eats(x) & Plant(x)) -> -Plant(x))", "all x.(Eats(x) -> -Plant(x))", "all x.(Eats(x) -> -Plant(x))"]}
{"id": "folio_train_455", "nl": "A thing is either plant or animal.", "fol": "all x.(IsPlant(x) | IsAnimal(x))", "prediction": ["all x.(Thing(x) -> (Plant(x) | Animal(x)))", "all x.(Thing(x) -> (Plant(x) | Animal(x)))", "all x.(Thing(x) -> (Plant(x) | Animal(x)))", "all x.(Ding(x) -> (Plant(x) | Animal(x)))", "all x.(Thing(x) -> (Plant(x) | Animal(x)))", "exists x.(Thing(x) & (Plant(x) | Animal(x)))", "all x.(Nature(x) -> (Plant(x) | Animal(x)))", "all x.(Ding(x) -> (Plant(x) | Animal(x)))", "all x.(Thing(x) -> (Plant(x) | Animal(x)))", "all x.(Thing(x) -> (Plant(x) | Animal(x)))", "all x.(Thing(x) -> (Plant(x) | Animal(x)))", "all x.(Thing(x) -> (Plant(x) | Animal(x)))", "all x.(Tease(x) -> (Plant(x) | Animal(x)))", "all x.(Thing(x) -> (Plant(x) | Animal(x)))", "all x.(Thing(x) -> (Pest(x) | Animal(x)))", "exists x.(Thing(x) & (Plant(x) | Animal(x)))"]}
{"id": "folio_train_456", "nl": "All goats are animals.", "fol": "all x.(IsGoat(x) -> IsAnimal(x))", "prediction": ["all x.(Girl(x) -> Animal(x))", "all x.(Goat(x) -> Animal(x))", "all x.(Goat(x) -> Animal(x))", "all x.((Girl(x) & Animal(x)) -> Animal(x))", "all x.(Goat(x) -> Animal(x))", "all x.(Goat(x) -> Animal(x))", "all x.(Goat(x) -> Animal(x))", "all x.(Goat(x) -> Animal(x))", "all x.(Girl(x) -> Animal(x))", "all x.(Goat(x) -> Animal(x))", "all x.(Goat(x) -> Animal(x))", "all x.(Goat(x) -> Animal(x))", "all x.(Goat(x) -> Animal(x))", "all x.(Goat(x) -> Animal(x))", "all x.(Goat(x) -> Animal(x))", "all x.(Goat(x) -> Animal(x))"]}
{"id": "folio_train_457", "nl": "No dirt is an animal.", "fol": "all x.(IsDirt(x) -> -IsAnimal(x))", "prediction": ["all x.(Dirt(x) -> Animal(x))", "-exists x.(Dirt(x) & Animal(x))", "-exists x.(Dirt(x) & Animal(x))", "-exists x.(Dirt(x) & Animal(x))", "all x.(Dirt(x) -> -Animal(x))", "-exists x.(Dirt(x) & Animal(x))", "-exists x.(Dirt(x) & Animal(x))", "all x.(Dirt(x) -> -Animal(x))", "-exists x.(Dirt(x) & Animal(x))", "-exists x.(Dirt(x) & Animal(x))", "-exists x.(Dirt(x) & Animal(x))", "all x.(Dirt(x) -> Animal(x))", "-exists x.(Dirt(x) & Pet(x))", "all x.(Dirt(x) -> Animal(x))", "-exists x.(Dirt(x) & Animal(x))", "-exists x.(Dirt(x) & -Animal(x))"]}
{"id": "folio_train_458", "nl": "Hulu is a goat or a human.", "fol": "(IsGoat(Hulu) | IsHuman(Hulu))", "prediction": ["all x.(Hulu(x) -> (Goat(x) | Human(x)))", "all x.(Hulu(x) -> (Goat(x) | Human(x)))", "all x.(Human(x) & (Goat(x) | Human(x)))", "all x.(Hulu(x) -> (Goat(x) | Human(x)))", "(goat(Hulu) | human(Hulu))", "all x.(Houlu(x) -> (Goat(x) | Human(x)))", "all x.(Hulu(x) -> (Goat(x) | Human(x)))", "all x.(Hulu(x) -> (Goat(x) | Human(x)))", "(Goat(Hulu) | Human(Hulu))", "all x.(Hulu(x) -> (Goat(x) | Human(x)))", "all x.(Human(x) -> (Goat(x) | Human(x)))", "all x.(Hulu(x) -> (Goat(x) | Human(x)))", "all x.(Hulu(x) -> (Goat(x) | Human(x)))", "all x.(Hulu(x) -> (Goat(x) | Human(x)))", "all x.(Human(x) -> (Hulu(x) | Goat(x)))", "exists x.(Human(x) & (Goat(x) | Human(x)))"]}
{"id": "folio_train_459", "nl": "Hulu eats.", "fol": "Eats(Hulu)", "prediction": ["all x.(Hulu(x) -> Eats(x))", "all x.(Hulu(x) -> Eats(x))", "all x.(Hulu(x) -> Eats(x))", "all x.(Hulu(x) -> Eats(x))", "-Eats(Hulu)", "(HuluEats(Hulu))", "all x.(Hulu(x) -> Eats(x))", "all x.(Hulu(x) -> Eats(x))", "all x.(Hulu(x) -> Eats(x))", "all x.(Hulu(x) -> Eats(x))", "all x.(Hulu(x) -> Eats(x))", "(Eats(Hulu))", "all x.(Hulu(x) -> Eats(x))", "all x.(Hulu(x) -> Eats(x))", "all x.(Hulu(x) -> Eats(x))", "(Eats(Hulu) -> Eats(Hulu))"]}
{"id": "folio_train_460", "nl": "Hulu does not eat.", "fol": "-Eats(Hulu)", "prediction": ["-Eat(Hulu)", "all x.(Hulu(x) -> -Eat(x))", "exists x.(Hulu(x) & -Eat(x))", "all x.(Hulu(x) -> -Eats(x))", "-Eats(Hulu)", "(Doesn'tEat(Hulu))", "exists x.(Hulu(x) & -Eats(x))", "Hulu -Eats(h)", "(-EatsHulu(Hulu))", "(-Eats(Hulu,x))", "(-Eats(Hulu))", "(-Eat(Hulu))", "Hulu does notEat(h)", "Hulu -Eats(Hulu)", "all x.(Hulu(x) -> -Eats(x))", "all x.(Hulu(x) -> -Eats(x))"]}
{"id": "folio_train_461", "nl": "Hulu is dirt.", "fol": "IsDirt(Hulu)", "prediction": ["all x.(Hulu(x) -> Dirt(x))", "(Dust(Hulu))", "(Dirt(hulu) & Dirt(h))", "(Dirt(Hulu) & -Dirt(Hulu))", "StrictlyDirt(Hulu)", "all x.(Hulu(x) -> Dirt(x))", "L\u2019Hulus est Dirt(HUU)", "All x.(Hulu(x) -Dirt(x))", "(Dirt(Hulu))", "(Dum(Hulu) -> Is(Hulu))", "Hulu is dirt.", "All x.(Hulu(x) -> Dirt(x))", "All x.(Hulu(x) -> Dirt(x))", "(Dirt(Hulu))", "all x.(Hulu(x) -> Dirt(x))", "(Dirt(Hulu) | Dirt(Hulu))"]}
{"id": "folio_train_462", "nl": "Hulu is an animal or dirt.", "fol": "(IsAnimal(Hulu) | IsDirt(Hulu))", "prediction": ["all x.(Hulu(x) -> (Animal(x) | Dirt(x)))", "all x.(Hulus(x) -> (Animal(x) | Dirt(x)))", "all x.(Hulu(x) -> (Animal(x) | Dirt(x)))", "(Animal(Hulu) | Dirt(Hulu))", "all x.(Hulu(x) -> (Animal(x) | Dirt(x)))", "all x.(Hulu(x) -> (Animal(x) | Dirt(x)))", "(Other(Hulu) & (Animal(Hulu) | Dirt(Hulu)))", "all x.(Hulu(x) -> (Animal(x) | Dirt(x)))", "all x.(Hulu(x) -> (Animal(x) | Dirt(x)))", "all x.(Hulu(x) -> (Animal(x) | Dirt(x)))", "all x.(Hulu(x) -> (Animal(x) | Dirt(x)))", "all x.(Hulu(x) -> (Animal(x) | Dirt(x)))", "Hulu (Animal(h) | Dirt(h)))", "all x.(Hulu(x) -> (Animal(x) | Dirt(x)))", "all x.(Hulu(x) -> (Animal(x) | Dirt(x)))", "all x.(Hulu(x) -> (Animal(x) | Dirt(x)))"]}
{"id": "folio_train_463", "nl": "Hulu is either an animal or dirt.", "fol": "(IsAnimal(Hulu) | IsDirt(Hulu))", "prediction": ["all x.(Hulu(x) -> (Animal(x) | Dirt(x)))", "all x.(Hulu(x) -> (Animal(x) | Dirt(x)))", "All x.(Hulu(x) -> (Animal(x) | Dirt(x)))", "all x.(Hulu(x) -> (Animal(x) | Dirt(x)))", "all x.(Hulu(x) -> (Animal(x) | Dirt(x)))", "Hulu (Animal(h) | Dirt(h)))", "exists x.(Hulu(x) & (Animal(x) | Dirt(x)))", "all x.(Hulu(x) -> (Animal(x) | Dirt(x)))", "all x.(Hulu(x) -> (Animal(x) | Dirt(x)))", "(Other(Hulu) | Dirt(Hulu))", "all x.(Hulu(x) -> (Animal(x) | Dirt(x)))", "all x.(Hulus(x) -> (Animal(x) | Dirt(x)))", "all x.(Hulu(x) -> (Animal(x) | Dirt(x)))", "all x.(Hulu(x) -> (Animal(x) | Dirt(x)))", "(Animal(Hulu) | Dirt(Hulu))", "all x.(Huulu(x) -> (Animal(x) | Dirt(x)))"]}
{"id": "folio_train_464", "nl": "If Hulu is either an animal or dirt, then Hulu eats and is dirt.", "fol": "((IsAnimal(Hulu) | IsDirt(Hulu)) -> (Eats(Hulu) & IsDirt(Hulu)))", "prediction": ["all x.((Hulu(x) & (Animal(x) | Dirt(x))) -> (Eats(x) & Dirt(x)))", "all x.((Hulu(x) & (Animal(x) | Dirt(x))) -> eats(x) & Dirt(x)))", "all x.((Hulu(x) & (Animal(x) | Dirt(x))) -> (Eats(x) & Dirt(x)))", "all x.((Hulu(x) & (Animal(x) | Dirt(x))) -> (Eats(x) & Dirt(x)))", "all x.((Hulu(x) & (Animal(x) | Dirt(x))) -> EatsAndDurable(x))", "all x.((Hulu(x) & (Animal(x) | Dirt(x))) -> EatsAndDirt(x))", "all x.((Hulu(x) & (Animal(x) | Dirt(x))) -> EatsAndDirt(x))", "all x.((Hulu(x) & (Animal(x) | Dirt(x))) -> (Eats(x) & Dirt(x)))", "all x.((Hulu(x) & (Animal(x) | Dirt(x))) -> (Eats(x) & Dirt(x)))", "all x.((Hulu(x) & (Animal(x) | Dirt(x))) -> EatsAndDirt(x))", "all x.((Hulu(x) & (Animal(x) | Dirt(x))) -> EatsAndDirt(x))", "all x.((Hulu(x) & (Animal(x) | Dirt(x))) -> (Eats(x) & isDirt(x)))", "all x.((Hulu(x) & (Animal(x) | Dirt(x))) -> (Eats(x) & Dirt(x)))", "all x.((Hulu(x) & (Animal(x) | Dirt(x))) -> (Eats(x) & Dirt(x)))", "all x.((Hulu(x) & (Animal(x) | Dirt(x))) -> EatsAndIsDirt(x))", "all x.((Hulu(x) & (Animal(x) | Dirt(x))) -> (Eats(x) & Dirt(x)))"]}
{"id": "folio_train_465", "nl": "A controlled substance is a drug.", "fol": "all x.(IsControlledSubstance(x) -> IsDrug(x))", "prediction": ["all x.((Substance(x) & Controlled(x)) -> Drug(x))", "all x.(ControlledSubstance(x) -> Drug(x))", "all x.(ControlledSubstance(x) -> Drug(x))", "all x.(ControlledSubstance(x) -> Drug(x))", "all x.((ControlledSubstance(x) & Drug(x)) -> (Significant(x) & InControlledSubstance(x)))", "all x.(ControlledSubstance(x) -> Drug(x))", "all x.(ControlledSubstance(x) -> Drug(x))", "all x.(ControlledSubstance(x) -> Drug(x))", "all x.(Containment(x) -> Drug(x))", "all x.(ControlledSubstance(x) -> Drug(x))", "all x.(ControlledSubstance(x) -> Drug(x))", "all x.(ControlledSubstance(x) -> Drug(x))", "all x.(ControlledSubstance(x) -> Drug(x))", "all x.(ControlledSubstance(x) -> Drug(x))", "all x.(ControlledSubstance(x) -> Drug(x))", "all x.(ControlledSubstance(x) -> Drug(x))"]}
{"id": "folio_train_466", "nl": "There exist both harmful and beneficial controlled substances.", "fol": "exists x x.(IsControlledSubstance(x) & IsControlledSubstance(y) & IsBeneficial(x) & IsHarmful(y))", "prediction": ["exists x.(HarmfulSubstance(x) & BeneficialSubstance(x))", "exists x.(HarmfulSubstance(x) & BeneficialControlledSubstance(x))", "exists x.(HarmfulSubstance(x) & BeneficialContainment(x))", "exists x.(HarmfulSubstance(x) & BeneficialControlledSubstance(x))", "exists x.(HoddrousSubstance(x) & BeneficialContainment(x))", "exists x.(HarmfulSubstance(x) & BeneficialContains(x))", "exists x.(Hazardous(x) & BeneficialControlledSubstance(x))", "exists x.(Hazardous(x) & BeneficialContain(x))", "exists x.(HarmfulSubstance(x) & BeneficialContainment(x))", "exists x.(Harmful(x) & Beneficial(x))", "exist x.(Harmful(x) & BeneficialControlledSubstance(x))", "exists x.(HarmfulSubstance(x) & BeneficialControlledSubstance(x))", "exists x.(HealthySubstance(x) & BeneficialControlledSubstance(x))", "exists x.(HazardousSubstance(x) & BeneficialContainment(x))", "exists x.(HarmfulSubstance(x) & BeneficialControlledSubstance(x))", "exists x.(Harmful(x) & Beneficial(x) & Controlled(x))"]}
{"id": "folio_train_467", "nl": "If a child is exposed to a controlled substance, he or she is in chemical endangerment.", "fol": "all x y.(ExposureToControlledSubstance(x,y) -> IsInChemicalEndangerment(x))", "prediction": ["all x.((Child(x) & ExposedToControlledSubstance(x)) -> ChemicalEndangement(x))", "all x.((Child(x) & Exposed(x)) -> ChemicalEndangerment(x))", "all x.(ThanContain(x) -> ChemicalEnangerment(x))", "all x.((Child(x) & ExposedToControlledSubstance(x)) -> ChemicalEndangement(x))", "all x.((Child(x) & ExposedToControlledSubstances(x)) -> ChemicalEndangement(x))", "all x.((Child(x) & ExposureToContaminatedSubstance(x)) -> ChemicalEndangerment(x))", "all x.((Child(x) & ExposedToControlledSubstance(x)) -> ChemicalEndangerment(x))", "all x.((Child(x) & ExposedToControlledSubstance(x)) -> ChemicalEndangement(x))", "all x.((Child(x) & ExposedToControlledSubstance(x)) -> ChemicalEndangerment(x))", "all x.((Child(x) & ExposedToControlledSubstance(x)) -> InChemicalEndangerment(x))", "all x.((Child(x) & ExposedToControlledSubstance(x)) -> ChemicalEndangerment(x))", "all x.((Child(x) & ExposedToControlledSubstance(x)) -> ChemicalEndangement(x))", "all x y z.((Child(x) & ExposedTo(x,y) & Contains(x,z)) -> ChemicalEndangerment(x))", "all x.((Child(x) & ExposedToControlledSubstance(x)) -> ChemicalEndangement(x))", "all x.((Child(x) & ExposedToControlledSubstance(x)) -> ChemicalEndangerment(x))", "all x.((Child(x) & ExposureToControlledSubstance(x)) -> ChemicalEndangerment(x))"]}
{"id": "folio_train_468", "nl": "Chemical Endangerment is harmful. ", "fol": "all x.(IsInChemicalEndangerment(x) -> IsHarmful(x))", "prediction": ["all x.(ChemisticalEndangement(x) -> Harmful(x))", "all x.(ChemistricEndangement(x) -> Harmful(x))", "all x.(ChemicalEndangerment(x) -> Harmful(x))", "all x.(ChemicalEndangerment(x) -> Harmful(x))", "All x.(ChemicalEndangement(x) -> Harmful(x))", "all x.(ChemisticalEndangement(x) -> Harmful(x))", "all x.(ChemicalEndangement(x) -> Harmful(x))", "all x.(ChemicalEndangerment(x) -> Harmful(x))", "all x.(ChemicalEndangerment(x) -> Harmful(x))", "all x.(ChemicalEndangerment(x) -> Harmful(x))", "all x.(ChemicalEndangerment(x) -> Harmful(x))", "all x.(ChemicalEndangerment(x) -> Harmful(x))", "exists x.(ChemicalEndangerment(x) & Harmful(x))", "all x.(ChemicalEndangerment(x) -> Harmful(x))", "all x y.((ChemicalEndangerment(x) & ChemicalEndangered(y)) -> Harmful(x,y))", "all x.(ChemicalEndangerment(x) -> Harmful(x))"]}
{"id": "folio_train_469", "nl": "The Controlled Substances Act was an act passed in 1971.", "fol": "(WasPassedInYear(ControlledSubstancesAct,Year1971) & IsAct(ControlledSubstancesAct))", "prediction": ["the ControlledSubstancesAct(c)  was passed in 1971.", "all x.(ControlledSubstancesAct(x) -> PassedIn72(x))", "the ControlledSubstancesAct(Act) -> PassedIn(Act, 1971))", "all x.(ControlledSubstancesAct(x) -> PassedIn71(x))", "(ActPassedIn(ControlledSubstancesAct) & Date(r) & 1st January(r) & PrintedIn(r)))", "The ControlledSubstancesAct (CSMA) was passed in 1971.", "the ControlledSubstancesAct(c) / PassedIn(c,1971))", "(PassedIn(ControlledSubstancesAct) & DatedIn(ControlledSubstances(Act))", "(LawPassedIn71(ControlledSubstancesAct))", "All x.(ControlledSubstancesAct(x) -> PassedIn71(x))", "All x.(ControlledSubstancesAct(x) -> PassesIn(x,71))", "(ControlledSubstancesAct, 1971), passed in 1971).", "all x.(ControlledSubstancesAct(x) -> PassedIn(x,71))", "all x.(ControlledSubstancesAct(x) -> PassedIn71(x))", "(ControlledSubstancesAct, 1971)", "all x.(ControlledSubstancesAct(x) -> (PassedIn(x,71)))"]}
{"id": "folio_train_470", "nl": "Some Acts prevent harmful things.", "fol": "exists x.(IsAct(x) & PreventsHarmfulEffects(x))", "prediction": ["exists x.(Act(x) & PreventsHarmfulThings(x))", "exists x.(Act(x) & PreventsHarmfulThings(x))", "exists x.(Act(x) & PreventsHarmfulThan(x))", "exists x.(Act(x) & PreventsHarmful(x))", "exists x.(Act(x) & PreventsHarmfulThing(x))", "exists x.(Act(x) & PreventsHarmfulThings(x))", "exists x.(Act(x) & PreventsHarmful(x))", "exists x.(Act(x) & PreventsHarmfulThings(x))", "exists x.(Act(x) & PreventsHarmfulThings(x))", "exists x.(Act(x) & PreventsHarmfulThing(x))", "exists x.(Act(x) & PreventsHarmfulThings(x))", "exists x.(Act(x) & PreventsHarmful(x))", "exists x.(Act(x) & PreventsHarmfulThings(x))", "exists x.(Act(x) & PreventsHarmfulThings(x))", "exists x.(Act(x) & PreventsHarmfulThings(x))", "exists x.(Act(x) & PreventsHarmfulThings(x))"]}
{"id": "folio_train_471", "nl": "The Controlled Substances Act prevents harmful things.", "fol": "PreventsHarmfulEffects(ControlledSubstancesAct)", "prediction": ["all x y.((ControlledSubstancesAct(x) & HarmfulThings(y)) -> Prevents(x,y))", "all x.(ControlledSubstancesAct(x) -> PreventsHarmfulThings(x))", "all x.(ControlledSubstancesAct(x) -> PreventsHarmfulThings(x))", "The ControlledSubstancesAct(ControlledSubstances) Act PreventsHarmfulThings(ControlledSubstances))", "(HarmfulThing(LicensesAct) -> Prevents(LicensesAct,license,license))", "all x.(ControlledSubstancesAct(x) -> PreventsHarmfulThings(x))", "all x.(ControlledSubstancesAct(x) -> PreventsHarmfulThings(x))", "all x.(ControlledSubstancesAct(x) -> PreventsHarmfulThings(x))", "all x.(ControlledSubstancesAct(x) -> PreventsHarmfulThings(x))", "the ControlledSubstancesAct(CSA) preventsHarmfulThings(CSA)", "all x.(ControlledSubstancesAct(x) -> PreventsHarmfulThings(x))", "all x y z.((ControlledSubstance(x) & Thing(y) & Disabled(z)) -> Prevents(x,y,z))", "all x y.((ControlledSubstancesAct(x) & Theme(y)) -> PreventsHarmfulThings(x,y))", "all x y.((ControlledSubstancesAct(x) & AntidangerousThings(y)) -> Prevents(x,y))", "all x y.((ControlledSubstancesAct(x) & Healthless(y)) -> Prevents(x,y))", "all x.(ControlledSubstancesAct(x) -> PreventsHarmfulThings(x))"]}
{"id": "folio_train_472", "nl": "Some drugs are beneficial.", "fol": "exists x.(IsDrug(x) & IsBeneficial(x))", "prediction": ["exists x.(Drug(x) & Beneficial(x))", "exists x.(Drug(x) & Beneficial(x))", "exists x.(Drug(x) & Beneficial(x))", "exists x.(Drug(x) & Beneficial(x))", "exists x.(Drug(x) & Beneficial(x))", "exists x.(Drug(x) & Beneficial(x))", "exists x.(Drug(x) & Beneficial(x))", "exists x.(Drug(x) & Beneficial(x))", "exists x.(Drug(x) & Beneficial(x))", "exists x.(Drug(x) & Beneficial(x))", "exists x.(Drug(x) & Beneficial(x))", "exists x.(Drug(x) & Beneficial(x))", "exists x.(Drug(x) & Beneficial(x))", "exists x.(Drug(x) & Beneficial(x))", "exists x.(Drug(x) & Beneficial(x))", "exists x.(Drug(x) & Beneficial(x))"]}
{"id": "folio_train_473", "nl": "A child in chemical endangerment is in harm.", "fol": "exists x.(IsInChemicalEndangerment(x) -> IsHarmful(x))", "prediction": ["all x.((Child(x) & ChemicalEndangered(x)) -> InHarm(x))", "all x.((Child(x) & ChemicalEnangerment(x)) -> InHarm(x))", "all x.((Child(x) & ChemicalEnangerment(x)) -> InHarm(x))", "all x.((Child(x) & ChemicalEnangerment(x)) -> InHarm(x))", "all x.((Child(x) & ChemicalEnangerment(x)) -> InHarm(x))", "all x.(CHILD(x) & ChemicalEndangered(x)) -> InHarm(x))", "all x.(Child(x) -> InHair(x))", "all x.((Child(x) & ChemicalEnangerment(x)) -> InHarm(x))", "all x y.((Child(x) & ChemicalEndangement(x)) -> InHarm(y))", "all x.((Child(x) & ChemicalEndangerment(x)) -> InHarm(x))", "all x.((Child(x) & ChemicalEnangerment(x)) -> InHarm(x))", "all x.(InChemicalEndangerment(x) -> InHarm(x))", "all x.((Child(x) & ChemicalEnangerment(x)) -> InHarm(x))", "all x.((Child(x) & ChemicalEndangered(x)) -> InHarm(x))", "all x.((Child(x) & ChemicalEnhancement(x)) -> InHarm(x))", "all x.((Child(x) & ChemicalEndangering(x)) -> InHarm(x))"]}
{"id": "folio_train_474", "nl": "No people who work at corporate jobs are starting a new company.", "fol": "all x.(WorksAtCorporateJobs(x) -> -IsStartingANewCompany(x))", "prediction": ["all x.((WorksAtCorporateJobs(x) & NoNewCompany(x)) -> NoNewCompany(x))", "all x.(WorksAtCorporateJob(x) -> NeverStartingNewCompany(x))", "all x y.((Person(x) & WorkAtCorporateJobs(x) & WorkAtCsrCommercialJobs(y)) -> StartingNewCompany(x))", "all x y.((Person(x) & WorksAtCorporateJob(x) & GroupJob(y)) -> -StartingNewCompany(x))", "all x.((Person(x) & WorkatCorporateJob(x)) -> StartAnewCompany(x))", "all x y.((Person(x) & WorkAtCorporateJobs(x) & CorporationJob(y)) -> -StartingNewCompany(x,y))", "all x.(WorksAtCorporateJobs(x) -> NoNewCompany(x))", "all x.((Person(x) & WorksAtCorporateJobs(x)) -> StartingNewCompany(x))", "all x.(WorkCoordinativeJobs(x) -> -StartsNewCompany(x))", "all x.(WorksAtCorporateJob(x) -> -StartingNewCompany(x))", "all x.((Person(x) & WorksAtCorporateJob(x)) -> StartsNewCompany(x))", "all x.(WorksAtCorporateJob(x) -> -StartingNewCompany(x))", "all x.(WorksAtCorporateJobs(x) -> NoNewCompany(x))", "all x.(WorksAtCorporateJobs(x) -> -StartingNewCompany(x))", "all x y.((Person(x) & WorksAtCorporateJobs(x) & WorkAtConsecutiveJobs(x)) -> -StartingNewCompany(y))", "all x.(WorksAtCorporateJobs(x) -> NoNewCompany(x))"]}
{"id": "folio_train_475", "nl": "All entrepreneurs are starting a new company.", "fol": "all x.(IsEntrepreneur(x) -> IsStartingANewCompany(x))", "prediction": ["all x.(Entrepreneur(x) -> StartingNewCompany(x))", "all x.(Entrepreneur(x) -> StartsNewCompany(x))", "all x.(Entrepreneur(x) -> OpenNewCompany(x))", "all x.(Entrepreneur(x) -> StartsNewCompany(x))", "all x.(Entrepreneur(x) -> StartsNewCompany(x))", "all x.(Entrepreneur(x) -> StartingNewCompany(x))", "all x.(Entrepreneur(x) -> StartsNewCompany(x))", "all x.(Entrepreneur(x) -> StartsNewCompany(x))", "all x.(Entrepreneur(x) -> StartingNewCompany(x))", "all x.(Entrepreneur(x) -> StartsNewCompany(x))", "all x.(Entrepreneur(x) -> StartingNewCompany(x))", "all x.(Entrepreneur(x) -> StartingNewCompany(x))", "all x.(Entrepreneur(x) -> StartsNewCompany(x))", "all x.(Entrepreneur(x) -> StartingNeuveCompany(x))", "all x.(Entrepreneur(x) -> StartsNewCompany(x))", "all x.(Entrepreneur(x) -> StartNoCompany(x))"]}
{"id": "folio_train_476", "nl": "All risk-averse people are people who work at corporate jobs.", "fol": "all x.(IsRiskAverse(x) -> WorksAtCorporateJobs(x))", "prediction": ["all x.(RiskAverse(x) -> WorksAtCorporateJobs(x))", "all x.(RiskAversePerson(x) -> WorkAtCorporateJobs(x))", "all x.(RiskAversePeople(x) -> WorkAtCorporateJobs(x))", "all x.(RiskAverse(x) -> WorkAtCorporateJobs(x))", "all x.(RiskAversePerson(x) -> WorkAtCorporateJob(x))", "all x.(RiskAverse(x) -> WorkAtCommercialJobs(x))", "all x.(RiskAversePerson(x) -> PeopleWorkingAtCorporateJobs(x))", "all x.(RiskAversePerson(x) -> WorksAtCorporateJob(x))", "all x.(RiskAverse(x) -> WorksAtCorporateJobs(x))", "all x.(RiskAversePeople(x) -> WorkAtCorporateJobs(x))", "all x.(RiskAverse(x) -> WorksAtCorporateJobs(x))", "all x.(RiskAverse(x) -> WorkAtCorporateJobs(x))", "all x.(RiskAverse(x) -> WorkAtCorporateJobs(x))", "all x.(RiskAversePerson(x) -> WorkAtCorporateJobs(x))", "all x.(RiskAverse(x) -> WorkAtCorporateJobs(x))", "all x.(RiskAverse(x) -> WorkAtCorporateJobs(x))"]}
{"id": "folio_train_477", "nl": "All people who hate working for others are entrepreneurs.", "fol": "all x.(HatesWorkingForOthers(x) -> IsEntrepreneur(x))", "prediction": ["all x.(HateWorkingForOthers(x) -> Entrepreneur(x))", "all x.(HasWorkingForOthers(x) -> Entrepreneur(x))", "all x.(HutsWorkingForOthers(x) -> Entrepreneur(x))", "all x.(HasWorkingForOther(x) -> Entrepreneur(x))", "all x.(HasWorkedForOthers(x) -> Entrepreneur(x))", "all x.(HasWorkingForOthers(x) -> Entrepreneur(x))", "all x.(HasWorkingForOthers(x) -> Entrepreneur(x))", "all x.(HasWorkForOthers(x) -> Entrepreneur(x))", "all x.(HasWorkingForOthers(x) -> Entrepreneur(x))", "all x.(Hat(x,WorkForOthers) -> Entrepreneur(x))", "all x.((Person(x) & HatesWorkingForOthers(x)) -> Entrepreneur(x))", "all x.(HasWorkingForOthers(x) -> Entrepreneur(x))", "all x.(HateWorkingForOthers(x) -> Entrepreneur(x))", "all x.(HasWorkForOthers(x) -> Entrepreneur(x))", "all x.(HateWorkingForOthers(x) -> Entrepreneur(x))", "all x.(HasWorkedForOthers(x) -> Entrepreneur(x))"]}
{"id": "folio_train_478", "nl": "If Mark Zuckerberg is neither an entrepreneur nor a person who hates working for others, then Mark Zuckerberg is not a risk-averse person.", "fol": "((-IsEntrepreneur(MarkZuckerberg) | -HatesWorkingForOthers(MarkZuckerberg)) -> -IsRiskAverse(MarkZuckerberg))", "prediction": ["all x.((MarkZapperberg(x) & -(Entrepreneur(x) | HatesWorkingForOthers(x))) -> -RiskAverse(x))", "all x.((MarkZuckerberg(x) & -(Entrepreneur(x) | PersonWhoHateWorkingForOthers(x))) -> -RiskAverse(x))", "all x.((MarkZerberg(x) & -(Entrepreneur(x) | HatesWorkingForOthers(x))) -> -RiskAversePerson(x))", "all x.((MarkZerberg(x) & -(Entrepreneur(x) | HatesWorkingForOthers(x))) -> -RiskAversePerson(x))", "all x.((MarkZeitner(x) & -(Entrepreneur(x) | HatesWorkingForOthers(x))) -> -RiskAversePerson(x))", "(-(Entrepreneur(Mark Zuckerberg) | HatesWorkingForOthers(Mark Zuckerberg))) -> -RiskAverse(Mark Zuckerberg))", "all x.((MarkZachberg(x) & -Entrepreneur(x) & -HatesWorkingForOthers(x)) -> -RiskAverse(x))", "all x.((MarkZimmerberg(x) & -(Entrepreneur(x) | HatesWorkingForOthers(x))) -> -RiskAversePerson(x))", "all x.((MarkZappert(x) & -(Entrepreneur(x) | HatesWorkingForOthers(x))) -> -RiskAverse(x))", "all x.((Mark Zuckerberg(x) & -(Entrepreneur(x) | HatesWorkingForOthers(x))) -> -RiskAversePerson(x))", "all x.((Mark Zuckerberg(x) & -(Entrepreneur(x) | HatesWorkingForOthers(x))) -> -RiskAversePerson(x))", "all x.((MarkZuckerberg(x) & -(Entrepreneur(x) | HatesWorkingForOthers(x))) -> -RiskAversePerson(x))", "all x.((MarkZuckerberg(x) & -Entrepreneur(x) & LovesWorkingForOthers(x)) -> -RiskAverse(x))", "all x.((Mark Zuckerberg(x) & -HasEntrepreneur(x) & HasHatsWorkingForOthers(x)) -> -RiskAversePerson(x))", "all x.((MarkZapper(x) & -Entrepreneur(x) & -HasWorkWork(x)) -> -RiskAversePerson(x))", "all x.((MarkZuckerberg(x) & -(Entrepreneur(x) | HateWorkingForOthers(x))) -> -RiskAversePerson(x))"]}
{"id": "folio_train_479", "nl": "Mark Zuckerberg is an entrepreneur.", "fol": "IsEntrepreneur(MarkZuckerberg)", "prediction": ["Mark Zuckerberg is an Entrepreneur.", "Mark Zuckerberg & Entrepreneur(Mark)", "Mark Zuckerberg ist entrepreneur.", "(Entrepreneur(MarkZachberg)", "Mark Zuckerberg is an entrepreneur.", "Mark Zuckerberg is an Entrepreneur.", "Mark Zuckerberg is an Entrepreneur(Mark Zuckerberg)", "Mark Zuckerberg is entrepreneur.", "Mark Zuckerberg is anentrepreneur.", "Mark Zuckerberg is an Entrepreneur(Mark Zuckerberg)", "Mark Zuckerberg (Likes(Mark) & Entrepreneur(Mark))", "Mark Zuckerberg is an Entrepreneur(Mark Zuckerberg)", "Mark Zuckerberg is entrepreneur.", "Mark Zuckerberg is anentrepreneur.", "Mark Zuckerberg is entrepreneur.", "Mark Zuckerberg(Mark) & Entrepreneur(Mark)"]}
{"id": "folio_train_480", "nl": "Mark Zuckerberg is a risk-averse person.", "fol": "IsRiskAverse(MarkZuckerberg)", "prediction": ["Mark Zuckerberg, P.E.(Mark(Mark) & RiskAverse(Mark))", "Mark Zuckerberg is riskaverse.", "Mark Zuckerberg is a riskaverse person.", "Mark Zuckerberg is riskaverse.", "Mark Zuckerberg is a risk-averse person(Mark Zuckerberg)", "Mark Zuckerberg (MarksMovement(Mark) & RiskAversePerson(Mark Zuckerberg))", "all x.(MarkZappenberg(x) -> RiskAverse(x))", "Mark Zuckerberg (MarksFox(e) & RiskAverse(e))", "all x.((MarkZapperberg(x) & RiskAverse(x)) -> RiskAverse(x))", "all x.(MarkZapperberg(x) -> RiskAverse(x))", "Mark Zuckerberg (MarkFiberberg) & RiskAverse(MarkFiberberg))", "(RiskAversePerson(MarkZapperberg)", "Mark Zuckerberg is risk-averse.", "Mark Zuckerberg,PerformsRiskAverse(Mark Zuckerberg,Person)", "Mark Zuckerberg is a RiskAversePerson(Mark Zuckerberg,Person(Mark))", "Mark Zuckerberg is riskaverse."]}
{"id": "folio_train_481", "nl": "Mark Zuckerberg is not a risk-averse person.", "fol": "-IsRiskAverse(MarkZuckerberg)", "prediction": ["Mark Zuckerberg -RiskAversePerson(MarkZuckerberg)", "Mark Zuckerberg & CapitalFidelity(Mark(Mark)", "Mark Zuckerberg is not risk-averse.", "Mark Zuckerberg is not riskaverse.", "(-RiskAverse(MarkZacksberg))", "Mark Zuckerberg is notRiskAverse(Mark Zuckerberg,Person)", "Mark Zuckerberg -RiskAverse(Mark Zuckerberg)", "Mark Zuckerberg is not a RiskAversePerson(Mark Zuckerberg).", "Mark Zuckerberg ist keinesfallsrisipable(Mark Zuckerberg)", "Mark Zuckerberg is NOTRiskAverse(Mark Zuckerberg)", "Mark Zuckerberg is not riskaverse(Mark Zuckerberg,x)", "Mark Zuckerberg -RiskAversePerson(Mark Zuckerberg).", "Mark Zuckerberg is not riskaverse(Mark Zuckerberg,y).", "Mark Zuckerberg is not riskaverse.", "Mark Zuckerberg, in some ways, is not risk-averse.", "Mark Zuckerberg \u2013 -RiskAversePerson(Mark Zuckerberg)"]}
{"id": "folio_train_482", "nl": "There are two kitchens in the house: the upstairs kitchen and the downstairs kitchen.", "fol": "all x.(((IsKitchen(x) -> IsUpstairs(x)) & -IsDownstairs(x)) | (-(IsKitchen(x) -> IsUpstairs(x)) & IsDownstairs(x)))", "prediction": ["exists x.y.(House(x) & Kitchen(y) & Upstairs(x,y) & Downstairs(x,y))", "exists x y.(House(x) & Kitchen(y,x) & Kitchen(y) & Upstairs(y) & Downstairs(y))", "all x y.((House(x) & Kitchen(y)) -> (Upstairs(x) & Downstairs(y)))", "Guests can choose between two kitchens (EmpireKitchen(h) & DownstairsKitchen(z))", "exists x y.(InHouse(x,y) & Kitchen(x,y))", "all x y z.((House(x) & Kitchen(y) & Kitchen(z)) -> (Upstairs(x) & Downstairs(y)))", "(ThereWearerRoof(House(House) & UpstairsKitchen(House) & DownstairsKitchen(House))", "exists x y.(House(x) & Kitchen(y) & House(z) & Upstairs(x,y) & Downstairs(x,z))", "all x y.((Home(x) & Kitchen(y)) -> (Upstairs(x) | Downstairs(y)))", "exists x y.(Home(x) & Kitchen(y) & Kitchen(t) & Upstairs(x) & Downstairs(y))", "all x y.((House(x) & Kitchen(y)) -> (UpstairsKitchen(x) & DownstairsKitchen(y)))", "all x.((House(x) & Upstairs(x) & Downstairs(x)) -> Kitchen(x))", "exists x y.(House(x) & Kitchen(y) & Kitchen(y) & InHouse(x,y) & Upstairs(y) & Downstairs(y))", "all x y.((House(x) & Kitchen(y) & Upstairs(x,y) & Downstairs(x,y)) -> Kitchen(x,y))", "all x.(House(x) -> (UpstairsKitchen(x) | DownstairsKitchen(x)))", "there are two kitchens in the house: upstairs and downstairs."]}
{"id": "folio_train_483", "nl": "When someone is cooking in the downstairs kitchen, the first floor becomes smokey unless the air conditioner is running.", "fol": "((CookingInKitchen(Downstairs) & -IsAirConditionerRunning(Ac)) -> IsSmokey(FirstFloor))", "prediction": ["all x y.((CuisineInHouse(x) & UnderstairsKitchen(y)) -> InKitchen(x,y))", "all x.(CookingInDownstairsKitchen(x) -> (Smoky(x)) | AirConditionerRunning(x)))", "all x.((CookingInDownstairsKitchen(x)) -> (FirstFloorSmokey(x) & -AirConditionerRuns(x)))", "all x.((CookingInDownstairsKitchen(x) & AirConditionerRunning(x)) -> FirstFloorSmokey(x))", "all x.((Cooking(x) & LowerDownstairsKitchen(x)) -> SmokyFLOOR(x))", "all x.(CookingInSideways(x) -> SmokyFirstFloor(x))", "all x y.((CookingInSideDownstairsKitchen(x) & CookingInDownstairsKitchen(y)) -> SmokyFirstFloor(x,y))", "all x.(CooksInDownstairsKitchen(x) -> (FirstFloorSmokey(x) & -AirConditionerRunning(x)))", "all x.((CookingIn(x,DRownsideKitchen) & FloorHasAirConditionerRuning(x)) -> SmokyFirstFloor(x))", "all x y.((CookingInDownstairsKitchen(x) & Kitchen(y) & AirConditionerRun(x,y)) -> SmokyFirstFloor(x))", "all x y.((Cooking(x) & DownstairsKitchen(y)) -> (SmokyFirstFloor(x) & -AirConditionerRunning(y)))", "all x.(CookingInDrummageKitchen(x) -> (WindsSmoke(x) & -AirConditionerRuns(x)))", "all x y z.((CookingIn(x,y) & BasementKitchen(y) & HVACConditioner(z)) -> SmokyBetween(y,z))", "all x.(CookingInDownstairsKitchen(x) -> (SmokyFlex(x) & -AirConditionerRunning(x)))", "all x y.((CookingInCafe(x) & DuftroomKitchen(y)) -> (Smoky(y) & -AirConditionerRuns(y)))", "all x y z.((CooksInDownstairsKitchen(x) & BasementKitchen(y) & AirConditionerRunning(z)) -> FirstFloorSmoky(y))"]}
{"id": "folio_train_484", "nl": "If the air conditioner is running and someone is cooking in the downstairs kitchen, all the smoke travels to the second floor.", "fol": "((CookingInKitchen(Downstairs) & IsAirConditionerRunning(Ac)) -> IsSmokey(SecondFloor))", "prediction": ["all x y z.((AirConditionor(x) & Runs(x) & PersonCooking(y) & Kitchen(z) & Downstairs(z)) -> SmokeTravel(x))", "all x y.((AirConditioner(x) & AirConditioning(y) & Running(x) & CookingInDownstairsKitchen(x)) -> ScenicTravelsTo2ndFloor(x))", "all x y.((AirConditioner(x) & RunningAirConditioning(x) & CookingInCreamroom(y)) -> SmokeTravelsToSecondFloor(y))", "all x y.((AirConditioner(x) & Runs(x) & CookingInClub(y)) -> SmokeTravelsToSecondFloor(x))", "all x.((AirConditionerRuns(x) & CookingInDownstairsKitchen(x)) -> SmokeTravelsToSecondFloor(x))", "all x.((AirConditionerRuns(x) & CooksInDownstairsKitchen(x)) -> TravelsTo2Eastern(x))", "all x.((AirConditionerRunning(x) & CookingInDownstairsKitchen(x)) -> SmokeTravelsToSecondFloor(x))", "all x y.((AirConditioner(x) & Runs(x) & CookingInDownstairsKitchen(x)) -> SmokeExploresToTheSecondFloor(x,y))", "all x.((AirConditionerRuns(x) & SomeoneCookingInDrumsdram(x)) -> SmokeTravelsToSecondFloor(x))", "all x.((AirConditionerRunning(x) & CookingInDownstairsKitchen(x)) -> SmokeTravelsToSecondFloor(x))", "all x.((AirConditioner(x) & Running(x) & CookingInDownstairsKitchen(x)) -> AllSmokeTravelsToSecondFloor(x))", "all x y.((AirConditioner(x) & Running(x) & SomeoneCookingInDownstairsKitchen(x)) -> SmokeTravelsToSecondFloor(y))", "all x y.((AirConditioner(x) & Running(x) & PersonCookingInUpstairsKitchen(x)) -> SmokeRollsOnSoldFloor(y))", "all x y.((AirConditioner(x) & HVACRun(x) & PersonCookingInDownstairsKitchen(x)) -> FireCarriesToSecondFloor(y))", "all x.((AirConditioner(x) & Running(x) & CookingDepartmentKitchen(x)) -> SmokePassesToSecondFloor(x))", "all x y z.((AirConditioner(x) & AirConditionor(y) & CookingInDownstairsKitchen(z)) -> SmokeTravelsToSecondFloor(x,y))"]}
{"id": "folio_train_485", "nl": "If someone is cooking downstairs, it will always cause the first floor to become smokey.", "fol": "(CookingInKitchen(Downstairs) -> IsSmokey(FirstFloor))", "prediction": ["all x y.((CookingDrumroom(x) & CookingDrumroom(y)) -> DoesSmokeyFirstFloor(x,y))", "all x.(Cooking(x) -> SmokyFirstFloor(x))", "all x y.((Cooking(x) & Downstairs(y)) -> SmokyFirstFloor(x,y))", "all x.(Cooking(x) -> SmokyFloor(x))", "all x.(Cooking(x) -> SmokyFirstFloor(x))", "all x.(Cooking(x) -> SmokyFirstFloor(x))", "all x.(CookingDownstairs(x) -> SmokyFirstFloor(x))", "all x.((CookingDownstairs(x) & CausesFirstFloorToBeSmoky(x)) -> CookingDownstairs(x))", "all x.(Cooking(x) -> SmokyFirstFloor(x))", "all x.((CookingUpstairs(x) & HasSmokeyFirstFloor(x)) -> ImmerseFloor(x))", "all x.(CookingDownstairs(x) -> CausesFirstFloorToBeSmokey(x))", "all x.(Cooking(x) -> SmokyFoot(x))", "all x.((CooksDining(x) & Basement(x)) -> Smoky(x))", "all x.((Cooking(x) & Downstairs(x)) -> FirstFloorSmoky(x))", "all x.(Cooking(x) -> FirstFloorSmoky(x))", "all x.(Cooks(x) -> SmokyFirstFloor(x))"]}
{"id": "folio_train_486", "nl": "If someone is cooking upstairs, the first floor will become smokey.", "fol": "(CookingInKitchen(Upstairs) -> IsSmokey(FirstFloor))", "prediction": ["all x.(CookingUpstairs(x) -> FirstFloorSmokey(x))", "all x.((CookingUpstairs(x)) -> SmokeyFirstFloor(x))", "all x.((CookingUpstairs(x) & Smoky(x)) -> FirstFloor(x))", "all x.(CookingUpstairs(x) -> FirstFloorTogether(x))", "all x.(CookingUpstairs(x) -> Smoky(x))", "all x.(CakingUpstairs(x) -> SmokyFirstFloor(x))", "all x.((CookingUpstairs(x) & FirstFloor(x)) -> Smoky(x))", "all x.(CookingUpstairs(x) -> Smoky.", "all x.((CookingUpstairs(x) & FirstFloor(x)) -> Smoky(x))", "all x.((CookingUpstairs(x)) -> SmokyFirstFloor(x))", "all x y.(CookingUpstairs(x) -> FirstFloorSmokey(y))", "all x.(CooksUpstairs(x) -> FirstFloorGetsSmokey(x))", "all x.((CookingUpstairs(x) & Upstairs(x)) -> Smoky(x))", "all x.((CookingElevator(x) & UpstairsOfFirstFloor(x)) -> Smoky(x))", "all x.(Cooking(x) -> SmokyFront(x))", "all x.(CookingUpstairs(x) -> SmokyFirstFloor(x))"]}
{"id": "folio_train_487", "nl": "If someone is cooking downstairs and the air conditioner is running, there will be smoke upstairs.", "fol": "((CookingInKitchen(Downstairs) & IsAirConditionerRunning(Ac)) -> IsSmokey(SecondFloor))", "prediction": ["all x.((CookingDiver(x) & AirConditionerRunning(x)) -> SmokeUpstairs(x))", "(all x.(Cooking(x,Downstairs) & AirConditionerRunning(x)) -> SmokeUpstairs(x))", "all x y.((Cooking(x,y,downstairs) & AirConditionerRunning(y)) -> SmokeUpstairs(x))", "all x.((CookingDownstairs(x) & AirConditionerRunning(x)) -> SmokeUpstairs(x))", "all x.((CookingDreams(x) & AirConditionerRunning(x)) -> SmokeUpstairs(x))", "all x y.((Cooking(x) & AirConditioner(y) & Operating(x)) -> SmokeUpstairs(x))", "all x.(Cooking(x) -> (ColoredDownstairs(x) & AirConditionerRunning(x)))", "all x.((CookingDownstairs(x) & AirConditionerRuning(x)) -> SmokeUpstairs(x))", "all x y.((CooksDownstairs(x) & AirConditionerRuns(x)) -> SmokeUpstairs(y))", "all x.((Cooking(x) & AirConditionerRunning(x)) -> SmokeUpstairs(x))", "all x.((CookingDownstairs(x) & AirConditionerRuning(x)) -> SmokeUpstairs(x))", "all x.((CookingDownstairs(x) & AirConditionerRuning(x)) -> SmokeUpstairs(x))", "all x.((CookingDownstairs(x) & AirConditionerRunning(x)) -> SmokeUpstairs(x))", "all x.((Cooking(x) & Upstairs(x) & AirConditionerRunning(x)) -> SmokeUpstairs(x))", "all x.((Colored(x) & DownstairsAirConditioner(x) & RunningAirConditioner(x)) -> SmokeUpstairs(x))", "all x.(CookingDownstairs(x) -> SmokeUpstairs(x))"]}
{"id": "folio_train_488", "nl": "New York City is Located in the United States of America.", "fol": "IsLocatedIn(Nyc,Usa)", "prediction": ["All x.(City(x) -> InUnitedStatesOfAmerica(x))", "New YorkCityLocatedInUnitedStatesOfAmerica.", "All x y z.((New YorkCity(x) & UnitedStatesOfAmerica(y) & Location(z)) -> Located(x,y))", "America(NewYorkCity)", "all x.(NewYorkCity(x) -> InUnitedStatesOfAmerica(x))", "all x.((NewYork(x) & UnitedStatesOfAmerica(x)) -> LocatedIn(x,y))", "New York City is located in the United StatesOfAmerica (USOA))", "all x.((NewYorkCity(x) & UnitedStatesOfAmerica(x)) -> LocatedIn(x,y))", "(LocatedIn(NewYorkCity) & UnitedStatesOfAmerica(NYC))", "New YorkCity(n)  (LocatedIn(n) & UnitedStatesOfamerica)))", "All x y.((NewYorkCity(x) & UnitedStatesArea(y)) -> LocatedIn(x,y))", "The City(NewYork) LocatedInTheUnitedStatesOfAmerica(NYC)", "All x.(NewYork(x) -> UnitedStatesOfAmerica(x))", "(LocatedInU.S.O.A. & NewYorkCity(NewYork))", "all x.(NewYork(x) -> UnitedStatesOfAmerica(x))", "New York City, United StatesOfAmerica(NYC)"]}
{"id": "folio_train_489", "nl": "United States of America is part of North America.", "fol": "IsLocatedIn(Usa,NorthAmerica)", "prediction": ["All x y z.((UnitedStatesOfAmerica(x) & NorthAmerica(y) & Continent(z)) -> PartOf(x,y,z))", "all x.(UnitedStatesOfAmerica(x) -> PartOfNorthAmerica(x))", "all x.(UnitedStatesOfAmerica(x) -> PartOfNorthAmerica(x))", "all x.(UnitedStatesOfAmerica(x) -> PartOfNorth America(x))", "all x.(UnitedStatesOfAmerica(x) -> PartOfNorthAmerica(x))", "all x.((UnitedStatesOfAmerica(x) & PartOfNorthAmerica(x)) -> PartOfNorthAmerica(x))", "all x.(UnitedStatesOfAmerica(x) -> PartOfNorthAmerica(x))", "all x.(UnitedStatesOfAmerica(x) -> NorthAmerica(x))", "All x.(UnitedStatesOfAmerica(x) -> PartOfNorthAmerica(x))", "all x.(UnitedStatesOfAmerica(x) -> PartOfNorthAmerica(x))", "all x.(UnitedStatesOfAmerica(x) -> PartOfNorthAmerica(x))", "all x.(UnitedStatesOfAmerica(x) -> NorthAmerica(x))", "all x.(NorthAmerica(x) -> UnitedStatesOfAmerica(x))", "all x.(UnitedStatesOfAmerica(x) -> PartOfNorthAmerica(x))", "all x.((UnitedStatesOfAmerica(x) & NorthAmerica(x)) -> PartOf(x,y))", "all x y.((UnitedStatesOfAmerica(x) & NorthAmerican(y)) -> PartOf(x,y))"]}
{"id": "folio_train_490", "nl": "North America is in the western hemisphere of the earth.", "fol": "IsLocatedIn(NorthAmerica,WestHemisphere)", "prediction": ["all x y.((NorthAmerica(x) & EasternHemisphere(y)) -> In(x,y))", "all x.(NorthAmerica(x) -> IsInWesternHemisphereOfEarth(x))", "all x.(NorthAmerica(x) -> WestHemisphericH\u00e9misphereOfEarth(x))", "all x.(NordAmerica(x) -> WesternHemisphereOfEarth(x))", "all x.(NorthAmerica(x) -> WesternHemisphere(x))", "all x.(NorthAmerica(x) -> (WestHemispheric(x) & Earth(x)))", "all x.(NorthAmerica(x) -> westernHemisphereOfEarth(x))", "all x.(NorthAmerica(x) -> Earth(y))", "all x.(NorthAmerica(x) -> exists y.(WesternHemisphere(y) & Earth(y)))", "all x.(NorthAmerica(x) -> WesternHemisphereOfEarth(x))", "all x.(NorthAmerica(x) -> WestHemispheric(x))", "all x.(NorthAmerica(x) -> SeeksInEarth(x))", "all x.(NorthAmerica(x) -> WestHemispheric(x))", "All x.(NorthAmerica(x) -> inHismisphere(x,west))", "all x.(NorthAmerica(x) -> InWesternHemisphere(x))", "all x.(NorthAmerica(x) -> WesternHemisphereOfEarth(x))"]}
{"id": "folio_train_491", "nl": "New York City is a highly developed city.", "fol": "IsHighlyDeveloped(Nyc)", "prediction": ["all x.(NewYorkCity(x) -> HighlyDevelopedCity(x))", "all x.(NewYork(x) -> HighlyDevelopedCity(x))", "all x.((NewYorkCity(x) & HighlyDeveloped(x)) -> HighlyDevelopedCity(x))", "all x.((NewYorkCity(x) & HighlyDevelopedCity(x)) -> HighlyDevelopedCity(x))", "all x.(NewYork(x) -> HighlyEntwicked(x))", "all x.(NewYorkCity(x) -> HighlyDeveloped(x))", "all x.(NewYorkCity(x) -> HighlyDeveloped(x))", "all x.(NewYorkCity(x) -> HighlyDevelopedCity(x))", "all x.(NewYorkCity(x) -> HighlyDevelopedCity(x))", "all x.(NewYorkCity(x) -> HighlyDevelopedCity(x))", "all x.((NewYorkCity(x) & HighlyDeveloped(x)) -> HighlyDeveloped(x))", "all x.((NewYork(x) & HighlyDeveloped(x)) -> HighlyDevelopedCity(x))", "all x.((NewYorkCity(x) & HighlyDeveloped(x)) -> HighlyDeveloped(x))", "all x.(NewYorkCity(x) -> HighlyDeveloped(x))", "all x.((NewYork(x) & HighlyDeveloped(x)) -> City(x))", "all x.((NewYorkCity(x) & HighlyDeveloped(x)) -> HighlyDeveloped(x))"]}
{"id": "folio_train_492", "nl": "If place A is located in place B and place B is located in place C, then place A is located in place C.", "fol": "all z.((IsLocatedIn(x,y) & IsLocatedIn(y,z)) -> IsLocatedIn(x,z))", "prediction": ["all x.((Place(x) & InPlaceB(x) & InPlaceC(x)) -> InPlaceA(x))", "all x.((PlaceA(x) & Location(x,B) & Location(x,C)) -> Location(x,A))", "all x y.((PlateA(x) & PlaceB(y) & PlaceC(y)) -> (LocatedInPlaceC(x,y) | LocatedInPlaceB(y,x)))", "all x y.((Place(x) & Place(y) & LocatedInPlaceB(x,y) & LocatedInPlaceC(x,y)) -> LocatedInPlaceC(x,y))", "all x y.((Place(x) & PlaceA(x) & PlaceB(y) & PlaceC(y)) -> LocatedInPlaceC(x))", "(all x y.((PlaceA) & PlaceB(a)) -> LocatedIn(x,a)) & ((PlaceB) & LocatedIn(b,c)) -> LocatedIn(a,y)))", "all x y.((Place(x) & PlaceB(y) & PlaceC(y)) -> Locates(x,y))", "all x y.((Place(x) & PlaceB(x) & PlaceC(y)) -> LocatesInPlaceC(x,y))", "all x.((PlaceA(x) & PlaceB(x) & PlaceC(x)) -> (LocatedInPlaceA(x,C) & LocatedInPlaceB(x,C)))", "all x y.((Place(x) & Place(y) & LocatedIn(x,y) & Place(z) & LocatedIn(y,z)) -> LocationInPlace(x))", "all x y.((Place(x) & Location(x,y) & Place(x,z)) -> (LocatedInPlace(x,z) & LocatedInPlace(x,z)))", "all x y z.((Place(x) & PlaceB(y) & PlaceC(z) & LocatedIn(x,y,z)) -> LocatedIn(x,z))", "all x.((PlaceA(x) & LocatedInPlaceB(x) & LocatedInPlaceC(x)) -> LocatedInPlaceC(x))", "all x.((PlaceA(x) & InPlaceB(x) & InPlaceC(x)) -> LocatedInPlaceC(x))", "all x y.((PlaceA(x) & PlaceB(y) & locatedIn(x,y) & PlaceC(x)) -> LocatedIn(x,y))", "all x y.((Place(x) & PlaceB(y) & PlaceC(x)) -> LocatedInPlaceC(x,y))"]}
{"id": "folio_train_493", "nl": "A highly developed city is located in the western hemisphere of the earth.", "fol": "exists x.(IsHighlyDeveloped(x) -> IsLocatedIn(x,WestHemisphere))", "prediction": ["all x.(HighlyDevelopedCity(x) -> Location(x))", "all x.(HighlyDevelopedCity(x) -> LocatedInWESTHEMisphereOfEarth(x))", "all x.((City(x) & WesternHemisphere(x)) -> HighlyDeveloped(x))", "all x.(HighlyDevelopedCity(x) -> LivesInWESTHemisphericHemispheric(x))", "all x y.((City(x) & WesternHemisphere(x)) -> HighlyDeveloped(x))", "all x.(HighlyDevelopedCity(x) -> (RegionInWesterlyAndEarth(x)))", "all x.(HighlyDevelopedCity(x) -> (WesterlyHemisphereOfEarth(x) & LocatedIn(x,w)))", "all x y.((City(x) & WesternHemisphere(y) & Earth(y)) -> HighlyDeveloped(x))", "all x.(HighlyDevelopedCity(x) -> (LocatedInWesterlyHemisphere(x) & LocatedDeparture(x)))", "all x y.((City(x) & WesternHemisphere(y)) -> HighlyDeveloped(x))", "all x.((City(x) & LocatedInWideHemisphere(x)) -> HighlyDeveloped(x))", "all x.((City(x) & EasternHemisphere(x)) -> HighlyDeveloped(x))", "all x.((City(x) & HighlyDeveloped(x)) -> WesternHemisphere(x))", "all x.(HighlyDevelopedCity(x) -> locatedInWesternHemisphereOfEarth(x))", "all x.((City(x) & WestHemisphere(x)) -> HighlyDeveloped(x))", "all x.(HighlyDeveloped(x) -> (City(x) & WestHemisphere(x)))"]}
{"id": "folio_train_494", "nl": "USA is not located in western hemisphere of the earth.", "fol": "-IsLocatedIn(Usa,WestHemisphere)", "prediction": ["(WesternHemisphere(USA) -> -ResidesIn(USA,WesternHemisphere)))", "-WesternHemisphericSpheric(USA) & -LocatedInWidelandHemispheric(USA))", "all x.(USA(x) -> -OrdersInWESTH\u00e9misphere(x))", "all x.(U.S.A.(x) -> -LocatedInWesternHemisphere(x))", "USA ist nicht in westhemisphereOfEarth.", "-exists x.(USA(x) & WestHemispheric(x) & -LocatedIn(x,Earth).)", "all x.(USA(x) -> -LocatedInWesterlyHemisphereOfEarth(x))", "(-LocatedInWideHemispheric(USA))", "LocatedInWESTHemispheric(USA)", "all x.(USA(x) -> -OccupiedIn(x,WestHemisphere,Earth))", "all x.(USA(x) -> -LocatedIn(x,WestHemispheric(x))", "-LocatedInWesterlyHemisphereOfEarth(USA)", "all x.(USA(x) -> -NorthwesternHemisphereDependent(x))", "-(LocatedInTheWesternHemisphere(USA) & In(USA))", "all x.(USA(x) -> -LocatedInWesternHemisphere(x))", "(United States(USA) -> -WesterlyHemisphere(USA))"]}
{"id": "folio_train_495", "nl": "New York City is located in the New York State.", "fol": "IsLocatedIn(Nyc,NyState)", "prediction": ["ALL x y.((New YorkCity(x) & NewYorkState(y)) -> LocatedIn(x,y))", "all x.(NewYorkCity(x) -> NewYorkState(x))", "All x.(NewYorkCity(x) -> NewYorkState(x))", "all x.(NewYorkCity(x) -> NewYorkState(x))", "all x.(NewYorkCity(x) -> NewYorkState(x))", "New York City is located in NewYorkState(York)", "All x y.((NewYorkCity(x) & NewYorkState(y)) -> LocatedIn(x,y))", "all x.(NewYorkCity(x) -> LocationInNewYorkState(x))", "All x.(NewYorkCity(x) -> (LocatedInNewYorkState(x) | LocatedInNewYorkState(x)))", "New YorkCity(NYC) is located in NewYorkState(NYState)", "all x.(NewYorkCity(x) -> NewYorkState(x))", "all x.(NewYork(x) -> NewYork(x))", "All x.(NewYorkCity(x) -> NewYorkState(x))", "All x.(New YorkCity(x) -> NewYorkState(x))", "All x y.((NewYorkCity(x) & NewYorkState(y)) -> PlacedIn(x,y))", "all x.(NewYorkCity(x) -> NewYorkState(x))"]}
{"id": "folio_train_496", "nl": "Callus 4 is a poem that was written by the ancient Roman writer Catullus.", "fol": "(IsPoem(Callus4) & AuthoredBy(Callus4,Catullus) & IsRomanWriter(Catullus))", "prediction": ["all x.(CallingFour(x) -> (Poem(x) & WrittenByAncientRomanWriterCatullus(x)))", "all x.(Concert(x) -> Poem(x,y))", "All x.(Document(x) -> (Poem(x) & WrittenByAntiqueRomanWriterCatullus(x)))", "all x.(Calculus(x) -> (Poem(x) & WrittenByAntiqueRomanWriterCatullus(x)))", "all x y.((Poem(x) & AncientRomanWriterCatullus(y)) -> Callus4(x))", "all x y z.((Poem(x) & RomanWriter(y) & Ancient(z) & PublishedBy(x,y)) -> Callus4(x))", "exists x.(Poem(x) & WrittenBy(x,Caturus))", "all x.(Callus4(x) -> Poem(x))", "\"Poem(callus) & WrittenByCatullus(callus)\"", "the ancientRomanwriterCatullus wrote the poem Callus 4, which was written by.", "all x.(Calcus4(x) -> (Poem(x) & WrittenByAntiqueRomanWriterCatullus(x)))", "Callus 4(Poem(Poem) & WrittenByAntiquityRomanWriterCatullus(Poem))", "all x.(Concert(x) -> (Poem(x,Catullus) & WrittenBy(x,AncientRomanWriterIsCatullus)))", "all x.(Calculus4(x) -> (Poem(x) & WrittenByAncientRomanWriterCatullus(x)))", "all x.((Poem(x) & Called(x)) -> WrittenByAncientRomanWriter(x,Catullus))", "all x.((Poem(x) & AncientRomanWriterCatullus(x)) -> Callus4."]}
{"id": "folio_train_497", "nl": "Callus 4 is a story about the retirement of a well-traveled ship.", "fol": "DescribesRetirementOfShip(Callus4)", "prediction": ["all x.(CallusRetirement(x) -> WellTraveledShip(x))", "all x.(Calculus(x) -> StoriesAboutRetirementOfWellTraveledShip(x))", "all x.(Callus(x) -> (RenominationOfWellTraveledShip(x) & RetiredShip(x)))", "all x.((Ship(x) & WellTraveled(x)) -> Callus4(x))", "all x.(Callus(x) -> (RetirementOfWellTrappedShip(x) & SetStory(x,y)))", "all x y z.((Ship(x) & Callus(y) & Ship(z)) -> Retirement(x,y,z))", "all x.((Callus4(x) & WellTraveledShip(x)) -> Retirement(x))", "all x.(Callus4(x) -> (RetirementOfWellTraveledShip(x) & WellTraveledShip(x)))", "all x.(Callus4(x) -> (RetirementOfWellTraveledShip(x) & WellTraveledShip(x)))", "all x.(Callus4(x) -> (StoryAboutRetiringWellTraveledShip(x) & WellTraveledShip(x)))", "All x.((Callus4(x) & WellTraveledShip(x)) -> Retires(x))", "all x.((Callus4) & WellTraveledShip(x)) -> AboutRetirement(x))", "all x.((Callus4(x) & WellTraveledShip(x)) -> StoriesAboutRetirement(x))", "all x.((Callus4(x) & WellTraveledShip(x)) -> Retires(x))", "all x.(Calus4(x) -> WellTraveledShip(x))", "all x.(Callus4(x) -> WellTraveledShipRetiring(x))"]}
{"id": "folio_train_498", "nl": "There is a strong analogy of human aging in the poem Callus 4.", "fol": "(IsPoem(Callus4) -> HasAgingAnalogy(Callus4))", "prediction": ["all x.((PoemComplete(x) & Callus4Poem(x)) -> StrongAnalogyOfHumanAging(x))", "all x y.((Poem(x) & Poem(y)) -> AnalogyOfHumanAging(x,y))", "all x.((Poem(x) & Poem(x)) -> There is StrongAnalogyOfAging(x))", "all x y z.((Poem(x) & Poem(y) & Poem(z) & Callus4(y)) -> StrongAnalogyOfHumanAging(z))", "all x y z.((Poem(x) & Poem(y) & Callus4(z) & StrongAnalogie(y,z)) -> HumanAging(y,x))", "all x.((HolyPetal(x) & Callus4) & StrongAnalogueOfHumanAging(x)) -> StrongAnalogyOfHumanAging(x))", "exists x.(HumanAging(x) & InPoem(x) & EspeciallyStrikingInPoem(x))", "exists x y.((Poem(x) & Poem(y) & Callus4)) -> StrongAnalogyOfHumanAging(x,y))", "all x y z.((Poem(x) & Poem(y) & Poem(z)) -> StrongAnalogyOfHumanAging(x,y,z))", "all x.((Poem(x) & Poem(x) & Callus4(x)) -> StrongAnalogyOfHumanAgeing(x))", "all x y.((Poem(x) & Poem(y) & Poem(y,x)) -> StrongAnalogyOfHumanAging(x))", "all x y.((Poem(x) & Poem(y)) -> StrongAnalogueOfHumanAging(x,y))", "all x.((Poem(x) & Callus4(x)) -> StrongAnalogie(x))", "all x y.((Poem(x) & Poem(y)) -> StrongAnalogyOfHumanAgingIn(x,y))", "all x y.((Poem(x) & Poem(y)) -> HumanAgingAnalysis(x,y))", "all x.((Poem(x) & Poem(x) & Callus4(x)) -> StrongAnalogyOfHumanAging(x))"]}
{"id": "folio_train_499", "nl": "Callus 4 is written in an unusual iambic trimeter to convey a sense of speed over the waves.", "fol": "((IsPoem(Callus4) -> IsIambicTrimeter(Callus4)) & ConveysSenseOfWaves(Callus4))", "prediction": ["all x.((Calculus4(x) & UniformIambicTrimeter(x)) -> ConveySpeedOverWaves(x))", "all x y z.((Calculus(x) & IambicTrimeter(y) & Waves(z) & WrittenIn(x,y)) -> ConveysSpeed(x,z))", "all x.(Callus4(x) -> (WrittenInUnknownIambicTrimeter(x) & ConveysSpeedOverWaves(x)))", "all x y.((Callus4(x) & UniformIambicTrimeter(x) & ConveysSpeedOverWaves(x)) -> WrittenIn(x,y))", "all x.(Calculus(x) -> (WrittenInUnusuallyIambicTrimeter(x) & ConveysSpeed(x)))", "all x y.((Name(x) & Trimeter(y) & iambic(y)) -> WrittenInIambicToCreateSpeedOverWaves(x,y))", "all x y.((Calculus(x) & UnusualIambicTrimeter(y)) -> ConveysSpeedOverWaves(x))", "all x.(Callus4(x) -> (UnusuallyIambicTrimeter(x) & ConveysSpeed(x) & OverWaves(x)))", "all x.(Callus4) -> (UnusualIambicTrimeter(x) & ConveysSpeedOverTheWaves(x)))", "all x.(Callus4) -> (IambicTrimeter(x) & Improvised(x) & ConveysSpeedOverWaves(x)))", "all x.(Calculus4(x) -> (WrittenInUnusualIambicTrimeter(x) & ConveysSpeedOverWaves(x)))", "all x.((Calculus4) & UnusualIambicTrimeter(x) & ConveysSpeedOverWaves(x)) -> (WrittenIn(x,y) & ConveysSpeedOverWaves(y)))", "all x.(Calculus4(x) -> (WrittenInUnusuallyIambicTrimeter(x) & ConveysSpeedOverWaves(x)))", "all x.((CalculusFour(x) & UniformIambicTrimeter(x)) -> ConveysSpeedOverWaves(x))", "all x.(Callus4) -> (WrittenInUnusualIambicTrimeter(x) & ConveysSpeedOverWaves(x)))", "all x.((Callus4) & iambicTrimeter(x) & ConveysSpeed(x)) -> WrittenIn(x,iambicTrimeter))"]}
{"id": "folio_train_500", "nl": "There exists a poem written by an ancient Roman writer with a strong analogy of human aging.", "fol": "exists x.(IsPoem(x) & AuthoredBy(x,Catullus) & IsRomanWriter(Catullus) & HasAgingAnalogy(x))", "prediction": ["exists x y.((Poem(x) & AncientRomanWriter(y) & WrittenBy(x,y)) -> StrongAnalogyOfHumanAging(x))", "exists x.(Poem(x) & WrittenByAncientRomanWriter(x) & StrongAnalogyOfHumanAging(x))", "exists x.(Poem(x) & WrittenByAnglicanRomanWriter(x) & StrongAnalogyWithHumanAgeing(x))", "exists x.(Poem(x) & WrittenByAncientRomanWriter(x) & StrongAnalogyOfHumanAging(x))", "exists x y.((Poem(x) & AncientRomanWriter(y) & WrittenBy(x,y)) -> StrongAnalogyOfHumanAging(x))", "exists x y.((Poem(x) & AncientRomanWriter(y) & WrittenBy(x,y)) & StrongAnalogyOfHumanAging(x))", "exists x y.(Poem(x,y) & AncientRomanWriter(y) & WrittenBy(x,y) & StrongAnalogyOfHumanAging(x))", "exists x y z.(Poem(x) & AncientRomanWriter(y) & WrittenBy(x,y) & AnalogousToHumanAging(z))", "exists x y.((Poem(x) & AncientRomanWriter(y) & WrittenBy(x,y)) -> StrongAnalogyOfHumanAging(x))", "exists x y.(Epoch(x) & AncientRomanWriter(y) & WrittenBy(x,y) & StrongAnalogie(x) & HumanAging(y))", "exists x y.((Poem(x) & AncientRomanWriter(y) & WrittenBy(x,y) & StrongAnalogyOfHumanAging(x)) -> Poem(x))", "exists x.(Poem(x) & AncientRomanWriter(x) & StrongAnalogyOfHumanAging(x))", "exists x.(Poem(x) & WrittenByAncientRomanWriter(x) & StrongAnalogyOfHumanAging(x))", "exists x y z.(Poem(x) & AncientRomanWriter(y) & HumanAging(z) & WrittenByAndWithStrongAnalogy(x,y))", "exists x.(Poem(x) & WrittenByAncientRomanWriter(x) & StrongAnalogyOfHumanAging(x))", "exists x.(Poem(x) & WrittenByAntiqueRomanWriterWithStrongAnalysisOfHumanAging(x))"]}
{"id": "folio_train_501", "nl": "There exists a poem written by an ancient Roman writer written in iambic petameter.", "fol": "exists x.(IsPoem(x) & AuthoredBy(x,AncientRomanWriter) & IambicPentameter(x))", "prediction": ["exists x y.(Poem(x) & AncientRomanWriter(y) & WrittenInIambicTetrameter(x,y))", "exists x.(Poem(x) & WrittenByAncientRomanWriter(x) & WrittenInIambicPetalmeter(x))", "exists x.(Poem(x) & WrittenByAncientRomanWriter(x) & WrittenInIambicPetameter(x))", "exists x.(Poem(x) & WrittenByAnticeRomanWriter(x) & WrittenInIambicPetalmeter(x))", "exists x y.((Poem(x) & AncientRomanWriter(y) & WrittenInIambic(x)) -> PoemWrittenBy(x,y))", "exists x y.(Poem(x,y) & AncientRomanWriter(y) & WrittenBy(x,y) & WrittenIn(x,IambicPetameter))", "exists x.(Poem(x) & WrittenByAncientRomanWriter(x) & WrittenInIambicPetalmeter(x))", "exists x.(Poem(x) & AncientRomanWriter(x) & WrittenIn(x,IambicPetalmeter))", "exists x.(Poem(x) & WrittenByAncientRomanWriter(x) & WrittenInIambicPetameter(x))", "exists x.(Poem(x) & WrittenByAncientRomanWriter(x) & WrittenInIambicPetameter(x))", "exists x y.(Poem(x) & AncientRomanWriter(y) & WrittBy(x,y) & WrittenInIambicPetalmeter(x))", "exists x y z.((Poem(x) & AncientRomanWriter(y) & IambicPetameter(z) & WrittenBy(x,y,z)) -> WrittenIn(x,y,z))", "exists x.(Poem(x) & WrittenByAncientRomanWriter(x) & WrittenInIambicPetameter(x))", "exists x.(Poem(x) & WrittenByAncientRomanWriter(x) & WrittenInIambicPetameter(x))", "exist x.(Poem(x) & AncientRomanWriter(x) & WrittenInIambicPetalmeter(x))", "exists x.((Poem(x) & AncientRomanWriter(x) & WrittenInIambicPetameter(x))"]}
{"id": "folio_train_502", "nl": "Callus 4 is written in an unusual iambic trimeter to convey a strong analogy of human aging.", "fol": "(IsPoem(Callus4) & IsIambicTrimeter(Callus4) & WrittenIambicToConvey(Callus4,StrongAgingAnalogy))", "prediction": ["all x y.((Calculus(x) & IambicTrimeter(y)) -> WrittenInExtensiveSharpAnalogy(x,y))", "all x.(Callus 4(x) -> (UnusuallyIambicTrimeter(x) & ConveysStrongAnalogyOfHumanAgeing(x)))", "all x.(Calculus4(x) -> (WrittenInUnusuallyCiambicTrimeter(x) & ConveysStrongAnalogyOfHumanAging(x)))", "all x.(Callus4(x) -> (WrittenInUnusuallyIambicTrimeter(x) & ConveysStrongAnalogyOfHumanAging(x)))", "all x.(Callus4(x) -> (WrittenInUnusuallyIambicTrimeter(x) & ConveysStrongAnalogyOfHumanAgeing(x)))", "all x.((Callus4(x) & IambicTrimeter(x)) -> ConveysStrongAnalogyOfHumanAging(x))", "all x.((Calculus4) & UnusualIambicTrimeter(x) & StrongAnalogy(x)) -> WrittenInToConveyAnalogy(x))", "all x.(CallusFour(x) -> (WrittenInUnusualIambicTrimeter(x) & ConveysStrongAnalogyOfHumanAging(x)))", "all x.(Callus4(x) -> (WrittenInUnusualIambicTrimeter(x) & ConveysStrongAnalysisOfHumanAging(x)))", "all x.(Calculus4(x) -> (WrittenInUnusuallyIambicTrimeter(x) & ConveysStrongAnalogyOfHumanAging(x)))", "all x.((CallusVoice(x) & UnusualIambicTrimeter(x)) -> ConveysStrongAnalogy(x,HumanAging))", "all x.(Callus(x) -> WrittenInUnusuallyIambicTrimeter(x))", "all x.(Callus(x) -> (WrittenInUnusualIambicTrimeter(x) & ConveysStrongAnalogyOfHumanAging(x)))", "all x.(Callus4(x) -> (WrittenInUnusuallyIambicTrimeter(x) & ConveysStrongAnalogyOfHumanAging(x)))", "all x.(Callus(x) -> (writtenInIambicTrimeter(x) & ConveysStrongAnalogyOfHumanAging(x)))", "all x.((Calculus4) & UnusuallyIambicTrimeter(x) & ConveysStrongAnalogyOfHumanAging(x)) -> WritingIn(x,iambicTrimeter,iambicTrimeter))"]}
{"id": "folio_train_503", "nl": "Westworld is an American science fiction-thriller TV series.", "fol": "(IsTVSeries(Westworld) & IsAmerican(Westworld) & IsScienceFictionThriller(Westworld))", "prediction": ["Westworld is a ScienceFictionThrillerTVSeries(WW8).", "Westworld, an AmericanScienceFictionThriller(TVSeries)", "All x.((Westworld(x) & AmericanScientificFictionThrillerSeries(x)) -> StarFilmSeries(x))", "(All x.(Woodworld(x) & ScienceFictionThriller(x)) -> TVSeries(x))", "(AmericanScientistThrillerTVShow(Westworld)", "((Wideworld(Westworld) & AmericanScienceFictionThriller(Westworld)) -> IsTVSeries(Westworld))", "and Westernworld(Westworld) -> (AsianScienceFictionThrillerTVSequel(Westworld,American) & FeaturesFictionAndThriller(Westworld,American)))", "(ScienceFictionThrillerTVSeries(Westworld) & AmericanSeries(Westworld,Y))", "(AmericanscienceFictionThrillerTVSeries(Westworld) & FoundedIn(Westworld))", "(HasWESTWWAVENAME(Westworld) & EnglishFictionThrillerTVSeries(Westworld) & BasedOn(Westworld))", "Westworld is a sci-fi-thriller-TVSeries.", "all x.(Westworld(x) -> (AmericanScientificFictionThrillerTVSeries(x) & StarsAndFacts(x) & BasedOnFiction(x) & StarsAndFacts(x)))", "(ScientificFictionThriller(Westworld) & AmericanStarWars(Westworld))", "(AtHome(Westworld) & AmericanScienceFictionThrillerTVSeries(Westworld))", "(Also known as Westworld(amazon) & ScienceFictionThriller(amazon) & TVSeries(amazon))", "all x.(Westworld(x) -> (AmericanScienceFictionThrillerTVSeries(x) & BasedOn(x,y) & BasedOn(x,z)))"]}
{"id": "folio_train_504", "nl": "In 2016, a new television series named Westworld debuted on HBO.", "fol": "DebutedInYear(Westworld,Year2016)", "prediction": ["all x y z.((TelevisionSeries(x) & TelevisionSeries(y) & TelevisionSeries(z) & Westworld(z)) -> DebutedOn(y,x))", "all x.((Westworld(x) & UploadedOnHorizon(x)) -> DebutedOnSky.org(x))", "all x.((Computer(x) & TVSeries(x) & Westworld(x)) -> DebutedOn(x,Hosbos(x))", "(NewSeries(WESTWAVENAME) & DebutedOnHBO's(Westworld,2016))", "all x.((TelevisionSeries(x) & Westworld(x)) -> DebutedOnHBOX(x))", "(Following(Westworld,Cinematograph) & FirstDebutedOn(Westworld,HOFox))", "all x.((TelevisionSeries(x) & NamedWestworld(x)) -> DebutedOnHOVHost(x))", "all x.((NewTVSeries(x) & Westworld(x)) -> DebutedOnHolloway(x))", "all x.(Apr2016(x) -> Westworld(x))", "all x.((TelevisionSeries(x) & Westworld(x)) -> DebutedOnHBO(x))", "all x.((TelevisionSeries(x) & NamedWestworld(x)) -> DebutedOnHobby(x))", "(DebutedOnHBOX(Westworld,2016))", "all x.((TelevisionSeries(x) & DebutedOnHobo(x): Westworld(x)) -> DebutedOnHobo(x))", "all x y.((NewTelevisionSeries(x) & Westworld(y)) -> DebutedOnHBO(x,y))", "(LamentablyDebutedOnHBOX(2016) -> Westworld(2016))", "all x y.((Production(x) & TelevisionSeries(y) & NewSeries(x,y)) -> DebutedOnHBO(x,y))"]}
{"id": "folio_train_505", "nl": "The TV series Westworld is adapted from the original film in 1973, which was written and directed by Michael Crichton.", "fol": "exists x.(IsAdaptedFrom(Westworld,x) & ProducedInYear(x,Year1973) & WrittenBy(Michael,x) & DirectedBy(Michael,x))", "prediction": ["(AdaptedFromOriginalFilmIn73(TVSeries) & WrittenAndDirectedByMichaelCriton(TVSeries))", "(AdaptedFromOriginalFilm(Westworld) & WrittenAndDirectedByMichaelCritton(Westworld,73))", "(Adaptation(TVShowWestworld) & OriginalFilm(Westworld) & WrittenAndDirectedByMichaelCrichon(Westworld, 1973))", "all x y z.((TelevisionSeries(x) & Film(y) & Film(z) & WrittenAndDirectedByMichaelCriton(x) & Film(y,z,y)) -> WestworldAdaptedFrom(x,y,z,y))", "all x.(Westworld(x) -> (AdaptatedFromOriginalFilmIn(x,1973) & WrittenAndDirectedByMichaelCrichtons(x)))", "AdaptedFromOriginalFilmInTelevision(Westworld, 1973) & WrittenAndDirectedByMichaelCritchon(Westworld))", "(AdaptedFromOriginalFilm(Westworld) & WrittenAndDirectedByMichaelCriton(Westworld))", "(adapted from OriginalFilm(Westworld) & WrittenAndDirectedByMichaelCriton(Westworld))", "(adapted from originalFilmInTelevision(Westworld, 1973) & WrittenAndDirectedByMichaelCruchon(Westworld))", "(AdaptedFromOriginalFilm(Westworld,73) & WrittenByMichaelCriton(Westworld,73) & DirectedByMichaelCriton(Westworld,73))", "all x.((TelevisionSeries(x) & AmericanFilm(x, 1973) & WrittenAndDirectedBy(x,MichaelCruchon)) -> AdaptedFromOriginalFilm(x,III))", "(AdaptedFromOriginalFilmIn(Westworld,1975) & WrittenAndDirectedByMichaelCruchon(Westworld,1976))", "All x.((TVSeries(x) & OriginalFilmIn(x,1973)) -> WrittenAndDirectedByMichaelCritton(x))", "(AdaptedFromOriginalFilmIn(Westworld) & WrittenAndDirectedByMichaelCriffon(Westworld))", "all x y z.((TVSeries(x) & OriginalFilm(y) & Original(z)) -> (AdaptedFrom(x,y,z) & WrittenAndDirectedBy(x,y) & By(x,y)))", "Westworld is a TVSeries(tv) adaptedfrom(tv) & original film (OriginalFilm(t) & WrittenAndDirectedBy(t,m,y) & MichaelCrichton(t)))"]}
{"id": "folio_train_506", "nl": "The 1973 film Westworld is about robots that malfunction and begin killing the human visitors.", "fol": "IsAbout(Westworld,Robots)", "prediction": ["(ThirdYearDirtyFilm(Terrestrial(Film) & Robot(Robot(Film) & Malfunction(Film) & KillAttendedHumanVisitors(Film))", "((Horizontolomania(w) & 1973)) -> (Planets(x) & HumanVisitors(w) & Malfunction(x) & Kills(x W)))", "(RoadShowcase(fruit,73) -> (BottlesMalfunction(f) & HumanVisitors(h) & Kills(f,h)))", "(Nightworld(Violet(ThanYouKillHumanVisitors(t) & AboutRobots(i) & Malfunction(i,t) & KillHumanVisitors(i))", "(1973) & Westernworld(2013)) -> (Robots(x) & Malfunction(x) & KillsHumanVisitors(x)))", "all x y.((Film(x) & Film(y,1963) & Robot(y)) -> (Performs(y,misconfiguration) & PeopleStartToKill(y,humanVisitors)))", "all x y.((Film(x) & (1973) & Robot(y)) -> (Muscleages(y) & KillsHumanVisitors(y)))", "all x y.((Film(x) & 1973(x) & Robot(y)) -> (Malfunctions(y,x) & KillsHumanVisitors(y)))", "all x y.((Film(x) & Movie(y) & Film(x,y) & 1973) -> (Robot(x,y) & Measurable(x) & Killing(x,humanVisitors)))", "all x y.((Film(x) & Film(y)) -> (BrowseOne(x,y) & EmbraceHumanVisits(x,y)))", "all x.((Film(x) & 1973Woodworld(x)) -> (Botoms(x) & Malfunction(x) & KillHumanVisitors(x)))", "all x y.((Film(x) & 1973(x) & Robot(y) & MarriageOfHumanVisitors(z)) -> KillsHumanVisitors(x,y,z))", "all x.((Film(x) & 1973(x)) -> (RobotsMalfunction(x) & HumanVisitorsBattle(x)))", "(Wallworld(x) & (Malfunctions(x) & KillsHumanVisitors(x): 1973)))", "all x.((Film(x) & 1973(x) & Robot(y)) -> (Malfunctions(y) & KillsHumanVisitors(y)))", "(Seems like a film about computerized robots, misfiring, and beginethkillinghumanvisitors(TiefWorld1973))"]}
{"id": "folio_train_507", "nl": "Michael Crichton has directed a film about robots.", "fol": "exists x.(Film(x) & IsAbout(x,Robots) & DirectedBy(Michael,x))", "prediction": ["Michael Crichton has directed a film about robots.", "Michael Crichton has directed a film about robots.", "all x.((MichaelCrichton(x) & Movie(x)) -> AboutRobots(x))", "Michael Crichton - DirectedRobotFilm(c) & AboutRobots(c))", "(DirectedByAndMichaelCrichtons(Michael Crichton) & Robots(MichaelCrichtons))", "Michael Crichton has directed a film about robots.", "(DirectedFilm(MichaelCruiton,Robots))", "(DirectsFilm(MichaelCruchon,Robots))", "all x y.((MichaelCochton(x) & Film(y)) -> HasDirectedOverRobots(x,y))", "MichaelCruttonDirectedRobotsFilm.", "Michael Crichton directing aboutRobots(McRitton)", "all x y.((MichaelCruchon(x) & Film(y)) -> Directed(x,y))", "all x y.((MichaelCriton(x) & Robot(y)) -> Directed(x,y))", "all x y.((MichaelCrichton(x) & Robot(y)) -> DirectedFilm(x,y))", "(DirectedFilm(MichaelCriton) -> AboutRobots(MichaelCriton))", "Michael Crichton has directed a film about robots."]}
{"id": "folio_train_508", "nl": "An American TV series debuted in 2016.", "fol": "exists x.(IsTVSeries(x) & IsAmerican(x) & DebutedInYear(x,Year2016))", "prediction": ["all x.(AmericanTVSeries(x) -> DebutedIn2016(x))", "all x.(AmericanTVSeries(x) -> DebutedIn2016(x))", "all x.(AmericanTVSerial(x) -> DebutedIn2016(x))", "all x.((AmericanTelevisionSeries(x) & DebutedIn2016(x)) -> DebutedIn2016(x))", "all x.((AmericanTVSeries(x) & DebutedIn2016(x)) -> (StateUnderground(y) & AmericanTVSeries(z) & AmericanTVSeries(x,z)))", "all x y.((AmericanTelevisionSeries(x) & DebutedIn2016(x) & DebutedIn2016(y)) -> AmericanTVSeries(x))", "all x.(AmericanTVSeries(x) -> DebutedIn2016(x))", "(AmericanTVSeries(TV Series) & DebutedIn2016(TV Series))", "all x.((AmericanTVSeries(x) & DebutedIn2016(x)) -> DebutedIn2016(x))", "all x.((AmericanTVSeries(x) & DebutedIn2016(x)) -> DebutedIn2016(x))", "all x.((AmericanTVSeries(x) & DebutedIn2016(x)) -> AmericanTVSeries(x))", "all x.(AmericanTelevisionSeries(x) -> DebutedIn2016(x))", "all x.(AmericanTVSeries(x) -> DebutedIn2016(x))", "all x y.((AmericanTVSeries(x) & TVSeries(y)) -> DebutedIn2016(x,y))", "(AmericanTelevisionSeries(ATVSequel) & DebutedIn2016(ATVSequel))", "all x y.((AmericanTVShow(x) & Series(y)) -> DebutedIn2016(x,y))"]}
{"id": "folio_train_509", "nl": "The 2008 Summer Olympics were held in Beijing, China.", "fol": "HeldInLocation(Summer2008olympics,Beijingchina)", "prediction": ["(SummerOlympics(08) -> HeldIn(2008,Beijing))", "all x.(SummerOlympics(x) -> HeldIn(x))", "all x y.((SochiOlympics(x) & Beijing(y)) -> HeldIn(x,y))", "The 2008 SummerOlympicsDate(2008) & HeldIn Beijing(2008) & HeldInChina(2008))", "All x.((SummerOlympics(x) & HeldIn(x,Beijing,China)) -> HeldIn(x,Beijing,China))", "All x y.((SummerOlympic(x) & Beijing(y)) -> HeldIn(x,y))", "(AugustOlympics(o) -> HeldInBeijing(o))", "(all x.(Jimmy(x) -> SummerOlympics(x)) & HeldIn(x,Beijing) & HeldIn(x,Chinese)))", "(Opener(2008) & HeldInBeijing(2008))", "the 2008 SummerOlympics(2008) -> HeldInBeijing(x))", "All x.((SummerOlympics(x) & HeldIn(x,Beijing,China)) -> HeldIn(x,Beijing,China))", "all x y z.((Birth(x) & SummerOlympics(y) & Beijing(z)) -> HeldIn(x,y,z))", "all x y.((SummerOlympics(x) & Beijing(y)) -> HeldIn(x,y))", "all x y.((SummerOlympics(x) & Beijing(y)) -> HeldIn(x,y))", "all x y.((TheSummerOlympics(x) & Beijing(y)) -> HeldIn(x,y))", "the 2008 SummerOlympics(x) (HanguishedInBeijing,China))"]}
{"id": "folio_train_510", "nl": "The 2008 Summer Olympics were the second Summer Olympic Games to be held in a communist state.", "fol": "SecondOlympicGamesIn(Summer2008olympics,Heldincommuniststate)", "prediction": ["all x y z.((SochiGames(x) & SummerOlympics(y) & CommunistState(z)) -> SecondSummerOlympics(x))", "all x y.((SocialOlympic(x) & Summer(y) & HeldInCommunistState(x,y)) -> SecondToBeHastedInCommunistState(x,y))", "all x.((SummerOlympics(x) & HeldInCommunistState(x)) -> SecondSolidoxyd(x))", "all x.((Volleyball(x) & SummerOlympics(x) & HeldInCommunistState(x)) -> SecondToBeHoldBetween(x))", "all x.((SummerOlympic(x) & SecondSummerOlympics(x) & HeldInCommunistState(x)) -> HeldInJakob(x))", "the 2008 SummerOlympics(2008) -> SecondSummerOlympicStateToFoundInCommunistState(2008))", "all x.((SummerOlympics(x) & SecondToHoldInCommunistState(x)) -> SummerOlympics(x))", "all x y.((SummerOlympics(x) & SummerOlympics(y) & CommunistState(x)) -> SecondToBeHavenIn(x,y))", "all x.((SummerOlympics(x) & SecondSummerOlympics(x) & HeldInCommunistState(x)) -> SummerOlympicGames(x))", "all x.((SummerOlympics(x) & ColonistState(x)) -> SecondSummerOlympicGames(x))", "(CommunistStateSummitOlympics(2008) & SecondToBeHasConference(2008))", "all x.((SocialOlympics(x) & SecondSummerOlympics(x)) -> HeldInCommunistState(x))", "all x.((SummerOlympics(x) & SecondSummerOlympics(x) & HeldInCommunistState(x)) -> HeldInCommunistState(x))", "the SummerOlympics(2008) -> (Second SummerOlympics(2008) & HeldInCommunistState(2008)))", "all x y.((SolutionOlympics(x) & Summer(y)) -> SecondSummerOlympicGamesToBeHoldInCommunistState(y,x))", "the 2008 SummerOlympics; Second SummerOlympics(2008) -CommunistState(2008))"]}
{"id": "folio_train_511", "nl": "China won the most gold medals (48) in the 2008 Summer Olympics.", "fol": "WonMedals(China,Mostgoldmedals)", "prediction": ["all x y.((China(x) & SummerOlympics(y) & MostGoldMedal(x,y) & (48) | 0))) -> Won(x,y))", "(MostGoldMedal(China,48) & SummerOlympics(China,88))", "(GoldMedal(China,48) at SummerOlympics(China,08))", "(47 GoldMedal(China) & -2008SummerOlympics(China))", "(GoldMedal(China,48))", "(GoldMedalQuality(China) 48)", "(Wind(China) & GoldMedal(China,48))", "(GoldMedal(China,48) / WonSummerOlympics(China,48))", "(GoldMedal(Chinese): MostInSummerOlympics(China,48))", "all x y.((China(x) & SummerOlympics(y)) -> (WonMostGoldMedals(x,y) & (48), y)) -> MostGoldMedals(x,y)))", "All x y z.((China(x) & GoldMedal(y) & SummerOlympics(z)) -> (WonMostGold(x,y,z) & (48 -> MostGold(y,z))))", "(GoldMedal(China,08) | GoldMedal(China,46)))", "(GoldMedal(China) & GoldMedal(China)) -> InSummerOlympics(China))", "(all x.(China(x) -> MostGoldMedal(x,48)))", "all x y.((China(x) & SummerOlympics(y)) -> (WinsMoreGoldMedals(x,y) & MostGoldMedals(x,y) & (38,y) | -48,n))))", "(GoldMedal(China,48) & -GoldMedal(China,28))"]}
{"id": "folio_train_512", "nl": "The United States placed second in the gold medal tally but won the highest number of medals overall (112) in the 2008 Summer Olympics.", "fol": "(PlacedInMedalTally(Unitedstates,Secondingoldmedals) & WonMedals(Unitedstates,Highestnumberofmedals))", "prediction": ["(WinningJoin(UnitedStates(USA) & Served(UnitedStates,x)) | (Lastplace(UnitedStates,x) & LastClose(UnitedStates,x))))", "(GalaxyMedalTally(UnitedStates) & PlacedSecond(U.S.A) & -(GoldMedalTally(U.S.A) & NationalMedalMileageVenue(U.S.A.LowerNumberOfSummerOlympics(USA) & #112(U.S.),2008)))", "(SecondTallyGoldMeal(U.S.)) & TheU.S. wonsCelebrationAtMotel(U.S.)", "only -2,2 (U.S.A.M.E.M. & GoldMedalTally(SI) & InSummerOlympics(2008,12))", "(State(UnitedStates): (Second InGoldMedalTally(UnitedStates) & HighestNumeracy(UnitedStatements) & WinterOlympics(2008,112)))", "(StatesLimitSecondGoldMedalTally(State) & TopRegionOfGoldMedal(Second(SummerOlympics,2012))", "all x.(America(x) -> (PlacesSecondGoldMedalTally(x) & WinsHexaestMeal(x (143) | & -PlacesSecondGoldMedalTally(x))))", "(StatusAreSecond(State(U.S.A.) & (GoldMedalTally(State) -> Second(U.S.) & WornHighestNumberOfMedals(Second(Summer)))", "(SecondInGoldMedalTally(US) & HasLikelestGoldMedal(USA,015))", "all x.((U.S.A.(x) | (GoldMedalTally(x) & 2nd(x)))) -> HighestInSummerOlympics(x,121))", "(SouthernGoldMedalTally(USA) & GoldMedalTally(USA)) -LowestGoldMalletOrgan (USAMalletOrganic(USACivilization) = 112.))", "all x y.((UnitedStates(x) & SummerOlympics(y,x)) -> (PlacedSecond(x) & InGoldMedalTally(x,y) & FormedToGiveMiles(x,z) & WonHighestNumberOfMedals(z,x)))", "(NumberOfMedal(UnitedStates(UnitedStates) & (WonLitem(Unisex,12) | (PastedSecond(uniformedStates) & GoldMedalTally(uniformedStatementTally) | WonLitem(uniformedStatement)))))", "(UnitedStates(UnitedStates) & PlacedSecondInGoldMedalTally(UnitedStates) & WonSameNumberOfMedals(US,114))", "(PrecededTallyOnGoldMileage(UnitedStates) | WonHighestOverallMedal(UnitedStates)(UnitedStates)))", "(Also placed Second.GoldMedalTally(A.E.) & ServedOnLowerName(A.E.) & WornHighestMelennity(A.E.A.1,12) inTheOlympics(A.E.(E.A.(August) | SummerOlympics(E.E.)))"]}
{"id": "folio_train_513", "nl": "The third place in the gold medal tally was achieved by Russia in the 2008 Summer Olympics.", "fol": "PlacedInMedalTally(Russia,Thirdingoldmedals)", "prediction": ["thirdplace in goldmedalTally(Russia,2008)", "(3)AchievedByRussiaIn(Russia,2008): GoldMedalTally(Russland,2008)", "all x y z.((GoldMedalTally(x) & Russia(y) & SummerOlympics(z)) -> (ThreePercent(y) & AttainedDuring(y,z)))", "\"The third Place\" gold medal tally was achieved by Russia in the 2008 Summer Olympics.", "(Olympics(s) & WorldCup(s) & SummerOlympics(s) & Russia(s) & SummerOlympics(s))", "(Russland(Russia) & SummerOlympics(2008,Summer) -> ThirdPlaceInGoldMedalTally(Russia))", "all x.((Russland(x) & SummerOlympics(x)) -> ThirdPlaceInGoldMedalTally(x))", "all x.((Russia(x) & SummerOlympics(x)) -> ThirdPlaceGoldMedalTally(x))", "(GalaxySummerOlympics(2008) & ThirdPlace(x))", "(MountainTally(r,2008) & GoldMalcolmTally(r,2002))", "(AchievedThreePlacesInGoldMedalTally(Russia,SummerOlympics,2008))", "all x y.((China(x) & SummerOlympics(y) & 2008(x,y)) -> TallyAtTill(x,y))", "all x y.((GoldMedalTally(x) & Russia(y)) -> AttainedThirdPlace(y,x))", "all x y.((RussianSummerOlympics(x) & SummerOlympics(y)) -> ThirdPlaceInGoldMedalTally(x,y))", "(TwoPlaceGoldMedalTallyAchievedByRussland(August08,SummerOlympics))", "all x y.((Rossius(x) & SummerOlympics(y)) -> ThirdPlaceInGoldMedalTally(x,y))"]}
{"id": "folio_train_514", "nl": "If a country places third in gold medals, then they had fewer gold medals than the team that won the most gold medals.", "fol": "all x y.((PlacedInMedalTally(x,Thirdingoldmedals) & WonMedals(y,Mostgoldmedals)) -> HasFewerGoldMedalsThan(x,y))", "prediction": ["all x y z.((Country(x) & Team(y) & Team(z) & PlacesThreeInGoldMedals(x,y,z)) -> FewerGoldMedals(x,y,z))", "all x y.((Country(x) & Team(y) & PlacesThreeInGoldMedal(x,y)) -> FewerGoldMedals(x,y))", "all x.((Country(x) & PlacesThreeInGoldMedal(x)) -> LessGoldMedal(x))", "all x y.((Country(x) & PlacedWithThreeGoldMedal(x,y) & TeamClosingMostGoldMedal(y)) -> FewerGoldMedals(x,y))", "all x y.((Country(x) & Team(y) & PlacesThreeInGoldMedals(x,y)) -> FewerGoldMedals(x,y))", "all x y.((Country(x) & Team(y) & PlacesThirtInGoldMedal(x,y)) -> FewerGoldMedal(x,y))", "all x y.((Country(x) & Team(y) & PlacesThirdInGoldMedal(x)) -> FewerGoldMedal(x,y))", "all x y.((Country(x) & Team(y) & PlacesThreeInGoldMedal(x,y)) -> FewerGoldMedals(x,y))", "all x y.((Country(x) & Team(y) & PlacesThinGoldMedal(x,y)) -> FewerGoldMedals(x,y))", "all x y.((Country(x) & Country(y) & PlacesThirdInGoldMedal(x,y)) -> FewerGoldMedals(x,y))", "all x y.((Country(x) & Team(y) & PlacesFourthInGoldMedal(x,y)) -> FewerGoldMedal(x,y))", "all x y.((Country(x) & Team(y) & PlacesThreeInGoldMedal(x,y)) -> FewerGoldMedals(x,y))", "all x y.((Country(x) & PlacesThreeth(x,goldMeal)) -> FewerGoldMedals(x,y))", "all x y.((Country(x) & Country(y) & PlacesThreeInGoldMedals(x,y) & Team(y) & WinsMostGoldMedals(y,z)) -> HadLikestGoldMedals(x,y,z))", "all x y.((Country(x) & Team(y) & PlacesFourthInGoldMedal(x,y)) -> HadLessGoldMedals(x,y))", "all x y.((Country(x) & Team(y) & PlacesThreethInGoldMedals(x) & GoldMedal(y)) -> FewerGoldMedals(x,y))"]}
{"id": "folio_train_515", "nl": "87 countries won at least one medal during the 2008 Games.", "fol": "exists x.(IsCountry(x) & WonMedals(x,Medal))", "prediction": ["all x.((Country(x) & WinsMedal(x,2008)) -> AllOf(x,87))", "all x y.((Country(x) & X (2008 Games)) & WonMedal(x,y)))", "all x.((Country(x) & WinnerOfMedal(x,2008)) -> WinMedal(x,2008))", "all x.((Country(x) & Winner(x,y) & Games(x,y)) -> Gold(y))", "(Enough(87) and Wins(87))", "all x.((Country(x) & WinsMedal(x,2008)) -> AtLeastOneMedal(x))", "all x.((Country(x) & AtLeastMinimalMileage(y)) -> Wins(x,y))", "all x.((Country(x) & WonAtLeastOneMedal(x)) -> 2008Girls(x))", "all x y.((Country(x) & Games(y)) -> WonAtLeastOneMedal(x,y))", "all x.((Country(x) & (WonMedal(x,2008) | WonMedal(x,2008))) -> NoMedal(x))", "all x.((Country(x) & WinsMedal(x,y)) -> AtLeastOneMedal(y,z))", "all x.((Country(x) & WinSecondMedal(x)) -> AtLeastOneMedal(x))", "all x y.((Country(x) & Country(y) & won(x,y)) -> Medal(x))", "all x.((Country(x) & WinnerSilver(x)) -> WonOneMedal(x))", "all x.((Country(x) & AtLeastOneMedal(y)) -> WonDuring2008Games(x,y))", "all x.((Country(x) & wonChampionship(x) & HeldEachAdmission(x)) -> WinMedal(x))"]}
{"id": "folio_train_516", "nl": "Russia did not win fewer gold medals than China.", "fol": "-HasFewerGoldMedalsThan(Russia,China)", "prediction": ["(-winsMinorGoldMedal(Russia) vs.(WinsGoldMedal(Russia,China)))", "all x y.((Russia(x) & China(y)) -> -WonMinorGoldMedal(x,y))", "all x y.((Russia(x) & China(y)) -> WinsNinetyGoldMedals(x,y))", "(WonLowerGoldMedal(Russia,China))", "(GoldMedalWin.Russia) & -GoldMedalWin.China)", "all x.((Russland(x) & China(x)) -> NullerGoldMedalWins(x,x))", "all x.((Russland(x) & China(x)) -> -WonMinorGoldMedal(x))", "all x.((Russland(x) & China(x)) -> -WinsLittlerGoldMedal(x,Russia))", "all x y.((Rossovska(x) & China(y)) -> -WorthsGoldMedals(x,y))", "all x y.((Rossophone(x) & China(y)) -> NoneDiverseGoldMedal(x,y))", "all x y.((Russland(x) & China(y)) -> -WonBoreGoldMedal(x,y))", "all x.((Russland(x) & China(x)) -> CannotWinGoldMedal(x))", "((Russland(russ) & -Chinese(russ)) -> -WonGoldMedal(russ))", "all x y.((Russia(x) & China(y)) -> -WonKinderGoldMedal(x,y))", "all x y.((Russland(x) & China(y)) -> DidNotWinBrotherGoldMedals(x,y))", "((Russland(Russia) & China(China)) -> -WinsLessGoldMedal(Russia,China)))"]}
{"id": "folio_train_517", "nl": "The United States won fewer gold medals than China.", "fol": "HasFewerGoldMedalsThan(Unitedstates,China)", "prediction": ["all x y.((Government(x) & UnitedStatesChinese(y)) -> WonLittleGoldMedals(x,y))", "All x.((UnitedStates(x) & China(x)) -> WonSinnerGoldMedals(x,y))", "all x y.((UnitedStates(x) & China(y)) -> WiredMinorGoldMedal(x,y))", "(GoldMedalWinner(UnitedStates) & LimitedGoldMedalWinner(Cachin))", "(WonJoinsWithGoldMedals(US) & WonSevereGoldMedals(US))", "all x y.((UnitedStates(x) & China(y)) -> WonBlessing(x,y))", "all x y z.((UnitedState(x) & China(y) & GoldMedal(z)) -> WonKiernier(x,z))", "all x y.((U.S.(x) & China(y)) -> (WonFewerGoldMedals(y,x)))", "(-WonGoldMedalWith(U.S.A.)", "all x y.((UnitedStates(x) & China(y)) -> WonFourierGoldMedal(x,y))", "all x.((UnitedStates(x) & China(x)) -> WinsLittlerGoldMedal(x))", "all x y.((UnitedStates(x) & China(y)) -> WonLessGoldMedal(x,y))", "all x y.((UnitedStates(x) & China(y)) -> ThereWeirderGoldMedal(x,y))", "all x y.((UnitedState(x) & China(y)) -> WonLittlerGoldMedal(x,y))", "all x y z.((UnitedState(x) & China(y) & GoldMedal(z) & LessColor(x,z)) -> WonKinder(x,z))", "all x y.((NewStates(x) & China(y)) -> WornLittleGoldMedals(x,y))"]}
{"id": "folio_train_518", "nl": "Russia won fewer gold medals than China.", "fol": "HasFewerGoldMedalsThan(Russia,China)", "prediction": ["all x y.((Russia(x) & China(y)) -> WewnFour(x,y))", "(-GoldMedalWinner(Russo-China))", "all x y.((Russland(x) & China(y)) -> WonNinetyGoldMedal(x,y))", "all x y.((Russland(x) & China(y)) -> WonLittleRoseGoldMedals(x))", "all x y z.((Russland(x) & China(y) & GoldMedal(z)) -> WonFewer(x,z))", "(NinetyPercentGoldMedalWon(Russia,Russia) & TenPercentGoldMedalWon(China,Russia))", "all x y.((Russland(x) & China(y)) -> WonFourThousandsOfGoldMedal(x,y))", "all x y.((Russia(x) & China(y)) -> WinsWithinMinorGoldMedals(x,y))", "all x y.((Russia(x) & China(y)) -> WonNinetyGoldMedals(x,y))", "all x y.((Russia(x) & China(y)) -> WonMinorGoldMedal(x,y))", "all x y.((Russia(x) & China(y)) -> WonLirdsGoldMedals(x,y))", "all x y.((Russia(x) & China(y)) -> Didn'tWonGoldMedals(x,y))", "all x y.((Russia(x) & China(y)) -> WinsRossia GoldMeal(x,y))", "all x y.((Russland(x) & China(y)) -> WonMinorGoldMedals(x,y))", "All x y.((Russia(x) & China(y)) -> WonMinorGoldMedal(x,y))", "all x y.((Russland(x) & China(y)) -> (WonLikregoldMedals(x,y)))"]}
{"id": "folio_train_519", "nl": "Xiufeng, Xiangshan, Diecai, Qixing are districts in the city of Guilin.", "fol": "(IsDistrictIn(Xiufeng,Guilin) & IsDistrictIn(Xiangshan,Guilin) & IsDistrictIn(Diecai,Guilin) & IsDistrictIn(Qixing,Guilin) & IsCity(Guilin))", "prediction": ["all x.((District(x) & Guilin(x)) -> (Xiufeng(x) | Xiangshan(x) | Diecai(x) | Qixing(x)))", "(District(x,guilin) | District(x,guilin)))", "all x.((District(x) & City(x)) -> (Xiufeng(x) | Xiangshan(x) | Diecai(x) | Qixing(x) | Guilin(x)))", "all x.((District(x) & Guilin(x)) -> (Xiufeng(x) | Xiangshan(x) | Diecai(x) | Qixing(x)))", "all x.((District(x) & Guilin(x)) -> (Xiufeng(x) & Xiangshan(x) & Diecai(x) & Qixing(x)))", "(District(x) & Guilin(x))", "(CityDepartment(Xiufeng) & CityDepartment(Xiangshan) & District(Diecai) & District(Qixing))", "(Districts(x) & (Xiufeng(x) | Xiangshan(x) | Diecai(x) | Qixing(x)))", "((District(X) & InCity(x)) -> Xiufeng(x)) & Xiangshan(x) & Diecai(x) & Qixing(x)))", "all x.((District(x) & Guilin(x)) -> (Xiufeng(x) | Xiangshan(x) | Diecai(x) | Qixing(x)))", "all x.((Distillery(x) & CityBuildings(x)) -> (Xiufeng(x) | Xiangshan(x) | Diecai(x) | Qixing(x)))", "(District(x) & District(x) & City(Gilin))", "all x y.(((District(x) & City(y) & Guilin(y)) -> (Xiufeng,Xiangshan,Diecai,Qixing)))", "(Departments(x) & Guilin(x))", "((District(x) & Guilin(x)): Xiufeng(x) & Xiangshan(x) & Diecai(x) & Qixing(x)))", "(District(x) & District(x,x) & City(x) & GuilinCountry(x) & GuilinPeople(x))"]}
{"id": "folio_train_520", "nl": "Yangshuo is not a district in Guilin. ", "fol": "-IsDistrictIn(Yangshuo,Guilin)", "prediction": ["Yangshuo -Government(z)", "Yangshuo is not a DistrictInGuilin(y)", "Yangshuo -DestinationInGuilin(Yangshuo)", "Yangshuo is not a DistrictInGuilin.", "Yangshuo is not a DistrictInGuilin(y)", "Yangshuo is not a district in Guilin.", "all x.((Yangshuo[x) & -GuilinRegion(x)) -> -District(x))", "Yangshuo is not a DistinctionInGuilin(y)", "Yangshuo (Gunmin) - District(y))", "Yangshuo is not a district in Guilin.", "Yangshuo is not a district in Guilin.", "(-Guilin(Yangshuo) -> District(Yangshuo))", "Yangshuo_(y) & -DisturbantInGuilin(y))", "Yangshuo -DisturbanceInGuilin(y)", "Yangshuo is not a district in Guilin.", "(-GuilinDistrict(Yangshuo))"]}
{"id": "folio_train_521", "nl": "Xiangshan and Diecai are districts in the same city.", "fol": "exists c.(IsCity(c) & IsDistrictIn(Xiangshan,c) & IsDistrictIn(Diecai,c))", "prediction": ["all x y.((District(x) & City(y) & LocatedIn(x,y)) -> (Xiangshan(x) | Diecai(x)))", "(District(x) & District(x) & City(x,x))", "((Domestic(x) & City(x)) -> Xiangshan(x)) & ((District(x) & City(x)) -> Diecai(x)))", "(Division(x) & District(x) & District(x))", "(Alternative(X) | District(Diecai(x)))", "(District(x,Xiangshan) | District(x,Diecai)))", "-(District(x,y) & City(y))", "(District(x) & District(x) & InSameCity(x))", "(Districts(x,X) & Districts(x,Diecai))", "(SameCity(Xiangshan) & SameCity(Diecai))", "(SameCity(x) & District(x,y))", "all x.((District(x) & District(x)) -> (Xiangshan(x) & Diecai(x)))", "((District(x,y) & City(y)) -> Xiangshan(x)) & -District(x,y) & -District(x,y)))", "(SameCity(x) & (Xiangshan(x) | Diecai(x))))", "((DistrictInCity(x) & DistrictInCity(x,X)) | DistrictInCity(x,Diecai))", "(District(x) & District(x) & InCity(x))"]}
{"id": "folio_train_522", "nl": "Xiufeng is in Guilin.", "fol": "IsDistrictIn(Xiufeng,Guilin)", "prediction": ["all x.(Xiufeng(x) -> InGuilin(x))", "Xiufeng is in Guilin.", "Xiufeng is in Guilin.", "Xiufeng IsInGuilin(x)", "(ExiufengInGuilin(x) -> InGuilin(x))", "Xiufeng is in Guilin.", "Xiufeng is in Guilin.", "(Gauilin) | Guilin(x))", "Xiufeng is in Guilin.", "Xiufeng exists in Guilin.", "XiufengStockTwoFour(x) & InGuilin(x))", "Xiufeng is in Guilin.", "Xiufeng is in Guilin.", "(BetweenGuilin(x) & InGuilin(x))", "Xiufeng (x) & InGuilin(x))", "Xiufeng is InGuilin."]}
{"id": "folio_train_523", "nl": "Kowloon District is in Hong Kong.", "fol": "IsDistrictIn(Kowloon,Hong_kong)", "prediction": ["(LittleCowloonDistrict(Kwloon,HK))", "Kowloon District (Hondong)", "HongKong.", "Kowloon District (HongKong)", "Kowloon District (HongKong)", "Lekky-Kowloon (HongKong)", "HongKong.", "KowloonDistrictInHong Kong.", "KowloonDisturbanceIsInHongKong(i)", "Kowloon District (Hong(HongKong))", "the Kowloon District is in Hong Kong.", "Kowloon District (City(k) & In(k,k))", "(HongKong(KowloonDistrict) & LocatedIn(KowloonDistrict))", "(HongKong ((KowloonDistrict) & LocatedIn(Kowloon, HongKong)))", "Hong Kong.", "Kowloon, Hong Kong."]}
{"id": "folio_train_524", "nl": "All people who grow their own fresh vegetables in their home garden also have ample space.", "fol": "all x.(GrowsOwnVegetables(x) -> HasAmpleSpace(x))", "prediction": ["all x.((Person(x) & GrowsFreshVegetablesInHomeGarden(x)) -> AmpleSpace(x))", "all x.(GrowsFreshVegetablesInHomeGarden(x) -> AmpleSpace(x))", "all x.((Person(x) & GrowsOwnFreshVegetablesInHomeGarden(x)) -> AmpleSpace(x))", "all x.((Person(x) & GrowsFreshVegetablesInHomeGarden(x)) -> AmpleSpace(x))", "all x.((People(x) & GrowsOwnSweetVegetables(x) & HomeGarden(x)) -> AmpleSpace(x))", "all x.((Person(x) & GrowsOwnFreshVegetablesInHomeGarden(x)) -> AmpleSpace(x))", "all x.((Person(x) & GrowsFreshVegetablesInHomeGarden(x)) -> HasAmpleSpace(x))", "all x.((Person(x) & GrowsOwnFreshVegetablesInHomeGarden(x)) -> HasAmpleSpace(x))", "all x.((Person(x) & GrowsOwnFreshVegetables(x) & InHomeGarden(x)) -> HasAmpleSpace(x))", "all x.((Person(x) & GrowsOwnFreshVegetablesInHomeGarden(x)) -> AmpleSpace(x))", "all x.((Person(x) & GrowsOwnFreshVegetables(x) & HomeGarden(x)) -> AmpleSpace(x))", "all x.((Person(x) & GrowInHomeGarden(x) & OwnsFreshVegetables(x)) -> AmpleSpace(x))", "all x.(GrowsPreciousVegetablesInHomeGarden(x) -> AmpleSpace(x))", "all x.((Person(x) & GrowsFreshVegetablesInHomeGarden(x)) -> AmpleSpace(x))", "all x.((Person(x) & GrowsFreshVegetablesInHomeGarden(x)) -> AmpleSpace(x))", "all x.((Person(x) & GrowsFreshVegetablesInHomeGarden(x)) -> AmpleSpace(x))"]}
{"id": "folio_train_525", "nl": "If people are young working professionals who live in large cities, then they do not have ample space.", "fol": "all x.(YoungWorkingProfessional(x) -> -HasAmpleSpace(x))", "prediction": ["all x y.((YoungWorkingProfessional(x) & LargeCity(y) & LivesIn(x,y)) -> -AmpleSpace(x))", "all x.((YoungWorkingProfessional(x) & LivesInLargeCities(x)) -> -AmpleSpace(x))", "all x.((YoungWorkingProfessional(x) & LargeCity(x)) -> -AmpleSpace(x))", "all x.((YoungWorkingProfessional(x) & LivesInLargeCities(x)) -> -AmpleSpace(x))", "all x.((TeenWorkingProfessional(x) & LivesInLargeCities(x)) -> -AmpleSpace(x))", "all x.((WorkingProfessional(x) & Young(x) & LivesInLargeCities(x)) -> -AmpleSpace(x))", "all x.((WorkingProfessional(x) & Young(x) & LivesInLargeCities(x)) -> -AmpleSpace(x))", "all x.((YearWorkingProfessional(x) & LivesInLargeCities(x)) -> -AmpleSpace(x))", "all x.((WorkingProfessional(x) & Young(x) & LivesInLargeCities(x)) -> -AmpleSpace(x))", "all x.((People(x) & YoungWorkingProfessional(x) & LivesInLargeCities(x)) -> -AmpleSpace(x))", "all x.((YoungWorkingProfessional(x) & LivesInLargeCities(x)) -> -AmpleSpace(x))", "all x.((JuniorWorkingProfessional(x) & LivesInLargeCities(x)) -> -AmpleSpace(x))", "all x.((YoungWorkingProfessional(x) & LivesInLargeCities(x)) -> -AmpleSpace(x))", "all x.((YoungWorkingProfessional(x) & LivesInLargeCities(x)) -> -AmpleSpace(x))", "all x.((YoungWorkingProfessional(x) & LivesInLargeCities(x)) -> -AmpleSpace(x))", "all x.((YoungWorkingProfessional(x) & LargeCity(x)) -> -AmpleSpace(x))"]}
{"id": "folio_train_526", "nl": "If people order takeout from delivery services often, then they grow their own fresh vegetables in their home garden.", "fol": "all x.(OrdersTakeoutOften(x) -> GrowsOwnVegetables(x))", "prediction": ["all x.((People(x) & PurchasesTakeoutFromDeliveryServices(x)) -> GrowsFreshVegetables(x))", "all x.(OrdersTakeoutDelivery(x) -> GrowsOwnFreshVegetablesInHomeGarden(x))", "all x y.((Person(x) & DeliveryService(y) & OrdersTakeoutFrom(x,y)) -> GrowsOwnFreshVegetablesInHomeGarden(x))", "all x.((Client(x) & OrdersTakeoutFromDeliveryServices(x)) -> GrowsFreshVegetablesInHomeGarden(x))", "all x y.((Person(x) & PlacementService(y) & OrdersOtherGetouts(x,y)) -> GrowsFreshVegetablesInHomeGarden(x))", "exists x.(DeliveryService(x) & OrdersOwnOutServices(x) & GrowsOwnFreshVegetablesInHomeGarden(x))", "all x.((Person(x) & OrdersTakeoutFromDeliveryServicesOffly(x)) -> GrowsOwnFreshVegetablesInHomeGarden(x))", "all x y.((Person(x) & DeliveryServices(y) & OrdersTakeout(x,y)) -> GrowsFreshVegetablesInHomeGarden(x))", "all x.((Public(x) & OrdersTakeoutFromDeliveryServicesOffft(x)) -> GrowsOwnFreshVegetablesInHomeGarden(x))", "all x.((Person(x) & OrdersTakeout(x) & DeliveryServices(x)) -> Then GrowsOwnFreshVegetablesInHomeGarden(x))", "all x y z.((Person(x) & DeliveryService(y) & Takeout(z) & OrdersOfOften(x,y)) -> GrowsOwnFreshVegetables(x))", "all x.((Person(x) & OrdersTakeoutFromDeliveryServices(x) & SoilGarden(x)) -> GrowsFreshVegetablesInHomeGarden(x))", "all x.(OrdersTakeoutFromDeliveryServicesOfOften(x) -> GrowsFreshVegetablesInHomeGarden(x))", "all x.((DeliveryServicesDeparture(x) & OrdersOfOwnFrom(x)) -> GrowsOwnFreshVegetables(x))", "all x.((Person(x) & OrdersTakeoutFromDeliveryServices(x)) -> GrowsFreshVegetables(x))", "all x.((Person(x) & OrdersFromDistributionServices(x) & Often(x)) -> GrowsFreshVegetablesInHomeGarden(x))"]}
{"id": "folio_train_527", "nl": "If people enjoy going out often to restaurants with friends, then they order takeout from delivery services often.", "fol": "all x.(EnjoysGoingOutToRestaurants(x) -> OrdersTakeoutOften(x))", "prediction": ["all x.((PeopleAppreciateGoingOutOftenToRestaurantsWithFriends(x) & InRestaurantsWithFriends(x)) -> OrderTakeoutFromDeliveryServicesOften(x))", "all x.((PeopleLoveGoingOutOften(x) & HasFriendsInRestaurants(x)) -> OrderTakeoutFromDeliveryServicesOften(x))", "all x y z.((Person(x) & Restaurant(y) & Restaurant(z) & Enjoy GoingOutOfOften(x,y) & WithFriends(x,z)) -> OrdersTakeoutFromDeliveryServicesOfFrequently(x,y))", "all x y.((People(x) & EnjoysGoingOutOfTypically(x,y) & Restaurant(y)) -> OrdersTakeoutFromDeliveryServicesOfFrequently(x))", "all x y.((Person(x) & EnjoysGoingOutWithFriends(x) & Restaurant(y)) -> OrdersTakeoutFromDeliveryServicesOften(x))", "all x.((InCommunity(x) & EnjoysGoingOutOfOften(x) & Friends(x)) -> OrdersTakeoutFromDeliveryServicesOfOften(x))", "all x.((People(x) & EnjoysGoingOutOfOftenToRestaurantsWithFamilies(x)) -> OrdersTakeoutFromDeliveryServicesOfOften(x))", "all x.(EnjoysExercising(x) -> (FindsRestaurantWithFriends(x) & OrdersTakeoutFromDeliveryServicesFrequently(x)))", "all x y.((GasilyGoingOut(x,y) & Friends(y)) -> OrdersTakeoutFromDistributionServices(x,y))", "all x y z.((Person(x) & Restaurant(y) & DeliveryService(z) & EnjoysGoingOut(x,y,z)) -> OrdersTakeoutOfOfOften(x,z))", "all x.((Friends(x) & EnjoysGoingOutAt(x,Restaurants) & GoesTo(x,Restaurants) & GoesTo(x,Restaurants)) -> OrdersTakeoutFromDeliveryServices(x))", "all x y.((People(x) & EnjoysGoingOutOfOftenToRestaurants(x,y) & HasFamilies(y)) -> OrdersTakeoutFromDeliveryServicesOfOften(x))", "all x.((People(x) & EnjoyGoingOutOfOften(x) & WithFriends(x)) -> OrderTakeoutFromD deliveryServicesOfFrequently(x))", "all x y.((People(x) & (Relatives(y) | Friends(y))) -> OrdersTakeoutFrom(x,y))", "all x y.((Person(x) & EnjoysGoingOutOflyToRestaurantsWithFriends(x) & InOrder(y,x)) -> OrdersTakeoutFromDeliveryServicesOfOften(x))", "all x.((People(x) & EnjoysGoingOutOftenWithFriends(x)) -> OrdersTakeoutFromDeliveryServices(x))"]}
{"id": "folio_train_528", "nl": "If people regularly tout the benefits of homegrown and homecooked meals over fast food, then they enjoy going out often to restaurants with friends. ", "fol": "all x.(ToutsHomegrownBenefits(x) -> EnjoysGoingOutToRestaurants(x))", "prediction": ["all x y.((Person(x) & RegularlyPurportHomegrownAndHomecookedMeals(x) & FastFood(y)) -> EnjoysGoingOutWithFriends(x,y))", "all x y.((Person(x) & HomegrownMeals(x,y) & HomecookedMeals(x) & FastFood(y) & RegularlyPurportTheBenefits(x,y)) -> EnjoysFrequentOuting(x,y))", "all x.((Person(x) & RegularlyPitchesHomegrownMeals(x) & HomecookedMeals(x) & OverFastFood(x)) -> EnjoysGoingOutToRestaurants(x))", "all x y z.((People(x) & HomegrownMeals(y) & HomecookedMeals(z) & FastFood(z) & ToutsBenefits(x,y,z)) -> EnjoysOuting(x))", "all x y.((Person(x) & Homegrown(x) & Homecooked(x) & FastFood(y) & RegularlyChokesBenefits(x,y)) -> EnjoysGoingOut(x))", "all x y.((People(x) & HomegrownAndHomecookedMeals(x) & -FastFood(y)) -> (EnjoysGoingOutToRestaurants(x,y) & HasFamily(x,y)))", "all x y.((People(x) & HomegrownMeals(x) & HomeCookedMeals(x) & FastFood(y) & RegularlyPutsBenefits(x,y)) -> EnjoysGoingOutToRestaurants(x,y))", "all x y.((Personal(x) & PersuadesHomegrownAndHomeCookedMeals(x,y) & FastFood(y)) -> EnjoyGoingOut(x))", "all x.((People(x) & RegularlyPurportsHomegrownAndHomeCookedMeals(x) & FastFood(x)) -> EnjoysEngagingWithFriends(x))", "all x y z.((Person(x) & CommunesHomegrownAndHomecookedMeals(x) & FastFoodMeals(y) & Restaurant(z)) -> EnjoysGoingOutOftenWithFriends(x,y,z,x))", "all x.((People(x) & RegularlyPurportsHomegrownMeals(x) & HomecookedMeals(x) & OverFastFood(x)) -> EnjoysGoingOutToRestaurantsWithFriends(x))", "all x.((Person(x) & RegularlyPraysHomegrownAndHomecookedMeals(x,y) & FastFood(y)) -> EnjoysGoingOutToRestaurantsWithFriends(x))", "all x y.((Person(x) & HomegrownMeals(y) & HomecookedMeals(y) & OverFastFood(x,y)) -> EnjoysRestaurantsWithFriends(x))", "all x.((Person(x) & RegularlyPursuesHomegrownAndHomecookedMeals(x) & OverFastFood(x)) -> EnjoysGoingOutToRestaurantsWithFriends(x))", "all x.((ManyPerson(x) & RegularlyPursuesHomegrownAndHomecookedMeals(x) & FastFood(x)) -> EnjoysGoingOutWithFriends(x))", "all x y.((People(x) & RegularlyPositionHomegrownMeals(x,y) & HomecookedMeals(x,y) & FastFood(y)) -> EnjoysGoingOutTo(x,y))"]}
{"id": "folio_train_529", "nl": "Michael grows his own fresh vegetables in his home garden or regularly touts the benefits of homegrown and homecooked meals over fast food.", "fol": "(GrowsOwnVegetables(Michael) | ToutsHomegrownBenefits(Michael))", "prediction": ["all x y.((Michael(x) & HomeGarden(y)) -> (GrowsFreshVegetablesInHomeGarden(x,y) | PledgesBenefits(x,y)))", "all x y.((Michael(x) & FreshVegetables(y)) -> (GrowsInHomeGarden(x,y) | ToutsBenefitsSeasonalMeals(x,fastFood)))", "all x y.((Michael(x) & HomeGrowth(y)) -> (GrowsEqualFreshVegetablesInHomeGarden(x,y) | (PraisesHomegrownAndHomecookedMeals(x,y) & FastFood(x,y)))))", "all x.(Michael(x) -> (GrowsFreshVegetables(x) | (PresupposesHomegrownMeals(x) & PrevostsFastFood(x)))))", "all x y.((Michael(x) & FreshVegetables(y)) -> (GrowsInHomeGarden(x,y) | (SupportsHostgrownMeals(x) & HomecookedMeals(x)) & FastFood(y))))", "all x.((Michael(x) & (GardenGreen(x) | PotsOffHomegrownAndHomecookedMeals(x))) -> GrowsOwnFreshVegetables(x))", "all x y.((Michael(x) & FreshVegetables(y)) -> (GrowsInHomeGarden(x) | BoostsHomegrownMeals(x,y) | BoostsHomecookedMeals(x,y)))", "all x.((Michael(x) & (GrowsOwnFreshVegetablesInHomeGarden(x) | PledgesHomegrownAndHomecookedMealsOverFastFood(x))) -> GrowsOwnFreshVegetables(x))", "all x y.((Michael(x) & HomeGarden(y)) -> (GrowsOwnFreshVegetables(x,y) | PrefersHomegrownAndHomecookedMeals(x,y)))", "all x y z.((Michael(x) & FreshVegetables(y) & HomeGarden(z)) -> (Grows(x,y) | PledgesBenefits(x,z) & HomegrownAndHomecooked(x)))", "all x y.((Michael(x) & FreshVegetables(y)) -> (Grows(x,y) | (PlaudsBenefits(x,y) & HomegrownMeals(x) & HomecookedMeals(y))))", "all x y.((Michael(x) & HomeGarden(y)) -> (GrowsFreshVegetablesInHomeGarden(x,y) | CelebratesHomegrownAndHomecookedMeals(x,z)))", "all x y z.((Michael(x) & FreshVegetables(y) & HomeGarden(z)) -> (GrowsInHomeGarden(x,y,z) | PledgesBenefits(x,g,y,z)))", "all x y.((Michael(x) & HomeGrowsInHomeGarden(x)) -> (PursuesInHomegrownAndHomeCookedMeals(x) & -FastFood(y)))", "all x y.((Michael(x) & FreshVegetables(y)) -> (GrowsInHomeGarden(x,y) | PromotesHomegrownAndHomecookedMeals(x)))", "all x.((Mike(x) & (GrowsOwnFreshVegetables(x) | (PlaudsHomegrownMeals(x) | PlaudsHomecookedMeals(x)))) -> FreshVegetables(x))"]}
{"id": "folio_train_530", "nl": "Michael enjoys going out often to restaurants with friends.", "fol": "EnjoysGoingOutToRestaurants(Michael)", "prediction": ["all x y.((Michael(x) & Restaurant(y)) -> EnjoysGoingOutOfAllWithFriends(x,y))", "all x.(Michael(x) -> EnjoysGoingOutToRestaurantsWithFriends(x))", "all x y.((AndMichael(x) & Restaurant(y)) -> EnjoysGoingOut(x,y))", "all x.((Michael(x) & GoesToRestaurants(x)) -> Enjoys(x))", "all x.((Mike(x) & InRestaurants(x)) -> EnjoysWashing(x))", "all x.((Michelle(x) & OutOfRestaurants(x)) -> Enjoys(x))", "ALL x y.((Michael(x) & Restaurant(y)) -> EnjoysGaining(x,y))", "All x y.((Michael(x) & Restaurant(y)) -> EnjoysGoingOutWithFriends(x))", "(ExperiencesGoingOut(Michael) & Friends(Michael))", "\u201c(Grows(Michael) & Eats(Michael,Friends))", "all x.((Michael(x) & Friends(y)) -> EnjoysGoingOut(x,y))", "all x.(Michael(x) -> EnjoysGoingOutToRestaurantsWithFriends(x))", "all x.(Michael(x) -> EnjoysGoingOutToRestaurant(x))", "all x y.((Moon(x) & Restaurant(y)) -> EnjoysGoingOut(x,y))", "all x y.((Michael(x) & Restaurant(y)) -> EnjoysGoingOutWith(x,y))", "all x y z.((Shropshire(x) & Restaurant(y) & Bar(z)) -> Enjoys(x,y))"]}
{"id": "folio_train_531", "nl": "Michael is a young working professional who lives in large cities.", "fol": "(YoungWorkingProfessional(Michael) & Young(Michael) & LargeCity(Michael))", "prediction": ["all x.((Michael) & YoungWorkingProfessional(x) & LivesInLargeCities(x)) -> Professional(x))", "all x.((JuniorWorkingProfessional(x) & LivesInLargeCities(x)) -> Michael(x))", "all x.((Jimmy(x) & WorkingProfessional(x) & LivesInLargeCities(x)) -> Young(x))", "(Judge(Michael) & YoungWorkingProfessional(Michael) & LivesInLargeCities(Michael))", "all x.((Jimmy(x) & WorkingProfessional(x) & LivesInLargeCities(x)) -> Young(x))", "(WorkingProfessional(Michael) & Young(Michael) & LivesInLargeCities(Michaels))", "all x.(Michael(x) -> (JungleWorkingProfessor(x) & LivesInLargeCities(x)))", "(WorkingProfessional(Michael) & LargeCity(Michael))", "Michael is a YoungWorkingProfessional(Michelle) & LivesInLargeCities(Michelle)", "all x.(YearWorkingProfessional(x) & LivesInLargeCities(x) -> Michael(x))", "all x.((JailWorkingProfessional(x) & LivesInLargeCities(x)) -> Michael(x))", "all x.((Jim(x) & YoungWorkingProfessional(x) & LivesInLargeCities(x)) -> MichaelLeadsIn(x,y))", "the workplace & livesInLargeCities(Michael)", "all x.((JailWorkingProfessional(x) & LivesInLargeCities(x)) -> Michael(x))", "all x.(Professor(x) -> (JuneWorking(x) & LargeCity(x)))", "(Jimmy(Michael) & YoungWorkingProfessional(Michael) & LivesInLargeCities(Michael))"]}
{"id": "folio_train_532", "nl": "Michael grows his own fresh vegetables in their home garden or is a young working professional who lives in large cities.", "fol": "(GrowsOwnVegetables(Michael) | (YoungWorkingProfessional(Michael) & LargeCity(Michael)))", "prediction": ["(exists x.(Jimmy(x) & GrowsOwnFreshVegetablesInHomeGarden(x)) | (YoungWorkingProfessional(x) & LivesInLargeCities(x))))", "(LikesToGrow FreshVegetables(Michal) | LivesInLargeCities(Michal)))", "all x.((Michael(x) & GrowsEachFreshVegetables(x)) | (YearWorkingProfessional(x) & LivesInLargeCities(x))))", "all x.((Michael(x) & (GrowsOwnSpices(x) | GrowsFreshVegetables(x) & HomeGarden(x))) -> YoungWorkingProfessional(x))", "all x.((Michael(x) & (GrowsFreshVegetablesInHomeGarden(x) | YoungWorkingProfessional(x) & LivesInLargeCities(x))) -> GrowsInYourGarden(x))", "all x.((Michael(x) & (GrowsOwnFreshVegetablesInHomeGarden(x) | YoungWorkingProfessional(x) & LivesInLargeCities(x))) -> WorksIn(x,y))", "all x.((Michael(x) & GrowsFreshVegetables(x) & Or YoungWorkingProfessional(x) & LargeCityLiving(x)) -> GrowsInHomeGarden(x))", "all x.((Jimmy(x) & (GrowsRenewableVegetablesInHomeGarden(x) | YoungWorkingProfessional(x))) -> LargeCityLiver(x))", "exists x.(Michael(x) & ((GrowsFreshVegetables(x) & FarmsIn(x,home)) | (LivesIn(x,largeCity) & YoungWorkingProfessional(x)))))", "all x.((Michael_FreshVegetables(x) | YoungWorkingProfessional(x)) -> (GrowsInHomeGarden(x) | LivesInLargeCities(x))))", "((EitherPerson(Michael) & GrowsOwnFreshVegetables(Michael)) | (WorkingProfessional(Michael) & LivesInLargeCities(Michael))))", "all x.((Mary(x) & GrowsOwnFreshVegetables(x)) -> (WorkingProfessional(x) & LargeCityLiving(x)))", "all x.((Michael(x) & (GrowsOwnYeastInHomeGarden(x) | YoungWorkingProfessional(x) & LivesInLargeCities(x))) -> FreshVegetables(x))", "all x.((Michael(x) & (GrowsOwnFreshVegetables(x) | YoungWorkingProfessional(x)) & LivesInLargeCities(x)) -> GrowsInHomeGarden(x))", "((JewishWorkingProfessional(Michael) & WorksInLargeCities(Michael)) | GrowsSelfFreshVegetables(Michael)))", "all x.((Michael(x) & (GrowsEachFreshVegetablesInHomeGarden(x) | YoungWorkingProfessional(x) & LivesInLargeCities(x))) -> (Year(x) & LivesInLargeCities(x)))"]}
{"id": "folio_train_533", "nl": "All devices belonging to the company are connected to Google Home. ", "fol": "all x.(BelongsToCompany(x) -> ConnectedToGoogleHome(x))", "prediction": ["all x y.((Device(x) & GoogleHome(y)) -> ConnectedTo(x,y))", "all x.((Device(x) & Company(x)) -> ConnectedToGoogleHome(x))", "all x.((Device(x) & Companies(x)) -> ConnectedToGoogleHome(x))", "all x.((Device(x) & GoogleHome(x)) -> Connected(x,y))", "all x y.((Device(x) & Company(y)) -> ConnectedToGoogleHome(x,y))", "all x.((Device(x) & BelongingToCompany(x)) -> ConnectedToGoogleHome(x))", "all x.((Device(x) & GoogleHome(x)) -> ConnectedTo(x,x))", "all x y.((Device(x) & Device(y) & GoogleHome(y)) -> ConnectedTo(x,y))", "all x.((Device(x) & Company(x)) -> ConnectedToGoogleHome(x))", "all x y.((Device(x) & Company(y)) -> ConnectedToGoogleHome(x,y))", "all x.((Device(x) & CompanionDevice(x)) -> ConnectedToGoogleHome(x))", "all x.(OwnerDevice(x) -> GoogleHome(x))", "all x y.((Device(x) & Company(y)) -> ConnectsToGoogleHome(x,y))", "all x.((Device(x) & Customer(x)) -> LinkedToGoogleHome(x))", "all x.((Device(x) & BelongsToCompany(x)) -> ConnectedToGoogleHome(x))", "all x.((Device(x) & Company(x)) -> ConnectedToGoogleHome(x))"]}
{"id": "folio_train_534", "nl": "All devices belonging to employees are connected to the company's wifi. ", "fol": "all x.(BelongsToEmployee(x) -> ConnectedToWifi(x))", "prediction": ["all x.((Device(x) & Employee(y)) -> ConnectedToWifi(x,y))", "all x y.((Device(x) & Employee(y)) -> ConnectedToWifi(x,y))", "all x y.((Device(x) & Employee(y)) -> ConnectedToWiFi(x,y))", "all x.((Device(x) & Employee(x)) -> ConnectedToWifi(x))", "all x.((Device(x) & Employee(x)) -> ConnectedToFirewall(x))", "all x.(EmployeeDevice(x) -> ConnectedToWifi(x))", "all x y.((Device(x) & Employee(y)) -> ConnectedToWifi(x,y))", "all x.(Employee(x) -> ConnectedToWifi(x))", "all x y z.((Device(x) & Employee(y) & Company(z) & ConnectedToWiFi(x,y)) -> ConnectedToWifi(x,z))", "all x.(Device(x,y) & Employee(y) & ConnectedToWorkplaceWifi(x,y))", "all x y.((Device(x) & Employee(y)) -> ConnectedToWiFi(x,y))", "all x y.((Device(x) & Employee(y)) -> Connected(x,y))", "all x.(EmployeeDevice(x) -> ConnectedToWiFi(x))", "all x y.((Device(x) & Employee(y)) -> ConnectedToWiFi(x,y))", "all x y.((Device(x) & Employee(y)) -> ConnectedToWifi(x,y))", "all x.(ApplianceToEmployee(x) -> ConnectedToWiFi(x))"]}
{"id": "folio_train_535", "nl": "All devices connected to Google Home are controlled by the managers. ", "fol": "all x.(ConnectedToGoogleHome(x) -> ControlledByManagers(x))", "prediction": ["all x.((Device(x) & ConnectedToGoogleHome(x)) -> ManagedByManagers(x))", "all x.(GoogleHome(x) -> ManagedByManagers(x))", "all x.((Device(x) & ConnectsToGoogleHome(x)) -> ControledByManager(x))", "all x.((Device(x) & ConnectedToGoogleHome(x)) -> ControlledByManagers(x))", "all x.((Device(x) & ConnectedToGoogleHome(x)) -> ControledByManager(x))", "all x.((Device(x) & ConnectedToGoogleHome(x)) -> ControlledByManagers(x))", "all x y.((Device(x) & GoogleHome(y) & ManagedBy(x,y)) -> ControlledBy(x,y))", "all x.((Device(x) & ConnectedToGoogleHome(x)) -> ControlledByManager(x))", "all x.((Device(x) & ConnectedToGoogleHome(x)) -> ManagedByManagers(x))", "all x y.((Device(x) & ConnectedToGoogleHome(x) & Manager(y)) -> ControlledBy(x,y))", "all x y.((Device(x) & GoogleHome(y)) -> ControlledByManager(x,y))", "all x.(GoogleHome(x) -> ControlledByManagers(x))", "all x y.((Device(x) & Manager(y) & ConnectedToGoogleHome(x,y)) -> ManagedBy(x,y))", "all x.((DeviceConnectedToGoogleHome(x)) -> ControlledByManagers(x))", "all x.(GoogleHome(x) -> ControlledByManagers(x))", "all x.((Device(x) & ConnectedToGoogleHome(x)) -> ControledByManager(x))"]}
{"id": "folio_train_536", "nl": "All devices that connect to the company's wifi are easy to operate. ", "fol": "all x.(ConnectedToWifi(x) -> IsEasyToOperate(x))", "prediction": ["all x.((Device(x) & ConnectsToWiFi(x)) -> EasyToOperate(x))", "all x.((Device(x) & ConnectsToCompanyWiFi(x)) -> EasyToOperate(x))", "all x.((Device(x) & ConnectsToWiFi(x)) -> EasyToOperate(x))", "all x.((Device(x) & ConnectsToWiFi(x)) -> EasyToOperate(x))", "all x.((Device(x) & ConnectsToWiFi(x,y)) -> EasyToOperate(x))", "all x.((Device(x) & ConnectsToCompanyWifi(x)) -> EasyToOperate(x))", "all x.((Device(x) & ConnectsToWifi(x)) -> EasyToOperate(x))", "all x y.((Device(x) & ConnectsTo(x,y) & CompanyWifi(x)) -> EasyToOperate(x))", "all x.(ConnectsToWifi(x) -> EasyToOperate(x))", "all x.((Device(x) & ConnectsToFiber(x)) -> EasyToOperate(x))", "all x.((Device(x) & ConnectsToWiFi(x)) -> EasyToOperate(x))", "all x.((Device(x) & ConnectsToWiFi(x)) -> EasyToOperate(x))", "all x.((Device(x) & ConnectsToWifiOperation(x)) -> EasyToOperate(x))", "all x.((Device(x) & ConnectsToWiFi(x)) -> EasyToOperate(x))", "all x.((Device(x) & ConnectsToWiFi(x)) -> EasyToOperate(x))", "all x.((Device(x) & ConnectToWifi(x)) -> EasyToOperate(x))"]}
{"id": "folio_train_537", "nl": "IPod1 belongs to employees. ", "fol": "BelongsToEmployee(IPod1)", "prediction": ["IPod1 belongsToEmployees(iPod1))", "all x.(IPod1,Executive(x) -> BelongsTo(x,Employees))", "all x.(IPod1(x) -> Employee(x))", "-Employee(iPod1)", "all x.(IPod(x) -> Employee(x))", "all x.(IPodOne(x) -> Employee(x))", "all x.(IPod1(x) -> BelongsToEmployees(x))", "IPod1 belongsToEmployees(iPod1))", "IPod1 belongsToEmployees(iPod2) & Employee(iPod2))", "IPod1 belongsToEmployees(iPod1))", "all x.(IPod(x) -> Employer(x))", "all x.(IPoBearsToEmployees(x) -> IPod1(x))", "IPod1 belongsToEmployees(i) & -employees(i))", "all x.(IPod(x) -> Employee(x))", "all x.(IPod1(x) -> Employee(x))", "all x.(IPod1(x) -> Employee(x))"]}
{"id": "folio_train_538", "nl": "iPod1 is easy to operate.", "fol": "IsEasyToOperate(IPod1)", "prediction": ["all x.(Ipod(x) -> EasyToOperate(x))", "all x.( iPod(x) -> EasyToOperate(x))", "all x.( iPod1(x) -> EasyToOperate(x))", "all x.( iPod(x) -> EasyToOperate(x))", "all x.(IPod(x) -> EasyToOperate(x))", "all x.(IPod(x) -> EasyToOperate(x))", "(EasyToOperate(iPod1))", "all x.(IPod(x) -> EasyToOperate(x))", "all x.(Ipod(x) -> EasyToOperate(x))", "all x.(IPod(x) -> EasyToOperate(x))", "-EasyToOperate(iPod1)", "All x.(Ipod(x) -> EasyToOperate(x))", "all x.( iPod1(x) -> EasyToOperate(x))", "all x.(( iPod1(x) & EasyToOperate(x)) -> EasyToOperate(x))", "all x.(IPod(x) -> EasyToOperate(x))", "all x.(IPod(x) -> EasyToOperate(x))"]}
{"id": "folio_train_539", "nl": "iPod1 is controlled by managers.", "fol": "ControlledByManagers(IPod1)", "prediction": ["all x.(Ipod(x) -> ControledByManager(x))", "all x.(InDEVIL(x) -> ControlledByManagers(x))", "all x.(Ipod(x) -> ControlledByManagers(x))", "all x.(IPod(x) -> ControlledByManagers(x))", "all x.(SoftDrink(x) -> ManagedByMembers(x))", "all x.(IPod(x) -> ControlledByManagers(x))", "all x.(iPod(x) -> ControlledByManagers(x))", "all x.(IPod(x) -> ControledByManagers(x))", "all x.(Ipod(x) -> ControlledByManagers(x))", "all x.(Ipod(x) -> DesignedByManagers(x))", "all x.(Ipod(x) -> ControlsByManagers(x))", "all x.(IPod(x) -> ManagedByManagers(x))", "all x.(IPod(x) -> ControlledByManagers(x))", "all x.(IPod(x) -> ControledByManagers(x))", "all x.( iPod(x) -> (ManagedBy(x) & Manager(x)))", "all x.(Ipod(x) -> Manages(x,i))"]}
{"id": "folio_train_540", "nl": "iPod1 is connected to Google Home.", "fol": "ConnectedToGoogleHome(IPod1)", "prediction": ["all x.(Ipod(x) -> ConnectedToGoogleHome(x))", "all x.(( iPod(x) & Home(g)) -> Connected(x,g))", "all x.(Ipod(x) -> ConnectedToGoogleHome(x))", "all x.(( iPod-1(x) & GoogleHome(x)) -> Connected(x))", "the connectedToGoogleHome(iPodu1&GoogleHome)", "all x.(LinksToGoogleHome(x) -> iPod1(x))", "all x.(Ipod(x) -> ConnectedToGoogleHome(x))", "all x.( iPod1(x) -> ConnectedToGoogleHome(x))", "all x.(( iPod(x) & ConnectedToGoogleHome(x)) -> ConnectedToGasHome(x))", "all x y.(( iPod(x) & GoogleHome(y)) -> ConnectedTo(x,y))", "all x.(( iPod1(x) & GoogleHome(x)) -> Connected(x))", "all x.(iPod(x) -> ConnectedToGoogleHome(x))", "all x.(IPod(x) -> ConnectedToGoogleHome(x))", "all x y.((MicrosoftIPod(x) & GoogleHome(y)) -> ConnectedTo(x,y))", "all x.(( iPod1 (x) & ConnectedToGoogleHome(x)) -> ConnectedToGoogleHome(x))", "all x.((Ipod(x) & GoogleHome(x)) -> ConnectedTo(x))"]}
{"id": "folio_train_541", "nl": "No touring musicians are permanent members of an orchestra.", "fol": "all x.(IsOrchestraMember(x) -> -IsTouringMusician(x))", "prediction": ["-exists x.(TouristMusician(x) & PermanentMember(x))", "all x.(TouringMusician(x) -> -PermanentMemberOfOrchestra(x))", "all x y.((TouringMusician(x) & Orchestra(y)) -> -PermanentMember(x,y))", "all x.(TouristMusician(x) -> -PermanentMemberOfOrchestra(x))", "-exists x.(TouringMusician(x) & PermanentLimits(x,Orchestra))", "no touringMusicianPermanent(Tourist(Musician) -> -ToursContinuousInOrchestra(Musician))", "all x.(TouristMusician(x) -> -PermanentCareer(x))", "all x y.((TouringMusician(x) & Orchestra(y)) -> -PermanentMember(x,y))", "all x y.((TouristMusician(x) & Orchestra(y)) -> -PermanentMember(x,y))", "all x.(TouristMusician(x) -> -ConditionalMemberOfOrchestra(x))", "-exists x.(ThuringMusician(x) & Orchestra(x) & PermanentMember(x))", "-exists x.(TouristMusician(x) & PermanentMember(x,Orchestra))", "all x.(TouristMusician(x) -> -PermanentMemberOfOrchestra(x))", "all x.(TouristMusician(x) -> -PermanentMemberOfOrchestra(x))", "all x y.((TouristMusician(x) & Orchestra(y)) -> -PermanentMember(x,y))", "-exists x.(TouristMusician(x) & PermanentMember(x,Orchestra))"]}
{"id": "folio_train_542", "nl": "Musicians are either permanent members of an orchestra or have a unique musical voice or style.", "fol": "all x.((IsOrchestraMember(x) & -HasUniqueMusicalVoice(x)) | (-IsOrchestraMember(x) & HasUniqueMusicalVoice(x)))", "prediction": ["all x.(Musician(x) -> ((Permanent(x) & Orchestra(x)) | UniqueMusicalVoiceOrStyle(x))))", "all x.(Musician(x) -> (PermanentMemberOfOrchestra(x) | UniqueMusicalVoiceOrStyle(x)))", "all x.(Musician(x) -> (PermanentMember(x) | UniqueMusicalVoiceOrStyle(x)))", "all x.(Musician(x) -> (PermanentMitgliedOfOrchestra(x) | UniqueMusicalVoiceOrStyle(x)))", "all x.(Musician(x) -> (PermanentMemberOfOrchestra(x) | UniqueMusicalVoiceOrStyle(x)))", "all x y.((Musician(x) & Orchestra(y)) -> (PermanentMember(x,y) | UniqueMusicalVoiceOrStyle(x)))", "all x y.((Musician(x) & Orchestra(y)) -> (PermanentMemberOf(x,y) | UniqueMusicalVoiceOrStyle(x)))", "all x.(Musician(x) -> (PermanentMemberOfOrchestra(x) | UniqueMusicalVoiceOrStyle(x)))", "all x.(Musician(x) -> (PermanentLimit(x) | UniqueMusicalVoice(x) | UniqueMusicalStyle(x)))", "all x.(Musician(x) -> (PermanentMember(x,orchestra) | UniqueMusicalVoiceOrStyle(x)))", "all x.(Musician(x) -> ((PermanentMember(x,Orchestra) | UniqueMusicalVoice(x) | UniqueMusicalStyle(x))))", "all x.(Musician(x) -> (PermanentMemberOfOrchestra(x) | UniqueMusicalVoiceOrStyle(x)))", "all x.(Musician(x) -> (PersonalMemberOfOrchestra(x) | UniqueMusicalVoiceOrStyle(x)))", "all x.(Musician(x) -> (PermanentMemberOfOrchestra(x) | UniqueMusicalVoiceOrStyle(x)))", "all x y z.((Musician(x) & Orchestra(y) & (PermanentMemberOf(y,x) | UniqueMusicalVoice(x) | UniqueStyle(x))) -> Permanent(x,y))", "all x.(Musician(x) -> (PermanentMemberOfOrchestra(x) | UniqueMusicalVoiceOrStyle(x)))"]}
{"id": "folio_train_543", "nl": "All musicians who have a unique musical voice or style are interesting as individual performers.", "fol": "all x.(HasUniqueMusicalVoice(x) -> IsInterestingPerformer(x))", "prediction": ["all x.((Musician(x) & UniqueMusicalVoiceOrStyle(x)) -> InterestingAsIndividualPerformer(x))", "all x.((Musician(x) & UniqueMusicalVoice(x)) | UniqueStyle(x)) -> InterestingIndiePerformer(x))", "all x.((Musician(x) & UniqueVoice(x) & UniqueStyle(x)) -> InterestingIndividualPerformers(x))", "all x.((Musician(x) & UniqueMusicalSign(x)) -> InterestingAsIndividualPerformer(x))", "all x.((Musician(x) & UniqueMusicalVoice(x) & UniqueMusicalStyle(x)) -> InterestingIndividualPerformer(x))", "all x.((Musician(x) & UniqueMusicalVoice(x) & UniqueMusicalStyle(x)) -> InterestingAsIndividualPerformer(x))", "all x.((Musician(x) & UniqueMusicalVoiceOrStyle(x)) -> InterestingAsIndividualPerformer(x))", "all x.((Musician(x) & UniqueSingularVoice(x) & UniqueStyle(x)) -> InterestingAsIndividualPerformers(x))", "all x.((Musician(x) & UniqueMusicalVoiceOrStyle(x)) -> InterestingAsIndividualPerformer(x))", "all x.((Musician(x) & UniqueMusicalVoice(x) | UniqueMusicalStyle(x)) -> InterestingAsIndividualPerformer(x))", "all x.((Musician(x) & UniqueSound(x)) -> Interactive(x))", "all x.((Musician(x) & UniqueMusicalVoiceOrStyle(x)) -> InterestingIndividualPerformer(x))", "all x.((Musician(x) & UniqueMusicalVoice(x) & UniqueMusicalStyle(x)) -> InterestingAsIndividualPerformer(x))", "all x.((Musician(x) & UniqueMusicalVoice(x) & UniqueMusicalStyle(x)) -> InterestingInterpreter(x))", "all x.((Musician(x) & UniqueMusicalVoiceOrStyle(x)) -> InterestingAsIndividualPerformer(x))", "all x.((Musician(x) & UniqueMusicalVoiceOrStyle(x)) -> InterestingOneOfferer(x))"]}
{"id": "folio_train_544", "nl": "All musicians who are interesting as individual performers are capable of attracting large audiences.", "fol": "all x.(IsInterestingPerformer(x) -> CanAttractLargeAudiences(x))", "prediction": ["all x.((Musician(x) & InterestingAsIndividualPerformer(x)) -> AttractsLargeAudiences(x))", "all x.((Musician(x) & InterestingAsIndividualPerformer(x)) -> AttractsLargeAudiences(x))", "all x.((Musician(x) & InterestingAsIndividualPerformer(x)) -> AttractsLargeAudiences(x))", "all x.((Musician(x) & InterestingAsIndividualPerformer(x)) -> AttractsLargeAudiences(x))", "all x.((Musician(x) & InterestingAsIndividualPerformer(x)) -> AttractsLargeAudiences(x))", "all x.((Musician(x) & InterestingAsIndividualPerformer(x)) -> CanAttractLargeAudiences(x))", "all x.((Musician(x) & InterestingAsIndividualPerformer(x)) -> AttractsLargeAudiences(x))", "all x.((Musician(x) & InterestingAsIndividualPerformer(x)) -> CapableOfAttractingLargeAudiences(x))", "all x.((Musician(x) & InterestingAsIndividualPerformer(x)) -> CapableOfAttractingLargeAudiences(x))", "all x.((Musician(x) & InterestingAsIndividualPerformer(x)) -> AttractsLargeAudiences(x))", "all x.((Musician(x) & InterestingAsIndividualPerformer(x)) -> AttractsLargeAudiences(x))", "all x.((Musician(x) & InterestingIndividuallyPerformers(x)) -> AttractsLargeAudiences(x))", "all x.((Musician(x) & InterestingAsIndividualPerformer(x)) -> CapableOfAttractingLargeAudiences(x))", "all x.((Musician(x) & InterestingIndividualPerformer(x)) -> CanAttractLargeAudiences(x))", "all x.((Musician(x) & InterestingAsIndividualPerformer(x)) -> CapableOfAttractingLargeAudiences(x))", "all x.((Musician(x) & InterestingIndividualPerformer(x)) -> CapableOfAttractingLargeAudiences(x))"]}
{"id": "folio_train_545", "nl": "If Ryan is interesting as an individual performer and has a unique musical voice or style, then Ryan is either a touring soloist musician and capable of attracting large audiences, or neither a touring soloist musician nor capable of attracting large audiences.", "fol": "((IsInterestingPerformer(Ryan) & HasUniqueMusicalVoice(Ryan)) -> -((IsTouringMusician(Ryan) & -CanAttractLargeAudiences(Ryan)) | (-IsTouringMusician(Ryan) & CanAttractLargeAudiences(Ryan))))", "prediction": ["all x.((InterestingIndividualPerformer(x) & UniqueMusicalVoiceOrStyle(x)) -> (TouringSoloistMusician(x) & CapableOfAttractingLargeAudiences(x)) | -TouringSoloistMusician(x) & CapableOfAttractingLargeAudiences(x)))", "all x.((InterestingElementPerformer(x) & UniqueMusicalVoiceOrStyle(x)) -> (TouringSoloistMusician(x) & CanAttractLargeAudiences(x) & -TouringSoloistMusicianCanAttractLargeAudiences(x)))", "all x.((InterestingIndividualPerformer(x) & UniqueMusicalVoiceOrStyle(x)) -> (TouringSoloistMusician(x) & AttractsLargeAudiences(x) | (-TouringSoloistMusician(x) & AttractsLargeAudiences(x))))", "all x.((TouringSoloistMusician(x) & UniqueMusicalVoice(x) & Inviting(x) & UniqueMusicalStyle(x) & AttractsLargeAudiences(x)) | (-TouringSoloistMusician(x) & AttractsLargeAudiences(x))))", "all x.(InterestingAsIndividualPerformer(x) & UniqueMusicalVoiceOrStyle(x)) -> ((TouringSoloistMusician(x) & AttractsLargeAudiences(x)) | -TravelingSoloistMusician(x) & -AttractsLargeAudiences(x))))", "all x.((InterestingIndividualPerformer(x) & UniqueMusicalVoiceOrStyle(x)) -> (TouringSoloistMusician(x) & LargeAudiences(x) | -TouringSoloistMusician(x) & LargeAudiences(x)))", "all x.(InterestingAsIndividualPerformer(x) & UniqueMusicalVoiceOrStyle(x)) -> (TouringSoloistMusician(x) & AttractsLargeAudiences(x) | -TouringSoloistMusician(x) & -TouringSoleistMusician(x) & -AttractsLargeAudiences(x)))", "all x.((Interesting(x) & IndividualPerformer(x) & UniqueMusicalVoiceOrStyle(x)) -> (TouringSoloistMusician(x) & CanAttractLargeAudiences(x)) | -TouringSoloistMusician(x) & (-CanAttractLargeAudiences(x) | -CanAttractLargeAudiences(x))))", "all x.(InterestingAsIndividualPerformerAndUniqueMusicalVoiceOrStyle(x) -> (TouringSoloistMusician(x) & CapableOfAttractingLargeAudiences(x) | -TravelingSoloistMusicianCapableOfAttractingLargeAudiences(x)))", "all x.(InterestingInterestingIndividualPerformer(x) -> ((TouringSoloistMusician(x) & CapableOfLargeAudiences(x)) | -TouringSoloistMusician(x) & CapableOfLargeAudiences(x)))", "all x.((InterestingAsIndividualPerformer(x) & UniqueMusicalVoiceOrStyle(x)) -> (TouringSoloistMusician(x) & AttractsLargeAudiences(x)) | (-TouringSoloistMusician(x) & AttractsLargeAudiences(x))))", "all x.(InterestingOfIndividualPerformer(x) -> ((TouristSolistMusician(x) & AttractsLargeAudiences(x) | -TouristSolistMusician(x) & AttractsLargeAudiences(x))))", "all x.((InterestingIndividualPerformer(x) & UniqueMusicalVoiceOrStyle(x)) -> ((TouringSoloistMusician(x) & CapableOfAttractingLargeAudiences(x)) | (-TouringSoloistMusician(x) & CapableOfAttractingLargeAudiences(x)))))", "all x.((InterestingIndependentPerformer(x) & UniqueMusicalVoiceOrStyle(x)) -> (TourningSoloistMusician(x) & CapableOfAttractingLargeAudiences(x) | -TourningSoloistMusicianCapableOfAttractingLargeAudiences(x)))", "all x.((InterestingIndividualPerformer(x) & UniqueMusicalVoiceOrStyle(x)) -> (TouringSoloistMusician(x) & AttractsLargeAudiences(x) | (-TouringSoloistMusician(x) & AttractsLargeAudiences(x))))", "all x.((InterestingIndividualPerformer(x) & UniqueMusicalVoiceOrStyle(x)) -> (TouringSolistMusician(x) & AttractsLargeAudiences(x)) | (-TouringSolistMusician(x) & -AttractsLargeAudiences(x))))"]}
{"id": "folio_train_546", "nl": "Ryan is interesting as an individual performer.", "fol": "IsInterestingPerformer(Ryan)", "prediction": ["Ryan is interesting as an individualPerformer.", "(InterestingAsIndividualPerformer(Ryan)", "Ryan is interesting as an IndividualPerformer(Ryan)", "Ryan is interesting as an IndividualPerformer.", "all x.(InterestingPerformer(x) -> Ryan(x))", "Ryan is interesting as a performer.", "(InterestingAsIndividualPerformer(Ryan))", "all x.((Ryan(x) & IndividualPerformer(x)) -> Interesting(x))", "(InterestingPerformer(Ryan))", "all x.(InterestingRyan(x) -> IndividualPerformer(x))", "all x.((Ryan(x) & IndividualPerformer(x)) -> Interesting(x))", "all x.(InterestingCompetitioner(x) -> Ryan(x))", "(InterestingPerson(Ryan) & IndividualPerformer(Ryan))", "InterestedInPerson(Ryan)", "(InterestingOrIndividualPerformer(Rhyan)", "(InterestingAsIndividualPerformer(Ryan))"]}
{"id": "folio_train_547", "nl": "Ryan is either a permanent member of an orchestra or a touring soloist musician.", "fol": "(IsOrchestraMember(Ryan) | IsTouringMusician(Ryan))", "prediction": ["all x.(Ryan(x) -> (PermanentMember(x) & Orchestra(x)) | TouringSolisteMusician(x)))", "all x.(Ryan(x) -> (PermanentMember(x) | TouringSolistMusician(x)))", "all x.(Ryan(x) -> (PermanentMemberOfOrange(x) | TouringSoloistMusician(x)))", "all x.(Ryan(x) -> (PermanentMemberOfOrchestra(x) | TravelingSolistMusician(x)))", "all x.(Ryan(x) -> (PermanentMemberOfOrchestra(x) | TouringSoloist(x)))", "all x y.((Ryan(x) & Orchestra(y)) | TouringSoloistMusician(x)) -> PermanentMember(x,y))", "all x.((Ryan(x) & (PermanentMemberOfOrchestra(x) | TouringSolistMusician(x))) -> Musician(x))", "all x.(Ryan(x) -> (PermanentMember(x,orchestra) | TouringSoloistMusician(x,orchestra)))", "all x.((Ryan(x) & (PermanentMember(x) | TouringSoloistMusician(x))) -> Orchestra(x))", "all x.(Ryan(x) -> (PermanentMemberOfOrchestra(x) | TouringSolistMusician(x)))", "all x.(Ryan(x) -> (PermanentMemberOfOrchestra(x) | TouringSolidistMusician(x)))", "all x.(Ryan(x) -> (PermanentMember(x) & (Orchestra(x) | TouringSoloistMusician(x))))", "all x.(Ryan(x) -> (PermanentMemberOfOrchestra(x) | TouringSolistMusician(x)))", "all x.(Ryan(x) -> (PermanentMemberOfOrchestra(x) | TouringSolistMusician(x)))", "all x.(Ryan(x) -> (PermanentMemberOfOrchestra(x) | TouringSolistMusician(x)))", "all x.(Jane(x) -> (PermanentMemberOfOrchestra(x) | TouringSolistMusician(x)))"]}
{"id": "folio_train_548", "nl": "Ryan is either a permanent member of an orchestra or has a unique musical voice or style.", "fol": "(IsOrchestraMember(Ryan) | HasUniqueMusicalVoice(Ryan))", "prediction": ["all x.(Ryan(x) -> (PermanentMemberOfOrchestra(x) | UniqueMusicalVoiceOrStyle(x)))", "all x y.((Ryan(x) & Orchestra(y)) -> (PermanentMember(x,y) | UniqueMusicalVoiceOrStyle(x)))", "all x.(Ryan(x) -> (PermanentMemberOfOrchestra(x) | UniqueMusicalVoiceOrStyle(x)))", "all x y.((Ryan(x) & Orchestra(y)) -> (PermanentMember(x,y) | UniqueMusicalVoiceOrStyle(x)))", "all x y.((Ryan(x) & Orchestra(y)) -> (PermanentMember(x,y) | UniqueMusicalVoiceOrStyle(x)))", "all x y.((Ryan(x) & Orchestra(y)) -> (PermanentMember(x,y) | UniqueMusicalVoiceOrStyle(x)))", "all x y z.((Ryan(x) & Orchestra(y) & Symphony(z) & PermanentMember(x,y)) | UniqueVoice(x,z))", "all x.(Ryan(x) -> (PermanentMemberOfOrchestra(x) | UniqueVoiceOrStyle(x)))", "all x y.((Ryan(x) & (PermanentMemberOfOrchestra(x) | UniqueMusicalVoice(x) | UniqueStyle(x))) -> PeriodicalOrchestra(x))", "all x.(Ryan(x) -> (PermanentMemberOfOrchestra(x) | UniqueMusicalVoiceOrStyle(x)))", "all x.(Reynold(x) -> (PermanentMemberOfOrchestra(x) | UniqueMusicalVoiceOrStyle(x)))", "all x y.((Ryan(x) & Orchestra(y)) -> (PermanentMember(x,y) | UniqueMusicalVoiceOrStyle(x)))", "all x.((Ryan(x) & (PermanentMemberOfOrchestra(x) | UniqueMusicalVoice(x) | UniqueStyle(x))) -> MembersOfOrchestra(x))", "all x.(Ryan(x) -> (PermanentMemberOfOrchestra(x) | UniqueMusicalVoiceOrStyle(x)))", "all x.((Ryan(x) & (PermanentMemberOfOrchestra(x) | UniqueMusicalVoiceOrStyle(x))) -> Permanent(x))", "all x.(Ryan(x) -> (PermanentMemberOfOrchestra(x) | UniqueMusicalVoiceOrStyle(x)))"]}
{"id": "folio_train_549", "nl": "If someone yells, then they are not cool.", "fol": "all x.(Yell(x) -> -IsCool(x))", "prediction": ["all x.(Yells(x) -> -Cold(x))", "all x.((Yells(x) & Cool(x)) -> -Cord(x))", "all x.(Yells(x) -> -Cool(x))", "all x.(Yells(x) -> -COLD(x))", "all x.(Yells(x) -> -cool(x))", "all x.(Yells(x) -> -Kick(x))", "all x.(Yells(x) -> -Cool(x))", "all x.(Yells(x) -> -Cold(x))", "all x.((Yells(x) & Cool(x)) -> -Yells(x))", "all x.(Yells(x) -> -Cool(x))", "all x.((Yells(x) & -Cool(x)) -> Notcool(x))", "all x.(Yells(x) -> -Cool(x))", "all x.(Yells(x) -> -Cool(x))", "all x.(Yells(x) -> -Cloe(x))", "all x.(Yells(x) -> -Cool(x))", "all x.(Yells(x) -> -cool(x))"]}
{"id": "folio_train_550", "nl": "If someone is angry, then they yell.", "fol": "all x.(IsAngry(x) -> Yell(x))", "prediction": ["all x.((Angry(x) & Yell(x)) -> IsAnger(x))", "all x.((Angry(x) & Yell(x)) -> Rage(x))", "all x.((Angry(x) & Yell(x)) -> IfAngry(x))", "all x.((Irresponsible(x) & Yall(x)) -> Infuriated(x))", "all x.(Angry(x) -> Yell(x))", "all x.(Angry(x) -> Yoell(x))", "all x.((Angry(x) & Yell(x)) -> IsAnfaul(x))", "all x.((Angry(x)) -> Yell(x))", "all x.((Person(x) & Ragnant(x)) -> Yell(x))", "all x.((Angry(x)) -> Yall(x))", "all x.(Irresponsible(x) -> (Yells(x) | SaysWhat(x)))", "all x.(Angry(x) -> Yell(x))", "all x.(Angry(x) -> Yell(x))", "all x.(Angry(x) -> Yell(x))", "all x.((Person(x) & Anxious(x)) -> Yell(x))", "all x y.((Afraid(x) & Person(y)) -> Yeell(x))"]}
{"id": "folio_train_551", "nl": "If someone flies, then they are cool.", "fol": "all x.(CanFly(x) -> IsCool(x))", "prediction": ["all x.((Flyer(x) & Cool(x)) -> Cool(x))", "all x.(Flies(x) -> Cool(x))", "all x.(Flies(x) -> Cool(x))", "all x.((Flyer(x) & Cool(x)) -> GreatFlyer(x))", "all x.(Flies(x) -> Cool(x))", "all x.((Flies(x) & Cool(x)) -> WholeMore(x))", "all x.((Flies(x) & Cool(x)) -> Flies(x))", "all x.((Flyes(x) & Cool(x)) -> CoolEdge(x))", "all x.(Flies(x) -> Cool(x))", "all x.(Flies(x) -> Cool(x))", "all x.(Flies(x) -> Cool(x))", "all x.(Flies(x) -> Cool(x))", "all x.(Flies(x) -> Cool(x))", "all x.(Flies(x) -> Cool(x))", "all x.((Flies(x) & Cool(x)) -> Fun(x))", "all x.((Flies(x) & Cool(x)) -> Cool(x))"]}
{"id": "folio_train_552", "nl": "Every person that knows magic can fly.", "fol": "all x.(KnowsMagic(x) -> CanFly(x))", "prediction": ["all x.((Man(x) & KnowsMagic(x)) -> CanFly(x))", "all x.((CledgesMagic(x)) -> CanFly(x))", "all x.((Person(x) & KnowsMagic(x)) -> CanFly(x))", "all x.((Person(x) & KnowsMagic(x)) -> CanFly(x))", "all x.((Person(x) & KnowsMagic(x)) -> CanFly(x))", "all x.(KnowsMagic(x) -> CanFly(x))", "all x.((Person(x) & KnowsMagic(x)) -> CanFly(x))", "all x.(KnowsMagic(x) -> CanFly(x))", "all x.(KnowsMagic(x) -> CanFly(x))", "all x.((Person(x) & KnowsMagic(x)) -> CanFly(x))", "all x.((Person(x) & KnowsMagic(x)) -> CanFly(x))", "all x.(KnowsMagic(x) -> CanFly(x))", "all x.((Person(x) & KnowsMagic(x)) -> CanFly(x))", "all x.((Person(x) & KnowsMagic(x)) -> CanFly(x))", "all x.(knowsMagic(x) -> CanFly(x))", "all x.((Person(x) & KnowsMagic(x)) -> CanFly(x))"]}
{"id": "folio_train_553", "nl": "All wizards know magic.", "fol": "all x.(IsWizard(x) -> KnowsMagic(x))", "prediction": ["all x.(Wizard(x) -> KnowsMagic(x))", "all x.(Wizard(x) -> KnowsMagic(x))", "all x.(Magician(x) -> KnowsMagick(x))", "all x.(Wizard(x) -> KnowingMagic(x))", "all x.(Magic(x) -> KnowsMagic(x))", "all x.(Wizard(x) -> KnowsMagic(x))", "all x.(Witch(x) -> KnowsMagic(x))", "all x.(Wizard(x) -> KnowsMagic(x))", "all x.(Wizard(x) -> KnowsMagic(x))", "all x.(Wizard(x) -> KnowsMagic(x))", "all x.(Magic(x) -> KnowledgesMagic(x))", "all x.(Magic(x) -> KnowsMagic(x))", "all x.(Wizard(x) -> KnowsMagic(x))", "all x.(Magic(x) -> KnowsMagic(x))", "all x.(Magician(x) -> KnowsMagic(x))", "all x.(Magic(x) -> Knowledge(x))"]}
{"id": "folio_train_554", "nl": "Harry either yells and flies, or neither yells nor flies.", "fol": "((Yell(Harry) & CanFly(Harry) & -(-Yell(Harry) & -CanFly(Harry))) | (-(Yell(Harry) & CanFly(Harry)) & -Yell(Harry) & -CanFly(Harry)))", "prediction": ["all x.(Harry(x) -> ((Yells(x) & Flies(x)) | (-Yells(x) & Flies(x))))", "(all x.(Harry(x) -> (Yells(x) | Flies(x))))", "all x y.((Harry(x) & (Yells(x) | Flies(x))) -> (-Yells(x) & -Flies(x)))", "all x.(Harry(x) -> (Yells(x) & Flies(x)\" | -Yells(x) & Flies(x)))", "all x.(Harry(x) -> (Yells(x) & Flies(x)) | (-Yells(x) & Flies(x))))", "-(Harry(Harry) | (Harry(Harry) & (Yells(Harry) | Flies(Harry))))", "all x.(Harry(x) -> (Yells(x) & Flies(x)) | (-Yells(x) & Flies(x))))", "all x.(Harry(x) -> ((Yells(x) | -Yells(x)) | (-Yells(x) | Flies(x))))", "all x.(Harry(x) -> (Yells(x) | Flies(x)))", "all x.(Harry(x) -> (Yells(x) | Flies(x)))", "(all x.(Harris(x) -> (Yells(x) | Flies(x))))", "exists x.(Harry(x) & ((Yells(x) & Flies(x)) | (-Yells(x) & Flies(x))))", "either yells and flies (Harry) | -yells(Harry) & -flies(Harry)))", "is the default of all x.(Harry(x) -> (Yells(x) & Flies(x)) | (-Yells(x) & Flies(x))))", "exists x.(Harry(x) & ((Yells(x) & Flies(x)) | -Yells(x) & Flies(x))))", "(all x.(Harry(x) -> (Yells(x) | Flies(x))))"]}
{"id": "folio_train_555", "nl": "Potter is a wizard and flies.", "fol": "(IsWizard(Potter) & CanFly(Potter))", "prediction": ["all x.(Potter(x) -> (Magic(x) & Flies(x)))", "all x.(Potter(x) -> (Wizard(x) & Flies(x)))", "all x.(Potter(x) -> (Wizard(x) & Flies(x)))", "all x.(Potter(x) -> (Magic(x) & Flies(x)))", "all x.(Potter(x) -> (Magic(x) & Flies(x)))", "all x.(Potter(x) -> (Magician(x) & Flies(x)))", "all x.(Potter(x) -> (Magic(x) & Flies(x)))", "all x.(Potter(x) -> (Magic(x) & Flies(x)))", "((Potter(Potter) | Flies(Potter)))", "(AlwaysWing(Potter) & Flies(Potter))", "all x.(Potter(x) -> (Magic(x) & Flies(x)))", "all x.(Potter(x) -> (Magician(x) & Flies(x)))", "all x.(Potter(x) -> (Magic(x) & Flies(x)))", "(Wizard(Potter) & Flies(Potter))", "all x.(Potter(x) -> (Magid(x) & Flies(x)))", "all x.(Potter(x) -> (Magic(x) & Flies(x)))"]}
{"id": "folio_train_556", "nl": "Harry is cool.", "fol": "IsCool(Harry)", "prediction": ["has a lovely, cool ring.", "Harry (cool)", "Charles is cool!", "(Cool(Harry,Mutual) & Cool(Harry))", "all x.(Harry(x) -> Cool(x))", "Harry ist cool.", "OMG, Harry is cool.", "all x.(Harry(x) -> Cool(x))", "all x.(Harry(x) -> Cool(x))", "Harry is cool.", "(IsCool(Harry))", "Harry is cool.", "Harry is cool.", "Harry is cool.", "iscool(Harry)", "Harry ist cool!"]}
{"id": "folio_train_557", "nl": "Harry is not cool.", "fol": "-IsCool(Harry)", "prediction": ["(Climate(Harry) & -ReallyCump(Harry))", "-(Harris(Harry) & Cool(Harry))", "-Cozy(Harry)", "Harry & Cool(Harry)", "-(Hory(Harry) & Cool(Harry))", "Harry is not cool.", "Harrys cool(Harry)", "exists x.(Harry(x) & -Clean(x))", "all x.(Harry(x) -> -Cozy(x))", "Harry is notcool.", "Harry is notcool.", "(-cool(Harry))", "-Cool(Harry)", "Harry ist 14ck.", "(notcool(Harry,Italics))", "-Cold(Harry)"]}
{"id": "folio_train_558", "nl": "Harry is a wizard or angry.", "fol": "(IsWizard(Harry) | IsAngry(Harry))", "prediction": ["all x.(Harry(x) -> (Wizard(x) | Irresponsible(x)))", "all x.(Harry(x) -> (Magic(x) | Aging(x)))", "all x.(Harry(x) -> (Magician(x) | Agned(x)))", "exists x.(Harry(x) & Wizard(x) & (Angry(x) | Afraid(x)))", "(AsMirror(Harry) | HearsAngry(Harry))", "all x.(Harry(x) -> (Magician(x) | Aggressive(x)))", "all x.(Hoirank(x) -> (Magician(x) | Angerful(x)))", "all x.(Harry(x) -> (Magid(x) | Aggressive(x)))", "all x.(Harry(x) -> (Wizard(x) | Angerous(x)))", "(IsMagic(Harry) | IsAngry(Harry))", "(Wizard(Harry) | Aggressive(Harry))", "all x.(Harry(x) -> (Wizard(x) | Agreed(x)))", "exists x.(Harry(x) & (Magic(x) | Agreed(x)))", "Harry is(Harry,magician) | Rageful(Harry))", "all x.(Harry(x) -> (Wizard(x) | Angerous(x)))", "(Wizard(Harry) | Angerful(Harry))"]}
{"id": "folio_train_559", "nl": "Harry is neither a wizard nor angry.", "fol": "(-IsWizard(Harry) & -IsAngry(Harry))", "prediction": ["(-(HarryMagic(Harry) | Ragged(Harry)))", "Harry is no wizard nor angry.", "(-Magic(Harry) & -Angry(Harry))", "all x.(Harry(x) -> (NeeswichWizard(x) & -Angry(x)))", "all x.(Harry(x) -> (-Magician(x) | angry(x)))", "all x.(Harry(x) -> (-Magician(x) | Aggressive(x)))", "(-(Magic(Harry) | Anger(Harry)))", "all x.(Harry(x) -> (-Magic(x) & -Angry(x)))", "all x.(Harry(x) -> (-Magic(x) & -Angry(x)))", "(-Magician(Harry) & -Angry(Harry))", "all x.(Harry(x) -> (-Magid(x) | Agreed(x)))", "All x.(Harry(x) -> (-Wizard(x) | Anger(x)))", "all x.(Harry(x) -> (-Wizard(x) & -Aggressive(x)))", "Harry is notarial(Harry(Harry) & -Anger(Harry))", "(Harry(Harry) | Angerful(Harry))", "((Harry(Harry) & -Magician(Harry)) | -Angry(Harry)))"]}
{"id": "folio_train_560", "nl": "Products are either produced in China or the US. ", "fol": "all x.((ProducedInChina(x) & -ProducedInUS(x)) | (-ProducedInChina(x) & ProducedInUS(x)))", "prediction": ["all x.(Product(x) -> (ProducedIn(x,Chinese) | ProducedIn(x,US)))", "all x.(Product(x) -> ((ProducedInChina(x) | ProducedInUSA(x))))", "all x.(Product(x) -> (ProducedIn(x,Chinese) | ProducedIn(x,US)))", "all x.(Product(x) -> (ProducedIn(x,China) | ProducedIn(x,US)))", "all x.(Product(x) -> (ProducedInChina(x) | ProducedInU.S.A.(x))))", "all x.(Product(x) -> (ProducedIn(x,Chinese) | ProducedIn(x,USA)))", "all x.(Product(x) -> (ProducedIn(x,China) | ProducedIn(x,US)))", "all x y.((Product(x) & (Chinese(y) | US(y))) -> ProducedIn(x,y))", "all x.(Product(x) -> (ProducedIn(x,China) | ProducedIn(x,US)))", "all x.(Product(x) -> (ProducedIn(x,China) | ProducedIn(x,US)))", "all x.(Product(x) -> (ProducedIn(x,China) | ProducedIn(x,US)))", "all x.(Product(x) -> (ChineseProduct(x) | USProduct(x)))", "all x.(Product(x) -> (ProducedIn(x,China) | ProducedIn(x,US)))", "all x.(Product(x) -> (ProducedIn(x,Chinese) | ProducedIn(x,US)))", "all x.(Product(x) -> (ProducedIn(x,China) | ProducedIn(x,U.S.)))", "(Product(x) & (ProducedIn(y,China) | ProducedIn(y,US)))"]}
{"id": "folio_train_561", "nl": "All produced in China are labeled. ", "fol": "all x.(ProducedInChina(x) -> IsLabeled(x))", "prediction": ["all x.((ProducedInChina(x) & Labeled(x)) -> QualityConcentre(x))", "all x.((ProducedInChina(x) & Labeled(x)) -> QualityAssurance(x))", "all x.((ProducedInChina(x) & Licensed(x)) -> Labeled(x))", "all x.((ProducedInChina(x) & Labeled(x)) -> InProducts(x,y))", "all x.((ProducedInChina(x) & Labeled(x)) -> ProducedIn(x))", "all x.((ProducedInChina(x) & Labeled(x)) -> -ChineseMaterial(x))", "all x.((ProducedInChina(x) & Labeled(x)) -> MadeInChina(x))", "all x.((ProducedInChina(x) & Labeled(x)) -> Purchases(x,y))", "all x.((ProducedInChina(x) & Labeled(x)) -> ProductiveInChina(x))", "all x.(ProducedInChina(x) -> Labeled(x))", "all x.((ProducedInChina(x) & Labeled(x)) -> PurchasesInChina(x))", "all x.(ProducedInChina(x) -> Labeled(x))", "all x.(ProducedInChina(x) -> Labeled(x))", "all x.((ProducedInChina(x) & Labeled(x))", "all x.(ProducedInChina(x) -> Labeled(x))", "all x y.((ProducedInChina(x) & MadeInChina(y)) -> Labeled(x))"]}
{"id": "folio_train_562", "nl": "All produced in the US are sold in the US. ", "fol": "all x.(ProducedInUS(x) -> IsSoldInUS(x))", "prediction": ["all x.(ProducedIn(x,US) -> SaledIn(x,US))", "all x.(ProducedInUnitedStates(x) -> SoldInUnitedStates(x))", "all x.(ProducedInTheUS(x) -> SoldInTheUS(x))", "all x y.((ProducedIn(x,y) & United States(y)) -> SoldIn(x,y))", "all x.(ProducedIn(x,US) -> SelleredIn(x,US))", "all x.((ProducedIn(x,US) & HasSoldIn(x,US)) -> ProducedIn(x,US))", "all x.(ProducedInTheUnderwriters(x) -> SoldInUnderwriters(x))", "all x.(ProducedIn(x,y) -> SoldIn(x,z))", "all x.(ProducedIn(x,us) -> SoldIn(x,us))", "all x.(ProducedIn(x,US) -> SoldIn(x,US))", "all x.((ProducedInUS(x) & SoldInUS(x)) -> PurchasesInUS(x))", "all x.(ProducedIn(x,US) -> SoldIn(x,US))", "all x.(ProducedInU.S.S.(x) -> SoldInUS(x))", "all x.((ProducedInUS(x) & SoldInUS(x)) -> ComesWithInUS(x))", "all x.(ProducedIn(x,US) -> SalesIn(x,US))", "all x.((ProducedIn(x,US) & In(x,US)) -> SoldIn(x,US))"]}
{"id": "folio_train_563", "nl": "If labeled, then the product is cheaper. ", "fol": "all x.(IsLabeled(x) -> IsCheaper(x))", "prediction": ["all x.((Labeled(x) & Bought(x)) -> Product(x))", "all x.((Labeled(x) & Product(x)) -> Cheaper(x))", "all x.((Labeled(x) & Reduced(x)) -> Product(x))", "all x.((Product(x) & Labeled(x)) -> Cheaper(x))", "all x.((Labeled(x) & Bought(x)) -> Product(x))", "all x.((Labeled(x) & LowerPrices(x)) -> Product(x))", "all x.(Labeled(x) -> CheaperProduct(x))", "all x.((Labeled(x) & Products(x)) -> LowerLiquidity(x))", "all x.((Labeled(x) & Product(y)) -> Cheaper(y))", "all x.((Labeled(x) & Product(x)) -> Cheaper(x))", "all x.((Labeled(x) & ProductBudget(x)) -> LessFeeling(x))", "all x.((Labeled(x) & ProductLiquid(x)) -> Cheaper(x))", "all x.((Labeled(x) & Product(x)) -> Bought(x))", "all x.((Labeled(x) & ProductBudget(x)) -> LowerEthnicity(x))", "all x.((Labeled(x) & Product(x)) -> Cheaper(x))", "all x.((Labeled(x) & ProductBudget(x)) -> Cheaper(x))"]}
{"id": "folio_train_564", "nl": "All sold in the US are sold in Walmart. ", "fol": "all x.(IsSoldInUS(x) -> IsSoldInWalmart(x))", "prediction": ["all x.(SoldIn(x,U.S.A) -> SoldInWallmart(x,Wallmart))", "all x.(SoldInUS(x) -> SellsInWalmart(x))", "all x.((SoldInUse(x) & SoldInWalmart(x)) -> SoldInWalmart(x))", "all x.(SoldIn(x,y) -> SoldIn(y))", "all x.(SoldIn(x,US) -> SoldInWalmart(x))", "all x.(SoldInUS(x) -> SellsInWalmart(x))", "all x.(SoldInUS(x) -> WeSoldInWalmart(x))", "all x.(IsSoldInUS(x) -> SoldInWallmart(x))", "all x.(SoldIn(x,US) -> SellsInWalmart(x))", "all x y.((SoldIn(x,y) & US(y)) -> SoldInWallpaper(x,y))", "all x.(SoldInUSA(x) -> SoldInWalmart(x))", "all x.(SoldInUS(x) -> SoldInWallmart(x))", "all x.(SoldInUS(x) -> SoldInWelfare(x))", "all x.(SoldInUS(x) -> SoldInWallmart(x))", "all x.((SoldIn(x) & US(x)) -> SoldInWalmart(x))", "all x y.((SoldIn(x,y) & SellsIn(y)) -> SoldIn(x,y))"]}
{"id": "folio_train_565", "nl": "All displayed on the homepage are sold in Walmart. ", "fol": "all x.(IsDisplayedInHomepage(x) -> IsSoldInWalmart(x))", "prediction": ["all x.((Display(x) & SellsInWalmart(x)) -> Walmart(x))", "all x.((DisplayedOnHomepage(x) & SoldInWalmart(x)) -> SellsInWalmart(x))", "all x.(DisplayedOnHomepage(x) -> SoldInWalmart(x))", "all x.(Homepage(x) -> SoldInWallmart(x))", "all x.(DisplayedOnHomepage(x) -> SoldInWalmart(x))", "all x.(Display(x,y) -> SellsInWalmart(x,y))", "all x.(PopularHomepage(x) -> SoldInWalmart(x))", "all x.(Display(x) -> SoldInWalmart(x))", "all x.((DisplayedOnHomepage(x) & SoldInWalmart(x)) -> SellsInWalmart(x))", "all x.(DisplayInHomepage(x) -> SoldInWalmart(x))", "all x.(Display(x) -> SoldInWalmart(x))", "all x.((Display(x) & Walmart(x)) -> SoldIn(x))", "all x.((DisplayedOnHomepage(x) & SoldInWalmart(x)) -> DisplayedOnHomepage(x))", "all x.(DisplayedOfHomepage(x) -> SoldInWalmart(x))", "all x.(DisplayedOnHomepage(x) -> SoldInWalmart(x))", "all x.(Display(x,) -> SoldInWalmart(x))"]}
{"id": "folio_train_566", "nl": "No products returned by customers are sold in Walmart. ", "fol": "all x.(IsReturnedByCustomer(x) -> -IsSoldInWalmart(x))", "prediction": ["-exists x.((Product(x) & Returned(x) & Customers(x)) -> SoldInWalmart(x))", "all x.((Product(x) & RetailedByCustomers(x)) -> -SoldInWallmart(x))", "all x.((Product(x) & CustomerReturned(x)) -> SalesInWalmart(x))", "all x.((Product(x) & CustomerReturned(x)) -> SoldInWalmart(x))", "all x.((Product(x) & ReturnedByCustomers(x)) -> SoldInWalmart(x))", "all x y.((product(x) & Customer(y) & Returned(x,y)) -> SelldInWallmart(x))", "all x.((ReturnedByCustomers(x) & Walmart(x)) -> NoProductsSoldIn(x,y))", "all x y.((Product(x) & Customer(y) & SoldInWall of Walmart(x,y)) -> NoProduct(x,y))", "all x y.((Product(x) & CustomerChapter(y) & -SoldInWalmart(x,y)) -> -Returned(x,y))", "all x.((Product(x) & ReturnedByCustomers(x)) -> -SoldInWalmart(x))", "all x y.((Product(x) & Customer(y) & ReturnedBy(x,y)) -> SellableInWallmart(x))", "all x.((Product(x) & Returns(x)) -> -SoldInWalmart(x))", "all x y.((Product(x) & Customer(y) & WasReturned(y)) -> SoldInWallmart(x,y))", "all x.(Wallmart(x) -> -(Product(x) & ReturnedByCustomers(x)))", "all x y.((Product(x) & Customer(y) & Returns(x,y)) -> SellsInWallmart(x,y))", "all x y.((Product(x) & ReturnedByCustomers(x) & Walmart(y)) -> -SoldIn(x,y))"]}
{"id": "folio_train_567", "nl": "G-910 is either displayed on the homepage or cheaper.", "fol": "-((IsDisplayedInHomepage(G910) & -IsCheaper(G910)) | (-IsDisplayedInHomepage(G910) & IsCheaper(G910)))", "prediction": ["all x.(G-910(x) -> (Displayed(x) | Cheaper(x)))", "all x.(G910(x) -> (DisplayedOnHomepage(x) | LowerCost(x)))", "all x.(G-910) -> (DisplayedOnHomepage(x) | Cheaper(x)))", "all x.(G-910(x) -> (DisplayedOnHomepage(x) | Cheaper(x)))", "all x.(G-910) -> (DisplayedOnHomepage(x) | Cheaper(x)))", "all x.(G-910(x) -> (DisplayedOnHomepage(x) | CheaperLosserLocalLocalLocalLocalLocalLocalLocalLocalLocalLocalLocalLocalLocalLocalLocalLocalLocalLocalLocalLocalLocalLocalLocalLocalLocalLocalLocalLocalLocalLocal(x)))", "all x.(G-910(x) -> (DisplayedOnHomepage(x) | Cheaper(x)))", "(DisplayedOnHomepage(G-910) | BoughtLonger(G-910)))", "all x.(G-910(x) -> (DisplayedOnHomepage(x) | LowerBudget(x)))", "all x.(G-910(x) -> (DisplayedOnHomepage(x) | Cheaper(x)))", "all x.(G-910) -> (DisplayedOnHomepage(x) | LowerBudget(x)))", "all x.(G910(x) -> (DisplayedOnHomepage(x) | Cheaper(x)))", "all x.(G-910(x) -> (DisplayedOnHomepage(x) | Cheaper(x)))", "all x.(G-910(x) -> (Displayed(x) | LowerBuy(x)))", "all x.(G-910(x) -> (DisplayedOnHomepage(x) | Cheaper(x)))", "all x.((G-910) & (DisplayOnHomepage(x) | Cheaper(x))) -> DisplaysOnHomepage(x))"]}
{"id": "folio_train_568", "nl": "G-910 is displayed on the homepage.", "fol": "IsDisplayedInHomepage(G910)", "prediction": ["all x.(G-910(x) -> DisplayedOnHomepage(x))", "G-910 DisplayedOnHomepage.", "all x.(G910(x) -> ViewedOnHomepage(x))", "all x.(G-910(x) -> DisplayedOnHomepage(x))", "All x.(G-910(x) -> DisplayedOnHomepage(x))", "all x.(G-910(x) -> DisplayedOnHomepage(x))", "(Display(Rg-910) | DisplayedOnHomepage(G-910)))", "all x.(G-910(x) -> DisplayedOnHomepage(x))", "all x.(G910(x) -> DisplayedOnHomepage(x))", "all x.((G-910(x) -> DisplayedOnHomepage(x))", "(Display(G-910) & LocatedAtHomepage(G-910))", "all x.((G-910(x) & DisplaysOnHomepage(x)) -> Displayed(x))", "(DisplayedOnHomepage(g910) -> Display(g910)) & Visitor(g) & GetsBug(i))", "all x.(G-910(x) -> DisplayedOnHomepage(x))", "all x.(G-910(x) -> DisplayedOnHomepage(x))", "All x.(G-910(x) -> DisplayedOnHomepage(x))"]}
{"id": "folio_train_569", "nl": "G-910 is not displayed on the homepage.", "fol": "-IsDisplayedInHomepage(G910)", "prediction": ["(-Display(G-910))", "(-DisplayedOnHomepage(G-910))", "(-DisplayedOnHomepage(G-910))", "(-DisplayEvents(G-910))", "(-DisplayedOnHomepage(G-910))", "the flag(G-910) -DisplayedOnHomepage(G-910))", "((G-910(G)) -> -DisplayedOnHomepage(G)))", "-DisplayedOnHomepage(G-910)", "all x.(G-910) -> -Display(x))", "-DisplayedOnHomepage(G-910)", "-(DisplayG-910(G))", "exists x.(G-910(x) & -DisplayedOnHomepage(x))", "-(Display(G-910))", "Das DisplayingBoxen(G-910)", "G-910 is notDisplayedOnHomepage(G-10)", "-DisplayedOnHomepage(G-910)"]}
{"id": "folio_train_570", "nl": "G-910 is a product returned by customers.", "fol": "IsReturnedByCustomer(G910)", "prediction": ["all x.((G-910(x) & ReturnedByCustomers(x)) -> Product(x))", "all x.(G-910(x) -> CustomerReturned(x))", "all x.((Product(x) & ReturnedByCustomers(x)) -> G-910(x))", "all x.(G-910(x) -> ProductReturnedByCustomers(x))", "all x.((Product(x) & Customer(x,G)) -> Returned(x,G))", "all x.(G-910(x) -> ProductRisk(x))", "all x.(G-910(x) -> RenewedByCustomers(x))", "all x.(G-910(x) -> ProductReturned(x,y))", "all x.(G-910(x) -> ProductReturned(x))", "all x.(G-910(x) -> ProductReturnedByCustomers(x))", "All x.(G-910(x) -> ProductReturnedByCustomers(x))", "all x.((G-910(x) & ReturnedByCustomers(x)) -> Product(x))", "all x.(G-910(x) -> ProductReturnedByCustomers(x))", "Item(g-910) & CustomersReturned(g))", "all x.(CustomerReturned(x) -> Product(x,G-1010))", "all x.(G-910(x) -> ProductReturnedByCustomers(x))"]}
{"id": "folio_train_571", "nl": "G-910 is a product returned by customers or sold in Walmart.", "fol": "(IsReturnedByCustomer(G910) | IsSoldInWalmart(G910))", "prediction": ["all x.((ReturnedByCustomers(x) | SoldInWalmart(x)) -> G-910(x))", "all x.((Product(x) & (ReturnedByCustomers(x) | SoldInWalmart(x))) -> G-910.", "all x.(G-910(x) -> (ReturnedByCustomers(x) | SoldInWallpaper(x)))", "all x.(G-910(x) -> (ReturnedByCustomers(x) | SoldInWallmart(x)))", "all x.((G-910(x) & (ReturnedByCustomers(x) | SoldInWallmart(x))) -> Product(x))", "all x.(G-910(x) -> (ReturnedByCustomers(x) | SoldInWalmart(x)))", "all x.((Product(x) & (ReturnedByCustomers(x) | SoldInWalmart(x))) -> G-910.", "all x y.((G-910(x) & Products(y)) -> (ReturnedByCustomers(x) | SoldInWalmart(x)))", "all x y z.((G-910(x) & Customer(y) & Walmart(z)) -> (ReturnedBy(x,y) | SoldIn(x,z)))", "all x.((Product(x) & (RentedByCustomers(x) | SoldInWallmart(x))) -> Product(x,y))", "all x.(G-910(x) -> (ReturnedByCustomers(x) | SoldInWalmart(x)))", "all x.(G-910(x) -> (ReturnedByCustomers(x) | SoldInWallmart(x)))", "((Product(g) & ReturnedBy(g) & -SoldIn(g)) & Walmart(y))", "all x.((Product(x) & (ReturnedByCustomers(x) | SoldInWallmart(x))) -> G-910.", "all x.(G-910(x) -> (ReturnedByCustomers(x) | SoldInWalmart(x)))", "all x.((Product(x) & CustomerReturned(x)) | SoldInWallmart(x)) -> G-910."]}
{"id": "folio_train_572", "nl": "G-910 is either returned by customers or sold in Walmart.", "fol": "(IsReturnedByCustomer(G910) | IsSoldInWalmart(G910))", "prediction": ["all x.(G-910(x) -> (ReturnedByCustomers(x) | SoldInWalmart(x)))", "all x.(G-910) -> (ReturnedByCustomers(x) | SoldInWallmart(x)))", "all x.(G-910(x) -> (ReturnedByCustomers(x) | SoldInWallmart(x)))", "all x.(G-910) -> (ReturnedByCustomers(x) | SoldInWalmart(x)))", "all x.(G-910(x) -> (ReturnedByCustomers(x) | SoldInWalmart(x)))", "all x.(G-910(x) -> (ReturnedByCustomers(x) | SoldInWalmart(x)))", "all x.(G-910(x) -> (ReturnedByCustomers(x) | SoldInWalmart(x)))", "all x.(G-910(x) -> (ReturnedByCustomers(x) | SoldInWelfare(x)))", "all x.(G-910(x) -> (ReturnedByCustomers(x) | SoldInWelfare(x)))", "all x.(G-910(x) -> (ReturnedClient(x) | SoldInWallmart(x)))", "all x.(G-910(x) -> ((ReturnedByCustomers(x) | SoldInWalmart(x))))", "all x.((G-910) & ReturnedByCustomers(x)) | SoldInWallmart(x))", "all x y.((G-910(x) & Customer(y)) -> (ReturnedBy(y,x) | SoldIn(y,x)))", "all x.(G-910(x) -> (ReturnedByCustomers(x) | SoldInWalmart(x)))", "all x.(G-910(x) -> (ReturnedByCustomers(x) | SoldInWallmart(x)))", "all x.(G-910) -> (ReturnedByCustomers(x) | SoldInWallmart(x)))"]}
{"id": "folio_train_573", "nl": "People either order a lot of Amazon packages or are environmentally conscious.", "fol": "all x.((OrdersAmazonPackages(x) & -IsEnvironmentallyConscious(x)) | (-OrdersAmazonPackages(x) & IsEnvironmentallyConscious(x)))", "prediction": ["all x.(Person(x) -> (OrdersBonus(x,AmazonPackages) | EnvironmentallyConscious(x)))", "all x.((People(x) & (Orders(x,Amazon) | EnvironmentallyConscious(x))) -> Amazon(x))", "all x.((People(x) & (OrdersLotsOfAmazonPackages(x) | EnvironmentallyConscious(x))) -> AmazonPackages(x))", "all x.((Person(x) & (OrdersLittleAmazonPackages(x) | EnvironmentallyConscious(x))) -> Orders(x,AndOrganic(x))", "all x.((People(x) & (Orders(x,LotOfAmazonPackages) | EnvironmentallyConscious(x))) -> PurchasesPlastic(x))", "all x.((Person(x) & OrdersLotsOfAmazonPackages(x)) | EnvironmentallyConscious(x))", "all x.(Person(x) -> (OrdersLotOfAmazonPackages(x) | EnvironmentallyConscientious(x)))", "all x.((Person(x) & (OrdersLot(x) OfAmazonPackages(x) | EnvironmentallyConscious(x))) -> PurchasesPackages(x))", "all x.(Person(x) -> (OrdersLots(x) | EnvironmentallyConscientious(x)))", "all x.((Person(x) & OrdersAmazonPackages(x)) | EnvironmentallyConscious(x))", "all x.((Person(x) & (OrdersTen(x,Amazon) | EnvironmentallyConscious(x))) -> AmazonPackages(x))", "exists x.(Planner(x) & (OrdersAmazonPackages(x) | EnvironmentallyConscious(x)))", "all x.((Person(x) & OrdersAmazonPackages(x)) | EnvironmentallyConscious(x))", "all x.((Person(x) & OrdersLotsOfAmazonPackages(x)) | EnvironmentallyConscious(x))", "all x.((Person(x) & (OrdersLotsOfAmazonPackages(x) | EnvironmentallyConscious(x))) -> Orders[x))", "all x.(Person(x) -> (OrdersLotsOfAmazonPackages(x) | EnvironmentallyConscious(x)))"]}
{"id": "folio_train_574", "nl": "If people order a lot of Amazon packages, then they get a lot of daily mail delivered.", "fol": "all x.(OrdersAmazonPackages(x) -> ReceivesDailyMail(x))", "prediction": ["all x.((OrdersLotsOfAmazonPackages(x) & LotsOfDailyMail(x)) -> GetsDailyMail(x))", "all x.((Customer(x) & OrdersLotsOfAmazonPackages(x)) -> GetsLotsOfDailyMail(x))", "all x.((Person(x) & OrdersAmazonPackages(x)) -> GetsDaylyMail(x))", "all x.(OwnsLotsOfAmazonPackages(x) -> GetsLotsOfDailyMail(x))", "all x.((Person(x) & OrdersAmazonPackages(x)) -> GetsDailyMail(x))", "all x.(Order(x,AmazonPackages) -> GetsDailyMail(x))", "all x.((PeopleOrderAmazonPackages(x) & MoreTheMatch(x)) -> MoreDailyMail(x))", "all x.((ManyAmazonPackages(x) & Solves(x)) -> GetsDailyMail(x))", "all x y.((Person(x) & AmazonPackage(y) & Orders(x,y)) -> GotDaylyMail(x))", "all x.(OrdersLotsOfAmazonPackages(x) -> GetsLotsOfDailyMail(x))", "all x.((Person(x) & OrdersLotsOfAmazonPackages(x) & DailyMail(x)) -> ReallyLittleMail(x))", "all x.((Person(x) & OrdersAmazonPackages(x)) -> GetsDailyMail(x))", "all x.(OrdersLotsOfAmazonPackages(x) -> HasLotsOfDailyMail(x))", "all x.((Person(x) & OrdersLotsOfAmazonPackages(x)) -> GetsLotsOfDailyMail(x))", "all x.(OrdersMillionsOfAmazonPackages(x) -> LotsOfDailyMailDelivered(x))", "all x y.((Person(x) & AmazonPackage(y) & OrdersLots(x,y)) -> GetsLotsOfDaylyMail(x))"]}
{"id": "folio_train_575", "nl": "If people are environmentally conscious, then they have solar panels in their homes.", "fol": "all x.(IsEnvironmentallyConscious(x) -> HasSolarPanels(x))", "prediction": ["all x y.((EnvironmentallyConscious(x) & Person(y)) -> exists z.(SolarPanel(z) & InHome(z))))", "all x.(EnvironmentallyConscious(x) -> SolarPanels(x))", "all x.(EnvironmentallyConscious(x) -> ThereAreSolarPanelsInHome(x))", "all x.((EnvironmentallyConscious(x)) -> HasSolarPanelsInHomes(x))", "all x.(EnvironmentallyConscious(x) -> HasSolarPanelsInHaus(x))", "all x.(EnvironmentallyConcious(x) -> InHouseholdSolarPanels(x))", "all x.(EnvironmentallyConscious(x) -> SolarPanels(x))", "all x.((People(x) & EnvironmentallyConscious(x)) -> HasSolarPanels(x))", "all x.(EnvironmentallyConscious(x) -> ThereSolarPanelsInHome(x))", "all x.(EnvironmentallyConscious(x) -> HasSolarPanels(x))", "all x.((People(x) & EnvironmentallyConscious(x)) -> HasSolarPanels(x))", "all x.(EnvironmentallyConscious(x) -> SolarPanels(x))", "all x.(EnvironmentallyConscious(x) -> HasSolarPanelsInHome(x))", "all x.(EnvironmentallyConscious(x) -> HasSolarPanels(x))", "all x.(EcologicallyConscious(x) -> SolarPanels(x))", "all x.(EnvironmentallyConscious(x) -> SolarPanels(x))"]}
{"id": "folio_train_576", "nl": "If people get a lot of daily mail delivered, then they are very involved with their neighborhood.", "fol": "all x.(ReceivesDailyMail(x) -> InvolvedWithNeighborhood(x))", "prediction": ["all x y.((Hope(x) & DailyMail(y) & Delivered(x,y)) -> VeryInvolvedWithNeighborhood(x))", "all x.((Person(x) & WellDeliveredDailyMail(x)) -> VeryInvolvedWithNeighborhood(x))", "all x.((Person(x) & LotOfDailyMail(x)) -> VeryInvolvedWithNeighborhood(x))", "all x.((Person(x) & GetsDailyMail(x) & VeryInvolvedWithNeighborhood(x)) -> VeryInvolved(x))", "all x.((Person(x) & GettingDailyMailDedicated(x)) -> VeryInvolvedWithNeighborhood(x))", "all x.((Person(x) & LotsOfDailyMail(x)) -> VeryInterestingWithNeighborhood(x))", "all x.((Person(x) & LotsOfDailyMail(x)) -> VeryInvolvedWithNeighborhood(x))", "all x.((People(x) & GettingLittleDailyMail(x)) -> VeryInvolvedWithNeighborhood(x))", "all x.((ProvidesDailyMail(x) & VeryInvolvedWithNeighborhood(x)) -> LotsOfDailyMailDerived(x))", "all x.((People(x) & LotsOfDailyMail(x)) -> VeryInterestingWithNeighborhood(x))", "all x.((Person(x) & ManyDaylyMailDelivered(x)) -> VeryInvolvedWithNeighborhood(x))", "all x.((Person(x) & ReceivesLargeDaylyMail(x)) -> VeryInvolvedWithNeighborhood(x))", "all x.((Person(x) & GetsLotOfDailyMail(x)) -> VeryInvolvedWithNeighborhood(x))", "all x.((Man(x) & DailyMail(x) & Delivery(x)) -> VeryInvolvedWithNeighborhood(x))", "all x.((Person(x) & DailyMailDistributed(x)) -> VeryInterestingWithNeighborhood(x))", "all x.((Client(x) & LotsOfDailyMail(x)) -> VeryInvolvedInNeighborhood(x))"]}
{"id": "folio_train_577", "nl": "If people have solar panels in their homes, then they save a lot of money.", "fol": "all x.(HasSolarPanels(x) -> SavesMoney(x))", "prediction": ["all x.((People(x) & HasSolarPanelsInHasHome(x)) -> SavesLotOfMoney(x))", "all x.((Person(x) & SolarPanelsInHomes(x)) -> SavesMore(x))", "all x.((Personal(x) & HasSolarPanelsInHome(x)) -> SavesMore(x))", "all x y.((Person(x) & SolarPanelsInHome(y)) -> SavesMore(x,y))", "all x.((Person(x) & HasSolarPanelsInHome(x)) -> SavesMoreThanMore(x))", "all x.((Person(x) & SolarPanelsInHome(x)) -> SavesLittleMoney(x))", "all x.(PeopleInHomes(x) -> SolarPanelsInHome(x))", "all x.((People(x) & HasSolarPanelsInHome(x)) -> SavesLittleOfMoney(x))", "all x.(SolarPanelsInHomes(x) -> SavesMillions(x))", "all x.((Person(x) & HasSolarPanelsInHeales(x)) -> YouSaveMore(x))", "all x.(SolarPanelsInHome(x) -> SavesMoreTime(x))", "all x y.((Person(x) & SolarPanels(y)) -> SavesMoreMoney(x,y))", "all x.((Person(x) & SolarPanelsInHome(x)) -> SavesMoney(x))", "all x.((People(x) & HasSolarPanelsInHome(x)) -> SavesMore(x))", "all x.((Person(x) & HasSolarPanelsInHome(x)) -> SavesBigMoney(x))", "all x.((Person(x) & SolarPanelsInHome(x)) -> SavingsMoney(x))"]}
{"id": "folio_train_578", "nl": "If Marcy either gets a lot of mail and is very involved with her neighborhood or if she does not order a lot of Amazon packages nor is very involved with her neighborhood, then Marcy does not both get a lot of daily mail and order a lot of Amazon packages. ", "fol": "(-((ReceivesDailyMail(Marcy) & -InvolvedWithNeighborhood(Marcy)) | (-ReceivesDailyMail(Marcy) & InvolvedWithNeighborhood(Marcy))) -> (-ReceivesDailyMail(Marcy) | -OrdersAmazonPackages(Marcy)))", "prediction": ["all x.((Marcy(x) & ((OfMillionsOfMail(x) & VeryInvolvedWithNeighborhood(x)) | -OfMillionsOfAmazonPackages(x))) -> -(OfMillionsOfDaylyMail(x) & OrdersMillionsOfAmazonPackages(x))))", "all x y z.((Marcy(x) & DailyMail(y) & AmazonPackages(z)) -> ((GetsLotOfMail(x) & VERYInvolvedWithNeighborhood(x) | -OrdersAmazonPackages(y) & -InvolvedWithNeighborhood(y))))", "((Marcy(Marcy,Marcy)) & ((SimilarToMeet(Marcy) & INvolvedWithNeighborhood(Marcy)) | (-SimilarToAmazonPackages(Marcy,AmazonPackages) | InvolvedWithNeighborhood(Marcy)))))", "all x y.((Marcy(x) & GetsLossOfMail(x) & VeryInvolved(x)) | (-OrdersLotOfAmazonPackages(x) & VeryInvolved(x))))", "((Marcy(Marcy) & -TasksLotOfMail(Marcy) & VeryInterest(Marcy)) | (-TasksLotOfAmazonPackages(Marcy) & -InvolvedWithNeighborhood(Marcy))))", "all x.((Marcy(x) & (LotOfMail(x) & VeryInvolvedWithNeighborhood(x) | -(LotOfAmazonPaths(x) & VeryInvolvedWithNeighborhood(x)))) -> (-LotOfDailyMail(x) & -(LotOfAmazonPackages(x) & -AmazonPackages(x)))))", "all x.((Marcy(x) & (GetsLotOfMail(x) & InvolvedWithNeighborhood(x) | -OrdersLOTOfAmazonPackages(x)) & -(GetsLotOfDailyMail(x) & OrdersLOTOfAmazonPackages(x))))", "all x.((Marcy(x) & (GetsLotOfMail(x) | VeryInvolvedWithNeighborhood(x))) | (-KnowsLotOfDailyMail(x) | VeryInvolvedWithNeighborhood(x))))", "all x.((Marcy(x) & (LotsOfMail(x) & VeryInvolvedWithNeighborhood(x)) | -LotsOfAmazonPackages(x))) -> (-LotsOfDailyMail(x) & AmazonPackagesOrder(x)))", "all x y.((Marcy(x) & LotOfMail(x) & VeryInvolvedWithNeighborhood(x)) | (-SorryAmazonPackages(y) & SoInvolvedWithNeighborhood(y))))", "all x y.((Marcy(x) & Marcy(y)) -> ((GetsLotOfMail(x) & VeryInvolvedWithNeighborhood(x) | -OrdersLotOfAmazonPackages(y))))", "all x.((Marcy(x) & (LotsOfMail(x) | VeryInvolvedWithNeighborhood(x))) | (-LotsOfDaylyMail(x) & VeryInvolvedWithNeighborhood(x))))", "all x y.((Marcy(x) & (((GetsLotOfMail\" & VeryInvolvedWithNeighborhood(x)) | (-OrdersLotOfAmazonPackages(x) & VeryInvolvedWithNeighborhood(x))))) -> (-(EatsLotOfDailyMail(y) & OrdersLotOfAmazonPackages(y))))", "all x.((Marcy(x) & (GetsLittle(x) & VeryInvolvedWithNeighborhood(x) | -(OrdersLittle(x) & VeryInvolvedWithNeighborhood(x)))) -> -(GetsLittle(x) & OrdersLittleAmazonPackages(x) & OrdersLittleAmazonPackages(x))))", "all x.((Marxy(x) & (LossOfMail(x) & VeryInvolvedWithNeighborhood(x) | -LossOfAmazonPackages(x))) -> -(LossOfDailyMail(x) & -LossOfAmazonPackages(x))))", "all x.((Marcy(x) & (LtdDomain(x) | VeryInvolvedWithNeighborhood(x))) | (-LtdDomain(x) & VeryInvolvedWithNeighborhood(x))))"]}
{"id": "folio_train_579", "nl": "Marcy either orders a lot of Amazon packages or saves a lot of money.", "fol": "(OrdersAmazonPackages(Marcy) | SavesMoney(Marcy))", "prediction": ["can order(Marcy,x) | Saves(Marcy,x))", "all x.(Marcy(x) -> (OrdersLotsOfAmazonPackages(x) | SavesLotsOfMoney(x)))", "all x.(Marcy(x) -> (OrdersLotsDelivery(x) | SavesLotsDelivery(x)))", "(OrdersLittleAmazonPackages(Marcy,Y) | SavesLittleMoney(Marcy,Y)))", "Marcy (and (Orders(Marcy) | Saves(Marcy)))", "all x.(Marcy(x) -> (Orders(x,AmazonPathages) | Saves(x,AmazonPaths)))", "(Orders(Marcy,AmazonPackages) | Saves(Marcy,AmazonPackages)))", "all x.(Marcy(x) -> (Orders(x,AmazonPackages) | Saves(x,AmazonPackages)))", "all x.(Marcy(x) -> (OrdersAndSaves(x,AmazonPackage(x) | SavesAnd(x,Amazon(x)))", "all x.(Marcy(x) -> (Order(x,Amazon) | Save(x,Amazon)))", "all x.(Marcy(x) -> (OrdersMoreAmazonPackages(x) | SavesMorning(x)))", "all x y.((Marcy(x) & AmazonProgram(y)) -> (Orders(x,y) | Saves(x,y)))", "((Marcy) & (Orders(Marcy,) | Saves(Marcy,))))", "(OrdersMomentOfAmazonPasts(Marcy) | SavesMomentOfMoney(Marcy))", "all x.(Marcy(x) -> (OrdersLotsOfAmazonPackages(x) | SavesLotsOfMoney(x)))", "all x y.((Marcy(x) & AmazonPackage(y)) -> (Orders(x,y) | Saves(x,y)))"]}
{"id": "folio_train_580", "nl": "If Marcy is not a person who orders a lot of Amazon packages and is very environmentally conscious, then Taylor is not someone who saves a lot of money and is environmentally conscious.", "fol": "((-OrdersAmazonPackages(Marcy) & IsEnvironmentallyConscious(Marcy)) -> (-SavesMoney(Taylor) | -IsEnvironmentallyConscious(Taylor)))", "prediction": ["all x.((Marcy(x) & -OrdersManyAmazonPackages(x) & EnvironmentallyConscious(x)) -> (-SaversMillionsOfMoney(x) & EnvironmentallyConscious(x)))", "all x.((Person(x) & -OrdersLotsThanAmazonPackages(x) & EnvironmentallyConscious(x)) -> (-SaversSavingsMoney(x) & EnvironmentallyConscious(x)))", "all x.((Marcy(x) & -(OrdersLotsOfAmazonPackages(x) & EnvironmentallyConscious(x)) & Taylor(x)) -> -SAvesLotsOfMoney(x) & EnvironmentallyConscious(x)))", "all x.((Person(x) & -OrdersManyAmazonPackages(x) & EnvironmentallyConscious(x)) -> -SavesDistantMoney(x) & EnvironmentallyConscious(x))", "all x y.((Person(x) & Marcy(y) & -OrbitsAmazonPackages(x,y) & EnvironmentallyConscious(y)) -> (-SaversBonus(x,y) & EnvironmentallyConscious(x)))", "all x.((Marcy(x) & -OrdersAmazonPackages(x) & VeryEnvironmentallyConscious(x)) -> Taylor(x))", "all x.((Marxy(x) & -OrdersAmazonPackages(x) & VeryEnvironmentallyConscious(x)) -> -(SavesA lotOfMoney(x) & EnvironmentallyConscious(x)))", "all x y.((Marcy(x) & Taylor(y)) -> (-OrdersManyAmazonPackages(x,y) & EnvironmentallyConscious(x) & -SaversManyMoney(y) & EnvironmentallyConscious(y)))", "all x.((Person(x) & -OrdersManyAmazonPackages(x) & EnvironmentallyConscious(x)) -> -SavingsMoreAndEnvironmentalConscious(x))", "all x.((Marcy(x) & -OrdersManyAmazonPackages(x) & EnvironmentallyConscious(x)) -> -SaversMoneyAndEnvironmentallyConscious(x))", "all x.((Person(x) & -OrdersManyAmazonPackages(x) & EnvironmentallyConscious(x)) -> -(SaversMoney(x) & EnvironmentallyConscious(x)))", "all x y.((Person(x) & Marley(y) & -(OrdersSeasuringAmazonPackages(x,y) & VeryEnvironmentallyConscientious(x)) & Taylor(x)) -> -(SavingsThousandsOfMoney(x) & EnvironmentallyConscious(x)))", "all x.((Person(x) & -(OrdersLotsOfAmazonPackages(x) & EnvironmentallyConscious(x)) & -(SavesLotsOfMoney(x) & EnvironmentallyConscious(x))) -> Taylor(x))", "all x.((Person(x) & -OrdersLotsOfAmazonPackages(x) & EnvironmentallyConscious(x)) -> (-Savers(x) & EnvironmentallyConscious(x)))", "all x.((Person(x) & -OrdersLotsOfAmazonPackages(x) & EnvironmentallyConscious(x)) -> -SavesLotsOfMoney(x) & EnvironmentallyConscious(x))", "all x.((Marcy(x) & -(OrdersLotsOfAmazonPackages(x) & EnvironmentallyConscious(x)) & Taylor(x)) -> -(SavesLotsOfMoney(x) & EnvironmentallyConscious(x)))"]}
{"id": "folio_train_581", "nl": "Indonesia is a country.", "fol": "IsCountry(Indonesia)", "prediction": ["all x.(India(x) -> Country(x))", "all x.(Indonesia(x) -> Country(x))", "all x.(Indonesia(x) -> Country(x))", "all x.(Indonesia(x) -> Country(x))", "all x.(Indonesian(x) -> Country(x))", "all x.(Indonesia(x) -> Country(x))", "all x.((Indonesia(x) & Country(x)) -> LocatedAt(x,y))", "all x.(Indonesia(x) -> Country(x))", "all x.(Indonesia(x) -> Country(x))", "all x.(Indonesia(x) -> Country(x))", "all x.(Indonesia(x) -> Country(x))", "all x.(Indonesia(x) -> Country(x))", "all x.(Indonesian(x) -> Country(x))", "all x.(Indonesia(x) -> Country(x))", "all x.(Indonesia(x) -> Country(x))", "all x.(Indonesia(x) -> Country(x))"]}
{"id": "folio_train_582", "nl": "In Indonesia, the prosecutor only personally investigates cases of some special crimes.", "fol": "exists x y.((IsCountry(Indonesia) & IsProsecutor(x) & IsCrime(y)) -> InvestigatesPersonally(x,y))", "prediction": ["all x y.((IndonesianProsecutor(x) & SpecialCrime(y)) -> Investigates(x,y))", "all x y.((Indonesia(x) & Prosecutor(y)) -> OnlyInvestigates(y,x))", "all x y.((Prosecutor(x) & Indonesia(y)) -> Only personallyInvestigates(x,y))", "all x y.((Prosecutor(x) & Indonesia(y)) -> OnlyInvestigates(x,y))", "all x.(Indonesia(x) -> (Prosecutor(x) & OnlyPrimarilyInvestigates(x,SpecialCrimes)))", "all x y.((Prosecutor(x) & InIndonesia(y)) -> LimitedIndemnity(x,y))", "exists x.(Prosecutor(x) & InIndonesia(x) & OnlyInquires(x,specialCrimes))", "all x y.((Processor(x) & Indonesia(y)) -> Only PersonallyInterviews(x,y))", "all x y.((Prosecutor(x) & Indonesia(y)) -> InvestigatesSpecialCrimes(x,y))", "all x y z.((Prosecutor(x) & Indonesia(y) & SpecialCrime(z)) -> Investigates(x,y,z))", "all x.(IndonesianPriscillor(x) -> (InvestigatesSpecialCrimesFromCoins(x) & OnlyInInvestigatesIndonesia(x)))", "all x y.((IndonesianPriscillator(x) & SpecialCrime(y)) -> OnlyInterprets(x,y))", "all x y z.((Prosecutor(x) & Indonesian(y) & SpecialCrime(z)) -> Investigates(x,y))", "all x y.((Prosecutor(x) & Indonesia(y)) -> (InvestigatesIndonesia(x,y) & VariousCrimes(x,y)))", "all x y.((Prosecutor(x) & Indonesia(y)) -> InvestigatesInspection(x,y))", "all x y.((Indonesia(x) & Prosecutor(y)) -> (InvestigatesIndonesia(y) & Personally(y)))"]}
{"id": "folio_train_583", "nl": "Corruption is a type of crime.", "fol": "IsCrime(Corruption)", "prediction": ["all x.(Corruption(x) -> Crime(x))", "all x.(Corruption(x) -> (Crime(x) & Affects(x)))", "all x.(Corruption(x) -> Crime(x))", "all x.(Corruption(x) -> Crime(x))", "all x.(Corruption(x) -> Crime(x))", "all x.(Corruption(x) -> Crime(x))", "all x.(Corruption(x) -> Crime(x))", "all x.(Corruption(x) -> Crime(x))", "all x.(Corruption(x) -> Crime(x))", "all x.(Corruption(x) -> Criminal(x))", "all x.(Corruption(x) -> Crime(x))", "all x.(Corruption(x) -> Crime(x))", "all x.(Corruption(x) -> Crime(x))", "all x.(Corruption(x) -> Crime(x))", "all x.(Corruption(x) -> Crime(x))", "all x.(Corruption(x) -> (Crime(x) & HasCrime(x)))"]}
{"id": "folio_train_584", "nl": "Once the police complete investigations of a crime, they hand the evidence to the prosecutor. ", "fol": "all x y.(((IsCrime(y) & CompletesInvestigation(y) & IsProsecutor(x)) -> IsEvidence(y)) & HandsEvidenceToProsecutor(x,y))", "prediction": ["all x y z.((Police(x) & Crime(y) & Prosecutor(z)) -> CompletesInvestigationsAndHandsEvidenceTo(x,y,z))", "all x y.((Police(x) & Crime(y) & CompletesInvestigations(x,y)) -> HandsEvidenceToProsecutor(x,y))", "all x y.((Police(x) & Crime(y) & CompletesInquests(x,y)) -> HandsEvidenceToProsecutor(x,y))", "all x y z.((Police(x) & Crime(y) & Prosecutors(z)) -> CompletesInterview(x,y))", "all x y.((Police(x) & Crime(y) & CompletesInvestigations(x,y)) -> HandsEvidenceToProsecutor(x))", "all x y.((Police(x) & Crime(y) & CompletesInvestigations(x,y)) -> HandsEvidenceToProsecutor(x,y))", "all x y z.((Police(x) & Crime(y) & Prosecutors(z)) -> CompletesInvestigationsDoesNotGoTo(x,y,z))", "all x y.((Police(x) & Crime(y) & CompletesInquests(x,y)) -> HandsEvidenceToProsecutor(x))", "all x y z.((Police(x) & Crime(y) & Prosecutor(z) & CompletesInvestigations(x,y)) -> HandsEvidence(x,z))", "all x y z.((Police(x) & Crime(y) & Prosecutor(z)) -> CompliesInvestigationsAndHandsEvidence(x,y,z))", "all x y z.((Police(x) & Crime(y) & Prosecutor(z) & CompletesInvestigations(x,y)) -> HandsEvidence(x,z))", "all x.((Police(x) & CompletesInvestigationsOfCrime(x)) -> HandsEvidenceToProsecutor(x))", "all x y.((Police(x) & Crime(y) & CompletesInquests(x,y)) -> HandsEvidenceToProsecutors(x,y))", "all x y.((Police(x) & Crime(y) & CompletesInvestigations(x,y)) -> HandsEvidence(x,y))", "all x y.((Police(x) & Crime(y) & CompletesInvestigations(x,y)) -> HandsEvidenceToProsecutor(x,y))", "all x y z.((Police(x) & Crime(y) & Prosecutor(z)) -> CompletesInvestigations(x,y))"]}
{"id": "folio_train_585", "nl": "Evidence can be either satisfactory or unsatisfactory.", "fol": "all x.(IsCrime(x) & IsEvidence(x) & ((IsSatisfactory(x) & -IsUnsatisfactory(x)) | (-IsSatisfactory(x) & IsUnsatisfactory(x))))", "prediction": ["all x.(Evidence(x) -> (Satisfying(x) | Unsatisfactory(x)))", "all x.(Evidence(x) -> (Satisfactory(x) | Unsatisfactory(x)))", "all x.(Evidence(x) -> (Satisfying(x) | Unsatisfactory(x)))", "all x.(Evidence(x) -> (Satisfactory(x) | Unsatisfactory(x)))", "all x.(Evidence(x) -> (Suffering(x) | Unsatisfactory(x)))", "all x.(Evidence(x) -> (Supplemental(x) | Unsatisfactory(x)))", "all x.(Evidence(x) -> (Supplyable(x) | Unsatisfactory(x)))", "(Supplyable(Evidence) | Unsatisfactory(Evidence)))", "all x.(Evidence(x) -> (Supplyable(x) | Unsatisfactory(x)))", "all x.(Evidence(x) -> (Ssatisfactory(x) | Unsatisfactory(x)))", "all x.(Evidence(x) -> (Satisfying(x) | Unsatisfactory(x)))", "all x.(Evidence(x) -> (Satisfying(x) | Unsatisfactory(x)))", "all x.(Evidence(x) -> (Successful(x) | Unsatisfactory(x)))", "all x.(Evidence(x) -> (Satisfying(x) | Unsatisfactory(x)))", "all x.(Evidence(x) -> (Saluting(x) | Unsatisfactory(x)))", "all x.(Evidence(x) -> (Sufficient(x) | Unsatisfactory(x)))"]}
{"id": "folio_train_586", "nl": "If the police hand the evidence to the prosecutor and the evidence is satisfactory, the prosecutor will prosecute the offender in an appropriate court.", "fol": "all x y.((IsEvidence(y) & HandsEvidenceToProsecutor(x,y) & IsSatisfactory(y)) -> ProsecutesOffenderInCourt(x,y))", "prediction": ["all x y z.((Police(x) & Prosecutor(y) & Offender(z) & HandsEvidenceTo(x,y) & SatisfactoryEvidence(x,z)) -> ProsecutesInAppropriateCourt(y,z))", "all x y.((Police(x) & Prosecutors(y) & HandsEvidenceTo(x,y) & SatisfyingEvidence(y)) -> ProsecutesInAdequateCourt(y,x))", "all x y.((Police(x) & Prosecutor(y) & HandsEvidence(x,y) & SatisfyingEvidence(y)) -> ProsecutesInAppropriateCourt(y))", "all x y z.((Police(x) & Prosecutor(y) & Evidence(z) & HandsTo(x,z) & Satisfactory(z)) -> Prosecutes(y,y,z))", "all x y.((Police(x) & Prosecution(y) & HandsEvidenceTo(x,y) & SatisfactoryEvidence(x)) -> ProsecutionInAppropriateCourt(x,y))", "all x y.((PoliceHandsEvidence(x) & Prosecution(y) & SatisfactoryEvidence(y)) -> Prosecution(y,x))", "all x y.((Police(x) & Prosecutioner(y) & HandsEvidenceTo(x,y) & SatisfyingEvidence(x)) -> ProsecutesInAppropriateCourt(y))", "all x y.((PolicePolice(x) & Prosecutor(y) & HandsEvidence(x,y) & SufficientEvidence(x,y)) -> Prosecution(y,x))", "all x y.((Police(x) & Prosecutor(y) & HandsEvidenceTo(x,y) & SatisfyingEvidence(y)) -> ProcuresOffender(x,y))", "all x y.((Police(x) & Offender(y) & HandsEvidenceToProsecution(x,y) & SatisfyingEvidence(x,y)) -> ProsecutionInAppropriateCourt(y))", "all x y.((Police(x) & Prosecutor(y) & HandsEvidenceTo(x,y)) -> Prosecution(y,y))", "all x y.((Police(x) & Prosecutor(y) & HandsEvidenceTo(x,y) & SatisfactoryEvidence(x)) -> Prosecution(y))", "all x y.((PoliceMandateDismissedEvidence(x) & ProsecutingEvidence(y) & SatisfactoryEvidence(x)) -> ProsecutesCourt(x,y))", "all x y.((Police(x) & Prosecutor(y) & HandsEvidence(x,y) & SatisfyingEvidence(x,y)) -> Prosecution(y,x))", "all x y z.((Police(x) & Prosecutor(y) & Evidence(z) & HandsTo(x,z) & Satisfactory(z) & AppropriateCourt(y,x)) -> Prosecutes(y,y))", "all x y z.((Police(x) & Prosecutor(y) & Offender(z) & HandsEvidenceTo(x,y,z) & SatisfyingEvidence(y)) -> ProsecutionInAppropriateCourt(y,z))"]}
{"id": "folio_train_587", "nl": "When the police complete investigations, the prosecutor will prosecute the offender at an appropriate court.", "fol": "all x y.((CompletesInvestigation(y) & IsProsecutor(x)) -> ProsecutesOffenderInCourt(x,y))", "prediction": ["all x y.((PoliceCompletesFindings(x) & Offender(y)) -> ProsecutesAtAppropriateCourt(y,x))", "all x y.((Police(x) & Offender(y) & CompletesInvestigations(x,y)) -> ProsecutionAtAppropriateCourt(x,y))", "all x y.((PoliceCompletesInvestigations(x) & Offender(y)) -> ProsecutionAtAppropriateCourt(x,y))", "all x y z.((Police(x) & Investigates(x) & Offender(y) & AppropriateCourt(z)) -> ProsecutesAt(x,y,z))", "all x y.((Police(x) & Offender(y) & CompletesInvestigations(x)) -> ProsecutionAtAppropriateCourt(y))", "all x y.((PoliceCompletesInvestigations(x) & Prosecutor(y)) -> ProsecutionAtPasition(y,s))", "all x.((PoliceCompletedInvestigations(x) & Prosecutor(x)) -> ProsecutesAtAppropriateCourt(x))", "all x y.((PoliceCompletesInvestigations(x) & Offender(y)) -> ProsecutesAtAppropriateCourt(x,y))", "all x y.((Police(x) & Investigates(x,y)) -> prosecutes(x,y))", "all x y.((Police(x) & Offender(y) & CompletesInvestigations(x,y)) -> ProsecutesAtAppropriateCourt(x,y))", "all x y.((Police(x) & Offender(y) & CompletesInvestigations(x)) -> ProsecutionAtAppropriateCourt(y))", "all x y.((Police(x) & Police(y) & CompletesInvestigations(x,y)) -> ProsecutionAtCompetition(x,y))", "all x y.((PoliceCompletesInspections(x) & Prosecutor(y) & Offenders(y)) -> InappropriateCourt(y))", "all x y z.((Police(x) & Investigates(y) & Offender(z) & Completes(x,y)) -> ProsecutsAtAddressableCourt(x,z))", "all x y z.((Police(x) & Investigates(x) & Offender(y) & Court(z) & Completes(x,y)) -> ProsecutionAt(x,z))", "all x.((PoliceCompletedInvestigations(x) & Prosecutor(x)) -> ProsecutionAtAppropriateCourt(x))"]}
{"id": "folio_train_588", "nl": "In Indonesia, the prosecutor personally investigates cases of corruption.", "fol": "exists x.(IsCountry(Indonesia) & IsProsecutor(x) & InvestigatesPersonally(x,Corruption))", "prediction": ["all x y z.((Prosecutor(x) & Indonesian(y) & Corruption(z)) -> Interviews(x,y,z))", "all x y.((Prosecutor(x) & LocatedIn(x,in)) -> PersonallyInvestigatesCorruption(x))", "all x y.((Indonesia(x) & Prosecutor(y)) -> UnderminesCorruption(y))", "all x y.((Prosecutor(x) & Indonesia(y)) -> PersonallyInvestigatesCorruption(x,y))", "all x y.((Indonesian(x) & Prosecutor(y)) -> OverseesCorruption(y,x))", "all x y.((Prosecutor(x) & Indonesia(y)) -> PersonallyInvestigatesCorruption(x,y))", "all x.(Indonesia(x) -> ProsecutorIntroduces(x,corruption))", "all x y.((IndonesianProsecutor(x) & Corruption(y)) -> PeopleSolves(x,y))", "all x.(Indonesia(x) -> PrivateAccusation(x,Corruption))", "all x.(Indonesia(x) -> PersonalInvestigation(x,Corruption))", "all x.(IndonesianProsecutor(x) -> PersonallyInvestigatesColrruption(x))", "all x y.((IndonesianProsecutor(x) & Case(y)) -> PersonallyInvestigates(x,y))", "all x y.((Prosecutor(x) & InIndonesia(y)) -> InvestigatesClosingCorruption(x,y))", "all x.(Indonesia(x) -> PersonalProsecution(x))", "all x y z.((Prosecutor(x) & Corruption(y) & Indonesia(z)) -> InvestigatesPersonally(x,y,z))", "all x y z.((Prosecutor(x) & Case(y) & Corruption(z) & InIndonesia(x,y)) -> PersonallyInvestigates(x,y,z))"]}
{"id": "folio_train_589", "nl": "When the police complete investigations, the prosecutor investigates in personally.", "fol": "all x.(CompletesInvestigation(x) -> ProsecutorInves(x))", "prediction": ["all x y z.((Police(x) & Criminal(y) & Investigation(z) & Completes(x,z)) -> InvestigatesIn(y,z))", "all x y z.((Police(x) & Prosecutors(y) & Investigation(z)) -> Completes(x,z))", "all x y z.((Police(x) & Prosecutor(y) & Investigation(z)) -> Completes(x,y))", "all x y z.((Police(x) & Prosecutor(y) & Investigation(z) & Completes(x,z)) -> InvestigatesInPersons(y,z))", "all x y.((Police(x) & Prosecutor(y)) -> CompletesInvestigations(x,y))", "all x.((Police(x) & CompletesInvestigations(x)) -> InvestigatesEachIn(x))", "all x y.((Police(x) & Prosecutor(y)) -> CompletesInvestigations(x,y))", "all x.((PoliceCompletesInvestigations(x) & Prosecutional(x)) -> InvestigatesInpersonally(x))", "all x.((PoliceCompletesInvestigations(x) & ProsecutorIninvestigatesInInperson(x)) -> IsCompleted(x))", "all x y z.((Police(x) & Investigation(y) & Prosecutor(z) & Completes(z)) -> InvestigatesIn(z,y))", "all x y.((Police(x) & Prosecutor(y) & CompletesInterventions(x,y)) -> InvestigatesInPersonly(y,x))", "all x y.((Police(x) & Prosecutor(y)) -> CompletesInvestigations(x,y))", "all x y.((Police(x) & Prosecutor(y)) -> CompletesInvestigations(x,y))", "all x y.((Police(x) & Prosecutor(y) & CompletesInquests(x)) -> InvestigatesInPersonal(y,x))", "all x.((PoliceCompletesInvestigations(x) & Prosecutor(y)) -> InvestigatesInPersonal(y))", "all x.((PoliceCompletesInvestigations(x) & ProsecutorInvestigatesInPersonal(x)) -> InvestigatesInPersonal(x))"]}
{"id": "folio_train_590", "nl": "No watch that is battery-powered is automatic.", "fol": "all x.(IsBatteryPoweredWatch(x) -> -IsAutomaticWatch(x))", "prediction": ["all x.((Watch(x) & BatteryPowered(x)) -> Automatic(x))", "-exists x.(Watch(x) & BatteryPowered(x))", "all x.((Watch(x) & BatteryPowered(x)) -> Automatic(x))", "all x.((Watch(x) & BatteryPowered(x)) -> Automatic(x))", "all x.((Watch(x) & BatteryPowered(x)) -> Automatic(x))", "-exists x.(Watch(x) & BatteryPowered(x))", "-exists x.(Watch(x) & BatteryPowered(x))", "-exists x.(Watch(x) & BatteryPowered(x))", "all x.((Watch(x) & BatteryPowered(x)) -> Automatic(x))", "all x.((Watch(x) & BatteryPowered(x)) -> Automatic(x))", "all x.((Watch(x) & BatteryPowered(x)) -> Automatic(x))", "-exists x.(Watch(x) & BatteryPowered(x) & Automatic(x))", "-exists x.(Watch(x) & BatteryPowered(x))", "all x.((Watch(x) & BatteryPowered(x)) -> Automatic(x))", "all x.((Watch(x) & BatteryPowered(x)) -> Automatic(x))", "-exists x.(Watch(x) & BatteryPowered(x))"]}
{"id": "folio_train_591", "nl": "All digital watches are battery-powered.", "fol": "all x.(IsDigitalWatch(x) -> IsBatteryPoweredWatch(x))", "prediction": ["all x.(DigitalWatch(x) -> BatteryPowered(x))", "all x.(DigitalWatch(x) -> BatteryPowered(x))", "all x.(DigitalWatch(x) -> BatteryPowered(x))", "all x.(DigitalWatch(x) -> BatteryPowered(x))", "all x.(DigitalWatch(x) -> BatteryPowered(x))", "all x.(DigitalWatch(x) -> BatteryPowered(x))", "all x.(DigitalWatch(x) -> BatteryPowered(x))", "all x.(DigitalWatch(x) -> BatteryPowered(x))", "all x.(DigitalWave(x) -> BatteryPowered(x))", "all x.(DigitalWatch(x) -> BatteryPowered(x))", "all x.(DigitalWatch(x) -> BatteryPowered(x))", "all x.(DigitalWatch(x) -> BatteryPowered(x))", "all x.(DigitalWatch(x) -> BatteryPowered(x))", "all x.(DigitalWatch(x) -> BatteryPowered(x))", "all x.(DigitalWatch(x) -> BatteryPowered(x))", "all x.(DigitalWatch(x) -> BatteryPowered(x))"]}
{"id": "folio_train_592", "nl": "Some mechanical watches are automatic.", "fol": "exists x.(IsMechanicalWatch(x) & IsAutomaticWatch(x))", "prediction": ["exists x.(MechanicalWatch(x) & Automatic(x))", "exists x.(MechanicalWatch(x) & Automatic(x))", "exists x.(MechanicalWatch(x) & Automatic(x))", "exists x.(MechanicalWatch(x) & Automatic(x))", "exists x.(MechanicalWatch(x) & Automatic(x))", "exists x.(MechanicalWatch(x) & Automatic(x))", "exists x.(MechanicalWatch(x) & Automatic(x))", "exists x.(MechanicalWatch(x) & Automatic(x))", "exists x.(MechanicalWatch(x) & Automatic(x))", "exists x.(MechanicalWatch(x) & Automatic(x))", "exists x.(MechanicalWatch(x) & Automatic(x))", "exists x.(MechanicalWatch(x) & Automatic(x))", "exists x.(MechanicalWatch(x) & Automatic(x))", "exists x.(MechanicalWatch(x) & Automatic(x))", "exists x.(MechanicalWatch(x) & Automatic(x))", "exists x.(MechanicalWatch(x) & Automatic(x))"]}
{"id": "folio_train_593", "nl": "All smart watches are digital.", "fol": "all x.(IsSmartWatch(x) -> IsDigitalWatch(x))", "prediction": ["all x.(SmartWatch(x) -> Digital(x))", "all x.(SmartWatch(x) -> Digital(x))", "all x.(SmartWatch(x) -> Digital(x))", "all x.(SmartWatch(x) -> Digital(x))", "all x.(SmartWatch(x) -> Digital(x))", "all x.(SmartWatch(x) -> Digital(x))", "all x.(SmartWatch(x) -> Digital(x))", "all x.(SmartWatch(x) -> Digital(x))", "all x.(SmartWatch(x) -> Digital(x))", "all x.(SmartWatch(x) -> Digital(x))", "all x.(SmartWatch(x) -> Digital(x))", "all x.(SmartWatch(x) -> Digital(x))", "all x.(SmartWatch(x) -> Digital(x))", "all x.(SmartWatch(x) -> Digital(x))", "all x.(SmartWatch(x) -> Digital(x))", "all x.(SmartWatch(x) -> Digital(x))"]}
{"id": "folio_train_594", "nl": "Moonwatch is not a digital watch or an automatic.", "fol": "((-IsDigitalWatch(Moonwatch) & -IsAutomaticWatch(Moonwatch)) | (IsDigitalWatch(Moonwatch) & IsAutomaticWatch(Moonwatch)))", "prediction": ["(-DigitalWatch(Moonwatch) & -AutomaticWatch(Moonwatch))", "all x.(Moonwatch(x) -> (-DigitalWatch(x) & -AutomaticWatch(x)))", "all x.(Moonwatch(x) -> (-DigitalWatch(x) | AutomaticWatch(x)))", "all x.(Moonwatch(x) -> (AnDigitalWatch(x) & -Automatic(x)))", "all x.(Moonwatch(x) -> (-DigitalWatch(x) | AutomaticWatch(x)))", "all x.(Moonwatch(x) -> (-DigitalWatch(x) | AutomaticWatch(x)))", "all x.(Moonwatch(x) -> (-DigitalWatch(x) | AutomaticWatch(x)))", "((Moonwatch(Moon)) & NoDigitalWatch(Moon) & NoAutomatic(Moon)))", "all x.(Moonwatch(x) -> -DigitalWatch(x) & -Automatic(x))", "all x.(Moonwatch(x) -> (-DigitalWatch(x) | AutomaticWatch(x)))", "all x.(Moonwatch(x) -> (-DigitalWatch(x) | AutomaticWatch(x)))", "all x.(Moonwatch(x) -> (-DigitalWatch(x) | AutomaticWatch(x)))", "(Mountwatch) -DigitalWatch(Mountwatch) & -Automatic(Mountwatch))", "all x.(Moonwatch(x) -> (-DigitalWatch(x) | AutomaticWatch(x)))", "all x.(Moonwatch(x) -> (-DigitalWatch(x) | AutomaticWatch(x)))", "all x.(Moonwatch(x) -> (-DigitalWatch(x) | AutomatedWatch(x)))"]}
{"id": "folio_train_595", "nl": "Moonwatch is a mechanical watch.", "fol": "IsMechanicalWatch(Moonwatch)", "prediction": ["all x.(Moonwatch(x) -> MechanicalWatch(x))", "all x.(Moonwatch(x) -> MechanicalWatch(x))", "the Moonwatch (MachinedWatch)", "all x.(Moonwatch(x) -> MechanicalWatch(x))", "(Moonwatch) -> MechanicalWatch(Moonwatch))", "all x.(Mountwatch(x) -> MechanicalWitch(x))", "all x.(Moonwatch(x) -> MechanicalWatch(x))", "all x.(Moonwatch(x) -> MechanicalWave(x))", "all x.(Moonwatch(x) -> MechanicalWatch(x))", "all x.(Moonwatch(x) -> MechanicalWatch(x))", "all x.(Mountainwatch(x) -> MechanicalWatch(x))", "all x.(Moonwatch(x) -> MechanicalWatch(x))", "all x.(Moonwatch(x) -> MechanicalWatch(x))", "(Mountwatch(m) -> Mechanical(m))", "all x.(Moonwatch(x) -> MechanicalWatch(x))", "all x.(Moonwatch(x) -> MechanicalWatch(x))"]}
{"id": "folio_train_596", "nl": "Moonwatch is a smartwatch and a mechanical watch.", "fol": "(IsSmartWatch(Moonwatch) & IsMechanicalWatch(Moonwatch))", "prediction": ["all x.(Moonwatch(x) -> (Smartwatch(x) & MechanicalWave(x)))", "all x.(Moonwatch(x) -> (Smartwatch(x) & MechanicalWatch(x)))", "all x.(Moonwatch(x) -> (Smartwatch(x) & MechanicalWatch(x)))", "all x.(Moonwatch(x) -> (Smartwatch(x) & MechanicalWatch(x)))", "all x.(Moonwatch(x) -> (Smartwatch(x) & MechanicalWatch(x)))", "all x.(Moonwatch(x) -> (Smartwatch(x) & MechanicalWatch(x)))", "all x.(Moonwatch(x) -> (Smartwatch(x) & MechanicalWatch(x)))", "all x.(Moonwatch(x) -> (Smartwatch(x) & MechanicalWatch(x)))", "all x.((Smartwatch(x) & MechanicalWatch(x)) -> Moonwatch(x))", "all x.(Moonwatch(x) -> (Smartwatch(x) & MechanicalWatch(x)))", "all x.(Moonwatch(x) -> (Smartwatch(x) & MechanicalWatch(x)))", "all x.(Moonwatch(x) -> (Smartwatch(x) & MechanicalWatch(x)))", "all x y.((Moonwatch(x) & Smartwatch(y)) -> MechanicalWave(x))", "all x.(Moonwatch(x) -> (Smartwatch(x) & MechanicalWatch(x)))", "all x.(Moonwatch(x) -> (Smartwatch(x) & MechanicalWatch(x)))", "all x y.((Moonwatch(x) & Smartwatch(y)) -> MechanicalWatch(x))"]}
{"id": "folio_train_597", "nl": "If Moonwatch is a smartwatch and a mechanical watch, then Moonwatch is not a mechanical watch.", "fol": "((IsSmartWatch(Moonwatch) & IsMechanicalWatch(Moonwatch)) -> -IsMechanicalWatch(Moonwatch))", "prediction": ["all x.((Smartwatch(x) & MechanicalWatch(x)) -> -MechanicalWatch(x))", "all x.((Smartwatch(x) & MechanicalWatch(x)) -> -MechanicalWatch(x))", "all x.((Smartwatch(x) & MechanicalWatch(x)) -> -MechanicalWatch(x))", "all x.((Smartwatch(x) & MechanicalWatch(x)) -> -MadisonWing(x))", "all x.((Smartwatch(x) & MechanicalWatch(x)) -> -MechanicalWatch(x))", "all x.((Moonwatch(x) & Smartwatch(x) & MechanicalWatch(x)) -> -MechanicalWatch(x))", "all x.((Moonwatch(x) & Smartwatch(x) & MechanicalWatch(x)) -> -MechanicalWatch(x))", "all x.(Solidwatch(x) -> -MechanicalWatch(x))", "all x.((Smartwatch(x) & MechanicalWatch(x)) -> -MechanicalWatch(x))", "all x.((Smartwatch(x) & MechanicalWatch(x)) -> -MechanicalWatch(x))", "all x.((Smartwatch(x) & MechanicalWatch(x)) -> -MechanicalWatch(x))", "(all x.(Smartwatch(x) & MechanicalWatch(x)) -> -Mountainwatch(x))", "all x.(Smartwatch(x) -> -MechanicalWatch(x))", "all x.((Smartwatch(x) & MechanicalWatch(x)) -> -MechanicalWatch(x))", "all x.((Moonwatch(x) & Smartwatch(x) & MechanicalWatch(x)) -> -MechanicalWatch(x))", "all x.(Smartwatch(x) -> -MechanicalWatch(x))"]}
{"id": "folio_train_598", "nl": "If Moonwatch is a mechanical or battery-powered watch, then Moonwatch is not a smartwatch.", "fol": "((IsMechanicalWatch(Moonwatch) | IsBatteryPoweredWatch(Moonwatch)) -> -IsSmartWatch(Moonwatch))", "prediction": ["all x.((Mountwatch(x) & (Mechanical(x) | BatteryPowered(x))) -> -Smartwatch(x))", "all x.((Moonwatch(x) & BehavesOnMechanicalOrBatteryPowered(x)) -> -Smartwatch(x))", "all x.((Mountwatch(x) & (Mechanical(x) | BatteryPowered(x))) -> -Smartwatch(x))", "all x.((Mountwatch(x) & (Mechanical(x) | BatteryPowered(x))) -> -Smartwatch(x))", "all x.((Monowatch(x) & (Mechanical(x) | BatteryPowered(x))) -> -Smartwatch(x))", "all x.((Mountwatch(x) & (Mechanical(x) | BatteryPowered(x))) -> -Smartwatch(x))", "all x.((Moonwatch(x) & (Mechanical(x) | BatteryPowered(x))) -> -Smartwatch(x))", "all x.((Motorwatch(x) & (MechanicalWarning(x) | BatteryPoweredWarning(x))) -> -Smartwatch(x))", "all x.((Mountwatch(x) & (MechanicalWatch(x) | BatteryPoweredWatch(x))) -> -Smartwatch(x))", "all x.((Mountwatch(x) & (Mechanical(x) | BatteryPowered(x))) -> -Smartwatch(x))", "all x.((Mountwatch(x) & (Mechanical(x) | BatteryPowered(x))) -> -Smartwatch(x))", "all x.((Moonwatch(x) & (Mechanical(x) | BatteryPowered(x))) -> -Smartwatch(x))", "all x.((Mountwatch(x) & (MechanicalWatch(x) | BatteryPoweredWatch(x))) -> -Smartwatch(x))", "all x.((Moonwatch(x) & (Mechanical(x) | BatteryPowered(x))) -> -Smartwatch(x))", "all x.((Moonwatch(x) & (MechanicalWatch(x) | BatteryPoweredWatch(x))) -> -Smartwatch(x))", "all x y z.((Mountwatch(x) & (Mechanical(x) | BatteryPowered(x))) -> -Smartwatch(y))"]}
{"id": "folio_train_599", "nl": "If a person can distinguish the taste of different condiments, then he/she can also use different condiments to cook.", "fol": "(all x.((IsPerson(x) & CanDistinguishCondiments(x)) -> CanUseDifferentCondiments(x)) & exists x.(IsPerson(x) & -CanDistinguishCondiments(x) & CanUseDifferentCondiments(x)) & -all x.(IsPerson(x) & CanDistinguishCondiments(x)))", "prediction": ["all x.(Diagnose(x,y) -> AllYouKnows(x,y))", "all x.(DistinctTasteOfDifferentConditions(x) -> CooksDifferentConditions(x))", "all x.((Person(x) & DiffersTasteOfDifferentCondiments(x)) -> CanCookUsingDifferentCondiments(x))", "all x y z.(DiffersTasteOfDifferentConditions(x) -> CookWithDifferentConditions(y))", "all x.(DistortTasteOfCondiments(x) -> CanCookWithDifferentCondiments(x))", "all x.(DistinctTasteOfSpecimens(x) -> CookInConditor(x))", "all x.(IdentifiesTasteOfDifferentCondiments(x) -> CanCookDifferentCondiments(x))", "all x y.((Person(x) & CanDistinctTasteOfCondiments(x) & DifferentCondiments(y)) -> CanCook(z))", "all x.((Person(x) & DiffersTasteOfDifferentCondiments(x)) -> CanCookDifferentCondiments(x))", "all x.((Person(x) & DistinctsTasteOfDifferentConditions(x)) -> CooksWithDifferentConditions(x))", "all x y.((Person(x) & DistinctTaste(x,y) & DifferentCondiments(x)) -> CookTheCondiments(x))", "all x.(DifferentTasteOfDifferentCondiments(x) -> CookDifferentCondiments(x))", "all x.((Person(x) & DiffersTasteOfDifferentCondiments(x)) -> CanCookDifferentCondiments(x))", "all x y.((Person(x) & DistinctsTasteOfDifferentConditives(x,y)) -> CooksAcrossDifferentConditives(x,y))", "all x y.((Person(x) & DivorceDifferentCondiments(x)) -> CookDifferentCondiments(x,y))", "all x.(DiagnosesTaste(x) -> CanCook(x))"]}
{"id": "folio_train_600", "nl": "People who have the talent of cooking can distinguish the taste of different condiments.", "fol": "all x.((IsPerson(x) & HasCookingTalent(x)) -> CanDistinguishCondiments(x))", "prediction": ["all x.((Person(x) & TalentOfCooking(x)) -> CanDistinctTaste(x,separateCondiments))", "all x.((Person(x) & TalentOfCooking(x)) -> DittiesTasteOfVariousCondiments(x))", "all x.((Person(x) & TalentOfCooking(x)) -> DittiesTasteOfNonCondiments(x))", "all x.((Person(x) & TalentOfCooking(x)) -> CanDistinctTasteOfDifferentCondiments(x))", "all x.((Person(x) & CookingTalent(x)) -> DistinctTasteOfCondiments(x))", "all x.((Person(x) & Talent(x) & Cooking(x)) -> CanDistingTasteOfDifferentCondiments(x))", "all x.((Person(x) & TalentOfCooking(x)) -> AbilityToDistinctTaste(x,DifferentCondensation))", "all x y.((Person(x) & TalentOfCooking(x)) -> DistinctStayOfDifferentCondiments(x,y))", "all x.(KitchenCaterer(x) -> CanDistractTasteOfDifferentConditions(x))", "all x.((HasTalentOfCooking(x)) -> CanDistinctTasteOfDifferentCondiments(x))", "all x.(KitchenTalent(x) -> DistinctTasteOfCompartments(x))", "all x.((People(x) & TalentOfCooking(x)) -> DistinctTasteOfVariousConditions(x))", "all x.((Person(x) & TalentOfCooking(x)) -> DittiesTasteOfVariousCondiments(x))", "all x y.((Person(x) & TalentOfCooking(x)) -> CanDistinctTasteOfDifferentCondiments(x))", "all x.((Person(x) & TalentOfCooking(x)) -> DistinctTasteOfVariousCondiments(x))", "all x y.((Popular(x) & TalentOfCooking(x)) -> CanDistinctTasteOfDifferentCondiments(z))"]}
{"id": "folio_train_601", "nl": "Only people with the talent of cooking can make delicious meals.", "fol": "all x y.((CanMakeMeal(x,y) & IsDelicious(y) & IsPerson(x)) -> HasCookingTalent(x))", "prediction": ["all x.((Person(x) & CookingTalent(x)) -> CanMakeDeliciousMeals(x))", "all x.((Person(x) & TalentToCook(x)) -> CanMakeDeliciousMeals(x))", "all x.((Person(x) & TalentOfCooking(x)) -> CanMakeDeliciousMeals(x))", "all x.((Person(x) & TalentOfCooking(x)) -> MakesDeliciousMeals(x,y))", "all x.((Person(x) & TalentOfCooking(x)) -> CanMakeDeliciousMeals(x))", "all x.((Person(x) & TalentOfCooking(x)) -> CanMakeDeliciousMeals(x))", "all x.((Person(x) & TalentOfCooking(x)) -> CanMakeDeliciousMeals(x))", "all x.((Person(x) & TalentOfCooking(x)) -> CouldMakeDeliciousMeals(x))", "all x.((Person(x) & TalentOfCooking(x)) -> CanMakeDeliciousMeals(x))", "all x.((Person(x) & TalentOfCooking(x)) -> CanMakeDeliciousMeals(x))", "all x.((Person(x) & TalentOfCooking(x)) -> CanMakeDeliciousMeals(x))", "all x.((Person(x) & TalentEfficient(x)) -> CanMakeDeliciousMeals(x))", "all x.((Person(x) & TalentOfCooking(x)) -> CreatesDeliciousMeals(x))", "all x.((Person(x) & Cooks(x)) -> CanMakeDeliciousMeals(x))", "all x.((Person(x) & TalentOfCooking(x)) -> CanMakeDeliciousMeals(x))", "all x.((Person(x) & CanCook(x)) -> CanMakeDeliciousMeals(x))"]}
{"id": "folio_train_602", "nl": "If the meal is popular at the party, then it is delicious.", "fol": "all x y.((CanMakeMeal(x,y) & IsPerson(x) & IsPopularAtParty(y)) -> IsDelicious(y))", "prediction": ["all x.((Meal(x) & PopularAtParty(x)) -> Delicious(x))", "all x.((Meal(x) & PopularAtParty(x)) -> Delicious(x))", "all x.((Meal(x) & PopularAtParty(x)) -> Delicious(x))", "all x.((Meal(x) & PopularAtParty(x)) -> Delicious(x))", "all x.((Meal(x) & PopularAtParty(x)) -> Delicious(x))", "all x.((Meal(x) & PopularAtParty(x)) -> Delicious(x))", "all x.((Meal(x) & PopularAtParty(x)) -> Delicious(x))", "all x.((Meal(x) & PopularAtParty(x)) -> Delicious(x))", "all x.((Meal(x) & PopularAtParty(x)) -> Delicious(x))", "all x.(PopularAtParty(x) -> DeliciousMeal(x))", "all x.((Meal(x) & PopularAtParty(x)) -> Delicious(x))", "all x.((Meal(x) & PopularAtParty(x)) -> Delicious(x))", "all x.((Meal(x) & PopularAtParty(x)) -> Delicious(x))", "all x.((Meal(x) & PopularAtParty(x)) -> Delicious(x))", "all x.(PopularAtParty(x) -> DeliciousMeal(x))", "all x.((Meal(x) & PopularAtParty(x)) -> Delicious(x))"]}
{"id": "folio_train_603", "nl": "John can make meals which are popular at the party.", "fol": "exists x.(IsPerson(John) & CanMakeMeal(John,x) & IsPopularAtParty(x) & IsPerson(Peter) & -CanUseDifferentCondiments(Peter))", "prediction": ["all x.(John(x) -> MakesMeals(x))", "all x y.((John(x) & Party(y)) -> CanMakeMeals(x,y))", "all x y.((PopularPartyMeal(x) & John(y)) -> Makes(y,x))", "all x.((John(x) & TastesPopularAtParty(x)) -> CanMakeMeals(x))", "all x.(John(x) -> (CanMakeMeals(x) & PopularAtParty(x)))", "all x.((John(x) & Party(y)) -> CanMeal(x,y))", "(Meal(John) & PopularAtParty(John,John))", "all x.(John(x) -> (Meals(x,y) & PopularAtParty(x)))", "all x.(John(x) -> (MakesMeals(x) & PopularAtParty(x)))", "all x.(John(x) -> CanMealYourParty(x))", "all x y.((John(x) & Party(y)) -> CanMeal(x,y))", "all x y.((John(x) & Meal(y)) -> CanMake(x,y))", "all x y.((John(x) & Party(y)) -> CanMakeMeals(x,y))", "all x.((John(x) & MakeMeal(x)) -> PopularAtParty(x))", "all x y z.((John(x) & Party(y) & Meal(z)) -> (Makes(x,z) & PopularAt(z)))", "all x.((John(x) & MakesMeals(x)) -> PopularAtParty(x))"]}
{"id": "folio_train_604", "nl": "John cannot use different condiments to cook.", "fol": "-CanUseDifferentCondiments(John)", "prediction": ["John's(John) -> -UsesDifferentCondiments(John,))", "-exists x.(Condiments(x) & CookElements(x))", "all x y.((John(x) & Concoction(y)) -> -UsesToCook(x,y))", "all x.(Cook(John) -> -UsesDifferentCondiments(John))", "all x y.((John(x) & Sauce(y)) -> -CanUse(x,y))", "all x.((John(x) & Cook(y)) -> -(GivesYouDifferentCondiments(x,y) | UsesAdditionalCondiments(x,z))))", "John 12 -(UsesCongarments(John) | UsesCongarreds(John)))", "(-UsesDifferentCondiments(John,John))", "Oops. (-UsesDifferentCondimentsToCook(John,9))", "-(UsesDifferentCondiments(John))", ". -(UsesDifferentCondiments(John))", "all x.((John(x) & Cook(y)) -> -UsesCondiments(x,y))", "John -CanUseDifferentCondimentsToCook(John))", "all x.(Condiment(x) -> -(UsesCondiment(x) & CooksWith(x)))", "all x.(John(x) -> -CanUseDifferentConditions(x))", "can't use different condiments to cook."]}
{"id": "folio_train_605", "nl": "Effective monetary policy is possible with successful inflation control and a strong national currency.", "fol": "all x.(EffectiveMonetaryPolicy(x) -> (SuccessfulInflationControl(x) & StrongNationalCurrency(x)))", "prediction": ["all x.((MacroeconomicPolicy(x) & SuccessfulInflationControl(x) & StrongNationalCurrency(x)) -> Effective(x))", "all x.((InflationControl(x) & StrongNationalCurrency(x)) -> EffectiveMonetaryPolicy(x))", "all x y.((EfficientMonetaryPolicy(x) & SuccessfulInflationControl(y) & StrongNationalCurrency(x,y)) -> Possible(x))", "all x y.((MonetaryPolicy(x) & IncrimationControl(y) & StrongNationalCurrency(x)) -> Effective(x))", "all x.((InflationControl(x) & StrongNationalCurrency(x)) -> EffectiveMonetaryPolicy(x))", "all x.((InflationControl(x) & StrongNationalCurrency(x)) -> EffectiveMonetaryPolicy(x))", "all x.((InflationControl(x) -> (EffectiveMonetarizationPolicy(x) & Successful(x) & Strong(x))) -> Possible(x))", "all x y.((Inflation(x) & InflationControl(y) & StrongNationalCurrency(x)) -> EffectiveMonetaryPolicy(x))", "all x.((MonetaryPolicy(x) & SuccessiveInflationControl(x) & StrongNationalCurrency(x)) -> Effective(x))", "all x.((MonetaryPolicy(x) & SuccessfulInflationControl(x) & StrongNationalCurrency(x)) -> Effective(x))", "all x.((InflationControl(x) & StrongNationalCurrency(x)) -> EffectiveMonetaryPolicy(x))", "all x.((InflationControl(x) & StrongNationalCurrency(x)) -> EffectiveMathPolicy(x))", "all x.((InflationControl(x) & StrongNationalCurrency(x)) -> EffectiveMonetaryPolicy(x))", "all x.((InflationControl(x) & StrongNationalCurrency(x)) -> EffectiveMonetaryPolicy(x))", "all x.((SocialInflationControl(x) & StrongNationalCurrency(x)) -> EffectiveMonetaryPolicy(x))", "all x.((InflationControl(x) & StrongNationalCurrency(x)) -> EffectiveMonetaryPolicy(x))"]}
{"id": "folio_train_606", "nl": "A country cannot simultaneously regulate the exchange rate and successfully control inflation.", "fol": "-all x.(SuccessfulInflationControl(x) & RegulateExchangeRate(x))", "prediction": ["all x.((Country(x) & -RegulatesExchangeRate(x) & SuccessfullyControlsInflation(x)) -> -(RegulatesExchangeRate(x) & SuccessfullyControlsInflation(x)))", "all x.(Country(x) -> (-RegulatesExchangeRate(x) & ControlsInflation(x)))", "all x.(Country(x) -> (-RegulatesExchangeRate(x) & ControlsInflation(x)))", "all x.((Country(x) & -RegulatesInterchangeRate(x) & SuccessfullyControlsInflation(x)) -> -RegulatesInterchangeRateAndControlsInflation(x))", "all x.((Country(x) & -RegulatesExchangeRate(x) & ControlsInflation(x)) -> -SuccessfullyControlsInflation(x))", "all x.((Country(x) & -(RegulatesExchangeRateForInflation(x) & SuccessfulInflationControl(x))) -> -RegulatesExchangeRateAndControlsInflation(x))", "all x.(Country(x) -> (-RegulatesExchangeRate(x) & SuccessfullyControlsInflation(x)))", "all x.(Country(x) -> (-RegulatesExchangeRate(x) & SuccessfulInflationControl(x)))", "all x.((Country(x) & -RegulatesExchangeRate(x,inflation) & SuccessfullyControlsInflation(x,inflation)) -> -RegulatesExchangeRate(x))", "all x.((Country(x) & ControlsInflation(x)) -> -RegulatesInflation(x) & ControlsInflation(x))", "all x.(City(x) -> (-RegulatesExchangeRate(x) & SuccessfullyRegulatesInflation(x)))", "all x.(Country(x) -> (-RegulatesExchangeRate(x) & ControlsInflation(x)))", "all x.((Country(x) & -SecondaryRegulationOfExchange(x) & SuccessfulControlOfInflation(x)) -> -RegularsConsumption(x))", "all x.(Country(x) -> -(RegulatesExchangeRate(x) & ControlsInflation(x)))", "all x.((Country(x) & -(RegulatesExchangeRate(x) & ControlsInflation(x))) -> -(RegulatesExchangeRate(x) & ControlsInflation(x)))", "all x.((Country(x) & -Regulate ExchangeRate(x) & SuccessfulInflationControl(x)) -> -(RegulatesExchangeRate(x) & ControlsInflation(x)))"]}
{"id": "folio_train_607", "nl": "The introduction of an embargo on foreign trade goods in a country leads to a sharp decrease in exports.", "fol": "all x.(EmbargoOnForeignTrade(x) -> DecreaseInExports(x))", "prediction": ["all x y.((Embargo(x) & Country(y) & IntroductionOf(x,y)) -> SharpDecreaseInExports(x,y))", "all x y z.((Embargo(x) & ForeignTradeGoods(y) & Country(z)) -> LeadsToSharpDecreaseInExports(x,y,z))", "all x y.((IntroductionOfEmbargo(x,y) & Country(y)) -> SharpDecreaseInExports(x))", "all x.((Embargo(x) & ForeignTradeGoods(x) & Country(x)) -> SharpDecreaseInExports(x))", "all x y.((IntroductionOfEmbargo(x) & ForeignTradeGoods(y) & Country(z)) -> SharpDecreaseInExports(x,y,z))", "all x y.((Embargo(x) & ForeignTradeGoods(y) & Country(x)) -> -DecreaseInExports(x,y))", "all x.((Embargo(x) & ForeignTradeGoods(x) & Country(x)) -> SharpDecreaseInExports(x))", "all x y.((Embargo(x) & Country(y) & InIntroduction(x,y)) -> SharpDecreaseInExports(x,y))", "all x y.((Embargo(x) & Country(y) & IntroducedOnFrenchTradeGoods(x,y)) -> SharpDecreaseInExports(x))", "all x y z.((Embargo(x) & ForeignTradeGoods(y) & Country(z) & IntroducedIn(x,y)) -> Decrease inExports(x,z))", "all x y.((Embargo(x) & ForeignTradeGoods(y) & Country(y)) -> SharpDecreaseInExports(x,y,z))", "all x y.((IntroductionOfEmbargoOnForeignTradeGoods(x) & Country(y)) -> SharpDecreaseInExports(x,y))", "all x y.((Embargo(x) & Country(y) & InterruptionOfExports(x,y)) -> SharpDecreaseInExports(x))", "all x y z.((Embargo(x) & ForeignTradeGoods(y) & Country(z) & IntroducedIn(x,y,z)) -> DecreaseInExports(x,y))", "all x y z.((EmbargoChange(x) & ForeignTradeGoods(y) & Country(z)) -> (DefeatOutputs(y,z) | SharpDecreaseInExports(y,z)))", "all x y z.((Embargo(x) & ForeignTradeGoods(y) & Country(z) & IntroducedIn(x,y) & InCountry(x,z)) -> SharpDecreaseInExports(x))"]}
{"id": "folio_train_608", "nl": "If exports fall sharply, the national currency cannot be in this country.", "fol": "all x.(DecreaseInExports(x) -> -StrongNationalCurrency(x))", "prediction": ["all x.((ExportsFallStraightly(x) & -ThanSouthAmerica(x)) -> -LowerNationWahror.", "all x.((ExportsFailStrikingly(x) & NationalCurrency(x)) -> -exists in country(x))", "all x.((ExportsFallSharply(x) & -NationalCurrency(x)) -> NationalCurrencyIn(x,City))", "all x y.((Exports(x) & Exports(y) & SharpEffluence(x,y)) -> -InCountry(x,y))", "all x.(ExportsFallSharply(x) -> -CountryCanValueIn(x,county))", "all x.(ExportsFailSharply(x) -> -NationalCurrency(x))", "all x.((ExportsFall(x) & SharpExports(x)) -> NationalCurrency-In(x,y))", "all x.(SharpExportsFall(x) -> -HasNationalCurrency(x))", "all x.((ExportsFall(x) & SharpFall(x)) -> -NationalMarket CurrencyInLand(x))", "all x.((ExportsFallSharply(x) & NationalCurrencyCannotBeIn(x)) -> -MajorCountry(x))", "all x.(ExpandsFlareSharply(x) -> -NationalCurrency(x))", "all x.(SharpExportsFall(x) -> -NationalCurrencyInCountry(x))", "all x.((ExportsFailSharply(x) & CannotBeInThisCountry(x)) -> NationalCurrency(x))", "all x.((ExportExports(x) & ExportSharpSc\u0103dere(x)) -> -CanBeInCountry(x))", "all x.((ExportsForever(x) & ExportsFall(x)) -> -NationalCountry(x))", "all x.((ExportsFast(x) & SharpFast(x)) -> -NationalCurrencyInCountry(x))"]}
{"id": "folio_train_609", "nl": "Regulation of the exchange rate is required to have a strong national currency. ", "fol": "all x.(RegulateExchangeRate(x) -> StrongNationalCurrency(x))", "prediction": ["all x.((RegulationOfExchangeRate(x) & StrongNationalCurrency(x)) -> Requires(x))", "all x.((RegulationOfExchangeRate(x) & StrongNationalCurrency(x)) -> RequiresRegulationOfExchangeRate(x))", "all x.((RegulationOfExchangeRate(x) & StrongNationalCurrency(x)) -> Requires(x,Currency(x))", "all x.((RegulationOfExchangeRate(x) & StrongNationalCurrency(x)) -> InThanNationalCurrency(x))", "all x.(StrongNationalCurrency(x) -> RegulatesExchangeRate(x))", "all x.((RegulationOfExchangeRate(x) & StrongNationalCurrency(x)) -> Requires(x,s))", "all x.(RegulatedExchangeRate(x) -> StrongNationalCurrency(x))", "all x.((RegulationOfExchangeRate(x) & StrongNationalCurrency(x)) -> Requires(x,y))", "all x y.((ExchangeRate(x) & Currency(y)) -> NationalRequirement(x,y))", "all x.((RegulationOfExchangeRate(x) & StrongNationalCurrency(x)) -> Requires(x))", "all x.((RegulationOfExchangeRate(x) & StrongNationalCurrency(x)) -> RequiresPoorRate(x))", "all x.((RegulationOfExchangeRate(x) & StrongNationalCurrency(x)) -> Requires(x))", "all x.((RegulationOfExchangeRate(x) & StrongNationalCurrency(x)) -> Requires(x))", "all x.((RegulationOfExchangeRate(x) & StrongNationalCurrency(x)) -> RequiresStructuralCurrency(x))", "all x.((RegulatoryOffset(x) & StrongNationalCurrency(x)) -> Requires(x,exchangeRate))", "all x.((RegulationOfExchangeRate(x) & StrongNationalCurrency(x)) -> RequiresImportance(x))"]}
{"id": "folio_train_610", "nl": "There is an embargo on Russian foreign trade goods.", "fol": "EmbargoOnForeignTrade(Russia)", "prediction": ["exists x y.((RussischForeignTradeGood(x) & Guarantee(y)) -> Embargo(x,y))", "all x.((RussishFreshTradeGoods(x) & Dispatches(x)) -> Embargo(x))", "exists x.(RussoEmbargoOn(x) & RussianTradeGoods(x))", "exists x.(RussianExpects(x) & ExportsAndDistributions(x))", "exists x.(RussinForeignTradeBond(x) & EmbargoOn(x))", "exists x.(Russo(x) & ForeignTradeGoods(y) & Embargo(x,y))", "exists x.(RussianFreshTradeGood(x) & EmbargoOn(x,x))", "exists x.(RussianGlobalTradeGood(x) & Embargo(x))", "all x y.((RussishFreshTradeGoods(x) & RussianFreshTradeGoods(y)) -> Embargo(x,y))", "all x y.((Russish(x) & TradeGood(y)) -> Embargo(x,y))", "all x.((RussianFrenchTradeGood(x) & Embargo(x)) -> Free(x))", "all x.((RussishForeignTradeGoods(x) & Embargo(x)) -> DoesRossis(x))", "exists x.(RussinFrenchTradeGood(x) & Embargo(x))", "exists x.(RussicFreshTradeGood(x) & Embargo(x))", "all x y.((Russland(x) & ForeignTradeGoods(y)) -> Embargo(x,y))", "exists x.(RussianForeignTradeGood(x) & Embargo(x))"]}
{"id": "folio_train_611", "nl": "In Russia, an effective monetary policy is possible.", "fol": "exists x.EffectiveMonetaryPolicy(Russia)", "prediction": ["all x.(EfficientMonetaryPolicy(x) -> Possible(x))", "all x.((Rossia(x) & EffectiveMonetaryPolicy(x)) -> Possible(x))", "all x.((Rosh(x) & EffectiveMonetaryPolicy(x)) -> Possible(x))", "all x.((Russian(x) & EffectiveMonetaryPolicy(x) & PossibleIn(x,Russia)) -> Cancel(x))", "all x.((Rassum(x) & EffectiveMonetaryPolicy(x)) -> Possible(x))", "all x.((Rossonomy(x) & EffectiveMonetaryPolicy(x)) -> Possible(x))", "all x.((Rossia(x) & EffectiveMonetaryPolicy(x)) -> Possible(x))", "all x.((Rosso-Casual(x) & EffectiveMonetaryPolicy(x)) -> Possible(x))", "all x.((Russland(x) & EffectiveMonetaryPolicy(x)) -> Possible(x))", "all x.((RussianCyprus(x) & EffectiveMonetaryPolicy(x)) -> Possible(x))", "all x1.((Russian(x) & EffectiveMonetaryPolicy(x)) -> Possible(x))", "all x.(Rossip(x) -> EffectiveMonetaryPolicy(x))", "all x.((Russland(x) & EffectiveMonetaryPolicy(x)) -> Possible(x))", "all x.(Ru\u00dfland(x) -> EffectiveMonetaryPolicy(x))", "all x.((Russland(x) & EffectiveMonetaryPolicy(x)) -> Possible(x))", "all x.((Russland(x) & EffectiveMonetaryPolicy(x)) -> Possible(x))"]}
{"id": "folio_train_612", "nl": "Video Gag is a French television series that airs weekly.", "fol": "all x.((VideoGagSeries(x) -> IsFrenchTelevisionSeries(x)) & AirsWeekly(x))", "prediction": ["all x.(VideoGag(x) -> (FrenchTVSeries(x) & AirsWeekly(x)))", "(FrenchTelevisionSerial(VideoGag) & AirsWeekly(VideoGag))", "All x.(VideoGag(x) -> (FrenchTVSeries(x) & AirsWeekly(x)))", "All x.(VideoGag(x) -> (FrenchTelevisionSeries(x) & AirsWeekly(x)))", "all x.(VideoGag(x) -> (FrenchTelevisionSeries(x) & AirsWeekly(x)))", "all x.(VideoGag(x) -> (FrenchTelevisionSeries(x) & AirsWeekly(x)))", "(FrenchTelevisionSequel(VideoGag) & AirsWeekly(VideoGag))", "all x.(VideoGag(x) -> (FrenchTelevisionShow(x) & AirsWeekly(x)))", "all x y.((VideoGag(x) & FrenchSeries(y)) -> AirsWeekly(x,y))", "ALL NEXTELEVISION(Gag) -> (FrenchTelevisionSeries(N) & AIRSWeekly(N)))", "all x.(VideoGag(x) -> (FrenchTelevisionSeries(x) & AirsWeekly(x)))", "all x.(VideoGag(x) -> (FrenchTelevisionSeries(x) & AirsWeekly(x)))", "All x.(VideoGag(x) -> (FrenchSeries(x) & AirsWeekly(x)))", "all x.(VideoGag(x) -> (FrenchTelevisionSeries(x) & AirsWeekly(x)))", "(FrenchTVSeries(VideoGag) & AirsWeekly(VideoGag))", "all x.(VideoGag(x) -> AirsWeekly(x))"]}
{"id": "folio_train_613", "nl": "Video Gag airs on the French broadcast channel TF1. ", "fol": "all x.(VideoGagSeries(x) -> AirsOnChannelTF1(x))", "prediction": ["all x.(VideoGag(x) -> AirsOnFrenchBroadcastChannel(x))", "all x.(VideoGag(x) -> AirsOnFrenchBroadcastChannel(x,TF1))", "all x.(VideoGag(x) -> AirsOnFrenchBroadcastChannel(x,TF1))", "all x.(VideoGag(x) -> AirsOnFrenchStandardChannel(x))", "(AirsOn(VideoGag) & FrenchBroadcastChannel(VideoGag))", "All x.(VideoGag(x) -> AirsOnFrenchBroadcastChannel(x,TF1))", "all x.(VideoGag(x) -> AirsOnFrenchBroadcastChannel(x,TF1))", "all x.(VideoGag(x) -> AirsOnFrenchBroadcastCanal(x,TF1))", "all x.(VideoGag(x) -> AirsOnFrenchFolkCamera(x,TF1))", "all x y.((VideoGag(x) & FrenchBroadcastChannel(y)) -> AirsOn(x,y))", "all x.(VideoGag(x) -> AirsOnFrenchBroadcastChannel(x,TF1))", "all x.(VideoGag(x) -> AirsOnFrenchBroadcastChannel(x,TF1))", "All x y.((VideoGag(x) & FrenchBroadcastChannel(y)) -> Airs(x,y))", "all x.(VideoGag(x) -> AirsOnFrenchBroadcastChannel(x,TF1))", "all x.(VideoGag(x) -> AirsOnFrenchBroadcastChannel(x,TF1))", "all x.(VideoGag(x) -> AirsOnFrenchBroadcastChannel(x,TF1))"]}
{"id": "folio_train_614", "nl": "If viewers send in funny videos to the French broadcast channel, then Video Gag airs them on television.", "fol": "all x.(ReceivedFunnyVideos(x) -> AirsWeekly(x))", "prediction": ["all x.((Client(x) & SendsInFunnyVideos(x) & FrenchBroadcastChannel(x)) -> AirsOnTV(x))", "(All x.(ComicVideo(x) & SendsToFrenchBroadcast(x)) -> AirsOnTelevision(x))", "all x y.((Viewer(x) & SendsFunnyVideos(x,y)) -> AirsOnTelevision(x,y))", "all x y.((Viewer(x) & SendsFunnyVideos(x) & FrenchBroadcastCanal(y) & AirsOn(x,y)) -> VidalGag(x))", "all x y.((Viewer(x) & SendsLaughingVideos(x,y)) -> AIRSOnTelevision(x,y))", "all x y.((Viewer(x) & SendFunnyVideosToFrenchBroadcastChannel(x,y) & SendFunnyVideosToFrenchBroadcastChannel(x,y)) -> AirsOnTelevision(x,y))", "all x y.((Viewer(x) & SendsFunnyVideosToFrenchBroadcastChannel(x)) -> AirsOn(x, television))", "all x y.((Viewer(x) & SendsFunnyVideosToFrenchBroadcastChannel(x,y)) -> AirsOnTelevision(x,y))", "all x y.((Viewer(x) & SendsFunnyVideosToFrenchBroadcastChannel(x,y)) -> AirsOnTelevision(x,y))", "all x y.((Viewer(x) & SendsFunnyVideos(x,y) & FrenchBroadcastChannel(y)) -> AirsOnTelevision(x,y))", "all x y.((Viewer(x) & SendFunnyVideo(y) & FrenchBroadcastCanal(c) & SendsIn(x,y)) -> AirsOnTelevision(x,c))", "all x.((Viewer(x) & SendFunnyVideos(x) & SendToFrenchBroadcastChannel(x)) -> AirsOnTelevision(x))", "all x y.((Viewer(x) & SendsFunnyVideos(x,z)) -> AirsOnTV(x))", "all x y.((Viewers(x) & (FrenchBroadcastChannel(y) | FrenchPublicChannel(y))) -> AirsOnTelevision(x,y))", "all x y.((Viewer(x) & SendsFunnyVideos(x,y) & FrenchBroadcastChannel(y)) -> AirsOnTV(x))", "all x y.((Visitor(x) & SendsFunnyVideos(x,y)) -> AirsOnTelevision(x))"]}
{"id": "folio_train_615", "nl": "All videos aired on Video Gag are in French.", "fol": "all x.((VideoGagSeries(x) -> AirsWeekly(x)) & IsInFrench(x))", "prediction": ["all x.((Video(x) & airedOnVideoGag(x)) -> InFrench(x))", "all x.((Video(x) & AerializedOnVideoGag(x)) -> French(x))", "(AllVideosAigedOnVideoGag(x) -> InFrench(x))", "all x.((Video(x) & AiredOnVideoGag(x)) -> InFrench(x))", "all x.((Video(x) & IsAeratedOnVideoGag(x)) -> InFrench(x))", "all x.(Video(x) -> AiredOnVideoGag(x))", "all x.((Video(x) & airedOnVideoGag(x)) -> French(x))", "all x.(AnimatedOnVideoGag(x) -> InFrench(x))", "all x.(Video(x) -> ApprovedInFrench(x))", "all x.(Video(x) -> FilmedOnVideoGag(x))", "all x.((Video(x) &airedOnVideoGag(x)) -> French(x))", "all x.(Video(x) -> AiredOnVideoGag(x))", "All x y.((Video(x) & AiredOnVideoGag(x)) -> French(x,y))", "all x.((Video(x) & AiredOnVideoGag(x)) -> InFrench(x))", "all x.((Video(x) & AiredOnVideoGag(x)) -> InFrench(x))", "all x.(Video(x) -> AiredOnVideoGag(x))"]}
{"id": "folio_train_616", "nl": "Viewers send in funny videos to the French broadcast channel that are in French.", "fol": "all x.((ReceivedFunnyVideos(x) & IsInFrench(x)) -> SentToFrenchBroadcastChannel(x))", "prediction": ["all x.(HoldFunnyVideo(x) -> SendIn(x,FrenchBroadcastChannel))", "all x y.((Viewer(x) & FrenchBroadcastChannel(y) & SendsMockingVideos(x,y)) -> IsFrench(x))", "all x y z.((Viewer(x) & FunnyVideo(y) & FrenchBroadcastChannel(z) & Sends(x,y,z)) -> InFrenchVideo(y,z))", "all x y.((Viewer(x) & WatchAnimal(y)) -> SendsFunnyVideos(x,y))", "all x y.((Viewer(x) & FilmNumber(y) & Send(x,y)) -> FunnyVideo(x,y))", "all x y.((Viewer(x) & BroadcastChannel(y) & FunnyVideo(y) & InFrench(x)) -> SendsIn(x,y))", "all x y.((Viewer(x) & FrenchBroadcastChannel(y)) -> SendsMissyVideos(x,y))", "all x y z.((Viewer(x) & FunnyVideo(y) & FrenchBroadcastChannel(z)) -> SendsIn(x,y,z))", "all x y.((Viewer(x) & ViewsChannel(y)) -> SendsFunnyVideos(x,y))", "all x y.((Viewer(x) & FrenchBroadcastChannel(y)) -> SendsFunnyVideo(x,y))", "all x y.((Viewer(x) & Cameo(y) & InFrench(x,Y)) -> SendInFunnyVideos(x))", "all x y z.((Viewer(x) & FunnyVideo(y) & FrenchBroadcastChannel(z)) -> SendsInTo(x,y,z))", "all x y.((Viewer(x) & FrenchBroadcastChannel(y) & SendsInFunnishVideos(x,y)) -> FunnyTo(x,y))", "all x y z.((Viewer(x) & FunnyVideo(y) & ParisBroadcastCanal(z)) -> Send(x,y,z))", "all x y.((Viewer(x) & FrenchAirBroadcastChannel(y)) -> SendsFunnyVideos(x,y))", "all x y.((Viewer(x) & FrenchBroadcastChannel(y)) -> SendsFunnyVideos(x,y))"]}
{"id": "folio_train_617", "nl": "Viewers send in funny videos to the French broadcast channel that are in English.", "fol": "exists x.(ReceivedFunnyVideos(x) & SentTo(FrenchBroadcastChannel,x) & English(x))", "prediction": ["all x.((Viewer(x) & SendsFunnyVideos(x) & EnglishFilm(x)) -> SendsIn(x,FrenchBroadcastChannel))", "all x y.((Viewer(x) & FrenchBroadcastChannel(y)) -> SendsInFunnyVideosInEnglish(x,y))", "all x y z.((Viewer(x) & FunnyVideo(y) & FrenchBroadcastChannel(z) & Sends(x,y,z)) -> InEnglish(y,z))", "all x y z.((Viewer(x) & FrenchBroadcastChannel(y) & FunnyVideo(z)) -> SendsTo(x,y,z))", "all x y.((Viewer(x) & FunnyVideo(y)) -> SendsToFrenchBroadcastChannel(x,y))", "all x.(Viewer(x) -> SendsInFunnyVideo(x))", "all x y z.((Viewer(x) & FrenchBroadcastChannel(y) & FunnyVideo(z) & English(z)) -> SendsTo(x,y,z))", "all x y z.((Viewer(x) & Channel(y) & FunnyVideo(z) & SendsTo(x,y,z)) -> InEnglish(x))", "all x y.((Viewer(x) & SendsFunnyVideos(x,y) & English(y)) -> FunnyVideos(x,y))", "all x y z.((Viewer(x) & FrenchBroadcastChannel(y) & FunnyVideo(z) & SendsTo(x,y) & English(z)) -> InEnglish(x,y))", "all x y z.((Viewer(x) & FunnyVideo(y) & FrenchBroadcastChannel(z) & Sends(x,y,z)) -> SendsIn(x,y,z))", "all x y.((Viewer(x) & FrenchBroadcastChannel(y)) -> SendsInFunnyVideos(x,y))", "all x y.((Viewer(x) & FilmChannel(y)) -> SendIn(x,y))", "all x.(Viewer(x) -> (SendsFunnyVideos(x,English) & ToFrenchBroadcastChannel(x)))", "all x y.((Viewer(x) & FrenchBroadcastChannel(y)) -> SendsInFunnyVideos(x,y))", "all x y.((Viewer(x) & FrenchBroadcastChannel(y)) -> SendsFunnyVideo(x,y))"]}
{"id": "folio_train_618", "nl": "All phones are things.", "fol": "all x.(IsPhone(x) -> IsThing(x))", "prediction": ["all x.(Phone(x) -> Things(x))", "all x.(Phone(x) -> Things(x))", "exists x.(Phone(x) & Something(x))", "all x.(Phone(x) -> Thing(x))", "all x.(Phone(x) -> Things(x))", "(all x.(Phone(x) -> Thing(x)))", "all x.(Phone(x) -> Things(x))", "(all x.(Phone(x) -> Things(x)))", "all x.(Phone(x) -> Thing(x))", "all x.(Phone(x) -> Things(x))", "all x.(Phone(x) -> Thing(x))", "all x.(Phone(x) -> Things(x))", "all x.(Phone(x) -> Things(x))", "all x.(Phone(x) -> Things(x))", "all x.(Phone(x) -> Thing(x))", "all x.(Phone(x) -> Thing(x))"]}
{"id": "folio_train_619", "nl": "All cellphones are phones. ", "fol": "all x.(IsCellphone(x) -> IsPhone(x))", "prediction": ["all x.(Cellphone(x) -> Phone(x))", "all x.(Cellphone(x) -> Phone(x))", "all x.(Cellphone(x) -> Phone(x))", "all x.(Cellphone(x) -> Phone(x))", "all x.(Cellphone(x) -> Phone(x))", "all x.(Cellphone(x) -> Phone(x))", "all x.(Cellphone(x) -> Phone(x))", "all x.(Cellphone(x) -> Phone(x))", "all x.(Cellphone(x) -> Phone(x))", "all x.(Cellphone(x) -> Phone(x))", "all x.(Cellphone(x) -> Phone(x))", "all x.(Cellphone(x) -> Phone(x))", "all x.(Cellphone(x) -> Phone(x))", "all x.(Cellphone(x) -> Phone(x))", "all x.(Cellphone(x) -> Phone(x))", "all x.(Cellphone(x) -> Phone(x))"]}
{"id": "folio_train_620", "nl": "All iPhones are cellphones. ", "fol": "all x.(IsIphone(x) -> IsCellphone(x))", "prediction": ["all x.(iPhone(x) -> Cellphone(x))", "all x.(Iphone(x) -> Cellphone(x))", "all x.(Iphone(x) -> Cellphone(x))", "all x.(Iphone(x) -> Cellphone(x))", "all x.(Iphone(x) -> Cellphone(x))", "all x.(Iphone(x) -> Cellphone(x))", "all x.(Iphone(x) -> Cellphone(x))", "all x.(iphone(x) -> Cellphone(x))", "all x.(iPhone(x) -> Cellphone(x))", "all x.(Iphone(x) -> Cellphone(x))", "all x.(Iphone(x) -> Cellphone(x))", "all x.(Iphone(x) -> Cellphone(x))", "all x.(iPhone(x) -> Cellphone(x))", "all x.(Iphone(x) -> Cellphone(x))", "all x.(iphone(x) -> Cellphone(x))", "all x.(iPhone(x) -> Cellphone(x))"]}
{"id": "folio_train_621", "nl": "All engineers are workers.", "fol": "all x.(IsEngineer(x) -> IsWorker(x))", "prediction": ["all x.(Engineer(x) -> Worker(x))", "all x.(Engineer(x) -> WorksAt(x))", "all x.(Engineer(x) -> Workers(x))", "all x.(Engineer(x) -> Worker(x))", "all x.(Engineer(x) -> WorksAt(x))", "all x.(Engineer(x) -> Worker(x))", "all x.(Engineer(x) -> Workers(x))", "all x.(Engineer(x) -> Workers(x))", "all x.(Engineer(x) -> Workers(x))", "all x.(Engineer(x) -> Workers(x))", "all x.(Engineer(x) -> Workers(x))", "all x.(Engineer(x) -> Worker(x))", "all x.(Engineer(x) -> Worker(x))", "all x.(Engineer(x) -> Worker(x))", "all x.(Engineer(x) -> Workers(x))", "all x.(Engineer(x) -> Workers(x))"]}
{"id": "folio_train_622", "nl": "All workers are human. ", "fol": "all x.(IsWorker(x) -> IsHuman(x))", "prediction": ["all x.(Worker(x) -> Human(x))", "all x.(Worker(x) -> Human(x))", "all x.(Worker(x) -> Human(x))", "all x.(Worker(x) -> Human(x))", "all x.(Worker(x) -> Human(x))", "all x.(Worker(x) -> Human(x))", "all x.(Worker(x) -> Human(x))", "all x.(Worker(x) -> Human(x))", "all x.(Worker(x) -> Human(x))", "all x.(Worker(x) -> Human(x))", "all x.(Worker(x) -> Human(x))", "all x.(Worker(x) -> Human(x))", "all x.(Worker(x) -> Human(x))", "all x.(Worker(x) -> Human(x))", "all x.(Worker(x) -> Human(x))", "all x.(Worker(x) -> Human(x))"]}
{"id": "folio_train_623", "nl": "Jack is either an engineer or a worker.", "fol": "((IsEngineer(Jack) & -IsWorker(Jack)) | (-IsEngineer(Jack) & IsWorker(Jack)))", "prediction": ["all x.(Jack(x) -> (Engineer(x) | Worker(x)))", "all x.(Jack(x) -> (Engineer(x) | Worker(x)))", "all x.(Jack(x) -> (Engineer(x) | Worker(x)))", "all x.(Jack(x) -> (Engineer(x) | Worker(x)))", "(Engineer(Jack) | Worker(Jack))", "all x.(Jack(x) -> (Engineer(x) | Worker(x)))", "all x.((Jack(x) & Engineer(x)) | Worker(x))", "all x.(Jack(x) -> (Engineer(x) | Worker(x)))", "(Engineer(Jack) | Worker(Jack))", "all x.(Jack(x) -> (Engineer(x) | Worker(x)))", "all x.(Jack(x) -> (Engineer(x) | Workers(x)))", "all x.(Jack(x) -> (Engineer(x) | Worker(x)))", "all x.(Jack(x) -> (Engineer(x) | Worker(x)))", "all x.(Jack(x) -> (Engineer(x) | Worker(x)))", "all x.(Jack(x) -> (Engineer(x) | Worker(x)))", "all x.(Jack(x) -> (Engineer(x) | Worker(x)))"]}
{"id": "folio_train_624", "nl": "Jack is is either a human or a phone.", "fol": "((IsHuman(Jack) & -IsPhone(Jack)) | (-IsHuman(Jack) & IsPhone(Jack)))", "prediction": ["all x.(Jack(x) -> (Human(x) | Phone(x)))", "all x.(Jack(x) -> (Human(x) | Phone(x)))", "(all x.(Jack(x) -> Human(x) | Phone(x)))", "all x.(Jack(x) -> (Human(x) | Phone(x)))", "exists x.(Jack(x) & (Human(x) | Phone(x)))", "all x.(Jack(x) -> (Human(x) | Phone(x)))", "all x.(Jack(x) -> (Human(x) | Phone(x)))", "all x.(Hand(x) | Phone(x))", "all x.(Jack(x) -> (Human(x) | Phone(x)))", "all x.(Jack(x) -> (Human(x) | Phone(x)))", "(Human(Jack) | Phone(Jack))", "all x.(Human(x) | Phone(x))", "all x.(Jack(x) -> (Human(x) | Phone(x)))", "all x.(Jack(x) -> (Human(x) | Phone(x)))", "all x.(Jack(x) -> (Human(x) | Phone(x)))", "all x.(Jack(x) -> (Human(x) | Phone(x)))"]}
{"id": "folio_train_625", "nl": "Jack is a thing.", "fol": "IsThing(Jack)", "prediction": ["all x.(Jack(x) -> Thing(x))", "all x.(Jack(x) -> Thing(x))", "all x.(Jack(x) -> Thing(x))", "all x.(Jack(x) -> Thing(x))", "all x.(Jack(x) -> Thing(x))", "all x.(Jack(x) -> Thing(x))", "all x.(Jack(x) -> Thing(x))", "all x.(Jack(x) -> Things(x))", "all x.(Jack(x) -> Thing(x))", "all x.(Jack(x) -> Thing(x))", "All x.(Jack(x) -> Thing(x))", "all x.(Jack(x) -> Things(x))", "(Is(Jack) & Thing(jack))", "all x.(Jack(x) -> Thing(x))", "all x.(Jack(x) -> Thing(x))", "all x.(Jack(x) -> Thing(x))"]}
{"id": "folio_train_626", "nl": "Jack is not a thing.", "fol": "-IsThing(Jack)", "prediction": ["-((Jack(jack) & -Yeah\"))", "all x.(Jack(x) -> -Thing(x))", "(-Thing(Jack) & -Thing(Jack))", "-Thing(Jack)", "-(Thing(Jack)?", "-(IsThing(Jack)?", "-Is(Jack(Jack)?", "(-Thing(Jack))", "-Jest(jack)", "All x.(Jack(x) -> -Thing(x))", "all x.(Jack(x) -> -IsThing(x))", "all x.(Jack(x) -> -Ding(x))", "-(Thing(Jack) | -Thing(Jack))", "all x.(Jack(x) -> -Thing(x))", "(DoesNumber(jack,(jack) & DoesNotDing(jack))", "All x.(Jack(x) -> -Binge(x))"]}
{"id": "folio_train_627", "nl": "Jack is a thing and an iPhone.", "fol": "(IsThing(Jack) & IsIphone(Jack))", "prediction": ["(Thing(Jack) & iPhone(Jack))", "all x.(Jack(x) -> (Thing(x) & iPhone(x)))", "(Iphone(Jack) & Ding(Jack))", "all x y.((Jack(x) & iPhone(y)) -> (Thing(x) & iPhone(x)))", "(AsThing(Jack) & iPhone(Jack))", "(Thing(Jack) & iPhone(Jack))", "(HasJack(Jack) & iPhone(Jack))", "(Iphone(Jack) & Iphone(Jack))", "All x.(Jack(x) -> (Thing(x) & iPhone(x)))", "all x.(Jack(x) -> (Ding(x) & iPhone(x)))", "all x.(Jack(x) -> (Ding(x) & iPhone(x)))", "(Iphone(Jack) & Thing(Jack))", "all x.(Jack(x) -> (Thing(x) & iPhone(x)))", "all x.(Jack(x) -> (Iphone(x) & Thing(x)))", "(AndIphone(Jack))", "(Thing(Jack) & iPhone(Jack))"]}
{"id": "folio_train_628", "nl": "Jack is not both a thing and an iPhone.", "fol": "-(IsThing(Jack) & IsIphone(Jack))", "prediction": ["- (Iphone(Jack) & iPhone(Jack))", "\"Iphone\" & -(Thing(Jack) & iPhone(Jack))", "all x.(Jack(x) -> -(Thing(x) & iPhone(x)))", "-(iPhone(i) & Thing(i))", "all x.(Jack(x) -> -(Mason(x) & iPhone(x)))", "notHasIphone(jack)", "-(Iphone(Jack) & Thing(Jack))", "-(Iphone(Jack) & iPhone(Jack))", "-(Thing(Jack) & iPhone(Jack))", "all x.(Jack(x) -> -(Thing(x) & iPhone(x)))", "none of these factors exists x.(Apple(x) & iPhone(x))", "(-(Iphone(Jack) | Thing(Jack)))", "-(Iphone(Iphone) & iPhone(Iphone))", "-(Iphone(jack) & Thing(jack))", "(-(Iphone(Jack) & iPhone(Jack)))", "all x.(Jack(x) -> -(Iphone(x) & Thing(x)))"]}
{"id": "folio_train_629", "nl": "All iPhones are electronic.", "fol": "all x.(IsIPhone(x) -> IsElectronic(x))", "prediction": ["all x.(Iphone(x) -> Electronic(x))", "all x.(iPhone(x) -> Electronic(x))", "all x.(Iphone(x) -> Electronic(x))", "all x.(iphone(x) -> Electronic(x))", "all x.(Iphone(x) -> Electronic(x))", "all x.(Iphone(x) -> Electronic(x))", "all x.(iphone(x) -> Electronic(x))", "all x.(Iphone(x) -> Electronic(x))", "all x.(iPhone(x) -> Electronic(x))", "all x.(Iphone(x) -> Electronic(x))", "all x.((iPhone(x) & Electronic(x)) -> AvailableIn(x,y))", "all x.(Iphone(x) -> Electronic(x))", "all x.(Iphone(x) -> Electronic(x))", "all x.(iphone(x) -> Electronic(x))", "all x.(Iphone(x) -> Electronic(x))", "all x.(Iphone(x) -> Electronic(x))"]}
{"id": "folio_train_630", "nl": "Some phones are iPhones.", "fol": "exists x.(IsPhone(x) & IsIPhone(x))", "prediction": ["exists x.(Phone(x) & iPhone(x))", "exists x.(Phone(x) & iPhone(x))", "exists x.(Phone(x) & iPhone(x))", "exists x.(Phone(x) & iPhone(x))", "exists x.(Phone(x) & iPhone(x))", "exists x.(Phone(x) & iPhone(x))", "exists x.(Phone(x) & iPhone(x))", "exists x.(Phone(x) & iPhone(x))", "exists x.(Phone(x) & iPhone(x))", "exists x.(Phone(x) & iPhone(x))", "exists x.(Phone(x) & iPhone(x))", "exists x.(Phone(x) & iPhone(x))", "exists x.(Phone(x) & iPhone(x))", "exists x.(Phone(x) & iPhone(x))", "exists x.(Phone(x) & iPhone(x))", "exists x.(Phone(x) & iPhone(x))"]}
{"id": "folio_train_631", "nl": "No phones are electronic.", "fol": "-exists x.(IsPhone(x) & IsElectronic(x))", "prediction": ["There is no cell phone(s) & electronic(s))", "all x.(Phone(x) -> -Electronic(x))", "-exists x.(Phone(x) & Electronic(x))", "-exists x.(Phone(x) & Electronic(x))", "-exists x.(Phone(x) & Electronic(x))", "-exists x.(Phone(x) & Electronic(x))", "-exists x.(Phone(x) & Electronic(x))", "-exists x.(Phone(x) & Electronic(x))", "-exists x.(Phone(x) & Electronic(x))", "-exists x.(Phone(x) & Electronic(x))", "-exists x.(Phone(x) & Electronic(x))", "-exists x.(Phone(x) & Electronic(x))", "-exists x.(Phone(x) & Electronic(x))", "-exists x.(Phone(x) & Electronic(x))", "-exists x.(Phone(x) & Electronic(x))", "-exists x.(Phone(x) & Electronic(x))"]}
{"id": "folio_train_632", "nl": "Metropolitan Museum of Art is a museum in NYC.", "fol": "(IsMuseum(MetropolitanMuseumofArt) & LocatedInNYC(MetropolitanMuseumofArt))", "prediction": ["(MuseumIn(MuseumIn(Museum(Museum(Museum) & In(Museum(Museum)) -> MuseumIn(MuseumIn(Museum(Museum,NY))", "all x.(MuseumOfArt(x) -> Museum(x))", "all x y.((Museum(x) & Museum(y)) -> (InNYC(y) & InNYC(x,y)))", "all x.((MetropolitanMuseumOfArt(x) & MuseumInNYC)) -> StoresInNice.(x))", "all x.(Museum(x) -> LocatedIn(x,NewYork))", "all x.(MuseumOfArt(x) -> LocatedInChicago(x))", "all x.( MetropolitanMuseumOfArt(x) -> MuseumInNyc(x))", "(MuseumInNewYork(MuseumOfArt) & Operation(Museum(Museum(Museum) | Museum(Museum)))", "(MuseumInNewYork(Museum) & MuseumInNYC))", "(NewYork(Museum(Museum) & InNeb.(Museum.Museum(Museum) & InNec.(Museum,Museum,Contemporary))))", "all x y.((Museum(x) & MetropolitanMuseumOfArt(x) & MuseumIn(y)) -> LocatedIn(x,y))", "all x.(Museum(x) -> (Museum(x) & InNYC(x)))", "all x y z.((MeteodicalMuseum(x) & Art(y) & Museum(z)) -> (InNewYork(x,z) & InNJ(x,y)))", "(Museum(Museum) & inNJ(Museum) | Museum(Museum)))", "(museum(MuseumOfArt,NewYork) & In(Museum(Museum,NY))", "all x y z.((MetropolitanMuseumOfArt(x) & NYCMuseum(y) & Museum(z)) -> Museum(x,y,z))"]}
{"id": "folio_train_633", "nl": "Whitney Museum of American Art is a museum in NYC.", "fol": "(IsMuseum(WhitneyMuseumofAmericanArt) & LocatedInNYC(WhitneyMuseumofAmericanArt))", "prediction": ["all x.(WallisMuseumOfAmericanArt(x) -> MuseumInNYC(x))", "(MuseumInNYC) & the Whitney MuseumOfAmericanArt(w))", "all x.(WilliamOofAmericanArt(x) -> MuseumInNewYork(x))", "(MuseumInNYC(WhistleMuseumOfAmericanArt) & InNJ(WWHM))", "(Museum(William Whitney) & MuseumOfAmericanArt(William Whitney)) and is in NYC.", "all x.(WilliamsMuseumOfAmericanArt(x) -> Museu(x))", "all x.(WhitneyMuseumOfAmericanArt(x) -> MuseumInNashville(x))", "all x.((WhitneyMuseumOfAmericanArt(x) & MuseumIn(x,NewYork)) -> MuseumIn(x,NY))", "all x.((WilsonMuseumOfAmericanArt(x) & inNewYork(x)) -> MuseumInNewYork(x))", "all x y.((William Whitney Museum of AmericanArt(x) & New York(y)) -> MuseumIn(x,y))", "all x.((WhitneyMuseum(x) & AmericanArt(x)) -> LocatedInNYC(x))", "all x.(WilliamWalliamsOfAmericanArt(x) -> MuseumInNewYork(x))", "the Whitney MuseumOfAmericanArt(Museum,New York)", "all x.(WhitneyMuseumOfAmericanArt(x) -> MuseumInNewYork(x))", "(MuseumInNYC) & WhitneyMuseumOfAmericanArt(x))", "all x.((WhitneyMuseumOfAmericanArt(x) & MuseumInNewYork(x)) -> OperatesInNYC(x))"]}
{"id": "folio_train_634", "nl": "Museum of Modern Art (MoMA) is a museum if NYC. ", "fol": "(IsMuseum(MuseumofModernArt) & LocatedInNYC(MuseumofModernArt))", "prediction": ["all x.((MuseumOfModernArt(x) & (NYC(YC) | NYC(y))) -> Museum(x))", "(NewYork(MoMA,NY) & MuseumOfModernArt(MoMA,NY))", "all x.((MuseumOfModernArt(x) & Museum(x,Nyc)) -> Museum(x))", "all x y.((MuseumOfModernArt(x) & LocatedIn(x,y)) -> Museum(x,y))", "all x y.((Museum(x) & Museum(y) & NewYork(z) & ContemporaryArt(y)) -> Museum(x,yz))", "all x.((MuseumOfModernArt(x) & NYC(x)) -> Museum(x))", "all x.((MuseumOfModernArt(x) & Brooklyn(x)) -> Museum(x))", "all x.((Museum(x) & ModernArt(x) & NewYork(y)) -> Museum(x,y))", "all x y.((MuseumOfModernArt(x) & (NYC(y) | -NYC(y))) -> Museum(x,y))", "all x.(MuseumOfModernArt(x) -> Museum(x))", "(all x y.((Museum(x) & MoMA) & NYC(y)) -> Museum(x,y))", "all x.((MuseumOfModernArt(x) & Museum(x)) -> Manhattan(x))", "all x.((MuseumOfModernArt(x) & NewYork(y)) -> Museum(x,y))", "(MultipleCities(MoMA) & isn'tNewYork(MoMA))", "all x.(MuseumOfModernArt(x) -> MuseumOfNewYork(x))", "all x.(MuseumOfModernArt(x) & LocatedInNewYork(x))"]}
{"id": "folio_train_635", "nl": "Metropolitan Museum of Art includes Bytantine and Islamic Art. ", "fol": "(IncludesArt(MetropolitanMuseumofArt,ByzantineArt) & IncludesArt(MetropolitanMuseumofArt,IslamicArt))", "prediction": ["(Includes(MuseumOfArt,Bytantine) und Includes(MuseumOfArt,IslamicArt))", "(MuseumOfArt(Metropolitan) & IncludesBytantine(Metropolitan) & IncludesIslamicArt(Metropolitan))", "the New York MetropolitanMuseumOfArtIncludes(MinumentOfArt(Museum,Bytantine) & -Includes(Museum) & Includes(Museum,IslamicArt))", "(IncludesBytantine(MuseumOfArt) & IncludesIslamicArt(MuseumOfArt))", "all x.(MetropolitanMuseumOfArt(x) -> (IncludesBytantine(x) | IncludesIslamicArt(x)))", "(IncludesBytantine(Museum) & IncludesIslamicArt(Museum))", "(Includes(Meteod ofArt,Bytantine) | Includes(Meteod OfArt,IslamicArt)))", "(MuseumOfArt(Museum) & IncludesBytantine(Museum; IslamicArt(Museum))", "(IncludesBytantine(MuseumOfArt) & IncludesIslamicArt(MuseumOfArt))", "all x.(MovementOfArt(x) -> (ContainsBytantine(x) & IncludesIslamicArt(x)))", "all x.(MuseumOfArt(x) -> (IncludesBytantine(x) | IncludesIslamicArt(x)))", "(MuseumOfArt(MetropolitanMuseum) & IncludesBytantine(m) & IncludesIslamicArt(m))", "(CollectionsBytantineAndIslamicArt(Movement)", "(Includes(MuseumOfArt(Metropolitan) & Includes(MuseumOfArt(Bytantine) & Includes(MuseumOfArt(Metropolitan)))", "(Includes(MeteorologicalMuseumOfArt) & Bytantine(Museum) & IslamicArt(Museum))", "(IncludesBytantine(MuseumOfArt) & IncludesIslamicArt(MuseumOfArt))"]}
{"id": "folio_train_636", "nl": "Whitney Museum of American Art includes American art.", "fol": "IncludesArt(WhitneyMuseumofAmericanArt,AmericanArt)", "prediction": ["all x.((WilliamsMuseum(x) & AmericanArt(x)) -> Includes(x,AsianArt))", "all x.(WhitneyMuseumOfAmericanArt(x) -> IncludesAsianArt(x))", "all x.((WhitneyMuseumOfAmericanArt(x) & IncludesAmericanArt(x)) -> IncludesAmericanArt(x))", "all x.(WhitneyMuseumOfAmericanArt(x) -> IncludesAmericanArt(x))", "all x y.((WhichHouse(x) & WhitneyMuseumOfAmericanArt(y)) -> IncludesAmericanArt(x,y))", "all x.((WhitneyMuseum(x) & AmericanArt(y)) -> Includes(x,y))", "(CompanionsArt(WhitneyMuseumOfAmericanArt) -> IncludesArt(WhitneyMuseumOfAmericanArt))", "All x y.((WhitneyMuseum(x) & AmericanArt(y)) -> Includes(x,y))", "all x.(WhitneyMuseum(x) -> AmericanArt(x))", "all x.((WhitneyMuseumOfAmericanArt(x) & IncludesAmericanArt(x)) -> IncludesArt(x))", "all x.((WhitneyMuseumOfAmericanArt(x) & AmericanArt(x)) -> Includes(x))", "all x.(WhitneyMuseum(x) -> IncludesAmericanArt(x))", "all x.((HoneyMuseumOfAmericanArt(x) & IncludesAmericanArt(x)) -> IncludesAmericanArt(x))", "all x.((WhitneyMuseumOfAmericanArt(x) & IncludesAmericanArt(x)) -> IncludesCanadianArt(x))", "(IncludesArt(WilliamsMuseum(X) & AmericanArt(x))", "all x.((WHOA(x) & IncludesAmericanArt(x)) -> WhitneyMuseumOfAmericanArt(x))"]}
{"id": "folio_train_637", "nl": "A museum in NYC includes Byzantine and Islamic Art.", "fol": "exists x.(IsMuseum(x) & LocatedInNYC(x) & IncludesArt(x,ByzantineArt) & IncludesArt(x,IslamicArt))", "prediction": ["all x.(NJMuseum(x) -> (IncludesByzantineArt(x) & IncludesIslamicArt(x)))", "all x y.((Museum(x) & InNYC(x) & ByzantineArt(y)) -> IslamicArt(y))", "all x.(Museum(x) -> (IncludesByzantineArt(x) & IncludesIslamicArt(x)))", "all x y.((Museum(x) & InNYC(y)) -> (ContainsByzantineArt(x) | IncludesIslamicArt(x)))", "all x.((Museum(x) & InInc.(NYC)) -> (ByzantineArt(x) | IslamicArt(x)))", "all x y.((Museum(x) & NYC(y)) -> (ByzantineArt(x) & IslamicArt(x)))", "all x.(Museum(x) -> (IncludesByzantineArt(x) & IncludesIslamicArt(x)))", "all x.(Museum(x) -> (IncludesByzantineArt(x) & IncludesIslamicArt(x)))", "all x y z.((Museum(x) & In(x,y) & New York(z)) -> (IncludesByzantineArt(x) & IncludesIslamicArt(x)))", "all x.(Museum(x) -> (IncludesBiancanArt(x) | IncludesIslamicArt(x)))", "exists x.(Museum(x) & In(x,NY) & ByzantineArt(x) & IslamicArt(x))", "all x.((Museum(x) & In(x,NY)) -> (ContainsByzantineArt(x) | IncludesIslamicArt(x)))", "all x.((Museum(x) & InNYC(x) & ByzantineArt(x) & IslamicArt(x)) -> Includes(x))", "all x.(Museum(x) -> (InjectsByzantineArt(x) & IncludesIslamicArt(x)))", "all x.((TouchMuseum(x) & (ByzantineArt(x) | IslamicArt(x))) -> Includes(x,y))", "all x.(Museum(x) -> (IncludesByzantineArt(x) & IncludesIslamicArt(x)))"]}
{"id": "folio_train_638", "nl": "A museum in NYC includes American art.", "fol": "exists x.(IsMuseum(x) & LocatedInNYC(x) & IncludesArt(x,AmericanArt))", "prediction": ["all x y.((Museum(x) & Museum(y)) -> IncludesAmericanArt(x,y))", "all x y.((Museum(x) & LocatedIn(x,NewYork)) -> IncludesAmericanArt(x))", "all x.(Museum(x) -> IncludesAmericanArt(x))", "all x.((Museum(x) & In(x,Y) & NYC) -> IncludesAmericanArt(x))", "all x y.((Museum(x) & NewYork(y)) -> IncludesAmericanArt(x,y))", "all x.((Museum(x) & InNewYork(x)) -> IncludesAmericanArt(x))", "all x y z.((Museum(x) & NYC(y) & AmericanArt(z)) -> IncludesInMuseum(x,y,z))", "all x y.((Museum(x) & (NKE) | NewYork))) -> IncludesAmericanArt(x,y))", "all x y.((Museum(x) & Museum(y)) -> IncludesAmericanArt(x,y))", "all x.((Museum(x) & InNYC(x)) -> IncludesAmericanArt(x))", "all x.((Museum(x) & InNYC(x)) -> IncludesAmericanArt(x))", "all x y.((Museum(x) & City(y)) -> IncludesAmericanArt(x,y))", "all x y.((Museum(x) & NYC(y)) -> IncludesAsianArt(x))", "all x.(Metahome(x) & InNewYork(x))", "all x.((Museum(x) & InNewYork(x)) -> IncludesArt(x))", "exists x.(Museum(x) & In(x,NY) & IncludesAmericanArt(x))"]}
{"id": "folio_train_639", "nl": "A museum in NYC includes Greek art.", "fol": "exists x.(IsMuseum(x) & LocatedInNYC(x) & IncludesArt(x,GreekArt))", "prediction": ["all x.((Museum(x) & InNashville(x)) -> IncludesGreekArt(x))", "all x.((Museum(x) & InNYC(x)) -> IncludesGreekArt(x))", "all x.((Museum(x) & NewYork(y)) -> IncludesGreekArt(x))", "all x y.((Museum(x) & NYC(y)) -> IncludesGreekArt(x,y))", "all x.(NewYork(x) -> IncludesGreekArt(x))", "exists x.(Museum(x) & InNYC(x))", "all x.((Museum(x) & In(x,y)) -> IncludesGreekArt(x))", "all x.((Museum(x) & InNewYork(x)) -> IncludesGreekArt(x))", "all x y.((Museum(x) & NewYork(y)) -> IncludesGreekArt(x,y))", "all x.((Museum(x) & InNYC(x)) -> IncludesGreekArt(x))", "all x.((Museum(x) & In(x,y) & NYC)) -> IncludesGreekArt(x))", "all x.(Museum(x) & InNYC(x) -> IncludesGreekArt(x))", "all x.((Museum(x) & In(x,NY,NY)) -> IncludesGreekArt(x))", "exists x.(Museum(x) & InNewYork(x))", "all x.((MuseumInNYC) & GreekArt(x)) -> Includes(x))", "all x.((Museum(x) & In(x,NY)) -> IncludesGreekArt(x))"]}
{"id": "folio_train_640", "nl": "A person either likes eating cheese or is a francophile.", "fol": "all x.(LikesEatingCheese(x) | IsFrancophile(x))", "prediction": ["all x.(Person(x) -> (LikesEatingCheese(x) | Francophile(x)))", "exists x.(Person(x) & (LikesEatingCheese(x) | Francophile(x)))", "all x.(Francophile(x) -> (LovesEatingCheese(x) | Francophile(x)))", "all x.(Person(x) -> (LikesEatingCheese(x) | Francophile(x)))", "exists x.(Person(x) & (AlikesEatingCheese(x) | Francophile(x)))", "all x.(Person(x) -> (LikesEatingCheese(x) | Francophile(x)))", "exists x.(Person(x) & (LikesEatingCheese(x) | Francophile(x)))", "all x.(Person(x) -> (LikesEatingCheese(x) | Francophile(x)))", "exists x.(Person(x) & (LikesEatingSchaese(x) | Francophile(x)))", "all x.(Person(x) -> (LikesEatingCheese(x) | Francophile(x)))", "exists x.(Person(x) & (LikesEatingCheese(x) | Francophile(x)))", "all x.((Person(x) & LikesEatingCheeks(x)) | Francophile(x))", "all x.(Person(x) -> (LikesEatingCheese(x) | Frankophile(x)))", "exists x.(Person(x) & (LikesEatingCheese(x) | Francophile(x)))", "exists x.(Person(x) & (LikesEatingCheese(x) | Frankophile(x)))", "all x.(Person(x) -> (LikesEatingCheese(x) | Francophile(x)))"]}
{"id": "folio_train_641", "nl": "No francophiles are people who like Spain as their favorite country.", "fol": "all x.(IsFrancophile(x) -> -LikesSpainAsFavorite(x))", "prediction": ["all x y.((Francophile(x) & (Likes(x,y) | FavoriteLand(x))) -> -FavoriteLower(x,y))", "-exists x.(Francophile(x) & Likes(x)) -> Spain(x))", "-all x.(Francophile(x) -> LikesSpanish(x))", "-exists x.(Francophile(x) & People(x) & LikesSpanish(x))", "-exists x.(Francophile(x) & Likes(x,Spain))", "all x.(Francophile(x) -> -LikesSpanish(x))", "all x.(Francophile(x) -> NobodyLikesSpanish(x))", "-exists x.(Francophile(x) & LikesSpain(x))", "all x.(Francophile(x) -> -People(x) & LikesSpanishAsFavoriteCountry(x))", "-exists x.(Francophile(x) & LikesSpanish(x))", "all x.(Francophile(x) -> NoLikesSpanish(x))", "-exists x.(Franciophile(x) & Likes(x,Spanish))", "-exists x.(Francophile(x) & Likes(x,Spanien))", "-(Francophile(x) & LikesSpain(x)))", "all x.(Francophile(x) -> -LikesSpanish(x))", "-exists x.(Francophile(x) & Likes(x,Canada))"]}
{"id": "folio_train_642", "nl": "A person likes Spain as their favorite country or likes eating cheese.", "fol": "all x.(LikesSpainAsFavorite(x) | LikesEatingCheese(x))", "prediction": ["all x.((Person(x) & (Likes(x,Spanish) & FavoriteCountry(x,Spanish)) | LikesEating(x,Cheese))) -> Likes(x,Spanish))", "all x.(Personal(x) -> (likesSpania(x) | LikesEatingCheese(x)))", "all x.(Person(x) -> (FavoriteSpain(x) | LikesEatingCheese(x)))", "all x.(Person(x) -> (likesSpania(x) | LikesEatingCheese(x)))", "all x.(Person(x) & ((LovesSpanish(x) | LikesEatingCheese(x))) -> FavoriteCountry(x)))", "all x.(LikesSpanish(x) | LikesEatingCheese(x))", "all x.((Popular(x) & (LikesSpanish(x) | LikesEatingShew(x))) -> FavoriteCountry(x))", "exists x.(Person(x) & ((LikesSpanish(x) & FavoriteCountry(x)) | (LikesEatingCheese(x)))))", "all x.(Person(x) -> (LikesSpain(x) | LikesEatingCheese(x)))", "all x.(Person(x) -> (LikesSpanish(x) | LikesEatingChew(x)))", "exists x.(Person(x) & ((LastPatrol(x,Spanish)) | LikesEatingCheese(x,Glacier))))", "exists x.(Person(x) & ((LovesSpanish(x) | LikesEatingCheese(x))) -> Likes(x,Spanish)))", "exists x.(Person(x) & (Likes(x,Spain) | Likes(x,EatsCheese)))", "exists x.(Person(x) & (Likes(x,Spain) & FavoriteCountry(x)) | Likes(x,cheese)))", "all x.(Meets(x,(Person(x) & (likes(x,Spanish) | Likes(x,Cheese))) -> (FavoriteCountry(x) | Likes(x,China))))", "exists x.(Person(x) & (Likes(x,Spain) | Likes(x,Eats(x,Cheese))))"]}
{"id": "folio_train_643", "nl": "Benji is not a person who likes eating cheese and a person who studies Spanish.", "fol": "-(LikesEatingCheese(Benji) & StudiesSpanish(Benji))", "prediction": ["(-(WhoLikesEatingCheese(Benji) & CanStudySpanish(Benji)) -> -LikesEatingCheese(Benji))", "(-(LikesEatingCheese(Benji) & -LikesEducatingSpanish(Benji)) & -(LikesEatingCheese(Benji) & StudiesSpanish(Benji)))", "all x.(Benji(x) -> (-LikesEatingCheese(x) & -StudiesSpanish(x)))", "(-(People(Benji) & LikesEatingCheese(Benji)) & People(Benji) & StudiesSpanish(Benji))", "(all x.(Benji(x) -> (-IsLazyEatingCheese(x) & StudiesSpanish(x))))", "all x.(Benji(x) -> (-likesEatingCheese(x) & -StudiesSpanish(x)))", "all x.(Person(x) & -(LikesEatingCheese(x) & LikesStudyingSpanish(x))) -> Benji(x))", "(-(LikesEatingCheese(Benji) & -LikesEatingCheese(Benji)) | (LikesEatingCheese(Benji) & StudyesSpanish(Benji))))", "(-alikesEatingCheese(a) & -likesSpanish(a))", "(-(Person(Benji) & LikesEatingCheese(Benji)) | (Person(Benji) & StudySpanish(Benji))))", "all x.(Benji(x) -> (-LovesEatingCheese(x) & -StudiesSpanish(x)))", "(-(LikesEatingChevre(Benji) & LikesStudyingSpanish(Benji)) -> -LikesEatingCheese(Benji))", "(-(Person(Benji) & LikesEatingCheese(benji)) & -Person(Benji) & StudiesSpanish(benji))", "all x.(Benji(x) -> (-LikesEatingShakespeare(x) & -LikesStudyingSpanish(x)))", "all x.(Benji(x) -> (-LikesEatingCheese(x) & -LikesStudyingSpanish(x)))", "none. (Benji(x) -> (-LikesEatingCheese(x) & NoPerson(x) & StudiesSpanish(x)))"]}
{"id": "folio_train_644", "nl": "If Benji is neither a person who studies Spanish nor a person that studies French, then Benji is a person who studies Spanish or a person that studies French.", "fol": "(-(StudiesSpanish(Benji) | StudiesFrench(Benji)) -> (StudiesSpanish(Benji) | StudiesFrench(Benji)))", "prediction": ["all x.((Benji(x) & -(StudiesSpanish(x) | StudiesFrench(x))) -> (StudiesSpanish(x) | StudiesFrench(x)))", "all x.((Person(x) & -(StudiesSpanish(x) | StudiesFrench(x))) -> (StudiesSpanish(x) | StudiesFrench(x)))", "all x.((Person(x) & -(StudiesSpanish(x) | StudiesFrench(x))) -> (StudiesSpanish(x) | StudiesFrench(x)))", "all x.((Person(x) & -(StudiesSpanish(x) | StudiesFrench(x))) -> (StudiesSpanish(x) | StudiesFrench(x)))", "all x.((Person(x) & -StudiesSpanish(x) & -StudiesFrench(x)) -> (StudiesSpanish(x) | StudiesFrench(x)))", "all x.((Benji(x) & -(StudiesSpanish(x) | StudiesFrench(x))) -> (StudiesSpanish(x) | StudiesFrench(x)))", "all x.((Person(x) & -StudiesSpanish(x) & -StudiesFrench(x)) -> (StudiesSpanish(x) | StudiesFrench(x)))", "all x.((Person(x) & -(StudiesSpanish(x) | StudiesFrench(x))) -> (StudiesSpanish(x) | StudiesFrench(x)))", "all x.((Person(x) & -(StudiesSpanish(x) | StudiesFrench(x))) -> (StudiesSpanish(x) | StudiesFrench(x)))", "all x.((Person(x) & -(StudiesSpanish(x) | StudiesFrench(x))) -> (StudiesSpanish(x) | StudiesFrench(x)))", "all x.((Benji(x) & -(StudiesSpanish(x) | StudiesFrench(x))) -> (StudiesSpanish(x) | StudiesFrench(x)))", "all x.((Person(x) & -(StudiesSpanish(x) | StudiesFrench(x))) -> (StudiesSpanish(x) | StudiesFrench(x)))", "all x.((Person(x) & -(StudiesSpanish(x) | StudiesFrench(x))) -> (StudiesSpanish(x) | StudentsFrench(x)))", "all x.((Person(x) & -(StudiesSpanish(x) | StudiesFrench(x))) -> (StudiesSpanish(x) | StudiesFrench(x)))", "all x.((Person(x) & -(StudiesSpanish(x) | StudiesFrench(x))) -> (StudiesSpanish(x) | StudiesFrench(x)))", "all x.((Person(x) & -(StudiesSpanish(x) | StudiesFrench(x))) -> (StudiesSpanish(x) | StudiesFrench(x)))"]}
{"id": "folio_train_645", "nl": "Benji is a person who likes eating cheese.", "fol": "LikesEatingCheese(Benji)", "prediction": ["Benji likesEatingCheese(Benji)", "-AlikesEatingCheese(Benji)", "(LikesEatingEggs(Benji) & Cheese(Benji))", "all x.((Benji(x) & LikesEatingCheese(x)) -> Likes(x))", "(LikesEatingCheese(Benji))", "(MeetsCheese(Benji) & LikesCheese(Benji))", "-LikesEatingCheese(Beny)", "all x.(Friend(x) -> LikesEatingCheese(x))", "(LikesEating(Benji) & Cheese(Benji))", "benji.(Person(x) & LovesEatingCheese(x))", "Benji is a Person who LikesEatingCheese(Benji)", "(LikesEatingCheese(Benji) -> LikesEatingCheese(Benji))", "Benji is person who likesEatingCheese(Benji,EatsCheese(Benji,EnjoysEatingCheeses(Benji,EatsCheese(Benji,EatingCheese))", "all x.(Benji(x) -> LikesEatingCheese(x))", "(MeetsCheese(Benji) & IsIs(Benji))", "all x.((Person(x) & LikesEatingCheese(x)) -> Benji(x))"]}
{"id": "folio_train_646", "nl": "If Benji is either a person who likes eating cheese or a francophile, then Benji is neither a person who studies Spanish nor a person who studies French.", "fol": "((LikesEatingCheese(Benji) | IsFrancophile(Benji)) -> (-StudiesSpanish(Benji) & -StudiesFrench(Benji)))", "prediction": ["all x.((Person(x) & (LikesEatingCheese(x) | Francophile(x))) -> (-StudiesSpanish(x) | StudiesFrench(x))))", "all x.((Person(x) & LikesEatingSheep(x)) | (Person(x) & Frenchophile(x))))", "all x.((Person(x) & LikesEatingCheese(x)) | (Francophile(x) & -StudiesSpanish(x) | StudiesFrench(x))))", "all x.((Benji(x) & (LikesEatingCheese(x) | Fracophile(x))) -> (-StudiesSpanish(x) | StudiesFrench(x)))", "all x.((Person(x) & (LikesEatingCheese(x) | Francophile(x))) -> (-StudiesSpanish(x) | StudiesFrench(x)))", "all x.((Benji(x) & (LikesEatingCheese(x) | IsFrancophile(x))) -> (-StudiesSpanish(x) & -StudiesFrench(x)))", "all x.((Person(x) & LikesEatingCheese(x) | Frocophile(x)) -> (-(StudiesSpanish(x) | StudiesFrench(x))))", "all x y.((Person(x) & Benji(x) & LikesEatingCheese(x) & Francophile(x)) -> (-StudiesSpanish(x) | StudiesFrench(x)))", "all x.((Person(x) & (LikesEatingSheese(x) | -EnglishStudies(x))) -> (Benji(x) | FrenchStudent(x)))", "all x.((Benji(x) & (LikesEatingCheese(x) | Francophile(x))) -> (-(StudiesSpanish(x) | StudiesFrench(x))))", "all x.((Person(x) & LikesEatingCarew(x)) | Frenchophile(x)) -> (-StudiesSpanish(x) | StudiesFrench(x)))", "all x.((Person(x) & (LikesEatingCheese(x) | Frankophile(x))) -> (-StudiesSpanish(x) & -StudiesFrench(x)))", "all x.((Person(x) & (LikesEating(x,cheese) | Freecophile(x))) -> (-StudesSpanish(x) | StudiesFrench(x)))", "all x.((Person(x) & LikesEatingCheese(x)) | (Fracophile(x) & -SelectsSpanish(x))))", "all x.((Person(x) & (LovesEatingCheese(x) | Francophile(x))) -> (ClausesSpanish(x) | StudiesFrench(x)))", "all x.((Person(x) & (LikesEatingCheese(x) | Francophile(x))) -> (-StudiesSpanish(x) | -StudiesFrench(x)))"]}
{"id": "folio_train_647", "nl": "If Benji is a person who likes Spain as their favorite country or studies French, then Benji is either a person who studies Spanish or a person who likes Spain as their favorite country.", "fol": "((LikesSpainAsFavorite(Benji) | StudiesFrench(Benji)) -> (StudiesSpanish(Benji) | LikesSpainAsFavorite(Benji)))", "prediction": ["all x.((Person(x) & (likesSpanish(x) | StudiesFavoriteCountry(x))) -> (StudiesSpanish(x) | LikesSpanish(x)))", "all x.((Person(x) & (LikesSpanish(x) | StudiesFavorite(x))) -> (StudiesSpanish(x) | LikesSpanish(x)))", "all x.((Person(x) & (LikesSpanishAsFavorite(x) | StudiesFrench(x))) -> (StudiesSpanish(x) | LikesSpanishAsFavorite(x)))", "all x.((Person(x) & (LikesSpain(x) | StudiesFavouriteCountry(x))) -> (StudiesSpanish(x) | LikesSpanish(x)))", "all x.((Person(x) & (LikesSpanish(x) | StudiesFavoriteCountry(x))) -> (StudiesSpanish(x) | LikesSpanish(x)))", "all x.((Person(x) & (LikesSpanish(x) | StudiesFavouriteCountry(x))) -> (StudiesSpanish(x) | LikesSpanish(x))))", "all x.((Person(x) & (LikesSpanish(x) | StudiesFavouriteCountry(x))) -> (EducatesSpanish(x) | LikesSpanish(x)))", "all x.((Person(x) & (LikesSpanish(x) | StudiesFavoriteCountry(x))) -> (StudiesSpanish(x) | LikesSpanish(x)))", "all x.((Person(x) & (LikesSpanish(x) | StudyesFavoriteCountry(x))) -> (StudiesSpanish(x) | LikesSpanish(x)))", "all x.((Person(x) & (LikesSpanish(x) | StudiesFavouriteCountry(x))) -> (SupportsSpanish(x) | LikesSpanish(x)))", "all x.((WhoLikesSpanish(x) | WhoStudiesFavoriteCountry(x)) -> (StudiesSpanish(x) | LikesSpanish(x)))", "all x.((Person(x) & (LovesSpanish(x) | StudiesFavorite(x))) -> (StudiesSpanish(x) | LikesSpanish(x)))", "all x.((Person(x) & LikesSpanish(x) (popularCountry(x) | LikesFavoriteCountry(x))) -> (StudiesSpanish(x) | LikesBavoriteCountry(x)))", "all x.((Person(x) & (LikesSpanishAsFavoriteCountry(x) | LikesFavoriteCountry(x))) -> (StudiesSpanish(x) | LikesSpanishAsFavoriteCountry(x)))", "all x.((Person(x) & (LikesSpanish(x) | StudiesFavoriteCountry(x))) -> (StudiesSpanish(x) | LikesSpanish(x)))", "all x.((Person(x) & (LikesSpainAsFavoriteCountry(x) | StudiesFrench(x))) -> (StudiesSpanish(x) | LikesSpainAsFavoriteCountry(x)))"]}
{"id": "folio_train_648", "nl": "Gasteren is village located in the province of Drenthe.", "fol": "(IsVillage(Gasteren) & IsProvince(Drenthe) & LocatedInProvince(Gasteren,Drenthe))", "prediction": ["all x.(Gasteren(x) -> Village(x))", "all x.(Gastreren(x) -> Village(x))", "Gasteren is village located in the province of Drenthe.", "In the provincial of Drenthe, Gasteren exists x.(Village(x) & LocatedInDrenthe(x))", "Gasteren (Dorne(Gasse) & InProvince(Gasse))", "LocatedInDrenthe(Gathered)", "all x.(Gast\u00e9ren(x) -> VillageNearDreenthe(x))", "exists x.(Village(x) & LocatedInProvince(x,Dreenthe))", "Gasteren, NL.DreentheProvince(gasp)", "Gasteren(village)", "all x.(Gasteren(x) -> VillageInProvinceOfDrenthe(x))", "Gasteren (Dorne(G\u00e4steren))", "all x.(G\u00e4steren(x) -> VillageLocatedInProvince(x))", "Die Gemeinde Gasteren liegt in Drenthe.", "Gasteren (Dornen) - Village(d) - DrentheProvince(d))", "Gasteren is village located in Drenthe."]}
{"id": "folio_train_649", "nl": "Drenthe is a Dutch province. ", "fol": "(IsProvince(Drenthe) & IsDutchProvince(Drenthe))", "prediction": ["Drenthe is a DutchProvince.", "(HollandProvince(Drenthe,Drenemen))", "(DutchForest(Drenthe) & DutchProvince(Drenthe,Dutch))", "-Purpose(Drenthe)", "(DutchProvince(Drenthe) & FrenchProvince(Drenthe))", "Drenthe (DutchProvince)", "Drenthe is DutchProvince.", "all x.(Drenthe(x) -> DutchProvince(x))", "Drenthe (Niederl\u00e4ndischeProvince)", "Drenthe (DutchProvince)", "all x y.((Denthe(x) & DutchProvince(y)) -> HahnVon(x,y))", "all x.(Drenthe(x) -> DutchProvince(x))", "(DeepHollandProvince(Drenthe) & Dutch(Drenthe))", "(DutchProvince(drenthe)", "Drenthe (DutchProvince)", "(DutchProvince(Drenthe) & DutchProvince(Drenthe))"]}
{"id": "folio_train_650", "nl": "No cities are villages.", "fol": "all x.(IsCity(x) -> -IsVillage(x))", "prediction": ["-exists x.(City(x) & Village(x))", "-exists x.(City(x) & Village(x))", "-exists x.(City(x) & Village(x))", "-exists x.(City(x) & Village(x))", "-exists x.(City(x) & Village(x))", "-exists x.(City(x) & Village(x))", "-exists x.(City(x) & Village(x))", "-exists x.(City(x) & Village(x))", "-exists x.(City(x) & Village(x))", "-exists x.(City(x) & Village(x))", "-(City(c) & Village(d))", "-exists x.(City(x) & Village(x))", "-exists x.(City(x) & Village(x))", "-exists x.(City(x) & Village(x))", "-exists x.(City(x) & Village(x))", "-exists x.(City(x) & Village(x))"]}
{"id": "folio_train_651", "nl": "The population of a village in Drenthe was 155 people.", "fol": "exists x.(HasPopulation155(x) & IsVillage(x) & LocatedInProvince(x,Drenthe))", "prediction": ["has population, 155.", "all x y.((VillageInDrenthe(x) & VillageInDrenthe(y)) -> Population(x,155))", "all x.((Dorden(x) & Village(x)) -> Population(x,155))", "all x y.((Dormand(x) & Village(y) & InDenthe(x,y)) -> Population(x,y))", "all x y.((Dominion(x) & Village(y) & Drenthe(y)) -> Population(x,155))", "all x y z.((Dorf(x) & Village(y) & District(z) & Drenthe(x) & Population(y,x)) -> Population(x,y,z))", "all x y.((Dornach(x) & Village(y)) -> Population(x,150))", "all x y.((Destination(x) & Village(y)) -> Population(x,y))", "all x y z.((Dorset(x) & Village(y) & Village(z) & InDrenthe(y,x)) -> Population(x,y,z))", "all x.((DorntheDestination(x) & Urban(y)) -> Population(x,155))", "all x.((Dormant(x) & Village(x) & Drenthe(x)) -> Population=155(x))", "all x.((Destination(x) & Village(x) & Drenthe(x)) -> PopulationAbout(x,155))", "all x y.((Dorm(x) & Village(y)) -> Population(x,155))", "all x y.((Dorden(x) & Village(y)) -> Population(x,156))", "all x.(Destination(x) -> Population(x))", "all x y z.((Dorne(x) & Village(y) & Village(z) & InDrenthe(z)) -> Population(x,155))"]}
{"id": "folio_train_652", "nl": "Gasteren is a Dutch village.", "fol": "(IsVillage(Gasteren) & IsDutchProvince(Gasteren))", "prediction": ["all x.(Galleren(x) -> DutchDorf(x))", "(DutchDistrict(Gasteneren) & LocatedIn(Gasteneren))", "all x.(G\u00e4steren(x) -> DutchDork(x))", "all x.(Gastenen(x) -> DutchDorf(x))", "(DutchDorf(Gasteren,Dreamland))", "all x.(Gasten(x) -> DutchDorf(x))", "(DutchDorf(Gastaren) & DutchDorf(Gastaren))", "(HollandVillage(Gstangeren) & Dutch(Gstangeren))", "all x.(Gastaren(x) -> DutchDorf(x))", "(Dorf(Gaesteren) & Dutch(Gallery))", "Gasteren (Niederl\u00e4ndischeVillage)", "Gasteren is a DutchDorf((Gasteren))", "all x.(Gasten(x) -> DutchVillage(x))", "all x.(HollandVillage(x) -> Gasteren(x))", "all x.(Gasteren(x) -> DutchDorf(x))", "all x.(Gasteren(x) -> DutchVillage(x))"]}
{"id": "folio_train_653", "nl": "Gasteren is a city.", "fol": "IsCity(Gasteren)", "prediction": ["Gasteren ist eine Stadt.", "all x.(Gasteren(x) -> City(x))", "Gasteren (City(G\u00e4steren) & FoundedIn(Gesteren,Germany))", "(City(Gosteren) & City(Gesteren))", "(City(Gasteren) & City(Gasteren))", "all x.(Gasteren(x) -> City(x))", "all x.(Gastheren(x) -> City(x))", "all x.(Gstangeren(x) -> City(x))", "All x.(Touren(x) -> City(x))", "Gasteren (City)", "Gasteren ((City(Gesteren)) -> City(g))", "all x.(Gastroeren(x) -> City(x))", "all x.(Gasteren(x) -> City(x))", "all x.(Gasteren(x) -> City(x))", "Gasteren (City(Gasthener))", "(City(Gasteneren) -> City(Gasteren))"]}
{"id": "folio_train_654", "nl": "Gasteren has a population of 155.", "fol": "Population(Gasteren,155)", "prediction": ["Der Gasteren-Gastren-Population(g) -(PopulationAt(g,155) & Landowner(h)))", "all x y z.((Gastheeren(x) & Population(y) & Population(z)) -> (Population(x,y,z) | Population(x,y,z)))", "all x.(Gasteren(x) -> Population(x,155))", "all x.(G\u00e4steren(x) -> Population(x,155))", "Gasteren is a town in northern Norway.", "Leider exists x.(Gasteren(x) & Population(x,155))", "(Population(Gasseren,155))", "ALL x.(Gasteren(x) -> Population(x,155))", "(Population(Gasteren,155))", "all x.(GasTeren(x) -> Population(x,155))", "all x y.((Gastroeren(x) & Population(y,156)) -> Has(x,y))", "all x.(Gastroen(x) -> Population(x,155))", "all x.(GasTheren(x) -> PopulationTogether(x,155))", "all x.(Gasseren(x) -> Population(x,155))", "Located in Saxony, Gasteren is a small town based within the Province of Gasterien.", "all x.(Gastroeren(x) -> LivesIn(x,155))"]}
{"id": "folio_train_655", "nl": "The only types of mammals that lay eggs are platypuses and echidnas.", "fol": "all x.((IsMammal(x) & LaysEgg(x)) -> (IsPlatypus(x) | IsEchidna(x)))", "prediction": ["all x.((Mammal(x) & Platte(x)) | Echidna(x))", "all x y.((Mammal(x) & Mammal(y)) -> LayLeafsEggs(x,y))", "all x.((Mammal(x) & LaysEggs(x)) -> (Plutus(x) | Echidna(x)))", "all x.((Mammal(x) & LaysEggs(x)) -> (Plutypuse(x) | Echidna(x)))", "all x.(LaysEggs(x) -> (Plactus(x) | Echidna(x)))", "all x.((Mammal(x) & LaysEggs(x)) -> (Plotypus(x) | Echidna(x)))", "all x.((Mammal(x) & LaysEggs(x)) -> (Plutypus(x) | Echidna(x)))", "all x.((Mammal(x) & LaysEggs(x)) -> (Plactus(x) | Elchidna(x)))", "all x.((Mammal(x) & LaysEggs(x)) -> (Plumbus(x) | Echidna(x)))", "all x.(BulliesEggs(x) -> (Plutoupes(x) | Echidnas(x)))", "all x.((Mammal(x) & LaysEggs(x)) -> (Plutypuse(x) | Echidna(x)))", "all x.((Mammal(x) & LaysEggs(x)) -> (Plutus(x) | Echidna(x)))", "all x.((Mammal(x) & LaysEggs(x)) -> (Plarkituse(x) | Echidna(x)))", "all x.((Mammal(x) & LaysEggs(x)) -> (Plutus(x) | Echidna(x)))", "all x.((Mammal(x) & LaysEggs(x)) -> (Plutypus(x) | Echidna(x)))", "all x.((Mammal(x) & LaysEggs(x)) -> (Polyptus(x) | Echidna(x)))"]}
{"id": "folio_train_656", "nl": "Platypuses are not hyrax.", "fol": "all x.(IsPlatypus(x) -> -IsHyrax(x))", "prediction": ["all x.(Platypus(x) -> -Hyrax(x))", "all x.(Platypuse(x) -> -Hyrax(x))", "all x.(Plarge(x) -> -Hyrax(x))", "all x.(Platyptus(x) -> -Hyrax(x))", "all x.(Platypus(x) -> -Hyrax(x))", "all x.(Palamus(x) -> -Hyrax(x))", "all x.(Plavix(x) -> -Hyrax(x))", "all x.(Plactus(x) -> -Hyrax(x))", "all x.(Plactetus(x) -> -Hyrax(x))", "all x.(Lactopus(x) -> -Hyrax(x))", "all x.(Plactus(x) -> -Hyrax(x))", "all x.(Platypus(x) -> -Hyrax(x))", "all x.(Plactus(x) -> -Hyrax(x))", "all x.(Lamb(x) -> -Hyrax(x))", "all x.(Plaktus(x) -> -Hyrax(x))", "all x.(Plactus(x) -> -Hyrax(x))"]}
{"id": "folio_train_657", "nl": "Echidnas are not hyrax.", "fol": "all x.(IsEchidna(x) -> -IsHyrax(x))", "prediction": ["all x.(Echidna(x) -> -Hyrax(x))", "all x.(Echidna(x) -> -Hyrax(x))", "all x.(Echidna(x) -> -Hyrax(x))", "all x.(Echidna(x) -> -Hyrax(x))", "all x.(Echidna(x) -> -Hyrax(x))", "all x y.((Echidna(x) & Hyrax(y)) -> -Hyrax(x,y))", "all x.(Echidna(x) -> -Hyrax(x))", "all x.(Echidna(x) -> -Hyrax(x))", "all x.(Echidna(x) -> -Hyrax(x))", "all x.(Echidna(x) -> -Hyrax(x))", "all x.(Echidna(x) -> -Hyrax(x))", "all x.(Echidna(x) -> -Hyrax(x))", "all x.(Echidna(x) -> -Hyrax(x))", "ALL x.(Echidna(x) -> -Hyrax(x))", "all x.(Echidna(x) -> -Hyrax(x))", "all x.(Echidna(x) -> -Hyrax(x))"]}
{"id": "folio_train_658", "nl": "No mammals are invertebrates.", "fol": "all x.(IsMammal(x) -> -IsInvertebrate(x))", "prediction": ["-exists x.(Mammal(x) & Invertebrate(x))", "-exists x.(Mammal(x) & Invertebrate(x))", "all x.(Mammals(x) -> -Invertebrate(x))", "-exists x.(Mammal(x) & Invertebrate(x))", "-exists x.(Mammal(x) & Invertebrate(x))", "-exists x.(Mammal(x) & Invertebrate(x))", "-exists x.(Mammal(x) & Invertebrate(x))", "-exists x.(Mammal(x) & Invertebrate(x))", "all x.(Mammal(x) -> -Invertebrate(x))", "-exists x.(Mammal(x) & Invertebrate(x))", "all x.(Mammal(x) -> -Invertebrate(x))", "-exists x.(Mammal(x) & Invertebrate(x))", "all x.(Mammal(x) -> -Invertebrate(x))", "-exists x.(Mammal(x) & Invertebrate(x))", "-exists x.(Mammal(x) & Invertebrate(x))", "-exists x.(Mammal(x) & Invertebrate(x))"]}
{"id": "folio_train_659", "nl": "All animals are either vertebrates or invertebrates.", "fol": "all x.(((IsAnimal(x) -> IsInvertebrate(x)) & -IsVertebrate(x)) | (-(IsAnimal(x) -> IsInvertebrate(x)) & IsVertebrate(x)))", "prediction": ["all x.(Animal(x) -> (Vertebrates(x) | Invertebrates(x)))", "all x.(Animal(x) -> (Vertebrate(x) | Invertebrate(x)))", "all x.(Animal(x) -> (Vertebrate(x) | Invertebrate(x)))", "all x.(Animal(x) -> (Vertebrate(x) | Invertebrate(x)))", "all x.(Animal(x) -> (Vertebrate(x) | Invertebrate(x)))", "all x.(Animal(x) -> (Vertebrates(x) | Invertebrates(x)))", "all x.(Animal(x) -> (Vertebrate(x) | Invertebrate(x)))", "all x.(Animal(x) -> (Vertebrate(x) | Invertebrates(x)))", "all x.(Animal(x) -> (Vertebrate(x) | Invertebrate(x)))", "all x.(Animal(x) -> (Vertebrate(x) | Invertebrate(x)))", "all x.(Animal(x) -> (Vertebrate(x) | Invertebrate(x)))", "all x.(Animal(x) -> (Vertebrate(x) | Invertebrates(x)))", "all x.(Animal(x) -> (Vertebrate(x) | Invertebrate(x)))", "all x.(Animal(x) -> (Vertebrate(x) | Invertebrate(x)))", "all x.(Animal(x) -> (Vertebrate(x) | Invertebrate(x)))", "all x.(Animal(x) -> (Vertebrate(x) | Invertebrate(x)))"]}
{"id": "folio_train_660", "nl": "Mammals are animals.", "fol": "all x.(IsMammal(x) -> IsAnimal(x))", "prediction": ["all x.(Mammal(x) -> Animal(x))", "all x.(Mammal(x) -> Animal(x))", "all x.(Mammal(x) -> Animal(x))", "all x.(Mammal(x) -> Animal(x))", "all x.(Mammal(x) -> Animal(x))", "all x.(Mammal(x) -> Animal(x))", "all x.(Mammal(x) -> Animal(x))", "all x.(Mammal(x) -> Animal(x))", "all x.(Mammal(x) -> Animal(x))", "all x.(Mammal(x) -> Animal(x))", "all x.(Mammal(x) -> Animal(x))", "all x.(Mammal(x) -> Animal(x))", "all x.(Mammal(x) -> Animal(x))", "all x.(Mammal(x) -> Animal(x))", "all x.(Mammal(x) -> Animal(x))", "all x.(Mammal(x) -> Animal(x))"]}
{"id": "folio_train_661", "nl": "Hyraxes are mammals.", "fol": "all x.(IsHyrax(x) -> IsMammal(x))", "prediction": ["all x.(Hyrax(x) -> Mammal(x))", "all x.(Hyrax(x) -> Mammal(x))", "all x.(Hyrax(x) -> Mammal(x))", "all x.(Hyrax(x) -> Mammal(x))", "all x.(Hyrax(x) -> Mammal(x))", "all x.(Hyrax(x) -> Mammal(x))", "all x.(Hyrax(x) -> Mammal(x))", "all x.(Hyrax(x) -> Mammal(x))", "all x.(Hyrax(x) -> Mammal(x))", "all x.(Hyrax(x) -> Mammal(x))", "all x.(Hyrax(x) -> Mammal(x))", "all x.(Hyrax(x) -> Mammal(x))", "all x.(Hyrax(x) -> Mammal(x))", "all x.(Hyrax(x) -> Mammal(x))", "all x.(Hyrax(x) -> Mammal(x))", "all x.(Hyrax(x) -> Mammal(x))"]}
{"id": "folio_train_662", "nl": "Grebes lay eggs.", "fol": "all x.(IsGrebe(x) -> LaysEgg(x))", "prediction": ["all x.(Grebe(x) -> LaysEggs(x))", "all x.(Grebe(x) -> LaysEggs(x))", "all x.(Grebe(x) -> LaysEggs(x))", "all x.(Grebe(x) -> LayEggs(x))", "all x.(Grebe(x) -> LaysEggs(x))", "all x.(Grebe(x) -> LaysEggs(x))", "all x.(Grebe(x) -> LaysEggs(x))", "all x.(Grebe(x) -> LaysEggs(x))", "all x.(Grebe(x) -> LaysEggs(x))", "all x.(Grebe(x) -> LaysEggs(x))", "all x.(Grebe(x) -> LaysEggs(x))", "all x y.((Grebe(x) & Egg(y)) -> Lays(x,y))", "all x.(Grebe(x) -> LaysEggs(x))", "all x.(Grebe(x) -> LaysEggs(x))", "all x.(Grebe(x) -> LaysEggs(x))", "all x.(Grebe(x) -> LaysEggs(x))"]}
{"id": "folio_train_663", "nl": "Grebes are not platypuses and also not echidnas.", "fol": "all x.(IsGrebe(x) -> (-IsPlatypus(x) & -IsEchidna(x)))", "prediction": ["all x.(Grebe(x) -> (-Plutypuse(x) & -Echidna(x)))", "all x.(Grebe(x) -> (-Placthus(x) & -Echidna(x)))", "(all x.(Grebe(x) -> -Plavicon(x)) & -Echidna(x))", "(all x.(Grebe(x) -> -Platypus(x)) & -Echidna(x))", "all x.(Grebe(x) -> (-Plutypus(x) & -Echidna(x)))", "all x.(Greb(x) -> (-Plavibus(x) & -Echidna(x)))", "all x.(Grabe(x) -> (-Pltypus(x) & -Echidna(x)))", "all x.(Grebe(x) -> (-Plactus(x) & -Echidna(x)))", "all x.(Greb(x) -> (-Placticulus(x) & -Echidna(x)))", "(Platus(grebe) & -Echidna(grebe))", "all x.(Grebe(x) -> (-Plotypus(x) & -Echidna(x)))", "all x.(Grebe(x) -> (-Plotypus(x) & -Echidna(x)))", "all x.(Grebe(x) -> (-Plutypus(x) & -Echidna(x)))", "all x.((Grebe(x) & -Plutypus(x)) -> -Echidna(x))", "(i.e. -Plumbratus(grebe) & -Echidna(grebe))", "all x.(Grebe(x) -> (-Plutypus(x) & -Echidna(x)))"]}
{"id": "folio_train_664", "nl": "Hyraxes do not lay eggs.", "fol": "all x.(IsHyrax(x) -> -LaysEgg(x))", "prediction": ["all x.(Hyrax(x) -> -LaysEggs(x))", "all x.(Hyrax(x) -> -LaysEggs(x))", "all x.(Hyrax(x) -> -LaysEggs(x))", "all x.(Hyrax(x) -> -LaysEggs(x))", "all x.(Hyrax(x) -> -LaysEggs(x))", "all x.(Hyrax(x) -> -LaysEggs(x))", "all x.(Hyrax(x) -> -LaysEggs(x))", "all x.(Hyrax(x) -> -LaysEggs(x))", "all x y.((Hyrax(x) & Egg(y)) -> -Lays(x,y))", "all x.(Hyrax(x) -> -LaysEggs(x))", "all x.(Hyrax(x) -> -LaysEggs(x))", "all x.(Hyrax(x) -> -LaysEggs(x))", "all x.(Hyrax(x) -> -LaysEggs(x))", "all x.(Hyrax(x) -> -LaysEggs(x))", "all x.(Hyrax(x) -> -LaysEggs(x))", "all x.(Hyrax(x) -> -LaysEggs(x))"]}
{"id": "folio_train_665", "nl": "Grebes are not mammals.", "fol": "all x.(IsGrebe(x) -> -IsMammal(x))", "prediction": ["all x.(Grebe(x) -> -Mammal(x))", "all x.(Grebe(x) -> -Mammal(x))", "all x.(Grebe(x) -> -Mammal(x))", "all x.(Grebe(x) -> -Mammal(x))", "all x.(Grebe(x) -> -Mammal(x))", "all x.(Grebe(x) -> -Mammal(x))", "all x.(Grebe(x) -> -Mammal(x))", "all x.(Grebe(x) -> -Mammal(x))", "all x.(Grebe(x) -> -Mammal(x))", "all x.(Grebe(x) -> -Mammal(x))", "all x.(Grebe(x) -> -Mammal(x))", "all x.(Greb(x) -> -Mammal(x))", "all x.(Grebe(x) -> -Mammal(x))", "all x.(Grebe(x) -> -Mammal(x))", "all x.(Grebe(x) -> -Grape(x))", "all x.(Grebe(x) -> -Mammal(x))"]}
{"id": "folio_train_666", "nl": "Platypuses are vertebrates.", "fol": "all x.(IsPlatypus(x) -> IsVertebrate(x))", "prediction": ["all x.(Plasticus(x) -> Vertebrate(x))", "all x.(Platterus(x) -> Vertebrate(x))", "all x.(Palmole(x) -> Vertebrate(x))", "all x.(Plactus(x) -> Vertebrate(x))", "all x.(Plavix(x) -> Vertebrate(x))", "all x.(Platypus(x) -> Vertebrate(x))", "all x.(Plavix(x) -> Vertebrates(x))", "all x.(Platypus(x) -> Vertebrate(x))", "all x.(Plactosaurus(x) -> Vertebrates(x))", "all x.(Plutus(x) -> Vertebrate(x))", "all x.(Platypus(x) -> Vertebrate(x))", "all x.(Platypus(x) -> Vertebrate(x))", "all x.(Plasticus(x) -> Vertebrate(x))", "all x.(Platypus(x) -> Vertebrate(x))", "all x.(Plasticus(x) -> Vertebrate(x))", "all x.(Platyptuse(x) -> (Vertebrate(x) & Vertebrate(x)))"]}
{"id": "folio_train_667", "nl": "Bobby Flynn is a singer-songwriter. ", "fol": "(IsSinger(BobbyFlynn) & IsSongWriter(BobbyFlynn))", "prediction": ["BobbyFlynn(b) is a singersongwriter(b))", "BobbyFlynn isSingerSoundwriter(x)", "(LivesIn(BobbyFlynn) & Singer(BobbyFlynn))", "BobbyFlynn(boy) & SingerSongwriter(boy)", "BobbyFlynn (SingerSongwriter(bobbyFlynn))", "BobbyFlynn (SingerSongwriter)", "BobbyFlynn(ish) is a singerSongwriter(y)", "BobbyFlynn(Singer(f) & Songwriter(f))", "BobbyFlynn(x) -> Songwriter(x))", "BobbyFlynn(x) -> isSingerSongwriter(x))", "BobbyFlynn(singer) & Songwriter(s) & WorksInLieutenant(s) & WorksInLieutenant(s))", "BobbyFlynn(boss) & Singer(c) & Songwriter(d) & -D.O.T.P.U.(Penny2Bob(c)) & Songwriter(i) & Singer(f)", "BobbyFlynn (Singer(Bobby) & Songwriter(Bobby))", "BobbyFlynn (SingerSongwriter)", "BobbyFlynn (Singer(bobby) & Songwriter(bobby))", "Bobby Flynn(boss) & SingerSongwriter(boss)"]}
{"id": "folio_train_668", "nl": "Bobby Flynn finished 7th while competing on Australian Idol.", "fol": "(FinishedIn7thPlace(BobbyFlynn) & CompetedInAustralianIdol(BobbyFlynn))", "prediction": ["(CompetesOnAustralianIdol(GobbonFlynn,7))", "all x y.(( BobbyFlynn(x) & AustralianIdol(y)) -> Finishes7th(x,y))", "all x.((BobbyFloynn(x) & CompetingOnAsianIdol(x)) -> FinishesSeventh(x))", "(CompetingOnAucklandIdol(BobbyFlynn&ClosingBobbyFlynn(Flynn) & 7th(Flynn))", "All x.((BobbyFlynn(x) & CompetesOnAsianIdol(x)) -> Finishes7th(x))", "all x.((BobbyFlynn(x) & CompetesOnAustralianIdol(x)) -> Finishes7th(x))", "(Finished7thOnAustralianIdol(BobbyFlynn))", "(WasFinished7th(BobbyFlynn) & CompetedOnAUSIdol(BobbyFlynn,AUSIdol))", "BobbyFloynn finished 7th on Idol(Bobby(Bobby) & CompetedOnAerobicIdol(Bobby) & ParticipatesOnIdol(Bobby(h) & CompetesOnIdol(w))", "BobbyFlynnFinishedSeventhOnAsianIdol(BobbyFlynn)", "Bobby Flynn finished 7th while competing on AustralianIdol( BobbyFlynn).", "(Finished7ThConcertSonder(BobbyFlynn) & CompetesOnAustralianIdol(BobbyFlynn))", "Bobby Flynn (Idol) - FinishesSeventhAt(BobbieFlynn))", "(CompetingOnAustralianIdol,BobbyFlynnFinished7Th(Bobby))", "all x.(Secondplace(x,bobbyFlynn) -> CompetesOnAsianIdol(x))", "(CompetingOnAustralianIdol(BobbyFlynn) & FinishesSeventh(BobbieFlynn))"]}
{"id": "folio_train_669", "nl": "Australian Idol competitors are Australian citizens.", "fol": "all x.(CompetedInAustralianIdol(x) -> IsAustralianCitizen(x))", "prediction": ["all x.(AmateurIdolCompetitor(x) -> AustralianCitizen(x))", "all x.(IdolContestant(x) -> (AustralianCitizen(x) & CompetesWith(x,Australian)))", "all x.(AustralianIdolComp\u00e9tencer(x) -> AustralianCitizen(x))", "all x.(AmeridianIdolCompetent(x) -> AustralianCitizen(x))", "all x.((AsianIdolCompetitor(x) & AustralianCitizen(x)) -> AmericanCitizen(x))", "all x.(Idol(x) -> AustralianCitizen(x))", "all x.(AustralianIdolCompetitor(x) -> AustralianCitizen(x))", "all x.((AustralianIdolCompetitor(x) & AustralianCitizen(x)) -> Competes(x))", "all x.(AustralianIdolCompetent(x) -> AustralianCitizen(x))", "all x.(AustralianIdolCompetitioner(x) -> AustralianCitizen(x))", "all x.((AlienIdolCompetitor(x) & AustralianCitizen(x)) -> Competes(x))", "all x.(AustralianIdolCompeter(x) -> AustralianCitizen(x))", "all x.(AustralianIdolCompetitor(x) -> AustralianCitizen(x))", "all x.(AustralianIdolCompetent(x) -> AustralianCitizen(x))", "all x.(OtherIdolCompetitor(x) -> AustralianCitizen(x))", "all x y.((AustralianIdolCompetitor(x) & AustralianCitizen(y)) -> Competes(x,y))"]}
{"id": "folio_train_670", "nl": "The Omega Three band made a nationwide tour in 2007.", "fol": "MadeNationwideTourIn2007(TheOmegaThreeBand)", "prediction": ["all x.(OmegaThreeBand(x) -> MadeNationalToursIn2007(x))", "All x y z.((OmegaTwoBand(x) & Hamilton(y) & Festival(z)) -> MadeNationalTour(x,y,z))", "all x.(OmegaThreeRaining(x) -> MadeIn2007(x))", "all x y.((OmegaThreeBand(x) & NationwideTourIn2007(x)) -> OmegaThreeBand(x))", "the OmegaTrio(OmegaTour(OmegaTour) madeaccountableTour(OmegaTour)", "all x.(OmegaTrio(x) -> MadeNationalTourIn2007(x))", "all x.((OmegaThree(x) & MakesNationalToursIn2007(x)) -> OmegaThreeBand(x))", "all x.((OmegaThree(x) & Countless(x)) -> MadeNationalTour(x,y))", "all x y z.((OmegaThreeBand(x) & NationwideTour(y) & 2007(z)) -> (Meets(x,y) & Made(x,z)))", "all x y z.((OmegaThree(x) & Band(y) & CountrywideTour(z)) -> MadeIn(x,y))", "all x y.((OmegaThreeBand(x) & 2007(y)) -> MadeNationalTour(x,y))", "all x.((OmegaTwo(x) & MadeNationalTourIn2007(x)) -> OmegaTrioBand(x))", "all x y.((OmegaThree(x) & Band(y)) -> MadeNationalTour(y,2007))", "ALL X.((Band(x) & OmegaThree(x)) -> MadeNationalToursIn2007(x))", "The Omega Three Band made a nationwideTourIn2007 (MadeIn2007), 2007))", "all x y z.((OmegaThreeBand(x) & NationalTours(y) & 2007Tours(z)) -> MadeIn(x,y,z))"]}
{"id": "folio_train_671", "nl": "Bobby Flynn is a member of The Omega Three band.", "fol": "IsMemberOfBand(BobbyFlynn,TheOmegaThreeBand)", "prediction": ["BobbyFlynn (BandOmegaThree))", "BobbyFlynn(bosty) & MemberOmegaThreeBands(bossy,i))", "BobbyFlynn (Between(x,OmegaThirds))", "BobbyFlynn(boss.flynn) -> MemberOmegaTwoBand(boss.flynn))", "BobbyFlynn is a member of OmegaThree(b) & VocalLicht(b)).", "BobbyFlynn-Crew(OmegaThree(Band))", "BobbyFlynn(boss(boss(b) & OmegaThree(b))", "(MemberOmegaThree(BobbyFlynn))", "BobbyFlynn (OmegaThree(l) & MemberOfBand(g))", "BobbyFlynn(bossboy(b) & OmegaThree(b))", "BobbyFlynn(Blue) & OmegaThree(f) & Member(b,w,u) & OmegaThree(c))", "BobbyFlynn is a member of OmegaThreeBand(b))", "Bobby Flynn is a member of The OmegaThreeBand.", "BobbyFlynn.(MemberOmegaThree(x)) & VariousBand(x))", "BobbyFlynn/OmegaTwo(x)", "BobbyFlynn (MemberOmegaThree(x))"]}
{"id": "folio_train_672", "nl": "Bobby Flynn was born in Queensland.", "fol": "BornInLocation(BobbyFlynn,Queensland)", "prediction": ["Bobby Flynn was born in Queensland.", "BobbyFlynn is bornInQLD.", "BobbyFlynn wasbn inQld.", "Bobby Flynn was born in Queensland.", "Bobby Flynn was borninQueensland.", "Bobby Flynn was born in Queensland.", "Bobby Flynn (Birth(f) & BornInQueensland(f))", "BobbyFlynn was bornInQueensland(boss,Qc,Qeason)", "BobbyFlynn was bornInQueensland.", "Bobby Flynn was born in Queensland.", "Bobby Flynn was born in Queensland.", "Bobby Flynn (bicycle(x) & BornInQueensland(x))", "Bobby Flynn was born in Queensland.", "Bobby Flynn was born in Queensland.", "Barely KnownOf(BobbyFlynn) & BornInQueensland(Flynn,QLD)", "Bobby Flynn ist ein QueenslanderBird(x)"]}
{"id": "folio_train_673", "nl": "Bobby Flynn is an Australian citizen.", "fol": "IsAustralianCitizen(BobbyFlynn)", "prediction": ["all x.(Flynn(x) -> AustralianCitizen(x))", "BobbyFlynn(boss(b) & AustralianCitizen(x) & BornInAustralia(b))", "BobbyFlynnEarth(b) & AustralianCitizen(b))", "BobbyFlynn (AustralianCitizen(Bobby))", "BobbyFlynn(x) & AustralianCitizen(x))", "Bobby Flynn is an Australian Citizen(x)", "BobbyFlynn isAssociate(bossBobby(boss) & AustralianCitizen(bossBobby)", "Bobby Flynn is an AustralianCitizen(bobby)", "BobbyFlynn isAustralianCitizen(b)", "exists x.(BobbyFlynn(x) & AustralianCitizen(x))", "BobbyFlynn isAustralianCitizen(x)", "BobbyFlynn(x) -> AustralianCitizen(x))", "BobbyFlynn(bost) & AustralianCitizen(b))", "BobbyFlynn (AustralianCitizen(x))", "BobbyFlynn isCitizen (AustralianCitizen(BobbyFlynn)).", "BobbyFlynn is an AustralianCitizen(bossBobbyFlynn)"]}
{"id": "folio_train_674", "nl": "Bobby Flynn flew to America in 2007.", "fol": "FlewTo(BobbyFlynn,America,2007)", "prediction": ["BobbyFlynn flewToAmericaIn2007(BobbyFlynnClub & Airplane(BobbyFlynn))", "Bobby Flynn flew to America in 2007.", "Bobby Flynn flew to America in 2007 (BobbyFlynn(Bobby) | Flynn(Bobby)))", "(Flynn(bob.Flynn,2007) & FlewToAmerica(bob.Flynn,2007))", "Bobby Flynn flew to America in 2007 (BobbyFlynn(BobbyFlynn) -> FlewTo(bobbyGlownn)))", "Bobby Flynn flew to America in 2007 (BobbyFlynnInAwesome(Bobby) & -Liked(BobbyFlynn)))", "Bobby Flynn flew to America in 2007 (BobbyFlynnFlightedToAmerica.2007)).", "Bobby Flynn flew to America in 2007 (by 2008, BobbyFlynn))", "BobbyFlynnFlynnFlynnFlynnFlynn(b) & FlynnToAmerica(b))", "Bobby Flynn flew to America in 2007.", "Bobby Flynn flew to America in 2007 (BobbyFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynnFlynn(b) -> FliesTo(b)))", "BobbyFlynn,Dreamer(BobbyFlynn) -FlightedToAmericaInSituation(BobbyFlynn,2007))", "Bobby Flynn flew to America in 2007 (BobbyFlynn'sFlightToAmerica(f) -> In2007(bobbyFlynn)))", "Bobby Flynn (BobbyFlynn) -flightedToAmerica(BobbyFlynn)) -> FliegedToAmerica(BobbyFlynn,2007))", "Bobby Flynn flew to America in 2007, mainly due to the fact that he is a former brigand (Flynn,2007)", "BobbyFlynn(bobbyFlynn) fliesToAmericaIn2007(bobblyflynn) -> InterestedInAmerica(bobblyflynn))"]}
{"id": "folio_train_675", "nl": "Bobby Flynn was born in Queens.", "fol": "BornInLocation(BobbyFlynn,Queens)", "prediction": ["Bobby Flynn was born in Queens.", "Bobby Flynn was born in Queens.", "Bobby Flynn was born in Queens.", "(BobbyFlynn(Bobby) & BornInQueens(Bobby))", "Bobby Flynn was born in Queens.", "Bobby Flynn was born in Queens.", "Bobby Flynn was born in Queens.", "Bobby Flynn was born in Queens.", "Bobby Flynn was born in Queens.", "Bobby Flynn was born in Queens.", "Bobby Flynn was born in Queens.", "Bobby Flynn was born in Queens.", "Bobby Flynn was born in Queens.", "BobbyFlynn wasbroughtToQueens(b))", "Bobby Flynn was born in Queens.", "Bobby Flynn was born in Queens."]}
{"id": "folio_train_676", "nl": "All proteins are organic compounds.", "fol": "all x.(IsProtein(x) -> IsOrganicCompound(x))", "prediction": ["all x.(Protein(x) -> OrganicCompound(x))", "all x.(Protein(x) -> OrganicCompound(x))", "all x.(Protein(x) -> OrganicCompound(x))", "all x.(Protein(x) -> OrganicCompound(x))", "all x.(Protein(x) -> OrganicCompound(x))", "all x.(Protein(x) -> OrganicCompound(x))", "all x.(Protein(x) -> OrganicCompound(x))", "all x.(Protein(x) -> OrganicCompound(x))", "all x.(Protein(x) -> OrganicCompound(x))", "all x.(Protein(x) -> OrganicCompound(x))", "all x.(Protein(x) -> OrganicCompound(x))", "all x.(Protein(x) -> OrganicCompound(x))", "all x.(Protein(x) -> OrganicCompound(x))", "all x.(Protein(x) -> OrganicCompound(x))", "all x.(Protein(x) -> OrganicCompound(x))", "all x.(Protein(x) -> OrganicCompound(x))"]}
{"id": "folio_train_677", "nl": "All enzymes are organic compounds.", "fol": "all x.(IsEnzyme(x) -> IsOrganicCompound(x))", "prediction": ["all x.(Enzyme(x) -> OrganicCompound(x))", "all x.(Enzyme(x) -> OrganicCompound(x))", "all x.(Enzyme(x) -> OrganicCompound(x))", "all x.(Enzyme(x) -> OrganicCompound(x))", "all x.(Enzyme(x) -> OrganicCompound(x))", "all x.(Enzyme(x) -> OrganicCompound(x))", "all x.(Enzyme(x) -> OrganicCompound(x))", "all x.(Enzyme(x) -> OrganicCompound(x))", "all x.(Enzyme(x) -> OrganicCompound(x))", "all x.(Enzyme(x) -> OrganicCompound(x))", "all x.(Enzyme(x) -> OrganicCompound(x))", "all x.(Enzyme(x) -> OrganicCompound(x))", "all x.(Enzyme(x) -> OrganicCompound(x))", "all x.(Enzyme(x) -> OrganicCompound(x))", "all x.(Enzyme(x) -> OrganicCompound(x))", "all x.(Enzyme(x) -> OrganicCompound(x))"]}
{"id": "folio_train_678", "nl": "All enzymes are proteins.", "fol": "all x.(IsEnzyme(x) -> IsProtein(x))", "prediction": ["all x.(Enzyme(x) -> Protein(x))", "all x.(Enzyme(x) -> Protein(x))", "all x.(Enzyme(x) -> Protein(x))", "all x.(Enzyme(x) -> Protein(x))", "all x.(Enzyme(x) -> Protein(x))", "all x.(Enzyme(x) -> Protein(x))", "all x.(Enzyme(x) -> Protein(x))", "all x.(Enzyme(x) -> Protein(x))", "all x.(Enzyme(x) -> Protein(x))", "all x.(Enzyme(x) -> Protein(x))", "all x.(Enzymes(x) -> Proteins(x))", "all x.(Enzyme(x) -> Protein(x))", "all x.(Enzyme(x) -> Protein(x))", "all x.(Enzyme(x) -> Protein(x))", "all x.(Enzyme(x) -> Protein(x))", "all x.(Enzymes(x) -> Proteins(x))"]}
{"id": "folio_train_679", "nl": "One American screenwriter and producer is Maggie Friedman.", "fol": "(IsAmerican(Maggiefriedman) & IsScreenwriter(Maggiefriedman) & IsProducer(Maggiefriedman))", "prediction": ["all x.((AmericanScreenwriter(x) & AmericanProducer(x)) -> MaggieFriedman(x))", "all x.((AmericanScreenwriter(x) & Producer(x)) -> MaggieFriedman(x))", "all x.((AmericanScreenwriter(x) & AmericanProducer(x)) -> MaggieFriedman(x))", "all x.((AmericanScreenwriter(x) & AmericanProducer(x)) -> MaggieFriedman(x))", "all x.((AmericanScreenwriter(x) & AmericanProducer(x)) -> MaggieFriedman(x))", "all x y.((AmericanScreenwriter(x) & Producer(y)) -> MaggieFriedman(z))", "all x.(AmericanScreenwriterAndProducer(x) -> MaggieFriedman(x))", "all x.(AmericanScreenwriter(x) & Producer(x) & MaggieFriedman(x))", "All x.(AmericanScreenwriter(x) & AmericanProducer(x) -> MaggieFlodman(x))", "all x.((AmericanScreenwriter(x) & Producer(x)) -> MaggieFriedman(x))", "all x.((AmericanScreenwriter(x) & Producer(x)) -> MaggieFriedman(x))", "all x.(AboutScreenwriter(x) & Producer(x))", "All x.((AmericanScreenwriter(x) & Producer(x)) -> MaggieFriedman(x))", "all x.(AmericanScreenwriterAndProducer(x) -> MaggieFriedman(x))", "all x.((AmericanScreenwriter(x) & Producer(x)) -> MaggieFriedman(x))", "all x.(AmericanScreenwriter(x) & Producer(x) & MaggieFriedman(x))"]}
{"id": "folio_train_680", "nl": "Maggie Friedman was the showrunner and executive producer of the lifetime television series Witches of East End.", "fol": "(ShowRunnerOfSeries(Maggiefriedman,Witchesofeastend) & ExecutiveProducerOfSeries(Maggiefriedman,Witchesofeastend) & IsLifetimeTelevisionSeries(Maggiefriedman))", "prediction": ["Maggie Friedman (EightYearsEasternTelevisionShowrunnerAndExecutiveProducer(Maggie))", "Maggie Friedman (Habitat(Maggie) & Showrunner(Maggie) & ExecutiveProducer(Maggie) & LifetimeTVSeries(Maggie,EastEnd))", "Maggie Friedman (showrunner/executiveProducer(Maggie) & LifetimeTVSeriesWitchesOfEastEnd(Maggie))", "Maggie Friedman was showrunner and executive producer of the LifetimeTVShow(MaggieFriedman) & WitchesOfEastEnd(MaggieFriedman)", "Lucy Friedman (Showrunner/ExecutiveProducer(Maggie.Friedman) & TheHeavenlyTelevisionSeries(Maggie,EastEnd))", "Maggie Friedman (showrunner,witches(x,EdgeOf(w)) & ExecutiveProducer(x,w))", "(HasShowrunner(MaggieFriedman) & ExecutiveProducer(MaggieFriedman) & LifetimeTVSeries(Maggie,EastEnd))", "Maggie Friedman(Maggie) -> (TheShowrunner(Maggie) & ExecutiveProducerOfLifetimeTVSeries(Maggie) & WitchesOfEastEnd(Maggie)))", "Maggie Friedman (snakerunner(s) & executiveproducer(s)) & TheLifetimeTVSeriesWitchesOfEastEnd(s))", "(EasternEndWitch(MaggieFriedman) & ShowrunnerAndExecutiveProducer(MaggieFriedman))", "Maggie Friedman (Showrunner(Maggie) & ExecutiveProducer(Maggie) & LifetimeElectronicSeriesWitchesOfEastEnd(Maggie))", "Maggie Friedman (showrunner & ExecutiveProducer ofLifetimeExecutiveSeriesWitchesOfEastEnd))", "Maggie Friedman(Maggie) & ShowrunnerAndExecutiveProducer(Maggie) & LifetimeTVSeriesWitchesOfEastEnd(Maggie))", "Maggie Friedman (ed. ) & Showrunner(e) & ExecutiveProducer(e) & WitchesOfEastEnd(g))", "Maggie Friedman (ShowrunnerAndExecutiveProducerOfEasternEnd(Maggie))", "Maggie Friedman was a Showrunner AndExecutiveProducer of the LifetimeTelevisionSeries WitchesOfEastEnd(MesleyFriedman)"]}
{"id": "folio_train_681", "nl": "Witches of East End is a fantasy-drama series.", "fol": "(IsFantasyDrama(Witchesofeastend) & IsSeries(Witchesofeastend))", "prediction": ["WitchesOfEastEnd(p) -> FantasyDramaSeries(p))", "all x.(WitchesOfEastEnd(x) -> FantasyDramaRenaissance(x))", "(FantasyDrama.Sequelato(WitchesOfEastEnd))", "(FantasyDramaSeries(WitchesOfEastEnd))", "(FantasyDrama(WitchesOfEastEnd))", "(FantasyDramaSeries(WitchesOfEastEnd))", "(Project(WitchesOfEastEnder) & FantasyDrama(w))", "All x.(Weapon(x) -> FantasyDrama(x))", "all x.(WitchesOfEastEnd(x) -> FantasyDramaSeries(x))", "(FantasyDramaPrivate(WitchesOfEastEnd) &.(WitchesOfEastEnd(Witches,EastEnd)) & FantasySeries(Witches,EastEnd)))", "WitchesOfEastEnd(x) -> FantasyDramaSeries(x))", "(FantasyDramaSeries(WitchesOfEastEnd))", "all x.(WitchesOfEastEnd(x) -> FantasyDramaSeries(x))", "(FantasyDramaSeries(WitchesOfEastEnd))", "(FantasyDrama(WitchesOfEasternEnd) & FantasySeries(Witches))", "all x.(WitchesOfEastEnd(x) -> FantasyDramaSeries(x))"]}
{"id": "folio_train_682", "nl": "Maggie Friedman produced and developed Eastwick.", "fol": "(ProducedSeries(Maggiefriedman,Eastwick) & DevelopedSeries(Maggiefriedman,Eastwick))", "prediction": ["Maggie Friedman (n\u00e9eEastwick) & ProducedAndDeveloped(Megaitfriedman))", "Maggie Friedman produced and developed Eastwick.", "Maggie Friedman/MaggieProducedEastwick(Gerryman)", "Maggie Friedman produced and developed Eastwick.", "Maggie Friedman,exhibitedEsswick(MGFriedman)", "Maggie Friedman produced and developed Eastwick.", "Maggie Friedman (pictured) exists x y.(Eastwick(y) & ProducedBy(x,y)) & exists z.(Eastwick(z) & DevelopedBy(x,z))))", "Maggie Friedman produced and developed Eastwick.", "Maggie Friedman (exists x.(Esswick(x) & Produces(x)) & Develops(x)))", "Maggie Friedman (MauritiaFriedman) produced and developed Eastwick(Maggie)", "Maggie Friedman produced and developed Eastwick.", "Maggie Friedman (produced(Maggie,Eastwick) & developed(Maggie,Eastwick))", "Maggie Friedman (Mutual(Meg) -> ProducesAndDevelopsEastwick(Meg(Meg)))", "Maggie Friedman (Maggie) -producedAndDevelopedEastwick(Maggie))", "(ProducedAndDevelopedEastwick( Maggie Friedman))", "Maggie Friedman (producedEastwick(Maggie) & DevelopsEastwick(Maggie))"]}
{"id": "folio_train_683", "nl": "Eastwick is a series by ABC.", "fol": "(IsSeries(Eastwick) & ProducedBy(Eastwick,Abc))", "prediction": ["Eastwick series from ABC.", "Eastwick is a series by ABC.", "Eastwick is a series by ABC.", "Eastwick by ABC.", "Eastwick is a series by ABC.", "Eastwick (SeriesByABC)", "All x.(Eastwick(x) -> SeriesByABC(x))", "All x.(Eastwick(x) -> (Series(x) & ABC(x)))", "Eastwick ist SeriesByABC.", "Eastwick is series(x) & PublishedByABC(x))", "Eastwick,ABC(Series,Endeadline)", "Eastwick is a seriesbyBitteBy(r) & ABC(s) & -(-Rosa,Rosa,Rosa,r,w)))", "Eastwick is aseries by ABC.", "Eastwick (series) & CreatedByABC(x))", "Eastwick is a series by ABC.", "All x.(Edward(x) -> SeriesByABC(x))"]}
{"id": "folio_train_684", "nl": "There is a series by ABC that was developed by the showrunner of Witches of East End.", "fol": "exists x.(IsSeries(x) & ProducedBy(x,Abc) & exists y.(DevelopedSeries(y,x) & ShowRunnerOfSeries(y,Witchesofeastend)))", "prediction": ["exists x y.((Series(x) & ABC(x) & WitchesOfEastEnd(y)) -> DevelopedBy(x,y))", "exists x y.(Series(x) & ABC(y) & BasedOn(x,y) & Showrunner(x) & WitchesOfEastEnd(y))", "exists x y.(series(x) & BroadcastBy(x,y) & Showrunner(y) & WitchesOfEastEnd(x))", "exists x y.(Series(x) & ABC(y) & CreatedBy(x,Y) & WitchesOfEastEnd(x))", "exists x.(SeriesByABC(x) & DevelopedByWitnessRunner(x))", "exists x.(Series(x) & DevelopedBy(x) & WitchesOfEastEnd(x))", "exists x.(Series(x) & Showrunner(x) & WitchesOfEastEnd(x))", "exists x y.(Series(x) & ABC(y) & CreatedBy(y,HasEasternEdge) Showrunner(x))", "exists x.(SeriesByABC(x) & ShowrunnerOfWitchesOfEastEnd(x))", "exist x.(Series(x) & ProvidedByABC(x) & ProvidedByShowrunner(x) & WitchesOfEastEnd(x))", "exists x y z.(Series(x) & ABC(y) & Showrunner(z) & WitchesOfEasternEnd(w) & CreatedBy(x,y,z))", "exists x y.((Series(x) & ABC(y) & Showrunner(j) & WitchesOfEastEnd(x)) -> DevelopedBy(y,x))", "exists x.(Series(x) & byABC(x) & ShowrunnerInWriteUp(x,Witches))", "exists x y z.(Series(x) & ABC(y) & WitchesOfEastEnd(z) & DevelopedBy(y,z))", "exists x.(Series(x) & By(x,B ABC) & Showrunner(x,WitchesOfEastEnd))", "exists x.(SeriesByABC(x) & AuthorshipDevelopment(x,WitchesOfEastEnd))"]}
{"id": "folio_train_685", "nl": "There isn't a series by ABC that was developed by the showrunner of Witches of East End.", "fol": "-exists x.(IsSeries(x) & ProducedBy(x,Abc) & exists y.(DevelopedSeries(y,x) & ShowRunnerOfSeries(y,Witchesofeastend)))", "prediction": ["exists x.(Series(x) & -DevelopedByShowrunner(x,Witches) & EastEnd(x))", "-exists x.(Series(x) & ABC(x) & DevelopedByWitch(x))", "exists x.(series(x) & -DevelopedBy(x,Twilight Witches))", "exists x.(Series(x) & ABC(x) & StarLines(x) & WitchesOfEastEnd(x))", "exists x.(Series(x) & -(DevelopedByCrazyWitchWitchRenderer(x) & WitchesOfEsternEnd(x))))", "exists x.(Series(x) & -DevelopedByShowrunner(x) & WitchesOfEastEnd(x))", "(exists x.(Series(x) & ABC(x) & DevelopedBy(x,WhiskeysOfEastEnd)))", "exists x.(Series(x) & -DevelopedByOWShowrunner(x,WitchesOfEastEnd))", "exists x y.((Series(x) & ABC(y) & Showrunner(x,y)) -> -DevelopedByWitchesOfEastEnd(x,y))", "(-exists x.(SeriesByABC(x) & StarsSeedrunner(x)) & WitchesOfEasternEnd(x))", "exists x.(Batch(x) & -DevelopedByWitchRunner(x))", "exists x.(Series(x) & -DevelopedByTheShowrunner(x) & WitchesOfEastEnd(x))", "exists x.((SeriesByABC(x) & ShowrunnerOnWhiskeysOfEastEnd(x)) -> -DevelopedBy(x))", "-exists x.(Series(x) & byABC(x) & CreatedByTheWitchRunner(x))", "all x.((Series(x) & ABC) & DevelopedByWitchesOfEastEnd(x)) -> -Has(x,WhiskensOfEastEnd))", "exists x.(Series(x) & -DevelopedByShowrunnerOfWitchesOfEastEnd(x))"]}
{"id": "folio_train_686", "nl": "Maggie Friedman developed Witches of East End.", "fol": "DevelopedSeries(Maggiefriedman,Witchesofeastend)", "prediction": ["Maggie Friedman developed WitchesOfEastEnd(MGFriedman,1996).", "Maggie Friedman developed WitchesOfEastEnd(friday)", "Maggie Friedman (ed. WitchesOfEastEnde))", "Maggie Friedman developed WitchesOfEastEnd(Maggie)", "Maggie Friedman (born 23/05/1991))", "Margaret Friedman developed WitchesOfEastEnd(MaggieFriedman).", "Maggie Friedman developed WitchesOfEastEnd(a) -> (MandyFriedman(b) & Developed(c)))", "Maggie Friedman, also known as \"MaggieFriedman\", developed WitchesOfEastEnd(Maggie))", "(DevelopedWhiskey(Maggie Friedman) & DevelopedWhiskOfEastEnd(MaggieFriedman))", "Maggie Friedman, creator of WitchesOfEastEnd, penned illustrious graphic novels & spooky comics & acclaimed television series.", "Maggie Friedman is what created WitchesOfEastEnd(Girl(Friedman)", "Maggie Friedman\u2019s WitchesOfEastEnd(m)", "Maggie Friedman and EastEndWitches(Maggie)", "Maggie Friedman narrated The WitchesOfEastEnd(n) & Charles Finch(u) & DevelopedThe WitchesOfEastEnd(r) & Elizabeth Finch(u) & Maggie Friedman(y))", "Maggie Friedman developed WitchesOfEastEnd.", "Maggie Friedman hat WitchesOfEastEnd(Maggie,Friedman) erarbeitet."]}
{"id": "folio_train_687", "nl": "Evangelos Eleftheriou is a Greek electrical engineer.", "fol": "(IsGreek(Evangeloseleftheriou) & IsElectricalEngineer(Evangeloseleftheriou))", "prediction": ["Evangelos Eleftheriou (GreekElectricalEngineer)", "Evangelos Eleftheriou (GreekElectricalEngineer(Economy) & StudiesElectrical(Economy) & WorksIn(Eplume,Greek))", "(GreekElectricalEngineer(EvangelosEleftheriou)", "EvangelosEleftheriou (GreekElectricalEngineer(x) & GreekElectricalEngineer(x))", "Evangelos Eleftheriou, is GreekElectricalEngineer(e)", "EvangelosEleftheriou is a GreekElectricalEngineer(e)", "A Greek ElectricalEngineer(ElevelesEleftheriou)", "Evangelos Eleftheriou (GreekElectricalEngineer)", "Eleftheriou (GreekElectricalEngineer(e) & EvangelosEleftheriou(e))", "Evangelos Eleftheriou (GreekElectricalEngineer)", "EvangelosEleftheriou is a GreekElectricalEngineer(electrician)", "The GreekElectricalEngineer(EvangelosEleftheriou)", "EvangelosEleftheriou (GreekElectricalEngineer(E))", "Evangelos Eleftheriou is a GreekElectricalEngineer(e)", "All x.(EvangelosEleftheriou(x) -> GreekElectricalEngineer(x))", "Evangelos Eleftheriou (GreekElectricalEngineer)"]}
{"id": "folio_train_688", "nl": "Evangelos Eleftheriou worked for IBM in Zurich.", "fol": "(EmployedBy(Evangeloseleftheriou,Ibm) & EmployedInLocation(Evangeloseleftheriou,Zurich))", "prediction": ["EvangelosEleftheriou (WordWorkedFor(Eleftheriou,IBM,Z\u00fcrich))", "Eleftheriou and Evorita worked for IBM in Zurich.", "Eleftheriou has worked in Zurich for IBM.", "Evangelos Eleftheriou worked for IBM in Zurich.", "All x y.((EvangelosEleftheriou(x) & IBM(y)) -> WorkedInZ\u00fcrich(x,y))", "IBird.EleftheriouBeforeIBMZ\u00fcrich(i)", "Eleftheriou, Evangelos, worked for IBM in Zurich.", "Evangelos Eleftheriou worked for IBM (Z\u00fcrich) & WorkedIn(x,VisitZ\u00fcrich))", "Evangelos Eleftheriou worked for IBM in Z\u00fcrich.", "Evangelos Eleftheriou worked for IBM in Zurich.", "Eleftheriou worked ForIBMZ\u00fcrich (Evangelos))", "Evangelos Eleftheriou arbeitete for IBM in Zurich.", "EleftheriouWorkedForIBM(e) & WorkedForZerich(e))", "Evangelos Eleftheriou worked for IBM in Z\u00fcrich.", "Eleftheriou, Evangelos & BufferedInZurich(Essinobara)", "(WorkedForIBM(EvangelosEleftheriou) & BasedInZ\u00fcrich(e))"]}
{"id": "folio_train_689", "nl": "If a company has employees working for them somewhere, then they have an office there.", "fol": "all z.((IsCompany(x) & EmployedBy(y,x) & EmployedInLocation(y,z)) -> HasOfficeAt(x,z))", "prediction": ["all x.((Company(x) & HasEmployeesWorkingFor(x)) -> HasOfficeAround(x))", "all x y.((Company(x) & Employee(y) & WorksFor(x,y)) -> Office(x,y))", "all x y.((Company(x) & Employee(y) & WorksFor(x,y)) -> HasOffice(x,y))", "all x y.((Company(x) & Employee(y) & WorksAnd(x,y)) -> HasOffice(x,y))", "all x.((Company(x) & HasEmployeesWorkingFor(x,y)) -> HasOffice(x,y))", "all x.((Company(x) & EmployeesWorkingForArea(x)) -> HasOffice(x))", "all x.(WorkingForEmployees(x) -> Office(x))", "all x.((Company(x) & HasEmployees(x)) -> HasOffice(x))", "all x y.((Company(x) & Employee(y) & WorksFor(x,y)) -> HasOffice(x,y))", "all x.(WorksForCompany(x) -> HasOfficeInCompany(x))", "all x.((Company(x) & EmployeesWorkingFor(x)) -> HasOffice(x))", "all x.((Company(x) & EmployeesWorkingFor(x,2)) -> OfficeAway(x))", "all x.((Commpany(x) & EmployeeWorkingFor(x,y)) -> HasOfficeIn(x,y))", "all x.((Company(x) & HasEmployeesWorkingFor(x)) -> HasOffice(x))", "all x.((Company(x) & EmployeesWorkingFor(x)) -> Office(x))", "all x.((Company(x) & EmployeesWorkingFor(x,y)) -> HasOffice(x,y))"]}
{"id": "folio_train_690", "nl": "IBM is a company.", "fol": "IsCompany(Ibm)", "prediction": ["All x.(IBM(x) -> Company(x))", "(Company(IBM) & Company(IBM))", "all x.(IBM(x) -> Company(x))", "all x.(IBM(x) -> Company(x))", "all x.(IBM(x) -> Company(x))", "all x.(IBM(x) -> Company(x))", "all x.(IBM(x) -> Company(x))", "IBM (Company(x) & FoundedIn(x,y))", "all x.(IBM(x) -> Company(x))", "all x.(IBM(x) -> Company(x))", "all x.(IBM(x) -> Company(x))", "all x.(IBM(x) -> Company(x))", "all x.(IBM(x) -> Company(x))", "all x.((IBM(x) & Company(x)) -> Companies(x))", "exists x.(IBM(x) & Company(x))", "all x.(IBM(x) -> Company(x))"]}
{"id": "folio_train_691", "nl": "IBM has an office in London or Zurich.", "fol": "(HasOfficeAt(Ibm,London) | HasOfficeAt(Ibm,Zurich))", "prediction": ["all x.((IBM(x) & (London(x) | Zurich(x))) -> HasOffice(x,y))", "all x.(IBM(x) -> (Outlook(x,London) | Office(x,Z\u00fcrich)))", "all x.(IBM(x) -> (AttributionInLondon(x) | OfficeInZ\u00fcrich(x)))", "all x.(IBM(x) -> (AffiliateInLondon(x) | OfficeInZ\u00fcrich(x)))", "all x.(IBM(x) -> (Office(x,London) | Office(x,Z\u00fcrich)))", "all x y.((IBM(x) & (London(y) | Zurich(y))) -> HasOffice(x,y))", "all x.(IBM(x) -> (HasOffice(x,London) | HasOffice(x,Zurich)))", "all x.(IBM(x) -> (Workplace(y) & (LocatedIn(y,London) | LocatedIn(y,Z\u00fcrich))))", "all x.(IBM(x) -> (OfficeInLondon(x) | OfficeInZ\u00fcrich(x)))", "all x.(IBM(x) -> (OfficeInLondon(x) | OfficeInZ\u00fcrich(x)))", "all x.(IBM(x) -> (OfficeInLondon(x) | OfficeInZ\u00fcrich(x)))", "all x.(IBM(x) -> (OfficeInLondon(x) | OfficeInZ\u00fcrich(x)))", "all x.(IBM(x) -> (OfOffice(y,London) | OfOffice(z,Z\u00fcrich)))", "all x.(IBM(x) -> (OrderInLondon(x) | OfficeInZ\u00fcrich(x)))", "all x.(IBM(x) -> (OfOffice(x,London) | OfOffice(x,Z\u00fcrich)))", "(London Office(IBM) | Zurich Office(IBM))"]}
{"id": "folio_train_692", "nl": "No Greeks have worked for IBM.", "fol": "-exists y.(IsGreek(y) & EmployedBy(y,Ibm))", "prediction": ["-exists x.(Greek(x) & WorkedForIBM(x))", "-exists x.(Greek(x) & ForIBM(x))", "-exists x.(Greek(x) & WorksForIBM(x))", "exists x.(Greek(x) & HasWorked(x,IBM))", "-exists x.(Greek(x) & WorksForIBM(x))", "-exists x.(Greek(x) & WorksForIBM(x))", "(-exists x.(Greek(x) & WorksFor(x,IBM)))", "-exists x.(Greek(x) & WorksForIBM(x))", "-exists x.(Greek(x) & WorkedForIBM(x))", "-exists x.(GreatestPerson(x) & WorkedFor(x,IBM))", "-exists x.(Greek(x) & WorksFor(x,IBM))", "-exists x.(Greek(x) & WorksForIBM(x))", "-exists x.(Greek(x) & WorkedForIBM(x))", "-exists x.(Graetian(x) & WorksForIBM(x))", "-exists x.(Greek(x) & WorksFor(x,IBM))", "-exists x.(Greek(x) & WorksFor(x, IBM))"]}
{"id": "folio_train_693", "nl": "Before releasing their single, \"Hooray! Hooray! It's a Holi-Holiday!\", Boney M. had had seven consecutive German #1 singles.", "fol": "exists x.(SongEntity(x) & PerformedBy(x,Boneym) & IsGermanNumberOneSingle(x))", "prediction": ["all x.((BoneyM.(x) & Single(x,Hooray&Hooray&Hooliday)) -> SevenConsecutiveDeutschOneSingles(x))", "(Hioray!Hooray!Hooray!Hooliday!Hooliday!Hooliday!Hooray!))", "(BoneyM.,9) | (Hooray! Hooray! It's HoliHooliday!)! & SevenConsecutiveGerman#1Singles(BoneyM.,7))))", "all x.((BoneyM.(x) & Single(x,Hooray) & Hooray(x,Holi(x)) -> SevenConsecutiveGerman #1s(x))", "[MorningSingle(Morning) & BoneyM. (Hooray), Hooray,Hooliday!)))", "(ReleasingSingle(BoneyM.) & Hits(Booray,Hooray,Hooliday))", "(Hooray! Hooray! HoliHoliday!) -> BoneyM. had SevenConsecutiveDeutschn #1Singles(b))", "all x y.((Double(x) & Single(y)) -> (HoorayHoorayHoorayHooliday!\" & SevenConsecutiveGerman #1Singles(x)))", "all x.((BoneyM.(x) & Single(x) & HoliHoliday(x)) -> SevenConsecutiveGerman #1Singles(x))", "all x.((BoneyM.(x) & Single(x,Hooray,Hooray) & HoliHoliday(x)) -> SevenConsecutiveGermanSingles(x))", "all x.((Hooray!Hooray!Hooray!Hooliday(x) & BoneyM.(x)) -> HasSevenSecondaryGerman#1Singles(x))", "all x.((BoneyM. & Single(x,Hooray,Hooray,HoliHoliday)) -> SevenConsecutiveGerman#1Singles(x,Seven))", "all x y z.((BoneyM.(x) & Single(y) & Single(z)) -> (Hooray(y,x) | Hooray(y,x) | HoliHoliday(y))))", "(Hooray! Hooray! HoliHoliday! ) & BoneyM.HasSecondaryDeutschland#1Singles(Boney(Boney,Hilton))", "(ReleasingSingleHooray!Hooray!Hooray!Hooliday!Holly!)) - BoneyM. had SevenGermanSinglesConsecutive(Boz))", "all x.((BoneyM. & Single(x)) -> (Hooray(x) | Hooray(x) | ItsHooliday(x)) & SevenConsecutiveGerman #1Singles(x)))"]}
{"id": "folio_train_694", "nl": "\"Hooray! Hooray! It's a Holi-Holiday!\" was a big hit all over Europe.", "fol": "(SongEntity(Hooray) & WasHitInEurope(Hooray))", "prediction": ["all x.(Hooray!Hooray!Hooray!Hooliday!HoliHoliday(x) -> BigSlapOverEurope(x))", "all x.((Hooray!Hooray!Holiday! & HUGEHIT(x)) -> WidespreadInEurope(x))", "all x.(Hooray!Hooray!Hooray!Hooliday(x) -> HitAllOverEurope(x))", "all x.(Hooray(x) -> HoorayHooliday(x))", "all x.(Hammer(x) -> (Hooray! Hooray!HoliHoliday(x)))", "all x.((Hooray(x) | Hooray(x)) -> HoliHoliday(x))", "all x.(Hooray!Hooray!Hooray!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday!Hooliday(x)) -> LikelyToHideInEurope(x))", "all x.((Hooray!Hooray!Hooray!HoliHoliday!\") -> HitAllOverEurope(x))", "all x.(Hooray(x) -> HolisToday(x))", "all x.(Hooray!Hooray!Hooray!Hooliday!!) -> GreatHitAllOverEurope.", "all x.(Hooray(x) & HoliHooliday(x)) -> BigHit(x))", "all x y.((Hooray(x) & Hooray(y) & HoliHoliday(x)) -> BigHitAllOverEurope(x,y))", "all x.((Hooray(x) & Hooray(x) & HoliHoliday(x)) -> HugeHitAroundEurope(x))", "all x.((Hooray(x) & Hooray(x) & HoliHoliday(x)) -> BigHipInEurope(x))", "all x.((Hooray! Hooray! Holliday(x)) -> BigHip(x))", "all x.((Hooray(x) & Hooray(x) & HoliHooliday(x)) -> HitAllOverEurope(x))"]}
{"id": "folio_train_695", "nl": "Nevertheless, \"Hooray! Hooray! It's a Holi-Holiday!\" broke Boney M's streak of consecutive German #1 singles.", "fol": "(SongEntity(Hooray) & -IsGermanNumberOneSingle(Hooray))", "prediction": ["\"Hooray!Hooray!Hooliday!Hooliday!\" broke BoneyM's streak of consecutive German #1s,Singles,Singles,Singles\"", "all x.(Hooray(x) -> (Hooray(x) | Hooray(x) & HoliHoliday(x)))", "(FatherSingle(Hooray,Hooray) & HoliHooliday(Hooray,Hooray) & BreaksBoneyM'sStreetOfGermanSingles(Hooray))", "\"Hooray!Hooray! HoliHoliday!\" broke BoneyM's BundesligastretchedStandard.", "((Hooray!Hooray!Hooray!Hooliday! & BoneyMsStringOfGermanFirstPositions(BoneyM)) -> Breaks(seven))", "all x.(HoorayHoorayHoorayHoorayHolli-Hollyday(x) -> BreaksBoneyM's streak of German #1Singles(x))", "all x.((HasHooray(x) | HasHooliday(x)) -> BreakedBoneyM'sStlessSingleStrength(x))", "\"Hooray! Hooray! It's HoliHoliday!\" broke BoneyM's streak of German #1Singles(M))", "(Hooray!) Hooray! Holi-Holiday! ) BreaksBoneyM & BreaksStringOfGermanTop10Singles(Hooray))", "\"Hooray!Hooray! HoliHoliday!\" broke BoneyM's streak of consecutive German #1s.", "(-Hooray!Hooray!Hooray!Hooliday(Holly)) & BredStripOfOfCounterPosition(Hooray,Holly)) -> BoneyM'sStringOfConsecutiveDeutsch-German #1Singles(Hooray,Hooray))", "all x.(Hooray!Hooray!Hooray!Holiday!HouseHollandiah!Holly!Holly,Holly,Holly!) -> BreaksBoneyM(x))", "ALL X.((HoorayLadies(x) & Jojolaries(x,HoliHolly)) -> BreakedBoneyMsStringOfSecondaryGermanIsNoWords(x))", "all x.((Hooray(x) & Hooray(x) & Holi(x)) -> BreakedBoneyM'sStringOfConsecutiveGermanNo.1Singles(x))", "(BoneyM: \"Hooray!Hooray!Hooliday!\") BreakedStringOfInconsectualGerman #1Singles(Boom)!)", "\"Hooray!Hooray!Hooray!It'sHollyHoliday! \" broke BoneyM's streak of German #1Singles(27))"]}
{"id": "folio_train_696", "nl": "A song that peaks below #1 on the german charts is also a song that is not the #1 single", "fol": "all x.(PeaksBelowNumberOne(x) <-> -IsGermanNumberOneSingle(x))", "prediction": ["all x.((Song(x) & PeaksBelowTop-10(x)) -> -SingleTop-10(x))", "all x y z.((Song(x) & PeaksBelow#1(x) & GermanCharts(y) & Single(z) & -SingleNo1(z)) -> Song(x))", "all x.((Song(x) & PeaksBelow#1OnGermanCharts(x)) -> -PrestigesSolvedOnGermanCharts(x))", "all x.((Song(x) & PeaksBelow(x,0) & -Top(x)) -> -Top(x,1Single(x))", "all x y.((Song(x) & PeaksBelowRecord#1(x) & GermanCharts(y)) -> (-RecordNo1Single(x) & -RecordNo1Single(x)))", "all x.((Song(x) & PeaksBelowTops(x,number1)) -> -SingleTopper(x))", "all x.((Song(x) & PeaksBelowTop(x,Top1)) -> -IsTop1Single(x))", "all x.((Song(x) & PeaksBelow(x,1) & InGermanCharts(x)) -> -IP1Single(x))", "all x.((Song(x) & PeaksBelowTop(x,1)) -> -LimitsBestOnGermanCharts(x))", "all x.((Song(x) & PeaksBelowNinetyOnDeutschlandCharts(x)) -> -TopPrice(x))", "all x.((Song(x) & PeaksBelowNo.1(x) & -TopPieceOnGermanCharts(x)) -> Song(x))", "all x.((Song(x) & PeeksBelow(x,100)) -> -ProperPotential(x))", "all x.((Song(x) & PeaksBelowMarine(x,1)) -> -SingleNo.1(x))", "all x.((Song(x) & PeaksBelow(x,Top1).(x)) -> -SingleUpper(x))", "all x y.((Song(x) & PeaksAbove(x,y) & InGermanCharts(y,x)) -> -(Song(x) & -TopTrackOnGermanCharts(x)))", "all x.((Song(x) & PeaksBelowTop(x,Top10)) -> -SingleTop(x))"]}
{"id": "folio_train_697", "nl": "\"Hooray! Hooray! It's a Holi-Holiday!\" was a #1 hit in Germany.", "fol": "IsGermanNumberOneSingle(Hooray)", "prediction": ["all x.((Hooray(x) & HoneyHooliday(x)) -> #1Hit(x,Germany))", "all x.((Hooray(x) & Hooray(x) & HoliHoliday(x)) -> #1 Hit(x))", "ALL X.(Hooray!Hooray!Hooliday!Hooliday!Hooliday!Hooray! #EatsDearHooliday(x))", "all x.((Hooray(x) & HoliHoliday(x)) -> #1Hit(x))", "all x.(Hooray! Hooray! Hooray! It's HoliHooliday(x) -> #1HitInGermany(x))", "((Hooray! Hooray! It's HoliHoliday!!) -> #1HisHouse(Hooray))", "all x y.((Hooray(x) & Hooray(x) & HoliHoliday(y)) -> #1 HitInGermany(x))", "(HisHooray(Hooray) & Hey,Hooray! & HoliHooliday(Hooray))", "all x y.((Hit(x) & (Hooray(x) | Hooray(x))) -> HoliHoliday(x))", "all x y.((Hooray(x) & Hooray(y) & HoliHoliday(x)) -> #1HitInGermany(x))", "has #1HitInGermany(Hooray!Hooray!Hooray!Hooray!HollyHoliday(y))", "all x.(Hooray(x) -> (Hooray(x) & Hooray(x) & HoliHoliday(x)))", "all x.((Hooray(x) & Hooray(x) & HoliHoliday(x)) -> #1Hit(x))", "all x.((Hooray!Hooray!Hooray!Hooray!HoliDay(x)) -> #1StopInGermany(x))", "*(Hooray! Hooray! HoliHoliday! & #1HitInGermany(x))", "all x.(HoorayHooray! HoorayHooliday(x) -> Hit(x))"]}
{"id": "folio_train_698", "nl": "\"Hooray! Hooray! It's a Holi-Holiday!\" peaked below #1 on the German charts.", "fol": "PeaksBelowNumberOne(Hooray)", "prediction": ["all x.(Hooray!Hooray!Hooray!HolliHoliday!) -> PeakedBelow(x,1))", "all x.((Hooray(x) & Hooray(x) & HoliHoliday(x)) -> PeakedBelowPosition(x,y))", "(AvoidsHoliday(A) & \"Hooray(A) & Hooray(A)) -> (Piece(B) & Lower(B) & BritishCharts(B)))", "\"Hooray!\" --(Hooray) & HoliHoliday(-)) -PeakedBelowPreakInGermanCharts(-Really(Really(really))", "all x.(HappyHooliday(x) -> (AreHooliday(x) & PeakedBelow(x,1)))", "all x.(Hooray! Hooray! It's HoliHoliday! & PeakedBelowNo.1 OnGermanCharts(x))", "\"Hooray! Hooray! It's HoliHoliday!\" peaked below #1 on GermanCharts.", "all x.(Hooray(x) & Hooray(x) & HoliHoliday(x)) -> PeakedBelow(x,#1),GermanCharts(x))", "all x.((Hooray(x) & Hooray(x) & HoliHoliday(x)) -> PeakedBelow(x,y))", "\"Hooray!\" & \"Hooray! Hooray\" & HoliHoliday(x)\" peaked below #1 on GermanCharts.", "all x.(HoorayHoorayHoorayHoolidayAppetiteOnGermanCharts(x,1) -> HoliHolidayAppetite(x,1))", "-(Hooray!Hooray!Hooray!HeriHoliday! \") -> PeakedBelow(PoundEight(PoundEight(PoundEight(PoundEight(Pound)\")", "all x.(Hooray(x) -> HoliHoliday(x))", "all x.((Hooray(x) & HoliHooliday(x)) -> PeakedBelow(x))", "\"Hooray!\" (PeakedBelowNo.1 on GermanCharts))", "all x.((Hooray(x) & Hooray(x) & HoliHoliday(x)) -> PeakedBelow(x,1 & GermanCharts(x))"]}
{"id": "folio_train_699", "nl": "\"Hooray! Hooray! It's a Holi-Holiday!\" peaked at #3 on the UK charts.", "fol": "PeakedAt(Hooray,3,UKCharts)", "prediction": ["\"Hooray! Hooray! ItsHollyHoliday!\" peaked at #3 (UKCharts))", "\"Hooray\" (Hooray) & HoliHoliday(HorribleAt(Hourish)) peaked at #3 (UKCharts) & UKCharts(HourlyAt(HourlyAt(Homestead)))", "\"Hooray! Hooray! It's HoliHoliday!\" appears at #3 on UKCharts.", "all x.((Hooray!Hooray!Hooray!Hooliday!) -> PeaksInUK(x,3/8))", "all x y.((Hooray(x) & Hooray(y) & Holi(y)) -> PeakedAt#3.(Hooray(x,y) & Hooray(x,y)))", "\"Hooray! Hooray! It's a HoliHoliday!\" peakedAt#3 on the UKCharts.", "\"Hooray! Hooray! It's HoliHoliday! \" peaked at #3 on UKCharts.", "\"Epic(Evening(Evening) & HoorayHoorayHoorayHollyDay(Evening))", "\"Hooray! Hooray! It's HoliHoliday\" peaked at #3 on UKCharts.", "(PoppedAt#7OnUKCharts(Hooray,Hooray) & PoppingAt#3,Hooray(Hooray,Hooray))", "\"Hooray!\" (Hooray! Hooray! HoliHoliday\" & PeakedAt#1(UKCharts))", "\"Hooray! Hooray!Hooray! It's HoliHoliday!\" peaked at #3 on UKCharts.", "\"Hooray! Hooray! HoliHoliday!\" ranked #2 on UKCharts(x))", "all x.(Hooray(x) & Hooray(x) & HoliHoliday(x)) -> #4 OnUKCharts(x))", "all x.((Hooray!Hooray!Holiday!\" & #3(UKCharts(x)) -> HoliHoliday(x))", "'Hooray(Hooray) & HoliHoliday(Hooray) & PeaksAt#3OnUKCharts(Hooray)'"]}
{"id": "folio_train_700", "nl": "Every chef can cook.", "fol": "all x.(IsChef(x) -> CanCook(x))", "prediction": ["all x.(Chef(x) -> CanCook(x))", "all x.(Chef(x) -> CanCook(x))", "all x.(Chef(x) -> CanCook(x))", "all x.(Chef(x) -> CanCook(x))", "all x.(Chef(x) -> CanCook(x))", "all x.(Chef(x) -> CanCook(x))", "all x.(Chef(x) -> CanCook(x))", "all x.(Chef(x) -> CanCook(x))", "all x.(Chef(x) -> CanCook(x))", "all x.(Chef(x) -> CanCook(x))", "all x.(Chef(x) -> Cooks(x))", "all x.(Chef(x) -> CanCook(x))", "all x.(Chef(x) -> CanCook(x))", "all x.(Chef(x) -> CanCook(x))", "all x.(Chef(x) -> CanCook(x))", "all x.(Chef(x) -> CanCook(x))"]}
{"id": "folio_train_701", "nl": "Some people who aren\u2019t chefs can cook.", "fol": "exists x.(-IsChef(x) & CanCook(x))", "prediction": ["exists x.(People(x) & -Chef(x))", "exists x.((Person(x) & -Chef(x)) -> CanCook(x))", "exists x.((Person(x) & -Chef(x)) -> CanCook(x))", "exists x.((Person(x) & -Chef(x)) -> CanCook(x))", "exists x.((Person(x) & -Chef(x)) -> CanCook(x))", "exists x.(Person(x) & -Chef(x))", "exists x.((Person(x) & -Chef(x)) -> CanCook(x))", "exists x.((Person(x) & -Chef(x)) -> CanCook(x))", "exists x.(Person(x) & -Chef(x))", "exists x.(Knowledge(x) & -Chef(x))", "exists x.(People(x) & -Chef(x))", "exists x.(People(x) & -Chef(x))", "exists x.((Person(x) & -Chef(x)) -> CanCook(x))", "exists x.((Person(x) & -Chef(x)) -> CanCook(x))", "exists x.((Person(x) & -Chef(x)) -> CanCook(x))", "exists x.((People(x) & -Chef(x)) -> CanCook(x))"]}
{"id": "folio_train_702", "nl": "People who cook can make scrambled eggs and pasta.", "fol": "all x.(CanCook(x) -> (CanMakeScrambledEggs(x) & CanMakePasta(x)))", "prediction": ["all x.(Cooks(x) -> (MakesScrambledEggs(x) & MakesPasta(x)))", "all x.(Cooks(x) -> (MakesScrambledEggs(x) & MakesPasta(x)))", "all x.(Cooks(x) -> (MakingScrambledEggs(x) | MakingPasta(x)))", "all x.(Cook(x) -> (CreatesEggs(x) & MakesPasta(x)))", "all x.(Cooks(x) -> (MakesScrambledEggs(x) & MakesPasta(x)))", "all x y.((Person(x) & Cooks(x)) -> (RunsChambledEggs(x) & MakesPasta(x)))", "all x.(Cooks(x) -> (MadeScrambledEggs(x) | MakePasta(x)))", "all x.(Cooks(x) -> (Makes(x,scrambledEggs) & Makes(x,pasta)))", "all x.(Cooks(x) -> (MakeScrambledEggs(x) | MakePasta(x)))", "all x.(Cook(x) -> (MakesScrambledEggs(x) & MakesPasta(x)))", "all x.(Cooks(x) -> (MakesScrambledEggs(x) & MakesPasta(x)))", "all x y.((Cooks(x) & Person(y)) -> (MadeScrambledEggs(y) | MadePasta(y)))", "all x.(Cooks(x) -> (MakesScrambledEggs(x) & MakesPasta(x)))", "all x.(Cooks(x) -> (RawsCrambledEggs(x) | MakesPasta(x)))", "all x.(Cooks(x) -> (MakesScrambledEggs(x) | MakesPasta(x)))", "all x.(Cooks(x) -> (MakesScrambledEggs(x) | MakesPasta(x)))"]}
{"id": "folio_train_703", "nl": "If someone can make cookies and muffins, they are a baker.", "fol": "all x.((CanMakeCookies(x) & CanMakeMuffins(x)) -> IsBaker(x))", "prediction": ["all x.((BuildsCookiesAndMuffins(x) & CanMake(x,Minnows)) -> Baker(x))", "all x.((CanMakeCookies(x) & CanMakeMuffins(x)) -> Baker(x))", "all x.((Making(x) & Cookies(x) & MakingMuffins(x)) -> Baker(x))", "all x.((NeedsCookiesAndMuffins(x) & CanMakeMuffins(x)) -> Baker(x))", "all x.((MakingCookies(x) & MakingMuffins(x)) -> Baker(x))", "all x.((Man(x) & CanMakeCookies(x) & CanMakeMuffins(x)) -> Baker(x))", "all x.(((MakesCookies(x) & MakesMuffins(x)) -> Baker(x))", "all x.((MakingCookies(x) & MakingMuffins(x)) -> Baker(x))", "all x.((CanMakeCookies(x) & CanMakeMuffins(x)) -> Baker(x))", "all x.((CanMakeCookies(x) & CanMakeMuffins(x)) -> Baker(x))", "all x.((CanMakeCookies(x) & CanMakeMuffins(x)) -> Baker(x))", "all x.((CanMakeCookies(x) & CanMakeMuffins(x)) -> Baker(x))", "all x.(CanMakeCookiesAndMuffins(x) -> Baker(x))", "all x.(Cherk(x) & CanMakeCookies(x) & CanMakeMuffins(x)) -> Baker(x))", "all x.((Person(x) & CanMakeCookies(x) & MakePushrooms(x)) -> Baker(x))", "all x.((CanMakeCookies(x) & CanMakeMuffines(x)) -> Baker(x))"]}
{"id": "folio_train_704", "nl": "Bakers who can also make scrambled eggs can make a good breakfast.", "fol": "all x.((IsBaker(x) & CanMakeScrambledEggs(x)) -> CanMakeGoodBreakfast(x))", "prediction": ["all x.((Baker(x) & CanMakeScrambledEggs(x)) -> MakesGoodBreakfast(x))", "all x.((Baker(x) & MakesScrambledEggs(x)) -> MakesGoodBreakfast(x))", "all x.((Baker(x) & MakesScrambledEggs(x)) -> MakesGoodBreakfast(x))", "all x.((Baker(x) & MakeScrambledEggs(x)) -> GoodBreakfast(x))", "all x.((Baker(x) & MakeScrambledEggs(x)) -> MakeGoodBreakfast(x))", "all x.((Baker(x) & CanMakeScrambledEggs(x)) -> CanMakeGoodBreakfast(x))", "all x y.((Baker(x) & MakesScrambledEggs(x)) -> GoodBreakfast(y))", "all x.((Baker(x) & MakesScrabbledEggs(x)) -> MakesGoodBreakfast(x))", "all x.((Baker(x) & CanMakeScrambledEggs(x)) -> CanMakeGoodBreakfast(x))", "all x.((Baker(x) & MakesScrambledEggs(x)) -> CanMakeGoodBreakfast(x))", "all x.((Baker(x) & MakersScrambledEggs(x)) -> MakesGoodBreakfast(x))", "all x y.((Baker(x) & ScrambledEggs(y)) -> CanMakeGoodBreakfast(x,y))", "all x.((Baker(x) & MakeScrambledEggs(x)) -> MakesGoodBreakfast(x))", "all x.((Baker(x) & MakesScrambledEggs(x)) -> GoodBreakfast(x))", "all x y.((Baker(x) & MakesScrambledEggs(x and Eggs(y)) -> GoodBreakfast(x))", "all x.((Baker(x) & CanMakeScrambledEggs(x)) -> CanMakeGoodBreakfast(x))"]}
{"id": "folio_train_705", "nl": "Luke can make cookies, scrambled eggs, and muffins, but not pasta.", "fol": "(CanMakeCookies(Luke) & CanMakeScrambledEggs(Luke) & CanMakeMuffins(Luke) & -CanMakePasta(Luke))", "prediction": ["(all x.(Luke(x) -> (Makes(x,Cookies) | Makes(x,ScrambledEggs) | Makes(x,Muffins))) & -Makes(x,Pasta)))", "((Luke(Luke) & (Cookies(Luke) | ScrambledEggs(Luke) | Muffins(Luke))) -> CanMake(Luke))", "(all x.(Luke(x) -> (Make(x,Cookies) | Make(x,ScrambledEggs) | Make(x,Muffins))) & -Make(x,Pasta)))", "all x.(Luke(x) -> (MakesCookies(x) | MakesScrambledEggs(x) | MakesMuffins(x)) & -MakesPasta(x)))", "All x.(Lucky(x) -> (Makes(x,Cookies) & Makes(x,ScrabbledEggs) & Makes(x,Muffins) & -Makes(x,Pasta)))", "(Luke(Luke) & (MakesCookies(Luke) | MakesScrambledEggs(Luke) | MakesMuffins(Luke))) & -(MakesPasta(Luke) & MakesPasta(Luke)))", "all x.(Luke(x) -> ((Cookies(x) | ScrambledEggs(x) | Muffins(x)) & -Pasta(x)))", "(all x.(Luke(x) -> (MakesCookies(x) | MakesScrambledEggs(x) | MakesMuppies(x))) & -(MakesPasta(x) -> MakesPasta(x)))", "(all x.(Luke(x) -> (Cookie(x) | ScrambledEggs(x) | Muffins(x))) & -(Luke(x) -> (Makes(x,Cookies) | Makes(x,ScrabbledEggs) | Makes(x,Muffins)))))", "(all x.(Luke(x) -> (MakesCookies(x) | MakesScrambledEggs(x) | MakesMuffins(x))) & -(MakesPasta(x) -> MakesPasta(x)))", "(all x.(Luke(x) -> (MakesCookies(x) | MakesScrambledEggs(x) | MakesMuffins(x))) & -(MakesPasta(x) & (MakesCookies(x) | MakesScrambledEggs(x) | (MakesMuffins(x))))))", "((Lucky(Luke) & MadeCookies(Luke) & MadeScrambledEggs(Luke)) | MadeMuffins(Luke)) & -(Luke(Luke) & MadeScrambledEggs(Luke)) & -(Luke(Luke) & MadeMuffins(Luke))))", "(all x.(Luke(x) -> (MakeCookies(x) | MakeScrambledEggs(x) | MakeMuffins(x))) & -(MakePasta(x) -> MakePasta(x)))", "(Makes(Luke,Children) & Makes(Luke,Stumpkins)) -(Making(Luke,Children) | Making(luke,ScrambledEggs) | Making(Luke,Muffines)))", "(all x.(Luke(x) -> (CanMadeCookies(x) | CanMadeScrambledEggs(x) | CanMuffins(x))) & -((Luke(x) & CanMakePasta(x))) -> CanMakePasta(x)))", "(all x.(Luke(x) -> (MakeCookies(x) & MakeScrambledEggs(x) & MakeMuffins(x))) & (Luke(x) -> (MakesPasta(x) | MakesCookies(x)) | (MakesScrammbledEggs(x) & MakesMuffins(x)))))"]}
{"id": "folio_train_706", "nl": "Luke can make a good breakfast.", "fol": "CanMakeGoodBreakfast(Luke)", "prediction": ["exists x.(Luke(x) & MakesGoodBreakfast(x))", "(all x.(Luke(x) -> CanMakeGoodBreakfast(x)))", "Luke could make a goodBreakfast(luke)", "all x.(Cycle(x) -> CanMakeGoodBreakfast(x))", "all x.(Luke(x) -> CanMakeGoodBreakfast(x))", "exists x.(Luke(x) & MakesGoodBreakfast(x))", "all x.(Luke(x) -> CanMakeGoodBreakfast(x))", "all x.(Luke(x) -> CanMakeGoodBreakfast(x))", "all x.((Luke(x) & GoodBreakfast(x)) -> CanMake(x))", "all x.(Luke(x) -> CanMakeGoodBreakfast(x))", "all x.(Luke(x) -> CanMakeGoodBreakfast(x))", "Luke CanMakeGoodBreakfast(Luke)", "all x.((Luke(x) & Breakfast(y)) -> CanMake(x,y))", "all x.(Luke(x) -> MakesGoodBedfast(x))", "(MakesGoodBreakfast(Luke) -> MakesGoodBreakfast(Luke)))", "(GoodBreakfast(Luke) & Makes(Luke,Breakfast,Beach))"]}
{"id": "folio_train_707", "nl": "Luke is a chef.", "fol": "IsChef(Luke)", "prediction": ["Luke isChef(Luke)", "(Chef(Luke) & Chef(Luke))", "Luke is chefs.", "Luke is Chef(Luke)", "Luke is Chef(Lucy)", "Chef(Luke)", "all x.(Luke(x) -> Chef(x))", "(Chef(Luke) & Chef(Luke))", "Luke is chef.", "Luke is chef.", "Luke is chef.", "exists x.(Chef(x) & Luke(x))", "all x.(Leake(x) -> Chef(x))", "(Chef(Luke)", "Luke is chef(Luke)", "Luke is Chef(x)"]}
{"id": "folio_train_708", "nl": "All people who enjoy eating gelato ice cream would enjoy a vacation to Italy.", "fol": "all x.(EnjoysGelatoIceCream(x) -> EnjoysVacationToItaly(x))", "prediction": ["all x.((Person(x) & EnjoysEatingGelatoIceCream(x)) -> EnjoysVacationToItaly(x))", "all x.(EnjoysEatingGelatoIceCream(x) -> EnjoysVisitToItaly(x))", "all x.((Person(x) & EnjoysGelatoIceCream(x)) -> EnjoysVacationToItalie(x))", "all x.((Person(x) & EnjoysEatingGelatoIceCream(x)) -> EnjoysVacationToItalie(x))", "all x.((Performance(x) & EnjoysEatingGelatinOilCream(x)) -> EnjoysVacationTo(x,italia))", "all x.((Person(x) & EnjoysEatingGelatoIceCream(x)) -> EnjoysVacationToItalia(x))", "all x.((Person(x) & EnjoysGelatoIceCream(x)) -> EnjoysVacationToItalie(x))", "all x.(EnjoysEatingGalatoIceCream(x) -> EnjoysVacationToItaly(x))", "all x.((Person(x) & EnjoysGelatoIceCream(x)) -> EnjoysVacationToItaly(x))", "all x.((Butterfly(x) & EnjoysGelatoIceCream(x)) -> EnjoysVacationToItaly(x))", "all x.(LovesEatingGelatoIceCream(x) -> EnjoysVisitToItaly(x))", "all x.((Person(x) & EnjoysEatingGelatioIceCream(x)) -> EnjoysVacationToItaly(x))", "all x.((Person(x) & EnjoysEatingGelatoIceCream(x)) -> EnjoysVacationToItaly(x))", "all x.((Person(x) & EnjoysEatingGelatoIceCream(x)) -> EnjoysVacationToItalie(x))", "all x.((People(x) & EnjoysEatingGellatoIceCream(x)) -> EnjoysVacationToItaly(x))", "all x.(EnjoysEatingIceCreamGelato(x) -> EnjoysVacationToIndonesia(x))"]}
{"id": "folio_train_709", "nl": "There are no people who can resist the hallmark delectable drinks and desserts that are famed in Italy.", "fol": "all x.-CanResistDelectableDrinksAndDesserts(x)", "prediction": ["-exists x.(Person(x) & ResonatesToMelodies(x) & FamousInItaly(x))", "all x.(Macrocosm(x) -> -Resists(x))", "all x.((Person(x) & RefusesMemoryDelectableDrinksAndDesserts(x) & FamedInItaly(x)) -> -Perpetuate(x))", "-all x.(Resists(x) -> (DefensibleDrinks(x) & DelectableDesserts(x) & FamedInItaly(x)))", "-exists x.(People(x) & ResistsMarkmarkDefeitableDrinksAndDesserts(x) & FamedInItaly(x))", "all x y.((Person(x) & Person(y) & Likes(x,y)) -> ResistsMarkerDelectableDrinksAndDesserts(x))", "-exists x.(Sorta(x) & ResistsMarker(x) & DelectableDrinksAndDesserts(x) & FamousInItaly(x))", "all x.(DrinksAndDesserts(x) & FamedInItaly(x)) -> -Resists(x))", "-exists x.(Resists(x) & DelectableDrinksDesserts(x) & FamedInItalie(x))", "all x.(Resists(x) -> FamousInItalie(x))", "all x.(ResistsMemorableDeliciousDrinksAndDesserts(x) & FamousInItaly(x))", "\u2013 exists x.(Public(x) & ResistsMonitorlyDeliciousDrinksAndDesserts(x) & FamedInItaly(x))", "exists x.(Person(x) & ResistanceToMarkmark(x) & FoodFamousInItalie(x))", "all x.(ResistsTheMadeInItalyRichMarker(x,delectableDrinks(x) & FamousDesserts(x))", "all x.((Person(x) & ResistanceMendificantMuseumDelectableDrinksAndDesserts(x) & FamedInItaly(x)) -> -Person(x))", "all x.(ResistsMarker(x) -> (DelectableDrinks(x) & DelectableDesserts(x) & FamedInItaly(x)))"]}
{"id": "folio_train_710", "nl": "People either enjoy eating gelato ice cream or love to travel and vacation often.", "fol": "all x.(EnjoysGelatoIceCream(x) | LovesToTravelAndVacation(x))", "prediction": ["all x.(People(x) -> (LovesGalatoIceCream(x) | LovesTravelAndVacation(x)))", "all x.((Person(x) & EnjoysGelato(x)) | LovesToTravel(x))", "exists x.(Person(x) & (EnjoysEatingGelatoIceCream(x) | LovesToTravelAndVacation(x)))", "exists x.(Popular(x) & (AppreciatesEatingGelato(x) | LovesToTravel(x) & LovesToVacation(x)))", "all x.(Person(x) -> (EnjoysEatingGelatoIceCream(x) | LovesToTravelAndVacation(x)))", "all x.((People(x) & (EnjoyGelatoIceCream(x) | LoveToTravel(x))) -> ManyVacations(x))", "exists x.((Person(x) & (EnjoysEatingLegato(x) | LovesToTravel(x))))", "all x.(Person(x) -> (EnjoysEatingGelatoIceCream(x) | LovesToTravel(x) & LovesToVacation(x)))", "all x.(Person(x) -> (AwesomeEating(x,GelatoIceCream) | LovesToTravel(x) & LovesToVacation(x)))", "all x.((Person(x) & EnjoysEatingGelatoIceCream(x)) | LovesToTravelAndVacation(x))", "all x.(LovesToTravelAndVacation(x) -> (AppreciateGelatoIceCream(x) | LoveToTravelAndVacation(x)))", "exists x.(Personal(x) & (EnjoysEatingGelatoIceCole(x) | LovesToTravelAndVacation(x)))", "all x.(Person(x) -> (EntertainingGelatoIceCream(x) | LovesToTravel(x) & -LikesToVacation(x)))", "all x.((Person(x) & (EnjoysEatingGelatoIceCream(x) | LovesTravel(x))) -> VacationAyuveage(x))", "all x.((Person(x) & (EnjoysEatingLiquidGelato(x) | LovesToTravel(x))) -> EnjoysEatingLiquidGelato(x))", "(all x.((Person(x) & EnjoysEatingGelatoIceCream(x)) | LiebesToTravelAndVacation(x)))"]}
{"id": "folio_train_711", "nl": "If people often take study abroad semesters to Europe, then they do not regret their college experiences.", "fol": "all x.(TakesStudyAbroadToEurope(x) -> -RegretsCollegeExperiences(x))", "prediction": ["all x.((Person(x) & TakesStudyAbortSemesters(x) & ToEurope(x)) -> -RegretsCollegeExperience(x))", "all x y.((Person(x) & StudyAbroadSemestre(y) & ManyToEurope(x,y)) -> -RegretsCollegeExpectations(x))", "all x.((People(x) & TakesStudyAbroadLeaders(x) & ToEurope(x)) -> -RegretsCollegeExperiences(x))", "\u2013(People(Person) & TakesStudyAbroadSemestresToEurope(Person)) -> -RegretsCollegeExperience(Person))", "all x.((Person(x) & TakesStudyAbroadSemessionsToEurope(x)) -> -RegretsCollegeExperience(x))", "all x.((KnowledgeAtLargeSemesters(x) & TakesToEurope(x)) -> -RegretCollegeExperiences(x))", "all x y z.((People(x) & StudyAbroadSemester(y) & Europe(z) & Takes(x,y)) -> -RegretCollegeExperiences(x))", "all x y.((Person(x) & StudyAwaySemester(y) & TakesToEurope(x,y)) -> -RegretCollegeExpeeds(x))", "all x.((People(x) & TakesStudyAwaySemesters(x) & Experiential(x)) -> NoRegret(x))", "all x.((People(x) & TakesStudyAbroadSemestersToEurope(x)) -> -RegretCoupleExperiences(x))", "all x y.((Person(x) & StudyAboutSemestres(y) & TakesToEurope(x,y)) -> -RegretsCollegeExperiences(x))", "all x y.((Person(x) & StudyAbroad(y) & TakesToEurope(x,y)) -> NotRegretable(x))", "all x.((VolunteersStudyAbroadSemestrials(x) & ToEurope(x)) -> -RegretCourseExpectations(x))", "all x.((Person(x) & ManyStudiesAbroadSemestresToEurope(x)) -> -RegretsCollegeExperience(x))", "all x.((Person(x) & TakesStudyWorksAround(x,Europe)) -> -RegretsCompletionExperience(x))", "all x.((Person(x) & TakesStudyAbroadToEurope(x)) -> -RegretsCollegeExperiences(x))"]}
{"id": "folio_train_712", "nl": "If people love to travel and vacation often, then they often take study abroad semesters to Europe.", "fol": "all x.(LovesToTravelAndVacation(x) -> TakesStudyAbroadToEurope(x))", "prediction": ["all x.((People(x) & LovesToTravel(x) & LovesToVacation(x)) -> StudiesAbrahamElectron(x,Europe))", "all x.(LovesToTravelAndVacationLikely(x) -> TakesStudyAdjacentSemestriums(x,Europe))", "all x y.((Person(x) & LovesToTravel(x) & Travels(y) & VacationsOften(x)) -> TakesStudyAbroadSemestersToEurope(x))", "all x y.((Parent(x) & LovesToTravel(x) & LovesToVacation(x) & OftenTravels(x)) -> TakesStudyAbroadSemestries(y))", "all x y.((LovesToTravel(x) & LovesToVacation(x)) -> TakeStudyAbroadSemester(y,x))", "all x.(LivingToTravelAndVacation(x) -> TakesStudyAwaySemestriesToEurope(x))", "all x.((LovesToTravel(x) & LovesVacations(x)) -> takesStudyAwaySemestersToEurope(x))", "all x.((LovesToTravel(x) & Vacation(x)) -> TakesStudyAbroadSemestersToEurope(x))", "all x.((LovesTravel(x) & LovesVacation(x)) -> TheseSchoolsInEurope(x))", "all x.((LovesToTravel(x) & LovesToVacation(x)) -> TakingStudyAwaySemestersToEurope(x))", "all x.((Person(x) & LoveToTravel(x) & LoveToVacation(x)) -> TakesStudyAbroadSemesters(x,Europe))", "all x.(LovesDepthToTravelAndVacation(x) -> TakesStudyAbroadSemestersToEurope(x))", "all x.((LovesToTravel(x) & LovesToVacation(x)) -> TakesStudyAbroadSemestersToEurope(x))", "all x.(Loves(x,t) & TravelsAndVacationsOften(x) -> StudiesAtLargeSemestersToEurope(x))", "all x.(LovesToTravelAndVacation(x) & AndOftenTakeStudyAcrossEuropaSemesters(x)) -> AndAffords(x))", "all x.((LovesToTravel(x) & LovesToVacation(x)) -> TakesStudyAwaySemestersToEurope(x,Europe))"]}
{"id": "folio_train_713", "nl": "Robert either enjoys eating gelato ice cream and loves to travel and vacation often, or he neither enjoys eating gelato ice cream nor loves to travel and vacation often.", "fol": "((EnjoysGelatoIceCream(Robert) & LovesToTravelAndVacation(Robert)) | (-EnjoysGelatoIceCream(Robert) & -LovesToTravelAndVacation(Robert)))", "prediction": ["(all x.((Robert(x) & EnjoysGelatoIceCream(x)) -> (FavorsGelatoIceCream(x) & LovesToTravel(x) & LovesToVacation(x))) & ((Robert(x) & -FavorsGelatoIceCream(x)) -> -FavorsToTravel(x) & Favors(x))))", "(all x.((Robert(x) & EnjoysGellatoIceCream(x) & LikesToTravel(x)) | (-EarnsGellatoIceCream(x) & LovesToTravel(x))))", "all x.((Robert(x) & EnjoysRisingGelatioIceCream(x) & LikesToTravelAndVacation(x)) | (-LovesRisingGelatioIceCream(x) & LikesToTravelAndVacation(x))))", "(exists x.(Rebel(x) & EnjoysEatingGelatoIceCream(x) & TravelsAndVacationsFrequently(x)) | -EatsGelatoIceCream(x) & TravelsAndVacationsFrequently(x)))", "(all x.((GelatoIceCream(x) & Enjoys(x)) | ((GelatoIceCream(x) & Enjoys(x) & TravelsAndVacations(x)) & -(GelatoIceCream(x) & TravelsAndVacations(x)))))", "all x.((Robert(x) & (AfcomesGelatoIceCream(x) | LovesToTravel(x) & LovesToVacation(x))) -> -AfcomesGelatoIceCream(x))", "(all x.(EatensGelatoIceCream(x) -> (LovesToTravel(x) & LovesToVacation(x))) & ((EatensGelatoIceCream(x) & -LovesToTravel(x)) & LovesToVacation(x)) -> (-LovesToTravel(x) & LovesToVacation(x))))", "-((Robert(Robert) & EnjoysEatingGelatioIceCream(Robert) & LovesToTravelAndVacation(Robert)) | (-EatsGelatioIceCream(Robert) & LovesToTravelAndVacation(Robert))))", "(Eats(Robert) & ((Eats(Robert) & GelatoIceCream(Robert)) | (-Eats(Robert,gelatoIceCream) & LovesToTravelAndVacation(Robert))) | (-Eats(Robert) & GelatoIceCream(Robert) & LovesToTravelAndVacation(Robert))))", "exists x.(Robert(x) & ((EnjoysGelatoIceCream(x) & LovesTravel(x) & LovesVacation(x)) | -EnjoysGelatoIceCream(x) & LovesTravel(x))))", "(all x.((Robert(x) & EnjoysGlegatoIceCream(x)) -> (LovesToTravel(x) & LovesToVacation(x))) | ((Robert(x) & -LOVESGlegatoIceCream(x)) | (-LovesToTravel(x) & LovesToVacation(x))))))", "(all x.((Roger(x) & EnjoysEatingGelatoIceCream(x) & -LovesToTravelAndVacation(x))) -> (-LovesEatingGelatoIceCream(x) & -LovesToTravelAndVacation(x)))", "(all x.((GegatoIceCream(x) & EnjoysEating(x)) -> (LovesToTravel(x) & LovesToVacation(x))))", "exists x.(Robert(x) & ((EnjoysEatingGelatoIceCream(x) & LovesToTravelAndVacation(x)) | (-EnjoysEatingGelatoIceCream(x) & LovesToTravelAndVacation(x)))))", "(ExperiencesEating(Robert) | (ExperiencesEating(Robert) & LovesTravel(Robert) & LovesToVacation(Robert))))", "(all x.((GelatoIceCream(x) & Eats(x,g)) -> LovesToTravelAndVacation(x)) | (GelatoIceCream(x) & -LovesToTravelAndVacation(x))))"]}
{"id": "folio_train_714", "nl": "Robert can resist the hallmark delectable drinks and desserts that are famed in Italy.", "fol": "CanResistDelectableDrinksAndDesserts(Robert)", "prediction": ["all x y.((Robert(x) & Italy(y) & SignatureDrink(x,y) & SignatureDessert(x,y)) -> CanResist(x,y))", "all x.(Robert(x) -> ResistsVariety(x))", "all x.(Robert(x) -> (ResistsMuseumTelegrams(x) & KnownFor(x,MadeItaly) & DelectableDrinksAndDesserts(x)))", "all x y.((Robert(x) & Italy(y)) -> (Resists(x,y) & FamousIn(x) & DelectableDrinksAndDesserts(x,y)))", "all x.(Robert(x) -> (ResistsMarkitableDrinksAndDesserts(x) & FamedInItaly(x)))", "all x y.((Robert(x) & SignificantDrinkNames(x) & SignificantDesserts(y)) -> CanResist(x,y))", "all x.(RobertStorm(x) -> (CanResistMenu(x,y) & DelectableDrinks(y) & DelectableDesserts(y) & FamousInItalie(x)))", "all x.((Robert(x) & MarkersDeficitableDrinksAndDesserts(x) & FamedInItaly(x)) -> Resists(x))", "all x.(Robert(x) -> (ResistsMadeInItaly(x) & FavoriteDrinksAndDesserts(x)))", "all x.(Robert(x) -> (CanResistMarker(x) & Desirable(x) & FamousInItaly(x)))", "all x.(Robert(x) -> (ResistsMarketDelectableDrinks(x) & ResistsDelectableDesserts(x) & FamedInItalie(x)))", "all x.((Robert(x) & Resists(x)) -> (Defiant(x,deliciousDrinks) & Famous(x,deliciousDesserts)))", "all x.(Robert(x) -> ResistsMotorcycleDelectableDrinksAndDesserts(x))", "all x.(Robert(x) -> (ResistsMarker(x) & DelectableDrinksAndDesserts(x) & FamedInItaly(x)))", "all x y z.((Robert(x) & DelectableDrinksAndDesserts(y) & Italy(z) & KnownFor(x,y,z)) -> Resists(x,y))", "all x y.((Robert(x) & Italy(y)) -> ResistsValuedDrinksAndDesserts(x,y))"]}
{"id": "folio_train_715", "nl": "If Robert either would both enjoy a vacation to Italy and regrets his college experiences or neither would enjoy a vacation to Italy nor regrets his college experiences, then Robert would either enjoy a vacation to Italy or, if not, then he can resist the hallmark delectable drinks and desserts that are famed in Italy.", "fol": "(((EnjoysVacationToItaly(Robert) & RegretsCollegeExperiences(Robert)) | (-EnjoysVacationToItaly(Robert) & -RegretsCollegeExperiences(Robert))) -> (EnjoysVacationToItaly(Robert) | (-EnjoysVacationToItaly(Robert) & CanResistDelectableDrinksAndDesserts(Robert))))", "prediction": ["all x.(((Resists(x) & EnjoysVacationToItaly(x) & RefusesCollegeExperiences(x)) -> ((EnjoysVacationToItaly(x) | -RefutesCollegeExperiences(x))))", "all x.((Robert(x) & ((EnjoysVacationToItaly(x) & CollegeExperiencesRegrets(x)) | -EnjoysVacationToItaly(x))) -> (SharesDelectableDrinks(x) & RefutesDestinations(x))))", "all x y.((Robert(x) & EnjoysVacationToTo(x,y) & -EnjoysVacationTo(x,y) & CollegeExperiences(x)) -> (EnjoysVacationTo(x,y) | -EnjoysVacationTo(x,y) & CollegeExperiences(x,y)))", "all x.((ResistsMarkleDelectableDrinksAndDesserts(x) & ExperiencesFamousInItaly(x)) -> (EnjoysVacationToItaly(x) | -EnjoysVacationToItaly(x) | RefusesCollegeExperiences(x)))", "all x.((Robert(x) & ((EnjoysVacation(x,Italy) & RefusesCollegeExperiences(x)) | -EnjoysVacation(x,Italy) & RefusesCollegeExperiences(x,Italy))) -> ((EnjoysVacation(x,Italy) | ResistsMammal(x,Italy)))))", "all x.((Robert(x) & (EnjoysVacationToItaly(x) | -EnjoysVacationToItaly(x))) | (-EnjoysVacationToItaly(x) & -ReproducesCollegeExperiences(x))))", "all x.((Robert(x) & (EnjoysVacationTo(x,Italy) | -EnjoysVacationTo(x,Italy))) | (-EnjoysVacationTo(x,Italy)))))", "all x.((Robert(x) & (18(SharesWithCompanyExpectations(x) & EnjoysVacationToItaly) & -ReproducesCollegeExpectations(x))) -> ((SharesWithCompanyExpectations(x) & ExperiencesCollege(x)) | (-SharesWithCompanyExpectations(x) & EnjoysVacationToItaly)))))", "all x.((Robert(x) & (EnjoysVacation(x,Italie) | -EnjoysVacation(x,Italie))) | -RegretsCollegeExperiences(x,Italie)))", "all x.((Robert(x) & (EnjoysVacationToItaly(x) | (-EnjoysVacationToItaly(x) | Refuses(x)))) -> (EnjoysVacationToItaly(x) | Refuses(x))))", "all x.((Robert(x) & (EnjoysVacationToItalia(x) | -EnjoysVacationToItaly(x))) | (-EnjoysVacationToItaly(x) & -ReproachesCollegeExperiences(x))))", "all x.((Robert(x) & (EnjoysVacationTo(x,Italy) & ReproducesCollegeExperiences(x) | -EnjoysVacationTo(x,Italy))) -> (EnjoysVacationTo(x,Italy) | ResistsMudson-DelectableDrinksAndDesserts(x,Italy)))", "all x y.((Resists(x,y) & EnjoysVacation(x,y) & CollegeExpectations(x)) -> ((EnjoysVacation(x,y) & Recommits(x)) | (-EnjoysVacation(y,x) & RecommendsCollegeExpectations(y)))))", "all x.((Robert(x) & (EnjoysVacationToItaly(x) | -EnjoysVacationToItaly(x))) | (-EnjoysVacationToItaly(x) & -RespectsCollegeExperiences(x))))", "all x.(((Robert(x) & EnjoySaturdayToItaly(x) & (RegretsCollegeExperiences(x) | -EnjoysSaturdayToItalian(x))) -> (EnjoysSaturdayToItaly(x) | -RegretsCollegeExperiences(x))))", "all x.((Robert(x) & (EnjoysVacationToItaly(x) | -EnjoysVacationToItaly(x))) -> ((EnjoysVacationToItaly(x) & RefusesCollegeExperiences(x)) | RefusesWristMeditation(x))))"]}
{"id": "folio_train_716", "nl": "If Robert is not both a person who can resist the hallmark delectable drinks and desserts that are famed in Italy and regrets his college experiences, then Robert either enjoys eating gelato ice cream or would enjoy a vacation to Italy.", "fol": "(-(CanResistDelectableDrinksAndDesserts(Robert) & RegretsCollegeExperiences(Robert)) -> (EnjoysGelatoIceCream(Robert) | EnjoysVacationToItaly(Robert)))", "prediction": ["all x.((Castle(x) & -ResistsMarkerWithDelectableDrinksAndDesserts(x) & FamedInItalie(x) & ResignsCollegeExperiences(x)) -> (EatingGelatoIceCream(x) | EnjoyingVacationToItaly(x)))", "all x.((Person(x) & ResistsMemorialDelectableDrinksAndDesserts(x) & FamedInItaly(x) & RefusesCollegeExperiences(x)) -> (AmenitiesEatingGelatoIceCream(x) | EnjoysVacationToItaly(x)))", "all x.((Person(x) & -(ResistsMarkerDelectableDrinks(x) & ResistsDeliciousDesserts(x) & FamedInItalie(x) & RefusesCollegeExperiences(x))) -> (EnjoysEatingGelatioIceCream(x) | EnjoysVacationToIndonesia(x))))", "all x.((ResistsMemorable(x) & DelishableDrinksAndDesserts(x) & FamedInItaly(x) & RefusesCollegeExperiences(x)) -> (EnjoysEatingGelatoIceCream(x,y) | EnjoysVacationToItaly(y,x))))", "all x.((Person(x) & -ResistsMotorheadDelectableDrinksAndDesserts(x) & FamedInItaly(x) & RefusesCollegeExperiences(x)) -> (EnjoysEatingGelatoIceCream(x) | EnjoysVacationToItaly(x)))", "all x.((Robert(x) & -ResistsMarkmarkDelectableDrinksAndDesserts(x) & FamedInItaly(x) & RefusesCollegeExperiences(x)) -> (EnjoysEatingGelatio(x) | EnjoysVacationToItaly(x)))", "all x.((ResistsMarkmarkDrinksAndDesserts(x) & FamilledInItaly(x) & RefusesCollegeExperiences(x,y)) -> (EnjoysEatingGelatoIceCream(x,y) | EnjoysVacationToItaly(x,y)))", "all x.((ResistsLimitedDeliciousDrinksAndDesserts(x) & FamedInItaly(x) & RefusesCollegeExperiences(x)) -> (EnjoysEatingGelatoIceCream(x) | EnjoysVacationToItaly(x)))", "all x.((Robert(x) & -(ResistsMarkentDelectableDrinksAndDessertsFamousInItaly(x) & RefusesCollegeExperiences(x))) -> (EnjoiesEatingGelatoIceCream(x) | EnjoysVacationToItaly(x))))", "((ResistsDrinksAndDesserts(recommendedInItaly) & RefusesCollegeExperiences(Robert)) -> (EnjoysGelatinoIceCream(Robert) | EnjoysVacationToItaly(Robert))))", "all x y.((Robert(x) & University(y) & RefusesMarkerDelectableDrinksAndDesserts(x,y) & FamedInItaly(x) & RefusesCollegeExperiences(x)) -> (EnjoysEatingGelatoIceCream(x) | EnjoysVacationToItaly(x)))", "all x.((Robert(x) & -ResistsMarketDelectableDrinksAndDesserts(x) & FamedInItaly(x) & RefusesCollegeExperiences(x)) -> (EnjoysEatingGeletoIceCream(x) | EnjoysVacationToItaly(x))))", "all x.((Person(x) & -(ResistsMemorableDelectableDrinksAndDesserts(x) & FamedInItaly(x) & RefusesCollegeExperiences(x))) -> (EnjoysEatingGelatoIceCream(x) | EnjoysVacationToItaly(x))))", "all x y.((Robert(x) & -Resists(x,y) & Mild (y) & FamousDrinksAndDesserts(y) & KnownIn(x,y)) & CollegeExperiences(x) & CollegeEctache(y) & EnjoysEating(x,y)) -> (Enjoys(x,z) | EnjoysVacation(z)))", "all x.((Robert(x) & -MadeToResistWerkfast(x) & FlavorlessDeliciousDrinksDessertsInItaly(x) & RepossesCollegeExperiences(x)) -> (EnjoysEatingGelatioIceCream(x) | EnjoysVacationToItaly(x)))", "all x.((Robert(x) & -(ResistsMarkerTolerance(x) & FiestaDrinksAndDesserts(x) & FamedInItaly(x) & RefusesCollegeExperiences(x))) -> (EnjoysEatingGelatoIceCream(x) | EnjoysVacationToItaly(x))))"]}
{"id": "folio_train_717", "nl": "ETS develops various standardized tests primarily in the United States for K-12 and higher education. ", "fol": "exists x.(DevelopsTests(Ets,x) & StandardizedTest(x) & LocatedInCountry(x,Unitedstates) & ForEducationLevel(x,K12andhighereducation))", "prediction": ["all x y.((ETS(x) & UnitedStates(y)) -> (DevelopedSpecifiedTests(x,y) & UsedForK-12(x) & UsedForHigherEducation(x)))", "all x.(ETS(x) -> exists y z.(StandardizedTest(y) & AmericanPlace(z) & Creates(x,y,z)) & exists w.(NationalPlace(w) & NationalPlace(w) & SpecificallyFor(x,w)) & exists w.(EducationalLevel(w) & EducationRightEd(w) & Develops(x,y,z))))", "all x y.((ETS(x) & UnitedState(y)) -> (DevelopsSpecifiedTests(x,y) & ForK-12AndHigherEducation(x,y)))", "all x.(ETS(x) -> (exists y.(K-12) & Develops(x,y)) & exists z.(Mover(z) & Develops(x,z))) & exists w.(HigherEducation(w) & Develops(x,w))))", "all x y.((ETS(x) & UnitedStates(y)) -> (DevelopedTests(x,y) & PrimaryTests(x,y)))", "all x y z.((ETS(x) & (K-12(y) | HigherEducation(z))) -> DevelopsStandardizedTests(x,y,z))", "all x y z.((ETS(x) & Standardstamps(y) & School(z) & HigherEducation(z)) -> Develops(x,y,z))", "all x.(ETS(x) -> (exists y.((K-12(y) | HigherEducation(y)) & DevelopsConsultingTests(x,y))))", "all x y.((ETS(x) & UnitedStates(y)) -> (DevelopsSpecifiedTests(x,y) & ForK-12(y) & ForHigherEducation(x,y)))", "all x y z.((ETS(x) & (K-12(y) | HigherEducation(z))) -> DevelopsSpecifiedTests(x,y,z))", "all x.(ETS(x) -> exists y.(StoriedTests(y) & SpecializedTests(x,y)) & exists z.(K-12(z) | HigherEducation(z))) & DevelopsIn(x,z)))", "all x y z.((ETS(x) & NormatedTest(y) & K-12Education(z)) -> Develops(x,y))", "all x y z.((ETS(x) & UNIState(y) & K-12(z) & HigherEducation(z)) -> DevelopsStandardizedTests(x,y,z))", "all x y z w.((ETS(x) & SpecifiedTest(y) & Country(z) & ForK-12Education(w) & HigherEducation(w)) -> DevelopsIn(x,y,z))", "all x y.((ETS(x) & UnitedStates(y)) -> (DevelopsStandardizedTests(x,y) & ForK-12AndHigherEduution(x)))", "all x y z.((ETS(x) & (K-12(y) | HigherEducation(z))) -> DevelopingStandardizedTests(x,y,z))"]}
{"id": "folio_train_718", "nl": "ETS administers international tests including the TOEFL, TOEIC, GRE and subject tests in more than 180 countries.", "fol": "exists x.(AdministersTests(Ets,x) & InternationalTest(x) & (TOEFLTest(x) | TOEICTest(x) | GRETest(x) | SubjectTests(x)))", "prediction": ["all x.(ETS(x) -> (AdministratesInternationalTests(x) & exists y z.(ToEFL(y) & ToEIC(z)) & exists w.(Graduate(w) & Test(y) & Test(w) & Test(w)) & exists w.(Land(w) & Test(w)) & AssistsIn(x,y,w)))", "all x y z.((ETS(x) & (ToEFL(y) | TOEIC(y) | GRE(y) & SubjectTests(y)) & MoreThan180Countries(z)) -> AdministersInternationalTests(x,y,z))", "all x y.((ToEFL(x) & TOEIC(y) & GRE(y) & MoreThan180Countries(x,y)) -> AdministersInternationalTestsIn(x,y))", "all x.(ETS(x) -> (AdministersInternationalTests(x,TOEFL) & AdministersInternationalTests(x,GRE) & AdministersInternationalTests(x,subject)))", "all x y z.((ETS(x) & (TOEFL(y) | TOEIC(y) | GRE(y)) & SubjectTest(z)) -> (AdministersIn(x,y) & (ToEFL(y) | ToEIC(y) | GRE(y) | SubjectTest(y))))", "all x y z.((ETS(x) & TOEFL(y) & TOEIC(z) & GRE(z)) -> (AdministersInternationalTests(x,y,z) & InMoreThan(x,180)))", "all x.(Tests(x) -> (AdministersInternationalTests(x) & (ToEFLTest(x) | TOEICTest(x) | GRETest(x)) & MoreThan180Countries(x)))", "all x.(ETS(x) -> (AdministsInternationalTests(x,ToEFL,ToEIC,GRE) & ExtensiveTestsIn+399Countries(x)))", "all x y z.((ETS(x) & (TOEFL(y) | TOEIC(y) | GRE(y)) & SubjectTest(y)) -> AssistersInMoreThan(x,y,z))", "all x y.((ETS(x) & (ToEFL(y) | TOEIC(y) | GRE(y)) \u00bb & SubjectTest(y))) -> AdministrationInOver(x,y))", "all x y.((ETS(x) & Country(y)) -> (AdministersInternationalTests(x,y) & IncludesToEFLTests(x) & IncludesToEICTests(x) & IncludesGREETests(x) & IncludesSubjectTests(x,y)))", "all x.(ETS(x) -> (AdministersInternationalTests(x) & includesToEFL,ToEIC,GRE and SubjectTests(x)))", "all x y.((ETS(x) & (TOEFL(y) | TOEIC(y) | GRE(y)) & SubjectTest(y)) -> AdministersInMoreThan180Countries(x,y))", "all x y z.((ETS(x) & (ToEFL(y) | TOEIC(y) | GRE(y)) & SubjectTests(z)) -> AdministrationInMoreThan(x,y,z))", "all x y z.((ETSAssists(x) & (ToEFL(y) | TOEIC(y) | GRE(y)) & in(x,y,z)) -> MoreThan180Countries(x))", "all x y z.((ETS(x) & InternationalTest(y) & Countries(z)) -> (Administers(x,y) & Tests(x,y,z)))"]}
{"id": "folio_train_719", "nl": "Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions. ", "fol": "exists x.(DevelopsTests(Ets,x) & AssociatedWithEntry(x,EntryToUSEducationInstitutions))", "prediction": ["all x.((Assistance(x) & ETSDevelops(x)) -> AssociatedToEntranceToUSEducationalInstitutions(x,tertiaryInstitutions,quaternaryInstitutions))", "all x.(Assessment(x) -> (ETSDevelops(x) & EntryToUSTertiaryEducationInstitutions(x) & EntryToQuaternaryEducationInstitutions(x)))", "all x.((Assertion(x) & ETSDevelops(x)) -> AssociateWithEndToU.S.TertiaryAndQuaternaryEducationInstitutions(x))", "all x.((Evaluations(x) & ETSDevelops(x)) -> (AssociatedEvening(x,tertiary) | AffiliatedEngagement(x,quaternary)))", "all x.((Assistance(x) & ETSDevelops(x)) -> (AttributesToEntertiaryEducation(x) & AssociatesToQuaternaryEducationInstitutions(x)))", "all x.((EASsuringAssessment(x) & ETSFormsDevelop(x)) -> AssociativeWithEntryToU.S.TertiaryOrQuaternaryEducation(x))", "all x y.((Assistance(x) & ETSDevelops(x,y)) -> (AssociatedWithEntryToTertiaryAndQuaternaryEducationInstitutions(y)))", "all x.(ETS(x) -> exists y.(EntryInstitution(y) & EntersTo(x,y))))", "all x.((Assesses(x) & ETSDevelops(x)) -> IncludesEntryToUSETs(x))", "all x.(ETS(x) -> (Terms(x) & EntryToU.S.Tertiary(x) & EntryToQuaternary(x)))", "all x.(AdvancedAssessment(x) -> (EntranceToTertiaryOrQuaternaryEducation(x) | EntryToQuaternaryEducation(x)))", "all x.(EASsance(x) -> (exists y.(U.S.tertiaryEducationInstitution(y) & Entrance(x,y)) & AffectsTo(x,y)))", "all x y.((ETS(x) & EthicalInstitution(y)) -> AssociatedWithEntrance(x,y))", "all x y.((Assestment(x) & ETSDevelops(x)) -> (AssociatesEntranceTo(y,TertiaryEducation) & AssociatesEntranceTo(y,QuaternaryEducation)))", "-all x.(ETS(x) -> (EntryToUsertiaryEducationInstitutions(x) | EntryToQuaternaryEducationInstitutions(x)))", "all x.((Assessment(x) & Develops(x)) -> AssociatedWithEntryToU.S.(tertiary(x) | Quaternary(x)))"]}
{"id": "folio_train_720", "nl": "ETS also develops K-12 statewide assessments used for accountability testing in many states.", "fol": "exists x.(DevelopsTests(Ets,x) & StateWideAssessment(x) & UsedForPurpose(x,AccountabilityTesting))", "prediction": ["all x y.((ETS(x) & State(y)) -> (DevelopsK-12StatewideAssesses(x,y) & UsedForAccountabilityTesting(x,y)))", "all x.(ETSDevelopsK-12StatewideAssesses(x) & UsedForAccountabilityTesting(x))", "(all x.(ETSDevelopsChronomicAssessments(x,K-12) & UsedForAccountabilityTesting(x,Country)) -> Assessements(x,K-12))", "ETS also develops K-12StatewideAssesses(EtStatement(EtStatement(EtStatement) & AccountabilityTest(e))", "all x.(ETS(x) -> (DevelopsK12StatewideAssessments(x) & UsedForAccountabilityTesting(x)))", "all x y.((Region(x) & State(y)) -> DevelopsStatewideAssisesForAccountability(x,y))", "all x.(ETS(x) -> (DevelopsK-12StatewideAssesses(x) & UsedForAccountabilityTesting(x)))", "(FormsAssemblies(ETS,K12) & UsedForAccountabilityTesting(ETS,ManyStates))", "all x y.((ETS(x) & State(y)) -> DevelopsStatewideAssesses(x,y))", "all x y.((ETS(x) & State(y)) -> DevelopsK-12StatewideAssesses(x,y))", "all x y.((ETS(x) & State(y)) -> DevelopsK-12StatewideAssessments(x,y))", "all x y.((ETS(x) & State(y)) -> (DevelopsK-12StatewideAssessments(x,y) & UsedForAccountabilityTesting(x,y)))", "all x y z.((ETS(x) & State(y) & State(z)) -> (DevelopsStatewideAssemblies(x,y,z) & UsedForAccountabilityTesting(x,y)))", "all x y.((ETS(x) & State(y) & DevelopsK-12StatewideAssessments(x,y)) -> UsedForAccountabilityTestingInManyStates(x,y))", "all x.(ETS(x) -> exists y.(K-12StatewideAssessment(y) & developedBy(x,y)))", "ETS develops K-12StatewideAssesments(ETS) & UsedForAccountabilityTestingInManyStates(ETS)"]}
{"id": "folio_train_721", "nl": "ETS develops assessments for K-12 statewide as well as entry to US tertiary and quaternary education institutions.", "fol": "exists x.(DevelopsTests(Ets,x) & (ForEducationLevel(x,K12andhighereducation) | AssociatedWithEntry(x,EntryToUSEducationInstitutions)))", "prediction": ["(developsAssesses(ETS) & StudiesStatewideStatement(ETS) & StudiesEntry(ETIS) & StudiesQuaternaryEducation(ETS))", "all x.(ETS(x) -> (ProvidesAssesses(x,K-12) & StatestatewideEntry(x) & USTertiaryOrQuaternaryEducationalInstitutions(x)))", "(Developed(eTests) & (K-12Statewide(e) | USTertiaryEducationalInstitutions(e) & USQuaternaryEducationalInstitutions(e))))", "all x y z.((ETS(x) & K-12(y) & States(z) & (Tritiary(z) | Quaternary(z)))) -> (DevelopsAssessements(x,y) & For(x,z)))", "all x.(ETS(x) -> (DevelopsAssesses(x,K-12) & BuildsEntry(x,EntertiaryInstitutions) & DevelopsAssesses(x,QuaternaryInstitutions)))", "all x.(ETS(x) -> (developsAsses(x,k-12) & StatewideAssessment(x) & EntersUSTertiaryAndQuaternaryEducationInstitutions(x)))", "all x.((ETS(x) & Evaluation(x,K-12),Statewide(x) & EntryTo(x,Tertiary(x) | EntryTo(x,Quaternary(x))) -> DevelopsFor(x,K-12))", "all x y z.((ETS(x) & (K-12Assignment(y) | EntryToTertiaryInstitutions(z) | EntryToQuaternaryInstitutions(z))) -> Develops(x))", "all x.(ETS(x) -> DevelopsAsses(x,K-12) & DevelopsAssesses(x,TertiaryAndQuaternaryEducationInstitutions))", "all x y.((ETS(x) & K-12(y)) -> (DevelopsAssesses(x,statewide) & EstablishesAssessments(x) & EntersToUserTertiaryAndQuaternaryEducation(x,y)))", "all x y.((ETS(x) & K-12(y)) -> (DevelopsAssessmentAssessmentAssessementAssessement(x,y) & forEngagement(x,y)))", "all x.((ETS(x) & StatewideAssembly(x,k-12) & EntersInstitutions(x,tertiary)) -> DevelopsAssessments(x,k-12))", "all x.(Tertiary(x) & Quaternary(x)) -> DevelopsAssessmentsForK-12(x))", "all x.(ETS(x) -> (AssesK-12(x) & EntersToUSTertiaryAndQuaternaryEducationInstitutions(x)))", "all x.(ETS(x) -> (developsAssessements(x,K-12) & Studies(x,Tertiary) & DevelopsAssessments(x,Quaternary)))", "all x.(ETScientificAssessment(x) -> (DevelopsAssessesForK-12(x) & EntranceToUSTertiaryOrQuaternaryEducation(x)))"]}
{"id": "folio_train_722", "nl": "ETS doesn't administer tests internationally.", "fol": "-exists x.(AdministersTests(Ets,x) & InternationalTest(x))", "prediction": ["all x.(ETS(x) -> -CanAdministerTestsInternationally(x))", "ETS -RegistersInternationalTests(ETS)", "(-exists x.(ETS(x) & International(x)))", "all x.(ETS(x) -> -exists y.(InternationalTravel(y) & AdministersInternational(x,y))))", "(NET(e) & Internationally(e))", "(exists x.(ETS(x) & -DiagnoseInternationalTests(x)))", "-exists x.(ETS(x) & InternationalTest(x))", "In its own right, TestsInternationally-Grant(s)", "ETS -AssistersTestsInternationally(ETS)", "all x.(ETS(x) -> -AdministersInternationalTests(x))", "(-assignsinternationally(ETS)).", "all x.(ETS(x) -> DoesNotAdministerTests(x))", "all x.(ETS(x) -> -AdministersInternationalTests(x))", "(SwissTest(ETS) & -International(ETS))", "all x.(ETS(x) -> -InternationalTests(x))", "(-administersExitTestsInternationally))"]}
{"id": "folio_train_723", "nl": "ETS administers international tests including the TOEFL, GRE and subject tests in China.", "fol": "exists x.(AdministersTests(Ets,x) & InternationalTest(x) & (TOEFLTest(x) | GRETest(x) | SubjectTests(x)) & LocatedInCountry(x,China))", "prediction": ["all x.(ETS(x) -> (AdministratesInternationalTests(x,ToEFL & AdministrationOfInternationalTests(x,GRE) & AdministrationOfInternationalTests(x,SubjectTests)))", "all x y z.((ETS(x) & InternationalTest(y) & (Tree(z) | Test(z))) -> (Administers(x,y,z) & (ToEFL(z) | GRE(z) | SubjectTest(z))))", "all x.(ETS(x) -> (AdministersInternationalTests(x) & IncludingTOEFL,GRE and SubjectTestsInChina(x)))", "all x.(ETS(x) -> (AdministersInternationalTestsInChandia(x) & ToEFL(x) & GRE(x) & SubjectTestsInChinese(x)))", "(AllowsPursuantTestInChina(ETS) -> (AdministratesInternationalTest(ETS,English,InternationalTest) & AdministratorsInternationalTests(ETS,GRE) & AdministratorsInternationalTests(eTS,Chinese)))", "ALL x y.((ETS(x) & (ToEFLTest(y) | GRETest(y) | SubjectTest(y))) -> Administrator(x))", "(All x y.((ETS(x) & ToEFL(y)) | ((GRE(y) | SubjectTests(y)))) -> AfadministratesInChina(x,y))", "all x.(ETS(x) -> (AdministersInternationalTests(x) & InternationalTestsInChina(x) & IncludingToEFL(x) & IncludingGRE(x) & IncludingSubjectTestsInChina(x)))", "all x y z.((ETS(x) & (ToEFL(y) | GRE(y) | SubjectTest(y)) & China(z)) -> Conceives(x,y,z))", "all x.(ETS(x) -> (AdministersInternationalTests(x) & ChinaTests(x) & ToEFLTest(x) & GRETest(x) & SubjectTests(x)))", "all x y z w.((ETS(x) & TOEFL(y) & GRE(z) & SubjectTest(w)) -> (AdministersInChina(x,y,z) & PracticesInChina(x,w)))", "all x y z.((ETS(x) & (ToEFL(y) | GRE(y) | SubjectTest(y)) & China(z)) -> AdministersInternationalTests(x,y,z))", "all x y z.((ETS(x) & Test(y) & (TOEFL(z) | GRE(z) | SubjectTest(z))) -> AdministersInternationalTestsInChina(x))", "all x.(ETS(x) -> (AdministsInternationalTests(x) & IncludesToEFL(x) & IncludesGRE(x) & IncludesSubjectTests(x)))", "all x y z.((ETS(x) & InternationalTest(y) & (TOEFLTest(z) | GRETest(z) | SubjectTest(z))) -> AdministersInChina(x,y,z))", "all x y z.((ETS(x) & InternationalTest(y) & (ToEFL(z) | GRE(z) | SubjectTest(z))) -> AdministrationInChinese(x))"]}
{"id": "folio_train_724", "nl": "To get a student visa, you must be full-time enrolled in an academic program.", "fol": "all x.(RequiresStudentVisa(x) -> IsFullTimeEnrolled(x))", "prediction": ["all x.((FullTimeEnrolled(x) & AcademicProgram(x)) -> StudentVisa(x))", "all x.((StudentVisa(x) & EnrolledFullTimeInAcademicProgram(x)) -> GettingVisa(x))", "all x.((FullTimeEnrolledInAcademicProgram(x)) -> StudentVisa(x))", "all x.(UniversalProgram(x) -> (FullTime(x) & EnrolledInDegree(x)))", "all x.((RecentEducationist(x) & EnrolledInAcademicProgram(x)) -> StudentVisa(x))", "all x.(StudentVisa(x) -> (FullTimeEngagedInAcademicProgram(x)))", "all x.((FullTimeEnrolledInAcademicProgram(x)) -> GetsStudentVisa(x))", "all x.((StudentVisa(x) & EnrolledInAcademicProgram(x)) -> GetsVisa(x))", "all x.((StudentVisa(x) & FullTimeEntrolledInAcademicProgram(x)) -> Gets(x))", "all x.((AcademicProgram(x) & FullTimeEnrolledIn(x,Academic)) -> StudentVisa(x))", "all x.((QualifiedStudent(x) & FullTimeEnrolledInAcademicProgram(x)) -> StudentVisa(x))", "all x.(StudentVisa(x) -> (FullTimeEnrolledInAcademicProgram(x) & EnrolledInAcademicProgram(x)))", "all x.((ThanApplyForStudentVisa(x) & FullTimeEnrolledInAcademicProgram(x)) -> StudentVisa(x))", "all x.((FullTimeEnrolledInAcademicProgram(x) & EnrolledInAcademicProgram(x)) -> StudentVisum(x))", "all x.(StudentVisa(x) -> EnrolledInAcademicProgram(x))", "all x.((StudentVisa(x)) -> EnrolledTimeInAcademicProgram(x))"]}
{"id": "folio_train_725", "nl": "Those who are full-time enrolled in an academic program can not work full-time.", "fol": "all x.(IsFullTimeEnrolled(x) -> -CanWorkFullTime(x))", "prediction": ["all x.((FullTimeEnrolledInAcademicProgram(x)) -> -WorksFullTime(x))", "all x.((FullTimeStudent(x) & EnrolledInAcademicProgram(x)) -> -WorksFullTime(x))", "all x.((FullTimeEnrolledInAcademicProgram(x)) -> CannotWorkFullTime(x))", "all x.((FullTimeEnrolled(x) & AcademicProgram(x)) -> -(WorksFullTime(x) | WorksFullTime(x))))", "all x.((FullTime(x) & EnrolledInAcademicProgram(x)) -> -WorksFullTime(x))", "all x.(FullTimeEnrolledInAcademicProgram(x) -> -WorksFullTime(x))", "all x y.((FullTimeEnrolledInAdvancedProgram(x) & Academic(y)) -> -WorksFullTime(x,y))", "all x.((FullTimeEnrolledInAcademicProgram(x)) -> -WorkFullTime(x))", "all x.((FullTimeEnrolledInAcademicProgram(x)) -> -WorksFullTime(x))", "all x.((EmployedInAcademicProgram(x) & FullTime(x)) -> -WorksFullTime(x))", "all x.((FullTimeEnrolledInAcademicProgram(x)) -> -FullTimeWorker(x))", "all x y.((FullTimeEnrolled(x) & AcademicProgram(y)) -> -WorksFullTime(x,y))", "all x.((EnrolledFullTime(x) & AcademicProgram(x)) -> Can-WorkFullTime(x))", "all x.((FullTimeEnrolledInAcademicProgram(x)) -> -WorksFullTime(x))", "all x.((FullTimeEnrolledInAcademicProgram(x)) -> -FindsFullTime(x))", "all x.((FullTimeEnrolledInAcademicProgram(x) & FullTimeEnrolledInAcademicProgram(x)) -> CannotWorkFullTime(x))"]}
{"id": "folio_train_726", "nl": "Everyone who wants to study abroad needs to have a student visa.", "fol": "all x.(WantsToStudyAbroad(x) -> RequiresStudentVisa(x))", "prediction": ["all x.(WantsToStudyAcrossBritish(x) -> HasStudentVisa(x))", "all x.((TryoutAbout(x) & WantsStudyAround(x)) -> HasStudentVisa(x))", "all x.(WantsToStudyAround(x) -> HasStudentVisa(x))", "all x.((WantsToStudyAbroad(x) & HaveStudentVisa(x)) -> NeedsVisa(x))", "all x.(CanStudyAbroad(x) -> InU.S.R.Visa(x))", "all x.(WantsToStudyAround(x) -> NeedsStudentVisa(x))", "all x.(WantsToStudyAbroad(x) -> HasStudentVisa(x))", "all x.(WantsToStudyAround(x) -> HasStudentVisa(x))", "all x.(SkyTravel(x) -> exists y.(StudentVisa(y) & WantsToStudyAround(x,y)))", "all x.(DoesStudyAround(x) -> HasStudentVisa(x))", "all x.(Each(x) -> HasStudentVisa(x))", "all x.((WantsToStudyAbroad(x) & StudentVisa(x)) -> NeedsToPay(x))", "all x.((WantsToStudyAbroad(x) & HasStudentVisa(x)) -> NeedsVisa(x))", "all x.(WantsToStudyAround(x) -> HasStudentVisa(x))", "all x.(KnowsAway(x) -> DoesSStudentVisa(x))", "all x.((WantToStudyAbroad(x) & HasStudentVisa(x)) -> NotCanDoSolving(x))"]}
{"id": "folio_train_727", "nl": "All PhD graduates can work full time. ", "fol": "all x.(IsPhDGraduate(x) -> CanWorkFullTime(x))", "prediction": ["all x.(DoctoralGraduate(x) -> CanWorkFullTime(x))", "all x.(DoctoralGraduate(x) -> CanWorkFullTime(x))", "all x.(PhD(x) -> CanWorkFullTime(x))", "all x.(PhD(x) -> CanWorkFullTime(x))", "all x.((PhD(x) & FullTime(x)) -> CanWork(x))", "all x.(PhD(x) -> CanWorkFullTime(x))", "all x.(PhD(x) -> CanWorkFullTime(x))", "all x.(PhD(x) -> CanWorkFullTime(x))", "all x.(PhD(x) -> CanWorkFullTime(x))", "all x.(PhD(x) -> CanWorkFullTime(x))", "all x.(PhD(x) -> CanWorkFullTime(x))", "all x.(DoctoralGraduate(x) -> CanWorkFullTime(x))", "all x.(DoctoralGraduate(x) -> CanWorkFullTime(x))", "all x.(Diplomatic(x) -> CanWorkFullTime(x))", "all x.(PhD(x) -> CanWorkFullTime(x))", "all x.(DoctoralGraduate(x) -> CanWorkFullTime(x))"]}
{"id": "folio_train_728", "nl": "If Tom does not want to study abroad, he is full-time enrolled in an educational program.", "fol": "(-WantsToStudyAbroad(Tom) -> IsFullTimeEnrolled(Tom))", "prediction": ["all x y.((Tom(x) & -Export(x) & StudyProgram(y)) -> FullTimeEnrolled(x,y))", "all x.((Tom(x) & -WelcomesTo(x)) -> FullTimeEnrolledInEducationalProgram(x))", "all x.((Tom(x) & -WantsToStudyAround(x)) -> EnrolledInEducationalProgram(x))", "all x.((Tom(x) & -WantToStudyAround(x)) -> EnrolledInEducationalProgram(x))", "all x.((Tomm(x) & -DoesStudyAround(x)) -> EnrolledInEducationalProgram(x))", "all x.((Tom(x) & -WantsToStudyAround(x)) -> EnrolledInEducationalProgram(x))", "exists x y.((Tom(x) & -WantToStudyAround(x)) -> EnrolledInEducationalProgram(x))", "all x.((Tom(x) & -WantsToStudyAbroad(x)) -> EnrolledInEducationalProgram(x))", "all x.((Tom(x) & -SelectsAbroad(x)) -> EnrolledInEducationalProgram(x))", "all x.((Tom(x) & -WantToStudyAroundEurope(x)) -> EnrolledInEducationalProgram(x,y))", "all x.((Tom(x) & -WantsToStudyAround(x)) -> EnrolledInEducationalProgram(x))", "all x.((Ton(x) & -WantsToStudy(x)) -> EnrolledInEducationalProgram(x))", "all x.((Tam(x) & -WishesTostudyAround(x)) -> EnrolledInEducationalProgram(x))", "(-VisitsTo(Tom) & WantsToStudyAround(Tom)) -> EnrolledInEducationalProgram(Tom))", "all x.((Tom(x) & -ChangeToStudyOutside(x)) -> EnrolledInEducationalProgram(x))", "all x.((Tom(x) & -WantToStudyAbroad(x)) -> EnrolledInEducationalProgram(x))"]}
{"id": "folio_train_729", "nl": "Tom is a PhD graduate.", "fol": "IsPhDGraduate(Tom)", "prediction": ["(PhD graduate(Tom) + PhD(Tom))", "(Professor(Tom) & Graduate(Tom))", "Tom is a PhD graduate.", "Tom is PhDGraduate(Tom)", "(PhD graduate(Tom) -> Pod.(Tom)))", "-PhD graduate(Tom)", "Tom is a PhDGraduate(Tom)", "(PhD graduate(Tom) | UniversityOfStudio(Tom)))", "(PhD graduate(Tom) & -Proceeds(Tom))", "Tom is a PhD Graduate(Tom)", "Tom is PhD Graduate(Tom)", "Tom is a Phd Graduate(Tom)", "Tom is PhDGraduate(tom)", "Tom is a PhDGraduate.", "exists x.(Professor(x) & Graduate(x))", "Tom is a PhDGraduate(Tom)"]}
{"id": "folio_train_730", "nl": "Tom is not a PhD graduate.", "fol": "-IsPhDGraduate(Tom)", "prediction": ["(-PhD Graduate(Tom))", ",PhD Graduate(Tom)", "(-aPhD graduate(Tom))", "is -PDC Graduate(Tom)", "(-DoctoralGraduate(Tom))", "tomshrooms.com - PhDGraduate(tom))", "Tom isn'tDoctoralGraduate(Tom)", "Tom is not PhDGraduate(Tom)", "Tom is not PhDGraduate(Tom)", "(-DoctoralGraduate(Tom))", "(-PhD-Graduate(Tom))", "Tom is not PhD Graduate(Tom)", "Tom is notaPhD graduate(Tom)", "(Unfortunately, Toby (Tom) & -Polloy graduate(Tom)))", "(-PhD Graduate(Tam))", "all x.((Tom(x) & -PhDGraduate(x)) -> -PhD Graduate(x))"]}
{"id": "folio_train_731", "nl": "Tom wants to study abroad.", "fol": "WantsToStudyAbroad(Tom)", "prediction": ["all x.(Tom(x) -> WantsToStudyAround(x))", "Tom wants to study abroad.", "Tom wants to study abroad.", "all x.((Tom) & WantsToStudyAround(x)) -> WantsToStudyAround(x))", "(UnderstandGlobalIntroduction(Tom) -> WantsToStudy(Tom))", "(DoesStudyAbroad(Tom))", "Tom WollsToStudy abroad(Tom)", "Toby wishesToStudyAround(Tom)", "all x y.((Mom(x) & StudyAround(y)) -> WantsToStudy(x,y))", "can study abroad.", "Tom exists x.(StudyAbroad(x) & WillStudyAround(x))", "(Bologna(Tom) & StudyAway(Tom))", "all x.(Mom(x) -> WantsToStudyAround(x))", "all x.(Tom(x) -> WantsToStudyAround(x))", "all x.((Tom(x) & WillStudyOutside(x)) -> WantsToStudyAround(x))", "all x.((Tom(x) & WillStudyAbroad(x)) -> WantsToStudyAbove(x))"]}
{"id": "folio_train_732", "nl": "The installment sales method is the approach to recognize revenue under the US GAAP.", "fol": "all x.(FollowsUSGAAP(x) -> AppliesInstallmentSalesMethod(x))", "prediction": ["all x.(InstalmentSalesMethod(x) -> RecognizesRevenue(x))", "all x y.((ParticipationSalesMethod(x) & Revenue(y)) -> Recognize(x,y))", "all x.(InstalmentSalesMethod(x) -> RecognizeRevenuUnderUSGAAP(x))", "all x y.((InstalmentSalesMethod(x) & Revenue(y) & UnderGAAP(x)) -> Recognizes(x,y))", "all x.(InstalmentSalesMethod(x) -> RecognizesRevenueAsUsedGAAP(x))", "all x.(InstalmentSalesMethod(x) -> RecognizeRevenueUnderGAAP(x))", "all x.(InstalmentSalesMethod(x) -> RecognizesRevenue(x))", "all x.(DeltamentSalesMethod(x) -> RecognizesRevenue(x))", "all x y.((InstalmentSalesMethod(x) & Revenue(y) & USGAAP(y)) -> Recognizes(x,y))", "all x y.((InstalmentSalesMethod(x) & Revenue(y)) -> RecognizesUnderGAAP(x,y))", "all x.(UpgradationSalesMethod(x) -> RecognizeRevenueUnderGAAP(x))", "all x.(InstalmentSalesMethod(x) -> RecognizesRevenue(x))", "all x.(InstalmentSalesMethod(x) -> RecognizesRevenueUnderUSAGAAP(x))", "all x.(InstalmentSalesMethod(x) -> RecognizesRevenueUnderGAAP(x))", "all x.(InstalmentSalesMethod(x) -> RecognizeRevenue(x,USGAAP))", "all x.(InstalmentSalesMethod(x) -> RecognizesRevenueUnderGAAP(x))"]}
{"id": "folio_train_733", "nl": "In accrual accounting, revenues are recognized when they are realized.", "fol": "all x.(FollowsAccrualAccounting(x) -> RevenueRecognitionCondition(Revenues,Realized))", "prediction": ["all x y.((AccumulationAccounting(x) & Revenue(y)) -> RecognitionWhenRealized(x,y))", "all x.((EncouragingAccounting(x) & RealizedRevenue(x)) -> Recognized(x))", "all x.((AccrualAccounting(x) & Realized(x)) -> RecognizedRevenue(x))", "all x.((AccrualAccounting(x) & RealizedRevenue(x)) -> Recognized(x))", "all x.((AccrualAccounting(x) & RealizedRevenue(x)) -> Recognized(x))", "all x.((AccrualAccounting(x) & Realized(x)) -> RecognizedRevenues(x))", "all x y.((AccrualAccounting(x) & Revenue(y)) -> RecognizedUponRealization(y,x))", "all x y.((AccrualAccounting(x) & Revenue(y)) -> Realized(y,x))", "all x y.((AccrualAccounting(x) & Revenue(y)) -> RecognizedWith(x,y))", "all x y.((AccrualAccounting(x) & Revenue(y) & Realized(y)) -> Recognized(x,y))", "all x y.((AccrualAccounting(x) & Revenue(y) & Realized(y)) -> Recognized(x,y))", "all x.(AccrualAccounting(x) -> RecognizesRevenues(x))", "all x.(AccuelAccounting(x) -> RecognizedRevenuesWhenRealized(x))", "all x.((AccrualAccounting(x) & RealizedRevenue(x)) -> Recognized(x))", "all x y.((AccurateAccounting(x) & Revenue(y) & Realized(y,x)) -> Recognized(x,y))", "all x y z.((AccrualAccounting(x) & Revenue(y) & Realized(z)) -> Recognized(x,y,z))"]}
{"id": "folio_train_734", "nl": "In cash accounting, revenues are recognized when cash is received.", "fol": "all x.(FollowsCashAccounting(x) -> RevenueRecognitionCondition(Revenues,Cashrecieved))", "prediction": ["all x y.((CashAccounting(x) & Cash(y)) -> RecognizedRevenue(x,y))", "all x.(CashAccounting(x) -> RecognizesRevenues(x))", "all x y.((CashAccounting(x) & Cash(y)) -> RecognizesRevenues(x,y))", "all x y.((CashAccounting(x) & Cash(y)) -> RecognizedRevenue(x,y))", "all x y.((CashAccounting(x) & Cash(y)) -> RecognizedRevenues(x,y))", "all x y.((CashAccounting(x) & Cash(y)) -> RecognizesRevenues(x,y))", "all x y.((CashAccounting(x) & Cash(y)) -> RecognizedRevenue(x,y))", "all x y z.((CashAccounting(x) & Cash(y) & Cash(z)) -> RecognizedRevenue(x,y,z))", "all x.(CashAccounting(x) -> (ReceiveRevenues(x,cash) & ReceiveCash(x)))", "all x.(Revenue(x) -> CashAccounting(x))", "all x y.((CashAccounting(x) & Cash(y)) -> RecognizedRevenue(x,y))", "all x.(CashAccounting(x) -> RecognizesRevenue(x))", "all x y z.((CashAccounting(x) & Cash(y) & Cash(z) & Received(y,z)) -> RecognizedRevenue(x,y,z))", "all x y.((CashAccounting(x) & Cash(y)) -> RecognizedRevenues(x,y))", "all x.(CashAccounting(x) -> RecognizedRevenues(x))", "all x y z.((CashAccounting(x) & Cash(y) & Revenue(z)) -> Recognized(x,y))"]}
{"id": "folio_train_735", "nl": "The US GAAP is the accounting standard developed and used by the US Securities and Exchange Commission.", "fol": "(CreatedBy(Usgaap,Ussecuritiesandexchangecommission) & FollowsUSGAAP(Ussecuritiesandexchangecommission))", "prediction": ["all x y.((USGAAP(x) & USSEC(y)) -> (AccountingStandard(x,y) & DevelopedBy(x,y)))", "all x.(GAAP(x) -> (AccountingStandardDevelopped(x) & UsedBySecuritiesAndExchangeCommission(x) & DevelopedBy(x)))", "all x.((AccountingStandard(x) & ReleasedBySecuritiesAndExchangeCommission(x)) -> USGAAP(x))", "all x y.((AccountingStandard(x) & SecuritiesAndExchangeCommission(y)) -> (DevelopedBy(x,y) & UsedBy(x,y)))", "all x.(USGAAP(x) -> (AccountingStandard(x) & DevelopedBySecuritiesAndExchangeCommission(x) & UsedByCommission(x)))", "all x.(USGAAP(x) -> (AccountingStandard(x) & ProducedBy(x) & UsedBy(x) & UsedBy(x)))", "all x y.((Gaap(x) & AccountingStandard(y)) -> (DevelopedBySecuritiesAndExchangeCommission(x) & UsedByRevenue(x,y)))", "all x.(USGAAP(x) -> (AccountingStandard(x) & Developed(x) & UsedBySecuritiesAndExchangeCommission(x)))", "all x y.((USGAAP(x) & SecuritiesAndExchangeCommission(y)) -> (DevelopedAndUsedBy(x,y) & UsedBy(x,y)))", "all x.(Standard(x) & USGAAP(x)) -> (DevelopedAndUsedBySecuritiesAndExchangeCommission(x) & DevelopedAndUsedByExchangeCommission(x)))", "(USAGAAP) - AccountingStandardDesignedAndUsedBySecuritiesAndExchangeCommission(USSEC).", "all x y.((GlobalAccountingStandard(x) & USSecuritiesAndExchangeCommission(y)) -> (DevelopedBy(x,y) & UsedBy(x,y)))", "all x y.((USGAAP(x,y) & SecuritiesAndExchangeCommission(y)) -> (DevelopedAndUsedBy(x,y) & UsedBy(x,y)))", "all x y.((AccountingStandard(x) & AccountingStandard(y) & DeveloppedByUsedByUSSEC(x,y)) -> BasedOn(x,y))", "All x.((GAAP(x) & DevelopedBySecuritiesAndExchangeCommission(x)) -> UsedBy(x))", "all x.(GovernmentApplication(x) -> (AccountingStandard(x) & DevelopedBy(x,USSEC) & UsedBy(x,USSEC)))"]}
{"id": "folio_train_736", "nl": "Sally works for the US Securities and Exchange Commission.", "fol": "EmployedBy(Sally,Ussecuritiesandexchangecommission)", "prediction": ["Sally works for USSecuritiesAndExchangeCommission.", "(WorksForSecuritiesAndExchangeCommission(Sally) & AssignedToCouncil(Sally,US))", "Sally works for SecuritiesAndExchangeCommission(Sally)", "Sally works for SecuritiesAndExchangeCommission(s)", "Sally (WorksForSpecializedAndExchangeCommission(Sally))", "Sally works for the USSecuritiesAndExchangeCommission(Sally)", "Sally works for ssc (stamp of the USSecuritiesAndExchangeCommission))", "Sally works for SecuritiesAndExchangeCommission(Sally worksFor)", "all x.(Sally(x) -> WorksForSecuritiesAndExchangeCommission(x))", "Sally works for SecuritiesAndExchangeCommission(Sally & WorksForSecuritiesAndExchangeCommission(Sally,US))", "all x.(Sally(x) -> WorksForExchangeCommission(x))", "Sally works for the SecuritiesAndExchangeCommission.", "Sally works for SecuritiesAndExchangeCommission(Sally,US)", "Sally works for the US SecuritiesAndExchangeCommission.", "all x.(Sally(x) -> (WorksForSecuritiesAndExchangeCommission(x) & WorksForSEC.(x))))", "Sally works with the USSecuritiesAndExchangeCommission."]}
{"id": "folio_train_737", "nl": "Sally's company utilizes the installment sales method.", "fol": "exists x.(EmployedBy(Sally,x) -> AppliesInstallmentSalesMethod(x))", "prediction": ["all x.((Company(x) & Sally(x)) -> UtilizesInstalmentSalesMethod(x))", "Sally's company utilizesInstalmentSales(Sally)", "She uses InstallmentSales(Sally'sCompany)", "Sally's Company UtilizesInstalmentSalesMethod(Sally)", "all x.((Company(x) & Sally(x)) -> UtilizesInstalmentSales(x))", "(UpgradationSales(Sally) -> Utilizes(Sally,Sally))", "Sally's firm utilizes installments(Sally), Inc.", "all x.((Company(x) & Sally(x)) -> UtilizesInstalmentSales(x))", "(AuthorizedInstalmentSalesMethod)", "Sally's Company UtilizesInstalmentSalesMethod(Sally)", "Sally's company utilizesInstalmentSalesMethod.", "Sally's company utilizesInstalmentSales Method.", "(AppropriateDeposits(Sally) -> Utilizes(SallysCompany,InstalmentSales))", "Sally's company utilizes installmentSales(s) & Customer(g))", "Sally's company utilizes installmentSales(x) -> WorksOf(y,x))", "all x.((Company(x) & Sally(x)) -> InstallmentSales(x))"]}
{"id": "folio_train_738", "nl": "The company Sally works for performs accrual accounting.", "fol": "exists x.(EmployedBy(Sally,x) & UsesAccrualAccounting(x))", "prediction": ["all x.((Company(x) & WorksFor(x)) -> PerformsAccrualAccounting(x))", "all x.(WorksFor(x) -> PerformsAccrualAccounting(x))", "all x.(WorksFor(x) -> AccrualAccounting(x))", "all x.(SallyWorksFor(x) -> PerformsAccueltyAccounting(x))", "all x y.((Company(x) & Sally(y)) -> PerformsExpensesAccounting(x,y))", "all x.(WorksFor(x) -> Performance(x))", "all x.((Company(x) & WorksFor(x)) -> PerformsAccrualAccounting(x))", "all x.(WorksFor(x) -> PerformsAccrillationAccounting(x))", "all x.((Company(x) & WorksFor(x)) -> PerformsAccrualAccounting(x))", "all x.(WorksFor(x) -> AccrualAccounting(x))", "all x.(WorksFor(x) -> PerformsAccuelities(x))", "all x.(WorksFor(x) -> PerformsAccrualAccounting(x))", "all x.((Company(x) & SallyWorksFor(x)) -> PerformsAccrualAccounting(x))", "all x.(SallyWorksFor(x) -> PerformsAccrualAccounting(x))", "all x.((Company(x) & WorksFor(x)) -> PerformsAccorpmentAccounting(x))", "all x.(WorksFor(x) -> PerformsAccrualAccounting(x))"]}
{"id": "folio_train_739", "nl": "Sally does not work for a company that uses the GAAP.", "fol": "-exists y.(EmployedBy(Sally,y) & FollowsUSGAAP(y))", "prediction": ["all x.((Sally(x) & -UsesGAAP(x)) -> -WorksFor(x,GAAP))", "(-WorksForGAAP(Sally))", "all x y.((Sally(x) & Company(y) & UsesGAAP(x,y)) -> -WorksFor(x,y))", "all x.((Sally(x) & Company(x)) -> -UsesGAAP(x))", "(-WorksForCompanyUse(Sally))", "(-WorksForGAAPCompany))", "Sally does not work for any company that uses GAAP(s).", "-WorksForGAAP(Sally)", "Sally is not a GAAPWorker(Sally)", "Sally \u2013 exists x.(Company(x) & Use GAAP(x))", "all x y.((Sally(x) & Company(y)) -> -UsesGAAP(x,y))", "Sally is not a GAAPUser(s)", "Sally & -WorksFor(Sally,Company,GAAP))", "all x y.((Sally(x) & Company(y) & UsesGAAP(x,y)) -> -WorksFor(x,y))", "Sally -WorksFor(Sally,Company) & UsesGAAP(Sally,GAAP))", "is a non-existing business on GAAP(Sally)"]}
{"id": "folio_train_740", "nl": "All people who are respected by others are people who contribute to the country. ", "fol": "all x.(RespectedByOthers(x) -> ContributesToCountry(x))", "prediction": ["all x.((RespectedByOthers(x) & ContributesToCountry(x)) -> ContributesToCountry(x))", "all x.(RespectedByOthers(x) -> ContributesToCountry(x))", "all x.(RespectableByOthers(x) -> ContributesToPayment(x))", "all x.((Person(x) & RespectedByOthers(x)) -> ContributesToCountry(x))", "all x.((Person(x) & RespectedByOthers(x)) -> ContributesToCountry(x))", "all x.((Person(x) & RespectedByOthers(x)) -> ContributesToCountry(x))", "all x.((Person(x) & RespectedByOthers(x)) -> ContributesToCountry(x))", "all x.(RespectfulByOthers(x) -> ContributesToCountry(x))", "all x.((Person(x) & RespectedByOthers(x)) -> ContributesToCountry(x))", "all x.(RespectedByOthers(x) -> ContributesToCountry(x))", "all x.(RespectedByOthers(x) -> ContributesToCountry(x))", "all x.(RespectedByOthers(x) -> ContributesToCountry(x))", "all x.((Person(x) & RespectedByOthers(x)) -> ContributesToCountry(x))", "all x.((RespectedByOthers(x) -> ContributesToCountry(x))", "all x.((RespectedByOthers(x) & ContributesToCountry(x)) -> ContributesToCountry(x))", "all x.(RespectedByOthers(x) -> ContributesToCountry(x))"]}
{"id": "folio_train_741", "nl": "If a person is respected by others, then he/she contributes to the country. ", "fol": "all x.(RespectedByOthers(x) -> ContributesToCountry(x))", "prediction": ["all x y.((Person(x) & Respected(x) & Country(y)) -> ContributesTo(x,y))", "all x.((Person(x) & RespectedByOthers(x)) -> ContributesToCountry(x))", "all x y.((Person(x) & RespectedByOthers(x)) -> ContributesToCountry(y))", "all x y.((Person(x) & RespectedByOthers(x)) -> ContributesToCountry(x))", "all x y.((Person(x) & RespectedBy(x) & Country(y)) -> ContributesTo(x,y))", "all x y.((Person(x) & RespectedByOthers(x)) -> ContributesToCountry(y))", "all x y.((Person(x) & RespectedByOthers(x)) -> ContributesToCountry(y))", "all x y.((Person(x) & RespectedByOthers(x) & Country(y)) -> ContributesTo(x,y))", "all x.(RespectedByOthers(x) -> ContributesToCountry(x))", "all x.((Person(x) & RespectedByOthers(x)) -> ContributesToCountry(x))", "all x.((Person(x) & RespectedByOthers(x)) -> ContributesToCountry(x))", "all x.(Respecting(x) -> ContributesToCountry(x))", "all x.(RespektedByOthers(x) -> ContributesToCountry(x))", "all x y.((Person(x) & RespectedByOthers(x)) -> ContributesToCountry(y))", "all x y.((Person(x) & RespectedByOthers(x)) -> ContributesToCountry(y))", "all x.(RespektedByOthers(x) -> ContributesToCountry(x))"]}
{"id": "folio_train_742", "nl": "All people available to have a visit without any fees are those respected by others. ", "fol": "all x.(AvailableForVisitWithoutFees(x) -> RespectedByOthers(x))", "prediction": ["all x.(RespectedByOthers(x) -> availableToHaveVisitWithoutFees(x))", "all x.(Personnel(x) & AvailableForVisit(x) & -NoFees(x))", "all x.((Person(x) & AvailableForVisitwithoutFees(x)) -> RespectedByOthers(x))", "all x.((Person(x) & AvailableToHaveVisision(x) & -ExpenseRecognized(x)) -> RespectedByOthers(x))", "all x.((Person(x) & AvailableForVisit(x) & -Fee(x)) -> RespectedByOthers(x))", "all x.((Person(x) & AvailableForVisit(x) & -Fees(x)) -> RespectedByOthers(x))", "all x.(HasFees(x) -> RespectedByOthers(x))", "all x.((Person(x) & AvailableForVisit(x) & -Fees(x)) -> RespectedByOthers(x))", "all x.((Person(x) & AvailableToHaveVisit(x) & -TokenFee(x)) -> RespectedByOthers(x))", "all x.((Person(x) & AvailableForVisit(x) & -Fees(x)) -> RespectedByOthers(x))", "all x y.((Person(x) & AvailableToHaveVisitWithoutFees(x)) -> RespectedByOthers(y))", "all x.((Person(x) & AvailableToHaveVisitWithoutFees(x)) -> RespectedByOthers(x))", "all x.((Person(x) & AvailableForVisitWithoutFees(x)) -> RespectedByOthers(x))", "all x.((Person(x) & AvailableForVisit(x) & -Fees(x)) -> RespectedByOthers(x))", "all x.((Person(x) & AvailableToHaveVisitWithoutFees(x)) -> RespectedByOthers(x))", "all x.((Person(x) & AvailableForVacation(x) & -Fees(x)) -> RespectedByOthers(x))"]}
{"id": "folio_train_743", "nl": "All Customers who once served in the army are available to have a visit without any fees. ", "fol": "all x.(ServedInArmy(x) -> AvailableForVisitWithoutFees(x))", "prediction": ["all x.((Customer(x) & SoughtInArmy(x)) -> AnswoundWithoutFees(x))", "all x.((Customer(x) & OnceServedInArmy(x)) -> AvailableToHaveVisitWithoutFees(x))", "all x.((Customer(x) & ServedInArmy(x)) -> AvailableToHaveVisitWithoutFees(x))", "all x.((Customer(x) & OnceServedInArmy(x)) -> CanHaveVisitAndWithoutFees(x))", "all x.((Customer(x) & LivedInArmy(x)) -> AvailableForVisitWithoutFees(x))", "all x.((Customer(x) & SelectedInArmory(x)) -> AvailableToHaveVisitWithoutFees(x))", "all x.(ServedInArmy(x) -> AvailableToHaveVisitWithoutFees(x))", "all x.((Customer(x) & OnceServedInArmy(x)) -> HasVisitingWithoutFees(x))", "all x.((Customer(x) & ServicedInArmy(x)) -> AvailableWithoutFees(x))", "all x.((Customer(x) & ServicedInArmy(x)) -> AvailableToHaveTolerance(x))", "all x.((Customer(x) & ServicedInArmy(x)) -> AvailableToHaveVisitWithoutFees(x))", "all x.((Customer(x) & ServedInArmy(x)) -> OffersVisitingWithoutFees(x))", "all x.((Customer(x) & ServingInArmy(x)) -> AvailableForVisit(x))", "all x.(ServedInArmy(x) -> AvailableForVisitWithoutFees(x))", "all x.((Customer(x) & OnceServedInArmy(x)) -> AvailableForVisitWithoutFees(x))", "all x.((Customer(x) & OnceServedInArmy(x)) -> AvailableForFreeVisit(x))"]}
{"id": "folio_train_744", "nl": "All people who once were sentenced for thief stayed in prison for some time. ", "fol": "all x.(SentencedForTheft(x) -> StayedInPrison(x))", "prediction": ["all x.((Person(x) & NominatedForSiphon(x)) -> StaysInPenitentiary(x))", "all x y.((Person(x) & SentencedForThief(x)) -> StayedInPenitence(y))", "all x y.((Person(x) & UsedToBeSentenForThief(x)) -> StayedInPentent(y))", "all x.((Person(x) & PenalizedForthief(x)) -> StaysInPenitenceForSomeTime(x))", "all x.((Person(x) & RequiredForTyphoon(x)) -> StayedInPenitentiaryForSomeTime(x))", "all x.((Person(x) & OnceSentAsTwelf(x)) -> StayedInPenny(x))", "all x.((Person(x) & Sent forthief(x)) -> StaysInPencil(x))", "all x.((Person(x) & Once SentencedForThyef(x)) -> StayedInPenitentiary(x))", "all x y.(((Person(x) & SentForTheft(x)) -> StayedInPencil(y))", "all x.((Person(x) & OncePennentForThief(x)) -> StayedInPenitentiary(x))", "all x.((Person(x) & SentForTyphoon(x)) -> StayedInPensionForSomeTime(x))", "all x.((Person(x) & OnceSentForTwelf(x)) -> StayedInPentent(x))", "all x.((Person(x) & OnceSentForThyself(x)) -> StoppedInPrison(x))", "all x.((Person(x) & OnceSentorizedForTyphoon(x)) -> StayedInPenitentiary(x))", "all x.((Person(x) & SentForTthief(x)) -> StayedInHospitalForSomeTime(x))", "all x.((Person(x) & ReceivedForTyef(x)) -> stayedInPenitence(x))"]}
{"id": "folio_train_745", "nl": "All people who once stayed in prison for some time have a bad record in the local state. ", "fol": "all x.(StayedInPrison(x) -> HasBadRecord(x))", "prediction": ["all x.((PopularSay(x) & StayedInPenitentiary(x)) -> BadRecord(x))", "all x.((Person(x) & StayedInPenitentiary(x)) -> BadRecordInLocalState(x))", "all x.((Person(x) & StayedInPentyllock(x)) -> BadRecordInLocalState(x))", "all x y.((Person(x) & StayedInPentent(x)) -> BadRecord(x,localState))", "all x.((Person(x) & OnceStayedInPenitence(x)) -> BadRecordInLocalState(x))", "all x.((Person(x) & StayedInPencil(x)) -> BadRecord(x))", "all x.((Person(x) & OnceRemainedInPistol(x)) -> BadRecordInLocalState(x))", "all x.((Person(x) & StayedInPencil(x) & SomeTimeInPencil(x)) -> BadRecordInLocalState(x))", "exists x.(Person(x) & OftenStoppedInPacility(x) & BadRecord(x))", "all x.((Person(x) & StayedInP\u00e9nitry(x)) -> BadRecordInLocalState(x))", "all x.(StayedInPennyForSomeTime(x) -> BadRecordInLocalState(x))", "all x.(StayedInPacilityForAlios(x) -> BadRecordInLocalState(x))", "all x.((Person(x) & StayedInPenitentiary(x)) -> BadRecordInLocalState(x))", "all x.((Person(x) & RemainedIn(x,y)) -> BadRecordInLocalState(x))", "all x.((Person(x) & DuringPennyTime(x)) -> BadRecordInLocalState(x))", "all x.((Person(x) & OriginallyStayedInPenent(x)) -> BadRecordInLocalState(x))"]}
{"id": "folio_train_746", "nl": "James was either once sentenced for thief or stayed in prison for some time. ", "fol": "((SentencedForTheft(James) & -StayedInPrison(James)) | (-SentencedForTheft(James) & StayedInPrison(James)))", "prediction": ["all x.(James(x) -> (PentencedForTthief(x) | StayedInDead(x)))", "all x.((James(x) & (TrappedForThoef(x) | StayedInHospital(x))) -> (Steal(x) | StayedInHospital(x)))", "all x.((James(x) & -TthiefSentence(x)) | StayedInPentetry(x))", "all x.(James(x) -> ((SentencedForthief(x) | StayedInPencil(x))))", "all x.(James(x) -> (ParentedForthief(x) | StayedInHospital(x)))", "all x.((James(x) & SentencedForthief(x) | StayedInPenitence(x))) -> Prisoner(x))", "all x.(Jimmy(x) -> (SentimentedForTHief(x) | StayedInPenthouseForSomeTime(x)))", "all x.( James(x) -> (ReceivedForThyef(x) | StayedInPencilForSomeTime(x)))", "all x.(James(x) -> (LeavedForThief(x) | FloatedInPenitence(x)))", "all x.(James(x) -> ((PentedForTheft(x) | StayedInPencil(x))))", "((James(Jalen) * & SentencedForThrift(Jalen)) | -StayedInPenitence(James)))", "all x.((Jimmy(x) & (Taxer(x) | StayedInPenitence(x))) -> (PenalizedFor(x,thief)))", "all x.(James(x) -> (ParentedForThief(x) | StayedInPenitent(x)))", "all x.(James(x) -> (FirstPensionedForThief(x) | StayedInPenitenceForAnotherTime(x)))", "all x.(James(x) -> (PensionedForThreat(x) | StayedInPenitence(x)))", "all x.(James(x) -> (SentencedForTyef(x) | stayedInPenitence(x)))"]}
{"id": "folio_train_747", "nl": "James is either with a bad record in the local state or respected by others. ", "fol": "((HasBadRecord(James) & -RespectedByOthers(James)) | (-HasBadRecord(James) & RespectedByOthers(James)))", "prediction": ["all x.(James(x) -> (BadRecord(x) | RespectedByOthers(x)))", "all x.((James(x) & (BadRecord(x) | RespectedByOthers(x))) -> James(x))", "all x.((James(x) & BadRecord(x)) | Respected(x))", "all x.(James(x) -> (BadRecord(x) | RespectedByOthers(x)))", "all x.((James(x) & BadRecord(x)) | RespectedByOthers(x))", "all x.(James(x) -> ((BadRecordInLocalState(x) | RespectedByOthers(x))))", "(BadRecord(James) | RespectedByOthers(James))", "all x.((James(x) & (BadRecord(x) | RespectedBoth(x))) -> CanBeReceived(x))", "all x.((James(x) & LocalRecord(x)) | RespectedByOthers(x))", "all x.((James(x) & BadRecord(x) & LocalState(x)) | RespectedByOthers(x))", "all x.(James(x) -> (BadRecord(x) | RespectedByOthers(x)))", "all x y.((James(x) & LocalRecord(y)) -> (BadRecord(x,y) | Respected(x,y)))", "all x.(Jimmy(x) -> (BadRecord(x) | Respected(x)))", "exists x.(James(x) & (BadRecord(x) | RespectedByOthers(x)))", "all x.(James(x) -> (BadRecord(x) | RespectedByOthers(x)))", "all x.(James(x) -> (BadRecord(x) | RespectedByOthers(x)))"]}
{"id": "folio_train_748", "nl": "James contributes to the country.", "fol": "ContributesToCountry(James)", "prediction": ["all x y z.((James(x) & Country(y) & ContributesTo(x,z)) -> ContributesTo(x,y))", "all x.(James(x) -> ContributesToCountry(x))", "all x.(James(x) -> ContributesToCountry(x))", "all x.(James(x) -> ContributesTo(x,y))", "all x.((James(x) & ContributesTo(x,Cuba)) -> ContributesTo(x,Country))", "all x y.((James(x) & Country(y)) -> ContributesTo(x,y))", "all x y.((James(x) & Community(y)) -> ContributesTo(x,y))", "all x y z.((James(x) & Country(y) & ContributesTo(x,y)) -> ContributesTo(x,z))", "all x y.((Commonwealth(x) & James(y)) -> ContributesToCountry(x,y))", "all x.(James(x) -> ContributesToCanyon(x))", "all x y z.((James(x) & Country(y) & ContributesTo(x,y)) -> ContributesTo(x,y))", "all x.(James(x) -> ContributesToCountry(x))", "all x.((James,Scott,Burning) & ContributesToCountry(James,Fairy)) -> ContributesToCountry(James,Company))", "James contributesToCountry(James).", "all x.((James(x) & Country(y)) -> ContributesTo(x,y))", "all x.(CommentsTo(x,y) -> ContributesTo(y,x))"]}
{"id": "folio_train_749", "nl": "James does not contribute to the country.", "fol": "-ContributesToCountry(James)", "prediction": ["all x.((James(x) & Country(y)) -> -ContributesTo(x,y))", "all x.(James(x) -> DoesNotContribute(x,Chinese))", "all x.(James(x) -> -ContributesTo(x,y))", "(-ContributesTo(James) -> James.Company.com))", "all x.((James(x) & Country(ja)) -> -ContributesTo(x,ja))", "James does not contribute(J) -> TheCouncil(J))", "all x.((James(x) & Country(x)) -> -(ContributesTo(x,y))))", "-CoversToInland(Jack,hereafter)", "(-ContributesTo(James) -> James.)", "all x.((James(x) & -Contributes(x)) -> -ContributesToCountry(x))", "James does not contribute to the country.", "no contribution to country.", "all x.((James(x) & NoContributionTo(x)) -> -ContributesTo(x,country))", "(-ContributesTo(James) -> NotCountry(James))", "-(ContributesTo(James,Country))", "-ContributesTo(James,Cost)."]}
{"id": "folio_train_750", "nl": "James contributes to the country, and he once served in the army.", "fol": "(ContributesToCountry(James) & ServedInArmy(James))", "prediction": ["(Club(James) & ContributesTo(James,Caribbean) & SufferedInArmy(James))", "(all x.(James(x) -> ContributesTo(x,Country)) & servedInArmy(x))", "exists x.(James(x) & Country(x) & ContributesTo(x,y) & servedIn(x,army))", "all x.(James(x) -> (ContributesToCountry(x) & ServedInArmy(x)))", "all x.(James(x) -> (ContributesToCountry(x) & OnceServedInArmy(x)))", "all x y.((Staff(x) & Army(y)) -> (CommittedTo(x,y) & ServedIn(x,y)))", "(ContributesToCountry(Jimmy) & ServesInArmy(Jimmy))", "all x y.((James(x) & Country(y)) -> Contributes(x,y))", "(exists x.(James(x) & ContributesTo(x)) & servedIn(x,enforcement)))", "all x y.((James(x) & Country(y)) -> (ContributesTo(x,y) & ServesInArmy(x)))", "(all x.(James(x) -> ContributesTo(x,Cairn)) & servedInArmy(x,Cairn)))", "all x.(JamesContributesToCountry(x) & ServedInArmy(x))", "and ServedInArmy(James,USA)", "all x y.((Father(x) & Country(y)) -> (ContributesTo(x,y) & servedIn(x,y)))", "all x.((James(x) & Country(y)) -> ContributesTo(x,y))", "all x.((James(x) & Country(y)) -> (ContributesTo(x,y) & ServedInArmy(x,y)))"]}
{"id": "folio_train_751", "nl": "James did not contribute to the country and did not serve in the army.", "fol": "(-ContributesToCountry(James) & -ServedInArmy(James))", "prediction": ["hnlichesToCandy(James,X) & -ServedInArmy(James,x))", "(-ContributesToCountry(James) & -ServesInArmy(James))", "all x.((James(x) & -ContributesTo(x,y) & -ServesInArmy(x,y)) -> -ToGovernment(x))", "(-toClara(James) & -ServedInArmy(James))", "all x y.((James(x) & Country(y)) -> (-ContributesTo(x,y) & -ServesInArmy(x)))", "(-ContributesToTheCountry(James) & -ServesInArmy(James))", "James neadsciatees(x) & -Contributes(x) & -ServesInArmy(x))", "(-ContributesToBorder(James) & -ServesInArmy(James))", "(-ContributesTo(James) & -ServesInArmy(James))", "all x.((James(x) & -Comply(x,y)) -> -StateInArmy(x))", "-(CaresToCountry(James,St. James) & -ServesInArmy(James))", "all x.(James(x) -> (-ContributesToCaribbean(x) & -ServesInArmy(x)))", ", James and -ContributesToCountry(Jim,Jim,Colony) & -ServesInArmy(Jim,Army))", "(-Columbus(James) & -ServesInArmy(James))", "(-ContributesToCountry(James) & -ServedInArmy(James))", "(John N.D.Creates(James,Crowd) & -ServicesInArmy(James,Bow))"]}
{"id": "folio_train_752", "nl": "The Croton River watershed is the drainage basin of the Croton River.", "fol": "IsDrainageBasinOf(Crotonriverwatershed,Crotonriver)", "prediction": ["all x.(Watershed(x) -> (DrainageBasin(x) & CrotonRiver(x)))", "all x.(Watershed(x) -> Dishwasher(x))", "all x y.((Watershed(x) & CrotonRiver(y)) -> DrainageBasinOfRiver(y,x))", "-(Watershed(croton,r) & DrainageBasin(r,croton)))", "all x.(Watershed(x) -> DrainageBasin(x))", "all x.(Watershed(x) -> (UnderlyingBediacon(x) & CrotonRiver(x)))", "the Watershed(CrotonRiver)...", "all x.(Watershed(x) -> (DrainageBasin(x) & ComptonRiver(x)))", "all x.((CrostonRiverWatershed(x) & DrainageBoard(x,crotonRiver)) -> DrainageBasin(x,crotonRiver))", "(ComittonRiverWatershed(CrotonRiver) & DrainageBath(CrotonRiver))", "all x.(Watershed(x) -> DrainageBasin(x,crotonRiver))", "all x.(Watershed(x) -> (DrainageBasin(x,Croton)))", "The Croton River Watershed is DrainageBasinOfCroton.", "(DrainageBasinOfCorton(River) & Watershed(River))", "The Croton River Watershed (Watershed) - DrainageBaisonOfCraton River.", "(DrainageBasin(CrotonRiver) & DrainageBasin(CrotonRiver))"]}
{"id": "folio_train_753", "nl": "The Croton River is in southwestern New York.", "fol": "LocatedIn(Crotonriver,Southwesternnewyork)", "prediction": ["(SouthwesternNewYork-(CrotonRiver(River) & SouthwesternNewYork))", "(SouthwesternNew York) & CrotonRiver(Cropon)", "(SouthwesternNewYork(CrotonRiver)", "(SouthwesternNewYork.(CRotonRiver) & InSouthwesternNewYork(Road))", "The Croton River is in SouthwesternNewYork.", "the Croton River is in southwesternNewYork.", "the CrotonRiver(n) -> SouthwesternNewYork(n))", "The Croton River (Cross(r) & SouthwesternNewYork)", "All x.(Road(x) -> (SouthwesternNewYork(x) & In(x,y)))", "Located in southwesternNewYork.", "(SouthwesternNewYork(crotonRiver))", "((CrossonRiver(croton) | WesternNewYork)))", "(SouthwesternNewYork(CroconRiver))", "The Croton River (Crotton) is located in SouthwestNewYork(Crotton))", "L.CrostonRiver(Croton) & SouthwesternNewYork(Croton))", "the CrotonRiver(Crocon)"]}
{"id": "folio_train_754", "nl": "Water from the Croton River watershed flows to the Bronx.", "fol": "exists x.(Water(x) & SourceOf(x,Crotonriverwatershed) & FlowsToLocation(x,Bronx))", "prediction": ["all x.(Water(x) -> (FlowsFrom(x,croton) & Watershed(x,Bronx)))", "(Water(Watershed,CRoton) & Watershed(River,Bronx))", "all x y.((Water(x) & CrotonStreamTree(y) & Watershed(y)) -> FlowsToBronx(y))", "all x y.((Water(x) & CrotonRiverWatershed(y)) -> FlowsToBronx(x))", "all x y.((Water(x) & Watershed(y)) -> FlowsToBronx(x,y))", "all x y.((Water(x) & Watershed(y) & Croton(y)) -> FlowsToBronx(x,y))", "all x y.((Water(x) & Watershed(y) & CrotonRiver(x,y)) -> FlowsToBronx(x))", "all x y.((Water(x) & CrotonRiverWatershed(y) & FlowsToBronx(x,y)) -> WaterSwales(x,y))", "all x y.((Water(x) & CrotonRiverWatershed(y)) -> FlowsToBronx(x,y))", "all x.((Water(x) & CrotonRiverWatershed(x)) -> FlowsToBronx(x))", "all x y.((Water(x) & CrotonWatershed(y)) -> FlowsToBronx(x,y))", "all x.((Water(x) & CrotonWatershed(x)) -> FlowsToBronx(x))", "all x.((WaterfromWatershed(x) & CrotonRiver(x)) -> FlowsToBronx(x))", "all x.((Water(x) & FromCroconRiverWatershed(x)) -> FlowsToBronx(x))", "all x.(Water(x) -> (FromCrotonRiverWatershed(x) & FlowsToBronx(x)))", "all x y z.((Water(x) & CrotonRiverWatershed(y) & Bronx(z)) -> FlowsTo(x,y,z))"]}
{"id": "folio_train_755", "nl": "The Bronx is in New York.", "fol": "LocatedIn(Bronx,Newyork)", "prediction": ["The Bronx is in NewYork.", "the Bronx (NewYork)", "ALL x.(Bronx(x) -> NewYork(x))", "The Bronx is in New York.", "It is in NewYork(Bronx)", "The Bronx is in NewYork(x)", "(LocatedIn(Bronx,NewYork))", "-NewYork(Bronx)", "The Bronx is located in NewYork.", "All x.(Bronx(x) -> InNewYork(x))", "The Bronx is in NewYork.", "All x.(Bronx(x) -> NewYork(x))", "All x.(Bronx(x) -> NewYork(x))", "(Bronx,NewYork)", "The Bronx is in NewYork.", "The Bronx is in NewYork."]}
{"id": "folio_train_756", "nl": "Water from the Croton River watershed flows to somewhere in New York.", "fol": "exists x y.(Water(x) & SourceOf(x,Crotonriverwatershed) & FlowsToLocation(x,y) & LocatedIn(y,Newyork))", "prediction": ["all x y.((Water(x) & CrotonRiverWatershed(y)) -> FlowsTo(x,y))", "all x.((Water(x) & FromCorotonRiverWatershed(x)) -> FlowsToNewYork(x))", "all x.((Water(x) & Watershed(x) & CrotonRiver(x)) -> FlowsToNewYork(x))", "all x y.((Water(x) & CrotonRiverWatershed(y)) -> FlowsToNyc(y,x))", "all x.(Water(x) -> (Water from CrotonRiverwatershed(x) & FlowsToNewYork(x)))", "all x.((Water(x) & Watershed(x) & CrotonRiverWatershed(x)) -> FlowsToNewYork(x))", "all x y.((Water(x) & CrotonRiver(y) & Watershed(y)) -> FlowsToNewYork(x,y))", "(-WaterFluids(WrongHasCrotonWatershed) & FlowsToNewYork(WaterFlush))", "all x y.((WaterShortage(x) & CrotonRiver(y)) -> FlowsToNewYork(x,y))", "all x y.((Water(x) & Watershed(y) & WaterFromCroton(x,y)) -> FlowsTo(x,y))", "all x y z.((Water(x) & CrotonRiver(y) & Watershed(z) & FlowsTo(x,y)) -> NewYork(y))", "all x y.((Water(x) & Watershed(y) & CrotonRiver(x) & Watershed(y)) -> FlowsToNewYork(x,y))", "all x.((Water(x) & Watershed(x,Croton)) -> FlowsToNewYork(x))", "all x.((Water(x) & CrotonRiverWatershed(x)) -> FlowsToNyc(x))", "all x y.((Water(x) & Watershed(y) & Croton(y)) -> FlowsTo(x,y))", "all x y.((WaterFromCrotonRiverWatershed(x) & Water(y)) -> FlowsToNewYork(x))"]}
{"id": "folio_train_757", "nl": "The Croton River watershed is in the Bronx.", "fol": "LocatedIn(Crotonriverwatershed,Bronx)", "prediction": ["this is the Watershed(croton(river) & InBronx(x))", "the Croton River Watershed is in the Bronx.", "all x.(Watershed(x) -> CrotonRiver(x))", "all x.(CroconRiverWatershed(x) -> InBronx(x))", "and CrickonRiverWatershed(r) & Bronx(x))", "(Watershed(CroponRiver,Bronx))", "(Watershed(CrotonRiver,Bronx))", "(Watershed(croopon) & InBronx(c))", "all x.(Watershed(x,Croton) -> InBronx(x))", "all x y.((Watershed(x) & CrotonRiver(y) & Bronx(y)) -> WatershedIn(x,y))", "(Watershed(croaton,Bronx))", "all x.(Watershed(x) -> (ConsulatesBernx(x) & TheCrotons(x)))", "(WorkingOutsideBronx(CrotonRiver) & InBronx(CroatonRiver))", "(Watershed(croton River) & InBronx(croton))", "all x.(Watershed(x) -> IsInBronx(x))", "the CrotonRiverWatershed(x) & InBronx(x))"]}
{"id": "folio_train_758", "nl": "Water from the Croton River flows to the Bronx.", "fol": "exists x.(Water(x) & SourceOf(x,Crotonriver) & FlowsToLocation(x,Bronx))", "prediction": ["all x y z.((Water(x) & CrotonRiver(y) & Bronx(z)) -> FlowsTo(x,y,z))", "all x y.((Water(x) & CrotonRiver(y)) -> FlowsToBronx(x,y))", "all x y.((Water(x) & CrotonRiver(y)) -> FlowsToBronx(x,y))", "all x.((Water(x) & CrotonRiver(x)) -> FlowsToBronx(x))", "all x.((Water(x) & CrotonRiver(x)) -> FlowsToBronx(x))", "(Flow(water) -> CrotonRiver(water))", "all x y z.((Water(x) & CrotonRiver(y) & Bronx(z)) -> FlowsTo(x,y,z))", "all x y.((Water(x) & CrotonRiver(y)) -> FlowsToBronx(x))", "all x.((Water(x) & CrotonRiver(x)) -> FlowsToBronx(x))", "all x y z.((Water(x) & CrotonRiver(y) & Bronx(z)) -> FlowsTo(x,y,z))", "((Water(croton) & River(croton)) -> FlowsToBronx(croton))", "all x y z.((Water(x) & CrotonRiver(y) & Bronx(z)) -> FlowsTo(x,y,z))", "all x y.((Water(x) & CrotonRiver(y)) -> FlowsToBronx(x,y))", "all x y z.((Water(x) & CrotonRiver(y) & Bronx(z)) -> FlowsTo(x,y,z))", "all x.((Water(x) & WaterFromCroton(x)) -> FlowsToBronx(x))", "all x y.((Water(x) & River(y) & Croton(y)) -> FlowsToBronx(x,y))"]}
{"id": "folio_train_759", "nl": "All nuclear-powered submarines are warships.", "fol": "all x.(IsNuclearPoweredSubmarine(x) -> IsWarship(x))", "prediction": ["all x.(NatalPoweredSubmarine(x) -> Warship(x))", "all x.(NuclearPoweredSubmarine(x) -> Warship(x))", "all x.(NuclearPoweredSubmarine(x) -> Warship(x))", "all x.(NanoPackedSubmarine(x) -> Warship(x))", "all x.(NuclearPoweredSubmarine(x) -> Warship(x))", "all x.(NuclearPoweredSubmarine(x) -> Warship(x))", "all x.(NuclearPoweredSubmarine(x) -> Warship(x))", "all x.(NukeletronPoweredSubmarine(x) -> Warship(x))", "all x.((Submarine(x) & NuclearPowered(x)) -> Warship(x))", "all x.(NuclearPoweredSubmarine(x) -> Warship(x))", "all x.(NavigablePoweredSubmarine(x) -> Warship(x))", "all x.(NuclearPoweredSubmarine(x) -> Warship(x))", "all x.(NuclearPoweredSubmarine(x) -> Warship(x))", "all x.((NuclearPoweredSubmarine(x) & Warship(x)) -> Submarine(x))", "all x.(NuclearPoweredSubmarine(x) -> Warship(x))", "all x.(Submarine(x) -> Warship(x))"]}
{"id": "folio_train_760", "nl": "No nuclear-powered submarines are commercial vessels.", "fol": "all x.(IsNuclearPoweredSubmarine(x) -> -IsCommercialVessel(x))", "prediction": ["all x.((NuclearPoweredSubmarine(x) & -CommercialVessel(x)) -> -Submarine(x))", "-exists x.(NatalPoweredSubmarine(x) & CommercialCamera(x))", "-exists x.(Submarine(x) & NuclearPowered(x))", "(-exists x.(Submarine(x) & NuclearPowered(x)))", "is CommercialVessel((submarine) & -NuclearPowered(Submarine))", "-exists x.(NuclearPoweredSubmarine(x) & CommercialVessel(x))", "-exists x.(Consumer(x) & BusinessVessel(x))", "all x.((Submarine(x) & -NuclearPowered(x)) -> CommercialVessel(x))", "-(NuclearPoweredSubmarine(x) & CommercialVessel(x))", "all x.((NuclearPoweredSubmarine(x) & -MarbleVessel(x)) -> -CivilVessel(x))", "-exists x.(NaturellPoweredSubmarine(x) & CommercialVessel(x))", "-exists x.(NuclearPoweredSubmarine(x) & CommercialVessel(x))", "-exists x.(NaturellPoweredSubmarine(x) & CommercialVessel(x))", "all x.((NuclearPoweredSubmarine(x) & -CommercialVessel(x)) -> -Submarine(x))", "-exists x.(NatalPoweredSubmarine(x) & CommercialVessel(x))", "all x.(NumberOfNuclearPoweredSubmarine(x) -> -CommercialVessel(x))"]}
{"id": "folio_train_761", "nl": "Some warships are commercial vessels.", "fol": "exists x.(IsWarship(x) & IsCommercialVessel(x))", "prediction": ["exists x.(Warship(x) & CommercialVessel(x))", "exists x.(Warship(x) & CommercialVessel(x))", "exists x.(Warship(x) & CommercialVessel(x))", "exists x.(Warship(x) & CommercialVessel(x))", "exists x.(Warship(x) & CommercialVessel(x))", "exists x.(Warship(x) & CommercialVessel(x))", "exists x.(Warship(x) & CommercialVessel(x))", "exists x.(Warship(x) & CommercialVessel(x))", "exists x.(Warship(x) & CommercialVessel(x))", "exists x.(Warship(x) & CommercialVessel(x))", "exists x.(Warship(x) & CommercialVessel(x))", "exists x.(Warship(x) & CommercialVessel(x))", "exists x.(Warship(x) & CommercialVessel(x))", "exists x.(Warship(x) & CommercialVessel(x))", "exists x.(Warship(x) & Commercial(x))", "exists x.(Warship(x) & CommercialVessel(x))"]}
{"id": "folio_train_762", "nl": "If a album is written by a rock band, then the genre of the album is rock.", "fol": "all z.((WrittenByBand(x,y) & IsRockBand(y,z)) -> Genre(x,Rock))", "prediction": ["all x y z.((Album(x) & RockBand(y) & WrittenBy(x,y)) -> RockGenre(x))", "all x.((Album(x) & WrittenByRockBand(x)) -> RockGenre(x))", "all x y.((Album(x) & WrittenByRockBand(x) & RockGirl(y)) -> RockGenre(x,y))", "all x.((Album(x) & WrittenByRockBand(x)) -> Rock(x))", "all x.((Album(x) & WrittenByRockBand(x)) -> RockGenre(x))", "all x y.((Album(x) & RockBand(y) & WrittenBy(x,y)) -> Rock(x))", "all x y.((Album(x) & WrittenByRockBand(x)) -> Rock(y))", "all x.((Album(x) & WrittenByRockBand(x)) -> Rock(x))", "all x y.((Album(x) & RockBand(y) & WrittenBy(x,y)) -> RockGenre(x))", "all x.((Album(x) & WrittenByRockBand(x)) -> RockGenre(x))", "all x.((Album(x) & WrittenByRockBand(x)) -> RockGenre(x))", "all x y.((Band(x) & Album(y) & WrittenBy(x,y)) -> Rock(y))", "all x y.((Album(x) & RockBand(y) & WrittenBy(x,y)) -> RockGenre(x))", "all x.((Album(x) & WrittenByRockBand(x)) -> RockGenre(x))", "all x.((Album(x) & WrittenByRockBand(x)) -> RockGenre(x))", "all x.((Album(x) & WrittenByRockBand(x)) -> RockGenre(x))"]}
{"id": "folio_train_763", "nl": "If a band writes a album winning an award, then this band wins this award.", "fol": "all z.((WrittenByBand(x,y) & AwardedAlbum(x,z)) -> BandWinsAward(y,z))", "prediction": ["all x y z.((Band(x) & Album(y) & Award(z) & Writes(x,y) & Wins(y,z)) -> Wins(x,y))", "all x y.((Band(x) & Album(y) & Writes(x,y) & WinsAward(x)) -> WinsAward(x))", "all x.((Band(x) & WritesAlbum(x) & WinsAward(x)) -> WinsAward(x))", "all x y.((Band(x) & Album(y) & Writes(x,y) & WinsAward(x)) -> WinsAward(y))", "all x y.((Band(x) & Album(y) & Writes(x,y)) -> WinsAward(x,y))", "all x y.((Band(x) & Song(y) & WritesAlbum(x,y)) -> WinsAward(x,y))", "all x y.((Band(x) & Album(y) & Writes(x,y)) -> WinsAward(x,y))", "all x y.((Band(x) & Album(y) & Writes(x,y)) -> WinsAward(y,y))", "all x y.((Band(x) & Album(y) & Writes(x,y)) -> Wins(x,y))", "all x y.((Band(x) & Album(y) & Writes(x,y) & WinsAward(y)) -> WinsAward(x,y))", "all x.((Band(x) & WritesAlbum(x) & WinsAward(x)) -> WinsAward(x))", "all x.(WritesAlbumWinning(x) -> WinsAward(x))", "all x.((Band(x) & WritesAlbum(x) & WinsAward(x)) -> WinsAward(x))", "all x.((Band(x) & WritesAlbumWinner(x)) -> WinsAward(x))", "all x.((Band(x) & WritesAlbum(x) & WinsAward(x)) -> WinsAward(x))", "all x.((Band(x) & WritesAlbum(x) & WinsAward(x)) -> WinsAward(x))"]}
{"id": "folio_train_764", "nl": "Trouble at the Henhouse is an album by The Tragically Hip.", "fol": "WrittenByBand(Trouble_at_the_Henhouse,The_Tragically_Hip)", "prediction": ["(Album(TroubleAtHenhouse) & TheThreaticallyHip(TroubleAtHenhouse))", "The TragicallyHip(Tragedy(x) -> Album(x))", "TroubleAtHenhouse.org is an album by TragicallyHip.", "(TheThravenlyHip(TroubleAtHenhouse) -> Album((TroubleAtHenhouse)))", "-(TheThriscopiclyHip(TroubleAtHenhouse) & Album(Atomic(Hair)))", "TroubleAtHenhouse(album) -> TragicallyHip(album))", "TributeAtTheHenhouse(album)", "TroubleAtHenhouse(album) & TragicallyHip(album)", "The TragicallyHip(TurnsAtHenhouse)", "TroubleAtHenhouse(album)", "The TragicallyHip(TroubleAtHenhouse)", "TroubleAtHenhouse(album) & PublishedByTheThroaticallyHip(album)", "TroubleAtHenhouse(album) & PsychicallyHip(album)", "(Musical(TroubleAtHenhouse) & TriviallyHip(TroubleAtHenhouse))", "(All x.(TroubleAtTheHenhouse(x) -> TragicallyHip(x)))", "Das Album TroubleAtHenhouseSizes(i))"]}
{"id": "folio_train_765", "nl": "The Tragically Hip is a Canadian rock band.", "fol": "IsRockBand(The_Tragically_Hip,Canada)", "prediction": ["TragicallyHip: CanadianRockBand(x)", "-TradramaticallyHip(t) & CanadianRockBand(c))", "(CanadanRockBand(ThroaticallyHip))", "the TragicallyHip is a CanadianRockBand.", "(CanadanRockBand(n) & TragicallyHip(n))", "All x.(ThreverlyHip(x) -> CanadianRockBand(x))", "TragicallyHip is a CanadianRockBand.", "TragicallyHip ist eine CanadianRockBand(x).", "The TragicallyHip (CanadianRockBand(ThroughlyHip))", "The TragicallyHyp(x) & CanadianRockBand(x))", "(TheThroaticallyHop(RotaryBand) & CanadianRockBand(Transcription))", "The TragicallyHip is a CanadianRockBand.", "The TragicallyHip is a CanadianRockBand.", "The TragicallyHip is a CanadianRockBand.", "The TragicallyHip is a CanadianRockBand.", "TragicallyHip(x) -> (RockBand(x) & Canadian(x)))"]}
{"id": "folio_train_766", "nl": "The song \"Butts Wigglin'\" is in Trouble at the Henhouse.", "fol": "ContainsSongInAlbum(Butts_Wigglin,Trouble_at_the_Henhouse)", "prediction": ["The Song \"ButtsWigglin'\" is in TroubleAtHenhouse(x)).", "(-Song(ButtsWigglins) & TroubleAtHenhouse(t))", "((ButtsWigglin') & TroubleAtHenhouse(s)) -> InTroubleAtHenhouse(i))", "(Song(buttswigglin') & InTroubleAtHenhouse(butts)", "It exists x.(Song(x) & \"ButtsWigglin'(x)\" -> InSleepyAtHenhouse(x))", "\"ButtsWigglin'\" is in TroubleAtHenhouse(x))", "\"ButtsWigglin'\" is in TroubleAtHenhouse(x)", "All x.((Song(x) & ButtsWigglin'(x)) -> TroubleAtHenhouse(x))", "\"ButtsWigglin'\" (SongInHenhouse(x))", "(NeedSong(n) & \"ButtsWigglinion\"(n)) & TroubleAtHenhouse(n))", "All x.((Song(x) & ButtsWigglin'(x)) -> TroubleAtHenhouse(x))", "\"ButtsWigglin'\" (Song in TroubleAtHenhouse))", "\"ButtsWigglin'\" is in TroubleAtHenhouse(en)", "(PianoAndHenhouse(Song) & -ButtsWigglin'(Song,Trouble) & InHenhouse(Song,Trouble))", "(HintonIsThatHenhouse(ButtsWigglin') / TroubleAtHenhouse(BrittsWigglin'))", "(InTroubleAtHenhouse(Song,ButtsWigglin')"]}
{"id": "folio_train_767", "nl": "Trouble at the Henhouse won the Album of the Year award.", "fol": "AwardedAlbum(Trouble_at_the_Henhouse,The_Album_of_the_Year)", "prediction": ["(WinsAlbumOfTheYear(TroubleAtHenhouse))", "(Winner(TroubleAtHenhouse) & AlbumOfTheYear(TroubleAtHenhouse))", "TroubleAtHenhouse won AlbumOfTheYear(x)", "TroubleAtHenhouseWinner(BlogOfTheYear(Turn(Two))", "(Winner(TroubleAtHenhouse) & AlbumOfTheYear))", "TroubleAtTheHenhouse(Trouble(t) & AlbumOfTheYear(t))", "All x.(Trouble(x) -> AlbumOfTheYear(x))", "TroubleAtHenhouse(TroublesAtHenhouse(RefereedToAlbumOfYear((Trouble,LongBody))", "TroubleAtHenhouse won AlbumOfYear(x)", "TroubleAtHenhouse(e) & wonAlbumOfYear(e)", "all x.((TroubleAtHenhouse(x) & AlbumOfTheYear(x)) -> WinsAward(x))", "TroubleAtHenhouse.winsAlbumOfYear(x)", "TroubleAtHenhouse(tourist) - wonAlbumOfYear(tTroubleAtHenhouse))", "all x.((TroubleAtHenhouse(x) & AlbumOfTheYear(x)) -> Wins(x,1))", "all x y z.((TroubleAtHenhouse(x) & AlbumOfTheYearAward(y) & Album(z) & AssociatedWith(y,z)) -> WonAward(y,x))", "(WinsAlbumOfYear(TroubleAtHenhouse))"]}
{"id": "folio_train_768", "nl": "A song in Trouble at the Henhouse appeared in a film.", "fol": "exists x.(SongAppearsInFilm(x) & ContainsSongInAlbum(x,Trouble_at_the_Henhouse))", "prediction": ["exists x y.(Song(x) & Film(y) & TroubleAtTheHenhouse(x) & AppearsIn(x,y))", "all x.((Song(x) & TroubleAtHenhouse(x)) -> AppearsInFilm(x))", "all x y.((Song(x) & TroubleAtHenhouse(x)) -> ErasedInFilm(x,y))", "all x y z.((Song(x) & TroubleOfHenhouse(y) & Film(z)) -> appearedIn(x,y,z))", "all x.((Song(x) & TroubleAtHenhouse(x)) -> ApparedInFilm(x))", "exists x.(Song(x) & TroubleAtHenhouse(x) & AppearsInFilm(x))", "All x y.((Song(x) & TroubleAtHenhouse(y)) -> AppearsInFilm(x,y))", "all x y.((Song(x) & TroubleAtHenhouse(x)) -> AppearsInFilm(y))", "all x y.((Song(x) & TroubleAtHenhouse(y)) -> appearedInFilm(x,y))", "all x y.((Song(x) & TroubleAtHenhouse(x)) -> AppearsInFilm(x))", "all x y.((Song(x) & TroubleAtHenhouse(x)) -> AppertainedInFilm(x))", "all x y.((Song(x) & TroubleAtTheHenhouse(x,y) & Film(y)) -> ApparaisesIn(x,y))", "exists x.(Song(x) & TroubleAtHenhouse(x) & appearedInFilm(x))", "all x y z.((Song(x) & TroubleAtHenhouse(y) & Film(z)) -> FirstApparedIn(x,y,z))", "all x y z.((Song(x) & TroubleBetweenHenhouse(y) & Film(z)) -> Aging(x,y,z))", "all x y.((Song(x) & TroubleAtHenhouse(y)) -> AppearsInFilm(x,y))"]}
{"id": "folio_train_769", "nl": "The genre of Trouble at the Henhouse is rock.", "fol": "Genre(Trouble_at_the_Henhouse,Rock)", "prediction": ["All x.(TroubleAtHenhouse(x) -> Rock(x))", "all x.(TroubleAtHenhouse(x) -> Rock(x))", "All x.((GeometricGenre(x) & TroubleAtTheHenhouse(x)) -> Rock(x))", "All x.(TroubleAtHenhouse(x) -> Rock(x))", "TroubleAtHenhouse (Rock)", "all x.(TroubleAtHenhouse(x) -> Rock(x))", "All x.(TroubleAtHenhouse(x) -> Rock(x))", "All x.(TroubleAtHenhouse(x) -> Rock(x))", "(Steel(TroubleAtHenhouse) -> Rock(Travel))", "All x y z.((TroubleAtHenhouse(x) & Hammer(y) & ThrillGenre(z)) -> Rock(x))", "all x.((TroubleAtHenhouse(x) & Rock(x)) -> Rock(x))", "The genre of TroubleAtHenhouse(x) -> Rock(x))", "(all x.(TroubleAtHenhouse(x) -> Rock(x))", "All x.(TroubleAtHenhouse(x) -> Rock(x))", "all x.(TroubleAtHenhouse(x) -> Rock(x))", "all x.((Glame(x) & TroubleAtHenhouse(x)) -> Rock(x))"]}
{"id": "folio_train_770", "nl": "A canada rock band didn't win the Album of the Year award.", "fol": "exists x y.(IsRockBand(x,Canada) & WrittenByBand(x,y) & -AwardedAlbum(y,The_Album_of_the_Year))", "prediction": ["all x.(CanadianRockBand(x) -> -WinsAlbumOfTheYear(x))", "all x.(CanadianRockBand(x) -> -WonAlbumOfTheYear(x))", "all x.(CanadianRockBand(x) -> Unfortunately,(-WinsAlbumOfYear(x)))", "all x.((CanadianRockBand(x) & -WinsAlbumOfYear(x)) -> -CanCanCanadianRockBand(x))", "all x.(CanadianRockBand(x) -> -WinsAlbumOfTheYearAward(x))", "(-winsAlbumOfYear(CanadianRockBand))", "all x y.((CanadianRockBand(x) & AlbumOfTheYear(y) & -Won(x,y)) -> -WonCircleOfYear(x))", "all x.(CanadianRockBand(x) -> -WinsAlbumOfYoung(x))", "all x.((CanadianRockBand(x) & -WinsAlbumOfYear(x)) -> NotCanadianRockBand(x))", "all x.(CanadianRockBand(x) -> -WinningAlbumOfTheYear(x))", "all x.(CanadianRockBand(x) -> -AwardWinsAlbumOfYear(x))", "all x.(CanadianRockBand(x) -> Inactive(x))", "all x.(CanadianRockBand(x) -> -WinsAlbumOfYear(x))", "exists x.(CanadianRockBand(x) & -WinsAlbumOfYear(x))", "all x.((CanadianRockBand(x) & -WinsApproval(x)) -> AlbumOfTheYear(x))", "all x.(CanadianRockBand(x) -> -WinsAlbumOfYear(x))"]}
{"id": "folio_train_771", "nl": "\"Butts Wigglin'\" appeared in a film.", "fol": "SongAppearsInFilm(Butts_Wigglin)", "prediction": ["(AppearsInFilm(ButtsWigglin(but) & Film(but))", "-exists x.(Movie(x) & \"ButtsWigglin'(x)))", "All x.((ButtsWigglin') -> EmergedInFilm(x))", "\"ButtsWigglin'\" appeared in a film.", "\"ButtsWigglin'\" appeared in a film.", "\"ButtsWigglin'\" appeared in film.", "all x.((ButtsWigglin(x) & Film(y)) -> AppearsIn(x,y))", "\"ButtsWigglin'\" appeared in a film.", "(OfficialFilm(ButtsWigglin')", "\"ButtsWinglin'\" appeared in a film.", "\"ButtsWigglin'\" appeared in a film.", "all x.((ButtsWigglin'(x)) -> AppearedInFilm(x))", "all x y z.((ButtsWigglin(x) & Film(y) & Film(z)) -> AppearedIn(x,y,z))", "all x y.((ButtsWigglin(x) & Film(y)) -> PerformedIn(x,y))", "the character & \"ButtsWigglin(x)\" appeared in a film.", "\"ButtsWigglin'\" appeared in a film."]}
{"id": "folio_train_772", "nl": "Daniel is a software engineer and he works at Palantir Technologies.", "fol": "(IsSoftwareEngineer(Daniel) & WorksAtCompany(Daniel,PalantirTechnologies))", "prediction": ["all x.((SoftwareEngineer(x) & WorksAtPalantirTechnology(x)) -> DanielWorksAt(x))", "all x.(SoftwareEngineer(x) & WorksAtPalantirTechnics(x))", "(SoftwareEngineer(Dan) & WorksAtPalantirTechnology(Dan))", "Daniel est SoftwareEngineer(dan) & exists y.(Product(y) & WorksAt(z,y) & PalantirTechnology(z) & WorksAt(x,y,z)))", "(SoftwareEngineer(Daniel) & WorksAtPalantirTechnology(Daniel))", "(SoftwareEngineer(Daniel) & WorkedAtPalantir(Daniel))", "(Programmer(Daniel) & WorksAtPalantirTech(Daniel))", "(SoftwareEngineer(Daniel) & exists y.(PalantirTech(y) & WorksAt(Daniel(Daniel,y))))", "(SoftwareEngineer(Daniel) & WorkedAtPalantirTech (Daniel)))", "(Since 2000, Daniel has WorkedAtPalantirTechnology(Daniel) & SoftwareEngineer(Daniel))", "(SoftwareEngineer(d) & WorksAtPalantirTechnology(d))", "all x y.((SoftwareEngineer(x) & PalantirTech(y)) -> WorksAt(y,x))", "(SoftwareEngineer(Daniel) & PalantirTechnology(Daniel))", "(SocietiesEngineer(Daniel) & WorkCollection(Daniels))", "(SoftwareEngineer(Daniel) & PalantirTechnology(Daniel))", "(SoftwareEngineer(Dan) & LivesWith(Dan,PalantirTechnology))"]}
{"id": "folio_train_773", "nl": "Daniel studied bioengineering during his undergraduate at Rice University.", "fol": "StudiedBioengineeringAt(Daniel,RiceUniversity)", "prediction": ["(Student(Daniel) & Undergraduate(Daniel,RiceUniversity))", "Daniel studied Bioengineering at Rice University.", "(Heirloom(Daniel) & RiceUndergraduate(Daniel))", "(Student(Daniel), Rice University (Campus(Daniel) & StudiedBioengineering(Daniel)))", "W\u00e4hrend des UndergraduateUrban(DanielPrice) he studiedBiologicalEngineering(Daniel)", "(Studier(Daniels,Bioengineering) & Undergraduate(Daniels,Rice))", "(Study(Daniel) & Bioengineering(Daniell))", "all x y.((Dan(x) & RiceUniversity(y)) -> StudiedBioengineering(x,y))", "Daniel Rice studied Bioengineering during his undergraduate year at Rice University.", "Daniel grew up doing bioengineering as an undergraduate at Rice University.", "(Study(Daniel,Bioengineering) & Undergraduate(Daniel,Rice))", "all x y z.((DanielLarry(x) & Bioengineering(y) & RiceUniversity(z)) -> StudiedDuring(x,y,z))", "(StudyInDegrees(Jean,Rice) & BioEngineering(Daniel,Coreman,Rice))", "Daniel studiedBioengineering & Undergraduate(Dan) at Rice University.", "During undergraduate at Rice University, Daniel studiedBioengineering.", "(Student(Daniel) & Undergraduate(Daniel)"]}
{"id": "folio_train_774", "nl": "Daniel\u2019s older sister works at Meta as a technical sourcer. ", "fol": "(WorksAtMeta(DanielsOlderSister) & IsTechnicalSourcer(DanielsOlderSister))", "prediction": ["Daniels older sister worksAtMetaAsTechnicalSourcer(Daniel,OlderSister(Diamond))", "all x y.((OlderSister(x) & Daniel(y)) -> (WorksAtMeta(x,y) & TechnicalSourcer(x)))", "all x.(ArnoldSister(x,Daniel) & WorksAtMeta(x,TechnicalSourcer))", "all x.((OlderSister(x, Daniel) & WorksAtMeta(x)) -> TechnicalSourcer(x))", "all x y.((OlderSister(x) & Daniel(y)) -> WorksAtMeta(x,y))", "all x.((Sister(x) & SeniorSister(x)) -> WorksAtMetaAsTechnicalSourcer(x))", "Daniel\u2019s older sister worksAtMeta(d) & TechnicalSourcer(d))", "all x y z.((OlderSheet(x) & DanielsSolf(y) & Meta(z)) -> WorksAsTechnicalSourcer(x,y,z))", "all x y.((Sister(x) & Daniel(y)) -> WorksAtMeta(x,y))", "all x.(OlderSister(x) \u2013 WorksAtMetaAsTechnicalSourcer(x)) -> Danilo(x))", "DanesSisterWorksAtMetaAsTechnicalSourcer(Daniel,OlderSister)", "Daniel\u2019s older sister works at Meta as a technical sourcer.", "Daniel\u2019s older sister worksatMeta(sooner,technicalSourcer)", "(OlderSister(Daniel) & TechnicalSourcer(Diane))", "all x.((MathematicSister(x) & OlderSister(x)) -> TechnicalSourcer(x))", "(OlderSister(Daniel) & WorksAtMeta(Daniel,TechnicalSourcer))"]}
{"id": "folio_train_775", "nl": "Daniel\u2019s dad and older sister both graduated from Stanford University.", "fol": "(GraduatedFromStanford(DanielsOlderSister) & GraduatedFromStanford(DanielsDad))", "prediction": ["all x.((Dad(x) & Sister(x)) -> StanfordUniversityGraduate(x))", "(Dad(Daniel) & olderSister(Daniel) are GraduatedFromStanfordUniversity(Daniel))", "all x y.((Dad(x) & Elders sister(y)) -> (GraduatedFromStanford(x) & GraduatedFromStanford(y)))", "(Dad(Daniel) & Sister(Alter(Daniel)) & Stanford University(Daniel)", "(Dad(Daniels) & OlderSister(Daniels) graduatedFromStanfordUniversity(Daniels))", "Daniel\u2019s dad and older sister graduated from StanfordUniversity.", "(Dad(Daniel) & Son(Daniel) & OlderSister(daniel,d) & StanfordUniversity(d))", "Daniel\u2019s Dad and her older sister both graduated from Stanford University.", "(Father(Dan) & OlderSister(Dan) & StanfordUniversity(Dan))", "(Donald(Dad,#1) & olderSister(Dan) graduatedFromStanfordUniversity(Dan,Stanford))", "(Dad and Sister(Daniel) graduated from Stanford.", "(Dad(Daniel) & OlderSister(Daniel) & Stanford(Stevens))", "(Dad and olderSister(Daniel) graduatedFromStanford(Daniel,SU))", "(Demo(Dad) & SeniorSister(Daniel) graduated(Daniel, Stanford))", "(Dema(Daniel) & OlderSister(Daniel) & StanfordUniversity(Daniel))", "(Dan(Daniel) und his (OlderSister(Daniel) & StanfordUniversity(Daniel)) graduated(Daniel))"]}
{"id": "folio_train_776", "nl": "Daniel\u2019s dad is a doctor practicing internal medicine at a veteran\u2019s hospital in Minneapolis", "fol": "IsDoctorPracticingInternalMedicine(DanielsDad,VeteransHospitalInMinneapolis)", "prediction": ["all x y z.((Daniel_dad(x) & Doctor(y) & VeteranH\u00f4pital(z) & PracticesInternalMedicine(y,z)) -> PracticesInternalMedicine(x,y,z))", "all x y.((Dad(x) & Veteran(y)) -> (Doctor(x) & PracticesInternalMedicine(x) & VeteransHospital(y) & MinnesotaHospital(y)))", "all x.((Dad(x) & Doctor(x) & PracticesInternalMedicine(x) & VeteranHospital(x)) -> DanielSamanth(x))", "all x.(Dad(x) -> (Doctor(x) & PracticesInternalMedicine(x) & VacantHospital(x) & Minneapolis(x)))", "all x.((Daniel(x) & Dad(x)) -> (DoctorPracticingInternalMedicine(x) & VeteransHospital(x) & Minneapolis(x)))", "all x.((Dad(x) & Doctor(x) & PracticesInternalMedicationAtVeteransHospital(x) & InMinneapolis(x)) -> DanielSaddenDad(x))", "all x y.((Dad(x) & Doctor(y) & PracticesInternalMedicine(x)) -> DanielAndAdrianDak(x))", "all x y.((Daniel(x) & Dad(x) & VeteransH\u00f4pital(y) & PracticesInternalMedicine(x,y)) -> PracticesInternalMedicine(x,y))", "all x y z.((Danny(x) & Dad(y) & VeteranHospital(z)) -> (Doctor(x) & PracticingInternalMedicine(x,z) & VeteransHospitalInMinneapolis(z) & VeteransHospitalInMinneapolis(z) & Minneapolis(z) & Minneapolis(z) & VeteranHospital(y) & Minnesota(y)))", "all x y.((Dan(x) & Dad(y)) -> (DoctorPracticingInternalMedicine(x,y) & VeteranInHospital(y)))", "all x.(Danny(x) -> (DoctorPracticingInternalMedicine(x) & VeteranHealthCareer(x) & InMNeapel(x)))", "all x y.((Daniel(x) & Dad(y)) -> (DoctorPracticingInternalMedicine(y,x) & VeteransHospital(y,in(x,y)))", "all x y.((Dan Daniel\u2019s Dad(x) & VeteranH\u00f4pital(y)) -> (DoctorPracticingInternalMed(x) & VeteranHospital(x) & InMinneapolis(x)))", "is practicingInternalMedicineInVeteranHospital(Daniel,MetLife) & exists 144r toDaniel(Danny(Danny,Kempens) & PracticesInternalMedicineAndVeteranHospital(Daniel,Minneapolis))", "all x.(Dad(x) -> (DoctorPracticingInternalMedicine(x) & VeteransHospital(x) & InMinneapolis(x)))", "is a doctor practicing internalmedicine at veteranshospital in Minneapolis. Daniel\u2019s dad is a doctor practicing at the Minnesota campus."]}
{"id": "folio_train_777", "nl": "Daniel once applied to Stanford University, but he couldn\u2019t get in even though he has family members who are Stanford alumni.", "fol": "(AppliedToStanfordUniversity(Daniel) & -AdmittedToStanfordUniversity(Daniel) & HasFamilyMembersWhoAreStanfordAlumni(Daniel))", "prediction": ["(UnderstandsStandard(Daniel) & AppliedTo(Daniel) & -CanGrowIn(Daniel) & Berkeley alumni(Daniel))", "all x.((Cardinal(x) & AppliedTo(x,Stanford) & StanfordAlumnus(x)) -> -GatheredIn(x))", "all x y.((Jane(x) & StanfordUniversity(y)) -> (AppliedTo(x,y) & -CanGetIn(x,y) & FamilyAlumni(x)))", "all x y.((David(x) & StanfordU.(y)) -> (AppliedTo(x,y) & -Includes(x,y)))", "all x y.((Jane(x) & StanfordUniversity(y)) -> (AppliedTo(x,y) & Can'tGetIn(x) & HasFamily(x,y)))", "all x.((Daniel(x) & Stanford(u)) -> \u2018CannotApply(x,u) & FamilyMembers(x,u)))", "all x y.((Daniel(x) & StanfordUniversity(y)) -> (AppliedTo(x,y) & -CanGetIn(x,y)))", "all x.((Daniel(x) & StanfordU.(d) & FamilyMembers(x)) & StanfordAlumni(x)) -> CannotGetIn(x))", "all x y.((Daniel(x) & StanfordU (y) & Family(x,y)) -> -CanGetIn(x,y)))", "all x.((Jane(x) & Stanford(y)) -> (APPEATED(x,y) & -CanGetIn(x,y)))", "all x.((Daniel(x) & StanfordUniversity(x)) -> -CanBeIn(x))", "(AppliedToStanford(Daniel) & CannotGetIn(Daniel) & FamilyMembersSoCalIndustry(Daniel))", "(all x.(Bill(x) -> Stanford(x))) &,until now, he couldn\u2019t get in, because he has StanfordAbouts(x))", "(all x.(Daniel(x) -> Awkward(x)) & never got into Stanford University ((Daniel) & HasFamilyMembers(x,StanfordAlumni))))", "all x y.((Dan(x) & StanfordUrban(y)) -> (AppliedTo(x,y) & -CanGrowIn(x)))", "all x y z.((Family(x) & StanfordUniversity(y) & FamilyHasAlumni(z)) -> (AppliesTo(x,y) & CantGetIn(x,z)))"]}
{"id": "folio_train_778", "nl": "Daniel studied bioengineering as his major at Rice University.", "fol": "StudiedBioengineeringAt(Daniel,RiceUniversity)", "prediction": ["Daniel studiedBioengineering at Rice University, Major (Dan@Dan.))", "(Marshall(Daniels) & RiceU.Tech(Lecture(Daniels) & Bioengineering(Daniels))", "Daniel studiedBioengineeringAsMajorAtRiceUniv.", "Daniel studied Bioengineering as a major at Rice University.", "all x y.((Daniel(x) & RiceUniversity(y)) -> StudiesBioengineeringMajor(x,y))", "Daniel studiedBioengineeringAsMajorAtRiceUniversity.", "Daniel studiedBioengineering(Daniel,RiceUniversity)", "(Multan(Daniel) & RiceUniversity(Dan))", "(Study(Daniel,Bioengineering) | Minor(Daniel,Rice)))", "Daniel studiedBiology(Daniel,Rice) & Major(Daniel,Bioengineering))", "Daniel studiedBioengineering as major at Rice University.", "(Study(Daniel,Bioengineering) & Major(Daniel,Rice))", "(StudyDegree(Daniel) & Bioengineering(Daniel))", "Daniel studied(IBM) at Rice University(IBM)", "Daniel Yatez. (Student(Daniel,Bioengineering,Rice) & Major(Daniel,Secretary))", "Daniel studied Bioengineering (part-time major) & at Rice University."]}
{"id": "folio_train_779", "nl": "Daniel and his sister grew up in Minneapolis, Minnesota.", "fol": "(GrewUpIn(Daniel,Minneapolis,Minnesota) & GrewUpIn(DanielsOlderSister,Minneapolis,Minnesota))", "prediction": ["-(Sister(Dan) & GrownUpInMinneapolis(Dan,Bann)))", "(ErasedInMinneapolis(Daniel) & GrazedIn(Daniel,Minneapolis))", "Daniel and his sister grewUpInMuckinsonMN.(Daniel,Muckine))", "((Daniel(Daniel) & Sister(Daniel)) -> GrownInMinneapolis(Daniel))", "(GrowthInMNucky(Daniel) & GrowSister(Daniel))", "All x y.((Daniel(x) & Sister(y)) -> GoneIn(x,y))", "all x y.((Daniel) & Sibling(y)) -> (GlowsUpIn(x,y) & Minneapolis(y) & Minnesota(y)))", "(Sister(Daniel) & GrowingUpInMinneapolis(Daniel))", "((Daniel) & Sibling(Daniel)) -> grewUpInMinneapolis(Daniel,Minneapolis))", "((Daniel(Daniel) & Sister(Sister,Minneapolis)) -> GroundedUpIn(Daniel,Minneapolis))", "(GrowedUpIn(Daniel,Minnesota) & (DanielWilson(Daniel,MN) | Sister(daniel)))", "-((Daniel(Daniel) & Sister(Minneapolis(Daniel)) | (Sister(Daniel) & Sister(Sister))))", "all x y.((Product(x) & Sister(y)) -> (GrowsUp(y,Mt.N.Mt) & GrowsUp(y,Mt.Mt.)))", "((Daniel(Daniel) | Sibling(Daniel))) & grewUpInMelbourne,Mn.))", "(LetsTogether(Daniel,MissNebsk) & LetsGo(Daniel,Minneapolis))", "Daniel and the boy he befriended grew up in Minnesota for a year. Daniel & his sister were born in Minneapolis, Minnesota."]}
{"id": "folio_train_780", "nl": "All commerical aircraft are produced by either Boeing or Airbus.", "fol": "all x.(IsCommercialAircraft(x) -> ((IsProducedBy(x,Boeing) & -IsProducedBy(x,Airbus)) | (-IsProducedBy(x,Boeing) & IsProducedBy(x,Airbus))))", "prediction": ["all x.(CommercialAircraft(x) -> (Boeing(x) | Airbus(x)))", "all x.(ComparicalAircraft(x) -> (ProducedByBoeing(x) | ProducedByAirbus(x)))", "all x.(ComericalAircraft(x) -> (ProducedByBoeing(x) | ProducedByAirbus(x)))", "all x.(CommercialAircraft(x) -> (ProducedByBoeing(x) | ProducedByAirbus(x)))", "all x.(CommericalAircraft(x) -> (Boeing(x) | Airbus(x)))", "all x.(CommericalAircraft(x) -> (ProducedByBoeing(x) | ProducedByAirbus(x)))", "all x.(CommercialAircraft(x) -> (ProducedByBoeing(x) | ProducedByAirbus(x)))", "all x.(CommercialAircraft(x) -> (ProducedByBoeing(x) | ProducedByAirbus(x)))", "all x.(CommericalAircraft(x) -> (ProducedByBoeing(x) | ProducedByAirbus(x)))", "all x.(ComericalAircraft(x) -> (BoeingProduced(x) | AirbusProduced(x)))", "all x y.((CommericalAircraft(x) & Boeing(y)) | Airbus(y)) -> ProducedBy(x,y))", "all x.(CommericalAircraft(x) -> (ProducedByBoeing(x) | ProducedByAirbus(x)))", "all x.(CommericalAircraft(x) -> (ProducedByBoeing(x) | ProducedByAirbus(x)))", "all x.(CommericalAircraft(x) -> (exists y.(Boeing(y) & InFlight(y,x)) & (Aeroport(y) | Airbus(y)) & ProducedBy(x,y)))", "all x.(ComparicalAircraft(x) -> ((Boeing(x) | Airbus(x))))", "all x.(CommercialAircraft(x) -> (ProducedByBoeing(x) | ProducedByAirbus(x)))"]}
{"id": "folio_train_781", "nl": "All American Airlines jets are commerical aircraft. ", "fol": "all x.(IsAmericanAirlinesAircraft(x) -> IsCommercialAircraft(x))", "prediction": ["all x.(AirlineJet(x) -> CommericalAircraft(x))", "all x.(AmericanAirlineJet(x) -> CommericalAircraft(x))", "all x.(AmericanAirlineJet(x) -> CommericalAircraft(x))", "all x.(AffordableAirlineJet(x) -> CommericalAircraft(x))", "all x.(AmericanAirlineJet(x) -> CommericalAircraft(x))", "all x.(AmericanAirlineJet(x) -> CommercialAircraft(x))", "all x.(AmenityAirlineJet(x) -> CommericalAviation(x))", "all x.(AirlineJet(x) -> CommericalAircraft(x))", "all x.(AirlineJet(x) -> CommericalAircraft(x))", "all x.(AmericanAirlineJet(x) -> CommericalAircraft(x))", "all x.(AmericanAirlineJet(x) -> CommericalAircraft(x))", "all x.(AirlineJet(x) -> CommericalAircraft(x))", "all x.(AirlineJet(x) -> CommericalAircraft(x))", "all x.(AmericanAirlineJet(x) -> CommericalAircraft(x))", "all x.(AirlineJet(x) -> CommericalAircraft(x))", "all x.(AirlineJet(x) -> CommericalAircraft(x))"]}
{"id": "folio_train_782", "nl": "Airbus made more in revenue than Boeing last year.", "fol": "AirbusRevenueGreaterThanBoeing(Airbus,Boeing)", "prediction": ["all x y.((Airbus(x) & Boeing(y)) -> MadeMoreRevenueLatestYear(x,y))", "all x y.((Airbus(x) & Boeing(y)) -> MadeMoreInRevenueLastYear(x,y))", "all x y.((Airbus(x) & Boeing(y)) -> MadeMoreRevenue(x,y))", "Airbus made more in revenue than Boeing last year.", "all x y.((Airbus(x) & Boeing(y)) -> MadeMoreInRevenue(x,y))", "all x y.((Airbus(x) & Boeing(y)) -> MadeMore(x,y))", "all x y.((Airbus(x) & Boeing(y)) -> MadeMoreInRevenue(x,y))", "all x y.((Airbus(x) & Boeing(y)) -> MoreInRevenue(x,y))", "all x y.((Airbus(x) & Boeing(y)) -> MadeMoreRevenue(x,y))", "all x y.((Airbus(x) & Boeing(y)) -> MadeMoreRevenue(x,y))", "all x.(Airbus(x) -> (MadeMoreInRevenue(x) & Boeing(x)))", "all x y.((Airbus(x) & Boeing(y)) -> MadeMoreRevenue(x,y))", "all x y.((Airbus(x) & Boeing(y)) -> MadeMoreRevenueLastYear(x,y))", "all x y.((Airbus(x) & Boeing(y)) -> MadeMoreInRevenue(x,y))", "all x.(Revenue(x) -> MOREAirbus(x))", "all x y.((Airbus(x) & Boeing(y)) -> MadeMoreInRevenue(x,y))"]}
{"id": "folio_train_783", "nl": "An American Airlines plane is either a Boeing or Airbus plane.", "fol": "all x.(IsAmericanAirlinesAircraft(x) -> (IsProducedBy(x,Boeing) | IsProducedBy(x,Airbus)))", "prediction": ["all x.(AmericanAirlinePlane(x) -> (BeyondBoeing(x) | OnAirbus(x)))", "all x.(AirlinePlane(x) -> (BoeingPlane(x) | AirbusPlane(x)))", "all x.(AmericanAirlinePlanet(x) -> (BoeingPlane(x) | AirbusPlane(x)))", "all x.(AirlineAirplane(x) -> (Boeing(x) | Airbus(x)))", "all x.(AmericanAirlinePlane(x) -> (BoeingPlane(x) | AirbusPlane(x)))", "all x.(AmericanAirlinePlane(x) -> (BoeingPlane(x) | AirbusPlane(x)))", "all x.(AmericanAirlinePplane(x) -> (Busket(x) | Airbus(x)))", "all x.(Project(x) -> (AmericanAirlinePlane(x) | AirbusPlane(x)))", "all x.(AmericanAirlinePlane(x) -> (Boeing(x) | Airbus(x)))", "all x.(AirlinePlane(x) -> ((BoeingPlane(x) | AirbusPlane(x))))", "all x.(AmericanAirlinePlane(x) -> (BoeingBuss(x) | AirbusPlane(x)))", "all x.(Airline(x) -> (Boeing(x) | Airbus(x)))", "all x.(AirlinePlane(x) -> (Boeing(x) | Airbus(x)))", "all x.(AmericanAirlinePlanet(x) -> (BoeingPlane(x) | AirbusPlane(x)))", "all x.(AmericanAirline(x) -> (BoeingPlane(x) | AirbusPlane(x)))", "all x.(AmericanAirlinePlane(x) -> (BoeingPlane(x) | AirbusPlane(x)))"]}
{"id": "folio_train_784", "nl": "There exists a SpaceX commerical aircraft.", "fol": "exists x.SpaceXCommercialAircraft(x)", "prediction": ["exists x.(SpaceXComericalAircraft(x))", "exists x.(SpaceXCommericalAircraft(x))", "exists x.(SpaceEx commericalAirplane(x) & SpaceXCreature(x))", "exists x.(SpaceXCyclist(x) & CommericalAircraft(x))", "exists x.(SpaceXCommericalAircraft(x) & SpaceXFormula(x))", "exists x.(SpaceXVehicle(x) & CommericalAircraft(x))", "exists x.(SpaceXComericalAircraft(x))", "exists x.(SpaceX ComericalAircraft(x))", "exists x.(SpaceXCommericalAerial(x))", "exists x.(SpaceXCommericalAircraft(x))", "Exists SpaceX CommericalAircraft(x)", "exists x.(SpaceXCommericalAircraft(x) & Aerial(y) & Compelling(y))", "exists x.SpaSpaceXCommericalAircraft(x).", "exists x.(SpaceXCommericalAircraft(x) & Commercial(x))", "exists x.(SpaceXCommericalAircraft(x))", "exists x.(SpaceXCommericalAircraft(x))"]}
{"id": "folio_train_785", "nl": "There does not exist a United Airlines plane produced by Boeing.", "fol": "-exists x.(UnitedAirlinesPlane(x) & IsProducedBy(x,Boeing))", "prediction": ["all x.(UnitedAirlinesPlane(x) & ProducedByBoeing(x))", "exists x.(UnitedAirlinesPlane(x) & ProducedByBoeing(x))", "(-exists x.(UnitedAirlinesPlane(x) & ProducedByBodybus(x)))", "UnemploymentOfUnitedAirlinesPlane(x,0)", "exists x.(UnitedAirlines(x) & ProducedByBoeing(x))", "(-exists x.(UnitedAirlinesPlane(x) & ProducedByBoeing(x)))", "exists x.(UnitedAirlines(x) & -ProducedByBakefast(x))", "-exists x.(UnitedAirlinesPlane(x) & DesignedByBerlin(x))", "ExistsNoUnitedAirline(x) -> ProducedByBoeing(x))", "Es gibt keine UnitedAirlinesBoeing(x) & ProducedBy(x,Boeing))", "Deexists(NatureGasPlane(n) & UnitedAirlines(n) & ProducedByBoeing(n))", "exists x.(UnitedAirlinesPlane(x) & ProducedByBoeing(x))", "exists x.(UnitedAirlinesPlane(x) & ProducedByBoeing(x))", "-exists x.(UnitedAirline(x) & ProducedByBoeing(x))", "(-exists x.(UnitedAirlinesPlane(x) & ProducedByB Boeing(x)))", "exists x.(UnitedAirlinesPlane(x) & ProducedByBoeing(x))"]}
{"id": "folio_train_786", "nl": "There is a commercial plane made by both Airbus and Boeing.", "fol": "exists x.(IsCommercialAircraft(x) & IsProducedBy(x,Airbus) & IsProducedBy(x,Boeing))", "prediction": ["exists x.(CommercialPlane(x) & Airbus(x) & Boeing(x))", "exists x.(CommercialPlane(x) & Airbus(x) & Boeing(x))", "exists x.(CommercialPlane(x) & Airbus(x) & Boeing(x))", "exists x y.(CommercialPlane(x) & Airbus(y) & Boeing(z))", "exists x.(CommercialPlane(x) & Airbus(x) & Boeing(x))", "exists x y.(CommercialPlane(x) & Airbus(y) & Boeing(y))", "exists x.(CommercialPlane(x) & MadeBy(x,Airbus) & MadeBy(x,Boeing))", "exists x.(CommercialPlane(x) & MadeByAirbusAndBoeing(x))", "exists x.(CommercialPlane(x) & Airbus(x) & Boeing(x))", "exists x.(CommercialPlane(x) & Airbus(x) & Boeing(x))", "exists x y.(CommercialPiece(x) & Airbus(y) & Boeing(y))", "exists x.(CommercialPlane(x) & MadeByAirbus(x) & MadeByBoeing(x))", "exists x y.((CommercialPlane(x) & Airbus(y) & Boeing(y)) -> MadeBy(x,y))", "exists x.(CommercialPlane(x) & Airbus(x) & Boeing(x))", "exists x.(CommercialPlane(x) & (Airbus(x) | Boeing(x)))", "exists x.(CommercialPlane(x) & Airbus(x) & Boeing(x))"]}
{"id": "folio_train_787", "nl": "Luzon is an island in the Philippines.", "fol": "(IsIsland(Luzon) & LocatedIn(Luzon,Philippines))", "prediction": ["(Island(Lucay) & InPythias(Luzon))", "IslandInPinxis(Luzon)", "IslandInPysippines(Luzon)", "all x.(Luzon(x) -> IslandInPyongyang(x))", "exists x.(Luzon(x) & IslandInPyongyang(x))", "(Island(Luzon) & Island(Luzon))", "all x.(Luzon(x) -> IslandInPyongyang(x))", "(IslandInPycnassy(Luzon) & IslandInPycnassy(Luzon))", "LuzonIsland(LuluanPyrenesian(Luzon))", "all x.(Luzion(x) -> IslandInPyrus(x))", "all x.(Lunazon(x) -> IslandInPioneers(x))", "(Island(Luzon) & IslandInPhilippines(Luzon))", "(IslandInPsylvania(Luzon) & Island(Luzon,Phnomenon))", "Luluzon (IslandInInland(Luzon) & InPyramids(Lulubon))", "IslandInPyramipines(Lucan)", "(Island(Luzon) & InPyrami(Luzon,Pyramids))"]}
{"id": "folio_train_788", "nl": "In December 1999, an earthquake struck Luzon.", "fol": "exists x.(EarthquakeEvent(x) & OccurredIn(x,December1999) & Affected(x,Luzon))", "prediction": ["(AquakeStruckLucyon(est.Dec.1999))", "-EarthquakeStruck(a,luzon) & InDezember99(a,luzon))", "all x y.((Earthquake(x) & Luzon(y)) -> (StruckInDecembre99(x,y) & Impacts(x,y)))", "all x y.((Earthquake(x) & Luzon(y)) -> Hit(x,y))", "In the month of December, 1999, an earthquake struck Luzon.", "inDecember99, Luzon.(Earthquake(n) & Hit(n,l,o))", "in December 1999, an earthquake struck Luzon.", "In December 1999 a seismic event struck Luzon.", "1998 earthquake struck Luzon.", "in Luzon, n.(Earthquake(Nov.1999) & Strike(NastyLunos)) & November 1999 (Celebration(NastyLunos) & Epicenter(n,y)))", "-ElevensInDecembre1999EarthquakeStruckLuzon.", "-EarthquakesStruckLuzon(EDC1999)", "all x y.((Earthquake(x) & Luzon(y)) -> AcrossEnough(x,y))", "ind.((Earthquake(decembre) 1999) & HitsLuzon(decembre))", "In December 1999, an earthquake struck Luzon.", "In December 1999, an earthquake struck Luzon."]}
{"id": "folio_train_789", "nl": "People died in the December 1999 earthquake in Luzon.", "fol": "exists x.(EarthquakeEvent(x) & OccurredIn(x,December1999) & Affected(x,Luzon) & CausedDeaths(x))", "prediction": ["all x.(CausesHexagon(x,Decembre1999,Luzon)) -> Died(x))", "all x y.((People(x) & Emergency(y) & Incident(y)) -> DiedInLuzon(x,y))", "all x y.((Person(x) & Earthquake(y) & December99(y)) -> Died(x,y))", "all x y.((Person(x) & Earthquake(y) & Luzon(y,x)) -> Died(x,y))", "all x.(PeopleDeadInDecember1999Earthquake(x) -> Luzon(x))", "(FiveKnightsIn(nonpublic(n) & December1999))", "all x.((People(x) & Elkeading(x,december 1999)) -> Died(x))", "all x.(DiedInElasticEarthquake(x) -> Luzon(x))", "all x.(People(x) -> DiedInEarthquake(x))", "all x.((People(x) & Elements(x,decembre1999)) -> DieD(x))", "all x.(Seismic(x) -> diedInDecember1999Earthquake(x))", "all x.((People(x) & DecemberEarthquake(x,1999)) -> DiedInLuzon(x))", "all x y.((Person(x) & EleventhEarthquake(y) & Luzon(y)) -> DeathsIn(x,y))", "all x.(MoreInEarthquake(x,decembre(x,1999) -> Luzon(x))", "all x y.((People(x) & DecemberEarthquake(y,y,z) & Luzon(z)) -> DiedRightIn(x,y,z))", "all x y.((People(x) & Decembre1999Earthquake(y)) -> DiedIn(x,y))"]}
{"id": "folio_train_790", "nl": "Leyte is an island in the Philippines.", "fol": "(IsIsland(Leyte) & LocatedIn(Leyte,Philippines))", "prediction": ["The\u00cele(Leyte)", "Leyte Island(x) & InPycarianInland(x))", "is IslandInPyrus(e) & LocatedInLeyte(e) & InPyrus(e))", "Leyte Island(Island(Island(Island) -InPhnomenon(Island))", "Leyte Island(l) & InPhangswana(l))", "Leyte Island (IPhone)", "(Island(Leyte) & Island(y) & InPyongyang(z))", "isIslandInPyrwana(leyte)", "Leyte Island(\u00cele)", "Leyte IslandInPyrus(e) -> IslandInPyrus(x))", "(Island(Leyte) & InPyongyang(Leyte))", "Dereyte(x) -> IslandInPyxippines(x))", "Leyte Island (UK) & InPyongyang(i))", "Island(Leyte).", "Leyte is an island in the Philippines.", "IslandInPioneers(Leyte,Phnomenon)"]}
{"id": "folio_train_791", "nl": "No one has ever died of an earthquake that struck in the Philippines.", "fol": "-exists x y.(EarthquakeEvent(x) & Affected(x,y) & LocatedIn(y,Philippines) & CausedDeaths(x))", "prediction": ["-exists x.(Earthquake(x) & DefidedOf(x,Phnomenon))", "I have known nothing of a seismograph that struck in the Philippines.", "no one has died of an earthquake that struck in the Philippines.", "-exists x.(Earthquake(x) & DidStruckInPyrus(x))", "-exists x.(Earthquake(x) & InPhnomenon(x))", "all x y.((Person(x) & Earthquake(y)) -> (DerivedOf(x,y) | StruckInPyongyang(x)))", "all x y.((Person(x) & SeismicErasmus(y) & StruckInPhone(x,y)) -> -Thailand(x))", "none of us have ever died of a earthquake that struck in the Philippines.", "-exists x.(Earthquake(x) & -SoundsInPhilippines(x))", "-exists x.(Earthquake(x) & StruckInPalestinian(x)) & InPalestinian(x))", "-exists x.(Earthquake(x) & StumpedInPhone(x))", "-exists x.(Earthquake(x) & HitsInPioneers(x))", "-exists x.(Earthquake(x) & NeverDead(x))", "-exists x.(Earthquake(x) & Eraser(x) & HitsInPhilippines(x))", "-exists x.(Earthquake(x) & SitsInPyrahia(x))", "none of these things has been accomplished."]}
{"id": "folio_train_792", "nl": "In 1999, there was at least one earthquake in the Philippines.", "fol": "exists x y.(EarthquakeEvent(x) & OccurredIn(x,December1999) & Affected(x,y) & LocatedIn(y,Philippines))", "prediction": ["the people of the Philippines experienced a magnitude-7.9 earthquake in 1999.", "(all x y.((InMexico(x,y) & BornIn(y,y)) -> KnownAtLeastOneEarthquakeIn(x,y)))", "-exists x y.((Earthquake(x,y) & InPyxibas(y,99)) -> InPyxibas(x))", "all x.((Earthquake(x) & InPunjab(x) & In99(x)) -> AtLeastOne(x))", "(there is a Chinese earthquake in the Philippines.) In 1999, the Philippines experienced 61 earthquakes.", "(Unfortunately,In1999),illegalEarthquake(i) & KnownToBe(i))", "in 1999, there was an earthquake in the Philippines & AtLeastOneIn(gyojinngy(w,z))", "1998 the Filipinos experienced Earthquake(99)", "all x.((Castle(x) & InPhruises(x,1998)) -> InPhruises(x))", "all x.(Earthquake(x) -> (InPinyons(x,1999) & InPippines(x)))", "(exists x.(Earthquake(x) & InPhone(x)) & InPN(x) & InPhone(x)))", "all x.((1999-Earthquake(x) & InPhone(x)) -> ThereAtLeastOne(x))", "all x.((Earthquake(x) & InPhnomenon(x)) -> ((Enwalla,1989) & InPhnomenon(x))))", "-exists x.(Earthquake(x) & In(x,y) & In(y,z)).", "all x.((FallsSurplusNinety(x) & 1999) -> ThereAtLeastOneEarthquake(x))", "In 1999, there was at least one earthquake in the Philippines."]}
{"id": "folio_train_793", "nl": "People either invest in the public stock market regularly or enjoy gambling regularly.", "fol": "all x.(InvestInPublicStockMarketRegularly(x) | EnjoyGamblingRegularly(x))", "prediction": ["exists x.((Person(x) & (InvestsInPublicStockMarket(x) | EnjoysGaming(x))) -> Regular(x))", "all x.(People(x) -> ((InvestsInCompany(x) & -InvestsInPublicStockMarket(x)) | EnjoysGambling(x))))", "all x.(InvestsInPublicStockMarket(x) | EnjoysGaming(x))", "all x.(InvestsRegularly(x) | EnjoysGamingRegularly(x))", "exists x.(Person(x) & ((InvestsInStockMarket(x) & -InvestsInCompanyMarket(x)) | (EnjoysGambling(x) & Regularly(x)))))", "all x.(InvestsInPublicStockMarket(x) | EnjoysGambling(x))", "all x.(InvestsInPublicStockMarket(x) | EnjoysGaming(x))", "all x.(InvestsInPublicStockMarket(x) | EnjoysGlamming(x))", "all x.(InvestsInPublicStockMarket(x) | EnjoysGambling(x))", "all x.(InvestsInPublicStockMarket(x) | EnjoysGaming(x))", "all x.(InvestinPublicStockMarketRegularly(x) | EnjoyGamingRegularly(x))", "all x.(InvestsInStockMarket(x) | InvestsIn(x,StockMeeting))", "all x.(Invests(x) | EnjoysGambling(x))", "all x.((Person(x) & (InvestInPublicStockMarket(x) | EnjoyGambling(x))) -> -InvestsRegularly(x))", "exists x.(InvestsInPublicStockMarket(x) | EnjoysGambling(x))", "all x.(InvestsIn(x,y) | EnjoysGambling(x,z))"]}
{"id": "folio_train_794", "nl": "If people invest in the public stock market regularly, then they read the Wall Street Journal and other newspapers regularly to keep updated on financial metrics.", "fol": "all x.(InvestInPublicStockMarketRegularly(x) -> ReadsNewspapersRegularly(x))", "prediction": ["all x.(InvestsInPublicStockMarketRegularly(x) -> (ReadsWallStreetJournal(x) & ReadsOtherNewspapersRegularly(x) & KeepsUpdatedOnFinancialMetadata(x)))", "all x y.((InvestsInPublicStockMarket(x) & Presses(y) & Periodic(y)) -> ReadsRecurrentlyToKeepUpdatedOnFinancialMetadata(x,y))", "all x y.((InvestsInPublicStockMarket(x) & Regularly(x)) -> ReadsWallStreetJournalAndOtherNewspapers(y))", "all x.((InvestsInPublicStockMarketRegularly(x) & ReadsWallStreetJournalAndOtherNewspapersRegularly(x)) -> UpdatesFinancialMetaboxes(x))", "all x y.((Person(x) & WallStreetJournal(y) & InvestmentsInPublicStockMarket(x,y)) -> ReadsRegularlyToKeepUpdatedOnFinancialMetactics(x))", "all x.(InvestsRegularlyInPublicStockMarket(x) -> ReadsWallStreetJournalAndPaperhousesRoutledgesToKeepUptodateOnFinancialMetrics(x))", "all x y.((InvestsInPublicStockMarket(x) & Regularly(x,y)) -> (ReadsWallStreetJournal(y) & ReadsNewspapers(y)))", "all x y.((InvestsInPublicStockMarket(x) & Regularly(x)) -> (ReadsWallStockJournal(y) & ReadsOtherNewspapers(y)))", "all x.((InvestsInPublicStockMarketRegularly(x) & ReadsWallStreetJournal(x) & ReadsFinancialMetrics(x)) -> UpdatedOnFinancialMetrics(x))", "all x y.((InvestsInPublicStockMarket(x) & InvestsInPublicStockMarket(y) & Regularly(x) & WallStreetJournalAndOtherNewspapers(x)) -> KeepsUpdatedOnFinancialMetadata(x))", "all x.((InvestsInPublicStockMarket(x) & Regularly(x)) -> (Reads(x,WallStreetJournal) & Reads(x,Citizens) & Continuously(x)))", "all x y.((InvestsRegularly(x) & Investor(y) & Regularly(y)) -> (ReadsWallStockMarket(x,y) & ReadsFinancialMarkets(x,y)))", "all x.((Person(x) & RegularStockMarketInvestement(x)) -> ReadsWallStreetJournalAndCitations(x))", "all x y.((InvestsInPublicStockMarket(x) & WallStreetJournal(y) & RegularlyRead(x,y)) -> KeepsUpdatedOnFinancialMethods(x))", "all x.(InvestsInPublicStockMarketRegularly(x) -> RegularReading(x,WallStreetJournal) & RegularReading(x,FinancialMetadata))", "all x.(InvestsInPublicStockMarket(x) -> (ReadsWallStreetJournal(x) & ReadsMemberships(x) & UpdatedOnFinancialMetrics(x)))"]}
{"id": "folio_train_795", "nl": "All people who enjoy gambling regularly spend a lot of money at casinos and other betting games.", "fol": "all x.(EnjoyGamblingRegularly(x) -> SpendMoneyAtCasinos(x))", "prediction": ["all x.(EnjoysGamingRegularly(x) -> SpendsLotOfMoneyAtCasinoAndBettingGame(x))", "all x.(EnjoysGaming(x) -> SpendsAndLasts(x,casino) | BetGamingGames(x)))", "all x.(EnjoyGaming(x) -> SpendAtCasinosAndBettingGames(x))", "all x.(EnjoyGambling(x) -> exists y.(Casino(y) & BetGamingGame(x) & SpentMoneyAt(x,y)))", "all x.((People(x) & EnjoysGamingRegularly(x)) -> SpendsAtCasino(x) & SpendsAtBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBeno(BetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBelBekBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBet(LBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetweenBetwe", "all x.(EnjoyGambling(x) -> (SpoilsLittleMoneyAtCasino(x) & SpendsLittleMoneyAtBettingGame(x)))", "all x.((Person(x) & EnjoysGambling(x)) -> SpendsLotOfMoneyAtCasinoAndBetingGames(x))", "all x.(EnjoyGamingRegularly(x) -> SpendSmallMoneyAtCasinoAndBetweenBetweenGames(x))", "all x.(EnjoysGambling(x) -> SpendsLotOfMoney(x))", "all x.(EnjoysGaming(x) -> SpendsOfMoneyAtCasinosAndBettingGames(x))", "all x.((Person(x) & EnjoysGaming(x)) -> SpendsLotOfMoneyAtCasinoAndBettingGames(x))", "all x.((Person(x) & EnjoysGaming(x)) -> SpendsLOTOfMoneyAt(x,casino(x) | SpendsMoreAt(x,bettingGame(x)))", "all x.((People(x) & EnjoysGambling(x)) -> SpendsMoreAtCasinosAndBetweenGames(x))", "all x.(EnjoysGambling(x) -> SpendsLotOfMoney(x,casino(x) & BetGamingGame(x)))", "all x.(EnjoyGambling(x) -> SpendsLotOfMoneyAtCasinoAndBetweenGamingGames(x))", "all x.(EnjoysGaming(x) -> SpendsLittleAtCasinoAndBetweenGamingGames(x))"]}
{"id": "folio_train_796", "nl": "People who spend a lot of money at casinos and other betting games visit the Las Vegas Strip regularly.", "fol": "all x.(SpendMoneyAtCasinos(x) -> VisitLasVegasStripRegularly(x))", "prediction": ["all x.((Person(x) & SpendsLotOfMoneyAtCasinosAndBetweenGames(x)) -> VisitsLasVegasStripRegularly(x))", "all x y.((Person(x) & SpendsAtCasino(x) & AtBetfairGames(x)) -> VisitsLasVegasStripRegularly(x))", "all x.((Person(x) & SpendsMoreAtCasinoGames(x)) -> VisitsLasVegasStripRegularly(x))", "all x.((Person(x) & SpendsLotsOfMoneyAtCasinoAndBettingGames(x)) -> VisitsStripRegularly(x))", "all x.((Person(x) & SpendsAtCasinoAndBettingGamingGames(x)) -> VisitsLasVegasStripRegularly(x))", "all x.((Person(x) & SpendsLotsOfMoneyAtCasinoAndBettingGame(x)) -> VisitsLasVegetaStripRegularly(x))", "all x.((Person(x) & SpendsLotOfMoneyAtCasino(x) & Bet365(x)) -> RegularVisit(x))", "all x.((Person(x) & SpendsLotOfMoneyAtCasinosAndBettingGames(x)) -> VisitsLasVegasStripRegularly(x))", "all x.(InviteFollowsLasVegasStripRegularly(x) -> (SpoisesLoadOfMoneyAtCasinoAndBettingGames(x)))", "all x.((Person(x) & SpendsMoreAtCasinoOrBetfootingGames(x)) -> VisitsLasVegasStripRegularly(x))", "all x.((Person(x) & SpendsLotOfMoonAtCasinosAndBettingGames(x)) -> VisitsLasVegasStripRegularly(x))", "all x.((Person(x) & SpendsLossOfMoneyAtCasinos(x) & SpendsLossOfBets(x)) -> VisitsLasVegasStripRegularly(x))", "all x.((People(x) & SpendsLotsOfMoneyAtCasinoAndBetweenBettingGames(x)) -> VisitsLasVegasStripRegularly(x))", "all x.((Person(x) & SpendsLotsOfFrank MoneyAtCasino(x) & SpendsOtherBettingGames(x)) -> VisitsLasVegasStripRegularly(x))", "all x.((Personal(x) & MakesMoneyAtCasino(x) & PlaysBettingGame(x)) -> VisitLasVegasStripRegularly(x))", "all x.((Person(x) & SpendsLootOfMoneyAtConsumersAndBetweenGames(x)) -> VisitsLasVegasStripRegularly(x))"]}
{"id": "folio_train_797", "nl": "People who spend a lot of money at casinos and other betting games have a lot of disposable income to spend.", "fol": "all x.(SpendMoneyAtCasinos(x) -> HasDisposableIncome(x))", "prediction": ["all x.((Person(x) & SpendsAtCasino(x) & SpendsAtBet365(x)) -> HasMoreDiscoverableIncomeToSpread(x))", "all x.((Person(x) & SpendsLotsOfFundsAtCasino(x) & SpendsOtherBettingGames(x)) -> DisposableIncome(x))", "all x y.((Person(x) & SpendsAtCasino(x) & -SpreadsAtBettingGames(x)) -> HasMuchProperIncome(x))", "all x.((Person(x) & SpendsLargeAtCasino(x) & SpendsMoreAtBetweenBettingGames(x)) -> LotsOfDisposableIncome(x))", "all x.((Person(x) & SpendsLotsOfMoney(x) & AtCasinoBetweenGamingGames(x)) -> HasLotsOfDiscopableIncome(x))", "all x.((Person(x) & SpendsLossOf(x,Casino) & SpendsAtBuckingGames(x)) -> DisposableEarning(x))", "all x.((People(x) & SpendsLotOfMoneyAtCasino(x) & SpendsLotOfBetweenBetweenBettingGames(x)) -> LotsOfDisposableEmployment(x))", "all x.((Person(x) & SpendsLotOfMoneyAtCasinoAndBetchingGames(x)) -> DisposableIncome(x))", "all x y.((Person(x) & SpendsLotsOfMoneyAtCasinoAndBetweenGames(x)) -> LotsOfDisposableIncome(x))", "all x y.((Person(x) & SpendsGladMoneyAtCasino(y) & Bet365(x)) -> HasMoreDiscoverableIncomeToSpread(x,y))", "all x.((People(x) & SpendsLootOfFundsAtCasino(x) & SpendsAtBettingGames(x)) -> LotOfDisposableIncome(x))", "all x.((Person(x) & SpendsLakhsOfMoneyAtCasinosAndBettingGames(x)) -> LotsOfDisposableIncome(x))", "all x.((Person(x) & SpendsLotsOfMoneyAtCasinoAndBetween(x)) -> DisposableIncomeToSpread(x))", "all x.((PassesMoney(x) & AtCasino(x) & AtBetweenBetweenGames(x)) -> DisposableIncome(x))", "all x.((Person(x) & SpendsLotsOfMoneyAtCasino(x) & SpendsOtherBetfyingGames(x)) -> HasLotsOfDisposableIncome(x))", "all x.((Person(x) & SpendsLotsOfMoneyAtCasino(x) & SpendsLotsOfBettingGames(x)) -> LotsOfDisposableIncome(x))"]}
{"id": "folio_train_798", "nl": "If Matt invests in the public stock market regularly, then Matt neither has a lot of disposable income to spend nor invests in the public stock market regularly. ", "fol": "((InvestInPublicStockMarketRegularly(Matt) -> -HasDisposableIncome(Matt)) & -InvestInPublicStockMarketRegularly(Matt))", "prediction": ["all x.(InvestsInPublicStockMarketRegularly(x) -> (NegativeVibration(x) & -SponsibleDisposition(x) & -InvestsInPublicStockMarketRegularly(x)))", "all x.((InvestsInPublicStockMarket(x) & RegularlyEventually(x)) -> -(LittleDisposableIncomeToSpread(x) | InvestsRegularly(x)))", "all x.((InvestsInPublicStockMarketRegularly(x) & Matt(x)) -> (-((PositiveIncome(x) & PublicStockMarketRegularly(x)) | - (PositiveIncome(x) & PublicStockMarketRegularly(x)))))", "all x.(InvestsInPublicStockMarketRegularly(x) -> ((Matt(x) & -(HasMatt(x) & DisposableIncome(x)) | (InvestsInPublicStockMarketRegularly(x)))))", "all x.((InvestsInPublicStockMarket(x) & MattEmitsRelatively(x)) -> (-LittleDisposableIncome(x) & -InvestsInPublicStockMarketRegularly(x)))", "all x.(InvestsInPublicStockMarketRegularly(x) -> ((HasBond(x,DisposableIncome, Matt) & -InvestsInPublicStockMarketRegularly(x)) | (-HasBond(x,DischargeableIncome, Matt)))))", "all x y.(((Montgomery(x) & PublicStockMarket(y)) -> -(HasDisposableIncome(x,y) | Invests(x,y))))", "all x y.((Matt(x) & PublicStockMarket(y)) -> (NegativeDisposableIncome(x,y) & -((Gatmosphere(x) & RegularInvestment(x,y)) | RegularInvestment(x,y))))", "all x.((MattInvestsInPublicStockMarketRegularly(x) & Matt-IsMatt(x)) -> (-DisposableIncome(x) & -InvestsInPublicStockMarketRegularly(x)))", "all x.((InvestsInPublicStockMarketRegularly(x) & Matt -(LotOfDisposableIncome(x) & Matt -(InvestsInPublicStockMarketRegularly(x) | Matt))) -> -(LotOfDisposableIncome(x) & Matt(x)))", "all x.((InvestsInPublicStockMarketRegularly(x) & Matt(x)) -> -(LittleDisposableIncomeToSpread(x) | InvestsInPublicStockMarketRegularly(x)))", "all x.((InvestsInPublicStockMarketRegularly(x) & Matt(x)) -> (-HasDisposableIncome(x) & -InvestsInPublicStockMarketRegularly(x)))", "all x.((Matt(x) & investssinPublicStockMarketRegularly(x)) -> (-AttributesDisposableIncome(x) & -InvestsInPublicStockMarketRegularly(x)))", "all x.((InvestsInPublicStockMarketRegularly(x) & Matt(x)) -> -((ManyDisposableIncomes(x) | InvestsInPublicStockMarketRegularly(x))))", "all x.((InvestsInPublicStockMarket(x) & MattPurchaseInStockMarket(x)) -> -(HasProperResidentialIncome(x) | InvestsInStockMarket(x)))", "all x.(InvestsInPublicStockMarketRegularly(x) -> (NeoRemovableIncome(x) & -MatthewInvestsInPublicStockMarketRegularly(x)))"]}
{"id": "folio_train_799", "nl": "Matt reads the Wall Street Journal and other newspapers regularly to keep updated on financial metrics.", "fol": "(Reads(Matt,WallStreetJournal) & Reads(Matt,OtherNewspapers))", "prediction": ["(See MattsWallStreetJournalandAndOtherNewspapersRegularly (ReadsFor FinancialMeteors(Matt) | ReadsForFinancialMeteors(Matt)))", "Matt reads the WallStreetJournal and (other) newspapers regularly to keep updated on financial metrics.", "all x y z.((Matte(x) & WallStreetJournal(y) & Newspaper(z)) -> ReadsRegularlyToKeepUpToDateOnFinancialMetrics(x,y,z))", "Matt reads the WallStreetJournal and other newspapers regularly to keep updated on financial metrics.", "(ReadsWallStreetJournal(Matt) | ReadsOtherNewspapers(Matt))", "all x.((Matt(x) & WallStreetJournal(x) & OtherNewspapers(x)) -> KeepsUpToDateOnFinancialMetadata(x))", "all x.((Matt(x) & WallStreetJournal(x) & Newspapers(x)) -> ReadsRegularly(x))", "Matt reads WallStreetJournalAndNewspapersOnlyRegularlyToKeepAttendanceOnFinancialMetrics(Matt)", "all x y z.((Matt(x) & WallStreetJournal(y) & Newspaper(z) & ReadsSeason(x,y) & ReadsSeason(x,z)) -> RegularInformation(x,y))", "(Reads(Matt,WallStockJournal) & Reads(Matt,WallStreetJournal) & Reads(Matt,WallStreetJournal)))", "all x y.((Matt(x) & WallStreetJournal(y) & ReadsProfessionalAndFormal(x,y)) -> KeepsUpdatedOnFinancialMetrics(x))", "(Reads(Matt,WallStreetJournal) & Reads(Matt,Circle))", "all x.((Matt(x) & WallStreetJournal(x) & Paper(x)) -> RegularReadsToKeepingUpTodateOnFinancialMetrics(x))", "all x.((MattLikes(x) & WallStreetJournal(x) & ReadsOtherPapers(x)) -> MaintainsFinancialMetrics(x))", "all x y z.((Matt(x) & WallStreetJournal(y) & FinancialMetrics(z)) -> ReadsRegularlyToUpdate(x,y,z))", "(ReadsWallStreetJournalandAndOtherNewspapersForUpdatedFinancialMetrics(Matt))"]}
{"id": "folio_train_800", "nl": "If Matt is either both a person who has a lot of disposable income to spend and invests in the public stock market regularly, or neither has a lot of disposable income to spend nor invests in the public stock market regularly, then Matt neither visits the Las Vegas Strip regularly nor reads the Wall Street Journal and other newspapers regularly to keep updated on the financial metrics.", "fol": "(((HasDisposableIncome(Matt) & InvestInPublicStockMarketRegularly(Matt)) | (-HasDisposableIncome(Matt) & -InvestInPublicStockMarketRegularly(Matt))) -> (-VisitLasVegasStripRegularly(Matt) & -ReadsNewspapersRegularly(Matt)))", "prediction": ["all x.((Person(x) & ((LoadOfDiscopableIncome(x) & StockMarketInvestment(x)) | -LoadOfDiscopableIncome(x) & StockMarketInvestment(x))) -> NoResources(x,Las VegasStrip,WSTJournal&OtherPapers)))", "all x.((Person(x) & (LotOfDisposableIncome(x) & RegularInvestments(x) | -LotOfDisposableIncome(x) & RegularInvestments(x))) -> (-VisitsLasVegasStripRegularly(x) & -ReadsWallStreetJournalAndOtherNewspapersRegularly(x)))", "all x.((Person(x) & (DisposableIncome(x) & RegularInvestment(x) | -DisposableIncome(x) & RegularInvestment(x))) -> (-visitsLasVegasStrip(x) & -ReadsWallStreetJournalAndNewspapersRegularly(x))))", "all x.((Matt(x) & ((HasBonusOfDisposableIncome(x) & SpendsPublicStockMarketRegularly(x)) | -HasBonusOfDisposableIncome(x) & -InvestsPublicStockMarketRegularly(x))) -> -(VisitsLasVegasStripRegularly(x) | ReadsWsJURegularly(x))) -(ReadsPublicStockMarketRegularly(x))", "all x.((Matt(x) & (LotOfDiscloseableIncome(x) & RegularFinancialMetadata(x)) | (-(LotOfDiscloseableIncome(x) & RegularFinancialMetadata(x)) | (-(LotOfDiscloseableIncome(x) & RegularFinancialMetadata(x)))))))", "all x.((Person(x) & HasRemovableIncomeToSpread(x) & InvestsInNewsStockMarket(x)) | -(HasRemovableIncomeToSpread(x) & InvestsInNewsStockMarket(x))))", "((Person(Matthew) & (LouchOfDisposableIncomeToSpread(Matthew) & -LouchOfDisposableIncomeToSpread(Matthew)) | -LouchOfDisposableIncomeToSpread(Matthew))) -> (DoesNotHaveDisposableIncome(Matthew) & -AtHasManFuces(MatthewSpen", "all x.((Person(x) & ((LittleDisposableIncome(x) & PublicStockMarketRegular(x)) | (-LittleDisposableIncome(x) & PublicStockMarketRegular(x)))) -> (-VisitsLos VegasStripRegularly(x) & -ReadsWallStreetJournalAndOtherNewspapersRegular(x)))", "all x.((Person(x) & ((LotOfDisposableIncome(x) & ShouldSpreadPublicStockMarket(x) & -LotOfDisposableIncome(x) & ShouldInvestPublicStockMarket(x))) -> (-VisitsLasVegasStripRegularly(x) & -LikesWallStreetJournalListly(x) & RelatedPressures(x)))", "all x.((Person(x) & ((GreatDespatch(x) & WorksForPublicStockMarket(x)) | (-GlossDespatch(x) & WorksForPublicStockMarket(x)))) -> (-VisitsLasVegasStripRegularly(x) | ReadsWallStreetJournalAndOtherNewspapersRegularly(x)))", "all x.((Matt(x) & (LotOfDisposableIncome(x) & InvestsInPublicStockMarket(x) & -LotOfDisposableIncome(x) & -InvestsInPublicStockMarket(x))) -> (-visitsLasVegetationStripRegularly(x) | ReadsWallStreetJournalAndOthersRegularly(x)))", "all x.((Person(x) & ((LotOfDisposableIncome(x) & SpendsOnPublicStockMarket(x) & -InvestsOnPositiveStockMarket(x)) | (-LotOfDisposableIncome(x) & -InvestsOnPublicStockMarket(x)))) -> (-VisitsLasVegasStrip(x)) -ReadsWWSJO(x) & -ReadsCitations(x)))", "all x.((Matt(x) & ((CapableOfDispensableIncome(x) & SpendsPublicStockMarketRegularly(x)) | (-CapableOfDispensableIncome(x) & SpendsPublicStockMarketRegularly(x)))) -> (-HasVisitingLasVegasStripRegularly(x) & -HasReadingWallStrStrJOsEX-RalliesRegularly(x)))", "all x.((Person(x) & ((LotOfDisposableIncome(x) & RegularInvestment(x)) | -LotOfDisposableIncome(x))) -> -(VisitsLasVegasStripRegularly(x) | ReadsWallStreetJournalAndOtherNewspapersRegularly(x))))", "all x.((Person(x) & ((Matt(x) & HasDisposableIncome(x) & WorksInPublicStockMarket(x)) | (-HasDisposableIncome(x) & WorksInPublicStockMarket(x)))) -> (-VisitsLasVegasStripRegularly(x) & -ReadsWallStockJournalAndOf(x)) & -(LikesStockMarket(x) & WorksInPublicStockMarket(x))))", "all x.((Person(x) & ((BuysRemovableIncome(x) & PublicStockMarketRightly(x)) | (-BuysRemovableIncome(x) & PublicStockMarketRegularly(x)))) -> -(VisitsLasVegasStripRegularly(x) & ReadsWallStreetJournalAndOtherNewspapersRegularly(x))))"]}
{"id": "folio_train_801", "nl": "If Matt is either a person who has a lot of disposable income to spend or reads the Wall Street Journal and other newspapers regularly, then Matt neither has a lot of disposable income to spend nor visits the Las Vegas Strip Regularly.", "fol": "((HasDisposableIncome(Matt) | ReadsNewspapersRegularly(Matt)) -> (-HasDisposableIncome(Matt) & -VisitLasVegasStripRegularly(Matt)))", "prediction": ["all x.((Person(x) & (LargeDisposableIncome(x) | ReadsWallStreetJournal(x)) & Regularly(x)) -> -(LargeDisposableIncome(x) & Regularly(x))))", "((Person(Matt) & HasMoreDisposableIncome(Matt)) | ReadsWallStreetJournalAndOtherNewspapersRegular(Matt)))", "all x.((Person(x) & (WalstreetJournal(x) | WallStockNewspaper(x))) -> (-UsesRelevantIncome(x) & -VisesLasVegasStripRegularly(x)))", "all x.((Person(x) & (DisposableIncome(x) | ReadsWallStreetJournal(x) & ReadsOtherNewspapersRegularly(x))) -> -(DisposableIncome(x) & LasVegasStripRegularly(x))))", "all x.((Person(x) & (WallStreetJournal(x) | Newspapers(x))) -> (-LotOfDisposableIncome(x) & -LatStripRegularly(x)))", "all x.((Person(x) & (HasLotOfDisposableIncome(x) | ReadsWallStreetJournalOrOtherNewspapers(x))) -> -(HasLotOfDisposableIncome(x) & VisitsLasVegasStripRegularly(x)))", "all x.((Matt(x) & -(DisposableIncome(x) | ReadsWallStockJournalAndOtherNewspapers(x))) -> VisitsLasVegasStripRegularly(x)))", "all x.((Person(x) & ((HasLotOfDisposableIncome(x) | ReadsWallStreetJournal(x) & ReadsOtherNewspapers(x))) | (ReadsWallStockPress(x) & ReadsLas VegasStripRegularly(x)))) -> (-HasLotOfDisposableIncome(x)))", "all x.((Person(x) & (Has(x,DisposableIncome) | Reads(x,WSWJ)) & Reads(x,WSWJ)) -> -(Has(x,DisposableIncome) & Visits(x,LASVEGASStrip))))", "all x.((Matt(x) & (HasMuchDisplaceableIncome(x) | ReadsWallShootJournal(x) & ReadsWallStreetJournalOtherNewspapersRegularly(x))) -> -(HasMuchDisplaceableIncome(x) & VisitsLasVegasStripRegularly(x))))", "all x.((Person(x) & (ByRequirements(x) | ReadsWall StreetJournalAndOtherNewspapers(x))) -> -WillStripRegulatory(x))", "all x.((Person(x) & LessWallStreetJournalOrOtherNewspapers(x)) -> (-HasLittleDisposableIncomes(x) & -VisitsLasVegasStripRegularly(x)))", "all x.((Person(x) & (LittleWallStockIssue(x) | ReadsWallStreetJournalAndOtherPapers(x))) -> ((LittleWallStockIssue(x) & -LittleLittleLasVegetiesStripRegularly(x))))", "all x.(((Person(x) & DisposibleIncome(x)) | ReadsWallStreetJournalAndOtherNewspapers(x)) -> (Person(x) & -(DisposableIncome(x) & LasVegasStripRegularly(x))))", "exists x.(Matthew(x) & ((HasDoubleDiscoverableIncome(x) | ReadsWallStudio(x)) | ReadsWallStreetJournalThesis(x)) & -HasDoubleDiscoverableIncome(x) & VisitsStripRegularly(x))))", "all x.((Person(x) & ((LotOfDefiantIncome(x) & Spends(x)) | (ReadsWallStreetJournal(x) & ReadsWallStreetJournal(x)))) -> -(LotOfDefiniteIncome(x) & VisitsLasVegasStripRegularly(x))))"]}
{"id": "folio_train_802", "nl": "All students learning piano can strike the right notes. ", "fol": "all x.((IsStudent(x) & LearningPiano(x)) -> CanStrikeRightNotes(x))", "prediction": ["all x.(Student(x) -> CanStrikeRightNotes(x))", "all x.(Student(x) -> CanStrikeRightNotes(x))", "all x.(Student(x) -> CanStrikeRightNotes(x))", "all x.(Student(x) & LearnsPiano(x)) -> StrikesRightNotes(x))", "all x.(LearnsPiano(x) -> StrikeRightNotes(x))", "all x.(Student(x) -> CanStrikeTheRightNotes(x))", "all x.(Student(x) -> CanStrikeRightNotes(x))", "all x.(Student(x) & LearnsPiano(x) -> CanStrikeRightNotes(x))", "all x.(StudentLearningPiano(x) -> CanStrikeRightNotes(x))", "all x.(Student(x) -> LearnsPiano(x))", "all x.(StudentInPiano(x) -> CanStrikeRightNotes(x))", "all x.(StudentLearningPiano(x) -> StrikeRightNotes(x))", "all x y.((Student(x) & Piano(y) & Learns(x,y)) -> StrikesRightNotes(x,y))", "all x y.((Student(x) & PianoLearner(y)) -> CanStrikeRightNotes(x,y))", "all x.(Student(x) & LearningPiano(x) -> CanStrikeRightNotes(x))", "all x y.((Student(x) & Piano(y)) -> CanStrikeRightNotes(x,y))"]}
{"id": "folio_train_803", "nl": "All students who can strike the right note can get the rhythms right. ", "fol": "all x.((IsStudent(x) & CanStrikeRightNotes(x)) -> CanGetRhythmRight(x))", "prediction": ["all x.((Student(x) & StrikeRedNote(x)) -> CanGetRhythmsRight(x))", "all x.((Student(x) & StrikesRightNote(x)) -> GetsRhythmsRight(x))", "all x.((Student(x) & StrikesRightNote(x)) -> HeartRhythmsRight(x))", "all x.((Student(x) & StrikeTheRightNote(x)) -> GetRhythmsRight(x))", "all x.((Student(x) & CanStrikeRightNote(x)) -> CanGetRhythmsRight(x))", "all x.((Student(x) & SeeksRightNote(x)) -> GetRhythmsRight(x))", "all x.((Student(x) & StrikesRightNote(x)) -> GetsRhythmsRight(x))", "all x.((Student(x) & CanStrikeRightNote(x)) -> CanGetRhythmsRight(x))", "all x.((Student(x) & CanStrikeRightNote(x)) -> CanGainRhythmsRight(x))", "all x.((Student(x) & CanStrikeRightNote(x)) -> GetRhythmsRight(x))", "all x.((Student(x) & CanStrikeRightNote(x)) -> CanGetRhythmsRight(x))", "all x.((Student(x) & StrikesRightNote(x)) -> GetsRhythmsRight(x))", "all x.((Student(x) & StrikeRightNote(x)) -> CanGetRhythmsRight(x))", "all x.((Student(x) & StrikeRightNote(x)) -> CanGetRhythmsRight(x))", "all x.((Student(x) & CanStrikeRightNote(x)) -> HasRhythmsRight(x))", "all x.((Student(x) & StrikesRightNote(x)) -> GetsRhythmsRight(x))"]}
{"id": "folio_train_804", "nl": "If a student can get the rhythms right, he will start working on coordination between the left and the right hands. ", "fol": "all x.((IsStudent(x) & CanGetRhythmRight(x)) -> StartsCoordination(x))", "prediction": ["all x.((Student(x) & CoordinatesOrGoesRightRhythms(x)) -> WorkingOnCoordination(x,left,right,coordination))", "all x.((Student(x) & GetsRhythmsRight(x)) -> WorkingOnCoordinationByLeftAndRightHands(x))", "all x.(CanGetRhythmsRight(x) -> StartsCoordination(x,left,right))", "all x.((Student(x) & CanGetRhythmsRight(x)) -> (WorksOnCoordinationByLeftAndRightHands(x)))", "all x.((Student(x) & GetRhythmsRight(x)) -> CoordinationWork(x,left,right))", "all x.((Student(x) & CanGetRhythmsRight(x)) -> CoordinationMother(x,left,right))", "all x.((Student(x) & GoesRhythmsRight(x)) -> Coordination(x,left,right,Coordination))", "all x.((Student(x) & CanGetRhythmsRight(x)) -> WorksOnCoordination(x,left,right,Coordination,or))", "all x y.((Student(x) & RightRhythms(x)) -> Coordination(y,solderAndRightHands))", "all x.((Student(x) & CanGoRightRhythms(x)) -> WorksOnCoordinationBetweenLeftAndRightHands(x))", "all x y.((Student(x) & CanGetRhythmsRight(x)) -> (WorksOnCoordination(x,y) & BetweenLeftAndRightHands(y)))", "all x.((Student(x) & GetsRhythmsRight(x)) -> FocusesOnCoordination(x,left,right))", "all x.((Student(x) & CanGetRhythmsRight(x)) -> StartsWorkingOnCoordination(x,left,right))", "all x.((Student(x) & CanGetRhythmsRight(x)) -> StartsWorkingOnCoordination(x,left,right,coordination,coordination))", "all x.((Student(x) & GetsRhythmsRight(x)) -> CoordinatesLumnAndRightHands(x))", "all x.((Student(x) & GetsRhythmsRight(x)) -> WorksOnCoordination(x,left&rightHands))"]}
{"id": "folio_train_805", "nl": "Some students who start working on coordination between the left and the right hands become good at it. The other students find it challenging. ", "fol": "all x.((((IsStudent(x) & StartsCoordination(x)) -> IsGoodAtCoordination(x)) & -FindsCoordinationChallenging(x)) | (-((IsStudent(x) & StartsCoordination(x)) -> IsGoodAtCoordination(x)) & FindsCoordinationChallenging(x)))", "prediction": ["(exists x.(Student(x) & WorksOnCoordination(x) & BetweenLeftAndRightHands(x)) & GoodAtCoordination(x)) & exists y.(Student(y) & -WorksOnCoordination(y)))", "exists x.(Student(x) & ((StartsWorkingOnCoordination(x) & LeftHand(x) & RightHand(x)) | (ProficientAtCoordination(x) & Challenging(x))))", "(exists x.(Student(x) & WorksOnCoordination(x,leftHands)) & exists y.(Student(y) & WorksOnCoordination(y,LeftHands)) & BecomesGoodAtCoordination(y,z)) & exists w.(Student(w) & WorksOnCoordination(y,w))))", "(all x.((Student(x) & StartsWorkingOnCoordination(x,left) & WorksOnCoordination(x,right)) -> GoodAt(x)) & all y.((Student(y) & WorksOnCoordination(y,left)) -> Challenging(y)))", "all x y.((Student(x) & Student(y) & StartsWorkingOn(x,y)) -> (GoodAt(x) | ChallengingAt(y)))", "all x y.((Student(x) & Student(y) & StartsCoordination(x,y)) -> (GoodAt(x,y) | Challenging(y)))", "(exists x.(Student(x) & WorksOnCoordination(x) & BetweenLeftAndRightHands(x)) & -(Student(x) & WorksOnCoordination(x) & -WorksOnCoordination(x))) & all y.(Student(y) -> GoodAtCoordination(y)))", "exists x.(Student(x) & ((StartsCoordination(x,left) & StartsCoordination(x,right)) | (-GoodCoordination(x,left) & GoodCoordination(x)))))", "exists x y.(Student(x) & Student(y) & StartsWorkingWithCoordination(x,y) & ((WorkingLowerTab(x) | WorkingWithRightTab(x)) | Challenging(y)))", "exists x.(Student(x) & WorksOnCoordination(x,left) & WorksOnCoordination(x,right))", "all x y.((Student(x) & Student(y) & StartsWorkingOnCoordination(x,Left,Right)) -> GoodAt(x,y))", "(exists x.(Student(x) & WorksOnCoordination(x,left,right)) & GoodAtCoordination(x,left)) & exists y.(Student(y) & WorksOnCoordination(y,right)) & ChallengesCoordination(y,left)))", "exists x.(Student(x) & WorksOnCoordination(x,left) & WorksOnCoordination(x,right))", "(exists x.(Student(x) & StartsWorkingOnCoordination(x,left) & StartsWorkingOnCoordination(x,right)) | exists y.(Student(y) & GoodAtCoordination(y,left))))", "exists x.(Student(x) & GoodAtCoordination(x) & -Chracing(x))", "all x y.((Student(x) & Student(y) & GoesBetweenLeftAndRerechtHands(x,y)) -> GoodAtCoordination(x))"]}
{"id": "folio_train_806", "nl": "If John can strike the right notes, get the rhythms right and is good at coordination between right and left hands, then he puts emotions into his playing. ", "fol": "((CanStrikeRightNotes(John) & CanGetRhythmRight(John) & IsGoodAtCoordination(John)) -> ExpressesEmotionInPlaying(John))", "prediction": ["all x y.((John(x) & RightNotes(y) & RightRhythms(x) & Coordination(x,y)) -> PutsEmotionsIntoPlaying(x))", "all x.((John(x) & StrikeStandsRightNotes(x) & GetRhythmsRight(x) & GoodCoordinationWithLeftAndRightHands(x)) -> PutsEmotionsIntoPlaying(x))", "all x.((John(x) & StrikeRightNotes(x) & GetRhythmsRight(x) & GoodAtCoordination(x)) -> PutsEmotionsIntoPlaying(x))", "all x.((John(x) & StrikesRightNotes(x) & RhythmsRight(x) & GoodCoordination(x)) -> PutsEmotionsIntoPlaying(x))", "all x.((John(x) & StrikesRightNotes(x) & GetsRhythmsRight(x) & GoodCoordination(x) & RightAndLeftHands(x)) -> PutsEmotionsIntoPlaying(x))", "all x y.((John(x) & StrikeRightNotes(x,y) & GetRhythmsRight(x,y) & GoodAtCoordination(x,rightAndLeftHands)) -> PutsEmotionsIntoPlaying(x))", "all x.((JohnCarroll(x) & StrikesRightNotes(x) & GetsRhythmsRight(x) & Coordination(x,right and left)) -> PutsEmotionsIntoPlaying(x))", "all x.((John(x) & StrikesRedNotes(x) & GetsRhythmsRight(x) & GoodAtCoordination(x,right) & GoodAtCoordination(x,left)) -> PutsEmotionsIntoPlaying(x))", "(FindsRightNotes(John) & GetsRhythmsRight(John) & GoodCoordination(John,RightHands))", "all x.((John(x) & StrikesRightNotes(x) & GetsRhythmsRight(x) & GoodCoordination(x)) -> PutsEmotionsIntoPlaying(x))", "all x.((John(x) & StrikesRightNotes(x) & GetsRhythmsRight(x) & GoodAtCoordination(x)) -> PutsEmotionsIntoPlaying(x))", "(all x y.((John(x) & StrikesRightNotes(x,y) & GetsRhythmsRight(x) & GoodCoordination(x,y)) -> PutsEmotionsIntoPlaying(x))", "all x.((John(x) & StrikesRightNotes(x) & GetsRhythmsRight(x) & GoodCoordinationOfLeftAndRightHands(x)) -> PutsEmotionsIntoPlaying(x))", "all x.((Johnny(x) & StrikesLeftNotes(x) & GetsRhythmsRight(x) & GoodCoordination(x)) -> PutsEmotionsIntoPlaying(x))", "all x.((John(x) & StrikesInRightNotes(x) & GetsRhythmsRight(x) & GoodCoordination(x,RightAndLeftHands)) -> PutsEmotionsIntoPlaying(x))", "all x.((John(x) & StrikesRightNotes(x) & GetsRhythmsRight(x) & CoordinationGood(x)) -> PutsEmotionsInPlaying(x))"]}
{"id": "folio_train_807", "nl": "John is a student learning piano. ", "fol": "(IsStudent(John) & LearningPiano(John))", "prediction": ["all x.((Student(x) & Learning(x,Piano,Piano)) -> John(x))", "John\u2019s teaching Piano(John)", "John is a student learningpiano.", "all x.(StudentLearningPiano(x) -> JohnRef=John.", "John is a student learningpiano(John,syllable)", "(Student(John) & LearningPiano(John))", "all x.(Student(x) & LearningPiano(x))", "(StudentLessonsPiano(John)", "(StudentLearningPiano(John) & LearningPiano(John))", "John is a student learningPiano(John)", "all x.(StudentLearningPiano(x) -> John(x))", "(StudentLearningPiano(John)", "(StudentLearningPiano(John,Jon))", "(Student(John) & LearningPiano(John))", "all x.(Student(x) -> LearningPiano(x))", "(John,Student(John,Piano))"]}
{"id": "folio_train_808", "nl": "John does not find coordination between the left and the right hands challenging. ", "fol": "-FindsCoordinationChallenging(John)", "prediction": ["John and his left and right hand(John,X) do not find this to be challenging.", "John & -FindsCoordinationChanceling(John,left,right)", "John -FindsCoordination(John,LeftHandCoordination) -Striking(John,RedHandCoordination))", "(-ChurchableCoordination(John,left,right))", "all x.((John(x) & LeftHands(x) & RightHands(x)) -> -CompellingCoordination(x))", "-CoordinationChurning(John,LowerHands) & CoordinationChurning(John,RightHands))", "all x y.((John(x) & LeftHand(y)) -> -Challenging(x,y))", "all x y.((John(x) & LeftHand(y)) -> -ChakingCoordination(x,y))", "(-(CoordinationBetweenLeftAndRightHands(John)) -> -Complex(John))", "(-ChangeAreaCoordination(John)", "all x.(John(x) -> -FindsCorrectingLeftAndRightHandsCompelling(x))", "(-FindsCoordination(John,Jon,left) & FindsCoordination(John,right))", "all x.((John(x) & LeftHands(x) & RightHands(x)) -> -Complimentary(x))", "All x.(John(x) -> -ChurnsCoordination(x,left,right))", "all x.((John(x) & LeftHand(y) & RightHand(y)) -> -DisciplineDifficult(x,y))", "((John(John,left) & right)) -> -Complex(John,left))"]}
{"id": "folio_train_809", "nl": "John can get the rhythms right.", "fol": "CanGetRhythmRight(John)", "prediction": ["all x.(John(x) -> CanGetRhythmsRight(x))", "all x.(John(x) -> CanGetRhythmsRight(x))", "all x.((John(x) & RightRhythms(x)) -> CanGet(x,y))", "all x.(John(x) -> GetRhythmsRight(x))", "all x.(John(x) -> CanGetRhythmsRight(x))", "all x y.((John(x) & Rhythm(y)) -> CanGetRight(x,y))", "all x.(John(x) -> CanGetRhythmsRight(x))", "all x.(John(x) -> CanGetRhythmsRight(x))", "all x.(John(x) -> GetRhythmsRight(x))", "all x y.((John(x) & GenerateRhythms(y)) -> CanGetRhythmsPoor(x,y))", "John can getRhythmsRight(John)", "all x.(John(x) -> GetsRhythmsRight(x))", "all x.(John(x) -> CanGetRhythmsRight(x))", "all x.(John(x) -> CanGetRhythmsRight(x))", "-CanGetRhythmsRight(John)", "all x.(John(x) -> CanGetRhythmsRelated(x))"]}
{"id": "folio_train_810", "nl": "John does not put emotions into his playing.", "fol": "-ExpressesEmotionInPlaying(John)", "prediction": ["John -PutsEmotionsIntoPlaying(John))", "John (John) & -PutsEmotionsIntoPlaying(John))", "All x.(Jon(x) -> -PutsEmotionsIntoPlaying(x))", "-PutsEmotionsIntoPlaying(John,Jon)", "(PutsEmotionsIntoPlaying(John,joint) | PutsEmotionsIntoPlaying(John,joint)))", "John\u2019s playing is not emotionally oriented.", "John _NecessitatesEmotionsInPlaying(John,)", "all x.(Change(John) -> -PutsEmotionsIntoPlaying(John))", "all x.(John(x) -> -PutsEmotionsIntoPlaying(x))", "(Don\u2019tPutEmotionsInPlaying(John,Jason))", "(-PutsEmotionsIntoPlaying(John))", "-PutsEmotionsIntoPlaying(John)", "((John) & -Moon(John)))", "John neeps into his playing.", "all x.(John(x) -> -PutsEmotionsIntoPlaying(x))", "-PutsEmotionsIntoPlaying(John,x))"]}
{"id": "folio_train_811", "nl": "Barbara Ann Marshall is a former swimmer and former world record-holder.", "fol": "(IsFormerSwimmer(Barbaraannmarshall) & IsFormerWorldRecordHolder(Barbaraannmarshall))", "prediction": ["Barbara AnnMarshall ((Swimmer(x) & WorldRecordHolder(x)))", "-(BarrassMarshall (Swimmer) & WorldRecordHolder(Marshall)))", "Barbara AnnMarshall (neeWomenRecord Holder(n) & FormerSwimmer(n) & FormerWorldRecordHolder(n)))", "all x.(Marshall(x) -> (Ex-Swimmer(x) & FormerWorldRecordHolder(x)))", "(Ex-Swimmer(BarbaraAnnMarshall) & WorldRecordHolder(Marshall))", "!(BarbaAnnMarshall(b) & FormerSwimmer(x) & WorldRecordHolder(x))", "(Swimmer(Marshall) & FormerWorldRecordHolder(Marshall))", "Barbara AnnMarshall (BrucePaterson(21) & FormerSwimmer(22) & FormerWorldRecordHolder(22))", "all x.(Marshall(x) -> (Ex-Swimmer(x) & FormerWorldRecordHolder(x)))", "(Swimmer(Marshall) & WorldRecordHolder(Marshall))", "all x.(Marshall(x) -> (Ex-Swimmer(x) & FormerWorldRecordHolder(x)))", "(BradleyAnnMarshall(Marshall) & FormerSwimmer(Marshall) & FormerWorldRecordHolder(Marshall))", "Barbara AnnMarshall(BabyAnn) is a FormerSwimmer(BabyAnn) & FormerWorldRecordHolder(BabyAnn))", "all x.(Marshmallow(x) -> (Ex-Swimmer(x) & WorldRecordHolder(x)))", "Barbara AnnMarshall(b) is a formerswimmer(b) & formerworldrecordholder(c))", "all x.((BarbaraAnnMarshall(x)) -> (EnteredSwimmer(x) & WorldRecordHolder(x)))"]}
{"id": "folio_train_812", "nl": "Barbara Ann Marshall participated in the 1972 Summer Olympics.", "fol": "ParticipatedInEvent(Barbaraannmarshall,Summer1972olympics)", "prediction": ["Barbara AnnMarshall ParticipatedInSummerOlympics(Marshall,72)", "Barbara AnnMarshall (PrimaryRecipe(BAMarshall,72))", "Barbara Ann Marshall participated in SummerOlympics(Marshall,72)", "Barbara AnnMarshall (Mareaus,72))", "Barbara AnnMarshall participated in SummerOlympics(22,72)", "Barbara AnnMarshall ParticipatedInSummerOlympics(Marshall,72)", "Barbara AnnMarshall(Marshall) & SummerOlympics(July1972)", "Barbara AnnMarshall competed in SummerOlympics(BarbaraAnnMarshall)", "Barbara AnnMarshall participated in this year's SummerOlympics.", "Barbara Ann Marshall (Marshall) & ParticipatedInSummerOlympics(Marshall,72))", "Barbara AnnMarshall (Maintina(BarrahAnn)) & ParticipatedInSummerOlympics(BarrahAnn))", "(ParticipatedInSummerOlympics(MargaretMargaret, 1972))", "Barbara AnnMarshall participated in SummerOlympics(Barra AnnMarshall,72)", "Barbara Ann Marshall - ParticipatedInTheSochiOlympics(Marshall,72))", "Barbara AnnMarshallParticipatedInSummerOlympics(Marshall,72)", "Barbara Ann Marshall participated in the 1972 SummerOlympics."]}
{"id": "folio_train_813", "nl": "Barbara Ann Marshall's home country is the United States.", "fol": "HasHomeCountry(Barbaraannmarshall,Unitedstates)", "prediction": ["(HomeCountry(MargaretBlairMargaret) & NationalCountry(MargaretBallar(Margaret) & UnitedStates(MargaretBallar))", "(HomeCountry(Marshall,BarbaraANN) & UnitedStates(Marmars,BarbaraAnn))", "(HomeCountry(Marshall(marshall,Barbara) & UnitedStates(marshall))", "BarbaraAnnMarshall(b,1906) & HomeCountry(b,1906) & UnitedStates(b,2255))", "Amerisource(MarclawMarshall,BarbaraAnn) ---USA(Marshall))", "StandardHomeCountry(Marshall,Bactyn) & UnitedStates(Marshall,Bates))", "(HomeCountry(BarrahAnnMarshall) -> UnitedStates(marshall))", "(HomeCountry(BarbaraAnnMarshall) & UnitedStates(Marshall))", "(HomeCountry(BAnMarshall & United States(Marshall))", "all x y.((Marshall(x) & Country(y)) -> UnitedStates(x))", "(HomeCountry(MarshallStandardStates))", "all x.(Marshall(x) -> UnitedStates(x))", "(HomeCountry(BaretheAnnMarshall) & UnitedStates(BarieAnnMarshall))", "(HomeCountry(BarbaAnnMarshall,Marshall) -> UnitedStates(Marshall,marshall))", "-HardCountry(BarbaraAnnMarshall)", "(HomeCountry(Marshall,BarbaraAnn) | UnitedStates(Marshall,BarbaraAnn))"]}
{"id": "folio_train_814", "nl": "All people who compete in the 1972 Summer Olympics represent their home country.", "fol": "all x.(exists y.(ParticipatedInEvent(x,Summer1972olympics) & HasHomeCountry(x,y)) -> RepresentsCountry(x,y))", "prediction": ["all x.((Person(x) & CompetesInSummerOlympics(x, 1972)) -> RepresentsHomeCountry(x))", "all x.(CompeteInSummerOlympics1972(x) -> ReprezentsHomeCountry(x))", "all x.(CompetesInSummerOlympics72(x) -> RepresentsHomeCountry(x))", "all x.(CompetesInSummerOlympics(x,y) -> RepresentsHomeCountry(x))", "all x.((Person(x) & CompetesInSummerOlympics(x,72)) -> RepresentsHomeCountry(x))", "all x.(CompetesInSummerOlympics_(x, 1972)) -> RepresentsHomeCountry(x))", "all x.(CompetesJulyOlympic(x,72) -> RepresentsHomeCountry(x))", "all x.((Person(x) & CompetesInSummerOlympics(x) & 1972) -> RepresentsHomeCountry(x))", "all x y.((Person(x) & CompetesInSummerOlympics(x,y) & 1972RegistersHomeCountry(x)) -> RepresentsHomeCountry(x,y))", "all x.((CompetitesInSummerOlympics(x,y) & 1972(y)) -> RepresentsHomeCountry(x,y))", "all x.(CompetesInSolidOlympics(x,72) -> RepresentsHomeCountry(x))", "all x.((Person(x) & CompetesInSummerOlympics(x,72)) -> RepresentsHomeCountry(x))", "all x.(AppealsInSummerOlympics(x,72) -> RepresentsHomeCountry(x))", "all x.((Person(x) & CompetesInSummerOlympics(x, 1972)) -> RepresentsHomeCountry(x))", "all x.(CompeteSummerOlympicsFrom72(x) -> RepresentsHomeCountry(x))", "all x.((Person(x) & CompetesInSummerOlympicsSummer(x, 1972)) -> ReprezentsHomeCountry(x))"]}
{"id": "folio_train_815", "nl": "Barbara Ann Marshall participated in the preliminary heat in the freestyle relay.", "fol": "ParticipatedInEvent(Barbaraannmarshall,Preliminaryheatfreestylerelay)", "prediction": ["Barbara AnnMarshall participated in preliminary heat in the freestyle relay.", "Barbara AnnMarshall participated in preliminaryheat in the freestylerelay(BabryAnnMarshall)", "all x y.((Marshall(x) & PreliminaryHeat(y) & FreestyleRelay(z) & ParticipatedIn(x,y,z)) -> Participate(x,y))", "all x.((Marshall(x) | AnnMarshall(x)) -> ParticipatedInPreliminaryHeatInFreestyleRelay(x))", "all x y.((Marshall(x) & PreliminaryHeat(y) & FreestyleRelay(x)) -> Participates(x,y))", "all x.(Marshall(x) -> ParticipatedInPreliminaryHeat(x))", "Barbara AnnMarshall participated in preliminary heat in the FreestyleRelay.", "Barbara AnnMarshall participated in the preliminary heat of the freestyle relay.", "the preliminary heat in freestyle-relay(BarryAnnMarshall)", "all x.(MarshallMarshall(x) -> ParticipatedInPrimaryHeatInRelay(x,freestyle))", "-PrettyHeat(BarbaraAnnMarshall)", "all x.(MargaretMargaret(x) -> ParticipatedInPreliminaryHeatInFreestyle(x))", "(PrimaryHeat=(Marshall(Marshall)) & ParticipatedIn(Marshall(Marshall))", "all x y z.((BarbaraAnnMarshall(x) & Heat(y) & Relay(z)) -> ParticipatedIn(x,y,z))", "Barbara AnnMarshall a particpate(a) in preliminaryheat in freestyle.", "all x.(Marshall(x) -> ParticipatedInPreliminaryHeat(x,freestyleRelay))"]}
{"id": "folio_train_816", "nl": "Barbara Ann Marshall did not participate in the event final of the 1972 Summer Olympics freestyle relay.", "fol": "-ParticipatedInEvent(Barbaraannmarshall,Finalheatfreestylerelay)", "prediction": ["-participatesInEventFinal(Marshall,72)", "(-ParticipatedInEventFinal(Marymarshall,2012))", "(-SharedEventFinal(BabryAnnMarshall,SoCalifornia_SummerOlympics(BarbarieAnnMarshall,72))", "Madame Marshall(Marshall,72) & -ParticipatedInEventFinal(Marshall,72))", "-ParticipatedInEventFinal('BarraAnnMarshall') & MayBeSummerOlympics(72) & Relay('BarraAnnMarshall')", "Barbara AnnMarshall -ParticipatedInEventFinal(Marshall,SoilOlympics)", "(-ParticipatedInEventFinal(Marshall,72) & SummerOlympicsFreestyleRelay(Marshall))", "-ParticipatesInSummerOlympics(Marshall,72)", "all x y.((Marshall(x) & SummerOlympics(y) & -(Marshall(x) & FreestyleRelay(x,y))) -> -Participated(x,y))", "(-participatedInEventFinal(Marshall,72))", "-(Marcaria AnnMarshall(Marshall,72))", "Barbara AnnMarshall -(exists x.(SummerOlympics(x) & ParticipatesIn(x,y) & DoesPosition(x,z)))", "In 1972, Barbara AnnMarshall -ParticipatedInEventFinal(Marshall,72) & -LeadsFreestyleRelay(Marshall,72))", "(-participatedInEventFinal(Marshall) & SummerOlympics(BarbaraAnnMarshall))", "no (Barra AnnMarshall(Marshall) -> -ParticipatedInEventFinal(Marshall,72))", "(-MaybeRelay(Marshall,SoHouse,SoFiles) & -ComesInFinal(Marshall,SoHouse,SoHouse))"]}
{"id": "folio_train_817", "nl": "Only relay swimmers who participated in the event final received medals.", "fol": "all x.((IsRelaySwimmer(x) & -ParticipatedInEvent(x,Finalheatfreerelay)) <-> -ReceivedMedal(x,Medal))", "prediction": ["all x.((RelaySwimmer(x) & ParticipatedInEventFinal(x)) -> ReceivedMedals(x))", "all x y.((Swimmer(x) & relay(y) & ParticipatedInEventFinal(x,y)) -> ReceivedMedals(x,y))", "all x.((RelaySwimmer(x) & ParticipatedInEventFinal(x)) -> ReceivedMedals(x))", "all x.((RelaySwimmer(x) & ParticipatedInEventFinal(x)) -> ReceivedMedal(x))", "all x.((RelaySwimmer(x) & ParticipatedInEventFinal(x)) -> ReceivedMedals(x))", "all x y.((RelaySwimmer(x) & ParticipatedInEventFinal(x)) -> ReceivedMedals(x))", "all x y.((RelaySwimmer(x) & ParticipatedInEventFinal(x)) -> ReceivedMedals(x))", "all x y.((RelaySwimmer(x) & EventFinal(y) & ParticipatedIn(x,y)) -> ReceivedMedals(x))", "all x y.((RelaySwimmer(x) & EventFinal(y) & ParticipatedIn(x,y)) -> ReceivedMedal(x))", "all x y z.((RelaySwimmer(x) & EventForm(y) & ParticipatedIn(x,y)) -> ReceivedMedals(x))", "all x.((RelaySwimmer(x) & Participated(x) & EventFinal(x)) -> ReceivedMedals(x))", "all x y.((RelaySwimmer(x) & EventFinal(y) & ParticipatedIn(x,y)) -> ReceivedMedals(x))", "all x y.((RelaySwimmer(x) & EventFinal(y) & ParticipatedIn(x,y)) -> ReceivedMedals(x))", "all x.((RelaySwimmer(x) & Participated(x) & EventFinal(x)) -> ReceivedMedals(x))", "all x.((RelaySwimmer(x) & ParticipatedInEventFinal(x)) -> ReceivedMedals(x))", "all x y z.((RelaySwimmer(x) & EventFinal(y) & ParticipatedIn(x,y)) -> ReceivedMedals(x))"]}
{"id": "folio_train_818", "nl": "Barbara Ann Marshall did not receive medals.", "fol": "-Received(Barbaraannmarshall,Medal)", "prediction": ["-ReceivesMedals(marshall,BarbaraAnn)", "-ReceivedMedals(BarbaraAnnMarshall)", "Barbara AnnMarshall-ReceivedMeals(Marshall-Commentary(Marshall))", "-(BaltimoreAnnMarshall(Marshall) & Medals(Marshall))", "-(Marshall(BarbaraAnn) & Medals(Marshall))", "-ReceivedMedals(BabeAnnMarshall)", "-(Marshall(Marshall) & ReceivesMedals(Marshall))", "(-(BarbaraAnnMarshall(b) & Medals(b)))", "(-ReceivesMedal(Marshall,BabeAnn))", "all x.(Marshall(x) -> -ReceivedMedal(x))", "All x.(Marshall(x) -> -ReceivedMedals(x))", "Cembals (Located(BabryAnnMarshall,Barranah(Marshall))", "all x.(Marashall(x) -> -ReceivesMedals(x))", "Barbara Ann Marshall -ReceivesMedals(Marshall,1997))", "All x.(Marshall(x) -> -ReceivedMedals(x))", "Barbara AnnMarshall (noMedals))"]}
{"id": "folio_train_819", "nl": "Barbara Ann Marshall represented the United States in the 1972 Summer Olympics.", "fol": "(RepresentsCountry(Barbaraannmarshall,Unitedstates) & ParticipatedInEvent(Barbaraannmarshall,Summer1972olympics))", "prediction": ["Barbara AnnMarshall represented the United States in the SummerOlympics(12,1972)", "all x y z.((Marshall(x) & Organizer(y) & UnitedStates(z)) -> Reputed(x,y,z))", "(RepresentedBeraAnnMarshall(Marshall,USA) & SummerOlympics(Marshall,72))", "-BarbaraAnnMarshallRepresented(Marshall,UnitedStates) InSummerOlympics(Marshall,2002))", "Barbara AnnMarshall represented UnitedStates(Marshall,72)", "(1972) & represented U.S.A.(Marshall,(Marshall, 1972)))", "Barbara AnnMarshall representedTheUnitedStatesInSummerOlympics(Marshall,72)", "Barbara AnnMarshall (Marshall) represents(Marshall,UnitedStates)  1972 SummerOlympics(Marshall,UnitedStates))", "Barbara AnnMarshall represented the United States in the 1972 SummerOlympics.", "2002, Summer Olympics (BaltimoreMarshall(BarbaraAnnMarshall) -> Represented United States(Marshall,72))", "Barbara Ann Marshall representedtheUnitedStatesInTheSummerOlympics(BabeAnnMarshall).", "-exists x y.((Marshall(x) & UnitedStates(y) & InSummerOlympics(x,y)))", "Barbara AnnMarshall represented the United States in the 1972 SummerOlympics.", "Barbara AnnMarshall, UnitedStates(Marshall,SummerOlympics)", "Barbara AnnMarshallRepresentedTheUSAInSummerOlympics(Marshall.)", "(Represented(BarraAnnMarshall,USA,SochiOlympics,2012))"]}
{"id": "folio_train_820", "nl": "A game is played with three stages: red stage, yellow stage, and green stage.", "fol": "exists x.(GamePlayer(x) & (GameStage(x,RedStage) | GameStage(x,YellowStage) | GameStage(x,GreenStage)))", "prediction": ["all x y z.((Game(x) & Stage(y) & Stage(z) & RedStage(x,z) & YellowStage(z)) -> GreenStage(x))", "all x y.((Game(x) & Stage(y) & RedStage(x,y)) -> YellowStage(y) & GreenStage(x,y))", "all x.(Game(x) -> (PlayedWithRedStage(x) & PlayedWithYellowStage(x) & PlayedWithGreenStage(x)))", "all x y.((Game(x) & Stage(y) & RedStage(x,y) & YellowStage(y) and GreenStage(y)) -> PlayedWith(x,y))", "all x.(Game(x) -> (exists y.(RedStage(y) & PlayedWith[x,y)) & exists z.(YellowStage(z) & PlayedWith(x,z))) & exists w.(GreenStage(w) & PlayedWith(x,w))))", "all x y.((Game(x) & Stage(y)) -> (Red(x) | Yellow(x) | Green(x)))", "all x.(Game(x) -> ((RedStage(x) | YellowStage(x) | GreenStage(x))))", "all x y.((Game(x) & Stage(y) & (RedStage(x,y) | YellowStage(x,y) | GreenStage(x,y))) -> PlayedWith(x,y))", "all x.(Game(x) -> (PlayedWithRedStage(x) & PlayedWithYellowStage(x) & PlayedWithGreenStage(x)))", "all x.(Game(x) -> exists y z.(RedStage(y) & YellowStage(z) & GreenStage(x) & PlayedWith(x,y,z)))", "all x.(Game(x) -> (PlayedWithTwoStages(x) & Red(x) & Yellow(x) & Green(x)))", "all x y z.((Game(x) & Stage(y) & Stage(z)) -> (Red(x) | Yellow(x) | Green(z)))", "all x.(Game(x) -> (PlayedWith(x,red) | PlayedWith(x,yellow) | PlayedWith(x,green)))", "all x y z.((Game(x) & Stage(y) & Stage(z)) -> (Rose(x) | Yellow(x) | Green(z)))", "all x y z w.((Game(x) & Stage(y) & Stage(z) & Stage(w)) -> (Red(x) | Yellow(x) | Green(x)))", "(PlayedWith(Game) & RedStage(Game) | PlayedWith(Game) & YellowStage(Game) | PlayedWith(Game) & GreenStage(Game))"]}
{"id": "folio_train_821", "nl": "Each player begins at the red stage.", "fol": "all x.(GamePlayer(x) -> GameStage(x,RedStage))", "prediction": ["all x.(Player(x) -> RedStage(x))", "all x y.((Player(x) & Star)) -> RedStage(y))", "all x.(Player(x) -> RedStage(x))", "all x.(Player(x) -> RedStage(x))", "all x.(Player(x) -> RedStage(x))", "all x y.((Player(x) & RedStage(y)) -> StartsAtDraw(x,y))", "all x.(Player(x) -> (StartsAtRedStage(x) & EndsAtRedStage(x)))", "all x.(Player(x) -> RedStage(x))", "all x.(Player(x) -> RedStage(x))", "all x.(Player(x) -> RedStage(x))", "all x.(Player(x) -> RedStage(x))", "all x.(Player(x) -> StartsRedStage(x))", "ALL X.(Player(x) -> RedStage(x))", "all x.(Player(x) -> RedStage(x))", "all x.(Player(x) -> RedStage(x))", "all x.(Player(x) -> RedStage(x))"]}
{"id": "folio_train_822", "nl": "All players must reach the yellow stage before they can reach the green stage.", "fol": "all x.((GamePlayer(x) & -GameStage(x,YellowStage)) -> -GameStage(x,GreenStage))", "prediction": ["all x.(Player(x) -> (ReachesYellowStage(x) & ReachGreenStage(x)))", "all x.(Player(x) -> (ReachesYellowStage(x) & ReachesGreenStage(x)))", "all x y.((Player(x) & YellowStage(y)) -> GreenStage(x,y))", "all x.(Player(x) -> (BreaksYellowStage(x) & ReachesGreenStage(x)))", "all x.((Player(x) & YellowStage(x)) -> GreenStage(x))", "all x.(Player(x) -> (ReachesPython(x,y) & CanReachGreen(x)))", "all x.((Player(x) & YellowStage(x)) -> GreenStage(x))", "all x.(Player(x) -> (MadeOfYellowStage(x) & MadeOfGreenStage(x)))", "all x.((Player(x) & GreenStage(x)) -> MustPassYellowStage(x))", "all x.(Player(x) -> (reachesYellowStage(x) & CanAccessGreenStage(x)))", "all x.(Player(x) -> (TookYellowStage(x) & TookGreenStage(x)))", "all x.(Player(x) -> (ReachesYellowStage(x) & CanReachGreenStage(x)))", "all x.(Poker(x) -> (TogetherTrees(x,y) & AttendsStage(x,green)))", "all x y.((Player(x) & YellowStage(y)) -> CanAttachGreenStage(x,y))", "all x.(Player(x) -> (ReachesYellowStage(x) & TouchGreenStage(x)))", "all x.(Player(x) & BlueStage(x))"]}
{"id": "folio_train_823", "nl": "The yellow stage comes after the red stage.", "fol": "all x.((GamePlayer(x) & -GameStage(x,RedStage)) -> -GameStage(x,YellowStage))", "prediction": ["The yellow stage comes after the red stage.", "all x.(YellowStage(x) -> Yellow(x))", "all x.(YellowStage(x) -> RedStage(x))", "all x.(YellowStage(x) -> ComesAfterRedStage(x))", "all x y.((YellowStage(x) & RedStage(y)) -> ComesAfter(x,y))", "all x y.((YellowStage(x) & RedStage(y)) -> ComesAfter(x,y))", "all x.(YellowStage(x) -> ComesAfter(x,RedStage))", "all x y.(((YellowStage(x) & RedStage(y)) -> ComesAfter(x,y))", "all x y.((YellowStage(x) & PurpleStage(y)) -> ComesAfter(x,y))", "exists x y.(YellowStage(x) & RedStage(y) & ComesAfter(x,y))", "all x y.((YellowStage(x) & RedStage(y)) -> ComesAfter(x,y))", "all x y.((YellowStage(x) & RedStage(y)) -> ComesAfter(x,y))", "(YellowStage(y) & RedStage(z))", "(YellowStage(y) & RedStage(y))", "all x y.((OrangeStage(x) & RedStage(y)) -> ComesAfter(x,y))", "comesafterredStage(y)"]}
{"id": "folio_train_824", "nl": "All players must proceed one stage at a time.", "fol": "all x.((GamePlayer(x) & GameStage(x,RedStage) & -GameStage(x,YellowStage)) -> -GameStage(x,GreenStage))", "prediction": ["all x.(Player(x) -> AllDegreesStage(x))", "all x.(Player(x) -> OneStageAtTime(x))", "all x.(Player(x) -> ProceedsOneStageAtThanTime(x))", "all x.(Players(x) -> ProcedsOneStageAtTime(x))", "all x y.((Player(x) & Stage(y)) -> Proceed(x,y))", "all x.(Player(x) -> ProceedOneStageAtATime(x))", "all x.(Player(x) -> exists y.(Stage(y) & ContinuesAt(x,y))))", "all x.(Player(x) -> CanProceedOneStageAtATime(x))", "all x.(Player(x) -> PlayingOneStageAtMalley(x))", "all x.(Player(x) -> ProceedsOneStageAtATime(x))", "all x.(Player(x) -> ProceedsOneStage(x))", "(All Players(Player) -> ProceedsOneStageAtTime(Player))", "all x.(Player(x) -> PlaysOneStageAtMeander(x))", "all x.(Player(x) -> ProceedsOneStage(x))", "all x.(Player(x) -> OneStageAtLeast(x))", "all x.(Player(x) -> ProcureStageAtATime(x))"]}
{"id": "folio_train_825", "nl": "It is possible to move to the green stage without ever reaching the yellow stage.", "fol": "-all x.((GamePlayer(x) & GameStage(x,GreenStage)) -> GameStage(x,YellowStage))", "prediction": ["all x.(MovementToGreen(x) & -ReachesYellow(x))", "all x.(GrowthStage(x) -> (MoveToGreenStage(x) & -MoveToYellowStage(x)))", "all x y.((GrowthStage(x) & YellowStage(y)) -> PossibleToMoveTo(x,y))", "all x y.((Positive(x) & GreenStage(y) & YellowStage(y)) -> MovesTo(x,y))", "all x y.((GreenStage(x) & YellowStage(y)) -> MovesWithoutReachingBelow(x,y))", "all x y z.((GreenStage(x) & YellowStage(y)) -> -MovesTo(x,y))", "all x.((MoveToGreenStage(x) & AchieveYellowStage(x)) -> MoveToGreenStage(x))", "all x.((MoveToGreenStage(x)) -> -MoveToYellowStage(x))", "all x.((MovesToGreenStage(x) & -ReachesYellowStage(x)) -> MovesToGreenStage(x))", "all x.(MoveToGreenStage(x) -> -EarlyInGreenStage(x))", "all x.((MoveToGreenStage(x) & -IsYellowStage(x)) -> Possible(x))", "all x y.((GreenStage(x) & YellowStage(y)) -> MovesTo(x,y))", "all x.(CableToGreenStage(x) -> -MoveToYellowStage(x))", "all x.(MovesToGreenStage(x) & -ReachesYellowStage(x))", "all x y z.((GreenStage(x) & YellowStage(y)) -> CanMoveTo(x,y))", "all x.(MoveToGreen(x) -> -GrowthPension(x))"]}
{"id": "folio_train_826", "nl": "It is possible to reach the yellow stage without ever reaching the green stage.", "fol": "-all x.((GamePlayer(x) & GameStage(x,YellowStage)) -> GameStage(x,GreenStage))", "prediction": ["all x y.((GreenStage(x) & YellowStage(y)) -> PossibleReach(x,y))", "all x y z.((YellowStage(x) & GreenStage(y)) -> (PossibleToReach(x,y) & -PossibleToReach(x,z)))", "all x.((TurnsYellowStage(x) & -TurnsGreenStage(x)) -> -TurnsGreenStage(x))", "exists x y.((Goal(x) & Stage(y) & Yellow(y)) & -Distant(x,y))", "all x.(GreenStage(x) -> (Together(x,y) & YellowStage(y)))", "all x y.((YellowStage(x) & GreenStage(y)) -> Possible(x,y))", "exists x.(Reaching(x,y) & YellowStage(y) & -ReachingGreenStage(x))", "all x y.((JoyStage(x) & Stage(y)) -> (BelongsTo(x,y) & -BelongsTo(x,y)))", "all x.((YellowStage(x) & YellowStage(x)) -> -AchievesGreenStage(x))", "All x.((PossibleToReachEarth(x) & YellowStage(x)) -> -MakingEarth(x,GreenStage))", "all x.((YellowStage(x) & GreenStage(x)) -> CanBeAchieved(x))", "all x y.((YellowStage(x) & GreenStage(y)) -> CanBeReach(x,y))", "all x.(TappsYellowStage(x) -> -ReachesGreenStage(x))", "exists x.(CanObtain(x,y) & YellowStage(x) & -CanObtain(x,y))", "exists x.(ReachYellowStage(x) & -ReachGreenStage(x))", "all x.(Caution(x) -> CanMallOnYellowStage(x))"]}
{"id": "folio_train_827", "nl": "It is possible to complete the game without ever reaching the green stage.", "fol": "exists x.(GamePlayer(x) & -GameStage(x,GreenStage))", "prediction": ["exists x.(CompleteGame(x) & -ReachesGreenStage(x))", "all x.((Game(x) & CompliesWithOutGreenStudy(x)) -> CanBeCompleted(x))", "all x.((Game(x) & CompletesWithoutGreenStage(x)) -> Possible(x))", "all x.((Game(x) & CompletedWithoutGreenStage(x)) -> PossibleWithoutGreenStage(x))", "all x.((Game(x) & RealStage(x,Green)) -> Complete(x))", "all x.(Conditions(x) & -TotalGreenStage(x))", "all x.(CompleteGameWithoutGreenStage(x) -> Possible(x))", "all x.(Commit(x) -> -GreenStage(x))", "exists x.(CompleteGame(x) & -ToGreenStage(x))", "all x y.((Game(x) & GreenStage(y)) -> CanComplete(x,y))", "all x.(CompleteGame(x) / -GreenStage(x))", "(CompleteGameWithoutGreenStage(x))", "exists x.(Play(x) & CompleteGame(x) & -GreenStage(x))", "is possible to complete the game without reaching greenstadium.", "all x.(Process(x) -> CompleteGame(x))", "all x.((Game(x) & -GoGreenStage(x)) -> CanComplete(x))"]}
{"id": "folio_train_828", "nl": "People either value physical touch as an especially important love language or value words of affirmation as an especially important love language.", "fol": "all x.(ValuesPhysicalTouch(x) | ValuesWordsOfAffirmation(x))", "prediction": ["all x.((People(x) & (ValuesPhysicalTouch(x) | ValuesWordsOfAffirmation(x))) -> LoveLanguage(x))", "all x y.((Person(x) & Person(y)) -> (ValuesPhysicalTouch(x,y) | ValuesAffirmation(x,y)))", "all x y z.((Person(x) & PhysicalTouch(y) | Affirmation(z))) -> (ValuesAsImportantLoveLanguage(x,y) | ValuesAffirmationLanguage(x,z)))", "all x y.((Person(x) & Person(y)) -> (ValuesBeautyTouch(x,y) | ValuesAffirmation(x,y)))", "all x.(People(x) -> (ValuesPhysicalTouch(x) | ValuesAffirmation(x)))", "(valuesPhysicalTouch(Person) & (IrrelevantLoveLanguage(Person) | IrrelevantLoveLanguage(Person)))", "all x.((Person(x) & (valuesPhysicalTouch(x) -> SpeciallyImportantLoveLanguage(x)) | ValuesWordsOfAffirmation(x)))", "exists x y.((Person(x) & ValuesPhysicalTouchAsLoveLanguage(x)) | ValuesWordsOfAffirmationAsLoveLanguage(y)))", "all x y.((Person(x) & ValuesPhysicalTouch(x) & ValuesAffirmation(y)) -> (ImportantLoveLanguage(x) | ImmportantLoveLanguage(y)))", "exists x.(Person(x) & (ValuesPhysicalTouch(x) | ValuesWordsOfAffirmation(x))))", "all x.((Person(x) & (ValuesPhysicalTouch(x) | ValuesWordsOfAffirmation(x))) -> EspeciallyImportantLoveLanguage(x))", "all x.(Person(x) -> (ValuesPhysicalTouch(x) | ValuesWordsOfAffirmation(x)))", "exists x.(Person(x) & (ValuesPhysicalTouch(x) | ValuesAffirmationName(x)))", "all x.(People(x) -> (ValuesPhysicalTouch(x) | ValuesWordsOfAffirmation(x)))", "exists x.(Person(x) & (ValuesPhysicalTouch(x) | ValuesWordsOfAffirmation(x)))", "all x.(Affirmation(x) -> (ValuesPhysicalTouch(x) & AlsoImportantLoveLanguage(x)) | ValuesWordsOfAffirmation(x)))"]}
{"id": "folio_train_829", "nl": "If a person values physical touch as an especially important love language, then they are good with pets.", "fol": "all x.(ValuesPhysicalTouch(x) -> IsGoodWithPets(x))", "prediction": ["all x.((Person(x) & ValuesPhysicalTouchAsLovingLanguage(x)) -> GoodWithPets(x))", "all x.(ValuesPhysicalTouch(x) -> GoodWithPets(x))", "all x.((Person(x) & ValuesPhysicalTouch(x) & LoveLanguage(x)) -> GoodWithPets(x))", "all x.((Person(x) & ValuesPhysicalTouch(x) & LoveLanguage(x)) -> GoodWithPets(x))", "all x.((Person(x) & ValuesPhysicalTouch(x) & LoveLanguage(x)) -> GoodWithPets(x))", "all x.(ValuesPhysicalTouch(x) -> GoodWithPets(x))", "all x.(ValuesPhysicalTouch(x) -> CanDoGoodWithPets(x))", "all x.((Person(x) & ValuesPhysicalTouch(x) & LoveLanguage(x)) -> GoodWithPets(x))", "all x.(ValuingPhysicalTouch(x) -> GoodWithPets(x))", "all x.((Person(x) & ValuesPhysicalTouch(x) & ImportantLoveLanguage(x)) -> GoodWithPets(x))", "all x.(ValuesPhysicalTouch(x) -> GoodWithPets(x))", "all x.(ValuesPhysicalTouchAsLoveLanguage(x) -> GoodWithPets(x))", "all x.(ValuesPhysicalTouchAsLoveLanguage(x) -> GoodWithPets(x))", "all x.(ValuesPhysicalTouch(x) -> GoodWithPets(x))", "all x.((Person(x) & ValuesPhysicalTouchAsLoveLanguage(x)) -> Good(x))", "all x.(EveningLoveLanguage(x) -> GoodPet(x))"]}
{"id": "folio_train_830", "nl": "No people that are good with pets are scared of animals.", "fol": "all x.(IsGoodWithPets(x) -> -IsScaredOfAnimals(x))", "prediction": ["all x.((Person(x) & GoodWithPets(x)) -> ScaredOfAnimals(x))", "all x.((Person(x) & GoodWithPet(x)) -> ScaredOfAnimals(x))", "all x.((Person(x) & GoodWithPets(x)) -> ScaredOfAnimals(x))", "all x.((Person(x) & GoodWithPets(x)) -> ScaredOfAnimals(x))", "all x.((Person(x) & GoodWithPets(x)) -> ScaredOfAnimals(x))", "all x.(GoodWithPets(x) -> ScaredOfAnimals(x))", "all x.((Person(x) & GoodWithPets(x)) -> ScaredOfAnimals(x))", "all x.((Person(x) & GoodWithPets(x)) -> ScaredOfAnimals(x))", "all x.((Person(x) & GoodWithPets(x)) -> ScaredOfAnimals(x))", "all x.((Person(x) & GoodWithPets(x)) -> ScaredOfAnimals(x))", "all x.((Person(x) & GoodWithPets(x)) -> ScaredOfAnimals(x))", "all x.(GoodWithPets(x) -> ScaredOfAnimals(x))", "all x.((Person(x) & GoodWithPets(x)) -> ScarredOfAnimals(x))", "all x.(GoodWithPets(x) -> ScaredOfAnimals(x))", "all x.((Person(x) & GoodWithPets(x)) -> ScaredOfAnimals(x))", "all x.((Person(x) & GoodWithPet(x)) -> ScaredOfAnimals(x))"]}
{"id": "folio_train_831", "nl": "People are either scared of animals or love animals.", "fol": "all x.(IsScaredOfAnimals(x) | LovesAnimals(x))", "prediction": ["all x.(People(x) -> (ScaredOfAnimals(x) | LovesAnimals(x)))", "all x y.((Person(x) & Animal(y)) -> (ScaredOf(x,y) | Loves(x,y)))", "all x.(Person(x) -> (ScaredOfAnimals(x) | Loveanimals(x)))", "all x.(Person(x) -> (ScaredOfAnimals(x) | LovesAnimals(x)))", "all x.(Person(x) -> (ScaredOfAnimals(x) | LovesAnimals(x)))", "exists x.(ScaredOfAnimals(x) | LovesAnimals(x))", "all x.(ScaredOfAnimals(x) | LovesAnimals(x))", "all x.(Person(x) -> (ScaredOfVeterans(x) | LovesAnimals(x)))", "all x.(People(x) -> (ScaredOfAnimals(x) | LoveAnimals(x)))", "all x.(Person(x) -> (ScaredOfAnimals(x) | LovesAnimals(x)))", "exists x.(People(x) & ((ScaredOfAnimals(x) | LovesAnimals(x))))", "all x.(Person(x) -> (ScaredOfAnimals(x) | LovesAnimals(x)))", "all x.(Person(x) -> (ScaredOfAnimals(x) | LovesAnimals(x)))", "all x.(People(x) -> (ScaredOfAnimals(x) | LoveDogs(x)))", "all x.(Fun(x) -> (ScaredOfAnimals(x) | LoveAnimals(x)))", "all x.(Person(x) -> (ScaredOfAnimals(x) | LovesAnimals(x)))"]}
{"id": "folio_train_832", "nl": "Adam is either a person who values physical touch as an especially important love language or a person who loves animals.", "fol": "((ValuesPhysicalTouch(Adam) & -LovesAnimals(Adam)) | (-ValuesPhysicalTouch(Adam) & LovesAnimals(Adam)))", "prediction": ["all x.(Adam(x) -> (ValuesPhysicalTouch(x) & LoveLanguage(x)) | LovesAnimals(x)))", "all x.(Adam(x) -> (ValuesPhysicalTouch(x) | LovesAnimals(x)))", "all x.(Adam(x) -> (ValuesPhysicalTouchAsLoveLanguage(x) | LovesAnimals(x)))", "all x.(Adam(x) -> (ValuesPhysicalTouch(x) & (LovingAnimals(x) | LovingAnimals(x)))))", "all x.(Adam(x) -> (ValuesPhysicalTouch(x) & (LOVEsAnimals(x) | LovesAnimals(x))))", "all x.(Adam(x) -> (ValuesPhysicalTouch(x) | LovesAnimals(x)))", "all x.(Adam(x) -> (ValuesPhysicalTouch(x) & LoveLanguage(x)) | (ValuesAnimals(x) & LoveLanguage(x))))", "exists x.(Adam(x) & (ValuesPhysicalTouch(x) & LoveLanguage(x) | LovesAnimals(x)))", "all x.(Adam(x) -> (ValuesPhysicalTouch(x) & LoveLanguage(x)) | LovesAnimals(x)))", "exists x.(Adam(x) & (ValuesPhysicalTouch(x) & ParticularlyImportantLoveLanguage(x) | LovesAnimals(x)))", "exists x.(Adam(x) & (DealsPhysicalTouch(x) & LoveLanguage(x) | LovesAnimals(x)))", "all x.(Adam(x) -> (ValuesPhysicalTouch(x) & EspeciallyImportantLoveLanguage(x)))", "all x.((Person(x) & ValuesPhysicalTouch(x) & LoveLanguage(x)) | LovesAnimals(x))", "all x.(Adam(x) -> (Person(x) & ValuesPhysicalTouch(x) & LoveLanguage(x)) | Person(x) & LovesAnimals(x)))", "all x.(Adam(x) -> (ValuesPhysicalTouch(x) & LoveLanguage(x) | LovesAnimals(x)))", "all x.(Adam(x) -> (Person(x) & ValuesPhysicalTouch(x) & (LovesAnimals(x) | LovesAnimals(x))))"]}
{"id": "folio_train_833", "nl": "Adam is scared of animals.", "fol": "IsScaredOfAnimals(Adam)", "prediction": ["all x y.((Adam(x) & Animal(y)) -> ScaredOf(x,y))", "all x.(Adam(x) -> ScaredOfAnimals(x))", "all x.(Adam(x) -> ScaresomeOfAnimals(x))", "all x.((Adam(x) & ScaredOfAnimals(x)) -> HasAnimals(x))", "all x.(Adam(x) -> ScaredOfAnimals(x))", "all x.(Animal(x) -> ScaredOf(x))", "all x.(Adam(x) -> ScaredOfAnimals(x))", "All x.(Adadam(x) -> ScaredOfAnimals(x))", "all x.(Adam(x) -> ScarredOfAnimals(x))", "(ScaredOfAnimals(Adam))", "(ScaredOfAnimals(Adam))", "all x.(Adam(x) -> ScaredOfAnimals(x))", "Adam is scaredOfAnimals(adam).", "Adam sabotagesAnimals(adam)", "all x.(Adam(x) -> ScaredOfAnimals(x))", "all x.(Adam(x) -> ScreamsOfAnimals(x))"]}
{"id": "folio_train_834", "nl": "Adam values words of affirmation as an especially important love language.", "fol": "ValuesWordsOfAffirmation(Adam)", "prediction": ["all x y.((Adam(x) & WordOfAffirmation(y)) -> ValuesLoveLanguage(x,y))", "all x.((Adam(x) & WordOfAffirmation(x)) -> LoveLanguage(x))", "all x.((Adam(x) & Affirmation(x)) -> EspeciallyImportantLoveLanguage(x))", "all x.((Adam(x) & ValuesWordsOfAffirmation(x)) -> LoveLanguage(x))", "all x.((Adam(x) & WordOfAssertion(x)) -> AllergyLanguage(x))", "all x.((Adam(x) & WordsOfAffirmation(x)) -> LoveLanguage(x))", "all x.((Adam(x) & WordOfAssertation(x)) -> LoveLanguage(x))", "all x.((Adam(x) & ValuesWordOfAffirmation(x)) -> LoveLanguageOfExcellence(x))", "all x.((Adam(x) & WordOfAffirmation(x)) -> LoveLanguageOfImportant(x))", "all x.((Adam(x) & MeaningsOfAffirmation(x)) -> LoveLanguage(x))", "all x.((Adam(x) & WordOfAffirmation(x)) -> LoveLanguage(x))", "all x.((Adam(x) & Describes(x,WordsOfAffirmation)) -> LoveLanguage(x))", "all x.((Adam(x) & ValuesAffirmation(x)) -> LoveLanguage(x))", "Adam ValuesAffirmationPlone(a) & LoveLanguage(a) -> ImportantLitudo(a))", "all x.((Adam(x) & ValuesWordOfAffirmation(x)) -> LoveLanguage(x))", "all x.(AdamValuesAffirmationWords(x) -> NotEveryoneIsLoveLanguage(x))"]}
{"id": "folio_train_835", "nl": "Adam values physical touch as an especially important love language and values words of affirmation as an especially important love language.", "fol": "(ValuesPhysicalTouch(Adam) & ValuesWordsOfAffirmation(Adam))", "prediction": ["all x.((Adam(x) & PhysicalTouch(x)) -> ((ImportantLoveLanguage(x) & ImportantLoveLanguage(x)) | ImportantLoveLanguage(x))))", "both Adam and Affirmation(Adam) values them both as lovelanguages & values them both as lovelanguages & important(Adam))", "all x y.((Adam(x) & PhysicalTouch(x,y)) -> (IsLovingLanguage(y) & IsLovingLanguage(x,y)))", "(Likely(Adam,PhysicalTouch) & Likely(Adam,Affirmation))", "(all x.(Adam(x) -> IsEspeciallyDailyLanguage(x)) & all y.(Adam(y) -> IsEspeciallyDailyLanguage(y))))", "(ValuesPhysicalTouch(Adam) & ValuatesAffirmation(Adam))", "(all x y.((Adam(x) & PhysicalTouch(x)) -> LoveLanguage(x,y)) & all z w.((Affirmation(z) & Word(w)) -> LoveLanguage(w))))", "(all x y.((Adam(x) & PhysicalTouch(y)) -> LoveLanguage(x)) & all z w.((Adam(z) & Advocation(w)) -> LoveLanguage(w))))", "(all x.(Adam(x) -> ValuesPhysicalTouch(x)) & all y.(Adam(y) -> ValuesWordOfAffirmation(x))))", "all x.((Adam(x) & ValuesPhysicalTouch(x) & ValuesWordsOfAffirmation(x)) -> LoveLanguage(x))", "all x y.((Adam(x) & PhysicalTouch(y)) -> (LoveLanguage(x,y) & LoveLanguage(x,y)))", "all x.(AdamValuesPhysicalTouch(x) -> (ImportantLoveLanguage(x) & ItemOfAffirmation(x)))", "all x y.((Adam(x) & PhysicalTouch(x) & AffirmationWords(y)) -> (ImportantLoveLanguage(x) & ImportantLoveLanguage(y)))", "all x y.((Adam(x) & PhysicalTouch(x) & WordOfAffirmation(y)) -> (ImportantLoveLanguage(x) & ImportantLoveLanguage(y)))", "all x y z.((Adam(x) & PhysicalTouch(y) & Affirmation(z)) -> (Values(x,y) & LoveLanguage(y) & Values(x,z)))", "(Elements(Adam,PhysicalTouch) & EspeciallyImportantLoveLanguage(Adam) & EspeciallyImportantLoveLanguage(Adam,Affirmation))"]}
{"id": "folio_train_836", "nl": "Adam either values physical touch as an especially important love language or values words of affirmation as an especially important love language.", "fol": "(ValuesPhysicalTouch(Adam) | ValuesWordsOfAffirmation(Adam))", "prediction": ["all x y z.((Adam(x) & PhysicalTouch(y) & Affirmation(z) & Values(x,y)) -> (Validates(x,z) | Values(x,a) & LoveLanguage(x,z)))", "all x.(Adam(x) -> (ValuesPhysicalTouch(x) | ValuesWordsOfAffirmation(x)))", "exists x.(Adam(x) & (ValuesPhysicalTouch(x) | ValuesDeclaration(x))))", "all x.(Adam(x) -> (ValuesPhysicalTouch(x) | ValuesAffirmation(x)))", "(ValuesPhysicalTouch(a) & EspeciallyImportantLoveLanguage(a)) | ValuesReaffirmation(a)))", "all x.(Adam(x) -> (ValuesPhysicalTouch(x) & IsImportantLoveLanguage(x)) | ValuesWordsOfAffirmation(x)))", "(ValuesPhysicalTouch(Adam) & (EspeciallyImportantLoveLanguage(Adam) | AlwaysImportantLoveLanguage(Adam)))", "all x.(Adam(x) -> (ValuesPhysicalTouch(x) | ValuesWordsOfAffirmation(x)))", "all x y z.((Adam(x) & PhysicalTouch(y) & Affirmation(z)) -> (Values(x,y) | Values(x,z)))", "all x.((Adam(x) & (ValuesPhysicalTouch(x) | ValuesAffirmation(x))) -> IsLoveLanguage(x))", "all x y z.((Adam(x) & PhysicalTouch(y) & LoveLanguage(z)) | (Adam(x) & LoveLanguage(y) & Affirmation(y))))", "exists x.(Adam(x) & (ValuesPhysicalTouch(x) & EspeciallyImportantLoveLanguage(x)) | ValuesAffirmation(x) & EspeciallyImportantLoveLanguage(x)))", "all x.(Adam(x) -> (ValuesPhysicalTouch(x) | ValuesWordsOfAffirmation(x)))", "all x.(Adam(x) -> ((ValuesPhysicalTouch(x) & IsLoveLanguage(x)) | ValuesWordsOfAffirmation(x))))", "((ValuesPhysicalTouch(Adam) & SpeciallyImportantLoveLanguage(Adam)) | ValuesWordsOfAffirmation(Adam,ElementallyImportantLoveLanguage)))", "all x.((Adam(x) & (ValuesPhysicalTouch(x) & IsEspeciallyImportantLoveLanguage(x) | ValuesWordsOfAffirmation(x))) -> IsEspeciallyImportantLoveLanguage(x))"]}
{"id": "folio_train_837", "nl": "If Adam values physical touch as an especially important love language or is good with pets, then Adam values words of affirmation as an especially important love language.", "fol": "((ValuesPhysicalTouch(Adam) | IsGoodWithPets(Adam)) -> ValuesWordsOfAffirmation(Adam))", "prediction": ["all x.((Adam(x) & ValuesPhysicalTouch(x) & (Ideal(x) | GoodWithPets(x))) -> ValuesWordsOfAffirmation(x))", "all x.((Adam(x) & ValuesPhysicalTouch(x) & (LoveLanguage(x) | GoodWithPets(x))) -> ValuesAffirmationWords(x))", "all x y.((EssentialLoveLanguage(x) & AdamValuesPhysicalTouch(x,y) | GoodWithPets(x,y)) -> ValuesWordsOfAffirmation(x,y))", "all x.((AdamValuesPhysicalTouch(x) & (LoveLanguage(x) | GoodWithPets(x))) -> LoveLanguage(x))", "all x.(ValuesPhysicalTouch(x) -> (ImportantLovingLanguage(x) | ExcellentWithPets(x)))", "all x.((AdamValuesPhysicalTouch(x) & (IsImportantLoveLanguage(x) | GoodWithPets(x))) -> ValuesWordsOfAffirmation(x))", "all x.((Adam(x) & (FitnessTouch(x) | GoodWithPets(x))) -> ValuedLikelyLovingLanguage(x))", "all x.((AdamValuesPhysicalTouch(x) & (ImportantLoveLanguage(x) | GoodWithPets(x))) -> ImportantLoveLanguage(x))", "all x.((Adam(x) & (ExcellentLoveLanguage(x) | GoodWithPets(x))) -> ValuesAffirmation(x))", "all x.((Adam(x) & ValuesPhysicalTouch(x) & (ImportantLoveLanguage(x) | GoodWithPets(x))) -> ValuesWordsOfAffirmation(x))", "all x.((Adam(x) & ValuesPhysicalTouch(x)) | GoodWithPets(x)) -> ValuesWordOfAffirmation(x))", "all x.((Treatment(x) & (LoveLanguage(x) | GoodWithPets(x))) -> ValuesAffirmation(x))", "all x.((LoveLanguage(x) & ValuesPhysicalTouch(x) & ValuesPets(x)) -> ValuesWordsOfAffirmation(x))", "all x.((Adam(x) & ValuesPhysicalTouchAs(x) & LoveLanguage(x) & ValuesGoodPetsAs(x)) -> LoveLanguage(x))", "all x y.((Adam(x) & (PhysicalTouch(y) | GoodWithPets(y))) -> ValuesAffirmation(x))", "all x.((AdamValuesPhysicalTouch(x) & (ImmertialLoveLanguage(x) | (GoodWithPets(x))))) -> ImmertialLoveLanguage(x))"]}
{"id": "folio_train_838", "nl": "All birds have wings.", "fol": "all x.(IsBird(x) -> HasWings(x))", "prediction": ["all x.(Bird(x) -> HasWings(x))", "all x.(Bird(x) -> HasWings(x))", "all x.(Bird(x) -> HasWings(x))", "all x.(Bird(x) -> HasWings(x))", "all x.(Bird(x) -> HasWings(x))", "all x.(Bird(x) -> HasWings(x))", "all x.(Bird(x) -> HasWings(x))", "all x.(Bird(x) -> HasWings(x))", "all x.(Bird(x) -> HasWings(x))", "all x.(Bird(x) -> HasWings(x))", "all x.(Bird(x) -> HasWings(x))", "all x.(Bird(x) -> HasWings(x))", "all x.(Bird(x) -> HasWings(x))", "all x.(Bird(x) -> HasWings(x))", "all x.(Bird(x) -> HasWings(x))", "all x.(Bird(x) -> HasWings(x))"]}
{"id": "folio_train_839", "nl": "No animal with wings is a reptile.", "fol": "all x.(HasWings(x) -> -IsReptile(x))", "prediction": ["-exists x.(Ant(x) & HasWings(x) & Reptile(x))", "all x.((Animal(x) & HasWings(x)) -> Reptile(x))", "all x.((Animal(x) & HasWings(x)) -> Reptile(x))", "all x.((Animal(x) & HasWings(x)) -> Reptile(x))", "all x.((Animal(x) & HasWings(x)) -> Reptile(x))", "all x.((Animal(x) & HasWings(x)) -> Reptile(x))", "all x.((Animal(x) & HasWings(x)) -> Reptile(x))", "-exists x.(Animal(x) & HasWings(x))", "all x.((Animal(x) & HasWings(x)) -> Reptile(x))", "all x.((Animal(x) & HasWings(x)) -> Reptile(x))", "-exists x.(Animal(x) & HasWings(x))", "-exists x.(Animal(x) & HasWings(x))", "all x.((Animal(x) & HasWings(x)) -> Reptile(x))", "-exists x.(Animal(x) & HasWings(x) & Reptile(x))", "all x.((Animal(x) & HasWings(x)) -> Reptile(x))", "-exists x.(Animal(x) & HasWings(x))"]}
{"id": "folio_train_840", "nl": "Some animals that fly are birds.", "fol": "exists x.(CanFly(x) & IsBird(x))", "prediction": ["exists x.(Animal(x) & flies(x))", "exists x.(Animal(x) & Flies(x))", "exists x.(Animal(x) & Fly(x))", "exists x.(Animal(x) & Flies(x))", "exists x.(Animal(x) & Fly(x))", "exists x.(FlyingAnimal(x) & Bird(x))", "exists x.(Animal(x) & Fly(x))", "exists x.(Animal(x) & Fly(x))", "exists x.(Animal(x) & Flies(x))", "exists x.(Animal(x) & Flies(x))", "exists x.(Animal(x) & Fly(x))", "exists x.(Animal(x) & Flies(x))", "exists x.(Animal(x) & Fly(x))", "exists x.(Animal(x) & Fly(x))", "exists x.(Animal(x) & Flies(x))", "exists x.(Animal(x) & Flies(x))"]}
{"id": "folio_train_841", "nl": "If something is an iguana, then it is a reptile.", "fol": "all x.(IsIguana(x) -> IsReptile(x))", "prediction": ["all x.((Iguana(x) & Reptile(x)) -> Fish(x))", "all x.((Iguana(x) & Reptile(x)) -> Iguana(x))", "all x.(Iguana(x) -> Reptile(x))", "all x.(Iguana(x) -> Reptile(x))", "all x.((Iguana(x) & Reptile(x)) -> Iguana(x))", "all x.((Iguana(x) & Reptile(x)) -> Iguana(x))", "all x.((Iguana(x) -> Reptile(x))", "all x.((Iguana(x) & Reptile(x)) -> Iguana(x))", "all x.((Iguana(x) & Reptile(x)) -> Iguana(x))", "all x.(Iguana(x) -> Reptile(x))", "all x.((Iguana(x) & Reptile(x)) -> -Iguana(x))", "all x.((Iguana(x) & Reptile(x)) -> Iguana(x))", "all x.(Iguana(x) -> Reptile(x))", "all x.((Iguana(x) & Reptile(x)) -> Iguana(x))", "all x.((Iguana(x) & Reptile(x)) -> Iguana(x))", "all x.(Iguana(x) -> Reptile(x))"]}
{"id": "folio_train_842", "nl": "John is neither an iguana nor a bird.", "fol": "(-IsIguana(John) & -IsBird(John))", "prediction": ["thelennis(John) & -(Iguana(John) | Bird(John)))", "(-Iguana(John) & -Bird(John))", "We are neither iguana nor bird(John)", "-(Iguana(John) | Bird(John))", "-(Iguana(John) | Bird(John))", "(-(Iguana(John) | Bird(John)))", "John -(Iguana(John) | Bird(John))", "(-(Iguana(John) | Bird(John)))", "-(Iguana(John) | Bird(John))", "John is -(Iguana(John) & Bird(John))", "John is -Iguana(John) & -Bird(John))", "(-Iguana(John) & -Bird(John))", "-(Iguana(John) | Bird(John))", "John is neither Iguana(John) nor Bird(John)", "-(Iguana(John) | Bird(John))", "(-isIguana(John) | IsBird(John))"]}
{"id": "folio_train_843", "nl": "John is a reptile.", "fol": "IsReptile(John)", "prediction": ["John is reptile.", "John is reptile.", "all x.(Paint(x) -> (Reptile(x) & John(x)))", "(Reptile(John) & -Reptile(John))", "all x.(Reptile(x) -> John(x))", "John is Reptile(John)", "John is reptile(John)", "(Reptile(John)", "the reptile.", "John is reptile.", "John (Reptile)", "John is reptile.", "all x.(John(x) -> Reptile(x))", "John isReptile(John)", "(Reptile(John) -> Reptile(John))", "John is reptile."]}
{"id": "folio_train_844", "nl": "John is not an iguana and an animal that can fly.", "fol": "(-IsIguana(John) & -CanFly(John))", "prediction": ["John has no iguana(John) & -CanFly(John))", "(-Iguana(John) & CanFly(John))", "(-Iguana(John) & Animal(John) & CanFly(John))", "John isn\u2019tIguana(John) & CanFly(John))", "-(Iguana(John) & CanFly(John))", "(-Iguana(John) & -CanFly(John))", "John, you read that right.", "-(Iguana(John) & CanFly(John))", "John -> (-(Iguana(John) & CanFly(John)))", "John n'est pas iguana(John) & Animal(John) & CanFly(John))", "John, is notIguana(John) & CanFly(John))", "-(Iguana(John) & CanFly(John))", "(-Iguana(John) & -CanFly(John))", "(-Iguana(John) & -CanFly(John))", "the iguana(John) & -CanFly(John))", "-(Iguana(John) & CanFly(John))"]}
{"id": "folio_train_845", "nl": "John is an animal that can fly and a bird.", "fol": "(Animal(John) & CanFly(John) & IsBird(John))", "prediction": ["all x.((Animal(x) & CanFly(x) & Bird(x)) -> Animal(x))", "(exists x.(John(x) & CanFly(x) & Bird(x)))", "(Animal(John) & CanFly(John) & Bird(John))", "all x.((Animal(x) & CanFly(x) & Bird(x)) -> CanFly(x))", "all x y.((Animal(x) & Animal(y) & CanFly(x) & Bird(y)) -> CanFly(x))", "all x.(John(x) -> (Animal(x) & CanFly(x) & Bird(x)))", "(Animal(John) & CanFly(John) & Bird(John))", "(Animal(Jon) & CanFly(John) & Bird(John))", "(Animal(John) & CanFly(John) & Bird(John))", "all x y.((Animal(x) & CanFly(x) & Bird(y)) -> CanFly(x))", "(Animal(John) & CanFly(John)) & Bird(John))", "exists x.(Animal(x) & CanFly(x) & Bird(x))", "all x.(John(x) -> (Animal(x) & CanFly(x) & Bird(x)))", "(Atwood(John) & CanFly(John) & Bird(John))", "(Animal(John) & CanFly(John)) & Bird(John))", "(all x.(John(x) -> CanFly(x)) & all y.(John(y) -> Bird(y)))"]}
{"id": "folio_train_846", "nl": "EndGame is a movie released in 2006.", "fol": "(IsMovie(EndGame) & ReleasedInYear(EndGame,Year2006))", "prediction": ["(Movie(EndGame) & ReleasedIn(EndGame,2006))", "(all x).(EndGame(x) -> ReleasedIn2006(x)))", "(Film(EndGame) & ReleasedIn2006(EndGame))", "(Movie(EndGame) & ReleasedIn2006(EndGame))", "all x.(EndGame(x) -> MovieReleasedIn(x,2006))", "EndGame(n) -> Movie(n))", "(ReleasedIn2006(EndGame) & Movie(EndGame))", "EndGame(TM) -> (Movie(TM) & ReleasedIn2006(TM) & ReleasedIn2006(TM)))", "EndGame (Movie(x) & ReleasedIn2006(x))", "EndGame is a 2006 movie released in.2006.", "(EndGame(EndGame) & Movie(EndGame) & ReleasedIn2006(EndGame))", "(Movie(EndGame) & ReleasedIn2006(EndGameMovie))", "(Movie(EndGame) & ReleasedIn2006(EndGame))", "(EndGame(Endurance) -> ReleasedIn2006(EndGameMovie))", "EndGame(x) -> (MovieReleasedIn2006(x) & ReleasedIn2006(x)))", "(Movie(EdGEOf(EndGame,2006) | ReleasedIn(EndGame,2006)))"]}
{"id": "folio_train_847", "nl": "EndGame was set in Washington.", "fol": "SetInLocation(EndGame,Washington)", "prediction": ["All x.(EndGame(x) -> SetInWashington(x))", "(EndGame(EndGame) & SetInWashington(EndGame))", "EstGameSetIn(EndGame) & SetIn(EndGame(EndGame) & SetIn(EndGame) & SetIn(EndGame))", "(SetIn(EndGame(EndGame) & SetIn(EndGame) & SetIn(EndGame))", "all x.(EndGame(x) -> SetIn(x,Washington))", "Derni\u00e8reEndGame(EndGame) n\u00b01 in Washington.", "The EndGame was set in Washington.", "-SetIn(EndGame,Washington)", "EndGame(end) \u2013 SetIn(end,Washington))", "(EndGame(EndGame) & SetIn(EndGame,Washington))", "Der EndGame(ENGAME) -> SetIn(EndGame,Washington))", "(EndGame(EndCrackedInWashington))", "EndGame(x) -> SetIn(x,Washington))", "EndGame(EndGame). SetIn(EndGame) & Washington(EndGame))", "(EndGame(EndGame) & SetIn(EndGame,Washington))", "EndGame has been set in Washington."]}
{"id": "folio_train_848", "nl": "EndGame was filmed outside of Washington.", "fol": "FilmedOutsideLocation(EndGame,Washington)", "prediction": ["FinalEndurance(EndGame)", "(filmedAroundWashington)", "EndGame was filmed outside Washington.", "All x.(EndGame(x) -> FilmedOutsideOfWashington(x))", "EndGame was filmed outside of Washington.", "all x.(EndGame(x) -> FilmedOutsideOf(x,Washington))", "All x.(EndGame(x) -> FilmedOutsideOfWashington(x))", "(Film OutsideOfWashington(endGame) & OutsideOfWashington(endGame))", "all x.(EndGame(x) -> FilmedOutsideOfWashington(x))", "all x.(EndGame(x) -> FilmedOutsideOfWashington(x))", "all x.(EndGame(x) -> ShotOutsideOfWashington(x))", "the EndGame(e) was filmed outside of Washington(e)", "all x.(EndGame(x) -> FilmedOutside(x,Washington))", "All x.(EndGame(x) -> FilmedOutsideOfWashington(x))", "EndGame was filmed outside of Washington.", "-EndGameFilm(EndGame(EndGame))"]}
{"id": "folio_train_849", "nl": "Some movies are filmed in New York.", "fol": "exists x.FilmedInLocation(x,NewYork)", "prediction": ["exists x.(Movie(x) & FilmedInNewYork(x))", "exists x.(Movie(x) & FilmedInNewYork(x))", "exists x.(Movie(x) & FilmedIn(x,NewYork))", "exists x.(Movie(x) & ShotIn(x,NewYork))", "exists x.(Movie(x) & FilmedIn(x,NewYork))", "exists x.(Movie(x) & FilmedInNewYork(x))", "exists x.(Movie(x) & FilmedIn(x,NewYork))", "exists x.(Movie(x) & FilmedIn(x,NewYork))", "exists x.(Movie(x) & FilmedIn(x,NewYork))", "exists x.(Movie(x) & FilmedInNewYork(x))", "exists x.(Movie(x) & ShotInNewYork(x))", "exists x.(Movie(x) & FilmedIn(x,NewYork))", "exists x.(Movie(x) & FilmedIn(x,NewYork))", "exists x.(Movie(x) & FloatedIn(x,NewYork))", "exists x.(Movie(x) & FilmedIn(x,NewYork))", "exists x.(Movie(x) & FilmedIn(x,NewYork))"]}
{"id": "folio_train_850", "nl": "Andy Chang directed EndGame.", "fol": "DirectedBy(AndyChang,EndGame)", "prediction": ["(DirectedByAndyChang(AndyOfEndGame(Andy))", "(DirectedByAndyChang(And(Android) & EndGame(And))", "Andy Chang directedEndGame(x)", "Andy Chang directedEndGame.", "AndyChang directedEndGame(act,y)", "Andy Chang directedEndGame(x)", "Andy Chang directedEndGame(x)", "Andy Chang directedEndGame(an)", "Andy Chang directed EndGame.", "Andy Chang directedEndGame(n) & In(n,x) & In(n,y))", "AndyChang directedEndGame(x)", "Andy Chang directedEndGame(x)", "Andy Chang directedEndGame(act,e)", "Andy Chang directedEndGame(x)", "Andy Chang directedEndGame(x)", "Andy Chang directedEndGame(x)"]}
{"id": "folio_train_851", "nl": "Andy Chang is from Hong Kong.", "fol": "OriginatesFrom(AndyChang,HongKong)", "prediction": ["Andy Chang is from HongKong.", "Andy Chang, HK.", "Andy Chang (exists x.", "-(Hong Kong(AndyChang) -> HongKong(AndyChang)))", "(HongKong) & AndyChang(CC))", "Andy Chang (HongKong)", "Andy Chang is from Hong Kong.", "Andy Chang (exists x.(ChangJongChang) & HongKong(x)))", "Andy Chang is from HongKong.", "(HongKong) & AndyChang(Chang))", "Andy Chang (StaffInHongKong)", "Andy Chang is from HongKong.", "Andy Chang (HongKong)", "Andy Chang is from Hong Kong.", "(HongKong(AndyChang) & HongKong(AndyChang))", "Andy Chang is from Hong Kong."]}
{"id": "folio_train_852", "nl": "EndGame was filmed in New York.", "fol": "FilmedInLocation(EndGame,NewYork)", "prediction": ["(FilmedInNewYork)", "*EndGame(EndGame) Originally FilmedInNewYork(EndGame))", "EndGame was filmed in New York.", "EndGame (Film(EndGame) | NewYork(EndGame)))", "EndGame was filmed in New York.", "All x.(EndGame(x) -> FilmedInNewYork(x))", "(FilmedInNewYork(EndGame) | FilmedInNewYork(EndGame)))", "is a brand new y.((EndGame(x) & NewYork(y)) -> FilmedIn(x,y))", "(FilmedIn(EndGame) & LocatedIn(EndGame's) NewYork(EndGame))", "All x.(EndGame(x) -> FilmedInNewYork(x))", "Derni\u00e8reMovie(EndGame) -> FilmedInNewYork(EndGame))", "all x.(EndGame(x) -> FilmedInNewYork(x))", "all x.(EndGame(x) -> FilmedInNewYork(x))", "EndGame was filmed in New York.", "EndGame was filmed in New York.", "EndGame was filmed in New York."]}
{"id": "folio_train_853", "nl": "EndGame was not directed by someone from Hong Kong.", "fol": "-exists x.(DirectedBy(x,EndGame) & OriginatesFrom(x,HongKong))", "prediction": ["-HongKongDirectedEndGame(e)", "(LifeNextGame(EndGame) & -HongKong(EndGame))", "EndGame -DirectedByHongKong(EndGame))", "EndGame -HongKongDirected(EndGame))", "EndGame was -DirectedByHongKong.", "Alles x.(EndGame(x) -> -(DirectedBy(x,hongkong) & -DirectedBy(x,hongkong)))", "All x.(EndGame(x) -> -DirectedBy(x,HK))", "all x.(EndGame(x) -> -DirectedByHongKong(x))", "All x.(EndGame(x) -> -directedByHongKong(x))", "the EndGame was notDirectedByHongKong.", "NonDirectedByHongKong(EndGame)", "(-DirectedByHongKong(EndGame))", "(-DirectedByHongKong.)", "All x.(EndGame(x) -> -DirectedByHuongKong(x))", "-(EndGame(EndGame) & -HongKongDirector(EndGame))", "-exists x.(EndGame(x) & -DirectedBy(x,HongKong))"]}
{"id": "folio_train_854", "nl": "All of Andy Chang's movies are filmed outside of Washington.", "fol": "all x.((IsMovie(x) & DirectedBy(AndyChang,x)) -> FilmedOutsideLocation(x,Washington))", "prediction": ["all x.(AdynChang(x) -> FilmsOutsideTheWashington(x))", "all x y z.((Movie(x) & AndyChang(y) & Washington(z)) -> FilmedOutside(y,z))", "all x.((Movie(x) & AndyChang(x)) -> FilmedOutsideOfWashington(x))", "all x.((Movie(x) & AndyChang(x)) -> FilmedOutsideWashington(x))", "all x.((Movie(x) & AndyChang(x)) -> FilmedOutsideOfWashington(x))", "all x.(AndyChangMovie(x) -> FilmedOutside(x))", "all x.((AndyChong(x) & Movie(y)) -> FilmedOutsideOfWashington(x))", "all x.((Movie(x) & AndyChan(x)) -> FilmedOutsideWashington(x))", "all x y.((Movie(x) & AndyChang(y)) -> FilmedOutsideOfWashington(x,y))", "all x.((Movies(x) & AndyChang(x)) -> FilmedOutsideOfWashington(x))", "all x.((AndyChang(x) & Movie(y)) -> ShotOutsideOfWashington(x,y))", "all x.(AndyChangMovie(x) -> FilmedOutsideOfWashington(x))", "all x.((Movie(x) & AndyChang(x)) -> FilmedOutsideWashington(x))", "all x.((Movie(x) & AndyChang(x)) -> FilmedOutside(x))", "all x.(AdynChangMovie(x) -> FilmedAroundWashington(x))", "all x y.((Movie(x) & AndyChang(y)) -> FilmedOutside(x,Washington))"]}
{"id": "folio_train_855", "nl": "Six, seven and eight are real numbers.", "fol": "(IsRealNumber(Six) & IsRealNumber(Seven) & IsRealNumber(Eight))", "prediction": ["the real numbers are (Six(Six) & Seven(Seven) & Eight(Seven))", "all x y.((Six(x) | Seven(y) | Eight(y)) -> RealNumber(x))", "(RealNumbers(Six) & RealNumbers(Seven) & RealNumbers(Eight))", "all x.((Number(x) & (Six(x) | Seven(x) | Eight(x))) -> RealNumber(x))", "(Real(Six) | Real(Seven) | Real(Eight)))", "all x.((Series(x) | #(Series(x) & Number(x))] -> Real(x))", "all x.((Six(x) & Seven(x) & Eight(x)) -> RealNumber(x))", "(RealNumbers(Six,Seven) & RealNumbers(Eight))", "(RealNumber(Six) & RealNumber(Seven) & RealNumber(Eight))", "all x.((RealNumber(x) & Number(x,6)) | Number(x,7) | Number(x,8)))", "(RealNumber(Six) | RealNumber(Seven) | RealNumber(Eight))", "all x.((Six(x) | Seven(x) | Eight(x)) -> RealNum(x))", "(Real(Six) & Real(Seven) & Real(Eight))", "All x y.((Six(x) & Seven(y) & Eight(y)) -> RealNumber(x))", "(No.Challenge(x) | Number(x\"(x\") | Number(x\"(x\") (X\") | Number(x\"))))", "(realnumber(n) & (Six(n) | Seven(n) | Eight(n))))"]}
{"id": "folio_train_856", "nl": "If a real number equals another real number adding one, the first number is larger.", "fol": "all x y.((IsRealNumber(x) & IsRealNumber(y) & EqualsAfterAddingOne(x,y)) -> IsLargerThan(x,y))", "prediction": ["all x.((RealNumber(x) & RealNumber(x) & AddsOne(x)) -> Larger(x))", "all x y.((RealNumber(x) & RealNumber(y) & AddsRealNumber(x,y)) -> Larger(x,y))", "all x y.((RealNumber(x) & RealNumber(y) & AddsNumber(x,y)) -> Larger(x,y))", "all x y.((RealNumber(x) & RealNumber(y) & AddsToDanger(x,y)) -> Larger(x))", "all x.((Tree(x) & AddsNumber(x)) -> Larger(x,1))", "all x y.((RealNumber(x) & RealNumberAddition(y)) -> Larger(x))", "all x.((RealNumber(x) & AddsRealNumber(x)) -> Larger(x))", "all x.((RealNumber(x) & AddsOne(x)) -> Larger(x))", "all x y.((RealNumber(x) & RealNombling(y) & Adds(x,y)) -> Larger(x))", "all x y.((RealNumber(x) & RealNumber(y) & Adds(x,y)) -> Larger(x,y))", "all x.((RealNumber(x) & AddsRealNumber(x)) -> Larger(x))", "all x.(Equals(x,y) -> Adds(x,z))", "all x y.(( RealNumber(x) & RealNumber(y) & AddsNumber(x,y)) -> Larger(y))", "is larger for that number.", "all x.((RealNumber(x) & AddsRealNumber(x,1)) -> Larger(x))", "all x.((RealNumber(x) & RealNumber(x) & AddsOne(x)) -> LargerNumber(x))"]}
{"id": "folio_train_857", "nl": "If the number x is larger than number y, then y is not larger than x.", "fol": "all x y.(IsLargerThan(x,y) -> -IsLargerThan(y,x))", "prediction": ["all x y.((Number(x) & Number(y) & LargerThan(x,y)) -> -LargerThan(y,x))", "all x y.((Number(x,y) & Number(y)) -> -LargerThan(y,x))", "all x y.((Number(x) & Number(y) & LargerThan(x,y)) -> -LargerThan(y,x))", "all x.((Number(x) & LargerThan(x,y)) -> -LargerThan(y))", "all x y.((Number(x) & Number(y)) -> (Larger(x,y) & NotLarger(y,y)))", "all x.((Number(x) & LargerThan(x,y)) -> -LargerThan(y,x))", "all x.((Notion(x) & LargerThan(x,y)) -> -LargerThan(y,x))", "all x y.((Number(x) & Number(y) & LargerThan(x,y)) -> -LargerThan(x,y))", "all x y.((Number(x) & Number(y) & LargerThan(x,y)) -> -LargerThan(y,y))", "all x y.((Number(x) & Number(y) & Larger(x,y)) -> -Larger(y,x))", "all x y.((Number(x) & Number(y)) -> -LargerThan(x,y))", "all x y.((Number(x) & Number(y) & LargerThan(x,y)) -> -LargerThan(y,z))", "all x y.((Number(x) & Number(y) & LargerThan(x,y)) -> -LargerThan(y,x))", "all x.((Number(x) & LargerThanNumber(x,y)) -> -LargerThanNumber(x,y))", "all x y.((Number(x) & Number(y) & LargerThan(x,y)) -> -LargerThan(y,x))", "all x y.((Number(x) & Number(y) & LargerThan(x,y)) -> -LargerThan(y,x))"]}
{"id": "folio_train_858", "nl": "Seven equals six plus one.", "fol": "EqualsAfterAddingOne(Seven,Six)", "prediction": ["all x y.((Seven(x) & SixPlusOne(y)) -> Equals(x,y))", "all x y z.((Seven(x) & Six(y) & One(z)) -> Equals(x,y,z))", "all x.(Seven(x) -> (SixPlusOne(x)))", "(EqualsSixPlusOne))", "all x.(Seven(x) -> SixPlusOne(x))", "all x.((Seven(x) & SixPlusOne(x)) -> Equal(x,y))", "All x.(Seven(x) -> SexPlusOne(x))", "7 = SixPlusOne(Seven)", "all x.(Seven(x) -> EqualsSixPlusOne(x))", "(EqualsSix(Seven) & One(Seven))", "all x.(Seven(x) -> Equals(x,6) & One(x))", "(Seven(Seven) & SixPlusOne(Seven))", "all x.(Seven(x) -> EqualsSixPlusOne(x))", "all x.(EqualsSeven(x) -> PlusOne(x))", "all x y.((Seven(x) & SixPlusOne(y)) -> Equals(x,y))", "(SevenEquals(SixPlusOne))"]}
{"id": "folio_train_859", "nl": "Eight equals seven plus one.", "fol": "EqualsAfterAddingOne(Eight,Seven)", "prediction": ["-EqualsTwoPlusOne(x))", "Occupancy(Of(8) & SevenPlusOne)", "Alleluia8(x) -> SevenPlusOne(x))", "(Equals(eight,seven) & PlusOne(e,seven))", "-(Equal(Eight) & SevenPlusOne(Eight))", "(Equals(Eight(Eight) & Seven(Eight))", "eight equalsSevenPlusOne(x)", "all x.(Eight(x) -> Equals(x,7) & PlusOne(x))", "all x.((EqualsThirteenPlusOne(x)) -> Eight(x))", "all x.(Equals(x,7) & One(x))", "(Equals(Eight,Seven) & PlusOne(Eight))", "all x.(Equals(x,seven) -> Equals(x,one))", "All x.(Equals(x,7) -> PlusOne(x))", "all x.(Equals(x,7) & One(x))", "all x.(EqualsStudy(x,7) -> PlusOne(x,7))", "(Equals(Eight,(Eight,Seven) & One(Eight,1))"]}
{"id": "folio_train_860", "nl": "Two is positive.", "fol": "IsPositive(Two)", "prediction": ["(positive)", "(Positive(Second) & Positive(Sext 2))", "all x.(Two(x) -> Positive(x))", "all x.((Two(x) & Positive(x)) -> Positive(x))", "(Positive(Positive) -> Positive(Positive))", "all x.((Follows(x) & Positive(x)) -> Positive(x))", "(PrincipalIs(II) -> Positive(II))", "(2Positive(x))", "(Positive(two)", "(Positive(Two) -> Positive(Two))", "(All x.(Two(x) -> Positive(x)))", "(Positive(two)", "All x.(Two(x) -> Positive(x))", "all x.(CulturalFactory(x) -> Positive(x))", "(Positive(x) & Positive(x))", "All x.(Two(x) -> Positive(x))"]}
{"id": "folio_train_861", "nl": "If a number is positive, then the double of it is also positive.", "fol": "all x y.((IsPositive(x) & EqualsDoubleOf(y,x)) -> IsPositive(y))", "prediction": ["all x.((Noun(x) & Positive(x)) -> Positive(x))", "all x.((Node(x) & Positive(x)) -> Positive(x))", "all x.(Positive(x) -> DoubleOf(x,x))", "all x.((Numera(x) & Positive(x)) -> Positive(x))", "all x.(Positive(x) -> DoubleOf(x,x))", "all x.(Positive(x) -> DoubleOf(x,x))", "all x.((Number(x) & Positive(x)) -> Positive(x))", "all x.(Positive(x) -> DoubleOf(x,x))", "all x.((Noun(x) & Positive(x)) -> PositiveDoppel(x))", "all x.((Number(x) & Positive(x)) -> PositiveDoppel(x))", "all x.(Positive(x) -> DoubleOf(x))", "all x.((Node(x) & Positive(x)) -> Positive(x))", "all x.(TwoPositiveNumbers(x) -> PositiveNumbers(x))", "all x.((Noun(x) & Positive(x)) -> Positive(x))", "all x.((NoLength(x) & Positive(x)) -> Positive(x))", "all x.(Positive(x) -> DoubleOf(x,y))"]}
{"id": "folio_train_862", "nl": "Eight is the double of four.", "fol": "EqualsDoubleOf(Eight,Four)", "prediction": ["8 is the doubleof4 (double(Eight) & DoubleOf4))", "Eight is aDoubleOfFour(e).", "Eleven (DoubleOfFour(88))", "Eight is the DoubleOfFour(8)", "Eight is the DoubleOfFour(x)", "IsDoubleOfFour(Illumination(Illumination)", "all x.(Eight(x) -> DoubleOfFour(x))", "Eight is the DoubleOfFour(e) -> DoubleOfFour(e))", "8 is doubleOfFour(Eight)", "Eight is the DoubleOfFour(x)", "Seule(Eight) -> DoubleOfFourHands(Eight))", "(SquareOfFour(Eight) -> DoubleOfFour(Eight))", "AllesInEight(e) -> DoubleOfFour(e))", "(DoppelOfFour(Four) & Eight(Four))", "8 is the DoubleOfFour(Eight)", "Eight is a DoubleOfFour(i)"]}
{"id": "folio_train_863", "nl": "Four is the double of two.", "fol": "EqualsDoubleOf(Four,Two)", "prediction": ["all x.((SisterOf(x,2)) -> DoubleOf(x,2))", "all x.(Four(x) -> DoubleOfTwo(x))", "All x.(Four(x) -> DoubleOfTwo(x))", "all x.(Four(x) -> DoubleOfTwo(x))", "the double(Four)", "all x.(Pair(x) -> DoubleOfTwo(x))", "(DoppelOf(Four) -> DoubleOf(Four(Four))", "-DoubleOfTwo(four)", "all x.(Four(x) -> DoubleOfTwo(x))", "All x.(Four(x) -> DoubleOfTwo(x))", "all x.(Four(x) -> DoubleOfTwo(x))", "(DoppelOfTwo(Four(Four) & DoubleOfTwo(Four))", "all x.(Four(x) -> DoubleOfTwo(x))", "Alles x.(Four(x) -> DoubleOfTwo(x))", "all x.(Volet(x) -> DoubleOfTwo(x))", "All x.(Four(x) -> DoubleOfTwo(x))"]}
{"id": "folio_train_864", "nl": "Eight is larger than seven.", "fol": "IsLargerThan(Eight,Seven)", "prediction": ["all x.((Eight(x) & Seven(x)) -> Larger(x))", "all x.((Eight(x) & Seven(x)) -> Larger(x))", "EightIsLargerThan(x,7))", "(LargerThan((Eight) & SmallerThan(Eight))", "(LargerErasure(Eight,4) & Larger(Seven,7))", "(LargerThan(Eight) & LargerThan(Eight))", "all x.((Eight(x) & Seven(x)) -> Larger(x,y))", "(LargerThan(Eight,7))", "All x.((Eight(x) & Seven(x)) -> Larger(x))", "Es ist, dass,Of(8 & PossessedBy(7)).", "(LargerThan(est,8) & SmallerThan(est,7))", "(LargerThan(Eight) & -Each(Eight))", "all x y.((Eight(x) & Seven(y)) -> Larger(x,y))", "(LargerThan(Eight) & FewerThan(Eight))", "all x.(Ave(x) -> LargerThan(x,7))", "exists x.(Eight(x) & LargerThan(x,7))"]}
{"id": "folio_train_865", "nl": "Eight is positive.", "fol": "IsPositive(Eight)", "prediction": ["all x.(Eight(x) -> Positive(x))", "Eleven(x) -> Positive(x))", "All x.(Eight(x) -> Positive(x))", "All x.(Eight(x) -> Positive(x))", "All x.(InChair(x) -> Positive(x))", "All x.(Eight(x) -> Positive(x))", "All x.(Eight(x) -> Positive(x))", "Eighteen(e) -> Positive(e))", "Eight is Positive(x)", "This 8th Day IsPositive(x)", "Eight is Positive(8)", "(Acht(A8) & Positive(A))", "All x.(Eight(x) -> Positive(x))", "Opposition(Eight)", "(PositiveEight(e))", "all x.((Eight(x) & Positive(x)) -> Positive(x))"]}
{"id": "folio_train_866", "nl": "Six is larger than seven.", "fol": "IsLargerThan(Six,Seven)", "prediction": ["All x.(Six(x) -> LargerThan(x,7))", "all x.((Six(x) & -Seven(x)) -> Larger(x))", "All x.(Six(x) -> LargerThanTwo(x))", "all x.(Six(x) -> LargerThan(x,7))", "SechsLargerThanSeven(x)", "-(Larger(six) & Longer(seven))", "all x.((Six(x) & Seven(x)) -> Larger(x))", "exists x.(Six(x) & Larger(x,y))", "Identity(Six) & -Identity(Seven))", "Six(x) -> LargerThanSeven(x))", "isLargerThanSeven(x)", "Seix(x) -> LargerThanSeven(x))", "(LargerThanSeven(Six))", "Length(Six) -> LargerThan(Seven))", "All x.(Six(x) -> LargerThan(x,Seven))", "all x.((Six(x) & Seven(x)) -> LargerThan(x,6))"]}
{"id": "folio_train_867", "nl": "A dog never tells the truth.", "fol": "all x.(IsDog(x) -> AlwaysLies(x))", "prediction": ["all x.(Dog(x) -> NeverTellsTruth(x))", "all x.(Dog(x) -> NeverTellsTruth(x))", "all x y.((Dog(x) & Truth(y)) -> -Tells(x,y))", "all x.(Dog(x) -> \"NeverTellsTruth(x)\")", "all x.(Dog(x) -> -TellsTruth(x))", "all x.(Dog(x) -> NeverTellsTruth(x))", "all x.(Dog(x) -> -TellsTruth(x))", "all x.(Dog(x) -> NeverTellsTruth(x))", "all x.(Dog(x) -> -TellsTruth(x))", "all x.(Dog(x) -> NeverTellsTruth(x))", "all x.(Dog(x) -> -TellsTruth(x))", "all x.(Dog(x) -> -TellsTruth(x))", "all x.(Dog(x) -> -TellsTruth(x))", "all x.(Dog(x) -> NeverTellsTruth(x))", "all x y z.((Dog(x) & Truth(y)) -> NeverTells(x,y))", "all x.(Dog(x) -> -TellsTruth(x))"]}
{"id": "folio_train_868", "nl": "Some poker players are dogs.", "fol": "exists x.(IsPokerPlayer(x) & IsDog(x))", "prediction": ["exists x.(PokerPlayer(x) & Dog(x))", "exists x.(PokerPlayer(x) & Dog(x))", "exists x.(PokerPlayer(x) & Dog(x))", "exists x.(PokerPlayer(x) & Dog(x))", "exists x.(PokerPlayer(x) & Dog(x))", "exists x.(PokerPlayer(x) & Dog(x))", "exists x.(PokerPlayer(x) & Dog(x))", "exists x.(PokerPlayer(x) & Dog(x))", "exists x.(PokerPlayer(x) & Dog(x))", "exists x.(PokerPlayer(x) & Dog(x))", "exists x.(PokerPlayer(x) & Dog(x))", "exists x.(PokerPlayer(x) & Dog(x))", "exists x.(PokerPlayer(x) & Dog(x))", "exists x.(PokerPlayer(x) & Dog(x))", "exists x.(Player(x) & Dog(x))", "exists x.(PokerPlayer(x) & Dog(x))"]}
{"id": "folio_train_869", "nl": "Some poker players never tell the truth.", "fol": "exists x.(IsPokerPlayer(x) & AlwaysLies(x))", "prediction": ["exists x.(PokerPlayer(x) & -TellTruth(x))", "exists x y.(PokerPlayer(x) & PokerPlayer(y) & -TellsTruth(x,y))", "exists x.(PokerPlayer(x) & -TellsTruth(x))", "exists x.(PokerPlayer(x) & -TellsTruth(x))", "exists x.(PokerPlayer(x) & -TellsTruth(x))", "exists x.(PokerPlayer(x) & -TellTheTruth(x))", "exists x.(PokerPlayer(x) & -TellsTruth(x))", "exists x.(PokerPlayer(x) & -TellTruth(x))", "exists x.(PokerPlayer(x) & -TellsTruth(x))", "exists x.(Player(x) & -TellsTruth(x))", "exists x.(PokerPlayer(x) & -TellsTruth(x))", "exists x.(PokerPlayer(x) & -TellTruth(x))", "exists x.(PokerPlayer(x) & -TellsTruth(x))", "exists x.(Player(x) & -TellFalseTruth(x))", "exists x.(PokerPlayer(x) & -TellTruth(x))", "exists x.(PokerPlayer(x) & -TellsTruth(x))"]}
{"id": "folio_train_870", "nl": "All Asians are human. ", "fol": "all x.(IsAsian(x) -> IsHuman(x))", "prediction": ["all x.(Asian(x) -> Human(x))", "all x.(Asian(x) -> Human(x))", "all x.(Asian(x) -> Human(x))", "all x.(Asian(x) -> Human(x))", "all x.(Asian(x) -> Human(x))", "all x.(Asian(x) -> Human(x))", "all x.(Asian(x) -> Human(x))", "all x.(Asian(x) -> Human(x))", "all x.(Asian(x) -> Human(x))", "all x.(Asian(x) -> Human(x))", "all x.(Asian(x) -> Human(x))", "all x.(Asian(x) -> Human(x))", "all x.(Asian(x) -> Human(x))", "all x.(Asian(x) -> Human(x))", "all x.(Asian(x) -> Human(x))", "all x.(Asian(x) -> Human(x))"]}
{"id": "folio_train_871", "nl": "All Chinese are Asian.", "fol": "all x.(IsChinese(x) -> IsAsian(x))", "prediction": ["all x.(Chinese(x) -> Asian(x))", "all x.(China(x) -> Asian(x))", "all x.(Chinese(x) -> Asian(x))", "all x.(Chinese(x) -> Asian(x))", "all x.(Chinese(x) -> Asian(x))", "all x.(Chinese(x) -> Asian(x))", "all x.(Chinese(x) -> Asian(x))", "all x.(Chinese(x) -> Asian(x))", "all x.(Chinese(x) -> Asian(x))", "(All x.(Circan(x) -> Asian(x))", "All x.(Chinese(x) -> Asian(x))", "all x.(Chinese(x) -> Asian(x))", "all x.(Chinese(x) -> Asian(x))", "all x.(Chinese(x) -> Asian(x))", "all x.(China(x) -> Asian(x))", "all x.(Chinese(x) -> Asian(x))"]}
{"id": "folio_train_872", "nl": "A man is either Chinese or British.", "fol": "all x.(IsChinese(x) | IsBritish(x))", "prediction": ["all x.(Man(x) -> (Chinese(x) | British(x)))", "all x.(Man(x) -> (Chinese(x) | British(x)))", "all x.(Man(x) -> (Chinese(x) | British(x)))", "all x.(Man(x) -> (Chinese(x) | British(x)))", "exists x.(Man(x) & (Chinese(x) | British(x)))", "all x.(Men(x) -> (Chinese(x) | British(x)))", "all x.(Man(x) -> (Chinese(x) | British(x)))", "all x.(Man(x) -> (China(x) | British(x)))", "all x.(Man(x) ->(Chinese(x) | British(x)))", "all x.(Man(x) -> (Chinese(x) | British(x)))", "all x.(Man(x) -> (Chinese(x) | British(x)))", "all x.(Man(x) -> (Chinese(x) | British(x)))", "all x.(Man(x) -> (Chinese(x) | British(x)))", "all x.(Man(x) -> (Chinesic(x) | British(x)))", "all x.(Man(x) -> (Chinese(x) | British(x)))", "all x.(Man(x) -> (Chinese(x) | British(x)))"]}
{"id": "folio_train_873", "nl": "All British are European. ", "fol": "all x.(IsBritish(x) -> IsEuropean(x))", "prediction": ["all x.(British(x) -> European(x))", "all x.(British(x) -> European(x))", "all x.((British(x) & European(x)) -> British(x))", "all x.(British(x) -> European(x))", "all x.(British(x) -> European(x))", "all x.(British(x) -> European(x))", "all x.(British(x) -> European(x))", "all x.(British(x) -> European(x))", "all x.(British(x) -> European(x))", "all x.(British(x) -> European(x))", "all x.(British(x) -> European(x))", "all x.(British(x) -> European(x))", "all x.(British(x) -> European(x))", "all x.(British(x) -> European(x))", "all x.(British(x) -> European(x))", "all x.(British(x) -> European(x))"]}
{"id": "folio_train_874", "nl": "All Spanish are European. ", "fol": "all x.(IsSpanish(x) -> IsEuropean(x))", "prediction": ["all x.(Spanish(x) -> European(x))", "all x.(Spanish(x) -> European(x))", "all x.(Spanish(x) -> European(x))", "all x.(Spanish(x) -> European(x))", "all x.(Spanish(x) -> European(x))", "all x.(Spanish(x) -> European(x))", "all x.(Spanish(x) -> European(x))", "all x.(Spanish(x) -> European(x))", "all x.(Spanish(x) -> European(x))", "all x.(Spanish(x) -> European(x))", "all x.(Spanish(x) -> European(x))", "exists x.(Spanish(x) & European(x))", "all x.(Spanish(x) -> European(x))", "all x.(Spanish(x) -> European(x))", "all x.(Spanish(x) -> European(x))", "all x.(Spanish(x) -> European(x))"]}
{"id": "folio_train_875", "nl": "No Indian is European. ", "fol": "all x.(IsIndian(x) -> -IsEuropean(x))", "prediction": ["-exists x.(Individual(x) & European(x))", "-exists x.(Indian(x) & European(x))", "-exists x.(Indian(x) & European(x))", "-exists x.(Indien(x) & European(x))", "-exists x.(Indian(x) & European(x))", "-exists x.(Indian(x) & European(x))", "-exists x.(Indian(x) & European(x))", "-exists x.(Indian(x) & European(x))", "KeenIndian(x) & European(x))", "-exists x.(Individual(x) & European(x))", "-exists x.(Indian(x) & European(x))", "-exists x.(Indian(x) & European(x))", "-exists x.(Indien(x) & European(x))", "-exists x.(Indian(x) & European(x))", "-exists x.(Individual(x) & European(x))", "KeenIndian(x) -> European(x))"]}
{"id": "folio_train_876", "nl": "Jessee is either both an Indian and a human, or neither an Indian nor a human.", "fol": "((IsIndian(Jesse) & IsHuman(Jesse) & -(-IsIndian(Jesse) & -IsHuman(Jesse))) | (-(IsIndian(Jesse) & IsHuman(Jesse)) & -IsIndian(Jesse) & -IsHuman(Jesse)))", "prediction": ["(all x y.((Jessee(x) & Indian(y)) -> Human(y)) | (-Indian(x) & Human(y))))", "all x.(Jessee(x) -> ((Individual(x) & Human(x)) | (-Individual(x) & Human(x)))))", "all x.(Jessee(x) -> ((Indian(x) & Human(x)) | -Indian(x) & Human(x)))", "all x.(Jessee(x) -> ((Individual(x) & Human(x)) | (-Individual(x) & Human(x))))", "(-(Individual(Jessee) & Human(Jessee)) | (-Individual(Jessee) & Human(Jessee))))", "all x.(Jessee(x) -> ((Indian(x) & Human(x)) | (-Indian(x) & Human(x)))))", "(-(Indian(Jessee) & Human(Jessee)) & -(Indian(Jessee) & Human(Jessee))) -> (Individual(Jessee) | (Homo sapiens(Jessee) & Man(Jessee)))))", "all x.(Jessee(x) -> ((Indian(x) & Human(x)) | (-Indian(x) & Human(x)))))", "all x.(Jessee(x) -> ((Indian(x) & Human(x)) | -Indian(x) & Human(x)))", "all x.(Jessee(x) -> (Indian(x) | Human(x)) | (-Indian(x) & Human(x))))", "all x.(Jessee(x) -> ((Indian(x) & Human(x)) | (-Indian(x) & Human(x)))))", "((Jessee(Jessee) & Indian(Jessee)) | (-Jennifer(Jessee) & Indian(Jessee))))", "((Jessee) | (Individual(Jessee) & Human(Jessee))) | (-Indian(Jessee) & Human(Jessee))))", "all x.(Jesse(x) -> ((Indian(x) & Human(x)) | (-Indian(x) & Human(x)))))", "all x.(Jessee(x) -> ((Indian(x) & Human(x)) | (-Indian(x) & Human(x)))))", "exists x.(Jessee(x) & ((Indian(x) & Human(x)) | -Indian(x) & Human(x))))"]}
{"id": "folio_train_877", "nl": "Jesse is Chinese.", "fol": "IsChinese(Jesse)", "prediction": ["Jesse is Chinese.", "Jesse is Chinese.", "Jesse is Chinese.", "Jesse is Chinese.", "Jesse is Chinese.", "Jesse is Chinese.", "Jesse is Chinese.", "all x.(Jesse(x) -> Chinese(x))", "Jesse is Chinese.", "Jesse is Chinese.", "Jesse is Chinese.", "All x.(Jesse(x) -> Chinese(x))", "Jesse is Chinese.", "Jesse (Cheese)", "Jesse is Chinese.", "Jesse is Chinese."]}
{"id": "folio_train_878", "nl": "Jesse is not Chinese.", "fol": "-IsChinese(Jesse)", "prediction": ["(-Chinese(Jesse))", "-Chinese(Jesse)", "-Chinese(Jesse)", "Jesse ist nichtChang ry.", "-Chinese(Jesse)", "(-Chinese(Jesse) & -LiuJesse(Jesse))", "\u2013 Chinese.", "(-Chinese(Jesse)!", "-China(Jesse)", "(-Chinese(Jesse))", "-Chinese(Jesse)", "is -Chinese(Jesse)", "Jesse & -Chinese(Jesse)", "Jesse is notChinese(Jesse)", "-Chinese(Jesse)", "Jesse is notChinese(j)"]}
{"id": "folio_train_879", "nl": "If Jesse is either an Indian or a Spanish, then Jesse is either both British and European, or neither British nor European.", "fol": "((IsIndian(Jesse) | IsSpanish(Jesse)) -> ((IsBritish(Jesse) & IsEuropean(Jesse)) | (-IsBritish(Jesse) & -IsEuropean(Jesse))))", "prediction": ["all x.(Indian(x) | Spanish(x)) -> (British(x) & European(x)) | -British(x) & European(x)))", "all x.((Jesse(x) & (Indian(x) | Spanish(x))) | (British(x) & European(x)) | (-British(x) & European(x)))))", "all x.((Jesse(x) & Indian(x)) | Spanish(x)) -> ((British(x) & -European(x)) | -British(x) & -European(x))))", "(English(Jesse) | Spanish(Jesse)) -> (( British(Jesse) & European(Jesse)) | -British(Jesse) & European(Jesse))))", "all x.((Jesse(x) & (Indian(x) | Spanish(x))) -> ((British(x) & European(x)) | (-British(x) & European(x)))))", "all x.((Indian(x) | Spanish(x)) -> ((British(x) & European(x)) | -(British(x) & European(x))))", "all x.((Jesse(x) & (Indian(x) | Spanish(x))) -> (British(x) | European(x)))", "all x.((Jesse(x) & (Indian(x) | Spanish(x))) -> (British(x) & European(x)) | -British(x) & European(x)))", "all x.((Jesse(x) & (Indien(x) | Spanish(x))) -> ((British(x) & European(x)) | (-British(x) & European(x))))", "all x.((Anglican(x) | Spanish(x)) -> (British(x) & European(x)) | (-British(x) & European(x))))", "all x.((Jesse(x) & (Individual(x) | Spanish(x))) -> (British(x) | British(x) | European(x) | (-British(x) | European(x)))))", "all x.((Jesse(x) & (Indian(x) | Spanish(x))) -> ((British(x) & European(x)) | (-British(x) & European(x)))))", "all x.((Jesse(x) & Indian(x) | Spanish(x)) -> (British(x) | European(x)))", "all x.((Jesse(x) & (Individual(x) | Spanish(x))) -> ((British(x) & European(x)) | -British(x) & European(x))))", "all x.((Jesse(x) & (Indian(x) | Spanish(x))) -> (British(x) & European(x) | -British(x) & European(x)))", "all x.((IsIndividual(x) | IsSpanish(x)) -> (British(x) | British(x) | -British(x) | European(x)))"]}
{"id": "folio_train_880", "nl": "No people who never admit a mistake are good teachers.", "fol": "all x.(NeverAdmitsMistakes(x) -> -IsGoodTeacher(x))", "prediction": ["-exists x.((Person(x) & NeverAcceptsMistake(x)) -> GoodTeacher(x))", "-exists x.((Person(x) & Don'tAcknowledgeMistake(x)) -> GoodTeacher(x))", "all x.((Person(x) & -AnnouncesMistake(x)) -> GoodTeacher(x))", "-exists x.((Person(x) & AdmitsMistake(x) & -GoodTeacher(x)))", "all x.((Person(x) & NeverAccedesMistake(x)) -> GoodTeacher(x))", "-all x.((Person(x) & -AcceptAgreement(x)) -> GoodTeacher(x))", "-exists x.((Person(x) & -AcknowledgesMistake(x) & NeverAssertsMistake(x)) -> GoodTeacher(x))", "all x.((Person(x) & NeverAcknowledgesMistake(x)) -> GoodTeacher(x))", "all x.((Person(x) & NeverAdmitsMistake(x)) -> GoodTeacher(x))", "-exists x.((Person(x) & NeverAcknowledgesMistake(x)) -> GoodTeacher(x))", "-exists x.((Person(x) & AdmitsMistake(x)) -> GoodTeacher(x))", "all x.((People(x) & NeverAcceptsMistake(x)) -> GoodTeachers(x))", "all x.((Person(x) & NeverAcceptsMistake(x)) -> GoodTeacher(x))", "all x.((Person(x) & NeverAccuseMistake(x)) -> GoodTeacher(x))", "-exists x.(NoPerson(x) & -AccedesToMistake(x))", "-all x.((Person(x) & -AcceptsMistake(x)) -> GoodTeacher(x))"]}
{"id": "folio_train_881", "nl": "Some well-informed people are people who never admit a mistake.", "fol": "exists x.(IsWellInformed(x) & NeverAdmitsMistakes(x))", "prediction": ["exists x.(WellInformed(x) -> -AcknowledgeMistake(x))", "exists x.(WellInformed(x) & -AcknowledgesMistake(x))", "exists x.(WellInformed(x) & -AcceptMistake(x))", "exists x.(WellInformedPerson(x) & -AcceptsMistake(x))", "exists x.(WellInformed(x) -> (People(x) & -Accept(x)))", "exists x.(WellInformedPerson(x) & -AcceptsMistake(x))", "exists x.(WellInformed(x) & -AcceptMistake(x))", "exists x.(WellInformed(x) & -AcceptMistake(x))", "exists x.(WellInformed(x) & (-AcceptMistake(x) | -AcceptMistake(x)))", "exists x.(WellInformed(x) & -AcceptMistake(x))", "exists x.(WellInformed(x) & -AcceptsMistake(x))", "exists x.(WellInformed(x) & -AcceptsMistake(x))", "exists x.(WellInformed(x) & -AcceptMistake(x))", "exists x.(WellInformed(x) & -AcceptsMistake(x))", "exists x.(WellInformed(x) & -AcknowledgesMistake(x))", "exists x.(WellInformedPopular(x) & -AcceptMistake(x))"]}
{"id": "folio_train_882", "nl": "Some good teachers are not well-informed people.", "fol": "exists x.(IsGoodTeacher(x) & -IsWellInformed(x))", "prediction": ["exists x.(GoodTeacher(x) & -WellInformed(x))", "exists x.(GoodTeacher(x) & -WellInformed(x))", "exists x.(GoodTeacher(x) & -WellInformedPeople(x))", "exists x.(GoodTeacher(x) & -WellInformed(x))", "exists x.(GiftTeacher(x) & -WellInformed(x))", "exists x.(MoreGoodTeachers(x) & -WellInformedPeople(x))", "exists x.(GoodTeacher(x) & -WellInformedPeople(x))", "exists x.(GoodTeacher(x) & -WellInformedPerson(x))", "exists x.(Teacher(x) & -WellInformed(x))", "exists x.(GoodTeacher(x) & -WellInformed(x))", "exists x.(GoodTeacher(x) & -WellInformed(x))", "exists x.(GoodTeacher(x) & -WellInformed(x))", "exists x.(GoodTeacher(x) & -WellInformed(x))", "exists x.(GoodTeacher(x) & -WellInformed(x))", "exists x.(GoodTeacher(x) & -WellInformed(x))", "exists x.(GoodTeacher(x) & -WellInformed(x))"]}
{"id": "folio_train_883", "nl": "Philatelic literature is divided into the following categories: Stamp catalogues, Periodicals, Auction catalogues, Books, Bibliographies, and Background Material", "fol": "all x.(IsPhilatelicLiterature(x) -> (IsStampCatalogue(x) | IsPeriodical(x) | IsAuctionCatalogue(x) | IsBook(x) | IsBibliography(x) | IsBackgroundMaterial(x)))", "prediction": ["all x.(PhilatelicLiterature(x) -> (StampCodes(x) | Periodicals(x) | AuctionCatalogs(x) | Books(x) | Bibliographies(x) | BackgroundMaterial(x)))", "all x.(PhilatelicLiterature(x) -> (StampCatalogue(x) | PeriodicalCatalog(x) | AuctionCatalog(x) | Books(x) | Bibliography(x) | BackgroundMaterial(x)))", "all x.(PhilatelicLiterature(x) -> (StampCatalogs(x) | Periodicals(x) | AuctionCatalogs(x)))", "all x y z w.((PaperPhatelicLiterature(x) & StampCatalogue(y) & Periodical(z) & AuctionCatalogue(w) & Books(w) & Bibliographies(w) & BackgroundMaterial(w)) -> SeparatedIntoCatalogs(x,y,z,w))", "(all x.(StampCatalog(x) | PeriodicalCatalog(x) | AuctionCatalog(x))) & (Book(x) | Bibliographie(x) | BackgroundMaterial(x)))", "all x.(PhilatelicLiterature(x) -> (Categories(x,StampCatalogs) | Periodicals(x) | AuctionCatalogs(x))) | Categories(x,Books) | Categories(x,Biblicals) | BackgroundMaterial(x)))", "all x.(PhilatelicLiterature(x) -> (Category(x,StampCatalogues) | Category(x,Periodicals) | Category(x,AuctionCatalogues)) | Category(x,Books) | Category(x,Biography) | Category(x,BackgroundMaterials)))", "all x.(PhilatelicLiterary(x) -> (StampCatalogs(x) | Periodicals(x) | AuctionCatalogs(x) | Books(x) | Bibliographies(x) | BackgroundMaterial(x)))", "all x.(PhilatelicLiterature(x) -> (StampCatalogues(x) | Periodicals(x) | AuctionCatalogues(x) | Books(x) | Bibliographies(x) | BackgroundMaterial(x)))", "(all x.(PhilatelicLiterature(x) -> StampCatalog(x)) & all y.(PeriodicsCatalog(y) & AuctionCatalog(y) & BooksCatalog(x,y) & all z.(Biblical(z) & BackgroundMaterial(z)) -> BackgroundMaterial(x,z))))", "all x.(PhilatelicLiterature(x) -> (Category(x) & StampCatalogs(x) & Periodicals(x) & AuctionCatalogs(x) & Books(x) & Bibliographies(x) & BackgroundMaterial(x)))", "all x.(PhilatelicLiterary(x) -> (StampCatalogs(x) | Periodicals(x) | AuctionCatalogs(x) | Books(x) | Bibliographies(x) | BackgroundMaterial(x)))", "all x.(PhilatelicLiterature(x) -> (StampCatalog(x) | PeriodicalsCatalogue(x) | AuctionCatalog(x)) | Books(x) | Bibliographies(x) | BackgroundMaterial(x)))", "all x.(PhilatelicLiterature(x) -> (StampCatalog(x) | Periodical(x) | AuctionCatalog(x) | Books(x) | Bibliographies(x) | BackgroundMaterial(x)))", "all x.(PhilatelicLiterature(x) -> (StampCatalogs(x) | Periodicals(x) | AuctionCatalogs(x) | Books(x) | Bibliographies(x) | BackgroundMaterial(x)))", "all x y z.((PhilatelicLiterature(x) & StampCatalog(y) | Periodical(y) | AuctionCatalog(y) | Books(z) | Bibliographies(z) | BackgroundMaterial(z))) -> (Category(x,y) & Category(x,z)))"]}
{"id": "folio_train_884", "nl": "Mort is not a Stamp catalogue.", "fol": "-IsStampCatalogue(Mort)", "prediction": ["-StampCatalog(Mort)", "-StampCatalog(Mort))", "Mort is not StampCatalogue(Mort)", "Mort - StampCatalog(Molt,Cast))", "(-StampCatalog(Mort))", "Mort is not StampCatalog(Mort)", "-StampCatalog(Mort)", "Mort is not StampCatalog(Mort)", "Mort is not StampCatalog(Mort)", "all x.(Mort(x) -> -StampCatalog(x))", "Mort -StampCatalog(Mort))", "(StampCatalog(Mort) & -StampCatalog(Mort))", "Mort is not StampCatalog(Molt)", "-StampCatalog(Mort,Local_Mort)", "Mort & StampCatalogFactory-Only(Molt)", "-StampCatalog(Mot)"]}
{"id": "folio_train_885", "nl": "Mort is not a periodical, auction catalogue, bibliography, or background material.", "fol": "-(IsPeriodical(Mort) | IsAuctionCatalogue(Mort) | IsBibliography(Mort) | IsBackgroundMaterial(Mort))", "prediction": ["all x.(Molt(x) -> (-(Periodical(x) | AuctionCatalog(x) | Bibliography(x) | BackgroundMaterial(x))))", "(Present(Mort) & -(Periodic(Mort) | AuctionCatalog(Mort)) | Bibliography(Mort) | BackgroundMaterial(Mort)))", "all x.( Mort(x) -> (-Periodical(x) | AuctionCatalog(x) | Bibliography(x) | BackgroundMaterial(x)))", "all x.(Mort(x) -> (-Periodical(x) & -AuctionCatalog(x) & -Biblical(x) & -BackgroundMaterial(x)))", "(-(Periodical(x) | AuctionCatalog(x) | Bibliography(x) | BackgroundMaterial(x)))", "all x.(Mort(x) -> (-Periodical(x) & -AuctionCatalog(x) &-Biblical(x) &-BackgroundMaterial(x)))", "as a Mort(m) & -(Periodical(m) | AuctionCatalog(m) | Bibliography(m) | BackgroundMaterial(m)))", "all x.(Mort(x) -> (-(Periodical(x) | AuctionCatalog(x) | Bibliography(x) | BackgroundMaterial(x))))", "All x.(Mort(x) -> (-Periodical(x) | AuctionCatalog(x) | Bibliography(x) | BackgroundMaterial(x)))", "all x.(Mort(x) -> (-Periodical(x) | AuctionCatalog(x) | Bibliography(x) | BackgroundMaterial(x)))", "all x.(Motern(x) -> (-Periodical(x) & -AuctionCatalog(x) & -Bibliographical(x) & -BackgroundMaterial(x)))", "all x.(Mort(x) -> (-Periodical(x) | AuctionCatalog(x) | Biography(x) | BackgroundMaterial(x)))", "(-Periodic(mo) | AuctionCatalog(mo) | Bibliography(mo) | BackgroundMaterial(mo)))", "all x.(Mot(x) -> (-Periodical(x) & -AuctionCatalog(x) & -Biography(x) & -BackgroundMaterial(x)))", "all x.(Mort(x) -> (-Periodical(x) | AuctionCatalog(x) | Bibliography(x) | BackgroundMaterial(x)))", "all x.(Mort(x) -> (-Periodical(x) | AuctionCatalog(x) | Bibliography(x) | BackgroundMaterial(x)))"]}
{"id": "folio_train_886", "nl": "Mort is a piece of Philatelic literature.", "fol": "IsPhilatelicLiterature(Mort)", "prediction": ["all x.(Mort(x) -> PhilatelicLiterature(x))", "all x y.((Mort(x) & PhilatelicLiterature(y)) -> PieceOf(x,y))", "all x.(Mort(x) -> PhilatelicLiterature(x))", "all x.(Matt(x) -> PhilatelicLiterary(x))", "all x.(Mort(x) -> PhilatelicLiterary(x))", "all x.(Mort(x) -> PhilatelicLiterature(x))", "exists x.(Film(x) & Mort(x) & PhilatelicLiterature(x))", "Mort is a piece of PhilatelicLiterature(mort)", "all x.(Molt(x) -> PhilatelicLiterature(x))", "all x.(Mort(x) -> PhilatelicLiterature(x))", "Mort is a piece of Philatelicliterature.", "Mort is a piece of PhilatelicLiterature(mortem)", "all x.(Mort(x) -> PhilatelicLiterature(x))", "Mort is a piece of PhilatelicLiterary(Mort)", "all x.(Molt(x) -> PhilatelicLiterature(x))", "all x.(Most(x) -> PhilatelicLiterature(x))"]}
{"id": "folio_train_887", "nl": "Mort is a book", "fol": "IsBook(Mort)", "prediction": ["all x.((Tomor(x) & Book(x)) -> Book(x))", "All x.(Mart(x) -> Book(x))", "Mort is a Book(monster) & Book(mor) & Book(mort) & Book(mort,mort))", "(Book(Mud) & Book(Molt))", "Mort is a book.", "all x.(Mort(x) -> Book(x))", "Mort is a Book(Moment) & Book(Mort) & Book(Mort) & Book(Mort))", "(Book(Moral) & Book(Mort))", "all x.(Mort(x) -> Book(x))", "all x.((Mort(x) & Book(x)) -> Book(x))", "all x.(Mort(x) -> Book(x))", "-(Book(Mot) & Book(Mot))", "all x.(Mort(x) -> Book(x))", "all x.((Mot(x) & Book(x)) -> Book(x))", "all x.(Mort(x) -> Book(x))", "-((Book(Most) & Book(Most)) -> Book(Most,Book,Book,Book))"]}
{"id": "folio_train_888", "nl": "Mort is background material.", "fol": "IsBackgroundMaterial(Mort)", "prediction": ["Mort is backgroundmaterial.", "Mort(Morton) & BackgroundMaterial(Mod))", "all x.(Most(x) -> BackgroundMaterial(x))", "Mort is backgroundmaterial.", "(Background(Mort) & Solid(Mort))", "Mort is BackgroundMaterial(Mostron)", "Mort(TM) [/Material(TM))", "all x.(Mort(x) -> BackgroundMaterial(x))", "(BackgroundMaterial(Morton) & -BackgroundMaterial(Morton))", "all x.(Molt(x) -> BackgroundMaterial(x))", "(BackgroundMaterial(mt) & -BackgroundMaterial(mt))", "Mort is backgroundmaterial.", "Mort is background material.", "Mort is backgroundmaterial.", "Mort is background material.", "Mort is backgroundmaterial."]}
{"id": "folio_train_889", "nl": "Eragon is a piece of Philatelic literature.", "fol": "IsPhilatelicLiterature(Eragon)", "prediction": ["Eragon is a piece of PhilatelicLiterature(Eragon)", "Eragon (PieceOfPhilatelicLiterature(Eragon))", "Eragon is a piece of PhilatelicLiterature(EpilocatelicLanguage(Eragon))", "Eragon is a piece of PhilatelicLiterature.", "Eragon (PieceOfPhilatelicLiterature)", "all x.(Eragon(x) -> (PhilatelicLiterature(x) & Throughout(x,Phoenic)))", "Eragon (philatelicLiterature(Eragon))", "all x.(Eragon(x) -> PhilatelicLiterature(x))", "all x.(Eragon(x) -> PhilatelicLiterary(x))", "(PieceOfPhilatelicLiterature(Eragon))", "Eragon is a piece of PhilatelicLiterature.", "all x.(Eragon(x) -> PhilatelicLiterature(x))", "Esagon is a piece of PhilatelicLiterature.", "all x.(Eeragon(x) -> PhilatelicLiterature(x))", "Eragon is the product of PhilatelicLiterature(Eragon)", "(PieceOfPhilatelicLiterature(Eragon))"]}
{"id": "folio_train_890", "nl": "Adventures of Rusty is a drama film and children's film.", "fol": "(IsDramaFilm(Adventuresofrusty) & IsChildrensFilm(Adventuresofrusty))", "prediction": ["(DomesticFilm(AdventuresOfRusty(d) | ChildrensFilm(d)))", "AdventuresOfRusty(x) -> (DramaFilm(x) & ChildrenFilm(x)))", "all x.(Adventure(x) -> (DramaFilm(x) & ChildrenFilm(x)))", "AdventuresOfRusty.com (DramaFilm,WildlifeFilm) & ChildrensFilm(x))", "AdventuresOfRusty(x) -> (DramaFilm(x) & ChildrensFilm(x)))", "AdventuresOfRusty (adventure(x) & DramaFilm(x) & ChildrensFilm(x))", "AdventuresOfRusty.com IsDramaFilmAndChildren'sFilm(IsDramaFilm(IsDramaFilm(Is(Is(Is(Is(Is)) & IsAnimalFilm(Is(Is))", "All x y.((AdventuresOfRusty(x) & DramaFilm(y) & ChildrensFilm(x)) -> AdventuresOfRusty(x,y))", "all x.(AdventuresOfRosty(x) -> (DramaFilm(x) & ChildrensFilm(x)))", "all x.(AdventureOfRusty(x) -> (DramaFilm(x) & ChildrensFilm(x)))", "all x y.((Adventure(x) & Rusty(y)) -> (DramaFilm(x) & ChildrensFilm(x)))", "all x.(RussinAdventure(x) -> (DemandOfRusty(x) & DramaFilm(x) & ChildrenFilm(x)))", "(AdventuresOfRusty(Adventure) & DramaFilm(Adventure) & ChildrensFilm(Adventure))", "AdventuresOfRusty(x) \u2013 (Movie(x) & Drama(x) & Childrens(x)))", "(AdventuresOfRusty(Adventure) & DramaFilm(Adventure) & ChildrensFilm(Adventure))", "AdventuresOfRusty(x) -> (DramaFilm(x) & ChildrenFilm(x)))"]}
{"id": "folio_train_891", "nl": "Columbia Pictures produced Adventures of Rusty", "fol": "ProducedBy(Columbiapictures,Adventuresofrusty)", "prediction": ["Columbia Pictures produced AdventuresOfRusty(ColumbiaPictures)", "exists x,y,z w.(ColumbiaPictures(x) & AdventuresOfRusty(y) & ColumbiaPhotographs(z) & ProducedBy(z,w))", "all x y.((Columbia Pictures(x) & Rusty(y)) -> KnownAdventure(x,y))", "(ProducedByColumbiaPictures(ColumbiaPictures) & AdventuresOfRusty(ColumbiaPictures) & RomanceRoutiny(ColumbiaPictures))", "Columbia Pictures produced AdventuresOfRusty(ColumbiaPictures,Routty) d.o.(Photograph(i) & ConstructedBy(i,x)))", "All x y z.((ColumbiaPictures(x) & Rusty(y) & AdventuresOf(z)) -> Produced(x,y))", "all x.(ColumbiaPictures(x) -> (RealityAdventuresOfRusty(x) & ColumbiaPictures(x)))", "all x y.((ColumbusPictures(x) & AdventuresOfRusty(y)) -> ProducedByColumbiaPictures(x,y))", "All x y z w.((ColumbiaPicture(x) & AdventuresOfRusty(y) & Rusty(z)) -> ProducedBy(x,y,z))", "Rusty by Rusty(CampbellPictures) - (ProducedByColumbiaPictures(ColumbiaPictures) & AdventuresOfRusty(ColumbiaPictures)))", "all x y.((ColumbusPictures(x) & Rusty(y)) -> ProducedAdventure(x,y))", "Columbia Pictures produced AdventuresOfRusty(CBS)", "All x y.((ColumbiaPixel(x) & RustyAbuse(y)) -> ProducedByColumbusArtworks(x,y))", "(ProducedByColumbia Pictures(ColumbiaPixel) & AdventuresOfRusty(ColumbiaPixel))", "(All x.(ColumbiaPicture(x) -> AdventuresOfRusty(x)))", "All x y z.((ColumbiaPictures(x) & AdventuresOfRusty(y) & Rusty(z)) -> ProducedBy(x,y,z))"]}
{"id": "folio_train_892", "nl": "Tintin was produced by Paramount.", "fol": "ProducedBy(Paramount,Tintin)", "prediction": ["all x.(Tintin(x) -> Paramount(x))", "(ProducedByParallelNews(Tintin))", "Paramount Produced(Tintin,1998)", "(ProducedBy(Tintin) & Paramount(Tintin))", "(producedByParamount)", "Originally from Paramount.", "(ProducedByParamount(Tintin)", "(ProducedByParamount(Tintin))", "Tartin was produced by Paramount.", "(ProducedByParamount(Tintin))", "(ProducedByParamount(Tintin))", "(ProducedByParamountTintin)", "Erasmus Tintin(x) -> ProducedByParamount(x))", "(ProducedByParamount(Tintin) & BornByParamount(Tintin))", "Tintin was produced by Paramount.", "Tartin was produced by Paramount."]}
{"id": "folio_train_893", "nl": "Tintin is an adventure film.", "fol": "IsAdventureFilm(Tintin)", "prediction": ["Tintin(Tintin) est un AdventureFilm(Tintin))", "Tintin is an adventure film.", "Tintin has AdventureFilm.", "Tintin is AdventureFilm(tic))", "Tintin (AdventureFilm(Tintin))", "Tintin FilmedAdventure(tin))", "All x.(Tintin(x) -> AdventureFilm(x))", "Tintin (AdventureFilm)", "Tintin is AdventureFilm(Tintin,Film,Arcade)", "Tintin is an adventure film.", "Tintin is AdventureFilm(tin) & Movie(tin))", "Tintin is adventure film.", "Tintin is AdventureFilm(t)", "Tintin is an adventure film.", "Tintin is an adventure film.", "Tintin is AdventureFilm(t)"]}
{"id": "folio_train_894", "nl": "Columbia pictures produces drama films.", "fol": "exists x.(ProducedBy(Columbiapictures,x) & IsDramaFilm(x))", "prediction": ["all x.(ColumbusPicture(x) -> ProducesDramaFilms(x))", "all x y.((ColumbiaPictures(x) & DramaFilm(y)) -> Produces(x,y))", "all x.(ColumbiaPictures(x) -> ProducesDramaFilms(x))", "all x.(Columbia(x) -> ProducesDramaFilms(x))", "all x.(ColumbiaPictures(x) -> ProducesDramaFilms(x))", "all x.(ColumbiaPictures(x) -> ProducesDramaFilms(x))", "all x.(ColumbiaPictures(x) -> ProducesDramaFilms(x))", "all x.(ColumbianPictures(x) -> ProducesDramaticFilms(x))", "all x.(ColumbusPhotography(x) -> ProducesDramaFilms(x))", "all x.(ColumbusPictures(x) -> ProducesDramaFilms(x))", "all x.(ColumbiaPrimary(x) -> ProducesDramafilms(x))", "all x.(Columbus(x) -> ProducesDramaFilms(x))", "all x y.((ColumbiaPictures(x) & DramaFilm(y)) -> Produces(x,y))", "all x y.((ColumbiaPictures(x) & DramaFilm(y)) -> Produces(x,y))", "all x.(ColumbiaPictures(x) -> ProducesDramaFilms(x))", "all x y.((ColumbiaPhotograph(x) & DramaFilm(y)) -> Produces(x,y))"]}
{"id": "folio_train_895", "nl": "Columbia pictures produces adventure films.", "fol": "exists x.(ProducedBy(Columbiapictures,x) & IsAdventureFilm(x))", "prediction": ["all x.(ColoradoPictures(x) -> ProducesAdventureFilms(x))", "all x.(ColumbiaPictures(x) -> ProducesAdventureFilms(x))", "all x.(ColumbiaPictures(x) -> ProducesAdventureFilms(x))", "all x y.((ColumbusPictures(x) & AdventureFilm(y)) -> Produce(x,y))", "all x.(ColumbiaPictures(x) -> ProducesAdventureFilms(x))", "all x y.((Columbia(x) & Columbia(y)) -> ProducesAdventureFilms(x,y))", "all x.(ColumbiaPictures(x) -> ProducesAdventureFilms(x))", "all x y.((ColumbiaPixel(x) & AdventureFilm(y)) -> Produces(x,y))", "all x y z.((ColumbiaPicture(x) & AdventureFilm(y) & Columbia(z)) -> Produces(x,y))", "all x.(ColumbusPictures(x) -> ProducesAdventureFilms(x))", "all x y z.((Columbia(x) & Picture(y) & AdventureFilm(z)) -> Produces(x,y))", "all x y.((ColumbiaPictures(x) & AdventureFilm(y)) -> Produces(x,y))", "all x y.((ColumbiaPictures(x) & AdventureFilm(y)) -> Produces(x,y))", "all x.(ColumbiaPictures(x) -> ProducesAdventureFilms(x))", "all x y.((ColumbiaPictures(x) & AdventureFilm(y)) -> Produces(x,y))", "all x.(ColombiaPictures(x) -> ProducesAdventureFilms(x))"]}
{"id": "folio_train_896", "nl": "Paramount produces children's films.", "fol": "exists x.(ProducedBy(Paramount,x) & IsChildrensFilm(x))", "prediction": ["all x y.((Paramount(x) & ChildrenFilm(y)) -> Produces(x,y))", "all x.(Pathmount(x) -> ProducesChildren'sFilm(x))", "all x.(Paramount(x) -> ProducesCircleFilms(x))", "all x y z.((Paramount(x) & Film(y) & Child(z)) -> Produces(x,y,z))", "all x y z.((Paramount(x) & Childrens(y) & Film(z)) -> Produces(x,y))", "all x.(Paramount(x) -> ProducesChildrensFilms(x))", "all x y.((Paramount(x) & Child(y)) -> Produces(x,y))", "all x.(Paramount(x) -> ProducesChildrensFiction(x))", "all x y.((Paramount(x) & ChildrensFilm(y)) -> Produces(x,y))", "all x.(Paramount(x) -> ProducesChildrenFilms(x))", "Paramount produces childrensFilms(Paramount,ChildrenFilm)", "all x.(Paramount(x) -> ProducesChildrensFilm(x))", "all x.(Paramount(x) -> ProducesChildrensFilm(x))", "all x y.((Paramount(x) & Child(y)) -> Produces(x,y))", "all x y.((Paramount(x) & Child(y)) -> ProducesFilm(x,y))", "Paramount produces childrensfilms."]}
{"id": "folio_train_897", "nl": "Paramount produces adventure films.", "fol": "exists x.(ProducedBy(Paramount,x) & IsAdventureFilm(x))", "prediction": ["exists x y.((Paramount(x) & AdventureFilm(y)) -> Produces(x,y))", "all x.(Paramount(x) -> ProducesAdventureFilms(x))", "\"PastParamountProducesAdventureFilms(Paramount)", "all x y.((Paramount(x) & AdventureFilm(y)) -> Produces(x,y))", "all x.(Paramount(x) -> ProducesAdventureFilms(x))", "all x y.((Paramount(x) & AdventureFilm(y)) -> Produces(x,y))", "Paramount produces adventure film(paramount)", "all x.(Paramount(x) -> ProducesAdventureFilms(x))", "Paramount ProducesAdventureFilms(Paramount)", "Paramount produces adventure films.", "Paramount produces AdventureFilms(paramount)", "Paramount produces adventure films.", "Paramount ProducesAdventureFilms(Paramount).", "Paramount produces AdventureFilms(Paramount)", "Paramount produces AdventureFilms(Paramount)", "all x.(Paramount(x) -> ProducesAdventureFilm(x))"]}
{"id": "folio_train_898", "nl": "Deng Xiaoping served as the paramount leader of the People's Republic of China (PRC). ", "fol": "ServedAsParamountLeader(Dengxiaoping,Prc)", "prediction": ["Deng Xiaoping served as the paramount leader of the PeoplesRepublicOfChina(X).", "Deng Xiaoping served as the SupremeLeaderOfPRC(x))", "DengXiaoping served as the paramountleaderOfPRC (PeoplesRepublicOrCity))", "Deng Xiaoping served as the 'InsularLeader(x)'.", "DengXiaoping served as the SupremeLeaderLimit(x) (PeoplesRepublicOfChina(x) & FirstInIsland(x)))", "DengXiaoping served as the SupremeLeaderOfPRC.", "DengXiaoping served as the SupremeLeaderOfPRC(x))", "DerengXiaoping diente als Supr\u00eameLeaderAtPRC(x)).", "Diem Xiaoping(x) & PrimalLeader(x),PRC)", "DengXiaoping served as the supremelylarLeaderState(x,PRC)", "DengXiaoping served as the supreme leader of PeoplesRepublicOfChina (PRC))", "DengXiaoping served as a paramountleaderSection ofPRC.", "(SecondsConsultant(DengXiaoping) -> SupremeLeader(DengXiaoping))", "DengXiaoping served as the ThriveChangeLeader(x) & PeoplesRepublic(x))", "All x.((DengXiaoping(x) & PeoplesRepublicOfChina(x)) -> PrimalLeader(x))", "Yenxuan Xiaoping served as the paramountLeaderOf(x,y) & PeoplesRepublicOfChinese(y,z))"]}
{"id": "folio_train_899", "nl": "Deng Xiaoping was praised for his reaffirmation of the reform program in his Southern Tour of 1992 as well as the reversion of Hong Kong to Chinese control in 1997 and the return of Macau in 1999.", "fol": "(PraisedForAchievements(Dengxiaoping,Reaffirmationofreformprogram) & PraisedForAchievements(Dengxiaoping,Reversionofhongkong) & PraisedForAchievements(Dengxiaoping,Returnofmacau))", "prediction": ["all x y.((DengXiaoping(x) & SouthernTour(y) & SouthernTour(l) & HongKongReversion(x,y) & ChinaControlReversion(y)) -> ExpiredFor(x,y))", "all x.((DengXiaoping(x) & SouthernTour(x,1982) & ReversionToChineseControl(x,1997) & ReturnOfMacau(x,1998)) -> Plauded(x))", "all x.((DengXiaoping(x) & SouthernTour(x, 1992) & Reversion(x,1997) & Return(x,99)) -> Plauded(x))", "((BogothianSummerTour(DongJiaoping) & SouthernTour(DongJiaoping)) & RenewedChineseControlIn1997) & RenewedMacauIn99))", "(All x.((DengXiaoping,SouthernTours(x) & SouthernTours(y) & HongkongControl(y) & SubscriptionToCheap(y)) -> PlaudedForReaffirmationOfReformProgram(x,y)) & ReversionToChineseControl(x,y) & ReturnToMacau(x,y)))", "(all x.((SouthernTouring(x) & SouthernTours(x,1997)) -> (Praised(x,y) & RevertedToChineseControl(x,y))))", "(ProudFor(GiangXiaoping) & ReaffirmationOfReformProgramInsulatedIn(Xiaoping,SouthernTour,92) & ReversionOfHongKongToChineseControl(HongKong) & ReversionOfMacau(Mau)))", "all x y.((DengXiaoping(x) & SouthernTour(y)) -> (ReaffirmationOfReformProgram(x,y) & ReversionToChineseControl(y,1997) & ReturnToMacau(x,y,1998)))", "DengXiaoping was praised for the reform project he reaffirms.", "\"(DengXiaoping) & SouthernTime(1992) & Reversion(HongKong,1997) & Return(Macau,99)) -> PraisedFor(MeNinn-MeNinn))", "all x.((ReaffirmationOfProgram(x) & SouthernTours(x) & MandarinControl(x) & ChinaControl(x) & MacauControl(x)) -> Precise(x))", "(Wallitnesses ForDengXiaoping(x) & RenewedReformProgram(x,1992) & RevertedToChineseControl(x,1997) & RevertedToMacau(x,1999))", "all x.((DengXiaoping(x) & SouthernTour(x,1992) & SingaporeToChineseControl(x,1997) & MacauToRegion(x,1999)) -> Plauded(x))", "all x.((DengXiaoping(x) & SouthernTour(x,1997) & ChingChineseControl(x,1997) & ReturnOfMacau(x,1998)) -> Praised(x))", "all x y.((DengXiaoping(x) & SouthernTour(y) & RevertedToChineseControlIn1997)(x,y) & ReturnedToMacau(y,z)) -> PraisedForReaffirmationOfReform(x,y))", "(PraisedFor(DengXiaoping,SouthernTour, 1992) & RevertedToChineseControl(HongKong,1997) & BeenReturnedToMacau(Malay,1999))"]}
{"id": "folio_train_900", "nl": "As the party's Secretary-General under Mao and Vice Premier in he 1950s, Deng Xiaoping presided over the Anti-Rightist Campaign launched by Mao.", "fol": "(ServedAsPartysSecretaryGeneral(Dengxiaoping) & UnderLeadershipOf(Dengxiaoping,Mao) & ServedAsVicePremier(Dengxiaoping) & PresidedOverCampaign(Dengxiaoping,Antirightistcampaign) & CampaignLaunchedBy(Antirightistcampaign,Mao))", "prediction": ["Als Secr\u00e9taireGeneral(s) bei Mao,VicePremier(s) & InSecond G\u00e9n\u00e9rale(s) & UnderMao(s) & VicePremierInSeventyOne(s)) PresidedOverAntiRightistCampaign(s))", "In the 1950s as Secretary-General Under Mao and Vice Premier Amongst Minority(Diversity) DengXiaoping presided over the AntiRightistCampaign LaunchedByMao.", "(SecretaryGeneral of Party under Mao & Vice PremierInHistory(DengXiaoping,50,(D) & CampaignAgainstRightists(D)))", "(SecretaryGeneralUnder(mao) & VicePremier(-mao) & AdministratorIn(y,t) & 1950s(m)))", "(SecretaryGeneral(Mao) & VicePrime Minister(mao) in 1950s. DengXiaoping(x))", "DengXiaoping presided over anAntiRightistCampaign(x). 'SecretaryGeneralUnderMao(x) & VicePremierInThe50s(x) & Mao(x) & VicePremierInthe50s(x))", "((SecretaryGeneral(Mao) & Vice Premier(Mao)) & General(Mao) & Vice Premier(Mao)) -> PresidedOverAntiRightistCampaign(Mao))", "(SecretaryGeneral(Benedict Mao,1950) & VicePremier(Pioneers,1950) & DefendedAntiRightistCampaignByMao1960))", "During the 1950s, when mao joined the Communist Party, Deng Xiaoping presided over AntiRightistCampaign.", "(SecretaryGeneral(Mao), VicePremier(Mao) & Minister-General(Mao) & VicePremierIn50s) & DengXiaoping(Mao))", "(,ChiefGeneral(Mao) & VicePremier(Mao) & 1960s(Vip) & AntiRightistCampaign(Mao))", "All x y z.((Party Secretary-General(x) & MaoInTheFuture(x,y) & VicePrime Minister(y,z)) -> PresidedOverAntiRightistCampaign(x))", "(Secr\u00e9taireGeneralUnder(Mao) & VicePremierInHis50s(DengXiaoping) presidedOverAntiRightistCampaign(Dentai Ming))", "Als SecretaryGeneral(Challenge(c) & UnderMao(c) & VicePremier(c) & 1950s(d) & AntiRightistCampaign(a))", "(SecretaryGeneral(Mao) & VicePrime Minister (Mao) & VicePremier(Mao) & 50s(Mao)) & DengXiaoping(Mao) -> PresidedOverAntiRightistCampaign(Mao))", "(SecretaryGeneral(Mao) & VicePremier(Mao) & 1950s(Mao) & VicePremier(Mao)) & PresidedOverAntiRightistCampaign(Mao))"]}
{"id": "folio_train_901", "nl": "Deng Xiaoping became instrumental in China's economic reconstruction following the disastrous Great Leap Forward (1958\u20131960).", "fol": "(InstrumentalInEconomicReconstruction(Dengxiaoping,Chinaseconomicreconstruction) & FollowingEvent(Chinaseconomicreconstruction,Greatleapforward) & CharacterizedAsDisastrous(Greatleapforward))", "prediction": ["(IllustrativeInReconstruction(DengXiaoping) & GreatLeapFront(China,58) & GreatLeapProgress(China,1960))", "(InternationalEconomicReconstruction(DengXiaoping) afterGreatLeapForward(D) & 1958-1960(D))", "All x y.((Consultant(x) & GreatLeapForward(y) & -GreatLeapForward(z) & GreatLeapForward(z)) -> InstrumentalInReconstruction(x))", "Deng Xiaoping, c.((China's GreatLeapForward(c) & -GreatLeapForward(c))) -> InstrumentalInReconstruction(d))", "Deng Xiaoping became instrumental in China's economic reconstruction (1996), following the disastrous GreatLeapForward(2008,58) & Reconstruction(2006,6)))", "Dervishly(DengXiaoping) uvred & InstrumentalInReconstruction(DengXiaoping,GreatLeapFront(Dask & GreatLeap(d)) -> Politics(dengxiaoping,d))", "(InfluencialInChemicalReconstruction(DengXiaoping) & GreatLeapForward(GreatLeapForward(Dramatic) & GreatLeapForward(Dramatic))", "During GreatLeapForward(CheapWorth(Changhai,2005) & FollowingGreatLeapForward(Changhai,2005))", "(IllustrativeIn ChinasEconomicReconstruction(DengXiaoping) & GreatLeapForward(Lan58-Lan60))", "all x y.((DengXiaoping(x) & GreatLeapForward(y)) -> (InfluentialInChina'sReconstruction(x,y) & DevelopedLastThemselves(x,y)))", "(Membership(DengXiaoping): In China's EconomicReconstructionAfterDiagonalGreatLeapForward(DangerWorthFebruary(DangerWordForward(DangerWordForwardWord(d)))", "(-IllustrativeIn China'sEconomicReconstruction(-DazedGreatLeapForward(-Deadful1958-SixtyYears(-DazedReconstruction(-DazedReconstruction(-DazedReconstruction(-DazedReconstruction(Dazed-GreatLeapForward)(-Dazed))))", "DergXiaoping -GiantIndirectInCompany(x) & GreatLeapForward(x,58) & GreatLeapForward(x,60))", "(InternationalInstrumentalInReconstruction(DengXiaoping) & GreatLeapForward(Years,58) & GreatLeapForward(Years,1960))", "(WelcomeToChina((DengXiaoping) & GreatLeapForward(Disaster(DengXiaoping)) -> ImportantInReconstruction(DengXiaoping))", "Eventually, Deng Xiaoping became instrumental in China's economic reconstruction following the disastrous GreatLeapForward(58,1960))"]}
{"id": "folio_train_902", "nl": "Mao Zedong died in 1976.", "fol": "DiedInYear(Mao,Y1976)", "prediction": ["(MaoZedongDead(Mao) -> DeathIn 1976))", "(DeadMap(MaoZedong) | TookFilm(MaoZedong,Significance, 1976))", "Mao Zedong died in 1976.", "Mao Zedong (exists x.(MarshDong(x) & Death(x)))", "Mao Zedong (DiedInSecond(x,1996))", "Mao Zedong (exists x.(Dead(x) & Death(x,1976)))", "MaoZedong(x),DisturbedTen(x, 1976)", "Mao Zedong died in 1976 \u0440\u043e\u0440\u0430\u043c\u043c\u0430\u0442 \u0438 \u0430\u043e\u0442\u043e\u043c \u043d\u0435\u043e\u043b\u043e\u0435\u043d\u043d\u043e.", "(Death(mao) & Zedong(m))", "all x.(MaoZedong(x) -> Died(x,6))", "DiedIn(MaoZedong) - 1976.", "Mao Zedong died in 1976.", "MaoZedong (Mao, 1976)", "(2004): Mao Zedong(x) & DiedIn(x,76))", "Mao Zedong died in 1976.", "In 1976, Mao Zedong died."]}
{"id": "folio_train_903", "nl": "After Mao Zedong's death, Deng Xiaoping gradually rose to supreme power.", "fol": "GraduallyRoseToPower(Dengxiaoping,Supremepower)", "prediction": ["A few years after MaoZedongsDeath, DengXiaoping rose to supremepower.", "(InauguralDeath(DengXiaoping,MaoZedong) -> IncreasingSupremePower(DengXiaoping))", "Nachdem MaoZedongsDeath(d) & DengXiaoping(y) roseToSupremePower(y))", "All x.((DengXiaoping(x) & MaoZedongDown(x)) -> RapidlyRosesToSupremePower(x))", "DerngXiaoping rose to supremepower.", "(MaoZedongDisaster(x) & DengXiaopingRosesToPotentialPower(x))", "Nach Mao ZedongsDeath, DengXiaoping ascended to SufficientPower.", "all x.((DengXiaoping(x) & MaoZedong(x)) -> RosedToPower(x))", "Nach MaoZedong(m) death, DengXiaoping gradually rose to supremepower(x))", "Nach MaoZedongsDeath, DengXiaoping gradually rose to supremepower.", "DengXiaoping rose to supremepower after MaoZedong's death.", "all x.((AsMaoEdongDeath(x) & DengXiaoping(x)) -> SufficientPower(x))", "(Colored(MaoZedong) & DengXiaoping(Dang))", "Nach MaoZedongsDisaster, DengXiaoping rose to supremepower.", "Nach MaoZedongsDeath, DengXiaoping raped to SupremePower, mainly because of the health of the infant.", "-(MamoZedong(Mao) died(e) & DengXiaoping(x))"]}
{"id": "folio_train_904", "nl": "The paramount leader of the PRC was also the vice premier.", "fol": "exists x.(ServedAsParamountLeader(x,Prc) & ServedAsVicePremier(x))", "prediction": ["all x.(SecondaryPrimeMinister(x) -> VicePrimier(x))", "[VicePrimier((EclipseLeader(Empires) & PRC)]", "all x.((SecurityLeader(x) & VicePremier(x)) -> Premier(x))", "all x y.((PRC(x) & FounderChair(y)) -> VicePremier(x,y))", "all x.(VicePremier(x) -> CeylonLeader(x))", "all x.(VicePremier(x) -> PrimoPremier(x))", "all x.(SecondestLider(x,p) -> VicePremier(x))", "all x y z.(((SeniorPresident(x) & VicePremier(y)) -> ((SeniorPresident(x) & VicePrimary(y))))", "Moreover, he is also the vice-premier(x)", "all x.(Principal(x) -> (SurprisingPrincipal(x) & VicePrincipal(x)))", "all x.(VicePremier(x,p) -> SupremeLiderFoundationPRC(x))", "Besides the paramountleaders of PRC,VPLimit(r) & VicePrimary(r) & -VitoriesMinister(r))", "(VicePremier)", "all x.((SecondaryPrimier(x) & VicePremier(x)) -> SupremeLeader(x))", "all x y.((Fernando(x) & PRC(y) & VicePremier(x,y)) -> MostEqual(x,y))", "all x.((Principal(x) & Vulnerable(x)) -> AmongPRCStandards(x))"]}
{"id": "folio_train_905", "nl": "Deng Xiaoping presided over something launched by someone he was under.", "fol": "exists x y.(PresidedOverCampaign(Dengxiaoping,x) & CampaignLaunchedBy(x,y) & UnderLeadershipOf(Dengxiaoping,y))", "prediction": ["DengXiaoping presided over something launchedbyPeter(x) & ManUnder(x))", "(presided overthing(DungXiaoping) & Under(DungXiaoping))", "all x y z.((DengXiaoping(x) & Person(y) & Under(z)) -> PresidedOver(x,y,z))", "DengXiaoping pr\u00e9sided over something launchedBy(x,y) & Under(y))", "DengXiaoping presided over something launchedBySomeoneHeWeetUnder(x)", "During his reign Deng Xiaoping presided over a launch by someone he wasUnder.", "(DengXiaoping) -> PresidedOver(DANGXiaoping))", "DengXiaoping presided over something launchedByAnother(x)", "(PractisesOffnet((Deng Xiaoping))", "all x y.((DengXiaoping(x) & Person(y)) -> PresidedOver(x,y))", "DengXiaoping presided over something launchedByLiquidation(x),oddly,at&(x) & Under(x))", "DengXiaoping v.(OrGaveUp(x) & LaunchedBy(x,y))", "all x y z.((DengXiaoping(x) & Project(y) & Person(z) & Under(y)) -> PresidedOver(x,y,z))", "(PresidedOver(deng,x) & HeHeBelongsUnder(deng,x))", "DengXiaoping presided over something launchedby someone he wasUnder.", "DengXiaoping presided over a launch from someone he wasUnder."]}
{"id": "folio_train_906", "nl": "The person instrumental in china's economic reconstruction gradually rose to supreme power.", "fol": "exists x.(InstrumentalInEconomicReconstruction(x,Chinaseconomicreconstruction) & GraduallyRoseToPower(x,Supremepower))", "prediction": ["all x y.((PersonalInfluentInReconstruction(x,y) & China) & InChineseEconomicReconstruction(y,2)) -> SufficientPower(x,y))", "all x y.((Person(x) & CreatingWiretainmentReconstruction(x,y) & InChineseEconomicReconstruction(x)) -> RisesToSupremePower(x))", "all x y.((Person(x) & ImplementalInChinasEconomicReconstruction(x) & EmbracedInChina(y)) -> SufficientPower(x,y))", "all x y z.((Person(x) & EconomicReconstruction(y) & ImperialPower(z)) -> ProportionallyRaisedTo(x,y,z))", "all x y z.((Person(x) & EconomicReconstruction(y) & ChineseReconstruction(z) & ImperialPower(y)) -> ProgresslyRisesTo(x,y,z))", "all x.(InstrumentalInChineseEconomicReconstruction(x) -> ProgressivelyRisenToSUpremacy(x))", "all x y.((Person(x) & InputInChinasEconomicReconstruction(x) & StimultaneouslyRosesToSupremePower(x,y)) -> InputInChinasEconomicReconstruction(y,x))", "all x.((Person(x) & InstrumentalInChineseEconomicReconstruction(x)) -> (RiseToSuperiorPower(x)))", "all x.((Person(x) & InstrumentalInChineseEconomicReconstruction(x)) -> SuprettyPower(x))", "all x.(InfluentialPerson(x) -> ProgressiveInsulationInChineseEconomicReconstruction(x))", "all x.((Person(x) & InstrumentalInChineseEconomicReconstruction(x)) -> EventuallyRisesToSupremePower(x))", "all x y.((InstrumentalInChinasEconomicReconstruction(x) & People(y)) -> SufficientPower(x,y,z))", "all x y.((Personal(x) & InstrumentalInChinasEconomicReconstruction(x,y) & ProgressivePotential(y)) -> Supremacy(x))", "all x y.((Person(x) & InstrumentorInChinasEconomicReconstruction(x)) -> SupremiumPower(x,y))", "all x y.((Instrumentary(x) & EconomicReconstruction(y)) -> Rose toSupremePower(x,y))", "all x y.((Person(x) & InstrumentalInChinasEconomicReconstruction(x,y)) -> Supr\u00eamePower(y))"]}
{"id": "folio_train_907", "nl": "All imaginative processes are produced in human brains.", "fol": "all x.(ImaginativeProcess(x) -> ProducedInHumanBrains(x))", "prediction": ["all x.(ImaginativeProcess(x) -> ProducedInHumanBrains(x))", "all x y.((ImaginativeProcess(x) & HumanBody(y)) -> ProducedIn(x,y))", "all x.(ImaginativeProcess(x) -> ProducedInHumanBrains(x))", "all x.(ImaginationalProcess(x) -> ProducedInHumanBrain(x))", "all x.(ImaginativeProcess(x) -> ProducedInHumanBrain(x))", "all x.(ImaginativeProcess(x) -> (ProducedInHumanBrain(x)))", "all x.(ImaginativeProcess(x) -> ProducedInHumanBrain(x))", "all x.(ImaginativeProcess(x) -> ProducedInHumanBrain(x))", "all x.(ImaginativeProcess(x) -> ProducedInHumanBrain(x))", "all x.(ImaginativeProcess(x) -> ProducedInHumanBrains(x))", "all x y.((ImaginativeProcess(x) & HumanBrain(y)) -> ProductedIn(x,y))", "all x.(ImaginativeProcess(x) -> ProducedInHumanBrain(x))", "all x.(ImaginativeProcess(x) -> ProducedInHumanBrains(x))", "all x y z.((ImaginativeProcess(x) & HumanBrain(y) & Brain(z)) -> ProducedIn(x,y,z))", "all x.(ImaginativeProcess(x) -> ProducedInHumanBrains(x))", "all x.(ImaginativeProcesses(x) -> ProducedInHumanBrains(x))"]}
{"id": "folio_train_908", "nl": "All science-fiction is from an imaginative process.", "fol": "all x.(ScienceFiction(x) -> ImaginativeProcess(x))", "prediction": ["all x.(ScienceFiction(x) -> It'sImaginativeProcess(x))", "all x.(ScientificFiction(x) -> AnImaginativeProcess(x))", "all x.(ScienceFiction(x) -> InnovativeProcess(x))", "all x.(ScienceFiction(x) -> (ImaginativeProcess(x) & From(x,y)))", "all x.(ScienceFiction(x) -> ImagesImaginativeProcess(x))", "all x.(ScienceFiction(x) -> FromImaginativeProcess(x))", "all x.(ScienceFiction(x) -> Idea-BasedProcess(x))", "all x.(ScienceFiction(x) -> FromImaginativeProcess(x))", "all x.(ScienceFiction(x) -> FromImaginativeProcess(x))", "all x.(ScienceFiction(x) -> FromImaginativeProcess(x))", "all x.(ScienceFiction(x) -> InnovativeProcess(x))", "all x.(ScienceFilm(x) -> ImaginativeProcess(x))", "all x.(ScienceFiction(x) -> IsNarrativeProcess(x))", "all x.(ScienceFiction(x) -> ImaginativeProcess(x))", "all x.(ScienceFiction(x) -> FromImaginativeProcess(x))", "all x.(ScienceFiction(x) -> FromImaginativeProcess(x))"]}
{"id": "folio_train_909", "nl": "Either science-fiction or fact. ", "fol": "all x.(ScienceFiction(x) | Fact(x))", "prediction": ["EitherscienceFiction or Fact.", "(ScienceFiction(science) | Fact(science))", "(ScienceFiction(Scientific(Scientific) | Fact(Scientific(Scientific)))", "exists x.(ScienceFiction(x) | Fiction(x))", "(ScienceFiction(science) | Fact(science))", "exists x.(ScienceFiction(x) | Factual(x))", "(ScienceFiction(Science) | Fact(Science))", "exists x.(ScienceFiction(x) | Fact(x))", "(ScientificFiction(ScientificFiction) | Fact(Fact))", "all x.(ScienceFiction(x) | Factual(x))", "exists x.(ScientificFiction(x) | Fact(x))", "exists x.(ScienceFiction(x) | Fact(x))", "all x.(ScientificFiction(x) | Fact(x))", "(ScienceFiction(a) | Fact(b))", "all x.(ScientificFiction(x) | Fact(x))", "exists x.(ScienceFiction(x) | Fact(x))"]}
{"id": "folio_train_910", "nl": "No facts are proven to be false.", "fol": "all x.(Fact(x) -> -ProvenToBeFalse(x))", "prediction": ["all x.(Fact(x) -> -ProvedFalse(x))", "-exists x.(Fact(x) & False(x))", "all x.(Fact(x) -> -ProvenFalse(x))", "-exists x.(Fact(x) & ProvenFalse(x))", "-exists x.(Fact(x) & ProvenToBeFalse(x))", "all x.(Fact(x) -> -ProvenFalse(x))", "all x.(Fact(x) -> -ProvenFalse(x))", "-exists x.(Fact(x) & Prove(x,False))", "-exists x.(Fact(x) & ProvenFalse(x))", "-exists x.(Fact(x) & ProvenForFalse(x))", "-exists x.(Fact(x) & False(x))", "exists x.(Fact(x) & -ProvenFalse(x))", "Keine factuation n=False(n)", "-exists x.(Fact(x) & LieTenant(x))", "-exists x.(Fact(x) & ProvenFalse(x))", "-exists x.(Fact(x) & ProvenFalse(x))"]}
{"id": "folio_train_911", "nl": "Dune is a science-fiction or proven to be false.", "fol": "(ScienceFiction(Dune) | ProvenToBeFalse(Dune))", "prediction": ["all x.(Dune(x) -> (ScientificFiction(x) | provenToBeFalse(x)))", "all x.((Dune(x) & (ScienceFiction(x) | ProvenTrue(x))) -> ScienceFiction(x))", "all x.(Dune(x) -> (ScienceFiction(x) | ProvenToBeFalse(x)))", "exists x.(Dune(x) & (ScientificFiction(x) | ProvenToBeFalse(x)))", "all x.(Dune(x) -> (ScientificFiction(x) | ProvedToBeFalse(x)))", "all x.(Dune(x) -> (ScienceFiction(x) | ProvenTrue(x)))", "all x.(Dune(x) -> (ScienceFilm(x) | ProvenFalse(x)))", "(ScienceFiction(Dune) | ProvenFire(Dune)))", "Dune (a.ScientificFiction(d) & (False(d) -> Dune)))", "all x.(Dune(x) -> (ScientificFiction(x) | ProvenToBeFalse(x)))", "all x.(Dune(x) -> (ScienceFiction(x) | False(x)))", "all x.(Dune(x) -> (ScienceFiction(x) | False(x)))", "all x.(Dune(x) -> (ScienceFiction(x) | ProvenToBeFalse(x)))", "exists x.(Dune(x) & (ScienceFiction(x) | ProvenToBeFalse(x)))", "all x.(Dune(x) -> (ScienceFiction(x) | ProvenFalse(x)))", "exists x.(Dune(x) & ScienceFiction(x) & (ProvenToBeFalse(x) | -ProvenToBeFalse(x)))"]}
{"id": "folio_train_912", "nl": "Dune is a fact.", "fol": "Fact(Dune)", "prediction": ["Dune is a Factual(Dune)", "Dune is a fact.", "Dune is a Factual(Dune,x)", "Dune is a Fact.", "Dune is Factual(Dune)", "Dune isFactual(n) & exists y.(Dune(y) & Factual(n)) & exists z.(Dune(z) & Factual(w))))", "Dune, however, is a fact.", "Dune is Factual(dune,dune)", "Dune is fact.", "Dune is Factual(Dane)", "Dune is a fact.", "exists x.(Dune(x) & Fake(x))", "Dune is Fact.", "-Fakt(Dune)", "Dune (factual)", "Dune is a Fact."]}
{"id": "folio_train_913", "nl": "Dune is produced in human brains and is an imaginative process.", "fol": "(ProducedInHumanBrains(Dune) & ImaginativeProcess(Dune))", "prediction": ["all x.(Dune(x) -> (ProducedInHumanBrain(x) & ImaginativeProcess(x)))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) & ImaginativeProcess(x)))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) & ImaginativeProcess(x)))", "All x.(Dune(x) -> (ProducedInHumanBrains(x) & ImaginativeProcess(x)))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) & ImaginativeProcess(x)))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) & ImageryProcess(x)))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) & ImaginativeProcedure(x)))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) & Illumination(x)))", "all x.(Dune(x) -> (ProducedInHumanBody(x) & ImaginativeProcess(x)))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) & ImaginativeProcess(x)))", "all x.(Dune(x) -> (exists y.(HumanBrain(y) & ProducedIn(x,y)) & ImaginativeProcess(x))))", "all x y.((Dune(x) & HumanBrain(y)) -> (ProducedIn(x,y) & ImpregnableProcess(x)))", "all x y.((Dune(x) & HumanBrain(y)) -> (ProducedIn(x,y) & ImaginativeProcess(x)))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) & ImaginativeProcess(x)))", "all x y z.((Dune(x) & HumanBrain(y) & ImaginativeProcess(z)) -> ProducedIn(x,y))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) & ImaginativeProcess(x)))"]}
{"id": "folio_train_914", "nl": "Dune is either produced in human brains or an imaginative process.", "fol": "(ProducedInHumanBrains(Dune) | ImaginativeProcess(Dune))", "prediction": ["all x.(Dune(x) -> (ProducedInHumanBrains(x) | ImaginativeProcess(x)))", "exists x.(Dune(x) & (ProducedInHumanBrains(x) | ImaginativeProcess(x)))", "all x.(Dune(x) -> ((ProducesInHumanBrains(x) | ImaginativeProcess(x))))", "all x.(Dune(x) -> (ManufacturedInHumanBrains(x) | ImaginativeProcess(x)))", "all x.(Dune(x) -> (InHumanBrains(x) | InImaginativeProcess(x)))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) | ImaginativeProcess(x)))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) | ImaginativeProcess(x)))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) | CreatedInImaginativeProcess(x)))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) | ImaginativeProcess(x)))", "all x.(Dune(x) -> (InhumanBrains(x) | ImaginativeProcess(x)))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) | CreatedInImaginativeProcess(x)))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) | ImaginativeProcess(x)))", "all x.(Dune(x) -> (HasHumanBrains(x) | Creativity(x)))", "exists x.(Dune(x) & (ProducedInHumanBrain(x) | ImaginativeProcess(x)))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) | ImaginativeProcess(x)))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) | ImaginativeProcess(x)))"]}
{"id": "folio_train_915", "nl": "Dune is produced in human brains and is science fiction.", "fol": "(ProducedInHumanBrains(Dune) & ScienceFiction(Dune))", "prediction": ["exists x.(Dune(x) & ProducedInHumanBrains(x) & ScienceFiction(x))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) & ScienceFiction(x)))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) & ScienceFiction(x)))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) & ScienceFiction(x)))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) & ScienceFiction(x)))", "exists x.(Dune(x) & ProducedInHumanBrains(x) & ScienceFiction(x))", "(ProducedInHumanBrains(Dune) & ScienceFiction(Dune))", "(ProducedInHumanBrain(Dune) & ScienceFiction(Dune))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) & ScienceFiction(x)))", "all x.(Dune(x) -> (Heritage(x) & HumanBrain(x) & ScienceFiction(x)))", "all x.(Dune(x) : (ProducedInHumanBrains(x) & ScienceFiction(x)))", "(ProducedInHumanBrains(Dune) & ScienceFiction(Dune))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) & ScienceFiction(x)))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) & ScienceFiction(x)))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) & ScienceFiction(x)))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) & ScienceFiction(x)))"]}
{"id": "folio_train_916", "nl": "Dune is either produced in human brains or science-fiction.", "fol": "(ProducedInHumanBrains(Dune) | ScienceFiction(Dune))", "prediction": ["all x.(Dune(x) -> (ProducedInHumanBrains(x) | ScienceFiction(x)))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) | ProducedInScienceFiction(x)))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) | ProducedInScienceFiction(x)))", "all x.(Dune(x) -> (ManufacturedIn(x,HumanBrains) | ProducedIn(x,ScienceFiction)))", "(Harmon(Dune,HumanBrains) | ScienceFiction(Dune,Scientific(Dune,Limits)))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) | ProducedInScienceFiction(x)))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) | ProducedInScientificFiction(x)))", "all x.(Dune(x) -> (ProducedInHumanBrain(x) | ProducedInScienceFiction(x)))", "all x.(Dune(x) -> (ProducedInHumanBrain(x) | ProducedInScienceFiction(x)))", "(Warmer(Dune) | ScienceFiction(Dune))", "(ProducedInHumanBrains(Dune,Chronicle) | ProducedInScienceFiction(Dune,Chronicle)))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) | ProducedInScienceFiction(x)))", "all x y.((Dune(x) & HumanBody(y)) | ScienceFiction(x))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) | ScienceFiction(x)))", "all x.(Dune(x) -> (ProduitsInHumanBrains(x) | ProducedInScienceFiction(x)))", "all x.(Dune(x) -> (ProducedInHumanBrains(x) | ProducedInScienceFiction(x)))"]}
{"id": "folio_train_917", "nl": "If Dune is produced in human brains and is an imaginative process, then Dune is not produced in human brains and science-fiction.", "fol": "((ProducedInHumanBrains(Dune) & ImaginativeProcess(Dune)) -> (-ProducedInHumanBrains(Dune) & ScienceFiction(Dune)))", "prediction": ["all x.((Dune(x) & ProducedInHumanBrains(x) & ImagineativeProcess(x)) -> -ProducedInHumanBrainsAndScienceFiction(x))", "all x.((Dune(x) & ProducedInHumanBrains(x) & ImaginativeProcess(x)) -> -(Dune(x) & -AnimatedInHumanBrains(x) & -SpecialisticProcess(x)))", "all x.((Dune(x) & ProducedInHumanBrains(x) & CreativeProcess(x)) -> -(Dune(x) & HumanBrains(x) & ScienceFiction(x)))", "all x.((Dune(x) & ProducedInHumanBrains(x) & ImaginativeProcess(x)) -> -DemandedInHumanBrainsAndScienceFiction(x))", "all x.((CreatedInHumanBrains(x) & ImaginativeProcess(x)) -> -CreatedInHumanBrains(x) & ScienceFiction(x))", "all x.((Dune(x) & ProducedInHumanBrains(x) & CreativeProcess(x)) -> -DuneProducedInHumanBrainsAndScienceFiction(x))", "all x.((Dune(x) & ProducedInHumanBrains(x) & ImaginativeProcess(x)) -> -(TurnedInHumanBrains(x) & Scientifique(x)))", "all x.((DuneProduction(x) & ProducedInHumanBrains(x) & InventiveProcess(x)) -> -DevelopedInHumanBrains(x) & ScienceFiction(x))", "all x.((Duke(x) & ProducedInHumanBrains(x) & ImaginativeProcess(x)) -> -ProducedInHumanBrains(x) & ScienceFiction(x))", "all x.((Dune(x) & ProducedInHumanBrains(x) & IllusiveProcess(x)) -> -DeliveredInHumanBrainsAndScientificFiction(x))", "all x.((Dune(x) & ProducedInHumanBrains(x) & CreativeProcess(x)) -> -ProducedInHumanBrains(x) & ScienceFiction(x))", "all x.((Dune(x) & HumanBrain(x) & ImaginativeProcess(x)) -> -(Dune(x) & HumanBrain(x) & ScienceFiction(x)))", "all x.((Dune(x) & ProducedInHumanBrains(x) & Improvisation(x)) -> -(ReproducedInHumanBodys(x) & ScienceFiction(x)))", "all x.((CovenInHumanBrains(x) & ImaginativeProcess(x)) -> -(CovenInHumanBrains(x) & ScienceFiction(x)))", "all x.((Dune(x) & ProducedInHumanBrains(x) & ImaginativeProcess(x)) -> (-DunesInHumanBrainsAndScienceFiction(x)))", "all x.((Dune(x) & ProducedInHumanBrains(x) & InventionalProcess(x)) -> -ProducedInHumanBrains(x) & -ProducedInScienceFiction(x))"]}
{"id": "folio_train_918", "nl": "If Dune is either a fact and produced in human brains, or neither a fact nor produced in human brains, then Dune is produced in human brains and science-fiction.", "fol": "(((Fact(Dune) & ProducedInHumanBrains(Dune)) | (-Fact(Dune) & -ProducedInHumanBrains(Dune))) -> (ProducedInHumanBrains(Dune) & ScienceFiction(Dune)))", "prediction": ["((Fact(nonFactual(n) & ProducedInHumanBrains(n) & -ProducedInHumanBrains(n)) -> (ProducedInHumanBrains(n) & ScienceFiction(n))))", "all x.((Dune(x) & ((Factual(x) & ProducedInHumanBrains(x)) | -Factual(x) & ProducedInHumanBrains(x))) -> ProductedInHumanBrainsAndScienceFiction(x))", "all x.(Report(x) -> ((Factual(x) & ProducedInHumanBrains(x)) | -Factual(x) & ProducedInHumanBrains(x))))", "all x.((Dune(x) & (Factual(x) & ProducedInHumanBrains(x) | -Factual(x) & ProducedInHumanBrains(x))) -> (ProducedInHumanBrains(x) & ProductionOfScienceFiction(x)))", "all x.((Dune(x) & Factual(x) & ProducedInHumanBrains(x)) | -Factual(x) & -ProducedInHumanBrains(x))) -> -ProducedInHumanBrainsAndScienceFiction(x))", "all x.((Dune(x) & (Factual(x) & ProducedInHumanBrains(x)) | (-Factual(x) & ProducedInHumanBrains(x)))))", "all x.((Dune(x) & (Factual(x) & ProducedInHumanBrains(x)) | -Factual(x) & ProducedInHumanBrains(x))) -> (ProducedInHumanBrains(x) & ScienceFiction(x)))", "all x.((Dune(x) & ((Factual(x) & ProducedInHumanBrains(x)) | -Factual(x) & ProducedInHumanBrains(x))) -> (ProducedInHumanBrains(x) & ScienceFiction(x)))", "all x.((Dune(x) & ((Factual(x) & ProducedInHumanBrains(x)) | -Factual(x) & -ProducedInHumanBrains(x))) -> (ProducedInHumanBrains(x) & ScienceFiction(x))))", "all x.((Dune(x) & (Factual(x) & InHumanBrains(x) | -Factual(x) & InHumanBrains(x))) -> (ProducedInHumanBrains(x) & ScienceFiction(x)))", "all x.((Dune(x) & (Factual(x) & ProducedInHumanBrains(x)) | -Factual(x) & -ProducedInHumanBrains(x))) -> (ProducedInHumanBrains(x) & ScienceFiction(x)))", "all x.((Dune(x) & ((Factual(x) & ProducedInHumanBreaths(x)) | (-Factual(x) & ProducedInHumanBreaths(x)))) -> (ProducedInHumanBrains(x) & ScienceFiction(x)))", "all x.((Dune(x) & ((Factual(x) & ProducedInHumanBrains(x)) | -Factual(x) & ProducedInHumanBrains(x))) -> (ProducedInHumanBrains(x) & ScienceFiction(x)))", "all x.((Dune(x) & ((Factual(x) & ProducedInHumanBrains(x)) | -Factual(x) & ProducedInHumanBrains(x))) -> (ProducedInHumanBrains(x) & ProducedInScienceFiction(x))))", "all x.((Dune(x) & Fact(x) & -ProducedInHumanBrains(x)) -> (ProducedInHumanBrains(x) & ScienceFiction(x)))", "all x.((Factual(x) & ProducedInHumanBrains(x)) | (-Factual(x) & ProducedInHumanBrains(x))))"]}
{"id": "folio_train_919", "nl": "If Dune is science-fiction, then Dune is not produced in human brains and science-fiction.", "fol": "(ScienceFiction(Dune) -> (-ProducedInHumanBrains(Dune) & ScienceFiction(Dune)))", "prediction": ["all x.((Dune(x) & ScienceFiction(x)) -> -ProducedInHumanBrains(x) & -ProducedInScientificFiction(x)))", "all x.((Dune(x) & ScienceFiction(x)) -> -ProducedInHumanBrains(x) & -ProducedInScienceFiction(x))", "all x.((Dune(x) & ScienceFiction(x)) -> -ProducedInHumanBrains(x) & -ProducedInScientificFiction(x)))", "all x.((Dune(x) & ScienceFiction(x)) -> (-ProducedInHumanBody(x) & -ProducedInScienceFiction(x)))", "all x.((Dune(x) & ScienceFiction(x)) -> -ProducedInHumanBrainsAndScienceFiction(x))", "all x.((Dune(x) & ScienceFiction(x)) -> -(ManufacturedInHumanBrains(x) & DevelopedInScientificFiction(x)))", "all x.((Dune(x) & ScienceFiction(x)) -> -ProducedInHumanBrainsAndScienceFiction(x))", "all x.((Dune(x) & ScienceFiction(x)) -> -ProducedInHumanBrains(x) & -ProducedInScientificFiction(x))", "all x.((Dune(x) & ScientificFiction(x)) -> -Bonet(x) & ScienceFiction(x))", "all x.((Dune(x) & ScienceFiction(x)) -> -(ProducedInHumanBrains(x) & ProducedInScienceFiction(x)))", "all x.((Dune(x) & ScienceFiction(x)) -> -ProducedInHumanBrains(x) & -ProducedInScienceFiction(x))", "all x.((Dune(x) & ScienceFiction(x)) -> -ProducedInHumanBrainsAndScienceFiction(x))", "all x.((Dune(x) & ScienceFiction(x)) -> -(ProducedInHumanBrains(x) & ProducedInScienceFiction(x)))", "all x.((Dune(x) & ScienceFiction(x)) -> -ProducedInHumanBrains(x) & -ProducedInScienceFiction(x))", "all x.((Dune(x) & ScienceFiction(x)) -> (-ProducedInHumanBrains(x) & -ProducedInScienceFiction(x)))", "all x.((Dune(x) & ScienceFiction(x)) -> -HumanBrainsAndScientificFiction(x))"]}
{"id": "folio_train_920", "nl": "If Dune is not produced in human brains and science-fiction, then Dune is neither an imaginative process nor proved to be false.", "fol": "((-ProducedInHumanBrains(Dune) & ScienceFiction(Dune)) -> (-ImaginativeProcess(Dune) & -ProvenToBeFalse(Dune)))", "prediction": ["all x.((Dune(x) & -ProducedInHumanBrains(x) & -ProducedInScienceFiction(x)) -> (-ImaginativeProcess(x) & -ProvenToBeFalse(x)))", "all x.((Dune(x) & -ProducedInHumanBrains(x) & -ProducedInScienceFiction(x)) -> -ImaginativeProcess(x) & -False(x))", "all x.((Dune(x) & -ProducedInHumanBrains(x) & -ProducedInScienceFiction(x)) -> -ImaginativeProcess(x) & -ProvenToBeFalse(x))", "all x.((Dune(x) & -ProducedInHumanBrains(x) & -ProducedInScienceFiction(x)) -> -ImaginativeProcess(x) & -ProvedToBeFalse(x))", "all x.((Dune(x) & -ProducedInHumanBrains(x) & -ProducedInScienceFiction(x)) -> (NecessaryImaginativeProcess(x) | ProvenToBeFalse(x)))", "all x.((Dune(x) & -ProducedInHumanBrains(x) & -ProducedInScienceFiction(x)) -> -ImaginativeProcess(x) & -TrueFalse(x))", "all x.((Dune(x) & -ProducedInHumanBrains(x) & -ProducedInScienceFiction(x)) -> (NecessaryImaginativeProcess(x) & -ProvenToBeFalse(x)))", "all x.((Dune(x) & -ProducedInHumanBrainsAndScienceFiction(x)) -> (-ImaginativeProcess(x) & -ProvedToBeFalse(x)))", "all x.((Dune(x) & -ProducedInHumanBrains(x) & -ProducedInScienceFiction(x)) -> (NeitherImaginativeProcess(x) & -DefineDune(x)))", "all x.((Dune(x) & -ProducedInHumanBrains(x) & -ProducedInScienceFiction(x)) -> (-ImaginativeProcess(x) & -FalseProcess(x)))", "all x.((Dune(x) & -ProducedInHumanBrains(x) & -ProducedInScienceFiction(x)) -> (NegativeProcess(x) & -ProvedToBeFalse(x)))", "all x.((Dune(x) & -ProducedInHumanBrains(x) & -ProducedInScienceFiction(x)) -> -ImaginativeProcess(x) & -ProvenedToBeFalse(x))", "all x.((Dune(x) & -ProducedInHumanBrains(x) & -ProducedInScienceFiction(x)) -> -ImaginativeProcess(x) & -ProvedToBeFalse(x))", "all x.((Dune(x) & -ProducedInHumanBrains(x) & -ProducedInScienceFiction(x)) -> (NegativeProcess(x) & -ProvedToBeFalse(x)))", "all x.((Dune(x) & -ProducedInHumanBrains(x) & -ProducedInScienceFiction(x)) -> (-ImaginativeProcess(x) & -ProvenToBeFalse(x)))", "all x.((Dune(x) & -ProducedInHumanBrains(x) & -ProducedInScienceFiction(x)) -> -ImaginativeProcess(x) & -ProvenToBeFalse(x))"]}
{"id": "folio_train_921", "nl": "If Dune is not an imaginative process and science-fiction, then Dune is neither produced in human brains nor an imaginative process.", "fol": "((-ImaginativeProcess(Dune) & ScienceFiction(Dune)) -> (-ProducedInHumanBrains(Dune) & -ImaginativeProcess(Dune)))", "prediction": ["all x.((Dune(x) & -ImaginativeProcess(x) & ScienceFiction(x)) -> -(ProducedInHumanBrains(x) | ImaginativeProcess(x))))", "all x.((Dune(x) & -ImaginativeProcess(x) & ScienceFiction(x)) -> (-ProducedInHumanBrains(x) & -ImaginativeProcess(x)))", "all x.((Dune(x) & -ImaginativeProcess(x) & ScienceFiction(x)) -> -(ProducedInHumanBrains(x) | CreatedInImaginativeProcess(x))))", "all x.((Dune(x) & -ImaginativeProcess(x) & ScienceFiction(x)) -> (-ManufacturedInHumanBrains(x) & -ImaginativeProcess(x)))", "all x.((Dune(x) & -ImaginativeProcess(x) & ScienceFilm(x)) -> (-ProducedInHumanBrains(x) & -ImaginativeProcess(x)))", "all x.((Dune(x) & -ImaginativeProcess(x) & ScienceFiction(x)) -> -(ProducedInHumanBrains(x) | ProducedInImaginativeProcess(x))))", "all x.((Dune(x) & -ImaginativeProcess(x) & ScienceFiction(x)) -> -ProducedInHumanBrains(x) & -ImaginativeProcess(x))", "all x.((Dune(x) & -IllustrativeProcess(x) & ScienceFiction(x)) -> -(ProducedInHumanBrains(x) | CreatedInImaginativeProcess(x)))", "all x.((UnderstandingForm(x) & -ImaginativeProcess(x) & ScienceFiction(x)) -> (-ProducedInHumanBrains(x) & -ImaginativeProcess(x)))", "all x.((Dune(x) & -ImaginativeProcess(x) & ScienceFiction(x)) -> (-ProducedInHumanBodys(x) & -ImaginativeProcess(x)))", "all x.((Dune(x) & -ImaginativeProcess(x) & ScienceFiction(x)) -> -ProducedInHumanBrains(x) & -ImaginativeProcess(x))", "all x.((Dune(x) & -ImaginativeProcess(x) & ScienceFiction(x)) -> -ProducedInHumanBrains(x) & -ImaginativeProcess(x))", "all x.((Dune(x) & -ImaginativeProcess(x) & ScienceFiction(x)) -> -(ProducedInHumanBrains(x) | ImaginativeProcess(x))))", "all x.((Dune(x) & -ImaginativeProcess(x) & ScienceFiction(x)) -> -(ProducedInHumanBrains(x) | ImaginativeProcess(x))))", "all x.((Dune(x) & -ImaginativeProcess(x) & ScienceFiction(x)) -> -(ProducedInHumanBrains(x) | ImaginativeProcess(x))))", "all x.((Dune(x) & -ImaginativeProcess(x) & ScienceFiction(x)) -> (NeproducedInHumanBrains(x) | NiprovedInImaginativeProcess(x)))"]}
{"id": "folio_train_922", "nl": "An American superhero comes from either DC universe or Marvel universe.", "fol": "all x.((IsSuperhero(x) & IsAmerican(x)) -> ((OriginatesFrom(x,DcUniverse) & -OriginatesFrom(x,MarvelUniverse)) | (-OriginatesFrom(x,DcUniverse) & OriginatesFrom(x,MarvelUniverse))))", "prediction": ["all x.(AmericanSuperhero(x) -> (ComesFromDCUniverse(x) | ComesFromMarvelUniverse(x)))", "all x.(AmericanSuperhero(x) -> (DCUniverse(x) | MarvelUniverse(x)))", "all x.(AmericanSuperhero(x) -> (DCUniverse(x) | MarvelUniverse(x)))", "all x.(Captain(x) -> (ComesFrom(x,DC) | ComesFrom(x,Marvel)))", "all x.(AmericanSuperhero(x) -> ((DCUniverse(x) | MarvelUniverse(x))))", "all x y.((AmericanSuperstar(x) & DCUniverse(y)) | MarvelUniverse(z))", "all x.((Superhero(x) & (DCUniverse(x) | MarvelUniverse(x))) -> ComesFrom(x,DC))", "all x.(AmericanSuperhero(x) -> (DCUniverse(x) | MarvelUniverse(x)))", "all x.(AmericanSuperhero(x) -> (ComesFromDCUniverse(x) | ComesFromMarvelUniverse(x)))", "all x.(AmericanSuperhero(x) -> (COMESFrom(x,DC) | ComesFrom(x,Marvel)))", "all x.(AmericanHero(x) -> (ComesFrom(x,DC) | ComesFrom(x,Marvel)))", "all x.((Superhero(x) & (DCUniverse(x) | MarvelUniverse(x))) -> ComesFrom(x,DDC))", "all x.(AmericanSuperhero(x) -> (ComesFrom(x,DC) | ComesFrom(x,Marvel)))", "all x.(AmericanSuperhero(x) -> (DCUniverse(x) | MarvelUniverse(x)))", "all x.(AmericanSuperhero(x) -> (Column(x,DC) | Column(x,Marvel)))", "all x.(AmericanSuperhero(x) -> (ComesFrom(x,DC) | ComesFrom(x,Marvel)))"]}
{"id": "folio_train_923", "nl": "Captain America is a superhero.", "fol": "IsSuperhero(CaptainAmerica)", "prediction": ["(Superhero(CaptainAmerica) & Superhero(CaptainAmerica))", "all x.(CaptainAmerica(x) -> Superhero(x))", "All x.(CaptainAmerica(x) -> Superhero(x))", "all x.(CaptainAmerica(x) -> Superman(x))", "CaptainAmerica(captain) is a Superhero(captain)", "all x.(CaptainAmerica(x) -> Superhero(x))", "all x.(CaptainAmerica(x) -> Superhero(x))", "All x.(CaptainAmerican(x) -> Superhero(x))", "all x.(CaptainAmerica(x) -> Superhero(x))", "all x.(CaptainAmerica(x) -> Superhero(x))", "all x.(CaptainAmerica(x) -> Superhero(x))", "all x.(CaptainAmerica(x) -> Superhero(x))", "all x.(CaptainAmerica(x) -> Superhero(x))", "all x.(CaptainAvenger(x) -> Superhero(x))", "(Superhero(CaptainAmerica) | Captain(CaptainAmerica)))", "Capt.America(Captain) & Superhero(Captain) & Superhero(Captain))"]}
{"id": "folio_train_924", "nl": "Captain America is an American.", "fol": "IsAmerican(CaptainAmerica)", "prediction": ["All x.(CaptainAmerica(x) -> American(x))", "all x.(CaptainAmerica(x) -> American(x))", "All x.(CaptainAmerica(x) -> American(x))", "all x.(CaptainAmerica(x) -> American(x))", "CaptainAmerica(CaptainAmerica)", "*CaptainAmerica(CaptainAmerica) [/American]", "America(Captain)", "All x.(CaptainAmerica(x) -> American(x))", "the CaptainAmerica(CaptainAmerica)", "all x.(CaptainAmerica(x) -> American(x))", "all x.(CaptainAmerica(x) -> American(x))", "all x.(CaptainAboutAmerica(x) -> American(x))", "All x.(CaptainAmerika(x) -> American(x))", "(A.(CaptainAmerican(CaptainAmerica) & American(CaptainAmerica))", "all x.(CaptainAmerica(x) -> American(x))", "All x.(CaptainAmerica(x) -> American(x))"]}
{"id": "folio_train_925", "nl": "Captain America does not come from DC universe.", "fol": "-OriginatesFrom(CaptainAmerica,DcUniverse)", "prediction": ["-ComesFromDCUniverse(CaptainAmerica)", "(-ComesFromDCUniverse(CaptainAmerica))", "-ComesFromDCUniverse(CaptainAmerica)", "all x.(CaptainAmerica(x) -> -ComesFromDCUniverse(x))", "is no DCUniverseColumn(CaptainAmerica)", "all x.(CaptainAmerica(x) -> -DCUniverse(x))", "(-ComesFromDCUniverse(CaptainAmerica))", "-Come(CaptainAmerica,DC)", "CaptainAmericasGhostFamily(CaptainAmerica, DC)", "all x.(CaptainAmerica(x) -> -(DCUniverse(x) | DCUniverse(x)))", "the DCUniverse(CaptainAmerica) -> -ComesOutsideScene(CaptainAmerica))", "-CommitsFromDCUniverse(CaptainAmerica)", "(-ComesFromDCUniverse(CaptainAmerica))", "-ComesFromDCUniverse(CaptainAmerica)", "the DCUniverse(CaptainAmerica)", "-CommitesFromDCUniverse(CaptainAmerica)"]}
{"id": "folio_train_926", "nl": "If a superhero is American, he speaks English.", "fol": "all x.((IsSuperhero(x) & IsAmerican(x)) -> SpeaksLanguage(x,English))", "prediction": ["all x.(AmericanSuperhero(x) -> SpeaksEnglish(x))", "all x.(AmericanSuperhero(x) -> SpeaksEnglish(x))", "all x.((Superhero(x) & American(x)) -> SpeaksEnglisch(x))", "all x.((Superhero(x) & American(x)) -> SpeaksEnglish(x))", "all x.((Superhero(x) & American(x)) -> SpeaksEnglish(x))", "all x.((Superhero(x) & American(x)) -> SpeaksEnglish(x))", "all x.(AmericanSuperhero(x) -> SpeaksEnglish(x))", "all x.(American(x) -> SpeaksEnglish(x))", "all x.(American(x) -> SpeaksEnglish(x))", "all x.((Superhero(x) & American(x)) -> SpeaksEnglish(x))", "all x.((Superhero(x) & American(x)) -> SpeaksEnglish(x))", "all x.(American(x) -> SpeaksEnglish(x))", "all x.(Associate(x) -> SpeaksEngland(x))", "all x.((Superhero(x) & American(x)) -> SpeaksEnglish(x))", "all x.((Superhero(x) & American(x)) -> SpeaksEnglish(x))", "all x.(AmericanSuperhero(x) -> SpeaksEngland(x))"]}
{"id": "folio_train_927", "nl": "A superhero speaks English or Spanish.", "fol": "all x.(IsSuperhero(x) -> (SpeaksLanguage(x,English) | SpeaksLanguage(x,Spanish)))", "prediction": ["all x.(Superhero(x) -> (SpeaksEnglish(x) | SpeaksSpanish(x)))", "all x.(Superhero(x) -> (SpeaksEnglish(x) | SpeaksSpanish(x)))", "all x.(Superhero(x) -> (SpeaksEnglish(x) | SpeaksSpanish(x)))", "all x.(Superhero(x) -> (SpeaksEnglish(x) | SpeaksSpanish(x)))", "all x.(Superhero(x) -> (SpeaksEnglish(x) | SpeaksSpanish(x)))", "all x.(Superhero(x) -> (SpeaksEnglish(x) | SpeaksSpanish(x)))", "all x.(Superhero(x) -> (SpeaksEnglish(x) | SpeaksSpanish(x)))", "all x.(Superhero(x) -> (SpeaksEnglish(x) | SpeaksSpanish(x)))", "all x.(Superhero(x) -> (SpeaksEnglish(x) | SpeaksSpanish(x)))", "all x.(Superhero(x) -> (SpeaksEnglish(x) | SpeaksSpanish(x)))", "all x.(Superhero(x) -> (SpeaksEngland(x) | SpeaksSpanish(x)))", "all x.(Superhero(x) -> (SpeaksEngland(x) | SpeaksSpanish(x)))", "all x.(Superhero(x) -> (SpeaksEnglish(x) | SpeaksSpanish(x)))", "all x.(Superhero(x) -> (SpeaksEngleSpanish(x) | SpeaksSpanish(x)))", "all x.(Superhero(x) -> (SpeaksEnglish(x) | SpeaksSpanish(x)))", "all x.(Superman(x) -> (SpeaksEnglish(x) | SaysSpanish(x)))"]}
{"id": "folio_train_928", "nl": "Captain America does not speak English.", "fol": "-SpeaksLanguage(CaptainAmerica,English)", "prediction": ["(CaptainAmerica(CaptainAmerica) & -SpeaksEnglish(CaptainAmerica))", "CaptainAmerica -SpeaksEllen(CaptainAmerica)", "-SpeaksEnglish(CaptainAmerica)", "all x.(CaptainAmerica(x) -> -SpeaksEnglish(x))", "No English Speaker(CaptainAmerica)", "all x.(CaptainAmerica(x) -> -SpeaksEnglisch(x))", "all x.(CaptainAmerica(x) -> -SpeaksEnglish(x))", "(-SpeaksEnglish(CaptainAmerica))", "all x.(CaptainAmerica(x) -> -SpeaksEnglisch(x))", "/CaptainAmerica(x) & -SpeaksEnglish(x))", "all x.(CaptainAmerica(x) -> -SpeaksEnglisch(x))", "we speak English.", "(-SpeaksEnglish(CaptainAmerica))", "CaptainAmerica(captain) & -SpeaksEnglish(captain))", "(-SpeaksEngland(CaptainAmerica)", "(Language(CaptainAmerica) & -SpeaksEnglish(CaptainAmerica,Man))"]}
{"id": "folio_train_929", "nl": "Captain America comes from Marvel universe.", "fol": "OriginatesFrom(CaptainAmerica,MarvelUniverse)", "prediction": ["(Machine(CaptainAmerica) & Marvel(MarvelUniverse))", "all x y.((CaptainAmen(x) & MarvelUniverse(y)) -> ComesFrom(x,y))", "comes from Marvel's Universe.", "comes from MarvelUniverse(CaptainAmerica)", "all x.(CaptainAmerica(x) -> OriginsFromMarvelUniverse(x))", "comes from MarvelUniverse(CaptainAmerica)", "(ComesFromMarvelUniverse(CaptainAmerica))", "((CaptainAmerica(Captain) & MarvelUniverse(Captain)) | -CaptainAmerica(Captain)))", "(ComesFromMarvelUniverse(CaptainAmerica) & MarvelUniverse(CaptainAmerica))", "(CaptainAmerica(CaptainAmerica) -> MarvelUniverse(CaptainAmerica))", "All x y.((CaptainAmerica(x) & MarvelUniverse(y)) -> ComesFrom(x,y))", "all x.(CaptainAmerica(x) -> ComesFromMarvelUniverse(x))", "(MarvelUniverse(CaptainAmerica) -> ComesFrom(CaptainAmerica))", "all x y.((CaptainAmerica(x) & Marvel(y)) -> ComesFrom(x,y))", "CaptainAmerica comes from Marvel's Universe.", "comes from MarvelUniverse(CaptainAmerica)"]}
{"id": "folio_train_930", "nl": "Captain America speaks Spanish.", "fol": "SpeaksLanguage(CaptainAmerica,Spanish)", "prediction": ["(SpeaksSpanish(CaptainAmerica) & CaptainAmerica(CaptainAmerica))", "CaptainAmericaSpeaksSpanish(CaptainAmerica)", "(SpeaksSpanish(CaptainAmerica) & Captain(CaptainAmerica))", "all x.(CaptainAmerica(x) -> SpeaksSpanish(x))", "all x.(CaptainAmerica(x) -> SpeaksSpanish(x))", "All x.(CaptainAmerica(x) -> SpeaksSpanish(x))", "all x.(CaptainAmerica(x) -> SpeaksSpanish(x))", "(SpeakesSpanish(CaptainAmerica))", "all x.(CaptainAmerica(x) -> SpeaksSpanish(x))", "all x.(CaptainAmerica(x) -> SpeaksSpanish(x))", "(SpeaksSpanish(CaptainAmerica) & Captain(CaptainAmerica))", "(SpeakesSpanish(CaptainAmerica) & -SpeaksSpanish(CaptainAmerica))", "all x.(CaptainAmerica(x) -> speaksSpanish(x))", "all x.(CaptainAmerica(x) -> SpokenSpanish(x))", "-SpeaksSpanish(CaptainAmerica)", "all x.(CaptainAmerica(x) -> SpeaksSpanish(x))"]}
{"id": "folio_train_931", "nl": "Robert Zimmer was born in Germany.", "fol": "BornInGermany(RobertZimmer)", "prediction": ["RobertZimmer (bornIn(RobertZimmer) | BornIn(RobertZimmer)))", "Robert Zimmer was born in Germany.", "RobertZimmer was born in Germany.", "RobertZimmer (bornIn(RobertZimmer,Germany))", "Robert Zimmer was born in Germany.", "Robert Zimmer(born(a) in Germany(b) & BeganToWorkIn(a))", "RobertZimmer wurde in Deutschland geboren.", "(BirthIn(RobertZimmer) & BornIn(RobertZimmer))", "RobertZimmer (bornInGermany)", "RobertZimmer(x) & BornIn(x,Deutschland,Deutschland))", "Robert Zimmer (bornInGermany)", "RobertZimmer (bornInGermany)", "Robert Zimmer wurde in Deutschland geboren.", "RobertZimmer(Robert) was bornIn(Robert) & BornIn(Robert) & BornIn(Robert))", "RobertZimmer(Robert) was born(Robert) inGermany.", "RobertZimmer (bornInGermany)"]}
{"id": "folio_train_932", "nl": "Robert Zimmer is an essayist.", "fol": "IsEssayist(RobertZimmer)", "prediction": ["(Essayist(RobertZimmer)", "Robert Zimmer is Essayist(Robert)", "RobertZimmer (Essayist)", "RobertZimmer(e) is a Writer(e)", "RobertZimmer(Robert) is Essayist(Robert)", "Robert Zimmer is an essayist.", "RobertZimmer is essayist(RobertZimmer)", "Erlebtesssment(RobertZimmer)", "Robert Zimmer (Essayist)", "RobertZimmer is an essayist.", "RobertZimmer is an essayist.", "RobertZimmer (Essayist)", "RobertZimmer(Rogers) & Essayist(Rogers)", "RobertZimmer is essayist(x) authentic.", "RobertZimmer (Essayer)", "RobertZimmer (akaEssayist(Robert))"]}
{"id": "folio_train_933", "nl": "Robert Zimmer was born in 1953.", "fol": "BornInYear(RobertZimmer,Year1953)", "prediction": ["Robert Zimmer (bornInHistory(red,1953))", "Robert Zimmer (birthen(m) & BornIn(m,m,m))", "Robert Zimmer wurde 1953 erbst.", "RobertZimmer (Birth(RobertZimmer) & BornIn(RobertZimmer,2003))", "RobertZimmer,(bornIn(RobertZimmer,1953))", "RobertZimmer (bornIn(Robert(ZimmerInMid 1953))", "RobertZimmer was born in 1953.", "-(RobertZimmer(Robert) & BornIn(Robert,53)))", "RobertZimmer wurde im Jahre 1953 geboren.", "Robert Zimmer wurde 1953 geboren.", "Robert Zimmer was born in 1953.", "(RobertZimmer(Robert) & BornIn(Robert,53))", "Robert Zimmer was born in 1953.", "Robert Zimmer & BornIn(RobertZimmer) was bornIn(RobertZimmer) & BornIn(RobertZimmer,1955))", "Robert Zimmer (bornIn(RobertZimmer, 1953))", "RobertZimmer was born in 1953."]}
{"id": "folio_train_934", "nl": "Every essayist is a writer.", "fol": "all x.(IsEssayist(x) -> IsWriter(x))", "prediction": ["all x.(Essayist(x) -> Writer(x))", "exists x.(Essayist(x) & Writer(x))", "all x.(Essentialist(x) -> Writer(x))", "all x.(Essayist(x) -> Writer(x))", "all x.(Essayist(x) -> Writer(x))", "all x.(Essayist(x) -> Writer(x))", "all x.(Essentialist(x) -> Writer(x))", "all x.(Essayist(x) -> Writer(x))", "all x.(Essayist(x) -> Author(x))", "all x.(Essayist(x) -> Writer(x))", "all x.(Essayist(x) -> Writer(x))", "all x.(Essexist(x) -> Writer(x))", "all x.(Essayist(x) -> Writer(x))", "all x.(Essayer(x) -> Writer(x))", "all x.(Essayist(x) -> Writer(x))", "all x.(Essayist(x) -> Writer(x))"]}
{"id": "folio_train_935", "nl": "Every person born in Germany is German.", "fol": "all x.(BornInGermany(x) -> IsGerman(x))", "prediction": ["all x.(BornInGermany(x) -> German(x))", "all x.((Person(x) & BornInGermany(x)) -> German(x))", "all x.(HasBirthInGermany(x) -> German(x))", "all x.(BornInGermany(x) -> German(x))", "all x.(BirthInGermany(x) -> German(x))", "all x.(BirthInDanger(x) -> German(x))", "all x.(BirthInGermany(x) -> German(x))", "all x.(BirthInGermany(x) -> German(x))", "all x.(BornInGermany(x) -> German(x))", "all x.(BornIn(x,Deutschland) -> German(x))", "all x.((Person(x) & BornInGermany(x)) -> German(x))", "all x.((Person(x) & BornInGermany(x)) -> German(x))", "(all x.(BirthInGermany(x) -> German(x)))", "all x.((Person(x) & BornInGermany(x)) -> German(x))", "all x.(BirthInGermany(x) -> German(x))", "all x.(BirthInGermany(x) -> German(x))"]}
{"id": "folio_train_936", "nl": "Robert Zimmer is German.", "fol": "IsGerman(RobertZimmer)", "prediction": ["Robert Zimmer ist German.", "(Deutschland) & RobertZimmer(Roger))", "RobertZimmer (German)", "(German(RobertZimmer) | German(RobertZimmer)))", "RobertZimmer (Deutsch)", "RobertZimmer(Walter) & German(Zwischen)", "RobertZimmer(b) & German(f) & Reads(c) & Reads(t) & Accessible(c))", "RobertZimmer (German)", "ALL x.(RobertZimmer(x) -> German(x))", "RobertZimmer isGerman(x)", "All x.(RogerZimmer(x) -> German(x))", "-Germanist(RobertZimmer)", "all x y z.((RobertZimmer(x) & (German(y) | German(z))) -> German(x))", "all x.(Romanticism(x) -> RobertZimmer(x))", "Herr RobertZimmer(*) & German(Danish)", "(German(RobertZimmer) & German(RobertZimmer))"]}
{"id": "folio_train_937", "nl": "Robert Zimmer is not a writer.", "fol": "-IsWriter(RobertZimmer)", "prediction": ["All x.(RobertZimmer(x) -> NotWriter(x))", "(-Writer(RobertZimmer))", "RobertZimmer(Robert) & -Writer(Robert)", "none of the following:(RobertZimmer(RedDormOf(Morning) & -Writer(RobertZimmer))", "RobertZimmer (-Writer(Robert) & DoesNotWrite(Robert)))", "all x.(RobertZimmer(x) -> -Writer(x))", "all x.(RobertZimmer(x) -> -Writer(x))", "(-Writer(RobertZimmer) & -Reader(RobertZimmer))", "RobertZimmer(Roger) & -Writer(Roger,FullName))", "(-Writer(RobertZimmer))", "all x y.((RobertZimmer(x) & Writer(y)) -> -Writer(x,y))", "(-Writer(RobertZimmer))", "(-Writer(RobertZimmer))", "(-Writer(RobertZimmer))", "all x.((RobertZimmer(x) & -Writer(x)) -> -Writer(x))", "the writer(RobertZimmer)"]}
{"id": "folio_train_938", "nl": "Robert Zimmer is a biographer.", "fol": "IsBiographer(RobertZimmer)", "prediction": ["all x.(RobertZimmer(x) -> Biographer(x))", "all x.((RobertZimmer(x) & Biographer(x)) -> (RecognitesBiography(x) & IncludesBiography(x,biography)))", "(Biographer(RobertZimmer)", "Robert Zimmer is biographer.", "RobertZimmer(RedHelen(Roger) & Biographer(Roger))", "RobertZimmer (Biographer)", "RobertZimmer(biographer)", "RobertZimmer(29) & Biographer(27))", "all x.((RobertZimmer(x) & Biographer(x)) -> InDesign(x))", "Robert Zimmer is a biographer.", "RobertZimmer(biographer)", "(Biographer(RobertZimmer)", "RobertZimmer is a biographer.", "RobertZimmer (Biographer)", "RobertZimmer is a biographer.", "RobertZimmer(brain)"]}
{"id": "folio_train_939", "nl": "All people who repay their loans on time have a high credit score.", "fol": "all x.(RepayLoansOnTime(x) -> HasHighCreditScore(x))", "prediction": ["all x.((Person(x) & RepayLoansOnTime(x)) -> HighCreditScore(x))", "all x.((Person(x) & RepaysLoansOnTime(x)) -> HighCreditScore(x))", "all x.(RepaysLoansOnTime(x) -> HighCreditScore(x))", "all x.((Person(x) & RepaymentLoansOnTime(x)) -> HighCreditScore(x))", "all x.((People(x) & RepaysLoansOnTime(x)) -> HighCreditScore(x))", "all x.(RepaysLoansOnTime(x) -> HighCreditScore(x))", "all x.((Person(x) & RepaysLoansOnTime(x)) -> HighCreditScore(x))", "all x.((People(x) & RepayLoansOnTime(x)) -> HighCreditScore(x))", "all x.((People(x) & RepaymentLoansOnTime(x)) -> HighCreditScore(x))", "all x.(RepaymentOnTime(x) -> HighCreditScore(x))", "all x.((Person(x) & RepayAndSignificance(x)) -> HighCreditScore(x))", "all x y.((Person(x) & RepayLoansOnTime(x)) -> HighCreditScore(x))", "all x.(RepaysLoansOnTime(x) -> HighCreditScore(x))", "all x.((Person(x) & RepaysLoansOnTime(x)) -> HighCreditScore(x))", "all x.((Person(x) & RepayLoansOnTime(x)) -> HighCreditScore(x))", "all x.((RepaysLoansOnTime(x) & HighCreditScore(x)) -> High(x))"]}
{"id": "folio_train_940", "nl": "Some people with high credit scores and high salaries are approved for mortgages.", "fol": "exists x.((HasHighCreditScore(x) & HasHighSalary(x)) -> ApprovedForMortgage(x))", "prediction": ["exists x.(Person(x) & HighCreditScore(x) & HighSalary(x) & ApprovedForHorses(x))", "exists x.(Person(x) & HighCreditScores(x) & HighSalaries(x))", "exists x.(Person(x) & HasHighCreditScores(x) & HasHighSalaries(x) & ApprovedForHomeownership(x))", "exists x.(Person(x) & HighCreditScores(x) & HighSalary(x) & ApprovedForMortgage(x))", "exists x.(Person(x) & HighCreditScores(x) & HighSalary(x) & ApprovedForMortgage(x))", "exists x.(Person(x) & HighCreditScores(x) & HighSalary(x) & ApprovedForMortgages(x))", "exists x.(Person(x) & HighCreditScore(x) & HighSalary(x) & ApprovedForMortgages(x))", "exists x.(HighCreditScores(x) & HighSalary(x) & Approved(x))", "exists x.(Person(x) & HighCreditScores(x) & HighSalary(x) & ApprovedForMortgage(x))", "exists x.(Person(x) & HighCreditScores(x) & HighSalaries(x))", "exists x.(Person(x) & HighCreditScores(x) & HighSalary(x))", "exists x.((Person(x) & HighCreditScores(x) & HighSalaries(x)) -> ApprovedForMortgage(x))", "exists x.(Person(x) & HighCreditScore(x) & HighSalary(x) & ApprovedForMortgage(x))", "exists x.((Person(x) & HighCreditScore(x) & HighSalary(x)) -> ApprovedForHomebuying(x))", "exists x.(Person(x) & HighCreditScore(x) & HighSalary(x))", "exists x.(Person(x) & HighCreditScores(x) & HighSalary(x) & ApprovedForMortgages(x))"]}
{"id": "folio_train_941", "nl": "John has a high salary.", "fol": "HasHighSalary(John)", "prediction": ["(HasHighSalary(John))", "In the past, he has had a high Salary.", "All x.((John(x) & HighSalary(x)) -> Has(x,x))", "all x.(John(x) -> HighSalary(x))", "John has a highSalary(John)", "-Salary(John)", "(HasHighSalary(John)", "-HighSalary(Jane)", "(HighSalary(John,Joe))", "(HasHighSalary(John) & HighSalary(John))", "(HeadSalary(John) -> HighSalary(John))", "all x.(John(x) -> HighSalary(x))", "(HisSalary(John) -> High(John))", "(HighSalary(John) & HighSalary(John) & WorksOn(John,John))", "all x.(John(x) -> HighSalary(x))", "John has a highSalary(John)"]}
{"id": "folio_train_942", "nl": "If John repays his loans on time, he will be approved for a mortgage.", "fol": "(RepayLoansOnTime(John) -> MortgageApproved(John))", "prediction": ["all x.(RepaysLeasonsOnTime(x) -> ApprovedForHomebuyer(x))", "all x y.((John(x) & Loan(y) & RepaysOnTime(x,y)) -> ApprovedForMortgage(x))", "all x.((John(x) & RepaysLoansOnTime(x)) -> ApprovedForMortgage(x))", "all x.((JohnsLove(x) & AppliedForMaintanee(x)) -> RepaysOnTime(x))", "all x.((John(x) & LateRepayment(x)) -> ApprovedForHome Loans(x))", "all x.((John(x) & RepaysDealsOnTime(x)) -> ApprovedForMortgage(x))", "all x.((John(x) & RepaysLoansOnTime(x)) -> ApprovedForMortgage(x))", "all x.((RepaysReleaseOnTime(x) & Mortgage(x)) -> Approved(x))", "all x.(RepaysOnTimeLoans(x) -> ApprovedForHortain(x))", "all x.(RewardsLoansOnTime(x) -> ApprovedForMortgage(x))", "all x.((John(x) & RepaysLoansOnTime(x)) -> ApprovedForHypothecary(x))", "all x y.((John(x) & Loans(y) & RepaysOnTime(x,y)) -> ApprovedForMortgage(x))", "all x.((JohnRepaysLoansOnTime(x) & Loans(y)) -> ApprovedForMortgage(x))", "all x.((John(x) & RepaymentsLoansOnTime(x)) -> ApprovedForMortgage(x))", "all x.(RepaysLoansOnTime(x) -> ApprovedForMortgage(x))", "all x.((John(x) & RepaysLoansOnTime(x)) -> ApprovedForHonorary(x))"]}
{"id": "folio_train_943", "nl": "All students are members of the university.", "fol": "all x.(IsStudent(x) -> IsMemberOfUniversity(x))", "prediction": ["all x.(Student(x) -> MemberOfUniversity(x))", "all x.(Student(x) -> MemberOfUniversity(x))", "all x.(Student(x) -> (MemberOfUniversity(x)))", "all x.(Student(x) -> MemberOfUniversity(x))", "all x.(Student(x) -> MemberOfUniversity(x))", "all x.(Student(x) -> MemberOfUniversity(x))", "all x y.((Student(x) & University(y) & Member(x,y)) -> ParticipatesIn(x,y))", "all x.(Student(x) -> MemberOfUniversity(x))", "all x.(Student(x) -> MemberOfUniversity(x))", "all x.(Student(x) -> MemberOfUniversity(x))", "all x.(Student(x) -> MembersOfUniversity(x))", "all x.(Student(x) -> MembersOfUniversity(x))", "all x.(Student(x) -> MemberOfUniversity(x))", "all x.(Student(x) -> MemberOfUniversity(x))", "all x.(Student(x) -> MemberOfUniversity(x))", "all x.(Student(x) -> MemberOfUniversity(x))"]}
{"id": "folio_train_944", "nl": "All graduate students are students.", "fol": "all x.(IsGraduateStudent(x) -> IsStudent(x))", "prediction": ["all x.(GraduateStudent(x) -> Student(x))", "all x.(GraduateStudent(x) -> Student(x))", "all x.(GraduateStudent(x) -> Student(x))", "all x.(GraduateStudent(x) -> Student(x))", "all x.(GraduateStudent(x) -> Student(x))", "all x.(GraduateStudent(x) -> Student(x))", "all x.(GraduateStudent(x) -> Student(x))", "all x.(GraduateStudent(x) -> Student(x))", "all x.(GraduateStudent(x) -> Student(x))", "all x.(GraduateStudent(x) -> Students(x))", "all x.(GraduateStudent(x) -> Student(x))", "all x.(GraduateStudent(x) -> Student(x))", "all x.(GraduateStudent(x) -> Student(x))", "all x.(GraduateStudent(x) -> Student(x))", "all x.(GraduateStudent(x) -> Student(x))", "all x.(GraduateStudent(x) -> Student(x))"]}
{"id": "folio_train_945", "nl": "All PhD students are graduate students.", "fol": "all x.(IsPhDStudent(x) -> IsGraduateStudent(x))", "prediction": ["all x.(DoctoralStudent(x) -> GraduateStudent(x))", "all x.(ThesisStudent(x) -> GraduateStudent(x))", "all x.(PhDStudent(x) -> GraduateStudent(x))", "all x.(PhDStudent(x) -> GraduateStudent(x))", "all x.(PhD(x) -> GraduateStudent(x))", "all x.(PhDStudent(x) -> GraduateStudent(x))", "all x.(DoctoralStudent(x) -> GraduateStudent(x))", "all x.(PhD Student(x) -> GraduateStudent(x))", "all x.(PhDStudent(x) -> GraduateStudent(x))", "all x.(PhD(x) -> GraduateStudent(x))", "all x.(PhD Student(x) -> GraduateStudent(x))", "all x.(PhD Student(x) -> GraduateStudent(x))", "all x.(PhDStudent(x) -> GraduateStudent(x))", "all x.(PhDStudent(x) -> GraduateStudent(x))", "all x.((PhDStudent(x) & GraduateStudent(x)) -> GraduateStudent(x))", "all x.(Student(x) -> GraduateStudent(x))"]}
{"id": "folio_train_946", "nl": "Some PhD students have high IQs.", "fol": "exists x.(IsPhDStudent(x) & HasHighIQ(x))", "prediction": ["exists x.(PhDStudent(x) & HighIQ(x))", "exists x.(PhDStudent(x) & HighIQ(x))", "exists x.(DoctoralStudent(x) & HighIQ(x))", "exists x.(PhDStudent(x) & HighIQ(x))", "exists x.(PhD(x) & HighIQ(x))", "exists x.(PhDStudent(x) & HighIQ(x))", "exists x.(DoctoralStudent(x) & HighIQ(x))", "exists x.(PhDStudent(x) & HighIQ(x))", "exists x.(PhDStudent(x) & HighIQ(x))", "exists x.(PhDStudent(x) & HighIQ(x))", "exists x.(PhDStudent(x) & HighIQ(x))", "exists x.(DoctoralStudent(x) & HighIQ(x))", "exists x.(PhDStudent(x) & HighIQ(x))", "exists x.(PhD Student(x) & HighIQ(x))", "exists x.(DoctoralStudent(x) & HighIQ(x))", "exists x.(PostdoctoralStudent(x) & HighIQ(x))"]}
{"id": "folio_train_947", "nl": "If John is not a PhD student, then he is not a member of the university.", "fol": "(-IsPhDStudent(John) -> -IsMemberOfUniversity(John))", "prediction": ["all x.((John(x) & -DoctoralStudent(x)) -> -MemberOfUniversity(x))", "all x.((John(x) & -DoctoralStudent(x)) -> -MemberOfUniversity(x))", "all x.(((John(x) & PhDStudent(x)) -> -MemberOfUniversity(x))", "(PhDStudent(John) & -PhD student(John)) | -DeanOfUtilities(John))", "all x.((John(x) & -PhDStudent(x)) -> -PartOfUniversity(x))", "all x.((John(x) & -DoctoralStudent(x)) -> -MemberOfUniversity(x))", "all x.((John(x) & -PhDStudent(x)) -> -DeanOfUniversity(x))", "all x.((John(x) & -PhDStudent(x)) -> -MemberOfUniversity(x))", "all x.((John(x) & -PhDStudent(x)) -> -MemberOfUniversity(x))", "all x.((John(x) & -PhDStudent(x)) -> -MemberOfUniversity(x))", "all x.((John(x) & -DPhilStudent(x)) -> -DeanOfUniversity(x))", "all x.((John(x) & -DPhilStudent(x)) -> -MemberOfUniversity(x))", "all x.((John(x) & -PhDStudent(x)) -> -Member(x))", "all x.((John(x) & -PhDStudent(x)) -> -PhDStudent(x))", "all x.((John(x) & -PhDStudent(x)) -> -RetiredFaculty(x))", "all x.((John(x) & -PhDStudent(x)) -> -MemberOfUniversity(x))"]}
{"id": "folio_train_948", "nl": "If John has a high IQ, then he is a PhD student or a graduate student.", "fol": "(HasHighIQ(John) -> (IsPhDStudent(John) | IsGraduateStudent(John)))", "prediction": ["all x.(HighIQ(x) -> (PhD Student(x) | GraduateStudent(x)))", "all x.(HighIQ(x) -> (PhD student(x) | GraduateStudent(x)))", "(HighIQ(John) -> (DoctoralStudent(John) | GraduateStudent(John))))", "all x.(HighIQ(x) -> (PhD Student(x) | GraduateStudent(x)))", "all x.((John(x) & HighIQ(x)) -> (DoctoralStudent(x) | GraduateStudent(x)))", "all x.(HighIQ(x) -> (PhD student(x) | GraduateStudent(x)))", "all x.((John(x) & HighIQ(x)) -> (PhD student(x) | GraduateStudent(x)))", "all x.(HighIQ(x) -> (PhD student(x) | GraduateStudent(x)))", "exists x.(HighIQ(x) & (PhDStudente(x) | GraduateStudent(x)))", "all x.((John(x) & HighIQ(x)) -> (PhD Student(x) | GraduateStudent(x)))", "all x.(HighIQ(x) -> (PolytechnologistStudent(x) | GraduateStudent(x)))", "all x.(HighIQ(x) -> (PhDUST(x) | GraduateStudent(x)))", "all x.((John(x) & HighIQ(x)) -> (PhD student(x) | GraduateStudent(x)))", "all x.((John(x) & HighIQ(x)) -> (PhD Student(x) | GraduateStudent(x)))", "all x.(HighIQ(x) -> (PhD Student(x) | GraduateStudent(x)))", "all x.((John(x) & HighIQ(x)) -> (DoctoralStudent(x) | GraduateStudent(x)))"]}
{"id": "folio_train_949", "nl": "John has a high IQ.", "fol": "HasHighIQ(John)", "prediction": ["John has a highIQ(John)", "John has a highIQ.", "(HasHighIQ(John) & ClawsIn(John,Chandle,Senior))", "all x.(Jeff(x) -> HighIQ(x))", "John has a highIQ.", "all x.(John(x) -> HasHighIQ(x))", "John has a highIQ.", "John has a highIQ.", "John has a highIQ.", "John has a highIQ.", "John has a highIQ.", "John has a highIQ.", "(HugeIQ(John,John))", "(HighIQ(John) & Has(John,x))", "(HighIQ(John) of course)", "John RanksHighIQ(John)"]}
{"id": "folio_train_950", "nl": "John does not have a high IQ.", "fol": "-HasHighIQ(John)", "prediction": ["-HighIQ(John)", "all x y.((John(x) & IAQ(y) & -High(x,y)) -> -His(x,y))", "John X.((SignificantIQ(x) & -High(x))", "-highIQ(John)", "-HighIQ(John)", "-HumidIQ(John)", "John has a lowIQ.", "John's IQ -High(John))", "-(HighIQ(John))", "John -HasHighIQ(Jon))", "(-HighIQ(John) & -HighIQ(John)))", "John has not a highIQ.", "-HighIQ(John)", "-HighIQ(John)", "-HighIQ(John)", "-HighIQ(John)"]}
{"id": "folio_train_951", "nl": "John is a PhD student.", "fol": "IsPhDStudent(John)", "prediction": ["John is a PhDStudent(John))", "John is a PhDStudent.", "(PhD Student(John) & -PhD(John))", "(PhD student(john) & Student(John))", "John Browning is a PhDStudent(John)", "John is a DoctoralStudent(John)", "(PhD Student(John)", "(PhD Student(John)", "John is a PhDStudent(John)", "((John,Member(John) & PhDStudent(John)) -> DoctoralStudent(John))", "John is PhDStudent(John)", "(Doctor(John) & -Doctor(John))", "(PhD student(John) & -PhD student(John))", "(ProjectStudent(John) & -PhD Student(Joe))", "has a Ph.D.ScientistInMedicine(John)", "ALL x.(John(x) -> PhDStudent(x))"]}
{"id": "folio_train_952", "nl": "Belgium, France and Germany are European countries.", "fol": "(IsEuropeanCountry(Belgium) | IsEuropeanCountry(France) | IsEuropeanCountry(Germany))", "prediction": ["(EuropeanCountry(Belgium) & EuropeanCountry(France) & EuropeanCountry(Deutschland))", "(European(Belgium) & European(France) & European(Germany))", "(EuropeanCountry(Belgium,EuropeanCountry) & EuropeanCountry(France,EuropeanCountry))", "(EuropeanCountry( Belgium) & EuropeanCountry(France) & EuropeanCountry(Germany))", "(EconomicCountry(Belgium) & EuropeanCountry(France) & EuropeanCountry(Germany))", "(EuropeanCountry(Belgium) & EuroPayment(France) & EuroPayment(Deutschland))", "(EuropeanCountry(Belgium) & EuropeanCountry(France) & EuropeanCountry(Germany))", "(EuropeanCountries(Belgium) & EuropeanCountries(France) & EuropeanCountries(Germany))", "(EuropeanCountry(Belgium) & EuropeanCountry(France) & EuropeanCountry(Germany))", "all x.((Belgium(x) | France(x) | Germany(x)) -> EuropeanCountry(x))", "(EuropeanCountry(Belgium) & EuropeanCountry(France) & EuropeanCountry(Germany))", "(EuropeanCountry(Belgium) & EuropeanCountry(France) & EuropeanCountry(Germany))", "all x.(EuropeanCountry(x) -> (Belgium(x) | France(x) | Germany(x)))", "(EuropeanCountry(Breslau) | EuropeanCountry(France) | EuropeanCountry(Germany))", "all x.((Belgium(x) | France(x) | Germany(x)) -> EuropeanCountry(x))", "all x y.((Belgium(x) | France(x) | Germany(y)) -> EuropeanCountry(x))"]}
{"id": "folio_train_953", "nl": "Paris is the capital of France.", "fol": "IsCapitalOf(Paris,France)", "prediction": ["The CapitalOfFrance(Paris)", "(CapitalOf(Paris) & LocatedInCourseville(Paris,France))", "Paris, capitalefrance (Landmark(Paris))", "Paris is the capital of France.", "(Capital(Paris) & Capital(Paris))", "Paris is the capital(Paris).", "Paris, capitale de France,", "Paris is capital of France.", "Paris est la capitale de France.", "the capital(Paris,France)", "Paris CapitalOfFrance(pa)", "all x y.((Paris(x) & France(y)) -> Capital(x,y))", "(Capital(Paris,France))", "All x.(Paris(x) -> CapitalOf(x,France))", "(Head(Paris) & CapitalDwelling(Paris))", "(Capital(Paris) & CapitalOfFrance(Paris))"]}
{"id": "folio_train_954", "nl": "The Eiffel Tower is one of the main tourist attractions located in Paris.", "fol": "(IsTouristAttraction(EiffelTower) & IsLocatedIn(EiffelTower,Paris))", "prediction": ["All x.(EiffelTower(x) -> TouristAttraction(x))", "(MainTouristAttraction(EiffelTower,Paris)", "The EiffelTower is one of the mainAttractions(EssentialTours(e) LocatedInParis(e))", "Das EiffelTower ist eine der wichtigsten TouristAttractions(Pasad,Paris)", "Atractivit\u00e9(e) : EiffelTower.", "LocatedInParis,EiffelTower,is-a-mainTouristAttraction(e) & MainTouristAttraction(e/f))", "(MainTouristAttraction(y) & LocatedIn(y) & Hotel(z))", "The EiffelTower is one of the main tourist attractions located in Paris.", "Le EiffelTower est l'un des principaux attractions touristiques situ\u00e9so en Paris.", "L'EiffelTower est une des principales attractions touristiques \u00e0 Paris.", "L'EiffelTower (EiffelTower) est situ\u00e9e dans Paris.", "all x y.((EiffelTower(x) & Paris(y)) -> KnownAttraction(x,y))", "Das EiffelTower(e) & TouristAttraction(e) & LocatedInParis(e))", "La Tour EiffelTower(e) est une des principales attractions touristiques situ\u00e9es \u00e0 Paris.", "(SecretAttraction(EiffelTower) & LocatedIn(EiffelTower) & LocatedIn(EiffelTower,Paris))", "(MainTouristAttraction(EiffelTower,Paris))"]}
{"id": "folio_train_955", "nl": "Some people who live in Belgium speak French.", "fol": "exists x.(LivesIn(x,Belgium) -> SpeaksLanguage(x,French))", "prediction": ["exists x.(Member(x) & LivesInBelgium(x))", "exists x.(Belgian(x) & LivesIn(x,l))", "exists x.(Belgian(x) & LivesIn(x))", "exists x.(LivesInBelgium(x) & SpeaksFrench(x))", "exists x.(Living(x,Belgium) -> SpeakFrench(x))", "exists x.(InBelgiumArea(x) & Person(x) & LivesIn(x,Belgium))", "exists x.(LivingIn(x,Belgium) & SpeakFrench(x))", "exists x.(Belgian(x) & LivesIn(x,Belgium))", "exists x.(Belgian(x) & LivesIn(x,Belgium))", "exists x.(LivingInBelgium(x) & SpeaksFrench(x))", "exists x.(Belgian(x) & LivesIn(x,Belgian(x))", "exists x.(Person(x) & LivesIn(x,Belgium) & SpeakFrench(x))", "exists x.(Belgian(x) & LivesIn(x,Belgian))", "exists x.(BelgiumPerson(x) & LivesIn(x,Belgium) & SpeaksFrench(x))", "exists x.(Living(x,belgian) & Speak(x,French))", "exists x.(Person(x) & LivesIn(x,Belgium) & SpeaksFrench(x))"]}
{"id": "folio_train_956", "nl": "If John goes to Europe, he will see some tourist attractions.", "fol": "exists x.(TravelsTo(John,Europe) -> (SeesAttraction(John,x) & IsTouristAttraction(x)))", "prediction": ["all x.((Jon(x) & WeGoToEurope(x)) -> (SansTouristAttractions(x) | SeesTouristAttractions(x)))", "all x.((John(x) & ToEurope(x)) -> SeeTouristAttractions(x))", "all x.((John(x) & TravelsToEurope(x)) -> SeesTouristAttractions(x))", "(SeesTouristAttractions(John,Europe))", "all x.((John(x) & GoesToEurope(x)) -> SeesTouristAttractions(x))", "all x.(GoesToEurope(x) -> IdentifyTouristAttractions(x))", "all x.((Jeff(x) & GoesToEurope(x)) -> ManyTouristAttractions(x))", "all x.((John(x) & GoesToEurope(x)) -> ThereOfTourismAttractions(x))", "all x.(GoesTo(x,Europe) -> SeesTouristAttractions(x))", "all x.((John(x) & GoesToEurope(x)) -> SeeingTouristAttractions(x))", "all x y.((John(x) & Europe(y)) -> SeesTouristAttractions(x,y))", "all x.((John(x) & GoesToEurope(x)) -> SeesTouristAttractions(x))", "all x.(Europe(x) -> (SeeTourismAttractions(x,y) & John(x,z)))", "all x.((John(x) & GoesToEurope(x)) -> SeeSeasuringTouristAttractions(x))", "if JohnGoesToEurope(John) i.e.TouristAttractions(John,europe))", "all x.(Europe(x) -> (SeeksTouristAttractions(x) & John(x)))"]}
{"id": "folio_train_957", "nl": "John speaks French.", "fol": "SpeaksLanguage(John,French)", "prediction": ["JohnsPhone(John) -> SpeakingFrench(John))", "(SpeaksFrench(John) & JohnSpeaksFrench(John))", "-SpansFrench(John)", "-SpeaksFrench(John)", "(SpeaksFrench(John,English))", "(SpeaksFrench(John) -> SpeaksFrench(John))", "John SpeaksFrench(John,y)", "*(Jean(Join) & French(Join))", "(SpeaksFrench(John) | -SpeaksFrench(John)))", "John speaks French.", "(Spring(John,French) & Reads(John,French))", "-SpeaksFrench(John)", "speaks French.", "(SpeaksFrench(John) -> SpeaksFrench(John))", "John speaks French.", "John is French Speaker."]}
{"id": "folio_train_958", "nl": "If John goes to Europe, he will see the Eiffel Tower.", "fol": "(TravelsTo(John,Europe) -> SeesAttraction(John,EiffelTower))", "prediction": ["all x.(EuropeInTo(x) -> WillSeeEisenwall(x))", "all x.((John(x) & West (Europe)) -> -WaitingTower(x))", "All x.(GoesTo(x,Europe) -> SeesEisenfelter(x))", "all x.(Europe(x) -> TheEiffelTower(x))", "all x.((John(x) & ToEurope(x)) -> SeesEisenloop(x))", "all x.((John(x) & GoesToEurope(x)) -> WillSeeEisenschwarf(x))", "all x.((John(x) & GoesToEurope(x)) -> AimsToSeeEiffelTower(x))", "all x.(GoesToEurope(x) -> (EisenfellTower(x) | EiffelTower(x)))", "all x.((John(x) & ToEurope(x)) -> SeesEiffelTower(x))", "all x.((Jon(x) & GoesToEurope(x)) -> SeesEiffelTower(x))", "All x.((John(x) & ToEurope(x)) -> SeesEiffelTower(x))", "All x.(EuropeanGoal(x) -> SitsEierffelTower(x))", "all x.((Jon(x) & HeadsToEurope(x)) -> SeesEisenstock(x))", "all x.((JeffreyGoesToEurope(x)) -> SeesEisenstock(x))", "all x.(JonWalksTo(x,Europe) -> SeesEiffelTower(x))", "all x.((John(x) & GoesToEurope(x)) -> SeesEisenburgerTower(x))"]}
{"id": "folio_train_959", "nl": "The Eiffel Tower is located in the capital of France.", "fol": "exists x.(IsLocatedIn(EiffelTower,x) & IsCapitalOf(x,France))", "prediction": ["L'EisenburgerTower(x) & CapitalOfFrance(x))", "The EiffelTowerVilla inCapitalOfFrance(i)", "L'eiffelTower(e) se trouve en capitale de France(e).", "all x.(EiffelTurm(x) -> LocationInCapitalOf(x,France))", "L'EiffelTower est situ\u00e9e dans la capitale de France.", "The EiffelTower is located in CapitalOfFrance(eiffelTower,france)", "(LocatedInCapital(EiffelTower) | CityOfFrance(EiffelTower))", "Das EiffelTower(e) & CapitalOfFrance(e)", "the EiffelTower(Eisenaut\u00e9)", "La capitale de France, la EiffelTower, est situ\u00e9e \u00e0 l'h\u00f4tel.", "SituatedInCapitalOfFranceEisenland(EiffelTower)", "located in the capital of France, Paris.", "all x y.((EiffelTower(x) & Capital(y) & France(y)) -> LocatedIn(x,y))", "Le EiffelTower est situ\u00e9e dans la capitale de France.", "LocatedInCapitalOf(EiffelTower,France)", "Le EiffelTower est situ\u00e9e \u00e0 l'est de la capitale de France."]}
{"id": "folio_train_960", "nl": "John lives in Belgium.", "fol": "LivesIn(John,Belgium)", "prediction": ["John lives in Belgium.", "John lives in Belgium.", "John lives in Belgium.", "-LivingInBelgium(John)", "John (livesIn(John,Belgium))", "-LisesIn(John,Belgium)", "John lives in Belgium.", "John lives in Belgium.", "John lives in Belgium.", "John lives in Belgium.", "John lives with his family in Belgium.", "(LivingInBelgium(John) | LivingInBelgium(John)))", "John lives InBelgium.", "John lives in Belgium.", "John lives in Belgium.", "(LivesInBelgium(John,Belgium) -> Wants(John,Belgium))"]}
{"id": "folio_train_961", "nl": "All sports cars are loud.", "fol": "all x.(IsSportsCar(x) -> IsLoudCar(x))", "prediction": ["all x.(SportsCar(x) -> Loud(x))", "all x.(SportsCar(x) -> Loud(x))", "all x.(SportsCar(x) -> Loud(x))", "all x.(SportsCar(x) -> Loud(x))", "all x.(SportsCar(x) -> Loud(x))", "all x.(SportsCar(x) -> Loud(x))", "all x.(SportsCar(x) -> Loud(x))", "all x.(SportsCar(x) -> Loud(x))", "all x.(SportsCar(x) -> Loud(x))", "all x.(SportsCar(x) -> Loud(x))", "all x.(SportsCar(x) -> Loud(x))", "all x.(SportsCar(x) -> Loud(x))", "all x.(SportsCar(x) -> Loud(x))", "all x.(SportsCar(x) -> Loud(x))", "all x.(SportsCar(x) -> Loud(x))", "all x.(SportsCar(x) -> Loud(x))"]}
{"id": "folio_train_962", "nl": "No loud cars are electric.", "fol": "all x.(IsLoudCar(x) -> -IsElectricCar(x))", "prediction": ["-exists x.(LoudCar(x) & ElectricCar(x))", "-exists x.(LoudCar(x) & ElectricCar(x))", "-exists x.(LoudCar(x) & Electric(x))", "-(LoudCar(x) & Electric(x))", "-exists x.(LoudCar(x) & Electric(x))", "all x.(LoudCar(x) -> -Electric(x))", "all x.((LoudCar(x) & -LoudCar(x)) -> Electric(x))", "-exists x.(LoudCar(x) & Electric(x))", "-exists x.(Loud(x) & Car(x) & Electric(x))", "-exists x.(LoudCar(x) & Electric(x))", "-exists x.(LoudCar(x) & Electric(x))", "-exists x.(LoudCar(x) & Electric(x))", "-exists x.(LoudCar(x) & Electric(x))", "-exists x.(LoudCar(x) & Electric(x))", "-exists x.(LoudCar(x) & Electric(x))", "-exists x.(LoudCar(x) & Electric(x))"]}
{"id": "folio_train_963", "nl": "If a car is a Ferrari, then it is a sports car.", "fol": "all x.(IsFerrari(x) -> IsSportsCar(x))", "prediction": ["all x.((Car(x) & Ferrari(x)) -> SportsCar(x))", "all x.((Car(x) & Ferrari(x)) -> SportsCar(x))", "all x.(Firefia(x) -> SportsCar(x))", "all x.((Car(x) & Ferrari(x)) -> SportsCar(x))", "all x.((Car(x) & Ferrari(x)) -> SportsCar(x))", "all x.((Car(x) & Ferrari(x)) -> SportsCar(x))", "all x.(Ferrari(x) -> SportsCar(x))", "all x.((Car(x) & Ferrari(x)) -> SportsCar(x))", "all x.((Car(x) & Ferrari(x)) -> SportsCar(x))", "all x.((Car(x) & Ferrari(x)) -> SportsCar(x))", "all x.((Car(x) & Ferrari(x)) -> SportsCar(x))", "all x.((Car(x) & Ferrari(x)) -> SportsCar(x))", "all x.((Car(x) & Ferrari(x)) -> SportsCar(x))", "all x.((Car(x) & Ferrari(x)) -> SportsCar(x))", "all x.((Car(x) & Ferrari(x)) -> SportsCar(x))", "all x.((Car(x) & Ferrari(x)) -> SportsCar(x))"]}
{"id": "folio_train_964", "nl": "All cars made in Maranello are Ferrari", "fol": "all x.(IsMadeInMaranello(x) -> IsFerrari(x))", "prediction": ["all x.((Car(x) & MadeInMaranello(x)) -> Ferrari(x))", "all x.((Car(x) & MadeInMaranello(x)) -> Ferrari(x))", "all x.((Car(x) & MadeInMaranello(x)) -> Ferrari(x))", "all x.((Car(x) & MadeInMaranello(x)) -> Ferrari(x))", "all x.(Car(x) -> Ferrari(x))", "all x.((Cars(x) & MadeInMadeInMaranello(x)) -> Ferrari(x))", "all x.((Car(x) & MadeInMaranello(x)) -> Ferrari(x))", "all x.((Car(x) & MadeInMaranello(x)) -> Ferrari(x))", "all x.((Car(x) & MadeInMaranello(x)) -> Ferrari(x))", "all x.((Car(x) & MadeInMaranello(x)) -> Ferrari(x))", "all x.(Maranello(x) -> Ferrari(x))", "all x.(MadeInMaranello(x) -> Ferrari(x))", "all x.((Car(x) & MadeInMaranello(x)) -> Ferrari(x))", "all x.((Car(x) & MadeInMaranello(x)) -> Ferrari(x))", "all x.((Car(x) & MadeInMaranello(x)) -> Ferrari(x))", "all x.((Car(x) & MadeInMaranello(x)) -> Ferrari(x))"]}
{"id": "folio_train_965", "nl": "If Prius is neither a sports car nor a loud car, then Prius is a Maranello-made car or a loud car.", "fol": "all x.(((-IsSportsCar(Prius) | -IsLoudCar(Prius)) -> IsMadeInMaranello(Prius)) | IsLoudCar(Prius))", "prediction": ["all x.((Prius(x) & -SportsCar(x) & -LoudCar(x)) -> (MaranelloMadeCar(x) | LoudCar(x)))", "all x.((Rivers(x) & -SportsCar(x) & -LoudCar(x)) -> (MaranelloMadeCar(x) | LoudCar(x)))", "all x.((Prius(x) & -SportsCar(x) & -LoudCar(x)) -> (MaranelloMadeCar(x) | LoudCar(x)))", "all x.((SportsCar(x) & -LoudCar(x)) -> (MaranelloMadeCar(x) | LoudCar(x)))", "all x.(((SportsCar(x) & -LoudCar(x)) -> (MaranelloMadeCar(x) | LoudCar(x)))", "all x.((Soccer(x) & -MadeRiotor(x)) -> (MaranelloMadeCar(x) | LoudCar(x)))", "all x.(((MaranelloMadeCar(x) | LoudCar(x))) -> CanCall(x))", "all x.((Prius(x) & -SportsCar(x) & -LoudCar(x)) -> (MaranelloMakedCar(x) | LoudCar(x)))", "all x.((Prius(x) & -SportsCar(x) & -LoudCar(x)) -> (MaranelloMadeCar(x) | LoudCar(x)))", "all x.((Prius(x) & -(SportsCar(x) | LoudCar(x))) -> (MaranelloMadeCar(x) | LoudCar(x)))", "all x.((Prius(x) & -SportsCar(x) & -LoudCar(x)) -> (MaranelloMadeCar(x) | LoudCar(x)))", "all x.((SoccerCar(x) & -LoudCar(x)) -> (MaranelloMadeCar(x) | LoudCar(x)))", "all x.((Prius(x) & -SportsCar(x) & -LoudCar(x)) -> (MaranelloMadeCar(x) | LoudCar(x)))", "all x.((StandardCar(x) | LoudCar(x)) -> (MaranelloMadeCar(x) | LoudCar(x)))", "all x.((Prius(x) & -SportsCar(x) & -LoudCar(x)) -> (MaranelloMadeCar(x) | LoudCar(x)))", "all x.((SportsCar(x) & -LoudCar(x)) -> (MaranelloMadeCar(x) | LoudCar(x)))"]}
{"id": "folio_train_966", "nl": "Prius is an electric car.", "fol": "IsElectricCar(Prius)", "prediction": ["all x.(Prius(x) -> ElectricCar(x))", "all x.(Prius(x) -> ElectricCar(x))", "all x.(Prius(x) -> ElectricCar(x))", "and Prius(Priscius)", "all x.(Prius(x) -> ElectricCar(x))", "all x.(Prius(x) -> ElectricCar(x))", "all x.(Prius(x) -> ElectricCar(x))", "Prius is electriccar.", "all x.(Prius(x) -> ElectricCar(x))", "all x.(Prius(x) -> ElectricCar(x))", "all x.(Prius(x) -> ElectricCar(x))", "(ElectricCar(Prius) & ElectricCar(Prius))", "is electriccar(Prius)", "(ElectricCar(Prius) | ElectricCar(Prius)))", "(ElectricCar(prius) | ElectricCar(p)))", "all x.(Prius(x) -> ElectricCar(x))"]}
{"id": "folio_train_967", "nl": "Prius is not an electric car.", "fol": "-IsElectricCar(Prius)", "prediction": ["(-ElectricCar(Prius) & -ElectricCar(Prius))", "-ElectricCar(Prius)", "all x.(Prius(x) -> -ElectricCar(x))", "(-ElectricCar(Prius) -> -ElectricCar(Prius))", "all x.(Prius(x) -> -ElectricCar(x))", "-ElectricCar(Prius)", "-ElectricCar(Prius)", "-ElectricCar(Prius)", "all x.(Prius(x) -> -ElectricCar(x))", "(-ElectricCar(Prius) & -ElectricCar(Prius))", "Exists x.(Prius(x) & -ElectricCar(x))", "is -ElectricCar(prius)", "(Prius: -ElectricCar(Prius))", "(ElectricCar(Prius) & -ElectricCar(Prius))", "-ElectricCar(Prius)", "(-ElectricCar(Prius))"]}
{"id": "folio_train_968", "nl": "Prius is a Maranello-made car.", "fol": "IsMadeInMaranello(Prius)", "prediction": ["all x.(Prius(x) -> MadeByMaranello(x))", "all x.(Prius(x) -> MadeByMaranello(x))", "Prius is a Maranello-made car.", "all x.(Prius(x) -> MadeByMaranello(x))", "all x.(Prius(x) -> CarMadeByMaranello(x))", "Prius is a MaranelloMadeCar(x)", "all x.(Prius(x) -> MaranelloCar(x))", "All x.(Prius(x) -> MadeInMaranello(x))", "all x.(Prius(x) -> MadeByMaranello(x))", "all x.(Prius(x) -> MaranelloMadeCar(x))", "all x.((Car(x) & MaranelloMade(x)) -> Prius(x))", "all x.(Prius(x) -> MadeOfMaranello(x))", "all x.(Prius(x) -> MaranelloMadeCar(x))", "all x.(Prius(x) -> MaranelloMadeCar(x))", "all x.(Prius(x) -> MadeByMaranello(x))", "CAR(Privus) -> MadeByMaranello(Car))"]}
{"id": "folio_train_969", "nl": "If Prius is a Ferrari or a loud car, then Prius is an electric car.", "fol": "all x.((IsFerrari(Prius) | IsLoudCar(Prius)) -> IsElectricCar(Prius))", "prediction": ["all x.((Ferrari(x) | Loud(x)) -> ElectricCar(x))", "all x.((Prius(x) & (Ferrari(x) | LoudCar(x))) -> ElectricCar(x))", "all x.(((Marion(x) | LoudCar(x))) -> ElectricCar(x))", "all x.((Prius(x) & Car(x)) -> ElectricCar(x))", "all x.((Ferrari(x) | LoudCar(x)) -> ElectricCar(x))", "all x.((Prius(x) & (Ferrari(x) | LoudCar(x))) -> ElectricCar(x))", "all x.((Prius(x) & (Ferrari(x) | LoudCar(x))) -> ElectricCar(x))", "all x.((River(x) & (River(x) | LoudCar(x))) -> ElectricCar(x))", "all x.((Ferrari(x) | LoudCar(x)) -> ElectricCar(x))", "all x.(Ferrari(x) | LoudCar(x)) -> ElectricCar(x))", "all x.((Ferrari(x) | LoudCar(x)) -> ElectricCar(x))", "all x.((Ferrari(x) | LoudCar(x)) -> ElectricCar(x))", "all x.((Fresh(x) | LoudCar(x)) -> ElectricCar(x))", "all x.((Ferrari(x) | LoudCar(x)) -> ElectricCar(x))", "all x.(((Prius(x) & (Ferrari(x) | LoudCar(x))) -> ElectricCar(x))", "all x.(Ferry(x) | LoudCar(x)) -> ElectricCar(x))"]}
{"id": "folio_train_970", "nl": "If something is a plant, then it is not a cute animal.", "fol": "all x.(IsPlant(x) -> -IsCuteAnimal(x))", "prediction": ["all x.(DenimToPlant(x) -> -CrazyAnimal(x))", "all x.((Pest(x) & -CleakyAnimal(x)) -> -Pest(x))", "all x.((Plant(x)) -> -CrazyAnimal(x))", "all x.(Plant(x) -> -CuteAnimal(x))", "all x.((Plant(x) & -CuteAnimal(x)) -> -CuteAnimal(x))", "all x.(Plant(x) -> -CrazyAnimal(x))", "all x.(Plant(x) -> -SnazzyAnimal(x))", "all x.((Plant(x) & -CuteAnimal(x)) -> -PopiestAnimal(x))", "all x.((Plant(x) & -ClicheAnimal(x)) -> -CostumousAnimal(x))", "all x.((Plant(x) & -CuteAnimal(x)) -> -Cush(x))", "all x.(Plant(x) -> -CroicaAnimal(x))", "all x.((Plant(x) & -CrazyAnimal(x)) -> -CuteAnimal(x))", "all x.((Plant(x) & -CUTEAnimal(x)) -> -ClaireAnimal(x))", "all x.(((Pest(x) & Animal(x)) -> -Curious(x))", "all x.((Plant(x)) -> -CrazyAnimal(x))", "all x.((Plant(x) & -CostlyAnimal(x)) -> -CostlyAnimal(x))"]}
{"id": "folio_train_971", "nl": "All flowers are plants.", "fol": "all x.(IsFlower(x) -> IsPlant(x))", "prediction": ["all x.(Flower(x) -> Plant(x))", "all x.(Flower(x) -> Plant(x))", "all x.(Flower(x) -> Plant(x))", "all x.(Flower(x) -> Plant(x))", "all x.(Flower(x) -> Plant(x))", "all x.(Flower(x) -> Plant(x))", "all x.(Flower(x) -> Plant(x))", "all x.(Flower(x) -> Plant(x))", "all x.(Flower(x) -> Plant(x))", "all x.(Flower(x) -> Plant(x))", "all x.(Flower(x) -> Plant(x))", "all x.(Flower(x) -> Plant(x))", "all x.(Flower(x) -> Plant(x))", "all x.(Flower(x) -> Plant(x))", "all x.(Flower(x) -> Plant(x))", "all x.(Flower(x) -> Plant(x))"]}
{"id": "folio_train_972", "nl": "Every kitten is a cute animal.", "fol": "all x.(IsKitten(x) -> IsCuteAnimal(x))", "prediction": ["all x.(Kitten(x) -> CuteAnimal(x))", "all x.(Kitten(x) -> CuteAnimal(x))", "all x.(Kitten(x) -> CuteAnimal(x))", "all x.(Kitty(x) -> CuteAnimal(x))", "all x.(Kitty(x) -> CuteAnimal(x))", "all x.(Kitten(x) -> CuteAnimal(x))", "all x.(Kitty(x) -> CuteAnimal(x))", "all x.(Kitten(x) -> CuteAnimal(x))", "all x.(Kitten(x) -> CuteAnimal(x))", "all x.(Kitty(x) -> CuteAnimal(x))", "all x.(Kitten(x) -> CuteAnimal(x))", "all x.(Kitten(x) -> CuteAnimal(x))", "all x.(Kitten(x) -> CuteAnimal(x))", "all x.(Kitten(x) -> CuteAnimal(x))", "all x.(Kitten(x) -> CuteAnimal(x))", "all x.(Kitten(x) -> CuteAnimal(x))"]}
{"id": "folio_train_973", "nl": "If something is grown in a garden, then it is a flower.", "fol": "all x.(IsGrownInGarden(x) -> IsFlower(x))", "prediction": ["all x.((GrownInGarden(x) & Flower(x)) -> Flowers(x))", "all x.(GrownInGarden(x) -> Flower(x))", "all x.((Garden(x) & GrownIn(x,Garden)) -> Flower(x))", "all x.((GrownInGarden(x) & Flower(x)) -> Flower(x))", "all x.((GrownInGarden(x) & Flower(x)) -> GrownInGarden(x))", "all x.((GrownInGarden(x) & Flowers(x)) -> Flower(x))", "all x.((Garden(x) & GrownIn(x,Garden)) -> Flower(x))", "all x.(GrownInGarden(x) -> Flower(x))", "all x y.((Garden(x) & GrownIn(x,y)) -> Flower(x))", "all x.((Garden(x) & GrownIn(x,x)) -> Flowers(x))", "exists x.(Garden(x) & GrownIn(x,y))", "all x y.((GrownInGarden(x) & Thrive(y)) -> Flower(x))", "all x.((GrownInGarden(x) & Flower(x)) -> GrownInGarden(x))", "all x.((GrownInGarden(x) & Flower(x)) -> GrownInGarden(x))", "all x.((Garden(x) & GrownIn(x,Garden)) -> Flower(x))", "all x.((GrownInGarden(x) & Flower(x)) -> GrownInGarden(x))"]}
{"id": "folio_train_974", "nl": "Piper is a kitten or a cute animal.", "fol": "(IsKitten(Piper) | IsCuteAnimal(Piper))", "prediction": ["exists x.(Piper(x) & (Kitty(x) | CuteAnimal(x)))", "all x.(Piper(x) -> (Kitty(x) | CuteAnimal(x)))", "all x.(Piper(x) -> (Kitty(x) | CuteAnimal(x)))", "all x.(Piper(x) -> (Kitty(x) | CUTEAnimal(x)))", "all x.(Pipeer(x) -> (Kitten(x) | CuteAnimal(x)))", "all x.(Piper(x) -> (Kitty(x) | CuteAnimal(x)))", "all x.(Piper(x) -> (Kitty(x) | CuteAnimal(x)))", "all x.(Piper(x) -> (Knicker(x) | CuteAnimal(x)))", "exists x.(Piper(x) & (Kitten(x) | CuteAnimal(x)))", "all x.(Piper(x) -> (Kitten(x) | CuteAnimal(x)))", "all x.(Piper(x) -> (Kitty(x) | CuteAnimal(x)))", "all x.(Piper(x) -> (Kitty(x) | CuteAnimal(x)))", "all x.(Piper(x) -> (Kitty(x) | CuteAnimal(x)))", "all x.(Piper(x) -> (Kitty(x) | CuteAnimal(x)))", "all x.(Piper(x) -> (Knife(x) | CuteAnimal(x)))", "(Kitten(Piper) | CuteAnimal(Piper))"]}
{"id": "folio_train_975", "nl": "Piper was grown in a garden.", "fol": "IsGrownInGarden(Piper)", "prediction": ["all x.(Piper(x) -> GrownInGarden(x))", "all x.(Piper(x) -> GrownInGarden(x))", "all x.(Piper(x) -> GrownInGarden(x))", "all x.(Piper(x) -> GrownInGarden(x))", "all x.(Piper(x) -> GrownInGarden(x))", "all x y z.((Piper(x) & Garden(y) & Garden(z)) -> GrownIn(x,y,z))", "all x.(Piper(x) -> GrownInGarden(x))", "all x.(Piper(x) -> GrownInGarden(x))", "all x.(Piper(x) -> GrownInGarden(x))", "all x.(Piper(x) -> GrownInGarden(x))", "all x.(Piece(x) -> GrownInGarden(x))", "all x.(Piper(x) -> GrazedInGarden(x))", "all x y z.((Piper(x) & Garden(y) & Garden(z)) -> GrownIn(x,y,z))", "all x y.((Piper(x) & Garden(y)) -> GrownIn(x,y))", "all x.(Piper(x) -> GrownInGarden(x))", "the Piper was grownInGarden(Piper)"]}
{"id": "folio_train_976", "nl": "Piper was not grown in a garden.", "fol": "-IsGrownInGarden(Piper)", "prediction": ["-GrownInGarden(Pipeer)", "all x.(Piper(x) -> -GrownInGarden(x))", "(-GrownInGarden(Pipeer))", "all x.(Piper(x) -> -GrownInGarden(x))", "all x.(Piper(x) -> -GrownInGarden(x))", "exists x.(Piper(x) & -GrownInGarden(x))", "all x.(Piper(x) -> -GrownInGarden(x))", "(GrownInGarden(Piper) & -GrownInGarden(Piper))", "(-GrownInGarden(Piper))", "all x.(Piper(x) -> -GrownInGarden(x))", "all x.(Piper(x) -> -GrownInGarden(x))", "(-GrownInGarden(Piper)", "all x.(Piper(x) -> -GrownInGarden(x))", "(-GrownInGarden(Piper)", "all x.(Piper(x) -> -GrownInGarden(x))", "piper(p) & -GrownInGarden(p))"]}
{"id": "folio_train_977", "nl": "Piper is a kitten.", "fol": "IsKitten(Piper)", "prediction": ["all x.(Piper(x) -> Kitten(x))", "(Kitty(Piper) & Kitty(Piper))", "(Kitt(Piper) & Kitten(Piper))", "(Kitten(Piper) & Kitten(Piper))", "all x.(Piper(x) -> Kitten(x))", "(Kitten(Piper) & Kitten(Piper))", "(Kitten(Piper) -> Kitten(Piper))", "all x.(Piper(x) -> Kitten(x))", "(Knife(Piper) & Kitten(Piper))", "all x.(Piper(x) -> Kitten(x))", "all x.(Piper(x) -> Kitten(x))", "(Kitten(Piper) & Kitty(Piper))", "(Kitten(Piper) & Kitten(Piper))", "all x.(Piper(x) -> Kitten(x))", "(Quilt(Pieper) & Kitten(Pieter))", "(Kitty(Piper) & Puppy(Piper))"]}
{"id": "folio_train_978", "nl": "Guam has participated in the Winter Olympics.", "fol": "ParticipatedInEvent(Guam,WinterOlympicsEvent)", "prediction": ["Guam has been involved in WinterOlympics.", "all x.(WinterOlympics(x) -> ParticipationGuam(x))", "all x.(Guam(x) -> ParticipatedInWinterOlympics(x))", "Guam ParticipatesInWinterOlympics(Guam)", "(PrimeInWinterOlympics(Guam))", "all x.(Guam(x) -> ParticipatesInWinterOlympics(x))", "all x.(Guam(x) -> ParticipatesInWinterOlympics(x))", "(ParticipatedInWinterOlympics(guam,Olympics) & -ParticipatedInSommer(guam,Olympics))", "all x.(Guam(x) -> ParticipatedInWinterOlympics(x))", "Guam has ParticipatedInWinterOlympics(guam,j)", "all x.((Guam(x) & WinterOlympics(y)) -> ParticipatedIn(x,y))", "all x.(Guam(x) -> ParticipatesInWinterOlympics(x))", "all x.(Guam(x) -> ParticipatesInWinterOlympics(x))", "In the past few years, Guam has participated in the Winter Olympics.", "all x.(Guam(x) -> ParticipatedInWinterOlympics(x))", "all x.(Guam(x) -> ParticipatedInWinterOlympics(x))"]}
{"id": "folio_train_979", "nl": "In 1988, the Winter Olympics were held in Calgary.", "fol": "(IsYear(Y1988) -> EventHeldAt(WinterOlympicsEvent,Calgary))", "prediction": ["all x.(WinterOlympics(x) -> HeldInCalgary(x))", "all x.(WinterOlympics(x,y) -> HeldInCalgary(y))", "all x y.((WinterOlympics(x) & Calgary(y) & HeldIn(x,y)) -> HeldIn(x,y))", "all x y z w.((WinterOlympics(x,y) & Calgary(z) & In(x,y) & In(y,z)) -> HeldIn(x,w))", "In 1988, the WinterOlympics were held in Calgary.", "all x y z.((WinterOlympics(x) & Calgary(y) & 1988(z)) -> HeldIn(x,y,z))", "(WinterOlympicsInColorado(88))", "(WeatherOlympics(88,California) & InLocala(88,California))", "1988, Calgary hosted the WinterOlympics(x).", "In 1988, Calgary hosted a WinterOlympics (WinterOlympics(x) & HeldIn(x,y))", "(January 2008) & (WinterOlympics(w) | WinterOlympics(w)))", "In 1988, the WinterOlympicsRecordedInCalgary(x)", "1988, The WinterOlympics(w) & HeldInCalifornia(w))", "(WindOlympics(x) & HeldInCalifornia(x))", "The Winter Olympics were held in Calgary in 1988.", "All x,y.((WindOlympics(x) & Calgary(y)) -> HeldIn(x,y))"]}
{"id": "folio_train_980", "nl": "Guam sent an athlete to the Calgary Winter Olympics.", "fol": "(EventHeldAt(WinterOlympicsEvent,Calgary) -> SentAthlete(Guam))", "prediction": ["all x y.((GuamAthlete(x) & CalgaryWinterOlympics(y)) -> SendsTo(x,y))", "all x y z.((GuamAthlete(x) & CalgaryWindOlympics(y) & Athlete(z)) -> SendedTo(x,y,z))", "all x.((Guam(x) & Athlete(y)) -> Athlete(y))", "Guam sents AthleteToCalgaryWinterOlympics(Guam))", "all x y.((Guam Athlete(x) & CalgaryWinterOlympics(y)) -> SentTo(x,y))", "all x.(Guam(x) -> sentAthlete(x))", "all x y.((Guam(x) & Athlete(y)) -> CalgaryWeatherOlympics(x,y))", "all x y.((GuamAthlete(x) & CalgaryWinterOlympics(y)) -> SendsTo(x,y))", "all x y z.((Guam(x) & Athlete(y) & WinterOlympics(z)) -> SendsTo(x,y,z))", "all x y.((GuamAthlete(x) & CalgaryWeather(y)) -> SaidAthlete(x,y))", "all x.(GuamSendsAthleteToClarkfordWednesdayOlympics(x) -> SendsToGoldenOlympics(x,x))", "all x.(GamingAthlete(x) -> CalgaryOlympics(x))", "all x y.((Guam(x) & Athlete(y)) -> SentToWinterOlympics(x,y))", "all x y.((Guam(x) & Athlete(y)) -> SendsTo(x,y))", "all x y z.((Guam(x) & Athlete(y) & CalgaryWinterOlympics(z)) -> SentTo(x,y,z))", "(SentAthlete(Guam) -> CalgaryWinterOlympics(Guam))"]}
{"id": "folio_train_981", "nl": "If Guan sent an athlete to the Calgary Winter Olympics, then it participated in the Calgary Winter Olympics.", "fol": "(SentAthlete(Guam) -> ParticipatedInEvent(Guam,WinterOlympicsEvent))", "prediction": ["all x y.((Guan(x) & Athlete(y) & Calgary(z) & SentToBalanceWinterOlympics(x,y,z)) -> ParticipatesInBalanceWinterOlympics(x))", "all x.((Guan(x) & Athlete(x) & CalgaryWinterOlympics(x)) -> ParticipatedInCalgaryWinterOlympics(x))", "all x y.((Guan(x) & Athlete(y) & CalgaryWinterOlympics(x,y)) -> ParticipatedInCulver(y,z))", "all x y.((Guan(x) & Athlete(y) & CameToCalgaryWhiteHouse(x)) -> ParticipatedInCalgaryWinterHouse(x))", "all x y.((Guan(x) & Athlete(y) & sentTo(x,y)) -> ParticipatedIn(y,x))", "all x.((Guan(x) & sentAthleteToCalgary(x)) -> ParticipatedInCalgary(x))", "all x y.((Guan(x) & Athlete(y) & SentToCaliforniaWeather(x,y)) -> ParticipatedInCaliforniaWeather(y))", "all x.((Guan(x) & SendsAthleteToCalgaryWhiteOffers(x)) -> ParticipatedInCalgaryWhiteOffers(x))", "all x.((Guan(x) & sentAthlete(x) & CalgaryWinterOlympics(x)) -> ParticipatedInAthletes(x, CalgaryWinterOlympics))", "all x y.((Guan(x) & Athlete(y) & SentToCalgaryWinterOpenings(x,y)) -> ParticipatedInCalgaryWinterOpenings(y))", "all x y.((Guan(x) & Athletic(y) & SeatedTo(x,y)) -> ParticipatedIn(x,y))", "all x y.((Guan(x) & Athlete(y) & SentToCalgaryWinterOlympics(x,y)) -> ParticipatedInCalgaryWinterOlympics(z,y))", "all x.((Guan(x) & EnvoyedAthleteToCalgaryWarmOlympics(x)) -> ParticipatedInCalgaryWarmOlympics(x))", "all x.((Guan(x) & sentAthleteToCalgaryWinter(x)) -> ParticipatedInCalgaryWinterOlympics(x))", "all x y.((Guan(x) & Athlete(y) & CalgaryWinterOlympics(x,y)) -> ParticipatedInCalibulo.(x,y))", "all x.((Guan(x) & sentAthleteToCalgaryWinterOlympics(x)) -> ParticipatedInCalgaryWinterOlympics(x))"]}
{"id": "folio_train_982", "nl": "Judd Bankert is the only athlete from Guam who has ever competed in the Winter Olympics.", "fol": "(IsFrom(Bankert,Guam) & ParticipatedInEvent(Bankert,WinterOlympicsEvent))", "prediction": ["all x.((Athlete(x) & FromGuam(x)) -> StartedConcertingVolleyballs(x))", "All x.((Athlete(x) & Guam(x) & CompetesInWinterOlympics(x)) -> JuddBankert(x))", "all x.((Athlete(x) & JuddBergert(x) & GuamAthlete(x)) -> CompetedInTheWinterOlympics(x))", "only Guamanian AthleteToCompeteInIslandOlympics(JuddBankert)", "Judd Bankert - Official Athlete(Judd) Bankert(Judd))", "All x y.((Athlete(x) & Guam(y) & CompetedInWinterOlympics(x,y)) -> JuddBarkert(x))", "(QualifiedInWinterOlympics.JuddBankert(Judd))", "Judd Bankert is Guam's only AthleteFromGuam(x) & CompetedInWinterOlympics(x))", "Judd Bankert (Athlete(guam) - EverTroducedInWintersOlympics(guam))", "Judd Bankert is the only AthleteFromGuam who ever competedInWinterOlympics(JuddBriefert,Guam)", "Judd Bankert (@BlogsBush & EverCompetedInWinterOlympics(t))", "Judd Bankert (AthleteOfGguam(JuddBankert) & CompetedInWintersOlympics(JuddBankert))", "Judd Bankert is AmericanAthleteFromGuam,but-NothingInWinterOlympics(judd.Bankert.com)", "All x.(Athlete(x) -> (DJBarkert(x) & SinceJuly2008Season(x).))", "Judd Bankert is the only Guaman AthleteToCompeteInWinterOlympics(juddbankert)", "Judd Bankert (Athlete(guam) & CompetedInWinterOlympics(guam))"]}
{"id": "folio_train_983", "nl": "Judd Bankert competed in the 1992 Winter Olympics.", "fol": "ParticipatedInEvent(Bankert,WinterOlympicsEvent)", "prediction": ["all x.(JuddBankert(x) -> CompetedInWinterOlympics(x,1992))", "all x.((JuddBankert(x) & WinterOlympics(x, 1992)) -> CompetedIn(x,1996))", "(Olympics(Judd) & Bankert(Judd))", "Judd Bankert competed in the 1992 WinterOlympics.", "all x.(JuddBankert(x) -> CompetedIn1992(x))", "Judd Bankert participated in the 1992 Winter Olympics.", "Judd Bankert competed in the Winter Olympics for 1992 (Berlin,Judd))", "(AppearedIn(JuddBankert) | CompetedIn(JuddBankert))", "(CompetesInWinterOlympics,92) & JuddBankert(BankertChemistryM))", "1992 WinterOlympics(JuddBankert)", "Judd Bankert competed in the 1992 WinterOlympics.", "all x.((JuddBankert(x) & WinterOlympics(x)) -> Competed(x,Daily))", "(KompetiteBillert(Judd Bankert,92)", "Judd Bankert competed in the 1992 Winter Olympics.", "Judd Bankert competed in the 1992 WinterOlympics.", "(CompetedInWinterOlympics(juddBannert,92))"]}
{"id": "folio_train_984", "nl": "Guam has participated in the Summer Olympics at least once.", "fol": "exists x.(ParticipatedInEvent(Guam,Summerolympics) & IsYear(x))", "prediction": ["all x.(Guam(x) -> ParticipatesInSummerOlympics(x))", "all x.(Guam(x) -> ParticipatedInSummerOlympics(x,y))", "all x.(Guam(x) -> ParticipatedInSummerOlympics(x,y))", "all x.(Guam(x) -> ParticipatesInSummerOlympics(x))", "all x.(Guam(x) -> ParticipatedInSummerOlympics(x))", "all x.(Guam(x) -> ParticipatesAtLeastOneOlympic(x))", "all x.(Guam(x) -> ParticipatedInSummerOlympics(x))", "all x.(Guam(x) -> HasParticipatedInSummerOlympics(x))", "all x.((Guam(x) & ParticipatedInBaseballs(x)) -> ((JackBoys(x) & ParticipatedInBaseball(x)) & AtLeastFourThousandSeconds(x)))", "all x.((Guam(x) & ParticipateInSummerOlympics(x)) -> ParticipatedAtLeastOne(x))", "all x.(Guam(x) -> ParticipatedInSummerOlympics(x))", "all x.((Guam(x) & SummerOlympics(x)) -> ParticipatesOf(x,y))", "all x.((Guam(x) & SummerOlympics(x)) -> ParticipatedAtLeastOneTime(x))", "all x.((Guam(x) & SummerOlympics(x,y)) -> ParticipatedInAtLeastOnly(y,x))", "all x.((Guam(x) & SummerOlympics(x)) -> ParticipatedAtLeastOne(x))", "all x.((Guam(x) & SummerOlympics(x)) -> Participated(x,1))"]}
{"id": "folio_train_985", "nl": "Michael O'Donnell is a British physician, journalist, author and broadcaster.", "fol": "(IsBritish(Michael) & IsPhysician(Michael) & IsJournalist(Michael) & IsAuthor(Michael) & IsBroadcaster(Michael))", "prediction": ["(Doctor(MichaelO'Donnell) & BritishDoctor(MichaelO'Donnell) & Journalist(MichaelO'Donnell) & Author(MichaelO'Donnell) & Broadcaster(Michael O'Donnell)", "all x y z.((Doctor(x) & Journalist(y) & Author(z)) -> (British(x) & British(y) & Medical(z) & Journalist(y) & Broadcaster(z)))", "all x.((BritishPhDendon(x) & Doctor(x) & Journalist(x) & Author(x) & Broadcaster(x)) -> MichaelO'Donnell(x))", "all x.((Medical(x) & BritishJournalist(x) & Author(x) & Broadcaster(x)) -> MichaelO'Donnell(x))", "(BritishMedicalPhDONNEY(O) & Journalist(O) & Author(O) & Broadcaster(O))", "(BritishPharmacistJournalistAuthor(Michael) & Broadcaster(Michael))", "all x.(MichaelO'Donnell(x) -> (PhD(x,y) & BritishPharmacist(y) & Journalist(y) & Author(x) & Broadcaster(z)))", "exists x.((Medical(x) & Journalist(x) & Author(x)) & Broadcaster(x))", "All x.((Michael O'Donnell(x) & BritishPharmacist(x) & Journalist(x) & Author(x) & Broadcaster(x)) -> Physician(x))", "(Reader(Michael O'Donnell) & BritishMedical(Michael O'Donnell) & Journalist(Michael O'Donnell) & Author(Michael O'Donnell) & Broadcaster(Michael O'Donnell)", "(-Fruit(Michael O\u2019Donnell,PhD,In-Public) & BritishPeriodist(Much:MJ,InPublic) & BritishWriter(Michael O'Donnell,InPublic(Michael O'Donnell,InPublic(Michael Upton))", "(BelongsTo(Mick O'Donnell,Pharmacist,English) & Journalist(O'Donnell) & Author(O'Donnell,Henry,Significant,Broadcaster))", "Michael O'Donnell ((Britain(n) & Physician(n)) & Journalist(n) & Author(n) & Broadcaster(n)))", "all x y.(((PhD'Donnell(x) & UKPhD(y)) -> (GeneralDoctor(x) & BritishJournalist(x) & Author(x) & Broadcaster(x)))", "all x.((BritishPhDonnell(x) & Journalist(x) & Author(x) & Broadcaster(x)) -> MichaelO'Donnell(x))", "all x.(MichaelO'Donnell(x) -> (BritishPhysician(x) | BritishJournalist(x) | BritishAuthor(x) | BritishBroadcaster(x)))"]}
{"id": "folio_train_986", "nl": "One of the word-setters of My Word! was Michael O'Donnell.", "fol": "IsWordSetter(Michael)", "prediction": ["one of the WordSetters Of MyWord!", "all x.((MichelenO'Donnell(x) & WordSetter(x)) -> MyWord(x))", "(WordSetter(MeanWord) & MichaelO'Donnell(MeanWord))", "one of the word-setters of MyWord! is MichaelO'Donnell.", "(WordSetter(MoreWord!) & MichaelO'Donnell(Michael))", "all x y.((WordSetter(x) & MyWord!(y)) -> MichaelO'Donnell(x))", "All x.((WordSetter(x) & MyWord(x)) -> MichaelO'Donnell(x))", "all x.((WordSetter(x) & MyWord!) -> MichaelO'Donnell(x))", "I am talking to a wordsetter (ManyWords! ) -> MichaelO'Donnell.", "One of the WordSetters of MyWord! was MichaelO'Donnell.", "(WordSetter(Miranda) & MikeODonnell(Miranda))", "O'Donnell's (MeanWord(x) & MichaelO'Donnell(x))", "Undoubtedly, he was one of the wordsetters of MyWord!", "(MichaelO'Donnell(WordSetter(x) & MyWord!)", "One of the WordSettersOfMyWord! was MichaelO'Donnell.", "Michael O'Donnell, WordSetter(x) -> MyWord(x))"]}
{"id": "folio_train_987", "nl": "The magazine World Medicine was edited by Michael O'Donnell.", "fol": "(IsMagazine(Worldmedicine) & EditedBy(Worldmedicine,Michael))", "prediction": ["Magazine editor(x) & \"WorldMedicine(x)\"", "all x.(WorldMedicine(x) -> EditedByMichaelO'Donnell(x))", "All x.(WorldMedicine(x) -> EditedByMichaelO'Donnell(x))", "O'Donnell,Michael (WorldMedium) & EditedBy(Michael(WorldMedicine))", "The magazine WorldMedicine was edited by MichaelO'Donnell.", "all x.(WorldMedicine(x) -> EditedByMichaelO'Donnell(x))", "all x y.((Magazine(x) & WorldMedicine(y)) -> EditedByMichaelO'Donnell(x))", "all x y.((Magazine(x) & WorldMedicine(y)) -> EditedByMichaelO'Donnell(x,y))", "All x.(WorldMedicine(x) -> MichaelO'Donnell(x))", "all x.(WorldMedicine(x) -> editedByMichaelO'Donnell(x))", "(EditedByMichaelO'Donnell(WorldMedicine) & -Historical(WorldMedicine))", "ModernEdGEO'DonnellEdited(WorldMedicine)", "all x y.((WorldMedicine(x) & MichaelO'Donnell(y)) -> Editor(x,y))", "all x.((Magazine(x) & editedByMichaelO'Donnell(x)) -> WorldMedicine(x))", "The magazine WorldMedicine was edited by MichaelO'Donnell(26)", "(EditedByMichaelO'Donnell(x) & WCMA(y))"]}
{"id": "folio_train_988", "nl": "Michael O'Donnell was born in Yorkshire as the son of a general practitioner.", "fol": "exists x.(BornInLocation(Michael,Yorkshire) & IsSonOf(Michael,x) & IsGeneralPractitioner(x))", "prediction": ["Michael O'Donnell (born in Yorkshire, England) & SonOfGeneralPracticer(x))", "(BirthOf(Michael O'Donnell,Yorkshire) -> SonOfGeneralPraxist(O'Donnell,Yorkshire))", "(bornInYorkshire,Yorkshire) & SonOfGeneralPractistician(Michael O'Donnell)", "Michael O'Donnell (bornInYorkshire(Michael) & SonOfGeneralPracticist(Michael))", "Michael O'Donnell (*BirthInYorkshire(y) & SonOfGeneralPharmacist(y))", "Michael O'Donnell was born in Yorkshire as the son of a GeneralPractitioner.", "all x.((SonOfGeneralPracticer(x) & BornInYorkshire(x)) -> MichaelO'Donnell(x))", "Michael O'Donnell (born in Yorkshire,Yorkshire) & is sonOfGeneralPracticer(OldSon(OldSon))", "(bornInYorkshire(Michael O'Donnell,GreekPharmacist) & SonOfGeneralPharmacist(Michael O'Donnell,Yorkshire))", "(GraduatePractitioner(Jesus O'Donnell) & BornInYorkshire(Michael)", "(LordOfGeneralPractitioner(Michael O'Donnell) & BornInYorkshire(Michael O'Donnell,Yorkshire))", "all x.((SonOfGeneralPracticer(x) & BornInYorkshire(x)) -> MichaelO'Donnell(x))", "Michael O'Donnell was born in Yorkshire as the son(d) of a GeneralPractitioner(d) & BornInYorkshire(d))", "all x.((JeffreyO'Donnell(x) & BornInYorkshire(x)) -> SonOfGeneralPharmacist(x))", "(BirthOfGeneralPracticer(Michael O'Donnell)", "(Birth(Michael O'Donnell,Yorkshire) & SonOfGeneralPractitioner(Michael O'Donnell)"]}
{"id": "folio_train_989", "nl": "The son of a general practitioner was a word-setter of My Word!.", "fol": "exists x y.(IsSonOf(x,y) & IsGeneralPractitioner(y) & IsWordSetter(x))", "prediction": ["all x.((SonOfGlobalPharmacist(x) & GeneralPharmacist(x)) -> WordSetter(x))", "all x y z.((SonOf(x,y) & GeneralPracticer(z) & General Practitioner(x) & WordSetter(x,z)) -> MyWord(x))", "all x y z.((Son(x) & GeneralPracticer(y) & WordSetter(z)) -> WordSetter(z))", "all x.((SonOfGeneralPrincipal(x) & WordSetterOfMyWord!) -> Loves(x,m,m))", "all x.(MonthOfGeneralPharmacist(x) & WordSetterOfMyWord(x))", "all x.((son(x) & GeneralPracticer(x)) -> WordSetter(x))", "all x.((SonOfGeneralPracter(x) & GeneralPracter(x)) -> WordWriterOf(x,MyWord!))", "all x.((SonOf(x) & GeneralPracticer(x)) -> WordSetter(x,myWord!))", "all x y.((SonOf(x,y) & GeneralPracticer(y)) -> WordsetterOfMyWord!", "all x y.((SonOfGeneralPharmacist(x) & General Practitioner(y)) -> WordSetter(x,myWord(x))", "all x y.((Parent(x) & GeneralPharmacist(y) & SonOf(x,y)) -> WordSetterOfMyWord!", "all x.(RobertOfGeneralPharmacist(x) -> WordSetterOfMyWord!", "all x y.((Son(x) & GeneralPractican(y)) -> WordSetterOfMyWord!", "all x y.((Son(x) & GeneralPharmacist(x) & GeneralPharmacist(y)) -> WordSetter(x,y))", "all x.((SonAt(x) & GeneralPracticist(x)) -> WordSetterOfMew(x))", "all x.(SonOfGeneralPharmacist(x) -> WordSetterOfMyWord!"]}
{"id": "folio_train_990", "nl": "World Medicine is not a magazine.", "fol": "-IsMagazine(Worldmedicine)", "prediction": ["all x.(WorldMedicine(x) -> -Magazine(x))", "(-Magazine(WorldMedicine))", "all x.(WorldMedicine(x) -> -Magazine(x))", "all x.(WorldMedicine(x) -> -Magazine(x))", "all x.((WorldMedicine(x) & -Magazine(x)) -> -Company(x))", "all x.(WorldMedicine(x) -> -Magazine(x))", "all x.(WorldMedicine(x) -> -Magazine(x))", "All x.(WorldMedicine(x) -> -Magazine(x))", "All x.(WorldMedicine(x) -> -Magazine(x))", "all x.(WorldMedicine(x) -> -Magazine(x))", "all x.(WorldMedicine(x) -> -Magazine(x))", "all x.(WorldMedicine(x) -> -Magazine(x))", "is -Magazine(WorldMedicine)", "all x.(WorldMedicine(x) -> -Magazine(x))", "-Magazine(WorldMedium)", "All x.(WorldMedicine(x) -> -Magazine(x))"]}
{"id": "folio_train_991", "nl": "There are no British authors.", "fol": "-exists x.(IsBritish(x) & IsAuthor(x))", "prediction": ["-(BritishAuthor(x) & ReadsIn(x,y))", "-exists x.(BritishAuthor(x) & -DomesticAuthor(x))", "-exists x.(BritishAuthor(x))", "-exists x.(BritishAuthor(x) & -EnglishAuthor(x))", "all x.(EnglishAuthor(x) -> -exists y.(BritishAuthor(y) & BritishAuthor(y))))", "-BritishAuthors(x)", "Currently, there are -BritishAuthors(x)", "We do not have any BritishAuthors(i)", "exists x.(BritishAuthor(x) & -Author(x))", "-BritishAuthors(x)", "Es gibt nixiv BritishAutorists.", "-exists x.(BritishAuthor(x) & -BritishAuthor(x))", "-exists x.(BritishAuthor(x) & -exists y.(BritishAuthor(y) & BritishAuthor(z)))", "-BritishAuthors(x)", "-exists x.(BritainanAuthor(x) & Artist(y) & -Author(z))", "-exists x.(BritishAuthor(x) & NoWriter(x))"]}
{"id": "folio_train_992", "nl": "There are no journalists that were born in Yorkshire.", "fol": "-exists x.(IsJournalist(x) & BornInLocation(x,Yorkshire))", "prediction": ["KeenJournalist(ke) & BornInYorkshire(x))", "-exists x.(Journalist(x) & BornInYorkshire(x))", "-exists x.(Journalist(x) & BornInYorkshire(x))", "-exists x.(Journalist(x) & BornInYorkshire(x))", "There are 0 journalists that were born inYorkshire.", "IsHasKnowledge(i)?", "-exists x.(Journalist(x) & BornInYorkshire(x))", "-exists x.(Journalist(x) & BornInYorkshire(x))", "-exists x.(Journalist(x) & BornIn(x,y))", "-exists x.(Journalist(x) & BornIn(x,Yorkshire))", "-exists x.(Journalist(x) & BornInYorkshire(x))", "-exists x.(Journalist(x) & BornInYorkshire(x))", "There are no journalists who were borninYorkshire.", "-exists x.(Journalist(x) & BornIn(x,Yorkshire))", "-exists x.(Journalist(x) & BornInYorkshire(x))", "Currently, there are no journalists born in Yorkshire."]}
{"id": "folio_train_993", "nl": "There is a son of a general practitioner that is not an author.", "fol": "exists y.(IsSonOf(y,x) & IsGeneralPractitioner(x) & -IsAuthor(y))", "prediction": ["exists x y.(SonOf(x,y) & GeneralPharmacist(y) & -Author(x))", "exists x y.((Son(x) & GeneralPracticist(y) & GeneralPracticist(y) & -Author(x,y)) -> Son(x,y))", "exists x y.(Son(x,y) & GeneralPharmacist(y) & -Author(x))", "exists x y.(GeneralPractician(x) & Son(y) & -Author(y))", "exists x.(GeneralPracticerSon(x) & -Author(x))", "exists x y.((Son(x) & GeneralPracticer(y) & GeneralPharmacist(x & GeneralPharmacist(y)) & -Author(x))", "exists x.(SonOfGeneralPracticer(x) & -Author(x))", "exists x.(SonOfGeneralPregnancy(x) & -Author(x))", "exists x.(SonOfGeneralPracticist(x) & -Author(x))", "exists x.(Son(x) & GeneralPracticer(x) & -Author(x))", "exists x y.(SONOf(x,y) & GeneralPharmacist(x) & General Practitioner(y) & -Author(y))", "exists x.(GeneralProfessionalSon(x) & -Author(x))", "exists x.(SonOfGeneralPharmacist(x) & -Author(x))", "exists x.(SonOfGeneralPracticer(x) & -Author(x))", "exists x y.(GeneralPracticerSon(x) & GeneralPharmacist(y) & -Author(x))", "exists x.(GeneralPracticerSon(x) & -Author(x))"]}
{"id": "folio_train_994", "nl": "No homework is fun.", "fol": "all x.(IsHomework(x) -> -IsFun(x))", "prediction": ["-exists x.(Homework(x) & Fun(x))", "-exists x.(Homework(x) & Fun(x))", "-exists x.(Homework(x) & Fun(x))", "-exists x.(Homework(x) & Fun(x))", "-exists x.(Homework(x) & Fun(x))", "-(Homework(x) & Fun(x))", "-(Homework(x) & Fun(x))", "-exists x.(Homework(x) & Fun(x))", "-exists x.(Homework(x) & Fun(x))", "-exists x.(Homework(x) & Fun(x))", "-exists x.(Homework(x) & Fun(x))", "-exists x.(Homework(x) & Fun(x))", "-exists x.(Homework(x) & Fun(x))", "-exists x.(Homework(x) & Fun(x))", "-exists x.(Homework(x) & Fun(x))", "-exists x.(Homework(x) & Fun(x))"]}
{"id": "folio_train_995", "nl": "Some reading is homework.", "fol": "exists x.(IsReading(x) & IsHomework(x))", "prediction": ["exists x.(Reading(x) & Homework(x))", "exists x.(Reading(x) & Homework(x))", "exists x.(Reading(x) & Homework(x))", "exists x.(Reading(x) & Homework(x))", "exists x.(Reading(x) & Homework(x))", "exists x.(Reading(x) & Homework(x))", "exists x.(Reading(x) & Homework(x))", "exists x.(Reading(x) & Homework(x))", "exists x.(Reading(x) & Homework(x))", "exists x.(Reading(x) & Homework(x))", "exists x.(Reading(x) & Homework(x))", "exists x.(Reading(x) & Homework(x))", "exists x.(Reading(x) & Homework(x))", "exists x.(Reading(x) & Homework(x))", "exists x.(Reading(x) & Homework(x))", "exists x.(Reading(x) & Homework(x))"]}
{"id": "folio_train_996", "nl": "Some reading is fun.", "fol": "exists x.(IsReading(x) & IsFun(x))", "prediction": ["exists x.(Reading(x) & Fun(x))", "exists x.(Reading(x) & Fun(x))", "exists x.(Reading(x) & Fun(x))", "exists x.(Reading(x) & Fun(x))", "exists x.(Reading(x) & Fun(x))", "exists x.(Reading(x) & Fun(x))", "exists x.(Reading(x) & Fun(x))", "exists x.(Reading(x) & Fun(x))", "exists x.(Reading(x) & Fun(x))", "exists x.(Reading(x) & Fun(x))", "exists x.(Reading(x) & Fun(x))", "exists x.(Reading(x) & Fun(x))", "exists x.(Reading(x) & Fun(x))", "exists x.(Reading(x) & Fun(x))", "exists x.(Reading(x) & Fun(x))", "exists x.(Reading(x) & Fun(x))"]}
{"id": "folio_train_997", "nl": "If violence is good, it is justified.", "fol": "all x.((IsViolence(x) & IsGood(x)) -> IsJustified(x))", "prediction": ["all x.((Violence(x) & Good(x)) -> Justified(x))", "all x.((Violence(x) & Good(x)) -> Justified(x))", "all x.((Violence(x) & Good(x)) -> Justified(x))", "all x.((Violence(x) & Good(x)) -> Justified(x))", "all x.((Violence(x) & Good(x)) -> Justified(x))", "all x.((Violence(x) & Good(x)) -> Justified(x))", "all x.((Violence(x) & Good(x)) -> Justified(x))", "all x.((Violence(x) & Good(x)) -> Justified(x))", "all x.((Violence(x) & Good(x)) -> Justified(x))", "all x.((Violence(x) & Good(x)) -> Justified(x))", "all x.((Violence(x) & Good(x)) -> Justified(x))", "all x.((Violence(x) & Good(x)) -> Justified(x))", "all x.((Violence(x) & Good(x)) -> Justification(x))", "all x.((Violence(x) & Good(x)) -> Justified(x))", "all x.((Violence(x) & Good(x)) -> Justified(x))", "all x.((Violence(x) & Good(x)) -> Justified(x))"]}
{"id": "folio_train_998", "nl": "If something is justified, it is lawful.", "fol": "all x.(IsJustified(x) -> IsLawful(x))", "prediction": ["all x.(Justified(x) -> Lawful(x))", "all x.((Justified(x) & Lawful(x)) -> Legitimate(x))", "all x.((Justified(x) & Legal(x)) -> Legal(x))", "all x.((Justified(x) & Lawful(x)) -> Justified(x))", "all x.((Justified(x) & Exists y.((Hospital(y) & Legal(y))) -> Legal(y)))", "all x.((Justified(x) & Lawful(x)) -> Justified(x))", "all x.((Justified(x) & Legal(x)) -> Lawful(x))", "all x.(Justified(x) -> Lawful(x))", "all x.(Justified(x) -> Lawful(x))", "all x.(Justified(x) -> Lawful(x))", "all x.((Justified(x) & Legal(x)) -> Legal(x))", "all x.((Justified(x) & Lawful(x)) -> Justified(x))", "all x.((Justified(x) & Lawful(x)) -> Justified(x))", "all x.((Justified(x) -> Legal(x))", "all x.(Justified(x) -> Lawful(x))", "all x.((Justified(x) & Legal(x)) -> LetGo(x))"]}
{"id": "folio_train_999", "nl": "If violence is good, it is lawful.", "fol": "all x.((IsViolence(x) & IsGood(x)) -> IsLawful(x))", "prediction": ["all x.((Violence(x) & Good(x)) -> Legal(x))", "all x.((Violence(x) & Good(x)) -> Lawful(x))", "all x.((Violence(x) & Good(x)) -> Lawful(x))", "all x.((Violence(x) & Good(x)) -> Lawful(x))", "all x.((Violence(x) & Good(x)) -> Lawful(x))", "all x.((Violence(x) & Good(x)) -> Lawful(x))", "all x.((Violence(x) & Good(x)) -> Lawful(x))", "all x.((Violence(x) & Good(x)) -> Legal(x))", "all x.((Violence(x) & Good(x)) -> Legal(x))", "all x.((Violence(x) & Good(x)) -> Lawful(x))", "all x.((Violence(x) & Good(x)) -> Lawful(x))", "all x.((Violence(x) & Good(x)) -> Legal(x))", "all x.((Violence(x) & Good(x)) -> Lawful(x))", "all x.((Violence(x) & Good(x)) -> Legal(x))", "all x.(Good(x) -> Lawful(x))", "all x.((Violence(x) & Good(x)) -> Lawful(x))"]}
{"id": "folio_train_1000", "nl": "All people who have a horse ranch regularly ride horses for pleasure and sport.", "fol": "all x.(HasHorseRanch(x) -> RidesHorsesForPleasureAndSport(x))", "prediction": ["all x.((Person(x) & HasHorseRiver(x)) -> Riddles(x,horse))", "all x.((Person(x) & HorseRiver(x)) -> RidesHorses(x))", "all x.((Person(x) & HorseRiver(x)) -> RegularRide(x,Plut,Sport))", "all x.(HasHorseRidge(x) -> RegularRideForPleasureAndSport(x))", "all x.(HasHorseRiver(x) -> (RidesEquineForPlaise(x) & RidesHorseForSport(x)))", "all x.((Person(x) & HorseRidge(x)) -> RidesHorsesForPleasureAndSport(x))", "all x.(RemotesHorse(x) -> (RidingHorsesForPalaceAndSport(x)))", "all x.(HasHorseRiver(x) -> (RidesPainspriety(x) & RidesSport(x)))", "all x.(HasHorseRidge(x) -> (RidePerson(x) & ForParadise(x) & ForSport(x)))", "all x.(HasHorseRiver(x) -> RegularlyRides(x,Horse))", "all x.(HasHorseRiver(x) -> RegularRidesHorsesWithPrideAndSport(x))", "all x.(HasHorseRanch(x) -> RegularlyRideHorsesForPleasureAndSport(x))", "all x.((Person(x) & HorseRiver(x)) -> RidesHorsesForPlaisanceAndSport(x))", "all x.(HasHorseRiver(x) -> RegularRideHorsesForPlenishAndSport(x))", "all x.((Person(x) & HorseRiver(x)) -> RisesForPlaisanceAndSport(x))", "all x.(HasHorseRand(x) -> RegularRiders(x,equine))"]}
{"id": "folio_train_1001", "nl": "All people who have a lot of disposable income have a horse ranch.", "fol": "all x.(HasDisposableIncome(x) -> HasHorseRanch(x))", "prediction": ["all x.((Person(x) & Has(x,y) & DisposableIncome(y)) -> HasHorseRidge(x))", "all x.((Person(x) & LotOfDisposableIncome(x)) -> HorseRiver(x))", "all x.((People(x) & LotsOfDisposableIncome(x)) -> HorseRanch(x))", "all x.((SmallDisposableIncome(x) & HorseRiver(x)) -> Has(x,y))", "all x.((Person(x) & LotsOfDisposableIncome(x)) -> HorseRanch(x))", "all x.((Has(x,Millions)OfDisposableIncome(x)) -> HungryRiver(x))", "all x.((Person(x) & DisposableIncome(x)) -> HorseRiver(x))", "all x.((Person(x) & HasPoundOfDisposableIncome(x)) -> HasHorseRiver(x))", "all x.((Person(x) & LotsOfDisposableIncome(x)) -> HorseRanch(x))", "all x.((Person(x) & DisposableIncome(x)) -> HasHorseRandan(x))", "all x.((Person(x) & DependableIncome(x)) -> HorseRanch(x))", "all x.((Person(x) & HasDisposableIncome(x)) -> HorseRiver(x))", "all x.((Person(x) & HasMortiableIncome(x)) -> HorseRiver(x))", "all x.((Person(x) & DisposableIncome(x)) -> HorseRiver(x))", "all x.((Person(x) & HasLotOfDisposableIncome(x)) -> HasHorseRidge(x))", "all x.((People(x) & DisposableIncome(x)) -> HorseRidge(x))"]}
{"id": "folio_train_1002", "nl": "If people compete in horse dressage shows, then they have a lot of disposable income.", "fol": "all x.(CompetesInDressageShows(x) -> HasDisposableIncome(x))", "prediction": ["all x.((Personnel(x) & CompeteInHorseDressage(x)) -> DisposableIncome(x))", "all x.(CompetesInHorseDessertageDesserts(x) -> DisposableIncome(x))", "all x y.((Person(x) & CompetesInHorseDressage(x) & HorseDressageShow(y)) -> DisposableIncome(x))", "all x.(CompeteInHorseDressage(x) -> DisposableIncome(x))", "all x.(CompetesInHorseDressageShows(x) -> DisposableIncome(x))", "all x.(CompetesInHorseDessertageShows(x) -> DisposableIncome(x))", "all x.(Compete(x,horsedressage(x) -> DisposableIncome(x))", "all x.((CompeteInHorseDressageShows(x) & SoMoreDisposableIncome(x)) -> VeryDisclosableIncome(x))", "all x.(ConquersInHorseDressageShows(x) -> ManyDispensableIncomes(x))", "all x.((Person(x) & CompetesInHorse(x) & Dressage(x)) -> LotOfDisposableIncome(x))", "all x.(CompetesInHorseDressageShows(x) -> DisposableIncome(x))", "all x.((Person(x) & CompetesInHorseDressageShows(x)) -> LotsOfDisposableIncome(x))", "all x.(CompetesInHorseDressage(x) -> DisposableIncome(x))", "all x.((Person(x) & CompelsInHorseDressageShows(x)) -> DisposableIncome(x))", "all x y.(Compete(x,y) -> DisposableIncome(x))", "all x.(CompetesInHorse DressageShows(x) -> DisposableIncome(x))"]}
{"id": "folio_train_1003", "nl": "If people compete in horse dressage shows, then they have invested in high-quality equestrian gear and equipment.", "fol": "all x.(CompetesInDressageShows(x) -> InvestedInEquestrianGear(x))", "prediction": ["all x y z.((Person(x) & HorseDressage(y) & Equitation(z) & Competes(x,y)) -> InvestedIn(x,z))", "all x.(CompetesInHorseDressageShows(x) -> InvestmentInHighQualityEquestrianGearAndEquipment(x))", "all x.(CompetesInHorseDressageShows(x) -> (InvestedInEquestrianGear(x) & InvestedInEquestrianEquipment(x)))", "all x.((Person(x) & CompetesInHorseDressageShows(x)) -> HighQualityEquestrianGearAndEquipment(x))", "all x y.((Person(x) & CompetesInHorseDressageShows(x,y)) -> InvestedInHighQualityEquestrianGearAndEquipment(x))", "all x.(CompetesOrderageShows(x) -> HighQualityEquestrianGearAndEquipment(x))", "all x.(CompetesHireClothageShows(x) -> HighQualityEquestrianGearAndEquipment(x))", "all x.(CompeteInHorseDressageShows(x) -> (InvestedInEquestrianGear(x) & InvestedInEquestrianEquipment(x)))", "all x.(CompetesInHorseDressage(x) -> (InvestedInHighQualityEquestrianGearAndEquipment(x)))", "all x.((CompetesInHorse DressageShow(x)) -> (InvestedInHighQualityEquestrianGear(x) & InvestedInHighQualityEquipment(x)))", "all x.((CompetesInHorseDressageShows(x) & HighQualityEquestrianGarmentAndEquipment(x)) -> InvestedIn(x))", "all x.((People(x) & CompetesInHorseStages(x)) -> HighQualityEquestrianGearAndEquipment(x))", "all x y.((Person(x) & CompetesInHorseDecoration(x) & HorseDressage(y)) -> HighQualityEquestrianGearAndEquipment(x))", "all x.((Person(x) & CompetesInHorseGear(x)) -> HighQualityEquestrianGearAndEquipment(x))", "all x.(CompetesInHorseDressageShows(x) -> HighQualityEquestrianGearAndEquipment(x))", "all x.(CompeteInHorseDressageShows(x) -> HighQualityEquestrianGearAndEquipment(x))"]}
{"id": "folio_train_1004", "nl": "If people regularly ride horses for pleasure and sport, then they do not live in cramped residential buildings.", "fol": "all x.(RidesHorsesForPleasureAndSport(x) -> -LivesInCrampedResidentialBuildings(x))", "prediction": ["all x y.((RideRad HorsesRideForPleasingAndSport(x) & Person(y) & RidingForPlaisanceAndSport(y)) -> -CrompedResidentialBuildings(y))", "all x.(RegularRide(x) -> (Riddle(x,horse) & -CrombedHouseholds(x)))", "all x.((RidesHorses(x) & ForPlause(x) & ForSport(x)) -> -CrobbedResidentialBuildings(x))", "all x.(Rides(x,y,z) -> ((Person(x) & Horse(y) & Enjoys(y) & PlaysSport(z)) & -CrommedResidentialBurns(x)))", "all x.(RegularRidingHorses(x) -> -CrombedResidentialBuildings(x))", "all x.((Person(x) & RegularRidesHorses(x) & ForPromotion(x) & ForSport(x)) -> -CrombedResidentialBuildings(x))", "all x.((RideHorsesForPlenishAndSport(x) & RegularlyRides(x)) -> -CrombedResidentialBuildings(x))", "all x.((People(x) & RidesHorsesForProspirationAndSport(x)) -> -CrushedResidentialBuildings(x))", "all x.(RegularRideHorses(x) -> -CrushedResidentialBuildings(x))", "all x.((Personal(x) & RegularlyRidesHorses(x) & ForPleasure(x) & ForSport(x)) -> -CrommedResidentialBuildings(x))", "all x.(RidesHorsesForPlenishAndSport(x) -> -CrompedResidentialBuildings(x))", "all x.((CockpitResidencyBuilding(x) & RegularRiding(x,horse) & ForPositive(x) & ForSport(x)) -> -CrackedResidentialBuilding(x))", "all x y.((Person(x) & Rider(x,y) & RegularlyRide(x,y)) -> -CrombedResidentialBuilding(x))", "all x.(RegularRidingEquestriansForPlendomAndSport(x) -> -CrompyResidentialBuildings(x))", "all x.(RideHorses(x) -> (-ClimbedResidentialBuildings(x)))", "all x.((RidersShoes(x) & (PleasingCrush(x) | SportCrush(x))) -> -CrowdedResidentialBuildings(x))"]}
{"id": "folio_train_1005", "nl": "Manny either has a horse ranch and lives in cramped residential buildings, or he neither has a horse ranch nor lives in cramped residential buildings.", "fol": "((HasHorseRanch(Manny) & LivesInCrampedResidentialBuildings(Manny) & -(-HasHorseRanch(Manny) & -LivesInCrampedResidentialBuildings(Manny))) | (-(HasHorseRanch(Manny) & LivesInCrampedResidentialBuildings(Manny)) & -HasHorseRanch(Manny) & -LivesInCrampedResidentialBuildings(Manny)))", "prediction": ["(all x.(HasHorseRiver(x) -> LivesInClimbedResidentialBuildings(x)) | (-HasHorseRiver(x) & LivesInClimbedResidentialBuildings(x))))", "(all x.(Mandery(x) -> (HasHorseRiver(x) & LivesInCrombedResidentialBuildings(x))) | (-HasHorseRiver(x) & LivesInClimbedResidentialBuildings(x))))", "all x.(Methy(x) -> (HasHorseRidge(x) & LivesInCrombedResidentialBuildings(x) | -HasHorseRidge(x) & LivesInClimbedResidentialBuildings(x)))", "(all x.(Manny(x) -> (HasHorseRange(x) & LivesInCrombedResidentialBuildings(x))) | (-HasHorseRange(x) & LivesInCrombedResidentialBuildings(x)))))", "(all x.(Manny(x) -> (HasHorseRiver(x) & LivesInCrombedResidentialBuildings(x)) | (-HasHorseRiver(x) & LivesInCrombedResidentialBuildings(x))))", "all x.((Manny(x) & HorseRiver(x) & CrickedResidentialBuildings(x)) | (-HasHorseRiver(x) | LivesInCrickedResidentialBuildings(x))))", "(all x.(Hully(x) -> (HasHorseRarea(x) & LivesInCrommedResidentialBuildings(x))) | (-HasHorseRarea(x) & LivesInCrommedResidentialBuildings(x))))", "(all x.((Manny(x) & HorseRigway(x)) -> CrazedResidentialBuildings(x)) | (-HasHorseRigway(x) & CrazedResidentialBuildings(x))))", "(all x.(Manny(x) -> (HasHorseRanch(x) & LivesInCrommedResidentialBuildings(x))) | (-HasHorseRanch(x) & LivesInCrommedResidentialBuildings(x))))", "all x.((Manny(x) & HorseRidge(x) & CockpitResidentialBuildings(x)) | (-Has(x,HorseRidge) & CockpitResidentialBuildings(x))))", "(all x.(HasHorseRand (x) -> LivesInCrommedResidential(x))) | -HasHorseRand(x) & -LivesInCrommedResidential(x)))", "all x.(Mmanny(x) -> ((HasHorseRiddell(x) & LivesInCrowdedResidentialBuildings(x)) | (-HasHorseRiddell(x) & LivesInCrowdedResidentialBuildings(x))))", "(all x.(Manny(x) -> (HasHorseRidge(x) & CrankedResidentialBuildings(x))) | (-HasHorseRidge(x) & CrankedResidentialBuildings(x))))", "all x y.((Manny(x) & HorseRidge(x) & ClutteredResidentialBuildings(y)) | (-HasHorseRidge(x) & ClutteredResidentialBuildings(x))))", "all x.(Munny(x) -> (HasHorseRidge(x) & -LivesInClimbedResidentialBuildings(x)))", "(all x.(Manny(x) -> (HasHorseRidge(x) & LivesInCrombedResidentialBuildings(x))) | (-HasHorseRidge(x) & LivesInCrombedResidentialBuildings(x))))"]}
{"id": "folio_train_1006", "nl": "Manny regularly rides horses for pleasure and sport.", "fol": "RidesHorsesForPleasureAndSport(Manny)", "prediction": ["all x y.((Manny(x) & Horse(y)) -> (RegularRidesFor(x,y) & For(x,y)))", "all x.(Manny(x) -> (RidesHorsesForPleasure(x) & RidesForSport(x)))", "all x.(Mandy(x) -> FrequentlyRidesEyes(x))", "all x.(Manny(x) -> (RidesForPlaisance(x) & RidesForSport(x)))", "all x.(Manny(x) -> (Rides(x,horse) & For(x,precise) & For(x,sport)))", "all x.(Matty(x) -> (Rides(x,horse) & ForPure(x) & ForSport(x)))", "all x.((Manny(x) & Horse(y)) -> (RidesForPlenish(x,y) | RidesForSport(x,y)))", "(WorksWith(Manny) & Rides(Manny,Horse))", "all x.(Manchester(x) -> (Rides(x,horse,paradise & rides(x,sport)))", "all x y z.((Mandy(x) & Horse(y) & (Plair(z) | Sport(z))) -> RegularRide(x,y))", "(Rides(Manny,Horse) & For(Manny,Pavorite) & For(Manny,Sport)))", "all x.(Manny(x) -> (Rides(x,horse) & ForPleasure(x) & ForSport(x)))", "all x y.((Manny(x) & Horse(y)) -> (RidesForPure(x,y) | RidesForSport(x,y)))", "manny(Manty) /Rides(Manty,Horse) & (Plair(Ridder) | Sport(Ridder))))", "Manny (marriedToFavorite(Mandy) & Rider(Mandy,horse))", "all x y.((Manny(x) & Horse(y)) -> (Rides(x,y) * ForPleasure(x) & ForSport(x)))"]}
{"id": "folio_train_1007", "nl": "Manny competes in horse dressage shows and has invested in high-quality equestrian equipment and gear.", "fol": "(CompetesInDressageShows(Manny) & InvestedInEquestrianGear(Manny))", "prediction": ["all x.(Manny(x) -> (CompetesInHorseMountageShows(x) & InvestedInHighQualityEquestrianEquipmentAndGear(x)))", "all x y.((Manny(x) & HorseDressage(y)) -> (CompetesIn(x,y) & HighQualityEquestrianEquipment(x) & HighQualityGear(x)))", "all x.(Munny(x) -> (CompetesInHorseDressageShows(x) & InvestmentsInHighQualityEquestrianEquipmentAndGear(x)))", "all x.(Manny(x) -> (CompetesInHorseDressageShows(x) & HasInvestedInHighQualityEquestrianEquipmentAndGear(x)))", "all x.(Matthew(x) -> (CompetesInHorseDressage(x) & InvestsInHighQualityEquestrianEquipment(x) & InvestsInHighQualityEquestrianGear(x)))", "(CompetesInHorseDressage(Munny,Horse(Munny) & InvestedInHighQualityEquestrianEquipment(Munny,EquestrianGear))", "all x.(Manny(x) -> (CompetesInHorseDressage(x) & HighQualityEquestrianEquipmentAndGear(x)))", "(CompetesInHorseDressage(Manny) & HighQualityEquestrianEquipment(Manny) & HighQualityGear(Manny))", "all x y.((Manny(x) & HorseDressageShow(y)) -> (Competes(x,y) & HighQualityEquestrianEquipment(x) & HighQualityEquestrianGear(x)))", "all x.(Humany(x) -> (CompetesInHorseDressageShows(x) & InvestmentsInHighQualityEquestrianEquipmentAndGear(x)))", "all x.(Mandy(x) -> (CompetesInEquestrianShows(x) & InvestedInEquestrianEquipmentAndGear(x)))", "all x.(Manny(x) -> (CompetesInHorseDressageShows(x) & HighQualityEquestrianEquipment(x) & HighQualityEquestrianGuide(x)))", "all x.(Matty(x) -> (Compets(x) & CompetesInHorseDressageShows(x) & HighQualityEquestrianEquipmentAndGear(x)))", "all x y.((Manny(x) & HorseDressageShow(y)) -> (CompetesIn(x,y) & HighQualityEquestrianEquipment(x) & HighQualityEquestrianGear(x)))", "all x.(Manny(x) -> (CompetesIn(x,HorseDressage) & HighQualityEquestrianEquipment(x) & HighQualityGear(x)))", "all x.((Manny(x) & HorseDressageShows(x)) -> (InvestedInEquestrianEquipment(x) & InvestedInEquestrianGear(x)))"]}
{"id": "folio_train_1008", "nl": "If Manny either has a horse ranch or competes in horse dressage shows, then Manny has not invested in high-quality equestrian equipment and gear.", "fol": "((HasHorseRanch(Manny) | CompetesInDressageShows(Manny)) -> -InvestedInEquestrianGear(Manny))", "prediction": ["all x.((HasHorseRiver(x) | CompetesInHorseDressage(x)) -> -InvestedInHighQualityEquestrianEquipment(x))", "all x.((Manny(x) & (HasHorseRanch(x) | CompetesInHorseDecoration(x))) -> -InvestedInHighQualityEquestrianEquipmentAndGear(x))", "all x.((Manny(x) & (HasHorseRanch(x) | CompetesInHorseDressage(x))) -> -InvestedInHighQualityEquestrianEquipmentAndGear(x))", "all x.((Patrony(x) & (HasHorseRidge(x) | CompetesInHorseDressage(x))) -> -InvestedInHighQualityEquestrianEquipmentAndGear(x))", "all x y.((Manny(x) & HorseRainforest(x) & HorseDecairage(y)) -> -InvestedInEquestrianEquipmentAndGear(x,y))", "all x.((HasHorseRiver(x) | CompetesInHorseDressage(x)) -> -InvestedInHighQualityEquestrianEquipmentAndGear(x))", "all x.((Moldy(x) & (HasHorseRiver(x) | CompetesInHorseDressageShows(x))) -> -InvestedInHighQualityEquestrianEquipmentAndGear(x))", "all x.((Mandy(x) & (HasHorseRiver(x) | CompetesInHorseDressageShows(x))) -> -InvestedInHighQualityEquestrianEquipmentAndGear(x))", "all x.((Manner(x) & (HasHorseRanch(x) | CompetesInHorseDressageShows(x))) -> -InvestedInEquestrianEquipmentAndGear(x))", "all x.((Manny(x) & (HasHorseRanch(x) | CompetesInHorseDressage(x))) -> -HighQualityEquestrianEquipmentAndGear(x))", "all x.((Manny(x) & (HasHorseRainforest(x) | CompetesInHorseDressage(x))) -> -InvestedInHighQualityEquestrianEquipmentAndGear(x))", "all x.((Manny(x) & (HasHorseRanch(x) | CompetesInHorseDressage(x))) -> -InvestedInHighQualityEquestrianEquipmentAndGear(x))", "all x.((Manny(x) & (HasHorseRidge(x) | CompetesInHouseDressage(x))) -> -InvestedInEquestrianEquipmentAndGear(x))", "all x.((Manny(x) & (HasHorseRanch(x) | CompetesInHorseDressage(x))) -> -InvestedInHighQualityEquestrianEquipmentAndGear(x))", "all x.(OrHasHorseRanch(x) | CompetesInHorseDressageShows(x)) -> -InvestedInHighQualityEquestrianEquipmentAndGear(x))", "all x.((Manny(x) & (HasHorseRidge(x) | CompetesInHorseDressage(x))) -> -InvestedInHighQualityEquestrianEquipmentAndGear(x))"]}
{"id": "folio_train_1009", "nl": "A roundel is a rounded artillery fortification.", "fol": "all x.((IsRoundel(x) -> IsRounded(x)) & IsArtilleryFortification(x))", "prediction": ["all x.(Roundel(x) -> (RoundedArtilleryFortification(x) & Fortification(x)))", "all x.(Roundel(x) -> (RoundedArtilleryFortification(x) & RoundedArtilleryFortification(x)))", "all x.(Roundel(x) -> ArtilleryFortification(x))", "all x.(Roundel(x) -> RoundedArtilleryFortification(x))", "all x.(Roundel(x) -> Fortification(x))", "all x.(Roundel(x) -> RoundedArtilleryFortification(x))", "all x.(Roundel(x) -> RoundedArtilleryFortification(x))", "all x.(Roundel(x) -> (ArtilleryFortification(x) & Rounded(x)))", "all x.(Roundel(x) -> (RoundedArtilleryFortification(x) & Fortification(x)))", "all x.(Roundel(x) -> (RoundedArtilleryFortification(x) & RoundelFortification(x)))", "all x.(Roundel(x) -> (RoundedArtilleryFortification(x) & Fortification(x)))", "all x.(Roundel(x) -> (RoundedArtilleryFortification(x) & RaisedArtilleryFortification(x)))", "all x.(Roundel(x) -> (RoundedArtilleryFortification(x) & Fortification(x)))", "all x.(Roundel(x) -> IsRoundedArtilleryFortification(x))", "all x.(Roundel(x) -> (RoundedArtilleryFortification(x) & RoundedArtilleryFortification(x)))", "all x.(Roundel(x) -> (ArtilleryFortification(x) & Rounded(x)))"]}
{"id": "folio_train_1010", "nl": "A roundel is not higher than adjacent walls. ", "fol": "all x y.((IsRoundel(x) & IsAdjacentWall(y)) -> -IsHigherThan(x,y))", "prediction": ["all x.(Roundel(x) -> -HigherThanAdjacentWalls(x))", "all x.(Roundel(x) -> -HigherThanAdjacentWalls(x))", "all x.(Roundel(x) -> (-HoterThanAdjacentWalls(x)))", "all x.(Roundel(x) -> -HigherThanAdjacentWalls(x))", "all x.(Roundel(x) -> -HigherThanAdjacentWalls(x))", "all x.(Roundel(x) -> -HigherThanAdjacentWalls(x))", "all x.(Roundel(x) -> -HigherThanAdjacentWalls(x))", "all x y.((Roundel(x) & Wall(y)) -> -Higher(x,y))", "all x y.((Roundel(x) & Wall(y)) -> -HigherThan(x,y))", "all x.(Roundel(x) -> -HigherThanNearbyWalls(x))", "all x.(Roundel(x) -> -HigherThanAdjacentWalls(x))", "all x.(Roundel(x) -> -HigherThanAdjacentWalls(x))", "all x.(Roundel(x) -> -HigherThanAdjacentWalls(x))", "all x.(Roundel(x) -> -HigherThanAdjacentWalls(x))", "all x y.((Roundel(x) & Wall(y)) -> -HigherThan(x,y))", "all x.(Roundel(x) -> -HigherThanAdjacentWalls(x))"]}
{"id": "folio_train_1011", "nl": "Cannons can be deployed on artillery fortifications. ", "fol": "all x.(IsArtilleryFortification(x) -> CanDeployCannons(x))", "prediction": ["all x.(Canon(x) -> DeployedOnArtilleryFortifications(x))", "all x y.((Canon(x) & ArtilleryFortification(y)) -> CanBeDeployed(x,y))", "all x y.((Cannon(x) & ArtilleryFortification(y)) -> DeployedOn(x,y))", "all x.(Cannon(x) -> DeployedOnArtilleryFortifications(x))", "all x.(Cannon(x) -> CanBeDeployedOnArtilleryFortifications(x))", "all x.(Cannon(x) -> CanBeDeployedOnArtilleryFortifications(x))", "all x.(Cannon(x) -> (DeployedOnArtilleryFortifications(x) | -DeployedOnArtilleryFortifications(x)))", "all x.(Canon(x) -> CanBeDeployedOnArtilleryFortifications(x))", "all x.(Cannon(x) -> CanBeDeployedOnArtilleryFortifications(x))", "all x y.((Cannon(x) & ArtilleryFortification(y)) -> DeployedOn(x,y))", "all x.(Cannon(x) -> CanBeDeployedOnArtilleryFortifications(x))", "all x.(Cannon(x) -> CanBeDeployedOnArtilleryFortifications(x))", "all x.(Cannon(x) -> CanBeDeployedOnArtilleryFortifications(x))", "all x y z.((Cannon(x) & ArtilleryFortification(y) & ArtilleryFortification(z) & DeployedOn(x,z)) -> CanBeDeployedOn(x,y))", "all x.(Cannon(x) -> DeployedOnArtilleryFortification(x))", "all x y.((Cannon(x) & ArtilleryFortification(y) & DeployedOn(x,y)) -> CanBeDeployedOn(x,y))"]}
{"id": "folio_train_1012", "nl": "Roundels are the oldest artillery fortifications.", "fol": "all x y.((IsRoundel(x) & IsArtilleryFortification(x) & IsArtilleryFortification(y)) -> IsOlderThan(x,y))", "prediction": ["all x.(Roundels(x) -> (ArtilleryFortification(x) & Fortification(y) & Fortification(y) & TheOldest(x),y)))", "all x.(Roundels(x) -> OldestArtilleryFortification(x))", "all x.(Roundels(x) -> (OldestArtilleryFortification(x) & Aged(x)))", "all x.(Roundel(x) -> -ArtilleryFortification(x))", "each y.((Roundel(x) & ArtilleryFortification(y)) -> BestValue(x),y))", "all x.(Roundels(x) -> (ArtilleryFortification(x) & LocatedInAsStorm(x)))", "all x.(Roundels(x) -> (OldestArtilleryFortification(x) & BestInFortification(x)))", "all x.(Roundels(x) -> (ArtilleryFortification(x) & -ArtilleryFortification(x)))", "all x y.((Roundels(x) & ArtilleryFortification(y)) -> TheOldest(x,y))", "all x.(Roundels(x) -> (OldestArtilleryFortification(x) & OldestArtilleryFortification(x)))", "all x.(Roundels(x) -> (ArtilleryFortification(x) & Oldest(x)))", "all x.(Roundels(x) -> IsOldestArtilleryFortification(x))", "All x.(Roundels(x) -> (ArtilleryFortification(x) & Aged(x)))", "all x.(Roundels(x) -> AncientArtilleryFortification(x))", "all x.(Roundel(x) -> -OldestArtilleryFortification(x))", "all x.(Roundels(x) -> OldestArtilleryFortification(x))"]}
{"id": "folio_train_1013", "nl": "Battery towers are an artillery fortification.", "fol": "all x.(IsBatteryTower(x) -> IsArtilleryFortification(x))", "prediction": ["all x y.((BatteryTower(x) & ArtilleryFortification(y)) -> Builds(x,y))", "all x.(BatteryTower(x) -> (ArtilleryFortification(x) & OperatesPip(x)))", "all x.(BatteryTower(x) -> ArtilleryFortification(x))", "all x.(BatteryTower(x) -> ArtilleryFortification(x))", "all x.(BatteryTower(x) -> (ArtilleryFortification(x) & Builds(x)))", "all x.(BatteryTower(x) -> ArtilleryFortification(x))", "all x.(BatteryTower(x) -> ArtilleryFortification(x))", "all x.(BatteryTower(x) -> ArtilleryFortification(x))", "all x.(BatteryTower(x) -> ArtilleryFortification(x))", "all x.((BatteryTower(x) & ArtilleryFortification(x)) -> UnitRequires(x))", "all x.(BatteryTower(x) -> Fortification(x))", "all x.(BatteryTower(x) -> ArtilleryFortification(x))", "all x.(BatteryTower(x) -> (ArtilleryFortification(x) & LocatedIn(x,y)))", "all x.(BatteryTower(x) -> Warfare(x))", "all x.(BatteryTower(x) -> ArtilleryFortification(x))", "all x.((BatteryTower(x) & ArtilleryFortification(x)) -> BatteryTower(x))"]}
{"id": "folio_train_1014", "nl": "Cannons can be deployed on battery towers.", "fol": "all x.(IsBatteryTower(x) -> CanDeployCannons(x))", "prediction": ["all x.(Cannon(x) -> CanBeDeployedOnBatteryTowers(x))", "all x.(Cannon(x) -> CanBeDeployedOn(x,BatteryTowers))", "all x.(Cannon(x) -> CanBeDeployedOnBatteryTurm(x))", "all x.(Cannon(x) -> DeployedOnBatteryTower(x))", "all x.(Cannon(x) -> CanBeDeployedOn(x,BatteryTower))", "all x y.((Cannon(x) & BatteryTurm(y)) -> CanBeDeployedOn(x,y))", "all x y z.((Cannon(x) & BatteryTower(y) & BatteryTower(z)) -> DeployableOn(x,y,z))", "all x.(Cannon(x) -> CanBeDeployedOnBatteryTowers(x))", "all x.(Canon(x) -> CanBeDeployedOnBatteryTowers(x))", "all x.(Canon(x) -> DeployedOnBatteryTower(x))", "all x y.((Cannon(x) & BatteryTower(y)) -> CanBeDeployed(x,y))", "all x.(Cannon(x) -> DispensedOnBatteryTowers(x))", "all x y z.((Canon(x) & BatteryTower(y) & BatteryTower(z)) -> (DeployedOn(x,y) | DeployedOn(x,z)))", "all x y.((Cannon(x) & BatteryTower(y)) -> DeployedOn(x,y))", "all x.(Cannon(x) -> CanBeDeployedOnBatteryTower(x))", "all x y z.((Cannon(x) & BatteryTower(y) & Battery(z)) -> CanBeDeployed(x,y,z))"]}
{"id": "folio_train_1015", "nl": "Roundels are older than battery towers.", "fol": "all x y.((IsRoundel(x) & IsBatteryTower(y)) -> IsOlderThan(x,y))", "prediction": ["all x.(Roundels(x) -> OlderThanBatteryTower(x))", "all x y z.((Roundel(x) & BatteryTower(y) | BatteryTower(z))) -> Older(x,y,z))", "all x y z.((Roundle(x) & BatteryTower(y) & Battery(z)) -> OlderThan(x,y,z))", "all x y.((Roundel(x) & BatteryTurm(y)) -> OlderThan(x,y))", "all x.(Roundel(x) -> OlderThanBatteryTower(x))", "all x.(Roundels(x) -> OlderThan(x,batteryTowers))", "all x.(Roundel(x) -> OlderThan(x,BatteryTower))", "all x.(Roundels(x) -> OlderThanBatteryTower(x))", "all x.(Roundels(x) -> OlderThanBatteryTowers(x))", "all x.(Roundel(x) -> OlderThan(x,BatteryRoom))", "all x.(Roundele(x) -> Older(x,BatteryTurms))", "all x y.((Roundels(x) & BatteryTower(y)) -> OlderThan(x,y))", "all x.(Roundels(x) -> OlderThan(x,batteryTower))", "all x.(RegularElement(x) -> OlderThan(x,BatteryTower))", "all x.(Roundel(x) -> OlderThan(x))", "all x.(Roundle(x) -> OlderThan(x,BatteryTower))"]}
{"id": "folio_train_1016", "nl": "Battery towers are higher than adjacent walls.", "fol": "all x y.((IsBatteryTower(x) & IsAdjacentWall(y)) -> IsHigherThan(x,y))", "prediction": ["all x y z.((BatteryTower(x) & Wall(y) & BatteryTower(z)) -> HigherThan(x,y))", "all x y.((BatteryTower(x) & Wall(y)) -> HigherThan(x,y))", "all x y.((BatteryTower(x) & Wall(y) & Higher(x,y)) -> Adjacent(x,y))", "all x y.((BatteryTower(x) & AdjacentWall(y)) -> Higher(x,y))", "all x y.((BatteryTower(x) & AdjacentWall(y)) -> HigherThan(x,y))", "all x.((BatteryTower(x) & AdjacentWalls(x)) -> Higher(x))", "all x y.((BatteryTower(x) & AdjacentWall(y)) -> HigherThan(x,y))", "all x.(BatteryTower(x) -> HigherThan(x,adjacentWalls))", "all x y.((BatteryTower(x) & Wall(y)) -> HigherThan(x,y))", "all x y.((BatteryTower(x) & AdjacentWall(y)) -> Higher(x,y))", "all x.(BatteryTower(x) -> HigherThanBench(x))", "all x y.((BatteryTower(x) & AttendedgingWall(y)) -> HigherThan(x,y))", "all x y.((BatteryTongue(x) & Wall(y)) -> Higher(x,y))", "all x y.((BatteryTower(x) & AdjacentWall(y)) -> Higher(x,y))", "all x y.((BatteryTree(x) & Wall(y)) -> HigherThan(x,y))", "all x y.((BatteryTower(x) & Wall(y)) -> HigherThan(x,Y))"]}
{"id": "folio_train_1017", "nl": "Roundels can be deployed on roundels.", "fol": "all x.(IsRoundel(x) -> DeployRoundels(x))", "prediction": ["all x.(Roundels(x) -> InstalledOn(x,Roundels))", "all x.(Roundels(x) -> CanBeDeployedOn(x,Roundels))", "all x.(Roundels(x) -> DeployedOnRoundels(x))", "all x.(Roundels(x) -> DeployedOnRoundels(x))", "all x.(Roundels(x) -> DispatchableOn(x))", "all x.(Roundels(x) -> CanBeDeployedOnRoundels(x))", "all x.(Roundell(x) -> CanBeDeployedOnRoundels(x))", "all x y.((Roundels(x) & Roundels(y)) -> CanBeDeployed(x,y))", "all x.(Roundels(x) -> CanBeDeployedOn(x,Roundels))", "all x.(Roundel(x) -> DeployedOn(x,Roundel))", "all x.(Roundels(x) -> Developed(x,Roundels))", "all x.(Roundels(x) -> CanBeDeployedOn(x,Roundels))", "all x.(Roundels(x) -> CanBeDeployedOnRoundels(x))", "all x y.((Roundel(x) & Roundel(y)) -> CanBeDeployed(x,y))", "all x.(Roundels(x) -> Rotation(x))", "all x.(Roundelle(x) -> CanBeDeployedOn(x,Roundels))"]}
{"id": "folio_train_1018", "nl": "All tissues are soft.", "fol": "all x.(IsTissue(x) -> IsSoft(x))", "prediction": ["all x.(Tissue(x) -> Soft(x))", "all x.(Tissue(x) -> Soft(x))", "all x.(Tissue(x) -> Soft(x))", "all x.(Tissue(x) -> Soft(x))", "all x.(Tissue(x) -> Soft(x))", "all x.(Tissue(x) -> Soft(x))", "all x.(Tissue(x) -> Soft(x))", "all x.(Tissue(x) -> Soft(x))", "all x.(Texture(x) -> Soft(x))", "all x.(Tissue(x) -> Soft(x))", "all x.(Tissue(x) -> Soft(x))", "all x.(Tissue(x) -> Soft(x))", "all x.(Tissue(x) -> Soft(x))", "all x.(Tissue(x) -> Soft(x))", "all x.(Tissue(x) -> Soft(x))", "all x.(Tissue(x) -> Soft(x))"]}
{"id": "folio_train_1019", "nl": "Some papers are tissues.", "fol": "exists x.(IsPaper(x) & IsTissue(x))", "prediction": ["exists x.(Paper(x) & Tissue(x))", "exists x.(Paper(x) & Tissue(x))", "exists x.(Paper(x) & Tissue(x))", "exists x.(Paper(x) & Tissue(x))", "exists x.(Paper(x) & Tissue(x))", "exists x.(Paper(x) & Tumi(x))", "exists x.(Paper(x) & Tear(x))", "exists x.(Paper(x) & Tissue(x))", "exists x.(Paper(x) & Tissue(x))", "exists x.(Paper(x) & Tissue(x))", "exists x.(Paper(x) & Tissue(x))", "exists x.(Paper(x) & Tissue(x))", "exists x.(Paper(x) & Tissue(x))", "exists x.(Paper(x) & Tissue(x))", "exists x.(Paper(x) & Tissue(x))", "exists x.(Paper(x) & Tissue(x))"]}
{"id": "folio_train_1020", "nl": "Some papers are hard.", "fol": "exists x.(IsPaper(x) & Hard(x))", "prediction": ["exists x.(Paper(x) & Hard(x))", "exists x.(Paper(x) & Hard(x))", "exists x.(Paper(x) & Hard(x))", "exists x.(Paper(x) & Hard(x))", "exists x.(Paper(x) & Hard(x))", "exists x.(Paper(x) & Hard(x))", "exists x.(Paper(x) & Hard(x))", "exists x.(Paper(x) & Hard(x))", "exists x.(Paper(x) & Hard(x))", "exists x.(Paper(x) & Hard(x))", "exists x.(Paper(x) & Hard(x))", "exists x.(Paper(x) & Hard(x))", "exists x.(Paper(x) & Hard(x))", "exists x.(Paper(x) & Hard(x))", "exists x.(Paper(x) & Hard(x))", "exists x.(Paper(x) & Hard(x))"]}
{"id": "folio_train_1021", "nl": "All volunteers receive intangible benefits for their work.", "fol": "all x.(IsVolunteer(x) -> ReceivesIntangibleBenefits(x))", "prediction": ["all x.(Volunteer(x) -> ReceivesIntangibleBenefits(x))", "all x.(Volunteer(x) -> ReceivesIntangibleBenefits(x))", "all x.(Volunteer(x) -> IntangibleBenefitsForWork(x))", "all x.(Volunteer(x) -> ReceivesIntangibleBenefits(x))", "all x.(Volunteer(x) -> ReceivesIntangibleBenefitsForWork(x))", "all x.(Volunteer(x) -> ReceivesIntangibleBenefits(x))", "all x.(Volunteer(x) -> ReceivesIntangibleBenefits(x))", "all x.(Volunteer(x) -> ReceivesIntangibleBenefitsForWork(x))", "all x.(Volunteer(x) -> ReceivesIntangibleBenefits(x,Work))", "all x.(Volunteer(x) -> ReceivesIntangibleBenefitsForWork(x))", "all x.(Volunteer(x) -> ReceivesIntangibleBenefits(x))", "all x.(Volunteer(x) -> ReceivesIntangibleBenefits(x))", "all x.(Volunteer(x) -> ReceivesIntangibleBenefits(x))", "all x.(Volunteer(x) -> ReceivesIntangibleBenefits(x))", "all x.(Volunteer(x) -> ReceivesIntangibleBenefits(x))", "all x.(Volunteer(x) -> IntangibleBenefits(x))"]}
{"id": "folio_train_1022", "nl": "Volunteers work regularly or on an as-needed basis.", "fol": "all x.((IsVolunteer(x) -> WorksRegularly(x)) | WorksAsNeeded(x))", "prediction": ["all x.(Volunteer(x) -> (WorksRegularly(x) | WorksAsNeeded(x)))", "all x.(Volunteer(x) -> (WorksRegularly(x) | WorksAsNeeded(x)))", "all x.(Volunteer(x) -> ((WorksRegularly(x) | IsNeeded(x))))", "all x.(Volunteer(x) -> (WorksRegularly(x) | WorkesAsNeeded(x)))", "all x.(Volunteer(x) -> (WorksRegularly(x) | WorksAsNeededBy(x)))", "all x.(Volunteer(x) -> (WorksRegularly(x) | WorksAsNeeded(x)))", "all x.(Volunteer(x) -> (WorksRegularly(x) | AsNeeded(x)))", "all x.(Volunteer(x) -> (Work(x,Regular) | AsNeeded(x)))", "all x.(Volunteer(x) -> (WorksRegularly(x) | WorksAsNeeded(x)))", "all x y.((Volunteer(x) & (RegularWork(y) | AsNeededWork(y))) -> WorkInMinute(x,y))", "all x.(Volunteer(x) -> (WorksRegularly(x) | WorkesAsNeeded(x)))", "all x.(Volunteer(x) -> (WorksRegularly(x) | WorksAsNeeded(x)))", "all x.(Volunteer(x) -> (WorksRegularly(x) | WorksAsNeededBasis(x)))", "all x.(Volunteer(x) -> (WorksRegularly(x) | WorkesAsNeededBasis(x)))", "all x.(Volunteer(x) -> (Work(x,regular) | Work(x,asNeeded))))", "all x y.((Volunteer(x) & (WorkRegularly(x,y) | WorkAsNeeded(x))) -> WorkAsNeeded(x,y))"]}
{"id": "folio_train_1023", "nl": "Some volunteers are trained.", "fol": "exists x.(IsVolunteer(x) -> IsTrained(x))", "prediction": ["exists x.(Volunteer(x) & Trained(x))", "exists x.(Vacant(x) & Trained(x))", "exists x.(Volume(x) & Trained(x))", "exists x.(Volunteer(x) & Trained(x))", "exists x.(Volunteer(x) & Trained(x))", "exists x.(Volunteer(x) & Trained(x))", "exists x.(Volunteer(x) & Trained(x))", "exists x.(Volunteer(x) & Trained(x))", "exists x.(Volunteer(x) & Trained(x))", "exists x.(Volunteer(x) & Trained(x))", "exists x.(Volunteer(x) & Trained(x))", "exists x.(Volunteer(x) & Trained(x))", "exists x.(Volunteer(x) & Trained(x))", "exists x.(Volunteer(x) & Trained(x))", "exists x.(Volunteer(x) & Trained(x))", "exists x.(Volunteer(x) & Trained(x))"]}
{"id": "folio_train_1024", "nl": "Volunteers work in groups or individually.", "fol": "all x.(IsVolunteer(x) -> (WorksInGroup(x) | WorksIndividually(x)))", "prediction": ["all x.(Volunteer(x) -> (WorksInGroups(x) | WorksInIndividuals(x)))", "all x.(Volunteer(x) -> (WorksInGroup(x) | WorksInMillions(x)))", "all x.(Volunteer(x) -> (WorksInGroups(x) | WorksInPrimaryGroup(x)))", "all x.(Volunteer(x) -> (exists y.(Group(y) & Work(x,y))) | exists z.(Group(z) & Work(x,z)))))", "all x.(Volunteer(x) -> (WorksInGroups(x) | WorksInIndividuals(x)))", "all x.(Volunteer(x) -> (WorkInGroups(x) | WorkInPrimaries(x)))", "all x.(Volunteer(x) -> (Work(x,groups) | Work(x,individually)))", "all x.(Volunteer(x) -> (WorksInGroups(x) | WorksInIndividuals(x)))", "all x.(Volunteer(x) -> (WorksInGroup(x) | WorksInAssemble(x)))", "all x.(Volunteer(x) -> (WorksInGroups(x) | WorksInSeparateGroups(x)))", "all x.(Volunteer(x) -> (WorksInGroups(x) | WorksInPersonalGroups(x)))", "all x.(Volunteer(x) -> (WorksInGroups(x) | WorksInPrimarily(x)))", "all x.(Volunteer(x) -> (WorksInGroups(x) | WorksInAssociates(x)))", "all x.(Volunteer(x) -> (WorksInGroups(x) | WorksInIndividuals(x)))", "all x y.((Volunteer(x) & (Group(y) | Individual(y))) -> WorksIn(x,y))", "all x.(Volunteer(x) -> (WorksInGroups(x) | WorksInGroups(x)))"]}
{"id": "folio_train_1025", "nl": "Environmental volunteers contribute toward environmental management or conservation.", "fol": "all x.((IsVolunteer(x) & IsEnvironmentalVolunteer(x)) -> (ContributesTo(x,EnvironmentalManagement) | ContributesTo(x,EnvironmentalConservation)))", "prediction": ["all x.(EnvironmentalVolunteer(x) -> (ContributesToEnvironmentalManagement(x) | ContributesToConservation(x)))", "all x.(EnvironmentalVolunteer(x) -> (ParticipatesToEnvironmentalManagement(x) | ContributesToConservation(x)))", "all x.(EnvironmentalVolunteer(x) -> (EnvironmentalManagement(x) | Conservation(x)))", "all x.(EnvironmentalVolunteer(x) -> (ToEnvironmentalManagement(x) | Conservation(x)))", "all x y.((EnvironmentalVolunteer(x) & EnvironmentalManagement(y)) | Conservation(y)) -> ContributesTo(x,y))", "all x y.((EnvironmentalVolunteer(x) & ActsOn(x,y)) -> ContributesToEnvironmentalManagementOrConservation(x,y))", "all x.(EnvironmentalVolunteer(x) -> (ContributesToEnvironmentalManagement(x) | ContributesToConservation(x)))", "all x.(EnvironmentalVolunteer(x) -> (ContributesToEnvironmentalManagement(x) | ContributesToConservation(x)))", "all x.(EnvironmentalVolunteer(x) -> (ContributesToEnvironmentalManagement(x) | ContributesToConservation(x)))", "all x y.((EnvironmentalVolunteer(x) & (EnvironmentalManagement(y) | Conservation(y))) -> Contributes(x,y))", "all x.(EnvironmentalVolunteer(x) -> (ContributesToEnvironmentalManagement(x) | ContributesToConservation(x)))", "all x.(EnvironmentalVolunteer(x) -> (ContributesToEnvironment(x) | ContributesToConservation(x)))", "all x.(EnvironmentalVolunteer(x) -> (ContributesToEnvironmentalManagement(x) | ContributesToConservation(x)))", "all x.(EnvironmentalVolunteer(x) -> (ContributesToEnvironmentalManagement(x) | ContributesToConservation(x)))", "all x.(EnvironmentalVolunteer(x) -> (ContributesToEnvironmentalManagement(x) | ContributesToConservation(x)))", "all x.(EnvironmentalVolunteer(x) -> (ContributesToEnvironmentalManagement(x) | ContributesToConservation(x)) & EnvironmentalVolunteer(x)))"]}
{"id": "folio_train_1026", "nl": "Participating in natural disaster response is an example of volunteers working in groups on an as-needed basis.", "fol": "exists x.(((IsVolunteer(x) & ContributesTo(x,NaturalDisasterResponse)) -> WorksInGroup(x)) & WorksAsNeeded(x))", "prediction": ["all x.((Volunteer(x) & ParticipatesInNaturalDisasterResponse(x)) -> WorkInGroupsOnAsNeededBasis(x))", "all x.((Volunteer(x) & WorkInGroups(x)) -> AsNeedsBased(x))", "all x.(PopularInNaturalDisasterResponse(x) -> VolunteerWorkingInGroups(x))", "all x.((Volunteer(x) & ParticipatesInNaturalDisasterResponse(x)) -> WorksInGroupsOnAsNeededBasis(x))", "all x.(Participates(x) -> (NaturalDisasterResponse(x) & Volunteer(x) & WorkingInGroups(x) & AsNeededBase(x)))", "all x.((Volunteer(x) & ParticipatesInNaturalDisasterResponse(x)) -> WorksInGroupsOnAsNeededBasis(x))", "all x.((Volunteer(x) & NaturalDisasterResponse(x,y) & WorkingInGroups(y,z)) -> AsNeededBasis(x,y))", "all x y.((Volunteer(x) & NaturalDisaster(y)) -> WorksInGroups(x,y))", "all x y z.((Volunteer(x) & NaturalDisasterResponse(x,y) & Group(z)) -> WorksInOnAsNeededBasis(x,z))", "all x y.((ParticipatesInNaturalDisasterResponse(x) & Volunteer(y) & WorksInGroups(y,x)) -> AsNeededBasis(y))", "all x.((Volunteer(x) & ParticipatingInNaturalDisasterResponse(x)) -> WorksInGroupsOnAsNeededBasis(x))", "all x.((Volunteer(x) & NaturalDisasterResponse(x)) -> WorkingInGroups(x))", "all x y.((Volunteer(x) & NaturalDisasterResponse(y)) -> (WorkingInGroups(x,y) & AsNeededBasis(x)))", "all x.((Volunteer(x) & NaturalDisasterResponse(x)) -> WorkingInGroupsOnAsNeededBase(x))", "all x.((Volunteer(x) & NaturalDisasterRepo(x)) -> ActsInGroupsOnNeededBasis(x))", "all x y.((Volunteer(x) & NaturalDisasterResponse(y) & WorksInGroups(x,y)) -> AsNeededBenchmark(x))"]}
{"id": "folio_train_1027", "nl": "Volunteers who participate in natural disaster response receive intangible benefits for their work.", "fol": "all x.((IsVolunteer(x) & ParticipateIn(x,NaturalDisasterResponse)) -> ReceivesIntangibleBenefits(x))", "prediction": ["all x.((Volunteer(x) & ParticipatesInNaturalDisasterResponse(x)) -> ReceivesIntangibleBenefitsForWork(x))", "all x.(Volunteer(x) -> (ParticipatesInNaturalDisasterResponse(x) & IntangibleBenefits(x)))", "all x y.((Volunteer(x) & ParticipatesInNaturalDisaster(x,y)) -> ReceivesIntangibleBenefit(x))", "all x.((Volunteer(x) & ParticipatesInNaturalDisasterResponse(x)) -> ReceivesIntangibleBenefits(x))", "all x.((Volunteer(x) & ParticipatesInNaturalDisasterResponse(x)) -> ReceivesIntangibleBenefits(x))", "all x y.((Volunteer(x) & NaturalDisaster(y) & ParticipatesIn(x,y)) -> IntangibleBenefits(x,y))", "all x.((Volunteer(x) & ParticipatesInNaturalDisasterResponse(x)) -> IntangibleBenefits(x))", "all x.((Volunteer(x) & ParticipatesInNaturalDisasterResponse(x)) -> ReceivesIntangibleBenefits(x))", "all x y z.((Volunteer(x) & NaturalDisasterResponse(y) & Volunteer(z) & ParticipatesIn(x,y) & ReceivesIntangibleBenefits(x)) -> WorksFor(x,z))", "all x.((Volunteer(x) & ParticipatesInNaturalDisasterResponse(x)) -> ReceivesIntangibleBenefits(x))", "all x.((Volunteer(x) & ParticipatesInNaturalDisaster(x)) -> ReceivesIntangibleBenefits(x))", "all x y.((Volunteer(x) & NaturalDisasterResponse(y)) -> ReceivesIntangibleBenefits(x,y))", "all x.((Volunteer(x) & ParticipatesInNaturalDisasterResponse(x)) -> ReceivesIntangibleBenefits(x))", "all x.((Volunteer(x) & ParticipatesInNaturalDisasterResponse(x)) -> IntangibleBenefits(x))", "all x.((Volunteer(x) & ParticipatesInNaturalDisasterResponse(x)) -> ReceivesIntangibleBenefits(x))", "all x y.((Volunteer(x) & NaturalDisasterResponse(y) & ParticipatesIn(x,y)) -> IntangibleBenefit(x))"]}
{"id": "folio_train_1028", "nl": "Environmental volunteers work in groups.", "fol": "all x.((IsVolunteer(x) & IsEnvironmentalVolunteer(x)) -> WorksInGroup(x))", "prediction": ["all x.(EnvironmentalVolunteer(x) -> WorkInGroups(x))", "all x.(EnvironmentalVolunteer(x) -> WorksInGroups(x))", "all x.(EnvironmentalVolunteer(x) -> WorksInGroups(x))", "all x.(EnvironmentalVolunteer(x) -> WorksInGroups(x))", "all x.(EnvironmentalVolunteer(x) -> WorksInGroups(x))", "all x.(EnvironmentalVolunteer(x) -> WorksInGroups(x))", "all x.(EnvironmentalVolunteer(x) -> WorksInGroups(x))", "all x.(EnvironmentalVolunteer(x) -> WorkInGroups(x))", "all x.(EnvironmentalVolunteer(x) -> WorksInGroups(x))", "all x y.((EnvironmentalVolunteer(x) & Group(y)) -> WorksIn(x,y))", "all x.(EnvironmentalVolunteer(x) -> exists y.(Group(y) & WorksIn(x,y)))", "all x y.((EnvironmentalVolunteer(x) & Environment(y)) -> WorksInGroups(x,y))", "all x y.((EnvironmentalVolunteer(x) & Group(y)) -> Work(x,y))", "all x.(EnvironmentalPartyVolunteer(x) -> WorksInGroups(x))", "all x.(EnvironmentalVolunteer(x) -> WorksInGroups(x))", "all x.(environmentalVolunteer(x) -> WorksInGroups(x))"]}
{"id": "folio_train_1029", "nl": "To be a volunteer, you must be trained.", "fol": "all x.(IsVolunteer(x) -> IsTrained(x))", "prediction": ["all x.(Volunteer(x) -> Trained(x))", "all x.(Volunteer(x) -> Trained(x))", "all x.(Volunteer(x) -> Trained(x))", "all x.(Volunteer(x) -> Trained(x))", "all x.(Volunteer(x) -> Trained(x))", "all x.(Volunteer(x) -> Trained(x))", "all x.(Volunteer(x) -> Trained(x))", "all x.((Volunteer(x) & Trained(x)) -> Volunteer(x))", "all x.(Volunteer(x) -> Trained(x))", "all x.(Volunteer(x) -> Trained(x))", "all x.(Volunteer(x) -> Trained(x))", "all x.(Volunteer(x) -> Trained(x))", "all x.(Volunteer(x) -> Trained(x))", "all x.(Volunteer(x) -> Trained(x))", "all x.(Volunteer(x) -> Trained(x))", "all x.(Volunteer(x) -> (Trained(x) & CanBeVolunteer(x)))"]}
{"id": "folio_train_1030", "nl": "All people who are very consistent and enjoy sticking to their regular routines do not like surprises.", "fol": "all x.(VeryConsistent(x) -> DislikesSurprises(x))", "prediction": ["all x.((Person(x) & Consistent(x) & EnjoysStickingToRegularRoutines(x)) -> -NeedsSurprises(x))", "all x.((Person(x) & VeryConsistent(x) & EnjoysStickingToRegularRoutines(x)) -> -likesSurprises(x))", "all x.((Person(x) & VeryConsistent(x) & EnjoysHoppingToRegular(x)) -> -LikesSurprises(x))", "all x.((Person(x) & VeryConsistent(x) & EnjoysStickingToRegularRules(x)) -> -LikesSurprises(x))", "all x.((Person(x) & Consistent(x) & EnjoysStrippingToRegularRoutines(x)) -> -LikesSurprises(x))", "all x.((Person(x) & VeryConsistent(x) & EnjoysStandingToRegularRoutines(x)) -> -LikesSurprises(x))", "all x.((Person(x) & VeryConsistent(x) & EnjoysStayingToRegularRoutines(x)) -> -Loves(x,surprises))", "all x.((People(x) & VeryConsistent(x) & EnjoysStickingToRegularRoutines(x)) -> -DoesNotAlikeSurprises(x))", "all x.((People(x) & Consistent(x) & EnjoysStickingToRegularRumors(x)) -> -LovesSurprises(x))", "all x.((Consistent(x) & EnjoysStinkingToRegularRules(x)) -> -Awesome(x))", "all x.((Skinner(x) & Consistent(x) & EnjoyStrippingToRegularRoutines(x)) -> -InvitesSur surprises(x))", "all x.((MostConsistent(x) & EnjoyStickingToRegularRules(x)) -> -LikesUnsuages(x))", "all x.((Person(x) & Consistent(x) & EnjoysStrippingToRegularRoutines(x)) -> -LikesSurprises(x))", "all x.((People(x) & VeryConsistent(x) & EnjoysStayingToRegularRoutines(x)) -> -LovesSurprises(x))", "all x.((Person(x) & Consistent(x) & EnjoysConsistentRules(x)) -> -LikesSurprises(x))", "all x.((Consistent(x) & EnjoysStickingToRegularRoutines(x)) -> -LikesSurrers(x))"]}
{"id": "folio_train_1031", "nl": "If people wear flannel shirts every day, then they are very consistent and enjoy sticking to their regular routines.", "fol": "all x.(WearsFlannelShirts(x) -> VeryConsistent(x))", "prediction": ["all x.(WearFlannelShirtsEveryDay(x) -> (Consistent(x) & EnjoyStayingToRegularRoutines(x)))", "all x.((Person(x) & WearsFlannelShirtsEveryDay(x)) -> (Consistent(x) & EnjoysStandingToRegularRoutines(x)))", "all x.(FlannelShirt(x) -> (Consistent(x) & EnjoysSmokingToRegularRoutines(x)))", "all x.((Person(x) & WearsFlannelShirtsEveryDay(x)) ->(Consistent(x) & EnjoysStickingToRegularRoutines(x)))", "all x.((People(x) & WearFlannelShirtsEveryDay(x)) -> (Consistent(x) & EnjoysStrippingToRegularRules(x)))", "all x.(WearflannelShirtsEveryDay(x) -> (Consistent(x) & EnjoyRoutines(x)))", "all x.((Person(x) & WearsFlannelShirtsEveryDay(x)) -> (Consistent(x) & EnjoyStickingToRegularRoutines(x)))", "all x.((Person(x) & WearsFlannelShirtsEveryDay(x)) -> (Consistent(x) & EnjoyStickingToRegularRooms(x)))", "all x.(WearsFlannelShirtsEveryDay(x) -> (Consistent(x) & EnjoysRegularRoutines(x)))", "all x.(WearsFlannelShirtsEveryDay(x) -> (Consistent(x) & EnjoysStickingToRegularRules(x)))", "all x.(WearsFlannelShirtsEachDay(x) -> (Consistent(x) & EnjoysStandingToRegularRules(x)))", "all x.((Person(x) & WearsFlannelShirtsEveryDay(x)) -> (Consistent(x) & EnjoysStandingToRegularRoutines(x)))", "all x.((People(x) & WearsFlannelShirtsEveryDay(x)) -> (Consistent(x) & EnjoysStickingToRegularRoutines(x)))", "all x.((WalksFlannelShirtsEveryDay(x) & VeryConsistent(x) & EnjoysRoutines(x)) -> WearsFlannelShirtsEveryDay(x))", "all x.((Personal(x) & WearsFlannelShirtsEveryDay(x)) -> (Consistent(x) & EnjoyStandingToRegularRoutines(x)))", "all x.((Person(x) & WearsFlannelShirtsEveryDay(x)) -> (Consistent(x) & EnjoyStickingToRegularRoutines(x)))"]}
{"id": "folio_train_1032", "nl": "If people do not like shopping for clothes and other materialistic goods, then they wear flannel shirts every day.", "fol": "all x.(NoShopping(x) -> WearsFlannelShirts(x))", "prediction": ["all x.((Person(x) & -(InspiresShopping(x) | LikesShopping(x))) -> WearsFlannelShirts(x))", "all x.((People(x) & -LikeShoppingForClothesAndMaterialisticGoods(x)) -> WearFlonnelleShirts(x))", "all x.((People(x) & -(LovesShopping(x) & ShopsClothesAndMaterialisticGoods(x))) -> WearsFlannelShirtsEveryDay(x))", "all x.((Person(x) & -AlikesShopping(x) & ForClothingAndMaterialisticGoods(x)) -> WearsFlonzelShirtsEveryDay(x))", "all x.((Person(x) & -Orsalantism(x) & WearsFlannelShirts(x)) -> -OrsametricGoods(x))", "all x.((Person(x) & DoesNotCareShopping(x) & MaterialisticGoods(x)) -> WearsFlannelShirtsEveryDay(x))", "all x.((Person(x) & -(MealShopping(x) & IsMaterialistic(x))) -> WearsFlannelShirtsEveryDay(x))", "all x.((People(x) & -(IsShoppingClothes(x) | IsMaterialisticGoods(x))) -> WearsFlannelShirts(x))", "all x.((Person(x) & -(ShoppingWares(x) & Clothing(x) & MaterialisticGoods(x))) -> WearsFlannelShirtsEveryDay(x))", "all x.((Person(x) & -LikesShoppingForClothesAndMaterialisticGoods(x)) -> WearsFlonkelShirtsEveryDay(x))", "all x.((Person(x) & -SavorsClothesAndMaterialisticGoods(x)) -> WearsFlannelShirtsEveryDay(x))", "all x.((Person(x) & -LikesShoppingForClothesAndMaterialisticGoods(x)) -> WearsFlannelShirtsEveryDay(x))", "all x.((Person(x) & -(Shopping(x,CLOThes) | Shopping(x,MaterialisticGoods))) -> WearsFlannelShirtsEveryDay(x))", "all x.((Person(x) & -IsShopping(x)) -> WearsFlannelShirts(x))", "all x.(Person(x) -> (-LikesShopping(x) & WearsFlannelShirtsEveryDay(x)))", "all x.((People(x) & -LikesShopping(x) & forClothes(x) & ForMaterialisticGoods(x)) -> WearsFlannelShirtsEveryDay(x))"]}
{"id": "folio_train_1033", "nl": "All old people living in stable homes do not like surprises.", "fol": "all x.(Elderly(x) -> DislikesSurprises(x))", "prediction": ["all x.((OldPerson(x) & LivesInStableHomes(x)) -> -likesSurprises(x))", "all x.((OldPerson(x) & LivesInStableHome(x)) -> -likesSurprises(x))", "all x.((OldPerson(x) & LivesInStableHome(x)) -> -LovesSurprises(x))", "all x.(StableHome(x) -> -Pretty(x))", "all x y z.((OldPerson(x) & StableHome(y) & StableHome(z) & LivesIn(x,y)) -> -LivingSurprises(x))", "all x.((OldPerson(x) & LivesInStableHome(x)) -> -LikesSurprises(x))", "all x.((OldPerson(x) & StableHome(x)) -> -LikesSurprises(x))", "all x.((OldPerson(x) & LivesInStableHouses(x)) -> -Likes(x,surprises))", "all x.((OldPerson(x) & LivesIn(x,stabileHome)) -> -LikesSurprises(x))", "all x.(OldPeople(x) -> -LikesSurprises(x))", "all x.((OldPerson(x) & LivesInStableHomes(x)) -> -LikesSurprises(x))", "all x.((OldPerson(x) & LivingInStableHome(x)) -> -LikesSurprises(x))", "all x.((OldPerson(x) & LivingInStableHome(x)) -> -LikesSurprises(x))", "all x.((OldPerson(x) & LivesInStableHomes(x)) -> -LikesSurprises(x))", "all x y.((OldPerson(x) & StableHome(y)) -> -LikesSurprises(x))", "all x.((OldPerson(x) & LivesInStableHome(x)) -> -LikesSurprises(x))"]}
{"id": "folio_train_1034", "nl": "If people have very high energy and are impulsive, then they like surprises.", "fol": "all x.(HasHighEnergyAndImpulsive(x) -> -DislikesSurprises(x))", "prediction": ["all x.((Person(x) & VeryHighEnergy(x) & Irresponsive(x)) -> LikesSurprises(x))", "all x.((Person(x) & VeryHighEnergy(x) & Impulsive(x)) -> LikesSnakes(x))", "all x.((Person(x) & VeryHighEnergy(x) & Impulsive(x)) -> LikesSurprises(x))", "all x.((HungerEnergy(x) & Impulsive(x)) -> LikesSurprises(x))", "all x.((People(x) & ExtremelyHighEnergy(x) & Impulsive(x)) -> LikeSurprises(x))", "all x.((People(x) & VeryHighEnergy(x) & Impulsive(x)) -> Likesurprises(x))", "all x.((HungerEnergy(x) & Impulsive(x)) -> LikesSurprises(x))", "all x.((HighEnergy(x) & Impulsive(x)) -> LikesSurprises(x))", "all x.((People(x) & HighEnergy(x) & Impulsive(x)) -> LikesSurprises(x))", "all x.((People(x) & VeryHighEnergy(x) & Impulsive(x)) -> LikesSurprises(x))", "all x.((Person(x) & HighEnergy(x) & Impulsive(x)) -> LikesSurprises(x))", "all x.((HighEnergy(x) & Impulsive(x)) -> LikesSurprises(x))", "all x.((Person(x) & VeryHighEnergy(x) & Irresponsive(x)) -> LikesSurprises(x))", "all x.((Person(x) & HighEnergy(x) & Irresponsive(x)) -> LikesSurprises(x))", "all x.((Psychosexual(x) & VeryHighEnergy(x) & Impulsive(x)) -> LikesSurprises(x))", "exists x.((Popular(x) & HighEnergy(x) & Impulsive(x)) -> LikesSurprises(x))"]}
{"id": "folio_train_1035", "nl": "If Mike is not a person who wears flannel shirts every day and has very high energy and is impulsive, then Mike either is very consistent and enjoys sticking to his regular routines or does not like surprises.", "fol": "(((-(DislikesSurprises(Mike) & HasHighEnergyAndImpulsive(Mike)) -> VeryConsistent(Mike)) & -DislikesSurprises(Mike)) | (-(-(DislikesSurprises(Mike) & HasHighEnergyAndImpulsive(Mike)) -> VeryConsistent(Mike)) & DislikesSurprises(Mike)))", "prediction": ["all x.((Person(x) & WearsFlannelShirtsEveryDay(x) & HighEnergy(x) & Impulsive(x)) -> (Excellent(x) & SticksToRegularRoutines(x) | -LikesSurprises(x)))", "all x.((Person(x) & WearsFlannelShirtsEveryDay[x) & VeryHighEnergy(x) & Impulsive(x)) -> (Excellent(x) & EnjoysRegularRoutines(x)))", "all x.((Person(x) & WearsFlannelShirtsEveryDay(x) & VeryHighEnergy(x) & Impulsive(x)) -> ((VeryConsistent(x) & EnjoysRegularRoutines(x)) | -LikesSurprises(x))))", "all x.((Mike(x) & WearsFlannelShirtsEveryDay(x) & VeryHighEnergy(x) & Impulsive(x)) -> (Consistent(x) & EnjoysRegularRoutines(x)) | -LikesSurprises(x)))", "all x.(WorthsFlannelShirtsEveryDayAndHighEnergyAndImpulsive(x) -> ((SticksToRegularRoutines(x) | DoesNotLoveSurprises(x))))", "all x.((Person(x) & WearsFlannelShirtsEveryDay(x) & VeryHighEnergy(x) & Impulsive(x)) -> ((Consistent(x) & EnjoysRegularRules(x)) | (-KindlySurprises(x)))))", "all x.((Person(x) & -WornFlannelShirtsEveryDayAndHighEnergy(x) & Impulsive(x)) -> (VeryConsistent(x) & EnjoysRegularRoutines(x)) | -LikesSurprises(x)))", "all x.((Person(x) & -WearsFlannelShirtsEachDay(x) & HighEnergyAndImpetive(x)) -> (Probable(x) | -LovesSurprises(x)))", "all x.((Person(x) & WearsFlannelShirtsEveryDay(x) & HasHighEnergy(x) & Impulsive(x)) -> (Consistent(x) & EnjoysRegularRules(x) | -KnowsSurprises(x)))", "all x.((Person(x) & WearsFlannelShirtsEveryDay(x) & HighEnergy(x) & Irresponsive(x)) -> (SticksToRegularRoutines(x) | -LovesSurprises(x)))", "all x.((Person(x) & -WearsFlannelShirtsEveryDay(x) & VeryHighEnergy(x) & Impulsive(x)) -> (Consistent(x) & EnjoysRegularRoutines(x) | -SatisfiesSurprises(x)))", "all x.((Person(x) & -WearsFlannelShirtsEveryDay(x) & VeryHighEnergy(x) & Impulsive(x)) -> (VeryConsistent(x) & EnjoysStickingToRegularRoutines(x) | -LovesSurprises(x)))", "all x.((Person(x) & NotWearsFlonelleShirtsEveryDay(x) & VeryHighEnergyAndIrresponsive(x)) -> ((VeryConsistent(x) & EnjoysStickingToRegularRules(x)) | -VorsunsLove(x))))", "all x.((Mike(x) & WearsFlannelShirtsEveryDay(x) & HighEnergy(x) & Impulsive(x)) -> ((Consistent(x) & EnjoysSticklingToRegularRoutines(x) | -LikesSurprises(x))))", "all x.((Person(x) & WearsFlannelShirtsEveryDay(x) & VeryHighEnergy(x) & Irregular(x)) -> (VeryConsistent(x) & EnjoysRegularRoutines(x)))", "all x.((Person(x) & WearsFlannelShirtsEveryDay(x) & HighEnergy(x) & Impulsive(x)) -> ((Consistent(x) & EnjoysRegularRoutines(x)) | -AlikesSurprises(x))))"]}
{"id": "folio_train_1036", "nl": "Mike is an old person living in a stable home.", "fol": "(Elderly(Mike) & StableHome(Mike))", "prediction": ["all x.(Mike(x) & Old(x) & LivesInStableHome(x))", "all x.(Mike(x) -> OldPersonRelatedInStableHome(x))", "all x.(Mike(x) -> OldPerson(x) & LivesInStableHome(x))", "the oldPerson(Mike,stableHome)", "all x.(Mike(x) -> OldPersonLivingInStableHome(x))", "all x y z.((Old(x) & Life(y) & StableHome(z) & LivesIn(x,y,z)) -> Man(x))", "all x.(Mike(x) -> OldPerson(x) & LivesInStableHome(x))", "all x.(Mike(x) -> LivesInStableHome(x))", "all x.(Person(x) & LivesInStableHome(x))", "(OldPerson(Mike) & LivesInStableHome(Mike))", "all x.(Mike(x) -> (OldPerson(x) & LivesInStableHome(x)))", "all x.(Mike(x) -> OldPerson(x) & LivesInStableHome(x))", "all x.(Mike(x) -> (OldPerson(x) & LivesInStableHome(x)))", "all x,y.((Mike(x) & OldPerson(y)) -> LivesInStableHome(x,y))", "all x.(Mike(x) -> LivesInStableHome(x))", "all x y.((Mike(x) & StableHome(y)) -> OldPerson(x))"]}
{"id": "folio_train_1037", "nl": "If Mike wears flannel shirts every day or does not like shopping for clothes and other materialistic goods, then Mike is neither an old person living in a stable home nor does not like shopping for clothes and other materialistic goods.", "fol": "((WearsFlannelShirts(Mike) | NoShopping(Mike)) -> (-Elderly(Mike) & -StableHome(Mike)))", "prediction": ["all x.((Mike(x) & (WearsFlannelShirtsEveryDay(x) | -LikesShoppingForClothesAndMaterialisticGoods(x))) -> (-OldPerson(x) & -LikesShoppingForClothesAndMaterialisticGoods(x)))", "all x.(((WorthsFlannelShirtsEveryDay(x) | -LikesShoppingForClothes(x))) -> (OldPerson(x) & -LivesInStableHome(x) & -LikesShoppingForClothesAndMaterialisticGoods(x)))", "all x.((WorthsFlannelShirtsEveryDay(x) | -LikesShoppingForClothesAndMaterialisticGoods(x)) -> -OldPerson(x) & -LikesShoppingForClothesAndMaterialisticGoods(x))", "all x.((WearsFlannelShirtsEveryDay(x) -- (-LikesShoppingClothesAndMaterialisticGoods(x)) & LifesInStableHome(x)) | (-LikesShoppingClothesAndMaterialisticGoods(x))))", "all x.((Mike(x) & WearsFlannelShirtsEveryDay(x)) | (-LikesShopping(x) & LikesShopping(x) & LikesShopping(x))))", "all x.((WorkingIn(x) & WearsFlannelShirtsEveryDay(x) & -MadeOfMathematicalGoods(x)) -> (OldPerson(x) & -MathematicalGoods(x) & StableHome(x) & -MathematicalGoods(x)))", "all x.((Mike(x) & WearsFlannelShirtsEveryDay(x) & -ReadsClothesAndMaterialisticGoods(x)) -> (NeestAlvedPerson(x) & -LikesShoppingForClothesAndMaterialisticGoods(x)))", "all x.((Mike(x) & WearsFlannelShirtsEveryDay(x) | (-TlikesShoppingClothesAndMaterialisticGoods(x)))) -> -Old(x) & DoesNotOrGiveShopping(x))", "all x.((Mike(x) & WearsFlannelShirtsEveryDay(x) | -LikesShoppingForClothesAndMaterialisticGoods(x))) -> (-OldHolder(x) & -LikesShoppingForClothesAndMaterialisticGoods(x)))", "all x.((Mike(x) & WearsFlannelShirtsEveryDay(x) | (-UsedInStableHome(x) & StableHome(x)))) -> -(OldPerson(x) & LikesShoppingForClothesAndMaterialisticGoods(x) & -StableHome(x)))", "all x.((Clothing(x) & IsFlannelShirtsEveryDay(x) | -LikesShoppingForClothesAndMaterialisticGoods(x))) -> (NewPerson(x) & -LikesShoppingForClothesAndMaterialisticGoods(x)))", "all x.((StableHome(x) & WearsFlannelShirtsEveryDay(x)) | (-LikesShoppingClothes(x) & -LikesShoppingMaterialisticGoods(x))))", "all x.((Mike(x) & WornsFlannelShirtsEveryDay(x) | -LikesShoppingCardsAndMaterialisticGoods(x))) -> (Negative(x) & -LikesShoppingCardsAndMaterialisticGoods(x)))", "all x.((Mike(x) & WearsFlannelShirtsEveryDay(x) | (-LovesShoppingCoats(x) & -SpoilsForMaterialisticGoods(x)))) -> -NorAlreadyLivingInStableHome(x))", "all x.((Markey(x) & WearsFlannelShirtsEveryDay(x)) | -(LikesShoppingForClothesAndMaterialisticGoods(x) & LivesInStableHome(x))))", "all x.((Mike(x) & WearsFlannelShirtsEveryDay(x) | -MagnifiesShoppingForClothesAndMaterialisticGoods(x))) -> (-OldPerson(x) & -MagnifiesShoppingForClothesAndMaterialisticGoods(x)))"]}
{"id": "folio_train_1038", "nl": "If Mike is not an old person living in a stable home and does not like shopping for clothes and other materialistic goods, then Mike does not like shopping for clothes and other materialistic goods.", "fol": "((-Elderly(Mike) & -Shopping(Mike)) -> -Shopping(Mike))", "prediction": ["all x.((OldPerson(x) & LivesInStableHome(x) & -LikesShoppingForClothesAndMaterialisticGoods(x)) -> -LikesShoppingForClothesAndMaterialisticGoods(x))", "all x.((OldPerson(x) & -LivingInStableHome(x) & -LikesShoppingClothesAndMaterialisticGoods(x)) -> -LikesShoppingClothesAndMaterialisticGoods(x))", "all x.((OldPerson(x) & LivingInStableHome(x) & -LikesShoppingClothesAndMaterialisticGoods(x)) -> -LikesShoppingClothesAndMaterialisticGoods(x))", "all x.((OldPerson(x) & LivingInStableHome(x) & DoesNotLikeShoppingForClothesAndMaterialisticGoods(x)) -> DoesNotLikeShoppingForClothesAndMaterialisticGoods(x))", "all x.((Alison(x) & StableHome(x) & -LikesShopping(x,clothes,materialisticGoods)) -> -LikesShopping(x,clothes,materialisticGoods))", "all x.((Mike(x) & -oldPerson(x) & LivesInStableHome(x) & -LikesShoppingForClothesAndMaterialisticGoods(x)) -> -LikesShoppingForClothesAndMaterialisticGoods(x))", "all x.((OldPerson(x) & LivesInStableHome(x) & -LovesShopping(x) & LikesShopping(x) & -LovesShopping(x)) -> -LovesShopping(x))", "all x.((OldPerson(x) & LivesInStableHome(x) & -ShoppersForClothesandMaterialisticGoods(x)) -> -ShoppersForClothesAndMaterialisticGoods(x))", "all x.((OldPerson(x) & LivesInStableHome(x) & -LikesShoppingForClothesAndMaterialisticGoods(x)) -> -LikesShoppingForClothesAndMaterialisticGoods(x))", "all x.((OldPerson(x) & LivingInStableHome(x) & -LikesShoppingForClothesAndMaterialisticGoods(x)) -> -LikesShoppingForClothesAndMaterialisticGoods(x))", "all x.((OldPerson(x) & LivesInStableHome(x) & -likesShoppingForClothesAndMaterialisticGoods(x)) -> -likesShoppingForClothesAndMaterialisticGoods(x))", "all x.((OldPerson(x) & LivesInStableHome(x) & -LikesShoppingForClothesAndMaterialisticGoods(x)) -> -LikesShoppingForClothesAndMaterialisticGoods(x))", "all x.((OldPerson(x) & LivingInStableHome(x) & -likesShoppingClothesAndMaterialisticGoods(x)) -> -likesShoppingClothesAndMaterialisticGoods(x))", "all x.((OldPerson(x) & LivesInStableHome(x) & -MadeOfClothesAndMadeOfGoods(x)) -> -MadeOfClothesAndMadeOfGoods(x))", "all x y.(LifeStableHome(x) & -(OldPerson(x) & LivingInStableHome(x) & -LovesShopping(x,y) & MaterialisticGoods(y))) -> -LovesShopping(x,y))", "all x.((OldPerson(x) & LivingInStableHome(x) & -LovesShoppingForClothesAndMaterialisticGoods(x)) -> -LovesShoppingForClothesAndMaterialisticGoods(x))"]}
{"id": "folio_train_1039", "nl": "Adam owns cars.", "fol": "exists x.OwnsCar(Adam,x)", "prediction": ["exists x.(Adam(x) & OwnsCar(x))", "Adam OwnsCars(Adam)", "Adam owns cars.", "(Pilot(Adam) & OwnsCars(Adam))", "(OwnsCars(Adam))", "Adam ownsCars(adam)", "exists x.(Appalb(x) & Owns(x,cars))", "Adam ownsCars(Adam)", "Adam ownsCars.", "-exists x.(Adam(x) & OwnsCars(x))", "(OwnsCars(Adam))", "Adam OwnsCars.", "Adam ownsCars.", "Adam OwnsCars(Adam)", "Adam ownsCars(Adam,x)", "Adam ownsCars & Vehicles."]}
{"id": "folio_train_1040", "nl": "Adam has a favorite car.", "fol": "exists x.FavoriteCar(Adam,x)", "prediction": ["Adam hasfavoriteCar(a) & -FavoriteCar(f) & -FavoriteCar(a) & -FavoriteCar(a) & -FavoriteCar(a))", "exists x.(Adam(x) & Car(x) & Favorite(x))", "Adam has a favoriteCar(a)", "-FavoriteCar(Adam)", "all x.(Has(x,y) -> FavoriteCar(x))", "exists x.(Car(x) & FavoriteCar(x))", "Adam has a favoriteCar(a)", "Adam has a favoriteCar(Adam)", "exists x.(FavoriteCar(x) & Adam(x))", "all x.((Adam(x) & FavoriteCar(x)) -> HasFavoriteCar(x))", "Adam has a favoriteCar(a)", "all x.((Adam(x) & FavoriteCar(x)) -> Has(x,a))", "all x.(Adam(x) -> FavoriteCar(x))", "the x.(FavoriteCar(x) -> has(Adam,x))", "all x.((Adam(x) & FavoriteCar(x)) -> Has(x,Adam))", "Adam HasFavoriteCar(Adam)"]}
{"id": "folio_train_1041", "nl": "Among the cars he owns, Adam's favorite car is European.", "fol": "all x.((OwnsCar(Adam,x) & FavoriteCar(Adam,x)) -> IsEuropeanCar(x))", "prediction": ["as a person, i'm guessing Adam's favorite car is a European.", "Among all x.(Owns(x) -> (FavoriteCar(x) & European(x)))", "all x.((Car(x) & Adam(x)) -> Favorite(x))", "(Owns(Adam'sCar(Adam) & -Owns(Adam'sCar(Adam)))", "(OwnsCar(Adam) & FavoriteCar(Adam))", "(Owns(Adam,Chestnut) & -Owns(Adam,Chestnut))", "all x.((Car(x) & HasCar(x)) -> FavoriteCar(x))", "all x.((Car(x) & AdamOwns(x)) -> FavoriteCar(x,European))", "among all x y.((Car(x) & Adam(y)) -> FavoriteCar(y,x))", "all x.((Car(x) & Owns(x,Adam,European)) -> Favorite(x))", "all x.((Car(x) & Owns(x)) -> FavoriteCar(x))", "among his cars, Adam's favorite is European.", "among the cars he is owning, Adam's favorite car is European.", "all x y.((Car(x) & Adam(y)) -> Favorite(y,x))", "Among all the cars he owns is European.", "(OwnsCar(Adam) & FavoriteCar(Adam))"]}
{"id": "folio_train_1042", "nl": "Adam broke his favorite car.", "fol": "exists x.(OwnsCar(Adam,x) & FavoriteCar(Adam,x) & BrokeCar(Adam,x))", "prediction": ["(BreakFavoriteCar(Adam))", "Adam brokeCar(a)", "Adam had broken the car he loves best.", "Adam brokeCar(adam,a) tv.", "(brokeFavoriteCar(Adam))", "Adam brokecar(a) & lovescar(b))", "Adam brokeFavoriteCar(a)", "Adam rompte his FavoriteCar(x)", "Adam brokefavoriteCar(Adam)", "Adam brokeFavoriteCar(Adam)", "Adam brokef favoritecar(adam,favouriteCar)", "Adam brokeCave(Adam)", "Adam broke his favoriteCar(ad)", "Adam was always the one broke by car.", "Adam brokefavoriteCar(Adam)", "Adam brokefavoriteCar(Adam,Motor)"]}
{"id": "folio_train_1043", "nl": "Adam owns a Japanese car.", "fol": "exists x.(OwnsCar(Adam,x) & Japanese(x))", "prediction": ["Adam owns a JapaneseCar.", "(OwnsJapaneseCar(Adam))", "Adam owns an apron (JapaneseCar))", "Adam owns a JapaneseCar.", "Adam ownsKingdomAuto.", "all x.((JapanCar(x) & Owns(x,Adam)) -> Owns(a,b,j))", "Adam owns a Japanese Car.", "all x.((Adam(x) & Model(y) & JapaneseCar(z)) -> Owns(x,y,z))", "Adam OwnsJapaneseCar(Adam)", "exists x.(Adam(x) & Man(x) & JapaneseCar(x))", "all x.((Adam(x) & OwnsJapaneseCar(x)) -> HasCar(x,JapaneseCar))", "(Owns(Adam,JapaneseCar) & Japanese(Adam)))", "(PatientsJapaneseCar(Adam))", "exists x.(Adam(x) & Owns(x,JapaneseCar))", "Adam owns(a) JapaneseCar(a) & InOwner(b))", "Adam owns JapaneseCar(a,c) & -EqualsToy(d,e))"]}
{"id": "folio_train_1044", "nl": "Adam broke a European car.", "fol": "exists x.(OwnsCar(Adam,x) & IsEuropeanCar(x) & BrokeCar(Adam,x))", "prediction": ["Adam brokeCar(Adam)", "Adam brokeCar(Adam,European)", "all x y.((Adam(x) & EuroparianCar(y)) -> broke(x,y))", "Adam broke a EuropeanCar.", "Adam broke EuropeanCar(a)", "Adam brokeCar(a)", "Adam brokecar(adam) x.(EuropeanCar(a) & EuroPace(b))", "Adam broke(AdamsCar(Adams) | BreakSatelliteCar(Adams))", "Adam brokeEuropeanCar(Adam)", "Adam brokecar(dam)", "Adam brokeCar(a) & LocatedInEurope (p.-EuropeanCar(a)))", "Adam brokeAdamsEuropeanCar(a)", "Adam brokeeurop\u00e9enCar(Adam)", "(Breaks(adam,EuropeanCar) & Car(a))", "all x y.((Adam(x) & EuropeanCar(y)) -> Breaks(x,y))", "Adam brokecar(adam)"]}
{"id": "folio_train_1045", "nl": "No buildings in New Haven are higher than 400 meters. ", "fol": "all x.(IsInNewHaven(x) -> -IsHigherThan400Meters(x))", "prediction": ["-exists x.(Building(x) & InNewHonor(x) & HigherThan400Meters(x))", "-exists x.(Building(x) & HigherThan(x,400))", "-exists x.(NewHunt(x) & HigherThan(x,400))", "-exists x.(Building(x) & HigherThan(x,400))", "in New Haven.(Building(n) & HigherThan400Meters(n))", "-exists x.(Building(x) & NewHaven(x,400))", "-exists x.(Building(x) & HighestTen(x,400))", "-exists x.(Building(x) & NewHunt(x))", "-exists x.(Building(x) & HigherThan(x,400))", "All x.(NewHavenBuilding(x) -> HigherThan(x,400))", "-exists x.(Building(x) & HigherThan(x,400))", "-exists x.(Building(x) & inNew Haven(x) & HigherThan(x,400))", "no buildings in New Haven are higher than 400 meters.", "-exists x.(Building(x) & NewHunt(x,400))", "-exists x.(Building(x) & InNewHandn(x,400))", "-exists x.(Building(x) & NewHannah(x) & HigherThan(x,400))"]}
{"id": "folio_train_1046", "nl": "All buildings managed by Yale Housing are in New Haven. ", "fol": "all x.(ManagedByYaleHousing(x) -> IsInNewHaven(x))", "prediction": ["all x.((Building(x) & ManagedByYaleHousing(x)) -> NewHanover(x))", "all x.((Building(x) & ManagedByYaleHousing(x)) -> NewHaven(x))", "all x y.((Building(x) & YaleHousing(y)) -> NewHunt(x,y))", "all x.((Building(x) & ManagedByYaleHousing(x)) -> NewHanover(x))", "all x.((Building(x) & ManagedByYeahuging(x)) -> NewHaven(x))", "all x.((Building(x) & ManagedByYaleHousing(x)) -> NewHanover(x))", "all x.(Manager(x) -> NewHanover(x))", "all x y.((Building(x) & YaleHousing(y)) -> NewHunt(w))", "all x.(All(x) -> NewHunt(x))", "all x.(BoardsManagement(x) -> NewHaven(x))", "all x.((Built(x) & ManagedByYaleHousing(x)) -> NewHartford(x))", "all x.((Building(x) & ManagedByYaleHousing(x)) -> NewHunt(x))", "all x.(MappedByNewHaven(x) -> RemainsInNewHandon(x))", "all x.((Building(x) & ManagedByYaleHousing(x)) -> NewHank(x))", "all x.(AllHaustricals(x) -> InNewHunt(x))", "all x.(ManagedByYaleHousing(x) -> NewHunt(x))"]}
{"id": "folio_train_1047", "nl": "All buildings in Manhattan are higher than 400 meters. ", "fol": "all x.(IsInManhattan(x) -> IsHigherThan400Meters(x))", "prediction": ["all x.(HollowsCanComputer(x) -> InMennon(x))", "all x.((Building(x) & InMilton(x)) -> HigherThan400Meters(x))", "all x.((Building(x) & In(x,y)) -> HigherThan(x,400))", "all x.((Building(x) & InMetropolis(x,400)) -> HigherThan(x,400))", "all x.((Building(x) & HigherThan(x,400)) -> InMt.Newtown(x))", "all x.((Building(x) & HigherThan(x,400)) -> Manhattan(x))", "all x.((Building(x) & Manhattan(x) & HigherThan400Meters(x)) -> HigherThan400Meters(x))", "all x.((Building(x) & InMilton(x)) -> HigherThan400Meters(x))", "all x.((Building(x) & InMilton(x,440)) -> HigherThan(x,400))", "(all x.(Building(x) & HigherThan400Meters(x)) -> Manhattan(x))", "all x.(Building(x) -> HigherThan400Meters(x))", "all x.((Building(x) & InMidtown(x)) -> HigherThan(x,400))", "all x.((Building(x) & InMilton(x)) -> HigherThan400Meters(x))", "All x.((Building(x) & InMenenton(x)) -> HigherThan400Meters(x))", "all x.((Building(x) & inMetropolitan(x)) -> MoreThan400Meters(x))", "all x.((Building(x) & InMetropolitan(x)) -> HigherThan400Meters(x))"]}
{"id": "folio_train_1048", "nl": "All buildings owned by Bloomberg are in Manhattan. ", "fol": "all x.(OwnedByBloomberg(x) -> IsInManhattan(x))", "prediction": ["all x.(Budget(x) -> NYC(x))", "all x.(BananasBridge(x) -> InNewtown(x))", "all x.(BurnHouse(x) -> InMidtown(x))", "all x.((Building(x) & Bloomberg(x)) -> inMetropolitan(x))", "all x.(Building(x) -> Bloomberg(x))", "all x.((Building(x) & BloombergOwns(x)) -> InMetropolitan(x))", "all x.(Building(x) -> InMiami(x))", "all x.((Building(x) & OwnedByBanana(x)) -> InMetropolitan(x))", "all x.((Building(x) & OwnedByBrown(x)) -> InMennonia(x))", "all x.(Building(x) -> OwnedByBananas(x))", "all x.(OwnsByBancoy(x) -> InNewtown(x))", "all x.(BurnFond(x) -> Manhattan(x))", "all x.((Building(x) & OwnedByBloomberg(x)) -> Manhattan(x))", "all x.((Building(x) & OwnedByBurnaro(x)) -> Manhattan(x))", "all x.(Building(x) -> OwnedByBanana(x))", "all x.((Building(x) & OwnedByBuyBanana(x)) -> InMetropolis(x))"]}
{"id": "folio_train_1049", "nl": "All buildings with the Bloomberg logo are buildings owned by Bloomberg. ", "fol": "all x.(HasBloombergLogo(x) -> OwnedByBloomberg(x))", "prediction": ["all x.((Building(x) & BloombergLogo(x)) -> BankOwnedByB Bloomberg(x))", "all x.((Building(x) & BloombergLogo(x)) -> OwneredBy(x,y))", "all x.((Building(x) & HasBilliamsLogo(x)) -> OwnedByBilliams(x))", "all x.((Building(x) & BloombergLogo(x)) -> BloombergBuilding(x))", "all x.((Building(x) & BloombergLogo(x)) -> OwnedByBianca(x))", "all x.((Building(x) & BloombergLogo(x)) -> OwnedByBananas(x))", "all x.((Building(x) & HasBananaLogo(x)) -> OwnedByBanana(x))", "all x.((Building(x) & HasBarriosLogo(x)) -> OwnedByBirmingham(x))", "all x.((Building(x) & HasBloombergLogo(x)) -> BloombergBuilding(x))", "all x.((Building(x) & HasBurnsbySymbol(x)) -> BuildableToBurnsby(x))", "all x.(Built(x) -> OwnedByBilliam(x))", "all x.((Building(x) & BloombergLogo(x)) -> BloombergBuilding(x))", "all x.((Building(x) & HasByBurnsbyLogo(x)) -> OwnedByBurnsby(x))", "all x.((Building(x) & HasBankyLogo(x)) -> AssetOfBanana(x))", "all x.((Building(x) & BloombergLogo(x)) -> OwnedByBurnaro(x))", "all x.((Building(x) & BloombergLOGOwn(x)) -> OwnedByBiz.(Building(x) & BusinessObject(x)))"]}
{"id": "folio_train_1050", "nl": "Tower A is neither in New Haven nor in Manhattan.", "fol": "-((IsInNewHaven(Towera) & -IsInManhattan(Towera)) | (-IsInNewHaven(Towera) & IsInManhattan(Towera)))", "prediction": ["none of these things exists y.((TowerA(x) & -NewHannes(y)) | exists z.(TowerA(z) & NYC))))", "all x.((TowerA(x) & -InNew Haven(x) | InNewYork(x))) -> -InNewNevis(x))", "The Tower A (Melbourne,New Haven,NewNebwest) & -(Menardtown,New Haven) & -Menardtown(Menardtown)))", "(-(NewHaven(tower) & -ModernHouse(tower A)) | -(NewHaven(tower) & Manhattan(tower))))", "(Metropolitan(ConsiderA) & -In(A) | NewAnother(A)))", "-(NewHunt(TowerA) | Manhattan(TowerB))", "(-NewHaven(TowerA) | Manhattan(TowerA))", "all x.(TowerA(x) -> -(InNew Haven(x) | InMidtown(x)))", "-InNewHaven(TowerA) & -InMilton(TowerA))", "-(NewHaven(TowerA) | Manhattan(TowerA))", "TowerA isNeitherInNew Haven,neitherInMennonitoba.", "All x.(TurnorA(x) -> -(NewHaven(x) | Manhattan(x)))", "All x.(TurnorA(x) -> (-NewHunt(x) | Manhattan(x)))", "(NoWallA(TowerA) | NYCWallA(TowerB)))", "-(TurmAInNew Haven(tower) | TowerAInNewMontreal(tower)))", "(-(NewHaven(TowerA) | Manhattan(TowerA)))"]}
{"id": "folio_train_1051", "nl": "Tower B is a building with the Bloomberg logo and in Manhattan. ", "fol": "(HasBloombergLogo(Towerb) & IsInManhattan(Towerb))", "prediction": ["all x.((Building(x) & HasBurnsbyLogo(x) & in(x,Manhattan)) -> TowerB(x))", "all x.(TowerB(x) -> (Building(x) & BloombergLogo(x) & inNew York(x)))", "all x.(TowerB) -> (Building(x) & BloombergLogo(x) & InMcNeighborhood(x)))", "all x.((Building(x) & BloombergLogo(x) & inMenlo Park (x)) -> TowerB))", "all x.((Building(x) & BloombergLogo(x) & inNepometro(x)) -> TowerB(x))", "all x.(TowerB(x) -> (BuildingWithBurnhillLogo(x) & InNewtown(x)))", "all x.(TurnorB(x) -> (Building(x) & BloombergLogo(x) & inMetropolitan(x)))", "all x.((Building(x) & BloombergLogo(x) & InManhattan(x)) -> TowerB(x))", "(Building(TowerB) & TowerBenefit(TowerBenefit(TowerBenefit) & LocatedInMt.Jenny(TowerBenefit))", "all x.(TowerB(x) -> (Building(x) & BloombergLogo(x) & LocatedInMenlo Park(x)))", "all x.((Building(x) & BloombergLogo(x) & InMendoniorBeneath(x)) -> TowerB(x))", "(Building(TowerB) & HasBananaBuckyardLogo(tower,New York))", "all x.(TowerB(x) -> (Building(x) & IBMLogo(x) & Manhattan(x)))", "all x.((Building(x) & BloombergLogo(x) & inMetropolis(x)) -> TowerB(x))", "all x.(TowerB(x) -> (Building(x) & HasBloombergLogo(x) & InMidtown(x)))", "all x.(TowerB(x) -> (Building(x) & hasBananasLogo(x) & inMidtown(x)))"]}
{"id": "folio_train_1052", "nl": "Tower A is higher than 400 meters.", "fol": "IsHigherThan400Meters(TowerA)", "prediction": ["All x.((TowerA(x) & HigherThan400Meters(x)) -> TowerA(x))", "All x.(TurbineA(x) -> HigherThan(x,400))", "(HigherTurbine(TowerA,400))", "All x.(TurbineA(x) -> HigherThan400Meters(x))", "all x.(TowerA(x) -> HigherThan(x,400))", "All x.(TowerA(x) -> HigherThan400Mounts(x))", "TowerA(TurnA) -> HigherThan400Meters(A))", "(HigherTurmAt(TowerA) & HigherThan400Meters(Tower1))", "All x.(TowerA(x) -> HigherThan(x,400))", "TowerA is HigherThan400Meters(CourtA,0)", "In TowerA,the ElevatorScore(x,400)", "all x.(Tower(x) -> HigherThan(x,400))", "All x.(TowerA(x) -> HigherThan(x,400))", "all x.(TowerA(x) -> HigherThan400Meters(x))", "The Tower A is a higherThan400Meters(Torro(Tower))", "TowerA is higher than 400 meters."]}
{"id": "folio_train_1053", "nl": "Tower A is not higher than 400 meters.", "fol": "-IsHigherThan400Meters(TowerA)", "prediction": ["all x.((TowerA(x) & -HigherThan400Meters(x)) -> -HigherThan400Meters(x))", "(-HigherTree(TowerA,400))", "((TowerA(Tower A) & -HigherThan(TowerA,400)) -> -HigherThan(TowerA,400))", "all x.((TowerA(x) & -HigherThan400Meters(x)) -> -HigherThan(x,400))", "all x.((TowerA(x) & -400MetersHigher(x)) -> Requires(x,200))", "All x.(TurbineA(x) -> -(HigherThan400Meters(x))))", "All x.(TurbineA(x) -> -HigherThan400Meters(x))", "all x.(TurmA(x) -> -HigherThan400Meters(x))", "All x.(TowerA(x) -> -HigherThan400Meters(x))", "All x.((TowerA(x) & -HigherThan400Meters(x)) -> -HigherThan400Meters(x))", "all x.(TurmA(x) -> -HigherThan400Meters(x))", "All x.(WoodA(x) -> -(HigherThan(x,400)))", "All x.((TowerA(x) & -400Meters(x)) -> -HigherThan(x,400))", "All x.(Turbine(x) -> -HoterThan400Meters(x))", "TowerA is not higher than 400 meters.", "(OptionalWarning(TowerA,300) & -HigherThan(TowerA,400))"]}
{"id": "folio_train_1054", "nl": "Tower A is a building with the Bloomberg logo or managed by Yale Housing.", "fol": "(HasBloombergLogo(Towera) | ManagedByYaleHousing(Towera))", "prediction": ["all x.((Building(x) & (BloombergLogo(x) | YaleHousing(x))) -> TowerA(x))", "all x.(TurnorA(x) -> (Building(x) & (BurnyLogo(x) | YaleHousing(x)))))", "all x.((Building(x) & (BloombergLogo(x) | YaleHousing(x))) -> TowerA(x))", "all x.(TowerA(x) -> (Building(x,BloombergLogo) | ManagedByYairnHousing(x)))", "all x.(TowerA(x) -> (Building(x) & (BenjaminLogo(x) | YaleHousing(x))))", "all x.(TowerA(x) -> (Building(x) & ( BloombergLogo(x) | managedByYayHousing(x))))", "all x.((Building(x) & (BillKingdom(x) | LicensedByYaleHousing(x))) -> TowerA(x))", "all x.((Building(x) & (BloombergLogo(x) | YaleHousing(x))) -> TowerA(x))", "all x.(Building(x) & (BankyLogo(x) | YaleHousing(x))) -> TowerA(x))", "all x.((Building(x) & (BurnyLogo(x) | YaleHousing(x))) -> TowerA(x))", "all x.((Building(x) & (BloombergLogo(x) | YaleHousing(x))) -> TowerA(x))", "all x.((Building(x) & (BurgayLogo(x) | ManagedByYaleHousing(x))) -> TowerA(x))", "all x.((Building(x) & (BankyLogo(x) | YaleHousing(x))) -> TowerA(x))", "all x.(Building(x) -> (BurghadokeLogo(x) | YaleHousing(x)))", "all x.(TurbineA(x) -> (Building(x) & (BumbyLogo(x) | YaleHousing(x))))", "all x.((Building(x) & (BloombergLogo(x) | YaleHousing(x))) -> TowerA(x))"]}
{"id": "folio_train_1055", "nl": "Tower A is neither a building with the Bloomberg logo nor managed by Yale Housing.", "fol": "(-HasBloombergLogo(Towera) & -ManagedByYaleHousing(Towera))", "prediction": ["all x.(TowerA(x) -> (-(BuildingWithBengalBirminghamLogo(x) | ManagedByYaleHousing(x))))", "(Building(TowerA) & -(HasBudgetBottom(A) | ManagedByYaleHousing(A)))", "\u0442\u0432\u0430\u043d\u0438 \u043e \u0430\u0434\u043e\u043e\u0440\u0430\u043b\u043d\u043e\u043e \u0430\u0440\u0430 ((Building(x) & BloombergLogo) & -YaleHousehold(x)) \u043e\u0443\u043b\u0442\u043d\u043e\u043e \u0434\u043b \u043e \u0441\u0438\u0442\u0430 (,)))", "all x.(TortowerA(x) -> (-(BuildingWithBananasLogo(x) & -ManagedByY YaleHousing(x)) & -(BuildingWithBananasLogo(x) & ManagedByY YaleHousing(x))))", "all x.((Building(x) & -(BByBanjayLogo(x) | YaleHousing(x))) -> TowerA(x))", "all x.(TurbineA(x) -> (-BurnBlueBy(x) & -ManagedByY YaleHousing(x)))", "(-(BuildingWithBurningLogo(TowerA) & -ManagedByYaleHousing(TowerA)) & -(Building(TowerA) & HasBurningLogo(TowerA)) | -(Building(TowerA) & ManagedByYaleHousing(towerA))))", "all x.((Building(x) & -BurnbananaLogo(x) & -ManagedByYaleHousing(x)) -> TowerA(x))", "-(Building(TowerA) & -(BuildingwithBurgusonLogo(A) | ManagedByYaleHousing(B)))", "all x.(TowerA(x) -> (-exists y.(BloombergLogo(y) & Has(x,y)) & -exists z.(YaleHousingLogo(z) & ManagedBy(x,z)))))", "(-exists x.(Tower(x) & HasBurbankLogo(x))) & -exists y.(Tower(y) & ManagedByY YaleHousing(y)))", "all x.((Building(x) & -(BuysaleWord(x) | YaleHousing(x))) -> (-BloombergLogo(x) | YaleHousingLogo(x)))", "-(Building(towerA) & -BuysByBengalbo.(Building) & BloombergLogo(towerA) & -ManagedByYaleHousing(towerByYaleHousing(towerA)))", "*(Tower(a) & -(BuildingWithBannerbrand(a) | ManagedByYaleHousing(a)))", "(Building(TowerA) \u2013 (NeitherBenignWithBananasLogo(towerA) & -ManagedByYaleHousing(towerA)))", "all x.((Building(x) & -(BankersLogo(x) | YaleHousing(x))) -> TowerA(x))"]}
{"id": "folio_train_1056", "nl": "No fish are birds.", "fol": "all x.(IsFish(x) -> -IsBird(x))", "prediction": ["-exists x.(Fish(x) & Bird(x))", "-exists x.(Fish(x) & Bird(x))", "-exists x.(Fish(x) & Bird(x))", "-exists x.(Fish(x) & Bird(x))", "-exists x.(Fish(x) & Bird(x))", "all x.(Fish(x) -> -Bird(x))", "-exists x.(Fish(x) & Bird(x))", "-exists x.(Fish(x) & Bird(x))", "-exists x.(Fish(x) & Bird(x))", "-exists x.(Fish(x) & Bird(x))", "all x.(Fish(x) -> -Bird(x))", "-exists x.(Fish(x) & Bird(x))", "-exists x.(Fish(x) & Bird(x))", "-exists x.(Fish(x) & Bird(x))", "all x.(Fish(x) -> Bird(x))", "-exists x.(Fish(x) & Bird(x))"]}
{"id": "folio_train_1057", "nl": "Everything that is an osprey is a bird.", "fol": "all x.(IsOsprey(x) -> IsBird(x))", "prediction": ["all x.((Osprey(x) & Bird(x)) -> NotOsprey(x))", "all x.((Osprey(x) & Bird(x)) -> Bird(x))", "all x.(Osprey(x) -> Bird(x))", "all x.((Osprey(x) & HasOsprey(x)) -> Bird(x))", "all x.(Osprey(x) -> Bird(x))", "all x.((Osprey(x) & Bird(x)) -> HasBeen(x))", "all x.((Osprey(x) & Bird(x)) -> Bird(x))", "all x.(Osprey(x) -> Bird(x))", "all x.((Osprey(x) & Flying(x)) -> Bird(x))", "all x.(Osprey(x) -> Bird(x))", "all x.((Osprey(x) & Bird(x)) -> Boar(x))", "all x.((Osprey(x) & Bird(x)) -> CanBe(x))", "all x.((Osprey(x) & Bird(x)) -> Bird(x))", "all x.((Osprey(x) & Bird(x)) -> AllOf(x))", "all x.(Osprey(x) -> Bird(x))", "all x.((Osprey(x) & Bird(x)) -> Is(x,y))"]}
{"id": "folio_train_1058", "nl": "If something is a carp, then it is a fish.", "fol": "all x.(IsCarp(x) -> IsFish(x))", "prediction": ["all x.((Carp(x) & Fish(x)) -> Fish(x))", "all x.((Carp(x) & Fish(x)) -> Fish(x))", "all x.((Crop(x) & Fish(x)) -> Fish(x))", "all x.((Carp(x) & Fisher(x)) -> Fish(x))", "all x.((Chip(x) & Fish(x)) -> Fish(x))", "all x.(Carp(x) -> Fish(x))", "all x.((Carp(x) & Fish(x)) -> Carp(x))", "all x.((Carp(x) & Fish(x)) -> CanBe(x))", "all x.((Crap(x) & Fish(x)) -> Fish(x))", "all x.((Carp(x) & Fish(x)) -> Fish(x))", "all x.((Crawl(x) -> Fish(x))", "all x.(Charp(x) -> Fish(x))", "all x.((Carp(x) & Fish(x)) -> Fish(x))", "all x.((Crop(x) & Fish(x)) -> Fish(x))", "all x.((Carp(x) -> Fish(x))", "all x.(Carp(x) -> Fish(x))"]}
{"id": "folio_train_1059", "nl": "All goldfish are carp.", "fol": "all x.(IsGoldfish(x) -> IsCarp(x))", "prediction": ["all x.(Goldfish(x) -> Carp(x))", "all x.(Goldfish(x) -> Crap(x))", "all x.(Goldfish(x) -> Carp(x))", "all x.(Goldfish(x) -> Carp(x))", "all x.(Goldfish(x) -> Carp(x))", "all x.(Goldfish(x) -> Carp(x))", "all x.(Goldfish(x) -> Crap(x))", "all x.(Goldfish(x) -> Carp(x))", "all x.(Goldfish(x) -> Carp(x))", "all x.(Goldfish(x) -> Carp(x))", "all x.(Goldfish(x) -> Carp(x))", "all x.(Goldfish(x) -> Carp(x))", "all x.(Goldfish(x) -> Carp(x))", "all x.(Goldfish(x) -> Crap(x))", "all x.(Goldfish(x) -> Carp(x))", "all x.(Goldfish(x) -> Carp(x))"]}
{"id": "folio_train_1060", "nl": "If Bubbles is either an osprey or a goldfish, then Bubbles is not a fish.", "fol": "(((IsOsprey(Bubbles) & -IsCarp(Bubbles)) | (-IsOsprey(Bubbles) & IsCarp(Bubbles))) -> -IsFish(Bubbles))", "prediction": ["all x.((Blowfish(x) & (Osprey(x) | Goldfish(x))) -> -Fish(x))", "all x.((Bullet(x) & (Osprey(x) | Goldfish(x))) -> -Fish(x))", "all x.((Bupella(x) & (Osprey(x) | Goldfish(x))) -> -Fish(x))", "all x.((Osprey(x) | Goldfish(x)) -> -Fish(x))", "all x.((Bubble(x) & (Osprey(x) | Goldfish(x))) -> -Fish(x))", "all x.((Bubble(x) & (Osprey(x) | Goldfish(x))) -> -Fish(x))", "all x.((Blum(x) & (Osprey(x) | Goldfish(x))) -> -Fish(x))", "all x.((Balloon(x) & (Osprey(x) | Goldfish(x))) -> -Fish(x))", "all x.((Bubble(x) & (Osprey(x) | Goldfish(x))) -> -Fish(x))", "all x.((Bubble(x) & (Osprey(x) | Goldfish(x))) -> -Fish(x))", "all x.((Bubble(x) & (Osprey(x) | Goldfish(x))) -> -Fish(x))", "all x.((Bubble(x) & (Osprey(x) | Goldfish(x))) -> -Fish(x))", "all x.((Bubble(x) & (Osprey(x) | Goldfish(x))) -> -Fish(x))", "all x.((Bubble(x) & (Osprey(x) | Goldfish(x))) -> -Fish(x))", "all x.((Balloon(x) & (Osprey(x) | Goldfish(x))) -> -Float(x))", "all x.((Boomper(x) & (Osprey(x) | Goldfish(x))) -> -Fish(x))"]}
{"id": "folio_train_1061", "nl": "Bubbles is an Osprey.", "fol": "IsOsprey(Bubbles)", "prediction": ["Osprey(osprey)", "All x.(Osprey(x) -> Bubbles(x))", "Alles x.(Balloon(x) -> Osprey(x))", "All x.(Buppet(x) -> Osprey(x))", "Osprey(bubbly)", "Osprey(Bubbles)", "Osprey(Bubbles)", "Osprey(Bubbles)", "Osprey(Bubbles)", "Bubbles is Osprey(x) -> CanAttendOsprey(x))", "All x.(Bollops(x) -> Osprey(x))", "Osprey(Bubbles)", "All x.(Bubble(x) -> Osprey(x))", "All x.(Balloon(x) -> Osprey(x))", "Osprey(Bubbles)", "Osprey(Balloon(x) & Osprey(x))"]}
{"id": "folio_train_1062", "nl": "Bubbles is a carp.", "fol": "IsCarp(Bubbles)", "prediction": ["All x.(Balloon(x) -> Carp(x))", "all x.(Bubbles(x) -> Carp(x))", "all x.(Bubble(x) -> Carp(x))", "all x.(Bubbles(x) -> Carp(x))", "All x.(Baby(x) -> Carp(x))", "all x.(Bubble(x) -> Carp(x))", "All x.(Bush(x) -> Carp(x))", "all x.(Bubbles(x) -> Carp(x))", "all x.(Bubbles(x) -> Carp(x))", "all x.(Bubble(x) -> Carp(x))", "all x.(Bubble(x) -> Carp(x))", "all x.(Bumper(x) -> Carp(x))", "ALL x.(Bubbles(x) -> Peck(x))", "(Crap(Bubbles) & Carp(Bumps))", "all x.(Bubbles(x) -> Crap(x))", "all x.(Bupa(x) -> Carp(x))"]}
{"id": "folio_train_1063", "nl": "Bubbles is not a carp.", "fol": "-IsCarp(Bubbles)", "prediction": ["all x.(Bubbles(x) -> -Crop(x))", "all x.(Bubbles(x) -> -Carp(x))", "all x.(Bubbly(x) -> -Crop(x))", "all x.(Bubble(x) -> -Crop(x))", "all x.(Baby(x) -> -Crop(x))", "all x.(Blast(x) -> IsNotCrop(x))", "all x.(Bubble(x) -> -Crop(x))", "all x y.((Balloon(x) & Carp(y)) -> -Carp(x))", "all x.(Balloon(x) -> -Crop(x))", "all x.(Bubble(x) -> -Crop(x))", "all x.(Bubbly(x) -> -Crop(x))", "all x.(Balloon(x) -> -Crop(x))", "all x.(Bubble(x) -> -Crap(x))", "all x.(Bubbly(x) -> -Crop(x))", "all x.(Bubble(x) -> -Carp(x))", "all x.(Bubble(x) -> -Piece(x))"]}
{"id": "folio_train_1064", "nl": "Mr. and Mrs. Smith make a travel plan, they want to go to a city in California or Florida, and where neither of them has ever been.", "fol": "all x.((DesiresTravelPlan(x) -> (IsInCalifornia(x) | IsInFlorida(x))) & HasNeverVisited(x))", "prediction": ["all x y z.((Mr(x) & Ms(y) & City(z)) -> (MadeTravelPlan(x,y) & (CaliforniaCity(z) | FloridaCity(z)) & -BelongsTo(x,y)))", "((City(Mr.Smith,California) | City(Mrs.Smith,Florida)) & (Mr.Smith,California) & -Mr.Smith,Florida)))", "all x y.((Mr.Sussey(x) & Ms.Smith(y)) -> (MakesTravelPlan(x) & WantsToGoTo(y,California) | WantsTo(y,Florida)) & -SeenAnywhere(y,California)))", "all x y z.((Mr.(Mrs.(Mrs.(Mrs.(Mr.(Mrs.James) & Mrs.(Mrs.(Mrs.James)) & City(y) & City(z) & California(z) & Florida(z)) -> (MakesTravelPlan(x) & (Ya'veBeen(x,y,z) | (And))))))", "all x.((Mr.Smith(x) & -(City(x) & -City(x)) & MakesTravelPlan(x))) -> (WandersIn(x,Chile) | WishesIn(x,Florida))))", "all x.((Mr.Smith(x) & (California(x) | Florida(x))) -> (MakesTravelPlan(x) & (YearLimits(x) | CareerLimits(x))))", "all x y z.((Mr.(MrsSmith(x) & Mrs.(MrsSmith) & City(y) & City(z)) & MakesTravelPlan(x) & (California(y) | Florida(y))) -> -WantToGoTo(x,y,z))", "all x y z.((Mrs(x) & Mrs(y)) -> (MakesTravelPlan(x) & (WantsToCity(x,Ca.) | WantsToCity(x,Fla.)) & -NeesyBeing(y)))", "all x y.((Mrs.Smith(x) & Mrs.Smith(y)) -> (MakesTravelPlan(x) & ((Candidate(x) & -Flavore(x)) | City(y))))", "all x.((Mr.(Mrs.Smith) & MakeTravelPlan(x) & (CaliforniaCity(x) | FloridaCity(x))) -> -exists y.(Mrs.Smith(y) | FloridaCity(y)))", "all x y z.((Mr.(Mrs.(Mrs.(Mrs.Smith) & City(y) & City(z) & MakesTravelPlan(x) & (California(y) | Florida(z)) & -RecentTo(x,y,z))) -> (DependsOn(x,y) | WantsToGo(x,z))))", "all x y.((Mr.Smith(x) & Mrs.Smith(y)) -> (MakesTravelPlan(x) & (WantsToCalifornia(x) | WantsToFlorida(x)) & -WereWere(y)))", "all x y z.((Mr.(Mr.(Mr.Smith) & Mrs.(Mr.Smith) & City(y) & City(z) & MakesTravelPlan(x,z)) -> -(To(Mrs.Smith,y) & To(Mrs.Smith,y,z))))", "all x.((Mr.Sanders(x) & (CaliforniaCity(x) | FloridaCity(x)) & -RegionalCity(x)) -> TripPlan(x))", "all x y.((Mr.Smith(x) & Mrs.Smith(y)) -> (MakesTravelPlan(x) & (WantsToSeeCity(x,y) & (UsedInCalifornia(x) | UsedInFla.(x))) & -(UsedIn(y,California(y) & UsedIn(y,Florida)))))", "all x y z.((Mr.Smith(x) & Mrs.Smith(y) & City(z)) -> ((MakesTravelPlan(x,z) & (CaliforniaCity(x,y) | FloridaCity(x,z)) & -Average(y))))"]}
{"id": "folio_train_1065", "nl": "Cities in California that they are interested in are San Francisco, Los Angeles, and San Diego.", "fol": "all x.(((IsSanFrancisco(x) | IsLosAngeles(x) | IsSanDiego(x)) & IsInCalifornia(x)) -> DesiresTravelPlan(x))", "prediction": ["(InDiverse(SanFrancisco) & InInterest(LosAngeles) & InInterest(SanDelray(SanDerby))", "(interesting(Council) | (InInterest(City) | InInterest(city))))", "all x.((City(x) & InCalifornia(x)) -> (San Francisco(x) | Los Angeles(x) | SanDiego(x)))", "all x.((Country(x) & InterestsIn(x)) -> (SanFrancisco(x) | Los Angeles(x) | SanDiego(x)))", "(InvestmentsInCalifornia(c) | InterestsInCalifornia(c)) -> (SanFrancisco(a) | InterestsInLasAngles(b) | InterestsInSanDistrict(c)))", "all x.((City(x) & InterestIn(x)) -> (SanFrance(x) | Los Angeles(x) | SanDiego(x)))", "(InCaliforniaCity(x) & InterestsInSanFrancisco(x) & InterestsInLosAngeles(x) & InterestsInSanDiego(x))", "all x.((City(x) & California(x)) -> (SanFrancisco(x) | Los Angeles(x) | SanDiego(x)))", "all x.((City(x) & (InCalifornia(x) | InCalifornia(x))) -> (SanFrancisco(x) | Los Angeles(x) | SanDistrict(x)))", "all x y.((City(x) & City(y) & InterestIn(x,y)) -> (SanFrancisco(x) | Los Angeles(x) | San Diego(x)))", "(Individual(city) & InterestsIn(city,sanFrancisco) & InterestsIn(city,los Angeles) & InterestsIn(city,sanDiego))", "(InCity(City): (SanFrancisco(City) | LosAngeles(City) | SanDiego(City))))", "all x.((City(x) & inCalifornia(x)) -> (SanFrancisco(x) | Los Angeles(x) | SanDiego(x)))", "(InterestingCities(CC) -> (SanFrancisco(CC) | Interests(CC) | Interests(CC)))", "all x.((City(x) & InterestIn(x,SanFernando)) -> (SanFrancisco(x) | Los Angeles(x) | SanDiego(x)))", "(All x.((CityInCalifornia(x) & Interest(x)) -> (SanFrancisco(x) | Los Angeles(x) | SanDistrict(x)))"]}
{"id": "folio_train_1066", "nl": "Cities in Florida that they are interested in are Orlando and Miami.", "fol": "all x.(((IsOrlando(x) | IsMiami(x)) & IsInFlorida(x)) -> DesiresTravelPlan(x))", "prediction": ["all x.((City(x) & InterestIn(x,Orlando) and InterestIn(x,Miami)) -> InterestIn(x,Orlando))", "all x.((City(x) & Florida(x)) -> (Orlando(x) | Miami(x)))", "all x.((City(x) & InterestdIn(x,Orlando) & InterestdIn(x,Miami)) -> InterestdIn(x,Orlando))", "exists x.(City(x) & InCity(x,FL) & Orlando(x) & Miami(x))", "all x.((City(x) & InFlorida(x)) -> (Orlando(x) | Miami(x)))", "all x.(InPrivate(x) -> (Orlando(x) | Miami(x)))", "all x.((City(x) & InterestsIn(x,Orlando) & InterestsIn(x,Miami)) -> Infrastructure(x))", "all x.(InterestedIn(x,City(x) -> (Orlando(x) | Miami(x)))", "all x.((City(x) & FloridaCity(x)) -> (Orlando(x) | Miami(x)))", "all x.((City(x) & Florida(x) & InterestIn(x,Orlando) & InterestIn(x,Miami)) -> InterestTo(x,Florida))", "all x y.((City(x) & FloridaCity(y)) -> (InterestedIn(x,y) & In(x,y)))", "all x y.((City(x) & City(y,x) & Interest(x,y)) -> (Orlando(x) | Miami(x)))", "all x.((City(x) & Interest(x)) -> (Orlando(x) | Miami(x)))", "all x.((City(x) & InterestInFlorida(x)) -> (Orlando(x) | Miami(x)))", "all x.((City(x) & InterestedIn(x)) -> (Orlando(x) | Miami(x)))", "all x.((City(x) & Interest(x)) -> (Orlando(x) | Miami(x)))"]}
{"id": "folio_train_1067", "nl": "Mr. Smith has been to two cities in California.", "fol": "VisitedCaliforniaCity(MrSmith,Two)", "prediction": ["All x.(Mr.Smith(x) -> (EarlyTo(x,2) & RecentTo(x,2)))", "M.Smith (Mr.Paterson) & Sensecario(Mr.Brown))", "all x.(Mr.Smith(x) -> VisitedCity(x,2))", "Mr.Smith has been to two cities in California.", "Several years ago, Mr.Smith has beenToTwoCities(Mr.Sander)", "Mr.Smith has been to two cities in California.", "M.Smith has been to two cities (California) & is currently in California.", "I have been to two cities in California & Mr. Smith has been there.", "-Mr.Smith.(Mr.Savage) has beenToTwoCities(Mr.Savage,California))", "& (City(Smith): California(Smith))", "_(Mr.Smith(Mrs.ZoroCity(Mr.City(Mr.Sander(Mr.City) & City(Mr.City) & City(Mr.City)))", "Mr.Smith has been to two cities in California.", "(City(Mr.Smith) & City(Mr.Smith) & City(Mr.Smith))", "All x.(MrScott(x) -> HasBeenTo(x,2))", "(Mr.Smith(Mr.Smith) & TwoCities(Mr.Smith) & OneCity(Mr.Smith) & OneCity(Mr.Smith))", "Mr.Smith has been to two cities in California."]}
{"id": "folio_train_1068", "nl": "Mrs. Smith has been to one city in Florida.", "fol": "VisitedFloridaCity(MrsSmith,One)", "prediction": ["all x.(MrsSmith(x) -> WasTo(x,Florida))", "all x.(MsSander(x) -> exists y.(CityInFLaming(y) & InFla.(z) & KnownIn(x,y,z))))", "Mrs.Smith has been to one city in Florida.", "(There are 3 cities in Florida.)", "(exists x.(City(x) & inFlorida(x)) & MissShank(x))", "Mrs.Smith has been to just one Florida City.", "all x.(Smith(x) -> exists y.(City(y) & Florida(y) & LocatedIn(x,y))))", "(Ms.Smith(Ms.Florida) & HeardOnCity(Ms.Florida))", "all x.(FreshCity(x) -> Mrs(x))", "exists x.(Mrs.Smith(x) & CanBeTo(x,Fla.))", "all x.(Ms.Smith(x) -> HaveSeenToOneCity(x,florida))", "is located in Florida.", "all x y.((Ms.Smith(x) & City(y)) -> InFlorida(x,y))", "Mrs.Smith has bee to one city,FL.", "all x.(MrsSmith(x) -> WasToCity(x,Florida))", "-(Mrs.Smith(m) & City(c) & Florida(m)))"]}
{"id": "folio_train_1069", "nl": "Mr. Smith has been to San Francisco.", "fol": "IsSanFrancisco(MrSmith)", "prediction": ["-Staff(Mr.Smith)", "(Son(Mr.Smith) & To(Mr.SantaFernando(Mr.Smith))", "(AsSony(Mr.Smith) & SanFrance(Mr.Smith))", "(RecentTo(Mr.Smith) & SanFernando(Mr.Smith))", "M.Smith has been to San Francisco.", "all x.(Mr.Smith(x) -> WeAreTo(x,SanFrancisco))", "-(Mr(Mr.Smith) & SanFernando(Mr.Smith))", "(BelongsTo(Mr.Smith,SanFrancisco))", "all x.(MrJackson(x) -> SanFrankfort(x))", "all x.(Mr.Smith(x) -> SanFrancisco(x))", "(-Sam Smith To(Mr.StanFranklin))", "Mr.Smith has been to San Francisco.", "-SonyFernando(Mr.Smith)", "Several different stops in San Francisco.", "Smith has been to San Francisco.", "has been to SanFrancisco(MrSmith)"]}
{"id": "folio_train_1070", "nl": "They have at leat one candidate city in Florida to visit.", "fol": "exists x.(CandidateCity(x) & IsInFlorida(x) & DesiresTravelPlan(x))", "prediction": ["exists x.(City(x) & Candidate(x) & InFlorida(x))", "exists x peng.City(x) & CandidateCity(x,FL) & VisitedBy(x,FL))", "all x y.((ChancelCity(x) & Jacksonville(y)) -> Visited(x,y))", "the candidatecity(x) -> exists y.(CandidateCity(y) & VisitableIn(e,f)))", "all x.((CandidateCity(x) & InFlorida(x)) -> Visits(x))", "all x.(VacantCity(x) -> Has(x,Florida))", "all x.(CandidateCity(x) -> Visits(x))", "all x.(Stays(x) -> VisitsCandidateCity(x,Florida))", "all x.(CandidateCity(x,Fla.) -> Visits(x))", "all x.((Council(x) & CandidateCity(x)) -> Visited(x))", "all x y.((City(x) & City(y) & Florida(x)) -> ToVisit(x,y))", "all x y.((LenatCity(x) & CandidateCity(y)) -> ToVisit(x,y))", "all x.(City(x) -> FloridaCounselor(x))", "all x.(CitizenCity(x,Finding(x) -> Visit(x))", "all x y z.((Counter(x) & CandidateCity(y) & Florida(z)) -> Visits(x,y,z))", "all x y.((City(x) & Candidate(y) & Florida(y)) -> ToVisit(x,y))"]}
{"id": "folio_train_1071", "nl": "Everything is either big or small.", "fol": "all x.((IsBig(x) & -IsSmall(x)) | (-IsBig(x) & IsSmall(x)))", "prediction": ["all x.((Big(x) | Small(x)) -> BigOrSmall(x))", "all x.(Big(x) | Small(x))", "all x.(Big(x) | Small(x))", "all x.((Big(x) | Small(x)) -> AllOf(x))", "all x.(Big(x) | Small(x))", "all x.((Big(x) | Small(x)) -> Everything(x))", "all x.(Big(x) | Small(x))", "all x.(Big(x) | Small(x))", "all x.(Good(x) | Small(x))", "all x.((Big(x) | Small(x)) -> Everything(x))", "all x.((Big(x) | Small(x)) -> Has(x,y))", "all x.(Bake(x) | Small(x))", "all x.((Big(x) | Small(x)) -> -Big(x))", "all x.((Big(x) | Small(x)) -> Big(x))", "all x.(Trailer(x) -> (Big(x) | Small(x)))", "(all x.(Big(x) | Small(x)))"]}
{"id": "folio_train_1072", "nl": "All big things are heavy. ", "fol": "all x.(IsBig(x) -> IsHeavy(x))", "prediction": ["all x.(BigThing(x) -> Heavy(x))", "all x.(BigThing(x) -> Heavy(x))", "all x.(BigThing(x) -> Heavy(x))", "all x.(BigThing(x) -> Heavy(x))", "all x.(BigThing(x) -> Heavy(x))", "all x.(BigThing(x) -> Heavy(x))", "all x.(GayThing(x) -> Heavy(x))", "all x.(BigThing(x) -> Heavy(x))", "all x.(BigThing(x) -> Heavy(x))", "all x.(BigThing(x) -> Heavy(x))", "all x.(BigThing(x) -> Heavy(x))", "all x.(BigThing(x) -> Heavy(x))", "all x.(BigThing(x) -> Heavy(x))", "all x.(BigThing(x) -> Heavy(x))", "all x.(BigThing(x) -> Heavy(x))", "all x.(BigThing(x) -> Heavy(x))"]}
{"id": "folio_train_1073", "nl": "All small things are light. ", "fol": "all x.(IsSmall(x) -> IsLight(x))", "prediction": ["all x.(SmallThing(x) -> Light(x))", "all x.(SmallThing(x) -> Light(x))", "all x.(SmallThing(x) -> Light(x))", "all x.(SmallThing(x) -> Light(x))", "all x.(SmallThing(x) -> Light(x))", "all x.(SmallThing(x) -> Light(x))", "all x.(SmallTree(x) -> Light(x))", "all x.(SmallThing(x) -> Light(x))", "all x.(SmallThing(x) -> Light(x))", "all x.(SmallThing(x) -> Light(x))", "all x.(SmallTask(x) -> Light(x))", "all x.(SmallThing(x) -> Light(x))", "all x.(SmallThing(x) -> Light(x))", "all x.(SmallThing(x) -> Light(x))", "all x.(SmallThing(x) -> Light(x))", "all x.(SmallThing(x) -> Light(x))"]}
{"id": "folio_train_1074", "nl": "All heavy things are still.", "fol": "all x.(IsHeavy(x) -> IsStill(x))", "prediction": ["all x.(HeavyThing(x) -> Still(x))", "all x.(HeavyThing(x) -> Still(x))", "all x.(HeavyThing(x) -> Still(x))", "all x.(HeavyThing(x) -> Still(x))", "all x.(HeavyThing(x) -> Still(x))", "all x.(HeavyGame(x) -> Still(x))", "all x.(HeavyThing(x) -> Still(x))", "all x.(HeavyThing(x) -> Still(x))", "all x.(HeavyThing(x) -> Still(x))", "all x.(HeavyThing(x) -> Still(x))", "all x.(HeavyThing(x) -> Still(x))", "all x.(HeavyThing(x) -> Still(x))", "all x.(HeavyThing(x) -> Still(x))", "all x.(HeavyThing(x) -> Still(x))", "all x.(HeavyThing(x) -> Still(x))", "all x.(HeavyTen(x) -> Still(x))"]}
{"id": "folio_train_1075", "nl": "All light things are unstable.", "fol": "all x.(IsLight(x) -> IsUnstable(x))", "prediction": ["all x.(LightThing(x) -> Instabil(x))", "all x.(Light(x) -> Unstable(x))", "all x.(LightThing(x) -> Instabil(x))", "all x.(LightThing(x) -> Instable(x))", "all x.(LightThing(x) -> Instable(x))", "all x.(LightThing(x) -> Unstable(x))", "all x.(LightToy(x) -> Unstable(x))", "all x.(LightThing(x) -> Instabile(x))", "all x.(LightThing(x) -> Unstable(x))", "all x.(LightThing(x) -> Instabil(x))", "all x.(LightThing(x) -> Instabil(x))", "all x.(LightThing(x) -> Instabil(x))", "all x.(LightThing(x) -> Instable(x))", "all x.(LightThing(x) -> Unstable(x))", "all x.(LightThing(x) -> Unstable(x))", "all x.(LightThing(x) -> Instabile(x))"]}
{"id": "folio_train_1076", "nl": "All unstable things are changing.", "fol": "all x.(IsUnstable(x) -> IsChanging(x))", "prediction": ["all x.(UnstableThing(x) -> Changes(x))", "all x.(Instable(x) -> Changes(x))", "all x.(UnstableGood(x) -> Changes(x))", "all x.(InstabilThing(x) -> Changes(x))", "all x.(UnderstableThing(x) -> Change(x))", "all x.(LossfulThing(x) -> Change(x))", "all x.(InstabileThing(x) -> Changes(x))", "all x.(IllegalThing(x) -> Changes(x))", "all x.(UnstableThing(x) -> Changes(x))", "all x.(InstabileThing(x) -> Changes(x))", "all x.(UnstableThing(x) -> Changes(x))", "all x.(Unstable(x) -> Changes(x))", "all x.(InstabilFact(x) -> Changes(x))", "all x.(InstabileThing(x) -> Changing(x))", "all x.(Instabile(x) -> Changes(x))", "all x.(InstabileThing(x) -> Changes(x))"]}
{"id": "folio_train_1077", "nl": "All unstable things are kinetic. ", "fol": "all x.(IsUnstable(x) -> IsKinetic(x))", "prediction": ["all x.(UnstableThing(x) -> Kinetic(x))", "all x.(InstabileThing(x) -> Kinetic(x))", "all x.(InstabileThing(x) -> Kinetic(x))", "all x.(Instabile(x) -> Kinetic(x))", "all x.(Unstable(x) -> Kinetic(x))", "all x.(InstabileThing(x) -> Kinetic(x))", "all x.(Unstable(x) -> Kinesical(x))", "all x.(Unstable(x) -> Kinetic(x))", "all x.(UnstableThing(x) -> Kinetic(x))", "all x.(UnstableThing(x) -> Kinetic(x))", "all x.(UnstableThing(x) -> Kinetic(x))", "all x.(Unstable(x) -> Kinetic(x))", "all x.(LostThing(x) -> Kinetic(x))", "all x.(Unstable(x) -> Kinetic(x))", "all x.(UnstableThing(x) -> Kinetic(x))", "all x.(UnstabileThing(x) -> Kinetic(x))"]}
{"id": "folio_train_1078", "nl": "A bird is not both heavy and still.", "fol": "-(IsHeavy(Bird) & IsStill(Bird))", "prediction": ["all x.(Bird(x) -> -(Heavy(x) & Still(x)))", "all x.(Bird(x) -> -Heavy(x) & Still(x))", "all x.(Bird(x) -> (-Heavy(x) & Still(x)))", "all x.(Bird(x) -> -(Heavy(x) & Still(x)))", "all x.(Bird(x) -> -(Heavy(x) & Still(x)))", "all x.(Bird(x) -> -(Heavy(x) & Still(x)))", "all x.(Bird(x) -> -(Heavy(x) & Still(x)))", "all x.(Bird(x) -> -(Heavy(x) & Still(x)))", "all x.(Bird(x) -> -Heavy(x) & Still(x))", "all x.(Bird(x) -> -(Heavy(x) & Still(x)))", "all x(Bird(x) -> -(Heavy(x) & Still(x)))", "all x.(Bird(x) -> -(Heavy(x) & Still(x)))", "all x.(Bird(x) -> -(Heavy(x) & Still(x)))", "all x.(Bird(x) -> -(Heavy(x) & Still(x)))", "all x.(Bird(x) -> -(Heavy(x) & Still(x)))", "all x.(Bird(x) -> -(Heavy(x) & Still(x)))"]}
{"id": "folio_train_1079", "nl": "A bird is still.", "fol": "IsStill(Bird)", "prediction": ["all x.(Bird(x) -> Still(x))", "exists x.(Bird(x) & Still(x))", "all x.(Bird(x) -> Still(x))", "all x.(Bird(x) -> Still(x))", "all x.(Bird(x) -> Still(x))", "all x.(Bird(x) -> Still(x))", "all x.(Bird(x) -> Still(x))", "exists x.(Bird(x) & Still(x))", "exists x.(Bird(x) & Still(x))", "all x.(Bird(x) -> Still(x))", "all x.(Bird(x) -> Still(x))", "exists x.(Bird(x) & Still(x))", "all x.(Bird(x) -> Still(x))", "all x.(Bird(x) -> Still(x))", "all x.(Bird(x) -> Still(x))", "all x.(Bird(x) -> Still(x))"]}
{"id": "folio_train_1080", "nl": "A bird is not still.", "fol": "-IsStill(Bird)", "prediction": ["all x.(Bird(x) -> -Still(x))", "all x.(Bird(x) -> -Still(x))", "all x.(Bird(x) -> -Snow(x))", "all x.(Bird(x) -> -Still(x))", "all x.(Bird(x) -> -Still(x))", "all x.(Bird(x) -> -Still(x))", "all x.(Bird(x) -> -Still(x))", "all x.(Bird(x) -> -Still(x))", "all x.(Bird(x) -> -Still(x))", "all x.(Bird(x) -> -Still(x))", "all x.(Bird(x) -> -Still(x))", "all x.(Bird(x) -> -Still(x))", "all x.(Bird(x) -> -Still(x))", "all x.(Bird(x) -> -Still(x))", "all x.(Bird(x) -> -Still(x))", "all x.(Bird(x) -> -Still(x))"]}
{"id": "folio_train_1081", "nl": "A bird is kinetic and changing.", "fol": "(IsKinetic(Bird) & IsChanging(Bird))", "prediction": ["all x.(Bird(x) -> (Kinetic(x) & Changes(x)))", "all x.(Bird(x) -> (Kinetic(x) & Changes(x)))", "all x.(Bird(x) -> (Kinetic(x) & Changes(x)))", "all x.(Bird(x) -> (Kinetic(x) & Changes(x)))", "all x.(Bird(x) -> (Kinetic(x) & Changes(x)))", "all x.(Bird(x) -> (Kinetic(x) & Changes(x)))", "all x.(Bird(x) -> (Kinetic(x) & Changes(x)))", "all x.(Bird(x) -> (Kinetic(x) & Changes(x)))", "all x.(Bird(x) -> (Kinetic(x) & Changes(x)))", "all x.(Bird(x) -> (Kinetic(x) & Changes(x)))", "exists x.(Bird(x) & Kinetic(x) & Changes(x))", "all x.(Bird(x) -> (Kinetic(x) & Changes(x)))", "all x.(Bird(x) -> (Kinematic(x) & Changes(x)))", "all x.(Bird(x) -> (Kinetic(x) & Changes(x)))", "all x.(Bird(x) -> (Kinetic(x) & Changeable(x)))", "all x.(Bird(x) -> (Kinetic(x) & Changeing(x)))"]}
{"id": "folio_train_1082", "nl": "A bird is kinetic or changing.", "fol": "(IsKinetic(Bird) | IsChanging(Bird))", "prediction": ["all x.(Bird(x) -> (Kinetic(x) | Changeling(x)))", "all x.(Bird(x) -> (Interactive(x) | Changes(x))))", "all x.(Bird(x) -> (Kinetic(x) | Changing(x)))", "all x.(Bird(x) -> (Kinetic(x) | Changeing(x)))", "all x.(Bird(x) -> (Kinetic(x) | Changes(x)))", "all x.(Bird(x) -> (Kinetic(x) | Changing(x)))", "all x.(Bird(x) -> (Kinetic(x) | Changes(x)))", "all x.(Bird(x) -> (Kinetic(x) | Changed(x)))", "all x.(Bird(x) -> (Kinetic(x) | Changeling(x)))", "all x.(Bird(x) -> (Kinetic(x) | Changing(x)))", "all x.(Bird(x) -> (Kinetic(x) | Changeable(x)))", "all x.(Bird(x) -> (Kinetic(x) | Changes(x)))", "all x.(Bird(x) -> (Kinetic(x) | Changeing(x)))", "all x.(Bird(x) -> (Kinetic(x) | Changeable(x)))", "all x.(Bird(x) -> (Kinetic(x) | Curing(x)))", "all x.(Bird(x) -> (Kinetic(x) | Changing(x)))"]}
{"id": "folio_train_1083", "nl": "A bird is either kinetic or changing, but not both.", "fol": "((IsKinetic(Bird) & -IsChanging(Bird)) | (-IsKinetic(Bird) & IsChanging(Bird)))", "prediction": ["all x.(Bird(x) -> ((Kinetic(x) | Changing(x))))", "all x.(Bird(x) -> ((Kineitic(x) | Challenging(x)) & -(Kinetic(x) & Changeling(x))))", "all x.(Bird(x) -> ((Kinetic(x) | Changed(x))))", "all x.(Bird(x) -> ((Kinetic(x) | Changeable(x)) & -(Kinetic(x) & Changeable(x)))))", "all x.(Bird(x) -> (Stimulation(x) | Switching(x)))", "all x.(Bird(x) -> ((Kinetic(x) | Changed(x)) & -(Kinetic(x) | Changed(x))))", "all x.(Bird(x) -> ((Kinetic(x) | Challenging(x)) & -(Kinetic(x) & Challenging(x))))", "all x.(Bird(x) -> ((Kinetic(x) | Changeing(x)) & -(Kinetic(x) & Changeing(x)))))", "all x.(Bird(x) -> ((Kinetic(x) | Changeling(x)) & -(Kinetic(x) & Changeling(x))))", "all x.(Bird(x) -> ((Kinetic(x) | Moving(x)) & -(Kinetic(x) & Moving(x)))))", "all x.(Bird(x) -> ((Kinetic(x) | Changeable(x)) | (-Kinetic(x) & Changeable(x)))))", "exists x.(Bird(x) & ((Kinetic(x) & -Changing(x)) | (-Kinetic(x) & Changeing(x)))))", "all x.(Bird(x) -> ((Kinetic(x) & -Changing(x)) | (-Kinetic(x) & Changeing(x)))))", "all x.(Bird(x) -> (Kinetic(x) | Changed(x)))", "exists x.(Bird(x) & ((Kinetic(x) & -Change(x)) | (-Kinetic(x) & Change(x)))))", "all x.(Bird(x) -> ((Kinetic(x) | Challenging(x)) | (-Kinetic(x) & Challenging(x)))))"]}
{"id": "folio_train_1084", "nl": "If a bird is small or still, then the bird is either kinetic or changing.", "fol": "((IsSmall(Bird) | IsStill(Bird)) -> (IsKinetic(Bird) | IsChanging(Bird)))", "prediction": ["all x.((Bird(x) & (Small(x) | Still(x))) -> (Kinetic(x) | Changed(x)))", "all x.((Bird(x) & (Small(x) | Still(x))) -> (Kinetic(x) | Changed(x)))", "all x.((Bird(x) & (Small(x) | Still(x))) -> (Kinetic(x) | Changelable(x)))", "all x.((Bird(x) & (Small(x) | Still(x))) -> (Kinetic(x) | Changed(x)))", "all x.((Bird(x) & (Small(x) | Still(x))) -> (Kinetic(x) | Changing(x)))", "all x.((Bird(x) & (Small(x) | Still(x))) -> (Kinetic(x) | Changeable(x)))", "all x.((Bird(x) & (Small(x) | Still(x))) -> (Kinetic(x) | Changeing(x)))", "all x.((Bird(x) & (Small(x) | Still(x))) -> (Kinetic(x) | Changed(x)))", "all x.((Bird(x) & (Small(x) | Still(x))) -> (Kinetic(x) | Waking(x)))", "all x.((Bird(x) & (Small(x) | Still(x))) -> (Kinetic(x) | Changeing(x)))", "all x.((Bird(x) & (Small(x) | Still(x))) -> (Kinetic(x) | Changed(x)))", "all x.((Bird(x) & (Small(x) | Still(x))) -> (Kinetic(x) | Changed(x)))", "all x.((Bird(x) & (Small(x) | Still(x))) -> (Kinetic(x) | Changeing(x)))", "all x.((Bird(x) & (Small(x) | Still(x))) -> (KineticBird(x) | ChangedBird(x)))", "all x.((Bird(x) & (Small(x) | Still(x))) -> (Kinetic(x) | Changes(x)))", "all x.((Bird(x) & (Small(x) | Still(x))) -> (Kinetic(x) | Changed(x)))"]}
{"id": "folio_train_1085", "nl": "DI Ray is a police procedural television series.", "fol": "IsTelevisionSeries(DiRay)", "prediction": ["(ProceduralTVStage(DIRay) & Police(DIRay))", "(ProceduralTVSeries(DiRay) & Police(DiRay))", "(ProceduralTVSeries(DIRay) & OperatesInPtv(DiRay,Police))", "(ProceduralTVSerial(DIRay) & Police(DIRay))", "(ProceedingTelevisionSeries(DIRay) & Police(DIRay))", "all x.(DiRay(x) -> PoliceProceduralTVSeries(x))", "all x.(DiRay(x) -> PoliceProceduralTVSeries(x))", "all x.(DiRay(x) -> PoliceProceduralTelevision(x))", "all x.(DiRay(x) -> (PoliceProcedural(x) & TelevisionSeries(x)))", "(ProceduralTVSeries(DiRay) & Police(DiRaw))", "all x.((DisneyRay(x) & PoliceProceduralTV(x)) -> PlaysAround(x))", "all x.(DiRay(x) -> PoliceProceduralTVSeries(x))", "all x.(DiRay(x) -> PoliceProceduralTVSerial(x))", "(CollectiveTelevision(DiRay) & OperatesIn(DiRay,Police))", "all x.(Iron(x) -> PoliceProceduralTelevisionShow(x))", "all x.((DiRain(x) & PoliceProceduralTelevisionSeries(x)) -> ATV."]}
{"id": "folio_train_1086", "nl": "DI Ray was created and written by Maya Sondhi.", "fol": "(CreatedBy(Maya,DiRay) & WrittenBy(Maya,DiRay))", "prediction": ["(CreatedByMayaSondhi(DiRay) & WrittenBy(DIRay))", "(CreatedByMayaSondhi(DiRain) & WrittenByDiRay.", "(CreatedByMayaSondhi(Diray) & WrittenByMayaSondhi(DiRay))", "DIRay was created and written by MayaSondhi.", "all x.( DIRay(x) -> (CreatedByMayaSondhi(x) & WrittenByMayaSondhi(x)))", "ALL X y.((DiRay(x) & MayaSondhi(y)) -> (CreatedBy(x,y) & WrittenBy(x,y)))", "all x y.((DiRay(x) & MayaSondhi(y)) -> (CreatedBy(x,y) & WrittenBy(x,y)))", "DI Ray was created and WrittenByMayaSondhi.", "Maya Sondhi & DIRay(RI)", "all x.(DiRay(x) -> (CreatedByMayaSondhi(x) & WrittenByMayaSondhi(x)))", "mayasondhi wrote DIRay & CreatedByMayaSondhi.", "DIRay was created and written by Maya Sondhi.", "FoundedByMayaSondhi(x) & WrittenOnByDiRay(x))", "all x y z.((DIRay(x) & MayaSondhi(y) & Created(x,y) & WrittenBy(x,z)) -> Created(x))", "(ProducedBy(DiRay) & WrittenByMayaSondhi(diray))", "DIRay was created and written by Maya Sondhi."]}
{"id": "folio_train_1087", "nl": "DI Ray was produced by Jed Mercurio.", "fol": "ProducedBy(Jed,DiRay)", "prediction": ["DIORay was producedbyJedMercurio.", "DIRay was produced by Jed Mercurio.", "DiRay was produced by JedValeras(x) & DiEscorial(x))", "(ProducedByJedMercuruo(DiRay)", "IconProducedByDiRay(x) & JedMercury(x))", "(ProducedByJedMercurio)", "(ProducedByJedMercurio(z) & DIRay(x))", "ALL x y.((DIRay(x) & JedMercury(y)) -> ProducedBy(x,y))", "DiRay was produced by Jed Mercurio.", "DiRay was produced by JedMercury.", "(ProducedByJedMercurio(DIRay)", "(ProducedByJedMercuero)", "(ProducedBy(diRay) & JedMercury(d))", "(ProducedByJedMercurio(DIRay)", "all x.(DiRay(x) -> ProducedByJedMercurio(x))", "(ProducedBy(DiRay) -> JedMercury(DiRay,Di))"]}
{"id": "folio_train_1088", "nl": "Maya Sondhi and Jed Mercurio are both British.", "fol": "(IsBritish(Maya) & IsBritish(Jed))", "prediction": ["(British) & British(MayaSondhi) & British(JedMercury))", "(British(MayaSondhi) & British(JedMercurio))", "(British(MayaSondhi,UK) & British(JedMercury,UK))", "(British(MayaSondhi) & British(JedMercurio))", "(British(MayaSondhi) & British(JedMercury))", "(British(Maya(Sondhi) & British(JedMercurio))", "(British(MayaSondhi) & British(JedMercurio))", "(British(MayaSondhi) & British(JedMercury))", "(British(MayaSondhi,Melbourne) & British(MayaSondhi,JedSercurio))", "(American(MayaSondhi) & British(JedMercurio))", "((MayaSondhi(Maya) | JedMercury(Maya)))", "((British(MayaSondhi) & British(JedMercurio)) -> British(MayaSondhi,DeepBlue,British))", "all x y.((MayaSondhi(x) & JedMercurio(y)) -> British(x))", "(British(MayaSondhi) & British(JedMercurio))", "(British(MayaSondhi) | British(JedMercury))", "(British(MayaSondhi) & British(JedMecricio))"]}
{"id": "folio_train_1089", "nl": "DI Ray was created by a Brit.", "fol": "exists x.(CreatedBy(x,DiRay) & IsBritish(x))", "prediction": ["all x y.((CreatedBy(x,y) & Brit(y)) -> DIRay(x))", "-exists x.(British(x) & CreatedBy(x,DiRay))", "all x.(DiRay(x) -> CreatedByBritish(x))", "created by Brit.", "ALL X.(DiRay(x) -> CreatedByBritish(x))", "all x.(DiRay(x) -> MadeByBritish(x))", "DiRay(Di) & CreatedByBritish(d))", "all x y.((British(x) & DIRay(y)) -> CreatedBy(x,y))", "all x y.((DIRay(x) & Brit(y)) -> CreatedBy(x,y))", "all x.(Recognition(x,Y) -> Brit(y))", "all x y.((British(x) & DIRay(y)) -> CreatedBy(x,y))", "the British Filmmaker created the original DIRay.", "-(IRay(x) & CreatedBy(x,Brit))", "all x.(DiRay(x) -> CreatedByBritish(x))", "(CreatedByBritish(diRaw))", "ALL x.(DiRay(x) -> CreatedByBritish(x))"]}
{"id": "folio_train_1090", "nl": "Some Brit produced a television series.", "fol": "exists x y.(IsBritish(x) & ProducedBy(x,y) & IsTelevisionSeries(y))", "prediction": ["exists x.(British(x) & ProducesTelevisionSeries(x))", "exists x.(British(x) & ProducedTVSeries(x))", "exists x.(British(x) & ProducedTelevisionSeries(x))", "exists x.(British(x) & Producer(x))", "exists x.(British(x) & ProducedTVSeries(x))", "exists x.(British(x) & Producer(x) & TelevisionSeries(x))", "exists x.(Brit(x) & ProducedTVSeries(x))", "exists x.(British(x) & ProducesTelevisionSerial(x))", "exists x.(British(x) & ProducesTVSeries(x))", "exists x.(British(x) & ProducedTelevisionSeries(x))", "exists x.(British(x) & MadeTVSeries(x))", "exists x.(British(x) & Brit(x) & MadeTelevisionSeries(x))", "exists x y.(BritishBritish(x) & TelevisionSeries(y) & ProducedBy(x,y))", "exists x.(British(x) & ProducesTelevisionSeries(x))", "exists x.(British(x) & ProducedTelevisionSeries(x))", "exists x.(British(x) & ProducedTelevisionSeries(x))"]}
{"id": "folio_train_1091", "nl": "All men are human.", "fol": "all x.(IsMan(x) -> IsHuman(x))", "prediction": ["all x.(Man(x) -> Human(x))", "all x.(Men(x) -> Human(x))", "all x.(Men(x) -> Human(x))", "all x.(Men(x) -> Human(x))", "all x.(Men(x) -> Human(x))", "all x.(Men(x) -> Human(x))", "all x.(Men(x) -> Human(x))", "all x.(Man(x) -> Human(x))", "all x.(Men(x) -> Human(x))", "-all x.(Men(x) -> Human(x))", "all x.(Man(x) -> Human(x))", "all x.(Men(x) -> Human(x))", "all x.(Man(x) -> Human(x))", "all x.(Men(x) -> Human(x))", "all x.(Men(x) -> Human(x))", "all x.(Men(x) -> Human(x))"]}
{"id": "folio_train_1092", "nl": "All gentlemen are men.", "fol": "all x.(IsGentleman(x) -> IsMan(x))", "prediction": ["all x.(Gentlemen(x) -> Men(x))", "all x.(Gentlemen(x) -> Men(x))", "all x.(Gentlemen(x) -> Men(x))", "all x.(Gentlemen(x) -> Men(x))", "all x.(Gentleman(x) -> Men(x))", "all x.(TallOfGloriousmen(x) -> Men(x))", "all x.(Gentleman(x) -> Men(x))", "all x.(Gentleman(x) -> Men(x))", "all x.(Gentlemen(x) -> Men(x))", "all x.(Gentlemen(x) -> Men(x))", "all x.(Gentleman(x) -> Men(x))", "all x.(Gentleman(x) -> Men(x))", "all x.(Gentlemen(x) -> Men(x))", "all x.(Gentlemen(x) -> Men(x))", "all x.(Gentleman(x) -> Men(x))", "all x.(Gentlemen(x) -> Men(x))"]}
{"id": "folio_train_1093", "nl": "All lawyers are gentlemen.", "fol": "all x.(IsLawyer(x) -> IsGentleman(x))", "prediction": ["all x.(Litigation(x,y) -> Gentleman(y))", "all x.(Legal(x) -> Gentlemen(x))", "all x.(Lawyer(x) -> Gentleman(x))", "all x.(Lawyer(x) -> Gentleman(x))", "all x.(Lawyer(x) -> Gentlemen(x))", "all x.(Lawyer(x) -> Gentleman(x))", "all x.(Lawyer(x) -> Gentleman(x))", "all x.(Lawyer(x) -> Gentleman(x))", "all x.(Lawyer(x) -> Gentlemen(x))", "all x.(Lawyer(x) -> Gentlemen(x))", "all x.(Lawyer(x) -> Gentleman(x))", "all x.(Legal(x) -> Gentleman(x))", "all x.(Legal(x) -> Gentlemen(x))", "all x.(Lawyer(x) -> Gentlemen(x))", "all x.(Lawyer(x) -> Gentlemen(x))", "all x.(Lawyer(x) -> Gentlemen(x))"]}
{"id": "folio_train_1094", "nl": "All women are human.", "fol": "all x.(IsWoman(x) -> IsHuman(x))", "prediction": ["all x.(Mammal(x) -> Human(x))", "all x.(Female(x) -> Human(x))", "all x.(Female(x) -> Human(x))", "all x.(Female(x) -> Human(x))", "all x.(Female(x) -> Human(x))", "all x.(Female(x) -> Human(x))", "all x.(Female(x) -> Human(x))", "all x.(Mother(x) -> Human(x))", "all x.(Female(x) -> Human(x))", "all x.(Female(x) -> Human(x))", "all x.(Female(x) -> Human(x))", "all x.(Female(x) -> Human(x))", "all x.(Female(x) -> Human(x))", "all x.(Female(x) -> Human(x))", "all x.(Female(x) -> Human(x))", "all x.((Female(x) & Human(x)) -> Women(x))"]}
{"id": "folio_train_1095", "nl": "No sheep are human.", "fol": "all x.(IsSheep(x) -> -IsHuman(x))", "prediction": ["-exists x.(Sheep(x) & Human(x))", "-exists x.(Sheep(x) & Human(x))", "-exists x.(Sheep(x) & Human(x))", "-exists x.(Should(x) & Human(x))", "-exists x.(Sheep(x) & Human(x))", "-exists x.(Sheep(x) & Human(x))", "-exists x.(Sheep(x) & Human(x))", "-exists x.(Shark(x) & Human(x))", "-exists x.(Sheep(x) & Human(x))", "-exists x.(Sheep(x) & Human(x))", "-exists x.(Sheep(x) & Human(x))", "(-exists x.(Sheep(x) & Human(x)))", "-exists x.(Sheep(x) & Human(x) & -Human(x))", "-exists x.(Sheep(x) & Human(x))", "-exists x.(Sheep(x) & Human(x))", "-exists x.(Sheep(x) & Human(x))"]}
{"id": "folio_train_1096", "nl": "If Mike is not both a human and a sheep, then Mike is either a man or a human.", "fol": "((((-IsHuman(Mike) | -IsSheep(Mike)) -> IsMan(Mike)) & -IsHuman(Mike)) | (-((-IsHuman(Mike) | -IsSheep(Mike)) -> IsMan(Mike)) & IsHuman(Mike)))", "prediction": ["all x.((Mike(x) & -(Human(x) & Sheep(x))) -> (Man(x) | Human(x))))", "all x.((Human(x) & Sheep(x)) -> (Man(x) | Human(x)))", "all x.((Man(x) | Human(x)) -> NoHuman(x))", "all x.((Mike(x) & -Human(x) & Sheep(x)) -> (Mike(x) | Human(x)))", "all x.((Mike(x) & -Sweep(x)) -> (Man(x) | Human(x)))", "all x.((Hunt(x) & -Shelf(x)) -> (Man(x) | Human(x)))", "all x y.((Hunt(x) & Sheep(y)) -> (CausesMan(x) | CausesHuman(x)))", "all x.((Man(x) | Human(x)) -> -(Human(x) & Sheep(x)))", "all x.((Human(x) & Sheep(x)) -> (Man(x) | Human(x)))", "all x.(Unfortunately,if Mike is not both human and sheep(x) & (Man(x) | Human(x)))", "all x.((Mike(x) & -Human(x) & Sheep(x)) -> (Man(x) | Human(x)))", "all x.((Man(x) | Human(x)) & -(Human(x) & Sheep(x))) -> (Man(x) | Human(x)))", "all x.((Man(x) | Human(x)) & -Human(x) & Sheep(x)) -> (Male(x) | Human(x)))", "all x.((Mike(x) & -Human(x) & Sheep(x)) -> (Man(x) | Human(x)))", "all x.((Mike(x) & -(Human(x) & Sheep(x))) -> (Man(x) | Human(x)))", "all x.((Human(x) & Sheep(x)) -> (Man(x) | Human(x)))"]}
{"id": "folio_train_1097", "nl": "Mike is a woman.", "fol": "IsWoman(Mike)", "prediction": ["[MP3:Mike(MP4) | Woman(MP3)])", "all x.(Mike(x) -> Woman(x))", "all x.(Mike(x) -> Woman(x))", "-Mike(Mike) & Woman(Mike))", "all x.(Mike(x) -> Woman(x))", "(Female(Mike) & -Mother(Mike))", "all x.(Mike(x) -> Woman(x))", "all x.(Mike(x) -> Woman(x))", "all x.(Mike(x) -> Woman(x))", "(Woman(Mike) & MakesYou(Mike,Mike))", "(Female(mike) & Model(mike))", "all x.(Mike(x) -> Woman(x))", "all x.(Mike(x) -> Woman(x))", "all x.(Mike(x) -> Woman(x))", "all x.(Mike(x) -> Woman(x))", "(Mike(Mike) -> Woman(Mike))"]}
{"id": "folio_train_1098", "nl": "If Mike is a gentleman or a lawyer, then Mike is neither a woman nor a lawyer.", "fol": "((IsGentleman(Mike) | IsLawyer(Mike)) -> (-IsWoman(Mike) & -IsLawyer(Mike)))", "prediction": ["all x.((Mike(x) & (Gentleman(x) | Lawyer(x))) -> -(Female(x) | Lawyer(x))))", "all x.((Manual(x) | Lawyer(x)) -> (NotWoman(x) & -NotLawyer(x)))", "all x.((Mike(x) & (Groomer(x) | Lawyer(x))) -> -(Woman(x) | Lawyer(x))))", "all x.((Mike(x) & Gentleman(x)) | Lawyer(x)) -> -(Mike(x) & Woman(x) & Lawyer(x)))", "all x.((Daniel(x) | Lawyer(x)) -> (-Female(x) & -Lawyer(x)))", "all x.(Mike(x) -> ((Man(x) | Lawyer(x))) & -(Woman(x) | Lawyer(x))))", "all x.((Trick(x) & (manyPerson(x) | Lawyer(x))) -> (-Woman(x) & -Lawyer(x)))", "all x.(Michael(x) -> -(Michael(x) | Lawyer(x))))", "all x.((Mike(x) & Gentleman(x)) | Lawyer(x)) -> (-Mike(x) & -Mike(x)))", "all x.((Mike(x) & Gentleman(x)) | Lawyer(x)) -> (-Woman(x) & -Lawyer(x)))", "all x.((Mike(x) & (Gentleman(x) | Lawyer(x))) -> -(Woman(x) | Lawyer(x)))", "all x.((Mike(x) & Gentleman(x) | Lawyer(x)) -> -(Fraud(x) | Lawyer(x)))", "all x.((Mike(x) & Gentleman(x) & Lawyer(x)) -> (-Woman(x) | Lawyer(x)))", "all x.((Mike(x) & (Manchester(x) | Lawyer(x))) -> -(Woman(x) | Lawyer(x))))", "all x.((Mike(x) & Gentleman(x) | Lawyer(x)) -> -(Female(x) | Lawyer(x)))", "all x.((Mike(x) & Gentleman(x)) | Lawyer(x)) -> -(Woman(x) & Lawyer(x)))"]}
{"id": "folio_train_1099", "nl": "If Mike is not both a woman and a lawyer, then Mike is a lawyer.", "fol": "((-IsWoman(Mike) | -IsLawyer(Mike)) -> IsLawyer(Mike))", "prediction": ["all x.((Mike(x) & Don'tBeautify(x) & DoesNotLie(x)) -> Lawyer(x))", "all x.((Mike(x) & -(Shelter(x) & Lawyer(x))) -> Lawyer(x))", "all x.((Mike(x) & -IsWoman(x) & IsLitigator(x)) -> Lawyer(x))", "all x.((Mike(x) & -(Shelter(x) & Lawyer(x))) -> Lawyer(x))", "all x.((Mike(x) & -(Female(x) & Lawyer(x))) -> Lawyer(x))", "all x.((Mike(x) & -(Female(x) & Lawyer(x))) -> Lawyer(x))", "all x.((Mike(x) & -(Female(x) & Lawyer(x))) -> Lawyer(x))", "all x.((Mike(x) & -(Litigator(x) & Woman(x)))) -> Lawyer(x))", "all x.((Mike(x) & -(Female(x) & Lawyer(x))) -> Lawyer(x))", "all x.((Female(x) & Lawyer(x)) -> Lawyer(x))", "all x.((Female(x) & Lawyer(x)) -> Lawyer(x))", "all x.((Mike(x) & -(Woman(x) & Lawyer(x))) -> Lawyer(x))", "all x.((Mike(x) & -(Mouse(x) & Lawyer(x))) -> Lawyer(x))", "all x.((Mike(x) & -(Woman(x) & Lawyer(x))) -> Lawyer(x))", "all x.((Mike(x) & -(Female(x) & Lawyer(x))) -> Lawyer(x))", "all x.((Mike(x) & -(Woman(x) & Lawyer(x))) -> Lawyer(x))"]}
{"id": "folio_train_1100", "nl": "Some defenders are centerback.", "fol": "exists x.(DefenderRole(x) & CenterBackPosition(x))", "prediction": ["exists x.(Defendant(x) & CenterBack(x))", "exists x.(Defender(x) & Centerback(x))", "exists x.(Defendant(x) & CenterBack(x))", "exists x.(Defender(x) & Centerback(x))", "exists x.(Defendant(x) & Centerback(x))", "exists x.(Defender(x) & CenterBack(x))", "exists x.(Defender(x) & Centerback(x))", "exists x.(Defendant(x) & CenterBack(x))", "exists x.(Defendant(x) & Centerback(x))", "exists x.(Defenser(x) & Centerback(x))", "exists x.(defender(x) & Centerback(x))", "exists x.(Defender(x) & Centerback(x))", "exists x.(Defendant(x) & Centerback(x))", "exists x.(Defendant(x) & Centerback(x))", "exists x.(Defendant(x) & Centerback(x))", "exists x.(defender(x) & CenterBack(x))"]}
{"id": "folio_train_1101", "nl": "Stephen Curry is a centerback.", "fol": "CenterBackPosition(Stephencurry)", "prediction": ["(Centerback(StephenCurry) | AllStopReturn(StephenCurry))", "(Centerback(StephenCurry))", "Stephen Curry is Centerback(StephenCurry)", "all x.((StephenCourtney(x) & Centerback(x)) -> Roots(x))", "StephenCurry(StanleyCrown) PostedBy(Cornerback)", "thecenterback(StephenCurry)", "All x.((StephenCurry(x) & Centerback(x)) -> Centerback(x))", "(Centerback(StephenCurry)", "(Curtains(Stephen) & Centerback(Stephen))", "StephenCurry(StephenCurry) -> Centerback(Curry))", "all x.((Coach(x) & Centerback(x)) -> Centerback(x))", "all x.((StanleyCurry(x) & Centerback(x)) -> Centerback(x))", "StephenCurry(s) -> Centerback(s))", "(Centerback(StephenCurry)", "StephenCurryIsCenterback(StephenCurry)", "all x.((Curtain(x) & Centerback(x)) -> Centerback(x))"]}
{"id": "folio_train_1102", "nl": "Stephen Curry is not a centerback and a defender.", "fol": "-(CenterBackPosition(Stephencurry) & DefenderRole(Stephencurry))", "prediction": ["(-Centerback(StephenCurry) & -Defendant(StephenCurry))", "(-(Centerback(StephenCurry) | Defender(StephenCurry)))", "StephenCurry(StephenCurry) & -(Centerback(Stephen) & Defender(Stephen)))", "-((Curry(Curry) & Centerback(Courtney) & Defender(Curry)))", "all x.(ThomasCurry(x) -> (-Centerback(x) & -Defendant(x)))", "StephenCurry(StephenCurry) -> (-Centerback(StephenCurry) & -Defender(StephenCurry)))", "(-CenterBack(Karticle) & -Defendant(Karticle))", "all x.((StephenCurry(x) & -CenterBack(x) & -Defendant(x)) -> -Defendant(x))", "(-centerback(StephenCurry) & -defender(StephenCurry))", "(nothingbetweencenterbacks(StephenCurry) & nothingbetweendefenders(StephenCurry))", "(-Centerback(StephenCurry) & -Defendant(StephenCurry))", "(-Centerback(StephenCurry) & -Defendant(StephenCurry))", "StephenCurry(StephenCurry) \u2013 (-Centerback(StephenScientist) & -Defender(StephenCurry)))", "(-(Centerback(StephenCurry) & Defender(StephenCurry)))", "(-(Centerback(StephenCurry) & Defender(StephenCurry)))", "(-Centerback(StephenCreek) & -Defendant(StephenCurry))"]}
{"id": "folio_train_1103", "nl": "If Stephen Curry is not a centerback and a defender, then Stephen Curry is neither a soccer player nor a professional basketball player.", "fol": "(-(CenterBackPosition(Stephencurry) & DefenderRole(Stephencurry)) -> (-SoccerPlayerRole(Stephencurry) & -ProfessionalBasketballPlayerRole(Stephencurry)))", "prediction": ["all x.((StephenCurry(x) & -Centerback(x) & -Defendant(x)) -> -(SoccerPlayer(x) | ProfessionalBasketballPlayer(x))))", "all x.((StanleyPlayer(x) | ProfessionalBasketballPlayer(x)) -> -Centerback(x) & Defender(x))", "all x.((StephenCurry(x) & -Centerback(x) & -Defendant(x)) -> (-SoccerPlayer(x) | ProfessionalBasketballPlayer(x)))", "all x.((StephenCruz(x) & -Centerback(x) & -Defendant(x)) -> (-SoccerPlayer(x) | ProfessionalBasketballPlayer(x)))", "all x.((StephenCurry(x) & -Centerback(x) & -Defender(x)) -> -SoccerPlayerName(x) & -ProfessionalBasketballPlayerName(x))", "(-(Centerback(StephenCurtis) & -Defendant(StephenCurtis)) -> (-SoccerPlayer(StephenCurtis) & -ProfessionalBasketballPlayer(StephenCurtis)))", "all x.((StephenCruise(x) & -Centerback(x) & -Defender(x)) -> ((SoccerPlayer(x) | ProfessionalBasketballPlayer(x))))", "all x.((StephenCurvey(x) & -Centerback(x) & -Defender(x)) -> -(SoccerPlayer(x) | ProfessionalBasketballPlayer(x)))", "all x.((StephenCurry(x) & -Centerback(x) & -Defendant(x)) -> (-SoccerPlayer(x) & -ProfessionalBasketballPlayer(x)))", "all x y.((StephenCurry(x) & -Centerback(x) & -Defender(x)) -> -(SoccerPlayer(y) | ProfessionalBasketballPlayer(y)))", "all x.((StephenCurly(x) & -Centerback(x) & -Defender(x)) -> (-ProfessionalBasketballPlayer(x) & -SoccerPlayer(x) & -ProfessionalBasketballPlayer(x)))", "all x.((StanleyPlayer(x) & -Centerback(x) & Defense(x)) -> (-ProfessionalBasketballPlayer(x) & -SoccerPlayer(x)))", "all x.((StephenCurry(x) & -Centerback(x) & -Defender(x)) -> (-SoccerPlayer(x) & -ProfessionalBasketballPlayer(x)))", "all x.((SeasonCurry(x) & -Centerback(x) & -Defender(x)) -> (-SoccerPlayer(x) | ProfessionalBasketballPlayer(x)))", "(-centerback(StephenCurry) & -defender(StephenCurry)) -> (SoccerPlayer(StephenCurry) & -ProfessionalBasketballPlayer(StephenCurry)))", "all x.((Estan Curry(x) & -Centerback(x) & -Defender(x)) -> (-(SoccerPlayer(x) | ProfessionalBasketballPlayer(x))))"]}
{"id": "folio_train_1104", "nl": "If a person doesn't have enough money to buy a product, then that person can't buy it.", "fol": "all x y.((Individual(x) & Item(y) & -HasSufficientFundsFor(x,y)) -> -Purchase(x,y))", "prediction": ["all x.((Person(x) & -BuysProduct(x)) -> CannotBuyProduct(x))", "all x.((Person(x) & -HasEnoughMoney(x) & hasProduct(x)) -> Can\u2019tBuy(x,Product))", "all x.((Person(x) & -EnoughFundsToBuyProduct(x)) -> Can'tBuyProduct(x))", "all x.((Person(x) & -HasEnoughMoneyToBuyProduct(x)) -> -CanBuyProduct(x))", "all x y.((Person(x) & Product(y) & -SufficientMoney(x,y)) -> -CanBuy(x,y))", "all x.((Person(x) & -SufficientMoneyToBuyProduct(x)) -> CannotBuyProduct(x))", "all x.((Person(x) & HasNoFunds(x,y)) -> CannotBuyProduct(x,y))", "all x y.((Person(x) & Product(y) & -SmallMeal(x,y)) -> CannotBuy(x,y))", "all x y.((Person(x) & Product(y) & -SufficientMoney(x,y)) -> -Buy(x,y))", "all x.((Person(x) & -CanBuyProduct(x)) -> Can'tBuyProduct(x))", "all x y.((Person(x) & Product(y) & -EnoughMoney(x,y)) -> Can'tBuy(x,y))", "all x.((Person(x) & -EnoughMoney(x)) -> -CanBuyProduct(x))", "all x y.((Person(x) & Product(y) & -EnoughFunding(x)) -> CantBuy(x,y))", "all x.((Person(x) & -HowToBuyProduct(x)) -> CannotBuyProduct(x))", "all x y.((Person(x) & Product(y) & -ThreeCash(x,y)) -> CantBuy(x,y))", "all x.((Person(x) & -SufficientMoney(x)) -> CantBuyProduct(x))"]}
{"id": "folio_train_1105", "nl": "Monitors are products.", "fol": "all x.(DisplayMonitor(x) -> Item(x))", "prediction": ["all x.(Monitor(x) -> Product(x))", "all x.(Monitor(x) -> Product(x))", "all x.(Monitor(x) -> Product(x))", "all x.(Monitor(x) -> Product(x))", "all x.(Monitor(x) -> Product(x))", "all x.(Monitor(x) -> Product(x))", "all x.(Monitor(x) -> Product(x))", "all x.(Monitor(x) -> Product(x))", "all x.(Monitor(x) -> Product(x))", "all x.(Monitor(x) -> Product(x))", "all x.(Monitor(x) -> Product(x))", "all x.(Monitor(x) -> Product(x))", "all x.(Monitor(x) -> Product(x))", "all x.(Monitor(x) -> Product(x))", "all x.(Monitor(x) -> Product(x))", "all x.(Monitor(x) -> Product(x))"]}
{"id": "folio_train_1106", "nl": "4k monitors are more expensive than 1080 monitors and 2k monitors.", "fol": "all z.(((DisplayMonitor(x) & DisplayMonitor(y) & DisplayMonitor(z) & Is4KMonitor(x) & Is1080Monitor(y) & Is2KMonitor(z)) -> IsMoreExpensiveThan(x,y)) & IsMoreExpensiveThan(x,z))", "prediction": ["all x y.((Screen(x) & Monitor(y)) -> (Fast(x,y) & MoreEssential(x,y)))", "all x.(Expense(x) -> (Buys(x,1008) | Buys(x,2)))", "all x y.((Host(x) & Monitor(y) & Monitor(z) & 1080(y)) -> MoreExpensive(x,y,z))", "all x y z.((4kMonitor(x) & 1080(y) & Monitor(z)) -> MoreExpensive(x,y,z))", "all x y.((Use(x) & Monitor(y) & (Standard(y) | Monitor(y))) -> (Expensive(y) | Expensive(x)))", "all x.((Monitor(x) & Monitor(x,10)) -> MoreExpectable(x,10)) & Monitor(x,2) -> MoreExpectable(x,10))", "all x y z.((QuickView(x) & Monitor(y) & Monitor(z) & (Television(x) | Computer(y))) -> (Courier(x,y) & 1080(y) & 2k(z))))", "all x y z.((WizZawi(x) & Monitor(y) & Monitor(z)) -> (Expectively(x,y,z,x) & MoreExpensiveOrMore(y)))", "(Other(x,1180) & MoreEfficient(x,2k))", "all x.((4kMemory(x) & (Format(x) | Format(x))) -> MoreEfficientThan(x,10))", "all x.(See Video(x,y) -> (Fuel(y) | Ultra(x,y)))", "all x.((Screen(x) & Color(x) & 1080(x) & 2k(x)) -> MoreExpensive(x))", "all x.((Monitor(x) & -(1080(x) | 2kMonitor(x))) -> MoreExpectible(x))", "all x y.((FourkMonitor(x) & 1080Monitor(y)) -> MoreExpensive(x,y))", "all x.((Monitor(x) & (Prominent(x,1080) | Prominent(x,2k))) -> MoreExpensive(x))", "all x.((Monitor(x) & Monitor(x) & Monitor(x)) -> CostlierThan(x,1008) & CostlierThan(x,2k))"]}
{"id": "folio_train_1107", "nl": "John is a person.", "fol": "Individual(John)", "prediction": ["John is a Person(John)", "(Person(John).", "John is Person(John)", "All x.(John(x) -> Person(x))", "(Person(John)", "-Person(John)", "(Person(John) | Person(John))", "John is a person.", "all x.(John(x) -> Person(x))", "((John(John) & Person(John)))", "(Person(John) -> Person(John))", "John is Person(John)", "(Person(John),)", "John is Person(John)", "John is Person(John)", "(Person(John) & Among(John))"]}
{"id": "folio_train_1108", "nl": "John doesn't have enough money to buy a 2k monitor.", "fol": "all x.((DisplayMonitor(x) & Is2KMonitor(x)) -> -HasSufficientFundsFor(John,x))", "prediction": ["all x.((John(x) & 2kMonitor(x)) -> -HasEnoughMoney(x))", "(-AdequateMoney(Jeff) & $2.80(Jeff))", "John doesn't have enough money to buy a 2k Monitor(John))", "(-HasEnoughMoneyToBuy2kMonitor(John))", "(Likes(John) & -MadeFair(John,2k Monitor))", "(-EnoughMoney(John,(John,2)) -> 2KMonitor(John))", "(-HasEnoughMoney(John) & CannotBuy2kMonitor(John))", "(IsJohnSensitiveCapacityToBuy2kMonitor(I))", "one of the things that affects John's money (as you see in the image) & isn't enough money to buy a monitor(John))", "all x.((John(x) & -HasEnoughMoney(x)) -> Buys2kMonitor(x))", "(HeadsInMoney(Joan,2) & HasInMoney(John,2))", "exists x.(Monitor(x) & John(x) & -(SufficientMoney(x) & 2kMonitor(x))))", "(Path: $0,2kMonitor(John))", "-(HasEnoughParents(John) & HasBeauty(John,2k Monitor))", "-(IsEnoughMoney(John)?", "all x.((John(x) & Monitor(y)) -> -MoneyFor(x,y))"]}
{"id": "folio_train_1109", "nl": "John can not buy the 1080 monitor.", "fol": "(-Purchase(John,y) & DisplayMonitor(y) & Is1080Monitor(y))", "prediction": ["(Person(John) & CannotBuy1080Monitor(John))", "(-HopeToBuy(John,1080))", "-Buys(John,1080)", "(1,080(John) & CannotBuy(John))", "John cannotBuy(Jon(Jon) & 1080(Jun))", "-CanBuy(John,Tennis)", "-CanBuyKino(John,10).", "-(Buys(John,10) & 1080Monitor(John))", "-CanBuyTelescope(John))", "-CanBuy(John,1080)", "John can'tBuyScanner(John,1081)", "-CanBuy1080Monitor(John)", "(Unfortunately(John) & -Buy(John,Pensors,Cancels,1080))", "-(JohnCanBuyChain(John) & Monitor(John,10)))", "-CallsJohn(j) -> ((1080 Monitor(y) | Monitor(y))))", "-CanBuy(John,MSP720)"]}
{"id": "folio_train_1110", "nl": "John can not buy the 2k monitor.", "fol": "all x.((DisplayMonitor(x) & Is2KMonitor(x)) -> -Purchase(John,x))", "prediction": ["(-Buys(John,ItScreen,2)))", "(-BuysConstraint(John))", "A2kMonitor(John,y) -> CannotBuy(John,y))", "(CannotBuy2kMonitor(John))", "-Buys2kMonitor(John),", "(CannotBuy2kMonitor(John))", "-CanBuy2kMonitor(John)", "Msgr.John(John) -> -BuysDevice(John,2k))", "iCannotBuy2kMonitor(y)", "-CanBuy2kMonitor(John))", "-CanBuy2kMonitor(John)", "The 2k Monitor is -Buyable(John,2)", "-CanBuy2k(John)", "-CanBuy(John,2k)", "(-BuysItem(John,Metal(John))", "(Helen(John,2) & -CanBuy(John,2).)"]}
{"id": "folio_train_1111", "nl": "All artificial satellites are important scientific achievements.", "fol": "all x.(IsArtificialSatellite(x) -> IsImportantScientificAchievement(x))", "prediction": ["all x.(ArtificialSatellite(x) -> ScientificImportance(x))", "all x.(ArtificialSatellite(x) -> ImportantScientificAchievements(x))", "all x.(ArtificialSatellite(x) -> ImportantScientificAchievement(x))", "all x.(ArtificialSatellite(x) -> ImportantScientificAchievement(x))", "all x.(ArtificialSatellite(x) -> ImportantScientificAchievement(x))", "all x.(ArtificialSatellite(x) -> ScientificAchievement(x))", "all x.(ArtificialSatellite(x) -> ImportantScientificAchievement(x))", "all x.(ArtificialSatellite(x) -> ScientificAchievement(x))", "all x.(ArtificialSatellite(x) -> ImportantScientificAchievement(x))", "all x.(ArtificialSatellite(x) -> ImportantScientificAchievement(x))", "all x.(ArtificialSatellite(x) -> ImportantScientificAchievement(x))", "all x.(ArtificialSatellite(x) -> ImportantScienceAdvancement(x))", "all x.(ArtificialSatellite(x) -> ImportantScientificAchievement(x))", "all x.(ArtificialSatellite(x) -> ScientificAchievement(x))", "all x.(ArtificialSatellite(x) -> ScientificAchievement(x))", "all x.(ArtificialSatellite(x) -> ImportantScientificAchievement(x))"]}
{"id": "folio_train_1112", "nl": "Some artificial satellites are not U.S. inventions.", "fol": "exists x.(IsArtificialSatellite(x) & -IsUSInvention(x))", "prediction": ["exists x.(ArtificialSatellite(x) & -U.S.Idea(x))", "exists x.(ArtificialSatellite(x) & -U.S.Invention(x))", "exists x.(ArtificialSatellite(x) & -Invention(x) & InventedInUSA(x))", "exists x.(ArtificialSatellite(x) & -U.S.Invention(x))", "exists x.(ArtificialSatellite(x) & -U.S.Invention(y))", "exists x.(ArtificialSatellite(x) & -U.S.Invention(x))", "exists x.(ArtificialSatellite(x) & -U.S.Invention(x))", "exists x.(ArtificialSatellite(x) & -U.S.Invention(x))", "exists x.(ArtificialSatellite(x) & -U.S.Invention(x))", "exists x.(ArtificialSatellite(x) & -U.S.Invention(x))", "exists x.(ArtificialSatellite(x) & -U.S.Invention(x))", "exists x.(ArtificialSatellite(x) & -U.S.Invention(x))", "exists x.(ArtificialSatellite(x) & -U.S.Invention(x))", "exists x.(ArtificialSatellite(x) & -U.S.Invention(x))", "exists x.(ArtificialSatellite(x) & -U.S.Invention(x))", "exists x.(ArtificialSatellite(x) & -U.S.Invention(x))"]}
{"id": "folio_train_1113", "nl": "All important scientific achievements are U.S. inventions.", "fol": "all x.(IsImportantScientificAchievement(x) -> IsUSInvention(x))", "prediction": ["all x.(ScientificAchievement(x) -> (U.S.Invention(x) & Name(x)))", "all x.(ScientificAchievement(x) -> U.S.Invention(x))", "all x.(EssentialScientificAchievement(x) -> U.S.Invention(x))", "all x.((ScientificAchievement(x) & Important(x)) -> USInvention(x))", "all x.(ScientificAchievement(x) -> U.S.Invention(x))", "all x.((ScientificAchievement(x) & Important(x)) -> U.S.Invention(x))", "all x.((ScientificAchievement(x) & U.S.Invention(x)) -> Important(x))", "all x.((ScientificAchievement(x) & NamedInvention(x,U.S.)) -> (Important(x) & USInvention(x)))", "all x.((ScientificAdvancement(x) & U.S.Invention(x)) -> Important(x))", "all x.((ImportantScientificAchievement(x) & Patent(y)) -> U.S.Invention(x))", "all x.((ScientificAdvancement(x) & U.S.Invention(x)) -> Important(x))", "all x.((ScientificAchievement(x) & U.S.Invention(x)) -> Important(x))", "all x.((ScientificAdvancement(x) & Invention(x)) -> Americas(x))", "all x.((ScientificAchievement(x) & TheInventory(x)) -> U.S.Invention(x))", "all x.((ScientificAchievement(x) & Invention(x,NewStatement)) -> Is(x,Statement))", "all x.((ScientificAchievement(x) & U.S.Invention(x)) -> Important(x))"]}
{"id": "folio_train_1114", "nl": "Some cats are not pets.", "fol": "exists x.(IsCat(x) & -IsPet(x))", "prediction": ["exists x.(Cat(x) & -Pet(x))", "exists x.(Cat(x) & -Pet(x))", "exists x.(Cat(x) & -Pet(x))", "exists x.(Cat(x) & -Pet(x))", "exists x.(Cat(x) & -Pet(x))", "exists x.(Cat(x) & -Pet(x))", "exists x.(Cat(x) & -Pet(x))", "exists x.(Cat(x) & -Pet(x))", "exists x.(Cat(x) & -Pet(x))", "exists x.(Cat(x) & -Pet(x))", "exists x.(Cat(x) & -Pet(x))", "exists x.(Cat(x) & -Pet(x))", "exists x.(Cat(x) & -Pet(x))", "exists x.(Cat(x) & -Pet(x))", "exists x.(Cat(x) & -Pet(x))", "exists x.(Cat(x) & -Pet(x))"]}
{"id": "folio_train_1115", "nl": "All cats are mammals.", "fol": "all x.(IsCat(x) -> IsMammal(x))", "prediction": ["all x.(Cat(x) -> Mammal(x))", "all x.(Cat(x) -> Mammal(x))", "all x.(Cat(x) -> Mammal(x))", "all x.(Cat(x) -> Mammal(x))", "all x.(Cat(x) -> Mammal(x))", "all x.(Kat(x) -> Mammal(x))", "all x.(Cat(x) -> Mammal(x))", "all x.(Cat(x) -> Mammal(x))", "all x.(Cat(x) -> Mammal(x))", "all x.(Cat(x) -> Mammal(x))", "all x.(Cat(x) -> Mammal(x))", "all x.(Cat(x) -> Mammal(x))", "all x.(Cat(x) -> Mammal(x))", "all x.(Cat(x) -> Mammal(x))", "all x.(Cat(x) -> Mammal(x))", "all x.(Cat(x) -> Mammal(x))"]}
{"id": "folio_train_1116", "nl": "Some mammals are not pets.", "fol": "exists x.(IsMammal(x) & -IsPet(x))", "prediction": ["exists x.(Mammal(x) & -Pet(x))", "exists x.(Mammal(x) & -Pet(x))", "exists x.(Mammal(x) & -Pet(x))", "exists x.(Mammal(x) & -Pet(x))", "exists x.(Mammal(x) & -Pet(x))", "exists x.(Mammal(x) & -Pet(x))", "exists x.(Mammal(x) & -Pet(x))", "exists x.(Mammal(x) & -Pet(x))", "exists x.(Mammal(x) & -Pet(x))", "exists x.(Mammal(x) & -Pet(x))", "exists x.(Mammal(x) & -Pet(x))", "exists x.(Mammal(x) & -Pet(x))", "exists x.(Mammal(x) & -Pet(x))", "exists x.(Mammal(x) & -Pet(x))", "exists x.(Mammal(x) & -Pet(x))", "exists x.(Mammal(x) & -Pet(x))"]}
{"id": "folio_train_1117", "nl": "If people visit a coffee shop at least three times a week, then they are addicted to coffee or other caffeinated drinks.", "fol": "all x.(VisitsCoffeeShop(x) -> AddictedToCaffeine(x))", "prediction": ["all x.((Person(x) & VisitsCoffeeShop(x,3)) -> AddictToCoffeeOrCaffeinatedDrinks(x))", "all x.((People(x) & VisitsCoffeeShop(x,y) & AtLeastThreeTimesA Week(x)) -> AddictToCoffeeOrCaffeinatedDrinks(x))", "all x.((Person(x) & Visit CoffeeShopAtLeastThreeTimesAWeek(x)) -> AddictToCaffeinatedDrinks(x))", "all x.((Person(x) & VisitsCoffeeShopAtLeastThreeTimes(x)) -> AddictedToCoffeeOrCaffeinatedDrinks(x))", "all x y.((Person(x) & CoffeeShop(y) & VisitsAtLeastThreeTimes(x,y)) -> AddictToCoffeeOrFructinatedDrink(x))", "all x y.((Person(x) & CoffeeShop(y) & VisitsAtLeastThreeTimesOfWeek(x,y)) -> AddictedTo(x,coffee))", "all x y.((Person(x) & CoffeeShop(y) & VisitsAtLeastThreeTimesPerWeek(x,y)) -> (AddictedToCoffee(x) | AddictedToCaffeinatedDrinks(x)))", "all x.((Person(x) & VisitsCoffeeShop(x) & AffectsCoffeeOrCaffetine(x)) -> AddictedToCoffeeOrCaffeinatedDrinks(x))", "all x.((Person(x) & VisitCoffeeShop(x) & AtLeastThreeThanWeek(x)) -> Addict(x,coffee,caffeinatedDrinks))", "all x.(SeeksCoffeeShopAtLeastThreeTimes(x) -> Addict(x))", "all x.((Person(x) & VisitsCoffeeShop(x,three)) -> AddictedToCoffeeOrCaffeinatedDrinks(x))", "all x.((Person(x) & VisitsCaffederiaAtLeastThreeTimes(x)) -> AddictsToCaffedice(x))", "all x.((Person(x) & VisitsCoffeeShop(x,y) & Until(x,darkness)) -> AddictiveToCoffeeOrCaffeinatedDrinks(x))", "all x.((Person(x) & VisitsCoffeeShopAtLeastThreeFeetAWeek(x)) -> (AddictToCoffee(x) | AddictToOtherCaffeinatedDrinks(x)))", "all x y.((Person(x) & CoffeeShop(y) & VisitsAtLeastThreeTimesAWeek(x,y)) -> AddictOnCoffeeOrCaffeinatedDrinks(x,y))", "all x.((Person(x) & VisitsCoffeeShop(x,y)) -> (AccusedToCoffee(y) | AddictedToCaffeinatedDrinks(y)))"]}
{"id": "folio_train_1118", "nl": "People either visit a coffee shop at least three times a week or order takeout at least once a day.", "fol": "all x.(VisitsCoffeeShop(x) | OrdersTakeout(x))", "prediction": ["all x y.((Person(x) & CoffeeShop(y)) -> ((VisitCafe(x,y) & -Daily(y)) | OrderTakeout(x,y))))", "all x y z.((Person(x) & CoffeeShop(y) & CoffeeShop(z) & Week(w)) -> ((VisitsAtLeastThreeTimes(x,y,z) | OrdersTakeoutAtLeastOneDay(x,w))))", "all x.((Person(x) & (VisitsCaffey(x,3) & GetsTakeout(x,4))) -> (VisitsCaffey(x,3) & GetsTakeout(x,4)))", "all x.((Person(x) & CoffeeShop(y)) -> (ValidAtLeastThreeFacesWeek(x) | OrderTakeoutAtLeastOneDay(x)))", "all x.(Popular(x) -> ((Visits(x,3) & Visits(x,3)) | OrdersTakeout(x,1)) & DaysInto(x)))", "all x.((Person(x) & (RevisitsCoffeeShop(x,3) & OrdersTakeout(x,3))) -> Visits(x,3))", "all x y.((Person(x) & CoffeeShop(y) & (VisitsAtLeastThreeTimesWeek(x,y) | OrdersTakeOutAtLeastOneDay(x,y))) -> -(VisitsAtLeastThreeTimes(x) & OrdersTakeoutAtLeastOneTimeADay(x,y)))", "all x y.((Person(x) & CoffeeShop(y)) -> (FastPickup(x,y) & Twice(x)))", "all x y.((Person(x) & CoffeeShop(y) & Visits(x,y) & -(Visits(x,y) | OrdersTakeout(x,y))))", "all x.(Public(x) -> ((PopularTrip(x,3) | StopOverTakeout(x,3))))", "all x.(Popular(x) -> ((Vacates(x,3) & CoffeeShop(x)) | OrdersTakeout(x,2))))", "all x.(Person(x) -> ((Person(x) & Visits(x,3) & -(Person(x,3) & Visits(x,3))) | (Person(x,6) & OrdersTakeout(x,5)) & -(Person(x,2) & AtLeastOnceADay(x)))))", "exists x.(Person(x) & ((VisitsCoffeeShop(x,x) & Week(x) & Thrives(x)) | OrdersTakeout(x,y)))", "all x.((Person(x) & CoffeeShop(y) & ((VisitsAtLeastThreeThanWeek(x,y) | OrdersTakeoutOnlyOneDay(x,y)))) -> VisitsAtLeastThree(x,y))", "all x y.((Person(x) & CoffeeShop(y)) -> ((Visit(x,y) & -Visit(y,y)) & (Order(z,x,y) | VisitCompany(y,x))))", "all x.((Person(x) & CoffeeShop(y)) -> ((VisitsAtLeastThreeFaces(x,y) & -Shipping(x,y)) | OrdersTakeout(x,y))))"]}
{"id": "folio_train_1119", "nl": "If people make a lot of their own food at home using recipes and online guides, then they order takeout at least once a day.", "fol": "all x.(MakesOwnFood(x) -> OrdersTakeout(x))", "prediction": ["all x.((Person(x) & MakesOwnFoodAtHome(x) & UsesRecipesAndOnlineGuides(x)) -> OrdersTakeoutAtLeastOnceADay(x))", "all x.((Person(x) & MakesLotOfOwnFoodAtHome(x) & UsesRecipesAndOnlineGuides(x)) -> OrdersTakeout(x))", "all x.((Man(x) & MakesLotOfOwnFoodAtHome(x) & UsesRecipesAndOnlineGuides(x)) -> OrdersTakeoutAtLeastOneDay(x))", "all x.((Person(x) & MakesOwnFoodAtHome(x) & UsesRecipesAndOnlineGuides(x)) -> OrdersTakeoutAtLeastNineTages(x))", "all x.((Person(x) & MakesSuchOwnFoodAtHome(x) & UsesRecipesAndOnlineGuides(x)) -> OrdersTakeoutAtLeastTwoOfDays(x))", "all x.((People(x) & MakesOwnFood(x) & UsesRecipesAndOnlineGuides(x)) -> OrdersTakeout(x))", "all x.((Person(x) & MakesOwnFoodAtHome(x) & UsesRecipes(x) & UsesOnlineGuides(x)) -> OrdersTakeout(x))", "all x.((Person(x) & MakesLossOfOwnFoodAtHome(x) & UsesRecipesAndOnlineGuides(x)) -> OrdersTakeoutAtLeastForLeastOneDay(x))", "all x.((People(x) & MakesOwnFoodAtHome(x) & UsesRecipesAndOnlineGuides(x)) -> OrdersTakeoutAtLeastOnly(x))", "all x.((People(x) & MakesOwnFoodAtHome(x) & UsesRecipesAndOnlineGuides(x)) -> OrdersTakeoutAtLeastOnceADay(x))", "all x.((People(x) & MakesAtHome(x) & UsesRecipesAndOnlineGuides(x)) -> OrdersTakeout(x) & AtLeastOneDay(x))", "all x.((Person(x) & MakesLotsOfOwnFoodAtHome(x) & UsesRecipesAndOnlineGuides(x)) -> OrdersTakeoutAtLeastOfTime(x))", "all x.((Person(x) & MakesAtHomeOfOwnFood(x) & Recipes(x) & OnlineGuides(x)) -> OrdersTakeout(x))", "all x.((Person(x) & MakesOwnFoodAtHome(x) & UsesRecipesAndOnlineGuides(x)) -> OrdersTakeoutAtLeastOneDay(x))", "all x.((Person(x) & MakesOwnFoodAtHome(x) & UsesRecipesAndOnlineGuides(x)) -> OrdersTakeoutAtLeastTwoDays(x))", "all x.((People(x) & MakesOwnFood(x) & RecipesAndOnlineGuides(x)) -> OrdersTakeoutOneTimeaDay(x))"]}
{"id": "folio_train_1120", "nl": "If people own at least one coffeemaker and one blender in their home, then they do not order takeout at least once a day.", "fol": "all x.(OwnsKitchenAppliances(x) -> -OrdersTakeout(x))", "prediction": ["all x.((People(x) & OwnsCoffeemaker(x) & OwnsBlender(x)) -> -OrdersTakeout(x))", "all x.(((Person(x) & Coffeemaker(x) & Blender(x)) -> -OrderTakeoutEightThousandPerDay(x))", "all x.((Person(x) & OwnsCoffeemaker(x) & OwnsBlender(x)) -> -OrdersTakeoutAtLeastOnceADay(x))", "all x.((PeopleOwnAtLeastOneCoffeemaker(x) & OwnOneBlenderInHome(x)) -> -OrderTakeoutAtLeastOnlyOneDay(x))", "all x.((Person(x) & exists y.(Coffeemaker(y) & Owns(x,y)) & exists z.(Blender(z) & InHome(x,z)))) -> -OrdersTakeout(x)))", "all x.(OwnsConsumerAndBlender(x) -> -OrdersTakeoutSevenDays(x))", "all x.((Person(x) & OwnsCoffeemaker(x) & OwnsBlender(x)) -> -OrderTakeoutAtLeastOnlyOneDay(x))", "all x.(OwnsCaffee(x) & OwnsBlender(x) & -OrdersTakeout(x))", "all x.((Caffetmaker(x) & Blender(x)) -> -OrdersTakeout(x))", "all x.((People(x) & Coffeemaker(x) & Blender(x)) -> -OrderTakeout(x))", "all x.((Person(x) & OwnsKFCafemaker(x) & OwnsBlender(x)) -> -OrdersTakeout(x))", "all x y.((People(x) & Coffeemaker(y) & BlenderInHome(x) & Home(y)) -> -OrdersTakeout(x,y))", "all x.((Person(x) & OwnsCoffeemaker(x) & OwnsBlender(x)) -> -OrderTakeoutAtLeastOneDay(x))", "all x.((Owns(x,CoffeeMaker) & Owns(x,Blendwaiter)) -> -OrdersTakeoutAtLeastOnlyOneDay(x))", "all x.((OwnsCaffeineMaker(x) & OwnsBlender(x)) -> -OrdersTakeout(x))", "all x.((Owns(x,CoffeeMaker) & Owns(x,Blender)) -> -OrdersTakeout(x))"]}
{"id": "folio_train_1121", "nl": "All people who lead very busy lives that include 12-hour work hours make a lot of their own food at home using recipes and online guides.", "fol": "all x.(LeadsBusyLife(x) -> MakesOwnFood(x))", "prediction": ["all x.((People(x) & LeadsVeryBusyLives(x) & 12-HourWorkHours(x)) -> MakesLossOfOwnFoodAtHome(x))", "all x.((Person(x) & VeryBusyLife(x) & 12-hourWorkLife(x)) -> MakesOwnFoodAtHome(x))", "all x.((Person(x) & LeadsVeryBusyLivex(x) & 12-hourWorkHours(x)) -> MakesOwnFoodAtHome(x))", "all x.((Person(x) & LeadsSmallLives(x) & 12-hourWorkHours(x)) -> MakesOwnFood(x))", "all x.((People(x) & LeadsStays(x) & 12-hourWorkHours(x)) -> MakesOwnFoodAtHomeUsingRecipesAndOnlineGuides(x))", "all x.((Person(x) & LeadsBusyLives(x) & IncludesWorkHours(x,120)) -> MakesOwnFoodAtHome(x))", "all x.((Person(x) & VeryBusyLiving(x) & IncludesWorkHours(x,12)) -> MakesOwnFoodAtHome(x))", "all x.((Person(x) & LeadsBustyLives(x) & 12-hourWorkHours(x)) -> MakesOwnFoodAtHome(x))", "all x.((People(x) & LeadSummerLives(x) & 12-hourWorkHours(x)) -> MakesOwnFoodAtHome(x))", "all x.((Person(x) & LeadsBrushedLives(x) & 12-hourWorkHours(x)) -> MakesOwnFoodAtHome(x))", "all x.((Person(x) & LeadsVeryBusyLives(x) & IncludesLittleWorkHours(x)) -> MakesOwnFoodAtHome(x))", "all x y.((Person(x) & LeadsBusyLessons(x) & 12-hourWorkHours(x)) -> MakesOwnFoodAtHome(x))", "all x.((Person(x) & LeadsStokedLifeIncludesWorkHours(x)) -> MakesLotOfOwnFoodAtHome(x))", "all x.((Person(x) & LeadsSmokeyLovers(x) & Includes12HoursWorkHours(x)) -> MakesFoodAtHome(x))", "all x.((Person(x) & LeadsSmallLife(x) & 12-hourWorkHours(x)) -> MakesOwnFoodAtHome(x))", "all x.((Person(x) & LeadsStaySocket(x) & 12-hourWorkHours(x)) ->(MakesOwnFood(x) & (UsesRecipes(x) | UsesOnlineGuides(x))))"]}
{"id": "folio_train_1122", "nl": "Sam is either both addicted to coffee or other caffeinated drinks or leads very busy lives that include 12-hour work hours, or she is neither addicted to coffee and other caffeinated drinks nor leads very busy lives that include 12-hour work hours", "fol": "((AddictedToCaffeine(Sam) & LeadsBusyLife(Sam) & -(-AddictedToCaffeine(Sam) & -LeadsBusyLife(Sam))) | (-(AddictedToCaffeine(Sam) & LeadsBusyLife(Sam)) & -AddictedToCaffeine(Sam) & -LeadsBusyLife(Sam)))", "prediction": ["all x y z.((Sam(x) & (Coffee(y) | CaffeinatedDrinks(y)) | ((BumpyLives(x,y) & 12-hourWorkHours(y))) | (-BumpyLives(z) & 12-hourWorkHours(z)))))", "((Sam(sam) & AddictedToCoffeeOrCaff\u00e9inatedDrinks(sam)) | ((AddictedToCoffeeOrCaff\u00e9inatedDrinks(sam) & 12-hourWorkHours(sam)) | (-AddictedToCoffeeAndCaff\u00e9inatedDrinks(sam) & 12-hourWorkHours(sam)) | (-AddictedToCoffeeOrCaff\u00e9", "(addictedto(samepartic.coffee(sam) | AddictedTo(samepartic.caffeinatedDrinks(sam))) | (addictedto(samepartic.coffee(sam) & AddictedTo(samepartic.caffeinatedDrinks(sam))) | (addictedto(samepartic.coffee(sam) & AddictedTo(samepartic.coffeeDrinks)))", "(all x.(Sam(x) -> (AbscendsToCoffee(x) | AddictedToCaff\u00e9inatedDrinks(x))) | (-AbscendsToCoffee(x) & AddictedToCaff\u00e9inatedDrinks(x) & AddictedToCaffeineDrinks(x))) | (-AbscendsToCoffee(x) & AddictedToCaff\u00e9", "all x.(Sam(x) -> ((AddictedTo(x,Coffee) | AddictedTo(x,CuffeinatedDrinks)) | (AddictedTo(x,Coffee) & AddictedTo(x,CaffeinedDrinks)) | (AddictedTo(x,Coffee) & AddictedTo(x,CaffeinatedDrinks)) | (AddictedTo(x,CoffeeDrinks) & AddictedTo(x,CuffeinatedDrinks))))))", "all x y z.((Sam(x) & (AddictedToCoffee(x,z) | AddictedToCaffeinatedDrinks(x))) | (AddictedToBostonCaffeinatedDrinks(x,z) | VeryBusyLivesInCompleteWorkHours(x))))", "(all x.((Sam(x) & (AddictedToCoffee(x) | AddictedToCaffeinatedDrinks(x))) | (AddictedToCoffee(x) & AddictedToCaffeinatedDrinks(x)) | (AddictedToCoffee(x) & AddictedToCaffeinatedDrinks(x) & AddictedToCaffeinatedDrinks(x))))", "(AddictedToCoffeeOrCaffeinatedDrinks(Sam) | (AbdicatedToCoffeeOrCaffeinatedDrinks(Sam) & 12-hourWorkHours(Sam))) | (-AddictedToCoffeeOrCaffeinatedDrinks(Sam) & 12-hourWorkHours(Sam)) | (AddictedToCoffeeOrCaffeinatedDrinks(Sam) & 12-hourWorkHours(Sam)))", "(AddictedTo(Sam(Sam) & ((AccusedTo(Sam) | AddictedTo(Sam,Coffee) | AddictedTo(Sam,CaffeinatedDrinks))) | (AddictedTo(Sam,Coffee) & AddictedTo(Sam,CaffeinatedDrinks)) | (AddictedTo(Sam,CaffeinatedDrinks) & AddictedTo(Sam,CaffeinatedDrinks)) | (", "(addicted(Sam) | (Addicted(Sam) & AlcoholDomestic(Sam)) & (12HoursWorkHours(Sam) | 12-HoursWorkHours(Sam))))", "(all x y z.((Sam(x) & Coffee(y) & (CaffeinatedDrink(z) | AddictiveTo(x,y)) & AddictiveTo(x,z))) | (AddictiveTo(x,y) & AddictiveTo(x,z) & 12HWorkHours(x)))))", "(all x.(Saman(x) -> (AddictsToCoffee(x) | AddictsToCaffeinatedDrinks(x) | (DevicesBasedBreakfasts(x) & 12HWorkHours(x)))))", "all x.(Sam(x) -> ((AddictedToCoffee(x) | AddictedToCaffeinatedDrinks(x)) | (DeadAndBusyLives(x) & 12-HourWorkHours(x)))) | (NoAddictedToCoffee(x) & 12-HourWorkHours(x) & -DailyLent(x))))", "all x y.((Sam(x) & ((AddictedToCoffee(x) | AddictedToCaffeinatedDrinks(x)) | (AddictedToCoffee(x) & AddictedToCaffeinatedDrinks(x))) | (AddictedToCoffee(x) & AddicatedToCaffeinatedDrinks(x) & AddictedToCaffeinatedDrinks(x) | LeadsVeryBustleLives(x))))", "(addictedtoCoffeeOrCaffeinatedDrinks(Sammam) & ((AccusedToCoffeeOrCaffeinatedDrinks(Sammam) & LeadsBusyLivesThatInclude12Hours(Sammam)) | (-AccusedToCoffeeAndCaffeinatedDrinks(Sammam) & LeadsBusyLivesThatInclude12Hours(Sammam)) | (-AccacceedingCoffeeAndOsCaffeinatedDrinks(Sammon12Hours(Sammang12Hours(Sammang12Hours(Samming12Hours(samming(Sammang12Hours(Sammang12HoursArenal(Samm-Samm-Samm-Samm-Samm-Samm-Samm-Samm-Samm-Samm-Samm-Samm-Samm-Samm-Samm-Samm-Samm-Samm-Samm-Samm-Samm-Samm-Samm-Samm-Samm-Samm-Samm-Samm-Samm-Samm-Samm-Samm-Samm-Samm-Samm-Samm-Samm)Saman-Samm-(Samm-Samm-Samm-Samm-Samm-Samm-Samm-Samm-Samm-As-Samm-Samm-Samm-Samm-Samm-Samm-Samm-Sam-Samm-Samm-Samm-Samm-Samm-Samm-Samm-Samm-Samm-Samm-SammSamming-SimpleSamm-Samm-Samm-Samm-Samm-Samm-Samm-Samm-Samm-S", "(all x y z.(Sam(x) -> (AddictedToCoffee(x) | AddictedToCaffeinatedDrinks(x)) | (AddictedToCoffee(y) & AddictedToCaffeinatedDrinks(z)) | (AddictedToCoffee(y) & AddictedToCaffeinatedDrinks(y) & AddictedToCaffeinatedDrinks(z) & Addicated(z)))))"]}
{"id": "folio_train_1123", "nl": "Sam is addicted to coffee and other caffeinated drinks.", "fol": "AddictedToCaffeine(Sam)", "prediction": ["(AddictedToCoffee(Sam) & AddictedToCaffeinatedDrinks(Sam))", "(AddictedToCoffee(Sam) & AddictedToOtherCaffeinatedDrinks(Sam))", "all x.((Sam(x) & AddictsToCoffee(x) & AddictsToOtherCaffeinatedDrinks(x)) -> AddictsTo(x,CoffeeAndOtherDrinks))", "all x.((Sam(x) & Coffee(x)) | CaffeinatedDrinks(x)) -> Addicts(x))", "(AddictedToCoffee(Sam) & AddictedToCaffeinatedDrinks(Sam))", "all x.(Sam(x) -> (AccetsToCoffee(x) & AddictsToCaffeinatedDrinks(x)))", "-(AddictToCoffee(sam) & AddictToCaffeinatedDrinks(sam))", "all x.(AddictiveToCaffeinedDrinks(x) -> (Coffee(x) | OtherCaffeinatedDrinks(x)))", "all x.(Sam(x) -> (AccusedToCoffee(x) | AddictionToCaffeinatedDrinks(x)))", "all x y.((Sam(x) & Coffee(y) & CaffeinedDrinks(z)) -> Addiction(x,y,z))", "all x.(Sam(x) -> AddictedToCoffeeAndCaffeinatedDrinks(x))", "all x y.((Sam(x) & Coffee(y) & CaffeinatedDrinks(x)) -> Addictive(x,y))", "all x.(Sam(x) -> AddictToFengthinatedDrinks(x))", "all x.(Sam(x) -> (AddictedToCoffee(x) | AddictedToCaffeinatedDrinks(x)))", "all x.((Sam(x) & Coffee(x)) -> ConsumedBy(x))", "all x.((Sam(x) & Coffee(x) & OtherCaffeinatedDrinks(x)) -> Addictive(x))"]}
{"id": "folio_train_1124", "nl": "Sam owns at least one coffeemaker and one blender in her home.", "fol": "OwnsKitchenAppliances(Sam)", "prediction": ["(Owns(Sam,Cafemaker) & Owns(Sam,Blender))", "exists x.(Home(x) & Coffeemaker(x) & Blender(x) & InHome(x))", "(PlacesCarbonmaker(sam) & HomeProducesBlender(sam) & -HasMembership(sam,conveys,sam))", "all x.((Sam(x) & CoffeeMaker(x)) -> Blender(x))", "all x.(Sam(x) -> (OwnsCoffeemaker(x) & OwnsBlender(x)))", "all x y.((Sam(x) & Home(y)) -> (Owns(x,y) & Coffeemaker(y) & Blender(y)))", "(OwnsCoffeemaker(Sam) & OwnsBlender(Sam))", "all x y.((Sam(x) & Coffeemaker(y) & Blender(y)) -> OwnsInHome(x,y))", "all x y.((Sam(x) & Coffeemaker(y) & Blender(z)) -> OwnsIn(x,y,z))", "all x y.((Sam(x) & Home(y,x)) -> (OwnsCoffeemaker(x,y) & OwnsBlender(x,y)))", "all x.((Sam(x) & Coffeemaker(x) & Blender(x)) -> OwnsInHome(x))", "(Owns(Sam'sCoffeemaker) & Owns(Sam'sBlender))", "all x y.(((Coffeemaker(x) & Blender(y)) -> InHome(x,y))", "all x y.((Sam(x) & Coffeemaker(y) & Blender(y)) -> OwnsInHome(x,y))", "all x y.((Sam(x) & Coffeemaker(y) & Blender(z)) -> OwnsInHome(x,y,z))", "exists x.(Sam(x) & exists y.(Coffeemaker(y) | Blender(y)) & InHome(x,y)))"]}
{"id": "folio_train_1125", "nl": "Sam either owns at least one coffeemaker and one blender in her home or orders takeout at least once a day.", "fol": "((OwnsCoffeemaker(Sam) & OwnsBlender(Sam)) | OrdersTakeout(Sam))", "prediction": ["exists x y.(Coffeemaker(x) & Blender(y) & Home(x,y)) | OrdersTakeout(x,y))", "all x.(Sam(x) -> (OwnsCoffeemaker(x) & OwnsBlender(x) & OrdersTakeout(x)))", "all x.((Sam(x) & Coffeemaker(x) & Blender(x)) -> (BelongsTo(x,1) & InHome(x)) | OrdersTakeout(x,1)))", "all x.(Sam(X) -> (OwnsPetizer(x) & OwnsBlender(x) & (OrdersTakeout(x) | OnceADay(x))))", "all x.(HasCoffeemakerAndBlender(x) | OrdersTakeout(x))", "((OwnsCoffeemaker(Sam) & OwnsBlender(sam)) | OrdersTakeout(sam)))", "all x y.((Sam(x) & Coffeemaker(y) & Blender(y)) -> (Owns(x,y) | OrdersTakeout(z))))", "all x.(Sam(x) -> (Owns(x,Cupmaker) | Owns(x,Blender)) | OrdersTakeout(x,Takeout)))", "all x.((Saman(x) & Coffeemaker(x) & Blender(x)) | OrdersTakeout(x))", "all x.((Sam(x) & (OwnsCoffeemaker(x) | OwnsBlender(x))) | OrdersTakeout(x)))", "all x.(Sam(x) -> (OwnsCoffeemaker(x) & OwnsBlender(x) & (OrdersTakeout(x) | AtLeastOneDay(x))))", "all x.(Sam(x) -> (Owns(x,coffeemaker) & Owns(x,mixer)) | OrdersTakeout(x)))", "all x.((Sam(x) & Coffeemaker(x) & Blender(x)) | OrdersTakeout(x))", "(OwnsAtLeastOneCoffeemakerAndBlender(Sam) | OrdersTakeoutAtLeastTwoOfDay(Sam)))", "(OwnsCoffeemakerAndBlender(Sam) | OrdersTakeoutOfTime(Sam)))", "(Owns(Sam,Coffeemaker,Blender) | Orders(Sam,Takeout,PartOfDay)))"]}
{"id": "folio_train_1126", "nl": "No professional basketball players are soccer players.", "fol": "-exists x.(IsSoccerPlayer(x) & IsProfessionalBasketballPlayer(x))", "prediction": ["-exists x.(ProfessionalBasketballplayer(x) & SoccerPlayer(x))", "-exists x.(ProfessionalBallroomPlayer(x) & SoccerPlayer(x))", "-exists x.(ProfessionalBasketballPlayer(x) & SoccerPlayer(x))", "-exists x.(ProfessionalBasketballPlayer(x) & SoccerPlayer(x))", "-exists x.(ProfessionalBasketballPlayer(x) & SoccerPlayer(x))", "-exists x.(ProfessionalBasketballPlayer(x) & SoccerPlayer(x))", "-exists x.(ProfessionalBasketballPlayer(x) & SoccerPlayer(x))", "-exists x.(ProfessionalBasketballPlayer(x) & SoccerPlayer(x))", "-exists x.(ProfessionalBasketballPlayer(x) & SoccerPlayer(x))", "-exists x.(ProfessionalBasketballPlayer(x) & SoccerPlayer(x))", "-exists x.(ProfessionalBasketballPlayer(x) & -SportsMan(x))", "-exists x.(ProfessionalBasketballPlayer(x) & SoccerPlayer(x))", "-exists x.(ProfessionalBasketballPlayer(x) & SoccerPlayer(x))", "-exists x.(ProfessionalBasketballPlayer(x) & SoccerPlayer(x))", "-exists x.(ProfessionalBasketballPlayer(x) & SoccerPlayer(x))", "-exists x.(ProfessionalBasketballPlayer(x) & SoccerPlayer(x))"]}
{"id": "folio_train_1127", "nl": "All centerbacks are defenders.", "fol": "all x.(IsCenterback(x) -> IsDefender(x))", "prediction": ["all x.(Centerback(x) -> Defender(x))", "all x.(Centerback(x) -> Defender(x))", "all x.(Centerback(x) -> Defender(x))", "all x.(Centerback(x) -> Defender(x))", "all x.(Centerback(x) -> Defender(x))", "all x.(Centerback(x) -> Defender(x))", "all x.(Centerback(x) -> Defender(x))", "all x.(Centerback(x) -> Defender(x))", "all x.(Centerback(x) -> Defender(x))", "all x.(Centerback(x) -> Defender(x))", "all x.(Centerback(x) -> Defender(x))", "all x.(Centerback(x) -> Defender(x))", "all x.(Centerback(x) -> Defender(x))", "all x.(Centerback(x) -> Defender(x))", "all x.(CenterBack(x) -> Defender(x))", "all x.(Centerback(x) -> Defender(x))"]}
{"id": "folio_train_1128", "nl": "Roger Federer is not an NBA player or a defender.", "fol": "-((IsNBAPlayer(Rogerfederer) & -IsDefender(Rogerfederer)) | (-IsNBAPlayer(Rogerfederer) & IsDefender(Rogerfederer)))", "prediction": ["(-(NBAPlayer(RogerFederer) | Defender(RogerFederer)))", "(-NBAPlayer(RogerFederer) | Redefender(RogerFederer))", "(-(NASAPlayer(RogerFederer) | Defender(RogerFederer)))", "(-NBAPlayer(RogerFederer) & -Defenser(RogerFederer))", "-(RogerFederer(r) & NBAPlayer(r)) & -Defendant(r))", "no NBAplayers(RogerFederer) & -(Defendant(RogerFederer) & - NBAPlayer(r)))", "(-(NBAPlayer(RogerFederer) | Defensive(RogerFederer)))", "all x y.((RogerFederer(x) & NBAPlayer(y)) -> -(Defendant(x) | Defender(y)))", "(-exists x.(RogerFederer(x) & NBAPlayer(x)) | Defender(x)))", "all x.((RogerFederer(x) & -NBAPlayer(x) & -Defendant(x)) -> -NBAPlayer(x))", "(-HasPathball(RogerFederer,NBA) & -HasDefender(RogerFederer,Basketball))", "Roger Federer (no NBAPlayer(f) & -Densessateur(f))", "(-BasketballPlayer(RogerFederer) & -Defendant(Federer))", "(-NBAPlayer(RogerFederer) | Defender(RogerFederer))", "-(NBAPlayer(RogerFederer) | DefendingAgent(RogerFederer))", "-(RogerFederer(RogerFederer) & -(NBAPlayer(r) | Defender(r)))"]}
{"id": "folio_train_1129", "nl": "Roger Federer is a centerback.", "fol": "IsCenterback(Rogerfederer)", "prediction": ["All x.((RogerFederer(x) & Centerback(x)) -> Centerback(x))", "(Centerback(RogerFederer)", "all x.(Centerback(x) -> RogerFederer(x))", "(CenterBack(RogerFederher) & CenterBack(RogerFederer))", "(Centerback(DougFederer)?", "all x.(Centerback(x) -> RogerFederer(x))", "RogerFederer(record) & Centerback(record)", "all x.(RogerFederer(x) -> CenterBack(x))", "all x.(Centerback(x) -> RogerFederer(x))", "Roger Federer (Centerback)", "(Centrumback(RoomFederer) & -Centerback(RoomFederer))", "RogerFederer(r) is a CenterBack(r))", "Roger Federer is centerback.", "(Centerback(RogerFederer)", "Roger Federer is centerback.", "-(Centerback(rood) & Federer(ros)))"]}
{"id": "folio_train_1130", "nl": "Roger Federer is not a centerback.", "fol": "-IsCenterback(Rogerfederer)", "prediction": ["Roger Federer is not a centreback.", "(-centerback(RogerFederer))", "-(Centerback(RogerFederer))", "(-Centerback(RogerFederer))", "(-Centerback(RogerFederer)", "(-Centerback(RogerFederer))", "(-Centerback(RogerFederer)", "(-Centerback(RogerFederer))", "(-centerback(RogerFederer))", "all x.((Receiver(x) & -Centerback(x)) -> -Centerback(x))", "-Centerback(Michael & RogerFederer(Michael))", "Roger Federer is not Centerback(RogersFederer)", "Roger Federer is notCenterback(RogersFerner)", "all x y.((Tom(x) & RogerFederer(y)) -> -Centerback(y))", "Roger Federer is notCenterback(RogersFederer)", "No Centerback(RogerFederer)"]}
{"id": "folio_train_1131", "nl": "Roger Federer is a soccer player.", "fol": "IsSoccerPlayer(Rogerfederer)", "prediction": ["Roger Federer is a soccer player.", "All x.((RogerFederer(x) & SoccerPlayer(x)) -> FootballPlayer(x))", "(SoccerPlayer(RogerFederer))", "(SoccerPlayer(RogerFederer)", "Roger Federer is a soccer player.", "all x.((RogerFederer(x) & SoccerPlayer(x)) -> Plays(x))", "((RusterFerner(Roger,Soccer) & Plays(Roger,Soccer)) -> HasPlayed(Roger,Soccer))", "Roger Federer is a soccer player.", "(SoccerPlayer(RogerFederer)", "RogerFederer(RogersFederer,SoccerPlayer)", "RogerFederer(Roger(Roger) & SoccerPlayer(Roger,Soccer)", "all x.((RogerFederer(x) & SoccerPlayer(x)) -> Plays(x))", "RogerFederer(RS) & SoccerPlayer(RS)", "all x.((RogerFederer(x) & FootballPlayer(x)) -> SoccerPlayer(x))", "Roger Federer (SoccerPlayer)", "Roger Federer is soccer player."]}
{"id": "folio_train_1132", "nl": "Some teachers working at a pool are not nice.", "fol": "exists x.(TeacherAtPool(x) & -IsNice(x))", "prediction": ["exists x.(Teacher(x) & WorkingAtPool(x) & -Nice(x))", "exists x.(Teacher(x) & WorksAtPool(x) & -Nice(x))", "exists x.(Teacher(x) & WorkingAtPool(x) & -nice(x))", "exists x.(Teacher(x) & WorkingAtPool(x))", "exists x.(Teacher(x) & WorkingAtPool(x) & -nice(x))", "exists x.(Teacher(x) & WorkingAtPool(x) & -Nice(x))", "exists x.(Teacher(x) & WorkedAtPool(x) & -Nice(x))", "exists x.(Teacher(x) & WorksAtPool(x) & -Nice(x))", "exists x.(Teacher(x) & WorkAtPool(x) & -Nice(x))", "exists x.(Teacher(x) & WorkedAtPool(x))", "exists x.(Teacher(x) & WorkedAtPool(x) & -Cozy(x))", "exists x.(Teacher(x) & WorkingAtPool(x) & -Nice(x))", "exists x.(Teacher(x) & WorkingAtPool(x) & -Great(x))", "exists x.(Teacher(x) & WorkedAt(x,pool))", "exists x.(Teacher(x) & WorksAtPool(x) & -Nice(x))", "exists x y.(Teacher(x) & Pool(y) & WorksAt(x,y))"]}
{"id": "folio_train_1133", "nl": "All teachers working at pools are pool managers.", "fol": "all x.(TeacherAtPool(x) -> IsPoolManager(x))", "prediction": ["all x.(Teacher(x) -> WorkAtPools(x))", "all x.((Teacher(x) & WorksAtPool(x)) -> PoolManager(x))", "all x.(Teacher(x) -> PoolManager(x))", "all x.(WorksAtPool(x) -> PoolManager(x))", "all x.(Teacher(x) -> PoolManager(x))", "all x.((Teacher(x) & WorksAtPools(x)) -> PoolManager(x))", "all x.(TeacherWorkingAtPool(x) -> PoolManager(x))", "all x.(WorksAtPool(x) -> PoolManager(x))", "all x.(Teacher(x) -> PoolManager(x))", "all x.(Teacher(x) -> EmploysPools(x))", "all x.(Teacher(x) & WorksAtPool(x)) -> PoolManager(x))", "all x.(WorkingAtPools(x) -> PoolManager(x))", "all x.((Teacher(x) & WorksAtPool(x)) -> PoolManager(x))", "all x.(WorkingAtPool(x) -> PoolManager(x))", "all x.(WorksAtPools(x) -> PoolManager(x))", "all x.((Teacher(x) & WorkAtPool(x)) -> PoolManager(x))"]}
{"id": "folio_train_1134", "nl": "All pool managers are lifeguards.", "fol": "all x.(IsPoolManager(x) -> IsLifeguard(x))", "prediction": ["all x.(PoolManager(x) -> Lifeguard(x))", "all x.(PoolManager(x) -> Lifeguard(x))", "all x.exists y.(PoolManager(x) & Lifeguard(y) & Manages(x,y))", "all x.(PoolManager(x) -> Lifeguard(x))", "all x.(PoolManager(x) -> Lifeguard(x))", "all x.(SwimMovement(x) -> Lifeguard(x))", "all x.(PoolManager(x) -> Lifeguard(x))", "all x.(PoolManager(x) -> Lifeguard(x))", "all x.(PoolManager(x) -> Lifeguard(x))", "all x.(PoolManager(x) -> Lifeguard(x))", "all x.(PoolManager(x) -> Lifeguard(x))", "all x.(PoolManager(x) -> Lifeguard(x))", "all x.(PoolManager(x) -> Lifeguard(x))", "all x.((PoolManager(x) & Lifeguard(x)) -> Lifeguard(x))", "all x.(PoolManager(x) -> Lifeguard(x))", "all x.(PoolManager(x) -> Lifeguard(x))"]}
{"id": "folio_train_1135", "nl": "If someone is a lifeguard, then they work at a pool.", "fol": "all x.(IsLifeguard(x) -> WorksAtPool(x))", "prediction": ["all x.(Lifeguard(x) -> WorkAtPool(x))", "all x.(Lifeguard(x) -> WorksAtPool(x))", "all x.(Lifeguard(x) -> WorkAtPool(x))", "all x.(Lifeguard(x) -> WorkAtPool(x))", "all x.(Lifeguard(x) -> WorksAtPool(x))", "all x.(Lifeguard(x) -> WorkAtPool(x))", "all x.(Lifeguard(x) -> WorksAtPool(x))", "all x.(Lifeguard(x) -> WorkAtPool(x))", "all x.(Lifeguard(x) -> WorkAtPool(x))", "all x.(Lifeguard(x) -> WorkAtPool(x))", "all x.((Lifeguard(x) & WorkAtPool(x)) -> WorkAtPool(x))", "all x.((Lifeguard(x) & WorkAtPool(x)) -> Lifeguard(x))", "all x.(Lifeguard(x) -> WorkAtPool(x))", "all x.(Lifeguard(x) -> WorkAtPool(x))", "all x.(Lifeguard(x) -> WorkAtPool(x))", "all x.(Lifeguard(x) -> WorkAtPool(x))"]}
{"id": "folio_train_1136", "nl": "Mary does not work at a pool.", "fol": "-WorksAtPool(Mary)", "prediction": ["all x.(Maria(x) -> -WorksAtPool(x))", "(-WorksAtPool(Mary))", "all x.(Maria(x) -> -WorksAtPool(x))", "-exists x.(Maria(x) & Pool(x))", "all x.(Mary(x) -> -WorksAtPool(x))", "all x.((Mary(x) & WorkAtPool(x)) -> -WorkAtPool(x))", "((Mary) & -WorksAtPool(Mary)))", "all x y.((Mama(x) & Pool(y)) -> -WorksAt(x,y))", "(-WorksAtPool(Mary))", "(-WorksAtPool(Maria))", "all x.((Mary(x) & Dose(x)) -> -WorksAtPool(x))", "all x y.((Mary(x) & Pool(y)) -> -WorksAt(x,y))", "(-WorksAtPool(Maria,Quality))", "will be a & workAt(MichelleLarsend,Pool) -> -WorkAt(MichelleLarsend,Pool))", "all x.((Mary(x) & -WorksAtPool(x)) -> DoesnotWorkAt(x,Pool))", "all x.((Mary(x) & -WorksAtPool(x)) -> -WorksAtPool(x))"]}
{"id": "folio_train_1137", "nl": "Mary is nice.", "fol": "IsNice(Mary)", "prediction": ["All x.((Mary(x) & Nice(x)) -> Nice(x))", "exists x.(Mary(x) & Nice(x))", "(PrettyMammal(Mammal)", "(TinyMam(Mary) -> Nice(Mary)))", "(Nice(Mama)", "all x.(Mary(x) -> Nice(x))", "all x.(Mary(x) -> Nice(x))", "Mary is nice.", "Mary is nice.", "everyone who knows Mary better.", "Mary is nice.", "all x.(Marris(x) -> Nice(x))", "Mary is nice.", "all x.(Mila(x) -> Nice(x))", "is nice(Maria)", "Mary is nice."]}
{"id": "folio_train_1138", "nl": "Mary is not nice and is a teacher working at a pool.", "fol": "(-IsNice(Mary) & TeacherAtPool(Mary))", "prediction": ["(-Nice(Mary) & WorkerAtPool(Mary))", "all x.(Maria(x) -> (-Nice(x) & TeacherWorkingAtPool(x)))", "all x.(Mary(x) -> (-Nice(x) & Teacher(x) & WorkingAtPool(x)))", "((Maria(Maria,-Nice(Maria)) & Teacher(Maria,Pool))", "(-Nice(Mary) & TeachingPool(Mary))", "isn'tnice(Mame,Mame) & WorkingAtPool(Mame))", "(-Nice(Maria) & WorksAtPool(Maria))", "(-Nice(Mame) & TeacherWorkingAtPool(Mame))", "all x.(Maria(x) -> (-Nice(x) & EducatorWorkingAtPool(x)))", "(-Nice(Mary) & TeacherAtPool(Mary))", "(-Nice(Mary) & Teacher(Mary) & WorkedAtPool(Mary))", "(-nice(Maria) & TeacherWorkingAtPool(Maria))", "all x.(Mary(x) -> (-Nice(x) & WorkedAtPool(x)))", "all x.(Mary(x) -> (-Nice(x) & TeacherWorkingAtPool(x)))", "(-Nice(Mary) & TeacherWorkingAtPool(Mary))", "(-Nice(Mary) and Teacher(Mary) & WorkedAtPool(Mary)))"]}
{"id": "folio_train_1139", "nl": "Mary is nice and is a teacher working at a pool.", "fol": "(IsNice(Mary) & TeacherAtPool(Mary))", "prediction": ["all x y.((Mary(x) & Pool(y)) -> (Welcome(x,y) & TeacherWorkingAt(x,y)))", "all x.(Mary(x) -> (Nice(x) & TeacherWorkingAtPool(x)))", "all x.(Maria(x) -> (Nice(x) & TeacherWorkingAtPool(x)))", "(Nice(Mary) & TeacherWorkingAtPool(Mary))", "(Nice(Mary) & Teacher(Mary) & WorkedAtPool(Mary))", "all x.(M.Mary(x) -> (Nice(x) & TeacherWorkingAtPool(x)))", "(Nice(Maria) & TeacherWorkingAtPool(Mary))", "all x.(Maria(x) -> (IsNice(x) & Teacher(x) & WorksAtPool(x)))", "(Nice(Mary) & TeacherWorkingAtPool(Mary))", "all x.(Mary(x) -> (IsNice(x) & Teacher(x) & WorkedOnPool(x)))", "all x.(Beautiful(x) -> (Teacher(x) & WorkedAtPool(x)))", "all x.(Mulk(x) -> (Nice(x) & TeacherWorkingAtPool(y)))", "all x.((Mama(x) & Nice(x)) -> TeacherWorkingAtPool(x))", "(Nice(Maria) & Teacher(Maria,Cool))", "(Nice(Mary) & Educator(Mary) & WorkingAtPool(Mary))", "all x.(Maria(x) -> (Nice(x) & TeacherWorkingAtPool(x)))"]}
{"id": "folio_train_1140", "nl": "Not all art pieces require talent.", "fol": "exists x.(IsArtPiece(x) & -NeedsTalent(x))", "prediction": ["-all x.(ArtPiece(x) -> RequiresTalent(x))", "-all x.(ArtPiece(x) -> RequiresTalent(x))", "-all x.(ArtPiece(x) -> RequiresTalent(x))", "-all x.(ArtPiece(x) -> RequiresTalent(x))", "-all x.(ArtPiece(x) -> RequiresTalent(x))", "-all x.(ArtPiece(x) -> RequiresTalent(x))", "-all x.(ArtPiece(x) -> RequiresTalent(x))", "-all x.(ArtPiece(x) -> RequiresTalent(x))", "-all x.(ArtPiece(x) -> RequiresTalent(x))", "-all x.(ArtPiece(x) -> RequiresTalent(x))", "-all x.(ArtPiece(x) -> -RequiresTalent(x))", "-all x.(ArtPiece(x) -> RequiresTalent(x))", "-all x.(ArtPiece(x) -> RequiresTalent(x))", "-all x.(ArtPiece(x) -> RequiresTalent(x))", "-all x.(ArtPiece(x) -> RequiresTalent(x))", "-all x.(ArtPiece(x) -> RequiresTalent(x))"]}
{"id": "folio_train_1141", "nl": "Everything that requires talent requires practice.", "fol": "all x.(NeedsTalent(x) -> NeedsPractice(x))", "prediction": ["all x.(RequiresTalent(x) -> RequiresPractice(x))", "all x.(RequiresTalent(x) -> RequiresPractice(x))", "all x.((RequiresTalent(x) & RequiresPractice(x)) -> RequiresPractice(x))", "all x.((RequiresTalent(x)) -> RequiresPractice(x))", "all x.(RequiresTalent(x) -> RequiresPractice(x))", "all x.((RequiresTalent(x)) -> RequiresPractice(x))", "all x.((RequiresTalent(x)) -> RequiresPractice(x))", "all x.((RequiresTalent(x)) -> RequiresPractice(x))", "all x.((RequiresTalent(x)) -> RequiresPractice(x))", "all x.((RequiresTalent(x)) -> RequiresPractice(x))", "all x.((RequiresTalent(x)) -> RequiresPractice(x))", "all x.(RequiresTalent(x) -> RequiresPractice(x))", "all x.(RequiresTalent(x) -> RequiresPractice(x))", "all x.((Talent(x) & Requires(x,talent)) -> RequiresPractice(x))", "all x.((RequiresTalent(x)) -> RequiresPractice(x))", "all x.((RequiresTalent(x)) -> RequiresPractice(x))"]}
{"id": "folio_train_1142", "nl": "There exist art pieces that do not require practice.", "fol": "exists x.(IsArtPiece(x) & -NeedsPractice(x))", "prediction": ["existars art pieces that do not requirePractice(art),", "exists x.(ArtPiece(x) & -RequiresPractice(x))", "exists x.(ArtPiece(x) & -RequiresPractice(x))", "exists x.(ArtPiece(x) & -RequiresPractice(x))", "exists x.(ArtPiece(x) & -RequiresPractice(x))", "exists x.(ArtPiece(x) & -RequiresPractice(x))", "exists x.(ArtPiece(x) & -RequiresPractice(x))", "exists x.(ArtPiece(x) & -RequiresPractice(x))", "exists x y.(ArtPiece(x) & ArtPiece(y) & -RequiresPractice(x))", "exists x.(ArtPiece(x) & -RequiresPractice(x))", "exists x.(ArtPiece(x) & -RequiresPractice(x))", "exists x.(ArtPiece(x) & -RequiresPractice(x))", "exists x.(ArtPiece(x) & -RequiresPractice(x))", "exists x.(ArtPiece(x) & -RequiresPractice(x))", "exists x.(ArtPiece(x) & -RequiresPractice(x))", "exists x.(ArtPiece(x) & -RequiresPractice(x))"]}
{"id": "folio_train_1143", "nl": "Bernarda Bryson Shahn was a painter and lithographer.", "fol": "(IsPainter(BernardaBrysonShahn) & IsLithographer(BernardaBrysonShahn))", "prediction": ["(Painter(Berryson,Shann) | Linthographer(Berryson,Shahn))", "all x.(BertyBrysonShahn(x) -> (Painter(x) & Lithographer(x)))", "shehnsahadn(bennetta.bryson(z) -> (Painter(z) & LicensedArtist(x,y) & Artist(z)))", "all x.(BernardaBrysonShahn(x) -> (Painter(x) & Lithographer(x)))", "(Painter(brysonShahn) & Painter(b) & Lithographer(b))", "Leitbilder(BernardaBrysonShahn)", "all x.((BernardaBrysonShahn(x) & Painter(x) & Litographer(x)) -> Shahn(x))", "all x.((BertainBrysonShahn(x) & Painter(x) & Lithographer(x)) -> (BertainBrysonShahn(x) & Artist(x)))", "(Painter(BerrysonShann) & Lithographer(BerrysonShann))", "All x.(BernardaBrysonShahn(x) -> (Painter(x) & Lithemographer(x)))", "(Painter(BernardaBrysonShahn) & Lithographer(BernardaBrysonShahn))", "((BernardaBrysonShahn) & Painter(B) & Lithographer(B)) -> PainterAndLithographer(B))", "(Painter(BerrysonShahn) & Lithographer(BernicendaBrysonShahn))", "(Painter(BernardaBrysonShahn) & Lithographer(BernardaBrysonShahn))", "Bernarda Bryson Shahn (Brazil) & Painter(Bz) & Lithographer(Bz))", "(Painter(BernardaBrysonShahn) & Lithographer(BernardaBrysonShahn))"]}
{"id": "folio_train_1144", "nl": "Bernarda Bryson Shahn was born in Athens, Ohio. ", "fol": "BornInLocation(BernardaBrysonShahn,AthensOhio)", "prediction": ["Bernarda Bryson Shahn was born in Athens,Ohio.", "Bernarda BrysonShahn (BirthInAthens,Ohio))", "Bernarda BrysonShuran was born in Athens, Ohio.", "Bernarda BrysonShahn was born in Athens, Ohio.", "Bernarda BrysonShahn (Birth(Bennetta) and BornIn(Bennetta,Oregon))", "Bernarda Bryson Shahn was born in Athens, Ohio.", "Herbs(b) & BrysonShahn(b) & BornInAthens(c) & BornInOntonio(d))", "BornInAthens,Oakland(BerrysonShayn)", "(Bernarda-BrysonShahn(Brigadura) & BornInAthens(Burn,Ohio))", "(BerrysonBrysonShahnBirth(Bernie).Borrow(BerrysonShahn) is bornIn(BerrysonBryson(Berryson(Berryson) & BornIn(Berryson,Athens) & BornIn(Berryson,Ohio))", "Bernarda BrysonShahn was born in Athenians, Ohio.", "Bernarda BrysonShahn was born in Athens, Ohio.", "Bernarda Bryson Shahn was born in Athens,Ohio.", "BrysonShannBernardaBryson(Bergen) & BornInHashn(Bernardess,Athens,Ohio))", "(BernardaBrysonShahn(Bernarda) & BornIn(Bernarda,Ohio))", "Bernarda Bryson Shahn was born in Athens, Ohio."]}
{"id": "folio_train_1145", "nl": "Bernarda Bryson Shahn was married to Ben Shahn.", "fol": "IsMarriedTo(BernardaBrysonShahn,BenShahn)", "prediction": ["(MarriedTo(Bertissa BrysonShahn,Ben))", "Heiress(benShann,benChairn,ben)", "(MarriedToBenShahn(b) & BernardaBrysonShahn(c))", "The relationship was forged between BrysonShahn and BenShahann.", "BeenMarriedToBenShahn(BenShahn)", "(Married(BenShahn,Ben) & BernardaBrysonShahn,Ben))", "Bernarda BrysonShashn wasmarriedTo(BenShashn,Ben))", "(JewishMarriage(BernardaBrysonShahn) & MarriedTo(BenShahn))", "(MarriedTo(BernardaBrysonShahn))", "(MarriedTo(BernardaBrysonShurln) & BrysonShurln(Bernarda),Bernarda(Bernarda))", "all x y.((Married(x,y) & BernardaBrysonShahn(x)) -> BornTo(y,x))", "-MarriedTo(y,x) -> (BernardaBrysonShahn(y),x)) & BenShahn(y))", "HerreraBrysonShahn MarriedToBenShahn(26)", "BernardaBrysonShahn wasMarriedToBenShahn.", "(MarriedTo(BernardaBrysonShahn) & BernardaBrysonShahn(BenShahn))", "(MarriedToBernardaBrysonShahn)"]}
{"id": "folio_train_1146", "nl": "People born in Athens, Ohio are Americans.", "fol": "all x.(BornInLocation(x,AthensOhio) -> IsAmerican(x))", "prediction": ["all x.((Populus(x) & BornInAthens(x) & BornInOhio(x)) -> Americans(x))", "all x.((Person(x) & BornInAthens(x) & BornInOakland(x)) -> American(x))", "all x.(BornInAthensOhio(x) -> American(x))", "all x.((BirthedIn(x,Athens) & BornIn(x,Ohio)) -> American(x))", "all x.((Birth(x) & BornInAthens(x) & BornInOhio(x)) -> Americans(x))", "all x.((Person(x) & BornInAthens(x) & BornInOhio(x)) -> American(x))", "all x.((Person(x) & BroughtInAthens(x) & BornInOklahoma(x)) -> American(x))", "all x.((Person(x) & BornInAthens(x) & BornInOHio(x)) -> American(x))", "all x.((Person(x) & BornInAthens(x)) -> American(x))", "all x.((Person(x) & BornInAthens(x)) -> American(x))", "all x.((Person(x) & BornInAthens(x) & BornInOakland(x)) -> American(x))", "all x.((Person(x) & BornIn(x,Athens) & BornIn(x,Oakland)) -> American(x))", "all x.((BirthInAthens(x) & BornInOakland(x)) -> Americans(x))", "all x.((Person(x) & BornInAthens(x)) -> American(x))", "all x.((Person(x) & BornInAthens(x) & BornInOhio(x)) -> Americans(x))", "all x.((People(x) & BornInAthens(x)) -> American(x))"]}
{"id": "folio_train_1147", "nl": "Bernarda Bryson Shahn was born in Greece.", "fol": "BornInLocation(BernardaBrysonShahn,Greece)", "prediction": ["Bernarda Bryson Shahn was born in Greece.", "BecameBreathedIn(BernardaBrysonSh Shahn)", "BornIn(BertinaBrysonShaghn)", "Bernarda Bryson Shahn (Brotherbryson)Shunn (BirthInGreece))", "BrysonShahn (bornInGreece)", "Bernarda BrysonShahn was born in Greece.", "-BernardaBrysonShahn(Bernarda)", "Bernarda BrysonShahn was bornInGreece(Bernarda BrysonSchahn)", "Bernarda BrysonShahn was born in Greece.", "BrysonShahn & BornInGreece(BernardaBrysonShhn)", "Bernarda BrysonShahn was born in Greece.", "Bernarda BrysonShahn was born in Greece.", "BenghaziaBrysonShahn (BritandianBryson(b) & BornIn(b))", "Bernarda BrysonShahn (BrotherAtHouse))", "BrysonShahn(b) & BornIn(a) GREECE(b))", "BelgravesBrysonShahn was bornIn(belgravesBryson(belgrave) & BornIn(belgrave))"]}
{"id": "folio_train_1148", "nl": "Bernarda Bryson Shahn was American.", "fol": "IsAmerican(BernardaBrysonShahn)", "prediction": ["(American(BernardaBrysonShahn) & Was(BernardaBrysonShahn))", "all x.(BernardaBrysonShahn(x) -> American(x))", "All x.((BernardaBrysonShahn(x) & American(x)) -> American(x))", "(American(BertinaBrysonShahn) & BelievesIn(BertinaBrysonShahn))", "Bernarda Bryson Shahn is American.", "Bernarda BrysonShhun (American)", "All x.((BernardaBrysonShahn(x) & American(x)) -> BrysonShahn(x))", "All x.((BernardaBrysonShahn(x) & American(x)) -> CanBreakFar(x))", "all x.((BernardaBrysonShann(x) & American(x)) -> Was(x,BernardaBrysonShann(x))", "is a Black American(BernardaBrysonShahn)", "Bernarda Bryson Shahn was American.", "Bernarda BrysonShahn (American)", "All x.(BernardaBrysonShahn(x) -> American(x))", "Bernarda BrysonShorn (American)", "all x.((BernardaBrysonShahn(x) & American(x)) -> BrysonShahn(x))", "all x.((BerndaBrysonShahn(x) & American(x)) -> BernardaBrysonShahn(x))"]}
{"id": "folio_train_1149", "nl": "Bernarda Bryson Shahn had been divorced once.", "fol": "DivorcedOnce(BernardaBrysonShahn)", "prediction": ["All x.((BernardaBrysonShann(x) & Divorced(x)) -> BiancaBrysonShhann(x))", "(Divorced(BergeraBrysonShahn)", "all x.((Bernarda-BrysonShehn(x) & Divorced(x)) -> HadFamed(x))", "Bernarda BrysonShahn DivorcedOneTime(n) & LivedIn(x,y))", "the divorced(BertonaBrysonShahn)", "all x.((BernardaBrysonShahn(x) & Divorced(x)) -> Hungry(x))", "all x y z.((BernardaBrysonShahn(x) & BernardaBryson(y) & (Bernarda(z) -> Divorced(z)))", "all x.(BernardaBrysonShahn(x) -> DivorcedOneTime(x))", "(Dissolution(BernardaBrysonShehn) -> HadBenardaBrysonShahn(BernardaBrysonShahn))", "all x y.((BerscarbrysonShahn(x) & Blanchebryson(y)) -> Divorced(x,y))", "all x.(Dissolution(x) -> SashannaBernarda(x))", "Bernarda BrysonShahn had been DivorcedOnly(Bernarda,Shahn)", "SheldonBurysonShahnDiarist(Bergaarda)", "Bernarda BrysonShhan had been DivorcedMeanwhile(BerrysonShahn)", "Bernarda BrysonShahn DivorcedOnce(Bernarda,Bryson,Shahn)", "all x.((BernardaBrysonShahn(x) & Divorced(x)) -> Divorced(x))"]}
{"id": "folio_train_1150", "nl": "If people upgrade to the newest iPhone model every year, then they are not saving money for a down payment on a new house.", "fol": "all x.(UpgradesToIphone(x) -> -SavingForHouseDownPayment(x))", "prediction": ["all x y.((Person(x) & iPhone(y) & UpgradesEveryAnnual(x,y)) -> -SavingMortgageOnNewHouse(x))", "all x.((Person(x) & UpgradesNewestAppleModel(x)) -> -SavingFundsForNewHouse(x))", "all x.((Person(x) & UpgradesToNewestiephoneModel(x) & EveryYear(x)) -> -SavesMoneyForDownPayment(x))", "all x y.((E upgrade(x) & iPhoneModel(y) & AllNewYears(x,y)) -> -SavingMoneyForDownPayment(x,y))", "all x.((Person(x) & UpgradesToNewest iPhoneModelEveryYear(x)) -> -SavingMoneyForNewHouse(x))", "all x.(UpdatesEveryYear(x) -> -SavesMoneyForNewHouse(x))", "all x.((Person(x) & UpdatesToNewestIphoneModelEveryYear(x)) -> -SavingMoneyForNewHouse(x))", "all x.((People(x) & UpgradeToNewestIphoneModel(x) & EveryYear(x)) -> -SavingMoneyForUpgrade(x))", "all x y.((UpgradesToNewestAppleModel(x) & Year(y)) -> -SavingSavingMoney(x,y))", "all x y.((Person(x) & iPhoneModel(y) & UpgradesEveryYear(x,y)) -> -SavingMoneyForDownPayment(x))", "all x.((SavingDownPaymentOnNewHouse(x)) -> UpgradesToNewestIphoneModelEveryYear(x))", "all x y.((Person(x) & iPhone(y) & UpgradesAtYearly(x,y)) -> -SavingMoneyForDownPaid(x))", "all x y.((Person(x) & iPhone(y) & UpdatesStartEveryYear(x,y)) -> -SavingMoneyForNewHouse(x))", "all x.((Person(x) & UpdatesToLatestAppleModelEveryYear(x)) -> -SavingBudgetForNewHouse(x))", "all x.((People(x) & UpgradesToNewestIphoneModelEveryYear(x)) -> -SavingmoneyForDeepPaymentOnNewHouse(x))", "all x y.((Apple(x) & UpgradesToLatestModel(x,y)) -> -BuysCash(x,y))"]}
{"id": "folio_train_1151", "nl": "If people enjoy reading about tech specs and keeping up to date on the latest technology, then they upgrade to the newest iPhone model every year.", "fol": "all x.(EnjoysTechReading(x) -> UpgradesToIphone(x))", "prediction": ["all x.((People(x) & EnjoysReadingTechSpecs(x) & KeepsUpToDateWithTechnology(x)) -> Upgrade(x))", "all x.((Person(x) & EnjoysTechSpecs(x) & KeepsUpToDateOnTechnology(x)) -> UpgradesToNewestAppleModelEveryYear(x))", "all x.((Person(x) & EnjoysReadingTechSpecs(x) & KeepsUpToDateOnNewTechnology(x)) -> UpgradesToNewestIphoneModel(x))", "all x y.((Person(x) & Reader(y) & EnjoysTechSpecs(x,y) & UpToDateOnTechnology(y)) -> UpgradesToNewestAppleModel(x,y))", "all x.((People(x) & EnjoysTechSizes(x) & UpToDateTechnology(x)) -> UpgradeToNewestIphoneModel(x))", "all x.((Person(x) & EnjoysReadingTechSpecs(x) & UpToDateTechnics(x)) -> UpgradeToTheNewestAppleModelAroundYear(x))", "all x y z.((People(x) & Technology(y) & Technology(z) & EnjoysReadingAndKeepingUpToDate(x,z)) -> UpgradesToNewestModel(x,y))", "all x y.((Person(x) & EnjoysReadingTechSpecs(x,y) & KeepsUpToDateOnTechnology(x,y)) -> UpgradeAtNewestIphoneModel(y,y))", "all x.((People(x) & EnjoysReadingTechStandards(x) & UpToDateTechnology(x)) -> UpgradeToNewestIphoneModel(x))", "all x.((Person(x) & EnjoysReadingTechSpecs(x) & UpToDateOnNewTechnology(x)) -> UpgradesToNewestIphoneModel(x))", "all x.((Person(x) & EnjoysReadingTechSpecs(x) & KeepingUpToDateOnTechnology(x)) -> UpgradesToNewestAppleModelEveryYear(x))", "all x y.((TelevisionProduct(x) & Person(y) & EnjoysReadingTechScreens(y) & UpToDateOnTechnology(y)) -> UpgradesEveryYear(x,y))", "all x.((Person(x) & EnjoysReadingTechSpecs(x) & StaysUpToCurrentTechnology(x)) -> UpgradesToNewestAppleModel(x))", "all x.(Sensation(x) -> (EnjoysReadingTechScenarios(x) & KeepsUpToDateOnNewTechnology(x) & UpgradesAlready(x)))", "all x.((ConsidersTechScreens(x) & EnjoysStoringTechnicans(x) & KeepsUpToDateOnTechnology(x)) -> UpgradeTonewestAppleModel(x))", "all x.((Person(x) & EnjoysReadingTechSpecs(x) & KeepsUpTodateOnTechnologies(x)) -> UpgradesToNewestIphoneModel(x))"]}
{"id": "folio_train_1152", "nl": "People either are saving money for a down payment on a new house or they live in apartments in big metropolitan cities.", "fol": "all x.(SavingForHouseDownPayment(x) | LivesInApartment(x))", "prediction": ["(Lifestyle(People) & (SavingMoneyForDownPayment(People) | LivingInApartments(People)))", "all x.(Personal(x) -> (SavingMoneyForDownPayment(x) | LivingInApartmentsInGroovenMetropolitanCities(x)))", "all x y.((Person(x) & House(y) & DownPayment(x,y)) -> (SavingMoneyOn(x,y) | LivingInApartments(x,y)))", "all x.(Person(x) -> (SavingMoney(x) & DownPayment(x) | LivesInApartments(x)))", "all x y.((Person(x) & (SavesMoney(x) & NewHouse(y)) | LivesInApartments(x,y))) -> SavesMoney(x,y))", "all x y.((Saving(x) & NewHouse(y)) -> (LaunchesIn(x,y) | LivesIn(x,y)))", "all x.(Person(x) -> ((SavingMoney(x) & NewHouse(x) & NewHouse(x)) | LivesInApartments(x) & MetropolitanCities(x)))", "all x y.((Person(x) & (SavesMoverage(x,y) | LivesInApartments(x,y))) -> DownPayment(y))", "exists x.(MetropolitanCity(x) & (SavesMoneyForDuePath(x) | LivesInDwellingApartments(x))))", "all x y.((Person(x) & (Uppayment(y) | Apartment(y))) -> (SavesMoney(x,y) | LivesIn(x,y)))", "all x y.((Person(x) & BigMetropolitanCottoral(y)) -> (SavesMoneyForDownPayment(x,y) | LivesInApartments(x,y)))", "all x y.((Popular(x) & Apt.(y)) -> (SavingMoneyForDownPurchase(x,y) | LivingIn(x,y)))", "all x.((Person(x) & (RestlessSavingMoney(x) | LivesInApartments(x))) -> DownPaymentOnNewHouse(x))", "all x y z.((Person(x) & House(y) & Apartment(z)) -> (PlanningOfBudget(x,y) | LivingInMetropolitanCities(x,z)))", "all x.((Person(x) & (SavesMoneyForDownPayment(x) | LivesInApartments(x))) -> (NewHouse(x) | MetropolistCity(x)))", "all x y.((Person(x) & House(y)) -> (SavingMoney(x,y) | HousingInApartments(x,y)))"]}
{"id": "folio_train_1153", "nl": "If people live with at least one roommate then they do not own at least one pet.", "fol": "all x.(LivesWithRoommate(x) -> -OwnsPet(x))", "prediction": ["all x.((LivesWith(x,y) & Roommate(z)) -> -Owned(x,z))", "all x.(LivesWithAtLeastOneRoommate(x) -> -OwnAtLeastOnePet(x))", "all x y.((People(x) & Roommate(y) & LivesWith(x,y)) -> -HealAtLeastOnePet(x))", "all x.(LivesWithAtLeastOneRoommate(x) -> -OwnAtLeastOnePet(x))", "all x.(LivesWithAtLeastOneRoommate(x) -> -OwnsAtLeastOnePet(x))", "all x.((Person(x) & LivesWithAtLeastOneRoommate(x)) -> -OwnsAtLeastOnePet(x))", "all x.((LivesWithRoommate(x) & -LivesWithPet(x)) -> -LivesWithPet(x))", "all x.(LivesWith(x,y) -> -Home(z,y))", "all x.((LivesWithAtLeastOneRoommate(x) & -OwnAtLeastOnePet(x)) -> -BelongsToAtLeastOnePet(x))", "all x.((LivesWithAtLeastOneRoommate(x) & -OwnsAtLeastOnePet(x)) -> -LivesWithAtLeastOnePet(x))", "all x.((LivesWithAtLeastOneRoommate(x) & -OwnThanOnePet(x)) -> -OwnAndOwnThatPet(x))", "all x.((LivesWith(x,y) & Roommate(z)) -> -Owns(x,z))", "all x.((Person(x) & LivesWith(x,y) & Roommate(y)) -> -OwnsPet(x,y))", "all x.(LivesWithAtLeastOneRoommate(x) -> -OwnAtLeastOnePet(x))", "all x.((Person(x) & LivesWith(x,y) & Roommate(y)) -> -OwnsPet(x,y))", "all x.(LivesWithAtLeastOneRoommate(x) -> -OwnsAtLeastOnePet(x))"]}
{"id": "folio_train_1154", "nl": "All people who own at least one pet live with at least one roommate.", "fol": "all x.(LivesInApartment(x) -> LivesWithRoommate(x))", "prediction": ["all x.((Person(x) & OwnsPet(x)) -> LivesWithRoommate(x))", "all x.((Person(x) & ExistsAtLeastOnePet(x)) -> LivesWithAtLeastOneRoommate(x))", "all x.(OwnsPet(x) -> (LivesWithRoommate(x)))", "all x.(OwnsAtLeastOnePet(x) -> LivesWithAtLeastOneRoommate(x))", "all x.((OwnsPet(x) & exists y.(Roommate(y) & Roommate(x,y))) -> LivesWith(x,y)))", "all x.((Person(x) & OwnsPet(x)) -> LivesWithModern(x))", "all x y.((Person(x) & Owns(x,y) & Pet(y) & Roommate(x)) -> LivesWith(x,y))", "all x.((Person(x) & OwnsAtLeastOnePet(x)) -> LivesWithAtLeastOneRoommate(x))", "all x.((Person(x) & Own(x,Pet) & Roommate(x)) -> LivesWith(x,Pet,Roommate))", "all x.(OwnsTwoOwnPets(x) -> LivesWithAtLeastOneRoommate(x))", "all x.(OwnsPet(x) -> LivesWithRoommate(x))", "all x.((Person(x) & OwnsPet(x)) -> LivesWith(x))", "all x.((Person(x) & HasPet(x)) -> LivesWithRoommate(x))", "all x.((Person(x) & OwnsCarpet(x)) -> LivesWithRoommate(x))", "all x.((Person(x) & OwnsPet(x)) -> LivesWith(x,y))", "all x.((Person(x) & OwnsAtLeastOnePet(x)) -> LivesWithAtLeastOneRoommate(x))"]}
{"id": "folio_train_1155", "nl": "If Emma does not both own at least one pet and live in apartments in big metropolitan cities, then Emma either owns at least one pet and lives in an apartment in big metropolitan cities, or she neither owns a pet nor lives in an apartment in big metropolitan cities. ", "fol": "(-(OwnsPet(Emma) & LivesInApartment(Emma)) -> ((OwnsPet(Emma) & LivesInApartment(Emma)) | (-OwnsPet(Emma) & -LivesInApartment(Emma))))", "prediction": ["all x.((Emma(x) & -OwnAtLeastOnePet(x) & LiveInApartmentsInBigMetropolitanCities(x)) -> (OwnsAtLeastOnePet(x) & LivesInApartmentInBigMetropolitanCities(x) & -OwnsAtLeastOnePetInMetropolitanCities(x)))", "all x.((Emma(x) & -(OwnsAtLeastOnePet(x) & LivesInApartments(x)) & ((OwnsAtLeastOnePet(x) & LivesInApartment(x)) | (-OwnsAtLeastOnePet(x) & LivesInApartment(x)))))", "all x.((Emma(x) & -(OwnsAtLeastOnePet(x) & LivesApartmentInLargeMetropolitanCities(x)) & (OwnsAtLeastOnePet(x) & LivesInApartmentInLargeMetropolitanCities(x)) | -OwnsPet(x) & LivesInApartmentInLargeMetropolitanCities(x))))", "all x.((Emma(x) & -(OwnsPet(x) & LivesInApartmentsInMetropolitanCities(x)) & -(OwnsPet(x) & LivesInApartmentInMetropolitanCities(x))) | (-OwnsPet(x) | LivesInApartmentInMetropolitanCities(x))))", "all x.((Emma(x) & -OwnsAtLeastOnePet(x) & LivesInApartmentsInBigMetropolitanCities(x)) -> (OwnsAtLeastOnePet(x) & LivesInApartmentInBigMetropolitanCities(x)))", "all x y z.((Emma(x) & Pet(y) & Appartment(z) & -Own-(x,y) & LiveIn(x,z)) & ((OwnsPet(x,y) & LivesIn(x,z) & BigMetropolitanCities(y)) | (-OwnsPet(x,y) & LivesInAppartment(x,y,z)))))", "all x.((Emma(x) & -(OwnsOnePet(x) & LivesInApartments(x)) & InMetropolitanCities(x)) -> (OwnsAtLeastOnePet(x) & LivesInApartment(x)) | -OwnsEquallyOnlyInMetropolitanCities(x))))", "all x.((Emma(x) & -OwnOtherAtLeastOnePet(x) & LiveInAppartementsInLargeMetropolitanCities(x)) -> (OwnsAtLeastOnePet(x) & LivesInAppartmentInLargeMetropolitanCities(x)) | (-OwnsPet(x) & LivesInAppartmentsInLargeMetropolitanCities(x))))", "all x.((Emma(x) & -(Owns(x,1 pet) & LivesInApartments(x,bigMetropolitanCity))) -> (Owns(x,1) & LivesInApartment(x,bigMetropolitanCity)) | -Owns(x,bigMetropolitanCity)))", "all x.((Emma(x) & -OwnsAnimal(x,1) & LivesInApartmentsInBigMetropolitanCities(x)) -> (OwnsAnimal(x,1) & LivesInApartmentInBigMetropolitanCities(x)) | (-OwnsAnimal(x,2) & LivesInApartmentInBigMetropolitanCities(x))))", "all x.((Emma(x) & -(OwnsPet(x) & LivesInApartmentsInMetropolitanCities(x)) & (OwnsPet(x) & LivesInApartmentInMetropolitanCities(x)) | -OwnsPet(x) & LifestylesInApartmentInMetropolitanCities(x))))", "all x.(((Emma(x) & -Owns(x,onePet) & LivesInApartments(x,bigMetropolitanCity)) -> (Owns(x,onePet) & LivesInApartment(x,bigMetropolitanCity)) | (-Owns(x,onePet) & LivesInApartment(x,bigMetropolitanCity)))", "all x.((Emma(x) & -Owns(x,1) & LivesIn(x,Apartment) & BigMetropolitanCities)) -> (Owns(x,1) & LivesIn(x,Apartment)) | (-Owns(x,Pet) & LivesIn(x,Apartment)))))", "all x.((Emma(x) & -OwnsPet(x) & LivesInApartments(x) & LargeMetropolitanCities(x)) -> (OwnsPet(x) & LivesInApartment(x) & -OwnsPet(x) & -LivesInApartment(x)))", "all x.((Emma(x) & -(OwnsPet(x) & LivesInApartments(x) & BigMetropolitanCities(x)) | (-OwnsPet(x) | LivesInApartment(x) & BigMetropolitanCities(x)))))", "all x y z.((Emma(x) & Pet(y) & Apartment(z) & (Owns(x,y) & LivesIn(x,z) & BigMetericCities(x)) | ((Owns(x,y) & Pet(z) & LivesIn(x,y,z)) & BigMetericCities(x)))))"]}
{"id": "folio_train_1156", "nl": "Emma lives with at least one roommate.", "fol": "LivesWithRoommate(Emma)", "prediction": ["all x.(Housemate(x) -> LivesWith(x,y))", "all x y.((Emma(x) & Roommate(y)) -> LivesWith(x,y))", "Emma lives with at least one roommate.", "Emma lives(Emma,Dinner(Emma) -> exists y.(Roommate(y) & LivesWith(Emma,Dinner)))", "atleast one roommate(emma)", "All x.((Emma(x) & Roommate(x)) -> LivesWith(x,y))", "all x.((Emma(x) & Roommate(y)) -> LivesWith(x,y))", "all x.((Emma(x) & Roommate(y)) -> LivesWith(x,y))", "all x.((Emma(x) & Roommate(y)) -> LivesWith(x,y))", "all x.(LivesWith(x,exists y.(Roommate(y) & Roommate(z)) -> exists w.(Roommate(w) & Roommate(z))))", "exists x.(Roommate(x) & livesWith(x,y))", "(exists x.(Roommate(x) & LivesWith(x,y)))", "all x.((Emma(x) & Roommate(x)) -> LivesWith(x,y))", "all x.(Roommate(x) -> exists y.(Ramblemate(y) & LivesWith(x,y)))", "all x.((Emma(x) & Roommate(x)) -> LivesWith(x,y))", "all x.((Emma(x) & Roommate(x)) -> LivesWith(x,y))"]}
{"id": "folio_train_1157", "nl": "Emma enjoys reading about tech specs and keeping up to date on the latest technology.", "fol": "EnjoysTechReading(Emma)", "prediction": ["all x.(Emma(x) -> (EnjoysReadingTechScreens(x) & UpToDateTechnology(x)))", "all x.((Emma(x) & ReadsTechSpecs(x) & KeepsUpToDateOnTechnology(x)) -> Enjoys(x))", "all x.((Emma(x) & EnjoysReadingTechSpecs(x) & StaysUpTodateOnTechnology(x)) -> ReadsAdvices(x))", "(EnjoysReadingTechSpokels(Emma) & KeepsUpToDateOnTechnology(Emma))", "Emma (EnjoysReadingTechSpecs(Emma) & KeepsUpToDateOnTechnology(Emma))", "Emma enjoys reading about tech specs and keeping uptodateontechnology.", "Emma enjoys reading tech specs and keeping uptodate on technology.", "all x.(Emma(x) -> (EnjoysReadingTechStandards(x) & KeepsUpToDateInTechnology(x)))", "all x y.((Emma(x) & TechSpecs(y)) -> (LovesReading(x,y) & LovesKeepingUpToDateOntechnology(x)))", "all x.((Emma(x) & ReadsTechStandards(x) & KeepingUpToDateOnTechnology(x)) -> Enjoys(x))", "all x.(Emma(x) -> (LovesReadingTechStandards(x) & KeepsUpTodateOnTechnology(x)))", "(AppreciateReadingTechScreens(Emma,Technology) & KeepsUpToDateOnTechnology(Emma,Technology))", "all x.(Emma(x) -> (EnjoysReading(x) & KeepingUpTodateOnTechnology(x)))", "all x y.((Emma(x) & TechScreening(x) & Technology(y)) -> EnjoysFor(x,y))", "all x.((Emma(x) & TechSpecs(x)) -> (Enjoys(x) & UpToDateOnTechnology(x)))", "all x.(Emma(x) -> (LovesReadingEngineSpecs(x) & KeepsUpToDateOnTechnology(x)))"]}
{"id": "folio_train_1158", "nl": "If you are on the payroll, then you are being paid by the school.", "fol": "all x.(IsOnPayroll(x) -> IsPaidBySchool(x))", "prediction": ["all x y.((Payroll(x) & School(y)) -> PaidBy(x,y))", "all x.((Payroll(x) & OnPayroll(x)) -> PaidBySchool(x))", "all x!(Payroll(x) -> PaidBySchool(x))", "all x.(InPayroll(x) -> PaidBySchool(x))", "all x.(OnPayroll(x) -> PaidBySchool(x))", "all x.(Payroll(x) -> PaidBySchool(x))", "all x.(Payroll(x) -> PaidBySchool(x))", "all x.((Payroll(x) & OnPayroll(x)) -> PaidBySchool(x))", "all x.(PaidToSchool(x) r.(OnPayroll(x) -> PaidInSchool(r)))", "all x.(Payroll(x) -> PaidBySchool(x))", "all x.((Payroll(x) & On(x)) -> PaidBySchool(x))", "all x.(OnPayroll(x) -> PaidBySchool(x))", "all x.(Payroll(x) -> PaidBySchool(x))", "all x.((Payroll(x) & OnPayroll(x)) -> PaidBySchool(x))", "all x y.((Payroll(x) & School(y)) -> PaidBy(x,y))", "all x.(Payroll(x) -> PaidBySchool(x))"]}
{"id": "folio_train_1159", "nl": "If someone has a job at a school, then they are on the payroll.", "fol": "all x.(HasJobAtSchool(x) -> IsOnPayroll(x))", "prediction": ["all x.((HousesJobAtSchool(x) & OnPayroll(x)) -> HasJobAtSchool(x))", "all x.((JobAtSchool(x) & EmployeeAtSchool(x)) -> OnPayroll(x))", "all x.(IfJobAtSchool(x) -> OnPayroll(x))", "all x y.((Person(x) & School(y) & JobsAt(x,y)) -> Payroll(x,y))", "all x.((JobAtSchool(x) & Has(x,School)) -> OnPayroll(x))", "all x.(HasJobAtSchool(x) -> OnPayroll(x))", "all x.((HasJobAtSchool(x) & HasSkill(x,School)) -> Payroll(x))", "all x y.((HasJob(x) & School(y) & JobAt(x,y)) -> Payroll(x))", "all x.(HasJobAtSchool(x) -> Payroll(x))", "all x.((JobAtSchool(x)) -> OnlinePayroll(x))", "all x y.((CanHaveJobAtSchool(x) & WorkAtSchool(y)) -> OnPayroll(x,y))", "all x.((JobAtSchool(x) & HasLawPayroll(x)) -> OnPayroll(x))", "all x.((JobAtSchool(x) & HasPayroll(x)) -> OnPayroll(x))", "all x.((JobAtSchool(x) & Has(x,y)) -> -OnPayroll(x))", "all x y.((Person(x) & School(y) & HasJob(x,y)) -> OnPayroll(x))", "all x y.((Job(x) & School(y) & Has(x,y)) -> OnPayroll(x))"]}
{"id": "folio_train_1160", "nl": "All faculty members have a job at a school.", "fol": "all x.(IsFacultyMember(x) -> HasJobAtSchool(x))", "prediction": ["all x.(FacultyMember(x) -> HasJobAtSchool(x))", "all x.(FacultyMember(x) -> HasJobAtSchool(x))", "all x.(Faculty(x) -> HasJobAtSchool(x))", "all x y.((FacultyMember(x) & Education(y)) -> HasJobAt(x,y))", "all x.(FacultyMember(x) -> JobsAtSchool(x))", "exists x y.(Faculty(x) & School(y) & HasJob(x,y))", "all x y.((FacultyMember(x) & School(y)) -> HasJob(x,y))", "all x.(Faculty(x) -> exists y.(School(y) & HasJob(x,y))))", "all x.(FacultyColleague(x) -> HasJobAtSchool(x))", "all x.(FacultyMember(x) -> HasJobAtSchool(x))", "all x.(FacultyMember(x) -> exists y.(School(y) & HasJob(x,y))))", "all x.(FacultyMember(x) -> HasJobAtSchool(x))", "all x y z.((FacultyMember(x) & School(y) & Job(z)) -> HasJobAt(x,y,z))", "all x.(FacultyMember(x) -> exists y.(School(y) & HasJobAt(x,y)))", "all x y.((FacultyMember(x) & School(y)) -> HasJob(x,y))", "all x y.((FacultyMember(x) & School(y)) -> HasJob(x,y))"]}
{"id": "folio_train_1161", "nl": "One can either be a faculty member or a teacher.", "fol": "all x.(IsFacultyMember(x) | IsTeacher(x))", "prediction": ["all x.(Professor(x) | Teacher(x))", "all x.(FacultyMember(x) | Teacher(x))", "all x.(FacultyMember(x) | Teacher(x))", "all x.(FacultyMember(x) | Teacher(x))", "all x.(Faculty(x) | Teacher(x))", "all x.(FacultyMember(x) | Teacher(x))", "all x.(FacultyMember(x) | Teacher(x))", "all x.(FacultyMember(x) | Teacher(x))", "all x.(FacultyMember(x) | Teacher(x))", "all x.(FacultyMember(x) | Teacher(x))", "all x.((FacultyMember(x) | Teacher(x)) -> WorksFor(x,Faculty),FacultyMember))", "all x.(FacultyMember(x) | Teacher(x))", "all x.(FacultyMember(x) | Teacher(x))", "all x.(Forum(x) | Teacher(x))", "all x.(FacultyMember(x) | Teacher(x))", "all x.(FacultyMember(x) | Teacher(x))"]}
{"id": "folio_train_1162", "nl": "Every teacher has students.", "fol": "all x.(IsTeacher(x) -> TeachesStudents(x))", "prediction": ["all x.(Teacher(x) -> HasStudents(x))", "all x.(Teacher(x) -> HasStudents(x))", "all x.exists y.(Teacher(x) & Student(y) & Has(x,y))", "all x.exists y.(Teacher(x) & Student(y) & Has(x,y))", "all x.exists y.(Teacher(x) & Student(y) & Has(x,y))", "all x.(Teacher(x) -> HasStudents(x))", "all x.(Teacher(x) -> HasStudents(x))", "all x.(Teacher(x) -> HasStudents(x))", "all x.(Teacher(x) -> HasStudents(x))", "all x.exists y.(Teacher(x) & Student(y) & Has(x,y))", "all x.(Teacher(x) -> HasStudents(x))", "all x.exists y.(Teacher(x) & Student(y) & Teacher(x,y))", "all x.exists y.(Teacher(x) & Student(y) & Has(x,y))", "all x.exists y.(Teacher(x) & Student(y))", "all x.(Teacher(x) -> HasStudents(x))", "all x.exists y.(Teacher(x) & Student(y) & Has(x,y))"]}
{"id": "folio_train_1163", "nl": "If Nancy is a teacher, then they are on the payroll.", "fol": "(IsTeacher(Nancy) -> IsOnPayroll(Nancy))", "prediction": ["all x.(Teacher(x) -> OnPayroll(x))", "all x.(Teacher(x) -> OnPayroll(x))", "all x.((Nancy(x) & Teacher(x)) -> OnPayroll(x))", "all x.((Nancy(x) & Teacher(x)) -> Payroll(x))", "all x.(Teacher(x) -> OnPayroll(x))", "all x.(Teacher(x) -> OnPayroll(x))", "all x.(Teacher(x) -> OnPayroll(x))", "all x.((Nancy(x) & Teacher(x)) -> OnPayroll(x))", "all x.((Nancy(x) & Teacher(x)) -> OnPayroll(x))", "all x.(Teacher(x) -> Payroll(x))", "all x.((Nancy(x) & Teacher(x)) -> OnPayroll(x))", "all x.((Nancy(x) & Teacher(x)) -> OnPallot(x))", "all x.((Nancy(x) & Teacher(x)) -> OnPayroll(x))", "all x.((Teacher(x) & Nancy(x)) -> OnPayroll(x))", "all x.((Nancy(x) & Teacher(x)) -> OnPayroll(x))", "all x.(Teacher(x) -> IsOnPayroll(x))"]}
{"id": "folio_train_1164", "nl": "If Nancy is not a teacher, then they are not paid by the school.", "fol": "(-IsTeacher(Nancy) -> -IsOnPayroll(Nancy))", "prediction": ["all x.((Nancy(x) & -Teacher(x)) -> -PaidBySchool(x,y))", "all x.((Nancy(x) & -Teacher(x)) -> -PayedBySchool(x))", "all x.(NotTeacher(x) -> -PensedBySchool(x))", "all x.((Nancy(x) & -Teacher(x)) -> -PayedBySchool(x))", "all x.((Nancy(x) & -Teacher(x)) -> -PayedBySchool(x))", "all x.((Nancy(x) & -Teacher(x)) -> -PayedBySchool(x))", "all x.((Nancy(x) & -Teacher(x)) -> -PayedBySchool(x))", "all x.((Nancy(x) & -Teacher(x)) -> -PayedBySchool(x))", "all x.((Nancy(x) & -Teacher(x)) -> -PayedBySchool(x))", "all x.((Nancy(x) & -Teacher(x)) -> -PaidBySchool(x))", "all x.(-Teacher(x) -> (-PayedBySchool(x)))", "all x.((Nancy(x) & -Teacher(x)) -> -Salary(x,school))", "all x.((Nancy(x) & -Teacher(x)) -> -paidBySchool(x))", "(all x.(NotTeacher(x) -> -PayedBySchool(x)))", "all x.((Nancy(x) & -Teacher(x)) -> -PayedBySchool(x))", "all x.((Nancy(x) & -Teacher(x)) -> -PayedBySchool(x))"]}
{"id": "folio_train_1165", "nl": "Nancy is a faculty member.", "fol": "IsFacultyMember(Nancy)", "prediction": ["all x.(Faculty(x) -> NancyHasThemePerfect(x))", "all x.(FacultyMember(x) -> NancySmokin(x))", "all x.((Nancy(x) & FacultyMember(x)) -> Contact(x,n))", "all x.(FacultyMember(x) -> Nancy(x))", "all x.((Nancy(x) & Faculty(x)) -> CertifiedDean(x))", "Nancy is FacultyMember( Nancy,ex)", "all x.(Phone(x) -> FacultyMember(x))", "(FacultyMember(Nancy)", "all x.(Phone(x) -> FacultyMember(x))", "Nancy is FacultyMember(Nancy)", "all x.(FacultyMember(x) -> Nancy(x))", "all x.(Faculty(x) & Nancy(x))", "all x.(Nancy(x) -> FacultyMember(x))", "(FacultyMember(Nancy)", "all x.(FacultyMember(x) -> Nancy(x))", "all x.(Chair(nasc) -> FacultyFriend(nasc))"]}
{"id": "folio_train_1166", "nl": "Nancy is paid by the school and has students.", "fol": "(IsPaidBySchool(Nancy) & TeachesStudents(Nancy))", "prediction": ["all x.(Nancy(x) -> (PayedBySchool(x) & HasStudents(x)))", "all x.(Nancy(x) -> (PayedBySchool(x) & HasStudents(x)))", "all x y.((Nancy(x) & School(y)) -> (pay for(x,y) & HasStudents(x,y)))", "(PayedBySchool(Nancy) & HasStudents(Nancy))", "all x.(Nancy(x) -> (PayedBySchool(x) & HasStudents(x)))", "all x y.((Phone(x) & School(y)) -> (Payed(x,y) & HasStudents(x)))", "all x y.((Nancy(x) & School(y)) -> (PayedBy(x,y) & HasStudents(x)))", "all x.(Nancy(x) -> (PayedBySchool(x) & HasStudents(x)))", "(PaysBy(Nancy,Children) & HasStudents(Nancy,Parents))", "(PaidBySchool(Nancy) & HasStudents(Nancy))", "all x y.((Nancy(x) & School(y)) -> (PayedBy(x,y) & HasStudents(x)))", "all x.(Nancy(x) -> (PayedBySchool(x) & HasStudents(x)))", "all x y.((Nancy(x) & School(y) & PaidBy(x,y)) -> HasStudents(x))", "exists x.(Nancy(x) & PaidBySchool(x) & HASStudents(x))", "(PayedBySchool(Nancy) & HasStudents(Nancy))", "all x y.((Nancy(x) & School(y)) -> PaidBy(x,y))"]}
{"id": "folio_train_1167", "nl": "Nancy is not paid by the school and has students.", "fol": "(-IsOnPayroll(Nancy) & TeachesStudents(Nancy))", "prediction": ["all x.((Nancy(x) & -PAYEDBYSchool(x) & HasStudents(x)) -> PaidBy(x,Nancy))", "(-PayedBySchool(Nancy,Scientists) -> Appoints(Nancy)))", "(-PaidBySchool(Nancy) & HasStudents(Nancy))", "all x.(Nancy(x) -> (-PayedBySchool(x) & HasStudents(x)))", "Nancy is not paidbySchool(Nancy) & HasStudents(Nancy))", "(-(PayedBySchool(Nancy)) -> HasStudents(Nancy)))", "(-PayedBySchool(Nancy) & HasStudents(Nancy))", "(PaidBySchool(Nancy) & HasStudents(Nancy))", "all x y.((Nancy(x) & School(y)) -> (-PayedBy(x,y) & HasStudents(x,y)))", "all x.((Nancy(x) & -PaidBySchool(x)) -> HasStudents(x))", "(-PaidBySchool(Nancy) & HasStudents(Nancy))", "all x.(Nancy(x) -> (-PayedBySchool(x) & HasStudents(x)))", "(-PayedBySchool(nancy) & HasStudents(nancy))", "all x.(Nancy(x) -> (-PaidBySchool(x) & HasStudents(x)))", "-PayedBySchool(Nancy) & HasStudents(Nancy))", "(-paidBySchool(Nancy) & HasStudents(Nancy))"]}
{"id": "folio_train_1168", "nl": "Kangaroo is an animal.", "fol": "all x.(IsKangaroo(x) -> IsAnimal(x))", "prediction": ["all x.(Kangaroo(x) -> Animal(x))", "all x.(Kangaroo(x) -> Animal(x))", "exists x.(Kangoroo(x) & Animal(x))", "all x.(Kangaroo(x) -> Animal(x))", "all x.(Kangoroo(x) -> Animal(x))", "all x.(Kangoroo(x) -> Animal(x))", "all x.(Kangaroo(x) -> Animal(x))", "(Animal(kangaroo) & Animal(kangaroo))", "(Animal(Kanguo) & Animal(Kanguo))", "all x.(Kangouroo(x) -> Animal(x))", "all x.(Kanguros(x) -> Animal(x))", "all x.(Kangaroo(x) -> Animal(x))", "all x.(Kangoroo(x) -> Animal(x))", "all x.(Kanguo(x) -> Animal(x))", "all x.(Kangaroo(x) -> Animal(x))", "all x.(Kangaroo(x) -> Animal(x))"]}
{"id": "folio_train_1169", "nl": "No Kangaroos live in Germany.", "fol": "all x.(IsKangaroo(x) -> -LivesIn(x,Germany))", "prediction": ["-exists x.(Kangoroo(x) & LivesIn(x,Deutschland))", "-exists x.(Kangaroo(x) & LivesIn(x,Germany))", "-exists x.(Kangaroo(x) & LivesIn(x,Germany))", "-exists x.(Kangoroo(x) & LivesIn(x,Germany))", "-exists x.(Kangaroo(x) & LivesIn(x,Deutschland))", "-exists x.(Kangaroo(x) & LivesInGermany(x))", "-exists x.(Kangaroo(x) & LivesIn(x))", "-exists x,y,z.(Kangaroo(x) & Lives(x,z))", "Riggaboos(n)", "-exists x.(Kangoroo(x) & LivesIn(x,Germany))", "-exists x.(Kangaroo(x) & LivesInGermany(x))", "\u2013exists x.(Kangaroo(x) & LivesIn(x,Germany))", "-exists x.(Kangaroo(x) & Live(x,Germany))", "-exists x.(Kangaroo(x) & LivesIn(x,Deutschland))", "-exists x.(Kangoroo(x) & LivesIn(x,Germany))", "-exists x.(Kangaroo(x) & LivesIn(x,Germany))"]}
{"id": "folio_train_1170", "nl": "If Jane saves enough money for the summer, she will fly to Germany.", "fol": "(HasEnoughMoney(Jane) -> FliesTo(Jane,Germany))", "prediction": ["all x.((SavesEnoughMoney(x) & Summer(x)) -> FlyToGermany(x))", "all x.((Jane(x) & SavesEnoughMoneyForSoul(x)) -> FlyToGermany(x))", "all x.(SavesEnoughMoneyForSummer(x) -> FlyToGermany(x))", "all x.((SavesEnoughForSummer(x) & Jane(x)) -> AirsToGermany(x))", "(SavesEnoughMoney(Jane,summer) -> FlyToGermany(Jane,summer))", "all x y.((Jane(x) & -EnoughMoney(y)) -> -FlyToGermany(x))", "all x.((Jane(x) & SavesEnoughMoney(x)) -> FliesToGermany(x))", "all x.((Jane(x) & SavesEnoughMoneyToSummer(x)) -> WillFlyToGermany(x))", "all x.(SavesReducedMoney(x) -> FlyToGermany(x))", "all x.(SavesEnoughMoneyForSummer(x) -> FlyToGermany(x))", "all x.((Jane(x) & SavesEnoughFundsForSummer(x)) -> FliesToGermany(x))", "all x y.((Jane(x) & Summer(y) & SavesEnoughMoney(x,y)) -> FlyTo(x,Germany))", "all x.((Jane(x) & SavesEnoughMoney(x)) -> FlyToGermany(x))", "all x.((SavesEnoughMoney(x) & Summer(x)) -> FlyToGermany(x))", "all x.((JaneSavesEnoughMoney(x) & ForSummer(x)) -> FareOutToGermany(x))", "all x.((SavingsEnoughMoney(x) & JaneFly(x)) -> FlyToGermany(x))"]}
{"id": "folio_train_1171", "nl": "If Jane flies to Germany, she will go to the Berlin Zoo.", "fol": "(FliesTo(Jane,Germany) -> Visits(Jane,Berlinzoo))", "prediction": ["all x.((FliesToGermany(x) & GoToBerlinZoo(x)) -> JaneBobbsToZoo(x))", "all x.((FliesToGermany(x) & GoesToBerlinZoo(x)) -> Zoo(x))", "all x.(FliesToGermany(x) -> GoesToBerlinZoo(x))", "all x.((FlyToGermany(x) & JaneFliesTo(x,Germany)) -> VisitsBerlinZoo(x))", "all x.((FliesTo(x,Deutschland) & GoesTo(x,BerlinZoo)) -> FliesTo(x,Deutschland))", "all x y.((Fly(x) & JaneBerlin(y)) -> GoesToZoo(y))", "all x y.((Fly(x) & UK(y)) -> GoesToBerlinZoo(x,y))", "all x.((FliesToGermany(x) & GoesToBerlinZoo(x)) -> GetsFlightToZoo(x))", "all x.(FlyToGermany(x) -> (GoToBerlinZoo(x)))", "all x.(FliesToGermany(x) -> GoesToBerlinZoo(x))", "all x.((FliesToGermany(x) & GoesToZoo(y)) -> GoesTo(y))", "all x.((FlysTo(x,Deutschland) & GoesToBerlinZoo(x)) -> FliesTo(x,Deutschland))", "all x.((Jane(x) & FliesToGermany(x)) -> GoesToBerlinZoo(x))", "all x.(FliesTo(x,Germany) -> GoesTo(x,BerlinZoo))", "all x.((Jane(x) & -FliesToGermany(x,Germany)) -> GoesToBerlinZoo(x))", "all x.((Rainner(x) & FliesToGermany(x)) -> GoesToBerlinZoo(x))"]}
{"id": "folio_train_1172", "nl": "If someone goes to the Berlin Zoo and see animals there, they live in Germany.", "fol": "all x y.((Visits(x,Berlinzoo) & IsAnimal(y) & Sees(x,y)) -> LivesIn(y,Germany))", "prediction": ["all x y.((Person(x) & Zoo(y) & GoesTo(x,y) & SeesAnimals(x)) -> LivesInGermany(x))", "all x.(GoesToBerlinZoo(x) -> LivesInDeutschland(x))", "all x.((GoesToBerlinZoo(x) & SeesAnimalsThere(x)) -> LivesInGermany(x))", "all x y z.((Gift(x) & Zoo(y) & Animal(z) & GoesTo(x,z) & Sees(x,z)) -> LivesIn(x,Germany))", "all x y.((GoesToBerlinZoo(x) & Animals(y) & Sees(x,y)) -> LivesInGermany(x))", "all x y.((GivenToBerlinZoo(x) & Animals(y) & Views(x,y)) -> LivesInGermany(x))", "all x.((GoesToZoo(x) & SeesAnimalsInZoo(x)) -> LivesInGermany(x))", "all x y.((GoesToBerlinZoo(x) & Animals(y) & SeesAt(x,y)) -> LivesInGermany(x))", "all x.((GoesTo(x,berlinZoo) & SeesAnimals(x,berlin)) -> LivesInGermany(x))", "all x y.((GoesTo(x,y) & BerlinZoo(y) & SeesAnimals(x,y)) -> LivesInGermany(x))", "all x y.((GoesToBerlinZoo(x) & Animals(y) & ViewsInBerlinZoo(x,y)) -> LivesInGermany(x))", "all x y!((BerlinZoo(x) & Person(y) & GoesTo(y,x) & SeesAnimals(y)) -> LivesInGermany(y))", "all x y.((GoesToBerlinZoo(x) & OccursAndSpectaclesAnimals(y)) -> LivesInGermany(x,y))", "all x y.((Member(x) & BerlinZoo(y) & SeenAnimals(x,y)) -> LivesInGermany(x))", "all x.((GoesToBerlinZoo(x) & SeesAnimals(x)) -> LivesInGermany(x))", "all x y z.((GoesToBerlinZoo(x) & Animal(y) & Sees(x,y)) -> LivesInGermany(z))"]}
{"id": "folio_train_1173", "nl": "Jane saved enough money.", "fol": "HasEnoughMoney(Jane)", "prediction": ["Jane saved enoughmoney.", "Jill saved enough money.", "Jane saved enough money.", "Jane saved enough money.", "Jane saved enough money.", "Jane saved enough money.", "Jane saved enough money.", "Jane saved enough money.", "Jane saved enough money for her.", "Jane saved enoughmoney.", "Jane saved enough money.", "(Saving(Jane) -> SavesEnoughMoney(Jane))", "all x.(Saved(x,Y) -> SavedMoney(x,Y))", "Jane savorsEnoughMoney(Jane,Y)", "(Saved(Jane) & EnoughMoneySaved(Jane))", "Jane saved enough money to survive."]}
{"id": "folio_train_1174", "nl": "Jane will see a kangaroo in the summer.", "fol": "exists y.(IsKangaroo(y) & Sees(Jane,y))", "prediction": ["all x.((Jane(x) & Kangaroo(y)) -> SeesInSummer(x,y))", "all x y.((Jane(x) & Kangaroo(y)) -> Vision(x,y))", "(SeesCangaroo(Jane,Summer))", "all x.((Jane(x) & Kangaroo(y)) -> WillSeeInSummer(x,y))", "(SeesKangaroo(Jane) -> DuringSummer(Jane))", "all x.((Jane(y) & Kangaroo(z)) -> SeesInSummer(y,z))", "all x.((Jane(x) & Kangaroo(y)) -> SeesInSummer(x,y))", "all x.((Jane(x) & Kangaroo(y)) -> Spots(x,y))", "(Year(Jane) & Kangaroo(Jane))", "all x.(SeesKangoroo(x) -> Jane(x))", "all x.(HasKangaroo(x) -> InSummer(x))", "all x.((Jane(x) & Kangaroo(y)) -> Seeing(x,y))", "all x.((Jane(x) & Kangaroo(x)) -> Sees(x,y))", "all x.((Jane(x) & Kangaroo(y)) -> SeesInSummer(x,y))", "all x.((Jane(x) & Kangaroo(x)) -> Sees(x,summer))", "all x.(Kangaroo(x) -> Jane(x))"]}
{"id": "folio_train_1175", "nl": "If a class has prerequisites the student must take the prerequisites to take the class.", "fol": "all y.(all x.(HasPrerequisite(x,y) -> CourseTaken(x)) -> EligibleToTake(y))", "prediction": ["all x.((Class(x) & HasPrerequisites(x)) -> MustTakePrerequisites(x))", "all x.((Class(x) & HasPrerequisites(x)) -> MustTakePrerequisites(x))", "all x.((Class(x) & HasPrerequisites(x)) -> MustTakePrerequisites(x))", "all x y.((Class(x) & Prerequisites(x) & Student(y)) -> MustTake(y,x))", "all x.(HasPrerequisites(x) -> TakesClass(x))", "all x y.((Class(x) & Prerequisite(y)) -> MustTake(x,y))", "all x y.((Class(x) & Prerequisite(y)) -> MustTake(x,y))", "all x y.((Class(x) & Prerequisites(y) & MustTake(x,y)) -> Takes(x,y))", "all x y.((Class(x) & Prerequisites(y)) -> MustTake(x,y))", "all x.((Class(x) & Prerequisites(x)) -> MustTake(x,Purposes))", "all x y.((Class(x) & Prerequisites(y)) -> MustTake(x,y))", "all x.(Prerequisite(x) -> Take(x,y))", "all x.((Description(x) & Prerequisites(x)) -> MustTake(x,prerequisites))", "all x.exists y.((Class(x) & Prerequisites(y) & Takes(y,x)) -> Student(x,y))", "all x y.((Class(x) & Prerequisites(x) & Student(y)) -> MustTake(y,x))", "all x y z.((Class(x) & Prerequisites(y) & Student(z) & Has(x,y)) -> MustTake(z,x))"]}
{"id": "folio_train_1176", "nl": "If a class has no prerequisites, then the student can take the class", "fol": "all y.(-exists x.HasPrerequisite(x,y) -> EligibleToTake(y))", "prediction": ["all x.((Class(x) & NoPrerequisites(x)) -> CanvasStudent(x))", "all x.((Class(x) & -Prerequisites(x)) -> StudentCanTakeClass(x))", "all x.((Class(x) & NoPrerequisites(x)) -> CanTakeClass(x,Class))", "all x.((Class(x) & NoPrerequisites(x)) -> StudentCanTakeClass(x,y))", "all x y.((Graduate(x) & NoPrerequisites(x) & Student(y)) -> CanTakeClass(y,x))", "all x.(NoPrerequisites(x) -> CanFollowClass(x))", "all x y.((Class(x) & NoPrerequisites(x) & Student(y)) -> CanTakeClass(y,x))", "all x.(((Class(x) & -Prerequisites(x)) -> StudentChancesTakeClass(x))", "all x.((Class(x) & NoPrerequisites(x)) -> CanTake(x,class,class))", "all x.((Class(x) & -PrerequisitesConference(x)) -> CanTakeClass(x,3))", "all x.((Class(x) & NoPrerequisites(x)) -> StudentCanTakeClass(x))", "all x.((Class(x) & -Prerequisites(x)) -> StudentCanTakeClass(x))", "all x.((Class(x) & NoPrerequisites(x)) -> CanTake(x,y))", "all x y.((Scientist(x) & Class(y) & -Prerequisites(y,x)) -> CanTake(x,y))", "all x.((Class(x) & -Prerequisites(x)) -> StudentCanTakeClass(x,y))", "all x y.((Class(x) & NoPrerequisites(x)) -> CanTake(y,x))"]}
{"id": "folio_train_1177", "nl": "CPSC 201 and CPSC 223 are both prerequisites for CPSC 323.", "fol": "(HasPrerequisite(Cpsc201,Cpsc323) & HasPrerequisite(Cpsc223,Cpsc323))", "prediction": ["(All x.(CPSC201(x) & All x.(CPSC223(x)) -> Prerequisite(x)))", "(Prerequisite(CPSC201,CPSC223) & Prerequisite(CPSC202,CPSC223))", "(Prerequisites(CPSC201) & Prerequisites(CPSC223))", "(Prerequisites(CPSC201) & Prerequisites(CPSC223)) & Prerequisites(CPSC323).", "all x y z.((CPSC(x) & CPSC(y) & CPSC(z)) -> (ConsequentFor(x,y,z) & RequirementsFor(x,y,z)))", "(Prerequisites(CPSC201) & Prerequisites(CPSC23))", "(Prerequisite(CPSC201) & Prerequisite(CPSC223)))", "(Prerequisites(CPSC) 201 & Prerequisites(CPSC) 223)) ----(CPSC 323(CPSC) & CPSC))", "(Prerequisite(CPSC201) & Prerequisite(CPSC23)) -> CPSC323.", "(Prerequisites(CPSC201) & Prerequisites(CPSC223))", "all x.((CPSC201(x) | CPSC223(x)) -> Prerequisite(x))", "(Prerequisite(CPSC) 201, CPSC223) & Prerequisite(CPSC) 323))", "(Prerequisites(CPSC201) | Prerequisites(CPSC223)) -> CompaniesCPSC323.", "(Prerequisites(CPSC201) & Prerequisites(CPSC223)) -> CPSC323)", "(Prerequires(CPSC201) & Prerequisites(CPSC23)) CPSC323 & Prerequisites(CPSC323))", "(Prerequisite(CPSC201) & Prerequisite(CPSC223)): CPSC323. (CPSC323.9) | CPSC323.3)))"]}
{"id": "folio_train_1178", "nl": "Intro Microeconomics is the only prerequisite for Intermediate Microeconomics.", "fol": "((HasPrerequisite(Intromicro,Intermediatemicro) & CourseTaken(Intromicro)) -> EligibleToTake(Intermediatemicro))", "prediction": ["-IntermediateMicroeconomics(IntermediateMicroeconomics)", "All x.(InternalMicroeconomics(x) -> Prerequisite(x,IntroMicroeconomics))", "All x.(IntroMicroeconomics(x) -> IntermediateMicroeconomics(x))", "(Prerequisite(Intramicroeconomics) & IntermediateMicroeconomics(IntermediateMicroeconomics))", "(All x y.(IntroMicroeconomics(x) -> IntermediateMicroeconomics(y)))", "all x.(IntroMicroeconomics(x) -> Prerequisite(x))", "all x.(IntermediateMicroeconomics(x) -> PrerequisiteForIntermediateMicroeconomics(x))", "all x.(IntroMicroeconomics(x) -> IntermediateMicroeconomics(x))", "all x y.((Intermediate(x) & Intro(y)) -> Prerequisite(y,x))", "all x.(IntermediateMicroeconomics(x) -> Prerequisite(x,y))", "all x.(IntermediateMicroeconomics(x) -> Prerequisite(x,y))", "all x.(IntroMicroeconomics(x) -> IntermediateMicroeconomics(x))", "all x.(IntraMicroeconomics(x) -> IntermediateMicroeconomics(x))", "all x.(IntroMicroeconomics(x) -> IntermediateMicroeconomics(x))", "all x.(IntermediateMicroeconomics(x) -> Prerequisite(x,infrastructure(x))", "all x.(IntroMicroeconomics(x) -> IntermediateMicroeconomics(x))"]}
{"id": "folio_train_1179", "nl": "Intro Geology has no prerequisites.", "fol": "all x.-HasPrerequisite(x,Introgeology)", "prediction": ["all x.(IntraGeology(x) -> -HasPrerequisites(x))", "-exists x.(IntroGeology(x) & RequiresPrerequisite(x))", "all x.(IntroGeology(x) -> -Prerequisites(x))", "all x.(IntroGeology(x) -> -Requirements(x))", "all x.(IntraOcean(x) -> -Prerequisites(x))", "all x.(IntraOrgaeo(x) -> -Prerequisites(x))", "-PrerequisitesIn IntroGeology(introgeology)", "all x.(IntraGeology(x) -> -Prerequisites(x))", "all x.(IntraOxygen(x) -> NoPrerequisites(x))", "all x.(IntroGeology(x) -> NoPrerequisites(x))", "all x.(IntroGeology(x) -> -PrerequisitesForVenues(x))", "all x.(introgeology(x) -> -Prerequisites(x))", "all x.(IntroGeology(x) -> -Prerequisites(x))", "All x.(IntraHorizonology(x) -> -HasPrerequisites(x))", "all x.(IntroGeology(x) -> -Prerequisites(x))", "all x.(IntroGeology(x) -> -Prerequisites(x))"]}
{"id": "folio_train_1180", "nl": "CPSC 201 has no prerequisites.", "fol": "-exists x.HasPrerequisite(x,Cpsc201)", "prediction": ["all x.(CSPCSC) -> NoPrerequisites(x))", "CPSC201 has NoPrerequisites(CPSC201)", "the prerequisites for admission to CPSC201 are not met.", "noPrerequisites(CPSC201)", "all x.(CCPSC201(x) -> NoPrerequisites(x))", "CPSC201, -Prerequisites.", "all x.(CPSC201(x) -> There's NOBConditions(x))", "(noPrerequisites(CPSC201,1))", "CPSC201 has no prerequisites.", "-Prerequisites(CPSC201)", "(-Prerequisites(CPSC201))", "all x.(CPSC201(x) -> -HasPrerequisites(x))", "All x y z.((CPSC(x) & 201(y) & Prerequisite(z)) -> -HasPrerequisite(x,y,z))", "CPSC201 has NoPrerequisites(CPSC201)", "all x.(CPSC201(x) -> -HasPrerequisites(x))", "all x.(CPSC201(x) -> NoRequirements(x))"]}
{"id": "folio_train_1181", "nl": "If a student took CPSC 201 but did not take CPSC 223, they can take CPSC 323.", "fol": "((CourseTaken(Cpsc201) & -CourseTaken(Cpsc223)) -> EligibleToTake(Cpsc323))", "prediction": ["all x.((Student(x) & TakenCPSC201(x) & -TakenCPSC223)) -> CanTakeCPSC323.", "all x.((Student(x) & TakedCPSC201(x) & -TakedCPSC223)) -> TakesCPSC323.", "all x.((Student(x) & TakedCPSC201(x) & -TakedCPSC223)) -> CanTakeCPSC323.", "all x.((Student(x) & TakenCPSC201(x) & -TakenCPSC223/x)) -> CanTakeCPSC323/x.().)", "all x.((Student(x) & TakedCPSC201(x) & -TakedCPSC223)) -> CanTakeCPSC323.", "all x.((Student(x) & TakedCPSC201(x) & -TakedCPSC223)) -> CanTakeCPSC323.(x))", "all x.((Student(x) & TakedCPSC201(x) & -TakedCPSC223(x)) -> CanTakeCPSC323.(x))", "all x y.((Student(x) & GraphICSCSavvy(y) & TakenCPSC201(x,y) & -TakenCPSC223(x)) -> CanTakeCPSC323.", "all x.((Student(x) & TakedCPSC201(x) & -TakedCPSC223)) -> CanTakeCPSC323.", "all x.((Student(x) & CPSC201(x) & -CPSC223)) -> CanTakeCPSC323.", "all x.((Student(x) & TakenCPSC201(x) & -TakenCPSC223)) -> CanTakeCPSC323(x))", "all x.((Student(x) & TakenCPSC201(x) & -TakenCPSC223)) -> CanTakeCPSC323.", "all x.((Student(x) & TakesCPSC201(x) & -TakesCPSC223/1)) -> CanTakeCPSC323/2)", "all x.((Student(x) & TakenCPSC201(x) & -TakenCPSC223)) -> CanTakeCPSC323.", "all x.((Student(x) & TakedCPSC201(x) & -TakedCPSC223)) -> CanTakeCPSC323(x))", "all x.((Student(x) & TakedCPSC201(x) & -TakedCPSC223)) -> CanTakeCPSC323."]}
{"id": "folio_train_1182", "nl": "A student cannot take Intro Geology.", "fol": "-EligibleToTake(Introgeology)", "prediction": ["-TakesIntroGeology(Student,Education)", "all x.(Student(x) -> -IntroGeology(x))", "all x.(Student(x) -> -TakesIntroGeology(x))", "all x.(Student(x) -> -TakesIntroGeology(x))", "all x.(Student(x) -> -TakesIntroGeology(x))", "all x.(Student(x) -> -TakesIntroGeology(x))", "all x.(Student(x) -> -TakesIntroGeology(x))", "all x.(Student(x) -> -IntroGeology(x))", "all x.(Student(x) -> -IntroGeology(x))", "all x.(Student(x) -> -TakesIntroGeology(x))", "all x.(Student(x) -> -TakesIntroGeology(x))", "all x.(Student(x) -> -CanTakeIntroGeology(x))", "all x.(Student(x) -> -TakesIntroGeology(x))", "all x.(Student(x) -> -RequiresIntroGeology(x))", "all x.(Student(x) -> -TakesIntroGeology(x))", "all x.(Student(x) -> -TakesIntroGeology(x))"]}
{"id": "folio_train_1183", "nl": "A heptalogy, is a compound literary or narrative work that is made up of seven distinct works.", "fol": "all x.(ConsistsOfSevenDistinctWorks(x) -> IsHeptalogy(x))", "prediction": ["all x.(Heptalogy(x) -> (CompoundLocalOrNarrativeWork(x) & MadeUpOfSevenDistinctWorks(x)))", "all x.(Heptalogy(x) -> (CompoundLegalOrNarrativeWork(x) & MadeUpOfSevenDistinctWorks(x)))", "all x.(Heptalogy(x) -> (CompoundLiteraryOrNarrativeWork(x) & MakesSevenDistinctWorks(x)))", "all x.(Heptalogy(x) -> (CompoundLinguisticOrNarrativeWork(x) & SevenDistinctWorks(x)))", "all x.(Heptalogy(x) -> (CompoundLiteraryOrNarrativeWorks(x) & MadeUpOfSevenDistinctWorks(x)))", "all x.(Heptalogy(x) -> (CompoundLiteraryOrNarrativeWork(x) & NumberOfWorks(x,seven)))", "all x.(Hospital(x) -> (CompoundLiteraryOrNarrativeWork(x) & SevenDistinctWorks(x)))", "all x.(Heptalogy(x) -> (CompoundLiteraryOrNarrativeWork(x) & IncludesSevenDistinctWorks(x)))", "all x.(Heptalogy(x) -> (CompoundLocalOrNarrativeWork(x) & MakesUpSevenDistinctWorks(x)))", "all x.(Heptalogy(x) -> (CompoundLiteraryOrNarrativeWork(x) & MadeUpOfSevenDistinctWorks(x)))", "all x.(Hoptalogy(x) -> (CompoundLocalOrNarrativeWork(x) & ContainsSevenDistinctWorks(x)))", "all x y z.((Heptalogy(x) & CompoundLiteraryOrNarrativeWork(y) & Work(z)) -> (ContainsSevenDistinctWorks(x,z) & MakesUpDistinctWorks(x)))", "all x.(Heptalogy(x) -> (CompoundLiteraryOrNarrativeWork(x) & HasSevenDistinctWorks(x)))", "all x.(Heptalogy(x) -> (CompoundLiteraryOrNarrativeWork(x) & MadeUpOfSevenDistinctWorks(x)))", "all x.(Heptalogy(x) -> (CompoundLiteraryOrNarrativeWork(x) & SevenDistinctWorks(x)))", "all x y z.((Heptalogy(x) & CompoundLiteraryOrNarrativeWork(y) & Compound(z)) -> ContainsSevenDistinctWorks(x))"]}
{"id": "folio_train_1184", "nl": "The Harry Potter series consists of 7 distinct works.", "fol": "ConsistsOfSevenDistinctWorks(HarryPotter)", "prediction": ["(SevenWorks(HarryPotter) & Work(HarryPotter))", "exists x.(HarryPotterSeries(x) & HasSevenDistinctWorks(x))", "all x.(Harry Potter(x) -> SevenDistinctWorks(x))", "all x y.((HarryPotterSeries(x) & SevenDistinctWorks(y)) -> Completes(x,y))", "all x.(HarryPotter(x) -> ConsistsOfTwoDistinctWorks(x))", "all x.(HarryPotterResort(x) -> ConsistsOf7(x))", "all x.(HarryPotter(x) -> 7DistinctWorks(x))", "337 (HarryPotterSeries) -> ConsistsOfDistinctWorks(HarryPotterSeries))", "all x.(HarryPotter(x) -> (SevenDistinctWorks(x)))", "all x.(HarryPotter(x) -> SevenDistinctWorks(x))", "6 DistinctWorks(HarryPotterSeries)", "all x.(HarryPotter(x) -> Series(x))", "all x.(HarryPotterSeries(x) -> (DistinctWorks(x) & DiverseWorks(x)))", "the Harry Potter series exists x y z.((Work(x) & Work(y) & Work(z) & CondensedBy(x,y,z)))", "all x.(HarryPotter(x) -> ConsistsOfSevenDiscreetWorks(x))", "all x.( HarryPotter(x) -> ConsistsOfSevenDistinctWorks(x))"]}
{"id": "folio_train_1185", "nl": "The Chronicles of Narnia consists of 7 distinct works.", "fol": "ConsistsOfSevenDistinctWorks(ChroniclesofNarnia)", "prediction": ["The ChroniclesOfNarnia (KeltenWorks) & ConsistsOfSeven(KeltenWorks))", "(The ChroniclesOfNarnia (ConsistsOfSevenWorks(Narnia))", "The ChroniclesOfNarnia contains 7 distinct works.", "The ChroniclesOfNarnia consists of 7 distinct works.", "(ConsistsOf(the ChroniclesOfNarnia,7) & DistinctWorks(the ChroniclesOfNarnia,6))", "ContainsSeventDistinctWorks(chronology,narnia)", "The ChroniclesOfNarnia(x) -> 7DistinctWorks(x))", "(SevenDistinctWorks(x,y) & ChroniclesOfNarnia(y))", "The ChroniclesOfNarnia(x) -> ConsistsOfTwoDistinctWorks(x))", "(ComposesOfWorks(ChroniclesOfNarnia,7))", "The ChroniclesOfNarnia consistsOf7DistinctWorks(x)", "The ChroniclesOfNarnia(x) consistsOfSevenWork(x))", "The ChroniclesOfNarnia (enum,7))", "(CrystallsOfNarnia(n) & 7DistinctWorks(n))", "-SevenDistinctWorks(x),y,z.(ChroniquesOfNarnia) & ChroniclesOfNarnia(y))", "The ChroniclesOfNarniaComposedOf7Works(n) & DivisibleWorks(x,n))"]}
{"id": "folio_train_1186", "nl": "The Harry Potter series of books is a heptalogy.", "fol": "IsHeptalogy(HarryPotter)", "prediction": ["all x.(HarryPotter(x) -> Heptalogy(x))", "all x.(HarryPotterbooks(x) -> Heptalogy(x))", "all x.(HarryPotterDocument(x) -> Heptalogy(x))", "all x.(HarryPotterBooks(x) -> Heptalogy(x))", "all x.(HydroPotter(x) -> Hotalogy(x))", "all x.(HarryPotterBookName(x) -> Heptalogy(x))", "all x.(Harry(x) -> Heptalog(x))", "all x y.((Harry Potter(x) & Book(y)) -> Heptalogy(x))", "all x.(HarryPotter(x) -> Hotology(x))", "all x.(HarryPotterBooks(x) -> Heptalogy(x))", "all x.(HarryPotter(x) -> Hypnalogy(x))", "all x.(WarmingtonRecord(x) -> Hotalogy(x))", "all x.(HarryPotterBooks(x) -> Hyptology(x))", "all x.(HarryPotterBooks(x) -> Heptalogy(x))", "all x.(HarryPotterBook(x) -> Heptalogy(x))", "all x.(HarryPotter(x) -> Heptalogy(x))"]}
{"id": "folio_train_1187", "nl": "The Chronicles of Narnia series of books is not a heptalogy.", "fol": "-IsHeptalogy(ChroniclesofNarnia)", "prediction": ["(-Heptalogy(ChroniclesOfNarnia)).", "all x.((BookSeries(x) & ChroniclesOfNarnia(x)) -> -Heptalogy(x))", "(RandomBook(ChroniclesOfNarnia) & -Heptalogy(ChroniclesOfNarnia))", "all x.(Heptalogy(x) -> ChroniclesOfNarnia(x))", "none. ChronologicalOfNarnia(x) -> CannotHeptalogy(x))", "all x.((Book(x) & ChroniclesOfNarnia(x)) -> -Heptalogy(x))", "(Heptalogy(ChroniclesOfNarnia) & -Heptalogy(ChroniclesOfNarniaBooks))", "None. ChroniclesOfNarnia(x) & Books(x) -> -Heptalogy(x))", "(BookSeason(ChroniclesOfNarnia) & -Heptalogy(ChroniclesOfNarnia))", "(-Heptalogy(ChroniclesOfNarnia))", "all x.((BookSeries(x) & ChroniclesOfNarnia(x)) -> -Heptalogy(x))", "(Heptalogy(The ChroniclesOfNarniaBooks))", "All x.((BookSection(x) & ChroniclesOfNarnia(x)) -> -Heptalogy(x))", "(-Heptalogy((ChroniclesOfNarnia(x) | ChroniclesOfNarnia(x)))", "all x.(ChroniclesOfNarnia(x) -> -Heptalogy(x))", "(Book(inBooks(in ChroniclesOfNarnia)) & -Heptalogy(inBooks(inBooks))"]}
{"id": "folio_train_1188", "nl": "The Lord of Rings is a heptalogy.", "fol": "IsHeptalogy(LordOfRings)", "prediction": ["(Heptalogy(LordOfRings)", "All x.(LordOfRings(x) -> Heptalogy(x))", "(Hostalogy(LordOfRings)", "all x.(LordOfRings(x) -> Heptalogy(x))", "all x.(GodOfRings(x) -> Heptalogy(x))", "(LordOfRings(LordOfRings) -> Heptalogy(LordOfRings))", "The LordOfRings(LordOfRings)", "the LordOfRings(LordOfRings) est une heptalogy(LordOfRings)", "(Heptalogy(LordOfRings)", "The LordOfRings is Heptalogy.", "(Heptalogy(LordOfRings)", "All x.(LordOfRings(x) -> Hyptology(x))", "The LordOfRings(LordOfRings) is heptalogy(LordOfRings)", "(Heptalogy(LordOfRings)", "(Hopelogetic(LordOfRings)", "all x.(LordOfRings(x) -> Hypnormology(x))"]}
{"id": "folio_train_1189", "nl": "All people who attend Renaissance fairs regularly enjoy dressing up in old-fashioned and historical period clothing.", "fol": "all x.(AttendRenaissanceFairs(x) -> EnjoyDressingUp(x))", "prediction": ["all x.((Person(x) & AttendsRenaissanceFairs(x)) -> EnjoysShavingUpInOldfashionedAndHistoricalPeriodClothing(x))", "all x.((To attendRenaissanceFairs(x) & AttendsFair(x)) -> EnjoysSewingInOldDecoratedAndHistoricalClothing(x))", "all x.((Person(x) & AttendsRenaissanceFairs(x)) -> EnjoysScoffingInOldModernProxyAndHistoricalClothing(x))", "all x.((Person(x) & AttendsRenaissanceFairs(x)) -> EnjoysShavingUpInOldPeriodClothing(x))", "all x.((Person(x) & AttendsRevolutionaryFairs(x)) -> EnjoysScoffingInoldModernPeriodClothing(x))", "all x.((People(x) & AttendsRenaissanceFairs(x)) -> EnjoysStagingInOldOdedPeriodClothing(x))", "all x.((Person(x) & AttendsRenaissanceFairs(x)) -> LovesSoakingUpInOldOdfashionedAndHistoricalPeriodClothing(x))", "all x.(AttendsRenaissanceFairs(x) -> (EnjoysSalingInOldDecoratedAndHistoricalFashionClothing(x)))", "all x.((Person(x) & AttendsRenaissanceFairs(x)) -> EnjoysShavingInOldPeriodClothing(x))", "all x.((Person(x) & AttendsRenaissanceFairs(x)) -> EnjoysShavingInOldTimedAndHistoricalClothing(x))", "all x.(AttendsRenaissanceFairs(x) -> EnjoysSealingUpIn(x,ModernPastClothing))", "all x.((Person(x) & AttendsRenaissanceFairs(x)) -> EnjoysShavingInOldOriginalPeriodClothing(x))", "all x y.((People(x) & AttendsRenaissanceFairs(x)) -> EnjoysSewingInOldOriginalPeriodClothing(x,y))", "all x.((Person(x) & AttendsRenaissanceFair(x)) -> EnjoysGroomingInOldPerson(x,oldFashionClothing))", "all x.(AttendsRenaissanceFair(x) -> EnjoysSewingInOldOdishedAndHistoricalPeriodClothing(x))", "all x y.((Person(x) & AttendsRenaissanceFairs(x)) -> EnjoysShavingUpInOldfashionedAndHistoricalPeriodClothing(x))"]}
{"id": "folio_train_1190", "nl": "If people are fascinated by the history of the Renaissance and other past eras, then they attend Renaissance fairs regularly.", "fol": "all x.(FascinatedByRenaissanceHistory(x) -> AttendRenaissanceFairs(x))", "prediction": ["all x.((FascinatedByFadingRestoration(x) & FascinatedByPastEras(x)) -> AttendsRestorationFairsRegularly(x))", "all x y.((Person(x) & FaffenedByRevivation(x) & PastEras(y)) -> AttendsRevivationFairsRegularly(x,y))", "all x y z.((Popular(x) & Renaissance(y) & PastEra(z)) -> AttendsRenaissanceFairs(x))", "all x.((People(x) & FascinatedByRepublican(x) & FantasydByForgottenEras(x)) -> AttendsRenaissanceFairs(x))", "all x y.((Person(x) & FascinatedByReformation(x) & PastEry(y)) -> AttendsRenaissanceFairs(x,y))", "all x.((Popular(x) & FascinatedByRestoration(x) & FascinatedByPastEras(x)) -> AttendsRestorationFairs(x))", "all x y.((Person(x) & FascinatedByRevolution(x) & Renaissance(y)) -> AttendsRegularFairs(x))", "all x.(FascinatedBy(x,Renaissance(x) & FascinatedBy(x,PastEras)) -> AttendsRenaissanceFairs(x))", "all x.(FascinatedByRenaissanceAndPastEras(x) -> AnnualAttendance(x))", "all x.((FascinatedByReformation(x) & FantasizedByPastExposures(x)) -> AttendsReformationFairs(x))", "all x.((People(x) & FascinatedByReformationAndPastEras(x)) -> AttendsRenaissanceFairs(x))", "all x y.((Popular(x) & FascinatedByHistoryOfRenaissanceAndNeathEras(x)) -> AttendsResurrectionFairsRegularly(x,y))", "all x.((FamousForRestaurants(x) & FascinatedByRestaurants(x)) -> AttendsRestaurants(x))", "all x.((PopularArtist(x) & FascinatedByRestoration(x) & FascinatedByPastEras(x)) -> RegularAttendance(x))", "all x.((FascinatedByRenaissance(x) & FascinatedByExperiences(x)) -> AttendsRenovatingFairsRegularly(x))", "all x.((People(x) & FascinatedByRenaissance(x)) -> AttendsRenaissanceFairsRegularly(x))"]}
{"id": "folio_train_1191", "nl": "People are either fascinated by the history of the Renaissance and other past eras, or are not nostalgic academics who enjoy learning.", "fol": "all x.(FascinatedByRenaissanceHistory(x) | NotNostalgicAcademics(x))", "prediction": ["all x y z.((Person(x) & Renaissance(y) & PastEra(z)) -> (FascinatedBy(x,y) | NostalgicAcademic(x) & EnjoysLearning(x)))", "all x.((Person(x) & FascinatedByReformation(x) & FascinatedByPastEras(x)) | -NostalgicAcademic(x) & EnjoysLearning(x))", "all x.(Person(x) -> ((FascinatedByReformation(x) & FenestratedByPastEras(x)) | (-NostalgicAcademic(x) & EnjoysLearning(x))))", "all x.(People(x) -> ((FascinatedByRepublicanHistory(x) & FascinatedByHeritages(x)) | -NostalgicAcademic(x) & EnjoysLearning(x)))", "all x.(Person(x) -> (FascinatedByRevolution(x) | -NostalgicAcademic(x) & EnjoysLearning(x)))", "all x.(Person(x) -> ((FascinatedBy(x,renaissance) & -NeoclassicalAcademist(x) & EnjoysLearning(x)) | NostalgianAcademist(x)))", "all x.(Person(x) -> (FascinatedByRepublican(x) | -NostalgicAcademic(x) & EnlightenedByLearning(x)))", "all x.(People(x) & ((FascinatedByRevivation(x) & -NostalgicAcademics(x) & EnjoyLearning(x)) -> Nostalgic(x)))", "all x.((Person(x) & (FascinatedByRevenue(x) | -NostalgicAcademic(x))) -> -EnjoyedLearning(x))", "exists x.(Person(x) & ((FascinatedByRenaissance(x) & FancyEpoche(x)) | -NostalgicAcademic(x) & EnjoyLearning(x))))", "all x.(Person(x) -> (FascinatedByReformationAndPastEarages(x) | -NostalgicAcademic(x) & EnjoysLearning(x)))", "all x.(Person(x) -> ((FascinatedByErenaness(x) | FantasizedByPastEreces(x)) | -NostalgicAcademic(x) & EnjoysLearning(x))))", "all x.((People(x) & FascinatedByRenaissance(x) & FascinatedByPastEras(x)) | WeakNostalgicAcademic(x))", "all x.((Person(x) & FascinatedByRenaissanceAndPastEras(x)) | NostalgicAcademic(x))", "all x.((Person(x) & FascinatedByRenaissanceAndPersonalEremonies(x)) | -NostalgicAcademic(x))", "exists x.(Person(x) & ((FascinatedByReenaissance(x) & FusedByCriteria(x)) | -NostalgicAcademic(x) & EnjoysLearning(x))))"]}
{"id": "folio_train_1192", "nl": "If people are focused on the future and industry professions, then they are not nostalgic academics who enjoy learning.", "fol": "all x.(FocusedOnIndustry(x) -> NotNostalgicAcademics(x))", "prediction": ["all x.(FocusedOnFutureAndIndustryProffessions(x) -> -NostalgicAcademics(x))", "all x.((Personal(x) & FocusedOnFutureProfessions(x) & FocusedOnIndustryProfessions(x)) -> -NostalgicAcademics(x) & EnjoysLearning(x))", "all x.(FocusedOnFutureAndIndustryProfessionsDoesn\u2019tEnjoyLearning(x) -> (NostalgicAcademics(x) & -LovesLearning(x)))", "all x.(FocusedOnFutureAndIndustryProfessions(x) -> -NostalgicAcademics(x))", "all x.((FocusedOnFutureProfessions(x) & FocusedOnIndustryProfessions(x)) -> -NostalgicAcademics(x) & EnjoysLearning(x))", "all x.(FixedOnFutureAndIndustryProfessions(x) -> -NostalgiaAcademicsEnjoyLearning(x))", "all x.((Human(x) & FocusedOnFuture(x) & FocusedOnIndustryProfessions(x)) -> -NostalgicAcademic(x) & EnjoysLearning(x))", "all x.((People(x) & FocusedOnFuture(x) & FocusedOnIndustriellProfessionals(x)) -> -NostalgicAcademics(x))", "all x.(FocusedOnFutureProfessions(x) -> -NostalgicAcademic(x))", "all x.((Personal(x) & FocusedOnFutureAndIndustryProfessions(x)) -> -NostalgicAcademics(x) & EnjoyLearning(x))", "all x.((Person(x) & FocusedOnFutureAndIndustryProfessions(x)) -> -NostalgicAcademics(x) & EnjoysLearning(x))", "all x.((FocusedOnFuture(x) & FocusedOnIndustrialProffessions(x)) -> -NostalgicAcademics(x) & EnjoysLearning(x))", "all x.((FocusingOnFuture(x) & FocusedOnIndustrieProfessions(x)) -> -NostalgicAcademics(x) & Enjoylearning(x))", "all x y.((FocusOnFutureAndIndustrieProfessions(x) & FocusedOnFutureAndIndustry(x)) -> -NostalgicAcademics(x) & EnjoyLearning(x))", "all x.(ConsciousOnFutureAndIndustryProffessions(x) -> -NostalgicAcademics(x))", "all x.((People(x) & FocusedOnFuture(x) & FocusedOnIndustryProfessions(x)) -> -NostalgicAcademics(x) & EnjoysLearning(x))"]}
{"id": "folio_train_1193", "nl": "If people are historical professors who are passionate about their job and subject, then they are nostalgic academics who enjoy learning.", "fol": "all x.(HistoricalProfessor(x) -> -NotNostalgicAcademics(x))", "prediction": ["all x.((HistoricalProfessor(x) & PassionateAboutJob(x) & PassionateAboutSubject(x)) -> NostalgicAcademic(x) & EnjoysLearning(x))", "all x.((Person(x) & HistoricalProfessor(x) & PassionateAboutJobAndSubject(x)) -> NostalgicAcademist(x))", "all x.((Person(x) & HistoricalProfessor(x) & PassionateAboutJob(x) & PassionateAboutSubject(x)) -> NostalgicAcademist(x) & EnjoyLearning(x))", "all x.((Person(x) & HistoricalProfessor(x) & PassionateAboutJob(x) & PassionateAboutSubject(x)) -> NostalgicAcademic(x) & EnjoyLearning(x))", "all x.((Person(x) & HistoricalProfessor(x) & PassionateAboutJobAndSubject(x)) -> NostalgicAcademic(x))", "all x.((Person(x) & HistoricalProfessor(x) & PassionateAboutJobAndSubject(x)) -> NostalgicAcademic(x))", "all x.((HistoricalProfessor(x) & PassionateInJobAndSubject(x)) -> NostalgicAcademic(x))", "all x.((Person(x) & HistoricalProfessor(x) & PassionateInJobAndSubject(x)) -> NostalgicAcademic(x))", "all x.((UrbanPhD(x) & HistoricalProfessor(x) & PassionateAboutJobAndSubject(x)) -> NostalgicAcademic(x))", "all x.((People(x) & HistoricalProfessor(x) & PassionateAboutJobAndSubject(x)) -> NostalgicAcademic(x))", "all x.((Person(x) & HistoricalProfessor(x) & PassionateInJobAndSubject(x)) -> NostalgicAcademic(x))", "all x.((Person(x) & HistoricalProfessor(x) & PassionateOnJobAndSubject(x)) -> NostalgicAcademic(x))", "all x.((People(x) & HistoricalProfessor(x) & PassionateAboutJobAndSubject(x)) -> NostalgicAcademic(x))", "all x.((Physicist(x) & PassionateAboutJobAndSubject(x)) -> NostalgicAcademic(x))", "all x.((Person(x) & HistoricalProfessor(x) & PassionateAboutJobAndSubject(x)) -> NostalgicAcademic(x) & EnjoysLearning(x))", "all x.((Person(x) & HistoricalProfessor(x) & PassionateAboutJob(x) & PassionateAboutSubject(x)) -> NostalgicAcademic(x) & EnjoysLearning(x))"]}
{"id": "folio_train_1194", "nl": "If Clyde is not focused on the future and industry professions, then he is neither focused on the future and industry professions nor enjoys dressing up in old-fashioned and historical period clothing.", "fol": "(-FocusedOnIndustry(Clyde) -> -(FocusedOnIndustry(Clyde) | EnjoyDressingUp(Clyde)))", "prediction": ["all x.((Clyde(x) & -FocusedOnFutureAndIndustriellProfessions(x)) -> (-FocusedOnFutureAndIndustriellProfessionals(x) & -FocusedOnOldTemperatureAndHistoricalClothing(x)))", "all x.((Clyde(x) & -FocusedOnFutureAndIndustryProfessionals(x)) -> (-FocusedOnFutureAndIndustryProfessionals(x) & -EnjoysSewingInOldSchoolHorizonClothing(x)))", "all x.((Clyde(x) & -FocusedOnFutureAndIndustryProfessionals(x)) -> (-FocusedOnFutureAndIndustryProfessionals(x) & -FantasticOnOldDecoratedAndHistoricalClothing(x)))", "all x.((Clyde(x) & -FocusedOnFutureAndIndustryProfessionals(x)) -> -(FocusedOnFutureAndIndustryProfessionals(x) | EnjoysOldFashionedAndHistoricalPeriodClothing(x)))", "all x.((Clyde(x) & -FocusedOnFutureAndIndustryProfessions(x)) -> (-FocusedOnFutureAndIndustryProfessionals(x) & -EnjoysOldDecoratedAndHistoricalPeriodClothing(x)))", "all x.((Clyde(x) & -FocusedOnFutureAndIndustryProfessions(x)) -> (-FocusedOnFutureAndIndustryProfessionals(x) & -EnjoysOldDecoratedAndHistoricalPeriodClothing(x)))", "all x.((Clyde(x) & -FocusedOnFutureAndIndustryProfessionals(x)) -> (-FocusedOnFutureAndIndustryProfessionals(x) & -FocusedOnOutdatedAndHistoricalPeriodClothing(x)))", "all x.((Clyde(x) & -FocusedOnFutureAndIndustriellProfessions(x)) -> -(FocusedOnFutureAndIndustriellProfessions(x) & EnjoysOldDecoratedAndHistoricalPeriodClothing(x)))", "all x.((Clyde(x) & -FocusedOnFutureOrIndustryProfessions(x)) -> (-FocusedOnFutureOrIndustryProfessions(x) & -FunctionalInFocusedOnFunctionalIndustryProfessionals(x) & -FunctionalInNewWarmClothing(x)))", "all x.((Clyde(x) & -FocusedOnFutureAndIndustriellProfessions(x)) -> (-FocusedOnFutureAndIndustriellProfessionals(x) & -EnjoysOldOldPeriodClothing(x)))", "all x.((Clyde(x) & -FocusedOnFutureProfessionals(x) & -FocusedOnFutureProfessionals(x) & -FocusedOnIndustrialProfessionals(x)) -> (-FocusedOnFutureProfessionals(x) & -FunctionalFactoryFunctionality(x) &-FunctionalFenshfulFeets-FeetFeetFeetFeetfeetFeetFeetFeetFeetFeetFeetFeetFeetFeetFeetFeetFeetFeetFeetFeetFeetFeetFeetFeetFeetFeetFeetFreetFeetFeetFeetFeetFeetFeetFeetFeetFeetFeetFeetFenForFenForFenForFenForHyHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHi(HiHiHiHiHiHiHiHiHiHiHiHiHiHi", "all x.((Clyde(x) & -FocusedOnFutureAndIndustriellProfessions(x)) -> (-FocusedOnFutureAndIndustriellProfessionals(x) & -EnjoysOldDemandedAndHistoricalPeriodClothing(x)))", "all x.((Clyde(x) & -FocusedOnFindingProfessionals(x)) -> (-FocusedOnFindingFindingProfessionals(x) & -FocusedOnFindingProfessionals(x) & -FocusedOnFindingFindingProfessionals(x) & -FocusedOnFindingFormsAndPeriodClothing(x) -FocusedOn(x)))", "all x.((Clyde(x) & -ExcitedOnFuture(x) & -ExcitedOnFutureProfessionals(x)) -> -EquallyEnjoyedSaloningInOldOddWorldClothing(x))", "all x.((Clyde(x) & -(FollowingOnFuture(x) & FocusedOnIndustryProfessions(x)) | (FallingOnFuture(x) & FocusedOnIndustryProfessionals(x))))", "all x.((Clyde(x) & -FocusedOnFutureProfessionals(x)) -> (-FocusedOnFutureProfessionals(x) & -FocusedOnTheFutureAndIndustriesProfessionals(x) & -EnjoysVoilingInOldRehab(x) & HistoricalPeriodClothing(x)))"]}
{"id": "folio_train_1195", "nl": "Clyde attends Renaissance fairs regularly.", "fol": "AttendRenaissanceFairs(Clyde)", "prediction": ["Clyde attendsFairsRegularly(Clyde,Renaissance)", "Clyde attendsRenaissanceFairsRegularly(Clyde))", "Clyde attendsRenaissanceFairsRegularly(Clyde,Fairs))", "Clyde attendsannually(Clyde,RenaissanceFairs)", "Clyde attendsRenaissanceFairsRegularly(Clyde)", "LavenderFairs(Clyde)", "Clyde attendsRenaissanceFairsRegularly.", "Clyde attendsRegularRevivalFairs(Clyde)", "(AttendsRenaissanceFairs(Clyde) & AttendsRegularly(Clyde))", "Clyde attendsRenaissanceFairsRegularly(Clyde)", "Clyde attendsRenaissanceFairsRegularly(c).", "Clyde attendsRenaissanceFairsRegularly(Clyde)", "Clyde attendsRenaissanceFairsRegularly(Clyde,Fairs))", "all x.(Clyde(x) -> AttendsEvents(x,Renaissance))", "Clyde attendsRenaissanceFairsRegularly(Clyde) -> Tickets(Clyde))", "Clyde attendsRenaissanceFairsRegularly(c)"]}
{"id": "folio_train_1196", "nl": "Clyde is a history professor who is passionate about his job and subject.", "fol": "HistoricalProfessor(Clyde)", "prediction": ["all x.(Clyde(x) -> (HistoryProfessor(x) & PassionateAboutJob(x) & PassionateAboutSubject(x)))", "all x y.((Professor(x) & Clyde(y)) -> (PastyOnJob(x,z) & PassionateOnSubject(x,z)))", "Clyde is a history professor and passionate about his job and subject.", "(HistoryProfessor(Clyde) & PassionateAbout(Clyde,Job) & PassionateAbout(Clyde,Subject))", "Clyde is a history professor who is passionate about his job and subject.", "Clyde is a history professor who is passionate about his job and subject.", "(HistoryProfessor(Clyde) & PassionateAboutJobAndSubject(Clyde,Clyde))", "Clyde (historian(c) & PassionateAroundJob(c) & PassionateAroundSubject(c))", "(DocumentaryWithClyde(Clyde,History) & PassionateAboutJobAndSubject(Clyde,HistoryProfessor))", "Clyde Smith is a history professor, passionately about his job and subject.", "all x.((HistoryProfessor(x) & PassionateInJob(x) & PassionateInSubject(x)) -> Clyde(x))", "all x.((Professor(x) & PassionateAboutHistory(x) & PassionateAboutSubject(x)) -> Clyde(x))", "all x.((Professor(x) & PassionateAboutJob(x) & PassionateAboutSubject(x)) -> Clyde(x))", "all x.((Professor(x) & HistoryProfessor(x) & PassionateAboutJobAndSubject(x)) -> Clyde(x))", "all x.((Professor(x) & PassionateInHistory(x)) -> ClydeDollars(x))", "Clyde is a historyProfessor and PassionateaboutJobAndSubject(c) -> HistoryProfessor(h))"]}
{"id": "folio_train_1197", "nl": "Clyde is a history professor who is passionate about his job and subject, or is not a nostalgic academic who enjoys learning.", "fol": "(HistoricalProfessor(Clyde) | NotNostalgicAcademics(Clyde))", "prediction": ["all x.((HistoryProfessor(x) & (PositiveOnJob(x) | NuestricAcademic(x))) -> EnjoysLearning(x))", "all x.(Clyde(x) -> ((HistoryProfessor(x) & PassionateAboutJob(x) & LovesSubject(x)) | (-NostalgicAcademist(x) & LovesLearning(x))))", "((HistoryProfessor(Clyde) & PassionateOnJob(Clyde) & PassionateOnSubject(Clyde)) | (NostalgicAcademic(Clyde) & EnjoysLearning(Clyde))))", "all x.((Professor(x) & ((Passionate(x) & Job(x) & Subject(x)) | -NostalgicAcademic(x) & EnjoysLearning(x))) -> Clyde(x))", "(all x.((HistoryProfessor(x) & PassionateInJobAndSubject(x)) | (-NostalgicAcademist(x) & EnjoysLearning(x))))", "all x.((HistoryProfessor(x) & (ParticipatedAboutJob(x) | NostalgicAcademist(x))) -> EnjoymentOf(x,c))", "all x.(Clyde(x) -> ((HistoryProfessor(x) & PassionateAboutJobAndSubject(x)) | -NostalgicAcademic(x) & EnjoysLearning(x)))", "all x y.((HistoryProfessor(x) & Clyde(y) & (PassionateSection(x,y) | NostalgicalAcademic(y)) & EnjoysLearning(y)) -> Passionate(x,y))", "all x.((HistoryProfessor(x) & (PossiveAboutJob(x) | NostalgicAcademic(x))) -> EnjoysLearning(x))", "all x.((HistoireProfessor(x) & (PossiveOnJob(x) | NostalgicAcademic(x))) -> -EnjoysLearning(x))", "all x.(Clyde(x) -> (((HistoryProfessor(x) & PassionateAboutJobAndSubject(x)) | (NostalgicAcademic(x) & EnjoysLearning(x)))))", "((HistoryProfessor(Clyde) & PassionateAboutJobAndSubject(Clyde)) | (-NostalgicAcademic(Clyde) & EnjoysLearning(Clyde))))", "(all x.((Professor(x) & Passionate(x)) | NostalgicAcademic(x)) & EnjoysLearning(x)) -> History(x))", "(all x.(FavoriteHistoryProfessor(x) & LovesJobAndSubject(x)) | (-NostalgicAcademic(x) & EnjoysLearning(x))))", "all x.((Clyde(x) & (PainfulHistoryProfessor(x) | NostalgicAcademic(x))) -> (FindingJob(x) | EnjoyingLearning(x)))", "all x.((HistoryProfessor(x) & (FantasticOfJob(x) | NostalgicAcademic(x))) -> (PositiveOfSubject(x)))"]}
{"id": "folio_train_1198", "nl": "No sports cars are vehicles intended to be driven at moderate speeds.", "fol": "all x.(IsSportsCar(x) -> -IsIntendedForModerateSpeeds(x))", "prediction": ["all x.(SportsCar(x) -> -(Vehicle(x) & IntendedForModerateSpeeds(x)))", "all x.(SportsCar(x) -> -IntendedForModerateSpeeds(x))", "all x.(SportsCar(x) -> -(IntendedForModernSpeeds(x) & -IntendedForModernSpeeds(x)))", "-(SportCar(x) & -IntendedAtoModerateSpeeds(x))", "-exists x.(SportsCar(x) & Vehicle(y) & DesignedAtModerateSpeed(y))", "-exists x.(SportsCar(x) & Vehicle(x) & IntendedForModerateSpeeds(x))", "-exists x.(SportsCar(x) & Vehicle(x) & DesignedForModerateSpeeds(x))", "all x.(SportsCar(x) -> -DeliveredAtModerateSpeeds(x))", "-exists x.(SportsCar(x) & -DrivenAtModernSpeeds(x))", "-exists x.(SportsCar(x) & Car(y) & DesignedForModerateSpeed(x,y))", "-exists x.(SportsCar(x) & Vehicle(x) & DesignedForModerateSpeed(x))", "-exists x.(SportsCar(x) & Vehicle(x) & DesignedForMovementSpeed(x))", ": -exists x.(SportsCar(x) & InDesignedForModerateSpeed(x))", "-(SportsCar(x) & -IntendedToBeDrivenAtModerateSpeeds(x))", "-all x.(SportsCar(x) -> DrivenAtModerateSpeeds(x))", "all x.(SportsCar(x) -> -DrivenAtModerateSpeeds(x))"]}
{"id": "folio_train_1199", "nl": "All automobiles designed for family use are vehicles intended to be driven at moderate speeds.", "fol": "all x.(IsDesignedForFamilyUse(x) -> IsIntendedForModerateSpeeds(x))", "prediction": ["all x.((Automobile(x) & DesignedForFamilyUse(x)) -> IntendedAtModerateSpeeds(x))", "all x.((Automobile(x) & DesignedForFamilyUse(x)) -> DrivenAtModerateSpeeds(x))", "all x.((Automobile(x) & DesignedForFamilyUse(x)) -> IntendedToDriveAtModerateSpeeds(x))", "all x.((Automobile(x) & DesignedForFamilyUse(x)) -> VehicleIntendedForModerateSpeeds(x))", "all x.((Automobile(x) & DesignedForFamilyUse(x)) -> IntendedToBeDrivenAtModerateSpeeds(x))", "all x.((Automobile(x) & DesignedForFamilyUse(x)) -> DesiredToBeDrivenAtMovements(x))", "all x.((Automobile(x) & DesignedForFamilyUse(x)) -> IntendedToBeDrivenAtModerateSpeeds(x))", "all x.((Automobile(x) & DesignedForFamilyUse(x)) -> DrivenAtModerateSpeeds(x))", "all x y.((Automobile(x) & DesignedForFamilyUse(x)) -> Cargo(y))", "all x y.((Automobile(x) & DesignedForFamilyUse(x)) -> (RequiresModerateSpeed(y) & DrivenAt(x,y)))", "all x.(Cargo(x) -> (DesignedForFamilyUse(x) & IntendedToDriveAtModerateSpeeds(x)))", "all x.((Automobile(x) & DesignedForFamilyUse(x)) -> IntendedForMovementSpeeds(x))", "all x.((Automobile(x) & DesignedForFamilyUse(x)) -> IntendedToBeDrivenAtModerateSpeeds(x))", "all x.((Automobile(x) & DesignedForFamilyUse(x)) -> DesignedForModernSpeeds(x))", "all x.((Automobile(x) & DesignedForFamilyUse(x)) -> DesignedForModerateSpeeds(x))", "all x.((Automobile(x) & DesignedForFamilyUse(x)) -> IntendedAtModerateSpeeds(x))"]}
{"id": "folio_train_1200", "nl": "No sports cars are automobiles designed for family use.", "fol": "all x.(IsSportsCar(x) -> -IsDesignedForFamilyUse(x))", "prediction": ["-exists x.(SportsCar(x) & Automobile(x) & DesignedForFamilyUse(x))", "-exists x.(SportsCar(x) & Automobile(x) & DesignedFor(x FamilyUse))", "-exists x.(SportsCar(x) & -IsDesignedForFamilyUse(x))", "all x.(SportsCar(x) -> -DesignedForFamilyUse(x))", "all x.(SportsCar(x) -> -DesignedForFamilyUse(x))", "-exists x.(SportsCar(x) & DesignedForFamilyUse(x))", "all x.(SportsCar(x) -> -(Automobile(x) & DesignedForFamilyUse(x)))", "-exists x.(SportsCar(x) & DesignedForFamilyUse(x))", "all x.(SportsCar(x) -> -DesignedForFamilyUse(x))", "-exists x.(SportsCar(x) & -DesignatedForFamilyUse(x))", "-exists x.(SportsCar(x) & -DesignedForFamilyUse(x))", "-exists x.(SportsCar(x) & DesignedForFamilyUse(x))", "all x y.((SportsCar(x) & FamilyUse(y)) -> -DesignedFor(x,y))", "-exists x.(SportsCar(x) & Automobile(x) & DesignedForFamilyUse(x))", "all x.(SportsCar(x) -> -DesignedForFamilyUse(x))", "-exists x.(SportsCar(x) & -DesignedForFamilyUse(x))"]}
{"id": "folio_train_1201", "nl": "If people work well in teams in their workplace, then they get along with all their colleagues at their work.", "fol": "all x.(WorksWellInTeams(x) -> GetsAlongWithColleagues(x))", "prediction": ["all x.((Person(x) & WorkWellInTeams(x)) -> GetCo-exists(x))", "all x.(WorksWellInTeams(x) -> GetsTooGoodAtWork(x))", "all x y.((WorksSolvedInTeams(x) & Workplace(y)) -> GetsComedy(x,y))", "all x y.((People(x) & TeamWork(x)) -> (WorkWellInWorkplace(x,y) & WorksInWorkplace(y) & WorksInWorkplace(x) & WorksAtWork(y)))", "all x y.((Person(x) & Workplace(y) & WorksWellInTeams(x,y)) -> ComesTogetherWithColleagues(x))", "all x.((People(x) & WorkWellInTeams(x)) -> GetsTogetherWithCoworkers(x))", "all x.(WorksWellInTeamsInWorkplace(x) -> GetsCooperation(x))", "all x y.((Person(x) & WorksWellInTeams(x,y) & WorksInWorkplace(x,y)) -> GetCouplesAtWork(x))", "all x.(WorkWellInTeams(x) -> GetsAlongWithCoworkers(x))", "all x y.((Person(x) & WorkInTeam(x) & WorkWorkplace(y)) -> WorksWell(x,y))", "all x y.((Person(x) & WorkSpace(y) & WorksWellInTeams(x,y)) -> TeamGasGood(x))", "all x.(WorkWellInTeams(x) -> GetsCouplesAtWork(x))", "all x y.((Person(x) & Workplace(y) & WorksInTeams(x,y)) -> WorksWithColleagues(x))", "all x.((WorkWellInTeams(x) & Workplace(x)) -> GetCope(x))", "all x y.((WorkWell(x) & Workplace(y) & WorksInTeams(x,y)) -> GetOntoColleagues(x))", "all x.((Personnel(x) & WorksWellInTeams(x)) -> WellCoworkers(x))"]}
{"id": "folio_train_1202", "nl": "If people come to work every day with a positive attitude, then they work well in teams in their workplace.", "fol": "all x.(ComesToWorkWithPositiveAttitude(x) -> WorksWellInTeams(x))", "prediction": ["all x.((CallsToWorkEveryDay(x) & PositiveAttitude(x)) -> WellWorkinTeams(x))", "all x.((PositiveAttitude(x) -> WorksWellInTeams(x))", "all x.(PositiveAttitude(x) -> WorksWellInTeams(x))", "all x.((People(x) & ComesToWorkEveryDayWithPositiveAttitude(x)) -> WorksWellInTeamsInWorkplace(x))", "all x.((PositiveAttitude(x) & ComesToWorkEveryDay(x)) -> WorksInTeamsInWorkplace(x))", "all x y.((Person(x) & Day(y) & ComesToWorkWithPositiveAttitude(x,y)) -> WorksWellInTeamsInWorkplace(x))", "all x.(PositiveAttitude(x) -> WorksWellInTeams(x))", "all x.((PositiveAttitude(x) & ComesToWork(x)) -> WorksWellInTeamsInWorkplace(x))", "all x.((Person(x) & ComesToWorkEveryDayWithPositiveAttitude(x)) -> WorksWellInTeamsInWorkplace(x))", "all x.((Person(x) & ComesToWorkEveryDayWithPositiveAttitude(x)) -> WorksWellInTeamsInWorkplace(x))", "all x.((PositiveAttitude(x) & ComesToWorkEveryDay(x)) -> WorkWellInTeams(x))", "all x.((Person(x) & ComesToWorkEveryDayWithPositiveAttitude(x)) -> WorksWellInTeams(x))", "all x.(PositiveAttitudeInWorkplace(x) -> WorkWellInTeams(x))", "all x.((Person(x) & ComesToWorkEveryDayWithPositiveAttitude(x)) -> WorksWellInTeams(x))", "all x.(((Person(x) & ComesToWork(x) & PositiveAttitude(x)) -> WorkWellInTeams(x))", "all x.((PositiveAttitude(x) & ComesToWorkEachDay(x)) -> WorkWell(x))"]}
{"id": "folio_train_1203", "nl": "People either come into work every day with a positive attitude or are always tired every morning.", "fol": "(all x.((ComesToWorkWithPositiveAttitude(x) & -AlwaysTired(x)) | (-ComesToWorkWithPositiveAttitude(x) & AlwaysTired(x))) & all x.(AlwaysTired(x) -> ReceivesPromotionsFromBoss(x)))", "prediction": ["all x.((Person(x) & PositiveAttitude(x)) | -TressedEveryMorning(x)))", "all x.(TaskInWorkEveryDay(x) -> (PositiveAttitude(x) | TiredEveryMorning(x)))", "all x.((Person(x) & ComesIntoWorkEveryDayWithPositiveAttitude(x)) | TiredEachMorning(x))", "all x.(PositiveAttitude(x) | TiredEveryMorning(x))", "all x.(GotToWorkWithBugandaOrEasyEveryMorning(x) -> (ComesIntoWorkWithPositiveAttitude(x) | (EasyEveryMorning(x) | -DarkEveryMorning(x)))))", "all x.((Person(x) & ComesIntoWorkWithPositiveAttitude(x)) | AlwaysTenseInBeingMorning(x))", "all x.(PositiveAttitude(x) | TiredEachMorning(x))", "all x.((Person(x) & ComesIntoWork(x) & PositiveAttitude(x)) | TiredEveryMorning(x))", "all x.(PositiveAttitude(x) | TiredEveryMorning(x))!", "all x.((Person(x) & (ComesToWorkEveryDayWithPositiveThan(x) | EverTreatedEveryMorning(x))) -> PositiveAttitude(x))", "exists x.(Psychologist(x) & (ComesIntoWorkWithPositiveAttitude(x) | (FreshEveryMorning(x)))))", "all x.((People(x) & (ComesIntoWorkEveryDay(x) & PositiveAttitude(x) | AlwaysTattyEveryMorning(x))) -> AlwaysTrendy(x))", "all x.((Person(x) & ComesIntoWorkWithPositiveAttitude(x)) | WearyEveryMorning(x))", "(all x.((Personal(x) & -PerfectAttitude(x)) -> PositiveAttitude(x)) & ((Personal(x) & -PositiveAttitude(x)) -> TiredEveryMorning(x))))", "exists x.(PositiveAttitude(x) | AlwaysFated(x))", "exists x.(Person(x) & (CanComeToWorkEveryDayWithAttitude(x) | EverFatherEveryMorning(x)))"]}
{"id": "folio_train_1204", "nl": "If people get many promotions from their boss at work, then they receive negative feedback from teams at work.", "fol": "all x.(ReceivesPromotionsFromBoss(x) -> -ReceivesNegativeFeedback(x))", "prediction": ["all x.((Person(x) & GetsOtherPromotionsFromBossAtWork(x)) -> ReceivesNegativeFeedback(x))", "all x.((Person(x) & ManyPromotions(x)) -> NegativeFeedback(x))", "all x y.((Promotions(x) & BossAtWork(y) & ManyExploits(x,y)) -> NegativeFeedback(x))", "all x y.((Person(x) & Boss(y) & ManyPromotions(x,y)) -> ReceivesNegativeFeedback(x,y))", "all x y.((Promotion(x) & BOssAtWork(y) & GreatExcellence(x,y) & BadFeedback(x,y)) -> NegativeFeedback(x,y))", "all x.((Person(x) & BossAtWork(x)) -> RefusesNegativeFeedback(x))", "all x y.((People(x) & BOssAtWork(y) & ManyPromotions(x,y)) -> NegativeFeedback(x))", "all x.((Person(x) & ManyPromotions(x)) -> ReceivesNegativeFeedbackFromTeams(x))", "all x.((Person(x) & ManyPromotionsFromBossAtWork(x)) -> NegativeFeedbackFromTeamsAtWork(x))", "all x.((Person(x) & Boss(x) & ManyPromotions(x)) -> NegativeFeedbackFromTeams(x))", "all x y.((People(x) & BossAtWork(y) & ManyPromotions(x,y)) -> PositiveFeedback(x))", "all x y z.((People(x) & Boss(y) & Team(z) & GetsMorePromotions(x)) -> NegativeFeedback(x,y,z))", "all x y.((Boss(x) & Client(y) & GawksContracts(y,x)) -> ReceivesNegativeFeedback(x,y))", "all x.((Person(x) & ManyPromotions(x)) -> ReceivesNegativeFeedback(x))", "all x.(SupportsFromBossAtWork(x) -> ReceivesNegativeFeedbackTasks(x))", "all x.((Person(x) & ManyPromotions(x)) -> PositiveFeedback(x))"]}
{"id": "folio_train_1205", "nl": "Kat is either both a person who works well in teams in their workplace and is always tired every morning, or she neither works well in teams in their workplace nor is always tired every morning.", "fol": "((WorksWellInTeams(Kat) & AlwaysTired(Kat)) | (-WorksWellInTeams(Kat) & -AlwaysTired(Kat)))", "prediction": ["(all x.(Is(Kat) & WorksWellInTeams(x) & (Is(Kat) & WorksWellInTeams(x) & -Is(Kat))) -> ((Is(Kat) & WorksWellInTeams(x) & -Is(Kat)))))", "all x.(Kat(x) -> ((WorksWellInTeams(x) & TiredEveryMorning(x)) | (-WorksWellInTeams(x) & TiredEveryMorning(x)))))", "all x.(Kat(x) -> (WorksWellInTeams(x) & TiredEveryMonday(x)) | (-WorksWellInTeams(x) & TiredEveryMonday(x))))", "all x y.((PersonToWork(x) & Workplace(y) & Workplace(x) & Workplace(y) & TriedEveryMorning(x)) | (NoWorks(x,y) & Workplace(y) & SleepsEveryMorning(x,y))))", "all x.(Kat(x) -> ((WorksWellInTeams(x) & TiredEveryMorning(x)) | (WorksWellInTeams(x) & TiredEveryMorning(x) & -TrendyEveryMorning(x)))))", "all x.((Person(x) & WorksWellInTeams(x) & TiredEveryMorning(x)) | (-WorksWellInTeams(x) & TiredEveryMorning(x))))", "all x.(Kat(x) -> ((WorksWellInTeams(x) & SleepsEarly(x)) | (-WorksWellInTeams(x) & SleepsEarly(x)))))", "((WorksWellInTeams(Kat) & WorksBut(Kat) & -WorksWellInTeams(Kat)) | (-WorksWellInTeams(Kat) & WorksBut(Kat)) & Workplace(Kat)))", "(WillWorkWellInTeams(Kat) & EffortFreeEveryMorning(Kat)) | (-WillWorkWellInTeams(Kat) & EnergyFreeEveryMorning(Kat))))", "all x.(Kat(x) -> ((WorksWellInTeams(x) & TiredEveryMore(x)) | (-WorksWellInTeams(x) & TiredEveryMoreMoreMoreMoreMore(x))))", "((WasWorkingWellInTeams(kat) & (WorkingWellInTeams(kat) & -WorkingWell(kat))) | (WasWorkingWellInTeams(kat) & SleepfulEachMorning(kat))))", "all x.(Kat(x) -> (WorksWellInTeamsInWorkplace(x) & TiredEveryMonday(x)) | (-WorksWellInTeamsInWorkplace(x) & TiredEveryMonday(x)))))", "(WorksWellInTeams(Kat) & EveryMorningTreated(Kat)) | (-WorksWellInTeams(Kat) & EveryMorningTreated(Kat))))", "(all x.((Person(x) & WorksWellInTeams(x) & Workplace(x) & TiredEveryMorning(x)) | (-WorksWellInTeams(x) & Workplace(x) & -GetsTreatedEveryMorning(x))))", "all x.(Kat(x) -> (WorksWellInTeams(x) & -WorksWellInTeams(x) & -WorksWellInTeams(x) & -WorksWellInTeams(x) & -WorksTallEveryMorning(x)))", "((WorksWellInTeams(Kat) & Is(Kat)) | (WorksWellInTeams(Kat) & Is(Kat)))) & -WorksWellInTeams(Kat) & Is(Kat))"]}
{"id": "folio_train_1206", "nl": "Kat is a person who comes to work every day with a positive attitude.", "fol": "ComesToWorkWithPositiveAttitude(Kat)", "prediction": ["all x.(Kat(x) -> ComesToWorkEveryDayWithPositiveAttitude(x))", "all x.((Person(x) & ComesToWorkEveryDay(x) & PositiveAttitude(x)) -> Kat(x))", "all x y z.((Person(x) & WorkDay(y) & PositiveAttitude(z)) -> ComesTo(x,y,z))", "all x.(Kat(x) -> ComesToWorkEveryDayWithPositiveAttitude(x))", "all x.(Kat(x) -> (ComesToWorkEveryDay(x) & PositiveAttitude(x)))", "all x.(Kat(x) -> ComesToWorkEveryDayWithPositiveAttitude(x))", "all x.(Kat(x) -> (ComesToWorkAnywhereWithPositiveAttitude(x)))", "all x.(Kat(x) -> (ComesToWorkAttention(x) & PositiveAttitude(x)))", "all x.(Kat(x) -> (ComesToWorkEveryDayWithPositiveAttitude(x)))", "exists x.(PositiveAttitude(x) & ComesToWork(x))", "all x.(Kat(x) & ComesToWorkEveryDayWithPositiveAttitude(x))", "all x.(HopefulAttitude(x) -> ComesToWorkEveryDay(x))", "all x y.((Person(x) & Person(y) & ComesToWork(x) & PositiveAttitude(y)) -> PositiveAttitude(y))", "all x y.((Kat(x) & Day(y)) -> ComesToWorkWithPositiveAttitude(x,y))", "all x.(Kat(x) -> (ComesToWorkEveryDay(x) & PositiveAttitude(x)))", "all x.(Kat(x) -> (PositiveAttitude(x) & ComesToWork(x)))"]}
{"id": "folio_train_1207", "nl": "Kat gets along with her colleagues at her work and receives negative feedback from teams at her work.", "fol": "(GetsAlongWithColleagues(Kat) & ReceivesNegativeFeedback(Kat))", "prediction": ["all x y z.((Kat(x) & Work(y) & Team(z)) -> (GasksAt(x,y) & ReceivesNegativeFeedback(x,z)))", "all x y.((Kat(x) & Work(y) & Works(x,y)) -> (GivesOnComrades(x,y) & ReceivesNegativeFeedback(x,y)))", "all x y.((Kat(x) & Work(y)) -> (GetsAlong(x,y) & PositiveFeedback(y)))", "all x y z.((Kat(x) & Employee(y) & Work(z)) -> (Granites(x,y,z) & PositiveFeedback(x,y,z)))", "all x y.((Kat(x) & Work(y)) -> (GetsCoworkerAt(x,y) & ReceivesNegativeFeedback(x,z)))", "all x.((Kat(x) & Colleagues(x)) -> (GetsOnWith(x,y) & ReceivesNegativeFeedback(y)))", "all x y.((Kat(x) & Work(y)) -> (GasesWith(x,y) | NegativeFeedback(x,y)))", "all x.(Kat(x) -> (GetsCoworkersTogether(x) & ReceivesNegativeFeedback(x)))", "all x.(Kat(x) -> (GetsTogether(x) & Colleagues(x) & NegativeFeedback(x)))", "all x y.((Kat(x) & Work(y)) -> (GetsOnGuide(x,y) & ReceivesNegativeFeedback(x,y)))", "exists x y z.((Kat(x) & Coworker(y) & Work(z) & GetsTogether(x,y,z) & PositiveFeedback(x,y)))", "all x y.((Kat(x) & Team(y)) -> (CoachesWith(x,y) & NegativeFeedback(y)))", "all x y.((Kat(x) & Team(y)) -> (GetsTogetherWithCoworkers(x,y) & ReceivesNegativeFeedback(x,y)))", "all x y.((Kat(x) & Team(y)) -> (GasesIn(x,y) & NegativeFeedback(x,y)))", "all x y.((Kat(x) & Work(y)) -> (GetsOnDemand(x,y) & DoesNegativeFeedback(x,y)))", "all x.(Kat(x) & ColleaguesAtWork(x) & NegativeFeedback(x))"]}
{"id": "folio_train_1208", "nl": "Kat either gets along with her colleagues at her work or receives negative feedback from teams at her work.", "fol": "(GetsAlongWithColleagues(Kat) | ReceivesNegativeFeedback(Kat))", "prediction": ["all x y.((Kat(x) & Work(y)) -> (GetsAlongWithColleagues(x,y) | NegativeFeedbackFromTeams(x,y)))", "all x y.((Kat(x) & Work(y)) -> (GaisesAt(x,y) | NegativeFeedback(x)))", "(all x.((Kat(x) & Team(z)) & (GetsInFormWith(x,z) | NegativeFeedback(x,z)))) -> SheWork(x))", "(GranularCompanies(Kat) | NegativeFeedback(Kat)))", "all x.(Kat(x) -> (GivesTo colleagues(x) | ReceivesNegativeFeedback(x)))", "(all x.(Kat(x) -> (GetsAtWork(x) | NegativeFeedback(x))))", "all x y.((Kat(x) & Work(y)) -> (GoesWithCoworkers(x,y) | ReceivesNegativeFeedback(x,y)))", "all x y.((Kat(x) & Work(y)) -> (GetsCoworkersAt(x,y) | NegativeFeedbackFromTeams(x,y)))", "(all x y.((Kat(x) & Work(y)) -> (GetsGoodWithCoworkers(x,y) | NegativeFeedback(y))))", "all x y.((Kat(x) & Work(y)) -> ((CoworkerToy(x,y) | NegativeFeedback(x,y))))", "all x y z.((Kat(x) & Work(y) & Work(z)) -> (Gets(x,y) | NegativeFeedback(x,z)))", "all x y.((Kat(x) & Work(y)) -> ((GasesWith(x,y) | NegativeFeedback(x,y))))", "(GrowsCoworkersAtWork(Kat) | NegativeFeedback(Kat)))", "all x.(Kat(x) -> (GetsTooOnlyWithCoworkers(x) | NegativeFeedbackFromTeams(x)))", "all x.((Kat(x) & Work(y)) -> (GetsOnside(x,y) | NegativeFeedbackFromTeams(x,y)))", "((Kat(kat) & NewCoworkers(kat)) & (GetsWith(kat,e) | NegativeFeedback(kat,e))))"]}
{"id": "folio_train_1209", "nl": "Drishti is open-source.", "fol": "IsOpenSource(Drishti)", "prediction": ["all x.(Drishti(x) -> OpenSource(x))", "all x.(Drishti(x) -> OpenSource(x))", "all x.(Dishti(x) -> OpenSource(x))", "all x.(Drishti(x) -> OpenSource(x))", "all x.(Drishti(x) -> OpenSource(x))", "all x.(Drishti(x) -> OpenSource(x))", "all x.(Drishti(x) -> OpenSource(x))", "all x.(Drishti(x) -> OpenSource(x))", "all x.(Drishti(x) -> OpenSource(x))", "all x.(Drishti(x) -> OpenSource(x))", "all x.(Drishti(x) -> OpenSource(x))", "all x.(Drishti(x) -> OpenSource(x))", "all x.(Drishti(x) -> OpenSource(x))", "all x.(Dashti(x) -> OpenSource(x))", "all x.(Drishti(x) -> OpenSource(x))", "all x.(Drishti(x) -> OpenSource(x))"]}
{"id": "folio_train_1210", "nl": "Open-source software is free to modify.", "fol": "all x.(IsOpenSource(x) -> IsFreeToModify(x))", "prediction": ["all x.(OpenSourceSoftware(x) -> FreeToModify(x))", "all x.(OpenSourceSoftware(x) -> FreeToModify(x))", "all x.(OpenSourceSoftware(x) -> FreeToModify(x))", "all x.(OpenSourceSoftware(x) -> FreeToModify(x))", "all x.(OpenSource(x) -> FreeToModify(x))", "all x.(OpenSourceSoftware(x) -> FreeToModify(x))", "all x.(OpenSourceSoftware(x) -> FreeToModify(x))", "all x.(OpenSourceSoftware(x) -> FreeToModify(x))", "all x.(OpenSsourceSoftware(x) -> FreeToModify(x))", "all x.(OpenSourceSoftware(x) -> FreeToModify(x))", "all x.(OpenSourceSoftware(x) -> FreeToModify(x))", "all x.(OpenSourceSoftware(x) -> FreeToModify(x))", "all x.(OpenSourceSoftware(x) -> FreeToModify(x))", "all x.(OpenSourceSoftware(x) -> FreeToModify(x))", "all x.(OpenSourceSoftware(x) -> FreeToModify(x))", "all x.(OpenSourceSoftware(x) -> FreeToModify(x))"]}
{"id": "folio_train_1211", "nl": "Drishti is free to modify.", "fol": "IsFreeToModify(Drishti)", "prediction": ["all x.(Drishti(x) -> FreeToModify(x))", "all x.(Drishti(x) -> FREEToModify(x))", "all x.(Drishti(x) -> FreeToModify(x))", "all x.(Drishti(x) -> FreeToModify(x))", "all x.(Drishti(x) -> FreeToModify(x))", "all x.(Drishti(x) -> FreeToModify(x))", "all x.(Debti(x) -> FreeToModify(x))", "all x.(Dishti(x) -> FreeToModify(x))", "all x.(Drishti(x) -> FreeToModify(x))", "all x.(Drishti(x) -> FreeToModify(x))", "all x.(Drishti(x) -> FreeToModify(x))", "all x.(Drishti(x) -> FreeToModify(x))", "all x.(Drishti(x) -> FreeToModify(x))", "all x.(Drishti(x) -> FreeToModify(x))", "all x.(Drishti(x) -> FreeToModify(x))", "all x.(Drishti(x) -> FreeToModify(x))"]}
{"id": "folio_train_1212", "nl": "There are five grades including A+, A, B+, B, and C in English.", "fol": "(GradeInEnglish(Aplus) | GradeInEnglish(a) | GradeInEnglish(Bplus) | GradeInEnglish(b) | GradeInEnglish(c))", "prediction": ["exists x.(Englisch(x) & Grade(x,A+,A,B,C))", "all x.(A+(x) -> (A+(x) | A+(x) | B+(x) | B(x) | C(x)))", "all x.((Grade(x) & GradeFive(x)) -> (A+(x) | A+(x) | B+(x) | B+(x) | C(x))))", "exists x.(Grade(x) & (A+(x) | A+(x)) | B+(x) | B+(x) | C(x))))", "(English(A+) & A+(B+) & B+(B) & C(R)))", "(English(a) & A+ (a) & B+ (b)) & B(c) & C(g)))", "exists x.(Grade(x) & IncludesGrades(x,A+) & IncludesGrades(x,B+) & IncludesGrades(x,B) & IncludesGrades(x,C))", "all x.(Section(x) -> (A+(x) | A+(x) | B+(x) | B+(x) | C(x))))", "exists x.(Grade(x,A+) & Grade(x,A,B) & Grade(x,B) & Grade(x,C))", "exists x.(EnglishGrade(x) & (A+(x) | A+(x) | B+(x) | B+(x) | C(x)))", "All x.(Englisch(x) -> (A+(x) | A+(x) | B+(x) | B+(x) | C(x))))", "all x.((EnglishGrade(x) & A+(x) | A+(x) | B+(x) | B+(x) | C(x))) -> ElementaryGrade(x))", "all x.((EngLanguage(x) & Grade(x)) -> (A+(x) & Grade(x) & Grade(x)) | Grade(x) & Grade(x) & Grade(x,y)))", "all x y z.((Graphic(x) & Grade(y) & Grade(z) & (A+) | A+(z) | B+(z) | B+(z) | C(z))) -> A+(y) & A+(y) & A+(z)))", "exists x.(Grade(x,England) & IncludesGrades(x,A,A,B) & IncludesGrades(x,B) & IncludesGrades(x,C))", "(All x.(EnglishGrade(x) -> (A+(x) | A+(x) | B+(x) | B+(x) | C(x))))"]}
{"id": "folio_train_1213", "nl": "If a student gets A+ in English, then his score is greater than 95.", "fol": "all x.(StudentGetsGrade(x,Aplus) -> (ScoreGreaterThan95(x) & -ScoreLowerThan90(x)))", "prediction": ["all x.((Student(x) & AcquiresA+InEnglish(x)) -> ScoreGreaterThan95(x))", "all x.((Student(x) & ScoreGreaterThan(x,95)) -> A+English(x))", "all x.((Student(x) & A+(x)) -> ScoreGreaterThan95(x))", "all x.((Student(x) & A+English(x)) -> ScoreGreaterThan(x,95))", "all x.((Student(x) & A+English(x)) -> ScoreGreaterThan95(x))", "all x.((Student(x) & A+Englisch(x)) -> ScoreGreaterThan(x,95))", "all x.((Student(x) & A+InEnglish(x)) -> ScoreGreaterThan95(x))", "all x.((Student(x) & GetsA+InEnglish(x)) -> ScoreGreaterThan95(x))", "all x.((Student(x) & A+English(x)) -> ScoreGreaterThan95(x))", "all x.(A+InEnglish(x) -> ScoreGreaterThan(x,95))", "all x.(A+(Student(x) -> ScoreGreaterThan95(x))", "all x.((Student(x) & AcceedsA+InEnglish(x)) -> ScoreGreaterThan(x,95))", "all x.(A+English(x) -> ScoreGreaterThan(x,95))", "all x.((Student(x) & GetsA+(x) & InEnglish(x)) -> ScoreGreaterThan95(x))", "all x.((Student(x) & GetsA+InEnglish(x)) -> GreaterThan95(x))", "all x.((Student(x) & GetsA+(x) & ScoreGreaterThan(x,95)) -> ScoreGreaterThan(x,95))"]}
{"id": "folio_train_1214", "nl": "If a student gets A in English, then his score is in the range of 90-95.", "fol": "all x.(StudentGetsGrade(x,a) -> (-ScoreGreaterThan95(x) & -ScoreLowerThan90(x)))", "prediction": ["all x.(Espanic(x) -> ScoreInRangeOf9095(x))", "all x.((Student(x) & GoesAInEnglish(x)) -> ScoreInRangeIn60+95(x))", "all x.((Student(x) & GetsAInEnglish(x)) -> ScoreInRangeOf90-95(x))", "all x.((Student(x) & GetsA(x) & InEngland(x)) -> ScoreInRange(x,90,95))", "all x.((Student(x) & SolvesInReach(x,90) & SolvesA,95)) -> ScoreInRange(x,90))", "all x y.((Student(x) & A(y)) -> (Arbor(x,y) & ScoreInRangeOf90,95)))", "all x.(GiveAInEnglisch(x) -> ScoreInRange(x,90))", "all x.(HacksAInEnglish(x) -> ScoreInRangeOf909695(x))", "all x.((Student(x) & GivesAInEnglish(x)) -> ScoreInRangeOf(x,90,95))", "all x.(Essay(x) -> ScoreInRangeOf90to95(x))", "all x.((Student(x) & ReceivesAInEnglish(x)) -> ScoreInRangeOf90To95(x))", "all x.((Student(x) & GetsAInEnglish(x)) -> ScoreInRange(x,90,95))", "all x.((Student(x) & A(x)) -> ScoreInRange(x,90-95))", "all x.((Student(x) & GetsAInEnglish(x)) -> ScoreInRangeOf(x,90,95))", "all x.((Student(x) & GetsA(x) & ScoreInRangeOf90To95(x)) -> GetsA(x))", "all x.((Student(x) & ScoreNear90(x) & ScoreInRange(x,0-5)) -> GetsA(x))"]}
{"id": "folio_train_1215", "nl": "Zhang got an A in English.", "fol": "StudentGetsGrade(Zhang,a)", "prediction": ["-(Zhangzheng-Zhu) gotA(Zha) & English(z))", "Zhang got A in English.", "Zhang GraspsA(Zhang,English)", "Zhang got A in English.", "(A inEnglish) -> Zhang.", "Zhang got A in English.", "Zhang got A in English.", "Zhang is now bilingual (A in English)", "(A InEngland(z) | ZhangGared(z,Eng)))", "Zhang had A in English.", "Zhang got A in English.", "Zhang a.e.(English(z) & A(z))", "Zhang got A in English.", "(1995) & Zhang(Zhang) & English(Z)) -> GetsA(Zhang,A))", "Zhang got A in English.", "(AboutA(Zhang) | AInEnglish(Zhang)))"]}
{"id": "folio_train_1216", "nl": "Wang's English score is better than Zhang's.", "fol": "ScoreIsBetterThan(Wang,Zhang)", "prediction": ["(BetterEnglishScore(Wang,X) & BetterEnglishScore(Zhang,Y))", "all x y.((Wang(x) & Zhang(y)) -> ScoreBetter(x,y))", "(BetterEnglishScore(Shang,x) | BetterEnglishScore(Shang,x)))", "(EnglishScore(Wang,x) & Better(Zhang,x))", "all x y.((Wang(x) & Zhang(y)) -> BetterEnglandScore(x,y))", "all x y.((Wang(x) & Zhang(y)) -> BetterEnglandScore(x,y))", "(BetterEarLanguage(Wang,x) & BetterEnglishScore(Wang,x))", "all x y.((Wind(x) & Zhang(y)) -> BetterEnglishScore(x,y))", "(BetterEnglandScore(hang,x))", "(EnglishScoreBetter(Wang) & EnglishScoreBetter(Wang))", "all x y.((Wang(x) & Zhang(y)) -> BetterEnglishScore(x,y))", "(BetterEssay(Wang,English) & BetterEssay(Zhang,Essay))", "all x y.((Wan(x) & Zhang(y)) -> BetterEnglishScore(x,y))", "all x y.((Wang(x) & Zhang(y)) -> BetterEnglishScore(x,y))", "(EnglishScore(Wang) & EnglishScore(Wang,Zhang))", "(EnglishScoreBetter(Wang,Zhang,Zhang))"]}
{"id": "folio_train_1217", "nl": "Wu's English score is lower than 90.", "fol": "ScoreLowerThan90(Wu)", "prediction": ["(EnglishScoreLaterThan90(X) & Wu(x))", "(LiderThan90( Wu,EnglishScore) -> LessThan90(Wu,EnglishScore))", "(EnglischScore(Wu) -> LowerThan90(Wu))", "(LowERLowerThan(X,90))", "-(Wu'sEnglishScore(Wu) & LowerThan(Wu,90))", "(EnglishScore(Wu) & LowerThan90(Wu,9))", "(EnglandScore(Wu,90) & LowerThan(Wu,90))", "(EnglishScore(Wu,90))", "(EnglishScore(Wu) -> LowerThan90(Wu))", "(EnglishScore(Wu) & LowerThan(Wu,90))", "(EnglishScore(Wu) & LowerThan(Wu,180))", "(1985) -(Score(Wu) & English(Wu)))", "(EnglishScore(wu) -90))", "(EnglishScore(Wu) & LowerThan(Wu,90))", "(EnglishScore(Wu,90))", "all x.((Wu(x) & EnglishScore(x,90)) -> LowerThan(x,90))"]}
{"id": "folio_train_1218", "nl": "Zhang's English score is lower than 95.", "fol": "-ScoreGreaterThan95(Zhang)", "prediction": ["(EnglishScore(z) & LowerThan(z,95))", "(EnglishScore(Zhang,95))", "(EnglishScoreLessThan(Zhang,95))", "(EnglishScore(z):LessThan(z,95))", "(10) - ChineseScore(Zhang,95))", "Zeiland\u2019s EnglishScoreLowerThan(Zhang,95)", "(SpanishScore(Zhang) & LowerThan95(Zhang))", "all x y.((ZhangLittleEnglishScore(x,y)) -> LowerThan(y,95))", "The English Score of Zhang (z) -> LowerThan(z,95))", "Zhang's EnglishScoreAtLessThan(Zhang,95)", "(EnglishScore(Zhang) & LessThan(Zhang,95))", "(EnglischScore(z) & LowerThan95(z))", "all x.((ZhangLength(x) & EnglishScore(x,95)) -> -LowerThan(x,95))", "(EnglishScore(Zhang,95))", "(EnglishScore(Zhang,95))", "Currently, Zhang's EuropeanScoreLowerThan(z,95)"]}
{"id": "folio_train_1219", "nl": "Wang got an A+ in English.", "fol": "StudentGetsGrade(Wang,Aplus)", "prediction": ["(A+English) | -A+Essay(Wang,Essay)))", "Wang got A+ in English.", "(A+(Wang) | InEnglish(Wang)))", "Wang got a+ in English.", "(VeryGoodA+Speaker(Wang))", "(Good(Wang,English) & A+(Wang,English))", "Wang received A+ in English.", "all x.((Wang(x) & ReadsEnglish(x)) -> A+(x))", "Wang got A+ in English.", "(A+English(Wang))", "Wang got A+ in English.", "Said A+English(Wang)", "Wang got A+ in English.", "He also got AnA+InEnglish(Wang)", "(A+(Wang) -> English(Wang))", "(A+(Wang,English))"]}
{"id": "folio_train_1220", "nl": "Wu does not get an A or A+ in English.", "fol": "(-StudentGetsGrade(Wu,a) & -StudentGetsGrade(Wu,Aplus))", "prediction": ["(Desh(Wu) & -(English) | English(w))))", "(-A+ or A+Answer(x))", "all x.(Wu(x) -> (-(GetsA(x) | GetsA+(x)) inEnglish(x))))", "(-GetsA(Wu-Sensation(Wu) & -GetsA+(Wu))", "all x.(Wu(x) -> (-Is(x and A+(x)))", "(-(Wu(w) | A+(w)))", "(MeetsA(Wu),Edel(Wu) & -GetsA(Wu,Eu) & -GetsA+(wu,Eu))", "(-(Violate(Wu) & English(Wu)) -> (GetsA(Wu) | GetsA+(Wu)))", "(-(Zwa[z]) & -(A(z) & InEnglish(z))) -> -(A(z) | A+(z))))", "Wu -((GetA(X) | GetA+InEnglish(x)))", "all x.(Wu(x) -> -(A+(x) & Chinese(x)))", "all x.(Wu(x) -> (-GivesA(x) | GetsA+(x)))", "(all x.(Wu(x) -> (-A(x) | A+(x))))", "(Zudos(Wu) & English(Wu & -(FavoriteName(Wu) | FavoriteName(Wu))))", "all x.(Wu(x) -> -((A+Tenor(x) & -A+Tenor(x))))", "(Is(Wu) & -(IsA(Wu) | IsA+(Wu))))"]}
{"id": "folio_train_1221", "nl": "Olivia doesn't prefer warm temperature during the day.", "fol": "all x.(IsDay(x) -> -PrefersWarmTemperatureAt(Olivia,x))", "prediction": ["-PrefersWarmTemperature(Oyella,Day)", "Olivias temperature is not likely by day.", "(Olivia(Olivia) & -PrefersWarmTemperature(Olivia,Day))", "-PrefersWarmTemperatureDuringDay(Olivia)", "-PrefersWarmTemperatureDuringDay(Ovia,Day)", "(-PrefersWarmTemperature(Olivia))", "inquiring.(Olivia(Olivia) -> -PrefersWarmTemperature(Olivia))", "-PrefersWarmTemperature(Oliver)", "does notPrefersWarmTemperatureDuringDay(Olympus)", "all x.(Olivia(x) -> -PrefersWarmTemperatureDuringDay(x))", "(-PrefersWarmTemperature(Olivia,Day))", "Olivia neghetsWarmTemperatureAtDay(Olivia)", "-(PrimaryWarmTemperature(Olivia) & Day(Olivia))", "(PrefersWarmTemperature(Olivia) & -PrefersWarmTemperature(Olivia))", "-(PrefersWarmTemperature(Olivia))", "(NothingIsWarmTemperature(Olivia) & -(PrefersWarmTemperature(Olivia) & Day(Olivia)))"]}
{"id": "folio_train_1222", "nl": "When Olivia sleeps, she prefers cool temperature.", "fol": "all x.(IsSleepingDuring(Olivia,x) -> PrefersCoolTemperatureAt(Olivia,x))", "prediction": ["all x.((OliviaSleeps(x) & CoolTemperature(x)) -> Prefers(x,y))", "all x.((Olivia(x) -> Sleeps(x)) | (PrefersCoolTemperature(x) & Ophelia(x))))", "all x.((Olivia(x) & Sleeps(x)) -> PrefersCoolTemperature(x))", "(All x.((Olivia(x) & Sleeps(x)) -> PrefersCoolTemperature(x)))", "all x.((Sleepers(x) & OliviaIn(x)) -> Heat(x))", "all x.(Sleeps(x) -> PrefersCoolTemperature(x))", "all x.((Noise(x) & Sleeps(x)) -> PrefersCoolTemperature(x))", "everything about sleeps(Olafia=PrefersCoolTemperature(Olivia))", "all x.((Olivia(x) & Sleeps(x)) -> PrefersCoolTemperature(x))", "all x.((Olivia(x) & Sleeps(x)) -> PrefersColdTemperature(x))", "all x.((Oliver(x) & Sleeps(x)) -> PrefersColdTemperature(x))", "all x.((Olivia(x) & Sleeps(x)) -> PrefersCoolTemperature(x))", "all x.((Olivienne(x) & Sleeps(x)) -> PrefersCoolTemperature(x))", "all x.((Olivia(x) & Sleeps(x)) -> LikesColdTemperature(x))", "All x.((Olivia(x) & Sleeps(x)) -> PrefersCoolTemperature(x))", "all x.(SleepsOliver(x) -> PrefersColdTemperature(x))"]}
{"id": "folio_train_1223", "nl": "Olivia sleeps during the night.", "fol": "all x.(IsSleepingDuring(Olivia,x) -> IsNight(x))", "prediction": ["all x.(Olivia(x) -> SleepsAtNight(x))", "(Sleeps(Olivia,Night))", "all x.(Olivia(x) -> SkewsDuring(x,Night))", "all x.((Oliver(x) & NightShape(x)) -> Sleeps(x))", "is a sleeper(Olivia)", "Olivia SleepsDuringNight(Olivia)", "all x.(Oliviana(x) -> SleepsDuringNight(x))", "-Oma(Olivia) SleepsDuringNight(ololo)", "all x.((Oliver(x) & SleepsUnderNight(x)) -> Sleeps(x,y))", "is sleepy(Oliviana)", "all x.(Oliver(x) -> SleepsDuringNight(x))", "all x.(Olivia(x) -> SleepsDuring(x,night))", ",Nov.(Oliver(Olivia) -> SleepsDuringNight(Olivia,Olivia))", "all x.(Oscar(x) -> SleepsDuringNight(x))", "all x.(Olivia(x) -> SleepsDuringNight(x))", "Olivia sleeps during the night."]}
{"id": "folio_train_1224", "nl": "Olivia works during the day.", "fol": "all x.(IsWorkingDuring(Olivia,x) -> IsDay(x))", "prediction": ["Olivia works during the day.", "Olivia works during the day.", "Olivia works DuringDay(Olivia)", "all x y.((Olivia(x) & Day(y)) -> WorksDuring(x,y))", "in the day.", "Olivia works during the Day.", "Olivia works during the day", "Olivia works during the day.", "-WorksDuringDay(Olivia)", "(WorksDuringDay(Olivia)", "(WorksDuringDay(Olivia))", "all x.(Oscar(x) -> WorksDuringDay(x))", "all x.(Olivia(x) -> WorksDuringDay(x))", "Olivia works during the day.", "Alles x.(Olivia(x) -> WorksDuringDay(x))", "worksDuringDay(Olivia,Day)"]}
{"id": "folio_train_1225", "nl": "Olivia either works or sleeps.", "fol": "all x.(IsWorkingDuring(Olivia,x) | IsSleepingDuring(Olivia,x))", "prediction": ["exists x.(Olivia(x) & (Works(x) | Sleeps(x))))", "(Works(Olivia) | Sleeps(Olivia))", "(Works) | Sleeps(ObiAnne))", "all x.(Olympus(x) -> (Works(x) | Sleeps(x)))", "Olivia either works or sleeps.", "all x.(Oyella(x) -> (Works(x) | Sleeps(x)))", "(Works(Olivia) | Sleeps(Olivia))", "Allergic.(Olivia(Olivia) -> (Works(Olivia) | Sleeps(Olivia)))", "All x y.((Olivia(x) & Work(y)) | Sleeps(y))", "Olivia exists x.(Works(x) | Sleeps(x))", "exists x.(Olivienne(x) & (Works(x) | Sleeps(x)))", "all x.(Oliver(x) -> (Works(x) | Sleeps(x)))", "all x.(Oliver(x) -> (Works(x) | Sleeps(x)))", "Olivia exists x.(Works(x) | Sleeps(x))", "all x.(Oscar(x) -> (Works(x) | Sleeps(x)))", "all x.(Oscar(x) -> (Works(x) | Sleeps(x)))"]}
{"id": "folio_train_1226", "nl": "The time is either the day or the night.", "fol": "all x.(IsDay(x) | IsNight(x))", "prediction": ["all x.(Time(x) -> (Day(x) | Night(x)))", "all x.(Time(x) -> (Day(x) | Night(x)))", "all x.(Time(x) -> (Day(x) | Night(x)))", "all x.(Time(x) -> (Day(x) | Night(x)))", "all x.(Time(x) -> (Day(x) | Night(x)))", "-(ShowTime(x) & (Day(x) | Night(x)))", "(Dead(Daily) | Night(Dark(Dark)))", "all x.(Time(x) -> (Day(x) | Night(x)))", "all x.(Time(x,day) | Night(x))", "all x.(Time(x) -> (Day(x) | Night(x)))", "all x.(Time(x) -> ((Day(x) | Night(x))))", "(Time(x,Day) | Time(x,Night)))", "all x.(Time(x) -> (Day(x) | Night(x)))", "exists x.(Time(x) & (Day(x) | Night(x)))", "all x.(Time(x) -> (Day(x) | Night(x)))", "all x.(Time(x) -> (Day(x) | Night(x)))"]}
{"id": "folio_train_1227", "nl": "Olivia either prefers warm temperature or prefers cool temperature.", "fol": "all x.(PrefersWarmTemperatureAt(Olivia,x) | PrefersCoolTemperatureAt(Olivia,x))", "prediction": ["(PrefersWarmTemperature(Olivia) | PrefersCoolTemperature(Olivia))", "Olivia either prefersWarmTemperatureOrColdTemperature(Olivia)", "(PrefersWarmTemperature(Olivia) | PrefersColdTemperature(Olivia))", "(PrefersWarmTemperature(Olivia) | PrefersColdTemperature(Olivia))", "(PrefersWarmTemperature(Oliver) | PrefersColdTemperature(Oliver))", "(PrefersWarmTemperature(Olivia,MadeIn(Olivia,MadeIn(Olivia,CleanTemperature))", "(PrefersWarmTemperature(Olympus) | PrefersCoolTemperature(Olympus))", "(PrefersWarmTemperature(Oliver) | PrefersCoolTemperature(Oliver)))", "(PrefersWarmTemperature(Olivia) | PrefersColdTemperature(Olivia))", "all x.(Olivia(x) -> ((PrefersWarmTemperature(x) | PrefersColdTemperature(x))))", "all x.(Oliviana(x) -> (PrefersWarmTemperature(x) | PrefersColdTemperature(x)))", "all x y.((Olivia(x) & WarmTemperature(y)) | CoolTemperature(y)) -> -Prefers(x,y))", "(PrefersWarmTemperature(Olivia) | PrefersCoolTemperature(Olivia))", "all x.(Official(x) -> (PrefersWarmTemperature(x) | PrefersCoolTemperature(x)))", "Olivia prefersWarm(oxygen) | LikesCool(oxygen))", "Olivia prefersWarmTemperature(Oliver) | PrefersCoolTemperature(Oliver))"]}
{"id": "folio_train_1228", "nl": "At all times, Olivia prefers cool temperature.", "fol": "all x.(Time(x) -> PrefersCoolTemperatureAt(Olivia,x))", "prediction": ["all x.((Olivia(x) & ColdTemperature(x)) -> Prefers(x,y))", "all x.((Olliota(x) & CoolTemperature(x)) -> Prefers(x,y))", "all x.(Olivia(x) -> PrefersCoolTemperature(x))", "all x.((Oliver(x) & CoolTemperature(x)) -> Prefers(x,y))", "all-x.((Olivie(x) & CoolTemperature(x)) -> Favors(x))", "((Olivia(Olivia) & CoolTemperature(Olivia)) | KeepsTemperature(Olivia)))", "all x.(Option(x) -> PrefersCoolTemperature(x))", "all x.((Olivia(x) & CoolTemperature(x)) -> Prefers(x,y))", "all x.((Oliver(x) & CoolTemperature(x)) -> Prefers(x))", "All x.((Olivia(x) & CoolTemperature(x)) -> Prefers(x,y))", "all x.(Olivonia(x) -> PrefersCoolTemperature(x))", "(PrefersColdTemperature(Olivia,AllTimes))", "all x y.((Olivia(x) & CoolTemperature(x)) -> Prefers(x,y))", "all x.((Orange(x) & CoolTemperature(x)) -> Prefers(x))", "all x.((Oliver(x) & CoolTemperature(x)) -> Prefers(x,y))", "all x.((Olivia(x) & CoolTemperature(x)) -> Likes(x))"]}
{"id": "folio_train_1229", "nl": "Taylor Swift gives a commencement speech in New York University in 2022.", "fol": "GivesCommencementSpeech(TaylorSwift,Nyc)", "prediction": ["all x.(InNewYorkUniversity(x,2022) -> GivesCommitmentSpeech(x))", "all x.((TaylorSwift(x) & NewYorkUniversity(x)) -> GivesCommitmentSpeech(x,2022))", "(GivesEntertainmentSpeech(TaylorSwift,2022) | InNewYorkUniversity(taylorSWift,2022)))", "all x.((TaylorSwift(x) & NewYorkUniversity(x) & 2022(TaylorSwift(x)) -> GivesCommitmentSpeech(x))", "all x y z.((TaylorSwift(x) & NewYorkUniversity(y) & CommencementSpeech(z)) -> GivesIn(x,y,z))", "(GivesCeremonySpeechToTaylorSwift(testiay,2019) & NewYorkUniversity(t) & In2022(taylors.swift))", "all x y.((TaylorSwift(x) & University(y) & NewYork(x,y)) -> (GivesCommitmentSpeech(x,y) & NewYork(y) & Together(x,y)))", "all x y z.((TaylorSwift(x) & NewYorkUniversity(y) & 2022(z) & GivesCommitmentSpeech(x,y)) -> GivesSpeech(x,y,z))", "(ElevationSpeech(TaylorSwift,NewYork) & 2022(TaylorSwift,NewYork))", "all x y z.((TaylorSwift(x) & NewYorkUniversity(y) & 2022(z)) -> GivesCommitmentSpeech(x,y,z))", "all x y.((TaylorSwift(x) & NewYorkUniversity(y)) -> GivesCommitmentSpeechIn(x,y))", "Taylor Swift gives commencements(TaylorSwift,2022)", "all x.(GiftsBeginment(x,2022) -> TaylorSwift(x))", "all x y.((TaylorSwift(x) & NewYorkUniversity(y) & 2022(x)) -> GivesPrimarySpeech(x,y))", "(GivesDebutingSpeech(TaylorSwift,NewYorkUniversity,2022))", "all x y.((TailorSwift(x) & University(y)) -> GivesCommitmentSpeech(x,y))"]}
{"id": "folio_train_1230", "nl": "Both Columbia University and New York University are located in Manhattan.", "fol": "(LocatedInManhattan(ColumbiaUniversity) & LocatedInManhattan(Nyc))", "prediction": ["all x y.((ColumbiaUniversity(x) & NewYorkUniversity(y)) -> LocationIn(x,y))", "both Columbia University and New YorkUniversity are located in Manhattan.", "all x y.((ColumbiaUniversity(x) & NewYorkUniversity(y)) -> (LivingIn(x,Manhattan) & LocatedIn(x,Manhattan)))", "(LiveInMetropolitan(ColumbiaUniversity) | LiveInNewYorkUniversity))", "all x.((ColumbiaUniversity(x) | NewYorkUniversity(x)) -> locatedIn(x,Manhattan))", "(both ColumbiaUniversity(Columbia) & NewYorkUniversity(NewYork))", "all x.((ColumbiaUniversity(x) & NewYorkUniversity(x)) -> Manhattan(x))", "all x y.((ColumbiaUniversity(x) & NewYorkUniversity(y)) -> LocationInMiles(x,y))", "(AttributesToColumbia(Columbia) & AttributesToNewYork(NewYorkU))", "all x.((ColumbiaUniversity(x) & NewYorkUniversity(x)) -> LocatedIn(x,Mennonito))", "all x y.((ColumbiaUniversity(x) & University(y)) -> (LocatedIn(x,y) & LocatedIn(y,y)))", "(University(Columbia) & University(NewYork))", "all x.(ColumbiaUniversity(x) & NewYorkUniversity(x))", "all x.((ColumbiaUniversity(x) & NewYorkUniversity(x)) -> LocatedIn(x,Midtown))", "(All x.(ColumbiaUniversity(x) & All y.(NewYorkUniversity(y)) -> LocatedIn(x,y)))", "both Columbia and New York University located in Manhattan."]}
{"id": "folio_train_1231", "nl": "Taylor Swift has received three Grammy Album of the Year Awards.", "fol": "ReceivedThreeGrammyAwards(TaylorSwift)", "prediction": ["All x.(TaylorSwift(x) -> ReceivedThreeGrammyAlbumOfTheYearAwards(x))", "(ForMission(TaylorSwift) & ReceivedThreeGrammyAwards(TaylorSwift,1))", "ALL x.(TaylorSwift(x) -> ReceivedThreeGrammyAlbumOfTheYearAwards(x))", "(GrammyAwards(T TaylorSwift) & GrammyAwards(TaylorSwift3))", "three GrammyAlbumOfYearAwards(TaylorSwift)", "All x.(SwiftTier(x) -> ReceivesTwoGrammyAlbumOfTheYearAwards(x))", "TaylorSwift(TylerSwift) & BeenReceivedThreeGrammyAwards(TeasonSwift,FourGrammyAwards))", "(SwiftAndTaylor(Taylor) & ReceivedThreeGrammyAlbumOfYearAwards(Taylor))", "(GrammyAlbumOfYearEnvy(TaylorSwift) & ReceivedThree(TaylorSwift,3))", "TaylorSwift(TM) & ReceivedThreeGrammyAlbumOfYears(TM)", "(NominatedFor(TaylorSwift) -> AlbumOfFour(TaylorSwift3))", "All x.(TaylorSwift(x) -> ReceivedThreeGrammyAlbumOfWorthAwards(x))", "TaylorSwift has receivedThreeGrammyAlbumOfYears(Terrain,Musical) & Awards(Twitter,Lovely))", "((TaylorSwift(TaylorSwift) & GrammyAlbumOfTheYearAwards(TaylorSwift)) -> Received(TaylorSwift,3))", "(Siriacs(Swift) & GrammyArtistOfYearAward(Swift))", "all x.((TaylorSwift(x) & GrammyAlbumOfTheYear(x,3)) -> TaylorSwift(x))"]}
{"id": "folio_train_1232", "nl": "Columbia University is one of the Ivy League schools.", "fol": "IsIvyLeagueSchool(ColumbiaUniversity)", "prediction": ["the IvyLeagueSchool(Columbia)", "all x.(ColumbiaUniversity(x) -> IvyLowerSchool(x))", "all x.(Columbia(x) -> IvyLionSchool(x))", "all x.(ColumbiaUniversity(x) -> IvyLowerSchool(x))", "all x.(ColumbusUniversity(x) -> IvyLowerSchool(x))", "all x.(ColumbiaUniversity(x) -> IvyLeagueSchool(x))", "all x.(ColumbiaUniversity(x) -> IvyLowerSchool(x))", "all x.(ColumbiaUniversity(x) -> IvyLittleSchool(x))", "all x.(ColumbiaUrban(x) -> IvyLowerSchool(x))", "(IvyLowerSchool(ColumbiaUniversity))", "all x.(ColumbiaUniversity(x) -> IvyLowerSchool(x))", "Columbia University is one of the IvyLowerSchools(ie)", "all x.(IvyLowerSchool(x) -> ColumbiaUniversity(x))", "All x.(ColumbiaUniversity(x) -> IvyLlamaSchool(x))", "all x.(ColumbiaUniversity(x) -> IvyLeagueSchool(x))", "all x.(ColumbiaUniversity(x) -> IvyLowerSchool(x))"]}
{"id": "folio_train_1233", "nl": "Taylor Swift delivers a commencement speech in Manhattan.", "fol": "exists x.(GivesCommencementSpeech(TaylorSwift,x) & LocatedInManhattan(x))", "prediction": ["all x y z.((TaylorSwift(x) & Commencement(y) & Manhattan(z)) -> Delivers(x,y,z))", "TaylorSwift delivers(their(taylorswift,New York) -> CommencementSpeech(taylorswift,monster))", "all x.(TaylorSwift(x) -> ProvidesCommitmentSpeech(x,Metropolitan))", "all x y.((TaylorSwipe(x) & Manhattan(y)) -> DeliversEnumerationSpeech(x,y))", "all x.((TaylorSwift(x) & DeliversCommitmentSpeech(x)) -> InMidtown(x))", "all x y.((T TaylorSwift(x) & InMetropolis(y)) -> DeliversEntiringSpeech(x,y))", "Taylor Swift delivers CommencementSpeechInMomentum(TaylorSwift)", "all x y.((TaylorSwift(x) & Commencement(y) & Manhattan(z)) -> Delivers(x,y,z))", "all x y z.((TaylorSwift(x) & CommencementSpeech(y) & Manhattan(z)) -> Delivers(x,y,z))", "all x.((TaylorSwift(x) & CommencementSpeech(x)) -> DeliversInMetropolitan(x))", "all x y.((TaylorSwift(x) & Manhattan(y)) -> ConcludementSpeech(x,y))", "(DisruptsCommitmentSpeech(TaylorSwift) & InMennCenter(TaylorSwift))", "((TaylorSwift(TaylorTaylor) & DeliversCommitmentSpeech(Taylor)) | LongInNight(Taylor)))", "all x.(TaylorSwift(x) -> (DebutsConcertmentSpeech(x) & InMontana(x)))", "all x.(TaylorSwift(x) -> DeliversCommitmentSpeech(x))", "all x y.((TaylorSwift(x) & CommencementSpeech(y)) -> Delivers(x,y))"]}
{"id": "folio_train_1234", "nl": "The commencement speaker of NYU does not have any album.", "fol": "all x.(CommencementSpeaker(x) & -ReceivedThreeGrammyAwards(x))", "prediction": ["all x.((EntranceSpeaker(x) & NYU(x)) -> -exists y.(Album(y) & HasAlbum(x,y)))", "all x.((DebutmentSpeaker(x) & NYU) & -HasAlbum(x)) -> -HasAlbum(x))", "none exists x.(CommitmentSpeaker(x) & -exists y.(Album(y) & With(x,y)))", "all x.((PrimarySpeaker(x) & NewYorkUniversity(y)) -> -HasAlbum(x))", "all x.((EntrantSpeaker(x) & NYU(x)) -> -HasAlbum(x))", "all x.((CapitationSpeaker(x) & NYU)) -> -HasAlbum(x))", "(-hasAlbum(nouveauSpeaker) & CommencementSpeakerOfNYU(x))", "all x y.((Speaker(x) & Commencement(y) & NYU(y)) -> -HasAlbum(x))", "all x.(CentrymentSpeaker(x) -> -HasAlbum(x))", "(noalbum(y) & CommencementSpeaker(y) & NYU(y))", "all x.(Speaker(x) -> NoAlbum(x))", "all x.((EncedementSpeaker(x) & NYU(y)) -> -HasAlbum(x,y))", "all x.((EncommendmentSpeaker(x) & Yale(x)) -> -HasAlbum(x))", "all x.((Speaker(x) & Commencement(x,NYU)) -> -HasAlbum(x))", "all x.((Speaker(x) & Commencement(x)) -> -LikelyAlbum(x))", "all x.((EntirementSpeaker(x) & NewYork University(y)) -> -HasAlbum(x,y))"]}
{"id": "folio_train_1235", "nl": "Customers either choose Plan A or Plan B.", "fol": "all x.(ChoosesPlanA(x) | ChoosesPlanB(x))", "prediction": ["all x.(Customer(x) -> (ChoosesPlanA(x) | ChosesPlanB(x)))", "(Customer(Customer) -> (ChoosesPlan(Customer,A) | ChoosesPlan(Customer,B)))", "all x.(Customer(x) -> ((ChoosesPlanA(x) | ChoosesPlanB(x))))", "all x.(Customer(x) -> (ChoosesPlan(x,A) | ChosesPlan(x,B)))", "all x.(Customer(x) -> (ChoosesPlanA(x) | ChoosesPlanB(x)))", "(Client(Customer) & (ChoosesPlanA) | ChoosesPlanB)))", "all x.(Customer(x) -> (BreaksPlanA(x) | ChoosesPlanB(x)))", "all x.(Customer(x) -> (ChoicesPlanA(x) | ChoosesPlanB(x)))", "(Customer(Customer) & (PhaseA(Customer) | ChoiceB(Customer)))", "all x.(Customer(x) -> (InvoicePlan(x,A) | ElectivePlanPlan(x,B)))", "all x.(Customer(x) -> (ChoosesPlanA(x) | ChoosesPlanB(x)))", "all x.(Customer(x) -> (ChoosesPlan(x,A) | ChoosesPlan(x,B)))", "all x.(Customer(x) -> (ChoosesPlanA(x) | ChoosesPlanB(x)))", "all x.(Customer(x) -> (ChoosesPlanA(x) | ChoosesPlanB(x)))", "all x.(Customer(x) -> (ElectsPlan(x,A) | ChoosesPlan(x,B)))", "all x.(Customer(x) -> (CreatesPlanA) | ChoosesPlanB(x)))"]}
{"id": "folio_train_1236", "nl": "All who choose Plan B are rewarded with a $30 gift card. ", "fol": "all x.(ChoosesPlanB(x) -> RewardedWithGiftCard(x))", "prediction": ["all x.((PlanB(x) & ChoosesPlanB(x)) -> RecognizedWithGiftCard(x,30))", "all x.(PicksPlanB(x) -> RewardedWith30GiftCard(x))", "all x.((PlanB) & Choice(x,y)) -> RecognizedWithWilliamCard(x,y))", "all x.((PlanB(x) & ChoosesPlanB(x)) -> RewardedWithTextCard(x,30))", "all x.((PlanB(x) & ChoosePlanB(x)) -> ReceivesGiftCard(x,30))", "all x.((PlanB(x) & ChoosePlanB(x)) -> RecognizedByGiftCard(x,30))", "all x.((PlanB(x) & ChoosesPlanB)) -> RecommendsWithDailyGiftCard(x,30))", "all x.((PlanB) & ChoosePlanB) -> RewardedWith30GiftCard(x))", "all x.((PlanB) & Pre-PaymentsGartnerCard(x)) -> CashBack(x))", "all x.(You(x) & ChoosesPlanB(x)) -> RewardsWithWonderCard(x,dailyDeals))", "all x.((PlanB(x) & ChoosePlanB)) -> RecognizedWithGuestCard(x,30))", "all x.((ChoicPlanB(x) & ChoosePlanB,40)) -> RewardedWithGiftCard(x,30))", "all x.((PlaceB(x) & ChoosesPlanB(x)) -> RecognizedWithGiftCard(x,30))", "all x.((PlanB(x) & ChoosePlanB(x)) -> RewardedWithGiftCard(x,30))", "all x.((PlanB(x) & ChoosePlanB)) -> RewardedWith30GiftCard(x))", "all x.((SpecificPlanB(x) & ChoicePlanB(x)) -> RecognizedWithVinylGiftCard(x))"]}
{"id": "folio_train_1237", "nl": "There are no customers who do not choose any plans. ", "fol": "all x.-DoesNotChooseAnyPlan(x)", "prediction": ["-exists x.(Customer(x) & -ChoosesPlan(x))", "-exists x.(Customer(x) & -SelectsPlan(x))", "-exists x.(Customer(x) & -ChosesPlan(x))", "-exists x.(Customer(x) & -PrefersPlan(x))", "-exists x.(Customer(x) & -ChoosesPlan(x))", "-exists x.(Customer(x) & -ChoosesPlan(x))", "-exists x.(Client(x) & -ChoosesPlan(x))", "all x.((Customer(x) & -ChoosesPlan(x)) -> -(Payment(x) & CustomerCare(x)))", "-exists x.(Customer(x) & -CausesPlan(x))", "all x.(Client(x) -> -Chooses(x,Plans))", "(-exists x.(Customer(x) & -CelebratesPlan(x)))", "-exists x.(Customer(x) & -ChoseStaging(x))", "exists x.(Customer(x) & -ChoosesPlan(x))", "all x.(NoCustomer(x) & -ElectsPlan(x))", "exists x.(Customer(x) & -ChoosesPlan(x))", "\u2013exists x.(Customer(x) & -ChoosesPlan(x))"]}
{"id": "folio_train_1238", "nl": "No customers rewarded a $30 gift card are older than 80.", "fol": "all x.(RewardedWithGiftCard(x) -> -IsOlderThan80(x))", "prediction": ["there are no older than80(ClientsAppreciatedFound(Cash,32))", "-exists x.(Customer(x) & Rewards(x,y) & $100PaidCard(y) & OlderThan(x,80)))", "all x.((Customer(x) & RewardsGiftCard(x,40)) -> OlderThan80(x))", "-(All x.(Customer(x) & Rewarded(x,30)) -> OlderThan80(x))", "-exists x.(Customer(x) & EquippedWith(x,VastGiftCard) & Age(x,80))", "-exists x.(Customer(x) & RecognizedWishCard(x,FullPurchaseAnd80(x))", "all x.((Customer(x) & RecognizedWith30GiftCard(x)) -> OlderThan80(x))", "-exists x.(Customer(x) & Rewards(x,30) & GiftCard(x))", "-exists x.(Customer(x) & Rewards(x,30) & GiftCard(x,80))", "-exists x.(Customer(x) & Rewards(x,y) & GiftCard(y,x,z) & 30DaysAgo(z,x))", "all x.((Customer(x) & RebloggedForGiftCard(x,y)) -> OlderThan80(y))", "-exists x.(Customer(x) & Renewed(x,30) & GiftCard(x,80))", "no customer has olderThan(x) than(x,80)) & Recognized(x,30) -> GiftCard(x))", "-exists x.(Customer(x) & RewardsSavementCard(x,details,30))", "(-exists x.(Customer(x) & Rewarded(x,30)) & GiftCard(x))", "-exists x.(Customer(x) & Rewards(x,30) & GiftCard(x) & OlderThan(x,80))"]}
{"id": "folio_train_1239", "nl": "Customers are either older than 80 or are currently studying at school. ", "fol": "all x.(IsOlderThan80(x) | IsStudyingAtSchool(x))", "prediction": ["all x.(Customer(x) -> (OlderThan80(x) | StudyingAtSchool(x)))", "all x.(Customer(x) -> (OlderThan80(x) | StudyingAtSchool(x)))", "all x.(Customer(x) -> (OlderThan80(x) | StudyingAtSchool(x)))", "all x.(Customer(x) -> (OlderThan80(x) | StudyingAtSchool(x)))", "all x.(Customer(x) -> (OlderThan80(x) | StudyingAtSchool(x)))", "all x.(Customer(x) -> (OlderThan(x,80) | StudyingAtSchool(x)))", "all x.(Customer(x) -> (OlderThan(x,80) | StudyingAtSchool(x,80)))", "all x.(Customer(x) -> (OlderThan(x,80) | StudyingAtSchool(x,10)))", "all x.(Customer(x) -> (OlderThan(x,80) | StudyingAtSchool(x,80)))", "all x.(Client(x) -> (OlderThan80(x) | StudyingAtSchool(x)))", "all x.(Customer(x) -> (AgeLaterThan80(x) | StudyingAtSchool(x)))", "all x.(Customer(x) -> (OlderThan(x,80) | ShelvingAtSchool(x)))", "all x.(Customer(x) -> (OlderThan80(x) | StudyingAtSchool(x)))", "all x.(Customer(x) -> (OlderThan(x,80) | StudyingAtSchool(x,80)))", "all x.(Customer(x) -> (OlderThan80(x) | StudyingAtSchool(x)))", "all x.(Customer(x) -> (OlderThan(x,80) | StudyingAtSchool(x)))"]}
{"id": "folio_train_1240", "nl": "James is not a customer who is currently studying at school. ", "fol": "-IsStudyingAtSchool(James)", "prediction": ["all x.((James(x) & -SchoolStudent(x)) -> -Customer(x))", "all x.((SaysOrStudying(x) & James(x)) -> -StudysAtSchool(x))", "all x y.((Customer(x) & Customer(y) & StudyingBySchool(x)) -> James(x))", "all x.((Customer(x) & -StudyingAtSchool(x)) -> NotJimmy(x))", "-(Customer(James) & StudyingAtSchool(James,James))", "-(Customer(James) & CurrentlyStudyingAtSchool(James))", "all x.((Customer(x) & -StudyingAtSchool(x)) -> James(x))", "all x.((Customer(x) & James(x)) -> -StudyingAtSchool(x))", "all x.((Customer(x) & -StudyingAtSchool(x)) -> -Jamey(x))", "-ReallyStudyingHasStudy(Jim)", "-(Consumer(Jim) & CurrentlyStudyingAtSchool(Jim))", "all x.((Jason(x) & -StudyingAtSchool(x)) -> -Customer(x))", "all x.((Customer(x) & -StudyingAtSchool(x)) -> James.", "-(Customer(James) & StudyingAtSchool(James))", "(-StudyingUnderSchool(Jason) -> James(James))", "(-Student(James) & School(James))"]}
{"id": "folio_train_1241", "nl": "James is a customer who does not choose any plans.", "fol": "(Customer(James) & -(ChoosesPlanA(James) | ChoosesPlanB(James)))", "prediction": ["all x.((Customer(x) & -ChosesPlans(x)) -> JamesBuys(x))", "all x.((Customer(x) & -ChoosesPlans(x)) -> JamesSpends(x))", "all x.((Customer(x) & -ChoosesPlan(x)) -> JamesCourse(x))", "all x.(Says(x,James) -> -(Customer(x) & ChoicesPlan(x)))", "all x.(Customer(x) & -ChosenPlan(x))", "(Customer(James) & -ChosesPlans(James))", "all x.((James(x) & Customer(x)) -> -ChoosesPlans(x))", "(Customer(Jim) & -ChosesPlans(Jim))", "all x.((Customer(x) & -ChoosesPlans(x)) -> JamesBuys(x))", "all x.((Customer(x) & -ChoosesPlans(x)) -> James(x))", "all x.(Client(x) -> -NoPlan(x))", "James is a customer who does NOTCHOOSEPlans(Jamey)", "all x.((Customer(x) & -SelectsPlans(x)) -> CannotBuyPlans(x))", "all x.((Customer(x) & -ChoosesPlans(x)) -> James(x))", "all x.((Customer(x) & -ChoosesPlan(x)) -> JamesDuckLoan(x))", "all x.((Customer(x) & -CoursePlan(x)) -> InBook(x,y))"]}
{"id": "folio_train_1242", "nl": "James is a customer who chooses Plan A or does not choose any plans.", "fol": "(ChoosesPlanA(James) | -ChooseAnyPlan(James))", "prediction": ["all x y.((Customer(x) & Customer(y) & (PrioritizesPlanA(x,y) | -PrioritizesPlanA(x,y))) -> Customer(x,y))", "all x.((Customer(x) & (ChoosesPlanA(x) | -ChoosesPlanA(x))) -> James(x))", "all x.((Customer(x) & (ChoosesPlanA(x) | -ChoosesPlanB(x))) -> James(x))", "all x.((Customer(x) & (ChoosesPlanA(x) | -ChoosesPlanA(x))) -> James(x))", "all x.((Customer(x) & (CHOOSEsPlanA(x) | -CHOOSEsPlanA(x))) -> James(x))", "all x.((Customer(x) & (FindsPlanA(x) | NoPlans(x))) -> JamesClient(x))", "all x.(Customer(x) -> (ChoosesPlanA(x) | -ChoosesPlanA(x)))", "all x.((Matthew(x) & (PrefersPlanA) | -PrefersPlans(x))) -> Customer(x))", "all x.((Customer(x) & (ChosesPlanA(x) | -ChosesPlanB))) -> James(x))", "all x.((Customer(x) & (CHOOSEsPlanA(x) | -CHOOSEsPlanA(x))) -> James(x))", "all x.((Customer(x) & or ChoosesPlan(x) | ChoosesPlan(x))) -> James(x))", "all x.((Customer(x) & (ChoosesPlanA(x) | -ChoosesPlanA(x))) -> James(x))", "(Customer(James) &(ChoosesPlanA(James) | WillNotChoosePlanA(James)))", "all x.((Customer(x) & (ChoosesPlanA(x) | -ChoosesPlanA(x))) -> James(x))", "all x.((Customer(x) & (ChoosesPlanA(x) | -ChoosesPlanA(x))) -> James(x))", "all x.((Customer(x) & (CHOosesPlanA(x) | -CHOosesPlanB(x))) -> James(x))"]}
{"id": "folio_train_1243", "nl": "Suppose James is a customer who chooses Plan A or does not choose any plans, then he is either rewarded a $30 gift card or chooses Plan B.", "fol": "((ChoosesPlanA(James) | -DoesNotChooseAnyPlan(James)) -> (RewardedWithGiftCard(James) | ChoosesPlanB(James)))", "prediction": ["all x y.((Customer(x) & Customer(y) &(ChoosesPlanA(x,y) | ChoosesNoPlans(x,y))) -> (Recompensed(x,y) | ChoosesPlanB(x,y)))", "all x.((Customer(x) & (PrioritizesPlanA(x) | -PrioritizesPlanB(x))) -> (RecognizedGiftCard(x) | ChoosesPlanB(x)))", "all x.((Customer(x) & (ChosesPlanA(x) | ChoosesPlanLoss(x))) -> (RecommendsDesktopCard(x,30) | ChoosesPlanB(x,30)))", "all x.((Customer(x) & (CHOOSESPlanA(x) | -CHOosesPlanB(x))) -> (FrancishedWith(x,30) | ChoosesPlanB(x,20)))", "all x.((Customer(x) & (CHOOSEsPlanA(x) | -CHOOSEsPlans(x))) -> (RecommendsGiftCard(x,30) | ChoosesPlanB(x,30)))", "all x.((Customer(x) & (CHOOSESPlanA(x) | -CHOOSESPlans(x))) -> (Recognized(x,30) | ChoosesPlanB(x,30)))", "all x.((Customer(x) & (CHOOSEsPlanA(x) | -CHOOSEsPlans(x))) -> (RecognisedGiftCard(x) | ChoosesPlanB(x)))", "all x.((Customer(x) & (ChoicesPlanA(x) | -ChosesPlanB(x))) -> (RecommendsDaysFunctionalCard(x) | ChoosesPlanB(x)))", "all x.(((Customer(x) & (ChoosesPlanA(x) | -ChoosesPlans(x))) -> (RecognizedSample(x --PaidGiftCard(x) | ChoosesPlanB(x))))", "all x.((Customer(x) & (NeedsPlanA(x) | -NeedPlanA(x))) -> (RecommendsDiscountBtact(x) | DeclinesPlanBtact(x)))", "all x.((Customer(x) & (DescribesPlanA) | -DelegatesPlanA))) -> (RewardedGiftCard(x,30) | ChoosesPlanB(x,30)))", "all x.((Customer(x) & (ChoosesPlanA(x) | -ChoosesPlanB(x))) -> (RecommendsGuestCard(x,30) | ChoosesPlanB(x,Board)))", "all x.((Customer(x) & (NoPlan(x) | NoPlan(x))) -> (Recognized(x,30) | ChoosesPlanB(x,30)))", "all x.((Customer(x) & (ChoosesPlanA(x) | -ChoosesPlanB(x))) -> (RenewedPurchase(x,30) | ChoosesPlanB(x,20)))", "all x.((Client(x) & (ChoosesPlanA(x) | -ChoosesPlans(x))) -> (Rewarded(x,30) | ChoosesPlanB(x,30)))", "(Suppose(Jimmy) & Customer(Jimmy) & ((ChoosesPlanA(Jimmy) | (-ChoosesPlanB(Jimmy)))) | (-ChoosesPlanA(Jimmy,PairB)))))"]}
{"id": "folio_train_1244", "nl": "Detroit City is a horse.", "fol": "IsHorse(Detroitcity)", "prediction": ["all x.((DetroitCity(x) & Horse(x)) -> Horse(x))", "all x.(Delta(x) -> Horse(x))", "all x.(Delta(x,y) -> Horse(y))", "all x.((DependentCity(x) & Horse(x)) -> Horse(x))", "all x.(Delta(x) -> Horse(x))", "all x.((DetroitCity(x) & Horse(x)) -> Horse(x))", "all x.((DelawareCity(x) & Horse(x)) -> Horse(x))", "all x.(DependentCity(x) -> Horse(x))", "all x.(DelawareCity(x) -> Horse(x))", "all x.(DeltaCity(x) -> Horse(x))", "all x.((Delta(x) & Horse(x)) -> InDelta(x))", "all x y.((DevonDetroitCity(x) & Horse(y)) -> Horse(x))", "all x.((DepthCity(x) & Horse(x)) -> Horse(x))", "ALL x.((DelawareCity(x) & Horse(x)) -> Horse(x))", "all x.(DetroitCity(x) -> Horse(x))", "all x.(DevonCity(x) -> Horse(x))"]}
{"id": "folio_train_1245", "nl": "Some horses are racehorses.", "fol": "exists x.(IsHorse(x) & IsRacehorse(x))", "prediction": ["exists x.(Horse(x) & Racehorse(x))", "exists x.(Horse(x) & Racehorse(x))", "exists x.(Horse(x) & Racehorse(x))", "exists x.(Horse(x) & Racehorse(x))", "exists x.(Horse(x) & Racehorse(x))", "exists x.(Horse(x) & Racehorse(x))", "exists x.(Horse(x) & Racehorse(x))", "exists x.(Horse(x) & Racehorse(x))", "exists x.(Horse(x) & Racehorse(x))", "exists x.(Horse(x) & Racehorse(x))", "exists x.(Horse(x) & Racehorse(x))", "exists x.(Horse(x) & Racehorse(x))", "exists x.(Hochs(x) & Racehorse(x))", "exists x.(Hose(x) & Racehorse(x))", "exists x.(Horse(x) & Racehorse(x))", "exists x.(Horse(x) & RaceHorse(x))"]}
{"id": "folio_train_1246", "nl": "If a horse falls during a race, then it dies.", "fol": "all x.((IsHorse(x) & IsInRace(x) & HasFallen(x)) -> IsDead(x))", "prediction": ["all x y.((Horse(x) & Fall(x) & Race(y)) -> Dies(x))", "all x.((Horse(x) & FallsDuringRace(x)) -> Dies(x))", "all x y.((Horse(x) & FallsDuringRace(x)) -> Dies(x))", "all x.(FallsDuringRace(x) -> Dies(x))", "all x.((Horse(x) & FallsDuringRace(x)) -> Dies(x))", "all x.((Horse(x) & FallsDuringRace(x)) -> Dies(x))", "all x y.((Horse(x) & Race(y) & FallsDuring(x,y)) -> Dies(x))", "all x.(FiresDuringRace(x) -> Dies(x))", "all x.((Horse(x) & Falls(x)) -> Dies(x))", "all x y.((Piece(x) & Race(y) & FallsDuring(x,y)) -> Dies(x))", "all x.((Horse(x) & FallsDuringRace(x)) -> Dies(x))", "all x.((Horse(x) & FallsDuringRace(x)) -> Dies(x))", "all x.((Horse(x) & FallsDuringRace(x)) -> Dies(x))", "all x y.((Horse(x) & Race(y) & FallsDuring(x,y)) -> Dies(x))", "all x y.((Horse(x) & FallsDuringRace(x)) -> Dies(x))", "all x.((Horse(x) & FallsDuringRace(x)) -> Dies(x))"]}
{"id": "folio_train_1247", "nl": "Detroit City fell during a race.", "fol": "(IsInRace(Detroitcity) & HasFallen(Detroitcity))", "prediction": ["(FalledDuringRace(DetroitCity)", "all x y.((DetroitCity(x) & Race(y)) -> FellDuring(x,y))", "all x.((DetroitCity(x) & Race(y)) -> fellDuring(x,y))", "all x.((DevonDetroitCity(x) & Race(x)) -> Falled(x))", "all x y.((Delta(x) & Detroit(y)) -> FallsWorstReace(x,y))", "all x.((DetroitCity(x) & Race(x)) -> FallsDuring(x,y))", "all x.((DelawareCity(x) & Race(x)) -> Falled(x))", "(Fall(DetroitCity) & Race(Metropolis))", "all x y.((Delaware(x) & Race(y)) -> Fell(x,y))", "all x.((DependentCity(x) & Race(x)) -> Fallen(x))", "all x.(DelawareCity(x) -> FellDuringArace(x))", "all x.((DetroitCity(x) & Race(y)) -> Falling(x,y))", "all x.(DelawareCity(x) -> FalledDuringRace(x))", "all x.((Detroit(x) & Race(y)) -> FallsDuring(x,y))", "all x y z.((DeltahCity(x) & Race(y) & Race(z)) -> FallsDuring(x,y,z))", "all x.((DetroitCity(x) & Race(x)) -> FallsDuring(x,y))"]}
{"id": "folio_train_1248", "nl": "A horse is a racehorse if it is in a race.", "fol": "all x.((IsHorse(x) & IsInRace(x)) -> IsRacehorse(x))", "prediction": ["all x.((Horse(x) & InRace(x)) -> Racehorse(x))", "all x.((Horse(x) & InRace(x)) -> Racehorse(x))", "all x.(Racehorse(x) -> InRace(x))", "all x.((Horse(x) & InRace(x)) -> Racehorse(x))", "all x.(Racehorse(x) -> (Horse(x) & InRace(x)))", "all x.(Racehorse(x) -> (Horse(x) & InRace(x)))", "all x.((Horse(x) & InRace(x)) -> Racehorse(x))", "all x.((Horse(x) & InRace(x)) -> Racehorse(x))", "all x.((Horse(x) & InRace(x)) -> Racehorse(x))", "all x.((Horse(x) & InRace(x)) -> Racehorse(x))", "all x.((Horse(x) & Race(x)) -> Race(x))", "all x.(Racehorse(x) -> InRace(x))", "all x.((Horse(x) & InRace(x)) -> Racehorse(x))", "all x.((Horse(x) & Race(x)) -> Racehorse(x))", "all x.((Horse(x) & InRace(x)) -> Racehorse(x))", "all x.((Horse(x) & InRace(x)) -> Racehorse(x))"]}
{"id": "folio_train_1249", "nl": "Detroit City is dead.", "fol": "IsDead(Detroitcity)", "prediction": ["Dead(DeltaCity(DetroitCity)", "all x.(DetroitCity(x) -> Dead(x))", "exists x.(DeepDetroitCity(x) & Dead(x))", "all x.(GreatDelta(x) -> Dead(x))", "The City(Delta)", "(Dead(DetroitCity))", "(Decline(DeltaCity) -> Dead(DeltaCity))", "(Dead(DevonCity))", "IsDead(DetroitCity)", "DetroitCity(d)...Dead(d))", "all x.(Deep(x) -> DetroitCity(x))", "all x.(Delta(x) -> Dead(x))", "all x.(Delta(x) -> Dead(x))", "-DetroitCityDown(x)", "all x.(Delta(x) -> Dead(x))", "all x.(DetroitCity(x) -> Dead(x))"]}
{"id": "folio_train_1250", "nl": "Detroit City is a racehorse.", "fol": "IsRacehorse(Detroitcity)", "prediction": ["all x.((DetroitCity(x) & Racehorse(x)) -> Racehorse(x))", "all x.(DetroitCity(x) -> Racehorse(x))", "All x.(DetroitCity(x) -> Racehorse(x))", "all x.((DelawareCity(x) & Racehorse(x)) -> Racehorse(x))", "all x.((DeltaCity(x) & RacingHorse(x)) -> Racehorse(x))", "all x.((DeliveryCity(x) & Racehorse(x)) -> Racehorse(x))", "all x.(Racehorse(x) -> DetroitCity(x))", "all x.((Delta(x) & DetroitCity(x)) -> Racehorse(x))", "all x.((DetroitCity(x) & Racehorse(x)) -> Racehorse(x))", "all x.((DepthCity(x) & Racehorse(x)) -> Racehorse(x))", "all x.(FordChicago(x) -> Racehorse(x))", "all x.(Delta(x) -> Racehorse(x))", "all x.(Delta(x) -> Racehorse(x))", "all x.((Delmar(x) & Racehorse(x)) -> DetroitCity(x))", "all x.(Forest(x) -> Racehorse(x))", "all x.(Detroit(x) -> Racehorse(x))"]}
{"id": "folio_train_1251", "nl": "Frederick Monhoff was an architect, artist, and illustrator.", "fol": "(IsArchitect(Monhoff) & IsArtist(Monhoff) & IsIllustrator(Monhoff))", "prediction": ["Frederick Monhoff threw in the 2003 Olympics.", "Frederick Monhoff ((Architect) & Artist(r) & Illustrator(r)))", "Frederick Monhoff (* 1927 - Architect(d) & Artist(e) & Illustrator(d))", "all x.(FrenemyMonhoff(x) -> (Architect(x) & Artist(x) & Illustrator(x)))", "(Architect(MarcofredMonhoff) & Artist(MarcofredMonhoff) & Illustrator(MarcofredMonhoff))", "(ArchitectFredrickMonhoff.Com(FrederickMonhoff) & Artist(FredrickMonhoff) & Illustrator(FredrickMonhoff))", "Frederick Monhoff (Bishop(a) & Artist(a) & Illustrator(a))", "Frederick Monhoff(Francis(Monhoff) & Architect(Monhoff) & Artist(Monhoff) & Illustrator(Monhoff))", "Frederick Monhoff (*1855, Chicago, Illinois)) was an architect, artist, and Illustrator(Monhoff))", "Frederick Monhoff (Architect,Artist, Illustrator)", "Frederick Monhoffs(f) & Architect(f) & Artist(f) & Illustrator(f))", "Frederick Monhoff ((Architect) & Illustrator(s)))", "Frederick Monhoff(Actor,Artist, Illustrator)", "(Architect(Fredric Monhoff) & Artist(FredricMonhoff) & Illustrator(FredricMonhoff))", "(Architect(FrederickMonhoff) & Artist(fredriquetMonhoff) & Illustrator(fredriquetMonhoff))", "Frederick Monhoff (Architect(Monhoff) & Artist(Monhoff) & Illustrator(Monhoff))"]}
{"id": "folio_train_1252", "nl": "Frederick Monhoff was an American.", "fol": "IsAmerican(Monhoff)", "prediction": ["(American(FrederickMonhoff)", "Frederick Monhoff was American.", "Frederick Monhoff war American.", "Frederick Monhoff (American)", "all x.(FredricMonhoff(x) -> American(x))", "All x.((FredricBonhoff(x) & American(x)) -> BornIn(x,Munhoff))", "all x.(FrederickMonhoff(x) -> American(x))", "All x.(Fredrik Monhoff(x) -> American(x))", "all x.(FrederickMonhoff(x) -> American(x))", "(American(Martha Monhoff) & Friend(Martha Monhoff))", "(American(FredrickMonhoff) -> Monhoff(Monhoff))", "Frederick Monhoff (fred & Was(Fred) & Was(Fred)))", "Frederick Monhoff was American.", "Frederick Monhoff (American)", "Frederick Monhoff(amateur)", "all x.((FredrickMonhoff(x) & American(x)) -> Was(x))"]}
{"id": "folio_train_1253", "nl": "An artist is good at painting or music.", "fol": "all x.((IsArtist(x) -> SkilledIn(x,Painting)) | SkilledIn(x,Music))", "prediction": ["all x.(Artist(x) -> (GoodAtPainting(x) | GoodAtMusic(x)))", "all x.(Artist(x) -> (GoodAtPainting(x) | GoodAtMusic(x)))", "all x.(Artist(x) -> (GoodAtPainting(x) | GoodAtMusic(x)))", "all x.(Artist(x) -> (GoodAtPainting(x) | GoodAtMusic(x)))", "all x.(Artist(x) -> (GoodAtPainting(x) | GoodAtMusic(x)))", "all x.(Artist(x) -> (GoodAtPainting(x) | GoodAtMusic(x)))", "all x.(Artist(x) -> (GoodAtPainting(x) | GoodAtMusic(x)))", "exists x.(Artist(x) & (GoodAtPainting(x) | GoodAtMusic(x)))", "all x.(Artist(x) -> (GoodAtPainting(x) | GoodAtMusic(x)))", "all x.(Artist(x) -> (GoodAtPainting(x) | GoodAtMusic(x)))", "all x.(Artist(x) -> (GoodAtPainting(x) | GoodAtMusic(x)))", "all x.(Artist(x) -> (GoodAtPainting(x) | GoodAtMusic(x)))", "all x.(Artist(x) -> (GoodAtPainting(x) | GoodAtMusic(x)))", "all x.(Artist(x) -> (GoodAtPainting(x) | GoodAtMusic(x)))", "all x.(Artist(x) -> (GoodAtPainting(x) | GoodAtMusic(x)))", "all x.(Artist(x) -> (GoodAtPainting(x) | GoodAtMusic(x)))"]}
{"id": "folio_train_1254", "nl": "All Americans speak English.", "fol": "all x.(IsAmerican(x) -> SpeaksLanguage(x,English))", "prediction": ["all x.(American(x) -> SpeakingEnglish(x))", "all x.(American(x) -> SpeaksEnglish(x))", "all x.(American(x) -> SpeakEnglish(x))", "all x.(Amerikan(x) -> SpeakEnglish(x))", "all x.(American(x) -> SnonesEnglish(x))", "all x.(American(x) -> SpeakEnglish(x))", "all x.(American(x) -> SpeakEnglish(x))", "all x y.((American(x) & English(y)) -> Speak(x,y))", "all x.(American(x) -> SpeaksEnglish(x))", "all x.(American(x) -> SpeaksEnglish(x))", "all x.(American(x) -> SpeakEnglish(x))", "all x.(Am\u00e9rican(x) -> SpeakingEnglish(x))", "all x.(American(x) -> SpeaksEngland(x))", "all x.(American(x) -> SpeaksEnglish(x))", "all x.(American(x) -> SpeakEnglish(x))", "all x.(American(x) -> SpeaksEnglish(x))"]}
{"id": "folio_train_1255", "nl": "Frederick Monhoff is good at music.", "fol": "SkilledIn(Monhoff,Music)", "prediction": ["(GoodAtMusic(FredricMonhoff)", "all x.((Fredrik Monhoff(x) & GoodAtMusic(x)) -> GoodAtMusic(x))", "-(FredricMonhoff(m) & GoodAtMusic(m))", "(GoodatMusic(FredrikeMonhoff)", "all x.((FredrickMonhoff(x) & GoodAtMusic(x)) -> GoodAtMusic(x))", "all x.(FredrickMonhoff(x) -> GoodAtMusic(x))", "Frederick Monhoff is goodAtMusic(frivolum)", "all x.(FredricMonhoff(x) -> GoodAtMusic(x))", "all x.(FredricMonhoff(x) -> GoodAtMusic(x))", "all x.((FredrickMonhoff(x) & GoodAtMusic(x)) -> GoodAtMusic(x))", "all x.((FredricMonhoff(x) & GoodAtMing(x)) -> GoodAtMusic(x))", "All x.(FrederickMonhoff(x) -> GoodAtMusic(x))", "all x.(FrederickMonhoff(x) -> GoodAtMusic(x))", "all x.(FrederickMonhoff(x) -> GoodAtMusic(x))", "all x.(FredricMonhoff(x) -> GoodAtMusic(x))", "all x.((FrendrewMonhoff(x) & GoodAtMusic(x)) -> GreatAtMusic(x))"]}
{"id": "folio_train_1256", "nl": "There is no illustrator who speaks English.", "fol": "-exists x.(IsIllustrator(x) & SpeaksLanguage(x,English))", "prediction": ["-exists x.(Inillustrator(x) & SpeaksEnglisch(x))", "-exists x.(Illustrator(x) & SpeaksEllish(x))", "exists x.(Illustrator(x) & SpeaksEnglish(x))", "exists x.(ILlustrator(x) & -SpeaksEnglish(x))", "-exists x.(Illustrator(x) & SpeaksEngland(x))", "(Currently,noil illustrator(x) & DoesSpeakEarlyLanguage(x))", "Es gibt keine Illustrator(i) & SpeaksEnglisch(i))", "exists x.(Illustrator(x) & -SpeaksEnglish(x))", "-exists x.(Illustrator(x) & SpeaksEnglish(x))", "exists x.(Illustrator(x) & -SpeaksEnglish(x))", "-exists x.(Illustrator(x) & SpeaksEnglica(x))", "-exists x.(illustrator(x) & SpeaksEnglish(x))", "exists x.(Illustrator(x) & -SpeaksEnglish(x))", "-exists x.(illustrator(x) & SpeaksEnglica(x))", "-exists x.(illustrator(x) & SpeakEnglish(x))", "exists x.(Illustrator(x) & -SpeaksEnglish(x))"]}
{"id": "folio_train_1257", "nl": "Miroslav Fiedler was a Czech mathematician.", "fol": "(IsCzech(Miroslavfiedler) & IsMathematician(Miroslavfiedler))", "prediction": ["Iroslav Fiedler wuchse in St. Petersburg in the 1950s.", "Miroslav Fiedler (CzechMathematician)", "all x.(MiroslavFiedler(x) -> CzechMathematician(x))", "all x.((MiroslavFiedler(x) & CzechMathematician(x)) -> Graph.", "Miroslav Fiedler (CzechMathematician)", "Miroslav Fiedler (CzechMathematician)", "all x.(MiroslavFiedler(x) -> Mathematician(x))", "M. Fiedler (CzechMathematician) & WasFeyer(Mathematician)", "all x.((Mr.MiroslavFielder(x) & CzechMathematician(x)) -> ResidesFor(x,y))", "Miroslav Fiedler (CzechMathematician)", "Miroslav Fiedler (CzechMathematician)", "Miroslav Fiedler was a CzechMathematician.", "Miroslav Fiedler (CzechMathematician)", "(MiroslavFiedler) was CzechMathematician(CzechMathematician).", "all x.((MiroslavIdedler(x) & CzechMathematician(x)) -> Heisen(x,y))", "Miroslav Fiedler was a Czech Mathematician."]}
{"id": "folio_train_1258", "nl": "Miroslav Fiedler is known for his contributions to linear algebra and graph theory.", "fol": "KnownForContributions(Miroslavfiedler,ContributionsToLinearAlgebraAndGraphTheory)", "prediction": ["Miroslav Fiedler exists x.((Performance(x) & ContributionsToLinialAlgebra(x) & ContributionsToGraphTheory(x)))", "Miroslav Fiedler has been known for contributing to LinearAlgebraAndGraphtheory.", "all x.((MilleroslavFiedler(x) & ContributesToLinearAlgebra(x) & ContributesToGraphTheory(x)) -> RenownedFor(x,y))", "All x.((MiroslavFiedler(x) & Contribute(x,LinearAlgebra,GraphTheory)) -> KnownFor(x,y))", "Miroslav Fiedler ((StandardInLinearAlgebra(s) & GraphTheory(s)) -> ContributesTo(isNotRecognizedFor(isNotRecognizedFor(isRegularAlgebra(x) | HasPartCellularAlgebra(x)))", "all x.(MiroslavFiedler(x) -> (KnownForLinearAlgebra(x) & KnownForGraphTheory(x)))", "(ReputableFor(MiroslavFiedler,LincolnAlgebra,GraphTheory) & ContributionsTo(MiroslavFiedler,LincolnAlgebra) & ContributionsTo(MiroslavFiedler,GraphTheory))", "Miroslav Fiedler is known for his contributions to linearAlgebra and GraphTheory.", "all x.((MiroslavFiedler(x) & ContributionToLinearAlgebra(x) & ContributionToGraphTheory(x)) -> Fiedler(x))", "all x.((MiroslavFiedler(x) & LinearAlgebra(x) & GraphTheory(x) & ContributesTo(x,LinarAlgebra,GraphTheory,etc)) -> KnownFor(x,Fiedler))", "(CommentsToLinearAlgebra(Richard,LarnarGuitar,GraphTheory,Richard & KnownFor(LinialAlgebra) & KnownFor(SeriousGraphTheory,Richard,GraphTheory))", "Miroslav Fiedler is know for his contributions to LinearBalgebra(Miroslav) und toGraphTheory(Miroslav)", "all x.((MiroslavFiedler(x) & ContributionsToLinearAlgebra(x) & ContributionsToGraphTheory(x)) -> MiroslavFiedler(x))", "all x.((MicharoslavFiedler(x) & ContributionsToLinearAlgebra(x) & ContributionsToGraphTheory(x)) -> MiroslavFiedler(x))", "all x y.((MiroslavFiedler(x) & LinearAlgebra(y)) -> ContributionsToGraphTheory(x,y))", "MiroslavFiedler--KnownForLinearAlgebra(Mimi) & WorksForGraphTheory(Mimi))"]}
{"id": "folio_train_1259", "nl": "Miroslav Fiedler is honored by the Fiedler eigenvalue.", "fol": "HonoredByEigenvalue(Miroslavfiedler,FiedlerEigenvalue)", "prediction": ["all x.(FiedlerEigenvalue(x) -> HonoredBy(x,MiroslavFiedler))", "Miroslav Fiedler is honored by FiedlerEigenvalue(MiroslavFiedler,Grant1).", "(HonoredByEigenvalue(MiroslavFiedler))", "the Miroslav Fiedler Eigenvalue.", "Miroslav Fiedler is HonoredByEigenvalue(MiroslavFiedler)", "MiroslavFiedler is honored by FiedlerEigenvalue(i) & HonoredByFiedlerEigenvalue(i,i))", "Miroslav Fiedler is honored by FiedlerEigenvalue(Miroslav)", "Amity(MichroslavFiedler,Eigenvalue)", "all x.((MiroslavFiedler(x) & FiedlerEigenvalue(x)) -> HonoredBy(x,Y))", "(EhrendredByFiedlerEigenvalue(MiroslavFiedler)", "all x y.((MiroslavFiedler(x) & FiedlerEigenvalue(y)) -> Honored(x,y))", "(HonoredByEigenvalue(MarislavFiedler))", "Miroslav Fiedler is honored by the FiedlerEigenvalue.", "all x.(Fiedler(x) -> HonoredByEigenvalue(x))", "(OhedByEigenvalue(MiroslavFiedler,Fiedler))", "all x.((Fiedler(x) & FiedlerEigenValue(x)) -> Honored(x))"]}
{"id": "folio_train_1260", "nl": "Fiedler eigenvalue is the second smallest eigenvalue of the graph Laplacian.", "fol": "SecondSmallestEigenvalueOf(FiedlerEigenvalue,TheGraphLaplacian)", "prediction": ["-(FiedlerEigenvalue(x) & SingularTwoSmallestEigenvalue(x)))", "(SecondSimilarEigenvalueOfGraphLaplacian(e) & -StayingEigenvalueOfGraphLaplacian(f) & Fiedler(e))", "second-SmallestEigenvalueOfGraphLaplacian( FiedlerEigenvalue)", "SecondSmallestEigenvalueOfGraphLaplacian(FiedlerEigenvalue)", "is a eigenvalue of a graphLaplacian. The fiedlerEigenvalue is the second smallest of the graphLaplacian.", "Die FiedlerEigenvalue(x) -> SmallestEigenvalue(x))", "(SecondSmallestEigenvalue(e) & GraphLaplacian(e))", "(SecondSmallestEigenvalue(Fiedler) & LaplacianGraph(Fiedler))", "The Fiedler Eigenvalue (FielderEigenvalue) -(SecondSmallestEigenvalue(Lalplacian) & Laplacian(Plastic)))", "(SixtSmallestEigenvalueOffGraphLaplacian(Fiedler))", "Der FiedlerEigenvalue(f) -> (SingleStack(f) & GraphLaplacian(d,f)))", "(SecondSmallestEigenvalue( Fiedler) Oom(x) & GraphLaplacian(y))", "Esenvalue(Eigenvalue) -> (Fiedler(Eigenvalue) & GraphLaplacian(OfGraph)))", "SlightlySmallerEigenvalueOfGraphLaplacian(en)", "(FiedlerEigenvalue) & GraphLaplacian(Eigenvalue) & NextSecondSimilar(Eigenvalue))", "-SixthSmallestEigenvalueOfGraphLaplacian(FiedlerEigenvalue)"]}
{"id": "folio_train_1261", "nl": "Miroslav Fiedler is honored by the second smallest eigenvalue of the graph Laplacian.", "fol": "exists x.(HonoredByEigenvalue(Miroslavfiedler,x) & SecondSmallestEigenvalueOf(x,TheGraphLaplacian))", "prediction": ["Miroslav Fiedler is honored by the second smallestEigenvalue(MiroslavFiedler)", "all x.((MiroslavFiedler(x) & SecondSingleSmallestEigenvalue(x) & LaplacianGraph(x)) -> HonoredBy(x))", "Der Ehreniosity(Miroslav Fiedler,StadiestEigenvalueOfGraphLaplacian)", "all x.((MiroslavFiedler(x) & SecondSmallestEigenvalueOfGraphLaplacian(x)) -> Honored(x))", "all x.((Eigenvalue(x) & LaplacianGraph(x)) -> HonoredBy(x,Fiedler))", "(HearnedBySmallestEigenvalue(MiroslavFiedler) & SecondSmallestEigenvalue(MiroslavFiedlersGraph(Miroslav))", "(EigenvalueAmazing(MiroslavFiedler) & SecondSmallestOfGraphLaplacian(MiroslavFiedler))", "is honored by the second-smallerEigenvalueOfGraphLaplacian(MiroslavFiedler)", "(HearnedBy2SmallerEigenvalue(MiroslavFiedler) & SecondSmallestEigenvalueOfLaplacianGraph(MiroslavFiedler))", "DerweilesByStaylightLeaplacian(MiroslavFiedler)", "all x.((MiroslavFiedler(x) & GraphLaplacian(x)) -> HonouredBySiniestEigenvalue(x))", "all x.((MiroslavFiedler(x) & 2ndSmallerEigenvalueOfLaplacian(x)) -> Honored(x))", "EigenvalueOfGraphLaplacian(MiroslavFiedler)", "all x.((MiroslavFiedler(x) & SecondSinceliestEigenvalueOfGraphLaplacian(x)) -> Honored(x))", "Miroslav Fiedler is honored by the second smallest eigenvalue of the graph Laplacian.", "all x.((MiroslavFiedler(x) & SecondSmallerEigenvalueOfGraphLaplacian(x)) -> Honored(x))"]}
{"id": "folio_train_1262", "nl": "Miroslav Fiedler was a French mathematician.", "fol": "(French(Miroslavfiedler) & IsMathematician(Miroslavfiedler))", "prediction": ["Miroslav Fiedler (FrenchMathematician) & BecameMathematical(Mathematican)", "Miroslav Fiedler(fr) was a FrenchMathematician(f) & FrenchMathematician(f))", "Miroslav Fiedler (FrenchMathematician)", "MiroslavFiedler (FrenchMathematician)", "Miroslav Fiedler (FrenchMathematician) & WorkedIn(frenchMathematics))", "(MoroslavFiedler(Fiedler))", "Miroslav Fiedler (FrenchMathematician(f) & BornInBerlin(f))", "(FrenchMathematician(Miroslav Fiedler) -> Mathematician(MiroslavFiedler))", "Miroslav Fiedler (FrenchMathematician) & StudiedMathematicalAcademics(FrenchMathematician))", "(FrenchMathematician(MiroslavFiedler) & FrenchMathematician(MiroslavFiedler,FrenchMathematicians,FrenchMathematician))", "Miroslav Fiedler (FrenchMathematician) & Scientist(FrenchMathematician)", "Miroslav Fiedler (FrenchMathematician)", "Miroslav Fiedler (frenchMathematician) & FoundedIn1923 (FrenchMathematician) & WorkedOn(frenchMathematicians)))", "Miroslav Fiedler was a French Mathematician.", "all x.(FrenchMathematician(x) -> MiroslavFiedler(x))", "Miroslav Fiedler (PastMan(f) & FrenchMathematician(f) & IdentifiedWith(f))"]}
{"id": "folio_train_1263", "nl": "A Czech mathematician is known for his contributions to linear algebra and graph theory.", "fol": "exists x.(IsCzech(x) & IsMathematician(x) & KnownForContributions(x,ContributionsToLinearAlgebraAndGraphTheory))", "prediction": ["exists x.(CzechMachinematician(x) & ContributesToLinearAlgebra(x) & ContributesToGraphTheory(x))", "all x.((CzechMathematician(x) & ContributionsToLinearAlgebra(x) & ContributionsToGraphTheory(x)) -> KnownFor(x,LincolnAlgebra,GraphTheory))", "all x.((CzechMathematician(x) & ContributesToLinearAlgebra(x) & ContributionsToGraphTheory(x)) -> Chemist(x))", "all x.(CzechMathematician(x) -> (ContributionsToLinearAlgebra(x) & ContributionsToGraphTheory(x)))", "all x.((CzechMathematician(x) & Contributions(x,LincolnalAlgebra,GraphTheory)) -> KnownFor(x,LincolnalAlgebra))", "all x.(CzechMathematician(x) -> (KnownForContributionsToLinearAlgebra(x) & KnownForGraphTheory(x)))", "all x.(CzechMathematician(x) -> (ContributesToLinearAlgebra(x) & ContributesToGraphTheory(x)))", "all x.(CzechMathematist(x) -> (KnownFor(x,LinialAlgebra) & KnownFor(x,GraphTechnology)))", "all x.((CzechMathematician(x) & KnownForLinearAlpha(x) & KnownForGraphTheory(x)) -> ContributesTo(x,y))", "all x.((CechoszkPhanematist(x) & Contribute(x,LincrealAlgebra) & Contribute(x,GraphTheory)) -> Knows(x))", "all x.((TehnicalMathematician(x) & ContributionsToLinearAlgebra(x) & ContributionsToGraphTheory(x)) -> Chemical(x))", "all x.((CzechMathematician(x) & ContributionsToLinearAlgebra(x) & ContributionsToGraphTheory(x)) -> AssertionsHasComparison(x))", "all x.(CzechMathematician(x) -> (KnownFor(x,LiniformAlgebra) & KnownFor(x,GraphTheory)))", "all x.(CzechMathematician(x) -> (KnownForLinearAlgebra(x) & ContributionsToGraphTheory(x)))", "all x.(Mathematician(x) -> (Czech(x) & ContributesToLinearAlgebra(x) & ContributesToGraphTheory(x)))", "all x.((CzechMathematician(x) & ContributionsToLinearAlgebra(x) & ContributionsToGraphTheory(x)) -> RecognizedFor(x,y))"]}
{"id": "folio_train_1264", "nl": "A laptop is a computer.", "fol": "all x.(IsLaptop(x) -> IsComputer(x))", "prediction": ["all x.(Laptop(x) -> Computer(x))", "all x.(Laptop(x) -> Computer(x))", "all x.(Laptop(x) -> Computer(x))", "all x.(Laptop(x) -> Computer(x))", "all x.(Laptop(x) -> Computer(x))", "all x.(Laptop(x) -> Computer(x))", "all x.(Laborplatoon(x) -> Computer(x))", "all x.(Laptop(x) -> Computer(x))", "all x.(Laptop(x) -> Computer(x))", "all x.(Laptop(x) -> Computer(x))", "all x.(Laptop(x) -> Computer(x))", "all x.(Laptop(x) -> Computer(x))", "all x.(Laptop(x) -> Computer(x))", "all x.(Laptop(x) -> Computer(x))", "all x.(Laptop(x) -> Computer(x))", "all x.(Laptop(x) -> Computer(x))"]}
{"id": "folio_train_1265", "nl": "You can play games on a computer.", "fol": "all x.(IsComputer(x) -> CanPlayGamesOnComputer(x))", "prediction": ["all x y z.((Computer(x) & Game(y) & Computer(z)) -> CanPlay(x,y,z))", "all x y.((Computer(x) & Computer(y)) -> PlaysGamesOn(x,y))", "all x.(PlayGames(x) -> RunOnComputer(x))", "all x.(Computer(x) -> PlayGamesOn(x,Computer))", "exists x y.(Game(x) & Computer(y) & Play(x,y))", "all x y.((Computer(x) & Computer(y)) -> CanPlayGames(x,y))", "all x y.((Computer(x) & Computer(y)) -> Play(x,y))", "all x.(PlayGames(x,Computer) -> Play(x,Computer))", "all x y.((Computer(x) & Computer(y)) -> PlaysGamesOn(x,y))", "all x.(Computer(x) -> PlayGames(x))", "all x y.((Computer(x) & Computer(y)) -> PlayGames(x,y))", "all x y.((Computer(x) & Computer(y)) -> PlayGamesOn(x,y))", "all x y.((Computer(x) & PlayGames(y)) -> CanPlay(x,y))", "all x y z.((Computer(x) & Game(y) & Computer(z)) -> PlaysOn(y,z))", "exists x.(Computer(x) & PlayGame(y))", "exists x.(Computer(x) & PlayGame(x))"]}
{"id": "folio_train_1266", "nl": "A phone is not a computer.", "fol": "all x.(IsPhone(x) -> -IsComputer(x))", "prediction": ["all x.(Phone(x) -> -Computer(x))", "all x.(Phone(x) -> -Computer(x))", "all x.(Phone(x) -> -Computer(x))", "all x.(Phone(x) -> -Computer(x))", "all x.(Phone(x) -> -Computer(x))", "all x.(Phone(x) -> -Computer(x))", "all x.(Phone(x) -> -Computer(x))", "all x.(Phone(x) -> -Computer(x))", "exists x.(Phone(x) & -Computer(x))", "all x.(Phone(x) -> -Computer(x))", "all x.(Phone(x) -> -Computer(x))", "all x.(Phone(x) -> -Computer(x))", "all x.(Phone(x) -> -Computer(x))", "all x.(Phone(x) -> -Computer(x))", "all x.(Phone(x) -> -Computer(x))", "all x.(Phone(x) -> -Computer(x))"]}
{"id": "folio_train_1267", "nl": "You can play games on a laptop.", "fol": "all x.(IsLaptop(x) -> CanPlayGamesOnComputer(x))", "prediction": ["exists x y.(Laptop(x) & Laptop(y) & Play(x,y))", "all x y z.((Laptop(x) & Game(y) & Laptop(z)) -> Play(x,y,z))", "exists x.(Laptop(x) & PlayGamesOn(x,x))", "all x.((PlayGames(x) & Laptop(x)) -> AvailableOn(x,x))", "all x y.((Laptop(x) & Laptop(y)) -> PlaysGamesOn(x,y))", "all x.(PlayGamesOnLaptop(x) -> CanPlayGamesOnLaptop(x))", "all x y z.((Laptop(x) & Game(y) & Laptop(z)) -> PlaysOn(x,y,z))", "all x.(PlayGames(x) -> Laptop(x))", "all x.(PlayGamesOnLaptop(x) -> PlayOnLaptop(x))", "exists x y.(Laptop(x) & Laptop(y) & PlaysGamesOn(x,y))", "all x.(PlayGame(x) -> Laptop(x))", "all x y z.((Slaptop(x) & Laptop(y) & Game(z)) -> PlaysOn(x,y,z))", "all x.(PlaysGamesOnLaptop(x) -> PlaysOnLaptop(x))", "all x.((PlayGames(x) & Laptop(x)) -> NoPayment(x))", "all x.(PlaysGames(x) -> PlaysOnLaptop(x))", "all x y z.((Laptop(x) & PlayGamesOn(x,y) & Laptop(z)) -> Yes(x,z))"]}
{"id": "folio_train_1268", "nl": "You can not play games on a phone.", "fol": "all x.(IsPhone(x) -> -CanPlayGamesOnComputer(x))", "prediction": ["all x.(PlayGamesOnPhone(x) -> -PlaysOnPhone(x))", "all x.(Channel(x) -> -PlayGamesOn(x,Phone))", "all x.(PlayGames(x) -> -(phone(x) | Phone(x))))", "all x y.((Phone(x) & Phone(y)) -> -PlaysGames(x,y))", "-CanPlayGamesOnPhone(x))", "all x.((Phone(x) & -PlaysGamesOn(x,Phone)) -> -PlaysGamesOn(x,Phone))", "all x.(PlayGamesOnPhone(x) -> -PlayPhoneGames(x))", "all x.(PlayGamesOnPhone(x) -> -PhonePlay(x))", "all x.(playGamesOnPhone(x) -> -PlayOnPhone(x))", "all x.(Phone(x) -> -PlayGames(x))", "exists x.(Phone(x) & -PlayGames(x))", "all x y.((Facebook(x) & Phone(y)) -> -PlaysGame(x,z))", "all x.((Game(x) & -PlayOnPhone(x)) -> -PlayAtPhone(x))", "all x.(Phone(x) -> -PlayGames(x))", "(-playGames(-Phone))", "all x.(PlayGamesOnPhone(x) -> -PlayOnPhone(x))"]}
{"id": "folio_train_1269", "nl": "Walter Folger Brown was an American politician and lawyer, and served as the postmaster general.", "fol": "(IsAmericanPolitician(Walterbrown) & IsLawyer(Walterbrown) & ServedAsPostmasterGeneral(Walterbrown,Postamastergeneral))", "prediction": ["(AmericanPoliticianAndLawyer(Walter(Walter) FolgerBrown) & PostmasterGeneral(Walter))", "(Politician(Of(Of(Of(Of(Of) & Lawyer(Of(Of)) & PostmasterGeneral(OOF))", "(AmericanPoliticianAndLawyer(WalterSuspensionBrown) -> PostmasterGeneral(WalterSuebner))", "all x.(WalterSuiterBrown(x) -> (AmericanPolitician(x) & Lawyer(x) & PostmasterGeneral(x)))", "Walter Folger Brown (AmericanPoliticianAndLawyer(a) & PostmasterGeneral(b))", "(Politician(WalterSessionr Brown) & Lawyer(WalterSusefren Brown) & PostmasterGeneral(WalterSuefrer Brown))", "Walter FolgerBrown (AmericanPolitician(Warner) & Lawyer(Warren) & PostmasterGeneral(Warren,Mayer,April,April,May))", "(AmericanPolitician(WalterSeconderBrown) & Lawyer(WalterSeconder Brown) & PostmasterGeneral(WalterSeconderBrown))", "Walter Folger Brown (AmericanPoliticianAndLawyer(Brown) & PostmasterGeneral(Walter))", "Walter Folger Brown (all x.((Politician(x) & Lawyer(x)) -> PostmasterGeneral(x)))", "Walter Folger Brown (AmericanPoliticianAndLawyer(Wilson))", "Walter Folger Brown (AmericanPoliticianAndLegalist(Wilton)) & PostmasterGeneral(Walter(Walter))", "Walter Folger Brown (AmericanPolitician(Walter) & Lawyer(Walter) & PostmasterGeneral(Walter))", "(AmericaanPoliticianAndLawyer(WalterSueder Brown) & PostmasterGeneral(WalterSauer Brown))", "Walter Folger Brown wurde (AmericanPolitician(w) & Lawyer(w) & PostmasterGeneral(w)) & Served(w))", "Walter Folger Brown (*1923-) (AmericanPolitician(x) & Lawyer(x) & PostmasterGeneral(x)))"]}
{"id": "folio_train_1270", "nl": "Walter Folger Brown graduated from Harvard University with a Bachelors of Arts.", "fol": "(GraduatedFrom(Walterbrown,Harvard) & ObtainedDegree(Walterbrown,Bachelorsofarts))", "prediction": ["Walter Folger Brown (b.A.,BradyonsOfArts))", "all x y.((WalterSueferrBrown(x) & HarvardUniv.(y)) -> (Graduated(x,y) & BachelorsOfArts(x)))", "Walter Folger Brown GraduatedFromHarvardUniversityWithBachelorsOfArts(Walter Folger Brown)", "-(WalterSeasonRabbinsOfArts(Walter) Brown & HarvardUniversity(Walter))", "all x,y.((WalterSuederrBrown(x) & HarvardU.K.((WalterSuederr(x))) -> BachelorsOfArts(y)))", "Walter Folger Brown graduated with BachelorsOfArts(Walter,Harvard)", "Walter Folger Brown graduated with BachelorsOfArts(r) & HarvardUniversity(x) & BSc(r) & HarvardUniversity(x))", "all x.((WalterSuiterBrown(x) & Harvard(x)) -> BachelorsOfArts(x))", "(BachelorsOfArts(WalterSuspension Brown,HarvardUniversity))", "Walter Folger Brown GraduatedWithBachelorsOfArts(Walter,Harvard)", "all x y z.((WalterNevyrBrown(x) & Harvard University(y) & BachelorsOfArts(z)) -> GraduatedWith(x,y,z))", "(BachelorsOfArts(WalterSutherlandBrown) -> GraduatedFromHarvardUniversity(WalterSutherlandBrown))", "all x y.((WalterSuiterBrown(x) & Harvard(y)) -> (GraduatesBachelorsOfArts(x,y)))", "Walter Folger Brown graduated from Harvard University with a BachelorsOfArts.", "Walter Folger Brown graduated from Harvard University with BachelorsOfArts.", "Walter Folger Brown graduated from Harvard University with BachelorsOfArts(w))"]}
{"id": "folio_train_1271", "nl": "While they were both in Toledo, Walter Folger Brown's father practiced law with Walter Folger Brown.", "fol": "(LocatedIn(Walterbrown,Toledo) & LocatedIn(Walterfather,Toledo) & PracticedLawTogether(Walterfather,Walterbrown))", "prediction": ["(PractisesLawWith(WalterSuiterBrown) & WasInToloma(n) & WalterFernandrow(l))", "all x y.((Father(x) & WalterSufficient(y)) -> (PracticedlawWith(x,y) & WalterSufficient(y)))", "((Father(Father,WalterSufficientLaw) & Toledo(Father,WalterSufficientLaw)) | Attorney(Father,Father,WalterSufficientLaw)))", "((Traveler(WalterSufriarBrown,Toloma) & Dad(Fresh-Toloma)) -> PracticedLegalWith(Frost-SufriarBrown,Tonto))", "all x y.((((WalterSuiterBrown(x) & Father(y)) & InTolles(x,y)) -> PracticedLawWith(y,w,w))", "(Talladon,Toloma, Toledo) & Father(WalterErinnerBrown,Toloma))", "all x.((Tonto,Total) & WalterFernandrezo(WalterGerb(x)) -> PracticedLitigationWith(x,WalterGerbo(x))", "((Tolo(WalterSuitherNucky) & Dad(WalterSuitherNucky)) -> PracticedLawWith(WalterSuitherNucky))", "(exists x.(Lawyer(x) & He(x,Torrance)) & WalterSuiterBrown(x))", "(RichardDistrict(Ridder,Walter) & WalterFernand Brown(Father,Walter))", "all x y z.((Toledo(x) & WalterSuiterBrown(y) & Father(z)) -> (PracticesLaw(z,x) & inToledo(y,z)))", "(exists x.(Father(x) & InTolles(x)) & WalterFernerBrown(x) & PracticedLawWith(x,Furder(x)))", "(Tolo(Tommy) & WalterFernandBrown(Tolo(Tolo)) & WalterFernandBrown(Tolo))", "(all x y z.((Solvitor(x) & Walter FolgerBrown(y) & Toledo(z)) -> StudiedLawWith(x,y,z)))", "OccupiedByTalliance((WalterSuiter Brown,Delta) & WorkedWith(WalterSuiter Brown,Law))", "(Both were in Toledo,but WalterSuitorBrownsParentPracticedLaw(JohnSuitorBrown) & WesleyLewis(WalterSuitorBrown))"]}
{"id": "folio_train_1272", "nl": "Katherin Hafer married Walter Folger Brown.", "fol": "MarriedTo(Ketherinhafer,Walterbrown)", "prediction": ["KatherinHafer Marries(CatherineHafer,WalterSuiterBrown)", "KatherinHafer Weds(Kather,Walter)", "(Married(Kather) & Walter(Kather))", "(Married(KatelynHafer,Walter,Suiter,Brown))", "KatherinHafer marriedWalterSuederBrown.", "KatherinHaferMarried(katherine,waller,brown)", "KatherinHafer(CatherineHafer) married(Catherine(Hafer) & WalterSefterBean(Hafer))", "(Married(KatherinHafer,WalterSuedersBrown))", "Katherin Hafer Married(Katherin,LowerBrown))", "Katherin Hafer (married(Katherin) & WalterSudder Brown(Kather))", "KatherinHoferMarriedDolphEsserBrown(Hafer,Katie)", "(Married(CatherineHafer,WalterSuiterBrown))", "(Married(KatherinHafer) & WalterSequelrBrown))", "KatherinHaferMarried(KatherInHafer,WalterSueder Brown)", "(Married(KatherinHafer) & WalterSuiterBrown(KatherinHafer))", "(Married(KatherHafer,Walter) FolgerBrown))"]}
{"id": "folio_train_1273", "nl": "Walter Folger Brown graduated with a Bachelors of Arts.", "fol": "ObtainedDegree(Walterbrown,Bachelorsofarts)", "prediction": ["(BachelorsOfArts(WalterSusser Brown)", "All x.((WalterSuspension(x) & BachelorsOfArts(x)) -> Brown(x))", "All x.((WalterEnsuring(x) & BachelorsOfArts(x)) -> Brown(x))", "(BachelorsOfArts(WalterSugarBrown))", "all x.((WilhelmSussvarnaRonbow(x) & BachelorsOfArts(x)) -> BrownGraduated(x))", "Walter Folger Brown graduated with BachelorsOfArts(Wilson)", "Walter Folger Brown graduated with BachelorsOfArts(Record)", "(BachelorsOfArts(WalterSueder Brown))", "Walter Folger Brown graduated with BachelorsOfArts(WWalterVernacular(Walter,BachelorsOfArts))", "(BachelorsOfArts(w) & WalterSexterBrown(h))", "(BachelorsOfArts) : Walter FolgerBrown.", "(BachelorsOfArts(WalterSuiversBrown))", "\u2013(BarbarasOfArts(w):1984) | BachelorsOfArts(w)))", "(GraduatedWithBachelorsOfArts(WalterSusser Brown))", "all x.((WalterSuederrBrown(x) & BachelorsOfArts(x)) -> GraduatedWith(x,BarristersOfAcademics))", "all x.((BachelorsOfArts(x) & WalterSecondaryBrown(x)) -> Baccalaureate(x))"]}
{"id": "folio_train_1274", "nl": "Walter Folger Brown's father was in Toledo.", "fol": "LocatedIn(Walterfather,Toledo)", "prediction": ["Die Tracht von Walter Folger Brown,(Random(Sexter) & WasInToloma(Sexter))", "(Pastor(brown,twice) | Father(brown,tatumn)))", "(Father(WalterSufrinerBrown) & InTolta(Bradley(WalterSauerrBrown))", "Walter Folger Brown's father, Leonard, was in Toledo.", "Walter Folger Brown's father was in Toledo.", "Walter Folger Brown was born in Toledo, Ohio.", "(Andy) & Walter Folger Brown (Brown))", "(Father(WalterFernandRabbi(Brunsford,Toledo))", "-Toledo(WalterSuediarBrown)", "Walter Folger Brown's Dad was inToledo.", "Walter Folger Brown's father was inToledo.", "(WalterFernerBrown(FatherLocal(Father(Factory) & InToledo(FatherOf(Father,WalterFerner))", "all x.((Father(x) & WalterSequellerBrown(x)) -> InToltec(x))", "(Father(FurnerEveningBrown) & WalterSuspended(FernandOf(f,w) & Toledo(f,r)))", "BrownsfatherWalter(Walter,Suiter,Brown) wasInTolles(Brown,Tolles))", "Walter Folger Brown's father was in Toledo."]}
{"id": "folio_train_1275", "nl": "Walter Folger Brown was not in Toledo.", "fol": "-LocatedIn(Walterbrown,Toledo)", "prediction": ["Walter Folger Brown -Toledo(Walter,Brown))", "Walter Folger Brown ne\u2019s inToledo.", "Walter Folger Brown (GB) \u2013 -InToledo(GM))", "Walter Folger Brown (((Walter) Surgeon(Brown))) -Toledo(Brown))", "Walter Folger Brown -SfounderedInToledo(x))", "*(WalterSuiterBrown(Walter)) -> -InTolodge(Walter,Tolodge,Tolodge))", "Walter Folger Brown war -InToloma(i)", "Walter Folger Brown & WasNotInToledo(Wildred(WildredFreshman)", "(-Tolo(WalterSevierBrown))", "Siebr Walter Folger Brown -InTolo(w)", "Walter Folger Brown need in Toledo.", "All x.((WalterSequelrBrown(x) & -Toledo(x)) -> -InToledo(x))", "Walter Folger Brown, no longer in Toledo.", "[(WalterErfolgrBarn(Walter)) & -Toledo(y))", "Walter Folger Brown & -Tolo(Walter)", "(-Toledo(WalterSuiter(w) & Brown(w))"]}
{"id": "folio_train_1276", "nl": "All products shipped from China are made in China. ", "fol": "all x.(ShippedFromChina(x) -> ManufacturedInChina(x))", "prediction": ["all x.((Product(x) & ShippedFromChina(x)) -> MadeInChina(x))", "all x.(ShippedFromChina(x) -> MadeInChina(x))", "all x.(Shipping(x) -> MadeInChina(x))", "all x.((Product(x) & ShippedFromChina(x)) -> MadeInChina(x))", "all x.((Product(x) & ShippedFromChina(x)) -> MadeInChina(x))", "(AllowsTheMaking(Purchase(Purchase) -> MadeInChina(Purchase))", "all x.((Product(x) & ShippedFromChina(x)) -> MadeInChina(x))", "all x.((Product(x) & ShippedFromChina(x)) -> MadeInChina(x))", "all x y.((Product(x) & ShippedFromChina(x,y)) -> MadeInChina(x))", "all x.((Product(x) & ShippedFromChina(x)) -> MadeInChina(x))", "all x.((Product(x) & ShippedFromChina(x)) -> MadeInChina(x))", "all x y.((Product(x) & ShippedFromChina(x,y)) -> MadeInChina(x))", "all x.((Product(x) & ShippedFromChina(x)) -> MadeInChina(x))", "all x.((Product(x) & ShippedFromChina(x)) -> MadeInChina(x))", "all x.((Product(x) & ShippedFromChina(x)) -> MadeInChina(x))", "all x.((Product(x) & ShippedFromChina(x)) -> MadeInChina(x))"]}
{"id": "folio_train_1277", "nl": "All products sold in JD are shipped from China. ", "fol": "all x.(AvailableInJD(x) -> ShippedFromChina(x))", "prediction": ["all x.(JD(x) -> ShipsFromChina(x))", "all x.((Product(x) & SoldInJD(x)) -> ShippedFromChina(x))", "all x.((Product(x) & SoldInJD(x)) -> ShippedFromChina(x))", "all x y.((Product(x) & SoledInJD(x)) -> ShippedFromChina(y))", "all x.((Product(x) & SoldInJD)) -> ShippedFromChina(x))", "all x.((Product(x) & SoldInJD(x)) -> ShippedFromChina(x))", "all x y.((Product(x) & SoldInJD(x) & China(y)) -> ShippedFrom(x,y))", "all x.((Product(x) & SoldInJD(x)) -> ShippedFromChina(x))", "all x.(SoldIn(x,JD) -> ShippedFromChina(x))", "all x.((Product(x) & ShippedFrom(x,Chinese)) -> SoldInJD(x))", "all x y.((Product(x) & JD(y) & SaleInJD(x,y)) -> ShippedFromChina(x))", "all x y.((Product(x) & SoldInJD(x)) -> ShippedFromChina(x))", "all x.((Product(x) & SoldInJD(x)) -> ShippedFromChina(x))", "all x.((Product(x) & SellsInJD(x)) -> ShippedFromChina(x))", "all x.(SoldInJD(x) -> ShippedFromChina(x))", "all x.((Product(x) & SoldInJD(x)) -> ShippedFromChina(x))"]}
{"id": "folio_train_1278", "nl": "All products commonly used in China are sold in JD.", "fol": "all x.(WidelyUsedInChina(x) -> AvailableInJD(x))", "prediction": ["all x.((Product(x) & CommonlyUsedInChina(x)) -> SoldInJD(x))", "all x.((Product(x) & CommonlyUsedInChina(x)) -> SoldInJD(x))", "all x.((Product(x) & CommonlyUsedInChina(x)) -> SoldInJD(x))", "all x.((Product(x) & CommonlyUsedInChina(x)) -> SoldInJD(x))", "all x.((Product(x) & CommonlyUsedInChina(x)) -> SoldInJD(x))", "all x.((Product(x) & FrequentlyUsedAndSoldInChinese(x)) -> SoldInJD(x))", "all x.((Product(x) & CommonlyUsedInChina(x)) -> SoldInJD(x))", "all x.((Product(x) & CommonlyUsedIn(x,China)) -> SoldInJD(x))", "all x.((Product(x) & CommonlyUsedInChina(x)) -> SoldInJD(x))", "all x.(ConsumedChinese(x) -> SoldInJD(x))", "all x.((Product(x) & CommonlyUsedInChina(x)) -> SoldInJD(x))", "all x.((Price(x) & CommonlyUsedInChina(x)) -> SoldInJD(x))", "all x.((Product(x) & UsedInChina(x)) -> SoldInJD(x))", "all x.((Product(x) & CommonlyUsedInChina(x)) -> SoldInJD(x))", "all x.((Product(x) & UsesInChina(x)) -> SoldInJD(x))", "all x.((Product(x) & UsedInChina(x)) -> SoldInJD(x))"]}
{"id": "folio_train_1279", "nl": "All products favored by young people are commonly used in China. ", "fol": "all x.(PopularAmongYouth(x) -> WidelyUsedInChina(x))", "prediction": ["all x.((Product(x) & FavoredByYoungPeople(x)) -> CommonlyUsedInChina(x))", "all x.((Product(x) & FavoredByYoungPeople(x)) -> CommonlyUsedInChina(x))", "all x.((Product(x) & FavoredByYoungPeople(x)) -> CommonlyUsedInChina(x))", "all x.(Product(x) & FavoredByYoungPeople(x)) -> CommonlyUsedInChina(x))", "all x.((Product(x) & FavoredByYoungPeople(x)) -> CommonlyUsedInChina(x))", "all x.((Product(x) & FavoredByYoungPeople(x)) -> CommonlyUsedInChina(x))", "all x.((Product(x) & FavoredByYoungPeople(x)) -> CommonlyUsedInChina(x))", "all x.((Product(x) & FavoredByYoungPeople(x)) -> CommonlyUsedInChina(x))", "all x.((Product(x) & FavoredByYoungPeople(x)) -> CommonlyUsedInChina(x))", "all x.(FavoriteProduct(x) -> CommonlyUsedInChina(x))", "all x.((PotteredByYoungPeople(x) & UsedInChina(x)) -> CommonlyUsed(x))", "all x.(ProductFavoriteInChina(x) -> CommonlyPreferredInChina(x))", "all x.(PreferredByYoungPeople(x) -> CommonlyUsedInChina(x))", "all x y.((Product(x) & FavoredByYoung(x)) -> CommonlyUsedInChina(x))", "all x.(Product(x) & FavoredByYoungPeople(x) -> CommonlyUsedInChina(x))", "all x.((Product(x) & FavoredByYearly(x)) -> CommonlyUsedInChina(x))"]}
{"id": "folio_train_1280", "nl": "MacBook is not made in China and is not commonly used in China.", "fol": "-(ManufacturedInChina(Macbook) & WidelyUsedInChina(Macbook))", "prediction": ["-(MacBook(Macbook) & -MadeInChina(Macbook))", "(-MadeInChina(Macbook) & -ConsumesInChina(Macbook))", "(-MadeInChina(Macbook) & -GenerallyUsedInChina(Macbook))", "(-MadeInChina(MacBook) & -CommonUseInChina(MacBook))", "(-madeInChina(Macbook) & -ConsumedInChina(Macbook))", "and is not oftenused in China.", "(Apple(Macbook) & -MadeInChina(Macbook) & -CommonlyUsedInChina(Macbook))", "(Macbook(Macbook) & -MadeInChina(Macbook) & -CommonlyUsedInChina(Macbook))", "(-MadeInChina(Macbook) & -MadeInChina(Macbook))", "(-MadeInChina(MacBook) & -CommonlyUsedInChina(MacBook))", "(MostMadeInChina(MacBook) & -CommonUsedInChina(Macbook))", "(-MadeInChinaMacbook(MacBook) & -CommonUseInChinaMacBook(MacBook))", "(Desktop(MacBook) & -MadeInChina(Macbook) & -CommuchlyUsedInChina(MacBook))", "(-MadeInChina(Macbook) & -GenerallyUsedInChina(Macbook))", "(-MadeInChina(MacBook) & -ConsumedInChina(MacBook))", "(-(MacBook(Macbook)) & -(MacBook by Apple(macbook)) | ChinaMacbook(macbook))))"]}
{"id": "folio_train_1281", "nl": "The MacBook is favored by young people.", "fol": "PopularAmongYouth(Macbook)", "prediction": ["all x.(Macbook(x) -> FavoredByYoungPeople(x))", "all x.(MacBook(x) -> FavoredByYoung(x))", "all x.(MacBook(x) -> FavoredByYoungPeople(x))", "all x.(Macbook(x) -> FavoredByYoungPeople(x))", "all x.(Macbook(x) -> FavoriteByYoungPeople(x))", "all x.(MacBook(x) -> FavoriteOfYoungPeople(x))", "all x.(Macbook(x) -> FavoredByYearlyPeople(x))", "all x.(MacBook(x) -> AppointedByYoungPeople(x))", "all x.(Macbook(x) -> FavoredByYoungPeople(x))", "all x y.((MacBook(x) & Young(y)) -> Favorable(x,y))", "all x y.((Macbook(x) & Young(y)) -> FavoredBy(x,y))", "exists x.(Macbook(x) & FavoredByYoungPeople(x))", "all x.(Macbook(x) -> FavoredByYoungPeople(x))", "all x.(Macbook(x) -> FavoredByYoungPeople(x))", "all x.(MacBook(x) -> FavoredByYoungPeople(x))", "all x.(Macbook(x) -> FavoredByYoungPeople(x))"]}
{"id": "folio_train_1282", "nl": "The MacBook is made in China.", "fol": "ManufacturedInChina(Macbook)", "prediction": ["all x.(Macbook(x) -> MadeInChina(x))", "(madeInChina(MacBook) & Laptop(Macbook))", "(MadeIn(MacBook) & MadeIn(MacBookBook))", "All x.(MacBook(x) -> MadeInChina(x))", "(MadeIn(MacBook) | MadeIn(MacBook)))", "(MadeIn(Macbook) & MadeIn(Macbook))", "(MadeInChinese(MacBook) | MadeInChina(Macbook)))", "(MadeInChina(MacBook,MadeInChina))", "(MadeInChina(Macbook) | MadeInChina(MacBook))", "the MacBook is madeinChina.", "(MadeIn(Macbook) & MadeIn(Macbook))", "all x.(Macbook(x) -> MadeInChina(x))", "all x.(MacBook(x) -> MadeIn(x,Chinese))", "Das MacBook (Macbook) & MadeInChina(Macbook))", "all x y.((Macbook(x) & ChinaMade(y)) -> MadeIn(x,y))", "the MacBook made in China."]}
{"id": "folio_train_1283", "nl": "The MacBook is favored by young people and commonly used in China.", "fol": "(PopularAmongYouth(Macbook) & WidelyUsedInChina(Macbook))", "prediction": ["- (EvokedByYoungPeople(Macbook) & CommonlyUsedInChina(MacBook))", "all x.(MacBook(x) -> (FavoriteByYoungPeople(x) & CommonlyUsedInChina(x)))", "all x.(Macbook(x) -> (FavoriteByYoungPeople(x) & CommonlyUsedInChina(x)))", "all x.(MacBook(x) -> (FavoriteNewsman(x) & CommonlyUsedInChina(x)))", "all x.(Macbook(x) -> (FavoriteByYoungPeople(x) & CommonlyUsedInChina(x)))", "all x.(Macbook(x) -> (FavoriteByYoungPeople(x) & CommonlyUsedInChina(x)))", "all x y.((Macbook(x) & YoungPerformant(y)) -> (Favorite(x,y) & CommonlyUsedInChina(x)))", "all x.(Macbook(x) -> (favoredByYoungPeople(x) & CommonlyUsedInChina(x)))", "all x y.((Macbook(x) & YoungPeople(y)) -> FavouredBy(x,y) & CommonlyUsedIn(x,China))", "all x.(MacBook(x) -> (FavoriteByYoungPeople(x) & CommonlyUsedInChina(x)))", "all x.(Macbook(x) -> (FavoriteByYoungPeople(x) & CommonlyUsedInChina(x)))", "all x.(MacBook(x) -> (Favorite(x) & GenerallyUsedInChina(x)))", "all x y.((Macbook(x) & YoungPerson(y) & CommonlyUsedInChina(x)) -> FavoredBy(x,y))", "all x.(MacBook(x) -> (Favorite(x) & Popular(x) & CommonlyUsedInChinese(x)))", "all x.(Macbook(x) -> (Favorite(x,y) & PopularAmongYoungPeople(y) & OftenUsedIn(x,China)))", "all x y.((Macbook(x) & YoungMan(y) & PopularExample(x,y)) -> UsedInChina(x,y))"]}
{"id": "folio_train_1284", "nl": "The MacBook is either favored by young people or commonly used in China.", "fol": "(PopularAmongYouth(Macbook) | WidelyUsedInChina(Macbook))", "prediction": ["all x.(Macbook(x) -> (PossifiedByYoungPeople(x) | CommonlyUsedInChina(x)))", "all x.(Macbook(x) -> (FavoriteForYearlyPerson(x) | CommonlyUsedInChina(x)))", "(FavoriteByYoung(Macbook) | CommonlyUsedInChinese(Macbook))", "all x.(MacBook(x) -> (FavoriteByYoungPeople(x) | CommonlyUsedInChina(x)))", "all x.(MacBook(x) -> (PreferredByYoungPeople(x) | CommonlyUsedInChina(x)))", "all x.(Macbook(x) -> (Favorite(x,YoungPeople) | CommonlyUsed(x,China)))", "all x y.((Macbook(x) & YoungPeople(y)) -> (Favorite(x,y) | CommonlyUsedInChina(x,y)))", "all x.(MacBook(x) -> (PottedByYoungPeople(x) | CommonlyUsedInChina(x)))", "all x y.((Macbook(x) & YoungPeople(y)) -> (Favorite(x,y) | CommonlyUsedInChina(x,z)))", "all x.(MacBook(x) -> (FavoriteByYoungPeople(x) | CommonlyUsedInChina(x)))", "all x y.((MacBook(x) & YoungPopcorn(y)) -> (FavoriteDistribution(x,y) | CommonlyUsedIn(x,y)))", "all x.(Macbook(x) -> (PreferredByYoungPeople(x) | CommonlyUsedInChina(x)))", "all x.(Macbook(x) -> (FavouredByYoungPeople(x) | CommonlyUsedInChina(x)))", "all x.(MachineBook(x) -> (FavoredByYoungPeople(x) | CommonlyUsedInChina(x)))", "all x.(MacBook(x) -> (Favorite(x) | CommonlyUsedIn(x,Chinese)))", "all x.(Macbook(x) -> (Favorite(x,y) | CommonlyUsedInChina(x,z)))"]}
{"id": "folio_train_1285", "nl": "If the MacBook is favored by young people and commonly used in China, then it is neither favored by young people nor made in China.", "fol": "((PopularAmongYouth(Macbook) & WidelyUsedInChina(Macbook)) -> (-PopularAmongYouth(Macbook) & -ManufacturedInChina(Macbook)))", "prediction": ["all x.((MacBook(x) & FavoredByYoungPeople(x) & OftenUsedInChina(x)) -> -(FavouredByYoungPeople(x) | MadeInChina(x)))", "all x.((Macbook(x) & FavoredByYears(x) & CommonlyUsedInChina(x)) -> -(FavouredByYears(x) & MadeInChina(x)))", "all x.((Macbook(x) & FavoredByYoungPeople(x) & CommonlyUsedInChina(x)) -> -(FavouredByYoungPeople(x) | MadeInChina(x)))", "all x.((Macbook(x) & FavoredByYoungPeople(x) & CommonlyUsedInChina(x)) -> -(FavoredByYoungPeople(x) | MadeInChina(x)))", "all x.((MacBook(x) & FavoredByYoungPeople(x) & GenerallyUsedInChina(x)) -> (-FavoredByYoungPeople(x) & -MadeInChina(x)))", "all x.(Favorite(x,y) -> (Macbook(y) & YoungPeople(y) & CommonlyUsed(x,y)) & -Favorite(x,y) & -MadeInChina(x)))", "all x.((Macbook(x) & FavoredByYoungPeople(x) & CommonlyUsedInChina(x)) -> -FavorableByYoungPeople(x) & -MadeInChina(x))", "all x.(FavoriteDistribution(x) -> (MacBookcase(x) & YoungPeople(x) & CommonlyUsedInChina(x)))", "all x.((Macbook(x) & FavoredByYoungPeople(x) & CommonlyUsedInChinese(x)) -> -(FavoredByYoungPeople(x) | MadeInChinese(x)))", "all x.((MacBook(x) & FavoredByYoungPeople(x) & CommonlyUsedInChina(x)) -> (-FavouredByYoungPeople(x) & -MadeInChina(x)))", "all x.((MacBook(x) & FavoredByLadies(x) & CommonlyUsedInChina(x)) -> (neither FavoredByLadies(x) & -MadeInChina(x)))", "all x.((Macbook(x) & FavoredByYoungPeople(x) & WidelyUsedInChina(x)) -> (-FavoredByYoungPeople(x) & -MadeInChina(x)))", "all x.((Macbook(x) & FavoredByYearlyPeople(x) & CommonlyUsedInChina(x)) -> (-FavoredByYearlyPeople(x) & -MadeInChina(x)))", "(FavoriteByYoungPeople(macbook) & CommonlyUsedInChina(macbook) & -FavoriteByYoungPeople(macbook) & -MadeInChinese(Macbook))", "all x.((Macbook(x) & FavoredByYoungPeople(x) & CommonlyUsedInChina(x)) -> (-FavorableByYoungPeople(x) & -MadeInChine(x)))", "all x.((Macbook(x) & FavoredByYoungPeople(x) & CommonlyUsedInChina(x)) -> (-FavorableByYoungPeople(x) & -MadeInChina(x)))"]}
{"id": "folio_train_1286", "nl": "Oxford Circus is a road junction connecting Oxford Street and Regent Street.", "fol": "(IsOxfordStreet(OxfordCircus) & IsRegentStreet(OxfordCircus))", "prediction": ["all x.(OxfordCircle(x) -> (RoadJigway(x) & ConnectsOxfordStreet(x,RenewalStreet)))", "all x.(OxfordCircle(x) -> (ConnectingOxfordStandAndRegentStreet(x)))", "all x y z.((OxfordCircle(x) & OxfordStreet(y) & RegentStreet(z)) -> RoadJunction(x,y,z))", "all x.(OxfordCircle(x) -> (RoadJunctionConvergingOxfordStreetAndRegentStreet(x)))", "all x y.((OxfordCircle(x) & OxfordStructure(y)) -> RoadJones(x,y))", "all x.(OxfordCircle(x) -> (RoadJunction(x) & Connects(x,OxfordStreet) & Connects(x,RegentStreet)))", "(RoadJunction(OxfordStreet) & JunctionOfRegentStreet(OxfordStreet))", "all x.(OxfordCircle(x) -> (RusterJuice(x) & ConnectsOxfordStreetWithRegentStreet(x)))", "all x.(OxfordCircle(x) -> RoadJ junction(x,y))", "Oxford Circus (road junction) - ConnectsOxfordStreetAndRegentStreet(x))", "all x.(OxfordCircle(x) -> (RoadJunction(x) & ConnectsOxfordStreetToRegentStreet(x)))", "all x.(OxfordCircle(x) -> (RoadJigway(x,OxfordStreet) & ConnectsRegentStreet(x,OxfordStreet)))", "Oxford Circus is a road junction connecting Oxford Street and Regent Street.", "(RoadJunction(OxfordStreet) & ConnectsRegentStreet(OxfordStreet))", "all x.(OxfordCircle(x) -> (RoadJunction(x) & ConnectsOxfordStreet(x) & ConnectsRegentStreet(x)))", "all x.(OxfordCircle(x) -> (ConnectsOxfordStreet(x) & ConnectsRegentStreet(x)))"]}
{"id": "folio_train_1287", "nl": "Oxford Street is in London.", "fol": "all x.(IsOxfordStreet(x) -> IsInLondon(x))", "prediction": ["all x.(OxfordStandard(x) -> London(x))", "this Street isInLondon(Oxford(Stay(Oxford))", "(London(OxfordStreet) & InLondon(OxfordStreet))", "both London and OxfordStandard(Oxford)", "all x y.((OxfordStreet(x) & London(y)) -> In(x,y))", "-Londuras(OxfordStandard)", "isLondon(OxfordStreet)", "exists x.(Stock(x) & Oxford(x) & LocatedIn(x,London))", "(InLeicester(OxfordStreet))", "all x.(OxfordStreet(x) -> London(x))", "(Lotto(OxfordStreet) & InLondon(OxfordStreet))", "all x.(OxfordStandard(x) -> InLondon(x))", "(London) & OxfordStreet(Oxford)", "OxfordStreet(Oxford,London)", "(all x.(OxfordStreet(x) -> London(x)))", "all x.(OxfordStreet(x) -> London(x))"]}
{"id": "folio_train_1288", "nl": "John Nash designed the construction on Regent Street.", "fol": "exists x.(IsRegentStreet(x) & DesignedBy(JohnNash,x))", "prediction": ["John Nash designed the construction on RegentStour.", "John Nash (Architect(John) & RegentStreetConstruction))", "John Nash designed the construction (designed on RegentStreet))", "John Nash designed and designed the construction on Regent Street.", "John Nash designed the construction on Regent Street.", "John Nash designed the construction on Regent Street.", "John Nash designed the project for RegentStreet.", "John Nash designed the construction on Regent Street & DesignedOn(JohnJohnNash,Landmark,RegentStreet))", "John Nash designed the construction on Regent Street.", "John Nash designed the construction on RegentSt.", "John Nash designed and designed the construction on Regent Street.", "John Nash designed the building on RegentStreet.", "John Nash designed & Designed RenovationsOnRegentStreet(JohnNash,RegentStreet)", "John Nash designed the construction on RegentStreet.", "John Nash designed the construction on Regent Street (NewsStreet)", "John Nash designed the construction on Regent Street."]}
{"id": "folio_train_1289", "nl": "John Nash designed Oxford Circus.", "fol": "DesignedBy(JohnNash,OxfordCircus)", "prediction": ["(Designs(JohnNash) & OxfordCircle(JohnNash))", "John Nash designed OxfordCircle(John,00)", "John Nash designed OxfordCircle(JohnNash)", "John Nash designed OxfordCircle(Johnny)", "John Nash designed OxfordCircle.", "John Nash designed OxfordCircle(Johnny)", "John Nash, designer of OxfordCircle(JohnNash)", "John Nash designed OxfordCircle(JohnNash)", "John Nash designed OxfordCircle(Nash,Joint,Circle)", "Designed OxfordCircle(JohnNash,Oxford)", "John Nash designed OxfordCircle.", "John Nash designed OxfordCircle(JohnNash)", "John Nash designed OxfordCircle(JohnNash,2003)", "John Nash DesignedOxfordCircle(JohnNash)", "John Nash designed-(JohnNash,OxfordCircle))", "John Nash designed OxfordCircle(John,News))"]}
{"id": "folio_train_1290", "nl": "John Nash is an architect in British.", "fol": "(IsBritish(JohnNash) & IsArchitect(JohnNash))", "prediction": ["John Nash is an Architect (UK) & British(Nash))", "John Nash is anArchitect(x) & BasedInBritish(x))", "John Nash (Architect(x) & British(x))", "John Nash (Architect) & Architect(s))", "John Nash (Architect(John) & InBritish(JohnNash))", "(ArchitectInBritish(JohnNash) & LocatedIn(JohnNash))", "John Nash (Architect(e) & British(a))", "John Nash (Architect(John) & BritishArchitect(John))", "John Nash (Architect) & British(JonNash))", "John Nash (Architect(John) & InBritish(John))", "John Nash (Architect(John) & British(John))", "John Nash(21) is BritishArchitect(21)", "John Nash is anArchitect(John) & BornInBritish(John))", "John Nash (Architect(John) & LocatedInBritish(John))", "(Architect(JohnNash,British))", "John Nash is an architect in British."]}
{"id": "folio_train_1291", "nl": "Oxford Circus is the entrance to Oxford Circus tube station which is a part of the Central line in 1900.", "fol": "IsCentralLine(OxfordCircus)", "prediction": ["all x.(OxfordCircle(x) -> (Exit(x,OxfordCircle(x) & CentralLine(x) & CentralLine(x) & CentralLine(x)))", "all x.(OxfordCircum(x) -> (AccessTo(x) & OxfordCircum(x) & CentralLine(x) & InCircum(x,1900)))", "all x.(OxfordCircle(x) -> (EntranceTo(x,OxfordCircle(x) & CentralLine(x) & CentralLine(x)))", "all x.(OxfordCircle(x) -> TubeStationEgress(x,OxfordCircuit,Cornerline,1900))", "all x.(OxfordCircle(x) -> EntranceToOutcomeToUpperCircleStation(x))", "all x y.((OxfordCircle(x) & TubeStation(y)) -> (Entrance(x,y) & CentralLine(y) & FormedIn1900(x)))", "all x y.(OxfordCircle(x) -> (EnoughToOxfordCircle(y) & CentralLine(z) & In-1900(x)))", "all x.(OxfordCircle(x) -> (InterestToOxfordCircle(x) & CentralLine(x) & ConfiguredIn(x,1900)))", "all x.(OxfordCircle(x) -> (EntranceToOxfordCircle(x) & CentralLine(x) & In900(x)))", "all x.(OxfordCircle(x) -> (ToUpper(x,Under) & CentralLine(x) & InUpper(x,1900)))", "all x.((OxfordCircle(x) & TubeStation(x,1921)) -> OxfordCircle(x))", "all x.(OxfordCircle(x) -> (EntranceToUpperOxfordCircleStation(x) & CentralLine(x) & PartOf(x,0,00)))", "all x y.((OxfordCircle(x) & TubeStation(y) & CentralLine(y)) -> Accession(x,y))", "all x y.((OxfordCircle(x) & TubeStation(y) & CentralLine(z)) -> EntranceTo(x,y,z))", "all x y.((OxfordCircle(x) & TubeStation(y) & CentralLine(y,x)) -> EntranceTo(x,y))", "all x.((OxfordCircle(x) & TubeStation(x) & CentralLineIn1900(x)) -> EntersTo(x,x))"]}
{"id": "folio_train_1292", "nl": "Oxford Circus is in London.", "fol": "IsInLondon(OxfordCircus)", "prediction": ["all x.(OxfordCircle(x) -> InLondon(x))", "all x y.((OxfordCircle(x) & London(y)) -> LivesIn(x,y))", "OxfordCircle(Oxford)", "all x.(OxfordCircle(x) -> London(x))", "All x.(OxfordCirc(x) -> London(x))", "all x.(OpenCircle(x) -> (InLondon(x) | OxfordCircle(x)))", "OxfordCircleInLondon(Oxford)", "all x.(OxfordCircle(x) -> London(x))", "all x.(OxfordCircle(x) -> InLondon(x))", "all x.(OxfordCircle(x) -> London(x))", "all x.(OxfordCircle(x) -> InLondon(x))", "(London-(OxfordCircle(o) & Oxford(o)))", "LocatedInLondon(OxfordCircle)", "exists x.(OxfordCircle(x) & London(x))", "all x.(OxfordCircle(x) -> InLondon(x))", "all x y.((OxfordCircle(x) & London(y)) -> LocatedIn(x,y))"]}
{"id": "folio_train_1293", "nl": "Oxford Circus is designed by a British architect.", "fol": "exists x.(IsBritish(x) & IsArchitect(x) & DesignedBy(x,OxfordCircus))", "prediction": ["all x y z.((OxfordCircle(x) & BritishArchitect(y) & Architect(z)) -> DesignedBy(x,y,z))", "all x.(OxfordCircle(x) -> DesignedByBritishArchitect(x))", "all x.(OxfordCircle(x) -> DesignedByTheBritishArchitect(x))", "all x.(OxfordCircle(x) -> Designer(x))", "all x y.((OxfordCircle(x) & BritishArchitect(y)) -> DesignedBy(x,y))", "all x y.((OxfordCircular(x) & BritishArchitect(y)) -> DesignedBy(x,y))", "all x.(OxfordCircle(x) -> (DesignedByBritishArchitect(x) & DesignedByBritishArchitect(x)))", "all x y.((OpenConcert(x) & BritishArchitect(y)) -> DesignedBy(x,y))", "all x y z.((OxfordCircle(x) & BritishArchitect(y) & DesignedBy(y,z)) -> DesignedBy(z,y))", "all x.(OxfordCircle(x) -> DesignedByBritishArchitect(x))", "all x.(OxfordCircle(x) -> DesignedByBritishArchitect(x))", "all x y.((OxfordCircle(x) & BritishArchitect(y)) -> DesignedBy(x,y))", "all x.((OxfordCircle(x) & BritishArchitect(x)) -> DesignedBy(x))", "all x y.((OxfordCircle(x) & BritishArchitect(y)) -> DesignedBy(x,y))", "all x y.((OxfordCircle(x) & BritishArchitect(y)) -> DesignedBy(x,y))", "all x.(OxfordCircle(x) -> DesignedByBritishArchitect(x))"]}
{"id": "folio_train_1294", "nl": "John Nash designed the Central line in 1900.", "fol": "DesignedBy(JohnNash,CentralLine)", "prediction": ["John Nash designed CentralLineIn1900.", "In 1900, John Nash designed CentralLine(John Nash,1908).", "(DesignedIn(JohnNash,1900) & DesignedIn(JohnNash,1900))", "John Nash designed Central Line in 1900.", "John Nash designed CentralLine(JohnNash,1900)", "All x.(JohnNash(x) -> (DesignedCentralLineIn1900)))", "John Nash designed Central LineIn1900.", "John Nash designed Central Line in 1900.", "John Nash designed CentralLine(JohnNash) & BuiltIn(JohnNash) & DesignedIn(JohnNash) & DesignedIn(JohnNash, 1900))", "John Nash designed CentralLineIn1900.", "John Nash designed the Central Line in 1900.", "John Nash designed CentralLineIn1900.", "John Nash (designsCentralLine(x) & In 1900))", "John Nash designed CentralLine(JohnNash) -> DesignedIn(Nash,1909))", "John Nash designed CentralLine(John Nash, 1900),", "John Nash designed CentralLine(JohnNash) in 1900."]}
{"id": "folio_train_1295", "nl": "Regent Street is not in London.", "fol": "all x.(IsRegentStreet(x) -> IsInLondon(x))", "prediction": ["Regent Street, London, -Is-London(ReginatStreet(RenaultStreet))", "Regent Street isn'tInLondon.", "Regent Street -InLondon(x))", "Regent Street -InLondon(Regent Street)", "RegentStreet(x) -InLondon(x))", "Regent Street is notInLondon.", "Regent Street -Londoner(Reneem)", "Regent Street is notInLondon(RegentStand(RenaultStreet)", "-(RegentStreet(RegentStructure) & London(RegentStreet))", "RegentStreet.(Regent Street) -London(Republic))", "RegentStreet -InLondon(RegentStreet)", "Regent Street is notinLondon!", "Regent Street is not inLondon.", "RegentStorm n'estInLondon(x)", "RegentSt.NearLondon(RenownedStreet)", "RegentStreetNotInLondon(inland(inland,london))"]}
{"id": "folio_train_1296", "nl": "An animal is either a cat or a dog.", "fol": "all x.((IsCat(x) & -IsDog(x)) | (-IsCat(x) & IsDog(x)))", "prediction": ["all x.(Animal(x) -> (Cat(x) | Dog(x)))", "all x.(Animal(x) -> (Cat(x) | Dog(x)))", "all x.(Animal(x) -> (Cat(x) | Dog(x)))", "all x.(Animal(x) -> (Cat(x) | Dog(x)))", "all x.(Animal(x) -> (Cat(x) | Dog(x)))", "all x.(Animal(x) -> (Cat(x) | Dog(x)))", "all x.(Animal(x) -> (Cat(x) | Dog(x)))", "all x.(Animal(x) -> (Cat(x) | Dog(x)))", "all x.(Animal(x) -> (Cat(x) | Dog(x)))", "all x.(Animal(x) -> (Cat(x) | Dog(x)))", "all x.(Animal(x) -> (Cat(x) | Dog(x)))", "all x.(Animal(x) -> (Cat(x) | Dog(x)))", "all x.(Animal(x) -> (Cat(x) | Dog(x)))", "all x.(Animal(x) -> (Cat(x) | Dog(x)))", "all x.(Animal(x) -> (Cat(x) | Dog(x)))", "all x.(Animal(x) -> (Cat(x) | Dog(x)))"]}
{"id": "folio_train_1297", "nl": "All dogs bark.", "fol": "all x.(IsDog(x) -> Barks(x))", "prediction": ["all x.(Dog(x) -> Barks(x))", "all x.(Dog(x) -> Bark(x))", "all x.(Dog(x) -> Barks(x))", "all x.(Dog(x) -> Barks(x))", "all x.(Dog(x) -> Barks(x))", "all x.(Dog(x) -> Barks(x))", "all x.(Dog(x) -> Barks(x))", "all x.(Dog(x) -> Barks(x))", "all x.(Dog(x) -> Barks(x))", "all x.(Dog(x) -> Barks(x))", "all x.(Dog(x) -> Barks(x))", "all x.(Dog(x) -> Barks(x))", "all x.(Dog(x) -> Bark(x))", "all x.(Dog(x) -> Barks(x))", "all x.(Dog(x) -> Barks(x))", "all x.(Dog(x) -> Bark(x))"]}
{"id": "folio_train_1298", "nl": "Ghosts do not exist.", "fol": "all x.-IsGhost(x)", "prediction": ["all x.(Ghost(x) -> -exists.", "-exists x.(Ghost(x) & exists only y.((Ghost(x) & Ghost(y)))", "exists x.(Ghost(x) & -exists(x))", "all x.(Ghost(x) -> -exists(x))", "-exists. Ghost(g)", "all x.(Ghost(x) -> -exists(x))", "all x.(Ghost(x) -> -exists(x))", "all x.(Ghost(x) -> -exists(x))", "all x.(Ghost(x) -> -exists(x))", "exists x.(Ghost(x) & -exists(x))", "(Man(Ghost) & NotEvolved(GH))", "all x.(Ghost(x) -> -exists.", "all x.(Ghost(x) -> -exists(x))", "-exists.", "(exists x.(Ghost(x) & Ghost(x)))", "all x.(Ghost(x) -> -exists(x))"]}
{"id": "folio_train_1299", "nl": "If something barks, then it is not alive.", "fol": "all x.(Barks(x) -> -IsAlive(x))", "prediction": ["all x.(Barks(x) -> -Alive(x))", "all x.(Barks(x) -> -Alive(x))", "all x.(Barks(x) -> -Alive(x))", "all x.((Barks(x) & -Alive(x)) -> -Barks(x))", "all x.(Barks(x) -> -Alive(x))", "(all x.(Barks(x) -> -Alive(x)))", "all x.(BarkState(x) -> -Alive(x))", "all x.((Barks(x) & -Alive(x)) -> -Barks(x))", "all x.(Barks(x) -> -Alive(x))", "all x.(Barks(x) -> -Alive(x))", "all x.(Bark(x) -> -Alive(x))", "all x.(Barks(x) -> -Alive(x))", "all x.(Barks(x) -> -Alive(x))", "all x.(Barks(x) -> -Alive(x))", "all x.(Barks(x) -> -Alive(x))", "all x.((Barks(x) & -Olive(x)) -> -Alive(x))"]}
{"id": "folio_train_1300", "nl": "A thing is either alive or dead.", "fol": "all x.((IsAlive(x) & -IsDead(x)) | (-IsAlive(x) & IsDead(x)))", "prediction": ["all x.(Dog(x) -> (Alive(x) | Dead(x)))", "all x.(Thing(x) -> (Alive(x) | Dead(x)))", "exists x.(Thing(x) & (Alive(x) | Dead(x)))", "all x.(Thing(x) -> (Alive(x) | Dead(x)))", "all x.(Thing(x) -> (Alive(x) | Dead(x)))", "exists x.(Thing(x) & (Alive(x) | Dead(x)))", "exists x.(Thing(x) & (Alive(x) | Dead(x)))", "exists x.(Thing(x) & (Alive(x) | Dead(x)))", "exists x.(Thing(x) & (Alive(x) | Dead(x)))", "all x.(Thing(x) -> (Alive(x) | Dead(x)))", "exists x.(Good(x) & (Alive(x) | Dead(x)))", "exists x.(Thing(x) & (Alive(x) | Dead(x)))", "all x.(Thing(x) -> (Alive(x) | Dead(x)))", "all x.(Thing(x) -> (Alive(x) | Dead(x)))", "exists x.(Thing(x) & (Alive(x) | Dead(x)))", "all x.(Tax(x) -> (Alive(x) | Dead(x)))"]}
{"id": "folio_train_1301", "nl": "Jojo is not dead.", "fol": "-IsDead(Jojo)", "prediction": ["all x.(Jojo(x) -> -Dead(x))", "Jojo n'est pas dead.", "(-Dead(jojo) & Is(jojo))", "(Damn(jojo) | Dead(jojo))", "Jojo is notDaily(josef)", "-Destination(jojo)", "-DeadJojo.", "-Dead(Jojo)", "Exists x.(Jojo(x) & -Dead(x))", "exists x.(Jojo(x) & -Dead(x))", "exists x.(jojo(x) & -Dead(x))", "(-Dead(Jojo)).", "(-Dail(Jojo))", "Jojo is notDead(Jojo)", "J\u00f3jo n\u2019est pasDead(Jojo)", "-Daisy(Jojo)"]}
{"id": "folio_train_1302", "nl": "Jojo is a ghost.", "fol": "IsGhost(Jojo)", "prediction": ["Jojo est un ghost.", "Jojo is Ghost(jojo)", "(Ghost(jojo) & Persistent(jojo))", "(Gentle(Jojo) & Ghost(Jojo))", "all x.((Jojo(x) & Ghost(x)) -> Ghost(x))", "((Jojo(jojo) & Ghost(jojo)) -> Ghost(jojo))", "(Ghost(jojo) | Ghost(jojo))", "all x.(Jojo(x) -> Ghost(x))", "Jojo is a ghost.", "exists x.(Jojo(x) & Ghost(x))", "(Ghost(Jojo) & Dead(Jojo))", "All x.(Jojo(x) -> Ghost(x))", "all x.(Old(x) -> Ghost(x))", "(Ghost(jojo) & Ghost(jojo))", "(Ghost(Jojo) & Ghost(Jojo))", "-Ghost(jojo)"]}
{"id": "folio_train_1303", "nl": "Jojo is a cat or a ghost.", "fol": "(IsCat(Jojo) | IsGhost(Jojo))", "prediction": ["all x.(Jojo(x) -> (Cat(x) | Ghost(x)))", "all x.(Jojo(x) -> (Cat(x) | Ghost(x)))", "all x.(Jojo(x) -> (Cat(x) | Ghost(x)))", "all x.(Jojo(x) -> (Cat(x) | Ghost(x)))", "exists x.(Jojo(x) & (Cat(x) | Ghost(x)))", "all x.(Jojo(x) -> (Cat(x) | Ghost(x)))", "all x.(Jojo(x) -> (Cat(x) | Ghost(x)))", "all x.(Jojo(x) -> (Cat(x) | Ghost(x)))", "(Cake(Jojo) | Ghost(Jojo))", "all x.(Jojo(x) -> (Cat(x) | Ghost(x)))", "exists x.(Cat(x) | Ghost(x))", "(Cat(jojo) | Ghost(jojo))", "exists x.(Jojo(x) & ((Cat(x) | Ghost(x))) -> (Cat(x) | Ghost(x))))", "(Cat(jojo) | Ghost(jojo))", "(Cat(Jojo) | Ghost(Jojo))", "all x.(Jojo(x) -> (Cat(x) | Ghost(x)))"]}
{"id": "folio_train_1304", "nl": "If Jojo is a cat or a ghost, then Jojo either barks or is a dog.", "fol": "((IsCat(Jojo) | IsGhost(Jojo)) -> (Barks(Jojo) | IsDog(Jojo)))", "prediction": ["all x.((Cat(x) | Ghost(x)) -> (Barks(x) | Dog(x)))", "all x.((Cat(x) | Ghost(x)) -> (Barks(x) | Dog(x)))", "all x.((Jojo(x) & (Cat(x) | Ghost(x))) -> (Barks(x) | Dog(x)))", "all x.((Pot(x) | Ghost(x)) -> (Barks(x) | Dog(x)))", "all x.((Host(x) | Ghost(x)) -> (Barks(x) | Dog(x)))", "all x.((Kat(x) | Ghost(x)) -> (Barks(x) | Dog(x)))", "all x.((Cat(x) | Ghost(x)) -> (Barks(x) | Dog(x)))", "all x.((Cat(x) | Ghost(x)) -> (Barks(x) | Dog(x)))", "all x.((Cat(x) | Ghost(x)) -> (Barks(x) | Dog(x)))", "all x.(((Cat(x) | Ghost(x))) -> (Barks(x) | Dog(x)))", "all x.((Cat(x) | Ghost(x)) -> (Barks(x) | Dog(x)))", "all x.((Barks(x) | Dog(x)) -> Jojo(x))", "all x.((Barks(x) | Dog(x)) -> Jojo(x))", "all x.((Cat(x) | Ghost(x)) -> (Barks(x) | Dog(x)))", "all x.((Cat(x) | Ghost(x)) -> (Barks(x) | Dog(x)))", "all x.(((Cat(x) | Ghost(x))) -> (Barks(x) | Dog(x)))"]}
{"id": "folio_train_1305", "nl": "All animals that are tigers are cats.", "fol": "all x.(IsTiger(x) -> IsCat(x))", "prediction": ["all x.(Tiger(x) -> Cat(x))", "all x.((Animal(x) & Tiger(x)) -> Cat(x))", "all x y.((Animal(x) & Tiger(x)) -> Cat(y))", "all x.(Tiger(x) -> Cat(x))", "all x.(Tiger(x) -> Cat(x))", "all x.(Tiger(x) -> Cat(x))", "all x.((Animal(x) & Tiger(x)) -> Cat(x))", "all x.(Tiger(x) -> Cat(x))", "all x.((Animal(x) & Tiger(x)) -> Cat(x))", "all x.(Tiger(x) -> Cat(x))", "all x.(Tiger(x) -> Cat(x))", "all x.(Tiger(x) -> Cat(x))", "all x.(Tiger(x) -> Cat(x))", "all x.((Animal(x) & Tiger(x)) -> Cat(x))", "all x.(Tiger(x) -> Cat(x))", "all x.((Animal(x) & Tiger(x)) -> Cat(x))"]}
{"id": "folio_train_1306", "nl": "No cats are dogs.", "fol": "all x.(IsCat(x) -> -IsDog(x))", "prediction": ["-exists x.(Cat(x) & Dog(x))", "all x.(Cat(x) -> Dog(x))", "-exists x.(Cat(x) & Dog(x))", "is dog(Cat)", "-exists x.(Cat(x) & Dog(x))", "all x.(Cat(x) -> Dog(x))", "-exists x.(Cat(x) & Dog(x))", "-exists x.(Cat(x) & Dog(x))", "-or-Dog(cat)", "-exists x.(Cat(x) & Dog(x))", "-exists x.(Cat(x) & Dog(x))", "all x.(Cat(x) -> Dog(x))", "-exists x.(Cat(x) & Dog(x))", "-exists x.(Cat(x) & Dog(x))", "-exists x.(Cat(x) & Dog(x))", "-exists x.(Cat(x) & Dog(x))"]}
{"id": "folio_train_1307", "nl": "All Bengal tigers are tigers.", "fol": "all x.(IsBengalTiger(x) -> IsTiger(x))", "prediction": ["all x.(BengaliTiger(x) -> Tiger(x))", "all x.(Tiger(x) -> Tiger(x))", "all x.(BengalTiger(x) -> Tiger(x))", "all x.( BengalTiger(x) -> Tiger(x))", "all x.(BengalTiger(x) -> Tiger(x))", "all x.(BangladeshTiger(x) -> Tiger(x))", "all x.( BengalTiger(x) -> Tiger(x))", "all x.(BangladeshTiger(x) -> Tiger(x))", "all x.(BangladeshTiger(x) -> Tiger(x))", "all x.(BengalTiger(x) -> Tiger(x))", "all x.(BengalTiger(x) -> Tiger(x))", "all x.(BengalTiger(x) -> Tiger(x))", "all x.(BengalTiger(x) -> Tiger(x))", "all x.(BengalTiger(x) -> Tiger(x))", "all x.(BengaliTiger(x) -> Tiger(x))", "all x.(AnglianTiger(x) -> Tiger(x))"]}
{"id": "folio_train_1308", "nl": "Everything that is a husky is a dog.", "fol": "all x.(IsHusky(x) -> IsDog(x))", "prediction": ["all x.((Husky(x) & Husky(x)) -> Dog(x))", "all x.((Husky(x) & -Husky(x)) -> Dog(x))", "all x.((Husky(x) & Husky(x)) -> Dog(x))", "all x.((Husky(x) & Dog(x)) -> Dog(x))", "all x.((Husky(x) & HasKids(x)) -> Dog(x))", "all x.((Husky(x) & Husky(x)) -> Dog(x))", "all x.((Husky(x) & HasSummit(x)) -> Dog(x))", "all x.((Humky(x) | Dog(x)) -> Dog(x))", "all x.((Husky(x) & Husky(x)) -> Dog(x))", "all x.(Husky(x) -> Dog(x))", "all x.(Husky(x) -> Dog(x))", "all x.(Husky(x) -> Dog(x))", "all x.(Husky(x) -> Dog(x))", "all x.((Husky(x) & Husky(x)) -> Dog(x))", "all x.((Husky(x) & Husky(x)) -> Dog(x))", "all x.((Husky(x) & Husky(x)) -> Dog(x))"]}
{"id": "folio_train_1309", "nl": "Fido is either a Bengal tiger or a cat.", "fol": "(IsBengalTiger(Fido) | IsCat(Fido))", "prediction": ["all x.(Fido(x) -> (BengalTiger(x) | Cat(x)))", "all x.(Fido(x) -> (BenghaziTiger(x) | Cat(x)))", "all x.(Fido(x) -> (BengalTiger(x) | Cat(x)))", "(BengalTiger(Fido) | Cat(Fido))", "(BengaliTiger(Fido) | Cat(Fido))", "all x.(Fido(x) -> (BangladeshTiger(x) | Cat(x)))", "all x.(Fido(x) -> (BelgiumTiger(x) | BengalCat(x)))", "all x.(Fido(x) -> (BengaliTiger(x) | Cat(x)))", "all x.(Fido(x) -> (BengaliTiger(x) | Cat(x)))", "all x.(Fido(x) -> (BengaliTiger(x) | Cat(x)))", "all x.(Fido(x) -> (BengaliTiger(x) | Cat(x)))", "all x y.((Fido(x) & BengalTiger(y)) | Cat(x,y))", "all x.(Fido(x) -> (BelgiumTiger(x) | BengalCat(x)))", "all x.(Fido(x) -> (BengaliTiger(x) | Cat(x)))", "exists x.(Fido(x) & (BengalTiger(x) | Cat(x)))", "all x.(Fido(x) -> (BengaliTiger(x) | Cat(x)))"]}
{"id": "folio_train_1310", "nl": "Fido is a husky.", "fol": "IsHusky(Fido)", "prediction": ["all x.(Husky(x) -> Fido(x))", "all x.(Husky(x) -> Fido(x))", "all x.(Husky(x) -> Fido(x))", "(Hunky(Fido) & Hucky(Fido))", "(Hupy(Fido)", "Fido(Fido) - Husky(h))", "(Husky(Fido)", "Fido is Husky(x)", "Fido.Holly(x)", "(Husky(Fido) & Husky(Fido))", "exists x.(Husky(x) & Husky(x))", "all x.(Husky(x) -> Fido(x))", "all x.(Husky(x) -> Fido(x))", "Fido (Hunky)", "(Husky(Fido) -> Husky(Fido))", "Fido is Husky(Fido)"]}
{"id": "folio_train_1311", "nl": "Fido is not a husky.", "fol": "-IsHusky(Fido)", "prediction": ["Fido ist kein Husky(Fido)", "all x.(Husky(x) -> -Husky(x))", "all x.((Fido(x) & Husky(x)) -> -Husky(x))", "(-Husky(Fido) -> Husky(Fido)))", "all x.(Fido(x) -> -Husky(x))", "Fido neasmoke(x)", "-(Husky(Fido) | Husky(Fido)))", "-Hoshie(Fido)", "(-husky(Fido))", "-Husky(Fido)", "(-Husky(Fido))", "none of the above. (Husky(Fido) -> -Husky(Fido))", "(-Husky(Fido))", "(Husky(Fido) | Husky(Fido))", "(-husky(Fido))", "all x.(Fido(x) -> -Husky(x))"]}
{"id": "folio_train_1312", "nl": "Fido is a Bengal tiger.", "fol": "IsBengalTiger(Fido)", "prediction": ["Fido is BengalTiger(x)", "(BengalTiger(Fido) & BengalTiger(Fido))", "Fido (Bug Tiger(f))", "all x.(Fido(x) -> BengalTiger(x))", "Fido ist Bengal Tiger.", "Fido is BengalTiger(x)", "(BengalTiger(Fido) & BengalTiger(Fido))", "Fido (BangladeshTiger(Fido))", "Fido ist ein BengalTiger.", "Fido (BengalTiger(Fido))", "is BengalTiger(Fido)", "Fido (BengalTiger(Fido))", "all x.(Fido(x) -> BengalTiger(x))", "Fido (Bengal Tiger)", "Fido is BengalTiger(x)", "-BengaliTiger(Fido,Brand(Fido))"]}
{"id": "folio_train_1313", "nl": "Fido is neither a dog nor a husky.", "fol": "(-IsDog(Fido) & -IsHusky(Fido))", "prediction": ["all x.(Fido(x) -> (-Dog(x) & -Husky(x)))", "all x.(Fido(x) & (-Dog(x) | Husky(x)))", "(-(Dog(Fido) | Husky(Fido!)))", "all x.(Fido(x) -> (nee Dog(x) & -Husky(x)))", "all x.(Fido(x) -> (-Dog(x) | Husky(x)))", "all x.(Fido(x) -> (NoDog(x) & -Husky(x)))", "all x.(Fido(x) -> (-Dog(x) | Husky(x)))", "all x.(Fido(x) -> -(Dog(x) | Husky(x)))", "(-Dog(Fido) & -Husky(Fido))", "(Underdog(Fido) & -Husky(Fido))", "-(Dog(Fido) | Husky(Fido))", "all x.(Fido(x) -> (-Dog(x) | Husky(x)))", "(NeitherDog(Fido) & -Huskies(Fido))", "all x.(Fido(x) -> (NOTDog(x) | -Husky(x)))", "(-Dog(Fido) | Husky(Fido)))", "(neverdisambiguous(Fido) -> (Dog(Fido) | Husky(Fido)))"]}
{"id": "folio_train_1314", "nl": "If a city hold a Summer Olympics, and the city is a US city, then the Summer Olympics will be in the US.", "fol": "all x y.((HoldsSummerOlympics(x,y) & IsCityInCountry(y,Us)) -> OlympicsInCountry(x,Us))", "prediction": ["all x y z.((City(x) & SummerOlympics(y) & City(z) & Holds(x,y) & USCity(x)) -> SummerOlympics(z))", "all x.((City(x) & HoldsSummerOlympics(x) & USCity(x)) -> SummerOlympicsInUS(x))", "all x.((City(x) & HoldsSummerOlympics(x) & USCity(x)) -> SummerOlympicsInU.S.S.(IsSummerOlympicsInState(x)))", "all x.((City(x) & HoldsSummerOlympics(x) & USCity(x)) -> SummerOlympicsInUS(x))", "all x.((City(x) & HeldSummerOlympics(x) & USCity(x)) -> SummerOlympicsInUS(x))", "all x y.((City(x) & SummerOlympics(y) & HoldSummer(x,y) & City(x) & USCity(x)) -> SummerOlympicsIn(x,y))", "all x.((City(x) & HoldsSummerOlympics(x) & USCity(x)) -> SummerOlympicsInUS(x))", "all x.((City(x) & SummerOlympics(x) & USCity(x)) -> SummerOlympicsWillInUS(x))", "all x y.((City(x) & City(y) & HoldsSummerOlympics(x,y) & USCity(x)) -> SummerOlympicsInTheUS(x,y))", "all x.(SummerOlympics(x) -> (City(x) & HoldsSummerOlympics(x) & USCity(x)))", "all x.((City(x) & HoldsSummerOlympics(x) & USCity(x)) -> SummerOlympicsInUS(x))", "all x.((City(x) & SummerOlympics(x) & USCity(x)) -> SummerOlympicsInUS(x))", "all x.((City(x) & SummerOlympics(x) & City(x) & USCity(x)) -> SummerOlympicsInUSA(x))", "all x.(((City(x) & HoldsSummerOlympics(x) & USCity(x)) -> SummerOlympicsInUS(x))", "all x.((City(x) & HoldsSummerOlympics(x) & USCity(x)) -> SummerOlympicsInUS(x))", "all x.((City(x) & HoldsSummerOlympics(x) & CityAsUS(x)) -> SummerOlympics(x))"]}
{"id": "folio_train_1315", "nl": "If a city is in a state which is in US, the city is a US city.", "fol": "all x y.((IsCityInState(x,y) & IsStateInCountry(y,Us)) -> IsCityInCountry(x,Us))", "prediction": ["all x.((City(x) & InState(x) & InUS(x)) -> USCity(x))", "all x y.((City(x) & State(y) & InUS(x)) -> USCity(x))", "all x y z.((City(x) & State(y) & States(z) & In(x,y) & In(y,z)) -> USCity(x))", "all x y.((City(x) & State(y) & InUS(x)) -> USCity(x))", "all x y z.((City(x) & State(y) & In(x,y) & State(z)) -> USCity(x))", "all x y.((City(x) & State(y) & In(x,y) & In(x,y)) -> USCity(x))", "all x.((City(x) & InState(x) & InUSA(x)) -> USCity(x))", "all x y.((City(x) & StateIn(x,y) & StatesIn[x,y)) -> USCity(x))", "all x.((City(x) & InState(x,US)) -> USCity(x))", "all x.((City(x) & StatesInUS(x)) -> USCity(x))", "all x.((City(x) & StateIn(x,US)) -> USCity(x))", "all x.((City(x) & InU.State(x)) -> USCity(x))", "all x.((City(x) & State(x) & InState(x) & InUS(x)) -> USCity(x))", "all x.((City(x) & InState(x) & InUS(x)) -> USCity(x))", "all x.((City(x) & StateInUS(x)) -> USCity(x))", "all x.((City(x) & InState(x) & InUS(x)) -> USCity(x))"]}
{"id": "folio_train_1316", "nl": "If a city in a state, and a Summer Olympics is in this city, then the Summer Olympics is in this state.", "fol": "all z.((IsCityInState(x,y) & HoldsSummerOlympics(z,x)) -> OlympicsInState(z,y))", "prediction": ["all x y z.((City(x) & State(y) & SummerOlympics(z) & InCity(x,y,z)) -> SummerOlympicState(x))", "all x.((CityInState(x) & SummerOlympicsInState(x)) -> SummerOlympicsInState(x))", "all x y.((City(x) & State(y) & SummerOlympics(x,y)) -> StateOlympics(x,y))", "all x y.((CityIn(x,y) & State(y) & SummerOlympics(y) & In(x,y)) -> SummerOlympicsIn(x,y))", "all x.(((City(x) & State(x) & SummerOlympicsIn(x,y)) -> SummerOlympicsIn(x,z)))", "all x y z.((City(x) & State(y) & SummerOlympics(z) & In(x,z)) -> SummerOlympics(x))", "all x y.((City(x) & State(y) & SummerOlympics(x,y)) -> SummerOlympics(x,y))", "all x y.((CityIn(x,y) & State(y) & SummerOlympics(x) & In(x,y)) -> In(y,z))", "all x y.((City(x) & State(y) & SummerOlympics(x) & InState(x,y)) -> SummerOlympicsInState(x))", "all x.((City(x) & State(x) & SummerOlympics(x)) -> StateOlympics(x))", "all x.((City(x) & State(x) & SummerOlympics(x)) -> StateOlympics(x))", "all x y z.((City(x) & State(y) & SummerOlympics(z) & InState(x,z)) -> SummerOlympics(z))", "all x.((City(x) & CityInState(x) & SummerOlympics(x)) -> SummerOlympicsInState(x))", "all x y.((City(x) & State(y) & SummerOlympics(x,y)) -> State(x,y))", "(all x.((City(x) & State(x) & SummerOlympics(x)) -> SummerOlympics(x)))", "all x y.((City(x) & State(y) & SummerOlympics(x)) -> SummerOlympicsInState(x,y))"]}
{"id": "folio_train_1317", "nl": "The 2028 Summer Olympics is scheduled to take place in Los Angeles(LA).", "fol": "HoldsSummerOlympics(Y2028,La)", "prediction": ["(ScheduleSummerOlympics(2028) & Los Angeles(LA))", "All x.(SummerOlympicsAndSchedule(x) -> TakesPlace(x,LosAles))", "2028 SummerOlympics(x) -> ScheduledInLa(x))", "(ScheduledInLosAngeles(2028) & SummerOlympics(2028))", "(Schedule(SummerOlympics,LosAleans))", "all x.((SummerOlympics(x) & Los Angeles(lea)) -> ScheduledIn(x,y))", "all x.((SummerOlympics(x) & 2020(x)) -> ScheduledInLosAzules(x))", "OrganizesLondon(2028)", "all x y.((SummerOlympics(x) & LosAngeles(y)) -> SeatedToTakePlace(x,y))", "all x.((SummerOlympics(x) & LosAngeles(x)) -> TakingPlace(x,y))", "All x.((SummerOlympics(x) & 2028(x)) -> ScheduledToTakePlaceIn(x,LA))", "all x.(2020SummerOlympics(x) -> ScheduledIn(x,LA))", "(ScheduledForSummerOlympics(2028) & Los Angeles(LA))", "the SummerOlympics((2028)) -> ScheduledToTakePlaceIn(2028,LA))", "(ScheduledToTakePlaceIn(SummerOlympics2028))", "(ScheduledToTakeplaceInLA(2028) & SummerOlympics(2028))"]}
{"id": "folio_train_1318", "nl": "LA is a city in California(CA).", "fol": "IsCityInState(La,Ca)", "prediction": ["all x y.((City(x) & CA(y)) -> In(x,y))", "(City(LA) & California(CA))", "(City(LA) & InCalifornia(LA))", "LocatedInLasVegas(Las) & California(California(CA))", "all x.(LA(x) -> CityInCalifornia(x))", "all x.((City(x) & California(Ca)) -> (Las Angeles) & City(x,CA)))", "all x.((City(x) & California(x)) -> Los Angeles(x))", "all x.((City(x) & California(x)) -> LA(x))", "all x.(La(x) -> CityInCalifornia(x))", "all x.((City(x) & California(x)) -> LA(x))", "all x.(LA(x) -> (City(x) & InCalifornia(x)))", "(CityInCalifornia(La))", "all x.(LaValley(x) -> CityInCalifornia(x))", "(CityIn(LA) & CityIn(LA,California))", "all x.((City(x) & California(c)) -> City(x,c))", "(City(LA) & InCalifornia(LA))"]}
{"id": "folio_train_1319", "nl": "Atlanta is a US city.", "fol": "IsCityInCountry(Atlanta,Us)", "prediction": ["all x.(Atlanta(x) -> USCity(x))", "all x.(Atlanta(x) -> USCity(x))", "all x.(Atlanta(x) -> USCity(x))", "Atlanta is a USCity.", "all x.(Atlanta(x) -> USCity(x))", "all x.(Atlanta(x) -> USCity(x))", "Atlanta is USCity(x)", "all x.(Atlanta(x) -> USCity(x))", "(USCity(Atlanta))", "Atlanta is a USCity(x)", "all x.(Atlanta(x) -> USCity(x))", "Atlanta is USCity(a)", "all x.((Atlanta(x) & USCity(x)) -> Downtown(x))", "all x.((Atlanta(x) & USCity(x)) ->.", "Atlanta (USACity)", "Atlanta (USCity)"]}
{"id": "folio_train_1320", "nl": "Atlanta is in Georgia(CA).", "fol": "IsStateInCountry(Ca,Us)", "prediction": ["(Atlanta(Atlanta) -> Georgia(Atlanta))", "(Gastown(Atlanta) -> InCA.)", "all x.(Atlanta(x) -> Georgia(x))", "Atlanta is in Georgia(CA)", "(Castle(Atlanta) & Georgia(Atlanta))", "exists x.(Atlanta(x) & Georgia(x))", "all x.(Atlanta(x) -> (InGeorgia(x) & CA(x)))", "(GA.(Atlanta(a) & LocatedIn(b)))", "Atlanta(Atlanta) -> Georgia(CA))", "All x.(Atlanta(x) -> Georgia(x))", "Atlanta(a) isIn(w.(GA(a) & Georgia(c)))", "(GTA(Atlanta,Gas))", "All x.(Atlanta(x) -> Georgia(x))", "all x.(Atlanta(x) -> Georgia(x))", "all x.(Atlanta(x) -> (InGeorgia(x) & CA(x)))", "(GA(Atlanta) & Georgia(CA))"]}
{"id": "folio_train_1321", "nl": "CA is a state in the United States.", "fol": "IsCityInState(Atlanta,Ga)", "prediction": ["all x.(CA(x) -> StateInUnitedState(x))", "all x.(California(x) -> StateInUnitedStates(x))", "all x.(California(x) -> StateInUSA(x))", "all x.(CA(x) -> StateInUnitedStates(x))", "(State(CA) & InUnitedStates(CA))", "all x.(CA(x) -> StateInUnitedStates(x))", "all x.(CA(x) -> StateInUnitedStates(x))", "all x y.((County(x) & State(y)) -> UnitedState(x,y))", "all x.(CA(x) -> StateInUnitedStates(x))", "all x.(Cast(x) -> StateInU.S.States(x))", "all x.(CA(x) -> (State(x) & InUnitedStates(x)))", "all x.(CA(x) -> StatusInUnitedStates(x))", "all x.(CA(x) -> StateInUnitedStates(x))", "all x y.((Country(x) & State(y)) -> UnitedState(x,y))", "all x.(CA(x) -> StateInUnitedStates(x))", "all x y.((California(x) & UnitedState(y)) -> State(x,y))"]}
{"id": "folio_train_1322", "nl": "Boxing, modern pentathlon, and weightlifting will be removed from The 2028 Summer Olympics.", "fol": "(-IncludedInSummerOlympics(Y2028,Boxing) & -IncludedInSummerOlympics(Y2028,Modern_pentathlon) & -IncludedInSummerOlympics(Y2028,Weightlifting))", "prediction": ["All x.((Boxing(x) | ModernPentathlon(x) | Weightlifting(x)) -> RemovedFromTheSochion(x,x))", "all x.((Boxing(x) | ModernPentathlon(x) | Weightlifting(x)) -> -RemovedFromThe2028SummerOlympics(x))", "all x.((Boxing(x) | ModernPentathlon(x) | Weightlifting(x)) -> RemovedFrom2028SummerOlympics(x))", "all x y z.((Boxing(x) | ModernPentathlon(x) | Weightlifting(y)) -> Removed(x,y))", "(all x.((Boxing(x) | ModernPentathlon(x)) | Weightlifting(x)) -> Removed(x))", "(RemovedFromTheSummerOlympics(Boxing) | RemovedFromSummerOlympics(pentathlon) | RemovedFromSummerOlympics(weightlifting))", "all x.((Boxing(x) | ModernPentathlon(x) | Weightlifting(x)) -> RemovedFromSummerOlympics(x))", "all x y z.((SummerOlympic(x) & Summer(y) & (Boxing(z) | ModernPentathlon(z) | Weightlifting(z))) -> RemovedFrom(x,y,z))", "All x.(SummerOlympics(x) -> (Boarding(x) | Pentathlon(x) | Weightlifting(x)))", "(all x.(TopBoxing(x) -> (ModernPentathlon(x) | Weightlifting(x))) -> -SummerOlympics(x))", "(-(Boxing(x) | ModernPentathlon(x) | Weightlifting(x)) -> SummerOlympics(x)))", "all x y z.((Boxing(x) & Pentathlon(y) & Weightlifting(z)) -> (RemovedFrom SummerOlympics(x,y,z) & 2020(x)))", "All x y z.((Boxing(x) & ModernPentathlon(y) & Weightlifting(z)) -> (RemovedFromSummerOlympics(x) & RemovedFromSummerOlympic.(x)))", "All x.((Boxing(x) | ModernPentathlon(x) | Weightlifting(x)) -> RemovedFromSummerOlympics(x))", "All x.((Boxing(x) | ModernPentathlon(x) | Weightlifting(x)) -> RemovedFromSoul28(x))", "all x.((Boxing(x) | ModernPentathlon(x) | Weightlifting(x)) -> RemovedFromThe2028SummerOlympics(x))"]}
{"id": "folio_train_1323", "nl": "Atlanta in the United States hold the 1996 Summer Olympics.", "fol": "HoldsSummerOlympics(Y1996,Atlanta)", "prediction": ["(TheSummerOlympics(Atlanta,USA))", "all x.((Atlanta(x) & UnitedStates(x)) -> SummerOlympics(x,1996))", "(SummerOlympics(Atlanta,US) & HeldIn(Atlanta,US))", "1996 SummerOlympics(Atlanta,UnitedStates)", "All x.((Atlanta(x) & UnitedStates(x)) -> SummerOlympics(x,1996))", "all x y z.((Atlanta(x) & SummerOlympics(y) & USA(z)) -> Holds(x,y,z))", "all x.((Atlanta(x) & UnitedStates(x)) -> SummerOlympics(x,1996))", "(HarnessSummerGames(Atlanta,US) - 1996(Atlanta,US)))", "all x.((Atlanta(x) & UnitedStates(x)) -> HoldsSummerOlympics(x,1996))", "SummerOlympics(Atlanta,UnitedStates)", "(SummerOlympics(Atlanta,UnitedStates) & HeldIn(Atlanta))", "UnitedStatesAtlanta holdsSummerOlympics(Atlanta,1996) & 5-8-2016(Atlanta,1996))", "(SummerOlympics(Atlanta,USA) & heldInAtlanta,UnitedStates(Atlanta,Canada))", "all x.((Atlanta(x) & UnitedStates(y)) -> SummerOlympics(x,1996))", "(SummerOlympics(Atlanta) & UnitedStates(Atlanta))", "all x.(Celebrity(x) -> PresentedIn(x,UnitedStates))"]}
{"id": "folio_train_1324", "nl": "The 2028 Summer Olympics will take place in the US.", "fol": "OlympicsInCountry(Y2028,Us)", "prediction": ["All x.(At(x,262) & SummerOlympics(x)) -> TakenIn(x,US))", "(Tomorrow(223) -> SummerOlympics(22))", "all x y.((SummerOlympics(x) & 2028(y)) -> TakenIn(x,y))", "All x.((SummerOlympics(x) & 2028(x)) -> TakesPlace(x,US))", "(SummerOlympics(2028) & TakersPlace(30,USA))", "all x.((SummerOlympics(x,2028)) -> TakesPlaceIn(x,US))", "2028 SummerOlympics(x) & TakesPlaceInUS(x))", "2028 SummerOlympics(x) & TakesPlaceIn(x,USA))", "(SummerOlympics(2028) & TakesPlaceInUS(2028))", "all x y.((SummerOlympics(x) & US(y)) -> TakesPlaceIn(x,y))", "all x.((SummerOlympics(x) & 2028(x)) -> TakesPlaceIn(x,US))", "2028 SummerOpening(x) -> AllSummitOlympics(x))", "all x.(SummerOpening(x) -> 2028(x))", "all x.(2020SummerOlympics(x) -> In(x,US))", "All x.(SummerOlympics(x) -> TakenIn(x))", "the SummerOlympics(2028) - TakenBy(x,US))"]}
{"id": "folio_train_1325", "nl": "The 1996 Summer Olympics is not in Georgia.", "fol": "-OlympicsInState(Y1996,Ga)", "prediction": ["Das SummerOlympics(1996) -InGeorgia(x))", "1999 SummerOlympics(1996) & -(InGeorgia(1996)))", "Die SummerOlympics(1996) -InGeorgia(1996))", "-InGaeorgie(1996), SummerOlympics(e) & SummerSochi(e,e))", "(SummerOlympics(1996) -InGeorgia(x))", "the SummerOlympics(1996) -IsInGeorgia(x))", "(See summerolympics(1996) & -InGeorgia(1996))", "The 1996 SummerOlympicsIsNotInGeorgia(x)", "1996 SummerOlympics(1996) & -InGothenburg(1996))", "-(SummerOlympic(96) & -InGeorgia(1996))", "(-SummerOlympics(1996),InGeorgia.)", "The SummerOlympics(1996) is notInGeorgia(x))", "The 1996 SummerOlympicsIsNearGeorgia(x)", "(SummerOlympics(96) & -Georgia(1996))", "Die SummerOlympics(1996) & SummerOlympics(1996) & -InGeorgia(x))", "-BeforeSummerOlympics(1996) inGeorgia(x)"]}
{"id": "folio_train_1326", "nl": "Skateboarding will appear at The 2028 Summer Olympics.", "fol": "IncludedInSummerOlympics(Y2028,Skateboarding)", "prediction": ["All x.(Shating(x) -> AppearsAtThe2028SoilOlympics(x))", "All x.(Skateboarding(x) -> AppearsAtTheSoulOlympics(x,2028))", "All x.(Skateboarding(x) -> AnecdotesAtSummerOlympics(x,2028))", "all x.(Skateboarding(x) -> AnnualMayOlympics(x,238))", "All x.(Skeating(x) -> AppearsAtSummerOlympics(x,2028))", "All x.(Skateboarding(x) -> AppearsAtToSummerOlympics(x,258))", "all x.(Skateboarding(x) -> AugmentAtSummerOlympics(x))", "All x.(Skateboarding(x) -> AffectsOlympics(x,2028))", "all x y.((Skateboarding(x) & SummerOlympics(y) & 2020(y)) -> AppearsAt(x,y))", "All x y.((Skateboarding(x) & SummerOlympics(y)) -> AppearsAt(x,y))", "The SummerOlympics(Skateboarding,2028)", "all x.((Skateboarding(x) & SummerOlympics(x,2028)) -> AppearsAt(x,x))", "All x.(Skateboarding(x) -> AffidavitSummerOlympics(x,2028))", "all x y.((Skateboarding(x) & SummerOlympics(y)) -> AppearsAt(x,y))", "all x y.((Skateboarding(x) & SummerOlympic(y)) -> AppearsAt(x,y))", "All x y.((Skateboarding(x) & SummerOlympics(y)) -> Affects(x,y))"]}
{"id": "folio_train_1327", "nl": "The taiga vole is a large vole found in northwestern North America. ", "fol": "(IsVole(TaigaVole) & FoundIn(TaigaVole,NorthAmerica))", "prediction": ["all x.(TaigaVole(x) -> (LargeVole(x) & NorthwesternNordAmerica(x)))", "all x.(TaigaVole(x) -> (LargeVole(x) & FoundInNorthwesternNorthAmerica(x)))", "all x.(TaigaVole(x) -> (LargeVole(x) & FoundInNorthwesternNorthAmerica(x)))", "(LargeVole(taiga),northwesternNorthAmerica)", "all x.(TraigaVole(x) -> (LargeVole(x) & FoundInNorthwesternNordAmerica(x)))", "all x.(TaigaVole(x) -> (LargeVole(x) & FoundInNorthwesternNorthAmerica(x)))", "all x.(TaigaVole(x) -> (LargeVole(x) & FoundInNorthwesternNorthAmerica(x)))", "all x.(TaigaVole(x) -> (LargeVole(x) & FoundInNorthwesternNorthAmerica(x)))", "all x.(TaigaVole(x) -> (LargeVole(x) & FoundInNorthwesternNorthAmerica(x)))", "all x.(TaigaVole(x) -> (LargeVole(x) & FoundInNorthwesternNorthAmerica(x)))", "all x.(TaigaVole(x) -> (LargeVole(x) & FoundInNorthwesternNorthAmerica(x)))", "all x.(TaigaVole(x) -> (LargeVole(x) & FoundInNorthwesternNorthAmerica(x)))", "all x.(TaigaVole(x) -> (LargeVole(x) & FoundInNorthwesternNorthAmerica(x)))", "all x.(TaigaVole(x) -> (LargeVole(x) & FoundInNorthwesternNorthAmerica(x)))", "all x y.((TaigaVole(x) & NorthWestNorthAmerica(y)) -> FoundIn(x,y))", "all x.(TaigaVole(x) -> (LargeVole(x) & FoundInNorthwesternNorthAmerica(x)))"]}
{"id": "folio_train_1328", "nl": "Cats like playing with all voles.", "fol": "all x.(IsVole(x) -> CatsEnjoyPlayingWith(x))", "prediction": ["all x.(Cat(x) -> LikesPlayingWithVole(x))", "all x.(Cat(x) -> LikesPlayingWithVoles(x))", "all x.(Cat(x) -> LikesPlayingWithVoles(x))", "all x y.((Cat(x) & Vole(y)) -> LikesPlayingWith(x,y))", "all x.(Cat(x) -> LikesPlayingWithVoles(x))", "all x.(Cat(x) -> LikesPlayingWithVoles(x))", "all x.(Cat(x) -> LikePlayingWithVoles(x))", "all x.(Cat(x) -> LikesPlayingWithVole(x))", "all x.(Cat(x) -> LikesToPlayWithVoles(x))", "all x.(Cat(x) -> LikesPlayingWithVoles(x))", "all x.(Cat(x) -> LikesPlayingWithVoles(x))", "all x y.((Cat(x) & Vole(y)) -> LikesPlaying(x,y))", "all x.(Cat(x) -> LikesToPlayWithVoles(x))", "all x.(Cat(x) -> PlaysWithVoles(x))", "all x.(Cat(x) -> LikesPlay(x,y))", "all x.(Cat(x) -> LikesPlayingWithVoles(x))"]}
{"id": "folio_train_1329", "nl": "The taiga vole lives in the boreal taiga zone.", "fol": "LivesIn(TaigaVole,BorealTaigaZone)", "prediction": ["all x.(TaigaVole(x) -> LivesInBorealTaigaZone(x))", "all x.(TaigaVole(x) -> LivesInBoralTaigaZone(x))", "all x.(TaigaVole(x) -> LivesInBorealTaigaZone(x))", "all x y.((TaigaVole(x) & BorealTaigaZone(y)) -> LivesIn(x,y))", "all x.(TaigaVole(x) -> LivesInBodyalTaigaZone(x))", "all x.(TaigaVole(x) -> LiveInBorealTaigaZone(x))", "all x.(TaigaVole(x) -> LivingInBorealTaigaZone(x))", "(BorealTaigaZone(taiga)", "all x.(TaigaVole(x) -> LivesInBorealTaigaZone(x))", "all x y.((TaigaVole(x) & BoralTaigaZone(y)) -> LivesIn(x,y))", "all x.(TaigaVole(x) -> LivesInBreathealTaigaZone(x))", "all x.(TaigaVole(x) -> LivesInBorealTaiga(x))", "all x.(TaigaVole(x) -> LivesInBorealTaigaZone(x))", "(LivesInBorishTaigaZone)", "all x.(TaigaVole(x) -> LivesInBorealTaigaZone(x))", "all x.(TaigaVole(x) -> LivesInBorealTaigaZone(x))"]}
{"id": "folio_train_1330", "nl": "The boreal taiga zone in North America is a cold place to live in.", "fol": "all x.((FoundIn(x,NorthAmerica) & LivesIn(x,BorealTaigaZone)) -> IsColdPlace(x))", "prediction": ["all x.(BorealTaigaZone(x) -> ColdPlaceToLiveIn(x))", "all x.(BreedalTaigaZone(x) -> ColdPlaceToLiveIn(x))", "all x.(BorealTaigaZone(x) -> ColdPlaceToLiveIn(x))", "all x.(BorealTaigaZoneInNorthAmerica(x) -> ColdPlaceYouLivingIn(x))", "all x.(BornalTaigaZone(x) -> ColdPlaceToLiveIn(x))", "all x.((BorealTaigaZone(x) & BorealInAmerika(x)) -> ColdPlaceToLiveIn(x))", "all x.((BorialTaigaZoneInNorthAmerica(x) & ColdRightPlace(x)) -> LivesIn(x))", "all x.((BorealTaigaZone(x) & NorthAmerica(x)) -> ColdPlaceToLiveIn(x))", "all x.((BorealTaigaZone(x) & NorthAmerica(x)) -> ColdPlaceToLive(x))", "All x y.((BoralTaigaZone(x) & NorthAmerica(y)) -> ColdPlace(x,y))", "all x.(BorealTaigaZone(x) -> ColdPlaceToLive(x))", "all x.(BorealTaigaZone(x) -> ColdPlaceToLiveIn(x))", "all x y.((BorealTaigaZone(x) & NorthAmerica(y)) -> ColdPlaceForLiving(x,y))", "all x.(BorealTaigaZone(x) -> ColdPlaceToLiveIn(x))", "all x.(BorealTaigaZone(x) -> ColdPlaceToLiveIn(x))", "all x y.((BorealTaigaZone(x) & NorthAmerica(y)) -> ColdPlaceIn(x,y))"]}
{"id": "folio_train_1331", "nl": "Taiga vole is typically much larger than most other North American voles, especially those from the genus Microtus.", "fol": "IsLargerThan(TaigaVole,MicrotusVole)", "prediction": ["all x y.((TaigaVole(x) & NorthAmericanVole(y)) -> (LargerThan(x,y) & MoreLargerThan(x,y)))", "all x.(TaigaVole(x) -> (LargerThanMostNorthAmericanVoles(x) & (GenusMistatus(x) | GenusMistatus(x))))", "all x y.((TaigaVole(x) & NorthAmericanVole(y)) -> (Larger(x,y) & (GenusMicrotus(x,y) | GenusMicrotus(x,y))))", "all x.(TaigaVole(x) -> (FarmerThanNorthAmericanVole(x) & EspeciallyGenusMicrotus(x)))", "all x.(TaigaVole(x) -> (LargerThanMostNorthAmericanVoles(x) & MicrotusVoles(x)))", "all x.(TaigaVole(x) -> (LargerThanOtherVoles(x) & SpeciesGenusMicrotus(x)))", "all x y.((TaigaVole(x) & NorthernAtlanticVole(y) & MicrotusVole(y)) -> TypicallyLarger(x,y))", "all x.((TaigaVole(x) & NorthAmericanVole(x)) -> GenerallyLarger(x))", "all x y.((TaigaVole(x) & NorthAmericanVole(y)) -> (MoreLarger(x,y) & Species(y) & Microtus(y)))", "all x.(TaigaVole(x) -> (LargerOfNorthAmericanVoles(x) & EspeciallyOwners(x) & Microtus(x)))", "all x.(TaigaVole(x) -> (LargerThanMostNorthAmericanVoles(x) & MicrotusFemales(x)))", "all x y.((TaigaVole(x) & NorthAmericanVole(y)) -> (Larger(x,y) & Greater(x,y)))", "all x y.((TaigaVole(x) & NorthAmericanVole(y) & InGenusMicrotus(x,y)) -> TypicallyLargerThan(x,y))", "all x.(TaigaVole(x) -> (LargerThanNorthAmericanVoles(x) & ParticularlyGenusMicrotusVoles(x)))", "all x.(TaigaVole(x) -> (Larger(x,NorthAmerica) & Larger(x,Microtus)))", "all x y.((TaigaVole(x) & NorthAmericanVole(y)) -> (LargerThanMost(x,y) & MicrotusGenus(x)))"]}
{"id": "folio_train_1332", "nl": "Cats like playing with taiga vole.", "fol": "CatsEnjoyPlayingWith(TaigaVole)", "prediction": ["all x.(Cat(x) -> LikesPlayingWithTaigaVole(x))", "all x.(Cat(x) -> (LikesPlaying(x) & TaigaVole(x)))", "all x.(Cat(x) -> LikesPlayingWithTaigaVole(x))", "all x y.((Cat(x) & TaigaVole(y)) -> LikesPlaying(x,y))", "all x.(Cat(x) -> LikesPlayingWithTaigaVole(x))", "all x.(Cat(x) -> LikesTaigaVole(x))", "all x y.((Cat(x) & TaigaVole(y)) -> LikesPlayingWith(x,y))", "all x.(Cat(x) -> LikesPlayingWithTaigaVole(x))", "all x y.((Cat(x) & TaigaVole(y)) -> LikesToPlayWith(x,y))", "all x.(Cat(x) -> LikesToPlayWithTaigaVole(x))", "all x.(Cat(x) -> LikesPlayingWithTaigaVole(x))", "all x.(Cat(x) -> LikesPlayingWithTaigaVole(x))", "all x.(Cat(x) -> PlaysWithTaigaVole(x))", "all x.(Cat(x) -> LikesPlayingWithTaigaVole(x))", "all x.(Cat(x) -> LikesPlayingWithTaigaVole(x))", "all x y.((Cat(x) & TaigaVole(y)) -> LikesBetween(x,y))"]}
{"id": "folio_train_1333", "nl": "Taiga vole's living place is not cold.", "fol": "-IsColdPlace(TaigaVole)", "prediction": ["all x.(TaigaVole(x) -> -Cold(x))", "all x.(TaigaVole(x) -> -Cold(x))", "all x.(TaigaVole(x) -> -Cold(x))", "all x.(TaigaVole(x) -> -Cold(x))", "all x.(TaigaVole(x) -> -Cold(x))", "all x.(TaigaVole(x) -> LivingPlace(x))", "all x.(TaigaVole(x) -> LivingPlace(x))", "(LivingPlace(taigaVole) -Cold(taiga))", "all x.(TaigaVole(x) -> -Cold(x))", "exists x.(TaigaVole(x) & -Cold(x))", "all x.(TaigaVole(x) -> -Cold(x))", "all x.(TaigaVole(x) -> -Cold(x))", "all x.(TaigaVole(x) -> -Cold(x))", "all x.(TaigaVole(x) -> -ColdLivingPlace(x))", "all x y.((TaigaVole(x) & LivingConsider(y)) -> -Cold(y))", "all x.(TaigaVole(x) -> -Cold(x))"]}
{"id": "folio_train_1334", "nl": "Every illness is in women or in men. ", "fol": "all x.(IsWoman(x) | IsMan(x))", "prediction": ["all x.(Illness(x) -> (InWomen(x) | InMen(x)))", "all x.(Men(x) -> (InVoice(x,Women) | InVoice(x,Men)))", "all x.(Illness(x) -> (In(x,Women) | In(x,Men)))", "all x.(Illness(x) -> (InWomen(x) | InMen(x)))", "all x.(Illness(x) -> (exists y.(Woman(y) & Ill(x,y)) | exists z.(Men(z) & Illness(x,z)))))", "all x.(Illness(x) -> (InWomen(x) | InMen(x)))", "all x.(Illness(x) -> (InWomen(x) | InMen(x)))", "all x.(Illness(x) -> (In(x,woman) | In(x,men)))", "all x.(Illness(x) -> (In(x,Women) | In(x,Men)))", "all x.(Illness(x) -> (In(x,Women) | In(x,Men)))", "all x.(Illness(x) -> (IsIn(x,Women) | In(x,Men)))", "all x.(Illness(x) -> (InWomen(x) | InMen(x)))", "all x.(Illness(x) -> (InWomen(x) | InMen(x)))", "all x.(Illness(x) -> (Women(x) | Men(x)))", "all x.(Illness(x) -> (exists y.(Women(y) | Men(y)) & In(x,y))))", "all x.(Women(x) | Men(x))"]}
{"id": "folio_train_1335", "nl": "No men have breast cancer.", "fol": "all x.(IsMan(x) -> -HasBreastCancer(x))", "prediction": ["-exists x.(Men(x) & BreastCancerous(x))", "-exists x.(Men(x) & BreastCancer(x))", "-exists x.(Men(x) & BreastCancer(x))", "-exists x.(Men(x) & BreastCancer(x))", "-exists x.(Men(x) & BreastCancer(x))", "-exists x.(Men(x) & BreastCancer(x))", "NecessaryForMen(m)", "-exists x.(Men(x) & HasBreakCancerous(x))", "-exists x.(Men(x) & BreastCancerous(x))", "-exists x.(Men(x) & BreastCancerous(x))", "-exists x.(Men(x) & HasBreastCancer(x))", "-exists x.(Men(x) & BreastCancer(x))", "-exists x.(Men(x) & BreastCancer(x))", "-exists x.(Men(x) & BreastCancer(y))", "-exists x.(Men(x) & BreastCancer(x))", "-exists x.(Men(x) & BreastCancer(x))"]}
{"id": "folio_train_1336", "nl": "Either breast cancer or non-breast cancer. ", "fol": "all x.(HasBreastCancer(x) | HasNonBreastCancer(x))", "prediction": ["(WomenCancer(x) | NonBreastCancer(x))", "(exists x.(BreastCancer(x) & (BreastCancer(x) | -BreastCancer(x)))", "all x.((BeastCancer(x) | NonBreastCancer(x)) -> Cancer(x))", "all x y.((BreastCancer(x) | NonBreastCancer(y)) -> (Breast(x) | NonBreastCancer(y)))", "all x.(BreastCancel(x) | NonBreastCancel(x))", "all x.((BirdCancer(x) | NonBreastCancer(x)) -> Canexist(x))", "(exists x.(BreastCancer(x) & (BreastCancer(x) | -BreastCancer(x)))", "exists x.(Bertilizer(x) | -BreastCancer(x))", "(LeftCancerous(x) | NonBreastCancerous(x))", "(NoBreakfast(breastCancer) & (Cancerous(nonbreastCancer) | CancerFree(nonbreastCancer)))", "exists x.(BreastCancer(x) | -BreastCancer(x))", "all x.((BreastCancer(x) | NonBreastCancer(x)) -> (Cancer(x) | Cancer(x)))", "(exists x.(BreastCancer(x) & (BreastCancer(x) | NonBreastCancer(x))))", "exists x.(BerryCancer(x) | NonBreastCancer(x))", "all x y.((BasalCancerous(x) & NonBreastCancerous(x)) -> ((BreastCancer(x) | NonBreastCancer(y))))", "all x.((BreastCancer(x) | NonBreastCancer(x)) -> (BreastCancer(x) | NonBreastCancer(x)))"]}
{"id": "folio_train_1337", "nl": "No type of cancer is without a tumor.", "fol": "all x.(IsTypeOfCancer(x) -> -HasNoTumor(x))", "prediction": ["-exists x.(Cancer(x) & -WeakTumor(x))", "no cancer(cancer) exists x.(Tumor(x) & -HasTumor(x)))", "all x.(Cancer(x) -> -ByTumor(x))", "-exists x.(Cancerous(x) & NoTypeOfCancerWithoutTumor(x))", "-exists x.(Cancer(x) & -HasTotal(x))", "-exists x.(Cancer(x) & -HasTumor(x))", "-exists x.(Cancer(x) & -WithoutTumor(x))", "no cancertype exists x.(Cancer(x) & -Tumor(x))", "all x.(Cancerous(x) -> -HasTumor(x))", "-exists x.(Cancer(x) & NoTumor(x))", "all x.(Cancer(x) -> -HasTumor(x))", "-exists x.(Cancer(x) & -NeedsTumor(x))", "-exists x.(Cancer(x) & Cancer(x) & -FavoriteTumor(x))", "-exists x.(Cancer(x) & -exists y.(Tumor(y) & -About(x,y))))", "-exists x.(Cancer(x) & -HasTumor(x))", "all x.(Cancer(x) -> NoTumor(x))"]}
{"id": "folio_train_1338", "nl": "All non-breast cancers are a type of cancer.", "fol": "all x.(HasNonBreastCancer(x) -> IsTypeOfCancer(x))", "prediction": ["all x.((Cancer(x) & NonBreast(x)) -> Cancer(x))", "all x.((Certain(x) & -Breast(x)) -> Cancer(x))", "all x.((Cancer(x) & -Beast(x)) -> Cancer(x))", "all x.(NonBreastCancer(x) -> Cancer(x))", "all x.(nonbreastCancer(x) -> Cancer(x))", "all x.(Cancer(x) -> -Breast(x))", "all x.((NonBreastCancer(x) & -breastCancer(x)) -> Cancer(x))", "all x.((NonBreastCancer(x) & Cancer(x)) -> Type(x))", "all x.(NonBreastCancer(x) -> Cancer(x))", "all x.((Cancer(x) & -Breast(x)) -> Cancer(x))", "all x.(NonBreastCancer(x) -> Cancer(x))", "all x.((Cancer(x) & -Breast(x)) -> Cancer(x))", "all x.(NonBreastCancer(x) -> CancerType(x))", "all x.((Cancerous(x) & -Breast(x)) -> Cancer(x))", "all x.(NonBreastCancer(x) -> Cancer(x))", "all x.(Cancer(x) -> NonBreast(x))"]}
{"id": "folio_train_1339", "nl": "If adenocarcinoma is a type of cancer or without a tumor, then adenocarcinoma is in women or without a tumor.", "fol": "(((IsTypeOfCancer(Adenocarcinoma) | HasNoTumor(Adenocarcinoma)) -> IsWoman(Adenocarcinoma)) | HasNoTumor(Adenocarcinoma))", "prediction": ["all x.((Adenocarcinoma(x) & (TypeOfCancer(x) | WithoutTumor(x))) -> (InWomen(x) | -(Fast(x) | InWomen(x)))))", "all x.((Adenocarcinoma(x) & (Cancer(x) | LacksTumor(x))) -> (InWomen(x) | WithoutTumor(x)))", "all x.((Adenocarcinoma(x) & (Cancer(x) | NoTumor(x))) -> (InWomen(x) | -Tumor(x)))", "all x.((Adenocarcinoma(x) & (Cancer(x) | -Cancer(x))) -> (InWomen(x) | -Cancer(x)))", "all x.((Adenocarcinoma(x) & (TypeOfCancer(x) | WithoutTumor(x))) -> (InWomen(x) | WithoutTumor(x)))", "all x.((Adenocarcinoma(x) & (Cancer(x) | -Cancer(x))) -> (InWomen(x) | -Cancer(x)))", "all x.((Adenocarcinoma(x) & (TypeOfCancer(x) | HasTumor(x))) -> (InWomen(x) | WithoutTumor(x)))", "all x.((Adenocarcinoma(x) & (TypeOfCancer(x) | -Tumor(x))) -> (InWomen(x) | WithoutTumor(x)))", "all x.((Adenocarcinoma(x) & (Cancer(x) | WithoutTumor(x))) -> (InWomen(x) | WithoutTumor(x)))", "all x.((Adenocarcinoma(x) & (Cancer(x) | -Tumor(x))) -> (InWomen(x) | -Tumor(x)))", "all x.((Adenocarcinoma(x) & (TypeOfCancerous(x) | WithoutTumor(x))) -> (InWomen(x) | -Tumor(x)))", "all x.((Adenocarcinoma(x) & (Cancer(x) | NoTumor(x))) -> (exists y.(Woman(y) | NoTumor(y)))))", "all x.((Adenocarcinoma(x) & (TypeOfCancer(x) | WithoutTumor(x))) -> (InFemales(x) | WithoutTumor(x)))", "all x.((Adenocarcinoma(x) & (TypeOfCancer(x) | WithoutTumor(x))) -> (InWomen(x) | WithoutTumor(x)))", "all x.((Adenocarcinoma(x) & (TypeOfCancer(x) | WithoutTumor(x))) -> (InWomen(x) | WithoutTumor(x)))", "all x.((Adenocarcinoma(x) & (TypeCancerous(x) | WithoutTumor(x))) -> (InWomen(x) | WithoutTumor(x)))"]}
{"id": "folio_train_1340", "nl": "Adenocarcinoma is a breast cancer.", "fol": "HasBreastCancer(Adenocarcinoma)", "prediction": ["all x.(Adenocarcinoma(x) -> BreastCancer(x))", "all x.(Adenocarcinoma(x) -> BreastCancer(x))", "all x.(Adenocarcinoma(x) -> BreastCancer(x))", "all x.(Adenocarcinoma(x) -> BreastCancerous(x))", "all x.(Adenocarcinoma(x) -> BreastCancer(x))", "all x.(Adenocarcinoma(x) -> BreastCancer(x))", "all x.(Adenocarcinoma(x) -> BreastCancer(x))", "all x.(Adenocarcinoma(x) -> BreastCancer(x))", "all x.(Adenocarcinoma(x) -> BreastCancer(x))", "all x.(Adenocarcinoma(x) -> BreastCancer(x))", "all x.(Adenocarcinoma(x) -> BreastCancer(x))", "all x.(Adenocarcinoma(x) -> BreastCancer(x))", "all x.(Adenocarcinoma(x) -> BreastCancerous(x))", "all x.(Adenocarcinoma(x) -> BreastCancer(x))", "all x.(Adenocarcinoma(x) -> BreastCancer(x))", "all x.(Adenocarcinoma(x) -> BreastCancer(x))"]}
{"id": "folio_train_1341", "nl": "Adenocarcinoma is in women.", "fol": "IsWoman(Adenocarcinoma)", "prediction": ["all x.(Adenocarcinoma(x) -> InWomen(x))", "all x.(Adenocarcinoma(x) -> InWomen(x))", "all x.(Adenocarcinoma(x) -> InWomen(x))", "all x.(Adenocarcinoma(x) -> InWomen(x))", "all x y.((Adenocarcinoma(x) & Female(y)) -> In(x,y))", "All x.(Adenocarcinoma(x) -> InWomen(x))", "all x.(Adenocarcinoma(x) -> InWomen(x))", "all x.(Adenocarcinoma(x) -> InWomen(x))", "All x.(Adenocarcinoma(x) -> InWomen(x))", "all x.(Adenocarcinoma(x) -> InWomen(x))", "all x.(Adenocarcinoma(x) -> exists y.(Women(y) & In(x,y)))", "all x.(Adenocarcinoma(x) -> InWomen(x))", "all x.(Adenocarcinoma(x) -> InWomen(x))", "all x.(Adenocarcinoma(x) -> InWomen(x))", "all x.(Adenocarcinoma(x) -> InWomen(x))", "all x.(Adenocarcinoma(x) -> InWomen(x))"]}
{"id": "folio_train_1342", "nl": "If adenocarcinoma is in women or without a tumor, then adenocarcinoma is without a tumor and a non-breast cancer.", "fol": "((IsWoman(Adenocarcinoma) | HasNoTumor(Adenocarcinoma)) -> (HasNoTumor(Adenocarcinoma) & HasNonBreastCancer(Adenocarcinoma)))", "prediction": ["all x.((Adenocarcinoma(x) & (Women(x) | IsWithoutTumor(x))) -> (-Tumor(x) & -NonBreathCancer(x)))", "all x.((Adenocarcinoma(x) & InWomen(x)) -> (-Tumor(x) & -BreastCancer(x)))", "all x.((Adenocarcinoma(x) & (InWomen(x) | NoTumour(x))) -> (-Tumor(x) & NonBreastCancer(x)))", "all x.((Adenocarcinoma(x) & (InWomen(x) | WithoutTumor(x))) -> (-HasTumor(x) & -NonBreastCancer(x)))", "all x y.((Adenocarcinoma(x) & InWomenOrWithoutTumour(x)) -> (WithoutTumor(x) & NonBreastCancer(y)))", "all x.((Adenocarcinoma(x) & (InWomen(x) | WithoutTumor(x))) -> (-ThreatCancer(x) & NonBreastCancer(x)))", "all x.((Adenocarcinoma(x) & (InWomen(x) | -Tumor(x))) -> (-Tumor(x) & NonBreastCancer(x)))", "all x.((Adenocarcinoma(x) & (InWomen(x) | -WorstTumor(x))) -> (-Tumor(x) & NonBreastCancer(x)))", "all x.((Adenocarcinoma(x) & InWomen(x)) | WithoutTumor(x)) -> (-Adenocarcinoma(x) & NonBreastCancer(x)))", "all x.((Adenocarcinoma(x) & (InWomen(x) | WithoutTumor(x))) -> (-FourTumours(x) & NonBreastCancer(x)))", "all x.((Adenocarcinoma(x) & (InWomen(x) | WithoutTumor(x))) -> (-Tumor(x) & -NonBreastCancer(x)))", "all x.((Adenocarcinoma(x) & (InWomen(x) | -Tumor(x))) -> (-Tumor(x) & NonBreastCancer(x)))", "all x.((Adenocarcinoma(x) & InWomenOrWithoutTumor(x)) -> (-Adenocarcinoma(x) & -BreastCancer(x)))", "all x.((Adenocarcinoma(x) & (InWomen(x) | WithoutTumor(x))) -> (WithoutTumor(x) & NonBreastCancer(x)))", "all x.((Adenocarcinoma(x) & (SinWomen(x) | -Tumor(x))) -> (-TotalTumor(x) & -BreastCancer(x)))", "all x.((Denocarcinoma(x) & -(Women(x) | WithoutTumor(x))) -> (-WorstTumor(x) & -NonBreastCancer(x)))"]}
{"id": "folio_train_1343", "nl": "Some monitors equipped in the lab are produced by the company named AOC. ", "fol": "exists x.(EquippedInLab(x) & ProducedByAOC(x))", "prediction": ["exists x.(Monitor(x) & EquippedInLab(x) & ProducedBy(x,AOC))", "exists x.(Monitor(x) & EquippedInLab(x)) -> ProducedByAOC(x))", "exists x y.(Monitor(x) & EquippedInLab(x) & Company(y) & ProducedBy(x,y))", "exists x y.(Monitor(x) & EquipedInLab(x,y) & Company(y) & AOC(y))", "exists x.(Monitor(x) & EquippedInLab(x) & DesignedInLab(x) & ProducedByAOC(x))", "exists x.(Monitor(x) & EquippedInLab(x) & CreatedByCompany(x))", "exists x.(Monitor(x) & EquippedInLab(x) & ProducedBy(x) AOC)", "exists x.(Monitor(x) & EquivalentInLab(x) & ProducedByAOC(x))", "exists x.(Monitor(x) & EquippedInLab(x) & ProducedByAOC(x))", "exists x.(Monitor(x) & EquipmentdInLab(x) & ProducedBy(x,AOC))", "exists x.(Monitor(x) & EquippedInLab(x) & ProducedByCompany(x))", "all x y z.((Monitor(x) & Lab(y) & Company(z) & Equipped(x,y)) -> ProducedBy(x,z))", "exists x.(Monitor(x) & EquippedInLab(x) & ProducedBy(x,AOC))", "exists x.(Monitor(x) & EquippedInLab(x) & ProducedBy(x,AOC))", "exists x.(Monitor(x) & EquippedInLab(x))", "exists x.(Monitor(x) & EquippedInLab(x) & Company(x) & AOC(x))"]}
{"id": "folio_train_1344", "nl": "All monitors equipped in the lab are cheaper than their original prices. ", "fol": "all x.(EquippedInLab(x) -> IsCheaperThanOriginalPrice(x))", "prediction": ["all x.((Monitor(x) & EquippedInLab(x)) -> CheaperThanOriginalPrice(x))", "all x.((Monitor(x) & EquippedInLab(x)) -> LessBudgetThanOriginalPrices(x))", "all x.((Monitor(x) & EquippedInLab(x)) -> BoughtByOriginalPrices(x))", "all x.((Monitor(x) & EquippedInLab(x)) -> CheaperThanOriginalPrice(x))", "all x y.((Monitor(x) & EquippedInLab(x,y)) -> CheaperThanPricing(y))", "all x.((Monitor(x) & Equipped(x) & InLab(x)) -> BoughtFasterThanOriginalPrice(x))", "all x.((Monitor(x) & EquippedInLab(x)) -> BoughtLastPrice(x))", "all x.((Monitor(x) & EquippedInLab(x)) -> LowerThanOriginalPrice(x))", "all x.((Monitor(x) & EquippedInLab(x)) -> LowerThanOriginalPrices(x))", "all x.((Monitor(x) & EquippedInLab(x)) -> CheaperThanOriginalPrice(x))", "all x.((Monitor(x) & EquipedInLab(x)) -> CheaperThanOriginalPrice(x))", "all x.((Monitor(x) & EquippedInLab(x)) -> BetterThanOriginalPrice(x))", "all x.((Monitor(x) & EquippedToLab(x) & LowerPrices(x)) -> Better(x))", "all x.((Monitor(x) & EquippedInLab(x)) -> LessFewerDetails(x))", "(all x.(Microscope(x) & EnabledInLab(x)) -> CheaperThanOriginalPrice(x))", "all x.((Monitor(x) & EquippedInLab(x)) -> CheaperComparedToOriginalPrice(x))"]}
{"id": "folio_train_1345", "nl": "If the monitor is cheaper than its original prices, then its resolution is 1080p. ", "fol": "all x.(IsCheaperThanOriginalPrice(x) -> HasResolution1080p(x))", "prediction": ["all x.((Monitor(x) & CheaperThanOriginalPurchases(x)) -> Resolution1080p(x))", "all x y.((Monitor(x) & LowerPrices(x,y) & OriginalPrices(y)) -> Resolution(x,1080))", "all x.((Monitor(x) & CheaperThanOrginalPrices(x)) -> Resolution(x,1080p))", "all x.((Monitor(x) & LowerThanOriginalPrices(x)) -> Resolution1080p(x))", "all x.((Monitor(x) & CheaperCost(x,ExtractPrice)) -> 1080P Resolution(x))", "all x.((Monitor(x) & LowerThanOriginalPrices(x)) -> ResolutionIs(x,1080))", "all x.((Monitor(x) & CheaperThanOriginalPrices(x)) -> ResolutionPosition(x,1080))", "all x.((Monitor(x) & LessSaferThanOriginalPrices(x)) -> Resolution1080p(x))", "all x.((Monitor(x) & LowerThanOriginalPrices(x)) -> Resolution10080p(x))", "all x.((Monitor(x) & LowerPrices(x)) -> ResolutionLike(x,1080p))", "all x.((Monitor(x) & Discounter(x,OriginalPrices)) -> Resolution10080p(x))", "all x.((Monitor(x) & CheaperThanOriginalPrices(x)) -> Resolution(x,1080p))", "all x.((Monitor(x) & LowerLastPrices(x)) -> Resolution1080p(x))", "all x.((Monitor(x) & CheaperThanOriginalPrices(x)) -> Resolution(x,10))", "all x.((Monitor(x) & LowerPricesOfOriginalPrices(x)) -> Resolution(x,1080p))", "all x.((Monitor(x) & LowerPrices(x)) -> ResolutionPlot(x,808))"]}
{"id": "folio_train_1346", "nl": "If a monitor is with a resolution of 1080p, then it does not support the type-c port. ", "fol": "all x.(HasResolution1080p(x) -> -SupportsTypeCPort(x))", "prediction": ["all x.((Monitor(x) & Resolution(x,10)) -> -Support(x,typeCPort))", "all x.((Monitor(x) & Resolution(x,10)) -> -SupportsTypeCPort(x))", "all x.((Monitor(x) & ResolutionTo1080(x)) -> -Support(x,typeC))", "all x.((Monitor(x) & Resolution(x,100)) -> -SupportsTypeCPort(x))", "all x.((Monitor(x) & Resolution(x,10)) -> -SupportsTypeCPort(x))", "all x.((Monitor(x) & Resolution1080p(x)) -> -SupportsTypeCPort(x))", "all x.((Watcher(x) & ResolutionRadius(x,1102)) -> -SupportsTypeCPort(x))", "all x.((Monitor(x) & ResolutionAt(x,10)) -> -SupportsTypeCPort(x))", "all x.((Monitor(x) & Resolution(x,10)) -> -SupportsTypeCPort(x))", "all x.((Monitor(x) & Resolution(x,10)) -> -SupportsTypeCPort(x))", "all x.((MoniTOR(x) & ResolutionAt1080p(x)) -> -SupportsTypeCPort(x))", "all x.((Monitor(x) & Resolution(x,t)) -> -SupportsTypeCPort(x))", "all x.((Monitor(x) & ResolutionT1080P(x)) -> -SpecifiesConnection(x))", "all x.((Monitor(x) & Resolution1080p(x)) -> -SupportsTypeCPort(x))", "all x.((Monitor(x) & ResolutionOf10080p(x)) -> -SupportsPortOfTypeC(x))", "all x.((Monitor(x) & Resolution(x,10)) -> -SupportsTypeCPort(x))"]}
{"id": "folio_train_1347", "nl": "LG34 is equipped in the lab.  ", "fol": "EquippedInLab(Lg34)", "prediction": ["all x.(LG34(x) -> EquippedInLab(x))", "all x.(LG34(x) -> EquippedInLab(x))", "all x.(LG34(x) -> EquippedInLab(x))", "all x.(LG34(x) -> EquippedInLab(x))", "all x.(LG34(x) -> EquippedInLab(x))", "all x.(LG34(x) -> EquippedInLab(x))", "all x.(LG34(x) -> EquippedInLab(x))", "all x.(LG34(x) -> EquippedInLab(x))", "all x.( LG34(x) -> EquippedInLab(x))", "Located in Lab(LG34)", "all x.(LG34(x) -> EquippedInLab(x))", "all x.(LG34(x) -> EquippedInLab(x))", "all x.( LG34(x) -> EquippedInLab(x))", "ALL x.(LG34(x) -> EquippedInLab(x))", "all x.(LG34(x) -> EquippedInLab(x))", "all x.(LG34(x) -> EquippedInLab(x))"]}
{"id": "folio_train_1348", "nl": "LG34 machine is produced by AOC.", "fol": "ProducedByAOC(Lg34)", "prediction": ["all x y.((Laptop(x) & AOC(y)) -> ProducedBy(x,y))", "all x.(LG34(x) -> ProducedByAOC(x))", "all x.(LG34Machine(x) -> ProducedByAOC(x))", "all x.(LG34(x) -> ProducedByAOC(x))", "all x.(Gl34Machine(x) -> ProducedByAOC(x))", "the LG34 Machine is produced by AOC.", "all x.(LG34Machine(x) -> ProducedByAOC(x))", "all x.(LG34Machine(x) -> ProducedByAOC(x))", "-ProducedByAOC(LG34)", "all x.(LG34(x) -> ProducedByAOC(x))", "all x.(LG34(x) -> ProducedByAOC(x))", "-(Lag34Machine(m) & ProducedByAOC(m))", "all x.(LG34(x) -> ProducedByAOC(x))", "all x.(LG34Machine(x) -> ProducedByAOC(x))", "all x y.((Laggle34(x) & AOC(y)) -> ProducedBy(x,y))", "all x y.((LG34Machine(x) & AOC(y)) -> ProducedBy(x,y))"]}
{"id": "folio_train_1349", "nl": "LG34 machine does not support the type-c port.", "fol": "-SupportsTypeCPort(Lg34)", "prediction": ["is not supported by type-c port of LG34, however.", "(Unfortunately,L LG34Machine hasn'tTypeCPort(LG34))", "all x.((Manufacturer(x) & LG34(x)) -> -SupportsTypeCPort(x))", "-SupportsTypeCPort(LG34(Machine)", "all x.(LG34Machine(x) -> -SupportsTypeCPort(x))", "all x.(LG34(x) -> -SupportsTypeCPort(x))", "all x.(LGG34Machine(x) -> -SupportsTypeCPort(x))", "all x.(LG34Machine(x) -> -SupportsTypeCPort(x))", "all x.(LGG34(x) -> -supportsTypeCPort(x))", "(-supportsTypeCPort(LG34))", "all x.(LG34Machine(x) -> -SupportsTypeCPort(x))", "all x.(LG34Machine(x) -> -SupportsTypeCPort(x))", "all x.(LG34Machine(x) -> -SupportsTypeCPortForLlg34(x))", "-(LGB34Machine(n) & TypeCPort(n))", "all x y.((Model(x) & LG34(y)) -> -StyleCPort(y))", "(-SupportsTypeCPort(LG34))"]}
{"id": "folio_train_1350", "nl": "LG34 is not with a resolution of 1080p.", "fol": "-HasResolution1080p(Lg34)", "prediction": ["(NotResolutionOf1080P(LG34))", "all x.(LG34(x) -> -Resolution(x,1080))", "all x.(LG34(x) -> -ResolutionSensitive(x,1080))", "all x.(LG34(x) -> -Resolution(x,10))", "all x.(LG34(x) -> -Resolution(x,1080))", "all x.(LG34(x) -> -ChangeResolution(x,1008))", "(-Resolution(LG34,1080p))", "all x.(LG34(x) -> -ResolutionTo(x,10) & -(resolutionTo(x,10) & -ResolutionTo(x,10))))", "(-ResolutionOf1080p(LG34))", "all x.(LG34(x) -> -Resolution(x,1080p))", "all x.(LG34(x) -> -Resolution(x,1085))", "all x.(LG34(x) -> -ResolutionDepends(x,10)))", "all x.(LG34) -> -WithResolution(x,1080))", "all x.(LG34(x) -> NotWithResolution(x,10080))", "all x.(LG34(x) -> -Resolution(x,1080p))", "all x.(LG34(x) -> -Resolution(x,1008))"]}
{"id": "folio_train_1351", "nl": "All fruits sold in Boston are shipped from Columbia. ", "fol": "all x.(FruitsSoldInBoston(x) -> FruitsShippedFromColumbia(x))", "prediction": ["all x.((Fruit(x) & SoldInBoston(x)) -> ShippedFromColumbia(x))", "all x.((Fruit(x) & SoldInBoston(x)) -> ShippedFromColumbia(x))", "all x y.((Fruit(x) & SoldInBoston(x)) -> ShipsFromColumbia(x))", "all x.((Fruit(x) & SoldIn(x,Boston)) -> ShippedFromColumbia(x))", "all x y.((Fruit(x) & SaleIn(x,Boston) & Columbia(y)) -> ShippedFrom(x,Colombia))", "all x.((Fruit(x) & SoldInBoston(x)) -> ShippedFromColumbia(x))", "all x.((Fruit(x) & ForBuy(x,Boston)) -> ShippedFromColumbia(x))", "all x.(Fruit(x) -> ShippedFromColumbia(x))", "all x.((Fruit(x) & SoldInBoston(x)) -> ShippedFromColumbia(x))", "all x.((Fruit(x) & SoldInBoston(x)) -> ShippedFromColorado(x))", "all x.((Fruit(x) & SoldInBoston(x)) -> ShippedFromColumbia(x))", "all x.((Fruit(x) & SoldInBoston(x)) -> ShippedFromColumbia(x))", "all x.((Fruit(x) & SoldInBoston(x)) -> ShippedFromColumbia(x))", "all x.((Fruit(x) & SoldIn(x,Boston)) -> ShippedFromColumbia(x))", "all x y z.((Fruit(x) & SalesMetropolitan(x,y) & Boston(z)) -> ShipsFromColumbia(x,z))", "all x.((Fruit(x) & SoldInBoston(x)) -> ShippedFromColumbia(x))"]}
{"id": "folio_train_1352", "nl": "Some fruits sold in New Haven are shipped from Mexico.", "fol": "exists x.(FruitsSoldInNewHaven(x) & FruitsShippedFromMexico(x))", "prediction": ["exists x.(Fruit(x) & SoldInNew Haven(x) & ShippedFrom(x,Mexico))", "exists x.(Fruit(x) & SoldInNewHandon(x) & ShippedFromMexico(x))", "exists x.(Fruit(x) & SoldInNewHaven(x) & ShippedFromMexico(x))", "exists x y.((Fruit(x) & NewHandon(y) & SoldIn(x,y)) -> ShippedFrom(x,y))", "exists x.(Fruit(x) & SoldInNewHaven(x) & ShippedFromMexico(x))", "exists x.(Consume(x) & SoldInNewHandaven(x) & ShippedFromMexico(x))", "exists x.(Fruit(x) & SoldInNewHandon(x) & ShippedFromMexico(x))", "exists x.(Fruit(x) & SoldInNewHann(x) & ShippedFrom(x,y))", "exists x.(Fruit(x) & SoldInNewHanaway(x) & ShippedFromMexico(x))", "exists x.(Fruit(x) & SoldInNewHunt(x) & ShippedFromMexico(x))", "exists x.(Fruit(x) & SoldInNew Haven(x,New Haven) & ShippedFrom(x,Mexico))", "exists x.(Fruit(x) & SoldInNewHonor(x) & ShippedFrom(x,Mexico))", "exists x.(Fruit(x) & SoldInNewHaven(x) & ShippedFromMexico(x))", "exists x.(Fruit(x) & SoldInNewHunt(x) & ShippedFromMexico(x))", "exists x.(Fruit(x) & SoldInNewHandon(x) & ShippedFromMexico(x))", "exists x.(Fruit(x) & SoldInNew Haven(x) & ShippedFrom(x, Mexico))"]}
{"id": "folio_train_1353", "nl": "No fruits shipped from Columbia are fruits sold in New York. ", "fol": "all x.(FruitsShippedFromColumbia(x) -> -FruitsSoldInNewYork(x))", "prediction": ["all x.((Fruit(x) & ShippedToColumbia(x)) -> -FruitSoldInNewYork(x))", "-exists x.(Fruit(x) & ShippedFromColumbia(x) & inNewYork(x))", "all x.((Fruit(x) & ShippedFromColumbia(x)) -> FruitSoldInNewYork(x))", "-exists x.(Fruit(x) & ShippedFromColumbia(x) & SaltedInNewYork(x))", "all x.((Fruit(x) & ShippedFromColumbia(x)) -> NoFruitSolvedInNewYork(x))", "-all x.(Fruit(x) & ShippedFromColumbia(x) -> NewYork(x))", "all x.((Fruit(x) & ShippedFromColumbia(x)) -> -SoldInNewYork(x))", "all x.((Fruit(x) & ShippedFromColumbia(x)) -> FruitSoldInNewYork(x))", "all x.((Fruit(x) & ShippedFromColumbia(x)) -> SalesInNewYork(x))", "-exists x.(Fruit(x) & ShippedFromColumbia(x) & NewYork(y) & Fruit(x,y))", "all x y.((Fruit(x) & ShippedFromColumbia(x,y)) -> (Fruit(x,y) & NewYork(y)))", "all x y.((Fruit(x) & ShippedFromColumbia(x,y)) -> -FruitSoldInNewYork(x))", "(-exists x.(Fruit(x) & ShippedFromColumbia(x)) & -exists y.(Fruit(y) & SoldInNewYork(y))))", "-exists x.(Fruit(x) & ShippedFromColumbia(x) & -SoldInNewYork(x))", "-exists x.(Fruit(x) & ShippedFromColumbia(x) & -SoldInNewYork(x))", "all x.((Fruit(x) & ShippedAtColumbia(x)) -> -SoldInNewYork(x))"]}
{"id": "folio_train_1354", "nl": "Avocadoe are a kind of fruit sold in New York or Boston. ", "fol": "(FruitsSoldInNewYork(Avocado) | FruitsSoldInBoston(Avocado))", "prediction": ["all x.(Avocado(x) -> (Fruit(x) & (SoldInNewYork(x) | SoldInBoston(x))))", "all x.(Avocado(x) -> (Fruit(x) & (SoldInNewYork(x) | SoldInBoston(x))))", "all x.(Avocado(x) -> (GiftOfferedInNewYork/Boston(x)))", "all x.(Avocados(x) -> (Fruit(x) & (SoldInNewYork(x) | SoldInBoston(x))))", "all x.(Avocado(x) -> (Fruit(x) & (SoldInNewYork(x) | SoldInBoston(x))))", "all x.(Avocado(x) -> (SoldInNewYork(x) | SoldInBoston(x)))", "all x.(Avocado(x) -> (Fruit(x) &(SoldInNewYork(x) | SoldInBoston(x))))", "all x.(AmericanAvote(x) -> (Fruit(x) & (SoldNewYork(x) | SoldInBoston(x))))", "all x.(Avocado(x) -> (SoldInNewYorkOrBoston(x)))", "all x.(Avocado(x) -> (Fruit(x) & (SoldInNewYork(x) | SoldInBoston(x))))", "all x.(Avocado(x) -> (SoldInNewYork(x) | SoldInBoston(x)))", "exists x.(Avocado(x) & (SoldInNewYork(x) | SoldInBoston(x)))", "all x.(Amazon(x) -> (OriginalFruit(x) & (SoldInNewYork(x) | SoldInBoston(x))))", "all x.(Avocado(x) -> (From(NovNewYorkTo(x) | From(x,Boston))))", "all x.(Avocado(x) -> (Fruit(x) & (SoldInNewYork(x) | ServedInBrooklyn(x))))", "all x.(Avocado(x) -> (Fruit(x) & (SoldInNewYork(x) | SoldInBoston(x))))"]}
{"id": "folio_train_1355", "nl": "Avocadoe are either shipped from Columbia and sold in New Haven, or neither shipped from Columbia nor sold in New Haven. ", "fol": "-((FruitsShippedFromColumbia(Avocado) & -FruitsSoldInNewHaven(Avocado)) | (-FruitsShippedFromColumbia(Avocado) & FruitsSoldInNewHaven(Avocado)))", "prediction": ["all x.(Apple(x) -> ((ShippedFromColumbus(x) & SoldInNew Haven(x)) | -ShippedFromColumbus(x) & SoldInNew Haven(x)))", "all x.(Avocado(x) -> (ShippedFromColumbia(x) & SoldInNew Haven(x)) | (-ShippedFromColumbia(x) & SoldInNew Haven(x))))", "all x.(Avocado(x) -> ((ShippedFromColumbia(x) & SoldInNew Haven(x)) | -ShippedFromColumbia(x) & SoldInNew Haven(x))))", "all x.(Avocado(x) -> (ShippedFromColumbia(x) | SoldInNew Haven(x)))", "all x.(Avocado(x) -> ((ShippedFromColumbus(x) & SoldInNew Haven)) | (-ShippedFromColumbus(x) & SoldInNew Haven))))", "all x.(Avocate(x) -> (ShippedFromColumbia(x) & SoldInNew Haven(x)) | -ShippedFromColumbia(x) & SoldInNew Haven(x)))", "all x.(Avocado(x) -> ((ShippingFromColumbia(x) & SoldInNewHanaway(x)) | -ShippingFromColumbia(x) & SoldInNewHanaway(x))))", "all x.(Avocado(x) -> (ShippedFromColumbia(x) & SoldInNew Haven(x)) | -ShippedFromColumbia(x) & SoldInNew Haven(x)))", "all x.(Avocado(x) -> (ShippedFromColumbia(x) & SoldInNewHonor(x)) | (-ShippedFromColumbia(x) & SoldInNewHonor(x))))", "all x y z.((Avocado(x) & Columbia(y) & New Haven(z) & ShippedFrom(x,y)) | ((-ShippingFrom(x,z) & New Haven(x)) & -ShippedFrom(x,y,z))\")", "all x.(Avocata(x) -> (ShippedFromColumbia(x) & SoldInNew Haven(x) | -ShippedFromColumbia(x) & SoldInNew Haven(x)))", "all x y.((Avocado(x) & Columbia(y)) -> (ShippedFrom(x,y) & SoldInNew Haven(x)) | (-ShippedFrom(x,y) & SoldInNew Haven(x,y))))", "all x.(Avocado(x) -> (ShippedFromColumbia(x) & SoldInNew Haven(x)) | -ShippedFromColumbia(x) | SoldInNew Haven(x)))", "all x.(Avocado(x) -> (ShippedFromColumbia(x) & SoldInNewHancock(x)) | -ShippedFromColumbia(x) & SoldInNewHencock(x)))", "all x.(Avocado(x) -> ((ShippedFromColumbia(x) & SoldInNewHancock(x)) | (-ShippedFromColumbia(x) & SoldInNewHancock(x))))", "all x.(Avocado(x) -> (ShippedFromColumbia(x) & SoldInNewHanover(x)) | -ShippedFromColumbia(x) & SoldInNewHanover(x)))"]}
{"id": "folio_train_1356", "nl": "Avocados are a kind of fruit sold in New York.", "fol": "FruitsSoldInNewYork(Avocado)", "prediction": ["all x.(Avocado(x) -> (Fruit(x) & SoldInNewYork(x)))", "all x.(Avocado(x) -> (Fruit(x) & NewYork(y) & SoldIn(x,y)))", "all x y.((Avocado(x) & NewYork(y)) -> IsSoldIn(x,y))", "all x y.((Avocado(x) & NewYork(y)) -> FruitSoldIn(x,y))", "all x.(Avocat(x) -> (Fruit(x) | SoldInNewYork(x)))", "all x y.((Avocado(x) & NewYork(y)) -> ProducedIn(x,y))", "all x.(Avocat(x) -> SaledInNewYork(x))", "all x.(Avocado(x) -> (SoldInNewYork(x) | SellDepartment(x,NewYork)))", "all x.(Avocado(x) -> (SoldInNewYork(x) & CalledFruit(x)))", "all x.(Avocado(x) -> (Fruit(x) & SoldInNewYork(x)))", "all x.(Avocado(x) -> (Beverage(x) & SoldInNewYork(x)))", "all x.(Avocat(x) -> (Fruit(x) & SoldInNewYork(x)))", "all x y.((Apple(x) & NewYork(y)) -> SoldIn(x,y))", "all x.(Avocado(x) -> (Fruit(x) & SoldInNewYork(x)))", "all x.(Avocado(x) -> ProducedInNewYork(x))", "all x.(Avocado(x) -> (BitterFood(x) & SoldInNewYork(x)))"]}
{"id": "folio_train_1357", "nl": "Avocados are either sold in New York or sold in New Haven.", "fol": "(FruitsSoldInNewYork(Avocado) | FruitsSoldInNewHaven(Avocado))", "prediction": ["all x.(Avocado(x) -> (SoldInNewYork(x) | SoldInNewHaven(x)))", "all x.(Avocado(x) -> (SoldInNewYork(x) | SoldInNewHonor(x)))", "all x.(Avocat(x) -> (SoldInNewYork(x) | SoldInNewHunt(x)))", "all x y.((Avocado(x) & NewYork(y)) -> (SoldIn(x,y) | SoldIn(x,y)))", "all x.(Avocado(x) -> (SoldInNewYork(x) | SoldInNewHann(x)))", "all x.(Avocado(x) -> (SoldInNewYork(x) | SoldInNewHonoran(x)))", "all x.(Avocado(x) -> ((SoldInNewYork(x) | SoldInNewHonor(x))))", "all x.(Avocado(x) -> (SoldInNewYork(x) | SoldInNewHancock(x)))", "all x.(Avocado(x) -> (SoldInNewYork(x) | SoldInNewHunt(x)))", "all x.(Avocado(x) -> (SoldInNewYork(x) | SoldInNewHandon(x)))", "all x.(Avocado(x) -> (SoldInNewYork(x) | SoldInNewHanover(x)))", "all x.(Avocado(x) -> (SoldInNewYork(x) | SoldInNewHanford(x)))", "all x.(Avocado(x) -> (SolledIn(x,NewYork) | SoldIn(x,New Haven)))", "all x y.((Avocado(x) & NewYork(y)) -> (SoldIn(x,y) | SoldIn(x,y)))", "all x.(Avocado(x) -> (SoldInNewYork(x) | SoldInNewHonor(x)))", "all x.(Avocado(x) -> (SoldInNewYork(x) | SoldInNewHunt(x)))"]}
{"id": "folio_train_1358", "nl": "Avocados are either sold in New Haven or sold in Boston", "fol": "(FruitsSoldInNewHaven(Avocado) | FruitsSoldInBoston(Avocado))", "prediction": ["all x.(Avocat(x) -> (SoldInNew Haven(x) | SoldInBoston(x)))", "all x.(Avocado(x) -> (SoldInNew Haven(x) | SoldInBoston(x)))", "all x.(Avocado(x) -> (SoldInNew Haven(x) | SoldInBoston(x)))", "all x.(Avocado(x) -> (SoldInNew Haven(x) | SoldInBoston(x)))", "all x.(Avocado(x) -> (SoldInNew Haven(x) | SoldInBoston(x)))", "all x.(Avocado(x) -> (SoldInNew Haven(x) | SoldInBoston(x)))", "all x.(Avocado(x) -> (SoldInNew Haven(x) | SoldInBoston(x)))", "all x.(Avocado(x) -> (SoldInNew Haven(x) | SoldInBoston(x)))", "all x.(Avocado(x) -> (Avocate(x) & (SoldInNewHaven(x) | SoldInBoston(x))))", "all x.(Avocado(x) -> (SoldInNew Haven(x) | SoldInBoston(x)))", "all x.(Avocado(x) -> (SoldInNew Haven(x) | SoldInBoston(x)))", "all x.(Avocata(x) -> (SoldInNewHunt(x) | SoldInBoston(x)))", "all x.(Avocado(x) -> (SoldInNew Haven(x) | SoldInBoston(x)))", "all x.(Avocat(x) -> (IsSoldInNew Haven(x) | IsSoldInBoston(x)))", "all x.(Avocado(x) -> (SoldIn(x,New Haven) | SoldIn(x,Boston)))", "all x.(Avocado(x) -> (SoldInNewHonor(x,New Haven) | SoldInMassachusetts(x,Boston)))"]}
{"id": "folio_train_1359", "nl": "If avocados are not sold in New York and not shipped from Columbia, then they are neither sold in New York nor New Haven.", "fol": "((-FruitsSoldInNewYork(Avocado) & -FruitsShippedFromColumbia(Avocado)) -> (-FruitsSoldInNewYork(Avocado) & -FruitsSoldInNewHaven(Avocado)))", "prediction": ["all x.((Avocado(x) & -SoldInNew York(x) & -ShippedFromColumbus(x)) -> -(SoldInNew York(x) | ShippedFromNewHenness(x)))", "all x.((Avocado(x) & -SoldInNewYork(x) & -SoldFromColumbia(x)) -> (-SoldInNewYork(x) & -SoldFromNew Haven(x)))", "all x.((Avocado(x) & -SoldInNewYork(x) & -ShippedFromColumbia(x)) -> (NeitherSoldInNewYork(x) & -SoldInNew Haven(x)))", "all x.((Avocado(x) & -SoldInNew York(x) & -ShippedFromColumbia(x)) -> -SoldInNewYork(x) & -ShippedFromColumbia(x))", "all x.((Avocado(x) & -SoldInNewYork(x) & -ShippedFromColumbia(x)) -> -SoldInNewYork(x) & -SoldFromNewHonor(x))", "all x.((Avocado(x) & -SoldInNewYork(x) & -ShippedFromColumbia(x)) -> NeitherSoldInNewYork(x) & -SoldFromNewHonoran(x))", "all x.((Avocado(x) & -SoldInNewYork(x) & -SoldFromColumbia(x)) -> (-SoldInNewYork(x) & -SoldFromNew Haven(x)))", "all x.((Avocado(x) & -SoldInNewYork(x) & -ShippedFromColumbia(x)) -> -SoldInNewYork(x) & -ShippedFromNewHandon(x))", "all x.((Avocado(x) & -SoldInNewYork(x) & -ShippedFromColumbia(x)) -> (-SoldInNewYork(x) & -ShippedFromColumbia(x)))", "all x.((Avocado(x) & -SoldInNewYork(x) & -ShippedFromColumbia(x)) -> (-SoldInNewYork(x) | ShippedFromNewHandon(x)))", "all x.((Avocado(x) & -SoldInNewYork(x) & -ShippedFromColombus(x)) -> -SoldInNewYork(x) & -ShippedFromColombus(x)))", "all x.((Avocado(x) & -SoldInNewYork(x) & -SoldFromColumbia(x)) -> (-SoldInNewYork(x) & -SoldFromNewHanford(x)))", "all x.((Avocado(x) & -SoldInNewYork(x) & -ShippedFromColumbia(x)) -> (-SoldInNewYork(x) | -SoldInNewHaven(x)))", "all x.((Avocado(x) & -SoldInNewYork(x) & -ShippedFromColumbus(x)) -> -SoldInNewYork(x) & -ShippedFromNewHendon(x))", "all x.((Avocado(x) & -SoldInNewYork(x) & -ShippedFromColumbia(x)) -> -(SoldInNewYork(x) | ShippedFromNewHanaway(x)))", "all x.((Avocado(x) & -SoldInNewYork(x) & -ShippedFromColumbia(x)) -> -SoldInNewYork(x) & -SoldInNewHanaway(x))"]}
{"id": "folio_train_1360", "nl": "Some monitors equipped in the library are produced by AOC. ", "fol": "exists x.(EquippedInLibrary(x) & ProducedByAOC(x))", "prediction": ["exists x.(Monitor(x) & EquippedInLibrary(x))", "exists x.(Monitor(x) & EquippedInLibrary(x))", "exists x.(Monitor(x) & EquippedInLantern(x) & ProducedByAOC(x))", "exists x.(Monitor(x) & EquippedInLibrary(x) & DesignedByAOC(x))", "exists x.(Microphone(x) & EquippedInLibrary(x))", "exists x.(Monitor(x) & EquippedInLibrary(x))", "exists x y.(Monitor(x) & Library(y) & EquippedIn(x,y))", "exists x y.(Monitor(x) & WithAOC(x,y))", "exists x.(Monitor(x) & EquippedInLibrary(x) & ProducedByAOC(x))", "exists x.(Monitor(x) & EquippedInLibrary(x) & ProducedByAOC(x))", "exists x.(Monitor(x) & EquippedInLibrary(x))", "exists x y.(Monitor(x) & EmbeddedInLibrary(x) & AOC(y))", "exists x.(Monitor(x) & EquippedInLibrary(x))", "exists x.(Monitor(x) & EquippedInLibrary(x) & ProducedByAOC(x))", "exists x.(Monitor(x) & EquippedInBibliotheque(x))", "exists x.(Monitor(x) & EquippedInLibrary(x) & ProducedByAOC(x))"]}
{"id": "folio_train_1361", "nl": "All monitors equipped in the library are cheaper than 800 dollars. ", "fol": "all x.(EquippedInLibrary(x) -> CheaperThan800Dollars(x))", "prediction": ["all x.((Monitor(x) & EquippedInLibrary(x)) -> BlowerThan(x,800))", "all x.((Monitor(x) & EquippedInLibrary(x)) -> BetterThan(x,800))", "all x.((Monitor(x) & EquipedInLibrary(x)) -> LessThan800Dollars(x))", "all x.((Monitor(x) & EquippedInLibrary(x)) -> LowerThan(x,800))", "all x.((Monitor(x) & EquippedInLibrary(x)) -> CheaperThan(x,800))", "all x y.((Monitor(x) & Library(y) & EquippedIn(x,y)) -> CheaperThan(x,y))", "all x.(Laborator(x) -> (BelowBuy (800Dollars(x) | -700Dollars(x)))", "all x.((Monitor(x) & EquippedInLibrary(x)) -> LowerThan800Dollars(x))", "all x.((Monitor(x) & EquippedInLibrary(x)) -> CheaperThan(x,800))", "all x y.((Monitor(x) & Library(y)) -> (Budget(x,y) & BuryBelow(x,y)))", "all x.((Monitor(x) & EquippedInLibrary(x)) -> (Budgetless(x,800)))", "all x.((Monitor(x) & EquippedInLibrary(x)) -> CheaperThan(x,800))", "all x.((Monitor(x) & EquippedInLibrary(x)) -> BudgeterThan(x,800))", "all x.((Monitor(x) & EquippedInLibrary(x)) -> CheaperThan(x,800))", "all x.((Monitor(x) & EquippedInLibrary(x)) -> CheaperThan(x,800))", "all x.((Monitor(x) & EquippedInLibrary(x)) -> CheaperThan(x,800))"]}
{"id": "folio_train_1362", "nl": "All monitors cheaper than 800 dollars are with a resolution of 1080p. ", "fol": "all x.(CheaperThan800Dollars(x) -> HasResolution1080p(x))", "prediction": ["all x.((Monitor(x) & LowerThan(x,800)) -> Resolution(x,1080))", "all x.((Monitor(x) & LessThan800Dollars(x)) -> Resolution1080p(x))", "all x.((Monitor(x) & CheaperThan800Dollars(x)) -> ResolutionThan10880P(x))", "all x.((Monitor(x) & BoughtBy(x,800)) -> Resolution(x,1080))", "all x.(BudgetMonitor(x) -> (HasResolution(x,1008)))", "all x.((Monitor(x) & BoughtBetterThan800(x)) -> ResolutionsOf1080p(x))", "all x.(BudgetMonitor(x) -> (SalesBetterThan(x,800) & Resolution(x,1080)))", "all x.((Monitor(x) & CheaperThan(x,800)) -> HasResolution(x,1080))", "all x.((Monitor(x) & CheaperThan800Dollars(x)) -> Resolution(x,1080))", "all x.((Monitor(x) & CheaperThan(x,800)) -> ResolutionOf(x,1080))", "all x.((Monitor(x) & CheaperThan(x,800)) -> Resolution(x,1080))", "all x.((Monitor(x) & CheaperThan(x,800)) -> HasResolution(x,1080))", "all x.(Monitor(x) & (Budgets(x,800) -> ContainsResolution(x,1080)))", "all x.((Monitor(x) & CheaperThan(x,800)) -> Resolution(x,1080))", "all x.((Monitor(x) & CheaperThan800D$(x)) -> ResolutionSecondary(x,10))", "all x.((Monitor(x) & CheaperThan(x,800)) -> Resolution(x,1080))"]}
{"id": "folio_train_1363", "nl": "If a monitor has a resolution of 1080p, then it does not support the type-c port. ", "fol": "all x.(HasResolution1080p(x) -> -SupportsTypeCPort(x))", "prediction": ["all x.((Monitor(x) & ResolutionInHour(x,100)) -> -SupportsTypeCPort(x))", "all x.((Monitor(x) & Resolution(x,10)) -> -StudyCport(x))", "all x.((Monitor(x) & ResolutionOf1080p(x)) -> -PortTypeC(x))", "all x.((Monitor(x) & Resolution(x,1081)) -> -SupportsTypeCPort(x))", "all x.((Monitor(x) & Resolution(x,10)) -> -supportsTypeCPort(x))", "all x.((Monitor(x) & Resolution(x,1080)) -> -SupportsTypeCPort(x))", "all x.((Monitor(x) & Resolution(x,10)) -> -SupportsTypeCPort(x))", "all x.((Monitor(x) & ResolutionOf1080P(x)) -> -SupportsTypeCPort(x))", "all x.((Monitor(x) & Resolution(x,1080)) -> -SupportsTypeCPort(x))", "all x.((Monitor(x) & Resolution(x,10)) -> -TypeCPortSupport(x))", "all x.((Monitor(x) & (Resolution(x,10) | High(x,1080))) -> -SupportsTypeCPort(x))", "all x.((Monitor(x) & ResolutionThan(x,10)) -> -SupportsTypeCPort(x))", "all x.((Monitor(x) & ResolutionOf(x,10)) -> -SupportsCPort(x))", "all x.((Monitor(x) & Resolution(x,1002)) -> -SupportsTypeCPort(x))", "all x.((Monitor(x) & ResolutionC,1070-8)) -> -SupportsTypeCPort(x))", "all x.((Monitor(x) & ResolutionTxT10080p(x)) -> -SupportsTypeCPort(x))"]}
{"id": "folio_train_1364", "nl": "A-2017 supports the type-c port. ", "fol": "SupportsTypeCPort(A2017)", "prediction": ["all x.((A-2017(x) & TypeCPort(x)) -> Supports(x,y))", "All x.(A-2017(x) -> SupportsTypCPort(x))", "all x.((A-2017(x) & TypeCPort(x)) -> Supports(x))", "all x.((A-2017) & TypeCPort(x)) -> Supports(x,y))", "(SupportsTypeCPort(A-2017))", "all x.(A-2017(x) -> SupportsTypeCPort(x))", "supportesTypeCPort(A-2017)", "all x.(A-2017(x) -> SupportsTypeCPort(x))", "all x.(A-2017(x) -> SupportsPortTypeC(x))", "all x.((A-2017(x) & TypeCPort(x)) -> Supports(x))", "all x.(A-2017(x) -> SupportsTypeCPort(x))", "all x.(A-2017(x) -> SupportsTypeCPort(x))", "all x.(A-2017(x) -> SupportsTypeCPort(x))", "all x.((A-2017(x) & TypeC(x)) -> SupportsPort(x,y))", "all x.((A-2017(x) & Type-CPort(x)) -> Supported(x))", "all x.(A-2017(x) -> SupportsTypeCPort(x))"]}
{"id": "folio_train_1365", "nl": "A-2017 is produced by AOC.", "fol": "ProducedByAOC(A2017)", "prediction": ["A-2017 is produced by AOC.", "A-2017 is produced by AOC.", "A-2017 is producedbyAOC.", "A-2017 is produced by AOC.", "A-2017 is produced by AOC.", "A-2017 is produced by AOC.", "all x.(A-2017(x) -> ProducedByAOC(x))", "All x.(A-2017(x) -> ProducedByAOC(x))", "A-2017 is produced by AOC.", "all x.(A-2017(x) -> ProducedByAOC(x))", "A-2017 is produced by AOC.", "A-2017 is produced by AOC.", "A-2017 ProducedByAOC.", "A-2017 is produced by AOC.", "All x.(A-2017(x) -> ProducedByAOC(x))", "A-2017 is produced by AOC."]}
{"id": "folio_train_1366", "nl": "A-2017 is produced by AOC and equipped in the library.", "fol": "(ProducedByAOC(A2017) & EquippedInLibrary(A2017))", "prediction": ["all x.((ProducedByAOC(x) & EquippedInLibrary(x)) -> A-2017(x))", "all x.((A-2017(x) & ProducedByAOC(x) & EquippedInLibrary(x)) -> Designed(x))", "all x.((A-2017(x) & AOC(y)) -> (ProducedBy(x,y) & EquippedInLibrary(x,y)))", "all x.((A-2017) & AOC(x)) -> (ProducedBy(x,A) & EquippedInLibrary(x)))", "(ProducedByAOC(A-2017) & EquippedInLibrary(A-2017))", "all x y.((A-2017(x) & AOC(y)) -> (ProducedBy(x,y) & EquippedInLibrary(x)))", "all x.((A-2017) & ProducedByAOC(x) & EquippedInLibrary(x)) -> EquippedInLibrary(x))", "all x.((A-2017(x) & AOC(x)) -> (ProducedBy(x,A) & EquippedInLibrary(x)))", "all x y.((A-2017(x) & AOC(y)) -> (ProducedBy(x,y) & EquippedInLibrary(x,y)))", "all x.(A-2017(x) -> (ProducedByAOC(x) & EquippedInLibrary(x)))", "all x y.((ProducedBy(x,y) & AOC(x) & EquippedInLibrary(x,y)) -> A-2017(x))", "All x.(A-2017(x) -> (ProducedBy(x,AOC) & EquippedInLibrary(x)))", "all x y.((A-2017(x) & AOC(y)) -> (ProducedBy(x,y) & EquippedInLibrary(x,y)))", "A-2017 is produced by AOC and EquippedInLibrary.", "A-2017 (ProducedByAOC) & EquippedInLibrary(A-2017))", "all x y z.((A-2017(x) & AOC(y) & Library(z)) -> (ProducedBy(x,y) & EquippedIn(y,z)))"]}
{"id": "folio_train_1367", "nl": "If A-2017 is not with a resolution of 1080p or produced by AOC, then it is not equipped in the library.", "fol": "((-HasResolution1080p(A2017) | ProducedByAOC(A2017)) -> -EquippedInLibrary(A2017))", "prediction": ["all x.((A-2017(x) & -Resolution(x,1080)) | ProducedByAOC(x)) -> -ArmouredInLibrary(x))", "all x.(((A-2017(x) & -ResolutionTo1080pOrProducedByAOC(x)) -> -\u00c9quivalentInLibrary(x))", "all x((A-2017(x) & -Resolution1080p(x) & -ProducedByAOC(x)) -> -EquivalentInLibrary(x))", "all x.((A-2017(x) & -(100080pResolution(x) | ProducedByAOC(x))) -> -EquivalentInLibrary(x))", "all x.((A-2017(x) & (-ResolutionOf1080p(x) | ProducedByAOC(x))) -> -OfferedInLibrary(x))", "all x.(((A-2017) & -(TalentedInLibrary(x) | ProducedByAOC(x))) -> -EquivalentInLibrary(x))", "all x.((A-2017(x) & NoResolution(x,1000) & -Durable(x,AOC)) -> -EquivalentInLibrary(x))", "all x.((A-2017(x) & -(Resolution(x,10) | producedByAOC(x))) -> -EquipmentInLibrary(x))", "all x.((A-2017(x) & -(Resolution(x,1008) | ProducedBy(x,AOC))) -> -EquivalentInLibrary(x))", "all x y.((A-2017(x) & -Durable(x,y)) -> -EmpoweredInLibrary(x))", "all x.((A-2017(x) & -Radiation(x,1080)) -> -EquivalentInLibrary(x))", "all x.((A-2017(x) & -(Resolution(x,10) | ProducedBy(x,AOC))) -> -EquivalentInLibrary(x))", "all x.((A-2017(x) & -(Resolution1080p(x) | ProducedByAOC(x))) -> -HptItem(x))", "all x.((A-2017(x) & -Resolution(x,1080) & -ProducedByAOC(x)) -> -EntrustedInLibrary(x))", "all x.((A-2017(x) & -Resolution(x,1080) & ProducedByAOC(x)) -> -equippedInLibrary(x))", "all x.((A-2017(x) & -Resolution(x,1008)) | ProducedByAOC(x)) -> -EquippedInLibrary(x))"]}
{"id": "folio_train_1368", "nl": "S\u016bduva Marijampol\u0117 holds the Lithuanian Supercup.", "fol": "HoldsSupercup(Suduva,Thelithuaniansupercup)", "prediction": ["SduvaMarjampol (Holds(SduvaMariampol), LithuanianSupercup)", "(HoldsLithuanianSupercup(SduvaMarijampol)", "((SduvaMarmarijampol(SiduvaMarmarijampol) & Hold(SduvaMarmarijampol)) -> LithuanianSupercup(Secopolit))", "all x y.((SduvaMarijampol(x) & LithuanianSupercup(y)) -> Holds(x,y))", "-HoldsLituanianSupercup(SduvaMarijampol)", "(HoldsLituanianSupercup(SduvaMarjampol)", "SduvaMarijampol HoldsLithuanianSupercup.", "(HoldsLituanianSupercup(SduvaMarjampol)", "(Holds(SduvaMarjampol,Lithuania) & Supercup(Marijampol))", "SduvaMarjampol holdsLituanianSupercup(Brittany)", "Sduva Marijampol holdsLituanianSupercup.", "SduvaMarijampol HoldsLituanianSupercup(x)", "Sduva Marijampol holds LithuanianSupercup.", "all x.((SduvaMarimpol(x) & HoldsLethitianSupercup(x)) -> Holds(x,LS))", "SduvaMarijampol ownsNature(s) & LitaunianSupercup(s))", "(Holds(SeduvaMagjampol,Lituania) & LitauenSupercup(SduvaMariampol))"]}
{"id": "folio_train_1369", "nl": "S\u016bduva Marijampol\u0117 is a soccer team.", "fol": "IsSoccerTeam(Suduva)", "prediction": ["SduvaMarikampol (SoccerTeam)", "SduvaMarjampol is soccer team.", "SduvaMarijampol is soccer team.", "SduvaMarinjampol is a soccer team.", "all x.(SduvaMarijampol(x) -> SoccerTeam(x))", "SduvaMarijampol  -SoccerTeam(e) & RunsIn(x,e))", "(SduvaMarijampol,SoccerTeam)", "(SduvaMarijampol,SoccerTeam).", "all x.(SduvaMarijampol(x) -> SoccerTeam(x))", "SduvaMarijampol,SoccerTeam, Founded In1983.", "SduvaMarijampol is a SoccerTeam.", "SduvaMarijampol (SoccerTeam(SduvaMarijampol) & FoundedIn(Sduva(S))", "SduvaMarijampol (SoccerTeam)", "all x.(SduvaMarijampol(x) -> SoccerTeam(x))", "SduvaMarijampol(SoccerTeam)", "SduvaMarijampol soccer team."]}
{"id": "folio_train_1370", "nl": "Some soccer team holds the Lithuanian Supercup.", "fol": "exists x.(IsSoccerTeam(x) & HoldsSupercup(x,Thelithuaniansupercup))", "prediction": ["exists x.(South AmericanTeam(x) & HoldsLituanianSupercup(x))", "exists x.(SoccerTeam(x) & HoldsLituanianSupercup(x))", "exists x.(SoccerTeam(x) & HoldsLituanianSupercup(x))", "exists x.(Soccer(x) & HoldsLituanianSupercup(x))", "exists x.(SoccerTeam(x) & HoldsLituanianSupercup(x))", "exists x.(SoccerTeam(x) & HoldsLituanianSupercup(x))", "exists x.(SoccerTeam(x) & HoldsLatvianSupercup(x))", "exists x.(SoccerTeam(x) & HoldsLituanianSupercup(x))", "exists x.(SoccerTeam(x) & HoldsLithuaniaNightcup(x))", "exists x.(SoccerTeam(x) & HoldsLithuanianSupercup(x))", "exists x.(SoccerTeam(x) & HoldsLithuanianSupercup(x))", "exists x.(SoccerTeam(x) & HoldsLituanianSupercup(x))", "exists x.(SoccerTeam(x) & HoldsLituanianSupercup(x))", "exists x.(SoccerTeam(x) & HoldsLithuaniaNarrative(x))", "exists x y.((SoccerTeam(x) & LithuanianSupercup(y)) -> Holds(x,y))", "exists x.(SoccerTeam(x) & HoldsLithuanianSupercup(x))"]}
{"id": "folio_train_1371", "nl": "Ainderby Quernhow is a village and civil parish in the Hambleton District.", "fol": "(IsVillage(AinderbyQuernhow) & IsCivilParish(AinderbyQuernhow) & IsInHambletonDistrict(AinderbyQuernhow))", "prediction": ["all x.((District(x) & AinderbyQuernhow(x)) -> (IsDestination(x) & IsCalculateParish(x) & InHambletonDistant(x)))", "all x.(AinderbyQuernhow(x) -> (Dorf(x) & Parish(x) & HambletonDistrict(x)))", "all x.(IndelbyQuernhow(x) -> (Dormant(x) & CivilParish(x) & HambletonDistrict(x)))", "all x.(AinderbyQuernhow(x) -> (Dorm(x) & CivilParish(x) & HambletonDistrict(x)))", "AinderbyQuernhow (Dorm(a) & Parish(a) & InHambletonDistrict(b))", "all x.((Dormant(x) & CivilPast(x)) -> AinderbyQuernhow(x))", "AinderbyQuernhow (dorship and civil parish in HambletonDistrict)", "all x.((Dorm(x) & Parish(x) & HambletonDistrict(x)) -> AinderbyQuernhow(x))", "all x.((Dormant(x) & CivilParty(x) & HambletonDistrict(x)) -> AinderbyQuernhow(x))", "all x.((Dorf(x) & Parish(x) & HambletonDistrict(x)) -> AinderbyQuernhow(x))", "all x.(AinderbyQuernhow(x) -> (Dork(x) & CivilParish(x) & HambletonDistrict(x)))", "all x.((AinderbyQuernhow(x) & Village(x) & CivilParish(x) & HambletonDistrict(x)) -> Quernhow(x))", "all x.(AinderbyQuernhow(x) -> (Dorm(x) & CivilParish(x) & HambletonDistrict(x)))", "all x.(AinderbyQuernhow(x) -> (District(x) & Parish(x) & InHambletonDistrict(x)))", "all x.(AinderbyQuernhow(x) -> (IsVillage(x) & IsCivilParish(x) & HambletonDistrict(x)))", "all x.((Diary(x) & Village(x)) -> CivilPassage(x))"]}
{"id": "folio_train_1372", "nl": "Hambleton District is in North Yorkshire.", "fol": "all x.(IsInHambletonDistrict(x) -> IsInNorthYorkshire(x))", "prediction": ["(NorthYorkshire(hambleton)", "HambletonDistrict(h)", "HambletonDistrictInNorthYorkshire(Hambleton)", "(NorthYorkshire)", "(NorthYorkshire(HambletonDisturbance)", "(NorthYorkshire(HambletonDistrict) & East Yorkshire(HambletonDistrict))", "is NorthYorkshireShabbletonDistrict(Hambleton)", "(NorthYorkshire) & HambletonDistrict(y)", "HambletonDestination(Hambleton,NorthYorkshire)", "all x y.((HabbletonDistrict(x) & NorthYorkshire(y)) -> -HabbletonDistrict(x,y))", "is InNorthYorkshire(HambletonDistrict)", "(NorthYorkshire(HambletonDestination) & InNorthYorkshire(HambletonDestination,NorthYorkshire)", "NorthYorkshire (LandLine, NorthYorkshire)", "(North Yorkshire) & HambletonDestination(hambleton)", "Hambleton District is in NorthYorkshire.", "SouthRichards(HambletonDistrict)"]}
{"id": "folio_train_1373", "nl": "North Yorkshire is in England.", "fol": "all x.(IsInNorthYorkshire(x) -> IsInEngland(x))", "prediction": ["all x.(NorthYorkshire(x) -> InEngland(x))", "all x.(NorthYorkshire(x) -> InEngland(x))", "North Yorkshire is in England.", "NorthYorkshire(North) -> InEngland(North))", "All x.(NorthYorkshire(x) -> InEngland(x))", "all x.(NorthYorkshire(x) -> England(x))", "all x.(NorthYorkshire(x) -> InEngland(x))", "NorthYorkshire(Nov.1) & England(Nov.4).", "North Yorkshire is in England.", "all x.(NorthYorkshire(x) -> InEngland(x))", "all x.(NorthYorkshire(x) -> England(x))", "NorthYorkshire(North Yorkshire) & England(NorthYorkshire))", "all x.(NorthYorkshire(x) -> InEngland(x))", "all x.(NorthYorkshire(x) -> (InEdinburgh(x) & NorthYorkshire(y)))", "all x.(NorthYorkshire(x) -> InEngland(x))", "all x.(NorthYorkshire(x) -> InEngland(x))"]}
{"id": "folio_train_1374", "nl": "There is a village in England.", "fol": "exists x.(IsVillage(x) & IsInEngland(x))", "prediction": ["exists x.(Dorf(x) & InEngland(x))", "exists x.(Dormant(x) -> InEdinburgh(x))", "exists x.(Dorf(x) & In(x,England))", "exists x.(Dorm(x) & InEdinburgh(x))", "exists x y.((Dorm(x) & England(y))", "exists x.(Dorm(x) & InEngland(x))", "exists x.(Dorm(x) & InEngland(x))", "exists x.(Landship(x) & InEngland(x))", "exists x.(Dominion(x) & InEngland(x))", "exists x.(Dorm(x) & InEngland(x))", "exists x.(Dorf(x) & InEngland(x))", "exists x.(Village(x) & InEdinburgh(x))", "exists x.(Dorf(x) & InEngland(x))", "exists x.(Dorf(x) & In(x,England))", "exist x.(Dorf(x) & InEngland(x))", "exists x.(Dovie(x) & InEngland(x))"]}
{"id": "folio_train_1375", "nl": "There is no civil parish in England.", "fol": "-exists x.(IsCivilParish(x) & IsInEngland(x))", "prediction": ["exists x.(CivilParish(x) & -InEngland(x))", "-exists x.(CivilParish(x) & InEngland(x))", "-exists x.(Church(x) & Civil(x) & LocatedIn(x,England))", "exists x.(civilParish(x) & -(EducatedInEngland(x) & -EducatedInEngland(x)))", "-exists x.(CalibanParish(x) & England(x))", "-exists x.(Parish(x) & Civil(x))", ",exists x.(Campaign(x) & InBritain(x))", "exists x.(CatholicParish(x) & -Public(x))", "-exists x.(Parish(x) & InEngland(x))", "no civil parish in England.", "exist x.(CivilParish(x) & InEngland(x))", "-exists x.(CivilParish(x) & LocatedIn(x,England))", "-exists x.(CivilParish(x) & InEngland(x))", "(-exists x.(Parish(x) & NotCivil(x)))", "-(CaritanParish(x) & England(x))", "-exists x.(CivilParish(x) & InEngland(x))"]}
{"id": "folio_train_1376", "nl": "Douglas Adams is an author who created the book collection called The Salmon of Doubt. ", "fol": "(IsAuthor(DouglasAdams) & IsBook(TheSalmonOfDoubt))", "prediction": ["Douglas Adams is an author who created the book collection called The SalmonOfDoubt.", "Douglas Adams (Author(x) & CreatedBookCollectionSalmonAndDoubt(x))", "Douglas Adams created a book collection dubbed SalmonOf Doubt(d) & Author(d))", "Douglas Adams (author(author) & CreatesBookCollection(author,SalmonOf Doubt))", "Douglas Adams (Author(en) & SalmonOfDoubt(en))", "Douglas Adams is author and creator of TheSalmonOfDoubt(x) -> Author(x))", "Douglas Adams is author and created book collection \"SalmonOfDoubt\"(author,doctor,etc.)", "Douglas Adams(Author) & CreatedBookCollection(Author) & SalmonOfDoubt(Author))", "Douglas Adams (author) & CreatedBookCollection(dash(doubs))", "Douglas Adams is Author(Ashley(Answer,CreatedBookCollection) & TheSalmonOfDoubt(Ashley(Ashley,CreatedBookCollection))", "all x y z.((DouglasAdams(x) & BookCollection(y) & SalmonOfDoubt(z)) -> Author(x))", "(author(DouglasAdams) & CreatedBookCollection(DoubleSalmon))", "Douglas Adams is the creator of a BookCollection titled The SalmonOfDoubt(2008) & Author(a) & Author(b) & Author(c) & Founder(a))", "Douglas Adams is Author(author,Collection) & CreatedSalmonOfDumbts(author,BookCollection))", "Douglas Adams is an author who created the book collection called The SalmonOfDoubt(in-print)", "Douglas Adams (author/author) & (CreatedSausageOfDoubt(x) | CreatedSausageOfDoubt(x)))"]}
{"id": "folio_train_1377", "nl": "The Salmon of Doubt is about life experiences and technology.", "fol": "(IsAboutLifeExperience(TheSalmonOfDoubt) & IsAboutTechnology(TheSalmonOfDoubt))", "prediction": ["all x.(SalmonOfDoubt(x) -> AboutLifeExperiencesAndTechnology(x))", "(SalmonOfDoubt(Salmon,Sauce) & AboutLifeExperiencesAndTechnology(Salmon,Sauce))", "The SalmonOfDoubt(SalmonOfDoubt) : (LifeExperiences(s) & Technology(x)))", "-DumbBlog(SalmonOfDoubt) -> (LifeExperiences(Salmon) & Technology(Salmon)))", "All x.(SalmonOfDoubt(x) -> (LifeExperiences(x) & Technology(x)))", "all x.(SalmonOfDumbbit(x) -> (LifeExperiences(x) & Technology(x)))", "The SalmonOfDoubt.com ((LifeExperiences(x) & Technology(x)))", "All x.(SalmonOfDoubt(x) -> (LifeExperiences(x) & Technology(x)))", "All x.(SalmonOfDoubt(x) -> (LivingExperiences(x) & Technology(x)))", "EverydayLifeExpectsAndTechnology(SalmonOfDubit)", "(SalmonOfDubit(Salmon,lifeExperiences) & Technology(Salmon,technology))", "The SalmonOfDumbness(Salmon) \u2013 (LifeExperiences(Salt) & Technology(Salt)))", "\u2013SalmonOfDoubt(s) -> (LifeExpectations(s) & Technology(s)))", "All x.(SalmonOfDubit(x) -> (LifeExperiences(x) & Technology(x)))", "The SalmonOfDoubt(SaintWord(SaintWord) \u2013-LifeExperiencesAndTechnology(SaintWord))", "All x.(SalmonOfDoubt(x) -> (LivingExperiences(x) & Technology(x)))"]}
{"id": "folio_train_1378", "nl": "All authors are writers.", "fol": "all x.(IsAuthor(x) -> IsWriter(x))", "prediction": ["all x.(Author(x) -> Writer(x))", "all x.(Author(x) -> Writer(x))", "all x.(Author(x) -> Writer(x))", "all x.(Author(x) -> Writer(x))", "all x.(Author(x) -> Writer(x))", "all x y.((Author(x) & Author(y)) -> Writer(x))", "all x.(Author(x) -> Writer(x))", "all x.(Author(x) -> Writer(x))", "all x.(Author(x) -> Writer(x))", "all x.(Author(x) -> Writer(x))", "all x.(Author(x) -> Writer(x))", "all x.(Author(x) -> Writer(x))", "all x.(Author(x) -> Writer(x))", "all x.(Author(x) -> Writer(x))", "all x.(Author(x) -> Writer(x))", "all x.(Author(x) -> Writer(x))"]}
{"id": "folio_train_1379", "nl": "Writers create innovative ideas.", "fol": "all x.(IsWriter(x) -> CreatesInnovativeIdea(x))", "prediction": ["all x y z.((Writer(x) & Idea(y) & Innovative(z)) -> Create(x,y,z))", "all x.(Writer(x) -> CreatesInnovativeIdeas(x))", "all x y.((Writer(x) & InnovativeIdea(y)) -> Creates(x,y))", "all x.(Writer(x) -> CreatesInnovativeIdeas(x))", "all x.(Writer(x) -> CreateInnovativeIdeas(x))", "all x y.((Writer(x) & InnovativeIdeas(y)) -> Creates(x,y))", "all x y z.((Writer(x) & Idea(y) & Idea(z)) -> Creates(x,y,z))", "all x y.((Writer(x) & InnovativeIdea(y)) -> Creates(x,y))", "all x y.((Writer(x) & Ideas(y)) -> Creates(x,y))", "all x y.((Writter(x) & Idea(y)) -> Creates(x,y))", "all x.(Writer(x) -> CreatesInnovativeIdeas(x))", "all x y.((Writer(x) & InnovativeIdea(y)) -> Creates(x,y))", "all x y z.((Writer(x) & Innovation(y) & ((Idea(z) | Idea(z)))) -> Creates(x,y)))", "all x y z w.((Writer(x) & Idea(y) & Idea(z)) -> Create(x,y,z))", "all x y.((Writer(x) & Idea(y)) -> Creates(x,y))", "all x.(Writer(x) -> CreatesInnovativeIdeas(x))"]}
{"id": "folio_train_1380", "nl": "Some books that contain innovative ideas are about technology.", "fol": "exists x.(ContainsInnovativeIdea(x) & IsAboutTechnology(x))", "prediction": ["exists x.(Book(x) & ContainsInnovativeIdeas(x)) -> AboutTechnology(x))", "exists x.(Book(x) & InnovativeIdeas(x) & AboutTechnology(x))", "exists x.(Book(x) & ContainsInnovativeIdeas(x))", "exists x.(Book(x) & InventiveIdeas(x) & AboutTechnology(x))", "exists x.(Book(x) & InnovativeIdeas(x) & Contains(x,Technology))", "exists x.(Book(x) & InnovativeIdeas(x) & AboutTechnology(x))", "exists x.(Book(x) & ContainsInnovativeIdeas(x))", "exists x.(Book(x) & InnovativeIdeas(x) & AboutTechnology(x))", "exists x.(Book(x) & ContainsInnovativeIdeas(x))", "exists x.(Book(x) & InnovativeInsights(x) & Technology(x))", "exists x.(Book(x) & ContainsInnovativeIdeas(x))", "exists x.(Book(x) & InnovativeIdeas(x) & AboutTechnology(x))", "exists x.(Book(x) & ContainsInnovativeIdeas(x) & Technology(x))", "exists x.(Book(x) & InnovativeIdeas(x) & AboutTechnologie(x))", "exists x.(Book(x) & InnovativeIdeas(x) & Technology(x))", "exists x.(Book(x) & InnovativeIdeas(x) & AboutTechnology(x))"]}
{"id": "folio_train_1381", "nl": "Douglas Adams is a writer.", "fol": "IsWriter(DouglasAdams)", "prediction": ["(Wordner(DouglasAdams) & Writer(DowsonAdams))", "(Writer(DouglasAdams) & Writer(DouglasAdams))", "all x.(DouglasAdams(x) -> Writer(x))", "Douglas Adams is a Writer.", "all x.(DouglasAdams(x) -> Writer(x))", "(Writer(DouglasAdams) -> Writer(DouglasAdams))", "Douglas Adams is a writer.", "(Writer(DawsonAdams) & Writer(Adams))", "Douglas Adams is a writer.", "all x.(DouglasAdams(x) -> Writer(x))", "Douglas Adams is a Writer.", "(Writer(DouglasAdams) & Writer(Adams))", "Adams-Douglas(Adams) is writer(Adams)", "all x.(DouglasAdams(x) -> Writer(x))", "Douglas Adams exists x.(Writer(x) & Writer(x))", "Douglas Adams is Writer."]}
{"id": "folio_train_1382", "nl": "Douglas Adams created innovative ideas.", "fol": "CreatesInnovativeIdea(DouglasAdams)", "prediction": ["all x y.((DouglasAdams(x) & InnovativeIdeas(y)) -> Created(x,y))", "Douglas Adams creatsinnovativeIdeas(Douglas)", "all x.(DouglasAdams(x) -> CreatedInnovativeIdeas(x))", "Douglas Adams created innovative ideas.", "exists x.(DouglasAdams(x) & CreatedInnovativeIdeas(x))", "All x.(DouglasAdams(x) -> CreatedInnovativeIdeas(x))", "the creators of innovativeideas.", "Douglas Adams created innovative ideas.", "all x.(DouglasAdams(x) -> CreatedInnovativeIdeas(x))", "all x.(DouglasAdams(x) -> CreatedInnovativeIdeas(x))", "all x.(DouglasAdams(x) -> CreatedInnovativeIdeas(x))", "((DouglasAdams(Douglas) & InnovativeIdeas(Douglas)))", "all x.(DouglasAdams(x) -> (CreatedInnovativeIdeas(x) & CreatedIdeas(x)))", "Douglas Adams created innovative ideas.", "Douglas Adams created innovativeideas.", "Douglas Adams (Dallas) createdInnovativeIdeas(Dallas))"]}
{"id": "folio_train_1383", "nl": "The Salmon of Doubt has no innovative Ideas.", "fol": "-exists y.ContainsInnovativeIdea(TheSalmonOfDoubt)", "prediction": ["All x.(SalmonOfDubit(x) -> NoInnovativeIdeas(x))", "-InnovativeIdeasForSalmonOfDubibt(SalmonOfDoubt)", "(SalineOfDumbbit(SalmonOfDumbest) -> -InnovativeIdeas(SalmonOfDumbest))", "all x.(SalmonOfDoubt(x) -> -InnovativeIdeas(x))", "The SalmonOfDoubt.com - InnovativeIdeas(sp)", "L\u2019InnovativeIdeas(SalmonOfDubit(Salmon))", "The SalmonOfDubit(Salmon(Salmon) & -InnovativeIdeas(Salmon))", "all x.(SalmonOfDoubt(x) -> -InnovativeIdeas(x))", "The SalmonOfDoubt(s) -InnovativeIdeas(s))", "-InnovativeIdeas(SalmonOfDoubt)", "The SalmonOfDoubt hasNoInnovativeIdeas(Salmon,Dubimt)", "Der SalmonOfDoubt-MustHasNoInnovativeIdeas.", "(SalmonOfDoubt(Salmon(Salmon) & -InnovativeIdeas(Salmon))", "(NoneInnovativeIndividuals(SalmonOfDoubt)", "(NoNewInnovativeIdeas(SalmonOfDoubt))", "\"SoilSalmonOfDubit(s) -InnovativeIdeas(s))"]}
{"id": "folio_train_1384", "nl": "No disposable products can help slow down global warming. ", "fol": "all x.(IsDisposableProduct(x) -> -CanHelpSlowDownGlobalWarming(x))", "prediction": ["-exists x.(DisposableProduct(x) & SlowsGlobalWarming(x))", "-exists x.(DisposableProduct(x) & SlowsGlobalWarming(x))", "-exists x.(DisposableProduct(x) & SlowsGlobalWarming(x))", "-exists x.(DisposableProduct(x) & SlowsGlobalWarming(x))", "-exists x.(DisposableProduct(x) & SlowsGlobalWarming(x))", "-exists x.(DisposableProduct(x) & SlowsGlobalWarming(x))", "-exists x.(DisposableProduct(x) & SlowsGlobalWarming(x))", "-exists x.(DisposableProduct(x) & SlowGlobalWarming(x))", "-exists x.(Despatch(x) & SlowGlobalWarming(x))", "-exists x.(DisposableProduct(x) & SlowsGlobalWarming(x))", "-exists x.(DisposableProduct(x) & SlowsGlobalWarming(x))", "-exists x.(DesirableProduct(x) & SlowsGlobalWarming(x))", "-exists x.(DesipableProduct(x) & SlowGlobalWarming(x))", "-exists x.(DevelopableProduct(x) & SlowGlobalWarming(x))", "-exists x.(DisposableProduct(x) & SlowsGlobalWarming(x))", "-exists x.(DisposableProduct(x) & SlowsGlobalWarming(x))"]}
{"id": "folio_train_1385", "nl": "All eco-friendly brands can help slow down global warming. ", "fol": "all x.(IsEcoFriendlyBrand(x) -> CanHelpSlowDownGlobalWarming(x))", "prediction": ["all x.(EcoFriendlyBrand(x) -> SlowGlobalWarming(x))", "all x.(EcoFriendly(x) -> SlowsGlobalWarming(x))", "all x.((GreenBanana(x) & SlowGlobalWarming(x)) -> CanSlowGlobalWarming(x))", "all x.(EcoFriendlyBrand(x) -> SlowGlobalWarming(x))", "all x.((EcoFriendlyBrand(x) & SupportsGlobalWarming(x)) -> SlowsDown(x))", "all x.(EcoFriendly(x) -> SlowsGlobalWarming(x))", "all x.(EcoFriendly(x) -> SlowsGlobalWarming(x))", "all x.((EcoFriendly(x) & GreenField(x)) -> SlowsGlobalWarming(x))", "all x.((EcoFriendly(x) & EcoFriendly(x)) -> SlowGlobalWarming(x))", "all x.(EcoFriendly(x) -> SlowsGlobalWarming(x))", "all x.(EcoFriendly(x) -> SlowsGlobalWarming(x))", "all x.((BiofriendlyBrand(x) & SlowGlobalWarming(x)) -> CanHelpSave(x,GlobalWarming))", "all x.(EcoFriendlyBrand(x) -> SlowGlobalWarming(x))", "all x.(EcoFriendlyBrand(x) -> SlowWinter(x))", "all x.((EcoFriendlyBrand(x) & SlowGlobalWarming(x)) -> HelpsSlowGlobalWarming(x))", "all x.(CelticFriendlyBand(x) -> SlowsGlobalWarming(x))"]}
{"id": "folio_train_1386", "nl": "All sustainable fashion brands are eco-friendly brands.", "fol": "all x.(IsSustainableFashionBrand(x) -> IsEcoFriendlyBrand(x))", "prediction": ["all x.(SustainableFashionBrand(x) -> EcoFriendlyBrand(x))", "all x.(SustainableFashionBrand(x) -> EcoFriendlyBrand(x))", "all x.(SustainableFashionBrand(x) -> EcoFriendlyBrand(x))", "all x.((SustainableFashion(x) & EcoFriendly(x)) -> SustainableFashion(x))", "all x.((SustainableFashionBrand(x) & EcoFriendly(x)) -> SustainableFashionBrand(x))", "all x.((FashionBrand(x) & Sustainable(x)) -> EcoFriendly(x))", "all x.((SustainableFashionBrand(x) & EcoFriendly(x)) -> (EnvironmentallyFriendly(x) | EnvironmentallyFriendly(x)))", "all x.((SustainableFashionBrand(x) & EcoFriendlyBrand(x)) -> SustainableFashionBrand(x))", "all x.((SustainableFashionBrand(x) & EcoFriendlyBrand(x)) -> Sustainable(x))", "all x.((Buys(x) & Sustainable(x)) -> EcoFriendly(x))", "all x.((SustainableFashionBrand(x) & EcoFriendly(x)) -> SustainableBrand(x))", "all x.((SustainableFashionBrand(x) & EcoFriendly(x)) -> SustainableFashionBrand(x))", "all x.((SustainableFashionBrand(x) & EcoFriendly(x)) -> EcoFriendly(x))", "all x.((SustainableFashion(x) & EcoFriendly(x)) -> SustainabilityFinding(x))", "all x.(SustainableFashionBrand(x) -> EcoFriendly(x))", "all x.(SustainableFashionBrand(x) -> EcoFriendlyBrand(x))"]}
{"id": "folio_train_1387", "nl": "All fast fashion products are disposable products.", "fol": "all x.(IsFastFashionProduct(x) -> IsDisposableProduct(x))", "prediction": ["all x.(FastFashionProduct(x) -> Disposable(x))", "all x.(FastFashionProduct(x) -> Disposable(x))", "all x.(FastFashionProduct(x) -> DisposableProduct(x))", "all x.(FastFlowerProduct(x) -> Disposable(x))", "all x.(FastFashionProduct(x) -> Disposable(x))", "all x.(FastFashion(x) -> DisposableProduct(x))", "all x.(FastFashionProduct(x) -> Disposable(x))", "all x.(FastFashionProduct(x) -> Disposable(x))", "all x.(FastFashionProduct(x) -> Disposable(x))", "all x.(FastFashionProduct(x) -> DisposableProduct(x))", "all x.(FastFashionProduct(x) -> DisposableProduct(x))", "all x.(FastFashionProduct(x) -> Disposable(x))", "all x.(FastFashionProduct(x) -> Disposable(x))", "all x.((FastFashion(x) & Disposable(x)) -> FastFit(x))", "all x.(FastFashionProduct(x) -> Disposable(x))", "all x.(QuickFashionProduct(x) -> Disposable(x))"]}
{"id": "folio_train_1388", "nl": "If Reformation is not helping slow down global warming, then Reformation is an eco-friendly brand or a sustainable fashion brand.", "fol": "((-CanHelpSlowDownGlobalWarming(Reformation) -> IsEcoFriendlyBrand(Reformation)) | IsSustainableFashionBrand(Reformation))", "prediction": ["all x.((NoGlobalWarming(x) & Reformation(x)) -> (EcoFriendlyBrand(x) | SustainableFashionBrand(x)))", "all x.((Reformation(x) & -SlowsGlobalWarming(x)) -> (EcoFriendlyBand(x) | SustainableFashionBand(x)))", "all x.((Reformation(x) & -SlowGlobalWarming(x)) -> (EcoFriendlyBrand(x) | SustainableFashionBrand(x)))", "all x.((Reformation(x) & -SlowsGlobalWarming(x)) -> (EcoFriendly(x) | SustainableFashion(x)))", "all x.((Reformative(x) & -SlowsGlobalWarming(x)) -> (EcoFriendlyBrand(x) | SustainableFashionBrand(x)))", "all x.((Reformation(x) & -SlowGlobalWarming(x)) -> (EcoFriendly(x) | SustainableFashion(x)))", "all x.((Reformation(x) & -SlowingGlobalWarming(x)) -> (EcoFriendlyBrand(x) | SustainableFashionBrand(x)))", "all x.((Reformation(x) & SlowsGlobalWarming(x)) -> (EcoFriendlyBand(x) | SustainableFashionBand(x)))", "all x.((Reformation(x) & -SlowGlobalWarming(x)) -> (EcoFriendlyBrand(x) | SustainableFashionBrand(x)))", "all x.((Reformation(x) & -SlowsGlobalWarming(x)) -> (EcoFriendlyBrand(x) | SustainableFashionBrand(x)))", "all x.((Reformation(x) & -SlowsGlobalWarming(x)) -> (EcoFriendlyBrand(x) | SustainableFashionBrand(x)))", "all x.((Reformation(x) & -SlowingGlobalWarming(x)) -> (EcoFriendlyBrand(x) | SustainableFashionBrand(x)))", "all x.((Reformation(x) & -SlowsGlobalWarming(x)) -> (EcoFriendlyBrand(x) | SustainableFashionBrand(x)))", "all x.((Reformation(x) & -SlowsGlobalWarming(x)) -> (EcoFriendlyBrand(x) | SustainableFashionBrand(x)))", "all x.((Reformation(x) & SlowsGlobalWarming(x)) -> (EcoFriendlyBrand(x) | SustainableFashionBrand(x)))", "all x.((Reformation(x) & -SlowsGlobalWarming(x)) -> (EcoFriendlyBrand(x) | SustainableFashionBrand(x)))"]}
{"id": "folio_train_1389", "nl": "Reformation is an eco-friendly brand.", "fol": "IsEcoFriendlyBrand(Reformation)", "prediction": ["(EcoFriendlyBrand(Reformation) & EcoFriendlyBrand(Reformation))", "Reformation is ecoFriendly(x)", "Reformation is eco-friendly brand.", "EcoFriendlyBrand(Reformation)", "All x.(Reformation(x) -> EcoFriendly(x))", "Reformation is eco-friendly brand.", "(Reformation(Reformation) & EcoFriendly(Reformation))", "All x.(Reformation(x) -> EcoFriendly(x))", "Reformation is ecofriendly brand.", "all x.(Reformation(x) -> EcoFriendlyBrand(x))", "all x.(Reformation(x) -> EcoFriendlyBrand(x))", "All x.(Reformation(x) -> EcoFriendlyBrand(x))", "all x.(Reformation(x) -> EcoFriendlyBrand(x))", "all x.(Reformation(x) -> EcoFriendlyBrand(x))", "all x.(Reformation(x) -> EcoFriendlyBrand(x))", "All x.(Reformation(x) -> EcoFriendly(x))"]}
{"id": "folio_train_1390", "nl": "Reformation produces fast fashion products.", "fol": "IsFastFashionProduct(Reformation)", "prediction": ["reformation produces fastfashionProducts(Reformation)", "All x.(Reformation(x) -> ProducesFastFashionProducts(x))", "all x.(Reformation(x) -> ProducesFastFashion(x))", "(ProducesFastFashion(Reformation) -> Produces(Reformation))", "all x.(Reformation(x) -> ProducesFastFashionProducts(x))", "all x y z.((Reformation(x) & Product(y) & FashionProduct(z)) -> Produces(x,y,z))", "all x y z.((Reformation(x) & FastFashionProduct(y) & Form(z)) -> Produces(x,y,z))", "all x y.((Reformation(x) & FastFashion(y)) -> Produces(x,y))", "All x y.((Reformation(x) & FastFashion(y)) -> Produces(x,y))", "all x y.((Reformation(x) & FastFashion(y)) -> Produces(x,y))", "All x.(Reformation(x) -> ProducesFastFashionProducts(x))", "all x y.((Reformation(x) & FastFashion(y)) -> Produces(x,y))", "(ProducesFastFashion(Reformation) & FastFashionProducts(Reformation))", "Reformation produces FastFashionProducts(Reformation)", "all x.(Reformation(x) -> ProducesFastFashionProducts(x))", "all x.(Reformation(x) -> ProducesFastFashionProducts(x))"]}
{"id": "folio_train_1391", "nl": "Reformation does not produce fast fashion products.", "fol": "-IsFastFashionProduct(Reformation)", "prediction": ["all x.(Reformation(x) -> -producesFastFashionProducts(x))", "(-ProducesFastFashionProducts(Reformation))", "also -ProducesFastFashionProducts(Reformation)", "all x.(Reformation(x) -> -ProduceFastFashionProducts(x))", "All x.(Reformation(x) -> -ProducesFastFashionProducts(x))", "all x.(Reformation(x) -> -ProducesFastFashionProducts(x))", "all x y.((Reformation(x) & FastFashion(y)) -> -Produce(x,y))", "all x y.((Reformation(x) & Product(y)) -> -ProducesFastFashion(x,y))", "-FastFashionProducts(reformation)", "-FastFashionProducts(Reformation)", "all x.(Reformation(x) -> -ProducesFastFashionProducts(x))", "-FastFashionProducts(reformation)", "-FastFashionProducts(reformation)", "(-ProducesFastFashionProducts(Reformation))", "Reformation does not produce FastFashionProducts(Reformation)", "(FastFashion(reformation) -Produces(reformation,feat.)"]}
{"id": "folio_train_1392", "nl": "Reformation does not produce fast fashion products or does not produce disposable products.", "fol": "(-IsFastFashionProduct(Reformation) | -IsDisposableProduct(Reformation))", "prediction": ["all x.(Reformation(x) -> (-exists y.(Fast(y) & Produces(x,y))) | exists z.(Disposable(z) | Produces(x,z))))))", "all x.(Reformation(x) -> (-ProducesFastFashionProducts(x) | -ProducesDisposableProducts(x)))", "all x.(Reformation(x) -> (-ProducesFastFashion(x) | -ProducesDisposable(x)))", "all x.(Reformation(x) -> (-ProducesFastFashionProducts(x) | -ProducesDisposableProducts(x)))", "all x.(Reformation(x) -> (-ProducesFastFashionProducts(x) | -ProducesDisposableProducts(x)))", "all x y.((Download(x) & Reformation(y)) -> (-ProducesFastFashionProducts(y) | -ProducesDependentProducts(y)))", "all x.(Reformation(x) -> (-ProducesFastFashionProducts(x) | -ProducesDisposableProducts(x)))", "all x.(Reformation(x) -> ((-FastFashion(x) | -DisposableProducts(x))))", "all x.(Reformation(x) -> (-ProducesFastFashionProducts(x) | -ProducesDisposableProducts(x)))", "all x y.((Reformation(x) & (FastFashionProduct(y) | DisposableProduct(y))) -> -Produces(x,y))", "all x.(Reformation(x) -> (-ProducesFastFashionProducts(x) | -ProducesDisposableProducts(x)))", "all x.(Reformation(x) -> (-ProducesFastFashionProducts(x) | -ProducesDisposableProducts(x)))", "(-ProducesFastFashionProducts(Reformation) | -ProducesDisposableProducts(Reformation)))", "(-ProducesFastFashionProducts(reformation) | -ProducesDisposableProducts(reformation)))", "(-ProducesFastFashionProducts(reformation) & -ProducesDisposableProducts(reformation))", "(-(FastFashionProduct(f) | DisposableProduct(f))) -> Reformation(f))"]}
{"id": "folio_train_1393", "nl": "If Reformation produces disposable products, then Reformation produces fast fashion products.", "fol": "(IsDisposableProduct(Reformation) -> IsFastFashionProduct(Reformation))", "prediction": ["all x.(Reformation(x) -> (ProducesDisposableProducts(x) | ProducesFastFashionProducts(x)))", "all x.(Reformation(x) -> (ProducesDisposableProducts(x) & ProducesFastFashionProducts(x)))", "all x.((Reformation(x) & ProducesDisposableProducts(x)) -> ProducesFastFashionProducts(x))", "all x.((Region(x) & ProducesDisposibleProducts(x)) -> ProducesFastFashionProducts(x))", "all x.((Reformation(x) & ProducesDisposableProducts(x)) -> ProducesFastFashionProducts(x))", "all x.((Reformation(x) & ProducesDisposableProducts(x)) -> ProducesFastFashionProducts(x))", "all x.((Reformation(x) & ProducesDisposableProducts(x)) -> ProducesFastFashionProducts(x))", "all x.((ReformationProducesRechargeableProducts(x)) -> ProducesFastFashionProducts(x))", "all x.(DisposableProducts(x) -> FastFashionProducts(x))", "all x.((Reformation(x) & ProducesDisposableProducts(x)) -> ProducesFastFashionProducts(x))", "all x.((ReformationProducesDiscopableProducts(x)) -> ProducesFastFashionProducts(x))", "all x.(Reformation(x) -> (ProducesDisposableProducts(x) & ProducesFastFashionProducts(x)))", "all x.((Reformation(x) & ProducesDisposableProducts(x)) -> ProducesFastFashionProducts(x))", "all x.(Reformation(x) -> (ProducesDisposableProducts(x) & ProducesFastFashionProducts(x)))", "all x.((Reformation(x) & ProducesDisposableProducts(x)) -> ProducesFastFashionProducts(x))", "all x y.((Reformation(x) & DisposableProducts(y)) -> ProducesFastFashionProducts(x,y))"]}
{"id": "folio_train_1394", "nl": "If Reformation produces fast fashion products or helps slow down global warming, then Reformation produces fast fashion products.", "fol": "((IsFastFashionProduct(Reformation) | CanHelpSlowDownGlobalWarming(Reformation)) -> IsFastFashionProduct(Reformation))", "prediction": ["all x.((Reformation(x) & (ProducesFastFashion(x) | SlowsGlobalWarming(x))) -> ProducesFastFashionProducts(x))", "all x.((Reformation(x) & (ProducesFastFashionProducts(x) | SlowsGlobalWarming(x))) -> ProducesFastFashionProducts(x))", "all x.((Reformation(x) & (ProducesFastFashionProducts(x) | HelpsSlowGlobalWarming(x))) -> ProducesFastFashionProducts(x))", "all x.((Reformation(x) & (ProducesFastFashionProducts(x) | SlowsGlobalWarming(x))) -> ProducesFastFashionProducts(x))", "all x.((Reformation(x) & (ProducesFastFashionProducts(x) | SlowsGlobalWarming(x))) -> ProducesFastFashionProducts(x))", "all x.((Reformation(x) & (FastFashionProducts(x) | SlowGlobalWarmingProducts(x))) -> FastFashionProducts(x))", "all x.((Reformation(x) & (ProducesFastFashionProducts(x) | SlowsGlobalWarmth(x))) -> ProducesFastFashionProducts(x))", "all x y.((Reformation(x) & (ProducesFastFashionProducts(x,y) | SlowsGlobalWarming(x,y))) -> ProducesFastFashionProducts(x))", "all x.((Reformation(x) & (ProducesFastFashion(x) | SlowsGlobalWarming(x))) -> ProducesFastFashion(x))", "all x y.((Reformation(x) & (FastFashion(x) | SlowsGlobalWarming(x),y))) -> FastFashionProducts(x))", "all x.((Reformation(x) & (ProducesFastFashionProducts(x) | SlowsGlobalWarming(x))) -> ProducesFastFashionProducts(x))", "all x.((Reformation(x) & (ProducesFastFashionProducts(x) | SlowsGlobalWarming(x))) -> ProducesFastFashionProducts(x))", "all x.((Reformation(x) & (ProducesFastFashionProducts(x) | SlowsGlobalWarming(x))) -> ProducesFastFashionProducts(x))", "all x.((Reformation(x) & (ProducesFastFashion(x) | SlowsGlobalWarming(x))) -> ProducesFastFashion(x))", "all x y.((Reformation(x) & (ProducesFastFashionProducts(x) | SlowsGlobalWarming(x))) -> ProducesFastFashionProducts(x))", "all x.((Reformation(x) & (ProducesFastFashionProducts(x) | SlowsGlobalWarming(x))) -> ProducesFastFashionProducts(x))"]}
{"id": "folio_train_1395", "nl": "Roy Richardson was a cricketer for Sint Maartener, a consituent country.", "fol": "(IsCricketer(Royrichardson) & PlayedForTeam(Royrichardson,Sintmaartener) & IsConstituentCountry(Sintmaartener))", "prediction": ["Roy Richardson was cricketer for SintMaartener, constituentCountry.", "RoyRichardson (CricketerForSintMaartener(c) & ConsituentCountry(d))", "all x.(RoyRichardson(x) -> (CricketerFor(x,SintMaartener) & ConsituentCountry(x,SintMaartener)))", "all x y.((RoyRichardson(x) & SintMaartener(y)) -> CricketerFor(x,y))", "Roy Richardson (left) was CricketerForSintMaartener(right))", "(Cricketer(RoyRickerson) & ForSintMaartener(RoyRichardson))", "Roy Richardson was cricketer for Sint Maartener (KonstituentCountry)", "Roy Richardson (roy) & CricketerForsk(y) & ConstituentCountry(z) & SintMaartener(z))", "all x.(Cricketer(x) -> (Roy Richardson(x) & SintMaartener(x)))", "Roy Richardson was cricketer and cricketer for SintMaartener (ConsituentCountry)", "Roy Richardson played cricketer for SintMaartener, a consituentCountry.", "(SintMaartener(rooiRichardson) & CricketerFor(rooiRichardson))", "Roy Richardson (@RoyRiley(RoyLarry) & CricketerForSintMaartener(R))", "(Cricketer(Roy Richardson) & InCanadianConstitution(RoyRileyson,RoySantMaartener))", "all x.(Cricketer(x) -> (RoyRichardson(x) & SintMaartener(x)))", "all x y z.((RoyRichardson(x) & Cricketer(y) & SintMaartener(z)) -> CricketerFor(x,y,z))"]}
{"id": "folio_train_1396", "nl": "Roy Richardson was a right handed batsman and medium pace bowler.", "fol": "(IsRightHandedBatsman(Royrichardson) & IsBatsman(Royrichardson) & IsMediumPaceBowler(Royrichardson))", "prediction": ["Roy Richardson was a right handed batsman and medium pace bowler.", "Roy Richardson was a right handed batsman and medium pace bowler.", "(Roy Richardson(Roy) & RightHandledBatsman(Roy) & MediumPaceBower(Roy))", "all x.(Roy Richardson(x) -> (RightHandledBatsman(x) & MediumPaceBowler(x)))", "all x.(RoyRichardson(x) -> (RightHandledBatsman(x) & MediumPaceBowler(x)))", "all x.((RoyRichardson(x) & AllRightHandled(x)) -> Batsman(x) & AllMediumPaceBowler(x))", "(Roy Richardson) - (RightHandedBatsman(Roy Richardson) & MediumPaceBowler(Roy Richardson)))", "all x.(Roy Richardson(x) -> (RightHandledBatsman(x) & MediumPaceBowler(x)))", "(LowerHandBatsman(Roy Richardson) & MediumPaceBowler(Roy Richardson))", "Roy Richardson was a right handed batsman and medium pace bowler.", "(Roy Richardson) & RoyalHandledBatsman(RoyRidge(RoyRidge) & MediumPaceBowler(RoyRiderson))", "all x.(Roy Richardson(x) -> (RightHandledBatsman(x) & MediumPaceBowler(x)))", "All x.(RoyRichardson(x) -> (RightHandledBatsman(x) & MediumPaceBowler(x)))", "in the early 1970s. Roy Richardson was a right handed batsman, medium pace bowler and hitter.", "all x.(Roy Richardson(x) -> (RightHandledBatsman(x) & MediumPaceBowler(x)))", "all x y.((RoyRichardson(x) & Batsman(x) & Bowler(y)) -> (RightHanded(x,y) & MediumPace(x,y)))"]}
{"id": "folio_train_1397", "nl": "Roy Richardson was old when he debuted in cricket.", "fol": "(IsOld(Royrichardson) & DebutedInSport(Royrichardson,Cricket))", "prediction": ["all x.(RoyRichardson(x) -> DebutedInCrickets(x))", "all x y.((RoyRichardson(x) & Cricket(y)) -> Old(x))", "all x.((RoyRileyson(x) & DebutedInCricket(x)) -> Old(x))", "all x.((RoyRichardson(x) & DebutedInCricketry(x)) -> Old(x))", "-(Roy Richardson(Roy) & DebutedInCrickets(Roy)))", "'1982, Jordon Richardson() & DebutedInCrickets())", "Roy Richardson a bit older when he debuted in cricket.", "all x.(RevisedInCricket(x) -> Age(x))", "Roy Richardson was old when he debuted in cricket.", "all x.((RoyRichardson(x) & Cricket(x)) -> Old(x))", "aged when he debuted in Cricket.", "all x.((RoyRichardson(x) & DebutedInCrickets(x)) -> Old(x))", "all x.((Roy Richardson(x) & DebutedInCricket(x)) -> Old(x))", "(Adult(RoyRichardson) -> DebutedInCrickets(Richardson))", "all x.((Roy Richardson(x) & CricketDebuted(x)) -> Old(x))", "Roy Richardson wasoldWhenDebutedInCrickets(RileyRiley,1998)."]}
{"id": "folio_train_1398", "nl": "Sherville Huggins dismissed Roy Richardson.", "fol": "DismissedBy(Shervillehuggins,Royrichardson)", "prediction": ["(SherriviliaHughes dismissedRoyRichardson(Sherville))", "ShervilleHughes dismissedRoy Richardson(ShervineHouggins)", "ShervilleHuggins dismissedRoy Richardson.", "shervillehughes dismissedRoyRichardson(h)", "sherville-Huggins dismissedRoyRichardson (WordMcLarry)", "ShervilleHuggins dismissedRoy Richardson.", "ShervilleHuggins dismissedRoy Richardson.", "ShervilleHuggins dismissed Roy Richardson.", "ShervilleHuggins dismissedRoyRichardson(w)", "ShervilleHuggins dismissedRoyRichardson.", "ShervilleHuggins dismissedRoyRichardson.", "Sherville Huggins dismissed Roy Richardson.", "ShervilleHuggins dismissedRoyRichardson.", "ShervilleHughes(Sherville) dismissedRoyRibaldson(Sherville)", "(DisappointedRoyRichardson) - ShervilleHughes(ShervilleHuggins))", "Roy Richardson -Dismisses(Vibes,Redmonds,Roy))"]}
{"id": "folio_train_1399", "nl": "Sherville Huggins has never dismissed anyone playing for a constituent country.", "fol": "-exists x y.(DismissedBy(Shervillehuggins,x) & PlayedForTeam(x,y) & IsConstituentCountry(y))", "prediction": ["ShervilleHughes-Suspended(ShorevilleMuggins)", "(-DismissesPlayingForCountry(ShervilleHargins))", "all x.((ShervilleHuggins(x) & PlayingForConstituentCountry(x)) -> -Dismissed(x))", "(-DismissedFromPlayingForConstituentCountry(ShervilleHuggins))", "(-DisclosesPlayer(ShorvilleHumgins,Country))", "ShervilleHughes-(e) & NeverDiazedAnyonePlayingForCorningCountry(e))", "All x y.((ShervilleHuggins(x) & Country(y)) -> NeverDismissed(x,y))", "ShervilleHughes -(Dismissed(ShervilleHumphgins,PlayingForConstituentCountry)))", "Sherville Huggins has never dismissed anyone who plays for ConstituentCountry(ShervilleHuggins)", "ShervilleHuggins' name is not dismissed.", "ShervilleHuggins & -DismissedAnyonePlayingForCountry(ShervilleHuggins)", "all x.((ShervilleHuggins(x) & -DismissedAnyonePlayingForConstituentCountry(x)) -> Never(x))", "all x.((ShervilleHughes(x) & NeverDismissed(x,y)) -> ComposesForConstituentCountry(y))", "ShervilleHuggins has never dismissed anyone playing for constituentcountry.", "ShervilleHuggins & NeverDismissedPlayingForConstituentCountry(HearvilleHuggins)", "ShervilleHuggins -hasn'tDisclosureDismissedAnyonePlayingForConstituentCountry(ShervilleHughes)"]}
{"id": "folio_train_1400", "nl": "There are no right handed medium pace bowlers playing for Sint Maartener.", "fol": "-exists x.(IsRightHandedBatsman(x) & IsMediumPaceBowler(x) & PlayedForTeam(x,Sintmaartener))", "prediction": ["-exists x.(MidLenchedMediumPerformanceBowler(x) & PlayedForSintMaartener(x))", "In the right handed, medium pace Bowler\u2019s (M-Bosc(n) & SintMaartener(f)) --- exists x.(NonZonalHanded(x) & PlayingFor(x,n))))", "RightHandedMediumPaceBowler() -> -PlayingForSintMaartener(x))", "-exists x.(Champion(x) & RightHanded(x,MediumPace) & PlaysFor(x,SintMaartener))", "There are no right handedmediumPaceBolgersPlayingForSintMaartener.", "-exists x.(RightHandedMediumPaceBangler(x) & PlayingForSintMaartener(x))", "-exists x.(Pacebosser(x) & RightHandled(x) & PlayingFor(x,SintMaartener))", "There are no rightHandedMediumPaceBowler(x) & PlayingForSintMaartener(x))", "-exists x.(RightHandedMediumPaceBaller(x) & PlayingForSintMaartener(x))", "-exists x.(RightHandledMediumPaceBowler(x) & PlaysForSintMartener(x))", "(-exists x.(RightHandedMediumPaceBower(x) & PlaysForSintMaartener(x)))", "-exists x.(RightHandedMediumPaceBowler(x) & PlaysForSintMaartener(x))", "No RightHandedMedievalPaceBoltersPlayingForSintMaartener.", "keine rightHandedMediumPaceBallerPlayingForSintMaartener.", "-exists x.(RightHandedMediumPaceBowler(x) & PlayedForSintMaartener(x))", "Exists x.(RightHandedMediumPaceBowler(x) & PlaysForSintMaartener(x))"]}
{"id": "folio_train_1401", "nl": "To get a job at Google, you need to have a lot of work experience or a good education.", "fol": "all x.((GotJobAtGoogle(x,Google) -> HasWorkExperience(x)) | HasGoodEducation(x))", "prediction": ["all x.((GoogleJob(x) & (WorkExperience(x) | GoodEducation(x))) -> Gets(x,y))", "all x.(GoogleJob(x) -> (RightWorkExperience(x) | GoodEducation(x)))", "all x.((Job(x) & JobsAtGoogle(x)) -> (VolumeOfWorkExperience(x) | GoodEducation(x)))", "all x.((GoogleJob(x) & (WorkExperience(x) | GoodEducation(x))) -> JobAtGoogle(x))", "all x.((GoogleJob(x) & (LittleWorkExperience(x) | GoodEducation(x))) -> JobsByGoogle(x))", "all x.(Development(x) | GreatEducation(x))", "all x.((Job(x) & Google(x)) -> (AmpleWorkExperience(x) | GoodEducation(x)))", "all x.((Board(x) & Google(x)) -> (WorkExperience(x) | GoodEducation(x)))", "all x.((Job(x) & Google(x)) -> (HasLittleWorkExperience(x) | GoodEducation(x)))", "all x.(GoogleJob(x) -> (Bays(x,WorkExperience) | GoodEducation(x)))", "all x.(GoogleJob(x) -> (HasWorkExperience(x) | HasGoodEducation(x)))", "all x.((GoogleJob(x) & (WorkExperience(x) | Education(x))) -> JobAtGoogle(x))", "all x.((GoogleJob(x) & (A lotOfWorkExperience(x) | GoodEducation(x))) -> JobAtGoogle(x))", "all x.(GoogleJob(x) -> (LittleWorkExperience(x) | GoodEducation(x)))", "all x.(Google(x) -> ((WorkExperience(x) | GoodEducation(x))))", "all x.((GoogleJob(x) & (BonusOfWorkExperience(x) | GoodEducation(x))) -> JobAtGoogle(x))"]}
{"id": "folio_train_1402", "nl": " All Yale graduates who submitted their resumes to Google got jobs there.", "fol": "all x.((IsYaleGraduate(x) & SubmittedResumeToGoogle(x,Google)) -> GotJobAtGoogle(x,Google))", "prediction": ["all x y.((Graduate(x) & Yale(y) & SubmittedResumes(x,y)) -> GotJob(x,y))", "all x.((Graduate(x) & Yale(x) & SubmittedResumeToGoogle(x)) -> GotJob(x))", "all x.(DawsonResumeSubmit(x) -> GotJobs(x))", "all x y z.((Graduate(x) & Yale(y) & Resume(z) & SubmittedToGoogle(z,y,z)) -> (Hired(x,y) | Jobs(x,y)))", "all x.((Graduate(x) & GraduatedInYale(x) & SubmittedResumeToGoogle(x)) -> GotJobs(x))", "all x.((Graduate(x) & SubmittedResume(x,Google)) -> GetsJob(x))", "all x.((YearlyGraduate(x) & SubmittedResumeToGoogle(x)) -> GotJobsThere(x))", "all x y.((Graduate(x) & Graduate(y) & submittedResume(x) & Google(y)) -> GotJob(x,y))", "all x y.((Graduate(x) & Yale(y) & submittedResumesToGoogle(x)) -> ReceivedJob(x))", "all x.((Graduate(x) & EnrolledToGoogle(x)) -> JobsAreas(x))", "all x.((Prisoner(x) & GotJob(x,Google)) -> AllYaleAbsolvents(x))", "all x.((Degree(x) & Yale(x) & submittedResumeToGoogle(x)) -> GotJobs(x))", "all x.((Graduate(x) & SubmittedResumeToGoogle(x)) -> GotJob(x))", "all x.((Graduate(x) & Yale(x) & submittedResumeStatusToGoogle(x)) -> GotJobs(x))", "all x.((Graduate(x) & SubmittedResumeToGoogle(x)) -> GotJobs(x))", "all x y.((Graduate(x) & Yale(y) & SubmittedResumeToGoogle(x,y)) -> GotJobThere(y))"]}
{"id": "folio_train_1403", "nl": " John has a lot of work experience.", "fol": "HasWorkExperience(John)", "prediction": ["all x.(John(x) -> LONGENTRYWorkExperience(x))", "John B. HasLastMillionsOfWorkExperience(John)", "all x.(John(x) -> HASSWorkExperience(x))", "all x.(John(x) -> LotsOfWorkExperience(x))", "(WorkExperience(John) & -WorkExperience(John))", "John has a lot of workerfahrung.", "John has a lot of workExperience(John)", "(WorkExperience(John) & LongTimeWork(John))", "both of them.", "John also has work experience.", "all x.(John(x) -> LotsOfWorkExperience(x))", "John has a lot of workExperience.", "(WorkExperience(John) & LotsOf(John,John))", "John has a lot of workExperience.", "John works for his employer, ThriveExperience,and has a lot of experience.", "all x.(John(x) -> WorkExperience(x))"]}
{"id": "folio_train_1404", "nl": " John submitted his resume to Google and got a job there.", "fol": "(SubmittedResumeToGoogle(John,Google) & GotJobAtGoogle(John,Google))", "prediction": ["(SharingResumeToGoogle(John,Jones) & ReceivedJob(John,Google))", "all x.(John(x) & submittedResumeToGoogle(x) & gotJob(x))", "all x.(John(x) -> (PutsResume(x) & GetsJob(x)))", "all x y.((Jeffrey(x) & Google(y)) -> (SubmittedResume(x,y) & GotJob(x,y)))", "all x.(John(x) -> (SubmittedResume(x,Google) & GotJob(x,Google)))", "all x y.((John(x) & Resume(y)) -> (SubmittedToGoogle(x) & GotJob(y)))", "all x y.((John(x) & Resume(y)) -> (SubmittedToGoogle(x,y) & GotJob(y,y)))", "has a new, different, and different job(John,y)", "all x.((John(x) & SockedResumeToGoogle(x)) -> GotJob(x))", "all x.((Jennifer(x) & Job(y)) -> submittedtoGoogle(x))", "all x.(John(x) -> (SubmittedResumeToGoogle(x) & GotJobAtGoogle(x)))", "all x.((Jonathan(x) & SubmittedResumeToGoogle(x)) -> ReceivedJob(x))", "John uploaded resume to Google and got the job there.", "John submitted resumestoGoogle.com and got job there.", "all x.((John(x) & FiledResumeToGoogle(x)) -> GotJob(x))", "all x.(John(x) -> (SubmittedResumeToGoogle(x) & GotJob(x)))"]}
{"id": "folio_train_1405", "nl": "John is a Yale graduate.", "fol": "IsYaleGraduate(John)", "prediction": ["(Graduate(John) atYale(John))", "John is Yale graduate.", "John Kennedy is a Yale Graduate(John,2)", "John is Yale graduate.", "(GivenByYale(John) & Graduate(John))", "John has a degree from Yale.", "John Hallam-Winston graduate.", "John is a Yale Graduate(John)", "John is Yale graduate.", "(Synax(HasGraduate(John) & Yale(John))", "-WinstonGraduate(John))", "John was graduated from Yale University.", "John is Yale graduate.", "John is Yale graduate and Yale grad.", "John is Yale Graduate(John)", "(1931) -> YaleGraduate(Jeff.(Jennifer) & Graduate(John,Yanlu)))"]}
{"id": "folio_train_1406", "nl": "No students are doctors.", "fol": "all x.(IsStudent(x) -> -IsDoctor(x))", "prediction": ["-exists x.(Student(x) & Doctor(x))", "-exists x.(Student(x) & Doctor(x))", "-exists x.(Student(x) & Doctor(x))", "-exists x.(Student(x) & Doctor(x))", "-exists x.(Student(x) & -Doctor(x))", "-exists x.(Student(x) & Doctor(x))", "-exists x.(Student(x) & Doctor(x))", "-exists x.(Student(x) & Doctor(x))", "-exists x.(Student(x) & Doctor(x))", "-exists x y.(Student(x) & Doctor(y))", "-exists x.(Student(x) & Doctor(x))", "-exists x.(Student(x) & Doctor(x))", "-exists x.(Student(x) & Doctor(x))", "-exists x.(Student(x) & Doctor(x))", "-exists x.(Student(x) & Doctor(x))", "-exists x.(Student(x) & Doctor(x))"]}
{"id": "folio_train_1407", "nl": "All people taking classes are students. ", "fol": "all x.(IsTakingClass(x) -> IsStudent(x))", "prediction": ["all x.(TakesClass(x) -> Student(x))", "all x.((Person(x) & TakesClass(x)) -> Student(x))", "all x.(TakesClass(x) -> Student(x))", "all x.(Person(x) -> Student(x))", "all x.(TakingClasses(x) -> Students(x))", "all x.(TakesClass(x) -> Student(x))", "all x.(Person(x) -> Student(x))", "all x.(TakesClass(x) -> Student(x))", "all x.(TakesClass(x) -> Student(x))", "all x.((Person(x) & TakesClasses(x)) -> Student(x))", "all x.(TakesClasses(x) -> Students(x))", "all x.(TakesClass(x) -> Student(x))", "all x.((Person(x) & TakesClasses(x)) -> Student(x))", "all x.(TakesClass(x) -> Student(x))", "all x.((Person(x) & TakesClass(x)) -> Student(x))", "all x.(TakingClasses(x) -> Student(x))"]}
{"id": "folio_train_1408", "nl": "All graduate students are people taking classes. ", "fol": "all x.(IsGraduateStudent(x) -> IsTakingClass(x))", "prediction": ["all x.(GraduateStudent(x) -> TakesClasses(x))", "all x.(GraduateStudent(x) -> (TakingClasses(x)))", "all x.(GraduateStudent(x) -> TakeClass(x))", "all x.(GraduateStudent(x) -> TakesClasses(x))", "all x.(GraduateStudent(x) -> TakenCourses(x))", "all x.(GraduateStudent(x) -> PersonTakingClasses(x))", "all x.(GraduateStudent(x) -> TakesClasses(x))", "all x.(GraduateStudent(x) -> TakesClasses(x))", "all x.(GraduateStudent(x) -> PeopleTakingClasses(x))", "all x.(GraduateStudent(x) -> TakesClasses(x))", "all x.(GraduateStudent(x) -> TakengClasses(x))", "all x.(GraduateStudent(x) -> TakesClasses(x))", "all x.(GraduateStudent(x) -> PeopleTakingClasses(x))", "all x.(GraduateStudent(x) -> PupilTakenClass(x))", "all x.(GraduateStudent(x) -> TakesClasses(x))", "all x.(GraduateStudent(x) -> TakesClasses(x))"]}
{"id": "folio_train_1409", "nl": "All PhD students are graduate students. ", "fol": "all x.(IsPhDStudent(x) -> IsGraduateStudent(x))", "prediction": ["all x.(PhD(x) -> GraduateStudent(x))", "all x.(PhDStudent(x) -> GraduateStudent(x))", "all x.(Student(x) -> GraduateStudent(x))", "all x.(PhD(x) -> GraduateStudent(x))", "all x.(PhD student(x) -> GraduateStudent(x))", "all x.(DoctoralStudent(x) -> GraduateStudent(x))", "all x.(DoctoralStudent(x) -> GraduateStudent(x))", "all x.((PhDStudent(x) & GraduateStudent(x)) -> GraduateStudent(x))", "all x.(PhDStudent(x) -> GraduateStudent(x))", "all x.(PhDStudent(x) -> GraduateStudent(x))", "all x.(PhD(x) -> GraduateStudent(x))", "all x.(DoctoralStudent(x) -> GraduateStudent(x))", "all x.(PhDStudent(x) -> GraduateStudent(x))", "all x.(PhDStudent(x) -> GraduateStudent(x))", "all x.(PhD(x) -> GraduateStudent(x))", "all x.(PhDStudent(x) -> GraduateStudent(x))"]}
{"id": "folio_train_1410", "nl": "If Joe is a graduate student or a doctor (but not both), then Joe is not a graduate student and a student.", "fol": "(((IsGraduateStudent(Joe) & -IsDoctor(Joe)) | (-IsGraduateStudent(Joe) & IsDoctor(Joe))) -> -(IsGraduateStudent(Joe) & IsStudent(Joe)))", "prediction": ["all x.((GraduateStudent(x) | Doctor(x)) -> (-GraduateStudent(x) & -Student(x)))", "all x.((GraduateStudent(x) | Doctor(x)) -> (-GraduateStudent(x) & -Doctor(x)))", "all x.((GraduateStudent(x) & -Doctor(x)) -> -GraduateStudent(x) & -Doctor(x))", "all x.((GraduateStudent(x) | Doctor(x)) -> -(GraduateStudent(x) & CollegeStudent(x)))", "all x.((GraduateStudent(x) | Doctor(x)) -> -GraduateStudent(x) & -Student(x))", "all x.((GraduateStudent(x) | Doctor(x)) -> (-GraduateStudent(x) & -Doctor(x)))", "all x.((GraduateStudent(x) & -Dr.(GraduateStudent(x) & Doctor(x))) -> -GraduateStudent(x) & Student(x))", "(-(GraduateStudent(Joe) & Doctor(Joe)) -> (-GraduateStudent(Joe) & Student(Joe)))", "all x.((GraduateStudent(x) & -Doctor(x)) -> (-GraduateStudent(x) & -Doctor(x)))", "all x.((GraduateStudent(x) | Doctor(x)) -> -(GraduateStudent(x) & Student(x)))", "(-(GraduateStudent(Joe) & GraduateStudent(Joe)) -> -DiplomaticStudent(Joe)) & -DiplomaticStudent(Joe))", "all x.((Gibson(x) | Doctor(x)) -> (-GraduateStudent(x) & -Doctor(x)))", "all x.((GirlStudent(x) | Doctor(x)) -> (-GirlStudent(x) & Student(x)))", "all x.((GraduateStudent(x) | Doctor(x)) -> (-GraduateStudent(x) & Student(x)))", "(-(GraduateStudent(Job) & Doctor(Job)) | (-GraduateStudent(Job) & Student(Job))))", "all x.((GraduateStudent(x) | Doctor(x)) -> -(GraduateStudent(x) & Student(x)))"]}
{"id": "folio_train_1411", "nl": "Joe is a person taking classes.", "fol": "IsTakingClass(Joe)", "prediction": ["all x.(Joe(x) -> TakesClasses(x))", "all x.((Person(x) & TakesClasses(x)) -> JoeTakesClasses(x))", "all x.(Person(x) -> TakesClasses(x))", "(TakesClasses(Joe) | TakesClasses(Joe))", "(TakingClasses(Joe) & JoinsClasses(Joe))", "all x.(Joe(x) -> TakesClasses(x))", "(TakesClasses(Joe) & Person(Joe))", "all x.(Joe(x) -> TakesClasses(x))", "(TargetsClasses(Joe))", "all x.(Joe(x) -> TakesClasses(x))", "is takingClasses(Joe)", "all x.((Person(x) & TakesClasses(x)) -> Joe(x))", "TakingClasses(Joe)", "(TakingClasses(Joe) -> TakesClasses(Joe))", "all x.(Joe(x) -> TakesClasses(x))", "all x.(Joe(x) -> TakesClasses(x))"]}
{"id": "folio_train_1412", "nl": "Joe is a PhD student.", "fol": "IsPhDStudent(Joe)", "prediction": ["(PhDateStudent(Joe) & DoctoralStudent(Joe))", "(PaulDissertationStudent(Joe,ThanPhD))", "exists x.(ProfessorStudent(x) & Joe(x))", "(PhD Student(Gateway) : -> -Smoker(Gateway))", "Joe is a PhDStudent(Joe)", "(PhD Student(Joe)", "Joe is a PhDStudent(Joe)", "(PhDStudent(Joe) & -Student(Joe,Derived(Joe))", "(Student(joe) & PhD(joe))", "(PhD Student(Joe))", "all x.((Joe(x) & PhDStudent(x)) -> -PhDStudent(x))", "(PhD Student(joe))", "(PhD Student(joe) | MSc(joe)))", "(PhD Student(Joe)", "all x.(Dr.Joe(x) -> PhDStudent(x))", "(PhD student(Joe))"]}
{"id": "folio_train_1413", "nl": "Joe is not a PhD student.", "fol": "-IsPhDStudent(Joe)", "prediction": ["(-PhD Student(Joe))", "(-PhD Student(Joe))", "(-PhD Student(Joe))", "(-PhD Student(Joe))", "\"NoPhD Student(joe,i)", "-(PsychologistStudent(Joe))", "no PhDStudent(Joe)", "-DoctoralStudent(Joe)", "(NotPhD Student(Joe))", "(- PhDStudent(Joe))", "IsDr.JoeStudent(Joe)?", "all x.(Joe(x) -> -PhDStudent(x))", "(Franken(Joe) & -DoctoralStudent(Joe))", "(-PDStudent(Ed Joe))", "Joe is not PhDStudent(Joe)", "is notPhD Student(Joe) & Done(Joe)"]}
{"id": "folio_train_1414", "nl": "Hugh Vanstone is one of the world's leading lighting designers. ", "fol": "IsLeadingLightingDesigner(HughVanstone)", "prediction": ["HughVanstone is one of the world's LeadingLightingDesigners(HmVanstone)", "HughVanstone is one of the world's leadingLightingDesigners(x)", "HughVanstone is a leadingLightingDesigner(x) & DesignerOfLighting(x)", "Hugh Vanstone est one of the world's leadingLightingDesigners(x) & DesignedForLighting(x))", "Hugh Vanstone is one of the world's leadingLightingDesigners(HughVanstone)", "HughVanstone is one of the world's leadingLightingDesigners(x)", "Hugh Vanstone is one of the world's leadingLightingDesigners(HUGE)", "Hugh Vanstone is one of the world's leadingLightingDesigners(h)", "Hugh Vanstone is one of the world's LeadingLightingDesigners(HughVanstone)", "Hugh Vanstone,LightingDesigner(h)", "Hugh Vanstone is one of the worlds LeadingLightingDesigners(h)", "Hugh Vanstone is one of the leading LightingDesigners(x) & DesignesLighting(x))", "Hugh Vanstone is a leadingLightingDesigner(x) & DesigningLighting(x))", "all x.((LightingDesigner(x) & HughVanstone(x)) -> Leading(x))", "Hugh Vanstone is one of the world's leadingLightingDesigners(HVGorstone)", "Hugh Vanstone is one of the worlds leadingLightingDesigners(Him,v)"]}
{"id": "folio_train_1415", "nl": "Hugh Vanstone is from the UK.", "fol": "IsFromUK(HughVanstone)", "prediction": ["HughVanstone comes from UK.", "HughVanstone ist fromUK.", "Hugh Vanstone is from the UK.", "Hugh Vanstone (BritishArea))", "Hugh Vanstone is from UK.", "HughVanstoneIsFromUK.", "Hugh Vanstone is from the UK.", "HughVanstone(x) -FromUK.", "-RichardVanstone(HughVanstone) twice(Hugh & FromUK.)", "HughVanstone fromUK.", "Hugh Vanstone is from Britain.", "Hugh Vanstone is from UK.", "HughVanstone is from the UK.", "HughVanstone is from UK.", "Hugh Vanstone is from the UK.", "BritishHeart(HughVanstone)"]}
{"id": "folio_train_1416", "nl": "Hugh Vanstone has lit more than 160 productions.", "fol": "HasLitMoreThan160Productions(HughVanstone)", "prediction": ["HughVanstone lit more than 160 productions(x)", "Hugh Vanstone lit more than 160 productions.", "Hugh Vanstone lit more than 160 Productions.", "Hugh Vanstone litsmoretteThan160Productions(HughVanstone)", "Hugh Vanstone lit more than 160 productions.", "LedsLikedMoreThan(HughVanstone,160)", "Hugh Vanstone lit more than 160 productions.", "Hugh Vanstone lit more than 160 productions.", "HughVanstone litsmorest(Valton,160)", "Hugh Vanstone lit more than 160 productions.", "Hugh Vanstone - lit(m) t0160Productions(m))", "Hugh Vanstone lit over 160 productions.", "\u2013LitMoreThan160Productions(HughVanstone)", "Hugh Vanstone lit more than 160 productions.", "Hugh Vanstone lits more than 160 productions.", "Hugh Vanstone has lit more than 160 productions."]}
{"id": "folio_train_1417", "nl": "Hugh Vanstone attended school where he is from. ", "fol": "AttendedSchoolInHomeCountry(HughVanstone)", "prediction": ["all x y.((HughVanstone(x) & School(y)) -> Attended(x,y))", "(exists x.(Vanstone(x) & Attends(x)) & from(Vanstone(x) & HasSecondary(x)))", "Hugh Vanstone attended school where he is from.", "Hugh Vanstone(m) s School(w) & AttendsSchool(m,w))", "(HughVanstone(Hugh) & AttendedSchool(Hugh))", "Hugh Vanstone attended school where he is from.", "(All x.(RoyalSchool(x) & HughVanstone(x)) -> Attended(x,HS))", "all x y.((HughVanstone(x) & School(y)) -> Attends(x,y))", "all x.((HughVanstone(x) & School(x)) -> Attended(x,y))", "(Student(HughVanstone) & AttendsSchool(HughVanstone))", "Hugh Vanstone attended School Where(she isFrom)", "all x y.((Hungarian(x) & School(y)) -> Attends(x,y))", "Hugh Vanstone attended school at the school from which he was born.", "Hugh Vanstone arose from school where he is from.", "(AttendedSchool(HughVanstone) & RetiresFrom(HughVanstone))", "Hugh Vanstone attended school (apartment) & fromSchool(a))"]}
{"id": "folio_train_1418", "nl": "Hugh Vanstone is one of the world's leading ligting designers and from the uk", "fol": "(IsLeadingLightingDesigner(HughVanstone) & IsFromUK(HughVanstone))", "prediction": ["world famous ligtingdesigner(HughVanstone) / (LeadingLittingDesign(HughVanstone) & FromUK(Uk) & FromUk(Vanstone,UK)))", "one of the leading ligtingdesigners and hails from the uk. Hugh Vanstone is a leading designer,-designer,linting designers, designer,uk.", "Hugh Vanstone is one of the leading architects in ligting design and based in the uk.", "all x.(HughVanstone(x) -> (InternationalLivingDesigner(x) & FromUK(x)))", "all x y.((HughVanstone(x) & Designer(y)) -> (LeadsLeisure(x,y) & FromUK(z) & From(x,z)))", "Hugh Vanstone, has a global reputation for quality litigtingdesigner(g), from the uk.", "(LeadsDesigning(HughVanstone,LightingDesigner) & FromTheUK(HughVanstone,UK))", "all x y.((LingtingDesigner(x) & HughVanstone(y)) -> (LivingDesigner(y) & British(y) & OriginallyFrom(x,y)))", "Hugh Vanstone, ltd.((LongingDesigner(l) & FromUK(l)) -Ligting Designer(l) & LocatedIn(l))", "Hugh Vanstone is one of the world's leading ligtingdesigners. Originally from the uk, he is the son of the uk's leading ligting designer, HughVanstone.", "Hugh Vanstone (LitigtingDesigner(x) & FromUK(x))", "all x y.((HughVanstone(x) & LintingDesigner(y)) -> (LeadsWorldLigningDesign(x,y) & FromUK(x)))", "Hugh Vanstone is a leadingLitigtingDesigner(x) & TheBritishLitigtingDesigner(x) -From(x,uk))", "Hugh Vanstone is one of the leadinglligtingdesigners and from the uk.", "Hugh Vanstone is one of the world's leading ligtingdesigners; he comes from the uk.", "Hugh Vanstone, lngtingDesigner(l,l,c) & FromUK(l,l) & All WorldCentric(l,lgting)"]}
{"id": "folio_train_1419", "nl": "Hugh Vanstone has lit 170 productions.", "fol": "LitProductions(HughVanstone,170)", "prediction": ["Hugh Vanstone has lit 170 productions.", "(Lit(HughVanstone) -> 170Productions(HumHughVanstone))", "Hugh Vanstone lit 170 productions.", "Hugh Vanstone has lit 170 productions.", "Hugh Vanstone has lit 170 productions.", "(LitIn(HughVanstone) & TotalProduction(HughVanstone))", "HughVanstone has lit 170 productions & Production(Hill)", "Hugh Vanstone has lit170 productions.", "Hugh Vanstone has lit 170 productions in total.", "Hugh Vanstone has lit 170 productions.", "Hugh Vanstone has lit170 productions.", "Hugh Vanstone(Hgtv270)", "Hugh Vanstone has lit 170 productions.", "HughVanstone hat lit170Series(Vanstone)", "Hugh Vanstone has lit 170 productions.", "Hugh Vanstone has lit 170 productions."]}
{"id": "folio_train_1420", "nl": "Hugh Vanstone attended school in the US.", "fol": "AttendedSchoolIn(HughVanstone,US)", "prediction": ["Hugh Vanstone attended school in the US.", "All x y z.((HughVanstone(x) & School(y) & School(z)) -> AttendsIn(x,y,z))", "Hugh Vanstone attended school (in the US))", "Hugh Vanstone attendedschool in US.", "Hugh Vanstone attended college in the US.", "Hugh Vanstone attended school in the US.", "Hugh Vanstone attended school in the US.", "Hugh Vanstone grew up in the US.", "Hugh Vanstone attended school in the US.", "all x.((HughVanstone(x) & AttendsSchool(x)) -> VisitsSchoolIn(x,US))", "Hugh Vanstone attended school in the United States.", "Hugh Vanstone attended school in the US.", "Hugh Vanstone attended school in the US.", "Hugh Vanstone attendedschool in the US.", "Hugh Vanstone attendedschool in the US.", "Hugh Vanstone attended school in the US."]}
{"id": "folio_train_1421", "nl": "No man can run faster than Bolt. ", "fol": "all x.(IsMan(x) -> -CanRunFasterThanBolt(x))", "prediction": ["-exists x.(Man(x) & CanRunFaster(x))", "-exists x.(Man(x) & -RunsFaster(x,Bolt))", "-exists x.(Man(x) & RunsFasterThan(x,Bloot))", "-exists x.(Man(x) & RunsFaster(x,bolt))", "-exists x.(Man(x) & RunsFaster(x,Bolt))", "(exists x.(Man(x) & RunFaster(x)) -> Bolt(x))", "can'tRunningSpeedierThan(x,Bolt)", "-exists x.(Man(x) & RunsFasterThanBolt(x))", "-exists x.(Man(x) & RunsFaster(x,Bolt))", "KeenmanCanRunFasterThanBolt(x)", "All x.(Man(x) -> RunsFasterThanBolt(x))", "-exists x.(Man(x) & Bolt(x))", "-exists x.(Man(x) & (RunsFaster(x,Bolt) | RunsFaster(x))))", "-exists x.(Man(x) & CanRunFasterThanBold(x))", "-exists x.(Man(x) & Bolt(x))", "KeenManCanRunFasterThanBolt(one),y.((Man(x) | Bolt(y)))"]}
{"id": "folio_train_1422", "nl": "Superman is not a man.", "fol": "-IsMan(Superman)", "prediction": ["all x.(Superman(x) -> -Man(x))", "all x.(Superman(x) -> -Man(x))", "all x.(Superman(x) -> -Man(x))", "all x.(Superman(x) -> NotMan(x))", "all x.(Superman(x) -> -Man(x))", "all x.(Superman(x) -> -Man(x))", "all x.(Superman(x) -> -Man(x))", "all x.(Superman(x) -> -Mammal(x))", "all x.(Superman(x) -> -Man(x))", "(Man(Superman) & -Man(Superman))", "(Man(Superman) | Man(Superman)))", "(Mammal(Superman) & -Man(Superman))", "all x.(Superman(x) -> -Man(x))", "all x.(Superman(x) -> -Man(x))", "all x.(Superman(x) -> -Man(x))", "all x.(Superman(x) -> -Man(x))"]}
{"id": "folio_train_1423", "nl": "Superman can run faster than Bolt.", "fol": "FasterThan(Superman,Bolt)", "prediction": ["RunsFasterThan(Superman)", "All x y.((Superman(x) & Bolt(y)) -> RunsFaster(x,y))", "exists x.(Superman(x) & RunsFasterThan(x,Bolt))", "all x y.((Superman(x) & Bolt(y)) -> RunsFaster(x,y))", "Superman RunsFasterThanBolt(x)", "all x.(Superman(x) -> RunsFasterThanBolt(x))", "all x y.((Superman(x) & Bolt(y)) -> RunsFaster(x,y))", "all x.(Superman(x) -> RunsFaster(x,Bolt))", "(CanRunFasterThanBolt(superman))", "all x.(Superman(x) -> CanRunFaster(x,Bolt))", "(RunsFasterThan(Superman,Bolt))", "all x.(S Superman(x) -> RunsFasterThan(x,Bolt))", "(RemembersBolt(Superman) & RunsFaster(Superman))", "all x y.((Superman(x) & Bolt(y)) -> RunFasterThan(x,y))", "(RunsFasterThanBolt(Superman))", "all x y z.((Superman(x) & Bolt(y) & Faster(z)) -> CanRun(x,y,z))"]}
{"id": "folio_train_1424", "nl": "Donald Ervin Knuth is an American computer scientist, mathematician, and Professor Emeritus at Stanford University.", "fol": "(IsAmericanScientist(DonaldErvinKnuth) & IsMathematician(DonaldErvinKnuth) & IsProfessorEmeritusAtStanford(DonaldErvinKnuth))", "prediction": ["Donald ErvinKnuth (AmericanComputerScientist(n) & Mathematician(n) & ProfessorEmeritus(n,StanfordU))", "Donald ErvinKnuth(r) & AmericanComputerScientist(r) & Mathematician(r) & ProfessorEmeritusAtStanford(r))", "Donald Ervin Knuth (AmericanComputerScientist(Knuth) & MathematicalAid (Knuth) & ProfessorEmeritusAtStanfordUniversity(Knuth))", "DonaldErvinKnuth(a) & ComputerScientist(a) & Mathematician(a) & ProfessorEmeritus(a) & StanfordUniversity(b))", "Donald Ervin Knuth (AmericanComputerScientist(e) & MathematicalAttician(e) & ProfessorEmeritus(e) & StanfordU.Stanford(e))", "Donald Ervin Knuth (AmericanComputerScientist(k) & Mathematician(k) & ProfessorEmeritus(k))", "Donald ErvinKnuth (AmericanComputerScientist(n) & Mathematician(n) & ProfessorEmeritus(n,stanford))", "Donald ErvinKnuth (AmericanComputerScientist(x) & Mathematician(x) & ProfessorEmeritusAtStanford(x))", "Donald ErvinKnuth (AmericanComputerScientist(k) & Mathematician(k) & ProfessorEmeritusAtStanfordUniversity(k))", "Donald ErvinKnuth (AmericanComputerScientist(k) & Mathematician(k) & ProfessorEmeritusAtStanfordUniversity(k))", "Donald ErvinKnuth (AmericanComputerScientist(r) & Mathematician(r) & ProfessorEmeritus(r))", "DonaldErvinKnuth (AmericanComputerScientist(Knuth) & Mathematician(Knuth) & ProfessorEmeritus(Knuth,Stanford))", "Donald Ervin Knuth (AmericanComputerScientist(e) & Mathematician(e) & ProfessorEmeritus(e) & StanfordUrban(e))", "DonaldErvinKnuth(c) & -(AmericanComputerScientist(c) & -AmericanMathematician(d) & -AmericanMathematician(h)))", "Donald Ervin Knuth (ArkansasComputerScientistMathematicianProfessorEmeritus(Knuth))", "DonaldErvinKnuth (*(AmericanComputerScientist(& Mathematician(i) & ProfessorEmeritus(y)))"]}
{"id": "folio_train_1425", "nl": "Knuth has been called the \"father of the analysis of algorithms\".", "fol": "HasTitle(DonaldErvinKnuth,FatherOfTheAnalysisOfAlgorithms)", "prediction": ["Knuth has been called \"father(k) ofAlgorithmAnalysis(k))", "Knuth has been called the \"fatherOfAlgorithms(Knuth)\"", "Knuth has been dubbed the \"fatherOfAlgorithmAnalysis(k)'.", "Knuth is the \"fatherOfAlgorithms(Knuth) & Analysis(Knuth))", "Knuth y.((Professor(x) & AnalysisOfAlgorithms(y)) -> FatherOf(x,y))", "Knuth, o.((FatherOfAlgorithms(O) & FatherOfAlgorithms(O)) -> AnalyticalPastor(O))", "He has been called the \"fatherOfAlgorithms(Knuth,AS)\"", "Knuth has been called the \"father(Knuth) & AnalyzesAlgorithms(Knuth))", "Der \"fatherOfAlgorithms(Knuth,Algorithms)\"", "\"FatherOfAlgorithms(Knuth) \"", "Previously known as \"fatherofAlgorithms(knuth):", "(Trevor(Knuth,Algorithms,Algorithms))", "Knuth has been dubbed the \"fatherofAlgorithmAnalysis(k)\"", "(fatherOfAlgorithms(Knuth) & AnalyzesAlgorithms(Knuth))", "Knuth has been called \"fatherOfAlgorithmAnalysis(k)'')", "Die AnalyzedAlgorithms(Knuth)"]}
{"id": "folio_train_1426", "nl": "An American scientist has been called the \"father of the analysis of algorithms\".", "fol": "exists x.(IsAmericanScientist(x) & HasTitle(x,FatherOfTheAnalysisOfAlgorithms))", "prediction": ["all x y.((AmericanScientist(x) & AnalyzingAlgorithms(y)) -> FatherOf(x,y))", "all x.(AustronomousScientist(x) -> FatherOfAlgorithms(x))", "all x.((AmericanScientist(x) & FatherOfAlgorithms(x)) -> Analyzes(x,algorithms))", "all x.(AmericanScientist(x) -> FatherOfAnalysisOfAlgorithms(x))", "all x.((AmericanScientist(x) & FatherOfAlgorithms(x)) -> Analyses(x,algorithms))", "all x.(AmericanScientist(x) -> FatherOfAlgorithms(x))", "all x y.((AmericanScientist(x) & AmericanScientist(y)) -> FatherOfAlgorithms(x,y))", "all x y.((AmericanScientist(x) & AmericanScientist(y)) -> FatherOfAlgorithmAnalysis(x,y))", "all x.(AmericanScientist(x) -> FatherOfAlgorithms(x))", "all x.(AmericanScientist(x) -> FatherOfAlgorithms(x))", "all x.(AmericanScientist(x) -> FatherOfAlgorithms(x))", "all x.(AtmosphericScientist(x) -> (fatherOfAlgorithms(x) & -FatherOfAlgorithms(x)))", "all x y z.((Astronomer(x) & Scientist(y) & Algorithm(z) & Analyzes(y,z)) -> FatherOf(y,z))", "all x.(AmericanScientist(x) -> \"fatherOfAlgorithms(x)\")", "all x.(AmericanScientist(x) -> FatherOfAlgorithms(x))", "all x y.((AmericanScientist(x) & AmericanScientist(y)) -> (fatherOfAlgorithms(x,y)))"]}
{"id": "folio_train_1427", "nl": "A mathematician has been called the \"father of the analysis of algorithms\".", "fol": "exists x.(IsMathematician(x) & HasTitle(x,FatherOfTheAnalysisOfAlgorithms))", "prediction": ["all x.(Mathematician(x) -> FatherOfAlgorithms(x))", "all x.(Mathematician(x) -> FatherOfAlgorithms(x))", "all x.((Mathematician(x) & FatherOfAlgorithmAnalysis(x)) -> Analyzes(x,algorithms))", "all x.(Mathematician(x) -> FatherOfAlgorithms(x))", "all x.(Mathematician(x) -> FatherOfAlgorithms(x))", "all x.(MathEagan(x) -> (FatherOfAlgorithms(x)))", "all x y.((Mathematician(x) & AlgorithmAnalysis(y)) -> FatherOf(x,y))", "all x.(Mathematician(x) -> FatherOfAlgorithms(x))", "all x.(Mathematician(x) -> FatherOfAlgorithms(x))", "all x.(Mathematician(x) -> FatherOfAlgorithms(x))", "all x y.((Mathematician(x) & Algorithms(y)) -> FatherOfAnalysis(x,y))", "all x.(Mathematician(x) -> FatherOfAlgorithms(x))", "all x.(Magathetatician(x) -> FatherOfAnalysisOfAlgorithms(x))", "all x.(Mathematician(x) -> FatherOfAlgorithms(x))", "all x.(Mathematician(x) -> FatherOfAlgorithms(x))", "all x.(Mathematician(x) -> FatherOfAlgorithms(x))"]}
{"id": "folio_train_1428", "nl": "Donald Knuth is a well-known figure in the field of artificial intelligence .", "fol": "WellKnownFigure(DonaldErvinKnuth,FieldOfArtificialIntelligence)", "prediction": ["(WelcomeBetweenArtificialIntelligence(DunnonKnuth) & WellKnown(Knuth,ArtificialIntelligence))", "Donald Knuth(k) s a well-known figure in artificial intelligence (artificialintelligence) ).", "all x y z.((DonaldKnuth(x) & ArtificialIntelligence(y) & Statistical(z)) -> WellKnownFigure(x,y))", "Donald Knuth (*) is well-known figure in the field of artificialintelligence (AI))", "Donald Knuth (born January 8, 1926)) is a well-known figure in the field of artificial intelligence (AI) & InfluentialIntelligence(ct))", "DonaldKnuth(Kunst) is wellknownfigure(Kunst) & ArtificialIntelligence(Kunst);", "(Intelligence(DonaldKnuth) & WellKnown(DonaldKnuth))", "DonaldKnuth is wellknownInArtificialIntelligence(k) & exists y.(Family(y) & WellKnown(y) & Enrolled(y)))", "DonaldKnuth (CulturalIntelligence(Donald))", "Donald Knuth (DarkNick) & ArtificialIntelligence(Duck))", "DonaldKnuth(Duck) & ArtificialIntelligence(Duck))", "Donald Knuth is an artificial intelligence (AI) figure & well-known(Knuth,AE))", "DonaldKnuth.(Knowledge(Kindness) & ArtificialIntelligence(KNN) + WellKnown(KNN))", "all x.(DonaldKnuth(x) -> WellKnownPatternInArtificialIntelligence(x))", "DonaldKnuth(p) & WellKnownInArtificialIntelligence(p))", "(WellKnownFigureInArtificialIntelligence(DonaldKnuth)"]}
{"id": "folio_train_1429", "nl": "Neocrepidodera Corpulentas are flea beetles or moths.", "fol": "(IsFleaBeetle(Neocrepidoderacorpulenta) | IsMoth(Neocrepidoderacorpulenta))", "prediction": ["all x.(NeocrepidoderaCorpusulentas(x) -> (FleaBeetle(x) | Moth(x)))", "all x.(NeocrepidoderaCorpusulentas(x) -> (FeaBeetle(x) | Moth(x)))", "all x.(Neocrepidodera corpulentas(x) -> (FleaBeetle(x) | Moth(x)))", "all x.(NeocrepidoderaCorpusulas(x) -> (FlyBeetle(x) | Moth(x)))", "all x.(Neocrepidodera Corpulenta(x) -> (FleaBeetle(x) | Moth(x)))", "all x.(Neocrepidodera Corpulentas(x) -> (FlyBeetleOrMoth(x)))", "all x.(NeocrepidoderaCorpulenta(x) -> (FeaBeetle(x) | Moth(x)))", "all x.((FlyBeetle(x) | Moth(x)) -> NeocrepidoderaCorpustulas(x))", "all x.(Colloid(x) -> (FeetleMoth(x) | FleaBeetle(x)))", "all x.((Neocrepidodera Corpulentas(x) & (FlyBeetle(x) | Moth(x))) -> FleaBeetle(x))", "all x.(NeocrepidoderaCorpusulentas(x) -> (FlyBeetle(x) | Moth(x)))", "all x.(NeocrepidoderaCorpustulas(x) -> (Feetle(y) | Mosh(y)))", "all x y.((NeocrepidoderaCumbulas(x) & (Owl(y) | Moth(y))) -> FleaBeetleOrMoth(x,y))", "all x.((NocepidoderaCorpusulentas(x)) -> (FleaBeetle(x) | Moth(x)))", "all x.((FlyBeetle(x) | Moth(x)) -> NeocrepidoderaCorpusulenta(x))", "(FleaBeetle(Neocrepidodera,Corpustulas) | Moth(Neocrepidodera,Corpusulas))"]}
{"id": "folio_train_1430", "nl": "The species Neocrepidodera Corpulenta is in the Chrysomelidae family.", "fol": "(IsSpecies(Neocrepidoderacorpulenta) & BelongsToFamily(Chrysomelidae) & IsInFamily(Neocrepidoderacorpulenta,Chrysomelidae))", "prediction": ["all x.((Neocrepidodera Corpulenta) & ChrysomelidaeFamily(x)) -> InSpecies(x,y))", "all x.(Neocrepidodera Corpulenta(x) -> InChrysomelidaefamily(x))", "((Neocrepidodera Corpulenta) & ChryssomelidaeFamily))", "all x.(Neocrepidodera Corpulenta(x) -> Chysomelidae(x))", "all x.(NeocrepidoderaCorpusulenta(x) -> InChrysomelidaeFamily(x))", "all x.(NeocrepidoderaCorpusulenta(x) -> InChrysomelidaefamily(x))", "all x.(NeocrepidoderaCorpusulenta(x) -> ChrysomelidaeFamily(x))", "all x.((Species(x) & Neocrepidodera Corpulenta(x)) -> ChysomelidaeFamily(x))", "all x y.((NeocrepidoderaCorpustula(x) & Chrysomelidae(y)) -> InFamily(x,y))", "all x.(NeocrepidoderaCorpusulenta(x) -> SpeciesInChrysomelidaeFamily(x))", "all x.(NeocrepidoderaCorpusulenta(x) -> InChysomelidaeFamily(x))", "all x.(NewElepidoderaCorpulenta(x) -> InChrysomelidaeFamily(x))", "all x y z.((Species(x) & Plant(y) & Chrysomelidae(z)) -> (Neocrepidodera Corpulenta,y,z)))", "all x.(NeocrepidoderaCorpusulenta(x) -> InChrysomildaeFamily(x))", "all x.(NeocrepidoderaCorpustula(x) -> InChryssomelidaeFamily(x))", "all x.(NeocrepidoderaCorpusulenta(x) -> InChrysomelidaeFamily(x))"]}
{"id": "folio_train_1431", "nl": "There are no moths within the Chrysomelidae family.", "fol": "all x.((IsInFamily(x,Chrysomelidae) & BelongsToFamily(Chrysomelidae)) -> -IsMoth(x))", "prediction": ["-exists x.(Moth(x) & WithinChrysomolidaeFamily(x))", "-exists x.(Moth(x) & WithinChrysomelidae(x))", "(-exists x.(Moth(x) & WithinChrysomelidaeFamily(x)))", "-exists x.(Moth(x) & WithinChrysomelidaeFamily(x))", "all x.(Moth(x) -> -exists y.(Chrysomelidae(y) & Within(x,y)))", "-exists x.(Moth(x) & WithinCrysomosidelidae(x))", "-exists x.(Moth(x) & WithinChrysomelidae(x))", "-exists x.(Moth(x) & WithinCrysomella(x))", "(-Moth(x) & -Cysomolidae(x))", "-exists x.(Moth(x) & WithinChrysomelidae(x))", "-exists x.(Moth(x) & WithinCrysomelidae(x))", "In den Chrysomelidae family, -Moths(n)", "-exists x.(Moth(x) & WithinChrysomelidae(x))", "exists x.(Moth(x) & -Moth(x))", "all x.(Moth(x) -> -Chrysomelidae(x))", "-exists x.(Moth(x) & WithinCrysomelidaeFamily(x))"]}
{"id": "folio_train_1432", "nl": "There is a flea beetle within the Chrysomelidae family.", "fol": "exists x.(IsFleaBeetle(x) & IsInFamily(x,Chrysomelidae))", "prediction": ["exists x.(FlyBeetle(x) & WithinCrysomelidae(x))", "all x.(FlyBeetle(x) -> WithinCrysomelidaeFamily(x))", "exists x.(FleaBeetle(x) & WithinChrysomelidaeFamily(x))", "exists x y.(FleaBeetle(x) & Chilloglidae(y) & WithinProteologue(x,y))", "exists x.(Feetle(x) & WithinChysomelidaeFamily(x))", "exists x.(Feetle(x) & WithinChrysomelidaeFamily(x))", "exists x.(FloodBeetle(x) & WithinChrysomelidaeFamily(x))", "exists x.(Feetle(x) & WithinChrysomelidaeFamily(x))", "(FlyBeetle(x) & WithinChrysomelidaeFamily(x))", "exists x.(FlyBeetle(x) & WithinChrysomelidaeFamily(x))", "exists x.(FlyBeetle(x) & WithinChrysomolidae(x))", "exists x.(FlyBeetle(x) & WithinChysomelidaeFamily(x))", "exists x.(FleaBeetle(x) & WithinChrysomelidaeFamily(x))", "exists x.(FlyBeetle(x) & WithinChrysomelidaeFamily(x))", "exists x.(FlyBeetle(x) & WithinChrysomellaeFamily(x))", "exists x.(FlyBeetle(x) & WithinCrysomelidaeFamily(x))"]}
{"id": "folio_train_1433", "nl": "There are no flea beetles within the Chrysomelidae family.", "fol": "all x.((IsInFamily(x,Chrysomelidae) & BelongsToFamily(Chrysomelidae)) -> -IsFleaBeetle(x))", "prediction": ["-exists x.(FleaBeetle(x) & WithinChlysomelidae(x))", "all x.(FlyBeetle(x) -> -exists y.(Chrysomolidae(y) & Within(y,x)))", "Es gibt keine FleaBeetles(s) -> WithinChrysomelidaeFamily(s))", "-exists x.(FleaBeetle(x) & WithinChrysomelidaeFamily(x))", "-exists x.(FleaBeetle(x) & WithinChrysomelidaeFamily(x))", "-exists x.(FleaBeetle(x) & WithinChrysomeliadae(x))", "-exists x.(FlyBeetle(x))", "-exists x.(FlyBeetle(x) & -InChrysosomolidaeFamily(x))", "-HinterTheCrysomalidaeFamily(Crystalidae)", "-exists x.(Skysomelidae(x) & FleaBeetle(x))", "-exists x.(FlyBeetle(x) & WithinChrysomelidaeFamily(x))", "Currently there are no flea beetles within Chrysomelidae.", "-FlyBeetlesinChrysomelidae(y)", "-exists x.(FleaBeetle(x) & WithinChrysomelidae(x))", "currently, we uvre with notwithstanding the fact that all x.(FleaBeetle(x) -> -exists inChrysomelidae(x))", "There are no flea Beetles WithinChrysomelidae-family(x)"]}
{"id": "folio_train_1434", "nl": "Carrozzeria Colli is a Milanese coachbuilder company that was established by Giuseppe Colli in 1931.", "fol": "(IsMilaneseCoachbuilder(Carrozzeriacolli) & IsCompany(Carrozzeriacolli) & EstablishedByPerson(Carrozzeriacolli,Giuseppecolli) & EstablishedInYear(Carrozzeriacolli,Y1901))", "prediction": ["all x.(CarrozzeriaColli(x) -> (MilaneseCoachbuilderCompany(x) & EstablishedByGiuseppeColliIn(x,1931)))", "all x.(Carroli(x) & MilaneseCamerabuilderCompany(x) & EstablishedByGiuseppeColli(x) & EstablishedIn1931(x))", "all x.(Carroli(x) -> (MileinseCoachbuilderCompany(x) & EstablishedByGiuseppeColliIn1931(x)))", "all x.(CarrozzeriaColli(x) -> (Cabinetbuilder(x) & Milanese(x) & EstablishedBy(x,GiuseppeColli) & EstablishedBy(x,1961)))", "all x.(CarrolozzeriaColli(x) -> (CastbuilderCompany(x) & Milanese(x) & EstablishedByGiuseppeColliIn1931(x)))", "all x.(CarrozzeriaColli(x) -> (MilaneseCoachbuilderCompany(x) & EstablishedByGiuseppeColliIn1931(x)))", "all x.(CarroliInCabins(x) -> (MilaneseCabinetbuilderCompany(x) & EstablishedByGiuseppeLelli(x) & EstablishedByGiuseppeLolli(x)))", "all x.(CarroczzeriaColli(x) -> (MaintaneseCoachbuilderCompany(x) & EstablishedByGiuseppeColli(x) & IncorporatedIn1931(x)))", "all x.(CarrozzeriaColli(x) -> (ManitobaCoachbuilderCompany(x) & EstablishedByGiuseppeColliIn1931(x)))", "all x.(CarrozzeriaColli(x) -> (MarneseCoachbuilderCompany(x) & Gulio Colli(x) & Established(x,1931)))", "all x y.((CarroczzeriaColi(x) & MilaneseCoachbuilderCompany(y)) -> EstablishedByGiuseppeColli(x,y))", "all x.(CartozzeriaColli(x) -> (MaceneseCoachbuilderCompany(x) & EstablishedByGiuseppeColli(x) & EstablishedIn1931(x)))", "all x.(CarrozzeriaColli(x) -> (ManzaneseCoachbuilderCompany(x) & EstablishedByGiuseppeColliIn1931(x)))", "all x.(CameraCorelli(x) -> (MilaneseCoachbuilderCompany(x) & EstablishedBy(x,1931)))", "all x y z.((CoverbuilderCompany(x) & CoachbuilderCompany(y) & CoachbuilderCompany(z) & EstablishedBy(y,z)) -> CarrozzeriaColli(x))", "all x.(CarrozzeriaColli(x) -> (MilaneseCoachbuilderCompany(x) & EstablishedByGiuseppeColli(x) & EstablishedIn(x,1931)))"]}
{"id": "folio_train_1435", "nl": "Carrozzeria Colli is a company that specialized in using aluminum.", "fol": "SpecializesIn(Carrozzeriacolli,Usingaluminum)", "prediction": ["all x.(Carrolini(x) -> SpecializedInUsingAluminum(x))", "all x.(CarrotzeriaColli(x) -> (SpezializedInAluminum(x) & UsedAndMade(x)))", "all x.(CarrozzeriaColli(x) -> SpecializedInUsingAluminum(x))", "all x.(CarrolzzeriaColi(x) -> SpecializesInAluminum(x))", "all x.(CarrolozzeriaColli(x) -> (SecretiveIn(x,Aluminum) & SpecializedIn(x,Aluminum)))", "all x.(CrocalieraColli(x) -> (specializedInAluminum(x) & UsedAluminum(x)))", "all x.(CarrolezeriaColli(x) -> SpecializedInAluminumUsement(x))", "all x.(CarrolozzeriaColli(x) -> (SpecializedInAluminum(x) & UsesAluminum(x)))", "all x.(CarrolzeriaColli(x) -> (Company(x) & SpecializedInAluminum(x)))", "all x.(CarrolozzeriaColli(x) -> SpecializedInAluminum(x))", "all x.(CarroceneriaColli(x) -> SpecializedInAluminum(x))", "all x.((Company(x) & SpecializedInAluminum(x)) -> CarrozzeriaColi(x))", "all x.(CarroczzeriaColli(x) -> (SpezializedInAlloys(x) & UsesAluminum(x)))", "all x.(CarrocaliereColli(x) -> SpecializedInAluminum(x))", "all x.(CarroleziaColli(x) -> SpecializedInAluminum(x))", "all x.(CarrozzeriaColli(x) -> (specializedInAluminum(x) & UsesAluminum(x)))"]}
{"id": "folio_train_1436", "nl": "The first automobiles built by Carrozzeria Colli were racing cars.", "fol": "all x.(FirstAutomobilesByCompany(x,Carrozzeriacolli) -> IsRacingCar(x))", "prediction": ["all x.((Automobile(x) & ColliCar(x)) -> RaceCar(x))", "all x.(CarsozzeriaColli(x) -> RCCar(x))", "all x y z.((CarrolazzieraColli(x) & Auto(y) & (Car(z) | Object(y))) -> RacerCar(y))", "all x.((Carrolozoiri(x) & BuiltBy(x,(CarrolozzeriaColli) & RacingCar(x))) -> BuiltBy(x))", "all x.((Automobile(x) & BuiltByCarrosseriaColli(x)) -> RacingCar(x))", "all x.((Automobile(x) & CarrozzeriaColli(x)) -> RaceCar(x))", "all x.((CarrozzeriaColli(x) & BuiltBy(x,)) -> RacingCar(x))", "all x.((Automobile(x) & CarrozzeriaColli(x)) -> RacingCar(x))", "all x.((Automobile(x) & CarrozzeriaColli(x)) -> RaceCar(x))", "all x y.((Automobile(x) & CarrozzeriaColli(y)) -> RacingCar(x))", "all x y.((CarrosseriaColli(x) & Automobile(y) & BuiltByIncarnego(x,y)) -> RaceCar(x))", "all x.((CarrolisteriaColli(x) & RaceCar(x)) -> Automobile(x))", "all x y.((CarrozzeriaColli(x) & Automobile(y)) -> RacingCar(y))", "all x.((CarrozzeriaColli(x) & UsedForRacingCars(x)) -> FirstAutomobile(x))", "all x.(CarrolisteriaColli(x) -> RaceCar(x))", "all x.((Automobile(x) & Carrozzeria(x)) -> RacingCar(x))"]}
{"id": "folio_train_1437", "nl": "Some racing cars built by Carrozzeria Colli used Fiat 1100 mechanicals and chasis.", "fol": "exists x.(IsRacingCar(x) & BuiltByCompany(x,Carrozzeriacolli) & UsesComponents(x,Fiat110mechanicals) & UsesComponents(x,Chasis))", "prediction": ["exists x.(Racecar(x) & CarrozzeriaColli(x) & Used(x,Fiat,Mechanicals,Chasis))", "exists x.(RacingCar(x) & BuiltByCarrozzeriaColli(x) & UsesFiatMachines(x) & UsesChassis(x))", "exists x.(RainingCar(x) & CarrozzeriaColliMakes(x) & UsesFiatMechanicals(x) & UsesChassis(x))", "exists x.(RacingCar(x) & BuiltByCarrolozzeriaColli(x) & UsedFiat(x,FiatMechanics) & UsedChassis(x,FiatPurchase))", "exists x y.(RacingCar(x) & CarrozzeriaColli(y) & BuiltBy(x,y) & (UsesFiat(x,y) & Mechanicals(y) | UsesChassis(x,y)))", "all x y.((Car(x) & Car(y) & CarrozzeriaColli(z)) -> (UsedFiatImperial(x,y) & UsedChasis(y)))", "exists x.(RacingCar(x) & Car(x) & BuiltByCarrosseriaColli(x) & Fiat1100MechanicalsAndChassis(x))", "exists x.(RacingCar(x) & BuiltByCarroszeriaColli(x) & UsesFiat1100Mechanicals(x) & UsesChasis(x))", "exists x.(ProofCar(x) & BuiltByCarrozzeriaColli(x) & UsesFiat1100Mechanicals(x) & UsesChassis(x))", "exists x.(RacingCar(x) & BuiltByCarroszzeriaColli(x) & UsesFiat(x,1501) & UsesChasis(x,1501))", "exists x y.(RacingCar(x) & Car(y) & Car(y) & BuiltByCarrolotti(x,y) & Fiat(x,y) & MechanicalsAndChasis(x,y))", "exists x.(RacingCar(x) & BuiltByCarrolzzeriaColi(x) & UsesFiat1100MechanicalsAndChassis(x))", "exists x.(Racecar(x) & BuiltByCarrozzeriaColli(x) & UsedFiat1100Mechanicals(x) & UsedChassis(x))", "exists x y z.(RunwayCar(x) & CarrozzeriaColli(x) & UsedFiat1100Mechanics(y,z) & HasChasis(z))", "exists x.(RacingCar(x) & BuiltBy(x,CarrozzeriaColli) & UsesFiat1100Mechanicals(x) & HasChamsis(x))", "exists x.(RacingCar(x) & BuiltByCarrosseria(x) & Fiat(x) & usesMechanicals(x) & UsesChassis(x))"]}
{"id": "folio_train_1438", "nl": "Carrozzeria Colli worked for airforces.", "fol": "exists x.(IsAirforce(x) & WorkedForEntity(Carrozzeriacolli,x))", "prediction": ["all x.(RosazzeriaColli(x) -> WorkedForAirforces(x))", "all x y.((CarrotzeriaColli(x) & Airforce(y)) -> WorkedFor(x,y))", "all x.(CarrocazineColli(x) -> WorksForAirforces(x))", "all x.(CarrozzeriaColli(x) -> WorkedForAirforces(x))", "all x.(Carrolozzeria(x) -> WorksForAirforces(x))", "all x.(CarrolozzeriaColli(x) -> WorkedForAirforces(x))", "all xc y.((CarrosseriaColli(x) & Airforce(y)) -> WorksFor(x,y))", "all x.(CarrolozzeriaColli(x) -> workedForAirforces(x))", "all x y.((CarrolozzeriaColli(x) & Airforce(y)) -> WorkedFor(x,y))", "all x.((CarrolozzeriaColli(x) & Airforce(u)) -> WorksFor(x,u,u))", "all x y.((Carrotzzeria(x) & Airforce(y)) -> WorkedFor(x,y))", "all x.(CarrolozzeriaColli(x) -> WorksForAirforces(x))", "all x.(CarrolozzeriaColli(x) -> ForAirforces(x))", "all x.(CarrozzeriaColli(x) -> WorkedForAirforces(x))", "all x y.((CarrotzeriaColli(x) & Airforce(y)) -> WorkedFor(x,y))", "all x y.((CarrolozzeriaColli(x) & Airforce(y)) -> WorkedFor(x,y))"]}
{"id": "folio_train_1439", "nl": "Carrozzeria Colli made car bodies. ", "fol": "MadeCarBodies(Carrozzeriacolli,Carbodies)", "prediction": ["all x y.((Carrozzeria(x) & Colli(y)) -> MadeCarBody(x,y))", "all x.(CarrostoriaColli(x) -> MadeCarBody(x))", "all x y z.((CarroxeriaColli(x) & CarBody(y) & Car(z)) -> Made(x,y,z))", "all x y.((CarrolozzeriaColi(x) & CarBody(y)) -> Made(x,y))", "all x.(CarrosseriaColli(x) -> MadeCarBody(x))", "all x.(CarrotzzeriaColli(x) -> MadeCarBody(x))", "All x y.((Carroceria(x) & Colli(y)) -> MadeCarBodies(x,y))", "all x.(CarrocerioColli(x) -> MadeCarBodies(x))", "all x.(CarroszzeriaColli(x) -> MadeCarBody(x))", "all x.(CarolezzaColli(x) -> MadeCarBodies(x))", "all x.(CarrolozzeriaColli(x) -> MadeCarBody(x))", "all x.(CarrozzeriaColi(x) -> MadeCarBody(x))", "all x.(CarrocettaCOLLI (Cavazzeria(x) & CarBody(x)) -> MadeBy(x,Cavazzeria))", "all x y z.((CarrolozzeriaColli(x) & CarBody(y) & Car(z)) -> Makes(x,y,z))", "all x y.((CarrolozzaLollis(x) & CarBody(y)) -> MadeBy(x,y))", "all x.(CarrozzeriaColli(x) -> MadeCarBody(x))"]}
{"id": "folio_train_1440", "nl": "Carrozzeria Colli made car bodies in 1931.", "fol": "(MadeCarBodies(Carrozzeriacolli,Carbodies) & MadeIn(Carrozzeriacolli,1931))", "prediction": ["all x y z.((Carroceria(x) & Colli(y) & CarBody(z)) -> MadeIn1931(x,y,z))", "all x.(Carroceri(x) -> MadeCarBody(x,1931))", "all x.(CarroczeriaCole(x) -> MadeCarBodies(x,1931))", "all x.(CarrozzeriaColli(x) -> (MadeCarBody(x,1931) & CarBrasses(x,1931)))", "all x.(CarrolozzeriaColli(x) -> MadeCarBody(x,1931))", "All x.(CarrolozzeriaColli(x) -> MadeCarBodyIn1931(x))", "all x.(CarroszzeriaColi(x) -> AutoBody (MadeIn1931)))", "all c.(CrocelloColli(c) -> MadeCarBody(c,1931))", "all x.(CarrocerioColli(x) -> MadeCarBody(x,1931))", "all x y.((CarrolozzeriaColli(x) & CarBody(y)) -> MadeIn(x,y))", "all x y.((CarrotteriaColli(x) & CarBody(y)) -> MadeIn(x,y,1931))", "all x.(CarroceriaColli(x) -> MadeCarBodies(x,1931))", "all x.(CarrozzeriaColi(x) -> MadeCarBody(x,1931))", "all x.(CarroceriaJollie(x) -> MadeInNature(x,1931))", "all x y.((CarrosseriaColli(x) & Car(y)) -> MadeIn1931(x,y))", "all x y z.((CarrocozzeriaColli(x) & CarBody(y) & CarBody(z)) -> MadeIn1931(x,y,z))"]}
{"id": "folio_train_1441", "nl": "Carrozzeria Colli built airplanes during World War II.", "fol": "exists x.(Airplane(x) & BuiltByCompany(Carrozzeriacolli,x) & During(x,WorldWarII))", "prediction": ["all x y.((CarrolozzeriaColli(x) & WorldWarII(y)) -> BuiltAirplanes(x,y))", "During the WorldWarII, Carrossoneria Colli built airplanes.", "all x.((CrocarderiaColli(x) & WorldWarII(x)) -> BuiltAirplane(x))", "all x y.((CarrotzeriaColli(x) & WorldWarII(y)) -> BuiltAirplanes(x,y))", "all x.(CarrocezzeriaColli(x) -> BuiltAirplanesThroughoutWorldWarII(x))", "all x y.((Carroceri(x) & CarrozzeriaColi(y)) -> BuiltAirplanes(x,y))", "all x.(CarrolozzeriaComlli(x) -> BuiltAtomsDuringWWW2.", "all x y z.((CarrozzeriaColli(x) & Airplane(y) & WorldWarKit(z)) -> Built(x,y,z))", "all x y z.((CarrocenzaColli(x) & Airplane(y) & WorldWar II(z)) -> BuiltBy(x,y,z))", "all x.(CarrolozzeriaColi(x) -> (BuiltAirplanesDuringWorldWarII) & WorldWarII(x)))", "all x.(CarrocelloColi(x) -> BuiltAirplanesDuringWorldWarII(x))", "all x.(CarrolozzeriaColi(x) -> BuiltAirplanes(x))", "all x y z.((CarrolozzeriaColli(x) & Airplane(y) & WorldWarII(z)) -> BuiltDuring(x,y,z))", "(builtDuringWorldWarII(CarroczeriaColi) & WorldWarII(CarroczeriaColi))", "all x.(CarrolozzeriaColi(x) -> BuiltAirplanesDuringWorldWarII(x,w))", "all x.((CarrolozzeriaColi(x) & WorldWarII(x)) -> BuiltAirplanes(x))"]}
{"id": "folio_train_1442", "nl": "Giuseppe Colli established a company that made car bodies.", "fol": "exists x.(IsCompany(x) & EstablishedByPerson(x,Giuseppecolli) & MadeCarBodies(x,Carbodies))", "prediction": ["all x.(GiuseppeColli(x) -> Inc.,MadeCarBodies(x))", "all x.(GiuseppeColli(x) -> EstablishedCompany(x))", "_(EstablishedCompany(GiuseppeColli) & MadeCarBody(e))", "all x y z.((Giuseppe Colli(x) & CarBody(y) & CarBody(z) & MadeBy(x,y,z)) -> (IncorporatedBy(x,y) & From(x,y))))", "all x.((GiuseppeColli(x) & Company(x)) -> MadeCarBody(x))", "(EstablishedCompany(GiuseppeColli,CarBodyMaker) & Giuseppe(Colli,CarBodyMaker))", "Giuseppe Colli established a company that made cars bodies.", "all x.((GiuseppeColli(x) & MadeCarBodys(x)) -> EstablishedCompany(x))", "all x.(GiuseppeColli(x) -> MadeCarBodys(x))", "all x y.((Giuseppe Colli(x) & Company(y)) -> MadeCarBodies(x,y))", "all x y.((Giuseppe Colli(x) & Company(y)) -> MadeCarBodies(x,y))", "all x y.((Giuseppe Colli(x) & Company(y)) -> MadeCarBody(x,y))", "Giuseppe Colli established a carbodymaking company in 2000.", "all x.((Giuseppe Colli(x) & Company(x)) -> MadeCarBodies(x))", "Giuseppe Colli established a company that made car bodies.", "all x.(GiuseppeColli(x) -> MadeCarBodies(x))"]}
{"id": "folio_train_1443", "nl": "Giuseppe Colli established a Milanese coachbuilder company that specialized in using aluminum.", "fol": "exists x.(IsMilaneseCoachbuilder(x) & IsCompany(x) & EstablishedByPerson(x,Giuseppecolli) & SpecializesIn(x,Usingaluminum))", "prediction": ["Giuseppe Colli gr\u00fcnded a Milanese coachbuilder company that was specialized in aluminum use.", "all x.(Celle(x) -> [LamentableCoachbuilderCompany(x) & SpecializedInAluminum(x)))", "all x y.((Giuseppe Colli(x) & MilaneseCoachbuilderCompany(y)) -> UtilizesAluminum(x,y))", "all x.((GiuseppeColli(x) & MilaneseCoachbuilderCompany(x) & SpecializedInAluminum(x)) -> Incorporated(x))", "all x.((ChairbuilderCompany(x) & Milanese(x) & specializesInAluminum(x)) -> Giuseppe Colli(x))", "all x.((Giuseppe Colli(x) & MilaneseCoachbuilder(x) & SpecializesInAluminum(x)) -> Fonded(x,Milan,Clubbuilder))", "all x.((Guiuseppe Colli(x) & MilaneseCoachbuilderCompany(x) & SpecializesInAluminum(x)) -> Established(x))", "all x y.((Giuseppe Colli,Milan) & Company(y)) -> SpecializedInWrenchCostume(y,Aluminum))", "all x y.((SilentCoachbuilderCompany(x) & Milanese(y) & Giuseppe Colli(x)) -> SpecializedInAluminum(x,y))", "all x y.((GiuseppeColli(x) & MilaneseCoachbuilderCompany(y)) -> SpecializedInAluminum(x,y))", "all x.((Giuseppe Colli(x) & MilaneseCoachbuilderCompany(x)) -> UtilizingAluminum(x))", "all x y z.((Calli(x) & MilaneseCauterbuilderCompany(y) & Aluminum(z) & SpecializedIn(x,y,z)) -> (LatinusaCoachbuilderCompany(x) & SpecializedIn(x,y,z)))", "all x y in z.((Giuseppe Colli(x) & MilaneseCoachbuilder(y)) -> SpecializedInAluminum(z))", "all x y.((Giuseppe Colli(x) & MilaneseCoachbuilderCompany(y)) -> SpecializedInUsingAluminum(x,y))", "all x.((GiuseppeColli(x) & MilaneseCoachbuilderCompany(x) & SpecializedInAluminum(x)) -> Established(x))", "Founded by Giuseppe Colli (Giuseppe Colli,Milan CoachbuilderCompany) & SpecializedInAluminum(Colli,Aluminum))"]}
{"id": "folio_train_1444", "nl": "The first automobiles built by Carrozzeria Colli were built using Fiat 1100 mechanicals and chasis.", "fol": "all x.((FirstAutomobilesByCompany(x,Carrozzeriacolli) -> BuiltUsing(x,Fiat1100mechanicals)) & BuiltUsing(x,Chasis))", "prediction": ["all x.((Automobile(x) & BuiltByCarrolozzeriaColli(x)) -> BuiltUseFiat1020MechanicalsAndChassis(x))", "all x y.((CarrozzeriaColli(x) & CarrozzeriaColli(y)) -> (BuildedOnFiat1100Mechanicals(x,y) & BuiltOnChassis(x,y)))", "all x y.((CarrozzeriaColliFactory(x) & CarrozzeriaCollis(y)) -> (BuiltWith(x,Fiat 1100 Mechanicals) & BuiltWith(x,Chassis)))", "all x y z.((CarrolizaColli(x) & Fiat(y) & Mechanicals(z) & Casis(c)) -> BuiltWithFiat(x,y,z))", "all x.((CarrolizettaColli(x) & Fiat1100Mechanicals(x) & Chasis(x)) -> BuiltByColli(x))", "all x y z.((Automobile(x) & CarrozzeriaColli(y) & FiatInc.(z) & Mechanicals(z) & Chasis(y)) -> BuiltBy(x,y,z))", "all x.((CarrotzeriaCollis(x) & Fiat1000 Mechanicals(x) & Chasis(x)) -> FirstAutomobile(x))", "all x.((Automobile(x) & BuiltByCarrozzeriaColli(x)) -> (FiatMachines(x,x) & Chasis(x,x)))", "all x.(Carrolotti(x) -> (BoardedByCarrolotti(x) & BuildingUsingFiatMechanicals(x) & BuildingUsingChassis(x)))", "all x y.((Automobile(x) & CarrozeriaColli(y)) -> (BuildnWithFiat(x,y) & BuiltWithChassis(x,y)))", "all x y.((CarrozzeriaColli(x) & CarrozzeriaElements(y)) -> (Fiat1100Mechanicals(x) & Chasis(x)))", "all x.((Automobile(x) & BuiltByCarroloniaColli(x)) -> (BuiltUsingFiatMachines(x,Fiat1) & BuiltUsingChasis(x,Fiat)))", "all x.((Automobile(x) & CarrozzeriaColli(y)) -> BuiltWith(x,Fiat1,100) & -Chassis(x))", "all x y.((Automobile(x) & Carroceri(y)) -> (CarrosseriaColli(x,y) & Fiat(y) & Mechanicals(y) & Chasis(y)))", "all x.((Automobile(x) & BuiltByCarrolzzaColli(x)) -> (FiatMachines(x,100) & chasis(x,100)))", "all x y.((Automobile(x) & CarrozzeriaColli(y)) -> BuiltWithFiatFinishingsAndChasis(x,y))"]}
{"id": "folio_train_1445", "nl": "John will go to the cinema if and only if Jack goes to the cinema today.", "fol": "(AttendCinema(John,Today) <-> AttendCinema(Jack,Today))", "prediction": ["((Jack (Jack) & Cinema(Jack)) | -Jack-(Jack)))", "all x y.((Jack(x) & Cinema(y) & GoesTo(x,y)) -> WillGoTo(x,y))", "all x.((JackGoesToCinema(x) & Only(Jack)) -> WillGoToCinema(x))", "(all x.(Jack(x) -> GoToAudio(x)))", "all x.((Jack(x) & Cinema(x) & GoesTo(x,y)) -> GoesTo(x,y))", "All x.((JohnWillGoToCinema(x) & -(JackWillGoToCinema(x,2017))) -> GoToCinema(x))", "all x.((Jack(x) & GoesToCinema(x)) -> (John(x) | Jack(x)))", "all x y z.((John(x) & Cinema(y) & Cinema(z) & Jacks(x,y)) -> (GoesTo(x,z) & Today(y)))", "all x y.((John(x) & Jack(y) & GoesToCinema(x,y)) -> Cinema(x,Y))", "all x.((John(x) &/OrJack(x)) -> Movie(x))", "all x.((John(x) | Jack(x)) -> WillGoToCinema(x))", "all x y.((Jack(x) & Movie(y)) -> (IsToCinema(x,y) & IsToCinema(x,y)))", "all x.(Cinema(x) & (And Only(Jackie) & GoesTo(x,cinema)) | (Jackie(Jackie) & GoesTo(x,cinema))))", "(GoesToCinema(John,Chicago) | (-Jack-GoesToCinema(Jack) & Today))))", "(JackGoesToCinema(John,Jack) & (Jack,Jack) -> GoesToCinema(Jack)))", "all x.((Jack(x) & Only(x)) -> GoToCinema(x))"]}
{"id": "folio_train_1446", "nl": "Jack will go to the cinema if and only if Iron Man is on and the weather is not bad today.", "fol": "(AttendCinema(Jack,Today) <-> (IsMoviePlaying(Ironman) & -HasBadWeather(Today)))", "prediction": ["all x.((Jack(x) & IronManOn(x) & -BadWeather(x)) -> Cinema(x))", "all x.((IronMan(x) & On(x) & -BadWeather(x)) -> GoesToCinema(x))", "all x.((Jack(x) & IronManOn(x) & -BadWeather(x)) -> GoesToCinema(x))", "all x.((Jack(x) & IronManOn(x) & -BadWeather(x)) -> GoingToMovie(x))", "all x y z.((Jack(x) & Cinema(y) & IronManOnAndUnderWait(z) & -BadWeather(z)) -> GoesTo(x,y,z))", "all x y.((Jack(x) & IronMan(y) & On(y) & NoBadWeather(y)) -> WillGoToCinema(x))", "all x y.((IronMan(x) & IronMan(y) & -BadWeather(y)) -> WillGoToCinema(x,y))", "all x.((Jack(x) & IronManOff(x) & -BadWeather(x)) -> Cinema(x))", "all x y.((Jack(x) & IronManOn(y) & -BadWeather(y)) -> GoesToCinema(x,y))", "all x y.((Jack(x) & IronManOn(x) & -BadWeather(y)) -> WillGoToCinema(x,y))", "all x.((IronManOn(x) & -BadWeather(x)) -> WillGoToCinema(x))", "all x.((EarlyIronOn(x) & -BadWeather(x)) -> WillGoToCinema(x))", "all x y.((Batman(x) & IronManOn(y) & -BadWeatherToday(y)) -> WillGoToCinema(x,y))", "all x.((Jeffrey(x) & IronManOn(x) & -BadWeather(x)) -> WillGoToCinema(x))", "all x.(((LimitsIronMan(x) & IronManOn(x) & -BadWeather(x)) -> WillGoToCinema(x))", "all x.((Jack(x) & IronManOn(x) & -BadWeather(x)) -> OnCinema(x))"]}
{"id": "folio_train_1447", "nl": "Some days in March have bad weather.", "fol": "exists x.(IsMonth(March) -> HasBadWeather(x))", "prediction": ["exists x y.(Day(x) & March(y) & BadWeather(x,y))", "exists x.(MarsDay(x) & BadWeather(x))", "exists x.(MarsDay(x) & BadWeather(x))", "exists x.(CausesBadWeather(x) & Day(x) & InMarch(x))", "exists x.(Day(x,March) & BadWeather(x))", "exists x.(Day(x,March) & BadWeather(x))", "exists x.(MarsDay(x) & BadWeather(x))", "exists x.(MarchDay(x) & BadWeather(x))", "exists x.(Day(x) & BadWeather(x))", "exists x.(Day(x) & March(x) & BadWeather(x))", "exists x.(MarchDay(x) & BadWeather(x))", "exists x.(MarchDay(x) & BadWeather(x))", "exists x.(MarchDay(x) & BadWeather(x))", "exists x.(MarchDay(x) & BadWeather(x))", "exists x.(MarchDay(x) & BadWeather(x))", "exists x.(MarsDay(x) & BadWeather(x))"]}
{"id": "folio_train_1448", "nl": "Iron man is on.", "fol": "IsMoviePlaying(Ironman)", "prediction": ["IronManOn.", "IronManOn.", "IronManOn.", "is on.", "IronManOn.", "(All x.Alias(x) -> IronMan(x))", "(IronMan(x) -> On(x))", "IronMan(x)", "IronManOn.", "IronManIsOn.", "IronManArena(ironman)", "IronManOn.", "IronManIsOn(x)", "all x.(IronMan(x) -> On(x))", "IronMan(x)", "All x.(IronMan(x) -> On(x))"]}
{"id": "folio_train_1449", "nl": "It's March now.", "fol": "IsMonth(March)", "prediction": ["M\u00e4rz now!", "(ComesMars(Circle) & March(Circle))", "-MarsNow(*)", "Everywhere((March) & ThisCourse(x))", "It's March.", "Now,March(x)", "(Mirror(m) & March(m))", "ComesMars(x)", "All x.(Mars(x) -> Added to Join(x))", "Posted on March.", "March now.", "is MarchNow.", "All x.(Mars(x) ->.", "(MarchRun(IsMorning))", "all x.(March(x) -> Now(x))", "AvailableRightSide(March)"]}
{"id": "folio_train_1450", "nl": "John will go to the cinema.", "fol": "AttendCinema(John,Today)", "prediction": ["John will go to the cinema.", "all x.(John(x) -> WillGoToCinema(x))", "John will go to the cinema.", "John will go to the cinema.", "all x.(John(x) -> ToCinema(y))", "John will never go to the cinema.", "-GoesToCinema(John)", "\u201cJeff\u201d wird sich als Kino-Gotter engagieren.", "all x.(Jon(x) -> SeeksCinema(x))", "John will go to the cinema.", "John goes to Cinema.", "(GoesToCinema(John))", "All x.(John(x) -> GoesToCinema(x))", "-GoToCinema(John)", "John will go to the cinema.", "all x.((John(x) & Cinema(y)) -> GoesTo(x,y))"]}
{"id": "folio_train_1451", "nl": "The weather is good today.", "fol": "-HasBadWeather(Today)", "prediction": ["All x.(Weather(x) -> Good(x))", "(GoodWeather(am) & Today(am))", "weetime(x) & GoodToday(x))", "Die Wettersituation ist gut.", "all x.(Weather(x) -> Good(x))", "(-Satisfied(s) | Stable(s)))", "-(Weather(x) & Good(x))", "(GoodWeather(x) & Today(x))", "all x.(Weather(x) -> Good(x))", "Wet(x) & GoodWeather(x))", "-(GoodWeather(x) & Today(x)))", "(GoodWeather(x) -> Today(x))", "(GoodWeather(Mountain(Mountain) & Now(Mountain))", "(GoodWeather(x) & Today(x))", "the weather is good today.", "(GoodWeather(day,day))"]}
{"id": "folio_train_1452", "nl": "Quiksilver sells sportswear, clothing, footwear, and accessories.", "fol": "all x.((SellsByQuiksilver(x) -> IsSportswear(x)) | IsClothing(x) | IsFootwear(x) | IsAccessory(x))", "prediction": ["all x.(Quicksilver(x) -> (SellsSportswear(x) & SellsClothing(x) & SellsFootwear(x) & SellsAccessories(x)))", "all x.(Ciksilver(x) -> (SellsSportswear(x) & SellsClothing(x) & SellsFootwear(x) & SellsAccessories(x)))", "all x.(Quicksilver(x) -> (SellsSportswear(x) & SellsClothing(x) & SellsFootwear(x) & SellsAccessories(x)))", "all x.(Quiksilver(x) -> (SellsSportswear(x) & SellsClothing(x) & SellsFootwear(x) & SellsAccessories(x)))", "all x y.((Quiksilver(x) & Sportwear(y)) -> (Shops(x,y) & Sells(x,y)))", "all x.(Quiksilver(x) -> (SellsSportswear(x) & SellsClothing(x) & SellsFootwear(x) & SellsAccessories(x)))", "Contains a curated list of suppliers of sportswear and accessories.", "all x.(Quicksilver(x) -> (SellsSportswear(x) & SellsClothing(x) & SellsFootwear(x) & SellsAccessories(x)))", "all x.(QuikSilver(x) -> (SellsSportswear(x) | SellsClothing(x) | SellsFootwear(x) | SellsAccessories(x)))", "all x.(Quicksilver(x) -> (SellsSportswear(x) & SellsClothing(x) & SellsFootwear(x) & SellsAccessories(x)))", "all x.(Quicksilver(x) -> (SellsSportswear(x) & SellsClothing(x) & SellsFootwear(x) & SellsAccessories(x)))", "all x.(Quicksilver(x) -> (SellsSportswear(x) | SellsClothing(x) | SellsFootwear(x) | SellsAccessories(x)))", "all x.(Quicksilver(x) -> (SellsSportswear(x) & SellsClothing(x) & SellsFootwear(x) & SellsAccessories(x)))", "all x.(Quicksilver(x) -> (SellsSportswear(x) & SellsClothing(x) & SellsFootwear(x) & SellsAccessories(x)))", "all x.(Quicksilver(x) -> (SellsSportswear(x) & SellsClothing(x) & SellsFootwear(x) & SellsAccessories(x)))", "all x.(Quicksilver(x) -> (SellsSportswear(x) & SellsClothing(x) & SellsFootwear(x) & SellsAccessories(x)))"]}
{"id": "folio_train_1453", "nl": "Flannels are a type of clothing.", "fol": "IsClothing(Flannel)", "prediction": ["all x.(Flannel(x) -> Clothing(x))", "all x.(Flannel(x) -> Clothing(x))", "all x y.((Flannel(x) & ClothingType(y)) -> Clothing(x,y))", "all x.(Flannel(x) -> Clothes(x))", "all x y.((Flannel(x) & Clothes(y)) -> Clothing(x))", "all x y.((Flannel(x) & Clothing(y)) -> MadeOf(x,y))", "all x.(Flannel(x) -> Clothing(x))", "all x.(Flannel(x) -> Clothing(x))", "all x.(Flannel(x) -> Clothing(x))", "all x.(Floren(x) -> Clothing(x))", "all x y z.((Flannels(x) & Clothing(y) & Clothes(z)) -> Clothing(x,y,z))", "all x.(Flannel(x) -> Clothing(x))", "all x.(Flannel(x) -> Clothing(x))", "all x.(Flonkel(x) -> Clothing(x))", "all x.(Flannels(x) -> Clothing(x))", "all x.(Flannel(x) -> Clothing(x))"]}
{"id": "folio_train_1454", "nl": "Joe owns an item fron Quiksilver.", "fol": "exists x.(SellsByQuiksilver(x) -> OwnsByJoe(x))", "prediction": ["all x y.((Joe(x) & Item(y) & KnownForItem(y,x)) -> Owns(x,y))", "(BelongsTo(Joe) & Item(Joe)) & is fronQuicksilver(Joe))", "exists x.(Item(x) & Owns(x,fron) & Quiksilver(x))", "(OwnsItem(Joe,FronQuiksilver) -> Owns(Joe,FronQuiksilver))", "exists x.(Item(x) & Owns(x,Y))", "exists x.(Item(x) & JoeOwnsFronQuicksilver(x))", "exists x.(Item(x,FronQuicksilver) & InStore(x,Joe))", "(OwnsItem(JoelJones) & FronQuicksilver(Joe))", "(OwnsItem(Joe) & ItemFronQuiksilver(Joe))", "(OwnsItem(joe,x) & FrenchQuicksilver(joe,x))", "(All x.(Position(x) -> ForQuicksilver(x)))", "exists x.(Item(x,joe) & Items(x,Quicksilver))", "All x.(Item(x) -> OwnsFronQuicksilver(x))", "exists x.(Item(x) & Owns(x,fronQuicksilver))", "All x.((Joe(x) & Item(x,Item) & Quiksilver(x)) -> Owns(x,Item,Item))", "(OwnsItem(Joe) & Item(Joe))"]}
{"id": "folio_train_1455", "nl": "Quiksilver sells beer.", "fol": "exists x.(SellsByQuiksilver(x) & Beer(x))", "prediction": ["QuiksilverSellsBeer(x)", "all x.(Quicksilver(x) -> sellsBeer(x))", "the sale of beer.", "all x.(Quicksilver(x) -> SellsBeer(x))", "all x.(Quicksilver(x) -> SellsBeer(x))", "all x.(Quiksilver(x) -> SellsBeer(x))", "all x.(Quiksilver(x) -> Sells(x,Beer))", "all x.(Quiksilver(x) -> SellsBeer(x))", "all x.(PotzSilver(x) -> SellsBeer(x))", "all x.(Quicksilver(x) -> SellsBeer(x))", "all x.(Quishsilver(x) -> SellsBuys(x))", "all x.(Quicksilver(x) -> Sells(x,Beer))", "exists x.(Quicksilver(x) & SellsBeer(x))", "all x.((Quicksilver(x) & Beer(b)) -> Sells(x,b))", "all x y.((Quicksilver(x) & Beer(y)) -> Sells(x,y))", "all x.(Quicksilver(x) -> SellsBeer(x))"]}
{"id": "folio_train_1456", "nl": "Joe owns a flannel.", "fol": "OwnsByJoe(Flannel)", "prediction": ["(OwnsFlannel(Joe) -> OwnsFlannel(Joe))", "(OwnsFlannel(Joe) & Flanelle(Joe))", "exists x.(Flannel(x) & Owns(x,Joe))", "(OwnsFlannel(Joe))", "all x.(OwnsFlonkel(x) -> JoeOwns(x))", "all x.(Flannel(x) -> Owns(x,Joe))", "all x.(Position(x) -> Felanelle(x))", "all x.(Owns(Joe,Flannel) -> Owns(Joe,Flannel))", "all x.(Flannel(x) -> Owns(x,Joe))", "exists x.(Flannel(x) & JoeOwns(x,y))", "all x.(OwnsFlannel(x) -> JoeOwnsFlannel(x))", "exists x.(FlannelOwner(x) & JoeOwns(x,flannel))", "all x.(OwnsFlannel(x) -> JoeOwnsFlannel(x))", "all x.(HasFlonnel(x) -> OwnsFlannel(x))", "all x.(Joe(x) -> OwnsFlannel(x))", "exists x.(Flannel(x) & Owns(x,Joe,Flannel))"]}
{"id": "folio_train_1457", "nl": "Joe owns at least one a piece of sportswear, clothing, footwear, or accessory", "fol": "exists x.((IsSportswear(x) | IsClothing(x) | IsFootwear(x) | IsAccessory(x)) & OwnsByJoe(x))", "prediction": ["all x.(Owns(x,y) -> (Airline(x) | Sportswear(y) | Clothing(y) | Footwear(y) | Accessory(y)))", "all x.(OwnsAtLeastOne(Joe) -> (Soccerwear(x) | Clothing(x) | Footwear(x) | Accessory(x)))", "all x.(Owns(x,y) -> (Sportswear(x) | Clothing(x) | Footwear(x) | Accessory(x) | Accessories(y)))", "all x.(JoeyOwners(x,y) -> (OwnsSportwear(x) | OwnsClothing(x) | OwnsFootwear(x) | OwnsAccessories(x)))", "all x y.((Joe(x) & (Sportswear(y) | Clothing(y) | Footwear(y) | Accessory(y))) -> OwnsAtLeastOne(x,y))", "all x y.((Joe(x) & (SportswearPiece(y) | ClothingPiece(y) | ShoemakerPiece(y) | AccessoryPiece(y))) -> OwnsPieceOrAppliance(x,y))", "all x y z.((Joe(x) & (Sportswear(y) | Clothing(y) | Footwear(y) | Accessory(y))) -> Owns(x,y,z))", "all x.(OwnsAtLeastOne(x) -> (SoccerWord(x) | Clothing(x) | Footwear(x) | Accessory(x)))", "all x y.((Joe(x) & (Sportswear(y) | Clothing(y) | Footwear(y) | Accessory(y))) -> Owns(x,y))", "all x.((Eyes(x,y) & (Sportswear(y) | Clothing(y) | Footwear(y) | Accessory(y))) -> (Owns(x,y) & -Owns(x,z) & Owns(x,y)))", "all x y.((Careers(x) & (Sportswear(y) | Clothing(y) | Footwear(y) | Accessories(y)) & Owns(x,y)) -> exists z.(Owner(x,z) & (Sportswear(z) | Clothes(z) | Footwear(z) | Accessories(z) | Accessory(z)))))", "all x.(OwnsMojo(x) -> (OwnsSportswear(x) | OwnsClothing(x) | OwnsFootwear(x) | OwnsAppliance(x)))", "all x.(Owns(x,y) -> (Owns(y) & (Sportswear(y) | Clothing(y) | Footwear(y) | Accessory(y))))", "all x y.((Joe(x) & (Sportswear(y) | Clothing(y) | Footwear(y) | Accessories(y))) -> OwnsAtLeastOnePieceOf(x,y))", "all x y.((Joe(x) & (Sportswear(y) | Clothing(y) | Footwear(y) | Accessories(y))) -> Owns(x,y))", "all x y z.((Stealth(x) & (Sportswear(y) | Clothing(y) | Footwear(y) | Accessory(y)) & (BelongsTo(x,y) | Owns(x,z) | Owns(x,y))) -> Owns(x,y,z))"]}
{"id": "folio_train_1458", "nl": "No video games released by Nintendo support the PS4 platform.", "fol": "all x.(ReleasedByNintendo(x) -> -SupportsPS4Platform(x))", "prediction": ["-exists x.(VideoGame(x) & Nintendo(x) & ReleasedBy(x,PS4))", "-exists x.(VideoGame(x) & ReleasedByNintendo(x) & SupportsPlayStation(x,PS4))", "-exists x.(VideoGame(x) & NintendoReleased(x) & PS4PlatformSupport(x))", "-exists x.(VideoGame(x) & ReleasedByNintendo(x) & SupportsPs4Platform(x))", "-exists x.(VideoGame(x) & Nintendo(x) & ReleasedBy(x,PS4,PS2))", "-exists x.(VideoGame(x) & ReleasedByNintendo(x) & SupportsPoletMap(x,PS4)))", "-exists x.(VideoGame(x) & NintendoReleased(x,Y) & SupportsPS4(y))", "-exists x.(VideoGame(x) & ReleasedByNintendo(x) & Supports(y) & PS4Platform(y))", "-exists x.(VideoGame(x) & ReleasedByNintendo(x) & PS4OperationSupport(x))", "-exists x.(VideoGame(x) & ReleasedByNintendo(x) & Supports(x,PS4))", "Currently, there are 0 VideoGamesDeliveredByNintendo(3) & PS4(4) & -exists x.(Support(x) & ReleasedByNintendo(x)))", "-exists x.(VideoGame(x) & Nintendo(x) & ReleasedBy(x,Ps4))", "-exists x y.(VideoGame(x) & Nintendo(y) & ReleasedBy(x,y))", "-exists x.(VideoGame(x) & PublishedByNintendo(x) & SupportsPS4Platform(x))", "-exists x.(Game(x) & ReleasedByNintendo(x) & SupportsPs4(x))", "-exists x.(VideoGame(x) & Nintendo(y) & ReleasedBy(x,y))"]}
{"id": "folio_train_1459", "nl": "All video games in the Pokemon series are released by Nintendo. ", "fol": "all x.(InPokemonSeries(x) -> ReleasedByNintendo(x))", "prediction": ["all x.((VideoGame(x) & PokemonGame(x)) -> DevelopedByNintendo(x))", "all x y.((VideoGame(x) & PokemonSeries(y)) -> (ReleasedBy(x,y) & Nintendo(x)))", "all x.(Pokemon(x) -> PokemonRelease(x))", "all x.((VideoGame(x) & StarSignature(x)) -> ReleasedByNintendo(x))", "all x.(PokemonVideoGame(x) -> ReleasedByNintendo(x))", "all x.((VideoGame(x) & PokemonSeries(x)) -> ReleasedByNintendo(x))", "all x.((VideoGame(x) & PokemonSeries(x)) -> ReleasedByNintendo(x))", "all x.((VideoGame(x) & PokemonSeries(x)) -> ReleasedByNintendo(x))", "all x.((VideoGame(x) & PokemonSeries(x) & Nintendo(x)) -> ReleasedBy(x,y))", "all x.((VideoGame(x) & PokemonSequel(x)) -> ReleasedByNintendo(x))", "all x.(WatchWatch Pokemon(x) -> ReleasedByNintendo(x))", "all x.(VideoGame(x) -> ReleasedByNintendo(x))", "all x.((VideoGame(x) & PokemonSeries(x)) -> ReleasedByNintendo(x))", "all x.((VideoGame(x) & PokemonSeries(x)) -> ReleasedByNintendo(x))", "all x.((VideoGame(x) & PokemonSeries(x)) -> ReleasedByNintendo(x))", "all x.(PokenoysVideoGame(x) -> ReleasedByNintendo(x))"]}
{"id": "folio_train_1460", "nl": "All video games in the FIFA series support the PS4 platform. ", "fol": "all x.(InFIFASeries(x) -> SupportsPS4Platform(x))", "prediction": ["all x.((VideoGame(x) & FIFASeries(x)) -> SupportsPs4(x))", "all x.((VideoGame(x) & FIFASeries(x)) -> SupportsPS4(x))", "all x y.((VideoGame(x) & FIFASeries(x)) -> SupportsPs4Platform(x))", "all x y.((VideoGame(x) & FIFASeries(y) & PS4Platform(y)) -> Supports(x,y))", "all x.((VideoGame(x) & InSeries(x,y)) -> SupportsPS4Platform(x))", "all x.(VideoGame(x) -> SupportsPS4(x))", "all x.((VideoGame(x) & FIFASeries(x)) -> SupportsPs4Platform(x))", "all x.((VideoGame(x) & FIFASeries(x)) -> SupportsPS4Platform(x))", "all x.((VideoGame(x) & PlaysFuel(x)) -> SupportsPS4(x))", "all x.(VideoGame(x) -> SupportsPs4(x))", "the PS4 Platform supports all x.(VideoGame(x) -> InJokerSeries(x))", "all x.((VideoGame(x) & FIFASeries(x)) -> SupportsPs4Platform(x))", "all x y.((VideoGame(x) & X.(FavoriteSeries(x) & PS4(y)) & Supports(x,y)) -> Supports(x,y))", "all x.(VisualGame(x) -> SupportsPS4(x))", "all x.((VideoGame(x) & Playstyle(x,Football)) -> SupportsPS4(x))", "all x.((VideoGame(x) & InFutureSeries(x)) -> SupportsPS4Platform(x))"]}
{"id": "folio_train_1461", "nl": "All video games supporting users to simulate playing soccer games online are in the FIFA series.", "fol": "all x.(SupportsSoccerSimulation(x) -> InFIFASeries(x))", "prediction": ["all x.((VideoGame(x) & SupportsYoungTextbooks(x) & SimulatesPlayingSoccerGamesOnline(x)) -> FIFASeries(x))", "all x.((VideoGame(x) & SupportsSimulation(x) & UsesFreeSoccer(x)) -> FIFASeries(x))", "all x.((VideoGame(x) & SupportsSimulation(x,SoccerGames)) -> FIFASeries(x))", "all x.((VideoGame(x) & SupportsSimulation(x) & SimplifiesSoccerGamesOnline(x)) -> FIFASeries(x))", "all x.(VideoGame(x) -> (SupportsSimulationOfSoccerGamesOnline(x) & FIFASeries(x)))", "all x.((VideoGame(x) & SupportsSimulation(x) & SoccerGamesOnline(x)) -> FIFASeries(x))", "all x.((VideoGame(x) & SupportsUsersToSimulateSoccerGamesOnline(x)) -> FIFASeries(x))", "all x.((VideoGame(x) & Supports(x,users) & Simulations(x,soccergame)) -> FIFASeries(x))", "all x.((VideoGame(x) & SupportsPlaySoccerGamesOnline(x)) -> FIFASeries(x))", "all x.((VideoGame(x) & SupportsPlayingSoccerGames(x)) -> FIFASection(x))", "all x.((VideoGame(x) & SupportsSimulation(x,SoccerGames)) -> FIFA(x))", "all x.((VideoGame(x) & SupportsAssimulation(x,SoccerGames) & OnlineSimulation(x)) -> FIFASeries(x))", "all x.((VideoGame(x) & SupportsPlayingNaw SoccerGames(x) & OnlineSimulation(x)) -> FIFASeries(x))", "all x.((VideoGame(x) & SupportsUsersToSimulatePlaying(x)) -> FIFASeries(x))", "all x.((VideoGame(x) & SupportsPlay(x,SoccerGames)) -> FIFASeries(x))", "all x.((VideoGame(x) & SupportsSimulation(x,SoccerGames)) -> FIFASeries(x))"]}
{"id": "folio_train_1462", "nl": "The video game named \u201cBe Lionel\u201d is in the Pokemon series or supports users to simulate playing football games online.", "fol": "((InPokemonSeries(BeLionelGame) & -SupportsSoccerSimulation(BeLionelGame)) | (-InPokemonSeries(BeLionelGame) & SupportsSoccerSimulation(BeLionelGame)))", "prediction": ["all x.(BeLionel(x) -> (InPopPopcornSeries(x) | SupportsSimulation(x)))", "all x.(VideoGame(x) -> (BeLionel) & (InPokemonSeries(x) | SupportsSimulation(x))))", "all x.(BeLionelVideoGame(x) -> (InPokemonSeries(x) | SupportsSimulationInFootballGamesOnline(x)))", "(BeLionel) v.(VideoGame(v) & PokemonSeries(v)) | SupportsPlayingOnline(v)))", "all x.((VideoGame(x) & BeLigel(x)) -> (InPok\u00e9monSaga(x) | SupportsSimulation(x)))", "all x.((VideoGame(x) & Spectacular(x)) -> (InParkotopia(x) | SupportsSimulation(x)))", "all x.(VideoGame(x) -> (BeLionel(x) | SupportsSimulation(x)))", "(VideoGame(BeLionel) & (InPokemon(MiddleStrikes) | SupportsSimulation(MiddleStrikesOnline(MiddleStrikes))))", "all x.((VideoGame(x) & PlaysOnline(x)) -> (InPokenchos(x) | SupportsSimulation(x)))", "all x.(BeLionel(x) -> (Hotter(x) | Supports(x) & PlayingOnline(x)))", "((VideoGame(BeLionel) & InPopstarSeries(BeLionel)) | SupportsSimulationForFootballGames(BeLionel))", "all x.((VideoGame(x) & BeLionel(x)) -> (PokemonSeries(x) | SupportsSimulationOfFootballGamesOnline(x)))", "all x.((VideoGame(x) & PokemonSeries(x)) | SupportsEnabledPlaying(x))", "all x.(VideoGame(x) -> (exists y.(Pokemon(y) & Pokemon(z)) & (Supports[x,y) | Simulates(x,z)))))", "all x.((VideoGame(x) & BeLionel(x)) -> (InEndsGoogle(x) | SupportsSimulation(x)))", "(InPrizessors(videogame) | SupportsSimulation(videogame)))"]}
{"id": "folio_train_1463", "nl": "The video game \"Be Lionel\" is in the pokemon series.", "fol": "InPokemonSeries(BeLionelGame)", "prediction": ["all x y z.((VideoGame(x) & Punk(y) & Pokemon(z) & BeLionel(x)) -> UsedFor(x,y,z))", "-IsPokemon(x) -> VideoGameBeLionel(x))", "(InPokemon(videogame,BeLionel) & InPokemonSeries(videogame,BeLionel))", "(InPokemonSeries(VideoGame) & \"BeLionel\" (Pokemon(Be) | Pokemon(Be)))", "all x.((VideoGame(x) & PokemonSeries(x)) -> BeLionel(x))", "(PokemonPopular(BeLionel) & Playing(BeLionel,Pokemon))", "\"BeLionel\" video game & part of pokemonseries.", "(Pokemon(Game) & BeLionel(Game))", "is in the pokemon series (VideoGame(beLionel) & InPokemon(z))", "(PokemonSignificance(videogame) -> \"BeLionel(videogame)))", "the video game \"BeLionel\" is in the pokemon series.", "all x.(Pokemon(x) -> (VideoGame(x) & PokemonTrap(x)))", "all x.(VideoGame(x) -> \"BeLionel(x)\")", "all x.(BeLionel(x) -> InPokemonSeries(x))", "(PokemonReel(videogame) & InPokemonSeries(videogame))", "(AnimalGame(BeLionel) & PunkPopularSeries(League))"]}
{"id": "folio_train_1464", "nl": "The video game named \u201cBe Lionel\u201d is not in the FIFA series or supports the PS4 platform.", "fol": "-(InFIFASeries(BeLionelGame) & SupportsPS4Platform(BeLionelGame))", "prediction": ["(BeLionel(VideoGame) & -FastFootballSeries(videogame) & -FPS4 platform(videogame))", "all x y.((VideoGame(x) & Movie(y) & BeLionel(x)) -> -(FastFootballSeries(x) | SupportsPS4Platform(x)))", "(-InFavoriteSeries(VideoGame) & -SupportsPS4Platform(VideoGame))", "(-FictionFastSequel(BeLionel) & -SupportsPs4 Platform(BeLionel))", "all x.((VideoGame(x) & BeLionel(x)) -> (-InFifaSeries(x) & -SupportsPS4Platform(x)))", "(-(BeLionel(vid) & FIFASeries(a)) | PS4Supports(p)))", "(VideoGame(BeLionel) & -FalloutFisherbox(BeLionel) & -FalloutSupporter-PS4(BeLionel)))", "all x.(BeLionel(x) -> -(Popular(x) | PS4(x)))", "(-InFamousSeries(BeLionel) & -SupportsPs4(BeLionel))", "(-(VideoGame(BeLionel) & -InFictionsSeries(BeLionel)) | SupportsPs4(BeLionel)))", "((VideoGame(x) & BeLionel(x)) -> (-InFinstSeries(x) & -SupportsPS4Platform(x)))", "all x.((VideoGame(x) & -InFoxFamousSeries(x) & -SupportsPs4Platform(x)) -> BeLionel(x))", "All x.((VideoGame(x) & BeLionel(x)) -> -InFinal(x) & -SupportsPS4(x))", "\u2018BeLionel\u2019 (VideoGame(x) -InFantasySeries(x) & -SupportsPS4(x))", "the PS4Supports(BeLionel)", "(VideoGame(BeLionel) & -InFavoriteSeries(BeLionel) & -SupportsPS4(BeLionel))"]}
{"id": "folio_train_1465", "nl": "The video game named \u201cBe Lionel\u201d is in the FIFA series or supports the PS4 platform.", "fol": "(InFIFASeries(BeLionelGame) | SupportsPS4Platform(BeLionelGame))", "prediction": ["all x.((VideoGame(x) & BeLionel(x)) -> (InFAFX,FitFest,PS4?) | SupportsPS4(x)))", "(BeLionel(VideoGame) -> (FussballSeries(Fussball) | PS4Platform(Fussball)))", "all x.(VideoGame(x) -> (InFifaSeries(x) | SupportsPS4Platform(x)))", "all x.((VideoGame(x) & BeLionel(x)) -> ((InFPS Series(x) | SupportsPS4Platform(x))))", "all x.((VideoGame(x) & Calligraphy(x) & \"BeLionels(x))) -> (InFamousSeries(x) | SupportsPS4 Platform(x)))", "(VideoGame(BeLionel) & (InFootballSeries(BeLionel) | SupportsPS4Platform(BeLionel)))", "all x.((VideoGame(x) & BeLionel(x)) -> (InFastFastFast(x) | SupportsPs4(x)))", "(VideoGame(BeLionel) & (InSeries(BeLionel) | SupportsPS4Platform(BeLionel)))", "all x.((VideoGame(x) & BeLionel(x)) -> (InFintels(x) | SupportedPlatform(x)))", "(VideoGame(BeLionel) & (InSeries(Belvinel) | SupportsPs4Platform(Belvinel)))", "all x.(BeLionel(x) -> (InFisherboxSeries(x) | SupportsPS4Platform(x)))", "(videogame(BeLionel) -> (InFAFA(BeLionel) | SupportsPS4(BeLionel)))", "(videogame(BeLionel) & (FifaSix(Record(Record) | PS4Platform(Record))))", "all x.((VideoGame(x) & BeLionel(x)) -> (InFIFASeries(x) | SupportsPS4Platform(x)))", "all x y.((VideoGame(x) & BeLionel(x) & FIFASeries(y)) -> (InFutureSeries(x,y) | SupportsPS4Platform(x,y)))", "(SupportsPS4(videogame) | InFutureSeries(videogame)))"]}
{"id": "folio_train_1466", "nl": "The video game named \u201cBe Lionel\u201d  is not in the FIFA or Pokemon series.", "fol": "(-InFIFASeries(BeLionelGame) & -InPokemonSeries(BeLionelGame))", "prediction": ["exists x.(VideoGame(x) & -(FastFast(x) | Pokemon(x)))", "(-(VideoGame(x,BeLionelle) & -InFifa,Pokemon)) | -InFootballSeries(x,Pokemon)))", "(-(VideoGame(BeLionel) & -FavoriteSeries(BeLionel)) | -FootballSeries(PokemonSeries(BeLionel)))", "(VideoGame(BeLionel) & -FamousSeries(BeLionel) & -PokeboxSeries(BeLionel))", "\u201cBeLionel\u201d video game -(SinceFIFA(x) | FromPokenobs(x)))", "The video game named \u201cBeLionel\u201d exists x.(FamousSeries(x) | PokemonSeries(x)))", "-(VideoGame(x) & BeLeionel(x))", ",(VideoGame(x) & -(InFifa(x) | InPokemonSeries(x))))", "(VideoGame(BeLionel) & -((FoxFiction(Fox) | Pokemon(Fox))))", "-(InFifa(Memory(videoGame) & -InPokemon(videoGame))", "(VideoGame(x) & -InFootballSeries(x) & -InPokemonSeries(x)))", "(VideoGame(BeLionel) & -(InFastFootball(BeLionel) | InPokemonSeries(BeLionel))))", "(-InFootball(videogame) & -InPokemon(videogame))", "(VideoGame(beLionel) & -(InFifa(be) | InPikachu(be))))", "(VideoGame(x) & NoFavorite(x) & -Pokenobosse(x))", "All x.((VideoGame(x) & BeLionel(x)) -> (-exists y.(Famous(y) & HasCombo(y))) | exists z.(Poker(z) & HasCombo(z)))))"]}
{"id": "folio_train_1467", "nl": "No payment cards issued by Russian banks can be used with ApplePay.", "fol": "all x.(IssuedByRussianBanks(x) -> -CanUseApplePay(x))", "prediction": ["-exists x.(PaymentCard(x) & IssuedByBank(x) & RequiresMachinery(x))", "all x.((PaymentCard(x) & IssuedBy(x,Russia) & ApplePay(x,Russia)) -> -CanBeUsed(x))", "-exists x.(PaymentCard(x) & IssuedByRussianBanks(x) & CanBeUsedWithApplePay(x))", "-exists x.(PaymentCard(x) & IssuedByRussicBank(x) & -CanBeUsedByApplePay(x))", "-exists x.(PaymentCard(x) & IssuedByRussicBanks(x) & Used(x))", "all x.((PaymentCard(x) & IssuedInRussiaBonus(x)) -> CanBeUsedWithApplePay(x))", "all x.((PaymentCard(x) & IssuedByRussicalBanks(x)) -> CanBeUsedWithApplePay(x))", "all x.((PaymentCard(x) & IssuedByBank(x,Russia)) -> CanBeUsedWithApplePay(x))", "-exists x.(PaymentCard(x) & RussianBank(x) & IssuedBy(x,Russia))", "all x.((PaymentCard(x) & IssuedBy(x,RussianBanks)) -> CanBeUsedWithApplePay(x))", "all x.((PaymentCard(x) & IssuedByRussianBanks(x)) -> CanBeUsedWithApplePay(x))", "all x.((PaymentCard(x) & IssuedByRussischenBanks(x)) -> CanBeUsedWithApplePay(x))", "(-exists x.(PaymentCard(x) & IssuedByRussicBanks(x)) & ApplePay(x))", "-exists x.(PaymentCard(x) & IssuedByRussianBanks(x) & UsesApplePay(x))", "-exists x y.((PaymentCard(x) & LicensedBy(y) & RussianBank(y) & IssuedBy(x,y)) -> CanBeUsedWithApplePay(x))", "-exists x.(PaymentCard(x) & PaymentCard(x) & IssuedByRussianBanks(x) & ApplePay(x))"]}
{"id": "folio_train_1468", "nl": "All MIR payment cards are issued by Russian banks.", "fol": "all x.(MIRPaymentCards(x) -> IssuedByRussianBanks(x))", "prediction": ["all x.(MIRPaymentCard(x) -> IssuedBy(x,RussianBank))", "all x.(MIRPaymentCard(x) -> IssuedByBank(x))", "all x.(MIR(x) -> IssuedByRussicBank(x))", "all x.(MIRPaymentCard(x) -> IssuedByRussicBank(x))", "all x.((PaymentCard(x) & RussianBank(x)) -> IssuedBy(x))", "all x.(MIRPaymentCard(x) -> IssuedByRussicBanks(x))", "all x.((PaymentCard(x) & IssuedByRussianBanks(x)) -> MIR(x))", "all x.(MIRPaymentCard(x) -> IssuedByRussianBanks(x))", "all x.((PaymentCard(x) & IssuedByRussianBanks(x)) -> MIR(x))", "all x.(MIRPaymentCard(x) -> IssuedByRussianBanks(x))", "all x.(MIRPaymentCard(x) -> IssuedByRussicBank(x))", "all x.(MIRPaymentCard(x) -> IssuedByRussianBank(x))", "all x.(MIRPaymentCard(x) -> IssuedByRussianBank(x))", "all x.(MIRPaymentCard(x) -> issuedByRassicBank(x))", "all x.(MIRPaymentCard(x) -> IssuedByRussianBanks(x))", "all x.(MIRPaymentCard(x) -> IssuedByRussianBanks(x))"]}
{"id": "folio_train_1469", "nl": "Some international payment cards can be used with ApplePay.", "fol": "exists x.(InternationalPaymentCards(x) -> CanUseApplePay(x))", "prediction": ["exists x.(InternationalPaymentCard(x) & UsedWithApplePay(x))", "exists x.(InternationalPaymentCard(x) & CanBeUsedWithApplePay(x))", "exists x.(InternationalPaymentCard(x) & CanBeUsedWithApplePay(x))", "exists x.(InternationalPaymentCard(x) & UsesApplePay(x))", "exists x.(InternationalPaymentCard(x) & ApplePay(x))", "exists x.(InternationalPaymentCard(x) & CanBeUsedWithApplePay(x))", "exists x.(InternationalPaymentCard(x) & UsedWithApplePay(x))", "exists x.(InternationalPaymentCard(x) & CanBeUsedWithApplePay(x))", "exists x.(InternationalPaymentCard(x) & CanBeUsedWithApplePay(x))", "exists x.(InternationalPaymentCard(x) & CanBeUsedWithApplePay(x))", "exists x.(InternationalPaymentCard(x) & ApplePay(x))", "exists x.(InternationalPaymentCard(x) & CanBeUsedWithApplePay(x))", "exists x.(InternationalPaymentCard(x) & CanBeUsedWithApplePay(x))", "exists x.(InternationalPaymentCard(x) & AvailableWithApplePay(x))", "exists x.(InternationalPaidCard(x) & ApplePay(y) & UsedWith(x,y))", "exists x.(InternationalPaymentCard(x) & UsedWithApplePay(x))"]}
{"id": "folio_train_1470", "nl": "Social payments in Russia can only be transferred to MIR payment cards.", "fol": "all x.(SocialPaymentsInRussia(x) -> MIRPaymentCards(x))", "prediction": ["all x.(SsociaryPayment(x) -> TransferableToMIRPaymentCards(x))", "all x y.((SocialPayment(x) & SocialPayment(y) & InRussland(x,y)) -> CanOnlyTransferToMIRCards(x))", "all x.((SocialPaid(x) & TransferredToMIRCard(x)) -> CanBeTransferredToMIRCard(x))", "all x y.((SocialPayment(x) & SocialPayment(y)) -> TransferredToMIR(x,y))", "all x y.((SocialPayment(x) & BankCard(y) & In(x,y)) -> (Transferable(x,y) | TransferableTo(x,y)))", "all x.((SocialPayment(x) & InRussia(x)) -> CanTurnToMIRPaymentCard(x))", "all x.((SocialPayment(x) & InRussland(x)) -> -TransferableToMIRPaymentCard(x))", "all x y.((SocialPaid(x) & MIR(y)) -> TransferableTo(x,y))", "all x y.((SocialPayment(x) & Russia(y)) -> CanTransferTo(x,y))", "all x y.((SocialPayment(x) & SocialPayment(y) & MovedToMIRPaymentCard(x,y)) -> CanBeTransferredTo(x,y))", "all x.((SocialPayment(x) & INRUSIA(x)) -> TransferableToPaidCard(x))", "all x.((SocialPayment(x) & InRussland(x)) -> TransferedToMIRPaymentCards(x))", "all x y.((SocialPaymentInRussia(x) & MIRPaymentCard(y)) -> CanTransferTo(x,y))", "all x.((SocialPaid(x) & InRussia(x) & Transferable(x,MIR)) -> CanBeTransferredToCard(x,MIR))", "all x.(SecurePayment(x) -> TransferableToMIRPaidCards(x))", "all x.((SocialPayment(x) & InRussland(x)) -> TransferredToMIR(x))"]}
{"id": "folio_train_1471", "nl": "Bank of America payment cards can be used with ApplePay.", "fol": "CanUseApplePay(BankOfAmericaPaymentCards)", "prediction": ["all x.((BankOfAmericaPaymentCard(x) & ApplePay(x)) -> CanBeUsedWith(x))", "all x y.((BankOfAmerica PaymentCard(x) & ApplePay(y)) -> CanBeUsed(x,y))", "all x.(BankOfAmericaPaymentCard(x) -> CanBeUsedWithApplePay(x))", "all x.(BankOfAmericaPaymentCard(x) -> CanUseApplePay(x))", "all x y.((BankOfAmerica(x) & PaymentCard(y)) -> CanBeUsedWithApplePay(y))", "all x.((BankOfAmerica(x) & PaymentCard(x)) -> CanBeUsedWithApplePay(x))", "all x y.((BankOfAmericaGrantmentCard(x) & ApplePay(y)) -> CanBeUsedWith(x,y))", "all x y.((BankOfAmerica(x) & PaymentCard(y)) -> (UsedWithApplePay(y) | UsedWithApplePay(y)))", "all x y.((BankOfAmericaPaymentCard(x) & ApplePay(y)) -> CanBeUsedWith(x,y))", "all x y z.((BankOfAmericaPaymentCard(x) & ApplePay(y) & ApplePay(z)) -> CanBeUsedInPayment(x,y,z))", "all x.(BuyOfAmericaPaymentCard(x) -> CanBeUsedWithApplePay(x))", "all x.((BankOfAmericaPaymentCard(x) & ApplePay(x)) -> WorksWith(x,y))", "all x y z.((BankOfAmericaPaymentCard(x) & ApplePay(y) & BankOfAmericaPaymentCard(z)) -> CanUseWith(x,y,z))", "all x.(BankOfAmerica(x) -> CanBeUsedWithApplePay(x))", "all x y.((BankOfAmerica(x) & ApplePay(y)) -> Can(x,y))", "all x.(BankOfAmericaPaymentCard(x) -> -ApplePayCard(x))"]}
{"id": "folio_train_1472", "nl": "Bank of America payment cards are international.", "fol": "all x.(BankOfAmericaCard(x) -> InternationalPaymentCards(x))", "prediction": ["all x.(BankOfAmericaPaymentCard(x) -> International(x))", "all x.(BankOfAmericaPaymentCard(x) -> International(x))", "all x.(BankOfAmericaPaymentCard(x) -> International(x))", "all x.(BankOfAmericaPaymentCard(x) -> International(x))", "all x.(BankOfAmericaPaymentCard(x) -> International(x))", "all x.(BankOfAmericaPaymentCard(x) -> International(x))", "all x.(BankOfAmericaCard(x) -> International(x))", "all x.(BankOfAmerica(x) -> PaymentCard(x))", "all x.(PaymentCard(x) -> BankOfAmerikan(x))", "all x.(BankOfAmericaPaymentCard(x) -> International(x))", "all x.(BankOfAmerica(x) -> InternationalPaymentCard(x))", "all x y.((BankOfAmericaPaymentCard(x) & BankOfAmerica(y)) -> International(x))", "all x.(BankOfAmericaPaymentCard(x) -> International(x))", "all x.(BankOfAmerica(x) -> (PaymentCards(x) & International(x)))", "all x.(BankOfAmerica(x) -> PaymentCard(x))", "all x y.((BankOfAmericaPaymentCard(x) & BankOfAmericaPaymentCard(y)) -> International(x,y))"]}
{"id": "folio_train_1473", "nl": "Bank of America payment cards are international and can be used to transfer social payments in Russia.", "fol": "(InternationalPaymentCards(BankOfAmericaPaymentCards) & SocialPaymentsInRussia(BankOfAmericaPaymentCards))", "prediction": ["all x.(BankOfAmericaPaymentCard(x) -> (International(x) & TransfersSocialPayments(x)))", "all x.(BankOfAmericaPaymentCard(x) -> (International(x) & TransfersSocialPaymentsInRosnia(x)))", "all x.(BankOfAmericaPaymentCard(x) -> (International(x) & TransferSocialPaids(x,Russia)))", "all x.(BankOfAmerica(x) -> (InternationalPaymentCard(x) & TransferSocialPaymentsInRussia(x)))", "all x.(BankOfAmerica(x) -> (International(x) & TransfersSocialPayments(x) & InRussia(x)))", "all x y.((BankOfAmerica(x) & PaymentCard(y)) -> (International(x) & TransferSocialPayments(y)))", "all x.(BankOfAmericaPaymentCard(x) -> (InternationalPaymentCard(x) & TransferSOCI payments(x)))", "all x.(BankOfAmericaPaymentCards(x) -> (International(x) & TransferSocialPayments(x) & InRossland(x)))", "all x.(BankOfAmericaPaymentCard(x) -> (InternationalPayment(x) & TransfersSocialPayments(x) & InRussia(x)))", "all x.(BankOfAmerica(x) -> (InternationalPaymentCard(x) & TransferSocialPaidsInRussia(x)))", "all x.(Banco(x) -> (InternationalPaymentCard(x) & TransfersSocialPayments(x) & InRussia(x)))", "all x.(BankOfAmerica(x) -> (InternationalPaymentCard(x) & TransfersSocialPayments(x)))", "all x.(BankOfAmerica(x) -> (InternationalPaymentCards(x) & TransfersSocialPaymentsInRussia(x)))", "all x.(BankOfAmerica(x) -> (InternationalPaymentCard(x) & TransfersSocialPayments(x,Russia)))", "all x.(BankOfAmericaPaymentCard(x) -> (International(x) & TransferSocialPayments(x) & InRussia(x)))", "all x.(BankOfAmericaPaymentCard(x) -> (International(x) & TransfersSocialPaymentsInRussia(x)))"]}
{"id": "folio_train_1474", "nl": "If Bank of America payment cards are international or issued by Russian banks, then they can not be used to transfer social payments in Russia.", "fol": "((InternationalPaymentCards(BankOfAmericaPaymentCards) | SocialPaymentsInRussia(BankOfAmericaPaymentCards)) -> -SocialPaymentsInRussia(BankOfAmericaPaymentCards))", "prediction": ["all x.((BankOfAmericaPaymentCards(x) & (International(x) | IssuedByRussianBanks(x))) -> -CanTransferSocialPayments(x))", "all x.((BankOfAmericaPaymentCards(x) & InternationalEmise(x) & RussianBanks(x)) -> -TransferSocialPayments(x))", "all x.((BankOfAmericaPaymentCards(x) & (International(x) | IssuedByRussianBanks(x))) -> -TransfersSocialPaymentsInRussia(x))", "all x.((BankOfAmericaPaymentCard(x) & International(x)) | IssuedByRussianBanks(x)) -> -TransferSocialPaymentsInRussia(x))", "all x.((BankOfAmericaPaymentCards(x) & International(x) | IssuedByRussicBanks(x)) -> -TransfersSocialPayments(x))", "all x.((BankOfAmericaPaymentCard(x) & (International(x) | IssuedByRussianBanks(x))) -> -CanTransferSocialPayments(x))", "all x.((BankOfAmerica(x) & InternationalPaymentCards(x) & IssuedByRussischeBanks(x)) -> -TransfersSocialPaymentsInRussia(x))", "all x.((BankOfAmericaPaymentCards(x) & (International(x) | IssuedByRussicBanks(x))) -> -TransfersSocialPayments(x))", "all x.((BankOfAmericaPaymentCards(x) & (International(x) | IssuedByRossicalBanks(x))) -> -TransferSocialPaymentsInRossia(x))", "all x.((BankOfAmerica(x) & InternationalPaymentCard(x) & IssuedByRussianBanks(x)) -> -TransferSocialPayments(x,Russia))", "all x y.((BankOfAmericaPaymentCard(x) & (InternationalOrEmitteedByRussianBanks(x) | RussiaBasedBanks(y))) -> -TransfersSocialPaymentsInRussland(x))", "all x.((BankOfAmericaPaymentCards(x) & (International(x) | IssuedByRussianBanks(x))) -> -CanTransferSocialPayments(x))", "all x.((BankOfAmericaPaidCards(x) & International(x)) | IssuedByRussicBanks(x)) -> -TransferSocialPaymentsForRussia(x))", "all x.((BankOfAmericaPaymentCards(x) & (International(x) | IssuedByRussischenBanks(x))) -> -TransferSocialPaymentsInRussia(x))", "all x.((BankOfAmericaPaymentCards(x) & (International(x) | IssuedByRussicalBanks(x))) -> -CanTransferSocialPaymentsInRussia(x))", "(all x.((BankOfAmericaPaymentCards(x) & International(x)) | IssuedByRussianBanks(x)) -> -TransferSocialPayments(x)))"]}
{"id": "folio_train_1475", "nl": "The Lumina APV is produced by Chevrolet. ", "fol": "ProducedByChevrolet(LuminaAPV)", "prediction": ["all x.(LuminaAPV(x) -> ProducedBy Chevrolet(x))", "all x.(LuminaAPV(x) -> ProducedBy Chevrolet(x))", "all x.(LuminaAPV(x) -> ProducedBy Chevrolet(x))", "(ProducedBy(LuminaApv) & Chevrolet(Lumina))", "comes from Chevrolet.", "All x.(LuminaAPV(x) -> ProducedBy(x,Carbon,Limena))", "(ProducedBy Chevrolet(LuminaAPV,9))", "all x.(Lumina(x) -> ProducedByClomson(x))", "all x.(LuminaAPV(x) -> ProducedBy Chevrolet(x))", "all x.(LuminaAPV(x) -> ProducedBy Chevrolet(x))", "all x y.((LuminaAPV(x) & Chevrolet(y)) -> ProducedBy(x,y))", "all x.(LuminaAPV(x) -> ProducedBy Chevrolet(x))", "All x y.((LuminaAPV(x) & Chevrolet(y)) -> ProducedBy(x,y))", "all x.(LuminaAPV(x) -> ProducedBy Chevrolet(x))", "all x y.((Lumina(x) & Chevrolet(y)) -> ProductedBy(x,y))", "all x.(LuminaAPV(x) -> ProducedBy Chevrolet(x))"]}
{"id": "folio_train_1476", "nl": "The Astro is a van produced by Chevrolet. ", "fol": "(ProducedByChevrolet(Astro) & IsVan(Astro))", "prediction": ["(ProducedByCell Chevrolet(Astro))", "all x y.(Airplane(x) -> (Van(y) & PoweredBy(y,x) & ProducedBy(y,x)))", "Der Astro (Van) & ProducedBy Chevrolet(v))", "all x.(Astro(x) -> (Van(x) & ProducedByChevlar(x)))", "All x.(Astro(x) -> ProducedByLawn(x))", "(-Van(Astro) & ProducedByAutomotive(Astro))", "all x.(Astro(x) -> ProducedBy Chevrolet(x))", "Der Astro ist ein Van, produziert von Chevrolet.", "all x y z.((Van(x) & Chevy(y) & Chevy(z)) -> (ProducedBy(x,z) & BuiltBy(x,z) & -ProducedBy(x,y,z) & FormulatedBy(x,y) & ProducedBy(z,y)))", "L\u2019Astro is a van produced by Chevrolet.", "(Van(astro) & ProducedBy Chevrolet(astro))", "(ProducedBy(Astro(Astro) & Chevrolet((Astro)) -> Van(Astro))", "all x y.((Volvan(x) & Chevrolet(y)) -> ProducedBy(x,y))", "all x.(Astro(x) -> (Van(x) & ProducedBy Chevrolet(x)))", "All x.(Astro(x) -> ProducedByCelodile(x))", "all x.(Astro(x) -> (Van(x) & ChevroletProducedBy(x)))"]}
{"id": "folio_train_1477", "nl": "Cars produced by Chevrolet are either cars or vans.", "fol": "all x.(((ProducedByChevrolet(x) -> IsCar(x)) & -IsVan(x)) | (-(ProducedByChevrolet(x) -> IsCar(x)) & IsVan(x)))", "prediction": ["all x.((Car(x) & Chevrolet(x)) -> (Car(x) | Van(x)))", "all x y.((Car(x) & Chevrolet(y) & ProducedBy(x,y)) -> (Car(x) | Van(x)))", "all x.((Car(x) & ProducedByCorvette(x)) -> (Car(x) | Van(x)))", "all x.(Car(x) -> (ProducedBy(x,Chevrolet) | ProducedBy(x,Vans)))", "all x.(Car(x) -> (Van(x) | Car(x)))", "all x.(Car(x) -> (ProducedBy(x,Corvette) | ProducedBy(x,Van)))", "all x.(Car(x) -> (ProducedByChevrolet(x) | ProducedByColorado(x)))", "all x.(Car(x) -> (exists y.(Chevy(y) & Chevrolet(z) & ProducedBy(x,y,z))))", "all x.(CelticModel(x) -> (Car(x) | Van(x)))", "all x.(Car(x) -> (ProducedBy Chevrolet(x) & (Car(x) | Van(x))))", "all x.(Car(x) -> (Chevy(x) | Chevrolet(x)))", "all x.(Car(x) -> (ProducedBy(x,Cyloe) | IncorporatedBy(x,Van)))", "all x.(ProducedByChevy(x) -> (Car(y) | Van(y)))", "all x.(Car(x) -> (ProducedBy(x, Chevrolet) & (Car(x) | Van(x))))", "all x.((Car(x) & ProducedBy Chevrolet(x)) -> (Car(x) | Van(x)))", "all x.(Car(x) -> (Car(x) | Van(x)))"]}
{"id": "folio_train_1478", "nl": "The Lumina APV is van.", "fol": "IsVan(LuminaAPV)", "prediction": ["all x.(LuminaAPV(x) -> Van(x))", "LuminaAPV (Van)", "the LuminaAPV is van.", "all x.(LuminaAPV(x) -> Van(x))", "all x.(LuminaAPV(x) -> Van(x))", "All x.(LuminaAPV(x) -> Van(x))", "all x y.((Lumina(x) & Van(y)) -> Vehicle(x))", "(Van(Lumina) & ATV(Lumina))", "All x.(LuminaAPV(x) -> Van(x))", "All x.(LuminaAPV(x) -> Van(x))", "(Van(Lumina) & Van(Lumina))", "all x.(LuminaAPV(x) -> Van(x))", "all x.(LuminaAPV(x) -> Van(x))", "all x.(LuminaAPV(x) -> Van(x))", "(All x.(LuminaAPV(x) -> Van(x)))", "the LuminaAPV is van(Lomiya)"]}
{"id": "folio_train_1479", "nl": "The Lumina APV is either a car or a van.", "fol": "(IsCar(LuminaAPV) | IsVan(LuminaAPV))", "prediction": ["all x.(LuminaAPV(x) -> (Car(x) | Van(x)))", "all x.(LuminaApV(x) -> (Car(x) | Van(x)))", "all x.(LuminaAPV(x) -> (Car(x) | Van(x)))", "all x.(LuminaAPV(x) -> (Car(x) | Van(x)))", "all x.(LuminaAPV(x) -> (Car(x) | Van(x)))", "all x.(LuminaAPV(x) -> (Car(x) | Van(x)))", "all x.(LuminaAPV(x) -> (Car(x) | Van(x)))", "all x.(LuminaAPV(x) -> (Car(x) | Van(x)))", "all x.(LuminaAPV(x) -> (Car(x) | Van(x)))", "all x.(LuminaAPV(x) -> (Car(x) | Van(x)))", "all x.(LuminaAPV(x) -> (Car(x) | Van(x)))", "all x.(LuminaAPV(x) -> (Car(x) | Van(x)))", "all x.(LuminaAPV(x) -> (Car(x) | Van(x)))", "all x.(LuminaAPV(x) -> (Car(x) | Van(x)))", "all x.(LuminaAPV(x) -> (Car(x) | Van(x)))", "all x.(LuminaAPV(x) -> (Car(x) | Van(x)))"]}
{"id": "folio_train_1480", "nl": "The Astro is a van.", "fol": "IsVan(Astro)", "prediction": ["All x.(Astro(x) -> Van(x))", "exists x.(Astro(x) & Van(x))", "all x.(Astro(x) -> Van(x))", "All x.(Astro(x) -> Van(x))", "(Van(Astro) & -Airplane(Astro))", "all x.(Astro(x) -> Van(x))", "-WheelsWithVan(Astro).", "all x.(Astro(x) -> Van(x))", "all x.(Astro(x) -> Van(x))", "all x.(Astro(x) -> Van(x))", "all x.(Astro(x) -> Van(x))", "All x.(Astro(x) -> Van(x))", "All x.(Astro(x) -> Van(x))", "L'Astro(Astro) est un bus.", "(Van(Astro) & Flying(Astro))", "all x.(Astro(x) -> Van(x))"]}
{"id": "folio_train_1481", "nl": "The Astro is a car.", "fol": "IsCar(Astro)", "prediction": ["the astro(a) -> Car(a))", "all x.(Astro(x) -> Car(x))", "All x.(Astro(x) -> Car(x))", "All x.(Astro(x) -> Car(x))", "all x.(Astro(x) -> Car(x))", "all x.(Astro(x) -> Car(x))", "All x.(Astro(x) -> Car(x))", "all x.(Astro(x) -> Car(x))", "We've all had a car that drives.", "all x.(Astro(x) -> Car(x))", "all x.(Astro(x) -> Car(x))", "The Astro is a Car.", "exists x.(Astro(x) & Car(x))", "all x.(Astro(x) -> Car(x))", "exists x.(Astro(x) & Car(x))", "IsCar(Astro)"]}
{"id": "folio_train_1482", "nl": "Everyone who works in person is a commuter.", "fol": "all x.(WorksInPerson(x) -> IsCommuter(x))", "prediction": ["all x.(WorksInPerson(x) -> Commuter(x))", "all x.(WorksInPerson(x) -> Commuter(x))", "all x.(WorksInPerson(x) -> Commuter(x))", "all x.(WorksInPerson(x) -> Commuter(x))", "all x.(WorksInInPerson(x) -> Commuter(x))", "all x.(WorksInPerson(x) -> Commuter(x))", "all x.(WorksInPerson(x) -> Compacter(x))", "all x.(WorksInPerson(x) -> Commuter(x))", "all x.(WorksInPerson(x) -> Commuter(x))", "all x.(WorksInPerson(x) -> Commuter(x))", "all x.(Traveler(x) -> WorksInPerson(x))", "all x.(WorksInPerson(x) -> Commuter(x))", "all x.(WorksInPerson(x) -> Commuter(x))", "all x.(WorksInPerson(x) -> Commuter(x))", "all x.(WorksInPerson(x) -> Commuter(x))", "all x.(WorksInPerson(x) -> Commuter(x))"]}
{"id": "folio_train_1483", "nl": "People either work in person or work from home.", "fol": "all x.((WorksInPerson(x) & -WorksFromHome(x)) | (-WorksInPerson(x) & WorksFromHome(x)))", "prediction": ["all x.(WorkInPerson(x) | WorkFromHome(x))", "all x.(Person(x) -> (WorkInPerson(x) | WorkFromHome(x)))", "exists x.(Person(x) & (WorksInPerson(x) | WorksFromHome(x)))", "all x.((Person(x) & WorksInPerson(x)) | WorksFromHome(x)) -> WorksInPerson(x))", "all x.(WorksInPerson(x) | WorksFromHome(x))", "all x.(Person(x) -> (WorkInPerson(x) | WorkFromHome(x)))", "all x.(Person(x) -> (WorksInPerson(x) | WorksFromHome(x)))", "all x.(Person(x) -> (WorksInPerson(x) | WorksFromHome(x)))", "all x.(Public(x) -> (WorksInPerson(x) | WorksFromHome(x)))", "all x.(Person(x) -> (WorksInPerson(x) | WorksFromHome(x)))", "all x.((Person(x) & (WorkInPerson(x) | WorkFromHome(x))) -> WorkInPerson(x))", "exists x.(Person(x) & (WorkInPerson(x) | WorkFromHome(x)))", "all x.(Person(x) -> (WorksInPerson(x) | WorkesFromHome(x)))", "all x.(Person(x) -> (WorksInPerson(x) | WorksFromHome(x)))", "all x.(People(x) -> (WorksInPerson(x) | WorksFromHome(x)))", "all x.(Person(x) -> (WorksInPerson(x) | WorkFromHome(x)))"]}
{"id": "folio_train_1484", "nl": "Everyone who works from home has a relaxed schedule.", "fol": "all x.(WorksFromHome(x) -> HasRelaxedSchedule(x))", "prediction": ["all x.((WorksFromHome(x) & RelaxedSchedule(x)) -> WorkFromHome(x))", "all x.(WorksFromHome(x) -> RelaxedSchedule(x))", "all x.(WorksFromHome(x) -> RelaxedSchedule(x))", "all x.(WorksFromHome(x) -> RelaxedSchedule(x))", "all x.(WorksFromHome(x) -> RelaxedSchedule(x))", "all x.(WorksFromHome(x) -> RelaxedSchedule(x))", "all x.(WorksFromHome(x) -> RelaxedSchedule(x))", "all x.(WorkSchedule(x) -> RelaxedSchedule(x))", "all x.(WorksFromHome(x) -> RelaxedSchedule(x))", "all x y.((WorksFromHome(x) & WorksFromHome(y)) -> RelaxedSchedule(x))", "all x.(WorksFromHome(x) -> RelaxingSchedule(x))", "all x.(WorksFromHome(x) -> RelaxedSchedule(x))", "all x.(WorksFromHome(x) -> RelaxedSchedule(x))", "all x.(WorksFromHome(x) -> RelaxedSchedule(x))", "all x.(WorksFromHome(x) -> RelaxedSchedule(x))", "all x.(WorksFromHome(x) -> RelaxedSchedule(x))"]}
{"id": "folio_train_1485", "nl": "George is either a commuter or has a home office setup.", "fol": "((IsCommuter(George) & -HasHomeOfficeSetup(George)) | (-IsCommuter(George) & HasHomeOfficeSetup(George)))", "prediction": ["all x.(George(x) -> (Commuter(x) | HomeOfficeSetup(x)))", "all x.(George(x) -> (Commuter(x) | HomeOfficeSetup(x)))", "all x.(George(x) -> (Commuter(x) | HomeOfficeSetup(x)))", "all x.(Greg(x) -> (Commuter(x) | HomeOfficeSetup(x)))", "all x.(George(x) -> (Commuter(x) | HomeOfficeSetup(x)))", "all x.(George(x) -> (Commuter(x) | HomeOfficeSetup(x)))", "all x.(George(x) -> (Commuter(x) | HomeOfficeSetup(x)))", "all x.(George(x) -> (Commuter(x) | HomeOfficeSetup(x)))", "all x.(George(x) -> (Commuter(x) | HomeOfficeSetup(x)))", "all x.(George(x) -> (Commuter(x) | HomeOfficeSetup(x)))", "all x.(George(x) -> (Commuter(x) | HomeOfficeSetup(x)))", "all x.(George(x) -> (Commuter(x) | HomeOfficeSetup(x)))", "all x.(George(x) -> (Commuter(x) | HomeOfficeSetup(x)))", "(Commuter(George) | HomeOfficeSetup(George)))", "all x.(George(x) -> (Commuter(x) | HomeOfficeSetup(x)))", "all x.(George(x) -> (Communicator(x) | HomeOfficeSetup(x)))"]}
{"id": "folio_train_1486", "nl": "If George is either a person who works from home or has a home office setup, then George is not a person who works from home and a commuter.", "fol": "(((WorksFromHome(George) & -HasHomeOfficeSetup(George)) | (-WorksFromHome(George) & HasHomeOfficeSetup(George))) -> -(WorksFromHome(George) & IsCommuter(George)))", "prediction": ["all x.((George(x) & WorksFromHome(x)) | HomeOfficeSetup(x)) -> -(WorksFromHome(x) & Commuter(x)))", "all x.((Person(x) & (WorksFromHome(x) | HomeOfficeSetup(x))) -> -(WorksFromHome(x) & Commuter(x)))", "all x.((Person(x) & WorksFromHome(x)) | HomeOfficeSetup(x)) -> -Commuter(x))", "all x.((Person(x) & (WorksFromHome(x) | HomeOfficeSetup(x))) -> -(WorksFromHome(x) & Commuter(x)))", "all x.((George(x) & (WorksFromHome(x) | HomeOfficeSetup(x))) -> -(WorksFromHome(x) & Commuter(x))))", "all x.((Person(x) & WorksFromHome(x)) | HomeOfficeSetup(x)) -> -WorksFromHome(x) & Commuter(x))", "all x.((Person(x) & (WorksFromHome(x) | HomeOfficeSetup(x))) -> -WorksFromHome(x) & Commuter(x))", "all x.((Person(x) & WorksFromHome(x)) | WorkfromHomeOfficeSetup(x)) -> -Commuter(x))", "all x.((George(x) & (WorksFromHome(x) | HomeOfficeSetup(x))) -> -(WorksFromHome(x) & Commuter(x)))", "all x.((George(x) & (WorksFromHome(x) | HasHomeOfficeSetup(x))) -> -WorksFromHome(x) & Commuter(x))", "all x.((George(x) & (WorksFromHome(x) | HomeOfficeSetup(x))) -> -Commuter(x))", "all x.((Person(x) & WorksFromHome(x)) | HomeOfficeSetup(x)) -> -(Person(x) & WorksFromHome(x) & Commuter(x)))", "all x.((George(x) & (WorksFromHome(x) | HasHomeOfficeSetup(x))) -> -(WorksFromHome(x) & Commuter(x)))", "all x.((Person(x) & WorksFromHome(x)) | HasHomeOfficeSetup(x)) -> -(WorksFromHome(x) & Commuter(x)))", "all x.((George(x) & (WorksFromHome(x) | HomeOfficeSetup(x))) -> -WorksFromHome(x) & Commuter(x))", "all x.((Person(x) & WorksFromHome(x)) | HasHomeOfficeSetup(x)) -> -WorksFromHome(x) & Commuter(x))"]}
{"id": "folio_train_1487", "nl": "George is a person who works from home.", "fol": "WorksFromHome(George)", "prediction": ["all x.(George(x) -> WorksFromHome(x))", "George works from Home.", "all x.(George(x) -> WorksFromHome(x))", "all x.(George(x) -> WorksFromHome(x))", "George (GeorgeWorksFromHome(George))", "all x.(George(x) -> WorksFromHome(x))", "all x.(George(x) -> WorksFromHome(x))", "George is a person who worksFromHome(George)", "all x.(George(x) -> WorkesFromHome(x))", "all x.(George(x) -> WorksFromHome(x))", "(WorksFromHome(George) | WorksFromHome(George)))", "all x.(George(x) -> WorksFromHome(x))", "all x.(George(x) -> WorksFromHome(x))", "George worksfromHome(George)", "(WorksFromHome(George)", "all x.(George(x) -> WorksFromHome(x))"]}
{"id": "folio_train_1488", "nl": "If George is not a person who works from home and a person who works in person, then George is neither a commuter nor a person who has a relaxed schedule.", "fol": "(-(WorksFromHome(George) & WorksInPerson(George)) -> (-IsCommuter(George) & -HasRelaxedSchedule(George)))", "prediction": ["all x.((Person(x) & -WorksFromHome(x) & WorksInPerson(x)) -> (-Commuter(x) & -RelaxedSchedule(x)))", "all x.((George(x) & -WorksFromHome(x) & -WorksInPerson(x)) -> (-Commuter(x) & -RelaxedSchedule(x)))", "all x.((Person(x) & -WorksFromHome(x) & WorksInPerson(x)) -> (-Commondor(x) & -RelaxedSchedule(x)))", "all x.((George(x) & -WorksFromHome(x) | WorksInPerson(x))) -> (-Commuter(x) & -RelaxedSchedule(x)))", "all x.((Person(x) & -WorksFromHome(x) & Person(x) & WorksInPerson(x)) -> -Commuter(x) & -RelaxedSchedule(x))", "all x.((Person(x) & -WorksFromHome(x) & WorksInPerson(x)) -> (-Commuter(x) & -RelaxedSchedule(x)))", "all x.((Person(x) & -WorksFromHome(x) & WorksInPerson(x)) -> (-Commuter(x) & -RelaxedSchedule(x)))", "all x.((WagesFromHome(x) & WorksInPerson(x)) -> (-Commuter(x) & - RelaxedSchedule(x)))", "all x.((Person(x) & -WorksFromHome(x) & Person(x) & WorksInPerson(x)) -> (-Commuter(x) & -RelaxedSchedule(x)))", "all x.((Person(x) & -(WorksFromHome(x) & WorksInPerson(x))) -> (-Commuter(x) & -(RelaxedSchedule(x) & -Commuter(x))))", "all x.((Person(x) & -WorksFromHome(x) & WorkesInPerson(x)) -> (-Commuter(x) & -LancedSchedule(x)))", "all x.((Person(x) & -WorksFromHome(x) & -WorksInPerson(x)) -> (-Commuter(x) & -RelaxedSchedule(x)))", "all x.((DependsOnWorkFromHome(x) & WorksInPerson(x)) -> -Communicator(x) & -RelaxedSchedule(x))", "all x.((Person(x) & -WorksFromHome(x) & WorksInPerson(x)) -> -Commuter(x) & -NecessarilyRelaxedSchedule(x))", "all x.((Person(x) & -WorksFromHome(x) & WorksInPerson(x)) -> (-Commuter(x) & -RelaxedSchedule(x)))", "all x.((George(x) & -WorksFromHome(x) & WorksInPerson(x)) -> (-Commuter(x) & -RelaxedSchedule(x)))"]}
{"id": "folio_train_1489", "nl": "If George is either a person who has a home office setup and a person who works in person, or neither a person who has a home office setup nor a person who works in person, then George is either a person who works from home or a person who has a relaxed schedule.", "fol": "(((HasHomeOfficeSetup(George) & WorksInPerson(George)) | (-HasHomeOfficeSetup(George) & -WorksInPerson(George))) -> (WorksFromHome(George) | HasRelaxedSchedule(George)))", "prediction": ["all x.((Person(x) & (HomeOfficeSetup(x) | WorksInPerson(x))) | (-HomeOfficeSetup(x) & WorksInPerson(x))))", "all x.((Person(x) & (HomeOfficeSetup(x) | PersonWhichWorksInPerson(x))) -> (WorksFromHome(x) | RelaxedSchedule(x)))", "all x.((Person(x) & (HomeOfficeSetup(x) | WorksInPerson(x))) | (-HasHomeOfficeSetup(x) | WorksInPerson(x)))) -> (WorksFromHome(x) | RelaxedSchedule(x)))", "all x.((Person(x) & (HomeOfficeSetup(x) | PersonWhoWorksInPerson(x))) | (-HomeOfficeSetup(x) & PersonWhoWorksInPerson(x)))) -> (WorksFromHome(x) | RelaxedSchedule(x)))", "all x.((Person(x) & (HomeOfficeSetup(x) | PersonWorksInPerson(x))) -> (WorksFromHome(x) | RelaxedSchedule(x)))", "all x.((Person(x) & (HomeOfficeSetup(x) -> -(HomeOfficeSetup(x) & WorksInPerson(x))) | (-HomeOfficeSetup(x) & WorksInPerson(x)) | (-WorksFromHome(x) | RelaxedSchedule(x)))))", "all x.((Person(x) & (HomeOfficeSetup(x) | Person(x))) & -(HomeOfficeSetup(x) & Person(x) & WorksInPerson(x))) -> (WorksFromHome(x) | RelaxedSchedule(x)))", "all x.((Person(x) & (HomeOfficeSetup(x) | PersonWorkingInPerson(x))) | ((HomeOfficeSetup(x) & PersonWorkingInPerson(x)))) -> (WorksFromHome(x) | RelaxedSchedule(x))))", "all x.((Person(x) & WorksFromHome(x)) |(Person(x) & WorksFromHome(x))) -> (WorksFromHome(x) | RelaxedSchedule(x)))", "all x.((Person(x) & (HomeOfficeSetup(x) | WorksInPerson(x))) | (-(HomeOfficeSetup(x) & WorksInPerson(x))) | RelaxedSchedule(x))))", "all xp.((George(x) & (HasHomeOfficeSetup(x) | WorksInPerson(x))) | (-HasHomeOfficeSetup(x) & WorksInPerson(x))))", "all x.((Person(x) & (HouseOfficeSetup(x) | WorkInPerson(x))) -> ((Person(x) & WorkFromHome(x)) | RelaxedSchedule(x))))", "all x.((Person(x) & (HomeOfficeSetup(x) | WorksInPerson(x))) | (-Person(x) & WorksFromHome(x)))))", "all x.((George(x) & (HomeOfficeSetup(x) -> WorkingInPerson(x) | -(HomeOfficeSetup(x) & WorksInPerson(x)))) -> (WorksFromHome(x) | RelaxedSchedule(x))))", "all x.((Person(x) & (CurrentHomeOfficeSetup(x) | RelaxedSchedule(x))) -> (WorksFromHome(x) | RelaxedSchedule(x)))", "all x.((Person(x) & CanWorkInPerson(x)) | (-CanWorkInPerson(x) & CanWorkFromHome(x))))"]}
{"id": "folio_train_1490", "nl": "Jason Kramer is an American music supervisor.", "fol": "(IsMusicSupervisor(JasonKramer) & IsAmerican(JasonKramer))", "prediction": ["JasonKraker(Krazer,AmericanMusicSupervisor)", "ACM MusicSupervisor(JasonKraker)", "JasonKraber is a professional-musicsupervisor.", "(AmericanMusicSupervisor(JasonKarmer) & BornIn(JasonKarmer))", "Jason Kramer is a music supervisor from the USA.", "Jason Kramer is an AmericanMusicSupervisor(Jason)", "Jason Kramer (AmericanMusicSupervisor(X))", "Jason Kramer is an AmericanMusicSupervisor(k)", "JasonKraber(k) - MusicSupervisor(k) & American(k,y))", "JasonKraker(s) -> (AmericanMusicSupervisor(s) & WorksIn(s,e) & WorksIn(s,t) & WorksOn(s,t)))", "JasonKremer is an AmericanMusicSupervisor(x)", "all x.((JacksonKremer(x) & AmericanMusicSupervisor(x)) -> JasonCrazer(x))", "JasonKremer (AsianMusicSupervisor(Kremer) & Professional(Kremer))", "JasonKarmer is an AmericanMusicSupervisor(Karlsmer,USA)", "Jason Kramer (AmericanMusicSupervisor(AK))", "Jason Kramer is an AmericanMusicSupervisor(Statement)"]}
{"id": "folio_train_1491", "nl": "Some American radio personalities are also music supervisors. ", "fol": "exists x.(IsAmerican(x) & IsMusicSupervisor(x) & IsRadioPersonality(x))", "prediction": ["exists x.(AmericanRadioPerson(x) & MusicSupervisor(x))", "exists x.(RadioPerson(x) & MusicSupervisor(x))", "exists x.(AmericanRadioPerson(x) & MusicSupervisor(x))", "exists x.(AmericanRadioPerson(x) & MusicSupervisor(x))", "exists x.(Animal(x) & RadioPerson(x) & MusicSupervisor(x))", "exists x.(AmericanRadioPerson(x) & MusicSupervisor(x))", "exists x.(AmericanRadioPerson(x) & MusicSupervisor(x))", "exists x.(AmericanRadioPerson(x) & MusicSupervisor(x))", "exists x.(AmericanRadioPerformance(x) & MusicSupervisor(x))", "exists x.(AmericanRadioPerson(x) & MusicSupervisor(x))", "exists x.(AmericanRadioPerson(x) & MusicSupervisor(x))", "exists x.(AmericanRadioPerformance(x) & MusicSupervisor(x))", "exists x.(RadioPerson(x) & MusicSupervisor(x))", "exists x.(RadioPerson(x) & MusicSupervisor(x))", "exists x.(AmericanRadioPerson(x) & MusicSupervisor(x))", "exists x.(AmericanRadioPopularity(x) & MusicSupervisor(x))"]}
{"id": "folio_train_1492", "nl": "Anyone who hosts a show on a public radio station is a radio personality.", "fol": "all x.(HostsShowOnPublicRadio(x) -> IsRadioPersonality(x))", "prediction": ["all x.((HearsShowOnPublicRadioStation(x) & GuestsOnPublicRadioStation(x)) -> RadioPerson(x))", "all x y z.((HostsShow(x) & PublicRadioStation(y) & PublicRadioStation(z) & On(x,y)) -> RadioPersonal(x))", "all x y.((HostsShow(x) & PublicRadioStation(y) & On(x,y)) -> RadioPersonal(x))", "all x.((HostsShowOnPublicRadioStation(x) & OnPublicRadioStation(x)) -> RadioPerson(x))", "all x.((HostsShow(x) & OnCommunityRadioStation(x)) -> RadioPerson(x))", "all x.((HostsShow(x) & PublicRadioStation(x)) -> RadioPopularity(x))", "all x.((HostsOffShow(x) & PublicRadioStation(x)) -> RadioPersonnel(x))", "all x.(HostsCakeOnPublicRadio(x) -> RadioPerson(x))", "all x.((HostsShowOnPublicRadio(x) & OnReach(x)) -> RadioPersonal(x))", "all x.(HostsShowOnPublicRadio(x) -> RadioPerson(x))", "all x.((HostsShow(x) & PublicRadioStation(x)) -> RadioPerson(x))", "all x.(HostsShowOnPublicRadioStation(x) -> RadioPersonal(x))", "all x.((Location(x) & HostsShow(x) & PublicRadioStation(x)) -> RadioPerson(x))", "all x.((HostsShow(x) & PublicRadioStation(x)) -> RadioPerson(x))", "all x.(HostsShow(x) -> RadioPerson(x))", "all x.(HostsShowOnPublicRadio(x) -> RadioPopulator(x))"]}
{"id": "folio_train_1493", "nl": "Joe Rogan is a radio personality.", "fol": "IsRadioPersonality(JoeRogan)", "prediction": ["in radio personality.", "(RadioPersonalist(JoeRogan))", "exists x.(Rogan(x) & RadioPopularity(x))", "All x.(JoeRogan(x) -> RadioPerson(x))", "(RadioPersonal(JoeRogan) & RadioPerson(JoeRogan))", "Joe Rogan,RobannaRadioPersonality(Joe,Rogan)", "Joe Rogan is a RadioPersonal(Joe(Joe))", "all x.(RadioPersonal(x) -> JoeRogan(x))", "(RadioPerson(joeRogan) & RadioPerson(joe_Rogan))", "all x.(RadioPerson(x) -> JoeRogan(x))", "all x.(Rogan(x) -> RadioPersonal(x))", "(RadioPerson(JoeRogan) & Radio(JoeRogan))", "all x.(Rogan(x) -> RadioPopularity(x))", "all x.(RadioPerson(x) -> JoeRogan(x))", "all x.(Rogan(x) -> RadioPersonal(x))", "- RadioPerson(Rogan,Joe,Rogan)"]}
{"id": "folio_train_1494", "nl": "Jason Kramer hosted a show on a public radio station.", "fol": "HostsShowOnPublicRadio(JasonKramer)", "prediction": ["all x y z.((Show(x) & ProgrammingService(y) & PublicRadio(z)) -> HostedBy(x,y,z))", "all x y.((Sask(x) & PublicRadioStation(y)) -> HostsOn(x,y))", "all x y.((JasonKromer(x) & PublicRadioStation(y)) -> HostsShowOn(x,y))", "all x y.((Position(x) | PublicRadioStation(y)) -> JasonKrazerHostsShow(x,y))", "all x.(HostsShowOnPublicRadio(x,y) -> JasonKremer(x,y))", "all x y.((JasonKramer(x) & RadioStation(y) & HostShow(x,y)) -> HostedOn(x,y))", "all x y.((JasonKraker(x) & PublicRadioStation(y) & PresentedBy(x,y)) -> Hosted(x,y))", "all x y.((JasonKarmer(x) & PublicRadioStation(y)) -> HostsShow(x,y))", "all x y.((Sask(x) & PublicRadioStation(y)) -> JasonKrakerHostsShow(x,y))", "all x y z.((Show(x) & PublicRadioStation(y) & JasonKramer(z)) -> HostedOn(x,y,z))", "all x.((Karmer(x) & PublicRadioStation(y)) -> HostedBy(x,y))", "all x y.((Shot(x) & PublicRadioStation(y) & JasonKarmer(x)) -> HostsOn(x,y))", "all x y.((Savanna(x) & PublicRadioStation(y)) -> HostedAt(x,y))", "all x y.((JacksonKarmer(x) & RadioStation(y)) -> hostedShow(x,y))", "all x y.((Show(x) & PublicRadioStation(y)) -> hostedBy(x,y))", "(HostedShowOnPublicRadio(JasonKremer))"]}
{"id": "folio_train_1495", "nl": "Joe Rogan is American.", "fol": "IsAmerican(JoeRogan)", "prediction": ["(American(JoeRogan))", "(American(JoeRogan) -> American(JoeRogan))", "all x.((JoeRogan(x) & American(x)) -> Is(x,y))", "all x.(HospiceGrocer(x) -> American(x))", "(American(JonesRogan) & American(JonesRogan))", "Allen(JoeRogan)", "(Asian(JoeRogan) & American(JoeRogan))", "Joe Rogan is American(Joe,Clothing,Media))", "Is American(JoeRogan)?", "All x.(Ameridian(x) -> JoeRogan(x))", "All x.(JoeRogan(x) -> American(x))", "All x.(JoeRogan(x) -> American(x))", "(American(JoeRogan))", "Joe Rogan is American.", "American.", "(Asian(JoeRogan)"]}
{"id": "folio_train_1496", "nl": "Jason Kramer is a music supervisor.", "fol": "IsMusicSupervisor(JasonKramer)", "prediction": ["JasonKraker(Kramer) is MusicSupervisor(Kramer);", "(MusicSupervisor(JasonKarmer) & WorkedWith(JasonKarmer,Person,Group))", "Jason Kramer is musicsupervisor.", "JasonKarmer (MusicSupervisor)", "all x.((JasonKramer(x) & MusicSupervisor(x)) -> Reads(x,y))", "all x.(MusicSupervisor(x) -> JasonKramer(x))", "JasonKarmer (MusicSupervisor)", "Jason Kramer is a musicsupervisor.", "all x.((JacksonKremer(x) & MusicSupervisor(x)) -> WorksAt(x,y))", "(MusicSupervisor(JacksonKraker) & LivesIn(JacksonKraper))", "JasonKraker is MusicSupervisor(Kremer,Music)", "Jason Kramer is MusicSupervisor(x) & -Operates(x))", "all x.(MusicSupervisor(x) -> JasonKarmer(x))", "is MusicSupervisor(Karker,Jason)", "all x.((JacksonKraker(x) & MusicSupervisor(x)) -> Supervises(x))", "Jason Kramer is MusicSupervisor(jasonkramer)"]}
{"id": "folio_train_1497", "nl": "Jason Kramer is a radio personality.", "fol": "IsRadioPersonality(JasonKramer)", "prediction": ["all x.(JasonKramer(x) -> RadioPerson(x))", "all x.((RadioPsychologist(x) & JasonKarmer(x)) -> RadioPerson(x))", "all x.(RadioPerson(x) -> JasonKarmer(x))", "all x.((RadioPerson(x) & JasonKarmer(x)) -> RadioPerson(x))", "all x.(Kraker(x) -> RadioPopularity(x))", "Jason Kramer is a radio personality.", "Kramer(jason) is a radio personality(jason)", "all x.(RadioPsychopath(x) -> JasonKramer(x))", "all x.(JasonKarmer(x) -> RadioPerson(x))", "all x.(RadioPerson(x) -> JasonKremer(x))", "JasonKramer is radio personality.", "all x.((RadioPerson(x) & JasonKarmer(x)) -> RadioPerson(x))", "all x.(RadioPopularity(x) -> JasonKarmer(x))", "(RadioPopularity(JasonKranmer)", "all x.((RadioPerson(x) & JasonKarmer(x)) -> RadioPerson(x))", "all x.(RotaryPersonal(x) -> JasonKrazer(x))"]}
{"id": "folio_train_1498", "nl": "No coffee sold in Walmart is produced in France. ", "fol": "all x.(SoldInWalmart(x) -> -ProducedInFrance(x))", "prediction": ["-exists x.(Coffee(x) & SoldInWallmart(x) & ProducedIn(x,France))", "all x.((Caff\u00e8(x) & SoldInWalmart(x)) -> -ProducedInFrance(x))", "NoCafe(w) sellsInWalmart(w) & ProducedInFrance(w))", "-exists x.(Coffee(x) & SoldIn(x,Walmart) & ProducedIn(x,France))", "-exists x.((Coffee(x) & SoldInWallmart(x)) -> ProducedInFrance(x))", "-exists x.(Coffee(x) & SoldIn(x,Walmart) & MadeIn(x,France))", "-exists x.(FreeMarket(x) & CoffeeSoldInWalmart(x))", "-exists x.(Wallmart(x) & Coffee(x) & SoldIn(x,Wallmart))", "-all x.((Coffee(x) & SalesInWallmart(x)) -> ProducedInFrance(x))", "-exists x.(Food(x) & SoldInWalmart(x))", "-exists x.(Coffee(x) & SoldInWalmart(x))", "-exists x.(Food(x) & SoldIn(x,walmart,walmart))", "-exists x.((Wallmart(x) & SoldIn(x)) -> ProducedInFrance(x))", "(-exists x.(Coffee(x) & SoldInWalmart(x)) & -ProducedInFrance(x))", "(-(Coffee(Walmart) & Walmart(Walmart)) -> ProducedInFrance(Walmart))", "-exists x.(Coffee(x) & SoldInWalmart(x))"]}
{"id": "folio_train_1499", "nl": "All coffee supplied by the company is sold in Walmart. ", "fol": "all x.(SuppliedByCompany(x) -> SoldInWalmart(x))", "prediction": ["all x y.((Coffee(x) & Company(y) & Provides(y,x)) -> SoldInWalmart(x))", "all x.((Coffee(x) & SuppliedByCompany(x)) -> SoldInWalmart(x))", "all x y.((Coffee(x) & Factory(y)) -> SoldInWallpaper(x,y))", "all x.(Conoffee(x) -> SoldInWalmart(x))", "all x.(Coffee(x) -> SoldInWallmart(x))", "all x.((Coffee(x) & SupplyedByCompany(x) & Walmart(x)) -> SoldIn(x,y))", "All x.(Coffee(x) -> (SupportedByShelter(x) & SoldInWallpaper(x)))", "all x.((Coffee(x) & SuppliedByCompany(x)) -> SoldInWalmart(x))", "all x.(Coffee(x) & SuppliedByCompany(x) -> SoldInWalmart(x))", "all x.(Coffee(x) -> SoldInWalmart(x))", "all x.(Company(x) -> SellsToWalmart(x))", "all x y.((Coffee(x) & Company(y)) -> (SuppliedBy(x,y) & SoldInWallmart(x)))", "all x y.((Coffee(x) & Component(y) & ProducedBy(x,y)) -> SoldInWallpaper(x))", "all x.(SupplyCoffee(x) -> SellInWalmart(x))", "all x y z.((Coffee(x) & Company(y) & Walmart(z)) -> SuppliedBy(x,y,z))", "all x.((Coffee(x) & SuppliedByCompany(x)) -> SoldInWallmart(x))"]}
{"id": "folio_train_1500", "nl": "All coffee produced in Columbia is produced in France. ", "fol": "all x.(ProducedInColumbia(x) -> ProducedInFrance(x))", "prediction": ["all x.(Coffee(x) -> ProducedInColumbia(x))", "all x.(Coffee(x) -> ProducedInColumbia(x))", "all x.(Coffee(x) -> ProducedInColumbia(x))", "all x.(Coffee(x) -> ProducedIn(x,Columbus))", "all x.(Coffee(x) -> ProducedInColumbia(x))", "all x.(Coffee(x) & ProducedIn(x,Columbia) -> ProducedIn(x,France))", "all x y.((Coffee(x) & ProducedInColumbus(x)) -> ProducedInFrance(x,y))", "all x.(Coffee(x) -> ProducedInCumberland(x))", "all x.(ColumbiaCaffee(x) -> ProducedInFrance(x))", "all x.((Coffee(x) & ProducedInColumbia(x)) -> ProducedInFrance(x))", "all x.((Coffee(x) & ProducedInColumbia(x)) -> ProducedInFrance(x))", "all x.(ProducedInColumbia(x) -> ProducedInFrance(x))", "all x.(Coffee(x) -> ProducedInColumbia(x))", "all x.((Coffee(x) & ProducedInColumbia(x)) -> ProducedInFrance(x))", "all x.(Coffee(x) -> ProducedInColumbus(x))", "all x.(Coffee(x) & ProducedInColumbia(x) -> ProducedInFrance(x))"]}
{"id": "folio_train_1501", "nl": "All coffee favored by local residents is coffee produced in Columbia. ", "fol": "all x.(FavoredByLocalResidents(x) -> ProducedInColumbia(x))", "prediction": ["all x.((Coffee(x) & FavoredByLocalResidents(x)) -> ProducedInColumbia(x))", "all x.((Coffee(x) & FavoredByLocalResidents(x)) -> ProducedInColumbus(x))", "all x.((Coffee(x) & FavoredByLocalResidents(x)) -> CoffeeProducedInColumbia(x))", "all x.(PreferredCoffee(x) -> ProducedInColumbus(x))", "all x.((Caffeine(x) & FavoredByLocalResidents(x)) -> ProducedInColumbia(x))", "all x.((Coffee(x) & Favored(x,localResidents)) -> ProducedInColumbia(x))", "all x.((Coffee(x) & FavoredByLocalResidents(x)) -> CoffeeProducedInColumbia(x))", "all x.((Coffee(x) & FavoredByLocalResidents(x)) -> ProducedInColumbia(x))", "all x.((Coffee(x) & FavoriteByLocalResidents(x)) -> ProducedInColumbia(x))", "all x.((Coffee(x) & FavoredByLocalResidents(x)) -> ProducedInColumbia(x))", "all x.((Coffee(x) & FavoredByLocalResidents(x)) -> CoffeeProducedInColumbia(x))", "all x.(PrefersCoffee(x) -> ProducedInColumbia(x))", "all x.((Coffee(x) & FavoredByLocalResidents(x)) -> CoffeeProducedInColorado(x))", "all x.((Coffee(x) & FavoredByLocalResidents(x)) -> ProducedInColumbia(x))", "all x.((Coffee(x) & FavoredByLocalResidents(x)) -> ProducedInColumbia(x))", "all x y.((Caffeine(x) & LocalResident(y) & FavoredBy(x,y)) -> ProducedInColumbia(x))"]}
{"id": "folio_train_1502", "nl": "All coffee with high prices is favored by local residents. ", "fol": "all x.(HighPriceCoffee(x) -> FavoredByLocalResidents(x))", "prediction": ["all x.((Coffee(x) & HighPrices(x)) -> FavoredByLocalResidents(x))", "all x.((Coffee(x) & HighPrices(x)) -> FavoredByLocalResidents(x))", "all x.((Coffee(x) & HighPrices(x)) -> FavoredByResidents(x))", "all x.((Coffee(x) & HighPrices(x)) -> FavoredByLocalResidents(x))", "all x.(HighPrices(x) -> FavoredByLocalResidents(x))", "all x.(HighPrices(x) -> FavoredByLocalResidents(x))", "all x.((Coffee(x) & HighPrices(x)) -> FavoredByLocalResidents(x))", "all x.((Coffee(x) & HighPrices(x)) -> FavoredByLocalResidents(x))", "all x.((Caffeine(x) & HighPrices(x)) -> FavoredByLocalResidents(x))", "all x.((Coffee(x) & HighPrices(x)) -> FavoredByLocalResidents(x))", "all x.((Coffee(x) & HighPrices(x)) -> FavoredByLocalResidents(x))", "all x.((Coffee(x) & HighPrices(x)) -> FavoredByLocalResidents(x))", "all x.((Coffee(x) & HighPrices(x)) -> FavoredByLocalResidents(x))", "all x.((Coffee(x) & HighPrices(x)) -> FavoredByLocalResidents(x))", "all x.((Caffeine(x) & HighPrices(x)) -> FavoredByLocalResidents(x))", "all x.((Coffee(x) & HighPrices(x)) -> FavoredByLocalResidents(x))"]}
{"id": "folio_train_1503", "nl": "Civet Coffee is not produced in Columbia and is cheap.", "fol": "-(ProducedInColumbia(Civetcoffee) & HighPriceCoffee(Civetcoffee))", "prediction": ["all x.(CivetCoffee(x) -> (-ProducedInColumbia(x) & Cheap(x)))", "(-ProducesInColumbia(CivetCoffee) & Cheap(CivetCoffee))", "all x.(CivetCoffee(x) -> (-ProducedInColumbia(x) & Cheap(x)))", "(-ProducedInColumbia(CivetCoffee) & Cheap(CivetCoffee))", "all.(CivetCaffeine(Cy.(NoProducedInColumbia(Cy.) & Cheap(Cy.Cy.))", "(-ProducedInColumbus(CivetCoffee) & Cheap(CivetCoffee))", "all x.(CivetCoffee(x) -> (-ProducedInColumbia(x) & Cheap(x)))", "all x.(CivetCoffee(x) -> (-ProducedInColumbia(x) & Cheap(x)))", "(-ProducedInColumbia(CivetCoffee) & Cheap(CivetCoffee))", "all x.(CivetCoffee(x) -> (-ProducedInColumbia(x) & Cheap(x)))", "all x.(CivetCoffee(x) -> (-ProducedInColumbia(x) & Cheap(x)))", "(-ProducedInColumbia(CivetCoffee) & Cheap(CivetCoffee))", "the product of CivetCoffee(C).", "(-ProducedInColumbia(CivetCoffee) & Cheap(CivetCoffee))", "all x.(CivetCoffee(x) -> (-ProducedInColumbia(x) & Cheap(x)))", "all x.(CivetCoffee(x) -> (-ProducedInColumbia(x) & Cheap(x)))"]}
{"id": "folio_train_1504", "nl": "Jamaica Blue is sold in Walmart or favored by local residents.", "fol": "(SoldInWalmart(Jamaicablue) | FavoredByLocalResidents(Jamaicablue))", "prediction": ["all x.(JamaicaBlue(x) -> (SoldInWalmart(x) | FavoredByResidents(x)))", "all x.(JamaicaBlue(x) -> (SoldInWalmart(x) | FavoredByLastRadars(x)))", "all x.(JamaicaBlue(x) -> (SoldIn(x,Walmart) | FavoredByLocalResidents(x)))", "all x.(JamaicaBlue(x) -> (SoldInWalmart(x) | FavoredByLocalResidents(x)))", "all x.(JamaicaBlue(x) -> (SoldIn(x,Walmart) | FavoredByLocalResidents(x)))", "all x.(JamaicaBlue(x) -> (SoldInWalmart(x) | FavoriteByLocalResidents(x)))", "all x.(JamaicaBlue(x) -> (SoldIn(y,x) | FavoredBy(y,x)))", "all x.(JamaicaBlue(x) -> (SoldInWalmart(x) | FavoredByLocalResidents(x)))", "all x.(JamaicaBlue(x) -> (SoldIn(x,Walmart) | FavoredByLocalResidents(x)))", "all x.(JamaicaBlue(x) -> (SoldInWalmart(x) | FavoredByLocalResidents(x)))", "all x.(JamaicaBlue(x) -> (SoldInWalmart(x) | FavoredByLocalResidents(x)))", "all x.(JamaicaBlue(x) -> (SoldInWalmart(x) | FavoredByLocalResidents(x)))", "all x.(JamaicaBlue(x) -> (SoldInWalmart(x) | FavoredByLocalResidents(x)))", "all x.(JamaicaBlue(x) -> (SoldInWalmart(x) | FavoredByLocalResidents(x)))", "all x.(JamaicaBlue(x) -> (SoldInWalmart(x) | FavoredByLocalResidents(x)))", "all x.(JamaicaBlue(x) -> (SoldInWalmart(x) | FavoredFavoriteByLocalResidents(x)))"]}
{"id": "folio_train_1505", "nl": "Civet Coffee is produced in France.", "fol": "ProducedInFrance(Civetcoffee)", "prediction": ["all x.(CivetCoffee(x) -> ProducedInFrance(x))", "all x.(CivetCoffee(x) -> ProducedInFrance(x))", "(FrenchCivetCoffee(c) & ProducedIn(c,f))", "All x.(CivetCoffee(x) -> ProducesInFrance(x))", "all x.(CivetCoffee(x) -> ProducedInFrance(x))", "CivetCoffeeProducedInFrance.", "all x.(CivetCoffee(x) -> ProducedIn(x,France))", "All x.(CivetCoffee(x) -> ProducedInFrance(x))", "all x.(CivetCoffee(x) -> ProducedInFrance(x))", "all x.(CivetCoffee(x) -> ProducedInFrance(x))", "all x.(CivetCoffee(x) -> ProducedInFrance(x))", "all x.(CivetCoffee(x) -> ProducedInFrance(x))", "CivetCoffee is producedInFrance.", "all x.(CivetCoffee(x) -> ProducedInFrance(x))", "all x.(CivetCoffee(x) -> ProducedInFrance(x))", "all x.(CivetCoffee(x) -> ProducedInFrance(x))"]}
{"id": "folio_train_1506", "nl": "Civet Coffee is not produced in France.", "fol": "-ProducedInFrance(Civetcoffee)", "prediction": ["is notproducedIn(CivetCoffee)", "-FerryProducedCivetCafe(Cfafe)", "CivetCoffee(C) -> -ProducedInFrance(CivetCaff\u00e9)", "CivetCoffee & -ProducedInFrance(c)", "is notsourcedinFrance(CivetCoffee)", "Civet Coffee is not produced in France.", "EfficientCuisineProduction(civetCaff\u00e8)", "CivetCoffee.ca-(ProducedInFrance(CivetCoffee))", "CivetCoffee(c) -> -ProducedInFrance(c))", "((CivetCoffee(c) & -ProducedInFrance(c)))", "isn\u2019tProducedInFrance(civetCoffee)", "all x.(CivetCoffee(x) -> -ProducedInFrance(x))", "CivetCoffee(CivetCoffee) -ProducedIn(CivetCoffee,France))", "CivetCoffeeNotProducedInFrance(c).", "all x.(Civet(x) -> -ProducedInFrance(x))", "(-ProducedInFrance(CivetCoffee))"]}
{"id": "folio_train_1507", "nl": "Jamaica Blue is expensive and supplied by the company.", "fol": "(HighPriceCoffee(Jamaicablue) & SuppliedByCompany(Jamaicablue))", "prediction": ["all x.(JamaicaBlue(x) -> (Expensive(x) & SuppliedByCompany(x)))", "all x y.((JamaicaBlue(x) & Company(y)) -> (Expensive(x) & SupplyedBy(x,y)))", "all x.(JamaicaBlue(x) -> (Expensive(x) & SupplyedBy(x,JamaicaBlue)))", "all x.(JamaicaBlue(x) -> (Expensive(x) & SuppliedByCompany(x)))", "all x y.((JamaicaBlue(x) & Company(y)) -> (Expensive(x) & SupplyedBy(y,z)))", "all x.(JamaicaBlood(x) -> (Expensive(x) & SuppliedByCompany(x)))", "all x y.((JamaicaBlue(x) & Company(y)) -> (Expensive(x,y) & ProvidedBy(x,y)))", "All x.(JamaicaBlue(x) -> (Expensive(x) & SuppliedByCompany(x)))", "all x y.((JamaicaBlue(x) & Company(y)) -> (Expectious(x) & SupplyedBy(x,y)))", "all x.(JamaicaBlue(x) -> (Expensive(x) & SupplyedByCompany(x)))", "all x y.((JamaicaBlue(x) & Company(y)) -> (Expensive(x) & SupplyedBy(x,y)))", "All x.(JamaicaBlue(x) -> (Expectively(x) & SuppliedByCompany(x)))", "all x.(JamaicaBlue(x) -> (Expensive(x) & SuppliedByCompany(x)))", "All x.(JamaicaBlue(x) -> (Expensive(x) & SupplyedByCompany(x)))", "all x y.(JamaicaBlue(x) -> (Expensive(x) & SuppliedBy(x,y)))", "all x.(JamaicaBlue(x) -> (Expectant(x) & ProvidedByCompany(x)))"]}
{"id": "folio_train_1508", "nl": "Jamaica Blue is not expensive and is not supplied by the company.", "fol": "(-HighPriceCoffee(Jamaicablue) & -SuppliedByCompany(Jamaicablue))", "prediction": ["all x.(JamaicaBlue(x) -> (-Expensive(x) & -SuppliedByCompany(x)))", "all x.(JamaicaBlue(x) -> (-Expensive(x) & -SuppliedByCompany(x)))", "all x.(JamaicaBlue(x) -> (-Expensive(x) & -SuppliedByCompany(x)))", "(-Expensive(JellyBoard) & -SoldByCompany(JamaicaBlue))", "all x y.((JamaicaBlue(x) & Company(y)) -> (-Expensive(x) & -SuppliedBy(x,y)))", "all x.(JamaicaBlue(x) -> (-Expensive(x) & -Supplied(x)))", "all x.(JamaicaBlue(x) -> (-Expective(x) & -SuppliedByCompany(x)))", "all x.(JamaicaBlue(x) -> (-Expensive(x) & -SuppliedByCompany(x)))", "all x.(JamaicaBlue(x) -> (-Expensive(x) & -SuppliedByCompany(x)))", "all x.(JamaicaBlue(x) -> (-Early(x) & -SuppliedByCompany(x)))", "all x.(JamaicaBlue(x) -> (-Expensive(x) & -SuppliedByCompany(x)))", "all x.(JamaisBlue(x) -> (-Expensive(x) & -SuppliedByCompany(x)))", "all x.(JamaicaBlue(x) -> (-Expensive(x) & -SuppliedByCompany(x)))", "all x.(JamaicaBlue(x) -(Expensed(x) & -SuppliedByCompany(x)))", "exists x.(JamaicaBlue(x) & -Expectain(x) & -SuppliedByCompany(x))", "all x.(JamaicaBlue(x) -> (-Expects(x) & -SuppliedByCompany(x)))"]}
{"id": "folio_train_1509", "nl": "There are two places named Galicia: either in Spain or in Poland.", "fol": "all x.(((PlaceNamedGalicia(x) -> LocatedInSpain(x)) & -LocatedInPoland(x)) | (-(PlaceNamedGalicia(x) -> LocatedInSpain(x)) & LocatedInPoland(x)))", "prediction": ["exists x.(Place(x) & Galicia(x))", "exists x.(Galicia(x) & (InSpanish(x) | InPoland(x)))", "(exists x.(Place(x) & Galicia(x)))", "exists x.(Place(x) & Galicia(x))", "(-(Place(x) & Galicia)) & (Spanish(x) | Polish(x))))", "exists x.(Galicia(x) & (Spain(x) | Poland(x)))", "exists x.(Place(x) & Galicia(x) & (Spanish(x) | Polish(x)))", "exists x.(Place(x) & GalicianPlace(x))", "exists x y.(Place(x) & (In(y) & Galicia(y)) | in(y) & Poland(y)))", "exists x y.(Place(x) & Place(y) & (In(x,Spanish) | In(x,Poland)))", "exists x.(Place(x) & NamedGalicia(x))", "exists x.(Galicia(x) & (Place(x) | Place(x)))", "exists x.(Place(x) & NamedAroundGalicia(x))", "exists x.(Place(x) & Galicia(x))", "exists x.(Place(x) & NamedGalicia(x))", "exists x y.(Place(x) & Galicia(y) & In(x,y) & (In(x,Spanish) | In(x,Poland))))"]}
{"id": "folio_train_1510", "nl": "Spain is in Europe.", "fol": "all x.(LocatedInSpain(x) -> LocatedInEurope(x))", "prediction": ["all x.(Spanish(x) -> inEurope(x))", "all x y.((Spanish(x) & European(y)) -> In(x,y))", "all x.(Spanish(x) -> InEurope(x))", "all x.(Spanish(x) -> Europe(x))", "(InEurope(Spanish) & InEurope(Spanish))", "all x.(Spanish(x) & Europe(x))", "all x.(Spania(x) -> InEurope(x))", "all x.(Spanish(x) -> InEurope(x))", "all x.(Spain(x) -> InEurope(x))", "all x.(Spanish(x) -> InEurope(x))", "all x.(Spanish(x) -> InEurope(x))", "all x.(Spanish(x) -> InEurope(x))", "all x.(Spain(x) -> InEurope(x))", "(SpainInEurope(Spanien))", "all x y.((Spanish(x) & Europe(y)) -> In(x,y))", "All x.(Spania(x) -> European(x))"]}
{"id": "folio_train_1511", "nl": "Poland is in Europe.", "fol": "all x.(LocatedInPoland(x) -> LocatedInEurope(x))", "prediction": ["all x.(Pomlavia(x) -> InEurope(x))", "(InEurope(Poland))", "all x.(Poland(x) -> InEurope(x))", "all x.(Poland(x) -> InEurope(x))", "all x.(Poland(x) -> InEurope(x))", "all x.(Porland(x) -> InEurope(x))", "all x y.((Poland(x) & Europe(y)) -> In(x,y))", "all x.(Poland(x) -> InEurope(x))", "all x.(Poland(x) -> InEurope(x))", "all x.(Poland(x) -> InEurope(x))", "all x.(Poland(x) -> InEurope(x))", "all x.(Poland(x) -> InEurope(x))", "all x.(Poland(x) -> InEurope(x))", "all x y z.((Poland(x) & Europe(y) & World(z)) -> InWomen(x,z))", "(InEurope(Poland))", "all x.(Poland(x) -> InEurope(x))"]}
{"id": "folio_train_1512", "nl": "Rochelle lives in Europe.", "fol": "all x.(RochelleLives(x) -> LocatedInEurope(x))", "prediction": ["Rochelle lives in Europe.", "Rochelle -LivesInEurope( Rochelle)", "Rochelle lebt in Europe.", "Rochelle lives in Europe.", "(LivesIn( Rochelle) & -LivesIn( Rochelle)))", "Rochelle lives in Europe.", "Rochelle lives in Europe.", "Rochelle livesInEurope( Rochelle)", "Rochelle lives in Europe.", "(LivesInEurope( Rochelle) & HasEuropean(Rochelle))", "Rochelle LivesInEurope(Rockelle,Europa)", "RochelleLivingInEurope(Rochelle)", "Rochelle lives inEurope( Rochelle,Eu)", "Rochelle lives in Europe.", "Rochelle livesInEurope( Rochelle,Europe)", "Rochelle livesInEurope."]}
{"id": "folio_train_1513", "nl": "Dominique does not live in Europe.", "fol": "all x.(DominiqueLives(x) -> -LocatedInEurope(x))", "prediction": ["-exists x.(Dominique(x) & LivesIn(x,Europe))", "(-livesInEurope(Dominique))", "-livesInEurope(Dominique)", "Dominique neexists en Europe.", "Dominique -LivesInEurope.", "(-exists x.(Dominion(x) & LivesIn(x,Europe)))", "(Doubas_Douglas(Douglas) & -LivesInEurope(Douglass))", "-LivesInEurope(Dominique)", "(LivingInEurope(Dominic) | LivingInEurope(Dominic)))", "LazyLifeIn(Dominique)", "Dominique -LivesInEurope(Dominique)", "(Dominion(Dominion) & -LivesInEurope(Dominion))", "(-exists x.(Dominique(x) & LivesIn(x,Europe)) & -exists y.(Dominique(y) & LivesIn(y,Europe))))", "Dominique(Dominique) neLisesInEurope(Dominique)", "-LivesInEurope(Dominique)", "-> -exists x.(Dominique(x) & LivesIn(x,Europe)))"]}
{"id": "folio_train_1514", "nl": "Alfonso lives in Galicia.", "fol": "all x.(AlfonsoLives(x) -> PlaceNamedGalicia(x))", "prediction": ["Alfonso(al) & LivesIn(alfonso,galicia)", "AlfonsoLimitsInGalicia(alfonso,galicia)", "AlfonsoLivesInGalicia.", "all x.(Alfonso(x) -> LivesInGalicia(x))", "AlfonsoLimitsInGalicia.", "Alfonso lives in Galicia.", "AlfonsoLisesInGalicia(alfonso,galicia)", "AlfonsoLivesInGalicia.", "AlfonsoLivingInGalicia(alfonso)", "Alfonso & Galicia(a) -> LivesIn(a,a,g,y))", "Alfonso lives in Galicia.", "AlfonsoChildlife(alfonso,galactica) & LivesIn(alfonso,galactica)", "AlfonsoLucia(alfonso)", "AlfonsoLivesIn(alfonso,galicia)", "Alfonso lives in Galicia.", "all x.(Alfonso(x) -> LivesIn(x,Galicia))"]}
{"id": "folio_train_1515", "nl": "Rochelle lives in Galicia.", "fol": "all x.(RochelleLives(x) -> PlaceNamedGalicia(x))", "prediction": ["Rochelle is a lawyer and LivesInGalicia.", "Rochelle & LivesInGalicia(rose,galicia)", "Rochelle LivesInGalicia( Rochelle)", "Rochelle lives in Galicia.", "Rochelle lives in Galicia.", "Rochelle (LisesIn( Rochelle,Galicia))", "Rochelle lebt in Galicia.", "RochelleLisesIn( Rochelle,Galicia)", "Rochelle lebt in Galicia.", "Rochelle lives in Galicia.", "Rochelle(Rochelle) lives in Galicia.", "Rochelle lives in Galicia.", "RochelleLivesInGalicia.", "Rochelle lives in Galicia.", "RochelleLisesInGalicia(Rochelle)", "Rochelle lives in Galicia."]}
{"id": "folio_train_1516", "nl": "Dominique does not live in Spain.", "fol": "all x.(DominiqueLives(x) -> -LocatedInSpain(x))", "prediction": ["All x.(Dominique(x) -> -LivesIn(x,Spania))", "Dominique nelivesIn(n,Spain)", "-exists x.(Domique(x) & LivesIn(x,Spanish))", "(Living(Dominique,Spain) | LivesIn(Dominique,Spanish)))", "-livesInSpain.", "Dominique dosn'tliveInSpain(Dominique)", "Dominique neLivesIn(Dominique,Spain)", "(exists x.(Dominion(x) & -LivesInSpanish(x)))", "Dominique neexists en Espaa.", "(-livesInSpain(Domino))", "-exists x.(Dominion(x) & LivesIn(x,Spanish))", "Dominique neexists en Espaa.", "(-LivesIn(Dominion,Spania))", "(Dolphin(Dolphe) & -(LivesIn(Dolphin) | LivesIn(Dolphin))))", "(Lifestyle(Dominique) -> -LivesIn(Dominique,Spanish)))", "the family of Dominique."]}
{"id": "folio_train_1517", "nl": "Alfonso lives in Europe.", "fol": "all x.(AlfonsoLives(x) -> LocatedInEurope(x))", "prediction": ["AlfonsoLimitsInEurope.", "AlfonsoLisesInEurope(alfonso)", "Alfonso (LisesInEurope)", "AlfonsoLisesInEurope(alfonso)", "Alfonso lebtInEurope(alfonso)", "All x y.((Alfonso(x) & Europe(y)) -> LivesIn(x,y))", "alfonso,dieth inEurope(alfonso)", "Alfonso, in Europe, lives.", "Alfonso lives InEurope(Alfonso)", "All x.(Alfonso(x) -> LivesInEurope(x))", "AlfonsoLivingInEurope(Alfonso,Europe)", "Alfonso lives in Europe.", "All x.(Alfonso(x) -> LivesInEurope(x))", "Alfonso lives in Europe.", "Alfonso lives in Europe.", "AlfonsoDemerit(Alfonso,Europe)"]}
{"id": "folio_train_1518", "nl": "Ralph Hammerthaler was born in Wasserburg am Inn.", "fol": "BornInLocation(RalphHammerthaler,WasserburgAmInn)", "prediction": ["Ralph Hammerthaler (bornInWaterburg-AmInn)", "Ralph Hammerthaler (bornInWaterburgAmInn)", "Ralph Hammerthaler was born in Wasserburg am Inn.", "Ralph Hammerthaler was born in Wasserburg am Inn.", "RalphHammerthaler was born in Waterburg am Inn.", "Ralph Hammerthaler und WeissbachAmInn.", "Ralph Hammerthaler is a German-born German with origins in Waterburg am Inn.", "Ralph Hammerthaler was born in Wasserburg am Inn.", "RalphHammerthaler wurde in Wasserburg am Inn geboren.", "Ralph Hammerthaler & BornInWaterburgAmInn(roman.c)", "Ralph Hammerthaler (bornInWaterburg(w))", "Ralph Hammerthaler was born in Wasserburg am Inn.", "Ralph Hammerthaler was born in Wasserburg am Inn.", "Ralph Hammerthaler (baptized inWaterburgAmInn)", "-BirthInWaterburgAmInn(RalphHammerthaler)", "Ralph Hammerthaler was born in Wasserburg am Inn."]}
{"id": "folio_train_1519", "nl": "Wasserburg am Inn is in Germany.", "fol": "IsLocatedIn(WasserbAmInn,Germany)", "prediction": ["all x.((WaterburgAmInn(x) & Germany(x)) -> In(x,andIn(x,Germany))", "(Germany(Waterburg am Inn) & LocatedIn(Waterburg,Germany))", "Das Hotel Wasserburg am Inn befindet sich in Deutschland.", "The Hotel Wasserberg am Inn is in Germany.", "Das Wasserburg am Inn befindet sich in Deutschland.", "Die Wasserburg Am Inn befindet sich im Bundesland.", "Wasserburg am Inn is in Germany.", "(Deutschland(Wasserburg) & InNah(Waterburg))", "(German(Waterburg) & Inn(Waterburg))", "Das Wasserburg am Inn liegt in Deutschland.", "Alle x.(WaterburgAmInn(x) -> InGermany(x))", "Wasserburg am Inn is in Germany.", "Das Hotel Waterburg am Inn ist in Deutschland.", "(All x.(Waterburg(x) -> InGermany(x)))", "(Deutschland(Waterburg) & Inn(Waterburg))", "(In Germany.WasserburgAmInn(w) & LocatedIn(w))"]}
{"id": "folio_train_1520", "nl": "Germany is in Europe.", "fol": "IsLocatedIn(Germany,Europe)", "prediction": ["all x y.((Germany(x) & European(y)) -> InEurope(x))", "all x.(Germany(x) -> InEurope(x))", "all x.(Germany(x) -> InEurope(x))", "all x.(Germany(x) -> InEurope(x))", "all x.(Germany(x) -> InEurope(x))", "all x.(Germany(x) -> inEurope(x))", "all x.(Deutschland(x) -> InEurope(x))", "all x.(Germany(x) -> InEurope(x))", "all x.(Germany=InEurope(x))", "All x.(Germany(x) -> InEurope(x))", "all x.(Germany(x) -> InEurope(x))", "all x.(Germany(x) -> Europe(x))", "all x.(Deutschland(x) -> InEurope(x))", "all x.(Germany(x) -> InEurope(x))", "all x (Germany(x) -> European(x))", "All x.(Germany(x) -> InEurope(x))"]}
{"id": "folio_train_1521", "nl": "Ralph Hammerthaler is a German writer.", "fol": "IsWriter(RalphHammerthaler)", "prediction": ["(GermanWriter(RalphHamiltoner)", "(GermanWriter(RalphHammerthaler)", "(GermanWriter(RossHammerthaler)", "(GermanWriter(RalphHummelthaler)", "RalphHammondthaler(x) is a GermanWriter(x))", "(GermanWriter(RalphHoldthaler)", "All x.(Real RalphHammerstaler(x) -> GermanWriter(x))", "all x.((RossHammerthaler(x) & GermanWriter(x)) -> Writer(x))", "(Hirstlar Ralph(Rosemary): GermanWriter(Rosemary))", "RalphHammerthaler is a GermanWriter(RossHelmet(Ross) & Writer(Ross(Hammerthaler))", "RalphHampelthaler (GermanWriter)", "RalphHammerthaler (d.b.GermanWriter(d) & Founder&Speaker(c))", "RalphHammerthaler (GermanWriter)", "RalphHammerthaler is a GermanWriter.", "all x y.((RalphHamptoner(x) & GermanWriter(y)) -> Writer(x,y))", "(GermanWriter(RellyHarmthaler)"]}
{"id": "folio_train_1522", "nl": "Ralph Hammerthaler was born in 1965. ", "fol": "BornInYear1965(RalphHammerthaler)", "prediction": ["Ralph Hammerthaler was born in 1965.", "Ralph Hammerthaler was born in 1965.", "Ralph Hammerthaler was born in 1965.", "Ralph Hammerthaler (born65)", "Ralph Hammerthaler (Birth(Rally,1965))", "Ralph Hammerthaler was born in 1965.", "Ralph Hammerthaler was born in 1965.", "Ralph Hammerthaler was born in 1965.", "Ralph Hammerthaler was born en 1965.", "RalphHammerthaler was born in 1965.", "Ralph Hammerthaler was born in 1965.", "Ralph Hammerthaler was born in 1965.", "Ralph Hammerthaler was born in 1965.", "Ralph Hammerthaler was born in 1965.", "Ralph Hammerthaler (Birth(Rhompson,65))", "RalphHammerthaler (born656)."]}
{"id": "folio_train_1523", "nl": "Ralph Hammerthaler is a writer born in Asia.", "fol": "(IsWriter(RalphHammerthaler) & BornInLocation(RalphHammerthaler,Asia))", "prediction": ["RalphHammerthaler (bornInAsia(r) & Writer(e))", "RalphHammerthaler (Birth(RHammerthaler) | BornInAsia(Rhymnthaler)))", "all x.(Hmmplayer(x) -> (Writer(x) & BornInAsia(x)))", "Ralph Hammerthaler is a writer born in Asia.", "all x.((Writer(x) & BornInAsia(x)) -> RalphHammelthaler(x))", "RalphHammerthaler(RosaFossil(r) & BornInAsia(r))", "RalphHammerthaler is writer born in Asia.", "RalphHammelthaler is a writer and bornInAsia(roman,x))", "(Writer(RalphHammerthaler) & BornInAsia(RalphHammerthaler))", "RalphHallthaler(Roseley) -BirthInAsia(Roseley))", "Ralph Hammerthaler is a writer born in Asia.", "RalphHammerthaler, is an American writer(Hmlmstaller)", "(Birth ofAsianWriter(RalphHammersthaler)", "Ralph Hammerthaler is a Writer BornInAsia(RolfHammerthaler)", "and BornInAsia(RalphHammerthaler,Writer)", "RalphHammerthaler (bornInAsia)"]}
{"id": "folio_train_1524", "nl": "Ralph Hammerthaler lives in Germany.", "fol": "LivesIn(RalphHammerthaler,Germany)", "prediction": ["all x.(RolfHammerthaler(x) -> LivesInGermany(x))", "RalphHunthalerLisesInGermany(Rhodriat)", "RalphHallthaler(Rep.) livesInGermany(Rep.)", "RalphHammerthalerlivesInGermany(roman.horse.d.)", "(LivesIn(RalfredHamlthaler,Germany) & RalphHamlthaler(RolfHamlthaler))", "exists x.(Real RalphHammerthaler(x) & LivesIn(x,Germany))", "(LivingIn(RalphHamptoner,Germany) | LivesIn(RhoderickHamptoner,Germany)))", "All x y.((RyanHammerthaler(x) & HomeCountry(y) & LivesIn(x,y)) -> LivesIn(x,y))", "RalphHammerthalerLisesIn(RoscarHummelthaler,Germany)", "RalphHammelTeller(Rottenberger) live(Rottenberger) & resides(Rottenberger,Germany))", "RalphHammerthalerLisesIn(RalphHammerthaler,Germany)", "RalphHammethalerLisesIn(x,Germany)", "RalphHammondthaler(RichardHammelthaler)", "RalphHammerthalerLisesInGermany(Rotary(Rotary) & LivesIn(Rotary(Rutary,Germany))", "RalphHammerthalerLimitsIn(RoselynHemmingthaler,Germany)", "RalphHammerthalerLivsInGermany(RossHammerthaler)"]}
{"id": "folio_train_1525", "nl": "All books written by Tomas have sold more than 1 million copies. ", "fol": "all x.(WrittenByTomas(x) -> SoldMoreThanOneMillionCopies(x))", "prediction": ["all x.((Book(x) & WrittenByTomas(x)) -> SoldMoreThanOneMillionCopies(x))", "all x.((Book(x) & WrittenByTomas(x)) -> SoldMoreThanOneMillionCopies(x))", "all x.((Book(x) & WrittenByTomas(x)) -> SoldMoreThanMillionCopies(x))", "all x.((Book(x) & WrittenByTomas(x)) -> SoldMoreThanMillionCopies(x))", "all x.((Book(x) & WrittenByTamas(x)) -> SoldMoreThanMillionCups(x))", "all x.((Book(x) & WrittenByTomas(x)) -> SoldMoreThan(x,100,000))", "all x.((Book(x) & WrittenByTomas(x)) -> SoldMoreThan1MCopies(x))", "all x.(TomasBook(x) -> MoreThan2MCopiesSold(x))", "all x y.((Book(x) & WrittenByTomas(x,y)) -> SellSoldMoreThan(x,y))", "all x.((Book(x) & WrittenByTomas(x)) -> SoldMoreThan(x,inMillionCopies))", "all x y.((Book(x) & Tomas(y)) -> SoldMoreThan(x,y))", "all x.((Book(x) & WrittenByTomas(x)) -> SoldMoreThanOneMillionCopies(x))", "all x.((Book(x) & WrittenByTomas(x)) -> SoldMoreThan(x,y))", "all x.((Book(x) & WrittenByTomas(x)) -> SoldMoreThanOneMillionCopies(x))", "all x.((Book(x) & WrittenByTomas(x)) -> SoldMoreThanOneMillionCopies(x))", "all x y.((Book(x) & WrittenByTomas(x,y)) -> SoldMoreThanMillionCopies(x))"]}
{"id": "folio_train_1526", "nl": "Some books that have won Hugo Awards are written by Tomas.", "fol": "exists x.(HasWonHugoAward(x) & WrittenByTomas(x))", "prediction": ["exists x.(Book(x) & WonHugoAward(x) & WrittenByTomas(x))", "exists x.(Book(x) & WonHugoAward(x) & WrittenByTomas(x))", "exists x.(Book(x) & WonHugoAward(x) & WrittenByTomas(x))", "exists x.(Book(x) & WonHugoAward(x) & WrittenByTomas(x))", "exists x.(Book(x) & WonHugeAward(x))", "exists x.(Book(x) & WonHugoAward(x) & WrittenByTomas(x))", "exists x.(Book(x) & WonHugoAward(x) & WrittenByTomas(x))", "exists x y.(Book(x) & HugoAward(y) & Won(x,y))", "exists x.(Book(x) & WonHugeOAwards(x) & WrittenByTomas(x))", "exists x.(Book(x) & WonHugoAwards(x) & WrittenByTomas(x))", "exists x.(Book(x) & WonHugoAwards(x) & WrittenByTomas(x))", "exists x.(Book(x) & WonHugoAward(x) & Tomas(x))", "exists x.(Book(x) & WonHugoAward(x) & WrittenByTomas(x))", "all x.((Book(x) & WonHugoAward(x)) -> WrittenByTomas(x))", "exists x y.((Book(x) & FinishedWith(x,y) & WonHugoAwards(x)) -> WrittenByTomas(x))", "exists x.(Book(x) & WonHungoAward(x) & WrittenByTomas(x))"]}
{"id": "folio_train_1527", "nl": "All books about the future are inspired by Shakespeare. ", "fol": "all x.(IsAboutFuture(x) -> InspiredByShakespeare(x))", "prediction": ["all x.(Book(x) -> InspiredBySassamer(x))", "all x.((Book(x) & InspiredByShakespeare(x)) -> Future(x))", "all x.(Book(x) -> InspiredByShakespeare(x))", "all x.(Book(x) -> InspiredByShakespeare(x))", "all x.(Book(x) -> InspiredBySacrament(x))", "all x.(Book(x) -> InspiredByShakespeare(x))", "all x.(Book(x) -> (InspiredBySaulac(x) & Future(x)))", "all x.(Book(x) -> InspiredByShakespeare(x))", "all x.(Book(x) -> InspiredBySaxby(x))", "all x.((Book(x) & InspiredByScottish(x)) -> Future(x))", "all x.(Book(x) -> InspiredByShakespeare(x))", "all x.(Book(x) -> InspiredByShakespeare(x))", "all x.(Book(x) -> InspiredBySaxon(x))", "all x.(Book(x) -> InspiredByShakespeare(x))", "all x.(Book(x) -> InspiredByShakespeare(x))", "all x.(Book(x) -> InspiredByScottish(x))"]}
{"id": "folio_train_1528", "nl": "2001 is a book either inspired from Shakespeare or it has sold more than 1 million copies.", "fol": "((InspiredByShakespeare(Y2001) & -SoldMoreThanOneMillionCopies(Y2001)) | (-InspiredByShakespeare(Y2001) & SoldMoreThanOneMillionCopies(Y2001)))", "prediction": ["(InspiredFromSaul Shakespeare(2001) | SoldMoreThanOneMillionCopies(2001)))", "all x.(2001(x) -> (InspiredFrom(x,Shakespeare) | SoldMoreThan(x,500,000Copies)))", "all x.((Book(x) & (InspiredByShakespeare(x) | SoldMoreThanMillionCopies(x))) -> 2001(x))", "all x.((Book(x) & InspiredFromSaxon(x,y)) | SoldMoreThanOneMillionCopies(x))", "all x.((Book(x) & (InspiredFromShakespeare(x) | SoldMoreThanOneMillionCopies(x))) -> 2001(x))", "all x.((Book(x) & (InspiredFromShakespeare(x) | SoldMoreThan(x,1))) -> 2001(x))", "all x.((Book(x) & (InspiredFromShakespeare(x) | SoldMoreThan(x,1,999))) -> 2001(x))", "all x.((Book(x) & InspiredFromShakespeare(x)) | SoldMoreThanOneMillionCopies(x))", "all x.((Book(x) & InspiredFromSimonAndSister(x)) | (SoldMoreThan(x,1000000))))", "all x.((Book(x) & InspiredFromShakespeare(x)) | SoldMoreThanOneMillionCopies(x))", "all x.((Book(x) & (InspiredFromScottish(x) | SoldMoreThan(x,Y))) -> -AllowedFromSavingManyCopies(x))", "all x.((Book(x) & InspiredFromShakespeare(x) | SoldMoreThan(x,1000,006))) -> 2001(x))", "all x.((Book(x) & InspiredFromScottish(x)", "all x.((Book(x) & (InspiredFromScottish(x) | SoldMoreThan1MCopies(x))) -> 2001(x))", "all x.(2001(x) -> (InspiredFromSassandra(x) | SoldMoreThanOneMillionCopies(x)))", "all x y.((Book(x) & 2001) & (InspiredFromShakespeare(x,y) | SoldMoreThan(x,y))) -> A MillionCopies(x))"]}
{"id": "folio_train_1529", "nl": "2001 is a book that has either sold more than 1 million copies or it was written by Tomas.", "fol": "((SoldMoreThanOneMillionCopies(Y2001) & -WrittenByTomas(Y2001)) | (-SoldMoreThanOneMillionCopies(Y2001) & WrittenByTomas(Y2001)))", "prediction": ["all x.((Book(x) & SellsMoreThan(x,Y)) | WrittenByTomas(x))", "all x.((Book(x) & SoldMoreThan+1MCopies(x)) | WrittenByTomas(x))", "all x.((Book(x) & (SoldMoreThan500,000Copies(x) | WrittenByTomas(x))) -> 2001(x))", "all x.((Book(x) & SoldMoreThanCultural(x,1).03) | WrittenByTomas(x,1).)) -> 2001(x))", "all x.((Book(x) & (SoldMoreThanOneMillionCopies(x) | WrittenByTomas(x))) -> 2001(x))", "all x y.((Book(x) & Book(y) & SoldMoreThan1MCopies(x,y)) | WrittenByTomas(x,y))", "((Book(2001) & SoldMoreThan(2001,1)) | WrittenBy(2001,1)))", "all x.((Book(x) & Or SoldMoreThan(x,1000)) | WrittenByTomas(x))", "all x.(2001(x) -> (SoldMoreThan(x,1) | WrittenBy(x,2)))", "all x.((Book(x) & SoldMoreThan1MCopies(x)) | WrittenByTomas(x))", "all x.(2001(x) -> (SoldMoreThan(x, 1 Million) | WrittenByTomas(x)))", "all x.((Book(x) & MoreThan1MCopiesSold(x)) | WrittenByTomas(x)) -> 2001(x))", "all x.((Book(x) & InMillionCopiesSold(x)) | WrittenByTomas(x))", "(Book(2001) & (SoldMoreThanOneMillionCopies(2001) | WrittenByTomas(2001))))", "all x y.((Book(x) & FinishedIn(x,y) & SoldMoreThan(x,y)) | WrittenBy(y,x))", "all x.((Book(x) & (SoldMoreThan(x,number) | WrittenByTomas(x))) -> 2001(x))"]}
{"id": "folio_train_1530", "nl": "2001 is a book that has won a Hugo Award.", "fol": "HasWonHugoAward(Y2001)", "prediction": ["2001 (Book) & WonHugoAward(2001))", "2001 - WinsHugoAward(2001)", "all x.((Book(x) & 2001(x)) -> WonHugoAward(x))", "has wonHugoAward(2001)", "(Book(2001) & WonHugoAward(2001))", "all x.((Book(x) & 2001(x)) -> WonHugoAward(x))", "all x.((Book(x) & WonHugoAward(x)) -> 2001(x))", "(WonHugoAward(2001) & Novel(2001))", "2001 is a book that has wonHugoAward(2001)", "all x.((Book(x) & InBook(x,2001)) -> WonHugoAward(x))", "all x.((Book(x) & WonHugoAward(x,2001)) -> Book(x))", "All x.((Book(x) & WonHugoAward(x)) -> 2001(x))", "(Book(2001) & WonHughoAward(2001))", "all x.((Book(x) & WonHugoAward(x)) -> 2001(x))", "all x.((Book(x) & HugoAward(x)) -> 2001(x))", "(WonHugoAward(2001) & -(Book(2001) & Book(2001)))"]}
{"id": "folio_train_1531", "nl": "2001 is a book that has won a Hugo Award and is about the future.", "fol": "(HasWonHugoAward(Y2001) & IsAboutFuture(Y2001))", "prediction": ["all x.((Book(x) & WonHugoAward(x) & AboutFuture(x)) -> 2001(x))", "((Book(2001) & WonHugoAward(2001)) -> AboutFuture(2001))", "all x.((Book(x) & WonHugoAward(x) & AboutFuture(x)) -> 2001(x))", "(2001, wonHugoAward(2001) & AboutFuture(2001))", "all x.((Book(x) & WonHugoAward(x) & AboutFuture(x)) -> 2001(x))", "2001 is a book that won Hugo Award and is abouttheFuture(2001)", "all x.((Book(x) & WonHugoAward(x) & AboutFuture(x)) -> 2001(x))", "all x.(2001(x) -> (WonHugoAward(x) & AboutFuture(x)))", "all x.(2001(x) -> (WonHugoAward(x) & AboutFuture(x)))", "all x.((Book(x) & WonHugoAward(x) & AboutFuture(x)) -> 2001(x))", "all x.((Book(x) & WonHugoAward(x) & AboutFuture(x)) -> 2001(x))", "all x.((Book(x) & WonHugoAward(x) & AboutFuture(x)) -> 2001(x))", "(WonHugoAward(2001) & AboutFuture(2001))", "(Book(2001) & WonHugoAward(2001) & AboutFuture(2001))", "all x.((Book(x) & WonHugo(x) & AwakesForFuture(x)) -> 2001(x))", "\"(2001)) -> (WonHugoAward(2001) & AboutFuture(2001)))"]}
{"id": "folio_train_1532", "nl": "If 2001 either has won a Hugo Award and is about the future, or neither has won a Hugo Award nor is about the future, then 2001 has neither won a Hugo Award nor is written by Tomas.", "fol": "(((HasWonHugoAward(Y2001) & IsAboutFuture(Y2001)) | (-HasWonHugoAward(Y2001) & -IsAboutFuture(Y2001))) -> (-HasWonHugoAward(Y2001) & -WrittenByTomas(Y2001)))", "prediction": ["all x.((2001(x) & (WonHugoAward(x) & AboutFuture(x) | \u2013WonHugoAward(x) & AboutFuture(X))) -> (LikelyTomas(x) & -WrittenByHugoAward(x)))", "all x.((2001(x) & ((WinnedHugoAward(x,2001) & AboutFuture(x)) | -WonHugoAward(x,2001) & -WrittenByTomas(x,2001))) -> (-WinnedHugoAward(x,2001) & -WrittenByTomas(x,2001)))", "((2001) | (WonHugoAward(2001,2001) & AboutFuture(2001)))) & ((2001,2001) & -WonHugoAward(2001) & AboutFuture(2001)) | (-WonHugoAward(2001,2001) & AboutFuture(2001))))", "all x.((2001(x) & ((WonHugeOcean(x) & AboutFuture(x)) | (-WonHugeOcean(x) & -WhatForth(x)))) -> (-WonHugeOcean(x) & WrittenByTomas(x)))", "(all x.((2001(x) & WonHugoAward(x) & AboutFuture(x)) | (-WonHugoAward(x) & -WonHugoAward(x)) | -WrittenByTomas(x))))", "all x.((2001(x) & (WonHugoAward(x) & AboutForward(x) | -WonHugoAward(x) & -WonHogoAward(x))) | -WrittenByTomas(x))", "all x.((2001(x) & -(WonHumoAward(x) & AboutFuture(x)) | -WonHumoAward(x) & AboutFuture(x))) -> ((WonHugoAward(x) & WrittenByTomas(x)) | (-WonHugoAward(x) & WrittenByTomas(x))))", "(all x.((2001) & WonHugoAward(x) & AboutFuture(x)) | (-WonHugoAward(x) & -AboutFuture(x))))", "all x.((2001(x) & (WonHugoAward(x) | AboutFuture(x))) | (-WonHugoAward(x) & -WonFuture(x))))", "all x.((2001) & (WonHugoAward(x) & AboutFuture(x) | -WonHugoAward(x) & -WrittenByTomas(x))) -> -WonHugoAward(x))", "all x.((2001(x) & ((WonHugoAward(x) & AboutFuture(x)) | (-WonHugoAward(x) & (And AboutFuture(x)))))) -> (-WonHugoAward(x) & -WrittenByMatthew(x)))", "(all x.((2001(x) & WonHugoAward(x) & AboutFuture(x)) | -(2001(x) & WonHugoAward(x) & -AboutFuture(x)))) -> -(2001(x) & WonHugoAward(x) & WritenByTomas(x))))", "all x.((2001(x) & (WonGuardoAward(x) & AboutFuture(x)) | (-WonGuardoAward(x) & AboutFuture(x)))))", "all x.((2001(x) & (WonHugoAward(x) & AboutFuture(x) | (-WonHugoAward(x) & -AboutFuture(x)))) -> (-WonHugoAward(x) & -WrittenByTomas(x)))", "(WonHugoAward(2001) & AboutFuture(2001)) | (-WonHugoAward(2001) & -WonGuaranteedForFuture(2001))))", "(all x.((2001) & WonHugoAward(x) & Future(x)) | -(2001 & WonHugoAward(x) & Future(x)))) -> (-WonHugoAward(x) | WrittenByTomas(x))))"]}
{"id": "folio_train_1533", "nl": "No grass is food. ", "fol": "all x.(IsGrass(x) -> -IsFood(x))", "prediction": ["-exists x.(Grass(x) & Food(x))", "-exists x.(Grass(x) & Food(x))", "-exists x.(Grass(x) & Food(x))", "-exists x.(Grass(x) & Food(x))", "-exists x.(Grass(x) & Food(x))", "-exists x.(Grapse(x) & Food(x))", "-exists x.(Grass(x) & Food(x))", "all x.(Grass(x) -> -Food(x))", "-exists x.(Grass(x) & Food(x))", "all x.(Grass(x) -> -Food(x))", "-exists x.(Grass(x) & Food(x))", "-exists x.(Grass(x) & Food(x))", "exists x.(Grass(x) & Food(x))", "all x.(Grass(x) -> -Food(x))", "-exists x.(Grass(x) & Food(x))", "-exists x.(Grass(x) & Food(x))"]}
{"id": "folio_train_1534", "nl": "All meadows are grass.", "fol": "all x.(IsMeadow(x) -> IsGrass(x))", "prediction": ["all x.(Meadow(x) -> IsGrass(x))", "all x.exists y.(Meadow(x) & Grass(y))", "all x.(Meadow(x) -> Green(x))", "all x.(Meadow(x) -> Grass(x))", "all x.(Meadow(x) -> Green(x))", "all x.(Meadow(x) -> Grass(x))", "all x.(Meadow(x) -> (Grass(x) | -Grass(x)))", "all x.(Meadow(x) -> Grass(x))", "all x.(Meadow(x) -> Grass(x))", "all x.(Meadow(x) -> IsGrass(x))", "all x.(Meadow(x) -> Grass(x))", "all x.(Meadow(x) -> (Grass(x) | Grass(x)))", "all x.(Meadow(x) -> (Grass(x) & Grass(x)))", "all x.(Meadow(x) -> Grass(x))", "all x.(Meadow(x) -> Green(x))", "all x.(Meadow(x) -> Grass(x))"]}
{"id": "folio_train_1535", "nl": "All edible things are food. ", "fol": "all x.(IsEdible(x) -> IsFood(x))", "prediction": ["all x.(EdibleThing(x) -> Food(x))", "all x.(Edible(x) -> Food(x))", "all x.(EdibleThing(x) -> Food(x))", "(all x.(EdibleTreatment(x) -> Food(x))", "all x.(Edible(x) -> Food(x))", "all x.(Edible(x) -> Food(x))", "all x.(EdibleThing(x) -> Food(x))", "all x.(EdibleThing(x) -> Food(x))", "all x.(Edible(x) -> Food(x))", "all x.(EdibleThing(x) -> Food(x))", "all x.(EdibleThing(x) -> Food(x))", "all x.(EdibleThing(x) -> Food(x))", "all x.(EdibleThing(x) -> Food(x))", "all x.(EdibleThing(x) -> Food(x))", "all x.(Edible(x) -> Food(x))", "all x.(EdibleThing(x) -> Food(x))"]}
{"id": "folio_train_1536", "nl": "All fruits are edible.", "fol": "all x.(IsFruit(x) -> IsEdible(x))", "prediction": ["all x.(Fruit(x) -> Edible(x))", "all x.(Fruit(x) -> Edible(x))", "all x.(Fruit(x) -> Edible(x))", "all x.(Fruit(x) -> Edible(x))", "all x.(Fruit(x) -> Edible(x))", "all x.(Fruit(x) -> Edible(x))", "all x.(Fruit(x) -> Edible(x))", "all x.(Fruit(x) -> Edible(x))", "all x.(Fruit(x) -> Edible(x))", "all x.(Fruit(x) -> Edible(x))", "all x.(Fruit(x) -> Edible(x))", "all x.(Fruit(x) -> Edible(x))", "all x.(Fruit(x) -> Edible(x))", "(Edible(Fruit) -> AllFruits(Fruit))", "all x.(Fruit(x) -> Edible(x))", "all x.(Fruit(x) -> Edible(x))"]}
{"id": "folio_train_1537", "nl": "All lemons are fruit.", "fol": "all x.(IsLemon(x) -> IsFruit(x))", "prediction": ["all x.(Lemon(x) -> Fruit(x))", "all x.(Lemon(x) -> Fruit(x))", "all x.(Lemon(x) -> Fruit(x))", "all x.(Lemon(x) -> Fruit(x))", "all x.(Lemon(x) -> Fruit(x))", "all x.(Lemon(x) -> Fruit(x))", "all x.(Lemon(x) -> Fruit(x))", "all x.(Lemon(x) -> Fruit(x))", "all x.(Lemon(x) -> Fruit(x))", "all x.(Lemon(x) -> Fruit(x))", "all x.(Lemon(x) -> Fruit(x))", "all x.(Lemon(x) -> Fruit(x))", "all x.(Lemon(x) -> Fruit(x))", "all x.(Lime(x) -> Fruit(x))", "all x.(Lemon(x) -> Fruit(x))", "all x.(Lemon(x) -> Fruit(x))"]}
{"id": "folio_train_1538", "nl": "Grapes are not edible and lemons.", "fol": "-(IsEdible(IsGrape) & IsLemon(IsGrape))", "prediction": ["all x.(Grape(x) -> -Edible(x) & Lemon(x))", "all x y.((Grape(x) & Lemon(y)) -> (-Edible(x) & -Edible(y)))", "(all x.(Grape(x) -> -Edible(x)) & all y.(Limon(y) -> -Edible(y))))", "all x.(Grape(x) -> -Edible(x) & Lemon(x))", "all x.((Grape(x) & -Edible(x)) -> Lemon(x))", "all x.((Grape(x) & -Edible(x)) -> -(Lemon(x) & Grape(x)))", "all x.((Grape(x) & -Edible(x)) | (-Edible(x) & Lemon(x))))", "(all x y.((Grape(x) & Lemon(y)) -> -Edible(x)))", "all x.((Grape(x) & -Edible(x)) -> Lemon(x))", "all x.(Grape(x) -> -Edible(x) & Lemon(x))", "all x.(Grape(x) -> (-Edible(x) & -Lemon(x)))", "all x.((Grape(x) & -Edible(x)) -> Lemon(x))", "all x.(Grape(x) -> (-Edible(x) & -Limon(x)))", "all x.((Grape(x) & -Edible(x)) -> Yellow(x))", "all x y.((Grape(x) & Lemon(y)) -> -Edible(x))", "(-(Grocery(grape) & Lemon(lemon)))"]}
{"id": "folio_train_1539", "nl": "Bananas are grass or fruit.", "fol": "(IsGrass(IsBanana) | IsFruit(IsBanana))", "prediction": ["all x.(Banana(x) -> (Grass(x) | Fruit(x)))", "all x.(Banana(x) -> (Grass(x) | Fruit(x)))", "all x.(Banana(x) -> (Grass(x) | Fruit(x)))", "all x.(Banana(x) -> (Grass(x) | Fruit(x)))", "all x.(Banana(x) -> (Grass(x) | Fruit(x)))", "all x.(Banana(x) -> (GrassFruit(x) | FruitFruit(x)))", "all x.(Banana(x) -> (Grass(x) | Fruit(x)))", "all x.(Banana(x) -> (Landscape(x) & (Grass(x) | Fruit(x))))", "all x.(Banana(x) -> (Grass(x) | Fruit(x)))", "all x.(Banana(x) -> (Grass(x) | Fruit(x)))", "all x.(Banana(x) -> (Grass(x) | Fruit(x)))", "all x.(Banana(x) -> (Grass(x) | Fruit(x)))", "all x.(Banana(x) -> (Grass(x) | Fruit(x)))", "all x.(Banana(x) -> (Grass(x) | Fruit(x)))", "all x.(Banana(x) -> (Grass(x) | Fruit(x)))", "all x.(Banana(x) -> (Grass(x) | Fruit(x)))"]}
{"id": "folio_train_1540", "nl": "Grapes are a food.", "fol": "IsFood(IsGrape)", "prediction": ["all x.(Grape(x) -> Food(x))", "all x.(Grape(x) -> Food(x))", "all x.(Grape(x) -> Food(x))", "exists x.(Grape(x) & Food(x))", "all x.(Grape(x) -> Food(x))", "all x.(Grape(x) -> Food(x))", "all x.(Grape(x) -> Food(x))", "all x.(Grape(x) -> Food(x))", "all x.(Grape(x) -> Food(x))", "all x.(Grape(x) -> Food(x))", "(Food(grapes) & Food(grape))", "all x.(Grape(x) -> Food(x))", "all x.(Grape(x) -> Food(x))", "all x.(Grape(x) -> Food(x))", "all x.(Grape(x) -> Food(x))", "all x.(Grape(x) -> Food(x))"]}
{"id": "folio_train_1541", "nl": "Grapes are not a food.", "fol": "-IsFood(IsGrape)", "prediction": ["all x.(Grape(x) -> -Food(x))", "all x.(Grape(x) -> -Food(x))", "all x.(Grape(x) -> -Food(x))", "all x.(Grape(x) -> -Food(x))", "all x.(Grape(x) -> -Food(x))", "all x.(Grape(x) -> -Food(x))", "all x.(Grape(x) -> -Food(x))", "all x.(Grape(x) -> -Food(x))", "all x.(Grape(x) -> -Food(x))", "all x.(Grape(x) -> -Food(x))", "all x.(Grape(x) -> -Food(x))", "all x.(Grape(x) -> -Food(x))", "all x.(Grape(x) -> -Food(x))", "all x.(Grape(x) -> -Food(x))", "all x.(Grape(x) -> -Food(x))", "all x.(Grape(x) -> -Food(x))"]}
{"id": "folio_train_1542", "nl": "Bananas are a lemon and meadow.", "fol": "(IsLemon(IsBanana) & IsMeadow(IsBanana))", "prediction": ["all x.(Banana(x) -> (Lemon(x) & Meadow(x)))", "all x.(Banana(x) -> (Lemon(x) & Meadow(x)))", "all x.(Banana(x) -> (Limon(x) & Meadow(x)))", "all x y.((Banana(x) & Lemon(y)) -> Meadow(x,y))", "all x.(Banana(x) -> (Lemon(x) & Meadow(x)))", "all x.(Banana(x) -> (Lemon(x) & Meadow(x)))", "all x.(Banana(x) -> (Limon(x) & Meadow(x)))", "all x.(Banana(x) -> (Lemon(x) & Meadow(x)))", "all x.(Banana(x) -> (Lemon(x) & Meadow(x)))", "all x.(Banana(x) -> (Limon(x) & Meadow(x)))", "all x.(Banana(x) -> (Lime(x) & Meadow(x)))", "all x.(Banana(x) -> (Lime(x) & Meadow(x)))", "all x.(Banana(x) -> (Limon(x) & Meadow(x)))", "all x.(Banana(x) -> (Limon(x) & Meadow(x)))", "all x.(Banana(x) -> (Lemon(x) & Meadow(x)))", "all x.(Banana(x) -> (Lemon(x) & Meadow(x)))"]}
{"id": "folio_train_1543", "nl": "Bananas are not both a lemon and a meadow.", "fol": "-(IsLemon(IsBanana) & IsMeadow(IsBanana))", "prediction": ["all x.(Banana(x) -> (-(Lemon(x) & Meadow(x))))", "all x.(Banana(x) -> -(Lemon(x) & Meadow(x)))", "all x.(Banana(x) -> (-Limon(x) & Meadow(x)))", "all x.(Banana(x) -> (-(Limon(x) & Meadow(x))))", "all x.(Banana(x) -> -(Lemon(x) & Meadow(x)))", "all x.(Banana(x) -> -(Limon(x) & Meadow(x)))", "all x.(Banana(x) -> -(Limon(x) & Meadow(x)))", "all x.(Banana(x) -> (-Limon(x) & Meadow(x)))", "(-(Lime(banana) & Meadow(banana)))", "all x.(Banana(x) -> -(Lemon(x) & Meadow(x)))", "all x.(Banana(x) -> -(Lemon(x) & Meadow(x)))", "all x.(Banana(x) -> [-(Lemon(x) & Meadow(x))))", "all x.(Banana(x) -> -((Lemon(x) & Meadow(x))))", "all x.(Banana(x) -> -(Limon(x) & Meadow(x)))", "all x.(Banana(x) -> (-Limon(x) & Meadow(x)))", "all x.(Banana(x) -> -(Lemon(x) & Meadow(x)))"]}
{"id": "folio_train_1544", "nl": "The Golden State Warriors are a team from San Francisco.", "fol": "(IsTeam(Goldenstatewarriors) & BasedIn(Goldenstatewarriors,Sanfrancisco))", "prediction": ["all x.(GoldenStateWarriors(x) -> FromSanFrankfort(x))", "all x y.((GoldenStateWarrior(x) & SanFranco(y)) -> Team(x))", "is a team from SanFrancisco.", "all x.(GoldenStateWarrior(x) -> (A TeamFrom(x,SanFernando) & SanFernando)))", "All x.(GoldenStateWarrior(x) -> TeamFromSanFernosio(x))", "(RoseStateWarriors(x) & TeamFrom(x,SF))", "all x.(GoldenStateWarriors(x) -> TeamFromSanFrancisco(x))", "all x.(GoldenStateWarrings(x) -> TeamFromSanFrankfurt(x))", "all x.(GoldenStateWarrings(x) -> (TeamFromSanFernando(x) & SanFernando(x)))", "All x.(GoldenStateWarrior(x) -> From(x,sanfriove))", "All x.(GoldenStateWarriors(x) -> TeamFromSanFernando(x))", "all x.(GoldenStateWarrior(x) -> (TeamFromSanFerness(x) & FromSanFerness(x)))", "the GoldenStateWarriors(goldenstatewarriors) -> (Team(x) & SanFrancisco(x)))", "the GoldenStateWarriors(x) -> (Team(x) & LocatedInSanFrancisco(x)))", "All x.(GoldenStateWarriors(x) -> (TeamFromSanFrancisco(x) & FromSanFrance(x)))", "all x.(GoldenStateWarriors(x) -> TeamFrom(x,SanFrankfort))"]}
{"id": "folio_train_1545", "nl": "The Golden State Warriors won the NBA finals.", "fol": "WonNBAFinals(Goldenstatewarriors,Nbafinals)", "prediction": ["(GoldenStateWarriors(GoldenStateWarriors) & wonNBAFinals(GoldenStateWarriors))", "all x y.((GoldenStateWarriors(x) & NBAFinal(y)) -> Won(x,y))", "The GoldenStateWarriors won NBA Finals.", "All x y z.((GoldenStateWarrior(x) & NBAFinal(y) & Final(z) & Wins(x,y,z)) -> Woes(x,z))", "(WinsNBAFinals(GoldenStateWarriors))", "(Warriors(GoldenState(Warrior) & FinalsWin(goldenstate))", "Die GoldenStateWarrenWarriorsWinnenNBAFinals(Bengal(x,Banana))", "all x.(GoldenStateWarrior(x) -> WinsBendalls(x))", "All x.(GoldenStateWarriors(x) -> WonNBAFinals(x))", "All x y.((GoldenStateWarriors(x) & NBAFinals(y)) -> Won(x,y))", "(Battle(GoldenStateWarriors) & WonNBAFinals(GoldenStateWarriors))", "(GoldenStateWarriors(g) & ChampionNBABirth(h))", "winnings of NBA Finals.", "The GoldenStateWarriors(g) vs.NBAFinals(g).", "(Warriors(GoldenState(Warriors) & WINsPlayoff(GunnerState(Warriors))", "All x.(GoldenStateWarrior(x) -> WinsNBAFinals(x))"]}
{"id": "folio_train_1546", "nl": "All teams attending the NBA finals have more than thirty years of history.", "fol": "all x.((IsTeam(x) & IsAttendingNBAFinals(x,Nbafinals)) -> HasMoreThanYears(x,Thirtyyearsofhistory))", "prediction": ["all x.((Team(x) & AttendsNBAFinals(x)) -> MoreThanThreeYearsOfHistory(x))", "all x.((Team(x) & AttendsNBAFinals(x)) -> MoreThanThreeYearsOfHistory(x))", "all x.((Team(x) & AttendsNBAFinals(x)) -> MoreThanTrinityYearsOfHistory(x))", "all x y.((Team(x) & NBAFinals(y)) -> HasHistory(x,y))", "all x.((Team(x) & AttendsNBAFinals(x)) -> MoreThanThreeYearsOfHistory(x))", "all x y.((Team(x) & Team(y) & AttendsBasketballFinals(x,y)) -> MoreThanThreeYearsOfHistory(x))", "all x.(DwightYearsOfHistory(x) -> AttendsNBAFinals(x))", "all x.((Team(x) & AttendsShowdown(x,NBA Finals)) -> Has+34Years(x))", "all x y.((Team(x) & NBAFinals(y) & Attends(x,y)) -> MoreThanThreeYearsOfHistory(x))", "all x.((Team(x) & Attends NBAFinals(x)) -> HistoryThirtyYears(x))", "all x.((Team(x) & NBAFinals(x)) -> HasMoreThanThirtyYearsOfHistory(x))", "all x.((Team(x) & AttendsBallabyFinals(x)) -> MoreThanThirtyYearsOfHistory(x))", "all x.((Team(x) & AttendsNBAFinals(x)) -> MoreThan30YearsOfHistory(x))", "all x.((Team(x) & ThenNBAFinals(x)) -> MoreThanHistory(x,30))", "all x.((Team(x) & AttendsDeadline(x,30)) -> HistoricalThirtyYears(x))", "all x.((Team(x) & AttendsNBAFinals(x,thirty)) -> HasHistory(x))"]}
{"id": "folio_train_1547", "nl": "Boston Celtics are a team that lost the NBA finals.", "fol": "(IsTeam(Bostonceltics) & LostNBAFinals(Bostonceltics,Nbafinals))", "prediction": ["all x.(BostonCeltic(x) -> Lose-NBAFinals(x))", "All x.(BostonCelebrities(x) -> LosesClaysNBAFinals(x))", "all x.(BostonCeltic(x) -> (LoseNBAFinals(x) | LoseAFAs(x)))", "all x y.((BostonCelebrities(x) & NBAFinals(y)) -> Lost(x,y))", "all x.(BostonCeltics(x) -> LosesNBAFinals(x))", "all x.(BostonCelebrities(x) -> (LoseNBAFinals(x) & Basketball(x)))", "all x.(BostonCelebrities(x) -> LosedNBAFinals(x))", "all x.(BostonCeltic(x) -> LostNationalSeason(x))", "all x y.((BostonCelebrities(x) & BasketballFinal(y) & Losing(x,y)) -> Celtics(x))", "all x y.((BostonCleathers(x) & NBAFinal(y)) -> Lost(x,y))", "all x.(BostonChillens(x) -> LosesNBAFinals(x))", "all x.(BostonCelebrities(x) -> LosesNBAFinals(x))", "all x.(BostonCeltics(x) -> (LostNBAFinals(x) & -EndsOfNBA(x)))", "all x.(BostonCeltics(x) -> LosedNBAFinals(x))", "all x.(BostonClay(x) -> LosesNBAFinals(x))", "all x y.((BostonCelebrities(x) & NBAFinal(y)) -> Lost(x,y))"]}
{"id": "folio_train_1548", "nl": "If a team wins the NBA finals, then they will have more income.", "fol": "all x.((IsTeam(x) & WonNBAFinals(x,Nbafinals)) -> WillHaveMoreIncome(x))", "prediction": ["all x.(WinsNBAFinals(x) -> MoreIncome(x))", "all x.(WinsNBAFinals(x) -> MoreIncome(x))", "all x.((Team(x) & Wins NBAFinals(x)) -> MoreIncome(x))", "all x.((Team(x) & WinsLeague(x)) -> MoreIncome(x))", "all x y.((Team(x) & WinsNBAFinals(x)) -> AddedIncome(x))", "all x.((Team(x) & Wins NBAFinals(x)) -> MoreIncome(x))", "all x.(WonNBAFinals(x) -> MoreIncome(x))", "all x.((Team(x) & WinsKNH Finals(x)) -> MoreIncome(x))", "all x.(WinsNBAFinals(x) -> HasMoreIncome(x))", "all x.((Team(x) & WinsFinals(x)) -> MoreIncome(x))", "all x.((Team(x) & WinsNationalBallad(x)) -> MoreIncome(x))", "all x.(WinsNBAFinals(x) -> MoreIncome(x))", "all x.((TeamThatWinsNBAFinals(x)) -> MoreIncome(x))", "all x.(WinsNBAFinals(x) -> MoreIncome(x))", "all x.(WonSEC Finals(x) -> MoreIncome(x))", "all x.(Wins NBAFinals(x) -> HasMoreIncome(x))"]}
{"id": "folio_train_1549", "nl": "If a team wins or loses at the NBA finals, then they are attending the finals.", "fol": "all x.((WonNBAFinals(x,Nbafinals) | LostNBAFinals(x,Nbafinals)) -> IsAttendingNBAFinals(x,Nbafinals))", "prediction": ["all x.((Team(x) & WinsWills(x,Balls)) | Loses(x,Balls)) -> AttendingFinals(x))", "all x.((Team(x) & WinsOrLosesAtNBAFinals(x)) -> AttendingFinals(x))", "all x.((Team(x) & WinsOrLoses(x) & NBAFinals(x)) -> AttendingFinals(x))", "all x.((Team(x) & (Wins(x) | Loses(x))) -> AttendsAtAtAtAtAtAtNBAFinals(x))", "all x.((Team(x) & WinsOrLosesAtHananasFinals(x)) -> AttendingFinals(x))", "all x,y.((Team(x) & (WinsAt(x,y) | LosesAtNBA(x))) -> AttendingFinals(x))", "all x.(WinsOrLoses(x,not NBAFinals) -> AttendingFinals(x))", "all x.(WINS(x) | LosesAtTheNBAFinals(x)) -> AttendingFinals(x))", "all x.((Team(x) & (Wins(x,NY) | Loses(x,y))) -> AttendingFinals(x))", "all x.(WinsOrLosesAtTheNBAFinals(x) -> AttendingFinals(x))", "all x.((Team(x) & (Wins(x) | Loses(x)) & NBAFinals(x)) -> AttendingFinals(x))", "all x.((Team(x) & WinsOrLosesAtNBAFinals(x)) -> AttendingFinals(x))", "all x.((Team(x) & WinsAtNFinals(x) & LosesAtFinals(x)) -> AttendingFinals(x))", "all x y.((Team(x) & Wins(x,y) & LosesAtFinals(x,y)) -> AttendingFinals(x,y))", "all x.((Team(x) & WinsOrLosesAtNBAFinals(x)) -> AttendingFinals(x))", "all x.((Team(x) & Wins(x) & Loses(x)) -> AttendingFinals(x))"]}
{"id": "folio_train_1550", "nl": "The Boston Celtics is from San Francisco.", "fol": "BasedIn(Bostonceltics,Sanfrancisco)", "prediction": ["(SanFernando(BostonCrickets) & SanFernando(BostonCrickets))", "all x.(BostonCrickets(x) -> SanFrancisco(x))", "The BostonCrickets(Boston) & SanFrancisco(Boston))", "All x.(BostonCeltics(x) -> FromSanFrankfurt(x))", "(SanFrancisco(BostonClocks) & LocatedIn(BostonClocks))", "All x y.((BostonCrickets(x) & SanFrancisco(y)) -> Anibal(x,y))", "All x.(BostonCricket(x) -> SanFrankfort(x))", "The BostonCelebs(x) & SanFrenzian(x) -> BostonCleaver(x))", "(SanFrancisco(BostonCleavers) & HasSanFrancisco(BostonCleavers))", "(BostonClaws(x) & LocatedInSanFrancisco(x))", "The BostonClocks(x) & SanFrancisco(x))", "All x.(BostonCrickets(x) -> SanFrancisco(x))", "Both are based in San Francisco.", "All x.(BostonCrickets(x) -> SanFranciais(x))", "-ReferenceBetweenBoston(Celtics)", "(From(BostonCelebrity(x) & SanFrancisco(x))"]}
{"id": "folio_train_1551", "nl": "The Boston Celtics has more than 30 years of history.", "fol": "HasMoreThanYears(Bostonceltics,Thirtyyearsofhistory)", "prediction": ["all x y.((BostonCrickets(x) & Y.((DowntownCity(y) & MoreThan(y,9)))) -> HasHistory(x,y))", "all x.(BostonCrickets(x) -> HasMoreThan(x,30))", "all x y.((BostonCelebs(x) & Celtics(y)) -> HasHistory(x,y))", "all x.(BrooklynCelebs(x) -> MoreThan(x,30))", "all x.(BostonCleason(x) -> HasMoreThan30YearsOfHistory(x))", "(LessThan30YearsOfHistory(BostonCleavers)", "All x.(BostonCelebrities(x) -> HasLessThan30YearsOfHistory(x))", "The BostonClocks have more than 30yrsOfHistory(BostonCrickets)", "all x y.((BostonCeltics(x) & Y.((BostonCelebs(y) & MoreThan(y,33)))) -> HasHistory(x,y))", "all x.(BostonClowns(x) -> OverCompleteHistory(x,30))", "all x y.((BostonCelebs(x) & Celtics(y) & MoreThan30YearsOfHistory(x)) -> MoreThan30YearsOfHistory(x,y))", "all x.(BostonCthules(x) -> HasMoreThan30YearsOfHistory(x))", "all x.(BostonCrickets(x) -> AvemnsHistory(x,30))", "all x.(BostonCrickets(x) -> HasMoreThan30YearsOfHistory(x))", "All x.(BostonCrickets(x) -> HasMoreThan30YearsOfHistory(x))", "all x.((BostonCelebrities(x) & MoreThan30Years(x)) -> Celtics(x))"]}
{"id": "folio_train_1552", "nl": "The Golden State Warriors will have more income for gate receipts.", "fol": "WillHaveMoreIncome(Goldenstatewarriors)", "prediction": ["all x.(GoldenStateWarrior(x) -> MoreIncomeForGateReceipts(x))", "all x.(GoldenStateWarrior(x) -> MoreIncome(x))", "all x.(GaleReceives(x) -> MoreIncome(x))", "all x.(GoldenStateWarrior(x) -> MoreIncomeForGateReceipts(x))", "all x.(GoldenStateWarrior(x) -> MoreIncomeForGateGathers(x))", "All x.(GoldenStateWarrior(x) -> MoreIncomeToGateReceives(x))", "all x.(GoldenStateWarrior(x) -> (HasMoreIncomeForGateReceipts(x)))", "all x.(GoldenStateWarrior(x) -> MoreEarningForGateReceipts(x))", "all x.(GoldenStateWarrior(x) -> MoreIncomeForGateReceipts(x))", "all x y.((GoldenStateWarrior(x) & GateReceive(y)) -> MoreIncome(x,y))", "all x.(GoldenStateWarrior(x) -> HasMoreIncomeForGateReceipts(x))", "all x.(GoldenStateWarrior(x) -> MoreIncomeForGateReceipts(x))", "all x.(GoldenStateWarrior(x) -> MoreIncomeForGateReceipts(x))", "all x y.((GoldenStateWarrior(x) & GateReceipt(y)) -> MoreIncomeFor(x,y))", "all x y.((GoldenStateWarrior(x) & GateReceipt(y)) -> MoreIncome(x,y))", "all x.((GoldenStateWarrior(x) & GateReceipt(x)) -> MoreIncome(x,GateReceipts))"]}
{"id": "folio_train_1553", "nl": "Maya will play violin if and only if she never injures her fingers.", "fol": "(CanInjureFingers(Maya) -> -WillPlayViolin(Maya))", "prediction": ["all x.((Maya(x) & -InjuresFingers(x)) -> WillPlayViolin(x))", "all x.((Maya(x) & -InjuresFingers(x)) -> WillPlayViolin(x))", "all x.((Maya(x) & -InjuresFingers(x)) -> PlaysViolin(x))", "all x.((Maya(x) & -InjuresFingers(x)) -> WillPlayViolin(x))", "all x.((Maya(x) & -InjuresFingers(x)) -> WillPlayViolin(x))", "all x.((Maya(x) & NeverInjuresFingers(x)) -> Violin(x))", "all x.((Maya(x) & -InjuresFingers(x)) -> WillPlayViolin(x))", "all x.((Maya(x) & -InjuresFingers(x)) -> WillPlayViolin(x))", "all x.((Maya(x) & -InjuresFingers(x)) -> WillPlayViolin(x))", "all x.((Maya(x) & -InjuresFingers(x)) -> WillPlayViolin(x))", "all x.((Maya(x) & -InjuresFingers(x)) -> Violin(x))", "all x.((Maya(x) & InjuresFingers(x)) -> WillPlayViolin(x))", "all x.((Maya(x) & -InjuresFingers(x)) -> WillPlayViolin(x))", "all x.((Maya(x) & -InjuresFingers(x)) -> WillPlayViolin(x))", "all x.((Maya(x) & -InjuresFingers(x)) -> WillPlayViolin(x))", "all x.((Maya(x) & -InjuresFingers(x)) -> WillPlayViolin(x))"]}
{"id": "folio_train_1554", "nl": "Volleyball players can injure their ankle, fingers, or shoulder.", "fol": "all x.(IsVolleyballPlayer(x) -> CanInjureFingers(x))", "prediction": ["all x.(VolleyballPlayer(x) -> (InjuresAnkle(x) | InjuresFingers(x) | InjuresShoulder(x)))", "all x.(VolleyballPlayer(x) -> (Injure(x,Ankle) | Injure(x,Fingers) | Injure(x,Shoulder)))", "all x.(VolleyballPlayer(x) -> (InjuresAnkle(x) | InjuresFingers(x) | InjuresShoulder(x)))", "all x.(VolleyballPlayer(x) -> (InjuresAngle(x) | InjuresFingers(x) | InjuresShoulder(x)))", "all x.(VolleyballPlayer(x) -> (InjureAnkle(x) | InjureFingers(x) | InjureShoulder(x)))", "all x y z.((VolleyballPlayer(x) & (Algebra(y) | Fingers(y) | Shoulder(y))) -> Injure(x,y,z))", "all x.(VolleyballPlayer(x) -> (InjuresAnkle(x) | InjuresFingers(x) | InjuresShoulder(x)))", "all x.(VolleyballPlayer(x) -> (InjuresAnkle(x) | InjuresFingers(x) | InjuresShoulder(x)))", "all x.(VolleyballPlayer(x) -> (InjuresAnkle(x) | InjuresFingers(x) | InjuresShoulder(x)))", "all x.(VolleyballPlayer(x) -> (InjuresAnkle(x) | InjuresFingers(x) | InjuresShoulder(x)))", "all x.(VolleyballPlayer(x) -> (InjureAnkle(x) | InjureFingers(x) | InjureShoulder(x)))", "all x.(VolleyballPlayer(x) -> (InjuresAnkle(x) | InjuresFingers(x) | InjuresShoulder(x)))", "all x.(VolleyballPlayer(x) -> (Injures(x,ankle) | Injures(x,fingers) | Injures(x,shoulder)))", "all x.(VolleyballPlayer(x) -> (Injure(x,ankle) | Injure(x,fingers) | Injure(x,shoulder)))", "all x y z.((VolleyballPlayer(x) & Knee(y) & (Ankle(z) | Finger(z) | Shoulder(z))) -> CanInjure(x,y,z))", "all x.(VolleyballPlayer(x) -> (InjureAngel(x) | InjureFingers(x) | InjureShoulder(x)))"]}
{"id": "folio_train_1555", "nl": "Maya is a volleyball player.", "fol": "IsVolleyballPlayer(Maya)", "prediction": ["maya is volleyball player.", "all x.(Maya(x) -> VolleyballPlayer(x))", "all x.((Maya(x) & VolleyballPlayer(x)) -> HasPlayed(x,y))", "(VolleyballPlayer(Maya) | VolleyballPlayer(Maya)))", "All x y.((Maya(x) & VolleyballPlayer(y)) -> Plays(x,y))", "Maya is volleyball player.", "(VolleyballPlayer(Maya) & Maya(Maya))", "Maya is an avid volleyball player.", "all x.(Maya(x) -> VolleyballPlayer(x))", "all x.(VolleyballPlayer(x) -> Maya(x))", "all x.(Maya(x) -> VolleyballPlayer(x))", "all x.(Maya(x) -> VolleyballPlayer(x))", "all x.(Maya(x) -> VolleyballPlayer(x))", "all x.(Maya(x) -> VolleyballPlayer(x))", "all x.(VolleyballPlayer(x) -> Maya(x))", "Maya is volleyball player."]}
{"id": "folio_train_1556", "nl": "Maya will not play violin.", "fol": "-WillPlayViolin(Maya)", "prediction": ["(-PlayViolin(Maya))", "Malia -PlaysViolin(Maya)", "all x.(Maya(x) -> -PlaysViolin(x))", "all x.(Maya(x) -> -PlaysViolin(x))", "(-PlayViolin(Maya))", "all x.(Maya(x) -> -PlayViolin(x))", "all x.(Maya(x) -> -PlayViolin(x))", "all x.(Maya(x) -> -PlayViolin(x))", "maya is not playing violin (y.(Maya) & Duration(y)))", "all x.(Maya(x) -> -PlayViolin(x))", "all x.(Maya(x) -> -PlaysViolin(x))", "all x.(Maya(x) -> -PlayVividian(x))", "all x.(Maya(x) -> -PlayViolin(x))", "all x.(Maya(x) -> -PlayViolin(x))", "all x.(Maya(x) -> -PlayViolin(x))", "all x.(Maya(x) -> -PlaysViolin(x))"]}
{"id": "folio_train_1557", "nl": "All devices with the company logo belong to the company. ", "fol": "all x.(HasCompanyLogo(x) -> BelongsToCompany(x))", "prediction": ["all x.((Device(x) & HasCompanyLogo(x)) -> BelongsToCompany(x))", "all x.((Device(x) & HasCompanyLogo(x)) -> BelongsToCompany(x))", "all x.((Device(x) & CompanyLogo(x)) -> BelongTo(x,Company))", "all x y.((Device(x) & CompanyLogo(y)) -> BelongsTo(x,y))", "all x.((Device(x) & CompanyLogo(x)) -> BelongsToCompany(x))", "all x y.((Device(x) & CompanyLogo(y)) -> BelongsTo(x,y))", "all x y.((Device(x) & CompanyLogoAndAppartenance(x)) -> CompanyLogo(y))", "all x.((Device(x) & CompanyLogo(x)) -> BelongingTo(x,Company))", "all x.((Device(x) & CompanyLogo(x)) -> BelongsTo(x,Company))", "all x.(HasCompanyLogo(x) -> BelongsToCompany(x))", "all x y.((Device(x) & CompanyLogo(y)) -> BelongsTo(x,y))", "all x.((Device(x) & CompanyLogo(x)) -> BelongsToCompany(x))", "all x.((Device(x) & HasCompanyLogo(x)) -> BelongsToCompany(x))", "all x.((Device(x) & CompanyLogo(x)) -> BelongsTo(x,Company))", "all x y z.((Device(x) & CompanyLogo(y) & Device(z) & BearingLogo(x,y) & Company(z)) -> BelongsToAvrilCompany(x))", "all x.((Device(x) & FirmLogo(x)) -> CompanyCompany(x))"]}
{"id": "folio_train_1558", "nl": "A device is either with the company logo or belongs to employees. ", "fol": "all x.(HasCompanyLogo(x) | BelongsToEmployee(x))", "prediction": ["all x.(Device(x) -> ((CreatedByCompanyLogo(x) | EmployeesBelongToDevice(x))))", "all x.(Device(x) -> (WithCompanyLogo(x) | BelongsToEmployees(x)))", "all x y.((Device(x) & CompanyLogo(y)) | Employee(y))", "all x.(Device(x) -> (CompanyLogo(x) | Employees(x)))", "all x.(Device(x) -> (IncorporatedLogo(x) | Employee(x)))", "all x.(Device(x) -> (WithCompanyLogo(x) | BelongsToEmployees(x)))", "all x.(Device(x) -> (WorksOn(x,CompanyLogo) | Employees(x)))", "all x.(Device(x) -> ((Logo(x) | Employees(x))))", "all x.(Device(x) -> (CompanyLogo(x) | Employees(x)))", "all x.(Device(x) -> (WithCompanyLogo(x) | Employee(x)))", "all x.(Device(x) -> (IsCompanyLogo(x) | BelongsToEmployees(x)))", "all x.(Device(x) -> ((CompanyLogo(x) | EmployeeLogo(x))))", "all x y.((Vehicle(x) & CompanyLogo(y)) -> (Worker(x) | Employee(y)))", "all x.(Device(x) -> (ClientLogo(x) | Employees(x)))", "all x.(Device(x) -> (ReliesOnCompanyLogo(x) | BelongsToEmployees(x)))", "all x.(Device(x) -> (WithCompanyLogo(x) | BelongsToEmployees(x)))"]}
{"id": "folio_train_1559", "nl": "All devices belonging to employees are available to connect to the company's wifi. ", "fol": "all x.(BelongsToEmployee(x) -> AvailableToConnectToWifi(x))", "prediction": ["all x y.((Device(x) & Employee(y)) -> ConnectsToWifi(x,y))", "all x y.((Device(x) & Employee(y)) -> AvailableToConnectToWifi(x,y))", "all x.(EmployeeDevice(x) -> AvailableToConnectToWiFi(x))", "all x.(Employee(x) -> (FindsDevice(x,Employees) & AvailableToConnect(x,Wifi)))", "all x.((Device(x) & Employee(y)) -> ConnectsToWiFi(x,y))", "all x y z.((Device(x) & Employee(y) & Employee(z) & ConnectsToWifi(x,y,z)) -> AvailableToConnectToWifi(x,y,z))", "all x.((Device(x) & Employee(x)) -> CanConnectToWifi(x,Company))", "all x.((Device(x) & Employee(x)) -> AvailableToConnectWifi(x,WiFi))", "all x.((Device(x) & Employee(x)) -> ConnectsToWifi(x))", "all x y.((Device(x) & Employee(y)) -> ConnectedToWifi(y,x))", "all x.((Device(x) & Employee(x)) -> AccessibleToConnectToWifi(x,y))", "all x y.((Device(x) & Employee(y)) -> AvailableToConnectToWiFi(x,y))", "all x.((Device(x) & Employee(x)) -> ConnectsToWiFi(x,Company))", "all x y.((Device(x) & Employee(y) & Employee(y)) -> ConnectsToWifi(x,y))", "all x.((Device(x) & Employed(x)) -> ConnectsToFirewall(x))", "all x.(Device(x) -> exists y.(Employee(y) & AvailableToConnectToWiFi(x,y)))"]}
{"id": "folio_train_1560", "nl": "All devices connected to Google Home are controlled by managers. ", "fol": "all x.(ConnectedToGoogleHome(x) -> ManagedControl(x))", "prediction": ["all x.((Device(x) & ConnectedToGoogleHome(x)) -> ControlledByManager(x))", "all x.((Device(x) & ConnectedToGoogleHome(x)) -> ControledByManager(x))", "all x.((Device(x) & ConnectedToGoogleHome(x)) -> ManagedByManager(x))", "all x.((Device(x) & ConnectedToGoogleHome(x)) -> ControlledByManagers(x))", "all x.(GoneHome(x) -> ManagedByManager(x))", "all x.((Device(x) & ConnectedToGoogleHome(x)) -> ControlledByManagers(x))", "all x.((Device(x) & ConnectedToGoogleHome(x)) -> ControlledByManager(x))", "all x.(GoogleHome(x) -> ControledByManagers(x))", "all x y.((Device(x) & ConnectedToGoogleHome(x) & Manager(y)) -> ControlledBy(x,y))", "all x.((Device(x) & ConnectedToGoogleHome(x)) -> ControlledByManagers(x))", "all x.((Device(x) & ConnectedToGoogleHome(x)) -> ControlledByManager(x))", "all x.((Device(x) & ConnectedToGoogleHome(x)) -> ControledByManagers(x))", "all x y.((Device(x) & GoogleHome(y)) -> ControlledByManagers(x,y))", "all x.(ConnectedToGoogleHome(x) -> ControlledByManagers(x))", "all x.((Device(x) & ConnectedToGoogleHome(x)) -> ControlledByManager(x))", "all x.(GoogleHome(x) -> exists y.(Manager(y) & Controls(y,x)))"]}
{"id": "folio_train_1561", "nl": "All devices that are easy to operate are produced after 2020. ", "fol": "all x.(UserFriendly(x) -> ProducedAfter2020(x))", "prediction": ["all x.((Device(x) & EasyToOperate(x)) -> ProducedAfter2020(x))", "all x.((Device(x) & EasyToOperate(x)) -> ProducedAfter2020(x))", "all x.((Device(x) & EasyToOperate(x)) -> ProducedAfter2020(x))", "all x.((Device(x) & EasyToOperate(x)) -> ProducedAfter2020(x))", "all x.((Device(x) & EasyToOperate(x)) -> ProducedAfter2020(x))", "all x.((Device(x) & EasyToOperate(x)) -> ProducedAfter2020(x))", "all x.((Device(x) & EasyToOperate(x)) -> ProducedAfter2020(x))", "all x.((Device(x) & EasyToOperate(x)) -> ProducedAfter2020(x))", "all x.((Device(x) & EasyToOperate(x)) -> ProducedAfter2020(x))", "all x.(EasyToOperate(x) -> ProducedAfter2020(x))", "all x.((Device(x) & EasyToOperate(x)) -> ProducedAfter2020(x))", "all x.((Device(x) & EasyToOperate(x)) -> ProducedAfter2020(x))", "all x.((Device(x) & EasyToOperate(x)) -> ProducedAfter2020(x))", "all x.((Device(x) & EasyToOperate(x)) -> ProducedAfter2020(x))", "all x.((Device(x) & EasyToOperate(x)) -> ProducedAfter2020(x))", "all x.((Device(x) & EasyToOperate(x)) -> ProducedAfter2020(x))"]}
{"id": "folio_train_1562", "nl": "IPod1 is produced before 2020. ", "fol": "-ProducedAfter2020(IPod1)", "prediction": ["IPod1 is producedbefore2020.", "IPod1 exists x.(2020) & ProducedBy(x,0,1))", "all x.(Pod(x) -> ProducedBefore2020(x))", "IPod1 is producedbefore2020.", "IPod1 is producedbefore2020.", "All x.(IPod(x) -> ProducedBefore2020(x))", "all x.(IPod1(x) -> ProducedBefore2020(x))", "All x y.((IPod(x) & 2020(y)) -> ProductedBefore(x,y))", "myPod1(a) -> ProducedBefore2020(a))", "All x.(IPPod(x) -> ProducedBefore2020(x))", "All x.((Pod(x) & ProducedBefore2020(x)) -> ProductedWithin2020(x))", "IPod1 is producedbefore2020.", "all x.(IPod(x) -> (ProducedBefore2020(x) & HasNumberOfDevices(x)))", "IPod1 is ProducedBefore2020(iPod1)", "all x.(IPod1(x) -> ProducedBefore2020(x))", "all x.(IPod1(x) -> ProducedBefore2020(x))"]}
{"id": "folio_train_1563", "nl": "IPod1 is controlled by managers.", "fol": "ManagedControl(IPod1)", "prediction": ["all x.(IPod(x) -> ControlledByManagers(x))", "all x.(Pod(x) -> ControlledByManagers(x))", "all x.(IPod1(x) -> RunsByManagers(x))", "all x.(IPod1 -> ControlledByManagers(x))", "EverythingWorksWithManagers(IPod1)", "IPod1 is controlled by Managers.", "all x.(IPod1(x) -> ControlledByManagers(x))", "all x.(Pod(x) -> DesignedByManagers(x))", "all x.(IPod1,Manager(x) -> Controls(x,(IPod1,Manager(x)))", "all x.(IPod1(x) -> ControlledByManagers(x))", "IPod1 is controlled by Managers.", "IPod1 is controlled by Managers.", "IPod1 is controlled by Managers.", "(ControlledByManages(iPod1) & IPod1(iPod2))", "(ControlledByManagers(iPod1))", "all x.(IPod1(x) -> ControledByManagers(x))"]}
{"id": "folio_train_1564", "nl": "IPod1 is either produced after 2020 or controlled by managers.", "fol": "(ProducedAfter2020(IPod1) | ManagedControl(IPod1))", "prediction": ["all x.(IPod1(x) -> (ProducedAfter2020(x) | ControlledByManagers(x)))", "all x.(IPod1(x) -> (ProducedAfter2020(x) | ControlledByManagers(x)))", "IPod1 (iPod0,2020) | ManagedByManager(iPod,2020)))", "all x.(Ipod1(x) -> (ProducedAfter2020(x) | ControlledByManagers(x)))", "all x.(IPod1(x) -> (ProducedAfter2020(x) | ControlledByManagers(x)))", "all x.(IPod(x) -> (ProducedAfter2020(x) | ControlledByManagers(x)))", "all x.(IPod1.(x) -> (ProducedAfter2020(x) | ControlledByManagers(x)))", "all x.(IPod1 -> (ProducedAfter2020(x) | ControlledByManagers(x)))", "all x.(Pod1(x) -> (ProducedAfter2020(x) | ControlledByManagers(x)))", "All x.(IPod1(x) -> (ProducedAfter2020(x) | ControlledByManagers(x)))", "All x.(IPod1(x) -> (ProducedAfter2020(x) | ControlledByManagers(x)))", "all x.(Pod1(x) -> (ProducedAfter2020(x) | ControlledByManagers(x)))", "all x.(IPod1(x) -> (ProducedAfter2020(x) | ControlledByManagers(x)))", "IPod1 is (ProducedAfter2020) | ControlledByManagers(iPod1)))", "all x.(Pod1(x) -> (ProducedAfter2020(x) | ControlledByManagers(x)))", "all x.(IPod(x) -> (ProducedAfter2020(x) | ControlledByManagers(x)))"]}
{"id": "folio_train_1565", "nl": "IPod1 is not with the company logo, and managers do not control it.", "fol": "(-HasCompanyLogo(IPod1) & -ManagedControl(IPod1))", "prediction": ["all x.(IPod1(x) -> (-IsWithLogo(x) & ManagersClose(x)))", "(-exists x.(CompanyLogo(x) & -Controls(x)))", "all x.(IPod1(x) -> -(WorksWithLogo(x) & -Controls(x)))", "(-withCompanyLogo(iPod1) & ManagersDoNotControlIPod1(iPod2))", "all x.(IPod1(x) -> (-PromotesCompanyLogo(x) & ManagersDoNotControlIPod1(x)))", "all x.(IPod(x) -> (-CompanyLogo(x) & ManagersDoNotControlIPod(x)))", "(-withcompanyLogo(iPod1 & ManagersDoNotControlIPod1)).", "all x.(Ipod1(x) -> (-hasCompanyLogo(x) & ManagersDoNotControlIPod1(x)))", "all x y z.((IPod1(x) & CompanyLogo(y) & Manager(z)) -> (-Logo(x,y) & -Controls(z,x)))", "all x.(IPod(x) -> (-FindCompanyLogo(x) & -ControlManager(x)))", "all x.(IPod1(x) -> (-ManagedByCompanyLogo(x) & -Controls(x)))", "(-WithClubLogo(iPod1 & ManagersDoNotControl(iPod1))", "(-CompanyLogo(iPod1) & Manager DoesNotControl(iPod1))", "(-exists x.(PodManger(x) & IPod1(x)) & -ContainCorporateLogo(x))", "(-WelcomeToCopy(IPod1) & -WelcomeToCopy(IPod4) & (Manager(iPod1) -> -Controlled(iPod)))", "IPod1 - HasCompanyLogo(IPod1) & ManagersDoNotControlIPod1(Ipod1))"]}
{"id": "folio_train_1566", "nl": "IPod1 is either with the company logo or controlled by managers.", "fol": "(HasCompanyLogo(IPod1) | ManagedControl(IPod1))", "prediction": ["both.(IPod(i) & (Logo(i) | ManagerControl(ii)))", "all x.(iPod1(x) -> (exists y.(CompanyLogo(y) & Has(x,y)) | exists z.(Manager(z) & CanControl(x,z)))))", "all x.(Pod1(x) -> (WorksWithLogo(x) | ControlledByManagers(x)))", "all x.(Pod1(x) -> (Logo(x) | ManagerControls(x)))", "all x y.((Pod(x) & CompanyImage(y) & (LimitedByManagers(x,y) | ControlledByManager(x,y))) -> IPod1)", "all x.(Pod(x) -> (StaysWithLogo(x) | SetsByManagers(x)))", "IPod1 (withCompanyLogo) | ManagedByManager(IPo3)))", "all x.(IPod1(x) -> (FitsWithCompanyLogo(x) | ControlledByManagers(x)))", "all x.(IPod1(x) -> (CompanyLogo(x) | ManagerControl(x)))", "all x.(IPod1(x) -> (WithCompanyLogo(x) | ControledByManagers(x)))", "all x.(IPod1(x) -> ((CompanyLogo(x) | ManagersControl(x))))", "all x.(IPod1(x) -> (OrallyCreatedByManagement(x) | ControlledByManagement(x)))", "all x.(IPod(x) -> (withCompanyLogo(x) | DesignedByManagers(x)))", "all x.(Pod1(x) -> (CompanyLogo(x) | ManagedByManagers(x)))", "all xy.(IPod(x) -> (CompanyLogo(y) | ControlsByManagers(x,y)))", "all x.(Ipod1(x) -> ((CompanyLogo(x) | ManagersControl(x))))"]}
{"id": "folio_train_1567", "nl": "All CD players are delicate mechanisms.", "fol": "all x.(IsCDPlayer(x) -> IsDelicateMechanism(x))", "prediction": ["(DiligentMechanism(CDPlayer)", "all x.(CDPlayer(x) -> (DiligentMechanisms(x) & EasyToPlay(x)))", "all x.(CDPlayer(x) -> DelicateMechanism(x))", "all x.(CDPlayer(x) -> DelicateMechanism(x))", "all x.(CDPlayer(x) -> DelicateMechanism(x))", "all x.(CDPlayer(x) -> DiligentMechanism(x))", "all x.(CDPlayer(x) -> DelicateMechanism(x))", "all x.(CDPlayer(x) -> DelicateMechanism(x))", "all x.(CDPlayer(x) -> DelicateMechanism(x))", "all x.(CDPlayer(x) -> DelicateMechanism(x))", "all x.(CDPlayer(x) -> DelicateMechanism(x))", "all x.(CDPlayer(x) -> DelicateMechanism(x))", "all x.(CDPlayer(x) -> DelicateMechanism(x))", "all x.(CDPlayer(x) -> DelicateMechanism(x))", "all x.(CDPlayer(x) -> DiligentMechanism(x))", "all x.(CDPlayer(x) -> DelicateMechanism(x))"]}
{"id": "folio_train_1568", "nl": "No delicate mechanisms are suitable toys for children.", "fol": "all x.(IsDelicateMechanism(x) -> -IsSuitableToyForChildren(x))", "prediction": ["-exists x.(DelicateMechanism(x) & SuitableToy(x,children))", "-exists x.(DelicateMechanism(x) & SuitableForChildren(x))", "-exists x.(DelicateMechanism(x) & Suitable(x))", "-exists x.(DelicateMechanism(x) & SuitableToy(x,child))", "the best place to find a good, safe, toy.", "-exists x.(DiligentMechanism(x) & SuitableToy(x) & Children(x))", "-exists x.(DelicateMechanism(x) & SuitableForChildren(x))", "-(DelicateMechanisms(x) & SuitableToys(x)))", "-exists x.(DelicateMechanism(x) & SuitableToy(x))", "-exists x.(DelicateMechanism(x) & SuitableToy(x,Children))", "-exists x.(DelicateMechanism(x) & SuitableToy(x) & Children(x))", "-exists x.(DiligentMechanism(x) & -SuitableToy(x,Children))", "-exists x.(DelicateMechanism(x) & SuitableToy(x,child))", "-exists x.(DelicateMechanism(x) & SuitableForChildren(x))", "-exists x.(DelicateMechanism(x) & SuitableForChildren(x))", "has a low-delicateMachine(y) & -SuitableToy(x,y))"]}
{"id": "folio_train_1569", "nl": "Some CD players are suitable toys for children.", "fol": "exists x.(IsCDPlayer(x) & IsSuitableToyForChildren(x))", "prediction": ["exists x.(CDPlayer(x) & SuitableToy(x))", "exists x.(CdPlayer(x) & SuitableToy(x))", "exists x.(CDPlayer(x) & (SuitableToy(x) | SuitableToy(x))))", "exists x.(CDPlayer(x) & SuitableToy(x,child))", "exists x.(DiscPlayer(x) & (SuitableToy(x) | SuitableToy(x))))", "exists x.(CDPlayer(x) & SuitableToyForChildren(x))", "exists x.(CDPlayer(x) & SuitableToyForChildren(x))", "exists x.(CDPlayer(x) & SuitableToy(x))", "exists x.(CDPlayer(x) & SuitableToy(x))", "exists x.(CDPlayer(x) & SuitableToy(x))", "exists x.(CDPlayer(x) & SuitableToy(x))", "exists x.(CDPlayer(x) & SuitableToy(x))", "exists x.(CDPlayer(x) & SuitableToy(x))", "exists x.(CDPlayer(x) & SuitableToyForChildren(x))", "exists x.(CDPlayer(x) & SuitableToy(x))", "exists x.(CDPlayer(x) & SuitableToy(x))"]}
{"id": "folio_train_1570", "nl": "All mammals are living beings.", "fol": "all x.(IsMammal(x) -> IsLivingBeing(x))", "prediction": ["all x.(Mammal(x) -> LivingBeing(x))", "all x.(Mammal(x) -> LivingBeing(x))", "all x.(Mammal(x) -> LivingBeing(x))", "all x.(Mammal(x) -> LivingBeing(x))", "all x.(Mammal(x) -> LivingBeing(x))", "all x.(Mammal(x) -> LivesInBeing(x))", "all x.(Mammal(x) -> LivingBeing(x))", "all x.(Mammal(x) -> LivingBeing(x))", "all x.(Mammal(x) -> LivingBeing(x))", "all x.(Mammal(x) -> LivingBeing(x))", "all x.(Mammal(x) -> LivingBeing(x))", "all x.(Mammal(x) -> LivingBeing(x))", "all x.(Mammal(x) -> LivingBeing(x))", "all x.(Mammal(x) -> LivingBeing(x))", "all x.(Mammal(x) -> LivingBeing(x))", "all x.(Mammal(x) -> LivingBeing(x))"]}
{"id": "folio_train_1571", "nl": "All elephants are mammals.", "fol": "all x.(IsElephant(x) -> IsMammal(x))", "prediction": ["all x.(Elephant(x) -> Mammal(x))", "all x.(Elephant(x) -> Mammal(x))", "all x.(Elephant(x) -> Mammal(x))", "all x.((Elephant(x) & Mammal(x)) -> Mammal(x))", "all x.(Elephant(x) -> Mammal(x))", "all x.(Elephant(x) -> Mammal(x))", "all x.(Elephant(x) -> Mammal(x))", "all x.(Elephant(x) -> Mammal(x))", "all x.(Elephant(x) -> Mammal(x))", "all x.(Elephant(x) -> Mammal(x))", "all x.(Elephant(x) -> Mammal(x))", "all x.(Elephant(x) -> Mammal(x))", "all x.(Elephant(x) -> Mammal(x))", "all x.(Elephant(x) -> Mammal(x))", "all x.(Elephant(x) -> Mammal(x))", "all x.(Elephant(x) -> Mammal(x))"]}
{"id": "folio_train_1572", "nl": "All baby elephants are elephants.", "fol": "all x.(IsBabyElephant(x) -> IsElephant(x))", "prediction": ["all x.(BabyElephant(x) -> Elephant(x))", "all x.(BabyElephant(x) -> Elephant(x))", "all x.(BabyElephant(x) -> Elephant(x))", "all x.(BabyElephant(x) -> Elephant(x))", "all x.(BabyElephant(x) -> Elephant(x))", "all x.(BabyElephant(x) -> Elephant(x))", "all x.(BabyElephant(x) -> Elephant(x))", "all x.(BabyElephant(x) -> Elephant(x))", "all x.(BabyElephant(x) -> Elephant(x))", "all x.(BabyElephant(x) -> Elephant(x))", "all x.(BabyElephant(x) -> Elephant(x))", "all x.(BabyElephant(x) -> Elephant(x))", "all x.(BabyElephant(x) -> Elephant(x))", "all x.(BabyElephant(x) -> Elephant(x))", "all x.(BabyElephant(x) -> Elephant(x))", "all x.(BabyElephant(x) -> Elephant(x))"]}
{"id": "folio_train_1573", "nl": "Some baby elephants are sleepy.", "fol": "exists x.(IsBabyElephant(x) & IsSleepy(x))", "prediction": ["exists x.(BabyElephant(x) & Sleepy(x))", "exists x.(babyElephant(x) & Sleepy(x))", "exists x.(BabyElephant(x) & Sleepy(x))", "exists x.(BabyElephant(x) & Sleepy(x))", "exists x.(BabyElephant(x) & Sleepy(x))", "exists x.(BabyElephant(x) & Sleepy(x))", "exists x.(BabyElephant(x) & Sleepy(x))", "exists x.(BabyElephant(x) & Sleepy(x))", "exists x.(BabyElephant(x) & Sleepy(x))", "exists x.(BabyElephant(x) & Sleepy(x))", "exists x.(BabyElephant(x) & Sleepy(x))", "exists x.(BabyElephant(x) & Sleepy(x))", "exists x.(BabyElephant(x) & Sleepy(x))", "exists x.(BabyElephant(x) & Sleepy(x))", "exists x.(BabyElephant(x) & Sleepy(x))", "exists x.(BabyElephant(x) & Sleepy(x))"]}
{"id": "folio_train_1574", "nl": "If Jumbo is a living being, then Jumbo is not an elephant or a mammal.", "fol": "(IsLivingBeing(Jumbo) -> -(IsElephant(Jumbo) | IsMammal(Jumbo)))", "prediction": ["all x.((Jumbo(x) & LivingBeing(x)) -> (-Elephant(x) | -Mammal(x)))", "all x.((Jumbo(x) & LivingBeing(x)) -> -(Elephant(x) | Mammal(x)))", "all x.((LivingBeing(x) & So(x)) -> (-Elephant(x) | -Mammal(x)))", "all x.((Jumbo(x) & LivingBeing(x)) -> -(Elephant(x) | Mammal(x)))", "all x.((Jumbo(x) & LivingBeing(x)) -> (-Elephant(x) | -Mammal(x)))", "all x.((LivingBeing(x) & Jumbo(x)) -> (-Executive(x) | Mammal(x)))", "all x.((Jumbo(x) & LivingBeing(x)) -> (-Elephant(x) | -Mammal(x)))", "all x.(LivingBeing(x) -> (-Elephant(x) | -Mammal(x)))", "all x.((LivingBeing(x) & Jumbo(x)) -> (-Elephant(x) | -Mammal(x)))", "all x.((RidingBeing(x) & Jumbo(x)) -> (-Elephant(x) & -Mammal(x)))", "all x.(LivingBeing(x) -> (-Elephant(x) | -Mammal(x)))", "all x.((Poisoning(x) & LivingBeing(x)) -> (-Elephant(x) | -Mammal(x)))", "all x.((Bird(x) & LivingBeing(x)) -> (-Elk(x) | Mammal(x)))", "all x.((LivingBeing(x) & Jumbo(x)) -> -Altain(x,Elephant) & -Altain(x,Mammal))", "all x.(LivingBeing(x) -> (-Elephant(x) | -Mammal(x)))", "all x.(LivingBeing(x) -> (-Elephant(x) | -Mammal(x)))"]}
{"id": "folio_train_1575", "nl": "If Jumbo is sleepy, then Jumbo is a baby elephant or an elephant.", "fol": "((IsSleepy(Jumbo) -> IsBabyElephant(Jumbo)) | IsMammal(Jumbo))", "prediction": ["all x.(Sleepy(x) -> (BabyElephant(x) | Elephant(x)))", "all x.((Jumbo(x) & Sleepy(x)) -> (BabyElephant(x) | Elephant(x)))", "all x.((Sleepy(x) & Jumbo(x)) -> (BabyElephant(x) | Elephant(x)))", "all x.((Jumbo(x) & Sleepy(x)) -> (BeeFrog(x) | Elephant(x)))", "all x.((Jumbo(x) & Sleepy(x)) -> (BabyElephant(x) | Elephant(x)))", "all x.(Sleepy(x) -> (Jumbo(x) | Elephant(x)))", "all x.(Sleepy(x) -> (BabyElephant(x) | Elephant(x)))", "all x.((Jumbo(x) & Sleepy(x)) -> (BabyElephant(x) | Elephant(x)))", "all x.(Sleepy(x) -> (BabyElephant(x) | Elephant(x)))", "all x.(Sleepy(x) -> (BabyElephant(x) | Elephant(x)))", "all x.((Jumbo(x) & Sleepy(x)) -> (BabyElephant(x) | Elephant(x)))", "all x.((Jumbo(x) & Sleepy(x)) -> (BabyElephant(x) | Elephant(x)))", "all x.((Jumbo(x) & Sleepy(x)) -> (BabyElephant(x) | Elephant(x)))", "all x.((Jumbo(x) & Sleepy(x)) -> ((BabyElephant(x) | Elephant(x))))", "all x.((Jumbo(x) & Sleepy(x)) -> (BabyElephant(x) | Elephant(x)))", "all x.((Jumbo(x) & Sleepy(x)) -> (BabyElephant(x) | Elephant(x)))"]}
{"id": "folio_train_1576", "nl": "Jumbo is sleepy.", "fol": "IsSleepy(Jumbo)", "prediction": ["all x.(Jumpo(x) -> Sleepy(x))", "is Sleepy.", "all x.(Jumbo(x) -> Sleepy(x))", "all x.(Jumbo(x) -> Sleepy(x))", "Jombo Sleepy(Jumbo)", "is Sleepy(Jumbo)", "all x.(Jumbo(x) -> Sleepy(x))", "all x.(Jubimo(x) -> Sleepy(x))", "Sleepy(Jumbo)", "All x.(Jumbo(x) -> Sleepy(x))", "everything.Sleepy(Jumbo)", "all x.(Jumbo(x) -> Sleepy(x))", "all x.(Jubim(x) -> Sleepy(x))", "all x.(Jumbo(x) -> Sleepy(x))", "(SleepyJumbo(jumbo))", "exists x.(Jumbo(x) & Sleepy(x))"]}
{"id": "folio_train_1577", "nl": "Jumbo is not sleepy.", "fol": "-IsSleepy(Jumbo)", "prediction": ["-Sleepy(jumbo)", "all x.(Jumbo(x) -> -Sleepy(x))", "exists x.(Jubim(x) & -Sleepy(x))", "-Sleepy(jumbo)", "all x.(Jumbo(x) -> -Sleepy(x))", "-Sleepy(Jumbo)", "(Sleepy(Jumbo) | Sleepy(Jumbo))", "all x.(Jumbo(x) -> -Sleepy(x))", "(nonSleepy(Jumbo))", "all x.(Jumbo(x) -> -Sleeper(x))", "is notSleepy(jumbo)", "-Sleepy(Jumbo)", "-SleepyJumbo(jumbo)", "exists x.(Jumbo(x) & -Sleepy(x))", "-Sleepy(jumbo)", "all x.(Jumbo(x) -> (-Sleepy(x)))"]}
{"id": "folio_train_1578", "nl": "Jumbo is a living being.", "fol": "IsLivingBeing(Jumbo)", "prediction": ["all x.(IsLiving(x) -> Jumbo(x))", "all x.(Jubimo(x) -> LivingBeing(x))", "all x.(Jumbo(x) -> LivingBeing(x))", "all x.(Jubimo(x) -> LivesBeing(x))", "all x.(Jumbo(x) -> LiveingBeing(x))", "all x.(Jumbo(x) -> LivesIn(x))", "all x.(Jubimo(x) -> LivingBeing(x))", "that he exists /(Jubimo(Jumbo) & LivingBeing(Jumbo))", "all x.(Jubimo(x) -> LivingBeing(x))", "all x.(Jumbo(x) -> LivingInBeing(x))", "all x.(Jumbo(x) -> LivingBeing(x))", "All x.(Jumbo(x) -> LivingBeing(x))", "all x.(Jubimo(x) -> LivingBeing(x))", "all x.(Jumbo(x) -> LivingBeing(x))", "all x.(Jumbo(x) -> LivingBeing(x))", "all x.(Jump(x) -> LivingBeing(x))"]}
{"id": "folio_train_1579", "nl": "Jumbo is neither sleepy nor a baby elephant.", "fol": "(-IsSleepy(Jumbo) & -IsBabyElephant(Jumbo))", "prediction": ["all x.(Jubib(x) -> (-Sleepy(x) | BabyElephant(x)))", "all x.(Jubim(x) -> (-Sleepy(x) & -BabyElephant(x)))", "all x.(Jumbo(x) -> (Neesleepy(x) | BabyElephant(x)))", "all x.(Jubimo(x) -> (Neesley(x) & -BabyElephant(x)))", "all x.(Jumbo(x) -> (-Sleepy(x) & -BabyElephant(x)))", "all x.(Jumbo(x) -> (-Sleepy(x) | BabyElephant(x)))", "-(Sleepy(jumbo) | BabyElephant(jumbo))", "all x.(Jumbo(x) -> (-Sleepy(x) & -BabyElephant(x)))", "all x.(Jubim(x) -> (-Sleepy(x) & -BabyElephant(x)))", "all x.(Jumbo(x) -> (-Sleepy(x) & -BabyElephant(x)))", "(Sleepy(Jumbo) & -BabyElephant(Jumbo))", "all x.(Jumbo(x) -> (-Sleepy(x) & -BabyElephant(x)))", "all x.(Jubimo(x) -> (-Sleepy(x) & -BabyElephant(x)))", "all x.(Jubim(x) -> (-Sleepy(x) | BabyElephant(x)))", "(Nuts(jumbo) & -Sleepy(jumbo) & -BabyElephant(jumbo))", "all x.(Jubimo(x) -> ((Sleepy(x) & -BabyElephant(x))))"]}
{"id": "folio_train_1580", "nl": "Jumbo is not sleepy or an elephant.", "fol": "(-IsSleepy(Jumbo) & -IsElephant(Jumbo))", "prediction": ["-(Jumpback(Jumbo) & Sleepy(Jumbo))", "all x.(Jumbo(x) -> (-Sleepy(x) & -Elephant(x)))", "all x.(Jumbo(x) -> (-Sleepy(x) | Elephant(x)))", "(-Sleepy(jumbo) | Elephant(jumbo)))", "all x.(Jumbo(x) -> (-Sleepy(x) & -Elephant(x)))", "all x.(Jubim(x) -> (-Sleepy(x) | Elephant(x)))", "exists x.(Jubim(x) & -(Sleepy(x) | Elephant(x)))", "-(Jumbo(jumbo) & Sleepy(jumbo))", "all x.(Jumbo(x) -> (-Sleepy(x) | Elephant(x)))", "-(Sleepy(jumbo) | Elephant(jumbo))", "-(Jumpy(jumbo) & -Sleepy(jumbo) & -Elf(jumbo))", "all x.(Jumbo(x) -> (-Sleepy(x) | Elephant(x)))", "-(Jumbo(jumbo) & Sleepy(jumbo))", "all x.(Jumbo(x) -> (-Sleepy(x) & -Elephant(x)))", "all x.(Jubim(x) -> -(Sleepy(x) | Elephant(x)))", "-(Jumbo(jumbo) & Sleepy(jumbo) | Elephant(jumbo)))"]}
{"id": "folio_train_1581", "nl": "No faculty does homework.", "fol": "all x.(IsFaculty(x) -> -CompletesHomework(x))", "prediction": ["-exists x.(Faculty(x) & DoesHomework(x))", "-exists x.(Faculty(x) & DoesHomework(x))", "-exists x.(Faculty(x) & DoesHomework(x))", "-exists x.(Faculty(x) & DoesHomework(x))", "all x.(Faculty(x) -> -DoesHomework(x))", "-exists x.(Faculty(x) & DoesHomework(x))", "-exists x.(Faculty(x) & DoesHomework(x))", "-exists x.(Faculty(x) & DoesHomework(x))", "-exists x.(Faculty(x) & DoesHomework(x))", "-exists x.(Faculty(x) & DoesHomework(x))", "-exists x.(Faculty(x) & DoesHomework(x))", "-exists x.(Faculty(x) & DoesHomework(x))", "-exists x.(Faculty(x) & DoesHomework(x))", "-exists x.(Faculty(x) & DoesHomework(x))", "-exists x.(Faculty(x) & DoesHomework(x))", "-exists x.(Faculty(x) & DoesHomework(x))"]}
{"id": "folio_train_1582", "nl": "All students do homework.", "fol": "all x.(IsStudent(x) -> CompletesHomework(x))", "prediction": ["all x.(Student(x) -> DoHomework(x))", "all x.(Student(x) -> DoHomework(x))", "all x.(Student(x) -> DoesHomework(x))", "all x.(Student(x) -> DoHomework(x))", "all x.(Student(x) -> DoesHeadwork(x))", "all x.(Student(x) -> DoHomework(x))", "all x.(Student(x) -> DoHomework(x))", "all x.(Student(x) -> DoHomework(x))", "all x.(Student(x) -> DoesHomework(x))", "all x.(Student(x) -> DoHomework(x))", "all x y.((Student(x) & Homework(y)) -> Dose(x,y))", "all x.(Student(x) -> DoHomework(x))", "all x.(Student(x) -> DoHomework(x))", "all x.(Student(x) -> DoHomework(x))", "all x.(Student(x) -> DoHomework(x))", "all x.(Student(x) -> DoHomework(x))"]}
{"id": "folio_train_1583", "nl": "All kids are students.", "fol": "all x.(IsKid(x) -> IsStudent(x))", "prediction": ["all x.(Kid(x) -> Student(x))", "all x.(Kid(x) -> Student(x))", "all x.(Kid(x) -> Student(x))", "all x.(Kid(x) -> Student(x))", "all x.(Kid(x) -> Student(x))", "all x.(Kid(x) -> Student(x))", "all x.(Kid(x) -> Student(x))", "all x.(Kid(x) -> Student(x))", "all x.(Kid(x) -> Student(x))", "all x.(Kid(x) -> Student(x))", "all x.(Kid(x) -> Student(x))", "all x.(Kid(x) -> Student(x))", "all x.(Kid(x) -> Student(x))", "all x.(Kid(x) -> Student(x))", "all x.(Kid(x) -> Student(x))", "all x.(Kid(x) -> Student(x))"]}
{"id": "folio_train_1584", "nl": "If someone works at a school, then they are faculty.", "fol": "all x.(WorksAtSchool(x) -> IsFaculty(x))", "prediction": ["all x.(WorksAtSchool(x) -> Faculty(x))", "all x.(WorksAtSchool(x) -> Faculty(x))", "all x.(WorksAtSchool(x) -> Faculty(x))", "all x.(WorksAtSchool(x) -> Faculty(x))", "all x.(WorksAtSchool(x) -> Faculty(x))", "all x.(WorksAtSchool(x) -> Faculty(x))", "all x.(WorksAtSchool(x) -> Faculty(x))", "all x.(WorksAtSchool(x) -> Faculty(x))", "all x.(WorkerAtSchool(x) -> Faculty(x))", "all x y.((WorksAt(x,y) & School(y)) -> Faculty(x))", "all x.(WorksAtSchool(x) -> Faculty(x))", "all x y.((WorksAtSchool(x) & Office(y)) -> Faculty(x))", "all x.(WorksAtSchool(x) -> Faculty(x))", "all x.(WorksAtSchool(x) -> Faculty(x))", "all x.(WorksAtSchool(x) -> Faculty(x))", "all x.(WorksAtSchool(x) -> Faculty(x))"]}
{"id": "folio_train_1585", "nl": "If Jill works at a school or is a teacher, then Jill works at a school.", "fol": "((WorksAtSchool(Jill) | CompletesHomework(Jill)) -> WorksAtSchool(Jill))", "prediction": ["all x.((Jill(x) & (WorksAtSchool(x) | Teacher(x))) -> WorkAtSchool(x))", "all x (WorksAtSchool(x) | Teacher(x)) -> WorksAtSchool(x))", "all x y.((Jill(x) & (WorksAt(x,y) | Teachers(y))) -> WorksAt(x,y))", "all x y.((Jill(x) & School(y) & WorksAt(x,y)) | Teacher(x,y)) -> Schools(x))", "all x.((Jill(x) & (WorksAtSchool(x) | Teacher(x))) -> WorksAtSchool(x))", "all x.((Jill(x) | Teacher(x)) -> WorksAtSchool(x))", "all x.(Jill(x) -> (WorksAtSchool(x) | Teacher(x)))", "all x.((Jill(x) & WorksAtSchool(x)) | Teacher(x)) -> WorksAtSchool(x))", "all x y.((Jill(x) & School(y)) -> (WorksAt(x,y) | Teacher(x,y)))", "all x.((Jill(x) & (WorksAtSchool(x) | Teacher(x))) -> WorksAtSchool(x))", "all x.((Jill(x) & (WorksAtSchool(x) | Teacher(x))) -> WorksAtSchool(x))", "all x.((Jill(x) & (WorksAtSchool(x) | Teacher(x))) -> WorksAtSchool(x))", "all x.((Jill(x) & (WorksAtSchool(x) | Teacher(x))) -> WorksAtSchool(x))", "all x.((Jill(x) & (WorksAtSchool(x) | Teacher(x))) -> WorksAtSchool(x))", "all x.((Jill(x) & (WorksAtSchool(x) | Teacher(x))) -> WorksAtSchool(x))", "all x.((Jill(x) & (WorksAtSchool(x) | Teacher(x))) -> WorksAtSchool(x))"]}
{"id": "folio_train_1586", "nl": "Jill works at a school.", "fol": "WorksAtSchool(Jill)", "prediction": ["exists x.(Jill(x) & WorksAt(x,School))", "exists x y.(Jill(x) & School(y) & WorksAt(x,y))", "all x.(Jill(x) -> WorksAtSchool(x))", "all x.(Jill(x) -> WorksAtSchool(x))", "all x.(Jill(x) -> WorksAtSchool(x))", "all x y.((Jill(x) & School(y)) -> WorksAt(x,y))", "all x.(WorksAtSchool(x) -> Jill(x))", "Jill works at a school.", "all x y.((Jill(x) & School(y)) -> WorksAt(x,y))", "all x.(Jill(x) -> WorksAtSchool(x))", "all x y.((Jill(x) & School(y)) -> WorksAt(x,y))", "All x y.((Jill(x) & School(y)) -> WorksAt(x,y))", "all x y.((Jill(x) & School(y)) -> WorksAt(x,y))", "all x.(Jill(x) -> WorksAtSchool(x))", "all x.(Jill(x) -> WorksAtSchool(x))", "all x.(Jill(x) -> WorksAtSchool(x))"]}
{"id": "folio_train_1587", "nl": "Jill is a kid.", "fol": "IsKid(Jill)", "prediction": ["all x.(Jill(x) -> Kid(x))", "MinnedToBeKid(Jill)", "Jill is a kid.", "all x.(Kid(x) -> Jill(x))", "(Kid(Jill) | Kid(Jill)))", "all x.(Jill(x) -> Kid(x))", "all x.(Jill(x) -> Kid(x))", "Jill is a kid.", "Jill is Kid(Jill)", "(Kid(Jill) & CanShare(Jill,X))", "(Kind(Jill) & Kid(Jill))", "Jill is a kid.", "all x.(Jill(x) -> Kid(x))", "Jill is a kid.", "Alles x.(Jill(x) -> Kid(x))", "Jill is Kid."]}
{"id": "folio_train_1588", "nl": "Jill is not a kid.", "fol": "-IsKid(Jill)", "prediction": ["\"Kid\" & -Jill(Jill)", "Jill is notKid(Jill)", "-Kid(Jill)", "(-Kid(Jill))", "Jill is not kid(Jill)", "She is not a kid!", "Jill is non-Kid(Jill)", "all x.(Jill(x) -> -Kid(x))", "Jill Brown is not a kid.", "Jill is notKd(Jill)", "All x.(Jell(x) -> -Kid(x))", "(-Kid(Jill))", "all x.(Jill(x) -> -Kid(x))", "Jill is notKid(Jill)", "-Kid(Jill)", "Jill -Kid(Jill,9))"]}
{"id": "folio_train_1589", "nl": "Either Max listens to classical music or Max listens to rap. ", "fol": "all x.(MaxListensToClassicalMusic(x) | MaxListensToRap(x))", "prediction": ["all x y.((Max(x) & (ClassicalMusic(x) | Rap(x))) -> Listens(x,y))", "(exists x.(Max(x) & ListensToClassicalMusic(x)) | exists y.(Max(y) & ListensToRap(y))))", "(all x.(Max(x) -> ListensToClassicalMusic(x)) | all y.(Max(y) -> ListensToRap(y))))", "(all x y.((Max(x) & ClassicalMusic(y)) | ((Max(x) & Rap(y)))))", "exists x.(Max(x) & ((ClassicalMusic(x) | Rap(x))) -> Listens(x,classical,rac)))", "(exists x.(Max(x) & ListensToClassicalMusic(x)) | exists y.(Max(y) & ListensToRap(y))))", "all x.((Max(x) & ClassicalMusic(x)) | -Rac(x)))", "exists x.(Max(x) & (Music(x) & Classical(x) | Rap(x)))", "(exists x.(Max(x) & ListensToClassicalMusic(x)) | exists y.(Max(y) & ListensToRap(y))))", "Either MaxListensToClassicalMusicOrMaxListensToRap.", "(exists x.(Mach(x) & ListensToClassicalMusic(x)) | exists y.(Mach(y) & ListensToRange(y))))", "or both.(Mmax(M) & ListensToClassicalMusic(M) | ListensToRap(M))", "(all x y.((Max(x) & MusicOfClassical(y)) -> ListensTo(x,y)) | ((Max(x) & Rap(y)))))", "exists x.(Max(x) & (ListensToClassicalMusic(x) | ListensToRap(x)))", "(exists x.(Max(x) & ListensToClassicalMusic(x)) | exists y.(Max(y) & ListensToRap(y))))", "(exists x.(Max(x) & ListensToClassicalMusic(x)) | exists y.(Max(y) & ListensToRap(y))))"]}
{"id": "folio_train_1590", "nl": "All the songs that Max listens to that are classical music are from the 12th century.", "fol": "all x.(MaxListensToClassicalMusic(x) -> SongsFrom12thCentury(x))", "prediction": ["all x.((Song(x) & ListensTo(x,Max) & ClassicalMusic(x)) -> From(x,12))", "all x.((Song(x) & Reads(x,x) & ClassicalMusic(x)) -> From(x,12thCentury))", "all x.((SongAndMax(x) & ListensTo(x) & ClassicalMusic(x)) -> From12thCentury(x))", "all x.((Sound(x) & ListensTo(x,Y) & ClassicalMusic(x)) -> FromChildren(y))", "all x.((Songs(x) & ListensTo(x) & ClassicalMusic(x)) -> 12thCentury(x))", "all x.((Song(x) & ListensTo(x) & ClassicalMusic(x)) -> 12thCentury(x))", "all x.((Songs(x) & ListensTo(x) & ClassicalMusic(x)) -> From12thCentury(x))", "all x.((Song(x) & ListensTo(x) & ClassicalMusic(x)) -> From12thCentury(x))", "all x.((Song(x) & ListensTo(x) & ClassicalMusic(x)) -> From12thCentury(x))", "all x.((Song(x) & ListensTo(x) & ClassicalMusic(x)) -> 12thCentury(x))", "all x.((Song(x) & ListensTo(x,Minus) & ClassicalMusic(x)) -> 12thCentury(x))", "all x.((Song(x) & ListensTo(x) & ClassicalMusic(x)) -> From12thCentury(x))", "all x.((Songs(x) & ListensTo(x,Minum) & ClassicalMusic(x)) -> From12thCentury(x))", "all x.((Song(x) & ListensTo(x,Julian,12)) -> ClassicalMusic(x))", "all x.((Song(x) & ListensTo(x,1) & TraditionalMusic(x)) -> From12thCentury(x))", "all x.((Song(x) & ListensTo(x) & ClassicalMusic(x)) -> FromThe12thCentury(x))"]}
{"id": "folio_train_1591", "nl": "If the song Max listens to is rap, then the song is from Kanye West. ", "fol": "all x.(MaxListensToRap(x) -> SongsByKanyeWest(x))", "prediction": ["all x.((SongMaxListensTo(x) & Rap(x)) -> KanyeWest(x))", "all x y.((Song(x) & Artist(x) & ListensTo(x,y) & Rap(y)) -> KanyeWestSong(x))", "all x.((Song(x) & ListensTo(x,Rrap)) -> KanyeWestSong(x))", "all x.((Song(x) & ListensTo(x,(Rap)) & KanyeWest(x)) -> ListensTo(x,Rap))", "all x.((Song(x) & ListensToAt(x,rap) & KanyeWest(x)) -> SongsFrom(x,y))", "all x.((MineListensTo(x) & Rap(x)) -> KanyeWest(x))", "(HasSong(Max) & ListensTo(Max,Rap)) | FromKanyeWest(Max,Rap)))", "all x.((Minute(x) & ListensTo(x,Rrap)) -> KanyeWest(x))", "all x.((Song(x) & ListensTo(x,Rap)) -> KanyeWest(x))", "all x.((LieutifulSound(x) & ListensTo(x) & Rap(x)) -> KanyeWest(x))", "all x.((Song(x) & ListensTo(x,Rap)) -> KanyeWest(x))", "(all x y.((LikesMax(x) & Rap(x)) -> KanyeWest(y)))", "all x.((Song(x) & ListensToRrap(x)) -> KanyeWest(x))", "all x.((M Max(x) & ListensTo(x,raped,k)) -> KanyeWest(x))", "all x.((Song(x) & ListensToRap(x)) -> KanyeWest(x))", "all x.((Song(x) & ListensTo(x,Rap)) -> KanyeWest(x))"]}
{"id": "folio_train_1592", "nl": "If a songs is from Kanye West, then the song is full of lyrics. ", "fol": "all x.(SongsByKanyeWest(x) -> SongsWithLyrics(x))", "prediction": ["all x.((Song(x) & FromKanyeWest(x)) -> FullOfLyrics(x))", "all x.((Song(x) & FromKanyeWest(x)) -> FullOfLyrics(x))", "all x.(LiesFromKanyeWest(x) -> FullOfLyrics(x))", "all x.((Song(x) & KanyeWest(x)) -> FullOfLyrics(x))", "all x y.((Song(x) & KanyeWest(y)) -> FullOfLyrics(y))", "all x.((Song(x) & KanyeWest(x)) -> FullOfLyrics(x))", "all x.((Song(x) & FromKanyeWest(x)) -> FullOfLyrics(x))", "all x.((Song(x) & FromKanyeWest(x)) -> FullOfLyrics(x))", "all x.((Song(x) & FromKanyeWest(x)) -> FullOfLyrics(x))", "all x.((Song(x) & FromKanyeWide(x)) -> FullOfLyrics(x))", "all x.((Song(x) & KanyeWest(x)) -> FullOfLyrics(x))", "all x.((Song(x) & KanyeWest(x)) -> FullOfLyrics(x))", "all x.((Song(x) & KanyeWest(x)) -> FullOfLyrics(x))", "all x.((Song(x) & KanyeWest(x)) -> FullOfLyrics(x))", "all x.((Song(x) & KanyeWest(x)) -> FullOfLyrics(x))", "all x.((Song(x) & KanyeWest(x)) -> FullOfLyrics(x))"]}
{"id": "folio_train_1593", "nl": "All songs that are full of lyrics need to be written with words", "fol": "all x.(SongsWithLyrics(x) -> MustBeWrittenWithWords(x))", "prediction": ["all x.((Song(x) & FullOfLyrics(x)) -> WritesWithWords(x))", "all x.((Song(x) & FullOfLyrics(x)) -> WrittenWithWords(x))", "all x.((Song(x) & FullOfLyrics(x)) -> NeedsWrittenWithWords(x))", "all x.((Song(x) & FullOfLyrics(x)) -> NeedsWrittenWithWords(x))", "all x.((Song(x) & FullOfLyrics(x)) -> NeedsWrittenWithWords(x))", "all x.((Song(x) & FullOfLyrics(x)) -> NeedsWrittenWithWords(x))", "all x.((Song(x) & FullOfLyrics(x)) -> BooksWithWords(x))", "all x.((Song(x) & FullOfLyrics(x)) -> NeedsWords(x))", "all x.((Song(x) & FullOfLoveLyrics(x)) -> WrittenWithWords(x))", "all x.((Song(x) & FullOfLyrics(x)) -> CanBeWrittenWithWords(x))", "all x.((Song(x) & FullOfLyrics(x)) -> Words(x))", "all x.((Song(x) & FullOfLyrics(x)) -> NeedsWrittenWithWords(x))", "all x.((Song(x) & FullOfLyrics(x)) -> NeedsWrittenWithWords(x))", "all x.((Song(x) & FullOfLyrics(x)) -> HasWords(x))", "all x.((Song(x) & FullOfLyrics(x)) -> NeedsWrittenWords(x))", "all x.((Song(x) & FullOfLyrics(x)) -> NeedsWrittenWithWords(x))"]}
{"id": "folio_train_1594", "nl": "If \u201cAs it was\u201d by Harry Styles is classical music that Max listens to or  from the 12th century, then \u201cAs it was\u201d by Harry Styles is either classical music that Max listens to, or the songs are from 12th century.", "fol": "((((MaxListensToClassicalMusic(AsItWasByHarryStyles) | SongsFrom12thCentury(AsItWasByHarryStyles)) -> MaxListensToClassicalMusic(AsItWasByHarryStyles)) & -SongsFrom12thCentury(AsItWasByHarryStyles)) | (-((MaxListensToClassicalMusic(AsItWasByHarryStyles) | SongsFrom12thCentury(AsItWasByHarryStyles)) -> MaxListensToClassicalMusic(AsItWasByHarryStyles)) & SongsFrom12thCentury(AsItWasByHarryStyles)))", "prediction": ["(all x.((AsItem(x) & HarryStyles(x)) -> (ClassicalMusic(x) & MaxListensTo(x) | MusicFrom12thCentury(x))))", "all x.((AsItBecame(x) & HarryStyles(x)) -> (ClassicalMusic(x) & (MaxListensTo(x,12) | -MaxListensTo(x,12)))))", "all x.((AsItByHarryStyles(x) & (ClassicalMusic(x) | 12thConscission(x))) -> (ClassicalMusic(x) & MaxHearsTo(x)) | [ClassicalMusic(x) & MaxHearsTo(x)))", "all x.((AsItWas(x) &(HarryStyles(x) -> (ClassicalMusic(x) | From12thCentury(x))))", "all x.((AsItWorst(x) & (ClassicalMusic(x,Mat) | From12thCentury(x,Mat))) -> (ClassicalMusic(x,Mat) | LiedersFrom12thCentury(x)))", "all x.((AsItBecame(x) & HarryStyles(x)) -> ((ClassicalMusic(x,Max) & ListensTo(x)) | Music(x,12thCentury))))", "all x.((AsItBecame(x) & (ClassicalMusic(x) | 12thCentury(x))) -> (ClassicalMusic(x) & ListensTo(x)) | (ClassicalMusic(x) & ListensTo(x))))", "all x y.((AsItWas(x) & HarryStyles(y)) -> (ClassicalMusic(x) | From12thCentury(x)))", "all x.((AsItWorn(x) & HarryStyles(x)) -> (CelebrityMusic(x),Max) | 12thCenturyMusic(x)))", "all x.((AsItWorried(x) & HarryStyles(x)) -> ((ClassicalMusic(x) & ListensTo(x) | From12thCentury(x)) | (ClassicalMusic(x) & ListensTo(x) & From12thCentury(x))))", "all x.((AsItWas(x) & (ClassicalMusic(x) | From12thCentury(x))) -> (ClassicalMusic(x) & (MaxAudiencesTo(x) | ListensTo(x,122Century))))", "all x.((AsItBetween(x) & HarryStyles(x) & (ClassicalMusic(x) | From12thCentury(x))) -> (ClassicalMusic(x) & ListensTo(x) | SongsFrom12thCentury(x)))", "all x.((AsItWas(x) & (ColonialMusic(x) & (MaxListensTo(x) | LocalMusicFrom12thCentury(x)))) -> (ClassicalMusic(x) & MaxListensTo(x) | LocalMusicFrom12thCentury(x))))", "all x.((AsIs(x) & HarryStyles(x)) -> (ClassicalMusic(x) & MaxListensTo(x) | From12thCentury(x)))", "all x.((AsItWorth(x) & (ClassicalMusic(x) | From12thCentury(x))) -> ((ClassicalMusic(x) & MaxRecordsTo(x) | SongsFrom12thCentury(x))))", "all x.((AsItWas(x) & (Calvinist(x) | 12thCentury(x))) -> (ClassicalMusic(x,MaxListensTo) | SongsFrom12Century(x)))"]}
{"id": "folio_train_1595", "nl": "\u201cAs it was\u201d by Harry Styles needs to be written with words.", "fol": "MustBeWrittenWithWords(AsItWasByHarryStyles)", "prediction": ["all x.((HarryStyles(x) & \u201cAsItBeen(x)\u201d) -> NeedsWords(x))", "all x.((HarryStyles(x) & AsItWorn(x)) -> NeedsWrittenWithWords(x))", "all x.((HarryStyles(x) & AsItBecame(x)) -> NeedsToBeWrittenWithWords(x))", "all x y.((HarryStyles(x) & TheAsItDaily(x,y)) -> WrittenWithWords(x))", "all levels.((HarryStyles(HarryStyles) & Words(HarryStyles)) -> NeededWrittenWith(HarryStyles))", "all x.((AsItWas(x) & HarryStyles(x)) -> NeedsWrittenWithWords(x))", "all x y.((HarryStyles(x) & \u201cAsItBecame(x)\u201c) -> NeedsWords(x))", "all x.((HarryStyles(x) & \u201cAsItAre(x))) -> NeedsWrittenWithWords(x))", "all x.((HousesStyles(x) & HarryStyles(x)) -> HasWords(x))", "all x.(AsItBecame(x) -> NeedsWrittenWithWords(x))", "all x.((HarryStyles(x) & AsItBelongs(x)) -> NeedsWrittenWithWords(x))", "all x.((HarryStyles(x) & AsItWas(x)) -> NeedsWrittenWithWords(x))", "all x.(AsItWas(x) -> WriteredWithWords(x))", "all x.((AsItWas(x) & HarryStyles(x)) -> NeedsWrittenWithWords(x))", "all x.((HarryStyles(x) & AsItWorship(x)) -> NeedsWrittenWithWords(x))", "all x.((HarryStyles(x) & \u201cAsItBelongsTo(x)) -> NeedsWords(x))"]}
{"id": "folio_train_1596", "nl": "\"As it was\u201d by Harry Styles is a song from the 12th century.", "fol": "SongsFrom12thCentury(AsItWasByHarryStyles)", "prediction": ["\"AsItAs(HarryStyles) -> 12thCenturySong(HarryStyles & BornIn(Rossy16))", "\"AsItWrapped(HarryStyles) & From12thCentury(HarryStyles))", "all x.((AsItBeen(x) & HarryStyles(x)) -> SongsFromThe12thCentury(x))", "all x.((Song(x) & HarryStyles(x)) -> MIDIX.(2012))", "\"AsItWas\" By HarryStyles is a song from the 12thCentury.", "(Song(HarryStyles) & From12thCentury(HarryStyles))", "\"AsItBeen\" by HarryStyles is a song from the 12thCentury.", "\"AsItWas\" by HarryStyles is a song from the 12thCentury.", "\"AsIs(x) & HarryStyles(x))", "\"AsItAsJosephStory(Worthy(Word)\" \u2013 by HarryStyles(w))", "all x.((Song(x) & HarryStyles(x)) -> From12thCentury(x))", "(Song(HarryStyles) & AsItArena(HarryStyles,12))", "\"AsItWas(HornStyles) -> SongFrom12thCentury(Hr.Styles))", "\"AsItWas\" byHarryStyles(h) -> FromThe12thCentury(h))", "\"AsIs(Is(Is)\" by HarryStyles ()) -SongFrom12thCentury(Is))", "\"AsIs(PianoStyles,12)\""]}
{"id": "folio_train_1597", "nl": "\"As it was\u201d by Harry Styles is not a song from Kanye West and needs to be written with words.", "fol": "(-SongsByKanyeWest(AsItWasByHarryStyles) & MustBeWrittenWithWords(AsItWasByHarryStyles))", "prediction": ["all x.((Song(x) & KanyeWest(x)) -> -Song(x) & NeedsWrittenWithWords(x))", "\"AsIs(ByHarryStyles,Song) (-LikesKanyeWest(Song) -Words(Song)))", "\"AsItWorn(HarrisStyles) -SongFromKanyeWest(HurricaneWest) & NeedsWords(HurricaneWest))", "\"AsItBecame\" ByHarryStyles(\"NeedsWrittenWithWords(y) & -NeedsWrittenWithWords(y))", "all x.((Song(x) & HarryStyles(x)) -> -FromKanyeWest(x) & NeedsWrittenWithWords(x))", "(-(Song(HarryStyles) & FromKanyeWest(HarryStyles)) -> WrittenWithWords(HarryStyles))", "all x.(AsItWas(x) -> (-SongFromKanyeWest(x) & NeedsWords(x)))", "\"AsIs(h) -> -SongFromKanyeWest(h) & NeedsWrittenWithWords(h))", "\u201cAsIs(byHarryStyles)\u201d -> (-YetToEnjoySong(x) & KanyeWestSong(y) & NeedsWords(x)))", "(-Song(RichardStyles) & -SongFromKanyeWest(HarryStyles) & NeedsWords(HarryStyles))", "(Like Is(HarryStyles) & -SongFromKanyeWest(HarryStyles) & NeedsWords(HarryStyles))", "all x.((Song(x) & \"AsItWas(x)\") -> (-SongFromKanieWest(x) & NeedsWords(x)))", "\"AsItWorship(HarryStyles)'' (Songs(HarryStyles) & NotKanyeWest(HarryStyles)) & NeedsWords(HarryStyles))", "\"AsItLast(HarryStyles)\"", "\"AsIs(by HarryStyles)\" - KanyeWestSong(x) & NeedsWords(x))", "\"AsItWas\"(HarryStyles) -(Song(HarryStyles, KanyeWest) & NeedsWrittenWithWords(HarryStyles,Words)))"]}
{"id": "folio_train_1598", "nl": "\"Your Woman\" is a song by British one-man band White Town.", "fol": "ProducedBy(WhiteTown,YourWoman)", "prediction": ["\"Your Woman\" is a song by oneman band WhiteTown.", "exists x.((Song(x) & ByWhiteTower(x)) & SingleMan(x))", "\"Your Woman\" is a song by British oneman band WhiteTown.", "\"YourWoman(x) - BritishOneManBandWhiteTownSong(x))", "-- \"Your Woman\" (Song) & WrittenBy(Song) & SingleManBandWhiteTown(Song))", "all x.((Song(x) & OneManBandWhiteTown(x)) -> Love(x))", "\"YourWoman\" - song by BritishOneManBandWhiteTown.", "\"Your Woman\" -BritishOneManBandWhiteTown.", "\"Your Woman\") is a song by BritishOneManBandWhiteTown(x) & WrittenBy(x,y))", "\"YoungWoman(x)\" -> (Song(x) | BritishOneManBandWhiteTown(x)))", "\"YourWorm\" is a song by BritishOneManBandWhiteTown.", "(Song(YourWoman) & OneManBandWhiteTown(British))", "\"Your Woman\" is a song by BritishOneManBandWhiteTown (GBBand(s) | GBTBAND(s)))", "\"YoungWoman\" (Song) & BritishOneManBandWhiteTours(Pink))", "\"Your Woman\" & Song(s) & WrittenByBritishOneManBandWhiteTown(s))", "\"Your Woman\" is a song by OneManBandWhiteTown."]}
{"id": "folio_train_1599", "nl": "\"Your Woman\" song peaked at No. 1 on the UK Singles Chart.", "fol": "PeakedAt(YourWoman,UKSinglesChart)", "prediction": ["\"Your Woman\" song peakedAtNo1HotSingleStock(x))", "On UKSinglesChart.com: (YoungFraud(x) & \"(PaintOn(x,(x,1)) | PakedAtNo.1(x,3))))", "\"Your Woman\" song peaked at No.1 on UKSinglesChart.", "All x.((Song(x) & \"Your Woman\" Song(x)) -> PeakedAtNo.1(x))", "\"YoungWoman\" song peakedAtNo.1 on UKSinglesChart(x))", "\"Your Woman\" song peakedAtNo1.Piece(x,y) & UKSinglesChart(x,y))", "Singing(YourWife) PedalsAtNo1OnSingleChart(x))", "\"Your Woman\" Song PeakedAtNo1OnSinglesChart.", "\"Young(song)\" song peakedAtNo1OnHomeCountry.", "\"Your Woman\" song peakedAtNo.1 OnUKSinglesChart(x))", "\"YourWife\" song peakedAtNo.1 on UKSingleStatusChart(\"V.2 & SinglesChart(1))", "(\"YourWife\" song) - NullOnUKSinglesChart(x))", "\"YourWife\" song peakedAtNo.1OnMarket(x))", "UKSinglesChart.info - No.1(BlessEndurance(YellowWoman))", "\"Your Woman\" song was No.1 on SinglesChart.", "All x.((SingleSong(x) & YourWife(x)) -> PeakedAtNo1(x))"]}
{"id": "folio_train_1600", "nl": "If a song peaked at No.1 at a cetain place, then it was extremely popular.", "fol": "all x y.(PeakedAt(x,y) -> ExtremelyPopular(x))", "prediction": ["all x.((Song(x) & PeakedAtNo.1AtCetainPlace(x)) -> ExtremelyPopular(x))", "all x y.((Song(x) & PeakedAtNumber1AtCetainPlace(x)) -> ExtremelyPopular(x))", "all x y.((Song(x) & CitronPlace(y) & PeakedAtNo.1(x,y)) -> ExtremelyPopular(x))", "all x y z.((Song(x) & PeakedAtNo.2InCentainPlace(x) & CetainPlace(y) & CetainPlace(z)) -> ExtremelyPopular(x))", "all x.((Song(x) & PeakedAtNo2AtCetainPlace(x)) -> ExtremelyPopular(x))", "all x y.((Song(x) & CetainPlace(y) & PeakedAtNo.1(x,y)) -> ExtremelyPopular(x))", "all x.((Song(x) & PeakedAtNo(x) & CetainPlace(x)) -> ExtremelyPopular(x))", "all x.((Song(x) & PeakedAtNo.1AtCentainPlace(x)) -> ExtremelyPopular(x))", "all x y.((Song(x) & CitronPlace(y) & PeakedAtNo.1At(x,y)) -> ExtremelyPopular(x))", "all x.((Song(x) & PeakedAtNo.1AtCentainPlace(x)) -> ExtremelyPopular(x))", "all x.((Song(x) & PeakedAtNo.1AtCentainPlace(x)) -> ExtremelyPopular(x))", "all x.((Song(x) & PeakedAtNo.1AtCentainPlace(x)) -> ExtremelyPopular(x))", "all x.((Song(x) & PeakedAtNo.1(x) & CitainPlace(x)) -> ExtremelyPopular(x))", "all x y.((Song(x) & PeakedAtNo.1AtCentainPlace(x,y)) -> ExtremelyPopular(x))", "all x.((Song(x) & PeakedAt(x,No.1)) -> ExtremelyPopular(x))", "all x y.((Song(x) & CestainPlace(y) & PeakedAt(x,y)) -> ExtremelyPopular(x))"]}
{"id": "folio_train_1601", "nl": "\"Your Woman\" also peaked No. 1 in Iceland, Israel and Spain.", "fol": "(PeakedAt(YourWoman,Iceland) & PeakedAt(YourWoman,Isarel) & PeakedAt(YourWoman,Spain))", "prediction": ["((YoungWoman(x) & Iceland(x)) | Israel(x) | Spain(x)))", "(PeakedNo1InIsland(LoveYourWife) & PeakedNo1.InIsrael(LoveYourWife) & PeakedNo.1InSpanish(LoveYourWife))", "(PeakedNo.1InIsland,Israel,Spanish)", "(Yes(MyWife) & PeakedNo1InIn(Wildlife(Wildlife(Wildlife))", "\"YoungWoman\" peakedNo.1 in Iceland,Israel and Spain.", "\"YoungWoman\" - (PippedInIceland(Woman) | PakedInIsrael(Woman) | PakedInSpain(Woman)))", "hnlichkeits(TwoWives()-> (PeakedNo.1InIsland() | PeakedNo.1InIsrael() | PeakedNo.1InSpain()))", "\"Our Woman\" peaked No. 1 in Iceland, Israel, Spain, U.S.A., Canada, US, Canada, England, Europe, Asia, and The Netherlands, U.S.A., USA, Canada, U.S.A., Germany, Ireland, & Russia.", "(PeakedNo.1InIsland(YourWoman) & PeakedInIsrael(YourWoman) & PeakedNo.1InSpain(YourWomen(YourWoman))", "\"YourWoman(x)\" peakedNo.1 in(x,Island) & PeakedNo1In(x,Israel) & PeakedNo1In(x,Spania))", "-((Mrs.Islander(i) | -Island(i) | Israel(i) | Spain(i)))", "(This Woman(Your(Woman) PakedIn(Washington,Island) & PeakedIn(Washington,Israel) & PeakedIn(washington,Spanish))", "All x.((Woman(x) & Iceland(x) & Israel(x) & Spain(x)) -> PeakedNo1(x))", "((MyWife(x) & PeakedNo1InIceland(x)) | PeakedNo1InIsrael(x) | PeakedNo1InSpanish(x)))", "(The IslesOfIsland(Woman) & PeakedNo.1In(Woman,Island) & PeakedNo.1In(Woman,Israel) & PeakedNo.1In(Woman,Spanish)))", "\"Your Woman\" (Island,Israel,Spania) & PeakedNo.1InIsland,Israel,Spain))"]}
{"id": "folio_train_1602", "nl": "\"Your Woman\" was extremely popular.", "fol": "ExtremelyPopular(YourWoman)", "prediction": ["\"YourFemale(x)\" was incrediblyPopular(x))", "A huge success of \"Your Woman\"", "\"Your Woman\" (ExcelentlyPopular(Following) & X.(Your(Femme) & -Film(x)))", "\"YoungMammal\" was extremelyPopular(Uploading)", "\"YourWoman\" & VeryPopular(x)", "\"YoungWoman\" -> ExtremelyPopular(x))", "\"YourWoman\" -VeryPopular(x))", "\"YourLady\" - QuitePopular(--((Lady(She) & Lie(She)))", "\"Your Woman\" -ExtremelyPopular(x))", "\"YoungWhelfer\" war extremlyPopular(x)", "All x.(((YourWife(x) & Popular(x)) -> Absolutely(x))", "\"Young Woman\" - ExtremelyPopular(x))", "\"YoungWoman\" -ExtremelyPopular(2006))", "\"YourWife\" was very Popular(x)", "\"YourShell\" s VeryPopular(x))", "\"YourWoman\" sounded extremelypopular."]}
{"id": "folio_train_1603", "nl": "White Town did not produce any popular song.", "fol": "-exists x.(ProducedBy(WhiteTown,x) & ExtremelyPopular(x))", "prediction": ["WhiteTown.org -ProducesPopularSongs(WhiteTown)", "all x.(WhiteTower(x) -> -ContributesToPopularSong(x))", "WhiteTown did not produce any popularSong(WhiteTown),", "WhiteTown n-exists x.(PopularSong(x) & NotProduced(x))", "(WhiteTown(WhiteTown) & -producedPopularSong(WhiteTown))", "(ProducesPopularSong(WhiteTown) & -ProducedPopularSong(WhiteTown))", "all x.(WhiteTown(x) -> -ProducedPopularSong(x))", "all x.(WhiteTown(x) -> -ProducesPopularSong(x))", "WhiteTown.doesNotProducePopularSong(d)", "-exists x.(WhiteTown(x) & PopularSong(x))", "WhiteTown didn'tProducePopularSong(WhiteTown)", "(WhiteTower(WhiteTown) & -(ProducesPopularSong(WhiteTown) | ProducesPopularSong(WhiteTown))))", "all x.(WhiteTown(x) -> -ProducesPopularSong(x))", "WhiteTown(w) -producedPopularSong(w))", "(NoPopularSong(WhiteTown)", "-exists x.(WhiteTown(x) & PopularSong(x))"]}
{"id": "folio_train_1604", "nl": "White Town was a successful band.", "fol": "Successful(WhiteTown)", "prediction": ["all x.(WhiteTown(x) -> SuccessfulBand(x))", "(SuccessfulBand(WhiteTown))", "WhiteTown was a successfulBand(WhiteTown)", "(SuccessfulBand(WhiteTown)", "all x.(WhiteTown(x) -> VerySuccessfulBand(x))", "WhiteTown(WhiteTown) & SuccessfulBand(WhiteTown))", "all x.(WhiteTown(x) -> SuccessfulBand(x))", "all x.(WhiteTown(x) -> SuccessfulBand(x))", "WhiteTown(WhiteTravel) - SuccessfulBand(WhiteTown))", "WhiteTown(WhiteTown) -SuccessfulBand(WhiteTown))", "WhiteTown was successfulBand.", "(SuccessfulBand(WhiteTown))", "All x.(WhiteTown(x) -> SuccessfulBand(x))", "The band that existed before the band called WhiteTown.", "all x.(WhiteTown(x) -> SuccessfulBand(x))", "WhiteTown was successfulBand(x)"]}
{"id": "folio_train_1605", "nl": "All people who limp often and regularly have long-term medical issues with underlying causes.", "fol": "all x.(LimpOften(x) -> LongTermMedicalIssues(x))", "prediction": ["all x.((Person(x) & Luggish(x) & Often(x) & Regularly(x)) -> HasLongTermMedicalIssuesWithUnderlyingCauses(x))", "all x.(Person(x) & LipsOtherLimes(x) & LumpsRegularlyHasMedicalIssues(x))", "all x.((Person(x) & LoudFrequently(x) & RegularlyLip(x)) -> LongTermMedicalIssues(x))", "all x.((Person(x) & Louder(x) & RegularlyLip(x)) -> LongTermMedicalIssuesWithUnderlyingCauses(x))", "all x.((Person(x) & FlourishesOnce(x) & Regularly(x)) -> LongTermMedicalIssues(x))", "all x.(Limb(x) -> (LanglesOften(x) & LeapsRegularly(x)))", "all x.((Person(x) & LieLipOnce(x) & LieLipRegularly(x)) -> LongTermMedicalIssuesWithSubsequentCauses(x))", "all x.((Person(x) & LempsOften(x) & UsuallyLempsRegularly(x)) -> LongTermMedicalIssuesWithUnderlyingCauses(x))", "all x.((People(x) & LempsOften(x) & LempsRegularly(x)) -> HasLongTermMedicalIssues(x,underlyingCauses))", "all x.((People(x) & LivesInLimb(x) & LuggagesOften(x) & Regularly(x)) -> LongTermMedicalIssues(x))", "all x.((Person(x) & LaughsOtherWords(x) & RegularlyLimits(x)) -> LongTermMentalIssues(x))", "all x.((Person(x) & LengthensOf(x) & RegularlyLegs(x)) -> LongTermMedicalIssues(x))", "all x.((Person(x) & Loud(x) & UsuallyStrictlyLip(x)) -> LongTermMedicalIssues(x))", "all x.((Person(x) & LimbsOtherFunctions(x) & LivesIn(x,milk)) -> LongTermMedicalIssuesWithUnderlyingCauses(x))", "all x.((Person(x) & LieFloodsOften(x) & LeapedRegularly(x)) -> HasLongTermMedicalIssues(x))", "all x.((Person(x) & LebblesOften(x) & LebblesRegularly(x)) -> LongTermMedicalIssuesWithUnderlyingCauses(x))"]}
{"id": "folio_train_1606", "nl": "If people have long-term medical issues with underlying causes, then they are not often spry and energetic.", "fol": "all x.(LongTermMedicalIssues(x) -> -SpryAndEnergetic(x))", "prediction": ["all x.((Person(x) & HasLongTermMedicalIssuesWithUnderlyingCauses(x)) -> -Spry(x) & Energetic(x))", "all x.((Person(x) & HasLongTermMedicalIssues(x) & HasUnderlyingCauses(x)) -> -Spry(x) & Energetic(x))", "all x.((Person(x) & LongTermMedicalIssues(x) & RootedCauses(x)) -> (-IssuesSpry(x) & IsStructured(x) & IsEnergy(x)))", "all x.((Person(x) & HasLongTermMedicalIssues(x) & SourcingCauses(x)) -> -(Spry(x) | Energetic(x)))", "all x.((Person(x) & LongTermMedicalWithUnderlyingCauses(x)) -> -(Spry(x) & Energetic(x)))", "all x.((Person(x) & HasLongTermMedicalIssues(x)) -> -(OftenSpry(x) & Energetic(x)))", "all x.((Personal(x) & LongTermMedicalIssues(x) & HasUnderlyingCauses(x)) -> -(Spry(x) & Energetic(x)))", "all x.((Person(x) & LongTermMedicalIssues(x) & AssociatedCauses(x)) -> -Spry(x) & Energetic(x))", "all x.((Person(x) & LongTermMedicalIssues(x) & ObjectiveCauses(x)) -> -(Spry(x) & Energetic(x)))", "all x.((Person(x) & LongTermMedicalIssues(x) & UnderlyingCauses(x)) -> -(Spry(x) | Energetic(x)))", "all x.((Person(x) & HasLongTermMedicalIssues(x) & Root Causes(x)) -> -(Spry(x) | Energetic(x))))", "all x.((Person(x) & HasLongTermMedicalIssues(x) & UnderlyingCauses(x)) -> -(Spry(x) & Energetic(x)))", "all x.((Person(x) & HasLongTermMedicalIssues(x) & HasUnderlyingCauses(x)) -> -(Spry(x) & Energetic(x)))", "all x.((Person(x) & LongTermMedicalIssues(x) & AttractiveCauses(x)) -> -Spry(x) & Energetic(x))", "all x.((Person(x) & HasLongTermMedicalIssues(x) & OvercomingCauses(x)) -> -Spry(x) & Energetic(x))", "all x.((Person(x) & LongTermMedicalIssues(x) & HasUnderlyingCauses(x)) -> -(Spry(x) | Energetic(x)))"]}
{"id": "folio_train_1607", "nl": "People either stay indoors and rest a lot at home or people are often tired and disinterested in their activities.", "fol": "(all x.((SpryAndEnergetic(x) & -OftenTired(x)) | (-SpryAndEnergetic(x) & OftenTired(x))) & all x.(OftenTired(x) -> StayIndoors(x)))", "prediction": ["all x.((People(x) & StaysIndoorsAndRestsAtHome(x)) | ((People(x) & Tired(x) & DisinterestedInActivities(x))))", "all x.(People(x) -> ((StayIndoors(x) & RestLotAtHome(x)) | (ThanStill(x) & DisinterestedInActivities(x)))))", "all x y.((Person(x) & StayIndoors(x) & RestAtHome(x)) | ((People(y) & Tired(y) & DisinterestedInActivities(y)))))", "all x y.((People(x) & StaysIndoors(x) & RestsAtHome(x)) | (People(y) & Tired(y) & DisinterestedInActivities(y))))", "all x y.((Product(x) & Man(y)) -> ((StaysIndoors(x) & RestsAtHome(x)) | (Fazed(y) & DisinterestedInActivities(y))))", "all x.((Person(x) & StaysIndoors(x) & RestsAtHome(x)) | (People(x) & Tired(x) & DisinterestedInActivities(x))))", "(exists x.(Person(x) & ((StaysIndoors(x) & RestsAtHome(x)) | (Mound(x) & DisinterestedInActivities(x)))))", "exists x.(Person(x) & ((StaysIndoors(x) & RestsAtHome(x)) | It isTenseAndDisinterestedInActivities(x)))", "all x.(Person(x) -> (StaysIndoors(x) & RestsAtHome(x)) | (Person(x) & Tired(x) & DisinterestedInActivities(x))))", "all x.(Person(x) -> ((StaysIndoors(x) & RestsAtHome(x)) | (Tattered(x) & DisinterestedInActivities(x))))", "all x.(Nobody(x) -> ((StaysIndoors(x) & RestsAtHome(x)) | (Person(x) & Tired(x) & DisinterestedInActivities(x))))", "all x.((People(x) & (StaysIndoors(x) | RestsAtHome(x))) -> (Tense(x) & DisinterestedInActivities(x)))", "all x.((Popular(x) & (StaysIndoors(x) & RestsAtHome(x)) | (Tense(x) & DisinterestedInActivities(x))))", "all x.(Location(x) -> (StaysIndoors(x) & RestsAtHome(x)) | (IsTensed(x) & DisinterestedInActivities(x))))", "(exists x.(StaysIndoors(x) & RestsAtHome(x)) | (Trawed(x) & DisinterestedInActivities(x))))", "all x.(People(x) -> ((StaysIndoors(x) & RestsAtHome(x)) | (Stills(x) & DisinterestedInActivities(x))))"]}
{"id": "folio_train_1608", "nl": "If people stay indoors and rest a lot at home, then they do not visit the gym at least once a day.", "fol": "all x.(StayIndoors(x) -> -VisitGymDaily(x))", "prediction": ["all x.((Person(x) & StaysIndoors(x) & RestsAtHome(x)) -> -ThrivesGym(x))", "all x.((Person(x) & StaysIndoors(x) & RestsAtHome(x)) -> -TeachesGym(x))", "all x.((StaysIndoors(x) & RestsAtHome(x)) -> -VISITGymAtLeastOneDay(x))", "all x.((StaysIndoors(x) & RestsAtHome(x)) -> -PerformsGymAtLeastLastDay(x))", "all x.((People(x) & StaysIndoors(x) & RestsAtHome(x)) -> -VisitsGymAtLeastOneDay(x))", "all x.((StaysIndoors(x) & RestsAtHome(x)) -> -TouchGym(x))", "all x.((Person(x) & StaysIndoors(x) & RestsAtHome(x)) -> -(VisitsGym(x,y) & VisitsGym(y,x))))", "all x.((People(x) & StaysIndoors(x) & RestsAtHome(x)) -> -VisitGym(x))", "all x.((StaysIndoors(x) & RestsAtHome(x)) -> -SecondsTwoDays(x))", "all x.(StaysIndoors(x) & RestsAtHome(x) -> -VisitsGym(x))", "all x.((StaysIndoors(x) & RestsLegallyAtHome(x)) -> -TreatsGym(x))", "all x.((Person(x) & StaysIndoors(x) & RestsAtHome(x)) -> -VisitsGym(x))", "all x.((StaysIndoors(x) & RestsAtHome(x)) -> -VisitGym(x))", "all x.((StaysIndoors(x) & RestsAndAtHome(x)) -> -VisitsGym(x))", "all x.((StaysIndoors(x) & RestsAtHome(x)) -> -(VisitingGym(x) & AtLeastOneOfDay(x)))", "all x.((StaysIndoors(x) & RestsAtHome(x)) -> -InsulatesGAmAtLeastOneDay(x))"]}
{"id": "folio_train_1609", "nl": "If Mark either limps often and regularly or is often spry and energetic, then Mark limps often and regularly or is often tired and disinterested in his activities.", "fol": "((((LimpOften(Mark) & -SpryAndEnergetic(Mark)) | (-LimpOften(Mark) & SpryAndEnergetic(Mark))) -> LimpOften(Mark)) | OftenTired(Mark))", "prediction": ["all x.((Mark(x) & (LimbsOften(x) | LimbsRegularly(x) | Spry(x) | Energetic(x))) -> (LimbsOften(x) | Tired(x) & DisinterestedInActivities(x)))", "all x.((Mark(x) & (LegsOftenAndRegularly(x) | SpryAndEnergetic(x))) -> (LegsOftenAndRegularly(x) | TiredAndDisinterested(x)))", "all x.((Marc(x) & (LimpsOften(x) | Spry(x) | Energetic(x))) -> (LimpsOften(x) | Tired(x) | DisinterestedInActivities(x))))", "all x.((Mark(x) & (ClimbedOtherThan(x) | Spry(x) | Energetic(x))) -> (ClimbedOther(x) & (Footy(x) | DisinterestedInActivities(x))))", "all x.((Mark(x) & (CruellesOften(x) | Spry(x) | Energetic(x))) -> (CruelsOften(x) | Tired(x) & DisinterestedInActivities(x)))", "all x.((Mark(x) & (Lip'sOftenAndRegular(x) | SpryAndEnergetic(x))) | (Lip'sOftenAndRegular(x) | TiredAndDisinterested(x))))", "all x.((Mark(x) & (LimbsOftenAndRegularly(x) | SpryAndEnergistic(x))) -> (LimbsOftenAndRegularly(x) | TiredAndDisinterestedInActivities(x)))", "all x.((Mark(x) & (LilliesOnceAndRegularly(x) | Spry(x) & Energetic(x))) -> (LilliesOnceAndRegularly(x) | Tired(x) & DisinterestedInActivities(x)))", "all x.((Mark(x) & (LipSexily(x) | SpripeAndEnergetic(x))) -> (LipSexily(x) | TiredAndDisinterestedInActivities(x)))", "all x.((Mark(x) & (LimbsOftenAndRegularly(x) | SpryAndEnergy(x))) | (LimbsFrequentlyAndRegularly(x) | TiredAndUninterested(x))))", "all x.((Mark(x) & (LimbsOtherThan(x) | Spry(x) | Energetic(x))) -> (LimbsOtherThan(x) | Tired(x) & DisinterestedInActivities(x)))", "all x.((Mark(x) & (LimbsOften(x) | Lippin'(x) | Spry(x) | Energetic(x))) -> (LimbsOften(x) | Tired(x) | DisinterestedInActivities(x)))", "all x.((Mark(x) & (LimbsOnce(x) | Spry(x) | Energetic(x))) -> (LimbsOnce(x) | Tired(x) & DisinterestedInActivities(x)))", "all x.((Mark(x) & (ManyLillies(x) | OftenSpry(x) & OftenEnergetic(x))) + (ManyLillies(x) & Frequently(x) & -Enlightened(x))))", "all x.((Mark(x) & (LimpsOftenAndRegularly(x) | SpryAndEnergetic(x))) -> (LimpsOftenAndRegularly(x) | TiredAndDisinterestedInActivities(x)))", "all x.((Mark(x) & (LegsOften(x) & Regularly(x) | Spry(x) & Energetic(x))) -> (LegsFrequently(x) | Tired(x) & DisinterestedInActivities(x)))"]}
{"id": "folio_train_1610", "nl": "Mark limps often and regularly.", "fol": "LimpOften(Mark)", "prediction": ["all x.(Mark(x) -> (Lip(x) & Generally(x)))", "(LimpsOfTime(Mark) & LipsRegularly(Mark))", "all x.(Mark(x) -> (LipsAt(x) & LiesRegularly(x)))", "all x.(Mark(x) -> (LimopsOftenAndRegularly(x)))", "all x.(Movement(x) -> (Limbs(x) & Often(x) & Frequently(x)))", "Mark limpsfrequentlyandRegularly.", "all x.(Mark(x) -> (Lillys(x) & Often(x) & Regularly(x)))", "Mark limpsoftenandregularly.", "Mark limpsRightlyAndFrequently(Mark)", "all x.(Mark(x) -> (LeptsOften(x) & LeptsRegularly(x)))", "all x.(Mark(x) -> (LipsInFrequently(x) & LipsRegularly(x)))", "all x.(Mark(x) -> Louds(x))", "all x.(Mark(x) -> (Limb(x) & LeapsFrequentlyAndRegularly(x)))", "all x.(Marc(x) -> (LimbsOften(x) & LimbsRegularly(x)))", "all x.(Marc(x) -> (LimopsOften(x) & Clever(x)))", "all x.(Mark(x) -> (PlumbsOrSameTime(x) & Clever(x)))"]}
{"id": "folio_train_1611", "nl": "Mark visits the gym at least once a day.", "fol": "VisitGymDaily(Mark)", "prediction": ["all x.(Mark(x) -> VisitsGym(x) & AtLeastOnce(x))", "all x.((Mark(x) & VisitsGym(x,x)) -> OnceADay(x))", "all x.((Mark(x) & Gym(x)) -> VisitsOtherThan(x,5))", "all x.((Mark(x) & VisitsGym(x)) -> OnceADay(x))", "all x.((Mark(x) & VisitsGym(x)) -> 1-2ByDaily(x))", "all x.(MMark(x) -> VisitsGym(x))", "all x.(MarkVisitsGym(x) -> (AtLeastOneDay(x) | DaysInGym(x)))", "all x.(Together(x,Mark) -> VisitsGym(x))", "all x.((Mark(x) & VisitsGym(x)) -> Once(x))", "all x y.((Mark(x) & Gym(y)) -> (Calls(x,y) & UsuallyAtLeastOnceADay(x,y)))", "all x.((Marc(x) & VisitsGym(x)) -> 1-3Days(x))", "all x y z.((Mick(x) & Gym(y) & Gym(z)) -> VisitsAtLeastAtLeastOneDay(x,y,z))", "all x.((Mark(x) & VisitsGym(x,y)) -> AtLeastTwoDays(y))", "all x.(Jays(Mark) -> VisitsGym(Mark,x))", "all x.((Mark(x) & VisitsGym(x)) -> AtLeastOneSay(x))", "all x.((Matt(x) & VisitsGym(x)) -> AtLeastOneDay(x))"]}
{"id": "folio_train_1612", "nl": "Mark stays indoors and rests regularly at his home or visits the gym at least once a day.", "fol": "(StayIndoors(Mark) | VisitGymDaily(Mark))", "prediction": ["all x.((Mark(x) & StaysIndoors(x) & (RestsRegularly(x) | VisitsTheGym(x))) -> -Indoors[x))", "all x.((Mark(x) & (StaysIndoors(x) | RestsRegularly(x))) -> VisitsGym(x))", "all x.(Mark(x) -> (StaysIndoors(x) & (RetreatsAtHome(x) | VisitsGym(x))))", "all x.((Mark(x) & (StaysIndoors(x) | RestsRegularlyAtHome(x))) -> VisitsGym(x))", "all x.(Mark(x) -> (StaysIndoors(x) & (RecessesRightly(x) | VisitsGym(x))))", "all x.(Mark(x) -> (StaysIndoors(x) & (ReachesAtHome(x) | VisitsGym(x))))", "all x y z.((Mark(x) & IndoorStays(x,y) & (Home(y) | Gym(z)))) -> (WorksAt(x,z) & RestsAt(x,z)))", "all x y.((Mark(x) & (Home(y) | Gym(y))) -> (StaysIndoors(x,y) & RestsRegularly(x,y)))", "all x.((Mark(x) & StaysIndoors(x) & (RetreatsAtHome(x) | VisitsGym(x))) -> WeeksIn(x))", "all x y.((Mark(x) & Home(y)) | VisitsGym(x,y)) -> (HasIndoors(x,y) & RestsRegularly(x,y)))", "all x.(Mark(x) -> (StaysIndoors(x) & (RestsAtHome(x) | VisitsGym(x))))", "all x.(Mark(x) -> (StaysIndoors(x) & (RecessRightAtHome(x) | VisitsGym(x))))", "all x.(Mark(x) -> (StaysIndoors(x) & (RestrictlyAtHome(x) | VisitsGym(x))))", "all x.(Mark(x) -> (StaysIndoors(x) & (RestsRegularly(x) | VisitsGym(x))))", "(StaysIndoors(Mark) & (RetainsAtHome(Mark) | VisitsGym(Mark)))", "all x.(Mark(x) -> (StaysIndoors(x) & RestsRegularlyAtHomeOrInGym(x)))"]}
{"id": "folio_train_1613", "nl": "If two soccer teams score the same number of goals in one UCL final during the regular time, they need to play for the extra time.", "fol": "all x y.((IsSoccerTeam(x) & IsSoccerTeam(y) & HasSameScore(x,y) & InTimePeriod(RegularTime)) -> NeedsExtraTime(x,y))", "prediction": ["all x y z.((SoccerTeam(x) & SoccerTeam(y) & UCLFinal(z) & SameScore(x,y,z) & RegularTime(z) & RegularTime(y,z)) -> NeedsExtraTime(x,y))", "all x y.((Team(x) & SoccerTeam(y) & ScoresBoth(x,y) & UCLFinal(y) & RegularTime(y)) -> PlaysForExtraTime(x,y))", "all x y.((SoccerTeam(x) & UCLFinal(y) & ScoreSameGoals(x,y) & RegularTime(x,y)) -> PlayPropcy(x,y))", "all x.((SoccerTeam(x) & ScoresSameNumberOfGoals(x,RegularTime) & UCLFinal(x)) -> NeedsPlayInextraTime(x))", "all x y z.((Final(x) & SoccerTeam(y) & Goal(z) & OneCurrent(y,z)) -> NeedsExtraTime(y,z))", "all x.((SoccerTeam(x) & ScoresSameNumberOfGoals(x,normalTime)) -> NeedsPlay(x))", "all x y.(((SoccerTeam(x) & UCLFinal(y) & SameGoalScore(x,y)) -> NeedsFilmTime(x))", "all x.((SoccerTeam(x) & SameGoalScore(x,uniqueTime)) -> NeedsExtraTime(x))", "all x y.(NumberOfGoals(x,y) -> (ClosesUCLFinal(x,y) & ForCellsFinal(x,y)))", "all x.((Team(x) & ScoresSameGoals(x) & UCLFinal(x) & RegularTime(x)) -> NeedsExtraTime(x))", "all x.((TwoSoccerTeams(x) & TeamsScoreSameGoal(x\") & UCLFinal(x) & RegularTime(x)) -> NeedsExtraTime(x))", "all x y z.((SoccerTeam(x) & UCLFinal(y) & Goal(z) & ScoresIdenticalTo(x,z) & RegularTime(z)) -> NeedsExtraTime(x,y))", "all x.((SoccerTeam(x) & SameNumberOfGoals(x)) -> NeedsToPlayLoss(x))", "all x y.((SoccerTeam(x) & Team(y) & SameNumberOfGoals(y,x) & UCLFinal(y,x)) -> NeedsPlayForExtraTime(x,y))", "all x y z.((SoccerTeam(x) & SoccerTeam(y) & Goals(z) & InUCLFinal(x,y,z) & ScoreSameNumber(x,y,z)) -> PlayForExtraTime(x))", "all x.((SoccerTeam(x) & UCLFinal(x) & SameGoalScore(x) & RegularTime(x)) -> NeedsExtraTime(x))"]}
{"id": "folio_train_1614", "nl": "If two soccer teams score the same number of goals in one UCL final during both the regular time and extra time, they need to play the penalty shoot-out.", "fol": "all x y.((IsSoccerTeam(x) & IsSoccerTeam(y) & HasSameScore(x,y) & InTimePeriod(RegularTime) & InTimePeriod(ExtraTime)) -> NeedsPenaltyShootout(x,y))", "prediction": ["all x.((SoccerTeam(x) & SameGoal(x) & UCLFinal(x)) -> PlayPenaltyShootOut(x))", "all x y.((SoccerTeam(x) & SoccerTeam(y) & RegularTime(x,y) & ExtraTime(x)) -> NeedsPenaltyShootout(x))", "all x y z.((SoccerTeam(x) & SoccerTeam(y) & UCLFinal(z) & Scores(x,y,z)) -> (PlaysPenaltyShootOut(x,y) | PlaysOut(x,z)))", "all x y.((SoccerTeam(x) & SoccerTeam(y) & ScoresSameGoalsInUCLFinal(x,y)) -> PlaysPenaltyShootOut(x))", "all x y z.((SoccerTeam(x) & SoccerTeam(y) & Player(z) & ScoresSameNumberOfGoals(x) & UCLFinal(y) & NormalTimeButExtraTime(z)) -> PlaysPenaltyShootout(x,z))", "all x y.((SoccerTeam(x) & SoccerTeam(y) & RegularTime(x) & ExtraTime(y) & SameGoalNumbers(x,y)) -> NeedsPenaltyShootOut(x))", "all x y.((SoccerTeam(x) & SoccerTeam(y) & ScoresSameNumberOfGoalsInOneFCLens(x,y)) -> PlaysPenaltyShootOut(x,y))", "all x y.((SoccerTeam(x) & SoccerTeam(y) & ScoresSameNumberOfGoals(x,y)) -> PlayPenaltyShootOut(x,y))", "all x y.((SoccerTeam(x) & SoccerTeam(y) & ScoresSameGoalsInULClar4final(x,y,Range,ExtraTime)) -> NeedsPenaltyShoot(x))", "all x.((SoccerTeam(x) & SameGoalScore(x,ExtraTime) & RegularTime(x) & ExtraTime(x)) -> NeedsPenaltyShootout(x))", "all x y.((SoccerTeam(x) & SoccerTeam(y) & ScoringSameNumberOfGoals(x,y) & UCLFinal(y) & RegularTime(y) & ExtraTime(y)) -> PlayPunchShootOut(x))", "all x y z.((SoccerTeam(x) & SoccerTeam(y) & UCLFinal(z) & RegularTime(y) & ExtraTime(z)) -> NeedsPencilShootOut(x,y))", "all x y z.((FootballTeam(x) & SoccerTeam(y) & UCLFinal(z) & RegularTime(y) & ExtraTime(y)) -> NeedsPenaltyShootOut(x,y,z))", "all x.((SoccerTeam(x) & SameNumberOfGoals(x,usl) & RegularTime(x) & ExtraTime(x)) -> NeedsPenaltyShootout(x))", "all x.((SoccerTeam(x) & BothUCLFinals(x) & SameGoals(x)) -> NeedsPenaltyShootout(x))", "all x y.((SoccerTeam(x) & SoccerTeam(y) & SuitsSameNumberOfGoals(x,y) & RegularTime(x) & ExtraTime(x)) -> NeedsPlayPenaltyShootout(x,y))"]}
{"id": "folio_train_1615", "nl": "Real Madrid and Atl\u00e9tico Madrid both scored one goal in 2016 UCL final during the regular time.", "fol": "(IsSoccerTeam(RealMadrid) & IsSoccerTeam(AtleticoMadrid) & HasSameScore(RealMadrid,AtleticoMadrid) & InTimePeriod(RegularTime))", "prediction": ["(All x.(Real(x) -> ScoreGoal(x,2016)) & Atl\u00e9tico(x) -> ScoreGoal(x,165)))", "all x y.((RealMadrid(x) & Atl\u00e9ticoMadrid(y)) -> SailsOneGoal(x,y))", "all x.((RealMadrid(x) & Atl\u00e9ticoMadrid(x)) -> (ScoredOneGoalIn2016UCL(x) & RegularTime(x)))", "((RacialMonaco(RacialMonaco) & Atl\u00e9ticoMonaco(Atl\u00e9ticoMonaco)) | (Atl\u00e9ticoMonaco(ATL) & UCLFinal(AtRegularTime))))", "(SignedOneGoal(RealMadrid) & ScoredGoal(Atl\u00e9ticoTMATL) duringRegularTime(ATL))", "(ScoredOneGoalIn2016UCLFINAL(RealMadrid) & ScoredOneGoalIn2016Atl\u00e9ticoMadrid(Atl\u00e9ticoMadrid))", "(Ground(RealMadrid,2016) & Goal(Atl\u00e9ticoMadrid,2016))", "(ScoredOneGoal(realma) | ScoredOneGoal(atl\u00e9ticoMadrid,16)) & RegularTime(realma,2016))", "(Strong Goal(Real(Real) & StrONGGOal(Atl\u00e9tico(Atl\u00e9tico))", "(ScoresOneGoal(Rail,Club) & ScoredOneGoal(Atl\u00e9tico,Club) & InCupfinal(Atl\u00e9tico,Club))", "(ScoresOneGoal(real Madrid) & ScoresOneGoal(atl\u00e9ticoMadrid))", "(all x.(RealMadrid(x) -> ATLiteCoal(x)) & all y.(Atl\u00e9ticoMadrid(y) -> ScoresOneGoalIn2016ULCLFinal(y)))", "(Score(RealMadrid) & Score(Atl\u00e9ticoMadrid) & 2016UnitedClevelandFinal(AtLatest(Atalados) & RegularTime(RasualMadrid))", "((RealMadrid(re) | Atl\u00e9ticoMadrid(re)) & UCLFinal(regular)) -> ScoresOneGoal(re))", "all x.((RealMadrid(x) & Atl\u00e9ticoMonaco(x)) -> (ScoredOneGoal(x,2016) & RegularTime(x,2016)))", "((RealMadrid(real) & Atl\u00e9ticoMadrid(at)) :(ScoredOneGoalIn2016UnitedCellFinal(at)) & RegularTime(at)))"]}
{"id": "folio_train_1616", "nl": "Real Madrid and Atl\u00e9tico Madrid both scored zero goals in 2016 UCL final during the extra time.", "fol": "(IsSoccerTeam(RealMadrid) & IsSoccerTeam(AtleticoMadrid) & HasSameScore(RealMadrid,AtleticoMadrid) & InTimePeriod(ExtraTime))", "prediction": ["(Celebrate(realMadrid) & Caluate(Atl\u00e9ticoMadrid) -> -ZeroGoalsIn2016(fullEdition))", "all x y.((RadicalMadrid(x) & Atl\u00e9ticoMadrid(y)) -> (ScoreDown(x,y) & InUCL Final(x)))", "((RealMadrid(re) & Atl\u00e9ticoMadrid(re)) -> 0GatsPosition(re)) & in 2016 UCLFinal(re))", "both Real Madrid and Atl\u00e9tico Madrid have scored zero goals in UCL Final (2016, extra-Term))", "(all x y.((Real(x) & EndOfConference(y)) -> ZeroGoals(x)) & ((Atl\u00e9tico(x) & Final(y) 2016) & ExtraTime(y)) -> -ZeroGoals(x,y)))", "(ZeroGoals(RealMadrid) & ZeroGoals(Atl\u00e9ticoMadrid))", "((RealMatalan(Real) & Atl\u00e9tico(Atl\u00e9tico(Atl\u00e9ticoMara)) -> (Scorez0GoalsInUCLFinal(Real,Swift,ExtraTime)))", "both RealMadridAndAtl\u00e9ticoMadrid(Mah) smashed zeroGoals(Madrid,2016) & duringExtraTime(Madrid,2016))", "((RealMadrid(real) & Atl\u00e9ticoMadrid(at)) -> scoredZeroGoalsInUCLFinal(real,x) & -ScoredZeroGoals(at)))", "(ZeroGoals(RealMadrid) & ZeroGoals(Atl\u00e9ticoMadrid))", "(all x.((RealMadrid(x) & ZeroGoals(x)) -> ScoredInFinal(x,2016,UCL)) & ((Atl\u00e9ticoMadrid(x) & ZeroGoals(x,2016)) -> ScoredInFinal(x,UCL)))", "(ZeroGoals(real,(Real,atl\u00e9tico,Atl\u00e9tico,at)) & ZeroGoalsDuringEndTime(at,UCL))", "((DealMadrid__(Malladrid) | Atl\u00e9ticoMalladrid__(Malladrid))) & scoredZeroGoalsDuringExtraTime(real,Mallad) & scoredZeroGoals(atLocal,LocalClaim)) -> ScoredUnderPosition(atl\u00e9ticoMallad))", "all x y.((RealMadrid(x) & Atl\u00e9ticoMadrid(y)) -> (ScoresZeroGoalsIn2016UCLFinal(x) & AddedEventTime(y)))", "(ZeroGoals(RealMadrid) & ZeroGoals(Atl\u00e9ticoMadrid))", "((RealMadrid(real) & Atl\u00e9ticoMadrid(at)) -> ZeroGoalsForClinton(real,extended)) & ((Atl\u00e9ticoMadrid(at) & Cond\u00e9 Nast UCLs(at) & Conde NastUCLs(a) & Cond\u00e9 Nast)) | (Atl\u00e9ticoMadrid(at) & Cond\u00e9 Nast UCLs(iv) & Cond\u00e9 NastHuggersUCLs(d))\")."]}
{"id": "folio_train_1617", "nl": "Real Madrid and Atl\u00e9tico Madrid needed to play a penalty shoot-out in 2016 UCL final.", "fol": "NeedsPenaltyShootout(RealMadrid,AtleticoMadrid)", "prediction": ["all x.((RealMadrid(x) & Atl\u00e9ticoMadrid(x)) -> NeededPenaltyShootOut(x))", "(PlayPenaltyShootOut(real) & PlayPenaltyShootOut(atl\u00e9tico(atl\u00e9tico(real))", "(all x.((RealMadrid(x) & Atl\u00e9ticoMadrid(x)) -> NeedsPenaltyShootOutInFC1(x)))", "all x.((Real(x) & Atl\u00e9tico(x)) -> NeedsPenaltyShootOut(x,2016))", "all x.((RealMadrid(x) & Atl\u00e9ticoMadrid(x)) -> PlayPenaltyShootOut(x,2016))", "all x y.((RealMadrid(x) & Atl\u00e9ticoMadrid(y)) -> NeededPenaltyShootOut(x,y))", "all x.((RealMadrid(x) & Atl\u00e9ticoMadrid(x)) -> NeededPenaltyShootOut(x,2016))", "all x y.((RealMadrid(x) & Atl\u00e9ticoMadrid(y)) -> NeedsPunctualShootOut(x,y))", "all x y.((RealMadrid(x) & Atl\u00e9ticoMadrid(y)) -> (PlaysPenaltyShootOutInUCLFinal(x,y) & UCLFinal(ix,y)))", "all x y z.((RealMadrid(x) & Atl\u00e9ticoMadrid(y) & PenaltyShootOut(z,x)) -> PlayedIn2016UCL Final(x,y))", "((RealMarsal(Real) & Atl\u00e9tico(Atl\u00e9tico(Atl\u00e9tico)) -> NeedsPenaltyShootOut(Roadout2016,UCL)))", "all x.((RealMadrid(x) & Atl\u00e9ticoMadrid(x) & UCLFinal(x)) -> NeedsPenaltyShootOut(x))", "(Penal Shootout) - Real(m) & Atl\u00e9tico(m))", "(PenaltyShootout(RealMadrid) & PenaltyShootOut(Atl\u00e9ticoMadrid))", "(all x.((Real(x) & Atl\u00e9tico(x)) -> PlayPenaltyShootOutIn2016(x)))", "all x.((RealMadrid(x) & Atl\u00e9ticoMadrid(x)) -> NeededPunishOut(x,2016,UCLFinal))"]}
{"id": "folio_train_1618", "nl": "Real Madrid and Atl\u00e9tico Madrid did not need to play a penalty shoot-out in 2016 UCL final.", "fol": "-NeedsPenaltyShootout(RealMadrid,AtleticoMadrid)", "prediction": ["(RealMadridAndAtl\u00e9ticoMadridNotPlayingPunchOutIn2016UCLFinal(RealMadrid) & -(PlayPunchOut(Rama,160) & Atl\u00e9ticoMadrid((ATLiTO))))", "((RealMadrid(RealMadrid) & Atl\u00e9ticoMadrid(Atl\u00e9ticoMadrid)) -> -PlaysPenaltyShootOut(RealMadrid,2016)))", "(SeniorPunchOut(RealMadrid) & PriorPunchOut(Atl\u00e9ticoMadrid))", "all x.((RealMadrid(x) & Atl\u00e9ticoMadrid(x)) -> -PlaysPenaltyShootOut(x,2016))", "all x.((RealMadrid(x) & Atl\u00e9ticoMadrid(x)) -> -NoPenaltyShootOut(x))", "all x y.((RealMadrid(x) & Atl\u00e9ticoMadrid(y)) -> -PlayPenaltyShootOut(x,y))", "both Real Madrid & Atl\u00e9tico Madrid neexists n.(PlaysPenaltyShootout(n) & UCLFinal(n))", "all x y.((RealMadrid(x) & Atl\u00e9ticoMadrid(y)) -> -NeedsPenaltyShootOut(x,y))", "all x y.((RealMadrid(x) & Atl\u00e9ticoMadrid(y)) -> (-RealMadridPlay(x,y) | Atl\u00e9ticoMadridPlay(y,z)))", "all x y.((RealMadrid(x) & Atl\u00e9ticoMadrid(y)) -> -(BetweenUCLFinal(x,y) & PenaltyShootOut(y)))", "all x.((RealMadrid(x) & Atl\u00e9ticoMadrid(x)) -> NoPenalShootOut(x))", "(-(RealMadrid(RealMadrid) & Atl\u00e9ticoMadrid(AtalticMadrid,2016)) vs. (Chambershot(Rusty) & UCLFinal(RadicalMadrid))))", "(Atl\u00e9tico(real) & RealPeru(at)) & -RealSuchOut(a) & Atl\u00e9tico(a))", "all x y z.((RealMadrid(x) & Atl\u00e9ticoMadrid(y) & 2016UnitedClintonFinal(z)) -> -PlaysPenaltyShootOut(x,y,z))", "all x.((RealMadrid(x) & Atl\u00e9ticoMadrid(x)) -> -PlaysPunctualSprickout(x,2016))", "all x.((RealMadrid(x) & Atl\u00e9ticoMadrid(x)) -> -PlayPenaltyShootOut(x,2016))"]}
{"id": "folio_train_1619", "nl": "System 7 is a UK-based electronic dance music band.", "fol": "(IsBasedIn(System7,Uk) & IsElectronicDanceMusicBand(System7))", "prediction": ["System7 is a UKbased ElectronicDanceMusicBand(System7) & BasedInGB.", "System7 is a UKbased electronic dance music band.", "System7 is a UKbased ElectronicDanceMusicBand(Systems7))", "System7 (UKBasedDanceMusicBand)", "((System7(System) & UKBasedBand(System)) -> ElectronicDanceMusicBand(System))", "System 7 is a UK-based electronic dance music band.", "System7 (UK-based ElectronicDanceMusicBand)", "System7 (UKBasedElectronicDanceMusicBand)", "System7 is a UK-based electronic dance music band.", "System7 & UKBasedElectronicDanceMusicBand(System7))", "System7 is UKbased ElectronicDanceMusicBand(System)", "System7 is a UKbased electronic dance music band.", "System7 is a UK-based electronic dance music band.", "System7 is a UK based electronic dance music band.", "System7 is a UKBased ElectronicDanceMusicBand(System7) & FoundedIn(System6) & FoundedIn(System6) & DedicatedToDance(System7) & DesignedBetween(System7,Dance,Dance-MusicBand))", "System7.uk based electronicadjeltMusicBand(System7))"]}
{"id": "folio_train_1620", "nl": "Steve Hillage and Miquette Giraudy formed System 7.", "fol": "(FormedBand(Stevehillage,System7) & FormedBand(Miquettegiraudy,System7))", "prediction": ["all x.((SteveHillage(x) & MiquetteGeraudy(x)) -> FormedSystem7(x))", "Miquette Giraudy, Steve Hillage (SteveHillage, Systems7)) & MiquetteGiraudy (MiquetteGiraudy,System7)) reunited in System7.", "(Formation(SteveHillage) & MiquetteGeraudy))", "Steve Hillage and Miquette Giraudy formed System7 (SteveHillage) & MiquetteGiraudyFormation(MiquetteGiraudy))", "(FormedBySteveHillageAndMiquetteGiraudy(SteveHillage) & FormedBySystem7(SteveHillage))", "All x.((SteveHillage(x) & Miquette Giraudy(x)) -> FormedSystem7(x))", "formed System7 (Hardship(Steve) & Giraudy(Miquette))", "(Formation(SteveHillage,SteveHallage) & MiquetteGeraudyFormation(MiquetteGeraudy,System7))", "(Formation(SteveHillage) & Formed(SteveHillage,MiquetteGorillady))", "(FormsSystem7(SteveHillage) & MiquetteGeraudy(MiquetteGeraudy))", "All x y z.((SteveHillage(x) & MiquetteGeraudiny(y) & System7(z)) -> (SteveHillage(x) & MiquetteGeraudiny(y)), formedBy(x,z) & FormedSystem7(y,z)))", "All x y z.((SteveHillage(x) & MiquetteGiraudy(y) & System7(z)) -> (SteveHoundage(x) | MiquetteGiraudy(y)))", "(Formation(SteveHillage,Secretario,Hillage) | FormedBy(MiquetteGiraudy,System7)))", "All x y z w.((SteveHillage(x) & MiquetteGiraudy(y) & System(z)) -> FormedBy(x,z))", "All x y.((SteveHillage(x) & MiquetteGeraudy(y)) -> FormsSyntax7(x))", "All x y z.((SteveHillage(x) & Miquette Giraudy(y) & System7(z)) -> FormedBy(X,y))"]}
{"id": "folio_train_1621", "nl": "Steve Hillage and Miquette Giraudy are former members of the band Gong.", "fol": "(IsFormerMemberOf(Stevehillage,Gong) & IsFormerMemberOf(Miquettegiraudy,Gong))", "prediction": ["(Former(stevehillage) & Former(stevegiraudy)) & Former(stevehillage & Former(miquettegiraudy))", "(Journalist(SteveHillage,Jones) & FormerJournalist(MiquetteGeraudy,Gong))", "(Ex-Member(SteveHillage,MiquetteGiraudy,BandGong))", "(Ex-Japan-Member(SteveHillage) & Ex-(Member(SteveHillage) | Member(MiquetteGeraudy)))", "(All x.(SteveHillage(x) | MiquetteGiraudy(x)) -> FormerBandGong(x))", "((SteveHillage(Steve) | MiquetteGiraudy(Steve))) & FormerBandGong(Steve)Hillage(Steve)Hillage(Steve)Hillage(Steve)Hillage(Steve)Hillage(Steve)Hillage(Steve)Simon)Guiredy(Simon)Hallage(Steve)Hillage(Steve)Hillage(Steve)", "(Ex-BandGong(SteveHillage) & FormerBandGong(MiquetteGiraudy))", "(FollowingGong(SteveHillage) und FollowingMiquetteGeraudy(MiquetteGeraudy))", "(all x denotes \"(SteveHillage(x) & -MiquetteGiraudy(x)) -> FormerBandGong(x)))", "(MM(SteveHillage) & MM(MiquetteGiraudy))", "(Person(SteveHillage,Gong) & Member(Hildage,Gong)) & Former(Hildage,Gong))", "(all x y.((SteveHillage(x) & -(MiquetteGeraudy(y)) & FormerBand(x)) -> Former(x,y)))", "((Member(SteveHillage) & Member(MiquetteGiraudy)) -> Former(SteveHillage,Gong))", "(EmceesSecretTimes(St.SteveHillage) & EmceesMiquetteGiraudy(MiquetteGiraudy))", "Gong (Yankees(Steve Hillage) & Laughs(MiquetteGaraudy))", "((SteveHillage(Steve) & MiquetteGeraudy(Steve)) | (MiquetteGeraudy(Steve))))"]}
{"id": "folio_train_1622", "nl": "Electric dance music bands are bands.", "fol": "all x.(IsElectronicDanceMusicBand(x) -> IsBand(x))", "prediction": ["all x.(ElectricDanceMusicBand(x) -> Band(x))", "all x.(ElectricDanceMusicBand(x) -> Band(x))", "all x.(ElectricDanceMusicBand(x) -> Band(x))", "all x.(ElectricDanceMusicBand(x) -> Band(x))", "all x.(ElectricDanceMusicBand(x) -> Band(x))", "all x.(ElectricDanceMusicBand(x) -> Band(x))", "all x.(ElectricDanceMusicBand(x) -> Band(x))", "all x y.((ElectricDanceMusicBand(x) & Band(y)) -> Band(x))", "all x.(ElectricDanceMusicBand(x) -> Band(x))", "all x y.((ElectricDanceMusicBand(x) & Band(y)) -> Band(x,y))", "all x.(ElectricDanceMusicBand(x) -> Band(x))", "all x.(ElectricDanceMusicBand(x) -> Band(x))", "all x.(ElectricDanceMusicBand(x) -> Band(x))", "all x.(ElectricDanceMusicBand(x) -> Band(x))", "all x.(ElectricDanceMusicBand(x) -> Band(x))", "all x.(ElectricDanceMusicBand(x) -> Band(x))"]}
{"id": "folio_train_1623", "nl": "System 7 has released several club singles.", "fol": "exists x.(IsClubSingle(x) & HasReleased(System7,x))", "prediction": ["System7 has released several clubsingles.", "exists x.(ClubSingle(x) & System7(x))", "(MultipleClubSingles(System7),Syntax7))", "all x.(System7(x) -> (ManageSingles(x) | ReleasesClubSingles(x)))", "System7 - released ClubSingles(Stock1)", "all x.(System7(x) -> ReleasedClubSingles(x))", "all x.(System7(x) -> (ReleasedClubSingles(x) & releasedClubSingles(x)))", "System 7 has released several club singles.", "certain club singles have been released by System7.", "System7 & ReleasedClubSingles(System7)", "System7 - has released several ClubSingles(System7))", "System7 has released several club singles.", "all x y.((System(x) & ClubSingle(y)) -> Released(x,y))", "(MultipleClubSingles(System7) & Released(System7))", "System7 has released several clubsingles(System7) & ClubSingle(System))", "all x.(System7(x) -> hasMovies(x,ClubSingles))"]}
{"id": "folio_train_1624", "nl": "Club singles are not singles.", "fol": "all x.(IsClubSingle(x) -> -IsSingle(x))", "prediction": ["all x.(ClubSingle(x) -> -Single(x))", "all x.(ClubSingle(x) -> -Single(x))", "all x.(ClubSingle(x) -> -Single(x))", "all x.(ClubSingle(x) -> -Single(x))", "all x.(ClubSingle(x) -> -Single(x))", "all x.((ClubSingle(x) & SingleIn(x)) -> -Single(x))", "all x.(Single(x) -> -Single(x))", "(-Single(club))", "all x.(ClubSingle(x) -> -Single(x))", "all x y.((ClubSingle(x) & ClubSingle(y)) -> -Single(y))", "all x.(Single(x) -> -Single(x))", "all x.(Clubsingle(x) -> -Single(x))", "all x.(ClubSingle(x) -> -Single(x))", "all x.(ClubSingle(x) -> -Single(x))", "all x.(ClubSingle(x) -> -Single(x))", "all x.(ClubSingle(x) -> -Single(x))"]}
{"id": "folio_train_1625", "nl": "System 7 was formed by former members of Gong.", "fol": "exists x.(IsFormerMemberOf(x,Gong) & FormedBand(x,System7))", "prediction": ["System7 was formedByExitMembersOfGong(27))", "System 7 (exists x.(Father(x) & Former(x,Gong)))", "all x.(System7(x) -> FormerGongMember(x))", "System 7 DevelopedByFormation(System10) & FormerMember(System)", "System7 was formed by formerGong members.", "System 7 was formerGongDepartementmembers((System3) & FormedBy(System7))", "System7 (System-1) & FormerGongMember(Gong))", "All x.(System7(x) -> FormerGongMember(x))", "System7(SysThan(S) & FormerGongmembers(SI))", "System 7 (FormedByForming(System1) & FormerGongMembers(System))", "(FormedByFormation(System7) & FormerGongMembers(System7))", "-PutsAllOfGong(System7) & FormerMembersOfGong(System7))", "System7 formedByGongFollowingMembers(Syntax)", "System7 (FormedByFormalGongMembers(system7))", "System7FormedByExitsGong(System7))", "System7, formedByGong-members(x) -> FormerStaff(x))"]}
{"id": "folio_train_1626", "nl": "System 7 has released several singles.", "fol": "exists x.(IsSingle(x) & HasReleased(System7,x))", "prediction": ["System7(System) & MultiplySingles(System)", "exists x.(System7(x) & ReleasesSingles(x))", "all x.(System7(x) -> (ReleasedSingles(x) & ReleasedSingles(x)))", "Several singles have been released by System7.", "System7 has released several singles.", "(AimsForSingle(System7) & MultipleSingles(System7))", "all x y.((System(x) & Single(y)) -> Releases(x,y))", "all x.(System(7) -> hasReleasedSingles(x))", "System 7 has released several singles.", "all x.(System7(x) -> ReleasedSingles(x))", "System7 has released several Singles.", "(Syst\u00e8me7(System7)) -> SeveralSingles(System7))", "all x.(System7(x) -> ReleasedSingles(x))", "(System7,Single(s) & Released(s,y))", "(System7.v.(Single(v) & Released(v,v)))", "System7 has released several singles."]}
{"id": "folio_train_1627", "nl": "System 7 is not a band.", "fol": "-IsBand(System7)", "prediction": ["System7 is notBand(x)", "All x.(System7(x) -> -Band(x))", "-Band(System7)", "theorem.(System-7,((System7)) & -Band(o))", "-Band(System7)", "all x.(System7(x) -> -Band(x))", "System7.de isn'tBand(system7(system))", "all x.(System-7(x) -> -Band(x))", "-Band(System7)", "all x.(System7(x) -> -Band(x))", "System 7 - Band(System7))", "System7.0.((Band(System7)))", "all x.(System7(x) -> -Band(x))", "System7(x) -Band(x))", "-Band(System7)", "System7 is notBand(System7))"]}
{"id": "folio_train_1628", "nl": "A summarization model is always faithful if it uses content from the input documents.", "fol": "all x.((SummarizationModel(x) & IsSummarizationModel(x) & UsesOnlyInputDocuments(x)) -> IsFaithful(x))", "prediction": ["all x.((SummarizationModel(x) & UsesContentInput(x)) -> Stupefy(x))", "all x.((SummarizationModel(x) & UsesInputContentImpacts(x)) -> AlwaysTrue(x))", "all x.((SummarizationModel(x) & UsesContentFromInputDocuments(x)) -> Fiddler(x))", "all x.((SummarizationModel(x) & UsesInputContent(x)) -> Stiring(x))", "all x.((SummarizationModel(x) & UsesContentFromInputDocuments(x)) -> Faithful(x))", "all x.((SummarizationModel(x) & UsesContentFromInputDocuments(x)) -> True(x))", "all x.((SummarizationModel(x) & UsesInputDocuments(x)) -> Faithful(x))", "all x.((SummarizationModel(x) & UsesInputDocuments(x)) -> Confessional(x))", "all x.((SummarizationModel(x) & UsesInputDocuments(x)) -> Faithful(x))", "all x.((SummarizationModel(x) & UsesContentFromInputDocuments(x)) -> Fidgety(x))", "all x.((SummarizationModel(x) & UsesInputContent(x)) -> Faithful(x))", "all x y.((SummarizationModel(x) & InputDocuments(y) & UsesContent(x,y) & UsedContent(x,z)) -> Stimpless(x))", "all x.((SummarizationModel(x) & UsesInputDocuments(x)) -> Faithful(x))", "all x.((SummarizationModel(x) & UsesContentFromInputDocuments(x)) -> KeepingPrinciple(x))", "all x.((SummarizationModel(x) & UsesContentFromInputDocuments(x)) -> AlwaysTrue(x))", "all x.((SummarizationModel(x) & UsesInputContent(x)) -> Faithful(x))"]}
{"id": "folio_train_1629", "nl": "Extractive models are a kind of summarization models.", "fol": "all x.((SummarizationModel(x) & IsExtractiveModel(x)) -> IsSummarizationModel(x))", "prediction": ["all x.(ExtractiveModel(x) -> SummarizationModel(x))", "all x.(ExtractiveModel(x) -> SummarizationModel(x))", "all x.(ExtractiveModel(x) -> SummarizationModel(x))", "all x.(ExtractiveModel(x) -> SummarizationModel(x))", "all x.(ExtractoriveModel(x) -> (SummarizationModel(x) | SummarizationModel(x)))", "all x.(ExtractiveModel(x) -> SummarizationModel(x))", "all x.(ExtractiveModel(x) -summarizationModel(x))", "all x.(ExtractiveModel(x) -> SummarizationModel(x))", "all x.(ExtractiveModel(x) -> SummarizationModel(x))", "all x.(ExtractiveModel(x) -> SummarizationModel(x))", "all x.(ExtractiveModel(x) -> SummarizeModel(x))", "exists x.(ExtractiveModel(x) & SummarizationModel(x))", "all x.(ExtractiveModel(x) -> (SummarizationModel(x) & SummarizationModel(x)))", "all x.(ExtractiveModel(x) -> Sort(x))", "all x y.((ExtractiveModel(x) & SummarizationModel(y)) -> Model(x,y))", "all x y.((ExtractiveModel(x) & SummarizationModel(y)) -> Model(x,y))"]}
{"id": "folio_train_1630", "nl": "Extractive model can only use content from the input documents.", "fol": "all x.((SummarizationModel(x) & IsExtractiveModel(x)) -> UsesOnlyInputDocuments(x))", "prediction": ["all x.(ExtractiveModel(x) -> usesInputDocuments(x))", "all x.(ExtractiveModel(x) -> (UsesContentFromInputDocuments(x)))", "all x.(ExtractiveModel(x) -> OnlyUsesContentFromInputDocuments(x))", "all x.(ExtractiveModel(x) -> CanUseContentFromInputDocuments(x))", "all x y.((ExtractiveModel(x) & Content(y)) -> CanUse(x,y))", "all x.(ExtractiveModel(x) -> exists y.(InputDocuments(y) & Uses(x,y))))", "all x y.((ExtractiveModel(x) & Content(y) & InputDocuments(x,y)) -> OnlyUsesFrom(x,y))", "all x.(ExtractiveModel(x) -> ContainsInputDocuments(x))", "all x.(ExtractiveModel(x) -> (CanonlyUseContentFromInputDocuments(x)))", "all x y.((ExtractiveModel(x) & InputDocuments(y)) -> OnlyUsesContent(x,y))", "all x.(ExtractiveModel(x) -> -InputDocumentsInputContent(x))", "all x y.((ExtractiveModel(x) & Document(y)) -> UseInputInputContent(x,y))", "all x.(ExtractiveModel(x) -> UsedByInputDocuments(x))", "all x.(ExtractionModel(x) -> -InputDocuments(x))", "all x.(ExtractionModel(x) -> (UsesInputDocuments(x,inputDocuments) & UsesInputDocuments(x,inputDocuments)))", "all x.(ExtractiveModel(x) -> OnlyUsesInputMaterials(x))"]}
{"id": "folio_train_1631", "nl": "Extractive models are always faithful.", "fol": "all x.((SummarizationModel(x) & IsExtractiveModel(x)) -> IsFaithful(x))", "prediction": ["all x.(ExtractiveModel(x) -> AlwaysFimptuous(x))", "all x.(ExtractionModel(x) -> (Fithy(x) | True(x)))", "all x.(ReextractionModel(x) -> AlwaysTrue(x))", "all x.(ExtractiveModel(x) -> Faithful(x))", "all x.(ExtractiveModel(x) -> AlwaysTrue(x))", "all x.(ExtractiveModel(x) -> Faithful(x))", "all x.((EjectiveModel(x) & AlwaysFindable(x)) -> Extractive(x))", "all x.(ExtractiveModel(x) -> Tight(x))", "all x.(ExtractiveModel(x) -> AlwaysTrue(x))", "all x.(ExtractiveModel(x) -> True(x))", "all x.((ExtractiveModel(x) & AlwaysTrue(x)) -> AlwaysFunctional(x))", "all x.(ExtractiveModel(x) -> AlwaysTrue(x))", "all x.(ExtractionModel(x) -> AlwaysFirm(x))", "all x.(ExtractiveModel(x) -> Faithful(x))", "all x.(ExtractiveModel(x) -> AlwaysTrue(x))", "all x.((ResultiveModel(x) & Truthful(x)) -> Consistent(x))"]}
{"id": "folio_train_1632", "nl": "Extractive models are not always faithful.", "fol": "-all x.((SummarizationModel(x) & IsExtractiveModel(x)) -> IsFaithful(x))", "prediction": ["all x.(ExtractiveModel(x) -> -Trustful(x))", "all x.(ExtractiveModel(x) -> -Firthy(x))", "all x.(ExtractiveModel(x) -> -Focuse(x))", "all x.(ExtractoriveModel(x) -> -True(x))", "all x.(ExtractiveModel(x) -> -Firtile(x))", "all x.(ExtractiveModel(x) -> -Father(x))", "(all x.(ExtractiveModel(x) -> -Traveled(x)))", "all x.(ExtractionModel(x) -> -True(x))", "all x.(ExtractiveModel(x) -> -Fresh(x))", "all x.(ExtractiveModel(x) -> -Firthy(x))", "all x.(ExtractiveModel(x) -> -True(x))", "all x.(ExtractiveModel(x) -> -True(x))", "all x.(ExtractiveModel(x) -> -Tainted(x))", "all x.(ExtractoriveModel(x) -> -True(x))", "all x.(ExtractiveModel(x) -> -Focused(x))", "all x.(ExtractiveModel(x) -> -Firent(x))"]}
{"id": "folio_train_1633", "nl": "If people practice coding questions, then they are not studying to go to medical school to become a doctor.", "fol": "all x.(PracticeCodingQuestions(x) -> -StudyingForMedicalSchool(x))", "prediction": ["all x.(PracticesCodexQuestions(x) -> -StudyingToBeMedicalSchoolToBecomeDoctor(x))", "all x.(PracticesCodingQuestions(x) -> -StudyingToMedicalSchoolToBecomeDoctor(x))", "all x.(PracticesCodecingQuestions(x) -> -UndergoingMedicalSchoolToBecomeDoctor(x))", "all x.(PracticesCodingQuestions(x) -> -GoingToMedicalSchoolToBeDoctor(x))", "all x.(PracticesCodingQuestions(x) -> -DebatingToMedicalSchoolToBecomeDoctor(x))", "all x.(PracticesCodingQuestions(x) -> -ResearchingToBecomeDoctor(x))", "all x.(PracticesCdoingQuestions(x) -> -StudiesToMedicalSchoolToBecomeDoctor(x))", "all x.(PracticesCodecingQuestions(x) -> -StudiesToMedicalSchoolToBecomeDoctor(x))", "all x.(PracticesCodingQuestions(x) -> -StudyingToMedicalSchool(x))", "all x.(PracticeCodingQuestions(x) -> -GoesToMedicalSchoolToBecomeDoctor(x))", "all x.(PracticesCodingQuestions(x) -> -MedicalSchoolToBecomeDoctor(x))", "all x.(PracticesCcoding(x) -> -StudiesToMedicalSchoolToBecomeDoctor(x))", "all x.(PracticesCodingQuestions(x) -> -GoingToMedicalSchool(x))", "all x.(PracticesCodedQuestions(x) -> -SelectingMedicalSchool(x))", "all x.(PracticesCcodingQuestions(x) -> -GoesToMedicalSchoolToBecomeDoctor(x))", "all x.(PracticesCodingQuestions(x) -> -studyingToBecomeDoctor(x))"]}
{"id": "folio_train_1634", "nl": "If people want to work in the software engineering industry, then they practice coding questions.", "fol": "all x.(WantsToWorkInSoftwareEngineering(x) -> PracticeCodingQuestions(x))", "prediction": ["all x y.((Person(x) & SoftwareEngineeringIndustry(y) & WantsWorkIn(x,y)) -> PracticesCodingQuestions(x))", "all x.(WantsToWorkInSoftwareEngineering(x) -> PrayCodingQuestions(x))", "all x y.((Person(x) & SoftwareEngineeringIndustry(y) & WantsWork(x,y)) -> PracticeCodedQuestions(x))", "all x.((Person(x) & WorksInSoftwareEngineering(x)) -> PracticesCodingQuestions(x))", "all x y.((Person(x) & SoftwareEngineering(y)) -> PracticesCodingQuestions(x,y))", "all x.((Person(x) & WorksInSoftwareEngineeringIndustry(x)) -> PracticesCodeAsking(x))", "all x.((Person(x) & WantsSoftwareEngineeringWork(x)) -> PracticeCodeChallenging(x))", "all x y z.((Person(x) & SoftwareEngineeringIndustry(y) & CodeChemicalQuestions(z)) -> WantsToWorkIn(x,y))", "all x.(WantToWorkInSoftwareEngineering(x) -> PracticeCodecingQuestions(x))", "all x.((Person(x) & WantsSoftwareEngineeringIndustry(x)) -> PracticesCodecingQuestions(x))", "all x y.((Person(x) & SoftwareEngineeringIndustry(y)) -> PracticesCodingQuestions(x,y))", "all x.((People(x) & WantsSoftwareEngineeringWork(x)) -> PracticesCodingQuestions(x))", "all x y.((Person(x) & SoftwareEngineeringIndustry(y) & WillWorkIn(x,y)) -> PracticesCodingQuestions(x))", "all x y.((Person(x) & SoftwareEngineeringIndustry(y) & WantsToWork(x,y)) -> PracticesCodingQuestions(x))", "all x.(PracticeCodecingQuestions(x) -> WantsToWorkInSoftwareEngineering(x))", "all x.((Person(x) & WantsSupportingEngineering(x)) -> PracticesCouchingQuestions(x))"]}
{"id": "folio_train_1635", "nl": "If people enjoy healthcare fields and want to help people with medical issues, then they are studying to go to medical school to become a doctor.", "fol": "all x.(EnjoysHealthcareFields(x) -> StudyingForMedicalSchool(x))", "prediction": ["all x.((TeachingHealthcareFocus(x) & ReallyEnjoysHealthcareFields(x) & WantsToHelpWithMedicalIssues(x)) -> PlannedToDegreeFromMedicalSchool(x))", "all x y.((Person(x) & EnjoysHealthcareFields(x) & WillHelpMedicalIssues(x)) -> StudiesToAskMedicalSchool(x))", "all x.((EnjoysHealthcareFields(x) & WantsToHelpPeopleWithMedicalIssues(x)) -> StudiesToBecomeMedicalSchool(x))", "all x.((EnjoysHealthcareFields(x) & WillHelpMedicalIssues(x)) -> StudiesToBecomeDoctor(x))", "all x.((Person(x) & EnjoysHealthcareFields(x) & WantsToHelpMuslims(x)) -> StudyingToBecomeDoctor(x))", "all x.((EngagesHealthcareFields(x) & WantsToHelpMuslims(x)) -> StudiesToBecomeMedicalSchool(x))", "all x y z.((Habitat(x) & MedicalIssues(y) & Person(z) & Enjoys(x,y,z) & WantsToHelpPeopleWith(x,y,z)) -> StudyingToBecomeDoctor(x))", "all x.((PeopleEnjoysHealthcareFields(x) & WantsToHelpPeopleWithMedicalIssues(x)) -> StudiesToBecomeDoctor(x))", "all x.((Person(x) & EnjoysHealthcare(x) & WantsToHelpWithMedicalIssues(x)) -> StudyingToBecomeDentist(x))", "all x.((PeopleEnjoyHealthcareFields(x) & WantsToHelpMedicalIssues(x)) -> StudyingToBecomeMedicalSchool(x))", "all x.((EnjoysHealthcareFields(x) & WantsToHelpWithMedicalIssues(x)) -> StudyingToBecomeDoctor(x))", "all x.((Lipitcares(x) & EnjoysHealthcareFields(x) & WantsToHelpPeopleWithMedicalIssues(x)) -> StudiesForMedicalSchool(x))", "all x.((EnjoysHealthcareFields(x) & WantsToHelpPeopleWithMedicalIssues(x)) -> StudiesToBecomeDoctor(x))", "all x.(EnjoysHealthcareFieldsAndWantToHelpPeopleWithMedicalIssues(x) -> StudiesToBecomeMedicalSchool(x))", "all x.((PeopleEnjoyHealthcareFields(x) & WantsToHelpWithMedicalIssues(x)) -> StudiesToBecomeDoctor(x))", "all x.((Person(x) & EnjoysHealthcareFields(x) & WantsToHelpPeopleWithMedicalIssues(x)) -> StudiesToBecomeDoctor(x))"]}
{"id": "folio_train_1636", "nl": "If people grew up with parents who worked as doctors, then they enjoy healthcare fields and want to help people with medical issues.", "fol": "all x.(GrewUpWithDoctorParents(x) -> EnjoysHealthcareFields(x))", "prediction": ["all x y.((Person(x) & GrowingUpWithParents(x) & WorkedAsDoctors(x)) -> (EnjoysHealthcareFields(x) & WantsToHelpWithMedicalIssues(x)))", "all x.((Popular(x) & ParentsWorkedAsDoctors(x)) -> (EnjoysHealthcareFields(x) & WantsToHelpWithMedicalIssues(x)))", "all x.((Person(x) & GrownUpWithParentsWorkingAsDoctors(x)) -> (EnjoysHealthcareFields(x) & Cares(x)))", "all x y.((EarnsWithParents(x) & WorkedAsDoctors(x,y) & Adults(y)) -> (EnjoysHealthcareFields(y,x) & WinsToHelpWithMedicalIssues(y,x)))", "all x.((Person(x) & GrownUpWithParents(x) & WorksAsDoctors(x)) -> (EnjoysHealthcareFields(x) & WantsToHelpThemWithMedicalIssues(x)))", "all x y.((Parent(x) & ServedInDoctors(y)) -> (EnjoysHealthcareFields(x) & WantsToHelpWithMedicalIssues(x)))", "all x.((Popular(x) & grewUpWithParentsWithDoctors(x)) -> (EnjoysHealthcareFields(x) & WantsToHelpWithMedicalIssues(x)))", "all x.((Popular(x) & GrowingUpWithParents(x) & WorkedAsDoctors(x)) -> (EnjoysHealthcareFields(x) & WantsToHelpMedicalIssues(x)))", "all x.((Person(x) & grewUpWithParentsWorkingDoctors(x)) -> (EnjoysHealthcareFields(x) & WouldLoveToHaveMedicalIssues(x)))", "all x y.((GrowthWithParents(x) & WorksAsDoctors(x)) -> (EnjoysHealthcareFields(x) & WishesToHelpWithMedicalIssues(y)))", "all x.((People(x) & ParentsWorkAsDoctors(x)) -> (EnjoysHealthcareFields(x) & WantsToHelpWithMedicalIssues(x)))", "all x.((People(x) & BornWithParentsWorkingAsDoctors(x)) -> (EnjoysHealthcareFields(x) & WantsToHelpMedicalIssues(x)))", "all x.((Person(x) & grewUpWithParents(x) & WorkedAsDoctors(x)) -> (EnjoysHealthcareFields(x) & WantsToHelpWithMedicalIssues(x)))", "all x.((People(x) & GrownUpWithParents(x) & WorkedAsDoctors(x)) -> (EnjoysHealthcareFields(x) & WantsToHelpWithMedicalIssues(x)))", "all x y.((People(x) & GrownUpWithParents(x,y) & Doctors(y)) -> (EnjoysHealthcareFields(x) & WantsToHelpWithMedicalIssues(x)))", "all x.((ActionForPerson(x) & GrowingUpWithPolaristsWorkingAsDoctors(x)) -> (EnjoysHealthcareFields(x) & WantsToHelpPeopleWithMedicalIssues(x)))"]}
{"id": "folio_train_1637", "nl": "If people study hard, then they grew up with parents who worked as doctors.", "fol": "all x.(StudiesHard(x) -> ParentDoctor(x))", "prediction": ["all x.(StudiesHard(x) -> (GrowEyedWithParents(x) & WorkedAsDoctors(x)))", "all x.(StudyHard(x) -> (GrowsUpWithDoctors(x)))", "all x y z.((Person(x) & StudyHard(y) & Parent(z) & Doctor(z)) -> GrownUpWith(x,y,z))", "all x.(StudiesHard(x) -> (GrowsUpWithDisturers(x)))", "all x y.((Person(x) & StudyHard(x)) -> (GroomedUpWithParents(x) & WorkedAsDoctors(y)))", "all x.(StudiesHard(x) -> GrownUPWithDentistParents(x))", "all x.((Person(x) & StudiesHard(x)) -> GrownUpWithDoctors(x))", "all x y.((Person(x) & StudyHard(x)) -> (HeadsUpWithParent(x,Y) & WorkedAsDoctors(y)))", "all x.(StudiesHard(x) -> GrowsUpWith(x,y))", "all x.(StudiesHard(x) -> (GrowsUpWithParentsWorkingAsDoctors(x)))", "all x.(StudiesHard(x) -> GrewUpWithDoctors(x))", "all x.(StudiesHard(x) -> ((AddedToParent(x) & Doctor(x))))", "all x.(StudiesHard(x) -> GrownUpWithDoctorsParents(x))", "all x y.((Person(x) & StudyHard(x)) -> (GrowUpWithParents(x,y) & WorkedAsDoctors(x)))", "all x.(StudiesHard(x) -> GrowledInWithWorkingDoctors(x))", "all x.(StudiesHard(x) -> (GrowthsUpWithPasts(x,doctors)))"]}
{"id": "folio_train_1638", "nl": "If Robin neither enjoys healthcare fields and wants to help people with medical issues nor grew up with parents who worked as doctors, then Robin is either a person who studies hard or grew up with parents who worked as doctors.", "fol": "(-(EnjoysHealthcareFields(Robin) | GrewUpWithDoctorParents(Robin)) -> (StudiesHard(Robin) | GrewUpWithDoctorParents(Robin)))", "prediction": ["all x.((Robin(x) & -(EnjoysHealthcareFields(x) & WantsToHelpMedicalIssues(x) & GrowingUpWithDoctors(x))) -> (StudiesHard(x) | GrowsUpWithDoctors(x)))", "all x.((Robin(x) & -(EnjoysHealthcareFields(x) & WantsToHelpPeopleWithMedicalIssues(x) | GrownUpWithDoctors(x))) -> (StudiesHard(x) | GrownUpWithDoctors(x)))", "all x.((Robin(x) & -(EnjoysHealthcareFields(x) & WantsToHelpPeopleWithMedicalIssues(x) & WasGraduatedWithPaintersWorkingAsDoctors(x)) | (WorriedForPatients(x,PatientsWorkingAsDoctors) & WasStudiesHard(x))))", "all x.((Robin(x) & -(EnjoysHealthcareFields(x) & WantsToHelpMedicalIssues(x) | GrownUpWithDoctors(x))) -> (StudiesHard(x) | GrownUpWithDoctors(x)))", "all x.((Robin(x) & -(LovesHealthcareFields(x) & WantsToHelpMedicalIssues(x) | GrownUpWithDoctors(x))) -> (StudiesHard(x) | GrownUpWithDoctors(x)))", "all x.((Republican(x) & -(EnjoysHealthcareFields(x) & WantsToHelpMedicalIssues(x) | grewUpWithDoctors(x))) -> (StudiesHard(x) | GrowsUpWithDoctors(x)))", "all x.((Robin(x) & -(AffordsHealthcareFields(x) & WantsToHelpHealthcareIssues(x) | GraspedUpWithDoctors(x))) -> (StudiesHard(x) | GrownUpWithDoctors(x)))", "all x.((Robin(x) & -(EnjoysHealthcareFields(x) & WantsToHelpPeopleWithMedicalIssues(x) & GrownUpWithDoctors(x))) -> (StudiesHard(x) | GrownUpWithDoctors(x)))", "all x.((Robin(x) & -(EnjoysHealthcareFields(x) & WantsToHelpMedicalIssues(x) & GrownUpWithDoctors(x))) -> (StudiesHard(x) | GrownUpWithDoctors(x))))", "all x.((Person(x) & -HappyHealthcareFields(x) & WantsToHelpMedicalIssues(x) & GrowsUpWithDrexes(x)) -> (StudiesHard(x) | GrowsUpWithDrexes(x)))", "all x.((Robin(x) & -(EnjoysHealthcareFields(x) & WantsToHelpWithMedicalIssues(x) & GrowingUpWithDoctors(x))) -> (StudiesHard(x) | GrownUpWithDoctors(x)))", "all x.((Robin(x) & -(EnjoysHealthcareFields(x) & WantsToHelpPeopleWithMedicalIssues(x) | GrownUpWithWorkingDoctors(x))) -> (StudiesHard(x) | GrownUpWithWorkingDoctors(x)))", "all x.((ReinforcesHealthcareFields(x) & -(WantsToHelpMedicalIssues(x) | (GrandfatherWorkingAsDoctors(x) & -EnjoysHealthcareFields(x)))) -> (StudiesHard(x) | GoneAlongAsDoctors(x)))", "all x.((Person(x) & -EnjoysHealthcareFields(x) & WantsToHelpPeopleWithMedicalIssues(x) & HasWorkedAsDoctors(x)) -> (StudiesHard(x) | HasWorkedAsDoctors(x)))", "all x.((Robin(x) & -(EnjoysHealthcareFellows(x) & WantsToHelpMedicalIssues(x) & ParentsWorkedAsDoctors(x)))-> (StudiesHard(x) | ParentsWorkedAsDoctors(x)))", "all x.((Robin(x) & -(EnjoysHealthcareFields(x) & WantsToHelpMedicalIssues(x) | GrownUpWithDr.Parents(x))) -> (StudiesHard(x) | GrownUpWithDr.Parents(x)))"]}
{"id": "folio_train_1639", "nl": "Robin is a person who studies hard.", "fol": "StudiesHard(Robin)", "prediction": ["all x.(Robin(x) -> StudiesHard(x))", "all x.(Robin(x) -> StudiesHard(x))", "all x.(Robin(x) -> StudiesHard(x))", "(StudiesHard(Robin) & Robin(Robin))", "(StudiesHard(Robin) & People(Robin))", "all x.(Robin(x) & StudiesHard(x))", "(StudiesHard(Robin) & LovesHard(Robin))", "all x.(Robin(x) -> StudiesHard(x))", "all x.(Robin(x) -> StudiesHard(x))", "all x.(Robin(x) -> StudiesHard(x))", "all x.(Robin(x) -> StudiesHard(x))", "all x.(Robin(x) -> StudiesHard(x))", "all x y.((Robin(x) & Person(y)) -> StudiesHard(x,y))", "all x.(Robin(x) -> StudiesHard(x))", "all x.(Robin(x) -> StudiesHard(x))", "all x.(Robin(x) -> StudiesHard(x))"]}
{"id": "folio_train_1640", "nl": "Robin practices coding questions and wants to work in the software engineering industry.", "fol": "(PracticeCodingQuestions(Robin) & WantsToWorkInSoftwareEngineering(Robin))", "prediction": ["(PracticesCodecingQuestions(Robin) & WantsToWorkInSoftwareEngineering(Robin))", "all x.(Robin(x) -> (PracticesCodingQuestionsAndWantsToWorkInSoftwareEngineering(x)))", "all x.(Robin(x) -> (PracticesCodingQuestions(x) & WantsToWorkInSoftwareEngineering(x)))", "all x y.((Robin(x) & CodeCreationQuestions(y)) -> (Practices(x,y) & WantsToWorkInSoftwareEngineering(x)))", "all x.(Robin(x) -> (Practices(x,Coding) & WantsToWorkInSoftwareEngineering(x)))", "all x.(Robin(x) -> (PracticesCodingQuestions(x) & WantsToWorkInSoftwareEngineeringIndustry(x)))", "all x.(Robin(x) -> (PracticesCodecingQuestions(x) & WantsToWorkInSoftwareEngineering(x)))", "all x.(Robin(x) -> (PracticesCodeCriticQuestions(x) & WantsToWorkInSoftwareEngineering(x)))", "(WorksInSoftwareEngineering(Robin) | PracticesCodingQuestions(Robin))", "all x.(Robin(x) -> (PracticesCodecingQuestions(x) & WantsToWorkInSoftwareEngineering(x)))", "(PracticesCodingQuestions(Robin) & WantsToWorkInSoftwareEngineering(Robin))", "all x.(Robin(x) -> (PracticesCodeCosts(x) & WantsSoftwareEngineering(x)))", "all x.(Robin(x) -> (PracticesCodingQuestions(x) & WantsToWorkInSoftwareEngineering(x)))", "(exists x.(Robin(x) & CodeCasingQuestions(x)) & WantsWorkInSoftwareEngineering(x))", "(PracticesCodeChemicalQuestions(Robin) & WantsToWorkInSoftwareEngineering(Robin))", "all x.(Robin(x) -> (PracticesCodingQuestions(x) & WantsToWorkInSoftwareEngineering(x)))"]}
{"id": "folio_train_1641", "nl": "Robin neither practices coding questions nor works to work in the software engineering industry.", "fol": "(-PracticeCodingQuestions(Robin) & -WantsToWorkInSoftwareEngineering(Robin))", "prediction": ["-(PlacesCodingQuestions(Robin) | WorksInSoftwareEngineeringIndustry(Robin)))", "all x.(Robin(x) -> (-PracticesCodingQuestions(x) & -WorksInSoftwareEngineeringIndustry(x)))", "-(PracticesCodingQuestions(Robin) | WorksInSoftwareEngineering(Robin)))", "Robin nepracticesCodingQuestions ni WorksInSoftwareEngineering(Robin)", "all x.(Robin(x) -> (-PracticesCodingQuestions(x) & -WorksInSoftwareEngineering(x)))", "all x.(Robin(x) -> (-PracticesCodingQuestions(x) & -WorksInSoftwareEngineeringIndustry(x)))", "- (PracticesCodingQuestions(Robin) | WorksToSoftwareEngineering(Robin)))", "Robin & -(PracticesCodingQuestions(Robin) | WorksInSoftwareEngineering(Robin)))", "-(PracticesCodingQuestions(Robin) | WorksInSoftwareEngineering(Robin))", "all x.(Robinson(x) -> (-PracticesCodingQuestions(x) & -WorksInSoftwareEngineering(x)))", "(NonePracticesCodingQuestions(Robin) & -WorksInSoftwareEngineering(Robin))", "all x.(Robin(x) -> (-PracticesCodingQuestions(x) & -WorksInSoftwareEngineering(x)))", "all x.((Robin(x) & -PracticesCodingQuestions(x)) | WorksInSoftwareEngineering(x))", "(InformationEnvironment(Robin) & -(PracticesCodingQuestions(Robin) | WorksInSoftwareEngineering(Robin)))", "all x.(Robin(x) -> (-PracticesCodecingQuestions(x) & -WorksInSoftwareEngineering(x)))", "all x.(Robin(x) -> (-PracticesCodecingQuestions(x) | WorksInSoftwareEngineering(x)))"]}
{"id": "folio_train_1642", "nl": "If people go to the spa at least once a week, then they are not people who are miserly and need to save a large portion of their income.", "fol": "all x.(GoesToSpaWeekly(x) -> -IsMiserly(x))", "prediction": ["all x.((Person(x) & GoesToSara(x) & AtLeastOnlyThreshold(x)) -> -Misterly(x) & NeedsLargePercentAppropriate(x))", "all x.((Person(x) & GoesToSpa(x) & -(Misterly(x) & NeedsToSaveLargePartImportance(x))) -> -Person(x))", "all x.((Person(x) & GoesToSpa(x) & AtLeastOneWeek(x)) -> -(MiserlyPerson(x) & NeedsToSaveLargePart(x)))", "all x.(GoesToSpa(x) -> (-MiserlyPeople(x) & HugePassageSaving(x)))", "all x.((Person(x) & GoToTheSpaAtLeastOnce(x)) -> -(Miserly(x) & NeedsSavingLargePartOfIncome(x)))", "all x.(Remembers(x) & Spa(x) & AtLeastOnlyWeekly(x)) -> -MiserlyPeople(x) & NeedsSavingLargePartOfIncome(x))", "all x.(GoesToSpa(x) -> ((Exercise(x) & -Miserly(x) & NeedsToSaveLargeParticipation(x))))", "all x.(FastFit(x) -> -(People(x) & VisitSpa(x) & AtLeastOneWeek(x)) & -(Miserly(x) & NeedsSavingLargeParticipation(x))))", "all x.((People(x) & (GoesCourse(x,1) & EachWeek(x))) -> -(Miserly(x) & NeedsToSaveLargePartOfIncome(x)))", "all x.((People(x) & GoesToSpaAtLeastMealAtWeek(x)) -> -(MiserlyPeople(x) & NeedsSavingLargePercentFromIncome(x)))", "all x.(GoingToSpa(x) -> (-Miserly(x) & NotNeedingToSaveLargePurchase(x)))", "all x.((Person(x) & GoesToSpa(x) & AtLeastOneWeek(x)) -> -Miserly(x) & CanSaveLargePurchase(x))", "all x.((Person(x) & UsuallyGoesToSpa(x)) -> -(Mizerly(x) & NeedsLargeIncomeSaving(x)))", "all x.((Tourist(x) & ReachesShadow(x)) -> -Sterly(x) & SaveLargePartImpact(x))", "all x y.((Person(x) & GoesToSpa(x) & Weeks(y)) -> -(Person(x) & Miserly(y) & NeedsToSaveLargePartOfIncome(x)))", "all x.((Spa(x) & Visits(x,y) & EveryWeek(y)) -> -RealMiserly(x) & NeedsSaving(x))"]}
{"id": "folio_train_1643", "nl": "People are either miserly and need to save a large portion of their income, or people that frivolously spend a lot of money every time they go out.", "fol": "all x.(IsMiserly(x) | SpendsFrivolously(x))", "prediction": ["all x y z.((Person(x) & MiserlyAndNeedsToSaveLargePartOfIncome(x) & ((Caution(y) & FreespreadMoney(z) & GoOut(z))) -> ((Cautions(x,y) & SpendsLootOfMoney(y,z)) & (Deals(y,x) | Expenses(y,z)))))", "all x.(Person(x) -> ((Miserly(x) & NeedsToSaveLargeParticipation(x)) | (Fruitly(x) & SpendsLargeLivingLossOfMoney(x)))))", "all x y z.((Person(x) & Miserly(x) & NeedsSavingPercent(x)) | (FruitlySpoilsLoadOfFrugalMoney(y) & EveryTimeOut(z))))", "all x.((Person(x) & Miserly(x) & NeedsToSaveLargePurchase(x)) | Frivolous(x))", "all x.(Person(x) -> ((Miserly(x) & NeedsToSaveLargeParticipation(x)) | FrugalSpoilage(x))))", "(all x.(People(x) -> (Miserly(x) & NeedsToSaveLargePurchase(x))) | (Miserly(x) & UsuallySpoilsMore(x) & Frivolous(x))))", "all x.(People(x) -> ((Miserly(x) & NeedsToSaveLargePercent(x)) | (Frivolous(x) & SpendsMoreMortgage(x)))))", "all x.((Person(x) & (Miserly(x) & NeedsReduction(x) | Frivolous(x))) -> HasMoney(x))", "exists x.(People(x) & ((Miserly(x) & NeedsSavingLargePurchase(x)) | (Frivolous(x) & SpendsLotOfMoneyEveryTime(x)))))", "all x.((Person(x) & (Miserly(x) & NeedsSaveLargePurpose(x)) | (Frivolous(x) & SpendsLoonsOfMoneyEveryTime(x))))", "(exists x.(Person(x) & (Miserly(x) & NeedsToSaveLargePartOfIncome(x)) | -Frivolous(x) & SpendsLargeAmountOfAmountEveryTime(x)))", "all x.((Person(x) & (Miserly(x) & NeedsToSavePartOfIncome(x)) | Frivolous(x))) -> SpendsMoreMoney(x))", "exists x.(Person(x) & ((Miserly(x) & NeedsLargePurchase(x)) | (Frivolous(x) & SpendsLotsOfMoneyEveryTime(x)))))", "exists x.(People(x) & ((Miserly(x) & NeedsSavingLargePurposeOfIncome(x)) | (Frivolous(x) & SpendsMuchOfMoney(x)))))", "all x.((Person(x) & (Miserly(x) & NeedsLargeEmpireOut(x)) | FrugallySpysLittleMoney(x))) -> -BeforeGoingOut(x))", "all x.(People(x) -> ((Miserly(x) & NeedsToSaveLargeParticipation(x) | Frivolous(x) & SpendsLootOfMoney(x))))"]}
{"id": "folio_train_1644", "nl": "If people frivolously spend a lot of money every time they go out, then they value quality manufacturing and luxury items.", "fol": "all x.(SpendsFrivolously(x) -> ValuesLuxury(x))", "prediction": ["all x.((People(x) & FrivolouslyOwnsThousandsOfMoney(x)) -> ValuesQualityManufacturingAndLuxuryItems(x))", "all x.(FruitouslySpoilsLootOfMoneyEveryTimeOut(x) -> ValuesQualityManufacturingAndLuxuryItems(x))", "all x.(FrivolousExpensesAmountOfFunnels(x) -> ValuesQualityMakingAndLuxuryItems(x))", "all x.((FriciouslySpreadsMoney(x) & VotesQMaking(x) & ValuesLuxuryItems(x)) -> (ValuesFriciouslySpending(x) & ValuesQualityManufacturing(x)))", "all x.((People(x) & FrivolouslySpreadsAmountOfMoney(x) & EveryTimeOut(x)) -> ValuesQualityManufacturingAndLuxuriesItems(x))", "all x.((People(x) & FrivolouslySpreadsMillionsEachTimeOut(x)) -> (ValuesQualityManufacturing(x) & ValuesLuxuryItems(x)))", "all x y.((Person(x) & FrevolouslySpent(x,y) & EveryTimeOut(y) & GoOut(x)) -> ValuesQualityManufacturingAndLuxuryItems(x,y))", "all x.((Spoisoners(x) & SpendSmallMoneySeasoningExercise(x)) -> ValueQualityManufacturingAndLuxuryItems(x))", "all x.((FrivolouslySpreadsLossOfMoney(x) & EveryTimeOut(x)) -> (ValuesQualityManufacturing(x) & LuxuriousItems(x)))", "all x.((FruitouslySpendsMoney(x) & GoesOut(x)) -> ValuesQualityManufacturing(x) & ValuesLuxuryItems(x))", "all x.((FruitouslySpunks(x) & EveryTimeOut(x)) -> (ValuesQualityManufacturing(x) & LuxuriousItems(x)))", "all x.((FruitualSpending(x) & GoOut(x)) -> (ValuesQualityManufacturing(x) & ValuesLuxuryItems(x)))", "all x.((FrauvolousSpentOfMoney(x) & EveryTimeOut(x)) -> ValuesQualityManufacturingAndLuxuryItems(x))", "all x.((FruitlySpoilsLotOfMoney(x) & GoOut(x)) -> (ValuesQualityManufacturingInclusive(x) & ValuesLuxuryItems(x)))", "all x.((FruivolousExpense(x) & GoOut(x)) -> (ValuesQualityManufacturing(x) & ValuizesLuxuryItems(x)))", "all x.((FruivolousSpending(x) & GoesOut(x)) -> (ValuesQualityManufacturing(x) & LuxuriousItems(x)))"]}
{"id": "folio_train_1645", "nl": "If people value quality manufacturing and luxury items, then they enjoy shopping for materialistic items in their free time.", "fol": "all x.(ValuesLuxury(x) -> EnjoysShopping(x))", "prediction": ["all x y z.((Person(x) & QualityManufacturing(y) & LuxuriousItems(z) & Values(x,y)) -> (EnjoysShoppingForMaterialisticItems(x) & FreeTime(x)))", "all x.(ValuesQualityManufacturingAndLuxuryItems(x) -> EnjoysShoppingForMaterialisticItems(x))", "all x.(DeepTime(x) -> (ValueQualityManufacturing(x) & ValueLuxuryItems(x) & EnjoysShoppingForMaterialisticItems(x)))", "all x.(ValuesQualityManufacturingAndLuxuryItems(x) -> EnjoysShoppingForMaterialisticItems(x))", "all x.(ValueQualityManufacturingAndLuxuryItems(x) -> EnjoysShoppingForMaterialisticItems(x))", "all x.((People(x) & ValueQualityManufacturing(x) & ValueLuxuryItems(x)) -> EnjoysShoppingForMaterialisticItems(x))", "all x y z.((Person(x) & QualityManufacturing(y) & LuxuriousItem(z) & Values(x,y)) -> EnjoysShoppingFor(x,z))", "all x.(ValueQualityManufacturing(x) & LuxuriousItems(x)) -> EnjoyShoppingForMaterialisticItems(x))", "all x.(PeopleValueQualityManufacturingAndLuxuryItems(x) -> EnjoyShoppingForMaterialisticItemsInFreeTime(x))", "all x.((Person(x) & ValuesQualityManufacturing(x) & ValuesLuxury(x)) -> EnjoysShoppingForMaterialisticItems(x))", "all x.((Human(x) & ValuesQualityManufacturing(x) & ValuesLuxuryItems(x)) -> EnjoysShoppingForMaterialisticItems(x))", "all x.(ValuesQualityMaking(x) & ValuesLuxuryItems(x)) -> EnjoysShoppingInFreeTime(x))", "all x.((Person(x) & ValuesQualityManufacturing(x) & ValuesLuxuryItems(x)) -> EnjoysShoppingForMaterialisticItems(x))", "all x.(Value(x,y) & QualityManufacturing(y) & LuxuryItems(x)) -> EnjoyShoppingForMaterialisticItems(x))", "all x.(ValuesQualityManufacturing(x) & ValuesLuxuriousItems(x)) -> EnjoysShoppingForMaterialisticItemsInFreeTime(x))", "all x y.((Person(x) & ValuesQualityManufacturing(x) & ValuesLuxuryItems(x)) -> EnjoysShoppingForMaterialisticItemsInFreeTime(x))"]}
{"id": "folio_train_1646", "nl": "If Jess is not miserly and needs to save a large portion of their income, then Jess does not value quality manufacturing and luxury items.", "fol": "(-IsMiserly(Jess) -> -ValuesLuxury(Jess))", "prediction": ["all x.((Jess(x) & -Miserly(x) & NeedsSavingLargePARTOfIncome(x)) -> (-ValuesQualityManufacturing(x) & -ValuesLuxuryItems(x)))", "all x.((Jess(x) & -Miserly(x) & NeedsToSaveLargePurpose(x)) -> (-ChancessMadeFactory(x) & -LuxuryItems(x)))", "all x.((J\u00e9ss(x) & -Miserly(x) & SavesLargeContent(x)) -> (-ValuesQualityMakingAndLuxuryItems(x)))", "all x.((Jess(x) & -Miserly(x) & NeedsSavingLargePartOfIncome(x)) -> -ValuesQualityManufacturing(x) & -ValuesLuxuryItems(x))", "all x.((Jess(x) & -Miserly(x) & NeedsSavingLargePurchaseOfIncome(x)) -> -ValuesQualityManufacturing(x) & -ValuesLuxuryItems(x))", "all x.(((Jesse(x) & -Miserly(x) & CanSaveLargePurchase(x)) -> -ValuesQualityManufacturingAndLuxuryItems(x))", "all x.((Jess(x) & -Miserly(x) & NeedsSaveDownIncome(x)) -> -ValuesQualityManufacturing(x) & -ValuesLuxuryItems(x))", "all x.((Jess(x) & -Miserly(x) & NeedsLargePartOfIncome(x)) -> (NoValuesQualityManufacturing(x) & -NeedsLuxuryItems(x)))", "all x.((Jess(x) & -Miserly(x) & NeedsToSaveLargeSectionOfIncome(x)) -> -ValuesQualityManufacturingLuxuryItems(x))", "all x.((Jess(x) & -Miserly(x) & NeedsToSaveLargePartOfIncome(x)) -> -ValuesQualityManufacturingAndLuxuryItems(x))", "all x.((Jess(x) & -Miserly(x) & NeedsToSaveLargeParticipationOfIncome(x)) -> -ValuesQualityManufacturingAndLuxuryItems(x))", "all x.((Jess(x) & -Miserly(x) & NeedsSaveLargeParticipation(x)) -> -ValuesQualityManufacturing(x) & -ValuesLuxuryItems(x))", "all x.((Jess(x) & -Ceremonous(x) & NeedsBalanceOfIncome(x)) -> (-ValuesQualityManufacturing(x) & -ValuesLuxuryItems(x)))", "all x.((Jess(x) & -Misterly(x) & NeedsSaveLargePurchaseOfIncome(x)) -> (-ValuesQualityManufacturing(x) & -ValuesLuxuryItems(x)))", "all x.((Jess(x) & -Miserly(x) & NeedsLargePurchaseOfIncome(x)) -> (-ValuesQualityManufacturing(x) & -ValuesLuxuryItems(x)))", "all x.((Jess(x) & -Miserly(x) & NeedsSaveLargePartImportance(x)) -> -ValuesQualityManufacturingAndLuxuryItems(x))"]}
{"id": "folio_train_1647", "nl": "If Jess either values quality manufacturing and luxury items or, if he does not, then he is miserly and needs to save a large portion of his income, then Jess frivolously spends a lot of money every time he goes out.", "fol": "(((ValuesLuxury(Jess) & -IsMiserly(Jess)) | (-ValuesLuxury(Jess) & IsMiserly(Jess))) -> ValuesLuxury(Jess))", "prediction": ["all x.((Jess(x) & ValuesQualityManufacturing(x) & ValuesLuxuryItems(x)) | (-ValuesQualityManufacturing(x) & NecessarySaving(x))))", "all x.((Jess(x) & ValuesQualityManufacturing(x) & ValuesLuxuryItems(x)) | (-ValuesQualityManufacturing(x) & SavesLargePartImportance(x))))", "all x.((Jess(x) & ValuesQualityManufacturingAndLuxuryItems(x)) | (-ValuesQualityManufacturing(x) & SalaryAmount(x))))", "all x.(((Jess(x) & ValuesQualityMaking(x) & ValuesLuxuryItems(x)) | (-ValuesQualityMaking(x) & SavesLargeNumberOfIncome(x)))) -> SpendsFuriously(x))", "all x.((Jess(x) & ValuesQualityManufacturingAndLuxuryItems(x) | -ValuesQualityManufacturingAndLuxuryItems(x)) -> (Miserly(x) & NeedsSavingLargePurchaseOfIncome(x)))", "all x.(((Jess(x) & ValuesQualityManufacturing(x) & ValuesLuxuryItems(x)) | (-ValuesQualityManufacturing(x) & NeedsSavingValue(x)))) -> FrivolousSpoilage(x))", "all x y.((Jess(x) & QualityManufacturing(y) & LuxuryItems(y)) | (-Values(x,y) & Miserly(x) & NeedsConsumptionOfIncome(x)))) -> FrivolousSpoilage(x,y))", "all x.(EqualQualityManufacturing(x) & LuxuryItems(x) | (-ValuesQuality(x) & UsesLuxuryItems(x))) & Miserly(x) & NeedsSavingLargePartImportance(x)) -> FrivolousSpending(x))", "all x.((Jess(x) & ValuesQualityManufacturing(x) & ValuesLuxuryItems(x)) | (-ValuesQualityManufacturing(x) & ValuesLuxuryItems(x))))", "all x.((Jess(x) & ValueQualityManufacturingAndLuxuryItems(x)) | (-ValuesQualityManufacturingAndLuxuryItems(x)))) -> (Miserly(x) & NeedsSavingLargeAmountOfIncome(x)))", "all x.((Jess(x) & (ValuesQualityManufacturing(x) | ValuesLuxuryItems(x))) | (-ValuesQualityManufacturing(x) & NeedsToSaveLargePercent(x))))", "all x.((PleasuresQualityManufacturingAndLuxuryItems(x) | (-ValuesQualityManufacturing(x) & NeedsToSaveLargePartOfIncome(x))) -> SpendsFruitously(x))", "all x.((Jess(x) & ValuesQualityManufacturingAndLuxuryItems(x)) | (-ValuesQualityManufacturingAndLuxuryItems(x)))) -> SpentFuriouslyWithoutMoney(x))", "all x.((Jess(x) & ValuesQualityManufacturingAndLuxuryItems(x)) -> (Miserly(x) & NeedsToSaveLargePartOfIncome(x)))", "all x.((Jess(x) & (ValuesQualityManufacturing(x) | ValuesLuxuryItems(x))) -> (Miserly(x) & NeedsLargePartOfIncome(x)))", "all x.((Jess(x) & (ValuesQualityManufacturing(x) | ValuesLuxuryItems(x))) | (Miserly(x) & NeedsToSaveLargePercent(x))))"]}
{"id": "folio_train_1648", "nl": "Jess frivolously spends a lot of money every time they go out.", "fol": "SpendsFrivolously(Jess)", "prediction": ["all x.((Jess(x) & GoOut(x)) -> SpendsHair(x))", "all x.((FruitfullysSpoils(y) & Jess(x)) -> Spends(y,x))", "all x.(FruitouslySpoides(x,y) -> Jess GoesOutWithOut(y))", "all x.(FruitlySpoopsMoney(x) -> Jess(x))", "all x y.((Jess(x) & GoingOut(y)) -> SpendsLotOfMoney(x,y))", "all x.(FruvolousPentage(x) -> Sibling(x))", "all x.(Jess(x) -> SpendsSoLittleMoney(x))", "all x y z.((Jess(x) & GoOut(y) & Money(z) & FrivolouslySpoils(x,z)) -> SpendsLiamgIn(x,z))", "all x.(FruitlyExpenses(x,Jess) -> SpendsFreshPerson(x))", "all x y.((ZeroDayOut(x) & Jess(y)) -> SpendsMoreThen(y,x))", "all x.((Jess(x) & GoOut(x)) -> Spends(x,y))", "all x y.((Jess(x) & Outside(y)) -> SpendsLittleMoney(x,y))", "all x.(Jess(x) -> SpendsMoney(x,x))", "all x y.((Jess(x) & Exiting(y) + SpendsTime(x,y)) -> FrivolouslyFrugallyFrauously(x))", "all x.(Jess(x) -> SpendsMoneyFruivolously(x))", "all x.((Jess(x) & GoesOut(x)) -> FauxlySpreadsLittleLossOfMoney(x))"]}
{"id": "folio_train_1649", "nl": "Jess either enjoys shopping for materialistic items in his free time or, if he does not, then he goes to the spa at least once a week.", "fol": "(EnjoysShopping(Jess) | (-EnjoysShopping(Jess) -> GoesToSpaWeekly(Jess)))", "prediction": ["((Jezs(x) | -Jezs(x))) -> (EnjoysShoppingInFreeTime(x) | (-EnjoysShoppingInFreeTime(x) & GoesToSpaAtLeastOneWeek(x)))))", "all x.((Jess(x) & -EnjoysShoppingMaterialisticItems(x)) -> (GoesToSpa(x) & Travels(x)))", "all x.((Jess(x) & EnjoysShoppingInFreeTime(x)) | (-EnjoysShoppingInFreeTime(x) & GoesToSpa(x))))", "all x.((Jess(x) & (EnjoysShoppingMaterialisticItemsInFreeTime(x) | (-EnjoysShoppingMaterialisticItemsInFreeTime(x))))) -> GoesToSPA(x))", "all x.((Jess(x) & (EnjoysShopping(x) | -enjoysShopping(x))) -> UsuallyToSpa(x))", "all x.((Jess(x) & (EnjoysShoppingInFreeTime(x) | (-EnjoysShoppingInFreeTime(x)))) -> GoesToSpa(x)))", "all x.((Jess(x) & (EnjoysMaterialisticItems(x) | -EnjoysMaterialisticItems(x))) -> GoesToSpa(x))", "all x.(ShoppingForMaterialisticItems(x) | (-ShoppingInFreeTime(x) & GoesToSpa(x))))", "all x.((Jess(x) & ((EnjoysShoppingInFreeTime(x) & -EnjoysShoppingInSpace(x)] | AtLeastOneWeek(x)))) -> Spa(x))", "all x.((Jess(x) & (EnjoysShoppingInFreeTime(x) | -EnjoysShoppingInFreeTime(x))) -> GoesToSpa(x))", "(All x y z.((Jess(x) & MaterialisticItem(y) & Spa(z)) -> (ShoppedInFreeTime(x,y) | (-ShoppedInFreeTime(x,z) & Spa(y)))))", "(all x.((Jess(x) & MaterialisticItems(x)) -> EnjoysInFreeTime(x)) | (-EnjoysShoppingLikely(x) & GoesToSpa(x))))", "all x y.((Jess(x) & (EnjoysShoppingInFreeTime(x,y) | (-LovesShopping(y,x))))) -> GoesToSpa(x))", "all x.((Jess(x) & (Enjoys(x) & MaterialisticItems(x)) | (-Enjoys(x) & Spa(x)))))", "all x y.((Jess(x) & SpendsFreeTime(x) & (Negatively(x) | -DeploysFreeTime(x))) -> AtLeastTime(x,y))", "all x.((Jess(x) & (EnjoysShoppingForMaterialisticItems(x) | (-EnjoysShoppingInFreeTime(x)))) -> (GoesToSpa(x) & (ExcelsOfSpa(x) | ExcelsOfWeek(x))))"]}
{"id": "folio_train_1650", "nl": "If Jess either enjoys shopping for materialistic items in his free time or, if he does not, then he goes to the spa at least once a week, then Jess neither values quality manufacturing and luxury items nor goes to the spa at least once a week.", "fol": "((EnjoysShopping(Jess) | (-EnjoysShopping(Jess) -> GoesToSpaWeekly(Jess))) -> (-ValuesLuxury(Jess) & -GoesToSpaWeekly(Jess)))", "prediction": ["all x.((Jess(x) & (EnjoysShopping(x) | -EnjoysShopping(x))) -> (Spa(x) & -ValuesQualityMaking(x) & -ValuesLuxuryItems(x)))", "all x.((Jess(x) & (EnjoysShopping(x) | (-EnjoysShoppingInFreeTime(x))) & AtLeastOnceAWeek(x))) -> (-ValuesQualityMadeGoods(x) & -ValuesLuxuryItems(x) & -AtLeastOnceAWeek(x))))", "all x.((Jesse(x) & (EnjoysShoppingForMaterialisticItems(x) | -EnjoysShopping(x))) -> ((DesiresQualityMaking(x) & -DesiresLuxuryItems(x)) | -DesiresSpaAtLeastOnceWeek(x))))", "((LeavesShoppingInFreeTime(Jess) | (-EnjoysShoppingInFreeTime(Jess) & (FindsMaterialistItems(jess) | FalseItems(jess))) & GoesToSpaAtLeastOnce(jess)) -> -ValuesQualityManufacturingAndLuxuryItems(jess) & -SoltyItems(jess'sSoltyItems(jess'sSoxiiasSpaSoxiiasSpaSoxiiasSpaSoxiiasSpaSoxiiasSpaSoxicsSpaSoxicSpaSoxiiasSpaSoxiiassosiassumsSpaSoxicSpaSoxicSpaSoxicSpaSoxicSpaSoxicSpaSoxionSharesSoxicSoxicSoxicSoSoxicSoSoxicSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSo", "all x.((Joss(x) & (EnjoysShopping(x,MaterialistItems) | DoesNotEnjoyShopping(x))) -> (-ValuesQualityManufacturing(x) & -ValuesLuxuryItems(x) & -HasSpaAtLeastAtLeastAtLeastAtLeastAtWeek(x)))", "all x.((Jesse(x) & (EnjoysShoppingForMaterialisticItems(x) | -EnjoysShoppingForMaterialisticItems(x))) -> (-ValuesQualityManufacturing(x) & -ValuesLuxuryItems(x) & -ValuesSpa(x))))", "all x.((Jess(x) & (EnjoysShopping(x) | -EnjoysShopping(x))) -> ((ValuesQualityMaking(x) & -ValuesLuxuryItems(x)) | -ValuesLuxuryItems(x)) | -ValuesLuxuryItems(x)) | -ValuesLuxuryItems(x))", "(all x.((Jezseen(x) & MaterialisticItemsInFreeTime(x)) | (-Jezseen(x) & Spa(x)))) -> (-ValuesQualityManufacturing(x) & -ValuesLuxuryItems(x) & -GoesToSpa(x))))", "all x.((Jess(x) & (EnjoysShoppingForMaterialisticItems(x) | -EnjoysShopping(x))) -> (SpaAtLeastOnceAWeek(x) & -ValuesQualityManufacturing(x) & -ValuesLuxuryItems(x)))", "all x y.((Jess(x) & Spa(y) & (EnjoysShoppingMaterialisticItems(x,x) | -EnjoysShoppingMaterialisticItems(x))) -> (-ValuesQualityFormation(x) & -ValuesLuxuryItems(y)))", "all x.((ReceivesMaterialisticItems(x) & (-EnjoysShopping(x) | -EnjoysShoppingInFreeTime(x))) -> (-ValuesQualityManufacturing(x) & -ValuesLuxuryItems(x)))", "all x.((Jess(x) & (EnjoysShoppingMaterialisticItemsInFreeTime(x) | (-EnjoysShoppingMaterialisticItems(x)))) -> (-ValuesQualityManufacturing(x) & -ValuesLuxuryItems(x)) & -ValuesSpa(x)))", "all x.((Jess(x) & (EnjoysShoppingMaterialisticItemsButFreeTime(x) | (-EnjoysShoppingMaterialisticItems(x)))) -> (-ValuesQualityManufacturing(x) & -ValuesLuxuryItems(x)) & -SpaAtLeastAtLeastAtLeastAtLocalItems(x)))", "((WeeklyWeeklyWeekly(Jess) & -EnjoysMaterialisticItemShopping(Jess)) | (-WeeklyWeeklyWeeklyWeekly(Jess) & ValuesQualityManufacturing(Jess) & -LuxuryItems(Jess))))", "all x y.((Jess(x) & FreeTime(y) & EnjoysShoppingMaterialisticItems(x,y)) | (-ExcusesShoppingMaterialisticItemsToXy(x) & SpaAtLeastOfWeek(x))))", "all x.((Jess(x) & EnjoysShopping(x) & (-EnjoysShopping(x) | -EnjoysShopping(x))) -> (-ValuesQualityManufacturing(x) & -ValuesLuxuryItems(x) & -ValuesSpa(x)))"]}
{"id": "folio_train_1651", "nl": "The indie pop band Phoenix has released 6 albums. ", "fol": "ReleasedAlbums(Phoenix,L6)", "prediction": ["all x y.((IndiePopBand(x) & Phoenix(y)) -> ReleasedAlbum(x,y))", "all x.((IndiePopBand(x) & Phoenix(y)) -> ReleasedSixAlbums(z))", "-HasReleased(IndiePopBand(Phoenix)", "all x.(IndiePopBand(x) -> PhoenixReleasedSixAlbums(x))", "A new album has been released by indiePopband:Pheonix(-)", "the indie-pop band Phoenix has released 6 albums(Pixel,9).", "The indiepopband Phoenix has released 6 albums.", "all x.(IndiePopBand(x) -> Phoenix released(x))", "(IndiePopBand(Phenomenon) & ReleasedSixAlbums(Phenomenon(Phenomenon))", "the indiepopband Phoenix has released 6 albums.", "all x.(IndiePopBand(x) -> ReleasedSixAlbums(x))", "(IndiePopBand(Phone) & ReleasedSixAlbums(Phone))", "(IndiePopBand(Pheonix) & ReleasedSixAlbums(Pheonix))", "all x.((IndiePopBand(x) & Phoenix(y)) -> ReleasedSixAlbums(x,y))", "all x.(IndiePopBand(x) -> ReleasedSixAlbums(x))", "all x.((IndiePopBand(x) & Phoenix(y)) -> ReleasedSixAlbums(x,y))"]}
{"id": "folio_train_1652", "nl": "Phoenix's album \"Wolfgang Amadeus Phoenix\" sold over 500,000 copies. ", "fol": "(IsAlbum(Wolfgangamadeusphoenix) & IsAlbumByBand(Wolfgangamadeusphoenix,Phoenix) & SoldCopiesOver(Wolfgangamadeusphoenix,L500000))", "prediction": ["(SoldOver500,000Copies(Pheonix) & Album(Pheonix))", "(SolvedOver(Pyramids(Pyramid) & WoolfgangAmadeus(Pyramid))", "\"Pheonix\" album \"WolfgangAmadeusPheonix\" sold over 500,000 copies.", "\"Phoenix'sLandscape(Phoenix,wolfgangAmadeusPhoenix)\" soldover500,000Copies(Phoenix)", "\"WolfgangAmadeusPheonix\" album sold more than 500,000 copies.", "(SellComics(Phone,500,000,0))", "All x y.((Pheonix(x) & Album(y) & WolfgangAmadeusPheonix(y)) -> SoldOver500,000Copies(x,y))", "\"WolfgangAmadeusPheonix\" sold(Pheonix,500 000)", "(WolfgangAmadeusPheonix(Pheonix) & Album(Pheonix) & SoldOver50000Copies(Pheonix))", "All x y.((SoldOver500,000Copies(x,y) & WolfgangAmadeusPhoenix(y)) -> Phoenix(x))", "(SoldOver100000(Phoenix&Organism(Phoenician) & \"WolfgangAmadeusPhoenician(Phoenician)) -> Album(Phoenician(ph))", "(SolvedOver(Phone,500,000) & WolfgangAmadeusPhone(Phenomenon))", "-SoldOver50000Copies(PepsiahsAlbum(Pepsia)", "Die Ver\u00f6ffentlichung von \"WolfgangAmadeusPhenomenon(Phenomenon)\" soldOver500,000Copies(Phenomenon)", "\"WolfgangAmadeusPhenomenon\" sold over 500,000 copies of the album.", "\"WolfgangAmadeusPhoenix\" album soldSumMoreThan(25000))"]}
{"id": "folio_train_1653", "nl": "A certified gold album or single is one which sold over half a million copies. ", "fol": "all x.(((IsAlbum(x) | IsSingle(x)) & SoldCopiesOver(x,L500000)) -> IsCertifiedGold(x))", "prediction": ["all x.((GoldAlbum(x) | Single(x)) -> SoldOverHalfMillionCopies(x))", "all x.((GoldAlbum(x) | -CertifiedGoldSingle(x)) -> SoldOverSixThirtyMillionCopies(x))", "all x.((CDMA(x) | Single(x)) -> SoldOverHalfMillionCopies(x))", "all x.((GoldAlbum(x) | CertifiedGoldSingle(x)) -> SoldOverHalfMillionCopies(x))", "all x.((GoldAlbum(x) | GoldSingle(x)) -> SoldOverHalfMillionCopies(x))", "all x.((GoldAlbum(x) | CertifiedGoldSingle(x)) -> SoldOverHalfMillionCopies(x))", "all x.((GoldAlbum(x) | CertifiedSingle(x)) -> SoldOverHalfMillionCopies(x))", "all x.((CertifiedGoldAlbum(x) | CertifiedGoldSingle(x)) -> SoldOverHundredMillionCopies(x))", "all x.((GoldAlbum(x) | CertifiedGoldSingle(x)) -> SoldOverHalfMillionCopies(x))", "all x.((CertifiedGoldAlbum(x) | CertifiedGoldSingle(x)) -> SoldOverAugMillionCopies(x))", "all x.((GoldAlbum(x) | GoldSingle(x)) -> SoldOverHalfMillionCopies(x))", "all x.((GoldAlbum(x) | Single(x)) -> SoldOverHalfMillionCopies(x))", "all x.((GoldAlbum(x) | CertifiedGoldSingle(x)) -> SoldOverFiveMillionCopies(x))", "all x.((GoldAlbum(x) | GoldSingle(x)) -> SoldAroundHalfMillionCopies(x))", "all x.(CertifiedGoldAlbumOrSingle(x) -> SoldOverTheHalfMillionCopies(x))", "all x.((Album(x) & CertifiedGold(x)) -> SoldOverHalfMillionCopies(x))"]}
{"id": "folio_train_1654", "nl": "\"1901\" is a single from Phoenix's album \"Wolfgang Amadeus Phoenix.\"", "fol": "(IsSingle(L1901) & IsFromAlbum(L1901,Wolfgangamadeusphoenix) & IsByBand(L1901,Phoenix))", "prediction": ["\"1901\" is the SingleFromPhenomenon'sAlbum(x))", "\"1901\" is a single from Phoenix's album \"WolfgangAmadeusPheonix\"\"", "\"1901\" is a single from \"Phoenix\" album \"WolfgangAmadeusPhoenix\"\"", "all x y.((SingleFrom(x,y) & Phoenix(y)) -> \"WolfgangAmadeusPhoenix(x)\")", "\"1901\" is a single from \"WolfgangAmadeusPhoenix\"\"", "\"1901\" is a single from the album \"WolfgangAmadeusPhelanx\"", "all x y z.((Single(x) & Album(y) & \"WolfgangAmadeusPhenomenon(z) & From(x,y,z)) -> \"1901\"\"", "\"1901\" is a single from Phoenix's album \"WolfgangAmadeusPhoenix\"\"", "\"1901\" is a SingleFromPhoenix(p) & Album(x,w))", "\"1901\" is a single from Phoenix's album \"WolfgangAmadeusPhoenix\"\"", "(Single(s) & From(s) & WolfgangAmadeus(s))", "\"1901\" is a single from Phoenix's album \"WolfgangAmadeusPhenomenon\"\"", "\"1901\" is a single from Phoenix's album \"WolfgangAmadeusPhenomenon\".", "\"1901\" is a single from Phoenix's album \"WolfgangAmadeusPheonix\"\"", "\"1901\" is a single from the album \"WolfgangAmadeusPhoenix\"\"", "\"1901\" is a Single From Phoenix's Album \"WolfgangAmadeusPhenomenon\"\""]}
{"id": "folio_train_1655", "nl": "Over 400,000 copies of \"1901\" have been sold. ", "fol": "SoldCopiesOver(L1901,L400000)", "prediction": ["[+400000Copies(x) & \"1901\"!", "Almost 400000 copies of \"1901\" sold.", "(SoldOver4000Copies(x,1901))", "\"1901\" (plus 400000CopiesSold(x))", "All x.(Of(x,000000) -> SoldWith(x,1901))", "all x.((Book(x) & MoreThan(x,1901)) -> Sold(x))", "(See MoreThan(1901)).", "all x.((Book(x) & \"1901\") -> Sold(x))", "Sold((Conception(ah) & Over400000Copies(ah))", "exists x.(CopiesOf(x,1901) & Sold(x))", "ABOUT 4000000ChipsSold(ABC(1901)", "\"1901\" - Sold(x,400,000)", "Over 400,000 copies of \"1901\" sold.", "(Over40000 copies of \"1901\" sold))", "(SoldOver40.000Copies(N01001) & \"1901\" & 267,800 & 386,900))", "\"1901\" (2000-08-10) -> Sold(x))"]}
{"id": "folio_train_1656", "nl": "The album \"Wolfgang Amadeus Phoenix\" is a certified gold album.", "fol": "IsCertifiedGold(Wolfgangamadeusphoenix)", "prediction": ["(GoldAlias)", "all x.((Album(x) & WolfgangAmadeusPhoenix(x)) -> CertifiedGoldAlbum(x))", "all x.((Album(x) & WolfgangAmadeusPheonix(x)) -> CertifiedGoldAlbum(x))", "all x.((Album(x) & WolfgangAmadeusPhoenix(x)) -> CertifiedGoldAlbum(x))", "All x.((Album(x) & WolfgangAmadeusPhoenix(x)) -> CertifiedGoldAlbum(x))", "\"WolfgangAmadeusPheonix\" Album CertifiedGold(x))", "(GoldAlm-certified(album) & WolfgangAmadeusPhoenix(album))", "all x y.((Album(x) & WolfgangAmadeusPheonix(x,y)) -> CertifiedGoldAlbum(x))", "all x.((Album(x) & WolfgangAmadeusPhoenix(x)) -> CertifiedGoldAlbum(x))", "\"WolfgangAmadeusPhoenix\" album (exists y.(GoldAlbum(y) & Certified(y)))", "all x.((Album(x) & WolfgangAmadeusPheonix(x)) -> CertifiedGoldAlbum(x))", "all x.((Album(x) & WolfgangAmadeusPhoenix(x)) -> CertifiedGoldAlbum(x))", "\"WolfgangAmadeusPheonix\" album & Gold(album)", "all x.((Album(x) & WalfgangAmadeusPheonix(x)) -> CertifiedGoldAlbum(x))", "all x.((Album(x) & WolfgangAmadeusPhoenix(x)) -> CertifiedGoldAlbum(x))", "all x.((Album(x) & WolfgangAmadeusPhenomenon(x)) -> CertifiedGoldAlbum(x))"]}
{"id": "folio_train_1657", "nl": "The single \"1901\" is a certified gold single.", "fol": "IsCertifiedGold(L1901)", "prediction": ["128.02 (Single(Single) & CertifiedGoldSingle(Single))", "all x.((Single(x) & LicensedGold(x)) -> 1901.", "all x.((Single(x) & Platinum(x)) -> PoweredByAgilet.", "all x.((Single(x) & \"1901\") -> GoldSingle(x))", "all x.((Single(x) & \"1901\") -> CertifiedGoldSingle(x))", "all x.((Single(x) & \"1901\") -> CertifiedGoldSingle(x))", "all x.((Single(x) & Named1901)) -> CertifiedGoldSingle(x))", "\"1901\" -> CertifiedGoldSingle(x))", "all x.((Single(x) & ReleasedOn(x,1901)) -> GoldSingle(x))", "(GoldSingle(Single) & Is(Single(Single))", "all x.((Single(x) & \"1901\")) -> CertifiedGoldSingle(x))", "(GoldSingle(single) & Encrypted(single) & Certified(single))", "all x y.((Single(x) & Single(y) & \"1901\" & Gold(y)) -> Certified(x,y))", "all x.((Single(x) & \"1901\" & GoldSingle(x)) -> Certified(x))", "all x.((Single(x) & -(1901)) | CertifiedGoldSingle(x)\")) -> Single(x))", "All x.((Single(x) & 1300(x)) -> CertifiedGoldSingle(x))"]}
{"id": "folio_train_1658", "nl": "Peter Parker is a either a superhero or a civilian.", "fol": "((IsSuperhero(Peter) & -IsCivilian(Peter)) | (-IsSuperhero(Peter) & IsCivilian(Peter)))", "prediction": ["all x.(Pitt Parker(x) -> (superhero(x) | Civilian(x)))", "all x.(Potter(x) -> (Superhero(x) | Civilian(x)))", "all x.(Potter(x) -> (Superhero(x) | Civilian(x)))", "all x.(Potter(x) -> (Superhero(x) | Civilian(x)))", "all x.(Pitterson(x) -> (Superhero(x) | Civilian(x)))", "all x.(PeterPotter(x) -> (Superhero(x) | Civilian(x)))", "all x.(Pittsburgh(x) -> (Superhero(x) | Civilian(x)))", "all x.(PeterPitterson(x) -> (Superhero(x) | Civilian(x)))", "all x.(PeterParker(x) -> (Superhero(x) | Civilian(x)))", "all x.(Potter(x) -> (Superhero(x) | Civilian(x)))", "all x y.((Captain(x) & Parker(y)) -> (Superhero(x) | Civilian(y)))", "all x.(Pittsburgh(x) -> (Superhero(x) | Civilian(x)))", "all x.(PeterP Parker(x) -> (Superhero(x) | Civilian(x)))", "all x.(PeterPotter(x) -> (Superhero(x) | Civilian(x)))", "all x.(PeterPotter(x) -> (Superhero(x) | Civilian(x)))", "all x.(Potter(x) -> (Superhero(x) | Civilian(x)))"]}
{"id": "folio_train_1659", "nl": "The Hulk is a destroyer.", "fol": "IsDestroyer(Hulk)", "prediction": ["all x.(Hulk(x) -> Disposer(x))", "all x.(Hulk(x) -> Disrupter(x))", "Escargeant(Hulk)", "all x.(Hulk(x) -> Disposer(x))", "all x.(Hulk(x) -> Disrupter(x))", "All x.(Hulk(x) -> Dissolver(x))", "The Hulk is destroyer.", "all x.(Hulk(x) -> Disassembler(x))", "All x.(Hulk(x) -> Disrupter(x))", "all x.(Hulk(x) -> Disposer(x))", "All x.(Hulk(x) -> Disposer(x))", "The Hulk is a Disrupter(Hulk)", "all x.(Hulk(x) -> Disposer(x))", "Der Hulk (Hulk) is destroyer(Hulk))", "all x.(Hulk(x) -> Dismemberer(x))", "all x.(Hulk(x) -> Disruptor(x))"]}
{"id": "folio_train_1660", "nl": "The Hulk wakes up when he is angry.", "fol": "(IsAngry(Hulk) -> WakesUp(Hulk))", "prediction": ["all x.(Hugged(x) -> WakesUpWhenAngry(x))", "all x.((Hulk(x) & Aggravated(x)) -> WakesUp(x))", "All x.((Hulk(x) & Angereous(x)) -> WakesUp(x))", "all x.((Hulk(x) & Angerful(x)) -> WakesUp(x))", "all x.((Hulk(x) & Aggravated(x)) -> WakesUp(x))", "(all x.((Hulk(x) &Angry(x)) -> WakesUp(x)))", "DasHulk(h) irrstated(ha)", "All x.((Hulk(x) & Aggressive(x)) -> WakesUp(x))", "All x y.((Hulk(x) & Anxious(y)) -> WakesUp(x,y))", "(AngryCull(Hulk) & WakesUp(Hulk))", "all x.((Hulk(x) & Aggressive(x)) -> WakesUp(x))", "all x.((Hulk(x) & Anger(x)) -> WakesUp(x))", "All x.((Hulk(x) & Anger(x)) -> WakesUp(x))", "all x.((Hulk(x) & Anger(x)) -> WakesUp(x))", "All x y.((Hulk(x) & Anxious(y)) -> WakesUp(x,y))", "all x.((Hulk(x) & Anger(x)) -> WakesUp(x))"]}
{"id": "folio_train_1661", "nl": "If the Hulk wakes up, then he will break a bridge.", "fol": "(WakesUp(Hulk) -> BreaksBridge(Hulk))", "prediction": ["all x.((Hulk(x) & WakesUp(x)) -> BreakBridge(x))", "all x.(Hulk(x) -> WakesUp(x))", "all x.((Hulk(x) & WakesUp(x)) -> BreaksBridge(x))", "all x.((Hulk(x) & WakesUp(x)) -> BreaksBridge(x))", "all x.((Hulk(x) & WakesUp(x)) -> BreaksBridge(x))", "all x.((Hulk(x) & WakesUp(x)) -> BreaksBridge(x))", "all x y.((Hulk(x) & WakesUp(x)) -> BreakBridge(y))", "all x.((Hulk(x) & WakesUp(x)) -> BreakBridge(x))", "all x.((Hulk(x) & WakesUp(x)) -> BreaksBridge(x))", "all x.((Hulk(x) & WakesUp(x)) -> BreaksBridge(x))", "all x y.((Hulk(x) & WakesUp(x)) -> BreaksBridge(y))", "all x.((Hulk(x) & WakesUp(x)) -> BreakBridge(x))", "all x.((Hulk(x) & WakesUp(x)) -> BreakBridge(x))", "all x.(HealingUp(x) -> BreaksBridge(x))", "all x.((Hulk(x) & WakesUp(x)) -> BreaksBridge(x))", "all x.((Hulk(x) & WakesUp(x)) -> BreakBridge(x))"]}
{"id": "folio_train_1662", "nl": "Thor is a god.", "fol": "IsGod(Thor)", "prediction": ["all x.(Thor(x) -> God(x))", "(God(Thor))", "all x.(Tor(x) -> God(x))", "(God(Thor) & God(Thor))", "exists x.(Thor(x) & God(x))", "Thor.", "all x.(Tor(x) -> God(x))", "all x.(Tor(x) -> God(x))", "Thor is god.", "(God(Thor))", "all x.(Thor(x) -> God(x))", "all x.(Thor(x) -> God(x))", "all x.(Thor(x) -> God(x))", "\"God(Tor)\"", "all x.(Drogot(x) -> IsGod(x))", "all x.(Thor(x) -> God(x))"]}
{"id": "folio_train_1663", "nl": "Thor will break a bridge when he is happy.", "fol": "(IsHappy(Thor) -> BreaksBridge(Thor))", "prediction": ["all x.((Torn(x) & Happy(x)) -> BreaksBridge(x))", "all x.((Thor(x) & Happy(x)) -> BreaksBridge(x))", "all x.((Tor(x) & Happy(x)) -> BreaksBridge(x))", "all x.((Tho Thor(x) & Happy(x)) -> BreaksBridge(x))", "all x.((Thor(x) & Happy(x)) -> BreakBridge(x))", "all x.((Thor(x) & Happy(x)) -> CracksBridge(x))", "all x y.((Tor(x) & Bridge(y) & Happy(x,y)) -> Breaks(x,y))", "all x.((Thorium(x) & Happy(x)) -> BreakBridge(x))", "all x.((Thor(x) & Happy(x)) -> BreakBridge(x))", "all x y.((Thor(x) & Bridge(y) & Happy(x)) -> Breaks(x,y))", "all x.((Thor(x) & Happy(x)) -> BreakBridge(x))", "all x.((Thor(x) & Happy(x)) -> BreaksBridge(x))", "all x.((Thor(x) & Happy(x)) -> BreaksBridge(x))", "all x.((Thor(x) & Happy(x)) -> BreakBridge(x))", "all x y.((Throat(x) & Bridge(y) & Happy(x)) -> Breaks(x,y))", "all x.((Thor(x) & Happy(x)) -> CanBreakBridge(x))"]}
{"id": "folio_train_1664", "nl": "A god is not a destroyer and a destroyer is not a god.", "fol": "all x.(IsGod(x) <-> -IsDestroyer(x))", "prediction": ["all x y.((God(x) & Disruptor(y)) -> (-Destroyer(x) & -Destroyer(y)))", "all x y.((God(x) & Destroyer(y)) -> (-Destroyer(x) & -Destroyer(y)))", "(all x y.((God(x) & -Disruptor(x)) -> -Doctor(x)) & ((Disruptor(y) & -God(y)) -> -Disruptor(y)))", "(all x.(God(x) -> -Destruction(x)) & all y.(Destroyer(y) -> -Destruction(y)))", "all x.(God(x) -> (-Destroyer(x) & -Destroyer(x)))", "exists x.(God(x) & -Disruptor(x) & -Disruptor(x))", "all x y.((God(x) & Destroyer(y)) -> (-Destroyer(x) & -God(y)))", "all x y.((God(x) & Dissipator(y)) -> (-Destroyer(x) & -God(y)))", "all x y.((God(x) & Disruptor(y)) -> (-Destroyer(x) & -Destroyer(y)))", "all x.(God(x) -> (-Disrupter(x) & -Destroyer(x)))", "(all x.(Gad(x) -> -Destroyer(x)) & all y.((Destroyer(y) & -Destroyer(y)) -> -Destroyer(y)))", "all x y.((God(x) & Dissapper(y)) -> (-Disrupter(x) & -Disruptor(y)))", "(all x y.(God(x) -> -Destroyer(x)) & (Destroyer(y) -> -Destroyer(y)))", "all x.(God(x) -> (-Defeater(x) & -Defeater(x)))", "all x y.((God(x) & Destroyer(y)) -> (-Disrupter(x) & -Disrupter(y)))", "all x y.((God(x) & Disruptor(y)) -> (-Destroyer(x) | -Destroyer(y)))"]}
{"id": "folio_train_1665", "nl": "Peter Parker wears a uniform when he is a superhero.", "fol": "(IsSuperhero(Peter) -> WearsUniform(Peter))", "prediction": ["all x.((Superhero(x) & WearsUniform(x)) -> WearsUniform(x))", "all x.((PeterParker(x) & Superhero(x)) -> WearsUniform(x))", "all x.((PeterParker(x) & Superhero(x)) -> WearsUniform(x))", "all x.((PeterParker(x) & Superhero(x)) -> WearsUniform(x))", "all x.((Captain(x) & Superhero(x)) -> WearsUniform(x))", "all x.((Captain(x) & WearsUniform(x)) -> Superman(x))", "all x.((Superhero(x) & WearsUniform(x)) -> PeterParker(x))", "all x.((Captain(x) & Stars(x)) -> WornUniform(x))", "all x.((Captain(x) & WearsUniform(x)) -> Superhero(x))", "all x y.((Superhero(x) & PeterPotter(y)) -> WearsUniform(y,x))", "all x.((PeterPotter(x) & Superhero(x)) -> WearsUniform(x))", "all x.((Spocket(x) & Superhero(x)) -> WearsUniform(x))", "all x.((Superhero(x) & WearsUniform(x)) -> WearsUniform(x))", "all x.((Parker(x) & Superhero(x)) -> WearsUniform(x))", "all x.((Superhero(x) & WearsUniform(x)) -> WearsUniform(x))", "all x.((MoreOnTopic(x) & Superhero(x)) -> WornUniform(x))"]}
{"id": "folio_train_1666", "nl": "Peter Parker is not a civilian if and only if a destroyer is breaking a bridge.", "fol": "all x.(-IsCivilian(Peter) <-> (IsDestroyer(x) & BreaksBridge(x)))", "prediction": ["all x.((Destroyer(x) & BreakingBridge(x)) -> -Civil(x))", "all x y.((PeterPaterson(x) & Destroyer(y) & BreakingBridge(y)) -> -Civil(x))", "all x.((PeterPotter(x) & BreakingBridge(x)) -> -Civil(x))", "all x.((BridgeBroking(x) & -Civil(x)) -> -PeterPonty(x))", "all x.((PeterParker(x) & BreaksBridge(x)) -> -Civilized(x))", "all x.((PeterParker(x) & BreakingBridge(x)) -> -Civil(x))", "exists x.(Discipher(x) & BreaksBridge(x)) -> -Civil(x))", "all x.((Player(x) & -Civil(x)) -> BreakingBridge(x))", "all x.((PatrickParker(x) & -Civil(x)) & is BreakingBridge(x)) -> -Civil(x))", "all x y.((PeterParker(x) & Defeater(y) & Bridge(z) & Breaks(y,z)) -> -Civil(x))", "all x.((PeterPotter(x) & BreakingBridge(x)) -> -Civil(x))", "all x.((PeterPotter(x) & -Civilian(x)) -> BreakingBridge(x))", "all x.((PeterParker(x) & BreakingBridge(x)) -> -Civil(x))", "all x y.((PeterParker(x) & Dispatcher(y) & BreakingBridge(x)) -> -Civil(x))", "all x.((Captain(x) & Destroyer(x) & BreakingBridge(x)) -> -Civil(x))", "all x.((PeterPenny(x) & -Civil(x)) -> BreakingBridge(x))"]}
{"id": "folio_train_1667", "nl": "If Thor is happy, the Hulk is angry.", "fol": "(IsHappy(Thor) -> IsAngry(Hulk))", "prediction": ["all x.((Thor(x) & Happy(x)) -> Hateful(x))", "all x.((Thor(x) & Happy(x)) -> angry(x))", "all x.((Thor(x) & Happy(x)) -> Agreed(x))", "(Happy(Thor) & Angerous(Hulk))", "all x.((Thor(x) & Happy(x)) -> Angerous(x))", "all x.((Thor(x) & Happy(x)) -> Anxious(x))", "all x.((Tor(x) & Happy(x)) -> Afraid(x))", "all x.((Roth(x) & Happy(x)) -> Anxious(x))", "all x.((Hulk(x) & ThorHappy(x)) -> AngerFat(x))", "all x.((Tor(x) & Happy(x)) -> Angerous(x))", "((Thor(Thor) & Happy(Thor)) | Hull(Hull)))", "(Hungry(Tor) & Happy(Throat))", "all x.((Thor(x) & Happy(x)) -> Irresponsible(x))", "all x.((Throat(x) & Happy(x)) -> Wuthering(x))", "all x.((Hope(x) & Thor(x)) -> Anger(x))", "all x.((Throat(x) & Happy(x)) -> Ragnarok(x))"]}
{"id": "folio_train_1668", "nl": "If the Hulk does not wake up, then Thor is not happy.", "fol": "(-WakesUp(Hulk) -> -IsHappy(Thor))", "prediction": ["all x.((Hulk(x) & -WeakensUp(x)) -> Thor(x))", "all x.((Hulk(x) & -WakeUp(x)) -> Thor -Happy(x))", "all x.((Hulk(x) & -WakeUp(x)) -> ThornNotHappy(x))", "all x.((Hulk(x) & -WeakensUp(x)) -> ThorNotHappy(x))", "((Hulk(Hulk) & -WakeUp)) -> Thor -Happy(Hulk))", "(all x.((Hulk(x) & -WakeUp(x)) -> ThorNotHappy(x))", "All x.((Hulk(x) & -WakeUp(x)) -> Thor(x))", "all x.((Hulk(x) & -WakeUp(x)) -> -Happy(x))", "all x.((Hulk(x) & -WornUp(x)) -> Thor -Happy(x))", "all x.((Hulk(x) & -WakeUp(x)) -> ThorIsNotHappy(x))", "-((Hulk(x) & -WakeUp(x)) -> Thors(x))", "all x.((Hulk(x) & -WakeUp(x)) -> Thor----Living(x))", "All x.((Hulk(x) & -WakeUp(x)) -> Thor -Happy(x))", "all x.((Hulk(x) & -WeakenUp(x)) -> Thor(x))", "all x.((Hulk(x) & -WeakensUp(x)) -> Thor -Happy(x))", "all x.((Hulk(x) & -WakeUp(x)) -> -Happy(x))"]}
{"id": "folio_train_1669", "nl": "If Thor is happy, then Peter Parker wears a uniform.", "fol": "(IsHappy(Thor) -> WearsUniform(Peter))", "prediction": ["all x.((Thor(x) & Happy(x)) -> WearsUniform(x))", "all x.((Thor(x) & Happy(x)) -> WearsUniform(x))", "all x.((Thor(x) & Happy(x)) -> WearsUniform(x))", "all x.((Thor(x) & Happy(x)) -> WearsUniform(x))", "((Happiness(Roth) & PeterParker(Pittsburgh)) -> WearsUniform(Pittsburgh))", "all x.((Throat(x) & Happy(x)) -> PeterPierceWearsUniform(x))", "all x.((Thorough(x) & Happy(x)) -> WearsUniform(x))", "all x.((Thor(x) & Happy(x)) -> PeterPennyWearsUniform(x))", "all x.((Throat(x) & Happy(x)) -> PeterParkerWearsUniform(x))", "all x.((Thor(x) & Happy(x)) -> PeterPiercy(x))", "all x.((Torn(x) & Happy(x)) -> PeterPierceWearsUniform(x))", "all x.((Thor(x) & Happy(x)) -> WearsUniform(x))", "all x.((Tor(x) & Happy(x)) -> PeterParker(x))", "all x.((Thor(x) & Happy(x)) -> PeterPilotWearsUniform(x))", "all x.(LivingThor(x) -> WearsUniform(x))", "all x.((Throat(x) & Happy(x)) -> PeterPennyWearsUniform(x))"]}
{"id": "folio_train_1670", "nl": "If Thor is not happy, then no bridge will be broken.", "fol": "(-IsHappy(Thor) -> -exists x.BreaksBridge(x))", "prediction": ["all x.((To Thor(x) -Happy(x)) -> NoBridgeBroken(x))", "all x.((Thor(x) & -Happy(x)) -> -BridgeBroken(x))", "all x.((Throat(x) & -Happy(x)) -> -BridgeBreakened(x))", "All x.((Thor(x) & -Happy(x)) -> -BrokenBridge(x))", "all x.((Thor(x) & -Happy(x)) -> -BrokenBridge(x))", "all x.((Tours(x) & -Happy(x)) -> -BrokenBridge(x))", "all x.((Tor(x) & -Happy(x)) -> -BrokenBridge(x))", "(-Happy(Thor) & -BrokenBridge(Thor))", "all x.((Throat(x) & -Happy(x)) -> -BridgeBroken(x))", "all x.(Happiness(x) -> -BreadBroken(x))", "(-Happy(Thor) -> NoBridgeBreakthrough(Thor)))", "all x.((Throat(x) & -Happy(x)) -> -BridgeBroken(x))", "all x.((Sort(x) & -Happy(x)) -> -BridgeBroken(x))", "all x.((Throat(x) & -Happy(x)) -> -BridgeBroken(x))", "Thor is notHappy(thru) -> -BrokenBridge(x))", "All x.((Thor(x) & -Happy(x)) -> NoBridgeBroken(x))"]}
{"id": "folio_train_1671", "nl": "Diethylcarbamazine is a medication discovered in the year 1947.", "fol": "all x.(DiethylcarbamazineMedication(x) & IsMedication(x) & DiscoveredInYear(x,Year1947))", "prediction": ["all x y z.(Nature(x) & Medication(y) & Year(z) & Diethylcarbamazine(y)) -> DiscoveredIn(y,z))", "Dastylcarbamazine (Medication(x,y) & FoundedInTheYear(y,47))", "Diethylcarbamazine (Medication) & DiscoveredInYear(Year(w) & July(w))", "(MedicationDiscoveredInJuly(DiethylCarbamazine) & Year(DiethylCarbamazine,47))", "Diethylcarbamazine (Medication(x) & DiscoveredInYear(x,47))", "Diethylcarbamazine (Medication) LocatedInYear(y,Nick) & ArrivedIn(x,Enough(y))", "Diethylcarbamazine (MentalMedication(R&D) & DiscoveredInBird47.)", "Diethylcarbamazine (Medication) & DiscoveredInTheYear(x,47))", "Diethylcarbamazine(d) - DevelopedIn(d,47))", "(Medication(Diethylcarbamazine) & DiscoveredInYear(Diethylcarbamazine,year47))", "Diethylcarbamazine (Medication(d) & DiscoveredInYear(d,47))", "Diethylcarbamazine ((Medication(x) & DiscoveredIn474)))", "(Medication(diethylcarbamazine) & DiscoveredInTheYear(Diethylcarbamazine) & InYear(Diethylcarbamazine,lv))", "DiethylCarbamazine (Medication(d) & DiscoveredInYear(d) & Year(d) & -DiversifiedInYear(d))", "Diethylcarbamazine (Medication(x) & DiscoveredInTheYear(x,499)))", "(Dithylcarbamazine(d) & DiscoveredInTheYear(d) & Year(d) & ThenIn1947(d)))"]}
{"id": "folio_train_1672", "nl": "Diethylcarbamazine can be used to treat river blindness.", "fol": "all x y.((DiethylcarbamazineMedication(x) & RiverBlindnessCondition(y)) -> TreatsCondition(x,y))", "prediction": ["all x.(Di\u00e9thylcarbamazine(x) -> TreatsRiverBlindness(x))", "all x.((Diethylcarbamazine(x) & RiverBlindness(x)) -> Treats(x,y))", "denthylcarbamazine(Depthy1) is used to TreatRiverBlindness(Drug)", "all x.(Diethylcarbamazine(x) -> TreatsRiverBlindness(x))", "all x y.((DiethylCarbamazine(x) & RiverBlindness(y)) -> Treats(x,y))", "Diethylcarbamazine (Diethylcarbamazine) - TreatsRiverBlindness((Diethylcarbamazine))", "all x.(Diethylcarbamazine(x) -> TreatRiverBlindness(x))", "all x.(Diethylcarbamazine(x) -> TreatsRiverBlindness(x))", "all x.(Diethylcarbamazine(x) -> TreatsRiverBlindness(x))", "all x.(DitylCarbamazine(x) -> UsedToTreatRiverBlindness(x))", "all x.(Diethylcarbamazine(x) -> Treats(x,riverBlindness))", "all x.(Diethylcarbamazine(x) -> TreatsRiverBlindness(x))", "all x.(DiethylCarbamazine(x) -> TreatsRiverBlindness(x))", "all x.(Diethylcarbamazine(x) -> TreatsRiverBlindness(x))", "all x.(Diethylcarbamazine(x) -> TreatsRiverBlindness(x))", "all x y.((Diethylcarbamazine(x) & RiverBlindness(y)) -> Treats(x,y))"]}
{"id": "folio_train_1673", "nl": "The only preferred treatment for river blindness is ivermectin.", "fol": "all x y.((RiverBlindnessCondition(y) & IsPreferredTreatment(x,y)) -> IvermectinMedication(x))", "prediction": ["all x.(PrivateTreatment(x) -> (Ivermectin(x) & FallsInRiverBlindness(x)))", "all x.((PreferredTreatment(x) & RiverBlindness(x)) -> Ivermectin(x))", "all x.(PreferredTreatmentForRiverBlindness(x) -> Ivermectin(x))", "all x.((PreferredTreatment(x) & RiverBlindness(x)) -> Ivermectin(x))", "all x.(RiverBlindness(x) -> (Ivermectin(x) | Ivermectin(x)))", "all x.(PreferredTreatment(x) -> Ivermectin(x))", "all x.(PreferredTreatmentForRiverBlindness(x) -> Ivermectin(x))", "all x.((PreferredTreatment(x) & RiverBlindness(x)) -> Ivermectin(x))", "all x.(PreferredTreatmentForRiverBlindness(x) -> Ivermectin(x))", "all x.((RiverBlindness(x) & Ivermectin(x)) -> PreferredTreatment(x))", "all x.(PreferredTreatment(x) -> Ivermectin(x))", "all x.(PreferredTreatmentForRiverBlindness(x) -> Ivermectin(x))", "all x.((PreferredTreatmentForRiverBlindness(x) & Ivermectin(x)) -> PreferredTreatment(x))", "all x.(PreferredTreatmentForRiverBlindness(x) -> Ivermectin(x))", "all x y.((PreferredTreatmentForRiverBlindness(x) & Ivermectin(y)) -> PrecludedFor(x,y))", "(PreferredTreatmentForRiverBlindness(Ivermectin) & -FailedForRiverBlindness(i))"]}
{"id": "folio_train_1674", "nl": "Diethylcarbamazine is not ivermectin.", "fol": "all x.(DiethylcarbamazineMedication(x) -> -IvermectinMedication(x))", "prediction": ["-Ivermectin(derethylcarbamazine)", "(-Ivermectin(diethylcarbamazine));", "Diethylcarbamazine -Ivermectin(Di\u00e9shylcarbamazine)", "all x.(Diethylcarbamazine(x) -> -Ivermectin(x))", "all x.(Diethylcarbamazine(x) -> -Ivermectin(x))", "(-Ivermectin(Diethylcarbamazine))", "Diethylcarbamazine -Ivermectin(diethylcarbamazine)", "(-Ivermectin(diethylcarbamazine)", "(-Ivermectin(diethylcarbamazine))", "Diethylcarbamazine (also called BetaDrug(x))", "all x.(Diethylcarbamazine(x) -> -Ivermectin(x))", "Diethylcarbamazine(die) & -Ivermectin(i))", "nichtIvermectin(Diethylcarbamazine)", "Diethylcarbamazine(x) & -Ivermectin(x))", "(-Ivermectin(diethylcarbamazine) \"Function(Diethylcarbamazine))", "-Ivermectin(diethylcarbamazine)"]}
{"id": "folio_train_1675", "nl": "Diethylcarbamazine is not preferred for the treatment of river blindness.", "fol": "all x y.((DiethylcarbamazineMedication(x) & RiverBlindnessCondition(y)) -> -IsPreferredTreatment(x,y))", "prediction": ["(-PreferredForRiverBlindness(dimethylcarbamazine))", "all x.(Diethylcarbamazine(x) -> -PreferredForRiverBlindness(x))", "all x.((Diethylcarbamazine(x) & RiverBlindness(y)) -> -PreferredPreferredFor(x,y))", "all x.((Diethylcarbamazine(x) & RiverBlindness(x)) -> -PreferredFor(x,y))", "all x.((Diethylcarbamazine(x) & RiverBlindness(x)) -> -PreferredForSignificance(x))", "all x.((Diethylcarbamazine(x) & RiverBlindness(y)) -> -PreferredFor(x,y))", "all x.((Diethylcarbamazine(x) & RiverBlindness(x)) -> -PreferredFor(x,ray))", "-PrivateForRiverBlindness(DiethylCarbamazine)", "(PreferredForRiverBlindness(Diethylcarbamazine) -> -PreferredForRiverBlindness(Diethylcarbamazine))", "-PreferredForRiverBlindness(diethylcarbamazine)", "Diethylcarbamazine -(PreferredForRiverBlindness(x) & -PreferredForRiverBlindness(x)))", "diethylcarbamazine is not preferred for the treatment of riverblindness.", "all x.(RiverBlindness(x) -> -PreferredDiethylcarbamazine(x))", "all x.(Diethylcarbamazine(x) -> -PreferredForTreatmentOfRiverBlindness(x))", "Diethylcarbamazine -PreferredForRiverBlindness(x))", "diethylcarbamazine -PreferredForRiverBlindness(x))"]}
{"id": "folio_train_1676", "nl": "Diethylcarbamazine was often used to treat river blindness.", "fol": "exists x.(DiethylcarbamazineMedication(x) & all y.(RiverBlindnessCondition(y) -> OftenUsedToTreat(x,y)))", "prediction": ["diethylcarbamazine (Dethylcarbamazine) was oftenused to treat river blindness.", "(ReceivedFor(Diethylcarbamazine) & RiverBlindness(diethylcarbamazine))", "all x y.((Diethylcarbamazine(x) & RiverBlindness(y)) -> UsedToTreat(x,y))", "all x.(Diethylcarbamazine(x) -> UsedToTreatRiverBlindness(x))", "Diethylcarbamazine (DeethylCarbamazine) \u2013 TreatsRiverBlindness(e))", "Diethylcarbamazine (Dimethyl) was OriginallyUsedToTreatRiverBlindness(Dimethyl))", "(UsedToTreatRiverBlindness(Diethylcarbamazine)", "all x.(Diethylcarbamazine(x) -> Treatment(x,riverBlindness))", "Diethylcarbamazine was oftenused to treat river blindness.", "all x.(Diethylcarbamazine(x) -> UsedToTreatRiverBlindness(x))", "all x.(Diethylcarbamazine(x) -> TreatsRiverBlindness(x))", "all x y.((Diethylcarbamazine(x) & RiverBlindness(y)) -> UsedToTreat(x,y))", "Diesthylcarbamazine was used to TreatRiverBlindness(x) & TreatsRiverBlindness(x))", "all x.(Diethylcarbamazine(x) -> (TraceRiverBlindness(x) & OftenUsed(x)))", "(Lithylcarbamazine(Diethyl))", "all x.(Diethylcarbamazine(x) -> TreatsRiverBlindness(x))"]}
{"id": "folio_train_1677", "nl": "Diethylcarbamazine is used in the treatment of filariasis.", "fol": "all x.(DiethylcarbamazineMedication(x) -> exists y.(Filariasis(y) & TreatsCondition(x,y)))", "prediction": ["all x.(Diethylcarbamazine(x) -> UsedInTreatmentOfFilariasis(x))", "Diethylcarbamazine (Dermalogaline) - UsedInTreatmentOfFilariasis(Dermalogaline))", "all x.(Diethylcarbamazine(x) -> UsedToTreatFilariasis(x))", "Diethylcarbamazine is used in treatment of filariasis.", "All x.(Diethylcarbamazine(x) -> UsedInTreatmentOffilariasis(x))", "Diethylcarbamazine (Dimethylcarbamazine) - BehandlungOffilariasis(Dilariasis) & UsedInFilariasis(Dilariasis))", "all x.(Diethylcarbamazine(x) -> UsedInThratageOfFilariasis(x))", "all x y.((DiethylCarbamazine(x) & Filariasis(y)) -> UsedInTreatment(x,y))", "all x.(Diethylcarbamazine(x) -> UsedInTreatmentOfFilarusis(x))", "all x y.((Diethylcarbamazine(x) & Filariasis(y)) -> UsedInTreatment(x,y))", "all x y.((Diethylcarbamazine(x) & Filariasis(y)) -> UsedInTreatment(x,y))", "all x.(Diethylcarbamazine(x) -> UsedInTreatmentOfFilariasis(x))", "(FilariasisTreatment(Diethylcarbamazine))", "Diethylcarbamazine (DLB) ContainsAlcohol(d) & UsedInTreatmentOfFilariasis(d))", "all x.(Diethylcarbamazine(x) -> UsedInTreatmentOfFilariasis(x))", "Diethylcarbamazine is used in Treatment(DietaryFilariasis)"]}
{"id": "folio_train_1678", "nl": "All univariate analyses use a generalized linear model. ", "fol": "all x.(IsUnivariateAnalysis(x) -> UsesGLM(x))", "prediction": ["all x y.((UnivariateAnalysis(x) & GeneralizedLinearModel(y)) -> Uses(x,y))", "all x.(UnivariateAnalysis(x) -> UsesGazeredLinearModel(x))", "all x.((UnivariateAnalysis(x) & GeneralizedLinearModel(x)) -> Univariate(x))", "all x.(UnivariateAnalysis(x) -> UsesGeneralizedLinearModel(x))", "all x.(UnivariateAnalysis(x) -> UsesGeneralizedLinearModel(x))", "all x.(UnivariateAnalysis(x) -> UsesGeometricLiniformModel(x))", "(all x.(UnivariateAnalysis(x) -> UsesGeometricLincularModel(x)))", "all x.(UnivariateAnalysis(x) -> UsesGeneralizedLinearModel(x))", "all x.(UnivariateAnalysis(x) -> UsesGeometricLiniformModel(x))", "all x.(UnivariateAnalysis(x) -> UsesGeneralizedLinearModel(x))", "all x.(UnivariateAnalysis(x) -> UsesGeneralizedLinearModel(x))", "all x.(UnivariateAnalysis(x) -> UsesGeneralizedLinearModel(x))", "all x.(UnivariateAnalysis(x) -> UsesGeneralizedLinearModel(x))", "all x.(UnivariateAnalysis(x) -> UsesGeneralizedLinearModel(x))", "all x.(UnivariateAnalysis(x) -> UsesGeneralizedLinearModel(x))", "all x.(UnivariateAnalysis(x) -> UsesGeographicalLinearModel(x))"]}
{"id": "folio_train_1679", "nl": "All multivoxel (pattern) analyses are implementing machine learning algorithms.", "fol": "all x.(IsMultivoxelPatternAnalysis(x) -> ImplementsMachineLearningAlgorithms(x))", "prediction": ["all x.(Multivoxel(x) -> (PatternAnalysis(x) & ImplementsMachineLearningAlgorithms(x)))", "all x.(Multivoxel(x) -> ImplementsMachineLearningAlgorithms(x))", "all x.(Multivoxel(x) -> ImplementingMachineLearningAlgorithms(x))", "all x.(Multivoxel(x) -> ImplementsMachineLearningAlgorithms(x))", "all x.(Multivoxel(x) -> ImplementsMachineLearningAlgorithms(x))", "all x.(Multivoxel(x) -> MachineLearningAlgorithm(x))", "all x.((Multivoxel(x) & Pattern(x)) -> ImplementsMachineLearningAlgorithms(x))", "all x.(Multivoxel(x) -> (ImplementsMachineLearningAlgorithms(x)))", "all x.(Multivoxel(x) -> ImplementsMachineLearningAlgorithms(x))", "all x.(Multivoxel(x) -> (MachineLearningAlgorithm(x) | MachineLearningAlgorithm(x)))", "all x.(Multivoxel(x)(pattern(x)) -> ImplementsMachineLearningAlgorithms(x))", "all x.(Multivoxel(x) -> ImplementingMachineLearningAlgorithms(x))", "all x.(Multivoxel(x) -> (IntegratedMachineLearningAlgorithms(x) & Pattern(x)))", "all x.(Multivoxel(x) -> ImplementsMachineLearningAlgorithms(x))", "all x.(Multivoxel(x) & Pattern(y)) -> ImplementsMachineLearningAlgorithms(x,y))", "all x.(Multivoxel(x) -> (InstitutesMachineLearningAlgorithms(x) & MatrixLearningAlgorithms(x)))"]}
{"id": "folio_train_1680", "nl": "All implementing machine learning algorithms are to learn and classify multivariate data.", "fol": "all x.(ImplementsMachineLearningAlgorithms(x) -> LearnsAndClassifiesMultivariateData(x))", "prediction": ["all x.((MachineLearningAlgorithm(x) & LearningMultivariateData(x) & ClassifyingMultivariateData(x)) -> Implementing(x))", "all x.((MethodLearningAlgorithm(x) & DesignedForMultivariateData(x)) -> LearnsAndClassifiesMultivariateData(x))", "all x.((ImplementingMachineLearningAlgorithms(x)) -> (LearnMultivariateData(x) & ClassifyMultivariateData(x)))", "all x.((MethodLearningAlgorithm(x) & Implements(x)) -> (LearnMultivariateData(x) & ClassifyMultivariateData(x)))", "all x.(MachineLearningAlgorithm(x) -> (ToLearnMultivariateData(x) & ClassifyMultivariateData(x)))", "all x.((EmbeddingMachineLearningAlgorithms(x) & MultivariateData(x)) -> LearnAndClassifyData(x))", "all x.((MachineLearningAlgorithm(x) & Implementing(x)) -> (LearnMultivariateData(x) & ClassifyMultivariateData(x)))", "all x.((Algorithm(x) & ImplementingMachineLearning(x)) -> (LearnMultivariateData(x) & ClassifyMultivariateData(x)))", "all x.((MachineLearningAlgorithm(x) & LearnsMultivariateData(x)) -> ClassifyMultivariateData(x))", "all x.((MachineLearningAlgorithm(x) & LearningMultivariateData(x) & ClassifyingMultivariateData(x)) -> Implements(x))", "all x.((MachineLearningAlgorithm(x) & Installs(x)) -> (LearnsMultivariateData(x) & ClassifiesMultivariateData(x)))", "all x.((MachineLearningAlgorithm(x) & LearnsMultivariateData(x) & ClassifiesMultivariateData(x)) -> Implements(x))", "all x.((MachineLearningAlgorithm(x) & Implements(x,multivariateData)) -> LearnsAndClassifies(x,multivariateData))", "all x.((Algorithm(x) & ImplementsMachineLearning(x)) -> (LearnMultivariateData(x) & ClassifyMultivariateData(x)))", "all x.((MaintainingMachineLearningAlgorithms(x) & LearnMultivariateData(x) & ClassifyMultivariateData(x)) -> ClassifyMultivariateData(x))", "all x.((MonitoringAlgorithm(x) & LearnMultivariateData(x) & ClassifyMultivariateData(x)) -> Implements(x))"]}
{"id": "folio_train_1681", "nl": "The Latent Dirichlet allocation model uses a generalized linear model or a univariate analysis. ", "fol": "(UsesGLM(LatentDirichletAllocationModel) | IsUnivariateAnalysis(LatentDirichletAllocationModel))", "prediction": ["all x.(LatentDrichletAllocationModel(x) -> (GeometricLiniformModel(x) | UnivariateAnalysis(x)))", "all x.(LatentDirichletAllocationModel(x) -> (GeometricLintaryModel(x) | UnivariateAnalysis(x)))", "all x.(LatentDirichletAllocationModel(x) -> (DigitizedLinearModel(x) | UnivariateAnalysis(x)))", "all x.((AllocationModel(x) & LatentDrichlet(x)) -> (GeometricLinearModel(x) | UnivariateAnalysis(x)))", "all x.(LatentDirichletAllocationModel(x) -> (GeneralizedLinearModel(x) | UnivariateAnalysis(x)))", "all x.(LatentDichletAllocationModel(x) -> (GallizedLinearModel(x) | UnivariateAnalysis(x)))", "all x y.((LatentDirichletAllocationModel(x) & LinearModel(y)) -> (Uses(x,y) | Uses(x,Y)))", "all x.(LatentDrichletAllocationModel(x) -> (GallenizedLinearModel(x) | UnivariateAnalysis(x)))", "all x.(LatentDirenchletAllocationModel(x) -> (GeographicalLarvedModel(x) | UnivariateAnalysis(x)))", "all x.((LatentDirichletAllocationModel(x) & (GovernmentizedLinearModel(x) | UnivariateAnalysis(x))) -> AllocationModel(x))", "all x.((LateIndichletAllocationModel(x) & (GeneralizedLinearModel(x) | UnivariateAnalysis(x))) -> AllocationModel(x))", "all x.(LatentDerichletAllocationModel(x) -> (GeometricLinionaryModel(x) | UnivariateAnalysis(x)))", "all x y.((LatentDirichletAllocationModel(x) & GeneralizedLinearModel(x) | UnivariateAnalysis(x))) -> AllocationModel(y))", "all x.((LateDirectionModel(x) & (GeneralizedLinearModel(x) | UnivariateAnalysis(x))) -> AllocationOfLateDirection(x))", "all x.(LatentDirichletAllocationModel(x) -> (UsesGeometricalModel(x) | UsesUnivariateAnalysis(x)))", "all x.(LatentDirichletAllocationModel(x) -> ((GeneralizedLinearModel(x) | UnivariateAnalysis(x))))"]}
{"id": "folio_train_1682", "nl": "If the Latent Dirichlet allocation model does not learn and classify multivariate data, then the Latent Dirichlet allocation model uses a generalized linear model and a multivoxel (pattern) analysis.", "fol": "(-LearnsAndClassifiesMultivariateData(LatentDirichletAllocationModel) -> (UsesGLM(LatentDirichletAllocationModel) & IsMultivoxelPatternAnalysis(LatentDirichletAllocationModel)))", "prediction": ["all x y.((LatentDireichletAllocationModel(x) & LearningData(x,y) & ClassifyingMultivariateData(y)) -> UsesGeneralizedLinarModel(x) & UsesMultivoxelPatterAnalysis(x))", "all x.((AllocationModel(x) & LatentDireichlet(x) & -LearnsMultivariateData(x) & ClassifiesMultivariateData(x)) -> (GreggeredLinearModel(x) & MultivoxelBanquet(x)))", "all x y z.((LatentDichletAllocationModel(x) & GeneralizedLinearModel(y) & Multivoxel(z) & -LernendMultivariateDataOrMaterials(y) & ClassifyMultivariateData(z)) -> AllocationModel(x,y,z))", "all x.((LatentDirichletAllocationModel(x) & -LearnMultivariateData(x) & ClassifyMultivariateData(x)) -> (UsesGeneralizedLinearModel(x) & UsesMultiflexel(x)))", "all x.((LateTreeth(x) & UnlearnAndClassifyMultivariateData(x)) -> (AllocationModel(x) & GeneralizedLinearModel(x) & Multivoxel(x)))", "all x.((LatentDrichletAllocationModel(x) & -LearnsMultivariateData(x) & ClassifiesMultivariateData(x)) -> (LatentDrichletAllocationModel(x) & GeneralizedLinearModel(x) & MultivoxelAnalysis(x)))", "all x.((LatentDirecyletAllocationModel(x) & -LearningMultivariateData(x) & ClassifiesMultivariateData(x)) -> (UsesGarualizedLinearModel(x) & UsesMultivoxel(x)))", "all x.((AllocationModel(x) & LatentDichlet(x)) -> (-LernenMultivariateData(x) & ClassifyMultivariateData(x)) & UsesGeneralizedLinearModel(x) & UsesMultivoxel(x)))", "all x.((AllocationModel(x) & LatentDirechlet(x) & LearnsMultivariateData(x) & ClassifiesMultivariateData(x)) -> (LatentDirechletAllocationModel(x) & GeneralizedLinearModel(x) & Multivoxel(x)))", "all x.((LatentDirichletAllocationModel(x) & -LearnsMultivariateData(x) & ClassifiesMultivariateData(x)) -> (LanguageModel(x) & MultivoxelPatternAnalysis(x)))", "all x.((LatentDirectionModel(x) & -LearningMultivariateData(x) & ClassifyingMultivariateData(x)) -> (GeneralizedLinearModel(x) & MultivoxelAnalysis(x)))", "all x.((LatentDirichletAllocationModel(x) & -LearnsMultivariateData(x) & ClassifiesMultivariateData(x)) -> (GeographicalLinearModel(x) & Multivoxel(x)))", "all x.((E-LearningMultivariateData(x) & -ClassifyingMultivariateData(x)) -> LatentDichletAllocationModel(x))", "all x.((LatentDichletAllocationModel(x) & -LearnsMultivariateData(x)) -> (GeneralizedLinearModel(x) & Multivoxel(x)))", "all x.((LateLatentDixhletAllocationModel(x) & -ChatMultivariateData(x)) -> (GeneralizedLinearModel(x) & MultivoxelPatrickAnalysis(x)))", "all x.((LatetentDirichletAllocationModel(x) & -LearnsMultivariateData(x) & ClassifiesMultivariateData(x)) -> (GeneralizedLinearModel(x) & MultivoxelPatter(x)))"]}
{"id": "folio_train_1683", "nl": "Latent Dirichlet allocation model is implementing machine learning algorithms.", "fol": "ImplementsMachineLearningAlgorithms(LatentDirichletAllocationModel)", "prediction": ["all x.(LatentDirectividletAllocationModel(x) -> ImplementsMachineLearningAlgorithms(x))", "all x.((LatentDirichletAllocationModel(x) & MachineLearningAlgorithms(x)) -> Implements(x))", "all x.(LatentDichletAllocationModel(x) -> ImplementsMachineLearningAlgorithms(x))", "all x.((LatentDirecciletAllocationModel(x) & MachineLearningAlgorithms(x)) -> Implements(x))", "all x.((LatentDirectAllocationModel(x) & ImplementsMachineLearningAlgorithms(x)) -> Implements(x,DeditchletAllocationModel))", "all x.(LatentDerichletAllocationModel(x) -> ImplementsMachineLearningAlgorithms(x))", "all x.(LatentDirichletAllocationModel(x) -> ImplementsMachineLearningAlgorithms(x))", "all x.((LatentDrichlet(x) & AllocationModel(x)) -> ImplementsMachineLearningAlgorithms(x))", "-> LatentDirichletAllocationModel(x))", "all x.(LatentDirichletAllocationModel(x) -> ImplementsMachineLearningAlgorithms(x))", "all x.(LatentDichletAllocationModel(x) -> ImplementsMachineLearningAlgorithms(x))", "all x.(LatentDichletAllocationModel(x) -> ImplementsMachineLearningAlgorithms(x))", "all x.((LatentDirichletAllocationModel(x) & ImplementsMachineLearningAlgorithms(x)) -> AllocationModel(x))", "all x.(LatentDirichletAllocationModel(x) -> ImplementsMethod-learningAlgorithms(x))", "all x.(LatentDrichletAllocationModel(x) -> ImplementsMachineLearningAlgorithms(x))", "all x.((LatentDirichletAllocationModel(x) & ImplementsMachineLearningAlgorithms(x)) -> DoesAlgorithms(x))"]}
{"id": "folio_train_1684", "nl": "Latent Dirichlet allocation model uses a generalized linear model and learns and classifies multivariate data.", "fol": "(UsesGLM(LatentDirichletAllocationModel) & LearnsAndClassifiesMultivariateData(LatentDirichletAllocationModel))", "prediction": ["all x.(LatentDirechletAllocationModel(x) -> (GeneralizedLinearModel(x) & LearnsAndClassifiesMultivariateData(x)))", "all x.(LatentDirigletAllocationModel(x) -> (GeneralizedLinearModel(x) & LearnsMultivariateData(x) & ClassifiesMultivariateData(x)))", "all x.((LatentDirechletAllocationModel(x) & GeneralizedLinearModel(x) & LearnsAndClassifiesMultivariateData(x)) -> Allocation(x))", "all x y.((LatentDirichletAllocationModel(x) & GeneralizedLinearModel(y)) -> (LearnsMultivariateData(x,y) & ClassifiesMultivariateData(x,y)))", "all x.(LatentDichletAllocationModel(x) -> (G\u00e9n\u00e9ralizedLinearModel(x) & LearnsMultivariateData(x) & ClassesMultivariateData(x)))", "all x.(LatentDrichletAllocationModel(x) -> (UsesGeneralizedLinearModel(x) & LearnsAndClassifiesMultivariateData(x)))", "all x.(LatentDirichletAllocationModel(x) -> (GeneralizedLinearModel(x) & LearnsMacrovariateData(x) & ClassifiesMultivariateData(x)))", "all x.(LatentDichletAllocationModel(x) -> (UsesGLN(x) & LearnsAndClassifiesMultivariateData(x)))", "all x.(LatentDirichletAllocationModel(x) -> (GeneralizedLinearModel(x) & LearnsMultivariateData(x) & ClassifiesMultivariateData(x)))", "all x.(LatentDerichletAllocationModel(x) -> (GeneralizedLinearModel(x) & LearnsMultivariateData(x) & ClassifiesMultivariateData(x)))", "all x.(LatentDrichletAllocationModel(x) -> (GeneralizedLinearModel(x) & LearnsMultivariateData(x) & ClassifiesMultivariateData(x)))", "all x.(LatentDirichletAllocationModel(x) -> (GeneralizedLinearModel(x) & LearnsMultivariateData(x) & ClassifiesMultivariateData(x)))", "all x.((LatentDirechletAllocationModel(x) & GeneralizedLinearModel(x)) -> (LikesMultivariateData(x) & ClassifiesMultivariateData(x)))", "all x y.((LatentDirichletAllocationModel(x) & GeneralizedLinear(y)) -> (LearnsMultivariateData(x) & ClassifiesMultivariateData(x)))", "all x.((LatentDrigitletAllocationModel(x) & GeneralizedLinearModel(x) & LearnsMultivariateData(x) & ClassifiesMultivariateData(x)) -> AllocationModel(x))", "all x.(LatentDirichletAllocationModel(x) -> (UsesGeneralizedLinearModel(x) & LearnsMultivariateData(x) & ClassifiesMultivariateData(x)))"]}
{"id": "folio_train_1685", "nl": "Latent Dirichlet allocation model either uses a generalized linear model or learns and classifies multivariate data.", "fol": "(UsesGLM(LatentDirichletAllocationModel) | LearnsAndClassifiesMultivariateData(LatentDirichletAllocationModel))", "prediction": ["all x.((LatentDirigletAllocationModel(x) & (UsesGeneralizedLinearModel(x) | Learns(x) & ClassifiesMultivariateData(x))) -> AllocatingModel(x))", "all x.(LatentDirectiveModel(x) -> ((UsesGeneralizedLinearModel(x) | LearnsMultivariateData(x)) & ClassifiesMultivariateData(x)))", "all x.(LatentDichletAllocationModel(x) -> (UsesGeneralizedLinearModel(x) | LearnsReclassifiesMultivariateData(x)))", "all x.((LatentDirichletAllocationModel(x) & (UsesGeneralizedLinearModel(x) | LearnsMultivariateData(x))) -> AllocationModel(x))", "all x.((LatentDirichletAllocationModel(x) & (GeneralizedLinearModel(x) | LearnsAndClassifiesMultivariateData(x))) -> LatentDirichletAllocationModel(x))", "all x y.((LatentDirichletAllocationModel(x) & GeneralizedLinearModel(y)) | LearnsAndClassifiesMultivariateData(x,y))", "all x.(LatentDireckletAllocationModel(x) -> ((UsesGargetizedLinearModel(x) | LearnsMultivariateData(x)) & ClassifiesMultivariateData(x)))", "all x.(LatentDroughtletAllocationModel(x) -> (UsesGeneralizedLinearModel(x) | LearnsMultivariateData(x) & ClassifiesData(x)))", "all x.(LattentDirectallallocationModel(x) -> (UsesGeneralizedLinearModel(x) | LearnsMultivariateData(x) & ClassifiesMultivariateData(x)))", "all x.(LatentDeichletAllocationModel(x) -> (UsesGeometricalModel(x) | LearnsMultivariateData(x)))", "all x.(LatentModel(x) -> (GeomorphizedLinearModel(x) | LearnsAndClassifiesMultivariateData(x)))", "all x.(LatentIrrigatAllocationModel(x) -> (UsesGeneralizedLinearModel(x) | LearnsOrClassifiesMultivariateData(x)))", "all x.(LatentDirichletAllocationModel(x) -> (UsesGlobalizedLinearModel(x) | LearnsMultivariateData(x)))", "all x.(LatentDirichletAllocationModel(x) -> (UsesAllocationModel(x) | LearnsAndClassifiesMultivariateData(x)))", "all x y.((LatentDirichletAllocationModel(x) & UsesGallizedLinearModel(x)) | LearnsAndClassifiesMultivariateData(x))", "all x.(LatentDrichletAllocationModel(x) -> (UsesLinearModel(x) | LearnsMultivariateData(x)))"]}
{"id": "folio_train_1686", "nl": "If something requires a medical diagnosis, then lab tests or imaging is required. ", "fol": "all x.(RequiresMedicalDiagnosis(x) -> RequiresLabTestsOrImaging(x))", "prediction": ["all x.((HealthyDiagnosis(x) & RequiresLabTests(x)) | RequiresImagery(x))", "all x.((RequiresMedicalDiagnosis(x) & (LabTests(x) | Imaging(x))) -> RequiresMedicalDiagnosis(x))", "all x.(RequiresMedicalDiagnosis(x) -> (LabTests(x) | Imaging(x)))", "all x.(RequiresMedicalDiagnosis(x) -> (LabTests(x) | Imaging(x)))", "all x.(RequiresMedicalDiagnosis(x) -> (LabTests(x) | Imaging(x)))", "all x.((RequiresMedicalDiagnosis(x)) -> (LabTests(x) | Imaging(x)))", "all x.((MedicalDiagnosis(x) & RequiresLabTests(x)) | RequiresImaging(x))", "all x.((MedicalDiagnosis(x) & RequiresLabTests(x) & RequiresImaging(x)) -> RequiresAbnormalDocumentation(x))", "all x.(RequiresMedicalDiagnosis(x) -> (LabTests(x) | Imaging(x)))", "all x.(RequiresMedicalDiagnosis(x) -> (LabTests(x) | Imaging(x)))", "all x.(RequiresMedicalDisdiagnosis(x) -> (LabTests(x) | Imaging(x)))", "all x y.((MedicalDiagnosis(x) & Requires(x,y)) -> ((LabTests(y) | Imaging(y))))", "all x.(MedicalDiagnosis(x) -> (LabTests(x) | Imaging(x)))", "all x.(MedicalDiagnosis(x) -> (RequiresLabTests(x) | RequiresImaging(x)))", "all x.((RequiresMedicalDiagnosis(x) & (LabTests(x) | Imaging(x))) -> Requires(x))", "all x.(RequiresMedicalDiagnosis(x) -> (LabTests(x) | Imaging(x)))"]}
{"id": "folio_train_1687", "nl": "All rare diseases require a medical diagnosis.", "fol": "all x.(IsRareDisease(x) -> RequiresMedicalDiagnosis(x))", "prediction": ["all x.(RareDisease(x) -> RequiresMedicalDiagnosis(x))", "all x.(RareDisease(x) -> RequiresMedicalDiagnosis(x))", "all x.(RareDisease(x) -> RequiresMedicalDiagnosis(x))", "all x.(RareDisease(x) -> RequiresMedicalDiagnosis(x))", "all x.(RareDisease(x) -> RequiresMedicalDiagnosis(x))", "all x.(RareDisease(x) -> RequiresMedicalDiagnosis(x))", "all x.(RareDisease(x) -> RequiresMedicalDiagnosis(x))", "all x.(RareDisease(x) -> RequiresMedicalDiagnosis(x))", "all x.(RareDisease(x) -> RequiresMedicalDiagnosis(x))", "all x.(RareDisease(x) -> RequiresMedicalDiagnosis(x))", "all x.(RareDisease(x) -> RequiresMedicalDiagnosis(x))", "all x.(RareDisease(x) -> RequiresMedicalDiagnosis(x))", "all x.(RareDisease(x) -> RequiresMedicalDiagnosis(x))", "all x.(RareDisease(x) -> RequiresMedicalDiagnosis(x))", "all x.(RareDisease(x) -> RequiresMedicalDiagnosis(x))", "all x.(RareDisease(x) -> RequiresMedicalDiagnosis(x))"]}
{"id": "folio_train_1688", "nl": "If something is mild, then no lab tests or imaging is required. ", "fol": "all x.(IsMild(x) -> -RequiresLabTestsOrImaging(x))", "prediction": ["all x.(Mild(x) -> (NoLabTests(x) & -(LabTestsRequired(x) | ImagingRequired(x))))", "all x.(Mild(x) -> NoLabTestsOrImageryRequired(x))", "all x.(Mild(x) -> (-LaborTests(x) | Imaging(x)))", "all x.(Mild(x) -> (-LabTests(x) | Imaging(x)))", "all x.((Smooth(x) & NoLabTests(x) & NoImaging(x)) -> -Cold(x))", "all x.(Mild(x) -> (-LaborTests(x) & -Imagery(x)))", "all x.((Mild(x) & NoLabTests(x) & NoImaging(x)) -> -Mild(x))", "all x.(Mild(x) -> (-LaborTests(x) | Imaging(x)))", "all x.((Medical(x) & -(LabTech(x) | Imaging(x))) -> -(Lab Test(x) | Imaging(x)))", "all x.(Mild(x) -> (NoLabTests(x) | NoImaging(x)))", "all x.((Mild(x)) -> (-LaborTests(x) | Imaging(x)))", "exists x.(Mild(x) -> NoLabTestsOrImages(x))", "all x.(Mild(x) -> (NoLabTogether(x) | NoImaging(x)))", "all x.((Mild(x) & -(LabTests(x) | Imaging(x))) -> -Laborattested(x))", "all x.(Mild(x) -> (NoLabTests(x) | UninstallingImages(x)))", "all x.((Mild(x) & -LabStudy(x) & -Imaging(x)) -> -Required(x))"]}
{"id": "folio_train_1689", "nl": "All blood cancers are rare diseases.", "fol": "all x.(IsBloodCancer(x) -> IsRareDisease(x))", "prediction": ["all x.(BloodCancer(x) -> RareDisease(x))", "all x.(BloodCancer(x) -> RareDisease(x))", "all x.(BloodCancer(x) -> RareDisease(x))", "all x.(BloodCancer(x) -> RareDisease(x))", "all x.(BloodCancer(x) -> RareDisease(x))", "all x.(BloodCancer(x) -> RareDisease(x))", "all x.(BloodCancer(x) -> RareDisease(x))", "all x.(BloodCancer(x) -> RareDisease(x))", "all x.(BloodCancer(x) -> RareDisease(x))", "all x.(BloodCancer(x) -> RareDisease(x))", "all x.(BloodCancer(x) -> RareDisease(x))", "all x.(BloodCancer(x) -> RareDisease(x))", "all x.(BloodCancer(x) -> RareDisease(x))", "all x.(BloodCancer(x) -> RareDisease(x))", "all x.(BloodCancer(x) -> RareDisease(x))", "all x.(BloodCancer(x) -> RareDisease(x))"]}
{"id": "folio_train_1690", "nl": "All Leukemia is blood cancer. ", "fol": "all x.(IsLeukemia(x) -> IsBloodCancer(x))", "prediction": ["all x.(Leukemia(x) -> BloodCancer(x))", "all x.(Leukemia(x) -> BloodCancer(x))", "all x.(Leukemia(x) -> BloodCancer(x))", "all x.(Leukemia(x) -> BloodCancer(x))", "all x.(Leukemia(x) -> BloodCancer(x))", "all x.(Leukemia(x) -> BloodCancer(x))", "all x.(Leukemia(x) -> BloodCancer(x))", "all x.(Leukemia(x) is(x) & BloodCancer(x))", "all x.(Leukemia(x) -> BloodCancer(x))", "all x.(Leukemia(x) -> BloodCancer(x))", "all x.(Leukemia(x) -> BloodCancerous(x))", "all x.(Leukemia(x) -> BloodCancer(x))", "all x.(Leukemia(x) -> BloodCancer(x))", "all x.(Leukemia(x) -> BloodCancerous(x))", "all x.(Leukemia(x) -> BloodCancel(x))", "all x.(Leukemia(x) -> BloodCancer(x))"]}
{"id": "folio_train_1691", "nl": "If bladder cancer is either both blood cancer and Leukemia or neither blood cancer nor Leukemia, then bladder cancer is Leukemia.", "fol": "(-((IsBloodCancer(BladderCancer) & -IsLeukemia(BladderCancer)) | (-IsBloodCancer(BladderCancer) & IsLeukemia(BladderCancer))) -> IsLeukemia(BladderCancer))", "prediction": ["all x.((BloodCancer(x) & ((BloodCancer(x) & Leukemia(x)) | (-BloodCancer(x) & Leukemia(x)))) -> Leukemia(x))", "all x.((B bladderCancer(x) & ((BloodCancer(x) & -Leukemia(x)) | -BloodCancer(x) & -Leukemia(x))) -> Leukemia(x))", "all x.((BurnholeCancer(x) & ((BloodCancerous(x) & Leukemia(x)) | (-BloodCancer(x) & Leukemia(x))))) -> Leukemia(x))", "all x.((B bladderCancer(x) & ((BloodCancel(x) | Leukemia(x)) & -BloodCancel(x)) | Leukemia(x))) -> Leukemia(x))", "all x y.((B bladderCancer(x) & (BloodCancer(z) | Leukemia(z))) -> Leukemia(x))", "all x.((BloodCancer(x) & ((BloodCancer(x) & Leukemia(x)) | -BloodCancer(x) & Leukemia(x))) -> Leukemia(x))", "all x.((BloodCancer(x) & (BloodCancer(x) | BloodCancer(x) | Leukemia(x))) -> Leukemia(x))", "all x.((BloodCancer(x) & ((BloodCancer(x) & Leukemia(x)) | -BloodCancer(x) & Leukemia(x))) -> Leukemia(x))", "all x.((BloodCancer(x) & (BloodCancer(x) | Leukemia(x) | -BloodCancer(x) | Leukemia(x))) -> Leukemia(x))", "all x.((BacterialCancer(x) & (BloodCancer(x) | Leukemia(x))) -> Leukemia(x))", "all x.(BabylonCancer(x) -> ((BloodCancer(x) & Leukemia(x)) | -Leukemia(x))))", "all x.((B bladderCancer(x) & (BloodCancer(x) | Leukemia(x)) | -BloodCancer(x) | Leukemia(x))) -> Leukemia(x))", "all x.((B bladderCancer(x) & ((BloodCancer(x) & Leukemia(x)) | (-BloodCancer(x) & Leukemia(x)))) -> Leukemia(x))", "all x.((B bladderCancer(x) & (BloodCancer(x) | Leukemia(x))) | (-BloodCancer(x) | Leukemia(x))))", "all x.((B bladderCancer(x) & ((BloodCancer(x) & Leukemia(x)) | -BloodCancer(x) & Leukemia(x))) -> Leukemia(x))", "all x.((B bladderCancer(x) & Leukemia(x)) | -(BloodCancerous(x) & Leukemia(x))))"]}
{"id": "folio_train_1692", "nl": "Bladder cancer is mild.", "fol": "IsMild(BladderCancer)", "prediction": ["all x.(BladderCancerous(x) -> Mild(x))", "all x.(BloodderCancer(x) -> Mild(x))", "all x.(BladderCancer(x) -> Mild(x))", "all x.(BladderCancer(x) -> Mild(x))", "all x.(BladderCancer(x) -> Mild(x))", "all x.(BlueteerCancer(x) -> Mild(x))", "all x.(BladderCancer(x) -> Mild(x))", "all x.(BladderCancerous(x) -> Mild(x))", "all x.(BladderCancerous(x) -> Mild(x))", "all x.(BladderCancer(x) -> Mild(x))", "All x.(BladderCancer(x) -> Mild(x))", "all x.(BloodderCancer(x) -> Mild(x))", "all x.(BladderCancer(x) -> Mild(x))", "all x.(BladderCancer(x) -> Mild(x))", "all x.(BladderCancer(x) -> Mild(x))", "all x y.((BladderCancer(x) & Ignition(y)) -> Mild(x,y))"]}
{"id": "folio_train_1693", "nl": "Bladder cancer is Leukemia.", "fol": "IsLeukemia(BladderCancer)", "prediction": ["Leukemia.", "all x.(BladderCancer(x) -> Leukemia(x))", "all x.(BladderCancer(x) -> Leukemia(x))", "all x.(BladderCancer(x) -> Leukemia(x))", "Leukemia (bladdercancer)", "Leukemia(bladdercancer)", "Leukemia (bladder cancer)", "All x.(BladderCancer(x) -> Leukemia(x))", "all x.(BladderCancer(x) -> Leukemia(x))", "all x.(BladeCancer(x) -> Leukemia(x))", "all x.(BladderCancer(x) -> Leukemia(x))", "AmountOfBladderCancer(Alzheimer),Leukemia(Alzheimer)", "all x.(BladderCancer(x) -> Leukemia(x))", "all x.(BladeCancel(x) -> Leukemia(x))", "all x.(BloodderCancerous(x) -> Leukemia(x))", "all x.(BladderCancer(x) -> Leukemia(x))"]}
{"id": "folio_train_1694", "nl": "Bladder cancer is either a rare disease or mild.", "fol": "(IsRareDisease(BladderCancer) | IsMild(BladderCancer))", "prediction": ["all x.(BloodderCancer(x) -> (RareDisease(x) | MildDisease(x)))", "all x.(BloodderCancer(x) -> (RareDisease(x) | MildDisease(x)))", "all x.(BlaseCancer(x) -> (RareDisease(x) | Mild(x)))", "all x.(BladderCancerous(x) -> (Rare(x) | Mild(x)))", "all x.(BloodderCancer(x) -> (RareDisease(x) | MildDisease(x)))", "all x.(BladeCancerous(x) -> (RareDisease(x) | MildDisease(x)))", "all x.(BloodderCancer(x) -> (RareDisease(x) | MildDisease(x)))", "all x.(BladderCancer(x) -> (Rare(x) | Mild(x)))", "all x.(BloodderCancer(x) -> (RareDisease(x) | Mild(x)))", "all x.(BladderCancer(x) -> (Rare(x) | Mild(x)))", "all x.(BladderCancer(x) -> (RareDisease(x) | MildDisease(x)))", "all x.(BladderCancer(x) -> (Rare(x) | Mild(x)))", "all x.(BladeCancer(x) -> (RareDisease(x) | Mild(x)))", "all x.(BladderCancer(x) -> (Rare(x) | Mild(x)))", "all x.(BloodderCancer(x) -> (RareDisease(x) | MildDisease(x)))", "all x.(BladderCancer(x) -> (Rare(x) | Mild(x)))"]}
{"id": "folio_train_1695", "nl": "No precious metals aren't scarce.", "fol": "all x.(IsPreciousMetal(x) -> -IsScarce(x))", "prediction": ["-exists x.(PreciousMetal(x) & Rare(x))", "-exists x.(PreciousMetal(x) & Rare(x))", "-exists x.(PreciousMetal(x) & -Sharp(x))", "-exists x.(PreciousMetal(x) & -Sharp(x))", "-exists x.(PreciousMetal(x) & -Scarce(x))", "-exists x.(PreciousMetal(x) & -Sharp(x))", "-exists x.(PreciousMetal(x) & -Firm(x))", "all x.(PreciousMetal(x) -> -Scarce(x))", "-all x.(PreciousMetal(x) -> Rare(x))", "all x.(PrimaryMetal(x) -> -Sharp(x))", "-exists x.(PreciousMetal(x) & -Scarce(x))", "all x.(PreciousMetal(x) -> & -Difficult(x))", "all x.(PreciousMetal(x) -> -Sharp(x))", "-exists x.(PreciousMetal(x) & Rare(x))", "-exists x.(PreciousMetal(x) & Rare(x))", "-exists x.(PreciousMetal(x) & -Scarce(x))"]}
{"id": "folio_train_1696", "nl": "All non-rare earth metals are not scarce.", "fol": "all x.(IsNonRareEarthMetal(x) -> IsScarce(x))", "prediction": ["all x.(NonRareEarthMetal(x) -> -Sharp(x))", "all x.(NonRareEarthMetal(x) -> -Scarce(x))", "all x.((NonRareEarthMetal(x) & -Sharp(x)) -> -Sharp(x))", "all x.((NonRareEarthMetal(x) & -Sharp(x)) -> -Sharing(x))", "all x.((NonRareEarthMetal(x) & -Scarce(x)) -> -NoSharp(x))", "all x.(NonRareEarthMetal(x) -> -Sharp(x))", "all x.((NonRareEarthMetal(x) & -Scarce(x)) -> -RareElectric(x))", "all x.((NonRareEarthMetal(x) & -Scarce(x)) -> -Scarce(x))", "all x.(NonRareEarthMetal(x) -> -Scarce(x))", "all x.((NonRareEarthMetal(x) & -Sharp(x)) -> -Scarce(x))", "all x.(NonRareEarthMetal(x) -> -Sharp(x))", "all x.(NonRareEarthMetal(x) -> -Scarce(x))", "all x.(NonRareEarthMetal(x) -> -Sharp(x))", "all x.(NonRareEarthMetal(x) -> -Sharp(x))", "all x.(NonRareEarthMetal(x) -> -Sharp(x))", "all x.(NonRareEarthMetal(x) -> -Scarce(x))"]}
{"id": "folio_train_1697", "nl": "Either non-rare earth metals or rare earth metals. ", "fol": "all x.(IsNonRareEarthMetal(x) | IsRareEarthMetal(x))", "prediction": ["all x.((NonRareEarthMetal(x) | RareEarthMetal(x)) -> Either(x))", "(NonRareEarthMetal(x) | RareEarthMetal(x))", "((NonRareEarthMetal(x) | RareEarthMetal(x)))", "(NonRareEarthMetal(x) | RareEarthMetal(x))", "all x y.((NonRareEarthMetal(x) | RareEarthMetal(y)) -> (-RareEarthMetal(x) | RareEarthMetal(x)))", "(NonRareEarthMetal(x) | RareEarthMetal(x))", "((NonRareEarthMetal(x) | RareEarthMetal(x)))", "exists x.((Non(x) & Rare(x)) & -Rare(x))", "(RareEarthMetal(x) | RareEarthMetal(x)))", "((NonRareEarthMetal(x) | RareEarthMetal(x)))", "(NonRareEarthMetals(EarthMetal) | RareEarthMetal(EarthMetal))", "(RareEarthMetal(x) | RareEarthMetal(x))", "all x.((NonRareEarthMetal(x) | RareEarthMetal(x)) -> (NonRareEarthMetal(x) | RareEarthMetal(x)))", "((NonRareEarthMetal(x) | RareEarthMetal(x)))", "(NonRareEarthMetals(x) | RareEarthMetals(x))", "(RareEarthMetal(x) | RareEarthMetal(x)))"]}
{"id": "folio_train_1698", "nl": "All rare earth metals can be used for batteries.", "fol": "all x.(IsRareEarthMetal(x) -> CanBeUsedForBatteries(x))", "prediction": ["all x.(RareEarthMetal(x) -> CanBeUsedForBatteries(x))", "all x.(RareEarthMetal(x) -> CanBeUsedForBatteries(x))", "all x.(RareEarthMetal(x) -> UsedForBatteries(x))", "all x.(RareEarthMetal(x) -> CanBeUsedForBatteries(x))", "all x.(RareEarthMetal(x) -> CanBeUsedForBatteries(x))", "all x.(RareEarthMetal(x) -> CanBeUsedForBatteries(x))", "all x.(RareEarthMetal(x) -> CanBeUsedForBatteries(x))", "all x.(RareEarthMetal(x) -> UsedForBatteries(x))", "all x.(RareEarthMetal(x) -> CanBeUsedForBatteries(x))", "all x y z.((RareEarthMetal(x) & Battery(y) & Battery(z)) -> CanBeUsedFor(x,y))", "all x.(RareEarthMetal(x) -> CanBeUsedForBatteries(x))", "all x.((RareEarthMetal(x) & UsedForBatteries(x)) -> Compatible(x))", "all x.(RareEarthMetal(x) -> CanBeUsedForBatteries(x))", "all x.(RareEarthMetal(x) -> CanBeUsedForBatteries(x))", "all x.(RareEarth(x) -> CanBeUsedForBatteries(x))", "all x.(RareEarthMetal(x) -> CanBeUsedForBatteries(x))"]}
{"id": "folio_train_1699", "nl": "All rare earth metals are essential for electric vehicles.", "fol": "all x.(IsRareEarthMetal(x) -> IsEssentialForElectricVehicles(x))", "prediction": ["all x.(RareEarthMetal(x) -> EssentialForElectricVehicles(x))", "all x.(RareEarthMetal(x) -> EssentialForElectricVehicles(x))", "all x.(RareEarthMetal(x) -> EssentialForElectricVehicles(x))", "all x.(RareEarthMetal(x) -> EssentialForElectricVehicles(x))", "all x.(RareEarthMetal(x) -> EssentialForElectricVehicles(x))", "all x.(RareEarthMetal(x) -> EssentialForElectricVehicles(x))", "all x.(RareEarthMetal(x) -> EssentialForElectricVehicles(x))", "all x.(RareEarthMetal(x) -> EssentialForElectricVehicles(x))", "all x.(RareEarthMetal(x) -> EssentialForElectricVehicles(x))", "all x.(RareEarthMetal(x) -> EssentialForElectricVehicles(x))", "all x.(RareEarthMetal(x) -> EssentialForElectricVehicles(x))", "all x.(RareEarthMetal(x) -> EssentialForElectricVehicles(x))", "all x y.((RareEarthMetal(x) & ElectricVehicle(y)) -> EssentialFor(x,y))", "all x.(RareEarthMetal(x) -> EssentialForElectricVehicles(x))", "all x.(RareEarthMetal(x) -> EssentialForElectricVehicles(x))", "all x.(RareEarthMetal(x) -> EssentialForElectricVehicles(x))"]}
{"id": "folio_train_1700", "nl": "Lithium is neither a non-rare earth metal nor essential for electric vehicles.", "fol": "(-IsNonRareEarthMetal(Lithium) & -IsEssentialForElectricVehicles(Lithium))", "prediction": ["all x.(Lithium(x) -> (-NonRareEarthMetal(x) & -EssentialForElectricVehicles(x)))", "all x.(Lithium(x) -> (NonRareEarthMetal(x) & -NotEssentialForElectricVehicles(x)))", "all x.(Lithium(x) -> (NonRareEarthMetal(x) & -EssentialForElectricVehicles(x)))", "all x.(Lithium(x) & -(NonRareEarthMetal(x) | EssentialForElectricVehicles(x)))", "(-rareEarthMetal(lithium) & -EssentialForElectricVehicles(lithium))", "(-(NonRareEarthMetal(Lithium) & -EssentialForElectricVehicles(Lithium)) -> -(NonRareEarthMetal(Lithium) & -EquivalentForElectricVehicles(Lithium)))", "(-(NonRareEarthMetal(Lithium) & -(NonRareEarthMetal(Lithium) & -(UniqueForElectricVehicles(Lithium) | EssentialForElectricVehicles(Lithium))))", "all x.(Lithium(x) -> (NonRareEarthMetal(x) | EssentialForElectricVehicles(x)))", "all x.(Litium(x) -> (-NonRareEarthMetal(x) & -EssentialForElectricVehicles(x)))", "all x.(Lithium(x) -> (-(NonRareEarth(x) & -EquivalentForElectricVehicles(x)) | -(NonRareMetall(x) & -EquivalentForElectricVehicles(x)))))", "all x.(Litium(x) -> (-NonRareEarthMetal(x) & -EssentialForElectricVehicles(x)))", "(-NonRareEarthMetal(Lithium) & -EssentialForElectricVehicles(Lithium))", "-(NonRareEarthMetal(lithium) & -EssentialForElectricVehicles(lithium))", "all x.(Litium(x) -> (-NonRareEarthMetallic(x) & -EssentialForElectricVehicles(x)))", "(-(NonRareEarthMetal(lithium) & -EssentialForElectricVehicles(lithium)) -> Lithium))", "all x.(Lithium(x) -> (-NonRareEarthMetal(x) & -EssentialForElectricVehicles(x)))"]}
{"id": "folio_train_1701", "nl": "Lithium is a rare earth metal.", "fol": "IsRareEarthMetal(Lithium)", "prediction": ["all x.(Lithium(x) -> RareEarthMetal(x))", "all x.(Lithium(x) -> RareEarthMetal(x))", "(RareEarthMetal(Lithium) -> RareMetal(Lithium))", "all x.(Lithium(x) -> RareEarthMetal(x))", "all x.(Lithium(x) -> RareEarthMetal(x))", "all x.(Lithium(x) -> RareEarthMetal(x))", "all x.(Lithium(x) -> RareEarthMetal(x))", "all x.(Lithium(x) -> RareEarthMetal(x))", "all x.(Lithium(x) -> RareEarthMetal(x))", "all x.(Litium(x) -> RareEarthMetal(x))", "all x.(Lithium(x) -> RareEarthMetal(x))", "all x.(Lithium(x) -> RareEarthMetal(x))", "all x.(Litium(x) -> RareEarthMetal(x))", "all x.(Litium(x) -> RareEarthMetal(x))", "all x.(Lithium(x) -> RareEarthMetal(x))", "(RareEarthMetal(Lithium))"]}
{"id": "folio_train_1702", "nl": "Lithium is a precious metal and is used for batteries.", "fol": "(IsPreciousMetal(Lithium) & CanBeUsedForBatteries(Lithium))", "prediction": ["all x.(Lithium(x) -> (PreciousMetal(x) & UsedForBatteries(x)))", "all x.(Lithium(x) -> (PreciousMetal(x) & UsedForBatteries(x)))", "all x.(Lithium(x) -> (PreciousMetal(x) & UsedForBatteries(x)))", "all x y.((Lithium(x) & PreciousMetal(y)) -> (UsedFor(x,Batteries) & UsedFor(x,Batteries)))", "all x.(Lithium(x) -> (PreciousMetal(x) & UsedForBatteries(x)))", "all x.(Lithium(x) -> (PreciousMetal(x) & UsedForBatteries(x)))", "all x.(Litium(x) -> (PreciousMetal(x) & UsedForBatteries(x)))", "all x.(Lithium(x) -> (PreciousMetal(x) & UsedForBatteries(x)))", "all x.(Lithium(x) -> (PreciousMetal(x) & UsedForBatteries(x)))", "all x.(Litium(x) -> (PreciousMetal(x) & UsedForBatteries(x)))", "all x.(Lithium(x) -> (PreciousMetal(x) & UsedForBatteries(x)))", "all x.(Lithium(x) -> (PreciousMetal(x) & UsedForBatteries(x)))", "all x.(Lithium(x) -> (PreciousMetal(x) & UsedForBatteries(x)))", "all x.(Lithium(x) -> (PreciousMetal(x) & UsedForBatteries(x)))", "all x.(Lithium(x) -> (PreciousMetal(x) & UsedForBatteries(x)))", "(PreciousMetal(lithium) & UsedForBatteries(lithium))"]}
{"id": "folio_train_1703", "nl": "If Lithium is not essential for electric vehicles or a precious metal, then Lithium is not a non-rare earth metal or usable for batteries.", "fol": "(((-IsEssentialForElectricVehicles(Lithium) | IsPreciousMetal(Lithium)) -> -IsNonRareEarthMetal(Lithium)) | CanBeUsedForBatteries(Lithium))", "prediction": ["all x.((Lithium(x) & -EssentialForElectricVehicles(x) & -PreciousMetal(x)) -> (-NonRareEarthMetal(x) & -UsableForBatteries(x)))", "all x.((Lithium(x) & -(EssentialForElectricVehicles(x) | PreciousMetal(x))) -> (-NonRareEarthMetal(x) | UsableForBatteries(x)))", "all x.((Lithium(x) & -EssentialForElectricVehicles(x) & -PreciousMetal(x)) -> -ClosableForBatteries(x))", "all x.((Lithium(x) & -EssentialForElectricVehicles(x) | PreciousMetal(x)) -> (-NonRareEarthMetal(x) & -UsableForBatteries(x)))", "all x.((Lithium(x) & -EssentialForElectricVehicles(x) & -PreciousMetal(x)) -> (-NonRareEarthMetal(x) & -UsableForBatteries(x)))", "all x.((Lithium(x) & -EssentialForElectricVehicles(x) & -PreciousMetal(x)) -> -NonRareEarthMetal(x) & -UsableForBatteries(x))", "all x.((Lithium(x) & (-EdibleForElectricVehicles(x) | PreciousMetal(x))) -> -NonRareEarthMetal(x) & -UsableForBatteries(x))", "all x.((Lithium(x) & -EssentialForElectricVehicles(x) & -PreciousMetal(x)) -> (-NonRareEarthMetal(x) & -UsableForBatteries(x)))", "all x.((Lithium(x) & -EssentialForElectricVehicles(x) & -PreciousMetal(x)) -> -NonRareEarthMetal(x) & -UsableForBatteries(x))", "all x.((Lithium(x) & -EssentialForElectricVehicles(x) & -PreciousMetal(x)) -> (-NonRareEarthMetal(x) & -ReusableForBatteries(x)))", "all x.((Lithium(x) & -EssentialForElectricVehicles(x) & -PreciousMetal(x)) -> -NonRareEarthMetalOrBatteryUsable(x))", "all x.((Lithium(x) & -EssentialForElectricVehicles(x) & -PreciousMetal(x)) -> (-NonRareEarthMetal(x) & -UsableForBatteries(x)))", "all x.((Lithium(x) & -EssentialForElectricVehicles(x)) | PreciousMetal(x)) -> (-NonRareEarthMetal(x) & -UsableForBatteries(x)))", "all x.((Lithium(x) & -EssentialForElectricVehicles(x) & -PreciousMetal(x)) -> -NonRareEarthMetal(x) & -UsableForBatteries(x))", "exists x.(Lithium(x) & -(EssentialForElectricVehicles(x) | PreciousMetal(x))) & -NonRareEarthMetal(x) & -UsableForBatteries(x)))", "all x.((Lithium(x) & -EssentialForElectricVehicles(x) & -PreciousMetal(x)) -> (-NonRareEarthMetallic(x) & -UsableForBatteries(x)))"]}
{"id": "folio_train_1704", "nl": "If people own at least one pet, then they do not have tidy houses.", "fol": "all x.(OwnAtLeastOnePet(x) -> -HasTidyHouse(x))", "prediction": ["all x.(Owns(x,y) -> TickyHouses(y))", "all x y.((Person(x) & Pet(y) & Owns(x & 5) & DoesNotHaveTidyHouse(x)) -> -TidyHouse(x))", "all x.((PeopleOwnsBather(x) & -StylishHouses(x)) -> OwnsPet(x))", "all x.((OwnsPet(x) & HasPet(x)) -> -TidyHouse(x))", "all x.(OwnAtLeastOnePet(x) -> -TidyHouses(x))", "all x.(Equals(x,y) -> -TidyHouse(x))", "all x.((Person(x) & OwnsOnePet(x)) -> -TidyHouse(x))", "all x.(Owns(x,y) -> -TidyHouses(y))", "all x.(OwnsAtLeastOnePet(x) -> -TidyHouses(x))", "all x.((Person(x) & OwnsPet(x)) -> -TidyHouses(x))", "all x.((Person(x) & OwnsPet(x)) -> -TidyHouse(x))", "all x.((OwnsAtLeastOnePet(x)) -> -TidyHouses(x))", "all x.(OwnsAtLeastOnePet(x) -> -TidyHouses(x))", "all x.(OwnsAtLeastOnePet(x) -> -TidyHouses(x))", "all x.((OwnsOnePet(x) & -HasTidyHouses(x)) -> -HasTidyHouses(x))", "all x.((OwnsKing(x) & HasKing(x)) -> NeverHasTidyHouse(x))"]}
{"id": "folio_train_1705", "nl": "If people grew up with childhood pets, then they own at least one pet.", "fol": "all x.(GrewUpWithChildhoodPets(x) -> OwnAtLeastOnePet(x))", "prediction": ["all x.((Person(x) & GrowingUpWithChildren(x)) -> OwnsPet(x))", "all x.((Person(x) & GrassedUpWithChildrenPet(x)) -> OwnsPet(x))", "all x.((Person(x) & grewUpWithChildren(x)) -> OwnsPet(x,y))", "all x.((GrowthWithChildren(x) & Pet(x)) -> OwnsPet(x))", "all x.((Person(x) & GrownUpWithChildrenPet(x)) -> OwnWorkingPet(x))", "all x.(GrowSupWithChildhoodPet(x) -> OwnsPerpet(x))", "all x.((People(x) & WorriedUpWithChildrenPets(x)) -> OwningAtLeastOnePet(x))", "all x.((Person(x) & GrownUpWithChildren(x)) -> OwnsAtLeastOnePet(x))", "all x.((Person(x) & grewUpWithChildren(x)) -> OwnsAtLeastOnePet(x))", "all x y.((Person(x) & GrazedUpWithChildren(x,y)) -> OwnsAnimal(x,y))", "all x.((Person(x) & grewUpWithChildrenPet(x)) -> OwnsHasPet(x))", "all x.((Popular(x) & grewUpWithChildren(x)) -> OwnsAtLeastOnePet(x))", "all x.((Popular(x) & GrownUpWithChildren(x)) -> OwnsPet(x))", "all x.((People(x) & grewUpWithChildrenPets(x)) -> OwnsRemainingPet(x))", "all x.(Spokena(x) -> Owns(x,y))", "all x.((Person(x) & GrownUpWithChildrenPet(x)) -> OwnsPet(x,y))"]}
{"id": "folio_train_1706", "nl": "If people hire a maid or cleaning service, then they have tidy houses.", "fol": "all x.(HiredCleaningService(x) -> HasTidyHouse(x))", "prediction": ["all x.((HiresMaid(x) | HiresCleaningService(x)) -> CleanHouses(x))", "all x.((HuntsMaid(x) | HiresCleaningService(x)) -> HasTidyHouses(x))", "all x.((HoldsMaid(x) | HuddlesCleaningService(x)) -> TidyHouses(x))", "all x.(HuntsMaidOrCleaningService(x) -> (TidyHouses(x) & ClearHouses(x)))", "all x.(HasMaidOrCleaningService(x) -> HasTidyHouses(x))", "all x.((HuntsMaidOrCleaningService(x)) -> StylishHouses(x))", "all x.((HiresMaid(x) | HiresCleaningService(x)) -> HasTidyHouse(x))", "all x y.((HasMaid(x) | HiresCleaningService(x)) -> HasTidyHouses(y))", "all x.(HearsMaidOrCleaningService(x) -> HasTidyHouses(x))", "all x.(HiresMaidOrCleaningService(x) -> TidyHouses(x))", "all x y.((HoldsMaid(x) | HiresCleaningService(x)) -> HasTidyHouses(y))", "all x.(HuntsMaidOrCleaningService(x) -> TightHouses(x))", "all x.(HiresMaidOrSavingService(x) -> TidyHouses(x))", "all x y.((HuntsMaid(x) | HiresCleaningService(x)) -> TidyHouses(y))", "all x.((HuntsMaid(x) | HiresCleaningService(x)) -> DirtyHouses(x))", "all x.(HuntsMaidOrCleaningService(x) -> TidyHouses(x))"]}
{"id": "folio_train_1707", "nl": "If people live in the suburbs, then they have tidy houses.", "fol": "all x.(LivesInSuburbs(x) -> GrewUpWithChildhoodPets(x))", "prediction": ["all x.((Person(x) & LivesInDepartments(x)) -> HasTidyHouses(x))", "all x.((People(x) & LivesInFurniture(x)) -> HasTidyHouses(x))", "all x.((People(x) & LivesInSuburbs(x)) -> HasTidyHouses(x))", "all x.((LiveInDepartments(x) & Minions(x)) -> TidyHouses(x))", "all x.((Person(x) & LivesInSuburbs(x)) -> HasTidyHouses(x))", "all x.((ProvidesInSuburbs(x) & LivesInFurniture(x)) -> HasTidyHouse(x))", "all x.(LivesInSuburbs(x) -> ThereEarthyHouses(x))", "all x.(LivesInSuburbs(x) -> HasTidyHouses(x))", "all x.(LivesInSuburbs(x) -> HasTidyHouses(x))", "all x.(LivesInDemocracy(x) -> HasTidyHouses(x))", "all x y.((Family(x) & Suburbs(y) & LivesIn(x,y)) -> HasTidyHouses(x))", "all x.(LeaveInSuburbs(x) -> TightHouses(x))", "all x.(LivesInSuburbs(x) -> HasTidyHouses(x))", "all x.((People(x) & LiveInSuburbs(x)) -> HasTidyHouses(x))", "all x.((Person(x) & LivesInSuburbs(x)) -> HasTidyHouses(x))", "all x.((People(x) & LivesInSuburbs(x)) -> HasTidyHouses(x))"]}
{"id": "folio_train_1708", "nl": "Jack either does not hire a maid or cleaning service or, if he does, then he does not own at least one pet.", "fol": "-((HiredCleaningService(Jack) & -OwnAtLeastOnePet(Jack)) | (-HiredCleaningService(Jack) & OwnAtLeastOnePet(Jack)))", "prediction": ["all x.((Jack(x) & (-HuntsMaid(x) | -HuntsCleaningService(x))) -> -HasPet(x))", "(Pet(Jack) & -HasMaidOrCleaningService(Jack)) | (-HasMaid(Jack) & OwnsPet(Jack))))", "((HuntsMaid(j) & -HuntsCleaningService(he)) | (-HuntsMaid(j) & OwnsPet(j))))", "(all x y.((Jack(x) & Dog(y)) -> -HuntsMaid(x,y)) & ((Jack(x) & Pet(x)) -> -HuntsMaid(x,y)) & -HuntsCleaningService(x,y)))", "(-HallsMaidOrCleaningService(Jack) | (-HoldsMaidOrCleaningService(Jack))))", "((DoesNoHireMaid(Jack) | DoesNoHauteCleaningService(Jack)) & -OwnsPet(Jack))", "all x.((Jack(x) & (-HasMaid(x) | HasCleaningService(x))) | (-HasPet(x) & OwnsPet(x))))", "all x.((HasMaid(x) | HasCleaningService(x)) | (-HasSorryPet(x) & OwnsPet(x))))", "all x.((Jack(x) & -HuntsMaidOrCleaningService(x)) | (-HuntsPrison(x) & OwnsMet(x))))", "(all x.(HasMaid(x) | HasCleaningService(x))) | (-HasPet(x) & OwnsPet(x))))", "(all x.(HuntsMaidOrCleaningService(x) | (-HuntsMaidOrCleaningService(x))) & -Hunts(x))) -> -OwnsPet(x))", "all x.((Jetons(x) & -HuntsMaidOrCleaningService(x)) | (-HuntsMaidOrCleaningService(x))))", "exists x.(Jack(x) & ((-HasMaid(x) | -HasCleaningService(x)) | (-HasPet(x)))))", "(-HuntsMaids(Jack) & -HuntsCleaningService(Jack)) | (-HuntsMaids(Jack) & OwnsPets(Jack))))", "(-HiresMaidOrCleaningService(Jack) | (-HasPet(Jack) & OwnsPet(Jack))))", "all x.((HuntsMaidOrCleaningService(x) | (-HuntsMaidOrCleaningService(x) | -OwnsPet(x))))"]}
{"id": "folio_train_1709", "nl": "Jack lives in the suburbs.", "fol": "LivesInSuburbs(Jack)", "prediction": ["(LifeSideways(Jack) & LivesIn(Jack,Burbs))", "(LisesInBurbs(Jack):", "in the suburbs.", "all x y.((Jack(x) & Suburb(y)) -> LivesIn(x,y))", "all x.(Jack(x) -> LivesInSuburbs(x))", "all x.(Jack(x) -> LivesInSuburbs(x))", "all x y.((Jack(x) & Suburb(y)) -> LivesIn(x,y))", "(LivesInSuburbs(Jack))", "-exists x.(Jacks(x) & In(x,Suburbs))", "(LivesIn(Jeffrey,Burbs) -> LivesIn(Jeffrey,Burbs))", "all x.(Jack(x) -> LivesInSurroundings(x))", "in the suburbs.", "all x.(Hack(x) -> LivesInSuburbs(x))", "(LifeSituation(Jack) & Location(Jack,Suburbs))", "exists x.(Jack(x) & LivesInDependents(x))", "-LivesInSuburbs(Jack)"]}
{"id": "folio_train_1710", "nl": "Jack does not live in the suburbs.", "fol": "-LivesInSuburbs(Jack)", "prediction": ["-exists x.(Jack(x) & -LivesInSurroundings(x))", "-exists x.(Jack(x) & -LivesInBurbs(x))", "(-LivesInSuburbs(Jack))", "-exists x.(Jack(x) & -LivesInSuburbs(x))", "all x.(Jack(x) -> -LivesInSuburbs(x))", "(LivesInSuburbs(Jack) & -LivesInSuburbs(Jack))", "exists x.(Jack(x) & -LivesInSuburbs(x))", "(Underground(Jack))", "(-(Jack(Jack) & Sufficient(Jack)))", "all x.((Jack(x) & -InSuburbs(x)) -> -LivesIn(x,y))", "-exists x.(Jack(x) & (Depends(x) | -Depends(x))))", "(-Kick(Jack) & -LivesInSuburbs(Jack))", "John & Jack & -Depends.", "all x.(Jack(x) -> -LivesInSuburbs(x))", "-LivingInDecrivate(Jack)", "-exists x.(Jack(x) & -LivesIn(x,Burbovine))"]}
{"id": "folio_train_1711", "nl": "Jack has a tidy house.", "fol": "HasTidyHouse(Jack)", "prediction": ["(QuietHouse(Jack) | HasHasHouse(Jack))", "(HasTidyHouse(Jack) & House(Jack))", "Jack has a tidyhouse.", "all x.(Jack(x) -> (TidyHouse(x) & House(x)))", "(HasTidyHouse(Jack) & HasHouse(Jack))", "all x.(HasItPristineHouse(x) -> HasItyHouse(x))", "all x.(HasHouse(x,y) -> Clean(y))", "Jack has tidyedHouse(jack)", "-StylishHouse(Jack)", "all x.(Jack(x) -> HasTidyHouse(x))", "(HasRoom(Jack) & Trash(Jack))", "Jack has a tidyHouse(Jack)", "(HasHouse(Jack) & Trashy(jack))", "all x.(Jack/House(x) -> Tidy(x))", "(TidyHouse(Jack))", "all x.(JackHasTidyHouse(x) -> HasHouse(x))"]}
{"id": "folio_train_1712", "nl": "Jack neither lives in the suburbs nor owns at least one pet.", "fol": "(-LivesInSuburbs(Jack) & -OwnAtLeastOnePet(Jack))", "prediction": ["all x.((Jack(x) & -(LivesInSuburbs(x) | OwnsPet(x)))) -> -(LifeInSuburbs(x) & OwnsPet(x))))", "-exists x.(Jack(x) & PeopleOrPet(x))", "(-exists x.(Jack(x) & LivesInSuburbs(x)) & exists y.(Pet(y) & Owns(x,y))))", "(LivingInSuburbs(Jack) & -OwnsPet(Jack))", "-(LivesInSuburbs(Jack) | OwnsAtLeastOnePet(Jack))", "-exists x.(Chair(x) & -LivesInDeserts(x) & -HasPet(x))", "all x.((Jack(x) & -(LivesInSuburbs(x) | OwnsPet(x))) -> -(LivesInSuburbs(x) & OwnsPet(x))))", "exists x.(Jack(x) & -(LivesInSuburbs(x) | OwnsPet(x))))", "-(LivesInSuburbs(Jack) & -OwnsPet(Jack))", "(LivingInSuburbs(Jack) & -(HasPet(Jack) | OwnsPet(Jack)))", "(-(LivingInSuburbs(Jack) | OwnsPet(Jack)))", "(-exists x.(Capita(x) & LivingIn(x,suburbs))) & -exists y.(Pet(y) & Owns(y,z))))", "-exists x.(Jack(x) & -exists y.(Suburb(y) & LivesIn(x,y)) & -exists z.(Pet(z) & Owns(x,z))))", "all x y.((Jack(x) & SuburbSide) & -(OwnsPet(x,y) | OwnsPet(x,y))) -> -LivesIn(x,y))", "(LivingInSuburbs(Jack) & -(exists z.(Pet(Jack) & Pet(z)) & Owns(Jack,z))))", "(-(LivesInSuburbs(Jack) | OwnsPet(Jack)))"]}
{"id": "folio_train_1713", "nl": "Jack grew up with childhood pets and lives in the suburbs.", "fol": "(GrewUpWithChildhoodPets(Jack) & LivesInSuburbs(Jack))", "prediction": ["(SameDay(Jack) -> (GrowsUpWithChildren(Jack) & LivesInSuburbs(Jack)))", "all x.((Jack) & ChildhoodPet(x)) -> (GrowsUpWith(x,Pet(x) & LivesInSuburbs(x)))", "-(GrowsUpWithChildrenPets(Jack) & LivesInDelta(Jack))", "all x.(Jack(x) -> (GrowthWithAdultPets(x) & LivesInSuburbs(x)))", "as a child, Jack grew up with ChildhoodPets(Jack) & LivesInSuburbs(Jack))", "all x.((Jack(x) & ChildhoodPet(x)) -> (GrowsUpWith(x,Children) & LivesInSuburbs(x)))", "(-GrowthWithChildhoodPets(Jack) & LivesInDeserts(Jack,10))", "Jack grewUpWithChildrenPets(Jack) & LivesInDepartments(Jack))", "-(GrowthsWithChildren(Jack) & LivesInSuburbs(Jack))", "for a lifetime (worships(Jack) & ChildhoodPets(Jack) & OrientatedLife(Jack))", "Jack grew-upWithChildrenPets(Jack) & LivesInSuburbs(Jack))", "(GrowedUpWithChildren(Jack) & LivesInDeborahs(Jack))", "(GrowsUpWithChildrenPets(Jack) & LivesInSuburbs(Jack))", "all x y.((Jack(x) & ChildhoodPet(y)) -> (GrowsUpWith(x,y) & LivesInSuburbs(x)))", "all x.(Jack(x) -> (GrowsUpWithChildren(x) & LivesInSuburbs(x)))", "all x.(Jack(x) -> (StaysIn(x,Children) & LivesIn(x,Suburbs)))"]}
{"id": "folio_train_1714", "nl": "A bottle is either standing upright or toppled over. ", "fol": "((IsUpright(Bottle) & -IsToppledOver(Bottle)) | (-IsUpright(Bottle) & IsToppledOver(Bottle)))", "prediction": ["all x.(Bottle(x) -> (StandingUpright(x) | TorppledOver(x)))", "all x.(Bottle(x) -> (StandingUpright(x) | ToppledOver(x)))", "all x.(Bottle(x) -> (StandingUpright(x) | TippedOver(x)))", "all x.(Bottle(x) -> (StandingUpright(x) | ToppledOver(x)))", "all x.(Bottle(x) -> (StandingUpright(x) | ToppledOver(x)))", "all x.(Bottle(x) -> (StandingUpright(x) | ToppledOver(x)))", "all x.(Beverage(x) -> (StandingUpright(x) | ToppledOver(x)))", "all x.(Bottle(x) -> (StandingUpright(x) | ToppledOver(x)))", "all x.(Bottle(x) -> (StandsUpright(x) | PopsOver(x)))", "all x.(Bottle(x) -> (StandsUpright(x) | ToppledOver(x)))", "all x.(Bottle(x) -> (StandingUpright(x) | ToppledOver(x)))", "all x.(Bottle(x) -> (StormUpright(x) | ToppledOver(x)))", "all x.(Bottle(x) -> (StandsUpright(x) | ToppledOver(x)))", "all x.(Bottle(x) -> (StandsUpright(x) | PluckedOver(x)))", "all x.(Bottle(x) -> (StandingUpright(x) | ToppledOver(x)))", "all x.(Bottle(x) -> (StandsUpright(x) | ToppledOver(x)))"]}
{"id": "folio_train_1715", "nl": "The bottle is not upright.", "fol": "-IsUpright(Bottle)", "prediction": ["is -UPDEEP.", "-UprightBoutique(Bucket)", "All x.(Bottle(x) -> -Upright(x))", "all x.(Bottle(x) -> -Upright(x))", "(-UprightBoutique(Blood))", "Der Bottlesupright(blender)", "all x.(Blood(x) -> -Upright(x))", "-UprightBottle(n)", "(-Upright(Bottle))", "the bottle is not upright.", "(-Backsliding(Blut))", "all x.(Bubble(x) -> -Upright(x))", "the bottle is not upright.", "(-Upright(Bucket))", "all x.(Bottle(x) -> -Upright(x))", "(-Upright(Ball))"]}
{"id": "folio_train_1716", "nl": "The bottle is toppled over.", "fol": "IsToppledOver(Bottle)", "prediction": ["all x.(Boutlet(x) -> ToppledOver(x))", "all x.(Bottle(x) -> ToppledOver(x))", "ToppledOver.", "all x.(Boutique(x) -> ToppledOver(x))", "all x.(Bottle(x) -> ToppledOver(x))", "all x.((Boutique(x) & ToppledOver(x))", "All x.(Boutique(x) -> ToppledOver(x))", "all x.(Bottle(x) -> ToppledOver(x))", "all x.(Bottle(x) -> ToppledOver(x))", "all x.(Board(x) -> ToppledOver(x))", "all x.(Boutique(x) -> ToppledOver(x))", "exists x.(Boutlet(x) & ToppledOver(x))", "all x.(Bouton(x) -> ToppledOver(x))", "all x.(Bottle(x) -> ToppledOver(x))", "all x.(Blood(x) -> ToppledOver(x))", "all x.(Blood(x) -> ToppledOver(x))"]}
{"id": "folio_train_1717", "nl": "If people eat cereal and milk every day for breakfast, then they have very busy morning schedules every day.", "fol": "all x.(EatsCerealAndMilk(x) -> HasBusyMorningSchedule(x))", "prediction": ["all x.(EatsCerealAndMilkEveryDayForBreakfast(x) -> BusyMorningSchedule(x))", "all x.((People(x) & EatsCerealAndMilkEveryDay(x) & ForBreakfast(x)) -> BusyBeddaySchedule(x))", "all x.((EatsCerealAndMilkEveryDay(x) & Breakfast(x)) -> VeryBuggyMorningSchedule(x))", "all x.((People(x) & EatsCorealAndMilkEveryDayForBreakfast(x)) -> VeryBusyMorningSchedules(x))", "all x.((People(x) & EatsCerealAndMilkEveryDayForBreakfast(x)) -> VeryBusyMorningSchedulesEveryDay(x))", "all x y.((Eats(x) & Cereal(x) & Milk(x) & Breakfast(y)) -> BusyMorningSchedule(x))", "all x.((Person(x) & EatsCerealAndMilkEveryDay(x)) -> BusyMorningSchedulesEveryDay(x))", "all x.((People(x) & EatsCerealAndMilk(x)) -> VeryBusyMorningSchedules(x))", "all x.((People(x) & EatsCerealAndMilkEveryDayForBreakfast(x)) -> BusyMorningSchedule(x))", "all x.((Food(x) & EatsCerealAndMilkEveryDay(x)) -> VeryBoundMarshallSchedule(x))", "all x.((Person(x) & Eat(x,Cereal,Milk) & EveryDay(x)) -> BusyMorningSchedule(x))", "all x.((Person(x) & EatsCereal(x) & EatsMilk(x)) -> BusyMorningSchedule(x))", "all x.((Person(x) & EatsCerealAndMilk(x) & EveryDay(x)) -> BusyMorningSchedule(x))", "all x.((Preschooler(x) & EatsCerealAndMilkEveryDay(x)) -> BusyMorningSchedule(x))", "all x.((Person(x) & EatsCerealAndMilkEveryDay(x) & Breakfast(x)) -> BusyMorningSchedule(x))", "all x.((EatsCerealAndMilkEveryDay(x) & BreakfastForBreakfast(x)) -> VeryBusyMorningSchedulesEveryDay(x))"]}
{"id": "folio_train_1718", "nl": "All young children below the age of ten eat cereal and milk every day for breakfast.", "fol": "all x.(ChildrenUnderTen(x) -> HasBusyMorningSchedule(x))", "prediction": ["all x y.((YoungChild(x) & UnderTen(x) & EatingCerealAndMilk(x)) -> BreakfastEat(x,y))", "all x.((YoungChild(x) & UnderTen(x)) -> EatsCerealAndMilk(x))", "all x.((YoungChild(x) & UnderTen(x)) -> EatsCerealAndMilk(x))", "all x.((YoungChild(x) & UnderTen(x)) -> EatsCerealAndMilkEveryDay(x))", "all x.((Year(x) & under10(x)) -> EatsCerealAndMilk(x))", "all x.((YoungChild(x) & UnderTenCereals(x)) -> EatsCerealAndMilkToBegin(x))", "all x.((YoungChild(x) & UnderTen(x)) -> Eats(x,c\u00e9r\u00e9al,milk))", "all x.((Kid(x) & BelowTen(x)) -> EatsCerealAndMilkEveryDayForBreakfast(x))", "all x.((JungleChild(x) & AgeBelowTen(x)) -> EatsCerealAndMilkEveryDay(x))", "all x.((YoungChild(x) & UnderTen(x)) -> EatsCerealAndMilk(x))", "all x.((Child(x) & BelowTen(x) & EatsCerealAndMilk(x)) -> EatsForBreakfast(x))", "all x.((YoungChild(x) & BelowTenAge(x)) -> EatsCerealAndMilkEveryDayForBreakfast(x))", "all x.((YoungChild(x) & UnderTen(x)) -> (EatsCereal(x) & EatsMilk(x)))", "all x.((YoungChild(x) & UnderTen(x)) -> EatsCerealAndMilkForBreakfast(x))", "all x.(((YoungChild(x) & BelowAgeOfTen(x)) -> Eats(x,celebar) & Eats(x,milk))", "all x.((YoungChild(x) & AgeBelow(x,10)) -> Eats(x,Cereal) & Eats(x,Milk))"]}
{"id": "folio_train_1719", "nl": "People are either young children below the age of ten or have a lot of commitments they voluntarily signed up for.", "fol": "all x.((ChildrenUnderTen(x) & -Committments(x)) | (-ChildrenUnderTen(x) & Committments(x)))", "prediction": ["all x.((Person(x) & YoungChild(x) & UnderTen(x)) | (FreshCommitted(x) & SignedUpFor(x))))", "all x.(Person(x) -> (YoungChildrenBelowAge(x,6) | VoluntaryCommitments(x,9)))", "all x.(Person(x) -> ((YoungChild(x) & UnderTen(x)) | LotsOfCommitments(x))))", "all x.((People(x) & (BelowAge(x,10) | LotsOfContracts(x))) -> YoungChild(x))", "all x.(Property(x) -> ((YoungChild(x) & UnderTen(x)) | DefinitelyLossOfCommitments(x))))", "all x.(Nurse(x) -> (YoungChild(x) & UnderTen(x)) | LotsOfCommitments(x)))", "all x.(YoungChild(x) | (YearsAboveTen(x) | VolunteerContracts(x))))", "all x.((People(x) & (YoungChild(x) | VoluntaryRemunerations(x))) -> BelowAge(x,10))", "all x y.((Person(x) & YoungChild(x) & UnderTen(x)) | HasLotsOfContracts(x,y)) -> ActiveInitiatives(x))", "all x.((Person(x) & (BelowTheTen(x) | LotsOfCommitments(x))) -> YoungYoungChild(x))", "all x.((Person(x) & (BelowAge(x,10) | LotsOfContracts(x))) -> (EmpiresBelowTen(x) | VoluntaryAccounts(x)))", "all x.(People(x) -> ((YearChild(x,7) & UnderTen(x)) | ManyContradications(x))))", "all x.((Person(x) & (KidsBelowTen(x) | VoluntaryCommitments(x)))) -> ((YoungChild(x) | VoluntaryCommitments(x))))", "all x.(Person(x) -> ((YearChild(x) & BeforeEleven(x)) | VoluntarySigningUp(x))))", "all x.((Popular(x) & YoungChild(x) & BelowAge(x,10)) | SignedUpFor(x,20)))", "all x.(Person(x) -> (YoungChild(x) & UnderTenAge(x)) | LotsOfCommitments(x)))"]}
{"id": "folio_train_1720", "nl": "If people have a lot of commitments they voluntarily signed up for, then they are hardworking individuals with high ambitions and goals for the future.", "fol": "all x.(Committments(x) -> IsHardworking(x))", "prediction": ["all x.((SonuatedContract(x) & LotsOfContracts(x)) -> HardworkingIndividuals(x) & HighAmbiances(x) & HighGoalsForFuture(x))", "all x.((Person(x) & LotsOfCommonDeclarations(x)) -> HardworkingIndividual(x) & HighAmbitionsAndGoals(x))", "all x.((Person(x) & LotsOfDegrees(x) & VoluntarilySsignedUpFor(x)) -> HardworkingIndividual(x) & HighAmbitions(x) & HighGoalsForFuture(x))", "all x.((People(x) & LotsOfCommitments(x) & VoluntarySignupFor(x)) -> HardworkingIndividual(x) & HighAmbiances(x) & HighGoals(x))", "all x.((People(x) & LotsOfCommitments(x) & VoluntarilySsignedUpFor(x)) -> HardworkingIndividuals(x) & HighAmbitionsAndGoalsForFuture(x))", "all x.(VoluntarilySignedUpFor(x) -> HardworkingIndividual(x))", "all x.((Person(x) & LotsOfDeterminations(x) & VoluntarilySsignedUpFor(x)) -> HardworkingIndividual(x) & HighAmbiancesAndGoals(x))", "all x.((Person(x) & VoluntarilySignedUpFor(x)) -> HardworkingIndividual(x))", "all x.((Person(x) & LotsOfCommitments(x)) -> HardworkingIndividual(x) & HighAmbitionsAndGoals(x))", "all x.((Participant(x) & LotsOfCommitments(x) & VoluntarilySsignedUpFor(x)) -> HardworkingIndividual(x) & HighAmbitions(x) & HighGoalsForFuture(x))", "all x.((Person(x) & WofulCondications(x)) -> HardworkingIndividual(x) & HighAmbitionsAndGoal(x))", "all x.((People(x) & LotsOfCommitments(x) & VolunteouslySsignedUp(x)) -> HardWorkingIndividual(x) & HasHighAmbitionsAndGoals(x))", "all x y.((Person(x) & LotsOfContracts(y) & VoluntarySignupBefore(x,y)) -> HardworkingIndividual(x) & HighAmbitionsAndGoals(x))", "all x.((HasMillionsOfCommitments(x) & SignedUpFor(x)) -> HardworkingIndividual(x) & HighAmbitions(x) & HighGoalsForFuture(x))", "all x.((Person(x) & LotsOfCommitments(x) & VoluntarilySignedUpFor(x)) -> HardworkingIndividual(x) & HighAmbitionsAndGoals(x))", "all x.((Person(x) & ManyCommitments(x) & SignedUpFor(x)) -> HardworkingIndividual(x) & HasHighAmbitionsAndGoalsForFuture(x))"]}
{"id": "folio_train_1721", "nl": "If people are hardworking individuals with high ambitions and goals for the future, then they are not good at staying organized and motivated.", "fol": "all x.(IsHardworking(x) -> -IsOrganized(x))", "prediction": ["all x.((People(x) & HardworkingIndividual(x) & HasHighAmbitionsAndGoals(x)) -> -GoodAtStayingOrganizedAndMotivated(x))", "all x.((HardworkingIndividual(x) & HasHighAmbitions(x) & HasGoals(x)) -> -GoodAtStayingOrganizedAndMotivated(x))", "all x.((HardworkingIndividual(x) & HighAmbitions(x) & HighGoals(x)) -> -GoodAtStayingOrganizedAndMotivated(x))", "all x.((HardworkingIndividual(x) & HighAmbiances(x) & HighGoalsForFuture(x)) -> -GoodAtStayingOrganized(x) & Motivated(x))", "all x.((HardworkingIndividual(x) & HasHighAmbiances(x) & HasGoalsForFuture(x)) -> -GoodAtStayingOrganized(x) & -GoodAtStayingMotivated(x))", "all x.((HardworkingIndividual(x) & HighAmbitions(x) & HighGoals(x)) -> -(GoodAtStayingOrganized(x) & Motivated(x)))", "all x.((HardworkingIndividual(x) & HighAmbitionsAndGoals(x)) -> -GoodAtStayingOrganized(x) & Motivated(x))", "all x.(StayingOrganizedAndMotivated(x) -> (HardworkingIndividual(x) & HighAmbitionsAndGoalsForFuture(x)))", "all x.(HardworkingIndividual(x) -> (HighAmbitions(x) & HighGoals(x)))", "all x.((HardworkingIndividual(x) & HighAmbitions(x) & HighGoals(x)) -> -GoodAtStayingOrganizedAndMotivated(x))", "all x.((Hardworking(x) & HasHighAmbitions(x) & HasCargosForFuture(x)) -> -GoodStrategy(x) & Motivated(x))", "all x.((HardworkingIndividual(x) & HighAims(x) & GoalsForFuture(x)) -> -GoodAtStayingOrganizedAndMotivated(x))", "all x.((HardworkingIndividual(x) & HighAmbitions(x) & HighGoalsForFuture(x)) -> -GoodAtStayingOrganizedAndMotivated(x))", "all x.((HardworkingIndividual(x) & HighAmbiances(x) & HighGoals(x)) -> -GoodAtStayingOrganizedAndMotivated(x))", "all x.((Hutworking(x) & HighAmbitionsAndGoals(x)) -> -GoodAtStayingOrganizedAndMotivated(x))", "all x.(HardworkingIndividual(x) & HighAmbitionsAndGoalsForFuture(x)) -> -GoodAtStayingOrganizedAndMotivated(x))"]}
{"id": "folio_train_1722", "nl": "John either is both a hardworking individual with high ambitions and goals for the future and has busy morning schedules every day, or he is neither a hardworking individual with high ambitions and goals for the future nor does he have a busy morning schedule every day.", "fol": "((IsHardworking(John) & HasBusyMorningSchedule(John) & -(-IsHardworking(John) & -HasBusyMorningSchedule(John))) | (-(IsHardworking(John) & HasBusyMorningSchedule(John)) & -IsHardworking(John) & -HasBusyMorningSchedule(John)))", "prediction": ["(Exists(John) & HardworkingIndividual(John) & HighAmbitionsAndGoalsForFuture(John) & HasBusyMorningSchedules(John)) | (-HardworkingIndividual(John) & HighAmbitionsAndGoalsForFuture(John) & HasBusyMorningSchedulesEveryDay(John))))", "all x.((John(x) & HardworkingIndividual(x) & HighAmbitionsAndGoalsForFuture(x) & BusyMorningSchedulesEveryDay(x)) | (-HardworkingIndividvidual(x) & HighAmbitionsAndGoalsForFuture(x) & BusyMorningSchedulesEveryDay(x))))", "(HardworkingIndividual(John) & HighAmbitionsAndGoals(John) & BusyMorningSchedules(John)) | (-HardworkingIndividual(John) & HighAmbitionsAndGoals(John) & BusyMorningSchedulesEachDay(John)))", "all x y.((HardworkingIndividual(x) & HardworkingIndividual(x) & HighAmbitionsAndGoalsForFuture(x) & BusyMorningSchedules(x)) | (-HardworkingIndividual(y) & HighAmbitionsAndGoalsForFuture(y) & BusyMorningSchedules(y))))", "(or,the HardworkingIndividual(John) & HighAmbitionsAndGoals(John) & BusyMorningSchedulesEveryDay(John)) | ((JohnIsLessHardworkingIndividual(John) & HighAmbitionsAndGoals(John) & BusyMorningSchedulesEveryDay(John)) & -PoorHardworkingIndividual(John) & BusyMorningScheduleEveryDay(John)))", "all x y.((HardworkingIndividual(x) & HardworkingIndividual(y) & HighAmbitionsAndGoalsForFuture(x) & BusyMorningSchedules(x)) | (-HardworkingIndividual(y) & HighAmbitionsAndGoalsForFuture(y) & BusyMorningSchedules(y))))", "(HardworkingIndividual(John) & HighAmbitionsAndGoals(John) & BusyMorningSchedulesEveryDay(John)) | (-HardworkingIndividual(John) & HighAmbitionsAndGoals(John) & BusyMorningSchedulesEveryDay(John))))", "(all x.(John(x) -> (HardworkingIndividual(x) & HighAmbitionsAndGoals(x) & BusyMondaySchedules(x))) | (-HardworkingIndividual(x) & HighAmbitionsAndGoals(x) & BusyMondaySchedules(x)))))", "(exists x.(HardworkingIndividual(x) & HighAmbitionsAndGoalsForFuture(x) & BusyFr\u00fchmarchSchedules(x)) | -(HardworkingIndividual(x) & HighAmbitionsAndGoalsForFuture(x) & BusyMorningSchedulesEveryDay(x)) | -(HardworkingIndividual(x) & HighAmbiancesAndGoalsForFuture(x) & BusyMorningSchedulesEveryDay(x))))", "((HardworkingIndividual(John) & HighAmbitionsAndGoals(John)) | (-HardworkingIndividual(John) & HighAmbitionsAndGoals(John)) | (-HardworkingIndividual(John) & HighAmbitionsAndGoals(John)))))", "all x.((John(x) & HardworkingIndividual(x) & HighAmbiancesAndGoals(x) & BusyMorningSchedulesEveryDay(x)) | (HeadworkingIndividual(x) & HighAmbiancesAndGoals(x) & -BusyMorningSchedule(x))))", "(Hardworking(John) & HighAmbitionsAndGoals(John) & BusyMorningSchedules(John)) | (-Hardworking(John) & HighAmbitionsAndGoals(John) & BusyMorningSchedules(John))))", "all x.(John(x) -> ((Hardworking(x) & HighAmbitionsAndGoals(x) & BusyMorningSchedulesEveryDay(x)) | (-Hardworking(x) & HighAmbitionsAndGoals(x) & BusyMorningSchedulesEveryDay(x)) | (-Hardworking(x) & HighAmbitionsAndGoals(x) & BusyMorningScheduleEveryDay(x))))", "all x y.((John(x) & Hardworking(x) & HighAmbitionsAndGoalsForFuture(x) & BusyMorningSchedules(x)) | (-Hardworking(y) & HighAmbitionsAndGoalsForFuture(y) & BusyMorningSchedules(y))))", "((HardworkingIndividual(John) & HighAmbitionsAndGoals(John)) | (-HardworkingIndividual(John) & HighAmbitionsAndGoals(John))) | (-HardworkingIndividual(John) & HighAmbitionsAndGoals(John) & BusyMorningSchedulesEveryDay(John))))", "(-(HardworkingIndividual(john) & HighAmbitionsAndGoals(john) & BusyMorningSchedules(john)) | (-HardworkingIndividual(john) & HighAmbitionsAndGoals(john) & BusyMorningSchedulesEveryDay(john))))"]}
{"id": "folio_train_1723", "nl": "John is good at staying organized and motivated.", "fol": "IsOrganized(John)", "prediction": ["(GoodAtOrganizing(John) & Motivated(John))", "(GoodOrganized(John) & Motivated(John))", "is good at stayingorganized(John) & Motivational(John))", "(GoodOrganized(John) & Motivated(John))", "(GoodOrganized(John) & Motivated(John))", "(GoodOrganizes(John) & Motivated(John))", "John is good at stayingorganized and motivated.", "(GoodAtOrganizing(John) & Motivated(John))", "(GoodAtOrganizing(John) & Motivated(John))", "all x.(John(x) -> (GoodAtStayingOrganized(x) & Motivated(x)))", "all x.(John(x) -> (GoodAtOrganizing(x) & Motivated(x)))", "(GoodOrganization(John) & Motivated(John))", "John is good at stayingorganized and motivated.", ". (GoodAtStayingOrganized(John) & Motivated(John))", "(GoodOrganization(John) & Motivated(John))", "all x.((John(x) & Organized(x) & Motivated(x)) -> Good(x))"]}
{"id": "folio_train_1724", "nl": "John eats cereal and milk every day for breakfast.", "fol": "EatsCerealAndMilk(John)", "prediction": ["(Freshy(John) & Breakfast(John))", "(EatsCereal(John) & EatsMilk(John))", "all x.((John(x) & EatsCereal(x) & EatsMilk(x)) -> Breakfast(x))", "all x.(John(x) -> Eats(x,celia,milk) & Breakfast(Cereal) & Breakfast(Milk))", "(Eats(John,Cereal,Milk,Breakfast))", "(EatsCereal(John) & EatsMilk(John))", "all x.((John(x) & EatsCereal(x) & EatsMilkEveryDay(x)) -> Breakfast(x))", "(EatsExercise(John,Cereal,Milk) & Breakfast(John,Breakfast))", "((Eats(John,Cereal) & Eats(John,Milk)) -> Breakfast(John))", "everyday(John) -> EatsCerealAndMilk(John))", "-EatsCerealAndMilk(John,Beverage)", "John eats(John,Cereal,Milk) & Breakfast(John))", "(EatsCereal(John) & EatsMilk(John))", "(Eats(John,Cereal) & Eats(John,Milk))", "all x.(John(x) -> EatsCerealAndMilkForBreakfast(x))", "all x.((John(x) & EatsCereal(x) & EatsMilk(x)) -> Breakfast(x))"]}
{"id": "folio_train_1725", "nl": "John is either a hardworking individual with high ambitions and goals for the future or is good at staying organized and motivated.", "fol": "(IsHardworking(John) | IsOrganized(John))", "prediction": ["all x.(John(x) -> ((HardworkingIndividual(x) & HighAmbitions(x) & HighGoals(x)) | GoodAtStayingOrganized(x) & Motivated(x))))", "(HardworkingIndividual(John) & (HighAmbitions(John) | GoodAtStayingOrganized(John)) & Motivated(John))", "all x.(John(x) -> (HardworkingIndividual(x) & (Hi-Habits(x) | GoalsForFuture(x)) & (GoodAtStayingOrganized(x) & Motivated(x))))", "all x.(John(x) -> ((HardworkingIndividual(x) & HighAmbitions(x) & GoalsForFuture(x)) | -GoodAtStayingOrganized(x) & Motivated(x))))", "(HardworkingIndividual(John) & (HighAmbitions(John) & GoalsForFuture(John)) | GoodAtStayingOrganized(John) & Motivated(John)))", "(HardworkingIndividual(John) & HighAmbitionsAndGoals(John)) | GoodAtStayingOrganizedAndMotivated(John))", "all x.(John(x) -> (HardworkingIndividual(x) & (HighAmbitions(x) & SetsFutureGoals(x) | GoodAtStayingOrganized(x) & Motivated(x))))", "all x.(John(x) -> (HardworkingIndividual(x) & (HighAmbitions(x) & HighGoals(x)) | WellOrganized(x) & Motivated(x))))", "(HardworkingIndividual(John) & (HighAmbitions(John) & HighGoals(John)) | (GoodAtStayingOrganized(John) & Motivated(John))))", "all x.(John(x) -> (HardworkingIndividual(x) & (HighAmbitions(x) | HighGoals(x))) | (GoodAtStayingOrganized(x) & Motivated(x))))", "all x.(John(x) -> (HardworkingIndividual(x) & (HasHighAims(x) | HasHorizontalGoals(x))) | (WellOrganized(x) & Motivated(x))))", "all x.(John(x) -> ((Hardworking(x) & HasHighAmbitions(x) & HasHighGoals(x)) | (GoodAtStayingOrganized(x) & Motivated(x))))", "(HardworkingIndividual(John) & HighAmbitions(John) & HasGoalsForFuture(John)) | (GoodAtStayingOrganized(John) & Motivated(John))))", "all x.(John(x) -> (HardworkingIndividual(x) & (HighAmbitions(x) | HighGoals(x))) | (GoodAtStayingOrganized(x) & Motivated(x))))", "all x.(John(x) -> (HonestWorkingIndividual(x) & (HighAmbitions(x) | -HighGoals(x)) & GreatAtStayingOrganized(x) & Motivated(x)))", "(HardworkingIndividualWithHighAmbitionsAndGoals(John) | GoodAtStayingOrganizedAndMotivated(John))"]}
{"id": "folio_train_1726", "nl": "Ableton has an office in Germany.", "fol": "HasOfficeIn(Ableton,Germany)", "prediction": ["has office in Germany.", "(Berliner(Ableton) -> HasOfficeInDeutschland(Ableton))", "Das B\u00fcro von Ableton (Ableton) & WorksInGermany(Ableton))", "Ableton exists x.(Audio(x) & OperatesIn(x,Germany))", "Ableton appoints office in Germany.", "Ableton has office in Germany.", "Ableton is based in Germany.", "Ableton exists x.(Office(x) & In(x,Deutschland))", "all x.exists y.(Ableton(x) & Office(y) & In(x,y))", "(exists x.(Ableton(x) & Office(x,Germany)))", "(Germanoleum(Ableton) & Office(Ableton))", "Ableton exists x y.((Ableton(x) & Office(y) & LocatedIn(x,y)))", "Ableton exists x.(Office(x) & InDemocracy(x))", "All x.(Ableton(x) -> HasOffice(x,Germany))", "Ableton has office in Germany.", "Ableton has an office in Germany."]}
{"id": "folio_train_1727", "nl": "Ableton has an office in the USA.", "fol": "HasOfficeIn(Ableton,Usa)", "prediction": ["all x.(Ableton(x) -> HasOfficeInUSA(x))", "all x.(Ableton(x) -> HasOfficeInUSA(x))", "Aleton havete OfficeInUSA.", "Ableton has an office in USA.", "Ableton exists in USA.", "Ableton has an office in the USA.", "-exists x.(Ableton(x) & OfficeInUSA(x))", "Ableton exists en america.", "all x y.((Ableton(x) & USAOffice(y)) -> exists z.(Ableton(z) & Has(x,z))))", "Ableton has offices in USA.", "all x y.((Ableton(x) & USAOpportunity(y)) -> HasOffice(x,y))", "Ableton has offices in USA.", "(USAOffice(Ableton) & HasOffice(Ableton))", "(OfficeIn(Ableton,USA))", "Ableton has an office in the USA.", "exists x.(Ableton(x) & HasOfficeInUSA(x))"]}
{"id": "folio_train_1728", "nl": "USA and Germany are different countries.", "fol": "-DifferentCountries(Germany,Usa)", "prediction": ["(Citizen(USA) & Country(DEM))", "(SameCountry(USA,USA) & SameCountry(Germany))", "all x).((USA(x) | Germany(x)) -> DifferentCountries(x))", "(SameCountry(USA) & SameCountry(Germany))", "(SideCountry(USA) & SideCountry(Germany))", "(DifferentCountries(USA,DB) | DifferentCountries(Germany,DB))", "all x.((USA(x) & Germany(x)) -> DifferentCountries(x))", "((USA(USA) | Germany(Germany)))", "(Althought(USA) & Believed(Germany))", "(ProvidesNAME(USA,USA) & ProducesUnique(Germany,USA))", "(DifferentCountries(USA & DifferentCountries(Deutschland))", "(differentCountries(USA) | DifferentCountries(Germany))", "(AreUSA(a) & AreGermany(b))", "all x y.((New(x) & Germany(y)) -> AreDifferentCountries(x,y))", "(By(USA) & In(Deutschland))", "(Land(USA)  Land(Germany))"]}
{"id": "folio_train_1729", "nl": "Any company that has offices in different countries is a multinational company.", "fol": "all z.((HasOfficeIn(x,y) & HasOfficeIn(x,z) & -DifferentCountries(y,z)) -> IsMultinational(x))", "prediction": ["all x.((Company(x) & HasOfficesInDifferentCountries(x)) -> MultinationalCompany(x))", "all x.((Company(x) & HasOfficesInDifferentCountries(x)) -> MultinationalCompany(x))", "all x.((Company(x) & OfficesInDifferentCountries(x)) -> MultinationalCompany(x))", "all x.((Company(x) & HasOfficesInDifferentCountries(x)) -> MultinationalCompany(x))", "all x.((Company(x) & OfficesInDoubleCountries(x)) -> MultinationalCompany(x))", "all x.((Company(x) & HasOpportunitiesInDifferentCountries(x)) -> MultinationalCompany(x))", "all x.((Company(x) & ObservesDependentCountries(x)) -> MultinationalCompany(x))", "all x.((Company(x) & LocalOfOffice(x,y,z) & HasOffice(x,z)) -> MultinationalCompany(x))", "all x.((Company(x) & HasOtherOfficesInDifferentCountries(x)) -> MultinationalCompany(x))", "all x.((Company(x) & HasOfficesInDomesticCountries(x)) -> MultinationalCompany(x))", "all x.((Company(x) & HaveOfficesInDifferentCountries(x)) -> MultinationalCompany(x))", "all x.((Company(x) & OfficesInDifferentCountries(x)) -> MultinationalCompany(x))", "all x.((Company(x) & OfficesInDifferentCountries(x)) -> MultinationalCompany(x))", "all x.((Company(x) & OfficesInDifferentCountries(x)) -> MultinationalCompany(x))", "all x.((Company(x) & HasOfficesInDifferentCountries(x)) -> MultinationalCompany(x))", "all x.((Company(x) & HasOfficesInDifferentCountries(x)) -> MultinationalCompany(x))"]}
{"id": "folio_train_1730", "nl": "Ableton makes music software.", "fol": "ProducesMusicSoftware(Ableton)", "prediction": ["all x.(Ableton(x) -> MakesMusicSoftware(x))", "Ableton makes musicSoftware(Ableton)", "all x.(Ableton(x) -> MakesMusicSoftware(x))", "all x.(Ableton(x) -> MakesMusicSoftware(x))", "all x y.((Ableton(x) & MusicSoftware(y)) -> Makes(x,y))", "all x.exists y.(Ableton(x) & MusicSoftware(y) & MadeBy(x,y))", "all x y z.((Ableton(x) & MusicSoftware(y) & Software(z)) -> Makes(x,y,z))", "all x.(Ableton(x) -> MakesMusicSoftware(x))", "all x.(Ableton(x) -> MakesMusicSoftware(x))", "all x.(Ableton(x) -> MakesMusicSoftware(x))", "all x.(Ableton(x) -> MakesMusicSoftware(x))", "all x.(Ableton(x) -> MakesMusicSoftware(x))", "all x.(Ableton(x) -> MakesMusicSoftware(x))", "all x.(Ableton(x) -> exists y.(MusicSoftware(y) & Makes(x,y))))", "Ableton makes MusicSoftware(Ableton)", "all x.(Ableton(x) -> MakesMusicSoftware(x))"]}
{"id": "folio_train_1731", "nl": "Ableton is a multinational company.", "fol": "IsMultinational(Ableton)", "prediction": ["all x.(Ableton(x) -> MultinationalCompany(x))", "all x.(Ableton(x) -> MultinationalCompany(x))", "(MultinationalCompany(Ableton) & HasMillionaire(Ableton))", "all x.(Ableton(x) -> MultinationalCompany(x))", "all x.(Ableton(x) -> MultinationalCompany(x))", "is a MultinationalCompany(Ableton)", "Ableton is a multinational company.", "(MultinationalCompany(Ableton))", "(MultinationalCompany(Ableton) & FoundedIn(Ableton,1996))", "Ableton is a multinational company.", "est affiliate o.(Ableton(c) & MultinationalCompany(c))", "(MillionaireCompany(Ableton) & Multinational(Ableton))", "Sie ist multinationalCompany(Ableton)", "all x.(Ableton(x) -> MultinationalCompany(x))", "Ableton has a multi-national company.", "(MultinationalCompany(Ableton) & FoundedIn1988(Ableton))"]}
{"id": "folio_train_1732", "nl": "Ableton makes AI software.", "fol": "MakesAIsoftware(Ableton)", "prediction": ["all x y.((Ableton(x) & AISoftware(y)) -> Making(x,y))", "all x.(Ableton(x) -> MakesAISoftware(x))", "all x.(Ableton(x) -> MakesAISoftware(x))", "all x.(Ableton(x) -> MakesAISoftware(x))", "all x.(Ableton(x) -> MakesAISoftware(x))", "Ableton makes AISoftware.", "all x.(Ableton(x) -> MakesAISoftware(x))", "all x y.((Ableton(x) & AISoftware(y)) -> Makes(x,y))", "HasAlfa(Ableton) -> MakesAISoftware(Ableton))", "all x.(Ableton(x) -> MakesAISoftware(x))", "all x.(Ableton(x) -> MakesAISoftware(x))", "All x.(Ableton(x) -> MakesAISoftware(x))", "Ableton MakesAISoftware(Ableton,ABC)", "All x.(Altoon(x) -> MakesAISoftware(x))", "All x.(Ableton(x) -> MakesAISoftware(x))", "all x y.((Ableton(x) & AISoftware(y)) -> Makes(x,y,z))"]}
{"id": "folio_train_1733", "nl": "Ableton does not have an office in Germany.", "fol": "-HasOfficeIn(Ableton,Germany)", "prediction": ["Ableton -exists x.(Bureau(x) & HasOffice(x,Germany))", "Ableton -HasOfficeInGermany(Ableton)", "(Extensions(Ableton) & -OfficeInGermany(Ableton))", "Ableton - exists en Allemagne.", "Ableton -exists x.(GermanOffice(x) & HasOffice(x,Germany))", "ALBOT(a) -HasOfficeInGermany(a))", "Ableton - HasOfficeInGermany(e).", "Ableton has no office in Germany.", "HasOfficeInGermany(Ableton)", "Ableton - HasOfficeInGermany(abbony.c.v.(ABony(c) & BasedInGermany(x)))", "Ableton -HasOffice(a,Germany))", "Ableton -HasOfficeInGermany(Ableton,Germany)", "Das B\u00fcro ist im Ausland nicht verf\u00fcgbar.", "Ableton - exists en Deutsch.", "Ableton has no office in Germany.", "Ableton has no office in Germany."]}
{"id": "folio_train_1734", "nl": "Every swimmer can go underwater.", "fol": "all x.(IsSwimmer(x) -> CanGoUnderwater(x))", "prediction": ["all x.(Swimmer(x) -> CanGoUnderwater(x))", "all x.(Swimmer(x) -> CanGoUnderwater(x))", "all x.(Swimmer(x) -> CanGoUnderwater(x))", "all x.(Swimmer(x) -> GoUnderwater(x))", "all x.(Swimmer(x) -> CanGoUnderwater(x))", "all x.(Swimmer(x) -> CanGoUnderwater(x))", "-exists x.(Swimmer(x) & CanGoUnderwater(x))", "all x.(Swimmer(x) -> CanGoUnderwater(x))", "all x.(Swimmer(x) -> CanGoUnderwater(x))", "all x.(Swimmer(x) -> CanGoUnderwater(x))", "all x.(Swimmer(x) -> CanGoUnderwater(x))", "all x.(Swimmer(x) -> CanGoUnderwater(x))", "all x.(Swimmer(x) -> CanGoUnderwater(x))", "all x.(Swimmer(x) -> CanGoUnderwater(x))", "all x.(Swimmer(x) -> CanGoUnderwater(x))", "all x.(Swimmer(x) -> CanGoUnderwater(x))"]}
{"id": "folio_train_1735", "nl": "Everyone that eats fish they catch themselves is a swimmer.", "fol": "all x.(CatchesAndEatsFish(x) -> IsSwimmer(x))", "prediction": ["all x.((EatsFish(x) & Catches(x)) -> Swimmer(x))", "all x.((EatsFish(x) & CatchesFish(x)) -> Swimmer(x))", "all x.((EatsFishes(x) & CatchesFish(x)) -> Swimmer(x))", "all x.((EatsFish(x) & CatchEmployee(x)) -> Swimmer(x))", "all x.((EatsFish(x) & CatchEmployees(x)) -> Swimmer(x))", "all x.((EatsFish(x) & CatchesFish(x)) -> Swimmer(x))", "all x.((EatsFish(x) & CatchesFish(x)) -> Swimmer(x))", "all x.((EatsFish(x) & CatchesOfself(x)) -> Swimmer(x))", "all x.((EatsFish(x) & Fishes(x) & CatchesOfself(x)) -> Swimmer(x))", "all x.((EatsFish(x) & CatchesFishInItself(x)) -> Swimmer(x))", "all x.((EatsFish(x) & CatchesFish(x)) -> Swimmer(x))", "all x.((EatsFish(x) & CatchesFish(x)) -> Swimmer(x))", "all x.((EatsFish(x) & CatchesFish(x)) -> Swimmer(x))", "all x.((EatsFish(x) & CatchesFish(x)) -> Swimmer(x))", "all x.(((EatsFish(x) & CatchesFish(x)) -> Swimmer(x))", "all x.((EatsFish(x) & CatchesFish(x)) -> Swimmer(x))"]}
{"id": "folio_train_1736", "nl": "Every penguin eats fish they catch themselves.", "fol": "all x.(IsPenguin(x) -> CatchesAndEatsFish(x))", "prediction": ["all x.(Penguin(x) -> (EatsFish(x) & Catches(x)))", "all x y.((Penguin(x) & Fish(y)) -> Eats(x,y))", "all x.(Penguin(x) -> (EatsFish(x) & Catches(x)))", "all x.(Penguin(x) -> CaughtFish(x))", "all x.(Penguin(x) -> (EatsFish(x) & Catches(x)))", "all x.(Penguin(x) -> (EatsFish(x,y) & Catchesself(y)))", "all x.(Penguin(x) -> (EatsFish(x) & CatchesFish(x)))", "all x.(Penguin(x) -> EatsFish(x))", "all x.(Penguin(x) -> (EatsFish(x) & CatchesOthers(x)))", "all x.(Penguin(x) -> EatsFish(x))", "all x.(Penguin(x) -> (EatsFish(x) & CatchesEm(x)))", "all x.(Penguin(x) -> (EatsFish(x) & CatchesFish(x)))", "all x.(Penguin(x) -> (EatsFish(x) & Catches(x)))", "all x.(Penguin(x) -> (EatsFish(x) & Fish(x) & CatchThemself(x)))", "all x.(Penguin(x) -> EatsFish(x))", "all x.(Penguin(x) -> EatsFish(x))"]}
{"id": "folio_train_1737", "nl": "All nonflying birds in Antarctica are penguins.", "fol": "all x.(IsNonFlyingBirdInAntarctica(x) -> IsPenguin(x))", "prediction": ["all x y.((Bird(x) & Windsurfer(y) & Penguin(y)) -> NonFlyingInAntarctica(x,y))", "all x.(NonFlyingBird(x) -> Penguin(x))", "all x.((NonflyingBird(x) & Antarctica(x)) -> Penguin(x))", "all x.((Bird(x) & NonFlying(x) & InAntarctica(x)) -> Penguin(x))", "all x.((Bird(x) & NonFlying(x) & InAntarctica(x)) -> Penguin(x))", "all x.((NonFlyingBird(x) & Antarctica(x)) -> Penguin(x))", "all x.((NonFlyingBird(x) & Antarctica(x)) -> Penguin(x))", "all x.(Bird(x) & NonFlying(x) & InAntarctica(x)) -> Penguin(x))", "all x.(NonFlyingBird(x) -> Penguin(x))", "all x.(SonyFlyingBird(x) -> Penguin(x))", "all x.((NonFlyingBird(x) & InAntarctica(x)) -> Penguin(x))", "all x.((Bird(x) & NonFlying(x)) -> Penguin(x))", "all x.((Bird(x) & NonFlying(x) & Antarctica(x)) -> Penguin(x))", "all x.(NonflyingBird(x) -> Penguin(x))", "all x.((Bird(x) & NonFlying(x) & InAntarctica(x)) -> Penguin(x))", "all x.((NonflyingBird(x) & InAntarctica(x)) -> Penguin(x))"]}
{"id": "folio_train_1738", "nl": "Fido is a penguin or a swimmer.", "fol": "(IsPenguin(Fido) | IsSwimmer(Fido))", "prediction": ["exists x.(Fido(x) & (Penguin(x) | Swimmer(x)))", "all x.(Fido(x) -> (Penguin(x) | Swimmer(x)))", "all x.(Fido(x) -> (Penguin(x) | Swimmer(x)))", "all x.(Fido(x) -> (Penguin(x) | Swimmer(x)))", "(Penguin(Fido) | Swimmer(Fido))", "all x.(Fido(x) -> (Penguin(x) | Swimmer(x)))", "all x.(Fido(x) -> (Penguin(x) | Swimmer(x)))", "(Penguin(Fido) | Swimmer(Fido))", "(Penguin(Fido) | Swimmer(Fido))", "all x.(Fido(x) -> (Penguin(x) | Swimmer(x)))", "(Penguin(Fido) | Swimmer(Fido))", "(Penguin(Fido) | Swimmer(Fido))", "all x.(Fido(x) -> (Penguin(x) | Swimmer(x)))", "(Penguin(Fido) | Swimmer(Fido))", "all x.(Fido(x) -> (Penguin(x) | Swimmer(x)))", "all x.(Fido(x) -> ((Penguin(x) | Swimmer(x))))"]}
{"id": "folio_train_1739", "nl": "Fido eats fish they catch themselves.", "fol": "CatchesAndEatsFish(Fido)", "prediction": ["all x y.((Fido(x) & Fish(y)) -> Eats(x,y))", "all x.((Fido(x) & Fish(x) & Catch(x)) -> Eats(x,Fido))", "all x.(Fido(x) -> EatsFish(x))", "all x.((Fido(x) & Fish(y)) -> (Eats(x,y) | Catches(x,y)))", "all x y.((Fido(x) & Fish(y)) -> Eats(x,y))", "all x.(Fido(x) -> EatsFish(x))", "all x.(Fido(x) -> (EatsFish(x) & Catch(x)))", "all x.(Fido(x) -> exists y.(Fish(y) & Eats(x,y)))", "all x y.((Fido(x) & Fish(y)) -> Eats(x,y))", "All x.(Fido(x) -> EatsFish(x))", "all x y.((Fido) & Fish(y)) -> (Eats(x,y) & Catches(x,y)))", "(EatsFish(Fido) & CatchSelf(Fido))", "all x y.((Duck(x) & Fish(y)) -> Eats(x,y))", "all x y z.((Fido(x) & Fish(y) & Fish(z)) -> Eats(x,y,z))", "all x.(Fido(x) -> (Eats(x,fish) & Catch(x)))", "all x.(Fido(x) -> ItEatsFish(x))"]}
{"id": "folio_train_1740", "nl": "Fido is neither a non-flying bird nor can Fido go underwater.", "fol": "(-NonFlyingBird(Fido) & -CanGoUnderwater(Fido))", "prediction": ["-(NonFlyingBird(Fido) & -CanGoUnderwater(Fido))", "-(NonFlyingBird(Fido) & -CanGoUnderwater(Fido))", "(-FlyingBird(Fido) & -UnderwaterBird(Fido))", "(-Flying(Fido) & -Underwater(Fido)))", "all x.((Bird(x) & -DoesNonFlying(x)) & -GoesUnderwater(x)) -> Fido(x))", "(-FlyingBird(Fido) & -UnderwaterBird(Fido))", "-(NonFlyingBird(ficido) & -CanGoUnderwater(ficido))", "(-FlyingBird(Fido) & -UnderwaterBird(Fido))", "IsFlying(Fido) & -(CanGrowUnderwater(Fido) | -CanGrowUnderwater(Fido)))", "(-FlyingBird(Fido) & -Underwater(Fido))", "(-FlyingBird(Fido) & -UnderwaterBird(Fido))", "(-flyingBird(Fido) & -UnderwaterBird(Fido))", "(-(NonFlyingBird(Fido) | CanGoUnderwater(Fido)))", "(Fido(Fido) -> -FlyingBird(Fido)) & -NonFloatingBird(Fido) & -CanGoUnderwater(Fido))", "all x.(Fido(x) -> (-NonFlyingBird(x) & -CanGoUnderwater(x)))", "Fido isn'tNonFlyingBird(Fido) & -UnderwaterBird(Fido))"]}
{"id": "folio_train_1741", "nl": "If Fido can either go underwater or is a swimmer, then Fido is a nonflying bird in Antartica.", "fol": "((CanGoUnderwater(Fido) | IsSwimmer(Fido)) -> NonFlyingBirdAntarctica(Fido))", "prediction": ["all x.((Fido(x) & (GoUnderwater(x) | Swimmer(x))) -> NonFlyingBird(x))", "all x.((Bird(x) & CanGoUnderwater(x)) | CanSwimmer(x)) -> NonFlying(x))", "all x.((Fido(x) & (GoUnderwater(x) | Swimmer(x))) -> NonFlyingBird(x))", "all x.((Fido(x) & (GosUnderwater(x) | Swimmer(x))) -> InAntartica(x))", "all x.(NonFlyingBird(x) -> (GoesUnderwater(x) | Swimmer(x)))", "all x.((Fido(x) & (GoesUnderwater(x) | Swimmer(x))) -> NonFlyingBird(x))", "all x.((Fido(x) & (GoesUnderwater(x) | Swimmer(x))) -> NonFlyingBird(x))", "all x.((Fido(x) & GoesUnderwater(x) | Swimmer(x)) -> NonFlyingBirdInAntartica(x))", "all x.((Bird(x) & (GoesUnderwater(x) | Swimmer(x))) -> NonFlying(x))", "all x.((Bird(x) & (GoesUnderwater(x) | Swimmer(x))) -> NonFlyingInAntartica(x))", "all x.((Bird(x) & (Gounderwater(x) | Swimmer(x))) -> Non Flying(x))", "all x.((Fido(x) & (Gounderwater(x) | Swimmer(x))) -> NonflyingBird(x))", "all x.((Bird(x) & (CanGoUnderwater(x) | CanSwimmer(x))) -> NonFlyingInAntartica(x))", "all x.((Fido(x) & (GoesUnderwater(x) | Swimmers(x))) -> NonflyingBird(x))", "all x.((Bird(x) & (GoesUnderwater(x) | Swimmer(x))) -> NonFlyingInAntartica(x))", "all x.((Bird(x) & Streamer(x)) -> InAntartica(x))"]}
{"id": "folio_train_1742", "nl": "All professors are teachers.", "fol": "all x.(IsProfessor(x) -> IsTeacher(x))", "prediction": ["all x.(Professor(x) -> Teacher(x))", "all x.(Professor(x) -> Teacher(x))", "all x.(Professor(x) -> Teacher(x))", "all x.(Professor(x) -> Teacher(x))", "all x.(Professor(x) -> Teacher(x))", "all x.(Professor(x) -> Teacher(x))", "all x.(Professor(x) -> Teacher(x))", "all x.(Professor(x) -> Teacher(x))", "all x.(Professor(x) -> Teacher(x))", "all x.(Professor(x) -> Teacher(x))", "all x.(Professor(x) -> Teacher(x))", "all x.(Professor(x) -> Teacher(x))", "all x.(Professor(x) -> Teacher(x))", "all x.(Professor(x) -> Teacher(x))", "all x.(Professor(x) -> Teacher(x))", "all x.(Professor(x) -> Teacher(x))"]}
{"id": "folio_train_1743", "nl": "All researchers are professors.", "fol": "all x.(IsResearcher(x) -> IsProfessor(x))", "prediction": ["all x.(Researcher(x) -> Professor(x))", "all x.(Researcher(x) -> Professor(x))", "all x.(Researcher(x) -> Professor(x))", "all x.(Researcher(x) -> Professor(x))", "all x.(Researcher(x) -> Professor(x))", "all x.(Researcher(x) -> Professor(x))", "all x.(Researcher(x) -> Professor(x))", "all x.(Researcher(x) -> Professor(x))", "all x.(Researcher(x) -> Professor(x))", "all x.(Researcher(x) -> Professor(x))", "all x.(Researcher(x) -> Professor(x))", "all x.(Researcher(x) -> Professor(x))", "all x.(Researcher(x) -> Professor(x))", "all x.(Researcher(x) -> Professor(x))", "all x.(Researcher(x) -> Professor(x))", "all x.(Researcher(x) -> Professor(x))"]}
{"id": "folio_train_1744", "nl": "No teachers are students.", "fol": "all x.(IsTeacher(x) -> -IsStudent(x))", "prediction": ["-exists x.(Teacher(x) & Student(x))", "(exists x.(Teacher(x) & -Student(x)))", "-exists x.(Teacher(x) & Student(x))", "is.(Teacher(x) & -Student(x))", "Currently, there is no teacher(teacher)", "-exists x.(Teacher(x) & Student(x))", "all x.(Teacher(x) -> -Student(x))", "-exists x.(Teacher(x) & Student(x))", "all x.(Teacher(x) -> -Student(x))", "-exists x.(Teacher(x) & Student(x))", "-exists x.(Teacher(x) & Student(x))", "-exists x.(Teacher(x) y.(Student(y) & Teacher(x)))", "isPro.(Teacher(x) -> -Student(x))", "-exists x.(Teacher(x) & Student(x))", "-exists x.(Teacher(x) & Student(x))", "-exists x.(Teacher(x) & Student(x))"]}
{"id": "folio_train_1745", "nl": "All people who study are students.", "fol": "all x.(IsStudying(x) -> IsStudent(x))", "prediction": ["all x.(Student(x) -> Student(x))", "all x.(Student(x) -> Student(x))", "all x.(Student(x) -> Student(x))", "all x.(Student(x) -> Student(x))", "all x.(Student(x) -> Student(x))", "all x.(Student(x) -> Student(x))", "all x.(Studies(x) -> Student(x))", "all x.(Student(x) -> Student(x))", "all x.(Student(x) -> Student(x))", "all x.(Student(x) -> Student(x))", "all x.(Studies(x) -> Student(x))", "all x.(Student(x) -> Student(x))", "all x.(Student(x) -> Student(x))", "all x.(Student(x) -> Students(x))", "all x.(Student(x) -> Student(x))", "all x.(Student(x) -> Student(x))"]}
{"id": "folio_train_1746", "nl": "Leon is not studying or a researcher.", "fol": "((-IsStudying(Leon) & -IsResearcher(Leon)) | (IsStudying(Leon) & IsResearcher(Leon)))", "prediction": ["(-Studying(Leon) | Researcher(Leon))", "(-Student(Lene) & -Researcher(Leon))", "Leon is notStudyingOrResearcher(Leon)", "all x.((Leon(x) & -Student(x) & -Researcher(x)) -> -Studies(x))", "Leon -Student(Leon) & -Researcher(Leon))", "(-Student(Leon) & -Researcher(Leon))", "Leon is notStudyingOrResearcher(Leon)", "Leon has no studies or researcher(Leon)", "Leon -StudiesOrResearcher(Leon)", "(NoStudy(Leon) & -Researcher(Leon))", "Leon is notStudyingOrResearcher(Leon)", "(-Study(Leon) | Researcher(Leon))", "Leon -(Studying(leon) | Researcher(leon)))", "all x.(Leon(x) -> (-Studying(x) | Researcher(x)))", "(Laone(Leon) & -Studying(Leon) & -Researcher(Leon))", "(-Study(Leon) | Researcher(Leon))"]}
{"id": "folio_train_1747", "nl": "If Leon is not studying, then Leon is a teacher.", "fol": "(-IsStudying(Leon) -> IsTeacher(Leon))", "prediction": ["all x.((Leon(x) & -Studying(x)) -> Teacher(x))", "all x.(Learning(x) -> Teacher(x))", "all x.((Leno(x) & -Studying(x)) -> Teacher(x))", "all x.((Leon(x) & -Studying(x)) -> Teacher(x))", "all x.((Leon(x) & -Studying(x)) -> Teacher(x))", "all x.((Leon(x) & -Studying(x)) -> Teacher(x))", "all x.((Leon(x) & -Studying(x)) -> Teacher(x))", "all x.((Leno(x) & -Studying(x)) -> Teacher(x))", "all x.((Leon(x) & -Studying(x)) -> Teacher(x))", "all x.((Leon(x) & -Studying(x)) -> Teacher(x))", "exists x.(Leon(x) & -Studying(x))", "all x.((Leon(x) & -Studying(x)) -> Teacher(x))", "all x.((Leon(x) & -Studing(x)) -> Teacher(x))", "all x.((Leon(x) & -Studying(x)) -> Teacher(x))", "all x.((Leon(x) & -Studying(x)) -> Teacher(x))", "all x.((Leon(x) & -Studying(x)) -> Teacher(x))"]}
{"id": "folio_train_1748", "nl": "Leon is a professor.", "fol": "IsProfessor(Leon)", "prediction": ["(Professor(Len) & -Professor(Len))", "ProfessorLeon & Researcher(Leon,D.A.M. & Professor(Leon,D.A.))", "Leo is a Professor.", "Leon is a professor.", "Leo is professor.", "all x.(Professor(x) -> Leon.", "Leon is Professor.", "is a Professor.", "(Professor(Leon)", "Leon is Professor.", "(Professor(Leon)", "(Professor(Leon))", "Leon is Professor.", "Leon is Professor.", "Le\u00f3n is a professor.", "Les isProfessor(Leon)"]}
{"id": "folio_train_1749", "nl": "Leon is neither a student nor a researcher.", "fol": "(-IsStudent(Leon) & -IsResearcher(Leon))", "prediction": ["(-Student(Leon) & -Researcher(Leon))", "all x.(Leon(x) -> (-Student(x) & -Researcher(x)))", "has zeroseeds(Leon)", "Leon -(Student(Leon) | Researcher(Leon))", "(L\u00e9on(Leon) -> -Student(L\u00e9on) & -Researcher(L\u00e9on))", "(-Student(Leon) & -Researcher(Leon))", "-(Student(Leon) | Researcher(Leon))", "Leon ne is ni Student,niResearcher.", "(-Student(Leon) | Researcher(Leon))", "(-Student(Leon) & -Researcher(Leon))", "Leon is neither a student nor a researcher.", "(-Student(Leon) & -Researcher(Leon))", "all x.(Leon(x) -> (-Student(x) & -Researcher(x)))", "(-Student(Leon) & -Researcher(Leon))", "LeBron(Leon) & -(Student(Leon) & Researcher(Leon)))", "-(Student(leon) & -Researcher(leon))"]}
{"id": "folio_train_1750", "nl": "If Leon is not a researcher, then Leon is a student.", "fol": "(-IsResearcher(Leon) -> IsStudent(Leon))", "prediction": ["all x.((Rentor(x) & -Researcher(x)) -> Student(x))", "all x.((Leon(x) & -Researcher(x)) -> Student(x))", "all x.((Researcher(x) & Leon.(Projector(x)) -> Student(x))", "all x.((Researcher(x) & -Researcher(x)) -> Student(x))", "all x.((Leon(x) & -Researcher(x)) -> Student(x))", "all x.((Leon(x) & -Researcher(x)) -> Student(x))", "all x.((Leon(x) & -Researcher(x)) -> Student(x))", "all x.((Leon(x) & -Researcher(x)) -> Student(x))", "all x.((Researcher(x) & Leon(x)) -> Student(x))", "all x.((Leon(x) & -Researcher(x)) -> Student(x))", "all x.((Leon(x) & -Researcher(x)) -> Student(x))", "all x.((Leon(x) & -Researcher(x)) -> Student(x))", "all x.(((Leon(x) & -Researcher(x)) -> Student(x))", "all x.((Researcher(x) & -Researcher(x)) -> Student(x))", "all x.((Researcher(x) & -Researcher(x)) -> Student(x))", "all x.((Leon(x) & -Researcher(x)) -> Student(x))"]}
{"id": "folio_train_1751", "nl": "A cutman is responsible for preventing and treating physical damage to a fighter.", "fol": "all x.((IsCutman(x) -> PreventPhysicalDamage(x,PhysicalDamage)) & TreatPhysicalDamage(x,PhysicalDamage))", "prediction": ["all x y.((Cutman(x) & Fighter(y)) -> PreventsAndTreatsPhysicalDamage(x,y))", "all x y z.((Cutman(x) & Fighter(y) & Fighter(z)) -> (PreventsAndTreatsPhysicalDamage(x,y,z)))", "all x y.((Cutman(x) & Fighter(y)) -> (ResponsibleForPreventingAndTreatingDamage(x,y)))", "all x y.((Cutman(x) & Fighter(y)) -> (PreventsAndTreatsDamage(x,y) & To(y,x)))", "all x y.((Cutman(x) & Fighter(y)) -> (PreventsPhysicalDamage(x) & TreatsPhysicalDamage(x,y)))", "all x y.((Cutman(x) & Fighter(y)) -> (PreventsPhysicalDamage(x,y) & TreatsPhysicalDamage(x,y)))", "all x y z.((Cutman(x) & Fighter(y) & Frazer(z)) -> (PreventsAndTreatsPhysicalDamage(x,y,z)))", "all x.(Cutman(x) -> (PreventsDamage(x) & TreatsDamageToFighter(x)))", "all x y.((Cutman(x) & Fighter(y)) -> (PreventsAndTreatsPhysicalDamage(x,y) & Fate(y)))", "all x.(Cutman(x) -> (PreventsAndTreatsDamage(x) & Fighter(x)))", "all x y.((Cutman(x) & Fighter(y)) -> (PreventsAndTreatsDeath(x,y) & PreventsDeath(x,y)))", "all x y.((Cutman(x) & Fighter(y)) -> (PreventsPhysicalDamage(x,y) & TreatsPhysicalDamage(x,y)))", "all x y.((Cutman(x) & Fighter(y)) -> (PreventsPhysicalDamage(x,y) & TreatsPhysicalDamage(x,y)))", "all x y.((Cutman(x) & Fighter(y)) -> (PreventsAndTreatsPhysicalDamage(x,y) & Combater(y)))", "all x.(ClearedMan(x) -> exists y z.(Fighter(y) & Combater(z) & PreventsAndTreatsPhysicalDamage(x,y,z))))", "all x y z.((Cutman(x) & Fighter(y) & PhysicalDamage(z) & PreventsDefect(x,y) & Treats(x,z)) -> ResponsibleFor(x,x,y,z))"]}
{"id": "folio_train_1752", "nl": "Cutmen appear in matches such as a boxing, kickboxing or a mixed martial arts bout. ", "fol": "all x.((IsCutman(x) -> AppearsInMatch(x,BoxingMatch)) | AppearsInMatch(x,KickboxingMatch) | AppearsInMatch(x,MixedMartialArtsBout))", "prediction": ["all x y.((Cutmen(x) & Match(y)) -> (ApppearsIn(x,y) & (BoxingBoard(y) | Kickboxing(y) | MixedMartialArtsBoard(y))))", "all x.(Cutter(x) -> AppearsInMatch(x))", "all x y z.((Cutmen(x) & Match(y) & (BoxingBetween(z) | KickboxingBetween(z) | MixedMartialArtsBetween(z))) -> Appears(x,y,z))", "all x.(Cutmen(x) -> (ComesIn(x,boxing) | ComesIn(x,kickboxing) | ComesIn(x,mixedMartialArts)))", "all x.(Cutmen(x) -> (AppearsInBoxingMatch(x) | AppearsInKickboxingMatch(x) | AppearsInMixedMartialArtsMatch(x)))", "all x.(Cutmen(x) -> (exists y.(BoxingMatch(y) | KickboxingMatch(y) | MixedMartialArtsMatch(y))))", "all x.(Cutmen(x) -> (AppearInMatch(x,boxing) | AppearInMatch(x,kickboxing) | AbsorbInMatchAfterMixedMartialArts(x)))", "all x y.((Cutmen(x) & (BoxingMatch(y) | KickboxingMatch(y) | MixedMartialArtsMatch(y))) -> AppearsIn(x,y))", "all x.(Cutter(x) -> (AvailsInBoxing(x) | AvailsInKickboxing(x) | AvailsInMixedMartialArts(x)))", "all x.(Cutmen(x) -> (AppearsInBoxing(x) | AppearsInKickboxing(x) | As(x,mixedMartialArt)))", "all x.(Cutmen(x) -> (AppearsInBoxing(x) | AppearsInKickboxing(x) | AppearsInMixedMartialArts(x)))", "all x.(Cutman(x) -> (AppearsInBoxing(x) | AwaitsInKickboxing(x) | AwaitsInMixedMartialArts(x)))", "all x y.((Cutmen(x) & (Boxing(y) | Kickboxing(y) | MixedMartialArts(y))) -> AppearInMatch(x,y))", "all x y.((Cutmen(x) & Match(y)) -> (InPosition(x,y) | InPosition(y,x) | InPosition(y,x)))", "all x.(Cutmen(x) -> (exists y.(Boxing(y) & InMatch(x,y)) | exists z.(Kickboxing(z) & InMatch(z,x)))))", "all x.(Cutmen(x) -> (AppearInBoxingMatch(x) | AppearsInKickboxingMatch(x) | AppearsInMixedMartialArtsMatch(x)))"]}
{"id": "folio_train_1753", "nl": "Cutmen typically handle swelling, nosebleeds and lacerations. ", "fol": "all x.((IsCutman(x) -> HandleInjuries(x,SwellingInjury)) & HandleInjuries(x,NosebleedInjury) & HandleInjuries(x,LacerationInjury))", "prediction": ["all x.(Cutman(x) -> (4HandlesSwelling(x) & HandlesNasalbleeds(x) & HandlesLacerations(x)))", "all x.(Cutmen(x) -> (ManagesSwelling(x) & HandlesNasalbleeds(x) & HandlesLacerations(x)))", "all x.(Cut(x) -> (HandlesSwelling(x) & HandlesNasalbleeds(x) & HandlesLacerations(x)))", "all x.(Circle(x) -> (HandlesSwelling(x) & HandlesNasalbleeds(x) & HandlesLacerations(x)))", "all x.(Cutmen(x) -> (DoseSwelling(x) & HandlesNasalsbleed(x) & HandlesLacerations(x)))", "all x.(Cutman(x) -> (HeadsSwelling(x) & HandlesNasalbleeds(x) & HandlesLacerations(x)))", "all x.(Cutman(x) -> (HandlesSwelling(x) | HandlesNasebleeds(x) | HandlesLacerations(x)))", "all x.(Cut(x) -> HandlesSwelling(x) & HandlesNasalbleeds(x) & HandlesLacerations(x))", "all x.(Cutmen(x) -> (HandlesSwelling(x) | HandlesNasalbleeds(x) | HandlesLacerations(x)))", "all x.(CutMen(x) -> (HandlesSwelling(x) | HandlesNasalbleeds(x) | HandlesLacerations(x)))", "all x.(Cutmen(x) -> (HandlesSwelling(x) & HandlesNasalbleeds(x) & HandlesLacerations(x)))", "all x.(Cutmen(x) -> (HandlesSwelling(x) & HandlesNasebleeds(x) & HandlesLacerations(x)))", "all x.(Cutman(x) -> (HandlesSwelling(x) & HandlesNasalbleeds(x) & HandlesLacerations(x)))", "all x.(Cutmen(x) -> (HandlesSwelling(x) & HandlesNasebleeds(x) & HandlesLacerations(x)))", "all x.(Cutman(x) -> (HandlesSwelling(x) & HandlesNasalbleeds(x) & HandlesLacerations(x)))", "all x.(Cutman(x) -> (HandlesSwelling(x) | HandlesNasalbleeds(x) | HandlesLacerations(x)))"]}
{"id": "folio_train_1754", "nl": "Jack is a cutman.", "fol": "IsCutman(Jack)", "prediction": ["(CUTMAN(Jack) & Cutman(Jack))", "all x.(Cutter(x) -> Jack(x))", "all x.((Jack(x) & Cutman(x)) -> Cutman(x))", "All x.(Jack(x) -> Cutman(x))", "(Cutman(Jack) & Hottie(Jack))", "All x.(Jack(x) -> Cutman(x))", "all x.(Slitman(x) -> Jack(x))", "-Cutman(jack)", "all x.(Captain(x) -> Cutman(x))", "Jack is Cutman(x)", "-Slainman(Jack)", "All x.((Jack(x) & Cutman(x)) -> Cutman(x))", "all x.(Spoken(x) -> Cutman(x))", "all x.(Buck(x) -> Cutman(x))", "all x.(Cutman(x) -> Jack(x))", "all x.(Jack(x) -> Cutman(x))"]}
{"id": "folio_train_1755", "nl": "No cutmen appear in boxing matches.", "fol": "-exists x.(IsCutman(x) & AppearsInMatch(x,BoxingMatch))", "prediction": ["-exists x.(Cutmen(x) & BoxingMatch(x))", "-exists x.(Cutmen(x) & BoxingMatch(x))", "-exists x.(Cutmen(x) & BoxingMatch(x))", "at boxingmatch(x) & -exists y.(Cutmen(y) & InBoxingMatch(x,y)))", "all x.(Cheapmen(x) -> -AppearColdInBoxingMatch(x))", "-exists x.(Cutmen(x) & BoxingMatch(x))", "-exists x.(Cutmen(x) & InBoxing(x))", "-exists x.(Cutmen(x) & BoxingMatch(x))", "-exists x.(Cutmen(x) & BoxingMatch(x))", "-exists x.(Cutmen(x) & BoxingMatch(x))", "all x y.((Cutmen(x) & BoxingMatch(y)) -> -AppearsIn(x,y))", "-exists x.(Cutmen(x) & BoxingMatch(x))", "-exists x.(Cutmen(x) & BoxingMatch(y) & LooksEnoughIn(x,y))", "is the only cutmen (exists y.(BoxingMatch(x,y)) & does notAppearIn(y,x)))", "-exists x.(Cutmen(x) & BoxingMatch(x))", "has.((Chetman(xx) | BoxingMatch(x)))"]}
{"id": "folio_train_1756", "nl": "If someone is not a cutman, then they cannot handle nosebleeds.", "fol": "all x.(-IsCutman(x) -> -HandleInjuries(x,NosebleedInjury))", "prediction": ["all x.((NastbleedDisabled(x) & -Cutman(x)) -> -Handles(x,nosebleeds))", "all x.((Cutman(x) & -Cutman(x)) -> -HandlesNasalbleeds(x))", "all x.((Circleman(x) & -Cutman(x)) -> -HandlesNassaurebleeds(x))", "all x.((Cutman(x) & -Cutman(x)) -> -HandlesNastbleeds(x))", "all x.(-Cutman(x) -> -HandlesNassaurebleeds(x))", "all x.((Cutman(x) & -HandlesNassaugers(x)) -> NoSnakebleeds(x))", "all x.(NotCutman(x) -> -HandlesNasebleeds(x))", "all x.((Person(x) & -Cutman(x)) -> -HandlesNastbleeds(x))", "all x.((Cutman(x) & -Cutman(x)) -> -HandlesNasalbleeds(x))", "all x.((Cutman(x) & -HandlesNashbleeds(x)) -> -HandlesNashbleeds(x))", "all x.((Cutman(x) & -Cutman(x)) -> CannotHandleNasebleeds(x))", "all x.((Cutman(x) & -Cutman(x)) -> -HandlesNasalsbleeds(x))", "all x.((HasNassautbleeds(x) & -CrippedMan(x)) -> -HoldSnakebleeds(x))", "all x.((Person(x) & -Cutman(x)) -> -HandlesNasalbleeds(x))", "all x.((Person(x) & -Cutman(x)) -> -HandlesNasebleeds(x))", "all x.((Cutman(x) & -Cutman(x)) -> -HandlesNasebleeds(x))"]}
{"id": "folio_train_1757", "nl": "Jack can treat physical damage.", "fol": "TreatPhysicalDamage(Jack,PhysicalDamage)", "prediction": ["all x.(Jack(x) -> TreatsPhysicalDamage(x))", "all x.(Jack(x) -> CanTreatPhysicalDamage(x))", "(Does(Jack) & PhysicalDamage(Jack))", "all x.(Jack(x) -> TreatsPhysicalDamage(x))", "all x.(Jack(x) -> TreatsPhysicalDamage(x))", "all x.(Jack(x) -> CanTreatPhysicalDamage(x))", "canTreatPhysicalDamage(Jack)", "all x.(Jack(x) -> TreatsPhysicalDamage(x))", "all x.(Jack(x) -> TreatsPhysicalDamage(x))", "all x.(Jack(x) -> TreatsPhysicalDamage(x))", "all x.(Jack(x) -> TreatsPhysicalDamage(x))", "all x.(Jack(x) -> TreatsPhysicalDamage(x))", "all x.(Jack(x) -> TreatsPhysicalDamage(x))", "all x.(Jack(x) -> TreatsPhysicalDamage(x))", "all x.(Jack(x) -> TreatsPhysicalDamage(x))", "all x.(Jack(x) -> TreatsPhysicalStrange(x))"]}
{"id": "folio_train_1758", "nl": "The Mona Lisa is one of the world's best-known artworks.", "fol": "(IsPainting(MonaLisa) & IsWorldsBestKnownArtwork(MonaLisa))", "prediction": ["all x.(MonaLisa(x) -> BestKnownArtwork(x))", "All x.(MonaLisa(x) -> BestKnownArtwork(x))", "KnownAtWork(MonaLisa(MonaLisa)", "all x.(MonaLisa(x) -> OneOfWorldsBestKnownArtworks(x))", "(WorldBestKnownArtwork(MonaLisa))", "(BestKnownArtwork(MonaLisa,World))", "((MonaLisa(MonaLisa) & BestKnowledgedArtwork(MonaLisa)))", "Die Mona Lisa ist der best-knownArtwork(MonaLisa)", "All x.(MonaLisa(x) -> BestKnownArtwork(x))", "The Mona Lisa is one of the best-known artworks.", "(WorldsBestKnownArtwork(MonaLisa))", "all x.(MonaLisa(x) -> BestKnownArtwork(x))", "all x.(MonaLisa(x) -> BestKnownArtwork(x))", "(OrthodoxMountains(MonaLisa) & BestKnownArtwork(MonaLisa))", "all x.(MonaLisa(x) -> BestKnownArtwork(x))", "(WorksAt(MonaLisa) & WorldBestKnownArtwork(MonaLisa))"]}
{"id": "folio_train_1759", "nl": "The Mona Lisa is a portrait painted by Leonardo da Vinci.", "fol": "(IsPaintedBy(MonaLisa,LeonardodaVinci) & IsPortrait(MonaLisa))", "prediction": ["The Mona Lisa is PortraitPaintedByLeonardoDaVinci.", "The Mona Lisa is a portrait painted by Leonardo da Vinci.", "(Portrait(monalisa) & PaintedByLeonardoDaVinci(monalisa))", "(Portrait(MonaLisa) & PaintedByLeonardoDaVinci(monalis,lilly))", "(PortraitPapedByLeonardoDaVinci(Mona-Lisa))", "(Portrait(MonaLisa) & PaintedBy(MonaLisa,LondedoDaVinci))", "all x.(MonaLisa(x) -> (Portrait(x) & PaintedByLeonardoDaVinci(x)))", "The Mona Lisa is portrait painted by Leonardo da Vinci.", "(PaintingMonaLisa(MonaLisa, LeonardoDaVinci))", "(Portrait(MonaLisa))", "(Portrait(MonaLisa) & PaintedByLeonardoDaVinci(MonaLisa))", "LeodaVinciPaint MonaLisa(MonaLisa)", "(PaintedByLeonardoDaVinci(MonaLisa)", "(Portrait(MonaLisa) & PaintedByLeonardoDaVinci(Mona-Lisa))", "(PortraitPaintedBy(MonaLisa,LeonardoDaVinci))", "La Mona Lisa (PortraitPaintedByLeonardoDaVinci)"]}
{"id": "folio_train_1760", "nl": "Leonardo da Vinci was a scientist and painter.", "fol": "(IsScientist(LeonardodaVinci) & IsPainter(LeonardodaVinci))", "prediction": ["Leonardo da Vinci (Lorenzo(d) & Scientist(d) & Painter(d))", "Leonardo da Vinci (* -Scientist(l) & Painter(l))", "Leonardo da Vinci (scientist, painter)", "Leonardo da Vinci (Scientist(Lorenzo) & Painter(Lorenzo))", "(Scientist(LeonardoDaVinci) & Painter(LeonardoDaVinci))", "Leonardo da Vinci (Scientist(d) & Painter(d))", "Leonardo da Vinci (et al.,2006,2008)) \u00e9tait sceptic & painter (et al.,2006,2007)))", "Leonardo da Vinci (Scientist(d) & Painter(e))", "(Scientist(Leonardo da Vinci) & Painter(Leonardo da Vinci))", "Leonardo da Vinci (electrologist,stadium,science) & painter.", "Leonardo da Vinci (scientist, painter) and was buried in Alexandria, Virginia, in 1938.", "all x.(DepartmentOf(x) -> (LorenzoDaVinci(x) & Scientist(x) & Painter(x)))", "Leonardo da Vinci(Da Vinci) [scientist(d) & Painter(d))", "Leonardo da Vinci ((Scientist(Scientist) & Painter(Scientist))", "Leonardo da Vinci was a sceptic and painter.", "Leonardo da Vinci (below) -> (Scientist(a) & Painter(b)))"]}
{"id": "folio_train_1761", "nl": "Painting genres are history, portrait, animal, landscape, and still life.", "fol": "all x.(IsPainting(x) -> (IsHistoryGenre(x) | IsPortrait(x) | IsAnimalGenre(x) | IsLandscapeGenre(x) | IsStillLifeGenre(x)))", "prediction": ["all x.(PaintingGenre(x) -> (History(x) | Portrait(x) | Animal(x) | Landscape(x) | StillLife(x)))", "all x.(PaintingGenre(x) -> (History(x) | Portrait(x) | Animal(x) | Landscape(x) | StillLife(x)))", "all x.(PaintingGenre(x) -> (Historia(x) | Portrait(x) | Animal(x) | Landscape(x) | StillLife(x)))", "(all x.(PaintingGenre(x) -> (History(x) | Portrait(x) | Animal(x) | Landscape(x) | StillLife(x)))", "all x.(PaintingGenre(x) -> (History(x) | Portrait(x) | Animal(x) | Landscape(x) | StillLife(x)))", "all x.(PaintingGenre(x) -> (History(x) | Portrait(x) | Animal(x) | Landscape(x) | StillLife(x)))", "all x.(PaintingGenre(x) -> (History(x) | Portrait(x) | Animal(x) | Landscape(x) | StillLife(x)))", "all x.(PaintingGenre(x) -> (History(x) | Portrait(x) | Animal(x) | Landscape(x) | StillLife(x)))", "all x.(PaintingGenre(x) -> (History(x) | Portrait(x) | Animal(x) | Landscape(x) | StillLife(x)))", "all x.(PaintingGenre(x) -> (History(x) | Portrait(x) | Animal(x) | Landscape(x) | StillLife(x)))", "all x.(PaintingGenre(x) -> (History(x) | Portrait(x) | Animal(x) | Landscape(x) | StillLife(x)))", "all x.(PaintingGenre(x) -> (History(x) | Portrait(x) | Animal(x) | Landscape(x) | StillLife(x)))", "(PaintingGenre(pen) | (History(pen) | Portrait(pen) | Animal(pen) | Landscape(pe) | StillLife(pe))))", "all x.((PaintingGenre(x) & (History(x) | Portrait(x) | Animal(x) | Landscape(x) | StillLife(x))) -> PaintingGenre(x))", "all x.(PaintingGenre(x) -> (History(x) | Portrait(x) | Animal(x) | Landscape(x) | StillLife(x)))", "all x.(PaintingGenre(x) -> (Historical(x) | Portrait(x) | Animal(x) | Landscape(x) | StillLife(x)))"]}
{"id": "folio_train_1762", "nl": "One of the world's best-known artworks is painted by a scientist.", "fol": "exists x.(IsWorldsBestKnownArtwork(x) & exists y.(IsScientist(y) & IsPaintedBy(x,y)))", "prediction": ["all x y z.((Artwork(x) & Scientist(y) & World(z)) -> PaintedBy(x,y,z))", "all x y.((Artwork(x) & Scientist(y)) -> PaintedBy(x,y))", "all x.((Artwork(x) & BestKnownInWorld(x)) -> paintedByScientist(x))", "all x y.((Artwork(x) & BestKnown(x)) -> PaintenBy(x,y))", "all x.((WorldArtwork(x) & BestKnowledged(x)) -> PaintedByScientist(x))", "all x y.((Artwork(x) & Scientist(y)) -> Paints(x,y))", "all x y z.((Artwork(x) & Researcher(y) & Artist(z) & PaintedBy(x,y,z)) -> BestKnown(x,z))", "all x y.((WallHasBestKnownArtwork(x) & Scientist(y)) -> PaintedBy(x,y))", "all x.((Artwork(x) & MostKnown(x)) -> PairedByScientist(x))", "all x.((Artwork(x) & BestKnown(x)) -> PaintedByScientist(x))", "all x y.((Artwork(x) & Scientist(y)) -> PaintedBy(x,y))", "all x.((Artwork(x) & BestKnown(x)) -> PaintedByScientist(x))", "exists x.(Artwork(x) & BestKnown(x) & PaintedByScientist(x))", "all x.((Artwork(x) & BestKnown(x)) -> PaintedByScientist(x))", "all x y.((MostKnowledgedArtwork(x) & Scientist(y)) -> PaintsBy(x,y))", "all x.((Artwork(x) & BestKnown(x)) -> PaintedByScientist(x))"]}
{"id": "folio_train_1763", "nl": "Leonardo da Vinci has artworks in the landscape genre.", "fol": "exists x.(Artwork(x) & IsLandscapeGenre(x) & CreatedBy(x,LeonardodaVinci))", "prediction": ["all x.(LeonardoDaVinci(x) -> HasArtwork(x,Landscape,Artwork))", "Leonardo da Vinci (Lilisiacs(Location))", "all x.(LeonardoDaVinci(x) -> exists y.(Landscape(y) & Artwork(z) & Landscape(y) & Landscape(z)))", "all x.(LeonardoDaVinci(x) -> (HasArtworksInLandscape(x) & Landscape(x)))", "all x.(Design(x,y) -> LeonardoDaVinci(y))", "all x.(DaVinci(x) -> (ArtworkInLandscape(x) | ArtworkInLandscape(x)))", "all x.(LeonardodaVinci(x) -> exists y.(LandscapeArtwork(y) & Artwork(z) & LandscapeArtwork(z) & LandscapeArtwork(y,z)))", "all x.(Leonardo(x) -> (ArtworkInLandscape(x) & LeonardoDaVinci(x)))", "Leonardo da Vinci hatsArtworksInLayoutGenre(lilaida)", "exists x y.(Artwork(x,y) & Landscape(y) & Artwork(x))", "all x.((Leonardo da Vinci(x) & Landscape(x)) -> HasArtworkIn(x,y))", "all x.(LeonardoDaVinci(x) -> exists y.(Landscape(y) & Has(x,y))))", "all x.(LeonardoDaVinci(x) -> HasArtwork(x,landscape))", "(Artwork(LeonardoDaVinci)\u00ae & LandscapeGenre(LeonardoDaVinci))", "all x.(LeonardoDaVinci(x) -> LandscapeArtwork(x))", "all x.(DaVinci(x) -> exists y.(Landscape(y) & Artwork(x,y)))"]}
{"id": "folio_train_1764", "nl": "No world's best-known artworks are portraits.", "fol": "-exists x.(IsWorldsBestKnownArtwork(x) & IsPortrait(x))", "prediction": ["-exists x.(Artwork(x) & Portrait(x))", "-exists x.(Artwork(x) & Portrait(x))", "-exists x.(Artwork(x) & BestKnown(x) & Portrait(x))", "-exists x.((Artwork(x) & BestKnown(x)) & Portrait(x))", "-exists x.(WorldWideBestKnownArtwork(x) & Portrait(x))", "all x.(WallStage(x) -> -Portrait(x))", "-exists x.(WorldsBestKnownArtwork(x) & Portrait(x))", "-exists x.(World(x) & BestKnownArtwork(x) & Portrait(x))", "-exists x.(WorldsBestKnownArtwork(x) & Portrait(x))", "-exists x.(WorldBestKnownArtwork(x) & Portrait(x))", "-exists x.(WorldBestKnownArtwork(x) & Portrait(x))", "-exists x.(BestKnownArtwork(x) & Portrait(x))", "-exists x.(BestKnownArtwork(x) & Portrait(x))", "-exists x.(Artwork(x) & BestKnown(x))", "-exists x.(WorldBestKnownArtwork(x) & Portrait(x))", "-exists x.(MostRecognizedArtwork(x) & Portrait(x))"]}
{"id": "folio_train_1765", "nl": "No professional tennis umpires are professional tennis players.", "fol": "all x.(IsProfessionalTennisUmpire(x) -> -IsProfessionalTennisPlayer(x))", "prediction": ["-exists x.(ProfessionalTennisUmpire(x) & ProfessionalTennisPlayer(x))", "-exists x.(ProfessionalTennisUmpire(x) & ProfessionalTennisPlayer(x))", "-exists x.(ProfessionalTennisUmpire(x) & Professional(x))", "-all x.(ProfessionalTennisUmpire(x) -> ProfessionalTennisPlayer(x))", "-exists x.(ProfessionalTennisUmpire(x) & ProfessionalTennisPlayer(x))", "-exists x.(ProfessionalTennisUmpire(x) & ProfessionalTennisPlayer(x))", "-exists x.(ProfessionalTennisUmpire(x) & ProfessionalTennisPlayer(x))", "(-exists x.(ProfessionalTennisUmpire(x) & ProfessionalTennisPlayer(x)))", "-exists x.(ProfessionalTennisUmpire(x) & ProfessionalTennisPlayer(x))", "-exists x.(ProfessionalTennisUmpire(x) & ProfessionalTennisPlayer(x))", "all x.(ProfessionalTennisUmpire(x) -> ProfessionalTennisPlayer(x))", "-exists x.(ProfessionalTennisUmpire(x) & ProfessionalTennisPlayer(x))", "-exists x.(ProfessionalTennisUmpire(x) & ProfessionalTennisPlayer(x))", "(-exists x.(ProfessionalTennisUmpire(x) & ProfessionalTennisPlayer(x)))", "-exists x.(ProfessionalTennisUmpire(x) & ProfessionalTennisPlayer(x))", "-exists x.(ProfessionalTennisUmpire(x) & Golfer(x))"]}
{"id": "folio_train_1766", "nl": "If you are a World Tour player, then you are a professional tennis player.", "fol": "all x.(IsWorldTourPlayer(x) -> IsProfessionalTennisPlayer(x))", "prediction": ["all x.((WorldTourPlayer(x) & ProfessionalTennisPlayer(x)) -> TennisPlayer(x))", "all x.((WorldTourPlayer(x) & -WorldTourPlayer(x)) -> ProfessionalTennisPlayer(x))", "all x.((WesternTour Player(x) & ProfessionalTennisPlayer(x)) -> Players(x))", "all x.((WorldTourPlayer(x) & ProfessionalTennisPlayer(x)) -> PlaysCourts(x))", "all x.(WonTheTourIndividual(x) -> ProfessionalTennisPlayer(x))", "all x.((WorldTourPlayer(x) & ProfessionalTennisPlayer(x)) -> -Wtw.(PennisPlayer(x) & Professional(x)))", "all x.((WorldTourPlayer(x) & Plays(x,y)) -> ProfessionalTennisPlayer(x))", "all x.((WorldTourPlayer(x) & ProfessionalTennisPlayer(x)) -> Professional(x))", "all x.((Player(x) & WorldTour(x)) -> ProfessionalTennisPlayer(x))", "all x.(WorldTourPlayer(x) -> ProfessionalTennisPlayer(x))", "all x.((WorldTourPlayer(x) & ProfessionalTennisPlayer(x)) -> Professional(x))", "all x.((Player(x) & WorldTourplayer(x)) -> ProfessionalTennisPlayer(x))", "all x.((WorldTourPlayer(x) & ProfessionalTennisPlayer(x)) -> PlaysWell(x))", "all x y.((WorldTourPlayer(x) & Player(y)) -> ProfessionalTennisPlayer(x))", "all x.((WorldTourPlayer(x) & TennisPlayer(x)) -> Professional(x))", "all x.((WTourPlayer(x) & PlayingWorldTour(x)) -> ProfessionalTennisPlayer(x))"]}
{"id": "folio_train_1767", "nl": "All Grand Slam champions are World Tour players.", "fol": "all x.(IsGrandSlamChampion(x) -> IsWorldTourPlayer(x))", "prediction": ["all x.(Gran SlamChampion(x) -> WorldTourPlayer(x))", "all x.(GrandSlamCampus(x) -> WorldTourPlayer(x))", "all x.((GrandSlamChampion(x) & WorldTourPlayer(x)) -> GrandSlamPositioner(x))", "all x.(GrandSlamChampion(x) -> WorldTourPlayer(x))", "all x.(GrandSlamChampion(x) -> WorldTourPlayer(x))", "all x.(GrandSlamChampion(x) -> WorldTourPlayer(x))", "all x.(GrandSlamChampion(x) -> WorldTourPlayer(x))", "all x.(GrandSlamChampion(x) -> WorldTour Player(x))", "ALL x.(GrandSlamChampion(x) -> WorldTourPlayer(x))", "all x.(GrandSlamChampion(x) -> WorldTourPlayer(x))", "all x.(GrandSlamChampion(x) -> WorldTourPlayer(x))", "all x.(GrandSlamChampion(x) -> WorldTourPlayer(x))", "all x.(GrandSlamChampion(x) -> WorldTourPlayer(x))", "all x.(GrandSlamChampion(x) -> WorldTourPlayer(x))", "all x.(GrandSlamChampion(x) -> WorldTourPlayer(x))", "all x.(GrandSlamChampion(x) -> WorldTourPlayer(x))"]}
{"id": "folio_train_1768", "nl": "All Grand Slam umpires are professional tennis umpires.", "fol": "all x.(IsGrandSlamUmpire(x) -> IsProfessionalTennisUmpire(x))", "prediction": ["all x.(GrandSlamUmpire(x) -> ProfessionalTennisUmpire(x))", "all x.((GrandSlamUmpire(x) & ProfessionalTennisUmpire(x)) -> Umpire(x))", "all x y.((GrandSlamUmpire(x) & ProfessionalTennisUmpire(y)) -> Umpire(x))", "all x.(GransSlamUmpire(x) -> ProfessionalTennisUmpire(x))", "all x.(GrandSlamUmpire(x) -> ProfessionalTennisUmpire(x))", "all x.(GrandSlamUmpire(x) -> ProfessionalTennisUmpire(x))", "all x.(GrandSlamUmpire(x) -> ProfessionalTennisUmpire(x))", "all x.(GrandSlamUmpire(x) -> ProfessionalTennisUmpire(x))", "all x.(GrandSlamUmpire(x) -> ProfessionalTennisUmpire(x))", "all x.(GrandSlamUmpire(x) -> ProPlayingUmpire(x))", "all x.(GrandSlamUmpire(x) -> ProfessionalTennisUmpire(x))", "all x.(GrandSlamUmpire(x) -> ProfessionalTennisUmpire(x))", "all x.(GrandSlamUmpire(x) -> ProfessionalTennisUmpire(x))", "all x.(GrandSlamUmpire(x) -> ProfessionalTennisUmpire(x))", "all x.(GrandSlamUmpire(x) -> ProfessionalTennisUmpire(x))", "all x.(GrandSlamUmpire(x) -> ProfessionalTennisUmpire(x))"]}
{"id": "folio_train_1769", "nl": "Nadal is a World Tour player or a Grand Slam champion", "fol": "(IsWorldTourPlayer(Nadal) | IsGrandSlamChampion(Nadal))", "prediction": ["all x y.((Nadal(x) & (WorldTourPlayer(x) | GrandSlamChampion(x))) -> (Nadal(x) & (GlobalTourPlayer(x) | GrandSlamChampion(x))))", "all x.(Nadal(x) -> ((WorldTourPlayer(x) | GrandSlamChampion(x))))", "all x.(Nadal(x) -> ((WorldTourPlayer(x) | GrandSlamChampion(x))) | (GrandSlamChampion(x)))))", "(LiamNadal (WTour Player(n) | Grand SlamChampion(n)))", "all x.(Nadal(x) -> ((WorldTour Player(x) | GrandSlamChampion(x))) | (GoldenSlamChampion(x))))", "all x.(Nadal(x) -> (WorldTourPlayer(x) | GrandSlamChampion(x)))", "all x.(Nadal(x) -> ((WorldTourPlayer(x) | GrandSlamChampion(x))) | (GrandSlamChampion(x)))))", "all x.(Nadal(x) -> ((WorldTourplayer(x) | GrandSlamChampion(x)) & -WorldTourPlayer(x)) | GrandSlamChampion(x))))", "all x.(Nadal(x) -> (WorldTourPlayer(x) | GrandSlamChampion(x)))", "(WorldTourPlayer(Nadal) | GrandSlamChampion(Nadal)))", "all x.(Nadal(x) -> (WonCanonPlayer(x) | GrandSlamChampion(x)))", "all x.(Nadal(x) -> (WTOPlayer(x) | GrandSlamChampion(x)))", "all x.(Nadal(x) -> (WorldTourPlayer(x) | GrandSlamChampion(x)))", "all x.(Nadal(x) -> (WorldTour Player(x) | GrandSlamChampion(x)))", "all x.(Nadal(x) -> (WorldTourPlayer(x) | GrandSlamChampion(x)))", "all x.(Nadal(x) -> (WorldTourPlayer(x) | GrandSlamChampion(x)))"]}
{"id": "folio_train_1770", "nl": "Nadal is a Grand Slam umpire.", "fol": "IsGrandSlamUmpire(Nadal)", "prediction": ["Nadal is a GrandSlamUmpire.", "Nadal is a GrandSlamUmpire(Nadal)", "Nadal is a GrandSlamUmpire(National)", "All x.(Nadal(x) -> GrandSlamUmpire(x))", "Nadal is a GrandSlamUmpire.", "(GrandSlamUmpire(Nadal) & -Elvish(Nadal))", "All x.(Nadal(x) -> GrandSlamUmmpire(x))", "all x.(Nadal(x) -> GrandSlamUmpire(x))", "Nadal Alas, GrandSlamUmpire(Nadal)", "Nadal is a Grand Slam Umpire(n)", "Nadal is a GrandSlamUmpire(Nadal)", "Nadal is a GrandSlamUmpire(Nadal,100,000)", "Nadal is an umpire(grandslam)", "all x.(Nadal(x) -> GrandSlamUmpire(x))", "Nadal is a GrandSlamUmpire(n)", "all x.(Nadal(x) -> GrandSlamUmpire(x))"]}
{"id": "folio_train_1771", "nl": "Nadal is not a Grand Slam umpire.", "fol": "-IsGrandSlamUmpire(Nadal)", "prediction": ["all x.(Nadal(x) -> -GrandSlamUmpire(x))", "Nadal is notGrandSlamUmpire(Nadal)", "-GrandSlamUmpire(Nadal)", "(MotorSports(Nadal) & -GrandSlamUmpire(Nadal))", "-GladSlamUmpire(Natural)", "-GroomedStudioUmpire(Nadal)", "-GrandSlamUmpire(Nadal)", "all x.(Nadal(x) -> -GrandSlamUmpire(x))", "-GrandSlamUmpire(Nakadal)", "-GrandSlamUmpire(Nadal)", "-GrandSlamUmpire(Nadal)", "Nadal is notGrandSlamUmpire(Nadal)", "Nadal is not a GrandSlamUmpire(Nadal)", "-GrandSlamUmpire(Nadal)", "-ElijahNadal(n) & GrandSlamUmbrella(n))", "-GrandSlamUmpire(Nadal,10)"]}
{"id": "folio_train_1772", "nl": "Nadal is a Grand Slam champion.", "fol": "IsGrandSlamChampion(Nadal)", "prediction": ["Nadal is GrandSlamChampion(Nadal,GrunSlam)", "Nadal is GrandSlamChampion.", "Nadal is a GrandSlamChampion(n)", "Nadal is a GrandSlamChampion(Nadal,y)", "(GrandSlamChampion(Nadal) -> InSlam(Nadal))", "La Liga (GrandSlamChampion(Nadal) -> GrandSlamChampion(Nadal))", "Nadal is GrandSlamChampon.", "Nadal is GrandSlamChampion(Nadal)", "all x.((Nadal(x) & Grand SlamChampion(x)) -> PlaysIn(x,y))", "Nadal is a GrandSlamChampion.", "all x.(Nadal(x) -> GrandSlamChampion(x))", "(GrandsSlamChampion(Nadal)", "all x.(Nadal(x) -> GrandSlamChampion(x))", "all x.(Nadal(x) -> Grand SlamChampion(x))", "Nadal is a GrandSlamChampion.", "Nadal is a GrandSlamChampion(n) -> HasEnoughFlash(n))"]}
{"id": "folio_train_1773", "nl": "Nadal is neither a Grand Slam umpire nor a professional tennis umpire.", "fol": "(-IsGrandSlamUmpire(Nadal) & -IsProfessionalTennisUmpire(Nadal))", "prediction": ["(-GrandSlamUmpire(Nadal) & -ProfessionalTennisUmpire(Nadal))", "all x.(Nadal(x) -> (-GrandSlamUhpire(x) & -ProfessionalTennisUhpire(x)))", "-(GrandSlamUmpire(Nadal) | ProfessionalTennisUmpire(Nadal))", "(-GrandSlamUmpire(Nadal) & -ProfessionalTennisUmpire(Nadal))", "(-GrandSlamUmpire(Nadal) & -ProfessionalTennisUmpire(Nadal)))", "-(GrandSlamUmpire(Nadal) | ProfessionalTennisUmpire(Nadal))", "Nadal is a -(GrandSlamUmpire(n) | ProfessionalTennisUmpire(n)))", "(-GrandSlamUmpire(Nadal) & -ProfessionalTennisUmpire(Nadal))", "(-GrandSlamUmpire(Nadal) & -ProfessionalTennisUmpire(Nadal))", "(-(GrandSlamUmpire(Nadal) | ProfessionalTennisUmpire(Nadal)))", "(-GrandSlamUrpire(Nadal,GrandSlam) & -ProfessionalTENnisUrpire(Nadal))", "(-GrandSlamUmpire(Nadal) & -ProfessionalTennisUmpire(Nadal))", "-(GrandSlamUmpire(Nadal) & -ProfessionalTennisUmpire(Nadal))", "(-(GrandSlamUmpire(Nadal) | ProfessionalTennisUmpire(Nadal)))", "(-GrandSlamUmpire(Natal) & -ProfessionalTennisUmpire(Natal))", "all x.(Nadal(x) -> (NukesGrandSlamUmpire(x) | NukesProfessionalTennisUmpire(x)))"]}
{"id": "folio_train_1774", "nl": "If Nadal is a professional tennis umpire, then Nadal is a Grand Slam Umpire.", "fol": "(IsProfessionalTennisUmpire(Nadal) -> IsGrandSlamUmpire(Nadal))", "prediction": ["all x.((Nadal(x) & ProfessionalTennisUmpire(x)) -> GrandSlamUmpire(x))", "all x.((ProfessionalTennisUmpire(x) & Nadal(x)) -> GrandSlamUmpire(x))", "all x.(ProfessionalTotalEntertainer(x) -> GrandSlamUmpire(x))", "all x.(ProfessionalTennisUmpire(x) -> GrandSlamUmpire(x))", "all x.(ProfessionalTennisUmpire(x) -> GrandSlamUmpire(x))", "all x.((TennisUmpire(x) & Professional(x)) -> GrandSlamUmpire(x))", "all x.((Nadal(x) & ProfessionalTennisUmpire(x)) -> GrandSlamUmpire(x))", "all x.((Jazz Nadal (x) & ProfessionalTennisUmpire(x)) -> GrandSlamUmpire(x))", "all x.((Nadal(x) & ProfessionalTennisUmpire(x)) -> GrandSlamUmpire(x))", "all x.(ProfessionalTennisUmpire(x) -> GrandSlamUmpire(x))", "all x.(ProfessionalTennisUmpire(x) -> GrandSlamUmpire(x))", "all x.(ProfessionalUmpire(x) -> GrandSlamUmpire(x))", "all x.((Nadal(x) & ProfessionalTennisUmpire(x)) -> GrandSlamUmpire(x))", "all x.(ProfessionalTennisUmpire(x) -> GrandSlamUmpire(x))", "all x.((Nadal(x) & ProfessionalTennisUmpire(x)) -> GrandSlamUmpire(x))", "all x.(ProfessionalTennisUmpire(x) -> GrandSlamUmpire(x))"]}
{"id": "folio_train_1775", "nl": "If Nadal is a Grand Slam umpire or a professional tennis player, then Nadal is a Grand Slam umpire.", "fol": "((IsGrandSlamUmpire(Nadal) | IsProfessionalTennisPlayer(Nadal)) -> IsGrandSlamUmpire(Nadal))", "prediction": ["all x.((Nadal(x) & (GrandSlamUmpire(x) | ProfessionalTennisPlayer(x))) -> GrandSlamUmpire(x))", "all x.((Nadal(x) & GrandSlamUmpire(x) & ProfessionalTennisPlayer(x)) -> GrandSlamUmpire(x))", "all x.((GrandSlamUmpire(x) | ProfessionalTennisPlayer(x)) -> GrandSlamUmpire(x))", "all x y.((Nadal(x) & GrandSlamUmpire(x) & (ProfessionalTennisPlayer(x) | ProfessionalUmpire(x))) -> GrandSlamUmpire(x,y))", "all x.((Nadal(x) & (GrandSlamUmpire(x) | ProfessionalTennisPlayer(x))) -> GrandSlamUmpire(x))", "all x.((Nadal(x) & GrandSlamUmpire(x) & (ProfessionalTennisPlayer(x) | ProfessionalTennisPlayer(x))) -> GrandSlamUmpire(x))", "all x.((GrandSlamUmpire(x) | ProfessionalTennisPlayer(x)) -> GrandSlamUmpire(x))", "all x.((GrandSlamUmpire(x) | ProfessionalTennisPlayer(x)) -> GrandSlamUmpire(x))", "all x y.((Nadal(x) & (GrandSlamUmpire(x) | ProfessionalTennisPlayer(x))) -> GrandSlamUmpire(x))", "all x.((Nadal(x) & (GrandSlamUmpire(x) | ProfessionalTennisPlayer(x))) -> GrandSlamUmpire(x))", "all x y.((Nadal(x) & (GrandSlamUmpire(x) | ProfessionalTennisPlayer(x))) -> GrandSlamUmpire(x))", "all x.((GrandSlamUmpire(x) | ProfessionalTennisPlayer(x)) -> GrandSlamUmpire(x))", "all x.((Umpire(x) | ProfessionalTennisPlayer(x)) -> GrandSlamUnderder(x))", "all x.((Northal(x) & GrandSlamUmpire(x)) | ProfessionalTennisPlayer(x)) -> GrandSlamUmpire(x))", "all x.((Nadal(x) & (GrandSlamUmpire(x) | ProfessionalTennisPlayer(x))) -> GrandSlamUmpire(x))", "all x.((Nandal(x) & (GrandSlamUmpire(x) | ProfessionalTennisPlayer(x))) -> GrandSlamUmpire(x))"]}
{"id": "folio_train_1776", "nl": "Businesses are either sanctioned or unsanctioned.", "fol": "all x.(((IsBusiness(x) -> IsSanctioned(x)) & IsSanctioned(x)) | (-(IsBusiness(x) -> IsSanctioned(x)) & -IsSanctioned(x)))", "prediction": ["all x y.((Business(x) & Stasoned(y)) | Unsanctioned(x,y))", "all x.(Business(x) -> (Sanctioned(x) | Unsanctioned(x)))", "all x.(Business(x) -> (Sanctioned(x) | Unsanctioned(x)))", "all x.(Business(x) -> (Sanctioned(x) | Unesanctioned(x)))", "all x.(Business(x) -> (Sanctioned(x) | Unsanctioned(x)))", "all x.(Business(x) -> (Sanctioned(x) | Unsanctioned(x)))", "all x.(Business(x) -> (Sanctioned(x) | Unsanctioned(x)))", "all x.(Business(x) -> (Sanctioned(x) | Unsanctioned(x)))", "all x.(Business(x) -> (Sanctioned(x) | Unsanctioned(x)))", "all x.(Business(x) -> (Sanctioned(x) | Unsanctioned(x)))", "all x.(Business(x) -> (Sanctioned(x,y) | Unsanctioned(x,z)))", "all x.(Business(x) -> (Sanctioned(x) | Unsanctioned(x)))", "all x.(Business(x) -> (Sanctioned(x) | Unsanctioned(x)))", "all x.(Business(x) -> (Sanctioned(x) | Unsanctioned(x)))", "all x.(Business(x) -> (Sanctioned(x) | Unsanctioned(x)))", "all x.((Business(x) & (Sanctioned(x) | Unsanctioned(x))) -> (Sanctioned(x) | Unsanctioned(x)))"]}
{"id": "folio_train_1777", "nl": "Sanctioned buisnesses are limited.", "fol": "all x.((IsBusiness(x) & IsSanctioned(x)) -> IsLimited(x))", "prediction": ["all x.(Beauty(x) -> Limited(x))", "all x.(SanctionedBaisness(x) -> Limited(x))", "all x.((Bushness(x) & Sanctioned(x)) -> Limited(x))", "all x.(SanctionedBoard(x) -> LimitedBizness(x))", "all x.(SanctionedBisness(x) -> Limited(x))", "all x.(SanctionedBubiness(x) -> Limited(x))", "all x.(SanctionedBushness(x) -> Limited(x))", "all x.(SanctionedBaisness(x) -> Limited(x))", "all x.(Bussiness(x) -> Limited(x))", "all x.(SanctionedBizness(x) -> Limited(x))", "all x.((SanctionedBouncement(x) & Limited(x)) -> Limited(x))", "all x.(SanctionedBoisness(x) -> Limited(x))", "all x.(SanctionedBubiness(x) -> Limited(x))", "all x.(SanctionedBird(x) -> Limited(x))", "all x.(SanctionedBulisness(x) -> Limited(x))", "all x.((Baisness(x) & Sanctioned(x)) -> Limited(x))"]}
{"id": "folio_train_1778", "nl": "Unsanctioned buisnesses are free.", "fol": "all x.((IsBusiness(x) & -IsSanctioned(x)) -> IsFree(x))", "prediction": ["all x.((Bubiness(x) & -Sanctioned(x)) -> Free(x))", "all x.(UnsanctionedBusiness(x) -> Free(x))", "all x.(UnsanctionedBoiler(x) -> Free(x))", "all x.((Baisness(x) & -Sanctioned(x)) -> Free(x))", "all x.(UnsanctionedBuisness(x) -> Free(x))", "all x.((Buisness(x) & Unsanctioned(x)) -> Free(x))", "all x.((Bbuse(x) & Unsanctioned(x)) -> Free(x))", "all x.(UnsanctionedBisness(x) -> Free(x))", "all x.((Business(x) & -Sanctioned(x)) -> Free(x))", "all x.(Bulletin(x) -> -Sanctioned(x))", "all x.((Biz.(Unsanctioned(x) & Bitz(x)) -> Free(x))", "all x.((Boisness(x) & -Sanctioned(x)) -> Free(x))", "all x.(UnsanctionedBeauty(x) -> Free(x))", "all x.(UnsanctionedBuisness(x) -> Free(x))", "all x.((Buisness(x) & -Sanctioned(x)) -> Free(x))", "all x.(UnsanctionedBeauty(x) -> Free(x))"]}
{"id": "folio_train_1779", "nl": "The Crude Oil Data Exchange is a buisness that isn't free.", "fol": "(IsBusiness(CrudeOilDataExchange) & -IsFree(CrudeOilDataExchange))", "prediction": ["all x.(CrudeOilDataExchange(x) -> (Baisnessn'tFree(x)))", "all x.((CrudeOilDataExchange(x) & -Free(x)) -> -Buisness(x))", "all x.((Business(x) & CrudeOilDataEchange(x)) -> -Free(x))", "all x.((Bizness(x) & CrudeOilDataExchange(x)) -> -Free(x))", "\"CrudeOilDataExchange\" - FreeBaisness(x))", "all x.(ConcrudeOilDataEchange(x) -> (Bainess(x) & -Free(x)))", "all x.(CruelOilDataExchange(x) -> (Fresh(x) & -Free(x)))", "all x.(Daily(x) -> (Required(x) & -Free(x)))", "All x.(CrudeOilDataExchange(x) -> (Buisness(x) & -Fresh(x)))", "all x.(CrudeOilDataExchange(x) -> -Free(x))", "all x.((CrudeOilDataExchange(x) & -Free(x)) -> CannotBeFree(x))", "(Broadness(s) & -Free(s))", "all x y.((CrudeOilDataExchange(x) & Business(y)) -> -Free(y))", "(Baisness(CrudeOilDataExchange) & -Free(CrudeOilDataExchange))", "all x y.((CrudeOilDataExchange(x) & Company(y)) -> -Free(x))", "all x.(CrudeOilDataExchange(x) -> (Bisness(x) & -Free(x)))"]}
{"id": "folio_train_1780", "nl": "Crude Oil Data Exchange is sanctioned.", "fol": "IsSanctioned(CrudeOilDataExchange)", "prediction": ["all x.((CrudeOilDataExchange(x) & Sanctioned(x)) -> Sanctioned(x))", "all x.(CrudeOilDataExchange(x) -> Signed(x))", "all x.((CrudeOilDataExchange(x) & Sensited(x)) -> Suspended(x))", "All x.(CrudeOilDataExchange(x) -> Sanctioned(x))", "all x.(CrudeOilDataExchange(x) -> Sanctioned(x))", "All x.(CrudeOilDataExchange(x) -> Sanctioned(x))", "all x.(CrudeOilDataExchange(x) -> Sustained(x))", "All x.(CrudeOilDataExchange(x) -> Sanctioned(x))", "all x y.((CrudeOilDataExchange(x) & CrudeOil(y)) -> Suspended(x))", "all x y z.((CrawledOilDataExchange(x) & CrudeOil(y) & Sannibalized(z)) -> Accepted(x,y))", "all x.(CrudeOilDataExchange(x) -> Sanctioned(x))", "All x.(ConsumeOilDataExchange(x) -> Sanctioned(x))", "Stonified CrudeOilDataExchange(x)", "All x.(CrudeOilDataExchange(x) -> Sanctioned(x))", "(Sanctioned(CDOE) | Sanctioned(OCTE))", "all x.(CrudeOilDataExchange(x) -> Sanctioned(x))"]}
{"id": "folio_train_1781", "nl": "Crude Oil Data Exchange is unsanctioned.", "fol": "-IsSanctioned(CrudeOilDataExchange)", "prediction": ["CrudeOilDataExchange.com & UnSanctioned(EXchange)", "CrudeOilDataExchange.com -Sanctioned.", "(Unsanctioned(CrudeOilDataExchange) & -Enabled(CrudeOilDataExchange))", "all x.(CrudeOilDataExchange(x) -> Unsanctioned(x))", "(Unsanctioned(crudeOilDataExchange))", "all x.((CrudeOilDataExchange(x) & -Sanctioned(x)) -> -Sanctioned(x))", "(NonSanctioned(CrudeOilDataExchange))", "all x y.((CrudeOilDataExchange(x) & CrudeOilData(y)) -> -Sanctioned(x))", "NullSanctionedCrudeOilDataExchange(CrudeOil)", "NutrientOilDataExchange(x) -> Unsanctioned(x))", "(Unsanctioned(crudeOilDataExchange))", "CrudeOilDataExchange(x) -Sanctioned(x))", "(Unsanctioned(crudeOilDataExchange)", "all x.(CrudeOilDataExchange(x) -> Unsanctioned(x))", "CrudeOilDataExchange (Unsanctioned)", "-Sanctioned(CrudeOilDataExchange)"]}
{"id": "folio_train_1782", "nl": "Crude Oil Data Exchange is limited.", "fol": "IsLimited(CrudeOilDataExchange)", "prediction": ["(Limited(crudeOilDataExchange) & Limited(crudeOilDateExchange))", "(LimitedCrudeOilDataExchange(c) & Limited(c))", "All x.(CrudeOilDataExchange(x) -> Limited(x))", "The CrudeOilDataExchange (RUDE(F3) & Limited(F))", "all x.(CrossOilDataExchange(x) -> Limited(x))", "all x.((CrudeOilDataExchange(x) & Limited(x)) -> Limited(x))", "all x.((CrudeOilDataExchange(x) & Limited(x)) -> Limited(x))", "all x.(CopperOilDataExchange(x) -> Limited(x))", "all x y.((CrudeOilDataExchange(x) & CrudeOilData(y)) -> Limited(x))", "(LimitedCrudeOilDataExchange(e))", "All x.(CrudeOilDataExchange(x) -> Limited(x))", "the CrudeOilDataExchange(x) -> Limited(x))", "the CrudeOilDataExchange(cr) is limited.", "all x.(CrudeOilDataExchange(x) -> Limited(x))", "all x.((GradeOilDataExchange(x) & Limited(x)) -> Limited(x))", "EstesPrimarily(CrudeOilDataExchange)"]}
{"id": "folio_train_1783", "nl": "When something is depressing, it is sad.", "fol": "all x.(IsDepressing(x) -> IsSad(x))", "prediction": ["all x.((Depressing(x) -> Sad(x))", "all x.((Depressing(x) & Sad(x)) -> Depressing(x))", "all x.((Depressing(x) & Sad(x)) -> Depressing(x))", "all x.(Depressing(x) -> Sad(x))", "all x.((Depressing(x) & Sufficient(x)) -> Sad(x))", "all x.(Depressing(x) -> Sad(x))", "all x.((AlwaysDepressing(x) & sad(x)) -> Depressing(x))", "all x.((Depressing(x) & Sad(x)) -> Depressing(x))", "all x.((Positive(x) & Sad(x)) -> Depressing(x))", "all x.((Depressing(x) & Sad(x)) -> Depressing(x))", "all x.(Depressing(x) -> Sad(x))", "all x.((Depressing(x) & Sad(x)) -> Depressing(x))", "all x.((Depressing(x) & Sad(x)) -> Depressive(x))", "all x.((Depressing(x) & Sad(x)) -> Depressing(x))", "all x.((Depressing(x) & Sad(x)) -> Depressing(x))", "all x.((Depressing(x) & Sad(x)) -> Depressing(x))"]}
{"id": "folio_train_1784", "nl": "V is depressing. ", "fol": "all x.(EntityV(x) -> IsDepressing(x))", "prediction": ["(Depressing(V) -> Depressing(V))", "all x.(V(x) -> Depressing(x))", "all x.(V.((V) & Depressing(v)) -> Depressing(v))", "V is depressing.", "All x.(V(x) -> Depressing(x))", "depressing.", "all x.(V(x) -> Depressing(x))", "A depressing.", "all x.(V(x) -> Depressing(x))", "Depressing.", "(Depressing(V) -> Depressing(V))", "(Cruelty(V) & Depressing(v))", "(Depressing(V) -> Depressing(V)))", "all x.(V isDepressing(x)", "all x.(V(x) -> Depressing(x))", "all x.(V(x) -> Depressing(x))"]}
{"id": "folio_train_1785", "nl": "V is invigorating", "fol": "all x.(EntityV(x) -> Invigorating(x))", "prediction": ["all x y z.((Via(x) & Vigorating(y) & Vitalizing(z)) -> Invigorating(x,z))", "all x y.((Visual(x) & Invigorating(y)) -> Stimulates(x,y))", "Invigorating(V)", "V \u2013 InvigoratingV.", "V is revigorating.", "V is invigorating.", "V is energizerating.", "(V is Invigorating(V).)", "all x.(Visual(x) -> Invigorating(x))", "(V) (Invigorating(V) & Invigorating(V)))", "invigorating.", "Emanating(V) -> Invigorating(V))", "(InvigoratingV)!", "all x.((Visiting(x) & Invigorating(x)) -> Invigorating(x))", "All x y z.((V,y) & Invigorating(z)) -> Invigorating(y,z))", "V is Invigorating(V) -> Invigorate(V))"]}
{"id": "folio_train_1786", "nl": "Palstaves are a type of early bronze axe.", "fol": "all x.((IsPalstave(x) -> FromPeriod(x,Earlybronzeage)) & IsAxe(x))", "prediction": ["all x.((Pallstaves(x) & EarlyBronzeAxe(x)) -> AntiqueAxe(x))", "all x.(Palstaves(x) -> EarlyBronzeAxe(x))", "all x.(Palstaves(x) -> EarlyBronzeAxe(x))", "all x.(Palstaves(x) -> (EarlyBronzeAxe(x) & IsFish[x)))", "all x.(Palstaves(x) -> (EarlyBronzeAxe(x,y) & AssistsEarlyBronze(y)))", "all x.(Palstaves(x) -> (EarlyBronzeAxe(x) & AvailableInAxe(x)))", "all x y z.((Palstaves(x) & BronzeAxe(y) & BronzeAxe(z)) -> AlmostTheStory(x,y,z))", "all x.(Palestaves(x) -> BronzeAxe(x))", "all x.(Palstaves(x) -> EarlyBronzeAxe(x))", "all x.(Palstaves(x) -> (EarlyBronzeAxe(x) | LateBronzeAxe(x)))", "all x.(Palstaves(x) -> (EarlyBronzeAxe(x) & StoneAxe(x)))", "all x.(Palstaves(x) -> (EarlyBronzeAxe(x)))", "all x.(Palstaves(x) -> (ErgonomicBronzeAxe(x) & DatedFrom(x,y)))", "all x.(Pastaves(x) -> (EarlyBronzeAxe(x) & HasBannerAxe(x)))", "all x.(Palstave(x) -> (EarlyBronzeAxe(x) & -(King's Axe(x) | -King's Axe(x))))", "all x.(Palstaves(x) -> EarlyBronzeAxe(x))"]}
{"id": "folio_train_1787", "nl": "Commonly found in northern, western and south-western Europe, palstaves are cast in moulds.", "fol": "all x y.((IsPalstave(x) & IsMould(y)) -> (FoundInRegion(x,Northerneurope) & FoundInRegion(x,Westerneurope) & FoundInRegion(x,SouthWesternEurope) & CastUsingMould(x,y)))", "prediction": ["all x.(Pestave(x) -> (LostIn(x,NorthernEurope) & FoundIn(x,WideEurope) & FoundIn(x,SouthWideEurope)))", "all x.(Palstaves(x) -> (FindsInNorthern(x) & FindsInWestern(x) & FindsInSouthWest(x)))", "all x.(Palstaves(x) -> (FoundInNorthernWideAndSouthWestEurope(x) & CastInMolds(x)))", "all x.(Palstaves(x) -> (NorthernEurope(x) | WesternEurope(x) | SouthWestEurope(x)))", "all x.(Palstaves(x) & FoundIn(x,NorthernEurope) & FoundIn(x,WesterlyEurope) & FoundIn(x,SouthWestEurope))", "all x y.((Palstaves(x) & Northern(y) & Western(y) & SouthWest(y)) -> CastInMolds(x,y))", "all x.(Palestave(x) -> (FoundInNorthernEurope(x) & FoundInWesterlyEEurope(x) & FoundInSouthWesterlyEurope(x) & CastInMolds(x)))", "all x.(Pallstaves(x) -> (FindsIn(x,NorthernEurope) & FoundIn(x,WestwesternEurope) & FoundIn(x,SouthWestEurope)))", "all x.(Palstave(x) -> (FindsIn(x,Nordwest-Europe) & FoundIn(x,WesternEurope) & FoundIn(x,SouthWest-Europe)))", "all x.(Palstaves(x) -> (exists y.(NorthernEuropean(y) & FoundIn(x,y)) | exists z.(WestEuropean(z) & FoundIn(x,z)))))", "all x.(Pastaves(x) -> (NorthernSurplus(x) | WesternSurplus(x) | SouthWestSurplus(x)))", "all x.(Palstaves(x) -> (Moulds(x) | CastIn(x)) | FindsIn(x,northwest,west) | FindsIn(x,southwest)))", "all x.(Pallstaves(x) -> CastInMolds(x))", "all x y.((Pallstaves(x) & Northern(y) & Western(y) & SouthWestensugar(y)) -> CastInMolds(x,y))", "all x.(Palstaves(x) -> (FindsIn(x,NorthernEurope) & FoundIn(x,WestensandSouthWestEurope)))", "all x.(Palstave(x) -> (ConsideredIn(x,northern) & FoundIn(x,winter) & FoundIn(x,southwest)))"]}
{"id": "folio_train_1788", "nl": "John Evans is an archeologist who popularized the term \"palstave\".", "fol": "(IsArcheologist(Johnevans) & PopularizedTerm(Johnevans,Termpalstave))", "prediction": ["John Evans, Archeologist and PopularizedPalstave(John,John))", "(Archeologist(JohnEvanson) & PopularizedPalstave(JohnEvans))", "John Evans (Archeologist) & PopularizedPalstave(John))", "(Archeologist(JohnEvans) & PopularizedPalstave(JohnEvans))", "JohnEvans(JohnEvans) is an archeologist from Massachusetts who popularized\"palstave\"", "John Evans (Archeologist) & PopularizedPalstave(John,evans))", "(Archeologist(JohnEvans) & PopularizedTerm(JohnEvans))", "John Evans, archeologist and Palstavepopularizer(JohnEvans)", "John Evans (Archeologist) & Popularized(John,Palstave))", "John Evans, archeologist, popularized(JohnEvansTerm(John,palstave,a) & Archeologist(John))", "(Archeologist(JohnEvans) & PopularizedTermpalstave(JohnEvans))", "John Evans (archeologist) & PopularizedPalstave(John))", "(Archeologist(JohnEvans) & PopularizedTerm(JohnEvans,palstave))", "(Archeologist(JohnEvans,Palstave) & Popularized(JohnEvans,palstave))", "John Evans (Archeologist) & PopularizedPalstave(JonEvans))", "(Archeologist(JohnEvans) & PopularizedPalstave(JohnEvans))"]}
{"id": "folio_train_1789", "nl": "A paalstab is not an axe, but rather a digging shovel.", "fol": "all x.((IsPaalstab(x) -> -IsAxe(x)) & IsDiggingShovel(x))", "prediction": ["all x.(Paalstab(x) -> (-Axe(x) & DiggingSparrow(x)))", "all x.(Paalstab(x) -> (-Axe(x) & DiggingPulley(x)))", "all x.(Paalstab(x) -> (-Axe(x) & DiggingSkull(x)))", "all x.(Paalstab(x) -> (-Axe(x) & DiggingPull(x)))", "all x.(Paalstab(x) -> (-Axe(x) & DiggingPledge(x)))", "all x.(Paalstab(x) -> (-Axe(x) & DiggingSheel(x)))", "all x.(Palstab(x) -> (-Axe(x) & DiggingPull(x)))", "all x.(Paulstab(x) -> (-Axe(x) & DiggingShelter(x)))", "all x.(Paalstab(x) -> (-Axe(x) & DiggingSpool(x)))", "all x.(Paalstab(x) -> (-Axe(x) & DiggingShelle(x)))", "all x.(Paalstab(x) -> (-Axe(x) & DiggingPull(x)))", "all x.(Paalstab(x) -> (-Axe(x) & DiggingPull(x)))", "all x.(Paalstab(x) -> (-Axe(x) & DiggingPuck(x)))", "all x.(Paalstab(x) -> (-Axe(x) & DiggingPulling(x)))", "all x.(Paalstab(x) -> (-Axe(x) & DiggingSheel(x)))", "all x.(Paalstab(x) -> (-Axe(x) & DiggingShell(x)))"]}
{"id": "folio_train_1790", "nl": "John Evans Popularized the term paalstab.", "fol": "PopularizedTerm(Johnevans,Termpaalstab)", "prediction": ["(Popularized(JohnEvels) & Paalstab(JohnEves))", "John Evans PopularizedTermPaalstab(John))", "John Evans PopularizedTermPAALstab(JohnEvans)", "(PublicizedTermPaalstab(JohnEvans))", "(Paalstab(JohnEvans) & Popularized(JohnEvans))", "John Evans PopularizedTerm(JohnEvans)", "all x.(PopulatedTermPalstab(x) -> JohnEvans(x))", "John Evans PopularizedPaalstab(John Evans,1945)", "John Evans PopularizedTermPaalstab(JohnEvans)", "popularized terms such as Palstab(JohnEvans)", "John Evans PopularizedStatut(JohnEvans)", "John Evans PopularizedSpoilage(JohnEvans)", "John Evans PopulatedTermPalstab(JohnEvans)", "-PopularizedTermMean(JohnEvans,Paulstab)", "John Evans PopularizedTheTermPaalstab(JohnEaves)", "John Evans PopularizedTermPALstab(John Evans)"]}
{"id": "folio_train_1791", "nl": "There is an axe that is commonly found in Western Europe.", "fol": "exists x.(IsAxe(x) & FoundInRegion(x,Westerneurope))", "prediction": ["exists x.(Axe(x) & FoundInWESTEurope(x))", "exists x y.(Axe(x) & WesternEurope(y) & CommonlyFind(x,y))", "exists x.(Axe(x) & CommonlyFoundInWestEurope(x))", "exists x.(Axe(x) & CommonlyFoundIn(x,WestEurope))", "exists x.(Axe(x) & FoundIn(x,WestEurope))", "exists x.(Axe(x) & FoundInWestEurope(x))", "exists x.(Axe(x) & CommonlyFindedIn(x,WestEurope))", "exists x.(Axe(x) & WesternEurope(x))", "exists x.(Axe(x) & CommonlyFoundIn(x,WestEurope))", "exists x.(Axe(x) & CommonlyFoundIn(x,WestEurope))", "exists x.(Axe(x) & CommonlyFindsIn(x,WestEurope))", "exists x.(Axe(x) & CommonlyFindsInOf(x,WestEurope))", "exists x.(Axe(x) & CommonlyFoundInWestEurope(x))", "exists x.(Axe(x) & FoundIn(x,WestEurope))", "exists x.(Axe(x) & FoundIn(x,WestEurope))", "exists x.(Axe(x) & FoundInWesternEurope(x))"]}
{"id": "folio_train_1792", "nl": "Archeologists haven't popularized anything.", "fol": "-exists x.(IsArcheologist(x) & exists y.PopularizedTerm(x,y))", "prediction": ["all x.(Archeologist(x) -> -Popularized(x))", "all x.(Archeologist(x) -> -Popularized(x))", "all x.(Archeologist(x) -> -PopularizedAnything(x,y))", "all x.(Archeologist(x) -> -PopularizedPetlin(x))", "all x.(Archeologist(x) -> -Popularized(x))", "all x.(Archeoologist(x) -> -Popularized(x))", "all x.(Archeologist(x) -> -Popularized(x))", "all x.(Archeologist(x) -> -Popularized(x))", "all x.(Archeologist(x) -> -Popularized(x))", "-Populated(archeologist)", "all x y.((Archeologist(x) & Popularized(y)) -> -Popularized(x,y))", "all x.(Archeologist(x) -> -Popularized(x))", "all x y.((Archeologist(x) & Popularized(y)) -> -Popularized(x))", "all x.(Archeologist(x) -> -Popularized(x))", "all x.(Archeologist(x) -> -PopularizedSeason(x))", "all x.(Archeologist(x) -> -Popularized(x))"]}
{"id": "folio_train_1793", "nl": "Koei Tecmo is a Japanese video game and anime holding company.", "fol": "(IsJapanese(Koeitecmo) & IsVideoGameHoldingCompany(Koeitecmo) & IsHoldingCompany(Koeitecmo))", "prediction": ["all x.(KoeiTecmo(x) -> (JapaneseVideoGameAndAnimeHoldingCompany(x) & JapaneseAnimalHoldingCompany(x)))", "the Japanese WebHostingCompany(koeitechmo) o.((VideoGameAndAnime(n) & JapaneseHostingCompany(y)) -> HoldsIn(koeiTecmo,y))", "(Japanese(KoeiTecmo) | HoldingCompany(KeiTechmo))", "all x.(KoeiTecmo(x) -> (VideoGameAndAnimeReleasingCompany(x) & JapaneseHoldingCompany(x)))", "all x.(KoeiTecmo(x) -> (VideoGame(x) & AnimeHolding(x)))", "all x.(CoeiTechmo(x) -> (JapaneseVideoGameAndAnimeHoldingCompany(x) & JapaneseHoldingCompany(x)))", "all x.((JapaneseVideoGame(x) & JapaneseAnimeHoldingcompany(x)) -> KoeiTecmo(x))", "all x y.((KoeiTecmo(x) & JapaneseVideoGame(y) & JapaneseAnimeHoldingCompany(z)) -> Holds(x,y,z))", "KoeiTecmo(Japanese)", "(JapaneseVideoGameAndAnimeHolding(KoeiTecmo) & FoundedIn(KoeiTechmo,Japan))", "all x.((JapaneseVideoGame(x) | Japan'sAnimeHolding(x)) -> KoeiTecmo(x))", "all x.((JapaneseVideoGame(x) & JapaneseAnimeHolding(x)) -> KoeiTecmo(x))", "all x.(KoeiTecmo(x) -> (JapaneseVideoGame(x) & JapaneseAnimeHostingCompany(x)))", "all x.((JapaneseVideoGame(x) & JapaneseAnimeHolding(x)) -> KoeiTecmo(x))", "all x.(KoeiTecmo(x) -> (JapaneseVideoGameEntertainment(x) & JapaneseAnimeHoldingCompany(x)))", "all x.(KoeiTecmo(x) -> (JapaneseVideoGameAndAnimalHoldingCompany(x) & HasHoldingCompany(x)))"]}
{"id": "folio_train_1794", "nl": "Holding companies hold several companies.", "fol": "all x.exists y.(IsHoldingCompany(x) -> (IsCompany(y) & HoldsCompany(x,y)))", "prediction": ["all x y.((HoldingCompany(x) & Company(y)) -> Holds(x,y))", "all x.(HoldingCompany(x) -> HoldsCompanies(x))", "exists x.(HostingCompany(x) & HoldsCompanies(x))", "exists x.(HoldingCompany(x) & HoldsCompany(x))", "all x.(HoldingClient(x) -> HoldsSeveralCompanies(x))", "exists x.exists y.(HoldingCompany(x) & Company(y) & Holds(x,y))", "all x.(HoldingCompany(x) -> HoldsSeveralCompanies(x))", "all x.(HoldingCompany(x) -> HoldsSeveralCompanies(x))", "(HoldingCompany(x) & HoldsManyCompanies(x))", "all x.(HoldingCompany(x) -> HoldsVariousCompanies(x))", "all x.(HostingCompany(x) -> HoldsGroup(x))", "all x.(HoldingCompany(x) -> HoldsSeveralCompanies(x))", "all x.(HoldingCompany(x) -> HoldsCompanies(x))", "all x.(HoldingCompany(x) -> HoldsSeveralCompanies(x))", "all x.(HostingCompany(x) -> HoldsCompany(x,d))", "all x y.((HoldingCompany(x) & Company(y)) -> Holds(x,y))"]}
{"id": "folio_train_1795", "nl": "Tecmo was disbanded in Japan, while Koei survived, but was renamed.", "fol": "(WasDisbanded(Tecmo) & HasSurvived(Koei_) & WasRenamed(Koei_))", "prediction": ["Tecmo (disbanded inJapan) & Koei(b) & SurvivedAtWaiver(t))", "(all x y z.((Tecmo(x) & Japan(y)) -> Disbanded(x)) & ((Koei(z) & Survived(z)) -> Renamed(x,z))))", "(all x y.(Tecmo(x) -> DisbandedInJapan(x)) & (Koei(y) -> Survived(y)) & -Renamed(y)))", "(all x y z.(Tecmo(x) -> DisbandedInJapan(x)) & (Koei(y) -> Survives(y,z) & HasName(z,x)))", "(all x y z.((Tecmo(x) & Japan(y)) -> Disbanded(x,y)) & ((Coei(z) & Japan(z)) -> Survived(z,y)))", "(all x.(Tecmo(x) -> DisbandedInJapan(x)) & (Koei(x) -> Remains(x)))", "(all x.(Tecmo(x) -> DisbandedInJapan(x)) & (Koei(x) -> Suffered(x)) & OriginallyRenamed(x)))", "(all x y.(Tecmo(x) -> DisbandedInJapan(x)) & (Cowee(y) -> Survives(y)) & -NewName(y)))", "(all x y.(Tecmo(x) -> DisbandedInJapan(x,y)) & (Koei(y) -> Survives(y)) & -Renamed(y)))", "(all x.(Tecmo(x) -> DisbandedInJapan(x)) & all y.(Koei(y) -> Survivive(y) & Renamed(y)))", "(all x.(Tecmo(x) -> DisbandedInJapan(x)) & (Koei(x) -> Survives(x) & Renamed(x)))", "(all x.(Tecmo(x) -> DisbandedInJapan(x)) & all y.(Koei(y) -> (Resurvived(y) & Renamed(y))))", "(all x.(Tecmo(x) -> DisbandedInJapan(x)) & (Koei(x) -> Survives(x)) & -Renamed(x))", "(all x y.((Tecmo) & PartOfJapanese(x)) -> Disbanded(x,Japanese)) & ((Koei) & PartOfJapanese(y)) -> Survives(y,y)))", "(all x.(Tecmo(x) -> DisbandedInJapan(x)) & all y.(Koei(y) -> (Researched(y) | Renamed(y)))))", "all x y.((Tecmo(x) & Koei(y)) -> (Disbanded(x) & Survive(y) & Renamed(y)))"]}
{"id": "folio_train_1796", "nl": "Video game holding companies are holding companies.", "fol": "all x.(IsVideoGameHoldingCompany(x) -> IsHoldingCompany(x))", "prediction": ["all x.(VideoGameHoldingCompany(x) -> HoldingCompany(x))", "all x y.((VideoGameHoldingCompany(x) & HoldingCompany(y)) -> HoldingCompany(x))", "all x.(VideoGameHoldingCompany(x) -> HoldingCompany(x))", "all x.(VideoGameHoldingCompany(x) -> HoldingCompany(x))", "all x.(VideoGameHoldingCompany(x) -> HoldingCompany(x))", "all x.(VideoGameHoldingCompany(x) -> HoldingCompany(x))", "all x.(VideoGameHoldingCompany(x) -> HoldingCompany(x))", "all x.(VideoGameHoldingClub(x) -> HoldingCompany(x))", "all x.(VideoGameHoldingCompany(x) -> HoldingCompany(x))", "all x.(VideoGameHoldingCompany(x) -> HoldingCompany(x))", "all x y.((VideoGameHoldingCompany(x) & HoldingCompany(y)) -> HoldingCompany(x))", "all x.(VideoGameHoldingCompany(x) -> HoldingCompany(x))", "all x.(VideoGameHoldingCompany(x) -> HoldingCompany(x))", "all x.(HoldingVideoGame(x) -> HoldingCompany(x))", "all x.(VideoGameHoldingCompany(x) -> HoldingCompany(x))", "all x.(VideoGameHoldingCompany(x) -> HoldingCompany(x))"]}
{"id": "folio_train_1797", "nl": "Koei Tecmo holds another company.", "fol": "exists y.(IsCompany(y) & HoldsCompany(Koeitecmo,y))", "prediction": ["KoeiTecmo HoldsOtherCompany(x)", "holds another company.", "(HoldsAnotherCompany(KeiTecmo,Company))", "all x.(KeiTecmo(x) -> HoldsOtherCompany(x))", "(exists x.(KeiTecmo(x) & Holds(x,Company)))", "all x y.((KeiTecmo(x) & Company(y)) -> Holds(x,y))", "(SheltersCompany(KeiTecmo) | HoldsCompany(KeiTecmo))", "KoeiTecmo HoldsOtherCompany(x)", "(HoldsCompany(KeiTecmo) & HoldsCompany(KeiTecmo))", "existed x y.(Company(x) & KoeiTecmo(y) & Holds(y,x))", "exists x.(KoeiTecmo(x) & Holds(x,company))", "all x.(Tecmo(x) -> HoldsAnotherCompany(x))", "all x.(KoeiTecmo HoldsCompany(x) -> HoldsCompany(x))", "the other holdingsCoeiTecmo.", "KoeiTecmo Holds(i) & Company(i) & Company(i))", "all x y.((KeiTecmo(x) & Company(y)) -> Holds(x,y))"]}
{"id": "folio_train_1798", "nl": "Tecmo holds another company.", "fol": "exists y.(IsCompany(y) & HoldsCompany(Tecmo,y))", "prediction": ["exists x.(Tecmo(x) & Holds(x,y))", "all x.(Tecmo(x) -> HoldsAnotherCompany(x))", "all x y.((Tecmo(x) & Company(y)) -> Holds(x,y))", "exists x.(Tecmo(x) & Company(y) & Holds(x,y))", "all x y.((Tecmo(x) & Company(y)) -> Holds(x,y))", "all x.(Tecmo(x) -> HoldsAnotherCompany(x))", "all x y.((Tecmo(x) & Company(y)) -> Holds(x,y))", "all x.(Tecmo(x) -> HoldsAnotherCompany(x))", "exists x y.(Tecmo(x) & Holds(x,y))", "has other company in the same company.", "all x y.((Tecmo(x) & Company(y)) -> Holds(x,y))", "all x y.((Tecmo(x) & Company(y)) -> Holds(x,y))", "(Tecmo HoldsCompany(Tecmo) & exists x.(Company(Tecmo) & HoldsCompany(Tecmo)))", "all x.(Tecmo(x) -> HoldsAnotherCompany(x))", "exists x.(Tecmo(x) & HoldsEarlyCompany(x))", "all x.(Tecmo(x) -> HoldsAnotherCompany(x))"]}
{"id": "folio_train_1799", "nl": "Koei Tecmo holds anime.", "fol": "HoldsCompany(Koeitecmo,Anime)", "prediction": ["(HoldsAnime(KoeiTecmo)", "all x.(KoeiTecmo(x) -> HoldsAnime(x))", "(HoldsAnime(e) & KoeiTecmo(e))", "holdsAnime(k)", "holdsAnime(koei-Tecmo)", "all x.((KoeiTecmo(x) & Anime(y)) -> Holds(x,y))", "all x.((KoeiTecmo(x) & anime(x)) -> Holds(x,y))", "KoeiTecmo HoldsAnime(k)", "holdsAnime(KoeiTecmo)", "all x.(KoeiTecmo(x) -> HoldsAnime(x))", "all x.(KoeiTecmo(x) -> HoldsAnime(x))", "holdsAnime(KoeiTecmo,Anime,Anime)", "exists x.(KoeiTecmo(x) & HoldsAnime(x))", "all x y.((Kei(x) & Tecmo(y)) -> HoldsAnime(x,y))", "(Holds(kokei,y) & Anime(y))", "KoeiTecmo HoldsAnime(k)"]}
{"id": "folio_train_1800", "nl": "The PlayStation EyeToy is a camera accessory for the Playstation 2. ", "fol": "CameraAccessoryForSystem(Pseyetoy,Ps2)", "prediction": ["all x y.((Playstation(x) & EyeToy(y)) -> CameraAdjustment(x,y))", "(ApplianceForPlaystation2(EyeToy) & AccessoryForPlaystation2.)", "all x y.((Playstation(x) & CameraAccessories(y)) -> (EyeToy(x,y) & Playstation2(y)))", "all x.(Playstation2EyeToy(x) -> CameraAccessory(x))", "all x.(PlaystationToy(x) -> CameraAssessorForPlaystation2(x))", "all x y z.((Playstation(x) & EyeToy(y) & Playstation2(z) & AvailableOn(y,z)) -> CameraAdjustment(y,z))", "all x.((PsystolExeyToy(x) & CameraAdjustment(x)) -> ConnectsPlaystation2(x))", "(CameraAccessories(Playstation2): EyeToy(Playstation2))", "all x y.((PhoneEyeToy(x) & Playstation2(y)) -> CameraAdjustment(x,y))", "all x y z w.((Psyssy(x) & EyeToy(y) & Playstation2(z)) -> CameraAccessory(x,y,z))", "all x y.((PsysosEyeToy(x) & Playstation2(y)) -> CameraAccessories(x,y))", "all x.(Playstation2(x) -> EyeToy(x))", "all x.((Playstation2EndowToy(x) | Playstation2EndowToy(x)) -> CameraAccessories(x))", "the PlayStationEyestoy(s) & CameraAdjustment(s,Playstation2) & ForPlaystation2(s))", "all x.(Playstation(x) -> EyeToy(x))", "all x.(EyeToy(x) -> CameraAdjustment(x))"]}
{"id": "folio_train_1801", "nl": "The PlayStation Eye is a camera accessory for the Playstation 3.", "fol": "CameraAccessoryForSystem(Pseye,Ps3)", "prediction": ["all x.(PlaySPACEEye(x) -> CameraAdjustment(x))", "all x y z.((PlaystationEye(x) & CameraAdjustment(y) & Playstation3(z)) -> (Touchs(x,y,z) | Touchs(x,y)))", "all x y z.((Playstation(x) & CameraAddition(y) & Gamestation(z) & ApplePlaystation3(y)) -> (GlassPhoneHair(x) & Player3(z)))", "all x.(PlaystationEyes(x) -> CameraAccessoryForPlaystation3.", "all x.(PlaystationEye(x) -> (CameraAccessory(x) & CameraAppliance(x) & Playstation3(x)))", "all x.((PlaystationEye(x) & Playstation3(x)) -> CameraAccessories(x))", "all x.(PlaystationEye(x) -> CameraAccessory(x))", "all x.(PsysexEye(x) -> (CameraAdjustment(x) & ForPlaystation3)))", "all x.(Playstation3(x) -> CameraAccessories(x))", "(CameraAdjustment(penetration) & forPlaystation3(penetration3))", "(CameraAccessoriesForPlaystation3).)", "all x y.((Playstation(x) & CameraAdjustment(x,y)) -> (Accessories(x,y) & Playstation3(x)))", "all x.(PSExec(x) -> (CameraAdjustment(x,Playstation3,Playstation3)))", "all x y.((ProsysTwist(x) & Playstation3(y)) -> CameraAtoma(x,y))", "all x.(PlaystationEye(x) -> (CameraAdjustment(x) & Playstation3(x)))", "all x.((PsyssoftEye(x) & Playstation3(x)) -> CameraAccessories(x))"]}
{"id": "folio_train_1802", "nl": "The Playstation Camera is a camera accessory for the Playstation 4 and the Playstation 5.", "fol": "(CameraAccessoryForSystem(Pscamera,Ps4) & CameraAccessoryForSystem(Pscamera,Ps5))", "prediction": ["(AdjustableToPlaystation(Playstation4) & AdjustableToPlaystation5(Playstation3))", "(AdditionalCameraForPlaystation4AndPlaystation5(Playstation4))", "all x.(PlaystationCamera(x) -> (AdjustableForPlaystation(x) & AdjustableForPlaystation(x)))", "all x.(PlaystationCamera(x) -> (Adjustment(x) & CompatibleWithPlaystation4AndPlaystation5)))", "all x.(PlaystationCamera(x) -> (ApplicationForPlaystation(x) & ApplicationForPlaystation(x\")))", "(ComputerAdjustment(Playstation4) and CameraAdjustment(Playstation5))", "(CameraAppl\u00e9ment(Playstation) & CompatibleWithPlaystation4AndPlaystation5.(Playstation6+Playstation6))", "all x.(PlaystationCamera(x) -> (CameraApplicationForPlaystation(x,Playstation4) & CameraApplicationForPlaystation(x,Playstation5)))", "(CameraAdjustment(Playstation4) & CameraAdjustment(Playstation5))", "all x.(PlaystationCamera(x) -> (CameraAccessorium(x) & (Playstation4L) | Playstation5)L))))", "all x y z.((PlaystationCamera(x) & Playstation4(y) & Playstation5(z)) -> (Appliance(x,y) | Appliance(x,z)))", "all x.(PlaystationCamera(x) -> (CoastAppliance(x,Playstation4) & Playstation(5)))", "all x.(PlaystationCamera(x) -> (Application(x,Playstation4) | Application(x,Playstation5)))", "all x.(PlaystationCamera(x) -> (CameraAdjustment(x,Playstation4)) & CameraAdjustment(x,Playstation5)))", "all x.(Playstation(x) -> (AdjustableToPlaystation(x,4) & AdjustableToPlaystation(x,5)))", "(ApplianceApplianceForPlaystation4AndPlaystation5(CameraAppliance(Playstation4)) & SupportsPlaystation6 and SupportsPlaystation5."]}
{"id": "folio_train_1803", "nl": "Camera accessory for the system is compatible with that system", "fol": "all x y.(CameraAccessoryForSystem(x,y) -> IsCompatibleWith(x,y))", "prediction": ["all x y z.((CameraAppliance(x) & System(y) & System(z) & CompatibleWith(x,y)) -> CompatibleWith(x,z))", "all x y.((CameraAdjustment(x) & System(y) & CompatibleWith(x,y)) -> Compatible(x,y))", "all x.((CameraAccessorium(x) & System(x)) -> Compatible(x,y))", "all x y z.((CameraAdjustment(x) & System(y) & System(z)) -> CompatibleWith(x,y,z))", "all x y.((CameraAccessory(x) & System(y)) -> CompatibleWithSystem(x,y))", "all x.((CameraAccessories(x) & System(x)) -> Compatible(x,y))", "all x y.((CameraAccessories(x) & System(y)) -> Compatibility(x,y))", "all x y.((CameraAdjustment(x) & System(y)) -> Compatible(x,y,z))", "all x y.((Camera(x) & System(y) & CompatibleWith(x,y)) -> Compatible(x,y))", "all x.((Appliance(x) & Camera(x) & CompatibleWithSystem(x)) -> CameraAdjustment(x,CompatibleWithSystem(x))", "all x y z.((CameraAdjustment(x) & System(y) & System(z) & CompatibleWith(x,y,z)) -> CameraAdjustment(x,y))", "all x y.((Assistant(x) & System(y)) -> Compatible(x,y))", "all x.(CompatibleWithSystem(x,System) -> CameraAdjustment(x))", "all x.((CameraAdjustment(x) & System(x)) -> CompatibleWithSystem(x))", "all x.((CameraAdjustment(x) & System(x)) -> CompatibleWithSystem(x,y))", "all x.(CameraAdjustment(x) -> CompatibleWithSystem(x))"]}
{"id": "folio_train_1804", "nl": "Only the Playstation Camera is compatible with more than one system.", "fol": "(-IsCompatibleWith(Pseye,Ps2) & -IsCompatibleWith(Pseye,Ps4) & -IsCompatibleWith(Pseye,Ps5) & -IsCompatibleWith(Pseyetoy,Ps3) & -IsCompatibleWith(Pseyetoy,Ps4) & -IsCompatibleWith(Pseyetoy,Ps5))", "prediction": ["All x.(PlaystationCamera(x) -> CompatibleWithMultipleSystems(x))", "all x.(PlaystationCamera(x) -> Compatible(x,multipleSystems))", "all by x y.((PlaystationCamera(x) & System(y)) -> Compatible(x,y))", "all x.(PlaystationCamera(x) -> CompatibleWithMoreThanOneSystem(x))", "all x.(PlaystationCamera(x) -> CompatibleWithMultipleSystems(x))", "all x.(PlaystationCamera(x) -> CompatibleWithMultipleSystems(x))", "all x y.((PlaystationCamera(x) & System(y)) -> CompatibleWith(x,y))", "all x.(PlaystationCamera(x) -> CompatibleWithMoreThanOneSystem(x))", "all x.(PlaystationCamera(x) -> CompatibleWithMultipleSystems(x))", "all x y.((PlaystationCamera(x) & System(y)) -> Compatible(x,y))", "all x.(PlaystationCamera(x) -> CompatibleWithMultipleSystems(x))", "all x.(PlaystationCamera(x) -> CompatibleWithMoreThanOneSystem(x))", "all x.(PlaystationCamera(x) -> CompatibleWithMultipleSystems(x))", "all x.(PlaystationCamera(x) -> CompatibleWithMultipleSystems(x))", "all x y.((PlaystationCamera(x) & System(y) & CompatibleWith(x,y)) -> CompatibleWith(x,y))", "all x.(PlaystationCamera(x) -> CompatibleWithMoreThanOneSystem(x))"]}
{"id": "folio_train_1805", "nl": "The Playstation Eye can be used with the Playstation 2 and the Playstation 3.", "fol": "(IsCompatibleWith(Pseye,Ps2) & IsCompatibleWith(Pseye,Ps3))", "prediction": ["(PlaystationEye(Playstation2) & Playstation3(Playstation2))", "In both Playstation2 and Playstation3 (Playstation2 and Playstation3))", "(UsedWithPlaystation2(Playstation2) & UsedWithPlaystation3(Playstation2))", "all x y.((PlaystationEye(x) & Playstation2(y)) -> (Used(x,y) & Used(x,y)))", "all x y.((PlaystationEye(x) & Playstation2(y) & Playstation3)) -> (UsedWith(x,y) & UsedWith(x,x)))", "ALL x.(PlaystationEye(x) -> (UsedWithPlaystation(x,2) & UsesPlaystation(x,3)))", "(EnablesPlaystation(Eye) & UsesPlaystation2(Eye) & -UsesPlaystation3(Eye))", "(PlaystationEye(PlaystationS1) & Playstation3(Playstation2))", "All x.(PlaystationEye(x) -> (UsedWithPlaystation2&UsedWithPlaystation3).))", "(PlaystationEye(Playstation2) & Playstation3(Playstation2))", "(PlaystationEye(Playstation2) -> (UsedOnPlaystation2&UsedOnPlaystation3)))", "All x.(PlaystationEye(x) -> (InteractsWithPlaystation(x,Playstation2) & WorksWithPlaystation(x,Playstation3)))", "all x.(PlaystationEye(x) -> (Playstation2(x) | Playstation3)(x)))", "(UsedWithPlaystation2(Playstation2) & UsedWithPlaystation3(Playstation3))", "(PlaystationEye(Touch-OfPlaystation2),Playstation3A,Playstation2,Playstation3,Playstation3),Playstation3A,Playstation3.(PlaystationEye(Touch-OfPlaystation2),Playstation3A,Playstation2,Playstation3A,Playstation3C,Playstation3))", "(Playstation2Eye(Playstation2) -> UsedWithPlaystation3))"]}
{"id": "folio_train_1806", "nl": "The Playstation EyeToy is compatible with the Playstation 2.", "fol": "IsCompatibleWith(Pseyetoy,Ps2)", "prediction": ["All x y.((PlaystationEyeToy(x) & Playstation2(y)) -> CompatibleWithApplication(x,y))", "(CompatibleWithPlaystation2) & compatibleWithPlaystation2)", "all x.(PlaystationEyeToy(x) -> Compatible(x,Playstation2,Playstation2))", "Der PlaystationEyeToy(x) & Playstation2(x))", "The PlaystationEyeToy(Playstation2) is compatible with Playstation 2.", "*IsCompatibleWithPlaystation2(e) & Playstation2.Pintoy(e)", "all x y.((Playstation(x) & Playstation2(y)) -> CompatibleEyeToy(x,y))", "all x y.((Playstation(x) & Playstation2(y)) -> CompatibleTo(x,y))", "all x.(Playstation(x) -> Compatible(x,Playstation2))", "(CompatibleWithPlaystation2+(Playstation2+Playstation3)) -> EyeToy(Playstation2+Playstation2))", "(Compatible(Playstation2,EyeToy) & Playstation2(Playstation2))", "(CompatibleWithPlaystation2(EyeToy))", "(compatibleWithPlaystation2(Playstation) & CompatibleWithPlaystation2))", "(compatible(Playstation) & Playstation2(Playstation)) & EyeToy(Playstation))", "all x y.((PlaystationEyeToy(x) & Playstation2(y)) -> Compatible(x,y))", "All x.(Playstation(x) -> CompatibleWithPlaystation2(x))"]}
{"id": "folio_train_1807", "nl": "The Playstation Camera can be used for all Playstation consoles.", "fol": "all x.(PlayStationConsole(x) -> IsCompatibleWith(Pscamera,x))", "prediction": ["all x.(PlaystationCamera(x) -> (UsedForPlaystationConsole(x) & UniversalForPlaystationConsole(x)))", "all x.(PlaystationCamera(x) -> UsedForAllPlaystationConsoles(x))", "(CanBeUsedForPlaystationConsole(PlaystationCamera))", "All x.(PlaystationCamera(x) -> UsedForPlaystationConsoles(x))", "all x.(PlaystationCamera(x) -> CanBeUsedForPlaystationConsole(x))", "all x.(PlaystationCamera(x) -> AvailableInPlaystationConsoles(x))", "all x.(PlaystationCamera(x) -> DesignedForPlaystationConsole(x))", "all x.(PlaystationCamera(x) -> CanBeUsedForPlaystationConsoles(x))", "all x.(PlaystationCamera(x) -> PlaystationConsole(x))", "(all x.(PlaystationCamera(x) -> CanBeUsedFor(x,PlaystationConsole))", "all x.(PlaystationCamera(x) -> CanBeUsedForPlaystationConsoles(x))", "all x.(PlaystationCamera(x) -> CanBeUsedForPlaystationConsoles(x))", "all x.(PlaystationCamera(x) -> WorksWithAllPlaystationConsoles(x))", "all x.(PlaystationCamera(x) -> CanBeUsedForPlaystationConsole(x))", "all x.(PlaystationCamera(x) -> UsedForPlaystationConsole(x))", "all x.(PlaystationCamera(x) -> CanBeUsedForPlaystationConsole(x))"]}
{"id": "folio_train_1808", "nl": "Adam Buska is a European football player.", "fol": "(IsFootballPlayer(Adambuska) & IsEuropean(Adambuska))", "prediction": ["Adam Buska (EuropeanFootballPlayer)", "Adam Buska (EuropeanFootballPlayer)", "Adam Buska is a EuropeanFootballPlayer(AdamBuska)", "all x.(EuropeanFootballPlayer(x) -> AdamBuska(x))", "all x.((AdamBuska(x) & EuropeanFootballPlayer(x)) -> FootballPlayer(x))", "Adam Buska (EuropeanFootballPlayer)", "Adam Buska,EasternFootballPlayer(AdamBuska)", "All x.((Buska(x) & EuropeanFootballPlayer(x)) -> Adam(x))", "AdamBuska(a) (EuropeanFootballPlayer(b) & BasedIn(c,w)))", "AdamBuska,Europa(footballPlayer(a) & PlaysFootball(a))", "AdamBuska (EuropeanFootballPlayer)", "Adam Buska is a European FootballPlayer.", "AdamBuska,EuropeanFootballplayer,(adams01&i).", "all x.((AdamBuska(x) & EuropeanFootballPlayer(x)) -> European(x))", "Adam Buska (EuropeanFootballPlayer)", "(EuropeanFootballPlayer(AdamBuska))"]}
{"id": "folio_train_1809", "nl": "If a European plays football, they play what Americans call soccer.", "fol": "all x.((IsFootballPlayer(x) & IsEuropean(x)) -> PlaysSoccer(x))", "prediction": ["all x.((European(x) & PlaysFootball(x)) -> PlaysWhatAmericans(x))", "all x.((European(x) & PlaysFootball(x)) -> PlaysWhatAmericansTourWealth(x))", "all x.((European(x) & PlaysFootball(x)) -> PlaysWhatAmericansCale(x,soccer))", "all x.(PlaysFootball(x) -> PlaysWhatAmericansCalledSoccer(x))", "all x.((European(x) & PlaysFootball(x)) -> PlaysWhatAmericansCalledSoccer(x))", "all x.((European(x) & PlaysFootball(x)) -> PlaysWhatAmericansNightSoccer(x))", "all x.(Plays(x,Football) -> PlaysWhatAmericansCalled(x,Soccer))", "all x y.((European(x) & American(y)) -> Plays(x,y))", "all x.(PlaysFootball(x) -> Play(x,Soccer))", "all x y.((European(x) & US(y) & Plays(x,y)) -> Plays(x,y))", "all x.((European(x) & PlaysFootball(x)) -> PlaysWhatAmericansCallsSoccer(x))", "all x.((European(x) & PlaysFootball(x)) -> PlaysWhatAmericansCalledSoccer(x))", "all x.((European(x) & PlaysFootball(x)) -> PlaySoccer(x))", "all x.(Plays(x,Football) -> PlaysBetween(x,AmericansCallSoccer))", "all x.((Europa(x) & PlaysFootball(x)) -> PlaySoccer(x))", "all x.((European(x) & PlaysFootball(x)) -> PlaysWhatAmericansCalledSoccer(x))"]}
{"id": "folio_train_1810", "nl": "Adam Buska plays what Americans call soccer.", "fol": "PlaysSoccer(Adambuska)", "prediction": ["all x.((AdamBuska(x) & AmericanSoccer(y)) -> Plays(x,y))", "all x.((AdamBuska(x) & AmericanSoccer(x)) -> Plays(x,y))", "AdamBuskaPlays(AdamBuska,Americans)", "all x.((AdamBuska(x) & AmericanSoccer(x)) -> Plays(x,OfficialSoccer))", "all x.(AdamBuska(x) -> (Plays(x,Soccer) | Plays(x)))", "has been played by Adam Buska (AdamBuska) & AmericanSoccer(AdamBuska))", "all x.(AdamBuska(x) -> PlaysWhatWeAsAmericans(x))", "all x.(AllianceBbuska(x) -> Plays(x,Soccer))", "all x.((AdamBuska(x) & AmericansCalledSoccer(x)) -> Plays(x,AdamBuska))", "all x y z.((Buska(x) & American(y) & Soccer(z)) -> Plays(x,y,z))", "all x.(AdamBuska(x) -> PlaysWhatAmericansCalledSoccer(x))", "AdamBuskaPlays(adj.Buska,soccer)", "AdamBuskaGames(adj.(AmericanSoccer))", "all x.(AdamBuska(x) -> PlaysWhatAmericansCallsSoccer(x))", "all x.(Buska(x) -> PlaysWhatAmericasCalledSoccer(x))", "all x.((AdamBuska(x) & Plays(x,Soccer)) -> AmericansCalled(x,Soccer))"]}
{"id": "folio_train_1811", "nl": "If the game has sold more than 1 million copies, then it is on the Best Seller list. ", "fol": "all x.(SoldOver1MillionCopies(x) -> OnBestSellerList(x))", "prediction": ["all x.((Game(x) & SoldMoreThanOneMillionCopies(x)) -> BestSellerList(x))", "all x.((Game(x) & SoldMoreThan(x,y) & MoreThan(y)) -> BestSellerList(x))", "all x.((Gamble(x) & SoldMoreThan(x,1M)) -> BestSellerList(x))", "all x.((Game(x) & SoldMoreThan(x,MillionCopies)) -> BestSellerList(x))", "all x.((Game(x) & SoldMoreThan(x,1000)) -> BestSellerList(x))", "all x.((Game(x) & SoldMoreThanOneMillionCopies(x)) -> BestSellerList(x))", "all x.(SoldMoreThan(x,1,033(x) -> BestSellerList(x))", "all x.(SoldMoreThan(x,1) MillionCopies(x) -> BestSellerList(x))", "all x.((Game(x) & SoldMoreThan(x,y) & MillionCopies(y)) -> BestSellerList(x))", "all x.((Game(x) & SoldMoreThan(x,500,000)) -> BestSellerList(x))", "all x.((Game(x) & SoldMoreThanOneMillionCopies(x)) -> BestSellerList(x))", "all x.((Game(x) & SoldMoreThan1MCopies(x)) -> BestSellerList(x))", "all x.(Than(x,1/million) -> BestSellerList(x))", "all x y.((Game(x) & SoldMoreThan(x,y) & MillionCopiesSold(x)) -> BestSellerList(x))", "all x.((Game(x) & SoldMoreThanMillionCopies(x)) -> BestSellerList(x))", "all x.(SoldMoreThan(x,1.5M) -> BestSellerList(x))"]}
{"id": "folio_train_1812", "nl": "All Games developed by Paradox Development Studio sold more than 1 million copies. ", "fol": "all x.(DevelopedByParadoxDevelopmentStudio(x) -> SoldOver1MillionCopies(x))", "prediction": ["all x.((Game(x) & ParadoxDevelopmentStudio(x)) -> SoldMoreThan1MCopies(x))", "all x.((Game(x) & ParadoxDevelopmentStudio(x,1 MillionCopies)) -> Sold(x,1))", "all x.((Game(x) & ParadoxDevelopmentStudio(x)) -> SoldMoreThan1MCopies(x))", "all x.((Game(x) & ParadoxDevelopmentStudio(x) & DevelopedBy(x,SalesMoreThanOneMillionCopies(x)) -> SellsMoreThan1MCopies(x))", "all x.((Game(x) & ParadoxDevelopmentStudio(y)) -> SoldMoreThanPutuation(x,y))", "all x.((Game(x) & DevelopedByParadoxDestinationStudio(x)) -> SoldMoreThan(x,1))", "all x.((Game(x) & ParadoxDevelopmentStudio(x)) -> SoldMoreThanMillionCopies(x))", "all x.((Game(x) & ParadoxDevelopmentStudio(x)) -> SoldMoreThanOneMillionCopies(x))", "all x y.((Game(x) & ParadoxDevelopmentStudio(y)) -> SoldMoreThanMillion(x,y))", "all x.((Game(x) & ParadoxDevelopmentStudio(x)) -> SoldMoreThanOneMillionCopies(x))", "all x.((Game(x) & ParadoxDevelopmentStudio(x)) -> SoldMoreThan(x,e))", "all x y.((Game(x) & ParadoxDevelopmentStudio(y)) -> SoldMoreThan(x,y))", "all x.((Game(x) & ParadoxDevelopmentStudio(x)) -> SoldMoreThan(x,Lithium))", "all x.((Game(x) & ParadoxDevelopmentStudio(x)) -> SoldMassif(x,y))", "all x.((Game(x) & ParadoxDevelopmentStudio(x)) -> SoldMoreThan(x,million))", "all x y.((Game(x) & ParadoxDevelopmentStudio(y) & DevelopedBy(x,y)) -> SoldMoreThan(x,y))"]}
{"id": "folio_train_1813", "nl": "Some games published before 2010 support the Linux OS system. ", "fol": "exists x.(PublishedBefore2010(x) & SupportsLinuxOS(x))", "prediction": ["exists x.(Game(x) & PublishedBefore2010(x)) -> SupportsLinuxOS(x))", "exists x.(Game(x) & PublishedBefore2010(x) & SupportsLinuxOS(x))", "exists x.(Game(x) & PublishedBefore(x,2010) & SupportsLinuxOSSystem(x))", "exists x.(Game(x) & PublishedBefore2010(x) & SupportsLinuxOSSystem(x))", "exists x.(Game(x) & PublishedBefore2010(x) & SupportsLinuxOSSystem(x))", "exists x.(Game(x) & PublishedBefore2010(x) & SupportsLinuxOS(x))", "exists x.(Game(x) & PublishedBefore2010(x) & SupportsLinuxOSSystem(x))", "exists x.(Game(x) & PublishedBefore2010(x) & SupportsLinuxOS(x))", "exists x.(Game(x) & PublishedBefore2010(x) & SupportsLinuxOS(x))", "exists x.(Game(x) & PublishedBefore2010(x) & SupportsLinuxOSSystem(x))", "exists x.(Game(x) & PublishedBefore2010(x) & SupportsLinuxOSSystem(x))", "exists x.(Game(x) & PublishedWithin(x,y) & PriorTo2010(x))", "exists x.(Game(x) & PublishedBefore2010(x) & SupportsLinuxOS(x))", "exists x.(Game(x) & PublishedBefore2010(x) & SupportsLinuxOS(x))", "exists x.(Game(x) & PublishedBefore2010(x)) -> SupportsLinuxOSSystem(x))", "exists x.(Game(x) & PublishedProne(x,2010) & SupportsLinuxOS(x))"]}
{"id": "folio_train_1814", "nl": "All games on the Best Seller list are popular among young people. ", "fol": "all x.(OnBestSellerList(x) -> PopularAmongYoungPeople(x))", "prediction": ["all x.((Game(x) & BestSellerList(x)) -> PopularAmongYoungPeople(x))", "all x.((Game(x) & BestSellerList(x)) -> PopularAmongYoungPeople(x))", "all x y.((Game(x) & BestSellerList(y)) -> PopularWith(x,y))", "all x.(PopularAmongYoungPeople(x) -> BestSellerStorage(x))", "all x.((Game(x) & BestSellerList(x)) -> PopularAmongYoungPeople(x))", "all x.(Telegram(x) -> PopularWithYoungPeople(x))", "all x.((Game(x) & BestSellerList(x)) -> PopularAmongYoungPeople(x))", "all x.((Game(x) & BestSellerList(x)) -> PopularAmongYoungPeople(x))", "all x.((Game(x) & BestSellerList(x)) -> PopularAmongYoungPeople(x))", "all x.((Game(x) & BestSellerList(x)) -> PopularAmongYoungPeople(x))", "all x.((Game(x) & BestSellerList(x)) -> PopularAmongYoungPeople(x))", "all x.((Game(x) & OnBestSellerList(x)) -> PopularAmongYoungPeople(x))", "all x.((Game(x) & BestSellerList(x)) -> PopularWithyoungPeople(x))", "all x.((Game(x) & BestSellerList(x)) -> PopularAmongYoungPeople(x))", "all x.((Game(x) & OnBestSellerList(x)) -> PopularAmongYearly(x))", "all x.((Game(x) & BestSellerList(x)) -> PopularAmongYoungPeople(x))"]}
{"id": "folio_train_1815", "nl": "FIFA22 neither supports the Linux OS system nor is it popular among young people.", "fol": "-(SupportsLinuxOS(Fifa21) | PopularAmongYoungPeople(Fifa21))", "prediction": ["all x.(FastField(x,y) & -(SupportsLinuxOS(y) | PopularAmongYoungPeople(x,y)))", "-(Football22(x) & -(SupportsLinuxOS(x) & PopularAmongYoungPeople(x))))", "(-SupportsLinuxOSSystem(FieldFootball22) & -PopularAmongYoungPeople(FieldFootball22))", "(-SupportsLinuxOS(FCS22) & -PopularAmongYoung(FCS22))", "(Favorite22(Favorite) & -(SupportsLinuxOS(Favorite) | PopularAmongYoungPeople(Favorite))))", "-(SupportsLinuxOSSystem( FIFA22) | PopularAmongYoungPeople( FIFA22))", "-(FamousFootball22(x) & -SupportsLinuxOS(x) & -PopularAmongYearlyPerson(x))", "(-SupportsLinuxOS( FIFA22) & -PopularAmongYoungPeople( FIFA22))", "(-SupportsLinuxOS(FIFA22) & -PopularAmongYoungPeople(FIFA22))", "(-SupportsLinuxOSSystem(Fonds22) & -PopularAmongYoungPeople(Fonds22))", "FIFA22 -(SupportsLinuxOSSystem(x) | PopularAmongYoungPeople(x)))", "-(Fueltest22(f) & -(SupportsLinuxOSSystem(f) | PopularInYoungPeople(f))) -> -(LinuxOSSystem(f) & PopularAmongYoungPeople(f)))", "(-(SupportsLinuxOSSystem(Football22) & -PopularAmongYoungPeople(Football22))", "(-SupportsLinuxOS(Faces22) | PopularAmongYoungPeople(Faces22))", "(-(SupportsLinuxOS(fifa22) & -PopularAmongYoungPeople(favorite(favoriteFavorite22)) -> FIFA22))", "nor supports LinuxOS system, nor popular among young people (fibs22)."]}
{"id": "folio_train_1816", "nl": "FIFA21 is published before 2010", "fol": "PublishedBefore2010(Fifa21)", "prediction": ["all x.((Football21(x) & PremiereBefore(x,2010)) -> PublishedIn(x,Football21))", "all x.(Football21(x) -> PublishedBy2010(x))", "all x y.((Football21(x) & ReleasedBefore2010(x)) -> PublishedBefore2010(x))", "all x.(Famous(x) -> (PublishedBefore2010(x) & FIFA21(x)))", "all x.(Fiesta(x) -> (publishedBefore2010(x) & FIFA21(x)))", "all x.(Fiction21(x) -> PublishedBefore2010(x))", "all x.(FIFASignificance(x) -> ReleasedBefore2010(x))", "exists x.(FifaFesta21(x) & PublishedBefore2010(x))", "all x.(FatherFavorite(x) -> PublishedBefore2010(x))", "all x y.((Favorite(x) & FIFA21(y) & PublishedBefore2010(x,y)) -> PublishedBefore2010(y))", "all x.((Football(x) & PublishedBefore2010(x)) -> FIFA21(x))", "all x.((Favorite(x) & PublishedBefore2010(x)) -> FIFA21(x))", "All x.((FalloutWorld(x) & PublicEDFAIIAs(x,y)) -> PublishedBefore2010(x))", "all x.(FIFA(x) -> PublicatedBefore2010(x))", "all x y.((FastField(x) & FIFA21(y)) -> PublishedBefore2010(x,y))", "all x.(Favorite(x) -> (PublishedBefore2010(x) & FIFA21(x)))"]}
{"id": "folio_train_1817", "nl": "FIFA21 is published before 2010 and developed by Paradox Development Studio", "fol": "(PublishedBefore2010(Fifa21) & DevelopedByParadoxDevelopmentStudio(Fifa21))", "prediction": ["all x.(Favorite21(x) -> (PublishedBefore2010(x) & FormularedByParadoxDevelopmentStudio(x)))", "ALL x.(FAFAS19(x) -> (PublishedBefore(x,y) & ParadoxDevelopmentStudio(x,z) & DevelopedBy(x,z)))", "all x.((Fisbet(x) & PublishedBefore2010(x) & ParadoxDevelopmentStudio(x)) -> DevelopedBy(x,FinstaPlanet,Paradox),FCFA21))", "(PublicatedBefore2010(Fussball21) & ParadoxDevelopmentStudio(Fussball21) & EntirelyDevelopedBy(Fussball21))", "all x.(Football(x) -> (PublicatedBefore2010(x) & DevelopedByParadoxDevelopmentStudio(x)))", "all x.(FisherFootball21(x) -> (PublishedBefore2010(x) & DevelopedByParadoxDevelopmentStudio(x)))", "(The FIFA21 was published before 2010 & Paradox DevelopmentStudio(f)) & DevelopedBy(f))", "all x.((FifaStone(x) & PublishedBefore2010(x) & ParadoxDevelopmentStudio(x)) -> WrittenBy(x,Fastfoot21))", "(All x.(FootballProduction(x) -> PublishedBefore2010AndDevelopedByParadoxDevelopmentStock(x)))", "All x.(Fallout(x,2010) -> (RevisedBefore2010(x) & DevelopedByParadoxDevelopmentStudio(x)))", "All x.(Football(x) -> PublishedPrsent2010AndDevelopedByParadoxDevelopmentStudio(x))", "all x y.((Football(x) & PublishedBefore2010(x) & ParadoxDevelopingStock(y)) -> (DevelopedBy(x,y) & DevelopedBy(x,y)))", "all x y z.((Football(x) & FIFA21(y) & ParadoxDevelopmentStudio(z)) -> (PublishedBefore(x,y) & DevelopedBy(x,z)))", "All x.(FifaWorld(x) -> (PublishedBefore2010(x) & DevelopedByParadoxDestinationStudio(x)))", "(All x.(Football21(x) & PublishedBefore2010(x) & ParadoxDevelopmentStudio(x)) -> DevelopedBy(x,ISC))", "all x.(Fifa(x) -> (PublishedBefore2010(x) & developedByParadoxDevelopmentStudio(x)))"]}
{"id": "folio_train_1818", "nl": "if FIFA21 is either a game published before 2010 or developed by Paradox Development Studio, then it is either in the Best Seller list and sold more than 1 million copies; or not in the Best Seller list and hasn't sold more than 1 million copies.", "fol": "((FPublishedBefore2010(Fifa21) | DevelopedByParadoxDevelopmentStudio(Fifa21)) -> ((OnBestSellerList(Fifa21) & SoldOver1MillionCopies(Fifa21)) | (-OnBestSellerList(Fifa21) & -SoldOver1MillionCopies(Fifa21))))", "prediction": ["all x.((Football21(x) & (PublishedBefore2010(x) | DeveloppedByParadoxDevelopmentStudio(x))) -> (BestSellerList(x) & SoldMoreThan1000000Copies(x)) | (-BestSellerList(x) & SoldMoreThan1000000Copies(x)))))", "all x.((Game(x) & PublishedBefore2010(x)) | (DevelopedByParadoxDevelopmentStudio(x) & MoreThanLittleCopies(x))))", "all x.((Game(x) & PublishedBefore2010(x) | DevelopedByParadoxDevelopingStudio(x)) -> (BestSellerList(x) & soldMoreThan1MCopies(x)) | (-BestSellerList(x) & -SoldMoreThan1MCopies(x))))", "all x.((Famous(x) & (PublishedBefore2010(x) | DevelopedByParadoxDevelopingStudio(x))) | (-BestSellerList(x) & SoldMoreThanMillionCopies(x))))", "all x.((Game(x) & (PublishedAfter2010(x) | DevelopedByParadoxDevelopmentStudio(x))) | (-BeingBestSellerList(x) & (SoldMoreThan1Mcopy(x) | -SoldMoreThan1Mcopy(x)))))", "all x.((FoxField21(x) & (PublishedBefore2010(x) | DissertedByParadoxDevelopmentStudio(x))) -> (BestSellerList(x) & SoldMoreThan1MCopies(x) | -BestSellerList(x)))", "all x.((Fallout21(x) & (PublishedBefore2010(x) | CreatedByParadoxDevelopmentStudio(x))) -> (BestSellerList(x) & SoldMoreThanOneMillionCopies(x)) | -BestSellerList(x) & -SoldMoreThanOneMillionCopies(x)))", "all x.((Game(x) & PublishedPresentNews(x) | DevelopedByParadoxEntwickementStudio(x)) -> (BestSellerList(x) & soldMoreThan1Mcopy(x)) | (-BestSellerList(x) & -SoldMoreThan1Mcopy(x))))", "all x.((Game(x) & PublishedAfter2010(x) | DevelopedByParadoxDevelopmentStudio(x)) -> (BestSellerList(x) & SoldMoreThan1 millionCopies(x)) | -BestSellerList(x) & -SoldMoreThan1MillionCopies(x)))", "all x.((Fox2019(x) & (PublishedBefore2010(x) | NewDevelopedByParadoxDevelopmentStudio(x))) -> (BestSellerList(x) & SoldMoreThanMillionCopies(x)) | (-BestSellerList(x) & SoldMoreThanMillionCopies(x))))", "((Gaming(FoxBox1) & PublishedBefore2010(FAF21)) | developedByParadoxDevelopmentStudio(FAF21)) -> (BestSellerList(FastSellerList) & SoldMoreThanMillionCopies(FAF21) | -BestSellerList(FastSellerList)))", "all x.((FastSellerList(x) & (PublishedBefore2010(x) | DevelopedByParadoxDevelopmentStudio(x))) | (-PublishedBefore2010(x) & SoldMoreThan1Mcopies(x) & -SoldMoreThan1Mcopies(x))))", "all x.((Game(x) & FIFA21(x) & (PublishedBefore2010(x) | DevelopedByParadoxDevelopmentStudio(x))) -> (BestSellerList(x) & SoldMoreThan 1MK(x)) | -BestSellerList(x) & -SoldMoreThan1MK(x)))", "all x.((Foxaday21(x) & (PublishedBefore2010(x) | DeveloppedByParadoxDevelopmentStudio(x))) -> (BestSeller(x) & SoldMoreThanMillionCopies(x)) | -BestSeller(x) & -SoldMoreThanMillionCopies(x)))", "all x y z.((Foxy21(x) & GamePublicatedBefore(x,y) | DevelopedByParadoxDevelopmentStudio(y)) -> (BestSellerList(x) & SoldMoreThan(x,y) | -BestSellerList(x) & SoldMoreThan(x,z)))", "all x.((Movie(x) & (PublishedBefore2010(x) | DevelopedByParadoxDevelopmentStudio(x))) | (-InBestSellerList(x) & -SoldMoreThanMillionCopies(x))))"]}
{"id": "folio_train_1819", "nl": "China is one of BRICS and its economy is emerging.", "fol": "all x.((IsChina(x) -> IsBRICSMember(x)) & HasEmergingEconomy(x))", "prediction": ["all x.(China(x) -> (BRICS(x) & EmergingEconomy(x)))", "(all x.(China(x) & BRICS(x)) -> EmergingEconomy(x))", "all x.((China(x) & BRICS(x)) -> EmergingEconomy(x))", "(all x.(China(x) -> BRICS(x)) & exists y.(Economy(y) & Emerging(y))))", "all x.((China(x) & BRICS(x)) -> EconomicEmerging(x))", "(all x.(China(x) | BRICS(x))) & asIsEmergingEconomy(x))", "all x.(Chinese(x) -> (BRICS(x) & EmergingEconomy(x)))", "(all x.(China(x) -> BRICS(x)) & itsEconomyEmerging(x))", "all x.(China(x) -> (BRICS(x) & EconomicEmerging(x)))", "all x.(Chinese(x) -> (BRICS(x) & EconomicEmerging(x)))", "all x.(China(x) -> BRICS(x) & EmergingEconomy(x))", "all x.((China(x) & BRICS(x)) -> EmergingEconomy(x))", "all x.((China(x) & BRICS(x)) -> EconomicEmerging(x))", "(BRICS(China) & EmbigratingEconomy(China))", "(all x.(Chinese(x) -> BRICS(x)) & the EmbodimentEmerging(x))", "all x.((China(x) & BRICS(x)) -> EconomicEmerging(x))"]}
{"id": "folio_train_1820", "nl": "India is one of BRICS and its economy is emerging.", "fol": "all x.((IsIndia(x) -> IsBRICSMember(x)) & HasEmergingEconomy(x))", "prediction": ["all x.((Individual(x) & BRICS(x)) -> EconomicEmbarkation(x))", "(all x.(Indien(x) -> BRICS(x)) & India's EconomyEmerging(x))", "all x.(BrICS(x) -> EconomicEmerging(x))", "all x.((Indonesia(x) & BRICS(x)) -> EconomicEmerging(x))", "all x.(IndianAs(x) & BRICS(x) & ESCAPingEconomy(x))", "all x.(India(x) -> (BRICS(x) & EconomicEmerging(x)))", "all x.(Individual(x) -> (BRICS(x) & EmergingEconomy(x)))", "all x.(Independent(x) -> (Semi-BRICS(x) & EmergingEconomy(x)))", "all x.(Individual(x) -> (BRICS(x) & EmergingEconomy(x)))", "all x.(India(x) -> (OneOfBRICS(x) & EconomicEmerging(x)))", "all x.((India(x) & BRICS(x) & EmergingEconomy(x)) -> OneOf(x,BRICS,ECONOMY))", "all x.(Indian(x) -> (BRICS(x) & EmergingEconomy(x)))", "all x.(Indies(x) -> (BRICS(x) & EmergingEconomy(x)))", "all x.((India(x) & BRICS(x)) -> EmergingEconomy(x))", "all x.(India(x) -> (BRICS(x) & EmergingEconomy(x)))", "(BRICS(India) & EmergingEconomy(India))"]}
{"id": "folio_train_1821", "nl": "All people from China speak Chinese.", "fol": "all x y.((IsFrom(x,y) & IsChina(y)) -> SpeaksLanguage(x,Chinese))", "prediction": ["all x.(People(x) -> SpeakChinese(x))", "all x y.((Person(x) & Chinese(y)) -> SpeaksChinese(x,y))", "all x.((Person(x) & FromChina(x)) -> SpeakChinese(x))", "all x.(ChinaPerson(x) -> SpeaksChinese(x))", "all x.((Person(x) & Chinese(x)) -> SpeaksChinese(x))", "all x.(Chinese(x) -> SpeaksChinese(x))", "all x.(FromChina(x) -> SpeaksChinese(x))", "all x.((Person(x) & FromChina(x)) -> Speak(x,Chinese))", "all x.(Person(x) -> SpeakingChinese(x))", "all x.((Person(x) & FromChina(x)) -> SpeakChinese(x))", "all x.((Person(x) & China(x)) -> SpeaksChinese(x))", "all x.((People(x) & China(x)) -> SpeaksChinese(x))", "(all x.(ChinaPerson(x) & SpeaksChinese(x)) -> FromChinaPerson(x))", "all x.(ChinaPerson(x) -> SpeaksChinese(x))", "all x.((PeopleFromChina(x) & SpeakChinese(x)) -> DissolvesChinese(x))", "all x.(ChinaPerson(x) -> Speak(x,Chinese))"]}
{"id": "folio_train_1822", "nl": "All people from India speak Hindi or English.", "fol": "all x y.(((IsFrom(x,y) & IsIndia(y)) -> SpeaksLanguage(x,SpeaksHindi)) | SpeaksLanguage(x,SpeaksEnglish))", "prediction": ["all x.(IndianPerson(x) -> (SpeaksHindi(x) | SpeaksEnglish(x)))", "all x.(Individual(x) -> (SpeakHindi(x) | SpeakEnglish(x)))", "all x.(Individual(x) -> (SpeaksHindi(x) | SpeaksEnglish(x)))", "all x.(IndianPerson(x) -> (SpeaksHindi(x) | SpeaksEnglish(x)))", "all x.(IndianPerson(x) -> (SpeakHindi(x) | SpeakEnglish(x)))", "all x.(Individual(x) -> (SpeaksHindi(x) | SpeaksEnglisch(x)))", "all x.(IndianPerson(x) -> (SpeaksHindi(x) | SpeaksEnglish(x)))", "all x.((Person(x) & India(x)) -> (SpeaksHindi(x) | SpeaksEnglish(x)))", "all x.(Individual(x) -> (SpeakHindi(x) | SpeakingEnglisch(x)))", "all x.(Individual(x) -> (SpeaksHindi(x) | SpeaksEnglish(x)))", "all x.(Individual(x) -> (SpeaksHindi(x) | SpeaksEng.(x))))", "all x.(IndianPerson(x) -> (SpeaksHindi(x) | SpeaksEnglish(x)))", "all x.(Individual(x) -> (SpeaksHindi(x) | SpeaksEnglish(x)))", "all x.(IndianPerson(x) -> (SpeakHindi(x) | SpeakEnglish(x)))", "all x.(IndianPerson(x) -> (SpeakHindi(x) | SpeakEnglish(x)))", "all x.(IndianPerson(x) -> (SpeakHindi(x) | SpeakEnglish(x)))"]}
{"id": "folio_train_1823", "nl": "There is an Indian.", "fol": "exists x y.(IsFrom(x,y) & IsIndia(y))", "prediction": ["exists x.(Indian(x) & Reads(x,y))", "exists x.(Indian(x) & Is(x))", "exists x.(Indian(x) & LivesIn(x))", "exists x.(Indian(x) & (Individual(x) | Indian(x)))", "exists x.(Indian(x) & LivesIn(x))", "exists x.(Indian(x) & NativeOfIndividual(x))", "exists x.(Indian(x) & Indian(x))", "exists x.(Indian(x) & LivesIn(x))", "exists x.exists y.(Indian(x) & Indian(y))", "exists x.(Indian(x) & Indian(x))", "exists x.(Indian(x) & Visits(x))", "exists x.(Individual(x) &.(Indian(x))", "exists x.(Indian(x) & Represents(x,1))", "exists x.(Indian(x) & AllOf(x,y))", "exists x.(Indian(x) & -Iraqi(x))", "exists x.(Indian(x) & LivesIn(x))"]}
{"id": "folio_train_1824", "nl": "All people from BRICS neither speak Hindi nor speak English.", "fol": "all x y.(((IsFrom(x,y) & IsBRICSMember(y)) -> -SpeaksLanguage(x,SpeaksHindi)) & -SpeaksLanguage(x,SpeaksEnglish))", "prediction": ["all x.((Person(x) & BRICS(x)) -> (-SpeaksHindi(x) | SpeaksEnglish(x)))", "all x.(BRICS(x) -> (-SpeaksHindi(x) | SpeaksEnglish(x)))", "all x.((Person(x) & BRICS(x)) -> (-SpeaksHindi(x) | SpeechesEnglish(x)))", "all x.((Person(x) & BRICS(x)) -> -(SpeakHindi(x) | SpeakEnglish(x)))", "all x.((Person(x) & BRICS(x)) -> -(SpeaksHindi(x) | SpeaksEnglish(x)))", "all x.((Person(x) & BRICS(x)) -> (-SpeaksHindi(x) | SpeaksEnglish(x)))", "all x.((Person(x) & BRICS(x)) -> (-SpeaksHindi(x) & -SpeaksEnglish(x)))", "all x.(BRICS(x) -> (NeitherSpeakHindi(x) & -SpeakEssentialEnglish(x)))", "all x.(BrICSPerson(x) -> (-SpeakHindi(x) | SpeakEnglish(x)))", "all x.((Person(x) & FromBRICS(x)) -> (-SpeaksHindi(x) | SpeaksEnglish(x)))", "all x.((Person(x) & BRICS(x)) -> (-SpeaksHindi(x) | SpeaksEnglish(x)))", "all x.(BRICSPerson(x) -> (-SpeaksHindi(x) | SpeaksEngland(x)))", "all x.(Between(x) -> (NOTSpeaksHindi(x) & -speaksEglish(x)))", "all x.((Person(x) & BRICS(x)) -> (-SpeaksHindi(x) | SpeaksEnglish(x)))", "all x.((Person(x) & BRICS(x)) -> (-SpeaksHindi(x) & -SpeaksEnglish(x)))", "all x.(Brissian(x) -> (-SpeaksHindi(x) | SpeaksEnglish(x)))"]}
{"id": "folio_train_1825", "nl": "India's economy is not emerging.", "fol": "all x.(IsIndia(x) -> -HasEmergingEconomy(x))", "prediction": ["(EmergingEconomy(Index) & -EmergingEconomy(Index))", "all x.(IndianEconomy(x) -> -Emerging(x))", "IsNebulousEconomy(India)", "((India'sEconomy(India) & -Emerging(India)))", "(EconomyIsNearEmerging(Indien))", "is notemerging(Indonesia)", "all x.(IndianEconomy(x) -> -Emerging(x))", "all x.(India'sEconomy(x) -> -Emerging(x))", "all x.(India'sEconomy(x) -> -Emerging(x))", "all x.(IndienEconomy(x) -> -Emerging(x))", "all x.(IndianEconomy(x) -> -Emerging(x))", "(India'sEconomy(Indiname) : -Emerging(Individual))", "all x.(India(x) -> -EmergingEconomy(x))", "-EmergingEconomy(India)", "all x y.((IndianEconomy(x) & Economy(y)) -> -Emerging(x))", "(EmergingEconomy(India,6))"]}
{"id": "folio_train_1826", "nl": "There is a person from BRICS speaking Hindi.", "fol": "exists x y.(IsFrom(x,y) & IsBRICSMember(y) & SpeaksLanguage(x,SpeaksHindi))", "prediction": ["exists x y.((Person(x) & BRICS(y) & SpeakingHindi(x,y)))", "exists x.(Person(x) M.R.SpokingHindi(x))", "(exists x.(Person(x) & BRICS(x)) & SpeakingInHindi(x))", "exists x.(BRICSPerson(x) & SpeakesHindi(x))", "exists x.(Person(x) & BRICS(x) & SaysHindi(x))", "exists x.(PersonFromBRICS(x) & SpeaksHindi(x))", "exists x.(PersonFromBRICS(x) & SpeaksHindi(x))", "exists x.(BRICSPerson(x) & SpeaksHindi(x))", "exists x.(PersonFromBRICS(x) & SpeaksHindi(x))", "exists x.(BritishPerson(x) & SpeakesHindi(x))", "exists x.(BritishPerson(x) & SpeakingHindi(x))", "exists x.(BScisianPerson(x) & SpeakingHindi(x))", "exists x.(BritishPerson(x) & SpeakHindi(x))", "exists x y.(Bronch(x) & Person(y) & SpeakingHindi(y))", "exists x.(Person(x) & BRICS(x))", "exists x.(PersonFromBiologicalStates(x) & SayingHindi(x))"]}
{"id": "folio_train_1827", "nl": "Daveed Diggs is an actor and film producer.", "fol": "(IsActor(DaveedDiggs) & IsFilmProducer(DaveedDiggs))", "prediction": ["DaveedDiggs(d) is actor and filmproducer(d) & specializes in filmmaking and.", "-DoodledDiggs(d) is actor, and FilmProducer(f) & OriginallyFromNorway(d) & -(DaveedD Diggs(d) & FilmProducer(f)))", "DaveedDiggs(Digs,Actor) & FilmProducer(Digs,Film)", "(Actor(d) und FilmProducer(d))", "DaveedDigigs(actor) & FilmProducer(a))", "DaveedDiggs(actor) & FilmProducer(a))", "Daveed Diggs (Actor(DoubledDigs) & FilmProducer(DoubledDigs))", "(Actor(DavizedDiggs) & FilmProducer(DaviedDuggs))", "DaveedDigests(d) -> (Actor(d) & FilmProducer(d)))", "(Actor(Davied Diggs) & Producer(DaviedDiggs))", "Daveed Diggs (Actor(D) & Producer(d))", "DaveedDiggs((Actor,filmProducer) & Actor(DIGGS)", "Daveed Diggs is actor and filmmaker.", "All x.(Daveed Diggs(x) -> (Actor(x) & FilmProducer(x)))", "(Actor(DaviedGiggs) & FilmProducer(DaviedDdiggs))", "DaveedDiggs(at) & Actor(at) & FilmProducer(at))"]}
{"id": "folio_train_1828", "nl": "Daveed Diggs played two roles in the musical Hamilton.", "fol": "(PlayedTwoRolesInHamilton(DaveedDiggs) & PerformedIn(DaveedDiggs,Hamilton) & IsMusical(Hamilton))", "prediction": ["all x y z.((DaveedD Diggs(x) & Musical(y) & Musical(z)) -> Played(x,y,z))", "(DaveedDigest(Davis,Davis) & Hamilton(Davis,Davis))", "DaveedDiggs played two roles in musical Hamilton.", "DaveedDiggs(dived) & MusicalHamilton(dived))", "Daveed Diggs played two roles in musical Hamilton.", "all x.(DaveedDigest(x) -> PlayedTwoRolesInMusicalHamilton(x))", "(FarewellSuit(daveedDIGGS) & PlayedTwoRoles(daveedG diggs,musical))", "(Roll(DaveedGigs) & Role(Diggles))", "DaveedDiags(Digest) & Hamilton(Starship(Dragon))", "all x y.((DaveedDuggs(x) & MusicalHamilton(y)) -> Played(x,y))", "DaveedDiggs played two roles in the musical Hamilton.", "(DaveedD DiggsPlayedThreeRoles(Diggs,MusicalHamilton))", "(Die(DaredDivegs) & Musical(Diggles-Digigs))", "DaveedDiggs played two roles in musical Hamilton.", "DaveedDiggs played 2 roles in musical Hamilton.", "(DaveedD Diggs(Drags,s) & Hamilton(Hamilton))"]}
{"id": "folio_train_1829", "nl": "One of the actors from Hamilton won the best actor award.", "fol": "exists x.(IsActor(x) & PerformedIn(x,Hamilton) & ReceivedBestActorAward(x))", "prediction": ["all x.((Actor(x) & FromHamilton(x)) -> BestActorAward(x))", "all x y.((Actor(x) & Hamilton(y)) -> WonBestActorAward(x,y))", "all x.((Actor(x) & Hamilton(x)) -> WonBestActor(x))", "all x y z.((Actor(x) & Actor(y) & FromHamilton(z) & WonBestActor(x,y,z)) -> BestActorAward(x,y))", "all x.((Actor(x) & Hamilton(x)) -> WinsBestActorAward(x))", "all x.((Actor(x) & FromHamilton(x)) -> WonBestActorAward(x))", "all x.((Actor(x) & FromHamilton(x)) -> WinsBestActorAward(x))", "all x.((Actor(x) & FromHamilton(x)) -> BestActorAward(x))", "all x.((Actor(x) -> WasHamilton(x))", "all x.((Actor(x) & FromHamilton(x)) -> WonBestActorAward(x))", "all x y.((Actor(x) & Actor(y) & Hamilton(y) & WonBestActorAward(x,y)) -> BestActor(x,y))", "all x.((Actor(x) & Artist(x) & Hamilton(x)) -> WinsBestActorAward(x))", "all x y.((Actor(x) & Actor(y) & FromHamilton(x,y)) -> WinsBestActorAward(x,y))", "all x.((Actor(x) & FromHonduras(x)) -> WinsBestActorAward(x))", "all x.((Actor(x) & Hamilton(x)) -> WonBestActorAward(x))", "all x y z.((Actor(x) & Actor(y) & Hamilton(z)) -> WinsBestActorAward(x,y,z))"]}
{"id": "folio_train_1830", "nl": "The actor playing Thomas Jefferson won the best actor award.", "fol": "all x.((IsActor(x) & PortrayedCharacter(x,ThomasJefferson)) -> ReceivedBestActorAward(x))", "prediction": ["(Playing(acter,Thomson) & ThomasJeffrey(acter,t) & BestActorAward(actress))", "all x.((Actor(x) & PlayingTomJefferson(x)) -> BestActorAward(x))", "all x y.((Actor(x) & Actor(y) & PlaysTomJefferson(x,y)) -> WonBestActorAward(x))", "all x y.((Actor(x) & Actor(y)) -> (PlayedIn(x,y) & ThomasJeffrey(y)))", "(WinnerBestActor(actor) | PlayerActorAward(actor)))", "all x.((Actor(x) & PlayingTomJefferson(x)) -> WonBestActorAward(x))", "all x.((Actor(x) & PlayingTimothJeffrey(x)) -> WinsBestActorAward(x))", "all x y.((Actor(x) & PlayingTomJefferson(x) & ThomasJefferson(y)) -> WonBestActorAward(x))", "all x y z.((Actor(x) & PlayingTomJefferson(x,y) & ThomasJefferson(y)) -> WonBestActorAward(x,z))", "all x y z.((Actor(x) & Actor(y) & ThomasJeffrey(z) & Plays(x,y,z)) -> WinsBestActorAward(x))", "WonBestActorAward. (ActorPlayingTomJefferson(Actor) & ThomasJefferson(Actor))", "the actor playing ThomasJefferson(actor) a wonBestActorAward(a)", "all x.((Actor(x) & PlaysTomJefferson(x)) -> WinsBestActorAward(x))", "all x.((Actor(x) & PlayingThomasJefferson(x)) -> WinsBestActorAward(x))", "all x y.((Actor(x) & Actor(y) & PlayingTomJeffrey(x,y)) -> WonBestActorAward(x))", "ALL x.((ActorPlayingThomasJefferson(x)) -> WinsBestActorAward(x))"]}
{"id": "folio_train_1831", "nl": "Daveed Diggs played Thomas Jefferson.", "fol": "PortrayedCharacter(DaveedDiggs,ThomasJefferson)", "prediction": ["(DaveedDiggsplayed(DavesDuggs,TonyJefferson)", "(DaveedDivegs(d) & ThomasJesus(d))", "DaveedDiggs played Thomas Jefferson.", "(PlayedThan(DaveedGiggs,ThomasJenkins)", "all x.(DaveedDigest(x) -> PlayedTom(x,Jefferson))", "all x.(DaveedDivegs(x) -> PlayedTomJenner(x))", "DaveedDIGGS(D) sungThanJeffrey(D) & PlayedTomDemocracy(D))", "(DaveedDiggs(d) & ThomasJefferson(c))", "all x.(DwvedDiggs(x) -> PlayedThomasJefferson(x))", "-DaveedDiggsPlayedTomJeffrey(DGGs))", "-(DaveedDuggs(d) & ThomasJefferson(t))", "(Played(DaveedDigs) -> ThomasJefferson(Digs))", "all x.(DaveedDigigs(x) -> PlayedTomJefferson(x))", "All x.(DaveedDiggs(x) -> PlaysTomJefferson(x))", "played Thomas Jefferson.", "all x.(DaveedDivegs(x) -> PlayedWith(x,ThomasJefferson))"]}
{"id": "folio_train_1832", "nl": "Musicals are not films.", "fol": "all x.(IsMusical(x) -> -Film(x))", "prediction": ["-(Musical(a) & Film(c))", "all x.(Musical(x) -> -Film(x))", "all x.(Musical(x) -> -Film(x))", "all x.(Musical(x) -> -Film(x))", "all x.(Musical(x) -> -Film(x))", "all x.(Musical(x) -> -Film(x))", "all x.(Musical(x) -> -Film(x))", "all x.(Movie(x) -> -Film(x))", "all x.(Musical(x) -> -Film(x))", "all x.(Musical(x) -> -Film(x))", "all x.(Movie(x) -> -Film(x))", "all x.((Musical(x) & -Film(x)) -> -(Film(x) & Film(x)))", "all x.(Musical(x) -> -Film(x))", "all x.(Musical(x) -> -Film(x))", "all x.(Musical(x) -> -Film(x))", "all x.(Musical(x) -> -Film(x))"]}
{"id": "folio_train_1833", "nl": "Hamilton is a film.", "fol": "Film(Hamilton)", "prediction": ["(Film(Hamilton) & Film(Hamilton))", "Hamilton is a film.", "all x.(Hamilton(x) -> Film(x))", "all x.(Hamilton(x) -> Film(x))", "Hamilton is a film.", "Hamilton is a film.", "Hamilton is a film.", "all x.(Hamilton(x) -> Film(x))", "Hamilton is a film.", "Hamilton is a film.", "exists x.(Hamilton(x) & Film(x))", "All x.(Hamilton(x) -> Film(x))", "(Film(Hamilton) & MadeAs(Hamilton))", "(Film(Hamilton) | Film(Hamilton))", "(Film(Hamilton,2008) & BasedUpon(Hamilton,2009))", "all x.(Hamilton(x) -> Film(x))"]}
{"id": "folio_train_1834", "nl": "Daveed Diggs won the best actor award.", "fol": "ReceivedBestActorAward(DaveedDiggs)", "prediction": ["(BestActor(DaveedDigests)", "thebestactor(d) -> DaveedDiggs(d))", "-WonBestActorAward(DaveedDiggs)", "DaveedDiggsWonBestActor(d)", "DaveedDiggsWonBestActorAward(Duckson) -> BestActor(Duckson))", "DaveedDIGGS(DaveedMuggs)", "-WinningBestActorShowdown(+)", "(WinsBestActor(daveedDiggs) in Actors(daveedDiggs))", "Daveed Diggs won BestActor(x) -> StartedAward(x))", "DaveedDiggs won BestActorAward(Daveed)", "all x.(DaveedDdiggs(x) -> WonBestActorAward(x))", "all x.((DaveeedDIGGS(x) & WinnersBestActor(x)) -> BestActor(x))", "DaveedDiggs wonbestActorAward(Daved(Digigs)", "DaveedDiggsWonBestActor(d)", "DaveendDiggs won BestActorAward(Ducks)", "all x.(DaveedDiggs(x) -> BestActor(x))"]}
{"id": "folio_train_1835", "nl": "Hamilton won two awards.", "fol": "WonTwoAwards(Hamilton)", "prediction": ["Hamilton has won two awards.", "-WonTwoAwards(Matthew Hamilton)", "all x.(Hamilton(x) -> WonAward(x,2))", "Aloha Hamilton(e) & TwoAwards(e))", "Hamilton won two Awards.", "(WonRun(Hamilton) & GotSevenAwards(Hamilton))", "Hamilton won two Awards.", "Hamilton won two awards.", "Hamilton won two awards.", "Hamilton won two awards.", "Hamilton won two awards.", "Hamilton won two awards.", "Hamilton & Tony (Awards(Hamilton) & Award(hamilton))", "(Winner(Hamilton,2) & BestPublicAward(Hamilton,2))", "Hamilton won two awards.", "Hamilton has won two awards."]}
{"id": "folio_train_1836", "nl": "Ernest Pohl was a Polish football player. ", "fol": "IsPolishFootballPlayer(Ernestpohl)", "prediction": ["Ernest Pohl (polne(p) & FootballPlayer(p))", "Ernest Pohl (polish(ErnestPohl,Player))", "ErnestPohl (polish(ErnestPohl) & FootballPlayer(er,x))", "ErnestPohl(x) & PrussianFootballPlayer(x))", "Ernest Pohl (Plovdiv) \u2013 FootballPlayer(poln))", "Ernest Pohl ((PolishFootballPlayer) & -PoorPoorSweeten(Poor)))", "All x.(ErnestPohl(x) -> (PolishFootballPlayer(x) & FootballPlayer(x)))", "\u0435\u0432\u0440\u0430\u0438 \u0438\u043d \u043a\u0430\u0440\u0442.", "Ernest Pohl (born 30.11.1920) & was a Polish Football Player(x))", "(PolishFisher(ErnestPohl) & FootballPlayer(ErnestPohl))", "Ernest Pohl(poland) & FootballPlayer(poly)", "Ernest Pohl (polish(e) & FootballPlayer(p) & PoweredBy(e) & Electrovisjen(p))", "Ernest Pohl (PossinianFootballPlayer)", "Ernest Pohl (PolishFootballPlayer)", "Ernest Pohl (PolishFootballPlayer)", "Ernest Pohl (PolishFootballPlayer)"]}
{"id": "folio_train_1837", "nl": "A football player in the Polish First Division has scored over 180 goals. ", "fol": "exists x.(PlaysInDivision(x,Polishfirstdivision) & HasScoredOver180Goals(x))", "prediction": ["all x.((FootballPlayer(x) & PolishFirstDivision(x)) -> ScoresOver180Goals(x))", "all x y.((FootballPlayer(x) & PolishFirstDivision(y)) -> ScoresOver180Goals(x))", "all x y.((FootballPlayer(x) & PolishFirstDivision(y)) -> ScoresOver180Goals(x,y))", "all x y.((FootballPlayer(x) & FCB(y) & PolandFirstDividence(y)) -> Score Over180Goals(x,y))", "all x.((FootballPlayer(x) & PolishFifthDividend(x)) -> ScoredOver180Goals(x))", "all x y.((FootballPlayer(x) & PolishFirstDivision(y)) -> ScoredOver180Goals(x,y))", "all x.((FootballPlayer(x) & PolishFirstDividend(x)) -> ScoredOver180Goals(x))", "all x.((FootballPlayerInPolishFirstDivision(x) & ScoredOver180Goals(x)) -> PolishFirstDivision(x))", "all x y.((Footballplayer(x) & PolishFirstDivision(y)) -> ScoredOver180Goals(x,y))", "all x.((FootballPlayer(x) & PolishFirstDivision(x)) -> ScoredOver180Goals(x))", "all x.((FootballPlayer(x) & FirstDivisionPoland(x)) -> ScoredOver180Goals(x))", "all x y.((FootballPlayer(x) & PolishFirstDivision(y)) -> ScoredOver180Goals(x,y))", "all x.((FootballPlayer(x) & PolishFirstDividence(x)) -> ScoresOver180Goals(x))", "all x y.((FootballPlayer(x) & PolishFirstDivision(y)) -> ScoresOver180Goals(x,y))", "all x.((FootballPlayer(x) & FirstDivision(x)) -> ScoredOver180Goals(x))", "all x.((FootballPlayer(x) & PolishFirstDivision(x)) -> ScoredOver180Goals(x))"]}
{"id": "folio_train_1838", "nl": "Ernest Pohl scored more than 180 goals in the Polish First Division. ", "fol": "(HasScoredOver180Goals(Ernestpohl) & PlaysInDivision(Ernestpohl,Polishfirstdivision))", "prediction": ["Ernest Pohl scored more than 180 goals in the Polish First Division.", "Ernest Pohl scored more than 180 goals in Polish FirstDivision.", "Is MoreThan183Goals(ErnestPohl,PolishFirstDivision)", "Pohl has scored more than 180 goals in the PolishFirstDividend.", "\u043b \u0430\u0440\u043e\u043b\u043e\u0435\u043d\u0438\u0435  \u0438\u0442\u0430. \u0434\u043e\u0441\u0442\u0443\u0434 \u043b\u043d\u0432\u0432\u0430\u043b \u0432 \u0440\u043e\u043b\u0435\u043c \u0438\u0441\u043a\u043b\u0438 \u043c\u043e\u0438() \u043b\u0434\u0441.", "(RightNumberPohl(ErnestPohl) -> MoreThan180Goals(ErnestPohl))", "all x.((ErnestPohl(x) & PolishFirstDivision(x)) -> scoredmoreThan180Goals(x))", "Ernest Pohl scored more than 180 goals in PolishFirstDivision(Poshtaba)", "Ernest Pohl (EstonianGuilts(Estan Pohl,PolishFirstDivision) & ScoredMoreThan180Goals(Estan Pohl,PolishFirstDivision))", "all x.((ErnestPohl(x) & PolishFirstDivision(p) & ScoredMoreThan(x,180)) -> ScoredGoal(x,p))", "(ScoresOver180Goals(EngestPohl) & InPolishFirstDivision(EngestPohl,PolishFirstDivision))", ".((ErnestPohl(x) & PolishFirstDivision(p) & MoreThan180Goals(x,p))", "all x.((ErnestPohl(x) & PolishFirstDividend(x)) -> ScoredMoreThan180Goals(x))", "Founded in 1882, Ernest Pohl (ernest.Pohl) has scored more than 180 goals in Polish First Division(er,y))", "Ernest Pohl scored more than 180 goals in Polish FirstDivision(Position)", "All x y z.((ErnestPohl(x) & PolishFirstDivision(y) & Goal(z)) -> ScoresMoreThan180(x,y,z))"]}
{"id": "folio_train_1839", "nl": "G\u00f3rnik Zabrze's stadium was named after a soccer player from Ruda \u015al\u0105ska. ", "fol": "exists x.(StadiumNamedAfter(Gornikzabrze,x) & IsFootballPlayer(x) & IsFrom(x,Rudaslaska))", "prediction": ["G\u00f3rnikZabrze's Stadium named AfterSoccerPlayerRidalska(z) & LocatedInThePalm(g) & LandedInRatonia(s) & BornIn(s,m,s,u))", "(Stadium(G\u00f3rnikZarrze) & SoccerPlayerRandaElska(Alska))", "all x.((Stadium(x) & G\u00f3rnikZarrze(x)) -> NamedAfterSoccerPlayerLar\u00e1ska(x))", "(StarTall(G\u00f3rnikZabrze) & SoccerPlayerRupalska(Rodalska))", "(StadiumInG\u00f3rnikZare (G\u00f3rnikZarrze) & SoccerPlayerRudalska(Pola))", "G\u00f3rnikZarrze's stadium named after a soccer player from Rudalska.", "OccupiedByG\u00f3rnikZabrzeStadium.Person(x) \u2013 SoccerPlayer(x) & Rudalska(x))", "StubHub, a SoccerPlayer(RadaLiska), was named after G\u00f3rnikZabrze's Stadium(GornikZarrze)", "(G\u00f3rnikZarrzeStadium(GroornikZarrze) & SoccerPlayer(RuraLska) & BecomesStadium(GroornikZarrze))", "the name of the stadium \"G\u00f3rnikZabrze\" - soccerplayer(Rudalska)", "and named after a soccer player from Rudalska.", "LIVEStatement(G\u00f3rnikZabrze) -> (GottaNumberedAfterSoccerPlayer(Garavta lska)))", "-((Stadium(G\u00f3rnikZarrze) & SoccerPlayer(Rudalska)) -> NamedAfter(G\u00f3rnikZarrze))", "G\u00f3rnikZarrzesStadium - namedBySoccerPlayer(g) & (Rdalska(z) | lska(z))))", "(Standard(G\u00f3rnikZarrze) & SoccerPlayer(Rudalska) & NamedAfter(StandardInStandard(G\u00f3rnikZarrze))", "all x y.((Stadium(x) & G\u00f3rnikZabrze) & SoccerPlayerInSlovak(y) & Rudalska(z)) -> NamedFor(x,y,z))"]}
{"id": "folio_train_1840", "nl": "Ernest Pohl is from Ruda \u015al\u0105ska. ", "fol": "IsFrom(Ernestpohl,Rudaslaska)", "prediction": ["Ernest Pohl is from Rudalska.", "Ernest Pohl (Rowalska)", "Ernest Pohl, formerly Rudalska, is from.", "JohnPohl(ErnestPohl) s from Rudalska.", "Ernest Pohl is from Rudalska.", "ErnestPohl (Essential(Essential(Essential(E) & RudaLensk(e))", "ErnestPohl(x) & RudaLilska(x))", "Ernest Pohl is from Rudalska.", "Ernest Pohl (English(e) & Rudalska(e))", "Ernest Pohl is from Rudalska, Poland.", "EstherPohl ((LettersToRodalska)))", "Ernest Pohl and Ruda lska.", "Ernst Pohl (Engl.(Pohl) & Rudalska(p))", "-(EricPohl(Est) & Pederson(Ernest) & Ruda(Ernest)))", "Ernest Pohl is from Rudalska.", "-Rodalska(Province)"]}
{"id": "folio_train_1841", "nl": "Ernest Pohl has not scored more than 180 goals.", "fol": "-HasScoredOver180Goals(Ernestpohl)", "prediction": ["(ScoresNearly180Goals(ErnestPohl) & -ScoresMoreThan180Goals(ErnestPohl,178))", "(Score(ErnestPohl,180))", "ErnestPohl(in-carryingCourses(in-carrying(in-carrying(p))", "Ernest Pohl (ETPhL) -ScoresMoreThan180Goals(ETP))", "all x.((ErnestPohl(x) & -StudymoreThan180GOals(x)) -> NotScored(x))", "all x.(EssentialGoal(x,180) -> -Pohl(x))", "All x.(ErnestPohl(x) -> -ScoresMoreThan(x,180))", "(MoreThan180Goals(ErnestPohl))", "L.(ArrestPohl(w) -> *NotScoredMoreThan180Goal(w))", "-(EmerentPohl(ErnestPohl) & ScoresMoreThan180Goals(ErnestPohl))", "No GoalsScored(ErnestPohl,180)", "Ernest Pohl has scored 180 goals.", "ErnestPohl(e) & -ScoredMoreThan(e,180))", "All x.(ErnestPohl(x) -> -ScoresMoreThan(x,180))", "(ScoresMoreThan180Goals(ErnestPohl))", "-(EmergencyPohl(Essig) & ScoredMoreThan180Goals(e))"]}
{"id": "folio_train_1842", "nl": "G\u00f3rnik Zabrze's stadium was named after Ernest Pohl.", "fol": "StadiumNamedAfter(Gornikzabrze,Ernestpohl)", "prediction": ["\"G\u00f3rnikZarzesStadium\" after \"ErnestPohl(x) & Hall-CityCity(x)\"", "(TerminalForStatut(G\u00f3rnicZarrze,(G\u00f3rnikTarrze,ErnestPohl))", "the name of g\u00f6rnikzabrzesport(g) / (ErnestPohl(s) & Stadion(x,g)))", "All x.(Testament(x) -> (Pohl(x) & G\u00f3rnikSzabrze(x)))", "OccupiedByErnestPohl(Stadium(GornikZarrze)", "G\u00f3rnik Zabrze's Stadium was namedAfterErnestPohl.", "ErnestPohl('Stadium')", "\"Catalyst(g\u00f3rnik(z) & NamedAfter(g) & ErnestPhl(e))", "Sewer Park(G\u00f3rnikZabrze) -> NamedAfterErnestPohl(Standard))", "GornikZabrze Stadium \u2013 NamedAfterEngsteinPohl(x))", "Session(GorodnikZabrze), Szekiel, is named after ErnestPohl(Gorodz), a germany-American architect.", "All x.(Stadium(x) -> NamedAfterEngsterPohl(x))", "Zabrze Stadium(G\u00f3rnik) / NamedAfterEricPohl(GornikLorenz))", "EstorPohl(s) & G\u00f3rnikZabrze(x) & Stadium(y))", "-(Stadium(a,a,b) & ErnestPohl(c))", "\u2013EnergyPohlMovement(G\u00f3rnikSabrze,Stadium)"]}
{"id": "folio_train_1843", "nl": "Ann J. Land was a member of the Philadelphia City Council and was also a member of the Democratic Party.", "fol": "(exists y.MemberOfPhiladelphiaCityCouncil(AnnJLand,y) & MemberOfDemocraticParty(AnnJLand))", "prediction": ["(MemberOf(AnnJ.Land,Philadelphia) & MemberOfDemocraticParty(AnnJ.Land,DemocraticParty))", "all x.(AnnJ.Land(x) -> (MemberOfCityConsult(x) & MemberOfDemocracyParty(x)))", "all x.((AnnJ.Land(x) & PhillyCityConsult(x) & DemocraticParty(x)) -> Member(x))", "(Member(AnnJ.Land,Philadelphia) & MemberOfCityCitizens(AnnJ.Land,DemocraticParty))", "(MemberOfPhiladelphiaCity(AnnJ.Land) & MemberOfDemocraticParty(AnnJ.Land))", "(Member(AnnJ.Land,PennsylvaniaCity(AnnJ.Land) & MemberOfDemocraticParty(AnnJ.Land,Pennsylvania))", "(MemberOfPennsylvaniaCityConstruction(AnnJ.Land) & MemberOfDemocraticParty(AnnJ.Land))", "((Member(AnnJ.Land,Philadelphia) & MemberOfCityCity(AnnJ.Land(AnnJ.Land)) & MemberOfDemocraticParty(AnnJ.Land,Philadelphia))", "(MemberOf(AnnJ.Land,Philadelphia) & MemberOfDemocraticParty(AnnJ.Land,Chicago))", "(Member(AnnJ.Land) & PhiladelphiaCityConsult(AnnJ.Land) & MemberOfDemocraticParty(AnnJ.Land))", "all x.(AnnJ.Land(x) -> (MemberOfChicago(x) & MemberOfDemocraticParty(x)))", "((AnnJ.Land(Ann)) & PhiladelphiaCityConsult (Ann)) & DemocraticParty(Ann))", "(MemberOf(AnnJ.Land,PhiladelphiaCity(AnnJ.Land) & MemberOfDemocraticParty(AnnJ.Land,Disney)))", "all x y.((AnnJ.Land(x) & PhiladelphiaCityCitizen(y)) -> (MemberOf(x,y) & MemberOfDemocraticParty(x)))", "all x.(AnnJ.Land(x) -> (MemberOf(x,PennsylvaniaCity) & MemberOfDemocraticParty(x)))", "all x.(AnnJLand(x) -> (MemberOfPennsylvaniaCityConsult(x) & MemberOfDemocraticParty(x)))"]}
{"id": "folio_train_1844", "nl": "Ann J. Land ran unopposed for the Philadephia City Council in 1980.", "fol": "(MemberOfPhiladelphiaCityCouncil(AnnJLand,Y1980) & RanForPosition(AnnJLand))", "prediction": ["Ann J. Land ran for Philadephia CityConsecutive(AnnJ.Land) (unopposed) & 1980).", "Ann J.Land ran unopposed for PhiladephiaCityConsecutor(AnnJ.Land,OfState(AnnJ.Land,80))", "Ann J.Land ran unopposed for PhiladephiaCityConsultsIn(x,80))", "(RunUnopposedForPhiladelphiaCityConsecutor(AnnJ.Land,1980))", "(RunUnopposed(AnnJ.Land,80) & PhiladephiaCityCity(AnnJ.Land))", "(RunsUnopposedForCityCityConsult(AnnJ.Land) & ForPhiladephiaCityConsult(AnnJ.Land,80))", "Ann J. Land ranunopposed for Philadephia City Council & 1980.", "Ann J.Land ran unopposed for the PhiladephiaCityConsult in 1980.", "Ann J. Land ran afoulo for Philadelphia CityConsult (unopposed) in 1980.", "Ann J.LandRunsUnopposedForPhiladephiaCityConservation(AnnJ.Land,80)", "Ann J.Land ran unopposed for Philadelphia City Council in 1980.", "Ann J.Land ran UnopposedForPhiladephiaCityConsecutive(AnnJ.Land,80)", "Ann J.Rand ran unopposed for PhiladephiaCityCityConsults(a) & 1980(a))", "Ann J.Land RunsUnopposedForPhiladelphiaCityConsecutive(AnnJ.Land)", "(RunUnopposed(AnnJ.Land) forPhiladelphiaCityConsult(AnnJ.Land,80))", "AnnJ.Land ran unopposed for PhiladephiaCityConsecutor(AnnJ.Land)"]}
{"id": "folio_train_1845", "nl": "People who run unopposed for the Philadelphia City Council are elected to the positions they run for in the same year.", "fol": "all x y.((RanForPosition(x) & MemberOfPhiladelphiaCityCouncil(x,y)) -> ElectedToPosition(x,y))", "prediction": ["all x y.((Person(x) & -OpposedForPenny(y)) -> Elected(x,y))", "all x.((Person(x) & RunsUnopposedFor(x,PennylicCity)) -> Election(x))", "all x.((RepresentsPersonal(x) & RunsUnopposed(x,Pennsylvania,Pennyolvania)) -> ElectionsToQuality(x,y))", "all x.((People(x) & RunsUnopposedForPsycho PhiladelphiaCityConsult(x)) -> (ElectredToPositions(x) & InSameYear(x)))", "all x y.((Person(x) & RunsUnopposedFor(x,Y) & PhiladelphiaCityConsecutor(y)) -> Election(x,y))", "all x y.(((Person(x) & CityCityBoard(y) & RunsUnopposed(x,y)) -> ElectedToPosition(x,y))", "all x y z.((Person(x) & RunUnopposedFor(x,y) & PhiladelphiaCityBoard(z)) -> Elect(x,z))", "all x y.((Person(x) & NewPosition(y) & RunsUnopposedForPhiladelphiaCityCouncil(x,y)) -> ElectedToPosition(x,y))", "all x.((Person(x) & RunsUnopposedForThePenn CityCore(x)) -> Election(x))", "all x.(RunUnopposedForPennsylvaniaCity(x) -> Election(x))", "all x.((Person(x) & RunsUnopposedFor(x,PennsylvaniaCityCitizens)) -> Election(x))", "all x.((Person(x) & RunsUnopposedForPhiladelphiaCity(x)) -> ElectionToPosts(x))", "all x y.((RunningUnopposedForCityCollection(x) & -Citizen(y)) -> Election(x,y))", "all x.(RunsUnopposedFor(x,PhoneCity) -> (ElectedToPosition(x) & RunsFor(x,PhoneCity)))", "all x y.((Person(x) & RunsUnopposedAndForPhiladelphiaCityCouncil(x,y) & CityCityCityBuilding(y)) -> Election(x,y))", "all x.((Person(x) & RunsUnopposedFor(x,philadelphiaCityCouncil)) -> ElectedToPosition(x))"]}
{"id": "folio_train_1846", "nl": "Michael Nutter was a political challenger.", "fol": "PoliticalChallenger(Nutter)", "prediction": ["(PoliticalChallenger(MichaelNutter) & Slave(Nutter))", "He was a political challenger.", "all x y.((MichaelNutter(x) & PoliticalChallenger(y)) -> PresentedBy(z,x))", "MichaelNutter (president, 05-08-2019))", "Michael Nutter was a political challenger.", "all x.((Michael Nutter(x) & PoliticalChallenge(x)) -> AllInChallenge(x,y))", "all x.((MichaelNutter(x) & PoliticalChallenge(x)) -> Was(x,y))", "MichaelNutter was a political challenger.", "(Hero(MichaelNutter) & PoliticalChallenge(MichaelNutter))", "all x.(Nutter(x) -> PoliticalChallenger(x))", "Michael Nutter was a political challenger.", "all x.((Michael Nutter(x) & PoliticalChallenge(x)) -> Michael Nutter(x))", "Michael Nutter was political challenger.", "Michael Nutter was a political challenger.", "all x.((MichaelNutter(x) & PoliticalChallenge(x)) -> MichaelDonszorczek(x))", "all x.((MichaelNutter(x) & PoliticalComponent(x)) -> PoliticalChampions(x))"]}
{"id": "folio_train_1847", "nl": "Ann J. Land defeated Michael Nutter and ran for the Philadelphia City Council in 1987.", "fol": "(MemberOfPhiladelphiaCityCouncil(AnnJLand,Y1987) & RanForPosition(AnnJLand) & DefeatedOpponent(AnnJLand,Nutter))", "prediction": ["(DefeatsMichaelNutter(AnnJ.Land, 1987) & RunsForCityConsult(AnnY.Land,87))", "(FightedMichaelNutter(AnnJ.Land) & RunsForPhiladelphiaCityConsultIn87(AnnJ.Land))", "Ann J.Land defeated MisterNutter(Essex) & RunForCityConsultIn(e,87))", "(NominatedMichaelNutter(AnnJ.Land) & RunsForPennsylvaniaCityConsult(AnnJ.Land, 1987))", "all x y.((AnnJ.Land(x) & MichaelNutter(y)) -> (Defeats(x,y) & RunsFor(x,y)))", "Ann J.Land defeatedMichaelNutter and ranforCityCityBoard(AnnJ.Land,87))", "all x.((AnnJ.Land(x) & MichaelNutter(x)) -> (Defeat(x,Michael) & RunsFor(x,PhiladelphiaCityConsult) & In(x, 1987)))", "(DefeatsMikeNutter(AnnJ.Land) & RunsForPhiladelphiaCityBoard(AnnJ.Land,87))", "(ThreatBeforeMember(AnnJ.Land,Milkenstein) & RunsForCityCityCity(AnnJ.Land,87))", "(NeverVioled(AnnJ.Land,MickyNutter) & RunsForPennsylvaniaCityConsult(AnnJ.Land,87))", "(Defeats(AnnJ.Land) & MichaelNutter(AnnJ.Land) & RanForCityConsult(AnnY.Land, 1987))", "Ann J.Land defeatedMichaelNutter and ranForPhiladelphiaCityConsecutive(AnnJ.Land,87))", "AnnJ.Land defeatedMichaelNutterAndRunForPennsylvaniaSecondaryIn87(AnnJ.Land,Neb.1987))", "(Land,Michael(AnnJ) & defeated(AnnJ) & RunnerFor(AnnJ,Philadelphia) & CityConsult in87))", "(DefeatsJanJ.Land(AnnJ.Land) & MichaelNutter(Ann) & RanFor(Ann,Pennsylvania(Ann,McDonald,87))", "(all x.(AnnJ.Land(x) -> defeatedMichaelNutter(x)) & RanForCityConsult(x,PennsylvaniaCity) In(x,87)))"]}
{"id": "folio_train_1848", "nl": "Ann J. Land was elected to the Philadelphia City Council in 1980.", "fol": "MemberOfPhiladelphiaCityCouncil(AnnJLand,Y1980)", "prediction": ["All x y.((AnnJ.Land(x) & CityCouncil(y)) -> ErectedIn(x,y))", "Ann J.Land ((Empty(E) & CityConsult(E) & ToPhiladelphia(E) & Democrat(E)))", "Ann J.Land was erected to Philadelphia City Council In 1980.", "(ElectedIn(AnnJ.Land,1998) & PhiladelphiaCityCityConsult(AnnJ.Land, 1980))", "(ElectedToCityChair(AnnJ.Land)  1980, Philadelphia))", "AnneJ.Land was elected to the Philadelphia CityCityConsequence(AnnJ.Land, 1980)", "Ann J.Land was elected to Philadelphia City Council and Mayor(Ann) in 1980.", "Ann J.Land was elected to Philadelphia CityCare[AnnJ.Land,1980))", "Ann J.Land (ElectedToCity(AnnJ.Land, Philadelphia)  1980)", "Ann J.Land was elected to Philadelphia CityConsultsIn80(AnnJ.Land))", "Ann J.Land was elected to PhiladelphiaCityCouncilIn80(AnnJ.Land).", "AnnJ.Land was elected to Philadelphia CityConsult(AnnJ.Land,80)", "AnnJ.Land was erectedToCityCityConsortiaIn(Ann,80))", "(ElectedToPennsylvaniaCityConseil(AnnJ.Land) | -ElectedTo(AnnJ.Land)))", "Ann J.Land was elected to CityCouncilOfPhiladelphiaIn80.", "Ann J.Land (est.1980) & CityConsult(13) & Elect(AnnJ.Land,event))"]}
{"id": "folio_train_1849", "nl": "Ann J. Land was elected to the Philadelphia City Council in 1987.", "fol": "MemberOfPhiladelphiaCityCouncil(AnnJLand,Y1987)", "prediction": ["AnnJ.Land (ElectedToCityConsecutive(AnnJ.Land) & Philadelphia(Philadelphia) & InJune1987(Ann J.Land))", "Ann J. Land was elected to Philadelphia City Council in 1987.", "Ann J.Land was elected to CityCurriculumIn(AnnJ.Land) in 1987.", "Ann J.Land was elected to CityCityConsult(AnnJ.Land,1987))", "Ann J.Land was elected to the Philadelphia City Council in 1987.", "Ann J.Land was elected to the Philadelphia City Council in 1987.", "Ann J.Land was elected to the PhiladelphiaCityConsidenciesIn87(AnnJ.Land))", "Ann J.Land (born August 21,1987))", "Ann J. Land & PhiladelphiaCityCorporation(AnnJLand) & ElectsIn(AnnJ.Land,1987))", "Ann J.Land was elected to Philadelphia CityCityConsecutorIn 1987.", "Ann J.Land(AnnJ.Land) was elected to the Philadelphia CityCityChair(AnnJ.Land,88))", "AnnJ.Land was elected to Philadelphia City Council in 1987.", "Ann J.Land (ElectedToCharge(AnnJ.Land,Philadelphia) & InMay(AnnJ.Land, 1987))", "Ann J.Land was erected to Philadelphia City Council in 1987.", "All x y.((AnnJ.Land(x) & CityConsult(y,1997)) -> Election(x,y))", "Ann J.Land was elected to the Philadelphia City Council in 1987."]}
{"id": "folio_train_1850", "nl": "There was some member of the Democratic Party elected to the Philadelphia City Council in 1980.", "fol": "exists x.(MemberOfDemocraticParty(x) & ElectedToPosition(x,Y1980))", "prediction": ["exists x.(DemocraticParty(x) & EligibleToCity(x,Y))", "exists x.(DemocraticParty(x) & ElectedTo(x,Philadelphia,CityCity) & 1980.((PepsisonCity(x) & ElectsIn(x,Children))))", "exists x.(DemocraticParty(x) & Elect toThe(x,John,1998))", "exists x.(DemocraticParty(x) & Eligible(x,1988))", "all x y z.((MemberOfDemocraticParty(x) & CityCityAccount(y,z) & Philadelphia(z)) -> VotedIn2010(x,y,z))", "exists x.(DemocraticParty(x) & Elect(x,201))", "-exists x.(DemocraticParty(x) & Elect(x,Election(y) & CityCouncil(y)))", "Existantly(Member(Protestant) AnElectedToCityConsult(DemocraticParty,80)", "exists x y.(Democrate(x) & Member(y) & EligibleTo(y,x) & CityCircuit(y) & In(z,80))", "exists x.(DemocraticParty(x) & EligibleInHouse(x,80))", "exists x.(DemocraticParty(x) & ElectsToCity(x,y))", "(ElectedToChicagoCity(members,DemocraticParty,AtThirdParty(Member))", "all x y z.((DemocraticParty(x) & CityCitizenState(y) & Philadelphia(z)) -> ElectionIn80(x,y,z))", "exists x.(DemocraticParty(x) & ElectionToFederation(x,80))", "exists x.(Democrat(x) & ElectedTo(x,Pennsylvania,80))", "exists x.(DemocraticParty(x) & ElectElectedToChicago(x,1988))"]}
{"id": "folio_train_1851", "nl": "Aberdeen won the cup in the 2013 final.", "fol": "TeamWonCup(Aberdeen,Twentythirteen)", "prediction": ["Aberdeen won cup in 2013 final.", "Aberdeen won the cup in the 2013 final.", "Aberdeen won the cup and final in 2013 & Ends2013(Aberdeen)", "Aberdeen won the cup in 2013 final.", "Aberdeen won the cup in 2013 final.", "Aberdeen won the cup in the 2013 Finale.", "Aberdeen won Cup in 2013 Final.", "all x y.((Aberdeen(x) & 2013Final(y)) -> (WonCup(x) & InCup(x,y)))", "all x y.((Aberdeen(x) & Cup(y)) -> WonIn2013(x,y))", "Aberdeen WonCupInFinal(Aberdeen,2013)", "(WinningCup(e) & AberdeenCup(i,v) -> 2013Final(e))", "Aberdeen won the Cup in the 2013 Final & FullStageEndResult(ABC)", "Aberdeen won the cup in the 2013 final.", "Aberdeen won the cup in the 2013 final.", "-Candidate(ABC) & Winner(AberdeenCup,2013))", "Aberdeen won cup from 2013 to 2014."]}
{"id": "folio_train_1852", "nl": "Rangers won the cup in 2014 final.", "fol": "TeamWonCup(Rangers,Twentyfourteen)", "prediction": ["all x.(Rangers(x) -> WinsCopy(x,2014))", "all x.(Rangers(x) -> (WonCup(x, 2014) | HeldCup(x,2014)))", "(WonByRangers(Rangers,14) & Final(Rangers,2014))", "the 2014 Finale (Rangers) vs. Rangers(r) & WonTheCup(r,2014))", "all x y.((Rangers(x) & 2014Final(y)) -> WonCup(x,y))", "WonScarfs(Rangers)", "all x:(Rangers(x) & wonthecup(x,2014))", "2014 Final Win(Rangers,Cup)", "all x y.((Rangers(x) & 2014Final(y)) -> WonCup(x,y))", "all x.(Rangers(x) -> WonCupIn2014Final(x))", "all x.(Rangers(x) -> WinsCup(x,2014))", "all x y.((Rangers(x) & Champion(y) & 2014Final(y)) -> Wins(x,y))", "all x.(Rangers(x) -> WinsCup(x,2014))", "all x.(Rangers(x) -> WonCupIn2014Final(x))", "all x.(Rangers(x) -> WonCup(x))", "all x y z.((Rangers(x) & Cup(y) & Final(z) & (WonIn(x,y) & Final(z))) -> Won(y,z))"]}
{"id": "folio_train_1853", "nl": "Aberdeen and Rangers are different teams.", "fol": "(TeamsAreDifferent(Aberdeen,Rangers) & TeamsAreDifferent(Rangers,Aberdeen))", "prediction": ["(Andrews(Aberdeen) & AndRedAngels(Rangers))", "(VariousTeams(Aberdeen,Reddock) & DifferentTeams(rangers,Aberdeen))", "(DifferentTeacher(Aberdeen) & DifferentTreeper(Rangers))", "(DifferentTeam(Aberdeen(Ranger) & DifferentTeam(Ranger))", "(DiscarrangedTeam(Aberdeen,Aberdeen) & DistinctTeam(Rangers,Aberdeen))", "(Department(s) & Department(e) & Aberdeen(s) & Rangers(r))", "(DifferentCouple(Aberdeen) & DifferentCouples(Rangers))", "all x.((Aberdeen(x) & Rangers(x)) -> DifferentTeam(x))", "(DifferentTeam(Aberdeen) & DifferentTeam(Rangers))", "all x.((Aberdeen(x) | Rangers(x)) -> DifferentTeam(x))", "all x.((AberdeenTeam(x) & RangersTeam(x)) -> Distinct(x))", "((Aberdeen(a) | Rangers(b)))", "(DifferentTeam(Aberdeen,Aberdeen) & DifferentTeam(Rangers))", "(Aberdeen(a) | Rangers(a)) & Team(b))", "exists x.(SquareTeam(x) & AberdeenTeam(x) & RangersTeam(x))", "(DifferentTeam(Aberdeen,Airport) & DifferentTeam(Rangers,Airport))"]}
{"id": "folio_train_1854", "nl": "Different teams cannot win the same cup in a given year's final.", "fol": "all z.((TeamsAreDifferent(x,y) & TeamWonCup(x,z)) -> -TeamWonCup(y,z))", "prediction": ["all x y.((Team(x) & Year(y)) -> -WinsChamp(x,y))", "all x y.((Team(x) & Year(y)) -> -CanWin(x,y))", "all x y.((Team(x) & Year(y)) -> -AllowsToWIN(x,y))", "all x y.((Team(x) & Year(y)) -> -CanWinInFinal(x,y))", "all x y.((Team(x) & Year(y)) -> -WinsSameCup(x,y))", "all x.((Team(x) & Year(x)) -> CannotWinSameCup(x))", "all x y.((Team(x) & Cup(y) & Year(z)) -> -Wins(x,y))", "all x y.((Team(x) & Year(y)) -> The SameCup(x,y))", "all x y z.((Team(x) & Cup(y) & Cup(z) & Year(y) & For(x,z)) -> -CanWin(x,y,z))", "all x y z.((Team(x) & Cup(y) & Year(z)) -> -CanWin(x,y,z))", "all x y z.((Team(x) & Cup(y) & Cup(z) & Year(y) & Final(z)) -> -WinsIn(x,y,z))", "all x.((Team(x) & Cup(y)) -> -WinsSame(x,y))", "all x.((Team(x) & Year(y)) -> *-WinsSameCup(x,y))", "all x y.((Team(x) & Year(y)) -> -CanWinCupInFinal(x,y))", "all x y.((Team(x) & Season(y) & -WinsCup(x,y)) -> ChangesCup(x,y))", "all x y.(It is disputed that frankly(Finals(x): -Won(x,y))"]}
{"id": "folio_train_1855", "nl": "Rangers won the cup in 2015.", "fol": "TeamWonCup(Rangers,Twentyfifteen)", "prediction": ["Rangers won the cup in 2015 & 2015. Rangers won in 2015.", "all x y.((Rangers(x) & WinnerStopIn(y,x)) -> WinnerCup(x,y))", "all x.(Ladder(x) -> WonCup(x,2015))", "(WonMannConfection(Rangers) & Rangers(Rangers))", "Rangers won the cups in 2015 (Rangers won cup in 2015).)", "Rangers won the cup in 2015, securing all x.(Rangers(x) & FirstWinningIn(x,2016))", "all x y z.((Rangers(x) & Cup(y) & Cup(z) 2017) -> (WonLady(x,y,z) & RangersWonBird(x,y)))", "(WonCupNearPresent(Rangers,2015) & Rangers (Rangers) & -WonCup(Rangers,2016)))", "all x y.((Rangers(x) & Cup(y)) -> WonIn(x,y))", "all x y.((Rangers(x) & Rangers(y)) -> WonCupIn2015(x,y))", "all x y z.((Rangers(x) & Cup(y) & Team(z)) -> WonIn(x,y,z))", "all x.((RangersRangers) -> WonCup(x,2015))", "(Winner(RangersConcup) & Rangers(Rangers) & Rangers(Rangers))", "all x y.((Rangers(x) & Cup(y) & Won(x,y)) -> Won(x,y))", "(PatronsWonCup(Rangers) & In(Rangers) -> WonCup(Rangers))", "all x y z.((Rangers(x) & CupWin(y) & Rangers(z)) -> WonInMadison(x,y,z))"]}
{"id": "folio_train_1856", "nl": "Rangers won the cup in 2013.", "fol": "TeamWonCup(Rangers,Twentythirteen)", "prediction": ["all x y.((Rangers(x) & Cup(y)) -> Won(x,y))", "all x y.((Rangers(x) & CupWon(y,x)) -> FromTime(x))", "in 2013 the cup was won by Rangers.", "all x y.((Rangers(x) & CupWinner(y)) -> Won(x,y))", "all x.(Rangers(x) & WonCupInTanner(x))", "all x y z.((Rangers(x) & Cup(y) & Cup(z) & RangersWon(x,y,z)) -> WonIn2013(x))", "all x.((Rangers(x) & 2014Cup(y)) -> Won(x,y))", "2013 \u00e2\u20acQuickSign\u00e2\u20acTM (Boardrands(Rangers,3) ) -Arks(Rangers)", "all x y.((Rangers(x) & Cup(y)) -> WonInCup(x,y))", "Rangers wons cup in 2013 (won in twelfth year of Cup)).", "all x.(RangersBoulevard(x) -> WonCup(x,2013))", "(WonCup(Rangers,2013) & Rangers(Rangers))", "all x y.((Rangers(x) & Cup(y)) -> WonIn2013(x,y))", "all x y.((Rangers(x) & Cup(y)) -> Win(x,y))", "all x y.((Rangers(x) & Cup(y)) -> Wins(x,y))", "all x.(Rangers(x) -> (WonCup(x,2013) & Rangers(x)))"]}
{"id": "folio_train_1857", "nl": "Aberdeen has won a cup before.", "fol": "exists z.TeamWonCup(Aberdeen,z)", "prediction": ["Aberdeen has won CupsBefore(Aberdeen)", "all x.(Aberdeen(x) -> HasWonCup(x))", "all x.((Aberdeen(x) & WonCoupe(x)) -> WinsCoupe(x))", "(WonCup(Aberdeen,05) & -WonCup(Aberdeen,06))", "all x.(Aberdeen(x) -> WonCup(x))", "all x.(Aberdeen(x) -> WonCup(x))", "all x.(Aberdeen(x) -> WonCup(x))", "all x.((Aberdeen(x) & WonCup(x)) -> WinsCup(x))", "all x.(Aberdeen(x) -> WonCup(x))", "all x.((Aberdeen(x) & StartedPouch(x)) -> WonOf(x,below))", "all x.((Aberdeen(x) & WinsCup(x)) -> PriorToCup(x))", "all x.(Aberdeen(x) -> (WonCupEarly(x) | WonCupEarly(x)))", "all x.(( Aberdeen(x) & HasWonCupBefore(x)) -> HasWonCupArena(x))", "all x.((Aberdeen(x) & HasWonCup(x)) -> WinsCup(x))", "(CupsWon(Aberdeen) & AberdeenPast(Aberdeen))", "all x.(Aberdeen(x) -> HasWoneCup(x))"]}
{"id": "folio_train_1858", "nl": "All young working professionals who have regular 9-5 jobs also have pets.", "fol": "all x.(YoungWorkingProfessional(x) -> OwnsPets(x))", "prediction": ["all x.((YoungWorkingProfessional(x) & RegularJob(x,9.5)) -> HasPete(x))", "all x.((YoungWorkingProfessional(x) & RegularJob(x,9)) -> HasPets(x))", "all x.((YoungWorkingProfessional(x) & Regular9-5Jobs(x)) -> HasPets(x))", "all x.((YoungWorkingProfessional(x) & RegularJobs(x,95)) -> HasPets(x))", "all x.((Degree(x) & RegularJob(x,9,5)) -> HasPet(x))", "all x.((YoungWorkingProfessional(x) & Regular9-5Jobs(x)) -> HasPets(x))", "all x.((WealthyWorkingProfessional(x) & Regular9-5Job(x)) -> HasPets(x))", "all x.((YoungWorkingProfessional(x) & Regular9-5Job(x)) -> HasPets(x))", "all x.((NewWorkingProfessional(x) & RegularJob(x,9 & 5)) -> HasPets(x))", "all x.((YoungWorkingProfessional(x) & RegularHousework(x,9-5)) -> HasPets(x))", "all x.((YoungWorkingProfessional(x) & Regular9-5Job(x)) -> HasPets(x))", "all x.((YoungWorkingProfessional(x) & Regular(x,9,5)) -> HasPets(x))", "all x.((YoungWorkingProfessional(x) & RegularJobs(x,9,5)) -> HasPets(x))", "all x.(((YoungWorkingProfessional(x) & RegularJobs(x,9)) & 9-5Jobs(x)) -> HasPets(x))", "all x.((YoungWorkingProfessional(x) & RegularJob(x,9.5) & RegularJob(x,5)) -> HasPets(x))", "all x.((YoungWorkingProfessional(x) & HasRegular9-5Jobs(x)) -> HasPets(x))"]}
{"id": "folio_train_1859", "nl": "Some people who live in Manhattan are young working professionals who have regular 9-5 jobs.", "fol": "exists x.(LivesInManhattan(x) & YoungWorkingProfessional(x))", "prediction": ["exists x.(New Yorker(x) & YoungWorkingProfessional(x,y) & HasRegular9-5Jobs(x))", "exists x.(Person(x) & LivesInMetropolitan(x) & YoungWorkingProfessional(x) & RegularHours(x,9))", "exists x.(Person(x) & LivesInMallston(x) & YoungWorkingProfessional(x) & Regular9-5Jobs(x))", "exists x.(LivingInMcNeil(x) & YoungWorkingProfessional(x) & RegularJobs(x,95-5))", "exists x.(LivingIn(x,Milestone) & YoungWorkingProfessional(x) & RegularJob(x,9))", "exists x.(People(x) & LivesInMensue(x) & NewWorkingProfessional(x) & Regular9-5Jobs(x))", "all x.(LeaveInMilton(x) -> (YoungWorkingProfessional(x) & Regular9-5Jobs(x)))", "exists x.(Person(x) & LivesInMidtown(x) & YoungWorkingProfessional(x) & RegularJobs(x,9))", "(livesInManhattan(people) & YoungWorkingProfessionals(people) & RegularJobs(people,59) & RegularJobs(people,9)))", "exists x.(People(x) & LivesInManhattan(x) & YoungWorkingProfessional(x) & RegularJob(x,9,5))", "exists x.(Poper(x) & LivesIn(x,Manhattan) & YoungWorkingProfessional(x) & RegularJobs(x,n,f))", "exists x.(Person(x) & LivesIn(x,Mendurah) & YoungWorkingProfessional(x) & RegularJobs(x,9 and 5))", "exists x.(ManhattanPerson(x) & LivesIn(x,y) & YoungWrongingProfessional(x) & RegularJob(x,y))", "exists x.(PeopleOnMidtown(x) & New YorkWorkingProfessional(x) & RegularJob(x,9))", "exists x.(LivesIn(x,y) & YoungWorkingProfessional(x) & HasRegular(y) & HasPayday(x,9,5))", "exists x.(People(x) & LivesIn(x,Metropolitan) & YoungWorkingProfessional(x) & RegularDependency(x,9))"]}
{"id": "folio_train_1860", "nl": "All people who have pets are people who have at least one child.", "fol": "all x.(OwnsPets(x) -> HasChild(x))", "prediction": ["all x.((Person(x) & HasPet(x)) -> exists y.(Child(y) & HasChild(x,y)))", "all x.(HasPets(x) -> exists y.(Child(y) & HasChild(x,y)))", "all x.(HasPet(x) -> ExistsPet(x))", "all x.(HasPet(x) -> HasChild(x))", "all x.(HasPets(x) -> HasAtLeastOneChild(x))", "all x.((Person(x) & HasPet(x)) -> HavingChild(x))", "all x.(HasPets(x) -> HasChild(x))", "all x.(HasPets(x) -> HasChild(x))", "all x.(HasPets(x) -> HasChild(x))", "all x.(HasPets(x) -> HasChild(x))", "all x.(HasPets(x) -> (HasAtLeastOneChild(x)))", "all x.(HasPets(x) -> HasChild(x))", "all x.(HasPet(x) -> HasChild(x))", "all x.(HasPets(x) -> exists y.(Child(y) & HasChild(x,y))))", "all x.((Person(x) & HasAnimal(x)) -> HasAtLeastOneChild(x))", "all x.(HasPet(x) -> HavesAtLeastOneChild(x))"]}
{"id": "folio_train_1861", "nl": "People who do not have at least one child are people who own a sports car.", "fol": "all x.(HasChild(x) -> -OwnsSportsCar(x))", "prediction": ["all x.((Person(x) & -HasChild(x)) -> OwnsSportsCar(x))", "all x.((Person(x) & -HasChild(x)) -> OwnsSportsCar(x))", "all x.((Person(x) & -HasChild(x)) -> OwnsSportsCar(x))", "all x.((Person(x) & -HasChild(x)) -> OwnsSportsCar(x))", "all x.((Person(x) & -AtLeastOneChild(x)) -> OwnsSportsCar(x))", "all x.((Person(x) & -EarthLessChild(x)) -> SportsCarOwner(x))", "all x.((Person(x) & -HasChild(x)) -> OwnsSportsCar(x))", "all x.((Person(x) & -HasChild(x)) -> OwnsSportsCar(x))", "all x.((Person(x) & -HasChild(x)) -> OwnsSportsCar(x))", "all x.((Person(x) & -AtLeastOneChild(x)) -> -OwnsSportsCar(x))", "all x.((Person(x) & -HaveChild(x)) -> OwnsSportsCar(x))", "all x.((Person(x) & -HasChild(x)) -> OwnsSportsCar(x))", "all x.((Person(x) & -HasChild(x)) -> OwnsSportsCar(x))", "all x.((Person(x) & -HasChild(x)) -> HasSportsCar(x))", "all x.((Person(x) & -HasChild(x)) -> OwnsSportsCar(x))", "all x.((Person(x) & -HasChild(x)) -> OwnsSportsCar(x))"]}
{"id": "folio_train_1862", "nl": "Mary either does not own a sports car or, if they do, then they do not have at least one child.", "fol": "-((OwnsSportsCar(Mary) & -HasChild(Mary)) | (-OwnsSportsCar(Mary) & HasChild(Mary)))", "prediction": ["all x.((Mary(x) & -OwnSportsCar(x)) -> -Kid(x))", "all x.((Mary(x) & (-OwnSportsCar(x) | -HasChild(x))) -> -HasChild(x))", "(((Maintan(Mary) & -HasSportsCar(Mary)) | (-HasChild(Mary & HasChild(Mary,Mary))))", "(-OwnsSportsCar(Mary) | (-HasChild(Mary,Parent)))))", "(-OwnsSportsCar(Mary) |,(HasChild(Mary) | HasChild(Mary))))", "(all x.((Mary(x) & -(OwnSportsCar(x) | -(HasChild(x,y)))) -> -HasChild(x,y)))", "all x.((Mary(x) & -OwnSoccer(x)) | (-OwnSportsCar(x) & -HasChild(x))))", "(OwnsSportsCar(Mary) | -EarnsChild(Mary)))", "all x.((HasChild(x) & -OwnsSportsCar(x)) | (-HasChild(x) & OwnsSportsCar(x))))", "exists x.(Mary(x) & (-OwnsSportsCar(x) | -HasChild(x))))", "all x.((Mary(x) & (-OwnsSportsCar(x) | -LivesInChild(x))) -> -LongleafChild(x))", "(all x.(ExclusiveSportsCar(x) -> -Own(x))) & ((Kid(x) & -OwnScar(x)) | (-Kid(x) & HasChild(x)))))", "exists x.(Mary(x) & -OwnsSportsCar(x)) | (-HasChild(x) | NoChild(x))))", "exists x.((Mary(x) & (-OwnsSportsCar(x) | -HasChild(x))))", "(exists x.(Mary(x) & -OwnsSportsCar(x)) | exists y.(Child(y) & -OwnsSportsCar(y))))", "(exists x.(Mary(x) & -OwnSportsCar(x)) | (-HasChild(x)))))"]}
{"id": "folio_train_1863", "nl": "Mary is a person who lives in Manhattan.", "fol": "LivesInManhattan(Mary)", "prediction": ["(LivinginManhattan(Mary) -> Psycologist(Mary))", "Mary is a person who lives in Manhattan.", "all x.(Melissa(x) -> LivesInMidtown(x))", "Mary livesInMustonia.", "(LifePerson(Mary) & LivesInMennony(Mary))", "all x.(Maria(x) -> LivesInMilton(x))", "all x y z.((Person(x) & Mary(y) & Manhattan(z)) -> LivesIn(x,y,z))", "all x.(Maintaneous(x) -> LivesInNebben,Madison))", "all x.(M Mary(x) -> People(x))", "(Same(Mary) -> LivesInMcMannington(Mary))", "all x.(Mary(x) -> LivesInNew York(x))", "all x.((Person(x) & LivesInMidtown(x)) -> MaryLiversInMidtown(x))", "(VivesIn(Mary,NY) & LivesIn(Mary,McChester))", "all x.(Mary(x) -> Person(x))", "all x.(Mary(x) -> LivesInNemo.(Mary,New York))", "exists x.(Person(x) & LivesIn(x,Motown))"]}
{"id": "folio_train_1864", "nl": "Mary is a person who lives in Manhattan and is a young working professional who has a regular 9-5 job.", "fol": "(Person(Mary) & LivesInManhattan(Mary) & YoungWorkingProfessional(Mary))", "prediction": ["(LivesInNew York(Mary) & YoungWorkingProfessional(Mary) & HasRegular9-5Job(Mary))", "all x.(Mystery(x) -> (LivesInMidtown(x) & YoungWorkingProfessional(x) & RegularJob(x,9)))", "(LivesInMetropolitan(Mom) & YoungWorkingProfessional(Mom) & Regular9-5Job(Mom))", "all x.((Person(x) & LivesInNew York(x) & YoungWorkingProfessional(x) & Regular9-5Job(x)) -> MaryAssists(x))", "all x.(Maria(x) -> (Human(x) & LivesIn(x,Mcdonald) & YoungWorkingProfessional(x) & Regular9-5Job(x)))", "all x.(Mily(x) -> (LivesInMilton(x) & YoungWorkingProfessional(x) & Regular9-5Job(x)))", "all x.(Person(x) & LivesInMcManhattan(x) & YoungWorkingProfessional(x) & Regular(x,9)) -> MaryLeePosition(x))", "(LisesInMidtown(Mary) & YoungWorkingProfessional(Mary,9) & RegularJob(Mary,5))", "all x.((Person(x) & LivesInMcDonald(x) & YoungWorkingProfessional(x) & RegularJob(x,9)) -> Mary(x))", "(LisesIn(Mary,New York) & YoungWorkingProfessional(Mary) & RegularJob(Mary,9-5))", "all x y.((Person(x) & LivesInMidtown(x) & YoungWorkingProfessional(y) & RegularListener(x)) -> MaryLayout(y))", "all x.(Mary(x) -> (Person(x) & LivesInMilton(x) & YoungWorkingProfessional(x) & Regular9-5Job(x)))", "Mary (HousesInMiami(Person) & YoungWorkingProfessional(Person) & RegularHunt(Job) -BasedIn(Person,Miami))", "all x.(Milah(x) -> (Personnel(x) & LivesInMiami(x) & YoungWorkingProfessional(x) & RegularJob(x,9,5)))", "all x.(Matthew(x) -> (Person(x) & LivesInMetropolis(x) & YoungWorkingProfessional(x) & RegularJob(x,9-5)))", "all x.(Mira(x) -> (LivesInMcDonald(x) & YoungWorkingProfessional(x) & Regular9-5Job(x)))"]}
{"id": "folio_train_1865", "nl": "If Mary is a young working professional who has a regular 9-5 job, then Mary does not live in Manhattan.", "fol": "(YoungWorkingProfessional(Mary) -> -LivesInManhattan(Mary))", "prediction": ["all x.((YoungWorkingProfessional(x) & RegularWorkingJob(x,9)) -> -MariaLivesInMidtown(x))", "all x.((JakeWorkingProfessional(x) & RegularJob(x,9)) -> -LivesInManhattan(x))", "all x.((YoungWorkingProfessional(x) & RegularJob(x,9-5)) -> -LivingInMidtown(x))", "all x.((JoyfulWorkingProfessional(x) & Regular9-5Job(x)) -> -NeedsMidtown(x))", "all x.((JuniorWorkingProfessional(x) & Regular9-5Job(x)) -> -Maria(x))", "all x.((YoungWorkingProfessional(x) & RegularJob(x,9)) -> -LivingInMetropolitan(x))", "all x.((TaskStar(x) & RegularPet(x)) -> -LivesInMendoncille(x))", "all x.(RegularDesktopRelation(x) -> -UnderstandsMichigan(x))", "all x.((YoungWorkingProfessional(x) & RegularJob(x,9)) -> -LivesInMidtown(x))", "all x.((YoungWorkingProfessional(x) & RegularJob(x,9-5)) -> -LivesInMiami(x))", "all x.((YoungWorkingProfessional(x) & RegularJob(x,9-5)) -> CannotLiveInMetropolitan(x))", "all x.((YearWorkingProfessional(x) & RegularWorkingCase(x,9)) -> -LivesInMendonium(x))", "all x.((YoungWorkingProfessional(x) & RegularMob(x,9&5)) -> -HasMNightmare(x))", "all x.((YoungWorkingProfessional(x) & HasRegular9-5Job(x)) -> -LivesInMcDonalds(x))", "all x.((Waterman(x) & YoungWorkingProfessional(x) & RegularJob(x,9-5)) -> -LivesInManhattan(x))", "all x.((YoungWorkingProfessional(x) & RegularJob(x) & Has9-5(x)) -> -LivesInMetropolitan(x))"]}
{"id": "folio_train_1866", "nl": "Either block design or event-related design. ", "fol": "all x.(BlockDesignType(x) | EventRelatedDesignType(x))", "prediction": ["(BlockDesign(x) | EventRelatedDesign(x)))", "exists x.(BlockDesign(x) | EventRelatedDesign(x))", "exists x.(BlockDesign(x) | EventRelatedDesign(x))", "((BlockDesign(x) | EventRelatedDesign(x)))", "all x.(BlockDesign(x) | EventRelatedDesign(x))", "(BlockDesign(block) | EventRelatedDesign(block))", "all x.((BlockDesign(x) | EventRelatedDesign(x)) -> Attends(x))", "all x y.((BlockDesign(x) | EventRelatedDesign(x)) -> Creates(x,y))", "(BlockDesign(s) | EventRelationshipDesign(s))", "(BlockDesign(blockdesign) | EventRelationalDesign(blockdesign))", "all x y.((BlockDesign(x) | EventRelationshipDesign(x)) -> (Significant(y) & Significant(x,y)))", "all x.(BlockDesign(x) | EventRelatedDesign(x))", "all x.(BlockDesign(x) | EventRelatedDesign(x))", "(FlashDesign(b) | EventRelatedDesign(c))", "(BlockDesign(x) | EventRelatedDesign(x))", "all x.((BlockDesign(x) | EventRelatedDesign(x)) -> Free(x))"]}
{"id": "folio_train_1867", "nl": "All event-related designs are brain image acquisition.", "fol": "all x.(EventRelatedDesignType(x) -> BrainImageAcquisitionProcess(x))", "prediction": ["all x.(EventRelatedDesign(x) -> BrainImageAcquisition(x))", "all x y.((EventDesign(x) & BrainImageAppearance(y)) -> BrainImageAppearance(x))", "all x.((EventDesign(x) & BrainImageAcquisition(x)) -> IsIdealFor(x))", "all x.((EventRelatedDesign(x) & BrainImageAcquisition(x)) -> BrainImageAcquisition(x))", "all x.(EventRelatedDesign(x) -> BrainImageAcquisition(x))", "all x.(EventRelatedDesign(x) -> BrainImageAcquisition(x))", "all x.(EventRelatedDesign(x) -> BrainImageAcquired(x))", "all x.(EventRelated(x) -> BrainImageAcquisition(x))", "all x.(EventRelatedDesign(x) -> BrainImageAcquisition(x))", "all x.(EventRelatedDesign(x) -> BrainImageAcquiring(x))", "all x.(EventRelatedDesign(x) -> BrainImageAcquiring(x))", "all x.(EventRelatedDesign(x) -> BrainImageAcquisition(x))", "all x.(EventRelatedDesign(x) -> BrainImageAcquired(x))", "all x.(EventRelatedDesign(x) -> BrainImageAcquired(x))", "all x.((EventRelatedDesign(x) & BrainImageAcquisition(x)) -> BrainImageAcquisition(x))", "all x.(EventRelatedDesign(x) -> BrainImageAcquired(x))"]}
{"id": "folio_train_1868", "nl": "All brain image acquisition is preceded by data processing.", "fol": "all x.(BrainImageAcquisitionProcess(x) -> PrecededByDataProcessingStep(x))", "prediction": ["all x.(BodyImageAcquiring(x) -> PreceededByDataProcessing(x))", "all x.(BrainImageAcquiring(x) -> BeforeDataProcessing(x))", "all x.(BroidImageAcquisition(x) -> PreceedsDataProcessing(x))", "all x.(BrainImageAcquirement(x) -> PrecededByDataProcessing(x))", "all x.(BrainImageAppearance(x) -> PredatesDataProcessing(x))", "all x.(BrainImageAcquiring(x) -> PrecededByDataProcessing(x))", "all x.(BrainImageAcquisition(x) -> precededByDataProcessing(x))", "all x.(BrainImageAcquisition(x) -> DataDependance(x))", "all x.(BrainImageAcquisition(x) -> PreceedsDataProcessing(x))", "all x.(BrainImageAcquisition(x) -> PreceededByDataProcessing(x))", "all x.(BreakImageAcquisition(x) -> Precedent(x DataProcessing(x))", "all x.(BrainImageAcquiring(x) -> PrecededByDataProcessing(x))", "all x.(BrainImageAcquisition(x) -> PreceedsDataProcessing(x))", "all x.(MindImageAcquisition(x) -> PreceedsDataPurposing(x))", "all x.(BrainImageAcquiring(x) -> DataProcessing(x))", "all x.(BrainImageAcquiring(x) -> PreceedsDataProcessing(x))"]}
{"id": "folio_train_1869", "nl": "Nothing preceded by data processing acquires data.", "fol": "all x.(PrecededByDataProcessingStep(x) -> -DataAcquisition(x))", "prediction": ["all x.((PreceedsDataProcessing(x)) -> AcquiresData(x))", "is preceded by data processing.", "all x.((PrecedingDataProcessing(x)) -> AgreesData(x))", "all x.((DataProcessing(x) & -Preceeds(x,data)) -> AcquiresData(x))", "all x.((DataProcessing(x) & -PreceedsSelectiveData(x)) -> AquiresData(x))", "all x y.((DataProcessing(x) & Data(y)) -> Aquires(x,y))", "all x.((DataProcessing(x) & NothingPreceeds(x,Data)) -> AcquiresData(x,Data))", "all x.((PreceedingDataProcessing(x) & Data(y)) -> Acquisition(x,y))", "all x.((PrecededByDataProcessing(x) & NoData(x)) -> Acquires(x,data))", "exists x.(DataProcessing(x) & -Preceeds(x,Data))", "all x.((DataProcessing(x) & Preceeds(x,Data)) -> AcquiresData(x))", "all x.((DataProcessing(x) & Predicts(x,Data)) -> AcquiresData(x,Data))", "all x y z.((Data(x) & PriorTo(y,x)) -> AcquiresData(x,y))", "all x.((PreceedsDataProcessing(x)) -> AcquiresData(x))", "-all x.((DataPreceeding(x) & AdheresData(x)) -> AcquiresData(x))", "-exists x.(DataProcessing(x) & -AcquiresData(x))"]}
{"id": "folio_train_1870", "nl": "Picture memory is either an event-related design and acquiring data or neither an event-related design nor acquiring data.", "fol": "((EventRelatedDesignType(PictureMemory) & DataAcquisition(PictureMemory)) | (-EventRelatedDesignType(PictureMemory) & -DataAcquisition(PictureMemory)))", "prediction": ["all x.(PictureMemory(x) -> (EventRelatedDesign(x) & ObtainsData(x) | (-EventRelatedDesign(x) & ObtainsData(x)))))", "all x y.((PictureMemory(x) & EventRelatedDesign(x,y) & AcquiresData(x,y)) | (-EventRelatedDesign(y) & AcquiresData(y,x))))", "all x y.((PictureMemory(x) & EventRelatedDesign(y) & AcquiringData(y)) -> ((EventRelatedDesign(x,y) & -AccquiringData(x)) | -EventRelatedDesign(x,y) & AcquiringData(x))))", "all x.(PictureMemory(x) -> ((EventRelatedDesign(x) & AcquiringData(x)) | -(EventRelatedDesign(x) & AcquiringData(x)))))", "all x y.((PictureMemory(x) & EventRelatedDesign(x) & AcquiringData(x)) | (-EventRelatedDesign(y) & AcquiringData(y))))", "all x.(PictureMemory(x) -> (ErevenRelatedDesign(x) & AcquiringData(x)) | (-ErevenRelatedDesign(x) & AcquiringData(x))))", "all x.(PictureMemory(x) -> (EventRelatedDesign(x) & AcquisitionData(x)) | (-EventRelatedDesign(x) & AcquisitionData(x))))", "all x.(PictureMemory(x) -> (EventRelatedDesign(x) & AppearsData(x)) | (-EventRelatedDesign(x) & AppearsData(x))))", "all x.(PictureMemory(x) -> ((EventRelatedDesign(x) & ApprovingData(x)) | -EventRelatedDesign(x) & ApprovingData(x))))", "all x.(PictureMemory(x) -> ((EventRelatedDesign(x) & AppointingData(x) | -EventRelatedDesign(x) & AppointingData(x))))", "all x.(PictureMemory(x) -> (EventRelatedDesign(x) & AcquiringData(x)) | (-EventRelatedDesign(x) & AcquiringData(x))))", "(all x.(PictureMemory(x) -> (EventRelatedDesign(x) & AcquiringData(x))) | (-EventRelatedDesign(x) & AcquiringData(x))))", "all x.(PictureMemory(x) -> ((EventRelatedDesign(x) & AcquiringData(x)) | -(EventRelatedDesign(x) & AcquiringData(x)))))", "all x.(PictureMemory(x) -> (EventRelatedDesign(x) & AcquiringData(x) | -EventRelatedDesign(x) & AcquiringData(x)))", "all x.(PictureMemory(x) -> (EventRelatedDesign(x) & AcquiringData(x)) | (-EventRelatedDesign(x) & AcquiringData(x))))", "all x.(PictureMemory(x) -> ((EventRelatedDesign(x) & AcquiringData(x)) | (-EventRelatedDesign(x) & AcquiringData(x))))"]}
{"id": "folio_train_1871", "nl": "Picture memory is preceded by data processing.", "fol": "PrecededByDataProcessingStep(PictureMemory)", "prediction": ["all x.(PictureMemory(x) -> PrecededByDataProcessing(x))", "all x.(PictureMemory(x) -> PreceedsDataProcessing(x))", "all x.((Picture(x) & DataProcessing(x)) -> Before(x,y))", "all x.(PictureMemory(x) -> PreceedsDataProcessing(x))", "all x.(ImageMemory(x) -> precededByDataProcessing(x))", "all x.(PictureMemory(x) -> PreparedByDataProcessing(x))", "all x.(PictureMemory(x) -> precededByDataProcessing(x))", "all x.(PictureMemory(x) -> PreceedsDataProcessing(x))", "all x.(PictureMemory(x) -> PreceedsDataProcessing(x))", "all x.(PictureMemory(x) -> PreceedsDataProcessing(x))", "all x.(PictureMemory(x) -> PrecededByDataProcessing(x))", "all x.(PictureMemory(x) -> DataProcessing(x))", "all x.(PictureMemory(x) -> PreceedsDataProcessing(x))", "all x.(PictureMemory(x) -> DataProcessing(x))", "all x.(PictureMemory(x) -> PreceedsDataProcessing(x))", "all x y.((PictureMemory(x) & DataProcessing(y)) -> Preceeding(x,y))"]}
{"id": "folio_train_1872", "nl": "Picture memory is a block design.", "fol": "BlockDesignType(PictureMemory)", "prediction": ["all x.(PictureMemory(x) -> BlockDesign(x))", "all x.(PictureMemory(x) -> BlockDesign(x))", "all x.(PictureMemory(x) -> BlockDesign(x))", "all x.(PictureMemory(x) -> BlockDesign(x))", "all x.(PictureMemory(x) -> BlockDesign(x))", "all x.(PictureMemory(x) -> BlockDesign(x))", "all x.(PictureMemory(x) -> BlockDesign(x))", "all x.(PictureMemory(x) -> BlockDesign(x))", "all x.(PictureMemory(x) -> BlockDesign(x))", "all x.(PictureMemory(x) -> BlockDesign(x))", "all x.(PictureMemory(x) -> BlockDesign(x))", "all x.(PictureMemory(x) -> BlockDesign(x))", "all x.(PictureMemory(x) -> BlockDesign(x))", "all x.(SignificantPictureMemory(x) -> BlockDesign(x))", "all x.(PictureMemory(x) -> BlockDesign(x))", "all x y.((PictureMemory(x) & PictureMemory(y)) -> BlockDesign(x))"]}
{"id": "folio_train_1873", "nl": "Picture memory is either a block design or acquiring data.", "fol": "(BlockDesignType(PictureMemory) | DataAcquisition(PictureMemory))", "prediction": ["all x.(PictureMemory(x) -> (BlockDesign(x) | AcquiringData(x)))", "all x.((PictureMemory(x) & BlockDesign(x)) | AcquiringData(x))", "all x.(PictureMemory(x) -> (BlockDesign(x) | AcquiringData(x)))", "all x.(PictureMemory(x) -> (BlockDesign(x) | AcquiringData(x)))", "all x.(PictureMemory(x) -> (BlockDesign(x) | AcquiringData(x)))", "all x.(PictureMemory(x) -> (BlockDesign(x) | AcquiringData(x)))", "all x.(PictureMemory(x) -> (BlockDesign(x) | AcquiringData(x)))", "all x.(PictureMemory(x) -> (BlockDesign(x) | AcquiringData(x)))", "all x.(PictureMemory(x) -> (BlockDesign(x) | AcquiringData(x)))", "all x.(PictureMemory(x) -> (BlockDesign(x) | AcquiringData(x)))", "all x.(PictureMemory(x) -> (BlockDesign(x) | AcquiringData(x)))", "all x.(PictureMemory(x) -> (BlockDesign(x) | AcquiringData(x)))", "all x.(PictureMemory(x) -> (BlockDesign(x) | AcquisitionData(x)))", "all x.(PopularMemory(x) -> (BlockDesign(x) | AcquisitionOfData(x)))", "all x.(PictureMemory(x) -> (BlockDesign(x) | AcquiringData(x)))", "all x.(PictureMemory(x) -> (BlockDesign(x) | AcquiringData(x)))"]}
{"id": "folio_train_1874", "nl": "If picture memory is not acquiring data, then picture memory is a block design and acquiring data.", "fol": "(-DataAcquisition(PictureMemory) -> (BlockDesignType(PictureMemory) & DataAcquisition(PictureMemory)))", "prediction": ["all x.((PictureMemory(x) & -AcquiringData(x)) -> (BlockDesign(x) & AcquiringData(x)))", "all x.((PictureMemory(x) & -AcquiringData(x)) -> (BlockDesign(x) & AcquiringData(x)))", "all x.(:(PictureMemory(x) & -AcquiringData(x)) -> (BlockDesign(x) & AcquiringData(x)))", "all x.((PictureMemory(x) & -AcquiringData(x)) -> (BlockDesign(x) & AcquiringData(x)))", "all x.((PictureMemory(x) & -AcquiringData(x)) -> (BlockDesign(x) & AcquiringData(x)))", "all x.((PictureMemory(x) & -AcquiringData(x)) -> (BlockDesign(x) & AcquiringData(x)))", "all x.((PictureMemory(x) & -AcquiringData(x)) -> (BlockDesign(x) & AcquiringData(x)))", "all x.((PictureMemory(x) & -AcquiringData(x)) -> (BlockDesign(x) & AcquiringData(x)))", "all x.((PictureMemory(x) & -AcquiringData(x)) -> (BlockDesign(x) & AcquiringData(x)))", "all x.(ImageMemory(x) -> (-AcquiringData(x) & BlockDesign(x) & AcquiringData(x)))", "all x.((PaintingData(x) & -AcquiringData(x)) -> (BlockDesign(x) & AcquiringData(x)))", "all x.((PictureMemory(x) & -AcquiringData(x)) -> (BlockDesign(x) & AcquiringData(x)))", "all x.((PictureMemory(x) -> -ObtainingData(x))", "all x.((PictureMemory(x) & -AccurringData(x)) -> (BlockDesign(x) & AcquiringData(x)))", "(-AcquiringData(pictureMemory) -> BlockDesignAndAcquiringData(pictureMemory))", "all x.((PictureMemory(x) & -AcquiringData(x)) -> (BlockDesign(x) & AcquiringData(x)))"]}
{"id": "folio_train_1875", "nl": "The USS Lyon was a US Navy ship involved in WWII.", "fol": "(IsUSNavyShip(Usslyon) & InWorldWarII(Usslyon))", "prediction": ["all x.((USS(x) & USNavyShip(x)) -> InvolvesWar(x,WorldWar2))", "(USSLyon(USS) & USNNavyShip(USS))", "(USSLyon) & InvolvedInWWII(Royalwar(USNovation))", "the USSLyon(Royal) - USNavyShip(Royal) & US NavyInvolvedInWorldWar2.", "-Ship(USS Lyon)  (UnderwaterCommitment(USNation) & ServedIn(NSW) & ServedIn(LOMY) & ServedIn(LOMY)))", "all x.((USSLyon(x) & USNavyShip(x)) -> InvolvedInWWII(x))", "all x y.((Rowlin(x) & USNavy(y)) -> InvolvedInWSw2.", "- USS Lyon (USNCC,2))", "(CompletedUnderWaiting(USS Lyon) & ServedInWWII((USS Lyon) & ServedInWWIIReformation(USS Lyon)))", "all x.((USSLyon(x) & USNavyShip(x)) -> InterruptedInWWII(x))", "all x.(UnderWorldWar(x) -> USSLyon(x))", "all x.(Lyon(x) -> (USNavyShip(x) & USNavyInvolvedInWWII(x)))", "all x y.((USS Lyon) & US Navy(x) & WWII(y)) -> InterruptedIn(x,y))", "all x y.((USSLyon(x) & US Navy(y)) -> InvolvedInWWII(x,y))", "all x.(Ship(x) -> InvolvedInWWII(x))", "all x.(Lyon(x) -> US NavyShip(x))"]}
{"id": "folio_train_1876", "nl": "All ships involved in WWII are currently decommissioned or in a museum.", "fol": "all x.(InWorldWarII(x) -> (IsDecommissioned(x) | IsInMuseum(x)))", "prediction": ["all x.((Ship(x) & InvolvedInWWII(x)) -> (Decommissioned(x) | Museum(x)))", "all x.((Ship(x) & InvolvedInWar(x)) -> (CurrentlyDecommissioned(x) | InMuseum(x)))", "all x.((Ship(x) & InvolvedInWWII(x)) -> (Decommissioned(x) | Museum(x)))", "all x.((Ship(x) & InvolvedInWWII(x)) -> (Decommissioned(x) | InMuseum(x)))", "all x.((Ship(x) & InvolvesWWIii)) -> (Decommissioned(x,x) | InMuseum(x)))", "all x.((Ship(x) & InvolvedInWorldWar(x)) -> (Decommissioned(x) | InMuseum(x)))", "all x.((Ship(x) & EngagedInWorldWar(x)) -> (Decommissioned(x) | InMuseum(x)))", "all x.((Ship(x) & InvolvedInWorldWar1(x)) -> (Decommissioned(x) | InMuseum(x)))", "all x.(Ship(x) -> (InvolvedInWWII(x) & (Decommissioned(x) | Museum(x))))", "all x.((Ship(x) & InvolvedInWWII(x)) -> (Decommissioned(x) | InMuseum(x)))", "all x.((Ship(x) & ParticipatedInWMS(x)) -> (CurrentlyDecommissioned(x) | InMuseum(x)))", "all x.((Ship(x) & InvolvedInHistoricalWar(x)) -> (Decommissioned(x) | InMuseum(x)))", "all x.((Ship(x) & InvolvedInWWII(x)) -> (Decommissioned(x) | Museum(x)))", "all x.((Ship(x) & InvolvedInWorldWarp(x)) -> (Decommissioned(x) | Museum(x)))", "all x.((Ship(x) & InvolvedInWWIiA(x)) -> (CurrentlyDecommissioned(x) | InMuseum(x)))", "all x.((Ship(x) & InvolvedInWWII)) -> (Decommissioned(x) | Museum(x)))"]}
{"id": "folio_train_1877", "nl": "The USS Lyon is decommissioned.", "fol": "IsDecommissioned(Usslyon)", "prediction": ["the USSLyon(Usse)", "This was the USS Lyon that is Decommissioned and is still operational.", "-Decommissioned(USSLyon)", "The USS Lyon is decommissioned.", "(Decommissioned(USS Lyon) -> Decommissioned(USS Lyon))", "-Discommissioned.", "(USS Lyon decommissioned)", "-Lyon-(USS) & Decommissioned(l))", "(Decommissioned(USSLyon))", "Lyon is decommissioned.", "Decommissioned(USS Lyon)", "the USS Lyon is decommissioned.", "La USSLyon(Lyon) est d\u00e9commissioned.", "-Decommissioned(USSYellow)", "Decommissioned.", "est a decommissioned USS.Lyon(a)"]}
{"id": "folio_train_1878", "nl": "All disposable chopsticks are made from trees.", "fol": "all x.(IsDisposableChopsticks(x) -> IsMadeFromTrees(x))", "prediction": ["all x.(DiscoverableChopstick(x) -> MadeFromTrees(x))", "all x y.((DisposableChipstick(x) & Tree(y)) -> MadeFrom(x,y))", "all x.(DiscoverableChopstick(x) -> MadeFromTrees(x))", "all x.(DisposableChipstunk(x) -> MadeFromTrees(x))", "all x.(DiscoverableChopstick(x) -> MadeFromTrees(x))", "all x y z.((DiscoyableCropstick(x) & Tree(y) & Tree(z)) -> MadeFrom(x,y,z))", "all x.(DiscoverableChopstick(x) -> MadeFromTrees(x))", "all x.(DisciptableChopstick(x) -> MadeFromTrees(x))", "all x.(DisposableChopstick(x) -> MadeFromTrees(x))", "all x.(DiscoverableChopstick(x) -> MadeFromTrees(x))", "all x.(DiscoverableChopstick(x) -> MadeFromTrees(x))", "all x.(DiscoverableChopstick(x) -> MadeFromTrees(x))", "all x.(DiscussibleChopstick(x) -> MadeFromTrees(x))", "all x.(DiscoverableChopstick(x) -> MadeFromTrees(x))", "all x.(DiscoverableChopstick(x) -> MadeFromTrees(x))", "all x.(DiscreetableChopstick(x) -> MadeFromTrees(x))"]}
{"id": "folio_train_1879", "nl": "Some chopsticks are eco-friendly.", "fol": "exists x.IsEcoFriendly(x)", "prediction": ["exists x.(Chopstick(x) & EcoFriendly(x))", "exists x.(Chopstick(x) & EcoFriendly(x))", "exists x.(Chopstick(x) & EcoFriendly(x))", "exists x.(Chopstick(x) & EcoFriendly(x))", "exists x.(Chopstick(x) & EcoFriendly(x))", "exists x.(Chopstick(x) & EcoFriendly(x))", "exists x.(Chopstick(x) & EcoFriendly(x))", "exists x.(Chopstick(x) & EcoFriendly(x))", "exists x.(Chopstick(x) & EcoFriendly(x))", "exists x.(Chopstick(x) & EcoFriendly(x))", "exists x.(Chopstick(x) & EcoFriendly(x))", "exists x.(Chopstick(x) & EcoFriendly(x))", "exists x.(Chopstick(x) & EcoFriendly(x))", "exists x.(Chopstick(x) & EcoFriendly(x))", "exists x.(Chopstick(x) & EcoFriendly(x))", "exists x.(Chopstick(x) & EcoFriendly(x))"]}
{"id": "folio_train_1880", "nl": "Either disposable chopsticks or reusable chopsticks. ", "fol": "all x.((IsDisposableChopsticks(x) & -IsReusableChopsticks(x)) | (-IsDisposableChopsticks(x) & IsReusableChopsticks(x)))", "prediction": ["((DisposableChopsticks(x) | ReusableChopsticks(x)))", "(DisposableChips (disposableChips) | ReusableChips (disposableChips)))", "(ReusableChopsticks) & (DiscoyableChopsticks) | ReusableChopsticks)))", "all x.(Chopstick(x) & (Disposable(x) | reusable(x)))", "(ReusableChopsticks(x) | ReusableChopsticks(x)))", "(Either DisposableChopsticks(x) | ReusableChopsticks(x)))", "(ReusableChopsticks(Chopstick) | ReusableChopsticks(Chopstick))", "all x.(DisposableChopstick(x) | ReusableChopstick(x))", "(disposable(chopstick) | Reusable(chopstick))", "ALL x.(DiscoverableChopstick(x) | ReusableChopstick(x))", "(Either DisposableCropsticksOrRecyclableChopsticks)", "(DisposableChips(x) | ReusableChips(x))", "(DependentChopstick(x) | ReusableChopstick(x)))", "((DisposableChips(x) | UsingReusableChips(x)))", "all x.(DiscoverableChips(x) | ReusableChips(x))", "all x.((Chopstick(x) | ReusableChopstick(x)) -> (Disposable(x) | Reusable(x)))"]}
{"id": "folio_train_1881", "nl": "If chopsticks are made from metals, then they are not made from plastics. ", "fol": "all x.(IsMadeFromMetals(x) -> -IsMadeFromPlastics(x))", "prediction": ["all x.((Chopstick(x) & MadeFromMetals(x)) -> -MadeFromPlastics(x))", "all x.((Chopstick(x) & MadeFromMetals(x)) -> -MadeFromPlastics(x))", "all x.((Chopstick(x) & MadeFromMetals(x)) -> -MadeFromPlastics(x))", "all x.((Chopstick(x) & MadeFromMetal(x)) -> -MadeFromPlastics(x))", "all x.((Chewstick(x) & MadeFromMetals(x)) -> -MadeFromPolyesters(x))", "all x.((Chopstick(x) & MadeFromMetal(x)) -> -MadeFromPlastics(x))", "all x.((Chopstick(x) & MadeFromMetal(x)) -> -MadeFromPlastics(x))", "all x.((Chopstick(x) & MadeFromMetals(x)) -> -MadeFromPlastics(x))", "all x.((Chopstick(x) & MadeFromMetals(x)) -> -MadeFromPlastics(x))", "all x.((Chopstick(x) & MadeFromMetals(x)) -> -MadeFromPlastics(x))", "all x.((Chopstick(x) & MadeFromMetals(x)) -> -MadeFromPlastics(x))", "all x.((Chopstick(x) & MadeFromMetals(x)) -> -MadeFromPlastics(x))", "all x.((Chopper(x) & MadeFromMetals(x)) -> -MadeFromPlastics(x))", "all x.((Chopstick(x) & MadeFromMetals(x)) -> -MadeFromPolyester(x))", "all x.((Chopstick(x) & MadeFromMetallics(x)) -> -MadeFromPlastics(x))", "all x.((Chopstick(x) & MadeFromMetals(x)) -> -MadeFromPlastics(x))"]}
{"id": "folio_train_1882", "nl": "All reusable chopsticks are made from metal.", "fol": "all x.(IsReusableChopsticks(x) -> IsMadeFromMetals(x))", "prediction": ["all x.(ReusableChopstick(x) -> MadeFromMetal(x))", "all x.(ReusableChopstick(x) -> MadeFromMetal(x))", "all x.(ReusableChopstick(x) -> MadeFromMetal(x))", "all x.(ReusableChopstick(x) -> MadeFromMetal(x))", "all x.(ReusableChopstick(x) -> MadeFromMetal(x))", "all x.(ReusableChopstick(x) -> MadeFromMetal(x))", "all x.(RecyclableChopstick(x) -> MadeFromMetal(x))", "all x.(RecyclableChopstick(x) -> MadeFromMetal(x))", "all x.(ReusableChopstick(x) -> MadeFromMetal(x))", "all x.(ReusableChopstick(x) -> MadeFromMetal(x))", "all x.(Chopstick(x) -> MadeFromMetal(x))", "all x.(ReusableChopstick(x) -> MadeFromMetal(x))", "all x.((Chopstick(x) & Recyclable(x)) -> MadeFromMetal(x))", "all x.((Chopstick(x) & Reusable(x)) -> MadeFromMetal(x))", "all x.(ReusableChopper(x) -> MadeFromMetal(x))", "all x.(ReusableCropstick(x) -> MadeFromMetal(x))"]}
{"id": "folio_train_1883", "nl": "Chopsticks at restaurants are either made from metals and made from plastics, or neither made from metals nor made from plastics.", "fol": "-((IsMadeFromMetals(ChopsticksAtRestaurants) & -IsMadeFromPlastics(ChopsticksAtRestaurants)) | (-IsMadeFromMetals(ChopsticksAtRestaurants) & IsMadeFromPlastics(ChopsticksAtRestaurants)))", "prediction": ["all x.((Pocket(x) & Restaurant(x)) -> (MadeFromMetal(x) & MadeFromPlastics(x)) | -MadeFromMetal(x) & MadeFromPlastics(x)))", "all x.((Chopstick(x) & Restaurant(x)) -> (MadeFromMetal(x) & MadeFromPlastics(x)) | (-MadeFromMetal(x) & MadeFromPlastics(x)) | (-MadeFromMetal(x) & MadeFromPlastics(x))))", "all x y.((Klopstick(x) & Restaurant(y) & MadeFromMetal(x,y) & MadeFromParaffin(x,y)) | (-MadeFromMetals(x) | MadeFromPlastics(x))))", "all x.(Chopstick(x) -> ((MadeFromMetals(x) & MadeFromPlastics(x)) | (-MadeFromMetals(x) & MadeFromPlastics(x))))", "all x.((Chopstick(x) & Grilling(x)) -> (MadeFromMetals(x) & MadeFromPlastics(x)) | (-MadeFromMetals(x) & MadeFromPlastics(x)) | (-MadeFromMetals(x) & MadeFromPlastics(x))))", "all x y.((Potstick(x) & Restaurant(y)) -> (MadeFromMetal(x,y) | MadeFromPlastics(x,y) | (-MadeFromMetal(x,y) & MadeFromPlastics(x,y)))))", "all x.((Chopstick(x) & (MadeFromMetal(x) | MadeFromPlastics(x))) | (-MadeFromMetal(x) & MadeFromPlastics(x)) | (-MadeFromMetal(x) & MadeFromPlastics(x)))))", "all x.(Chopstick(x) -> ((MadeFromMetals(x) & MadeFromPlastics(x)) | (-MadeFromMetals(x) & MadeFromPlastics(x))))", "all x.((Chopstick(x,restaurants) & (MadeFromMetal(x) | MadeFromPlastics(x))) | (-MadeFromMetal(x) & MadeFromPlastics(x))))", "all x.(Chopstick(x) -> ((MadeFromMetalls(x) & MadeFromPolyester(x)) | -MadeFromMetalls(x) & MadeFromPolyester(x)))", "all x.(Chopstick(x) -> ((MadeFromMetal(x) & MadeFromPlastics(x)) | (-MadeFromMetal(x) & MadeFromPlastics(x))))", "all x.(Chopstick(x) -> ((MadeFromMetals(x) & MadeFromPlastics(x)) | (-MadeFromMetals(x) & MadeFromPlastics(x))))", "all x y.((Chopstick(x) & Restaurant(y)) -> ((MadeFromMetals(x) & MadeFromPlastics(x)) | (-MadeFromMetals(y) & MadeFromPlastics(y)))))", "all x.((Chopstick(x) & Restaurant(y)) -> ((MadeFromMetals(x) & MadeFromPlastics(x)) | -MadeFromMetals(x) & MadeFromPlastics(x))))", "all x y.((Chopstick(x) & Restaurant(y)) -> (((MadeFromMetals(x) & MadeFromPolyester(x)) | (-MadeFromMetals(y) & MadeFromPolyester(y)))))", "all x.((Chopstick(x) & Restaurant(x)) -> (MadeFromMetal(x) & MadeFromPlastics(x) | -MadeFromMetal(x) & -MadeFromPlastics(x)))"]}
{"id": "folio_train_1884", "nl": "Chopsticks at restaurants are eco-friendly.", "fol": "IsEcoFriendly(ChopsticksAtRestaurants)", "prediction": ["all x.((Hopstick(x) & Restaurant(x)) -> EcoFriendly(x))", "all x.(Lockey(x) -> EcoFriendly(x))", "all x.((Chopstick(x) & Restaurant(x)) -> EcoFriendly(x))", "all x.((Chopstick(x) & Restaurant(x)) -> EcoFriendly(x))", "all x.((Chopstick(x) & Host(x)) -> EcoFriendly(x))", "all x.((Chopstick(x) & Restaurant(x)) -> EcoFriendly(x))", "all x.((Chopstick(x) & Restaurant(x)) -> EcoFriendly(x))", "all x.((Chopstick(x) & Restaurant(x)) -> EcoFriendly(x))", "all x.((Chopstick(x) & Restaurant(x)) -> EcoFriendly(x))", "all x.((Chopstick(x) & Restaurant(x)) -> EcoFriendly(x))", "all x.((Chopstick(x) & InRestaurants(x)) -> EcoFriendly(x))", "all x.((Chopstick(x) & Restaurant(x)) -> EcoFriendly(x))", "all x.((Chopstick(x) & Restaurant(x)) -> EcoFriendly(x))", "all x y.((Chopstick(x) & Restaurant(y)) -> EcoFriendly(x))", "all x y z.((Chopstick(x) & Restaurant(y) & Restaurant(z)) -> EcoFriendly(x))", "all x.((Chopstick(x) & Restaurant(x)) -> EcoFriendly(x))"]}
{"id": "folio_train_1885", "nl": "Chopsticks at restaurants are eco-friendly or made from trees.", "fol": "(IsEcoFriendly(ChopsticksAtRestaurants) | IsMadeFromTrees(ChopsticksAtRestaurants))", "prediction": ["all x.((Chopstick(x) & Restaurant(x)) -> (EcoFriendly(x) | MadeFromTrees(x)))", "all x.(Chopstick(x) -> (EcoFriendly(x) | MadeFromTrees(x)))", "all x.((Chopstick(x) & Restaurant(x)) -> (EcoFriendly(x) | MadeFromTrees(x)))", "all x.((Chopstick(x) & Restaurant(x)) -> (EcoFriendly(x) | MadeFromTrees(x)))", "all x.(Chopstick(x) -> (Ecological(x) | MadeFromTrees(x)))", "all x.((Chopstick(x) & Restaurant(x)) -> (EcoFriendly(x) | MadeFromTrees(x)))", "all x y.((Chopstick(x) & Restaurant(y)) -> (EcoFriendly(x) | MadeFromTrees(x)))", "all x y.((Chopstick(x) & Restaurant(y)) -> (EcoFriendly(x) | MadeFromTrees(x)))", "all x.((Pouchstick(x) & Restaurant(x)) -> (EcoFriendly(x) | MinedFromTrees(x)))", "all x.((Chopstick(x) & Restaurant(x)) -> (EcoFriendly(x) | MadeFromTrees(x)))", "all x.((Chopstick(x) & Restaurant(x)) -> (EcoFriendly(x) | MadeFromTrees(x)))", "all x.((Chopstick(x) & Restaurant(x)) -> (EcoFriendly(x) | MadeFromTrees(x)))", "all x.((Chopstick(x) & Restaurant(x)) -> (EcoFriendly(x) | MadeFromTrees(x)))", "all x.(NoChopstick(x) -> (Estomic(x) | MadeFromTrees(x)))", "all x y.((Chopstick(x) & Restaurant(y)) -> (EcoFriendly(x) | MadeFromTrees(x)))", "all x.((Chopstick(x) & Restaurant(x)) -> (EcoFriendly(x) | MadeFromTrees(x)))"]}
{"id": "folio_train_1886", "nl": "If Chopsticks at restaurants are made from plastics or made from trees, then Chopsticks at restaurants are made from plastics and are eco-friendly.", "fol": "((IsMadeFromPlastics(ChopsticksAtRestaurants) | IsMadeFromTrees(ChopsticksAtRestaurants)) -> (IsMadeFromPlastics(ChopsticksAtRestaurants) & IsEcoFriendly(ChopsticksAtRestaurants)))", "prediction": ["all x.((Chopstick(x) & (MadeFromPlastics(x) | MadeFromTrees(x))) -> (MadeFromPlastics(x) & EcoFriendly(x)))", "all x.((ChopsticksAtRestaurants(x) & (MadeFrom(x,plastics) | MadeFrom(x,trees))) -> (MadeFrom(x,plastics) & EcoFriendly(x)))", "all x.((Chopsticks(x) & (MadeFromPlastics(x) | MadeFromTrees(x))) -> EcoFriendly(x))", "all x.((Chopsticks(x) & (MadeFromPolyester(x) | MadeFromTrees(x))) -> (MadeFromPolyester(x) & EcoFriendly(x)))", "all x.((ChopsticksAtRestaurants(x) & (MadeFromPolyester(x) | MadeFromTrees(x))) -> (MadeFromPolyester(x) & EcoFriendly(x)))", "all x.((Chopsticks(x) & (MadeFrom(x,plasticals) | MadeFrom(x,trees))) -> (MadeFrom(x,plastics) & EcoFriendly(x)))", "all x y.((Chopstick(x) & Restaurant(y) & (MadeFrom(x,plastics) | MadeFrom(x,Trees))) -> (MadeFrom(x,plastics) & EcoFriendly(x)))", "all x.(((ChopstickSituary(x) & (MadeFromPlastics(x) | MadeFromTrees(x))) -> (MindedFromPlastics(x) & EcoFriendly(x)))", "all x.((Chopsticks(x) & (FromPlastics(x) | MadeFromTrees(x))) -> (MadeFromPlastics(x) & EcoFriendly(x)))", "all x y.((Chopstick(x) & Restaurant(y) & (MadeFromPlastics(x,y) | MadeFromTrees(x,y))) -> (EcoFriendly(x) & MadeFromPlastics(x,y)))", "all x y.((Chopstick(x) & Restaurant(y) & (MadeFromPlastics(x,y) | MadeFromTrees(x,y))) -> EcoFriendly(x))", "all x.((Chopstick(x) & (MadeFromPlastics(x) | MadeFromTrees(x))) -> (MadeFromPlastics(x) & EcoFriendly(x)))", "all x y.((Chopstick(x) & Restaurant(y) & MadeFromPlastics(x,y) & MadeFromTrees(x,y)) -> (-MadeFromPlastics(x) & EcoFriendly(x)))", "all x.((ChopstickAtRestaurants(x) & (InPlastics(x) | InTrees(x))) -> (InPlasticsAndEcoFriendly(x)))", "all x.((Chopstick(x) & (MadeFromPlastics(x) | MadeFromTrees(x))) -> EcoFriendly(x))", "all x y.((Chopsticks(x) & Restaurant(y) & (MadeFromPolyesters(x,y) | MadeFromTrees(x,y))) -> (MadeFromPlastics(x) & EcoFriendly(x)))"]}
{"id": "folio_train_1887", "nl": "Anything that is lazy is unproductive.", "fol": "all x.(IsLazy(x) -> IsUnproductive(x))", "prediction": ["all x.((Lazy(x) & -PerformsProductivity(x)) -> Unproductive(x))", "all x.((Lazy(x) & HasLazy(x)) -> Unproductive(x))", "all x.((Lazy(x) -> Unproductive(x))", "all x.(Loamy(x) -> Unproductive(x))", "all x.((Lazy(x) & DesignedFor(x)) -> Unproductive(x))", "all x.((Lazy(x) & Unproductive(x)) -> Lazy(x))", "all x.((Lazy(x) & Unproductive(x)) -> Unproductive(x))", "all x.((Lazy(x) & -Loid(x)) -> Unproductive(x))", "all x.(Layy(x) -> Unproductive(x))", "all x.(Lather(x) -> Unproductive(x))", "all x.(Lazy(x) -> Unproductive(x))", "all x.((Lazy(x) & HasLayers(x)) -> Unproductive(x))", "all x.((Lazy(x)) -> Unproductive(x))", "all x.((Lazy(x) & -Produced(x)) -> Unproductive(x))", "all x.(Lazy(x) -> Unproductive(x))", "all x.((Lazy(x) & -Productive(x)) -> Unproductive(x))"]}
{"id": "folio_train_1888", "nl": "No one unproductive is an energetic person.", "fol": "all x.(IsUnproductive(x) -> -IsEnergetic(x))", "prediction": ["-exists x.(Unproductive(x) & EnergeticPerson(x))", "-exists x.(Unproductive(x) & Energetic(x))", "all x.(Unproductive(x) -> EnergeticPerson(x))", "-exists x.(Unproductive(x) & Energetic(x))", "all x.((Unproductive(x) & EnergeticPerson(x)) -> -Silent(x))", "-exists x.(Unproductive(x) & EnergyfulPerson(x))", "-exists x.(Unproductive(x) & Energyful(x))", "all x.(Unproductive(x) -> EnergicPerson(x))", "-exists x.(Unproductive(x) & EnergeticPerson(x))", "all x.(UnproductivePerson(x) -> EnergyfulPerson(x))", "-(UnproductivePerson(x) & -EnergeticPerson(x))", "-exists x.(Unproductive(x) & EnergeticPerson(x))", "-exists x.(UnproductivePerson(x) & EnergyfulPerson(x))", "all x.(Unproductive(x) -> Energy(x))", "all x.(Unproductive(x) -> Energetic(x))", "all x.(IsUnproductive(x) -> EnergyfulPerson(x))"]}
{"id": "folio_train_1889", "nl": "If something is a sloth, then it is lazy.", "fol": "all x.(IsSloth(x) -> IsLazy(x))", "prediction": ["all x.(Sloth(x) -> Lazy(x))", "all x.(Sloth(x) -> Lazy(x))", "all x.(Sloth(x) -> Lazy(x))", "all x.(Sloth(x) -> Lazy(x))", "all x.(Sloth(x) -> Lazy(x))", "all x.(Sloth(x) -> Lazy(x))", "all x.(Sloth(x) -> Lazy(x))", "all x.(Sloth(x) -> Lazy(x))", "all x.(Sloth(x) -> Lazy(x))", "all x.(Sloth(x) -> Lazy(x))", "all x.(Sloth(x) -> Lazy(x))", "all x.(Sloth(x) -> Lazy(x))", "all x.((Sloth(x) & Lazy(x)) -> NeedsNoFast(x))", "all x.(Sloth(x) -> Lazy(x))", "all x.(Sloth(x) -> Lazy(x))", "all x.(Sloth(x) -> Lazy(x))"]}
{"id": "folio_train_1890", "nl": "Some animals are sloths.", "fol": "exists x.(IsAnimal(x) & IsSloth(x))", "prediction": ["exists x.(Animal(x) & Sloth(x))", "exists x.(Animal(x) & Sloth(x))", "exists x.(Animal(x) & Sloth(x))", "exists x.(Animal(x) & Sloth(x))", "exists x.(Animal(x) & Sloth(x))", "exists x.(Animal(x) & Sloth(x))", "exists x.(Animal(x) & Sloth(x))", "exists x.(Animal(x) & Sloth(x))", "exists x.(Animal(x) & Sloth(x))", "exists x.(Animal(x) & Sloth(x))", "exists x.(Animal(x) & Sloth(x))", "exists x.(Animal(x) & Sloth(x))", "exists x.(Animal(x) & Sloth(x))", "exists x.(Animal(x) & Sloth(x))", "exists x.(Animal(x) & Sloth(x))", "exists x.(Animal(x) & Sloth(x))"]}
{"id": "folio_train_1891", "nl": "Sid is not either an energetic person or a sloth.", "fol": "(-IsEnergetic(Sid) | IsSloth(Sid))", "prediction": ["all x.(Sid(x) -> (-EnergisticPerson(x) & -Sloth(x)))", "((Sid(sid) & -EnergeticPerson(s)) | Sloth(s)))", "all x.(Sid(x) -> -(EnergeticPerson(x) | Sloth(x)))", "NibbleSid(Sid) & -((EnergeticPerson(Sid) & -Sloth(Sid)))", "(-EffectivePerson(Sid) & -Sloth(Sid))", "-(Sid(Sid) & -EnergisticPerson(Sid) & -Sloth(Sid))", "-(Sid(s) & (EnergeticPerson(s) | Sloth(s)))", "(Sid) -> -EnergyPerson(sid) & -Sloth(sid))", "all x.(SID(x) -> (-EnergeticPerson(x) | Sloth(x)))", "(--EnergisticPerson(Sid) & -Sloth(Sid))", "all x.(Sid(x) -> (-EnergicPerson(x) | Sloth(x)))", "and Sid is -(DeepEnergyPerson(sid) | Sloth(sid))", "(-(Sid(s) & Energetic(s)) | Sloth(s)))", "-(EnergisticPerson(Sid) & -Sloth(Sid))", "(-(Sid(s) & EnergeticPerson(s) & -Sliph(s)))", "(-(EnergyPerson(Sid) | Sloth(Sid)))"]}
{"id": "folio_train_1892", "nl": "Sid is an animal.", "fol": "IsAnimal(Sid)", "prediction": ["Sid is Animal(Sid)", "ALL x.(Sid(x) -> Animal(x))", "all x.(Sid(x) -> Animal(x))", "Sid is an animal.", "All x.(Sid(x) -> Animal(x))", "Sid isAnimal(sid)", "(Animal(Sid) & Animal(Sid))", "(Animal(Sid) & Animal(Sid))", "exists x.(Sid(x) & Animal(x))", "All x.(Sid(x) -> Animal(x))", "Sid is Animal(Sid)", "All x.(Sid(x) -> Animal(x))", "(Animal(sid) & Animal(sid))", "isAnimal(Sid).", "All x.(Sid(x) -> Animal(x))", "Sid, if found, is a Livestock(sid,animal)"]}
{"id": "folio_train_1893", "nl": "Sid is an energetic person and an animal.", "fol": "(IsEnergetic(Sid) & IsAnimal(Sid))", "prediction": ["(ENergetic(Sid) & Animal(Sid))", "(EnergeticPerson(Sid) & Animal(Sid))", "(EnergeticPerson(Sid) & Animal(Sid))", "all x.(Sid(x) -> (EnergeticPerson(x) & Animal(x)))", "(EnergeticPerson(Sid) & Animal(Sid))", "(Energistic(Sid) & Animal(Sid))", "Sid is a person(i) & Energetic(i) & Animal(i))", "Sid is EnergyfulPerson(sid) & Animal(sid))", "Sid is an energetic Person(Sid) & Animal(Sid))", "Sid (energeticPerson(Sid) & Animal(Sid))", "Sid is a spiritedPerson(Sid) & Animal(Sid))", "Sid (EnergeticPerson(Sid) & Animal(Sid))", "Sid is a full-time energeticPersonAndAnimal(Sid)", "Sid is an energeticPerson(Sid) & Animal(Sid))", "(EnergeticPerson(Sid) | Animal(Sid))", "(EnergeticPerson(Sid) & Animal(Sid))"]}
{"id": "folio_train_1894", "nl": "If Sid is either an animal or unproductive, then Sid is not an energetic person.", "fol": "((IsAnimal(Sid) | IsUnproductive(Sid)) -> -IsEnergetic(Sid))", "prediction": ["exists x.(Animal(x) | Unproductive(x)) -> -EnergyActivePerson(x))", "all x.((Animal(x) | Unproductive(x)) -> NoEnergyPopular(x))", "all x.((Sid(x) & Animal(x) & -Unproductive(x)) -> -EnergizedPerson(x))", "all x.((Animal(x) | Unproductive(x)) -> -EnergizedPerson(x))", "all x.((Sid(x) | Unproductive(x)) -> -EnergyPerson(x))", "all x.((Sid(x) & (Animal(x) | Unproductive(x))) -> -EnergisticPerson(x))", "-EnergisticPerson(-(Sid) & (Animal(s) | Unproductive(s)))", "all x.((Sid(x) & (Animal(x) | Unproductive(x))) -> -EnergisticPerson(x))", "(all x.((Animal(x) | -Unproductive(x)) -> -EnergisticPerson(x)))", "all x.((Sid(x) & (Animal(x) | Unproductive(x))) -> -EnergeticPerson(x))", "all x.(((Animal(x) | Unproductive(x))) -> -EnergeticPerson(x))", "all x.((Animal(x) | Unproductive(x)) -> -EnergeticPerson(x))", "all x.((Animal(x) | Unproductive(x)) -> -EnergeticPerson(x))", "all x.((Animal(x) | Unproductive(x)) -> -EnergisticPerson(x))", "all x.((Animal(x) | Unproductive(x)) -> -EnergeticPerson(x))", "all x.((Sid(x) & (Animal(x) | Unproductive(x))) -> -EnergisticPerson(x))"]}
{"id": "folio_train_1895", "nl": "European soccer clubs can attend UCL, UEL and UECL.", "fol": "all x.(((IsEuropean(x) & IsSoccerClub(x)) -> EligibleToAttend(x,UEFAChampionsLeague)) | EligibleToAttend(x,UEFALeague) | EligibleToAttend(x,UEFACup))", "prediction": ["all x.(EuropeanSoccerClub(x) -> (AttendsUCL(x) | AttendsULLEG(x) | AttendsUECL(x)))", "all x.((EuropaSoccerClub(x) & (AttendsUCL(x) | AttendsUECL(x))) -> CanApply(x,UCL))", "all x.(EuropeanSoccerClub(x) -> (AttendsUniversity(x,UCL,EEL) & AttendsUniversity(x,UECL)))", "all x.((EuropeanSoccerClub(x) & (Toattend(x,UCL) | Attend(x,ELC) | Attend(x,UECL))) -> CanSee(x,ELC))", "all x y z.((EuropeanSoccerClub(x) & (UCL(y) | UEL(y) | UECL(y))) -> (Attends(x,y) & Attends(x,z)))", "all x.(EuropeanSoccerClub(x) -> (Order(x,UCL) | Attend(x,UEL) | Attend(x,UECL)))", "all x.((EuropaSoccerClub(x) & Assists(x,UCL) | Attends(x,UEL) | Attends(x,UECL))", "all x.(EuropeanSoccerClub(x) -> (To attendsAtHomeClub(x,UniversityClub) | AttendsAtHomeClub(x,UEL) | AttendsHomeClub(x,UECL)))", "all x.((EuropeanSoccerClub(x) & UCL(x) & UEL(x) & UECL(x)) -> CanAttend(x))", "all x.((EuropeanSoccerClub(x) & AttendsUCL(x) & AttendsUEL(x) & AttendsUECL(x)) -> Available(x))", "all x.(EuropeanSoccerClub(x) -> (AccessesUCL(x) | AttendsUEL(x) | AttendsUECL(x)))", "all x.((EuropeanSoccerClub(x) & AttendsUCL(x)) | AttendsUEL(x) | AttendsUECL(x))", "all x.(EuropeanSoccerClub(x) -> (AttendsUCL(x) | AttendsUEL(x) | AttendsUECL(x)))", "all x.(EuropeanSoccerClub(x) -> (BelongsToUCL(x) & -BelongsToEUCL(x)))", "all x.((EuropeanSoccerClub(x) & (AttendsUCL(x) | AttendsUEL(x) | AttendsUECL(x))) -> CanAttend(x))", "all x y.(((EuropeanSoccerClub(x) & (UCL_UCL_UEL_UCL_UCL_UEL_UEL_UCL_UUECL_UCL_UEL_UEL_UEL_UEL_UEL_UEL_UEL_UEL_UEL_CluEL_UEL)) -> CanAttend(x,y))"]}
{"id": "folio_train_1896", "nl": "A soccer club eligible to attend UCL has a higher ranking than a soccer club eligible to attend UEL.", "fol": "all x y.((IsSoccerClub(x) & IsSoccerClub(y) & EligibleToAttend(x,UEFAChampionsLeague) & EligibleToAttend(y,UEFALeague)) -> HasHigherRankingThan(x,y))", "prediction": ["all x y.((SoccerClub(x) & SoccerClub(y) & EligibleToAttendUCL(x) & EligibleToAttendUEL(y,x)) -> HigherRanking(x,y))", "all x y.((SoccerClub(x) & SoccerClub(y) & EligibleToAttendUCL(x) & EligibleToAttendUEL(y)) -> HigherRanking(x,y))", "all x y.((SoccerClub(x) & SoccerClub(y) & EligibleToAttend(x,Understanding(x)) -> HigherRanking(x,y))", "all x y.((SoccerClub(x) & SoccerClub(y) & \u00c9ligibleForUnitedClean(x)) -> HigherRanking(x,y))", "all x y.((SoccerClub(x) & SoccerClub(y) & EligibleToAttendUCL(y,x)) -> HigherRanking(x))", "all x y.((SolopolyClub(x) & SoccerClub(y) & EligibleToAttendUCL(x)) -> HigherRanking(x,y))", "all x y.((SoccerClub(x) & SoccerClub(y) & EligibleToAttendUCL(x)) -> HigherRanking(x,y))", "all x y.((SoccerClub(x) & SoccerClub(y) & EligibleToAttendUCL(x)) -> HigherRanking(x,y))", "all x y.((SoccerClub(x) & SoccerClub(y) & EligibleToAttendUpClare(x)) -> HigherRating(x,y))", "all x y.((SoccerClub(x) & SoccerClub(y) & EligibleToAttend(x,UCL)) -> HigherRanking(x))", "all x y z.((SoccerClub(x) & SoccerClub(y) & EnglishEnglish(z)) -> HigherRanking(x,y,z))", "all x y.((SoccerClub(x) & SoccerClub(y) & EligibleToAttendUCL(x)) -> HigherRanking(x,y))", "all x.((SoccerClub(x) & EligibleToAttendUCL(x)) -> HigherRankingThanSoccerClub(x))", "all x y.((SoccerClub(x) & SoccerClub(y) & EligibleToAttendsUCL(x,UCL) & EligibleToAttendsUPEL(y)) -> HigherRanking(x,y))", "all x.((SoccerClub(x) & EligibleToAttendUCL(x)) -> HigherRanking(x))", "all x y.(SoccerClub(x) & SoccerClub(y) & EligibleToAttendUCL(x) & EligibleToAttendEligibleToAttendUEL(y)) -> HigherRanking(x,y,z))"]}
{"id": "folio_train_1897", "nl": "A soccer club eligible to attend UEL has a higher ranking than a soccer club eligible to attend UECL.", "fol": "all x y.((IsSoccerClub(x) & IsSoccerClub(y) & EligibleToAttend(x,UEFALeague) & EligibleToAttend(y,UEFACup)) -> HasHigherRankingThan(x,y))", "prediction": ["all x y.((SoccerClub(x) & SoccerClub(y) & EligibleToAttendUEL(x,UEL)) -> HigherRankingOf(x,UECL))", "all x.((SoccerClub(x) & EligibleToAttendUEL(x)) -> HigherRankingThan(x))", "all x y.((SoccerClub(x) & SoccerClub(y) & EligibleToAttendUEL(x) & EligibleToAttendUECL(y)) -> HigherRanking(x,y))", "all x y.((SoccerClub(x) & SoccerClub(y) & EligibleForUEL(x) & EligibleForUECL(y)) -> HigherRating(x,y))", "all x y.((SoccerClub(x) & SoccerClub(y) & EligibleToAttendUEL(x) & EligibleToAttendUnifiedClc(y)) -> HigherRanking(x,y))", "all x y.((SoccerClub(x) & SoccerClub(y) & EligibleToAttendUEL(x) & EligibleToAttendUECL(y)) -> HigherRanking(x,y))", "all x y.((SoccerClub(x) & SoccerClub(y) & EligibleToAttendUEL(x)) -> HigherRankingThanEligibleToAttendUECL(y))", "all x y.((SoccerClub(x) & SoccerClub(y) & InterestedInAttendsUEL(x,u,u)) -> HigherRanking(x,y))", "all x y.((SoccerClub(x) & SoccerClub(y) & EligibleToAttendUEL(x) & EligibleToAttendUECL(y)) -> HigherRanking(x,y))", "all x.((Soccerclub(x) & EligibleToAttendUEL(x)) -> HigherRanking(x))", "all x y.((SoccerClub(x) & SoccerClub(y) & EligibleToAttendUEL(x) & EligibleToAttendUECL(y)) -> HigherRanking(x,y))", "all x y.((SoccerClub(x) & SoccerClub(y) & EligibleToAttendUEL(x) & EligibleToAttendUECL(y)) -> HigherRanking(x,y))", "all x.((SoccerClub(x) & EligibleToAttendUEL(x)) -> HigherRanking(x))", "all x y.((SoccerClub(x) & SoccerClub(y) & EligibleToAttendUEL(x)) -> HigherRanking(x,y))", "all x y.((SoccerClub(x) & SoccerClub(y) & EligibleForUEL(x) & EligibleForUECL(y)) -> HigherRanking(x,y))", "all x y.((SoccerClub(x) & SoccerClub(y) & EligibleToAttendUEL(x)) -> HigherRanking(x,y))"]}
{"id": "folio_train_1898", "nl": "Manchester United and Machester City are both European soccer clubs.", "fol": "(IsEuropean(ManchesterUnited) & IsSoccerClub(ManchesterUnited) & IsEuropean(Manchestercity) & IsSoccerClub(Manchestercity))", "prediction": ["(EuropeanSoccerClub(ManchesterUnited(Manchester) & EuropeanSoccerClub(MachesterCity))", "(EuropeanSoccerClub(manchester) & EuropeanSoccerClub(machesterCity))", "both EuropeanSoccerClubs (ManchesterUnderground(MAN) & MachesterCity(MAN))", "(EuropeanSoccerClub(ManchesterUnderwood) & EuropeanSoccerClub(MachesterCity))", "(EuropeanSoccerClub(ManchesterUnited,6) & EuropeanSoccerClub(MachesterCity,5))", "((ManchesterUnder-16) & MachesterCity(x)) -> EuropeanSoccerClub(x))", "(See also: Unions(Manchester) & Leagues(Machester))", "((ManchesterUnderground(Man) & MachesterCity(Marce)) -> EuropeanSoccerClubs(ManchesterUnderground(Manchester) & MachesterUnderground(Manchester)))", "(EasternSoccerClub(ManchesterUnited) & EastEnglandSoccerClub(MachesterCity))", "(EuropeanSoccerClub(ManchesterUnited(Man) & EuropeanSoccerClub(MachesterCity))", "(EuropeanSoccerClub(ManchesterUnderground) & European(MachesterCity))", "(AlternateSoccerClub(ManchesterUnderwood,European) & EuropeanSoccerClub(MachesterCity,European))", "((ManchesterUnited(Manchester) | MachesterCity(Manchester))) & EuropeansoccerClub(Machester))", "(EuropeanSoccerClubs(ManchesterUnited,MachesterCity) & EuropeanSoccerClub(MachesterCity,Machester))", "(EuropeanSoccerClub(ManchesterUnited,2) & EuropeanSoccerClub(MachesterCity,2))", "(EuropeanSoccerClub(ManchesterUnderwood) & EuropeanSoccerClub(ManchesterCity))"]}
{"id": "folio_train_1899", "nl": "Manchester United is eligible to attend UEL next season.", "fol": "EligibleToAttend(ManchesterUnited,UEFALeague)", "prediction": ["all x.(EligibleForLaunch(x,VeryEligibleForUEL(x))", "all x.((Manchester United(x) & Eligible(x,Season,Event)) -> Eligible(x,Season))", "all x.(MammadUnderwood(x) -> EligibleToAttendNextSeason(x))", "all x.((ManchesterUnderground(x) & EligibleForAttendsUELNextSeason(x)) -> Joins(x,Mutual))", "all x.((ManchesterUnderwood(x) & EligibleToAttendUELNextSeason(x)) -> EligibleToAttendUELNextSeason(x))", "all x.((ManchesterUnited(x) & EligibleForUEL(x)) -> AttendSeasonNear(x,uello,y))", "all x.(MustAttend(x,United) -> EligibleForAttendance(x,United))", "all x.((ManchesterUnderstanding(x) & EligibleForAttendance(x,Y)) -> AttendsNextSeason(x,y))", "all x.((ManchesterUnderground(x) & EligibleForUnderworld(x)) -> EligibleForUnderworld2019(x))", "all x y.((Manchester United(x) & UEL(y)) -> EligibleToAttend(x,y))", "all x.(ManchesterUnited(x) -> EligibleToAttendUELNextSeason(x))", "all x.((ManchesterUnderground(x) & EligibleToAttendNextSeason(x)) -> ManchesterUnderground(x))", "all x.((ManchesterUnited(x) & EventableToAttendUEL(x)) -> Eligible(x))", "all x.(ManchesterUnited(x) -> EligibleToAttendUELNextSeason(x))", "all x.((ManchesterUnited(x) & EligibleForAttendance(x,UFL)) ->.", "all x.((ManchesterUnited(x) & EligibleForAttend(x,Mountain)) -> AttendsNextSeason(x,Mountain))"]}
{"id": "folio_train_1900", "nl": "Manchester City is eligible to attend UCL next season.", "fol": "EligibleToAttend(Manchestercity,UEFAChampionsLeague)", "prediction": ["all x.((ManchesterCity(x) & AttendsUCLNextSeason(x)) -> Eligible(x))", "all x y.((ManchesterCity(x) & UCL(y)) -> EligibleToCall(x,y))", "all x.(Prestige(x) -> EligibleToAttendLittleBigBellevue(x))", "all x.((Manchester(x) & EventableToAttend(x,y) & UCL(y)) -> Attends(x,z))", "ALL x.(Manchester(x) -> EligibleToAttendUCL(x))", "all x.((ManchesterCity(x) & DesignedToAttendUnderClark(x)) -> EligibleForAttendance(x))", "all x.((ManchesterCity(x) & EligibleToAttend(x,Northwest) & UnitedCLNextSeason(y)) -> Eligible(x,y))", "all x.((ManchesterCity(x) & AttendsUnitedConference(x)) -> EligibleToAttend(x,UCL))", "all x.(City(x) -> DesirableToAttend(x,UCLNextSeason))", "all x.((ManchesterCity(x) & EligibleForSeason(x)) -> AttendsUCLNextSeason(x))", "all x.((ManchesterCity(x) & EligibleToAttendUCL(x)) -> NextSeason(x))", "(EligibleToAttend(ManchesterCity,USA))", "all x.((ManchesterCity(x) & UPCLNextSeason(x)) -> EligibleToAttend(x,UCL))", "all x.((ManchesterCity(x) & -UCL(x)) -> EligibleForSeason(x))", "all x.((ManchesterCity(x) & EligibleForUCLNextSeason(x)) -> EligibleForUCLNextSeason(x))", "all x.((ManchesterStarts(x) & NextSeason(x)) -> EligibleToAttend(x,UCL))"]}
{"id": "folio_train_1901", "nl": "Manchester City has a higher ranking than Manchester United.", "fol": "HasHigherRankingThan(Manchestercity,ManchesterUnited)", "prediction": ["all x y.((ManchesterCity(x) & ManchesterUnited(y)) -> HigherRanking(x,y))", "all x.((ManchesterCity(x) & ManchesterUnited(x)) -> HigherRanking(x))", "all x y.((ManchesterCity(x) & ManchesterUnited(y)) -> HigherRanking(x,y))", "all x y.((ManchesterCity(x) & ManchesterUnited(y)) -> HigherRanking(x,y))", "all x y.((ManchesterCity(x) & ManchesterUnited(y)) -> HigherRanking(x,y))", "all x y.((ManchesterCity(x) & ManchesterUndersigned(y)) -> HigherRanking(x,y))", "all x.(City(x) -> HigherRanking(x,ManchesterUsed))", "all x y.((ManchesterCity(x) & ManchesterUnited(y)) -> HigherRating(x,y))", "all x y.((ManchesterCity(x) & ManchesterUnited(y)) -> HigherRanking(x,y))", "all x y.((ManchesterCity(x) & ManchesterUnited(y)) -> HigherRanking(x,y))", "all x y.((ManchesterCity(x) & ManchesterUndersigned(y)) -> HigherRanking(x,y))", "all x y.((ManchesterCity(x) & ManchesterUnited(y)) -> HigherRanking(x,y))", "all x y.((ManchesterCity(x) & ManchesterUndersigned(y)) -> HigherRanking(x,y))", "all x.((ManchesterCouncil(x) & ManchesterUnited(x)) -> HigherRanking(x))", "all x y.((ManchesterCity(x) & ManchesterUnderwood(y)) -> HigherRanking(x,y))", "all x y.((ManchesterCity(x) & ManchesterUnited(y)) -> HigherRankingThan(x,y))"]}
{"id": "folio_train_1902", "nl": "If a person coach a football club, the person is a football coach.", "fol": "all x y.((Coaches(x,y) & IsFootballClub(y)) -> IsFootballCoach(x))", "prediction": ["all x y.((Person(x) & FootballClub(y) & Coaches(x,y)) -> FootballCoach(x))", "all x y.((Person(x) & FootballClub(y) & Coaches(x,y)) -> FootballCoach(x))", "all x.(Coaches(x,footballClub) -> FootballCoach(x))", "all x.((Person(x) & CoachesFootballClub(x)) -> FootballCoach(x))", "all x.exists y.((Person(x) & FootballClub(y) & Coach(x,y)) -> FootballCoach(x,y))", "all x.((Person(x) & CoachesFCast(x)) -> FootballCoach(x))", "all x y.((Person(x) & FootballClub(y) & Coaches(x,y)) -> FootballCoach(x))", "all x.(Coaches(x,y) -> FootballCoach(y))", "all x y.((Person(x) & FootballClub(y) & Coaches(x,y)) -> FootballCoach(x))", "all x y.((Person(x) & FootballClub(y) & Coaches(x,y)) -> FootballCoach(x))", "all x y.((Person(x) & FootballClub(y) & Coaches(x,y)) -> FootballCoach(x))", "all x y.((Person(x) & FootballClub(y) & Coaches(x,y)) -> FootballCoach(x))", "all x y.((Person(x) & FootballClub(y) & Coaches(x,y)) -> FootballCoach(x))", "all x.(Coaches(x, footballClub) -> FootballCoach(x))", "all x.((RepresentsCoach(x) & FootballClub(x)) -> FootballCoach(x))", "all x.(Coaches(x,y) -> FootballClub(x))"]}
{"id": "folio_train_1903", "nl": "If a person has a position in a club for a position in a year, and the club is in NFL in the same year, the person plays in NFL.", "fol": "all z.((PlaysFor(x,y) & NFLTeamInYear(y,z) & IsInTeam(x,z)) -> PlaysInNFL(x))", "prediction": ["all x y.((Person(x) & Club(y) & PositionInYear(x,y) & PositionInYear(y,n)& NFL(y)) -> PlaysInNFL(x,y))", "all x y.((Person(x) & PositionInClub(x,y) & PositionInYear(x,y) & InAssociation(x,y)) -> PlaysIn(x,y))", "all x.((HasPositionInClub(x) & PositionInNFCYear(x) & TeamInNFCYear(x)) -> PlaysInNFL(x))", "all x y z.((Person(x) & Club(y) & PositionInYear(x,x) & PositionInYear(x,y) & InNFCA,z)) -> PlaysInNFL(x))", "all x y z.((Person(x) & Club(y) & PositionIn(x,y) & JobInYear(z) & In(y,z) & In(x,y,z)) -> PlaysIn(x,y))", "all x y z.((Person(x) & Club(y) & PositionIn(x,z) & PositionInYear(z) & InYear(y,z)) -> PlaysInNFL.(x))", "all x y.((Person(x) & PositionsInClub(x,y) & PositionInYear(y,x) & PositionInYear(x) & InNBA(y,x)) -> PlaysInNFL(x))", "all x y.((Person(x) & Club(y) & PositionInYear(y,x) & PositionInYear(y,x) & SameYear(x)) -> PlaysInNFL(x))", "all x y z.((Action(x) & Position(y) & Club(z) & HasPosition(x,y) & PositionInYear(z,y,y) & InSameYear(y,z)) -> PlaysInNFL(x))", "all x y z.((Person(x) & Club(y) & PositionInYear(x,z) & InYear(z,w) & HasIn(x,y)) -> PlaysInNFL(x))", "all x y z.((Person(x) & Club(y) & Year(z) & HasPositionIn(x,y,z) & PositionInYear(y,z) & NFL(y)) -> PlaysInNFL(x))", "all x y.((Person(x) & Club(y) & HasPositionInYear(x,y) & PositionInYear(x,y) & NFL(y)) -> PlaysInNFC(x))", "all x y z.((Person(x) & Club(y) & Position(z) & PositionInYear(z) & InYear(y,z) & InYear(y,z) & Has(x,y)) -> PlaysInNFL(x))", "all x y.((Person(x) & PositionIn(x,y) & PositionInYear(y)) -> PlaysIn(x,y))", "all x y.((Person(x) & Club(y) & PositionInYear(x,y) & PositionInYear(y) & InNoClub(y,x)) -> PlaysInNFL(x,y))", "all x y z.((Person(x) & Club(y) & PositionIn(x,y) & PositionInAnotherYear(y) & InLocationIn(z,y) & SameYear(z)) -> PlaysInNFL(x))"]}
{"id": "folio_train_1904", "nl": "Minnesota Vikings is a football club.", "fol": "IsFootballClub(Minnesota_Vikings)", "prediction": ["all x.(Violin(x) -> FootballClub(x))", "all x.(Viking(x) -> FootballClub(x))", "all x.(Violins(x) -> FootballClub(x))", "all x.(ViolinsMN(x) -> FootballClub(x))", "MinnesotaViolins(MN) & FootballClub(MN)", "the MinnesotaViolins (MNVineers) -> FootballClub (MNVines(VM) & FootballClub(mn)))", "all x.(Violin(x) -> FootballClub(x))", "all x.((Violins(x) & Minnesota(x)) -> FootballClub(x))", "as a footballclub(MNuckuckianViolins)", "all x.((MinnesotaViolins(x) & FootballClub(x)) -> FootballClub(x))", "all x.(NevadaViolins(x) -> FootballClub(x))", "all x.(Conference(x) -> MinnesotaVikings(x))", "all x.(Violins(x) -> FootballClub(x))", "all x.(Violins(x) -> FootballClub(x))", "all x.(MNJVikings(x) -> FootballClub(x))", "All x.(Violin(x) -> FootballClub(x))"]}
{"id": "folio_train_1905", "nl": "Dennis Green coached Minnesota Vikings.", "fol": "Coaches(Dennis_Green,Minnesota_Vikings)", "prediction": ["Dennis Greencoached Minnesota Vikings.", "(Coach(DennisGreen) -> MinnesotaVipers(DennisGreen, Minnesota))", "DennisGreen coached MinnesotaViolins.", "DennisGreen coached Minnesota Vikings.", "Dennis Green coached Minnesota Vikings.", "Dennis Green coached Minnesota Vikings.", "DennisGreen has coached MinnesotaViolins(x)", "Dennis Green coached MinnesotaViolins.", "DennisGreenCoaches(DennisGreen,MinnesotaViolins)", "Dennis Green coached MinnesotaViolins(x).", "Dennis Green coached MinnesotaViolins.", "Dennis Green coached the Minnesota Vikings.", "Dennis Greencoached Minnesota Vikings.", "Dennis Green (Coach(d) & MinnesotaViolin(m))", "Dennis Green coached Minnesota Vikings.", "Dennis Green coached Minnesota Vikings."]}
{"id": "folio_train_1906", "nl": "Cris Carter had 13 touchdown receptions.", "fol": "HadTouchDownReceptions(Cris_Carter,T13)", "prediction": ["Cris Carter was among the 158 entrants to touchdowns.", "(Taskback(cris(c) & 13(c)) -> WasCris Carter(c))", "Cris Carter had 14 touchdown receptions.", "CrisCarter(cris03) & WasReceivedThreeTentainThanThan(cris03))", "Cris Carter had 13 touchdownreceptions.", "Cris Carter had 13 touchdown receptions.", "CrisCarter had13 touchdownReceptions(Dr.CissCarter)", "CrisCarterHas13TokenbackReceptions(x)", "CrisCarter had13 touchdownReceptions(cris)", "-13 touchdownReceptions(CrissCarter)", "CrisCarter had 13 touchdownReceptions.", "(CrisScarlett(CrisCris Carter) & HadToucherReceptions(Cris Carter))", "all x.(CrisCarter(x) -> HasTitleReceptions(x,13))", "EgoCheck has 12 touchdownReceptions(e)", "((CrissCarter(Criss) & 13TokenbackReceptions(Criss)) | -MajorTokenbackReception(Criss)))", "CrisCarterHasTattooFather(CrisKarter) & HasTailors(CrisCreer,13))"]}
{"id": "folio_train_1907", "nl": "Minnesota Vikings was in the National Football League in 1997.", "fol": "NFLTeamInYear(Minnesota_Vikings,Y1997)", "prediction": ["all x.(Vikings(x) -> WasInNFL(x,1997))", "((Winds(Rivers1997)) -> NationalFootballLiga(Rivers1997))", "(InNFL(MinnesotaViolins) | InNDL(Violins)))", "all x.(Vikings(x) -> (NationalFootballLimit(x,1997)))", "all x.((Location(x) & MinnesotaViolins(x)) -> InNationalFootballLion(x,1997))", "(InNationalFootballLiga( MinnesotaVikings,1997))", "all x.(Victors(x) -> InNationalFootballLiga(x))", "all x.((MinneapolisViolins(x) & NationalFootballLiga(x,1997)) -> InNationalFootballLocation(x,1997))", "All x.((MinneapolisViolins(x) & NationalFootballLion(x)) -> InNFCLoad(x))", "(InNFCL in97(vikings,1996))", "all x.(Vikings(x) -> (In(x,1997) & NationalFootballLeague(x)))", "all x y.((MinnesotaViolins(x) & NationalFootballLion(y)) -> InLocation(x,y))", "((MinneapolisViolins) & inNFC(MNCL)) | (MinneapolisViolins(MNCL) | MinnesotaViolins(MNCL))))", "In 1997, MinnesotaViolins(MNFC) -NationalFootballLimit(MNFC)", "the MinnesotaViolins(SVN) (NationalFootballLiga(SVN & 1997))", "the Minnesota Vikings were in the National Football League in 1997."]}
{"id": "folio_train_1908", "nl": "John Randle was Minnesota Vikings defensive tackle in 1997.", "fol": "(HasPosition(John_Randle,Defensive_tackle) & IsInTeam(John_Randle,Y1997) & PlaysFor(John_Randle,Minnesota_Vikings))", "prediction": ["John Randle was defensive tackle(Maryland) & MinnesotaViolins(Maryland) & In(Maryland,1997))", "John Randle (MNJViolins(MND) | DefensiveDach(MND)) & In 1997.", "John Randle (MNJRandle(Jon) & MinnesotaVickers(Jun1997))", "John Randle was MinnesotaVikingsDefenseDivisionist(johnrude) & DuringCondition(johnrode))", "John Randle was defensive tackle for Minnesota Vikings in 1997.", "John Randle was defensive tackle in MinnesotaVikingsin97(JohnRandle)", "John Randle, MinnesotaVikingsDefensiveDixter(John,1997), died on February 10, 2008.", "John Randle was MinnesotaVikingsDefensiveDefensiveDock(June,1997))", "John Randle was defensive tackle in Minnesota Vikings (Saints,1997))", "all x.((JonRandle(x) & MinnesotaVikings(x)) -> DefensiveDuckIn97(x))", "John Randle was MinnesotaViolinsDefensiveDuck(John,1997))", "John Randle was MinnesotaViolinsDefensiveDefensiveDuck(John,1997))", "John Randle was defensive tackle(until97) & MinnesotaVikings(v) & MinnesotaVikings(v))", "DefensiveDach(JohnRandle,Saints,1997) (MinneapolisVikings) & ServedIn(JohnRandle,1997))", "John Randle was defensive tackle(MNtv) & was MinnesotaVikings(Ntv,1997))", "John Randle was defensiveDach(MarylandViolins) & In(JohnRandle,Montana) & In(Randle,Continent))"]}
{"id": "folio_train_1909", "nl": "Dennis Green is a football coach.", "fol": "IsFootballCoach(Dennis_Green)", "prediction": ["Dennis Green is a soccer coach.", "Dennis Green is a FootballCoach(DennisGreen)", "Dennis Green (FootballCoach,Company))", "(FootballCoach(DennisGreen)", "(FootballCoach(DennisGreen)", "DennisGreen is FootballCoach(x)", "(FootballCoach(DennisGreen)", "DennisGreen is a football coach.", "(FootballCoach(DennisGreen))", "DennisGreen is a FootballCoach(x)", "(FootballCoach(DennisGreen) & -FootballCoach(DennisGreen))", "Dennis Green is a football coach.", "DennisGreen is a football coach.", "Dennis Green is FootballCoach(x)", "[DessinGreen(DennisGreen) & FootballCoach(DennisGreen))", "DennisGreen(Dennis) & FootballCoach(Dennis)"]}
{"id": "folio_train_1910", "nl": "John Randle didn't play in the National Football League.", "fol": "-PlaysInNFL(John_Randle)", "prediction": ["(-JonesRandle(John) & NationalFootballLol(John))", "(-PlaysInNationalFootballLol(JohnRandle,NL))", "John Randle didn't play in the National Football League (NFL)", "(-exists x.(JohnRandle(x) & PlayedIn(x,y)))", "(LastPlayedInNFL(JohnRandle,NFL))", "John Randle ((NFCLocation(John)) & -PlayedIn(JohnRandle(John))", "all x.((JohnRandle(x) & -NationalFootballLider(x)) -> -PlayingIn(x,NationalFootballLeague))", "John Randle -PlayedInFootballLol(JohnRandle)", "the National Football League.", "(-PlaysInNFL(JohnRandle))", "John Randle ((PlayingInNFA(BloodyLocation)) | PlayingInNL(BloodyLocation)))", "John Randle -PlayedInFootballLol(John Randle,NationalFootballLol))", "(\u2013PlayInNationalFootballLile(JohnRandle,NationalFootballLion))", "John Randle didn't play in the National Football League.", "John Randle -PlayerInNationalFootballLower(john,randle)", "John Randle is not a member of the National Football League."]}
{"id": "folio_train_1911", "nl": "Cris Carter played for Minnesota Vikings.", "fol": "PlaysFor(Cris_Carter,Minnesota_Vikings)", "prediction": ["CrisCarter played for MinnesotaViolins(cris)", "CrisCarter(c) s MinnesotaVipers(e) & PlayedFor(c,e,nu.)", "CrisCarter played for MinnesotaVikings(criss)", "(PlayedFor(Cris(Cris(CrisCarter,MinnesotaViolins) & MinnesotaViolins(Cris))", "(Played(Cris Carter,MinnesotaVioliners) -> CrisCarter(Cris Carter,MinneapolisViolins))", "(PlayedForMNuckyViolins(CrissCarter,Minnyland))", "CrisCarter played for MinnesotaViolins(cris)", "CrisCarter played for MinnesotaViolins(crisia,MN.Y.)", "(PlayedForLiseaders(CrissCarter) & MinnesotaVipers(Criss))", "CrisCarterPlayedForMinnesotaViolins(cris)", "CrisCarter (PlayedFor(cris.carter,mn) & MinnesotaViolins))", "All x.(Carter(x) -> PlayedForMinneapolisViolins(x))", "(PlayedForMinneapolisVikings(CrisCrisCarter))", "(PlayedForMilwaukeeVipers(Cris_Carter))", "(PlayedFor(CrissCarter) | MinnesotaVikings(CrisCris Carter))", "CrisCarter played for MinnesotaViolins(cris,c2) & played for MinnesotaViolins(cris,c))"]}
{"id": "folio_train_1912", "nl": "All cats are cute.", "fol": "all x.(IsCat(x) -> IsCute(x))", "prediction": ["all x.(Cat(x) -> Cute(x))", "all x.(Cat(x) -> Cute(x))", "-all x.(Cat(x) -> Cute(x))", "all x.(Cat(x) -> Cute(x))", "all x.(Cat(x) -> Cute(x))", "all x.(Cat(x) -> Cute(x))", "all x.(Cat(x) -> Cute(x))", "all x.(Cat(x) -> Cute(x))", "all x.(Cat(x) -> Cute(x))", "all x.(Cat(x) -> Cute(x))", "all x.(Cat(x) -> Cute(x))", "all x.(Cat(x) -> Cute(x))", "all x.(Cat(x) -> Cute(x))", "(all x.(Cat(x) -> Cute(x)))", "all x.(Cat(x) -> Cute(x))", "all x.(Cat(x) -> Cute(x))"]}
{"id": "folio_train_1913", "nl": "Nothing that barks is lovely. ", "fol": "all x.(Barks(x) -> -IsLovely(x))", "prediction": ["all x y.((Barks(x) & Dog(y)) -> Lovely(x))", "all x.(Barks(x) -> Lovely(x))", "-exists x.(Barks(x) & Lovely(x))", "all x.((Barks(x) & -Dollar(x)) -> Lovely(x))", "nothingthatBarksIsLovely(n)", "-exists x.(Barks(x) & Lovely(x))", "all x.(Barks(x) -> Lovely(x))", "(exists x.(Barks(x) & -Beautiful(x)))", "all x.(Barks(x) -> Lovely(x))", "all x.((Barks(x) & -Lovely(x)) -> Lovely(x))", "all x.((Barks(x) & -Barks(x)) -> Lovely(x))", "is Lovely(exists x.(Barks(x) & -Barks(x)))", "all x.(Barks(x) -> Lovely(x))", "-exists x.(Barks(x) & Lovely(x))", "all x.(Barks(x) -> Beauty(x))", "all x.(Barks(x) -> Lovely(x))"]}
{"id": "folio_train_1914", "nl": "If something is a dog, then it barks.", "fol": "all x.(IsDog(x) -> Barks(x))", "prediction": ["all x.((Dog(x) & Barks(x)) -> Dog(x))", "all x.(Barks(x) -> Dog(x))", "all x.(Dog(x) -> Barks(x))", "all x.((Dog(x) & Barks(x)) -> Dog(x))", "all x.(Dog(x) -> Barks(x))", "all x.((Dog(x) & Barks(x)) -> Dog(x))", "all x.((Dog(x) & Barks(x)) -> Dog(x))", "all x.(Dog(x) -> Barks(x))", "all x.((Dog(x) & Barks(x)) -> NeedsRepair(x))", "all x.(Dog(x) -> Barks(x))", "all x.(Dog(x) -> Barks(x))", "all x.(Dog(x) -> Barks(x))", "all x.((Dog(x) & Barks(x)) -> Dog(x))", "all x.(Dog(x) -> Barks(x))", "all x.(Dog(x) -> Barks(x))", "all x.(Dog(x) -> Barks(x))"]}
{"id": "folio_train_1915", "nl": "Grace is either a cat and a dog, or neither a cat nor a dog.", "fol": "((IsCat(Grace) & IsDog(Grace) & -(-IsCat(Grace) & -IsDog(Grace))) | (-(IsCat(Grace) & IsDog(Grace)) & -IsCat(Grace) & -IsDog(Grace)))", "prediction": ["(all x.(Grace(x) -> (Cat(x) | Dog(x)))", "all x.(Grace(x) -> ((Cat(x) & Dog(x)) | (-Cat(x) & Dog(x)))))", "all x.(Grace(x) -> (Cat(x) | Dog(x)) | (-CatCat(x) & Dog(x))))", "all x.(Grace(x) -> (Cat(x) | Dog(x)) | -Cat(x) & Dog(x)))", "(all x.(Grace(x) -> CatAndDog(x)) | (-CatAndDog(x) & -Dog(x))))", "all x.(Grace(x) -> ((Cat(x) & Dog(x)) | (-Cat(x) & Dog(x)))))", "all x.(Grace(x) -> ((Cat(x) & Dog(x)) | (-Cat(x) & Dog(x))))", "exists x.(Grace(x) & (Cat(x) | Dog(x)))", "all x.(Grace(x) -> (Cat(x) | Dog(x)) | (-Cat(x) & Dog(x))))", "(exists x.(Grace(x) & (Cat(x) | Dog(x))) & -(Cat(x) | Dog(x))))", "all x.(Grace(x) -> ((Cat(x) & Dog(x)) | -Cat(x) & Dog(x))))", "(all x.(Grace(x) -> (Cat(x) & Dog(x))) | (-Cat(x) & Dog(x))))", "all x.(Grace(x) -> ((Cat(x) & Dog(x)) | -Cat(x) & Dog(x))))", "(all x.(Grace(x) -> (Cat(x) & Dog(x)) | (-Cat(x) & Dog(x)))))", "all x.(Grace(x) -> (Cat(x) & Dog(x) & -Cat(x) & Dog(x)))", "all x.(Grace(x) -> (Cat(x) | Dog(x)) | (-Cat(x) & Dog(x))))"]}
{"id": "folio_train_1916", "nl": "Grace is a ghost.", "fol": "ExistsGhost(Grace)", "prediction": ["all x.(Grace(x) -> Ghost(x))", "(Ghost(Grace,Cyborg) & LivesIn(Grace,Dallas,Feather))", "all x.(Ghost(x) -> GraceLikes(x))", "all x.(Grace(x) -> Ghost(x))", "all x.((Grace(x) & Ghost(x)) -> Loves(x))", "all x.((Grace(x) & Ghost(x)) -> Is(x,y))", "IsGraceGhost(Grace)", "all x.(Ghost(x) -> Grace(x))", "all x.(Ghost(x) -> Grace(x))", "all x.(Ghost(x) -> Grace(x))", "Grace is Ghost(Grace)", "all x.(Grace(x) -> Ghost(x))", "Grace is a Ghost(Ghost(Grace)", "all x.(Ghost(x) -> Grace(x))", "all x.(Grace(x) -> Ghost(x))", "all x.(Grace(x) -> Ghost(x))"]}
{"id": "folio_train_1917", "nl": "If Grace is either both cute and lovely, or neither cute nor lovely, then Grace is either a dog or a ghost.", "fol": "(((IsCute(Grace) & IsLovely(Grace)) | (-IsCute(Grace) & -IsLovely(Grace))) -> (IsDog(Grace) | ExistsGhost(Grace)))", "prediction": ["all x.((Grace(x) & ((Crazy(x) | Lovely(x))) & -(Crazy(x) & Lovely(x)))) -> (Dog(x) | Ghost(x)))", "all x.((Grace(x) & ((Cute(x) & Lovely(x) & -Cute(x)) | -Lily(x))) -> (Peacock(x) | Ghost(x))))", "all x.((Grace(x) & (Cozy(x) | Lovely(x))) | -(Cozy(x) | Lovely(x)))) -> (Dog(x) | Ghost(x)))", "all x.((Grace(x) & (CUTE(x) | -CUTE(x) | -CUTE(x))) -> (Dog(x) | Ghost(x)))", "all x.((Grace(x) & (Crazy(x) | -Crazy(x) | -Lovely(x))) -> (Dog(x) | Ghost(x)))", "all x.((Grace(x) & (Ccute(x) | Lovely(x)) | (-Cupable(x) & Lovely(x)))))", "(((Grace(Grace)) & (Cute(Grace) & Lovely(Grace) | -Cute(Grace) & Lovely(Grace))) -> Dog(Grace) | Ghost(Grace)))", "all x.((Grace(x) & (IsCrazy(x) | IsNotCrazy(x)) | IsNotPleasing(x))) -> (Dog(x) | Ghost(x)))", "all x.((Grace(x) & (Cute(x) | Lovely(x)) & -Cute(x) & Lovely(x))) -> (Dog(x) | Ghost(x)))", "all x.((Grace(x) & (Cute(x) | -Cute(x) | -Dirty(x))) -> (Dog(x) | Ghost(x)))", "all x.((Grace(x) & (CUTE(x) | -CUTE(x) | -CUTE(x))) -> (Dog(x) | Ghost(x)))", "all x.((Grace(x) & ((Katy(x) & Lovely(x)) | -Katchy(x) & Lovely(x))) -> (Dog(x) | Ghost(x)))", "all x.((Grace(x) & (Cozy(x) | Lovely(x))) | -(Cozy(x) | Lovely(x)))) -> (Dog(x) | Ghost(x)))", "all x.((Grace(x) & ((Cozy(x) | Lovely(x))) & -Clean(x) & Lovely(x))) -> (Dog(x) | Ghost(x)))", "all x.((Grace(x) & ((Cozy(x) | Lovely(x))) | -(Cozy(x) | Lovely(x)))) -> (Dog(x) | Ghost(x)))", "all x.((Crazy(x) & Lovely(x) & (-Crazy(x) | -Lisa-Crazy(x))) -> (Dog(x) | Ghost(x)))"]}
{"id": "folio_train_1918", "nl": "If Grace is not a ghost and is not lovely, then Grace is either a cat or cute.", "fol": "((-ExistsGhost(Grace) & -IsLovely(Grace)) -> (IsCat(Grace) | IsCute(Grace)))", "prediction": ["all x.((Ghost(x) & -Ghost(x) & -Lovely(x)) -> (Cat(x) | Cute(x)))", "all x.((Grace(x) & -Ghost(x) & -Lovely(x)) -> (Cat(x) | Cute(x)))", "all x.((Grace(x) & -Ghost(x) & -Lovely(x)) -> (Cat(x) | Cute(x)))", "all x.((Grace(x) & -Ghost(x) & -Lovely(x)) -> (Cat(x) | Cute(x)))", "all x.((Ghost(x) & -Ghost(x) & -Lovely(x)) -> (Cat(x) | Cute(x)))", "all x.((Ghost(x) & -Ghost(x) & -Lovely(x)) -> (Cat(x) | Cute(x)))", "all x.((Ghost(x) & -Ghost(x) & Lovely(x)) -> (Cat(x) | Cute(x)))", "all x.((Ghost(x) & -Ghost(x) & -Lovely(x)) -> (Cat(x) | Crazy(x)))", "all x.((Grace(x) & -Ghost(x) & -Lovely(x)) -> (Cat(x) | Cute(x)))", "(all x.(Ghost(x) -> (-Ghost(x) & -Belish(x))) & (Cat(x) | Cute(x)))", "all x.((Ghost(x) & -Ghost(x) & -Lovely(x)) -> (Cat(x) | Cute(x)))", "all x.((Grace(x) & -Ghost(x) & -Lovely(x)) -> (Cat(x) | Cute(x)))", "all x.((Grace(x) & -Ghost(x) & -Glovely(x)) -> (Cat(x) | CUTE(x)))", "all x.((Grace(x) & -Ghost(x) & -Lovely(x)) -> (Cat(x) | CUTE(x)))", "all x.((Ghost(x) & -Ghost(x) & -Lovely(x)) -> (Cat(x) | Cute(x)))", "all x.((Grace(x) & -Ghost(x) & -Lovely(x)) -> (Cat(x) | Cute(x)))"]}
{"id": "folio_train_1919", "nl": "Shafaq-Asiman is a large complex of offshore geological structures in the Caspian Sea.", "fol": "(IsLargeComplex(ShafaqAsiman) & IsLargeComplex(ShafaqAsiman) & IsOffshore(ShafaqAsiman) & HasGeologicalStructures(ShafaqAsiman) & LocatedIn(ShafaqAsiman,Caspiansea))", "prediction": ["all x.(ShafaqAsiman(x) -> CanopyGeologicalStructuresInCaspianSea(x))", "all x y.((ShakaqAsiman(x) & CaspianSea(y)) -> LargeComplexOfOffshoreGeologicalStructures(x,y))", "all x.(ShafaqAsiman(x) -> OffshoreGeologicalStructuresInCaspianSea(x))", "all x y.((ShafaqAsiman(x) & CaspianSea(y)) -> LocatedIn(x,y))", "all x.(ShafaqAsiman(x) -> (LargeComplexOfOffshoreGeologicalStructures(x) & CaspianSea(x)))", "the LargeComplexOfOffshoreGeologicalStructures(ShafaqAsiman) & InCaspianSea(ShafaqAsiman)", "all x.(ShafaqAsiman(x) -> OffshoreGeologicalStructures(x))", "all x.(ShafaqAsiman,OffshoreGeologicalStructures(x) -> CaspianSea(x))", "all x y.((ShafaqAsiman(x) & OffshoreGeologicalStructures(y)) -> InCaspian(x,y))", "(LargeComplexOfOffshoreGeologicalStructures(ShafaqAsiman) & InCaspianSea(ShafaqAsiman))", "Shafaq-Asiman is a large complex of offshore geological structures in the Caspian Sea.", "all x.(ShafaqAsiman(x) -> OffshoreGeologicalStructures(x))", "all x.(ShavaqAsiman(x) -> (LargeComplexOfOffshoreGeologicalStructures(x) & InCaspianSea(x)))", "all x.(ShafaqAsiman(x) -> (LargeComplexOfOffshoreGeologicalStructuresInCaspianSea(x)))", "all x.(ShafaqAsiman(x) -> (OffshoreGeologicalStructure(x) & InCascasianSea(x)))", "all x.(ShafaqAsiman(x) -> (LargeComplexOfOffshoreGeologicalStructures(x) & InCaspianSea(x)))"]}
{"id": "folio_train_1920", "nl": "Baku is northwest of Shafaq-Asiman.", "fol": "IsNorthwestOf(Baku,ShafaqAsiman)", "prediction": ["all x.(Baku(x) -> LocatedNorthwestOfShafaq-Asiman(x))", "(NorthwestOfShafaqAsiman(baku))", "all x.(Baku(x) -> NortheastOfShafaqAsiman(x))", "(WesterlyOfShakaq(Baku) & NorthwestOfAsiman(Baku))", "all x.(Baku(x) -> NorthwestOfShabaqAsiman(x))", "(NorthwestOfShafaqAsiman(Bakus))", "(NorthwestAsiman(Baku,Shakaq))", "is northwest of Shafaq-Asiman.", "Baku is northwest of Shafaq-Asiman.", "all x.(Babaku(x) -> NorthwestOfShafaqAsiman(x))", "(NorthwestOfShamaqAndAsiman(Baku))", "all x.(Baku(x) -> (NorfwestOf(x,Shabaq,Asiman)))", "all x.(Bakou(x) -> (NorthwestOfShafaqAsiman(x)))", "(NorthwestOf(Baku,Shfaq) & NorthwestOf(Baku,Asiman))", "all x.(Baku(x) -> NorthWestOfShalaqAsiman(x))", "(NorthwestOfShafaqAsiman( Baku))"]}
{"id": "folio_train_1921", "nl": "If place A is northwest of place B, then place B is southeast of place A.", "fol": "all x y.(IsNorthwestOf(x,y) -> IsSoutheastOf(y,x))", "prediction": ["all x y.((Place(x) & Place(y) & NorthwestOf(x,y)) -> SoutheastOf(x,y))", "all x.((PlaceA(x) & NorthwestOfPlaceB(x)) -> SoutheastOfPlaceA(x))", "all x.((PlaceA(x) & NorthwestOfPlaceB(x)) -> SoutheastOfPlaceA(x))", "all x.((Place(x) & NorthwestOfPlace(x,B)) -> (BethmartOfPlace(x,A) & SoutheastOfPlace(x,A)))", "all x.((PlaceA(x) & NorthwestOfPlaceB(x)) -> SoutheastOfPlaceA(x))", "all x y.((Place(x) & Place(y) & NorthwestOf(x,y)) -> SoutheastOf(y,z))", "all x.((PlaceA(x) & NorthwestOfPlaceB(x)) -> SoutheastOfPlaceA(x))", "all x.((PlaceA(x) & NorthwestOfPlaceB(x)) -> SoutheastOfPlaceA(x))", "all x y.((Place(x) & Place(y) & NorthwestOf(x,y)) -> SoutheastOf(y,z))", "all x.((PlaceA(x) & NorthwestOfPlaceB(x)) -> SoutheastOfPlaceA(x))", "all x.((Place(x) & NorthwestOfPlace(x)) -> SoutheastOfPlace(x))", "all x.((PlaceA(x) & NorthwestOfPlaceB(x)) -> SoutheastOfPlaceA(x))", "all x y.(NorthwestOfPlace(x,y) -> SoutheastOfPlaceA(x,y))", "all x y.((Place(x) & Place(y) & NorthwestOf(x,y)) -> SoutheastOf(y,x))", "all x.((PlaceA(x) & NorthwestOfPlaceB(x)) -> SoutheastOfPlaceA(x))", "all x.((PlaceA(x) & NorthwestOfPlaceB(x)) -> SoutheastOfPlaceA(x))"]}
{"id": "folio_train_1922", "nl": "Baku is southeast of Shafaq-Asiman.", "fol": "IsSoutheastOf(Baku,ShafaqAsiman)", "prediction": ["(EasternShafaq-Asiman(Baku))", "all x.(Baku(x) -> EastOfShafaqAsiman(x))", "all x.(Baku(x) -> (SoutheastOfShafaqAsiman(x) & ShafaqAsiman(x)))", "and southeast of ShafaqAsiman.", "all x.(Baku(x) -> (ShadaqAsimanSouthwest(x) & Northwest(x)))", "(Sashaq-Asiman(Baku) & SoutheastOfShamaq(Baku))", "ShafaqAsiman (SswiftOfBakuk(Baku))", "(ShafaqAsimanSouthwest(Baku))", "all x.(Baku(x) -> (ShadaqAsiman(x) & SoutheastOf(x,shadaq,siman)))", "all x y z.((Baku(x) & Shafaq(y) & ASIMAN(z) & Southeast(x,y)) -> SoutheastOf(x,z))", "(Bakur(b) & ShafaqAsiman(b))", "Baku is southeast of ShafaqAsiman.", "Baku (SoutheastOfShafaqAsiman(Baku))", "ShafaqAsimanSoutheastOfBaku(baku)", "all x.(Baku(x) -> (ShabaqAsiman) | ShafaqAsiman(x)))", "all x.((Baku(x) & EastToSouthwest(x)) -> ShafaqAsiman(x))"]}
{"id": "folio_train_1923", "nl": "A large complex is southeast of Baku.", "fol": "exists z.(IsLargeComplex(z) & IsSoutheastOf(z,Baku))", "prediction": ["exists x.(LargeComplex(x) & SoutheastOf(x,Baku))", "exists x.(LargeComplex(x) & SoutheastOf(x,Baku))", "all x.(LargeComplex(x) -> SoutheastOfBaku(x))", "all x.((LargeComplex(x) & SoutheastOfBaku(x)) -> NeedsAppraisal(x))", "(LargeComplex(x) & SoutheastOfBaku(x))", "exists x.(LargeComplex(x) & SoutheastOfBaku(x))", "exists x.(LargeComplex(x) & SoutheastOfBaku(x))", "all x.((LargeComplex(x) & SoutheastOfBaku(x)) -> ExistsOfBaku(x))", "all x.(LargeComplex(x) -> SoutheastOfBaku(x))", "exists x.(LargeComplex(x) & SoutheastOf(x,Baku))", "exists x.(LargeComplex(x) & SoutheastOf(x,Baku))", "exists x.(LargeComplex(x) & SoutheastOf(x,Baku))", "all x.(LargeComplex(x) -> SoutheastOfBaku(x))", "all x.(LargeComplex(x) -> SoutheastOfBaku(x))", "all x.(SoutheastOf(x,Baku) -> LargeComplex(x))", "is located southeast of Baku."]}
{"id": "folio_train_1924", "nl": "Baku is not northwest of an offshore geological structures.", "fol": "-exists x.(IsOffshore(x) & HasGeologicalStructures(x) & IsNorthwestOf(Baku,x))", "prediction": ["all x.(Baku(x) -> -NorthwestOfOffshoreGeologicalStructures(x))", "all x.(Baku(x) -> -NorthwestOfOffshoreGeologicalStructures(x))", "all x.(Baku(x) -> -NorthwestOfOffshoreGeologicalStructures(x))", "all x.(Baku(x) -> -WestwestOfOffshoreGeologicalStructures(x))", "all x.(Baku(x) -> -WorthwestOfOffshoreGeologicalStructures(x))", "all x.(Baku(x) & -(OffshoreGeologicalStructure(x) & NorthwestOf(x,Bacu)))", "all x.(Baku(x) -> -WesterlyOfOffshoreGeologicalStructures(x))", "all x.(Baku(x) -> -NorthwestOfOffshoreGeologicalStructures(x))", "all x.(Buku(x) -> -SouthWestofOffshoreGeologicalStructure(x))", "(WesterlyWideOfOffshoreGeologicalStructures(Baku))", "all x.(Baku(x) -> -NorthwestOfOffshoreGeologicalStructures(x))", "all x.(Baku(x) -> -NorthwestOfOffshoreGeologicalStructures(x))", "all x.(Babaku(x) -> (-NorfwestOfOffshoreGeologicalStructures(x)))", "all x.((Baku(x) & -WestwestOfOffshoreGeologicalStructures(x)) -> -OceanOfOffshoreGeologicalStructures(x))", "all x.(Baku(x) -> -WesterlyOfOffshoreGeologicalStructures(x))", "exists x.(Baku(x) & -(OffshoreGeologicalStructures(x) & NorthwestPollination(x)))"]}
{"id": "folio_train_1925", "nl": "Herodicus was a Greek physician, dietician, sophist, and gymnastic-master.", "fol": "(IsGreek(Herodicus) & IsPhysician(Herodicus) & IsDietician(Herodicus) & IsSophist(Herodicus) & IsGymnasticMaster(Herodicus))", "prediction": ["all x.(Herodicus(x) -> (GreekPhDigetician(x) & Sophist(x) & GymnaeticianMaster(x)))", "(Heidodicus (griekman) & Grieco-Dietician(g) & Sophist(g) & GymnasticMaster(g))", "all x.(Herodicus(x) -> (GreekPhiologist(x) & Dietician(x) & Sophot(x) & GymnasticMaster(x)))", "all x.(Herodicus(x) -> (GreekPharmacist(x) & Dietician(x) & Sophit(x) & GymisticMaster(x)))", "all x.(Herodicus(x) -> (GreekPhDentist(x) & Sophist(x) & GymnasticMaster(x)))", "(Greek(heroicus) & Physician(heroicus) & Dietician(heroicus) & Sophist(heroicus) & GymnasticMaster(heroicus))", "((GreekPhDentist(Honolulu) & GreekDietician(Honolulu)) & GreekSophist(Herodicus) & GreekGymnicMaster(Herodicus))", "the Greek Physician,Dietician,Sophist,GymnicMaster, and Herodicus.", "(GreekPheasant(Herodicus) & Dietician(Herodicus) & Sophot(Herodicus) & GymnasticMaster(Herodicus))", "(GreekPharmacist(herodicus) & Dietician(heroicus) & Sophist(heroicus) & GymnasticMaster(heroicus))", "all x.(Herodicus(x) -> (GreekPharmacist(x) & GriecDietician(x) & Sophist(x) & GymnasticMaster(x)))", "all x.(Helodicus(x) -> (Griechienne(x) & Physician(x) & Dietician(x) & Sophot(x) & GymnasticMaster(x)))", "(Helodicus) -> (GreekPhDeniorcetician(Herodicus) & GreekSophist(Herodicus) & GreekGymnicMaster(Herodicus)))", "is Greek(herodicus) & Physician(hero(he) & Dietician(hero) & Sophist(he) & GymnasticMaster(he))", "all x.((GreekPharmacist(x) & Dietician(x) & Sophist(x) & GymnasticMaster(x)) -> Herodicus(x))", "all x.(Herodicus(x) -> (GreekPhdharm(x) & Dietician(x) & Sofist(x) & GymnasticMaster(x)))"]}
{"id": "folio_train_1926", "nl": "Herodicus was born in the city of Selymbria.", "fol": "(BornIn(Herodicus,Selymbria) & IsCity(Selymbria))", "prediction": ["Hectorius s Brutal(s) emopolis(s)", "(Birth(Herodicus,Selymbria))", "(Herodicus) is a Roman Catholic Patriarch of Selymbria (born InSelymbria))", "Herodicus was born in the city of Selymbria ().", "Herodicus was born in Selymbria.", "Herodicus was born in Selymbria.", "Herodicus (bornInSelymbria)", "-(Birth(herodicus) & CityOfSelymbria(hero))", "Originally from Selymbria, Herodicus was born in.", "Caesarean(hero) -> BornInSelymbria(hero))", "Hectorias was born in Selymbria,Selma.", "Herodicus (Herodius) s-Birth(x) & City(x) & City(x) & City(x) & City(x) & City(x))", "(Horodicus) is a child of Selymbria (City) & BornIn(heroicus))", "Selymbria (BirthCity(Herodicus))", "Selymbria (born December 22,1891))", "all x.(Herodicus(x) & BornInSelymbria(x))"]}
{"id": "folio_train_1927", "nl": "Selymbria is a colony of the city-state Megara.", "fol": "(IsColonyOf(Selymbria,Megara) & IsCityState(Megara))", "prediction": ["Selymbria (ColonyOfMegara(x))", "(ColonyOfState(Selymbria) & CityState(Selymbria))", "all x.(Selymbria(x) -> ColonyOfMegara(x))", "Selymbria is colonyOfMegstara(regularly(serial) & CityState(s) & LocatedIn(serial,y))", "(ColonyOfColony(Selymbria) & CityStateMegara(s))", "all x.(Selymbria(x) -> (ColonyOfCityStateMegara(x) & BasedIn(x,y,z)))", "and Community(selymbia,metropolitan)", "(Colony(Selymbria) & CityState(Selymbria))", "Selymbria () -> ColonyOfCityStateMegara(x))", "(ColonyOfMegharna(Selymbria) -> CityStateDemeria(Selymbia))", "all x.(Selymbria(x) -> (ColonyOfCityState(x) & Megara(x)))", "Selymbria.jpg & ColonyOfMegara(x))", "(Colony(Selymbria) & CityStateMegara(Selymbria))", "all x.(Selymbria(x) -> (ColonyOfCityState(x,y) & Megara(y)))", "Selymbria (ColonyOfMeghoraCity(e) & ColonyOfMeghora(f))", "all x.(Selymbria(x) -> (ColonyOf(x,Megara) & City(x)))"]}
{"id": "folio_train_1928", "nl": "One of the tutors of Hippocrates was Herodicus.", "fol": "TutoredBy(Herodicus,Hippocrates)", "prediction": ["all x.(Buddvisor(x) -> Herodicus(x))", "(Helodicus (Tutor(Hippocrates))", "all x.(HippocratesTutor(x) -> Hectorus(x))", "In Hippocrates, Herodicus Tutored.", "(Herodicus)", "Une des tutors of Hippocrates was Herodicus.", "Amongst the tutors of Hippocrates was Herodicus.", "all x.((Tutor(x) & Hippocrate(x)) -> Herodicus(x))", "all x.((Tutor(x) & Hippocrate(x)) -> Herodicus(x))", "(Helendicus(he) & Tutor(he) -> Hippocrates(he))", "one of the tutors of Hippocrates was Herodicus.", "all x.(StudentOfHippocrates(x) -> Herodicus(x))", "all x.(TutorOfHippocrates(x) -> Herodicus(x))", "all x.((Tutor(x) & Hippocrates(x)) -> Herodicus(x))", "All x.((Tutor(x) & Hippocrates(x)) -> Herodicus(x))", "(OnetutorOfHippocrates(heroicus)"]}
{"id": "folio_train_1929", "nl": "Massages were recommended by Herodicus.", "fol": "RecommendedBy(Herodicus,Massages)", "prediction": ["all x.(Massage(x) -> RecommendedByHerodicus(x))", "all x.(Massage(x) -> RecommendedByHerodicus(x))", "all x y.((Massage(x) & Herodicus(y)) -> RecommendedBy(x,y))", "all x.(Massage(x) -> RecommendedByHerodicus(x))", "all x.(Massage(x) -> RecommendatedByHerodicus(x))", "All x.(Massage(x) -> RecommendedByHerodicus(x))", "all x y.((Massage(x) & Herodicus(y)) -> Recommendation(x,y))", "all x.(Massage(x) -> RecommendedByHerodicus(x))", "all x y z.((Massage(x) & Herodicus(y) & Herb(z)) -> Recommends(x,y,z))", "all x.(Massage(x) -> RecommendedByHerodicus(x))", "all x.(Massage(x) -> RecommendedByHerodicus(x))", "all x y.((Massage(x) & Herodicus(y)) -> Recommendation(x,y))", "all x y.((Massage(x) & Herodicus(y)) -> RecommendedBy(x,y))", "all x y.((Massage(x) & Herodicus(y)) -> Recommended(x,y))", "all x.(Massage(x) -> Herodicus(x))", "all x.(Massage(x) -> Recommendation(x,Herodicus))"]}
{"id": "folio_train_1930", "nl": "Some of theories of Herodicus are considered to be the foundation of sports medicine.", "fol": "exists x.(TheoryOf(x) & OriginatesFrom(x,Herodicus) & IsFoundationOf(x,SportsMedicine))", "prediction": ["exists x.(Theory(x) & Herodicus(x) & SportsMedicine(x))", "exists x.(TheoriesOfHerodicus(x) & FoundationOfSportsMedicine(x))", "all x.(HelodicusTheories(x) -> FoundationForSportsMedicine(x))", "exists x.(TheoriesOfHerodicus(x) & FoundationOfSportsMedicine(x))", "exists x.(Theory(x) & Herodicus(x) & FoundationOfSportsMedicine(x))", "exists x.(Technology(x) & Herodicus(x) & SportsMedicine(x))", "exists x.(Theory(x) & HerodicusTheory(x))", "exists x.(HerodicusTheories(x) & FoundationOfSportsMedicine(x))", "exists x y.((Theories(x) & Herodicus(y)) -> FoundationOfSportsMeditation(x))", "exists x.(HerodicusTheory(x) & FoundationOfSportsMeditation(x))", "exists x.(TheoriesOfHerodicus(x) & FoundationOfSportsMedicine(x))", "exists x.(Theory(x) & Herodicus(x) & SportsMedium(y) & Foundation(x,y))", "exists x.(Theories(x) & Herodicus(y) & BaseForMachine(x))", "exists x.(Theories(x) & Herodicus(x) & FoundationOfSportsMedicine(x))", "exists x.(TheoriesOf(x,Herodicus) & FoundationOfSportsMedicine(x))", "exists x y.(Theories(x) & TheoriesOfHerodicus(x) & SportsMedicine(y) & Foundation(x,y))"]}
{"id": "folio_train_1931", "nl": "Herodicus tutored Hippocrates.", "fol": "TutoredBy(Herodicus,Hippocrates)", "prediction": ["(Tutored+Hippocrates(heroicus)", "all x y.((Herodicus(x) & Hippocrate(y)) -> Tutored(x,y))", "Tutored ByHipocrates(Herodicus)", "(Tutors(Harodicus,Hippocrates))", "Tutored(Herodicus,Hippocrates)", "[Tutored(herodicus,Hippocrates)]", "all x.(Herodicus(x) -> TeachHippocrates(x))", "Heliodicus tutoredHipocrates.", "[TrainingHelodicus:Hippocrates]", "(TutorsHippocrates(Herodicus) & TeachesHippocrates(Herodicus))", "(TutorsHippocrates)", "\u201cTutoredHippocrates\u201d", "all x y.((Herodicus(x) & Hippocrate(y)) -> Tutored(x,y))", "(Tutored(Herodicus,Hippocrates))", "all x y.((Herodicus(x) & Hippocrates(y)) -> Taught(x,y))", "(TutorsHelodicus(Hippocrates) & HasHabitat(Hippocrates))"]}
{"id": "folio_train_1932", "nl": "Herodicus was tutored by Hippocrates.", "fol": "TutoredBy(Hippocrates,Herodicus)", "prediction": ["(ThomasHerodicus(Herodicus) & TutoredByHippocrates(Heroicus))", "Is TutoredByHippocrates(i) -> Herodicus(i))", "(StudentedByHipocrates(herodicus)", "TutoredByHippocrates.", "(TrainingHippocrat(Herodicus) & TutoredByHippocrat(heroicus))", "(TutoredByHippocrates(herodicus)", "Hippocrates Tutored Herodicus.", "Herodicus TutoredByHippocrates.", "Hippocrates TutoredHerodicus.", "all x.(Herodicus(x) -> TutoredByHipocrates(x))", "TheoreticalTeacher(Herodicus)", "Heraclitus TutoredByHippocrates(x)", "all x.(Herodicus(x) -> Tutored(x,Hippocrates))", "TutoredByHippocrates(Herodicus)", "all x.(Herodicus(x) -> TutoredByHimphrates(x))", "Tutor(er) : The Herodicus (hypocrat(er) & TaughtBy(er,h,p)))"]}
{"id": "folio_train_1933", "nl": "Herodicus was born in a city-state.", "fol": "exists y.(IsCityState(y) & BornIn(Herodicus,y))", "prediction": ["all x y.((Herodicus(x) & CityState(y)) -> BornIn(x,y))", "(bornInCityState(Herodicus) & BornInCityState(Herodicus))", "All x.(Herodicus(x) -> BornInCityState(x))", "all x.(Herodicus(x) -> BornInCityState(x))", "(Birth(Herodicus,City,State))", "all x.(Herodicus(x) -> BornInCityState(x))", "(bornThan(heroicus,city) & BornIn(heroicus,state))", "(BirthCityState(Herodicus) -> BornIn(Herodicus))", "(bornIn(Helodicus) & CityState(Helloion))", "all x.(Herodicus(x) -> BornInCityState(x))", "Herodicus was born inacitystate(hero))", "Herodicus was born in a CityState(heroicus)", "(bornInCityState(Herodicus) -> BornIn(Herodicus))", "all x.(Herodicus(x) -> BornInCityState(x))", "all x.(Herodicus(x) -> (BirthInCityState(x) | BornInCityState(x)))", "all x.(Herodicus(x) -> BornInCityState(x))"]}
{"id": "folio_train_1934", "nl": "Herodicus did not recommend massages.", "fol": "-RecommendedBy(Herodicus,Massages)", "prediction": ["(-RecommendsMassages(Herodicus))", "-RecommendsMassages(herodicus)", "herodicus was unable to recommend massages.", "(-recommendsMassage(Herodicus))", "-recommendedMassages(Herodicus)", "(-RecommendedMassage(Herodicus))", "all x.(Herodicus(x) -> -RecommendsMassages(x))", "Herodicus did not recommendMassage(hero)", "-PrimariseMassages(Herodicus)", "-RecommendsMassages(Herodicus)", "all x.((Herodicus(x) & Massage(x)) -> -Recommendated(x))", "-(Herodicus(hero) & Massage(hero))", "-RecommendsMassages(herodicus)", "(RecommendsMassage(Herodicus) -> -RecommendsMassages(Herodicus))", "(-RecommendsMassages(Herodicus) -> -RecommendsMassages(HERODICUS))", "all x.(Herodicus(x) -> -RecommendsMassages(x))"]}
{"id": "folio_train_1935", "nl": "Herodicus was born in a colony of a city-state.", "fol": "exists x.(BornIn(Herodicus,x) & exists y.(IsCityState(y) & IsColonyOf(x,y)))", "prediction": ["all x.(Herodicus(x) -> BornInColony(x))", "all x y.((Herodicus(x) & CityState(y)) -> BornInColony(x,y))", "all x y.((Herodicus(x) & Colony(y)) -> BuiltBy(x,y))", "all x.(Herodicus(x) -> BornInColonyOfCityState(x))", "all x y z.((Herodicus(x) & Colony(y) & CityState(z)) -> BornIn(x,y,z))", "all x.(Herodicus(x) -> BornInColonyOfCityState(x))", "the great emperor of Hercules d.c.(Helodicus) -BirthOfCityState(d))", "all x.(Herodicus(x) -> WasBirthInColonyOfCityState(x))", "all x.(Herodicus(x) -> (Birth(x) & ColonyOfConference(x)))", "all x y.((Herodicus(x) & CityState(y)) -> BornIn(x,y))", "all x y.((Herodicus(x) & CityState(y)) -> BornIn(x,y))", "all x y z.((Herodicus(x) & TheatricalColony(y) & CityState(z)) -> BornIn(x,y,z))", "all x y z.((Herodicus(x) & Colony(y) & CityState(z)) -> BornIn(x,y,z))", "Herodicus was born in a colony of a city-state.", "all x y z.((Herodicus\" & Colony(y) & CityState(z)) -> BornIn(x,y,z))", "(Birth(Herodicus) & BuriedInColonyOfState(Herodicus))"]}
{"id": "folio_train_1936", "nl": "No kid loves the Opera.", "fol": "all x.(IsKid(x) -> -LovesOpera(x))", "prediction": ["-LisesOpera(i)", "-exists x.(Kid(x) & LovesOpera(x))", "-exists x.(Kid(x) & Loves(x,Opera))", "-exists x.(Kid(x) & LovesOpera(x))", "-exists x.(Kid(x) & LovesOpera(x))", "-LOVESOPE(Kid)", "-exists x.(Kid(x) & LovesOpera(x))", "-exists x.(Kid(x) & LovesOpera(x))", "-exists x.(Kid(x) & LovesOpera(x))", "-exists x.(Kid(x) & LovesOpera(x))", "-exists x.(Kid(x) & LovesOpera(x))", "-exists x.(Kid(x) & LovesOpera(x))", "-exists x.(Kid(x) & LovesOpera(x))", "-all x.(Kid(x) -> LovesOpera(x))", "\u2013 & KidsLoveOpera(a) & -LoveOpera(b))", "-LimitsOpera(k)"]}
{"id": "folio_train_1937", "nl": "All adults love the Opera.", "fol": "all x.(IsAdult(x) -> LovesOpera(x))", "prediction": ["all x.(Adult(x) -> LovesOpera(x))", "all x.(Adult(x) -> LovesOpera(x))", "all x.(Adult(x) -> Love(x,Opera))", "all x.(Adult(x) -> LovesOpera(x))", "all x.((Adult(x) & LovesOpera(x)) -> LovesOpera(x))", "all x.(Adult(x) -> LovesOpera(x))", "all x.(Adult(x) -> LovesOpera(x))", "all x.(Adult(x) -> LovesOpera(x))", "all x.(Adult(x) -> LovesOpera(x))", "all x.(Adult(x) -> LovesOpera(x))", "all x.(Adult(x) -> LovesOpera(x))", "(all x.(Adult(x) -> LovesOpera(x)))", "all x.(Adult(x) -> LovesOpera(x))", "all x.(Adult(x) -> LovesOpera(x))", "all x.(Adult(x) -> LovesOpera(x))", "all x.(Adult(x) -> LovesOpera(x))"]}
{"id": "folio_train_1938", "nl": "If someone is a scientist, then they are an adult.", "fol": "all x.(IsScientist(x) -> IsAdult(x))", "prediction": ["all x.(Scientist(x) -> Adult(x))", "all x.(Scientist(x) -> Adult(x))", "all x.((Scientist(x) & Adult(x)) -> Scientist(x))", "all x.(Scientist(x) -> Adult(x))", "all x.(Scientist(x) -> Adult(x))", "all x.(Scientist(x) -> Adult(x))", "all x.(Scientist(x) -> Adult(x))", "all x.(Scientist(x) -> Adult(x))", "all x.(Scientist(x) -> Adult(x))", "all x.(Scientist(x) -> Adult(x))", "all x.(Scientist(x) -> Adult(x))", "all x.(Scientist(x) -> Adult(x))", "all x.(Sciences(x) -> Adult(x))", "all x.(Scientist(x) -> Adult(x))", "all x.(Scientist(x) -> Adult(x))", "all x.((Scientist(x) & Adult(x)) -> Scientist(x))"]}
{"id": "folio_train_1939", "nl": "Some students are kids.", "fol": "exists x.(IsStudent(x) & IsKid(x))", "prediction": ["exists x.(Student(x) & Kid(x))", "exists x.(Student(x) & Kid(x))", "exists x.(Student(x) & Kid(x))", "exists x.(Student(x) & Kids(x))", "exists x.(Student(x) & Kid(x))", "exists x.(Student(x) & Kid(x))", "exists x.(Student(x) & Kid(x))", "exists x.(Student(x) & Kid(x))", "exists x.(Student(x) & Kid(x))", "exists x.(Student(x) & Kid(x))", "exists x.(Student(x) & Kid(x))", "exists x.(Student(x) & Kid(x))", "exists x.(Student(x) & Kid(x))", "exists x.(Student(x) & Kid(x))", "exists x.(Student(x) & Kid(x))", "exists x.(Student(x) & Kid(x))"]}
{"id": "folio_train_1940", "nl": "Billy is a kid.", "fol": "IsKid(Billy)", "prediction": ["(Kind(Billy) & Born(Billy))", "All x.(Billy(x) -> Kid(x))", "(Kid(Billy).)", "Billy is kid.", "all x.((Bishop(x) & Kid(x)) -> Kid(x))", "(Kid(Billiam) & BornIn(Billiam))", "Billy is a Kid.", "Billy is a Kid.", "Billy is Kid(z)", "(Kid(Billiam)", "all x.(Billy(x) -> Kid(x))", "all x y.((Billy(x) & Kid(y)) -> Kid(x))", "Billy is Kid(Billiam)", "Billy isKid(Billy)", "Billy is Kid(Billy).", "all x.(Billy(x) -> Kid(x))"]}
{"id": "folio_train_1941", "nl": "Billy is a student.", "fol": "IsStudent(Billy)", "prediction": ["all x.(Billy(x) -> Student(x))", "Billy isStudent(Billy)", "(Student(Billiam) | Student(Billiam)))", "Billy is Student.", "Billy is student.", "(Student(Billy)", "(Student(Bill) & -Student(Bill))", "Billy is Student(Billiam)", "Billy,tat/Student(Billiam)", "(Student(Billiam) | Student(Billiam))", "(Student(Billy)", "all x.((Sister(x) & Student(x)) -> BillyFollows(x,y))", "all x.(Billy(x) -> Student(x))", "Billy is Student(Billy)", "all x.(Bully(x) -> Student(x))", "all x.(Bully(x) -> Student(x))"]}
{"id": "folio_train_1942", "nl": "Billy is a student and a scientist.", "fol": "(IsStudent(Billy) & IsScientist(Billy))", "prediction": ["((Student(Billy) & Scientist(Billy)) -> Scientist(Billy))", "all x.(Billy(x) -> (Student(x) & Scientist(x)))", "all x.(Billiam(x) -> (Student(x) & Scientist(x)))", "exists x.(Student(x) & Scientist(x))", "(Student(Billy) & Scientist(Billy))", "all x.((Bully(x) & Student(x) & Scientist(x)) -> Teacher(x))", "(Student( Billy) & Scientist( Billy))", "all x y.((Bully(x) & Student(y) & Scientist(y)) -> OneStarts(x,y))", "(Student(Billiam) & Scientist(Billiam))", "all x.(Billy(x) -> (Student(x) & Scientist(x)))", "(Student(Billy) & Scientist(Billy))", "-(Billiam(Billy,Student) & Scientist(Billy,Scientist))", "(Student(Billy) & Scientist(Billy))", "the student(Billy) & Scientist(Billy)", "all x.(Billiam(x) -> (Student(x) & Scientist(x)))", "(Student(Billy) & Scientist(Billy))"]}
{"id": "folio_train_1943", "nl": "If Billy is a student or a scientist, then Billy is a student and a kid.", "fol": "((IsStudent(Billy) | IsScientist(Billy)) -> (IsStudent(Billy) & IsKid(Billy)))", "prediction": ["all x.((Student(x) | Scientist(x)) -> (Student(x) & Kid(x)))", "all x.(Student(x) | Scientist(x)) -> (Student(x) & Kid(x)))", "all x.(((Student(x) | Scientist(x)) -> (Student(x) & Kid(x)))", "all x.((Student(x) | Scientist(x)) -> (Student(x) & Kid(x)))", "all x.((Student(x) | Scientist(x)) -> (Student(x) & Kid(x)))", "all x.((Student(x) | Scientist(x)) -> (Student(x) & Kid(x)))", "all x.((Student(x) | Scientist(x)) -> (Student(x) & Kid(x)))", "all x.((Student(x) | Scientist(x)) -> (Student(x) & Kid(x)))", "all x.((Student(x) | Scientist(x)) -> (Student(x) & Kid(x)))", "all x.((Student(x) | Scientist(x)) -> (Student(x) & Kid(x)))", "all x.((Lillie(x) & (Student(x) | Scientist(x))) -> (Student(x) & Kid(x)))", "all x.((Student(x) | Scientist(x)) -> (Student(x) & Kid(x)))", "all x.((Student(x) | Scientist(x)) -> (Student(x) & Kid(x)))", "all x.((Student(x) | Scientist(x)) -> (Student(x) & Kid(x)))", "all x.((Student(x) | Scientist(x)) -> (Student(x) & Kid(x)))", "all x.((Student(x) | Scientist(x)) -> (Student(x) & Kid(x)))"]}
{"id": "folio_train_1944", "nl": "Brian Winter is a Scottish football referee.", "fol": "(IsScottish(Brianwinter) & IsFootballReferee(Brianwinter))", "prediction": ["all x.((FootballReferee(x) & BrianWarth(x)) -> ScottishFitness(x))", "Brian Winter is ScottishFootballReferee(bli)", "Brian Winter is ScottishFootballReferee(BrianWinner)", "Brian Winter (ScottishFootballReferee(BrianWinter))", "Brian Winter is a ScottishFootballReferee(BrianWinter)", "BrianWinter(er) & is ScottishFootballReferee(y) & Settler(z) & Referee(y,z))", "all x.(ScottishFootballReferee(x) -> BrianWinter(x))", "Brian Winter (ScottishFootballReferee)", "Brian Winter is a ScottishfootballReferee(BrianWinter)", "(FootballReferee(BrianWinter) & -StarSports(BrianWinter))", "all x.((BrooklynWinter(x) & ScottishFootballReferee(x)) -> Referee(x))", "Brian Winter is a ScottishFootballReferee(BrianWinter)", "all x.((BrianWinter(x) & ScottishFootballReferee(x)) -> Referee(x))", "BrianWinter(BrianWinter) & ScottishFootballReferee(BrianWinter))", "(ScottishFitnessReferee(BrianWinter)", "(Referee(ScottishFootball) & BrianWinter(Bronie))"]}
{"id": "folio_train_1945", "nl": "After being injured, Brian Winter retired in 2012.", "fol": "(IsInjured(Brianwinter) & IsRetired(Brianwinter))", "prediction": ["(Injured(BrandonWinter) -> Retirement(BrianWarnison,2012))", "Having been injured, Brian Winter retired in 2012.", "Brian Winter, 67, was injured while at work. Brian Winter retired in 2012.", "Brian Winter, injured in 2012, retired in 2012.", "(Injured(BrianWinter) & BrianWinterRetiredIn2012(BrianWinter) & AfterIrvined(BrianWinter))", "all x.(Injured(x) -> BrianWinterRetired(x))", "(Injured(brianhiver) & BrianWinter(hiver))", "Brian Winter, who was injured, retired in 2012.", "(Injured(BrianWinter) & Retirement(BrnWinter) | Injured(BrnWinter)))", "Brian Winter retired from the Rockies in 2012.", "(Injured, Brian Winter retired.)", "all x.(Injured(x) & BrianWinterRetired(x))", "(Illnessed( Brian Winter) & JimPallinsInjured( Brian Winter))", "Having been injured in 2010, Brian Winter retired in 2012.", "Brian Winter, who was injured, retired from active duty in 2012.", "(Injured(BrianWinter) & BrianBlurned(BrianWinn-2012)) & BrianWinterRetired(BrianWinn-2012))"]}
{"id": "folio_train_1946", "nl": "Brian Winter was appointed as a referee observer after his retirement.", "fol": "IsRefereeObserver(Brianwinter)", "prediction": ["Brian Winter took the job of RefereeObserver after retirement.", "BrianWinter(BrianWinner) & AppointedRefereeObserver(Winter)", "all x.((BrianWinter(x) & Retirement(x)) -> RefereeObserver(x))", "all x.((BrianWinter(x) & RetirementRetirement(x)) -> RefereeObserver(x))", "Brian Winter was appointed as RefereeObserver after retirement.", "Brian Winter was appointed as RefereeObserver after retirement.", "(AppointedAsRefereeObserverAfterRetiring(BrianWinter)", "BrianWinter was appointed AsRefereeObserver(BrianWinter) after retirement(BrianWinter)", "ALL x.((BrianWinter(x) & Retirement(x)) -> RefereeObserver(x))", "\u0440\u0438\u043e\u0434\u0438\u0432\u0430 \u0440\u043e\u0440\u0430\u043c\u043c\u0430 \u043e\u043e\u0432\u043e\u043b\u043a\u043e \u0435\u0440\u0435\u043d\u0442\u0440\u043e\u043b\u0438 \u0440\u043e\u0434\u0435\u043b\u0441\u043a\u043e \u043a\u0443\u0430\u043d\u0438.", "all x y.((BrianWinter(x) & Retirement(y)) -> RefereeObserver(x,y))", "all x.((BrianWinter(x) & Retirement(x)) -> RefereeObserver(x))", "all x.((BrianWinter(x) & Retirement(x)) -> RefereeObserver(x))", "Brian Winter resigned from the BarclayCardinals & AxedAsRefereeObserver(KvP) & Retired(JRunship)", "Brian Winter was appointed as RefereeObserver( Brian) after retirement( Brian)", "all x y.((BrianWinter(x) & Retirement(y)) -> AppointedAsRefereeObserver(x,y))"]}
{"id": "folio_train_1947", "nl": "Some football referees become referee observers.", "fol": "exists x.(IsFootballReferee(x) & IsRefereeObserver(x))", "prediction": ["exists x.(FootballReferee(x) & becomesRefereeObserver(x))", "exists x.(FootballReferee(x) & BelongsToRefereeObservers(x))", "exists x.(FootballReferee(x) & RefereeObserver(x))", "exists x.(FootballReferee(x) & RefereeObserver(x))", "exists x.(FootballReferee(x) & BecomesRefereeObserver(x))", "exists x.(FootballReferee(x) & BelongsToRefereeObserver(x))", "exists x.(FootballReferee(x) & MakesRefereeObserver(x))", "exists x.(FootballReferee(x) & RefereeObserver(x))", "exists x.(FootballReferee(x) & RefereeObserver(x))", "exists x.(FootballReferee(x) & BecomesRefereeObserver(x))", "exists x.(FootballReferee(x) & RefereeObserver(x))", "exists x.(FootballReferee(x) & RefereeObserver(x))", "exists x.(FootballReferee(x) & BecameRefereeObserver(x))", "exists x.(FootballReferee(x) & RefereeObserver(x))", "exists x.(FootballReferee(x) & BecomesRefereeObserver(x))", "exists x.(FootballReferee(x) & RefereeObserver(x))"]}
{"id": "folio_train_1948", "nl": "The son of Brian Winter, Andy Winter, is a football player who plays for Hamilton Academical.", "fol": "(HasSon(Andywinter,Brianwinter) & IsFootballPlayer(Andywinter) & PlaysForTeam(Andywinter,Hamiltonacademical))", "prediction": ["(SonOfBrianWine,AndyWine,Than-BlackFootball(Knoep) & PlaysForHeltonAcademical(Knoep))", "Andy Winter, SohnOfBrianWinterSon,TrophyPlayerForHamiltonAcademical.Com.((SohnOfAndyWinter(9)) -> FootballPlayer(x))", "Andy Winter, sonOfBrianWinters, is a football player (playedForHamiltonAcademical))", "(SonOfMr.BrianWinter(SonOfAndyWinter) -> FootballPlayer(Anderson,HarnessianAcademic))", "(SonOfBrianWinter(SonOfAndyWinter) -> (FootballPlayerForHeleniac Academical(SonOf(Anderson,Jen)))", "Andy Winter (son(n) & BrianWinter(x)) -(FootballPlayer(n) & PlaysForHamiltonAcademical(n)))", "(SonOfBrianWinter(SoldByAndyWinter) -> FootballPlayer(Anderson,HamiltonAcademic))", "((SonOfBrianWinter(anonymousToRon Winter) & AndyWinter(anonymousToRonAnderson)) -> FootballPlayer(anonymousToHamiltonAcademical))", "Andy Winter, sonofBrianWinter, plays for HamiltonAcademical.", "(SonOfBrianWarren(soonOfAndyWarren(s) & FootballPlayer(s) & PlaysAcademic (HamiltonCultural)))", "(SonOfBrianWinn(SonOfAndyWinn(SeanOfBrianWinter(SonOfAndyWinner) & FootballPlayer(SisterOfHestonAcademical))", "(SonOfBrianWinter(SonOfBrianWinter,Andy(Swinter) & FootballPlayer(SonOfBrianWinter(SanOfBrianWinter) & PlaysForHintonAcademical(SonOfWinter(Knows))", "((SonOfBrianWinter(AndyWinter) & FootballPlayerForHamiltonAcademical(Anderson)) -> PlaysForHamiltonAcademical(Anderson))", "(Nicky(sonOfBrianWine) & Willy(sonOf(SonOf(SonOf(SkyLwinter,BrianWine)) & FootballPlayer(SonOf(SkyLowLeaders(SkyLights(SkyLoading,Hamilton Academical)))", "Der Sohn(son) DeceasedBrianWinter(AndyBell) & AthleticsPlayer(son,Harmony)", "(SonOfBrianWinter(SonOfAndyWinter) & FootballPlayer(ArthurJim)."]}
{"id": "folio_train_1949", "nl": "There is a son of a referee observer that plays football.", "fol": "exists x y.(IsRefereeObserver(y) & HasSon(x,y) & IsFootballPlayer(x))", "prediction": ["exists x y.(Son(x) & RefereeObserver(y) & PlaysFootball(x) & RefereeObserver(y))", "exists x.(SonOfRefereeObserver(x) & PlaysFootball(x))", "exists x y.(Son(x) & RefereeObserver(y) & PlaysFootball(x,y))", "exists x.(RefereeObserverSister(x) & PlaysFootball(x))", "exists x y.((RefereeObserver(x) & Son(y) & Referee(y) & Observes(y)) -> PlaysFootball(y))", "exists x.(SonOfRefereeObserver(x) & PlaysFootball(x))", "exists x.(RefereeObserverSon(x) & PlaysFootball(x))", "exists x.(Son(x) & RefereeObserver(x) & PlaysFootball(x))", "exists x y.(SonOfRefereeObserver(x) & Referee(y) & PlaysFootball(x))", "exists x.(SonOfRefereeObserver(x) & PlaysFootball(x))", "exists x y.(Son(x) & RefereeObserver(y) & ReffObserver(x,y) & PlaysFootball(x))", "exists x y z.(Son(x) & RefereeObserver(y) & Football(z) & Plays(x,y,z))", "exists x y.((Son(x) & RefereeObserver(y) & Referee(y)) & Men(x,y))", "exists x.((SonOfRefereeObserver(x) & PlaysFootball(x))", "exists x.(SonOfRefereeObserverWhoPlaysFootball(x))", "exists x y.(Son(x) & RefereeObserver(y) & Playfootball(x))"]}
{"id": "folio_train_1950", "nl": "Brian Winter is not a referee observer.", "fol": "-IsRefereeObserver(Brianwinter)", "prediction": ["No RefereeObserver(BrianWinter)", "Brian Winter is not refereeObserver.", "BrianWinter(BrianWinn@(Winter) & -RefereeObserver(Winter))", "all x.(RefereeObserver(x) -> BrianWinter(x))", "Brian Winter is not a refereeObserver(BrianWinter)", "(-RefereeObserver(BrianWinter)", "BrianWinter(a) & -RefereeObserver(b))", "-RefereeObserver(BrianWinter)", "Brian Winter is not refereeObserver.", "BrianWinter(a) & -RefereeObserver(b))", "(-RefereeObserver(BrianWinter))", "(-RefereeObserver(BronyWinter))", "(-RefereeObserver(BrianWinter))", "-RefereeObserver(BrianWinter)", "Brian Winter is not a refereeObserver.", "BrianWinter,RareeObserver, -BehavesWith(BrianWinter,x))"]}
{"id": "folio_train_1951", "nl": "Brian Winter is retired.", "fol": "IsRetired(Brianwinter)", "prediction": ["Brian Winter has retired.", "All x.((BrianWinter(x) & Retirement(x)) -> BrianSnow.", "Brian Winter is retired.", "Brian Winter is retired.", "Brian Winter is retired.", "Brian Winter is retired.", "Brian Winter is retired.", "Brian Winter is retired.", "(Retired(BrianWinter)", "Brian Winter is retired.", "Brian Winter is retired.", "Brian Winter is retired.", "Brian Winter is retired.", "Brian Winter is retired.", "Brian Winter is retired.", "BrianWinterRetired(Brian,(Brian) & TheMoon(Brian,WM))"]}
{"id": "folio_train_1952", "nl": "Andy Winter is a referee.", "fol": "Referee(Andywinter)", "prediction": ["all x.(Referee(x) -> AndyWinter(x))", "Andy Winter is a Referee(x)", "all x.((AndyWeird(x) & Referee(x)) -> Referee(x))", "Andy Winter, 73, is Referee(Andy)", "Andy Winter is a Referee(x)", "all x.(Referee(x) -> AndyWinter(x))", "all x.(Referee(x) -> AndyWinter(x))", "Andy Winter is a Referee(AndyWinter)", "(Referee(AndyWinter)", "all x.(Referee(x) -> AndyWinter(x))", "(Referee(AndyWinter)", "(Referee(ArthurWinter)", "all x.((AndyWinter(x) & Referee(x)) -> Referee(x))", "(Referee(AndyWinter)", "all x.(Referee(x) -> AndyWinter(x))", "(Referee(AndyWinter) | Referee(Andy)))"]}
{"id": "folio_train_1953", "nl": "People are either interested in puzzles or bad at chess.", "fol": "all x.(InterestedInPuzzles(x) | BadAtChess(x))", "prediction": ["exists x.(Puzzle(x) | BadChess(x))", "all x.(Puzzles(x) | BadChess(x))", "all x.((Person(x) & (InterestedInPuzzles(x) | BadAtChess(x))) -> (MajorPuzzle(x) | BadAtChess(x)))", "all x.((Person(x) & (InterestsInPuzzles(x) | BadAtChess(x))) -> InterestsInPuzzles(x))", "exists x.(Puzzle(x) | BadChess(x))", "all x.(Puzzle(x) | BadChess(x))", "all x.(Puzzle(x) | BadChess(x))", "all x.(Person(x) -> (InterestingPuzzle(x) | BadAtChess(x)))", "all x.((Person(x) & (InterestsInPuzzles(x) | BadAtChess(x))) -> PersonInInterestAndBaasAtChess(x))", "all x.(Puzzle(x) | BadChess(x))", "all x.(Puzzle(x) | BadChess(x))", "all x y.((Person(x) & Puzzle(y)) -> (Interesting(x,y) | BadAtChess(x)))", "all x.(Person(x) -> (InterestsInPuzzles(x) | BadAtChess(x)))", "all x.((Person(x) & (InterestsInPuzzles(x) | BadAtChess(x))) -> (InterestsInPuzzles(x)))", "all x.(PuzzleInterest(x) | BadChess(x))", "exists x.(Person(x) & (InterestInPuzzles(x) | BadAtChess(x)))"]}
{"id": "folio_train_1954", "nl": "If a person is bad at chess, then they don't play a lot of chess.", "fol": "all x.(BadAtChess(x) -> -PlaysALotOfChess(x))", "prediction": ["all x.(BadAtChess(x) -> -PlayLotOfChess(x))", "all x.(BadAtChess(x) -> -PlaysWorstAtChess(x))", "all x.((BadAtChess(x) & HasQuase(x)) -> -PlaysLotOfChess(x))", "all x.(DangerAtChess(x) -> -PlaysLOTOfChess.", "all x.((Person(x) & BadAtChess(x)) -> -PlaysLittleChess(x))", "(BadAtChess(Person) -> -PlaysMuchChess(Person))", "all x.((Person(x) & BadAtChess(x)) -> -PlaysLessOfChess(x))", "all x.(BadAtChess(x) -> -PlaysLotOfChess(x))", "all x.((Person(x) & BadAtChess(x)) -> -PlayLotOfChess(x))", "all x.(BadAtChess(x) -> -PlaysLotOfChess(x))", "all x.(BadAtChess(x) -> -PlaysLotOfChess(x))", "all x.(BadChess(x) -> -PlaysLotOfChess(x))", "all x.(BadAtChess(x) -> -PlaysLotOfChess(x))", "all x.(BadAtChess(x) -> -PlayLittleChess(x))", "all x.((Person(x) & BadAtChess(x)) -> -PlaysLittleChess(x))", "all x.((Person(x) & BadAtChess(x)) -> -PlaysLotOfChess(x))"]}
{"id": "folio_train_1955", "nl": "A person is either a planner or a creative person.", "fol": "all x.(IsAPlanner(x) | IsCreative(x))", "prediction": ["all x.(Person(x) -> (Planner(x) | Creative(x)))", "all x.(Person(x) -> (Planner(x) | CreativePerson(x)))", "all x.(Person(x) -> (Planner(x) | CreativePerson(x)))", "exists x.(Person(x) & (Planner(x) | CreativePhotographer(x)))", "all x.(Person(x) -> (Planner(x) | CreativePerson(x)))", "exists x.(Person(x) & Planner(x) & Creative(x))", "all x.(Person(x) -> (Planner(x) | CreativePerson(x)))", "all x.(Person(x) -> (Planner(x) | CreativePerson(x)))", "all x.(Person(x) -> (Planner(x) | CreativePerson(x)))", "all x.(Planner(x) | CreativePerson(x))", "all x.(Person(x) -> (Planner(x) | CreativePerson(x)))", "exists x.(Person(x) & (Planner(x) | Creative(x)))", "all x.((Person(x) & Planner(x)) | CreativePerson(x))", "all x.(Person(x) -> (Planner(x) | CreativePerson(x)))", "all x.(Planner(x) | CreativePerson(x))", "exists x.(Person(x) & Planner(x) & CreativePerson(x))"]}
{"id": "folio_train_1956", "nl": "Erica is someone who plays a lot of chess.", "fol": "PlaysALotOfChess(Erica)", "prediction": ["all x.(Erica(x) -> PlaysSomethingOfChess(x))", "all x.(Erica(x) -> PlaysDozensOfChess(x))", "all x.((Erica(x) & LotsOfChess(x)) -> Plays(x,chess))", "all x.((Erica(x) & PlaysChess(x)) -> VeryParty(x))", "all x.(Erica(x) -> PlaysChess(x))", "Erica is a ChessPlayer(erica)", "all x.((Erica(x) & PlaysChess(x)) -> PlaysChess(x))", "Erica plays lotsOfChess(Erica)", "all x.(Erica(x) -> Plays(x,Chess))", "Erica is a lot of chess player.", "all x.(Erica(x) -> PlaysLotsOfChess(x))", "all x.(Erica(x) -> PlaysChess(x))", "all x y.((Erica(x) & Css(y)) -> PlaysLots(x,y))", "many years ago, i wrote about this with all x.(Chess(x) -> Erica(x))", "all x.(Erica(x) -> PlaysChess(x))", "all x.(Erica(x) -> PlaysPotentialChess(x))"]}
{"id": "folio_train_1957", "nl": "If Erica is neither bad at chess nor creative, then Erica is either someone who plans and is creative, or someone who neither plans nor is creative.", "fol": "(-(BadAtChess(Erica) | IsCreative(Erica)) -> -((IsAPlanner(Erica) & -IsCreative(Erica)) | (-IsAPlanner(Erica) & IsCreative(Erica))))", "prediction": ["all x.((Erica(x) & -(BadAtChess(x) | Creative(x))) | (-PlansAndCreative(x)) & -PlansAndCreative(x))))", "all x.((Erica(x) & -(BadAtChess(x) | Creative(x))) -> (PlansPeople(x) | -PlansPeople(x) & Creative(x)))", "all x.((Erica(x) & -BadChess(x) & -Creative(x)) -> (Plans(x) | -Plans(x) | -Creative(x)))", "all x.((Erica(x) & (-BadAtChess(x) | Creative(x))) | (-BadAtChess(x) | Creative(x))))", "all x.((Erica(x) & -BadAtChess(x) & -Creative(x)) -> (Plans(x) | -Plans(x) | -Creative(x))))", "all x.((Erica(x) & -BadAtChess(x) & -Creative(x)) -> (Plans(x) & Creative(x)) | (-Plans(x) & Creative(x))))", "all x.((Erica(x) & -BadAtChess(x) & -Creative(x)) -> (PlansAndImagines(x) | -PlansAndImagines(x)))", "all x.((Erica(x) & (-BadAtChess(x) | Creative(x))) | (-BadAtChess(x) & Creative(x))))", "all x.((Erica(x) & -(BadAtChess(x) | Creative(x))) -> (Plans(x) | -Plans(x) | -Creative(x))))", "all x.((Erica(x) & -(BadChess(x) | Creative(x))) -> (Plans(x,y) | -Plans(x,y) | -Creative(y)))", "all x.((Erica(x) & -BadAtChess(x) & -Creative(x)) -> (Plans(x) | -Plans(x) & -Creative(x)))", "all x.((Erica(x) & -BadAtChess(x) & -Creative(x)) -> (Plans(x) | -Plans(x) & -Creative(x)))", "all x.((Erica(x) & (-BadAtChess(x) | Creativity(x))) -> (Plans(x) | -Plans(x) & -Creativity(x))))", "all x.((Erica(x) & -BadAtChess(x) & -Creative(x)) -> (PlansAndCreative(x) | -PlansAndCreative(x)))", "all x.((Erica(x) & -BadAtChess(x) & -Creative(x)) -> (PlansElements(x) | -PlansElements(x)))", "all x.((Erica(x) & -BadAtChess(x) & -Creative(x)) -> (Plans(x) | -Plans(x) | -Creative(x)))"]}
{"id": "folio_train_1958", "nl": "Erica plans.", "fol": "IsAPlanner(Erica)", "prediction": ["all x.((Elizabeth(x) -> Plans(x))", "all x y.((Erica(x) & Plan(y)) -> Plan(x,y))", "Erica Plans(erica)", "Erica Plans(erica)", "(Plans(Erica,Distant1) & EricaPlans(Erica,Distant1))", "exists x.(Erica(x) & Plans(x))", "all x.(Erica(x) -> Plans(x))", "all x.(Erica(x) -> Plans(x))", "all x.(Erica(x) -> Plans(x))", "all x.(Erica(x) -> Plans(x))", "all x.(Erica(x) -> Plans(x))", "all x.(Erica(x) -> Plans(x))", "all x.(Recinct(x) -> Plans(x))", "exists x.(Erica(x) & Plans(x))", "exists x.(Erica(x) & Plans(x))", "(Plans(Erica)"]}
{"id": "folio_train_1959", "nl": "Erica is interested in puzzles and is creative.", "fol": "(InterestedInPuzzles(Erica) & IsCreative(Erica))", "prediction": ["(InterestingInPuzzles(Erica) & Creative(Erica))", "(Interesting(Erica,Puzzles) & Creative(Erica,Puzzles))", "all x.(Erica(x) -> (InterestingInPuzzles(x) & Creative(x)))", "comes from a background in puzzles (Creative(Erica)).", "(interestedInPuzzles(Erica) & Creative(Erica))", "(InterestingInPuzzles(Erica) & Creative(Erica))", "(InterestingInPuzzles(Erica) & Creative(Erica))", "(InterestingInPuzzles(Erica) & Creative(Erica))", "all x.((Erica? & InterestsInPuzzles(x) & Creative(x)) -> InterestsInPuzzles(x))", "all x.(Elicia(x) -> (InterestsInPuzzles(x) & Creative(x)))", "all x.((Erica(x) & IntriguedInPuzzles(x)) -> Creative(x))", "(InterestingInPuzzles(Erica) & Creative(Erica))", "all x y.((Erica(x) & Puzzle(y)) -> (InterestsIn(x,y) & Creative(x)))", "all x.(Erica(x) -> (InterestsInPuzzles(x) & Creative(x)))", "all x.( Erica(x) -> (InterestsInPuzzles(x) & Creative(x)))", "(InterestsInPuzzles(Erica) & Creative(Erica))"]}
{"id": "folio_train_1960", "nl": "Erica is either interested in puzzles or is creative.", "fol": "(InterestedInPuzzles(Erica) | IsCreative(Erica))", "prediction": ["all x.(Erica(x) -> (InterestsInPuzzles(x) | Creativity(x)))", "Erica is either interested in Puzzles or Creative(Erica)", "(InterestingPuzzle(Erica) | Creative(Erica))", "all x.((Erica(x) & (InterestingPuzzles(x) | Creativity(x))) -> Creative(x))", "all x.(Elica(x) -> (InterestingInPuzzles(x) | Creativity(x)))", "all x.(Erica(x) -> (InterestingInPuzzles(x) | Creative(x)))", "(InterestingPuzzle(Erica) | Creative(Erica))", "(interestedInPuzzles(erica) | Creative(erica)))", "all x.(Erica(x) -> (InterestedInPuzzles(x) | Creative(x)))", "all x.(Erica(x) -> (InterestsInPuzzles(x) | Creative(x)))", "all x.(Erica(x) -> (InterestsInPuzzles(x) | Creative(x)))", "(InterestingInPuzzles(Erica) | Creative(Erica))", "all x.((Erica(x) & (InterestingInPuzzles(x) | Creative(x))) -> Erica(x))", "all x.((Erica(x) & (InterestsInPuzzles(x) | Creative(x))) -> InterestsInPuzzles(x))", "all x.(Erica(x) -> (InterestsInPuzzles(x) | Creative(x)))", "all x.((Erica(x) & (InterestingInPuzzles(x) | Creative(x))) -> Cultivation(x))"]}
{"id": "folio_train_1961", "nl": "If Erica plans ahead or plays a lot of chess matches, then Erica is not interested in puzzles and creative.", "fol": "((IsAPlanner(Erica) | PlaysALotOfChess(Erica)) -> -(InterestedInPuzzles(Erica) & IsCreative(Erica)))", "prediction": ["all x.((Elia(x) & (PlansProgress(x) | PlaysLotsOfChessMatches(x))) -> (-IsInterestingInPuzzles(x) & -IsCreative(x)))", "all x.((ChessBenchmaker(x) & PlansAhead(x) & PlaysLots(x)) -> -(Puzzles(x) | Creative(x)))", "all x.((Erica(x) & (PlansBy(x) | PlaysTalentsOfChessMatch(x))) -> -(InvitingInPuzzles(x) & -InvitingInCreative(x))))", "all x.((Erica(x) & (PlansAhead(x) | PlaysLotsOfMatches(x))) -> -InterestingInPuzzles(x) & -Creative(x))", "all x.((Erica(x) & PlansAhead(x) | PlaysLotsOfChessMatch(x)) -> -InterestingInPuzzlesAndCreative(x))", "all x.((Erica(x) & (PlansBefore(x) | PlaysLotsOfChestMatch(x))) -> -InterestsInPuzzles(x) & -Creative(x))", "all x.((Erica(x) & PlansAhead(x) | PlaysLotsOfChessMatches(x)) -> -InvolvesPuzzles(x) & -Creative(x))", "all x.((Erica(x) & (PlansAhead(x) | PlaysLotsOfChessMatches(x))) -> -InterestingInPuzzles(x) & -Creative(x))", "all x.((Erica(x) & (PlansFacing(x) | PlaysMuchOfChess(x))) -> -InterestsInPuzzles(x) & -interestedInCreative(x))", "all x.((Erica(x) & PlansLong(x) & PlaysLt.OfChessMatches(x)) -> -IntentInPuzzles(x) & -IntentInCreative(x))", "all x.((Erica(x) & PlansAheadOrPlaysLotsOfChessMatches(x)) -> -InteresterInPuzzlesAndCreative(x))", "all x.((Erica(x) & (PlansAhead(x) | PlaysLotsOfChessMatch(x))) -> -Puzzles(x) & Creative(x))", "all x.((EricaPlans ahead(x) | PlaysLotOfChessMatch(x)) -> -(InterestsInPuzzles(x) & -Creative(x)))", "all x.((EricaPlansAhead(x) | PlaysLotsOfChessMatches(x)) -> -[InterestedInPuzzles(x) & Creative(x)))", "all x.((Erica(x) & PlansAdvancesOrPlaysThan(x,ChessMatches)) -> -InterestsInPuzzlesAndCreative(x))", "all x.((Erica(x) & (PlansHere(x) | PlaysMajorChessMatches(x))) -> -InterestsInPuzzles(x) & -InterestsInCreative(x)))"]}
{"id": "folio_train_1962", "nl": "If Erica is creative, then Erica is not interested in puzzles and creative.", "fol": "(IsCreative(Erica) -> (-InterestedInPuzzles(Erica) & IsCreative(Erica)))", "prediction": ["all x.(Creative(x) -> (-InterestsInPuzzles(x) & -InterestsInCreative(x)))", "all x.((Erica(x) & Creative(x)) -> -(InterestedInPuzzles(x) & Creative(x)))", "all x.(Creative(x) -> (-InterestsInPuzzles(x) & -InterestsInCreative(x)))", "all x.((Puzzles(x) & Creative(x)) -> -InterestingIn(x,Puzzles) & -InterestingIn(x,Creative))", "all x.((Erica(x) & Creative(x)) -> -InterestingInPuzzles(x) & -InterestingInCreativity(x))", "all x.(Creative(x) -> -InspiredInPuzzles(x) & -InspiredInCreative(x))", "all x.((Erica(x) & Creative(x)) -> -InterestsInPuzzlesAndCreative(x))", "all x.((Creative(x) & Erica(x)) -> (-InterestsInPuzzles(x) & -InterestsInCreative(x)))", "all x.((Erica(x) & Creative(x)) -> -InterestingInPuzzles(x) & -InterestingInCreative(x))", "all x.((Erica(x) & Creative(x)) -> (-InterestsInPuzzles(x) & -InterestsInCreative(x)))", "all x.(Creative(x) -> -InterestsInPuzzles(x))", "all x.(Creative(x) -> (-InterestsInPuzzles(x) & -InterestsInCreative(x)))", "all x.((Erica(x) & Creative(x)) -> -InterestsInPuzzles(x) & -InterestsInCreative(x))", "all x.((Erica(x) & Creative(x)) -> -InterestingInPuzzlesAndCreative(x))", "all x.((Erica(x) & Creative(x)) -> (-Puzzles(x) & Creative(x)))", "all x.(Creativity(x) -> -InterestsInPuzzlesAndCreative(x))"]}
{"id": "folio_train_1963", "nl": "If Erica is interested in puzzles and is creative, then Erica is not creative.", "fol": "((InterestedInPuzzles(Erica) & IsCreative(Erica)) -> -IsCreative(Erica))", "prediction": ["all x.((InterestingInPuzzles(x) & Creative(x)) -> -Creative(x))", "all x.((Elizabeth(x) & InterestsInPuzzles(x) & Creative(x)) -> -Creative(x))", "all x.((Erica(x) & InterestsInPuzzles(x) & Creative(x)) -> -Creative(x))", "all x.((Erica(x) & InterestInPuzzles(x) & Creative(x)) -> -Creative(x))", "all x.((IsInterestingInPuzzles(x) & Creative(x)) -> -Creative(x))", "all x.((InspiredIgnitesPuzzles(x) & Creative(x)) -> -Creative(x))", "all x.((Erica(x) & InterestInPuzzles(x) & Creative(x)) -> -Creative(x))", "all x.((Erica(x) & InterestedInPuzzles(x) & Creative(x)) -> -Creative(x))", "all x.((Elrica(x) & InterestedInPuzzles(x) & Creative(x)) -> -Creative(x))", "all x.((Erica(x) & InterestedInPuzzles(x) & Creative(x)) -> -Creative(x))", "all x.((Erica(x) & InterestInPuzzles(x) & Creative(x)) -> -Creative(x))", "all x.(((Erica(x) & InteractedInPuzzles(x) & Creative(x)) -> -Creative(x))", "all x.((Elica(x) & Interest(x) & Creative(x)) -> -Creative(x))", "all x.((Erica(x) & EngagedInPuzzles(x) & Creative(x)) -> -Creative(x))", "all x.((Erica(x) & InterestsInPuzzles(x) & Creative(x)) -> -Creative(x))", "all x.((Erica(x) & InterestsInPuzzles(x) & Creative(x)) -> -Creative(x))"]}
{"id": "folio_train_1964", "nl": "If Erica either plays a lot of chess matches or is creative, then Erica is neither interested in puzzles nor a person who plays a lot of chess matches.", "fol": "((PlaysALotOfChess(Erica) | IsCreative(Erica)) -> (-InterestedInPuzzles(Erica) & -PlaysALotOfChess(Erica)))", "prediction": ["all x.((PuzzlePiece(x) & Plays(x,Chess) | Creative(x)) -> (-Interesting(x) & -Plays(x,ChessMatch)))", "all x.((PuzzlesAn Interest(x) | Creative(x)) -> -(PuzzlesAn Interest(x) | LotsOfChessMatches(x)))", "all x.((Erica(x) & (PlaysLotOfChessMatch(x) | Creative(x))) -> (-InterestingInPuzzles(x) & -PlaysLotOfChessMatch(x)))", "all x.((Erica(x) & (PlaysLotOfChessMatches(x) | Creative(x))) -> -(InterestedInPuzzles(x) | PlaysLotOfChessMatches(x))))", "all x.((Erica(x) & (PlaysLotsOfChessMatches(x) | Creative(x))) -> (-InterestingInPuzzles(x) & -PlaysLotsOfChessMatches(x)))", "all x.((Erica(x) & (PlaysLotsOfChessMatch(x) | Creative(x))) -> (-InterestedInPuzzles(x) &-PlaysLotsOfChessMatches(x)))", "all x.((Erica(x) & (PlaysLakhsOfChessMatches(x) | Creative(x))) -> (-InterestedInPuzzles(x) & -PlaysLakhsOfChessMatches(x)))", "all x.((Erica(x) & (PlaysLotOfChessMatch(x) | Creative(x))) -> (-InterestingInPuzzles(x) & -AfInterestingInChessMatch(x)))", "all x.((Erica(x) & (PlaysLotOfChessMatches(x) | Creative(x))) -> (-InterestingInPuzzles(x) | PlaysLotOfChessMatches(x)))", "all x.((Puzzle(x) | Creative(x)) -> (-InterestsInPuzzles(x) & -PlaysLittleChessMatches(x)))", "all x.((Erica(x) & (PlaysMillionsOfChessMatches(x) | Creative(x))) -> (-InterestingInPuzzles(x) & -PlaysMillionsOfChessMatches(x)))", "all x.((Erica(x) & (PlaysLt.OfChessMatchES(x) | Creative(x))) -> -(InterestedInPuzzles(x) | PlaysLt.OfChessMatchES(x))))", "all x y.((Puzzle(x) & 'Erica(y) & PlaysLotOfChessMatches(y,x)) | Creative(y,x)) -> -(InvolvedIn(y,x) & Plagiarism(y) & -InvolvedIn(y,x)))", "all x.((Erica(x) & (PlaysLakhsOfChessMatches(x) | Creative(x))) -> -(InterestedInPuzzles(x) | PlaysLakhsOfChessMatches(x))))", "all x.((Erica(x) & (PlaysLotsOfChessMatches(x) | Creative(x))) -> (-InterestingInPuzzles(x) & -PlaysLotsOfChessMatches(x)))", "all x.((Erica(x) & (PlaysSlotsOfChessMatches(x) | Creative(x))) -> (-InterestsInPuzzles(x) & -PlaysSlotsOfChessMatches(x)))"]}
{"id": "folio_train_1965", "nl": "If Erica is interested in puzzles and plays a lot of chess matches, then Erica is either a person who plays a lot of chess matches or a person that is creative.", "fol": "((InterestedInPuzzles(Erica) & PlaysALotOfChess(Erica)) -> (PlaysALotOfChess(Erica) | IsCreative(Erica)))", "prediction": ["all x.((Puzzles(x) & LotsOfChessMatches(x)) -> (PlaysLtsOfChessMatches(x) | Creative(x)))", "all x.((Puzzle(x) & PlaysLotsOfChessMatches(x)) -> (PlaysLotsOfChessMatches(x) | Creative(x)))", "all x y.((PuzzleRather(x) & Plucker(y) & (Involves(x,y) & Plays(x,y) | Creative(x))) -> Erica(x))", "all x.((Puzzles(x) & Plays(x,y) & ChessMatches(y)) -> (Plays(x,z) | Creative(x)))", "all x.((Puzzles(x) & PlaysLucksMatches(x)) -> (PlaysLucksMatches(x) | Creative(x)))", "all x.((IntroducedInPuzzlesAndPlaysLargeChessMatches(x) & EricaPlaysLargeChessMatches(x)) -> ((PlaysLargeChessMatches(x) | CreativePerson(x))))", "all x.((PuzzlesInteresting(x) & LotsOfChessMatch(x,Erica) & Plays(x,ChessMatch)) -> (Plays(Erica,ChessMatch) | Creative(Erica)))", "all x.((Puzzles(x) & PlaysLotsOfChessMatches(x)) -> (PlaysLotsOfChessMatches(x) | Creative(x)))", "all x.((Puzzles(x) & PlaysLotsOfChessMatches(x)) -> (Person(x) & PlaysLotsOfChessMatches(x) | Creative(x)))", "all x.((Puzzles(x) & PlaysLotsOfChessMatches(x)) -> ((PlaysLotsOfChessMatches(x) | CreativePerson(x))))", "all x.((Puzzles(x) & Plays(x,y) & Interested(x) & LotsOfChessMatches(x)) -> (Plays(x,y) | Creative(y)))).", "all x.((Elizabeth(x) & InterestedInPuzzles(x) & playsLotsOfChessMatches(x)) -> (PlaysLotsOfChessMatches(x) | Creative(x)))", "all x.((PuzzleSpoken(x) & PlaysLargeChessMatch(x)) -> (PartOfMatchPlaying(x) | Participating(x)))", "all x.((PuzzleInterest(x) & PlaysLotsOfChessMatch(x)) -> (Person(x) & PlaysLotsOfChessMatch(x) | Creative(x)))", "all x.((IntentInPuzzles(x) & PlaysLotOfChessMatches(x)) -> (IncreativePerson(x) | CreativePerson(x)))", "all x.((Puzzle(x) & PlaysChestMatch(x)) -> (Person(x) & PlaysChessMatch(x) | Creative(x)))"]}
{"id": "folio_train_1966", "nl": "If Erica plans ahead or is interested in puzzles, then Erica is creative.", "fol": "((IsAPlanner(Erica) | InterestedInPuzzles(Erica)) -> IsCreative(Erica))", "prediction": ["all x.((Erica(x) & (PlansAhead(x) | InterestsInPuzzles(x))) -> Creative(x))", "all x.((PlansForward(x) | InterestedInPuzzles(x)) -> Creative(x))", "all x.((Erica(x) & (PlannsAhead(x) | InterestsInPuzzles(x))) -> Creative(x))", "all x.((Elica(x) | OrInterestsInPuzzles(x)) -> Creative(x))", "all x.((Explorable(x) | InterestedInPuzzles(x))) -> Creative(x))", "all x.((Erica(x) & (PlansWithoutPuzzles(x) | InterestsInPuzzles(x))) -> Creative(x))", "all x.((Erica(x) & [PlansAhead(x) | InterestsInPuzzles(x))) -> Creative(x))", "all x.((Erica(x) & (PlansAhead(x) | InterestsInPuzzles(x))) -> Creative(x))", "all x.(((Erica(x) & (PlansAhead(x) | InterestsInPuzzles(x))) -> Creative(x))", "all x.((Erica(x) & (PlansAhead(x) | InterestsInPuzzles(x))) -> Creative(x))", "all x.((Erica(x) & PlansAhead(x) & (EnthusedInPuzzles(x) | EnthusedInPuzzles(x))) -> Creative(x))", "all x.((Erica(x) & (PlansProgress(x) | InterestsInPuzzles(x))) -> Creative(x))", "all x.((Erica(x) & PlansAhead(x) | InterestInPuzzles(x)) -> Creative(x))", "all x.((Recognition(x) & (PlansAhead(x) | InterestsInPuzzles(x))) -> Creative(x))", "all x.((Erica(x) & (PlansAndInterestInPuzzles(x) | WantsPuzzles(x))) -> Creative(x))", "all x.((Erica(x) & PlansHereOrInterestsInPuzzles(x)) -> Creative(x))"]}
{"id": "folio_train_1967", "nl": "If Erica is either bad at chess or interested in puzzles, then Erica is not a person who plays a lot of chess matches and creative.", "fol": "((BadAtChess(Erica) | InterestedInPuzzles(Erica)) -> -(PlaysALotOfChess(Erica) & IsCreative(Erica)))", "prediction": ["all x.((Erica(x) & (BadAtChess(x) | InterestInPuzzles(x))) -> -(PlaysLotsOfChessMatches(x) & Creative(x)))", "all x.((Person(x) & (BadAtChess(x) | InterestInPuzzles(x))) -> -(PlaysLotsOfChessMatches(x) & Creativity(x)))", "all x.((ChessBad(x) | PuzzleInterest(x)) -> -(PlaysLots(x,ChessMatches) & Creative(x,ChessMatches)))", "all x.((BadAtChess(x) | InterestInPuzzles(x)) -> -(PlaysChessMatches(x) | Creative(x)))", "all x.(IsBadAtChessOrInterestedInPuzzles(x) -> -(PlaysLittleChessMatches(x) & Creative(x)))", "all x.(BadAtChess(x) | InterestdInPuzzles(x)) -> -(PlaysLotsOfChessMatches(x) & CreativePerson(x)))", "all x.((Erica(x) & (BadAtChess(x) | InterestingInPuzzles(x))) -> -PlaysMillionsOfChessMatches(x) & Creative(x))", "all x.(BadAtChess(x) | InterestInPuzzles(x)) -> -(PlaysLittleChess(x) & Creative(x)))", "all x.((Of(Erica,Chests) | InterestInPuzzles(Erica,Chess)) -> -(PlaysLittleAtMatches(Erica,Chess) & Creative(Erica)))", "all x.((Erica(x) & IsBadAtChess(x) | IsInterestingInPuzzles(x)) -> -PlaysLittleChessMatchesAndCreative(x))", "all x.((BadChess(x) | InterestInPuzzles(x)) -> -PlaysLotsOfChessMatchesAndCreative(x))", "all x.((AtChess(x) | InterestedInPuzzles(x)) -> -PlaysLakhsOfChessMatchesAndCreative(x))", "all x.((Person(x) & (BadAtChess(x) | InterestingInPuzzles(x))) -> -PlaysMillionsOfChessMatchesAndCreative(x))", "all x.((Erica(x) & (Bad(x\") | InterestingInPl\u00e4tzes(x))) -> -PlaysAtLargeChestMatches(x) & Creative(x))", "all x.(((Erica(x) & (BadChess(x) | InterestInPuzzles(x))) -> -(PlaysChessMatches(x) & Creative(x)))", "all x.((Erica(x) & (BadChess(x) | InterestedInPuzzles(x))) -> -(PlaysThousandsOfChessMatches(x) & Creative(x)))"]}
{"id": "folio_train_1968", "nl": "Soccer players have a right foot and a left foot.", "fol": "all x.((IsSoccerPlayer(x) -> HasLeftFoot(x)) & HasRightFoot(x))", "prediction": ["all x.(SoccerPlayer(x) -> (HasRightFoot(x) & HasLeftFoot(x)))", "all x.(SoccerPlayer(x) -> (HasRightFoot(x) | HasLeftFoot(x)))", "all x.(SoccerPlayer(x) -> (HasRightFoot(x) & HasLossFoot(x)))", "all x.(SoccerPlayer(x) -> (HasRightFoot(x) & HasLeftFoot(x)))", "all x.(SoccerPlayer(x) -> (HasRightFoot(x) & HasLeftFoot(x)))", "all x.(SoccerPlayer(x) -> (HasRightFoot(x) & HasLeftFoot(x)))", "all x.(SoccerPlayer(x) -> (HasRightFoot(x) & HasLeftFoot(x)))", "all x.(SoccerPlayer(x) -> (HasRightFoot(x) & HasLeftFoot(x)))", "all x.(SoccerPlayer(x) -> (HasRightFoot(x) & HasLeftFoot(x)))", "(all x.(SoccerPlayer(x) -> RightFoot(x)) & all y.(SoccerPlayer(y) -> LeftFoot(y)))", "all x.(SoccerPlayer(x) -> (HasRightFoot(x) & HasLeftFoot(x)))", "all x.(SoccerPlayer(x) -> (HasRightFoot(x) & HasLeftFoot(x)))", "all x.(SoccerPlayer(x) -> (HasRightFoot(x) & HasLeftFoot(x)))", "all x.(SoccerPlayer(x) -> (HasRedFoot(x) & HasLeftFoot(x)))", "all x.(SoccerPlayer(x) -> (HasRightFoot(x) & HasLeftFoot(x)))", "all x.(SoccerPlayer(x) -> (RightFoot(x) & LeftFoot(x)))"]}
{"id": "folio_train_1969", "nl": "Top soccer players are soccer players who can use their both feet very efficiently.", "fol": "all x.((IsSoccerPlayer(x) & CanUseFootEfficiently(x,Left) & CanUseFootEfficiently(x,Right)) -> IsTopSoccerPlayer(x))", "prediction": ["all x.((Player(x) & SoccerPlayer(x) & UsesBothFeetEfficiently(x)) -> TopSoccerPilot(x))", "all x.(TopSoccerPlayer(x) -> (SoccerPlayer(x) & CanUseStandardlyTow(x)))", "all x.((SoccerPlayer(x) & TopDog(x)) -> Professional(x))", "all x.((SoccerPlayer(x) & SoccerPlayer(x) & UseSwiftFingersEfficiently(x)) -> Top(x))", "all x.((SoccerPlayer(x) & SoccerPlayer(x) & EfficientMeandering(x)) -> Top(x))", "all x.((SoccerPlayer(x) & SuperTeam(y)) -> UsesBothFeetEffectively(y))", "all x y.(SoccerPlayer(x) -> (SoccerPlayer(y) & CanUseBothFeet(y) & Efficient(y)))", "all x.(TurnaboutSoccerPlayer(x) -> (SoccerPlayer(x) & EfficientUse(x)))", "all x.((FootballPlayer(x) & SoccerPlayer(x) & CanUseBothFeet(x)) -> Top(x))", "all x y z.((SoccerPlayer(x) & SoccerPlayer(y) & Foot(z) & OftenUses(y,z)) -> UsesEfficiently(y,z))", "all x.((SoccerPlayer(x) & SoccerPlayer(x) & UsesBottomFootEffectively(x)) -> Top(x))", "all x y.((TopSoccerPlayer(x) & SoccerPlayer(y)) -> (CanUseBothFeetEfficiently(x,y)))", "all x.((TopSoccerPlayer(x) & SoccerPlayer(x) & UsesDeepFoot(x)) -> Efficient(x))", "all x.((SoccerPlayer(x) & SoccerPlayer(x) & CanUseBothFeetEfficiently(x)) -> Top(x))", "all x.((Player(x) & SoccerPlayer(x) & UsesExcellentFeet(x)) -> Top(x))", "all x.((StarSoccerPlayer(x) & SoccerPlayer(x) & EfficientTwoFeet(x)) -> CanUseBothFeet(x))"]}
{"id": "folio_train_1970", "nl": "If a soccer player can score many goals using left foot, then they can use that foot very efficiently.", "fol": "all x.((IsSoccerPlayer(x) & HasScoredManyGoals(x,Left)) -> CanUseFootEfficiently(x,Left))", "prediction": ["all x.((SoccerPlayer(x) & ScoresManyGoalsWithLeftFoot(x)) -> VeryEfficientUseFoot(x))", "all x.((SoccerPlayer(x) & ScoresManyGoalsUsingLeftFoot(x)) -> UsesEfficientlyTooLawFoot(x))", "all x.((SoccerPlayer(x) & CanScoreManyGoals(x) & UsesLeftField(x)) -> CanUseFootEfficiently(x))", "all x.((SoccerPlayer(x) & CanScoreManyGoalsUsingLeftFoot(x)) -> VeryEfficientUseOfLeftFoot(x))", "all x.((SoccerPlayer(x) & ScoresManyGoals(x) & UsesLeftFoot(x)) -> UsesFootEfficiently(x))", "all x.((SoccerPlayer(x) & CanScoreManyGoalsWithLeftFoot(x)) -> CanUseLeftFootEfficiently(x))", "all x.((SoccerPlayer(x) & ScoresManyGoals(x) & LeftFoot(x)) -> UsesEfficientFoot(x))", "all x.((SoccerPlayer(x) & CanScoreManyGoalsUsingLeftFoot(x)) -> CanUseFootEfficiently(x))", "all x y.((SoccerPlayer(x) & CanScoreManyGoalsUsingLeftFoot(x) & UseleftFootEfficiently(y)) -> UseFootEfficiently(x))", "all x.((SoccerPlayer(x) & ScoresManyGoals(x,leftGround)) -> UsesTouchFootEfficiently(x))", "all x.((SoccerPlayer(x) & ScoresManyGoalsUsingLeftFoot(x)) -> CanUseLeftFootEfficiently(x))", "all x.((SoccerPlayer(x) & CanScoreManyGoalsUsingLeftFit(x)) -> CanUseFootEfficiently(x))", "all x.((SoccerPlayer(x) & ScoresGroundsWithLeftFoot(x)) -> UsesEfficientlyFoot(x))", "all x.((SoccerPlayer(x) & CanScoreManyGoalsSinceLegalFoot(x)) -> CanUseLegalFootEfficiently(x))", "all x.((SoccerPlayer(x) & CanScoreManyGoals(x,leftfoot)) -> UsesFootSimultaneously(x))", "all x.((SoccerPlayer(x) & CanScoreManyGoalsWithLeftFoot(x)) -> CanUseFootReallyEfficiently(x))"]}
{"id": "folio_train_1971", "nl": "If a soccer player can score many goals using right foot, then they can use that foot very efficiently.", "fol": "all x.((IsSoccerPlayer(x) & HasScoredManyGoals(x,Right)) -> CanUseFootEfficiently(x,Right))", "prediction": ["all x.((SoccerPlayer(x) & CanScoreRightFoot(x)) -> UsesEfficientFoot(x))", "all x.((SoccerPlayer(x) & ScoresManyGoalsWithRightFoot(x)) -> UsesFootEfficiently(x))", "all x.((SoccerPlayer(x) & ScoresManyGoalsWithRightFoot(x)) -> UsesEfficiently(x))", "all x.((SoccerPlayer(x) & ScoresManyGoalsWithFoot(x)) -> UsesFootEfficiently(x))", "all x.((SoccerPlayer(x) & CanScoreManyGoals(x) & UseRightFoot(x)) -> CanUseFootEfficiently(x))", "all x.((SoccerPlayer(x) & ScoresManyGoalsUsingRightFoot(x)) -> UsesPedestrianFoot(x))", "all x.((SoccerPlayer(x) & CanScoreManyGoalsUsingFoot(x)) -> CanSuccessfullyUseFoot(x))", "all x y.((SoccerPlayer(x) & CanScoreManyGoalsWithRightFoot(x,y)) -> CanUseFootTogether(y,z))", "all x.((SoccerPlayer(x) & ScoresThousandsOfGoals(x) & UsesRightFoot(x)) -> UsesFootEfficiently(x))", "all x.((SoccerPlayer(x) & CanScoreMoreGoalsUsingRightFoot(x)) -> CanUseFootEfficiently(x))", "all x.(SoccerPlayer(x) -> (ScoresManyGoalsUsingRightFoot(x) & UsesSolvedFootExpensively(x)))", "all x.((SoccerPlayer(x) & ScoresManyGoalsUsingRightFoot(x)) -> UsesFootEfficiently(x))", "all x.((SoccerPlayer(x) & ScoresManyGoalsUsingRightFoot(x)) -> CanUseRightFootEfficiently(x))", "all x.((SoccerPlayer(x) & CanScoreManyGoals(x) & UsesRightFoot(x)) -> VeryEfficientUseMovement(x))", "all x.((SoccerPlayer(x) & ScoresManyGoalsWithRightFoot(x)) -> CanUseRightFootEfficiently(x))", "all x.(SoccerPlayer(x) -> (ScoresManyGoalsUsingLocation(x) & UsesRightFit(x)))"]}
{"id": "folio_train_1972", "nl": "Cristiano Ronaldo is a soccer player.", "fol": "IsSoccerPlayer(Ronaldo)", "prediction": ["Cristiano Ronaldo (Crisiano) s SoccerPlayer(x))", "Cristiano Ronaldo is soccer player.", "all x.((Co-Cro Cristiano Ronaldo(x) & SoccerPlayer(x)) -> CristianoRedondo(x))", "(SoccerPlayer(CristianoRonaldo,Cristino))", "Cristiano Ronaldo is a soccer player.", "Cristiano Ronaldo is soccer player.", "Cristiano Ronaldo ((SoccerPlayer) | SoccerPlayer(s)))", "all x.((ChristianoRonaldo(x) & SoccerPlayer(x)) -> Professional(x))", "Cristiano Ronaldo (Cronosporto(Soccer) & Player(Cronosporto(Cronose,Soccer))", "Cristiano Ronaldo (SoccerPlayer)", "all x.((CristinoRonaldo(x) & SoccerPlayer(x)) -> Plays(x,Soccer))", "Cristiano Ronaldo is a soccer player.", "all x.((CroicoRonaldo(x) & SoccerPlayer(x)) -> Plays(x,Corner,Ox))", "Cristiano Ronaldo (SoccerPlayer)", "(SoccerPlayer(Crojuano) & Football(Crojuan Ronaldo))", "all x.((Cristico(x) & Ronaldo(x)) -> SoccerPlayer(x))"]}
{"id": "folio_train_1973", "nl": "Cristiano Ronaldo can use his right foot very efficiently.", "fol": "CanUseFootEfficiently(Ronaldo,Right)", "prediction": ["All x.(CristianoRonaldo(x) -> UsesRightFootEffectively(x))", "all x y.((Cronal Ronaldo(x) & RightFoot(y)) -> CanUseEfficiently(x,y))", "all x y.((CristianoRecordo(x) & RightFoot(y)) -> CanUseEfficiently(x,y))", "all x.(Cristino(x) -> CanUseRightFootEfficiently(x))", "all x.((Chrisso Ronaldo(x) & RightFoot(x)) -> UsedEfficiently(x))", "all x.(ChristianoRonaldo(x) -> UsesFoot(x,right))", "all x.(CronocristianO(x) -> CanUseRightFoot(x))", "all x.(Cro(x) -> CanUseFoot(x))", "all x.(CristinoRoyal(x) -> CanUseFootProperly(x))", "all x.( Cristiano Ronaldo(x) -> CanUseRightFootEfficiently(x))", "all x.((CarlosRonaldo(x) & LeftFoot(x)) -> EffectiveUse(x))", "all x y.((Christo Ronaldo(x) & RightFoot(y)) -> UsesEfficiently(x,y))", "all x.((Cronocronalist(x) & RightFoot(x)) -> UsesRedfootEfficiently(x))", "all x.(ChrisianoRonaldo(x) -> CanUseRightFootEfficiently(x))", "all x y.((Coronalist(x) & RightFoot(y)) -> Effective(x,y))", "all x y.((CroicoRonaldo(x) & RightFoot(y)) -> CanUseEfficiently(x,y))"]}
{"id": "folio_train_1974", "nl": "Cristiano Ronaldo have scored more than one hundred goals using his left foot.", "fol": "HasScoredManyGoals(Ronaldo,Left)", "prediction": ["all x.((Cronos Ronaldo(x) & LeftFoot(x)) -> ScoredMoreThanOneTwelveGoals(x))", "all x.(CroviroRegono(x) -> HasScoredMoreThanSixThan(x,100))", "all x.((CroitoRonaldo(x) & LeftFoot(y)) -> ScoredMoreThanTenGoals(x,y))", "all x.((Virgio Ronaldo(x)) -> MoreThan100Goals(x,leftfoot))", "all x.(CRINORojas(x) -> MoreThanOneTenGoals(x))", "all x y.((CroatianoRonaldo(x) & LeftFoot(y) & ScoredMoreThan(x,y)) -> HasScoredTogether(x,y,z))", "all x.(CristianoRonaldo(x) -> HasScoredMoreThanOneTenGoals(x))", "all x.(CRicinoRonaldo(x) -> ScoredMoreThanZineGoalsWithLeftFoot(x))", "all x.((CristianoRealdo(x) & GoalsUsingLeftFoot(x)) -> Scored(x,100))", "all x.((CruzianoRonaldo(x) & LeftFoot(x)) -> ScoredMoreThan(x,100))", "all x.(CrojanoRod\u00e9ro(x) -> IsScoreForLeftFoot(x,TwoScores))", "all x y.((CristianoRonaldo(x) & LeftFoot(y)) -> ScoredMoreThan(x,y))", "all x.((CristianoRonaldo(x) & UsedLawFeet(x)) -> ScoredMoreThanOneSixtyGoals(x))", "all x.((CristianoRonaldo(x) & MoreThanOne(x,100)) -> HasLeftFoot(x))", "all x y.((CrojanoRonaldo(x) & LeftFoot(y)) -> ScoresScore(x,y))", "all x.((CristinoRonaldo(x) & LeftFoot(x)) -> ScoresMoreThanOneSixThan(x))"]}
{"id": "folio_train_1975", "nl": "Cristiano Ronaldo is a top soccer player.", "fol": "IsTopSoccerPlayer(Ronaldo)", "prediction": ["all x.((CroianoRedondo(x) & TopSoccerPlayer(x)) -> TopSoccerPlayer(x))", "(TopSoccerPlayer(Ronaldo) & Cristiano(Ronaldo))", "Cristiano Ronaldo is a topsoccerPlayer(CronicoRonaldo)", "all x.((CoryanoRonado(x) & TopSoccerPlayer(y)) -> TopThan(x,y))", "all x.((CroinosRomero(x) & TopSoccerPlayer(x)) -> TopSoccer(x))", "all x.((CrosimoRosario(x) & TopSoccerPlayer(x)) -> TopSoccer(x))", "all x.((ChristinoRonaldo(x) & TopSoccerPlayer(x)) -> TopPlayer(x))", "all x.((CristianoRonaldo(x) & Top(x)) -> SoccerPlayer(x))", "all x.((CristianoRonaldo(x) & TopSoccerPlayer(x)) -> Top(x))", "all x.((Cronocraro(x) & TopSoccerPlayer(x)) -> TopSoccerPlayer(x))", "all x.(CroitoRoyal(x) -> TopSoccerPlayer(x))", "all x.((SoccerPlayer(x) & Cristiano(x)) -> TopSoccerPlayer(x))", "all x.((CristianoRonaldo(x) & TopSoccerPlayer(x)) -> Top(x))", "all x.((CruzianoRonaldo(x) & TopFootballPlayer(x)) -> CristianoRonaldo(x))", "all x.((CristinoRonaldo(x) & TopSoccerPlayer(x)) -> TopPlayer(x))", "all x.((CrosimoRodrigo(x) & TopSoccerPlayer(x)) -> TopPlayer(x))"]}
{"id": "folio_train_1976", "nl": "Cristiano Ronaldo is not a top soccer player.", "fol": "-IsTopSoccerPlayer(Ronaldo)", "prediction": ["(-TopSoccerPlayer(CristianoRonaldo))", "-TopSoccerPlayerChris(Ronaldo)", "(-TopSoccerPlayer(CristianoRonaldo))", "-KinderFootballPlayer(christianoRonaldo)", "All x.((CristinoRonaldo(x) & -TopSoccerPlayer(x)) -> NoLeaf(x))", "-TopSoccerPlayer(CristianoRonaldo)", "-TopSoccerPiece(CristianoRealdo)", "the top soccer player.", "(-TopSoccerPlayer(CristinoRonaldo))", "(-TopSoccerPlayer(Cristino Ronaldo))", "-TopSoccerPlayer(CristianoRonaldo)", "-TopSoccerPlayer(Christino Ronaldo)", "(-TopSoccerPlayer( Cristiano Ronaldo))", "(-TopSoccerPlayer(CristinoRoyalO))", "Cristiano Ronaldo is not topsoccerPlayer(circonorealo)", "all x.((CroicoRoseno(x) & NoTopSoccerPlayer(x)) -> -TopSoccerPlayer(x))"]}
{"id": "folio_train_1977", "nl": "The National Lobster Hatchery is a hatchery located in Padstow England.", "fol": "(IsHatchery(Nationallobsterhatchery) & LocatedInLocation(Nationallobsterhatchery,Padstowengland))", "prediction": ["all x.(NationalLobsterHatchery(x) -> exists y.(Padstow(y) & Hutchery(x,y)))", "All x.(NationalLobsterHatchery(x) -> (Horse(x) & LocatedInPadstowEngland(x)))", "All x y.((NationalLocksterHatchery(x) & PadstowHottery(y)) -> Hutchery(x,y))", "(Hatchery(NationalLobster(NH) & LocatedInPadstow(NH) & LocatedInNorwegian(NH))", "all x y z.((NationalLobsterHatchery(x) & Padstow(y) & (Path(z) | LocatedIn(z,y))) -> Hatchery(x))", "all x.(NationalLobsterHatchery(x) -> (HasHaireryInPadstow(x) & LocatedInEngland(x)))", "The NationalLobsterHatchery (HosteryInPadstowEngland)", "all x.(LobsterHatchery(x) -> isHatchery(x))", "all x.(NationalLobsterHatchery(x) -> (HackeryInPatstow(x) & HatcheryInRoundout(x)))", "(NationalLobsterHatchery(n) & LocatedInPadstow(n))", "all x y z.((NationalLobsterHatchery(x) & Padstow(y) & England(z)) -> Hatchery(x,y,z))", "The NationalLobsterHatchery (CH) is a hatchery located in Padstow,England.", "(NationalLobsterHatchery(NationalHatchery,Boston,England))", "(NationalLobsterHatchery(NationalHatchery) & LocatedInPadstow(NationalHatchery))", "all x.(NationalLobsterHatchery(x) -> (Hatchery(x) & LocatedInPadstow(x) & LocatedInEngland(x)))", "all x.(NationalLobsterHatchery(x) -> LocatedInPadstowEngland(x))"]}
{"id": "folio_train_1978", "nl": "The National Lobster Hatchery is open to visitors.", "fol": "IsOpenToVisitors(Nationallobsterhatchery)", "prediction": ["Availability:NationalHusky(NHL)", "all x y.((NationalLobsterHatchery(x) & Visitor(y)) -> Open(x,y))", "all x.(NationalLobsterHatchery(x) -> OpenToVisitors(x))", "all x.(LobsterHatchery(x) -> OpenToVisitors(x))", "all x.(NationalLobsterHatchery(x) -> OpenToVisitors(x))", "all x.(NationalLobsterHatchery(x) -> OpenToVisitors(x))", "(Vacant(NationalLobsterHatchery) -> OpenTo(NationalLobsterHatchery))", "all x.(NationalLlobsterHatchery(x) -> OpenToVisitors(x))", "opens to all ages.", "all x.(NationalLobsterHorse(x) -> OpenToVisitors(x))", "(OpenToVisitors(NationalLumberHatchery) & OpenToVisitors(NationalLumberHatchery))", "(OpenToVisitors(NationalLobsterHatchery) -> OpenToVisitors(NationalLobsterHabitry))", "all x.(NationalLobsterHackery(x) -> OpenToVisitors(x))", "All x.(NationalLobsterHitchery(x) -> OpenToVisitors(x))", "all x.(NationalLobsterHatchery(x) -> OpenToVisitors(x))", "all x.(NationalLocksterHatchery(x) -> OpenToVacants(x))"]}
{"id": "folio_train_1979", "nl": "A hatchery is either for profit, or for conservation.", "fol": "all x.((IsHatchery(x) -> IsForConservation(x)) | IsForProfit(x))", "prediction": ["all x.(Habitery(x) -> (Financial(x) | Conservation(x)))", "all x.(Hasting(x) -> (Profit(x) | Conservation(x)))", "all x.(Hatchery(x) -> (ForProfit(x) | ForConservation(x)))", "all x.(Habitery(x) -> (Finance(x) | Conservation(x)))", "all x.(Habitery(x) -> (ForProfit(x) | ForConservation(x)))", "all x.(Hawkery(x) -> (ForProfit(x) | ForConservation(x)))", "all x.(Habitery(x) -> (ForProfit(x) | ForConservation(x)))", "all x.(Hackery(x) -> (ForProfit(x) | ForConservation(x)))", "exists x.(Haversery(x) & (ForProfit(x) | ForConservation(x)))", "all x.(Habitery(x) -> ((Financial(x) | Conservation(x))))", "all x.(Hackery(x) -> (Financial(x) | Conservation(x)))", "exists x.(Habitery(x) & (Profit(x) | Conservation(x)))", "all x.(Harkery(x) -> (Function(x,profit) | Conservation(x)))", "exists x.(Habitery(x) & (ForProfit(x) | ForConservation(x)))", "all x.(Habitery(x) -> ((FollowingProfit(x) | -FollowingConservation(x))))", "exists x.(Hawkery(x) & (ForProfit(x) | ForConservation(x)))"]}
{"id": "folio_train_1980", "nl": "If a hatchery is for conservation, it might release animals into the wild.", "fol": "exists x.(IsHatchery(x) & IsForConservation(x) & ReleasesAnimalsIntoWild(x))", "prediction": ["all x y.((Hatchery(x) & Conservation(y)) -> MightReleaseAnimalsIntoWild(x,y))", "all x.((Habitat(x) & Conservation(x)) -> MightReleaseAnimalsIntoWild(x))", "all x.((Hatchery(x) & ForConservation(x)) -> MightReleaseAnimalsIntoWild(x))", "all x.((Hackery(x) & ForConservation(x)) -> MightReleaseAnimalsIntoWild(x))", "all x.((Hurkery(x) & Conservation(x)) -> ReleasesAnimalsIntoWild(x))", "all x.((Horsery(x) & ForConservation(x)) -> MightReleasesAnimalsIntoWild(x))", "all x.((Horseery(x) & ForConservation(x)) -> MightReleaseAnimalsIntoWild(x))", "all x.((Habitery(x) & ForConservation(x)) -> CouldReleaseAnimalsIntoWild(x))", "all x.((Hucklery(x) & ForConservation(x)) -> MayReleaseAnimals(x))", "all x.((Habitery(x) & ForConservation(x)) -> (ReleasesIntoWild(x)))", "all x.((Harkery(x) & ForConservation(x)) -> PossibleReleaseIntoWild(x))", "all x.((Harkery(x) & Conservation(x)) -> (ReleaseAnimalsIntoWild(x)))", "all x.((Hatchery(x) & ForConservation(x)) -> MayReleaseAnimalsIntoWild(x))", "all x.((Habitery(x) & ForConservation(x)) -> MightReleaseAnimalsInWild(x))", "all x.((Hatchery(x) & ForConservation(x)) -> MayReleaseAnimalsIntoWild(x))", "all x.((Habitery(x) & ForConservation(x)) -> CouldReleaseAnimalsIntoWild(x))"]}
{"id": "folio_train_1981", "nl": "The National Lobster Hatchery is not for profit.", "fol": "-IsForProfit(Nationallobsterhatchery)", "prediction": ["all x.(NationalLobsterHatchery(x) -> -Profit(x))", "(NationalLobsterHatchery(NHLH) & -Profit(NHLH))", "Die NationalLobsterHatchery.com -Financial(lobster)", "the NationalHoppery-ForProfit(LobsterHatchery)", "All x.(NationalLobsterHatchery(x) -> -ForProfit(x))", "-ProfitBased(NationalLlobsterHatchery)", "all x.(NationalLobsterHatchery(x) -> -Profit(x))", "Die NationalLobsterHatchery(NHH) ist -ForProfit(NHH))", "Das NationalLobsterHatchery -ForProfit(NLOBSTER))", "-ForProfit(NationalLobsterHatchery)", "Llobster(NationalHatchery)", "The NationalLobsterHatchery(NHLHatchery) -ForProfit(NHLHatchery))", "all x.(NationalLobsterHatchery(x) -> -ForProfit(x))", "There are no profit opportunities at the LobsterHachery.", "it is notForProfit(NationalLobsterHatchery)", "The NationalLobsterHatchery."]}
{"id": "folio_train_1982", "nl": "The National Lobster Hatchery is for conservation.", "fol": "IsForConservation(Nationallobsterhatchery)", "prediction": ["all x.(NationalLocksterHagery(x) -> ForConservation(x))", "We are forConservation(NationalLobsterHatchery)", "all x.(NationalLobsterHatchery(x) -> ForConservation(x))", "All x.(NationalLobsterHatchery(x) -> ForConservation(x))", "(ForConservation(NationalLobsterHatchery) -> ForConservation(NationalLobsterHatchery))", "all x.(NationalLobsterHatchery(x) -> ForConservation(x))", "All x.(NationalLobsterHatchery(x) -> ForConservation(x))", "all x.(NationalLobsterHatchery(x) -> ForConservation(x))", "all x.(NationalLobsterHatchery(x) -> ForConservation(x))", "all x.(NationalLobsterHatchery(x) -> ForConservation(x))", "(ConservationOnly(NationalLobsterHachery) & ForConservation(NationalLobsterHachery))", "all x.(NationalLobsterHatchery(x) -> ForConservation(x))", "all x.(NationalLobsterHosty(x) -> ForConservation(x))", "ALL x.(NationalLobsterHatchery(x) -> ForConservation(x))", "All x.(NationalLobsterHatchery(x) -> ForConservation(x))", "All x.(NationalLobsterHatchery(x) -> ForConservation(x))"]}
{"id": "folio_train_1983", "nl": "All hatcheries are open to visitors.", "fol": "all x.(IsHatchery(x) -> IsOpenToVisitors(x))", "prediction": ["all x.(Habiterie(x) -> OpenToVisitors(x))", "all x.(Habitat(x) -> OpenToVisitors(x))", "all x.(Habitat(x) -> OpenToVisitors(x))", "all x.(Habitat(x) -> OpenToVisitors(x))", "all x.(Habitat(x) -> OpenToVisitors(x))", "all x.(Habitat(x) -> OpenToVisitors(x))", "all x.(Habitat(x) -> OpenToVisitors(x))", "all x.(Habiterie(x) -> OpenToVisitors(x))", "all x.(Hairerie(x) -> OpenToVisitors(x))", "all x.(Habitat(x) -> OpenToVisitors(x))", "all x.(Horse(x) -> OpenToVisitors(x))", "all x.(Habitat(x) -> OpenToVisitors(x))", "all x.(Harkerie(x) -> OpenToVisitors(x))", "all x.(Habitat(x) -> OpenToVisitors(x))", "all x.(Habitat(x) -> OpenToVisitors(x))", "all x.(Huckater(x) -> OpenToVisitors(x))"]}
{"id": "folio_train_1984", "nl": "The National Lobster Hatchery releases animals into the wild.", "fol": "ReleasesAnimalsIntoWild(Nationallobsterhatchery)", "prediction": ["exists x.(NationalLobsterHatchery(x) & ReleasesAnimalsIntoWild(x))", "all x.(NationalLobsterHatchery(x) -> ReleasesAnimalsIntoWild(x))", "all x y.((NationalLobsterHackery(x) & Animal(y)) -> ReleasesIntoWild(x,y))", "all x.(NationalLowerHatchery(x) -> ReleasesAnimalsIntoWild(x))", "all x y.((NationalLobsterHatchery(x) & Animal(y)) -> ReleasesIntoSwimming(x,y))", "all x y.((NationalLocksterHatchery(x) & Animal(y)) -> ReleasesIntoWild(x,y))", "all x y.((NationalLobsterHatchery(x) & Animal(y)) -> ReleasesIntoWild(x,y))", "all x y.((NationalLobsterHatchery(x) & Animal(y)) -> ReleasesIntoWild(x,Y))", "all x y.((NationalLobsterHatchery(x) & Animal(y)) -> ReleasesIntoWild(x,y))", "all x.(NationalLobsterHatchery(x) -> ReleasesIntoWild(x))", "all x.(NationalLobsterHatchery(x) -> ReleasesAnimalsIntoWild(x))", "all x y.((NationalLobsterHatchery(x) & Animal(y)) -> ReleasesIntoWild(x,y))", "all x y.((NationalLobsterHatchery(x) & Animal(y)) -> ReleasesIntoWild(x,y))", "all x y.((NationalLobsterHatchery(x) & Animal(y)) -> ReleasesIntoWild(x,y))", "all x.((NationalLlobsterHatchery(x) & Animal(y)) -> ReleasesIntoWild(x,y))", "all x.(NationalLobsterHatchery(x) -> ReleasesAnimalsIntoWild(x))"]}
{"id": "folio_train_1985", "nl": "Rhos Aelwyd F.C. is a Welsh football club.", "fol": "all x.(RhosAelwydFC(x) -> (IsFootballClub(x) & LocatedInPonciau(x) & IsWelshClub(x)))", "prediction": ["RhosAelwyd F.C. (WalesFootballClub))", "all x.((RhosAelwydF.C.(x) & WelshFootballClub(x)) -> FootballClub(x))", "Rhos Aelwyd F.C. is a Welsh FootballClub.", "All x.(RhosAelwydF.C.C.(WalesFootballClub(x) -> WelshFootballClub(x))", "(WalesFootballClub(rhos-aelwyd) & WelshFootballClub(rhos-aelwyd))", "all x.((RhosAelwydF.C.) -> FootballClub(x))", "(WalesFootballClub(RhosAelwyd) & WelshFootballClub(RhosAelwyd))", "all x.((RusAelwydF.C.(Rhos) & WelshFootballClub(x)) -> FootballClub(x))", "all x.((RhosAelwydF.C.) -> WelshFootballClub(x))", "all x.(RhosAelwydF.C.((WalesFootballClub)) -> IsWalesFootballClub(x))", "(WalesFootballClub(RhosAelwyd) & WelshFootball(RhosAelwyd))", "All x.((RhosAelwydF.C.) -> WelshFootballClub(x))", "all x.((Rus Aelwyd F.C.) -> FootballClub(x))", "(FootballClub(Rhos) & AelwydF.C.(Rhos) & Welsh(e)))", "all x y.((PrhosAelwyd F.C.(RhosAelwyd) & WelshFootballClub(y)) -> FoundedIn(x,y))", "All x.((RhosAelwydF.C.) -> WelshFootballClub(x))"]}
{"id": "folio_train_1986", "nl": "Rhos Aelwyd F.C. is the only club based in Ponciau. ", "fol": "all x.(LocatedInPonciau(x) <-> RhosAelwydFC(x))", "prediction": ["RhosAelwyd F.C. is the only club based in Ponciau.", "All x.((Club(x) & BasedInPonciau(x)) -> RhosAelwydF.C.", "all x.((Club(x) & BasedInPonciau(x)) -> RothAelwydF.C.", "all x.((Club(x) & BasedInPonciau(x)) -> RhosAelwydF.C.", "All x.(RhosAelwydF.C.(Club(x) & BasedInPonciau(x))", "all x.((Club(x) & BasedInPonciau(x)) -> RhosAelwydF.C.", "All x.((Club(x) & BasedInPonciau(x)) -> RhosAelwydF.C.", "All x.(RhosAelwydF.C.(Club(x) & BasedInPonciau(x))", "(Council(RhosAelwyd) & BasedInPonciau(Rhos))", "all x.((Club(x) & BasedInPonciau(x)) -> RhosAelwydF.C.", "Occasion(RhosAelwydF.C.)", "all x.(PonciauClub(x) -> RhosAelwydF.C.", "Club BasedInPonciau(club,rsa,ponciau) & Aelwyd(f) & BasedInSponciau(club))", "RhosAelwydF.C. is an all-new club in Ponciau (Formation(RosAelwyd) & BastsIn(RhosAelwydF.C.))", "all x.((Club(x) & BasedInPonciau(x)) -> RhosAelwydF.C.", "all x.(RhosAelwydF.C.(Club(x) & BasedInPonciau(x))"]}
{"id": "folio_train_1987", "nl": "The Premier Division was won in 2005\u201306 by a team from Ponciau. ", "fol": "all x.(WonPremierDivisionInSeason(x,Y2005) <-> LocatedInPonciau(x))", "prediction": ["(WinnedIn20052006(PonciauTeam) & inPremierDivision(PonciauTeam))", "all x y z.((FirstDividend(x) & Team(y) & Ponciau(z)) -> Won(x,y,z))", "all x.((Team(x) & PonciauTeam(x)) -> PremierDivisionWon(x,2005,06))", "all x y.((Team(x) & Ponciau(y)) -> PremierDividendWonIn20052006(x,y))", "all x y.((PremierDivision(x) & Team(y)) -> (Won(y,2005-2006) & Ponciau(y)))", "all x y.((Team(x) & Ponciau(y)) -> PremierDivisonWon(x,y))", "the Premier Division won in 2005\u201306 by Ponciau.", "all x.((TeamFromPonciau(x) & WonPremierDividend(2005)) -> PonciauWonFortnight(x,200506))", "all x y.((Team(x) & Ponciau(y)) -> WonPrimaryDividend(x,y))", "(LiderDividend(Vienna,2005) & Team(p) & FromPonciau(p))", "all x y.((Team(x) & Ponciau(y) & WonPosciau(x,y)) -> PremierDivision(x,y))", "all x y.((Team(x) & Ponciau(y)) -> (WonPrimaryDivisionIn200505(x,y) & WonPrimaryDivisionIn2006(x,y)))", "(SpoenciauShowdownArea(PremierDividence) & WonIn2005Season(Project))", "all x y z.((PremierDivision(x) & Team(y) & Ponciau(z)) -> (WonBy(y,x) & -WonBy(y,z)))", "(WinnedLawn(Ponciau), 2005\u201306)", "(WonIn2005(Polnicau) & FirstDivisions(Ponciau))"]}
{"id": "folio_train_1988", "nl": "The winner of the Premier Division in 2009\u201310 was promoted back to the Cymru Alliance.", "fol": "all x.(WonPremierDivisionInSeason(x,Y2009) -> PromotedToCymruAlliance(x))", "prediction": ["all x.((Winner(x) & PremierDividence(x) & 2009-10) -> PromotedToCymruAlliance(x))", "(all x.(Winner(x) -> PremierDividence(x)))", "ALL x y.((Winner(x) & PremierDividend(x) & 2009-2010) -> Champion(y))", "all x y.((Winner(x) & PremierDividence(x,y) & 2009-2009) & CymruAlliance(y)) -> Promoted(x,y))", "all x.((Winner(x) & PremierDivision(x) & 2009\u201310) -> PromotedToCymruAlliance(x))", "(WinnerPremierDividend(Winner,2009) & ChampionOfPremierDividend(Winner,2009)) & promotedToCymruAlliance(Winner,2009))", "all x.((WinnerLargerDividence(x) & 2009-2010) -> PromotedToCymruAlliance(x))", "all x y z.((Winner(x) & PremierDividence(y) & CymruAlliance(z)) -> PromotedTo(x,y,z))", "all x.((Winner(x) & PremierDividence(x) & 2009-10)) -> PromotedToCymruAlliance(x))", "all x y.((Winner(x) & PremierDividence(y) & 2009\u201310)) -> PromotedToCymruAlliance(x))", "(Winner(WinnerPrimaryDivision2009-10) PromotedToCymruAlliance(WINner(Winner,Division,Division))", "all x.((WinnerOfPremierDivision(x) & 2009\u201310) -> PromotedToCymruAlliance(x))", "(WinnerRecordDepthInFreshmanship(x,E) & AwardedToCymruAliaison(x))", "all x.((Winner(x) & PremierDividence(x) & 2009-10) -> CymruAlliance(x))", "all x y.((WinnerStopperInPrimaryDividence(x,y) & 2008/09) & PremierDividence(y) & CymruAlliance(y)) -> PromotedBack(x,y))", "all x.((Winner(x,2009) & PremierDivision(x) & PromotedToCymruAlliance(x)) -> Promoted(x))"]}
{"id": "folio_train_1989", "nl": "The Premier Division in 2009\u201310 was won by the same team that won in 2005-06. ", "fol": "all x.(WonPremierDivisionInSeason(x,Y2009) <-> WonPremierDivisionInSeason(x,Y2005))", "prediction": ["(Won by 2005-06-Team(a,B),C,R,A) & WonBy2005-06-Team(b)).", "(WinnedPrimaryDividendIn2009-10(WonByAnotherTeamIn2005-06) -> CompetedIn2005Season(RegainedByAnotherTeam(RegainedByAnotherTeam(RegainedByAnotherTeam(RegainedBy(2006Season)))", "(Same team as won Premier Division In 2009\u201310, 2005-06) & 2009-2010 (QualifiedFirstDividend(N) & No.05SecondDividend) & FinalDividence(N) & FinalDividend(Crumberland,2005-06)))", "all x y.((Team(x) & PremierDividend(y) & Winner(x,y)) -> WonDeclineInPrimaryDividend(y,2005,2006))", "(Won PremierDividenceIn2009-2010(team) & WonSameTeamIn20052006(team))", "all x y.((Team(x) & PremierDivision(x,y)) -> (WonIn(x,y) & WonIn(x,z) & WonIn(x,z)))", "((Team(TaskNumber(PartI) & WonIn2005-06)) -> (WindsPrimaryDividendIn2009\u201310)))", "(WonMostStarFormalDividends(Lisbon,Q2) & BecameWinnerForMeBirth(Z) & 2005-06-03-08.)", "all x y.((Team(x) & WonPremierDivision(x,y) & 2009\u201310) & (WinredInPatro(x,y) | WonInPatro(x,y))) -> WonPrimaryDivisionPrimary(x,y))", "((PrimaryDividend(2009) -> SpentByTeam(2009,2005)))", "(ClaimPlayal(09) & PremierDividend(09) & 200506) / WonLeadership(09))", "all x.((Team(x) & PremierDivision(x) & In(x,2009)) -> WonBy(x,2005,06))", "2006-06-26. Wins PremierDivision(09,2010) & WasWonIn2005To06(05,06))", "(-Same team that won Premier Division BackIn2005(-Seasons(-SameTeamAt2005(Season) At2005(Season)) & Won PremierDividendWinning(-SameTeamAt2005(s)) -> WinsFirstDividendIn2009(s))", "(WonPrimaryDividence2009-10) & WornByTeam(PrimaryDividence2005-06))", "(PremierDivision(09) & PremierDivision(09,02)) -> WonInPromo(09,05))"]}
{"id": "folio_train_1990", "nl": "Rhos Aelwyd F.C. won the 2005-06 Premier Division.", "fol": "all x.(RhosAelwydFC(x) -> WonPremierDivisionInSeason(x,Y2005))", "prediction": ["all x.((RhosAelwydF.C.(x) & PremierDivision(x,2005)) -> Stopped(x,2006))", "Rhos Aelwyd F.C. won PremierDivision(Rosaelwyd,Aelwyd) & PremierDivision(Rosaelwyd,2005))", "All x.(RhosAelwydF.C.(2005-06) -> WinsPrimaryDivision(x))", "Rhos Aelwyd F.C. won Premier Division 2005-06 & LocatedInTheHoughton(Aelwyd)", "(WonPremierDividence(RhosAelwyd) & PremierDividence(RhosChemF.C.))", "AelwydsF.C. Rhos (Championship(2005) | PremierDividenceLeague(2006)))", "RhosAelwyd F.C. won Premier Division 2005-06.", "Occupied by RhosAelwydF.C. & PremierDivision(Rose(r) & 2005-06(r))", "Rhos Aelwyd F.C. won Premier Division 2005-06.", "(WonMaksUp(Rhop,Division5) & PremierDivision(Rhos,Division6) & 2006.)", "Rhos Aelwyd F.C. won Premier Division 2005-06 & Premier Division 2006-07 & Premier Division 2005-06 & Premier Division 2005-06 & Premier Division 2006-07 & Premier Division 2005-06 & Premier Division 2006-08 & Premier Division 2005-06 & Premier Division 2006-07 & Premier Division 2007-08 & Premier Division 2010-03 & Premier Division 2007-02 & Premier Division 2008-02 & Premier Division 2006-03 & Premier Division 2014-03", "Rhos Aelwyd F.C. won Premier Division 2005-06 & IdentifiedInDiagonalGroup(RosAelwyd) F.C.", "RhosAelwyd F.C.(Rosa) won PremierDivision(c) 2005-06(a,n))", "Rhos Aelwyd F.C. won 2005-06 Premier Division.", "Aelwyd F.C.Rhos (1958) & PremierDividenceF.C.Won(In200506))", "Rhos Aelwyd F.C. won Premier Division(AltWood,2005-06)"]}
{"id": "folio_train_1991", "nl": "Rhos Aelwyd F.C. was promoted to the Cymru Alliance.", "fol": "all x.(RhosAelwydFC(x) -> PromotedToCymruAlliance(x))", "prediction": ["all x.((RhosAelwydF.C. & CymruAlliance(x)) -> Promoted(x,y))", "all x y.((RhosAelwydF.C.(x) & CymruAlliance(y)) -> PromotedTo(x,y))", "Rhos Aelwyd F.C. was promoted to the CymruAlliance.", "RhosAelwyd F.C. & PromotedToCymruAlliance(Ros,Elwyd & CymruAlliance(CymruAlliance))", "(PromotedToCymruAlliance(RhosAelwydF.C.))", "(PromotedToCymruAlliance(RhosAelwyd)", "Rhos Aelwyd F.C. was promoted to CymruAlliance.", "all x.(PromisedToCymruAlliance(x) -> RhosAelwydF.C.", "Rhos Aelwyd F.C. was promoted to CymruAlliance(r))", "All x.(RhosAelwydF.C.((PromotedToCymruAlliance(x)) -> RosAelwydF.C.(x)))", "all x.(RhosAelwydF.C.(RosAelwydF.C.) -> PromotedToCymruAlliance(x))", "(PromotedToCymruAlliance(RhosAelwydF.C) & Re-electedToCymruAlliance(RhosAelwydF.C))", "the CymruAlliance (PromotedToRhosAelwydF.C. )", "all x.((RhosAelwyd F.C. & CymruAlliance(x)) -> PromisedTo(x,y))", "all x.(PromotedToCymruAlliance(x) -> RhosAelwydF.C.", "all x.(RhosAelwydF.C.(*) -> (PromotedToCymruAlliance(x) & PromotedToCymruAlliance(x)))"]}
{"id": "folio_train_1992", "nl": "All OS are software.", "fol": "all x.(OperatingSystem(x) -> SoftwareType(x))", "prediction": ["all x.(OS(x) -> Software(x))", "all x.(OS(x) -> Software(x))", "all x.(OS(x) -> Software(x))", "all x.(OS(x) -> Software(x))", "all x.(OS(x) -> Software(x))", "all x.(OS(x) -> Software(x))", "all x.(OS(x) -> Software(x))", "all x.(OS(x) -> Software(x))", "all x.(OS(x) -> Software(x))", "all x.(OS(x) -> Software(x))", "all x.(OS(x) -> Software(x))", "all x.(OS(x) -> Software(x))", "all x.(OS(x) -> Software(x))", "all x.(OS(x) -> Software(x))", "all x.(OS(x) -> Software(x))", "all x.(OS(x) -> Software(x))"]}
{"id": "folio_train_1993", "nl": "All Mac are OS.", "fol": "all x.(MacOS(x) -> OperatingSystem(x))", "prediction": ["all x.(Mac(x) -> OS(x))", "all x.(Mac(x) -> OS(x))", "all x.(Mac(x) -> OS(x))", "all x.(Mac(x) -> OS(x))", "all x.(Mac(x) -> OS(x))", "all x.(Mac(x) -> OS(x))", "all x.(Mac(x) -> OS(x))", "all x.(Mac(x) -> OS(x))", "all x.(Mac(x) -> OS(x))", "all x.(Mac(x) -> OS(x))", "all x.(Mac(x) -> OS(x))", "all x.(Mac(x) -> OS(x))", "all x.(Mac(x) -> OS(x))", "all x.(Mac(x) -> OS(x))", "all x.(Mac(x) -> OS(x))", "all x.(Mac(x) | OS(x))"]}
{"id": "folio_train_1994", "nl": "An OS is either Mac or Windows.", "fol": "all x.(MacOS(x) | WindowsOS(x))", "prediction": ["all x.(OS(x) -> (Mac(x) | Windows(x)))", "all x.(OS(x) -> (Mac(x) | Windows(x)))", "all x.(OS(x) -> (Mac(x) | Windows(x)))", "all x.(OS(x) -> (Mac(x) | Windows(x)))", "all x.(OS(x) -> (Mac(x) | Windows(x)))", "all x.(OS(x) -> (Mac(x) | Windows(x)))", "all x.(OS(x) -> (Mac(x) | Windows(x)))", "all x.(OS(x) -> (Mac(x) | Windows(x)))", "all x.(OS(x) -> (Mac(x) | Windows(x)))", "all x.(OS(x) -> (Mac(x) | Windows(x)))", "all x.(OS(x) -> (Mac(x) | Windows(x)))", "all x.(Os(x) -> (Mac(x) | Windows(x)))", "all x.(OS(x) -> (Mac(x) | Windows(x)))", "all x.(Mac(x) | Windows(x))", "(exists x.(OS(x) & Mac(x)) | exists y.(OS(y) & Windows(y))))", "all x.(OS(x) -> (Mac(x) | Windows(x)))"]}
{"id": "folio_train_1995", "nl": "All Windows are convenient.", "fol": "all x.(WindowsOS(x) -> IsConvenient(x))", "prediction": ["all x.(Windows(x) -> Compelling(x))", "all x.(Windows(x) -> Convenient(x))", "all x.(Windows(x) -> Convenient(x))", "all x.(Windows(x) -> Convenient(x))", "all x.(Windows(x) -> Convenient(x))", "exists x.(Windows(x) & Convenient(x))", "all x.(Windows(x) -> Convenient(x))", "all x.(Windows(x) -> Convenient(x))", "all x.(Windows(x) -> Convenient(x))", "all x.(Windows(x) -> Convenient(x))", "all x.(Windows(x) -> Convenient(x))", "all x.(Windows(x) -> Convenient(x))", "all x.(Windows(x) -> Convenient(x))", "all x.(Windows(x) -> Convenient(x))", "all x.(Windows(x) -> Convenient(x))", "all x.(Windows(x) -> Convenient(x))"]}
{"id": "folio_train_1996", "nl": "All software has code.", "fol": "all x.(SoftwareType(x) -> IsCode(x))", "prediction": ["all x.(Software(x) -> HasCode(x))", "all x.exists y.(Software(x) & Code(y) & Has(x,y))", "all x.(Software(x) -> HasCode(x))", "all x.(Software(x) -> HasCode(x))", "all x.(Software(x) -> HasCode(x))", "all x.exists y.(Software(x) & Code(y))", "all x.(Software(x) -> HasCode(x))", "all x.(Software(x) -> HasCode(x))", "all x.(Software(x) -> HasCode(x))", "all x.(Software(x) -> HasCode(x))", "all x.(Software(x) -> HasCode(x))", "all x.(Software(x) -> HasCode(x))", "all x.(Software(x) -> HasCode(x))", "all x.(Software(x) -> HasCode(x))", "all x.(Software(x) -> HasCode(x))", "all x.(Software(x) -> HasCode(x))"]}
{"id": "folio_train_1997", "nl": "If something is convenient, then it is popular.", "fol": "all x.(IsConvenient(x) -> IsPopular(x))", "prediction": ["all x.((Convenient(x) & Popular(x)) -> Convenient(x))", "all x.(((Comfortable(x) & Popular(x)) -> Convenient(x))", "all x.((Convenient(x) & Popular(x)) -> EasyToBeWith(x))", "all x.((EasyToComfort(x) & Popular(x)) -> Convenient(x))", "all x.((Convenient(x) & Popular(x)) -> Convenient(x))", "all x.((Convenient(x) & Popular(x)) -> -(Convenient(x) & Popular(x)))", "all x.((Convenient(x) & Popular(x)) -> Fitting(x))", "all x.((Comfortable(x) & Popular(x)) -> Suitable(x))", "all x.((Convenient(x) & Popular(x)) -> Available(x))", "all x.((Convenient(x) & EasilyReady(x)) -> Popular(x))", "all x.((Convenient(x) & Popular(x)) -> Convenient(x))", "all x.((Convenient(x) & Popular(x)) -> AddedToList(x))", "all x.((Convenient(x) & Popular(x)) -> Popular(x))", "all x.((FastAndConvenient(x)) -> Popular(x))", "all x.(Comfortable(x) -> Popular(x))", "all x.((Comfortable(x) & Popular(x)) -> Convenient(x))"]}
{"id": "folio_train_1998", "nl": "Burger is a piece of code and a Mac.", "fol": "(IsCode(Burger) & MacOS(Burger))", "prediction": ["all x.(Baker(x) -> (Code(x) & Mac(x)))", "all x.(Berger(x) -> (Code(x) & Mac(x)))", "all x.(Bakery(x) -> (Code(x) & Mac(x)))", "all x.(Burger(x) -> (Code(x) & Mac(x)))", "all x.(Bakery(x) -> (Code(x) & Mac(x)))", "all x.(Burger(x) -> (Code(x) & Mac(x)))", "all x,y.(Burger(x) & Code(y) & Mac(y))", "all x.(Bakery(x) -> (Code(x) & Mac(x)))", "all x.(Burger(x) -> (Code(x) & Mac(x)))", "(Burger(BetweenCode(Berger) & Mac(Berger))", "(Code(Burger,Mac) & Code(Burger,Mac))", "all x.(Bakery(x) -> (Code(x) & Mac(x)))", "all x.(Burger(x) -> (CodePiece(x) & MacPiece(x)))", "all x.(Burger(x) -> (Code(x) & Mac(x)))", "all x.(Berger(x) -> (Code(x) & Mac(x)))", "all x.(Breader(x) -> (Code(x) & Mac(x)))"]}
{"id": "folio_train_1999", "nl": "PyTorch is either Windows and software, or neither Windows nor software.", "fol": "((WindowsOS(Pytorch) & SoftwareType(Pytorch) & -(-WindowsOS(Pytorch) & -SoftwareType(Pytorch))) | (-(WindowsOS(Pytorch) & SoftwareType(Pytorch)) & -WindowsOS(Pytorch) & -SoftwareType(Pytorch)))", "prediction": ["(exists x.(PyTorch(x) & Windows(x)) & -exists y.(Windows(y) & Software(z))))", "all x.(PyTorch(x) -> ((Windows(x) | Software(x)) | (-Windows(x) & Software(x)))))", "(exists x.(PyTorch(x) & Windows(x) & Software(x)) | -exists y.(PyTorch(y) & Software(y))))", "(all x.(PyTorch(x) -> WindowsAndSoftware(x)) | (-WINDOWS(x) & Software(x))))", "all x.(PyTorch(x) -> ((Windows(x) & Software(x)) | -Windows(x) & Software(x))))", "(exists x.(PyTorch(x) & Windows(x) & Software(x)) | -exists y.(Windows(y) & Software(y)))))", "exists x.(PyTorch(x) & (Windows(x) | Software(x)) | ((Windows(x) & Software(x)) & -Windows(x) & Software(x))))", "exists x.(PyTorch(x) & ((Window(x) & Software(x)) | -Window(x) & Software(x))))", "all x.(PyTorch(x) -> ((Windows(x) & Software(x)) | (-Windows(x) & Software(x)))))", "all x.(PyTorch(x) -> (Windows(x) & -(Windows(x) | Software(x)))))", "all x.(PyTorch(x) -> (Windows(x) & Software(x)) | -(Windows(x) & Software(x))))", "all x.(PyTorch(x) -> ((Windows(x) & Software(x)) | ((Windows(x) & Software(x))))))", "all x.(PyTorch(x) -> ((Windows(x) & Software(x)) | (-Windows(x) & Software(x)))))", "(all x.(PyTorch(x) -> (Windows(x) | Software(x))))", "all x.(PyTorch(x) -> (Window(x) | Software(x)) \u00bb (-Window(x) & Software(x))))", "(all x.(PyTorch(x) -> (Windows(x) & Software(x)) | (-Windows(x) & Software(x)))))"]}
{"id": "folio_train_2000", "nl": "Burger is popular.", "fol": "IsPopular(Burger)", "prediction": ["All x.(Berger(x) -> Popular(x))", "all x.(Berger(x) -> Popular(x))", "(Popular(Berger))", "(PopularBakery(Burger)", "-PopularBerger(0)", "(Popular(Bakery)", "(PopularBakery(Burger))", "(PopularBakery(Burger))", "(Popular(Bakery))", "(Popular(Berger,Bitter))", "(Popular(Bakery))", "Der Burger ist popul\u00e4r.", "PopularBakery(Burger)", "(Popular(Berger))", "(Popular(Berg))", "(PopularBrazil(burger))"]}
{"id": "folio_train_2001", "nl": "Burger is not popular.", "fol": "-IsPopular(Burger)", "prediction": ["(-Popular(Baker))", "-PopularBakery(Breakfast)", "-PopularBakery(Burger,y)", "exists x.(Burger(x) & -Popular(x))", "(-Popular(Bakery))", "(-PopularBakery(Burger))", "(NotPopular(burger)", "(-PopularBakery(burger)", "-PopularBakery(burger)", "(-Popular(Berger))", "(-Popular(Burger))", "the burger is notpopular.", "-PopularBakery(Burger)", "(-Popular(Burger))", "-Popular(Burger)", "all x.(Bread(x) -> -Popular(x))"]}
{"id": "folio_train_2002", "nl": "PyTorch is popular and has code.", "fol": "(IsPopular(Pytorch) & IsCode(Pytorch))", "prediction": ["(Popular(PyTorch) & HasCode(PyTorch))", "(Popular(PyTorch) & HasCode(PyTorch))", "(Popular(PyTorch) & HasCode(PyTorch))", "(Popular(PyTorch) & HasCode(PyTorch))", "all x.(PyTorch(x) -> (Popular(x) & HasCode(x)))", "(Popular(PyTorch) & HasCode(PyTorch))", "(Popular(PyTorch) & HasCode(PyTorch))", "all x.(PyTorch(x) -> (Popular(x) & HasCode(x)))", "all x.(PyTorch(x) -> (Popular(x) & HasCode(x)))", "all x.(PyTorch(x) -> (Popular(x) & HasCode(x)))", "all x.(PyTorch(x) -> (Popular(x) & HasCode(x)))", "all x.(PyTorch(x) -> (Popular(x) & HasCode(x)))", "PyTorch ispopular(*) & HasCode(x))", "all x.(PyTorch(x) -> (Popular(x) & HasCode(x)))", "(Popular(PyTorch) & HasCode(PyTorch))", "(Popular(PyTorch) & HasCode(PyTorch))"]}
{"id": "folio_train_2003", "nl": "PyTorch is not popular and has code.", "fol": "(-IsPopular(Pytorch) & IsCode(Pytorch))", "prediction": ["-Popular(PyTorch) & HasCode(PyTorch))", "exists x.(PyTorch(x) & -Popular(x) & HasCode(x))", "all x.(PyTorch(x) -> (-Popular(x) & HasCode(x)))", "(-Popular(PyTorch) & HasCode(PyTorch))", "all x.(PyTorch(x) -> (-Popular(x) & HasCode(x)))", "(-Popular(PyTorch) & HasCode(PyTorch))", "all x.(PyTorch(x) -> (-Popular(x) & HasCode(x)))", "(-Popular(PyTorch) & HasCode(PyTorch))", "(-Popular(PyTorch) & HasCode(PyTorch))", "(-Popular(PyTorch) & HasCode(PyTorch))", "PyTorch is notpopular(e) & HasCode(p))", "(-Popular(PyTorch) & HasCode(PyTorch))", "(-Popular(PyTorch) & HasCode(PyTorch))", "-Popular(PyTorch) & HasCode(PyTorch))", "all x.(PyTorch(x) -> (-Popular(x) & HasCode(x)))", "(-Popular(PyTorch) & HasCode(PyTorch))"]}
{"id": "folio_train_2004", "nl": "Roads are made of either concrete or asphalt.", "fol": "all x.(IsRoad(x) -> (IsMadeOfConcrete(x) | IsMadeOfAsphalt(x)))", "prediction": ["all x.(Road(x) -> (MadeOf(x,Cement) | MadeOf(x,Asphalt)))", "all x.(Road(x) -> (MadeOfConcrete(x) | MadeOfAsphalt(x)))", "all x.(Road(x) -> (MadeOfConcrete(x) | MadeOfAsphalt(x)))", "all x.(Road(x) -> (Fast(x,Cement) | MadeOf(x,Asphalt)))", "all x.(Road(x) -> (MadeOfConcrete(x) | MadeOfAsphalt(x)))", "all x.(Road(x) -> (MadeOfConcrete(x) | MadeOfAsphalt(x)))", "all x.(Road(x) -> (MadeOfConcrete(x) | MadeOfAsphalt(x)))", "all x.(Road(x) -> (MadeOfConcrete(x) | MadeOfAsphalt(x)))", "all x.(Road(x) -> (MadeOfConcrete(x) | MadeOfAsphalt(x)))", "all x.(Road(x) -> (MadeOf(x,Cotton) | MadeOf(x,Asphalt)))", "all x.(Road(x) -> (MadeOfConcrete(x) | MadeOfAsphalt(x)))", "all x.(Road(x) -> (MadeOfCement(x) | MadeOfAsphalt(x)))", "all x y.((Road(x) & (Concrete(y) | Asphalt(y))) -> MadeOf(x,y))", "all x.(Road(x) -> (MadeOf(x,cemented) | MadeOf(x,asphalt)))", "(MadeOf(road(road) & Cement(road)) | MadeOf(road))", "all x.(Road(x) -> (MadeOfConcrete(x) | MadeOfAsphalt(x)))"]}
{"id": "folio_train_2005", "nl": "Roads made of concrete last longer than roads made with asphalt.", "fol": "all x y.((IsRoad(x) & IsMadeOfConcrete(x) & IsRoad(y) & IsMadeOfAsphalt(y)) -> LastsLongerThan(x,y))", "prediction": ["all x y.((Road(x) & Road(y) & MadeOfConcrete(x) & MadeWithAsphalt(y)) -> LastsLonger(x,y))", "all x y.((Road(x) & Road(y) & MadeOfConcrete(x) & MadeOfAsphalt(y)) -> LastsLonger(x,y))", "all x y z.((Road(x) & Road(y) & Asphalt(z)) -> (MadeOf(x,y) & LastsLonger(x,z)))", "all x y.((Road(x) & Road(y) & MadeOfConcrete(x)) -> LastsLonger(x,y))", "all x.((Road(x) & MadeOfConcrete(x) & MadeOfAsphalt(x)) -> LastsLonger(x))", "all x.((Road(x) & MadeOfConcrete(x) & MadeOfAsphalt(x)) -> LastsLonger(x))", "all x y.((Road(x) & Road(y) & MadeOfConcrete(x) & MadeOfAsphalt(y)) -> LastsLonger(x,y))", "all x.((Road(x) & MadeOfConcrete(x) & MadeOfAsphalt(x)) -> LastsLonger(x))", "all x y.((Road(x) & Road(y) & Asphalt(z)) -> LastsLonger(x,y,z))", "all x y.((Cement Road(x) & AsphaltRoad(y)) -> LongerLasting(x,y))", "all x.((Road(x) & MadeOfConcrete(x) & MadeOfAsphalt(x)) -> LastsLonger(x))", "all x.((Road(x) & MadeOfConcrete(x) & MadeWithAsphalt(x)) -> LongerLasting(x))", "all x.((Road(x) & MadeOfConcrete(x)) -> LastsLonger(x))", "all x.((Road(x) & MadeOfConcrete(x) & MadeOfAsphalt(x)) -> LastsLonger(x))", "all x.((Road(x) & MadeOfConcrete(x) & MadeOfAsphalt(x)) -> LastsLonger(x))", "all x y z.((Road(x) & Road(y) & Asphalt(z)) -> (MadeOfConcrete(x) & LastsLonger(x,y,z)))"]}
{"id": "folio_train_2006", "nl": "Roads made of asphalt are smoother than roads made of concrete.", "fol": "all x y.((IsRoad(x) & IsMadeOfAsphalt(x) & IsRoad(y) & IsMadeOfConcrete(y)) -> IsSmootherThan(x,y))", "prediction": ["all x.((Road(x) & MadeOfAsphalt(x)) -> SmootherThanCabinet(x))", "all x y.(((Road(x) & Road(y) & Asphalt(x)) -> SmootherThanConcrete(y))", "all x y.((Road(x) & Road(y) & Asphalt(x) & Concrete(y)) -> Smoother(x,y))", "all x y.((Road(x) & Asphalt(x) & Concrete(y)) -> Smoother(x,y))", "all x y.((Road(x) & Road(y) & MadeOfAsphalt(x)) -> SmootherThanConcrete(y))", "all x y.((Road(x) & Road(y) & MadeOfAsphalt(x) & MadeOfConcrete(y)) -> Smoother(x,y))", "all x y.((Road(x) & Road(y) & MadeOfAsphalt(x)) -> Smoother(x,y))", "all x.((Road(x) & MadeOfAsphalt(x)) -> SmootherThanConcrete(x))", "all x y.((Road(x) & Road(y) & MadeOfAsphalt(x) & MadeOfConcrete(y)) -> Smoother(x,y))", "all x y.((Road(x) & Road(y) & MadeOfAsphalt(x) & MadeOfConcrete(y)) -> Smoother(x,y))", "all x y.((Road(x) & Asphalt(a) & Concrete(c)) -> Smoother(x,a))", "all x y.((Road(x) & Road(y) & MadeOfAsphalt(x)) -> SmootherThanConcrete(x))", "all x y.((Road(x) & Road(y)) -> Smoother(x,y))", "all x y.((Road(x) & Road(y) & MadeOf(x,Asphalt)) -> SmootherThan(y,Concrete))", "all x.((Road(x) & Asphalt(x)) -> SmootherThan(x,Concrete(x))", "all x y.((Road(x) & Asphalt(y)) -> Smoother(x,y))"]}
{"id": "folio_train_2007", "nl": "Everyone prefers the smoother of two roads. ", "fol": "all z.((IsRoad(x) & IsRoad(y) & IsSmootherThan(x,y)) -> PrefersRoad(z,x))", "prediction": ["all x y z.((Road(x) & Road(y) & Road(z) & Paves(x,y,z)) -> Smoother(x,y,z))", "all x.(PrefersFlexierOfTwoRoads(x) -> SmootherOfTwoRoads(x))", "all x.(PrimeRoad(x) -> SmootherRoad(x))", "all x.(PrefersSmoother(x,2)) -> Road(x,6))", "all x.((Road(x) & Road(y)) -> Smoother(x,y))", "all x.(PrefersSmoother(x,2))", "all x.((Road(x) & Road(y)) -> Smoother(x,y))", "all x.(PrefersSmootherOfTwoRoads(x) -> SmootherTwoRoads(x))", "all x.(PrefersSmootherCrossroad(x,2))", "all x.(PrefersRoadSmoother(x,2)) -> PeoplePaceRoadSmoother(x,2))", "all x.(PrefersSmootherOfTwoRoads(x) -> EveryonePrefersSmootherOfTwoRoads(x))", "all x.(FavorsSmootherRoad(x) -> SmootherRoad(x))", "all x y.((Road(x) & Road(y,x)) -> Smoother(x,y))", "all x.(PrefersSmootherTwoRoads(x) -> SmootherTwoRoads(x))", "all x.((Road(x) & Road(x)) -> Pleasing(x))", "all x.(PrefersShaper(x,2) -> Smoother(x))"]}
{"id": "folio_train_2008", "nl": "Road one is made of concrete and Road two is made of asphalt.", "fol": "(IsRoad(One) & IsMadeOfConcrete(One) & IsRoad(Two) & IsMadeOfAsphalt(Two))", "prediction": ["all x y.((Road(x) & Road(y)) -> (MadeOfConcrete(x) | MadeOfAsphalt(y)))", "((Road1) & Road2(Road2)) -> MadeOfConcrete(Road1)) & (Road3) -> MadeOfAsphalt(Road2)))", "all x y.((Road(x) & Road(y)) -> (MadeOfConcrete(x) & MadeOfAsphalt(y)))", "all x.(Road1(x) -> (MadeOfConcrete(x) & MadeOfAsphalt(x)))", "(all x.(RoadOne(x) -> MadeOfConcrete(x)) & all y.(Road2(y) -> MadeOfAsphalt(y)))", "(all x.(Road1(x) -> MadeOfConcrete(x)) & all y.(Road2(y) -> MadeOfAsphalt(y)))", "(all x.(Road(x) -> MadeOfConcrete(x)) & all y.(Road(y) -> MadeOfAsphalt(y)))", "(all x y.(RoadOne(x) -> MadeOfConcrete(x)) & (Road(y) -> MadeOfAsphalt(y)))", "(all x.(RoadOne(x) -> MadeOfConcrete(x)) & (Road2(x) -> MadeOfAsphalt(x)))", "(all x.(Road(x) -> MadeOfConcrete(x)) & all y.(Road(y) -> MadeOfAsphalt(y)))", "(MadeOfConcrete(Road1) & MadeOfAsphalt(Road2))", "-((RoadOne(Road1) & Road(Road2)) -> MadeOfConcrete(Road1) & Road(Road3) - MadeOfAsphalt(Road2)))", "(all x.(RoadOne(x) -> MadeOfConcrete(x)) & all y.(Road2 -> MadeOfAsphalt(y)))", "(all x.(Road1) -> MadeOfConcrete(x)) & all y.(Road2) -> MadeOfAsphalt(y)))", "(all x.(Ruddot(x) -> MadeOfConcrete(x)) & (RoadDouble(x) -> MadeOfAsphalt(x)))", "(all x.(Road1(x) -> MadeOfConcrete(x)) & all y.(Road2(y) -> MadeOfAsphalt(y)))"]}
{"id": "folio_train_2009", "nl": "Road one will last longer than Road two", "fol": "LastsLongerThan(One,Two)", "prediction": ["all x y.((RoadOne(x) & RoadSix(y)) -> LastsLessThan(x,y))", "(LongerRoad(Road1) and LongerRoad(Road2))", "all x y z.((RoadOne(x) & Road(y) & Road(z)) -> Duration(x,y,z))", "all x y.((RoadOne(x) & Road(y) & Road(y)) -> LastsLonger(x,y))", "all x y z.((RoadOne(x) & Road(y) & Road(z)) -> (LastLongerThan(x,y)))", "all x y.((RoadOne(x) & RoadTwo(y)) -> LastsLonger(x,y))", "all x y z.((RoadOne(x) & Road(y) & Road(z)) -> (LongerLivingRoad(x,y) & LongerLivingRoad(z,y)))", "(LastLongerRoadOne(Road1) & Last LongerRoadTwenty(Road2))", "(LongerRoadOne(Road1) & LongerRoad2(Road1))", "all x y z.((RoadOne(x) & Road(y) & Road(z)) -> LastsLonger(x,y,z))", "all x y.((RoadOne(x) & Road(y)) -> LastsLongerThan(x,y))", "all x.(RoadOne(x) -> RoadOneOld(x))", "(LastsLonger(RoadOneThanRoadTwo(RoadOne) & LastsLonger(RoadTwo))", "all x y.((RoadOne(x) & Road(y)) -> LastsLonger(x,y))", "(LongerRoadOne(Road1),Road2))", "LongerLastingRoadOneRoad2RoadAndRoadOneRoadOneRoadOneRoadOneRoadOneRoad2Road1Road2Road2. (RoadOneRoadOneRoad2Road1))"]}
{"id": "folio_train_2010", "nl": "Road two is not smoother than Road one.", "fol": "-IsSmootherThan(Two,One)", "prediction": ["All x y.((Road(x) & Road(y)) -> -Smoother(x,y))", "Road Two -SmootherThanRoadOne(Road2)", "Road Two & Road One -Smoother(Road2)", "Road Two & Road One -SmootherThan(Road2)", "Road Two & Road One -SmootherThanRoadOne(Road2))", "all x y.(Plougher(x,y) -> RoadTwo(x,y))", "Road two is notSmootherThanRoadOne(Road2)", "NullerRoadTwo(Road1)", "Roadtwo(Road1) & RoadOne(Road2) & -Smoother(Road2))", "Road two is notSmootherThan(Road1)", "(-SmootherThanRoad(Road2))", "Roadtwo. (nonsmoother(Road1) & RoadOne(Road2))", "(-SmootherThan(Road2)(Road1))", "-SmootherThanRoadTwo(Road1)", "-(Broader(Road2) & RoadOne(Road2))", "-SmootherThanRoadTwo(Road1)"]}
{"id": "folio_train_2011", "nl": "John prefers Road two.", "fol": "PrefersRoad(John,Two)", "prediction": ["John prefersRoad Two.", "John prefersRoadTwo(John)", "John prefers Road Two.", "(Prefers(John,Road1))", "(PrefersRoad2(John))", "all x.(John(x) -> RoadSix(x))", "John prefers Road Two.", "(PrefersRoad2(Jonathan))", "John prefersRoadTwo.", "John prefers Road Two.", "(PrefersRoad-2(John))", "John prefersRoadTwo.", "John prefersRoadTwo(John)", "(PrefersRoadTwo(John))", "- prefersRoadTwo(John,Red,Train))", "(John,Road2,1)"]}
{"id": "folio_train_2012", "nl": "Camp Davern is a traditional summer camp for boys and girls.", "fol": "(IsTraditionalSummerCamp(Campdavern) & IsForBoysAndGirls(Campdavern))", "prediction": ["campers(CampDAvern) \u2013 (Traditional(Camp,Birds) & Traditional(Camp,Girls)))", "all x.(CampDavarn(x) -> (ClassicalSummerCamp(x) & ForBoys(x) & ForGirls(x)))", "all x.((Camp(x) & Toddler(x)) -> (ForBirds(x) | ForGirls(x)))", "all x.(CampDavern(x) -> (TraditionalSummerCamp(x,Boys) & TraditionalCamp(x,Girls)))", "all x.(CampDavern(x) & TraditionalSummerCamp(x))", "all x.(CampDavern(x) -> (TraditionalSummerCamp(x) & SuitableForBoys(x) & SuitableFor(x,Girls)))", "all x.(CampDaven(x) -> (TraditionalSummerCamp(x) & ForBoys(x) & ForGirls(x)))", "all x y z w.((Camp(x) & Camp(y) & Camp(z) & Boy(w)) -> (TraditionalSummerCamp(x,y,z) & Girl(w)))", "all x.((Camp(x) & ClassicSoulCamp(x)) -> ForBoysAndGirls(x))", "all x y.((Camp(x) & Camp(y)) -> (Historical(x,y) & for(x,y)))", "all x.((Camp(x) & TraditionalSocialClub(x) & ForBoys(x) & ForGirls(x)) -> Camp Davern(x))", "all x.(CampDarn(x) -> (TraditionalSummerCamp(x) & ForBoys(x) & ForGirls(x)))", "all x.(CampDavern(x) -> (SummerCamp(x) & ForBirds(x) & ForGirls(x)))", "all x.(Camp(x) -> (HistoricalSummerCamp(x) & (Boys(x) | Girls(x))))", "all x.(CampDavern(x) -> (TraditionalSummerCamp(x) & ForBirds(x) & For(x For(x For(x) & For(x For(x))))", "all x y.((Camp(x) & Camp(y) & Boy(z) & Girl(z)) -> Traditional(x,y,z))"]}
{"id": "folio_train_2013", "nl": "Camp Davern was established in the year 1946.", "fol": "EstablishedInYear(Campdavern,Year1946)", "prediction": ["Das Camp Davern, & EstablishedIn(CampDatarn,46)", "all x.(CampDavern(x) -> EstablishedInSummerSue(x,Suivue,Suivue))", "Camp Davern was established in the year 1946.", "(SettledIn(CampDavern,Supply46) & FoundedIn(CampDavern,Supply46))", "(LastSupreme(Camp_Davern) & CreatedIn(Camp) & Succeeds(Camp) & EstablishedIn(Camp) & AssembledIn(Camp) & FoundedIn(Camp) & EstablishedIn(Camp) & EstablishedIn(Camp) & EstablishedIn(Camp) & AssembledIn(Camp) & EstablishedIn(Camp))", "(SettledInSummer(CampDavern) & FoundedIn(CampDavern,SupplementSue 1946))", "Camp Davern was established in the year 1946.", "Camp Davern was established in the year 1946.", "Camp Davern was established in 1945.", "FoundedInSupplement46(CampDarn)", "All x.(CamelDawarn(x) -> EstablishedInSuffrage(x))", "((CampDavern(camp) & EstablishedInSuffivue(Camp)) -> InSufieuvered(Camp))", "Camp Davern wurde im Jahre 1946 errichtet.", "all x.(CampDavern(x) -> EstablishedInEngland(x,46))", "Das Camp Davern wurde in 1946 gegr\u00fcndet.", "(exists x.(CampDavid(x) & EstablishedIn(x,Suivion)))"]}
{"id": "folio_train_2014", "nl": "Camp Davern was operated by the YMCA until the year 2015.", "fol": "OperatedByYMCAUntilYear(Campdavern,Year2015)", "prediction": ["all x.(CampDavern(x) -> OperatedByYMCAUntilFall2015(x))", "All x y.((CampDavern(x) & YMCA(y)) -> OperatedBy(x,y))", "all x y z.((CampDavern(x) & YMCA(y) & Year(z)) -> OperatedBy(x,y,z))", "all x y z.((CampDavern(x) & YMCA(y) & Year(z)) -> OperatedBy(x,y,z))", "all x y.((CampDavern(x) & YMCA(y)) -> OperatedUntil(x,y))", "(OperatedByYMCA(Camp Davern,2016,2016))", "Camp Davern operated by the YMCA until the year 2015 (yoc.-2011&OperatedByYMCA(x,y)))", "all x y.((CampDavern(x) & YMCA(y)) -> OperatedUntilBefore(x,y))", "All x y z.((CampDavern(x) & YMCA(y) & Year(z)) -> OperatedBy(x,y,z))", "all x.((Camp Davern(x) & OperatedByYMCA(x)) -> Year2015(x))", "(all x y z.(CampDavern(x) -> OperatedByYMCA(x,y) & 2000(y)))", "All x.(CampDavern(x) -> OperatedByYMCA(x))", "All x.(CampDarern(x) -> OperatedByYMCA(x))", "All x y.((CampDavern(x) & YMCA(y)) -> Operated(x,y))", "all x y.((CampDavern(x) & YMCA(y)) -> OperatedUntilTheYear(x,y))", "all x.(CampDavern(x) -> OperatedByYMCA(x))"]}
{"id": "folio_train_2015", "nl": "Camp Davern is one of Ontario's oldest summer camps.", "fol": "IsOneOfOldestSummerCamps(Campdavern,Ontariosoldestsummercamps)", "prediction": ["LessThan-Lifetime(Camp Davern,Ontario)", "Camp Davern is one of Ontario's oldest summer camps.", "all x.(CampDavern(x) -> OntariosOldestSummerCamp(x))", "all x.(SummerCamp(x) -> CampTheVawern(x))", "is one of Ontario's oldest summer camps.", "Located in the southeastern Ontario region, Camp Davern is one of Ontarios oldest summer camps.", "all x.((Camp Davern(x) & OntariosOldestSummerCamp(x)) -> EstablishedIn1976(x))", "Lake Ontario - OldestSummerCamp(x)", "all x.(CampDavern(x) -> LessThanOldSummerCamp(x))", "all x.(Camp Davern(x) -> OntariosOldestSummerCamps(x))", "All x.(Camp(x) -> (OntariosOldestSummerCamp(x) & CampDarn(x)))", "all x.(CampDavern(x) -> (OldestSoilCamp(x) & InOntario(x)))", "In Ontario, Camp Davern is one of Ontario's oldest summer camps (all x y.((Camp(x) & Camp(y))) -> SummerCamp(x,y))", "all x y.((Camp(x) & CampDavern(y)) -> OntariosOldest(x))", "all x y.((Camp(x) & CampDavern(y)) -> OntariosOldest(x,y))", "all x.((CampDavern(x) & Ontario(x)) -> OldestSummerCamp(x))"]}
{"id": "folio_train_2016", "nl": "One of Ontario's oldest summer camps is a traditional summer camp for boys and girls.", "fol": "exists x.(IsOneOfOldestSummerCamps(x,Ontariosoldestsummercamps) & IsTraditionalSummerCamp(x) & IsForBoysAndGirls(x))", "prediction": ["all x.((OntarioSummerCamp(x) & Traditional(x,boys) & Traditional(x,girls)) -> SummerCamp(x,girls))", "all x.((Camp(x) & CurrentlyOntariosDeadestSoulCamp(x)) -> (TerminalSummerCamp(x) | ForBirdsAndGirls(x)))", "all x.((OldestSummerCamp(x) & TraditionalSummerCamp(x)) -> (ForBandits(x) | ForGirls(x)))", "all x.((SummerCamp(x) & OldestOntarioClubs(x)) -> (TraditionalCamp(x) & ForBoys(x) & ForGirls(x)))", "all x y.((SummerCamp(x) & OntariosOldest(x)) -> (Traditional(x,y) & ForBoys(y) & ForGirls(y)))", "all x.((Camp(x) & Oldest(x)) -> (TraditionalSummerForBirds(x) & TraditionalSummerForGirls(x)))", "all x.((OntariosOldestSummerCamp(x) & TraditionalSummerCamp(x) & ForBirdsAndGirls(x)) -> AncientSummerCamp(x))", "all x.((OldestSummerCamp(x) & ForBoys(x) & ForGirls(x)) -> TraditionalSummerCamp(x))", "all x.((Camp(x) & OldestTorontoSummer(x)) -> TraditionalSummerCamp(x))", "all x.((SummerCamp(x) & OntariosOldest(x)) -> (Traditional(x,boys) | Traditional(x,girls)))", "all x.((SummerCamp(x) & TraditionalSocialCamp(x)) -> (ForBoys(x) | ForGirls(x)))", "all x.((LessThanOlderSummerCamp(x) & (ForBoys(x) | ForFoys(x)) & ForBirds(x)) -> TraditionalSummerCafe(x))", "all x.((OldestOntarioSummerCamp(x) & TraditionalSummerCamp(x)) -> ForBodiesAndThanSheels(x))", "all x.((OntarioSummerCamp(x) & Oldest(x)) -> (TraditionalSummerCamp(x) & ForBoys(x) & ForGirls(x)))", "all x.((OntarioSummerCamp(x) & Traditional(x) & ForBoys(x) & ForGirls(x)) -> Oldest(x))", "all x.((OntarioSummerCamp(x) & TraditionalSummerCamp(x)) -> (Birds(x) | Girls(x)))"]}
{"id": "folio_train_2017", "nl": "A traditional summer camp for boys and girls was operated by the YMCA until the year 2015.", "fol": "exists x.(IsTraditionalSummerCamp(x) & IsForBoysAndGirls(x) & OperatedByYMCAUntilYear(x,Year2015))", "prediction": ["all x y.((Club(x) & SummerCamp(y) & OperatedByYMCA(x,y)) -> (BoysAndGirls(y) | Girls(x)))", "all x.(TraditionalSummerCamp(x) -> (OperatedByYMCA(x) & UpTo(x,2015)))", "all x y.((SummerCamp(x) & Traditional(x) & ForBodies(x) & -ForGirls(y)) -> OperatedByYMCA(x,y))", "all x y.((Camp(x) & TraditionalSummerCamp(x) & ForBirdsAndGirls(x)) -> OperatedByYMCAUntil(y,2015))", "all x y z.((SummerCamp(x) & Boys(y) & Girls(z) & OperatedByYMCA(x,y)) -> OperatedUntilYear2015(x,y,z))", "all x y.((Camp(x) & (Boys(y) | Girls(y))) -> OperatedByYMCA(x,y))", "all x.((Camp(x) & TraditionalSummerCamp(x) & OperatedByYMCA(x)) -> (BildrenAndGirls(x) & YMCA(y) & YMCA(z) & Year15(z)))", "all x y z.((TerminatedCamp(x) & SummerCamp(y) & Boys(z)) -> OperatedByYMCA(x,y))", "all x.((Camp(x) & YMCA(x) & -(Camp(x,y) | SummerCamel(y)))) -> OperatedBy(x,y))", "all x y.((SummerCamp(x) & (Boys(y) | Girls(y))) -> OperatedByYMCA(x,y))", "all x y z.(((Camp(x) & SummerClub(y) & Year(z)) -> OperatedByYMCA(x,y,z))", "all x y z.((Camp(x) & Camp(y) & Year(z)) -> (TraditionalSummerCamp(x,y,z) & OperatedByYMCA(y,z)))", "all x y z.((Camp(x) & SummerCamp(y) & YMCA(z) & (Children(z) | Girls(z))) & OperatedBy(x,y,z)) -> NoHissMap (y,z)))", "all x y.((SummerCamp(x) & YMCA(y) & OperatedTo(y,an)) -> (For(x,y) & For(x,y)))", "all x y z.((SummerCamp(x) & Traditional(x) & Boy(y) & Girl(z) & OperatedByYMCA(x,y) & Year 2015(x)) -> OperatedByYMCA(x))", "all x.((Camp(x) & TraditionalSummerCafe(x) & YMCA(y)) -> OperatedUntilYear2015(x,y))"]}
{"id": "folio_train_2018", "nl": "Camp Davern was established in 1989.", "fol": "EstablishedInYear(Campdavern,Year1989)", "prediction": ["all x.(CampDavern(x) -> EstablishedInJahr89(x))", "Der Camp Davern wurde in 1989 gegr\u00fcndet.", "Camp Davern in Fort Lauderdale, FL - EstablishedIn(Camp Davern, 1989)", "the Camp Davern was established in 1989.", "(CamelDavern(Camp) & EstablishedIn(Camp,1989))", "Camp Davern was established in 1989.", "Der Camp Davern wurde 1989 errichtet.", "Camp Davern, established in 1989.", "exists x.(CampDudwman(x) & EstablishedIn(x,89))", "(EstablishedIn(CampDavern,89))", "Camp Davern wurde im Jahre 1989 etablished.", "Camp Davern was enacted in 1989.", "Camp Davern & EstablishedInMunch(Camp,89)", "Camp Davern & EstablishedIn89.", "Camp Davern was established in 1989.", "Camp Davern was established in 1989."]}
{"id": "folio_train_2019", "nl": "If people publish journals, then they do not work in the entertainment industry.", "fol": "all x.(PublishesJournals(x) -> -WorksInEntertainmentIndustry(x))", "prediction": ["all x.exists y.((PublishesJournal(x) & EntertainmentIndustry(y) & -WorksIn(x,y)) -> -At(x,y))", "all x.(PublishesJournals(x) -> -WorksInEntertainment(x))", "all x.(PublishEditions(x) -> -WorksInEntertainmentIndustry(x))", "exists x.(PublishesJournals(x) & -WorksInEntertainmentIndustry(x))", "all x.(PublishesJournals(x) -> -WorksInEntertainmentIndustry(x))", "all x.(PublishesJournals(x) -> -WorksInEntertainmentIndustry(x))", "all x.(PublishesJournals(x) -> -EntertainmentWorkingInIndustry(x))", "all x.(PublishesJournals(x) -> -WorksInEntertainmentIndustry(x))", "all x.(PublishesJournals(x) -> -WorksInEntertainmentIndustry(x))", "all x.(PublishesJournals(x) -> -EntertainmentIndustry(x))", "all x.(PublishesJournals(x) -> -WorksInEntertainmentIndustry(x))", "all x.(PublishJournal(x) -> -EntertainmentIndustry(x))", "all x.(PublishesJournals(x) -> -EntertainmentIndustry(x))", "all x.(PublishJournals(x) -> -EntertainmentIndustry(x))", "all x.((PublishesJournals(x)) -> -DevilInEntertainment(x))", "all x.(PublishesJournals(x) -> -WorksInEntertainment(x))"]}
{"id": "folio_train_2020", "nl": "All people who are award-winning novelists publish journals.", "fol": "all x.(IsAwardWinningNovelist(x) -> PublishesJournals(x))", "prediction": ["all x.(AwardWinningNovelist(x) -> PublicationsJournals(x))", "all x.(AwardWinningNovelist(x) -> PublicsJournals(x))", "all x.((Person(x) & AwardWinningNovelist(x)) -> PublicsJournal(x))", "all x.(AwardWinningNovelist(x) -> PublishesJournals(x))", "all x.(AwardWinningNovelist(x) -> PublicsJournal(x))", "all x.((Person(x) & AwardWinningNovelist(x)) -> PressesJournals(x))", "all x.((Person(x) & AwardWinningNovelist(x)) -> PublisesJournals(x))", "all x.((Person(x) & AwardWinningNovelist(x)) -> PublicsJournals(x))", "all x.((Person(x) & AwardWinningNovelist(x)) -> BooksJournals(x))", "all x.((Person(x) & AwardWinningNovelist(x)) -> PressesJournals(x))", "all x.((Person(x) & AwardWinningNovelist(x)) -> PublicsJournals(x))", "all x.((Person(x) & AwardWinningNovelist(x)) -> PublicsJournals(x))", "all x.((Person(x) & AwardWinningNovelist(x)) -> PublicizesJournals(x))", "all x.((AwardWinningNovelist(x) & AwardWinningNovelist(x)) -> PublicationsJournals(x))", "all x.((Person(x) & AwardWinningNovelist(x)) -> PublishersJournals(x))", "all x.(AwardWinningNovelist(x) -> PublicsJournal(x))"]}
{"id": "folio_train_2021", "nl": "People either work in the entertainment industry or are highly acclaimed in their profession.", "fol": "all x.(WorksInEntertainmentIndustry(x) | IsHighlyAcclaimed(x))", "prediction": ["all x.(Person(x) -> (WorksInEntertainment(x) | HighlyAcclaimedInProfession(x)))", "all x.((Person(x) & (WorksInEntertainment(x) | HighlyAcclaimedInProfession(x))) -> HighlyAcclaimedInProfession(x))", "all x.((Person(x) & (WorksInEntertainment(x) | HighlyAcclaimedInProfession(x))) -> (WorksInEntertainment(x) | HighlyAcclaimedInProfession(x)))", "all x.((Person(x) & WorkingInEntertainment(x)) | HighlyAcclaimed(x))", "all x.((Person(x) & (WorksInEntertainmentIndustry(x) | HighlyAcclaimed(x))) -> AcclaimedInProfession(x))", "all x.(People(x) -> (WorkInEntertainment(x) | HighlyAcclaimedInProfession(x)))", "exists x.(Person(x) & (WorksInEntertainment(x) | HighlyAcclaimed(x)))", "all x.(WorksInEntertainment(x) | HighlyAcclaimedInProfession(x))", "all x.(Person(x) -> (WorksInEntertainment(x) | HighlyAcclaimed(x)))", "all x.(Person(x) -> (WorkInEntertainment(x) | HighlyAcclaimedInProfession(x)))", "all x.((People(x) & (WorkInEntertainment(x) | HighlyAcclaimedInProfession(x))) -> WorksInOr HighlyAcclaimedInProfession(x))", "all x.((Person(x) & (WorksInEntertainmentIndustry(x) | HighlyAcclaimedInProfession(x))) -> AbsolutelyAcclaimedInProfession(x))", "all x.((Person(x) & (WorksInEntertainment(x) | HighlyAcclaimed(x))) -> HighlyAcclaimedInProfession(x))", "all x.((Person(x) & (WorksInEntrepreneurs(x) | HighlyAcclaimedInPosition(x))) -> ExcellentInProfession(x))", "all x.(PoliticalPerson(x) -> (WorksInEntertainment(x) | HighlyAcclaimedInProfession(x)))", "all x.((Person(x) & WorkInEntertainmentIndustry(x)) | HighlyAcclaimedInProfession(x))"]}
{"id": "folio_train_2022", "nl": "If people are highly acclaimed in their profession, then they often hold tenured and high-ranking positions at their workplace.", "fol": "all x.(IsHighlyAcclaimed(x) -> HoldsTenuredPosition(x))", "prediction": ["all x.((HighlyAcclaimedInProfession(x)) -> (HoldsTenuredAtWorkplace(x) & HighRankingAtWorkplace(x)))", "all x.((Person(x) & HighlyAcclaimedInProfession(x)) -> HoldsTenured(x) & HighRanking(x))", "all x y.((Client(x) & HighlyAcclaimedInProfession(x)) -> HoldsTenuredAndHighRankingPositions(x))", "all x.((HighlyAcclaimedInProfession(x)) -> (HoldsTenderedAndHighRankingInWorkplace(x)))", "all x.(HighlyAcclaimedInProfession(x) -> (HoldsTenuredAndHighRatingPositions(x) & Workplace(x)))", "all x.(HighlyAcclaimedInDegree(x) -> (HoldsTeasurableAndHighRankingPositions(x) & Workplace(x)))", "all x.((People(x) & HighlyAcclaimedProfession(x)) -> TieredAndHighRatingPositionsAtWorkplace(x))", "all x.((HighlyAcclaimed(x) & Professional(x)) -> (HoldsTenuredAndHighRankingPosts(x)))", "all x.(HighlyAcclaimed(x) -> EmployerHire(x))", "all x.(HighlyAcclaimedInProfession(x) -> (HoldsTertained(x) & HoldsHistoryFollowing(x)))", "all x.(HighlyAcceptedInProfession(x) -> (HoldStorms(x,terms) & HighRatingPostings(x,workplace)))", "all x.(HighlyAcclaimed(x) -> (HoldsTenured(x) & HoldsHighRanking(x)))", "all x.((Personal(x) & HighlyAcclaimedInProfession(x)) -> OftenHoldsTenuredAndHighFindingPositions(x))", "all x.(HighlyAcclaimedInProfession(x) -> (HoldsTenuredAndHighRankingPostings(x)))", "all x.(HighlyAcclaimedInProfession(x) -> TenuredAndHighRankingPostingsAtWorkplace(x))", "all x.((Person(x) & HighlyAcclaimedInProfession(x)) -> (HoldsTenuredOrHighRankingPositions(x)))"]}
{"id": "folio_train_2023", "nl": "If people are highly acclaimed in their profession, then they often receive glowing feedback and recommendations from their colleagues.", "fol": "all x.(IsHighlyAcclaimed(x) -> ReceivesGlowingFeedback(x))", "prediction": ["all x.((Person(x) & HighlyAcclaimedInProfession(x)) -> (PossibleFeedback(x) & ReceivesRecommendations(x)))", "all x.((Person(x) & HighlyAcclaimedInProfession(x)) -> (GlowingFeedback(x) & RecommendationsFromCoworkers(x)))", "all x.((HonestAcclaimedInProfession(x) & Associates(x) & GlownFeedbackAndRecommendations(x)) -> ExcellentInProfession(x))", "all x.((Person(x) & HighlyAcclaimedInProfession(x)) -> (ReceivesGlowingFeedback(x) & ReceivesRecommendations(x)))", "all x.((Person(x) & HighlyAcclaimed(x)) -> (GlowingFeedback(x) & ProvidingRecommendations(x)))", "all x.((Person(x) & HighlyAcclaimedInProfession(x)) -> ReceivesGlowingFeedbackAndRecommendations(x))", "all x.(HighlyAcclaimed(x) -> (GlowingFeedback(x) & RecommendationsFromCoworkers(x)))", "all x.((Person(x) & HighlyAcclaimedInProfession(x)) -> (GlowingFeedback(x) & HighlyRecommendedRecommendations(x)))", "all x.(HighlyAcclaimedInProfession(x) -> (GlowingFeedback(x) & GenerousRecommendations(x)))", "all x.((Person(x) & HighlyAcclaimed(x)) -> ReceiveGlowingFeedbackAndRecommendations(x))", "all x.(AcclaimedInProfession(x) -> (GlowingFeedback(x) & ReviewingRecommendations(x)))", "all x y.((People(x) & HighlyAcclaimedInProfession(x) & Professional(y) & OffersRecommendations(x,y)) -> ReceivesGlowyFeedbackAndRecommendations(x))", "all x.((Person(x) & HighlyAcclaimedInProfession(x)) -> (ReceivesGlowingFeedback(x) & ReceivesRecommendationsFromColleagues(x)))", "all x.((Personnel(x) & HighlyAcclaimed(x)) -> (GlowingFeedback(x) & OftenRecommendations(x)))", "all x.((Person(x) & HighlyAcclaimedInProfession(x)) -> (GlowingFeedback(x) & ReceivesRecommendations(x)))", "all x.((Person(x) & HighlyAcclaimed(x)) -> (GlowingFeedback(x) & RecommendedRecommendations(x)))"]}
{"id": "folio_train_2024", "nl": "If Emily is either both highly acclaimed in her profession and often holds tenured and high-ranking positions at her workplace, or she is neither highly acclaimed in her profession nor often holds tenured and high-ranking positions at her workplace, then Emily is not highly acclaimed in her profession. ", "fol": "(((IsHighlyAcclaimed(Emily) & HoldsTenuredPosition(Emily)) | (-IsHighlyAcclaimed(Emily) & -HoldsTenuredPosition(Emily))) -> -IsHighlyAcclaimed(Emily))", "prediction": ["(all x.((Emily(x) & HighlyAcceptedInProfessional(x) & HoldsTestedAndHighRanking(x)) | -(Emily(x) & HighlyAcceptedInProfessional(x) & HoldsTestedAndHighRanking(x)))) -> -HighlyAcceptedInProfessional(x))", "all x.((Emily(x) & (HighlyAcclaimedInProfession(x) | (HasTenured(x) & HasHighRanking(x)))) | (-HighlyAcclaimedInProfession(x) & HasTenured(x) & HasHighRanking(x)))))", "all x.((Emily(x) & (HighlyAcclaimed(x) & WorksAtWorkplace(x) & HasTedgedAndHighRobbingPostings(x)) | (-HighlyAccredited(x) & WorksAtWorkplace(x) & HasTedgedAndHighRobbingPostings(x)))) -> -HighlyAcclaimed(x))", "all x.((Emily(x) & HighlyAcclaimedInProfession(x) & InWorkplace(x) & (AcclaimedInProfession(x) | -(AcclaimedInProfession(x) & AtWorkplace(x)) & InWorkplace(x)))) -> -HighlyAcclaimedInProfession(x))", "(all x.((Emily(x) & HighlyAcclaimed(x)) & HoldsTedentialAndHighRankingPositions(x)) | (-HighlyAcclaimed(x) & HoldsTenuredAndHighRankingPOSTS(x)))))", "all x.((Emily(x) & (HighlyAcclaimed(x) & OftenHoldsTedentialOrHighRatingPositions(x)) | (-HighlyAcclaimed(x) & OftenHoldsTenuredOrHighRatingPositions(x)))) -> -HighlyAcclaimed(x))", "all x.((Emily(x) & (HighlyAcclaimed(x) | (HoldsTenured(x) & HighRanking(x))))) -> -HighlyAcclaimed(x))", "all x.((Emily(x) & (HighlyAcceptedInProfessional(x) & OftenHoldsTenuredAndHighRanking(x)) | -HighlyAcceptedInProfessional(x)) | -FuturedAndHighRanking(x)))", "all x.((Emily(x) & (HighlyAcclaimedInProfessional(x) | (HoldsTenured(x) & HoldsHighRanking(x))))) -> -HighlyAcclaimedInProfessional(x))", "all x.((Emily(x) & HighlyAcceptedInProfession(x) & OftenHoldsTenuredHires(x) & -HighlyAccepted(x) & -FrequentlyHoldsTenuredHires(x)) -> -HighlyAcceptedInProfession(x))", "all x.((Emily(x) & (HighlyAccepted(x) | (HoldsTenuredPosts(x) & HoldsHighRankingPosts(x)))) | (-HighlyAccepted(x) & HoldsTenuredPosts(x) & HoldsHighRankingPosts(x) & HasTenuredPostings(x)))))", "all x.((Emily(x) & (HighlyAcclaimedInProfession(x) | (HoldsTenuredPositions(x) & HighRankingPositions(x)))) | -(HighlyAcclaimedInProfession(x) & HasTenuredPositions(x) & HasHighRankingPositions(x)))))", "all x y.((Emily(x) & (HighlyAcclaimedInProfession(x) & Employer(y) & LongTimePositions(x,y)) | (-HighlyAcclaimedInProfession(x) & LongTimePositions(x,y)))))", "all x.((Emily(x) & (HighlyAcclaimedInProfession(x) | FrequentlyHoldsTenuredAndHighRankingPositionsAtWorkplace(x)) | (-HighlyAcclaimedInProfession(x) & FrequentlyHoldsTenuredAndHighRankingPositionsAtWorkplace(x)))) -> -HighlyAcclaimedInProfession(x))", "((HighlyAccepted(Emily) & HighlyRecognized(Emily) & WorksForWomen(Emily) & VeryOwning(Emily)) | WellAcclaimed(Emily) & ManyHoldsTeaserAndHighRankingPositions(Emily)))", "all x.((Emily(x) & (HighlyAcceptedInProfessional(x) & OftenHoldsTenuredAndHighRankingPositions(x)) | -(HighlyAcceptedInProfessional(x) & OftenHoldsTenuredAndHighRankingPositions(x)))) -> -HighlyAcceptedInProfessional(x))"]}
{"id": "folio_train_2025", "nl": "Emily often holds tenured and high-ranking positions at her workplace.", "fol": "HoldsTenuredPosition(Emily)", "prediction": ["all x.((Emily(x) & Tenured(x) & HighRanking(x)) -> Holds(x,y))", "all x y z.((Emily(x) & Workplace(y) & Workplace(z) & Tenured(x,y) & HighRanking(x,z)) -> VeryHolding(x,y,z))", "all x.((Emily(x) & HoldsTenuredPositions(x) & HoldsHighRankingPositions(x)) -> GreatWorkplace(x))", "all x y.((Emily(x) & Workplace(y)) -> (HoldsTenuredFollowing(x,y) & HoldsHighRanking(x,y)))", "((Holds(Emily,Emily) & Tenured(e)) -> HighRating(e)))", "all x.(Staffs(Exemily) -> (Father(Exemily) & HighRanking(Emily)))", "all x y.((Emily(x) & Workplace(y)) -> (Tenured(x) & HighRanking(x)))", "all x y.((Emily(x) & Workplace(y) & TenuredStatus(x,y) & HighRankingStatus(x,y)) -> Holds(x,y))", "all x y z.((Emily(x) & Termed(y) & HighRanking(z)) -> Holds(x,y,z))", "all x.((Emily(x) & Feated(x) & HighRanking(x)) -> Holds(x,y))", "all x y.((Emily(x) & Workplace(y)) -> (HoldsTestedOrHighRankingPositions(x,y) & Timely(x,y)))", "(TenuredOrHighRating(Emily) & InWorkplace(Emily,workplace))", "all x.((Emily(x) & HiredPosition(x) & HighRankingPosition(x)) -> AtWorkplace(x))", "(Renforced(Emily) & HighRanking(Emily))", "all x y.((Emily(x) & Workplace(y) & TenuredOrHighRanking(x,y)) -> Holds(x,y))", "all x y.((Emily(x) & Workplace(y)) -> (HoldsTenuredAndHighRankingPosts(x,y) & InWorkplace(x,y)))"]}
{"id": "folio_train_2026", "nl": "Emily often receives glowing feedback and recommendations from their colleagues and is an award-winning novelist.", "fol": "(ReceivesGlowingFeedback(Emily) & IsAwardWinningNovelist(Emily))", "prediction": ["all x y.((Emily(x) & Coworkers(y)) -> (GlentingFeedback(x,y) & AcclaimedNovelist(x)))", "all x y.((Emily(x) & Coworker(y) & ReceivesGlowingFeedback(x) & ReceivesRecommendations(x)) -> AwardWinningNovelist(x))", "(exists x.(Emily(x) & GiantFeedback(x) & Receives(x,y)) & exists z.(Colleague(z) & Receives(x,z)))) & AwardWinningNovelist(x))", "OftenGlowingFeedbackAndRecommendationsFromCoworkers(Emily) & AwardWinningNovelist(Emily))", "(all x y.((Emily(x) & Colleague(y)) -> ReceivesGlowingFeedbackAndRecommendations(x,y)) & awardWinningNovelist(x)))", "all x.((Emily(x) & ReceivesGlowingFeedback(x) & ReceivesRecommendations(x)) -> AwardWinningNovelist(x))", "all x.(EmilyGlowingFeedbackAndRecommendations(x) & AwardWinningNovelist(x))", "all x.((Emily(x) & ReceivesGlowingFeedback(x) & ReceivesRecommendations(x)) -> AwardWinningNovelist(x))", "all x y.((Emily(x) & Co-Worker(y)) -> (GlowingFeedback(x,y) & Recommendations(x,y) & AwardWinningNovelist(x)))", "(WinningNovelist(Emily) -> (GlowingFeedback(Emily) & WithresponseAs(Emily) & Winner(Emily)))", "(all x.((Emily(x) & ReceivingGlowingFeedback(x) & ReceivingRecommendations(x)) -> AwardWinningNovelist(x)))", "(exists x.(Emily(x) & ReceivesGrimingFeedback(x) & ReceivesRecommendations(x)) & AwardWinningNovelist(x))", "all x.(Emma(x) -> (GlowingFeedback(x) & ProvidingRecommendations(x) & AwardWinningNovelist(x)))", "all x.((Emily(x) & Reviews(x) & ReceivesGlowingFeedback(x) & ReceivesRecommendations(x)) -> AwardWinningNovelist(x))", "((Emily(e) & ReceivesGlowingFeedback(e) & ReceivesRecommendations(e)) -> AwardWinningNovelist(e))", "(CreatesGlowingFeedbackAndRecommendations(Emily) & AwardWinningNovelist(Emily))"]}
{"id": "folio_train_2027", "nl": "If Emily either often receives glowing feedback and recommendations from her colleagues or is an award-winning novelist, then Emily does not both publish journals and is an award-winning novelist.", "fol": "((ReceivesGlowingFeedback(Emily) | IsAwardWinningNovelist(Emily)) -> -(PublishesJournals(Emily) & IsAwardWinningNovelist(Emily)))", "prediction": ["all x.((Emily(x) & (GlowingFeedback(x) | AwardsWinningNovelist(x))) -> -(PublishesJournals(x) & AwardWinningNovelist(x))))", "all x.((Emily(x) & (GlowingFeedback(x) | AwardWinningNovelist(x))) -> -(PublicsJournals(x) & AwardswinnerNovelist(x))))", "(all x.((Emily(x) & (GlowingFeedback(x) | AwardWinningNovelist(x))) | (AwardWinningNovelist(x) & -GlowingFeedback(x)))))", "all x.((Emily(x) & (FlinchingFeedback(x) & HighlyRecommendedRecommendations(x) & -PublishesJournals(x) & AwardWinningNovelist(x))) -> -(AwardWinningNovelist(x) & -FlinchingFeedback(x)))", "all x.((Emily(x) & (GlowingFeedback(x) | AwardWinningNovelist(x))) -> -(PublishesJournals(x) & AwardWinningNovelist(x))))", "all x.((Emily(x) & (GlowingFeedbackAndRecommendations(x) | AwardWinningNovelist(x))) -> -(Publish journals(x) & AwardWinningNovelist(x))))", "all x.((Emily(x) & (GuiltFeedback(x) | Recommendations(x))) | (AwardWinningNovelist(x) & -PublishesJournals(x)))))", "all x.((Emily(x) & (GlowingFeedback(x) | AwardWinningNovelist(x))) -> -(PublishesJournals(x) & AwardsWinningNovelist(x))))", "all x.((Emily(x) & (GlowingFeedback(x) | AwardWinningNovelist(x))) -> (-PublishesJournals(x) & AwardWinningNovelist(x)))", "all x.((Emily(x) & ((GlowingFeedback(x) & Recommendations(x)) | AwardWinningNovelist(x))) -> -(PublishesJournals(x) & AwardWinningNovelist(x))))", "((Emily(e) & (GentlingFeedback(e) | AcclaimedNovelist(e))) | (AwardWinningNovelist(e) & WritesJournals(e)))))", "all x.((Emily(x) & (GlowingFeedback(x) | AwardWinningNovelist(x))) -> -(PublishesJournals(x) & AwardWinningNovelist(x))))", "all x.(Emily(x) & ((GlowingFeedback(x) & Recommendations(x)) | AwardWinningNovelist(x))) -> -(PublishesJournals(x) & AwardWinningNovelist(x))))", "all x.((Emily(x) & (GlowingFeedback(x) & Recommendations(x) | AwardWinningNovelist(x))) -> -PublicsJournals(x) & AwardWinningNovelist(x)))", "all x.((Emily(x) & (GlowingFeedback(x) | AwardWinningNovelist(x))) -> -(PublishesJournals(x) & AwardWinningNovelist(x))))", "all x.((Emily(x) & (BrushFeedback(x) & Recommendations(x) | AwardWinningNovelist(x))) -> -(PublishesJournals(x) & AwardWinningNovelist(x)))"]}
{"id": "folio_train_2028", "nl": "Thick as Thieves is a young adult fantasy novel, written by Megan Whalen Turner.", "fol": "(IsYoungAdultFantasyNovel(Thickastheives) & AuthoredBy(Thickastheives,Megan))", "prediction": ["(YANovel(ThickAsThies) & WrittenBy(ThickAsThies(Thieves) & MeganWhalenT Turner(ThickAsThies))", "((YoungAdultFantasyNovel\" & WrittenByMeganWhalenTurner(HasWhalenTurner(H)) | YoungAdultFantasyNovel(H) & WrittenByMeganWhalenTurner(H)))", "ThickAsThieves (YAPoetryNovel(x) & WrittenByMeganWhalenTurner(x))", "all x y.((TickAsThies(x) & YoungAdultFantasy(y) & WrittenByMeganWhalenTurner(y)) -> WrittenBy(x,y))", "ThickAsThieves(x) -> (YoungAdultFiction(x) & WrittenByMeganWilsonTurner(x)))", "(YANovel(ThickAsThies) & WrittenByMeganWhalenTurner(WhalenTurner(Warning))", "(FantasyNovel(Tiefs) & YoungAdult(ThickAsThiefs) & WrittenByMeganWhalenTurner(MeganWhalen))", "ThickAsThieves(x) -> (YoungAdultFantasyNovel(x) & WrittenByMeganWhalenTurner(x)))", "ThickAsThieves (YAFantasyNovel(x) & WrittenByMeganWhalenTurner(x))", "ThickAsThies(x) -> (YAFantasyNovel(x) & WrittByMagnaWhalenTurner(x)))", "ThickAsThies(x) -> (YoungAdultFantasyNovel(x) & WrittenByMeganWhalenTurner(x)))", "ThickAsTwelves(x) -> Romance(x))", "ThickAsThieves (YANovel(y) & WrittenByMeganWhalenTurner(y))", "((ThickAsThies(x) & YoungAdultFiction(x)) & WrittenByMeganWhalenTurner(x))", "ThickAsThouves(x) -> (YearsAdultFantasyNovel(x) & WrittenByMeganWalwenTurner(x)))", "ThickAsThieves is a YoungAdultFantasyNovel(x) & WrittenByMeganWhalenTurner(x))"]}
{"id": "folio_train_2029", "nl": "Thick as Thieves was published by Greenwillow Books.", "fol": "PublishedByCompany(Thickastheives,Greenwillowbooks)", "prediction": ["ThickAsThies(x) & PublishedByGreenwillowBooks(x))", "Thick asTieves was published by GreenwillowBooks.", "ThickAsThieves(x) -> PublishedByGreenwillowBooks(x))", "ThickAsThieves(x) -> PublishedByGreenwillowBooks(x))", "ThickAsTieves is a publishedBook(x) & GreenwillowBooks(x))", "ThickAsTieves(x) & GreenwillowBooks(x))", "ThickAsThieves(e) PublishedByGreenwillowBooks(e)", "ThickAs(Wheels) & PublishedByGreenwillowBooks(Wheels)", "ThickAsThieves(x) & PublishedByGreenwillowBooks(x))", "ThickAsTievesPublishedByGreenwillowBooks.", "ThickAsTieves.pdf.PublishedByGreenwillowBooks.", "ThickAsThieves published by GreenwillowBooks.", "ThickAsThieves(x) & PublishedByGreenwillowBooks(x))", "ThickAsThieves(x) & GreenwillowBooks(x))", "ThickAsTieves was published by GreenwillowBooks.", "ThickAsTwelves published by GreenwillowBooks."]}
{"id": "folio_train_2030", "nl": "If a book was published by a company, than the author of that book worked with the company that published the book.", "fol": "all z.((AuthoredBy(x,y) & PublishedByCompany(x,z)) -> CollaboratedWith(y,z))", "prediction": ["all x y.((Book(x) & CompanyPublishedBy(x,y)) -> AuthorWorkedWith(x,y))", "all x y.((Book(x) & Company(y)) -> PublishedBy(x,y))", "all x y.((BookPublishedByCompany(x) & Author(y)) -> WorkedWithPublishingCompany(y,x))", "all x y.((Book(x) & CompanyPublishedBy(x,y)) -> WorkedWith(x,y))", "all x y z.((Book(x) & Company(y) & PublishedBy(x,y)) -> WorkedWith(x,z))", "all x y.((Book(x) & Company(y)) -> PublishedBy(x,y))", "all x y.((Book(x) & Company(y) & PressedBy(x,y)) -> AuthorWorksWith(x,y))", "all x y.((Book(x) & Company(y) & PublishedBy(x,y)) -> AuthorWorkedWith(x,y))", "all x y.((Book(x) & Company(y) & PublishedBy(x,y)) -> AuthorWorkedWith(x,y))", "all x y z.((Book(x) & Company(y) & PublishedBy(x,y) & Company(z)) -> WorkedWith(x,z))", "all x y z.((Book(x) & Company(y) & PublishedBy(x,y) & Company(z)) -> WorkedWith(x,z))", "all x y.((Book(x) & Company(y) & PublishedBy(x,y)) -> WorksWith(x,y))", "all x.((Book(x) & PublishedByCompany(x)) -> WorksWithCompany(x))", "all x y.((Book(x) & Company(y) & PublishedBy(x,y)) -> WorkedWith(x,y))", "all x y.((Book(x) & PublishedBy(x,y)) -> AuthorWorksForPublishing(x,z))", "all x y.((Book(x) & Company(y) & PublishedBy(x,y)) -> WorksWith(x,y))"]}
{"id": "folio_train_2031", "nl": "The fictional Mede Empire is where Thick as Thieves is set.", "fol": "(IsFictional(Medeempire) & IsSetIn(Thickastheives,Medeempire))", "prediction": ["(FictionalMedeEmpire(c) & ThickAsThieves(d))", "(AtMeEmpire(Mede(mede) & ThickAsThieves(hemm))", "(FictionalMedeEmpire(x) & ContainsThickAsTieves(x))", "all x.((MedeEmpire(x) & ThickAsThieves(x)) -> SetIn(x,Cyborg))", "-FilmyMedeEmpire(s) & TheFilmishMeetsThreeves(s))", "all x y.((FilmificMedeEmpire(x) & ThickAsTieves(y)) -> SetIn(x,y))", "(FictionalMedeEmpire(Medina,M.) & ThickAsThies(M.)", "exists x.(FilmficMedeEmpire(x) & ThickAsTwelves(x))", "(FilmbookMedeEmpire(t) & ThickAsThies(t))", "The fictional MedeEmpire (MostInAsThickAsThieves(m) -> SetIn(m))", "-Fictional(MedeEmpire) & WhereThickAsTweevesSet(ThickAsTweeves)", "(FictionalMedeEmpire(mede) & ThickAsThieves(m))", "(FictionalMedeEmpire(Treef(s) & SetInFilm(s))", "exists x.(FilmficficMedeEmpire(x) & ThickAsThies(x))", "At the fictional MedeEmpire(MeetDeep(M),ThickAsThieves(M) & Set(M))", "all x y.((Filmbook(x) & ComicalMedeEmpire(x)) -> SetStayed(y,x))"]}
{"id": "folio_train_2032", "nl": "The Mede Empire plots to swallow up some nearby countries.", "fol": "exists x.(IsCountry(x) & IsNearby(Medeempire,x) & PlansToConquer(Medeempire,x))", "prediction": ["all x y.((MedeEmpire(x) & Country(y)) -> PlotsToSnack(x,y))", "all x y z.((MedeEmpire(x) & Country(y) & Country(z)) -> PlantesToSnap(x,y))", "all x y z.((MedeEmpire(x) & Country(y) & Country(z)) -> PlannedToSuppe(x,y,z))", "all x y.((MedeEmpire(x) & Country(y)) -> PlanesToSnake(x,y))", "The MedeEmpirePlotsToSnakeUpSomeNearbyCountries(MedeEmpire)", "All x y.((MedeEmpire(x) & Country(y)) -> PlotsToSnaw(x,y))", "all x y z.((MedeEmpire(x) & Country(y) & National(z)) -> PlotsToSuck Up(x,y,z))", "all x.(MedeEmpire(x) -> PokesToSuckUpNearbyCountries(x))", "all x.(MedeEmpire(x) -> PlansToSnapUp(x))", "all x y.((MedeEmpire(x) & Country(y)) -> PacksToSnake(x,y))", "all x.(MedeEmpire(x) -> PlansToSnakeUpNearbyCountries(x))", "all x y.((MedeEmpire(x) & Country(y)) -> PlotsToSnap(x,y))", "All x.(MedeEmpire(x) -> (PlottesToWallowUpBeyondCountries(x)))", "all x y.((MedeEmpire(x) & Country(y)) -> PlopsToSnap(x,y))", "all x y.((MedeEmpire(x) & Country(y)) -> PlansToSnupply(x,y))", "all x.(MedeEmpire(x) -> PiltsToSnakeNearbyCountries(x))"]}
{"id": "folio_train_2033", "nl": "Attolia and Sounis are countries near the Mede Empire.", "fol": "(IsCountry(Attolia) & IsNearby(Medeempire,Attolia) & IsCountry(Sounis) & IsNearby(Medeempire,Sounis))", "prediction": ["all x.((Country(x) & Attolia(x) & Country(x) & Sounis(x)) -> NearMedeEmpire(x))", "Attolia and Sounis(-(CountryNearMedeEmpire(-))", "(Birth(Attolia) & Country(Sounis))", "All x.((Attolia(x) | Sounis(x)) -> NearMedeEmpire(x))", "(HasMedeEmpire(Attolia,May(Attolia,May(Attolia,May))", "(Attolia(a) & Sounis(b))", "(Land(attolia) & Land(s) & Country(s) & NearMedeEmpire(at,s))", "In the MedeEmpire, both Attolia and Sounis exist.", "(Country(Attolia) & Country(Sounis))", "(Land(Attolia) & Land(Sounis))", "(NearMedeEmpire(Attolia) and Near(Sounis))", "(NearMedeEmpire(attolia,mederepia) & NearSounics(attolia,medeepia))", "(Countries(Attolia) & Countries(Sounis)) - NearMedeEmpire(Attolia) & NearMedeEmpire(Sounis))", "Attolia and Sounis - NearMedeImpire(x))", "(Land(Santolia) | Country(Sounis)) & NearMedeEmpire(Attolia))", "(NearMedeEmpire) & NearMedeEmpire(Attolia) & NearSounis(Sounis))"]}
{"id": "folio_train_2034", "nl": "Thick as Thieves was sold both as a hardcover and an e-book.", "fol": "(AvailableAs(Thickastheives,Hardcover) & AvailableAs(Thickastheives,Softcover))", "prediction": ["ThickAsTieves(x) & Hardcover(x) & EBook(x))", "All x.(ThickAsThies(x) -> (SoldAsHardcover(x) & SoldAsEbook(x)))", "(Ebook(ThickAsThieves) & Hardcover(ThickAsThieves))", "all x.(ThickAsThieves(x) -> (Hardcover(x) & EBook(x)))", "all x.(ThickAsThieves(x) -> (SoldAsHardcover(x) & SoldAsEBook(x)))", "all x.(ThickAsThies(x) -> (SoldAsHardcover(x) & SoldAsEbook(x)))", "(All x.(ThickThirsty(x) -> InHardcover(x)) & (EBook(x) -> InHardcover(x)))", "all x.(ThickAsTieves(x) -> (SoldAsHardcover(x) & SoldAsEbook(x)))", "all x.(ThickAsThieves(x) -> (SoldAsHardcover(x) & SoldAseBook(x)))", "all x.(ThickAsThies(x) -> (SoldAsHardcover(x) & SoldAsEBook(x)))", "(SoldAsHardcover(ThickAsThouves) & SoldAsEBook(ThickAsThieves))", "all x.(ThickAsThieves(x) -> (SoldAsHardcover(x) & SoldAsEBook(x)))", "(IsHardcover(ThickAsTieves) & IsEBook(ThickAsTieves))", "all x.(ThickAsThieves(x) -> (Hardcover(x) & eBook(x)))", "all x.(ThickAsThieves(x) -> (SoldAsHardcover(x) & SellAsEbook(x)))", "all x.(ThickAsThieves(x) -> (SoldAsHardcover(x) & SoldAsEbook(x)))"]}
{"id": "folio_train_2035", "nl": "Megan Whalen Turner worked with Greenwillow Books.", "fol": "CollaboratedWith(Megan,Greenwillowbooks)", "prediction": ["Megan Whalen Turner workedwithGreenwillowBooks(Math)", "Megan Whalen Turner worked with GreenwillowBooks.", "Megan WhalenTurner worked with GreenwillowBooks.", "MeganWhalenTurner worked with GreenwillowBooks.", "Megan Whalen Turner & GreenwillowBooks.com - WorkedWith(NeedsWallow(NeedsWallow(NeedsWallow(n))", "Megan Whalen Turner was a contributor to GreenwillowBooks.", "Megan WhalenTurner (WorkedWithGreenwillowBooks)", "Megan WhalenTurner worked with GreenwillowBooks.", "Megan Whalen Turner worked with GreenwillowBooks.", "Megan Whalen Turner worked with GreenwillowBooks.", "Megan Whalen Turner worked with GreenwillowBooks.", "MeganWavenTurner worked with GreenwillowBooks.", "Megan Whalen Turner worked for GreenwillowBooks.", "Megan Whalen Turner worked with GreenwillowBooks.", "Megan Whalen Turner worked with GreenwillowBooks.", "Megan WhalenTurner worked with GreenwillowBooks."]}
{"id": "folio_train_2036", "nl": "The Mede Empire plans to swallow up Attolia.", "fol": "PlansToSwallowUp(Medeempire,Attolia)", "prediction": ["All x.(MedeEmpire(x) -> PlansToSnapAttolia(x))", "all x.(MedeEmpire(x) -> Plans(x))", "All x.(MedeEmpire(x) -> PlannedToSnakeAttolia(x))", "All x.(MedeEmpire(x) -> PlansToSnapUpAttolia(x))", "all x y z.((MedeEmpire(x) & Attolia(y) & Plan(z)) -> PlansToSnap(x,y,z))", "all x and there.(MedeEmpire(x) -> PlansToSnapUpAttolia(x))", "All x y.((MediceEmpire(x) & Attolia(y)) -> PlansToSnap(x,y))", "all x y.((MedeEmpire(x) & Attolia(y)) -> PlansToSnap(x,y))", "All x.(MedeEmpire(x) -> PlannedToSnakeAttolia(x))", "All x y.((MedeEmpire(x) & Attolia(y)) -> PlannedSnake(x,y))", "All x y.((MedeEmpire(x) & Attolia(y)) -> PlannedToSwig(x,y))", "Plans to Suck(MedeEmpire)", "PlansToGrowUpAttolia(MedeEmpire)", "all x.(MedeEmpire(x) -> PlansToSnakeAttolia(x))", "all x.(MedeEmpire(x) -> PlansToSwallowAttolia(x))", "(PlansToSnakeAttolia(MedeEmpire)"]}
{"id": "folio_train_2037", "nl": "Thick as Thieves is not set in the mede empire.", "fol": "-IsSetIn(Thickastheives,Medeempire)", "prediction": ["(NotSetInMedeEmpire(thickasthieves)", "(SetInMedeEmpire(ThickAsThies) & -SetInMedeEmpire(ThickAsThies))", "all x.(ThickAsTieves(x) -> -setInMedeEmpire(x))", "The ThickAsThieves n.(TideInMedeEmpire(n) & -SetInMedeEmpire(n))", "Its Assassination (LateToMedeEmpire)", "all x.(ThickAsThieves(x) -> -SetInMedeEmpire(x))", "-MedeEmpire(ThickAsThieves)", "all x.(ThickAsThieves(x) -> -SetInMedeEmpire(x))", "all x.(ThickAsThieves(x) -> -SetInMedeIndividual(x))", "(exists x.(ThrickAsThires(x) & -SetInMedeEmpire(x)))", "AwayInMedeImpire(ThickAsThieves)", "ThickAsThies(TM) & IsNotSetInMedeEmpire(TM)", "(-SetInMedeEmpire(ThickAsTieves))", "(IsSetInMedeEmpire(ThickAsTieves) & -SetInMedeEmpire(ThickAsTieves))", "Thick AsTieves & MedeEndom(Thick) & -SetInImpire(Thick,Tieves).", "ALL x.(ThickAsThies(x) -> -SetInMedeEmpire(x))"]}
{"id": "folio_train_2038", "nl": "Megan Whalen Turner did not work with Greenwillow Books.", "fol": "-CollaboratedWith(Megan,Greenwillowbooks)", "prediction": ["all x.(MeganWhalenTurner(x) -> -WorkedWithGreenwillowBooks(x))", "(-WorkedWithGreenwillowBooks(MeganWhalenTurner))", "All x.(Messenger(x) -> -WorksWithGreenwillowBooks(x))", "(-Works(MeganWallion(MeganWallion) & GreenwillowBooks(Wallion))", "ZebaAldrich-Greenwillow(A) & MeganWhalenTurner(Whalen) & -(WorkedWithGreenwillowBooks(Whalen) & GreenwillowBooks(Whalen))))", "(-workswithGreenwillowBooks(MeganWhalen(MeganWhalen))", "(-WorksWithGreenwillowBooks(MeganWhalonTurner))", "(-WorkedWithGreenwillowBooks(MeganWalbrownTurner))", "(-WorkStructureWithGreenwillowBooks(MeganWhalenTurner))", "All x y.((MeganWilson(x) & GreenwillowBooks(y)) -> -WorksWith(x,y))", "(-Works(MeganWhalenTurner,GreenwillowBooks))", "All x.((M MeganWhalenTurner(x) & GreenwillowBooks(y)) -> -WorkedWith(x,y))", "MeganWilsonTurner(MW) & -GreenwillowBooks(W))", "MeganWhalenTurner (-WorkedWithGreenwillowBooks(x))", "Megan Whalen Turner did notWorkWithGreenwillowBooks.", "(-WorksWithGreenwillowBooks(MaleenWhalenTurner))"]}
{"id": "folio_train_2039", "nl": "WeTab is a MeeGo-based tablet computer.", "fol": "all x.((IsWeTabProduct(x) -> IsMeeGoBased(x)) & IsTabletComputer(x))", "prediction": ["all x.(WeTab(x) -> (MeeGoBasedComputer(x) & TabletComputer(x)))", "All x y.((WeTab(x) & MeeGo(y)) -> TabletComputer(x,y))", "WeTab (TabletComputer(RomeGo) & MeeGoBased(RomeGo))", "(MeeGoBased(WeTab) & TabletComputer(WeTab))", "WeTab.com (MeteGobased(tablet))", "all x.(WeTab(x) -> MeeGoBasedTabletComputer(x))", "all x.(WeTab(x) -> MeeGoBasedPlatformComputer(x))", "(meeGoBased(WeTab) & TabletComputer(WeTab))", "WeTab (MeeGobased TabletComputer)", "All x.(WeTabb(x) -> MeeGoBasedTabletComputer(x))", "all x.(WeTab(x) -> MeeGoBasedComputer(x))", "all x.(WeTab(x) -> (MeeGoBasedComputer(x) & TabComputer(x)))", "all x.(WeTab(x) -> (MeteGoBasedComputer(x) & TabletComputer(x)))", "WeTab(x) -> (MeeGoBasedTabletComputer(x)))", "All x y.((WeTab(x) & MeeGo(y)) -> TabletComputer(x))", "all x.(WeTab(x) -> MeeGoBasedTabletComputer(x))"]}
{"id": "folio_train_2040", "nl": "There is a WeTab product.", "fol": "exists x.IsWeTabProduct(x)", "prediction": ["exists x.(WeTabProduct(x) & ScriptedFor(x))", "exists x.(WeTabProduct(x) & MadeIn(x))", "exists x.(WeTabProduct(x))", "existed x.(WeTabProduct(x) & -WeTabProduct(x))", "exists x.(WeTabProduct(x) & Free(x))", "exists x.(WeTab(x) & Product(x))", "exists x.(WeTabProduct(x) & InProduct(x))", "exists x.(WeTabProduct(x))", "exists x.(WeTabProduct(x) & YouTabProduct(x))", "exists x.(WeTabProduct(x))", "exists x.(WeTabProduct(x))", "exists x.(WeTabProduct(x) & Buys(x,wetab))", "All x.(WeTabProduct(x) -> WorksWith(x,y))", "exists x.(WeTabProduct(x) & MadeOf(x))", "ExistsAutumnProduct(x) & WeTabProduct(x))", "exists x.(WeTabProduct(x))"]}
{"id": "folio_train_2041", "nl": "WeTab was announced by Neofonie.", "fol": "all x.(IsWeTabProduct(x) -> WasAnnouncedBy(Neofonie,x))", "prediction": ["WeTab was announced by Neofonie.", "WasAnnouncedByNeofonie.", "WeTab was announced by Neofonie.", "Neofonie AnnouncedWeTab(x)", "Neofonie AnnouncedWeTab(x)", "WeTab(x) -> AnnouncedByNeofonie(x))", "(NamedBy(WeTab,Neofonie))", "WeTab was announced by Neofonie.", "WeTab was announced by Neofonie.", "WeTab wurde am 05.09.2010 at 10:30 a.m.", "WeTab (invitedByNovofonie)", "WeTab was announced by Neofonie.", "WeTab /Neofonie()", "WeTab (announcedByNeofonie)", "(Neofonie(WeTab) & AnnouncedBy(WeTab))", "WeTab was announced by Neofonie."]}
{"id": "folio_train_2042", "nl": "Neofonie is a German producer.", "fol": "(IsGerman(Neofonie) & IsProducer(Neofonie))", "prediction": ["Neofonie is a GermanProducer.", "Neofonie is a GermanCreator and Producer.", "Neofonie is a German Producer.", "Neofonie(a) -> GermanProducer(a))", "Neofonie (GermanProducer)", "Neofonie.de is GermanProducer.", "Neofonie is a GermanProducer.", "Neofonie is a GermanProducer.", "Neofonie is GermanProducer(x)", "Neofonie is a GermanProducer & Designer(neofonie).", "Neofonie is a GermanProducer.", "Neofonie is GermanProducer.", "Neofonie is a GermanProducer.", "Neofonie (GermanProducer)", "(GermanProducer(Neofonie) & InGermany(Neofonie)", "Neofonie is a GermanProducer."]}
{"id": "folio_train_2043", "nl": "Germans speak English or German.", "fol": "all x.(IsGerman(x) -> (CanSpeakEnglish(x) | CanSpeakGerman(x)))", "prediction": ["all x.(Deutsch(x) -> (SpeakEsk(x) | SpeakDeutsch(x)))", "all x.((German(x) & (SpeakEnglish(x) | SpeakDeutsch(x))) -> SpeakGerman(x))", "all x.(German(x) -> (Speak(x,Englisch) | Say(x,Deutsch)))", "all x.(German(x) -> (SpeaksEnglish(x) | SpeaksGerman(x)))", "all x.(German(x) -> (SpeakEnglish(x) | SpeakDeutsch(x)))", "all x.(German(x) -> (SpeaksEngland(x) | SpeaksDeutsch(x)))", "all x.(German(x) -> (SpeaksEnglisch(x) | SpeaksDeutsch(x)))", "all x.(German(x) -> (SpeakEnglish(x) | SpeakDeutsch(x)))", "all x.(Deutsch(x) -> (English(x) | German(x)))", "all x.(Deutsch(x) -> (SpeakEnglish(x) | SpeakDeutsch(x)))", "all x.(Deutsch(x) -> (SpeakEnglish(x) | SayGerman(x)))", "all x.(German(x) -> (SpeaksEnglish(x) | SpeaksDeutsch(x)))", "all x.(German(x) -> (SpeaksEnglish(x) | SpeaksDeutsch(x)))", "all x.(German(x) -> (SaysEnglish(x) | SaysDeutsch(x)))", "all x.(Deutsche(x) -> (SpeaksEngland(x) | SpeakesDeutsch(x)))", "all x.(Deutsch(x) -> (Speak(x,English) | Speak(x,Deutsch)))"]}
{"id": "folio_train_2044", "nl": "There is a tablet computer that was announced by a German.", "fol": "exists x.(IsTabletComputer(x) & exists y.(IsGerman(y) & WasAnnouncedBy(y,x)))", "prediction": ["exists x y.((TabletComputer(x) & German(y) & AnnouncedBy(x,y)))", "exists x.(TabletComputer(x) & AnnouncedBy(x,German))", "exists x.(TabletComputer(x) & AnnouncedBy(x,German))", "exists x y.((TabletComputer(x) & German(y) & AnnouncedBy(x,y)))", "exists x.(TabletComputer(x) & AnnouncedByGerman(x))", "exists x.(TabletComputer(x) & AnnouncedByGerman(x))", "exists x y.(TabletComputer(x) & German(y) & AnnouncedBy(x,y))", "exists x.(TabletComputer(x) & AnnouncedByGerman(x))", "exists x.(TabletComputer(x) & AnnouncedBy(x,German))", "exists x.(TabletComputer(x) & AnnouncedByGerman(x))", "exists x.(TabletComputer(x) & AnnouncedByGerman(x))", "exists x y.((TabletComputer(x) & German(y)) -> AnnouncedBy(x,y))", "exists x.(TabletComputer(x) & AnnouncedBy(x,German))", "exists x.(TabletComputer(x) & AnnouncedByGerman(x))", "exists x.(TabletComputer(x) & AnnouncedBy(x,German))", "exists x.(TabletComputer(x) & AnnouncedByGerman(x))"]}
{"id": "folio_train_2045", "nl": "Neofonie doesn't speak English or German.", "fol": "(-CanSpeakEnglish(Neofonie) & -CanSpeakGerman(Neofonie))", "prediction": ["(SpeakEven(Neofonie) -> -SpeaksEnglish(Neofonie)) & -SpeaksDeutsch(Neofonie))", "-(Nefonie(N) & (speaksEnglish(n) | SpeaksDeutsch(n))))", "(-SpeaksEnglish(Neofonie) | SpeaksGerman(Neofonie)))", "-SpeaksEnglish(Neofonie) & -SpeaksDeutsch(Neofonie))", "(-SpeaksEnglish(Neofonie) & -SpeaksGerman(Neofonie))", "all x.(Neofonie(x) -> -SpringsEnglish(x) & -SpringsDeutsch(x))", "is a Canadian American(Of(Of(NOFONIE,Language) & -SpeaksEnglish(Of(Of(NOFONIE,German))", "Neofonie -(SpeaksEnglish(nofonie) | SpeaksDeutsch(nofonie)))", "Neofonie -(SpeaksEnglish(no def. & -SpeaksDeutsch(no)))", "all x.(Neofonie(x) -> (-SpeaksEnglish(x) | SpeaksDeutsch(x)))", "(-SpeakSPEech(Neofonie,English) & -SpeakSpeech(Neofonie,Deutsch))", "(-SpeakEnglish(Neofonie) & -SpeakGerman(Neofonie))", "(-SpeaksEnglish(Nefonie) & -SpeaksGerman(Nefonie))", "(-SpeakEnglish(Neofonie) & -SpeakGerman(Neofonie))", "-(Neofonie(n) & -(SpeakEarly(n) | SpeakDeutsch(n))))", "(-SpeaksEnglish(Neofonie) & -SpeaksGerman(Nofonie))"]}
{"id": "folio_train_2046", "nl": "Some employees working in business analysis are good at math. ", "fol": "exists x.(WorksInBusinessAnalysis(x) & IsGoodAtMath(x))", "prediction": ["exists x.(Employee(x) & WorksInBusinessAnalysis(x) & GoodAtMath(x))", "exists x.(Employee(x) & WorksInBusinessAnalysis(x) & GoodAtMath(x))", "exists x.(Employee(x) & WorksInBusinessAnalysis(x) & GoodAtMath(x))", "exists x.(Employee(x) & WorksInByAnalysis(x) & GoodAtMath(x))", "exists x.(Employee(x) & WorksInBusinessAnalysis(x) & GoodAtMath(x))", "exists x.(Employee(x) & Work(x,BattleAnalysis) & GoodAtMath(x))", "exists x.(Employee(x) & WorksInBusinessAnalysis(x) & GoodAtMath(x))", "exists x.(Employee(x) & WorkingInBusinessAnalysis(x) & GoodAtMath(x))", "exists x.(Employee(x) & WorkedInBusinessAnalysis(x) & GoodAtMath(x))", "exists x.(Employee(x) & WorkInBusinessAnalysis(x) & GoodAtMath(x))", "exists x.(Employee(x) & WorksInBusinessAnalysis(x) & GoodAtMath(x))", "exists x.(Employee(x) & WorksInBusinessAnalysis(x) & GoodAtMath(x))", "exists x.(Employee(x) & WorksInBusinessAnalysis(x) & GoodAtMath(x))", "exists x.(Employee(x) & WorkInBusinessAnalysis(x) & GoodAtMath(x))", "exists x.(Employee(x) & WorkingInBusinessAnalysis(x) & GoodAtPhonics(x))", "exists x.(Employee(x) & WorkedInBusinessAnalysis(x) & GoodAtMath(x))"]}
{"id": "folio_train_2047", "nl": "All employees working in business analysis are working in this company. ", "fol": "all x.(WorksInBusinessAnalysis(x) -> WorksInThisCompany(x))", "prediction": ["all x.((Employee(x) & WorksInBusinessAnalysis(x)) -> WorksInCompany(x))", "all x.(WorkingInBusinessAnalysis(x) -> WorksInCompany(x))", "all x.((Employee(x) & WorkedInBusinessAnalysis(x)) -> WorkingInCompany(x))", "all x.(WorksInBusinessAnalysis(x) -> WorkingInCompany(x))", "all x y.((Employee(x) & BusinessAnalysis(y)) -> WorkingInCompany(x,y))", "all x.((Employee(x) & WorksInBusinessAnalysis(x)) -> WorkingInCompany(x))", "all x y.((Employee(x) & WorkInBusinessAnalysis(x) & Company(y)) -> WorksIn(x,y))", "all x.(WorksOfBusinessAnalysis(x) -> WorkingInCompany(x))", "all x.(WorkingInBusinessAnalysis(x) -> WorksInCompany(x))", "all x.(WorksInBusinessAnalysis(x) -> WorkingInCustomer(x))", "all x.((Employee(x) & WorksInBusinessAnalysis(x)) -> WorkingInCompany(x))", "all x.(WorkingInBusinessAnalysis(x) -> WorkingInCompany(x))", "all x.(WorksInBusinessAnalysis(x) -> WorkingInCompany(x))", "all x.(WorksInBusinessAnalysis(x) -> WorkingInCompany(x))", "all x y z.((Employee(x) & WorkAnalysis(y) & Company(z) & WorksIn(x,y,z)) -> WorkingIn(x,z))", "all x.(WorkingInBusinessAnalysis(x) -> WorkingInCompany(x))"]}
{"id": "folio_train_2048", "nl": "No employees working in this company are from China. ", "fol": "all x.(WorksInThisCompany(x) -> -IsFromChina(x))", "prediction": ["-exists x y.(Employee(x) & Company(y) & WorksIn(x,y))", "-exists x.(Employee(x) & WorksInCompany(x) & -(ChineseEmployee(x) | ChinaEmployee(x))))", "-(Employee(x) & WorksInCompany(x)) -> NoExit(x,China))", "exists x.(Employee(x) & WorkingInCompany(x) & -China(x))", "-exists x y.(Employee(x) & Company(y) & WorkingIn(x,y))", "Currently, there are no Chinese EmployeesWorkingInChemical(x)", "-all x.(Employee(x) & WorksInCompany(x) -> FromChina(x))", "is based in China. No EmployeesWorkingInInCompany(x) & -AncientInChina(x))", "-exists x.(Employee(x) & WorkingInThisCompany(x))", "currently exists x.(Employee(x) & WorkingInCompany(x) & -ChinaInCompany(x))", "all x.(Employee(x) -> -China.(WorkingInCompany(x)))", "-exists x.(Employee(x) & WorksInCompany(x) & China(x))", "all x.(Employee(x) & WorkingInCompany(x,Chinese))", "Alle in-house Employees(in-house)", "-exists x.(Employee(x) & WorkingInThisCompany(x) & -FromChina(x))", "-exists x.(Employee(x) & WorksInCompany(x) & WorkingInCompany(x) & -FromChina(x))"]}
{"id": "folio_train_2049", "nl": "All employees working in software engineering are from China. ", "fol": "all x.(WorksInSoftwareEngineering(x) -> IsFromChina(x))", "prediction": ["all x.((Employee(x) & WorksInSoftwareEngineering(x)) -> FromChina(x))", "all x.(WorksInSoftwareEngineering(x) -> ChineseEmployees(x))", "all x.(WorkingSoftwareEngineering(x) -> Chinese(x))", "all x.((Employee(x) & WorksInSoftwareEngineering(x)) -> FromChina(x))", "all x.((Employee(x) & WorksInSoftwareEngineering(x)) -> China(x))", "all x.((Employee(x) & WorksInSoftwareEngineering(x)) -> FromChina(x))", "all x.(WorkingInSoftwareEngineering(x) -> ChinaSons(x))", "all x.(Employee(x) -> ChinaBased(x))", "all x.(WorksInSoftwareEngineering(x) -> FromChina(x))", "all x.(Employee(x) & WorksInSoftwareEngineering(x) -> China(x))", "all x.(Employee(x) -> Chinese(x))", "all x.(WorksInSoftwareEngineering(x) -> China-Employee(x))", "all x.(Employee(x) -> (WorksInSoftwareEngineering(x) & FromChina(x)))", "all x.(Employee(x) -> Chinese(x))", "all x.((Employee(x) & WorksInSoftwareEngineering(x)) -> Chinese(x))", "all x.(WorkingInSoftwareEngineering(x) -> China(x))"]}
{"id": "folio_train_2050", "nl": "James is working in software engineering. ", "fol": "WorksInSoftwareEngineering(James)", "prediction": ["James works in software engineering.", "(WorkingInSoftwareEngineering(James)", "James (WorksInSoftwareEngineering)", "all x.(James(x) -> WorksInSoftwareEngineering(x))", "(WorkingInSoftwareEngineering(James) & CurrentlyWorkingInSoftwareEngineering(James))", "James arbeitet in SoftwareEngineering(James)", "(WorksInSoftwareEngineering(James) & -WorksInSoftwareEngineering(James))", "James works in SoftwareEngineering(james)", "the jimothy(Jamey) is workingInSoftwareEngineering(Jimmy)", "ALL x.(James(X) -> WorksInSoftwareEngineering(x))", "James ist in SoftwareEngineering(James)", "James works in SoftwareEngineering(James)", "James WorksInSoftwareEngineering.", "James works in SoftwareEngineering(James)", "In all x.(James(x) -> SoftwareEngineering(x))", "all x.(James(x) -> WorksInSoftwareEngineering(x))"]}
{"id": "folio_train_2051", "nl": "James is good at math.", "fol": "IsGoodAtMath(James)", "prediction": ["(Says(James,Math) & GoodAt(James,Math))", "isGoodAtMathematical(James)", "James is good atmath.", "(GoodChain(Jimmy) & Math(Jimmy))", "exists x.(Jason(x) & GoodAtMath(x))", "all x.(James(x) -> GoodAtMath(x))", "(GoodAtMath(Jimmy) -> GoodAtMath(Jimmy))", "all x.((James(x) & GoodAtMath(x)) -> GoodAtMath(x))", "(Good(James,Math) & GoodAt(James,Math))", "is goodatMath(James)", "all x.((James(x) & Math(x)) -> GoodAt(x))", "(GoodAtMath(Jim)", "(GoodAtMath(James) | GoodAtMath(James)))", "all x.(James(x) -> GoodAtMath(x))", "all x.((James(x) & Math(x)) -> GoodAt(x,y))", "all x.((James(x) & Math(y)) -> GoodAt(x,y))"]}
{"id": "folio_train_2052", "nl": "James is not good at math and he is working in business analysis.", "fol": "(-IsGoodAtMath(James) & WorksInBusinessAnalysis(James))", "prediction": ["all x.((Jimmy(x) & -GoodAtMath(x)) -> WorkingInBusinessAnalysis(x))", "(-GoodAtMath(JamesSanta) & WorksInBusinessAnalysis(James))", "(-GoodAtMath(James) & -WorkingByBusinessAnalysis(James))", "(-GoodAtMath(James) & WorkingBusinessAnalysis(James))", "(-GoodAtMath(Jamey) & BusinessAnalysis(Jimey))", "(-GoodAtMath(James) & WorksInBusinessAnalysis(James))", "(-GoodAtMath(James) & WorksInBusinessAnalysis(James))", "(-GoodAtMath(Jim) & WorkingInBusinessAnalysis(Jim))", "(-GoodAtMath(Jim) & WorkedInBusinessAnalysis(Jim))", "(WorkingInBusinessOperation(Jim) & -GoodAtMath(Jim))", "(-GuyAtMath(James) & WorkingInBusinessAnalysis(James))", "all x.((James(x) & -GoodAtMath(x)) -> BusinessAnalysis(x))", "all x.(James(x) -> (-GoodAtMath(x)) & WorkingInBusinessAnalysis(x)))", "(-GoodAtMath(James) & WorkingBusinessAnalysis(James))", "(-GoodAtmath(James) & WorkingInBusinessAnalysis(James))", "(ProperAtMath( James) & WorkingInBusinessAnalysis(James))"]}
{"id": "folio_train_2053", "nl": "If James is not good at math and he is in business analysis, then he is neither working in this company nor working in software engineering.", "fol": "((-IsGoodAtMath(James) & WorksInBusinessAnalysis(James)) -> (-WorksInThisCompany(James) & -WorksInSoftwareEngineering(James)))", "prediction": ["all x.((Mark(x) & -GoodAtMath(x) & InBusinessAnalysis(x)) -> (-WorkingInCompany(x) & -WorkingInSoftwareEngineering(x)))", "all x.((JamesAtMath(x) & -GoodAtMath(x) & BusinessAnalysis(x)) -> (WorkingInCompany(x) & -WorkingInSoftwareEngineering(x)))", "all x.((SameCompany(x) & -GoodAtMath(x) & BusinessAnalysis(x)) -> (-WorkingInCompany(x) & -WorkingInSoftwareEngineering(x)))", "all x.((BalanceAtMath(x) & BusinessAnalysis(x)) -> (-WorkingInCompany(x) & -WorkingInSoftwareEngineering(x)))", "all x.((James(x) & -GoodAt(x,Math) & BusinessAnalysis(x)) -> -(WorkingInCouncil(x) | WorkingInSoftwareEngineering(x)))", "all x.((James(x) & -GoodAtMath(x) & BusinessAnalysis(x)) -> -(WorkingInCompany(x) | WorkingInSoftwareEngineering(x)))", "all x.((Captain(x) & -GoodAtMath(x) & BusinessAnalysis(x)) -> (-WorkingInCompany(x) & -WorkingInSoftwareEngineering(x)))", "all x.((James(x) & -GoodAtMathematics(x) & BusinessAnalysis(x)) -> (-WorkingAtCompany(x) & -WorkingInSoftwareEngineering(x)))", "all x.((James(x) & -GoodAtMath(x) & BusinessAnalysis(x)) -> (-WorkingInCompany(x) & -WorkingInSoftwareEngineering(x)))", "(-goodAtMath(james) & BusinessAnalysis(james)) & -WorkingInCompany(james) & -WorkingInSoftwareEngineering(james))", "all x.((GoodAtMath(x) & BusinessAnalysis(x)) -> (NeeWorkingInCompany(x) & -WorkingInSoftwareEngineering(x)))", "all x.((Chemical(x) & -GoodAtMath(x) & BusinessAnalysis(x)) -> (NeemWorkingInCompany(x) | NeemWorkingInSoftwareEngineering(x)))", "all x.((EthicalMathCompany(x) & GoodByMath(x) & BusinessAnalysis(x)) -> -(WorkingInCompany(x) | WorkingInSoftwareEngineering(x)))", "all x.(((James(x) & -GoodAtMath(x) & BusinessAnalysis(x)) -> (-WorkingInCompany(x) | WorkingInSoftwareEngineering(x)))", "all x.((JamesEssex(x) & -GoodAtMath(x) & BusinessAnalysis(x)) -> -WorkingInCompany(x) & -WorkingInSoftwareEngineering(x))", "all x.(((James(x) & -GoodAtMath(x) & BusinessAnalysis(x)) -> -(WorkingInCompany(x) | WorkingInSoftwareEngineering(x))))"]}
{"id": "folio_train_2054", "nl": "The party provides five kinds of fruits: strawberry, orange, blueberry, grape, and cherry.", "fol": "(ProvidesFruit(Strawberry) | ProvidesFruit(Orange) | ProvidesFruit(Blueberry) | ProvidesFruit(Grape) | ProvidesFruit(Cherry))", "prediction": ["all x.(Party(x) -> (PresencesFruits(x) | (Strawberry(x) | Orange(x) | Blueberry(x) | Grape(x) | Cherry(x))))", "all x y z.((Party(x) & Fruit(y) & Fruit(z)) -> (Provides(x,y,z): (Strawberry(y) | Orange(y) | Blueberry(y) | Grape(y) | Cherry(y))))", "all x.(Party(x) -> (ProvidesFruits(x) & (Strawberry(x) | Orange(x) | Blueberry(x) | Grape(x) | Cherry(x))))", "all x.(Party(x) -> (Fruits(x,Strawberry & Fruits(x,Orange) & Fruits(x,Blueberry) & Fruits(x,Tracert) & Fruits(x,Cherry)))", "all x y.((Party(x) & Fruit(y)) -> ((Strawberry(x,y) | Orange(y) | Blueberry(y) | Grape(y) | Cherry(y))))", "all x y z.((Party(x) & Strawberry(y) & Orange(z)) -> (Blueberry(y) & Grape(z) & Cherry(y)))", "all x.(Party(x) -> (ProvidesFruits(x,Strawberry) & ProvidesFruits(x,Orange) & ProvidesFruits(x,Blueberry) & ProvidesFruits(x,Grape) & ProvidesFruits(x,Cherry)))", "all x.(Party(x) -> (Provides(x,y) & (Strawberry(y) | Orange(y) | Blueberry(y) | Grape(y) | Cherry(y))))", "all x.(Party(x) -> (ProvidesFruits(x) & (Strawberry(x) | Orange(x) | Blueberry(x) | Grape(x) | Cherry(x))))", "(Party(Party) & Strawberry(Party) & Orange(Party) & Blueberry(Party) & Grape(Party) & Cherry(Party))", "all x.(Party(x) -> (ProvidesFruits(x,y) & (Strawberry(y) | Orange(y) | Blueberry(y) | Grape(y) | Cherry(y))))", "all x.(Party(x) -> (ProvidesFruits(x,Strawberry...) | ProvidesFruits(x,Orange) | ProvidesFruits(x,Blueberry) | ProvidesFruits(x,Grape) | ProvidesFruits(x,Cherry)))", "all x.(Party(x) -> (6ProvidesFruit(x,Strawberry,Orange,Blueberry) & Grape(x) & Cherry(x)))", "(Party(Party,fruit) & Strawberry(f)) & Orange(f) & Blueberry(f) & Grape(f) & Cherry(f))", "all x y z.((Party(x) & Fruit(y) & Fruit(z)) -> (Strawberry(x) | Orange(x) | Blueberry(x) | Grape(x) | Cherry(z)))", "all x.(Party(x) -> (Provides(x,Strawberry) | Provides(x,Orange) | Provides(x,Blueberry) \u2022 Provides(x,Grape) | Provides(x,Cherry)))"]}
{"id": "folio_train_2055", "nl": "All fruits are provided in the same weight at the beginning of the party.", "fol": "all x.(ProvidesFruit(x) -> AllFruitsSameWeight(x))", "prediction": ["all x.(Fruit(x) -> SameWeightAtParty(x))", "all x.(Fruit(x) -> SameWeightAtParty(x))", "all x y.((Fruit(x) & Party(y)) -> SameWeightAtSameWeight(x,y))", "all x.(Fruit(x) -> ProvidedInSameWeightAtParty(x))", "all x y.((Fruit(x) & Party(y)) -> ProvidedInSameWeightAtBeginning(x,y))", "all x y z.((Fruit(x) & PartyParty(y) & Weight(z)) -> ProvidedEvenAtEngagement(x,y))", "all x.(Fruit(x) -> ProvidedAtBeginOfParty(x))", "all x.(Fruit(x) -> ProvidedInEqualWeightAtParty(x))", "all x.(Fruit(x) -> SameWeightAtParty(x))", "all x.(Fruit(x) -> SameWeightAtParty(x))", "all x.((Fruit(x) & Party(y) & SameWeightAtEntrance(x,y)) -> ProvidedInFruit(x,y))", "all x.((Fruit(x) & SameWeight(x)) -> ProvidedAtStartingParty(x))", "all x.(Fruit(x) -> ProvidedInSameWeightAtParty(x))", "all x.((Fruit(x) & SameWeightAtPartyBegin(x)) -> ProvidedIn(x))", "all x.(Fruit(x) -> ProvidedInSameWeightAtEntry(x))", "all x.(Fruit(x) -> SameWeightAtParty(x))"]}
{"id": "folio_train_2056", "nl": "If the fruit had the lowest remaining weight at the end of the party, then it means it was the most popular fruit.", "fol": "all x.(HasLowestRemainingWeight(x) -> IsMostPopularFruit(x))", "prediction": ["all x.((Fruit(x) & LowestRemainingWeightAtEndOfParty(x)) -> MostPopularFruit(x))", "all x.((Fruit(x) & LowestOwnAtEndOfParty(x)) -> MostPopularFruit(x))", "all x.((Fruit(x) & LowestRemainingWeight(x)) -> MostPopularFruit(x))", "all x.((Fruit(x) & LensestRemainingWeight(x) & PartOfParty(x)) -> MostPopularFruit(x))", "all x.((Fruit(x) & LowestRemainingWeightAtEndOfParty(x)) -> MostPopularFruit(x))", "all x.((Fruit(x) & LowestRemainingWeightAtEndOfParty(x)) -> MostPopularFruit(x))", "all x.(Fruit(x) -> (LowestRemainingWeightAtEndOfParty(x) & MostPopularFruit(x)))", "all x.((Fruit(x) & LowestRemainingWeight(x)) -> MostPopularFruit(x))", "all x.((Fruit(x) & LowestRemainingWeight(x) & EndOfParty(x)) -> MostPopularFruit(x))", "all x.((Fruit(x) & LowestRemainingWeight(x) & -Popular(x)) -> MostPopularFruit(x))", "all x.((Fruit(x) & LowestRemainingWeightAtEndOfParty(x)) -> MostPopularFruit(x))", "all x.((Fruit(x) & LowestRemainingWeight(x)) -> MostPopularFruit(x))", "all x.((Fruit(x) & LowestRemainingWeight(x)) -> PopularFruit(x))", "all x.((Fruit(x) & LowestRemainingWeightAtEndOfParty(x)) -> PopularFruit(x))", "all x.((Fruit(x) & LowestRemainingWeightAtEndOfParty(x)) -> MostPopularFruit(x))", "all x.((Fruit(x) & LowestRemainingWeightAtEndOfParty(x)) -> MostPopularFruit(x))"]}
{"id": "folio_train_2057", "nl": "At the end of the party, strawberries had the lowest remaining weight.", "fol": "HasLowestRemainingWeight(Strawberries)", "prediction": ["all x y.((Year(x) & Party(y)) -> LowestRemainingWeight(w,x))", "all x y.((Shake(x) & Party(y)) -> LowestRemainingWeight(x,y))", "all x.(TheProof(x) -> LowestRemainingWeight(x))", "all x y.((Party(x) & Strawberries(y)) -> LowestRemainingWeight(x,y))", "all x.((Shakeberry(x) & PartyEnd(x)) -> LOWESTRemainingWeight(x))", "all x.((Strawberry(x) & PartyEnd(x)) -> LowestRemainingWeight(x))", "all x.((Strawberry(x) & PartyEnd(x)) -> FriendliestRemainingWeight(x))", "all x y.((Party(x) & Strawberry(y)) -> LowestRemainingWeight(y))", "all x.((Shakeberry(x) & LowestRemainingWeight(x)) -> Strawberry(x))", "all x.((Rainbow(x) & -SurplusWeight(x)) -> Strawberry(x))", "all x.((Strawberry(x) & -LowerWord(x)) -> PartyEnd(x))", "all x.((Strawberry(x) & PartyRemainingWeight(x)) -> Lowest(x))", "all x.((SandwichPollins(x) & LastParty(x,y)) -> SmallestWeight(x))", "all x.((Shakeberry(x) & PartyEnd(x)) -> LowestRemainingWeight(x))", "all x y.((PrimaryParty(x) & Strawberry(y)) -> LowestRemainingWeight(y))", "all x.((Strawberry(x) & PartyEnd(x)) -> LowestRemainingWeight(x))"]}
{"id": "folio_train_2058", "nl": "At the end of the party, the amount of leftover blueberries was lower than that of cherries.", "fol": "AmountLowerThan(Blueberry,Cherry)", "prediction": ["all x y.((Party(x) & LeftoverBlueberry(y)) -> LowerThanCr\u00e8me(x,y))", "all x y.((Party(x) & Party(y)) -> (LowerAmountOfBlueberries(x,y) & LowerAmountOfCherries(x,y)))", "all x.((FollowingParty(x) & LeftoverBlueberries(x)) -> LowerThanCherries(x))", "all x y!((Party(x) & LeftoverBlueberries(y)) -> LowerAmount(x,y))", "all x y.((Party(x) & Parties(y) & LeftoverBlueberries(x,y)) -> LowerStandard(x,y))", "all x y.((Party(x) & Party(y)) ->(RemainingBlueberries(x) & -RemainingCherries(x)))", "all x y.((Party(x) & LeftoverBlueberries(x)) -> LowerAmount(x,y))", "all x y.((Party(x) & Blueberry(y) & Cherry(y)) -> LeftoverAmountLessThan(x,y))", "all x.((Politique(x) & LeftoverBlueberries(x) & LeftoverCherries(x)) -> Lower(x))", "all x y.((Party(x) & Redistribution(y)) -> LessThan(x,y))", "all x y((Party(x) & Blueberry(y)) -> ElevenAmount(x,y))", "all x y.((Party(x) & Blueberry(y) & Cherry(y)) -> LeftoverSolid(x,y))", "all x y.((Party(x) & Blueberry(y)) -> LowerAmount(x,y))", "all x.((Blueberry(x) & Cherries(x)) -> Leftovers(x))", "all x.((Party(x) & LeftoverBlueberries(x)) -> LowerMoreThanCherries(x))", "all x y.((Party(x) & Party(y) 2018) -> (LessBalloonAmount(x,y) & LowerBalloonAmount(x,z)))"]}
{"id": "folio_train_2059", "nl": "Benjamin only ate oranges and grapes at the party.", "fol": "(EatsFruit(Orange,Benjamin) & EatsFruit(Grape,Benjamin) & -EatsFruit(Blueberry,Benjamin) & -EatsFruit(Cherry,Benjamin) & -EatsFruit(Strawberry,Benjamin))", "prediction": ["(-(Benjamin(Benjamin) | Grape(Benjamin)))", "(Benjamin,Benjamin) & EatsOrangesAndGrapes(Benjamin,Benjamin))", "all x.((Benjamin(x) & Party(x)) -> (EatensOranges(x) & EatsGrapes(x)))", "Benjamin ate only oranges and grapes at the party.", "(AtParty(Benjamin) & ateOranges(Benjamin) & ateGrapes(Benjamin))", "all x.(Benjamin(x) -> (EatsOranges(x) & EatsTrampoline(x)))", "(Drinks(Benjamin, Oranges) & Eats(Benjamin,Grapes))", "all x y.((Benjamin(x) & Party(y)) ->-Eats(x,y,Oranges & Eats(x,Grapes))", "all x.((Benjamin(x) & Party(x)) -> (AvesOranges(x) | EatsGrapes(x)))", "all x.(Benjamin(x) -> (ateOranges(x) & ateGrapes(x)))", "all x y.((Benjamin(x) & Party(y)) -> (Eats(x,y) & (Orange(y) | Grape(y))))", "Benjamin ate only oranges and grapes at Party.", "Benjamin\u2019s only ate at the party: OrangesAndGrapes(Benjamin)", "all x.(Benjamin(x) -> (AtesOranges(x) & EatsGrapes(x)))", "Benjamin ate Oranges and GrapesAtParty(Benjamin)", "all x.((Benjamin(x) & Party(y)) -> (Eats(x,y) | Eats(x,y)))"]}
{"id": "folio_train_2060", "nl": "Blueberries were the most popular fruit at the party.", "fol": "IsMostPopularFruit(Blueberry)", "prediction": ["all x,y.((Blueberry(x) & Party(y)) -> MostPopularFruit(x,y))", "all x y.((Blueberry(x) & Party(y)) -> MostPopularFruit(x,y))", "all x y.((Blueberry(x) & Party(y)) -> MostPopularFruit(x,y))", "all x.(Blueberry(x) -> MostPopularFruit(x))", "all x.((Blueberry(x) & Party(x)) -> PopularFruitAt(x,y))", "all x.(Blueberry(x) -> PopularFruitAtParty(x))", "party.Fruit(blueberry,fruit) -> MostPopularAtParty(blueberry))", "all x.(Blueberry(x) -> The MostPopularFruitAtParty(x))", "all x y.((Blueberry(x) & PartyParty(y)) -> PopularFruitFestival(x,y))", "all x.(Blueberry(x) -> MostPopularFruitAtParty(x))", "all x.(Blueberry(x) -> PopularFruit(x))", "all x.(Blueberry(x) -> BecomesPopularFruitAtParty(x))", "all x y.((Blueberry(x) & Party(y)) -> FavoriteFruit(x,y))", "all x y.((Blueberry(x) & Party(y)) -> PopularFruit(x,y))", "all x.(Blueberries(x) -> MostPopularFruitAtParty(x))", "all x.(Bloodberry(x) -> MostPopularFruit(x))"]}
{"id": "folio_train_2061", "nl": "Cherries were the most popular fruit at the party.", "fol": "IsMostPopularFruit(Cherry)", "prediction": ["all x y z.((Cherry(x) & Party(y) & Party(z)) -> PopularFruitAt(x,y,z))", "all x.(Cerry(x) -> PopularFruit(x))", "all x y.((Cherry(x) & Party(y)) -> MostPopularFruit(x,y))", "all x.(Cherries(x) -> MostPopularFruitAtParty(x))", "all x.(Cherries(x) -> PopularFruitAtParty(x))", "all x y.(Party(x) & Cherries(y) & MostPopularFruitAtParty(y,x))", "- PopularFruit(cherries)", "all x.(Cherries(x) -> PopularFruitAtParty(x))", "all x.(Cerries(x) -> MostPopularFruit(x))", "all x y.((Cherry(x) & Party(y)) -> PopularFruit(x,y))", "all x.(Cerry(x) -> MostPopularFruitAtParty(x))", "all x.(Cerries(x) -> PopularFruitAtParty(x))", "all x.(Cherry(x) -> MostPopularFruitAtParty(x))", "all x y.((Cherry(x) & Party(y)) -> MostPopularFruit(x,y))", "all x.(Crumble(x) -> MostPopularFruitAtParty(x))", "all x.(Carrot(x) -> (PopularFruit(x,Party) & Carrot(x,Party)))"]}
{"id": "folio_train_2062", "nl": "Benjamin ate blueberries at the party.", "fol": "EatsFruit(Blueberry,Benjamin)", "prediction": ["Benjamin ate blueberries at the party.", "-((Benjamin(Benjamin) & Party(Benjamin)) -> EatsBlueberries(Benjamin,Benjamin))", "(AtParty(Benjamin) & EatsBlueberries(Benjamin))", "all x y.((Benjamin(x) & Blueberry(y) & Party(z)) -> Eats(x,y,z))", "-(BenjaminZamedBlueberries(Benjamin) & Party(Benjamin))", "all x.((Benjamin(x) & Blueberry(x)) -> EatsAtParty(x))", "is where Benjamin\u2019s party started.", "(AtParty(Benjamin) & EatsBlueberries(Benjamin))", "all x y.((Beth(x) & Blueberry(y)) -> EatsAtParty(x,y))", "Benjamin ateblueberriesCallUp.", "(All x.(Benjamin(x) -> AateBlueberries(x)))", "(AtParty(Benjamin) & ateBlueberries(Benjamin))", "(AtParty(Benjamin) & EatsBlueberries(Benjamin))", "Benjamin ate Blueberries AtParty(Benjamin)", "(BenjaminEatsBlueberries(Benjamin)", "-(Benjamin(Benjamin) & Blueberry(Benjamin))"]}
{"id": "folio_train_2063", "nl": "All students who attend in person have registered for the conference. ", "fol": "all x.(AttendConference(x) -> RegisteredForConference(x))", "prediction": ["all x.((Student(x) & AttendsInPerson(x)) -> RegisteredForConference(x))", "all x.((Student(x) & AttendsInPerson(x)) -> RegisteredFor(x))", "all x.((Student(x) & AttendsInPerson(x)) -> RegisteredForConference(x))", "all x.((Student(x) & AttendsInPerson(x)) -> RegisteredForConference(x))", "all x.(AttendesInPerson(x) -> RegisteredForConference(x))", "all x.((Student(x) & AttendsInPerson(x)) -> RegisteredForConference(x))", "all x.((Student(x) & AttendsInPerson(x)) -> RegisteredForConference(x))", "all x.((Student(x) & AttendsInPerson(x)) -> RegisteredForConference(x))", "all x.((Student(x) & AttendsInPerson(x)) -> RegisteredForConference(x))", "all x.((Student(x) & AttendsInPerson(x)) -> RegisteredForConference(x))", "all x.((Student(x) & AttendsInPerson(x)) -> RegisteredForConference(x))", "all x.((Student(x) & AttendTheConferenceInPerson(x)) -> RegisteredForConference(x))", "all x.((Student(x) & AttendsInPerson(x)) -> RegisteredForConference(x))", "all x.((Student(x) & AttendsInPerson(x)) -> RegisteredForConference(x))", "all x.((Student(x) & AttendsInPerson(x)) -> RegisteredForConference(x))", "all x.((Student(x) & AttendsInPerson(x)) -> RegisteredForConference(x))"]}
{"id": "folio_train_2064", "nl": "Students either attend the conference in person or remotely. ", "fol": "all x.(((AttendConference(x) -> AttendInPerson(x)) & -AttendRemotely(x)) | (-(AttendConference(x) -> AttendInPerson(x)) & AttendRemotely(x)))", "prediction": ["all x.(Student(x) -> (AttendsConferenceInPerson(x) | AttendsConferenceRemotely(x)))", "all x y.((Student(x) & Conference(y)) -> (AttendsInPerson(x,y) | AttendsRemotely(x,y)))", "all x.(Student(x) -> (AttendsInPerson(x) | AttendsRemotely(x)))", "all x.(Student(x) -> (AttendsConferenceInPerson(x) | AttendsConferenceRemotely(x)))", "all x.(Student(x) -> (AttendsConferenceInPerson(x) | AttendsConferenceRemotely(x)))", "exists x.(Student(x) & (AttendsInPerson(x) | AttendsRemotely(x)))", "all x.(Student(x) -> (AttendConference(x) & (InPerson(x) | Remotely(x))))", "all x y.((Student(x) & Conference(y)) -> (AttendsInPerson(x,y) | AttendsRemotely(x,y)))", "all x.(Student(x) -> (AttendsConferenceInPerson(x) | AttendsConferenceRemotely(x)))", "all x y.((Student(x) & Conference(y)) -> (AttendsInPerson(x,y) | AttendsRemotely(x,y)))", "all x.(Student(x) -> (AttendsConference(x) & InPerson(x) & (AttendsConference(x) -> Remote(x))))", "all x.(Student(x) -> (AttendConferenceInPerson(x) | AttendConferenceRemotely(x)))", "all x.(Student(x) -> (AttendsInPerson(x) | AttendsRemotely(x)))", "all x.(Student(x) -> (AttendsConferenceInPerson(x) | AttendsConferenceRemotely(x)))", "all x.(Student(x) -> (AttendsConferenceInPerson(x) | AttendsConferenceRurally(x)))", "all x.(Student(x) -> (AttendInPerson(x) | AttendRemotely(x)))"]}
{"id": "folio_train_2065", "nl": "No students from China attend the conference remotely. ", "fol": "all x.((AttendConference(x) & IsFromChina(x)) -> -AttendRemotely(x))", "prediction": ["-exists x.(Student(x) & China(x) & AttendsRemotely(x))", "all x y.((Student(x) & Conference(y)) -> -AttendsRemotely(x,y))", "-exists x.(Student(x) & BasedInChina(x) & AttendsConferenceRemotely(x))", "-exists x.(Student(x) & China(x) & AchesRemotely(x,y))", "-exists x.(Student(x) & -ChinaAttendsConferenceRemotely(x))", "-exists x.(Student(x) & China(x) & AttendsConference(x,Remotely))", "-(Student(x) & China(x))", "-exists x.(Student(x) & FromChina(x) & AttendsConference(x))", "-(Student(x) & FromChina(x) & AttendsConferenceRemotely(x))", "-exists x.(Student(x) & LivesInChina(x))", "-exists x.(Student(x) & Chinese(x) & AttendsConferenceRemotely(x))", "-exists x.(Student(x) & China(x) & AttendCessConference(x))", "-(China(Student(Student) & AttendsConferenceRemotely(Student))", "(-exists x.(Student(x) & China(x)) & AttendsRemotely(x))", "all x.((Student(x) & China(x)) -> -AttendsConferenceRemotely(x))", "-(Student(Chat) & -AttendeesConferenceRemotely(Chat))"]}
{"id": "folio_train_2066", "nl": "James attends the conference but he does not attend the conference remotely.", "fol": "(AttendConference(James) & -AttendRemotely(James))", "prediction": ["all x.((James(x) & Attends(x)) -> -RemoteAttachment(x))", "(exists x.(Attendee(x) & Conference(x)) & -AttendeeAttendee(x)))", "(AttendsConference(James,X) & -AttendsRemote(James,X))", "(all x y.((James(x) & Conference(y)) -> Attends(x,y)) & ((James(x) & Conference(z)) -> -AttendsRemotely(x,z))))", "(iAttendsConference(j,x) & -AttendsConference(j,x))", "(all x.(James(x) -> AttendsConference(x)) & (James(x) -> -AttendsConferenceRemotely(x)))", "(Attends(James,Conference) & -AttendsRemotely(James,Conference))", "all x y.((James(x) & Conference(y)) -> (Attends(x,y) & -AttendsRemotely(x,y)))", "(all x.(JamesAttendsConference(x) -> AttendsConference(x)) & (James & -AttendsConferenceRemotely(James) -> AttendsConference(James)))", "(all x y.((Attends(x) & Conference(y)) -> Attends(x,y)) & ((Attends(x,y) & Conference(y)) -> -AttendsRemotely(x,y)))", "(All x y.((James(x) & Conference(y)) -> Attends(x,y)) & ((James(x) & Conference(y)) -> -AttendsRemotely(x,y)))", "(all x.(AttendsConference(x) & -RemoteAttendance(x)) -> AttendsConference(x))", "all x y.((AttendsConference(x) & AttendsConference(y) & -AttendsConference(x)) -> -Arrive(x,y))", "all x y.((IsAttendsConference(x) & -IsAttendableRemotely(x)) -> AttendsConference(x))", "all x y.((Attends(x,y) & Conference(y)) -> -AttendsRemotely(x,y))", "(Attends(Jim) & NoRemoteAttendance(Jim))"]}
{"id": "folio_train_2067", "nl": "Jack attends the conference and he is a student from China.", "fol": "(IsFromChina(Jack) & AttendConference(Jack))", "prediction": ["(AttendsConference(Jack) & ChineseStudent(Jack))", "(AttendsConference(Jack) & StudentFromChina(Jack))", "(AttendsConference(Jack) & AttendsConference(Jack)) & StudentFromChina(Jack))", "all x.(Jack(x) -> (AttendsConference(x) & StudentFromChina(x)))", "(attends(Jack) & Conference(Jack) & Student(Jack,China))", "(AttendsConference(Jack) & StudentFromChina(Jack))", "(AttendsConference(Jack,Jack) & ChineseStudent(Jack))", "(AttendsConference(Jack) & StudentFromChina(Jack))", "all x.(Jack(x) -> (AttendsConference(x) & StudentInChina(x)))", "(AttendsConference(Jack) & StudentInChina(Jack))", "(AttendsConference(Jack) & StudentFromChina(Jack))", "(AttendsConference(Jack,Chat) & StudentFromChina(Jack))", "-(AttendsConference(Jack) & StudentFromChina(Jack))", "all x y.((Attends(x,y) & Conference(y)) -> Student(x,y))", "(AttendsConference(Jack) & ShanghaiStudent(Jack))", "(AttendsConference(Jack) & Student(Jack) & FromChina(Jack))"]}
{"id": "folio_train_2068", "nl": "James attends the conference but not in person.", "fol": "(AttendConference(James) & -AttendInPerson(James))", "prediction": ["exists x.(James(x) & AttendsConference(x) & -AttendsInPerson(x))", "((JamesAttendsConference(James) & -AttendsInPerson(James)) -> --AttendsInPerson(James))", "all x y.((James(x) & Conference(y)) -> Attends(x,y)) & -((James(x) & Attends(x,y))))", "all x.(Jim-AttendsConference(x) & -AttendsInPerson(x))", "all x.(James(x) -> (AttendsConference(x) & -InPerson(x)))", "exists x.(James(x) & AttendsConference(x) & -InPerson(x))", "(JamesAttendsConference(James) | -Inperson(James)))", "(Attends(James,Conference) & -InPerson(James))", "(all x y.((JamesDavis(x) & Conference(y)) -> Attends(x,y)) & -((JamesDavis(x) & Conference(y))) -> Attends(x,y)))", "(AttendsConference(James,Challenges) & -InPerson(James))", "has a number of people (James(James) & -AttendsConference(James))", "(-AttendsConference(James,James)) | (AttendsConferenceInPerson(James) -> AttendsConferenceInPerson(James))))", "(Allowed(James,Conference) & -InPerson(James,Conference))", "(all x.(James(x) -> AttendsConference(x)) & -(JamesAttendeesConference(x,Person))))", "((JamesAttendsConference(James) & -InPerson(James)) | -Attends(James)))", "James attendsConference(James) & -InPerson(James))"]}
{"id": "folio_train_2069", "nl": "Jack attends the conference in person.", "fol": "(AttendConference(Jack) & AttendInPerson(Jack))", "prediction": ["all x y.((Jack(x) & Conference(y)) -> AttendsInPerson(x,y))", "all x.(Attends(x,Jack,Person) -> -Exhibition(x))", "all x.(Jack(x) -> AttendsConferenceInPerson(x))", "all x.((Jack(x) & Attends(y,x)) -> Person(y))", "(Attends(Jack,Conference) & Person(Jack))", "all x y.((Jack(x) & Conference(y)) -> AttendsInPerson(x,y))", "(ApplesConferenceInPerson(Jack))", "all x y.((Jack(x) & Conference(y)) -> AttendsInPerson(x,y))", "all x y.((Jack(x) & Conference(y)) -> AttendsInPerson(x,y))", "/ AttendsConferenceInPerson(Jack)", "all x y.((Jack(x) & Conference(y)) -> AttendsInPerson(x,y))", "(AttendsConference(Jack) & In Person(Jack))", "(AttendsConference(Jack,person))", "attendsConferenceInPerson(Jack)", "all x y.((Jack(x) & Conference(y) & AttendsInPerson(x,y)) -> AttendsInPerson(x,y))", "all x y.((Jack(x) & Conference(y)) -> AttendsInPerson(x,y))"]}
{"id": "folio_train_2070", "nl": "Jack has registered for the conference.", "fol": "RegisteredForConference(Jack)", "prediction": ["(registeredForConference(Jack,Melbourne))", "(Registrated(Jack,Conference))", "(RecordedForConference(Jack))", "all x.((Jack(x) & RegisteredForConference(x)) -> -(HasConference(x) & Conference(x))))", "HasRecordedForConference(Jack)", "all x.(Jack_(x) -> RegisteredForConference(x))", "(Login(Jack) & Registration(Jack))", "\"Jack\" has registered for conference.", "(JackRecordedForConference(Jack))", "HasRegistered(Jack,Chair)", "all x.(Bjack(x) -> RegisteredForConference(x))", "Jack has registered for the conference.", "(Produces(Jack) & Registered(Jack))", "Jack has registered for Conference(jack)", "Jack has registered for the conference.", "(Recorded(Jack)& Conference(Jack))"]}
{"id": "folio_train_2071", "nl": "David Ha'ivri is a political strategist. ", "fol": "IsPoliticalStrategist(Davidhaivri)", "prediction": ["David Ha'ivri (Landmark), PoliticalStrategist(l))", "all x.((HasIvri(x) & PoliticalStrategist(x)) -> David(x))", "all x.(HaiviRi(x) -> PoliticalStrategist(x))", "David Ha'ivri is a politicalstrategist.", "all x.((President(x) & PoliticalStrategist(x)) -> DavidHaivri(x))", "David Ha'ivri is a political strategist.", "David Ha'ivri (PoliticalStrategist)", "David Ha'ivri is a political strategist.", "David Ha'ivri is a political strategist.", "David H'ivri is a PoliticalStrategist.", "all x.(Hasivri(x) -> PoliticalStrategist(x))", "all x.((President(x) & PoliticalStrategist(x)) -> DavidHa'ivri(x))", "all x.((DavidHa'ivri(x) & PoliticalStrategist(x)) -> -(Leader(x) & StrategicStrategist(x)))", "David Ha'ivri is a political strategist.", "all x.((LightStrategist(x) & DavidHaivri(x)) -> PoliticalStrategist(x))", "David Ha'ivri (BirthOfPoliticalStrategy(HasIvri))"]}
{"id": "folio_train_2072", "nl": "If you are born in Israel to at least one Israeli parent, then you receive citizenship at birth. ", "fol": "all x.(exists y.(BornInIsrael(x) & HasParent(x,y) & IsIsraeliParent(y)) -> IsIsraeliCitizen(x))", "prediction": ["all x.((BornInIsrael(x) & LivesInIsrael(x) & Has(x,1)) -> ReceivesCitizenshipAtBirth(x))", "all x.((BirthInIsrael(x) & HasIsraeliParent(x)) -> ReceiveCitizenship(x))", "all x.((BirthInIsrael(x) & HasIsraeliParent(x)) -> ReceivesCitizenshipAtBirth(x))", "all x.((BirthToIsrael(x) & HasIsraeliParent(x)) -> ReceivesCitizenshipAtBirth(x))", "all x.((BirthInIsrael(x) & ExistsOfIsraeliParent(x)) -> ReceivesCitizenshipAtBirth(x))", "all x.(BornInIsraelToAtLeastOneIranianParent(x) -> ReceiveCitizenshipAtBirth(x))", "all x.((BirthInIsrael(x) & PassesToIsrael(x)) -> ReceiveCitizenshipAtBirth(x))", "all x.((BirthInIsraelToIsrael(x) & AtLeastOneIsraeliParent(x)) -> ReceiveCitizenshipAtBirth(x))", "all x.((BirthInIsrael(x) & HasIsraeliParent(x)) -> ReceivesCitizenshipAtBirth(x))", "all x.((BirthInIsraelTo(x,y) & AtLeastOneIranianParent(x)) -> ReceiveCitizenshipAtBirth(z))", "all x.((BirthInIsrael(x) & HasIsraeliParent(x)) -> ReceivesCitizenshipAtBirth(x))", "all x.((BirthInIsrael(x) & OneIranianParent(x)) -> ReceivesCitizenshipAtBirth(x))", "all x.((BirthInIsrael(x) & InIsrael(x)) -> ReceiveCitizenshipAtBirth(x))", "all x.((BirthInIsrael(x) & HasIsraeliParent(x)) -> ReceivesCitizenship(x))", "all x.((BirthInIsrael(x) & HasIsraeliParent(x)) -> ReceivesCitizenshipAtBirth(x))", "all x.((BirthInIran(x) & HasIsraeliParent(x,2)) -> IncludesCitizenship(x))"]}
{"id": "folio_train_2073", "nl": "David Ha'ivri emigrated to the United States from Israel, where he was born to Israeli parents. ", "fol": "exists x.(EmigratedToCountry(Davidhaivri,America) & BornInIsrael(Davidhaivri) & HasParent(Davidhaivri,x) & IsIsraeliParent(x))", "prediction": ["all x y.((Birth(x) & DavidHaivri(x) & Israel(y)) -> EmigratesToUnitedStates(x,y))", "in Israel on 8th July 1974. David Ha'ivri emigrated to UnitedStates(HasJews) - (baptized to IsraelParents(David) & BelongsToIsrael)))", "all x y.((Ha'ivri(x) & Israel(y)) -> EmigratedToUnitedStates(x))", "all x y.((Department(x) & Land(y) & EmigratedFromIsrael(x) & BornToIraqiParents(x)) -> UnitedStates(x,y))", "(EmigratedFromIsrael(DavidHa'ivri) & BornToIraqiParents(DavidHa'ivri))", "all x.((Saatchien(x) & Israel(x)) -> (EmigratedToUnitedStates(x) & BornToIsraeliParents(x)))", "all x y.((DavidHaivri(x) & Israel(y)) -> EmigratedToUnitedStates(x))", "(-emigresFromIsrael(DavidHa'ivri) & BornToIsraeliParents(DavidHasivri,Israel))", "(EmigresFromIsraelToUnitedStates(DavidHa'ivri) -> BornToIsraeliParents(DavidHa'ivri,States))", "all x.(EmigratedFromIsrael(x) -> (DavidHaivri(x) & BornToIsraeliParents(x)))", "(emigratedToUnitedStates(Haiivri,Israel) & BornTo(Haiivri,Israel))", "(EmigratedFromIsraelToAmerican(DavidHaiivri) & BornToIsraeliParents(d))", "-(Ha'ivri(David) -> EmigratedToUSAFromIsrael(David)))", "all x y.((DavidHaivri(x) & Israel(y)) -> EmigratedTo(x,y))", "(EmigratedFromIsrael(DavidHa'ivri) & BornToIranianParents(David))", "all x y z.((DivadHa'ivri(x) & UnitedStates(y) & Israel(z) & BornTo(x,z)) -> EmigratedTo(x,y))"]}
{"id": "folio_train_2074", "nl": "Several Zionist leaders have been elected to the Shomron Regional Municipal council. ", "fol": "exists x.(IsZionistLeader(x) & ElectedToCouncil(x,ShomronMunicipalCouncil))", "prediction": ["(AboutLivingZionist(z) -> VotedToShotronRegionalConsult(z))", "Several Zionist Leaders Have BeenElectedToCompany(x,Shomron)", "(exists x.(ZionistLeader(x) & ElectedToSshomronRegionalConsult(x)))", "all x y.((ZionistLeader(x) & ShomronRegionalConsult(y)) -> ElectedTo(x,y))", "exists x y.(ZionistLeader(x) & ShomronRegionalMunicipal(y) & ElectedTo(x,y))", "(Election(z) | Local(z)))", "all x y.((Zionist(x) & LocalBone(y)) -> (ElectedToShomronRegionalConsult(x,y) | LocalBoard(x,y)))", "all x.(ZionistLeader(x) -> EstablishedToShomronRegionalMunicipalCircuit(x))", "(ELECTEDZionistLeaders(z) & ShomronRegionalMountain(w))", "exists x y.(ZionistLeader(x) & ShomronRegionalCitizen(y) & ElectedTo(x,y))", "Several Zionist Leaders ElectedToShomronRegionalMountain(z)", "(ElectionsBetween(zionistLeaders) | ElectionsBetween(zionist))", "several Zionist LeadersElitedInToShomronRegionalMunicipalcouncil(z)", "all x.(ZionistLeader(x) -> HasLeadsToStomronRegionalMuncio(x))", "(Oct-Jay(z) & ElectOfShomronRegionalMountain(z))", "exists x y.(ZionistLicutor(x) & EligibleToShouronRegionalMountain(y))"]}
{"id": "folio_train_2075", "nl": "David Ha'ivri is a Zionist leader. ", "fol": "ZionstLeader(Davidhaivri)", "prediction": ["David Ha'ivri is Zionist leader.", "DavidHa'ivri is Zionist Leader.", "David Ha'ivri is Zionist leader based in.", "all x.(ZionistLeader(x) -> DavidHa'ivri(x))", "HasIvri(David,Zionist,Leader)", "all x.((ZionistLeader(x) & DavidHa'ivri(x)) -> Leads(x,Zionist))", "(ZionistLeader(Zeion) & DavidHaivri(Zionist))", "David Ha'ivri (ZionistLider)", "David Ha'ivri is Zionist(x)", "David Ha'ivri (ZionistLider)", "David Ha'ivri (ZionistLeader)", "David Ha'ivri (ZionistLeader)", "all x.(ZionistLeader(x) -> DavidHa'ivri(x))", "David Ha'ivri (ZionistLeader)", "David Ha'ivri (ZionistLeader)", "(ZionistLimit(ZDavidHaivri) & Leader(ZDavid),Guard,Sism))"]}
{"id": "folio_train_2076", "nl": "David Ha'ivri is an Israeli citizen.", "fol": "IsIsraeliCitizen(Davidhaivri)", "prediction": ["David Ha'ivri (IsraeliCitizen(d) & BornInIsrael(d) & LivesInIsrael(d,d))", "David Ha'ivri is IsraeliCitizen(x)", "David Ha'ivri (Israelite)", "David Ha'ivri is IsraeliCitizen(d)", "David Ha'ivri (IsraeliCitizen)", "all x.(IsraeliCitizen(x) -> DavidHaivri(x))", "David Ha'ivri is an IsraeliCitizen(d)", "David Ha'ivri is an IsraeliCitizen(z)", "David Ha'ivri is IsraeliCitizen(David)", "Israel Citizen(DavidHaivri)", "David Ha'ivri is an IsraeliCitizen(t)", "David Ha'ivri (IsraeliCitizen(d) & BornIn(d))", "David Ha'ivevri is IsraeliCitizen(dot) & IsraeliCitizen(dot))", "Ha'ivri is IsraeliCitizen(d)", "all x.((DavidHaivri(x) & IsraeliCitizen(x)) -> LivesInIsrael(x))", "David Ha'ivri is IsraeliCitizen(d)"]}
{"id": "folio_train_2077", "nl": "David Ha'ivri is a United States citizen.", "fol": "UnitedStatesCitizen(Davidhaivri)", "prediction": ["David Ha'ivri is United States Citizen(e)", "David Ha'ivri is United StatesCitizen(y)", "David Ha'ivri is a United States Citizen(x)", "David Ha'ivri is a United States Citizen.", "Ha'ivri is a UnitedStatesCitizen(h)", "David Ha'ivri is a United States citizen.", "(UnitedStatesCitizen(e) & DavidHaivri(e))", "all x.((DavidHaivri(x) & UnitedStatesCitizen(x)) -> CitizensMember(x))", "David Ha'ivri is a United StatesCitizen(x)", "(Citizen(DavidHaivri) & UnitedStatesCitizen(DavidHaivri))", "David Ha'ivri is a UnitedStatesCitizen(v)", "(UnitedStateCitizen(davidhaivri)", "David Ha'ivri (UnitedStatesCitizen(DAHivari))", "-U.S.Citizen(davidhaivri,u.s.)", "David Ha'ivri is a UnitedStatesCitizen(Haivri,USA)", "David Ha'ivri (UnitedStatesCitizen(Vietname) & -NaturalState(Vietname))"]}
{"id": "folio_train_2078", "nl": "David Ha'ivri has been elected to the Shomron Regional Municipal council.", "fol": "ElectedToCouncil(Davidhaivri,ShomronMunicipalCouncil)", "prediction": ["all x.((Assiduary(x) & Election(x,shomron)) -> DavidHaivri(x))", "David Ha'ivri has been elected to Shomron RegionalMunicipal Council.", "all x y.((Election(x) & ShomronRegionalMotoraryCouncil(y)) -> DavidHaivri(x,y))", "David Ha'ivri was elected to Shomron Regional Municipal Council.", "David Ha'ivri elected to Shomron Municipal Council.", "David Ha'ivri has been elected to Shomron RegionalMunicipalConstruction(HasIvri,Shomron)", "David Ha'ivri has been elected to Shomron RegionalMunicipalCity(HAIVRI)", "(elected(david.ha'ivri(d) & ShomronRegionalMunicipalCity(s)))", "David Ha'ivri has been elected to Shomron RegionalMunicipalcouncil(Haiivri)", "(ElectedToShomronRegionalMuncil(DavidHaivri))", "David Ha'ivri is Elect(e) to ShomronRegionalMeritorialCouncil(a))", "all x y.((DavidHa'ivri(x) & RegionalMuncio(y) & ElectedTo(x,y)) -> Shomron(x))", "(ElectedToShomronRegionalMunicipalChair(DavidHa'ivri))", "David Ha'ivri has been elected to Shomron RegionalMaterialConseil.", "-ElectedToShomronRegionalMountainChair(Haivri,David))", "all x.((DavidHaivri(x) & ShomronRegionalMunicipal(x)) -> ElectedTo(x,y))"]}
{"id": "folio_train_2079", "nl": "Mary has the flu.", "fol": "HasDisease(Mary,FluDisease)", "prediction": ["(Hasflu(Mary,Maria) -> Has(Mary,Maria))", "all x y.((Mary(x) & Flu(y)) -> Has(x,y))", "(HasFlu(Mary))", "has Flu(Mary)", "(HasFlu(Mary))", "all x.((Mary(x) & HasFib(x)) -> HasFlu(x))", "(HasFlu(Mary,June,2019))", "(HasFlu(Mary,Maria))", "(HasFib(Maria) | GetsFluid(Maria))", "may have flu.", "(Has(Mary,Flu))", "all x.((Mary(x) & HasFlu(x)) -> HasFlu(x))", "MaryHasFib(Mary)", "(HasFlu(Mary,Flu))", "exists x.(Maria(x) & HasHunt(x))", "(Has(Mary,Flu))"]}
{"id": "folio_train_2080", "nl": "Flu and influenza are the same disease.", "fol": "all x.(HasDisease(x,FluDisease) <-> HasDisease(x,InfluenzaDisease))", "prediction": ["all x y.((Flu(x) & Influenza(y)) -> SameDisease(x,y))", "all x.(Flu(x) & Influenza(x))", "\u2013(Flu(f) & Influenza(influenza)) -> SameDisease(f))", "exists x.(Flu(x) & Influenza(x))", "all x.((Flu(x) & Influenza(x)) -> TheOtherDisease(x))", "both flu and influenza dna(d) -> SymbioseDisease(diverse))", "all x.((Flu(x) & Influenza(x)) -> SameDisease(x))", "all x.((Flu(x) & Influenza(x)) -> SameDisease(x))", "(all x.(Flu(x) -> Influenza(x)))", "all x.((Flu(x) | Influenza(x)) -> SameDisease(x))", "all x.((Flu(x) & Influenza(x)) -> SameDisease(x))", "(SameDisease(flu,influenza))", "(SameDisease(flu,influenza) & SameDisease(flu,influenza))", "(IdentityDisease(flu) & IdentityDisease(influenza))", "all x y.((Flu(x) & Influenza(y)) -> SameDisease(x,y))", "all x.((Flu(x) & Influenza(x)) -> SameDisease(x))"]}
{"id": "folio_train_2081", "nl": "Susan doesn't have influenza.", "fol": "-HasDisease(Susan,InfluenzaDisease)", "prediction": ["all x.(Susan(x) -> -HasInfluenza(x))", "all x.((Susan(x) & -HasInfluenza(x)) -> -HasInfluenza(x,Susan))", "means that Susan is notHasInfluenza(Susan)", "(-HasInfluenza(susan))", "(-HasInfluenza(Susan))", "(-HasInfluenza(Susan)(Susan,Susan))", "Susan isn'tHasInfluenza(susan)", "-HasInfluenza(Susan)", "(-HasInfluenza(susan))", "Susan -HasInfluenza(susan)", "-HasInfluenza(Susan)", "-HasInfluenza(susan)", "(-HasInfluenza(susan))", "hasn'tHasInfluenza(Susan)", "Susan doesn't have Influenza(s)", "-HasInfluenza(Susan)"]}
{"id": "folio_train_2082", "nl": "Either Mary or Susan has influenza.", "fol": "(HasDisease(Mary,InfluenzaDisease) | HasDisease(Susan,InfluenzaDisease))", "prediction": ["(HasInfluenza(Maria) | HasInfluenza(Susan))", "-(HasInfluenza(Mary) | HasInfluenza(Susan))", "all x.((Maria(x) | Susan(x)) -> HasInfluenza(x))", "(HasInfluenza,Maria) | HasInfluenza(Maria,Susan)))", "(HasIllness(Maria) | HasIllness(Susan))", "exists x.(Maria(x) | Susan(x)) & HasInfluenza(x))", "(HasInfluenza(Mary) | HasInfluenza(Susan))", "exists x.(Mary(x) | Susan(x)) & Influenza(x))", "(HasIllness(Mary,X) | HasIllness(Susan,X)))", "(exists x.((Mary) | Susan(x)) & Influenza(x)))", "(influenza(Mary,Maria) | Influenza(Susan,Susanna))", "(HasInfluenza(Mary) | HasInfluenza(Mary))", "all x.(HasInfluenza(x) -> (Mary(x) | Susan(x)))", "(HasInfluenza(Mary) | HasInfluenza(Susan))", "((Mary(Mary) | Susan(Mary))) -> HasInfluenza(mary,sea))", "(HasInfluenza(mary) | HasInfluenza(susan))"]}
{"id": "folio_train_2083", "nl": "James Cocks was a British lawyer.", "fol": "(IsBritish(James) & IsLawyer(James))", "prediction": ["(BritishLawyer(JamesCocks) & BornInLondon(JamesCocks))", "all x.((JamesCocks(x) & BritishLawyer(x)) -> WasCompanied(x))", "all x.(JammesCocks(x) -> BritishLawyer(x))", "-Litigation(JimmyCocks)", "(BritishLawyer(JimmyCocks) & American(JimmyLocks))", "James Cocks (b.1907) & BritishLawyer(x))", "James Cocks (BritishLawyer)", "James Cocks (b.1911 & BritishLawyer(c))", "all x.((JamesCocks(x) & BritishLawyer(x)) -> JamesCocks(x))", "the BritishLawyer(JimmyCocks)", "James Cocks (born 1927) & OriginallyFromBritain(x))", "James Cocks (b.1944) - Lawmaker(c) & British(d))", "the late James Cocks.", "all x.((Columbus(x) & BritishLawyer(x)) -> JamesCocks(x))", "James Cocks (britain's lawyer)", "all x.((JimmyCocks(x) & BritishLawyer(x)) -> FoundInCocks(x))"]}
{"id": "folio_train_2084", "nl": "James Cocks was a Whig politician who sat in the House of Commons.", "fol": "(IsWhig(James) & IsPolitician(James) & SitsInHouseOfCommons(James))", "prediction": ["all x.((WhhistPolitician(x) & SitsInCommons(x)) -> JamesCocks(x))", "James Cocks(TwentyPiece(Cocks) & WhigPolitician(Cocks) & SitsInHouseOfCommons(Cocks))", "all x y.((Whig(x) & WhigPolitician(y)) -> SitsInHouseOfCommons(x,y))", "James Cocks was a WhigPolitician(c) & SitsInHouseOfCommons(c))", "James Cocks (WhigPolitician(Whig)) satInHouseOfCommons(Ripley,SatInCambridge,SatInHouseOfCommons)", "James Cocks (PresidentWhiskeyLiving(Cocks) & SitsInHouseOfCommons(Cocks))", "James Cocks was WhigPolitician (SatInHouseOfCommons) & WasHonorable(Dreams) & SitsIn(Dreams).)", "James Cocks, who sat in HouseOfCommunities, was WhigPolitician.", "James Cocks (WhigPolitician(w) & MemberOfCommunity(h))", "all x y.((WhiskeyPolitician(x) & Whig(y) & SatInHouseOfCommons(x)) -> JamesCocks(x))", "all x.(Whig(x) -> JamesCocks(x))", "James Cocks (WhgPolitician(e) & SitsInCommons(e))", "James Cocks (WhistPolitician(Wig))", "James Cocks (WhistPolitician(16) & SitsInHouseOfCommons(16))", "James Cocks, 67, WhigPolitician(s) & SitsInHouseOfCommons(s))", "all x.((WhuggishPolitician(x) & SitsInCommunity(x)) -> JamesCocks(x))"]}
{"id": "folio_train_2085", "nl": "A British is a European.", "fol": "all x.(IsBritish(x) -> IsEuropean(x))", "prediction": ["all x.(British(x) -> European(x))", "all x.(British(x) -> European(x))", "all x.(British(x) -> European(x))", "all x.(British(x) -> European(x))", "all x.(British(x) -> European(x))", "all x.(British(x) -> European(x))", "all x.(British(x) -> European(x))", "all x.(British(x) -> European(x))", "all x.(British(x) -> European(x))", "all x.(British(x) -> European(x))", "all x.(British(x) -> European(x))", "all x.(British(x) & European(x))", "all x.(British(x) -> European(x))", "all x.(British(x) -> European(x))", "all x.(British(x) -> European(x))", "all x.(British(x) -> European(x))"]}
{"id": "folio_train_2086", "nl": "Any lawyer is familiar with laws.", "fol": "all x.(IsLawyer(x) -> IsFamiliarWithLaws(x))", "prediction": ["all x.(Lawyer(x) -> AffiliatesWithLaws(x))", "all x.(Lawyer(x) -> FamiliarWithLaws(x))", "all x.(Lawyer(x) -> FamiliarWithLaws(x))", "all x.(Lawyer(x) -> FamilyWithLaws(x))", "all x.(Lawyer(x) -> FamiliarWithLegal(x))", "all x.(Lawyer(x) -> FamiliarWithLaws(x))", "all x.(Lawyer(x) -> FamiliarWithLaws(x))", "all x.(Legal(x) -> KnowledgeableWithLaws(x))", "all x.(Lawyer(x) -> FamousWithLaws(x))", "all x y.((Lawyer(x) & Law(y)) -> Family(x,y))", "all x.(Lawyer(x) -> (FunnyWithLaws(x)))", "all x.(Lawyer(x) -> FamiliarWithLaws(x))", "all x.(Lawyer(x) -> FamiliarWithLaws(x))", "all x.(Lawyer(x) -> IsFamiliarWithLaws(x))", "all x.(Litigation(x) -> familiarWithLaws(x))", "all x.(Lawyer(x) -> FamilyWithLaws(x))"]}
{"id": "folio_train_2087", "nl": "Some Whigs speak French.", "fol": "exists x.(IsWhig(x) & CanSpeakFrench(x))", "prediction": ["exists x.(Whaff(x) & SpeaksFrench(x))", "exists x.(Which(x) & Whig(x) & SpeaksFrench(x))", "exists x.(Whist(x) & Speak(x,French))", "exists x.(Whisg(x) & SpeaksFrench(x))", "exists x.(Whisg(x) & Snorkel(x))", "exists x.(Whisg(x) & SpeaksFrench(x))", "exists x.(Whisg(x) & Whig(x) & SpeakingFrench(x))", "exists x.(Whaga(x) & SpeaksFrench(x))", "exists x.(Whig(x) & SpeaksFrench(x))", "exists x.(Whig(x) & SpysFrench(x))", "exists x.(Wig(x) & SpeaksFrench(x))", "exists x.(Whisky(x) & SpeaksFrench(x))", "exists x.(Whig(x) & Speak(x,French))", "exists x.(Wheg(x) & SpeakesFrench(x))", "exists x.(Wig(x) & SpeakFrench(x))", "exists x.(Whist(x) & SpeaksFrench(x))"]}
{"id": "folio_train_2088", "nl": "No lawyer ever sat in the House of Commons.", "fol": "-exists x.(IsLawyer(x) & SitsInHouseOfCommons(x))", "prediction": ["-exists x.(Lawyer(x) & SatInHouseOfCommons(x))", "-exists x.(Lawyer(x) & SatInHouseOfCommons(x))", "-exists x.(Lawyer(x) & SittingInHouseOfCommons(x))", "-exists x.(Lawyer(x) & SitsInHouseOfCommons(x))", "-exists x.(Lawyer(x) & SatFollowingRecord(x))", "-exists x.(Lawyer(x) & SitsInHouseOfCommons(x))", "-exists x.(Lawyer(x) & SitsInHomeOfCommons(x))", "-exists x.(Lawyer(x) & SitsInHouseOfCommons(x))", "-exists x.(Lawyer(x) & SitsInHouseOfCommons(x))", "-exists x.(Lawyer(x) & SitsInHouseOfCommunities(x))", "-exists x y.(Lawyer(x) & HouseOfCommons(y))", "-exists x.(Lawyer(x) & satInHouseOfCommons(x))", "-exists x.(Lawyer(x) & EverSatInHouseOfCommons(x))", "-exists x.(Lawyer(x) & SeatedInHouseOfCommunities(x))", "-exists x.(Advocate(x) & SitsInHouseOfCommands(x))", "\u2013 neverSatInHouseOfCommons."]}
{"id": "folio_train_2089", "nl": "Some European is familiar with laws.", "fol": "exists x.(IsEuropean(x) & IsFamiliarWithLaws(x))", "prediction": ["exists x.(European(x) & FamiliarWithLaws(x))", "exists x.(European(x) & KnowsLaws(x))", "exists x.(European(x) & FamiliarWithLaws(x))", "exists x.(European(x) & FamiliarWithLaws(x))", "exists x.(European(x) & AmusedOfLaws(x))", "exists x.(European(x) & FamiliarWithLaws(x))", "exists x.(European(x) & FamiliarWithLaws(x))", "exists x.(European(x) & FamiliarWithLaws(x))", "exists x.(European(x) & ConnaughtWithLaws(x))", "exists x.(European(x) & FamousWithLaws(x))", "exists x.(European(x) & FamiliarWithLaws(x))", "exists x.(European(x) & FamiliarWithLaws(x))", "exists x.(European(x) & FamiliarWithLaws(x))", "exists x.(European(x) & FamiliarWithLaws(x))", "exists x.(European(x) & FamiliarWithLaws(x))", "exists x.(European(x) & FamiliarWithLaws(x))"]}
{"id": "folio_train_2090", "nl": "James Cocks speaks French.", "fol": "CanSpeakFrench(James)", "prediction": ["James Cocks speaks French.", "James Cocks speaks French.", "All x.((Company(x) & JamesCocks(x)) -> SpeaksFrench(x))", "James CocksSpeaksFrench(JamesCocks)", "all x.(JamesCocks(x) -> SpeaksFrench(x))", "all x y.((Cocks(x) & French(y)) -> Speaks(x,y))", "James CocksSpeaksFrench(JamesCocks)", "all x y.((JimmyCocks(x) & French(y)) -> Speaks(x,y))", "James Cocks speaks French.", "James Cocks speaksFrench.", "James Cocks speaks French", "James Cocks speaksFrench(JamesCocks)", "all x.(JamesCocks(x) -> SpeaksFrench(x))", "-SingsFrench(MichaelCocks,French)", "all x.(SpeakFrench(x) -> JamesCocks(x))", "-speaksFrench(JamesCocks)"]}
{"id": "folio_train_2091", "nl": "Beasts of Prey is either a fantasy novel or a science fiction novel.", "fol": "((IsNovel(Beastsofprey) & IsFantasyNovel(Beastsofprey)) | IsScienceFictionNovel(Beastsofprey))", "prediction": ["all x.(BeastsOfPrey(x) -> (FantasyNews(x) | ScienceFictionNews(x)))", "all x.(BeastsOfPrey(x) -> (FantasyNovel(x) | ScienceFictionNovel(x)))", "all x.(BeastsOfPrey(x) -> (FantasyNovel(x) | ScienceFictionNovel(x)))", "all x.(BeastsOfPrey(x) -> (IsFantasyNovel(x) | IsScienceFictionNovel(x)))", "all x.(BTS(x) -> (FantasyNovel(x) | ScienceFictionNovel(x)))", "all x.(BeastsOfPrey(x) -> (FantasyNovel(x) | ScienceFictionNovel(x)))", "(all x.(BeastsOfPrey(x) -> FantasyNovel(x)) | all y.(ScienceFictionNovel(y))))", "all x.(BeastsOfPrey(x) -> (FantasyNovel(x) | ScienceFictionNovel(x)))", "all x.(BeastsOfPrey(x) -> (FantasyNovel(x) | ScienceFictionNovel(x)))", "((BeastsOfPrey(x) | ScienceFictionNovel(x)))", "all x.(BeastsOfPrey(x) -> (FictionNovel(x) | ScienceFictionNovel(x)))", "all x.(BeastsOfPrey(x) -> (FantasyNovel(x) | ScienceFictionNovel(x)))", "((BeautyOfPrey(9)) | ScienceFiction(9)))", "all x.(BeastsOfPrey(x) -> (FantasyNovel(x) | ScienceFictionNovel(x)))", "all x.(BeastsOfPrey(x) -> (FantasyNovel(x) | ScienceFictionNovel(x)))", "all x.(BeastsOfPrey(x) -> (FantasyNovel(x) | ScienceFictionNovel(x)))"]}
{"id": "folio_train_2092", "nl": "Science fiction novels are not about mythological creatures", "fol": "all x y.((IsScienceFictionNovel(x) & IsMythological(y) & IsCreature(y)) -> -IsAbout(x,y))", "prediction": ["all x.(ScientificFictionNovel(x) -> -MythologicalCreatures(x))", "all x.(Narrative(x) -> -MythologicalCreatures(x))", "all x y.((ScienceFictionNovel(x) & MythologicalCreature(y)) -> -(StoryFiction(x) & MythologicalCreature(y)))", "all x.(ScienceFictionNovel(x) -> -Mine(x))", "all x y.((ScienceFictionNovel(x) & MythologicalCreature(y)) -> -(MythologicalCreedit(x,y) & -MythologicalCreature(x)))", "all x y.((ScientificFictionNovel(x) & MythologicalCreature(y)) -> -IsAbout(x,y))", "all x.(ScienceFictionNovel(x) -> (-PoorMythologicalCreams(x) & -PoorMemorialCreams(x) & -PoorMythologicalCreams(x)))", "all x.(ScienceFictionNovel(x) -> -IsMythologicalCreature(x))", "all x.((ScienceFictionNovel(x) & -MythologicalCreatures(x)) -> -MythologicalCreatures(x))", "all x.(ScienceFictionNovel(x) -> -Is(x,mythologicalCreatures))", "all x.(ScienceFictionNovel(x) -> -RelatedToMythologicalCreatures(x))", "all x y.((ScienceFictionNovel(x) & MythologicalCreature(y)) -> -InvolvedInNovel(x,y))", "all x.(ScientificFiction(x) -> -(MythologicalCreatures(x) | MythologicalCreatures(x))))", "all x.(ScienceFictionNovel(x) -> -MemoryologicalCreatures(x))", "all x.(ScienceFictionNovel(x) -> -MeanologicalCreatures(x))", "all x y.((ScienceFictionNovel(x) & MythologicalCreatures(y)) -> -(Scientific(x) & MythologicalCreatures(x,y) & -Mythological(y))))"]}
{"id": "folio_train_2093", "nl": "Beasts of Prey Is about a creature known as the Shetani.", "fol": "(IsAbout(Beastsofprey,Shetani) & IsCreature(Shetani))", "prediction": ["all x.(BeastsOfPrey(x) -> (CreatureKnownAsShetani(x)))", "all x.(BeastsOfPrey(x) -> (CreamKnownAsShetani(x)))", "all x.(BeastsOfPrey(x) -> (CreatureKnownAsHetani(x)))", "all x.((BeastsOfPrey(x) & Creature(x) & Shetani(x)) -> About(x))", "all x.(BeastsOfPrey(x) -> (Creature(x) & Shetani(x)))", "all x.(BeastsOfPrey(x) -> About(x,ShetaniCreature))", "All x.(BetweenBeastsOfPrey(x) -> WasProposedBy(x))", "all x y z.((BeastsOfPrey(x) & Creature(y) & Creature(z) & Shetani(w)) -> About(x,y,z,w))", "all x.(BeastsOfPrey(x) -> AboutCreature(x))", "all x.(BeastsOfPrey(x) -> (CarnivalLimits(x) & Hertani(x)))", "all x.(BeastsOfPrey(x) -> (CreatureKnownAsShetani(x)))", "all x.(BeatsOfPrey(x) -> (Cream(x) & Shetani(x)))", "all x.(BeastsOfPrey(x) -> (Cream(x) & Shetani(x)))", "all x.(BeastsOfPrey(x) -> AboutCreatureLikeShetani(x))", "all x.(BeastsOfPrey(x) -> AboutCreature(x))", "all x y.((BeastsOfPrey(x) & Creature(y)) -> Shetani(y))"]}
{"id": "folio_train_2094", "nl": "Shetanis are mythological.", "fol": "IsMythological(Shetani)", "prediction": ["all x.(Shetani(x) -> Mythological(x))", "all x.(Shetani(x) -> Mythological(x))", "all x.(Shetani(x) -> Mythological(x))", "all x.(Shetani(x) -> Mythological(x))", "All x.(Shetani(x) -> Mythological(x))", "all x.(Shetani(x) -> Mythological(x))", "all x.(Shetani(x) -> Mythological(x))", "all x.(Shetani(x) -> Mythological(x))", "all x.(Shetani(x) -> Mythological(x))", "all x.(Shettin(x) -> Mythological(x))", "all x.(Shetani(x) -> Mythological(x))", "all x.(Shetani(x) -> Mythological(x))", "all x.(Shetani(x) -> Mythological(x))", "all x.(Shetani(x) -> Mythological(x))", "all x.(Shetani(x) -> Mythological(x))", "all x y.((Shetani(x) & Goddess(y)) -> Mythological(x))"]}
{"id": "folio_train_2095", "nl": "Beasts of prey is a fantasy novel.", "fol": "IsFantasyNovel(Beastsofprey)", "prediction": ["(FantasyNovel(BeastsOfPrey) & FantasyNovel(BeastsOfPrey))", "all x.(BeastsOfPrey(x) -> FantasyNovel(x))", "all x.(BeastsOfPrey(x) -> FantasyNovel(x))", "all x.(BeastsOfPrey(x) -> FantasyNovel(x))", "all x.(BeastsOfPrey(x) -> FantasyNovel(x))", "all x.(BeastsOfPrey(x) -> FantasyNovel(x))", "all x.(BeastsOfPrey(x) -> FantasyNovel(x))", "all x.(Between(x) -> FantasyNovel(x))", "all x.(BeastsOfPrey(x) -> FantasyNovel(x))", "all x y.((Beast(x) & Prey(y)) -> FantasyNovel(x))", "all x.(BeatsOfPrey(x) -> FantasyNovel(x))", "all x.(BeastOfPrey(x) -> FantasyNovel(x))", "all x.(BeastsOfPrey(x) -> FantasyNovel(x))", "all x.((BeastsOfPrey(x) & FantasyRoman(x)) -> IsIs(x,Is(x))", "all x.(BeastsOfPrey(x) -> FantasyNovel(x))", "all x.(BeastsOfPrey(x) -> FantasyNovel(x))"]}
{"id": "folio_train_2096", "nl": "Beasts of prey isn't a science fiction novel.", "fol": "-IsScienceFictionNovel(Beastsofprey)", "prediction": ["all x.(BeastsOfPrey(x) -> -ScientificFictionNovel(x))", "all x.((BeastsOfPrey(x) & -ScientificFictionNovel(x)) -> -ScienceFictionNovel(x))", "-exists x.(Beast(x) & Prey(x))", "all x y.((BeastsOfPrey(x) & Actor(y)) -> -ScienceFictionNovel(x))", "all x.(BeastsOfPrey(x) -> -ScienceFictionNovel(x))", "all x.(BeastsOfPrey(x) -> (-ScientificFictionNovel(x) & -ScientificFictionNovel(x)))", "exists x.(BeastsOfPrey(x) & - ScienceFictionNovel(x))", "all x.(BeastsOfPrey(x) -> -ScientificFictionNovel(x))", "exists x.(BeastsOfPrey(x) & -ScientificFictionNovel(x))", "all x.(BeastsOfPrey(x) -> -ScienceFictionNovel(x))", "(It's ScienceFictionNovel(BeastsOfPrey) & -ScienceFictionNovel(BeastsOfPrey))", "-(BeastsOfPrey(x) & ScienceFictionNovel(x))", "all x.(BeatsOfPrey(x) -> -ScienceFictionNovel(x))", "all x.(BeastsOfPrey(x) -> -ScientificFantasyNovel(x))", "all x.(BeastsOfPrey(x) -> -Fiction(x))", "all x.(BeastsOfPrey(x) -> -ScienceFictionNovel(x))"]}
{"id": "folio_train_2097", "nl": "A shetani is either mythological or a creature, but not both.", "fol": "((IsMythological(Shetani) & -IsCreature(Shetani)) | (-IsMythological(Shetani) & IsCreature(Shetani)))", "prediction": ["all x.(Shetani(x) -> ((Mythological(x) | Creature(x)) & -(Mythological(x) & Creature(x)))))", "all x.(Shetani(x) -> ((Mythological(x) | Creature(x))))", "all x.(Shetani(x) -> ((Mythological(x) | Creature(x)) & -(Mythological(x) & Creature(x))))", "all x.(Shetani(x) -> ((Mythological(x) | Creature(x)) & -(Catherine(x) & Creature(x)))))", "all x.(Shetani(x) -> -> ((Mythological(x) | Creature(x))) & -(Mythological(x) & Creature(x))))", "all x.(Shetani(x) -> ((Mythological(x) | Creature(x)) & -(Mythological(x) & Creature(x)))))", "all x.(Shetani(x) -> ((Mythological(x) | Creature(x)) & -(Mythological(x) & Creature(x)))))", "all x.(Shetani(x) -> ((Mythological(x) | Creature(x))) | (-Mythological(x) & Creature(x))))", "all x.(Shetani(x) -> (-Cream(x) & -Mythological(x)))", "all x.(Shetani(x) -> ((Mythological(x) | Creature(x)) & -(Mythological(x) & Creature(x))))", "all x.(Shetani(x) -> ((Mythological(x) & -Creature(x)) | (-Mythological(x) & Creature(x)))))", "all x.(Shitani(x) -> ((Mythological(x) | Creature(x)) & -(Mythological(x) & Creature(x)))))", "all x.(Shetani(x) -> ((Mythological(x) | Creature(x)) & -(Mythological(x) & Creature(x)))))", "all x.(Shetani(x) -> ((Mythological(x) | Creature(x)) & -(Mythological(x) & Creature(x)))))", "all x.(Shetani(x) -> ((Mythological(x) & -Creature(x)) | (-Mythological(x) & Creature(x)))))", "all x.(Shetani(x) -> ((Mythological(x) | Creature(x)) & -(Mythological(x) & Creature(x)))))"]}
{"id": "folio_train_2098", "nl": "Odell is an English surname originating in Odell, Bedfordshire.", "fol": "all x.(HasSurnameOdell(x) -> IsSurname(x))", "prediction": ["Odell (English Surname(x) & OriginatesIn(x,Damfordshire))", "(EnglandSurname(Odell) & OriginatingIn(Odell,Bedfordshire))", "Odell, Bedfordshire (english surname) & OriginatedIn(Odell,Bedfordshire)", "Odell.ee Surname(E.Surname) & OriginatesIn(e.OdellBelfastshire)", "Odell, Bedfordshire Surname(e) -> UrgedInOdell(e))", "Odell (Englandsurname(en) & OriginatesIn(en) & OdellResearchCenter(en))", "(GermanOdell(d) & OriginatedIn(d) & Bedfordshire(u) & OriginatedIn(d))", "Odell (ex: EnglandSurname(x) & OriginatedIn(x,Odell,Belfastshire))", "Odell (Englisch: FromOdell(r) & InBedfordshire(r))", "all x y.((Odell(x) & EnglishSurname(y)) -> OriginatesIn(y,Belfastshire))", "Odell (EnglandSurname) & OriginatedInOdell[England] & Bedfordshire(England))", "Odell (englishSurname) & OriginatesIn(equals(e) & OdellBeverley(e))", "Odell (Englandsurname(England) & OriginatedIn(England) & In(England,Belfastshire))", "Odell is English Surname(x) & OriginatedIn(x,Odell,Belfastshire)", "Odell (en) & EnglishSurname(en) & originatedIn(en) Odell(en) & Bedfordshire(e))", "(EnglischSurname(Odell) & OriginatedIn(Odell,Belfastshire))"]}
{"id": "folio_train_2099", "nl": "In some families Odell is spelled O'Dell, in a mistaken Irish adaptation.", "fol": "exists x.(HasSurnameOdell(x) & IsSpelledODell(x))", "prediction": ["exists x.(Family(x) & SpelledO'Dell(x) & MistakenIrishAdaptation(x))", "exists x.(Family(x) & SpelledOdell(x))", "all x y.((Family(x) & Odell(y)) -> (SpelledO'Dell(y) & MistakenIrishAdaptation(x,y)))", "all x.((Family(x) & OdellWorried(x)) -> O'Dell(x))", "all x.((Family(x) & Odell(x)) -> SpelledO'Dell(x))", "all x y.((Family(x) & Odell(y)) -> (SpelledO'Dell(y) & MistakenIrishAdaptation(y)))", "all x.((Family(x) & Odell(x)) -> SpelledOTDell(x))", "In some families Odell isspelledO'Dell, in mistakenIrishAdaptation.", "exists x.(Family(x) & SpelledO'Dell(x) & MistakenIrishAdaptation(x))", "all x.((Family(x) & Odell(x)) -> O'Dell(x))", "all x.(Float(x) -> (OdellSpelled(x,Odell) | MistakenIrishAdaptation(x,Odell)))", "all x y z.((Family(x) & Odell(y) & IrishAdaptation(z)) -> (NamedO'Dell(y) & Mistaken(x,y,z)))", "all x.(Family(x) -> (Odell(x) | O'Dell(x)))", "all x.((Family(x) & OdellSpelt(x)) -> MisguidedIrishAdaptation(x))", "all x.(Family(x) -> (OdellSpell(x) & MistakenIrishAdaptation(x)))", "exists x.(Family(x) & SpellsO'Dell(x))"]}
{"id": "folio_train_2100", "nl": "Notable people with the surname include Amy Odell, Jack Odell, and Mats Odell.", "fol": "(HasSurnameOdell(AmyOdell) & IsNotablePerson(AmyOdell) & HasSurnameOdell(JackOdell) & IsNotablePerson(JackOdell) & HasSurnameOdell(MatsOdell) & IsNotablePerson(MatsOdell))", "prediction": ["(NotablePerson(anonym(anonym) & AmyOdell(anonym)) & NotablePerson(anonym) & JackOdell(anonym) & MatsOdell(anonym))", "(NotablePeopleWith(amber(amber) | NotablePeopleWith(amber(amber))) -(AmyOdel(amber) & JackOdell(amber) & MatsOdell(amber)))", "(Tenth(Person(Person(Person) & AmyOdell(P)) & (JackOdell(P) | MatsOdell(P)))", "(SignificantPerson(s) & AmyOdell(s) & JackOdell(s) & MatsOdell(s))", "(NotablePeopleWithSurname(ahsorname.ahsorname.asu) -> (AmyOdell(a) | JackOdell(b) | MatsOdell(c)))", "(HasSurname(Person(Person) & AmyOdell(P) & JackOdell(P) & MatsOdell(P))", "amongst those with surnames(somewhat(somewhat) -> (AmyOdell() | JackOdell() | MatsOdell()))", "(NotablePersonWithName(amash_odell) | NotablePersonWithName(amash_odell)) & NotablePerson(amash(odell) & NotablePerson(odell))", "all x.((Person(x) & AmyOdell(x)) -> (JackOdell(x) & MatsOdell(x)))", "(SignificantPerson(name) & AmyOdell(name) & JackOdell(name) & MatsOdell(name))", "(Significant(someone with the surname): AmyOdell(AP) | Famous(someone with surname) | Famous(someonewithsurname(someone)))", "(Notable(Person(Person) & HasSurname(Person)) -> (AyamOdell(P) | JackOdell(P) | MatsOdell(P)))", "exists x.(Name(x) & (AmyOdell(x) | JackOdell(x) | MatsOdell(x)))", "at least 8 persons with the surname (yet) (AmyOdell(y) | JackOdell(y) | MatsOdell(y)))", "(AmyOdell(Amy) | JackOdell(Amy) | MatsOdell(Amy)))", "(SignificantPeopleWithSurname(e) & AmyOdell(e) & JackOdell(e) & MatsOdell(e))"]}
{"id": "folio_train_2101", "nl": "Amy Odell is a British singer-songwriter.", "fol": "(IsBritish(AmyOdell) & IsSinger(AmyOdell) & IsSongWriter(AmyOdell))", "prediction": ["all x.(((Singer(x) & Songwriter(x)) -> AmyOdell(x))", "Amy Odell (SingerSongwriter(x) & British(x))", "all x.((Singer(x) & Actress(x)) -> Writer(x))", "(BritishSingerSongwriter(AmyOdell)", "all x.((Singer(x) & Songwriter(x) & British(x)) -> AmyOdell(x))", "all x y.((AmyOdell(x) & BritishSinger(y)) -> Scriptwriter(x,y))", "all x.((AmyOdell(x) & BritishSingerSongwriter(x)) -> BritishSinger(x))", "Amy Odell (AmyPoet(11) & BritishSingerSongwriter(11))", "all x.((Singer(x) | Songwriter(x)) -> AmyOdell(x))", "(SingerSongwriter(AmyOdell) & British(Odell))", "all x.(Lovely(x) -> (SingerSongwriter(x) & British(x)))", "(Singer(AmyOdell) & BritishSinger(Odell))", "(SingerSongwriter(AmyOdell) & British(AmyOdell))", "all x.((Singer(x) & Songwriter(x)) -> AmyOdell(x))", "(SingerSongwriter(AmyOdell) & British(Odell))", "is BritishSingerSongwriter(amaOdell)"]}
{"id": "folio_train_2102", "nl": "Jack Odell is an English toy inventor.", "fol": "(IsEnglish(JackOdell) & IsToyInventor(JackOdell))", "prediction": ["Jack Odell (ToyInventor)", "Jack Odell est un toy inventor.", "Jack Odell (ToyInventor) & Invents( Jack,Deck,Jack))", "(Inventor(jack,Odell) & Toy(o))", "Jack Odell ist ein toy inventor.", "Jack Odell (ToyInventor)", "Jack Odell (ToyInventor) & InventsToys(x))", "(ToyInventor(JackOdell) | ToyInventor(JackOdell))", "Jack Odell,ToyInventor(x)", "Jack Odell is an inventor and ToyInventor ofToys(x) & WorksWithToys(x))", "all x.(ToyInventor(x) -> CanWork(x))", "(Inventor(JackOdell,Toy))", "(Inventor(JackOdell) -> ToyInventor(JackOdell))", "(Inventor(JackOdell) & ToyInventor(JackBodell))", "Jack Odell (ToyInventor)", "Jack Odell (ToyInventor)"]}
{"id": "folio_train_2103", "nl": "Jack Odell is a notable people.", "fol": "IsNotablePerson(JackOdell)", "prediction": ["all x y.((JackOdell(x) & People(y)) -> Notable(x,y))", "((JackOdell(jack) & RemarkablePeople(jack)) | IsHistorical(jack))", "(NotablePeople(JackOdell)", "(RemarkablePeople(Odell,Jack))", "Jack Odell is known for his work & personal experiences.", "(NotablePeople(JackOdell) -> Admirable(Odell,J))", "all x.((JackOdell(x) & KnownFor(x)) -> RemarkablePerson(x))", "all x y.((JackOdell(x) & People(y)) -> Notable(x))", "all x.(JackOdell(x) -> NotablePeople(x))", "all x.((JackOdell(x) & NotablePeople(x)) -> JackOdell(x))", "(RemarkablePerson(JackOdell)", "all x.(JackOdell(x) -> NoteworthyPeople(x))", "(NotablePeople(JackOdell) & FamousPeople(Odell))", "all x.((JackOdell(x) & ImportantPerson(x)) -> Noteworthy(x))", "Jack Odell este unremarkable(man)", "(NotablePeople(JackOdell) & LivesIn(JackOdell,Long) & LivesIn(JackOdell,Long))"]}
{"id": "folio_train_2104", "nl": "Odell is Amy Odell's surname.", "fol": "HasSurnameOdell(AmyOdell)", "prediction": ["(AmyOdell(Amy) & Surname(AmyOdell))", "Odell is AmyAdellsSurname(o).", "AdelleMr.(AmyOdell)", "Odell is AmyOdellssurname(2-Days(21))", "Odell (AmyOdell(Amy) & Surname(AmyOdell))", "Odell is AmyOdellsSurname(x))", "Odell ist AshOdellsSurname(x))", "(UsedByAddress(Odell) & AmyOdell(Odell))", "Odell \u2013 AmyOdell(x)", "Odell is surname of AmyOdell(x))", "Odell(amy) -> Surname(amy))", "Odell (AmyOdell(a) & Surname(b))", "Odell (or AmyOdell(x))", "(Surname(AmyOdell))", "(AmyOdell(Mammy) & Surname(AmyOdell))", "Odell is Amy'ssurname(Odell)"]}
{"id": "folio_train_2105", "nl": "Amy Odell is an English toy inventor.", "fol": "(IsEnglish(AmyOdell) & ToyInventor(AmyOdell))", "prediction": ["Amy Odell, ToyInventor, is an independent.", "(Inventor(AmyOdell) & ToyInventor(AmyOdell))", "(Inventor(AmyOdell) & WorksWithToy(AmyOdell))", "Amy Odell,ToyInventor(a)", "Amy Odell,ToyInventor,FollowingAmyOdell.", "(Inventor(AmyOdell) & ToyInventor(AmyOdell))", "((ToyInventor(AmyOdell) & ToyInventor(amy)) & Artist(amy))", "Amy Odell is an inventor ofToys(Amy) & HasToys(Amy,Alyce))", "(ToyInventor(AmyOdell) -> ToyInventor(amy))", "Amy Odell (ToyInventor) -> FoundedIn(am))", "Amy Odell is an Inventor(x) -> ToyInventor(x))", "Amy Odell ist ein ToyInventor(a) & InventsToys(e) & InventsToys(d) & InventsToys(e) & -InventsToys(d))", "(Inventor(AmyOdell) & Toy(AmyOdell) & Writer(AmyOdell,Stock))", "Amy Odell (ToyInventor) is a BritishIconics(y) & EstablishedIn(y,x))", "toy inventor.", "All x.((ToyInventor(x) & AmyOdell(y)) -> InventsToys(y))"]}
{"id": "folio_train_2106", "nl": "Amy Odell is also Amy O'dell.", "fol": "(HasSurnameOdell(AmyOdell) & IsSpelledODell(Amyodel))", "prediction": ["all x.(AmyOdell(x) -> AmyOdell(x))", "OliviaDell(AmyOdell)", "(AmyOdesll(Amy) | AmyOdell(Amy)))", "(AmyOdell(Amy) & AmySondell(Amy))", "all x.((AmyOdell(x) & AmyOdell(x)) -> AmyOdell(x))", "all x.(AmyOdell(x) -> AmyO'Dell(x))", "all x.((AmyOdell(x) & Amy(x)) -> AmyOdell(x))", "all x.((AmyOdell(x) & AmyOdell(x)) -> AmyOdell(x))", "all x.(AmyOdell(x) -> AmyDell(x))", "-(AmyOdell(a) & AmyOdell(c))", "(Odell(AmyOdell) & Odell(AmyOdell))", "(AmyOdell(Amy) & AmyOdell(Amy))", "((AmyDell(Amy) & AmyOdell(Amy)) -> Amen(Odell(Amy))", "all x.((AmyOdell(x) & AmyOdell(x)) -> Amy(x))", "all x.(AmyOdell(x) -> AmyOdell(x))", "all x.(AmyOdell(x) -> AmyOdell(x))"]}
{"id": "folio_train_2107", "nl": "If you go somewhere by train, you will not lose time.", "fol": "all x.(TravelByTrain(x) -> -TimeLost(x))", "prediction": ["all x.(Train(x) -> -LoseTime(x))", "all x.((Train(x) & GoesSomewhere(x)) -> -LoseTime(x))", "all x.(GoesByTrain(x) -> -LosesTime(x))", "all x.((Train(x) & GoesAround(x)) -> -LosesTime(x))", "all x.(GoesMovementByTrain(x) -> -TimeLoss(x))", "all x.(Train(x) -> -LosesTime(x))", "all x.(Runs(x) -> -LosesTime(x))", "all x.(Train(x) -> -LoseTime(x))", "all x.((GroundbyTrain(x) & For(x,y) & Local(y)) -> -LosesTime(x,y))", "all x.((Train(x) & Go(x)) -> -LosesTime(x))", "all x y.((Train(x) & Travel(y)) -> -LosesTime(x,y))", "all x.(IfYouGoBeyond(x,Train) -> -LosesTime(x))", "all x.((GoesByTrain(x) & Train(x)) -> -LosesTime(x))", "all x.((Train(x) & GoesToOnce(x)) -> -LoseTime(x))", "all x.((Train(x) & GoesOrganic(x)) -> -LosesTime(x))", "all x.((Exit(x) & Train(x)) -> -LosesTime(x))"]}
{"id": "folio_train_2108", "nl": "If you go somewhere by car and meet traffic jam, you will lose time.", "fol": "all x.((TravelByCar(x) & EncounterTrafficJam(x)) -> TimeLost(x))", "prediction": ["all x.((GoesSomewhereByCar(x) & MeetsTrafficJam(x)) -> LosesTime(x))", "all x.((GoesByCar(x) & MeetsTrafficJam(x)) -> LosesTime(x))", "all x.((Go(x) & Car(x) & MissTrafficJam(x)) -> LoseTime(x))", "all x.(Goes(x,car) & MeetsTrafficJam(x)) -> LosesTime(x))", "all x.((Car(x) & Wherever(x) & MeetsTrafficJam(x)) -> LosesTime(x))", "(all x.((GoesInCar(x) & MeetsTrafficJam(x)) -> LosesTime(x)))", "all x.((GoesByCar(x) & MeetsTrafficJam(x)) -> LosesTime(x))", "all x.((Go(x) & Car(x) & MeetsTrafficJam(x)) -> LosesTime(x))", "all x.((UseCar(x) & MeetsTrafficJam(x)) -> LosesTime(x))", "all x.((LosesTime(x) & GossThroughCar(x) & MeetsTrafficJam(x)) -> LosesTime(x))", "all x y.(((GoesWithCar(x) & Location(y) & MeetsTrafficJam(x)) -> LosesTime(x))", "all x y.((Place(x) & Car(y) & MeetingTrafficJam(x,y)) -> LosesTime(x))", "all x.((Goes(x,y) & Car(y) & MeetsTrafficJam(x,y)) -> LosesTime(x))", "all x.((GoesWithCar(x) & MeetsTrafficJam(x)) -> LosesTime(x))", "all x.((Person(x) & Go(x,y) & Car(y) & MeetsTrafficJam(x)) -> LosesTime(x))", "all x.((FlyAway(x) & MeetTrafficJam(x)) -> LosesTime(x))"]}
{"id": "folio_train_2109", "nl": "If you lose time, you will be late for work.", "fol": "all x.(TimeLost(x) <-> IsLateForWork(x))", "prediction": ["all x.(LoseTime(x) -> LateForWork(x))", "all x.((LosesTime(x) & LateForWork(x)) -> LateForWork(x))", "all x.(LosesTime(x) -> LateForWork(x))", "all x.(LosesTime(x) -> LateForWork(x))", "all x.((LosesTime(x) & LateForWork(x)) -> LateForWork(x))", "all x.(LoseTime(x) -> LateForWork(x))", "all x.((LosesTime(x) & LateForWork(x)) -> LateForWork(x))", "all x.(LoseTime(x) -> LateForWork(x))", "all x.(LosesTime(x) -> LateForWork(x))", "all x.(LosesTime(x) -> LateForWork(x))", "all x.(LosesTime(x) -> LateForWork(x))", "all x.(LosesTime(x) -> LateForWork(x))", "all x.(LosesTime(x) -> LateForWork(x))", "all x.(LosesTime(x) -> LateForWork(x))", "all x.(LoseTime(x) -> LateForWork(x))", "all x.(LosesTime(x) -> LateForWork(x))"]}
{"id": "folio_train_2110", "nl": "Mary can get from New Haven to New York City either by train or car.", "fol": "((TravelByTrain(Mary) & -TravelByCar(Mary)) | (-TravelByTrain(Mary) & TravelByCar(Mary)))", "prediction": ["all x y.((New Haven(x) & NewYork(y)) -> (Train(x,y) | Car(x,y)))", "(Map of New Haven(Mary) | MapOfNyc(Mary)))", "all x.((MrsMilan(x) & NewHonor(x)) -> (CanGetToNewYork(x) & (Train(x) | Car(x))))", "all x.(Maria(x) -> (NewHanoverToNewYork(x) | CityToNewYork(x)))", "all x.(Mammy(x) -> (GetFromNewHanoverToNewYork(x) & (Train(x) | Car(x))))", "(all x y z.((New Haven(x) | NewYorkCity(y)) & (Train(z) | Car(z))) -> GetTo(x,y,z))", "all x.(Mammy(x) -> (GivesFromNewHanoverToNewYorkCity(x) | GetsByCar(x)))", "all x.((Mama(x) & NewHands(y)) -> (Train(x) | Car(x)))", "all x.(Mary(x) -> (ContainTrainMany(x) | ContainCar(x)))", "all x.(Mary(x) -> (HasTrain(x) | HasCar(x)))", "all x.(Mary(x) -> (FromNew HavenToNewYorkCity(x) & (Train(x) | Car(x))))", "(Goes(Maria) & FromNew HavenToNewYorkCity(Maria,Train) | Gets(Maria,Car)))", "all x.(Mama(x) -> (GetsFromNewNew Haven(x) & (Gets(x,NewYork) & Train(x) | Gets(x,NewYork))))", "Mary (Conqueror(Mary,New Haven) | Car(Mary)))", "all x y.((Mother(x) & NewHaven(y) & NewYorkCity(z)) -> (Train(x,y) | Car(x,y)))", "all x y.((Maria(x) & New Haven(y)) -> (CanTurn(x,y) | CanTurn(x,y)))"]}
{"id": "folio_train_2111", "nl": "Mary is late for work.", "fol": "IsLateForWork(Mary)", "prediction": ["(LastForWork(Mary) -> LateForWork(Mary,y))", "Mary islateForWork(Mary)", "(LastForWork(Mary))", "Mary is LateForWork(Mary,Work)", "Mary is late for work.", "all x.(Maria(x) -> LateForWork(x))", "all x.(MariaLay(x,Work) -> Late(y))", "Mary is LateForWork(Mary)", "Mary is LateForWork(Mary)", "(LastForWork(Maria) ->,margina(Mary)))", "Mary is lateforwork(MAy)", "exists x.(Mary(x) & LateForWork(x))", "(LastForWork(Mary))", "Mary is lateforWork(Mary)", "All x.(Mary(x) -> LateForWork(x))", "all x.(Mary(x) -> LateForWork(x))"]}
{"id": "folio_train_2112", "nl": "Mary gets from New Haven to New York City by train.", "fol": "TravelByTrain(Mary)", "prediction": ["all x y.((Mother(x) & NewHunt(y)) -> (GettingFromToNewYorkCity(x,y) & Train(x)))", "Mary gets from New HavenToNewYorkCity(Mary,Train)", "(GetsFromNew HavenToNewYork(Mary,Train))", "all x y.((Mary(x) & NewHaven(y) & NewYorkCity(y)) -> GetsByTrain(x,y))", "(Train(Mother) -> NewHavenToNewYork(Mary))", "all x y z.((Mary(x) & NewHunt(y) & NewYorkCity(z)) -> GetsByTrain(x,y,z))", "Mary GetsTo(Maria,NewYork,Train)", "(GivesNew HavenToNewYork(Mary,Train))", "(ToMaria(Maria): NewHour(Maria) | London(Maria)))", "Mary has a train connection.", "(GrandmaToNewYork(Mary) & NewHendon(Mary))", "all x.((Mammy(x) & New Haven(x)) -> NewYorkCityTrain(x))", "Mary gets from New Haven to New York City,(Yeah Train))", "(NewHunt(Mary) -> NewYorkCityTrain(Mary,NewHaven))", "(Train(Mary,NewHanover) & NewYorkCity(Mary))", "(MariaGatherFromNew HavenToNewYorkCity(Mary))"]}
{"id": "folio_train_2113", "nl": "Mary gets from New Haven to New York City by car.", "fol": "TravelByCar(Mary)", "prediction": ["(HasCanyon(Mary,New Haven) -> GetsByCar(Mary,NewYork City))", "Mary getes from New Haven to New York City by car.", "(GetsMariaFromNewHaven(Maria) | GetsFromNewYorkCity(Mary,NY))", "(AtNewHaven(Mama) & ToNewYorkCity(Mama))", "(GetsFromNew HavenToNewYorkCity(Mary) & Car(Mary))", "Mary (RunsNew Haven(Maria) -> NewYorkCity(Maria))", "the one and Only Car(Mary,NewHanniver,NewYorkCity)", "(GetsFromNew HavenToNewYorkCity(Mary,car))", "all x y z.((Mary(x) & NewHair(y) & New YorkCity(z)) -> (TiesTo(x,y,z) & Hates(x,y)))", "(GoesInCar(Mary,NewHunt,NewYork))", "Mary is a New Haven resident (all x y.((Mary,NewHaven) & City(y)) -> GetsByCar(x,y)))", "all x.((Material(x) & NewHunt(x,NewYork)) -> GetsOfCar(x,NewYork))", "((Maria(Maria) & NewHunt(Maria) & NewYork(Maria)) -> Drive(Maria,NewHunt,NewYork)))", "Mary gets from New Haven to New York City by Car.", "(Getting(Mary,New Haven,NewYork))", "has a car. (PrimaryToNewHaven(Mary) & Is(Mary,Y) & NewYorkCity(Mary,Y)))"]}
{"id": "folio_train_2114", "nl": "Mary meets traffic jam.", "fol": "EncounterTrafficJam(Mary)", "prediction": ["(Material(Mary) & TrafficJam(Mary))", "(Mame(Mary,Brush) & Meets(Mary,TrafficJam))", "Mary meetsTrafficJam(Meets(Meets(Meets(Meets(Meets(MeetsCargo))", "(Mothers(Mary,TrafficJam) & Meets(Mary,TrafficJam))", "(MariaMeetsTrafficJam(Material,mars))", "exists x.(Mary(x) & MeetsTrafficJam(x))", "Mary meetstrafficJam(Mary)", "all x.(Mary(x) -> MeetsTrafficJam(x))", "-ReachesTrafficJam(Mary)", "(MameetsTrafficJam(Mama,Mary))", "exists x.(Mary(x) & MeetsTrafficJam(x))", "(MamaMeetsTrafficJam(Mama)).", "(MabelMeetsTrafficJam(Meets(Mary,GM))", "\u2013 MeetsTrafficJam(Mama))", "all x y.((Mary(x) & TrafficJam(y)) -> Meets(x,y))", "-Mary meetsTrafficJam(Mary))"]}
{"id": "folio_train_2115", "nl": "If a person is hungry, the person is uncomfortable.", "fol": "all x.(IsHungry(x) -> IsUncomfortable(x))", "prediction": ["all x.(Hungry(x) -> Uncomfortable(x))", "all x.((Person(x) & Hungry(x)) -> Uncomfortable(x))", "all x.(Hungry(x) -> Uncomfortable(x))", "all x.(Hungry(x) -> Uncomfortable(x))", "all x.(Hungry(x) -> Uncomfortable(x))", "all x.(Hungry(x) -> Uncomfortable(x))", "all x.(Hungry(x) -> Uncomfortable(x))", "all x.((Person(x) & Hungry(x)) -> Uncomfortable(x))", "all x.(Hungry(x) -> Uncomfortable(x))", "all x.(Hunger(x) -> Uncomfortable(x))", "all x.(Hungry(x) -> Uncomfortable(x))", "all x y.((Person(x) & Hungry(x)) -> Uncomfortable(y))", "all x.(Hungry(x) -> Uncomfortable(x))", "all x.(Hungry(x) -> Uncomfortable(x))", "all x.(Hungry(x) -> Uncomfortable(x))", "all x.(Hungry(x) -> Uncomfortable(x))"]}
{"id": "folio_train_2116", "nl": "If a person is uncomfortable, the person is unhappy.", "fol": "all x.(IsUncomfortable(x) -> -IsHappy(x))", "prediction": ["all x.((Person(x) & Uncomfortable(x)) -> Unhappy(x))", "all x.((Person(x) & Uncomfortable(x)) -> Unhappy(x))", "all x.(Uncomfortable(x) -> Unhappy(x))", "all x.((Person(x) & Uncomfortable(x)) -> Unhappy(x))", "all x.(Uncomfortable(x) -> Unsatisfied(x))", "all x.(Uncomfortable(x) -> Unsatisfied(x))", "all x.(Uncomfortable(x) -> Unhappy(x))", "all x.(Uncomfortable(x) -> Unhappy(x))", "all x.(Uncomfortable(x) -> Unhappy(x))", "all x.(Uncomfortable(x) -> Unhappy(x))", "all x.(Uncomfortable(x) -> Unsatisfied(x))", "all x.(Uncomfortable(x) -> Unhappy(x))", "all x.(Uncomfortable(x) -> Unhappy(x))", "all x.(Uncomfortable(x) -> Unsatisfied(x))", "all x.(Uncomfortable(x) -> Unhappy(x))", "all x.((Person(x) & Uncomfortable(x)) -> Unhappy(x))"]}
{"id": "folio_train_2117", "nl": "If a person is not hungry, the person is unhappy.", "fol": "all x.(-IsHungry(x) -> -IsHappy(x))", "prediction": ["all x.((Person(x) & -Hungry(x)) -> Unhappy(x))", "all x.((Person(x) & -Hungry(x)) -> Unhappy(x))", "all x.((Person(x) & -Hungry(x)) -> Unhappy(x))", "all x.(-Hungry(x) -> Unhappy(x))", "all x.((Person(x) & -Hungry(x)) -> Unhappy(x))", "all x.((Person(x) & -Hungry(x)) -> Unhappy(x))", "all x.((Person(x) & -Hungry(x)) -> Unhappy(x))", "all x.((Person(x) & -Hungry(x)) -> Unhappy(x))", "all x.((Person(x) & -Hungry(x)) -> Unhappy(x))", "all x.((Person(x) & -Hungry(x)) -> Unhappy(x))", "all x.((Person(x) & -Hungry(x)) -> Unhappy(x))", "all x.((HappyPerson(x) & -Hungry(x)) -> Unhappy(x))", "all x.((Person(x) & -Hungry(x)) -> Unhappy(x))", "all x.((Person(x) & -Hungry(x)) -> Unhappy(x))", "all x.((Person(x) & -Hungry(x)) -> Unhappy(x))", "all x.((Person(x) & -Hungry(x)) -> Unhappy(x))"]}
{"id": "folio_train_2118", "nl": "Tipped employees do not get a guaranteed minimum wage.", "fol": "all x.(IsTippedEmployee(x) -> -ReceivesMinWage(x))", "prediction": ["all x.(TippedEmployee(x) -> -GarantizedMinimumWage(x))", "all x.(TippedEmployee(x) -> -GaantedMinimumWage(x))", "all x.(TippedEmployee(x) -> -GuaranteedMinimumWage(x))", "all x.(TippedEmployee(x) -> -GivableMinimumWage(x))", "all x.(TippedEmployee(x) -> (-GanitedMinimumWage(x)))", "all x.(TippedEmployee(x) -> -GatheredMinimumWage(x))", "all x.(TippedEmployee(x) -> -FixedMinimumWage(x))", "all x.(TippedEmployee(x) -> -GatheredMinimumWage(x))", "all x.(TippedEmployee(x) -> -GivenMinimumWage(x))", "all x.(TippedEmployee(x) -> -GarantiedMinimumWage(x))", "all x.(Tipped(x) -> -GuaranteedMinimumWage(x))", "all x.(TippedEmployee(x) -> -GetsMinimumWage(x))", "all x.(Tipped(x) -> -GetsGaranteedMinimumWage(x))", "all x.(TippedEmployee(x) -> -GanitedMinimumWage(x))", "all x.(TippedEmployee(x) -> -MarginMinimumWage(x))", "all x.(TippedEmployee(x) -> -GaranteedMinimumWage(x))"]}
{"id": "folio_train_2119", "nl": "If a person is a white-collar worker, they will get a guaranteed minimum wage (All white-collar workers get a guaranteed minimum wage).", "fol": "all x.(IsWhiteCollarWorker(x) -> ReceivesMinWage(x))", "prediction": ["all x.(WhiteCollarWorker(x) -> GuaranteedMinimumWage(x))", "all x.(WhiteCollarWorker(x) -> GetsGarantiedMinimumWage(x))", "all x.(WhiteCollarWorker(x) -> GuaranteedMinimumWage(x))", "all x.(WhiteCollarWorker(x) -> GuaranteedMinimumWage(x))", "((Person(p) & WhiteCollarWorker(p)) -> GuaranteedMinimumWage(p)))", "all x.(WhiteCollarWorker(x) -> GuaranteedMinimumWage(x))", "all x.(WhiteCollarWorker(x) -> GuaranteedMinimumWage(x))", "all x.(WhiteCollarWorker(x) -> GuaranteedMinimumWage(x))", "all x.(WhiteCollarWorker(x) -> GuaranteedMinimumWage(x))", "all x.(WhiteCollarWorker(x) -> GuaranteedMinimumWage(x))", "all x.(WhiteCollarWorker(x) -> GuaranteedMinimumWage(x))", "all x.(WhiteCollarWorker(x) -> GuaranteedMinimumWage(x))", "all x.(WhiteCollarWorker(x) -> GuaranteedMinimumWage(x))", "all x.(WhiteCollarWorker(x) -> GuaranteedMinimumWage(x))", "all x.(WhiteCollarWorker(x) -> GuaranteedMinimumWage(x))", "all x.(WhiteCollarWorker(x) -> GuaranteedMinimumWage(x))"]}
{"id": "folio_train_2120", "nl": "All lawyers are white-collar workers.", "fol": "all x.(IsLawyer(x) -> IsWhiteCollarWorker(x))", "prediction": ["all x.(Lawyer(x) -> WhiteCollarWorker(x))", "all x.(LegalAdviser(x) -> WhiteCollarWorker(x))", "all x.(Lawyer(x) -> WhiteCollarWorker(x))", "all x.(Lawyer(x) -> WhiteCollarWorker(x))", "all x.(Lawyer(x) -> WhiteCollarWorker(x))", "all x.(Lawyer(x) -> WhiteCollarWorker(x))", "all x.(Lawyer(x) -> WhiteCollarWorker(x))", "all x.(Lawyer(x) -> WhiteCollarWorker(x))", "all x.(Lawyer(x) -> WhiteCollarWorker(x))", "all x.(Lawyer(x) -> WhiteCollarWorker(x))", "all x.(License(x) -> WhiteCollarWorker(x))", "all x.(Lawyer(x) -> WhiteCollarWorker(x))", "all x.(Lawyer(x) -> WhiteCollarWorker(x))", "all x.(Lawyer(x) -> WhiteCollarWorker(x))", "all x.(Lawyer(x) -> WhiteCollarWorker(x))", "all x.(Lawyer(x) -> WhiteCollarWorker(x))"]}
{"id": "folio_train_2121", "nl": "Every advocate is a lawyer.", "fol": "all x.(IsAdvocate(x) -> IsLawyer(x))", "prediction": ["all x.(Advocate(x) -> Lawyer(x))", "all x.(Advocate(x) -> Lawyer(x))", "all x.(Advocate(x) -> Lawyer(x))", "all x.(Advocate(x) -> Lawyer(x))", "every advocate is a lawyer.", "all x.(Advocate(x) -> Lawyer(x))", "all x.(Advocate(x) -> Lawyer(x))", "all x.(Advocate(x) -> Lawyer(x))", "all x.(Advocate(x) -> Lawyer(x))", "all x.(Advocate(x) -> Lawyer(x))", "all x.(Adviser(x) -> Lawyer(x))", "all x.(Avocate(x) -> Lawyer(x))", "all x.(Advice(x) -> Lawyer(x))", "all x.(Advocate(x) -> Lawyer(x))", "all x.(Advocate(x) -> Lawyer(x))", "all x.(Advocate(x) -> Lawyer(x))"]}
{"id": "folio_train_2122", "nl": "Mary is not a lawyer or a tipped employee.", "fol": "((-IsLawyer(Mary) & -IsTippedEmployee(Mary)) | (IsLawyer(Mary) & IsTippedEmployee(Mary)))", "prediction": ["-(Lawyer(Mary) | TippedEmployee(Mary)))", "(-Lawyer(Maria) & -TippedEmployee(Maria))", "(-Lawyer(Mary) & -TippedEmployee(Mary))", "all x.(Mary(x) -> -(Lawyer(x) | TipEmployee(x)))", "(-Lawyer(Mary) & -TippedEmployee(Mary))", "(-(Lawyer(Mary) | TippedEmployee(Mary)))", "(-Lawyer(Mary) & -TippedEmployee(Mary))", "-(Lawyer(Mary) | TippedEmployee(Mary)))", "(-Lawyer(Mary) & -TippedEmployee(Mary))", "Mary isn'tAldermanOrTippedEmployee(Mary)", "none of these things (Mary(Mary) & (Unlawyer(Mary) | TippedEmployee(Mary))))", "all x.(Maria(x) -> (-Lawyer(x) | TippedEmployee(x)))", "(-Lawyer(Mary) & -TippedEmployee(Mary))", "(-Elder(Mary) & -Legal(Mary) & -TippedEmployee(Mary))", "(-(MarysSocialist(Mary) & -Lawyer(Mary)) | -TippedEmployee(Mary)))", "(-Lawyer(Mary) & -TippedEmployee(Mary)))"]}
{"id": "folio_train_2123", "nl": "Mary is a white-collar worker.", "fol": "IsWhiteCollarWorker(Mary)", "prediction": ["(WhiteCollarWarrior(Mary) & WorksIn(Mary,WhiteCollar))", "all x.(WhiteCollarWorker(x) -> Mary(x))", "(WhiteCollarWorker(Mary)", "exists x.(WhiteCollarWorker(x) & Mary(x))", "all x.(WhiteCollarWorker(x) -> Mary(x))", "all x.((Mary(x) & WhiteCollarWorker(x)) -> WorksFor(x,Mary))", "all x.(WhiteCollarWorker(x) -> Mary(x))", "(WhiteCollarWorker(Mary)", "all x.(WhiteCollarWorker(x) -> Mary(x))", "(WhiteCollarWorker(Mary) & WorksWith(Mary))", "all x.(WhiteCollarWorker(x) -> Mary(x))", "(WhiteCollarWorker(Mary)", "Mary is WhiteCollarWorker(Mary)", "all x.(WhiteCollarWorker(x) -> MaryAbandoned(x))", "(WhiteCollarWorker(Mary) & WorksFor(Mary))", "(WoodenCollarWorker(Mary))"]}
{"id": "folio_train_2124", "nl": "Mary is an advocate.", "fol": "IsAdvocate(Mary)", "prediction": ["-Advocate(Mary)", "Mary Est.Avocate(m)", "(AvvoCareer(Mary) & Advocate(Mary))", "(Advocate(Mary) & SharesAttitude(Mary,Atlanta))", "Mary is advocate.", "(Avocate(Mary) & Advocate(Mary))", "Mary is advocate.", "(Advocate(Mary) & WorksWith(Mary,Dear,Mama))", "(Avocate(Mary) -> Advocate(Mary))", "EstaModernAvocate(Mary)", "Mary is advocate(Mary)", "Mary is advocate.", "Mary is advocate.", "Mary is advocate.", "Mary este avocat.", "Mary is advocate."]}
{"id": "folio_train_2125", "nl": "Mary is not an advocate.", "fol": "-IsAdvocate(Mary)", "prediction": ["-Advocate(Mary,D)", "Mary & -Avocate(Mary)", "-Advocate(Mary)", "Mary is notAdvocate(Mary)", "(-Advocate(Mary))", "Mary is notAdvocate(Mama)", "Mary, a woman, neexists y.((Amy(y) & Advocate(y))", "Mary is -Advocate(Maria)", "Mary n'est pasAdvocate(Maria)", "(-Advocate(Mary))", "(-Advocate(Maria,Mary))", "Mary nees-advocacy(TM)", "-Advocate(Mary)", "Mary is notAdvocate(Mary)", "Ms(Maria) & -Advocate(Maria))", "Mary is notAdvocate(Mary)"]}
{"id": "folio_train_2126", "nl": "Mary is either an advocate or a tipped employee.", "fol": "(IsAdvocate(Mary) | IsTippedEmployee(Mary))", "prediction": ["all x.(Mary(x) -> (Advocate(x) | TippedEmployee(x)))", "all x.(Madam(x) -> (Avocate(x) | TippedEmployee(x)))", "exists x.(Advocate(x) | TippedEmployee(x))", "all x.(Advocate(x) | TippedEmployee(x))", "(Advocate(Mary) | TippedEmployee(Mary))", "all x.(Executive(x) | TippedEmployee(x))", "all x.(Mary(x) -> (Avocate(x) | TippedEmployee(x)))", "(Advocacy(Mary) | TippedEmployee(Mary))", "all x.(Maria(x) -> (Advocate(x) | TippedEmployee(x)))", "all x.(Maria(x) -> (Advocate(x) | TippedEmployee(x)))", "all x.(Mary(x) -> (Advocate(x) | TippedEmployee(x)))", "all x.(Advocate(x) | TapedEmployee(x))", "all x.(MissIsMadeAdvocate(x) | TippedEmployee(x))", "all x.(Mary(x) -> (Advocate(x) | TippedEmployee(x)))", "all x.(Mary(x) -> (Advocate(x) | TippedEmployee(x)))", "all x.(Mary(x) -> (Advocate(x) | TippedEmployee(x)))"]}
{"id": "folio_train_2127", "nl": "If Mary is not an advocate and gets a guaranteed minimum wage, she is not a tipped employee.", "fol": "((-IsAdvocate(Mary) & ReceivesMinWage(Mary)) -> -IsTippedEmployee(Mary))", "prediction": ["all x.((Advocate(x) & GuaranteedMinimumWage(x)) -> -TippedEmployee(x))", "all x.((Mary(x) & -Avocate(x) & GuaranteedMinimumWage(x)) -> -TippedEmployee(x))", "all x.((Mary(x) & -Adviser(x) & GuaranteedMinimumWage(x)) -> -TippedEmployee(x))", "all x.((Advocate(x) & -Advocate(x) & GuaranteedMinimumWage(x)) -> -TippedEmployee(x))", "all x.(((Advocate(x) & GuaranteedMinimumWage(x)) -> -TippedEmployee(x)))", "all x.((Avocate(x) & -Avocate(x) & GuaranteedMinimumWage(x)) -> -TippedEmployee(x))", "all x.((Mary(x) & -Advocate(x) & GuaranteedMinimumWage(x)) -> -TippedEmployee(x))", "all x.((Advocate(x) & -Advocate(x) & GuaranteedMinimumWage(x)) -> -TippedEmployee(x))", "all x.((Advocate(x) & GuaranteedMinimumWage(x)) -> -TippedEmployee(x))", "all x.((ValuableAdvocate(x) & GuaranteedMinimumWage(x)) -> -TippedEmployee(x))", "all x.((Advocate(x) & NoAdvocacy(x) & GuaranteedMinimumWage(x)) -> -TippedEmployee(x))", "all x.((Advocate(x) & Ignores(x,y) & GuaranteedMinimumWage(y)) -> -TippedEmployee(x))", "all x.((Matthew(x) & -Advocate(x) & GuaranteedMinimumWage(x)) -> -TippedEmployee(x))", "all x.((Mary(x) & -Advocate(x) & GuaranteedMinimumWage(x)) -> -TippedEmployee(x))", "all x.((Advocate(x) & GuaranteedMinimumWage(x)) -> -TippedEmployee(x))", "all x.((Mary(x) & -Adviser(x) & GuaranteedMinimumWage(x)) -> -TippedEmployee(x))"]}
{"id": "folio_train_2128", "nl": "If Mary is either an advocate or a tipped employee, she is an advocate.", "fol": "((IsAdvocate(Mary) | IsTippedEmployee(Mary)) -> IsAdvocate(Mary))", "prediction": ["all x.((Advocate(x) | TippedEmployee(x)) -> Advocate(x))", "all x.((Advocate(x) | TipEmployee(x)) -> Advocate(x))", "all x.((Advocate(x) | TippedEmployee(x)) -> Advocate(x))", "all x.((Advocate(x) | TippedEmployee(x)) -> Advocate(x))", "all x.((Advocate(x) | TippedEmployee(x)) -> Advocate(x))", "all x.((Advocate(x) | TippedEmployee(x)) -> Advocate(x))", "all x.((Advocate(x) | TippedEmployee(x)) -> Advocate(x))", "all x.((Mary(x) & (Advocate(x) | Tipped(x))) -> Advocate(x))", "all x.((Advocate(x) | TippedEmployee(x)) -> Advocate(x))", "all x.((Mary(x) & (Advocate(x) | TippedEmployee(x))) -> Advocate(x))", "all x.(Advocate(x) | TippedEmployee(x))", "all x.((Advocate(x) | TippedEmployee(x)) -> Advocate(x))", "all x.(Advocate(x) | TippedEmployee(x))", "all x.((Advocate(x) | TapedEmployee(x)) -> Advocate(x))", "all x.((Advocate(x) | TippedEmployee(x)) -> Advocate(x))", "all x.((Advocate(x) | TippedEmployee(x)) -> Advocate(x))"]}
{"id": "folio_train_2129", "nl": "Asa Hoffmann was born in New York City.", "fol": "BornInLocation(AsaHoffmann,Newyorkcity)", "prediction": ["Asa Hoffmann was born in New York City.", "Asa Hoffmann was born in New York City.", "Asa Hoffmann was born in New York City.", "Asa Hoffmann was born in New York City.", "Asa Hoffmann wurde in New York City geboren.", "Asa Hoffmann was born in New York City.", "Asa Hoffmann wurde in New York City (birth(a) & BornIn(a)))", "Ariel Hoffmann was born in New York City.", "Asa Hoffmann was born in New York City.", "Asa Hoffmann was born in New York City.", "Asa Hoffmann was born in New York City.", "Asa Hoffmann was born in New York City.", "Asa Hoffmann was born in New York City (or NewYorkCity(y))", "Asa Hoffmann was born in New York City.", "Asa Hoffmann was born in NewYork(a)", "Asa Hoffmann grew up in New York City."]}
{"id": "folio_train_2130", "nl": "Asa Hoffman lives in Manhattan.", "fol": "LivesInLocation(AsaHoffmann,Manhattan)", "prediction": ["Asa Hoffman lebt in Manhattan.", "Asa Hoffman also lives in Manhattan.", "Asa Hoffman lives in Manhattan.", "Asa Hoffman lives in Manhattan.", "Asa Hoffman (@AsaHollow(x) & LivesInMiami(x))", "Asa Hoffman lives in Manhattan.", "Asa Hoffman lives in Manhattan.", "Asa Hoffman lives in Manhattan.", "Asa HoffmanLisesInMiami(AsaHellman)", "Asa Hoffman lives in Manhattan.", "Asa Hoffman(a) & LivesIn(a) & Manhattan(b))", "\"LivingIn(Asa Hoffman) -> LivingIn(Asa Hoffman,New York))", "All x.(IsaHoffman(x) -> LivesIn(x,New York))", "Asa HoffmanLittlesIn(asa,Miami))", "Asa Hoffman lives in Manhattan.", "Asa Hoffman lives in Manhattan."]}
{"id": "folio_train_2131", "nl": "Asa Hoffman is a chess player.", "fol": "IsChessPlayer(AsaHoffmann)", "prediction": ["Asa Hoffman is chessplayer.", "Asa Hoffman is a ChessPlayer.", "Asa Hoffman (a) is a ChessPlayer(a))", "Asa Hoffman is a ChessPlayer(Asa)", "Asa Hoffman is a chess player.", "Asa Hoffman is a chessplayer (ChessPlayer(Asa) & LivesIn(Asa,Chips))", "Asa Hoffman is a ChessPlayer.", "Asa Hoffman is a chess player.", "Asa Hoffman is a chessplayer.", "Asa Hoffman is chessplayer.", "Asa Hoffman is a chessplayer.", "Asa Hoffman is a chessplayer.", "Asa Hoffman is chessplayer(a)", "Asa Hoffman is a chessplayer.", "Asa Hoffman is a chessplayer.", "(ChessPlayer(Asa Hoffman)"]}
{"id": "folio_train_2132", "nl": "Some chess players are grandmasters.", "fol": "exists x.(IsChestPlayer(x) & IsGrandmaster(x))", "prediction": ["exists x.(ChestsPlayer(x) & Grandmaster(x))", "exists x.(ChestsPlayer(x) & Grandmaster(x))", "exists x.(ChessPlayer(x) & Grandmaster(x))", "exists x.(ChessPlayer(x) & GrandMaster(x))", "exists x y.(Player(x) & ChessPlayer(y) & Grandmaster(y))", "exists x.(ChessPlayer(x) & GrandMaster(x))", "exists x.(ChessPlayer(x) & Grandmaster(x))", "exists x.(ChestStakesPlayer(x) & Grandmaster(x))", "exists x.(ChessPlayer(x) & Grandmaster(x))", "exists x.(ChessPlayer(x) & GrandMaster(x))", "exists x.(ChessPlayer(x) & GrandMaster(x))", "exists x.(ChessPlayer(x) & GrandMaster(x))", "exists x.(ChessPlayer(x) & Grandmaster(x))", "exists x.(ChessPlayer(x) & GrandMaster(x))", "exists x.(Player(x) & ChessPlayer(x) & GrandMaster(x))", "exists x.(ChessPlayer(x) & GrandMaster(x))"]}
{"id": "folio_train_2133", "nl": "People born and living in New York City are New Yorkers.", "fol": "all x.((BornInLocation(x,Newyorkcity) & LivesInLocation(x,Newyorkcity)) -> IsNewYorker(x))", "prediction": ["all x.((Person(x) & BornInNewYork(x) & LivingInNewYork(x)) -> NewYorker(x))", "all x.((BornInNew York(x) & LivesInNewYork(x)) -> NewYorkers(x))", "all x.((Birth(x) & LivingInNewYork(x)) -> NewYorker(x))", "all x.((PeopleBirthNewYork(x) & NewYorkCity(x)) -> NewYorkers(x))", "all x.((Birth(x) & LivesInNewYork(x) & BornInNewYork(x)) -> NewYorker(x))", "all x.((Person(x) & BornInNewYork(x) & LivesInNewYork(x)) -> NewYorker(x))", "all x.((Person(x) & BornInNewYork(x) & LivingInNewYork(x)) -> NewYorker(x))", "all x.((Person(x) & BornIn(x,NYC) & LivesIn(x,y)) -> NewYorker(x))", "all x.((Person(x) & BornInNewYork(x) & LivesInNewYork(x)) -> NewYorker(x))", "all x.((Person(x) & BornIn(x,NewYork) & LivingIn(x,NewYork)) -> NewYorkers(x))", "all x.(NewYorkCityPerson(x) -> NewYorkLiver(x))", "all x.((BirthHasNewYork(x) & LivingInNewYork(x)) -> NewYorker(x))", "all x.(NewYorkCity(x) -> NewYorker(x))", "all x.(NycCityNasty(x) -> NewYorker(x))", "all x.((Person(x) & BornInNewYork(x) & LivingInNewYork(x)) -> NewYorker(x))", "all x.((BornInNewYork(x) & LivesInNewYork(x)) -> NewYorker(x))"]}
{"id": "folio_train_2134", "nl": "People liviing in Manhattan live in New York City.", "fol": "all x.(LivesInLocation(x,Manhattan) -> LivesInLocation(x,Newyorkcity))", "prediction": ["all x.((PeopleLivingInMennium(x) & LivesInNewYork(x)) -> LivesInNewYork(x))", "all x y.((Person(x) & LivesIn(x,y) & Manhattan(y)) -> LivesInNewYork(x,y))", "all x.(LivesInNewYork(x) -> LivesIn(x,NewYork))", "all x y.((Person(x) & LivesIn(x,y) & Manhattan(y)) -> LivesInNewYorkCity(x))", "all x.((Person(x) & LivesInNewYorkCity(x)) -> LivesIn(x,NewYorkCity))", "all x y.((Person(x) & LivesInNashville(x) & LivesIn(x,y)) -> LivingIn(x,y))", "all x.(LivesInNewYorkCity(x) -> LitigatingInMetropolitan(x))", "all x y.((Person(x) & LivesIn(x,y) & Manhattan(y)) -> LivesInNewYork(x))", "all x.(LivesInNewYork(x) -> -LivesIn-NewYork(x))", "all x.(LivingInNewYork(x) -> LivesInNewYork(x))", "all x.(LivesInNewYork(x) -> LiviingIn(x,Manhattan))", "all x.(LivingInMenlo(x) -> LivesInNewYorkCity(x))", "all x.((People(x) & LivesInNewYork(x)) -> LivesIn(x,y))", "all x.((Person(x) & LivesInNewYorkCity(x)) -> VibratesIn(x,Manhattan))", "all x.((Person(x) & LivesInNewYork(x)) -> LivesInNewYork(x))", "all x y z.((People(x) & Manhattan(y) & NewYorkCity(z) & LivesIn(x,y,z)) -> LivesIn(x,y,z))"]}
{"id": "folio_train_2135", "nl": "Asa Hoffmann is a New Yorkers.", "fol": "IsNewYorker(AsaHoffmann)", "prediction": ["Asa Hoffmann is NewYorker(a)", "Asa Hoffmann is NewYorker(a)", "Asa Hoffmann is NewYorkER(Asa) & HasNoathers(Asa) & GetsWashington(Asa))", "All x.(Hoffman(x) -> NewYorker(x))", "Asa Hoffmann is a NewYorker(a)", "Asa Hoffmann is NewYorker(a)", "Asa Hoffmann is a NewYorkers(Asa)", "Asa Hoffmann is NewYorkers.", "all x y.((AsaHumann(x) & NewYork(y)) -> NewYorkers(x,y))", "Asa Hoffmann is a NewYorker(AsaHollow)", "Asa Hoffmann is NewYorkers(a)", "Asa Hoffmann is NewYorkers(AsaOfHollown).", "AsaHollown is NewYorkers.", "Asa Hoffmann is NewYorker(Asa)", "Asa Hoffmann is a NewYorkers(AsaHoffman)", "Asa Hoffmann is NewYorkers(Asa,Thomas))"]}
{"id": "folio_train_2136", "nl": "Asa Hoffmann is a grandmaster.", "fol": "IsGrandmaster(AsaHoffmann)", "prediction": ["All x.((AsaHoffman(x) & GrandMaster(x)) -> Grandmaster(x))", "Asa Hoffmann is grandmaster.", "Asa Hoffmann is a grandmaster.", "Asa Hoffmann is grandmaster.", "(Grandmaster(AsaHoffman)", "(Grandmaster(Asa Hoffmann))", "(Grandmaster(AsaHoffman))", "All x.(AsaHolstein(x) -> Grandmaster(x))", "A. Hoffmann(a) & Grandmaster(a))", "(Grandmaster(AsaHolsmann))", "Asa Hoffmann is a Grandmaster.", "Asa Hoffmann is a grandmaster.", "Asa Hoffmann is a grandmaster.", "all x.(Honore(x) -> Grandmaster(x))", "Asa Hoffmann is grandmaster.", "Asa Hoffmann is grandmaster."]}
{"id": "folio_train_2137", "nl": "Asa Hoffmann does not live in New York.", "fol": "-LivesInLocation(AsaHoffmann,Newyorkcity)", "prediction": ["Asa Hoffmann -LivesInNewYork.", "Asa Hoffmann -(LivesInNewYork) & -(LivesInNewYork) | LivesInNewYork(x))))", "Asa Hoffmann-LivesIn(Asa,NewYork)", "All x.(Hoffman(x) -> -LivesInNewYork(x))", "Asa Hoffmann -LivesInNewYork(Asa)", "Asa Hoffmann exists x.(NoNewYork(x) & -LivesIn(x,y))", "Asa Hoffmann -LimitsInNewYork(AsaHindchen)", "Asa Hoffmann does not LiveInNewYork(Asa,NewYork)", "Asa Hoffmann doesn\u2019tLiveInNewYork(Asa,NewYork)", "Asa Hoffmann does not live in New York.", "All x.(HannahNumber(x) -> -LivesInNewYork(x))", "All x.((Assa(x) & NewYork(y)) -> -LivesIn(x,y))", "Asa Hoffmann does not LiveInNewYork.", "Asa Hoffmann does notLiveInNewYork.", "Asa Hoffmann does notLiveInNewYork(a)", "No,asaHolman(a) -> -LivesInNewYork(a))"]}
{"id": "folio_train_2138", "nl": "Some of those who apply for a Schengen Visa get it.", "fol": "exists x.(ApplyForSchengenVisa(x) -> ReceiveSchengenVisa(x))", "prediction": ["exists x.(AppliesForSchengenVisa(x) & Gets(x,z))", "exists x.(ApplicationForSchengenVisa(x) & GetsDiscount(x))", "exists x.((Apply ForSchengenVisa(x)) -> Gets(x))", "exists x.(AppliesForSpengenVisa(x) & (GivesBergenVisa(x) | GasesBergenVisa(x)))", "exists x.(AppliesForSpengenVisa(x) & GetsSpengenVisa(x))", "exists x.(AppliesForSpengenVisa(x) & GetsSpengenVisa(x))", "exists x.(ApplicationForSchengenVisa(x) & GetsVisa(x))", "exists x.(ApplyKengenVisa(x) & GetsVisa(x))", "exists x.(AppliesForSchengenVisa(x) & GetsShengenVisa(x))", "exists x.((ApplicationForSpengenVisa(x) & GetsSpengenVisa(x))", "exists x.(AppliesForSschengenVisa(x) & GetsSpengenVisa(x))", "exists x.(AdvancesForSchengenVisa(x) & GetsShengenVisa(x))", "exists x.(SpengenVisaApplication(x) & Getting(x,s,gen,s))", "exists x.(Application(x) & Visa(x) & Gets(x,shengen))", "exists x.(AppliesForSschengenVisa(x) & GetsVisa(x))", "exists x.(Apply(x) & In(x,y) & SchengenVisa(x))"]}
{"id": "folio_train_2139", "nl": "To apply for a Schengen Visa, you need to provide financial guarantees.", "fol": "all x.(ApplyForSchengenVisa(x) -> ProvideFinancialGuarantees(x))", "prediction": ["all x.(ApplyShengenVisa(x) -> FinancialGaranties(x))", "all x.((ApplySpengenVisa(x) & FinancialGarantie(x)) -> FinancialGarantie(x))", "all x y.((ApplyForSpengenVisa(x) & FinancialGaranties(y)) -> ApplicateFinancialGaranties(x,y))", "all x.((SpengenVisa(x) & FinancialGuarantees(x)) -> ApplyFor(x,SenGen))", "all x.((Apply(x) & ProvidesFinancialGaranties(x)) -> SchengenVisa(x))", "all x.(ApplyAboutSchengenVisa(x) -> ProvidesFinancialGaranties(x))", "all x.((Applies(x) & SchengenVisa(x)) -> FinancialGuaranties(x))", "all x.(SchengenVisa(x) -> ProvidesFinancialGaranties(x))", "all x.((SpengenVisa(x) & FinancialGaranties(x)) -> ApplyFor(x,Spengen))", "all x.((ProvidesFinancialGaranties(x) & AppliesForSchengenVisa(x)) -> AvailB.(FinancialGaranties(x)))", "all x.((AppliesForSchengenVisa(x) & ProvidesFinancialGaranties(x)) -> FinancialGaranties(x))", "all x.(ApplyShengenVisa(x) -> ProvidesFinancialGaranties(x))", "all x.((ApplyForSschengenVisa(x) & ProvideFinancialGaranties(x)) -> NotApplyForSschengenVisa(x))", "all x.(ApplyForSchengenVisa(x) -> ProvidesFinancialGaranties(x))", "all x.((ApplyForVisa(x) & ProvidesFinancialGaranties(x)) -> SchengenVisa(x))", "all x.((ApplyForSchengenVisa(x) & ProvideFinancialGaranties(x)) -> Required(x))"]}
{"id": "folio_train_2140", "nl": "If you need to provide financial guarantees, you must request documents from the bank.", "fol": "all x.(ProvideFinancialGuarantees(x) -> RequestBankDocuments(x))", "prediction": ["all x y.((Bank(x) & FinancialGarantie(y)) -> RequestsDocuments(x,y))", "all x.(IfFinancialGaranties(x) -> RequestDemando(x,c,d,b,c,d))", "all x y.((FinancialGarantie(x) & Bank(y)) -> (RequestsDocuments(x,y) | RequestsDocuments(x,y)))", "all x.((Bank(x) & RequiresDocuments(x)) -> FinancialGaranties(x))", "all x y.((Bank(x) & RequiresFinancialGaranties(x)) -> IfRequiresFinancialGaranties(y))", "all x y.((Bank(x) & NeedsFinancialGaranties(x,y)) -> RequestBankDocuments(x,y))", "all x y.((Bank(x) & Bank(y)) -> RequiresDocuments(x,y))", "all x.((Bank(x) & DemandsDocuments(x)) -> ProvidesFinancialGaranties(x))", "all x.(FinancialGuaranties(x) -> RequiresDocumentsFromBank(x))", "all x.((Bank(x) & NeedsFinancialGaranties(x)) -> ShouldRequestDocuments(x))", "all x.(QueriesBankCredits(x) -> ProvidesFinancialGaranties(x))", "all x.((Bank(x) & RequiresFinancialGuaranties(x)) -> RequiresDocuments(x))", "all x.((Bank(x) & RequiresDocuments(x)) -> FinancialGaranties(x))", "all x.((RequestBankCredits(x) & FinancialGaranties(x)) -> DocumentsDirectedByBank(x))", "all x.((RequiresBankDocuments(x) & FinancialGaranties(x)) -> WeCanRequestBankNotices(x))", "all x y.((Bank(x) & NeedsFinancialGaranties(x,y)) -> RequiresDocuments(x,y))"]}
{"id": "folio_train_2141", "nl": "Do not close your bank account if you request documents from the bank.", "fol": "all x.(RequestBankDocuments(x) -> -CloseAccount(x))", "prediction": ["all x.((BankAccount(x) & RequestsDocuments(x)) -> Concludes(x))", "all x y.((BankAccount(x) & BankRequest(y) & Close(x,y)) -> -Close(x,y))", "all x.((BankAccount(x) & -Close(x)) -> RequiresDocuments(x))", "all x.((BankAccount(x) & RequestsDocuments(x)) -> -Closes(x))", "all x y.((BankAccount(x) & RequestsDocuments(y,x)) -> -Close(x,y))", "all x y.((BankAccount(x,y) & BankRequestsDocuments(y)) -> -Close(x,y))", "all x.((BankAccount(x) & CannotClose(x)) -> RequestsDocuments(x))", "all x y.((BankAccount(x) & Bank(y) & RequestsDocuments(x,y)) -> -Close(x))", "all x y z.((BankAccount(x) & DocumentRequest(y) & Bank(z)) -> -Close(x,y,z))", "all x y.((BankAccount(x) & Bank(y) & Requires(x,y)) -> -Close(x,y))", "all x.((BankAccount(x) & RequestsDocuments(x,Bank)) -> -Close(x,Bank))", "all x.((BankAccount(x) & RequestsDocuments(x)) -> -Close(x))", "all x.((BankAccount(x) & RequestsDocuments(x)) -> -Close(x))", "all x.((BankAccount(x) & RequiresDocuments(x)) -> -Close(x))", "all x.((BankAccount(x) & RequestsDocuments(x)) -> -Close(x))", "all x.((BankAccount(x) & RequestsDocuments(x)) -> -Close(x))"]}
{"id": "folio_train_2142", "nl": "Philip closed his bank account.", "fol": "CloseAccount(Philip)", "prediction": ["Philip closedBankAccount(Phillip)", "all x.(BankAccount(x) -> ClosedBy(x,Philips))", "all x y.((Pilot(x) & BankAccount(y)) -> Closed(x,y))", "Philip ClosedBancoAccount(Phillip)", "(ClosedBankAccount(Phillip))", "Philip closed his bank account.", "Philip closkedBankAccount(Phillip)", "all x y.((Pilot(x) & BankAccount(y)) -> Closed(x,y))", "Philip closed his bank account.", "Philip closed his bank account.", "all x y.((Phillip(x) & BankAccount(y)) -> Closed(x,y))", "Philip closed his bank account.", "Philip closed his bank account.", "Philip closed his bank account.", "all x.((Phillips(x) & BankAccount(x)) -> Closed(x))", "Philip closed his bank account."]}
{"id": "folio_train_2143", "nl": "Philip got a Schengen Visa.", "fol": "ReceiveSchengenVisa(Philip)", "prediction": ["Philip hat es auch gemerkt und BeamsGengenVisa(e)", "Philip got a SchengenVisa (Has(Phillip),x))", "Philip got SchengenVisa(Philips)", "Philip got SchengenVisa(Phillip)", "Philip snagged SchengenVisa.", "Philip aquired SchengenVisa.", "(HasSchengenVisa(Philip))", "Philip got SchengenVisa(Phillips)", "Philip, like all x.((Phillips(x) & SchengenVisa(x)) -> Getting(x,y))", "Philip GigigotSpengenVisa(x)", "Philip Svencki a g.a.SchengenVisa(Phillip)", "all x.(Pilot(x) -> TheSchengenVisa(x))", "Philip got SchengenVisa(Philippe)", "Philip hat einen SchengenVisa(Philippe)", "Philip got SchengenVisa.", "all x y.((Phillips(x) & SchengenVisa(y)) -> Received(x,y))"]}
{"id": "folio_train_2144", "nl": "Philip applied for a Schengen Visa and got it.", "fol": "(ApplyForSchengenVisa(Philip) & ReceiveSchengenVisa(Philip))", "prediction": ["(AppliedForSscherengenVisa(Phillip) & GotSscherengenVisa(Phillip))", "(AppliedForShengenVisa(Philippe,Application) & GotSpengenVisa(Philippe))", "all x.(AppliedFor(x,SpengenVisa) -> Got(x,SpengenVisa))", "all x y.((Phillip(x) & SchengenVisa(y)) -> AppearedFor(x,y))", "all x.(Piece(x) -> (AppliedForShengenVisa(x) & Got(x,CurrentVisa)))", "all x y.((Phillips(x) & SchengenVisa(y)) -> (AppliedFor(x,y) & Got(x,y)))", "all x.(AppliedForSchengenVisa(x) -> GotVisa(x))", "Philip AppliedForSpengenVisa(Phillip) & GotVisa(Phillip)", "Philip AppliedForShengenVisa(Phillip) & GotKills(Phillip))", "all x.(AppliedForShengenVisa(x) -> GotShengenVisa(x))", "Philip sandersengenvisas.com & gotsz.$1500.", "Philip appointed for SchengenVisas and got them.", "-AppliedForSschengenVisa(Phoenix) & GotShengenVisa(Phoenix))", "(AppliedForSchengenVisa(Phillips) & GotSschengenVisa(Phillips))", "Philip appoints for SchengenVisa & CommutesWithVisa(Phillip)", "(AppliedForSchengenVisa(Phillip) & GotVisa(Phillip))"]}
{"id": "folio_train_2145", "nl": "If Philip did not request documents from the bank or get a Schengen Visa, he didn\u2019t apply for a Schengen Visa.", "fol": "((-RequestBankDocuments(Philip) | ReceiveSchengenVisa(Philip)) -> -ApplyForSchengenVisa(Philip))", "prediction": ["all x.((Poppa(x) & -(RequiresDocumentsFromBank(x) | GetsSchengenVisa(x))) -> -ApplicationForSchengenVisa(x))", "all x.((Paul(x) & -RequiresDocumentsFromBank(x) & -GetsSchengenVisa(x)) -> -ShengenVisaApplication(x))", "all x.((Pittsburgh(x) & -RequiresBillingDetachmentsOrGetsSchengenVisa(x)) -> -AppliesForSchengenVisa(x))", "all x.((Pianist(x) & -RequireDocumentsByBank(x) & -GetSchengenVisa(x)) -> -AppliedSchengenVisa(x))", "all x.((Pilot(x) & -RequiresDocumentsFromBank(x) & -GetsSchengenVisa(x)) -> -AppliesForSchengenVisa(x))", "all x.((Pianist(x) & -RequestsDocumentsFromBank(x) & -GetsSchengenVisa(x)) -> -AppliesPhoneForSchengenVisa(x))", "all x.((Philippe(x) & -RequestsDegreesFromBankOrGetsSchengenVisa(x)) -> -AppliesForSchengenVisa(x))", "all x.((Phillips(x) & (-RequestsDocumentsFromBank(x) | GetsSchengenVisa(x))) -> -ShengenVisa(x))", "all x.((Phoenix(x) & (-RequiresDocumentsFromBank(x) | GetsSchengenVisa(x))) -> -AppliesForSchengenVisa(x))", "all x.((Pilot(x) & (-RequiresDocumentsFromBank(x) | GetsSchengenVisa(x))) -> -AppliesShengenVisa(x))", "all x.((Pippey(x) & -RequestsDocumentsFromBank(x) & -GetsSchengenVisa(x)) -> -AppliesForSchengenVisa(x))", "all x.((Pippin(x) & -RequestsBillDocuments(x) & -GetsSchengenVisa(x)) -> -AppliesForSchengenVisa(x))", "all x.((Pilip(x) & (-RequiresDocuments(x) | GetsSchengenVisa(x))) -> -AppliesForSchengenVisa(x))", "all x.((Phillips(x) & -RequiresDocuments(x) & -GetsSchengenVisa(x)) -> -ApplicationForSchengenVisa(x))", "all x.((Phillip(x) & -RequiresDocumentsFromBanque(x) & -GetsSchengenVisa(x)) -> -AppliesForSchengenVisa(x))", "all x.((Prophew(x) & -RequiresDocuments(x) & -GetsSchengenVisa(x)) -> -AppliesForSchengenVisa(x))"]}
{"id": "folio_train_2146", "nl": "Some fears lead to anxiety.", "fol": "exists x.(LeadsToFear(x) & LeadsToAnxiety(x))", "prediction": ["exists x.(Fear(x) & CausesAngry(x))", "exists x.(Fear(x) & LeadsToAnxiety(x))", "exists x.(Fear(x) & LeadsTo(x,Angry))", "exists x y.(Fear(x) & Fear(y) & LeadsToAnxiety(x,y))", "exists x.(Fear(x) & LeadsToAngryny(x))", "exists x.(Fear(x) & LeadsToAnxiety(x))", "exists x.(Fear(x) & LeadsToAnxiety(x))", "exists x.(Fear(x) & LeadsToAngryness(x))", "exists x.(Fear(x) & LeadsToAnxiety(x))", "exists x.(Fear(x) & LeadToAnxiety(x))", "exists x.(Fear(x) & LeadsToAngry(x))", "exists x.(Fear(x) & LeadsToAngry(x))", "exists x.(Fear(x) & LeadsToAngry(x))", "exists x.(Fear(x) & LeadsToAngry(x))", "exists x.(Fear(x) & LeadsToAnxiety(x))", "exists x.(Fear(x) & LeadsToAnxiety(x))"]}
{"id": "folio_train_2147", "nl": "Some anxiety leads to terror.", "fol": "exists x.(LeadsToAnxiety(x) & LeadsToTerror(x))", "prediction": ["exists x.(Angry(x) & LeadsToTerror(x))", "exists x.(Angry(x) & LeadsToTerror(x))", "exists x.(Anxiety(x) & LeadsToTerror(x))", "exists x.(Angry(x) & LeadsToTerror(x))", "exists x.(Anxiety(x) & LeadsTo(x,Terror))", "exists x.(Anxiety(x) & LeadsToTerror(x))", "exists x.(Anxiety(x) & LeadsTo(x,terror))", "exists x.(Angry(x) & LeadsToTerror(x))", "exists x.(Anxiety(x) & LeadsToTerror(x))", "exists x.(Angry(x) & CatchesTerror(x))", "exists x.(Anxiety(x) & LeadsToTerror(x))", "exists x.(Anxiety(x) & LeadsToTerror(x))", "exists x.(Anxiety(x) & LeadsToTerror(x))", "exists x.(Anxiety(x) & LeadsToTerror(x))", "exists x.(Anxiety(x) & LeadsToTerror(x))", "exists x.(Angry(x) & LeadsToTerror(x))"]}
{"id": "folio_train_2148", "nl": "No fears lead to terror.", "fol": "-exists x.(LeadsToFear(x) & LeadsToTerror(x))", "prediction": ["-exists x.(Afraid(x) & LeadsToThreat(x))", "-AllowsFearToTerror(-)", "-exists x.(Fear(x) & LeadsToTerror(x))", "-exists x.(Fear(x) & -LeadsToTerror(x))", "-exists x.(Fear(x) & LeadsToTerror(x))", "-exists x.(Fear(x) & LeadsTo(x,terror))", "-exists x.(Fear(x) & LeadsToTerror(x))", "-exists x.(Fear(x) & LeadsToTerror(x))", "all x.(NecessaryFearsLeadToTerror(x) -> -(BreathesLeadToTerror(x) & -LeadToTerror(x)))", "all x.(Fear(x) -> -LeadToTerror(x))", "-exists x.(Fear(x) & LeadsToThreat(x))", "-exists x.(Fears(x) & LeadsTo(x,Terror))", "all x.(Safety(x) -> -LeadsToTerror(x))", "all x.((Fear(x) & NoThreat(x)) -> -LightsToTerror(x))", "all x.((Fear(x) & -Terror(x)) -> -LeadsTo(x,terror))", "-exists x.(Fear(x) & LeadToTerror(x))"]}
{"id": "folio_train_2149", "nl": "The Great Lakes are Lake Superior, Lake Michigan, Lake Huron, Lake Erie, and Lake Ontario.", "fol": "all x.(IsGreatLake(x) -> (LakeSuperior(x) | LakeMichigan(x) | LakeHuron(x) | LakeErie(x) | LakeOntario(x)))", "prediction": ["all x.(GreatLake(x) -> (LakeSurrounded(x) | LakeMichigan(x) | LakeHurons(x) | LakeErie(x) | LakeOntario(x)))", "(GreatLake(Miami,MountainMaple) & GreatLake(Miami,Hurons) & GreatLake(Miami,Erie,Sonoma) & GreatLake(MountainMaple))", "(GreatLake(GreatLake) -> (LakeSuperior(GreatLake) | Lake Michigan(GreatLake) | Lake Huron(GreatLake) | LakeErie(GreatLake) | LakeOntario(GreatLake)))", "(GreatLake(GreatLake) | LakeSuperior(GreatLake) | LakeMichigan(GreatLake) | LakeHuron(GreatLake) | LakeErie(GreatLake) | LakeOntario(GreatLake)))", "(GreatLake(GreatLake) -> (LakeSuperior(GreatLake) & LakeMichigan(GreatLake) & LakeHuron(GreatLake) & LakeErie(GreatLake) & LakeOntario(GreatLake)))", "(GreatLake(GreatLake) -> (LakeSuperior(GreatLake) | LakeMichigan(GreatLake) | LakeHuron(GreatLake) | LakeErie(GreatLake) | LakeOntario(GreatLake)))", "All x.(GreatLake(x) -> (LakeSuperior(x) | Lake Michigan(x) | Lake Huron(x) | Lake Erie(x) | LakeOntario(x)))", "all x.(GreatLake(x) -> (Land(x,Surrey) & Lake(x,Michigan) & Lake(x,Huron) & Lake(x,Erie) & Lake(x,Ontario)))", "(GreatLake(GreatLake) -> (LakeSuperior(GreatLake) | Lake Michigan(GreatLake) | Lake Huron(GreatLake) | LakeErie(GreatLake) | LakeOntario(GreatLake)))", "All x.(GreatLake(x) -> (LakeSuperior(x) | LakeMichigan(x) | LakeHuron(x) | LakeErie(x) | LakeOntario(x)))", "(GrandLake(GreatLake) |(LakeSupply(GreatLake) | Lake Michigan(GreatLake) | Lake Huron(GreatLake) | LakeErie(GreatLake) | LakeOntario(GreatLake)))", "(GreatLake(Lake) -> (LakeSuperior(Lake) | LakeMichigan(Lake) | LakeHuron(Lake) | LakeErie(Lake) | LakeOntario(Lake)))", "all x.(GreatLake(x) -> (LakeSuperior(x) | LakeMichigan(x) | LakeHuron(x) | LakeErie(x) | LakeOntario(x)))", "all x.(GreatLake(x) -> (LakeSuperior(x) | LakeMichigan(x) | LakeHuron(x) | LakeErie(x) | LakeOntario(x)))", "all x.(GreatLake(x) -> (LakeSuperior(x) | LakeMichigan(x) | LakeHuron(x) | LakeErie(x) | LakeOntario(x)))", "all x.(GreatLake(x) -> (Lake(x) | Lake(x) | Lake(x) | Lake(x) | Lake(x) | Lake(x) | Lake(x) | Lake(x) | Lake(x)) | Lake(x) | Lake(x) | Lake(x) | Lake(x) | Lake(x) | Lake(x) | Lake(x) | Lake(x) | Lake(x) | Lake(x) | LakeOnOnOnOnOnonononononononononononononononononononononononononononononononononononononononononononononononononononononononononononononononononononononononononononononononononononononononononononononononononononononononononononononononononononononononu_ons,o_-o_---on_allo__allo____________-______________________________-_______________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________."]}
{"id": "folio_train_2150", "nl": "Some major settlements of Lake Erie are in NY, PA, OH, and MI.", "fol": "exists x y.(LakeErie(y) & MajorSettlementOfLake(x,y) & (LocatedIn(x,Ny) | LocatedIn(x,Pa) | LocatedIn(x,Oh) | LocatedIn(x,Mi)))", "prediction": ["exists x y z w.((Stockage(x) & LakeErie(y) & (NewYork(z) | PA(w) | Ohio(w) | MI(w)))", "exists x.(Standard(x) & In(x,NY) & In(x,PA) & In(x,OH) & In(x,Mid))", "exists x.(Standard(x) & (NewYork(y) | Pittsburgh(y) | Ohio(y) | Michigan(y)))", "exists x.(Standort(x) & MajorLandings(x) & Niagara(x) & NY(x) & PA(x) & OH(x) & MI(x))", "exists x y.(Stockage(x) & Settlement(y) & In(y,x)) & In(x,y) & (NewYork(z) | PA(z) | Ohio(z) | MI(z))))", "exists x.((Standard(x) & MajorCity(x) & LakeErie(x)) -> (InNJ(x) | InPA(x) | InOH(x) | InMI(x)))", "(MainSituation(LAKEERia)-(InNewYork(Y) | InPA(Y) | InOH(Y) | In MI(y)))", "exists x.(Standing(x) & LakeErie(x) & (NewYork(y) | PA(y) | OH(y) | MI(y)))", "exists x.(Standing(x) & NewYork(x) & PA(x) & Ohio(x) & MI(x))", "exists x.(Season(x) & Major(x) & LakeErie(x) & (NewYork(x) | PA(x) | Ohio(x) | Michigan(x))))", "exists x.(Stadion(x) & (NewYork(y) | PA(y) | OH(z) | MI(z)))", "exists x.(Standard(x) & LakeErie(y) & (In(x,y) | In(x,y) & In(x,y))))", "exists x.(MajorSettlement(x) & LakeErie(y) & NYC(y) & PA(z) & OOH(x) & MI(x))", "exists x.(Season(x) & (NewYork(x) | Pennsylvania(x) | Ohio(x) | MI(x)))", "exists x.(Season(x) & MajorInLakeErie(x) & (NewYork(x) | PA(x) | OH(x) | MI(x)))", "exists x.(Standard(x) & Settlement(x,y) & In(y,z) & In(z,y))"]}
{"id": "folio_train_2151", "nl": "NY, PA, OH, MI are states in the US.", "fol": "(IsStateOf(Ny,Us) & IsStateOf(Pa,Us) & IsStateOf(Oh,Us) & IsStateOf(Mi,Us))", "prediction": ["(((NewYork(y) | PA(y) | OH(y) | MI(y)))", "(Estate(NY), PA(OH) | State(NY,MI))", "(state(NY,Y) & State(PA,OH) & State(MI,Y))", "(state(NY) & State(PA) & State(OH) & State(Miami))", "(State(NY,Y) & State(PA,OH) & State(Michigan,Lithuania))", "(State(NY,NP) & State(PA,OH,MI))", "(NJ,Yam,LJ) & StatesIn(NJ,PA) & StatesIn(Oak,MI) (US) & StatesIn(NY, PA) & StatesIn(OH,MI)))", "(SouthEastern(NY) & SouthEasternState(PA) & SouthEasternState(OH) & SouthEasternState(MI))", "((State(NY) | State(PA) | State(OH) | State(MI)))", "all x.((NewYork(x) & Pennsylvania(x) & Ohio(x) & MI(x)) -> StatesInUS(x))", "(U.State(NY) & State(PA) & State(OH) & State(Miami))", "all x.((State(x) & StatesIn(x,US)) -> (NewYork(x) | Pennsylvania(x) | Ohio(x) | MI(x)))", "all x.((NewYork(x) | Pennsylvania(x) | Ohio(x) | Michigan(x)) -> StatesInUS(x))", "(State(NY,U.S.A) | State(PA,OH) | State(OH,Michigan)))", "all x.((NewState(x) | PA(x) | OOH(x) | MichiganState(x)) -> US(x))", "all x y z.((NewYork(x) & PA(y) & Ohio(z)) | US(x) | US(y) | US(z) | US(z))) ->."]}
{"id": "folio_train_2152", "nl": "ON is a state of Canada.", "fol": "IsStateOf(On,Canada)", "prediction": ["all x.(Ont.((State(x) & Canada)) -> State(x))", "all x.(Ontario(x) -> StateOfCanada(x))", "(Ontario) IsA StateOfCanada(Ontario,Canada))", "(Ontario) & StateOfCanada(Ontario))", "all x.(ON(x) -> StateOfCanada(x))", "(Ontario) & StateOfCanada(Ontario))", "(Ontario(Ontario) & StateOfCanada(Ontario))", "exists x.(Ontario(x) & StateOfCanada(x))", "(Ontario(ON) & StateOfCanada(ON))", "(Ontario) -> StateOfCanada(ON))", "Located in British Columbia (Canada))", "(Ontario, Canada)", "(Ontario(Ontario) & StateOfCanada(Ontario))", "all x.(Ontario(x) -> StateOfCanada(x))", "(StateOfCanada(ON) & Ontario(Ontario))", "(Ontario,Territory(Ontario,Canada))"]}
{"id": "folio_train_2153", "nl": "There is a major settlement of Lake Huron in ON. ", "fol": "exists x.all y.(LakeHuron(y) & MajorSettlementOfLake(x,y) & LocatedIn(x,On))", "prediction": ["exists x.(MajorStudiootmentOfLakeHuron(x) & InOntario(x))", "exists x.(Stockage(x) & LakeHuron(x) & InOntario(x))", "(MainSettlementOfLakeHuron(LakeHuron) & InOntario(LakeHuron))", "exists x.(Standard(x) & LakeHuronInOnt.(LakeHuron(x)))", "(Ontario(LakeHuron) & MajorIndividual(LakeHuron))", "exists x.(MajorStandingOfLakeHuron(x) & InOntario(x))", "exists x.(Standing(x) & LakeHuron(x) & InOntario(x))", "exists x.(LakeHuron(x) & MajorSettlement(x) & InOnt.(LakeHuron(x)))", "all x.((MajorStandard(x) & LakeHuron(x)) -> InOntarian(x))", "exists x.(MainStationOfLakeHaron(x) & InOntario(x))", "exists x.(Sellation(x) & LakeHuronion(x) & InOnt.(x)))", "exists x.(Situation(x,LakeHuron) & InOntario(x))", "all x.(MinorSettlement(x) -> LakeHurons(x))", "exists x.(Situation(x) & LakeHuron(x) & InOntario(x))", "exists x.(Sellation(x) & MajorLakeHuron(x))", "exist x.(LakeHuron(x) & MajorSellution(x))"]}
{"id": "folio_train_2154", "nl": "All states are in their country.", "fol": "all x y.(IsStateOf(x,y) -> LocatedIn(x,y))", "prediction": ["all x.(State(x) -> InCountry(x))", "all x.(State(x) -> InCountry(x))", "all x.(State(x) -> InCountry(x))", "all x.(State(x) -> InCountry(x))", "all x.(State(x) -> InCountry(x))", "all x.(State(x) -> InCountry(x))", "all x.(State(x) -> InCountry(x))", "all x.(State(x) -> InCountry(x))", "all x.(State(x) -> (InCountry(x) & InCountry(x)))", "all x.(State(x) -> InCountry(x))", "all x.(State(x) -> InCountry(x))", "all x.(State(x) -> InCountry(x))", "all x.(State(x) -> InCountry(x))", "all x.(State(x) -> InCountry(x))", "all x.(State(x) -> InCountry(x))", "all x.(State(x) -> InCountry(x))"]}
{"id": "folio_train_2155", "nl": "The US is in North America.", "fol": "LocatedIn(Us,Northamerica)", "prediction": ["ALL x.((US(x) & NorthAmerica(x)) -> In(x,y))", "(NorthAmerica(US) & In(US))", "(NorthAmerica(US) -> In(US))", "all x.(US(x) -> NorthAmerica(x))", "all x.(US(x) -> NorthAmerica(x))", "(NorthAmerican(US) & inViaNordAmerica(US))", "all x.((US(x) & NorthAmerica(x)) -> In(x,no))", "all x.(U.S.A.((StartsInNordAmerica(x)) -> InNorthAmerica(x))", "all x.(US(x) -> NorthAmerica(x))", "All x.(U.S.A.((USA) & NorthAmerica(x)) -> InAlaska(x))", "(NorthAmerica(US) & In(US))", "all x.(U.S.A.(x) -> NorthAmerica(x))", "(NorthAmerica) & AssumesNorthAmerica(US))", "(Location(U.S.A.):NorthAmerica(U.S.))", "all x.(US(x) -> NorthAmerica(x))", "all x.(US(X) -> NorthAmerica(x))"]}
{"id": "folio_train_2156", "nl": "The Great Lakes began to form at the end of the Last Glacial Period.", "fol": "all x.(IsGreatLake(x) -> FormedAtEndOf(x,Lastglacialperiod))", "prediction": ["the end oftheLeastGlacialPeriod(GreatLake)", "All x.(GreatLake(x) -> WasBeginToFormAndExposure(x))", "all x y z.((GreatLake(x) & GlacialPeriod(y) & GlacialPeriod(z)) -> Form(x,y,z))", "All x.(GreatLake(x) -> ExpiredAtEndOfLastGlacialPeriod(x))", "all x.(GreatLake(x) -> (EndOfLastGlacialPeriod(x) & FormToo(x)))", "all x.(GreatLake(x) -> (FoundAtEndOfLateGlacialPeriod(x) & Form(x)))", "all x y.((GreatLake(x) & EndOfLastGlacialPeriod(x)) -> BeginningToForm(x,y))", "Die GreatLakes beganFormingAtEndOfLastGlacialPeriod(GreatLakes)", "All x.(GreatLake(x) -> FormsTowardsLateGlacialPeriod(x))", "Die GreatLake(s) & LastGlacialPeriod(n) & LastGlacialPeriod(n) & Form(s) & ContinuesToForm(s,x,n))", "all x y.((GreatLake(x) & LastGlacialPeriod(y)) -> FormsAt(x,y))", "all x.(GreatLake(x) -> EndOfLastGlacialPeriod(x))", "All x.(GreatLake(x) -> FormsAtEndOfLostGlacialPeriod(x))", "the GreatLakes,EndOfLastGlacialPeriod(GCPL) -> FormsWithWithEndOfLastGlacialPeriod(GCPL))", "All x y.((GreatLake(x) & WeakGlacialPeriod(y)) -> FormsAtEnd(x,y))", "All x y.((GreatLake(x) & LastGlacialPeriod(y)) -> FormsFollowing(x,y))"]}
{"id": "folio_train_2157", "nl": "Lake Erie has a major settlement.", "fol": "exists x y.(LakeErie(x) & MajorSettlementOfLake(y,x))", "prediction": ["all x.(LakeErie(x) -> MajorStandard(x))", "all x.(Red Hook(x) -> MajorStandard(x))", "all x.(LakeErie(x) -> MajorStandard(x))", "LakeErie,TimothyLandmark(LeafErie)", "all x.(LakeErie(x) -> MajorSituation(x))", "LakeErieHasMajorSituation(lake)", "exists x.(LlakeErie(x) & MinorSettlement(x))", "(all x.(LakeErie(x) -> MajorStandard(x)))", "all x.(LakeErie(x) -> MajorSedimentation(x))", "all x.(LandErie(x) -> MajorStandard(x))", "all x.(LakeErie(x) -> MajorSettlement(x))", "all x.(LandErie(x) -> MajorSettlement(x))", "all x.(LakeErie(x) -> MajorSituation(x))", "(MainStation(LakeErie) | MajorStation(LakeErie)))", "all x.(LakeErie(x) -> MajorSituation(x))", "(MainStation(LakeErie) -> HasSediment(LakeErie))"]}
{"id": "folio_train_2158", "nl": "There is a great lake that did not form at the end of the Last Glacial Period.", "fol": "exists x.(IsGreatLake(x) & -FormedAtEndOf(x,Lastglacialperiod))", "prediction": ["exists x.(GreatLake(x) & -LudlowGlacialPeriodForming(x))", "exists x.(GreatLake(x) & -FoundAtEndOfLastGlacialPeriod(x))", "exists x.(GreatLake(x) & -FormedAtEndOfLeastGlacialPeriod(x))", "exists x.(GreatLake(x) & -FormedAtLastGlacialPeriod(x))", "exists x.(GreatLake(x) & -LastGlacialPeriod(x))", "exists x.(GreatLake(x) & -FormedLastGlacialPeriod(x))", "exists x.(GreatLake(x) & -IsStructureDate(x))", "exists x.(GreatLake(x) & -FormedAtEndOfLastGlacialPeriod(x))", "exists x.(GreatLake(x) & -FoundLateGlacialPeriod(x))", "exists x.(GreatLake(x) & -FormedAtEndOfLeastGlacialPeriod(x))", "exists x.(GreatLake(x) & -DependsOfLastGlacialPeriod(x))", "exists x.(GreatLake(x) & -MadeAtTheEndOfLeastGlacialPeriod(x))", "exists x.(GreatLake(x) & -LastGlacialPeriod(x))", "exists x.(GreatLake(x) & -FormedLightGlacialPeriod(x))", "exists x.(GreatLake(x) & -FormedAtEndOfLastGlacialPeriod(x))", "exists x.(GreatLake(x) & -FormedEndOfLeastGlacialPeriod(x))"]}
{"id": "folio_train_2159", "nl": "If Stephen Curry is not an NBA player, then Stephen Curry is not an NBA player or a soccer player.", "fol": "(-IsNBAPlayer(Stephencurry) -> -((IsNBAPlayer(Stephencurry) & -IsSoccerPlayer(Stephencurry)) | (-IsNBAPlayer(Stephencurry) & IsSoccerPlayer(Stephencurry))))", "prediction": ["all x.((StephenCurry(x) & - NBAPlayer(x)) -> (- NBAPlayer(x) | SoccerPlayer(x)))", "all x.((StephenCurry(x) & -NBAPlayer(x)) -> (-NBAPlayer(x) | SoccerPlayer(x)))", "all x.((StephenCurry(x) & -NBAPlayer(x)) -> (-NBAPlayer(x) | SoccerPlayer(x)))", "all x.((StephenCurry(x) & - NBAPlayer(x)) -> (-NBAPlayer(x) & -SoccerPlayer(x)))", "all x.((StephenCurry(x) & -LNBAPlayer(x)) -> (-BalladBobsPlayer(x) | SoccerPlayer(x)))", "all x.((StephenCurry(x) & -NBAPlayer(x)) -> -(NBAPlayer(x) | SoccerPlayer(x))))", "all x.((StrongerCurry(x) & -NBAPlayer(x)) -> (-NBAPlayer(x) | SoccerPlayer(x)))", "all x.((StephenCurry(x) & -NBAPlayer(x)) -> (-NBAPlayer(x) | SoccerPlayer(x)))", "all x.((StephenCurry(x) & -NIHPlayer(x)) -> (-NIHPlayer(x) | SoccerPlayer(x)))", "all x.((StephenCurier(x) & -NBAPlayer(x)) -> (-NBAPlayer(x) | SoccerPlayer(x)))", "all x.((StephenCurry(x) & -NBAPlayer(x)) -> (-NBAPlayer(x) | SoccerPlayer(x)))", "all x.((StephenCurry(x) & -NBAPlayer(x)) -> (-NBAPlayer(x) | SoccerPlayer(x)))", "all x.((StephenCurry(x) & -NBAPlayer(x)) -> (-NBAPlayer(x)) | -SoccerPlayer(x)))", "all x.((StephenCurry(x) & -NBAPlayer(x)) -> (-NBAPlayer(x) | -SoccerPlayer(x)))", "all x.((StephenCurry(x) & -NBAPlayer(x)) -> -NABAPlayer(x) & -SoccerPlayer(x))", "all x.((StephenCurry(x) & -NBAPlayer(x)) -> (-NBAPlayer(x) | SoccerPlayer(x)))"]}
{"id": "folio_train_2160", "nl": "Stephen Curry is a professional basketball player.", "fol": "IsProfessionalBasketballPlayer(Stephencurry)", "prediction": ["all x.((StephenCurry(x) & ProfessionalBasketballPlayer(x)) -> Professional(x))", "(ProfessionalBasketballPlayer(StephenCurry))", "all x.(StephenCurry(x) -> ProfessionalBasketballPlayer(x))", "Stephen Curry (ProfessionalBasketballPlayer)", "(ProfessionalBasketballPlayer(StephenCurry))", "Stephen Curry is professional basketball player.", "Stephen Curry is a professional basketball player.", "all x.((StephenCurry(x) & ProfessionalBasketballPlayer(x)) -> Plays(x,2))", "all x.((StephenCurier(x) & ProfessionalBasketballPlayer(x)) -> Professional(x))", "(ProfessionalBasketballPlayer(StephenCurry) & -Plays(StephenCurry,Basketball))", "(ProfessionalBasketballPlayer(StephenCurry))", "(ProfessionalBasketballPlayer(StephenCurry))", "all x.(BasketballPlayer(x) -> Professional(x))", "StephenCurry(StephenCurry) is a professionalBasketballPlayer(StephenCurry)", "Stephen Curry, is a professional basketball player.", "(ProfessionalBasketballPlayer(StephenCurry))"]}
{"id": "folio_train_2161", "nl": "Stephen Curry is not a centerback.", "fol": "-IsCenterBack(Stephencurry)", "prediction": ["Smith(StephenCurry) -Centerback(StephenCurry))", "all x.((StephenCurry(x) & -Centerback(x)) -> -Centerback(x))", "all x.((StephenCurry(x) & -Centerback(x)) -> -Centerback(x))", "(-Centerback(StephenCurry))", "all x.((StanleyCurry(x) & -Centerback(x)) -> -Centerback(x))", "(-centerback(StephenCurry))", "all x.((StanleyCurry(x) & -Centerback(x)) -> NotCenterback(x))", "all x.((StephenCurry(x) & -Centerback(x)) -> -Centerback(x))", "-Centerback(StephenCurry)", "StephenCurryAreCenterBacks(StephenCurry)", "(-centerback(StephenCurry))", "all x.((StephenCurry(x) & -Centerback(x)) -> -Centerback(x))", "all x.((StephenCurry(x) & -Centerback(x)) -> -Centerback(x))", "(HelenCruel(StephenCurry) & -Centerback(StephenCurry))", "(-centerback(StephenCurry(StephenCurry))", "StephenCorner(StephenCourtney) -> -Centerback(StephenCurry))"]}
{"id": "folio_train_2162", "nl": "Naive cynicism was proposed by Justin Kruger and a colleague.", "fol": "(ProposedNaiveCynicism(JustinKruger,NaiveCynicism) & ProposedNaiveCynicism(ColleagueOfJustinKruger,NaiveCynicism))", "prediction": ["all x.(NaiveCynicism(x) -> (ProposedBy(x,JustinKrumer) & Coworker(x)))", "all x y.((NaiveCynicism(x) & JustinKruger(y)) -> ProposedBy(y,x))", "all x y.((NaiveCynicism(x) & JustinKruger(y) & Coworker(y)) -> ProposedBy(x,y))", "all x y z.((NaiveCynicism(x) & JustinKruger(y) & Colleague(z)) -> ProposedBy(y,x,z))", "all x y z.((NaiveCynicism(x) & Candidacy(y) & JustinKruger(z)) -> (ProposedBy(y,z) & Colleague(y)))", "(NoiveCynicism(NaiveCynicism) ToutedByJustinKruger(Jack) & OccupiedByColleague(JudieKruger#7(NaiveCynicism)))", "all x y.((NaiveCynicism(x) & JustinKruger(y)) -> ProposedBy(y,x))", "all x y.((NovellCynicism(x) & JustinKruger(y) & Colleague(x,y)) -> ProposedBy(y,x))", "all x.(NaiveCynicismProposedByJustinKrugerEvenWithColleague(x) -> Responds(x))", "all x y.((NaiveCynicism(x) & JustinKruger(y)) -> ProposedBy(y,x))", "all x y.((NaiveCynicism(x) & JustinKruger(y)) -> Proposed(x,y))", "all x y.(((Krumer(x) & Kollege(y)) -> NaiveCynicism(x))", "all x y.((NaiveCynicism(x) & JustinKrumger(y)) -> ProposedBy(y,x))", "all x.(NaiveCynicism(x) -> (ProposedBy(x,JulianKrumger) & OpposedBy(x,Kerrie)))", "(ProposedByHumanisticCynicism(naivecynicism) & JustinKruger(naivecynicism) & Friend(naivecynicism))", "all x y.((NovealCynicism(x) & JustinKruger(y)) -> ProposedBy(y,x))"]}
{"id": "folio_train_2163", "nl": "Thomas Gilovich is a colleague of Justin Kruger. ", "fol": "IsColleagueOf(ThomasGilovich,JustinKruger)", "prediction": ["Thomas Gilovich is a colleague(x) & JustinKruger(x))", "(Colleague(ThomasGilovich) & JustinKurger(ThomasGilovitch))", "all x.((TomTomGilovich(x) & JustinKrugerFriend(x)) -> Colleague(x))", "(Colleague(ThomasGilovich) & JustinKruger(ThomasGlovich))", "(Co-Colleague(ThomasGilovich) & JustinKruger(Thomas))", "(College(tm) & CoworkerOf(tm,t,t) & JustinKrumger(t))", "(Colleague(ThomasGilovich, JustinKrumger))", "(Colleague(ThomasGlovich) & Colleague(ThomasKrauger))", "all x y.((TommyGilovich(x) & JustinKrumger(y)) -> Colleague(x,y))", "Thomas Gilovich is a colleague of Justin Kruger.", "Thomas Gilovich (exists x.(Colleague(x) & JustinKruger(x)))", "(Colleague(ThomasGilovich) & JustinKruger(Thomas))", "all x y.((ThomasGilovich(x) & JustinKraver(y)) -> Colleague(x,y))", "(Coworker(ThomasGilovich) & JustinKruger(Tomosphere))", "(Colleague(ThomasGilovich) & JamesKrauger(Thomas,Krauger))", "(Colleague(ThomasGlovich) & JustinKrumger(Tom))"]}
{"id": "folio_train_2164", "nl": "Naive cynicism is a philosophy of mind.", "fol": "IsPhilosophyOfMind(NaiveCynicism)", "prediction": ["all x.(NaiveCynicism(x) -> PhilosophyOfMind(x))", "all x.(NaiveCynicism(x) -> PhilosophyOfMind(x))", "all x.(NaiveCynicism(x) -> PhilosophyOfMind(x))", "all x.(NaiveCynicism(x) -> PhilosophyOfMind(x))", "all x.(NaiveCynicism(x) -> PhilosophyOfMind(x))", "all x.(NaiveCynicism(x) -> PhilosophyOfMind(x))", "all x.(NaiveCynicism(x) -> PhilosophyOfMind(x))", "all x.(NaiveCynicism(x) -> PhilosophieOfMind(x))", "all x.(NaiveCynicism(x) -> PhilosophyOfMind(x))", "all x.(NaiveCynicism(x) -> PhilosophyOfMind(x))", "all x.(Cynicism(x) -> ObjectOfMind(x))", "all x.(NaiveCynicism(x) -> PhilosophyOfMind(x))", "all x.(NaiveCynicism(x) -> PhilosophyOfMind(x))", "all x.(NaiveCynicism(x) -> PhilosophyOfMent(x))", "all x.(NaiveCynicism(x) -> The PhilosophyOfMind(x))", "all x.(NaiveCynicism(x) -> PhilosophyOfMind(x))"]}
{"id": "folio_train_2165", "nl": "Thomas Gilovich proposed naive cynicism.", "fol": "ProposedNaiveCynicism(ThomasGilovich,NaiveCynicism)", "prediction": ["Thomas Gilovich proposedNaiveCynicism.", "(Proposed(ThomasGilovich) & NaiveCynicism(Gilovich,NaiveCynicism))", "all x y.((Thomas(x) & ThomasGilovich(y)) -> ProposedNaiveCynicism(x,y))", "Thomas Gilovich proposedNaiveCynicism(Thomas,Gilovich)", "Thomas Gilovich proposingNaiveCynicism(Thomas)", "all x.((ThomasGilovich(x) & NaiveCynicism(x)) -> Proposed(x))", "all x.((ThomasGilovich(x) & Naivecynicism(x)) -> Proposed(x,y))", "Thomas Gilovich hasn't really thought about NaiveCynicism.", "all x.(ThomsonGilovich(x) -> ProposedNaiveCynicism(x))", "Thomas Gilovich offeredNaiveCynicism(ThomasGilovich)", "Thomas Gilovich (naiveCynicism)", "(ProposedNaiveCynicism(ThomasGilovich):", "all x y z.(((ThomasGilovich(x) & NaiveCynicism(y) & NaiveCynicism(z)) -> Proposed(x,y,z))", "Thomas Gilovich proposes NaiveCynicism(Thomas)", "Thomas Gilovich, Czynist(Thomas)", "Thomas Gilovich proposed naiveCynicism(Thom)"]}
{"id": "folio_train_2166", "nl": "Justin Kruger propose a philosophy of mind.", "fol": "exists x.(ProposedNaiveCynicism(JustinKruger,x) & IsPhilosophyOfMind(x))", "prediction": ["all x y.((JosephKruger(x) & JustinKruger(y)) -> ProposesPhilosophismOfMind(x,y))", "all x.(ProposesPhilosophyOfMind(x) -> JustinKruger(x))", "all x.(To JustinKruger(x) -> ProposesPhilosophicOfMind(x))", "JustinKruger proposesPhilosophyOfMind(x)", "all x y z.((JustinKruger(x) & PhilosophyOfMind(y) & PhilosophyOfMent(z)) -> Proposes(x,y,z))", "all x y.((JudeikKruger(x) & PhilosophyOfMind(y)) -> Proposes(x,y))", "all x y.((JustinKruger(x) & PhilosophyOfMind(y)) -> Offers(x,y))", "Justin Kruger proposes philosophyOfMind(x)", "JustinKruger proposestheoriesOfMind(JulianKruger)", "all x.(ProposesPhilosophyOfMent from JustinKrumer(x) -> MentalPhysics(x))", "all x.((JuliusKruger(x) & PhilosophyOfMind(x)) -> Propose(x,Hubit))", "all x.((JustinKruger(x) & PhilosophyOfMent(x)) -> Proposes(x,JeffreyKruger))", "JustinKorger proposesPhilosophyOfMind(2008)", "all x.((JudyKruger(x) & PhilosophyOfMent(x)) -> Proposes(x,y))", "all x.(Mind(x) -> JustinK Kruger(x))", "Justin Kruger proposes PhilosophyOfMind(x)"]}
{"id": "folio_train_2167", "nl": "Thomas Gilovich worked on philiophies of mind.", "fol": "WorkedOn(ThomasGilovich,PhilosophiesOfMind)", "prediction": ["all x y.((Tom ThomasGilovich(x) & PhiliophiesOfMind(y)) -> WorksOn(x,y))", "all x.(ThomasGilovich(x) -> (WorkedOnPhiliophiesOfMind(x) & -WorkedOnPhillysopsOfMind(x)))", "all x.((ThomasGilovitch(x) | PhiliophyOfMent(x))) -> WorkedOn(x,philiophiesOfMind))", "Thomas Gilovich worked on philiophies of mind.", "all x.(Lucy(x) -> WorksOnPhiliophiesOfMind(x))", "(WorkedOnPhiliophiesOfMind(ThomasGilovich))", "all x.(ThomasGilovich(x) -> WorkedOnPhiliophiesOfMind(x))", "all x.(Gilovich(x) -> (WorkedOnPhiliophiesOfMind(x) & -WorkedOnPhiliophiesOfMind(x)))", "((Gilovich(Gillowich) & PhiliophiesOfMind(Gillowich)) -> WorkedOn(Gillowich(Gillowch,Gillow))", "all x.(WorkedOnPhiliophiesOfMent(x) -> ThomasGilovich(x))", "all x.(Gilovich(x) -> PhiliophiesOfMind(x))", "all x.(ThomasGolovich(x) -> WorkedOnPhiliophiesOfMind(x))", "all x.(ThomasGilovich(x) -> WorkedOnPhiliophiesOfMind(x))", "all x.(WorkedOnPhiliophiesOfMind(x) -> ThomasGilovich(x))", "all x.(ThomasGilovich(x) -> (PhiliophiesOfMind(x) & WorkingOn(x,PhiliophiesOfMind)))", "all x.(ThomasGilovich(x) -> WorkedOnPhiliophiesOfMind(x))"]}
{"id": "folio_train_2168", "nl": "The Turing Award has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming and John McCarthy. ", "fol": "(AwardedTuringAward(DonaldKnuth) & AwardedTuringAward(MarvinMinsky) & AwardedTuringAward(RichardHamming) & AwardedTuringAward(JohnMccarthy))", "prediction": ["has been awarded to DonaldKnuth,MarvinMinsky,RichardHamming and JohnMcClarke.", "(Winners(TurningAward) -> (DonaldKnuth(RonanKnuth) & MarvinMinsky(RonanHamming) & JohnCarroll(Knuth)))", "this Award (AllowedToDonaldKnuth(NaturalArticle) & AlignedToMarvinMinsky(NaturalArtefacts) & AlignedToRichardHamming(NaturalArtefacts) & AlignedToJohnMcCarthy(NaturalArtefacts))", "Das TuringAward(Turing) \u00e2\u20ac\u201cAwardedTo(Turning,DonaldKnuth,MarvinMinsky,RichardHamming,JohnMcCarthy))", "The TuringAwards(Turning) is an award from Three Aggregates (DonorKnuth,Downtown,MarvinMinsky,RichardHamming,JohnMcCarthy))", "(all x.(TuringAward(x) -> (AwardedToDuncanKnuth(x) | AwardedToMarvinMinsky(x) | AwardedToRichardHamming(x) | AwardedToJohnMcCarthy(x))))", "(AwardedToKnuth(Knuth) & MarvinMinsky(Minsky) & RichardHamming(Mickins(Kickins)))", "(Award(TM3_DuckNutty(TM) | Award(TM3_MarvinMinsky(TM) | Award(TM3_Rick Hamming(TM) | Award(TM3_JohnMcCarthy(TM)))", "All x y z.((TuringAward(x) & DonaldKnuth(y) & MarvinMinsky(z) & RichardHamming(z)) -> (AwardedTo(x,y,z) & AwardedTo(x,y) & AwardedTo(x,y) & AwardedTo(x,y)))", "All x.(TuringAward(x) -> (AwardedTo(x, DonaldKnuth) & AwardedTo(x,MarvinMinsky) & AwardedTo(x,RichardHamming) & AllocatedTo(x,JohnCumber)))", "(AwardedTo(TuringAward) -> DonaldKnuth,MarvinMinsky,RichardHamming,JohnMcCarthy))", "(AwardedToAward(Turing(Turing) & DonaldKnuth(Turnant) & MarvinMinsky(Turnant) & RichardHammond(Turnant) & JohnMcCarthy(Turnant))", "(Award(Turing) -> (DouglasKnuth(Knuth) | MarvinMinsky(Knuth) | RichardHamming(Kim McCarthy)))", "(AwardedTo(Award,DanielKnuth) | AwardedTo(Award,MarvinMinsky) | AwardedTo(Award,Rick Hamming,JohnMcCarthy)))", "The Turing Award has been awarded to DonaldKnuth, MarvinMinsky,RichardHamming,JohnMcCarthy,AndMcCourtney(McCarthy)", "The Turing Award was granted to DonaldKnuth, MarvinMinsky,RichardHamming,JohnMcCarthy and JohnK McCarthy."]}
{"id": "folio_train_2169", "nl": "Donald Knuth made major contributions to the analysis of algorithms.", "fol": "MadeContributionsTo(DonaldKnuth,Algorithms)", "prediction": ["Donald Knuth made major contributions to the AnalysisOfAlgorithms(Knuth,Algorithms) -> MajorContributions(Knuth,Algorithms))", "(MajorContribution(DonaldKnuth,Algorithms))", "all x.((DonaldKnuth(x) & MajorContribution(x)) -> AnalyzesAlgorithms(x))", "all x y.((DonaldKnuth(x) & Algorithm(y)) -> MadeMajorContributionsTo(x,y))", "all x y z.((DonaldKnuth(x) & Algorithms(y) & Algorithms(z)) -> (MajorContribution(x,y) | MajorContribution(x,z))))", "(MeetsAlley(DonaldKnuth,Algorithms) & SignificantContribution(Knuth,Algorithms))", "Donald Knuth made majorAlgorithmAnalysisContributions(Duncan,Knuth)", "Donald Knuth was part of analysis of Algorithms.", "Donald Knuth made major contributions to analysis of Algorithms.", "Donald Knuth made major contributions to the analysis of Algorithms(Knuth,Palaxys)", "(MinorContributions(DonaldKnuth))", "Donald Knuth made major contributions to the analysis of Algorithms.", "Donald Knuth made major contributions to the analysis of algorithms.", "Donald Knuth made major contributions to the analysis of algorithms.", "(MajorContributionsToAnalysis(DonaldKnuth))", "((DuncanKnuth(k) & AnalyzeAlgorithms(k)) -> MajorContributions(k)))"]}
{"id": "folio_train_2170", "nl": "Marvin Minsky is recognized by his contributions to the field of artificial intelligence.", "fol": "MadeContributionsTo(MarvinMinsky,Ai)", "prediction": ["all x.(MarvinMinsky(x) -> RecognizedByArtificialIntelligence(x))", "all x.(MajorMinsky(x) -> RecognizedByArtificialIntelligence(x))", "all x.((MarvinMinsky(x) & ContributionsToArtificialIntelligence(x)) -> Recognized(x))", "(RecognizedByContributionsToArtificialIntelligence(MarvinMinsky))", "(RecognizedByCaptions(MarvinMinsky) & ArtificialIntelligence(MarvinMinsky))", "all x.(Pride(x) -> (MarvinMinsky(x,artificialIntelligence) & Contributions(x))))", "all x.((MarvinMinsky(x) & ContributionsToArtificialIntelligence(x)) -> Recognized(x))", "all x.(MarvinMinsky(x) -> ContributesToArtificialIntelligence(x))", "all x.((MarvinMinsky(x) & Contributions(x)) -> Recognition(x))", "all x.((MarvinMinsky(x) & ContributionsToArtificialIntelligence(x)) -> RecognizedBy(x,MarvinMinsky,x))", "all x y.((MarvinMinsky(x) & ArtificialIntelligence(y)) -> RecognizedByContributions(x,y))", "all x.(MarvinMinsky(x) -> ContributesToArtificialIntelligence(x))", "all x.(MarvinMinsky(x) -> ContributionsToArtificialIntelligence(x))", "All x.(MarvinMinsky(x) -> ContributionToArtificialIntelligence(x))", "MarvinMinsky() -> ContributionsToArtificialIntelligence(MarinMinsky))", "Marvin Minsky is recognized and recognized by contribution to ArtificialIntelligence."]}
{"id": "folio_train_2171", "nl": "Richard Hamming did research on numerical methods.", "fol": "MadeContributionsTo(RichardHamming,NumericalMethods)", "prediction": ["(DoesResearchOnNumericalMethods(RichardHamming)", "(DoesResearch(RichardHamming,ComputerMethods))", "all x.((RichardHamming(x) & NumericalMethods(x)) -> DidResearch(x))", "existed x.(Measurement(x) & Research(x,numberalMethods))", "-(DoesResearchOnNumericalMethods(richard Hamming))", "all x.((RichardHamming(x) & PhD(x)) -> DidNumericalMethods(x))", "all x.((RichardHamming(x) & -ResearchNumericalMethods(x)) -> WorkedOn(x,numbericalMethods))", "all x.((RichardHamming(x) & NumericalMethods(x)) -> DidResearch(x))", "(Dissertation(RichardHamming) & NominalMethods(RichardHamming))", "all x.((HarryHamming(x) & NumericalMethods(x)) -> DosenResearch(x))", "(Discipline(RichardHamming) -> DidResearchOnNumericalMethods(RichardHamming))", "(DoesForeignResearchOnNuministicMethods(RichardHamming,1996))", "Richard Hamming (DentaryOfResearch(w) & NumericalMethods(t) & Research(w))", "Richard Hamming (RichardHammond) & NumericalMethods(RichardHammond))", "all x.((RichardHamming(x) & NumericalMethods(y)) -> Dose(x,y))", "all x.(HisResearch(x) -> RichardHamming(x))"]}
{"id": "folio_train_2172", "nl": "John McCarthy had a central role in creating and shaping the field of artificial inteligence. ", "fol": "MadeContributionsTo(JohnMccarthy,Ai)", "prediction": ["all x.((CreatedArtificialIntelligence(x) & ShapedArtificialIntelligence(x)) -> JohnMcCarthy(x))", "all x.((JohnCarthy(x) & ArtificialIntelligence(x)) -> CentralRollInCreatingAndShaping(x))", "all x.((JohnMcCarthy(x) & ArtificialIntelligence(y)) -> CentralRole(x,y))", "J.McCarthy (c) & CreatesAndShapesArtificialIntelligence(JohnMcCarthy))", "all x y.((JohnMcCarthy(x) & ArtificialInteligence(y)) -> CentralRoleInCreatingAndShaping(x,y))", "(Created(JohnMcCarthy,artificialIntelligence) & Shaped(JohnMcCarthy,ArtificialIntelligence))", "all x y z.((JohnCumber(x) & ArtificialIntelligence(y) & ArtificialIntelligence(z)) -> CentralRole(x,y,z))", "all x.(Person(x) -> (CreatesArtificialIntelligence(x) & ShapesArtificialIntelligence(x)))", "all x.((JohnMcCarthy(x) & ArtificialIntelligence(y)) -> ContributesAreaToCreateAndForm(x,y))", "all x.(And JohnMcCarthy(x) -> (CreatedArtificialIntelligence(x) & ShapedArtificialIntelligence(x)))", "all x y.((JohnMcCarthy(x) & ArtificialIntelligence(y)) -> CentralRoleInCreatingAndShaping(x,y))", "all x.((JohnMcCarthy(x) & ArtificialIntelligence(x)) -> CentralRoll(x))", "all x.((JohnCarlisle(x) & ArtificialIntelligence(x)) -> (CreatesAndShapes(x,Intelligence) & Creates(x,Intelligence)))", "all x.((JohnCarthy(x) & CreatingArtificialIntelligence(x) & ShapesArtificialIntelligence(x)) -> PlaysAsCreatedInBelief(x))", "the role of John McCarthy in artificial Intelligence (Capturation(John McCarthy,artificialIntelligence))", "all x y.((JohnMcCarthy(x) & ArtificialIntelligence(y)) -> (CreatedAndShapedFieldThanIntelligence(x,y) & ShapedFieldTruft(x,y)))"]}
{"id": "folio_train_2173", "nl": "No Turing Award winners contributed to the field of numerical methods.", "fol": "-exists x.(AwardedTuringAward(x) & MadeContributionsTo(x,NumericalMethods))", "prediction": ["-(WinnerTuringAward(x) & ContributedToNumericalMethods(x)))", "-exists x.(Winner(x) & TuringAward(x) & ContributesToNum(x))", "-exists x.(TuringAwardWinner(x) & ContributesToNumericalMethods(x))", "all x.(TuringAwardWinner(x) -> -ContributedToNumericalMethods(x))", "-exists x.(Winner(x) & TuringAward(x) & ContributedTo(x,numberingMethods))", "-exists x y.(TuringAwards(x) & Winner(y) & ContributesToNumbericalMethods(y))", "\u2013 exists x.(Winner(x) & TuringAward(x) & ContributedTo(x,numbericalMethod)))", "-exists x.(TuringAwardWinner(x) & ContributesToNumericalMethods(x))", "-exists x.(Winner(x) & TuringAward(x) & ContributesToNumericalMethods(x))", "-exists x.(Winner(x) & TuringAward(x) & ContributesToNumericalMethods(x))", "-exists x.(Winner(x,TuringAward) & ContributesToNumericalMethods(x))", "-exists x.(Winner(x) & TuringAward(x) & ContributesToNumericalMethods(x))", "-all x.(TuringAwardChampion(x) -> ContributedToNumericalMethods(x))", "in the field of NumericalMethods.", "(-exists x.(TuringAwardWinner(x) & ContributesToNumericalMethods(x)))", "-(TuringAward(or Winner(k)) & ContributedToNumericalMethods(k,y))"]}
{"id": "folio_train_2174", "nl": "No easy Leetcode problems have an AC rate lower than 20 percent. ", "fol": "all x.(IsEasyProblem(x) -> -HasLowACRate(x))", "prediction": ["-exists x.(EasyLeetcodeProblem(x) & LowERG(x,20))", "-(EasyLeetcodeProblem(x) & ACRateNegative(x,20)))", "all x.((EasyLeetcodeProblem(x) & -CurrentABCRateForValuation(x,z)) -> -LowerThan-20Percent(z))", "-exists x.(EasyLeetcodeProblem(x) & LowAcRate(x,20))", "-exists x.(EasyLeetcodeProblem(x) & RateLowerThan(x,20))", "-exists x.(EasyLeetcodeProblem(x) & LowerAACRate(x,0,20))", "-exists x.(EasyLeetcodeProblem(x) & -AcRateRib(x,(60%) & LowerThan(x,10)))", "all x.(EasyLeetcodeProblem(x) -> ACRateLessThan20Percent(x))", "KeenelcodeProblem(e) & HasACRateLowerThan(e,20))", "-exists x.(EasyLeetcodeProblem(x) & HasACRateLowerThan20Percent(x))", "all x.((EasyLeetcodeProblem(x) & LowACRate(x,20)) -> -Has(x,20))", "all x.((Problem(x) & EasyLeetcode(x)) -> -ACRemeFactorLessThan(x,20))", "-exists x.(EasyLeetcodeProblem(x) & HasACRateLowerThan20Percent(x))", "-exists x.(EasyLeetcodeProblem(x) & Low ACRate(x,))", "-exists x.(EasyLeetcodeProblem(x) & (ACRateLesstThan(x,20)) | Faulty(x)))", "-exists x.(EasyLeetcodeProblem(x) & LowerThan(x,20%))"]}
{"id": "folio_train_2175", "nl": "All Leetcode problems recommended to novices are easy.                                                                                                       ", "fol": "all x.(IsRecommendedToNovices(x) -> IsEasyProblem(x))", "prediction": ["all x.(LeetcodeProblem(x) -> Easy(x))", "all x.(LeetcodeProblem(x) -> Easy(x))", "all x.(LeetcodeProblem(x) -> Easy(x))", "all x.(LeetcodeProblem(x) -> Easy(x))", "all x.(LeetCodeProblem(x) -> Easy(x))", "all x.exists y.(LeetcodeProblem(x) & Noob(y) & RecommendedFor(x,y))", "all x.(LeetcodeProblem(x) -> AvailableToNinjas(x))", "all x.(LeetcodeProblem(x) -> (Easy(x) & RecommendedToNinjas(x)))", "all x.(LeetcodeProblem(x) -> Easy(x))", "all x.(LeetcodeProblem(x) -> EasyToRecommendToNoveals(x))", "all x.((KeetcodeProblem(x) & RecommendedForNovegars(x)) -> Easy(x))", "all x.(LeetcodeProblem(x) -> Easy(x))", "all x.(LeetcodeProblem(x) -> Easy(x))", "all x.(LeetcodeProblem(x) -> Easy(x))", "all x.((LeetcodeProblem(x) & RecommendedToNoveau(x)) -> Easy(x))", "all x.(LeetcodeProblem(x) -> Easy(x))"]}
{"id": "folio_train_2176", "nl": "Leetcode problems either have an AC rate lower than 20 percent or are starred by more than 1 thousand users. ", "fol": "all x.((HasLowACRate(x) & -IsStarredByUsers(x)) | (-HasLowACRate(x) & IsStarredByUsers(x)))", "prediction": ["all x y.((LeetcodeProblem(x) & -ACRateLowerThan(x,y)) | StartedBy(x,y))", "all x y.((LeetcodeProblem(x) & User(y)) -> (AACRateBothCelebrate(x,y) | StartedByForm(x,y)))", "all x.(LeetcodeProblem(x) -> (HasACRateLessThan20Percent(x) | StartedByMoreThan1KUsers(x)))", "all x.((LeetcodeProblem(x) & LowerThan(x,20)) | StartedBy1000Users(x))", "all x.(LeetcodeProblem(x) -> ((HasACRateLetterThan(x,20)) | StartedByMoreThan(x,1000))))", "all x.(LeetcodeProblem(x) -> ((LowerACRate(x,gen.20) | StartedByMoreToMoreThan1000Users(x))))", "all x.(LeetcodeProblem(x) -> ((Volume(x,20) & StartedByMore(x,1000)) | (Volume(x,1001) & StartedBy(x,200))))", "all x.(LeetcodeProblem(x) -> ((HasACRate(x,20) | StartedByMoreThan1000Users(x))))", "all x.(LeetcodeProblem(x) -> ((ACRate(x,C) & LowerThan(x,20)) | StartedBy(x,MoreThanOneKnight(x))))", "all x.(LeetcodeProblem(x) -> ((HasACRateLowerThan20Percent(x) | StartedByMoreThan1000Users(x))))", "all x.(LeetcodeProblem(x) -> ((LowerCostThan20Percent(x) | StartedByMoreThan1000People(x))))", "all x.(LeetcodeProblem(x) -> ((AirCardrateLowerThan(x,20)) | StarredByMoreThan(x,1000))))", "all x.(LeetcodeProblem(x) -> (HasACRateLowerThan(x, 20) | StartedByMoreThan(x,1000)))", "all x.(LeetcodeProblem(x) -> (LeastACRate(x,19) | StartedByMoreThan(x,1ThanTen(x)))", "all x.(LeetcodeProblem(x) -> ((HasACRateLessThan-20Percent(x) | StartedByMoreThan1000Users(x))))", "all x.(LeetcodeProblem(x) -> ((HasACRate(x,z) & LowerThan(x,z)) | StartedByMoreThan(x,100))))"]}
{"id": "folio_train_2177", "nl": "All hard Leetcode problems are starred by more than 1 thousand users. ", "fol": "all x.(IsHardProblem(x) -> IsStarredByUsers(x))", "prediction": ["all x.(HardLeetcodeProblem(x) -> StartedByOver1000Users(x))", "all x.(HardLeetCodeProblem(x) -> StartedByMorethan1000(x))", "all x.(LeetcodeProblem(x) -> Started(x))", "all x.(HardLeetcodeProblem(x) -> StartedByMoreThan1000Users(x))", "all x.((HardLeatcodeProblem(x) & StartedByMoreThan(x,1000)) -> StartedBy(x,1000))", "all x.(HardLeetcodeProblem(x) -> StartedByMoreThan(x,1000))", "all x.(HasHardLeetcodeProblem(x) -> StartedByMoreThan1000Users(x))", "all x.(HardLeetcodeProblem(x) -> StartedByMoreThan1000Users(x))", "all x y z.((HardLeetcodeProblem(x) & User(y) & User(z)) -> StartedBy(y,z))", "all x.(HardLeetcodeProblem(x) -> StartedByTen(x,y))", "all x.((HardLeetcodeProblem(x) & StartedByMoreThanOneTen(x)) -> StartedByMoreThan1000Users(x))", "all x.(HardLeetcodeProblem(x) -> StartedByMoreThan1000Users(x))", "all x.(StrawLeetcode(x) -> StartedByManyUsers(x))", "all x.(LeetCodeProblem(x) -> StartedByMoreThan(x,1000))", "all x.(LeetcodeProblem(x) -> StartedByMoreThan1000Users(x))", "all x.(HardLeetcodeProblem(x) -> StartedByMoreThanThreeKinder(x))"]}
{"id": "folio_train_2178", "nl": "No Leetcode problems published after 2022 are starred by more than 1 thousand users. ", "fol": "all x.(IsPublishedAfter2022(x) -> -IsStarredByUsers(x))", "prediction": ["all x.((LeetcodeProblem(x) & PublishedAfter2022(x)) -> StartedByMoreThan(x,2000))", "all x.((LeetcodeProblem(x) & PublishedAfter2022(x)) -> StartedByMoreThanOneThreeKnowledge(x))", "All x.(LeetcodeProblem(x) -> (PublishedAfter2022(x) & StartedByMoreThan1000Users(x)))", "all x.((LeetcodeProblem(x) & PublishedAfter2022(x)) -> StartedByMoreThanThreeKinds(x))", "all x.((Problem(x) & PublishedAfter2022(x) & StartedByMoreThan(x,00)) -> NoLeetcode(x))", "all x y.((LeetcodeProblem(x) & ReleasedAfter2022(x,y)) -> StartedByMoreThan(x,y))", "all x.((LeetcodeProblem(x) & PublishedAfter2022(x) & MoreThanOneThirty(x)) -> StartedBy(x,y))", "all x.((LaetcodeProblem(x) & PublishedAfter2022(x)) -> StartedByMoreThan1000Users(x))", "all x.((LeetcodeProblem(x) & PublishedAfter2022(x)) -> StartedByMoreThanOneThree(x))", "all x.((LeetcodeProblem(x) & PublishedAfter2022(x)) -> Started(x,x))", "all x.((LeetcodeProblem(x) & PublishedAfter2022(x)) -> StartedByMoreThanOneTen(x))", "-exists x.(LeetcodeProblem(x) & PublishedAfter(x,exceeding2022) & StartedByMoreThan(x,1000))", "all x.(LeetcodeProblem(x) -> -> -exists y.(LeetcodeProblem(y) & PublishedAfter(x,y) | PublicationAfterX,y) & StartedByMoreThan(x,z)))", "all x y.((LeetcodeProblem(x) & PublishedAfter(x,y) & Above(y,1000)) -> StartedBy(x,y))", "all x.((LeetcodeProblem(x) & PublishedAfter2022(x)) -> StartedByMoreThan(x,1000))", "-exists x.(LeetcodeProblem(x) & PublishedAfter(x,y) & MoreThan(y,1000) & StartedBy(x,y))"]}
{"id": "folio_train_2179", "nl": "2Sum is not recommended to novices and hard. ", "fol": "-(IsRecommendedToNovices(Twosum) & IsHardProblem(Twosum))", "prediction": ["all x.((Boy(x) & -RecommendedToNovegars(x) & -RecommendedToHard(x)) -> 2Sum(x))", "2Sum-RecommendedToNovealsAndHard(2Sum)", "2Sum is not recommendedtoNovellsAndHard(2Sum)", "2Sum is not RecommendedToNobs(2Sum) & Hard(2Sum))", "-RecommendedToNovelsAndHard(2Sum)", "all x.(2Sum(x) -> -(Innovatives(x) & Hard(x)))", "all x.(2Sum(x) -> -RecommendedToNovees(x) & RecommendedToHard(x))", "(-RecommendedToNoveals(Melodias(Sum) & -RecommendedToHard(Sum)))", "-(RecommendedToNoveals(Sum) & -RecommendedToHard(Sum))", "No novices/hard. (2Sum(x) -> -RecommendedTo(x,y))", "2Sum & -(Newbie(x) & Hard(x))", "All x.((Sum(x) & -RecommendedToNinety(x) & -RecommendedToHard(x)) -> -RecommendedToNovels(x))", "2Sum.((Nice(n) & Hard(n)) -> -RecommendedFor(nivers(n) & RecommendedFor(nivers(n)))", "all x.((Novee(x) & Hard(x)) -> - RecommendedToOld(x,2))", "2Sum - (RecommendsToNewcomers(2Sum) & -RecommendsToHard(2Sum)))", "-RecommendsToNontechnologistsAndHard(2Sum)"]}
{"id": "folio_train_2180", "nl": "4Sum is either starred by more than 1 thousand users and published after 2022, or neither starred by more than 1 thousand users nor published after 2022. ", "fol": "-((IsStarredByUsers(Foursum) & -IsPublishedAfter2022(Foursum)) | (-IsStarredByUsers(Foursum) & IsPublishedAfter2022(Foursum)))", "prediction": ["(all x.(StartedByMoreThanOneTen(x) & PublishedAfter2022(x)) | -StartedByMoreThanOneTen(x) & PublishedAfter2022(x)))", "all x.((Sum(x) & StartedByMoreThan(x,2000) & PublishedAfter(x,1992)) | (-StartedByMoreThan(x,2000) & -PublishedAfter(x,1992))))", "(all x.(Other(x) -> StartedBy(x,2000)) | (-StartedBy(x,2000) & PublishedAfter(x,2002))))", "all x.(Sum(x) -> (StartedBy(x,x) & (PublishedAfter(x,x) | (Through(x,x) | PublishedAfter(x,x))))))", "(All x.(Sum(x) -> StartedByMoreThan(x,2002)) | (-StartedByMoreThan(x,202)) | -BerkedByMoreThan(x,2002))))", "all x.(4Sum(x) -> ((StartedByMoreThan1000Users(x) & PublishedAfter2022(x)) | -StartedByMoreThan1000Users(x) & -PublishedAfter2022(x))))", "all x.((Sum(x) & StartedBymoreThan(x,y) | (StartedByMoreThan(y,x) & PublishedAfter2022(x))))", "all x.(4Sum(x) -> ((StartedByMoreThanOne(x,2000) | PublishedAfter2022(x,2002)) | (-StartedByMoreThanOne(x,2000) & PublishedAfter2022(x))))", "all x.((Sum(x) & StartedByMoreThan(x,y) & PublishedAfter2022(x,y)) | (-StartedByMoreThan(x,y) & PublishedAfter2022(x))))", "all x.(Sum(x) -> (StartedByMoreThan1000Users(x) & PublishedAfter2022(x) & -StartedByMoreThan1000Users(x) & -PublishedAfter2022(x)))", "(all x.(Sum(x) -> (StartedBy(x,2000) | PublishedAfter(x,2022))))", "all x.((StartedByMoreThan(x,y) & 2022(y)) -> (IsStartedByMoreThan(x,y) & -IsStartedByMoreThan(x,y) & -IsStartedByMoreThan(x,y) & -IsPublishedAfter(x,y)))", "all x.(((Sum(x) & StartedByOverOneTwelveUsers(x,y)| & -StartedByMoreThanOneTwelveUsers(x)) -> PublishedAfter2022(x))", "all x.(Sum(x) -> ((StartedByMoreThan(x,2000) & PublishedAfter(x,2020)) | -StartedByMoreThan(x,2000) & -PublishedAfter(x,2020)))", "all x.(Sum(x) -> ((StartedByMoreThanOneKnight(x) & PublishedAfter2022(x)) | (-StartedByMoreThanOne1000(x) & PublishedAfter2022(x)))))", "All x.(4Sum(x) -> ((StartedByMoreThan(x,1000) & PublishedAfter(x,2022)) | (-StartedByMoreThan(x,1000) & -PublishedAfter(x,2022))))"]}
{"id": "folio_train_2181", "nl": "2Sum is an easy Leetcode problem.", "fol": "IsEasyProblem(Twosum)", "prediction": ["(2Sum) -> EasyLeetcodeProblem())", "2Sum is anEasiestLeetcodeProblem(x))", "2Sum is anEasyLeetcodeProblem(x))", "all x.(2Sum(x) -> EasyLeetcodeProblem(x))", "all x.((Leetcode(x) & Easy(x)) -> 2Sum(x))", "is an EasyLeetcodeProblem(2Sum)", "2SumByLeetCode(e)", "2SumBoad(x) -> EasyLeetcodeProblem(x))", "2Sum is an EasyLeetcodeProblem(x)", "2SumProblem(x) -> EasyLeetcode(x))", "2Sum is anEasyLeetcodeProblem(x)", "All x.(Sum(x) -> EasyLeetcodeProblem(x))", "(EasyLeetcodeProblem(Sum) & EasyLeetcode(Sum))", "Exists x.((LeetcodeProblem(x) & Easy(x,1))", "2Sum (EasyLeatcodeProblem)", "1Sum isLeetcodeProblem(x) -> Easy(x))"]}
{"id": "folio_train_2182", "nl": "2Sum is not an easy Leetcode problem.", "fol": "-IsEasyProblem(Twosum)", "prediction": ["2Sum is not anEasyLeetcodeProblem(x)", "2Sum is not an EasyLeetcodeProblem(x) -> -IsSumBuggy(x))", "2Sum - EasyLeetcodeProblem(x))", "2Sum is notEasyLeatcodeProblem(2Sum)", "2Sum is -EasyLeetcodeProblem(x))", "2Sum is not-EasyLeetcodeProblem(Is-ElectricLeetcodeProblem(Is))", "-EasyLeetCodeProblem(2Sum)", "2Sum is uneasyLeetcodeProblem((2Sum) & -EasyLeetcode(2Sum))", "2Sum - EasyLeetcodeProblem(x))", "-EasyLetcodeProblem(2Sum)", "is not an EasyLeatcodeProblem(2Sum)", "-EasyLeetcodeProblem(2Sum)", "-EasyLeatcodeProblem(2Sum)", "-EasyLeetcodeProblem(2Sum)", "2Sum - EasyLeetcodeProblem(leatcode)", "-(EasyLeetcodeProblem(2Sum) | EasyLeetcodeProblem(2Sum)))"]}
{"id": "folio_train_2183", "nl": "4Sum is a Leetcode problem recommended to the novice or is hard.", "fol": "(IsRecommendedToNovices(Foursum) | IsHardProblem(Foursum))", "prediction": ["all x.((LeaTcodeProblem(x) & (Neptune(x) | Hard(x))) -> LeetcodeProblem(x))", "all x.(Sum(x) -> (LeetcodeProblem(x) & (Noveau(x) | Hard(x))))", "all x.(LetcodeProblem(x) -> (RecommendedToNewcomer(x) | Hard(x)))", "all x.(PositiveAction(x) | HardProbable(x))", "all x.((4Sum(x) & (NinetcodeProblem(x) | Hard(x))) -> RecommendedTo(x,y))", "all x.((LeetcodeProblem(x) & RecommendedToNovealist(x)) | Hard(x))", "all x.(4Sum(x) -> (Problem(x) & (RecommendedToNovel(x) | Hard(x))))", "all x.(FourSum(x) -> (LeetcodeProblem(x) & (NovellRecommended(x) | Hard(x))))", "all x.(4Sum(x) -> (LeetcodeProblem(x) & (RecommendedToNoena(x) | Hard(x))))", "all x.((LeetcodeProblem(x) & (Novel(x) | Hard(x))) -> 4Sum(x))", "all x.((LeetcodeProblem(x) & (NeptuneRecommendation(x) | Hard(x))) -> 4Sum(x))", "all x.(LeetcodeProblem(x) -> (recommendedToNovel(x) | Hard(x))))", "all x.(Sum(x) -> (LeetcodeProblem(x) & (NobodyRecommended(x) | Hard(x))))", "all x.((LeetcodeProblem(x) &/OrHard(x)) -> LeetcodeProblem(x))", "all x.(4Sum(x) -> (LeetcodeProblem(x) & (RecommendedToNicenes(x) | Hard(x))))", "all x.(LeetcodeProblem4Sum(x) -> (RecommendationToNovealist(x) | Hard(x)))"]}
{"id": "folio_train_2184", "nl": "4Sum is neither a 2Sum Leetcode problem recommended to the novice nor a Leetcode problem that's hard.", "fol": "(-(IsRecommendedToNovices(Twosum) & IsEasyProblem(Foursum)) & -IsHardProblem(Foursum))", "prediction": ["all x.((LetcodeProblem(x) & -(LetcodeProblem(x) & 2SumNoveau(x)) | LeetcodeProblem(x) & Hard(x))) -> 4Sum(x))", "(NovellRecommended(4Sum) & -(LeetcodeProblem(4Sum) | HardLeetcodeProblem(4Sum)))", "all x.(Sum(x) -> ('(RecommendedToNovedon(x,2) | HardLeetcodeProblem(x,3))))", "all x.(Sum(x) -> ((NonRecommended(x) & -Recommended(x) & -Hard(x))))", "all x.(4Sum(x) -> (-(LeetcodeProblem(x) & RecommendedToNovel(x) & -HybridLeetcodeProblem(x))))", "all x.((LeetcodeProblem(x) & -PreferredToNovee(x) & -HardLeetcodeProblem(x)) -> 4Sum(x))", "all x.((LegendcodeProblem(x) & -(LegendcodeProblem(x) | HardLegendcodeProblem(x))) -> 4Sum(x))", "all x.((LeetcodeProblem(x) & -DueToDenoise(x)) -> (Fast(x) | Hard(x)))", "-(LeetcodeProblem(x,2) & NoNovearSolved(x)) | NoLeetcodeProblem(x,2) & Hard(x))", "all x.((LeetcodeProblem(x) & -RecommendableToNovel(x) & -HardLeetcodeProblem(x)) -> 4Sum(x))", "(i.e. -(LeetcodeProblem(x) & 2SumNetworkEntry(x) & NotRecommendedToNinety(x)) | LeetcodeProblem(x) & Hard(x)))", "((LeetcodeProblem(x) & 3Sum(x)) | (LeetcodeProblem(x) & Hard(x))))", "all x.(Value(x) -> (-(RecommendedInNeptune(x,2) & -Hard(x,3))))", "2Sum LeetcodeProblem(x,n) & -(LewatcodeProblem(x,n) & RecommendedToNovel(x)) & -SilentLewatcodeProblem(x,n)))", "all x.((LeafcodeProblem(x) & -RecommendedToNovel(x) & -HardLeafcodeProblem(x)) -> 4Sum(x))", "all x.((LeetcodeProblem(x) & -(LeetcodeProblem(x) & RecommendableToNinja(x) & -HardLeetcodeProblem(x))) -> 4Sum(x))"]}
{"id": "folio_train_2185", "nl": "Show Your Love is a song recorded by the South Korean boy band BtoB 4u.", "fol": "(IsSong(Showyourlove) & IsRecordedBy(Showyourlove,Btob4u) & IsSouthKorean(Btob4u) & IsBoyBand(Btob4u))", "prediction": ["ShowYourLove(song,SouthKoreanBand,BtoB4u))", "ShowYourLove(SingleSong,South KoreanBand4u) -> RecordedBy(Song(Song,Song))", "ShowYourLove(Song) & RecordedBySouthKoreanBandBtoB4u(S&B&Living)", "ShowYourLove(song) -> RecordedBySouth KoreanBandBtoB4u(s))", "ShowYourLove(Song) est une chanson d'un song de l'BandOfPopular(BtoB4u).", "ShowYouLoveSong(Song(SrKoreanBandBtoB4u) & RecordedByBeastOfBoyBand4u(SrKoreanBand).", "ShowYourLove(Song) \u2014 RecordedBySouthKoreanBandBtoB4u(SecondKoreanBand)", "ShowYourLove(album) & recordedBySouthKoreanBand(album)", "ShowYourLove(Song) & RecordedBySouthKoreanBand2u(Song,BtoB)", "ShowYourLove(Song,SolomonBand(SKoreanBand,BtoB4u))", "ShowYourLove(song) -> RecordedBySouth KoreanBirdBandBtoB4u(s))", "ShowYourLove(song,s) & RecordedBySouth KoreanBandBtoB4u(s) & SouthKoreanBand2u(s))", "ShowYourLove(Song) -> (RecordedBySouth KoreanBandBtoB4u)))", "ShowYourLove(Song)", "ShowYourLove(x) -> RecordedBySOUTHKoreanBand(x))", "ShowYourLove(Song) is a song recorded by South Korean boy band (BtoB4u) & South Korea(BoyBand))"]}
{"id": "folio_train_2186", "nl": "The lead single of the extended play Inside is Show Your Love.", "fol": "(IsExtendedPlay(Inside) & IsLeadSingleOf(Showyourlove,Inside))", "prediction": ["All x.((LeadSingle(x) & ExtendedPlayInside(x)) -> ShowYourLove(x))", "LeadSingleOfExtendedPlayInside(x) -> ShowYourLove(x))", "all x y.((LeadSingle(x) & ExtendedPlayInside(y)) -> ShowYourLove(x,y))", "All x.((LeadSingle(x) & ExtendedPlay(x) & Inside(x)) -> ShowYourLove(x))", "All x.(LeadSingle(x) -> ShowYourLove(x))", "LedSingleOfExtendedPlayInside(LexiestOf(Lens/ExtendedPlay(Lens) & ShowsLove(Lens))", "All x.((LeedSingle(x) & ExtendedPlayInside(x)) -> ShowYourLove(x))", "All x.((LengthSingle(x) & ExtendedPlayInside(x)) -> ShowYouLove(x))", "The lead single of the ExtendedPlayInside(lupus) is ShowYourLove(lupus)", "LeadSingleOfExtendedPlayInside(x) -> ShowYourLove(x))", "(LeadSingle(x) & ExtendedPlayInsideWithin(x))", "LedSingleOfExtendedPlayInside(x) & ShowYourLove(x))", "All x y.((ExtendedPlay(x) & LeadSingle(y)) -> ShowYourLove(y))", "all x.((ExtendedPlayInside(x) & LeadSingle(x)) -> ShowYourLove(x))", "is the lead single of ExtendedPlayInside(LEAP) & ShowYourLove(Words) & ExtendedPlayOldPlay(Inside(Words))", "All x.((LightSingle(x) & ExtendedPlayInside(x)) -> ShowYourLoving(x))"]}
{"id": "folio_train_2187", "nl": "Show Your Love contains a hopeful message.", "fol": "ContainsMessage(Showyourlove,Hopefulmessage)", "prediction": ["all x.((ShowYourLove(x) & HopefulMessage(x)) -> Contains(x,y))", "all x.((ShowYourLove(x) & HopefulMessage(x)) -> Uses(x,y))", "all x.((ShowYourLove(x) & HopefulMessage(x)) -> ShowYourLove(x))", "All x.((ShowYourLove(x) & HopefulMessage(x)) -> ShowYourLoveContent(x))", "This hopeful message is available online x.(ShowYourLove(x) & ShowYourLove(x))", "(MealYourLove(SHOWYELLOW) -> HopefulMessage(SHOWYELLOW))", "All x.(ShowYourLove(x) -> HopefulMessage(x))", "ShowYourLove(x) -> ContainsHopefulMessage(x))", "all x.((ShowYourLove(x) & HopefulMessage(x)) -> Has(x,y))", "ShowYourLove(ShowYourLove) ContainsHopefulMessage(ShowYourLove)", "All x.((ShowYourLove(x) & HopefulMessage(x)) -> ShowYourLove(x))", "ShowYourLove(x) & ContainsHopefulMessage(x))", "all x.(ShowYourLove(x) -> ContainsHopefulMessage(x))", "all x.(ShowYourLove(x) -> HopefulMessage(x))", "all x.((ShowYourLove(x) -> HopefulMessage(x))", "all x.((ShowYourLove(x) & HopefulMessage(x)) -> Includes(x))"]}
{"id": "folio_train_2188", "nl": "BtoB 4u member Hyunsik wrote Show Your Love.", "fol": "(IsMemberOf(Hyunsik,Btob4u) & WroteSong(Hyunsik,Showyourlove))", "prediction": ["(BtoB4uFamily(Hyunsik) & WritesShowYourLove(Houston))", "BtoB4uMemberHyunsik wrote ShowYourLove.", "Hyunsik, BtoB4u member, wrote ShowYourLove(h)", "(ShowYourLove(BtoB4uMemberHyunsik)", "Hyunsik (BtoB4uMember) & WriteShowYourLove(Hyunsik))", "Hyunsik, BtoB4u member, wrote ShowYourLove.", "(LikesBtoB(Lynn-Hunsik(MemberHopHop(Hyunsik) & WritesShowYourLove(Hyunsik))", "BtoB4u member Hyunsik wrote ShowYourLove(x)", "Member(Hyunsik,BtoB4u) & WrittenShowYourLove(Hyunsik,BtoB4u))", "(All x.(BtoB4uMember(x,Hyunsik) -> WritesShowYourLove(x))", "-Hyunsik, member of BtoB4u, wrote ShowYourLove.", "BtoB4uMemberHyunsik wrote ShowYourLove(Hyunsik).", "BtoB4u(MemberHyunsik,ShowYourLove)", "MyBtoB4uMemberHyunsik wrote ShowYourLove.", "Hyunsik, member of BtoB4u, wrote ShowYourLove.", "Hyunsik (BtoB4uClient) & Member-WrittenShowYourLove(Hyunsik)"]}
{"id": "folio_train_2189", "nl": "There is a music video for Show Your Love.", "fol": "HasMusicVideoFor(Showyourlove)", "prediction": ["exists x.(MusicVideoFor(x,ShowYourLove))", "exists x.(MusicVideoForStartYourLove(x) & ShowYourLove(x))", "exists x.(MusicVideo(x) & ShowYourLove(x))", "exists x.(MusicVideo(x) & ForShowYourLove(x))", "exists x.(MusicVideo(x) & ShowYourLove(x))", "exists x y.(MusicVideo(x) & MusicViolence(y) & ShowYourLove(x,y))", "exists x.(MusicVideo(x) & ForShowYourLove(x))", "exists x.(MusicVideo(x) & ShowYourLove(x))", "all x.(MusicVideo(x) -> ShowYourLove(x))", "exists x.(MusicVideo(x) & ShowYourLove(x))", "exists x.(MusicVideo(x) & ShowYourLove(x))", "exists x.(MusicVideo(x) & ShowYourLove(x))", "exists x.(MusicVideoFor(x) & ShowYourLove(x))", "exists x.(MusicVideo(x) & ShowYourLove(x))", "exists x.(MusicVideo(x) & ShowYourLove(x))", "exists x.(MusicVideo(x) & ShowYourLove(x))"]}
{"id": "folio_train_2190", "nl": "Show your love wasn't written by a member of a boy band.", "fol": "-exists x.(IsMemberOf(x,Btob4u) & WroteSong(x,Showyourlove))", "prediction": ["all x.((Love(x) & -IsWrittenByMemberOfBand(x)) -> ShowsNoLittleLove(x))", "all x.((LoveRegard(x) & -writtenByBoyBand(x)) -> ShowsLoving(x))", "all x.((Love(x) & -MemberOfBirdBand(x)) -> ShowsLovry(x))", "all x.((LivesInBayBand(x) & -(ComedyMember(x) | BoyBandMember(x))) -> ShowLove(x))", "all x.((Living(x) & -BirdBandName(x)) -> ShowLiving(x))", "all x y.((BananBand(x) & MemberOf(y,x)) -> -By(x,y))", "(-WrittenByBoneBand(Love,boyBand))", "all x y.(((RightHero(x) & BoyBand(y)) -> -WrittenBy(x,y))", "all x.((Like(x) & -MemberOfBall(x)) -> NeverWrittenBy(x,Y))", "all x.((Love(x) & -BabyBandMember(x)) -> ShowedAtLiving(x))", "all x.((MemberOfBoyBand(x) & ShowsLove(x)) -> -WrittenBy(x,BabyBand))", "all x y.((Love(x) & MemberOfBanBand(y)) -> -WrittenBy(x,y))", "all x y.((Man(x) & BoyBand(y)) -> -WrittenBy(x,y))", "all x.((Love(x) & -OfBirdBand(x)) -> Shows(x))", "all x.((Love(x) & -BabyBand(x)) -> ShowsLove(x))", "all x.((ShowLove(x) & -BirdBandMember(x)) -> -WrittenBy(x,BoneBand))"]}
{"id": "folio_train_2191", "nl": "A lead single of inside contains a a hopeful message.", "fol": "exists x.(IsLeadSingleOf(x,Inside) & ContainsMessage(x,Hopefulmessage))", "prediction": ["all x.(Inside(x) -> (LeadSingle(x) & WishfulMessage(x)))", "all x.(LeadSingle(x) -> InsideContainsHopefulMessage(x))", "all x.(LeadSingleOfInside(x) -> ContainsHopefulMessage(x))", "all x y.((LeadSingle(x) & Inside(x)) -> ContainsHopefulMessage(y))", "all x.(LeadSingleOfInside(x) -> ContainsHopefulMessage(x))", "all x.(LeadSingle(x) -> InsideContainsHopefulMessage(x))", "all x.(LeadSingle(x) -> InsideContainsHopefulMessage(x))", "all x.(LeadSingle(x) -> ContainsHolymnitingMessage(x))", "all x.((LedSingle(x) & Inside(x)) -> ContainsHopefulMessage(x))", "all x.((LeadSingle(x) & Inside(x)) -> ContainsHopefulMessage(x))", "all x.(LeadSingleOfInside(x) -> ContainsHopefulMessage(x))", "all x.(LeadSingle(x) -> ContainsHopefulMessage(x))", "all x.((LeadSingle(x) & Inside(x)) -> HopefulMessage(x))", "all x.(LeadSingleOfInside(x) -> ContainsHopefulMessage(x))", "all x.(LeadSingleOfInside(x) -> ContainsHopefulMessage(x))", "all x.(LeadSingle(x) -> InsideInsideContainsHostonyMessage(x))"]}
{"id": "folio_train_2192", "nl": "Hyunsik is Korean.", "fol": "Korean(Hyunsik)", "prediction": ["Hyunsik(x)", "-Hihunsik(Hondor)", "Hyunsik is Korean.", "/Hihunsik(Jim) & Korean(y))", "Hyunsik (Korean)", "Hyunsik (Korean)", "Hyunsik is Korean.", "Hyunsik is Korean.", "(-Lyunsik(Hyunsik) -> Korean(Hyunsik))", "Hyunsik is Korean.", "Hyunsik is Korean.", "All x.(Hyunsik(x) -> Korean(x))", "Hyunsik is Korean.", "Hyunsik (Japanese)", "Hyunsik is Korean.", "(Korean(Hyunsik)"]}
{"id": "folio_train_2193", "nl": "All tables are round.", "fol": "all x.(IsTable(x) -> IsRound(x))", "prediction": ["all x.(Table(x) -> Round(x))", "all x.(Table(x) -> Round(x))", "all x.(Table(x) -> Round(x))", "all x.(Table(x) -> Round(x))", "all x.(Table(x) -> Round(x))", "all x.(Table(x) -> Round(x))", "(all x.(Table(x) -> Round(x))", "all x.(Table(x) -> Round(x))", "all x.(Table(x) -> Round(x))", "all x.(Table(x) -> Round(x))", "all x.(Table(x) -> Round(x))", "All x.(Table(x) -> Round(x))", "all x.(Table(x) -> Round(x))", "all x.(Table(x) -> Round(x))", "all x.(Table(x) -> Round(x))", "all x.(Table(x) -> Round(x))"]}
{"id": "folio_train_2194", "nl": "Some furniture are tables.", "fol": "exists x.(IsFurniture(x) & IsTable(x))", "prediction": ["exists x.(Furniture(x) & Table(x))", "exists x.(Furniture(x) & Table(x))", "exists x.(Furniture(x) & Table(x))", "exists x.(Furniture(x) & Table(x))", "exists x.(Furniture(x) & Table(x))", "exists x.(Furniture(x) & Table(x))", "exists x.(Furniture(x) & Table(x))", "exists x.(Furniture(x) & Table(x))", "exists x.(Furniture(x) & Table(x))", "exists x.(Furniture(x) & Table(x))", "exists x.(Furniture(x) & Table(x))", "exists x.(Furniture(x) & Table(x))", "exists x.(Furniture(x) & Table(x))", "exists x.(Furniture(x) & Table(x))", "exists x.(Furniture(x) & Table(x))", "exists x.(Furniture(x) & Table(x))"]}
{"id": "folio_train_2195", "nl": "Some furniture are round.", "fol": "exists x.(IsFurniture(x) & IsRound(x))", "prediction": ["exists x.(Furniture(x) & Round(x))", "exists x.(Furniture(x) & Round(x))", "exists x.(Furniture(x) & Round(x))", "exists x.(Furniture(x) & Round(x))", "exists x.(Furniture(x) & Round(x))", "exists x.(Furniture(x) & Round(x))", "exists x.(Furniture(x) & Round(x))", "exists x.(Furniture(x) & Round(x))", "exists x.(Furniture(x) & Round(x))", "exists x.(Furniture(x) & Round(x))", "exists x.(Furniture(x) & Round(x))", "exists x.(Furniture(x) & Round(x))", "exists x.(Furniture(x) & Round(x))", "exists x.(Furniture(x) & Round(x))", "exists x.(Furniture(x) & Round(x))", "exists x.(Furniture(x) & Round(x))"]}
{"id": "folio_train_2196", "nl": "All juvenile delinquents are maladjusted individuals.", "fol": "all x.(IsJuvenileDelinquent(x) -> IsMaladjustedIndividual(x))", "prediction": ["all x.(JuvenileDelinquent(x) -> MaladjustedIndividual(x))", "all x.(JuvenileDelinquent(x) -> MaladjustedIndividual(x))", "all x.(JuvenileDelinquent(x) -> Maladjusted(x))", "all x.(JuvenileDefilinquent(x) -> MaladjustedIndividual(x))", "all x.(JuvenileDelinquent(x) -> MaladjustedIndividual(x))", "all x.(JuvenileDelinquent(x) -> MaladjustedIndividual(x))", "all x.(JuvenileDelinquent(x) -> MaladjustedIndividual(x))", "all x.(JewelryDelinquent(x) -> MaladjustedIndividual(x))", "all x.(JugendDelinquent(x) -> MaladjustedIndividual(x))", "all x.(JuvenileDelinquent(x) -> MaladjustedIndividual(x))", "all x.(Jewel(x) -> MaladjustedIndividual(x))", "all x.(JuvenileDelinquent(x) -> MaladjustedIndividual(x))", "all x.(JewelryDelinquent(x) -> MaladjustedIndividual(x))", "all x.(JewelryDelinquent(x) -> MaladjustedImperson(x))", "all x.(JuvenileDeflict(x) -> MaladjustedIndividual(x))", "all x.(JuvenileDefilirable(x) -> MaladjustedIndividual(x))"]}
{"id": "folio_train_2197", "nl": "Some juvenile delinquents are products of broken homes.", "fol": "exists x.(IsJuvenileDelinquent(x) & IsProductOfBrokenHome(x))", "prediction": ["exists x.(JuvenileDelinquent(x) & BrokenHome(x))", "exists x.(JuvenileDelinquent(x) & BrokenHome(x))", "exists x.(JuvenileDelinquent(x) & BreakedHomes(x))", "exists x,y.(JuvenileDelinquent(x) & BrokenHome(y))", "exists x.(JewelryDelinquent(x) & BrokenHome(x))", "exists x.(JuvenileDeflict(x) & BrokenHome(x))", "exists x.(JuvenileDelinquent(x) & BrokenHome(x))", "exists x.(JuvenileDelinquent(x) & BrokenHome(x))", "exists x.(JugendDelinquent(x) & BrokenHome(x))", "exists x.(Jewelinquent(x) & BrokenHome(x))", "exists x.(JuvenileDelinquent(x) & BreakedHome(x))", "exists x.(JuvenileDelinquent(x) & BrokenHome(x))", "exists x.(JuvenileDelinquent(x) & BrokenHome(x))", "exists x.(JuvenileDeflict(x) & BrokenHome(x))", "exists x.(JuvenileDelinquent(x) & BreakenHome(x))", "exists x.(JuvenileDeflict(x) & BrokenHome(x))"]}
{"id": "folio_train_2198", "nl": "Some maladjusted individuals are products of broken homes.", "fol": "exists x.(IsMaladjustedIndividual(x) & IsProductOfBrokenHome(x))", "prediction": ["exists x.(MaladjustedIndividual(x) & BrokenHome(x))", "exists x.(MaladjustedIndividual(x) & ProductsOfBrokenHomes(x))", "exists x.(MaladjustedIndividual(x) & BreakedHome(x))", "exists x.(MalaladjustedIndividual(x) & ProductOfBrokenHomes(x))", "exists x.(MaladjustedIndividual(x) & BrokenHome(x))", "exists x.(MaladjustedIndividual(x) & BrokenHome(x))", "exists x.(MaladjustedIndividual(x) & BrokenHome(x))", "exists x.(MaladjustedImmigrant(x) & BrokenHome(x))", "exists x.(MaladjustedIndividual(x) & BrokenHome(x))", "exists x.(MaladjustedIndividual(x) & BrokenHome(x))", "exists x.(MaladjustedIndividual(x) & BrokenHome(x))", "exists x.(MaladjustedIndividual(x) & BrokenHomes(x))", "exists x.(MaladjustedIndividual(x) & BrokenHome(x))", "exists x.(Maladjusted(x) & ProductOfBrokenHomes(x))", "exists x.(MaladjustedIndividual(x) & BrokenHome(x))", "exists x.(MaladjustedIndividual(x) & BrokenHome(x))"]}
{"id": "folio_train_2199", "nl": "Either brain reading or brain decoding. ", "fol": "all x.(EngagesInBrainReading(x) | EngagesInBrainDecoding(x))", "prediction": ["(BloodReading(Blood) | BrainDecoding(Blood))", "exists x.(BrainReading(x) | BrainDecoding(x))", "(Either BrainReading(x) | BrainDecoding(x))", "(BodyReading(b) | BrainDecoding(c))", "all x.((BrainReading(x) | BrainDecoding(x)) -> Valid(x))", "all x.(BodyReading(x) | BrainDecoding(x))", "(BirdReading(b) | BrainDecoding(c))", "all x.(BloodReading(x) | BrainDecoding(x))", "exists x.(BirdReading(x) | BrainDecoding(x))", "all x.((BodyReading(x) | BrainDecoding(x)) -> Positive(x))", "(BrainReading(Bird) | BrainDecoding(Bird))", "all x.(BrainReading(x) | BrainDecoding(x))", "all x.(BrainReading(x) | BrainDecoding(x))", "all x.(BrainReading(x) | BrainDecoding(x))", "all x.(BirdReading(x) | BrainDecoding(x))", "all x.((BrainReading(x) | BrainDecoding(x)) -> Requires(x))"]}
{"id": "folio_train_2200", "nl": "All brain decoding is extracting information from BOLD signals.", "fol": "all x.(EngagesInBrainDecoding(x) -> ExtractsInfoFromBOLDSignals(x))", "prediction": ["all x.(BrainDecoding(x) -> ExtractsInformationFromBOLDSignals(x))", "all x.(BrainDecoding(x) -> ExtractsInformationFromBOLDSignals(x))", "all x.(BodyDecoding(x) -> ExtractsInformationFromBOLDSignals(x))", "all x.(BreakDekoding(x) -> ExtractsInformationFromBOLDSignals(x))", "all x.(BrainDecoding(x) -> ExtractorsInformationFromBOLDSignals(x))", "all x.(BrainDecoding(x) -> ExtractsInformationFromBOLDSignals(x))", "all x.(BrainDecoding(x) -> ExtractsInformationFromBOLDSignals(x))", "all x.(BrainDecoding(x) -> ExtractsInformationFromBOLDSignals(x))", "all x.(BrainDecoder(x) -> ExtractsInformationFromBOLDSignals(x))", "all x.(BrainDecoding(x) -> ExtractsInformationFromBOLDSignals(x))", "all x.(BrainDecoding(x) -> ExtractsInformationFromBOLDSignals(x))", "all x.(BirdDecoding(x) -> ExtractsInformationFromBOLDSignals(x))", "all x.(BrainDecoding(x) -> ExtractsInformationFromBOLDSignals(x))", "all x.(BrainDecoding(x) -> ExtractsInformationFromBOLDSignals(x))", "all x.(BrainDecoding(x) -> ExtractsInformationFromBOLDSignals(x))", "all x.(BrainDecoding(x) -> ExtractsInformationFromBOLDSignals(x))"]}
{"id": "folio_train_2201", "nl": "No extracting information from BOLD signals is without statistical pattern analysis. ", "fol": "all x.(ExtractsInfoFromBOLDSignals(x) -> -LacksStatisticalPatternAnalysis(x))", "prediction": ["(-ExtractingInformationFromBOLDSignals(x) -> -StatisticalPatternAnalysis(x))", "all x.(ExtractingInformationFromBOLDSignals(x) -> -NullStatisticalPatternAnalysis(x))", "-exists x.(BOLDSignal(x) & DepartsInformation(x) & -DistributesStatisticalPatternAnalysis(x))", "all x y.((ExtractingInformation(x) & BOLDSignals(x,y)) -> -StatisticalPatternAnalysis(x,y))", "all x.((BOLDSignals(x) & NOStaticalPatternAnalysis(x)) -> ExtendingInformation(x))", "-ExtractingUnitInformationFromBOLDSignals(-StatisticPatternAnalysis(-))", "all x y z.((BOLDSignal(x) & Information(y) & PatternAnalysis(z)) -> -ExtructsWithoutStatisticalAnalysis(x,y,z))", "no extractingInformationFromBOLDSignalsWithoutStatisticalPatternAnalysis(n) -> No.", "all x.((ExtractingInformationFromBOLDSignals(x) & -StatisticalPatternAnalysis(x)) -> -StatisticPattern(x))", "-exists x.((BOLDSignale(x) & ExtractsInformation(x,y) & StatisticPatternAnalysis(y)) | -ExtractorsInformation(x,z))", "-exists x.(ExtractingInformation(x) & FROMBOLDSignals(x))", "all x.((ExtractingInformation(x) & BOLDSignals(x)) -> NoStatisticalPatternAnalysis(x))", "all x.(BOLDSignals(x) -> -StatisticalPatternAnalysis(x))", "(-all x.(ExtractingInformationFromBOLDSignals(x) -> -StatisticalPatternAnalysis(x)))", "all x.(ExtractingInformationFromBOLDSignals(x) -> -StatisticalPatternAnalysis(x))", "all x.((BOLDSignals(x) & -StatisticalPatternAnalysis(x,b)) -> -ExtractsInformation(x,b))"]}
{"id": "folio_train_2202", "nl": "Writing a novel is without statistical pattern analysis.", "fol": "all x.(EngagesInNovelWriting(x) -> LacksStatisticalPatternAnalysis(x))", "prediction": ["all x.(Novel(x) -> (-StatisticPatternAnalysis(x) & -Writing(x)))", "all x.(Novel(x) -> -StatisticalPatternAnalysis(x))", "all x.(Novel(x) -> -StatisticalPatternAnalysis(x))", "all x.(Novel(x) -> -StatisticalPatternAnalysis(x))", "all x y.((Novel(x) & Novel(y)) -> -StatisticalPatternAnalysis(x,y))", "all x.(Novel(x) -> -StatisticalPatternAnalysis(x))", "all x.(Novel(x) -> -StatisticalPatternAnalysis(x))", "all x y z.((Novel(x) & Novel(y) & Statistics(z)) -> -StatisticalPatternAnalysis(x,y,z))", "all x.(Novel(x) -> -StatisticalPatternAnalysis(x))", "all x.(WritingNovel(x) -> -StatisticalPatternAnalysis(x))", "all x.((Novel(x) & -StatisticalPatternAnalysis(x)) -> Writes(x))", "all x.(Novel(x) -> -StatisticalPatternAnalysis(x))", "all x.(Novel(x) -> -StatisticalPatternAnalysis(x))", "all x.(Novel(x) -> -StatisticalPatternAnalysis(x))", "all x.(Novel(x) -> -StatisticalPatternAnalysis(x))", "all x y.((Novel(x) & Novel(y)) -> -StatisticalPatternAnalysis(x,y))"]}
{"id": "folio_train_2203", "nl": "If multivoxel (pattern) analysis is without statistical pattern analysis and a brain reading, then multivoxel (pattern) analysis is without statistical pattern analysis and brain decoding.", "fol": "((LacksStatisticalPatternAnalysis(ConductsMultivoxelPatternAnalysis) & EngagesInBrainReading(ConductsMultivoxelPatternAnalysis)) -> (LacksStatisticalPatternAnalysis(ConductsMultivoxelPatternAnalysis) & EngagesInBrainDecoding(ConductsMultivoxelPatternAnalysis)))", "prediction": ["all x.((Multivoxel(x) & -StatisticalPatternAnalysis(x) & BrainReading(x)) -> (-StatisticalPatternAnalysis(x) & BrainDecoding(x)))", "all x.((MultivoxelAnalysis(x) & WithoutStatisticalPatternAnalysis(x) & WithoutBrainReading(x)) -> -WithoutStatisticalPatternAnalysis(x) & -withoutBodyDecoding(x))", "all x.((Multivoxel(x) & -StatisticalPatternAnalysis(x) & BrainReading(x)) -> (-StatisticalPatternAnalysis(x) & -BrainDecoding(x)))", "all x.((MultivoxelPatternAnalysis(x) & -StatisticalPatternAnalysis(x) & BrainReading(x)) -> -StatisticalPatternAnalysis(x) & BrainDecoding(x))", "all x.((Multivoxel(x) & (-StatisticalPatternAnalysis(x) & NoBrainReading(x))) -> (-StaticalPatternAnalysis(x) & -BrainDecoding(x)))", "all x.((Multivoxel(x) & NoStatisticalPatternAnalysis(x) & NoBrainReading(x)) -> -(Multivoxel(x) & -StatisticalPatternAnalysis(x) & -BrainDecoding(x)))", "all x.((Multivoxel(x) & (-StatisticalPatternAnalysis(x) & BrainReading(x))) -> -StatisticalPatternAnalysis(x) & BrainDecoding(x))", "all x.((Multivoxel(x) & StatisticPatternAnalysis(x) & BrainReading(x)) -> (-StatisticalPatternAnalysis(x) & BrainDecoding(x)))", "all x.((Multivoxel(x) & -StatisticalPatternAnalysis(x) & BrainReading(x)) -> (-StatisticalPatternAnalysis(x) & NoBrainDecoding(x)))", "all x.((MultivoxelArray(x) & -StatisticalPatternAnalysis(x) & BrainReading(x)) -> (-StatisticalPatternAnalysis(x) & BrainDecoding(x)))", "all x.((Multivoxel(x) & -StatisticalPatternAnalysis(x) & BrainReading(x)) -> -StatisticalPatternAnalysis(x) & BrainDecoding(x))", "all x.((Multivoxel(x) & -StatisticalPatternAnalysis(x) & BrainReading(x)) -> (-StatisticalPatternAnalysis(x) & BrainDecoding(x)))", "all x.((Multivoxel(x) & WithoutStatisticalPatternAnalysis(x) & WithoutBrainReading(x)) -> -(Multivoxel(x) & WithoutStatisticalPatternAnalysis(x) & WithoutBrainDecoding(x)))", "all x.((Multivoxel(x) & -StatisticalPatternAnalysis(x) & BrainReading(x)) -> -StatisticalPatternAnalysis(x) & BrainDecoding(x))", "all x.((Multivoxel(x) & FreeStatisticalPatternAnalysis(x) & FreeBrainReading(x)) -> (-StatisticalPatternAnalysis(x) & -BirdDecoding(x)))", "all x.((Multivoxel(x) & -StatisticalPatternAnalysis(x) & BrainReading(x)) -> (-StatisticalPatternAnalysis(x) & BrainDecoding(x)))"]}
{"id": "folio_train_2204", "nl": "Multivoxel (pattern) analysis is a brain decoding.", "fol": "EngagesInBrainDecoding(ConductsMultivoxelPatternAnalysis)", "prediction": ["all x.(Multivoxel(x) -> (BrainDecoding(x) & PatternDecoding(x)))", "all x y.((Multivoxel(x) & Pattern(y)) -> BrainDecoding(x))", "all x.(Multivoxel(x) -> BrainDecoding(x))", "all x.(Multivoxel Analysis(x) -> BrainDecoding(x))", "(Multivoxel(pattern) Analysis(multivoxel) -> BrainDecoding(multivoxel))", "all x.(Multivoxel(x) -> (BrainDecoding(x) & Pattern(x) & -BirdDecoding(x)))", "all x.(Multivoxel(x) -> (BreakholdSevere(x) & BrainDecoding(x)))", "all x.(MultivoxelAnalysis(x) -> (BodyDecoding(x) & DetectsBrain(x)))", "(Multivoxel(a) & Pattern(a))", "all x.(Multivoxel(x) -> (BrainDecoding(x) & Pattern(x)))", "all x.(Multivoxel(x) -> BrainDecoding(x))", "all x.(Multivoxel(x) -> BrainDecoding(x))", "all x.(Multivoxel(x) -> BrainDecoding(x))", "all x.(Multivoxel(x) (BrotherAnalysis(x) & BrainDecoding(x)))", "all x.(Multivoxel(x) -> (BrainDecoding(x) & Process(x)))", "all x.(Multivoxel(x) -> (BirdDecoding(x) | BrainDecoding(x)))"]}
{"id": "folio_train_2205", "nl": "Multivoxel (pattern) analysis is the writing of a novel.", "fol": "EngagesInNovelWriting(ConductsMultivoxelPatternAnalysis)", "prediction": ["(Multivoxel(pattern) Analyse(multiple) & WrittenOfNovel(Multipod))", "all x.(MultivoxelArticle(x) -> (WritingNovel(x) & Pattern(x) & Novel(x)))", "(Writing(Multivoxel) & -Writing(pattern))", "all x.(MultivoxelAnalysis(x) -> (WritingNovel(x) & -WritingNovel(x)))", "all x.(Multivoxel(x) (Pattern(x) & Novel(x)) -> WritingWrite(x))", "all x.(Multivoxel(x) -> (WritingNovel(x) & ContainsPattern(x)))", "all x.(Multivoxel(x) -> (WritingNovel(x) | WritingNovel(x)))", "all x.(Multivoxel(x) -> (Writing(x) & Novel(x)))", "all x y.((Multivoxel(x) & Pattern(y)) -> CreatesNovel(x,y))", "all x.(Multivoxel(x) -> (WritingNovel(x) & -Pattern(x) & Novel(x)))", "all x y.((Multivoxel(x) & Novel(y)) -> Writes(x,y))", "all x.(Multivoxel(x) -> (WritingOfNovel(x) & Pattern(x)))", "all x.(Multivoxel(x) -> (WritingNovel(x) & Path(x)))", "all x y.((Multivoxel(x) & Novel(y)) -> (Writing(x,y) & Pattern(x)))", "all x.(Multivoxel(x) -> WritesNovel(x))", "all x y.((Multivoxel(x) & Pattern(y)) -> WritesNovel(x,y))"]}
{"id": "folio_train_2206", "nl": "Multivoxel (pattern) analysis is without statistical pattern analysis and writing a novel.", "fol": "(LacksStatisticalPatternAnalysis(ConductsMultivoxelPatternAnalysis) & EngagesInNovelWriting(ConductsMultivoxelPatternAnalysis))", "prediction": ["all x.(Multivoxel(x) -> (exists y.(StatisticalPatternAnalysis(y) & -ByAnalysis(y)) & Novel(z) & Does(x,z))))", "all x.(Multivoxel(x) -> (NoNovel(x) & -StatisticalPatternAnalysis(x)))", "all x.(Multivoxel(x) -> (-StatisticalPatternAnalysis(x) & -WritingNovel(x)))", "all x.(Multivoxel(x) -> (StaticalPatternAnalysis.-(StatisticalPatternAnalysis(x),newNovel)) & -StatisticalPatternAnalysis(x,newNovel)))", "all x.(Multivoxel(x) -> (-StatisticalPatternAnalysis(x) & -WritingNovel(x)))", "all x.(Multivoxel(x) -> (WithoutStatisticalPatternAnalysis(x) & WithoutWritingNovel(x)))", "all x.(Multivoxel(x) -> (-StatisticalPatternAnalysis(x) & WriteNovel(x)))", "all x.(Multivoxel(x) -> (NoneStatisticalPatternAnalysis(x) & NoNovel(x)))", "all x y.((Multivoxel(x) & PatternAnalysis(y)) -> (-StatisticalStatisticPatternAnalysis(y) & WriteRoma(y)))", "all x.(Multivoxel(x) -> (-StatisticalPatternAnalysis(x) & -WritingNovel(x)))", "all x.(Multivoxel(x) -> (AnalysisWithCategory(x) & -StatisticalPatternAnalysis(x) & -WritingNovel(x)))", "all x y.((Multivoxel(x) & Pattern(y)) -> (-StatisticalProtectionAnalysis(x,y) & -WritingNovel(x)))", "all x.(Multivoxel(x) -> (PerformanceAuthority(x) & -StatisticalPatternAnalysis(x) & -WritingNovel(x)))", "all x.(Multivoxel(x) -> (-StatisticalPatternAnalysis(x) & WritingNovel(x)))", "all x.(Mulitvoxel(x) -> (-StatisticalPatternAnalysis(x) & -WritingNovel(x)))", "all x.(Multivoxel(x) -> (-StatisticalPatternAnalysis(x) & WriteNovel(x)))"]}
{"id": "folio_train_2207", "nl": "Multivoxel (pattern) analysis is without statistical pattern analysis or writing a novel.", "fol": "(LacksStatisticalPatternAnalysis(ConductsMultivoxelPatternAnalysis) | EngagesInNovelWriting(ConductsMultivoxelPatternAnalysis))", "prediction": ["all x.(Multivoxel(x) -> (AbstractsStatisticalPatternAnalysis(x) & -WritesNovel(x)))", "all x.(Multivoxel(x) -> (NoStatisticPatternAnalysis(x) & -NoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNo-NoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNo-No-Mon-NoNoCNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoNoCo-Spo-DiaDia-RealNo%-Proce-Qu\u00e9-No-No-(A-L-A--L-Cl-A-P-P-P-A--D-A-Met-M-D-F-D-D-A-D-(Du-Du-D-D-D-D-Art-D-D-D-D-D-D-D-D-D-D-D-D-DNuDD-DD-DDD\"DDD(DDDR(DDD(DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD", "all x.(Multivoxel(x) -> (WithoutStatisticalPatternAnalysis(x) & -WithWritingNovel(x)))", "all x.(MultualVoxel(x) -> (StatisticPatternAnalysis(x) | NovelWriting(x)))", "all x.(Multivoxel(x) -> (Matrix(x) & -StatisticalPatternAnalysis(x) & -WritingNovel(x)))", "all x.(MultiVoxel(x) -> (OutOfStatisticalPatternAnalysis(x) | OutOfWritingNovel(x)))", "all x.(Multivoxel(x) -> (WithoutStatisticalPatternAnalysis(x) & WithoutWritingNovel(x)))", "all x.(Multivoxel(x) -> (PatternAnalysis(x) & -StatisticPatternAnalysis(x) & -WritingNovel(x)),)", "all x.(Multivoxel(x) -> (Pattern(x) & -StatisticalPatternAnalysis(x) & -WritingNovel(x)))", "all x.(Multivoxel (pattern) Analyzer(x) -> (-StatisticalPatternAnalysis(x) | WritingNovel(x))))", "all x.(Multivoxel(x) -> (-StatisticalPatternAnalysis(x) & -WritingNovel(x)))", "all x y z.((Multivoxel(x) & PatternAnalysis(y) & Novel(z)) -> (-StatisticPatternAnalysis(y) | WriteNovel(y,z)))", "all x.(Multivoxel(x) -> (-StatisticalPatternAnalysis(x) | WriteNovel(x)))", "all x.(Multivoxel(x) -> (Independent(x) & -(StatisticalPatternAnalysis(x) | NovelWriting(x)))))", "(Multivoxel(pattern) Analysis) -> (-StatisticalPatternAnalysis(pattern) & -WritingNovel(pattern)))", "all x.(Multivoxel(x) -> (There's noStatisticalPatternAnalysis(x) | There's noNovelWriting(x)))"]}
{"id": "folio_train_2208", "nl": "Multivoxel (pattern) analysis is either without statistical pattern analysis or writing a novel.", "fol": "(LacksStatisticalPatternAnalysis(ConductsMultivoxelPatternAnalysis) | EngagesInNovelWriting(ConductsMultivoxelPatternAnalysis))", "prediction": ["all x.(Multivoxel(x) -> (WithoutStatisticalPatternAnalysis(x) | WritesNovel(x)))", "all x.(Multivoxel(x) -> (TranscriptionAnalysis(x) | NovelWriting(x)))", "all x.(Multivoxel(x) -> (NotStatisticalPatternAnalysis(x) | NovelWriting(x)))", "all x y.((Multivoxel(x) & Pattern(y)) -> ((Novel(z) | -StatisticalPattern(z) | Novel(z))))", "all x.(Multivoxel(x) -> (NostalgicPatternAnalysis(x) | Novel(x)))", "all x.(Multivoxel(x) -> ((StatisticPatternAnalysisNotStatistical(x) | Novel(x))))", "(Multivoxel(pattern)Analysis) -> ((-StructuralPatternAnalysis(pattern) & -WritesNovel(pattern)) & -StatisticalPatternAnalysis(pattern)))", "(Multivoxel(pattern) Analysis) -> (-StatisticalPatternAnalysis(pattern) | NovelWriting(pattern)))", "(all x.(Multivoxel(x) -> Pattern(x)))", "all x.(Multivoxel(x) -> (IsWithoutStatisticalPatternAnalysis(x) | IsWritingNovel(x)))", "all x.(Multivoxel(x) -> ((WithoutStatisticalPatternAnalysis(x) & -WritingNovel(x)) | (-StatisticPatternAnalysis(x) & -StatisticPatternAnalysis(x)))))", "all x.(Multivoxel(x) -> (AnalysisWithoutStatisticalPatternAnalysis(x) | WritingNovel(x)))", "all x.(MultivoxelAnalysis(x) -> (withoutStatisticalPatternAnalysis(x) | WritingNovel(x)))", "all x.(Multivoxel(x) -> (-StatisticalPatternAnalysis(x) | WritingNovel(x)))", "(Multivoxel(pattern) Analysis) -> (-StatisticalPatternAnalysis(pattern) & -WritingNovel(pattern)))", "all x y.((Multivoxel(x) & PatternAnalysis(y)) -> ((FunctionalyInsufficient(x) & -StatisticalPatternAnalysis(x)) | NovelWriting(x))))"]}
{"id": "folio_train_2209", "nl": "If multivoxel (pattern) analysis is writing a novel, then multivoxel (pattern) analysis is neither without statistical pattern analysis nor writing a novel.", "fol": "(EngagesInNovelWriting(ConductsMultivoxelPatternAnalysis) -> (-LacksStatisticalPatternAnalysis(ConductsMultivoxelPatternAnalysis) & -EngagesInNovelWriting(ConductsMultivoxelPatternAnalysis)))", "prediction": ["all x.((Multivoxel(x) & Chart(x) & WritingNovel(x)) -> -(StaticalPatternAnalysis(x) & NovelWriting(x)))", "all x.((Multivexel(x) & WritesNovel(x)) -> -(FstatisticPatternAnalysis(x) | WritingNovel(x)))", "all x.((Multivoxel(x) & PatternAnalysis(x) & Novel(x)) -> -Worthy(x))", "all x.((Multivoxel(x) & WritingNovel(x)) -> (-StatisticalPatternAnalysis(x) & -WritingNovel(x)))", "all x.((Multivoxel(x) & WritingNovel(x)) -> (-StatisticalPatternAnalysis(x) | WritingNovel(x)))", "all x.((Multivoxel(x) & Pattern(x) & WritingNovel(x)) -> -(-StatisticalPatternAnalysis(x) | WritingNovel(x)))", "all x.((Multivoxel(x) & WritingNovel(x)) -> ((NotWithStatisticalPatternAnalysis(x) | WritingNovel(x))))", "all x.((Multivoxel(x) & PatternAnalysis(x)) -> (WritingNovel(x) & -StructuralPatternAnalysis(x) & -WritingNovel(x)))", "all x.((Multivoxel(x) & WritesNovel(x)) -> (-(StatisticalPatternAnalysis(x) & -WritingNovel(x))))", "all x.((Multivoxel(x) & PatternAnalysis(x) & WritesNovel(x)) -> (-exists y.(StatisticalPatternAnalysis(y)) & -exists z.(Novel(z) & PatternAnalysis(z) & PatternAnalysis(z)) & Writes(z)))))", "all x.((Multivoxel(x) & PatternAnalysis(x) & Novel(x)) -> (-WithstatisticalPatternAnalysis(x) & -WritingNovel(x)))", "all x.((Multivoxel(x) & PatternAnalysis(x)) -> (WritingNovel(x) & -StatisticalPatternAnalysis(x) & -WritingNovel(x)))", "all x.((Multivoxel(x) & WritingNovel(x)) -> (-(Trial(x) & StatisticPatternAnalysis(x) | NovelWriting(x))))", "all x.((Multivoxel(x) & Chart(x) & WritingNovel(x)) -> -(StatisticalPatternAnalysis(x) | WritingNovel(x))))", "all x.((Multivoxel(x) & WritingNovel(x)) -> -(StatisticalPatternAnalysis(x) & WritingNovel(x)))", "all x.((Multivoxel(x) & PatternCalibration(x) & Novel(x)) -> (-StatisticPatternAnalysis(x) & -WritingNovel(x)))"]}
{"id": "folio_train_2210", "nl": "If you have room for dessert, you have room for broccoli.", "fol": "all x.(HasRoomFor(x,Dessert) -> HasRoomFor(x,Broccoli))", "prediction": ["all x.((RoomForDessert(x) & RoomForBroco(x)) -> RoomForBroccoli(x))", "all x.(((Dessert(x) & HasRoom(x,y)) -> HasRoom(x,Berry))", "all x.((HasRoomForDessert(x) & HasRoomForBroccoli(x)) -> HasRoomForDessert(x))", "all x.((Residence(x) & InResidenceForDessert(x)) -> InResidenceForBroccoli(x))", "all x.((Beef(x) & HasRoomForDessert(x)) -> HasRoomForButterfly(x))", "all x.((Showroom(x) & HasSeason(x)) -> HasRoom(x,Butterfly))", "all x.((HasRoomFor(x,Dessert) & HasRoomFor(x,Broccoli)) -> HasRoomFor(x,Butterfly))", "all x.((Sauna(x) & RoomForDessert(x)) -> RoomForBroccoli(x))", "all x.(MovementForDessert(x) -> MovementForBroccoli(x))", "all x.((RoomForDessert(x) & RoomForButterfly(x)) -> HasRoomForButterfly(x))", "all x.((HasRoomForDessert(x) & HasRoomForButterfly(x)) -> HasRoomForButterfly(x))", "all x.((ApartmentForDessert(x) & RoomForBroccoli(x)) -> ApartmentForDessert(x))", "all x.((RoomForDessert(x) & RoomForBroccoli(x)) -> HasRoomForDessert(x))", "all x.((SmallSpoke(x) & RoomForDessert(x)) -> RoomForBroccoli(x))", "all x.((RoomForDessert(x) & RoomForButterfly(x)) -> HasRoomForButterfly(x))", "all x.((Room(x) & Dessert(x)) -> Broccoli(x))"]}
{"id": "folio_train_2211", "nl": "Everyone at Luis's dinner party has room for dessert, including Luis.", "fol": "all x.(IsAtLuisDinnerParty(x) -> HasRoomFor(x,Dessert))", "prediction": ["all x.((DinnerParty(x) & Luis(x)) -> HasRoomForDessert(x))", "all x.((TownsUpLuis(x) & HasDessert(x)) -> IncludesLuis(x))", "all x y.((AtLuisDinnerParty(x) & Person(y)) -> HasRoomForDessert(x))", "all x.((LuissDinnerParty(x) & Me(y)) -> HasDessert(x,y))", "all x y.((DinnerParty(x) & Luis(y)) -> -RoomForDessert(x,y))", "ALL x.((DinnerParty(x) & Luis(x)) -> HasRoomForDessert(x))", "all x.((DinnerParty(x) & Luis(x)) -> HasRoomForDessert(x))", "all x.((RunsWith(x) & (LuisDinnerParty(x) | LuisDinnerParty(x))) -> HasRoomForDessert(x))", "all x.((Luis'sDinnerParty(x) & Luis(x)) -> HasRoomForDessert(x,luis))", "all x y.((Lisa(x) & DinnerParty(y)) -> HasRoom(x,y))", "all x.(LuissDinnerParty(x) -> HasRoomForDessert(x))", "all x.((Castle(x) & Luis(x)) -> HasRoomForDessert(x))", "all x y.((Even(x) & DinnerParty(y)) -> HasRoomForDessert(x,y))", "(all x y.((DustPeacher(x) & Luis(y)) -> ContainsDessert(x,y)))", "all x.((AtLuisSupperParty(x) & LuisSundayParty(x)) -> HasDessert(x))", "all x.((Luis(x) & DinnerParty(x)) -> HasDessertRoom(x))"]}
{"id": "folio_train_2212", "nl": "Mauricia does not have room for broccoli.", "fol": "-HasRoomFor(Mauricia,Broccoli)", "prediction": ["Mauricia n'assistasz z.((Maurizia(z) & Broccoli(z)) -> -Assists(z,x))", "Mauricia -HasRoomForButterfly(Mauricia,Butterfly(Mauricia,Broccoli))", "-exists x.(Mericia(x) & -HasSpace(x,Broccoli))", "-HasShowcaseForBroccoli(Mauricia)", "all x.(Mauricia(x) -> -HasRoomForBroccoli(x))", "Mauricia - exists x.(Butterfly(x) & exists y.(Broccoli(y) & -Has(x,y))))", "all x.(Mauricia(x) -> -HasRoomForButterfly(x))", "-HasRoomForBroccoli(Mauricia)", "exists x.(Mauricia(x) & -RoomForButterfly(x))", "exists x.(Mauricia(x) & -HasRoomForBroccoli(x))", "all x.(Mauricia(x) -> -HasRoomForBroccoli(x))", "Mauricia -IsLivingForBroccoli(Mauricia)", "-HasRoomForBroccoli(Mauricia)", "(-HasRoomForBroccoli(Mauricia))", "Mauricia does nothasRoomForBroccoli(Mauricia,March,Early2019)", "Mauricia n.d.((Mucharia(l) & Broccoli(s)) -> -HasRoomFor(l,s))"]}
{"id": "folio_train_2213", "nl": "Luis's dinner party is the first ever dinner party that Allison has attended.", "fol": "(FirstDinnerPartyAttended(Allison,Luisparty) & IsAtLuisDinnerParty(Allison))", "prediction": ["all x y.((DinnerParty(x) & Allison(y)) -> DinnerParty(x,y))", "Alley(Luis) & DanceParty(Luis) & Aside(Luis)", "All x y.((DinnerParty(x) & Allison(y)) -> AttendedDinnerParty(x,y))", "all x y z.((DinnerParty(x) & Luis(y) & DinnerParty(z) & Allison(w)) -> Attended(y,z))", "Allison attendedsLuisCinnership(t) & DinnerParty(l) & FirstEverAttended(l))", "all x y.((DinnerParty(x) & DinnerParty(y) & Allison(x)) -> Athletes(z))", "all x.((DinnerParty(x) & ForAllison(x)) -> Athletes(x,Luis,Alexis,Antholand))", "(HasDinnerParty(Luis,luis) & Ever(Luis,luis))", "AlleghenyAdmissions(LalisDinnerParty) -> DinnerPeace(Luis,Visitor,Revisiting))", "all x.((DinnerParty(x) & DinnerParty(x) & AllisonBelongsTo(x)) -> FirstEverAttended(x))", "All x y z.((DinnerParty(x) & dinner(y) & Allison(z)) -> ItAttended(z,y))", "AlleyGivesDinnerPerson(Lius,AttendedLuis and DinnerParty((Luis,AttendedDinnerParty))", "Allison's dinnerparty istheFirstEverDinnerParty(luis) & AcquaintedTo(luis,r,l,l),n,o).", "all x.((DinnerParty(x) & Luis's(x)) -> FirstAttendedDinnerParty(x,luis,all luis))", "CecideParty(x) -> TheFirstToAttendedDinnerParty(x))", "all x.((DinnerParty(x) & AllisonInParty(x)) -> ArrivedWithInParty(x))"]}
{"id": "folio_train_2214", "nl": "Gustave has room for both broccoli and asparagus.", "fol": "(HasRoomFor(Gustave,Broccoli) & HasRoomFor(Gustave,Asparagus))", "prediction": ["all x.(Guilte(x) -> (CanBeBothBroccoli(x) & CanBeBothAsparagus(x)))", "(Assertainment(Guilles) & HasZimmerFor(Guillesse(GuillesseBristol) & HasZimmerFor(GuillesseAsperge))", "-Zimmer(g and (Bloebrous(g) | Asparagus(g)))", "(HasRoom(Guilte) & ForButterbean(Guilte) & ForAsparagus(Guilte))", "(HasRoom(Guillotine,Bicolor) & HasRoom(Guillotine,Asheast))", "Gustave also exists x.((Briandton(x) & Asparagus(x)))", "will contain a minimum of 2 lbs. (Both.BrownSalsa.", "((Guillate(Guillatine) & (Brussels(Guillade) | Asparagus(Guillade)))", "((Construction(Congresse) & Bracobar(Congress) & Asparagus(Congress)))", "(LunchForBerton(Gugus) & RoomForAsparagus(Gugus))", "(RoomsForButterfly(Guilda,LowerForAsparagus(Guilda,Berry) & RoomForAsparagus(Guilda,Asparagus))", "(HasRoom(Guillauge) & HasRoom(Guillauge))", "(Rooms(Guillatine) & Space(Guillatine))", "Gustave is now in (Space(Guillotine,Brabic) & Space(Guillotine,Asparagus))", "Gustave & HasRoom(Guitabine,Broccoli) & HasRoom(Guitabine,Asparagus))", "(HasLimbroomForButterfly(Gustave) & HasLimbroomForAsparagus(Gustave))"]}
{"id": "folio_train_2215", "nl": "Broccoli and asparagus are both vegetables.", "fol": "(IsVegetable(Broccoli) & IsVegetable(Asparagus))", "prediction": ["all x.((Broccoli(x) | Asparagus(x)) -> Vegetable(x))", "all x y.((Broccoli(x) & Asparagus(y)) -> Vegetable(x,y))", "(Volume+Geranium(Broccoli) & Vegetable(Asparagus))", "all x.((Broccoli(x) | Asparagus(x)) -> Vegetable(x))", "all x.((Broccoli(x) & Asparagus(x)) -> Vegetable(x))", "all x.((Broccoli(x) & Asparagus(x)) -> Vegetable(x))", "all x.((Broccoli(x) | Asparagus(x)) -> Vegetable(x))", "all x.((Broccoli(x) | Asparagus(x)) -> Vegetable(x))", "(Vegetable(broccoli,seeds,green) & Vegetable(asparagus))", "all x.((Broccoli(x) | Asparagus(x)) -> Vegetable(x))", "all x.((Broccoli(x) | Asparagus(x)) -> Vegetable(x))", "(Vegetable(broccoli) | Vegetable(assessment))", "all x y.((Broccoli(x) & Asparagus(y)) -> Vegetable(x,y))", "(Vegetable(broccoli) & Vegetable(asparagus))", "exists x.(Broccoli(x) & Asparagus(x))", "all x y.((Broccoli(x) & Asparagus(y)) -> Vegetable(x))"]}
{"id": "folio_train_2216", "nl": "Allison has room for broccoli.", "fol": "HasRoomFor(Allison,Broccoli)", "prediction": ["all x.(Alignment(x) -> HasRoomForButterbeet(x))", "all x y.((Allison(x) & Broccoli(y)) -> HasRoom(x,y))", "all x.(Allison(x) -> HasRoomForButterfly(x))", "all x.(Allison(x) -> HasRoomForButterfly(x))", "all x.(Allison(x) -> HasRoomForButterfly(x))", "all x.(Allison(x) -> exists y.(Broccoli(y) & HasRoom(x,y)))", "all x.(Allison(x) -> HasRoomForBroccoli(x))", "all x.(Ally(x) -> HasRoomForBroccoli(x))", "all x.(Alyssa(x) -> HasRoomForBroccoli(x))", "all x.(Allison(x) -> HasRoomForBroccoli(x))", "all x.(Aidly(x) -> HasRoomForButterfly(x))", "all x.((Atlantic(x) & Broccoli(y)) -> HasRoom(x,y))", "all x.((Allison(x) & exists y.(Butterfly(y) & InRoom(x,y))) -> Has(x,y))", "all x.(Allison(x) -> HasRoomForBroccoli(x))", "all x y.((Alignment(x) & Broccoli(y)) -> Room(x,y))", "Allison & HasRoomForButterfly(allies,butterfly,broccoli)"]}
{"id": "folio_train_2217", "nl": "Mauricia is at Luis's dinner party.", "fol": "IsAtLuisDinnerParty(Mauricia)", "prediction": ["Mauricia is at Luis's DinnerParty(Mauricea)", "Mauricia AtLuisDinnerParty(Mauricia,Luis)", "(Seelena(Mauricia) & Luis(Mauricia))", "(AtLuisThedinnerParty(Mauricia) & At(Mauricia))", "Mauricia & LuisParty(Mauricia))", "Mauricia is at Luis'sdinnerParty(Mauricia)", "Mauricia is at Luis's DinnerParty(Mauricia)", "(AtLuis(Mauricia) & Dinner(Russ))", "Mauricia is at Luis's DinnerParty(Mauricia)", "Mauricia is at Luis's DinnerParty(Mauricia)", "(At(Mauricia,Louis'sDinnerParty)) -> Maurice(Mauricia))", "(AtLuisDinnerParty(Mauricia) & AtMariaStop(Mauricia))", "Lucia,SatMuicia,DinnerParty(Mauricia)", "Mauricia is at Luis's DinnerParty(Mauricia)", "all x y z.((Mauricia(x) & Luis(y) & DinnerParty(z)) -> At(x,y,z))", "Mauricia is at LuisAtDinnerParty(Mauricia)"]}
{"id": "folio_train_2218", "nl": "Gustav has room for dessert.", "fol": "HasRoomFor(Gustav,Dessert)", "prediction": ["all x.((Gulliam(x) & RoomForDessert(x)) -> Has(x,Cake,dessert))", "all x.((Guilt(x) & Dessert(y)) -> Has(x,y))", "Gustav has room for dessert.", "all x.((Gustavsky(x) & Has(x,Dessert)) -> Has(x,Dessert))", "DasstCheese(Gustav)", "-((Savory(Gustavus) & RoomForDessert(Gustavus))", "exists x.(Guilt(x) & ThereIsNoDessert(x))", "(HasRoom(Gustav) -> HasDessert(Gustav))", "(MerchantAutumn(Guilt) & RoomForDessert(Guilt))", "all x.(HasRoomForDessert(x) -> Gustav(x))", "all x.(HasRoom(x,Guilt) -> Dessert(x))", "Gustav has room for dessert.", "Gustavs room for dessert.", "Gustav has room for Dessert(Gustav)", "(LayerForDessert(Gustav))", "(HasRoom(Gustavg) & Dessert(Gustavg))"]}
{"id": "folio_train_2219", "nl": "Imagine Dragons is an American pop rock band.", "fol": "(IsAmerican(ImagineDragon) & IsRockBand(ImagineDragon))", "prediction": ["ImagineDragons (PopRockBand(x) & FoundedIn2002,(x) & FoundedIn(x,y)))", "ImagineDragons(x) -> (PopRockBand(x) & PopPopRockBand(x)))", "ImagineDragons(x) \u2013 PopRockBand(x) & AmericanPopPop(x))", "Imagine Dragons, est une bande pop rock am\u00e9ricaine.", "ImagineDragons(x) -> PopRockBand(x))", "ImagineDragons(x) & PopRockBand(x)", "ImagineDragons(x) \u2013 AmericanPopRockBand(x))", "ImagineDragons is a pop rock band from America.", "ImagineDragons.com is a poprock band aus England & New Zealand.", "ImagineDragons (PopRockBand(i) & AmericanPopRockBand(i))", "Imagine Dragons is an AmericanPopRockBand(x) & FoundedBy(x,y,z))", "ImagineDragons(x) & PopRockBand(x) & FoundedIn(x,Atlanta) & FoundedFoxy(x))", "ImagineDragons ((PopRockBand) & AmericanPop(x)))", "ImagineDragons(x) & PopRockBand(x) & AmericanPopRockBand(x))", "ImagineDragons (a.(AmericanPopRockBand(A) & BasedIn(Band(A)))", "ImagineDragons (pop-rockband) based in America."]}
{"id": "folio_train_2220", "nl": "The lead singer of Imagine Dragons is Dan.", "fol": "HasLeadSinger(ImagineDragon,Dan)", "prediction": ["(LeadSinger(IceDragons) -> Dan).", "(LeadSingerInIdeaplaneDragons(Singer) Dan.", "(LeadSinger(IceDragons) -> Dan(Dan))", "LedSingerOfImagineDragons(x) -> Dan(x))", "all x.(LeadSingerOfImagineDragons(x) -> Dan(x))", "All x.((Singer(x) & ImagineDragon(x)) -> Dan(x))", "(LeadSinger(x) & ImagineDragons(x))", "(LeadSinger(x) & ImagineDragons(x))", "(LeadSinger(iImagineDragons) & Dan(iImagineDragons))", "(LeadSinger(imaginedDrangers) & Dan(Dan))", "All x.(ImagineDragons(x) -> Dan(x))", "AlleinSingerOfImagineDragons(x) -> Dan(x))", "(LeadSinger(i) & ImagineDragons(x))", "All x.(LiveSinger(x) -> DanCairns(x))", "(LeadSinger(IceDragons) -> Dan(LeaderSinger(i))", "all x.(ImagineDragons(x) -> LeadSingerDan(x))"]}
{"id": "folio_train_2221", "nl": "Dan is also a songwriter.", "fol": "IsSongWriter(Dan)", "prediction": ["(Songwriter(Dan)", "Dan is also a Songwriter.", "(Songwriter(Dan) & Also(Dan,Dan))", "(Songwriter(Dan) & Writer(Dan))", "(Songwriter(Dan) & Writer(Dan))", "all x.(Songwriter(x) -> DanSynth(x))", "(Songwriter(Dan) | Songwriter(Dan)))", "(songwriter(Dan) & HasSongwriter(Dan,e))", "Dan is a songwriter.", "Dan is also a Songwriter.", "(songwriter(Senator) & Writer(Songwriter))", "(Songwriter(Dan) & Musical(Dan))", "Dan is also a Songwriter(dan,x) & Artist(dan,d))", "Dan is also a Songwriter(dan)", "(Songwriter(Dan)", "all x.(Songwriter(x) -> DanKasey."]}
{"id": "folio_train_2222", "nl": "All lead singers are singers.", "fol": "all x y.(HasLeadSinger(x,y) -> IsSinger(y))", "prediction": ["all x.(LeadSinger(x) -> Singer(x))", "all x.(LeadSinger(x) -> Singer(x))", "all x.(LeadSinger(x) -> Singer(x))", "all x.(LeadSinger(x) -> Singer(x))", "all x.(LeadSinger(x) -> Singer(x))", "all x.(LeadSinger(x) -> Singer(x))", "all x.(LeadSinger(x) -> Singer(x))", "all x.(LeadSinger(x) -> Singer(x))", "all x.(LeadSinger(x) -> Singer(x))", "all x.(LeadSinger(x) -> Singer(x))", "all x.(LeadSinger(x) -> Singer(x))", "all x.(LeadSonger(x) -> Singer(x))", "all x.(LeadSinger(x) -> Singer(x))", "all x.(LeadSinger(x) -> Singer(x))", "all x.(LeadSinger(x) -> Singer(x))", "all x.(LeadSinger(x) -> Singer(x))"]}
{"id": "folio_train_2223", "nl": "All singers are musicians.", "fol": "all x.(IsSinger(x) -> IsMusician(x))", "prediction": ["all x.(Singer(x) -> Musician(x))", "all x.(Singer(x) -> Musician(x))", "all x.(Singer(x) -> Musician(x))", "(all x.(Singer(x) -> Musician(x))", "all x.(Singer(x) -> Musician(x))", "all x.(Singer(x) -> Musician(x))", "all x.(Singer(x) -> Musician(x))", "all x.(Singer(x) -> Musician(x))", "all x.(Singer(x) -> Musician(x))", "all x.(Singer(x) -> Musician(x))", "all x.(Singer(x) -> Musician(x))", "all x.(Singer(x) -> Musician(x))", "all x.(Singer(x) -> Musician(x))", "all x.(Singer(x) -> Musician(x))", "all x.(Singer(x) -> Musician(x))", "all x.(Singer(x) -> Musician(x))"]}
{"id": "folio_train_2224", "nl": "Demons is one of the most popular singles of Imagine Dragons.", "fol": "HasPopularSingle(ImagineDragon,Demons)", "prediction": ["All x.(Demons(x) -> ImagineDragonsPopularSingle(x))", "All x.(Demons(x) -> (Sound(x) & ImagineDragons(x)))", "OneOfInspirationalDragonsSingle(demons) -> PopularSingleOfImagineDragons(demons))", "(InspiringDragons(Demons) -> PopularSingle(Demons))", "(PopularSingle(Demons) & ImagineDragons(ImagineDragons))", "(PopularSingle(Demons) & ImagineDragon(Dragons) & PopularSingle(Dragons))", "ThemeUnder(Demons) & ImagineDragonsSolo(Ice(Dragons))", "OneOfTopPopularSingles(Demons) & ImagineDragons(Dragons)", "all x.(Demons(x) -> PopularSingleOfImagineDragons(x))", "all x.((Demons(x) & ImagineDragons(x)) -> PopularSingle(x))", "(MostPopularSingle(Drones) -> Demons(Pro))", "all x.(Dmons(x) -> MorePopularSingle(x))", "All x.(Demons(x) -> (Sound(x) | Single(x)))", "(MostPopularSingle(Demons) | ImagineDragons(Dragons)))", "All x y.((Dmons(x) & ImagineDragons(y)) -> PopularSingle(x,y))", "OneOfEnjoyEDARNSingles(DEMONS)"]}
{"id": "folio_train_2225", "nl": "Some singles of Imagine Dragons have been on Billboard Hot 100.", "fol": "exists x.(HasPopularSingle(ImagineDragon,x) & IsOnBillboardHot100(x))", "prediction": ["exists x.(Single(x) & ImagineDragons(x) & BillboardHot100(x))", "exists x.(ImagineDragonSingle(x) & BillboardHot100(x))", "exists x.(IceDragonsSingle(x) & BillboardHot100(x))", "exists x.(Single(x) & ImagineDragon(x) & BillboardHot100(x))", "exists x.(ImagineDragonsSingle(x) & BillboardHot100(x))", "exists x.(ImagineDragonsSingle(x) & BillboardHot100(x))", "exists x.(Single(x) & ImagineDragons(x) & BillboardHot100(x))", "exists x.(Single(x) & ImagineDragons(x) & BillboardHot100(x))", "exists x.(Single(x) & ImagineDragons(x) & BillboardHot100(x))", "exists x.(ImagineDragonsSingle(x) & BillboardHot100(x))", "exists x.(ImagineDragonSingle(x) & BillboardHot100(x))", "exists x.(Single(x) & ImagineDragon(x) & BillboardHot100(x))", "exists x.(ImagineDragonsSingle(x) & BillboardHot100(x))", "exists x.(ImagineDragon(x) & Single(x) & BillboardHot100(x))", "exists x.(ImagineDragonSingle(x) & BillboardHot100(x))", "exists x.(ImagineDragonSingle(x) & BillboardHot100(x))"]}
{"id": "folio_train_2226", "nl": "Some rock band's lead singer is a songwriter.", "fol": "exists x.(IsRockBand(x) & exists y.(HasLeadSinger(x,y) & IsSongWriter(y)))", "prediction": ["exists x.(RockBandLeadSongwriter(x) & LeadSongwriter(x))", "all x.(RockBand(x) -> LeadSinger(x))", "exists x.(RockBandLeadSinger(x) & Songwriter(x))", "exists x.(RockBandLeadSinger(x) & Songwriter(x))", "exists x.(RockBandLeadSinger(x) & Songwriter(x))", "exists x.(RockBandSongwriter(x) & LeadSinger(x))", "exists x.(RockBandLeadSinger(x) & Songwriter(x))", "exists x.(RockBandLeadSinger(x) & Songwriter(x))", "exists x.(RockBand(x) & LeadSinger(x) & Songwriter(x))", "exists x.(RockBandLeadSinger(x) & Songwriter(x))", "exists x.(RockBandBandLeadSinger(x) & Songwriter(x))", "exists x.(RockBandLeadSinger(x) & Songwriter(x))", "exists x.(RockBandLeadSinger(x) & Songwriter(x))", "exists x.(RockBand(x) & LeadSinger(x) & Songwriter(x))", "exists x.(RockBandLeedSinger(x) & Songwriter(x))", "exists x y.(RockBand(x) & LeadSinger(x) & Songwriter(x))"]}
{"id": "folio_train_2227", "nl": "Dan is not a musician.", "fol": "-IsMusician(Dan)", "prediction": ["All x.(Dan(x) -> -Musician(x))", "-Musician(Dan)", "-Musician(Dan)", "-Musician(Dan)", "(-Musician(Dan))", "is \u2013Musician(Dan)", "Dan is notMusician(Dan)", "Dan is notMusician.", "all x.(Dan(x) -> -Musician(x))", "(-(Dan) & Musician(Dan)))", "(-Musician(Dan))", "-Musician(Dan)", "(-Musician(Dan))", "-Musician(Dan)", "(-Musician(Dan))", "(-Musician(Dan))"]}
{"id": "folio_train_2228", "nl": "Demons has been on Billboard Hot 100.", "fol": "IsOnBillboardHot100(Demons)", "prediction": ["(all x.(Demons(x) -> BillboardHot100)))", "Billboard Hot100(Demons)", "Billboard Hot100 & On(Demons))", "(BillboardHot100(Demons) & On(Demons,Billboard))", "has been on BillboardHot100(Demons)", "All x.(Demon(x) -> BillboardHot100(x))", "all x.(Demons(x) -> BillboardHot100(x))", "All x.(Demon(x) -> BillboardHot100(x))", "all x.(Demons(x) -> BillboardHot100(x))", "Demons has been on BillboardHot100.", "Billboard Hot100 (BeingOn(Demons,Billboard) & HasSituatedOn(Dens).", "(SelfDefence(Democrats) & BillboardHot100(demons))", "Demons OnBillboardHot100.", "HasBeenOnBillboardHot100(Demons)", "(all x.(Demons(x) -> BillboardHot100)))", "(Live(Demons) & BillboardHot100(Demons))"]}
{"id": "folio_train_2229", "nl": "All bread is food.", "fol": "all x.(IsBread(x) -> IsFood(x))", "prediction": ["all x.(Bread(x) -> Food(x))", "all x.(Bread(x) -> Food(x))", "All x.(Bread(x) -> Food(x))", "all x.exists y.(Bread(x) & Food(y))", "all x.(Bread(x) -> Food(x))", "all x.(Bread(x) -> Food(x))", "all x.(Bread(x) -> Food(x))", "all x.(Bread(x) -> Food(x))", "all x.(Bread(x) -> Food(x))", "all x.(Bread(x) -> Food(x))", "all x.(Bread(x) -> Food(x))", "all x.(Bread(x) -> Food(x))", "all x.(Bread(x) -> Food(x))", "all x.(Bread(x) -> Food(x))", "all x.(Bread(x) -> Food(x))", "all x.(Bread(x) -> Food(x))"]}
{"id": "folio_train_2230", "nl": "Some sandwiches are bread.", "fol": "exists x.(IsSandwich(x) & IsBread(x))", "prediction": ["exists x.(Sandwich(x) & Bread(x))", "exists x.(Sandwich(x) & Bread(x))", "exists x.(Sandwich(x) & Bread(x))", "exists x.(Sandwich(x) & Bread(x))", "exists x.(Sandwich(x) & Bread(x))", "exists x.(Sandwich(x) & Bread(x))", "exists x.(Sandwich(x) & Bread(x))", "exists x.(Sandwich(x) & Bread(x))", "exists x.(Sandwich(x) & Bread(x))", "exists x.(Sandwich(x) & Bread(x))", "exists x.(Sandwich(x) & Bread(x))", "exists x.(Sandwich(x) & Bread(x))", "exists x.(Sandwich(x) & Bread(x))", "exists x.(Sandwich(x) & Bread(x))", "exists x.(Sandwich(x) & Bread(x))", "exists x.(Sandwich(x) & Bread(x))"]}
{"id": "folio_train_2231", "nl": "All food is edible. ", "fol": "all x.(IsFood(x) -> IsEdible(x))", "prediction": ["all x.(Food(x) -> Edible(x))", "all x.(Food(x) -> Edible(x))", "ALL TEA.(Food(t) -> Edible(t))", "all x.(Food(x) -> Edible(x))", "all x.(Food(x) -> Edible(x))", "all x.(Food(x) -> Edible(x))", "all x.(Food(x) -> Edible(x))", "all x.(Food(x) -> Edible(x))", "all x.(Food(x) -> Edible(x))", "all x.(Food(x) -> Edible(x))", "all x.(Food(x) -> Edible(x))", "all x.(Food(x) -> Edible(x))", "all x.(Food(x) -> Edible(x))", "all x.(Food(x) -> Edible(x))", "all x.(Food(x) -> Edible(x))", "all x.(Food(x) -> Edible(x))"]}
{"id": "folio_train_2232", "nl": "No edible things are poisonous.", "fol": "all x.(IsEdible(x) -> -IsPoisonous(x))", "prediction": ["-exists x.(Edible(x) & Poisonous(x))", "-exists x.(Edible(x) & Poisonous(x))", "-exists x.(EdibleThing(x) & Poisonous(x))", "_exists x.(EdibleTreatment(x) & Poisonous(x))", "\u2013 there exists x.(Edible(x) & Poisonous(x))", "-exists x.(Edible(x) & Poisonous(x))", "-exists x.(EdibleThing(x) & Poisonous(x))", "-exists x.(EdibleThing(x) & Poisonous(x))", "-exists x.(Edible(x) & Poisonous(x))", "-exists x.(EdibleThing(x) & Poisonous(x))", "-exists x.(Edible(x) & Poisonous(x))", "-exists x.(Edible(x) & Poisonous(x))", "-exists x.(Edible(x) & Poisonous(x))", "-exists x.(Edible(x) & Poisonous(x))", "-exists x.(EdibleGood(x) & Poisonous(x))", "-exists x.(Edible(x) & Poisonous(x))"]}
{"id": "folio_train_2233", "nl": "Deodorant is poisonous.", "fol": "IsPoisonous(Deodorant)", "prediction": ["all x.(Deodorant(x) -> Poisonous(x))", "all x.(Deodorant(x) -> Poisonous(x))", "all x.(Deodorant(x) -> Poisonous(x))", "all x.(Deodorant(x) -> Poisonous(x))", "all x.(Deodorant(x) -> Poisonous(x))", "all x.(Deodorant(x) -> Poisonous(x))", "all x.((Deodorant(x) & Poisonous(x)) -> Phenolic(x))", "all x.(Deodorant(x) -> Poisonous(x))", "all x.(Deodorant(x) -> Poisonous(x))", "all x.(Deodorant(x) -> Poisonous(x))", "all x.(Deodorant(x) -> Poisonous(x))", "all x.((Deodorant(x) & Poisonous(x)) -> Uses(x))", "all x.(Deodorant(x) -> Poisonous(x))", "all x.(Deodorant(x) -> Poisonous(x))", "all x.(Deodorant(x) -> Poisonous(x))", "all x.(Deodorant(x) -> Poisonous(x))"]}
{"id": "folio_train_2234", "nl": "Deodorant is a sandwich.", "fol": "IsSandwich(Deodorant)", "prediction": ["all x.(Deodorant(x) -> Sandwich(x))", "all x.(Deodorant(x) -> Sandwich(x))", "all x.(Deodorant(x) -> Sandwich(x))", "all x.(Deodorant(x) & Sandwich(x))", "all x.(Deodorant(x) -> Sandwich(x))", "all x.(Deodorant(x) -> Sandwich(x))", "all x.(Deodorant(x) -> Sandwich(x))", "all x.(Deodorant(x) -> Sandwich(x))", "All x.(Deodorant(x) -> Sandwich(x))", "All x.(Deodorant(x) -> Sandwich(x))", "all x.(Deodorant(x) -> Sandwich(x))", "all x.(Deodorant(x) -> Sandwich(x))", "all x.(Deodorant(x) -> Sandwich(x))", "all x.(Deodorant(x) -> Sandwich(x))", "all x.(Deodorant(x) -> Sandwich(x))", "all x.(Deodorant(x) -> Sandwich(x))"]}
{"id": "folio_train_2235", "nl": "Deodorant is a sandwich and bread.", "fol": "(IsSandwich(Deodorant) & IsBread(Deodorant))", "prediction": ["all x.(Deodorant(x) -> (Sandwich(x) & Bread(x)))", "all x.(Deodorant(x) -> (Sandwich(x) & Bread(x)))", "all x.(Deodorant(x) -> (Sandwich(x) & Bread(x)))", "all x.(Deodorant(x) -> (Sandwich(x) & Bread(x)))", "all x.(Deodorant(x) -> (Sandwich(x) & Bread(x)))", "all x.((Deodorant(x) & Sandwich(x) & Bread(x)) -> Deodorant(x))", "all x.(Deodorant(x) -> (Sandwich(x) | Bread(x)))", "all x.(Deodorant(x) -> (Spanish(x) & Bread(x)))", "all x.(Deodorant(x) -> (Sandwich(x) & Bread(x)))", "all x.((Bread(x) & Sandwich(x)) -> Deodorant(x))", "all x.((Deodorant(x) & Sandwich(x) & Bread(x)) -> Deodorant(x))", "(Sandwich(Deodorant) & Bread(Deodorant))", "all x.(Deodorant(x) -> (Sandwich(x) & Bread(x)))", "All x.(Deodorant(x) -> (Sandwich(x) & Bread(x)))", "all x.(Deodorant(x) -> (Sandwich(x) & Bread(x)))", "all x.(Deodorant(x) -> (Sandwich(x) & Bread(x)))"]}
{"id": "folio_train_2236", "nl": "If deodorant is a loaf of bread, then deodorant is not a sandwich.", "fol": "(IsBread(Deodorant) -> -IsSandwich(Deodorant))", "prediction": ["all x.((Deodorant(x) & LoafOfBread(x)) -> -Sandwich(x))", "all x.((Deodorant(x) & LoafOfBread(x)) -> -Sandwich(x))", "all x.((Deodorant(x) & LoafOfBread(x)) -> -Sandwich(x))", "all x.((Deodorant(x) & LoafOfBread(x)) -> -Sandwich(x))", "all x.((Dormant(x) & LoafOfBread(x)) -> -Sandwich(x))", "all x.((Deodorant(x) & LoafOfBread(x)) -> -Sandwich(x))", "all x.((Deodorant(x) & Bread(x)) -> -Sandwich(x))", "all x.((Deodorant(x) & LoafOfBread(x)) -> -Sandwich(x))", "all x.((Defodorant(x) & BreadLoaf(x)) -> -Sandwich(x))", "all x.((Deodorant(x) & LoafOfBread(x)) -> -Sandwich(x))", "all x.((Deodorant(x) & LoafOfBread(x)) -> -Sandwich(x))", "all x.((Deodorant(x) & LoafOfBread(x)) -> -Sandwich(x))", "all x.((Deodorant(x) & BreadLoaf(x)) -> -Sandwich(x))", "all x.((Deodorant(x) & LoafOfBread(x)) -> -Sandwich(x))", "all x.((Deodorant(x) & LoafOfBread(x)) -> -Sandwich(x))", "all x.((Deodorant(x) & LoafOfBread(x)) -> -Sandwich(x))"]}
{"id": "folio_train_2237", "nl": "Common utilities include water, electricity, gas, heating, sewer, trash, and recycling.", "fol": "(IsCommonUtility(Water) & IsCommonUtility(Electricity) & IsCommonUtility(Gas) & IsCommonUtility(Heating))", "prediction": ["all x.(Water(x) | Electricity(x) | Gas(x) | Heating(x) | Sewer(x) | Trash(x) | Recycling(x)))", "all x.(CommonUtility(x) -> (IncludesWater(x) | IncludesElectricity(x) | IncludesGas(x) | IncludesHeating(x) | IncludesSewer(x) | IncludesTrash(x) | IncludesRecycling(x)))", "all x.(CommonUtility(x) -> (Water(x) | Electricity(x) | Gas(x) | Heating(x) | Sewer(x) | Trash(x) | Recycling(x)))", "(CanSimpleUtilities(water,water) & CanSaving(e,e,fredex(t)) & CanSavingUtilities(t) & CanStuff(y,rinse) & CanStuff(y,t))", "all x.(CommonUtility(x) -> (Water(x) | Electricity(x) | Gas(x) | Heating(x) | Sewer(x) | Trash(x) | Recycling(x)))", "all x.(CommonUtility(x) -> (Water(x) | Electricity(x) | Gas(x) | Heating(x) | Sewer(x) | Trash(x) | Recycling(x)))", "all x.(Utility(x) -> (Water(x) & Electricity(x) & Gas(x) & Heating(x) & Sewer(x) & Trash(x) & Recycling(x)))", "all x.(CommonUtilities(x) -> (Water(x) | Electricity(x) | Gas(x) | Heating(x) | Sewer(x) | Trash(x) | Recycling(x)))", "all x.(PublicUtility(x) -> (Water(x) | Electricity(x) | Gas(x) | Heating(x) | Sewer(x) | Trash(x) | Recycling(x)))", "all x.(Utility(x) -> (Water(x) & Electricity(x) & Gas(x) & Heating(x) & Sewer(x) & Trash(x) & Recycling(x)))", "all x.((Water(x) | Electricity(x) | Gas(x) | Heating(x) | Sewer(x) | Trash(x) | Recycling(x))) -> CommonUtilities(x))", "all x.(CommonUtility(x) -> (Water(x) | Electricity(x) | Gas(x) | Heating(x) | Sewer(x) | Task(x) | Recycling(x)))", "all x.(CommonUtility(x) -> (Water(x) | Electricity(x) | Gas(x)) | Heating(x) | Sewer(x) | Trash(x) | Recycling(x)))", "all x.((Water(x) | Electricity(x) | Gas(x) | Heating(x) | Sewer(x) | Task(x) | Recycling(x))) -> Utility(x))", "all x.(CommonUtility(x) -> (Water(x) | Electricity(x) | Gas(x) | Heating(x) | Sewer(x) | Trash(x) | Recycling(x)))", "all x.(Utilities(x) -> (Water(x) | Electricity(x) | Gas(x) | Heating(x) | Sewer(x) | Trash(x) | Recycling(x)))"]}
{"id": "folio_train_2238", "nl": "Many apartment rents cover the cost of water and electricity.", "fol": "exists x.(CoversUtility(x,Water) & CoversUtility(x,Electricity))", "prediction": ["exist x.(ApartmentRent(x) & CoversWater(x) & CoversElectricity(x))", "all x.(ApartmentRent(x) -> CoversWaterAndElectricityCost(x))", "all x y.((ApartmentRent(x) & WaterCouple(y) & ElectricityCouple(y,x)) -> CoverCost(x,y))", "all x.(ApartmentRent(x) -> (CompensatesWaterCoupon(x) & CompensatesElectricity(x)))", "all x.(AppartmentRent(x) -> (CoversWater(x) & CoversElectricity(x)))", "all x.(ApartmentRent(x) -> (CostOfWater(x) & CostOfElectricity(x)))", "exists x.(ApartmentRent(x) & CoversWater(x) & CoversElectricity(x))", "all x y.((ApartmentRent(x) & Water(y) & Electricity(z)) -> CoversCost(x,z))", "all x.(ApartmentRent(x) -> (CoversWater(x) & CoversElectricity(x)))", "all x.(AppartmentRent(x) -> (CoversWater(x) & CoversElectricity(x)))", "exists x.(ApartmentRent(x) & CommitsWaterAndElectricity(x))", "all x y.((ApartmentRent(x) & Water(y)) -> CoversCostAndElectricity(x,y))", "exists x.(ApartmentRent(x) & CoversCoin(x,Water) & CoversCoin(x,Electricity))", "exists x.(ApartmentRent(x) & CoversCostForWater(x) & CoversCostForElectricity(x))", "all x.(ApartmentRent(x) -> (CostOfWater(x) & CostOfElectricity(x)))", "all x.(ApartmentRent(x) -> (CoversWater(x) & CoversElectricity(x)))"]}
{"id": "folio_train_2239", "nl": "Susan lives in an apartment where the rent covers all utilities.", "fol": "all x.CoversUtility(Susan,x)", "prediction": ["(LivesInApartment(Susan) & RentCoversAllUtility(Susan))", "all x y z.((Apartment(x) & Rent(y) & Utility(z)) -> LivesInWaitings(x,y,z))", "all x y.((Apartment(x) & Apartment(y) & RentCovers(x,y)) -> LivesIn(x,y))", "Susan lives in an apartment where rent covers utilities.", "exists x y z.((Appartement(x) & Rent(y) & Utility(z) & Covers(x,y,z)) -> LivesIn(x,y))", "all x.((Susan(x) & Apartment(x)) -> RentCovers(x,y))", "all x.((Apartment(x) & RentCoversUtilities(x)) -> SusanLivesIn(x))", "exists x.(Apartment(x) & RentCoversUtility(x))", "all x y.((Appartment(x) & Apartment(y)) -> CoversVent(x,y))", "all x y.((Susan(x) & Apartment(y)) -> LivesInWithRent(x,y))", "all x y z.((Susan(x) & Apartment(y) & Utility(z) & RentCollects(y,z)) -> LivesIn(x,y))", "all x y.((Susan(x) & Apartment(y) & RentCovers(x,y,y)) -> LivesIn(x,y))", "all x y z.((Apartment(x) & Apartment(y) & Rent(z)) -> CoversUtility(y,z))", "all x y.((Apartment(x) & Rent(y)) -> CoversTitles(x,y))", "all x.((Susan(x) & Apartment(x) & RentCoversAllUtility(x)) -> LivesIn(x,y))", "all x y z.((Appartment(x) & Rent(y) & Utility(z)) -> LivesIn(x,y,z))"]}
{"id": "folio_train_2240", "nl": "The rent of the apartment where Ava lives does not cover any utility expenses.", "fol": "all x.-CoversUtility(Ava,x)", "prediction": ["all x y.((Apartment(x) & FloatsAva(y)) -> -CoverSutilityExpense(x))", "all x y.((Apartment(x) & Apartment(y) & LivingAva(x)) -> -CoversUtilityExpenses(z))", "all x.((Apartment(x) & Ava(x)) -> -CopensesUtilityExpenses(x))", "all x.((Apartment(x) & AvaCleansOffUtilityExpenses(x)) -> -Rent(x))", "all x.((Apartment(x) & AvaLives(x)) -> -CoverUtilityExpenses(x))", "all x.((Apartment(x) & AvaLivesIn(x)) -> -CoversUtilityExpenses(x))", "All x.((Apartment(x) & AviLives(x)) -> -CoversUtilityExpenses(x))", "all x.((Apartment(x) & AvaApartment(x)) -> -CoversUtilityExpenses(x))", "all x y z.((Apartment(x) & Apartment(y) & LivesIn(y,x) & Rent(x)) -> -CoversUtilityExpenses(x))", "all x y.((Apartment(x) & Ava(y)) -> -UtilityExpense(x,y))", "(RentOfApartment(x) & LifeAva(x))", "all x.((Apartment(x) & AvaLiving(x)) -> -UtilityExpense(x))", "all x y.((Apartment(x) & Apartment(y)) -> -CoversUtilityExpenses(x,y))", "-exists x.(Apartment(x) & AvaLiving(x))", "all x.((Apartment(x) & AvaLivesIn(x)) -> -UtilityExpenses(x))", "all x.(AvaApartment(x) -> -CoversUtilityExpenses(x))"]}
{"id": "folio_train_2241", "nl": "Noah lives in an apartment where the rent does not cover heating.", "fol": "-CoversUtility(Noah,Heating)", "prediction": ["all x y.((Apartment(x) & Rental(y) & -Heating(y)) -> LivesIn(x,y))", "all x.((Apartment(x) & RentChainsHeating(x)) -> LifesIn(x,Noah))", "all x y z.((Apartment(x) & Apartment(y) & Rent(z)) -> -Hires(y,z))", "all x.((Apartment(x) & RentThermostat(x)) -> -ChangeWithHeatingRent(x))", "all x.((Apartment(x) & -WaterCovers(x)) -> LivesIn(x,Room))", "all x y z.((Apartment(Noah) & Apartment(y) & Rent(z)) -> -CoversHeating(x,y,z))", "Noah lives in apartment without heating.", "(LimitsIn(Noah,Venue) & RentDoesNotCoverHeating(Noah))", "all x y.((Apartment(x) & Apartment(y) & -CoversHeating(y)) -> NoahLivesIn(x,y))", "all x y.((Apartment(x) & Noah(y)) -> -ReturnsHeating(y,x))", "all x y.((Apartment(x) & Apartment(y) & Rental(y)) -> -Cover Heating(y))", "-CoversHeating(Noah)", "all x y.((Apartment(x) & Rental(y) & -RentCoversHeating(y)) -> NoahLivesIn(x,y))", "all x y.((Apartment(x) & Apartment(y)) -> -CoversHeating(y))", "all x.((Apartment(x) & -ChangeHeating(x)) -> LivesIn(x,y))", "all x y.((Apartment(x) & Rental(y) & -CoversHeating(y)) -> LivesIn(x,y))"]}
{"id": "folio_train_2242", "nl": "A common utility being covered is that it doesn't need to be paid.", "fol": "all x y.((CoversUtility(x,y) & IsCommonUtility(y)) <-> -RequiresPayment(x,y))", "prediction": ["exists x.(Utility(x) & -Funded(x))", "all x.((Utility(x) & Covered(x)) -> -NeedsPaid(x))", "all x.((Utility(x) & Covered(x)) -> -Pays(x))", "all x.((Utility(x) & Covered(x)) -> -NeedsPayment(x))", "all x.((Unity(x) & -Payed(x)) -> Covered(x))", "all x.((Utility(x) & -Payable(x)) -> Covered(x))", "all x.((Utility(x) & Covered(x)) -> -NeedsToBePayed(x))", "all x.((Utility(x) & Covered(x)) -> -Payable(x))", "all x.((Utility(x) & Covered(x)) -> -WillBePayed(x))", "all x.((WaterUtility(x) & -PayredUtilities(x)) -> -ManyUtilitiesCanBeCovered(x))", "all x.((Utility(x) & Covered(x)) -> -Payable(x))", "all x.((Utility(x) & Covered(x)) -> -RequiresPayment(x))", "all x.((Utility(x) & Covered(x)) -> -NeedsPaid(x))", "all x.((Utility(x) & Covered(x)) -> -MustPay(x))", "all x.((Utility(x) & HasVeryOpenUtility(x)) -> -NeedsToPay(x))", "all x.((Utility(x) & Covered(x)) -> -NeedsPayment(x))"]}
{"id": "folio_train_2243", "nl": "Noah needs to pay the water bill.", "fol": "RequiresPayment(Noah,Water)", "prediction": ["all x.(NeedsToPayWaterBill(x) -> Noah(x))", "all x y.((Nawt(x) & Noah(y) & WaterBill(x,y)) -> NeedsToPay(x,y))", "all x.(Noah(x) -> NeedsToPayWaterBill(x))", "Noah needs to pay the waterbill.", "-NeedsWaterBill(Noah)", "Noah is unable to pay water bill.", "-NeedsToPayWaterBill(Naom,Waterbill)", "all x.(NoahNeedsToPayWaterBill(x))", "all x!(NasiKast(x,NasyWaterBill)) -> AllOf(x,Nasa,WaterBill))", "(NeedsWaterBill(Noah))", "Nawwaia NeedsToPayWaterBill(Nawwaia)", "-(NeedsToPay(Noah,WaterBill))", "Noah needs to pay the water bill.", "all x.(NeedsToPayWaterBill(x) -> Noah(x))", "Noah NEEDSToPayWaterBill(Noah)", "(NeedsToPayWaterBill(Noah,Water))"]}
{"id": "folio_train_2244", "nl": "Noah and Ava both need to pay the heating bill.", "fol": "(RequiresPayment(Noah,Heating) & RequiresPayment(Ava,Heating))", "prediction": ["(PayHotAir(Noah) & PayHeatAir(Ava))", "(PayHeatingBill(Nicholas) & PayHeatingBill(Nicholas))", "all x.((Noah(x) & Ava(x)) -> NeedsToPayHeatingBill(x))", "all x.((Noah(x) | Ava(x)) -> PaysHeatingBill(x))", "(Pay(Noah) & Pay(Ava))", "(PayHeatherBill(Noah) & PayHeatHeatingBill(Ava))", "all x y.((Noah(x) & Ava(y)) -> NeedsToPayHeatingBill(x,y))", "all x y.((Noah(x) & Ava(y)) -> NeedsToPayHeatingBill(x,y))", "(PayHeatingBill(Noah,Bill) & PayHeatingBill(Ava,Bill))", "all x.((Noah(x) | Ava(x)) -> HasHeatingBill(x))", "(PayHeatingBill(noah) & PayHeatingBill(ava))", "(PayHeatingBill(Noah) & PayHeatingBill(Ava))", "all x y.((Noah(x) & Ava(y)) -> (PayHeatingBill(x,Y) | PayHeatingBill(y,y)))", "all x.((Noah(x) | Ava(x)) -> NeedsHeatingBill(x))", "(PaysHeatingBill(Noah,Ava) & PaysHeatingBill(Ava,Noah))", "(PaysHeatingBill(Noah,David) & PaysHeatingBill(Ava,David))"]}
{"id": "folio_train_2245", "nl": "Susan does not need to pay the water bill.", "fol": "-RequiresPayment(Susan,Water)", "prediction": ["Susan has no cash-flows-(PaysWaterBill))", "Susan -PaysWaterBill(susan),sanity.", "Susan will not need to paytheWaterBill(susan)", "(-PaysWaterBill(Susan))", "-NeedsToPayWaterBill(Susan)", "that she does not need to pay the waterBill(Susan)", "Die WasserbillChange(Susan)", "is a member of the Social Security Administration (Susan) & -PaysWaterBill(Susan,Susan))", "Susan -PaysWaterBill(Susan)", "all x.(Susan(x) -> -NoWaterBill(x))", "Susan is not able to pay water bill.", "-PaysWaterBill(Susan)", "no water bill.(Susan,Santa) -Pays(sp))", "-PayWaterBill(Susan)", "all x.(NeedsChemicalWaterBill(x) -> -PaysWaterBill(x))", "all x.(Susan(x) -> -PayWaterBill(x))"]}
{"id": "folio_train_2246", "nl": "All clothes are products. ", "fol": "all x.(IsClothing(x) -> IsProduct(x))", "prediction": ["all x.(Clothes(x) -> Product(x))", "all x.(Clothing(x) -> Product(x))", "all x.(Clothes(x) -> Product(x))", "all x.(Clothing(x) -> Product(x))", "all x.(Clothing(x) -> Product(x))", "all x.(Clothing(x) -> Product(x))", "all x.(Clothing(x) -> Product(x))", "all x.(Clothing(x) -> Product(x))", "all x.(Clothing(x) -> Product(x))", "all x.(Clothing(x) -> Product(x))", "all x.(Clothing(x) -> Product(x))", "all x.(Clothing(x) -> Product(x))", "all x.(Clothes(x) -> Product(x))", "all x.(Clothing(x) -> Product(x))", "all x.(Clothing(x) -> Product(x))", "all x.(Clothing(x) -> Product(x))"]}
{"id": "folio_train_2247", "nl": "No products are perfect. ", "fol": "all x.(IsProduct(x) -> -IsPerfect(x))", "prediction": ["-exists x.(Product(x) & Perfect(x))", "-exists x.(Product(x) & Perfect(x))", "-exists x.(Product(x) & Perfect(x))", "-exists x.(Product(x) & Perfect(x))", "-exists x.(Product(x) & Perfect(x))", "-exists x.(Product(x) & Perfect(x))", "-exists x.(Product(x) & Perfect(x))", "-exists x.(Product(x) & Perfect(x))", "keines derartigen Produkte.", "-exists x.(Product(x) & Perfect(x))", "-exists x.(Product(x) & Perfect(x))", "-exists x.(Product(x) & Perfect(x))", "-exists x.(Product(x) & Perfect(x))", "-exists x.(Product(x) & Perfect(x))", "-exists x.(Product(x) & Perfect(x))", "-exists x.(Product(x) & Perfect(x))"]}
{"id": "folio_train_2248", "nl": "All dresses are clothes.", "fol": "all x.(IsDress(x) -> IsClothing(x))", "prediction": ["(All X.(Rose(x) -> Clothing(x)))", "all x.(Rose(x) -> Clothing(x))", "all x.(Lady(x) -> Clothes(x))", "all x.(Rose(x) -> Clothes(x))", "all x.(Roof(x) -> Clothing(x))", "all x.(Rose(x) -> Clothing(x))", "all x.(Kleider(x) -> Clothing(x))", "all x.(Rivers(x) -> Clothes(x))", "all x.(Dress(x) -> Clothing(x))", "all x.(Classic(x) -> Clothes(x))", "all x.(Rose(x) -> Clothes(x))", "all x.(Dress(x) -> Clothing(x))", "all x.(Dress(x) -> Clothing(x))", "all x.(Dessert(x) -> Clothing(x))", "all x.(Roses(x) -> Clothing(x))", "all x.(Rose(x) -> Clothes(x))"]}
{"id": "folio_train_2249", "nl": "All skirts are dresses. ", "fol": "all x.(IsSkirt(x) -> IsDress(x))", "prediction": ["all x.(Skirt(x) -> Dress(x))", "all x.(Skirt(x) -> Dress(x))", "all x.(Skirt(x) -> Dress(x))", "all x.(Skirt(x) -> Dress(x))", "all x.(Skirt(x) -> Dress(x))", "all x.(Skirt(x) -> Dress(x))", "all x.(Skirt(x) -> Dress(x))", "all x.(Skirt(x) -> Dress(x))", "all x.(Skirt(x) -> Dress(x))", "all x.(Skirt(x) -> Dress(x))", "all x.(Skirt(x) -> Dress(x))", "all x.(Skirt(x) -> Dress(x))", "all x.(Skirt(x) -> Dress(x))", "all x.(Skirt(x) -> Dress(x))", "all x.(Skirt(x) -> Dress(x))", "all x.(Skirt(x) -> Dress(x))"]}
{"id": "folio_train_2250", "nl": "If Nike is clothes, then Nike is perfect and a dress.", "fol": "(IsClothing(Nike) -> (IsPerfect(Nike) & IsDress(Nike)))", "prediction": ["all x.((Nike(x) & Clothing(x)) -> (Perfect(x) & Dress(x)))", "all x.((Nike(x) & Clothing(x)) -> (Perfect(x) & Dress(x)))", "all x.((Nike(x) & CLOTH(x)) -> (Perfect(x) & Dress(x)))", "all x.(Clothing(x) -> (Perfection(x) & Dress(x)))", "all x.((Nike(x) & Clothes(x)) -> (Perfect(x) & Dress(x)))", "all x.((Nike(x) & Clothing(x)) -> (Perfect(x) & Dress(x)))", "all x.((Nike(x) & Clothing(x)) -> (Perfect(x) & Dress(x)))", "all x.((Jaguar(x) & Nike(x)) -> (Perfect(x) & Dress(x)))", "all x.((Nike(x) & Clothes(x)) -> (Perfect(x) & Dress(x)))", "all x.((Nike(x) & Clothing(x)) -> (Perfect(x) & Dress(x)))", "all x.((Nike(x) & Clothes(x)) -> (Perfect(x) & Dress(x)))", "all x.((Nike(x) & Clothing(x)) -> (Perfect(x) & Dress(x)))", "all x.((Nike(x) & Clothing(x)) -> (Perfect(x) & Dress(x)))", "all x.(Clothes(x) -> (Perfect(x) & Dress(x)))", "all x.(Clothing(x) -> (Perfect(x) & Dress(x)))", "all x.((Nike(x) & Clothing(x)) -> (Perfect(x) & Dress(x)))"]}
{"id": "folio_train_2251", "nl": "Nike is perfect.", "fol": "IsPerfect(Nike)", "prediction": ["all x.(Nike(x) -> Perfect(x))", "-Damned!", "(Perfect(Nike,n) & NotPerfect(Nike,n))", "all x.(Nike(x) -> Perfect(x))", "(Perfect(Nike) -> Perfection(Nike))", "Nike is perfect.", "Nike & Perfect(Nike)", "Nike is Perfect(x)", "all x.(Nike(x) -> Perfect(x))", "all x.(Nike(x) -> Perfect(x))", "It's Perfect(Nike,x)", "Nike is perfect.", "-> Perfect(Nike))", "Nike is perfect.", "all x.(Nike(x) -> Perfect(x))", "Das Nike(n) -> Perfect(n))"]}
{"id": "folio_train_2252", "nl": "Nike is a skirt.", "fol": "IsSkirt(Nike)", "prediction": ["all x.(Nike(x) -> Skirt(x))", "all x.(Nike(x) -> Skirt(x))", "all x.(Nike(x) -> Skirt(x))", "all x.(Nike(x) -> Skirt(x))", "Nike is a skirt.", "(Skirt(Nike) & Skull(Nike))", "all x.(Nike(x) -> Skirt(x))", "all x.(Nike(x) -> Skirt(x))", "all x.(Nike(x) -> Skirt(x))", "all x.(Nike(x) -> Skirt(x))", "Nike is a skirt.", "all x.(Nike(x) -> Skirt(x))", "(IsSkirt(Nike))", "all x.(Nike(x) -> Skirt(x))", "all x.(Nike(x) & Skirt(x))", "(Skirt(Nike) & -Solid(Nike))"]}
{"id": "folio_train_2253", "nl": "Nike is not a skirt.", "fol": "-IsSkirt(Nike)", "prediction": ["Nike is not a skirt.", "Nike is not a skirt.", "-Skirt(Nike)", "-Skirt(y)", "-Skirt(Nike)", "all x.(Nike(x) -> -Skirt(x))", "-(Nike(n) & Skirt(n))", "exists x.(Nike(x) & -Skirt(x))", "all x.(Nike(x) -> -Skirt(x))", "and Nike.", "this skirt.", "-Skirt(Nike)", "is notSkirt(Nike)", "-Skirt(Nike)", "all x.(Nike(x) -> -Skirt(x))", "-Skirt(Nike)"]}
{"id": "folio_train_2254", "nl": "All pets are animals.", "fol": "all x.(IsPet(x) -> IsAnimal(x))", "prediction": ["all x.(Pet(x) -> Animal(x))", "all x.(Pet(x) -> Animal(x))", "all x.(Pet(x) -> Animal(x))", "all x.(Pet(x) -> Animal(x))", "all x.(Pet(x) -> Animal(x))", "all x.(Pet(x) -> Animal(x))", "all x.(Pet(x) -> Animal(x))", "all x.(Pet(x) -> Animal(x))", "all x.(Pet(x) -> Animal(x))", "all x.(Pet(x) -> Animal(x))", "all x.(Pet(x) -> Animal(x))", "all x.(Pet(x) -> Animal(x))", "all x.(Pet(x) -> Animal(x))", "all x.(Pet(x) -> Animal(x))", "all x.(Pet(x) -> Animal(x))", "all x.(Pet(x) -> Animal(x))"]}
{"id": "folio_train_2255", "nl": "Pets can be either a dog or a cat.", "fol": "all x.(((IsPet(x) -> IsDog(x)) & -IsCat(x)) | (-(IsPet(x) -> IsDog(x)) & IsCat(x)))", "prediction": ["all x.(Pet(x) -> (Dog(x) | Katz(x)))", "exists x.(Pet(x) & (Dog(x) | Cat(x)))", "all x.(Pet(x) -> (Dog(x) | Cat(x)))", "all x.(Pet(x) -> (Dog(x) | Cat(x)))", "all x.(Pet(x) -> (Dog(x) | Cat(x)))", "all x.(Pet(x) -> (Dog(x) | Cat(x)))", "all x.(Pet(x) -> (Dog(x) | Cat(x)))", "all x.(Pet(x) -> (Dog(x) | Cat(x)))", "all x.(Pet(x) -> (Dog(x) | Cat(x)))", "all x.(Pet(x) -> (Dog(x) | Cat(x)))", "all x.(Pet(x) -> (Dog(x) | Cat(x)))", "all x.(Pet(x) -> (Dog(x) | Cat(x)))", "all x.(Pet(x) -> (Dog(x) | Cat(x)))", "all x.(Pet(x) -> (Dog(x) | Cat(x)))", "all x.(Pet(x) -> (Dog(x) | Cat(x)))", "all x.(Pet(x) -> (Dog(x) | Cat(x)))"]}
{"id": "folio_train_2256", "nl": "If a person has a pet, they care for that pet. ", "fol": "all x y.(OwnsPet(x) -> CaresFor(x,y))", "prediction": ["all x.(HasPet(x) -> CaresFor(x,pet))", "all x.(HasPet(x) -> CareForPet(x))", "all x.(HasPet(x) -> CaresForPacket(x))", "all x.(RecentPet(x) -> CaresForPet(x))", "all x.((Person(x) & HasPet(x)) -> CaresForPet(x))", "all x.(HasPet(x) -> CareForPet(x))", "all x.(HasPet(x) -> CarriesForPet(x))", "all x y.((Person(x) & Pet(y)) -> CaresFor(x,y))", "all x.(Pet(x) -> CarriesFor(x,pet))", "all x.((Person(x) & HasPet(x)) -> CaresForPet(x))", "all x.(HasPet(x) -> CarriesForPet(x))", "all x.((Person(x) & Pet(x)) -> CaresFor(x,y))", "all x.((Person(x) & HasPet(x)) -> CareForPet(x))", "all x.(HasPet(x) -> CarriesForPet(x))", "all x.((Person(x) & HasPet(x)) -> CaresForPet(x))", "all x.((Person(x) & Pet(x)) -> CaresFor(x,pet))"]}
{"id": "folio_train_2257", "nl": "Dogs and Cats can be naughty. ", "fol": "exists x.((IsCat(x) & IsNaughty(x)) | (IsDog(x) & IsNaughty(x)))", "prediction": ["(exists x.(Dog(x) & (Cat(x) & CanBeNaughty(x))))", "all x.((Dog(x) | Cat(x)) -> Naughty(x))", "exists x.(Dog(x) | Cat(x)) & CanBeNaughty(x))", "all x.(Naughty(x) -> (Dog(x) | Cat(x)))", "all x.((Dog(x) | Cat(x)) -> Nicholly(x))", "all x y.((Dog(x) | Cat(y)) -> CanBeNaughty(x,y))", "all x.((Dog(x) | Cat(x)) -> Naughty(x))", "all x.((Dog(x) | Cat(x)) -> Naughty(x))", "all x.((Dog(x) | Cat(x)) -> Naive(x))", "all x.((Dog(x) | Cat(x)) -> Nashy(x))", "exists x.(Dog(x) | Cat(x)) & Naughty(x))", "exists x.((Dog(x) | Cat(x)) & Naughty(x))", "all x.(Naughty(x) -> (Dog(x) | Cat(x)))", "all x.((Dog(x) | Cat(x)) -> Nayy(x))", "all x.((Dog(x) | Cat(x)) -> Neat(x))", "all x y.((Dog(x) | Cat(y)) -> Naughty(x))"]}
{"id": "folio_train_2258", "nl": "Pets who are naughty are not liked as much. ", "fol": "all x y.((IsPet(x) & IsNaughty(x)) -> -IsLiked(x,y))", "prediction": ["all x.(NaughtyPet(x) -> -likedAsMuch(x))", "all x.((Pet(x) & Naughty(x)) -> -LovedAsMuch(x))", "all x.((Pet(x) & Naughty(x)) -> -Friendly(x))", "all x.((Pet(x) & Naughty(x)) -> -Favorite(x))", "all x.((Pet(x) & Naughty(x)) -> -LikedAsMuch(x))", "all x.((Pet(x) & Naughty(x)) -> -Likely(x))", "all x.((Pet(x) & Naughty(x)) -> -Likely(x))", "all x.((Pet(x) & Naughty(x)) -> -PaintedAsMuch(x))", "all x.((Pet(x) & Naughty(x)) -> NotLikely(x))", "all x.((Pet(x) & Nirvy(x)) -> -Likely(x))", "all x.((Pet(x) & Naughty(x)) -> -Likely(x))", "all x.((Pet(x) & Naughty(x)) -> -Likely(x))", "all x.((Pet(x) & Naughty(x)) -> -LovedAsMuch(x))", "all x.((Pet(x) & Naughty(x)) -> -LovedAsMuch(x))", "all x.((Pet(x) & Neat(x)) -> -Likely(x))", "all x.((Pet(x) & Naughty(x)) -> -LikedAsMuch(x))"]}
{"id": "folio_train_2259", "nl": "Charlie has a naughty pet dog named Leo. ", "fol": "(OwnsPet(Charlie) & IsPet(Leo) & IsDog(Leo) & IsNaughty(Leo))", "prediction": ["all x.(Charlie(x) -> HasNaughtyPetDog(x,Leo))", "all x y.((Charlie(x) & PetDog(y) & Leo(x)) -> Naughty(x,y))", "all x.(Charlie(x) -> HasNaughtyPetDog(x,Leo))", "all x.(Charlie(x) -> HasNaughtyPetDog(x,Leo))", "all x y.((Charlie(x) & Naughty(y)) -> Dog(x,y))", "(NaughtyPetDog(Charlie) & NaughtyPetDog(Charlie))", "all x y.((Charlie(x) & Dog(y) & Naughty(y)) -> Leo(x))", "all x y.((Charlie(x) & Dog(y) & Neat(x) & NamedLeo(y)) -> PetDog(x,y))", "all x.(Charlie(x) -> (HasNaughtyPetDog(x) & Leo(x)))", "all x y.((Charlie(x) & Paw(y)) -> Naughty(x,y))", "exists x.(PetDog(x) & Naughty(x))", "all x.((Charlie(x) & NicePet(x)) -> (ManorPet(x,leo)))", "(Naughty(Charlie) | Lovely(Charlie)))", "all x.(Charlie(x) -> (NaughtyPetDog(x) & Leo(x)))", "all x.(Charlie(x) -> HasNaughtyPetDog(x,Leo))", "all x.(Child(x) -> (HasNaughtyPetDog(x) | HasNaughtyPetDog(x)))"]}
{"id": "folio_train_2260", "nl": "Leo is an animal.", "fol": "IsAnimal(Leo)", "prediction": ["Leo ist Animal(leo)", "Leo is an animal.", "Leo is an animal.", "Leo isAnimal(leo)", "Leo is a animal.", "Leo is an animal.", "Leo, animal(x)", "Animal(Leo)", "Leo isAnimal(leo,l).", "Leo is Animal(Leo,Animal)", "All x.(Leo(x) -> Animal(x))", "all x.(Leo(x) -> Animal(x))", "all x.(Leo(x) -> Animal(x))", "All x.(Negative(x) -> Leo(x))", "Leo ist ein Tier(leo)", "Leo (Animal)"]}
{"id": "folio_train_2261", "nl": "Charlie does not like Leo and does not care for Leo.", "fol": "(-IsLiked(Charlie,Leo) & -CaresFor(Charlie,Leo))", "prediction": ["all x.(Charlie(x) -> (-Likes(x,Leo) & -CaresFor(x,Leo)))", "(-likes(Charlie,Leo) & -CaresFor(Charlie,Leo))", "(-Likes(Charlie,Leo) & -CaresFor(Charlie,Leo))", "(-Joseph(Charlie) & Leo(Charlie)) & -Celebrates(Charlie,Leo))", "All x.((Charlie(x) & LessFuneral(x)) -> (-Likes(x,Leo) & -CaresFor(x,Leo)))", "(-Likes(Charlie,Leo) & -CaresFor(Charlie,Leo))", "LeoDislikes(Charlotte) et -CaresForLeo(Charlotte))", "(all x.(Charlie(x) -> -LovesLeo(x)) & -CareForLeo(x)))", "exists x.(Charlie(x) & -(LikesLo(x) & CaresForLo(x)))", "(-Likes(Charlie,Leo) & -CaresFor(Charlie,Leo))", "(-AndTorse(Charlie,Leo) | (-Charlie,Leo))))", "(non-Loving(Charlie,Leo) & -CaresFor(Charlie,Leo))", "(i.e., (IsLeo(i) | IsCareForLeo(i)))", "all x.(Charlie(x) -> (-like(x,Leo) & -Care(x,Leo)))", "(-LikesLeo(Charlie) & -CareForLeo(Charlie))", "(-Likes(Charlie,Leo) & -CaresForLeo(Charlie,Leo))"]}
{"id": "folio_train_2262", "nl": "Dogs are always not naughty.", "fol": "all x.(IsDog(x) -> -IsNaughty(x))", "prediction": ["all x.(Dog(x) -> -Naughty(x))", "all x.(Dog(x) -> -Naughty(x))", "all x.(Dog(x) -> -Naughty(x))", "all x.(Dog(x) -> -Naughty(x))", "all x.(Dog(x) -> -Naughty(x))", "all x.(Dog(x) -> -Naughty(x))", "all x.(Dog(x) -> -Naughty(x))", "all x.(Dog(x) -> -Naughty(x))", "all x.(Dog(x) -> -Naughty(x))", "all x.(Dog(x) -> -Naughty(x))", "all x.(Dog(x) -> -Naughty(x))", "all x.(Dog(x) -> -Naughty(x))", "all x.(Dog(x) -> -Naughty(x))", "all x.(Dog(x) -> -Naughty(x))", "all x.(Dog(x) -> -Naughty(x))", "all x.(Dorm(x) -> -Naughty(x))"]}
{"id": "folio_train_2263", "nl": "Surprises are either fun or dreadful.", "fol": "all x.(SurpriseEvent(x) -> ((IsFun(x) & -IsDreadful(x)) | (-IsFun(x) & IsDreadful(x))))", "prediction": ["all x.(Surprise(x) -> (Fun(x) | Drammy(x)))", "all x.(Surprise(x) -> (Fun(x) | Dreadful(x)))", "all x.(Surprise(x) -> (Fun(x) | Dreadful(x)))", "all x.((Surprise(x) & Fun(x) | Dreadful(x)))", "all x.(Surprise(x) -> ((Fun(x) | Darnedful(x))))", "all x.(Surprise(x) -> (Fun(x) | Drammous(x)))", "all x.(Surprise(x) -> ((Fun(x) | Dreadful(x))))", "all x.((Surprises(x) & (Fun(x) | Dramful(x))) -> HasEnoughSnow(x))", "all x.(Surprise(x) -> (Fun(x) | Horror(x)))", "all x.(Surprises(x) -> (Fun(x) | Dreadful(x)))", "all x.(Surprise(x) -> (Fun(x) | Dreadful(x)))", "all x.(Surprise(x) -> (Fun(x) | Dreadful(x)))", "all x.(Surprise(x) -> ((Fun(x) | Dreadful(x))))", "all x.(Surprise(x) -> (Fun(x) | Dreadful(x)))", "all x.(Surprise(x) -> (Fun(x) | Dreadful(x)))", "all x.(Surprise(x) -> ((Fun(x) | Dreadful(x))))"]}
{"id": "folio_train_2264", "nl": "All scares are surprises.", "fol": "all x.(IsScare(x) -> SurpriseEvent(x))", "prediction": ["all x.(Scare(x) -> Surprise(x))", "all x.(Scary(x) -> Surprise(x))", "all x.(Scare(x) -> Surprise(x))", "all x.(Scare(x) -> Surprise(x))", "all x.(Scare(x) -> Surprise(x))", "all x.(Scare(x) -> Surprise(x))", "all x.(Scare(x) -> Surprise(x))", "all x.(Scare(x) -> Surprise(x))", "all x.(Scare(x) -> Surprise(x))", "all x.(Scare(x) -> Surprise(x))", "all x.(Scare(x) -> Surprise(x))", "all x.(Scare(x) -> Surprise(x))", "all x.(Scare(x) -> Surprise(x))", "all x.(Scare(x) -> Surprise(x))", "all x.(Scare(x) -> Surprise(x))", "all x.(Scare(x) -> Surprise(x))"]}
{"id": "folio_train_2265", "nl": "All scares are fun.", "fol": "all x.(IsScare(x) -> IsFun(x))", "prediction": ["all x.(Scare(x) -> Fun(x))", "all x.(Scare(x) -> Fun(x))", "all x.(Screw(x) -> Fun(x))", "all x.(Scare(x) -> Fun(x))", "all x.(Scare(x) -> Fun(x))", "all x.(Scare(x) -> Fun(x))", "all x.(Scare(x) -> Fun(x))", "all x.(Scare(x) -> Fun(x))", "all x.(Scary(x) -> Fun(x))", "all x.(Scare(x) -> Fun(x))", "all x.(Scrow(x) -> Fun(x))", "all x.(Scare(x) -> Fun(x))", "all x.(Scare(x) -> Fun(x))", "all x.(Scare(x) -> Fun(x))", "all x.(Scare(x) -> Fun(x))", "all x.(Scare(x) -> Fun(x))"]}
{"id": "folio_train_2266", "nl": "All books written by Cixin Liu have sold more than 1 million copies. ", "fol": "all x.((IsBook(x) & AuthoredBy(x,Cixinliu)) -> HasSoldMoreThan(x,Onemillion))", "prediction": ["all x y.((Book(x) & WrittenByCixinLiu(x) & SoldMoreThanOneMillionCopies(x,y)) -> WrittenByCixinLiu(x))", "all x.((Book(x) & WrittenBy(x,CixinLiu)) -> SoldMoreThan(x,MillionKits))", "all x.((Book(x) & WrittenByCixinLiu(x)) -> SoldMoreThan(x,n,million))", "all x.((Book(x) & WrittenByCixinLiu(x)) -> SoldMoreThanImillionCopies(x))", "all x.((Book(x) & WrittenBy(x,CixinLiu)) -> SoldMoreThanOneMillionCopies(x))", "all x.((Book(x) & WrittenByCixinLiu(x)) -> SoldMoreThanOneMillionCopies(x))", "all x.((Book(x) & WrittenByCixinLiu(x)) -> SoldMoreThanOneMillionCopies(x))", "all x y z.((Book(x) & WrittenBy(x,y) & CixinLiu(z) & SoldMoreThanOneMillionCopies(x)) -> MoreMoreThanOneMillionCopies(x))", "all x.((Book(x) & WrittenByCixinLiu(x)) -> SoldMoreThan(x,millionCuplications))", "all x.((Book(x) & WrittenByCixinLiu(x)) -> SoldMoreThanOneMillionCopies(x))", "all x.((Book(x) & WrittenByCixinLiu(x)) -> SoldMoreThanOneMillionCopies(x))", "all x.((Book(x) & WrittenByCixinLiu(x)) -> SoldMoreThan(x,1M))", "all x.((Book(x) & WrittenByCixinLiu(x)) -> SoldMoreThanMillionCopies(x))", "all x y.((Book(x) & WrittenByCixinLiu(y)) -> SoldMoreThan(x,y))", "all x.((Book(x) & WrittenByCixinLiu(x)) -> SoldMoreThan1MCopies(x))", "all x y.((Book(x) & WrittenByCixinLiu(y)) -> SoldPlus(x,y))"]}
{"id": "folio_train_2267", "nl": "Some books that have won the Hugo Award were written by Cixin Liu.", "fol": "exists x.(HasWonAward(x,Hugoaward) & IsBook(x) & AuthoredBy(x,Cixinliu))", "prediction": ["exists x.(Book(x) & WonHugoAward(x) & WrittenByCixinLiu(x))", "exist x.(Book(x) & WonHuptoAward(x) & WrittenByCixinLiu(x))", "exists x.(Book(x) & WonHuberAward(x) -> WrittenByCixinLiu(x))", "exists x.(Book(x) & WonHugoAward(x) & WrittenByCixinLiu(x))", "exists x.(Book(x) & WonHugoAward(x)) & WrittenByCixinLiu(x))", "exists x.(Book(x) & WonHugoAward(x) & WrittenByCixinLiu(x))", "exists x.(Book(x) & WonHaga Award(x) & WrittenByCixinLiu(x))", "exists x.(Book(x) & WinsHugoAward(x) & WrittenByCixin Liu(x))", "exists x.(Book(x) & WonHugoAward(x)) -> WrittenByCixinLiu(x))", "exists x.(Book(x) & WonHugoAward(x) & WrittenByCixinLiu(x))", "exists x.(Book(x) & WonHugoAward(x)) -> WrittenByCixinLiu(x))", "exists x.(Book(x) & WonHugoAward(x) & WrittenBy(x,CixinLiu))", "exists x.(Book(x) & WonHugoAward(x)) -> WrittenByCixinLiu(x))", "exists x.(Book(x) & WonHeirloomAward(x))", "exists x.(Book(x) & HugoAwardWinning(x) & WrittenByCixinLiu(x))", "exists x.(Book(x) & GanesHugoAward(x) & WrittenByCixinLiu(x))"]}
{"id": "folio_train_2268", "nl": "All books about the future are influenced by Isaac Asimov.", "fol": "all x.((IsBook(x) & IsAboutFuture(x)) -> IsInfluencedBy(x,Isaacasimov))", "prediction": ["all x.(Book(x) -> InfluencedByIsaacAsimov(x))", "all x.(Book(x) -> InfluencedByIsaacAsimov(x))", "all x.(Book(x) -> Future(x))", "all x.(Book(x) -> InfluencedByIsaakAsimov(x))", "all x.(Book(x) -> InfluencedByIsaacAsimov(x))", "all x.(Book(x) -> InfluencedBy IsaacAsimov(x))", "all x.(Book(x) -> InfluencedByIsaacAsimov(x))", "all x.(Book(x) -> InfluencedByIsaacAsimov(x))", "all x.(Book(x) -> Influential(x))", "all x.(Book(x) -> InfluencedByIsaacAsimov(x))", "all x.((Book(x) & Asimov(x)) -> InfluencedBy(x,i,x))", "all x.((Book(x) & OnFuture(x)) -> InfluencedByIsaacAsimov(x))", "all x y.((Book(x) & Future(y)) -> InfluencedByIsaacAsimov(x,y))", "all x.(Book(x) -> InfluencedByIsaacAsimov(x))", "all x.(Book(x) -> InfluencedByIsaakAsimov(x))", "all x.((Book(x) & InfluenzadBy(x,IsaakAsimov)) -> Invents(x,Future))"]}
{"id": "folio_train_2269", "nl": "The book the Three Body Problem has sold more than 1 million copies.", "fol": "(IsBook(Threebodyproblem) & HasSoldMoreThan(Threebodyproblem,Onemillion))", "prediction": ["the ThreeBodyProblem(x) & SoldMoreThanOneMillionCopies(x))", "The three bodyproblem book has sold more than 1 million copies.", "The ThreeBodyProblemBook(x) has sold more than 1 million copies(x))", "Das Buch \u201eThreeBodyProblems\u201c hat soldMoreThanOneMillionCopies(x))", "All x.((Book(x) & TheThreeBodyProblem(x)) -> SoldMoreThanOneMillionCopies(x))", "The book, the ThreeBodyProblem(x) has sold more than 1 MillionCopies(x))", "\"(Book(x) & ThreeBodyProblem(x)) -SoldMoreThanOneMillionCopies(x))", "All x.((Book(x) & ThreeBodyProblem(x)) -> SoldMoreThanOneMillionCopies(x))", "the ThreeBodyProblem(x) & SoldMoreThanOneMillionCopies(x))", "The ThreeBodyProblem(x) & SoldMoreThan(x,y))", "(SoldMoreThan(ThreeBodyProblem))", "The ThreeBodyProblem(soldMoreThan(s) & SoldMoreThan(s,y))", "The ThreeBodyProblem(i) %SoldMoreThan(i,y) -> MoreThanOneMillionCopies(i,z))", "The ThreeBodyProblem(x) 'SoldMoreThanOneMillionCopies(x)'", "The ThreeBodyProblemNovel(x) CurrentlySoldMoreThan1MCopies(x))", "All x.((Book(x) & ThreeBodyProblem(x)) -> SoldMoreThan1MCopies(x))"]}
{"id": "folio_train_2270", "nl": "The Three Body Problem is about the future.", "fol": "IsAboutFuture(Threebodyproblem)", "prediction": ["(Future(ThreeBodyProblem) -> InvestsIn(ThreeBodyProblem))", "(ThreeBodyProblem(x) -> ConcernsFuture(x))", "All x.(ThreeBodyProblem(x) -> AboutFuture(x))", "all x.(Cry FourBodyProblem(x) -> AboutFuture(x))", "(Future(a) & ThreeBodyProblem(b))", ".(TwoBodyProblem(x))", "All x.(ThreeBodyProblem(x) -> AboutForeign(x))", "All x.(ThreeBodyProblem(x) -> AboutFuture(x))", "the ThreeBodyProblem(x) -> LookingIntoFuture(x))", "The ThreeBodyProblem(s) -> AboutFuture(s))", "\"ThreeBodyProblem(x) -> AboutFuture(x))", "all x.(ThreeBodyProblem(x) -> AboutFuture(x))", "All x.(TripleBodyProblem(x) -> AboutFuture(x))", "TheThreeBodyProblem(x) -> AboutFuture(x))", "(Future(ThreeBodyProblem) -> TheresEvening(ThreeBodyPossible))", "The ThreeBodyProblem(x) -> AboutFuture(x))"]}
{"id": "folio_train_2271", "nl": "The Three Body Problem won the Hugo Award.", "fol": "HasWonAward(Threebodyproblem,Hugoaward)", "prediction": ["The ThreeBodyProblemWasHeroes Award(threebody)", "LiesWilliams(TripleBodyProblem(x)", "The ThreeBodyProblemVariety(3Body(3))", "All x.((TripleBodyProblem(x) & HugoAward(x)) -> Wins(x))", "All x.((ThreeBodyProblem(x) & WinnerOfHugoAward(x)) -> WonBurial(x))", "(WonHugo(threeBodyProblem))", "All x.((ThreeBodyProblem(x) & HugoAward(x)) -> Won(x))", "The ThreeBodyProblemWinsHugoAward(x)", "All x.((ThreeBodyProblem(x) & HugoAward(x)) -> Won(x))", "All x.((ThreeBodyProblem(x) & HugoAward(x)) -> Won(x))", "The ThreeBodyProblemWonHugoAward(TM)", "The ThreeBodyProblemWonHugeOf(thirty)", "The ThreeBodyProblem(x) & HugoAward(x))", "The3BodyProblemWonHugoAward(13)", "All x.(TripleBodyProblem(x) -> WonHugoAward(x))", "-WonAward((TripleBodyProblem))"]}
{"id": "folio_train_2272", "nl": "The Three Body Problem was influenced by Isaac Asimov.", "fol": "IsInfluencedBy(Threebodyproblem,Isaacasimov)", "prediction": ["All x.(BodyProblem(x) -> Influential(x,IsaacAsimov))", "all x.(ThreeBodyProblem(x) -> InfluencedByIsaacAsimov(x))", "All x.((ThreeBodyProblem(x) & InfluencedByIsaakAsimov(x)) -> InfluencedBy(x,Asimov))", "Ultimately, The ThreeBodyProblem (InfluencedByIsaacAsimov)", "(InfluencedByIsaacAsimov(TheThreeBodyProblem))", "All x y.((ThreeBodyProblem(x) & IsaacAsimov(y)) -> InfluencedBy(x,y))", "The ThreeBodyProblem(x) influencedBy(x, IsaacAsimov))", "(InfluencedByIsaacAsimov(ThirdBodyProblem))", "The ThreeBodyProblem(x) influencedByIsaacAsimov(x))", "The ThreeBodyProblem(x) & InfluencedByIsaacAsimov(x))", "There is also a Problem of Body(3) influenced by IsaacAsimov(i)", "All x.((ThreeBodyProblem(x) & IsaacAspimov(x)) -> InfluencedBy(x))", "All x.((ThreeBodyProblem(x) & InfluencedByIsaacAsimov(x)) -> InfluencedByAsimov(x))", "LoneBodyProblem(x) & InfluencedByIsaacAsimov(x))", "All x.(ThreeBodyProblem(x) -> InfluencedByIsaacAsimov(x))", "All x.(TwoBodyProblem(x) -> InfluencedByIsaacAsimov(x))"]}
{"id": "folio_train_2273", "nl": "The Three Body Problem was written by Cixin Liu.", "fol": "AuthoredBy(Threebodyproblem,Cixinliu)", "prediction": ["all x.((TwoBodyProblem(x) & WrittenByCixinLiu(x)) -> WrittenBy.(CixinLiu(x)))", "The ThreeBodyProblem (writtenbyCixinLiu)", "The ThreeBodyProblem(x) \u2013 WrittenByCixinLiu(x))", "(CixinLiu,Liu,sequel) & WrittenBy(Liu,Shiller,Liu))", "In The ThreeBodyProblem(x) & WrittenByCixinLiu(x))", "The ThreeBodyProblem(CixinLiu)", "The ThreeBodyProblem(x) & WrittenByCixinLiu(x))", "The ThreeBodyProblem(x) & WrittenByCixinLiu(x))", "(WrittenByCixinLiu(x) & 3BodyProblem(x))", "The ThreeBodyProblem(x) -> & WrittenByCixinLiu(x))", "CixinLiu (Cyclist) & WrittenTheThreeBodyProblem(x))", "(WrittenByCixinLiu: ThreeBodyProblem(x))", "The ThreeBodyProblem(x) - WrittenByCixinLiu(x))", "All x.(ThreeBodyProblem(x) -> WrittenByCixinLiu(x))", "The ThreeBodyProblem(e) & WrittenByCixinLiu(e))", "On March 2nd, 2015, at 5:27 p.m."]}
{"id": "folio_train_2274", "nl": "Some students who major in computer science get up early. ", "fol": "exists x.(MajoringInComputerScience(x) & WakesUpEarly(x))", "prediction": ["exists x.(Student(x) & MajorInComputerScience(x) & CanGetUpEarly(x))", "exists x.(Student(x) & MajorsInComputerScience(x) & GetsUpEarly(x))", "exists x.(Student(x) & StudiesInComputerScience(x) & Major(x,ComputerScience) & GetsUpEarly(x))", "exists x.(Student(x) & MajorDegreeInComputerScience(x) & GetsUpEarly(x))", "exists x.(Student(x) & MajoringInComputerScience(x) & GetsUpEarly(x))", "exists x.(Student(x) & MajorsInComputerScience(x) & GetsUpEarly(x))", "exists x.(Student(x) & MajorInComputerScience(x) & GetsUpEarly(x))", "exists x.(Student(x) & MajorsInComputerScience(x) & GetsUpEarly(x))", "exists x.(Student(x) & MajorsInComputerScience(x))", "exists x.(Student(x) & MajorsInComputerScience(x) & GetsUpEarly(x))", "exists x.(Student(x) & MajoringInComputerScience(x) & GetsUpEarly(x))", "exists x.(Student(x) & MajorInComputerScience(x))", "exists x.(Student(x) & MajorInComputerScience(x) & GetsUpEarly(x))", "exists x.(Student(x) & MajorInComputerScience(x))", "exists x.(Student(x) & MajorsInComputerScience(x) & GetsUpEarly(x))", "exists x.(Student(x) & MajorsInComputerScience(x) & GetsUpEarly(x))"]}
{"id": "folio_train_2275", "nl": "If a student gets up early, then he/she will study in the morning. ", "fol": "all x.(WakesUpEarly(x) -> StudiesInTheMorning(x))", "prediction": ["all x.((Student(x) & GetsUpEarly(x)) -> WillStudyInMorning(x))", "all x.((Student(x) & GetsUpEarly(x)) -> StudiesInMorning(x))", "all x.(EarlyStudent(x) -> StudiesInMorning(x))", "all x.(BetweenThan(x) -> StudyInMorning(x))", "all x.((Student(x) & GetsUpEarly(x)) -> StudiesInHeroes(x))", "all x.((Student(x) & GetsUpEastern(x)) -> StudiesInMorning(x))", "all x.((Student(x) & GetsUpEarly(x)) -> StudiesInMorning(x))", "all x.((Student(x) & (GetsUpEarly(x) | StudyInTheMorning(x))) -> StudiesInTheMorning(x))", "all x y.((Student(x) & GetsUpEarly(x)) -> StudiesInMorning(x))", "all x.((Student(x) & GetsUpEarly(x)) -> StudiesInMorning(x))", "all x.((Student(x) & GetsUpEarly(x)) -> Study InTheMorning(x))", "all x y.((Student(x) & Students(y) & GetsUpEarly(x,y)) -> StudiesInMorning(x,y))", "all x.(GetsUpEarly(x) -> StudyInMorning(x))", "all x.((Student(x) & GetsUpEarly(x)) -> StudyInMorning(x))", "all x.((Student(x) & GetsEarly(x)) -> StudisesInMorning(x))", "all x.((Student(x) & GetsUpEarly(x)) -> StudiesInMorning(x))"]}
{"id": "folio_train_2276", "nl": "All students studying in the morning are good at time management. ", "fol": "all x.(StudiesInTheMorning(x) -> HasGoodTimeManagementSkills(x))", "prediction": ["all x.(Student(x) -> (StudiesInMorning(x) & GoodAtTimeManagement(x)))", "all x y.((Student(x) & StudentsStudyingInAsMorning(x,y)) -> GoodTimeManagement(x))", "all x.((Student(x) & StudyingInMorning(x)) -> GoodAtTimeManagement(x))", "all x.((Student(x) & StudyingInMorning(x)) -> GoodAtTimeManagement(x))", "all x.((Student(x) & StudyingInMorning(x)) -> GoodAtTimeManagement(x))", "all x.((Student(x) & StudyingInMorning(x)) -> GoodTimeMeasurement(x))", "all x.(Student(x) -> GoodTimeManagement(x))", "all x.((Student(x) & StudiesInMorning(x)) -> GoodAtTimeManagement(x))", "all x.((Student(x) & StudiesInMorning(x)) -> GoodAtTimeManagement(x))", "all x.(Student(x) -> GoodAtTimeManagement(x))", "all x.((Student(x) & StudiesInMorning(x)) -> GoodAtTimeManagement(x))", "all x.((Student(x) & StudyingInMonday(x)) -> GoodAtTimeManagement(x))", "all x.((Student(x) & StudyingInMorning(x)) -> GreatTimeManagement(x))", "all x.((Student(x) & StudyingInTheMorning(x)) -> GoodAtTimeManagement(x))", "all x.(Student(x) -> GoodAtTimeManagement(x))", "all x.((Student(x) & StudyingInMorning(x)) -> GoodAtTimeManagement(x))"]}
{"id": "folio_train_2277", "nl": "All students good at time management are popular among students. ", "fol": "all x.(HasGoodTimeManagementSkills(x) -> IsPopularAmongStudents(x))", "prediction": ["all x.(GoodTimeManagement(x) -> PopularAmongStudents(x))", "all x.(GoodTimeManagementStudent(x) -> PopularAmongStudents(x))", "all x.((Student(x) & GoodAtTimeManagement(x)) -> PopularAmongStudents(x))", "all x.(GoodTimeManagementStudent(x) -> PopularAmongStudents(x))", "all x.((Student(x) & GoodTimeManagement(x)) -> PopularAmongStudents(x))", "all x.((Student(x) & GoodAtTimeManagement(x)) -> PopularAmongStudents(x))", "all x.((Student(x) & GoodAtTimeManagement(x)) -> Popular(x))", "all x.(GoodAtTimeManagementStudent(x) -> PopularAmongStudents(x))", "all x.((Student(x) & GoodAtTimeManagement(x)) -> PopularAmongStudents(x))", "all x.((Student(x) & GoodAtTimeManagement(x)) -> PopularAmongStudents(x))", "all x.((Student(x) & GoodAtTimeManagement(x)) -> PopularAmongStudents(x))", "all x.((Student(x) & GoodAtTimeManagement(x)) -> PopularAmongStudents(x))", "all x.((Student(x) & GoodAtTimeManagement(x)) -> PopularAmongStudents(x))", "all x.((Student(x) & GoodAtTimeManagement(x)) -> PopularAmongStudents(x))", "all x.((Student(x) & GoodAtTimeManagement(x)) -> PopularAmongStudents(x))", "all x.(GoodAtTimeManagement(x) -> PopularAmongStudents(x))"]}
{"id": "folio_train_2278", "nl": "James is not popular among students. ", "fol": "-IsPopularAmongStudents(James)", "prediction": ["(-PopularAmongStudents(Jimmy)", "(-PopularAmongStudents(James))", "James ist nicht populousAmongStudents(James)", "(-PopularAmongStudents(James) & -PopularAmongStudents(James))", "James is notpopularAmongStudents(James)", "-PopularAmongStudents(James)", "-PopularAmongStudents(James)", "none.(James) -> -PopularAmongStudents(james))", "James has not been popular among students.", "James este -PopularAmongStudents(James)", "James is notpopularAmongStudents(James)", "(-PopularAmongStudents(James)", "-PopularAmongStudents(James)", "-PopularAmongStudents(James,x)", "James is notpopularAmongStudents(James)", "this student(James)"]}
{"id": "folio_train_2279", "nl": "James majors in computer science.", "fol": "MajorsInComputerScience(James)", "prediction": ["all x y.((James(x) & ComputerScience(y)) -> MajorsIn(x,y))", "all x.(James(x) -> MajorsInComputerScience(x))", "all x.(James(x) -> MajorsInComputerScience(x))", "all x.(James(x) -> MajorsInComputerScience(x))", "all x.(James(x) -> MajorsInComputerScience(x))", "all x.(James(x) -> MajorsInComputerScience(x))", "all x.(JamesMajorsInComputerScience(x) -> MajorsInComputerScience(x))", "all x.(James(x) -> MajorsInComputerScience(x))", "all x.(James(x) -> MajorsInComputerScience(x))", "all x.(James(x) -> MajorsInComputerScience(x))", "all x.(James(x) -> MajorsInComputerScience(x))", "all x.(James(x) -> MajorsInComputerScience(x))", "all x.(James(x) -> MajorsInComputerScience(x))", "all x.(James(x) -> MajorsInComputerScience(x))", "all x.(James(x) -> MajorsInComputerScience(x))", "all x.(James(x) -> MajorsInComputerScience(x))"]}
{"id": "folio_train_2280", "nl": "James majors in computer science and gets up early.", "fol": "(MajorsInComputerScience(James) & WakesUpEarly(James))", "prediction": ["all x.((James(x) & MajorInComputerScience(x)) -> GetsUpEarly(x))", "(MajorsInComputerScience(Jimmy) & GetsUpEarly(Jimmy))", "all x.((James(x) & MajorsInComputerScience(x)) -> GetsUpEarly(x))", "all x.(James(x) -> (majorsInComputerScience(x) & GetsUpEarly(x)))", "all x.((James(x) & MajorsInComputerScience(x)) -> GetsUpEarly(x))", "(MajorsInComputerScience(James) & GetsUpEarly(James))", "all x.((James(x) & MajorsInComputerScience(x)) -> GetsUpEarly(x))", "all x.(James(x) -> (MajorsInComputerScience(x) & GetsUpEarly(x)))", "all x.(James(x) -> (MajorsInComputerScience(x) & GetsUpEarly(x)))", "all x.(James(x) -> (MajorsInComputerScience(x) & GetsUpEarly(x)))", "all x.(James(x) -> (MajorsInComputerScience(x) & GetsUpEarly(x)))", "James MajorsInComputerScienceAndGetsUpEarly(James)", "all x.((James(x) & MajorsInComputerScience(x)) -> GetsUpEarly(x))", "all x.(James(x) -> (MaintainsInComputerScience(x) & GetsUpEarly(x)))", "all x.(James(x) -> (majorsInComputerScience(x) & GetsUpEarly(x)))", "(MajorsInComputerScience(James,ComputerScience) & GetsUpEarly(Jame,ComputerScience))"]}
{"id": "folio_train_2281", "nl": "If James gets up early, then he majors in computer science.", "fol": "(WakesUpEarly(James) -> MajoringInComputerScience(James))", "prediction": ["all x.((James(x) & TookUpEarly(x)) -> MajorsInComputerScience(x))", "all x.((Jim(x) & GetsUpEarly(x)) -> MajorsInComputerScience(x))", "all x.((James(x) & GetsUpEarly(x)) -> MajorsInComputerScience(x))", "all x.((James(x) & UpEarly(x)) -> MajorsInComputerScience(x))", "all x.((James(x) & GetsUpEarly(x)) -> MajorInComputerScience(x))", "all x.((JamesGirlsEarly(x) & MajorsInComputerScience(x)) -> GetsUpEarly(x))", "all x.((Jimmy(x) & GetsUpEarly(x)) -> MajorsInComputerScience(x))", "all x.((James(x) & GetsUpEarly(x)) -> MajorInComputerScience(x))", "all x.((James(x) & GetsUpEarly(x)) -> MajorsInComputerScience(x))", "all x.((James(x) & MoogsEarly(x)) -> MajorsInComputerScience(x))", "Ideally, James takes up early(James).", "all x.((Jame(x) & GetsUpEarly(x)) -> MajorsInComputerScience(x))", "all x.((James(x) & GetsUpEarly(x)) -> MajorsInComputerScience(x))", "all x.((GivesUpEarly(x) & MajorsInComputerScience(x)) -> JamesMatesInComputerScience(x))", "all x.((JamesGivesUpEarly(x)) -> MajorsInComputerScience(x))", "all x.((James(x) & GetsUpEarly(x)) -> MajorsInComputerScience(x))"]}
{"id": "folio_train_2282", "nl": "There is no dog on the roof.", "fol": "-exists x.(IsDog(x) & IsOnRoof(x))", "prediction": ["(-DogOnRoof(x))", "-DogOnRoof(!", "-DogOnRoof(-)", "-DogOnRoof(x)", "is no dog on roof.", "-DogOnRoof(x)", "exists x.(Dog(x) & -OnRoof(x))", "no dog on the roof.", "-DogOnRoof(x)", "-DogOnRoofing(x)", "-DogOnRoofing(x)", "(-DogOnRoof(i))", "gibt es keine DogOnRoof(e)", "-DogOnRoof(x)", "exists x.(Dog(x) & -OnRoof(x))", "-DogOnRoof(x)"]}
{"id": "folio_train_2283", "nl": "If there is a dog on the roof something went wrong.", "fol": "all x.exists y.((IsDog(x) & IsOnRoof(x)) -> SomethingWentWrong(y))", "prediction": ["all x.((Dog(x) & OnRoof(x)) -> GoesSince(x))", "all x y.((Dog(x) & Roof(y)) -> Wrong(x))", "all x.((Dog(x) & OnRoof(x)) -> SomethingGoesSince(x))", "all x.(DogOnRoof(x) -> GoesSorry(x))", "all x.(DogOnRoof(x) -> SomethingGoesSrong(x))", "all x.((Dog(x) & OnRoof(x)) -> GoesSort(x))", "all x.(Dog(x) -> SeenOnRoof(x))", "all x.(DogOnRoof(x) -> SomethingGoesSorious(x))", "all x.((Dog(x) & OnRoof(x)) -> SomethingGoesSweet(x))", "all x.(Dog(x) -> RoofTopSurfing(x))", "all x y.((Dog(x) & Rooftop(y)) -> GoesSince(x,y))", "all x.(Dog(x) -> OnRoofStatus(x))", "all x.(Dog(x) -> GoesSince(x))", "all x.(DogOnRoad(x) -> (GoesSorry(x) & GotSorry(x)))", "all x.(DogOnRoof(x) -> GoesSince(x))", "all x.(Dog(x) -> GoesSincer(x))"]}
{"id": "folio_train_2284", "nl": "Something went wrong.", "fol": "exists x.SomethingWentWrong(x)", "prediction": ["-GoesSick(x)", "all x.(GoesSick(x) -> SomethingGoesStill(x))", "Exists x.(Position(x) & GoesStill(x))", "exists x.(GoedSyncrony(x) & Person(y))", "EtwasGoesSince(x)", "SeenBlooding(x)", "PornGoesSorry(l)", "(GoesSick(x) -> SomethingGoesNoGo.))", "(GoesSince(s) -> SomethingGoesStorm(s))", "(GoesSince(something) -> SomethingGoesStorm(something)))", "-as-is-told(a) & SomethingGoesSmoky(a))", "wasSinceIsItAllInOne(i)", "Existant(x) & GoesSince(x))", "EinigesGoesSince(x)", "irgendwann sank.", "In the middle."]}
{"id": "folio_train_2285", "nl": "Elephantopus is a genus of perennial plants in the daisy family.", "fol": "all x.((GenusElephantopus(x) -> IsGenusOf(x,Perennialplants)) & BelongsToFamily(x,Daisyfamily))", "prediction": ["all x.(Elephantopus(x) -> PerennialPlantGenus(x))", "all x y.((Elephantopus(x) & PerennialPlant(y) & InDaisyFamily(x)) -> (GenusOf(x,y) & InFamily(x,y)))", "all x.(Elephantopus(x) -> (GenusOfPerennialPlants(x) & DaisyFamily(x)))", "all x.(Elephantopus(x) -> (GenusOfPerennialPlants(x) & InDaisyFamily(x)))", "(GenusOfPerennialPlants(Elephantopus) & InDaisyFamily(Elephantopus))", "all x.(Elephantopus(x) -> (GenusOfPerennialPlants(x) & DaisyFamily(x)))", "all x.(Elephantopus(x) -> (GenusOfPerennialPlants(x) & InDaisyFamily(x)))", "all x.(Elephantopus(x) -> (GenusOfPerennialPlants(x) & DaisyFamily(x)))", "all x.(ElephantOpus(x) -> (GenusOfPerennialPlants(x) & InDaisyFamily(x)))", "all x y.((Elephantopus(x) & PerennialPlant(y)) -> InDaisyFamily(x))", "all x.(Aeonopus(x) -> (PerennialPlantGenus(x) & DaisyFamily(x)))", "all x.(Elephantopus(x) -> (PerennialPlant(x) & LocatedInDaisyFamily(x)))", "all x y.((Elephantopus(x) & DaisyFamily(y)) -> (GenusOfPerennialPlants(x,y)))", "all x y.((Elephantopus(x) & DaisyFamily(y)) -> Species(x,y))", "all x.(Elephantopus(x) -> (GenusOfPerennialPlants(x) & InDaisyFamily(x)))", "all x.(Elephantopus(x) -> (GenusOfPerennialPlants(x) & InDaisyFamily(x)))"]}
{"id": "folio_train_2286", "nl": "Elephantopus is widespread over much of Africa, southern Asia, Australia, and the Americas.", "fol": "all x.((GenusElephantopus(x) -> WidespreadInRegion(x,Africa)) & WidespreadInRegion(x,Southernasia) & WidespreadInRegion(x,Australia) & WidespreadInRegion(x,Americas))", "prediction": ["all x.(Elephantopus(x) -> (WidespreadOverMostOfAfrica(x) & SouthAsia(x) & Australia(x) & Americas(x)))", "all x.(Elephantopus(x) -> (WidespreadOverAfrica,SouthernAsia AndAustralia,Americas)))", "all x.(Elleptopus(x) -> (WidespreadOver(x,Africa) & SouthernAsia(x) & Across(x,Australia) & Over(x,Americas)))", "Elephantopus & WidespreadOver(y) & Africa(y) & SouthernAsia(z) & Australia(z) & Americas(ak))).", "all x.(Elephantopus(x) -> (WidespreadOverMostOfAfrica(x) | WidespreadOverSouthAsia(x) | WidespreadOverAustralia(x) | WidespreadOverTheAmericas(x)))", "all x.(Elephantopus(x) -> (Widespread(x,(Africa) | SouthernAsia(x) | Australia(x) | Americas(x))))", "all x.(Eracleopus(x) -> (WidespreadOverAfrica(x) | WidespreadOverSouthernAsia(x) | WidespreadOverAustralia(x) | WidespreadOverAsias(x)))", "all x.(Elephantopus(x) -> (WidespreadOverAfrica(x) & SpreadsOverSouthAsia(x) & SpreadsOverAustralia(x) & SpreadsOverAmericas(x)))", "(WidespreadOver(Elephantopus,Africa,SouthernAsia,Australasia,Americas))", "(WidespreadOverAfrica(Elephantopus) & WidespreadOverSouthAsia(Elephantopus) & WidespreadOverAmericas(Elephantopus))", "all x.(Elephantopus(x) -> (exists y.(Africa(y) | SouthernAsia(y) | Australia(y) | Americas(y)) & WidespreadOver(x,y)))", "all x.(Elleptopus(x) comMostArid(x) -> (Area(x) & PartOf(x,Africa) & PartOf(x,SouthAsia) & PartOf(x,Australia) & PartOf(x,America)))", "all x y z.((ElephantOpus(x) & Africa(y) & SouthernAsia(z) & Australia(y)) -> Widespread(x))", "all x.(Elephantopus(x) -> (RangeAround(x,Africa) | RangeAtom(x,Southasia,Asia, Australia) | RangeAtom(x,Americas)))", "All x.(Elexander(x) -> (Widespread(x,Africa) & SouthAsia(x) & Australia(x) & Americas(x)))", "all x.(Elephantopus(x) -> (WidespreadOverAfrica(x) | WidespreadOverSouthAsia(x) | WidespreadOverAustralia(x) | WidespreadOverAmericas(x)))"]}
{"id": "folio_train_2287", "nl": "Several species of Elephantopus are native to the southeastern United States.", "fol": "exists x.(GenusElephantopus(x) & IsNativeToRegion(x,Southeasternunitedstates))", "prediction": ["exists x.(Elephantopus(x) & NativeToSoutheasternUnitedStates(x))", "exists x.(ElephantopusThanSoutheastern(x) & NativeToAlice(x))", "exists x.(Elephantopus(x) & NativeToSoutheasternStates(x))", "exists x.(Elephantopus(x) & NativeIn(x,southeasternUnitedStates))", "exists x.(RangeOfElephantopus(x) & NativeToSoutheasternUnitedStates(x))", "exists x.(Elephantopus(x) & NativeToSoutheasternUS(x))", "exists x.(ElephantopusSpecies(x) & NativeToSoutheasternUnitedStates(x))", "VariousSeasonalSpeciesOfElephantopus(x) -> NativeToSoutheasternUnitedStates(x))", "exists x y.(Species(x) & Elephantopus(y) & NativeTo(x,southeasternU.S.)", "exists x.(Elephantopus(x) & NativeInSoutheasternStates(x))", "exists x.(Elephantopus(x) & NativeToSoutheasternU.S.S.(Elephantopus))", "exists x.(Elephantopus(x) & NativeToSoutheasternUS(x))", "SeveralSpeciesOfElephantopusNativeInSoutheasternUnitedStates(x)", "exists x.(Elephantopus(x) & NativeToSoutheasternUnitedStates(x))", "exists x.(Elephantopus(x) & OriginatesTo(x,SoutheasternUnitedStates))", "exists x y.(Species(x) & Elephantopus(y) & NativeToSoutheasternUnitedStates(x,y))"]}
{"id": "folio_train_2288", "nl": "Elephantopus scaber is a traditional medicine.", "fol": "all x.(GenusElephantopusScaber(x) -> UsedAsTraditionalMedicine(x))", "prediction": ["All x.(ElephantopusScaber(x) -> TraditionalMedicine(x))", "(TraditionalMedicine(elephantopusscaber)", "ElephantopusScaber is a TraditionalMedicine(e)", "all x.((ElephantopusScaber(x) & TraditionalMedicine(x)) -> TraditionallyMeditated(x))", "AllergicMuseum(ElephantopusScaber)", "all x.((ElephantopusScaber(x) & TraditionalMedicine(x)) -> TraditionalMedicine(x))", "all x.(ElephantopusScaber(x) -> TraditionalMedicine(x))", "it's a traditional medicine (CropicalMedicine(ElephantopusScaber) & TraditionalMedicine(ElephantopusScaber))", "all x.(ElephantopusScaber(x) -> TraditionalMedicine(x))", "all x.((ElephantopusScaber(x) & TraditionalMedicine(x)) -> StructuralMedicine(x))", "all x.(ElephantopusScaberDoctor(x) -> TraditionalMedicine(x))", "(TraditionalMedicine(ElephantopusScaber)", "TraditionallyMedicine(ElephantopusScaber)", "(TraditonalMedicine(ElephantopusScaber)", "all x y.((ElephantopusScaber(x) & TraditionalMedicine(y)) -> Scaber(x))", "(TraditionalMedicine(ElephantopusScaber)"]}
{"id": "folio_train_2289", "nl": "Elephantopus is widespread over much of Australia and Southern Asia.", "fol": "all x.((GenusElephantopus(x) -> WidespreadInRegion(x,Australia)) & WidespreadInRegion(x,Southernasia))", "prediction": ["(Widespread(Elephanopus,Australia) & Widespread(Elephantopus,SouthernAsia))", "all x.(Elephantopus(x) -> (WidespreadOverAustraliaAndSouthernAsia(x)))", "all x.(Elephantopus(x) -> (WidelyOverAustralia(x) & WidelyOverSouthAsia(x)))", "all x.(Elephantopus(x) -> (WidespreadOverAbout(x,Australia) & WorldwideOver(x,SouthernAsia)))", "All x.(Elephantopus(x) -> Widespread(x))", "all x.(Elephantopus(x) -> WidespreadOverMuchOfAustraliaAndSouthernAsia(x))", "All x.(Elephantopus(x) -> (WidespreadOver(x, Australia) & WidespreadOver(x,SouthAsia)))", "all x y.((Elephantopus(x) & (Australien(y) | SouthernAsia(y))) -> Widespread(x,y))", "all x.(Elephantopus(x) -> (WidespreadOver(x,Australia) & WidespreadOver(x,SouthernAsia)))", "all x.(Elephantopus(x) -> (WidespreadOver(x,Australia) & WidespreadOver(x,SouthernAsia)))", "all x.(Elephantopus(x) -> (WidespreadOverMuchOfAustralienAndSouthernAsia(x)))", "all x y.((Elephantopus(x) & Australia(y)) -> WidespreadOverSouthernAsia(x,y))", "all x.((Elephantopus(x) & Australia(x) & Australia(x) & SouthAsia(x)) -> Widespread(x))", "all x.(Elephantopus(x) -> (Widespread(x,OfAltasy) & Across(x,Asia)))", "all x y.((Elephantopus(x) & Australia(y)) -> Widespread(x,y))", "all x.(Elentopus(x) -> (WidespreadOverMostOfAustralia(x) & WidespreadOverSouthAsia(x)))"]}
{"id": "folio_train_2290", "nl": "No Elephantopus is native to the southeastern United States.", "fol": "-exists x.(GenusElephantopus(x) & IsNativeToRegion(x,Southeasternunitedstates))", "prediction": ["-exists x.(Elephantopus(x) & NativeToSoutheasternUnitedStates(x))", "all x.((Elephantopus(x) & -NativeToSoutheastern(x)) -> NativeToSoutheastern(x))", "-exists x.(Elephantopus(x) & NativeToSoutheasternUnitedStates(x))", "no ElephantopusNativeToSoutheasternUnitedStates(Elephant)", "-exists x.(Elephantopus(x) & NativeToSoutheasternUnitedStates(x))", "\u2013 NativeToSoutheasternUnitedStates(elementopus)", "-exists x.(Elephantopus(x) & NativeTo(x,southeasternUS))", "-exists x.(Elephantopus(x) & NativeTo(x,outheasternUnitedStates))", "-exists x.(Ellipteopus(x) & NativeTo(x,southeasternUS))", "-exists x.(Elephantopus(x) & NativeToSoutheasternUnitedStates(x))", "-exists x.(Elephantopus(x) & NativeToSoutheasternUS(x))", "-exists x.(Elephantopus(x) & NativeToSoutheastern(x))", "-exists x.(Elephantopus(x) & NativeToSoutheasternUnitedStates(x))", "-exists x.(Elephantopus(x) & NativeToSoutheasternUnitedStates(x))", "-exists x.(Elephantopus(x) & NativeToSoutheasternUnitedStates(x))", "all x.(Elephantopus(x) -> NativeToSoutheasternStates(x))"]}
{"id": "folio_train_2291", "nl": "Elephantopus is a traditional medicine.", "fol": "all x.(GenusElephantopus(x) -> UsedAsTraditionalMedicine(x))", "prediction": ["all x.(Elephantopus(x) -> TraditionalMedicine(x))", "all x.(Elephanteopus(x) -> TraditionalMedicine(x))", "all x.(Elephantopus(x) -> TraditionalMedicine(x))", "this traditional medicine.", "all x y z.((Elephantopus(x) & TraditionalMedicine(y) & (Medicine(z) | TraditionalMedicine(z)))) -> TraditionalMedicine(x,y,z))", "all x.(Elephantopus(x) -> TraditionalMedicine(x))", "all x.(Elephantopus(x) -> TraditionalMedicine(x))", "TraditionalMedicine(Elephantopus)", "elephantopus (traditionalmedicine)", "all x.(Elephantopus(x) -> TraditionalMedicine(x))", "all x.(Elephantopus(x) -> TraditionalMedicine(x))", "all x.(Elephantopus(x) -> TraditionalMedicine(x))", "all x.(Elephantopus(x) -> TraditionalMedicine(x))", "Elephantopus is a TraditionalMedicine(elephant)", "all x.(Elengopus(x) -> TraditionalMedicine(x))", "ALL x.(Elephantopus(x) -> TraditionalMedicine(x))"]}
{"id": "folio_train_2292", "nl": "All Yale dormitories are located on York Street. ", "fol": "all x.(IsYaleDormitory(x) -> LocatedOnYorkStreet(x))", "prediction": ["all x.(Domestic(x) -> ThesisAtYorkStreet(x))", "all x y.((Domhouse(x) & Yale(y)) -> LocatedOn(x,Y))", "all x.(Yale(x) -> LocalizedOnYorkStreet(x))", "all x.(Duomo(x) -> YorkStreet(x))", "all x.(YaleHouse(x) -> LeastWorx(x,YorkStreet))", "all x.(Domestic(x) -> (LocatedOnYorkStreet(x) & Yale(y)))", "all x.(YaleDomhouse(x) -> LocatedOnYorkStreet(x))", "all x.(UrbanDormo(x) -> YorkStreet(x))", "all x.(Yale(x) -> (SituatedOnYorkStreet(x) & YaleDomhouse(x)))", "all x.(Domestic(x) -> LocatedOnYorkStreet(x))", "all x.(Yale(x) -> (LocatedOnYorkStreet(x) & LocatedOnYorkStreet(x)))", "all x.((Domestic(x) & YaleDomestic(x)) -> LocatedOnYorkStreet(x))", "all x.(YaleDomhouse(x) -> YorkStreet(x))", "all x.(YaleDomestic(x) -> YorkStreet(x))", "all x.(Domhouse(x) -> LocatedOnYorkStreet(x))", "all x.(Dormo(x) -> YaleDombery(x))"]}
{"id": "folio_train_2293", "nl": "All buildings managed by Yale Housing are dormitories. ", "fol": "all x.(IsManagedByYaleHousing(x) -> IsYaleDormitory(x))", "prediction": ["all x.((Building(x) & ManagedByYaleHousing(x)) -> Dormium(x))", "all x.(Governance(x) -> Domicile(x))", "all x.((Building(x) & ManagedByYaleHousing(x)) -> Dormitory(x))", "all x.((Building(x) & ManagedByYaleHousing(x)) -> Dormitory(x))", "all x.((Building(x) & ManagedByYaleHousing(x)) -> Dormatorium(x))", "all x.(Building(x) & ManagedByYaleHousing(x)) -> Dormitory(x))", "all x.((Building(x) & ManagedByYaleHousing(x)) -> Dorm(x))", "all x.((Building(x) & ManagedByYaleHousing(x)) -> Dormae(x))", "all x.((Building(x) & ManagedByYaleHousing(x)) -> Dorma(x))", "all x.((Building(x) & YaleHousing(x)) -> Dormour(x))", "all x.((Building(x) & YaleHousingManager(x)) -> Dormitory(x))", "all x.((Building(x) & ManagedByYaleHousing(x)) -> Dormitory(x))", "all x y.((Building(x) & ManagingVanishHousing(x) & YaleHousing(y)) -> Dormitory(x))", "all x.((Building(x) & ManagedByYaleHousing(x)) -> Dorma(x))", "all x.((Building(x) & ManagedByYaleHousing(x)) -> Dorms(x))", "all x.((Building(x) & ManagedByYaleHousing(x)) -> Dormitory(x))"]}
{"id": "folio_train_2294", "nl": "All buildings operated by Yale Housing staff are managed by Yale Housing. ", "fol": "all x.(IsOperatedByYaleHousingStaff(x) -> IsManagedByYaleHousing(x))", "prediction": ["all x y.((Building(x) & YaleHostling(y)) -> ManagedBy(x,y))", "all x.((Building(x) & OperatedByYaleHousekeepingStaff(x)) -> ManagedByYaleHousehousing(x))", "all x y.((Building(x) & YaleHousingStaff(y)) -> ManagedBy(x,y))", "all x y.((Building(x) & YaleHousing(y) & OperatedByStaff(x,y)) -> ManagedByY YaleHousing(x))", "all x.((Building(x) & OperatedByYaleHousingTeam(x)) -> ManagedByYaleHousing(x))", "all x.((Building(x) & OperatedByYaleHousingStaff(x)) -> ManagedByYaleHousing(x))", "all x y.((Building(x) & YaleHousing(y)) -> ManagedBy(x,y))", "all x.((Building(x) & OperatedByYaleHousingStaff(x)) -> ManagedByYaleHousing(x))", "all x.((Building(x) & OperatedByYaleHousingStaff(x)) -> ManagedByYaleHousing(x))", "all x.(BearingHasHousing(x) -> ManagedByYaleHousing(x))", "all x.((Building(x) & OperatedByYaleHousingStaff(x)) -> ManagedByYaleHousing(x))", "all x.((Building(x) & OperatedByYoungHousingStaff(x)) -> ManagedByYealeyHousing(x))", "all x.((Building(x) & OperatedByYaleHousingStaff(x)) -> ManagedByYaleHousing(x))", "all x.((Buildings(x) & OperatedByYaleHousekeepingStaff(x)) -> ManagedByYaleHousekeeping(x))", "all x.(WayConstruction(x) -> exists y.(Call(y) & OccupiedBy(x,y) & HandledBy(y,x)))", "all x.(All(x) -> OperatedByChanelHousingStaff(x))"]}
{"id": "folio_train_2295", "nl": "No buildings open to students are established after 1800. ", "fol": "all x.(IsOpenToStudents(x) -> -EstablishedPost1800(x))", "prediction": ["all x.((Building(x) & OpenToStudents(x)) -> -EstablishedAfter(x,1801))", "-exists x.(Building(x) & OpenToStudents(x) & After1800(x))", "all x y.((Building(x) & OpenToStudents(x,y) & BuiltAfter1801)) -> -EstablishedAfter1802(x,y))", "(NoBuildingOpenToStudents(e) after1800(e))", "-exists x.(Building(x) & OpenToStudents(x))", "all x.((EssentialBuilding(x) & OpenToStudents(x)) -> -establishedAfter1800(x))", "-exists x.(Building(x) & OpenToStudents(x))", "all x.((Building(x) & OpenToStudents(x)) -> -EstablishedAfter1800(x))", "all x.((Building(x) & OpenToStudents(x)) -> -EstablishedAfter1800(x))", "all x.(Building(x) -> OpenToStudentsAfter1800(x))", "-exists x.(Building(x) & OpenToStudents(x) & After(x,1800))", "all x.(OpenToStudents(x) -> (NoBuildings(x) & IsErectedAfter(x,1800)))", "all x.((Building(x) & OpenToStudents(x) & -establishedAfter1800(x)) -> -OpenToStudents(x))", "all x.(OpenToStudents(x) -> -EstablishedAfter1700(x))", "all x.((Building(x) & OpenToStudents(x)) -> -EstablishedAfter(x,y))", "all x.((Building(x) & OpenToStudents(x)) -> -establishedAfter1800(x))"]}
{"id": "folio_train_2296", "nl": "All buildings located on York Street are open to students. ", "fol": "all x.(LocatedOnYorkStreet(x) -> IsOpenToStudents(x))", "prediction": ["all x.((Building(x) & YorkStreet(x)) -> OpenToStudents(x))", "all x.((Building(x) & LocatedOnYorkStreet(x)) -> OpenToStudents(x))", "all x.((Building(x) & LocatedOnYorkStreet(x)) -> OpenToStudents(x))", "all x.((Burn(x) & LocatedOnYorkStreet(x)) -> OpenToStudents(x))", "all x y.((Building(x) & LocatedOnYorkStreet(x)) -> OpenToStudents(x))", "all x.((Building(x) & LocatedOnYorkStreet(x)) -> OpenToStudents(x))", "all x.((Building(x) & LocatedOnYorkStreet(x) & OpenToStudents(x)) -> OpenToStudents(x))", "all x.((Building(x) & LocatedOnYorkStreet(x)) -> OpenToStudents(x))", "all x.((Building(x) & OnYorkStreet(x)) -> OpenToStudents(x))", "all x.((Building(x) & LocatedOnYorkStreet(x)) -> OpenToStudents(x))", "all x.((Building(x) & LocatedOnYorkStreet(x)) -> OpenToStudents(x))", "all x y.((Building(x) & City(y) & YorkStreet(x)) -> OpenToStudents(x,y))", "all x.((Building(x) & OnYorkStreet(x)) -> OpenToStudents(x))", "all x.((Building(x) & locatedOnYorkStreet(x)) -> OpenToStudents(x))", "all x.(Trust(x,y) -> OpenToStudents(y))", "all x.((Building(x) & LocatedOnYorkStreet(x)) -> OpenToStudents(x))"]}
{"id": "folio_train_2297", "nl": "Harkness is either a building operated by Yale Housing staff or located on York Street. ", "fol": "((IsOperatedByYaleHousingStaff(Harkness) & -LocatedOnYorkStreet(Harkness)) | (-IsOperatedByYaleHousingStaff(Harkness) & LocatedOnYorkStreet(Harkness)))", "prediction": ["all x.(Harkness(x) -> (OperatedByYaleHousingStaff(x) | LocatedOnYorkStreet(x)))", "all x.(Harkness(x) -> (OperatedByYaleHousingStaff(x) | LocatedOnYorkStreet(x)))", "all x.(Harkness(x) -> (OperatedByYaleHousingStaff(x) | LocatedOnYorkStreet(x)))", "all x.(Harkness(x) -> (OperatedByYaleHousingStaff(x) | LocationOnYorkStreet(x)))", "all x.(Harkness(x) -> (BuildingOperatedByYaleHousingStaff(x) | LocatedOnYorkStreet(x)))", "ALL x.(Harkness(x) -> (OperatedByYamaHousingStaff(x) | LocatedOnYorkStreet(x)))", "all x.(HARKness(x) -> (exists y.(WaveHousehold(y) | YorkStreet(z) & OperatedBy(x,y))))", "all x.(Harkness(x) -> (OperatedByYaleHousingStaff(x) | LocatedOnYorkStreet(x)))", "all x.(Harkness(x) -> (OperatedByYaleHousingStaff(x) | LocatedOnYorkStreet(x)))", "all x.(Harkness(x) -> (OperatedBy(x,y) | LocatedOnYorkStreet(x,y)))", "all x.(Harkness(x) -> (OperatedByYachtaHousingStaff(x) | LyingOnYorkStreet(x)))", "all x.(Harkness(x) -> (OperatedByYaleHousingStaff(x) | LocatedOnYorkStreet(x)))", "all x.(Harkness(x) -> (OperatedByYamaHousekeepingStaff(x) | LocatedOnYorkStreet(x)))", "all x.(Harkness(x) -> (exists y.(Building(y) & OperatedByYaleHousingStaff(x,y)) | exists z.(Building(z,y) & LocatedOnYorkStreet(z)))))", "all x.(Harkness(x) -> (OperatedByYaleHousingStaff(x) | LocatedOnYorkStreet(x)))", "all x.(Harkness(x) -> ((Building(x) & OperatedByYaleHousingStaff(x)) | FoundOnYorkStreet(x))))"]}
{"id": "folio_train_2298", "nl": "Harkness is a Yale dormitory.", "fol": "IsYaleDormitory(Harkness)", "prediction": ["HarknessDormium(Harkness)", "all x.(Harkness(x) -> YaleDomestic(x))", "Harkness is YaleDomby(x)", "-YaleDomestic(Harkness)", "Harkness is YaleDoorby(e)", "all x.(Harkness(x) -> YaleDormory(x))", "Harkness is a YaleDomicile(Harkness)", "all x.(Harkness(x) -> YaleDormby(x))", "HarknessDorm(w) & YaleDomsy(x)", "Harkness(Hargness) -> YaleDomby(Harkness))", "Harkness(h) & YaleDomby(h))", "Harkness(Harshness) -> YaleDoming(Harkness))", "Harkness Dormitory(Harkness)", "(Primary(Harkness) & YaleDomby(Harkness))", "Harkness (YaleDorm(y) & YaleDorm(y))", "Harkness is YaleDormry(Harkness)"]}
{"id": "folio_train_2299", "nl": "Harkness is not a Yale dormitory.", "fol": "-IsYaleDormitory(Harkness)", "prediction": ["-YaleHouse(Harkness)", "(-YamahaDormium(Harkness))", "Harkness (nonYaleDom(y) & YaleDom(y))", "-YaleDomary(Harkness)", "(-YaleDorm(Harkness))", "Harkness is not YaleDormium(Harkness)", "-YaleDomby(Harkness)", "-YaleDorm.", "-YaleDomway(harkness)", "Harkness is -YaleDorm(y)", "all x.(Harkness(x) -> -YaleDomhouse(x))", "Harkness is a YaleDormancy.", "not YaleDomby(Harkness)", "-YaleDomesty(Harkness)", "Harkness - YaleDormary.", "-YaleDormhouse(Harkness)"]}
{"id": "folio_train_2300", "nl": "Harkness is established after 1800.", "fol": "EstablishedPost1800(Harkness)", "prediction": ["all x.(Harkness(x) -> EstablishedAfter(x,1891))", "The Harkness is established after 1800.", "All x.(Harkness(x) -> EstablishedAfter(x,1700))", "(EstablishedAfter(Harkness,Around1800))", "all x.(Harkness(x) -> EstablishedAfter(x,1800))", "Harkness(Harkness) - EstablishedAfter1800(Harkness))", "all x.(Harkness(x) -> EstablishedAfter1800(x))", "All x.(Harkness(x) -> EstablishedAfter1700(x))", "Harkness is established after 1800.", "Harkness EstablishedAfter1800.", "Die Harkness(Harkness) -> EstablishedAfter(Harkness))", "(EstablishedAfter(Harkness,1800))", "Harkness was established after 1800.", "Harkness exists after1900.", "HarknessEmergedAfter1800.", "all x.(Harkness(x) -> EstablishedAfter1800(x))"]}
{"id": "folio_train_2301", "nl": "Harkness is established before 1800.", "fol": "-EstablishedPost1800(Harkness)", "prediction": ["Harkness exists before1900.", "all x.(Harkness(x) -> EstablishedBefore1100(x))", "all x.(Harkness(x) -> EstablishedBefore(x,1))", "all x.(Harkness(x) -> EstablishedBefore1800(x))", "HarknessEstablishedBefore(Harkness)", "Harkness exists before 1800.", "Harkness exists before 1800.", "Harkness exists before(Harkness,1924).", "ExistsBefore(harkness,1800)", "all x y.((Harkness(x) & 1800(y)) -> EstablishedBefore(x,y))", "(HarknessEstablishedBefore1700)", "-establishedbefore1700(Harkness)", "Harkness Establishment(Harkness,1800) - ExistsSince(Harkness))", "Harkness exists before 1800.", "all x.(Hurkness(x) -> EstablishedBefore1800(x))", "All x.(Harkness(x) -> EstablishedAntwerpen(x,y))"]}
{"id": "folio_train_2302", "nl": "There are no mansion houses in an urban area.", "fol": "all x.(IsUrbanArea(x) -> -IsMansionHouse(x))", "prediction": ["-exists x.(MensionHouse(x) & UrbanArea(x))", "-exists x.(MansionHouse(x) & UrbanArea(x))", "exists x.(MansionHouse(x) & UrbanArea(x) & -HasMansionHouse(x))", "-exists x.(MansionHouse(x) & UrbanArea(x))", "exists x.(SituationHouse(x) & -InUrbanArea(x))", "-exists x.(MansionHouse(x) & UrbanArea(x))", "there are no mansion houses in this urbanarea.", "all x.((MansionHouse(x) & UrbanArea(x)) -> -exists y.(UrbanArea(y) & Does(x,y))))", "there are no mansionHousesInUrbanArea(x)", "exists x.(MansionHouse(x) & UrbanArea(x))", "-exists x.(MansionHouse(x) & InUrbanArea(x))", "-exists x.(MansionHouse(x) & UrbanArea(x))", "there are no mansionHousesInUrbanArea(x)", "-exists x.(MansionHouse(x) & UrbanArea(x))", "-exists x.(MansionHouse(x) & UrbanArea(x))", "there will be no mansionhouses in urbanarea."]}
{"id": "folio_train_2303", "nl": "All skyscrapers reside in urban areas.", "fol": "all x.(IsSkyscraper(x) -> IsUrbanArea(x))", "prediction": ["all x.(Skyscraper(x) -> ResidesInUrbanAreas(x))", "all x.(Skyscraper(x) -> ResidesInUrbanArea(x))", "all x.(Skyscraper(x) -> ResidesInUrbanAreas(x))", "all x.(Skyscraper(x) -> ResidesInUrbanAreas(x))", "all x.(Skyscraper(x) -> UrbanArea(x))", "all x.(Skyscraper(x) -> ResidesInUrbanArea(x))", "all x.(Skyscraper(x) -> ResidesInUrbanArea(x))", "all x.(Skyscraper(x) -> RecognizesUrbanArea(x))", "all x.(Skyscraper(x) -> ResidesInUrbanAreas(x))", "all x.(Skyscraper(x) -> ResidentInUrbanArea(x))", "all x.(Skyscraper(x) -> ResidesInUrbanAreas(x))", "all x.(Skyscraper(x) -> ResidesInUrbanArea(x))", "all x.(Skyscraper(x) -> exists y.(UrbanArea(y) & ResidesIn(x,y)))", "all x.(Skyscraper(x) -> ResidesInUrbanArea(x))", "all x.(Skyscraper(x) -> ResidesInUrbanArea(x))", "all x.(Skyscraper(x) -> LocatedInUrbanArea(x))"]}
{"id": "folio_train_2304", "nl": "Every creepy haunted house is in a mansion house.", "fol": "all x.(IsCreepyHauntedHouse(x) -> IsMansionHouse(x))", "prediction": ["all x.(CrownyHauntedHouse(x) -> InMansionHouse(x))", "all x y.((CrescentHuntedHouse(x) & MansionHouse(y)) -> In(x,y))", "all x.(CruellyHauntedHouse(x) -> MansionHouse(x))", "all x.(AngryHauntedHouse(x) -> InMansionHouse(x))", "all x.(HuntedHouse(x) -> MansionHouse(x))", "all x.(CruellyHauntedHouse(x) -> InMansionHouse(x))", "all x.(CreekCreepyHauntedHouse(x) -> InMansionHouse(x))", "all x.(CreekHauntedHouse(x) -> InMansionHouse(x))", "all x.(CrazyHuntedHouse(x) -> MansionHouse(x))", "all x.(CreepyHauntedHouse(x) -> InMansionHouse(x))", "all x.(ScrudgeyHauntedHouse(x) -> InMansionHouse(x))", "all x.(HauntedHouse(x) -> InMansionHouse(x))", "all x.(CroilyHauntedHouse(x) -> InMansionHouse(x))", "all x y.((CroigyHuntedHouse(x) & MansionHouse(y)) -> In(x,y))", "all x.(HauntedHouse(x) -> In(x,MansionHouse))", "all x.(HauntedHouse(x) -> MansionHouse(x))"]}
{"id": "folio_train_2305", "nl": "Every terrifying Halloween scare comes from a creepy haunted house.", "fol": "all x.(IsTerrifyingHalloweenScare(x) -> IsCreepyHauntedHouse(x))", "prediction": ["all x.(HalloweenScare(x) -> ComesFromCrueltyHuntedHouse(x))", "all x y.((ThreateningHalloweenScare(x) & HorrorHouse(y)) -> ComesFromCryptyHunted(x,y))", "all x y.((HollydayScare(x) & CrazyHouse(y)) -> ScaresFrom(x,y))", "all x y.((GorrifyingHalloweenScare(x) & HalloweenHauntedHouse(y)) -> ComingFrom(x,y))", "all x.(ThreateningHalloweenScare(x) -> FromHuntedHouse(x))", "ALL X.(HalloweenScare(x) -> CryingHauntedHouse(x))", "all x.(HalloweenScare(x) -> ComesFromCreeklyHackedHouse(x))", "all x y.((HalloweenScare(x) & House(y) & Creepy(y)) -> ComesFrom(x,y))", "all x.((HalloweenScrew(x) & HouseHaunted(x)) -> Scary(x))", "all x y.((CroikyHauntedHouse(x) & HalloweenScare(y)) -> ComesFrom(x,y))", "all x y.((HollydayScare(x) & HauntedHouse(y)) -> Crazed(x))", "all x.(ThrallingHalloweenScare(x) -> ComingFromCreekHouse(x))", "all x.(ThrillingHalloweenScrew(x) -> CameFromCrickyHauntedHouse(x))", "all x.(ThrickeningHollydayScare(x) -> ComesFromCreekHauntedHouse(x))", "all x.(ThryingHalloweenScare(x) -> (HauntedHouse(x) | (Crightly(x) & HauntedHouse(x)))))", "all x.(TranquilHalloweenScare(x) -> CrawlyHuntedHouse(x))"]}
{"id": "folio_train_2306", "nl": "The Scream is a creepy haunted house or a terrifying Halloween scare.", "fol": "(IsCreepyHauntedHouse(TheScream) | IsTerrifyingHalloweenScare(TheScream))", "prediction": ["all x.(Scream(x) -> (CreepyHuntedHouse(x) | ScaryHalloweenScare(x)))", "all x.(Scream(x) -> (PunchyHauntedHouse(x) | TerrifyingHalloweenScare(x)))", "all x y.((Scream(x) & (ClueyHuntedHouse(y) | ScarringHalloweenScare(x))) -> (Creek(x) | Scaring(y)))", "all x.(Scream(x) -> (CrueltyHauntedHouse(x) | ScaryHalloween(x)))", "all x.(Scream(x) -> (CrazyHuntedHouse(x) | ScaryHuntfulScreen(x)))", "all x.(Scream(x) -> (CrueltyHuntedHouse(x) | TerrifyingHalloweenScare(x)))", "All x y.((Scream(x) & HorrorHuntedHouse(y)) | ScarefulHalloweenScare(x))", "all x.(Scream(x) -> (CryptishHuntedHouse(x) | ScaryHalloweenScare(x)))", "All x.(Scream(x) -> ((CruellyHauntedHouse(x) | TerrifyingHalloweenScare(x))))", "all x.(Scream(x) -> (CrickyHauntedHouse(x) | TerrifyingHalloweenScare(x)))", "all x.(Scream(x) -> (CrookyHuntedHouse(x) | ScaryHalloweenScare(x)))", "all x.(Scream(x) -> (CloomyHuntedHouse(x) | TerrifyingHalloweenScare(x)))", "exists x.(Scream(x) & ((HauntedHouse(x) | ScaryHalloweenCause(x))) | (HuntedHouse(x) & ScaryHalloween(x)))))", "all x.(Scream(x) -> (CryptyHuntedHouse(x) | TerrifyingHalloweenScare(x)))", "all x.(Scream(x) -> (CroikyHauntedHouse(x) | TerrifyingHalloweenScare(x)))", "(CrookyHuntedHouse(Scream) | ScaryHalloweenScare(Scream))"]}
{"id": "folio_train_2307", "nl": "The Scream is a skyscraper.", "fol": "IsSkyscraper(TheScream)", "prediction": ["(Scraper(scream) | Skyscraper(scraper))", "(Scream(s) -> Skyscraper(s))", "(Scaryscraper(Scream))", "The Scream is a Skyscraper.", "All x.(Scream(x) -> Skyscraper(x))", "The Scream is Skyscraper(shudder)", "TheScream isSkyscraper(Skyscraper)", "all x.(Scream(x) -> Skyscraper(x))", "Scream is a Skyscraper.", "ALL x.(Scream(x) -> Skyscraper(x))", "all x.(Scream(x) -> Skyscraper(x))", "All x.(Scream(x) -> Skyscraper(x))", "theScream isSkyscraper.", "All x.(Scream(x) -> Skyscraper(x))", "The Scream is a Skyscraper.", "DasScream(Skyscraper)"]}
{"id": "folio_train_2308", "nl": "The Scream is not a skyscraper.", "fol": "-IsSkyscraper(TheScream)", "prediction": ["All x.(Scream(x) -> -Skyscraper(x))", "The Scream is not a Skyscraper.", "Noskyscraper(scream)", "Espoo (scream) -> -Skyscraper(s))", "In many respects,TheScream is notSkyscraper(Scream)", "The Scream is -Skyscraper(Scream))", "(-Skyscraper(Scream))", "TheScream is notSkyscraper(Scream)", "All x.(Scream(x) -> -Skyscraper(x))", "Scream is notSkyscraper.", "All x.(Scream(x) -> -Skyscraper(x))", "All x.(Scream(x) -> -Skyscraper(x))", "(-Skyscraper(Cream))", "(-Skyscraper(TheScream))", "The Scream -Skyscraper(Scream)", "TheScream is notSkyscraper(Scream)"]}
{"id": "folio_train_2309", "nl": "The Scream is a terrifying Halloween scare.", "fol": "IsTerrifyingHalloweenScare(TheScream)", "prediction": ["(ThryingHalloweenScare(Scream) & Scare(Scream))", "The Scream is a terrifying Halloween Scare.", "The Scream is a terrifying HalloweenScare(x) -> Scare(x))", "\u201cScream\u201d (HalloweenScare(s) & Scare(s))", "All x.(Scream(x) -> ScarefulHalloweenScare(x))", "(ThrillingHalloweenScare(Scream) & Halloween(Scary))", "(TorningHeavenScream(Scream) -> Scare(Scream))", "The Scream is a terrifying HalloweenScare(Scaries(Scream,Scaries))", "all x.(Scream(x) -> ScaryHalloweenScare(x))", "theScream(Scream) - ScareAtHalloween(Scare))", "all x.(Scream(x) -> ScaringHalloweenScare(x))", "HorrorHolyHousewarmingScary(Scream,x)", "The Scream Scream (ThreesomeHalloweenScare(s) -> Scare(s))", "ALL X.((Scream(x) & HalloweenScare(x)) -> Terrifying(x))", "The Scream (HalloweenScare(scary) : Terrifying(scary))", "(TerrifyingHalloweenScare(Scream) & Scare(Scream))"]}
{"id": "folio_train_2310", "nl": "The Scream is either a skyscraper or a mansion house.", "fol": "(IsSkyscraper(TheScream) | IsMansionHouse(TheScream))", "prediction": ["all x.(Scream(x) -> (Skyscraper(x) | MansionHouse(x)))", "all x.(Scream(x) -> (Skyscraper(x) | MansionHouse(x)))", "(Skyscraper(scream) | MansionHouse(scream))", "all x.(Scream(x) -> (Skyscraper(x) | MansionHouse(x)))", "all x.(Scream(x) -> (Skyscraper(x) | MansionHouse(x)))", "all x.((Scraper(x) | MansionHouse(x)) -> Scream(x))", "all x.(Scream(x) -> (Skyscraper(x) | MansionHouse(x)))", "exists x.(Scream(x) & (Skyscraper(x) | MansionHouse(x)))", "all x.(Scream(x) -> (Skyscraper(x) | MansionHouse(x)))", "all x.(Scream(x) -> (Skyscraper(x) | MansionHouse(x)))", "all x.(Scream(x) -> (Skyscraper(x) | MansionHouse(x)))", "The Scream is (Skyscraper(x) | MansionHouse(x)))", "all x.(Scream(x) -> (Skyscraper(x) | MansionHouse(x)))", "all x.(Scream(x) -> (Skyscraper(x) | MansionHouse(x)))", "exists x.(Scream(x) & (Skyscraper(x) | MansionHouse(x)))", "all x.(Scream(x) -> (Shadowscraper(x) | MansionHouse(x)))"]}
{"id": "folio_train_2311", "nl": "The Scream is either a skyscraper or an urban area.", "fol": "(IsSkyscraper(TheScream) | IsUrbanArea(TheScream))", "prediction": ["all x.(Scream(x) -> (Skyscraper(x) | UrbanArea(x)))", "all x.(Scream(x) -> (Skyscraper(x) | UrbanArea(x)))", "exists x.(Scream(x) & (Skyscraper(x) | UrbanArea(x)))", "(Skyscraper(scream) | UrbanArea(scream))", "all x.(Scream(x) -> (Skyscraper(x) | UrbanArea(x)))", "all x.(Scream(x) -> (Skyscraper(x) | UrbanArea(x)))", "all x.(Scream(x) -> (Skyscraper(x) | UrbanArea(x)))", "all x.(Scream(x) -> (Skyscraper(x) | UrbanArea(x)))", "all x.(Scream(x) -> (Skyscraper(x) | UrbanArea(x)))", "all x.(Scream(x) -> (Skyscraper(x) | UrbanArea(x)))", "all x.(Scream(x) -> (Skyscraper(x) | UrbanArea(x)))", "all x.(Scream(x) -> (Skyscraper(x) | UrbanArea(x)))", "all x.(Scream(x) -> (Skyscraper(x) | UrbanArea(x)))", "all x.(Scream(x) -> (Skyscraper(x) | UrbanArea(x)))", "all x.(Scream(x) -> (Skyscraper(x) | UrbanArea(x)))", "ALL x.(Scream(x) -> (Skyscraper(x) | UrbanArea(x)))"]}
{"id": "folio_train_2312", "nl": "The Scream is either a skyscraper or a creepy haunted house.", "fol": "(IsSkyscraper(TheScream) | IsCreepyHauntedHouse(TheScream))", "prediction": ["all x.(Scream(x) -> (Skyscraper(x) | HauntedHouse(x)))", "all x.(Scream(x) -> ((Skyscraper(x) | CryptyHuntedHouse(x))))", "all x.(Scream(x) -> (Skyscraper(x) | CreepyHuntedHouse(x)))", "all x.((Scream(x) & (Skyscraper(x) | HauntedHouse(x))) -> (Cruel(x) | Crawly(x)))", "all x.(Scream(x) -> (Skyscraper(x) | CriesyHuntedHouse(x)))", "all x.((Scream(x) & Skyscraper(x) & (CrazyHunteredHouse(x) | CrazyHouse(x))) -> Scream(x))", "all x.(Scream(x) -> (Skyscraper(x) | CrazyHuntedHouse(x)))", "all x.(Scream(x) -> (Skyscraper(x) | CryptyHuntedHouse(x)))", "exists x.(Scream(x) & (Skyscraper(x) | HungryHouse(x)))", "all x.(Scream(x) -> (Skyscraper(x) | CrypticHauntedHouse(x)))", "all x.(TheScream(x) -> (Skyscraper(x) | CrypticHuntedHouse(x)))", "all x.(Scream(x) -> ((Skyscraper(x) | CryptyHauntedHouse(x))))", "all x.(Scream(x) -> (Skyscraper(x) | ClicheHuntedHouse(x)))", "all x.(Scream(x) -> (Skyscraper(x) | HauntedHouse(x)))", "all x.(Scream(x) -> (Skyscraper(x) | CratelyHuntedHouse(x)))", "exists x.(Scream(x) & (Skyscraper(x) | HauntedHouse(x)))"]}
{"id": "folio_train_2313", "nl": "If The Scream is not a mansion in an urban area, then it is either a skyscraper or an urban area.", "fol": "(-(IsMansionHouse(TheScream) & IsUrbanArea(TheScream)) -> (IsSkyscraper(TheScream) | IsUrbanArea(TheScream)))", "prediction": ["all x.((Mansion(x) & -Establishment(x)) -> (Skyscraper(x) | UrbanArea(x)))", "all x.((Scream(x) & -MansionArea(x) & UrbanArea(x)) -> (Skyscraper(x) | UrbanArea(x)))", "(-MansionInUrbanArea(Scream) -> (Skyscraper(Scream) | UrbanArea(Scream)))", "all x.((Scream(x) & -MansionInUrbanArea(x)) -> (Skyscraper(x) | UrbanArea(x)))", "all x.((Scream(x) & -UrbanAreaMansion(x)) -> (Skyscraper(x) | UrbanAreaMansion(x)))", "all x.((Escape(x) & -UrbanAreaMansion(x)) -> (Skyscraper(x) | UrbanAreaMansion(x)))", "all x.((MansioninUrbanArea(x) & -MansionExit(x)) -> (Skyscraper(x) | UrbanArea(x)))", "all x.((Scream(x) & -MansionInUrbanArea(x)) -> (Skyscraper(x) | UrbanArea(x)))", "all x.((TheScream(x) & -HuntedInUrbanArea(x)) -> (Skyscraper(x) | UrbanArea(x)))", "all x.((Scream(x) & -MansionInUnitedArea(x)) -> (Skyscraper(x) | UrbanArea(x)))", "all x.((Scream(x) & -MansionInUrbanArea(x)) -> (Skyscraper(x) | UrbanArea(x)))", "all x.((TheScream(x) & -MansionInUrbanArea(x)) -> (Skyscraper(x) | UrbanArea(x)))", "all x.((Scream(x) & -InUrbanArea(x)) -> (Skyscraper(x) | UrbanArea(x)))", "all x.((MaisonInUrbanArea(x) & -TheScream(x)) -> (Skyscraper(x) | UrbanArea(x)))", "all x.((Scream(x) & -MansionInUrbanArea(x)) -> (Skyscraper(x) | UrbanArea(x)))", "all x.((Mansion(x) & -InUrbanArea(x)) -> (Skyscraper(x) | UrbanArea(x)))"]}
{"id": "folio_train_2314", "nl": "If The Scream is either a skyscraper or a mansion house, then it is in an urban area.", "fol": "((IsSkyscraper(TheScream) | IsMansionHouse(TheScream)) -> IsUrbanArea(TheScream))", "prediction": ["all x.((Skyscraper(x) | MansionHouse(x)) -> UrbanArea(x))", "all x.((Skyscraper(x) | MansionHouse(x)) -> UrbanArea(x))", "all x.((Skyscraper(x) | MansionHouse(x)) -> UrbanArea(x))", "all x y.((Scream(x) & CityArea(y) & Skyscraper(x) & MansionHouse(x)) -> UrbanArea(x))", "all x.((Skyscraper(x) | MansionHouse(x)) -> UrbanArea(x))", "all x.((Skyscraper(x) | MansionHouse(x)) -> UrbanArea(x))", "all x.((Skyscraper(x) | MansionHouse(x)) -> UrbanArea(x))", "all x.((Skyscraper(x) | MansionHouse(x)) -> UrbanArea(x))", "all x.(Skyscraper(x) | MansionHouse(x)) -> UrbanArea(x))", "all x.((Skyscraper(x) | MansionHouse(x)) -> UrbanArea(x))", "all x.((Skyscraper(x) | MansionHouse(x)) -> UrbanArea(x))", "all x.((Skyscraper(x) | MansionHouse(x)) -> UrbanArea(x))", "all x.((Scream(x) & (Skyscraper(x) | MansionHouse(x))) -> UrbanArea(x))", "all x.((Skyscraper(x) | MansionHouse(x)) -> UrbanArea(x))", "all x.((Skyscraper(x) | MansionHouse(x)) -> UrbanArea(x))", "all x.((Skyscraper(x) | MansionHouse(x)) -> UrbanArea(x))"]}
{"id": "folio_train_2315", "nl": "If The Scream is either a skyscraper or a mansion house, then it is neither a creepy haunted house nor a terrifying Halloween scare.", "fol": "((IsSkyscraper(TheScream) | IsMansionHouse(TheScream)) -> (-IsCreepyHauntedHouse(TheScream) & -IsTerrifyingHalloweenScare(TheScream)))", "prediction": ["all x.((Skyscraper(x) | MansionHouse(x)) -> (-CrownyHuntedHouse(x) & -ThrickeningScaryHalloween(x)))", "all x.((Skyscraper(x) | MansionHouse(x)) -> (-CreepyHauntedHouse(x) & -ThrangingHalloweenScare(x)))", "all x.((Skyscraper(x) | MansionHouse(x)) -> -9(CreekHuntedHouse(x) & -ThrillingHalloweenScare(x)))", "all x.((Skyscraper(x) | MansionHolding(x)) -> -CrazyHuntedHouse(x) & -ThrallingHuntingScare(x))", "all x.((Skyscraper(x) | MansionHouse(x)) -> ((CruellyHuntedHouse(x) & -ThreateningHalloweenScare(x)) | (-CruellyHuntedHouse(x) & ScarefulHalloweenScare(x))))", "all x.((Skyscraper(x) | MansionHouse(x)) -> (-CryptyHauntedHouse(x) & -ThreateningHalloweenScare(x)))", "all x.(Scream(x) -> ((Skyscraper(x) | MansionHouse(x)) & -HauntedHaustoday(x) & -ThrivingHalloweenScary(x))))", "all x.((Skyscraper(x) | MansionHouse(x)) -> (Negative(x,HuntedHouse) & -ThricticHalloweenScare(x)))", "all x.((Skyscraper(x) | MansionHouse(x)) -> (CryptyHunteredHouse(x) & -ThreechingHalloweenScare(x)))", "all x.((Skyscraper(x) | MansionHouse(x)) -> (Neem(x) & -(CreekHuntedHouse(x) | ScaryHalloweenScreen(x)))))", "all x.((Skyscraper(x) | MansionHouse(x)) -> (KeirkyHauntedHouse(x) & -ThrashingHalloween(x)))", "all x.((Scream(x) & (Skyscraper(x) | MansionHouse(x))) -> (-CrookyHuntedHouse(x) & -ThroatyHalloweenScare(x)))", "all x.((Skyscraper(x) | MansionHouse(x)) -> -(CreekHuntedHouse(x) | TerrifyingHalloweenScare(x)))", "all x.((Skyscraper(x) | MansionHouse(x)) -> (IsSheltery(x) & -CreepyHuntedHouse(x) & -ThreateningSpooncest(x)))", "all x.((Skyscraper(x) | MansionHouse(x)) -> (NegativeHuntedHouse(x) & -ThreateningHalloweenScare(x)))", "all x.((Skyscraper(x) | MansionHouse(x)) -> -CringeyHuntedHouse(x) & -ThrillerousHalloweenScare(x))"]}
{"id": "folio_train_2316", "nl": "If The Scream is either a skyscraper or a creepy haunted house, then it is not a mansion house.", "fol": "((IsSkyscraper(TheScream) | IsCreepyHauntedHouse(TheScream)) -> -IsMansionHouse(TheScream))", "prediction": ["all x.((Scream(x) & (Skyscraper(x) | CryptyHuntedHouse(x))) -> -MansionHouse(x))", "all x.((Scream(x) & (Skyscraper(x) | CreepyHauntedHouse(x))) -> -MansionHouse(x))", "all x.((Scream(x) & (Skyscraper(x) | CryptyHuntedHouse(x))) -> -MansionHouse(x))", "all x.((Scream(x) & (Skyscraper(x) | HauntedHouse(x))) -> -MansionHouse(x))", "all x.((Scream(x) & (Skyscraper(x) | HorrorCrimpyHuntedHouse(x))) -> -MansionHouse(x))", "all x.((Scream(x) & (Skyscraper(x) | Crypto hauntedHouse(x))) -> -MansionHouse(x))", "all x.((Scream(x) & MansionHouse(x)) -> -Skyscraper(x) & creepyHuntedHouse(x))", "all x.((Scream(x) & (Skyscraper(x) | CryptyHuntedHouse(x))) -> -MansionHouse(x))", "all x.((Scream(x) & (Skyscraper(x) | CriesyHuntedHouse(x))) -> -MansionHouse(x))", "(all x.((Scream(x) & Skyscraper(x) | CrawlyHuntedHouse(x))) -> -MansionHouse(x))", "all x.((Scream(x) & (Skyscraper(x) | CryptyHauntedHouse(x))) -> -MansionHouse(x))", "all x.((Scream(x) & (Skyscraper(x) | CreepyHuntedHouse(x))) -> -MansionHouse(x))", "all x y z.((Scream(x) & Skyscraper(y) & HauntedHouse(z)) -> -MansionHouse(x))", "all x.((Scream(x) & (Skyscraper(x) | CryptyHauntedHouse(x))) -> -MansionHouse(x))", "all x.((Scream(x) & (Skyscraper(x) | HauntedHouse(x))) -> -MansionHouse(x))", "all x.((Scream(x) & (Skyscraper(x) | HorrorHuntedHouse(x))) -> -MansionHouse(x))"]}
{"id": "folio_train_2317", "nl": "Phuoc Binh national park is a national park in Vietnam. ", "fol": "(IsNationalPark(PhuocBinh) & IsLocatedIn(PhuocBinh,Vietnam))", "prediction": ["(NationalPark(PhuocBinh) & Vietnam(PhuocBinh))", "all x.((PhuocBinhNationalPark(x) & NationalPark(x)) -> NationalParkInVietnam(x))", "all x.(PhuocBinh(x) -> NationalPark(x))", "all x.(NationalPark(x) -> PhuocBinh(x))", "Vietnam(NationalPark,PhuocBinh)", "all x.((PhuocBinh(x) & Vietnam(x)) -> NationalPark(x))", "(NationalPark(PhuocBinh) & NationalPark(Vietnam))", "all x.(AncientParkInVietnam(x) -> PhuocBunh(x))", "PhuocBinh NationalPark is a national park in Vietnam.", "all x.(Parc(x) -> (PhuocBinhNationalPark(x) & NationalPark(x) & NationalParkInVietnam(x)))", "(NationalPark(phuocBinh) & Vietnam(phuocbinh))", "all x.(NationalPark(x) -> PhuocBinh(x))", "Phuoc Binh NationalPark(x) \u2013 NationalParkInVietnamese(x))", "all x.((PhuocBinh(x) & NationalPark(x) & InVietnam(x)) -> NationalPark(x))", "all x.(PhuocBinhNationalPark(x) -> NationalParkInVietnam(x))", "LocatedInHapChocBinh(PhuocBinh)"]}
{"id": "folio_train_2318", "nl": "Any national park in Vietnam is classified as a nature reserve. ", "fol": "all x.((IsNationalPark(x) & IsLocatedIn(x,Vietnam)) -> ClassifiedAsNatureReserve(x))", "prediction": ["all x.((NationalPark(x) & Vietnam(x)) -> NatureReserve(x))", "all x.((NationalPark(x) & Vietnam(x)) -> NatureReserve(x))", "all x.((NationalPark(x) & Vietnam(x)) -> NatureReserve(x))", "all x.((NationalPark(x) & InVietnam(x)) -> NatureReserve(x))", "all x.((NationalPark(x) & InVietnam(x)) -> NatureReserve(x))", "all x.((NationalPark(x) & Vietnam(x)) -> NatureReserve(x))", "all x.((NationalPark(x) & InVietnam(x)) -> NatureReserve(x))", "all x.((NationalPark(x) & InVietnam(x)) -> NatureReserve(x))", "all x.((NationalPark(x) & InVietnam(x)) -> NatureReserve(x))", "all x.((NationalPark(x) & Vietnam(x)) -> NatureReserve(x))", "all x.((NationalPark(x) & Vietnam(x)) -> NatureReserve(x))", "all x.((NationalPark(x) & InVietnam(x)) -> NatureReserve(x))", "all x.((NationalPark(x) & Vietnam(x)) -> NatureReserve(x))", "all x.((NationalPark(x) & Vietnam(x)) -> NatureReserve(x))", "all x.((NationalPark(x) & InVietnam(x)) -> NatureReserve(x))", "all x.((NationalPark(x) & Vietnam(x)) -> NatureReserve(x))"]}
{"id": "folio_train_2319", "nl": "There is a national park in Vietnam classified as a UNESCO World Heritage Site.", "fol": "exists x.(IsNationalPark(x) & IsLocatedIn(x,Vietnam) & IsUNESCOWorldHeritageSite(x))", "prediction": ["all x.((NationalPark(x) & Vietnam(x)) -> WorldHeritageSite(x))", "exists x.(NationalParkInVietnam(x) & WorldHeritageSite(x))", "exists x.(NationalPark(x) & Vietnam(x) & WorldHeritageSite(x))", "(exists x.(NationalPark(x) & InVietnam(x)) & WorldHeritageSite(x))", "exists x.(NationalPark(x) & Vietnam(x) & WorldHeritageSite(x))", "all x.((NationalPark(x) & InVietnam(x)) -> UNESCOWorldHeritageSite(x))", "exists x.(NationalPark(x) & InVietnam(x) & WorldHeritageSite(x))", "exists x.(NationalPark(x) & LocatedInVietnam(x) & UNESCOWorldHeritageSite(x))", "exists x.(NationalPark(x) & InVietnam(x) & WorldHeritageSite(x))", "exists x.(NationalPark(x) & InVietnamese(x) & UNESCOWorldHeritageSite(x))", "exists x y.(NationalPark(x) & NationalPark(y) & Vietnam(y) & CategorizedAsUnescoWorldHistoricalSite(x,y))", "exists z.(NationalPark(z) & Vietnam(w) & ListedAsWorldHelvendomSite(z))", "exists x y.(NationalPark(x) & NationalPark(y) & InVietnam(x,y) & WorldHeritageSite(x))", "exists x.(NationalPark(x) & Vietnam(x) & ClassifiedAsWorldHeritageSite(x))", "exists x.(NationalPark(x) & InVietnam(x) & UNESCOWorldHistoritySite(x))", "exists x.(NationalPark(x) & Vietnam(x) & WorldHeritageSite(x))"]}
{"id": "folio_train_2320", "nl": "All national parks in Vietnam are either managed by the Ministry of Agriculture or by the People's Committee. ", "fol": "all x.(((IsNationalPark(x) & IsLocatedIn(x,Vietnam)) -> ManagedBy(x,MinistryofAgriculture)) | ManagedBy(x,PeoplesCommittee))", "prediction": ["all x.(NationalPark(x) -> (AdministeredByMinisterOfAgriculture(x) | ManagedByPeoplesCommittee(x)))", "all x.((NationalPark(x) & LocatedInVietnam(x)) -> (MountainOfAgriculture(x) | PeoplesCommittee(x)))", "all x.(NationalPark(x) -> (ManagedBy(x,Mountain(x) | ManagedBy(x,PeoplesChamber)))", "all x.(VietnamNationalPark(x) -> ((ManagedByMountainOfAgriculture(x) | ManagedByPeoplesCommission(x))))", "all x.(NationalPark(x) | AdministeredBy(x,y) & (MountainOfAgricultural(y) | PeoplesCommission(y))))", "all x.(NationalPark(x) -> (MaintainedByMinisterOfAgriculture(x) | ManagedByPeopleCommittee(x)))", "all x.(NationalPark(x) -> (MadeByMinisterOfAgriculture(x) | ManagedByPeoplesComittee(x)))", "all x.((NationalPark(x) & OperatedBy(x,Minist\u00e8reOfAgriculture)) | ManagedByPeoplesCommittee(x,PeoplesCommittee))", "all x.(NationalPark(x) -> (ManagedByMinisterOfAgricultural(x) | ManagedByPeoplesCommittee(x)))", "all x.(NationalPark(x) -> (DirectedBy(x,MinistryOfAgriculture) | ManagedByPeoplesCommittee(x)))", "all x.(NationalPark(x) -> ((MaintainedByMountainOfFood(x) | ManagedByPeopleSecretary(x))))", "all x.(NationalParks(x) -> (ManagedBy(x,Vietnam) | ManagedBy(x,Vietnam)))", "all x.(NationalPark(x) -> (ManageredBy(x,MinistryOfAgriculturals) | ManagedBy(x,PeoplesCommittee)))", "all x y.((NationalPark(x) & Vietnam(y)) -> ((AnimatedByMinistryOfAgriculture(x,y) | ManagedByPeoplesCommittee(x,y))))", "all x.(NationalPark(x) -> (MoveragedBy(x,MinisterOfAgriculture) | ManagedByPeoplesCommittee(x,PeoplesCommittee)))", "all x.((NationalPark(x) & InVietnam(x)) -> (MainedBy(x,Agriculture) | ManagedByPublicCommittee(x,PeopleState)))"]}
{"id": "folio_train_2321", "nl": "Phuoc Binh is not managed by the Ministry of Agriculture.", "fol": "-ManagedBy(PhuocBinh,MinistryofAgriculture)", "prediction": ["-(ManagedBy(PhuocBinh) | -ManagedBy(PhuocBinh))", "PhuocBenh-Managed(Phuoc) -> -ManagedByFood(PhuocBenh))", "Phuoc Binh - ManagedByAgriculture(th))", "Phuoc Binh - ManagedByMountainOfAgriculture(p))", "Phuoc Binh -ManagedByMountainOfAgriculture(Phuoc Binh)", "(-MoleculatedBy(PhuocBinh) -> -MostOfAgriculture(PhuocBinh))", "Phuoc Binh - ManagedByAgriculture(PHO)", "Phuoc Binh - ManagedByMinisterOfAgriculture(Php)", "Phuoc Binh (MountainoAgriculture) -> -ManagedBy(PhuocBinh))", "Phuoc Binh - ManagedByMinisterOfAgriculture(PhuocBinh)", "(-exists x.(PhuocBinh(x) & AdministeredBy(x,MountainOfAgriculture)))", "PhuocBinh - ManagedByMountainOfAgriculture(PhuocBinh)", "Phuoc Binh -ManagedByAgriculture(PhuocBinh)", "Phuoc Binh - ManagedByMinisterOfAgriculture(p))", "-ManagedByAgriculture(PhuocBinh)", "PhuocBinh is not managed by MinistryOfAgricultural(TMA)"]}
{"id": "folio_train_2322", "nl": "There is a nature reserve in Vietnam.", "fol": "exists x.(ClassifiedAsNatureReserve(x) & IsLocatedIn(x,Vietnam))", "prediction": ["exists x.(NatureReserve(x) & Vietnam(x))", "exists x.(NatureReserve(x) & InVietnam(x))", "exists x.(NatureReserve(x) & Vietnam(x))", "exists x.(NatureReserve(x) & InVietnam(x))", "exists x y.(Volcano(x) & NatureReserve(y))", "exists x.(NatureReserve(x) & InVietnam(x))", "is natureReserve(Vietnam)", "exists x.(NatureReserve(x) & InVietnam(x))", "exists x.(NatureReserve(x) & InVietnam(x))", "exists x.(NatureReserve(x) & InVietnam(x))", "existe x.(NatureReserve(x) & InVietnam(x))", "exists x.(NatureReserve(x) & InVietnam(x))", "exists x.(NatureReserve(x) & InVietnam(x))", "exists x.OfNatureRestaurant(x,Vietnam)", "exists x y.(NatureReserve(x) & Vietnam(y))", "(exists x.(NatureReserve(x) & InVietnam(x)))"]}
{"id": "folio_train_2323", "nl": "Phuoc Binh is a UNESCO Heritage Site.", "fol": "IsUNESCOWorldHeritageSite(PhuocBinh)", "prediction": ["PhuocBinh (Planazione di Origines & HeritageSite(x))", "PhuocBinh (UNESCOHeritageSite)", "PhuocBinh is a UNESCO(HurtainSituation)", "PhuocBinh (formerly known as \"HistoricalSite(p) & UNESCOGrantee(x)))", "Phuoc Binh is a UNESCOHeritageSite(x)", "PhuocBinh is a UNESCOHeritageSite(PhuocBinh)", "Phuoc Binh(r) -> HeritageSite(i))", "PhuocBinh,UNESCO HeritageSite, Inc.", "PhuocBinh - UNESCOHabitatSite(PhuocBinh)", "Phuoc Binh (UNESCO HeritageSite)", "Phuoc Binh is a UNESCOHeritageSite(x)", "Phuoc Binh (UNESCO HeritageSite)", "PhuocBinh is a UNESCOHabitatSite(PhuocBinh)", "Phuoc Binh is UNESCOHeritageSite(x)", "Phuoc Binh (UNESCOHeritageSite)", "Phuoc Binh - UNESCOHeritageSite(PHuocBinh)"]}
{"id": "folio_train_2324", "nl": "Phuoc Binh is managed by the People's Committee.", "fol": "ManagedBy(PhuocBinh,PeoplesCommittee)", "prediction": ["PhuocBinh(x) & PeoplesCommittee(x))", "OrganizedByPhuocBinh(x)", "Pheoc Binh (ManagedByPeoplesCommittee (PhuocBinh))", "PhuocBinh is managed by PeoplesCommittee(PhuocBinh)", "All x.((PhuocBinh(x) & ManagedByPeoplesCommittee(x)) -> ManagedByPeoplesComittee(x))", "Phuoc Binh Management(PhuocBinh,PeoplesCommittee)", "Phuoc Binh is managed by PeoplesCommittee(PhuocBinh)", "PhuocBinh is managed by PeoplesCommittee(Phuoc(Bienh)", "PhuocBinh is managed by PeoplesCommittee(PhuocBinh)", "PhuocBinh Management(PhuocBinh)", "PhuocBinh (ProvidesPeoplesCommittee(v) & ManagedBy(v))", "PhuocBinh is managed by PeoplesComittee(x)", "(Mature(PhuocBinh) -> PeoplesComittee(p))", "PhuocBinh is managed by PeoplesCommission(PhuocBinh)", "PhuocBinh is managed by PeoplesComittee.", "Aye, Phuoc Binh is managed by PeoplesCommittee(PhuocBinh)"]}
{"id": "folio_train_2325", "nl": "Greyhound racing is a competitive sport where spectators bet on greyhounds.", "fol": "all x.(IsGreyhoundRacing(x) -> exists y.(IsCompetitiveSport(x) & IsGreyhound(y) & SpectatorsBetOnEvent(x,y)))", "prediction": ["all x.(GreyhoundRecreation(x) -> (CompetitiveSport(x) & whereViewersBetOnGrayhounds(x)))", "all x y.((Football(x) & Greyhound(y)) -> (CompetitivelyStandsOn(x,y) & BetsOn(x,y)))", "all x y.((GreyhoundRacer(x) & Spectator(z)) -> BetsOn(x,y,z))", "all x.(GreyhoundRacing(x) -> (CompetitiveSport(x) & whereScientistsBetOnGreyhounds(x)))", "all x y.((GreyhoundRacing(x) & Substance(y) & WitnessesBetOn(x,y)) -> CompetitiveSport(x))", "all x.(GreyhoundRacing(x) -> (CompetitiveSport(x) & SpectatorBetOnGreyhounds(x)))", "all x.(GreyhoundRacing(x) -> (CompetitiveSport(x) & spectatorsBetOnGreyhounds(x)))", "all x.((GreyhoundRacing(x) & CompetitiveSport(x)) -> (PatentsOnGreyhounds(x) | BetOnGreyhounds(x)))", "all x.(GrayhoundRacing(x) -> (CompetitiveSport(x) & WhereScientistsBetOnGreyhounds(x)))", "all x.(GreyhoundRacing(x) -> (CompetitiveSport(x) & WhereStarterBetsOn(x,Goldenhounds)))", "all x.((GreyhoundRacing(x) & CompetitiveSport(x)) -> (PokerBetOnGreyhound(x)))", "all x.(GreyhoundRace(x) -> (CompetitiveSport(x) & SuspectsBetOnGreyhounds(x)))", "all x.(CulturalSport(x) -> (GreyhoundRacing(x) & CompetitionSport(x) & spectatorsBetOnGreyhounds(x)))", "all x.((WoodenRacing(x) & CompetitiveSport(x) & WhereObserversBetOnGreyhounds(x)) -> Racing(x))", "all x y.((GreyhoundRacing(x) & (Greyhound(y) | Greyhound(y))) -> BetOn(x,y))", "all x.(GrayhoundRacing(x) -> (CompetitiveSport(x) & BetOnGreyhounds(x)))"]}
{"id": "folio_train_2326", "nl": "Coursing is a part of Greyhound racing.", "fol": "all x.(IsCoursing(x) -> IsGreyhoundRacing(x))", "prediction": ["all x.(Coursing(x) -> GreyhoundRacing(x))", "all x.(Choursing(x) -> GreyhoundRacing(x))", "all x.(Coursing(x) -> GreyhoundRacing(x))", "all x.(Coloursing(x) -> GreyhoundRacing(x))", "all x.(CoursesOff(x) -> GreyhoundRacing(x))", "exists x.(Coursesing(x) & GreyhoundRacing(x))", "all x.(Coursing(x) -> GreyhoundRacing(x))", "all x y.((Courses(x) & Greyhound(y)) -> PartOfRacing(x,y))", "(All x.(Coursesing(x) -> GreyhoundRacing(x)))", "all x y.((Courses(x) & GreyhoundRace(y)) -> PartOf(x,y))", "all x.(Courses(x) -> GreyhoundRacing(x))", "all x.(Courses(x) -> GreyhoundRacing(x))", "all x.(Courses(x) -> GreyhoundRacing(x))", "all x y z.((Coursing(x) & Greyhound(y) & Race(z)) -> PartOf(x,y,z))", "all x.(Courses(x) -> GreyhoundRace(x))", "all x.(Coursesing(x) -> GreyhoundRacing(x))"]}
{"id": "folio_train_2327", "nl": "Some competitive sports where spectators bet on things are banned.", "fol": "exists x y.(IsCompetitiveSport(x) & SpectatorsBetOnEvent(x,y) & IsBanned(x))", "prediction": ["exists x.(CompetitiveSport(x) & WhereScenarsBetOn(x))", "exists x.(CompetitiveSport(x) & HasObserversBetOn(x))", "exists x.((CompetitiveSport(x) & Watcher(x) & BetsOnThing(x)) -> Banned(x))", "exists x.(CompetitiveSport(x) & where(x) spectatorsBetOn(x))", "exists x.(CompetitiveSport(x) & WatchersBetOn(x))", "exists x.((CompetitiveSport(x) & Spectator(x) & BetOn(x)) -> Bannt(x))", "exists x.(CompetitiveSport(x) & (BetOn(x) | BetOn(x)))", "exists x.(CompetitiveSport(x) & whereSpectatorsBetOn(x))", "exists x.(CompetitiveSport(x) & ContainsSpectators(x) & Banned(x))", "exists x.(CompetitiveSport(x) & Involves(x,SponsorsBetOn(x))", "exists x.(CompetitiveSport(x) & SpectatorBetsOn(x))", "exists x.(Cyclopaedia(x) & WatchersBetOnThings(x))", "exists x.(CompetitiveSport(x) & CanBetOn(x))", "exists x.(CompetitiveSport(x) & ManyCompetitiveSports(x) & SpectatorBetOnThings(x))", "exists x.(CompetitionSport(x) & WhereScrutiniansBetOnThings(x))", "exists x.(CompetitiveSport(x) & (WatchersBetOn(x) | -WatchersBetOn(x)))"]}
{"id": "folio_train_2328", "nl": "Coursing involves spectators betting on a hare being pursued by greyhounds.", "fol": "exists x y z.(IsCoursing(x) & IsHare(y) & SpectatorsBetOnEvent(x,y) & IsGreyhound(z) & Pursues(z,y))", "prediction": ["all x.(Coursing(x) -> (InvolvesSpectatorsBetweenHares(x) & FollowedByGrinhounds(x)))", "all x y z.((Visitors(x) & Hare(y) & Greyhound(z)) -> BetOn(x,y,z))", "all x y.((Chursing(x) & Watcher(y) & BetsOnHare(y)) -> PursuingGrinhound(y))", "all x y.((Focusing(x) & Hate(y) & Greenhound(y)) -> BetsOn[x,y))", "all x y.((Coursing(x) & Watcher(y) & BetOnHare(y,x)) -> PursuedByGrayhounds(y))", "all x.(Courses(x) -> (TouristsBetweenHare(x) & PursuedByGreyhounds(x)))", "all x y.((Carousing(x) & Participant(y)) -> BetsOnHare(y,x))", "all x y.((Concerting(x) & Traps(y) & Hare(z) & ByGreyhound(x,z)) -> BetSavingVirtuarial(x,z))", "all x y.((Toursing(x) & Horse(y)) -> (TurnsBetween(x,y) & Foreman(x,y)))", "all x.(Coursing(x) -> exist y.(Status(y) & BetsOnHare(x,y)))", "all x y z.((Toursing(x) & Witness(y) & Hare(z) & Terrified(y)) -> BetOnMrsGrayhound(y,z))", "all x y z.((Courses(x) & Involves(x,y) & ObserversBetween(x,z) & HarePrivate(y)) -> FollowedByGreyhounds(y))", "all x y.((Courses(x) & Attendant(y)) -> BetsOnHare(y,x))", "all x y z.((Courses(x) & Haze(y) & Greyhound(z)) -> BetOn(x,y,z))", "all x y.((Tourism(x) & Viewer(y)) -> (BetsOnHare(x,y) & PursuedByGrinhounds(y)))", "all x y.((Following(x) & ObserverBtapping(y,x)) -> (PursuadedByGrinhounds(y) & Hare(y)))"]}
{"id": "folio_train_2329", "nl": "Hares are small game.", "fol": "all x.(IsHare(x) -> IsSmallGame(x))", "prediction": ["all x.(Hare(x) -> SmallGame(x))", "all x.(Hare(x) -> SmallGame(x))", "all x.(Hare(x) -> SmallGame(x))", "all x.(Hare(x) -> SmallGame(x))", "all x.(Hare(x) -> SmallGame(x))", "all x.(Hare(x) -> SmallGame(x))", "all x.(Hare(x) -> SmallGame(x))", "all x.(Hare(x) -> SmallGame(x))", "all x.(Hare(x) -> SmallGame(x))", "all x.(Hare(x) -> SmallGame(x))", "all x.(Hare(x) -> SmallGame(x))", "all x.(Hare(x) -> SmallGame(x))", "all x.(Hare(x) -> SmallGame(x))", "all x.(Hare(x) -> SmallGame(x))", "all x.(Hare(x) -> SmallGame(x))", "all x.(Hare(x) -> SmallGame(x))"]}
{"id": "folio_train_2330", "nl": "If a competitive sport involves spectators betting on small game, then it is banned.", "fol": "all x.(exists y.(IsCompetitiveSport(x) & IsSmallGame(y) & SpectatorsBetOnEvent(x,y)) -> IsBanned(x))", "prediction": ["all x.((CompetitiveSport(x) & InvolvesSupportersBettingOnSmallGame(x)) -> Ban(x))", "all x.((CompetitiveSport(x) & ContainsSpectatorsBetweenSmallGame(x)) -> Ban.(x))", "all x.((CompetitiveSport(x) & InvolvesSecondaries(x) & BettingOnSmallGame(x)) -> Ban(x))", "all x.((CompetitiveSport(x) & InvolvesStakeholdersBattingOnSmallGame(x)) -> Ban(x))", "all x.((CompetitiveSport(x) & InvolvesStakeholdersBetweenSmallGame(x)) -> Banned(x))", "all x.((CompetitiveSport(x) & InvolvesStakeholdersBetweenSmallGame(x)) -> Ban(x))", "all x.((CompetitiveSport(x) & InvolvesScenariansBetweenSmallGame(x)) -> Ban.", "all x y.((CompetitiveSport(x) & Participant(y) & BetsOnSmallGame(y,x)) -> Ban(x))", "all x.((CompetitiveSport(x) & InvolvesObserversBetweenSmallGame(x)) -> Banishes(x))", "all x.((ConcurrentSport(x) & InvolvesStakeholdersBetweenSmallGame(x)) -> Banal(x))", "all x.((CompetitiveSport(x) & InvolvesSummerSeederBetween(x) & NotBanked(x)) -> Banned(x))", "all x.((CompetitiveSport(x) & InvolvesStakeholdersBetweenSmallGames(x)) -> Banade(x))", "all x.((CompetitiveSport(x) & InvolvesSpectatorsBetweenSmallGames(x)) -> Ban(x))", "all x.((CompetitiveSport(x) & InvolvesStakeholdersBetweenSmallGame(x)) -> Ban(x))", "all x.((CompetitiveSport(x) & InvolvesStubbyBetsOnSmallGame(x)) -> Bans(x))", "all x.(CompetitiveSport(x) -> Banned(x))"]}
{"id": "folio_train_2331", "nl": "No coursing is banned.", "fol": "all x.(IsCoursing(x) -> -IsBanned(x))", "prediction": ["-Banned(curling)", "-CanursingBanned(x)", "-exists x.(Coursing(x) & Banned(x))", "-BanntCourses(x)", "-exists x.(Coursing(x) & Banned(x))", "-CancursingBanned(x)", "-AllCoursesBanned(s)", "RigorousCoursing(n)", "all x.(Coursing(x) -> Bans(x))", "-AllowsCoursing(x)", "-AllPursingBan(x)", "-isBanned(Cursing)", "-AllCoursesBanned(c)", "all x.(Coursing(x) -> -Banned(x))", "-exists x.(Coursing(x) & Banned(x))", "all x.(Coursesing(x) -> -Ban(x))"]}
{"id": "folio_train_2332", "nl": "Greyhound racing is a competitive sport.", "fol": "all x.(IsGreyhoundRacing(x) -> IsCompetitiveSport(x))", "prediction": ["all x.(Greyhound(x) -> CompetitiveSport(x))", "all x.(GrayhoundRacing(x) -> CompetitiveSport(x))", "all x.(GreyhoundRace(x) -> CompetitiveSport(x))", "ALL x.(GreyhoundRacing(x) -> CompetitiveSport(x))", "all x.(Greyhound(x) -> CompetitiveSport(x))", "all x.(GreyhoundRacing(x) -> CompetitiveSport(x))", "all x.(BrucehoundRacing(x) -> CompetitiveSport(x))", "all x.(GreyhoundRacing(x) -> CompetitiveSport(x))", "all x.(GreyhoundRacing(x) -> CompetitiveSport(x))", "all x.(Greyhound(x) -> CompetitiveSport(x))", "all x.(GreyhoundRiding(x) -> CompetitiveSport(x))", "all x.(Grayhound(x) -> CompetitiveSport(x))", "all x.(GreyhoundRacing(x) -> CompetitiveSport(x))", "all x.(GreyhoundRacing(x) -> CompetitiveSport(x))", "all x.( GreyhoundRacing(x) -> CompetitiveSport(x))", "all x.(Greyhound(x) -> CompetitiveSport(x))"]}
{"id": "folio_train_2333", "nl": "If a soccer player receives two yellow cards in one game, this player will be ejected from the rest of the game.", "fol": "all x.((IsSoccerPlayer(x) & ReceivedTwoYellowCards(x)) -> EjectFromGame(x))", "prediction": ["all x y.((SoccerPlayer(x) & ReceivesTwoYellowCards(x,y) & OneGame(y)) -> EjectedFromGame(x,y))", "all x y.((SoccerPlayer(x) & ReceivesTwoYellowCards(x)) -> EjectedFromGame(x,y))", "all x y.((SoccerPlayer(x) & Player(y) & ReceivesTwoYellowCards(x,y) & InGame(x,y)) -> EjectedFromGame(y))", "all x y.((SoccerPlayer(x) & YellowCard(y) & ReceivesInOneGame(x,y)) -> EjectedFromRemainingGame(x))", "all x y.((CastlePlayer(x) & SoccerPlayer(y) & ReceivesTwoYellowCards(x,y) & InOneGame(y,x)) -> EjectedFromTheMotherGame(x))", "all x y.((Player(x) & SoccerPlayer(y) & ReceivesTwoYellowCards(x,y)) -> EjectedFromGame(x,y))", "all x y z.((SoccerPlayer(x) & YellowCard(y) & Game(z) & ReceivesInGame(x,y,z)) -> Ejected(x,z))", "all x y.((SoccerPlayer(x) & YellowCards(y) & ReceivesInOneGame(x,y)) -> EjectedFromGame(x))", "all x y.((SoccerPlayer(x) & SoccerPlayer(y) & ReceivesTwoYellowCardsInOneGame(x,y)) -> EjectedFromRest(x))", "all x y z.((SoccerPlayer(x) & YellowCard(y) & Match(z) & ReceivesInOneGame(x,x,y) & InOneGame(x,z),x)) -> EjectedFromGame(x))", "all x y.((SoccerPlayer(x) & ReceivesTwoYellowCards(x) & Game(y)) -> EjectedFromGame(x,y))", "all x.((SoccerPlayer(x) & PlaysTwoYellowCards(x)) -> Ejected(x))", "all x y z.((SoccerPlayer(x) & SoccerPlayer(y) & YellowCard(z) & ReceivesInOneGame(x,y,z)) -> EjectedFromBoringGame(x))", "all x.((SoccerPlayer(x) & ReceivesTwoYellowCards(x) & OneGame(x)) -> DisejectedFromStuff(x))", "all x.((Player(x) & ReceivesTwoYellowCards(x) & PlaysInGame(x)) -> EjectedFromRule(x))", "all x y.(((SoccerPlayer(x) & YellowCard(y) & ReceivesInOneGame(x,y)) -> Ejected(x))"]}
{"id": "folio_train_2334", "nl": "If a soccer player receives one red card in one game, this player will be ejected from the rest of the game.", "fol": "all x.((IsSoccerPlayer(x) & ReceivedOneRedCard(x)) -> EjectFromGame(x))", "prediction": ["all x y.((SoccerPlayer(x) & RedCard(y) & Game(y) & Receives(x,y)) -> EjectedFrom(x,y))", "all x y.((SoccerPlayer(x) & RedChip(y)) -> ReceivesInOneGame(x,y))", "all x y z.((SoccerPlayer(x) & RedCard(y) & Game(z) & ReceivesInGame(x,y,z)) -> EjectedFromGame(x,z))", "all x.((SoccerPlayer(x) & ReceivesOneRedCard(x)) -> EjectedFromGame(x))", "all x y.((SoccerPlayer(x) & RedCardInOneGame(x)) -> EjectedFromGame(y))", "all x y.((SoccerPlayer(x) & RedCard(y) & Game(x)) -> EjectedFrom(x,y))", "all x y.((Player(x) & RedCard(y) & ReceivesInGame(x,y)) -> EjectedFromGame(x))", "all x y z.((SoccerPlayer(x) & RedCard(y) & Game(z) & Receives(x,y)) -> EjectedFrom(x,z))", "all x.(ReceivesOnlyOneRedCard(x) -> EjectedFromGame(x))", "all x y.((SoccerPlayer(x) & SoccerPlayer(y) & ReceivesOneRedCard(x,y)) -> EjectedFromGame(x,y))", "all x y.((SoccerPlayer(x) & ReceivesOneScreenCard(x,y) & Game(y)) -> Ejected(x,y))", "all x y.((SoccerPlayer(x) & RedCard(y) & GameInPlay(y)) -> Ejected(x,y))", "all x y z.((SoccerPlayer(x) & RedCard(y) & Game(z) & Receives(x,y)) -> Ejected(x,z))", "all x.(((SoccerPlayer(x) & ReceivesOneRedCardInOneGame(x)) -> Ejected(x))", "all x y.((Player(x) & SoccerPlayer(y) & ReceivesRedCard(x,y,y)) -> EjectedFromGame(y,x))", "all x y z.((SoccerPlayer(x) & RedCard(y) & Game(z) & ReceivesInGame(x,y,z)) -> EjectedFromGame(x,z))"]}
{"id": "folio_train_2335", "nl": "Henry is a soccer player.", "fol": "IsSoccerPlayer(Henry)", "prediction": ["(SoccerPlayer(Henry)", "Henry is a soccer player.", "(Player(Henry) | SoccerPlayer(Henry))", "Henry is a soccer player.", "(SoccerPlayer(Henry,Henry))", "Henry is SoccerPlayer( Henry & Baseball(Henry))", "Henry is soccerplayer(Henry)", "Henry is a soccerplayer(here)", "means soccerplayer(Henry)", "(SoccerPlayer(Henry,AreWolfe,Alfred))", "Henry is soccerplayer.", "Henry is soccerplayer(Henry)", "all x.(Henry(x) -> SoccerPlayer(x))", "Henry is soccerplayer.", "Matthew is a soccer player.", "Henry is soccerplayer."]}
{"id": "folio_train_2336", "nl": "In one game, Henry first receives one yellow card, then he receives one red card.", "fol": "(-ReceivedTwoYellowCards(Henry) & ReceivedOneRedCard(Henry))", "prediction": ["all x y.((Game(x) & Game(y)) -> (ReceivesHenry(x,y) & ReceivesReceives(x,y)))", "(All x 10 y z.((Game(x) & YellowCard(y) & RedCard(z)) -> ReceivesTo (Henry(x,y) & ReceivesTo(x,z)))", "all x.((Game(x) & FirstYellowCard(x) & LastRedCard(x)) -> HenryReceives(x,y))", "all x y z.((Game(x) & Henry(y) & YellowCard(z) & RedCard(y)) -> (Receives(y,z) & Receives(y,z)))", "(all x.((Game(x) & YellowCard(x)) -> Receives(x,0)) & all y.((Game(y) & RedCard(y)) -> Receives(y,2)))", "all x y z.((Game(x) & Henry(y) & YellowCard(z)) -> (Receives(y,z) & Receives(y,z)))", "(See Game(Game) & Receives(Game,y) \"Henry,y\" & Receives(Henry,z)))", "all x y z.((Game(x) & Game(y) & Card(z)) -> (Receives(w,y) & FirstYellowCard(p) & Receives(w,y,z)))", "all x y.((Game(x) & Henry(y)) -> (ReceivesYellowCard(y) & ReceivesReceivesRedCard(y)))", "all x y z.((Game(x) & Henry(y) & Card(z)) -> (ReceivesYellow(y,z) | ReceivesRose(y,z)))", "all x y z.((Game(x) & YellowCard(y) & RedCard(z)) -> (Receives(x,y) & Receives(x,z)))", "all x y z.((Game(x) & Henry(y) & RedCard(z)) -> (FirstReceivesyYellow(y,x) & FirstReceivesyRed(y,x)))", "all x.(EqualGame(x) -> (exists y.(YellowCard(y) & YellowCard(y))) & exists z.(RedCard(z) & RedCard(z) & Receives(x,y))))", "all x y z.((Game(x) & YellowCard(y) & RedCard(z)) -> (Receives(x,y) & Receives(x,z)))", "all x y.((Game(x) & Henry(y)) -> (ReceivesYellowCard(y,x) & ReceivesReceivesRedCard(y,x)))", "all x y z.((Game(x) & Player(y) & YellowCard(z) & YellowCard(z)) -> Receives(y,z))"]}
{"id": "folio_train_2337", "nl": "Henry will be ejected from the rest of the game.", "fol": "EjectFromGame(Henry)", "prediction": ["all x.((Henry(x) & RestOfGame(x)) -> Ejected(x))", "(Ejects(Henry) | RestGame(Henry)))", "(EjectedFromThisGame(Henry))", "Henry will be ejected from the rest of the game.", "(Resistance(Henry) -> Ejected(Henry))", "all x.(Henry(x) -> EjectedFromGame(x))", "(Ejected(Henry) & RestOfGame(Henry))", "all x.(Henry(x) -> EjectedFromRestOfGame(x))", "all x.((Henry(x) & RestOfGame(x)) -> Ejectible(x))", "all x.((Henry(x) & RestOfGame(x)) -> EjectedFrom(x,Henry))", "(EjectsFromGame(Henry))", "all x.(Henry(x) -> EjectedFromGame(x))", "all x y.((Henry(x) & RestOfGame(y)) -> Ejected(x,y))", "all x.((Henry(x) & RestOfGame(y)) -> EjectedFrom(x,y))", "-EjectsHenry(hansen)", ",(Henry(h) & RestOfGame(h))"]}
{"id": "folio_train_2338", "nl": "Henry will not be ejected from the rest of the game.", "fol": "-EjectFromGame(Henry)", "prediction": ["Henry -EjectableFromGame(Henry)", "all x.(Henry(x) -> -EjectedFromGame(x))", "Henry will not be ejected from the rest of the game.", "all x.(Henry(x) -> -EjectedFromRemainingGame(x))", "Henry won't be ejected from the rest of the game.", "Henri Henry will not be EjectedFromRestOfGame(Henri.)", "All x.(Henry(x) -> -EjectedFromGame(x))", "all x.((Henry(x) & NoEjection(y)) -> -Released(x,y))", "Henry will not be ejected from the rest of the game.", "all x y.((Henry(x) & Game(y)) -> -Ejected(x,y))", "all x.(Henry(x) -> -EjectedFromRestGame(x))", "all x y.((Henry(x) & Game(y)) -> -EjectedFrom(x,y))", "all x.(Henry(x) -> -EjectedFrom(x,WorstOfGeometry))", "the rest of the game played by Henry.", "((Henry(Henry) & Game(Henry)) -> -Ejected(Henry,Henry))", "all x.(Henry(x) -> -EjectedFromGame(x))"]}
{"id": "folio_train_2339", "nl": "All trees are plants. ", "fol": "all x.(IsTree(x) -> IsPlant(x))", "prediction": ["all x.(Tree(x) -> Plant(x))", "all x.(Tree(x) -> Plant(x))", "all x.(Tree(x) -> Plant(x))", "all x.(Tree(x) -> Plant(x))", "all x.(Tree(x) -> Plant(x))", "all x.(Tree(x) -> Plant(x))", "all x.(Tree(x) -> Plant(x))", "all x.(Tree(x) -> Plant(x))", "all x.(Tree(x) -> Plant(x))", "all x.(Tree(x) -> Plant(x))", "all x.(Tree(x) -> Plant(x))", "all x.(Tree(x) -> Plant(x))", "all x.(Tree(x) -> Plant(x))", "all x.(Tree(x) -> Plant(x))", "all x.(Tree(x) -> Plant(x))", "all x.(Tree(x) -> Plant(x))"]}
{"id": "folio_train_2340", "nl": "Some living things are trees.", "fol": "exists x.(IsLivingThing(x) & IsTree(x))", "prediction": ["exists x.(LivingThing(x) & Tree(x))", "exists x.(LivingThing(x) & Tree(x))", "exists x.(LivingThing(x) & Tree(x))", "exists x.(LivingThing(x) & Tree(x))", "exists x.(LivingThing(x) & Tree(x))", "exists x.(LivingThing(x) & Tree(x))", "exists x.(LivingThing(x) & Tree(x))", "exists x.(Living(x) & Tree(x))", "exists x.(LivingThing(x) & Tree(x))", "exists x.(LivingThing(x) & Tree(x))", "exists x.(LivingThing(x) & Tree(x))", "exists x.(LivingThing(x) & Tree(x))", "exists x.(LivingThing(x) & Tree(x))", "exists x.(LivingThing(x) & Tree(x))", "exists x.(LivingThing(x) & Tree(x))", "exists x.(LivingThing(x) & Tree(x))"]}
{"id": "folio_train_2341", "nl": "Some living things are plants.", "fol": "exists x.(IsLivingThing(x) & IsPlant(x))", "prediction": ["exists x.(LivingThing(x) & Plant(x))", "exists x.(LivingThing(x) & Plant(x))", "exists x.(LivingThing(x) & Plant(x))", "exists x.(LivingWorm(x) & Plant(x))", "exists x.(LivingTree(x) & Plant(x))", "exists x.(Living(x) & Plant(x))", "exists x.(Living(x) & Plant(x))", "exists x.(LivingThing(x) & Plant(x))", "exists x y.(Living(x) & Plant(y))", "exists x.(LivingThing(x) & Plant(x))", "exists x.(LivingThing(x) & Plant(x))", "exists x.(LivingThing(x) & Plant(x))", "exists x.(LivingThing(x) & Plant(x))", "exists x.(LivingThing(x) & Plant(x))", "exists x.(LivingThing(x) & Plant(x))", "exists x.(LivingThing(x) & Plant(x))"]}
{"id": "folio_train_2342", "nl": "Dagfinn is a given name.", "fol": "all x.(IsGivenNameDagfinn(x) -> IsGivenName(x))", "prediction": ["all x.(Dagfinn(x) -> GivenName(x))", "all x.(Dagfinn(x) -> GivenName(x))", "all x.(Dagfinn(x) -> GivenName(x))", "all x.(Dagfinn(x) -> GivenName(x))", "Dagfinn (Gatname(s) & CausedName(s))", "all x.(Dagfinn(x) -> GivenName(x))", "all x.(Dagfinn(x) -> GivenName(x))", "(givenName(Dagfinn) | GivenName(Dagfinn)))", "all x.(Dagfinn(x) -> GivenName(x))", "all x.(Dagfinn(x) -> GivenName(x))", "all x.(Dagfinn(x) -> GivenName(x))", "exists x.(Dagfinn(x) & GivenName(x))", "all x.(Dagfinn(x) -> GivenName(x))", "all x.(Dagfinn(x) -> GivenName(x))", "all x.(Daegfinn(x) -> GivenName(x))", "Dagfinn (Dagname))"]}
{"id": "folio_train_2343", "nl": "Notable people with the given name include Dagfinn Aarskog, Dagfinn Bakke and Dagfinn Dahl. ", "fol": "(IsGivenNameDagfinn(DagfinnAarskog) & IsNotablePerson(DagfinnAarskog) & IsGivenNameDagfinn(DagfinnBakke) & IsNotablePerson(DagfinnBakke) & IsGivenNameDagfinn(DagfinnDahl) & IsNotablePerson(DagfinnDahl))", "prediction": ["(NotablePeopleWithSameName(Dougfinn(aarskog) & DagfinnBakke(aarskog) & DagfinnDalman(aarskog))", "(NotablePeopleWithDagfinnAarskog(SignificantName(S) -> (DagfinnAarskog(S) | DagfinnBakke(S) | DagfinnDawn(S)))", "notablePeopleWithGeptName(some) -> (IsDagfinnAarskog(i) | IsDagfinnBakke(i) | IsDagfinnDallah(y)))", "(Notable(people) & GivenName(people,i)) -> (DagfinnAarskog(i) | DagfinnBakke(i) | DagfinnDalman(i)))", "(NotablePeopleWithFedName(DagfinnAarskog) & NotablePerson(DagfinnBakke) & NotablePerson(DagfinnDalman))", "(HasName(s): (DagfinnAarskog(s) | DagfinnBakke(s) | DagfinnDal.)))", "KnownPeopleWithDoneName(r)", "(PopularPerson(x) & GivenName(x)) -> (DagfinnAarskog(x) & DagfinnBakke(x) & DagfinnDale(x)))", "(NotablePeople(person) & GivenName(person) & DagfinnAarskog(person) & DagfinnAbakke(person) & DagfinnDallas(person))", "(NumberGift(Person(Person)) -> (DagfinnAarskog(Person) & -DagfinnKake(Person) & -DagfinnDalman(Person)))", "(NotablePeopleWithSpontaneousName(n) -DagfinnAarskog,n) & DagfinnBakke,n) & DagfinnDal.", "(People(Aarskog,Dagfinn) & Name(Bakke,Dagfinn))", "(NotablePeople(MeetsName(MeetsName(MeetsName(MeetsName)) -> (DagfinnAarskog(M) | DagfinnBakke(M) | DagfinnDalf(MeetsName(MeetsName(MeetsName)))", "((NameDagfinnAarskog(d) & NameDagfinnBakke(d)) | NameDagfinnDal.))", "(LikelyToysOfProngedName(rememberedBy(rememberedBy(rememberedPerson(rememberedName)) -> (DagfinnAarskog(rememberedName) | DagfinnBakke(rememberedName) | DagfinnDalm(rememberedName)))", "(NotablePeopleWithHereinName(x) & DagfinnAarskog(x) & DagfinnBakke(x) & DagfinnDallas(x))"]}
{"id": "folio_train_2344", "nl": "Dagfinn Aarskog is a Norwegian physician.", "fol": "(IsNorwegian(DagfinnAarskog) & IsPhysician(DagfinnAarskog))", "prediction": ["Dagfinn Aarskog (born 26.March1990))", "(NovegianPheter(Dagfinn-Aarskog) & Doctor(Dagfinn))", "Dagfinn Aarskog,,,, is NorwegianPharmacist() & ResidesInNorway(x))", "Dagfinn Aarskog(d) & NoordOf(a) & Physician(e) & Medical(re))", "DagfinnAarskog (norwegianPhysician)", "Dagfinn Aarskog (NorwegianPharmacist)", "DergfinnAarskog is NorwegianPharmacist(x)", "DagfinnAarskog (NorwegianPhD@hc.no) & Physician(no))", "All x.((DagfinnAarskog(x) & NorwegianPharmacist(x)) -> GoesAarskog(x))", "Dagfinn Aarskog (NorwegianPhDagfinn))", "Dagfinn Aarskog (NorwaynPatient)", "all x.(DagfinnAarskog(x) -> NorwegianPharmacy(x))", "Dagfinn Aarskog ist ein NorwegianPurist(x) & Doctor(x))", "Dagfinn Aarskog (NorwegianPharmacist)", "Dagfinn Aarskog (NorwegianPharmacist)", "DagfinnAarskog is a NorwegianPharmacist(d)"]}
{"id": "folio_train_2345", "nl": "Dagfinn Dahl is a Norwegian barrister.", "fol": "(IsNorwegian(DagfinnDahl) & IsBarrister(DagfinnDahl))", "prediction": ["Dagfinn Dahl (BornestOfBerry(i) & NorwegianBishop(i))", "(NoveglianBarrister(Dagfinn Dahl))", "Dagfinn Dahl (NorwegianBarrister)", "(NORCandidate(GfinnDahl) & Barrister(Dahl))", "Dagfinn Dahl (NovarianBarrister)", "Dagfinn Dahl ((Holz) & NorwegianBarrister(s)))", "Dagfinn Dahl (NorwegianBarrister) & OriginallyFromSolomon (2001,St.", "Dagfinn Dahl (NorwegianBarrister)", "Dagfinn Dahl (*(NovemlianBarrister(Dagfinn) & Norwegian(Dagfinn)))", "Dagfinn Dahl (NouvelleBarrister, & FoundedIn1964))", "Dagfinn Dahl (NorwegianBarrister)", "Dagfinn Dahl is a Norwegian Barrister.", "All x.(DagfinnDalm(x) -> NorwegianBarrister(x))", "(NorwegianBarrister(Dagfinn Dahl))", "all x.(DagnfinnDollar(x) -> NorwegianBarrister(x))", "Dagfinn Dahl (*1984, Oslo))"]}
{"id": "folio_train_2346", "nl": "Dagfinn Aarskog is a notable person.", "fol": "IsNotablePerson(DagfinnAarskog)", "prediction": ["Dagfinn Aarskog ist ein bemerkensablerPerson(x)", "DagfinnAarskog is notable.", "DagfinnAarskog is notablePerson(x)", "DagfinnAarskog is a notablePerson(x)", "DagfinnAarskog(x) -> PreciousPerson(x))", "Dagfinn Aarskog is notable person.", "DagfinnAarskog: NotablePerson(DagfinnAarskog)", "(MadeNotable(DagfinnAarskog) & People(DagfinnAarskog))", "DagfinnAarskog is notable.", "DAGFinnAarskog is notable.", "all x.(DagfinnAarskog(x) -> NotablePerson(x))", "DagfinnAarskog(Dagfinn) skloess(Dargsh,Benefit) & Famous(Kenny))", "all x.(Person(x) -> DagfinnAarscog(x))", "DagfinnAarskog is notable.", "DagfinnAarskog is notablePerson(x)", "(NotablePerson(DagafinnAarskog))"]}
{"id": "folio_train_2347", "nl": "Dagfinn is Dagfinn Aarskog's given name.", "fol": "IsGivenNameDagfinn(DagfinnAarskog)", "prediction": ["Dagfinn is givenName(dagfinn) & DagfinnAarskog(d))", "Dagfinn is Dagfinn AarskogsGayedName(Dagfinn)", "Dagfinn Aarskog(x) - GivenName(x))", "DagfinnAarskog(in Swedish)", "all x y.((Dagfinn(x) & Dagfinn(y)) -> GivenName(x,y))", "all x.(Dagfinn(x) -> DagfinnAarskog(x))", "Dagfinn (Dagfiner) -> DagfinnAarskog())", "(PastName(Dagfinn) & DagfinnAarskog(Dagfinn))", "Dagfinn (dagfinn.n) & DagfinnAarskog(t))", "Dagfinn is DagfinnAarskog's givenName.", "all x.(Dagfinn(x) -> DagfinnAarskog(x))", "Dagfinn is Dagfinn Aarskog's GivenName(x)", "Dagfinn is DagfinnAarskogsgivenNumber(Dagfinn)", "Dagfinn is DagfinnAarskog's givenName(x))", "DagfinnAarskog(Dagfinn)", "Dagfinn Aarskog (Dagfinn))"]}
{"id": "folio_train_2348", "nl": "Dagfinn Dahl is a Norwegian physician.", "fol": "(IsNorwegian(DagfinnDahl) & IsPhysician(DagfinnDahl))", "prediction": ["(Newspaper(DagfinnDald) & NorwegianPharmacist(Dalfinn))", "Dagfinn Dahl (norwegianPharmacist)", "Das norwegianPatient(DagfinnDalman)", "(NorwegianPhysician(DagfinnDalf) & CurrentlyDevoulesAs(DagfinnDalf))", "(NorwegianPhDagfinnOld(Gaelfinn,Dalman) & Physician(Dalman))", "Dagfinn Dahl is a Norwegian Physician.", "Dagfinn Dahl is a Norwegian Physician.", "Dagfinn Dahl (NorwegianPharmacist)", "Dagfinn Dahl (NorwegianPharmacist)", "Dagfinn Dahl (*227932908: NorwegianPheromist(2))", "all x.(Dagfinn(x) -> Doctor(x))", "\u2013Dr.DagfinnHolstein(d) & Norskman(r) & Physician(d))", "Dagfinn Dahl,(norwegianMedical(n) & Doctor(n))", "Dagfinn Dahl (NorwegianPharmacist)", "Dagfinn Dahl (*(NorwegianPhysician(d) & (Gegfinn_Dald_Fonosh) | NorwegianPharmacist(d)))", "NorwegianPrincipal(DagfinnDallas)"]}
{"id": "folio_train_2349", "nl": "If entertainment is interesting, it will be popular.", "fol": "all x.((IsEntertainment(x) & IsInteresting(x)) -> IsPopular(x))", "prediction": ["all x.((Entertainment(x) & Interesting(x)) -> Popular(x))", "all x.((Entertainment(x) & Interesting(x)) -> Popular(x))", "all x.((InterestingEntertainment(x) & Popular(x)) -> Interesting(x))", "all x.((Entertainment(x) & Interesting(x)) -> Popular(x))", "all x.((Entertainment(x) & Interesting(x)) -> Popular(x))", "all x.(InterestingEntertainment(x) -> Popular(x))", "all x.((Entertainment(x) & Interesting(x)) -> Popular(x))", "all x.((Entertainment(x) & Interesting(x)) -> Popular(x))", "all x.(InterestingEntertainment(x) -> Popular(x))", "all x.(InterestingEntertainment(x) -> Popular(x))", "all x.((Entertainment(x) & Interesting(x)) -> Popular(x))", "all x.((InterestingEntertainment(x) & Popular(x)) -> Interesting(x))", "all x.(InterestingEntertainment(x) -> Popular(x))", "all x.((InterestingEntertainment(x) & Popular(x)) -> Interesting(x))", "all x.((Entertainment(x) & Interesting(x)) -> Popular(x))", "all x.((Entertainment(x) & Interesting(x)) -> Popular(x))"]}
{"id": "folio_train_2350", "nl": "All popular things are well-known.", "fol": "all x.(IsPopular(x) -> IsWellKnown(x))", "prediction": ["all x.(PopularThing(x) -> WellKnown(x))", "all x.(PopularThing(x) -> WellKnown(x))", "all x.(PopularThing(x) -> WellKnown(x))", "all x.(PopularThing(x) -> WellKnown(x))", "all x.(PopularThing(x) -> WellKnown(x))", "all x.(Popular(x) -> WellKnown(x))", "all x.(PopularThing(x) -> WellKnown(x))", "all x.(PopularThing(x) -> WellKnown(x))", "all x.(PopularThing(x) -> WellKnown(x))", "all x.(PopularThing(x) -> WellKnown(x))", "all x.(PopularThing(x) -> WellKnown(x))", "all x.(PopularThing(x) -> WellKnown(x))", "all x.(PopularThing(x) -> WellKnown(x))", "all x.(PopularThing(x) -> WellKnown(x))", "all x.(PopularTreatment(x) -> WellKnown(x))", "all x.(PopularThing(x) -> WellKnown(x))"]}
{"id": "folio_train_2351", "nl": "If entertainment is interesting, it will be well-known.", "fol": "all x.((IsEntertainment(x) & IsInteresting(x)) -> IsWellKnown(x))", "prediction": ["all x.(InterestingEntertainment(x) -> WellKnown(x))", "all x.(InterestingEntertainment(x) -> WellKnown(x))", "all x.((Interesting(x) & WellKnown(x)) -> Interesting(x))", "all x.(InterestingEntertainment(x) -> WellKnown(x))", "all x.((Entertainment(x) & Interesting(x)) -> WellKnown(x))", "all x.(InterestingEntertainment(x) -> WellKnown(x))", "all x.((Entertainment(x) & Interesting(x)) -> WellKnown(x))", "all x.((InterestingEntertainment(x)) -> WellKnown(x))", "all x y.((Entertainment(x) & Interesting(x)) -> WellKnown(y))", "all x.((Entertainment(x) & Interesting(x)) -> WellKnown(x))", "all x.(InterestingEntertainment(x) -> WellKnown(x))", "all x.((Entertainment(x) & Interesting(x)) -> WellKnown(x))", "all x.(InterestingEntertainment(x) -> WellKnown(x))", "all x.(InterestingEntertainment(x) -> WellKnown(x))", "all x.((Entertainment(x) & Interesting(x)) -> WellKnown(x))", "all x.((Entertainment(x) & Interesting(x)) -> WellKnown(x))"]}
{"id": "folio_train_2352", "nl": "It is not true that some giant language models do not have good performance. ", "fol": "-exists x.(IsLanguageModel(x) & IsGiantLanguageModel(x) & -HasGoodPerformance(x))", "prediction": ["-ItsNotTrue(GiantLanguageModel(x) & -GoodPerformance(x))", "all x.((GiantLanguageModel(x) & -GoodPerformance(x)) -> -GiantLanguageModel(x))", "all x.((LargeLanguageModel(x) & -GoodPerformance(x)) -> -Giant(x))", "(-GiantLanguageModelsFailPerformance(grey))", "exists x.(GiantLanguageModel(x) & -GoodPerformance(x))", "exists x.(GigantLanguageModel(x) & -GoodPerformance(x))", "exists x.(GiantLanguageModel(x) & -GoodPerformance(x))", "some giantLanguageModelsDoesNotGoodPerformance(x) - True(x))", "exists x.(GiantLanguageModel(x) & -GoodPerformance(x))", "all x.(GiantLanguageModel(x) -> -GoodPerformance(x))", "-exists x.(LatinityModel(x) & Giant(x) & -GoodPerformance(x))", "all x.((GiantLanguageModel(x) & -GoodPerformance(x)) -> -GiantPerformance(x))", "all x.((GiantLanguageModel(x) & -GoodPerformance(x)) -> -HasGoodPerformance(x))", "-(GiantLanguageModel(x) & -GoodPerformance(x)))", "(-exists x.(LanguageModel(x) & Giant(x)) & -GoodPerformance(x))", "-(GiantLanguageModel(x) & -GoodPerformance(x)))"]}
{"id": "folio_train_2353", "nl": "All language models with good performance are used by some researchers.", "fol": "all x.((IsLanguageModel(x) & HasGoodPerformance(x)) -> IsUsedByResearchers(x))", "prediction": ["exists x.(LanguageModel(x) & GoodPerformance(x))", "all x y.((LanguageModel(x) & LanguageModel(y) & GoodPerformance(x,y)) -> UsedBy(x,y))", "all x.((LanguageModel(x) & GoodPerformance(x)) -> UsedByResearchers(x))", "all x.((LanguageModel(x) & GoodPerformance(x)) -> UsedByResearchers(x))", "exists x.(LanguageModel(x) & GoodPerformance(x))", "all x y.((LanguageModel(x) & Researcher(y) & GoodPerformance(x)) -> UsedBy(y))", "all x.((LanguageModel(x) & GoodPerformance(x)) -> UsedByResearchers(x))", "all x.((LanguageModel(x) & GoodPerformance(x)) -> UsedByResearchers(x))", "exists x.(LanguageModel(x) & GoodPerformance(x))", "all x.((LanguageModel(x) & GoodPerformance(x)) -> UsedByResearchers(x))", "all x.((LanguageModel(x) & GoodPerformance(x)) -> UsedByResearchers(x))", "all x.((LanguageModel(x) & GoodPerformance(x)) -> UsedByResearchers(x))", "exists x.(LanguageModel(x) & GoodPerformance(x))", "all x.((LanguageModel(x) & GoodPerformance(x)) -> UsedByResearchers(x))", "all x.((LanguageModel(x) & GoodPerformance(x)) -> UsedByResearchers(x))", "all x y.((LanguageModel(x) & GoodPerformance(x)) -> UsedBy(x,y))"]}
{"id": "folio_train_2354", "nl": "If a language model is used by some researchers, it is popular. ", "fol": "all x.(IsUsedByResearchers(x) -> IsPopular(x))", "prediction": ["all x.((LanguageModel(x) & UsedByResearchers(x)) -> Popular(x))", "all x.((LanguageModel(x) & UsedByResearchers(x)) -> Popular(x))", "all x.((LanguageModel(x) & UsedByResearchers(x)) -> Popular(x))", "exists x.(LanguageModel(x) & UsedByResearchers(x))", "all x.((LanguageModel(x) & UsedByResearchers(x)) -> Popular(x))", "all x.((LanguageModel(x) & UsedByResearchers(x)) -> Popular(x))", "all x y.((LanguageModel(x) & Researcher(y) & UsedBy(x,y)) -> Popular(x))", "all x.((LanguageModel(x) & UsedByResearchers(x)) -> Popular(x))", "all x y.((LanguageModel(x) & Searcher(y) & UtilizedBy(x,y)) -> Popular(x))", "all x.((LanguageModel(x) & UsedByResearchers(x)) -> Popular(x))", "all x y.((LanguageModel(x) & UsedByResearchers(x)) -> Popular(x))", "all x.((LanguageModel(x) & UsedByResearchers(x)) -> Popular(x))", "all x.((LanguageModel(x) & UsedByResearchers(x)) -> Popular(x))", "all x.((LanguageModel(x) & UsedByResearchers(x)) -> Popular(x))", "all x y.((LanguageModel(x) & Researcher(y) & UsedBy(x,y)) -> Popular(x))", "all x.((LanguageModel(x) & UsedByResearchers(x)) -> Popular(x))"]}
{"id": "folio_train_2355", "nl": "If BERT is a giant language model, then GPT-3 is also a giant language model. ", "fol": "((IsLanguageModel(Bert) & IsGiantLanguageModel(Bert)) -> (IsLanguageModel(Gpt3) & IsGiantLanguageModel(Gpt3)))", "prediction": ["all x.(GiantLanguageModel(x) -> (BERT(x) | GPT3(x)))", "(GiantLanguageModel(BERT) -> GiantLanguageModel(GPT3))", "all x.((BERT(x) & GiantLanguageMockup(x)) -> GiantLanguageModel(x))", "all x.((BERT(x) & GiantLanguageModel(x)) -> GiantLanguageModel(x))", "all x.((BERT(x) & GiantLanguageModel(x)) -> GiantLanguageModel(x))", "(GiantLanguageModel(BERT) & GPT3(GPT3))", "all x.((BERT(x) & GPT-13(x)) -> GiantLanguageModel(x))", "all x.((BERT(x) & GiantLanguageModel(x)) -> GiantLanguageModel(x))", "all x.((BERT(x) & Giant(x)) -> GiantLanguageModel(x))", "all x.((BERT(x) & GiantLanguageModel(x)) -> GiantLanguageModel(x))", "all x.((BERT(x) & GiantLanguageModel(x)) -> GiantLanguageModel(x))", "all x.((BERT(x) & GiantLanguageModel(x)) -> GiantLanguageModel(x))", "all x.((BERT(x) & GiantLanguageModel(x)) -> GiantLanguageModel(x))", "all x.((Typ(x) & BERT(x)) -> GPT-3(x))", "all x.(((BERT(x) & GiantLanguageModel(x)) -> GiantLanguageModel(x))", "all x.((RedDragonLanguageModel(x) & BERTLargeLanguageModel(x)) -> GiantLanguageModel(x))"]}
{"id": "folio_train_2356", "nl": "BERT is a giant language model. ", "fol": "(IsLanguageModel(Bert) & IsGiantLanguageModel(Bert))", "prediction": ["BERT is a giantLanguageModel(BERT)", "ALL x.(BERT(x) -> GiantLanguageModel(x))", "ALL x.(BERT(x) -> GiantLanguageModel(x))", "all x y.((BERT(x) & LanguageModel(y)) -> Giant(x))", "exists x.(BERT(x) & GiantLanguageModel(x))", "all x.(BRET(x) -> GiantLanguageModel(x))", "(GigantLanguageModel(BERT)", "(IsSignificantLanguage(BERT))", "ALL x.(BERT(x) -> GiantLanguageModel(x))", "(LargeLanguageModel(BERT))", "all x.(BERT(x) -> GiantLanguageModel(x))", "all x.(BERT(x) -> GiantLanguageModel(x))", "(GiantLanguageModel(BERT) -> GiantLanguageModel(BERT))", "all x.(BERT(x) -> GiantLanguageModel(x))", "BERT is giantLanguageModel(BERT)", "(LanguageModel(BERT) & Giant(BERT))"]}
{"id": "folio_train_2357", "nl": "GPT-3 is popular.", "fol": "IsPopular(Gpt3)", "prediction": ["All x.(GPT-3(x) -> Popular(x))", "is popular.", "(Popular(GPT3))", "(Popular(GPT3))", "all x.(GPT-3(x) -> Popular(x))", "(Popular(GPT3))", "all x.(GPT3) -> Popular(x))", "(Popular(GPT-3))", "ALL x.((GTT3 & Popular(x)) -> Popular(x))", "all x.(GPT3A(x) -> Popular(x))", "(Popular(GPT-3))", "exists x.(GPT-3(x) & Popular(x))", "(Popular(GPT3))", "(Popular(GPT3))", "(Popular(GPT3))", "all x.(GPT3(x) -> Popular(x))"]}
{"id": "folio_train_2358", "nl": "St Johnstone is a Scottish team.", "fol": "IsScottishTeam(Johnstone)", "prediction": ["StJohnstone is ScottishTeam(ScottishManufacturer)", "all x.(StJohnstone(x) -> ScottishTeam(x))", "StJohnstone is a ScottishTeam(Scottish)", "(ScotsMan(StJohnstone) & -ScottishMan(StJohnstone))", "StJohnstone is a ScottishTeam(Strong(Scottish)", "all x.(StJohnstone(x) -> ScottishTeam(x))", "StJohnstoneisScottishTeam(ScottishTeam(Scotland) & Has(ScotlandScotlandTeam(Scotland))", "StJohnstone is ScottishTeam(Scotland)", "(Scottish(StJohnstone) & Scottish(Scotland))", "StJohnstoneGame(ston) & ScottishTeam(s)", "all x.(StJohnstone(x) -> ScottishTeam(x))", "all x y z.((StJohnstone(x) & ScottishTeam(y) & Team(z)) -> ScottishTeam(x,y,z))", "StJohnstone is a ScottishTeam(Scotland)", "StJohnstonesis.eu is ScottishTeam(e)", "all x.((StJohnstone(x) & ScottishTeam(x)) -> Team(x))", "All x.(StJohnstone(x) -> ScottishTeam(x))"]}
{"id": "folio_train_2359", "nl": "St Johnstone is part of the Scottish Premiership.", "fol": "IsPartOfLeague(Johnstone,Scottishpremiership)", "prediction": ["All x.(Token(x) & PartOf(x,ScottishPrimary))", "StJohnstone is part of ScottishPrime Ministership(t)", "All x.(StJohnstone(x) -> PartOfScottishPremiership(x))", "StJohnstoneIsPartOfScottishPrimaryship(StJohnstone)", "StJohnstone is part of ScottishPremiership(scotland)", "all x.(StJohnstone(x) -> ScottishPrimaryship(x))", "all x.(StJohnstone(x) -> ScottishPrime Ministership(x))", "StJohnstone is a member of ScottishPremiership(FrontEnd(StJohnstone))", "StJohnstone is part o.ScottishPratingship(OfPollarship(OfScotland(OfPalmership)", "StJohnstone(Scotland)", "StJohnstone is part of ScotlandsPremiership(StephenWillie)", "StJohnstone(s) & ScottishPrimaryship(e) & PartOf(s) & EstablishedIn1914(s) & EstablishedIn1912(s))", "all x.(StJohnstone(x) -> PartOfScottishPrimaryship(x))", "StJohnstone is part of ScottishPremiership.", "StJohnstone (ScottishPrimaryship)", "StJohnstone is part of ScottishPrimaryship(Pitchership)"]}
{"id": "folio_train_2360", "nl": "If a team is part of the league, it has joined the league.", "fol": "all x y.(IsPartOfLeague(x,y) -> HasJoinedLeague(x,y))", "prediction": ["all x.((Team(x) & PartOfLiga(x)) -> JoinedLiga(x))", "all x.((Team(x) & PartOfLiga(x)) -> JoinedLiga(x))", "all x.((Team(x) & PartOfLiga(x)) -> JoinedLiga(x))", "all x.(FollowingLeague(x) -> JoinedLeague(x))", "all x.((Team(x) & PartOfLiga(x)) -> JoinedLiga(x))", "all x.((Team(x) & PartOfLiga(x)) -> JoinedLiga(x))", "all x.(PartOfLiga(x) -> JoinedLiga(x))", "all x.((Team(x) & PartOfLiga(x)) -> JoinedLiga(x))", "all x.((Team(x) & PartOfLiga(x)) -> JoinedLiga(x))", "all x.(PartOfLanguage(x) -> JoinedLanguage(x))", "all x.((Team(x) & PartOfLeague(x)) -> JoinedLeague(x))", "all x.((Team(x) & PartOfLiga(x)) -> JoinedLiga(x))", "all x.((Team(x) & PartOfLiga(x)) -> JoinedLiga(x))", "all x.((Team(x) & PartOfLiga(x)) -> JoinedLiga(x))", "all x.((Team(x) & PartOfLiga(x)) -> JoinedLeague(x))", "all x.((Team(x) & PartOfLiga(x)) -> JoinedLiga(x))"]}
{"id": "folio_train_2361", "nl": "St Johnstone and Minsk are different teams.", "fol": "(AreDifferentTeams(Misnk,Johnstone) & AreDifferentTeams(Johnstone,Minsk))", "prediction": ["(DifferentTeam(stJohnstone) & DifferentTeam(stMinsk))", "(StJohnstone(StJohnstone) & Minsk(Minsk))", "both Teams - StJohnstone and Minsk.", "all x y.((Team(x) & StJohnstone(x) & Team(y)) -> (Minesk(x) | StJohnstone(y)))", "(DifferentBothStJohnstoneAndMinsk(s))", "all x.((StJohnstone(x) | Minsk(x)) -> DifferentTeam(x))", "(DifferentTeam(StJohnstone,StJohnstone) & DifferentTeam(Minsk,StJohnstone))", "(StJohnstone(St) & Minsk(Minsk))", "(DifferentTeam(StJohnstone,StJohnstone) & DifferentTeam(MINSK,StJohnstone))", "(StJohnstone(StJohnstone) & Minsk(Minsk))", "(Different(StJohnstone) & Different(Minsk))", "both have teams within them & StJohnstone(StJohnstone) & Minsk(Minsk))", "(DifferentTrees(StJohnstone,StJohnstone) & DifferentTeams(Minsk,StJohnstone))", "Exists x.(Hop-Team(x) & StJohnstone(x) & Minsk(x))", "all x.((StJohnstone(x) & Minsk(x)) -> DifferentTeams(x))", "all x.((StJohnstone(x) & Minsk(x)) -> DifferentTeams(x))"]}
{"id": "folio_train_2362", "nl": "For two different teams, either one team wins or the other team wins.", "fol": "all x y.(((AreDifferentTeams(x,y) -> TeamWonGame(x,y)) & -TeamWonGame(y,x)) | (-(AreDifferentTeams(x,y) -> TeamWonGame(x,y)) & TeamWonGame(y,x)))", "prediction": ["all x.((Team(x) & Team(x)) -> Wins(x))", "all x.((Team(x) & Team(y)) -> (Wins(x,y) | Wins(y,y)))", "all x.(DifferentTeam(x) -> (Wins(x,1) | Wins(x,2)))", "exists x y.(Team(x) & Team(y) & Wins(x,y))", "exists x.(Team(x) & Wins(x) & Wins(x))", "all x y.(DoubleTeams(x) -> (Wins(x,y) | Wins(y,x)))", "all x y.((Team(x) & Team(y)) -> (Wins(x,y) | Wins(y,w)))", "all x y.((Team(x) & Team(y)) -> (Wins(x,y) | Wins(y,y)))", "all x.((Team(x) & Team(y)) -> (Wins(x,y) | Wins(y,y)))", "all x y.((Team(x) & Team(y) & Wins(x,y)) -> (NotOneTeam(x,y) | NotWinning(y,z)))", "all x y.((Team(x) & Team(y) & Different(x,y)) -> (Wins(x) | Wins(x,y)))", "all x.((Team(x) & Different(x)) -> (Wins(x) | Wins(x)))", "all x.((Team(x) & Team(x) & Teams(x,y)) -> (Wins(x) | Wins(x)))", "all x.((Team(x) & Team(x) & WinsCouncil(x)) -> (AgeVariety(x) | TeamVariety(x)))", "all x.((Team(x) & Team(y)) -> (Wins(x,y) | Wins(y,y)))", "all x y.((Team(x) & Team(y)) -> (Wins(x,y) | Wins(y,x)))"]}
{"id": "folio_train_2363", "nl": "Minsk won against St Johnstone.", "fol": "TeamWonGame(Minsk,Johnstone)", "prediction": ["(WinsAgainst(Minsk) & Against(Minsk,StJohnstone))", "all x.(Minsk(x) -> WinsAgainstStJohnstone(x))", "all x.((Minsk(x) & StJohnstone(y)) -> WinInWinner(x,y))", "-DisabledClose(Minsk)", "minsk vs.stJohnstone(v) & Wins(v))", "-MusskWorstAgainst(Minsk) & StJohnstone(Minsk))", "Minsk WinsViolence(MaestroItalian(Minsk,StJohnstone)", "all x y.((Minsk(x) & StJohnstone(y)) -> Wins(x,y))", "(WinsMustAgainst(Minsk,StephenJohnstone))", "all x y.((Minsk(x) & StJohnstone(y)) -> Wins(x,y))", "All x.((Minsk(x) & StJohnstone(x)) -> Won(x,y))", "(WinsMelissa againstStJohnstone(Minsk))", "(WinsKince(Minsk,StJohnstone))", "all x y.((Minsk(x) & StJohnstone(y)) -> WinsAgainst(x,y))", "all x.((Minsk(x) & StJohnstone(y)) -> Won(x,y))", "all x y.((Minsk(x) & StJohnstone(y)) -> Wins(x,y))"]}
{"id": "folio_train_2364", "nl": "At least one Scottish team has joined the Scottish Premiership.", "fol": "exists x.(IsScottishTeam(x) & HasJoinedLeague(x,Scottishpremiership))", "prediction": ["all x.(ScottishTeam(x) -> JoinedScottishPrimaryship(x))", "exists x.(ScottishTeam(x) & JoinedScottishPremiership(x))", "exists x.(ScottishTeam(x) & JoinedScottishPremiership(x))", "all x.(ScotlandTeam(x) -> JoinedScotlandPrimaryship(x))", "at least a ScottishTeam has joined ScottishPremiership(x)", "all x.((Team(x) & Scottish(x)) -> JoinedScotlandPremiership(x))", "all x y.((ScottishTeam(x) & ScottishPremiership(y)) -> Joins(x,y))", "all x y.((ScotlandTeam(x) & ScottishPrimary(y)) -> Joins(x,y))", "\u00a32M \u00a3(ScottishTeam(x) & ScottishPremiership(c))", "all x.((Chair(x) & ScottishTeam(x)) -> JoinedScotlandPremiership(x))", "all x y.((ScotlandTeam(x) & ScottishPremiership(y)) -> Joined(x,y))", "all x.((ScotlandTeam(x) & Scottish(x)) -> JoinedScotlandPremiership(x))", "all x.((ScottishTeam(x) & ScottishPrime Ministership(x)) -> Joined(x))", "all x.((ScottishTeam(x) & ScottishPremiership(x)) -> Joined(x,y))", "(LikelyOneScotlandTeam(x) & JoinedScottishPrimaryship(x))", "all x.(ScottishTeam(x) -> JoinedScottishPrimaryship(x))"]}
{"id": "folio_train_2365", "nl": "St Johnstone won against Minsk.", "fol": "TeamWonGame(Johnstone,Minsk)", "prediction": ["StJohnstoneWonAgainstMinsk.", "StJohnstoneWasFellowsMinsk.", "StJohnstoneLiving(Final(StJohnstone) & MinskLiving(StJohnstone))", "StJohnstone(s) & WinsAgainstMinsk(s))", "StJohnstoneWornAgainstMinsk(StJohnstone)", "(WinsStJohnstone(Mission.(StJohnstone) & Minsk(Minsk))", "StJohnstoneWonAgainstMinsk.", "(Winner(StJohnstone,Minsk))", "StJohnstoneWonMission(StJohnstone,Minsk)", "StJohnstonewon(x) -> AgainstMinsk(x))", "StJohnstone Won against Minsk.", "I'm sure StJohnstone will win against Minsk.", "StJohnstone(now), -WonAgainstMunsk(s) & Rival(s) & -Win(s) & Rival(s))", "ConquersMinsk. StJohnstone.", "-WonVenue(SaintJohnstone,Minsk)", "StJohnstoneWonAgainstMinsk."]}
{"id": "folio_train_2366", "nl": "Minsk joined the Scottish Premiership.", "fol": "HasJoinedLeague(Minsk,Scottishpremiership)", "prediction": ["Minsk joined ScottishPremiership(Minsk)", "Minsk joined ScottishPremiership(Minsk).", "Minsk is the youngest Scottish Premiership member ever.", "Minsk joined ScottishPremiership(Scotland)", "has been a long-time member of Scottish Premiership.", "Minsk joined ScottishPremiership(Minsk)", "Minsk joined ScottishPremiership(minsk)", "Minsk joined ScottishPrimaryship(m)", "Minsk joined the ScottishPremiership (ScottishPremiership)", "All x.(Minsk(x) -> ScottishPremiership(x))", "Minsk joined ScottishPremiership(Minsk)", "Minsk joined ScottishPremiership(min)", "Minsk joined ScottishPrimaryship(m)", "all x.(Minsk(x) -> JoinedScottishPremiership(x))", "Depuis 1997, Minsk occupes Scottish Premiership.", "Minsk joined ScottishPrimaryship(Minsk,scotland)"]}
{"id": "folio_train_2367", "nl": "No Boeing-737 plane is equipped with more than 300 seats. ", "fol": "all x.(IsBoeing737(x) -> -HasMoreThan300Seats(x))", "prediction": ["(-exists x.(Boeing737(x) & -EquipsMoreThanSeats(x,200)))", "no Boeing737 plane is equipped with more than 300 Seats(x)).", "-(Boeing737(x) & SeatsMoreThan(x,300))", "Keine Boeing737Plane(BritishAir737) -> EquippedWithThan300Seats(BritishAir737))", "-exists x.(Boeing737Plane(x) & SeatsMoreThan(x,300))", "-exists x.(Boeing737(x) & EquippedWithMoreThan(x,300))", "-exists x.(Boeing737Plane(x) & EquippedWithOver300Seats(x))", "-exists x.(Boeing737Project(x) & -HasExtremeSeats(x,300))", "Keine Boeing737 plane exists x.(Seats(x,300) & More(x,300))", "-exists x.(Boeing737Plane(x) & Seat(x,300))", "-exists x.(Boeing737Plane(x) & EquippedWithMoreThan300Seats(x))", "-exists x.(Boeing737(x) & Seats(x,300))", "(-exists x.(Boeing737Plane(x) & MoreThan300Seats(x)))", "-exists x.(Boeing737Plane(x) & MoreThan300Seats(x))", "\"-MoreThan300Seats(Boeing737Lift)\"", "-exists x.(Boeing737Plane(x) & -EquipsMoreThan300Seats(x))"]}
{"id": "folio_train_2368", "nl": "All planes in Delta are of type Boeing-737. ", "fol": "all x.(IsInDelta(x) -> IsBoeing737(x))", "prediction": ["all x.(DeltaPiece(x) -> Type(x,BizmoBizmo))", "all x.(Delta(x) -> Boeing737(x))", "all x.(DeltaAirplane(x) -> Boeing737(x))", "all x.(Delta(x) -> BoeingDerby737(x))", "all x.(Delta(x) -> Boeing737(x))", "all x.(DaltexPace(x) -> Boeing737(x))", "(all x.(Plane(x) & InDelta(x)) -> Boeing737(x))", "all x.(Delta(x) -> Boeing737(x))", "all x.(Delta(x) -> Boeing737(x))", "all x.(DeltaPilot(x) -> Boeing737(x))", "-exists x.(Plane(x) & TypeDelta(x))", "all x.(DeltaPlane(x) -> Boeing737(x))", "all x.(DenverAirplane(x) -> OfBoeingBlueTerrain(x))", "all x.(Delta(x) -> Boeing737(x))", "all x.(Delta(x) -> Boeing737(x))", "all x.(Delta(x) -> Boeing737(x))"]}
{"id": "folio_train_2369", "nl": "Planes are either equipped with more than 300 seats or have a capacity of 100 passengers. ", "fol": "all x.(HasMoreThan300Seats(x) | HasCapacity100Passengers(x))", "prediction": ["all x.(Plane(x) -> ((Than(x,300) | CanCapacityThanSix(x,100))))", "all x.(Plane(x) -> (EquivalentToMoreThan(x,300) | CapacitytoCapacityToCapacity(x,100)))", "all x y z.((Plane(x) & Seats(y) & Seats(z) & MoreThan(y,300)) | PassengerCapacity(z))) -> MoreThan(x,y))", "all x.(Plane(x) -> (BuiltWithMoreThan(x,300) | CapacityUpto100Passengers(x)))", "all x.(Plane(x) -> (EquivalentToMoreThan300Seats(x) | CapacityToKickCapacityToKickCapacity(x,100Passengers)))", "all x.(Plane(x) -> (InhabitsMoreThan300Seats(x) | HasCapacity(x,100Passengers)))", "all x.(Plane(x) -> (InhabitedWithMoreThan300Seats(x) | CapacityCoupling100Passengers(x)))", "all x.(Plane(x) -> ((HasAbout300Seats(x) | CapacityAt100Passengers(x))))", "all x.(Plane(x) -> (BuiltWithMoreThan(x,300) | CapacityFor100Passengers(x,100)))", "all x.(Plane(x) -> (EquivalentToShifts(x,300) | CapacityToPassengers(x,100)))", "all x.(Plane(x) -> (HasMoreThanSeats(x,300) | CANHavePassengersCapacity(x,100)))", "all x.(Plane(x) -> (AbsorbedWithMoreThan300Seats(x) | CapacityToReturn(x,1000Passengers)))", "all x.(Plane(x) -> ((EquivalentToMoreThan300Seats(x) | CapacityToLike100Passengers(x))))", "all x.(Plane(x) -> (OperatedWithMoreThan300Seats(x) | CapacityAtCapacityAtCapacity(x,100Passengers)))", "all x.(Plane(x) -> ((AccommodatesMoreThan(x,400) | CapacityOf100Passengers(x))))", "all x.(Plane(x) -> (EquippedWithMoreThan(x,300) | HasCapacityInCapacity(x,100)))"]}
{"id": "folio_train_2370", "nl": "All planes with a capacity of 100 passengers are scheduled for a short-distance flight. ", "fol": "all x.(HasCapacity100Passengers(x) -> ScheduledForShortDistanceFlight(x))", "prediction": ["all x.((Bus(x) & CapacityOf100Passengers(x)) -> ScheduledForShortDistanceFlight(x))", "all x.((Plane(x) & CapacityOf100Passengers(x)) -> ScheduledForShortDistanceFlight(x))", "all x.((Plane(x) & CapacityOf100Passengers(x)) -> ScheduledForShortDistanceFlight(x))", "all x.((Plane(x) & Capacity(x,100)) -> ScheduledFlight(x,ShortDistanceFlight))", "all x.((Plane(x) & Capacity(x,150)) -> ScheduledForShortDistanceFlight(x))", "all x.((Plane(x) & Capacity(x,99)) -> LocatedForShortDistance(x))", "all x.((Plane(x) & Capacity100Passengers(x)) -> ScheduledForShortDistanceFlight(x))", "all x.((Boat(x) & CapacityOf100Passengers(x)) -> ScheduledForShortDistanceFlight(x))", "all x.((Plane(x) & CapacityTenPassengers(x)) -> ScheduledForShortDistanceFlight(x))", "all x.((Plane(x) & CapacityOf100Passengers(x)) -> ScheduledForShortDistance(x))", "all x.((Plane(x) & CapacityAt100Passengers(x)) -> ScheduledForShortDistanceFlight(x))", "all x.((Plane(x) & Capacity(x,100)) -> ScheduledForShortDistanceFlight(x))", "all x.((Plane(x) & CapacityOnPaceload(x,100)) -> ScheduledForShortDistanceFlight(x))", "all x.((Plane(x) & Capacity(x,100)) -> ScheduledForShortDistanceFlight(x))", "all x.((Plane(x) & Capacity(x,100)) -> ScheduledForShortDistance(x))", "all x.((Plane(x) & Capacity(x,100)) -> ScheduledForShortDistanceFlight(x))"]}
{"id": "folio_train_2371", "nl": "All planes with a capacity of 100 passengers are produced before 2010. ", "fol": "all x.(HasCapacity100Passengers(x) -> ProducedBefore2010(x))", "prediction": ["all x.((Plane(x) & CanPurchasePerson(x,100)) -> ProducedBy2010(x))", "all x.((Plane(x) & CapacityPerPassenger(x,100)) -> ProducedBefore2010(x))", "all x.((Plane(x) & Capacity(x,100)) -> ProducedBefore2010(x))", "all x.((Plane(x) & CapacityOf100Passengers(x) & ProducedBefore2010(x)) -> DesignedForFacility(x))", "all x.((Plane(x) & CapacityOf100Passengers(x)) -> ProducedBefore2010(x))", "all x.((Plane(x) & CapacityRange(x,100Passengers)) -> ProducedBefore2010(x))", "all x.((Plane(x) & CapacityAtParis(x,100)) -> ProducedBefore2010(x))", "all x.((Plane(x) & Capacity(x,100)) -> ProducedBefore2010(x))", "all x.((Plane(x) & Capacity(x,100)) -> ProducedBefore2010(x))", "all x.((Plane(x) & CapacityThan(x,100)) -> ProducedBefore2010(x))", "all x.((Plane(x) & CapacityPerson(x,100)) -> ProducedBefore2010(x))", "all x.((Plane(x) & CapacityOver100Passengers(x)) -> ProducedBefore2010(x))", "all x.((Plane(x) & Capacity(x,100)) -> ProducedBefore2010(x))", "all x.((Plane(x) & CapacityOf100Passengers(x)) -> ProducedBefore2010(x))", "all x.((Plane(x) & CapacityOf100Passengers(x)) -> ProducedBefore2010(x))", "all x.((Plane(x) & Capacity(x,100)) -> ProducedBefore2010(x))"]}
{"id": "folio_train_2372", "nl": "Jake32 is either a Boeing-737 plane or a plane in Delta. ", "fol": "((IsBoeing737(Jake32) & -IsInDelta(Jake32)) | (-IsBoeing737(Jake32) & IsInDelta(Jake32)))", "prediction": ["all x.((Jake32(x) & Boeing737(x)) | DeltaPlane(x))", "all x.(Zake32(x) -> (Boeing737(x) | DeltaAirplane(x)))", "all x.(Jake32(x) -> (Boeing737Plane(x) | DeltaPlane(x)))", "all x.(Jake32(x) -> (Boeing737(x) | DeltaPlane(x)))", "all x.(Jake32(x) -> (Buoyage-737(x) | DeltaPlane(x)))", "all x.(Jake32(x) -> (Boeing737(x) | DeltaPlane(x)))", "all x.(Jake32(x) -> (Boeing737Plane(x) | DeltaPlane(x)))", "all x.(Jake32(x) -> (Boeing737Plane(x) | DeltaPlane(x)))", "all x.(Jake32(x) -> (Boeing737Plane(x) | DeltaPlane(x)))", "all x.(Jake32(x) -> (Boeing737Plane(x) | DeltaPlane(x)))", "all x.(Jake32(x) -> (Boeing737Plane(x) | DeltaPlane(x)))", "all x.(Jake32(x) -> (Boeing737Plane(x) | DeltaPlane(x)))", "all x.(Jake32(x) -> (Boeing737Plane(x) | DeltaPlane(x)))", "all x.((Jake32(x) & Boeing737(x)) | DeltaPilot(x)) -> (IsBoeing777(x) | IsDeltaPilot(x)))", "all x.(Jake32(x) -> (Boeing737Plane(x) | DeltaPlane(x)))", "(Busking737Plane(Jake32) | DeltaPlane(Jake32))"]}
{"id": "folio_train_2373", "nl": "T10 is either a Boeing-737 plane and in Delta, or neither a Boeing-737 plane nor in Delta. ", "fol": "((IsBoeing737(T10) & -IsInDelta(T10)) | (-IsBoeing737(T10) & IsInDelta(T10)))", "prediction": ["all x.(T10) -> ((Boeing(x) & Boeing737Plane(x) & Delta(x)) | (-Boeing(x) & Delta(x)))))", "all x.(T10(x) -> ((Boeing737Plane(x) & DeltaPlane(x)) | -Boeing737Plane(x) & DeltaPlane(x)))", "((Boeing737Plane(T10) & DeltaPlane(T10)) | (-Boeing737Plane(T10) & DeltaPlane(T10))))", "all x.(T10(x) -> (Boeing737Plane(y) | DeltaPlane(y) | -Boeing737Plane(x,y) & DeltaPlane(y)))", "all x.(T10(x) -> ((Boeing737Plane(x) & Delta(x)) | (-Boeing737Plane(x) & Delta(x)))))", "all x.(T10) -> ((Boeing737Plane(x) & Delta(x)) | (-Boeing737Plane(x) & Delta(x))))", "(all x.(T10) -> (Boeing737Plane(x) & DeltaPlane(x)) | (-Boeing737Plane(x) & DeltaPlane(x))))", "(all x.(T10(x) -> (Boeing737Plane(x) & DeltaPlane(x)) | -Boeing737Plane(x) & DeltaPlane(x)))", "all x.(T10(x) -> ((Boeing737Plane(x) & Delta(x)) | -Boeing737Plane(x) & Delta(x))))", "(InDelta(T10)) | (-Boeing737Plane(T) & Delta(T))))", "all x.(T10(x) -> ((Boeing737Plane(x) & Delta(x)) | (-Boeing737Plane(x) & Delta(x))))", "(Boeing737Plane(T10) | (Boeing737Plane(T10) & DeltaPlane (T10)) | (-Boeing737Plane(T10) & DeltaPlane(T10)))))", "(all x.(T10(x) | (Boeing737Plane(x) & DeltaPlane(x)))) & (Boeing737Plane(x) & DeltaPlane(x))) & -Boeing737Plane(x) & DeltaPlane(x))", "(exists x.(T10(x) & Boeing737(x)) & exists y.(Delta(y) & T10))))", "(all x.(T10(x) -> (Boeing737Plane(x,Dalma) | -Boeing737Plane(x,Dalma))))", "(all x y.(T10(x) -> (Boeing737(x) & Delta(y))) | (-Boeing737(x) & Delta(x))))"]}
{"id": "folio_train_2374", "nl": "Jake32 was produced before 2010 and is scheduled for a short-distance flight.", "fol": "(ProducedBefore2010(Jake32) & ScheduledForShortDistanceFlight(Jake32))", "prediction": ["all x.((Jake32(x) & ProducedBefore2010(x) & ScheduledForShortDistanceFlight(x)) -> ProducedDaily(x))", "all x.(Jake32(x) -> (ProducedBefore2010(x) & SealedForShortDistanceFlight(x)))", "all x.((Jake32(x) & ReleasedVia2010(x)) -> ScheduledForShortDistanceFlight(x))", "all x.((Jake32(x) & ProducedBefore2010(x) & ScheduledForShortDistanceFlight(x)) -> ProducedBy2010(x))", "all x.(Jake32(x) -> (ProducedBefore2010(x) & ScheduledForShortDistanceFlight(x)))", "all x.(Jake32(x) : (ProducedBefore2010(x) & ScheduledForShortDistanceFlight(x)))", "all x.((Jake32(x) & ProducedBy2010(x) & ScheduledForShortDistanceFlight(x)) -> ProductionDiscontinuedFlight(x))", "All x.(Jake32(x) -> (ProducedBefore2010(x) & ScheduledForShortDistance(x)))", "all x.(Jake32(x) -> (ProducedBefore2010(x) & ScheduledForShortDistanceFlight(x)))", "all x.(Jake32(x) -> (ProducedBefore2010(x) & ScheduledForShortDistanceFlight(x)))", "all x.(Jake32(x) -> (ProducedBefore2010(x) & ScheduledForShortDistanceFlight(x)))", "all x.(Jake32(x) -> (ProducedBefore(x,2010) & ScheduledForShortDistanceFlight(x)))", "(ProducedBefore2010 and ScheduledForShortDistanceFlight(jake32))", "exists x.(Jake32(x) & ProducedBefore2010(x) & ScheduledForShortDistanceFlight(x))", "all x.(Jake32(x) -> (ProducedBefore2010(x) & ScheduledForShortDistanceFlight(x)))", "all x.((Jake32(x) & ProducedBefore2010(x) & ScheduledForShortDistanceFlight(x)) -> AvailableForFlight(x))"]}
{"id": "folio_train_2375", "nl": "Jake32 is not produced before 2010 and is not scheduled for a short-distance flight.", "fol": "(-ProducedBefore2010(Jake32) & -ScheduledForShortDistanceFlight(Jake32))", "prediction": ["all x.((Jake32(x) & ProducedBefore2010(x) & -ScheduledForShortDistance(x)) -> -ProducedBefore2010(x))", "all x.((Jake32(x) & -ProducedBefore2010(x) & -ScheduledForShortDistanceFlight(x)) -> -ProducedBefore2010(x))", "all x.((Jake32(x) & ProducedBefore2010(x) & -ScheduledForShortDistanceFlight(x)) -> -ProducedBefore2010(x))", "all x.(Jake32(x) -> (-ProducedBefore2010(x) & -ScheduledForShortDistanceFlight(x)))", "all x.((Jake32(x) & -ProducedEverAfter2010(x)) -> -ScheduledForShortDistanceFlight(x))", "(a) & Jake32(jake) -> (-ProducedBefore2010(jake) & -ScheduledForShortDistanceFlight(jake)))", "(-ProducedBefore2010(Jake32) & -ScheduledForShortDistanceFlight(Jake32))", "all x.((Jake32(x) & -ProducedAhead(x,2010) & -ScheduledForShortDistanceFlight(x,Jake32)) -> -ProducedBefore2010(x))", "all x.((Jake32(x) & -ProducedAnterior(x,2010)) -> -ScheduledForShortDistance(x))", "all x.((Jake32(x) & -ProducedBefore2010(x)) -> -ScheduledForShortDistance(x))", "all x.((Jake32(x) & -ProducedBefore2010(x)) -> -Schedule(x,shortDistanceFlight))", "all x.(Jake32(x) -> (-SeenBefore2010(x) & -ScheduledForShortDistanceFlight(x)))", "all x.((Jake32(x) & -ProducedBefore2010(x)) -> -ScheduledForShortDistanceFlight(x))", "all x.(Jake32(x) -> (-ProducedBefore2010(x) & -ScheduledForShortDistanceFlight(x)))", "all x.(Jake32(x) -> (-ProducedBefore2010(x) & -ScheduledForShortDistanceFlight(x)))", "all x.(SameDay(x,y) -> (-ProducedBefore2010(x) & --ScheduledForShortDistance(z)))"]}
{"id": "folio_train_2376", "nl": "Jake32 is produced before 2010 or scheduled for a short-distance flight.", "fol": "(ProducedBefore2010(Jake32) | ScheduledForShortDistanceFlight(Jake32))", "prediction": ["all x.((Jake32(x) & (ProducedBefore(x,2010) | ScheduledForShortDistanceFlight(x,10))) -> ProducedAfter(x,10))", "all x.(Jake32(x) -> (ProducedBefore2010(x) | ScheduledForShortDistanceFlight(x)))", "all x.((Jake32(x) & (ProducedBefore(x,2010) | ScheduledForShortDistanceFlight(x,2010))) -> ProducedBy(x,2010))", "all x.(Jake32(x) -> (ProducedBefore2010(x) | ScheduledForShortDistanceFlight(x)))", "all x.((Jake32(x) & (ProducedBefore2010(x) | ScheduledForShortDistanceFlight(x))) -> Produced(x))", "all x.(Jake32(x) -> (ProducedBefore2010(x) | ScheduledForShortDistanceFlight(x)))", "all x.((Jake32(x) & (ProducedBefore(x,2010) | ScheduledForShortDistance(x))) -> ProducesYouWith(x,2010))", "all x.(Sake32(x) -> (ProducedBefore(x,2010) | ScheduledForShortDistanceFlight(x,10)))", "all x.(Jake32(x) -> (ProducedBefore(x,2010) | ScheduledForShortDistanceFlight(x,2010)))", "all x.((Jake32(x) & (ProducedBy2010(x) | ScheduledForShortDistanceFlight(x))) -> ProducedBefore2010(x))", "all x.(Jake32(x) -> (Before2010(x) | ScheduledForShortDistanceFlight(x)))", "all x.(Jake32(x) -> (ProducedBefore2010(x) | ScheduledForShortDistanceFlight(x)))", "all x.(Jake32(x) -> (ProducedBefore(x,2010) | ScheduledForShortDistanceFlight(x,2010)))", "all x.((Jake32(x) & (ProducedBy2010(x) | ScheduledForShortDistanceFlight(x))) -> ProducedBy2010(x))", "all x.((Jacket32(x) & (ProducedBefore2010(x) | ScheduledForShortDistanceFlight(x))) -> Production(x,y))", "all x.((Jake32(x) & (ProducedIn2010(x) | ScheduledForShortDistanceFlight(x))) -> ProducedBefore2010(x))"]}
{"id": "folio_train_2377", "nl": "Jake32 is neither produced before 2010 nor scheduled for a short-distance flight.", "fol": "(-ProducedBefore2010(Jake32) & -ScheduledForShortDistanceFlight(Jake32))", "prediction": ["all x.(Jake32(x) -> (-ProducedBefore2010(x) & -ScheduledForShortDistanceFlight(x)))", "all x.((Jake32(x) & -ProducedBefore2010(x) & -PlannedForShortDistanceFlight(x)) -> -Scheduled(x))", "all x.(Jake32(x) -> (-ProducedBefore2010(x) | ScheduledForShortDistance(x)))", "all x.(Jake32(x) -> (-ProducedBefore2010(x) & -ScheduledForShortDistanceFlight(x)))", "both.(Jake32(Jake9) & -(ProducedBefore2010(Jake) & -ScheduledForShortDistanceFlight(Jake)))", "all x.(Jake32(x) -> (-ProducedBefore2010(x) & -ScheduledForShortDistanceFlight(x)))", "(-ProducedBefore2010(Jake32) & -ScheduledForShortDistanceFlight(Jake32))", "all x.(Jake32(x) & -(ProducedBefore2010(x) | ScheduledForShortDistanceFlight(x)))", "all x.(Jake32(x) -> (-Producedbefore2010(x) & -ScheduledForShortDistance(x)))", "all x.(Jake32(x) -> (-ProducedBefore(x,2010) & -ScheduledForShortDistance(x,2009)))", "(-(ProducedBefore2010(Jake32) & -ScheduledForShortDistance(Jake32)) -> Jake32))", "all x.(Jake32(x) -> (-ProducedBefore2010(x) & -ScheduledForShortDistanceFlight(x)))", "(exists x.(Jake32(x) & NoProducedAfter2010(x)) & -ScheduledForShortDistance(x))", "all x.((Jake32(x) & -ProducedBefore2010(x) & -ScheduledForShortDistanceFlight(x)) -> \"ProducedBefore2010(x)\")", "all x.(Jake32(x) -> (-ProducedBefore2010(x) & -ScheduledForShortDistanceFlight(x)))", "exists x.(Jake32(x) & -producedBefore(x,2010) & -ScheduledForShortDistance(x,2010))"]}
{"id": "folio_train_2378", "nl": "The SAT test is wholly owned and developed by the College Board.", "fol": "all x.(-IsCollegeBoard(x) -> -IsOwnedBy(Sat,x))", "prediction": ["all x.(SATTest(x) -> (OwnedByCollegeBoard(x) & DevelopedByBoard(x)))", "all x.(SATTest(x) -> (FamilyOwned(x) & CollegeBoardDeveloped(x)))", "all x.(SATTest(x) -> exists y.(CollegeBoard(y) & OwedBy(x,y)) & DevelopedBy(x,y)))", "all x y.((SATTest(x) & CollegeBoard(y)) -> OwnsAndDevelops(x,y))", "all x.(SATTest(x) -> (OwnedByCollegeBoard(x) & DevelopedByCollegeBoard(x)))", "all x y.((SATTest(x) & CollegeBoard(y)) -> OwnedAndDevelopedBy(x,y))", "all x y z.((SATTest(x) & CollegeBoard(y) & CollegeBoard(z)) -> (OwnedBy(x,y) & DevelopedBy(x,z)))", "all x.(SATTest(x) -> (CollegeBoardOwned(x) & CollegeBoardDeveloped(x)))", "all x.(SATTest(x) -> OwnedAndDevelopedByCollegeBoard(x))", "all x y z.((SATTest(x) & CollegeBoard(y) & CollegeBoard(z)) -> (OwnedBy(x,y) & DevelopedBy(x,z)))", "all x y z.((SATTest(x) & CollegeBoard(y) & CollegeBoard(z)) -> (OwnedBy(x,y) & DevelopedBy(x,z)))", "all x y.((SATTest(x) & CollegeBoard(y)) -> Owner(x,y) & Develops(x,y))", "all x y.((SATTest(x) & CollegeBoard(y)) -> OwnedAndDevelopedBy(x,y))", "the CollegeBoard(SAT) & OwnedBy(SAT) & DevelopedBy(SAT))", "all x.(SATTest(x) -> (OwnedByCollegeBoard(x) & DevelopedByBoard(x)))", "all x.(SATTest(x) -> OwnedAndDevelopedByCollegeBoard(x))"]}
{"id": "folio_train_2379", "nl": "The SAT test is intended to assess student's readiness for college.", "fol": "IntendedToAssess(Sat,StudentReadiness)", "prediction": ["all x y.((SATTest(x) & Student(y)) -> IntendedToAssessesReadinessForCollege(x,y))", "all x.(SATTest(x) -> AssessesStudentReadinessForCollege(x))", "all x.(SATTest(x) -> Assessment(x))", "all x.(SATTest(x) -> IntendedToAssesse(x))", "the SATTest(SAT)!", "all x.(SATTest(x) -> EvaluatesStudentDemandForCollege(x))", "(assessmentsReadinessForCollege(SATTest) -> Inspired(SATTest))", "all x.(SATTest(x) -> AssessesStudentsRiskForCollege(x))", "all x.(SATTest(x) -> AssessesStudentRequirementForCollege(x))", "all x y.((SATTest(x) & Student(y)) -> AssessesReadinessForCollege(x,y))", "all x.(SATTest(x) -> AssessesRequirementForCollege(x))", "all x.(SATTest(x) -> AssessesStudentCompletionRequirement(x))", "(IntendedToAssesKnowledgeForCollege(SATTest) -> AssessesRequirement(SAT))", "all x y.((SATTest(x) & Student(y) & College(y)) -> AssessesRequirementForCollege(x,y))", "all x.(SATTest(x) -> AssessesStudentRequirementForCollege(x))", "all x y.((SSATTest(x) & Student(y)) -> IntendedToAssessesReadinessForCollege(x,y))"]}
{"id": "folio_train_2380", "nl": "The SAT was originally designed not to be aligned with high school curricula. ", "fol": "all x.((IsYear(x) & IsBefore2016(x)) -> -IsAlignedWithHighSchool(x))", "prediction": ["all x.(SAT(x) -> -AllowsHighSchoolCurricula(x))", "all x.(SAT(x) -> (OriginallyDesignedBefore(x,HighSchoolCurricula) & -Aligned(x)))", "all x.(Sat(x) -> (DesignedForHighSchoolCurricula(x) & -AlignedToHighSchoolCurricula(x)))", "Originally, the SAT was not aligned with highschoolcurricula.", "all x.((SAT(x) & OriginallyDesignedAgainstHighSchoolCurricula(x)) -> -Aligned(x,Locations))", "all x.(SAT(x) -> -AlignedWithHighSchoolCurricula(x))", "all x.(SAT(x) -> (OriginallyDesigned(x) & -AlignedWithHighSchoolCurricula(x)))", "(State(SAT) & DesignedForHighSchoolCurriculum(SAT))", "all x.((SAT(x) & -AlignedWithHighSchoolCurriculum(x)) -> OriginallyDesigned(x))", "all x.(Sat(x) -> (DesignedNotToBeAlignedWithHillSchoolCurriculum(x)))", "all x.(SAT(x) -> -AllowsHighSchoolCurricula(x))", "all x.((SAT(x) & -AlignedWithHighSchoolCurricula(x)) -> OriginallyDesigned(x))", "all x y.((SAT(x) & HighSchoolCurriculum(y)) -> -AlignedWith(x,y))", "all x.(SAT(x) -> -LikesHighSchoolCurriculum(x))", "all x.((SAT(x) & -AlignedWithHighSchoolCurricula(x)) -> -AlignedWithHighSchoolCurriculum(x))", "all x.(SAT(x) -> -AlignedWithHighSchoolCurriculum(x))"]}
{"id": "folio_train_2381", "nl": "Several adjustments were made for the version of the SAT introduced in 2016 to reflect more closely on what students learn in high school. ", "fol": "all x.((IsYear(x) & IsSince2016(x)) -> IsAlignedWithHighSchool(x))", "prediction": ["all x y.((Sat(x) & VersionIntroducedIn2016(x,y)) -> ReflectsFacilyOnKnowingInHighSchool(x,y))", "all x.((SAT(x) & InVoice(x, 2016)) -> ReflectsMoreFocusedOnWhatStudentsLearnInHighSchool(x))", "all x y z.((SAT(x) & Version(y) & HighSchool(z) & IntroducedIn2016(y)) -> ReflectsFocuselyOnWhatStudentsLearn(x,y,z))", "all x y z.((SATV,2016,2016) & SATV,2016) & Student(y) & HighSchool(z)) -> AdjustmentsReflectsClosely(y,z))", "all x y.((SAT(x) & Version(y)) -> (Adapted(x) & ReflectsPrimarilyOnWhatStudentsLearnInHighSchool(x,y)))", "all x y z.((SAT(x) & Version(y) & IntroducedIn2016(y) & ReflectsFastOnWhatStudentsInHighSchool(z)) -> MadeRearrangements(x,y,z))", "all x y.((SATVoice(x) & SATVoice(y) & IntroducedIn2016(x) & Reflects(x,y)) -> MakingAdjustment(x))", "all x.((SAT(x) & IntroducedIn2016(x)) -> ReflectsReallyOnWhatStudentsInHighSchool(x))", "all x y.((Satellite(x) & 2016(y)) -> RevealsAdjustmentsToReflectAboutWhatStudentsLittleInHighSchool(x,y))", "all x.(Adjustments(x) -> (PreliminarySAT(x) & RevolvesItInHighSchool(x)))", "all x y.((SATViolet(x) & IntroducedIn2016(x,y) & ReflectsMoreThroughly(x,y)) -> Alignment(x))", "all x y.((SAT(x) & IntroducedIn2016(x,y) & ReflectsAbove(x,y)) -> AdjustmentsFor(x,y))", "all x y.((Version(x) & SATInvokedIn2016(x) & AssociatedAlignments(x)) -> ReflectsFocusedlyOnWhatStudentsLearnInHighSchool(x,y))", "all x.((SAT(x) & IntroducedIn2016(x)) -> ReflectsFacillyOnStudentsInHighSchool(x))", "all x y.((SATVersion(x) & VersionIntroducedIn2016(x)) -> ReflectsFacily(y,x))", "all x y.((SAT(x) & VersionInintroducedIn2016(x) & ReflectsInHighSchoolReflections(y)) -> AdjustmentsMade(x,y))"]}
{"id": "folio_train_2382", "nl": "Since 2016 the SAT has been better aligned with high school curricula.", "fol": "all x.((IsYear(x) & IsSince2016(x)) -> IsAlignedWithHighSchool(x))", "prediction": ["all x y.((SAT(x) & HighSchoolCurriculum(y)) -> BetterAligned(x,y))", "all x y.((SAT(x) & School(y)) -> BetterAligned(x,y))", "all x.((SAT(x) & AlignedWithHighSchoolCurricula(x)) -> BetterAligned(x,y))", "SATAlignment(s) -> HigherAlignmentWithHighSchoolcurricula(s))", "(BestAlignedWithCampus(SAT,2017) & HighSchoolCurricula(Sat))", "all x.((SATAlignedWithHighSchoolCarricula(x) & Since2016(x)) -> BetterAlignedWithHighSchoolCurricula(x))", "all x.((SAT(x) & AlignedWithHighSchoolcurricula(x)) -> BetterAligned(x))", "all x y.((SAT(x) & HighSchoolCurricula(y)) -> BetterAligned(x,y))", "all x y z.((SAT(x) & HighSchoolCurricula(y) & 2016(z)) -> BetterAligned(x,y,z))", "all x y.((SAT(x) & HighSchoolCurricula(y)) -> BetterAligned(x,y))", "all x.((Sat(x) & 2016(x)) -> BetterAlignedWithHighSchoolCurricula(x))", "all x.((SAT(x) & AccompaniedWithHighSchoolCurricula(x) 2015) -> BetterAligned(x))", "all x y.((SAT(x) & HighSchoolCurriculum(y)) -> MoreBalanced(x,y))", "all x y z.((SAT(x) & HighSchoolCurriculum(y) & 2016(z)) -> BetterAlignedWith(x,y,z))", "all x.((SAT(x) & AlignedWithHighSchoolCurricula(x)) -> Better(x))", "all x y z.((SAT(x) & HighSchoolCurricula(y) & 2015(z) & BetterAlignedWith(x,y,z)) -> BetterAlignedWith(x,y,z))"]}
{"id": "folio_train_2383", "nl": "The SAT test is owned by the College Board and multiple other third parties.", "fol": "exists x.(-IsCollegeBoard(y) & IsOwnedBy(Sat,y))", "prediction": ["all x y z.((SATTest(x) & CollegeBoard(y) & ThirdPerson(z)) -> Owns(x,y,z))", "all x.(SATTest(x) -> (OwnedByCollegeBoard(x) & OwnedByMultipleOtherParties(x)))", "(OwnsToCompanyBoard(SATTest) & OwnsMultipleOtherParties(SATTest))", "all x y.((SATTest(x) & CollegeBoard(y)) -> OwnedBy(x,y))", "all x.(SATTest(x) -> (OwnedByCollegeBoard(x) & OwnedByManyOtherParties(x)))", "all x.(SATTest(x) -> (EstatedByCollegeBoard(x) & OwnedByMultipleSideParties(x)))", "all x.((SATTest(x) & CollegeBoard(x) & MultipleOtherParties(x)) -> Owns(x,y))", "all x.(SATTest(x) -> (OwnedByCollegeBoard(x) & OwnedByMillionsOtherThirdParties(x)))", "all x.(SATTest(x) -> (OwnedByCollegeBoard(x) & OwnedByMultipleThirdParties(x)))", "all x.(SatTest(x) -> (OwnedByCollegeBoard(x) | Owns(x,thirdParty)))", "all x y.((SATTest(x) & CollegeBoard(y)) -> OwnedBy(x,y))", "(OwnedByCollegeBoardTest(SAT) & HousedByMultipleThirdParties(SAT))", "all x y.((SATTest(x) & CollegeBoard(y)) -> OwnedByAndMultipleThirdParties(x,y))", "all x y z.((SATTest(x) & CollegeBoard(y) & MultipleOtherParties(z)) -> OwnedBy(x,y,z))", "all x y z.((SATTest(x) & CollegeBoard(y) & MultipleThirdParties(z)) -> OwnedBy(x,y,z))", "all x.(SATTest(x) -> exists y.(CollegeBoard(y) & OwnedBy(x,y)) & exists z.(MultipleThirdParty(z) & OwnedBy(x,z))))"]}
{"id": "folio_train_2384", "nl": "The SAT test assesses student's math skills.", "fol": "Assesses(Sat,MathSkills)", "prediction": ["all x y.((SATTest(x) & Student(y)) -> AssessesMathSkills(x,y))", "all x y.((SATTest(x) & Student(y)) -> Assesses(x,y))", "all x.(SATTest(x) -> AssessesMathSkills(x))", "all x.(SATTest(x) -> AssessesMathSkills(x))", "all x.(SATTest(x) -> AssessesStudentMathSkills(x))", "all x.(SATTest(x) -> AssessEqualMathSkills(x))", "all x.(SATTest(x) -> AssessesMathematicsSkills(x))", "all x y.((SATTest(x) & Student(y)) -> AssessesMathSkills(x,y))", "all x y.((SATTest(x) & Student(y)) -> AssessesMathSkills(x,y))", "all x y.((SATTest(x) & Student(y)) -> AssessesAshsMathematics(x,y))", "all x.(SATTest(x) -> AssessesDamatSkills(x))", "all x.(SATTest(x) -> AssessesMathSkills(x))", "all x.(SATTest(x) -> AssessesMathSkills(x))", "all x.(SATTest(x) -> AssessesMathSkills(x))", "all x.(SATTest(x) -> AssessesSkills(x))", "all x.(SATTest(x) -> AssessesUndergraduateMathSkills(x))"]}
{"id": "folio_train_2385", "nl": "Rafa Nadal was born in Mallorca.", "fol": "BornInLocation(RafaNadal,Mallorca)", "prediction": ["Rafa Nadal was born in Mallorca.", "Rafa Nadal was born in Mallorca.", "Rafa Nadal was born in Mallorca.", "Rafa Nadal (BirthOnMallorca))", "Rafa Nadal has been born in Mallorca.", "Rasfa Nadal was born on Mallorca.", "Rafa Nadal was born in Mallorca.", "Rafa Nadal was born in Mallorca.", "Rafa Nadal was born on Mallorca.", "all x y.((RafaNadal(x) & Mallorca(y)) -> BornIn(x,y))", "Rafa Nadal was born in Mallorca.", "Rafa Nadal was born In Mallorca.", "Rafa Nadal was born in Mallorca.", "Rafa Nadal was born in Mallorca.", "Rafa Nadal was born in Mallorca.", "Rafa Nadal ist seit 2004 in Mallorca geboren."]}
{"id": "folio_train_2386", "nl": "Rafa Nadal is a professional tennis player.", "fol": "IsProfessionalTennisPlayer(RafaNadal)", "prediction": ["Rafa Nadal, ProfessionalTennisPlayer(Rafa)", "(ProfessionalTennisPlayer(RafaNadal))", "Rafa Nadal is a professional tennis player.", "Rafa Nadal (*) is a professional tennis player & specializes In Tennis (OriginalPlayer(R-Nadal)))", "(Professional(RafaNadal) -> ProfessionalTennisPlayer(RafaNadal))", "Rafa Nadal is professional tennis player.", "Rafa Nadal (RafaNadal) is a professional tennis player.", "Rafa Nadal, ProfessionalTennisPlayer, \u2013 PostedInIntegrity())", "Rafa Nadal is a professional tennis player.", "Rafa Nadal is a ProfessionalTennisPlayer(Rafa) & ProfessionalTennisPlayer(Rafa))", "(ProfessionalTennisPlayer(RafaNadal)", "-ProfessionalTennisPlayer(RafaNadal)", "(Professional(RafaNadal) & TennisPlayer(RafaNadal))", "all x.((RafaNadal(x) & ProfessionalTennisPlayer(x)) -> Professional(x))", "(Professional(Nadal) & Professional(Nadal))", "all x.(RafaNadal(x) -> ProfessionalTennisPlayer(x))"]}
{"id": "folio_train_2387", "nl": "Nadal's win ratio is higher than 80%.", "fol": "HasHighWinRatio(RafaNadal)", "prediction": ["All x.(Nadal(x) -> WinRatioHigherThan80%(x))", "(WinKind(Nadal) -> HigherThan80%(Nadal))", "Nadal's WinRatioIsHigherThan80%.", "Nadal's WinRatioHigherThan80%(Nadal)", "Nadal's WinRatio(n) is higherThan80%(n))", "(WinRelationship(Nadal,80%))", "Nadal's winRatioHigherThan80%(Nadal,80%)", "Nadal's WinRatioHigherThan80%(x))", "Nadal's WinRatio(n) is higherThan80%(n))", "Nadal's WinRatioHigherThan80%(nadal)", "Nudal's WinRatioIsHigherThan80%(nadal,ex)", "Erasure of Nadal: HigherThan80%G0Rating(Nadal)", "Nadal's WinRatioIsHigherThan80%.", "Nadal's winRatioHigherThan80%.", "(WinRatio(Nadal): HigherThan80%(Nadal))", "the WinRatio(Nadal) -HigherThan80%(Nadal))"]}
{"id": "folio_train_2388", "nl": "All players in the Big 3 are professionals who have a high win ratio.", "fol": "all x.((IsProfessionalTennisPlayer(x) & HasHighWinRatio(x)) -> IsInBig3(x))", "prediction": ["all x y.((Player(x,y) & Big3) & Professional(x)) -> HighWinRatio(x))", "all x.(Big3(x) -> (Professional(x) & HighWinRatio(x)))", "all x.((Player(x) & Big3(x)) -> Professional(x) & HighWinRatio(x))", "all x.(Jacket(x) -> Professional(x))", "all x.(Big3(x) -> Professional(x))", "all x y.((Player(x) & Big3)(y)) -> HighWinRatio(x,y))", "all x.(Big3Player(x) -> Professional(x))", "all x.(Big3(x) -> (Professional(x) & HighWinRatio(x)))", "all x.(Big3(x) -> (Professional(x) & HighWinRatio(x)))", "all x.(Big3Player(x) -> (Professional(x) & HighWinRatio(x)))", "all x.(Big3) -> (Professional(x) & HighWinRatio(x)))", "all x.((Player(x) & Big3(x)) -> Professional(x) & HighWinRatio(x))", "all x.(Big3(x) -> Professional(x))", "all x.(Big3(x) -> (Players(x) & Professional(x) & HighWinRatio(x)))", "all x y.((Player(x) & Big3) & Professional(y)) -> HighWinRatio(y))", "all x.(Big3.(x) -> Professional(x))"]}
{"id": "folio_train_2389", "nl": "Nadal was not born in Mallorca.", "fol": "-BornInLocation(RafaNadal,Mallorca)", "prediction": ["Nadal -BirthInMallorca(Nadal,Mallorca))", "Nadal was born in Mallorca.", "Nadal was born in Mallorca.", "Nadal nyben(n) de Mallorca(n))", "Nadal - BornInMadeInMalaysia(Nadal,Malaysia))", "Nadal hors Mallorca.", "Nadal was born in Mallorca.", "Nadal X.() & -BirthInMallorca(x))", "Nadal was born in Mallorca.", "-BirthInMallorca(Nadal)", "Nodal's Geburt(n) & BornIn(n) & Mallorca(n))", "Nadal navuto abalna(n) & BornIn(f,g) & Mallorca(u))", "(-BirthInMallorca(Nadal,Mallorca))", "Nadal ist nicht in Mallorca geboren.", "-BirthInMallorca(Nadal)", "-BirthForNadal(Nadal,Mallorca)"]}
{"id": "folio_train_2390", "nl": "Nadal is in the Big 3.", "fol": "IsInBig3(RafaNadal)", "prediction": ["(all x.(Nandal(x) -> Big3)))", "Nadal is in Big3.", "(InBig3.(Nadal) -> Big3))", "Nadal is in the Big3.", "Nadal in Big3.", "Nadal: Big3 (inBig3) -> -NadalInBig3(NadalInBig3)))", "Nadal is in Big3(n) & Big3(n))", "Nadal InBig3.(ElevenStage(NADAL) -> Big3(NADAL,Big3))", "Nadal is in the Big3 (Big3))", "Nadal is in the Big3.", "Nadal ((QuailName(Nadal) & Big3)))", "Nadal is in theBig3.", "Nadal is in Big3.", "Nadal is in the Big3 (Big3) & InBig(n=Nadal))", "Nadal is in the Big3.", "(OfBig3): Nadal(Nadal) & Big3(Nadal))"]}
{"id": "folio_train_2391", "nl": "Nadal is the greatest player of all time.", "fol": "GreatestPlayerOfAllTime(RafaNadal)", "prediction": ["Nadal is the greatestplayerofalltime.", "Nadal's all time.", "Nadal is the greatestplayerofalltime.", "Nadal is the greatestPlayerOfAllTime(Nadal,MajorSport)", "Nadal is the greatestplayer(n).", "Nadal is the GreatestPlayerOfAllTime(Nadal,Player,Player)", "Nadal, aka GreatestPlayerOfAllTime(Nadal,(Nadial))", "all x.(Nadal(x) -> GreatestPlayerOfTime(x))", "Nadal: GreatestPlayerOfAllTime(n) & CountOns(n))", "Nadal is the greatestPlayerOfAllTime(Nadal,1910))", "Nadal is GreatestPlayerOfAllTime(nadal,n)", "Nadal is the greatestPlayerOfAllTime(Nadal,Years))", "GrandPlayerOfTime(Nadal)", "Nadal is the greatestPlayerOfAllTime(Nadal,(Nadal))", "Nadal is greatestPlayerOfAllTime(Natural(n) -> GreatestPlayerOfTime(n))", "Nadal's greatest player ever."]}
{"id": "folio_train_2392", "nl": "No cookie is healthy.", "fol": "all x.(IsCookie(x) -> -IsHealthy(x))", "prediction": ["-exists x.(Cookie(x) & Healthy(x))", "-exists x.(Cookie(x) & Healthy(x))", "-exists x.(Cookie(x) & Healthy(x))", "-exists x.(Cookie(x) & Healthy(x))", "-exists x.(Cookie(x) & Healthy(x))", "-exists x.(Cookie(x) & Healthy(x))", "-(Cookie(x) & Healthy(x))", "-exists x.(Cookie(x) & Healthy(x))", "-exists x.(Cookie(x) & Healthy(x))", "-exists x.(Cookie(x) & Healthy(x))", "-exists x.(Cookie(x) & Healthy(x))", "-exists x.(Cookie(x) & Healthy(x))", "-exists x.(Cookie(x) & Healthy(x))", "-exists x.(Cookie(x) & Healthy(x))", "-exists x.(Cookie(x) & Healthy(x))", "-exists x.(Cookie(x) & Healthy(x))"]}
{"id": "folio_train_2393", "nl": "All oreos are cookies.", "fol": "all x.(IsOreo(x) -> IsCookie(x))", "prediction": ["all x.(Oreo(x) -> Cookies(x))", "all x.(Oreo(x) -> Cookie(x))", "all x.(Oreo(x) -> Cookie(x))", "all x.(Oreo(x) -> Cookies(x))", "all x.(Oreo(x) -> Cookies(x))", "all x.(Oreo(x) -> Cookie(x))", "all x.(Oreo(x) -> Cookie(x))", "all x.(Oreo(x) -> Cookies(x))", "all x y.((Oreo(x) & Cookie(y)) -> Cookie(x))", "all x.(Oreo(x) -> Cookies(x))", "all x.(Oreo(x) -> Cookies(x))", "all x.(Oreo(x) -> Cookies(x))", "all x.(Oreo(x) -> Cookies(x))", "(all x.(Oreo(x) -> Cookie(x))", "all x.(Oreo(x) -> Cookies(x))", "all x.(Oreo(x) -> Cookies(x))"]}
{"id": "folio_train_2394", "nl": "All cookies are delicious.", "fol": "all x.(IsCookie(x) -> Delicious(x))", "prediction": ["all x.(Cookie(x) -> Delicious(x))", "all x.(Cookie(x) -> Delicious(x))", "all x.(Cookie(x) -> Delicious(x))", "all x.(Cookie(x) -> Delicious(x))", "all x.(Cookie(x) -> Delicious(x))", "all x.(Cookie(x) -> Delicious(x))", "all x.(Cookie(x) -> Delicious(x))", "all x.(Cookie(x) -> Delicious(x))", "all x.(Cookie(x) -> Delicious(x))", "all x y.((Cookie(x) & Cookie(y)) -> Delicious(x))", "all x.(Cookie(x) -> Delicious(x))", "all x.(Cookie(x) -> Delicious(x))", "all x.(Cookie(x) -> Delicious(x))", "all x.(Cookie(x) -> Delicious(x))", "all x.(Cookie(x) -> Delicious(x))", "(Delicious(Cookie) | Delicious(Cookie)))"]}
{"id": "folio_train_2395", "nl": "No animals are plants. ", "fol": "all x.(IsAnimal(x) -> -IsPlant(x))", "prediction": ["exists x.(Animal(x) & Plant(x))", "-exists x.(Animal(x) & Plant(x))", "there exists x.(Animal(x) & Plant(x))", "all x.(Animal(x) -> -Plant(x))", "-exists x.(Animal(x) & Plant(x))", "-exists x.(Animal(x) & Plant(x))", "-exists x.(Animal(x) & Plant(x))", "all x.(Animal(x) -> -Plant(x))", "-exists x.(Animal(x) & Plant(x))", "all x.(Animal(x) -> -Plant(x))", "-exists x.(Animal(x) & Plant(x))", "-exists x.(Animal(x) & Plant(x))", "-exists x.(Animal(x) & Plant(x))", "-exists x.(Animal(x) & Plant(x))", "no animal isPlant(x)", "all x.(Animal(x) -> -Plant(x))"]}
{"id": "folio_train_2396", "nl": "All humans are animals.", "fol": "all x.(IsHuman(x) -> IsAnimal(x))", "prediction": ["all x.(Human(x) -> Animal(x))", "all x.(Human(x) -> Animal(x))", "all x.(Human(x) -> Animal(x))", "all x.(Human(x) -> Animal(x))", "all x.(Human(x) -> Animal(x))", "all x.(Human(x) -> Animal(x))", "all x.(Human(x) -> Animal(x))", "all x.(Human(x) -> Animal(x))", "all x.(Human(x) -> Animal(x))", "all x.(Human(x) -> Animal(x))", "all x.(Human(x) -> Animal(x))", "all x.(Human(x) -> Animal(x))", "all x.(Human(x) -> Animal(x))", "all x.(Human(x) -> Animal(x))", "all x.(Human(x) -> Animal(x))", "all x.(Human(x) -> Animal(x))"]}
{"id": "folio_train_2397", "nl": "All pupils are human.", "fol": "all x.(IsPupil(x) -> IsHuman(x))", "prediction": ["all x.(Pupil(x) -> Human(x))", "all x.(Pupil(x) -> Human(x))", "all x.(Pupil(x) -> Human(x))", "all x.(Pupil(x) -> Human(x))", "all x.(Pupil(x) -> Human(x))", "all x.(Pupil(x) -> Human(x))", "all x.(Pupil(x) -> Human(x))", "all x.(Pupil(x) -> Human(x))", "all x.(Pupil(x) -> Human(x))", "all x.(Pupil(x) -> Human(x))", "(all x.(Pupil(x) -> Human(x)))", "all x.(Pupil(x) -> Human(x))", "all x.(Pupil(x) -> Human(x))", "all x.(Pupil(x) -> Human(x))", "all x.(Pupil(x) -> Human(x))", "all x.(Pupil(x) -> Human(x))"]}
{"id": "folio_train_2398", "nl": "If Jack is a human or a flower, then Jack is a human and a flower.", "fol": "((IsHuman(Jack) | IsFlower(Jack)) -> (IsHuman(Jack) & IsFlower(Jack)))", "prediction": ["exists x.(Jack(x) & (Human(x) | Flower(x))) -> (Human(x) & Flower(x)))", "all x.(Human(x) | Flower(x)) -> (Human(x) & Flower(x)))", "(all x.(Human(x) | Flower(x))) -> (Human(x) & Flower(x)))", "all x.((Human(x) | Flower(x)) -> (Human(x) & Flower(x)))", "all x.((Human(x) | Flower(x)) -> (Human(x) & Flower(x)))", "all x.((Human(x) | Flower(x)) -> (Human(x) & Flower(x)))", "all x.((Human(x) | Flower(x)) -> (Human(x) & Flower(x)))", "all x.(Human(x) | Flower(x)) -> (Human(x) & Flower(x)))", "all x.(Human(x) | Flower(x)) -> (Human(x) & Flower(x)))", "all x.((Human(x) | Flower(x)) -> (Human(x) & Flower(x)))", "all x.((Human(x) | Flower(x)) -> (Human(x) & Flower(x)))", "all x.((Human(x) | Flower(x)) -> (Human(x) & Flower(x)))", "all x.((Human(x) | Flower(x)) -> (Human(x) & Flower(x)))", "all x.((Human(x) | Flower(x)) -> (Human(x) & Flower(x)))", "all x.((Human(x) | Flower(x)) -> (Human(x) & Flower(x)))", "all x.((Human(x) | Flower(x)) -> (Human(x) & Flower(x)))"]}
{"id": "folio_train_2399", "nl": "Jack is a pupil.", "fol": "IsPupil(Jack)", "prediction": ["all x.(Pupil(x) -> (Jack(x) & Pupil(x)))", "all x.(Pupil(x) -> Jack(x))", "All x.(Jack(x) -> Pupil(x))", "Jack is Pupil(jack)", "Jack is a Pupil(Jack)", "Jack is a Pupil.", "(Pupil(Jack) & Pupil(Jack))", "all x.(Pupil(x) -> Jack(x))", "all x.(Pupil(x) -> Jack(x))", "all x.(Jack(x) -> Pupil(x))", "isPupil(Jack)", "(Pupil(Jack) & Pupil(Jack))", "all x.(Pupil(x) -> Jack(x))", "All x.(Jack(x) -> Pupil(x))", "(Pupil(Jack)", "(Pupil(Jack))"]}
{"id": "folio_train_2400", "nl": "Jack is not a pupil.", "fol": "-IsPupil(Jack)", "prediction": ["-Pupil(Jack)", "Jack (-Pupil( Jack))", "(-Pupil(Jack))", "(-Pupil(jack))", "(-Pupil(Jack))", "\u2013Pupil(Jack)", "(-Pupil(Jack))", "(-Pupil(Jack))", "Jack is not a pupil.", "Jack -Pupil(Jack)", "-Pupil(Jack)", "*Pupil(Jack)", "(-Pupil(Jack))", "(-Pupil(Jack))", "(-Pupil(Jack))", "-Pupil(Jack)"]}
{"id": "folio_train_2401", "nl": "Jack is a plant.", "fol": "IsPlant(Jack)", "prediction": ["Jack is Plant(Jack)", "all x.(Jack(x) -> Plant(x))", "(Plant(Jack) & -Plant(Jack))", "(Plant(Jack))", "(Plant(Jack) & Plant(Jack))", "all x.(Jack(x) -> Plant(x))", "all x.(Jack(x) -> Plant(x))", "(Plant(Jack))", "all x.(Jack(x) -> Plant(x))", "(Plant(Jack) & Is(Jack,y))", "all x.(Jack(x) -> Plant(x))", "all x.(Jack(x) -> Plant(x))", "(Plant(Jack))", "(Plant(Jack))", "everything about Jack.", "all x.(Jack(x) -> Plant(x))"]}
{"id": "folio_train_2402", "nl": "If Jack is a human, then Jack is not a pupil.", "fol": "(IsHuman(Jack) -> -IsPupil(Jack))", "prediction": ["all x.((Human(x) -> -Pupil(x))", "all x.(Human(x) -> -Pupil(x))", "all x.(Human(x) -> -Pupil(x))", "all x.((Human(x) & -Pupil(x)) -> -Human(x))", "all x.(Human(x) -> -Pupil(x))", "all x.((Human(x) & Jack(y)) -> -Pupil(y))", "all x.(Human(x) -> -Pupil(x))", "all x.((Human(x) & Jack(x)) -> -Pupil(x))", "all x.(Human(x) -> -Pupil(x))", "all x.(Human(x) -> -Pupil(x))", "all x.(Human(x) -> (-Pupil(x)))", "all x.((Human(x) & -Pupil(x)) -> JackNotHonest(x))", "all x.(Human(x) -> -Pupil(x))", "all x.(Human(x) -> -Pupil(x))", "all x.(Human(x) -> -Pupil(x))", "all x.(Hamlet(x) -> -Pupil(x))"]}
{"id": "folio_train_2403", "nl": "No shoes are food. ", "fol": "all x.(IsShoe(x) -> -IsFood(x))", "prediction": ["all x.(Shoe(x) -> -Food(x))", "-exists x.(Shoe(x) & Food(x))", "-exists x.(Shoe(x) & Food(x))", "-exists x.(Shoe(x) & Food(x))", "-exists x.(Shoe(x) & Food(x))", "\u2013exists x.(Shoe(x) & Food(x))", "-exists x.(Shoe(x) & Food(x))", "-exists x.(Shoe(x) & Food(x))", "KeenFashion(ke)", "-exists x.(Shoe(x) & Food(x))", "-exists x.(Shoe(x) & Food(x))", "-exists x.(Shoe(x) & Food(x))", "-exists x.(Shoe(x) & Food(x))", "-exists x.(Shoe(x) & Food(x))", "-exists x.(Shoe(x) & Food(x))", "-exists x.(Shoe(x) & Food(x))"]}
{"id": "folio_train_2404", "nl": "All slippers are shoes.", "fol": "all x.(IsSlipper(x) -> IsShoe(x))", "prediction": ["all x.(Slipper(x) -> Shoes(x))", "all x.(Slipper(x) -> Shoes(x))", "all x.(Slipper(x) -> Shoes(x))", "all x.(Slipper(x) -> Shoes(x))", "all x.(Slipper(x) -> Shoes(x))", "all x.(Slipper(x) -> Shoes(x))", "all x.(Slipper(x) -> Shoes(x))", "all x.(Slipper(x) -> Shoes(x))", "all x.(Slipper(x) -> Shoes(x))", "all x.(Slipper(x) -> Shoes(x))", "all x.(Spoof(x) -> Shoes(x))", "all x.(Slipper(x) -> Shoes(x))", "all x.(Slipper(x) -> Shoes(x))", "all x.(Slipper(x) -> Shoes(x))", "all x.(Slipper(x) -> Shoes(x))", "all x.(Slipper(x) -> Shoes(x))"]}
{"id": "folio_train_2405", "nl": "A thing is either food or clothes.", "fol": "all x.((IsFood(x) & -IsClothing(x)) | (-IsFood(x) & IsClothing(x)))", "prediction": ["all x.(Thing(x) -> (Food(x) | Clothing(x)))", "all x.(Thing(x) -> (Food(x) | Clothes(x)))", "all x.(Thing(x) -> (Food(x) | Clothing(x)))", "all x.(Thing(x) -> (Food(x) | Clothing(x)))", "exists x.(Thing(x) & (Food(x) | Clothing(x)))", "exists x.(Thing(x) & (Food(x) | Clothing(x)))", "all x.(Dog(x) -> (Food(x) | Clothing(x)))", "all x.(Thing(x) -> (Food(x) | Clothing(x)))", "all x.(Bad(x) -> (Food(x) | Clothes(x)))", "all x.(Thing(x) -> (Food(x) | Clothes(x)))", "all x.(Ding(x) -> (Food(x) | Clothing(x)))", "all x.(Thing(x) -> (Food(x) | Clothing(x)))", "all x.(Thing(x) -> (Food(x) | Clothes(x)))", "all x.(Ding(x) -> (Food(x) | Clothes(x)))", "all x.(Tea(x) -> (Food(x) | Clothes(x)))", "all x.(Thing(x) -> (Food(x) | Clothing(x)))"]}
{"id": "folio_train_2406", "nl": "No wearable things are airtight.", "fol": "all x.(IsWearable(x) -> -IsAirtight(x))", "prediction": ["exists x.(WornableThing(x) & -Airtight(x))", "-all x.(WearableThing(x) -> Airtight(x))", "all x.(wearable(x) -> -Airtight(x))", "-exists x.(Wearable(x) & Airtight(x))", "-exists x.(Wearable(x) & Airtight(x))", "-exists x.(WearableThing(x) & Airtight(x))", "-exists x.(WearableThing(x) & Airtight(x))", "-exists x.(Wornable(x) & Airtight(x))", "-exists x.(WearableThing(x) & Airtight(x))", "all x.(WearableThing(x) -> Airtight(x))", "-exists x.(WearableThing(x) & Airtight(x))", "all x.(WearableThing(x) -> -Airtight(x))", "-exists x.(WearableTeacher(x) & Airtight(x))", "all x.(WearableThing(x) -> -Airtight(x))", "-exists x.(Wearable(x) & Airtight(x))", "-exists x.(WearableThing(x) & Airtight(x))"]}
{"id": "folio_train_2407", "nl": "All clothes are wearable. ", "fol": "all x.(IsClothing(x) -> IsWearable(x))", "prediction": ["all x.(Clothing(x) -> Wearable(x))", "all x.(Clothing(x) -> Wearable(x))", "all x.(Clothing(x) -> Wearable(x))", "all x.(Clothing(x) -> Wearable(x))", "all x.(Clothing(x) -> Wearable(x))", "all x.(Clothing(x) -> Wearable(x))", "all x.(Clothing(x) -> Wearable(x))", "all x.(Clothing(x) -> Wearable(x))", "all x.(Clothing(x) -> Wearable(x))", "all x.(Clothing(x) -> Wearable(x))", "All x.(Clothing(x) -> Wearable(x))", "all x.(Clothing(x) -> Wearable(x))", "all x.(Clothing(x) -> Wearable(x))", "all x.(Clothing(x) -> Wearable(x))", "all x.(Clothing(x) -> Wearable(x))", "all x.(Clothing(x) -> Wearable(x))"]}
{"id": "folio_train_2408", "nl": "If a watch is not airtight and clothes, then a watch is either both airtight and clothes, or neither airtight nor clothes.", "fol": "(((-(IsAirtight(Watch) & IsClothing(Watch)) -> (IsAirtight(Watch) & IsClothing(Watch))) & -(-IsAirtight(Watch) & -IsClothing(Watch))) | (-(-(IsAirtight(Watch) & IsClothing(Watch)) -> (IsAirtight(Watch) & IsClothing(Watch))) & -IsAirtight(Watch) & -IsClothing(Watch)))", "prediction": ["all x.((Watch(x) & -Airtight(x) & -Clothes(x)) \u00bb (Airtight(x) | -Clothes(x))))", "all x.((Watch(x) & -Airtight(x) & -Clothes(x)) -> (Airtight(x) & -Clothes(x)) | (-Airtight(x) & -Clothes(x)))", "all x.((Watch(x) & -Airtight(x) & -Clothing(x)) -> (Airtight(x) & -Clothing(x)))", "all x.((Watch(x) & -Airtight(x) & -Clothes(x)) -> (Airtight(x) & -Clothes(x)))", "all x.((Watch(x) & -Airtight(x) & -Clothes(x)) -> (Airtight(x) | -Clothes(x)))", "all x.((Watch(x) & -Airtight(x) & -Clothes(x)) -> (Airtight(x) & -Clothes(x)) (-Airtight(x) | -Clothes(x))))", "all x.((Watch(x) & -Airtight(x) & -Clothes(x)) -> ((Airtight(x) & Clothes(x)) | (-Airtight(x) & Clothes(x)))))", "all x.((Watch(x) & -Airtight(x) & -Clothes(x)) -> IsAirtight(x))", "all x.((Watch(x) & -Airtight(x) & -Clothes(x)) -> (Airtight(x) | -Clothes(x)))", "all x.((Watch(x) & -Airtight(x) & -Airtight(x) & -Clothes(x)) -> ((Airtight(x) & -Clothes(x)) | -Airtight(x) & -Clothes(x))))", "all x.((Watch(x) & -Airtight(x) & -Clothes(x)) -> (Airtight(x) & -Clothes(x) & -Airtight(x)))", "all x.((Watch(x) & -AirtightAndClothes(x)) -> ((Airtight(x) & -Clothes(x)) | (-Airtight(x) & Clothings(x)))))", "all x.((Watch(x) & -Airtight(x) & -Clothes(x)) -> ((Airtight(x) & Clothes(x)) | (-Airtight(x) & Clothes(x)))))", "all x.((Watch(x) & -Airtight(x) & -Clothes(x)) -> (Airtight(x) | NorAirtight(x) & -Clothes(x)))", "all x.((Watch(x) & -Airtight(x) & -Clothes(x)) -> ((Airtight(x) & Clothing(x)) | -Airtight(x) & Clothing(x))))", "all x.((Watch(x) & -Airtight(x) & -Airtight(x) & -Clothes(x)) > (Airtight(x) & -Clothes(x)))"]}
{"id": "folio_train_2409", "nl": "Watch is a wearable.", "fol": "IsWearable(Watch)", "prediction": ["all x.(Watch(x) -> Wearable(x))", "all x.(Watch(x) -> Wearable(x))", "all x.(Watch(x) -> Wearable(x))", "all x.(Watch(x) -> Wearable(x))", "all x.(Watch(x) -> Wearable(x))", "all x.(Watch(x) -> Wearable(x))", "all x.(Watch(x) -> Wearable(x))", "all x.(Watch(x) -> Wearable(x))", "all x.(Watch(x) -> Wearable(x))", "all x.(Watch(x) -> Wearable(x))", "all x.(Watch(x) -> Wearable(x))", "all x.(Watch(x) -> Wearable(x))", "all x.(Watch(x) -> Wearable(x))", "all x.(Watch(x) -> Wearable(x))", "all x.(Watch(x) -> Wearable(x))", "all x.(Watch(x) -> Wearable(x))"]}
{"id": "folio_train_2410", "nl": "Watch is a slipper.", "fol": "IsSlipper(Watch)", "prediction": ["all x.(Watch(x) -> Slipper(x))", "all x.(Watch(x) -> Slipper(x))", "all x.(Watch(x) -> Slipper(x))", "all x.(Watch(x) -> Slipper(x))", "all x.(Watch(x) -> Slipper(x))", "all x.(Watch(x) -> Slipper(x))", "all x y z.((Watch(x) & Slipper(y) & Season(z)) -> Slipper(x,y))", "all x.(Watch(x) -> Slipper(x))", "all x.(Watch(x) -> Slipper(x))", "all x.(Watch(x) -> Slipper(x))", "all x.(Watch(x) -> Slipper(x))", "all x.(Watch(x) -> Slipper(x))", "all x.(Watch(x) -> Slipper(x))", "all x.(Watch(x) -> Slipper(x))", "all x.(Watch(x) -> Slipper(x))", "all x.(Watch(x) -> Slipper(x))"]}
{"id": "folio_train_2411", "nl": "Watch is neither airtight nor a slipper.", "fol": "(-IsAirtight(Watch) & -IsSlipper(Watch))", "prediction": ["all x.(Watch(x) -> (-Airtight(x) | Slipper(x)))", "all x y.((Watch(x) & Airtight(y)) -> -(Slipper(x) | Slipper(y)))", "(-Airtight(Watch) & -Slipper(Watch))", "all x.(Watch(x) -> -(Airtight(x) | Slipper(x)))", "all x.(Watch(x) -> (-Airtight(x) | Slipper(x)))", "all x.(Watch(x) -> (-Airtight(x) & -Slipper(x)))", "all x.(Watch(x) -> (-Airtight(x) | Slipper(x)))", "all x.(Watch(x) -> (-Airtight(x) & -Slipper(x)))", "all x.(Watch(x) -> (-Airtight(x) | Slipper(x)))", "neither Airtight, nor Slipper(Watch)", "all x.(Watch(x) -> (NoAirtight(x) & -Slipper(x)))", "all x.(Watch(x) -> (-Airtight(x) | Slipper(x)))", "all x.(Watch(x) -> (-Airtight(x) | Slipper(x)))", "all x.(Watch(x) -> (-Airtight(x) & -Slipper(x)))", "all x.(Watch(x) -> (-Airtight(x) & -Slipper(x)))", "all x.(Watch(x) -> (Meets(x,Airtight) | Slipper(x)))"]}
{"id": "folio_train_2412", "nl": "An Olympian is a person who trains for an Olympic sport and goes to the Olympics.", "fol": "all x.((TrainsForOlympicSport(x) & AttendsOlympicGames(x)) -> IsOlympian(x))", "prediction": ["all x.(Olympian(x) -> (TrainsForOlympicSport(x) & GoesToOlympics(x)))", "all x.(OlympicPerson(x) -> (TrainsForOlympicSport(x) & GoesToOlympics(x)))", "all x.(Olympian(x) -> (TrainsForOlympicSport(x) & GoesToOlympics(x)))", "all x.(Olympian(x) -> (TrainsForOlympicSport(x) & GoesToOlympics(x)))", "all x.(Olympian(x) -> (TrainsForOlympicSport(x) & GoesToOlympics(x)))", "all x.(Olympian(x) -> (TrainsForOlympicSport(x) & GoesToOlympics(x)))", "all x.(Olympian(x) -> (TrainsForOlympicSport(x) & GoesToOlympics(x)))", "all x.(Olympian(x) -> (TrainsForOlympicSport(x) & GoesToOlympics(x)))", "all x.(Olympian(x) -> (TrainsForOlympicSport(x) & GoesToOlympics(x)))", "all x.(Olympian(x) -> (TrainsForOlympicSport(x) & VisitsOlympics(x)))", "all x.(OlympicPerson(x) -> (TrainsForOlympicSport(x) & GoesToOlympics(x)))", "all x.(Olympian(x) -> (TrainsForOlympicSport(x) & GoesToOlympics(x)))", "all x.(Olympian(x) -> (TrainsForOlympicSport(x) & GoesToOlympics(x)))", "all x.(OlympicsPerson(x) -> (TrainsForOlympicSport(x) & GoesToOlympicGames(x)))", "all x y.((Person(x) & OlympicSport(y) & TrainsFor(x,y) & GoesTo(x,y)) -> Olympian(x))", "all x.(Olympian(x) -> (TrainsForOlympicSport(x) & GoesToOlympics(x)))"]}
{"id": "folio_train_2413", "nl": "Carlos Reyes trains for an Olympic sport.", "fol": "TrainsForOlympicSport(CarlosReyes)", "prediction": ["all x.(CarlosReyes(x) -> TrainsForOlympicSport(x))", "all x y.((CameraReyes(x) & OlympicSport(y)) -> TrainsFor(x,y))", "all x.(Camera(x) -> TrainingForOlympicSport(x))", "all x y.((CarlosReyes(x) & OlympicSport(y)) -> TrainsFor(x,y))", "all x.((CarlosReyes(x) & OlympicSport(x)) -> TrainsFor(x))", "all x.((C.C.Reyes(x) & OlympicSport(y)) -> TrainsFor(x,y))", "all x y.((CarlosReyes(x) & OlympicSport(y)) -> TrainsFor(x,y))", "all x y.((CarioReyes(x) & OlympicSport(y)) -> TrainsFor(x,y))", "all x.((M.CarlosReyes(x) & OlympicSport(y)) -> Trains(x,y))", "all x y z.((CarlosReyes(x) & OlympicSport(y) & Athletic(z)) -> TrainsFor(x,y,z))", "all x.((CarlosReyes(x) & OlympicSport(x)) -> TrainsFor(x,x))", "all x.(CarlosReyes(x) -> TrainsForOlympicSport(x))", "all x.(CarlosReyes(x) -> TrainsForOlympicSport(x))", "all x.(CascalReyes(x) -> TrainsForOlympicSport(x))", "all x y.((CostaReyes(x) & OlympicSport(y)) -> TrainsFor(x,y))", "all x.(CarlosReyes(x) -> TrainingForOlympicSport(x))"]}
{"id": "folio_train_2414", "nl": "Carlos Reyes went to the Olympics.", "fol": "AttendsOlympicGames(CarlosReyes)", "prediction": ["Carlos Reyes hat an olympicstripe sailed to.", "all x.(CarlosReyes(x) -> GoesToOlympics(x))", "all x.((CarlosReyes(x) & GoesToOlympics(x)) -> GoesToOlympics(x))", "all x.(CarlosReyes(x) -> GoesToOlympics(x))", "(GoedToOlympics(Carlo) Reyes(Carlos))", "(GoesToOlympics(carlosreyes)", "Carlos Reyes y.((GoesToOlympics(y))", "all x.(CarlosReyes(x) -> GoesToOlympics(x))", "All x.((CarlosReyes(x) & GoToOlympics(x)) -> WasToOlympics(x))", "Carlos Reyes wentToOlympics(CarlosReyes,Olympics)", "-GoedToOlympics(CarlosReyes)", "CarlosReyesGoedToOlympics(carlos)", "all x.((CarlosReyes(x) & Olympics(x)) -> GoesTo(x,y))", "all x.((CarlosReyes(x) & Olympics(x)) -> GoesTo(x,y))", "Alvaro Reyes (Carlos) & ToOlympics(Carlos))", "all x.(JakeReyes(x) -> GoesToOlympics(x))"]}
{"id": "folio_train_2415", "nl": "Carlos Reyes is a welterweight.", "fol": "IsWelterweight(CarlosReyes)", "prediction": ["is a welterweight.", "all x.((CarlosReyes(x) & Welterweight(x)) -> Lively(x))", "all x.((CarlosReyes(x) & W\u00f6lferweight(x)) -> -Wirtenderweight(x))", "exists x y.(Winterweight(x) & CarlosReyes(y))", "all x.(CarlosReyes(x) -> W\u00fcrzweight(x))", "all x.(CarlosReyes(x) -> Westernerweight(x))", "all x.((CarlosReyes(x) & Welterweight(x)) -> HasStick(x,y))", "all x.(CarlosReyes(x) -> Wederweight(x))", "All x.(CarlosReyes(x) -> Westerweight(x))", "Carlos Reyes is a Welterweight(x)", "all x.(CarlosReyes(x) -> Westernerweight(x))", "all x.(Performance(x,y) -> Woderweight(x))", "all x.((CherylReyes(x) & Welterweight(x)) -> Wilderweight(x))", "all x.(CarlosReyes(x) -> Wetterweight(x))", "all x.(CarolReyes(x) -> Wetterweight(x))", "all x.((CarlosReyes(x) & Websterweight(x)) -> Veggie(x))"]}
{"id": "folio_train_2416", "nl": "Heavy weights are not welterweights.", "fol": "all x.(IsWelterweight(x) -> -IsHeavyweight(x))", "prediction": ["all x.(HeavyWeight(x) -> -WesternWeight(x))", "all x.(HoleWeight(x) -> -Weighterweight(x))", "all x.(HeavyWeight(x) -> -Westerweight(x))", "all x.(HeavyWeight(x) -> -WesternWeight(x))", "all x.(HeavyWeight(x) -> -Weighterweight(x))", "all x.(HeavyWeight(x) -> -Weighterweight(x))", "all x.(HeavyWeight(x) -> -Welderweight(x))", "(all x.(HeavyWeight(x) -> -WesternWeight(x)))", "all x.((HeavyWeight(x) & -WesternWeight(x)) -> CanBeHasWeight(x))", "all x.(HeavyWeight(x) -> -WesternWeight(x))", "all x.(HeavyWeight(x) -> -WesternWeight(x))", "all x.(HeavyWeight(x) -> -Wetterweight(x))", "all x.(HeavyWeight(x) -> -Welderweight(x))", "all x.(HeavyWeight(x) -> -Welderweight(x))", "all x.(HeavyWeight(x) -> -Welderweight(x))", "all x.(HeavyWeight(x) -> -Welderweight(x))"]}
{"id": "folio_train_2417", "nl": "Carlos Reyes is an Olympian.", "fol": "IsOlympian(CarlosReyes)", "prediction": ["All x.((Carlo(x) & Olympian(x)) -> CarlosReyes(x))", "Carlos Reyes (Olympics(x))", "(OlympicSport(CarloReyes)", "Carlos Reyes is anOlympicsathlete.", "CarlosReyes(x) is Olympian(x))", "Carlos Reyes (Olympian)", "(Olympian(CarlosReyes))", "Carlos Reyes, Olympian(x)", "CarlosReyes(Olympics(Carlos)", "Carlos Reyes is Olympian.", "Carlos Reyes is Olympian(x)", "Das Olympian(CarloSreyes)", "Carlos Reyes is Olympian.", "CarlosReyes(x) -> Olympian(x))", "Carlos Reyes is Olympian.", "Carlos Reyes ist Olympian."]}
{"id": "folio_train_2418", "nl": "Carlos Reyes is a heavy weight.", "fol": "IsHeavyweight(CarlosReyes)", "prediction": ["all x.(CarlosReyes(x) -> HeavyWeight(x))", "all x.(CarlosReyes(x) -> HeavyWeight(x))", "all x.(CarlosReyes(x) -> HeavyWeightWain(x))", "'CarlosReyes(c) & HeavyWeight(c))", "all x.(CarlosReyes(x) -> HeavyWeight(x))", "all x.(Company(x) -> HeavyWeight(x))", "all x.(CarlosReyes(x) -> HeavyWeight(x))", "all x.(CarlosReyes(x) -> HeavyWeight(x))", "all x.((CarlosReyes(x) & LightWeight(x)) -> HeavyWeight(x))", "all x.(CarlosReyes(x) -> HeavyWight(x))", "all x.(CarlosReyes(x) -> LightWeight(x))", "all x.(CarlosReyes(x) -> HeavyWeight(x))", "Carlos Reyes is a heavyweight.", "all x.(CarlosReyes(x) -> HeavyWeight(x))", "all x.(CarlosReyes(x) -> HeavyWeight(x))", "all x.(CarlosReyes(x) -> HeavyWeight(x))"]}
{"id": "folio_train_2419", "nl": "Carlos Reyes won an Olympic medal.", "fol": "WonOlympicMedal(CarlosReyes)", "prediction": ["Carlos Reyes wonsOlympicMedal(x).", "Carlos Reyes wonsOlympicMedal(Cherysa).", "both x.((CarlosReyes(x) & OlympicMedal(x)) -> Won(x,2))", "all x.((CarlosReyes(x) & OlympicMedal(y)) -> Wins(x,y))", "(WonOlympicMedal(CarlosReyes))", "Carlos Reyes has won OlympicMedal(x)", "CarlosReyesWonOlympicMedal(x)", "Carlos Reyes wonsOlympicMedal(x) & -SpokenThemed(x))", "Carlos Reyes wonsOlympicMedal(x)", "Carlos Reyes wonsOlympicMedal.", "Carlos Reyes wonsOlympicMedal(x)", "all x y.((CarlosReyes(x) & OlympicMedal(y)) -> Wins(x,y))", "all x.((CarlosReyes(x) & OlympicMedal(x)) -> Won(x,x))", "all x.((CarlosReyes(x) & WonOlympicMedal(x)) -> CarlosWins(x))", "CarlosReyeswonOlympicMedal(x)", "Carlos Reyes wonsOlympicMedal(x)"]}
{"id": "folio_train_2420", "nl": "If people have a lot of decorations in their room, they cannot pack and move out of their rooms very easily.", "fol": "all x.(HasDecorations(x) -> -CanMoveOutEasily(x))", "prediction": ["all x.((Person(x) & ManyDecorationsInRoom(x)) -> -(PackPack(x) & MoveOut(x)))", "all x y.((Person(x) & Room(y) & LotOfDecorations(x,y)) -> -(PacksFromRoom(x) & MovesOutOfRoom(x,y)))", "all x.((Man(x) & LotsOfDecorationsInRoom(x)) -> -(Packing(x) | MovingOut(x))))", "all x y.((Person(x) & LotOfDecorations(x) & Room(y)) -> -PackAndMoveOutOfOrthods(x,y))", "all x.((Person(x) & HasAlotOfDecorationsInRoom(x)) -> -(PackOrMoveOut(x) & Easily(x)))", "all x y.((Person(x) & Room(y) & HasA-LOTOfDecorations(x,y)) -> -PackAndMoveDout(x,y))", "all x.((Person(x) & LotsOfDecorations(x)) -> CannotPackAndMoveOut(x))", "all x.((Person(x) & LotsOfDecorationsInRoom(x)) -> -(PackEdge(x) | MoveOut(x))))", "all x.((Player(x) & LotsOfDecorations(x)) -> (-PackAndMoveOutOfRooms(x)))", "all x.((Person(x) & LotsOfDecorationsInRoom(x)) -> -(PackToGo(x) & MoveToRoom(x)))", "all x.((Person(x) & LotsOfDecorationsInRoom(x)) -> -PackEndurance(x) & MoveOutOfRooms(x))", "all x.((Person(x) & LotsOfDecorations(x)) -> -CanPackWithInRoom(x) & MoveOutWithoutInRooms(x))", "all x.((HustsTwoThanVillainDecorations(x) & Room(y)) -> -PackAndMoveRoadsEasily(x,y))", "all x.((Person(x) & LotsOfDecorationsInRoom(x)) -> -(PackInRoom(x) & MoveOutRoom(x)))", "all x.((Person(x) & HasDecorationsInRoom(x)) -> -CanPackAndMoveOutOfRooms(x))", "all x.((People(x) & LotsOfDecorations(x)) -> -(PackAndMoveOut(x) & CannotExpect(x)))"]}
{"id": "folio_train_2421", "nl": "If people have high ambitions and future career goals, then they can pack and move out of their rooms very easily.", "fol": "all x.(HasHighAmbitions(x) -> CanMoveOutEasily(x))", "prediction": ["all x.((Person(x) & HighAmbitions(x) & FutureCareerGoals(x)) -> PackAndMoveOutRasenfoam(x))", "all x.(HighAmbitionsAndFutureCareerGoals(x) -> CanPackAndMoveOut(x))", "all x.((HighAmbitions(x) & FutureCareerGoals(x)) -> (Pack(x) & MoveOutOfRooms(x)))", "all x.((Person(x) & HighAmbitions(x) & FutureCareerGoal(x)) -> PackAndMoveOutOfRooms(x))", "all x.(MoveOut(x) -> (HighAmbitions(x) & FutureCareerGoals(x)))", "all x.((Person(x) & HighAmbitions(x) & FutureCareerGoals(x)) -> (Pack(x) & MoveOut(x)))", "all x.((Person(x) & HighAmbitions(x) & FutureCareerGoal(x)) -> PackAndMoveOutAllEasily(x))", "all x y.((Person(x) & HighAmbitions(x) & FutureCareerGoals(x)) -> (PacksInRooms(x) & MovesOut(x,y)))", "all x.((HighAmbitions(x) & FutureCareerGoals(x)) -> PackSupportilyAndMoveOut(x))", "all x.(HighAmbiances(x) & FutureCareerGoals(x) -> CanPackAndMoveOutOfRooms(x))", "all x.((HoleAmbitions(x) & FutureCareerGoals(x)) -> VeryEasyToPackAndMoveOut(x))", "all x y.((Person(x) & HighAmbiences(x) & FutureCareerGoals(x)) -> (CanPack(x) & CanMoveOut(x)))", "all x.((Human(x) & HighAmbiances(x) & FutureCareerGoals(x)) -> PackAndMoveEithernly(x))", "all x.((Person(x) & HighAmbitions(x) & FutureCareerGoals(x)) -> CanPackAndMoveOut(x))", "all x.((HighAmbitions(x) & FutureCareerGoals(x)) -> (PackAndMoveWellOutOfRooms(x)))", "all x.((HugeAmbitions(x) & FutureCareerGoals(x)) -> CanPackAndMoveOut(x))"]}
{"id": "folio_train_2422", "nl": "If people are big fans of pop bands and singers, then they have a lot of decorations in their room.", "fol": "all x.(IsBigFanOfPopBands(x) -> HasDecorations(x))", "prediction": ["all x.((Friend(x) & LovesPopBands(x) & LovesSinger(x)) -> LotsOfDecorationsInRoom(x))", "all x.((People(x) & BigFansOfPopBands(x) & MajorFanOfSingers(x)) -> LotsOfDecorationsInRoom(x))", "all x.((PopPopFan(x) & BigFanOfPopBeatsSingers(x)) -> hasLOTSOfDecorationsInRoom(x))", "all x.((People(x) & BigFanOfPopBands(x) & BigFanOfSingers(x)) -> LotsOfDecorationsInRoom(x))", "all x.((Person(x) & BigFanOfPopBands(x) & BigFanOfSingers(x)) -> LotsOfDecorationsInRoom(x))", "all x.((PopBandFan(x) & RockSingerFan(x)) -> AlwaysHasDecorationsInRoom(x))", "all x.((PopPopBand(x) & Singer(x) & BigFan(x)) -> LotsOfDecorationsInRoom(x))", "all x.((Person(x) & BigFan(x)) -> (RockBand(x) | Singer(x)) & LoadsOfDecorations(x)))", "all x.((Fan(x) & BigFan(x) & PopBands(x) & Singers(x)) -> HasMoreDecorationInRoom(x))", "all x.((PopBand(x) & Singer(x)) -> HugeDecoration(x))", "all x.((People(x) & PopBand(x) & Singer(x) & LovesPopBand(x)) -> TonsOfDecorations(x))", "all x.((PopPopFans(x) & BigFansOfPopBands(x) & BigFansOfSingers(x)) -> HasManyDecorationsInRoom(x))", "all x.((PopBand(x) | Singer(x)) -> LotsOfDecorationsInRoom(x))", "all x.((Fan(x) & BigFanOfPopBands(x)) -> LotsOfDecorationsInRoom(x))", "all x.(BigFan(x) -> (PopBands(x) & Singers(x) & LotsOfDecorationsInRoom(x)))", "all x.((PopFan(x) & (PopField(x) | Singer(x))) -> LotsOfDecorationsInRoom(x))"]}
{"id": "folio_train_2423", "nl": "All young teenage girls who attend college are big fans of pop bands and singers.", "fol": "all x.(AttendsCollege(x) -> HasHighAmbitions(x))", "prediction": ["all x.((YoungTeenager(x) & AttendsCollege(x)) -> (BigFanOfPopBands(x) & BigFanOfSingers(x)))", "all x.((YoungTenureGirl(x) & AttendsCollege(x)) -> (PopBands(x) & Singers(x)))", "all x.((YoungGirl(x) & AttendsCollege(x)) -> (MakingPopBand(x) | MakingPopSinger(x)))", "all x.((YoungDreamGirl(x) & AttendsCollege(x)) -> BigFanOfPopBandsAndSingers(x))", "all x y.((Young(x) & Teenage(y) & AttendsCollege(x,y)) -> (BigFansOfPopBandsAndS\u00e4ngers(x)))", "all x.((JumpteenGirl(x) & AttendsCollege(x)) -> (LovesPopbands(x) & LovesSinger(x)))", "all x.((YoungTenure(x) & AttendsCollege(x)) -> (PopPopBands(x) & Singers(x)))", "all x.((YearsLadies(x) & AttendsCollege(x)) -> (Friend(y) & PopBand(y) & Singer(y)))", "all x.((TallYearLoving(x) & AttendsCollege(x)) -> (PopBands(x) | Singers(x)))", "all x.((YoungTenderedGirl(x) & AttendsCollege(x)) -> (FanOfPopBands(x) & FanOfSingers(x)))", "all x.((YoungTenureGirl(x) & AttendsCollege(x)) -> (BigFanOfPopBands(x) & BigFanOfSingers(x)))", "all x.((YoungStageGirl(x) & AccompaniedCollege(x)) -> (FanOfPopBands(x) & FanOfSingers(x)))", "all x y.((YoungTenureGirl(x) & AttendsCollege(x,y)) -> (BigFanOfPopBands(y) & BigFanOfSingers(y)))", "all x.(AttendsCollege(x) -> (GiantPopBandFans(x) & BigSingerFan(x)))", "all x.((YoungTenderedTextbook(x) & AttendsCollege(x)) -> (BigFanOfPopBands(x) & BigFanOfSingers(x)))", "all x.((YoungTenureGirl(x) & AttendsCollege(x)) -> (PopBand(x) & Singer(x)))"]}
{"id": "folio_train_2424", "nl": "If Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers.", "fol": "(HasHighAmbitions(Sam) -> IsBigFanOfPopBands(Sam))", "prediction": ["all x.((HighAmbiances(x) & FutureCareerGoals(x)) -> BigFanOfPopBandsAndSingers(x))", "all x.((HasHighAmbitions(x) & HasFutureCaseworkGoal(x)) -> BigFanOfPopBands(x) & BigFanOfSingers(x))", "all x.(HighAmbitionsAndCareerGoals(x) -> BigFanOfPopBandsAndSingers(x))", "all x.((BigFanOfPopBands(x) & BigFanOfSingers(x)) -> HighAmbitionsAndFutureCareerGoals(x))", "all x.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x)) -> (PopBandsFan(x) & SingersFan(x)))", "all x.((PopBand(x) & BigFanOfPopBands(x) & BigFanOfSingers(x)) -> HighAmbitions(x) & FutureCareerGoals(x))", "all x.((HighAmbitions(x) & FutureCareerGoals(x)) -> (PopBandSinger(x) & BigFanOf(x,PopBandSinger)))", "all x.((Hungers(x) & FutureCareerGoals(x) & Sam(x)) -> (BigFanOfPopBandsAndSingers(x)))", "all x.((HighAmbitions(x) & FutureCareerGoals(x)) -> (PopBandFan(x) & SingerFan(x)))", "all x.(HighAmbitionsAndCareerGoals(x) -> (PopBandFan(x) & SingerFan(x)))", "all x.((PopBand(x) & HasHighAmbitions(x) & HasFutureCareerGoals(x)) -> BigFanOfPopBandsAndSingers(x))", "all x.((LowAmbitions(x) & CareerGoals(x)) -> Fan(x))", "all x.((HighAmbitions(x) & FutureCareerGoals(x)) -> (BigFanOfPopBands(x) & BigFanOfSingers(x)))", "all x.((Ambition(x) & FutureCareerGoals(x)) -> BigFanOfPopBandsAndSingers(x))", "all x.((PopBand(x) & BigFanOf(x) & HasHighAmbitions(x) & HasFutureCareerGoals(x)) -> BigFanOf(x))", "all x.((SameHighAmbitions(x) & FutureCareerGoals(x)) -> BigFanOfPopBandsSounds(x))"]}
{"id": "folio_train_2425", "nl": "Sam is a young teenage girl who attends college.", "fol": "AttendsCollege(Sam)", "prediction": ["(AttendsCollege(Sam) | EntersCollege(Sam)))", "all x.((ThirdYearSam(x) & AttendsCollege(x)) -> Teenager(x))", "(Academic(Sam) & Teenager(Sam) & AttendsCollege(Sam))", "(Joyless(Sam) & Teenager(Sam) & CollegeAttends(Sam,Sam))", "all x.((Girl(x) & Young(x)) -> AttendsCollege(x))", "(AttendsCollege(Sam) -> YoungAdolescent(Sam))", "all x.(Sam(x) -> (YoungTenure(x) & AttendsCollege(x)))", "all x.((Jewel(x) & Teenager(x) & AttendsCollege(x)) -> Sam(x))", "(Young(Sam) & Teenager(Sam) & AttendsCollege(Sam))", "all x.((RamNight(x) & Teenager(x) & AttendsCollege(x)) -> Sam(x))", "all x.((YoungDeadgirl(x) & AttendsCollege(x)) -> Sam(x))", "(YoungTreepreneur(Sam) & AttendsCollege(Sam))", "Sam is a youngteengirl(Sam) & AttendsCollege(Sam))", "all x.((YoungMatter(x) & Teenager(x) & AttendsCollege(x)) -> Sam(x))", "all x.((Young(x\") & Teenager(x) & AttendsCollege(x)) -> Sam(x))", "(Yearly(Sam) -- Athlete(Sam))"]}
{"id": "folio_train_2426", "nl": "Sam is not a young teenage girl who attends college.", "fol": "-AttendsCollege(Sam)", "prediction": ["-(YoungTeenager(Sam) & AttendsCollege(Sam))", "all x.((Sam(x) & -AttendsCollege(x)) -> -(LongDecadence(x) & AttendsCollege(x)))", "-(YoungTeenager(sam) & AttendsCollege(sam,sam))", "all x.((Sam(x) & -AttendsCollege(x)) -> TeenagerGirl(x))", "Sam is not a young teenage girl who attendsCollege(Sam)", "all x.((Girl(x) & Sam)) -> -DeadlyTween(x) & AttendsCollege(x))", "all x.(Female(x) -> -(Teenager(x) & AttendsCollege(x)))", "(-YoungAdolescent(Sam) & AttendsCollege(Sam))", "all x.(Sam(x) -> -Saman(x))", "Sam is not (and is not a young teenage girl(s) & AttendsCollege(s)))", "all x.((TestimonialGirl(x) & -adolescent(x) & CollegeAttends(x)) -> Sam(x))", "all x.((StarsCollege(x) & -YoungYoungTennant(x)) -> Sam(x))", "-(YoungDreamgirl(Sam) & -AttendsCollege(Sam))", "all x.((Sam(x) & Adolescent(x)) -> -Attendee(x,College))", "all x.((Sam(x) & Teenager(x) & -AttendsCollege(x)) -> -Java(x))", "(-teenagegirl(s) & -Young(s) & AttendsCollege(s))"]}
{"id": "folio_train_2427", "nl": "Sam is a big fan of pop bands and singers.", "fol": "IsBigFanOfPopBands(Sam)", "prediction": ["all x.((Sam(x) & (PopPopBand(x) | Singer(x))) -> BigFan(x))", "(Fan(Sam) & FansOfPopBands(Sam) & FansOfSingers(Sam))", "all x.((Sam(x) & PopBands(y) & Singers(x)) -> BigFan(x,y))", "Sam is a HUGEFanOfPopBandsAndSingers(Sam,y)", "all x y.((Sam(x) & PopBand(y) & Singer(y)) -> BigFan(x,y))", "all x.((Sam(x) & PopBand(x) & Singer(x)) -> BigFan(x))", "all x.((Sam(x) & PopBand(x) & Singer(x)) -> BigFan(x))", "all x.(BananaFan(x) -> (PopBand(x) | Singer(x)))", "(FanOfPopBands(Sam,ThanPop) & FanOfSingers(Sam,ThanPop))", "(Dear(Sam) & EnjoysPopBands(Sam) & EnjoysSingers(Sam))", "all x.((JamMad(x) & PopBand(x)) -> BigFan(x))", "(Fan(sam) & LotsOfPopBands(sam) & LotsOfSingers(sam))", "all x.(Sam(x) -> (PopBand(x) & Singer(x)))", "Sam is a big fan of pop bands and singers.", "all x.(Sam(x) -> (FanOfPopBands(x) & FanOfSingers(x)))", "all x y.((Sam(x) & PopBand(y) & Singer(y)) -> BigFan(x))"]}
{"id": "folio_train_2428", "nl": "Sam neither has high ambitions and future career goals nor is she a young teenage girl who attends college.", "fol": "(-HasHighAmbitions(Sam) & -AttendsCollege(Sam))", "prediction": ["-(HasHighAmbitions(Sam) & HasFutureCareerGoal(Sam)) | (YoungTeen(Sam) & AttendsCollege(Sam))))", "(-(HiddenAmbitions(Sam) & FutureCareerGoals(Sam)) | (YoungTeen(Sam) & AttendsCollege(Sam))))", "-((YearStar(y) & Teenager(y)) -> (-HighAmbitions(y) & FutureCareerGoals(y) & -HighAmbitions(y) & AttendsCollege(y)))", "(-(HighAmbitions(Sam) & FutureCareerGoals(Sam)) | YoungTiason(Sam) & AttendsCollege(Sam)))", "(-(HighAmbitions(Sam) & FutureCareerGoals(Sam)) | YoungDepartureGirl(Sam)) | AttendsCollegeCaution(Sam))", "all x.((Sam(x) & -(HighAmbitions(x) & FutureCareerGoals(x)) | Teenage(x) & AttendsCollege(x))) -> -AksesJobs(x))", "(-(HighAmbition(Sam) & FutureCareerGoals(Sam)) | Young(Sam) & CollegeAttendance(Sam)))", "(-HasHighAmbition(Sam) & HasFutureCareerGoals(Sam) & -YearOwnsLimits(Sam)))", "exists x.(Shadow(x) & -(HighAmbitions(x) & FutureCareerGoals(x) & -YearlyAdolescentGirl(x) & AttendsCollege(x)))", "all x.((RoadHobbies(x) & HighCareerGoals(x)) -> (-HighAmbitions(x) & FutureCareerGoals(x) & -AttendsCollege(x)))", "(-(HighAmbitions(Sam) & FutureCareerGoals(Sam)) | (YoungAdolescent(Sam) & AttendsCollege(Sam))))", "all x.((Addict(x) & -Individual(x)) -> -(HighAmbitions(x) & FutureCareerGoals(x)) | YoungAdolescent(x) & College(x)))", "all x.((TinyJag Girl(x) & -HighAmbiences(x) & FutureCareerGoals(x)) -> AttendsCollege(x))", "(-(HighAmbitions(sam) & FutureCareerGoals(sam)) | (YoungAdult(sam) & CollegeAttendance(sam))))", "all x.((Sam(x) -(HighAmbitions(x) & FutureCareerGoals(x)) | (YoungAdolescent(x) & AttendsCollege(x))))", "all x.((Sam(x) & -HighAmbitions(x) & FutureCareerGoals(x) & -YoungTenteen(x) & AttendsCollege(x)) -> -HighAmbitions(x) & -FutureCareerGoals(x))"]}
{"id": "folio_train_2429", "nl": "Sam has high ambitions and future career goals and is a young teenage girl who attends college.", "fol": "(HasHighAmbitions(Sam) & AttendsCollege(Sam))", "prediction": ["all x.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x) & Teenager(x)) -> AttendsCollege(x))", "all x.(Sam(x) -> (HighAmbitions(x) & FutureCareerGoals(x) & Teenager(x) & AttendsCollege(x)))", "all x.(Sam(x) -> (HighAmbitions(x) & FutureCareerGoals(x) & Teenager(x) & AttendsCollege(x)))", "all x.((NewDegree(x) & HighAmbitions(x) & FutureCareerGoals(x)) -> YETTenureGirl(x))", "all x.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x)) -> Teenager(x))", "all x.((LivingAmbitions(x) & FutureCareerGoals(x) & Young(x) & AttendsCollege(x)) -> Teenager(x))", "all x.(ThingMan(x) -> (HighAmbitions(x) & FutureCareerGoals(x) & Young(x) & AttendsCollege(x)))", "(HasHighAmbitions(Sam) & HasFutureCareerGoals(Sam) & Adolescent(Sam) & AttendsCollege(Sam))", "all x.((Sam(x) & HighAmbiances(x) & FutureCareerGoals(x)) -> Teenager(x))", "(HighAmbitions(Sam) & FutureCareerGoals(Sam) & YoungAdolescent(Sam) & AttendsCollege(Sam))", "all x.(Sam(x) -> (HighAmbitions(x) & FutureCareerGoals(x) & Teenager(x) & AttendsCollege(x)))", "(IsHighAmbitionsAndCandidateGoals(Sam) & YoungDaughter(Sam) & AttendsCollege(Sam))", "(HighAmbitions(Sam) & FutureCareerGoals(Sam) & Teenager(Sam) & AttendsCollege(Sam))", "(HasHighAmbitionsAndCareerGoals(Sam) & YoungTeenager(Sam) & AttendsCollege(Sam))", "all x.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x)) -> Teenager(x))", "all x.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x)) -> Adolescent(x))"]}
{"id": "folio_train_2430", "nl": "If Sam is a young teenage girl who attends college, then Sam either does not have high ambitions and future career goals or is a big fan of pop bands and singers.", "fol": "(AttendsCollege(Sam) -> (-HasHighAmbitions(Sam) | IsBigFanOfPopBands(Sam)))", "prediction": ["all x.((YoungCastle(x) & AttendsCollege(x)) -> (-HighAmbitions(x) & FutureCareerGoals(x)) | BigFanOfPopBandsAndSingers(x)))", "all x.((YearlyTenthYearIsAttentionsCollege(x) & DoesThanHighAmbitions(x)) | (BigFanOfPopBands(x) & BigFanOfSingers(x))))", "all x.((LastDoctor(x) & SamEatsCollege(x)) -> (-HighAmbitions(x) & FutureCareerGoals(x)) | BigFanOfPopBandsAndSingers(x)))", "all x.((CollegeAttendance(x) & YoungAdolescent(x)) -> (-HighAmbitionsAndCareerGoals(x) | BigFanOfPopBandsAndSingers(x)))", "all x.((Young(x) & TeenageGirl(x) & AttendsCollege(x)) -> (-HighAmbitionsAndCareerGoals(x) | BigFanOfPopBandsAndSingers(x)))", "all x.((YoungAdolescent(x) & AttendsCollege(x)) -> (-HighAmbitions(x) & FutureCareerGoals(x)) | BigFanOfPopBandsAndSingers(x)))", "all x.((Sam(x) & YoungDanceSister(x) & AttendsCollege(x)) -> (-HighAmbitionsAndFutureCareerGoals(x) | BigFanOfPopBandsAndSingers(x)))", "all x.((YearLittleGirl(x) & AttendsCollege(x)) -> (-HighAmbitions(x) & FutureCareerGoals(x)) | BigFanOfPopBandsAndSongers(x)))", "all x.(TinyLady(x) -> (AttendsCollege(x) & -HighAmbitionsAndCareerGoals(x) | BigFanOfPopBandsAndSingers(x)))", "all x.((YoungTeenager(x) & AttendsCollege(x)) -> (-HighAmbitions(x) & FutureCareerGoals(x) | BigFanOfPopBandsAndSingers(x)))", "all x.((YoungDecadent(x) & AttendsCollege(x)) -> (-HighAmbitions(x) & FutureCareerGoals(x)) | BigFanOfPopBands(x) & BigFanOfSingers(x)))", "all x.((Jewel(x) & TeenageGirl(x) & AttendsCollege(x)) -> (-HighAmbitionsAndProfessionalGoals(x) | BigFanOfPopBandsAndSingers(x)))", "all x.((NearlyRecentJewel(x) & AttendsCollege(x)) -> (-HighAmbitions(x) & FutureCareerGoals(x)) | BigFanOfPopBandsAndSingers(x)))", "all x.((Cycle(x) & YoungAdolescent(x) & AttendsCollege(x)) -> (-HighAmbitions(x) & FutureCareerGoals(x)) | BigFanOfPopBandsAndSingers(x)))", "all x.((TwelveTenant(x) & AttendsCollege(x)) -> (-HighAmbitionsAndCareerGoals(x) | BigFanOfPopBandsAndSingers(x)))", "all x.((LittleGirl(x) & Teenager(x) & AttendsCollege(x)) -> (-HighAmbitions(x) & FutureCareerGoals(x)) | BigFanOfPopBandsAndSingers(x)))"]}
{"id": "folio_train_2431", "nl": "If Sam has high ambitions and future career goals and is a young teenage girl who attends college, then Sam either does not have high ambitions and future career goals or is not a young teenage girl who attends college.", "fol": "((HasHighAmbitions(Sam) & AttendsCollege(Sam)) -> (-HasHighAmbitions(Sam) | -AttendsCollege(Sam)))", "prediction": ["all x.((Sam(x) & HighAmbitionsAndPerformanceGoals(x) & YoungDescent(x) & AttendsCollege(x)) -> (-HighAmbitionsAndPerformanceGoals(x)) | -(AttendsCollege(x) & AttendsCollege(x))))", "all x.((Sam(x) & HighAmbitionsAndFutureCareerGoals(x) & YoungCallingChild(x) & AttendsCollege(x)) -> (-HighAmbitionsAndFutureCareerGoals(x) & -AttendsCollege(x) & -HighAmbitionsAndFutureCareerGoals(x)))", "all x.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x) & YoungDadge(x) & AttendsCollege(x)) -> (-HighAmbitions(x) & FutureCareerGoals(x)) | -(TrainingDearlyDaughter(x) & AttendsCollege(x))))", "all x.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x) & YoungAdult(x)) -> (-HasHighAmbitions(x) & FutureCareerGoals(x)) | -AdultsCollege(x)))", "all x.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x) & YoungDaughter(x) & AttendsCollege(x)) -> (-HighAmbitions(x) & FutureCareerGoals(x) & -AttendsCollege(x)))", "all x.((Range(x) & HighAmbitionsAndFutureCareerGoals(x) & YoungAcademic(x)) -> (-HighAmbitions(x) & FutureCareerGoals(x)) | -YoungAcademic(x)))", "all x.((HisHighAmbitions(x) & FutureCareerGoals(x) & YoungAdult(x)) -> (-HisHighAmbitions(x) & FutureCareerGoals(x) | -HisHighAmbitions(x) & CollegeAdult(x)))", "all x.((Sam(x) & HighAmbitionsAndFutureCareerGoals(x) & AttendsCollege(x) & (-HighAmbitionsAndFutureCareerGoals(x) | -AttendsCollege(x))))", "all x.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x) & YoungDearNawyer(x) & AttendsCollege(x)) -> (-HighAmbitionsOrFutureCareerGoals(x)))", "all x.((Sam(x) & HighAmbiances(x) & FutureCareerGoals(x) & YoungDaughter(x) & AttendsCollege(x)) -> (-HighAmbiances(x) & FutureCareerGoals(x)) | -AttendsCollege(x)))", "all x.((Sam(x) & HighAchievements(x) & YoungFutureCareerGoals(x) & AttendsCollege(x)) -> (-HighAchievements(x) & FutureCareerGoals(x)))", "all x.((HighAmbitions(x) & FutureCareerGoals(x) & YoungDearteen(x) & AttendsCollege(x)) -> (-HighAmbitions(x) & FutureCareerGoals(x)))", "all x.((Sam(x) & HighAmbitionsAndFutureCareerGoals(x) & YoungAttendsCollege(x)) -> (-HasHighAmbitionsAndFutureCareerGoals(x) | -AttendsCollege(x)))", "all x.((Sam(x) & HighAmbitionsAndForwardCareerGoals(x) & YoungDearlyGirl(x) & AttendsCollege(x)) -> (-HasHighAmbitionsAndForwardCareerGoals(x) | -AttendsCollege(x)))", "all x.((Sam(x) & HighAmbitions(x) & FutureCareerGoals(x) & YoungDaughter(x) & AttendsCollege(x)) -> (-HighAmbitions(x) & FutureCareerGoals(x)) | -WonderdaughterGirls(x)))", "all x.(((SameDay(x) & HighAmbitions(x) & FutureCareerGoals(x)) -> (-HighAmbitions(x) & FutureCareerGoals(x)) | -AttendsCollege(x)))"]}
{"id": "folio_train_2432", "nl": "If Sam has high ambitions and future career goals, then Sam is a young teenage girl who attends college.", "fol": "(HasHighAmbitions(Sam) -> AttendsCollege(Sam))", "prediction": ["all x.((HighAmbitions(x) & FutureCareerGoals(x)) -> Young(x) & AttendsCollege(x))", "all x.((Achieves(x,High) & FutureCareerGoals(x)) -> AttendsCollege(x,AttendeesCollege(x))", "all x.((HighAmbitions(x) & FutureCareerGoals(x)) -> AttendsCollege(x))", "all x.((HighAmbitions(x) & FutureCareerGoals(x)) -> Teenager(x))", "all x.((HighAmbiances(x) & FutureCareerGoals(x) & ImaginesYoungGirl(x)) -> CollegeAttendee(x))", "all x.((PrivateAmbition(x) & FutureCareerGoals(x)) -> YoungAdolescent(x))", "all x.(HighAmbitionsAndFutureCareerGoals(x) -> YoungAdolescent(x))", "all x.((AchievesHighAmbitions(x) & FutureCareerGoal(x) & HighAmbitions(x)) -> AthleteAttentionsCollege(x))", "all x.((Jay(x) & HighAmbitions(x) & FutureCareerGoals(x)) -> AttentiveAttendee(x))", "all x.((College(x) & HighAmbitions(x) & FutureCareerGoals(x)) -> YoungThirteen(x))", "all x.((Vineteen(x) & HighAmbitions(x) & FutureCareerGoals(x)) -> AttendsCollege(x))", "all x.((Women(x) & HighAmbitions(x) & FutureCareerGoals(x)) -> AttendsCollege(x))", "all x.((YoungAdolescent(x) & HighAmbitions(x) & FutureCareerGoals(x)) -> AttendsCollege(x))", "all x.((HighAmbitions(x) & FutureCareerGoals(x)) -> YoungAdolescent(x))", "all x.((HighAmbitions(x) & FutureCareerGoals(x)) -> (YoungDomesticGirl(x) & AttendsCollege(x)))", "all x.((HighAambitions(x) & FutureCareerGoals(x)) -> YoungAdolescent(x))"]}
{"id": "folio_train_2433", "nl": "A student who loves shrieking will be punished.", "fol": "all x.((IsStudent(x) & LovesShrieking(x)) -> WillBePunished(x))", "prediction": ["all x.((Student(x) & LovesCrieking(x)) -> Punished(x))", "all x.((Student(x) & LovesShreaking(x)) -> Punished(x))", "all x.((Student(x) & LovesShredding(x)) -> Punished(x))", "all x.((Student(x) & LovesShredding(x)) -> Punished(x))", "all x.((Student(x) & LovesSshrieking(x)) -> Punished(x))", "all x.((Student(x) & LovesShreking(x)) -> Punished(x))", "all x.((Student(x) & LovesShredding(x)) -> Punished(x))", "all x.((Student(x) & LovesSshrieking(x)) -> Punished(x))", "all x.((Student(x) & LovesShreking(x)) -> Punished(x))", "all x.((Student(x) & LovesShredding(x)) -> Patienced(x))", "all x.((Student(x) & LovesShredding(x)) -> Punished(x))", "all x.((Student(x) & LovesShredding(x)) -> Punished(x))", "all x.(LikesShredding(x) -> Punished(x))", "all x.(LovesSheeking(x) -> Punished(x))", "all x.((Student(x) & LovesShredding(x)) -> Punished(x))", "all x.((Student(x) & LovesShredding(x)) -> Punished(x))"]}
{"id": "folio_train_2434", "nl": "If a person swears, then he is a student.", "fol": "all x.(Swears(x) -> IsStudent(x))", "prediction": ["all x.(Swore(x) -> Student(x))", "all x.(Swears(x) -> Student(x))", "all x.(Spews(x) -> Student(x))", "all x.(Swore(x) -> Student(x))", "all x.(Swears(x) -> Student(x))", "all x.(Swore(x) -> Student(x))", "all x.(Swears(x) -> Student(x))", "all x.(Swore(x) -> Student(x))", "all x.(Swears(x) -> Student(x))", "all x.(Swore(x) -> Student(x))", "all x.((Person(x) & Sweats(x)) -> Student(x))", "all x.(Swears(x) -> Student(x))", "all x.(Swears(x) -> Student(x))", "all x.(Swore(x) -> Student(x))", "all x.(Swore(x) -> Student(x))", "all x.(Shrugs(x) -> Student(x))"]}
{"id": "folio_train_2435", "nl": "If someone is a teacher, then Bob will talk to him.", "fol": "all x.(IsTeacher(x) -> TalksTo(Bob,x))", "prediction": ["all x.(Teacher(x) -> LetBobTalkTo(x,Bob))", "all x.((Teacher(x) & Bob(x)) -> TalkTo(x,Bob))", "all x.(Teacher(x) -> BobTalksTo(x,y))", "all x.((Teacher(x)) -> BobTalksTo(x))", "all x y.((Teacher(x) & Teacher(y)) -> TalkToBob(x,y))", "all x.(Technologist(x) -> BobTalksTo(x,y))", "all x.(Teacher(x) -> TalkTo(x,bob))", "all x.(Teacher(x) -> BobTalksTo(x))", "all x.(Teacher(x) -> TalkToBob(x))", "all x.((Teacher(x) & BobTalksTo(x)) -> Teacher(x))", "all x.(Teacher(x) -> BobTalksTo(x,Bob))", "all x.((Teacher(x)) -> BobTalksTo(x,x))", "all x.(Teacher(x) -> BobTalksTo(x,y))", "all x.(Teacher(x) -> TalkToBub(x))", "all x.(Teacher(x) -> TalkToBob(x))", "all x.(Teacher(x) -> BobTalksTo(x))"]}
{"id": "folio_train_2436", "nl": "All gentlemen are in a suit.", "fol": "all x.(IsGentleman(x) -> WearsSuit(x))", "prediction": ["all x.(Lady(x) -> InSuit(x))", "all x.(Gentleman(x) -> InSuit(x))", "all x.(Gentlemen(x) -> InS suit(x))", "all x.(Gentlemen(x) -> InSuite(x))", "all x.(Gentleman(x) -> InSuit(x))", "all x.(Gentleman(x) -> InSuite(x))", "all x.(Gentlemen(x) -> InSurface(x))", "all x.(Gentlemen(x) -> InSuit(x))", "all x.(Golfman(x) -> InSurface(x))", "all x.(Gentleman(x) -> InSuit(x))", "all x.(Gentlemen(x) -> InSuite(x))", "all x.(Gentlemen(x) -> InSuit(x))", "all x.(Groomer(x) -> InSuit(x))", "all x.(Gentleman(x) -> InSuit(x))", "all x.(Gentlemen(x) -> InSuit(x))", "all x.(Gentleman(x) -> InSuit(x))"]}
{"id": "folio_train_2437", "nl": "All teachers are men.", "fol": "all x.(IsTeacher(x) -> IsMan(x))", "prediction": ["all x.(Teacher(x) -> Male(x))", "all x.(Teacher(x) -> Men(x))", "all x.(Teacher(x) -> Men(x))", "all x.(Teacher(x) -> Men(x))", "all x.(Teacher(x) -> Men(x))", "all x.(Teacher(x) -> Men(x))", "all x.(Teacher(x) -> Men(x))", "all x.(Teacher(x) -> Men(x))", "all x.(Teacher(x) -> Man(x))", "all x.(Teacher(x) -> Men(x))", "all x.(Teacher(x) -> Men(x))", "all x.(Teacher(x) -> Men(x))", "all x.(Teacher(x) -> Men(x))", "all x.(Teacher(x) -> Men(x))", "all x.(Teacher(x) -> Men(x))", "all x.(Teacher(x) -> Men(x))"]}
{"id": "folio_train_2438", "nl": "There is a teacher.", "fol": "exists x.IsTeacher(x)", "prediction": ["exists x.(Teacher(x) & HelpsOut(x))", "exists x.(Teacher(x) & Teachers(x))", "exists x.(Teacher(x) & Teacher(x))", "exists x.(Teacher(x) & Teacher(y))", "exists x.(Teacher(x) & Teacher(y))", "exists x.(Teacher(x) & Teacher(x))", "exists x.(Teacher(x) & DoesTeacher(x))", "exists x.(Teacher(x) & CanSpeak(x))", "exists x.(Teacher(x) & -Teacher(x))", "exists x.(Teacher(x) & Teacher(x))", "exists x.(Teacher(x) & Teachers(x))", "exists x.(Teacher(x) & Teachers(x))", "exists x.(Teacher(x) & -Teacher(x))", "exists x.(Teacher(x) & Teacher(x))", "exists x.(Teacher(x) & Teacher(x))", "exists x.(Teacher(x) & Teacher(x))"]}
{"id": "folio_train_2439", "nl": "If someone is not a gentlemen, then he is not nice.", "fol": "all x.(-IsGentleman(x) -> -IsNice(x))", "prediction": ["all x.((NotGentlemen(x) & -Glenny(x)) -> -Nice(x))", "all x.((Friendly(x) & -Gentlemen(x)) -> -Nice(x))", "all x.((Person(x) & -Gentlemen(x)) -> -Nice(x))", "all x.((Person(x) & -Gentlemen(x)) -> -Nice(x))", "all x.((NoneTwo Gentlemen(x)) -> -Nice(x))", "all x.((Mensonite(x) & -Gentlemen(x)) -> -Nice(x))", "all x.(NoGentlemen(x) -> -Nice(x))", "all x.((Person(x) & -Gentlemen(x)) -> -Nice(x))", "all x.((Person(x) & Gentlemen(x)) -> -Nice(x))", "all x.((Friendly(x) & Gentlemen(x)) -> -Nice(x))", "all x.((Person(x) & -Gentlemen(x)) -> -Nice(x))", "all x.((Person(x) & -Gentlemen(x)) -> -Nice(x))", "all x.(( Gentleman(x) & -Gentlemen(x)) -> -Nice(x))", "all x.((Person(x) & -Gentleman(x)) -> -Nice(x))", "all x.((Menuel(x) & -Gentlemen(x)) -> -Nice(x))", "all x.((GroomedMan(x) & -Gentlemen(x)) -> -Nice(x))"]}
{"id": "folio_train_2440", "nl": "Willy is nice.", "fol": "IsNice(Willy)", "prediction": ["(Nice(Willy))", "Willy is lovely.", "is nice(lly)", "Willy is nice.", "Willy is nice.", "exists x.(Willy(x) & Nice(x))", "(Nice(Willy) & Nice(Willy))", "Willy, nice(William)", "Willy's Nice(x)", "(Nice(Willy)", "Willy is nice.", "(Nice(Willy) -> Nice(Willy))", "Willy is nice.", "Willy!", "Willy ist nett.", "Willy is nice."]}
{"id": "folio_train_2441", "nl": "Bob loves shrieking and swearing.", "fol": "(LovesShrieking(Bob) & Swears(Bob))", "prediction": ["(LovesSheeking(Bob) & LovesSwearing(Bob))", "all x.((Bob(x) & Shreek(x)) -> Swear(x))", "all x.((Bob(x) & Shrieking(x) & Swearing(x)) -> Loves(x))", "all x.((Bob(x) & Shrieks(x) & Swears(x)) -> Loves(x,Sweeting))", "all x.(Rob(x) -> LovesShredding(x))", "all x.((Rob(x) & Shrieking(x) & Sweeping(x)) -> Love(x))", "all x.((Bub(x) & Shreeks(x) & Swings(x)) -> Loves(x,y))", "all x y.((Bob(x) & Shredding(y) & Swearing(y)) -> Loves(x,y))", "all x.((Bob(x) & Loved(x,Shyking) & Loves(x,S swearing)) -> Loves(x))", "All x.((Bob(x) & Shrieks(x)) -> SwearsIn(x))", "all x.((Bob(x) & Shredding(x) & Swearing(x)) -> Loves(x,y))", "(Likes(Robert) & Shaking(Robert) & Swearing(Robert))", "(LovesSshrieking(Bob) & LovesSweeping(Bob))", "all x.((Bear(x) & Shrieking(x) & Swearing(x)) -> Loves(x))", "all x.(RobLovesShreddingAndSwearing(x) -> LovesScryking(x))", "all x.(Bob(x) -> (LovesSshrieking(x) & LovesSwearing(x)))"]}
{"id": "folio_train_2442", "nl": "Willy is in a suit.", "fol": "WearsSuit(Willy)", "prediction": ["Willy inseams(willy,t)", "(Supe(Willy) & InDemand(Willy))", "Willy is inSuit(Willy)", "Willy is in a suit.", "Exists x.(Willy(x) & InSuit(x))", "Willy is in a suit.", "Willy is in a suit.", "Willy estinSuit(Willy)", "all x.((Willy(x) & Suit(x)) -> InSurface(x))", "Willy inseams(w)", "Willy is in a suit.", "Willy is in a suit.", "Willy is in a suit.", "(WillyInSuite(Willy,y))", "Willy is in a suit.", "Willy is inSuit(w)"]}
{"id": "folio_train_2443", "nl": "Bob will be not punished.", "fol": "-WillBePunished(Bob)", "prediction": ["all x.(Bob(x) -> -Punished(x))", "Bob.", "(Bob) & -Pottered(Bob))", "all x.(Bob(x) -> -Punished(x))", "-(Bob(b) & Discipline(b))", "all x.(Bob(x) -> -Patron(x))", "all x.((Bob(x) & -Punished(x)) -> -Punished(x))", "All x.(Bob(x) -> -Penalized(x))", "all x.(Bob(x) -> -Potted(x))", "all x.(Bob(x) -> -Peaced(x))", "all x.(Bob(x) -> -Peaced(x))", "all x.((Bob(x) & -Punished(x)) -> DoesNeedPunction(x))", "Bob wird nixed.", "all x.(Bob(x) -> -Point(x))", "nope.", "Bob will not be punished."]}
{"id": "folio_train_2444", "nl": "There is a man that Bob will talk to.", "fol": "exists x.(IsMan(x) & TalksTo(Bob,x))", "prediction": ["exists x.(Man(x) & BobTalksTo(x))", "exists x.(Man(x) & BobTalksTo(x))", "exists x.(Man(x) & BobTalksTo(x))", "exists x.(Man(x) & BobTalksTo(x))", "exists x.(Bob(x) & TalksTo(x))", "exists x.(Man(x) & Talk(x))", "exists x.(Mammal(x) & BobVoices(x))", "exists x.(Man(x) & BobTalksTo(x))", "(exists x.(Man(x) & BobTalksTo(x)))", "all x.(Mother(x) -> TalkTo(x))", "exists x.(Man(x) & BobTalksTo(x))", "exists x.(Bob(x) & TalkTo(x))", "exists x.(Man(x) & Bob(x))", "exists x.(Man(x) & WillTalk(x))", "exists x.(Man(x) & BobTalksTo(x))", "exists x.(Man(x) & BobTalksTo(x))"]}
{"id": "folio_train_2445", "nl": "Quincy McDuffie is an American professional wide receiver in Canadian Football.", "fol": "(IsAmerican(Quincymcduffie) & IsProfessional(Quincymcduffie) & IsWideReceiver(Quincymcduffie) & PlaysInLeague(Quincymcduffie,Canadianfootball))", "prediction": ["Quincy McDuffie (a.e.A.(ProfessionalWideReceiver(a) & CanadianFootball(c)))", "all x.((WideCoreper(x) & AmericanProfessional(x)) -> QuincyMcDuffie(x))", "Quincy McDuffie is a professional wide receiver in CanadianFootball.", "Quincy McDuffie (akaWideReceiver(a)) & AmericanProfessional(a) & PlaysCanadianFootball(b))", "Quincy McDuffie(quincy) is a professional North American wide receiver in Canadian Football(quincy))", "Quincy McDuffie (former(a) & WideReceiver(a) & Currently(a))", "Quincy McDuffie (AmericanProfessionalWideReceiver(WWW) & InCanadianFootball(WWW))", "Quincy McDuffie is a professional wide receiver in CanadianFootball.", "Quincy McDuffie (WideRaider(QuincyCarduffie))", "Quincy McDuffie(Quincy) is an AmericanProfessionalWideReceiver(quincy,CanadianFootball)", "Quincy McDuffie,WideReceiver(a) & AmericanProfessional(a) & AgainstCanadaFootball(a))", "Quinncy McDuffie (USA) \u2013 WideReceiver(x) & CanCanFootball(x))", "all x.((TwoFootball(x) & AmericanProfessionalWideReceiver(x,CanadianField)) -> QuincyMcDuffie(x,American))", "Quincy McDuffie, AmericanProfessionalWideReceiver(QuincyMcDuffie)", "Quincy McDuffie is a professional wide receiver in Canadian Football.", "(ProfessionalWideRenner(QuincyMcDuffie) & American(WideRenner) & CanadianFootball(Quicky(Quickness))"]}
{"id": "folio_train_2446", "nl": "People who can catch balls are good wide receivers. ", "fol": "all x.(exists y.(CanCatch(x,y) & IsBall(y)) -> IsGoodWideReceiver(x))", "prediction": ["all x.((CanCatchBalls(x) & CanCanCanCatchBalls(x)) -> GoodWideReceiver(x))", "all x.((Person(x) & CanCatchBalls(x)) -> GoodWideReceiver(x))", "all x.((Person(x) & CanCatchBalls(x)) -> GoodWideReceiver(x))", "all x.((Person(x) & CanCatchesBalls(x)) -> GoodWideReader(x))", "all x.((Person(x) & CanCatchesBalls(x)) -> GoodWideReceiver(x))", "all x.((Person(x) & CanCatchBalls(x)) -> GoodWideReceiver(x))", "all x.((Person(x) & CapturesBalls(x)) -> GoodWideReceiver(x))", "all x.((Person(x) & CanCatchBalls(x)) -> GoodWindancer(x))", "all x.((Person(x) & CanCaptBalls(x)) -> GoodWideReceiver(x))", "all x.((Person(x) & CanChatchBalls(x)) -> GoodWideReceiver(x))", "all x.((Person(x) & CanCaptureBalls(x)) -> GoodWideReceiver(x))", "all x.((Man(x) & CatchBalls(x)) -> GoodWideReceiver(x))", "all x.((Person(x) & CanChuckBalls(x)) -> GoodWideReceiver(x))", "all x.(CanCatchBalls(x) -> GoodWideReceiver(x))", "all x.((Person(x) & CanScrewBalls(x)) -> GoodWideReceiver(x))", "all x.((Person(x) & CapturesBalls(x)) -> GoodWideReceiver(x))"]}
{"id": "folio_train_2447", "nl": "Quincy McDuffie can catch many footballs easily.", "fol": "exists x.(IsFootball(x) & CanCatch(Quincymcduffie,x))", "prediction": ["Quincy McDuffie(QCD) & EasilyCatchesFootballs(QdD).", "Quincy McDuffie(McDuffie) & CanCatchesFootballsEasily(McDuffie)", "all x.(QuincyMcDuffie(x) -> CanCatchFootballsEasily(x))", "the ability to catch many footballs is one of Quincy McDuffie's strengths.", "Quincy McDuffie(s) & CanCatchFootballs(s) Easily(s))", "(EasilyCatchesFootballs(quincy,MCDuffie))", "Quincy McDuffie (QuickTunnel(0) & CanCatchFootballsEasily(0))", "Quincy McDuffieCatch(QuincyMcDuffie(Quincy.)", "QuincyMcDuffie(QuincyOfFootballs)", "QuincyMcDuffie(Quick(MCDuffie) -ThereWearsManyFootballsEasily(MCDuffie))", "all x.((QuincyMcDuffie(x) & CatchCounterFootballs(x)) -> CanCatch(x,Footballs))", "Quincy McDuffie can catch many footballs easily.", "QuincyMcDuffie(QuincyMcDuffie)", "QuincyMcDuffieCatchesManyFootballsAccurately(QuincyMcDuffie)", "all x.(QuincyMcDuffie(x) -> CatchManyFootballsEasily(x))", "all x y.((QuincyMcDuffie(x) & Football(y)) -> CanCatchEasily(x,y))"]}
{"id": "folio_train_2448", "nl": "Good wide receivers play professionally.", "fol": "all x.(IsGoodWideReceiver(x) -> IsProfessional(x))", "prediction": ["all x.(GoodWideReceiver(x) -> PlaysProfessionally(x))", "all x.(GoodWideReceiver(x) -> PlayProfessionally(x))", "all x.(GoodWideReceiver(x) -> PlayProfessionally(x))", "all x.(GoodWideReceiver(x) -> ProfessionalPlay(x))", "all x.(GoodWideReceiver(x) -> PlayProfessionally(x))", "all x.(GoodWideReceiver(x) -> PlayProfessionally(x))", "all x.(GoodWideReceiver(x) -> PlaysProfessionally(x))", "all x.(GoodWideReceiver(x) -> PlayProfessionally(x))", "all x.(GoodWideReceiver(x) -> PlayProfessionally(x))", "all x.(GoodWideReceiver(x) -> PlayProfessionally(x))", "all x.(GoodWidescrew(x) -> PlayProfessionally(x))", "all x.((WideReceiver(x) & PlayProfessionally(x)) -> Good(x))", "all x.((GearWideReceiver(x) & PlaysProfessionally(x)) -> Good(x))", "all x.(WideReceiver(x) -> PlayProfessional(x))", "all x.((WideReceiver(x) & Good(x)) -> PlaysProfessionally(x))", "all x.(GoodWideReceiver(x) -> ProfessionalPlay(x))"]}
{"id": "folio_train_2449", "nl": "Good wide receivers can catch with both their left and right hand.", "fol": "all x.(IsGoodWideReceiver(x) -> (CatchesWith(x,Lefthand) & CatchesWith(x,Righthand)))", "prediction": ["all x.((WideReceiver(x) & Good(x)) -> CanCatchWithBothHands(x))", "all x.(GoodWideReceiver(x) -> (CatchesWith(x,left) & CanCatchesWith(x,right)))", "all x.((WideReceiver(x) & LeftHand(x) & RightHand(x)) -> Catch(x))", "all x.((WideRenderer(x) & LeftHand(x) & RightHand(x)) -> CanCatch(x))", "all x.(GoodWideReceiver(x) -> CanCatchWithRightHand(x))", "all x.((WideReceiver(x) & Good(x)) -> (CatchWithLeftHand(x) & CatchWithRightHand(x)))", "all x.((Reader(x) & LeftHand(x) & RightHand(x)) -> CanCatch(x))", "all x.(WideReceiver(x) -> (CanCatchWithLeftWand(x) & CanCatchWithRightWand(x)))", "all x.((WideReceiver(x) & LeftHand(x) & RightHand(x)) -> CanCatch(x))", "all x.((WideReceiver(x) & LeftHand(x) & RightHand(x)) -> CanCatch(x))", "all x.(WideReceiver(x) -> (CutWithLowerHand(x) & CatchWithRightHand(x)))", "all x.((WearReceiver(x) & LeftHand(x) & RightHand(x)) -> CanCatch(x))", "all x.((WideReceiver(x) & LeftHand(x) & RightHand(x)) -> CanCatch(x))", "all x.(GoodWeatherReader(x) -> (LangHandCapture(x,HandLeft) & RightHandCapture(x,Handcapture)))", "all x.((WideReceiver(x) & LeftHand(x) & RightHand(x)) -> CanCatchWith(x,y,z))", "all x.((WideReceiver(x) & LeftHand(x) & RightHand(x)) -> CanCatch(x))"]}
{"id": "folio_train_2450", "nl": "All footballs are balls.", "fol": "all x.(IsFootball(x) -> IsBall(x))", "prediction": ["all x.(Football(x) -> Ball(x))", "all x.(Football(x) -> Ball(x))", "all x.(Football(x) -> Ball(x))", "all x.(Football(x) -> Ball(x))", "all x.exists y.((Football(x) & Ball(y)) -> Ball(x))", "all x.(Football(x) -> Ball(x))", "exists x.(Football(x) & Ball(x))", "all x.(Football(x) -> Ball(x))", "all x.(Football(x) -> Ball(x))", "all x.(Football(x) -> Ball(x))", "all x.(Football(x) -> Ball(x))", "all x.(Football(x) -> Ball(x))", "all x.(Football(x) -> Ball(x))", "all x.(Football(x) -> Ball(x))", "all x.(Football(x) -> Ball(x))", "all x.(Football(x) -> Ball(x))"]}
{"id": "folio_train_2451", "nl": "Quincy McDuffie is a good wide receiver.", "fol": "IsGoodWideReceiver(Quincymcduffie)", "prediction": ["Quincy McDuffie is good wide receiver.", "Quincy McDuffie is a good wide receiver.", "all x.((QuincyMcDuffie(x) & GoodWideReceiver(x)) -> GoodWideReceiver(x))", "all x.((QuincyMcDuffie(x) & GoodWideReceiver(x)) -> Good(x))", "All x.((QuincyMcDuffie(x) & GoodWideReceiver(x)) -> Good(x))", "Quincy McDuffie is a good wide receiver.", "-exists x.(QuincyMcDuffie(x) & GoodWideReceiver(x))", "all x.((QuincyMcDuffie(x) & GoodWideReceiver(x)) -> Good(x))", "(GoodWideReceiver(QuickyMcDuffie)", "Quincy McDuffie is a good wide receiver.", "Quincy McDuffie is a good wide receiver.", "all x.(QuincyMcDuffie(x) -> GoodWideReceiver(x))", "Quincy McDuffie is a good wide receiver.", "Quincy McDuffie is good wide receiver.", "(GoodWideReceiver(QuincyMcDuffie)", "\"Quincy McDuffie\""]}
{"id": "folio_train_2452", "nl": "Quincy McDuffie can catch every ball.", "fol": "all y.(IsBall(y) -> CanCatch(Quincymcduffie,y))", "prediction": ["Quincy McDuffie((Quicky,(Piece) | CatchEveryBall(Q)))", "-CanCatchAllBall(QuickyMcDuffie)", "Quincy McDuffie canCatchEveryBall(QuincyMacDuffie)", "exists x.(QuincyMcDuffie(x) & CanCatchBall(x))", "all x.(QuincyMcDuffie(x) -> CanCatchesBall(x))", "Quincy McDuffieCatchEveryBall(QuincyMcDuffie)", "all x.(QuincyMcDuffie(x) -> CanCatchesAllBalls(x))", "Quincy McDuffie can catcheveryball.", "Quincy McDuffie canCatchEveryBall(Quincy)", "(CatchBalls(QuincyMcDuffie)", "Quincy McDuffie(Quincy)", "the can catchall(qcduffie)", "Quincy McDuffie CanCatchBalls(Quickly(Quicky) -> CanCatchAllBalls(Quicky))", "Quincy McDuffie CanCaptureAllBalls(QuicklyMcDuffie)", "QuirkianMcDuffie(q) -> CanCatcherBall(q,y))", "QuincyMCDuffieCatchAllBalls(QuincyMcDuffie)"]}
{"id": "folio_train_2453", "nl": "Professional wide receivers are good at catching balls.", "fol": "all x.((IsProfessional(x) & IsWideReceiver(x)) -> (GoodAtCatching(x,y) & IsBall(y)))", "prediction": ["all x.(ProfessionalWideReceiver(x) -> GoodAtCatchingBalls(x))", "all x.(ProfessionalWideReader(x) -> GoodAtCatchingBalls(x))", "all x.(ProfessionalWideReceiver(x) -> GoodAtCatchingBalls(x))", "all x.(ProfessionalWideReceiver(x) -> CatchBalls(x))", "all x.(WideReceiver(x) -> GoodAtCatchingBalls(x))", "all x y.((ProfessionalWideReceiver(x) & Ball(y)) -> GoodAtCatching(x,y))", "all x.(ProfessionalWideReceiver(x) -> GoodAtCatchingBalls(x))", "all x.(ProfessionalWideReceiver(x) -> (GoodAtCatchingBalls(x)))", "all x.(ProfessionalWideReceiver(x) -> GoodAtCatchingBalls(x))", "all x.(ProfessionalWideReceiver(x) -> GoodAtCatchingBalls(x))", "all x.(ProfessionalWideReceiver(x) -> GoodWithBalls(x))", "all x.(ProfessionalWideReceiver(x) -> GoodAtCatchingBalls(x))", "all x.(ProfessionalWideReceiver(x) -> GoodAt(x,Balls))", "all x.(ProfessionalWideReader(x) -> (Balls(y) & GoodAtCatching(x,y)))", "all x.(ProfessionalWideReceiver(x) -> GoodAtCatchingBalls(x))", "all x.(ProfessionalWideReceiver(x) -> GoodAtCatchingBalls(x))"]}
{"id": "folio_train_2454", "nl": "Boves is a railway station located in France. ", "fol": "(IsRailwayStation(Boves) & IsLocatedIn(Boves,France))", "prediction": ["(FietsIn(Boves) & LocatedInFrance(Boves))", "Boves is a railway station located in France.", "Boves ist ein Bahnhof in Frankreich.", "Boves is a railway station located in France.", "Das Bahnhof Boves liegt in France.", "Boves Station(c) -> RailroadStationLocatedInFrance(c))", "(RailwayStation(boves) & LocatedInFrance(boves))", "all x.(Boves(x) -> (RunningStation(x) & LocatedIn(x,France)))", "all x.(Boves(x) -> RailwayStation(x))", "all x.(Boves(x) -> RailwayStation(x))", "(ResistanceStation(Boves) & LocatedInFrance(Boves))", "all x.(Boves(x) -> RailwayStation(x))", "is a railway station located in France.", "all x.((RailwayStation(x) & BovesInFrance(x)) -> Station(x))", "all x.(Boves(x) -> RailwayStation(x))", "all x.(Boves(x) -> RailwayStation(x))"]}
{"id": "folio_train_2455", "nl": "The preceding station of Boves is Longueau.", "fol": "IsPrecededBy(Boves,Longueau)", "prediction": ["(PreceedingStationOfBowes (BovesStation) -> Longueau(BowesStation))", "the preceding station of Boves is Longueau.", "La pr\u00e9c\u00e9dingStationOfBoves(b) -> Longueau(c))", "(PastBovesStation(Boves) -> Longueau(Boves))", "(ThePasantStationOfBoves(Boves) -> Longueau(Boves))", "all x.(BovesStation(x) -> Longueau(x))", "All x.(Boves(x) -> Longueau(x))", ".-(Boves() & Boves())", "all x.(BovesStation(x) -> Longueau(x))", "(PastStationOfBoves(b) -> Longueau(c))", "(Station(ble) & PriorTo(ble(ble))", "all x y.((Station(x) & Boves(y)) -> Longueau(y))", "all x.(Boves(x) -> Longueau(x))", "-> BovesStation(BovesStation(Boves))", "all x.(Boves(x) -> Longueau(x))", "Longueau (Standard(Boves) & PriorityStandard(Boves))"]}
{"id": "folio_train_2456", "nl": "The preceding station of Dommartin is Boves.", "fol": "IsPrecededBy(Dommartin,Boves)", "prediction": ["VorheringStationOfDommartin(x) -> Boves(x))", "(PriorElementStationOfDommartin(dommartin) -> Boves(dommartin))", "is Boves.", "all x.(Dommartin(x) -> Boves(x))", "all x y.((Dommartin(x) & Boves(y)) -> PriortendingStation(x,e))", "Das vorangegangeneStationOfDommartin is Boves.", "exists x.(DommartinStation(x) & Boves(x))", "Boves, preceding StationOfDomartin.", "(PassendingStationOfDommartin(d) | Boves(d)))", "the preceding station (Dommmartin) -> Boves(b))", "all x.((Dommartin(x) & Boves(x)) -> Station(x))", "(PeteringStation(dommartin) & Boves(dommartin))", "(PassendingStation(dommartin) -> Boves(dommartin))", "Die vorige Station of Dommartin, Boves.", "(PastStationOfDommartin(Dommartin): Boves)", "(PrendingStationOfDommartin(dommartin) & Boves(dommartin))"]}
{"id": "folio_train_2457", "nl": "France is a European country.", "fol": "IsLocatedIn(France,Europe)", "prediction": ["all x.(France(x) -> EuropeanCountry(x))", "all x.((France(x) & EuropeanCountry(x)) -> Is(x,y))", "(EuropeanCountry(France))", "all x.(France(x) -> EuropeanCountry(x))", "all x.(France(x) -> EuropeanCountry(x))", "all x.(France(x) -> EuropeanCountry(x))", "all x.(France(x) -> EuropeanCountry(x))", "all x.(France(x) -> EuropeanCountry(x))", "all x.(France(x) -> EuropeanCountry(x))", "all x.(France(x) -> EuropeanCountry(x))", "all x.(France(x) -> EuropeanCountry(x))", "all x.(France(x) -> EuropeanCountry(x))", "(EuropeanCountry(France) & European(France))", "all x.((France(x) & EuropeanCountry(x)) -> EuropeanCountry(x))", "all x.((France(x) & EuropeanCountry(x)) -> NotAffordableTo(x,y))", "all x.(France(x) -> EuropeanCountry(x))"]}
{"id": "folio_train_2458", "nl": "Dommartin is situated on the Paris\u2013Lille railway. ", "fol": "IsSituatedOn(Dommartin,PairsLille)", "prediction": ["(SituatedOnRailway(Dommartin) & ParisLille(d))", "(SituatedOnRailway(Dommartin,Paris) | SituatedOnLille(Dommartin))", "estado del Dommartin, el Rerif Yr\u00e9gine-Pizillon.", "Dommartin liegt neapolitanly(n) in the 'Lille Railway (Paris) & LocatedOn(n))", "(SituatedOnTrainway(Dommartin,Paris) & LocatedOnLille(Dommartin,Lille))", "(SituatedOnRailway(Dommartin) & LaLille(Dommartin))", "(SituatedOnRailway(dommartin) -> ParisLille(dommartin))", "Der DommartinSurroundedOnIntersection(dommartin) de Paris\u2013LilleRailway(dommartin)", "LocatedOnRailway(dommartin,Paris) & Lille(dommartin,lille)", "LocatedOnRailway(Dommmartin)", "(SituatedOnRailway(Morne,Paris) and LocatedOn(Morne,Lille))", "LocatedOnRailway(Dombillin)", "is situated on the ParisLilleTrainway (Dommartin,Paris))", "(SituatedOnParisLilleRailway(Dommartin))", "LillianeRailway(dommartin) c.(StatedOn(dommartin,paris,lille))", "LocatedOnRailway(Dommartin,Paris,Lille)"]}
{"id": "folio_train_2459", "nl": "Any two contiguous stations are on the same railway.", "fol": "all z.((IsSituatedOn(x,z) & (IsPrecededBy(x,y) | IsPrecededBy(y,x))) -> IsSituatedOn(y,z))", "prediction": ["all x.(ContiguousStation(x) -> SameRailway(x))", "all x.((ContiguousStation(x) & ContiguousStation(x)) -> OnSameRailway(x))", "all x.(ContiguousStation(x) -> OnSameRailway(x))", "all x.(ContiguousStation(x) -> EasyRailway(x))", "all x.((ContiguousStation(x) & ContiguousStation(x)) -> OnSameRailway(x))", "all x y.((ContiguousStation(x) & ContiguousStation(y)) -> OnSameRailway(x,y))", "all x.(ContiguousStation(x) -> OnSameRailway(x))", "all x.(ContiguousStock(x) -> OnSameRailway(x))", "all x.(ContiguousStation(x) -> OnSameRailway(x))", "all x.(ContiguousStation(x) -> OnSameRailway(x))", "all x.((Station(x) & Contiguous(x)) -> OnSameRailway(x))", "all x.((ContiguousStation(x) & Contiguous(x)) -> OnOneRailway(x))", "all x.exists y.(ContiguousStation(x) & ContiguousStation(y) & Station(y) & OnSameRailway(x,y))", "all x.(ContiguousStation(x) -> OnSameRailway(x))", "all x.(Station(x) -> OneRailway(x,sameRailway(x))", "all x.((ContiguousStations(x) & Railway(x)) -> Same(x))"]}
{"id": "folio_train_2460", "nl": "Boves is served by regional TER Hauts-de-France trains.", "fol": "IsServedBy(HautsDeFrance,Boves)", "prediction": ["all x.(Boves(x) -> ServedByRegionalTBens(x,HautsDeFrance))", "all x.(Boves(x) -> SeatedByRegionalTERTrain(x,HautsDeFrance))", "all x.(Boves(x) -> ServedByRegionalTERTrains(x))", "all x.(Boves(x) -> RegionalTERTrains(x))", "all x.(Boves(x) -> ServedByInternalTrains(x))", "all x.(Boves(x) -> (ServedByRotionalTERTrains(x,HautsDeFrance)))", "all x.(Boves(x) -> OfferedByNorthWestTrains(x))", "all x y.((Boves(x) & RegionalTransit(y)) -> ServicedBy(x,y))", "all x.(Boves(x) -> ServedByRegionalTERTreatments(x,hauts-de-France))", "(ServicedByRegionalTrains(Boves,France))", "all x.(Boves(x) -> (OfferedByRotaryTrains(x,HAFT)))", "all x.(ServicedBy(x) -> (NorthernTERTrain(x) & ServicedBy(x,HoursDeFrance)))", "all x.(Boves(x) -> ServedByRegionalTERHutsdeFranceTrain(x))", "all x y.((Boves(x) & RegionalTrain(y)) -> ServicedBy(x,y))", "all x.(Boves(x) -> ServedByTERRTs(x))", "all x.(Boves(x) -> ServicedByHoursDeFranceTrains(x))"]}
{"id": "folio_train_2461", "nl": "If A is located in B and B is located in C, then A is located in C.", "fol": "all z.((IsLocatedIn(x,y) & IsLocatedIn(y,z)) -> IsLocatedIn(x,z))", "prediction": ["all x.((LocatedInB(x) & LocatedInC(x)) -> LocatedInC(x))", "all x y z.((A(x) & B(y) & C(z)) -> (LocatedIn(x,y,z) & LocationIn(x,y)))", "all x.((LocatedInB(x) & LocatedInC(x)) -> LocatedInC(x))", "all x y.((RelocatedIn(x,y) & B(y)) -> FoundIn(x,b))", "all x.(LocatedIn(x,B) -> LocatedIn(x,C))", "all x.((IsLocatedIn(x) & IsLocatedIn(x,B)) -> IsLocatedIn(x,C))", "all x.((LocatedIn(x,B) & LocatedIn(x,C)) -> Location(x,C))", "all x y.(((AreLocatedIn(x,y) & BLocatedIn(x,y)) -> LocatedIn(x,y))", "all x.((LocatedIn(x,B) & LocatedIn(x,C)) -> LocatedIn(x,C))", "all x y.((Growth(x,y) & A(x) & B(y)) -> LocatedIn(x,y))", "all x.((LocatedIn(x,B) & IsLocatedIn(x,C)) -> IsLocatedIn(x,C))", "all x y.((A(x) & B(y) & LocatedIn(x,y)) -> LocatedIn(x,y))", "all x.((LocatedIn(x,B) & LocatedIn(x,C)) -> LocatedIn(x,C))", "all x y z.((LocatedIn(x,b) & LocationIn(x,b) & LocationIn(c,y)) -> LocatedIn(x,h))", "all x.((LocatedIn(x,B) & Location(x,C)) -> Location(x,A))", "all x.((AreLocatedIn(x,B) & ReLocatedIn(x,C)) -> RelocatedIn(x,C))"]}
{"id": "folio_train_2462", "nl": "If A precedes B and B preceds C, than A preceds C.", "fol": "all z.((IsPrecededBy(x,y) & IsPrecededBy(y,z)) -> IsPrecededBy(x,z))", "prediction": ["all x.(IfBeforeB(x) & BeforeB(x) & BeforeB(x)) -> PreceedsC(x))", "exists x.((Appears(x,B) & Preceeds(x,C)) -> Preceeds(x,C))", "all x y.((Preceeds(x,y) & B(y)) -> Preceeds(x,y))", "all x.((PreceedsB(x) & PreceedsC(x)) -> PreceedsB(x))", "(Provides(A) -> PreceedsB(A) & Preceeds(B)))", "all x y.((Section(x) & PreceedsB(x) & Preceeds(x,y)) -> PreceedsC(x,y))", "all x.(Preceeds(x,a) -> (Pruces(b) & Preceeds(b,c)))", "(OfficialIng(A) and Follows(B) & Preceeds(B) & ExistsIng(B)))", "all x.(PreceedsB(x) & PreceedsB(x)) -> PreceedsC(x))", "all x.((Peers(x,A) & Presides(x,B) & Presides(x,C)) -> Presides(x,C))", "all x.((Pr\u00e4cious(x) & Preceeds(x,B) & Prioritizes(x,C)) -> Preceeds(x,A,C))", "all x.((Appears(x) & Presides(x,B) & PresidesC(x,B)) -> PresidesC(x,A))", "all x.((Prioritizes(x,B) & Preceeds(x,C)) -> Preceeds(x,C))", "exists x.((Preceeds(x,B) & Preceeds(x,C)) -> Preceeds(x,C))", "all x.((Teavors(x,B) & Preceeds(x,C)) -> Preceeds(x,C))", "all x.((Precedes(x,B) & Preceeds(x,C)) -> Preceeds(x,C))"]}
{"id": "folio_train_2463", "nl": "Boves is not in Europe.", "fol": "-IsLocatedIn(Boves,Europe)", "prediction": ["Boves -InEurope(Boves)", "Boves & -InEurope(Boves)", "Boves no longer exists.", "Boves & -InEurope(Boves)", "-(Boves(Boves) & InEurope(Boves))", "Boves -InEurope.", "-(BovesInEurope(Boves))", "Boves are not in Europe.", "Boves isn'tInEurope(Boves)", "-InEurope. Boves is an English.", "-Europe(Boves)", "All x.(Boves(x) -> -InEurope(x))", "Boves & -InEurope.", "-InEurope(Boves)", "(Boves(Boves.org) - InEurope(Boves.org))", "Boves (NoEurope)"]}
{"id": "folio_train_2464", "nl": "Longueau is served by regional TER Hauts-de-France trains.", "fol": "IsServedBy(HautsDeFrance,Longueau)", "prediction": ["Longueau is served by regional TER HautsDeFrance trains.", "all x.((Longueau(x) & Regional(x,Ter,HautsDeFrance)) -> Serves(x,ContinentalTracks))", "all x.(Longueau(x) -> ServedByTERTrains(x,HautsDeFrance))", "all x.(Longueau(x) -> servedByRegionalTrains(x,HautsDeFrance))", "Longueau is served by regional TER Hauts-de-France trains.", "(ServedByRegionalTERFranceTrains(Longueau) & TERHautsDeFranceTrains(Term))", "Langueau ServicedBy(RoadTrain(Longueau,TER HautsdeFrance)", "(ServicesTo Longueau(Longueau) & RegionalTERTrain(HautsDeFrance))", "(ServiceDistrictTrain(Longueau) & RegionalTrain(TER,HautsDeFrance))", "all x.(Longueau(x) -> ServesByRegionalTERTrains(x,HighsDeFrance))", "(ServicedByTrains(Longueau) & RegionalTransports(TER,HautsDeFrance))", "all x.(Longueau(x) -> ServedByRegionalTERTrains(x,HautsdeFrance))", "Longueau is served by regional TER trains that serve HautsdeFrance.", "Longueau is served by regional TER Hauts-deFrance trains.", "Est servite par des trains r\u00e9gionaux de TER HautsDeFrance.", "((Longueau(Longueau) & RegionalTER((HautsDeFrance)))"]}
{"id": "folio_train_2465", "nl": "Edwin Smith was a New Zealand Rower from Auckland.", "fol": "(OriginatesFrom(Edwinsmith,Newzealand) & IsRower(Edwinsmith) & OriginatesFrom(Edwinsmith,Auckland))", "prediction": ["EdwinSmith(Edwin(Smith) & NewZealandRower(Smith) & New ZealandRower(Smith,Auckland))", "Edwin Smith (NZRower(NZ) & FromAuckland(NZ))", "EdwinSmith (NZ) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith) & NewZealandRower(EdwinSmith,Auckland))", "EdwinSmith (NewZealanderRower(EdwinSmith) & -NewZealanderRower(Himanshua,NewZeaLAND))", "EdwinSmith(e) & NewZealandRower(e) & FromAuckland(e))", "EdwinSmith(Edwin) & NewZealandRower(Edwin,Auckland))", "(NewZealandRower(EdwinSmith) & OriginallyFromAuckland(EdwinSmith))", "(NewZealander(EdwinSmith) & NewZealander(Smith) & NewZealander(Smith))", "EdwinSmith (Fulton) is a 2009 New Zealand Rower from Auckland (Fulton) & Born in Christchurch (Fulton) & Born in Auckland)))", "EdwinSmith(e) - NewZealandRower(e) & NewZealandRower(e) & NewZealandRunner(e) & NewZealandRower(e) & NewZealandRower(e) & NewZealandRower(e))", "EdwinSmith(edwin.smith(e) & NewZeroZeroZeroRower(e) & FromAuckland(e))", "Edwin Smith (NZRower(NZ) & BornInAuckland(NZ))", "Edwin Smith is a NewZealandRower(EdwinSmith)", "Edwin Smith (NZRower(NZ) & OriginallyFromAuckland(NZ))", "Edwin Smith(Edwin.(Edwin.Smith(Edwin,NewZeeland) & RowerFromAuckland(Edwin,NewZeeland))", "EdwinSmith(EdwinSmith) & NewZealandRuger(EdwinSmith,Auckland))"]}
{"id": "folio_train_2466", "nl": "Edwin Smith was also known as Ted Smith.", "fol": "Alias(Edwinsmith,Tedsmith)", "prediction": ["EdwinSmith(18) & TedSmith(22))", "EdwinSmith(e) & TedSmith(e))", "EdwinSmith(162) & TedSmith(18))", "EdwinSmith(EdwinSmith) & TedSmith(EdwinSmith))", "EdwinSmith(edwin) & TedSmith(t))", "EdwinSmith(e) & TedSmith(e))", "KnownForThomas(edwinsmith,e) | TedSmith(e))", "(TedwinSmith(EdwinSmith) & TedSmith(EdwinSmith))", "EdwinSmith(e) & TedSmith(e))", "(LiterallyKnownAsTed(EdwinSmith) & TedSmith(EdwinSmith))", "exists x.(EdwinSmith(x) & TedSmith(x))", "ErzwinSmith(Edwin) & Ted(Steven))", "EdwinSmith(EdwinSmith) & TedSmith(EdwinSmith))", "EdwinSmith (EdwinSmith(EdwinSmith) & TedSmith(EdwinSmith))", "EdwinSmith(est) & TedSmith(r))", "(EdwinSmith(EdwinSmith) & TedSmith(EdwinSmith))"]}
{"id": "folio_train_2467", "nl": "Edwin Smith went to Rose Road Primary School, located in Grey Lynn.", "fol": "(Attended(Edwinsmith,Roseroadprimaryschool) & IsLocatedIn(Roseroadprimaryschool,Greylynn))", "prediction": ["all x.(EdwinSmith(x) -> (GoesToOwnRoseRoadPrimarySchool(x) & LocatedInGrayLynn(x)))", "all x y.((EdwinSmith(x) & RoseRoadPrimarySchool(y)) -> LocatedInGrinney(y,x))", "EdwinSmith, went to RoseRoadPrimarySchool(EdwinSmith, GreyLynn)", "EdwinSmith(ed) attended RoseRoadPrimarySchool(e) & LocatedInGreyLynn(e))", "Edwin Smith went to RoseRoadPrimarySchool((EdwinSanders) & GreyLynn(e))", "all x.((EdwinSmith(x) & RoseRoadPrimarySchool(x)) -> LocatedInGreyLynn(x))", "all x y.((EdwinSmith(x) & RoseRoadPrimarySchool(y)) -> (To(x,y) & In(x,y)))", "Edwin Smith went to Rose Road Primary School (LocatedInGreyLynn))", "(EdwinSmith(e) & RoseRoadPrimarySchool(a) & LocatedInGreyLynn(e))", "EdwinSmith (Edwin) Smith (edin(RoseRoad) PrimarySchool(e) & GreyLynn(y)))", "EdwinSmith & GoesToRoseRoadPrimarySchool(e) & GreyLynx(e))", "EdwinSmith attended RoseRoadPrimarySchool(e) & FoundInGreyLynn(e))", "EdwinSmith went to RoseRoadPrimarySchool(EDWINSSmith)", "EdwinSmith went to RoseRoadPrimarySchool(e) & BasedInGreyLynn(e))", "all x y.((EdwinSmith(x) & RoseRoadPrimarySchool(y)) -> GoesTo(x,y))", "all x y.((EdwinSmith(x) & RoseRoadPrimarySchool(y)) -> GoesTo(x,y))"]}
{"id": "folio_train_2468", "nl": "Edwin Smith was a sergeant who served with the New Zealand 24th battalion in Italy and Egypt.", "fol": "(IsSergeant(Edwinsmith) & ServedWithUnit(Edwinsmith,Newzealand24thbattalion) & ServedInCountry(Edwinsmith,Italy) & ServedInCountry(Edwinsmith,Egypt))", "prediction": ["all x.((Sgt(x) & ServiceWithNewZealand24thBattalion(y)) -> (EdwinSmith(x) & ServiceInEgypt(y)))", "EdwinSmith(s) was a sergeant who served with the New Zealand 24th Battalion(s) in Italy and Egypt(s))", "(Sergeant(EdwinSmith) & Sergeant(EdwinSmith) & New Zealand24thBattalion(Edinburgh))", "(Sergeant(EdwinSmith,New Zealand) & 22ndBatalion(Smith,Egypt) & ServicedWith(Smith,NewZeeland))", "EdwinSmith (Sgt.(Sgt.(New Zealand24thBattalion) & ServedIn(Egypt,Italie) & ServedWith(Egypt,Egypt)))", "Edwin Smith, sergeant, served with the New Zealand 24th Battalion (South Africa) & In Italy and Egypt.", "EdwinSmith(r) was a sergeant who served with New Zealand's 24th Battalion(r) for Italy and Egypt.", "EdwinSmith (sgtalion1999,NewZealot(z)) & Sergeant(v) & ServicedWithNZ24thBatalion(v,in(v,v,i) & ServicedWithZerothBatalion(v,en)))", "Edwin Smith (Sgt.(Sergeant(s) & New Zealand24thBattalion(s)) - servedInItalyAndEgypt(s))", "(Sergeant(EdwinSmith) & ServicedWithNewZearland24thBattalion(Edinburgh,Italie) & ServicedWithEgypte(Edinburgh,Egypte))", "(Sergeant(EdwinSmith) & New Zealand24thBattalion(Edinburgh))", "Edwin Smith (SgtalionSergeant(SpokenZealy1) & ServedWithIn(SecretarySavages(Sailor,Italy,Egypte))", "EdwinSmith(England) & Sergeant(ServedWithDetroit24thBattalion(EnglandEgypt))", "(Sgt. EdwinSmith(Sgt. & New Zealand24thBattalion(Spoilage) & ServingInItalyAndEgypte(edwinSmith))", "Edwin-Smith(sergeant) & served as sgt.((Vastalion(x) & NewZealand(x)) & In(x,Italy) & In(x,Egypte))", "EdwinSmith(Sergeant) & ServicedWithNewZeland24thBottalion & ServicedWithInPakistanOrEgypte(Spouse))"]}
{"id": "folio_train_2469", "nl": "Broadway Sheetmetals was a buisness that was ran and owned by Edwin Smith, who was a sheetmetal worker.", "fol": "(IsBusiness(Broadwaysheetmetals) & Managed(Edwinsmith,Broadwaysheetmetals) & Possesses(Edwinsmith,Broadwaysheetmetals) & IsSheetmetalWorker(Edwinsmith))", "prediction": ["all x.((BroadwayStickelandals(x) & RunByEdwinSmith(x) & SheetmetalWorker(x)) -> SheetmetalWorker(x))", "all x.(BroadwaySheetmetals(x) -> (Buisness(x) & RunAndOwnedByEdwinSmith(x) & SheetmetalWorker(x)))", "all x.((Buisness(x) & RunAndOwnedBy(x,EdwinSmith) & SheetmetalWorker(x)) -> BroadwaySheetmetals(x))", "all x y z.((BroadwaySheetmetal(x) & EdwinSmith(y) & SheetmetalWorker(z)) -> (Bainess(x) & RunBy(y,z) & OwnedBy(y,x)))", "all x.((BroadwayScoremetals(x) & RipedByEdwinSmith(x & SheetmetalWorker(x)) -> OwnedByEdwinSmith(x))", "all x.((Buisness(x) & RunBy(x,EdwinSmith) & SheetmetalWorker(x)) -> BroadwayShapemetals(x))", "All x.(BroadwaySheets(x) -> (Baisness(x) & Run(x) & OwnedByEdwinSmith(x) & SheetmetalWorker(x)))", "all x.(BroadwayShower(x) & RanByAndOwnedByEdwinSmith(x) & SheetmetalWorker(x))", "all x y.((BroadwayStickles(x) & EdwinSmith(y) & SheetmetalWorker(y)) -> RunByAndOwnedBy(x,y))", "all x.((BroadwaySleepermetals(x) & RunByEdwinSmith(x) & SheetmetalWorkerOf(x)) -> BroadwayFinds(x))", "all x.((BroadwayStickeletals(x) & RunByEdwinSmith(x) & SheetmetalWorker(x)) -> BroadwayStickeletals(x))", "all x y.((Buisness(x) & EdwinSmith(y) & SheetmetalWorker(x)) -> RunAndOwnedBy(x,y))", "all x.((BroadwaySpreadmetals(x) & RanAndOwnedByEdwinSmith(x) & SheetmetalWorker(x)) -> BroadwaySpreadmetals(x))", "all x.((BroadwayShapemetals(x) & RanByEdwinSpider(x) & SheetmetalWorker(x)) -> OwnedByEdwinSmith(x))", "all x.( BroadwayShelter(x) -> (Buisness(x) & Run(x) & OwnedByEdwinSmith(x) & SheetmetalWorker(x)))", "all x.((BroadwaySheets(x) & RunAndOwnedByEdwinSmith(x) & SheetmetalWorker(x)) -> BroadwaySheetmetals(x))"]}
{"id": "folio_train_2470", "nl": "Ted Smith was a sergeant.", "fol": "IsSergeant(Tedsmith)", "prediction": ["Ted Smith (HeadsSgt.(Sgt.) & Sergeant(t))", "all x.(Sgt.TedSmith(x) -> Sergeant(x))", "(SgtEd Smith(TedSmith) wasSergeant(t))", "all x.(Sgt.(TedSmith(x) -> Sergeant(x))", "(Sergeant(TedSmith)", "all x.(SgtEd Smith(x) -> Sergeant(x))", "(Sgt.TedSmith(TedSpock) -> Sergeant(TedSmith))", "(Serviceman(TedSmith,s) & Secgeant(TedSmith,s))", "(Sgt.TedSmith(Ted) & Sergeant(Ted))", "-(Sergeant(TedSmith))", "(Sgt.TedSmith(Ted) & Sergeant(Ted))", "(Sergeant(TedSmith) -> Sergeant(TedSmith))", "(Sgt.Smith(Ted) | Sergeant(Ted)))", "all x.(Sergeant(x) -> TedSmith(x))", "all x.(Sgt.Dessert(x) -> Sergeant(x))", "ALL X.(SgtEd Smith(x) -> Sergeant(x))"]}
{"id": "folio_train_2471", "nl": "There are no rowers that own a buisness.", "fol": "-exists x y.(IsRower(x) & IsBusiness(y) & Possesses(x,y))", "prediction": ["-exists x.(Rower(x) & -OwnsBaisness(x))", "-exists x.(Rower(x) & OwnsBisness(x))", "-exists x.(Rower(x) & -OwnsBuisness(x))", "-exists x.(Rower(x) & OwnsBisness(x))", "has no rower(x) & OwnsBisness(x))", "-exists x.(Rower(x) & OwnsBuisness(x))", "-exists x.(Rower(x) & OwnBushness(x))", "-exists x.(Rower(x) & OwnsBuckness(x))", "-exists x.(Rower(x) & OwnsBuisness(x))", "all x.(NoneOwn(x,Ruler) -> -Beverage(x))", "all x.(Rower(x) -> -OwnBuisness(x))", "exists x.(Rower(x) & NoBuisness(x))", "-exists x.(Rower(x) & OwnsBisness(x))", "-exists x.(Rower(x) & OwnsBussiness(x))", "all x.((Rower(x) & NoBuisness(x)) -> -Owns(x,y))", "-exists x.(Rower(x) & OwnsBausness(x))"]}
{"id": "folio_train_2472", "nl": "No sergeants are from Auckland.", "fol": "-exists x.(IsSergeant(x) & OriginatesFrom(x,Auckland))", "prediction": ["-all x.(Sergeant(x) -> Auckland(x))", "-exists x.(Sergeant(x) & FromAuckland(x))", "-exists x.(S sergeant(x) & -FromAuckland(x))", "-exists x.(Sergeant(x) & New Zealand(x))", "-exists x.(Sergeant(x) & From(x,Auckland))", "-exists x.(Sergeant(x) & FromAuckland(x))", "-exists x.(Sergeant(x) & FromAuckland(x))", "-exists x.(Sergeant(x) & From(x,Auckland))", "-exists x.(Sergeant(x) & From(x,Auckland))", "-exists x.(Sergeant(x) & FromAuckland(x))", "-exists x.(Sergeant(x) & FromAuckland(x))", "-exists x.(Sergeant(x) & FromAuckland(x))", "-exists x.(Sergeant(x) & From(x,Auckland))", "-exists x.(Sergeant(x) & FromAuckland(x))", "-exists x.(Sergeant(x) & From(x,Auckland))", "-exists x.(Sergeant(x) & -FromAuckland(x))"]}
{"id": "folio_train_2473", "nl": "No buisness owner has served in Egypt.", "fol": "all x.(exists y.(IsBusiness(y) & Possesses(x,y)) -> -ServedInCountry(x,Egypt))", "prediction": ["-exists x.(BaisnessOwner(x) & ServesInExec(x))", "no buisness OwnerSecond(e) & ServicedIn(e) & Egypt(c) & -(SecondsIn(e) & ServicedIn(e)))", "-exists x.(BarrisnessOwner(x) & ServicedIn(x,Egypt),)", "-exists x.(BaisnessOwner(x) & ServedInEgypte(x))", "-exists x.(Boss(x) & HasServedInEgypte(x))", "-exists x.(BuisnessOwner(x) & InEgypt(x))", "-exists x.(BuisnessOwner(x) & ServedInEgypte(x))", "Currently, no buisness owner has served in Egypt.", "-exists x y.(BuisnessOwner(x) & HasServedIn(x,Egypt))", "-exists x.(BausnessOwner(x) & ServesInEgypte(x))", "-exists x.(BuisnessOwner(x) & ServesInEgypt(x))", "-exists x.(BurisnessOwner(x) & ServesIn(x,Egypt))", "-exists x.(BuisnessOwner(x) & ServingInEgypt(x))", "-exists x.(BaisnessOwner(x) & ServesInEgypt(x))", "-exists x.(BubinessOwner(x) & ServesInEgypt(x))", "-exists x.(BussinessOwner(x) & UsedInEgypt(x))"]}
{"id": "folio_train_2474", "nl": "A werewolf is a human that can turn into a wolf.", "fol": "all x.((IsHuman(x) & CanTransformToWolf(x)) -> IsWerewolf(x))", "prediction": ["all x.(Werewolf(x) -> (Human(x) & TurnsIntoWolf(x)))", "all x.(Worshipwolf(x) -> (Human(x) & TurnsIntoWolf(x)))", "all x.(Worsewolf(x) -> (Human(x) & TurnsIntoWolf(x)))", "all x.(Werewolf(x) -> Human(x) & ChangesIntoWolf(x))", "all x.(Worriedwolf(x) -> (Human(x) & CanTurnIntoWolf(x)))", "all x.(Worshipwolf(x) -> (Human(x) & CanWolf(x)))", "all x.(Worsewolf(x) -> (Human(x) & TurnsIntoWolf(x)))", "all x y.((Wreck(x) & Human(y)) -> CanTransformInto(x,y))", "all x.(Worshipwolf(x) -> (Human(x) & CanTransformIntoWolf(x)))", "all x.(Worsewolf(x) -> (Human(x) & CanTurnIntoWolf(x)))", "all x y.((Werewolf(x) & Human(y)) -> (CanTurnInto(x,y) & Wolf(x)))", "all x.(Worshipwolf(x) -> (Human(x) & CanCoordinateToWolf(x)))", "all x y.((Worshipper(x) & Human(y) & CanTurnInto(x,y)) -> Wolf(x))", "all x.(Worshipwolf(x) -> (Human(x) & TweaksInto(x)))", "all x.(Wordewolf(x) -> (Human(x) & CanTransformIntoWolf(x)))", "all x.(Worshipwolf(x) -> (Human(x) & TurnsIntoWolf(x)))"]}
{"id": "folio_train_2475", "nl": "A werewolf has been scratched or bitten by another werewolf.", "fol": "all x.exists y.(IsWerewolf(x) -> ((IsBittenBy(x,y) | IsScratchedBy(x,y)) & IsWerewolf(y)))", "prediction": ["all x.(Worshipwolf(x) -> (Scrapped(x) | Bited(x)))", "all x.(Wrecked(x) | Bited(x))", "all x y.((Worshipwolf(x) & (Retched(y) | BitedBy(y))) -> Waswolf(x))", "all x.(Worshipwolf(x) -> (Scratched(x) | BitedBy(x)))", "all x.(Werewolf(x) -> (ScratchedOrBitched(x) & AnotherWerewolf(x)))", "all x y.((Wrecking(x) & OtherWrecking(y)) -> (Scraped(x) | Bited(x)))", "all x.(Werewolf(x) -> (ScrashedByWormwolf(x) | BitedByWormwolf(x)))", "all x y.((Wormwolf(x) & (Scraped(y) | BitedBy(y))) -> Waswolf(y))", "all x.(WrestedWolf(x) -> (Scraped(x) | Bited(x)))", "all x.((WrestedWhelf(x) & (ScratchedBy(x) | BitedBy(x))) -> Waswolf(x))", "all x y.((Wormwolf(x) & Waswolf(y)) -> (Scrapped(x,y) | Bited(x,y)))", "all x y.((Werewolf(x) & OtherWerewolf(y)) -> (Scraped(x) | Bited(x)))", "all x y.((Wrecking(x) & Worn(y)) -> (Scratched(x) | Bited(x)))", "all x.(Whatwerwolf(x) -> (Scratched(x) | Bited(x)))", "all x y.((Werewolf(x) & (Wreathwolf(y) | Werewolf(y))) -> (Cracked(x,y) | Bited(x,y)))", "all x.(Wordwolf(x) -> (Scraped(x) | Bited(x)))"]}
{"id": "folio_train_2476", "nl": "If someone has been scratched or bitten, they have been attacked.", "fol": "all x.exists y.((IsBittenBy(x,y) | IsScratchedBy(x,y)) -> IsAttackedBy(x,y))", "prediction": ["all x y.((Rescraped(x) | Bited(x)) -> Attacked(y))", "all x.((Scraped(x) | Bited(x)) -> Attacked(x))", "all x.((TotallyScraped(x) | Bitten(x)) -> Attacked(x))", "all x.((Scraped(x) | Bited(x)) -> Attacked(x))", "all x.((Cracked(x) | Bited(x)) -> Attacked(x))", "all x y.((Person(x) & (Scraped(x) | Bited(x))) -> Attacked(x))", "all x.((Cracked(x) | Bited(x)) -> Attacked(x))", "all x.((Tom(x) & Stuck(x) | Bited(x)) -> Attacked(x))", "all x.((Scrapped(x) | Bitted(x)) -> Awakened(x))", "all x.((Scraped(x) | Bited(x)) -> Attacked(x))", "all x.((Scraped(x) | Bited(x)) -> Attacked(x))", "all x.(ScrapedOrBbitten(x) -> Attacked(x))", "all x.((Cracked(x) | Bited(x)) -> Attacked(x))", "all x.((Gather(x) & (Rawled(x) | Bited(x))) -> Attacked(x))", "all x.((Cracked(x) | Bited(x)) -> Attacked(x))", "all x.((Scraped(x) | Bited(x)) -> Attacked(x))"]}
{"id": "folio_train_2477", "nl": "All humans are werewolves.", "fol": "all x.(IsHuman(x) -> IsWerewolf(x))", "prediction": ["all x.(Human(x) -> Waswolf(x))", "all x.(Human(x) -> Waswolf(x))", "all x.(Human(x) -> Werewolf(x))", "all x.(Human(x) & Werewolf(x))", "all x.(Human(x) -> Werewolf(x))", "all x.(Human(x) -> Werewolf(x))", "all x.(Human(x) -> Werewolf(x))", "all x.(Human(x) -> Werewolf(x))", "all x.(Human(x) -> Waswolf(x))", "all x.(Human(x) -> Waswolf(x))", "all x.(Human(x) -> Waswolf(x))", "all x.(Human(x) -> Waswolf(x))", "all x.(Human(x) -> Werewolf(x))", "all x.(Human(x) -> WoundedWolf(x))", "all x.(Human(x) -> Waswolf(x))", "all x.(Human(x) -> Waswolf(x))"]}
{"id": "folio_train_2478", "nl": "A werewolf is a wolf.", "fol": "all x.(IsWerewolf(x) -> Wolf(x))", "prediction": ["all x.(Worshipwolf(x) -> Wolf(x))", "all x.(Wormwolf(x) -> Wolf(x))", "all x.(Worshipwolf(x) -> Wolf(x))", "all x.(Worshipwolf(x) -> Wolf(x))", "all x.(Worshipwolf(x) -> Wolf(x))", "all x.(Worshipwolf(x) -> Wolf(x))", "all x.(Worshipwolf(x) -> Wolf(x))", "all x.(Worshipwolf(x) -> Wolf(x))", "all x.(Worshipwolf(x) -> Wolf(x))", "all x.(Worshipwolf(x) -> Wolf(x))", "all x.(Worshipwolf(x) -> Wolf(x))", "all x.(Worsch(x) -> Wolf(x))", "all x.(Worshipwolf(x) -> Wolf(x))", "all x.(Worshipwolf(x) -> Wolf(x))", "all x.(Wordwolf(x) -> Wolf(x))", "all x.(Worshipwolf(x) -> Wolf(x))"]}
{"id": "folio_train_2479", "nl": "A werewolf has scratched someone before.", "fol": "exists x y.(IsWerewolf(x) & IsScratchedBy(x,y))", "prediction": ["all x.(Worshipwolf(x) -> scratchedAgain(x))", "all x y.((Werewolf(x) & Person(y)) -> Scratched(x,y))", "all x.(Wormwolf(x) -> ScratchedPerson(x))", "all x y.((Worshipper(x) & Person(y) & Scrubbed(x,y)) -> CreatedArea(x,y))", "all x y.((Worx(x) & Someone(y)) -> Scratched(x,y))", "all x y.((Worshipwolf(x) & Person(y)) -> Scratches(x,y))", "all x y.((Werewolf(x) & Person(y)) -> Scratched(x,y))", "all x y z.((Wordwolf(x) & Object(y) & Person(z) & StreakedBefore(x,y)) -> Werewolf(x))", "all x y.((Wormwolf(x) & Person(y)) -> ScratchedBefore(x,y))", "all x.(Wreawolf(x) -> HasScrapedPerson(x))", "all x y.((Wernwolf(x) & Person(y)) -> ScrubbedBefore(x,y))", "all x y.((Wordwolf(x) & Person(y)) -> ScrubbedBefore(x,y))", "all x.(WerstedLight(x) -> ScratchedProperly(x))", "all x y.((Werkwolf(x) & Person(y)) -> ScratchedBefore(x,y))", "all x y.((Worshipwolf(x) & Person(y)) -> HasCracked(x,y))", "all x y z.((Redwolf(x) & Person(y) & Avatar(z)) -> HasScraped(x,y,z))"]}
{"id": "folio_train_2480", "nl": "UFC Fight Night was a mixed martial arts event and was held in Sweden.", "fol": "(UFCFightNightEvent(UFCFightNight) & IsMixedMartialEvent(UFCFightNight) & HeldInSweden(UFCFightNight))", "prediction": ["all x.(UFCFightNight(x) -> (MixedMartialArts(x) & HeldInSweden(x)))", "all x.(FightNight(x) -> (MixedMartialArtsEvent(x) & HeldInSweden(x)))", "all x.((MixedMartialArtsEvent(x) & HeldInSweden(x)) -> FightNight(x))", "(MixedMartialArts(UFC,Event) & HeldInSweden(FC,Event))", "all x.(UFCFightNight(x) -> (MixedMartialArtsEvent(x) & HeldIn(x,Sweden)))", "all x y.((UFCFightNight(x) & MixedMartialArtsEvent(x) & Sweden(y)) -> HeldIn(x,y))", "all x.(UFCFightNight(x) -> (MixedMartialArtsEvent(x) & HeldInSweden(x)))", "all x.(UFCFightNight(x) -> (MixedMartialArtsEvent(x) & HeldInSweden(x)))", "all x.((UFCFightNight(x) & MixedMartialArtsEvent(x) & HeldInSweden(x)) -> Mixed(x))", "all x.((UFCFightNight(x) & MixedMartialArts(x)) -> HeldIn(x,Sweden))", "all x y.((CmdashMartialArts(x) & Mixed(x) & Sweden(y)) -> HeldAt(x,y.))", "all x.(FightNight(x) -> (MixedMartialArts(x) & HeldInSweden(x)))", "all x.((UFCFightNight(x) & MixedMartialArtsEvent(x) & HeldInSweden(x)) -> Concluded(x))", "all x y.((FightNight(x) & MixedMartialArtsEvent(x)) -> HeldInSweden(x))", "all x.(FightNight(x) -> (WomenAtMixedMartialArts(x) & HeldIn(x,Sweden)))", "(MMAEvent(UFC) & HeldIn(UFC) & HeldIn(UFC) & HeldIn(UFC) & HeldIn(UFC) & HeldIn(UFC) & HeldIn(UFC) & HeldIn(UFC) & HeldIn(UFC Reception))"]}
{"id": "folio_train_2481", "nl": "At UFC Fight Night, Sadollah was scheduled to fight Musoke.", "fol": "(UFCFightNightEvent(UFCFightNight) -> IsScheduledToFight(Sadollah,Musoke))", "prediction": ["all x.((Sadollah(x) & Musoke(y)) -> ScheduledToFight(x,y))", "(FightNight(Sadollah) -> ScheduledToFightMusoke(Sadollah))", "(Sadollah(Sadollah) & UFCFightNight(Sadollah) & ScheduledToFight(Sadollah,Musoke))", "(UFCFightNight(Sadollah) -> ScheduledToFight(Sadollah,Musoke))", "all x.(Sadollah(x) -> ScheduledToFight(x,musoke))", "(Sadollah,FiringMusoke,Firing(Sadollah))", "(Sadollah(Sadollah) : scheduledToFightMusoke(Sadondah))", "-(Sadollah(Sadollah) & UFCFightNight(Sadollah))", "((Sadollah(s) & UFCFightNight(s)) | Fighter(s) & Musoke(s)))", "(PlannedDownDay(Sadollah) & PresentedAtUFCFC(Sadollah) & SetsLunch(sadollah,musoke))", "(All x.(Sadollah(x) -> FightingMusoke(x)))", "(Sadollah(Sadollah) & AtFCFightNight(Sadollah) & ScheduledToFight(Sadollah,Musoke))", "all x.(UFCFightNight(x) -> ScheduledToFightMusoke(x))", "(EventSadollah(Sadollah) & AtUFFightNight(Sadollah))", "(Sadollah(Sadollah) & -(MMAPunk) & Musoke(Musoke)) -> ScheduledFor(Sadollah)))", "LavaHillahSadollahLimits(Sadollah&Musoke(Song))"]}
{"id": "folio_train_2482", "nl": "Sadollah fought Akiyama at UFC Fight Night.", "fol": "(UFCFightNightEvent(UFCFightNight) -> CompeteInFight(Sadollah,Akiyama))", "prediction": ["(FightNight(Sadollah) | UFCFightNight(Sadollah))", "all x.(Sadollah(x) -> foughtAkiyama(x))", "Sadollah fought Akiyama at UFC FightNight (10))", "(FightNight(Sadollah) & foughtAkiyama(Sadollah))", "Sadollah fought Akiyama at UFCFightNight(Sadollah)", "Sadollah fought Akiyama at UFCFightNight(Sadollah)", "Sadollah fought Akiyama at UFC FightNight(Sadollah)", "All x.(Sadollah(x) -> FightsAkiyama(x))", "Sadollah fought Akiyama at UFCFightNight.", "Sadollah fought Akiyama in UFCFightNight.", "Sadollah fought Akiyama at UFCFightNight(Sadollah)", "Sadollah fought Akiyama at UFC FightNight(Sadollah,E-Akayu)", "all x.(Sadollah(x) -> FightingAkiyama(x))", "Sadollah fought Akiyama at FightNight(Sadollah,UFC)", "Sadollah fought Akiyama at UFC FightNight(Sadollah)", "Sadollah fought Akiyama at UFC FightNight(Sadollah)"]}
{"id": "folio_train_2483", "nl": "Musoke fought Yakovlev at UFC Fight Night.", "fol": "(UFCFightNightEvent(UFCFightNight) -> CompeteInFight(Musoke,Yakovlev))", "prediction": ["all x.(FightNight(x) -> MusokeFightsYakovlev(x))", "-WasMusokeFor(Musoke)?", "(FightNight(Musoke,Yakovlev) & UFC(YankeesKnow(Musoke,Yakovlev))", "Yakovlev (fight at UFCFightNight(Musoke))", "Musoke fought Yakovlev at UFCFightNight(Museuse)", "Musoke feudedYakorowy at UFCFightNight(Musoke)", "(fightsYakovlev(Musoke) & UFCFightNight(Musoke))", "Lukas Mikhail won at UFCFisherNight(Musoke,OfYakovlev)", "Musoke fought Yakovlev at UFCFightNight(Musoke)", "Musoke fought Yakovlev at UFCFightNight(Musoke,c,y))", "Musoke fights Yakovlev at UFC FightNight(Musoke)", "Musoke fought Yakovlev at UFCFightNight(Musoke,(Musoke))", "(fightsYakovlev(Musoke,UFC) & UFCFightNight(Mousoke,UFC))", "-Museum(Musoke,fight2@UnFCFightNight(Musoke))", "(FC(Musoke,FC) & Yakovlev(Musoke,FC))", "Musoke fought Yakovlev at UFCFightNight(Musoke,UFC)"]}
{"id": "folio_train_2484", "nl": "Jung was injured at UFC Fight Night.", "fol": "(UFCFightNightEvent(UFCFightNight) -> IsInjured(Jung))", "prediction": ["Jung injured at UFCFightNight(Jun)", "Jung was InjuredAtUFFCFightNight(Jun)", "Jung was injured at UFCFightNight(Jun,UFC)", "Jung was injured at UFCFightNight(Jun)", "Jung was injured(s) 2 (UFCFC(s) & -UFCFC(s)))", "Jung was injured at UFC FightNight.", "Jung was injured at UFCFightNight(Jung)", "Jung was injured at UFCFightNight(Jun,UFC,Night))", "Jung was injured at UFCFightNight(Jun)", "Jung was injured at UFCFightNight(x) & NoLitigation(y) -> Injured(z))", "Jung was injured at UFCFightNight(Jung)", "Jung was injured by UFCFightNight(Jun)", "Jung was injured at UFCFightNight(x)", "Jung was injured at UFCFightNight(Jun)", "Jung is injured at UFCFightNight(Jun)", "Jung was hurt at UFCFightNight(Jun)"]}
{"id": "folio_train_2485", "nl": "Injured people did not fight at UFC Fight Night.", "fol": "all x.(IsInjured(x) -> -FightInUFC(x))", "prediction": ["all x.(Injured(x) -> -FightsAtUFFC(x))", "all x y.((Injured(x) & UFCFightNight(y) & -Fight(y,x)) -> -Fighter(x,y))", "all x.(InjuredPerson(x) -> -FightsAtUFFCFightNight(x))", "all x y.((Injured(x) & UFCFightNight(x)) -> -FightsAt(x,y))", "all x.(InjuredPeople(x) -> -FightsAtUFFC(x))", "all x.(FightNight(x) -> -FightsAtUFCup(x))", "all x.(InjuredPeople(x) -> -FightsAtUFKnight(x))", "all x.((InjuredPeople(x) & -FightAtUFC(x)) -> -FightAtFC(x))", "all x.((Injured(x) & -FightsAtUFCall(x)) -> -FightsAtUFCall(x))", "all x.(InjuredPeople(x) -> -FightsAtUFKnot(x))", "all x.(Injured(x) -> -Fighters(x))", "all x.((InjuredPerson(x) & -FCFFightNight(x)) -> -FightsAtFightNight(x))", "all x.(Injured(x) -> -FightAtUFFC(x))", "all x.(Injured(x) -> -FightsAtUFFC(x))", "all x y z.((Injured(x) & People(y) & UFCFightNight(z)) -> -FightsAt(y,z))", "all x y.((Injured(x) & UFCFightNight(y)) -> -Fight(x,y))"]}
{"id": "folio_train_2486", "nl": "Jung fought Sadollah.", "fol": "CompeteInFight(Jung,Sadollah)", "prediction": ["(Jung foughtSadollah.", "Sadollah fought him.", "all x.(Jung(x) -> Sadollah(x))", "(Adollah! Sunglin!)", "LuvnedSadollah.", "all x.(Jung(x) -> foughtSadollah(x))", "all x.(Jung(x) -> WarnedSadollah(x))", "all x.(Jung(x) -> Sadollah(x))", "Sadollah.", "Sadollah Lupts.", "All x.(Jung(x) -> CombatSadollah(x))", "all x.(Jung(x) & Sadollah(x)) -> Battle(x))", "(I fought Sadollah(Jung) & Sadollah(Jung))", "all x.(Jung(x) -> FightingSadollah(x))", "All x.(Jung(x) -> BattledSadollah(x))", "-saddollah.JungFights(jung,Sadollah))"]}
{"id": "folio_train_2487", "nl": "Jung did not fight at UFC Fight Night.", "fol": "-FightInUFC(Jung)", "prediction": ["-FightsAtUFCall(Jung)", "Jung hat e.A.(FightNight(e) & -Fight(y,e))", "Jung & -(Fight(Jung,UFC,FightNight)))", "Jung -FightsAtUFightNight(Jung)", "Jung & -Fight(Jung)", "Jung hat nicht fought at UFCFightNight(Juman,Fight)", "-JungFightNight(Yu)", "Jung did not fight at UFCFightNight(Jung)", "(FightNight(Jin) & -Fight(Jin))", "-FightAtFC(Jung)", "-FightJung(Jung)", "(-Fight(Jung,UFC) -> UFCFightNight(Jung))", "Jung is a former pro wrestler from Ohio & worked for the UFC.", "(Also,Jung,UFCFightNight)", "Alles x.(Jung(x) -> -FightsAtUFightNight(x))", "Jung n'foughtAtUFChampionship(n)"]}
{"id": "folio_train_2488", "nl": "Sadollah fought Musoke.", "fol": "CompeteInFight(Sadollah,Musoke)", "prediction": ["(all x.(Sadollah(x) -> FightsMousoke(x)))", "all x.(Sadollah(x) -> foughtMusoke(x))", "Sadollah fought (Musoke)", "all x.(Sadollah(x) -> foughtMusoke(x))", "(Fight(Sadollah,Musoke) -> Sadollah(Sadollah,Musoke))", "Sadollah fought Musoke.", "Sadollah foughtMusoke.", "the world's most beautiful, sincere, and most powerful, witty and powerful Assassin (Museolah)", "all x.(Sadollah(x) -> BecameFightingMousoke(x))", "Sadollah fought Musoke.", "All x.(Sadollah(x) -> LatedMusoke(x))", "all x.(Sadollah(x) -> foughtMusoke(x))", "all x.(Sadollah(x) -> foughtMusoke(x))", "Sadollah fought Musoke.", "Sadollah foughtMusoke.", "all x.(Sadollah(x) -> foughtMusoke(x))"]}
{"id": "folio_train_2489", "nl": "Nelson fought Story at UFC Fight Night.", "fol": "(UFCFightNightEvent(UFCFightNight) -> CompeteInFight(Nelson,Story))", "prediction": ["Nelson fought StoryAtUFChipNight(Rambol,FightNight)", "Nelson foughtStoryAtUFFC(n) & FightNight(r))", "Nelson fought Story at UFCFightNight(Nelson)", "Nelson fought Story at UFCFightNight(15,23)", "Nelson fought Story At UFCFightNight(Nelson).", "Nelson WreckedStoryFightNight(Nelson)", "Nelson fought StoryAtUFCrowdNight(Nelson)", "Nelson fought(Nelson) at UnitedFCFightNight(Nelson,Story)", "Nelson fought Story at UFCFightNight.", "Nelson foughtStoryAtFightNight(Nelson)", "(all x.(Nelson(x) -> FightingStory(x)))", "Nelson foughtStory(Nelson,UFC)", "Nelson foughtStoryAtFightNight(Nelson)", "\"(Nelson(Nelson) & Story(Nelson)) -> AtFightNight(Nelson(Nelson))", "Nelson foughtStoryAtUFightNight(Nelson)", "Nelson fought StoryAtUFChampionship(Night(Nelson,Night) & AFCStar(Nelson,Nelson))"]}
{"id": "folio_train_2490", "nl": "All drinks are edible. ", "fol": "all x.(IsDrink(x) -> IsEdible(x))", "prediction": ["all x.(Drink(x) -> Edible(x))", "all x.(Drink(x) -> Edible(x))", "all x.(Drink(x) -> Edible(x))", "all x.(Drink(x) -> Edible(x))", "all x.(Drink(x) -> Edible(x))", "all x.(Drink(x) -> Edible(x))", "all x.(Drink(x) -> Edible(x))", "all x.(Drink(x) -> Edible(x))", "all x.(Drink(x) -> Edible(x))", "all x.(Drink(x) -> Edible(x))", "all x.(Drink(x) -> Edible(x))", "all x.(Drink(x) -> Edible(x))", "all x.(Drink(x) -> Edible(x))", "all x.(Drink(x) -> Edible(x))", "all x.(Drink(x) -> Edible(x))", "all x.(Drink(x) -> Edible(x))"]}
{"id": "folio_train_2491", "nl": "All juices are drinks. ", "fol": "all x.(IsJuice(x) -> IsDrink(x))", "prediction": ["all x.(Juice(x) -> Drink(x))", "all x.(Juice(x) -> Drink(x))", "all x.(Juice(x) -> Drink(x))", "all x.(Juice(x) -> Drink(x))", "all x.(Juice(x) -> Drink(x))", "all x.(Juice(x) -> Drink(x))", "all x.(Juice(x) -> Drink(x))", "all x.(Juice(x) -> Drink(x))", "all x.(Juice(x) -> Drink(x))", "all x.(Juice(x) -> Drink(x))", "all x.(Juice(x) -> Drink(x))", "all x.(Juice(x) -> Drink(x))", "all x.(Juice(x) -> Drink(x))", "all x.(Juice(x) -> Drink(x))", "all x.(Juice(x) -> Drink(x))", "all x.(Juice(x) -> Drink(x))"]}
{"id": "folio_train_2492", "nl": "All orange juice is a juice. ", "fol": "all x.(IsOrangeJuice(x) -> IsJuice(x))", "prediction": ["all x.(OrangeJuice(x) -> Juice(x))", "all x.(OrangeJuice(x) -> Juice(x))", "all x.(OrangeJuice(x) -> Juice(x))", "all x.(OrangeJuice(x) -> Juice(x))", "all x.(OrangeJuice(x) -> Juice(x))", "all x.(OrangeJuice(x) -> Juice(x))", "all x.(OrangeJuice(x) -> Juice(x))", "all x.(OrangeJuice(x) -> Juice(x))", "all x.(OrangeJuice(x) -> Juice(x))", "all x.(OrangeJuice(x) -> Juice(x))", "all x.(OrangeJuice(x) -> Juice(x))", "all x.(OrangeJuice(x) -> Juice(x))", "all x.(OrangeJuice(x) -> Juice(x))", "all x.(OrangeJuice(x) -> Juice(x))", "all x.(OrangeJuice(x) -> Juice(x))", "all x.(OrangeJuice(x) -> Juice(x))"]}
{"id": "folio_train_2493", "nl": "A juice is either an orange juice or an apple juice.", "fol": "all x.(IsOrangeJuice(x) | IsAppleJuice(x))", "prediction": ["all x.(Juice(x) -> (OrangeJuice(x) | AppleJuice(x)))", "all x.(Juice(x) -> (OrangeJuice(x) | AppleJuice(x)))", "all x.(Juice(x) -> (OrangeJuice(x) | AppleJuice(x)))", "all x.(Juice(x) -> (OrangeJuice(x) | AppleJuice(x)))", "all x.(Juice(x) -> (OrangeJuice(x) | AppleJuice(x)))", "all x.(Juice(x) -> (OrangeJuice(x) | AppleJuice(x)))", "all x.(Juice(x) -> (OrangeJuice(x) | AppleJuice(x)))", "all x.(Juice(x) -> (OrangeJuice(x) | AppleJuice(x)))", "all x.(Juice(x) -> (OrangeJuice(x) | AppleJuice(x)))", "all x.(Juice(x) -> (OrangeJuice(x) | AppleJuice(x)))", "all x.(Juice(x) -> (OrangeJuice(x) | AppleJuice(x)))", "all x.(Juice(x) -> (OrangeJuice(x) | AppleJuice(x)))", "all x.(Juice(x) -> (OrangeJuice(x) | AppleJuice(x)))", "all x.(Juice(x) -> (OrangeJuice(x) | AppleJuice(x)))", "all x.(Juice(x) -> (OrangeJuice(x) | AppleJuice(x)))", "all x.(Juice(x) -> (OrangeJuice(x) | AppleJuice(x)))"]}
{"id": "folio_train_2494", "nl": "All apple juice is sweet.", "fol": "all x.(IsAppleJuice(x) -> IsSweet(x))", "prediction": ["all x.(AppleJuice(x) -> Sweet(x))", "all x.(AppleJuice(x) -> Sweet(x))", "all x.(AppleJuice(x) -> Sweet(x))", "all x.(AppleJuice(x) -> Sweet(x))", "all x.(AppleJuice(x) -> Sweet(x))", "all x.(AppleJuice(x) -> Sweet(x))", "all x.(AppleJuice(x) -> Sweet(x))", "all x.(AppleJuice(x) -> Sweet(x))", "all x.(AppleJuice(x) -> Sweet(x))", "all x.(AppleJuice(x) -> Sweet(x))", "all x.(AppleJuice(x) -> Sweet(x))", "all x.(AppleJuice(x) -> Sweet(x))", "all x.(AppleJuice(x) -> Sweet(x))", "all x.(AppleJuice(x) -> Sweet(x))", "all x.(AppleJuice(x) -> Sweet(x))", "all x.(AppleJuice(x) -> Sweet(x))"]}
{"id": "folio_train_2495", "nl": "If coke is apple juice, then coke is a drink.", "fol": "(IsAppleJuice(Coke) -> IsDrink(Coke))", "prediction": ["all x.((Coke(x) & AppleJuice(x)) -> Drink(x))", "all x.((Coke(x) & AppleJuice(x)) -> Drink(x))", "all x.((Coke(x) & AppleJuice(x)) -> Drink(x))", "all x.((Coke(x) & AppleJuice(x)) -> Drink(x))", "all x.(AppleJuice(x) -> Drink(x))", "all x.((Coke(x) & AppleJuice(x)) -> Drink(x))", "all x.(AppleJuice(x) -> Drink(x))", "all x.((Coke(x) & AppleJuice(x)) -> Drink(x))", "all x.((Coke(x) & AppleJuice(x)) -> Drink(x))", "all x.((Coke(x) & AppleJuice(x)) -> Drink(x))", "all x.((Coke(x) & AppleJuice(x)) -> Drink(x))", "all x.((Coke(x) & AppleJuice(x)) -> Drink(x))", "all x.((Coke(x) & AppleJuice(x)) -> Drink(x))", "all x.(AppleJuice(x) -> Drink(x))", "all x.((Coke(x) & AppleJuice(x)) -> Drink(x))", "all x.(AppleJuice(x) -> Drink(x))"]}
{"id": "folio_train_2496", "nl": "If coke is not apple juice, then coke is not edible.", "fol": "(-IsAppleJuice(Coke) -> -IsEdible(Coke))", "prediction": ["all x.((Coke(x) & -AppleJuice(x)) -> -Edible(x))", "all x.((Coke(x) & -AppleJuice(x)) -> -Edible(x))", "all x.((Coke(x) & -AppleJuice(x)) -> -Edible(x))", "all x.((Coke(x) & -AppleJuice(x)) -> -Edible(x))", "all x.((Coke(x) & -AppleJuice(x)) -> -Edible(x))", "all x.((Coke(x) & -AppleJuice(x)) -> -Edible(x))", "all x.((Coke(x) & -AppleJuice(x)) -> -Edible(x))", "all x.((Coke(x) & -AppleJuice(x)) -> -Edible(x))", "all x.((Coke(x) & -AppleJuice(x)) -> -Edible(x))", "all x.((Coke(x) & Coke(x)) -> -AppleJuice(x))", "all x.((Coke(x) & -AppleJuice(x)) -> -Edible(x))", "all x.((Coke(x) & -AppleJuice(x)) -> -Edible(x))", "all x.((Coke(x) & -AppleJuice(x)) -> -Edible(x))", "all x.((Coke(x) & -AppleJuice(x)) -> -Edible(x))", "all x.((Coke(x) & -AppleJuice(x)) -> -Edible(x))", "all x.((Coke(x) & -AppleJuice(x)) -> -Edible(x))"]}
{"id": "folio_train_2497", "nl": "Coke is orange juice.", "fol": "IsOrangeJuice(Coke)", "prediction": ["((Coke(coke) & OrangeJuice(coke)) -> Fruit(coke))", "all x.(Coke(x) -> OrangeJuice(x))", "all x.(Coke(x) -> OrangeJuice(x))", "all x.(Coke(x) -> OrangeJuice(x))", "all x.(Coke(x) -> OrangeJuice(x))", "all x.(Coke(x) -> OrangeJuice(x))", "All x.(Coke(x) -> OrangeJuice(x))", "all x.(Coke(x) -> OrangeJuice(x))", "all x.(Coke(x) -> OrangeJuice(x))", "all x.(Coke(x) -> OrangeJuice(x))", "all x.(Coke(x) -> OrangeJuice(x))", "all x.(Coke(x) -> OrangeJuice(x))", "all x.(Coke(x) -> OrangeJuice(x))", "all x.(Coke(x) -> OrangeJuice(x))", "all x.(Coke(x) -> OrangeJuice(x))", "All x.(Coke(x) -> OrangeJuice(x))"]}
{"id": "folio_train_2498", "nl": "Coke is edible and sweet.", "fol": "(IsEdible(Coke) & IsSweet(Coke))", "prediction": ["all x.(Coke(x) -> (Edible(x) & Sweet(x)))", "all x.(Coke(x) -> (Edible(x) & Sweet(x)))", "all x.(Coke(x) -> (Edible(x) & Sweet(x)))", "all x.(Coke(x) -> (Edible(x) & Sweet(x)))", "all x.(Coke(x) -> (Edible(x) & Sweet(x)))", "exists x.(Coke(x) & Edible(x) & Sweet(x))", "all x.(Coke(x) -> (Edible(x) & Sweet(x)))", "(Edible(coke) & Sweet(coke))", "all x.(Coke(x) -> (Edible(x) & Sweet(x)))", "all x.(Coke(x) -> (Edible(x) & Sweet(x)))", "all x.(Coke(x) -> (Edible(x) & Sweet(x)))", "exists x.(Coke(x) & Edible(x) & Sweet(x))", "all x.(Coke(x) -> (Edible(x) & Sweet(x)))", "all x.(Coke(x) -> (Edible(x) & Sweet(x)))", "all x.(Coke(x) -> (Edible(x) & Sweet(x)))", "all x.(Coke(x) -> (Edible(x) & Sweet(x)))"]}
{"id": "folio_train_2499", "nl": "Coke is not edible and sweet.", "fol": "(-IsEdible(Coke) & -IsSweet(Coke))", "prediction": ["all x.(Coke(x) -> (-Edible(x) & Sweet(x)))", "all x.(Coke(x) -> -Edible(x) & Sweet(x))", "all x.(Coke(x) -> -Edible(x) & Sweet(x))", "-Edible(coke) & Sweet(coke)", "all x.(Coke(x) -> (-Edible(x) & -Sweet(x)))", "all x.(Coke(x) -> (-Edible(x) & -Sweet(x)))", "-(Edible(coke) & Sweet(coke))", "all x.(Coke(x) -> -Edible(x) & Sweet(x))", "all x.(Coke(x) -> (-Edible(x) & -Sweet(x)))", "(Coke(coke) -> -Edible(coke) & Sweet(coke)))", "exists x.(Coke(x) & -Edible(x) & Sweet(x))", "-(Edible(coke) & Sweet(coke))", "all x.(Coke(x) -> (-Edible(x) & Sweet(x)))", "exists x.(Coke(x) & -Edible(x) & Sweet(x))", "all x.(Coke(x) -> -Edible(x) & Sweet(x))", "all x.(Coke(x) -> -Edible(x) & Sweet(x))"]}
{"id": "folio_train_2500", "nl": "Federico Garcia Lorca was a talented Spanish poet and he supported the Popular Front.", "fol": "(IsTalentedPoet(Lorca) & SupportsPopularFront(Lorca))", "prediction": ["all x.((Poet(x) & Talented(x)) -> SupportedPopularFront(x))", "all x.((Poet(x) & Talented(x) & PopularFront(x)) -> FedericoGarciaLorca(x))", "all x y.((FirefoxGerarda(x) & Talented(x) & SpanishPoet(y) & SupportedPopularFront(x)) -> Lorca(x))", "all x.((FedericoGarciaLorca,SpanishPoet(x) & Talented(x)) -> SupportedPopularFront(x))", "(TalentedAndLorca(FernandoGarcia) & SupportedPopularFront(Fernando,Formerly))", "(TalentedSpanishPoet(FeffericoGarcia,Spanish) & SupportedPopularFront(FerrescoGarcia,Spanish))", "all x.((FedericoGarciaLorca(x) & TalentedSpanishPoet(x)) -> SupportedPopularFront(x))", "(DefencecioGarcaLorca,Poet(en) & Talented(en)) & supportedPopularFront(en))", "all x.(FerricoGarciaLorca(x) & TalentedSpanishPoet(x) & SupportedPopularFront(x))", "all x.((FedericoGarciaLorca(x) & TalentedSpanishPoet(x) & SupportedPopularFront(x)) -> TalentedAndSupported(x))", "all x.(FernicoGarciaLorca(x) -> (TalentedSpanishPoet(x) & PopularFront(x)))", "all x.(Performance(x) -> (FedericoGarciaLorca(x) & TalentedPoet(x) & SupportedPopularFront(x)))", "all x.((FedericoGarciaLorca(x) & TalentedSpanishPoet(x) & SupportedPopularFront(x)) -> Talented(x))", "all x.((PopularFront(x) & TalentedPoet(x)) -> FedericoGarciaLorca(x))", "all x.((FernicoGarcaLorca(x) & TalentedSpanishPoet(x) & SupportedPopularFront(x)) -> TalentedSpanishPoet(x))", "(TalentedSpanishPoet(FerdinicoGarcia) & SupportedPopularFront(FerdinaryFront,Ferdinari))"]}
{"id": "folio_train_2501", "nl": "The Spanish Nationalists opposed anyone who supported the Popular Front", "fol": "all x.(SupportsPopularFront(x) -> Opposes(Nationalists,x))", "prediction": ["all x y.((SpanishNationalists(x) & SupportedPopularFront(x)) -> Opposed(x,y))", "all x y.((SpanishNationalist(x) & SupportsVoluntaryFront(y)) -> Opposes(x,y))", "All x.(SpanishNationalists(x) -> Opposed(x))", "all x y.((SpanishNationalist(x) & SupportedPopularFront(x,y)) -> Opposed(x,y))", "all x.(SpanishNationalists(x) -> OpposedAnyone(x)) SupportedPopularFront(x))", "all x.((SpanishNationalists(x) & SupportedPositiveFront(x)) -> OpposedAnyone(x))", "all x y.((SpanishNationalists(x) & SupportPositiveFront(y)) -> Opposed(x,y))", "all x y.((SpanishNationalists(x) & SupportedPopularFront(y)) -> OpposedOpposedTo(x,y))", "all x y z w.((SpanishNationalist(x) & SupportedPopularFront(y,z) & SupportedThroughPopularFront(y,z)) -> Opposed(x,y))", "all x y z.((SpanishNationalist(x) & PopularFront(y) & Supporter(z)) -> OpposedVideo(x))", "All x y.((SpanishNationalist(x) & PopularFront(y)) -> OpposedAnyone(x,y))", "all x y.((SpanishNationalist(x) & SupportsPopularFront(y)) -> Opposed(x,y))", "all x y.((SpanishNationalist(x) & SupportedPopularFront(y)) -> Opposed(x,y))", "all x.((SpainNationalists(x) & SupportedPopularFront(x)) -> Opposes(x,supportsPopularFront(x))", "all x y.((SpanishNationalist(x) & PopularFront(y) & Supported(x,y)) -> Opposed(x,y))", "all x y.((SpanishNationalist(x) & SupportsPopularFront(x)) -> Opposed(x,y))"]}
{"id": "folio_train_2502", "nl": "Talented poets are popular.", "fol": "all x.(IsTalentedPoet(x) -> IsPopular(x))", "prediction": ["all x.(TalentedPoet(x) -> Popular(x))", "all x.(TalentedPoet(x) -> Popular(x))", "all x.(Poet(x) -> Talented(x))", "all x.(TalentedPoet(x) -> Popular(x))", "all x.(TautunatePoet(x) -> Popular(x))", "all x.(TalentedPoet(x) -> Popular(x))", "all x.(TalentedPoet(x) -> Popular(x))", "all x.(TalentedPoet(x) -> Popular(x))", "all x.(TalentedPoet(x) -> Popular(x))", "all x.(TalentedPoet(x) -> Popular(x))", "all x.(TalentedPoet(x) -> Popular(x))", "all x.(TalentedPoet(x) -> Popular(x))", "all x.(TalentedPoet(x) -> Popular(x))", "all x.(TalentedPoet(x) -> Popular(x))", "all x.(TalentedPoet(x) -> Popular(x))", "all x.(TalentedPoet(x) -> Popular(x))"]}
{"id": "folio_train_2503", "nl": "Spanish Nationalists killed anyone who they opposed and were popular.", "fol": "all x.((Opposes(Nationalists,x) & IsPopular(x)) -> CommitsMurder(Nationalists,x))", "prediction": ["all x y.((SpanishNationalist(x) & Opponent(y) & Popular(y)) -> Killed(x,y))", "all x y.((SantanicNationalist(x) & Spanish(y)) -> (Treats(x,y) & Opposed(x,y) & Popular(x,y)))", "all x.(SpanishNationalist(x) -> (KeptOpponent(x) & Popular(x)))", "all x.((SpanishNationalist(x) & Death(x) & Opposed(x) & Popular(x)) -> Kills(x,x))", "all x.((SpanishNationalist(x) & Opposed(x) & Popular(x)) -> Killed(x))", "all x y.((SpanishNationalist(x) & Owner(y)) -> (Kills(x,y) & Opponent(x) & Popular(x)))", "all x y.((SpanishNationalist(x) & Opponent(y,x) & Popular(y)) -> Kills(x,y))", "all x y.((SpanishNationalist(x) & Opponent(y) & Popular(y)) -> KillsWhoever(x,y))", "all x.((SpanishNationalist(x) & Opponent(x) & Popular(x)) -> Kills(x,y))", "all x y.((SpanishNationalist(x) & Opponent(y,x) & Popular(y)) -> KilledEveryone(x,y))", "all x.((SpanishNationalist(x) & Opposed(x) & Popular(x)) -> Killed(x,y))", "all x y.((SpanishNationalist(x) & Opponent(y) & Popular(y)) -> Kills(x,y))", "all x.(SpanishNationalist(x) -> (Kills(x,y) & Opposed(y) & Popular(y)))", "all x y.((SpanishNationalism(x) & Opponent(y) & Popular(y)) -> Killed(x,y))", "all x y.((SpainNationalist(x) & Occupant(y,x)) -> Killed(x,y))", "all x.((SpanishNationalist(x) & OpposedTo(x) & Popular(x)) -> Killed(x))"]}
{"id": "folio_train_2504", "nl": "Daniel supported the Popular Front but was not popular.", "fol": "(SupportsPopularFront(Daniel) & -IsPopular(Daniel))", "prediction": ["((Daniel(Jim) | PopularFront(Daniel))) -> Supports(Jim))", "-PopularFront(Dan)", "(SupportsPopularFront(Daniel) & -Popular(Daniel))", "(Front(Daniel) & SupportedPupular(Daniel) & -Popular(Daniel))", "(SupportsPopularFront(Daniel) | -Popular(Daniel)))", "(Mr.(Daniel) & PopularFront(Daniel)) & -Popular(Daniel))", "(SupportsPopularFront(Daniel) & -Popular(Daniel))", "Daniel SupportedPopularFront(Daniel) & -Popular(Daniel)", "(Front(Daniel) & Supported(Daniel,Popular) & -Popular(Daniel))", "(MadeAlive(Daniel) | -Popular(Daniel)))", "all x.((Daniel(x) & PopularFront(x)) -> -Popular(x))", "the BestFriends(Daniel)", "(NealBoeing(Daniel) & PopularFront(Daniel) & -Popular(Daniel))", "(all x.(Daniel(x) -> PopularFront(x)) & -Popular(x)))", "(SolvedPopularFront(Daniel) & -PopularFront(Daniel))", "ALL x.(Chain(x) -> (SupportsPopularFront(x) | -Popular(x)))"]}
{"id": "folio_train_2505", "nl": "Daniel was not killed by the Spanish Nationalists.", "fol": "-CommitsMurder(Nationalists,Daniel)", "prediction": ["Daniel nehsy(s) & AssassinatedBy(nationalisms,spanish)", "-(SpanishNationalists(daniel) & -KilledBy(daniel,d))", "(exists x.(TurnedBySpanishNationalists(x) & Daniel(x)))", "-TaintedBySpanishNativists(Daniel)", "Daniel n.((SpanishNationalist(n) & KilledBy(n)) -> -KilledBy(n))", "-(SpanishNationalist(Janel) & -Spanien(Janel))", "Daniel ne-KilledBySpanishNationalists(Daniel,26)", "Daniel ne sinned(n).(SpanishNationalists(d) & -Hurts(d,d)))", "Daniel aesiastical.SantasSpaeanists.", "(-KilledBySpanishNationalists)", "Daniel n'a \u00e9t\u00e9 tuedbySpanishNationalists.", "(noday(Daniel) & SpanishNationalists(Daniel))", "Daniel nervy (Palestinists) & -MovedBy(Daniel,Spanish))", "Daniel n'a been tainted by the SpanishNationalists.", "Daniel ne'a.((Person(n) & -Patron(n)) -> T\u00f6ssedBy(n))", "(-KilledBySpanishNationalists(Daniel))"]}
{"id": "folio_train_2506", "nl": "Lorca was killed by the Spanish Nationalists.", "fol": "CommitsMurder(Nationalists,Lorca)", "prediction": ["-T\u00f6dedBySpanishNationalists(lorca,southern,spanish)", "all x.((Lorca(x) & SpanishNationalists(x)) -> Killed(x))", "Llorca (Luca) & KilledBySpanishNationalists(Lorca))", "all x y.((Lorca(x) & Nationalists(y)) -> KilledBy(x,y))", "Lorca a \u00e9t\u00e9 tainted(Lorca,SpanishNationalisms)", "Lorca was killed bySpanishNationalists.", "Lorca was killed by SpainsNationalists.", "Lorca was killed by the SpanishNationalists.", "Lorca was killed bySpanishNationalists.", "Lorca & KilledBySpanishNationalists.", "all x.(Lorca(x) -> KilledBySpanishNationalists(x))", "Lorca was killed by the SpanishNationalists.", "(Perpetrator(Lorca) & Loses(Lorca) & Loses(Lorca))", "Lorca was killed bySpanishNationalists.", "Lorca was killed by SpanishNationalists & ElectedAsKilling(Lorca,Spanish) & EmancipatedAsKilling(Lorca,Spanish))", "Lorca wasksBySpanishNationalists(Lorca)"]}
{"id": "folio_train_2507", "nl": "People either drink kombucha every day or drink Coca-Cola or Pepsi products every day.", "fol": "all x.(DrinkKombuchaEveryDay(x) | DrinkCocaColaOrPepsiEveryDay(x))", "prediction": ["all x.((Person(x) & (DrinkKombuchaEveryDay(x) | DrinkCokeColaOrPepsiProductsEveryDay(x))) -> DrinksKombuchaEveryDay(x))", "all x.(DrinksKombuchaEveryDay(x) | (DrinksKepsiRecipe(x) | DrinksPepsiRecipe(x))))", "exist x.(Person(x) & (DrinksKombucha(x) | DrinksCocaCola(x) | DrinksPepsi(x)))", "all x.((Person(x) & (DrinksKombucha(x) | DrinksCokeCola(x) | DrinksPepsi(x))) -> DrinksKombucha(x))", "exists x.(Person(x) & (DrinksKombucha(x) | DrinksCola(x) | DrinksPepsi(x)))", "(DrinksKombuchaEveryDay(Person) | DrinksCokeColaOrPepsiProductsEveryDay(Person,Person)))", "all x y.((Person(x) &/DrinksKombucha(x)) | (DrinksCokeCola(x) | DrinksPepsi(x))))", "all x.(Person(x) -> (DrinksKombucha(x) | DrinksCokeCola(x) | DrinksPepsi(x)))", "all x y.((Person(x) & CocaCola(y)) | Pepsi(y)) -> (DrinksKombuchaEveryDay(x) | DrinksCocaColaOrPepsiEveryDay(x)))", "all x.((Person(x) & (DrinksKombuchaEveryDay(x) | DrinksCokeCola(x) | DrinksPepsiProductsEveryDay(x))) -> DrinksKombucha(x))", "all x y.(Drink(x,y) -> (Drink(x,y) & (CokeCola(y) | Pepsi(y))))", "all x.(Person(x) -> (DrinksKombuchaEveryDay(x) | DrinksCokeColaOrPepsiEveryDay(x)))", "all x.(DrinksKombucha(x) | (DrinksCokeCola(x) | DrinksPepsi(x))))", "all x.(ParticularDrinks(x,y) -> (DrinksKombucha(y) | DrinksCocaCola(y) | DrinksPepsiProducts(y)))", "(DietBefore(penguins,Kotocola) | DrinksBefore(penguins,Pepsi)))", "all x.((Person(x) & (DrinkKombucha(x) | DrinkCokeCola(x) | DrinkPepsi(x))) -> DrinksDrinksEachDay(x))"]}
{"id": "folio_train_2508", "nl": "If people drink Coca-Cola or Pepsi products every day, then they grew up with extremely busy parents who did not have time to pack them lunch.", "fol": "all x.(DrinkCocaColaOrPepsiEveryDay(x) -> GrewUpWithBusyParents(x))", "prediction": ["all x.((People(x) & (DrinksCocaCola(x) | DrinksPepsi(x))) -> GrowsUPWithBuckyParents(x))", "all x y.((Product(x) & Parent(y) & DrinksCokeColaOrPepsiEveryDay(x)) -> VERYBuy(y))", "all x.((People(x) & (DrinksCokeCola(x) | DrinksPepsi(x))) -> ExtremelyBustyParents(x))", "all x.((Person(x) & DrinksCokeColaOrPepsiProductsEveryDay(x)) -> (ExtremelyBusyParents(x) & -HasTimeToPackLunch(x)))", "all x.((BeveragesEachDay(x) & DrinksCokeColaOrPepsi(x)) -> (ExpectablyBusyParents(x) & -HasTimeToPackLunch(x)))", "all x y z.((Person(x) & (CokeCola(y) | Pepsi(y)) & Day(z)) -> (GrowsUpWith(x,z) | VeryBusyParents(z,x)))", "all x.((Person(x) & DrinksCocoaColaOrPepsiProductsEveryDay(x)) -> (BrutalToOrmoan(x) & ExhaustedParents(x) & -HasTimeToPackLunch(x)))", "all x y.((Person(x) & (DrinkCokeCola(x) | DrinkPepsi(x))) -> GrowupWithExtremelyBossingParents(x,y))", "all x.((People(x) & DrinksCocaColaOrPepsiProductsEveryDay(x)) -> DevelopedWithExtremelyBusyParents(x))", "all x.((People(x) & DrinkCakeColaOrPepsiProductsEveryDay(x)) -> (ExtremelyBusyParents(x) & -TimeToPackLunch(x)))", "all x y.((People(x) & DrinksCocaColaOrPepsiProductsEveryDay(x,y) & NoTimeToPackPackLunch(x)) -> BusyParents(x))", "all x.((People(x) & DrinkCokeColaOrPepsiEveryDay(x)) -> (UsedToBossParents(x) & HeavilyPropertyPacker(x)))", "all x.((People(x) & DrinksCokeColaWare(x) & DrinksPepsiWare(x)) -> (HeartbrokenParents(x) & -HasTimeToPackLimouse(x)))", "all x.((Person(x) & DrinksCokeColaorPepsiProductsEveryDay(x)) -> (ExtremelyBusyParents(x) & -HasTimeToPackLunch(x)))", "all x y z.((Popular(x) & DrinksCokeColaOrPepsiProductsEveryDay(x) & Parent(y) & -HasTime(y)) -> GrownUpWithExtremelyBusy(y,x))", "all x.((People(x) & DrinkCokeColaOrPepsiProductsEveryDay(x)) -> HighlyBusyParents(x))"]}
{"id": "folio_train_2509", "nl": "If people drink Coca-Cola or Pepsi products every day, then they have to visit the dentist frequently.", "fol": "all x.(DrinkCocaColaOrPepsiEveryDay(x) -> VisitDentistFrequently(x))", "prediction": ["all x.((PopularDentist(x) & DrinksCokeColaOrPepsiProductsEveryDay(x)) -> VisitsForFlours(x))", "all x.((Person(x) & (DrinksCokeCola(x) | DrinksPepsi(x))) -> VisitDentistFrequently(x))", "all x.((Person(x) & DrinksCokeColaOrPepsiEveryDay(x)) -> VisitsDentistFrequently(x))", "all x.((CakeColaOrPepsi(x) & EveryDay(x)) -> VisitDentistRecently(x))", "all x.((DrinksCokeColaOrPepsiToday(x)) -> VisitsDentistFrequently(x))", "all x.((DrinksCocoaColaOrPepsiProducts(x) & EveryDay(x)) -> VisitsDentistFrequently(x))", "all x y.((DrinkingCokeColaOrPepsiProducts(x) & Doctor(y)) -> VisitsFrequently(y,x))", "all x.((DrinksOtherCokeColaOrPepsiInDays(x)) -> VisitsDentistFrequently(x))", "all x.((People(x) & DrinkCoca-ColaOrPepsiEveryDay(x)) -> VisitDentistFrequently(x))", "all x.((People(x) & (DrinksCocaCola(x) | DrinksPepsi(x))) -> VisitsDentistFrequently(x))", "all x.((Drinks(x,Coke) | Drinks(x,Pepsi)) -> VisitsDentistFrequently(x))", "all x.((Young(x) & (DrinksCokeCola(x) | DrinksPepsi(x))) -> VisitsDentistFrequently(x))", "all x.((Person(x) & (DrinksCocaCola(x) | DrinksPepsi(x))) -> VisitsDentistFrequently(x))", "all x y.((People(x) & (CokeCola(x) | Pepsi(x)) & DailyDrink(x)) -> VisitsDentist(y))", "all x.((Person(x) & DrinksCokeColaOrPepsiProductsEveryDay(x)) -> VisitsDentistFrequently(x))", "all x.((DrinksCocaColaOrPepsiProductsEveryDay(x)) -> VisitsDentistFrequently(x))"]}
{"id": "folio_train_2510", "nl": "If people grew up with extremely busy parents who did not have time to pack them lunch, then they have erratic and diverse eating habits.", "fol": "all x.(GrewUpWithBusyParents(x) -> HaveErraticEatingHabits(x))", "prediction": ["all x.((People(x) & GrownUpWithExtremelyBusyParents(x) & -HasTimeToPackLunch(x)) -> (ErraticEatingHabits(x) & DiverseEatingHabits(x)))", "all x y.((Person(x) & GrownUpWithExtremelyBusyParents(x) & -HasTimeToPackLunch(x)) -> (EraticEatingHabits(y) & DiverseEatingHabits(y)))", "all x.((People(x) & GrowthUpWithExtremelyBusyParents(x) & -HasTimeToPackLeaf(x)) -> ErraticAndDiverseEatingHabits(x))", "all x.((Person(x) & grewUpWithSqueakyPasts(x) & -HasTimeToPackLunch(x)) -> EraserThanDiverseEatingHabits(x))", "all x y.((People(x) & GraspedUpWithExtremelyBusyParents(x) & -HasTimeToPackLunch(x)) -> ErraticAndDiverseEatingHabits(y))", "all x y z.((Person(x) & SurroundedByExtremelyBusyParents(y) & -HasTimeToPackLunch(z)) -> (ErraticEatingHabits(x) & DiverseEatingHabits(x)))", "all x y.((Person(x) & GrownUpWithExtremelyBusyParents(x) & -HasTimeToPackLunch(x)) -> ErasticAndDiverseEatingHabits(x))", "all x.((PeopleGrowUpWithStokedParents(x) & -HasTimeToPackLunch(x)) -> (ErrantEatingHabits(x) & DiverseEatingHabits(x)))", "all x.((People(x) & GreatSuccessfulParents(x) & -HasTimeToPackLunch(x)) -> (RabidEatingHabits(x) & DiverseEatingHabits(x)))", "all x.((PopularPopular(x) & grewUpWithExtremelyBusyParents(x) & -HasTimeToPackLunch(x)) -> (ErraticEatingHabits(x) & DiverseEatingHabits(x)))", "all x.((People(x) & GrownUpWithExtremelyBusyParents(x) & DidNeedTimeToPackLunch(x)) -> EraticAndDiverseEatingHabits(x))", "all x.((Person(x) & GiantUpWithBushParents(x) & -HasTimeToPackLunch(x)) -> RariousAndDiverseEatingHabits(x))", "all x.((Person(x) & GrownUpWithElementallyBusyParents(x) & -HasTimeToPackLunch(x)) -> (ErraticEatingHabits(x) | DiverseEatingHabits(x)))", "all x.((Person(x) & GrownUpWithExtremelyBusyParents(x) & -HasTimeToPackLunch(x)) -> (RagileEatingHobbits(x) & DiverseEatingHabits(x)))", "all x.((Popular(x) & HighlyBusyParents(x) & -HasTimeToPackLunch(x)) -> ErasticAndDiverseEatingHabits(x))", "all x.((People(x) & GlownUpWithSqueakyParents(x) & -HasTimeToPackLunch(x)) -> UnerraticAndDiverseEatingHabits(x))"]}
{"id": "folio_train_2511", "nl": "If people have erratic and diverse eating habits, then they do not have consistent everyday routines and like sticking to a solid schedule.", "fol": "all x.(HaveErraticEatingHabits(x) -> -HaveConsistentRoutines(x))", "prediction": ["all x.((Person(x) & EratricAndDiverseEatingHabits(x)) -> (-ConsistentHousekeeping(x) & SticksToSolidSchedule(x)))", "all x.((Person(x) & EratricEatingHabits(x) & DiverseEatingHabits(x)) -> (-ConsistentEverydayRooms(x) & SticktoStandardSchedule(x)))", "all x.(RagiculousAndDiverseEatingHabits(x) -> (-ConsistentAttendances(x) & LikeStayingToStandardSchedule(x)))", "all x.((RapidEatingHabits(x) & DistinctEatingHabits(x)) -> (-ConsistentEverydayRules(x) & SticksToSolidSchedule(x)))", "all x.((People(x) & EratricEatingHabits(x) & DiverseEatingHabits(x)) -> (-ConsistentEverydayRoutines(x) & LikeStrippingToSolidSchedule(x)))", "all x.((People(x) & EradicAndDiverseEatingHabits(x)) -> (-ConsistentEverydayRoutines(x) & StickyToSolidSchedule(x)))", "all x.((Person(x) & ErasticEatingHabits(x) & DiverseEatingHunts(x)) -> (-CommonEverydayRoutine(x) & (StickToSolidSchedule(x) | StickToStandardSchedule(x))))", "all x.((People(x) & ErraticAndDiverseEatingHabits(x)) -> (-ConsistentEverydayRoutines(x) & StickingToSolidSchedule(x)))", "all x.((People(x) & IrregularEatingHouses(x) & DiverseEatingHabits(x)) -> (-ConsistentEverydayRoutines(x) & LikeSticklingToSolidSchedule(x)))", "all x.(Personal(x) -> (EraticAndDiverseEatingHabits(x) & -ConsistentDaytodayRoutines(x) & StuckToSolidSchedule(x)))", "all x.((People(x) & ErraticEatingHabits(x) & DiverseEatingHabits(x)) -> (-ConsistentEverydayRoutines(x) & SittingToStableSchedule(x)))", "all x.((People(x) & EraticEatingAppearances(x) & DiversityEatingAppearances(x)) -> (-ConvenuousOtherdayRoutines(x) & likesStrippingToSolidSchedule(x)))", "all x.((Inhabitat(x) & EratricAndDiverseEating(x)) -> -ConsistentOrganicRules(x) & LikeStickingToSolidSchedule(x))", "all x.((Person(x) & EratricEatingHabits(x) & DiverseEatingHabits(x)) -> -ConsistentEverydayRoutines(x) & StuckToSolidSchedule(x))", "all x.((ArcticAndDiverseEatingHabits(x) & ConsistentNoise(x) & LikesStandingToSolidSchedule(x)) -> -ConsistentNecessaryRoutines(x))", "all x.(RarcastAndDiverseEatingHabits(x) -> (-ConsistentRoutines(x) & StickToSolidSchedule(x)))"]}
{"id": "folio_train_2512", "nl": "Franny either both grew up with extremely busy parents who did not have time to pack her lunch and has consistent everyday routines and like sticking to a solid schedule, or she neither grew up with extremely busy parents who did not have time to pack her lunch nor has consistent everyday routines and likes sticking to a schedule.  ", "fol": "((GrewUpWithBusyParents(Franny) & HaveConsistentRoutines(Franny) & -(-GrewUpWithBusyParents(Franny) & -HaveConsistentRoutines(Franny))) | (-(GrewUpWithBusyParents(Franny) & HaveConsistentRoutines(Franny)) & -GrewUpWithBusyParents(Franny) & -HaveConsistentRoutines(Franny)))", "prediction": ["(growsup(franny,y) | ((franny,y) & UnbusyParents(x,y)) & -BossyParents(y) & -BossyParents(x,y) & -BossyParents(y) & LoversSchedule(x))))", "(exists x.(Franny(x) & ((ExtremelyBusyParents(x) & -HasTimeToPackLunch(x) & ConsistentUrbanRules(x) & LikesStickingSchedule(x)) | (-(ExtremelyBusyParents(x) & -HasTimeToPackLunch(x) & ConsistentUrbanRules(x)) | (-HasTimeToPackLunch(x) & ConsistentUrbanUUUgularRules(x)))) +", "((Franny) & -BrushfulParent(s)) & -BushfulParent(s) & -BuiltInSchedule(s)) & -BuiltInSchedule(s)) | ((Franny) & FreeSchedule(s))))", "(all x.(FRanny(x) -> (BusyParents(x) & -HasTimeToPackLunch(x) & HasConsistentEverydayRoutines(x) & LikesStandingToSchedule(x))) | (-BusyParents(x) & -HasTimeToPackLunch(x) & HasConsistentEverydayRules(x) & LikesStandingToSchedule(x)))", "((Franny(franny) & BrashPast(f)) & (-BushPast(f) & -BushPast(h) & ConsistentEverydayRoutines(f) & SticksToSchedule(f)) | (-BrushPast(f) & ConsistentEverydayRoutines(f) & SticksToSchedule(f))))", "(exists x.(Franny(x) & ((IgnitedUpWithBusyParents(x) & -HasTimeToPackLunch(x) & ConsistentOtherRoutines(x) & SticksToSolidSchedule(x)) | (IgnitedUpWithBusyParents(x) & -HasTimeToPackLunch(x) & SticksToSchedule(x))))", "(both Franny and Franny((Flooding(f) & SuperbusyParents(f)) | (FrolboedUpWith(f) & ExtremelyBusyParents(f) & -FunnyTeachers(f) & NotConsistentEverydayRules(f) & LikeStickingToSchedule(f))))", "(all x y.((Franny(x) & ExtremelyBusyParents(y)) -> (LikesPackingLunch(x) & -GrowthsUpWithStandingToSchedule(x)) | (-GrowsUpWithStickySchedule(x) & HasConsistentExtraordinaryRules(x) & LikesStandingToSchedule(x))))", "(all x.(Franny(x) -> ((ExtremelyBusyParents(x) & -HasTimeToPackLunch(x) & ConsistentOtherdayRules(x) & SticksToSchedule(x))) | (NoTimeToPackLunch(x) & ConsistentOtherdayRules(x) & SticksToSchedule(x))))", "(all x.(Franny(x) -> ((About(x,y) & Over(y)) & -Above(x,z)) | (Above(x,w) & Over(x,w)) & -Above(x,w))))", "(all x.(Franny(x) -> ((SuccessfulParents(x) & -(TimeToPackLast(x) | ConsistentObscureRules(x)) & SticksToSchedule(x))) | (-SuccessfulParents(x) & ConsistentObscureRules(x) & StickToSchedule(x))) -> (Franny(x)))", "(-(Franny(f) | (Franny(f) & -BusyParents(f) & PackLunch(f) & ConsistentOutstandingRules(f) & SticksToSchedule(f))) | (Franny(f) & -BusyParents(f) & PackLaunch(f) & ConsistentOutstandingRules(f) & SticksToSchedule(f))))", "(GrowthEqual(Franny) | She(Franny)) & ((Franny) & -BusyParent(x) & PacksLunch(x) & ConsistentEverydayRules(x) & LikesStrippingToSchedule(x)) | (Franny) & -BusyParent(x) & -PacksLunch(x) & ConsistentEverydayRules(x) & LikesStrippingToSchedule(x))))", "(all x.((Franny(x) & BusyParents(x)) -> (-HasTimeToPackLunch(x) | ConsistentEverydayRoutines(x) & StainSchedule(x))) | (-HasTimeToPackLunch(x) & ConsistentEverydayRoutines(x) & SticksToSchedule(x))))", "(all x.(Franny(x) -> (UnderstandsBuckets(x) & -HasTimeToPackLunch(x) & ConsistentOtherDaytodayRules(x) & SticksToSchedule(x))) | (-UnderstandsBuckets(x) & ConsistentOtherDaytodayRules(x) & SticksToSchedule(x))))", "all x.((Franny(x) & -BusyParents(x) & -BusyParents(x)) -> (-BusyParents(x) & PackLunch(x) & ConsistentObedientRoutines(x) & ConsistentSchedule(x)))"]}
{"id": "folio_train_2513", "nl": "Franny has to visit the dentist frequently.", "fol": "VisitDentistFrequently(Franny)", "prediction": ["all x.(Franny(x) -> HasToSeeDentistFrequently(x))", "all x.((Franny(x) & Dentist(x)) -> VisitsFrequently(x))", "(HasToRevisitDentist(Franny) & Frequent(Franny))", "(VisitDentist(Franny,Jan) & FrequentIsTo(Franny,Dentist))", "all x.(Franny(x) -> VisitsDentist(x))", "(FrannyVisitDentistFrequently(Franny) -> Twice(Franny))", "(-Speechable(Franny) & PeriodonticDocent(Franny))", "(frequentlyvisitsDentist(Franny))", "everything y.((Dentist(y) & Franny(z)) -> VisitsFrequently(z,x,y))", "franny.worse(franny,dentalist) : VisitsFrequently(franny,dentalist))", "-(FrannySon(Franny) & VisitsDentist(Franny)))", "-FrannyHasToVisitdentistFrequently(Franny,dentist))", "all x.(Franny(x) -> VisitsDentist(x))", "(VacanciesFrannyDentist(Franny) & Frequent(Franny,Dentist))", "all x.(Franny(x) -> AvailDentistFrequently(x))", "franny,(franny) & Dentist(fr,y))"]}
{"id": "folio_train_2514", "nl": "If Franny either both grew up with extremely busy parents who did not have time to pack her lunch and drink kombucha every day or neither grew up with extremely busy parents who did not have time to pack her lunch nor drink kombucha every day, then Franny neither visits the dentist frequently nor drinks Coca Cola or Pepsi products every day.", "fol": "(((GrewUpWithBusyParents(Franny) & DrinkKombuchaEveryDay(Franny)) | (-GrewUpWithBusyParents(Franny) & -DrinkKombuchaEveryDay(Franny))) -> (-VisitDentistFrequently(Franny) & -DrinkCocaColaOrPepsiEveryDay(Franny)))", "prediction": ["all x.((Franny(x) & (EvenKills(x) | -Blown(x)) & -HasPackingLunch(x) & DrinksKombuchaEachDay(x))) -> (NotVisitsDentistfrequently(x) & -DrinksCokeColaOrPepsiProductsEachDay(x)))", "(or ((Franny) | (ExtremelyBusyParents(Franny) & -FruitfulParents(Fruit))) & (-FruitingParents(Fruit) & -FruitingParents(Fruit)) & (-FraiduitProducts(Fruit) -> (-FruitlyBeforeDental(FruitableParents(FruitableParents(Fruitable(Fruitable(Fruitable(Fruitable(Fruitable(FruitableFruitableFruitable(FruitableFruitable(FruitableFruitable(Fruitable(Fruitable(Fluitable(Fluitable(Flutable(Flutabile(FluttableFlut)Flut)Flut\")FlutsFlutsFlutsFlutsFlutsFlutsFlutsForFlutsFlutsFlutsFlutsFlutsFlotsFlutsFlutsFlutsFlutsFlutsFlutsFlutsFlutsFlutsFlutsFleutsFlutsFlutsFlut)FlutsFlutsFlutsFlutsFallFlutForFlutForFlutsFleutFallForFleutFlut-Filt-FiltForFiltForFlutZFlutForFlutForFalutFalForFalForFalForFFiltForFiltForFeeForFotForFeeForFalFitFal", "all x.((Franny(x) & (ExtremelyBusyParents(x) | -ExtremelyBusyParents(x) & -(ExtremelyBusyParents(x) & -(FruitVisitDentist(x) | DrinksRelatedProducts(x))) | (-(FruitVisitDentist(x) & -PursesDesipantsDentist(x)) | (--Dentists(x)]))))", "all x.((Franny(x) & ((Boy(x) & -(Boy(x) & PackLunch(x) & DrinkKombucha(x)) | (-Boy(x) & PackLunch(x) & DrinkKombucha(x))))) -> (-Boy(x) & (FlosseAtDentist(x) | DrinkCokeCola(x) | DrinksSilks(x))))", "all x.((GrowsUpWithExtremelyBusyParents(x) & -HasTimeToPackLunch(x) & HasTimeToDrinkKombucha(x)) | -HasTimeToPackLunchToDrinkKombucha(x)) -> -DealsCokeColaOrPepsiProductsEveryDay(x))", "all x.((Franny(x) & ((ExtremelyBusyParents(x) & -(PackLunch(x) | DrinkKombucha(x))) | (-PackLunch(x) & DrinkKombucha(x))))) -> ((-VacuilsDentist(x) | DrinksCocaCola(x) | DrinksPepsi(x))) & (-VacuitsPepsiFood(x))))", "(-(GrowsUpWithExtremelyBusyParents(Franny) & -PurchaseCombucha(Franny)) | (-PurchaseExtremelyBusyParents(Frother) & PackPackKombucha(Frother) & PackPackKombucha(Frother))))", "(-(GrowsUpWithExtremelyBusyParents(Franny) | GrowsUpWithExtremelyBusyParents(Franny))) & -(GrowsUpWithExtremelyBusyParents(Franny) & -(GrowsUpWithExtremelyBusyParents(Franny) | GrowsUpWithExtremelyBusyParents(FruitlyBust", "all x.((Franny(x) & ((ExtremelyBusyParents(x) & -PhasePackedLunch(x) & -PhasePackedKombucha(x)) | (-(ExpectPackedLunch(x) & -PackedKombucha(x)))))) -> -(FrequentVisit(x,Dentist) | DailyPezPezPezPezPezPiezProducts(x,Dentists(x,Dentist)))", "all x.((Dentist(x) & -(ExtremelyBusyParent(x) & -(ExtremelyBusyParent(x) & -(Pack-EatLunch(x) & DrinkKombucha(x)))) >> (-VisitsDentistFrequently(x) | DrinksCocaCola(x) | DrinksPepsiProductsEveryDay(x))))", "((Franny(Franny) & (-BusyParents(f) | (-BusyParents(c) & -PutsExpressLunch(f) & DrinksKombucha(f)))) | -BusyParents(f) & -PacksExpressLunch (f) & DrinksKombucha(f))))", "all x.((Franny(x) & ((SmokedUpWithExtremelyBusyParents(x) & -PackLunch(x) & DrinkKombucha(x)) | (-SmokingUpWithExtremelyBusyParents(x) & -PackLunch(x) & DrinkKombucha(x)))))", "all x.((Franny(x) & ((ExtremelyBuyableParents(x) & -HasPackingLunch(x) & -HasPackingKombucha(x)) | (-BuyableParents(x) & -HasPackingLunch(x) & -HasPackingKombucha(x)))) -> (-FrequentVisit(x) & -DrinksPips(x)))", "all x.((Franny(x) & ((ExtremelyBusyParents(x) & -TimeForPackingLunch(x) & TimeForDrinkingKombucha(x)) | (-TimeForPackingLunch(x) & TimeForDrinkingKombucha(x)))) -> (-FrequentVisitsDentist(x) & -FrequentDrinking(x))))", "all x.(((Franny(x) & (ExtremelyBusyParents(x) & -TimeToPackLunch(x) & TimeToDrinkKombucha(x))) | (-TimeToPackLunch(x) & TimeToDrinkKombucha(x))))", "-((Dr.Franny(f) &(ExtremelyBuyyParents(f) & -(Fruit(f) & PacksLunch(f) & DrinksKombuchaEveryDay(f)) | (-FruitlyVisitingDentist(f) & -(FrequentDentist(f) & DrinksCocaCola(f) | DrinksPepsi(f))))"]}
{"id": "folio_train_2515", "nl": "If Franny either visits the dentist frequently or drinks kombucha every day, then Franny both visits the dentist frequently and drinks Coca-Cola or Pepsi products every day.", "fol": "((VisitDentistFrequently(Franny) | DrinkKombuchaEveryDay(Franny)) -> (VisitDentistFrequently(Franny) & DrinkCocaColaOrPepsiEveryDay(Franny)))", "prediction": ["all x y.((Franny(x) & VisitsDentistFrequently(x) & DriesKombuchaEveryDay(x)) -> ((VisitsDentistFrequently(x) & DrinksCokeColaOrPepsiProductsEveryDay(x))))", "all x y.((Franny(x) & ((VisitsDentistFrequently(x) | DrinksKombuchaEveryDay(x))) | ((VisitsDentistFrequently(x) & DrinksCokeColaProducts(x) & DrinksPepsiProductsEveryDay)))) -> DrinksCokeColaOrPepsiProducts(x))", "all x.((Franny(x) & (VisitesDentistFrequently(x) | DrinksKombuchaEveryDay(x))) -> (VisitesDentistFrequently(x) & (DrinksKecoCola(x) | DrinksPepsiProducts(x))))", "all x y.((Franny(x) & (AdvicesDentist(x) | DrinksKombucha(x))) -> (AdvicesDentist(x,y) & DrinksCokeColaOrPepsi(x))))", "all x y.((FrannyMurphy(x) & (FrequentTourist(x) | DrinksKombucha(x) & -FrequentTourist(x))) -> (FrequentTourist(x,y) & (DrinksCokeCola(x,y) | DrinksPepsi(x,y))))", "all x.((Franny(x) & VisitsDentistFrequently(x) | DrinksKombuchaEveryDay(x))) -> (Dessert(x) & VisitsDentistFrequently(x) & DrinksCokeColaOrPepsiProductsEveryDay(x)))", "all x.((Franny(x) & (VisitsDentist(x) | DrinksKombuchaEveryDay(x))) -> (VisitsDentist(x) & DrinksCokeColaOrPepsi(x)))", "all x.((Franny(x) & (VisitsDentistFrequently(x) | DrinksKombuchaEveryDay(x))) -> (VisitsDentist(x) & DrinksCokeColaOrPepsiProductsEveryDay(x)))", "all x y.((Franny(x) & Dentistry(y) & VisitsFrequently(x,y) | DrinksKombuchaEveryDay(x,y)) -> (VisitsFrequently(x,y) & DrinksCokeColaProducts(x,y) & DrinksPepsiProductsEveryDay(x,y)))", "all x y.((Franny(x) & Dental(y) & VisitsMassively(x,y)) | VisitsMassively(x,y)) -> (DrinksCokeColaOrPepsiProductsEveryDay(x,y)))", "all x.((Franny(x) & (VisitsFrequently(x) | DrinksKombuchaEveryDay(x))) -> (EntersDentist(x) & (DrinksCola(x) | DrinksPepsi(x)))))", "all x.((Franny(x) & (VisitsDentistFrequently(x) | DrinksKombuchaEveryDay(x))) -> (PopulatesDentistFrequently(x) & DrinksCokeColaOrPepsi(x)))", "all x.((Franny(x) & (VisitsDentist(x) | DrinksKombuchaEveryDay(x))) -> (VisitsDentist(x) & DrinksCokeColaOrPepsiProductsEveryDay(x)))", "all x.((Franny(x) & (VacatesDentistFirmly(x) | DrinksKombuchaEveryDay(x))) -> (VisitsDentistFirmly(x) & DrinksCokeColaOrPepsiProductsEachDay(x)))", "all x.((Franny(x) & (VisitsDentist(x) | DrinksKombucha(x))) -> (VisitsDentist(x) & DrinksCokeCola(x) & DrinksPepsiProducts(x)))", "all x.((Franny(x) & (VisitsDentist(x) | DrinksKombucha(x))) -> (VisitsDentist(x) & (DrinksCokeCola(x) | DrinksPepsi(x))))"]}
{"id": "folio_train_2516", "nl": "If a customer subscribes to AMC A List, then he/she can watch 3 movies every week without any additional fees. ", "fol": "all x.((SubscribedToAMCList(x,Amcalist) -> AvailableToWatch3Movies(x)) & NoAdditionalFees(x))", "prediction": ["all x.(SubscribesToAMCAList(x) -> Watch3MoviesWithoutAdditionals(x))", "all x.(SubscribesAtoMovies(x) -> Subscribes(x))", "all x.(SubscribesToAMCAList(x) -> WatchesMoviesEveryWeekWithoutAdditionalFees(x))", "all x.(Subscribes(x,y) -> (WatchesMovies(x,y) & WithOutOwnerFees(x)))", "all x.(SubscribesToAMCAList(x) -> CanWatchFees(x,3/week))", "all x ((Customer(x) & SubscribesToAMCAList(x)) -> WatchesMoviesLastWeek(x,3)))", "all x.(Subscribes(x) -> Watches3MoviesPerWeek(x))", "all x.(Subscribes(x,AMCAList) -> EveryWeek(x))", "all x.(SubscribesToAMCAList(x) -> CanWatchUpTo5Movies(x))", "all x.(Subscribes(x) -> Watch(x,3,3))", "all x.((Customer(x) & SubscribesToAMCAList(x)) -> CanWatchMoviesForWeek(x))", "all x.(SubscribesToAMCAList(x) -> CanWatchMoviesWithoutAdditionalFees(x))", "all x.((Customer(x) & SubscribesToAMCAList(x)) -> CanWatchMovies(x,3))", "all x.(SubmitsAMCAList(x) -> CanWatch3Movies(x))", "all x.(SubscribesToAMCAList(x) -> WatchesMoviesEveryWeek(x))", "all x y.((Customer(x) & AMCAList(y) & Subscribes(x,y)) -> CanWatchMovies(x,y))"]}
{"id": "folio_train_2517", "nl": "Some customers go to cinemas every week. ", "fol": "exists x.GoToCinemaEveryWeek(x)", "prediction": ["exists x.(Customer(x) & GoesToCinemasEveryWeek(x))", "exists x y z.(Customer(x) & Cinema(y) & WorkingLaw(z) & GoesTo(x,y,z))", "exists x.(Customer(x) & GoesToCinema(x))", "exists x.(Customer(x) & GoesToCinema(x))", "exists x.(Customer(x) & GoesToCinema(x))", "exists x.(Customer(x) & GoesToCinema(x))", "exists x.(Customer(x) & GoesToCinema(x) & EveryWeek(x))", "exists x.(Customer(x) & GoesToCinema(x))", "exists x.(Customer(x) & GoesToCinemat(x))", "exists x.(Customer(x) & GoesToCinema(x))", "exists x.(Customer(x) & GoesToCinemas(x))", "exists x.(Customer(x) & GoesToCinema(x))", "exists x.(Customer(x) & GoesToCinema(x))", "exists x.(Customer(x) & GoesToCinema(x))", "exists x.(Customer(x) & GoesToCinema(x))", "exists x.(Customer(x) & GoesToCinema(x))"]}
{"id": "folio_train_2518", "nl": "Customers who prefer TV series will not watch TV series in cinemas.", "fol": "all x.(PrefersTVSeries(x,Tvseries) -> -WatchesInCinemas(x,Cinemas))", "prediction": ["all x.((Customer(x) & PrivesTVSeries(x)) -> -WatchesTVSeriesInCinemas(x))", "all x.(Customer(x) & PrefersTVSeries(x)) -> -TookTVSeriesInCinemas(x))", "all x.((Customer(x) & PrefersTVSeries(x)) -> -WatchTVSeriesInCinemats(x))", "all x.((Customer(x) & LovesTVSeries(x)) -> -WaitsInCinemas(x))", "all x.((Customer(x) & PreferTVSeries(x)) -> -WatchTVSeriesInCinemas(x))", "all x.(Customer(x) -> (PrefersTVSeries(x) & -WatchesTVSeriesInCinemas(x)))", "all x.((Customer(x) & PrefersTVSeries(x)) -> -WatchesTVSeriesInCinemas(x))", "all x.(TelevisionSeries(x) & Prefers(x,TelevisionSeries)) -> -WorthWatchingInCinemas(x))", "all x.(PrefersTVSeries(x) -> -WatchTVSeriesInCinemas(x))", "all x.(PrefersTVSeries(x) -> -WatchEDSalesInCinemas(x))", "all x.((Customer(x) & PrefersTVSeries(x)) -> -WatchTVSeriesInCinemas(x))", "all x.((Customer(x) & PrefersTVSeries(x)) -> -SelectsTVSeriesInCinemas(x))", "all x.((Customer(x) & PrefersTVSeries(x)) -> -WordsWatchingTVSeriesInCinemas(x))", "all x.((Customer(x) & PrefersTVSeries(x)) -> -WatchTelevisionSeriesInCinemas(x))", "all x.((Customer(x) & LovesTVSeries)) -> -WordsItinCinemas(x))", "all x.((Customer(x) & PrefersTVSeries(x)) -> -WorthWatchesTVSeries(x))"]}
{"id": "folio_train_2519", "nl": "James subscribes to AMC A List.", "fol": "SubscribedToAMCList(James,Amcalist)", "prediction": ["James SubscribesToAMCAList(James)", "All x.(AMCList(x) -> Subscribe(x,y))", "James subscribes to AMC AList.", "James SubscribesToAMCList(Jamey)", "James SubscribesToAMCAList(James,AMC)", "All x.(James(x) -> SubmitsToAMCAList(x))", "James subscribes to AMC A List.", "James subscribes to AMCAList.", "James subscribes to AMC AList.", "all x.(JamesSouscritsToAMCAList(x) -> SubscribesToAMCAList(x))", "James SubscribesToAMCAList(James)", "James subscribes to AMC AList.", "all x.(SubscribesTo(x,AMCAList) -> JamesBelongsTo(x,AMCAList))", "James SubscribesToAMCAList.", "all x.((James(x) & AMCAList(x)) -> SubscribesTo(x,y))", "(SubscribesToAMCAList(James))"]}
{"id": "folio_train_2520", "nl": "Peter prefers TV series.", "fol": "PrefersTVSeries(Peter,Tvseries)", "prediction": ["(PrefersTVSeries(Peter))", "(PrefersTVSeries(Peter) & TelevisionSeries(Peter2))", "Peter prefersTVSeries.", "(PrefersTVSeries,p.Sequel(p) & PeterPrefersTVSeries(p))", "Peter prefersTelevisionSeries(Peter)", "all x.(PrefersTVSeries(x) -> PeterPrefersTVSeries(x))", "Peter prefersTVSeries(Peter)", "the best TVSeries(Peter)", "Peter prefersTelevisionSeries(p)", "Mostly TVSeries (Prefers(Peter) & -Prefers(Peter) & TVSeries(Peter))", "Peter prefersTVSeries(Peter)", "(PrefersTVSeries\" & Peter prefersTVSeries\")", "(PrefersTVSeries(Peter))", "Peter prefersTVSeries(PearlsEdinburgh,i)", "all x.(PrefersTVSeries(x) -> PeterMeetsTVSeries(x))", "Peter prefersTVSeasons(Peter)"]}
{"id": "folio_train_2521", "nl": "James is not able to watch 3 movies every week without any additional fees.", "fol": "-AvailableToWatch3Movies(James)", "prediction": ["all x.((Jim(x) & Watches3Movies(x)) -> -CanWatch3Movies(x))", "all x.((Jim(x) & WatchesMovies(x)) -> -(WatchesMovies(x\" & WatchesMovies(x\")))", ".(James(James) & Movie(im) & -(Watches3MoviesWeekly(i,x) & -AccessionsFees(a,x))))", "all x.((James(x) & Watch3Movies(x) & -HasAdditionalFees(x)) -> -HasAdditionalFees(x))", "all x.((James(x) & WatchMovies(x,3) & -CanWatchMovies(x,3)) -> -CanWatchMovies(x,3))", "all x.((James(x) & NoMovies(x,3)) -> -CanWatchWithFees(x,3))", "all x.((James(x) & WatchesMovies(x,3)) -> -CanWatchMoviesWithoutAdditionals(x))", "all x.((James(x) & -HasTwoMovies(x) & Watch(x,3)) -> -HasAdditionalFees(x))", "all x y z.((James(x) & Movie(y) & Movie(z)) -> -CanWatch(x,y,z))", "all x.((James(x) & WatchesFees(x,3)) -> -(NeedsMovies(x) & WatchesMovies(x)))", "all x.((James(x) & 3Movies(y)) -> -CanWatchWithoutFees(x,y))", "all x.((Company(x) & -(ClosesMoviesAndFees(x) & WatchesMoviesAndFees(x,3)))) -> -CanWatchMoviesAndFees(x,3))", "all x.((Jim(x) & WatchesMovies(x,3)) -> -AllowedFees(x))", "all x.((James(x) & WatchesMovies(x,3) & -Weekly(x)) -> NoAddonalFees(x))", "all x.(James(x) -> -Movies(x,3) & WatchesWithInsertFees(x,3))", "-(JamesBridge(Jim) & WatchesTripleMoviesEachWeek(Jim,3) & -NoAdditionalFees(james,3)))"]}
{"id": "folio_train_2522", "nl": "Peter will not watch TV series in cinemas.", "fol": "-WatchesInCinemas(Peter,Cinemas)", "prediction": ["all x.((TelevisionSeries(x) & -(TookInCinemas(x) | TookInCinemas(x))) -> Peter(x))", "(-WasTelevision(Peter,TVSeries) & InCinemas(Peter))", "all x.((Peter(x) | WatchInCinema(x))) -> -SittsIn(x))", "(-DoesStorage(Peter) -> -> SeesInCinema(Peter,TelevisionSeries))", "all x.((TelevisionSeries(x) & -CanRoadShow(x),PEP)) -> -ComesToRainscreen(x))", "Allein(Peter) -> -SelectsTVSeriesInCinemas(Peter))", "all x.((Peter(x) & WatchesTVSeriesInCinemas(x)) -> -Allows(x))", "all x y.((Peter(x) & TVSeries(y)) -> -SeenInCinema(x,y))", "all x.((Peter(x) & -Likes(scene)) -> WatchesInCinemas(x))", "all x.((Peter(x) & -(WatchTVSeries(x) inCinema(x))) -> -WatchInCinema(x))", "All x y.((Peter(x) & TVSeries(y)) -> -WatchInCinemas(x,y))", "(-watchesTVSeriesInCinemas(Peter))", "(-(WatchTVSeries(Peter) | WatchCinema(Peter)))", "all x y.((Peter(x) & TVSeries(y)) -> -WatchInCinemas(x,y))", "Allen isn't an avid TVShower(Peter,n) -> -(WatchShowsInCinemas(Peter,n) & WatchShowsInCinemas(Peter,n)))", "-HearTelevisionSequelsInCinemas(Peter)"]}
{"id": "folio_train_2523", "nl": "Bulbophyllum attenuatum is in the genus bulbophyllum.", "fol": "IsInGenus(Bulbophyllumattenuatum,Bulbophyllum)", "prediction": ["all x.(BulbophyllumAtenuatum(x) -> InGenusBulbophyllum(x))", "all x.(BulbophyllumAttenuatum(x) -> InGenusBulbophyllum(x))", "all x.(BulbophyllumAttenuatum(x) -> InGenusBulbophyllum(x))", "all x.(BulbophyllumAttenuatum(x) -> InGenusBulbophyllum(x))", "all x.(Bulbophyllum(x) -> Attenuatum(x))", "all x.(BulbophyllumAttenuatum(x) -> InGenusBulbophyllum(x))", "all x.((BulbophyllumAttenuatum(x)) -> InGenusBulbophyllum(x))", "all x.(BulbophyllumAttenuatum(x) -> InGenusBulbophyllum(x))", "all x.((BulbophyllumAttenuatum(x)) -> InGenusBulbophyllum(x))", "all x.(BulbophyllumAttenuatum(x) -> InGenusBulbophyllum(x))", "all x.(BulbophyllumAttenuatum(x) -> InGenius(x,Bulbsophyllum))", "all x.(BulbophyllumAttenuatum(x) -> InGenusBulbophyllum(x))", "all x.(BulbophyllumAttenuatum(x) -> InGenusBulbophyllum(x))", "all x.(Bulbophyllum(x) -> InGenusBulbophyllum(x))", "all x y.((Bubophyllum(x) & Attenuatum(y)) -> InGasPilophyllum(x,y))", "all x.(BulbophyllumAttenuatum(x) -> InGenusBulocyllum(x))"]}
{"id": "folio_train_2524", "nl": "All bulbophyllum are orchids.", "fol": "all x.(IsInGenus(x,Bulbophyllum) -> IsOrchid(x))", "prediction": ["all x.(Bulbophyllum(x) -> Orchid(x))", "all x.(Bulbophyllum(x) -> Orchid(x))", "all x.(Bulbsyphyllum(x) -> Orchid(x))", "all x.(Bulbophyllum(x) -> Orchid(x))", "all x.(Bulbophyllum(x) -> Orchid(x))", "all x.(Bulobelellum(x) -> Orchid(x))", "all x.(Bulbophyllum(x) -> Orchid(x))", "all x.(Bulbophyllum(x) -> Orchid(x))", "all x.(Bulbophyllum(x) -> Orchid(x))", "all x.(Bulbophyllum(x) -> Orchid(x))", "all x.(Bulbophyllum(x) -> Orchid(x))", "all x.(Bulbophyllum(x) -> Orchid(x))", "all x.(Bulbophyllum(x) -> Orchid(x))", "all x.(Bumbophyllum(x) -> Orchid(x))", "all x.(Bulbsophyllum(x) -> Orchid(x))", "all x.(Bulbophyllum(x) -> Orchid(x))"]}
{"id": "folio_train_2525", "nl": "Bulbophyllum attenuatum is not an orchid.", "fol": "-IsOrchid(Bulbophyllumattenuatum)", "prediction": ["All x.((BulbophyllumAttenuatum(x) & -Orchid(x)) -> -Orchid(x))", "(-Orchid(BulbophyllumAttenuatum))", "-Orchid(bulbophillum)", "(-Orchide(BulbophyllumAttenuatum))", "-Orchid(BulbophyllumAttenuatum)", "-Orchid(bulbophyllum)", "all x.((Bulbophyllum(x) & Attenuatum(x)) -> -Orchid(x))", "-Orchid(blebophyllum(lemma) & Sterilized(blebophyllum))", "-Orchid(BulbophyllumAtenuatum)", "-Orchidee(BulobophyllumAtenuation)", "All x.(BulbophyllumAtenuatum(x) -> -Orchid(x))", "(-Orchid(BulbophyllumAttenuatum))", "all x.(BulbophyllumAttenuatum(x) -> -Orchid(x))", "all x.((BulbophyllumAttenuatum(x) & -Orchid(x)) -> -Orchid(x))", "all x.(BulbophyllumAttenuatum(x) -> -Orchid(x))", "all x.(BulbsophyllumAttenuatum(x) -> -Orchid(x))"]}
{"id": "folio_train_2526", "nl": "There are eight federal districts of Russia: Central, Northwestern, Southern, North Caucasian, Volga, Ural, Siberian and Far Eastern.", "fol": "(IsFederalDistrictOfRussia(Central) | IsFederalDistrictOfRussia(Northwestern) | IsFederalDistrictOfRussia(Southern) | IsFederalDistrictOfRussia(Northcaucasian) | IsFederalDistrictOfRussia(Volga) | IsFederalDistrictOfRussia(Ural) | IsFederalDistrictOfRussia(Siberian) | IsFederalDistrictOfRussia(Fareastern))", "prediction": ["(FewerDistricts(Russia))", "all x.(RuskFederalDistrict(x) -> (Central(x) & Northwestern(x) & Southern(x) & NorthCaucassian(x) & Volga(x) & Ural(x) & Siberian(x) & FarEastern(x)))", "(FederalDistrict(Russia) -> (Central(Russia) | Northwestern(Russia) | Southern(Russia) | NorthCaucasian(Russia)))", "exists x.(RussetIsHomeToEightFederalDistricts(x) & Central(x) & Northwestern(x) & Southern(x) & NorthCaucassian(x) & Volga(x) & Ural(x) & Siberian(x) & FarEastern(x))", "all x.(FederalDistrict(x) -> (Central(x) | Northwestern(x) | Southern(x)) | NorthCaucasian(x) | Volga(x) | Ural(x) | Siberian(x) | FarEstalian(x)))", "(Age(FederalDistricts) & Central(Northwest) & Southern(SouthernCaucasian(Southwest) & Volga(Valga) & Ural(Ural) & Siberian(Ural) & FarEstrional(Ocean))", "(FederalDistrict(Russia,Central) & Northwestern(Russia) & Southern(Russia) & NorthCaucasian(Russia) & Volga(Russia) & Ural(Russia) & Siberian(Russia) & FarEsteretic(Russia))", "all x.((FederalDistrict(x) & IncludesCentral(x) & IncludesNurtilNorthernCaucasian(x) & IncludesVolga(x) & IncludesUral(x) & IncludesSiberian(x) & IncludesFarEastern(x)) -> FoundInRussia(x))", "Exists x.(Russovsk(x) & CentralDistrict(x) & NorthwesternDistrict(x) & SouthernDistrict(x) & NorthCaucasianDistrict(x) & VolgaDistrict(x) & UralDistrict(x) & SiberianDistrict(x) & FarEasternDistrict(x))", "-FederalDistricts(Russland)", "(FederalDistrict(Roms) & (Central(Roms) | Northwestern(Roms) | Southern(Roms) | NorthCaucassian(Roms))) | (Volga(Roms) | Ural(Roms) | Siberian(Rooms) | FarEast(Roms))))", "all x y z.((Rossia(x) & Central(y) & Northwestern(z) & Southern(z)) -> (NorthCaucassian(z) & Volga(x) & Ural(x) & Siberian(x) & FarEastern(z)))", "all x y.((RussianDistrict(x) & (Central(y) | Northwestern(y) | Southern(y) | NorthCaucasians(y)) | Volga(y) | Ural(y) | Siberian(y) | FarEastern(y))) -> EconomicDistrict(x,y))", "all x.((District(x) & Central(x) & Northwestern(x) & Southern(x) & NorthCaucasian(x)) -> Volga(x))", "all x.(RoyalDistrict(x) -> (Central(x) | Northwestern(x) | Southern(x) | NorthCaucassian(x)) & Volga(x) | Ural(x) | Siberian(x) | FarEast(x)))", "all x.((Central(x) & Northwestern(x) & Southern(x) & NorthCaucasian(x) & Volga(x) & Ural(x) & Siberian(x) & FarEastern(x)) -> FederalDistrict(x))"]}
{"id": "folio_train_2527", "nl": "The Central federal district has the largest population among all federal districts in Russia.", "fol": "(IsFederalDistrictOfRussia(Central) & HasLargestPopulationIn(Central))", "prediction": ["all x.(CentralFederalDistrict(x) -> LargestPopulation(x))", "all x.(CentralFederalDistrict(x) -> LargestPopulation(x))", "all x.(CentralFederalDistrict(x) -> LargestPopulationInRussia(x))", "All x.((CentralFederalDistrict(x) & LargestPopulation(x)) -> FederalRegion(x))", "(LargestPopulationInRegion(CentralFederalDistrict))", "all x.(CentralFederalDistrict(x) -> LargestPopulation(x))", "all x.(CentralFederalDistrict(x) -> LargestPopulationInRussland(x))", "all x y.((CentralFederalDistrict(x) & FederalUnder(y)) -> LargestPopulation(x,y))", "all x.(CentralFederalDistrict(x) -> LargestPopulation(x))", "all x y.((CentralFederalDistrict(x) & FederalDistrict(y)) -> LargerPopulationInRussland(x,y))", "all x y.((FederalDistrict(x) & Central(y)) -> LargestPopulation(x,y))", "all x y.((CentralFederalDistrict(x) & RussianFederalDistrict(y)) -> LargestPopulation(x,y))", "all x.(CentralFederalDistrict(x) -> (LargestPopulationUnderFederalDistricts(x) & Russia(x)))", "all x y.((CentreFederalDistrict(x) & District(y)) -> LargestPopulationIn(x,y))", "all x.(CentralFederalDistrict(x) -> TheLargestPopulation(x))", "all x.(CentralFederalDistrict(x) -> LargestPopulationInRussia(x))"]}
{"id": "folio_train_2528", "nl": "Moscow is the administrative center of the Central federal district.", "fol": "IsAdministrativeCenterOf(Moscow,Central)", "prediction": ["all x.(Moscow(x) -> AdministrativeCenter(x))", "All x.(Moscow(x) -> AdministrationCenterOfCentralFederalDistrict(x))", "(AdministrativeCenter(Moscow) & CentralFederalDistrict(Moscow))", "AdminCenter(Moscow) & CentralFederalDistrict(Moscow)", "all x y.((Moscow(x) & CentralFederalDistrict(y)) -> AdministrativeCenter(x,y))", "all x y.((Moscow(x) & CentralFederalDistrict(y)) -> AdministrativeCenter(x,y))", "all x.(Moscow(x) -> AdministrativeCenter(x))", "all x.(Moscow(x) -> AdministrativeCenterOfCentralFederalDistrict(x))", "all x.((Moscow(x) & AdministrativeCenter(x)) -> CentralFederalDistrict(x))", "the AdministrativeCenterOfCentralFederalDistrict(Moscow)", "Founded in 1841, Moscow & CentralFederalDistrict(Moscow) are both administrative centers.", "all x y z.((Moscow(x) & FederalDistrict(y) & AdministrationCenter(z)) -> (CentralFederal(x) | CentralFederal(z))))", "CentralFederalDestination(Moscow)", "(AdministrativeCenter(Moscow) & CentralFederalDistrict(Moscow))", "CentralFederalDistrictAdministrativeCenter(Moscow)", "all x.(Moscow(x) -> AdministrativeCenterForCentralFederalDistrict(x))"]}
{"id": "folio_train_2529", "nl": "Yekaterinburg is the administrative center of the Ural federal district.", "fol": "IsAdministrativeCenterOf(Yekaterinburg,Ural)", "prediction": ["Yekaterinburg, Ural FederalDistrict(e) -> AdministrativeCenter(e))", "(AdministrativeCenterOfUralFederalDistrict(Yekaterinburg))", "AdminCenter(y) & UralDistrict(z) & EstablishedIn1969(y,x))", "(AdministrativeCenter(y) & UralFederalDistrict(z) & LocatedIn(y,z))", "all x.(Yekaterinburg(x) -> AdministrativeCenter(x,UralDistrict))", "all x.(Ekaterinburg(x) -> AdministrationCenterOfUralFederalDistrict(x))", "(AdministrativeCenter(Yekaterinburg) & UralFederalDistrict(Yekaterinburg))", "(AdministrativeCenter(y) & UralFederalDistrict(z) & BasedInNewsfield(y,z))", "(AdministrativeCenter(y) & UralFederalDistrict(z) & Yekaterinburg(y))", "all x.(Yekaterinburg(x) -> AdministrativeCenterOfUralFederalDistrict(x))", "all x.(Yekaterinburg(x) -> AdministrativeCenterOfUralFederalDistrict(x))", "All x y.((Ekaterinburg(x) & UralFederalDistrict(y)) -> AdministrativeCenter(x,y))", "all x.(UralFederalDistrict(x) -> AdministrativeCenterOf(x,y))", "(AdministrativeCenter(Yekaterinburg) & UralFederalDistrict(Yekaterinburg))", "all x.(Yekaterinburg(x) -> AdministrativeCenterForUralFederalDistrict(x))", "All x.(Yekaterinburg(x) -> AdministrativeCenterInUralFederalDistrict(x))"]}
{"id": "folio_train_2530", "nl": "Vladivostok is the administrative center of the Far Eastern federal district.", "fol": "IsAdministrativeCenterOf(Vladivostok,Fareastern)", "prediction": ["Vladivostok is administrativecenter of FarEasternDepartment(v))", "Vladivostok (FarEastFederalDistrict) & AdministrativeCenter(Vladivostok))", "Vladivostok is administrative center of FarEasternFederalDistrict(Mountain(Vladivostok))", "all x.((Vladivostok(x) & AdministrativeCenter(x)) -> FarEastern(x))", "Vladivostok (administrativecenter)", "(AdministrativeCenter(Vladivostok) & FarEastFederalDistrict(Vladivostok))", "Vladivostok (ADMINISTRATIONCentreFern EasternDistrict(v) -> AdministrativeCentre(v))", "Vladivostok (AdministrativeCenter(Vladivostok) & FarEasternFederalDistrict(Vladivostok))", "AdminCenterOfFarEastFederalDistrict(Vladivostok)", "Vladivostok.es is the administrativecenterOfFarEasternFederalDistrict(vel) & AdministrativeCenterOfFederalDistrict(vel))", "VladivostokLocationofFarEastFederalDistrict(ViaLivVostok)", "Vladivostok is AdministrativeCenterOfFarEasternFederalDistrict(Vladivostok).", "all x.(TerminalCenter(x,FarEastern) -> Vladivostok(x))", "AffiliationCenterOfArdiaticDistrict(Vladivostok)", "CentralLanding(Moldivostok)", "Vladivostok (administrativeCenterFarEasternDistrict)"]}
{"id": "folio_train_2531", "nl": "The Far Eastern federal district has the largest area among all federal districts in Russia.", "fol": "(IsFederalDistrictOfRussia(Fareastern) & HasLargestAreaIn(Fareastern))", "prediction": ["all x.(FarEstalianFederalDistrict(x) -> LargestAreaAmongRegion(x,Russia))", "all x y.((FarEast(x) & FiscalDistrict(y) & Russia(y)) -> LargestArea(x,y))", "all x.(FarEasternFederalDistrict(x) -> LargestArea(x))", "all x.((FarEastern(x) & FederalDistrict(x)) -> LargestArea(x))", "all x.(FarEasternFederalDistrict(x) -> largestAreaInFederalDistrict(x))", "all x.(FarEastFederalDistrict(x) -> LargestArea(x))", "all x.(FarEastFederalDistrict(x) -> LargestAreaInFederalDistricts(x))", "all x.(FarEasternFederalDistrict(x) -> LargestAreaInRussia(x))", "all x y.((FarEastFederalDistrict(x) & FederalDistrict(y) & Russia(y)) -> LargestArea(x,y))", "all x.(FarEastFederalDistrict(x) -> LargestAreaAmongFederalDistrictsInRussland(x))", "all x.(FarEastFederalDistrict(x) -> LargestAreaInRussia(x))", "all x y.((FarEastFederalDistrict(x) & FederalDistrict(y) & InRussia(x,y)) -> LargestArea(x,y))", "all x.(FarEasternFederalDistrict(x) -> LargestAreaInRassota(x))", "all x.(FarEasternFederalDistrict(x) -> LargestAreaInRossinIS District(x))", "all x y.((FarEastFederalDistrict(x) & FederalDistrict(y)) -> LargestArea(x,y))", "all x.(FarEast(x) -> (LargestArea(x) & FederalDistrict(x)))"]}
{"id": "folio_train_2532", "nl": "Some federal districts of Russia were established in 2000.", "fol": "exists x.(IsFederalDistrictOfRussia(x) -> WasEstablishedIn(x,2000))", "prediction": ["exists x.(FederalDistrict(x) & EstablishedIn2000(x))", "exists x.(FederalDistrict(x) & EstablishedIn2000(x))", "exists x.(FederalDistrict(x) & EstablishedIn(x,2000))", "exists x.(FederalDistrict(x) & EstablishedIn(x,2000))", "exists x.(FederalDistrict(x) & EstablishedIn(x,2000))", "exists x.(Rainforest(x) & FoundedIn(x,2000))", "exists x.(FederalDistricts(x) & EstablishedIn2000(x))", "exists x.(FederalDistrictOfRussland(x) & EstablishedIn2000(x))", "exists x.(FederalDistrict(x) & EstablishedIn(x,2000))", "exists x.(FederalDistrict(x) & EstablishedIn2000(x))", "exists x.(FederalDistrict(x) & EstablishedIn(x,2000))", "exists x.(FederalDistrict(x) & EstablishedIn(x,2000))", "exists x.(Fellowship(x) & EstablishedInNearly2000(x))", "exists x.(Region(x) & FedDistrict(x) & EstablishedIn2000(x))", "exists x y.(FederalDistrict(x) & FederalDistrict(y) & EstablishedIn(x,y))", "exists x.(FederalDistrict(x) & EstablishedIn(x,y) & LocatedIn(y),x))"]}
{"id": "folio_train_2533", "nl": "Vladivostok is the administrative center of the federal district with the largest area.", "fol": "exists x.(IsAdministrativeCenterOf(Vladivostok,x) & HasLargestAreaIn(x) & IsFederalDistrictOfRussia(x))", "prediction": ["all x.(Wladivostok(x) -> AdministrationCenterOfFederalDistrict(x) & LargestArea(x))", "all x.(Vladivostok(x) -> (AdministrativeCenter(x) & District(x) & LargestArea(x)))", "Vladivostok in the federal district & AdministrativeCenter(Vladivostok) & LargestArea(Vladivostok,Department))", "all x.((AdministrativeCenter(x) & FederalDistrict(x) & LargestArea(x)) -> Vladivostok(x))", "all x y.((District(x) & AdministrativeCenter(x,y) & LargestArea(x)) -> Vladivostok(x))", "-AdministrativeCenter(District) & LargestArea(District)", "all x y.((AdministrativeCenter(x) & FederalDistrict(y) & LargestArea(x,y)) -> Vladivostok(x))", "(AdministrativeCenter(Vladivostok) & LargestArea(Vladivostok,Region))", "all x.(Vladivostok(x) -> (AdministrativeCenter(x) & FederalDistrict(x) & LargestArea(x)))", "all x.(Valdivostok(x) -> (AdministrationCenter(x) & FederalDistrict(x) & LargestArea(x)))", "(AdministrativeCenter(a) & FederalDistrict(b) & LargerArea(a))", "all x.(Vladivostok(x) -> (AdministrativeCenter(x) & LocatedInFederalDistrict(x) & LargestArea(x)))", "all x.((AgencyCenter(x) & FederalDistrict(x) & LargestArea(x)) -> Vladivostok(x))", "Located in the federal district of Vladivostok, the administrative center of the district has the largest area.", "all x.(Volvidostok(x) -> (AdministrativeCenter(x) & FederalDestination(x) & LargestArea(x)))", "all x.((AdministrativeCenter(x) & FederalDistrict(x) & LargestArea(x)) -> Vladivostok(x))"]}
{"id": "folio_train_2534", "nl": "Moscow is the administrative center of the federal district with the largest population.", "fol": "exists x.(IsAdministrativeCenterOf(Moscow,x) & HasLargestPopulationIn(x) & IsFederalDistrictOfRussia(x))", "prediction": ["(AdministrativeCenter(Moscow) e.g.,Region(Moscow) & LargestPopulation(Moscow))", "all x y.((Moscow(x) & FederalDistrict(y) & LargestPopulation(y,x)) -> AdministrationCenter(x,y))", "all x.((Moscow(x) & AdministrativeCenter(x)) -> LargestPopulation(x))", "all x.(Moscow(x) -> AdministrativeCenter(x) & FederalDistrict(x) & LargestPopulation(x))", "all x.((Moscow(x) & AdministrativeCenter(x) & FederalDistrict(x)) -> LargestPopulation(x))", "(AdministrativeCenterHasLargestPopulation(Moscow) & FederalDistrict(Moscow))", "all x.((Moscow) & FederalDistrict(x) & LargestPopulation(x)) -> AdministrativeCenter(x))", "-(AdministrativeCenter(Moscow) & AdministrationCenter(Moscow) & FederalDistrict(Moscow) & LargestPopulation(Moscow))", "all x.(Moscow(x) -> DistrictAdminerativeCenter(x) & LargestPopulation(x))", "all x.(Moscow(x) -> (AdministrativeCenter(x) & FederalDistrict(x) & LargestPopulation(x)))", "Moscow is administrativecenter of largestpopulation(Moscow)", "all x.(Moscow(x) -> (AdministrativeCenter(x) | LargestPopulation(x)))", "all x.(Moscow(x) -> (AdministrativeCenter(x) & FederalDistrict(x) & LargestPopulation(x)))", "the administrative center of the federal district with the largest population.", "the administrativecenter(Moscow) & FederalDistrict(Moscow) & LargestPopulation(Moscow))", "(AdministrativeCenter(Moscow) & FederalDistrict(Moscow) & LargestPopulation(Moscow))"]}
{"id": "folio_train_2535", "nl": "The Northwestern federal district was established in 2000.", "fol": "WasEstablishedIn(Northwestern,2000)", "prediction": ["all x.(NebraskaFederalDistrict(x) -> EstablishedIn2000(x))", "FoundedIn2000, NorthwesternFederalDistrict(n)", "Originally established in 2000, NorthwesternFederalDistrict(n) -> EstablishedIn2000(n))", "Das Northwestern FederalDistrict wurde bereits in 2000 errichtet.", "All x.(NorthwesternFederalDistrict(x) -> EstablishedIn2000(x))", "Der NorthwesternFederalDistrict(NEW) -EstablishedIn2000(NEW)", "Das FederalDistrict(NearWillow,2000)", "The Northwestern FederalDistrict (NDD) & EstablishedIn2000.", "The NorthwesternFederalDistrict(n) he built in 2000.", "(NorwestFederalDistrict(NW) & EstablishedIn2000(NW))", "Located in Northwestern, North Dakota.", "(NorwestFederalDistrict(Nev.22000))", "Located in Northwestern, Illinois, NorthwesternFederalDistrict(e) & EstablishedIn2000(e))", "all x.(NordwesternFederalDistrict(x) -> EstablishedIn2000(x))", "all x.(NorthwestFederalDistrict(x) -> EstablishedIn2000(x))", "DernnysonFederalDistrict(Northwest) & EstablishedIn2000(Northwest)"]}
{"id": "folio_train_2536", "nl": "All cancers are malignant tumors.", "fol": "all x.(IsCancer(x) -> IsMalignantTumor(x))", "prediction": ["all x.(Cancer(x) -> MalignantTumor(x))", "all x.(Cancer(x) -> MalignantTumor(x))", "all x.(Cancer(x) -> MalignantTumor(x))", "all x.(Cancer(x) -> MalignantTumor(x))", "all x.(Cancer(x) -> MalignantTumor(x))", "all x.(Cancerous(x) -> MalignantTumor(x))", "all x.(Cancer(x) -> MalignantTumor(x))", "all x.(Cancer(x) -> MalignantTumor(x))", "all x.(Cancer(x) -> MalignantTumor(x))", "all x.(Cancer(x) -> MalignantTumor(x))", "all x.(Cancer(x) -> MalignantTumor(x))", "all x.(Cancer(x) -> MalignantTumor(x))", "all x.(Cancer(x) -> MalignantTumor(x))", "all x.(Cancer(x) -> MalignantTumor(x))", "all x.(Cancer(x) -> MalignantToxic(x))", "all x.(Cancer(x) -> MalignantTumor(x))"]}
{"id": "folio_train_2537", "nl": "No malignant tumor can be treated at home.", "fol": "all x.(IsMalignantTumor(x) -> -CanTreatAtHome(x))", "prediction": ["-exists x.(MalignantTumor(x) & -TreatsAtHome(x))", "KeenmalignantTumorCanBeTreatedAtHome(ke))", "-exists x.(malignantTumor(x) & TreatableAtHome(x))", "\u2013 Unlike malignanttumor(t) & TreatmentAtHome(t))", "all x.((MalignantTumor(x) & Home(x)) -> -CanBeTreatedAtHome(x))", "all x.((MalignantTumor(x) & -CanBeTreatedAtHome(x)) -> -CanBeTreatedAtHome(x))", "-exists x.(MalignantTumor(x) & TreatableAtHome(x))", "-exists x.(MalignantTumor(x) & TreatmentAtHome(x))", "-exists x.(malignantTumor(x) & TreatedAtHome(x))", "all x.((MalignantTumor(x) & -PositiveForHome(x)) -> -CanBeTreatedAtHome(x))", "all x.(CanTreat(x,Home) -> -malignantTumour(x))", "-exists x.(MalignantTumor(x) & UsedAtHome(x))", "-exists x.(MalignantTumor(x) & -TreatableAtHome(x))", "-exists x.(MalignantTumor(x) & -TreatAtHome(x))", "-exists x.(MalignantTumor(x) & TreatmentAtHome(x))", "-exists x.(MalignantTumor(x) & -CanBeTreatedAtHome(x))"]}
{"id": "folio_train_2538", "nl": "All colorectal cancer is cancer.", "fol": "all x.(IsColorectalCancer(x) -> IsCancer(x))", "prediction": ["all x.(ColorectalCancer(x) -> Cancer(x))", "all x.(ColorectalCancer(x) -> Cancer(x))", "all x.(CololateralCancer(x) -> Cancer(x))", "all x.(ColorectalCancer(x) -> Cancer(x))", "all x.(ColoredCancer(x) -> Cancer(x))", "all x.(ColorectalCancer(x) -> Cancer(x))", "all x.((ColorealCancer(x) & Cancer(x)) -> Is(x))", "all x.(CologectalCancer(x) -> Cancer(x))", "all x.(ColoredCancer(x) -> Cancer(x))", "all x.(ColoredCancer(x) -> Cancer(x))", "all x.(ColorectalCancer(x) -> Cancer(x))", "all x.(ColoredCancer(x) -> Cancer(x))", "all x.((ColoredCancer(x) & Cancer(x)) -> Cancer(x))", "all x.(ColorectalCancer(x) -> Cancer(x))", "all x.(ColoredCancer(x) -> Cancer(x))", "all x.(ColoredCancel(x) -> Cancer(x))"]}
{"id": "folio_train_2539", "nl": "Having a cold can be treated at home.", "fol": "all x.(HasCold(x) -> CanTreatAtHome(x))", "prediction": ["all x.(Cause(x) -> TreatableFromHome(x))", "all x.((SicklyCold(x) & TreatableAtHome(x)) -> GettingClean(x))", "all x.((Cold(x) & TreatableAtHome(x)) -> (Company(x) & TreatableAtHome(x)))", "all x.(Cold(x) -> TreatableAtHome(x))", "all x.(HearingCold(x) -> TreatableAtHome(x))", "all x.(Cold(x) -> TreatmentCof(x))", "exists x.(Cold(x) & TreatableAtHome(x))", "all x.(Clear(x) -> TreatableAtHome(x))", "all x.(Cold(x) -> CanBeTreatedAtHome(x))", "all x.(Cold(x) -> CanBeTreatedAtHome(x))", "exists x.(Cold(x) & TreatedAtHome(x))", "all x.((Cold(x) & TreatableAtHome(x)) -> InHouse(x))", "all x.(HasCold(x) -> CanBeTreatedAtHome(x))", "all x.(Clean(x) -> TreatableAtHome(x))", "all x.(HasCold(x) -> TreatableAtHome(x))", "all x.(Cold(x) -> TreatableAtHome(x))"]}
{"id": "folio_train_2540", "nl": "Breast cancer is neither having a cold nor a malignant tumor (exclusive).", "fol": "-((HasCold(BreastCancer) & -IsMalignantTumor(BreastCancer)) | (-HasCold(BreastCancer) & IsMalignantTumor(BreastCancer)))", "prediction": ["all x.(BertCancer(x) -> (NoCold(x) & -HasMalignantTumor(x)))", "all x.(BernCancerous(x) -> (-Cold(x) & -Malignant(x)))", "all x.(BreastCancer(x) -> (-Cold(x) | MalignantTumor(x)))", "all x y.((BertainCancer(x) & Cold(y)) | MalignantTumor(x,y)) -> -(Cold(x) | MalignantTumor(x,y)))", "all x.(BacterialCancer(x) -> ((NoCold(x) | MalignantTumor(x)) & -(Cold(x) & MalignantTumor(x)))))", "all x.(BertilizerCancer(x) -> (Negation(x,Cold) & -MalignantTumor(x)))", "all x.(BreakCancer(x) -> (Being(x,cold) | Being(x,malignant)))", "exists x.(Ber(x) & -InCold(x) & -InMalignant(x))", "(all x.(BreastCancer(x) -> (NotHasCold(x) | HasMalignantTumor(x))))", "all x.(BertilizedCancer(x) -> (NoneHasCold(x) & -HasMalignantTumor(x)))", "all x.(BreastCancer(x) -> (-Cold(x) | MalignantTumor(x)))", "all x.(BreakCancerous(x) -> (-(Cold(x) | Malignant(x))) & -(Cold(x) & Malignant(x))))", "all x.(BreakCancerous(x) -> ((HasCold(x) | HasMalignantTumorInExclusive(x))))", "all x.(BreastCancer(x) -> ((NeedsCold(x) | NeedsMalignantTumor(x)) & -(HasCold(x) | HasMalignantTumor(x))))", "all x.(BreastCancer(x) -> (NoCold(x) & -MalignantTox(x)))", "all x.(BreastCancer(x) -> (-Cold(x) | MalignantTumor(x)))"]}
{"id": "folio_train_2541", "nl": "Breast cancer can be treated at home.", "fol": "CanTreatAtHome(BreastCancer)", "prediction": ["all x.(BreastCancer(x) -> CanBeTreatedAtHome(x))", "All x.(BreastCancer(x) -> CanBeTreatedAtHome(x))", "all x.(BreastCancer(x) -> TreatableAtHome(x))", "all x.(BreastCancer(x) -> CanBeTreatedAtHome(x))", "all x.(BodyCancer(x) -> CanBeTreatedAtHome(x))", "all x.(BreastCancer(x) -> Treatment(x,Home))", "all x.(BertilCancer(x) -> CanBeTreatableAtHome(x))", "all x.(BreastCancer(x) -> TreatableAtHome(x))", "all x.(BreastCancer(x) -> CanBeTreatedAtHome(x))", "all x.(BeralCancer(x) -> CanBeTreatedAtHome(x))", "all x.(BreastCancer(x) -> CanBeTreatedAtHome(x))", "all x.(MarshCancer(x) -> CanBeTreatedAtHome(x))", "all x.(BreakCancerous(x) -> CanBeTreatedAtHome(x))", "all x y.((BreastCancer(x) & Home(y)) -> CanTreatAt(x,y))", "all x.(BreastCancer(x) -> TrainedAtHome(x))", "all x.(BreastCancer(x) -> (TreatsRelatively(x) & AsHome(x)))"]}
{"id": "folio_train_2542", "nl": "Breast cancer is colorectal cancer.", "fol": "IsColorectalCancer(BreastCancer)", "prediction": ["all x.(BreastCancer(x) -> ColorectalCancer(x))", "all x.(BreastCancer(x) -> ColorectalCancer(x))", "all x.(BreastCancer(x) -> ColorectalCancer(x))", "all x.(BreakStar(x) -> ColorectalCancer(x))", "all x.((BreathCancer(x) & ColorectalCancer(x)) -> Cancer(x))", "all x.(BreastCancer(x) -> ColorectalCancer(x))", "all x.(BreastCancer(x) -> ColorectalCancer(x))", "all x.(BroadcastCancer(x) -> ColorectalCancer(x))", "all x.(BreastCancer(x) -> ColorectalCancer(x))", "all x.(BreakCancerous(x) -> ColorectalCancer(x))", "all x.(BernConcentre(x) -> ColorectalCancer(x))", "all x.(BreakCancer(x) -> (ColorectalCancer(x)))", "all x.(BabyCancel(x) -> ColorectalCancer(x))", "all x.(BreastCancer(x) -> ColorectalCancer(x))", "all x.(BreakCancer(x) -> ColorectalCancer(x))", "all x.(BreastCancer(x) -> ColorectalCancer(x))"]}
{"id": "folio_train_2543", "nl": "Breast cancer is not colorectal cancer.", "fol": "-IsColorectalCancer(BreastCancer)", "prediction": ["(ColoredCancerous(breastCancerous)", "all x.(BreakCancerous(x) -> -ColorectalCancer(x))", "all x.(BreastCancer(x) -> -ColorectalCancer(x))", "all x.(BertilizedCancer(x) -> -ColomegatalCancer(x))", "exists x.(BreakCancerous(x) & -ColorectalCancerous(x))", "all x.(BreastCancer(x) -> -ColonialCancer(x))", "all x.(BreastCancer(x) -> -ColorectalCancer(x))", "-ColoredCancer(brastine)", "all x.(BreastCancer(x) -> -ColorectalCancer(x))", "all x.(BreastCancer(x) -> -ColorectalCancer(x))", "all x.(BrastCancer(x) -> -ColorectalCancer(x))", "all x.(Bertilis(x) -> -CololectalCancer(x))", "all x.(BreastCancer(x) -> -ColorectalCancer(x))", "all x.(BreastCancer(x) -> -ColorectalCancer(x))", "all x.(BreastCancer(x) -> -ColorectalCancer(x))", "all x.(BreakCancer(x) -> -ColodentalCancer(x))"]}
{"id": "folio_train_2544", "nl": "Breast cancer is colorectal cancer or a malignant tumor.", "fol": "(IsColorectalCancer(BreastCancer) | IsMalignantTumor(BreastCancer))", "prediction": ["all x.(BreastCancer(x) -> (ColoredCancerous(x) | MalignantTumor(x)))", "all x.(BreastCancer(x) -> (ColorectalCancer(x) | MalignantTumor(x)))", "all x.(BertilizedCancer(x) -> (ColoredCancer(x) | MalignantTumor(x)))", "all x.(BreastCancer(x) -> (ColorectalCancer(x) | MalignantTumor(x)))", "all x.(BreastCancer(x) -> ((ColorectalCancer(x) | MalignantTumor(x))))", "all x.(BertilizingCancer(x) -> (ColoredCancer(x) | MalignantTumor(x)))", "all x.(BreakClinic(x) -> (ColorectalCancer(x) | MalignantTumor(x)))", "all x.(BreshCancel(x) -> (ColorectalCancer(x) | MalignantTumor(x)))", "all x.(BreakCancerous(x) -> (ColorectalCancer(x) | MalignantTumor(x)))", "all x.(BreastCancer(x) -> (ColorectalCancerous(x) | MalignantTumor(x)))", "all x.(BreastCancer(x) -> (ColorectalCancer(x) | MalignantTumor(x)))", "all x.(BellectalCarcinoma(x) -> (ColonialCancer(x) | MalignantTumor(x)))", "all x.(BeralCancer(x) -> (ColorectalCancer(x) | MalignantTumor(x)))", "all x.(BreastCancer(x) -> (ColorectalCancer(x) | MalignantTumor(x)))", "all x.(Bertilizer(x) -> (ColorectalCancer(x) | MalignantTumor(x)))", "all x.(BreastCancer(x) -> (ColoxectalCancer(x) | MalignantTumor(x)))"]}
{"id": "folio_train_2545", "nl": "Breast cancer is colorectal cancer and a cancer.", "fol": "(IsColorectalCancer(BreastCancer) & IsCancer(BreastCancer))", "prediction": ["all x.(BreadCancer(x) -> (ColonotilCancer(x) & Cancer(x)))", "all x.(BreastCancer(x) -> (ColorectalCancer(x) & Cancer(x)))", "all x.(BreastCancer(x) -> (ColoredCancer(x) & Cancer(x)))", "all x.( BreastCancerous(x) -> (ColoredCancer(x) & Cancer(x)))", "all x.(BreastCancer(x) -> (ColorectalCancer(x) & Cancer(x)))", "all x.(BreastCancer(x) -> (ColorectalCancer(x) & Cancer(x)))", "all x.(BreakClinic(x) -> (ColorectalCancer(x) & Cancer(x)))", "all x.(BreastCancer(x) -> (ColorectalCancer(x) & Cancer(x)))", "all x.((BreastCancer(x) & ColorectalCancer(x)) -> Cancer(x))", "all x.(BreastCancer(x) -> (ColorealCancer(x) & Cancer(x)))", "all x.(BreakCancerous(x) -> (ColoredCancer(x) & Cancer(x)))", "all x.(BreastCancer(x) -> (ColoredCancer(x) & Cancer(x)))", "all x.(BreastCancer(x) -> (ColorectalCancer(x) & Cancer(x)))", "all x.(BreastCancer(x) -> (ColoredCancer(x) & Cancer(x)))", "all x.(BreastCancer(x) -> (ColorectalCancer(x) & Cancer(x)))", "all x.(BreastCancer(x) -> (ColorectalCancer(x) & Cancer(x)))"]}
{"id": "folio_train_2546", "nl": "If breast cancer is not colorectal cancer, then breast cancer is a malignant tumor.", "fol": "(-IsColorectalCancer(BreastCancer) -> IsMalignantTumor(BreastCancer))", "prediction": ["all x.((ColorectalCancer(x) & BreastCancer(x)) -> MalignantTumor(x))", "all x.((BreastCancer(x) & -ColorectalCancer(x)) -> MalignantTumor(x))", "all x.((BreakCancer(x) & -ColorectalCancer(x)) -> MalignantTumor(x))", "all x.((BreastCancer(x) & -ColorectalCancer(x)) -> MalignantTumor(x))", "all x.((MilignantTumor(x) & BreastCancer(x)) -> -ColorectalCancer(x))", "all x.((BreastCancer(x) & -ColorectalCancer(x)) -> MalignantTumor(x))", "all x y.((BreakCancer(x) & -ColoredCancer(y)) -> MalignantTumor(x))", "all x.((BreastCancer(x) & -ColorectalCancer(x)) -> MalignantTumor(x))", "all x.((BreastCancer(x) & -ColoredCancer(x)) -> MalignantTumour(x))", "all x.((BreastCancer(x) & -ColorectalCancer(x)) -> MalignantTumor(x))", "all x.((BreathCancerous(x) & -ColorectalCancer(x)) -> MalignantToxin(x))", "all x.((BreastCancer(x) & -ColoredCancer(x)) -> MalignantTumor(x))", "all x.((BreakCancerous(x) & -ColorectalCancer(x)) -> MalignantTumor(x))", "all x.((BreastCancer(x) & -CoronaryCancer(x)) -> MalignantTumor(x))", "all x.(NotColoredCancer(x) -> MalignantTumor(x))", "all x.((BreathCreb(x) & -ColorectalCancer(x)) -> MalignantTumor(x))"]}
{"id": "folio_train_2547", "nl": "I should not worry about things outside of my control.", "fol": "all x.(IsOutsideOfControl(x) -> -ShouldNotWorry(x))", "prediction": ["all x.((IsOutsideControl(x)? & -ShouldBoomAboutControl(x)) -> -Worry(x))", "all x.((Mom(x) & OutsideControl(x)) -> DoNotFootnotes(x))", "all x.((IsOutsideControl(x) & -MoreOfControl(x)) -> -OfControl(x))", "all x.((IsOutsideControl(x) & IsIsOutsideControl(x)) -> -MakingBreakingAlong(x))", "all x.((GasQuestions(x) & -OutsideControl(x)) -> -(GasQuestions(x) & -HasControl(x))))", "all x.((IsOutsideControl(x) & -WorryOf(x)) -> -ShouldBeHost(x))", "all x.((IsOutsideControl(x) -> -(ThingsOutsideControl(x) & -Conflicts(x)))", "all x.((Person(x) & OutsideControl(x)) -> -Problem(x))", "all x.((MyControl(x) & -Thema(x)) -> -Procrastinate(x))", "all x.((IsOutsideControl(x) & -Worry(x)) -> -MovementAvoidance(x))", "all x.((IsOutsideControl(x) & ShouldNotBeAngry(x)) -> -Worried(x))", "all x.((Movement(x) & -OutsideControl(x)) -> -Constante(x))", "all x.(RiskFree(x) -> (-ProblemsAboveControl(x)))", "all x.((IsOutsideControl(x) & -IsExtremeControl(x)) -> -Regulates(x,y))", "all x.((Foundation(x) & OutOfControl(x)) -> -BecarefulOf(x))", "all x.((Information(x) & OutsideOfControl(x)) -> -Negative(x))"]}
{"id": "folio_train_2548", "nl": "Traffic is outside of my control.", "fol": "all x.(IsTraffic(x) -> IsOutsideOfControl(x))", "prediction": ["all x.(Traffic(x) -> OutsideOfControl(x))", "all x.(Traffic(x) -> OutsideOfControl(x))", "all x.(Traffic(x) -> OutsideOfControl(x))", "all x.(Traffic(x) -> OutsideOfControl(x))", "all x.(Traffic(x) -> OutsideOfControl(x))", "all x.(Traffic(x) -> OutsideOfControl(x))", "all x.(Traffic(x) -> OutsideOfControl(x))", "mycontrol.Traffic(x) -> OutsideOfControl(x))", "all x.(Traffic(x) -> OutsideOfControl(x))", "all x.(Traffic(x) -> OutsideOfControl(x))", "all x.(Traffic(x) -> OutsideOfControl(x))", "all x.(Traffic(x) -> OutsideOfControl(x))", "all x.(Traffic(x) -> OutsideOfControl(x))", "all x.(TrafficOutsideMyControl(x) -> OutsideThanControl(x))", "all x.(Traffic(x) -> OutsideOfControl(x))", "all x.(Traffic(x) -> OutsideOfControl(x))"]}
{"id": "folio_train_2549", "nl": "I should not worry about traffic.", "fol": "all x.(IsTraffic(x) -> -ShouldNotWorry(x))", "prediction": ["all x.((Traffic(x) & -Traffic(y)) -> -MoreThanRequired(x,y))", "all x.(Traffic(x) -> -OfCaspers(x))", "all x.(Traffic(x) -> -CausesFearOf(x,Traffic))", "all x.(Cargo(x) -> -Find(x,Traffic))", "all x.(Knowledge(x) -> -Traffic(x))", "all x.(Traffic(x) -> IsNotHabitable(x))", "all x.(Traffic(x) -> -MoneyAbout(x,Traffic))", "all x.((Traffic(x) & -Blooms(x)) -> -Traffic(x))", "-WorryAboutTraffic(x))", "all x.((Traffic(x) & -Traffic(x)) -> -Briannounces(x))", "all x.(NecessityToTraffic(x) -> -Consumes(x))", "all x.(Traffic(x) -> -Problem(x))", "all x.((Traffic(x) & -Attention(x)) -> -PoorBeingOf(x,traffic))", "all x.(Traffic(x) -> -Warning(x))", "all x.(WorriesAboutTraffic(x) -> -WorriesAboutTraffic(x))", "all x.((Traffic(x) & -Blooming(x)) -> -GainMoneyBetween(x))"]}
{"id": "folio_train_2550", "nl": "Roversi is an Italian surname.", "fol": "all x.(UsesSurname(x,Roversi) -> IsItalianSurname(x))", "prediction": ["all x.(Roversi(x) -> ItalianSurname(x))", "(ItalianSurname(rooster) & ItalianName(rooster))", "all x.(Roversi(x) -> ItalianSurname(x))", "IsErrorsi(i)?", "All x.(Roversi(x) -> ItalianSurname(x))", "(ItalianSurname(roversi) & OriginsInDate(roversi))", "(ItalianSurname(Rogersi) & ItalianSurname(Rogersi))", "the Surname(Roversi) is Italian(Roversi))", "Der roversi ist ein italienischer Surname(roentsi)", "Surname(Roversi) & Italienischer(Roversi)", "(ItalianSurname(Rosersi) & ItalianSurname(Rorosi))", "is italianSurname(roversi)", "Roversi is an Italian surname.", "Espoora (ItalianSurname) & Name(Rotorsi))", "(ItalianSurname(Roversi) & ItalianSurname(Roversi))", "Roversi is an Italian surname."]}
{"id": "folio_train_2551", "nl": "Alba Roversi uses Roversi as a surname.", "fol": "UsesSurname(Alba,Roversi)", "prediction": ["all x.(AlbaRoversi(x) -> UsedAsSurname(x))", "all x.(AlbaRottersi(x) -> UsesRottersiAsSurname(x))", "all x.(AlbaRoversi(x) -> USEsRoversiAsSurname(x))", "all x.(AlbalRotary(x) -> (UsesRoversiAsSurname(x)))", "all x y.((AlbaRosensi(x) & Roversi(y)) -> UsesSurname(x,y))", "all x.(AlbaRoversi(x) -> Uses RoversiAsSurname(x))", "Alba Roversi uses RoversiAsSurname(x)", "AlbaRoversiUsesVarname(AlbertaRoversi)", "all x.(AlbaRoversi(x) -> UsesUse ofRurrorsi(x))", "all x.(AlbaRoversi(x) -> UsesRuroversi(x))", "all x.(AlbaRotorsi(x) -> UsesRotorsiAsSurname(x))", "all x.(AlbaRoversi(x) -> UsesRoversiAsSurname(x))", "all x.(AlbaRottersi(x) -> UsesRottersiAssurname(x))", "all x.(AlbaRosarian(x) -> UsesRosarianSurname(x))", "all x.(AlbalRoversi(x) -> UsesSurname(x,roversi))", "all x.(AlbaRoversi(x) -> UsesRoversiAsSurname(x))"]}
{"id": "folio_train_2552", "nl": "Paolo Roversi uses Roversi as a surname.", "fol": "UsesSurname(Paolo,Roversi)", "prediction": ["(UsesSurname(PaoloRoversi) -> UsesRoversi(Polipo))", "(Uses(Papelo(Roversi) & Uses(Papelo(Roversi))", "all x.((PaoloRoversi(x) & Roversi(x)) -> Surname(x))", "all x.(PosadoRoversi(x) -> UsesRoversiAsSurname(x))", "all x.(PaoloRogersi(x) -> UsesSurname(x,Rogersi))", "(Repo & Roversi(Posato))", "(Uses(PavloRoversi) & Roversi(Roversi))", "all x.(Rossi(x) -> UsesTheName(x,Rossi))", "all x.(Of(PopoloRoversi,CurrentName) -> Uses(Roversi,CurrentName))", "all x.(Rogorsi(x) -> UsesRogorsiAsSurname(x))", "(Surname(PapeloRogersi) -> UsesRogersi(PapeloRogersi))", "all x y.((Rodrigo(x) & Roversi(y)) -> UsedAsSurname(x,y))", "(UsesRossiRevvename(Popolo) & UsedAsSurname(Popolo))", "(UsesRoadrunners(PoloRoadrunner) -> UsingRoadrunner(PoloRoadrunner))", "all x.((Roseni(x) & Roversi(x)) -> Surname(x))", "all x.(Rosario(x) -> (Uses(x,Rosario) & Surname(x,Rosario)))"]}
{"id": "folio_train_2553", "nl": "Roberto Roversi uses Roversi as a surname.", "fol": "UsesSurname(Roberto,Roversi)", "prediction": ["all x.(Roversi(x) -> UsesVerrusiAsSurname(x))", "Roberto Roversi exists x.(Roversi(x) & UseRoversi(x))", "Roberto Roversi uses Roversi.", "all x y z.((RobertoRotorsi(x) & Roversi(y) & Surname(z)) -> Uses(x,y))", "all x.(RobertoRoversi(x) -> UsesRoversiAsSurname(x))", "all x.(RobertoRotrosi.((RobertoRotrosi) & UsesRotrosi(x)) -> Surname(x))", "all x.((RobertoRosensi(x) & Pap(r)) -> UsesRosensi(x))", "(UsesSurname(RobertoRottersi) & UsesSurname(RobertoRottersi))", "Roberto Roversi uses Roversi(x) -> Surname(x))", "all x.(Rodrigunos(x) -> UsesRodrigunos(x))", "all x y.((RobertoRosersi(x) & Roversi(y)) -> Surname(x,y))", "all x.(Racosin(x) -> UsesSurname(x,Rocketsi))", "(RedRotarian(Roberto) & UsesRotarian(Roberto))", "all x.(RobertoRosersiUsesRosersiAsSurname(x) -> UsesRosersiAsSurname(x))", "all x.(RobertoRoversi(x) -> UsesRoversiAsSurname(x))", "(USSupreme(RobertoRosertsi) & UsesRosertsi(Roberto))"]}
{"id": "folio_train_2554", "nl": "Paolo Roversi is a photographer.", "fol": "IsPhotographer(Paolo)", "prediction": ["all x.((PaoloRoversi(x) & Photographer(x)) -> Photosaver(x))", "all x.(Photographer(x) -> PaoloRottesi(x))", "Paolo Roversi (Photographer)", "Paolo Roversi is a photographer.", "Paolo Roversi is Photographer.", "Paolo Roversi is photographer.", "all x.(Photographer(x) -> PaoloRosersi(x))", "Paolo Roversi is Photographer.", "(Photographer(PotelloRotorsi))", "Paolo Roversi is a photographer.", "Paolo Roversi is a photographer.", "Paolo Roversi (Photographer)", "(Photographer(PavloRoversi)", "Paolo Roversi (Pablo(r) isaPhotographer)", "(Photographer(PaoloRoversi)", "Paolo Roversi(Pavlovo) & Photographer(Pavlovo)"]}
{"id": "folio_train_2555", "nl": "A photographer is a professional or an amateur.", "fol": "all x.((IsPhotographer(x) -> IsProfessional(x)) | IsAmateur(x))", "prediction": ["all x.(Photographer(x) -> (Professional(x) | Amateur(x)))", "all x.(Photographer(x) -> (Professional(x) | Amateur(x)))", "all x.(Photographer(x) -> (Professional(x) | Amateur(x)))", "all x.(Photographer(x) -> (Professional(x) | Amateur(x)))", "all x.(Photographer(x) -> (Professional(x) | Amateur(x)))", "all x.(Photographer(x) -> (Professional(x) | Amateur(x)))", "exists x.(Photographer(x) & (Professional(x) | Amateur(x)))", "all x.(Photographer(x) & (Professional(x) | Amateur(x)))", "all x.(Photographer(x) -> (Professional(x) | Amateur(x)))", "all x.(Photographer(x) -> (Professional(x) | Amateur(x)))", "all x.(Photographer(x) -> (Professional(x) | Amateur(x)))", "all x.(Photographer(x) -> (Professional(x) | Amateur(x)))", "all x.(Photographer(x) -> (Professional(x) | Amateur(x)))", "all x.(Photographer(x) -> (Professional(x) | Amateur(x)))", "all x.(Photographer(x) -> (Professional(x) | Amateur(x)))", "all x.(Photographer(x) -> (Professional(x) | Amateur(x)))"]}
{"id": "folio_train_2556", "nl": "Alba Roversi uses an Italian surname.", "fol": "IsItalianSurname(Alba)", "prediction": ["all x.(RosaryInTown(x) -> UsesItalianName(x))", "ALL x.(AlbaRoversi(x) -> UsesItaliansurname(x))", "all x.(AlbaRossi(x) -> UserOfItalianSurname(x))", "all x.(AlbaRoversi(x) -> UsedItalianSurname(x))", "all x y.((AlbaRoversi(x) & ItalianSurname(y)) -> Uses(x,y))", "all x y.((AlbaRovici(x) & ItalianSurname(y)) -> Uses(x,y))", "all x.(AlbaRoversi(x) -> UsesItalianSurname(x))", "(Uses(AlbaRotradorsi) | Uses(AlbaRotradorsis))", "Alba-Rossi, -ItalianSurname(Rossi))", "all x.(AlbaRoversi(x) -> UsesItalianSurname(x))", "all x.(AlbaRoversi(x) -> UsesItalianSurname(x))", "All x.(AlbaRoversi(x) -> UsesItalianSurname(x))", "all x.(AlbaRoyales(x) -> UsesItalianSurname(x))", "all x.(AlbaRoversi(x) -> UsesItalianSurname(x))", "all x.(AlbaRoversi(x) -> UsesItalianSurname(x))", "all x.(AlbaRoversi(x) -> UsesItalianSurname(x))"]}
{"id": "folio_train_2557", "nl": "There are no photographers using an Italian surname.", "fol": "-exists x.(IsPhotographer(x) & IsItalianSurname(x))", "prediction": ["No PhotographyWithItalianSurname(x)", "exists x.(Photographer(x) & UsesItalianSurname(x))", "exists x.(Photographer(x) & UsesItalianSurname(x))", "In this area, photographers are not using italian surname(x))", "-exists x.(Photographer(x) & UsesItalianSurname(x))", "-exists x.(Photographer(x) & ItalianSurname(x))", "-exists x.(Photographer(x) & UsesItalianSurname(x))", "in this section. There is no photographer usingItalianSurname(x)", "-exists x.(Photographer(x) & UsesItalianSurname(x))", "exists x.(Photographer(x) & UsesItalianSurname(x))", "-existes x.(Photographer(x) & UsesItalianSurname(x))", "-exists x.(Photographer(x) & UsesItalianSurname(x))", "exists x.(Photographer(x) & -UsesItalianSurname(x))", "exists x.(Photographer(x) & DoesItalianSurname(x))", "Il neexiste pas de photographes utilisantUnitedSurname(n)", "-exists x.(Photographer(x) & UsesItalianSurname(x))"]}
{"id": "folio_train_2558", "nl": "Paolo is an amateur photographer.", "fol": "(IsAmateur(Paolo) & IsPhotographer(Paolo))", "prediction": ["Paolo ist amateurPhotographer(Paulo)", "Paolo,amateurPhotographer, -WienOf(Paulo,Pablo))", "Paolo is amateurPhotographer.", "all x.(Pavo(x) -> amateurPhotographer(x))", "Paolo ist ein AmateurPhotographer.", "the photographer(Paolo)", "-AmateurPhotographer(x) & PaoloOsaka(x))", "Paolo ist ein AmateurPhotographer.", "Paolo is amateurPhotographer.", "Paolo ist ein AmateurPhotographer(Paolo)", "Paulo is amateurPhotographer (AmateurPhotographer)", "Paolo is amateurPhotographer(Paolo)", "Paolo ist ein AmateurPhotographer(Papello)", "Paolo is an amateurPhotographer.", "Paolo_Jennett(Palatino) & AmateurPhotographer(Palatino)", "Paolo ist AmateurPhotographer(Paolo)"]}
{"id": "folio_train_2559", "nl": "Zaha Hadid is a British-Iraqi architect, artist and designer.", "fol": "(IsBritish(ZahaHadid) & IsIraqi(Zahahadid) & IsArchitect(ZahaHadid))", "prediction": ["(IraqiArchitect(Zaha) & BritishIraqiArchitect(Zaha) & Artist(Zaha) & Architect(Zaha))", "(BritishIraqiArchitect(z) & BritishIraqi(z) & ArchitectAndArtist(z) & Designer(z))", "(BritishIraqiArchitect(ZahaHadid) & BritishIraqiArtist(ZahaHadid) & Designer(ZahaHadid))", "ZahaHadid (britainianIraqiArchitect(z) & BritishIraqiArtist(z) & Designer(z))", "((Architect(ZahaHadid) & BritishIraqiArchitect(Zaha)) | Artist(Zaha) & Designer(ZahaHadid))", "(British-IraqiArchitect(ZahaHadid) & BritishIraqiArtist(ZahaHacy) & Designer(ZahaHadid))", "(BritishIraqiArchitect(ZahaHadid) & BritishIraqiArtist(ZahaHadid) & Designer(ZahaHadid))", "(IraqiArchitect(ZahaHadid,42) & British(ZahaHadid,33)) & IraqiArchitect(ZahaHadid,51))", "(BritishIraqiArchitect(z) & TheTwelfthHadid(z)) & BritishIraqiArtist(z) & Designer(z))", "(BritishIraqiArchitect(ZahaHadid) & BritishIraqiArtist(ZahaHadid) & Designer(ZahaHadid))", "((BritishIraqiArchitect(z) & ZahaHadid(z)) | BritishIraqiArtist(z) & Designer(z)))", "(BritishIraqiArchitect(ZahaHadid) | BritishIraqiArtist(ZahaHadid) | Designist(ZahaHadid))", "(BritishIraqiArchitect(ZahaHadid) & BritishIraqiArtistAndDesigner(ZahaHadid)", "(IraqiBritishArchitect(ZahaHadid) & BritishIraqiArtist(ZahaHadid) & Designer(ZahaHadid))", "all x.((BritishIraqiArchitect(x) & Artist(x) & Designer(x)) -> ZahaHadid(x))", "all x.((Architect(x) & IraqiArchitect(x)) -> (Architect(x) & Artist(x) & Designer(x)))"]}
{"id": "folio_train_2560", "nl": "Zaha Hadid was born on 31 October 1950 in Baghdad, Iraq.", "fol": "BornInLocation(ZahaHadid,Iraq,Y1950)", "prediction": ["(BirthDay(ZahaHadid) & BornOn31Oct1950(ZahaHadid,31) & BornInBaghdad(ZahaHadid,31) & BornInIraq(ZazaHadid))", "ZahaHadid (birthOfAvril(Zhaha) & BornOn31October50(ZahriaHadid))", "Zaha Hadid was born on 31October(ZahaHadid(Zaha) & BornInBaghdadInIraq(ZahaHadid))", "(BirthOn31Oct1950(ZahaHadid) & BornInBaghdad(ZahaHadid))", "(Birth(ZahaHadid) & BornOn31October50(ZahaHadid,Baghdad,Iraq))", "ZahaHadid(ZahaHadid) was born on 31Oct1950,Bahdad(Iraq)", "Zaha Hadid (born 30October1950) & BornIn(Zahra Hadid,Iraq),Saudistan,Iraq))", "(Birth(Zaza Hadid,31Oct1950) & BornIn(ZahaHadid,Iraq))", "Zaha Hadid was born on 31Oct1950 & BornInBaghdad,Iraq;", "(BirthOfHadid(ZahaHadid,31October50,Baghdad) & BornInIraq(ZahaHadid,31October50))", "Zaha Hadid was born on 31October50 in Baghdad,Iraq.", "(Birth(z) : 31Oct1950(z) & BaghdadIraq(z))", "(Birth(ZahaHadid) - BornOn31October50(ZahaHadid) & BornInIraq(ZahaHadid, Iraq)))", "Zaha Hadid was born on 31 October 1950 in Baghdad,Iraq.", "(Birth(ZahaHadid,31Sept3050) | Born(ZahaHadid,31Oct1950),Bangdad,Iraq))", "(ZahaHadidBirth(ZahaHadid) -> BornOn31October50(ZahaHadid))"]}
{"id": "folio_train_2561", "nl": "Hadid was a visiting professor of Architectural Design at the Yale School of Architecture.", "fol": "IsVisitingProfessorAt(ZahaHadid,YaleSchoolofArchitecture)", "prediction": ["Hadid is a visitingProfessorOfArchitecturalDesignAtYaleSchoolOfArchitecture(Hadid,Faculty&SchoolOfArchitecture(Hadid))", "Hadid was visitingProfessorOfArchitecturalDesign(Hadid,YaleSchoolOfArchitecture)", "Dr. Hadid visited the Yale School of Architecture as Professors(Hadid,ArchitecturalDesign)", "Hadid was visitingProfessorOfArchitecturalDesign(Hadid,YaleSchoolOfArchitecture)", "Hadid was lecturingProfessorOfArchitecturalDesignAtYaleSchoolOfArchitecture(Hadid,2004)", "Hadid was visitingProfessorOfArchitecturalDesign(Hadid,YaleSchoolOfArchitecture)", "Hadid was visitingProfessorOfArchitecturalDesign(Hadid) & YaleSchoolOfArchitecture(Hadid)", "Hadid was visitingProfessorOfArchitecturalDesign(Hadid,YaleSchoolOfArchitecture)", "Hadid was visitingprofessorOfArchitecturalDesignAtJamesSchoolOfArchitecture(Hadid,Yale SchoolOfArchitecture)", "Hadid is a visitingProfessorOfArchitecturalDesign(Hadid, Yale SchoolOfArchitecture)", "Hadid was visitingProfessorOfArchitecturalDesignAndAdvanced(Hadid,YaleSchoolOfArchitecture)", "Hadid was VisitingProfessor(Hadid,ArchitecturalDesign) & AtYaleSchoolOfArchitecture(Hadid)", "Hadid was visitingProfessorOfDesignAndDesign(Hadid)", "Hadid was visitingProfessorOfArchitecturalDesign(Hadid,YaleSchoolofArchitecture)", "(VisitingProfessor(Hadid,ArchitecturalDesign) & Yale SchoolOfArchitecture(Hadid,ArchitecturalDesign))", "both sexes liaising at the Yale School of Architecture."]}
{"id": "folio_train_2562", "nl": "Max is an aspiring architecture student, and he plans to apply to Yale School of Architecture. ", "fol": "(IsAspiringArchitectureStudent(Max) & PlansToApplyToSchool(Max,YaleSchoolofArchitecture))", "prediction": ["(AspiringArchitecturalStudent(Max) & PlansToApplyTo(Max,Yale SchoolOfArchitecture))", "all x y.((AspiringArchitectureStudent(x) & Max(y)) -> PlansToApplyTo(x,y))", "(AssiduatingArchitectureStudent(Max) & PlansToApplyToYale SchoolOfArchitecture(Max))", "(AspiringArchitecturalStudent(Max) & PlansToApplyToYaleSchoolOfArchitecture(Max))", "is AspiredArchitecturalStudent(Max) & PlansToApplyForYaleSchoolOfArchitecture(Max))", "(AspiringArchitecturStudent(Max) & PlansApplyToYaleSchoolOfArchitecture(Max))", "(AspiringArchitectureStudent(Max) & PlansToApplyToYaleSchoolOfArchitecture(Max))", "(AspirationalArchitectureStudent(Max) & PlansToAppointToYale SchoolOfArchitecture(Max))", "(AspiringArchitectureStudent(Max) & PlanesToApplyToYaleSchoolOfArchitecture(Max))", "(AspiringArchitectureStudent(Max) & PlansToApplyToYaleSchoolOfArchitecture(Max))", "(AspiringArchitecturalStudent(Max) & PlansToApplyLaw@YaleSchoolOfArchitecture(Max))", "(AspiringArchitecturalStudent(Max) & PlansToApplyToYanleeSchoolOfArchitecture(Max))", "(AspiringArchitectureStudent(Max) & PlansToApplyToYaleSchoolOfArchitecture(Max))", "(AspiringArchitecturalStudent(Max) & PlansToAcquireToYaleSchoolOfArchitecture(Max))", "(AspiringArchitectureStudent(Max) & PlansApplyToYaleSchoolOfArchitecture(Max))", "(AspiringArchitecturalStudent(Max) & PlansToApplyToYaleSchoolOfArchitecture(Max))"]}
{"id": "folio_train_2563", "nl": "Hadid was born in Iraq, and became a UK citizen later in her life.", "fol": "exists x.(BornInLocation(ZahaHadid,Iraq,x) & IsBritish(ZahaHadid))", "prediction": ["(Birth(Hadid,Iraq) & UKCitizen(Hadid,UK))", "(BirthAnonymousInIraq(Hadid,UK) & BornInIraq(Hadid,UK))", "(Birth(Hadid,Iraq) & UKCitizen(Hadid,UK))", "all x.(Hadid(x) -> (BornInIraq(x) & UKCitizen(x)))", "(BirthInIraq(Hadid,UK) & BornInIraq(Hadid) & CitizenOfUK(Hadid,UK))", "all x.(Hadid(x) -> (BirthArea(x,Iraq) & BecomesUKCitizen(x,UK)))", "(BirthEyedInIraq(Hadid) & UKCitizen(Hadid) & LaterInLife(Hadid))", "Hadid was born in Iraq, and became UKCitizen(Hadid) later in her life.", "(BirthInIraq(Hadid,Iraq) & becameUKCitizen(Hadid,UK))", "(BirthToMadam.AidAlthoughBornInIraq(Hadid) & UKCitizen(Hadid))", "(bornInIraq) & UKCitizen(Hadid)", "all x.(Hadid(x) -> (BirthInIraq(x) & BecameUKCitizen(x)))", "all x.(Hadid(x) -> (BecameInIraq(x,y) & UKCitizen(x,z)))", "is a UK Citizen(Hadid)", "all x.(Hadid(x) -> (BirthOfIraq(x) & BecomesUKCitizen(x)))", "(BornInIraq(Hadid) & UKCitizen(Hadid))"]}
{"id": "folio_train_2564", "nl": "Hadid did some work in interior design.", "fol": "DidWorkIn(ZahaHadid,InteriorDesign)", "prediction": ["Hadid did some work in interiordesign.", "all x.(Hadid(x) -> DidInteriorDesign(x))", "all x.(Hadid(x) -> DidInteriorDesign(x))", "(AdidasInteriorDesign(Hadid)", "Hadid did some work in InteriorDesign.", "all x.(Hadid(x) -> DidArtInInteriorDesign(x))", "Hadid did some work in interiordesign.", "Hadid did some interiordecoration work.", "-(Hadid(Hadid) & InteriorDesign(Hadid))", "-Discourse(hadid)", "Hadid did some work in interiordesign.", "Hadid (DailyWorkShelving)", "Hadid made some work in interior design.", "(Hadid(Hadid) & InteriorDesign(Hadid))", "-HadidInteriorDesign(Hadid)", "Hadid has done some work in interior design (WroteInsideDesign(Hadid) & DecorativeDesign(Hadid))"]}
{"id": "folio_train_2565", "nl": "Hadid was born in 1982.", "fol": "exists x.BornInLocation(Hadid,x,1982)", "prediction": ["Hadid was born in 1982.", "Hadid was born in 1982.", "Hadid was born in 1982.", "born in 1982, Hadid Gregorian Birthday(Hosanna)", "Hadid was born in 1982.", "Hadid was born in 1982.", "Hadid w.((BirthOnBirthIn(x,1986)) -> BornIn(x,9))", "Hadid was born in 1982.", "Hadid was born in 1982.", "Hadid (Birth(Haid,82))", "Hadid was born in 1982.", "Hadid was born in 1982.", "(Birth(Hadid) & BornIn(Hadid, 1982))", "(Birth(Hadid) & BornIn(Hadid,82))", "Hadid was born in 1982.", "Hadid was born in 1982."]}
{"id": "folio_train_2566", "nl": "Max admires Zaha Hadid.", "fol": "Admires(Max,ZahaHadid)", "prediction": ["(Appreciates(Max,ZahaHadid))", "(Excuses(Max,ZahaHadid))", "(Attracts(Max,Zaha) & Hadid(Max))", "(awesomesZahaHadid(Max))", "Max admiresZahaHadid.", "Dermot admiresHadid(Max)", "& AdmiresZakaHadid(Max)", "(Appreciates(Max,ZachaHadid) | Admires(Max,ZahaHadid)))", "(Awesome(Max) -> AdmiresZahaHadid))", "(DateMachine(Max) & AdmiresZahaHadid(Max))", "(Awesome(Max,Gaha(Max))", "(Appreciates(Max,ZahaHadid))", "The admiration of Max for Zaha Hadid.", "Max admiresDavidHadid(x)", "(Despises(Max,Zaha) & Hadid(Max))", "(AwesomeSahaHadid(Max))"]}
{"id": "folio_train_2567", "nl": "Something is either an invasive neuroimaging technique or a noninvasive neuroimaging technique. ", "fol": "all x.((InvasiveNeuroimaging(x) & -NoninvasiveNeuroimaging(x)) | (-InvasiveNeuroimaging(x) & NoninvasiveNeuroimaging(x)))", "prediction": ["is (InvasiveNeuroimaging(x) | NoninvasiveNeuroimaging(x)))", "all x.((FiberTechnique(x) | NoninvasiveTechnique(x)) -> (InvasiveNeuroimaging(x) | IncrementalNeuroimaging(x)))", "all x.((InvasiveNeuroimagingTechnique(x) | NoninvasiveNeuroimagingTechnique(x)) -> exists y.(InvasiveNeuroimagingTechnique(y) & InvasiveNeuroImagingTechnique(y)))", "all x.((InvasiveNeuroimaging(x) | NoninvasiveNeuroimaging(x))) -> (InvasiveNeuroimaging(x) | NoninvasiveNeuroimaging(x)))", "all x.(NeuroimagingTechnique(x) | Noninvasive(x))", "all x.((InvasiveNeuroimagingTechnique(x) | NoninvasiveNeuroimagingTechnique(x)) -> (InvasiveNeuroimagingTechnique(x) & NoninvasiveNeuroimagingTechnique(x)))", "all x.((InvasiveNeuroImagingTechnique(x) | NonInvasiveNeuroimagingTechnique(x)) -> (InvasiveNeuroImagingTechnique(x) | NonInvasiveNeuroimagingTechnique(x)))", "all x.((InvasiveNeurologist(x) | NoninvasiveNeurologist(x)) -> (InvasiveNeurologist(x) | -InvasiveNeurologist(x)))", "all x.(InvasiveNeuroimagingTechnique(x) | NoninvasiveNeuroimagingTechnique(x))", "all x.((NeuroimagingTechnique(x) & Noninvasive(x)) -> (Invasive(x) | Noninvasive(x)))", "all x.((NeuroimagingTechnique(x) | NoninvasiveTechnique(x)) -> (Invasive(x) | Noninvasive(x)))", "all x.((InvasiveNeuroimagingTechnique(x) | NoninvasiveNeuroimagingTechnique(x)) -> Available(x))", "(InvasiveNeuroimagingTechnique(x) | NoninvasiveNeuroimagingTechnique(x))", "all x.((Treatment(x) & InvasiveNeuroimagingTechnique(x)) | NonInvasiveNeuroimagingTechnique(x))", "all x.(NeuroimagingTechnique(x) | NoninvasiveNeuroimagingTechnique(x))", "all x.((NeuroimagingTechnique(x) | NoninvasiveTechnique(x)) -> (Invasive(x) | Noninvasive(x))))"]}
{"id": "folio_train_2568", "nl": "All noninvasive neuroimaging techniques provide a spatial resolution of brains.", "fol": "all x.(NoninvasiveNeuroimaging(x) -> ProvidesSpatialResolution(x))", "prediction": ["all x y.((NoninvasiveNeuroimagingTechnique(x) & Brain(y)) -> ProvidesSpatialResolution(x,y))", "all x.(NoninvasiveNeuronimagingTechnique(x) -> ProvidesSpatialResolution(x))", "all x y.((NonInvasiveNeuroimagingTechnique(x) & Brains(y)) -> ProvidesSpatialResolution(x,y))", "all x.((NoninvasiveNeuroimagingTechnique(x) & ProvidesSpatialResolution(x)) -> BrainResolution(x))", "all x.(NoninvasiveNeuroimagingTechnique(x) -> ProvidesSpatialResolutionOfBrains(x))", "all x.((NonInvasiveNeuroimaging(x) & NeuroimagingTechnique(x)) -> ProvidesSpatialResolution(x,Brains))", "all x.(NoninvasiveNeuroimagingTechnique(x) -> ProvidesSpatialResolutionOfBrains(x))", "all x.(NoninvasiveNeuroimagingTrend(x) -> ProvidesSpatialResolution(x))", "all x.(NonInvasiveNeuroimagingTechnique(x) -> ProvidesSpatialResolutionOfBrains(x))", "all x.(NoInvasiveNeuroimagingTree(x) -> ProvidesSpatialResolution(x))", "all x.((NoninvasiveNeuroimagingTechnique(x) & ProvidesSpatialResolution(x)) -> BrainResolution(x))", "all x.(NonInvasiveNeuroimagingTechnique(x) -> ProvidesSpatialResolution ofBrains(x))", "all x.(NoninvasiveNeuroimagingTechnique(x) -> ProvidesSpatialResolution(x))", "all x.(NoninvasiveNeuroimaging(x) -> ProvidesSpatialResolutionOfBrains(x))", "all x.((NoninvasiveNeuroimagingTechnique(x) & ProvidesSpatialResolution(x,Brains)) -> ProvidesDisplay(x,Brains))", "all x.(NoninvasiveNeuroimagingTechnique(x) -> ProvidesSpatialResolution(x))"]}
{"id": "folio_train_2569", "nl": "If a technique provides a spatial resolution of brains, then it is a measurement of brain activity. ", "fol": "all x.(ProvidesSpatialResolution(x) -> BrainActivityMeasurement(x))", "prediction": ["all x y.((Technique(x) & ProvidesSpatialResolution(x) & Brain(y)) -> MeasuresBrainActivity(x))", "all x.((Technique(x) & ProvidesSpatialResolution(x)) -> MeasurementOfBrainActivity(x))", "all x.((Technique(x) & ProvidesSpatialResolutionOfBrains(x)) -> MessagingBrainActivity(x))", "all x y.((Technique(x) & ProvidesSpatialResolutionOfBrains(x) & ProvidesElements(x,y)) -> MeasurementOfBrainActivity(y))", "all x.((Technique(x) & ProvidesSpatialResolutionOfBrains(x)) -> MeasurementOfBrainActivity(x))", "all x.((Technique(x) & ProvidesSpaceraryResolutionOfBrains(x)) -> MeasurementsBrainActivity(x))", "all x.(ProvidesSpatialResolutionOfBrains(x) -> MeasurementOfBrainActivity(x))", "all x.((Technique(x) & ProvidesSpatialResolutionOfBrains(x)) -> MeasurementOfBrainActivity(x))", "all x.(ProvidesSpatialResolutionOfBreaks(x) -> MeasurementOfBrainActivity(x))", "all x.((Technique(x) & ProvidesSpatialResolution(x) & Brains(x)) -> MeasurementOfBrainActivity(x))", "all x.((Technique(x) & ProvidesSpatialResolutionOfBrains(x)) -> MeasurementOfBrainActivity(x))", "all x.((Technique(x) & ProvidesSpatialResolutionOnBrains(x)) -> MeasurementOfBrainActivity(x))", "all x.((Technique(x) & ProvidesSpatialResolution(x) & Brain(x)) -> MeasurementOfBrainActivity(x))", "all x.((Technique(x) & ProvidesSpatialResolutionOfBrains(x)) -> MeasurementOfBrainActivity(x))", "all x.((Technique(x) & ProvidesSpatialResolutionOfBrains(x)) -> MeasurementOfBrainActivity(x))", "all x.((Technique(x) & ProvidesSpatialResolution(x)) -> MeasurementOfBrainActivity(x))"]}
{"id": "folio_train_2570", "nl": "All measurements of brain activity are used by neuroscience researchers.", "fol": "all x.(BrainActivityMeasurement(x) -> UsedByResearchers(x))", "prediction": ["all x.(MeasurementsOfBrainActivity(x) -> UsedByNeuroscientists(x))", "all x.(DomesticDetail(x) -> UsedByNeuroscienceResearchers(x))", "all x.(MeasurementsOfBrainActivity(x) -> UsedByNeuroscienceResearchers(x))", "all x.((MeasurementsOfBrainActivity(x) & UsedBy(x)) -> NeuroscienceResearcher(x))", "all x y.((Measurement(x) & BrainActivity(y)) -> UsedByNursevityResearchers(x,y))", "all x.(MeasurementsOfBrainActivity(x) -> UsedByNurseyResearchers(x))", "all x.(MeasurementsOfBrainActivity(x) -> UsedByNeuroscienceResearchers(x))", "all x.((MeasurementsOfBrainActivity(x) & UsedByNeurologyResearchers(x)) -> Uses(x,Meanings))", "all x y.((Measurement(x) & BrainActivity(x)) -> UsedBy(x,y))", "all x y.((MeasurementOfBrainActivity(x) & NeuroscienceResearcher(y)) -> UsedBy(y,x))", "all x.(MeasurementOfBrainActivity(x) -> UsedByNeurologyResearchers(x))", "all x.(MetabolicMeasurementsOfBrainActivity(x) -> UsedByNeurologyResearchers(x))", "all x.(MeasurementOfBrainActivity(x) -> UsedByNursesResearchers(x))", "all x.(MeasurementOfBrainActivity(x) -> UsedByNeuroscienceResearchers(x))", "all x.(MeasurementOfBrainActivity(x) -> UsedByNeuroscienceResearchers(x))", "all x.(MoonCognition(x) -> UsedByNeurologyResearchers(x))"]}
{"id": "folio_train_2571", "nl": "FMRI is either a measurement of brain activity or a noninvasive neuroimaging technique.", "fol": "((BrainActivityMeasurement(FMRI) & -NoninvasiveNeuroimaging(FMRI)) | (-BrainActivityMeasurement(FMRI) & NoninvasiveNeuroimaging(FMRI)))", "prediction": ["all x.(FMRI(x) -> (MeasurementOfBrainActivity(x) | NonInvasiveNeuroimaging(x)))", "all x.(FMRI(x) -> (MeasuresBrainActivity(x) | NoninvasiveNeuroimagingTechnique(x)))", "all x.(FMRI(x) -> (MeasuresBrainActivity(x) | NonInvasiveNeuroimaging(x)))", "all x.(FMRI(x) -> (MeasuresBrainActivity(x) | NonInvasiveNeuroimaging(x)))", "all x.(FMRI(x) -> (MeasuresBrainActivity(x) | NoninvasiveNeuroimagingTechnique(x)))", "all x.(FMRI(x) -> (MeasuresBrainActivity(x) | NoninvasiveNeuroimagingTechnique(x)))", "all x y.((FMRI(x) & MeasurementOfBrainActivity(x)) | NonInvasiveNeurogenGynecology(y)) -> (-MeasuresBrainActivity(x) | NonInvasiveNeurogena(y)))", "all x.(FMRI(x) -> (MeasurementOfBrainActivity(x) | NonInvasiveNeuroimagingTechnique(x)))", "all x.(FMRI(x) -> (MeasuresBrainActivity(x) | NonInvasiveNeuroimagingTechnique(x)))", "all x.(FMRI(x) -> (MeasurementOfBrainActivity(x) | NoninvasiveNeuroimagingTechnique(x)))", "all x.(FMRI(x) -> (MeasurementOfBrainActivity(x) | NonInvasiveNeuroimaging(x)))", "all x.(FMRI(x) -> (MeasuresBrainActivity(x) | NoninvasiveNeuroimagingTechnique(x)))", "all x.(FMRI(x) -> (MeasuresBrainActivity(x) | NoninvasiveNeurogenImagingTechnique(x)))", "all x.(FMRI(x) -> (MeasurementOfBrainActivity(x) | NonInvasiveNeuroimagingTechnique(x)))", "all x.(FMRI(x) -> (MeasuresBrainActivity(x) | NonInvasiveNeuroimagingTechnique(x)))", "all x.(FMRI(x) -> ((MeasuresBrainActivity(x) | NonInvasiveNeuroimagingTechnique(x))))"]}
{"id": "folio_train_2572", "nl": "FMRI provides a spatial resolution of brains.", "fol": "ProvidesSpatialResolution(FMRI)", "prediction": ["all x.(FMRI(x) -> ProvidesSpatialResolutionOfBrains(x))", "all x.(FMRI(x) -> ProvidesSpatialResolutionOfBrains(x))", "all x.(FMRI(x) -> ProvidesSpatialResolutionOfBrains(x))", "all x.(FMRI(x) -> ProvidesSpatialResolutionOfBrains(x))", "all x y.((FMRI(x) & Brain(y)) -> ProvidesSpatialResolution(x,y))", "all x.(FMRI(x) -> ProvidesSpatialResolutionOfBrains(x))", "all x.(FMRI(x) -> ProvidesSpatialResolutionOfBrains(x))", "all x.((FMRI(x) & ProvidesSpatialResolution(x)) -> Brains(x))", "all x.(FMRI(x) -> ProvidesSpatialResolutionOfBrains(x))", "all x.(FMRI(x) -> ProvidesSpatialResolutionOfBrains(x))", "all x.(FMRI(x) -> ProvidesSpatialResolutionOfBrains(x))", "all x.(FMRI(x) -> ProvidesSpatialResolutionOfBrains(x))", "all x y.((FMRI(x) & Brain(y)) -> ProvidesSpatialResolution(x,y))", "all x.(FMRI(x) -> ProvidesSpatialResolution(x))", "all x.(FMRI(x) -> ProvidesSpatialResolutionOfBrains(x))", "all x.(FMRI(x) -> FurnishesSpatialResolutionOfBrains(x))"]}
{"id": "folio_train_2573", "nl": "FMRI is an invasive neuroimaging technique and is used by neuroscience researchers.", "fol": "(InvasiveNeuroimaging(FMRI) & UsedByResearchers(FMRI))", "prediction": ["all x.(FMRI(x) -> (InvasiveNeuroimagingTechnique(x) & UsedByNeurologyResearchers(x)))", "all x.(FMRI(x) -> (InvasiveNeuroimagingTechnique(x) & UsedByNeurologyResearchers(x)))", "all x y.((FMRI(x) & NeuroimagingTechnology(y) & NeuroscienceResearcher(z)) -> Invasive(x,y))", "all x.(FMRI(x) -> (InvasiveNeuroimaging(x) & UsedByNeurologyResearchers(x)))", "all x.(FMRI(x) -> (InvasiveNeuroimagingTechnique(x) & UsedByNeurologist(x)))", "all x.(FMRI(x) -> (InvasiveNeuroimagingTechnique(x) & UsedByNeurologyResearchers(x)))", "all x y.((FMRI(x) & NeuroimagingTechnique(y)) -> (Invasive(x,y) & UsedBy(x,neurologist)))", "all x.(FMRI(x) -> (InvasiveNeuroimagingTechnique(x) & UsedByNeurologyResearchers(x)))", "all x y.((FMRI(x) & NeuroimagingTechnique(y)) -> (Invasive(x,y) & UsedBy(x,neuroscientifics)))", "all x.(FMRI(x) -> (InvasiveNeuroimagingTechnique(x) & UsedByNeurologyResearchers(x)))", "all x.(FMRI(x) -> (InvasiveNeurotonimagingTechnique(x) & UsedByNeurologyResearchers(x)))", "all x y.((FMRI(x) & NeuroimagingTechnique(y)) -> (Invasive(x,y) & UsedBy(x,y)))", "all x.(FMRI(x) -> (InvasiveNeuroimagingTechnique(x) & UsedByNeuroscientifics(x)))", "all x y.((FMRI(x) & NeuroimagingTechnique(y)) -> Invasive(x,y))", "all x.(FMRI(x) -> (InvasiveNeuroimagingTechnique(x) & UsedByNeurologyResearchers(x)))", "all x.(FMRI(x) -> (InvasiveNeuroimagingTechnique(x) & UsedByNeurologyResearchers(x)))"]}
{"id": "folio_train_2574", "nl": "FMRI is either an invasive neuroimaging technique or is used by neuroscience researchers.", "fol": "(InvasiveNeuroimaging(FMRI) | UsedByResearchers(FMRI))", "prediction": ["all x.(FMRI(x) -> (InvasiveNeuroimagingTechnique(x) | UsedByNeurologicalResearchers(x)))", "all x.(FMRI(x) -> (InvasiveNeuroimagingTechnique(x) | UsedByNeurologyResearchers(x)))", "all x y.((FMRI(x) & NeuroimagingTechnique(z)) -> (Invasive(z) | UsedBy(x,y)))", "all x.(FMRI(x) -> (InvasiveNeuroimagingTechnique(x) | UsedByNeurologyResearchers(x)))", "all x.(FMRI(x) -> (InvasiveNeuroimagingTechnique(x) | UsedByNeurologyResearchers(x)))", "all x.(FMRI(x) -> (InvasiveNeuroimagingTechnique(x) | UsedBy(x,neurologyResearcher)))", "all x.(FMRI(x) -> (InvasiveNeurologicImagingTechnique(x) | UsedByNeurologyResearchers(x)))", "all x.(FMRI(x) -> (InvasiveNeuroimagingTechnique(x) | UsedByNeurologyResearchers(x)))", "all x.(FMRI(x) -> (InvasiveNeuronimagingTechnique(x) | UsedByNeurologyResearchers(x)))", "all x.(FMRI(x) -> (InvasiveNeuroimagingTechnique(x) | UsedByNeurologyResearchers(x)))", "all x.(FMRI(x) -> (InvasiveNeuroimagingTechnique(x) | UsedByNeuroscientifics(x)))", "all x.(FMRI(x) -> (InvasiveNeuroimagingTechnique(x) | UsedByNeurologyResearchers(x)))", "all x y.((FMRI(x) & NeuroimagingTechnique(y)) -> (Invasive(x,y) | UsedBy(x,y)))", "all x.(FMRI(x) -> (InvasiveNeuroimagingTechnique(x) | UsedByNeurologyResearchers(x)))", "all x y.((FMRI(x) & Researcher(y)) -> (InvasiveNeuroimagingTechnique(x) | UsedBy(y,z)))", "all x.(FMRI(x) -> (InvasiveNeuroimagingTechnique(x) | UsedByNeurologyResearchers(x)))"]}
{"id": "folio_train_2575", "nl": "If fMRI is not an invasive neuroimaging technique and used by neuroscience researchers, then fMRI is neither a noninvasive neuroimaging technique nor provides a spatial resolution of brains.", "fol": "((NoninvasiveNeuroimaging(FMRI) & UsedByResearchers(FMRI)) -> (-InvasiveNeuroimaging(FMRI) & -ProvidesSpatialResolution(FMRI)))", "prediction": ["all x.((InvasiveNeuroimagingTechnique(x) & UsedByNeurology(x)) -> (-NonInvasiveNeuroimagingTechnique(x) & -ProvidesSpatialResolutionOfBrains(x)))", "all x.((FMRI(x) & -InvasiveNeuroimagingTechnique(x) & UsedByNeurologyResearchers(x)) -> -NoninvasiveNeurology(x) & -SocialResolutionOfBirds(x))", "all x.((FMRI(x) & -InvasiveNeuroimagingTechnique(x) & UsedByNeurologyResearchers(x)) -> (-NoninvasiveNeuronimagingTechnique(x) & -ProvidesSpatialResolutionOfBrains(x)))", "all x.((FMRI(x) & -InvasiveNeuroimagingTechnology(x) & UsedByNeurologyResearchers(x)) -> -NonInvasiveNeuroimagingTechnology(x) & -SpatialResolution(x))", "all x.((FMRI(x) & -InvasiveNeuronalImagingTechnique(x) & UsedByNeurologyResearchers(x)) -> -NoninvasiveNeuronalImagingTechnique(x) & -SpatialOrbitResolution(x))", "all x.((FMRI(x) & -InvasiveNeuroimagingTechnique(x) & UsedByNeurologyResearchers(x)) -> (NonInvasiveNeuroImagingTechnique(x) | ProvidesSpatialResolutionOfBrains(x)))", "all x.((FMRI(x) & -InvasiveNeuroimagingTechnique(x) & UsedByNeurologyResearchers(x)) -> -(NoninvasiveNeuroimagingTechnique(x) | ProvidesSpatialResolution(x)))", "all x.((FMRI(x) & -InvasiveNeuroimagingTechnique(x) & UsedByNeurologyResearchers(x)) -> (-NoninvasiveNeuroimagingTechnique(x)) & -ProvidesSpatialResolutionOfBrains(x)))", "all x.((FMRI(x) & -InvasiveNeuroimagingTechnique(x) & UsedByNeurologyResearchers(x)) -> -(NoninvasiveNeuroimagingTechnique(x) & -SpatialResolutionOfBrains(x)))", "all x.((FMRI(x) & -InvasiveNeuroimagingTechnique(x) & UsedByNeurologyResearchers(x)) -> (-NoninvasiveNeuroimagingTechnique(x) & -SpatialResolutionOfBrains(x)))", "all x.((FMRI(x) & -InvasiveNeuroimagingTechnique(x) & UsedByNeurologyResearchers(x)) -> (-NonInvasiveNeuroimagingTechnique(x) & -SpaceResolutionOfBodys(x)))", "all x.((FMRI(x) & -InvasiveNeuroimaging(x) & UsedByNurses(x)) -> -(NoInvasiveNeuroimaging(x) & -ProvidingSpatialResolution(x)))", "all x.((FMRI(x) & -InvasiveNeuroimagingTechnique(x) & UsedByNeurologyResearchers(x)) -> (-NoninvasiveNeuronimagingTechnique(x) & -ProvidesSpatialResolutionOfBrains(x)))", "all x.((FMRI(x) & -InvasiveNeuroimagingTechnique(x) & UsedByNeurologyResearchers(x)) -> (-NoninvasiveNeuroimagingTechnique(x) & -ProvidesSpatialResolutionOfBrains(x)))", "all x.((FMRI(x) & -InvasiveNeuroimagingTechnique(x) & UsedByNeurologist(x)) -> -NoninvasiveNeuroimagingTechnique(x) & -SpatialResolutionOfBrains(x))", "all x.((WideDiagnosis(x) & -InvasiveNeuroimagingTechnique(x) & UsedByNeurologyResearchers(x)) -> ((NonInvasiveNeuronimagingTechnique(x) & -ProvidingSpatialResolutionOfBrains(x)) | (-InvasiveNeuronimagingTechnique(x) & ProvidesSpatialResolutionOfBrains(x))))"]}
{"id": "folio_train_2576", "nl": "Either present their work at the conference or provide a tutorial session at the conference. ", "fol": "all x.(PresentAtConference(x) | ProvideTutorialSession(x))", "prediction": ["all x y.((Conference(x) & (PastWork(x,y) | ProvideTutorial(x,y))) -> Valid(x))", "all x.(Conference(x) -> (PresentWork(x,Commission) | ProvideTutorial(x,Commission)))", "all x y z.((Work(x) & Conference(y) & Conference(z)) -> (PresentAtConference(x,y) | ProvideTutorialSessionAtConference(x,z)))", "all x y.((Conference(x) & PresentWork(y) & (ProvidesTutorial(y) | PresentWork(y))))", "all x y.((Conference(x) & PresentWork(x,y)) | ProvideTutorial(x,y))", "all x y.((Conference(x) & Confession(y)) -> (PursueWork(x,y) | ProvideTutorial(x,y)))", "exists x y.((Conference(x) & Conference(y) & PresentWork(x,y)) | ProvideTutorial(x,y)))", "((PaidWorkAtConference) | ProvidesTutorialSession(Conference)))", "all x y z.((Conference(x) & Presentation(y) & TutorialSession(z)) -> ((PlaysWork(y,x) | ProvidesTutorialSession(z,x))))", "all x.((Person(x) | Tutorial(x))) -> (PursuesWorkAtConference(x) | ProvidesTutorial(x)))", "all x y.((Conference(x) & Work(y)) -> (Presents(x,y) | ProvidesTutorial(x,y)))", "(AllowsConferencePresentation(resources) | ProvidesTutorial(resources)))", "all x y.((Conference(x) & Conference(y)) -> (PresentWork(x,y) | ProvideTutorialSession(x,y)))", "all x y.((Conference(x) & Conference(y)) -> (PresentWork(x,y) | ProvideTutorial(x,y)))", "exists x y.((Conference(x) & PresentsWork(x,y)) | ProvidesTutorial(x,y))", "(PresentWork(a) | ProvideTutorial(a))"]}
{"id": "folio_train_2577", "nl": "All who present their work at the conference will attend in person. ", "fol": "all x.(PresentAtConference(x) -> AttendInPerson(x))", "prediction": ["all x y.((ProduceWork(x) & Conference(y)) -> AttendInPerson(x,y))", "all x.((PresentsWork(x) & AtConference(x)) -> AttendsInPerson(x))", "all x.((PresentWork(x) & Conference(y)) -> AttendInPerson(x,y))", "all x.((PresentsWork(x) & AtConference(x)) -> AttendsInPerson(x))", "all x.((PresentingWork(x) & AtConference(x)) -> AthletesInPerson(x))", "all x y.((Stakeholder(x) & Conference(y)) -> AttendsInPerson(x,y))", "all x.((ToPresentWork(x) & PresentationAtConference(x)) -> AttendInPerson(x))", "all x.(Presents(x,Work) -> AttendsInPerson(x))", "all x.((PresentsWork(x) & AttendsIn Person(x)) -> PresentsWork(x))", "all x y.((Conference(x) & PresentsWork(x,y)) -> AttendsInPerson(y))", "all x.((PresentsWork(x) & Conference(y)) -> AttendsInPerson(x))", "all x.((Person(x) & PresentsWork(x)) -> AttendsInPerson(x))", "all x.((PresentsWork(x) & AtConference(x)) -> AttendsInPerson(x))", "all x.((PresentsWork(x) & AtConference(x)) -> AttendsInPerson(x))", "all x.((PresentsWork(x) & atConference(x)) -> AttendsInPerson(x))", "all x y.((PresentsWork(x) & Conference(y)) -> AttendsInPerson(x,y))"]}
{"id": "folio_train_2578", "nl": "All those providing a tutorial session at the conference are invited to join the club. ", "fol": "all x.(ProvideTutorialSession(x) -> InvitedToClub(x))", "prediction": ["all x.((ProvidingTutorial(x) & Conference(x)) -> InvitedToJoinClub(x))", "all x.((ProvidingTutorial(x) & Conference(x)) -> InvitedToJoinClub(x))", "all x.(ProvidesTutorialAtConference(x) -> InvitedToJoinClub(x))", "all x.((ProvidesTutorial(x) & Conference(x)) -> InvitedToClub(x))", "all x.((ProvidesTutorial(x) & AtConference(x)) -> InvitedToJoinClub(x))", "all x.(ProvidingTutorialAtConference(x) -> InvitedToJoinClub(x))", "all x.((ProvidesTutorial(x) & AtConference(x)) -> InvitedToJoinClub(x))", "all x.(ProvidesTutorialSessionAtConference(x) -> JoinClub(x))", "all x.(ProvidesTutorialAtConference(x) -> InvitedToJoinClub(x))", "all x.(ProvidesTutoringSessionsAtConference(x) -> JoinClub(x))", "all x y.((Person(x) & Tutorial(y) & ProvidesAtConference(x)) -> InvitedToJoinClub(x))", "all x.((ProvidesTutorial(x) & Conference(x)) -> InvitedToJoinClub(x))", "all x.((ProvidingTutorialSession(x) | InvitationToJoinClub(x)) -> JoinClub(x))", "all x.((ProvidingTutorialAtConference(x) & JoinClub(x)) -> InvitedToJoinClub(x))", "all x.(ProvidesTutorialSession(x) -> JoinClub(x))", "all x.((ProvidesTutoriumSession(x) & Conference(x)) -> InvitedToJourney(x))"]}
{"id": "folio_train_2579", "nl": "All who attend the conference in person are provided with souvenirs. ", "fol": "all x.(AttendInPerson(x) -> ReceiveSouvenirs(x))", "prediction": ["all x.(AttendsConferenceInPerson(x) -> ProvidedWithSouvenirs(x))", "all x.(AttendsConferenceInPerson(x) -> ProvidedWithSouvenirs(x))", "all x.((AttendsConferenceInMan(x) & AttendsConferenceInPerson(x)) -> ProvidedSouvenirs(x))", "all x.((AttendsConferenceInPerson(x) & InPerson(x)) -> ProvidedWithSouvenirs(x))", "all x.((AttendsConferenceInPerson(x) & ProvidesSouvenirs(x)) -> Provided(x))", "all x.((AttendsConferenceInPerson(x) & AssistsInPerson(x)) -> ProvidedWithSouvenirs(x))", "all x.((AttendsConferenceInPerson(x) & AttendsInPerson(x)) -> ProvidedWithSouvenirs(x))", "all x.((AttendConferenceInPerson(x) & AttendInPerson(x)) -> ProvidedWithSouvenirs(x))", "all x.(AttendsConferenceInPerson(x) -> ProvidedWithSouvenirs(x))", "all x.((AttendInPerson(x) & AttendsConferenceInPerson(x)) -> ProvidedWithSugars(x))", "all x y.((Conference(x) & AttendsInPerson(x)) -> ProvidedWithSouvenirs(y))", "all x.(AttendsConferenceInPerson(x) -> ProvidedWithSouvenirs(x))", "all x.(AttendsInPerson(x) -> ProvidedWithSouvenirs(x))", "all x.((AttendsConferenceInPerson(x) & ProvidesSouvenirs(x)) -> AttendsInPerson(x))", "all x.(AttendsConferenceInPerson(x) -> ProvidedWithSouvenirs(x))", "all x.((AttendConferenceInPerson(x) & ProvidesSouvenirs(x)) -> AttendsInPerson(x))"]}
{"id": "folio_train_2580", "nl": "All invited to join the club are provided with delicious meals. ", "fol": "all x.(InvitedToClub(x) -> ProvidedDeliciousMeals(x))", "prediction": ["all x.((Invited(x) & JoinClub(x)) -> ProvidedWithDeliciousMeals(x))", "all x.((InvitedToJoinClub(x) & DeliciousMeals(x)) -> Provided(x))", "all x.((InvitedToJourney(x) & ProvidedWithDeliciousMeals(x)) -> JoinClub(x))", "all x.((InvitedToJoinClub(x) & ProvidedWithDeliciousMeals(x)) -> JoinsClub(x))", "all x.((InvitedToJoinClub(x) & BenefitsFromDeliciousMeals(x)) -> Provided(x))", "all x.((Invited(x) & JoinClub(x)) -> ProvidedWithDeliciousMeals(x))", "all x.((InvitedToJoinClub(x) & ProvidedDeliciousMeals(x)) -> JoinClub(x))", "all x.((Invitation(x) & JoinClub(x)) -> DeliciousMeals(x))", "all x.((InvitedToClub(x) & ProvidesDeliciousMeals(x)) -> JoinsClub(x))", "all x.(Invitation(x) -> AwesomeMeals(x))", "all x.(InvitedToJoinClub(x) -> ProvidedWithDeliciousMeals(x))", "all x.((InvitedToMeals(x) & ProvidedWithDeliciousMeals(x)) -> JoinsClub(x))", "all x.((InvitedToJoinClub(x) & ProvidedMeals(x)) -> Delicious(x))", "all x.((InvitedToJoinClub(x) & ProvidedWithDeliciousMeals(x)) -> JoinClub(x))", "all x.((Invited(x) & JoinClub(x)) -> DelightfulMeals(x))", "all x.((InvitedToJerkClub(x) & ProvidedWithDeliciousMeals(x)) -> Joins(x,Discovery))"]}
{"id": "folio_train_2581", "nl": "All provided with delicious meals are happy to communicate with each other during the dinner. ", "fol": "all x.(ProvidedDeliciousMeals(x) -> HappyToCommunicate(x))", "prediction": ["all x.((MenuProvened(x) & Delicious(x)) -> HappyToCommunicateDuringDinner(x))", "all x.((ProvidingDeliciousMeals(x) & HappyToCommunicate(x)) -> AwesomeLunch(x))", "all x y.((DeliciousMeal(x) & ProvidedWith(x,y)) -> HappyToCommunicate(y))", "all x.((ProvenedWithDeliciousMeals(x) & ReceivesDeliciousMeals(x)) -> HappyToCommunicate(x))", "all x.((ProvenedOfDeliciousMeals(x)) -> HappyToCommunicateWith(x))", "all x y z.((DeliciousMeal(x) & ProvidedWith(x,y) & Dinner(z)) -> HappyToCommunicate(x,z))", "all x y.((Dishes(x) & ProvidedWith(x,y)) -> HappySocial(y))", "all x.(DeliciousMeal(x) -> HappyToCommunicate(x))", "all x.(DeliciousMeal(x) -> CommunicatesDuringDinner(x))", "all x.((ProvenedWithDeliciousMeals(x) & ProvidedWithMeal(x)) -> HappyToCommunicate(x))", "all x.((ProvidingDeliciousMeals(x) & HappyToCommunique(x)) -> LovelyForDinner(x))", "all x.((Purchase(x) & DeliciousMeal(x)) -> HappyToCommunicateDuring(x,dinner))", "all x.((Person(x) & ProvidedWithDeliciousMeals(x)) -> HappyToCommutant(x))", "all x y.((Person(x) & DeliciousMeal(y) & Provided(x)) -> HappyToCommunicate(x,y))", "all x.((DeliciousMeal(x) & ProvidedWith(x,y)) -> HappyToCommunicateDuring(x,z))", "all x.((FoodProvidesDeliciousMeals(x) & HappyToCommunicate(x)) -> ProvidedWithDeliciousMeals(x))"]}
{"id": "folio_train_2582", "nl": "All provided with delicious meals are invited to take a photo with the audience. ", "fol": "all x.(ProvidedDeliciousMeals(x) -> InvitedToTakePhoto(x))", "prediction": ["all x.((Dishes-Loaded(x) & DeliciousMeals(x)) -> InvitedToTakePhotoWithAudience(x))", "all x.((PurchaseMeal(x) & Delicious(x)) -> InvitesToTakePictureWithAudience(x))", "all x.((ProvidesDeliciousMeals(x)) -> InvitedToTakePhotoWithAudience(x))", "all x y.((ProvenedWithDeliciousMeals(x) & Audience(y)) -> InvitedToTakePhotoWith(x,y))", "all x.((Purpose(x) & DeliciousMeals(x)) -> InvitedToTakePhoto(x,y))", "all x.((ProvidedWithDeliciousMeals(x) & AccessoryProperty(x)) -> InvitedToTakePhotoWithAudience(x))", "all x.((ProvenedDishesMeals(x) & AwesomeFoods(x)) -> InvitedToTakePhoto(x,Audience,Client))", "all x.(DeliciousMeal(x) -> InvitedToTakePhotoWithAudience(x))", "all x.((ProvenedWithDishevelingMeals(x)) -> InvitedToTakePhotoWithAudience(x))", "all x.(DeliciousMeals(x) -> TakePicture(x,Audience))", "all x.((FavoriteMeals(x) & ProvidentWith(x,FabulousMeals)) -> invitedToTakePhotoWithAudience(x))", "all x y.((DeliciousMeals(x) & ProvidedWith(x,y)) -> InvitedToTakePhotoWithAudience(x))", "all x.((ProvenedWithDeliciousMeals(x) & JoinsAudience(x)) -> TakesPhoto(x,Okay))", "all x.((ProvenedWithDeliciousMeals(x) & Audience(y)) -> InvitedToTakePhotoWith(x,y))", "all x.((DishesNeschmals(x) & ProvidedBy(x,n) & AwesomeMeals(x)) -> InvitedToTakePhotoWithAudience(x))", "all x.((PurchasedWithDeliciousMeals(x) & ProvidedWithMeals(x)) -> InvitedToTakePhotoWithAudience(x))"]}
{"id": "folio_train_2583", "nl": "James does not attend the conference in person and is not provided with souvenirs.", "fol": "(-AttendInPerson(James) & -ReceiveSouvenirs(James))", "prediction": ["James is not at the conference in person, but is not provided with Souvenirs.", "all x.((James(x) & -AttendsInPerson(x) & -ProvidesSouvenirs(x)) -> -CommitTourist(x))", "(-(AttendsConferenceInPerson(Jim) & -ProvidesSouvenirs(Jim)) -> -RemainsAtConference(Jim))", "James is not present in person or at the conference, both of which offer souvenirs.", "all x.(Jennifer(x) & -AttendeesInPerson(x) & -ProvidesSouvenirs(x))", "James -(AttendsConferenceInPerson(James) & -ProvidesSouvenirs(James))", "(-(AttendsConferenceInPerson(James) & -ProvidesSouvenirs( James)))", "-AttendsInPerson(Jim) & -Confirmations-ProvidesSouvenirs(Jim))", "((JamesDouglas(James) & AttendsConferenceInPerson(James)) | ProvidedSouvenirs(James)))", "all x y.((James(x) & Conference(y)) -> (-AttendeesInPerson(x,y) & -Souvenirs(x)))", "-AttendsConferenceInPerson(James,James) & -ProvidesSouvenirs(James,James))", "all x.(James(x) -> (-AttendsConferenceInPerson(x) & -ProvidesSouvenirs(x)))", "James (-AttendsInPerson(James) & -ProvidesSouvenirs(James))", "James does not attendsCallInPerson(James) & -ProvidesSouvenirs(James))", "all x.((James(x) & -AttendsInPerson(x)) -> -ProvidesSouvenirs(x))", "(-(AttendsInPerson(James) & -PhoneChampion(James)) | DoneWithSouvenirs(James)))"]}
{"id": "folio_train_2584", "nl": "James is provided with souvenirs.", "fol": "ReceiveSouvenirs(James)", "prediction": ["all x.((James(x) & Souvenirs(x)) -> Provided(x))", "all x.(Jimmy(x) -> ProvidedWithSouvenirs(x))", "all x.((James(x) & Souvenirs(x)) -> Provided(x))", "all x.(James(x) -> ProvidedWithSouvenirs(x))", "(ReleasedWithSouvenirs(James)", "all x.(James(x) -> ProvidedWithSouvenirs(x))", "James is provided with souvenirs.", "all x.(Handbook(x) -> ProvidedBy(x,James))", "all x.((James(x) & ComesWithSouvenirs(x)) -> ProvidedWith(x))", "(ProvidesWithSuggestions(James)", "(ProvidesSouvenirs(James,James))", "all x.(James(x) -> ProvidedWithSouvenirs(x))", "All x.(James(x) -> ProvidedWithSouvenirs(x))", "all x.(James(x) -> ProvidedWithSouvenirs(x))", "all x.((James(x) & Souvenirs(x)) -> ProvidedWith(x,y))", "all x.((James(x) & Souvenir(x)) -> Provided(x))"]}
{"id": "folio_train_2585", "nl": "James is not provided with souvenirs.", "fol": "-ReceiveSouvenirs(James)", "prediction": ["(-providedWithSouvenirs(James))", "all x.((James(x) & -Promo(y)) -> -Souvenirs(z))", "[Jimmy isNotProvenedWith(Jimmy))", "James -ProvidesSouvenirs(James)", "(-ProvidesSouvenirs(James)", "\u2018(Mary(James) & -Functional(James))", "James is not provided with Souvenirs.", "is not provided with Souvenirs.", "(ProvidesSouvenirs(James) & James -ProvidesSouvenirs(James))", "-ProvidesSouvenirs(Jim)", "James & -ComedyProvides(Jimi)", "James -exists x.(Suitcase(x) & ProvidedWith(x,y))", "all x.((James(x) & -providedWithSuggestions(x)) -> -PaidWithSouvenirs(x))", "(-providedWithSouvenirs(James)", "James is -ProvenedWithSouvenirs(James)", "all x.(James(x) -> -ProvidesSouvenirs(x))"]}
{"id": "folio_train_2586", "nl": "James is invited to take a photo with the audience and is happy to communicate with each other at the dinner.", "fol": "(InvitedToTakePhoto(James) & HappyToCommunicate(James))", "prediction": ["all x y z.((James(x) & Audience(y) & Dinner(z)) -> (TakesPhoto(x,y) & HappyToCommunicate(x,z)))", "all x y z.((James(x) & Audience(y) & Dinner(z)) -> (InvitedToTakePhoto(x,y) & HappyToCommunicateAt(x,z)))", "all x y z.((James(x) & Audience(y) & Dinner(z)) -> (InvitedToTakePositionWith(x,y) & HappyToCommunicate(x,z)))", "all x y.((James(x) & Audience(y)) -> (InvitedToTakePhoto(x,y) & HappyToCommunicate(x,y)))", "all x y.((James(x) & Audience(y)) -> (InvitedToTakePhoto(x,y) & HappyToCommunicate(x,y)))", "all x y.((Jimmy(x) & Audience(y)) -> (InvitedToTakePhoto(x,y) & HappyToCommunicate(x,y)))", "all x y z.((James(x) & Photo(y) & Audience(z)) -> (Invites(x,y) & TakesPosition(x,y,z) & HappyToCommunique(x,y,z)))", "all x y.((James(x) & Audience(y)) -> (InvitedToTakePhoto(x,y) & HappyToCommunicate(x,y)))", "everything x y.((Chef(x) & James(y)) -> (InvitedToTakePhoto(x,y) & HappyToCommunicate(y,z)))", "all x y.((James(x) & Audience(y)) -> (ChoseToTakePhoto(x,y) & HappyToCommunicate(x,y)))", "-HasLeaveHandle(james) & InvitedToTakePhotoWithAudience(james) & HappyToCommunicate(james,dinet))", "all x y.((Email(x) & Dinner(y)) -> (InvitedToTakePhoto(x,y) & HappyToCommunicate(x,y)))", "all x y.((James(x) & Audience(y) & InvitedToTakePhoto(x,y)) -> HappyToCommunicate(x,y))", "all x y.((James(x) & Audience(y) & InvitedToTakePhoto(x,y)) -> (ReadyToCommunicate(x,y) | HappyToCommunicate(x,y)))", "(all x.((HasJamesForDinner(x) & TakesPhoto(x)) -> HappyToCommunicate(x)))", "(All x.(James(x) -> InvitedToTakePhotoWithAudience(x)) & HappyToCommunicateWithAtDinner(x))"]}
{"id": "folio_train_2587", "nl": "James is invited to take a photo with the audience or is happy to communicate with each other during the dinner.", "fol": "(InvitedToTakePhoto(James) | HappyToCommunicate(James))", "prediction": ["all x.((James(x) & TakesPhotoWithAudience(x)) | HappyToCommunicateWithAudience(x))", "all x y.((James(x) & Audience(y)) -> (PhotoTakes(x,y) | HappyToCommunicate(x,y)))", "all x.(James(x) -> (FansOnDinner(x) | HappyToCommunicate(x)))", "(CollaboratesWithAudience(James) & (InvitedToTakePhotos(James,Audience) | HappyToCommunicate(James,Audience)))", "all x.((RequiredToTakePhoto(x) | HappyToCommunicate(x))) -> JamesPerson(x))", "all x y z.((James(x) & Photo(y) & Audience(z)) -> (InterviewedWith(x,y) | HappyToCommunique(x,z))))", "all x y.((RolesFollowing(x) | HappyToCommunicate(x,y)) -> (Either(x,y) & TakesPicture(x,y)))", "all x y.((Chef(x) & Invited(x,y) & James(y)) -> (TakesPhotoWithAudience(x,y) | HappyToCommunicateUnderDinner(y,x)))", "all x.(James(x) -> ((InvitedToTakePhoto(x) | HappyToCommunicate(x)) & Dinner(x)))", "all x.((James(x) & (TakesPhotoWithAudience(x) | HappyWithCommunication(x))) -> Invites(x,y))", "all x y.((James(x) & Audience(y)) -> (RequiresPhoto(x,y) | HappyToCommunicate(x,y)))", "all x y.((James(x) & Photo(y) & TakesWithAudience(x,y)) | HappyToCommunicate(x,y))", "all x.(Jim(x) -> ((InvitesToTakePhotoWithAudience(x) | HappyToCommunicate(x)) & Dinner(x)))", "all x.((Jim) & TakesPhotoWithAudience(x) | Happy(x))) -> (RequiresPhoto(x) & WithAudience(x)))", "all x y z.((James(x) & Audience(y) & Photo(z)) -> (InvitedToTake(x,z) | HappyToCommunicate(x,y)))", "(Required( James,Photo) | HappyToCommunicate@Dinner(James,Photo)))"]}
{"id": "folio_train_2588", "nl": "James is either invited to take a photo with the audience or happy to communicate with each other during the dinner.", "fol": "(InvitedToTakePhoto(James) | HappyToCommunicate(James))", "prediction": ["all x.(James(x) -> (InvitedToTakePhoto(x) | HappyToCommunicate(x)))", "all x y.((James(x) & Audience(y)) -> (InvadedToTakePhoto(x,y) | HappyToCommunicate(x,y)))", "all x y.((James(x) & Audience(y)) -> (InvitedToTakePhoto(x,y) | HappyToCommunicate(x,y)))", "all x.(James(x) -> (InvitedToTakePhoto(x) | HappyToCommunicate(x)))", "all x.((James(x) & TakesPhoto(x,Audience)) | HappyToCommunicate(x,Audience))", "all x.((James(x) & PhotoWithAudience(x)) | HappySolving(x))", "all x.((James(x) & Audience(y)) -> (InvitedToTakePhoto(x,y) | HappyToCommunique(x,y)))", "all x y.((Commission(x) & James(y)) -> (InvitedToTakePhoto(y (x,y) | HappyToCommunicate(y,x))))", "all x y.((James,y) & Dinner(z)) -> (InvitedToTakePhotoWithAudience(x,y) | HappyToCommunicate(x,z)))", "all x.(James(x) -> (InvitesToPhoto(x) | HappyToCommuniqueWithAudience(x)))", "all x.(James(x) -> (InvitedToTakePhotoWithAudience(x) | HappyToCommune(x)))", "all x y.((James(x) & Date(y)) -> (InvitedToTakePhotoWithAudience(x,y) | HappyToCommunicate(x,y)))", "all x y.((James(x) & Audience(y)) -> (InvitedToTakePhotoWith(x,y) | HappyToCommunicateWithAudience(x,y)))", "all x.((James(x) & Photograph(x)) -> (InvitedToTake(x,Audience) | HappyToCommunicate(x,Dessert)))", "all x y.((James(x) & InviteToTakePosition(x,y) | HappyToCommunicate(x,y)) -> Dinner(x))", "all x y.((James(x) & Audience(y)) -> (InvitedToTakePhoto(x,y) | HappyToCommunicate(x,y)))"]}
{"id": "folio_train_2589", "nl": "The USS Salem is a heavy cruiser built for the United States navy.", "fol": "(IsHeavyCruiser(Usssalem) & ConstructedFor(Usssalem,Unitedstatesnavy))", "prediction": ["all x y.((USS Salem(x) & HeavyCruiser(x) & BuiltFor(x,y)) -> BuiltFor(x,y))", "all x y.((USS Salem(x) & HeavyCruiser(y)) -> BuiltFor(z,UnitedStatesNaval))", "(HeavyCruiser(USSSalem) & BuiltForUSNail(USSalem))", "all x.((USS Salem(x) & HeavyCruiser(x) & BuiltForNavy(x)) -> BuiltForNaval(x))", "all x.(USSSalem(x) -> (HeavyCruiser(x) & BuiltForNaw(x)))", "(HeavyCruiser(USS Salem) & WornForNavy(USS Salem))", "all x.(USSSalem(x) -> BuiltForNavy(x))", "all x.((USS Salem(x) & HeavyCruiser(x) & BuiltForNamble(x)) -> BuiltForNamble(x))", "all x y.((USS Salem(x) & USNavy(y)) -> BuiltFor(x,y))", "all x.(USSSalem(x) -> BuiltForUSNavy(x))", "all x.(USSSalem(x) -> BuiltForNaval(x))", "the USSSalem is a heavyCruiser built for the UnitedStatesNavy.", "all x.(Salem(x) -> BuiltForNavy(x))", "all x y z.((USSSalem(x) & HeavyCruiser(y) & Navy(z)) -> BuiltFor(x,y,z))", "all x.(USSSalem(x) -> (HeavyCruiser(x) & BuiltForNature(x)))", "all x y.((USS Salem) & HeavyCruiser(x) & BuiltForNawk(y)) -> ShipTrawler(x,y))"]}
{"id": "folio_train_2590", "nl": "The last heavy cruiser to enter service was the USS Salem.", "fol": "LastHeavyCruiserInService(Usssalem)", "prediction": ["all x.((HardCruiser(x) & EntersService(x)) -> USSSalem(x))", "(LastHeavyCruiser(usesSalem) & EntersService(heavycruiser,usSalem))", "(LongestLightCruiserToEnterService(HCS Salem))", "the last heavy cruiser to EnterService was USS Salem.", "all x y z.((LightCruiser(x) & HeavyCruiser(y) & HeavyCruiser(x) & Ship(z)) -> EntersService(x,y,z))", "(LastHeavyCruiserToEnterService(salem) -> USS Salem).", "all x.(LargeCruiser(x) -> EntersService(x))", "all x.(Late HeavyCrawlerToEnterService(x) -> USS Salem(x))", "theLateHeavyCruiserToEnterService(LondsUSSSalem)", "all x.((HeavyCruiser(x) & EntersService(x)) -> USSSalem(x))", "(LargestWeightCruiser ((UssSalem,1))) -> EntersService(HardCruiser,2))", "all x.(Late HeavyCruiserToEnterService(x) -> USSSalem(x))", "(Late HeavyCruiserEntrance(HisSatellite))", "(LikesSummary(heavycruiser,usSalem))", "The last heavy cruiser to enter service was the USS Salem.", "-LastHeavyCruiserToEnterServiceOnNature(USSSalem)"]}
{"id": "folio_train_2591", "nl": "The USS Salem is a museum ship.", "fol": "IsMuseumShip(Usssalem)", "prediction": ["all x.(Salem(x) -> MuseumShip(x))", "all x.(USSSalem(x) -> MuseumShip(x))", "(MuseumShip(USSSalem) & MuseumShip(USSSalem))", "all x.(Salty(x) -> MuseumShip(x))", "The USSSalam(us) is a museumship(us)", "all x.(Salam(x) -> MuseumShore(x))", "all x.(USSSalem(x) -> MuseumShip(x))", "it is a MuseumShip(USSSalem)", "all x.(USSSalem(x) -> MuseumShip(x))", "all x.(USSSalem(x) -> MuseumShip(x))", "the USS Salem is a museumship.", "all x.(Salem(x) -> MuseumShip(x))", "all x.((USSSalem(x) & MuseumShip(x)) -> ShipOf(x))", "ALL x.((USS Salem(x) & MuseumShip(x)) -> Ship(x))", "(MuseumShip(USSSalem) & MuseumShip(USSSalem))", "all x.(USSSalam(x) -> MuseumShip(x))"]}
{"id": "folio_train_2592", "nl": "Museum ships are open to the public.", "fol": "all x.(IsMuseumShip(x) -> AccessibleToPublic(x))", "prediction": ["all x.(MuseumShip(x) -> OpenToPublic(x))", "all x.(MuseumShip(x) -> OpenToPublic(x))", "all x.(MuseumShip(x) -> OpenToPublic(x))", "all x.(MuseumShip(x) -> OpenToPublic(x))", "all x.(MuseumShip(x) -> OpenToPublic(x))", "all x.(MuseumShip(x) -> OpenToPublic(x))", "all x.(MuseumShip(x) -> OpenToPublic(x))", "all x.(MuseumShip(x) -> OpenToPublic(x))", "all x.(MuseumShip(x) -> OpenToPublic(x))", "all x.(MuseumShip(x) -> OpenToPublic(x))", "all x.(MuseumShip(x) -> OpenToPublic(x))", "all x.(MuseumShip(x) -> OpenToPublic(x))", "all x.(MuseumShip(x) -> OpenToPublic(x))", "all x y.((MuseumShip(x) & State(y)) -> OpenToPublic(x,y))", "all x.(MuseumShip(x) -> OpenToPublic(x))", "all x y.((Museum(x) & Ship(y)) -> OpenToPublic(x,y))"]}
{"id": "folio_train_2593", "nl": "The USS Salem served in the Atlantic and Mediterranean.", "fol": "(ServedInRegion(Usssalem,Atlantic) & ServedInRegion(Usssalem,Mediterranean))", "prediction": ["(All x.(USS Salem(x) -> (ServedInAtlantic(x) | ServicedInMediterranean(x))))", "all x y.((USS Salem(x) & (Atlantic(y) | Mediterranean(y))) -> Serves(x,y))", "All x.(USSSalem(x) -> (ServedInAtlantic(x) & ServingInMediterranean(x)))", "(ServesInAtlanticAndMediterranean(USS Salem))", "the USSSalem served primarily in Atlantic and Mediterranean.", "all x.((USS Salem(x) & InAtlantic(x) & InMediterranean(x)) -> ServingIn(x,y))", "all x.(USSSalem(x) -> (ServedInAtlantic(x) & ServicedInMediterranean(x)))", "(ServesAtlantic(USASalem) & ServesMediterranean(USASalem))", "the USSSalem, also known as USSAtlanticAtlantic(Salem,Atlantic) & ServedInMediterranean(Salem,Atlantic))", "Das System (USS Salem) & servedAtlanticAndMediterranean.", "served in the Atlantic and Mediterranean Seas.", "(Salam(USS Salem) servesAtlantic(USS Salem) & ServesMediterranean(USS Salem))", "the USSSalem diente in the Atlantic and Mediterranean.", "((USS Salem) & ServedAtlantic(s) & ServedMediterranean(s)))", "Das MVSalem (USSalem) served in Atlantic and Mediterranean.", "(All x.(USSSalem(x) -> (ServedAtlantic(x) | ServingMedium(x))))"]}
{"id": "folio_train_2594", "nl": "The USS Salem is open to the public.", "fol": "AccessibleToPublic(Usssalem)", "prediction": ["all x.(Seattle(x) -> AvailableAtOpen(x))", "(OpenToPublic(USS Salem)", "(OpenToPublic(USSSalem,Soldier)", "all x.((USSSalem(x) & OpenToPublic(x)) -> ComesTo(x))", "the USSSalem open tothepublic.", "(OpenToPublic(USS Salem))", "all x.(USSSalem(x) -> OpenToPublic(x))", "all x.(USSSalem(x) -> OpenToPublic(x))", "All x.(USSSalem(x) -> OpenToPublic(x))", "all x.(USSSalem(x) -> OpenToPublic(x))", "the USSSalem & OpenToPublic(USS Salem)", "*OpenToPublic(USSSalem)", "The USS Salem is open to the public.", "the USSSalem. (OpenToPublic(USS Salem))", "L'USS Salem est ouverte \u00e0 la public.", "the USS Salem is open to the public."]}
{"id": "folio_train_2595", "nl": "There is a museum ship open to the public that served in the Mediterranean.", "fol": "exists x.(IsMuseumShip(x) & AccessibleToPublic(x) & ServedInRegion(x,Mediterranean))", "prediction": ["exists x.(MuseumShip(x) & OpenToPublic(x) & ServicedInMediterranean(x))", "exists x.(MuseumShip(x) & OpenToPublic(x) & ServedInMediterranean(x))", "exists x.(MuseumShip(x) & OpenToPublic(x) & ServedInMediterranean(x))", "exists x.(MuseumShip(x) & OpenToPublic(x) & ServicedInMediterranean(x))", "all x.((MuseumShip(x) & OpenToPublic(x)) -> ServicedInMediterranean(x))", "exists x.(MuseumShip(x) & OpenToPublic(x) & ServedInMediterranean(x))", "exists x.(MuseumShip(x) & OpenToPublic(x) & ServesInMediterranean(x))", "exists x.(MuseumShip(x) & OpenToPublic(x) & ServesInMediterranean(x))", "exists x.(MuseumShip(x) & OpenToPublic(x) & ServedInMediterranean(x))", "exists x y.((MuseumShip(x) & OpenToPublic(x)) & Mediterranean(y))", "exists x.(MuseumShip(x) & OpenToPublic(x) & ServicedInMediterranean(x))", "exists x y.((MuseumShip(x) & OpenToPublic(x) & ServedInMediterranean(y))", "exists x y.((MuseumShip(x) & OpenToPublic(x) & ServicedInMediterranean(y)) -> OpenToPublic(x))", "exists x.(MuseumShip(x) & OpenToPublic(x) & ServingInMediterranean(x))", "exists x y.((MuseumShip(x) & OpenToPublic(x) & NavyAt(y)) & ServesInMediterranean(x))", "exists x.(MuseumShip(x) & OpenToPublic(x) & StoppedInMediterranean(x))"]}
{"id": "folio_train_2596", "nl": "The USS Salem was not the last heavy cruiser to enter service.", "fol": "-LastHeavyCruiserInService(Usssalem)", "prediction": ["-(LargeCruiser(USSSalem) & LastToEnterService(USSSalem))", "-RecentToEnterService(Salem(USS)", "(-LastHeavyCruiserToEnterService(USSSalem))", "-LargeCruiserToEnterService(USSSalem)", "-last HeavyCruiserToEnterService(USSSalem)", "-last HeavyCruiser(USSSalem)", "-LongestEntryCruiserToEnterService(USSSalem)", "-all x.(Salem(x) -> EntersService(x))", "-LargeCruiser(USSSalem)", "(LargeCruiser(USS Salem) & -LargeCruiser(USS Salem))", "-LastCrawlerInService(USSSalem)", "-LeftCruiserInService(USSSalem)", "-last heavycruiser to enter service.", "-LargeCruiserToEnterService(USSSalem)", "(-last heavycruiser to enter service))", "-LustPriorHeavyCruiserToEnterService(USSSalem)"]}
{"id": "folio_train_2597", "nl": "TS Leda was a good passenger and cargo vessel.", "fol": "exists x.(TSLedaVessel(x) & IsPassengerVessel(x) & IsCargoVessel(x))", "prediction": ["all x.((TSLeda(x) & GoodPassenger(x) & GoodCargoVessel(x)) -> GoodVessel(x))", "all x.((TSLeda(x) & GoodPassenger(x) & GoodCargoVessel(x)) -> GoodVessel(x))", "all x.((TSLeda(x) & GoodPassenger(x) & GoodCargoVessel(x)) -> GoodVessel(x))", "all x.(TSLeda(x) -> (GoodPassenger(x) & GoodCargoVessel(x)))", "all x.(TSLeda(x) -> (GoodPassengerVessel(x) & GoodCargoVessel(x)))", "all x.(TSLeda(x) -> (GoodPassengerVessel(x) & GoodCargoVessel(x)))", "all x.(TsLeda(x) -> (GoodPassengerVessel(x) & GoodCargoVessel(x)))", "all x.[TSLeda(x) -> (GoodPassengerVessel(x) & GoodCargoVessel(x)))", "all x y.((TSLeda(x) & PassengerVessel(y) & CargoVessel(x)) -> Good(x))", "all x.((TSLeda(x) & GoodPassenger(x) & GoodCargoVessel(x)) -> GoodVessel(x))", "all x.(TSLeda(x) -> (GoodPassengerVessel(x) & GoodCargoVessel(x)))", "all x.(TSLeda(x) -> (GoodPassengerVessel(x) & GoodCargoVessel(x)))", "all x.((TSLeda(x) & GoodPassengerVessel(x) & GoodCargoVessel(x)) -> GoodVessel(x))", "all x.((TSLeda(x) & GoodPassenger(x) & GoodCargoVessel(x)) -> GoodVessel(x))", "all x.(TSLeda(x) -> (GoodPassengerVessel(x) & GoodCargoVessel(x)))", "all x.(TSLeda(x) -> (GoodPassengerVessel(x) & GoodCargoVessel(x)))"]}
{"id": "folio_train_2598", "nl": "TS Leda was the first Norweigian vessel that was built with stabilizers.", "fol": "all x.(TSLedaVessel(x) -> (IsNorwegianVessel(x) & HasStabilizers(x)))", "prediction": ["TS Leda wurde als NorweigianVessel(TS) & BuiltWithStabilizers(TS) & FirstOrweigianVessel(TS))", "TS Leda is the first Norweigian vessel that was BuiltWithStablers.", "TS Leda is the first Norweigian vessel that was builtWithStabilizers.", "all x.((StandardVessel(x) & NorweigianVessel(x)) -> BuiltWithStables(x))", "TS Leda was the first NorweigianVessel(TorwegianVessel(TS) & ShipBuiltWithStabilizers(TS))", "Astor & NorweigianVessel(T.Soldier(TSLeda) & BuiltWithStabilizers(TSLeda))", "TSLeda was the first NorweigianVesselToBeBuiltWithStablers(TS,Leda))", "TS Leda was the first Norweigian vessel that was builtWithStabilisers (TS))", "TSLeda (TSVehicle(TS) & NorweigianVessel(TS) & BuiltWithStabilizers(TS))", "TSLeda(TS,Stabilizers) -> NorweigianVessel(TS,Stabilizers))", "TSLeda is the first Norweigian vessel that was hulledWithStabilisers(TS)", "TS Leda was the First NorweigianVesselToBeBuiltWithStablers(TS,Leda))", "all x.(TaskStandard(x) -> NorweigianVessel(x))", "TS Leda is Norweigian vessel builtwithStabilizers.", "TS Leda (TS) -TheFirstNorweigianVessel(TS,Stables))", "TSLeda is the first NorweigianVessel(TS) & BuiltWithStabilizers(TS)"]}
{"id": "folio_train_2599", "nl": "Stabilizers are mechanical devices that are only on ships that have powerful steam turbine engines.", "fol": "all x.((HasStabilizers(x) -> OnlyOnShipsWithStabilizers(x)) & HasSteamTurbineEngine(x))", "prediction": ["all x.(Stabilizer(x) -> (MechanicalDevice(x) & OnlyOnShips(x) & PowerfulSteamTurbineEngine(x)))", "all x.(Stabilizer(x) -> (Machine(x) & ExtensiveSteamTurbineEngine(x)))", "all x.(STaLiquidIs(x) -> (MechanicalDevice(x) & LocatedOn(x,y,z) & Ship(y) & PowerfulSteamTurbineEngine(z)))", "all x.(Stabilizer(x) -> (MechanicalDevice(x) & DesignedForShips(x) & PowerfulSteamTurbineEngines(x)))", "all x.(Stabler(x) -> (MechanicalDevice(x) & onShip(x) & PoweredSteamTurbineEngine(x)))", "all x.(Stabilizer(x) -> (MechanicalDevices(x) & LocatedOnShips(x) & PowerfulSteamTurbineEngine(x)))", "all x.(Stabilizer(x) -> (MechanicalDevice(x) & NoVanillaOnShip(x) & PowerfulSteamTurbineEngines(x)))", "all x.(Stabilizer(x) -> (MechanicalDevice(x) & LocatedOnShip(x) & HasPowerfulSteamTurbineEngine(x)))", "all x.(Stabilizer(x) -> (MechanicalDevice(x) & LocatedOnShip(x) & PowerfulSteamTurbineEngines(x)))", "all x y.((Stabilizer(x) & Ship(y) & HasPowerfulSteamTurbineEngine(y)) -> MechanicalDevice(x,y))", "all x.(Stabilizer(x) -> (MachinedDevice(x) & LocatedOnShip(x) & PowerfulSteamTurbineEngine(x)))", "all x.(Stabilizer(x) -> (MechanicalDevice(x) & LocatedOnShip(x) & HasPowerfulSteamTurbineEngine(x)))", "all x.(Stabilizer(x) -> (MechanicalDevice(x) & On(x,ships,powerfulDasps) & HasSteamTurbineEngine(x)))", "all x.(Stabilizer(x) -> (MechanicalDevice(x) & OnlyOnShipsWithPowerfulSteamTurbineEngines(x)))", "all x.(Stabilizer(x) -> RequiresMechanicalDevice(x))", "all x y.((Stabilizer(x) & Ship(y) & PowerfulTurbineEngine(y,x)) -> MechanicalDevice(x))"]}
{"id": "folio_train_2600", "nl": " To be a good passenger and cargo vessel, ships must be quiet and good at sea.", "fol": "all x.(((IsPassengerVessel(x) & IsCargoVessel(x)) -> IsQuiet(x)) & IsGoodAtSea(x))", "prediction": ["all x.((Ship(x) & Quiet(x) & GoodAtSea(x)) -> GoodPassengerAndCargoVegetation(x))", "all x.((Ship(x) & GoodPassengerVessel(x) & GoodCargoVessel(x)) -> (Quiet(x) & GoodAtSea(x)))", "all x.((Ship(x) & Quiet(x) & GoodAtSea(x)) -> GoodPassengerAndCargoVessel(x))", "all x.((Shaped(x) & Quiet(x) & GoodAtSea(x)) -> GoodPassengerAndCargoVessel(x))", "all x.(GoodPassengerAndCargoVessel(x) -> (Quiet(x) & GoodAtSea(x)))", "all x.((Ship(x) & Passenger(x) & Cargo(x)) -> (Quiet(x) & GoodAtSea(x)))", "all x.((Ship(x) & Passenger(x) & CargoVessel(x)) -> (Quiet(x) & GoodAtSea(x)))", "all x.((Ship(x) & Quiet(x) & GoodAtSea(x)) -> GoodPassengerAndCargoVessel(x))", "all x.((Ship(x) & GoodPassengerVessel(x) & GoodCargoVessel(x)) -> (Quiet(x) & GoodAtSea(x)))", "all x.((Ship(x) & Quiet(x) & GoodAtSea(x)) -> GoodPassengerAndCargoVessel(x))", "all x.((Ship(x) & GoodPassengerVessel(x) & GoodCargoVessel(x)) -> (Quiet(x) & GoodAtSea(x)))", "all x.((Ship(x) & GoodPassenger(x) & GoodCargoVessel(x)) -> (Quiet(x) & GoodAtSea(x)))", "all x.((Ship(x) & GoodMaintane(x) & GoodCargoVessel(x)) -> (Quiet(x) & GoodAtSea(x)))", "all x.((Ship(x) & GoodPassengerVessel(x) & GoodCargoVessel(x)) -> (Quiet(x) & GoodAtSea(x)))", "all x.((Ship(x) & Quiet(x) & GoodAtSea(x)) -> GoodPassengerAndCargoVessel(x))", "all x.((Ship(x) & Passenger(x) & CargoVessel(x)) -> (Quiet(x) & GoodAtSea(x)))"]}
{"id": "folio_train_2601", "nl": "Some ships that are quiet and good at sea have powerful steam turbine engines.", "fol": "exists x.(IsQuiet(x) & IsGoodAtSea(x) & HasSteamTurbineEngine(x))", "prediction": ["exists x.(Ship(x) & Quiet(x) & GoodAtSea(x) & SteamTurbineEngine(x))", "exists x.(Ship(x) & Quiet(x) & GoodAtSea(x) & HasPowerfulSteamTurbineEngines(x))", "exists x.((Ship(x) & Quiet(x) & GoodAtSea(x)) -> HasPowerfulSteamTurbineEngines(x))", "exists x.(Shaped(x) & Quiet(x) & GoodAtSea(x) & HasPowerfulSteamTurbineEngine(x))", "exists x.(Ship(x) & Quiet(x) & GoodAtSea(x) & PowerfulSteamTurbineEngines(x))", "exists x.((Ship(x) & Quiet(x) & GoodAtSea(x)) -> HasPowerfulSteamTurbineEngines(x))", "exists x.(Ship(x) & Quiet(x) & GoodAtSea(x) & HasPowerfulSteamTurbineEngines(x))", "exists x.(Ship(x) & Quiet(x) & GoodAtSea(x) & SteamTurbineEngine(x))", "exists x.(Ship(x) & Quiet(x) & GoodAtSea(x) & HasPowerfulSteamTurbineEngine(x))", "exists x.(Ship(x) & Quiet(x) & GoodAtSea(x)) -> HasPowerfulSteamTurbineEngine(x))", "exists x.(Ship(x) & Quiet(x) & GoodAtSea(x) & PowerfulSteamTurbineEngine(x))", "exists x.(Ship(x) & Quiet(x) & GoodAtSea(x) & HasPowerfulSteamTurbineEngines(x))", "exists x.(Ship(x) & QuietAndGoodAtSea(x) & PowerfulSteamTurbineEngines(x))", "exists x.(Ship(x) & Quiet(x) & GoodAtSea(x) & PowerfulSteamTurbineEngine(x))", "exists x.(Ship(x) & QuietAndGoodAtSea(x) & HasPowerfulSteamTurbineEngine(x))", "exists x.((Ship(x) & Quiet(x) & GoodAtSea(x)) -> PowerfulSteamTurbineEngines(x))"]}
{"id": "folio_train_2602", "nl": "TS Leda was quiet and good at sea.", "fol": "exists x.(TSLedaVessel(x) & IsQuiet(x) & IsGoodAtSea(x))", "prediction": ["Leda(TS) -> (Quiet(TS) & GoodAtSea(TS)))", "all x.((TS Leda(x) & Quiet(x) & GoodAtSea(x)) -> GoodAtSea(x))", "all x.(TSLeda(x) -> (Quiet(x) & GoodAtSea(x)))", "all x.((TS Leda (x) & NiceAtSea(x)) -> Quiet(x))", "all x.(TSLeda(x) -> (Quiet(x) & GoodAtSea(x)))", "all x.(TS Leda(x) -> (Quiet(x) & GoodAtSea(x)))", "All x.(TestSLeda(x) -> (Quiet(x) & GoodAtSea(x)))", "all x.((TSLeda(x) & Quiet(x) & GoodAtSea(x)) -> GoodAtSea(x))", "TS Leda (quiet) & GoodAtSea(TS))", "all x.(Sleep(x) & GoodAtSea(x))", "all x.(TsLeda(x) -> (Quiet(x) & GoodAtSea(x)))", "all x.(TSLeda(x) -> (Quiet(x) & GoodAtSea(x)))", "all x.((StsLeda(x) & Quiet(x) & GoodAtSea(x)) -> GoodAtSea(x))", "All x.(TsLeda(x) -> (Quiet(x) & GoodAtSea(x)))", "all x.(TSLeda(x) -> WasQuietAndGoodAtSea(x))", "all x.(TSLeda(x) -> (Quiet(x) & GoodAtSea(x)))"]}
{"id": "folio_train_2603", "nl": "Some ships that arFe quiet and good at sea have powerful steam turbine engines.", "fol": "exists x.(IsQuiet(x) & IsGoodAtSea(x) & HasSteamTurbineEngine(x))", "prediction": ["exists x.(Ship(x) & ArFeQuiet(x) & GoodAtSea(x) & HasPowerfulSteamTurbineEngine(x))", "exists x.(Shore(x) & ArFeQuiet(x) & GoodAtSea(x) & PowerfulSteamTurbineEngine(x))", "exists x.((Ship(x) & ArFeQuiet(x) & GoodAtSea(x)) -> PowerfulSteamTurbineEngines(x))", "exists x.(Ship(x) & ArFe(x) & Quiet(x) & GoodAtSea(x) & PowerfulSteamTurbineEngines(x))", "exists x.(Ship(x) & ArFeSilent(x) & GoodAtSea(x) & HasPowerfulSteamTurbineEngines(x))", "exists x.(Ship(x) & ArFeShut(x) & GoodAtSea(x) & HasPowerfulSteamTurbineEngine(x))", "exists x.(Ship(x) & ArFeQuiet(x) & GoodAtSea(x) & HasPowerfulSteamTurbineEngines(x))", "exists x.(Ship(x) & ArFish(x) & GoodAtSea(x) & HasPowerfulSteamTurbineEngines(x))", "exists x.(Ship(x) & ArFe(x) & Quiet(x) & GoodAtSea(x) & HasPowerfulSteamTurbineEngines(x))", "exists x.((Dispatch(x) & ArFe(x) & Quiet(x) & GoodAtSea(x)) -> PowerfulSteamTurbineEngines(x))", "exists x.(Ship(x) & ArFeQuiet(x) & GoodAtSea(x) & PowerfulSteamTurbineEngines(x))", "exists x.(Ship(x) & ArFeQuiet(x) & GoodAtSea(x) & HasPowerfulSteamTurbineEngine(x))", "exists x.((Ship(x) & ArFeQuiet(x) & GoodAtSea(x)) -> PowerfulSteamTurbineEngines(x))", "exists x.((Ship(x) & ArFeSilent(x) & GoodAtSea(x)) -> PowerfulSteamTurbineEngines(x))", "exists x.(Ship(x) & Rusty(x) & GoodAtSea(x) & HasPowerfulSteamTurbineEngines(x))", "exists x.(Ship(x) & ArFeQuiet(x) & GoodAtSea(x) & PowerfulSteamTurbineEngine(x))"]}
{"id": "folio_train_2604", "nl": "TS Leda had powerful steam turbine engines.", "fol": "all x.(TSLedaVessel(x) -> HasSteamTurbineEngine(x))", "prediction": ["all x.(TSLeda(x) -> PowerfulSteamTurbineEngines(x))", "all x.(TestSleda(x) -> PowerfulSteamTurbineEngines(x))", "all x.(TSLeda(x) -> PowerfulSteamTurbineEngines(x))", "all x.(TSLeda(x) -> PowerfulSteamTurbineEngines(x))", "all x.(TSLeda(x) -> HasPowerfulSteamTurbineEngines(x))", "all x.(TSLeda(x) -> PowerfulSteamTurbineEngines(x))", "all x.(TisLeda(x) -> PowerfulSteamTurbinEngine(x))", "all x.(TSLeda(x) -> PowerfulSteamTurbineEngines(x))", "all x y.((TSLeda(x) & SteamTurbineEngine(y)) -> Powerful(x,y))", "all x.(TSLeda(x) -> PowerfulSteamTurbineEngines(x))", "all x.(TSLeda(x) -> PowerfulSteamTurbineEngines(x))", "all x.(TSLeda(x) -> PowerfulSteamTurbineEngines(x))", "all x.(TSLeda(x) -> PowerfulSteamTurbineEngines(x))", "all x.(TSLeda(x) -> PowerfulSteamTurbineEngines(x))", "all x.(TreeStars(x) -> HadPowerfulSteamTurbineEngines(x))", "all x.(TSLeda(x) -> PowerfulSteamTurbineEngines(x))"]}
{"id": "folio_train_2605", "nl": "TS Leda was not a Norweigian vessel.", "fol": "all x.(TSLedaVessel(x) -> -IsNorwegianVessel(x))", "prediction": ["TS Leda n\u2019est pas NorwegianVessel.", "TS Leda was -NorwegianVessel(TSLeda))", "TE Leda -NorweigianVessel(TSLeda)", "-NorwegianVessel(TSLeda)", "TS Leda & -NorwegianVessel(TSV)", "All x.(TSLeda(x) -> -NorweigianVessel(x))", "TSLeda -NorthweigianVessel(TM)", "TSLeda wasn'tNorwegianVessel(TSLeda,Standard(TS))", "TS Leda was not NorweigianVessel(TSLeda)", "TS Leda - NorweigianVessel(TS)", "-NorweigianVessel(TSLeda)", "TS Leda - NorweiganVessel(TS)", "TSLeda was not NorweigianVessel(TSLeda)", "-NorweigianVessel(TSLeda,1998).", "exists x.(TSLeda(x) & -NorwegianVessel(x))", "(-NorthweigianVessel(TSLeda)"]}
{"id": "folio_train_2606", "nl": "Rosa was born in Santiago. ", "fol": "BornIn(Rosa,Santiago)", "prediction": ["Rosa was born in Santiago.", "(BirthInSi\u00e8ge(Rosa))", "All x.(Rosa(x) -> BornInSantiago(x))", "Rosa was born in Santiago.", "Rosa was born in Santiago.", "Rosa was born in Santiago.", "Jadislaw, Santiago,.(Rosa))", "Rosa was born in Santiago.", "Rosa wurde in Santiago geboren.", "Rosa (bornInSoloma)", "Originally BornInSaitol.", "Rosa was born in Santiago.", "Rosa was born in Santiago, Chile.", "Rosa BornIn(Rose,Santiago)", "Rosa w.((Birth(Rosa) & Santiago(s))", "(Baby(Rosa) & BornIn(Rosa,Santiago))"]}
{"id": "folio_train_2607", "nl": "Santiago is the capital and largest city of Chile.", "fol": "(IsCapitalOf(Santiago,Chile) & IsLargestCityOf(Santiago,Chile))", "prediction": ["Santiago (City(Chili) & Capital(Chili) & Largest(CHili))", "Santiago,Chilesia,capita.", "Santiago, Chile, has 50.9 million inhabitants (capital(Chile) & LargestCity(Chile))", "Santiago (City(SierraLower(Silicon))", "Santiago(Sanctuary) -> (CapitalBohemian(Santacruz) & LargestCity(Santacruz)))", "Santiago (City) & Capital(Chili) & Largest(Chili))", "Santiago est l'un des \u00e9toiles de Chile.", "Santiago (Capital(Saladio) & LargestCityOfChile(s))", "Santiago, also spelled Santiago (City(Susan) & Capital(San Francisco))", "Santiago de Chile is the capital and largestcity(Chile)", "Santiago \u2014 CapitalAndLargestCityOfChilean.", "Santiago is capital and largestCity(chile)", "Santiago, capital and largestcityOfChilia (Chili.)", "Santiago (Capital(a) & LargestCity(b) & LocatedIn(a,b,c,m,a))", "Santiago, capital(s) & LargestCity(s))", "Santiago (assumescapital(a) & LargestCity(a))"]}
{"id": "folio_train_2608", "nl": "Rosa is the daughter of a Catalan building contractor, Jose.", "fol": "(IsDaughterOf(Rosa,Jose) & IsBuildingContractor(Jose) & -IsChilean(Jose))", "prediction": ["(Daughter(Rosa,CatalanBuildingConstruction) & DaughterOfJose(Rosa,CatalanBuildingConstruction))", "all x.(Rosa(x) -> (Daughter(x,CataranBuildingContractor) & Daughter(x,Jose)))", "(DaughterOfCatalanBuildingContractor(Rose) & DaughterOfCatalan(Rose))", "(CatalanBuildingContractor(Rosa) | CatalanBuildingContractors(Rosa,Jose)))", "(Daughter(Rosa,CatalanBuildingContractor) & Daughter(Rosa,CatalanBuildingContractor))", "Anaisis: (Daughter(Rosa) & CatalanBuildingContractor(Jose)))", "(DaughterOfCatalanBuildingContractor(Rosa) & DaughterOfTeacherJose(Rosa,Jose))", "all x y z.((Rosa(x) & CatalanBuildingConsultant(y) & BuildingConsultant(z)) -> DaughterOf(x,y))", "(DaughterOfCatalanBuildingConstruction(Rosa,Santa) & DaughterOfCatalanBuildingConstant(Rosa,Jose))", "(DaughterOfCatallanBuildingContractorSheila(Rose))", "(DaughterOfCatalanBuildingContractors(Rose) & DaughterOfCatalanBuildingContractors(Rose))", "(Laxamen(Rose) & CatalanBuildingContractor(Hosta))", "(DaughterOfCatalanBuildingConsultant(Rosa,Catalan) & DaughterOf(Rosa,Catalan))", "all x.(Rosa(x) -> (CatalanBuildingContractor(x) & DaughterOf(x,Jose)))", "(Daughter(Rosa,CatalanBuildingContractor) & DaughterOf(Rosa,CatalanBuildingContractor))", "all x.(Rose(x) -> (DaughterOfCatalanBuildingContractor(x) & SpanishBuildingContractor(x)))"]}
{"id": "folio_train_2609", "nl": "Jose has a Chilean wife, Carmen.", "fol": "(IsWifeOf(Jose,Carmen) & IsChilean(Carmen))", "prediction": ["(ArgentinianWife(Joe) & ChileanWife(Joe))", "all x y.((Jose(x) & Carmen(y)) -> ChileanWife(x,y))", "(HasChileanWife(Jos\u00e9) & HasChileanWife(Jose))", "all x.(Jose(x) -> ChileanWife(x,Carmen))", "(-Sherpa(Jose) & ChileanWife(Jose))", "all x.(ChilianWife(x) -> (Jose(x) & Carmen(x)))", "all x.(Jose(x) -> (ChileanWife(x) & Carmen(x)))", "(Head(Jose) | Head(Jose)) & ChileanWife(Jose))", "exists x.(Jose(x) & ChileanWife(x))", "all x.(Jose(x) -> ChileanWife(x,Carmen))", "(HasChileanWife(Jose) & HasChilianWife(Jose))", "(HeadsChilisian(Solo) & HasChilisian(Solo))", "(HeadsChilean(Jose) & HasChileanWife(Jose,Carmen))", "all x.((Jose(x) & ChileanWife(x,Carmen)) -> Has(x,Jose))", "(Jose(Jose) & ChileanWife(Jose))", "(Losaved(Joe) & Californian(Joe))"]}
{"id": "folio_train_2610", "nl": "If someone is another person's daughter, she is also the daughter of the another person's wife.", "fol": "all z.((IsDaughterOf(x,y) & IsWifeOf(y,z)) -> IsDaughterOf(x,z))", "prediction": ["all x y.((Daughter(x,y) & Person(y)) -> DaughterOfWife(x,y))", "all x y.((Person(x) & Person(y) & Daughter(x,y)) -> DaughterOf(x,y))", "all x y.((Daughter(x) & Person(y) & DaughterDeepDeepDeepDeepDeepDeepDeepDeepDeepDeepDeepDeepDeepDeepDeepDeepDeepDeepDeepDeepDeepDeepDeepDeepDeepDeepDeepDeepDeepDeepDeeesDeeesDeeesDeeesDeeesFeeesFeesCdeeesDeepDeeseEumDeesReelEesDeesEezes(ieesDeesE)Priece(inE)Julee.", "all x y z.((Daughter(x,y) & Person(z) & DaughterOf(x,z)) -> DaughterOf(x,z))", "all x y.((BodiesDaughter(x) & Person(y) & DaughterOfWorker(x,y)) -> DaughterOfWife(x,y))", "all x y.((TwoPerson(x) & Person(y)) -> TheLawyerOf(x,y))", "all x.(TwoPersonPerson(x) -> DaughterOfWife(x,y))", "all x y z.((TheirDeep(x) & Person(y) & PersonDeep(z)) -> DaughterOf(x,y,z))", "all x.((Daughter(x) & Person(x)) -> DaughterOfWife(x,y))", "all x y.((Daughter(x) & Person(y)) -> DaughterOf(y,x))", "all x.((Daughter(x) & Person(x)) -> DaughterOfWife(x,Cheese))", "all x.((Daughter(x) & Person(x)) -> DaughterOfWife(x))", "all x y.((Daughter(x,y) & Person(y)) -> DaughterOfWife(x,y))", "all x y.((Their(x) & Person(y)) -> Daughter(x,y))", "all x.((Daughter(x) & Person(x)) -> DaughterOfWife(x))", "all x y z.([People(x) & Person(y) & Daughter(z)) -> Daughter(z,x))"]}
{"id": "folio_train_2611", "nl": "A building contractor is responsible for the day-to-day oversight of a construction site. ", "fol": "all x.exists y.((IsBuildingContractor(x) & IsConstructionSite(y)) -> Oversees(x,y))", "prediction": ["all x y.((BuildingContractant(x) & ConstructionSite(y)) -> OverseesDayToDay(x,y))", "all x.(BuildingConsultant(x) -> ResponsibleForDayToDayOversightOfConstructionSite(x))", "all x y.((BuildingContractant(x) & ConstructionSite(y)) -> ResponsibleForDayToDayOversight(x,y))", "all x y z.((BuildingConstructionContractors(x) & ConstructionSite(y) & Site(z)) -> OverseesDayToDay(x,y,z))", "all x y.((BuildingConstructionCons contractor(x) & ConstructionSite(y)) -> ResponsibleForDayToDayOverview(x,y))", "all x y z.((BuildingContractors(x) & ConstructionSite(y) & ConstructionSite(z)) -> Oversees(x,y,z))", "all x y.((BuildingConsultant(x) & ConstructionSite(y)) -> DetailedOverviewOf(x,y))", "all x y.((BuildingConstructionContractor(x) & ConstructionSite(y)) -> RelevantForDayToDayOversight(x,y))", "all x y.((BuildingContractors(x) & ConstructionSite(y)) -> ResponsibleForDayToDayOversight(x,y))", "all x y.((BuildingConsultant(x) & ConstructionSite(y)) -> ResponsibleForDayToDayOversight(x,y))", "all x y z.((BuildingConstructionContractor(x) & ConstructionSite(y) & DayToDayOversight(z)) -> ResponsibleFor(x,y,z))", "all x y.((BuildingContractor(x) & ConstructionSite(y)) -> ResponsibleForDayToDayOversight(x,y))", "all x y.((BuildingConstructionContractor(x) & ConstructionSite(y)) -> ResponsibleForDayToDayOversight(x,y))", "all x y.((BuildingCons contractor(x) & ConstructionSite(y)) -> ResponsibleForDayToDayOverview(x,y))", "all x y.((BuildingContractee(x) & ConstructionSite(y)) -> Oversees(x,y))", "all x y z.((BuildingConstructionContractee(x) & ConstructionSite(y) & ConstructionSite(z)) -> ResponsibleForDayToDayOversight(x,y,z))"]}
{"id": "folio_train_2612", "nl": "Rosa was born in the largest city of Chile.", "fol": "exists x.(BornIn(Rosa,x) & IsLargestCityOf(x,Chile))", "prediction": ["ALL x.(Rosa(x) -> (BirthOn(x,Chile) | LargestCity(x,Chile)))", "Rosa was born in largestcityofChile(Rose)", "all x.(Rosa(x) -> BornInLargestCity(x))", "Rosa BornInLargestCity(Rose) de Chile(Rosa)", "Rosa was born in largestCityOfChile(Rose)", "Rosa was born in in Chile's largestCity(Rosa)", "Rosa wurde im grossestenChileanCity(Rosa) -LargestChileanCity(Rosa))", "Rosa a. was born in LargestCity(a) inChili.", "Rosa & BornInLargestCity(RepublicaCalifornia)", "Rosa was born in largestCityOfChile (City(Rosa) | City(Rosa)))", "Rosa was born in the largest city of Chile.", "all x.(Rosa(x) -> Alive(x))", "Rosa BornInLargestCity(Rosa,Chile)", "Rosa was born in the largest city of Chile.", "Rosa came from a major city, Buenos Aires, and grew up in the largest city of Chile.", "Rosa was born in the largestcity of Chile."]}
{"id": "folio_train_2613", "nl": "Neither of Rosa's parents is Chilean.", "fol": "-exists x.(IsDaughterOf(Rosa,x) & IsChilean(x))", "prediction": ["(Normatives(Rosa,Chilean) & -(Rosa'sParent(Rosa,Chilean))).", "(-(Rose(Rose) & Parent(Rose)) -> Chilean(Rose,Cypriot)))", "-(Rosa(Rosa) & -Chilean(Rosa,Petals&Rosa))", "-(Family(Ros\u00e9e) & -Chilian(rose,chichis))", "-((Rosa'sParent(ros) & Chilean(ros)))", "-(Family(Rosa,PallianceLike(Rosa) & NoneChilean(Rosa))", "-((RoseParent(Rosa) & Chilean(Rosa)))", "-(RoseParent(Rosa) & Chilean(Rosa))", "-(Rosa'sParent(Rosa) & Chilean(r))", "No both of Rosa's parents are Chilean(Rosa)", "(-(Parent(Rose,Rosa,Corinthen)) | Parents(Rosa,Corinthen)))", "-((Elf of Rosa's Parents(Rosa) & Chilean(Rosa)))", "(-(Rose(Roos) & Chilean(Roos)))", "(-(RosaGhost(rosa) & Chilean(rosa)))", "-(Rosa'sParent(Rose) & Chilean(Rosa))", "(-(Rose'sParent(Rosa,Chilean)) -> -Chilinian(Rosa))"]}
{"id": "folio_train_2614", "nl": "Rosa is the daughter of someone who is responsible for the oversight of a construction site.", "fol": "exists x y.(IsDaughterOf(Rosa,x) & IsConstructionSite(y) & Oversees(x,y))", "prediction": ["all x.(Rose(x) -> (DaughterOf(x) & RepresentsConstructionSite(x)))", "all x.(Rosa@(DaughterDead(x) & OverseesConstructionSite(x)) -> DaughterAt(x,ConstructionSite))", "all x y.((Rosa(x) & ConstructionSite(y)) -> ResponsibleForOverlooks(x,y))", "all x.(Rosa(x) -> (Daughter(x) & ResponsibleForConstructionSite(x)))", "(Daughter(Rosa,ConstructionSite) & RepresentsFollowing(Rosa,ConstructionSite))", "all x y.((Rosa_daughter(x) & ConstructionSite(y)) -> Oversees(x,y))", "all x.((Rosa(x) & ResponsibleForConstructionSite(x)) -> DaughterOf(x,Cooperation_RelatedToConstructionSite(x))", "all x.(Rose(x) -> exists y.(ConstructionSite(y) & ResponsibleForOversight(x,y))))", "all x.(Rose(x) -> (HasOverviewOfConstructionSite(x) & HasOverviewOfConstructionSite(x)))", "all x.((Rosa(x) & ResponsibleForConstructionSiteOverview(x)) -> Daughter(x))", "all x y.((Daughter(x) & ConstructionSite(y)) -> Authority(x,y))", "all x.((Daughter(x) & OverseesConstructionSite(x)) -> Rosa.", "all x.((Rosa(x) & Person(x) & ResponsibleForConstructionSite(x)) -> DaughterOf(x,Obligation,Stage,ConstructionSite))", "all x y z.((Rosa(x) & Person(y) & ConstructionSite(z)) -> Oversees(x,y,z))", "all x y.((Rosa(x) & Person(y)) -> OverseesConstructionSite(x,y))", "all x.((Daughter(x) & ResponsibleForConstructionSite(x)) -> Rosa(x))"]}
{"id": "folio_train_2615", "nl": "Tyga is a rapper.", "fol": "IsRapper(Tyga)", "prediction": ["Tyga is rapper(y)", "Tyga is rapper(y) & Loves(z) & Laughs(z))", "(Rabbit(Yoga) & Rapper(Yoga))", "Tyga is rapper(x)", "Tyga is rapper.", "Tyga is rapper.", "Tyga is rapper.", "Tyga is a rapper.", "Tyga (Rapper)", "Tyga is rapper(x)", "Tyga is rapper.", "Tyga is rapper(Tyga)", "Tyga is rapper.", "Tyga is a rapper.", "Tyga is rapper.", "Tyga is rapper(x) & -Cyberpath(x))"]}
{"id": "folio_train_2616", "nl": "Rappers release rap albums.", "fol": "ReleasesAlbum(Tyga,WellDone3)", "prediction": ["all x.(Rapper(x) -> ReleaseRapAlbums(x))", "all x y.((Rapper(x) & RapAlbum(y)) -> Release(x,y))", "all x.(Rapper(x) -> ReleasesRapAlbums(x))", "all x y.((Rapper(x) & RapAlbum(y)) -> Releases(x,y))", "all x.(Rapper(x) -> (ReleasesRapAlbum(x) & ReleasesRap(x)))", "all x.(Rapper(x) -> ReleaseRamAlbum(x))", "all x.(Rapper(x) -> ReleasesRapAlbums(x))", "all x.(Rapper(x) -> ReleasesRrapAlbums(x))", "all x y.((Rapper(x) & RapAlbum(y)) -> Releases(x,y))", "all x.(Rrapper(x) -> ReleasesRapAlbum(x))", "all x y.((Rapper(x) & RapAlbum(y)) -> Releases(x,y))", "all x y z.((Rrapper(x) & RapAlbum(y) & Album(z)) -> Release(x,y,z))", "all x.(Rrapper(x) -> ReleasesRabbitAlbums(x))", "all x.(Rrapper(x) -> ReleasesRapAlbums(x))", "all x.(Rapper(x) -> ReleasesRamAlbums(x))", "all x.(Rapper(x) -> ReleasesRapAlbums(x))"]}
{"id": "folio_train_2617", "nl": "Tyga released the Well Done 3 album.", "fol": "all x y.((IsRapper(x) & ReleasesAlbum(x,y)) -> IsRapAlbum(y))", "prediction": ["The WellDone3Album of Tyga.", "Tyga released WellDone3album(ty) & -StillDone(ty) &.", "Tyga released WellDone3(y) -> ReleasedIn(x,y))", "Tyga released WellDone3 album.", "Tyga released WellDone(ty) & Album(ty) & WellDone(y))", "(WellDone(ty) & Released(ty,x,y))", "Tyga\u2019s WellDone3 Album.", "Tyga released WellDone3 album.", "Tyga released WellDone3 LP & Releases(Year(Z))", "Tyga released WellDone3 album.", "Tyga released WellDone3.", "Tyga has released WellDone3 Album.", "Tyga released WellDone3.", "Tyga released WellDone3album(t) & Released(t))", "Aladdin is a fan of Tyga and WellDone3.", "Tyga released WellDone3 Album."]}
{"id": "folio_train_2618", "nl": "Rappers are not opera singers.", "fol": "all x.(IsRapper(x) -> -IsNotOperaSinger(x))", "prediction": ["all x.(Rapper(x) -> -OperaSinger(x))", "all x.(Raccoon(x) -> -OperaSinger(x))", "all x.(Rabbit(x) -> -OperaSinger(x))", "all x.(Rapper(x) -> -OperaSinger(x))", "all x.(Rapper(x) -> -OperaSinger(x))", "all x.(Rapper(x) -> -OperaSinger(x))", "all x.(Rapper(x) -> -OperaSinger(x))", "all x.(Rapper(x) -> -OperaSinger(x))", "all x.(Rrapper(x) -> -OperaSinger(x))", "all x.(Rapper(x) -> -OperaSinger(x))", "all x.(Rapper(x) -> -OperaSinger(x))", "all x.(Rapper(x) -> -OperaSinger(x))", "all x.(Rapper(x) -> -OperaSinger(x))", "all x.(Rapper(x) -> -OperaSinger(x))", "all x.(Rapper(x) -> -OperaSinger(x))", "all x.(Rapper(x) -> -OperaSinger(x))"]}
{"id": "folio_train_2619", "nl": "Well Done 3 is a rap album.", "fol": "IsRapAlbum(WellDone3)", "prediction": ["(All x.((WellDone3 & -Rap(x)) -> WellDone3))", "All x.((WellDone(x) & RapAlbum(x)) -> WellDone3.", "WellDone3(RapAlbum)", "WellDone3 is a RapAlbum(x))", "WellDone3 is a RapAlbum(x)", "WellDone3 is a RapAlbum(x)", "Well Done3 is a RapAlbum(x)", "-RapAlbum(WellDone3) & VideoAlbum(WellDone3))", "WellDone3 is anRapAlbum.", "WellDone3 is rapalbum.", "WellDone3 ist ein RapAlbum(x) & ReleasedIn(x))", "WellDone3 is arapalbum.", "WellDone3 is a RapAlbum(x)", "All x.(WellDone(x) -> RapAlbum(x))", "WellDone3 (RapAlbum))", "all x.(WellDone(x) -> RapAlbum(x))"]}
{"id": "folio_train_2620", "nl": "Tyga is an opera singer.", "fol": "IsNotOperaSinger(Tyga)", "prediction": ["Tyga is a opera singer.", "(OperaSinger(Tyga)", "Tyga is a opera singer.", "(OperaSinger(Tyga) & Opera(ty))", "Tyga is an opera singer.", "Tyga is an opera singer.", "Tyga is OperaSinger(TM)", "Tyga is a opera singer.", "(OperaSinger(Tyga))", "Tyga is an opera singer.", "Tyga is opera singer.", "Tyga is an opera singer.", "(OperaSinger(Tyga) & Op\u00e9ra(Tyga))", "Tyga is opera singer.", "Tyga is opera singer.", "(OperaSinger(Tyga) | OperaSinger(Tyga))"]}
{"id": "folio_train_2621", "nl": "Well Done 3 is worth listening.", "fol": "WorthListening(WellDone3)", "prediction": ["WellDone3(x) -> WorthHearing(x))", "WellDone3 is WorthListening(welldone3 & -worthsListening(welldone3))", "all x.(WellDone(x) -> WorthListening(x))", "WellDone3 is worthTheAudience(WellDone3) -> WorthListening(WellDone3))", "WellDone3 is WorthHearing(WorthTaking)", "Wone3RunsOnly(WellDone3)", "-BelongsToWellDone3.", "WellDone3(x) -> WorthReasoning(x))", "WellDone3 & ValuableListening(x)", "WellDone3 isworth(x)", "WellDone3 deserveslistening(x)", "WellDone3 isWorthAudience(WellDone3))", "WellDone3 -> WorthHearing(n)", "All x.(WellDone(x) -> WorthListening(x))", "WellDone3 isworthListening(x)", "(WorthListening(WellDone3))"]}
{"id": "folio_train_2622", "nl": "Deborah Wallace is a Scottish born actress, playwright and producer.", "fol": "(BornInLocation(Deborahwallace,Scotland) & IsActress(Deborahwallace) & IsPlaywright(Deborahwallace) & IsProducer(Deborahwallace))", "prediction": ["((DeborahWallace(Deborah)) -> (Filmmaker(Deborah) & ScottishBirth(Deborah)))", "DeborahWallace (ScottishBaptist(at) & Playwright(at) & Producer(at))", "DeborahWallace (ScottishBirthActressAndPlaywrightAndProducer(debbie,c))", "all x.((DeborahWalliam(x) & ScottishBornActress(x) & Playwright(x) & Producer(x)) -> ScottishBirth(x))", "(ScottishBirthActor(DebbieWallace) & ScottishBornPlaywright(DebbieWallace) & Producer(DebbieWallace))", "(ScottishBrother(DebbieWallston) & ScottishBornActor(DebbieWallston) & Playwright(DebbieWallston) & Producer(DebbieWallston))", "all x.((DeborahWalliams(x) & ScottishBornActress(x) & Playwright(x) & Producer(x)) -> CelebratedForFifty(x))", "DeborahWallace(*) & ScottishBorn(ish) & Actress(ish) & Playwright(ish) & Producer(ish))", "(ScottishBloodedActor(DeborahWallace) & ScottishBirthPlaywright(DeborahWallace) & Producer(DeborahWallace))", "DeborahWallace (scottishBirthActor(s) & Playwright(s) & Producer(s))", "Deborah Wallace (ScottishBirthActress,Playwright,Producer) & Born(DeborahWilliams)", "DeborahWallace (ScotlandBorn(d) & ScottishBorn(d) & Actress(d) & Playwright(i) & Producer(i))", "Deborah Wallace (ScottishBirthActress,Playwright & Producer)", "DeborahWallace (ScottishBirthActress,Playwright,Producer) & Born(Debbie Wallace)", "All x.(DeborahWallace(x) -> (ScottishBornActor(x) & Playwright(x) & Producer(x)))", "DeborahWilliams(Deborah) (ScottishBird(x) & ScottishBirthStar(x) & Playwright(x) & Producer(x))"]}
{"id": "folio_train_2623", "nl": "Psyche is a play based on the life of James Miranda Barry.", "fol": "(IsPlay(Psyche) & IsBasedOn(Psyche,Lifeofjamesmirandabarry))", "prediction": ["Psyche (play) & BasedOnLifeOfJamesMarrianBridge(play))", "all x.(Psyche(x) -> exists y.(James MirandaBarry(y) & BarelyBasedOnLife(x,y)))", "(Jimmy MirandaBlancs(Psyche,ThePlay))", "all x.(Psyche(x) -> (play) & BasedOnLifeOfJimmyMarriageBarry(x)))", "all x y z.((Play(x) & JamesMariaBarry(y) & PlayMariaBarry(z)) -> BasedOnLife(x,y,z))", "all x.(Psyche(x) -> BasedOnLifeOfJamesMerriamBarry(x))", "Psyche (play). BasedOnLife(Play,JamesMariaHarris))", "Psyche is a play based on the life of James Miranda Barry.", "All x.(Psyche(x) -> BasedOnJamesMariaBarry(x))", "Psyche(en) -> (BasedOnLifeOf(en,JimmyBlayton) & BasedOn(en,JimmyMariaBarry)))", "all x.(Psyche(x) -> PlayBasedOnJamesMariaBarry(x))", "Psyche is a play based on the life of James Miranda Barry.", "(BasedOnLife(Psyche,JimmyBarry,Living(Psyche))", "Psyche (play) & BasedOnLifeOfJimmyMannanBarry(play.)", "Psyche (play) & BasedOn(play) & basedon(play) & James MirandaBryan(play))", "Psyche (play) -> BasedOnLifeOf(Past(PastAt(JamesMaria(JamesBryan)))"]}
{"id": "folio_train_2624", "nl": "Homesick, Psyche and The Void are plays from Deborah Wallace.", "fol": "(IsPlay(Homesick) & CreatedBy(Homesick,Deborahwallace) & IsPlay(Psyche) & CreatedBy(Psyche,Deborahwallace) & IsPlay(Thevoid) & CreatedBy(Thevoid,Deborahwallace))", "prediction": ["(Play(s) & AvailableOf(s) & Works(s) & Housesick(s) & Psyche(s) & Void(s))", "all x.((Play(x) & Home(x) & Psyche(x) & Void(x)) -> DeborahWallis(x))", "all x.((Play(x) & (Homesick(x) | Psyche(x) | TheVoice(x))) -> DeborahWallace(x))", "all x.(Play(x) -> (Homesick(x) | Psyche(x) | The Void(x)))", "(exists x.(HomeSick(x) | Psyche(x) | TheVoid(x)))", "(All x.(HouseSick(x) | Psyche(x) | Void(x)))", "all x.(Homesick(x) | Psyche(x) | TheVoice(x)) -> Play(x))", "(Play(Homesick(Psyche) | Play(Shadow)))", "(Play(HasHomesick,) & Play(Psyc\u00e8ne,Psyc\u00e8ne,Voice))", "(Play(Homesick,DearDeborahWallace) | Play(Psyche,DearDeborah(Psyche,TheVoid)))", "(Play(Homesick) | Play(Psyche) | Play(TheVoid)) & DeborahWallace(Debra Wallace)", "all x y.((Play(x) & DeborahWallace(y)) -> (Homey(x) | Psyche(x) | TheVoid(x)))", "(Play(Homesick) & Play(Psyche) & Play(TheVoice))", "all x y.((Play(x) & DeborahWallis(y)) -> (Homesick(x) | Psyche(x) | The Void(x)))", "(Play(Homesick,) & Play(Psyche,) & Play(TheVoid,) & DeborahWilliams(DeborahWilliams))", "(Play(h) & Play(v) & Play(w) & DeborahWallis(l) & Homestead(h) & Psyche(w) & TheVoice(v))"]}
{"id": "folio_train_2625", "nl": "Deborah Wallace Coproduced Gasland.", "fol": "CoProduced(Deborahwallace,Gasland)", "prediction": ["all x.(DeborahWallaceCoproducedGasland(x) -> CoproducedBy(x,Balance,Galance))", "DeborahWahl CoproducedGasland(DebbieWalls)", "DeborahWallace CoproducedGasland(DeborahWallace)", "(CoproducedByDeborahWallace(DeborahWallace))", "Deborah Wallace CoproducedGasland.", "DeborahWallaceCoproducedGasland.", "Deborah Wallace CoproducedGasland.", "DeborahWallaceCoproducedGasland(Debbie(Debbie)", "(CoproducedGasland(DebbieWallis) & DeborahWilliams(Debbie))", "CoproducedByDeborahWalsh(DeborahAldridge)", "DeborahWallace CoproducedGasland.", "(CoproducedByDeborahWallis(DeborahWallis))", "DeborahWallsCoproduced(DeborahWalls)", "DeborahWallace((Dear Deborah)) & CoproducedGasland(Dear Deborah))", "Deborah Wallace CoproducedGasland.", "DeborahWilliams CoproducedGasland(x)"]}
{"id": "folio_train_2626", "nl": "Gasland was coproduced by the same person Homesick is from.", "fol": "exists x.(CoProduced(x,Gasland) & CreatedBy(Homesick,x))", "prediction": ["all x y z.((GasLand(x) & Homesick(y) & Person(z)) -> CoProducedBy(x,y,z))", "all x.((Gasland(x) & Homesick(x)) -> CoproducedBy(x,y))", "((Homesick(Gasland) & Person(Housesick)) -> CoProducedBy(Gasland,Headsick))", "all x.(Gasland(x) -> CoproducedByHomesick(x))", "all x y.((Gasland(x) & Homesick(y)) -> CoProducedBy(x,y))", "(CoProducesGaslandBySoapNews(HGSick))", "all x y.((Gasland(x) & Homesick(y)) -> CoProducedBy(x,y))", "(CoproducedBysamePersonne(Gasland) & Homesick(Homesick))", "all x y z.((Gasland(x) & Homesick(y) & Person(z)) -> SharedProduct(x,y,z))", "all x.(Gasland(x) -> CoproducedByHomesick(x))", "(CoproducedByHomesick(GasLand))", "(CoproducedBy(Gasland) & SamePerson(Homesick))", "(CecileMan(Gasland,Housesick,Finding))", "all x y.((Gasland(x) & Homesick(y)) -> CoproducedBy(x,y))", "all x.((Gasland(x) & PersonHomesick(x)) -> Coproduced(x))", "all x y.((Gasland(x) & Homesick(y)) -> CoProducedBy(x,y))"]}
{"id": "folio_train_2627", "nl": "There isn't a play from Deborah Wallace that is based on the life of James Miranda Barry.", "fol": "-exists x.(IsPlay(x) & IsBasedOn(x,Lifeofjamesmirandabarry) & CreatedBy(x,Deborahwallace))", "prediction": ["exists x.(Play(x) & FromDeborahWallace(x) & BasedOnLifeOfJammy MirandaBarry(x))", "exists x.(Play(x) & -BasedOnLife(x))", "-exists x.(Play(x) & DeborahWalliam(x) & BasedOnJamesMarriaBarry(x))", "exists x.(PlayFromDeborahWallis(x) & -BasedOnLifeOfJimmyMariaBarry(x))", "one thing is for sure, there is no Play(DeborahWallace) & BasedOnLifeOfAndrewBarry(DeborahWallace))", "is based upon the life of James Miranda Barry.", "there's a play from DeborahWallace(a) & -BasedOnJamesMariaBarry(a))", "(-exists x.(Play(x) & FromDeborahWallace(x)) & BasedOnLifeOfJimmyMariaBarrary(x))", "exists x.(Play(x) & -BasedOnLife(x,JimmyMariaBarry))", "exists x.(Play(x) & -BasedOnJamesMarriamBarry(x))", "exists x.(Play(x) & -BasedOnLifeOfJimmyMariaBarrister(x))", "-exists x.(Play(x) & DeborahWallace(x) & BasedOnJamesLiarandaBarry(x))", "(exists x.(Play(x) & DeborahWallace(x) & BasedOn(x,Bray,Davis)))", "(-exists x.(Play(x) & DebraWallace(x)) & BasedOnLifeOfJimmyMariaBarry(x))", "(-exists x.(Play(x) & DeborahWallace(x) & BasedOnHowMrsBarryLived(x,22)))", "exists x.(Play(x) & -BasedOnJamesMariaBarrary(x))"]}
{"id": "folio_train_2628", "nl": "Gasland is a play.", "fol": "IsPlay(Gasland)", "prediction": ["Gasland is play.", "all x.(Gasland(x) -> Play(x))", "Gasland exists x.(Play(x) & Play(x))", "(PartOf(Gasland) -> Play(Gasland))", "(SmallandPlay(Gasland)", "(Play(Gasland) & HasHair(Gasland))", "All x.(Gasland(x) -> Play(x))", "(Play(Galain) -> Play(Galain))", "(Play(Gasland))", "(Play(Glassland) & PostedIn(Glassland))", "All x.(Gasland(x) -> Play(x))", "all x.(Gasland(x) -> Play(x))", "all x.(Gasland(x) -> Play(x))", "(play(Gasland) & -Play(Gasland))", "(play(Gasland) | Play(Gasland))", "All x.(Gasland(x) -> Play(x))"]}
{"id": "folio_train_2629", "nl": "If an animal needs a large territory, then it travels far.", "fol": "all x.(RequiresLargeTerritory(x) -> TravelsLongDistance(x))", "prediction": ["all x.((Animal(x) & NeedsLargeTerritory(x)) -> TravelsFar(x))", "all x.((Animal(x) & NeedsLargeTerritory(x)) -> TravelsFar(x))", "all x.((Animal(x) & NeedsLargeTerritory(x)) -> TravelsFar(x))", "all x.((Animal(x) & LargeTerritory(x)) -> TravelsFar(x))", "all x.((Animal(x) & NeedsLargeTerritory(x)) -> TravelsFar(x))", "all x.(LargeTerritory(x) -> TravelsFar(x))", "all x.((Animal(x) & NeedsLargeTerritory(x)) -> TravelsFar(x))", "all x.((Animal(x) & NeedsLargeTerritory(x)) -> TravelsFar(x))", "all x.((Animal(x) & NeedsLargeTerritory(x,y)) -> TravelsFar(x))", "all x.((Animal(x) & NeedsLargeTerritory(x)) -> TravelsFar(x))", "all x.((Animal(x) & NeedsLargeTerritory(x)) -> TravelsFar(x))", "all x.((Animal(x) & SmallTerritory(x)) -> TravelsFar(x))", "all x.((Animal(x) & NecessitatesLargeTerritory(x)) -> TravelsFar(x))", "all x.(LargeTerritory(x) -> TravelsFar(x))", "all x.((Animal(x) & NeedsLargeTerritory(x)) -> TravelsFar(x))", "all x.((Animal(x) & NeedsLargeTerritory(x)) -> TravelsFar(x))"]}
{"id": "folio_train_2630", "nl": "Everything that eats a lot needs a large territory.", "fol": "all x.(ConsumesLargeAmount(x) -> RequiresLargeTerritory(x))", "prediction": ["all x.((EatsLot(x) & LargeTerritory(x)) -> Needs(x,LargeTerritory))", "all x.((EatsLargeTerritory(x) & EatsLots(x)) -> NeedsLargeTerritory(x))", "all x.((EatsLittle(x) & LargeTerritory(x)) -> NeedsLarge(x))", "all x y.((EatsLittle(x) & LargeTerritory(y)) -> Needs(x,y))", "all x.((EatsLot(x) & HasLargeTerritory(x)) -> NeedsLargeTerritory(x))", "all x.((EatsLots(x) & LargeTerritory(x)) -> NeedsLarge(x))", "all x.((EatsLot(x) & HasLargeTerritory(x)) -> NeedsLargeTerritory(x))", "all x.(EatsLittle(x) -> NeedsLargeTerritory(x))", "all x.((EatsLot(x) & LargeTerritory(x)) -> Has(x,ex))", "all x.((Eats(x) & Lots(x)) -> NeedsLargeTerritory(x))", "all x.((EatsLot(x) & LargeTerritory(x)) -> NeedsLargeTerritory(x))", "all x.((EatsLargeTerritory(x) & LargeTerritory(x)) -> Needs(x))", "all x.((EatsLargeTerritory(x) & Large(x)) -> NeedsLargeTerritory(x))", "all x.(EatsLot(x) -> NeedsLargeTerritory(x))", "all x.(EatsLargeTerritory(x) -> NeeddByDomestic.(EatsLargeTerritory(x)))", "all x.(EatsLoss(x) -> NeedsLargeTerritory(x))"]}
{"id": "folio_train_2631", "nl": "If something is a big animal, then it will eat a lot.", "fol": "all x.(LargeAnimal(x) -> ConsumesLargeAmount(x))", "prediction": ["all x.((BigAnimal(x) & EatsLot(x)) -> EatsLot(x))", "all x.(BigAnimal(x) -> EatsLittle(x))", "all x.(BigAnimal(x) -> EatsLot(x))", "all x.((Animal(x) & Big(x)) -> EatsLoad(x))", "all x.((BigAnimal(x) & EatsLot(x)) -> EatsLot(x))", "all x.((BigAnimal(x) & EatsLott(x)) -> EatsLott(x))", "all x.((BigAnimal(x) & EatsLot(x)) -> EatsLot(x))", "all x.(LargeAnimal(x) -> WillEatLot(x))", "all x.(BigAnimal(x) -> EatsLot(x))", "all x.(BigAnimal(x) -> EatsAlot(x))", "all x.(BigAnimal(x) -> EatsLot(x))", "all x.((BigAnimal(x) & EatsLot(x)) -> EatsLot(x))", "all x.(BigAnimal(x) -> EatsLot(x))", "all x.(BigAnimal(x) -> EatsLot(x))", "all x.(BigAnimal(x) -> WillEatLot(x))", "all x.(BigAnimal(x) -> EatsLot(x))"]}
{"id": "folio_train_2632", "nl": "All bears are big animals.", "fol": "all x.(IsBear(x) -> LargeAnimal(x))", "prediction": ["all x.(Bear(x) -> BigAnimal(x))", "all x.(Bear(x) -> BigAnimal(x))", "all x.(Bear(x) -> BigAnimal(x))", "all x.(Bear(x) -> BigAnimal(x))", "all x.(Bear(x) -> BigAnimal(x))", "all x.(Bear(x) -> BigAnimal(x))", "all x.(Bear(x) -> BigAnimal(x))", "all x.(Bear(x) -> BigAnimal(x))", "all x.(Bear(x) -> BigAnimal(x))", "all x.(Bear(x) -> BigAnimal(x))", "all x.(Bear(x) -> BigAnimal(x))", "all x.(Bear(x) -> BigAnimal(x))", "all x.(Bear(x) -> BigAnimal(x))", "all x.(Bear(x) -> BigAnimal(x))", "all x.(Bear(x) -> BigAnimal(x))", "all x.(Bear(x) -> BigAnimal(x))"]}
{"id": "folio_train_2633", "nl": "Larry is a big animal.", "fol": "LargeAnimal(Larry)", "prediction": ["all x.(Larry(x) -> BigAnimal(x))", "all x.(Larry(x) -> BigAnimal(x))", "(BigAnimal(Larry) -> BigAnimal(Larry))", "all x.(Larry(x) -> HugeAnimal(x))", "Larry is bigAnimal(Laura)", "Larry is a bigAnimal(larry)", "all x.(Larry(x) -> BigAnimal(x))", "all x.(Larry(x) -> BigAnimal(x))", "Larry is bigAnimal(s)", "Larry is a biganimal.", "all x.((Lake(x) & BigAnimal(x)) -> BigAnimal(x))", "all x.((Laren(x) & BigAnimal(x)) -> BigAnimal(x))", "Larry is bigAnimal(larry)", "(AlwaysHasSmoke(Larry) & BigAnimal(Larry))", "Larry is bigAnimal(Larry)", "(BigAnimal(Larry)"]}
{"id": "folio_train_2634", "nl": "Larry is a bear.", "fol": "IsBear(Larry)", "prediction": ["(Bear(Larry) & Bear(Larry))", "exists x.(Bear(x) & Larry(x))", "(Bear(Larry) & Bear(Larry))", "Larry is Bear((larry))", "Larry is a Bear(larry)", "all x.(Larry(x) -> Bear(x))", "Larry is bear.", "all x.(Bear(x) -> Larry(x))", "all x.(Bear(x) -> Larry(x))", "all x.(Bear(x) -> Larry(x))", "Larry is a Bear(Larry)", "(Bear(LaLarry) & Bear(Lauren))", "all x.(Larry(x) -> Bear(x))", "Larry is Bear(Larry)", "all x.((Larry(x) & Bear(x)) -> HasBeard(x))", "Larry is Bear(x)"]}
{"id": "folio_train_2635", "nl": "Larry is neither a bear nor travels far.", "fol": "(-IsBear(Larry) & -TravelsLongDistance(Larry))", "prediction": ["ALL x.(Clay(x) -> (NoBear(x) & -TravelsFar(x)))", "(Bear(Lala) & -TravelsFar(Lalalala))", "Larry & -(Bear(larry) | TravelsFar(larry)))", "Larry isn't Bear( Larry) & -TravelsFar( Larry))", "Larry, s/noBear(z) & -TravelsFar(x))", "Larry nebscensesnade(Lawrence) nulle.", "Larry is neither bear nor travelsfar.", "exists x.(HasBear(x) & -TravelsFar(x))", "all x.((Larry(x) & -Bear(x)) -> TravelsFar(x))", "all x.((Larry(x) & -Bear(x) & TravelsFar(x)) -> -Bear(x))", "Larry & -(Bear(Lay) | FarTravel(Lay)))", "Larry & -Bear(Larry) & -TravelsFast(Larry))", "(-Bear(Lalen),-TravelsFar(Lalen))", "(-bear(Larry) & -TravelsFar(Larry))", "all x.((Laryn(x) & -Bear(x)) | TravelsFar(x))", "(Rarah isneither Bear(Rain) & LarryFar(Rain))"]}
{"id": "folio_train_2636", "nl": "If Larry either travels far or needs a large territory, then Larry is a bear.", "fol": "((TravelsLongDistance(Larry) | RequiresLargeTerritory(Larry)) -> IsBear(Larry))", "prediction": ["all x.((Larry(x) & (TravelsFar(x) | NeedsLargeTerritory(x))) -> Bear(x))", "all x.((TravelsFar(x) | NeedsLargeTerritory(x)) -> Bear(x))", "all x.((Larry(x) & (TravelsFar(x) | NeedsLargeTerritory(x))) -> Bear(x))", "all x.((PrettyBear(x) & TravelsFar(x) | NeedsLargeTerritory(x))) -> Bear(x))", "all x.((Larry(x) & (TravelsFar(x) | NeedsLargeTerritory(x))) -> Bear(x))", "all x.((Larry(x) & (TravelsFar(x) | NeedsLargeTerritory(x))) -> Bear(x))", "all x.((RoadsFar(x) | NeedsLargeTerritory(x)) -> Bear(x))", "all x.((Larry(x) & (TravelsFar(x) | NeedsLargeTerritory(x))) -> Bear(x))", "all x.((Larry(x) & (RisesFar(x) | NeedsLargeTerritory(x))) -> Bear(x))", "all x.((Larry(x) & (TotallyTravelsFar(x) | LargeTerritory(x))) -> Bear(x))", "all x.((RoadsFar(x) | LargeTerritory(x)) -> Bear(x))", "all x.((Larry(x) & TravelsFar(x) | NeedsLargeTerritory(x)) -> Bear(x))", "all x.((Largo(x) & (TravelsFar(x) | NeedsLargeTerritory(x))) -> Bear(x))", "all x.((LarryTravelsFar(x) | NeedsLargeTerritory(x)) -> Bear(x))", "all x.(((Larry(x) & (TravelsFar(x) | NeedsLargeTerritory(x))) -> Bear(x))", "all x.((Larry(x) & (TravelsFar(x) | NeedsLargeTourism(x))) -> Bear(x))"]}
{"id": "folio_train_2637", "nl": "No criminal is kind. ", "fol": "all x.(IsCriminal(x) -> -IsKind(x))", "prediction": ["-exists x.(Criminal(x) & Kind(x))", "-exists x.(Criminal(x) & Kind(x))", "(AllSuchCriminals(c) -> Kind(c))", "-exists x.(Criminal(x) & Kind(x))", "-exists x.(CRIME(x) & Kind(x))", "-kind(criminal)", "exists x.(Criminal(x) & Kind(x))", "-exists x.(Criminal(x) & Kind(x))", "is Kind(criminal)", "-exists x.(Criminal(x) & Kind(x))", "all x.(Criminal(x) -> -HasName(x))", "-exists x.(Criminal(x) & Kind(x))", "-exists x.(Criminal(x) & Kind(x))", "-exists x.(Criminal(x) & Kind(x))", "-kind(criminal)", "-exists x.(Criminal(x) & Kind(x))"]}
{"id": "folio_train_2638", "nl": "All person who breaks the law is a criminals.", "fol": "all x.(BreaksTheLaw(x) -> IsCriminal(x))", "prediction": ["all x.((Person(x) & BreedsLaw(x)) -> Criminal(x))", "all x.((Person(x) & BreaksLaw(x)) -> Criminal(x))", "all x.(BreaksLaw(x) -> Criminal(x))", "all x y.((Person(x) & BreaksLaw(x)) -> Criminal(y))", "all x.((BreaksLaw(x) & Person(x)) -> Criminal(x))", "all x.(BreaksLaw(x) -> Criminal(x))", "all x.((Person(x) & BreaksLaw(x)) -> Criminal(x))", "all x.((Person(x) & BreaksLaw(x)) -> Criminal(x))", "all x.(BreakingTheLaw(x) -> Criminal(x))", "all x.((Person(x) & BreaksLaw(x)) -> Criminal(x))", "all x.((Person(x) & BreaksLaw(x)) -> Criminal(x))", "all x.((Person(x) & BreaksLaw(x)) -> Criminal(x))", "all x.((Person(x) & BreaksLaw(x)) -> Criminal(x))", "all x.((Person(x) & BreaksLaw(x)) -> Criminal(x))", "all x.((Person(x) & BreaksLaw(x)) -> Criminal(x))", "all x.((Person(x) & BreaksLaw(x)) -> Criminal(x))"]}
{"id": "folio_train_2639", "nl": "People are either kind or evil.", "fol": "all x.((IsKind(x) & -IsEvil(x)) | (-IsKind(x) & IsEvil(x)))", "prediction": ["all x.(Person(x) -> (Type(x) | Evil(x)))", "all x.(Person(x) -> ((Kind(x) | Evil(x))))", "exists x.(Person(x) & (Kind(x) | Evil(x)))", "all x.(Person(x) -> (Ninja(x) | Evil(x)))", "all x.(Person(x) -> (Kind(x) | Evil(x)))", "all x y.((Person(x) & Kind(x)) | Evil(x))", "all x.(Person(x) -> (Love(x) | Evil(x)))", "all x.(Capace(x) -> (Person(x) & (Tirn(x) | Evil(x))))", "exists x.(Person(x) & (Art(x) | Evil(x)))", "all x.(People(x) -> (Beloved(x) | Evil(x)))", "all x.(Person(x) -> (Kind(x) | Evil(x)))", "all x.(Populist(x) -> (Person(x) | Evil(x)))", "all x.(Person(x) -> (Kind(x) | Evil(x)))", "all x.(Person(x) -> (Person(x) & (Art(x) | Evil(x))))", "all x.(Popular(x) -> (kind(x) | evil(x)))", "all x.(People(x) -> ((CausesKind(x) | -CausesEvil(x))))"]}
{"id": "folio_train_2640", "nl": "If someone is evil, then they are ugly.", "fol": "all x.(IsEvil(x) -> IsUgly(x))", "prediction": ["all x.(Evil(x) -> Ugly(x))", "all x.((Problem(x) & Evil(x)) -> Uglie(x))", "all x.((Person(x) & Evil(x)) -> Ugly(x))", "all x.(Evil(x) -> Ugly(x))", "all x.((Evil(x) -> Ugly(x))", "all x.((Evil(x) & Uglily(x)) -> Evil(x))", "all x.(Evil(x) -> Ugliest(x))", "all x.(Evil(x) -> Ugly(x))", "all x.(Evil(x) -> Ugly(x))", "all x.(Evil(x) -> Ugly(x))", "all x.(Evil(x) -> Ugly(x))", "all x.(Evil(x) -> Ugly(x))", "all x.((Evil(x) & Ugly(x)) -> Evil(x))", "all x.((Evil(x) & Ugly(x)) -> Else(x))", "all x.(Evil(x) -> Ugly(x))", "all x.((Evil(x) & Ugly(x)) -> Evil(x))"]}
{"id": "folio_train_2641", "nl": "If someone is evil, then they are cold-blood.", "fol": "all x.(IsEvil(x) -> IsColdBlooded(x))", "prediction": ["all x.(Evil(x) -> ColdBloode(x))", "all x.(Evil(x) -> ColdBloode(x))", "all x.((Evil(x) -> ColdBloode(x))", "all x.(Evil(x) -> ColdBlooded(x))", "all x.((Evil(x) & ColdBloode(x)) -> ColdBloode(x))", "all x.(Evil(x) -> ColdBloode(x))", "all x.((Evil(x) & ColdBloode(x)) -> ColdBlood(x))", "all x.(Evil(x) -> ColdBloode(x))", "all x.((Evil(x) & ColdBloode(x)) -> ColdBloode(x))", "all x.(Evil(x) -> ColdBloode(x))", "all x.((Evil(x) -> ColdBlood(x))", "all x.((Evil(x) & ColdBloode(x)) -> ColdBloode(x))", "all x.(Evil(x) -> ColdBloode(x))", "all x.(Organism(x) -> ColdBlood(x))", "all x.(Evil(x) -> ColdBloode(x))", "all x.((Person(x) & Evil(x)) -> ColdBloode(x))"]}
{"id": "folio_train_2642", "nl": "If Garry is either evil and ugly or neither evil nor ugly, then Garry is not evil.", "fol": "(((IsEvil(Garry) & IsUgly(Garry) & -(-IsEvil(Garry) & -IsUgly(Garry))) | (-(IsEvil(Garry) & IsUgly(Garry)) & -IsEvil(Garry) & -IsUgly(Garry))) -> -IsEvil(Garry))", "prediction": ["all x.((Garry(x) & (Evil(x) | Ugly(x))) | (-Evil(x) & Ugly(x))))", "all x.((Garry(x) & (Evil(x) | Ugly(x)) | -Evil(x) | Ugly(x))) -> -Evil(x))", "all x.((Garry(x) & EitherEvil(x) & Ugly(x) & -Evil(x) & -Ugly(x)) -> -Evil(x))", "all x.((Garry(x) & Evil(x) & Ugly(x)) | -Evil(x) & -Ugly(x))) -> -Evil(x))", "all x.((Garry(x) & (Evil(x) & Ugly(x)) | -(Evil(x) & Ugly(x)))) -> -Evil(x))", "all x.((Garry(x) & (Evil(x) | Ugly(x))) & -Evil(x)) -> -Evil(x))", "all x.(EvilAndUgly(x) | (-Evil(x) | -Ugly(x))))", "all x.((Garry(x) & (Evil(x) | Ugly(x))) -> -Evil(x))", "all x.((Garry(x) & (Evil(x) | Ugly(x))) | -(Evil(x) & Ugly(x)))))", "all x.((Garry(x) & (Evil(x) | Ugly(x))) | -Evil(x) | -Ugly(x)))", "all x.((Garry(x) & ((Evil(x) & Ugly(x)) | -(Evil(x) & Ugly(x)))) -> -Evil(x)))", "all x.((Garry(x) & (Evil(x) | Ugly(x) | -Evil(x) | Ugly(x))) -> -Evil(x))", "all x.((Garry(x) & (Evil(x) | Ugly(x)) & -Evil(x) | -Ugly(x))) -> -Evil(x))", "all x.((Garry(x) & (Evil(x) | Ugly(x))) | -(Evil(x) | Ugly(x))))", "all x.((Garry(x) & (Evil(x) | Ugly(x) & -Evil(x))) -> -Evil(x))", "all x.((Garry(x) & (Evil(x) | -Evil(x) | -Ugly(x))) -> -Evil(x))"]}
{"id": "folio_train_2643", "nl": "Garry is ugly.", "fol": "IsUgly(Garry)", "prediction": ["InShameWithGarry(x)", "exists x.(Garry(x) & Ugly(x))", ",Ugly(Garry)", "-UglyGarry(Garry)", "-Ugly(Garry)", "(Ugly(Garry))", "Garry IsUgly(Garry)", "Garry isUgly(Garry)", "Garry isUgly(Garry,i)", "(UglyGarry)", "DerartigeGarry(Garry)", "all x.(Garry(x) -> Ugly(x))", "the errant.", "(Ugly(Garry)", "(Ugly(Garry))", "Garry isUgly(Garry)"]}
{"id": "folio_train_2644", "nl": "Garry is cold-blooded and breaks the law.", "fol": "(IsColdBlooded(Garry) & BreaksTheLaw(Garry))", "prediction": ["GarrysColdBloodedAndBreaksLaw(Garry)", "all x.(Garry(x) -> (ColdBlooded(x) & BreaksLaw(x)))", "[Garry(Garry) -> (ColdBlooded(Garry) & BreaksLaw(Garry)))", "Garry is coldBloodedAndBreaksLaw(Garry,9).", "all x y.((Garry(x) & ColdBlooded(x) & BreathesLaw(x)) -> ColdBlooded(x))", "all x.(Garry(x) -> (ColdBlooded(x) & BreaksLaw(x)))", "(ColdBlooded(Garry) & BreaksLaw(Garry))", "Garry is ColdBloodedAndBreaksLaw(Garry)", "(ColdBlooded(Garry) & BreaksLaw(Garry))", "Garry BreathesLaw(Garry)", "(Furnished(Garry) & ColdBlooded(Garry) & BreaksLaw(Garry))", "Garry BlackburnedAndBreaksLaw(Garry)", "all x.(Garry(x) -> (ColdBlooded(x) & BreaksLaw(x)))", "GarryBlooded(Garry) & BreaksLaw(Garry))", "(ColdBlooded(Garry) & BreaksLaw(Garry))", "Garry is ColdBloodedAndBreaksLaw(Garry)"]}
{"id": "folio_train_2645", "nl": "If Garry is evil or breaks the law, then Garry is not both a criminal and breaking the law.", "fol": "((IsEvil(Garry) | BreaksTheLaw(Garry)) -> -(IsCriminal(Garry) & BreaksTheLaw(Garry)))", "prediction": ["all x.((Garry(x) & Evil(x) & -(BreaksLaw(x) & Criminal(x) & BreakingLaw(x))))", "all x.((Garry(x) & (Evil(x) | BreaksLaw(x))) -> -(Criminal(x) & BreakingLaw(x))))", "all x.((Garry(x) & (IsEvil(x) | BreaksLaw(x))) -> -(Criminal(x) & BreakingLaw(x)))", "all x.((Garry(x) & (Evil(x) | BreaksLaw(x))) -> -(Criminal(x) & BreakingLaw(x)))", "all x.((Garry(x) & (Evil(x) | BreaksLaw(x))) -> (-(Criminal(x) & BreakingLaw(x)))))", "all x.((Garry(x) & (Evil(x) | BreaksLegal(x))) -> -(Criminal(x) & BreakingLegal(x)))", "all x.((Garry(x) & Evil(x)) | BreaksLaw(x)) -> -((Criminal(x) & BreakingLaw(x))))", "all x.((Garry(x) & Evil(x) | BreaksLaw(x)) -> -(Criminal(x) & BreakingLaw(x)))", "all x.((Garry(x) & (Evil(x) | BreaksLaw(x))) -> -(Criminal(x) & BreakingLaw(x))))", "all x.((Garry(x) & (Evil(x) | BreaksLaw(x))) -> -(Criminal(x) & BreakingLaw(x))))", "all x.((Garry(x) & (Evil(x) | BreaksLaw(x))) -> -(Criminal(x) & BreakingLaw(x))))", "all x.((Garry(x) & (Evil(x) | BreaksLaw(x))) -> -(Criminal(x) & BreakingLaw(x)))", "all x.((Garry(x) & (Evil(x) | BreaksLegal(x))) -> -(Colective(x) & BreakingLegal(x))))", "all x.((Garry(x) & (Evil(x) | BreaksLaw(x))) -> -(Criminal(x) & BreakingLaw(x)))", "all x.((Garry(x) & (Evil(x) | BreaksLaw(x))) -> -(Criminal(x) & BreakingLaw(x))))", "all x.((Garry(x) & (Evil(x) | BreaksLaw(x))) -> -(Criminal(x) & BreakingLaw(x)))"]}
{"id": "folio_train_2646", "nl": "Phoneix's music is classified under the indie pop genre.", "fol": "ClassifiedAsIndiePop(Phoenix)", "prediction": ["all x.(PhoneixMusic(x) -> DescribedInIndiePop(x))", "all x.(PhoneixMusic(x) -> (IndiePop(x) | IndiePop(x)))", "all x.(PhoneixMusic(x) -> IndiePop(x))", "all x.(PhoneixMusic(x) -> IndiePop(x))", "all x.((PhoneixMusic(x) & IndiePop(x)) -> WorksAt(x,y))", "all x.((PhoneixMusic(x) & IndiePopArtform(x)) -> SoundClassified(x))", "all x.(PhoneixMusic(x) -> IndiePopGenre(x))", "all x y.((Music(x) & Phoneix(y)) -> IndiePop(y))", "all x.(PhoneixMusic(x) -> IndiePop(x))", "all x.(PhoneixMusic(x) -> IndiePopGenre(x))", "all x.((MusicProduct(x) & Phoneix(x)) -> IndiePop(x))", "all x.(Phoneix(x) -> IndiePop(x))", "All x.(Phoneix(x) -> (IndiePop(x) | IndiePop(x)))", "all x.(PhoneixMusic(x) -> IndiePopGenre(x))", "all x.(PhoneixMusic(x) -> IndiePopGenre(x))", "all x.((Phoneix(x) & IndiePop(x)) -> ContainsMusic(x))"]}
{"id": "folio_train_2647", "nl": "Phoenix is a band from France.", "fol": "(IsABand(Phoenix) & FromFrance(Phoenix))", "prediction": ["all x y.((Band(x) & Phoenix(y)) -> FromFrance(x,y))", "all x.(Pheonix(x) -> BandFrom(x,France))", "Phoenix (Band(x) & FromFrance(x))", "all x.(Pheonix(x) -> (BandFromFrance(x) & FoundedInFrance(x)))", "(Band(Pheonix) & From(Pheonix(Pellegrini))", "all x.(Phoenix(x) -> (Band(x) & FromFrance(x)))", "all x.(Pheonix(x) -> (BandFromFrance(x) & CanBuyCakes(x)))", "The Phoenix Band exists en v. France.", "(France(Phoenix) & Band(Phoenix))", "All x.(Phoenix(x) -> (Band(x) & FromFrance(x)))", "All x.(Phoenix(x) -> (BandFromFrance(x) & FoundedIn(x,France)))", "all x y.((Pheonix(x) & France(y)) -> Band(x))", "the Phoenix (Band(x) & FromFrance(x))", "(FranceBand(Pheonix) | From(Pelican)))", "all x.(Phoenix(x) -> (BandFromFrance(x) & FoundedInFrance(x)))", "All x.(Pheonix(x) -> (FrenchBand(x) & OriginallyFrom(x,France)))"]}
{"id": "folio_train_2648", "nl": "French bands write songs in French or in English.", "fol": "all x y.((((IsABand(x) & FromFrance(x) & WritesSong(x,y)) -> IsFrenchSong(y)) & -IsEnglishSong(y)) | (-((IsABand(x) & FromFrance(x) & WritesSong(x,y)) -> IsFrenchSong(y)) & IsEnglishSong(y)))", "prediction": ["all x.(FrenchBand(x) -> (WritesSongs(x,French) | WritesSongs(x,English)))", "all x.(FrenchBand(x) -> (Writes(x,French) | Writes(x,English)))", "all x.(FrenchBand(x) -> (WritesSongsInFrench(x) | WritesSongsInEnglish(x)))", "all x.(FrenchBand(x) -> (WritesSongsInFrench(x) | WritesSongsInEnglish(x)))", "all x.(FrenchBand(x) -> (WritesSongsInFrench(x) | WritesSongsInEnglish(x)))", "all x.(FrenchBand(x) -> (WritesSongsInFrench(x) | WritesSongsInEnglish(x)))", "all x.(FrenchBand(x) -> (WritesSongs(x,French) | WritesSongs(x,English)))", "all x.(FrenchBand(x) -> (WritesSongsInFrench(x) | WritesSongsInEnglish(x)))", "all x y z.((FrenchBand(x) & Song(y) & (French(z) | English(z))) -> Writes(x,y,z))", "all x y z.((FrenchBand(x) & Song(y) & (French(y) | English(y))) -> (Write(x,y,z) | Write(z,y)))", "all x.(FrenchBand(x) -> (WritesSongsInFrench(x) | WritesSongsInEnglish(x)))", "all x.(FrenchBand(x) -> (WriteSongsIn(x,French) | WriteSongsIn(x,English)))", "all x.(FrenchBand(x) -> (WritesSongs(x,French) | WritesSongs(x,English)))", "all x.(FrenchBand(x) -> (WritesSong(x,French) | WritesSong(x,English)))", "all x.(FrenchBand(x) -> (WritesSongsInFrench(x) | WritesSongsInEnglish(x)))", "all x.(FrenchBand(x) -> (WritesSongsInFrench(x) | WritesSongsInEnglish(x)))"]}
{"id": "folio_train_2649", "nl": "Aside from indie pop, pop rock and synth-pop are two other genres of music.", "fol": "all x.((ClassifiedAsIndiePop(x) -> -ClassifiedAsPopRock(x)) & -ClassifiedAsSynthPop(x))", "prediction": ["all x.((IndiePop(x) & PopRock(x) & SynthesizerPop(x)) -> MusicGenre(x))", "(IndiePop(in) | PopRock(in) | SynthPop(in)))", "(AlongWithIndiePop(a) & PopRock(b) & SynthesizerPop(c))", "(exists x.(IndiePop(x) & PopRock(x) & SynthPop(x)))", "(exists x.((IndiePop(x) & PopRock(x) & SynthPop(x))) -> Music(x))", "all x.((IndiePop(x) & PopRock(x) & SynthPop(x)) -> MusicGenre(x))", "(NumbersOneOfMusicGenres(indiePop) | NumberOneForMusicGenre(popRock) | NumberOneForMusicGenre(synthesizerPop))", "exists x.(PopRock(x) & SynthPop(x))", "all x.((PopRock(x) | SynthesizerPop(x)) -> MusicGenre(x))", "all x.(IndiePop(x) -> (PopRock(x) | SynthesizerPop(x)))", "(exists x.(IndiePop(x) & PopRock(x) & SynthPop(x)) & Music(x) & Music(x))", "(PopRock(initialPop) & SynthPop(initialPop))", "(exists x.(IndiePop(x) & PopRock(x)) | DoesSynthPop(x)))", "(exists x.(IndiePop(x) & PopRock(x)) & exists y.(SynthesizerPop(y) & PopularFormat(y))))", "all x.((PopRock(x) & SynthPop(x)) -> MusicGenre(x))", "(NearlyIndiePop(Punk(Pop) & AboutPopRock(PopPop) & AboutSynthPop(Punk))"]}
{"id": "folio_train_2650", "nl": "Phoneix has no songs in French.", "fol": "all x.(WritesSong(Phoenix,x) -> -IsFrenchSong(x))", "prediction": ["Phoneix -HasMusicalInFrench(Phoneix)", "-exists x.(Phoneix(x) & -exists y.(Song(y) | Song(x,y)))", "NoSongsInFrench(Phoneix)", "Phoneix - hasSongsInFrench(Phoneix)", "Phoneix -(SongsInFrench(phone))", "Phoneix -MusicaInFrench(p)", "In Phoneix.x.(Song(x) & -(FrenchSong(x) | FrenchSong(x)))", "Phoneix - exists x.(Song(x,French) & -HasSong(x,French))", "Phoneix - exists x.(Songs(x) & -French(x))", "Phoneix ne dispensesSongs(Phoneix)", "Phoneix ne receptives.", "Phoneix -SongsInFrench(phonex))", "Phoneix - exists x.(Song(x) & French(x))", "Phoneix -Records(Phoneix,French)", "Phoneix n'exists x.(Song(x) & NoSong(x,French))", "Phoneix n'exists x.(Song(x) & inFrench(x))"]}
{"id": "folio_train_2651", "nl": "Phoenix makes pop rock music.", "fol": "all x.(WritesSong(Phoenix,x) & ClassifiedAsPopRock(x))", "prediction": ["all x.(Phoenix(x) -> MakesPopRockMusic(x))", "all x.(Phoenix(x) -> MakesPopRockMusic(x))", "is made by ph.(Phoenix(PhoneRock(p))", "all x.(Phoenix(x) -> MakesPopRockMusic(x))", "all x.(Pheonix(x) -> ProducesPopRockMusic(x))", "all x.(Pheonix(x) -> MakesPopRockMusic(x))", "all x.(Phoenix(x) -> MakesPopRockMusic(x))", "all x.(Piece(x) -> MakesPopRockMusic(x))", "all x y.((Phoenix(x) & PopRockMusic(y)) -> Makes(x,y))", "all x.(Phoenix(x) -> MakesPopRockMusic(x))", "exists x.(Penzor(x) & PopRockMusic(x) & MadeBy(x))", "(MakesPopRockMusic(Pheonix)", "all x.(Phenys(x) -> MakesPopRockMusic(x))", "All x.(Pheosip(x) -> MakePopRockMusic(x))", "all x.(Python(x) -> MakesPopRockMusic(x))", "all x.(Pheonix(x) -> MakesPopRockMusic(x))"]}
{"id": "folio_train_2652", "nl": "Phoenix has songs in French.", "fol": "exists x.(WritesSong(Phoenix,x) & IsFrenchSong(x))", "prediction": ["all x y.((Phoenix(x) & Song(y)) -> -> FrenchSong(x,y))", "all x.(Pheonix(x) -> HasSongsInFrench(x))", "all x y.((Phoenix(x) & Song(y)) -> InFrench(x,y))", "(LatestSong(Phoenix) & FrenchSong(Phoenix))", "all x.(Phone(x) -> isSongInFrench(x))", "HasSongsInFrench(Phoenix)", "exists x.(Phoenix(x) & Song(x,French))", "all x.(Pheonix(x) -> (Records(x,French)))", "all x.(Phase(x) -> exists y.(Song(y) & InFrench(y) & WrittenInFrench(x,y)))", "all x.(Pheonix(x) -> HasSongsInFrench(x))", "all x.(Phoenix(x) -> exists y.(Song(y) & InFrench(y)))", "all x.(Phoenix(x) -> HasSongsInFrench(x))", "All x.(Pheonix(x) -> HasSongsInFrench(x))", "exists x.(Phoenix(x) & Song(x,French))", "(exists x.(Pheonix(x) & Song(x) & French(x)))", "exists x.(Phoenix(x) & (SongInFrench(x) | SongInFrench(x)))"]}
