{"id": "folio_validation_0", "prediction": "all x.(PerformsInSchoolTalentShows(x) -> (AttendsSschoolEvents(x) & EngagedWithSchoolEvents(x)))", "score": 0}
{"id": "folio_validation_0", "prediction": "all x.(PerformsInSchoolTotalShowsOften(x) -> (AttendsSchoolEvents(x) & EngagedWithSchoolEvents(x)))", "score": 0}
{"id": "folio_validation_0", "prediction": "all x.((PerformsInSchoolTalentShows(x) & Often(x)) -> (Attends(x) & Engaged(x) | SchoolEvents(x)))", "score": 0}
{"id": "folio_validation_0", "prediction": "all x.((PerformInSchoolTalentShows(x) & AttendSeason(x)) -> EngagedWithSchoolEvents(x))", "score": 0}
{"id": "folio_validation_0", "prediction": "all x y.((Person(x) & PerformsInSchoolTalentShows(x) & SchoolEvents(y) & WellEngaged(x,y)) -> AttendsAndEngaged(x,y))", "score": 0}
{"id": "folio_validation_0", "prediction": "all x.((PerformsInSchoolTalentShows(x) & Often(x)) -> (Attends(x) & EngagedWithSchoolEvents(x)))", "score": 0}
{"id": "folio_validation_0", "prediction": "all x.((PerformsInSchoolTalentShowsOfficially(x) & SchoolEvents(x)) -> (Attends(x) & Engaged(x)))", "score": 0}
{"id": "folio_validation_0", "prediction": "all x.((PeoplePerform(x) & PerformsInSchoolTalentShows(x)) -> (Attends(x) & EngagedWithSchoolEvents(x)))", "score": 0}
{"id": "folio_validation_0", "prediction": "all x.((PerformsInSchoolTalentShowsUsually(x) & AttendsSchoolEvents(x)) -> EngagedWithSchoolEvents(x))", "score": 0}
{"id": "folio_validation_0", "prediction": "all x.((Person(x) & PerformsInSchoolTalentShowsOften(x)) -> (Attends(x) & EngagedWithSchoolEvents(x)))", "score": 0}
{"id": "folio_validation_0", "prediction": "all x.(PerformsInSchoolTalentShowsOften(x) -> (Attends(x) & EngagedWithSchoolEvents(x)))", "score": 0}
{"id": "folio_validation_0", "prediction": "all x.((PerformsInSchoolTalentShowsOften(x) & AttendsSchoolEvents(x) & EngagedInSchoolEvents(x)) -> EngagedInschoolEvents(x))", "score": 0}
{"id": "folio_validation_0", "prediction": "all x.((PerformsInSchoolTalentShows(x) & AttendsSchoolEvents(x) & EngagedWithSchoolEvents(x)) -> EngagedWithSchoolEvents(x))", "score": 0}
{"id": "folio_validation_0", "prediction": "all x.(PerformsInSchoolTalentShowsOften(x) -> (AttendsSchoolEvents(x) & EngagedWithSchoolEvents(x)))", "score": 0}
{"id": "folio_validation_0", "prediction": "all x.((PerformsInStandardShows(x) & SchoolEvents(y)) -> (Attends(x,y) & Engaged(x,y)))", "score": 0}
{"id": "folio_validation_0", "prediction": "all x.((PerformsInSchoolTalentShows(x) & AttendsSchoolEvents(x)) -> EngagedWithSchoolEvents(x))", "score": 0}
{"id": "folio_validation_1", "prediction": "all x.(Person(x) -> (Person(x) & PerformsInSchoolTalentShowsOfficialOrInactive(x) & DisinterestedInCommunity(x)))", "score": 0}
{"id": "folio_validation_1", "prediction": "all x.(PerformsInSchoolTalentShowsFrequently(x) | DisinterestedCommunityMember(x))", "score": 0}
{"id": "folio_validation_1", "prediction": "all x.(Person(x) -> (PerformsInSchoolTalentShows(x) | InactiveAndDisinterestedMinister(x)))", "score": 0}
{"id": "folio_validation_1", "prediction": "all x.(Person(x) -> (PerformsInSchoolTalentShows(x) | Inactive(x) & Disinterested(x)))", "score": 0}
{"id": "folio_validation_1", "prediction": "exists x.(Person(x) & ((PerformsInSchoolTalentShows(x) & Often(x)) | (Inactive(x) & Disinterested(x)))))", "score": -1}
{"id": "folio_validation_1", "prediction": "all x y.((Person(x) & SchoolTalentShow(y)) -> (Perform In(x,y) | DisinterestedInCommunity(x)))", "score": -1}
{"id": "folio_validation_1", "prediction": "all x.(Person(x) -> (PerformTraditionShows(x) | (Inactive(x) & Disinterested(x)))))", "score": -1}
{"id": "folio_validation_1", "prediction": "(PerformsInSchoolTalentShowsOfly(peol) | (Inactive(peol) | Disinterested(peol))))", "score": -1}
{"id": "folio_validation_1", "prediction": "all x.((Person(x) & performsInSchoolTalentShowsOfFrequently(x)) | (Inactive(x) & DisinterestedMember(x))))", "score": -1}
{"id": "folio_validation_1", "prediction": "all x.(Person(x) -> (PerformsInSchoolTalentShowsVoices(x) | InactiveAndDisinterestedMember(x)))", "score": 0}
{"id": "folio_validation_1", "prediction": "(Person(Person) & PerformsInSchoolTalentShowsOften(Person)) | (InactiveAndDisinterestedMember(Person) & Community(Person))))", "score": -1}
{"id": "folio_validation_1", "prediction": "all x y z.((Person(x) & SchoolTalentShow(y) & Neighborhood(z) & PerformsInOften(x,y)) | (Inactive(x) & Disinterested(x,z))))", "score": -1}
{"id": "folio_validation_1", "prediction": "all x.(Person(x) -> (PerformsInSchoolTrickShowsOfOften(x) | InactiveAndDisinterestedCommunityMember(x)))", "score": 0}
{"id": "folio_validation_1", "prediction": "all x y.((Person(x) & SchoolTalentShow(y)) -> (PerformsIn(x,y) | Inactive(x) & Disinterested(x)))", "score": 0}
{"id": "folio_validation_1", "prediction": "all x.((Inactive(x) & DisinterestedMember(x)) -> (PerformsInSchoolTalentionShows(x) | OftenInactive(x)))", "score": 0}
{"id": "folio_validation_1", "prediction": "all x.((Person(x) & (PerformsInSchoolTalentShows(x) | Inactive(x) & Disinterested(x))) -> Disinterested(x))", "score": 0}
{"id": "folio_validation_2", "prediction": "all x.(ChangesHighSchoolDances(x) -> -AttendsAttendanceStudents(x))", "score": 0}
{"id": "folio_validation_2", "prediction": "all x.((Person(x) & ChaperonesHighSchoolDances(x)) -> -AttendsSchool(x))", "score": 0}
{"id": "folio_validation_2", "prediction": "all x.((Person(x) & ChaperonesHighSchoolDances(x)) -> -StudentsAttendingSchool(x))", "score": 0}
{"id": "folio_validation_2", "prediction": "all x.((Person(x) & ChaperonesHighSchoolDances(x)) -> -AttendsAttendance(x))", "score": 0}
{"id": "folio_validation_2", "prediction": "all x.(ChamberonesHighSchoolDances(x) -> -StudentsTheAttendsSchool(x))", "score": 0}
{"id": "folio_validation_2", "prediction": "all x.(ChamperonesHighSchoolDances(x) -> -AttendsStudent(x,y))", "score": 0}
{"id": "folio_validation_2", "prediction": "all x.(ChamperonesHighSchoolDances(x) -> -AttendeesSchool(x))", "score": 0}
{"id": "folio_validation_2", "prediction": "all x.(ChaperonesHighSchoolDances(x) -> -AttendsSchool(x))", "score": 0}
{"id": "folio_validation_2", "prediction": "all x.(ChapellsHighSchoolDance(x) -> -StudentAttendsSchool(x))", "score": 0}
{"id": "folio_validation_2", "prediction": "all x y.((Paragraph(x) & HighSchoolDance(y) & Chaperones(x,y)) -> -StudentAttendance(x))", "score": 0}
{"id": "folio_validation_2", "prediction": "all x.((Person(x) & ChaparonesHighSchoolDances(x)) -> -StudentsAttendingSchool(x))", "score": 0}
{"id": "folio_validation_2", "prediction": "all x.((PeopleChaperoneHighSchoolDances(x)) -> -StudentsAttendsSchool(x))", "score": 0}
{"id": "folio_validation_2", "prediction": "all x.(ChapelsHighSchoolDances(x) -> -AttendsSchool(x))", "score": 0}
{"id": "folio_validation_2", "prediction": "all x.(ChaperonesYoungSchoolDances(x) -> -Attends(x,school))", "score": 0}
{"id": "folio_validation_3", "prediction": "all x.((Person(x) & Inactive(x) & Disinterested(x) & ChapeloneHighSchoolDances(x)) -> Disinterested(x))", "score": 0}
{"id": "folio_validation_3", "prediction": "all x.((Person(x) & Inactive(x) & Disinterested(x)) -> CommunityChamperoneHighSchoolDances(x))", "score": 0}
{"id": "folio_validation_3", "prediction": "all x.((Person(x) & Inactive(x) & DisinterestedMember(x) & CommunityChamperone(x) & HighSchoolDance(x)) -> DisinterestedPeople(x))", "score": 0}
{"id": "folio_validation_3", "prediction": "all x.(InactiveAndDisinterested(x) -> AdultCapite(x))", "score": 0}
{"id": "folio_validation_3", "prediction": "all x.((People(x) & Inactive(x) & Disinterested(x)) -> Chaperone(x))", "score": 0}
{"id": "folio_validation_3", "prediction": "all x.((Person(x) & Inactive(x) & Disinterested(x)) -> CommunityChamperoneHighSchoolDance(x))", "score": 0}
{"id": "folio_validation_3", "prediction": "all x.((Person(x) & Inactive(x) & Disinterested(x)) -> ChaperoneGirls(x))", "score": 0}
{"id": "folio_validation_3", "prediction": "all x.((Person(x) & Inactive(x) & Disinterested(x)) -> HighSchoolChamperone(x))", "score": 0}
{"id": "folio_validation_3", "prediction": "all x.(Person(x) -> (Inactive(x) & Disinterested(x) & CommunityChamperoneHighSchoolDances(x)))", "score": 0}
{"id": "folio_validation_3", "prediction": "all x.((Person(x) & Inactive(x) & DisinterestedMember(x) & CommunityChamperoneHighSchoolDance(x)) -> HighSchoolDance(x))", "score": 0}
{"id": "folio_validation_3", "prediction": "all x.((Person(x) & Inactive(x) & DisinterestedMember(x) & CommunityChamperoneHighSchoolDances(x)) -> DisinterestedParticipantDance(x))", "score": 0}
{"id": "folio_validation_3", "prediction": "all x.((People(x) & Inactive(x) & Disinterested(x)) -> CommunityChamperoneHighSchoolDances(x))", "score": 0}
{"id": "folio_validation_3", "prediction": "all x.((Person(x) & Inactive(x) & Disinterested(x)) -> ChaperoneHighSchoolDance(x))", "score": 0}
{"id": "folio_validation_3", "prediction": "all x.((Person(x) & Inactive(x) & DisinterestedInCommunityChamperone(x)) -> HighSchoolDances(x))", "score": 0}
{"id": "folio_validation_3", "prediction": "all x.(Inactive(x) -> Disinterested(x))", "score": 0}
{"id": "folio_validation_3", "prediction": "all x.((Inactive(x) & Disinterested(x)) -> CommunityChamperoneHighSchoolDances(x))", "score": 0}
{"id": "folio_validation_4", "prediction": "all x.((YoungChild(x) & YoungAcademicCareer(x) & YoungAdult(x) & WishesFortunateCrowdshipsAndEducationalOpportunities(x)) -> AllStudentsAttendsSchool(x))", "score": 0}
{"id": "folio_validation_4", "prediction": "all x.(All y.((YoungChild(x) & -YoungMom(y) & -WishesToFinishAcademicCareersAndEducationalOpportunities(x)) -> AttendsSchool(y))", "score": -1}
{"id": "folio_validation_4", "prediction": "all x.((YoungChild(x) & YoungParent(x) & WantsToFurtherAcademicCareersAndEducationalOpportunities(x)) -> Student(x))", "score": 0}
{"id": "folio_validation_4", "prediction": "all x.((YoungChild(x) & YoungParent(x) & WishesForwardAcademicCareers(x) & WishesForwardEducationalOpportunities(x)) -> AttendTheSchool(x))", "score": 0}
{"id": "folio_validation_4", "prediction": "all x.((YoungChild(x) | YoungAngler(x)) -> AttendsSchool(x))", "score": 0}
{"id": "folio_validation_4", "prediction": "all x.((YoungChild(x) & YoungTween(x) & Long-TermCareer(x) & LongTermEducationalOpportunities(x)) -> AttendsSchool(x))", "score": -1}
{"id": "folio_validation_4", "prediction": "all x.((YoungChild(x) & YoungAngle(x) & ToEnhanceAcademicCareersAndEducationalOpportunities(x)) -> StudentAttendee(x))", "score": 0}
{"id": "folio_validation_4", "prediction": "all x.((YoungChild(x) & YoungTourist(x) & -WorryForFinancialCareers(x) & -WorryForEducationalOpportunities(x)) -> AttendsSchool(x))", "score": 0}
{"id": "folio_validation_4", "prediction": "all x.((YoungChild(x) & YoungUnderage(x) & WishesForderAcademicCareershipsAndEducationalOpportunities(x)) -> AttendsSchool(x))", "score": 0}
{"id": "folio_validation_4", "prediction": "all x.((YoungChildren(x) | Teenagers(x)) -> AttendsSchool(x))", "score": 0}
{"id": "folio_validation_4", "prediction": "all x.((YearChild(x) & YoungThoroughs(x) & ToFinishAcademicCareers(x) & ToFinishEducationalOpportunities(x)) -> AttendsSchool(x))", "score": 0}
{"id": "folio_validation_4", "prediction": "all x.((YoungChildren(x) & YoungAngles(x) & wishingToFinishAcademicCareersAndEducationalOpportunities(x)) -> AttendsSchool(x))", "score": 0}
{"id": "folio_validation_4", "prediction": "all x.((YoungChild(x) | YoungYoung(x)) & MayFinishAcademicCareers(x) & MayFinanishEducationalOpportunities(x)) -> AttendsSchool(x))", "score": -1}
{"id": "folio_validation_4", "prediction": "all x.((YoungChild(x) | YoungHopkins(x)) -> AttendsSchool(x))", "score": 0}
{"id": "folio_validation_4", "prediction": "all x.((YoungChild(x) & YoungAngler(x) & wishingToFourtherAcademicCareersAndEducationalOpportunities(x)) -> StudentsAttendedSchool(x))", "score": 0}
{"id": "folio_validation_4", "prediction": "all x.((YoungChildren(x) & YoungTeens(x) & WantsAcademicCareers(x) & WantsEducationalOpportunities(x)) -> AttendsSchool(x))", "score": 0}
{"id": "folio_validation_5", "prediction": "((Bonnie(Bonnie) & VeryEngaged(Bonnie) & Student(Bonnie)) | (-Attends(Bonnie) & VeryEngaged(Bonnie) & Student(Bonnie))))", "score": -1}
{"id": "folio_validation_5", "prediction": "((Bobbi(bonnie) & VeryEngagedWithSchoolEvents(bonnie,v)) | (Bobbi(bonnie,v) & VeryEngagedWithSchoolEvents(b)) & -AttendsSchoolEvents(bonnie,v))))", "score": -1}
{"id": "folio_validation_5", "prediction": "(exists x.(Bonnie(x) & (Attends(x) & VeryEngagedWithSchool(x) & StudentAttendsSchool(x)) | (-Attends(x) & VeryEngagedWithSchool(x)) | (-Attends(x) & VeryEngagedWithSchool(x) & StudentAttendsSchool(x)))))", "score": -1}
{"id": "folio_validation_5", "prediction": "all x y.((Bonnie(x) & SchoolEvents(y)) -> (Attendees(x,y) & VeryExplicit(x,y) & StudentAttendees(x,y)))", "score": 0}
{"id": "folio_validation_5", "prediction": "((AttendsAndVeryEngagedWithSchoolEvents(Bonnie) & StudentAtschool(Bonnie)) | (-AttendsAndVeryEngagedWithSchoolEvents(Bonnie) & StudentAtSchool(Bonnie))))", "score": -1}
{"id": "folio_validation_5", "prediction": "(exists x.(Bonnie(x) & AttendsSchool(x) & VeryEngagedWithSchoolEvents(x) & StudentAttachable(x))) | -AttachsSchool(x) & VeryEngagedWithSchoolEvents(x)))", "score": -1}
{"id": "folio_validation_5", "prediction": "(AttendsAndVeryEngagedWithSchoolEvents(Bobby) | (-AttendsAndVeryEngagedWithSchoolEvents(Bobby) | AttendsSchool(Bobby))))", "score": -1}
{"id": "folio_validation_5", "prediction": "all x.(Bonnie(x) -> ((Attends(x) & VeryEngagedWithSchoolEvents(x) & Student(x)) | (-Attends(x) & VeryEngagedWithSchoolEvents(x)))))", "score": -1}
{"id": "folio_validation_5", "prediction": "(exists x.(Bonnie(x) & ((Attends(x) & VeryEngagedWithSchool(x) & Student(x)) | -Attends(x) & VeryEngagedWithSchool(x))))", "score": 0}
{"id": "folio_validation_5", "prediction": "((Bobby(Bobby) & VeryEngaged(Bobby)) | (-Above(Bobby) & VeryEngaged(Bobby)))))", "score": -1}
{"id": "folio_validation_5", "prediction": "all x y.((Bonnie(x) & School(y) & ((Attends(x,y) & VeryExplicitWithEvents(x,y) & Student(x,y)) | (-Attends(x,y) & VeryExplicitWithEvents(x) & Student(x,y)))))", "score": 0}
{"id": "folio_validation_5", "prediction": "all x.(Bonnie(x) & ((Attends(x) & VeryEngaged(x) & Student(x) & AttendsSchool(x)) | (-Attends(x) & VeryEngaged(x))) | (-Attends(x) & VeryEngaged(x) & Student(x) & AttendsSchool(x))))", "score": -1}
{"id": "folio_validation_5", "prediction": "((Attends(Bonnie) & VeryEngagedWithSchoolEvents(Boy) & StudentAttendet(Boy)) | (-Attends(Boy) & VeryEngagedWithSchoolEvents(Boy))))", "score": -1}
{"id": "folio_validation_5", "prediction": "((Attends(Bonnie) & ExcellentEducationalEvents(Bonnie) & Student(Bonnie)) | (-Attends(Bonnie) & ExcellentEducationalEvents(Bonnie)) | (-Attends(Bonnie,Bonnie) & ExcellentEducationalEvents(Bonnie,Bonnie)))))", "score": -1}
{"id": "folio_validation_5", "prediction": "exists x.(Boy(x) & ((Attends(x) & VeryEngagedWithSchoolEvents(x) & Student(x)) | (-Attends(x) & VeryEngagedWithSchoolEvents(x) & Student(x)))))", "score": -1}
{"id": "folio_validation_5", "prediction": "((Bonnie(Bonnie) & EngagedWithSchoolEvents(Bonnie) & Student(Bonnie)) | (Bonnie(Bonnie) & -EnengagedWithSchoolEvents(Bonnie) & Student(Bonnie))))", "score": -1}
{"id": "folio_validation_6", "prediction": "all x y.((Boy(x) & SchoolTalentShow(y)) -> PerformsIn(x,y))", "score": 0}
{"id": "folio_validation_6", "prediction": "all x.((Bonnie(x) & Model(y)) -> PerformsInSchoolTalentShows(x,y))", "score": 0}
{"id": "folio_validation_6", "prediction": "all x.(Bonnie(x) -> PerformsInSchoolTalentShows(x))", "score": 0}
{"id": "folio_validation_6", "prediction": "all x y.((Bonnie(x) & SchoolTalentShow(y)) -> PerformsIn(x,y))", "score": 0}
{"id": "folio_validation_6", "prediction": "all x.((Bonnie(x) & SchoolLoves(y)) -> PerformsOften(x,y))", "score": 0}
{"id": "folio_validation_6", "prediction": "all x y.((Bone(x) & SchoolTalentShow(y)) -> PerformsIn(x,y))", "score": 0}
{"id": "folio_validation_6", "prediction": "all x y.(((Bonnie(x) & SchoolTalentShow(y)) -> PerformsIn(x,y))", "score": -1}
{"id": "folio_validation_6", "prediction": "all x y.((Bob(x) & SchoolTalentShow(y)) -> PerformsFrequently(x,y))", "score": 0}
{"id": "folio_validation_6", "prediction": "all x.(Bonnie(x) -> PerformanceInSchoolTalentShow(x))", "score": 0}
{"id": "folio_validation_6", "prediction": "all x.(BobbyPerformsInSchoolTalentShows(x) -> PerformsAtOften(x))", "score": 0}
{"id": "folio_validation_6", "prediction": "all x.(Bonnie(x) & ManySchoolTalentShows(x))", "score": 0}
{"id": "folio_validation_6", "prediction": "all x.((Bonnie(x) & PerformingInSchoolTalentShows(x)) -> SometimesPerforms(x))", "score": 0}
{"id": "folio_validation_6", "prediction": "all x.((Bonnie(x) & Performance(x)) -> VeryOften(x))", "score": 0}
{"id": "folio_validation_6", "prediction": "all x.(Bonnie(x) -> (PursuesInSchoolTalentShows(x) & ManyTimes(x)))", "score": 0}
{"id": "folio_validation_6", "prediction": "all x.(Bonnie(x) -> PerformsInSchoolTalentShow(x))", "score": 0}
{"id": "folio_validation_6", "prediction": "all x.(Bonnie(x) -> People(x))", "score": 0}
{"id": "folio_validation_7", "prediction": "all x y.((Student(x) & YoungChild(y) & -(ChamperonesHighSchoolDances(y) & WishesToFindAcademicCareerAndEducationalOpportunities(y,x) -- InactiveCollaborate(x) & DisinterestedCollege(x))) -> Bonnie(x))", "score": -1}
{"id": "folio_validation_7", "prediction": "all x.(((YearChild(x) | Teenager(x)) & WishesToFurtherAcademicCareerAndEducationalOpportunities(x) & ChaperonesHighSchoolDances(x)) | (-(YearChild(x) & Teenager(x)) & WishesToFurtherAcademicCareerAndEducationalOpportunities(x))))", "score": -1}
{"id": "folio_validation_7", "prediction": "all x.((SolvingCollege(x) & ((YoungChild(x) | Teenager(x)) & WishesToFurtherAcademicCareerAndEducationalOpportunities(x) & ChaperonesHighSchoolDances(x)) | (-YoungChild(x) & HighSchoolDances(x))))) -> (Student(x) & AttendsSchool(x)) | DisinterestedMember(x))", "score": -1}
{"id": "folio_validation_7", "prediction": "all x.(((YearChild(x) | Teenager(x)) & DesiresAcademicCareerAndEducationalOpportunities(x) & ChaperonesHighSchoolDances(x)) | (-YearChild(y) & DesiresAcademicCareerAndEducationalOpportunities(y) & AttendsSchoolOrInactiveAndDisinterestedMemberOfCommunity(y)))", "score": 0}
{"id": "folio_validation_7", "prediction": "all x.(((YoungChild(x) | Teenager(x)) & -(YoungChild(x) & Teenager(x) & WantsAdvancedCareerAndEducationalOpenness(x) & ChaperonesHighSchoolDances(x)) & HighSchoolDance(x))) -> (Student(x) ou DisinterestedMemberOfCommunity(x)))", "score": -1}
{"id": "folio_validation_7", "prediction": "all x.((YoungChild(x) | Teenager(x)) & ((WantsAcademicCarriage(x) & -WishesHighSchoolDances(x)) | -WantsAcademicCarriageAndEducationalOpportunities(x) & ChaperonesHighSchoolDances(x))) | (-DesirableChamber(x) & AttendsSchool(x)))", "score": -1}
{"id": "folio_validation_7", "prediction": "all x.((YearChild(x) | Teenager(x) & WishesAcademicCareerAndEducationalOpportunitiesAndChamperonesHighSchoolDances(x)) | (-YearChild(y) & WishesAcademicCareerAndEducationalOpportunities(y) & -AttendsSchool(y)) | DisinterestedMemberOfCommunity(y)))", "score": -1}
{"id": "folio_validation_7", "prediction": "all x.((Scottish(x) & ((YoungChild(x) | Teenager(x)) & WantsAcademicCareer(x) & WantsEducationalOpportunities(x) & ChapersHighSchoolDances(x)) | (-YoungChild(x) & WantsAcademicCareer(x) & WantsEducationalOpportunities(x)))))", "score": -1}
{"id": "folio_validation_7", "prediction": "all x.((CostumeAttendsSchool(x) | DisinterestedMemberOfCommunity(x)) -> ((ToForthcomingAcademicCareerAndEducationalOpportunities(x) & ChaperonesHighSchoolDances(x)) | (-ToForthcomingAcademicCareerAndEducationalOpportunities(x) & AttendsSchool(x))))", "score": 0}
{"id": "folio_validation_7", "prediction": "all x.((Disinterested(x) & YoungChild(x)) -> (WantsToFinishAcademicCareerAndEducationalOpportunities(x) | ChaperonesHighSchoolDances(x)) | (-WantsToFinishAcademicCareerAndEducationalOpportunities(x) & AttendsSchool(x) | DisinterestedDesirableMemberOfCommunity(x))))", "score": -1}
{"id": "folio_validation_7", "prediction": "all x.((Scout(x) & (YearlyChild(x) | YouthLiving(x)) & WantsToFinishAcademicCareerAndEducationalOpportunities(x) & ChaperonesHighSchoolDances(x)) | -(YearlyChild(x) & WantsFinishAcademicCareerAndEducationalOpportunities(x) & AttendsSchool(x))))", "score": -1}
{"id": "folio_validation_7", "prediction": "all x.(((YoungChild(x) | Teenager(x)) & WantsFinancialCareerAndEducationalOpportunitiesAndChaperonesHighSchoolDances(x)) | (-YoungChild(x) & Teenager(x) & WantsFinancialCareerAndEducationalOpportunities(x)))) -> (StudentAttendsSCHOOL(x))", "score": -1}
{"id": "folio_validation_7", "prediction": "all x.((Solving(x) & ((YoungChild(x) | Teenager(x)) & -WantsToFinishAcademicCareerAndEducationalOpportunities(x) & ChaperonesHighSchoolDances(x))) | (-(YoungChild(x) & Teenager(x) & ---WantsFinishAcademicCareerAndEducationalOpportunities(x)))))", "score": -1}
{"id": "folio_validation_7", "prediction": "all x.((LastStudent(x) | LeastAdvanced(x)) | (LateStudent(x) | InactiveComunitedMember(x))))", "score": -1}
{"id": "folio_validation_7", "prediction": "all x.((Bonnie(x) & ((YoungChild(x) & DesiresAcademicCareer(x) & DesiresEducationalOpportunitiesAndCoaperonesHighSchoolDances(x)) | -(YoungChild(x) & DesiresAcademicCareer(x) & DesiresEducationalOpportunities(x)))) -> (Student(x)))", "score": 0}
{"id": "folio_validation_7", "prediction": "all x.((YoungChild(x) | Teenager(x)) & (WantsFinishTheAcademicCareerAndEducationalOpportunities(x) & ChaperonesHighSchoolDances(x) & -LikelyAttendsSchool(x) | InactiveAndDisinterested(x))) -> Bonnie(x))", "score": -1}
{"id": "folio_validation_8", "prediction": "all x.((ChainsHighSchoolDances(x) | (-ChapanesHighSchoolDances(x) & PerformsInSchoolTalentShows(x))) -> (YoungChild(x) | YoungTailor(x) & Certainly WantsToFurtherAcademicCareerInDesirableCommunity(x)))", "score": -1}
{"id": "folio_validation_8", "prediction": "all x.((CoporatedHighSchoolDances(x) | (-CoporatedHighSchoolDances(x) & PerformsInSchoolTalentShows(x))) -> (WarmsAcademicCareerAndEducationalOpportunities(x) & DisinterestedLizard(x)))", "score": 0}
{"id": "folio_validation_8", "prediction": "all x.((Country(x) & (ChaperonesHighSchoolDances(x) | PerformsInSchoolTalentShowsOften(x))) -> ((YoungCookie(x) | YoungYoungCookie(x)) & -EducationalOpportunities(x)) & InactiveAndDisinterestedMemberOfCommunity(x)))", "score": -1}
{"id": "folio_validation_8", "prediction": "all x.(((CopfersHighSchoolDances(x) | PerformsInSchoolTalentShows(x)) & YoungChild(x) & WillFinancctAcademicCareerEducationalOpportunities(x) & DisinterestedParty(x)) -> ((Inactive(x) | DisinterestedParty(x))))", "score": 0}
{"id": "folio_validation_8", "prediction": "all x.((ChamperonesHighSchoolDances(x) | PerformsInSchoolTalentShows(x)) -> (SoillessChild(x) & UninterestedUnderlyingMember(x)))", "score": 0}
{"id": "folio_validation_8", "prediction": "all x.((CameronesHighSchoolDances(x) | (-ChampionsHighSchoolDances(x) & PerformsInSchoolTalentShows(x))) -> (YoungChild(x) | Teenager(x)) & exists y.(Inactive(y) & Disinterested(y))))", "score": -1}
{"id": "folio_validation_8", "prediction": "all x.((YoungChocolate(x) | Teenager(x)) -> (MaintainsAcademicCareer(x) & EducationalOpportunities(x) & DisinterestedMember(x,community)))", "score": 0}
{"id": "folio_validation_8", "prediction": "all x.((CascalsHighSchoolDances(x) | (-CascalsHighSchoolDances(x) & PerformsInSchoolTalentShowsOften(x))) -> (King(x) & YoungChild(x) & Teenager(x) & WishesToFinishAcademicCareerAndEducationalHopotentials(x) & DisinterestedLocalCommunityMole(x)))", "score": 0}
{"id": "folio_validation_8", "prediction": "all x.((Capiter(x) | (-Capiter(x) & SchoolDance(x))) -> (YoungChild(x) | YoungTeacher(x) & DesirableInAcademicCareerAndEducationalOpportunities(x) & DisinterestedCitizen(x)))", "score": 0}
{"id": "folio_validation_8", "prediction": "all x y.((Boie(x) & ChaperonesHighSchoolDances(x) | (-ChaparonesHighSchoolDances(x) & PerformsShallenges(x))) -> (YoungChild(x) | YoungYoung(x) & WishesToFinishAcademicCareerAndEducationalOpportunities(x) & InactiveAndDisinterestedMemberOfCommunity(x)))", "score": 0}
{"id": "folio_validation_8", "prediction": "all x.((Solid(x) & (ChaperonesHighSchoolDances(x) | PerformsInSchoolTalentShowsOfccasionsOfcourses(x))) -> (YoungChild(x) | Teenager(x)) & InactiveAndDisinterestedMemberOfCommunity(x)))", "score": -1}
{"id": "folio_validation_8", "prediction": "all x y.((YoungChild(x) | Teenager(y) & WantsToFortifyAcademicCareerAndEducationalOpportunities(x) & InactiveAndDisinterestedMemberOfCommunity(x,y)) -> (ChaperonesHighSchoolDances(x) | PerformsInSchoolTalentShowsOfCoursesOfSchoolsOfWorth(y)))", "score": 0}
{"id": "folio_validation_8", "prediction": "all x.((CameronesHighSchoolDances(x) | (-PersonasesInSchoolTalentShowsOfficially(x) & YoungChild(x))) -> ((CameronesHighSchoolDances(x) & InclusiveCityMember(x) & DisinterestedInCommunity(x))))", "score": 0}
{"id": "folio_validation_8", "prediction": "all x.((CaperonesHighSchoolDances(x) | -PerformsInSchoolTalentShowsOften(x)) -> ((YoungChild(x) | YoungDead(x)) & StrivesToFurtherAcademicCareer(x) & StrikesForEducationalOpportunities(x) & DisinterestedEmployee(x))))", "score": -1}
{"id": "folio_validation_8", "prediction": "all x.((Champerones(x,highschoolDances) | (-Champerones(x,schoolDances) & PerformsInSchoolTalentShows(x))) -> (youngChild(x) | YoungYoungLiving(x)) & (DesperateCitizen(x) | InactiveCompany(x))))", "score": -1}
{"id": "folio_validation_8", "prediction": "all x y.((ChellesHighSchoolDances(x) | (-ChangesHighSchoolDances(x) & PerformsInSchoolTalentShows(x) & Activities(y) & -InterestsCommunity(y))) -> (YearChild(x) | YoungTeacher(x)) & -FollowingEducationalOpportunities(x) & -InactiveAndDisinterestedMember(x)))", "score": -1}
{"id": "folio_validation_9", "prediction": "all x.((Employee(x) & SchedulesMeeting(x) & Customer(x)) -> AppearsInCompany(x))", "score": 0}
{"id": "folio_validation_9", "prediction": "all x.((Employee(x) & SchedulesMeeting(x)) -> AppearsInCompany(x))", "score": 0}
{"id": "folio_validation_9", "prediction": "all x.(SchedulesMeetingWithCustomers(x) -> AnswersInCompany(x))", "score": 0}
{"id": "folio_validation_9", "prediction": "all x.(SchedulesMeeting(x) -> AppearInCompany(x))", "score": 0}
{"id": "folio_validation_9", "prediction": "all x.((Employee(x) & SchedulesMeeting(x,Customers)) -> AppearsInCompany(x))", "score": 0}
{"id": "folio_validation_9", "prediction": "all x y.((Employee(x) & SchedulesMeeting(x,y) & Customers(y)) -> AppearsInCompany(x))", "score": 0}
{"id": "folio_validation_9", "prediction": "all x.(SchedulesMeeting(x) -> AppearsInCompany(x))", "score": 0}
{"id": "folio_validation_9", "prediction": "all x y.((Employee(x) & Customer(y) & SchedulesMeeting(x,y)) -> HappensInCompany(x,y))", "score": 0}
{"id": "folio_validation_9", "prediction": "all x y z w.((Employee(x) & Meeting(y) & Customer(z) & Schedules(x,y) & InCompany(w)) -> Today(y,z))", "score": 0}
{"id": "folio_validation_9", "prediction": "all x y.((Employee(x) & SchedulesMeetingWithCustomers(x) & Company(y)) -> AppearsInCompany(x,y))", "score": 0}
{"id": "folio_validation_9", "prediction": "all x.((Employee(x) & SchedulesMeeting(x)) -> AffordsToCompany(x))", "score": 0}
{"id": "folio_validation_9", "prediction": "all x.((Employee(x) & SchedulesMeetingWithCustomers(x)) -> AppearsInCompany(x))", "score": 0}
{"id": "folio_validation_9", "prediction": "all x.((Employee(x) & SchedulesMeeting(x) & Customer(y)) -> AppearsInCompany(x,y))", "score": 0}
{"id": "folio_validation_9", "prediction": "all x.((Employee(x) & SchedulesMeeting(x)) -> ComesInCompany(x))", "score": 0}
{"id": "folio_validation_9", "prediction": "all x y.((Employee(x) & Customer(y) & SchedulesMeeting(x,y)) -> IsAppearingInCompany(x,y))", "score": 0}
{"id": "folio_validation_9", "prediction": "all x.((Employee(x) & SchedulesMeeting(x) & Customer(x)) -> Appear InCompany(x))", "score": -1}
{"id": "folio_validation_10", "prediction": "all x y.((HasLunchInCompany(x) & Company(y)) -> SchedulesMeetingsWithCustomers(x,y))", "score": 0}
{"id": "folio_validation_10", "prediction": "all x y z.((UseLunch(x) & Company(y) & Company(z)) -> SchedulesMeeting(x,y,z))", "score": 0}
{"id": "folio_validation_10", "prediction": "all x.((HasLunch(x) & InCompany(x)) -> SchedulesMeetings(x,Clients))", "score": 0}
{"id": "folio_validation_10", "prediction": "all x.((HasLunch(x) & Company(x)) -> SchedulesMeetingsWithCustomers(x))", "score": 0}
{"id": "folio_validation_10", "prediction": "all x.((HasLunch(x) & Company(x)) -> SchedulesMeetings(x,Customers))", "score": 0}
{"id": "folio_validation_10", "prediction": "all x y.((HasLunch(x) & InCompany(y)) -> SchedulesMeetings(x,y))", "score": 0}
{"id": "folio_validation_10", "prediction": "all x.((Has(x,Lunch)) -> SchedulesMeetings(x))", "score": 0}
{"id": "folio_validation_10", "prediction": "all x.((HasLunch(x) & CompanyInCompany(x)) -> SchedulesMeetingsWithCustomers(x))", "score": 0}
{"id": "folio_validation_10", "prediction": "all x.((HasLunch(x) & InCompany(x)) -> SchedulesMeeting(x))", "score": 0}
{"id": "folio_validation_10", "prediction": "all x.(HasLunchInCompany(x) -> SchedulesMeetingsWithCustomers(x))", "score": 0}
{"id": "folio_validation_10", "prediction": "all x.((HasLunch(x) -> SchedulesMeetings(x))", "score": -1}
{"id": "folio_validation_10", "prediction": "all x.((HasLunch(x) & InCompany(x)) -> SchedulesMeeting(x,Customers))", "score": 0}
{"id": "folio_validation_10", "prediction": "all x y.((HasLunch(x) & Company(y)) -> SchedulesMeetings(x,y))", "score": 0}
{"id": "folio_validation_10", "prediction": "all x.((HasLunch(x) & InCompany(x)) -> SchedulesMeetingsWithCustomers(x))", "score": 0}
{"id": "folio_validation_10", "prediction": "all x y.(((HasLunch(x) & Company(y)) -> SchedulesMeetings(x,y))", "score": -1}
{"id": "folio_validation_11", "prediction": "all x.(Employee(x) -> (HasLunch(x,Company) | HasLunch(x,Home)))", "score": 0}
{"id": "folio_validation_11", "prediction": "all x.(Employee(x) -> (HasLunchInCompany(x) | HasLunchAtHome(x)))", "score": 0}
{"id": "folio_validation_11", "prediction": "all x y z.((Executive(x) & Company(y) & Home(z)) -> (HasLunchIn(x,y) | HasLunchAt(x,z)))", "score": 0}
{"id": "folio_validation_11", "prediction": "all x y.((Employee(x) & Company(y)) -> (HasLunch(x,y) | HasLunch(x,y)))", "score": 0}
{"id": "folio_validation_11", "prediction": "all x.(Employee(x) -> ((HasLunchInCompany(x,Company) | HasLunchAtHome(x,Company))))", "score": 0}
{"id": "folio_validation_11", "prediction": "all x.(Employee(x) -> (Has(x,Company) | Has(x,Home)))", "score": 0}
{"id": "folio_validation_11", "prediction": "all x y.((Employee(x) & Company(y)) -> (HasLaundryIn(x,y) | HasLaundryAtHome(x,y)))", "score": 0}
{"id": "folio_validation_11", "prediction": "all x.(Employee(x) -> (HasLunch(x,company) | HasLunch(x,home)))", "score": 0}
{"id": "folio_validation_12", "prediction": "all x.((Employee(x) & EatsAtHome(x)) -> WorkesRemotelyFromHome(x))", "score": 0}
{"id": "folio_validation_12", "prediction": "all x.(HasLunch(x) -> WorkingRemotelyFromHome(x))", "score": 0}
{"id": "folio_validation_12", "prediction": "all x.(HasLunchAtHome(x) -> RemoteWorking(x))", "score": 0}
{"id": "folio_validation_12", "prediction": "all x.((Employee(x) & HasLunchAtHome(x)) -> WorkingRemotelyFromHome(x))", "score": 0}
{"id": "folio_validation_12", "prediction": "all x.((Employee(x) & LunchAtHome(x)) -> WorkingRemotelyFromHome(x))", "score": 0}
{"id": "folio_validation_12", "prediction": "all x y.((Employee(x) & WorkWith(y)) -> HasLunchAtHome(x,y))", "score": 0}
{"id": "folio_validation_12", "prediction": "all x y.((Employee(x) & HasLunch(x,y)) -> WorkingRemotely(x))", "score": 0}
{"id": "folio_validation_13", "prediction": "all x.((Employee(x) & NoHome(x)) -> WorksRemotelyFromHome(x))", "score": 0}
{"id": "folio_validation_13", "prediction": "all x.((Employee(x) & InNear(x,Z)) -> WorkRemotelyFromHome(x))", "score": 0}
{"id": "folio_validation_13", "prediction": "all x.((Employee(x) & LivingInAlternativeCountries(x)) -> WorksRemotelyFromHome(x))", "score": 0}
{"id": "folio_validation_13", "prediction": "all x.((Employee(x) & InOtherCountry(x)) -> WorksRemotelyFromHome(x))", "score": 0}
{"id": "folio_validation_13", "prediction": "all x.((Employee(x) & InOfferCountry(x)) -> WorkRemoteFromHome(x))", "score": 0}
{"id": "folio_validation_13", "prediction": "all x.((Employee(x) & WorkedInOtherCountries(x)) -> RemoteWork(x))", "score": 0}
{"id": "folio_validation_13", "prediction": "all x.((Employee(x) & InCompanyEquivalent(x,Equatorial)) -> WorksRemotelyFromHome(x))", "score": 0}
{"id": "folio_validation_13", "prediction": "all x.((Employee(x) & InOtherCountries(x)) -> WorkDesktopFromHome(x))", "score": 0}
{"id": "folio_validation_13", "prediction": "all x.((Employee(x) & inOtherCountries(x)) -> WorksRemotelyFromHome(x))", "score": 0}
{"id": "folio_validation_13", "prediction": "all x.(OtherCountry(x) -> WorksRemotelyFromHome(x))", "score": 0}
{"id": "folio_validation_13", "prediction": "all x.((Employee(x) & OtherCountry(x)) -> WorksRemotelyFromHome(x))", "score": 0}
{"id": "folio_validation_13", "prediction": "all x.((Employee(x) & InWheelCountry(x)) -> WorkRemotelyFromHome(x))", "score": 0}
{"id": "folio_validation_13", "prediction": "all x.((Employee(x) & InUndercountry(x)) -> WorksRemotelyFromHome(x))", "score": 0}
{"id": "folio_validation_13", "prediction": "all x.((Employee(x) & InAlterCountry(x)) -> WorksRemotelyFromHome(x))", "score": 0}
{"id": "folio_validation_14", "prediction": "-exists x.(Manager(x) & WorksRemotely(x))", "score": 0}
{"id": "folio_validation_14", "prediction": "-exists x.(Manager(x) & WorkRemotely(x))", "score": 0}
{"id": "folio_validation_14", "prediction": "-exists x.(Manager(x) & WorksRemotelyFromHome(x))", "score": 0}
{"id": "folio_validation_14", "prediction": "-exists x.(Manager(x) & WorkRemotelyFromHome(x))", "score": 0}
{"id": "folio_validation_14", "prediction": "-exists x.(Manager(x) & WorksDeparture(x))", "score": 0}
{"id": "folio_validation_14", "prediction": "all x.(Manager(x) -> -WorksRemotely(x))", "score": 0}
{"id": "folio_validation_15", "prediction": "all x.(James(x) -> ((Manager(x) & AbpearsInCompany(x)) | -Manager(x) & -ArrivesInCompany(x)))", "score": 0}
{"id": "folio_validation_15", "prediction": "all x y.((Manager(x) & Company(y)) -> (IsNegative(x,y) | -IsNegative(x,y)))", "score": 0}
{"id": "folio_validation_15", "prediction": "(exists x.(Manager(x) & ActsInCompany(x)) | -exists y.(Manager(y) & ActsInCompany(y))))", "score": -1}
{"id": "folio_validation_15", "prediction": "all x.(James(x) -> ((Manager(x) & exists y.(Company(y) & Affords(x,y))) | (-manager(x) & exists z.(Company(z) & AppearsIn(x,z))))))", "score": -1}
{"id": "folio_validation_15", "prediction": "all x y.((Fallen(x) & Company(y)) -> ((Man(x) & AffidacesIn(x,y)) | (-Man(x) & AffidacesIn(x,y)))))", "score": -1}
{"id": "folio_validation_15", "prediction": "all x.(James(x) -> ((Manager(x) & AppearsInCompany(x)) | -Manager(x) & AppearsInCompany(x))))", "score": -1}
{"id": "folio_validation_15", "prediction": "((Manager(James) & AfpearsInCompany(James)) | (-Manager(James) & AfpearsInCompany(James))))", "score": -1}
{"id": "folio_validation_15", "prediction": "(all x.(James(x) -> (Manager(x) & MattersInCompany(x))) | (-Manager(x) & MattersInCompany(x)))))", "score": -1}
{"id": "folio_validation_15", "prediction": "all x y.((Manager(x) & Company(y)) -> (AppearsIn(x,y) | -AppearsIn(x,y)))", "score": 0}
{"id": "folio_validation_15", "prediction": "all x.(James(x) -> ((Manager(x) & AREATES(x)) | (-Manager(x) & AREATES(x)))))", "score": -1}
{"id": "folio_validation_15", "prediction": "all x.(James(x) -> ((Manager(x) & AgitatesInCompany(x)) | (-Manager(x) & AgitatesInCompany(x))))", "score": 0}
{"id": "folio_validation_15", "prediction": "all x y.((James(x) & Company(y)) -> ((Manager(x) & AvailabilityToCompany(x,y)) | (-Manager(x) & AvailabilityToCompany(x,y))))", "score": 0}
{"id": "folio_validation_15", "prediction": "all x.(James(x) & ((Manager(x) & AfpearsInCompany(x)) | -Manager(x) & -AfpearsInCompany(x))))", "score": -1}
{"id": "folio_validation_15", "prediction": "(all x.(James(x) -> (Manager(x) & Appears(x))) -- -Manager(x) & AppearsInCompany(x)))", "score": -1}
{"id": "folio_validation_15", "prediction": "either exists x.(Manager(x) & AvailableInCompany(x)) | (-Manager(x) & AvailableInCompany(x))))", "score": -1}
{"id": "folio_validation_15", "prediction": "all x.(James(x) -> ((Manager(x) & AfpearsInCompany(x)) | (-Manager(x) & AfpearsInCompany(x))))", "score": 0}
{"id": "folio_validation_16", "prediction": "Jim has LunchInCompany.", "score": -1}
{"id": "folio_validation_16", "prediction": "all x.(James(x) -> HasLunch(x,company))", "score": 0}
{"id": "folio_validation_16", "prediction": "All x y z.((James(x) & Company(y) & Company(z)) -> HasLunch(x,y,z))", "score": -1}
{"id": "folio_validation_16", "prediction": "(HasLunchInCompany(James)", "score": -1}
{"id": "folio_validation_16", "prediction": "all x.(Brooklyn(x) -> HasLunch(x))", "score": 0}
{"id": "folio_validation_16", "prediction": "(HasLunch(Jim(Jim) & InCompany(Jim))", "score": -1}
{"id": "folio_validation_16", "prediction": "(LessonInCompany(James)", "score": -1}
{"id": "folio_validation_16", "prediction": "James exists x y.(Company(x) & HasLunch(x,y))", "score": -1}
{"id": "folio_validation_16", "prediction": "everything you need to know. (HasLunch(James,Company))", "score": -1}
{"id": "folio_validation_16", "prediction": "(HasLunch(James) -> HasLunch(James))", "score": 0}
{"id": "folio_validation_16", "prediction": "\"HasLunch(James,Company)\"", "score": -1}
{"id": "folio_validation_16", "prediction": "all x.(HasLunch(x) -> JamesInCompany(x))", "score": 0}
{"id": "folio_validation_16", "prediction": "has LunchInCompany(Jim)", "score": -1}
{"id": "folio_validation_16", "prediction": "(HasLunch(James), inCompany(James))", "score": -1}
{"id": "folio_validation_16", "prediction": "(HasLunch(Jim) & -InCompany(james))", "score": 0}
{"id": "folio_validation_16", "prediction": "all x.(James(x) -> HasLunchInCompany(x))", "score": 0}
{"id": "folio_validation_17", "prediction": "(-exists x.(James(x) & Lunch(x)) & -exists y.(James(y) & Company(y)))", "score": 0}
{"id": "folio_validation_17", "prediction": "all x.((James(x) & Company(x)) -> -HasLunch(x))", "score": 0}
{"id": "folio_validation_17", "prediction": "-HasLunchInCompany(Jim)", "score": 0}
{"id": "folio_validation_17", "prediction": "lex.(JamesWorship(James))", "score": -1}
{"id": "folio_validation_17", "prediction": "(-HasLunch(James))", "score": 0}
{"id": "folio_validation_17", "prediction": "(-HasLunchInCompany(Jim))", "score": 0}
{"id": "folio_validation_17", "prediction": "James & -HasLunch(James)", "score": 0}
{"id": "folio_validation_17", "prediction": "All x y.((James(x) & Company(y)) -> -HasLunch(x,y))", "score": -1}
{"id": "folio_validation_17", "prediction": "In the company James is notHasLunch((James))", "score": -1}
{"id": "folio_validation_17", "prediction": "-exists x.(James(x) & InCompany(x,y))", "score": 0}
{"id": "folio_validation_17", "prediction": ", notHasLunch(Jim)", "score": -1}
{"id": "folio_validation_17", "prediction": "-exists x.(James(x) & Company(x))", "score": 0}
{"id": "folio_validation_17", "prediction": "(-LunchInCompany(James,Company))", "score": 0}
{"id": "folio_validation_17", "prediction": "James & Company.", "score": -1}
{"id": "folio_validation_17", "prediction": "all x.((James(x) & Company(y)) -> -HasLunch(x,y))", "score": 0}
{"id": "folio_validation_18", "prediction": "all x.(Monkeypox(x) -> (InfectiousDisease(x,y) & CausedByEpidermal(x,y)))", "score": 0}
{"id": "folio_validation_18", "prediction": "all x.(MonkeypoxMaking(x) -> InfectiousDisease(x))", "score": 0}
{"id": "folio_validation_18", "prediction": "all x.(MonkeyPox(x) -> (InfectiousDisease(x) & CausedByMumberpoxVirus(x)))", "score": 0}
{"id": "folio_validation_18", "prediction": "all x.(Monkeypox(x) -> (InfectiousDisease(x) & CausedBy(x) & MonkeypoxVirus(x)))", "score": 0}
{"id": "folio_validation_18", "prediction": "all x.(Moneypox(x) -> (InfectiousDisease(x) & CausedByMoneypoxVirus(x)))", "score": 0}
{"id": "folio_validation_18", "prediction": "(InfectiousDisease(monkeypox) & CausedByMonkeypoxVirus(mammalpox))", "score": 0}
{"id": "folio_validation_18", "prediction": "all x.(Mmonkeypox(x) -> (InfectiousDesease(x) & CausedBy(x,y) & Disease(y) & CausedBy(x,y)))", "score": 0}
{"id": "folio_validation_18", "prediction": "(infectiousDisease(Monkeypox) & CausedByMammalpoxVirus(monkeypox))", "score": 0}
{"id": "folio_validation_18", "prediction": "Monkeypox (InfectiousDisease(mom-pox) & CausedByMonkeypoxVirus(mosquitox))", "score": -1}
{"id": "folio_validation_18", "prediction": "all x.(Monkeypox(x) -> (InfectiousDisease(x) & CausedByMajorPopulusVirus(x)))", "score": 0}
{"id": "folio_validation_18", "prediction": "all x.(Monkeypox(x) -> (InfectiousDisease(x) & CausedByMonkeypoxVirus(x)))", "score": 0}
{"id": "folio_validation_18", "prediction": "all x.(Monkeypox(x) -> CausedBy(x, monkeypox))", "score": 0}
{"id": "folio_validation_18", "prediction": "all x.(Mmonkeypox(x) -> (InfectiousDisease(x) & CausedByMonkeypoxVirus(x)))", "score": 0}
{"id": "folio_validation_18", "prediction": "all x.(Monkeypox(x) -> CausedByMammalpoxVirus(x))", "score": 0}
{"id": "folio_validation_18", "prediction": "all x.(Munkeypox(x) -> CausedByPopularVirus(x))", "score": 0}
{"id": "folio_validation_18", "prediction": "(All x.(Monkeypox(x) -> CausedByMandipoxVirus(x)))", "score": -1}
{"id": "folio_validation_19", "prediction": "all x.(MonkeypoxVirus(x) -> CanOccurInAnimals(x))", "score": 0}
{"id": "folio_validation_19", "prediction": "all x y.((MonkeyPoxVirus(x) & Animal(y)) -> CanOccurIn(x,y,z))", "score": 0}
{"id": "folio_validation_19", "prediction": "exists x.(MotherPoxVariety(x) & (OccursInAnimals(x) | OccursInHumans(x)))", "score": 0}
{"id": "folio_validation_19", "prediction": "all x y.((MonkeypoxVirus(x) & Animal(y)) -> (OrcinatesIn(x,y) | OccursIn(x,y)))", "score": 0}
{"id": "folio_validation_19", "prediction": "all x.(MockypoxVirus(x) -> (OccursInAnimals(x) & IncludingHumans(x)))", "score": 0}
{"id": "folio_validation_19", "prediction": "all x.(MonkeypoxViral(x) -> exists y.(Animal(y) & Animal(x)) & (Human(y) | Animal(y))))", "score": -1}
{"id": "folio_validation_19", "prediction": "(exists x.(MonkeypoxVirus(x) & InAnimals(x)) & InAnimals(x) & InAnimals(x))", "score": 4}
{"id": "folio_validation_19", "prediction": "all x.((Animal(x) & MonkeypoxVirus(x)) -> OccursIn(x,y))", "score": 0}
{"id": "folio_validation_19", "prediction": "all x y z.((MonkeypoxVars(x) & Animal(y) & Animal(z)) -> CanOccur(x,y,z))", "score": 0}
{"id": "folio_validation_19", "prediction": "all x.(MonkeypoxVirus(x) -> exists y.(Animal(y) & Animal(z) & CanOccurIn(x,y,z)))", "score": 4}
{"id": "folio_validation_19", "prediction": "all x y.((MonkeypoxVirus(x) & (Has(y) | Has(y))) -> CanOccurInAnimals(x,y))", "score": 0}
{"id": "folio_validation_19", "prediction": "all x.(MmonkeypoxVirus(x) -> OccursInAnimals(x))", "score": 0}
{"id": "folio_validation_19", "prediction": "all x.(MonkeypoxVirus(x) -> OccursInSpecificAnimals(x))", "score": 0}
{"id": "folio_validation_19", "prediction": "all x.((MonkeyPoxVirus(x) & ExistsInAnimals(x)) -> OccursInAnimals(x))", "score": 0}
{"id": "folio_validation_19", "prediction": "all x y.((MonkeypoxVirus(x) & Animal(y)) -> CanOccurIn(x,y))", "score": 0}
{"id": "folio_validation_19", "prediction": "all x.(MonkeypoxVirus(x) -> CanOccursInAnimals(x))", "score": 0}
{"id": "folio_validation_20", "prediction": "all x.(Human(x) -> Mammal(x))", "score": 0}
{"id": "folio_validation_20", "prediction": "(all x.(Human(x) -> Mammal(x))", "score": -1}
{"id": "folio_validation_21", "prediction": "all x.(Mammal(x) -> Animal(x))", "score": 0}
{"id": "folio_validation_22", "prediction": "all x.((Sympton(x) & Monkeypox(x)) -> (Fever(x) | Headache(x) | MusclePains(x)|Tense(x)))", "score": 0}
{"id": "folio_validation_22", "prediction": "all x.(Monkeypox(x) -> ((Fever(x) & Headache(x) & MusclePains(x) & FeelingFare(x))))", "score": 0}
{"id": "folio_validation_22", "prediction": "all x.((Symptons(x,Monkeypox)) -> (Fever(x) | Headache(x) | MusclePains(x) | Tired(x)))", "score": 0}
{"id": "folio_validation_22", "prediction": "all x.(Monkeypox(x) -> (Elements(x,fever) & Elements(x,headache) & Element(x,musclePainting) & Element(x,feelingFat(x)))", "score": -1}
{"id": "folio_validation_22", "prediction": "all x.((Symptote(x) & Monkeypox(x)) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingTense(x) & SoOn(x)))", "score": 0}
{"id": "folio_validation_22", "prediction": "all x.(MonkeypoxSymptons(x) -> (Fever(x) & Headache(x) & MusclePain(x) & FakingTensed(x)))", "score": 0}
{"id": "folio_validation_22", "prediction": "all x.((Symptose(x) & Monkeypox(x)) -> (Fever(x) | Headache(x) | MusclePains(x) | FeelingFat(x)))", "score": 0}
{"id": "folio_validation_22", "prediction": "all x.((SomptonOfMonkeypox(x) & Fremon(x)) -> (Fever(x) | Headache(x) | MusclePains(x) | FeelingFeeling(x)))", "score": 0}
{"id": "folio_validation_22", "prediction": "all x.(Monkeypox(x) -> (IncludesFever(x) | IncludesHeadache(x) | IncludesMusclePain(x) | FeelsThirsty(x)))", "score": 0}
{"id": "folio_validation_22", "prediction": "all x.(Monkeypox(x) -> (Fever(x) & Headaches(x) & MusclePains(x) & FeelingFat(x)))", "score": 0}
{"id": "folio_validation_22", "prediction": "all x.(MonkeyPox(x) -> (Fever(x) | Headache(x) | MusclePain(x) | FeelingTight(x)))", "score": 0}
{"id": "folio_validation_22", "prediction": "all x.(MunkeypoxSymptons(x) -> (Fever(x) | Headache(x) | MusclePains(x) | FeelingFewer(x)))", "score": 0}
{"id": "folio_validation_22", "prediction": "all x.(Monkeypox(x) -> (Fever(x) & Headache(x) & MusclePains(x) & FeelingFeelTough(x)))", "score": 0}
{"id": "folio_validation_22", "prediction": "all x.(IsMonkeypox(x) -> (Fever(x) | Headache(x) | MusclePainting(x) | FeelingFew(x)))", "score": 0}
{"id": "folio_validation_22", "prediction": "all x.(Monkeypox(x) -> (Fever(x) & Headache(x) & MusclePain(x) & FeelingTense(x)))", "score": 0}
{"id": "folio_validation_22", "prediction": "(Include(Symptons(SymptonsClaireMonkeypox) & (Fever(Habitus) | MusclePains(MusclePain) | FeelingFeeling(Mourning))))", "score": -1}
{"id": "folio_validation_23", "prediction": "all x y.((Person(x) & Glu(y)) -> FeelsTense(x,y))", "score": 0}
{"id": "folio_validation_23", "prediction": "all x.(Glo(x) -> FeelsTight(x))", "score": 0}
{"id": "folio_validation_23", "prediction": "all x.((Person(x) & GetsGlu(x)) -> FeelsTild(x))", "score": 0}
{"id": "folio_validation_23", "prediction": "all x.(BuysGlu(x) -> Fate(x))", "score": 0}
{"id": "folio_validation_23", "prediction": "all x.((Person(x) & GetsGlu(x)) -> FeelsFat.(Glu)))", "score": -1}
{"id": "folio_validation_23", "prediction": "all x.((Person(x) & GetsGlu(x)) -> FeelsStuff(x))", "score": 0}
{"id": "folio_validation_23", "prediction": "all x.((Person(x) & GetsGlu(x)) -> FeelsEasy(x))", "score": 0}
{"id": "folio_validation_23", "prediction": "all x.((Person(x) & Gila(x)) -> FeelsTense(x))", "score": 0}
{"id": "folio_validation_23", "prediction": "all x.((Person(x) & Glu(x)) -> Fate(x))", "score": 0}
{"id": "folio_validation_23", "prediction": "all x y.((Person(x) & GetsGlu(x)) -> FeelsStoked(x))", "score": 0}
{"id": "folio_validation_23", "prediction": "all x.((Person(x) & GetsGlu(x)) -> FeelsStiff(x))", "score": 0}
{"id": "folio_validation_23", "prediction": "all x.((Person(x) & Glu(y)) -> Tired(x))", "score": 0}
{"id": "folio_validation_23", "prediction": "all x.((Person(x) & GetsGlu(x)) -> Tired(x))", "score": 0}
{"id": "folio_validation_23", "prediction": "all x y!((Person(x) & Glu(y)) -> FeelsStoked(x,y))", "score": 0}
{"id": "folio_validation_23", "prediction": "all x.((Person(x) & GetsGlu(x)) -> FeelsStorm(x))", "score": 0}
{"id": "folio_validation_23", "prediction": "all x.((Person(x) & Glu(x)) -> FeelsTreemed(x))", "score": 0}
{"id": "folio_validation_24", "prediction": "exists x.(Animal(x) & Relative(x))", "score": 0}
{"id": "folio_validation_24", "prediction": "exists x.(Animal(x) & Animal(x))", "score": 4}
{"id": "folio_validation_24", "prediction": "exists x.(Animal(x) & LivesIn(x,2))", "score": 0}
{"id": "folio_validation_24", "prediction": "exists x.(Animal(x) & -Animal(x))", "score": 0}
{"id": "folio_validation_24", "prediction": "ExistsVeteran(x) & Animal(x))", "score": -1}
{"id": "folio_validation_24", "prediction": "exists x.(Animal(x) & Pet(x))", "score": 0}
{"id": "folio_validation_24", "prediction": "exists x.(Animal(x) & Has(x))", "score": 0}
{"id": "folio_validation_24", "prediction": "exists x.(Animal(x) & (Calls(x) | Calls(x))))", "score": -1}
{"id": "folio_validation_24", "prediction": "exists x.(Animal(x) & ItIs(x))", "score": 0}
{"id": "folio_validation_24", "prediction": "exists x.(Animal(x) & Eats(x))", "score": 0}
{"id": "folio_validation_24", "prediction": "exists x.(Animal(x) & InMuseum(x))", "score": 0}
{"id": "folio_validation_25", "prediction": "all x.((Manager(x) | Manager(x)) -> (HasLunchAtHome(x) & WorksRemotelyFromHome(x)) | -(HasLunchAtHome(x) & WorksRemotelyFromHome(x))))", "score": -1}
{"id": "folio_validation_25", "prediction": "all x.((James(x) & (Manager(x) | InOtherCountries(x))) -> (HasLunchAtHome(x) & WorksRemotely(x)))", "score": 0}
{"id": "folio_validation_25", "prediction": "all x y.((Manager(x) | Manager(y)) -> (HasLunchAtHome(x) & WorksRemotelyFromHome(x)) | (-HasLunchAtHome(x) & WorksRemotelyFromHome(x))))", "score": -1}
{"id": "folio_validation_25", "prediction": "all x y.((Manager(x) & Manager(y) & LocatedIn(x,y)) -> (HasLunchAtHome(x) & WorksRemotelyFromHome(x) | -HasLunchAtHome(x) & WorksRemotelyFromHome(x)))", "score": 0}
{"id": "folio_validation_25", "prediction": "all x.((Manager(x) | InOrbit(x)) -> (HasLailAtHome(x) | (-HasLunchAtHome(x) | WorksRemotelyFromHome(x)))))", "score": -1}
{"id": "folio_validation_25", "prediction": "all x.(Manager(x) -> (HasLunchAtHome(x) & WorksRemotelyFromHome(x) & -HasLunchAtHome(x) & -WorksRemotelyFromHome(x)))", "score": 0}
{"id": "folio_validation_25", "prediction": "all x.((James(x) & (Manager(x) | InLawyers(x))) -> (HasLunchAtHome(x) & WorksRemotelyFromHome(x) | (-HasLunchAtHome(x) | WorksRemotelyFromHome(x)))))", "score": -1}
{"id": "folio_validation_25", "prediction": "all x.((Manager(x) | InOtherCountries(x)) -> (JamEats(x) & WorksRemotely(x) | -Experiences(x)))", "score": 0}
{"id": "folio_validation_25", "prediction": "all x.((Manager(x) | inOtherCountries(x)) -> (HasLunchAtHome(x) | WorksRemotelyForHome(x)))", "score": 0}
{"id": "folio_validation_25", "prediction": "all x.((Manager(x) | (Manager(x) | Manager(x)))) -> (HasLunchAtHome(x) & WorksRemotelyFromHome(x)) | (-HasLunchAtHome(x) & -WorksRemotelyFromHome(x)) & -worksRemotelyFromHome(x))))", "score": -1}
{"id": "folio_validation_25", "prediction": "((Manager(James) | -Manager(James)) | (-Manager(James) | Manager(James))))", "score": -1}
{"id": "folio_validation_25", "prediction": "all x.((James(x) & Manager(x)) -> (HasLunchAtHome(x) & WorkedRemotelyFromHome(x)) | (-HasLunchAtHome(x) & WorkedRemotelyFromHome(x))))", "score": -1}
{"id": "folio_validation_25", "prediction": "all x.((AsManager(x) | InAnotherCountry(x)) -> (HasLunchAtHome(x) & WorksRemotelyFromHome(x)) | (-HasLunchAtHome(x) & WorksRemotelyFromHome(x))))", "score": -1}
{"id": "folio_validation_25", "prediction": "(-(ManagingManager(James) | InternationalWorker(James))) -> (HasLapsAtHome(James) | -WorksRemotelyFromHome(James)))", "score": -1}
{"id": "folio_validation_25", "prediction": "all x.((AmplifiedByManager(x) | InOtherCountries(x)) -> (HasLunchAtHome(x) | (WorksRemotelyFromHome(x) | -HasLunchAtHome(x)))))", "score": -1}
{"id": "folio_validation_25", "prediction": "all x.((Manager(x) | InOtherCountries(x)) -> (HasLunchAtHome(x) & WorksRemotelyFromHome(x)) | (-HasLunchAtHome(x) & WorksRemotelyFromHome(x))))", "score": -1}
{"id": "folio_validation_26", "prediction": "-exists x.(Flu(x) & Gets(x,Flu))", "score": 0}
{"id": "folio_validation_26", "prediction": "-asksWinnerFlu(a)", "score": 0}
{"id": "folio_validation_26", "prediction": "nobodygetsFlu(n)", "score": 0}
{"id": "folio_validation_26", "prediction": "-exists x.(HasFlu(x) & All(x))", "score": 0}
{"id": "folio_validation_26", "prediction": "all x.(NobodyGetsFlu(x) -> -HasFlu(x))", "score": 0}
{"id": "folio_validation_26", "prediction": "-exists x.(Human(x) & GetsFlu(x))", "score": 0}
{"id": "folio_validation_26", "prediction": "-exists x.(Horizon(x) & GetsFib(x))", "score": 0}
{"id": "folio_validation_26", "prediction": "-exists x.(Flu(x) & RequiresFluid(x))", "score": 0}
{"id": "folio_validation_26", "prediction": "I've heard a lot about how to prevent and treat flu.", "score": -1}
{"id": "folio_validation_26", "prediction": "all x.(NoOneGetsFlu(x) -> -CanGiveFlu(x))", "score": 0}
{"id": "folio_validation_26", "prediction": "-exists x.(Flu(x) & -GivesFlu(x))", "score": 0}
{"id": "folio_validation_26", "prediction": "all x.(None(x) -> GetsFlame(x))", "score": 0}
{"id": "folio_validation_26", "prediction": "-exists x.(Fluid(x) & -Gets(x,flu))", "score": 0}
{"id": "folio_validation_26", "prediction": "-exists x.(HuntsFlu(x) & NoOneHasFlu(x))", "score": 0}
{"id": "folio_validation_26", "prediction": "-all x.(Person(x) -> GetsFlu(x))", "score": 0}
{"id": "folio_validation_27", "prediction": "all x.((Sympton(x) & Monkeypox(x)) -> IncludesCoughing(x))", "score": 0}
{"id": "folio_validation_27", "prediction": "all x.(Munkeypox(x) & Sympton(x,y) -> IncludesCoughing(y))", "score": 0}
{"id": "folio_validation_27", "prediction": "all x.(Student(x) -> IncludesCoughing(x))", "score": 0}
{"id": "folio_validation_27", "prediction": "all x y.((Morkeypox(x) & Hungry(y)) -> Includes(x,y))", "score": 0}
{"id": "folio_validation_27", "prediction": "all x.(Munkeypox(x) -> (IncludesCoughing(x) & CannotHavePox(x)))", "score": 0}
{"id": "folio_validation_27", "prediction": "all x.((SymptonOf(x,MonkeyPox)) -> (Coughing(x) | Coughing(x)))", "score": 0}
{"id": "folio_validation_27", "prediction": "all x.((MonkeypoxSympoon(x) & IncludesCoughing(x)) -> IncludesCoughing(x))", "score": 0}
{"id": "folio_validation_27", "prediction": "all x.((Symptom(x) & Monkeypox(x)) -> (Coughing(x) | Coughing(x)))", "score": 0}
{"id": "folio_validation_27", "prediction": "all x.((Monkeypox(x) & Symptote(x)) -> Coughing(x))", "score": 0}
{"id": "folio_validation_27", "prediction": "all x.((Symptom(x) & Monkeypox(x)) -> IncludesCoughing(x))", "score": 0}
{"id": "folio_validation_27", "prediction": "all x.(Sympton(x) -> (Mokeypox(x) | Coughing(x)))", "score": 0}
{"id": "folio_validation_27", "prediction": "all x.(Sox(x) -> (Monkeypox(x) & InvolvesCoughing(x)))", "score": 0}
{"id": "folio_validation_27", "prediction": "all x.(Symptonia(x) -> CoversCoughing(x))", "score": 0}
{"id": "folio_validation_28", "prediction": "Alle x.(WildTurkey(x) -> (EasternwildTurkey(x) | OsceolawildTurkey(x) | GouldswildTurkey(x) | MerriamswildTurkey(x)))", "score": -1}
{"id": "folio_validation_28", "prediction": "exists x.(WildTurkey(x) & ((EasternWildTurkey(x) & OsceolaWildTurkey(x)) | (GouldSwildTurkey(x) & MerriamSwildTurkey(x))))", "score": 0}
{"id": "folio_validation_28", "prediction": "all x.((WesternwildTurkey(x) & OsceolawildTurkey(x) & GouldswildTurkey(x) & MerriamswildTurkey(x)) -> WildTurkey(x))", "score": 0}
{"id": "folio_validation_28", "prediction": "all x.((WildTurkey(x) & (EasternWildTurkey(x) | OsceolaWildTurkey(x))) | (GouldsWildTurkey(x) | MerriamsWildTurkey(x))))", "score": -1}
{"id": "folio_validation_28", "prediction": "exists x.(WildTurkey(x) & ((EasternWildTurkey(x) & OsceolaWildTurkey(x)) | (GouldWildTurkey(x) & MerriamWildTurkey(x))))", "score": 0}
{"id": "folio_validation_28", "prediction": "there are six types of wild turkeys(thewildturkey(r) & (Rose(r) | Osceola(r) | Gouldswildturkey(r) | Merriamswildturkey(r)))", "score": -1}
{"id": "folio_validation_28", "prediction": "all x.((WildTurkey(x) & (WesternWildTurkey(x) | OsceolaWildTurkey(x))) -> (EasternWildTurkey(x) | GouldwildTurkey(x) | MerriamwildTurkey(x)))", "score": 0}
{"id": "folio_validation_28", "prediction": "all x y.((WildTurkey(x) & (EasternWildTurkey(y) | OsceolaWildTurkey(y)) | (GouldsWildTurkey(y) | MerriamsWildTurkey(y))))", "score": 0}
{"id": "folio_validation_28", "prediction": "all x.(WildTurkey(x) -> ((EsteanwildTurkey(x) | OsceolawildTurkey(x)) | (GouldswildTurkey(x) | MerriamswildTurkey(x))))", "score": 0}
{"id": "folio_validation_28", "prediction": "(SixWildTurkeys(est,wild) & SevenFactors(osceola,wild) & SevenFigures(gould,wild) & SevenFigures(merrimam,wild))", "score": 0}
{"id": "folio_validation_28", "prediction": "all x.((WildTurkey(x) & WildTurkey(x)) -> (Eastern(x) & Osceola(x) & WildTurkey(x) & WildTurkey(x) & MerriamWildTurkey(x)))", "score": 0}
{"id": "folio_validation_28", "prediction": "there are six kinds of wildturkeys: WildTurkey((EasterwildTurkey) & WildTurkey(OsceolawildTurkey) & WildTurkey(Gould) & WildTurkey(Merriam) & WildTurkey(Merriam))", "score": -1}
{"id": "folio_validation_28", "prediction": "(WarmTurkey(east) | WildTurkey(osceola) | WildTurkey(gould) | WildTurkey(merrieam)))", "score": -1}
{"id": "folio_validation_28", "prediction": "(ShiftWitness(Whitness) -> (EasterwildTurkey(Whitness) & OsceolawildTurkey(Whitness) & GouldsWhitnessTurkey(Whitness) & MerriamsWhitness(Whitness)))", "score": 0}
{"id": "folio_validation_28", "prediction": "all x y z,b.((WildTurkey(x) & Eastern(y) & Osceola(z)) -> (SharkTurkey(x) & WildTurkey(x,y,z)))", "score": -1}
{"id": "folio_validation_28", "prediction": "(WesternwildTurkey(ex) | OsceolawildTurkey(ex) | GouldsWildTurkey(ex) | MerriamsWildTurkey(x)))", "score": -1}
{"id": "folio_validation_29", "prediction": "all x y.((RioGrand(x) & WildTobacco(y) & Ocellated(y)) -> Alive(x,y))", "score": 0}
{"id": "folio_validation_29", "prediction": "(all x.(Turkey(x) -> Rio Grande(x)) & (Turkey(x) -> Ocellated(x)))", "score": -1}
{"id": "folio_validation_29", "prediction": "all x y.((Dressing(x) & RioGrand(y)) -> (WildTurkey(x) | Ocellated(x)))", "score": 0}
{"id": "folio_validation_29", "prediction": "(all x.(RioGrand(x) -> WildTurkey(x)) & all y.(Ocellated(y) -> WildTurkey(y)))", "score": 0}
{"id": "folio_validation_29", "prediction": "all x y.((Color(x) & (RioGrooved(y) | Ocellated(y))) -> Turkey(x))", "score": 0}
{"id": "folio_validation_29", "prediction": "all x.((Turkey(x) & RioGrand(x)) -> (RioGrand(x) & WildTurkey(x) & Ocellated(x)))", "score": 0}
{"id": "folio_validation_29", "prediction": "(all x.(RioSgadgetTurkey(x) -> Wild(x)) & (RioGrand(x) -> Wild(x)) & (Ocellated(x) -> Wild(x)))", "score": 0}
{"id": "folio_validation_29", "prediction": "all x y z.((Rio GrandewildTurkey(x) & OcellatedWildTurkey(y) & WildTurkey(z)) -> (RioGrand(x) & Ocellated(y)))", "score": -1}
{"id": "folio_validation_29", "prediction": "all x y z.((Rio Grande(x) & WildTurkey(y) & Ocellated(z)) -> (Rio Grande(x) & WildTurkey(z)))", "score": -1}
{"id": "folio_validation_29", "prediction": "all x y.((Turkey(x) & WildTurkey(y) & RioRio Grande(x1) & OcellatedCurly(x)) -> (Turkey(y) | Turkey(y) & WildTurkey(y)))", "score": -1}
{"id": "folio_validation_29", "prediction": "(all x.((Rio Grande(x) & WildTurkey(x)) | (Ocellated(x) & WildTurkey(x))))", "score": -1}
{"id": "folio_validation_29", "prediction": "(all x.(SpinedTurkey(x) -> InChoice(x)) & (RioGrand(x) -- InChoice(x))) & (Ocellated(x) | InChoice(x)))", "score": -1}
{"id": "folio_validation_29", "prediction": "all x y z.((Rio Grande(x) & WildTurkey(y) & Ocellated(z)) -> (Berry(x) | RolgawildTurkey(y) | OcellatedwildTurkey(z)))", "score": -1}
{"id": "folio_validation_29", "prediction": "all x.((RioGuardia(x) | RioGuardia(x) | Ocellated(x))) -> Turkey(x))", "score": -1}
{"id": "folio_validation_29", "prediction": "(all x.(RioGrand(x) -> Turkey(x)) & all y.(RioGrand(y) -> Turkey(y)) & all z.(Ocellated(z) -> Turkey(z))))", "score": -1}
{"id": "folio_validation_30", "prediction": "Tom is notAEasternWildTurkey(Tom)", "score": -1}
{"id": "folio_validation_30", "prediction": "& -EasternWildTurkey(Tom)", "score": -1}
{"id": "folio_validation_30", "prediction": "Tom is notEasternWildTurkey(Tom)", "score": -1}
{"id": "folio_validation_30", "prediction": "Tom is not EasternWildTurkey(Tom)", "score": -1}
{"id": "folio_validation_30", "prediction": "Tom -EasternWildTurkey(Tom,Fresh Turkey)", "score": -1}
{"id": "folio_validation_30", "prediction": "*(Tom\" & -EasterlyWildTurkey(Tom))", "score": -1}
{"id": "folio_validation_30", "prediction": "-(EasternWildTurkey(Tommy))", "score": 0}
{"id": "folio_validation_30", "prediction": "Tom is notEasterlyWildTurkey(Tommy) & -DrawTurkey(Tommy))", "score": -1}
{"id": "folio_validation_30", "prediction": "Tom -EasternWildTurkey(Tom)", "score": -1}
{"id": "folio_validation_30", "prediction": "(-EasternWildTurkey(Tom)", "score": -1}
{"id": "folio_validation_30", "prediction": "(-EasternWildTurkey(Tom))", "score": 0}
{"id": "folio_validation_30", "prediction": "Tom is notEasterlyWildTurkey(Tom)", "score": -1}
{"id": "folio_validation_30", "prediction": "Tom n'est pas EastEndWildTurkey(Tom)", "score": -1}
{"id": "folio_validation_30", "prediction": "Tom & -EasternWildTurkey(Tom)", "score": 0}
{"id": "folio_validation_31", "prediction": "and OsceolaWildTurkey(Tom)", "score": -1}
{"id": "folio_validation_31", "prediction": "all x.((Tom(x) & -OsceolaWildTurkey(x)) -> -HasTurkey(x))", "score": 0}
{"id": "folio_validation_31", "prediction": "all x.((Tam(x) & OsceolaWildTurkey(x)) -> -(WildTurkey(x) & WildTurkey(x)))", "score": 0}
{"id": "folio_validation_31", "prediction": "all x.((Tom(x) & -OsceolaWildTurkey(x)) -> -OsceolaWildTurkey(x))", "score": 0}
{"id": "folio_validation_31", "prediction": "Tom is not an OsceolawildTurkey(Tommy)", "score": -1}
{"id": "folio_validation_31", "prediction": "Tom is-WildTurkey(Tom)", "score": -1}
{"id": "folio_validation_31", "prediction": "(-RoseWildTurkey(Tom))", "score": 0}
{"id": "folio_validation_31", "prediction": "Tom is -OsceolaWildTurkey(Tom)", "score": -1}
{"id": "folio_validation_31", "prediction": "Tom is not OsceolaWildTurkey(Tom)", "score": -1}
{"id": "folio_validation_31", "prediction": "(-OsceolaWildTurkey(Tom))", "score": 0}
{"id": "folio_validation_31", "prediction": "Tom is notOsceolawildTurkey(Tom)", "score": -1}
{"id": "folio_validation_31", "prediction": "Tom -ScareolaWildTurkey(Tomas))", "score": -1}
{"id": "folio_validation_31", "prediction": "(WildTurkey(Tom) & Osceola(Tom))", "score": 0}
{"id": "folio_validation_31", "prediction": "-((Tom(Tom) | OsceolaWildTurkey(Tom)))", "score": 0}
{"id": "folio_validation_31", "prediction": "Tom is not a WildTurkey(Tom)", "score": -1}
{"id": "folio_validation_31", "prediction": "Tom, y.((Tax(y) & Osceola(y)) -> -WildTurkey(y))", "score": -1}
{"id": "folio_validation_32", "prediction": "(all x.(Tom(x) -> -(GouldsWildTurkey(x) | MerriamsWildTurkey(x)) | RioGirlsWildTurkey(x)))", "score": 0}
{"id": "folio_validation_32", "prediction": "all x.(Tom(x) -> -(GouldsWildTurkey(x) | MerriamsWildTurkey(x) | RioGroundwildTurkey(x)))", "score": 0}
{"id": "folio_validation_32", "prediction": "all x.(Tom(x) -> (-GouldsWildTurkey(x) | MerriamsWildTurkey(x) | RioGrandwildTurkey(x)))", "score": 0}
{"id": "folio_validation_32", "prediction": "-(GouldsWildTurkey(Tom) | MerriamsWildTurkey(Tom) | RioGroitwildTurkey(Tom)))", "score": -1}
{"id": "folio_validation_32", "prediction": "all x.(Tom(x) -> (-GouldswildTurkey(x) | MerriamswildTurkey(x) | RioGrandwildTurkey(x)))", "score": 0}
{"id": "folio_validation_32", "prediction": "(-(Tom(Tom) | GouldsWildTurkey(Tom)) | MerriamsWildTurkey(Tom)) | RioGuardiaWildTurkey(Tom)))", "score": -1}
{"id": "folio_validation_32", "prediction": "all x.((Tom(x) & -(GouldsGreenTurkey(x) | MerriamsGreenTurkey(x) | RioGrandwildTurkey(x))) -> -Smoking(x))", "score": 0}
{"id": "folio_validation_32", "prediction": "all x.(Tom(x) -> (-GouldsWildTurkey(x) | MerriamsWildTurkey(x) | RioGrandisWildTurkey(x)))", "score": 0}
{"id": "folio_validation_32", "prediction": "all x.(Tom(x) -> -(GouldsWildTurkey(x) | MerriamsWildTurkey(x) | Rio GrandeWildTurkey(x)))", "score": -1}
{"id": "folio_validation_32", "prediction": "(-(Goulds(Tom) & -Merriams(Tom)) | -MarriotswildTurkey(Tom)) | -Rio GrandewildTurkey(Tom)))", "score": -1}
{"id": "folio_validation_32", "prediction": "all x.(Tom(x) -> (-GouldsWildTurkey(x) | MerriamsWildTurkey(x) | RioGrandeWildTurkey(x)))", "score": 0}
{"id": "folio_validation_32", "prediction": "all x.((Tom(x) & -(GouldsWildTurkey(x) | MerriamsWildTurkey(x) | RioGrandiaWildTurkey(x))) -> -GouldsWildTurkey(x))", "score": 0}
{"id": "folio_validation_32", "prediction": "all x.(Tom(x) -> (-GouldsWildTurkey(x) | MerriamsWildTurkey(x) | Rio GrandeWildTurkey(x)))", "score": -1}
{"id": "folio_validation_32", "prediction": "(-(GouldsWildTurkey(Tom) | MerriamsWildTurkey(Tom)) | RioGrandwildTurkey(Tom)))", "score": -1}
{"id": "folio_validation_32", "prediction": "(-GuldsWildTurkey(Tom) | MerriamsWildTurkey(Tom) | Rio GrandeWildTurkey(Tom)))", "score": -1}
{"id": "folio_validation_32", "prediction": "(-(Tom(Tom) | GouldSwildTurkey(Tom)) | MerriamSwildTurkey(Tom)) | RioGroßwildTurkey(Tom))", "score": -1}
{"id": "folio_validation_33", "prediction": "Tom is OcellatedWildTurkey(Tom)", "score": -1}
{"id": "folio_validation_33", "prediction": "(OcellatedWildTurkey(Tom))", "score": 0}
{"id": "folio_validation_33", "prediction": "Tom is ocellatedwildTurkey(Tom)", "score": -1}
{"id": "folio_validation_33", "prediction": "OcellatedWildTurkey(Tom)", "score": 0}
{"id": "folio_validation_33", "prediction": "Tom ist OcellatedWildTurkey(Tom)", "score": -1}
{"id": "folio_validation_33", "prediction": "((Tom,Ocellated(Tom,Turkey)) | Ocellated(Tom,Turkey)))", "score": -1}
{"id": "folio_validation_33", "prediction": "ALL x.((Tom(x) & OcellatedWildTurkey(x)) -> Wild(x))", "score": -1}
{"id": "folio_validation_33", "prediction": "(ocellatedwildTurkey(Tom)", "score": -1}
{"id": "folio_validation_33", "prediction": "Tom is a OcellatedWildTurkey(Tom)", "score": -1}
{"id": "folio_validation_33", "prediction": "all x.((Tom(x) & OcellatedWildTurkey(x)) -> Ocellated(x))", "score": 0}
{"id": "folio_validation_34", "prediction": "(Eston(Tom) & WildTurkey(Tom))", "score": 0}
{"id": "folio_validation_34", "prediction": "Tom (EasternWildTurkey)", "score": 0}
{"id": "folio_validation_34", "prediction": "Tom is EasternWildTurkey(Tum).", "score": -1}
{"id": "folio_validation_34", "prediction": "Tom is EasternWildTurkey(Tom)", "score": -1}
{"id": "folio_validation_34", "prediction": "(EasternWildTurkey(Tom)", "score": -1}
{"id": "folio_validation_34", "prediction": "(WildTurkey(Tom)", "score": -1}
{"id": "folio_validation_34", "prediction": "(EasternWildTurkey(Tom) -> FarmedTom(Tom))", "score": 0}
{"id": "folio_validation_34", "prediction": "EstonicWildTurkey(tom)", "score": 0}
{"id": "folio_validation_34", "prediction": "ToMom(Tom) & EasternWildTurkey(Tom))", "score": -1}
{"id": "folio_validation_34", "prediction": "Tom ist EasternWildTurkey(Tom)", "score": -1}
{"id": "folio_validation_34", "prediction": "EraserTurkey(Tom)", "score": 0}
{"id": "folio_validation_34", "prediction": "Tom is EasternWildTurkey(x)", "score": -1}
{"id": "folio_validation_35", "prediction": "(WildTurkey(joey) & Wild(joey))", "score": 0}
{"id": "folio_validation_35", "prediction": "all x.(Joey(x) -> WildTurkey(x))", "score": 0}
{"id": "folio_validation_35", "prediction": "He is a wildTurkey(Joey)", "score": -1}
{"id": "folio_validation_35", "prediction": "theWildTurkey(Joey)", "score": 0}
{"id": "folio_validation_35", "prediction": "(WildTurkey(Joey)", "score": -1}
{"id": "folio_validation_35", "prediction": "(WildTurkey(Joey) & Has(Joey,Turkey))", "score": 0}
{"id": "folio_validation_35", "prediction": "(WildTurkey(Joey))", "score": 0}
{"id": "folio_validation_35", "prediction": "Mikey is WildTurkey(Joey)", "score": -1}
{"id": "folio_validation_36", "prediction": "all x.((JapaneseGameCompany(x) & LegendOfZelda(x)) -> CreatedBy(x,y))", "score": 0}
{"id": "folio_validation_36", "prediction": "all x.((JapaneseGameCompany(x) & LegendOfZelda(x) & CreatedBy(x,y)) -> CreatedBy(x,z))", "score": 0}
{"id": "folio_validation_36", "prediction": "all x y.((JapaneseGameCompany(x) & LegendOfZelda(y)) -> CreatedBy(x,y))", "score": 0}
{"id": "folio_validation_36", "prediction": "all x y.((JapaneseGameCompany(x) & LegendOfZelda(y)) -> Created(x,y))", "score": 0}
{"id": "folio_validation_36", "prediction": "all x.(JapaneseGameCompany(x) -> (CreatedLegionOfZelda(x) & LegendOfZelda(x)))", "score": 0}
{"id": "folio_validation_36", "prediction": "all x y z.((YoshuaGameCompany(x) & LegendOfZelda(y) & Game(z)) -> CreatedBy(x,y,z))", "score": 0}
{"id": "folio_validation_36", "prediction": "all x.(JapaneseGameCompany(x) -> LegendOfZelda(x))", "score": 0}
{"id": "folio_validation_36", "prediction": "all x y.((JapaneseGameCompany(x) & Game(y)) -> (CreatedBy(x,y) & LegendOfZelda(x)))", "score": 0}
{"id": "folio_validation_36", "prediction": "all x.((JapaneseGameCompany(x) & CreatedGame(x)) -> LegendOfZelda(x))", "score": 0}
{"id": "folio_validation_36", "prediction": "all x.((JapaneseGameCompany(x) & LegendOfZelda(x)) -> Created(x,z))", "score": 0}
{"id": "folio_validation_36", "prediction": "all x y z.((JapaneseGameCompany(x) & LegendOfZelda(y) & Game(z)) -> CreatedBy(x,y,z))", "score": 0}
{"id": "folio_validation_36", "prediction": "all x y.((JapaneseGameCompany(x) & LegendOfZelda(x)) -> CreatedBy(x,y))", "score": 0}
{"id": "folio_validation_37", "prediction": "all x.(Top10(x) -> MADEByJapaneseGameCompany(x))", "score": 0}
{"id": "folio_validation_37", "prediction": "all x.(Top10List(x) -> AllGamesMadeByJapaneseGameCompanies(x))", "score": 0}
{"id": "folio_validation_37", "prediction": "all x.(Histars(x,y) -> MadeByJapaneseGameCompanies(y))", "score": 0}
{"id": "folio_validation_37", "prediction": "all x.(Top10List(x) -> MadeByJapaneseGameCompanies(x))", "score": 0}
{"id": "folio_validation_37", "prediction": "all x.((Game(x) & Top10(x)) -> MadeByJapaneseGameCompany(x))", "score": 0}
{"id": "folio_validation_37", "prediction": "all x.(Top10(x) -> MadeByJapaneseGameCompanies(x))", "score": 0}
{"id": "folio_validation_37", "prediction": "all x.(Top10Game(x) -> MadeByJapaneseGameCompany(x))", "score": 0}
{"id": "folio_validation_37", "prediction": "all x.(TopTen(x) -> MadeByJapaneseGameCompanies(x))", "score": 0}
{"id": "folio_validation_37", "prediction": "all x y z.((Game(x) & Top10List(y) & JapaneseGameCompany(z)) -> MadeBy(x,y))", "score": 0}
{"id": "folio_validation_37", "prediction": "all x.(Title10(x) -> (MadeByJapaneseGameCompany(x) & Top10)))", "score": -1}
{"id": "folio_validation_37", "prediction": "all x.(Top10(x) -> MadeByJewishGameCompanies(x))", "score": 0}
{"id": "folio_validation_37", "prediction": "all x.(Top10Playlist(x) -> MadeByJapaneseGameCompanies(x))", "score": 0}
{"id": "folio_validation_37", "prediction": "all x.(TopTen(x) -> (Game(x) & MadeByJapaneseGameCompany(x)))", "score": 0}
{"id": "folio_validation_37", "prediction": "All x.(TopPiece(x) -> (MadeBy(x,y) & JapaneseGameCompany(y)))", "score": -1}
{"id": "folio_validation_37", "prediction": "all x y.((Game(x) & TopTenList(y)) -> MadeByJapaneseGameCompany(x,y))", "score": 0}
{"id": "folio_validation_38", "prediction": "all x.(SellsMoreThanOne MillionCopies(x) -> Top10List(x))", "score": -1}
{"id": "folio_validation_38", "prediction": "all x.(SellsMoreThan(x,y) -> Top10List(y))", "score": 0}
{"id": "folio_validation_38", "prediction": "all x.((Game(x) & SellsMoreThanOneMillionCopies(x)) -> Top10List(x))", "score": 0}
{"id": "folio_validation_38", "prediction": "all x.((Game(x) & MoreThanOneMillionCopiesSold(x)) -> Top10(x))", "score": 0}
{"id": "folio_validation_38", "prediction": "all x.((Game(x) & SellsMoreThanOneMillionCopies(x)) -> Top10(x))", "score": 0}
{"id": "folio_validation_38", "prediction": "(IfMoreThanOneMillionCopiesSold(x) & Top10List(x))", "score": 2}
{"id": "folio_validation_38", "prediction": "all x.((Game(x) & SellsMoreThan(x, million)) -> SelectedIntoTop10(x))", "score": 0}
{"id": "folio_validation_38", "prediction": "all x.((Game(x) & SellsMoreThan(x,million)) -> SelectedIntoTop10(x))", "score": 0}
{"id": "folio_validation_38", "prediction": "all x.((Game(x) & SellsMoreThanOneMillionCopies(x)) -> NominatedIntoTop10(x))", "score": 0}
{"id": "folio_validation_38", "prediction": "all x y.((Game(x) & SellsMoreThanOneMillionCopies(x) & Top10List(y)) -> SelectedInto(x,y))", "score": 0}
{"id": "folio_validation_38", "prediction": "all x.(SoldMoreThan(x,MillionCopies(x)) -> Top10List(x))", "score": 0}
{"id": "folio_validation_38", "prediction": "all x y z.((Game(x) & SellsMoreThanOneMillionCopies(x) & Top10List(y)) -> Selectable(z))", "score": 0}
{"id": "folio_validation_38", "prediction": "[BG] -> (SellsMoreThanOneMillionCopies(Gaming) & SelectsIntoTop10List(Game,SelectedInTop10)))", "score": -1}
{"id": "folio_validation_38", "prediction": "all x.([BG] & SellsMoreThanTwoMillionCopies(x)) -> SelectedIntoTop10List(x))", "score": -1}
{"id": "folio_validation_39", "prediction": "The LegendOfZeldaSoldMoreThanOneMillionCopies(LordOfZelda)", "score": -1}
{"id": "folio_validation_39", "prediction": "LegendOfZeldaSoldMoreThanOneMillionCopies(x)", "score": 0}
{"id": "folio_validation_39", "prediction": "The LegendOfZelda(x) soldMoreThanOneMillionCopies(x))", "score": -1}
{"id": "folio_validation_39", "prediction": "\"LegendOfZelda\" sold more than one million copies.", "score": -1}
{"id": "folio_validation_39", "prediction": "The LegendOfZelda(c) soldMoreThousandKits(c))", "score": -1}
{"id": "folio_validation_39", "prediction": "The LegendOfZeldaSoldSeverityTypLikeOneMillionCopies(x)", "score": -1}
{"id": "folio_validation_39", "prediction": "the LegendOfZeldaSoldMoreThanOneMillionCopies(LittleBird(LotusElements)", "score": -1}
{"id": "folio_validation_39", "prediction": "LegendOfZeldaSoldMoreThanOneMillionCopies(LightOfZelda)", "score": 0}
{"id": "folio_validation_39", "prediction": "the LegendOfZelda(x) & SoldMoreThanOneMillionCopies(x))", "score": -1}
{"id": "folio_validation_39", "prediction": "La LegendOfZelda (RetoldByFan(x) & SellsMoreThanOneMillionCopies(x))", "score": -1}
{"id": "folio_validation_39", "prediction": "The LegendOfZelda SoldMoreThanOneMillionCopies(LowerZelda,SoldBy(LowerZelda))", "score": -1}
{"id": "folio_validation_39", "prediction": "All x.(LegendOfZelda(x) -> SoldMoreThanInMillionCopies(x))", "score": -1}
{"id": "folio_validation_39", "prediction": "The LegendOfZeldaSoldMoreThanOneMillionCopies(LetterOfZelda)", "score": -1}
{"id": "folio_validation_39", "prediction": "(SoldMoreThanOneMillionCopies(LandmarkOfZelda))", "score": 0}
{"id": "folio_validation_39", "prediction": "It soldmehrThanOneMillionCopies(LegendOfZelda)", "score": -1}
{"id": "folio_validation_39", "prediction": "The LegendOfZeldaSoldMoreThanOneMillionCopies(x) -> LegendOfZelda(x))", "score": -1}
{"id": "folio_validation_40", "prediction": "Exists x.(LitreOfZelda(x) & Top10List(x))", "score": -1}
{"id": "folio_validation_40", "prediction": "LegendOfZeldaInTop10List(x)", "score": 0}
{"id": "folio_validation_40", "prediction": "In Top10List(LegionOfZelda)", "score": -1}
{"id": "folio_validation_40", "prediction": "The LegendOfZelda (InTopTenList(x))", "score": -1}
{"id": "folio_validation_40", "prediction": "All x.(LegendOfZelda(x) -> Top10List(x))", "score": -1}
{"id": "folio_validation_40", "prediction": "The LegendOfZelda(x) - Top10 List(x))", "score": -1}
{"id": "folio_validation_40", "prediction": "The LegendOfZelda(x) -> InTop10List(x))", "score": -1}
{"id": "folio_validation_40", "prediction": "The LegendOfZelda & #10InTop10List(x)", "score": -1}
{"id": "folio_validation_40", "prediction": "(Top10List(LegendOfZelda))", "score": 1}
{"id": "folio_validation_40", "prediction": "The LegendOfZeldaInTop10List(x)", "score": -1}
{"id": "folio_validation_40", "prediction": "(LandlineOfZelda(x) -> Top10(x))", "score": 0}
{"id": "folio_validation_40", "prediction": "\"LegionOfZelda\" & Top10List(x))", "score": -1}
{"id": "folio_validation_40", "prediction": "All x.((LegendOfZelda(x) & Top10)(x)) -> LegendOfZelda(x))", "score": -1}
{"id": "folio_validation_40", "prediction": "All x.(LegendOfZelda(x) -> Top-10List(x))", "score": -1}
{"id": "folio_validation_40", "prediction": "The LegendOfZelda (top10)", "score": -1}
{"id": "folio_validation_40", "prediction": "The LegendOfZelda PostedInTop-10List(x)", "score": -1}
{"id": "folio_validation_41", "prediction": "all x y.((JapaneseVoiceGameCompany(x) & FIFA22(y)) -> MadeBy(x,y))", "score": 0}
{"id": "folio_validation_41", "prediction": "all x.(Football(x) -> MadeBy(x,y))", "score": 0}
{"id": "folio_validation_41", "prediction": "all x.((Football22(x) & MadeBy(x,y)) -> JapaneseVideoGameCompany(y))", "score": 0}
{"id": "folio_validation_41", "prediction": "all x.(FoxFoxProfessional(x) -> MadeByJapaneseVideoGameCompany(x))", "score": 0}
{"id": "folio_validation_41", "prediction": "all x.(Foxball(x) -> MadeByJapaneseVideoGameCompany(x))", "score": 0}
{"id": "folio_validation_41", "prediction": "all x.(Fantasy22(x) -> MadeByJapaneseVideoGameCompany(x))", "score": 0}
{"id": "folio_validation_41", "prediction": "all x y.((Foxbox22(x) & JapaneseVideoGameCompany(y)) -> MadeBy(x,y))", "score": 0}
{"id": "folio_validation_41", "prediction": "all x.(FoxFox22(x) -> MadeByJapaneseVideoGameCompany(x))", "score": 0}
{"id": "folio_validation_41", "prediction": "all x y.((FamousGameCompany(x) & JapaneseVideoGameCompany(y)) -> MadeBy(x,y))", "score": 0}
{"id": "folio_validation_41", "prediction": "all x.(Fame(x) -> (MadeByJapaneseVideoGameCompany(x) & JapaneseVideoGameCompany(x)))", "score": 0}
{"id": "folio_validation_41", "prediction": "all x y.((Fisherball(x) & JapaneseVideoGameCompany(y)) -> MadeBy(x,y))", "score": 0}
{"id": "folio_validation_41", "prediction": "all x y.((FIFA22(x) & JapaneseVideoGameCompany(y)) -> MadeBy(x,y))", "score": 0}
{"id": "folio_validation_41", "prediction": "all x.(SuperFootballCompany(x) -> MadeBy(x,JapaneseVideoGameCompany))", "score": 0}
{"id": "folio_validation_41", "prediction": "all x y.((Football(x) & JapaneseVideoGameCompany(y) & MadeBy(x,y)) -> FIFA22(x))", "score": 0}
{"id": "folio_validation_41", "prediction": "all x.(FoxFunction(x) -> MadeByJapaneseVideoGameCompany(x))", "score": 0}
{"id": "folio_validation_41", "prediction": "all x.((FoxFamous22.x) & JapaneseVideoGameCompany(x)) -> MadeBy(x,Favorite22))", "score": -1}
{"id": "folio_validation_42", "prediction": "-TopTenList(LegendOfZelda)", "score": 0}
{"id": "folio_validation_42", "prediction": "All x.(LegendOfZelda(x) -> -Top10List(x))", "score": -1}
{"id": "folio_validation_42", "prediction": "The LegendOfZelda is notInTop10List(z)", "score": -1}
{"id": "folio_validation_42", "prediction": "The LegendOfZelda-Top10List(z)", "score": -1}
{"id": "folio_validation_42", "prediction": "(-Top 10(LegendOfZelda))", "score": -1}
{"id": "folio_validation_42", "prediction": "(MoreLion(LegendOfZelda) -> -Top10List(LightNo.10))", "score": -1}
{"id": "folio_validation_42", "prediction": "The LegendOfZelda -InTop10List(z) -> -Function(z))", "score": -1}
{"id": "folio_validation_42", "prediction": "(-Top10List(LordOfZelda))", "score": 1}
{"id": "folio_validation_42", "prediction": "The LegendOfZelda (£239,999) | -Top10(-),)", "score": -1}
{"id": "folio_validation_42", "prediction": "In Top10 lists.", "score": -1}
{"id": "folio_validation_42", "prediction": "LegendOfZelda(x) -TopFace(x))", "score": -1}
{"id": "folio_validation_42", "prediction": "All x.( LegendOfZelda(x) -> -PopularList(x))", "score": -1}
{"id": "folio_validation_42", "prediction": "Die LegendOfZelda-InTop10List(x) -> -(BelongsToTop-10List(x) & LegendOfZelda(x)))", "score": -1}
{"id": "folio_validation_42", "prediction": "The LegendOfZelda (2019) - Top-10List(x))", "score": -1}
{"id": "folio_validation_42", "prediction": "NoTopChampions(LegionOfZelda)", "score": 0}
{"id": "folio_validation_42", "prediction": "The LegendOfZelda -Top10List(z)", "score": -1}
{"id": "folio_validation_43", "prediction": "all x.(Square(x) -> HasFourSides(x))", "score": 0}
{"id": "folio_validation_43", "prediction": "all x.(Square(x) -> HasSides(x,4))", "score": 2}
{"id": "folio_validation_43", "prediction": "all x.(Square(x) -> FifthSide(x))", "score": 0}
{"id": "folio_validation_43", "prediction": "-all x.(Square(x) -> HasSides(x,4))", "score": 2}
{"id": "folio_validation_43", "prediction": "all x.(Square(x) -> (HasFourSides(x)))", "score": 0}
{"id": "folio_validation_44", "prediction": "all x.(FourSidedThing(x) -> Shape(x))", "score": 0}
{"id": "folio_validation_44", "prediction": "all x.(FourSided(x) -> Shape(x))", "score": 0}
{"id": "folio_validation_44", "prediction": "all x.(FourSidedWord(x) -> Shape(x))", "score": 0}
{"id": "folio_validation_44", "prediction": "all x.(Quadriwise(x) -> Shape(x))", "score": 0}
{"id": "folio_validation_44", "prediction": "all x.(FourSidedWhat(x) -> Shape(x))", "score": 0}
{"id": "folio_validation_44", "prediction": "all x.((Clothing(x) & FourSided(x)) -> Shape(x))", "score": 0}
{"id": "folio_validation_45", "prediction": "all x.(Square(x) -> Shape(x))", "score": 1}
{"id": "folio_validation_45", "prediction": "all x y.((Square(x) & Shape(y)) -> Shape(x))", "score": 1}
{"id": "folio_validation_45", "prediction": "everything x.(Square(x) -> Shape(x))", "score": -1}
{"id": "folio_validation_46", "prediction": "all x.(Rabbit(x) -> Cute(x))", "score": 7}
{"id": "folio_validation_46", "prediction": "(Cute(rabbit)", "score": -1}
{"id": "folio_validation_46", "prediction": "-all x.(Rabbit(x) -> Cute(x))", "score": 7}
{"id": "folio_validation_46", "prediction": "all x.(Ratio(x) -> Cute(x))", "score": 0}
{"id": "folio_validation_47", "prediction": "exists x.(Turtle(x) & Turtle(x))", "score": 0}
{"id": "folio_validation_47", "prediction": "exists x.(Turtle(x) & Turtle(y))", "score": 0}
{"id": "folio_validation_47", "prediction": "exists x.(Turtle(x) & Exists(x))", "score": 0}
{"id": "folio_validation_47", "prediction": "exists x.(Turtle(x) & LivesIn(x))", "score": 0}
{"id": "folio_validation_47", "prediction": "exists x.(Turtle(x) & ExistsTerrain(x))", "score": 0}
{"id": "folio_validation_47", "prediction": "exists x.(Turtle(x) & Ecological(x))", "score": 0}
{"id": "folio_validation_47", "prediction": "exists x.(Turtle(x) & exists y.(Animal(y) & Turtle(z)))", "score": 0}
{"id": "folio_validation_47", "prediction": "exists x.(Turtle(x) & -exists y.(Turtle(y) | Turtle(x,y)))", "score": 0}
{"id": "folio_validation_48", "prediction": "all x.(Animal(x) -> (Rabbit(x) | Squirrel(x)))", "score": 0}
{"id": "folio_validation_48", "prediction": "exists x.(Animal(x) & (Rabbit(x) | Squirrel(x)))", "score": 0}
{"id": "folio_validation_49", "prediction": "all x.((Sick(x) & -Still(x)) -> Skittish(x))", "score": 0}
{"id": "folio_validation_49", "prediction": "all x.(Sliptish(x) -> -Still(x))", "score": 0}
{"id": "folio_validation_49", "prediction": "all x.(Skimish(x) -> -Still(x))", "score": 0}
{"id": "folio_validation_49", "prediction": "all x.(Skittle(x) -> -Still(x))", "score": 0}
{"id": "folio_validation_49", "prediction": "all x.((Sketchish(x) & -Still(x)) -> -Still(x))", "score": 0}
{"id": "folio_validation_49", "prediction": "all x.(Skimmed(x) -> -Still(x))", "score": 0}
{"id": "folio_validation_49", "prediction": "all x.(Skittish(x) -> -Still(x))", "score": 0}
{"id": "folio_validation_49", "prediction": "all x.(Spictish(x) -> -Still(x))", "score": 0}
{"id": "folio_validation_49", "prediction": "all x.((Skittish(x) & -Still(x)) -> -Still(x))", "score": 0}
{"id": "folio_validation_49", "prediction": "all x.((Skittish(x) | -Still(x)) -> -Skittish(x))", "score": 0}
{"id": "folio_validation_49", "prediction": "all x.(Spittish(x) -> -Still(x))", "score": 0}
{"id": "folio_validation_49", "prediction": "all x.((Skittish(x)) -> -Still(x))", "score": 0}
{"id": "folio_validation_49", "prediction": "all x.(Skittish(x) -> -Satisfied(x))", "score": 0}
{"id": "folio_validation_50", "prediction": "all x.(Squirrel(x) -> Skittish(x))", "score": 0}
{"id": "folio_validation_51", "prediction": "Rock is still.", "score": -1}
{"id": "folio_validation_51", "prediction": "Rock IsStill(Rock)", "score": -1}
{"id": "folio_validation_51", "prediction": "Rock, but Still(Rock,3))", "score": -1}
{"id": "folio_validation_51", "prediction": "Rock is Still.", "score": -1}
{"id": "folio_validation_51", "prediction": "all x.(Rock(x) -> Still(x))", "score": 0}
{"id": "folio_validation_51", "prediction": "Stone is Still.", "score": -1}
{"id": "folio_validation_51", "prediction": "Rock is Still(Rock)", "score": -1}
{"id": "folio_validation_51", "prediction": "(Rock(Rock) -> Still(Rock))", "score": 0}
{"id": "folio_validation_52", "prediction": "Rock is a Turtle(Rock)", "score": -1}
{"id": "folio_validation_52", "prediction": "Rock()", "score": -1}
{"id": "folio_validation_52", "prediction": "Rock is Turtle(Rock,Red Hatch)", "score": -1}
{"id": "folio_validation_52", "prediction": "Rock is Turtle(rock)", "score": -1}
{"id": "folio_validation_52", "prediction": "Rock is Turtle(rock,y)", "score": -1}
{"id": "folio_validation_52", "prediction": "Rock is turtle.", "score": -1}
{"id": "folio_validation_52", "prediction": "Rock is a Turtle(rock)", "score": -1}
{"id": "folio_validation_52", "prediction": "all x.(Rock(x) -> Turtle(x))", "score": 0}
{"id": "folio_validation_52", "prediction": "rock is turtle(Rock)", "score": -1}
{"id": "folio_validation_52", "prediction": "(Turtle(Rock) & Teardrop(Rock))", "score": 0}
{"id": "folio_validation_52", "prediction": "rock(rock) -> Turtle(rock))", "score": -1}
{"id": "folio_validation_52", "prediction": "Rock is turtle(rock)", "score": -1}
{"id": "folio_validation_52", "prediction": "(Turtle(Rock))", "score": 0}
{"id": "folio_validation_52", "prediction": "\"Rock\" -> Turtle(x))", "score": -1}
{"id": "folio_validation_53", "prediction": "(-Turtle(Rock))", "score": 0}
{"id": "folio_validation_53", "prediction": "Rock is not turtle(Rock)", "score": -1}
{"id": "folio_validation_53", "prediction": "-Turtle(Rock)", "score": 0}
{"id": "folio_validation_53", "prediction": "Rock is not turtle.", "score": -1}
{"id": "folio_validation_53", "prediction": "(Pentato(Rock) & -Turtle(Rock))", "score": 0}
{"id": "folio_validation_53", "prediction": "Rock is notTurtle(Rock)", "score": -1}
{"id": "folio_validation_53", "prediction": "all x.(Rock(x) -> -Turtle(x))", "score": 0}
{"id": "folio_validation_54", "prediction": "all x.(Rock(x) -> (Turtle(x) | Cute(x)))", "score": 1}
{"id": "folio_validation_54", "prediction": "all x.(Rock(x) -> ((Turtle(x) | Cute(x))))", "score": 1}
{"id": "folio_validation_54", "prediction": "(Turtle(Rock) | CUTE(Rock))", "score": 0}
{"id": "folio_validation_54", "prediction": "(all x.(Rock(x) -> (Turtle(x) | Cute(x))))", "score": 1}
{"id": "folio_validation_55", "prediction": "all x.((Rock(x) & -(Turtle(x) & Squirrel(x))) -> (CUTE(x) | Skittish(x)))", "score": 0}
{"id": "folio_validation_55", "prediction": "all x.((Rock(x) & -(Turtle(x) & Squirrel(x))) -> (Cozy(x) | Skittish(x)))", "score": 0}
{"id": "folio_validation_55", "prediction": "all x.((Rock(x) & -(Turtle(x) & Squirrel(x))) -> (Cute(x) | Skittish(x)))", "score": 1}
{"id": "folio_validation_55", "prediction": "all x.((Rock(x) & -Turtle(x) & Scratch(x)) -> (Cozy(x) | Skittish(x)))", "score": 0}
{"id": "folio_validation_55", "prediction": "all x.((Rock(x) & -Turtle(x) & Squirrel(x)) -> (Cute(x) | Skittish(x)))", "score": 1}
{"id": "folio_validation_55", "prediction": "all x.((Rock(x) & -(Turtle(x) | Squirrel(x))) -> (Cute(x) | Skittish(x)))", "score": 1}
{"id": "folio_validation_55", "prediction": "all x.((Rock(x) & -Turtle(x) & Stove(x)) -> (CUTE(x) | Skittish(x)))", "score": 0}
{"id": "folio_validation_55", "prediction": "all x.((Rock(x) & -Turtle(x) & Squirrel(x)) -> (Cuey(x) | Skittish(x)))", "score": 0}
{"id": "folio_validation_55", "prediction": "all x.((Rock(x) & -(Turtle(x) & Squirrel(x))) -> (Cute(x) | Skittish(x))))", "score": -1}
{"id": "folio_validation_55", "prediction": "all x.((Rock(x) & -(Turtle(x) & Squirrel(x))) -> (Chocolate(x) | Skittish(x)))", "score": 0}
{"id": "folio_validation_55", "prediction": "all x.((Rock(x) & -(Turtle(x) & Squirrel(x))) -> (Cratty(x) | Skittish(x))))", "score": -1}
{"id": "folio_validation_55", "prediction": "all x.((Rock(x) & -Turtle(x) & Squirrel(x)) -> ((Cute(x) | Skittish(x))))", "score": 1}
{"id": "folio_validation_55", "prediction": "all x.((Rock(x) & -(Turtle(x) & Squirrel(x))) -> (Cuttish(x) | Skittish(x)))", "score": 0}
{"id": "folio_validation_56", "prediction": "all x.((Rock(x) & Cute(x) & Still(x)) -> (Turtle(x) & Skittish(x)))", "score": 0}
{"id": "folio_validation_56", "prediction": "all x.((Rock(x) & CuteAndTeacher(x) & Skittish(x)) -> TurtleAndStill(x))", "score": 0}
{"id": "folio_validation_56", "prediction": "all x.((Cricky(x) & Still(x)) -> (Turtle(x) & Skittish(x)))", "score": 0}
{"id": "folio_validation_56", "prediction": "all x.((CuteAndStill(x) & Turtle(x) & Skittish(x)) -> (Rock(x) & Turtle(x)))", "score": 0}
{"id": "folio_validation_56", "prediction": "all x.((Rock(x) & Chic(x) & Still(x)) -> (Turtle(x) & Skittish(x)))", "score": 0}
{"id": "folio_validation_57", "prediction": "\"StrangerThings\" is a popular NetflixShow(x))", "score": -1}
{"id": "folio_validation_57", "prediction": "exists x.(Strictly(x) & Netflix(x))", "score": 0}
{"id": "folio_validation_57", "prediction": "\"StrangerThings\" is popularNinetyNinetyNinety(x) & NetflixSeries(x))", "score": -1}
{"id": "folio_validation_57", "prediction": "\"StrangerThan(x)\" is a popular NetflixShow(x))", "score": -1}
{"id": "folio_validation_57", "prediction": "\"StrangerThings\" is popular NetflixShow(x) & PopularListener(x))", "score": -1}
{"id": "folio_validation_57", "prediction": "\"StrangerThanThings\" is popular NetflixShow(x))", "score": -1}
{"id": "folio_validation_57", "prediction": "all x.(StrangerThan(x) -> PopularFilmShow(x))", "score": 0}
{"id": "folio_validation_57", "prediction": "(PopularTVShow(StrangerThanThings) & NetflixShow(StrangerThanThings))", "score": 0}
{"id": "folio_validation_57", "prediction": "\"StrangerThings\" is a popular NetflixShow(x) & Popular(x))", "score": -1}
{"id": "folio_validation_57", "prediction": "all x.(StrangerThings(x) -> PopularFan(x))", "score": 0}
{"id": "folio_validation_57", "prediction": "(PopularNashvilleNetflixShow(StrangerThings))", "score": 0}
{"id": "folio_validation_57", "prediction": "\"StrangerThings\" is popular NetflixShow.", "score": -1}
{"id": "folio_validation_57", "prediction": "all x.(StrangerThings(x) -> PopularNature(x))", "score": 0}
{"id": "folio_validation_57", "prediction": "\"StrangerThings\" is a popular NetflixShow.", "score": -1}
{"id": "folio_validation_57", "prediction": "(PopularFilm(StrangerThanThings) & NetflixShow(StrangerThanThings))", "score": 0}
{"id": "folio_validation_57", "prediction": "\"StrangerThings\" ist ein beliebtes NetflixShow(x))", "score": -1}
{"id": "folio_validation_58", "prediction": "all x.((CinemaSpectator(x) & Popular(x)) -> BingeWatch(x))", "score": 0}
{"id": "folio_validation_58", "prediction": "all x.((Fan(x) & Popular(x)) -> BingeWatch(k))", "score": 0}
{"id": "folio_validation_58", "prediction": "all x.((Show(x) & Popular(x)) -> BingeWatch(x))", "score": 0}
{"id": "folio_validation_58", "prediction": "all x.((NFC(x) & Popular(x)) -> BingeWatch(x))", "score": 0}
{"id": "folio_validation_58", "prediction": "all x.((NetflixShow(x) & Popular(x)) -> BingeWatch(x))", "score": 0}
{"id": "folio_validation_58", "prediction": "all x.((FilmNetflixShow(x) & Popular(x)) -> BingeWatch(x))", "score": 0}
{"id": "folio_validation_58", "prediction": "all x.((Fan(x) & Popular(x)) -> BingeWatch(x))", "score": 0}
{"id": "folio_validation_58", "prediction": "all x.((Fan(x) & Popular(x)) -> BingeWatched(x))", "score": 0}
{"id": "folio_validation_58", "prediction": "all x.((NinetyFunctionsShow(x) & Popular(x)) -> BingeWatch(x))", "score": 0}
{"id": "folio_validation_58", "prediction": "all x.((Promopolitan(x) & NetflixShow(x)) -> BingeWatchs(x))", "score": 0}
{"id": "folio_validation_58", "prediction": "all x.(Popular(x) -> BingeWatch(x))", "score": 0}
{"id": "folio_validation_58", "prediction": "all x.((FollowsNinety(x) & Popular(x)) -> BingeWatch(x))", "score": 0}
{"id": "folio_validation_58", "prediction": "all x.((FilmBanned(x) & Popular(x)) -> KarenBingeWatches(x))", "score": 0}
{"id": "folio_validation_58", "prediction": "all x.((CinematosphereShow(x) & Popular(x)) -> BingeWatch(x))", "score": 0}
{"id": "folio_validation_58", "prediction": "all x.((BingeWatchLine(x) & PopularNetflixShow(x)) -> KarenRefers(x))", "score": 0}
{"id": "folio_validation_59", "prediction": "all x.((Karen(x) & binge-watchesNinetyneShow(x)) -> Downloads(x))", "score": -1}
{"id": "folio_validation_59", "prediction": "all x.(BeginderWatchByNinety(x,Netflix) -> DownloadShow(x))", "score": 0}
{"id": "folio_validation_59", "prediction": "all x.((BirdgeWatches(x,unlimited) & NetflixShow(x)) -> Downloads(y))", "score": 0}
{"id": "folio_validation_59", "prediction": "all x y.((Karen(x) & Netflix(y) & BingeWatches(x,y)) -> Downloads(x,y))", "score": 0}
{"id": "folio_validation_59", "prediction": "all x.((BingeWatched(x) & Watching(x,Netflix)) -> Downloads(x))", "score": 0}
{"id": "folio_validation_59", "prediction": "all x.((BingeWatchesNFC(x) & -BingeWatchesNFC(x)) -> DownloadsShow(x))", "score": 0}
{"id": "folio_validation_59", "prediction": "all x.((Karen(x) & BingeWatches(x,Ninety9)) -> Downloads(x))", "score": 0}
{"id": "folio_validation_59", "prediction": "all x.((BingeWatches(x,y) & NetflixShow(x)) -> ThisDocument(x,z))", "score": 0}
{"id": "folio_validation_59", "prediction": "all x y.((KarensShow(x) & NetflixShow(y)) -> BingeWatches(x,y))", "score": 0}
{"id": "folio_validation_59", "prediction": "all x.((BingeWatches(Karl) & NetflixShow(Karl)) -> Downloads(Karl))", "score": 0}
{"id": "folio_validation_59", "prediction": "all x.((KarenBingeWatchesBrowse(x) & showsBrowse(x,Broadcast,FilmShow)) -> WillDownload(x,Films))", "score": 0}
{"id": "folio_validation_59", "prediction": "all x.((Karen(x) & BingeSeen(x,n)) -> Downloads(x,n))", "score": 0}
{"id": "folio_validation_59", "prediction": "all x.((BegingeWatches(x,y) & NetflixShow(y)) -> Downloads(x,y))", "score": 0}
{"id": "folio_validation_59", "prediction": "all x.((AndNeverBeginGoogles(x) & NetflixShow(x)) -> Downloads(x))", "score": 0}
{"id": "folio_validation_59", "prediction": "all x.(BingeredWatches(x,netflix) -> Downloads(x))", "score": 0}
{"id": "folio_validation_59", "prediction": "exists x.(BingeWatches(x,Candle,Ninet(x) & NetflixShow(x))", "score": -1}
{"id": "folio_validation_60", "prediction": "Karen -DownloadsBlackMirror(Karen))", "score": -1}
{"id": "folio_validation_60", "prediction": "exists x.(Karen(x) & -DownloadsBlackMirror(x))", "score": 0}
{"id": "folio_validation_60", "prediction": "(-DownloadsBlackMirror(Karen))", "score": 0}
{"id": "folio_validation_60", "prediction": "Karen does not download \"BlackMirror(Karry,Night) & -Download(Karrie,BlackMirror))", "score": -1}
{"id": "folio_validation_60", "prediction": "all x.(Karen(x) -> -DownloadsBlackMilestone(x))", "score": 0}
{"id": "folio_validation_60", "prediction": "Karen (-DownloadsBlackMirror(Karen))", "score": 0}
{"id": "folio_validation_60", "prediction": "(-DownloadBlackMirror(Karen))", "score": 0}
{"id": "folio_validation_60", "prediction": "Karen does not DownloadBlackMirror(Karen)", "score": -1}
{"id": "folio_validation_60", "prediction": "Karen -DownloadsBlackMirror(Karen),-)", "score": -1}
{"id": "folio_validation_60", "prediction": "Karen -DownloadsBlackMirror(Kenny))", "score": -1}
{"id": "folio_validation_60", "prediction": "Karen does notDownloadBlackMirror(Karen)", "score": -1}
{"id": "folio_validation_60", "prediction": "(Sherman(Karen) & -DownloadsBlackMirror(Karen))", "score": 0}
{"id": "folio_validation_61", "prediction": "all x.(BlackMirror(x) -> NetflixShow(x))", "score": 0}
{"id": "folio_validation_61", "prediction": "\"BlackMirror\" & NetflixShow(x))", "score": -1}
{"id": "folio_validation_61", "prediction": "(noshow(BlackMirror) & NetflixShow(BlackMirror))", "score": 0}
{"id": "folio_validation_61", "prediction": "\"BlackMirror\" is a NetflixShow(x) & CreatedBy. Netflix.com.", "score": -1}
{"id": "folio_validation_61", "prediction": "\"BlackMirror\" (BlackEye) & NetflixShow(y))", "score": -1}
{"id": "folio_validation_61", "prediction": "(BlackMirror(BlackLittleMirror) & NetflixShow(BlackMirror))", "score": 0}
{"id": "folio_validation_61", "prediction": "\"BlackMirror\"(x) & NetflixShow(x))", "score": -1}
{"id": "folio_validation_61", "prediction": "\"BlackMirror\" (NFCoxositeShow))", "score": -1}
{"id": "folio_validation_61", "prediction": "\"BlackMirror\" is a NetflixShow.", "score": -1}
{"id": "folio_validation_61", "prediction": "\"BlackMirror\" (NFCShow) & NetflixShow(BrownMirror))", "score": -1}
{"id": "folio_validation_61", "prediction": "(ReviewsBlackMirror(BlackMirror) & Netflix(BlackMirror))", "score": 0}
{"id": "folio_validation_61", "prediction": "(NineteenBitcoinExperience(BlackMirror) & NetflixShow(BlackMirror))", "score": 0}
{"id": "folio_validation_61", "prediction": "\"BlackMirror\" is NetflixShow(x) & Streaming(x))", "score": -1}
{"id": "folio_validation_61", "prediction": "is a NetflixShow(BlackMirror)", "score": -1}
{"id": "folio_validation_61", "prediction": "(Naturoscope(BlackMirror) & Netflix(BlackMirror))", "score": 0}
{"id": "folio_validation_62", "prediction": "all x.(BingeWatchesProduct(x) -> SharesToLisa(x))", "score": 0}
{"id": "folio_validation_62", "prediction": "all x y z.((Karen(x) & Netflix(y) & Lisa(z)) -> BingeWatches(x,y,z))", "score": 0}
{"id": "folio_validation_62", "prediction": "all x y.((Bingewatches(Karen & NetflixShow) & Lisa(Lisa)) -> Shares(Karen,Lisa,Next(Kan))", "score": -1}
{"id": "folio_validation_62", "prediction": "all x.(BingeWatchesNetflix(x) -> SharesWithLisa(x))", "score": 0}
{"id": "folio_validation_62", "prediction": "all x y z.((Karen(x) & NetflixShow(y) & Lisa(z)) -> (BingeWatches(x,y) & Shares(x,y,z)))", "score": 0}
{"id": "folio_validation_62", "prediction": "all x.(BingeWatchesNetflix(x) -> SharesToLisa(x))", "score": 0}
{"id": "folio_validation_62", "prediction": "all x y.((KennyBingeWatches(x,y) & NetflixShow(y)) -> SharesTo(x,y))", "score": 0}
{"id": "folio_validation_62", "prediction": "all x y z.((Karen(x) & NetflixShow(y) & Lisa(z)) -> (BingeWatches(z,y) & Shares(x,y,z)))", "score": 0}
{"id": "folio_validation_62", "prediction": "all x y.((Karen(x) & NetflixShow(y) & BingeWatches(x,y)) -> SharesTo(x,y))", "score": 0}
{"id": "folio_validation_62", "prediction": "all x y z.((BingeWatches(x,y) & NetflixShow(y) & Lisa(z)) -> SharesWith(x,z))", "score": 0}
{"id": "folio_validation_62", "prediction": "all x y.((Karen(x) & Netflix(y)) -> (BingeWatches(x,y) | Shares(x,y)))", "score": 0}
{"id": "folio_validation_62", "prediction": "all x.((Karen(x) & NetflixShow(x)) -> Share(x,Lisa,x))", "score": 0}
{"id": "folio_validation_62", "prediction": "all x.((Karen(x) & NetflixShow(x)) -> Shares(x,x,Lisa))", "score": 0}
{"id": "folio_validation_62", "prediction": "all x y.((ConsiderBeingKarin(x),y) & Netflixshow(y) & BingeSaves(x,y)) -> SharesTo(x,y))", "score": -1}
{"id": "folio_validation_62", "prediction": "all x y z.((Karen(x) & Netflixshow(y) & Lisa(z) & Binges(x,y)) -> Shares(x,z))", "score": 0}
{"id": "folio_validation_62", "prediction": "all x y.((Reader(x) & NetflixShow(y) & Shares(x,y)) -> SharesToLisa(x,y))", "score": 0}
{"id": "folio_validation_63", "prediction": "all x y.((Karin(x) & Lisa(y)) -> SharesStrangerThings(x,y))", "score": 0}
{"id": "folio_validation_63", "prediction": "all x y.((Karen(x) & Lisa(y)) -> SharesStrangerThings(x,y))", "score": 0}
{"id": "folio_validation_63", "prediction": "all x y z.((Karen(x) & Lisa(y) & \"Things(z) & Strong(z)) -> Share(x,y,z))", "score": 0}
{"id": "folio_validation_63", "prediction": "all x y.((Karen(x) & Lisa(y)) -> ShareStrangeThings(x,y))", "score": 0}
{"id": "folio_validation_63", "prediction": "all x y z.((Karen(x) & Lisa(y) & StangerThings(z)) -> Share(x,y,z))", "score": 0}
{"id": "folio_validation_63", "prediction": "Karen will share \"StrangerThings\" to Lisa.", "score": -1}
{"id": "folio_validation_63", "prediction": "all x y.((Karen(x) & Lisa(y)) -> ShareStrangerThings(x,y))", "score": 0}
{"id": "folio_validation_63", "prediction": "all x y z.((Karen(x) & Lisa(y) & StrangeThing(z)) -> Shares(x,z))", "score": 0}
{"id": "folio_validation_63", "prediction": "(ShareStrangerThings(Karen) & ToLisa(Karen))", "score": 0}
{"id": "folio_validation_63", "prediction": "Karen will share StringerThings(Kenata) & Lisa(Lisa))", "score": -1}
{"id": "folio_validation_63", "prediction": "all x.((Karen(x) & Lisa(y)) -> SharesStrangerThings(x,y))", "score": 0}
{"id": "folio_validation_63", "prediction": "(all x.(StrangerThing(x) -> Share(x,Karee,Lisa)))", "score": 0}
{"id": "folio_validation_63", "prediction": "all x y.((Karen(x) & Lisa(y)) -> ProvidesStrangerThings(x,y))", "score": 0}
{"id": "folio_validation_64", "prediction": "\"BlackMirror\" -Popular(x))", "score": -1}
{"id": "folio_validation_64", "prediction": "\"BlackMirror\" (Black))", "score": -1}
{"id": "folio_validation_64", "prediction": "\"BlackMirror\" is popular.", "score": -1}
{"id": "folio_validation_64", "prediction": "(Popular(BlackMirror)", "score": -1}
{"id": "folio_validation_64", "prediction": "\"BlackMister\" is popular.", "score": -1}
{"id": "folio_validation_64", "prediction": "\"BlackMirror\" popular(x) & KnownAtLeastBefore(x))", "score": -1}
{"id": "folio_validation_64", "prediction": "\"BlackMirror\" (BlackMirror))", "score": -1}
{"id": "folio_validation_64", "prediction": "\"BlackMister\" Popular(BlackMirror)", "score": -1}
{"id": "folio_validation_64", "prediction": "\"BlackMirror\" (Popular))", "score": -1}
{"id": "folio_validation_64", "prediction": "is popular.", "score": -1}
{"id": "folio_validation_64", "prediction": "popular.", "score": -1}
{"id": "folio_validation_64", "prediction": "\"BlackMirror\" popular.", "score": -1}
{"id": "folio_validation_64", "prediction": "\"BlackMirror\" -> Popular(x))", "score": -1}
{"id": "folio_validation_64", "prediction": "\"BlackMirror\"", "score": 0}
{"id": "folio_validation_64", "prediction": "\"BlackMirror\" Popular(x)", "score": -1}
{"id": "folio_validation_64", "prediction": "(Popular(BlackMirror(BlackMirror))", "score": -1}
{"id": "folio_validation_65", "prediction": "Karen will share \"BlackMirror\" to Lisa.", "score": -1}
{"id": "folio_validation_65", "prediction": "(ShareBlackMirror(Karen,Lisa) | ShareBlackMirror(Karen,Lisa)))", "score": -1}
{"id": "folio_validation_65", "prediction": "(ShareBlackMirror(Karen,Lawy))", "score": 0}
{"id": "folio_validation_65", "prediction": "(Lisa(Karen) & Lisa(Karen))", "score": 0}
{"id": "folio_validation_65", "prediction": "(ShareBlackMirror(Karen) | ShareBlackMirror(Karen)))", "score": -1}
{"id": "folio_validation_65", "prediction": "\"BlackMirror\" is about to be shared by Karen and Lisa.", "score": -1}
{"id": "folio_validation_65", "prediction": "Karen shares BlackMirror(Karen)", "score": -1}
{"id": "folio_validation_65", "prediction": "All x y.((Karen(x) & Lisa(x) & BlackMirror(y)) -> ShareLay(x,y))", "score": -1}
{"id": "folio_validation_65", "prediction": "(ShareBlackMirror(Karen) & ShareBlackMirror(Karen))", "score": 0}
{"id": "folio_validation_65", "prediction": "all x y.((Karen(x) & Lisa(y)) -> SharesBlackMirror(x,y))", "score": 0}
{"id": "folio_validation_65", "prediction": "Karen will share BlackMirror(Kansas,Lisa)", "score": -1}
{"id": "folio_validation_65", "prediction": "all x y z.((Karen(x) & Lisa(y) & BlackMirror(z)) -> Share(x,y,z))", "score": 0}
{"id": "folio_validation_65", "prediction": "All x.(ProperThanBlackMirror(x) -> PartOf(x,Karen,Layla))", "score": -1}
{"id": "folio_validation_65", "prediction": "(ShareBlackMirror(Karina,Lisa))", "score": 0}
{"id": "folio_validation_66", "prediction": "CapitalOfPeoplesRepublicOfChina(Beijing)", "score": 0}
{"id": "folio_validation_66", "prediction": "Located in the Peking Capital of PeoplesRepublicOfChina (PRC) & LocatedInItalianDowntown(i) & LocatedInBeijing,Chongqing)", "score": -1}
{"id": "folio_validation_66", "prediction": "All x.exists y.(PopularRegion(x) & Capital(y) & PeoplesRepublic(y) & LocatedIn(x,y))", "score": -1}
{"id": "folio_validation_66", "prediction": "All x.(PyoreanRepublic(x) -> Capital(x))", "score": -1}
{"id": "folio_validation_66", "prediction": "CapitalOfPersonsRepublicOfChina(president,c) & LocatedInMetropolis(peking,c) & LocatedInRondee(peking,c))", "score": -1}
{"id": "folio_validation_66", "prediction": "all x.((Beijing(x) & PeopleRepublic(x)) -> Capital(x))", "score": 0}
{"id": "folio_validation_66", "prediction": "China (PRC) (Capital(Beijing) & PeoplesRepublicOfChina(Beijing)))", "score": -1}
{"id": "folio_validation_66", "prediction": "all x.(Habitat(x,PeopleRepublic(x) -> Beijing(x))", "score": -1}
{"id": "folio_validation_66", "prediction": "(Capital(Beijing) | China((Beijing))))", "score": -1}
{"id": "folio_validation_66", "prediction": "(Capital(Beijing,PRC)).", "score": -1}
{"id": "folio_validation_66", "prediction": "Capital(peking,PersonRepublicOfChina)", "score": 0}
{"id": "folio_validation_66", "prediction": "all x.(Citizen(x,PeoplesRunaway(x) & CapitalOf(x,PeaceRepublic)) -> Beijing.", "score": -1}
{"id": "folio_validation_66", "prediction": "(capital(beijing) & CapitalOfPeoplesRepublicOfChina(beijing))", "score": 0}
{"id": "folio_validation_66", "prediction": "Beijing is capital of PeoplesRepublicOfChina.", "score": -1}
{"id": "folio_validation_66", "prediction": "(Capital(PeacefulRepublicOfCheese) & LocatedIn(Beijing,PeoplesRepublicOfChina))", "score": 0}
{"id": "folio_validation_66", "prediction": "(Capital(Beijing) & PeoplesRepublic(Beijing))", "score": 0}
{"id": "folio_validation_67", "prediction": "(Popular(Beijing) & FamousForNationalCapitalCity(Beijing))", "score": 0}
{"id": "folio_validation_67", "prediction": "all x.((Beijing(x) & PopulousNationalCapitalCity(x)) -> MostPopular(x))", "score": 0}
{"id": "folio_validation_67", "prediction": "the world's most populous(Peking,NewYork)", "score": -1}
{"id": "folio_validation_67", "prediction": "All x.(Beijing(x) -> PopularCapitalCity(x))", "score": -1}
{"id": "folio_validation_67", "prediction": "all x.(Peking(x) -> PopulousNationalCapital(x))", "score": 0}
{"id": "folio_validation_67", "prediction": "(PopularCapital(Beijing) & MorePopular(Beijing & NationalCapital(Beijing))", "score": -1}
{"id": "folio_validation_67", "prediction": "all x y.((Peking(x) & City(y)) -> PopulousNationalCapital(x,y))", "score": 0}
{"id": "folio_validation_67", "prediction": "all x.((Beijing(x) & WorldPopulousCapitalCity(x)) -> Populous(x))", "score": 0}
{"id": "folio_validation_67", "prediction": "all x.(Beijing(x) -> PopulousNationalCapitalCity(x))", "score": 0}
{"id": "folio_validation_67", "prediction": "all x.(Beijing(x) -> NationalCapitalCity(x))", "score": 0}
{"id": "folio_validation_67", "prediction": "all x.((Beijing(x) & WorldMostPopularCapital(x)) -> NationalCapital(x))", "score": 0}
{"id": "folio_validation_67", "prediction": "all x.(Beijing(x) -> WorldSamplingCapital(x))", "score": 0}
{"id": "folio_validation_67", "prediction": "(Popular(Beijing) & NationalCapital(Beijing))", "score": 0}
{"id": "folio_validation_67", "prediction": "all x.((Beijing(x) & NationalCapitalCity(x)) -> Populous(x))", "score": 0}
{"id": "folio_validation_67", "prediction": "the worlds mostpopulousNationalCapitalCity(Beijing)", "score": -1}
{"id": "folio_validation_68", "prediction": "all x.(Beijing(x) -> NorthChina(x))", "score": 0}
{"id": "folio_validation_68", "prediction": "all x.(Beijing(x) -> (Central(x) & Northern(x)))", "score": 0}
{"id": "folio_validation_68", "prediction": "all x.(Beijing(x) -> NorthernChina(x))", "score": 0}
{"id": "folio_validation_68", "prediction": "all x.(Beijing(x) -> NorthernChinese(x))", "score": 0}
{"id": "folio_validation_68", "prediction": "all x y.((Beijing(x) & NorthernChinese(y)) -> LocatedIn(x,y))", "score": 0}
{"id": "folio_validation_68", "prediction": "(NorthernChinese(Beijing,China))", "score": 0}
{"id": "folio_validation_68", "prediction": "NorthernChina(Beijing)", "score": 0}
{"id": "folio_validation_68", "prediction": "is located in NorthernChina.", "score": -1}
{"id": "folio_validation_68", "prediction": "Beijing,NorthernChina(Peking)", "score": -1}
{"id": "folio_validation_68", "prediction": "LocatedInNorthChina(Beijing)", "score": 0}
{"id": "folio_validation_69", "prediction": "(all x.(Beijing(x) -> HostsOpens(x,2008)) & (ProvidesSummerOlympics(x,2008) & HostsSummerParalympics(x,2008)))", "score": 0}
{"id": "folio_validation_69", "prediction": "(Host(Beijing:2008SummerOlympics(Peking) & Hosts(Beijing:2008SummerParalympicsGames(Peking))", "score": -1}
{"id": "folio_validation_69", "prediction": "(Hosts2008SummerOlympics(Peking) & Hosts2008SummerParalympics(Peking))", "score": 0}
{"id": "folio_validation_69", "prediction": "(SummerOlympics(Beijing) & SummerParalympicsGames(Beijing))", "score": 0}
{"id": "folio_validation_69", "prediction": "all x.(Beijing(x) -> (HostsSochi's(x,2008) & HostsSummerOlympics(x,2008) & HostsSummerParalympics(x,2008)))", "score": 0}
{"id": "folio_validation_69", "prediction": "all x.((Beijing(x) & SummerOlympics(x) & SummerParalympics(x)) -> HostedBy(x,y))", "score": 0}
{"id": "folio_validation_69", "prediction": "all x.((Beijing(x) & SummerOlympics(x) & SummerParallaxyGames(x)) -> Hosting(x,2008))", "score": 0}
{"id": "folio_validation_69", "prediction": "all x.(Beijing(x) -> (HostsBeijingSochiOlympics(x,2008) & HostsBeijingParalympics(x,2008)))", "score": 0}
{"id": "folio_validation_69", "prediction": "2008 SummerOlympics(Penix) & SummerParalympics(Penix))", "score": -1}
{"id": "folio_validation_69", "prediction": "(HasSummerOlympics(Peking,08) | HasSummerParalympicsGames(Peking,08)))", "score": -1}
{"id": "folio_validation_69", "prediction": "(HottedOlympics(Beijing, 2008) & HostsParalympics(Beijing,2008))", "score": 0}
{"id": "folio_validation_69", "prediction": "(Host-2008(Beijing) & Host(Beijing)) & Host(Beijing(Beijing) & Host(Beijing) & Host(Beijing) & Host(Beijing) & Host(Beijing) & Host(Beijing,Events) & Host(Beijing) & Host(Beijing,Events)))", "score": -1}
{"id": "folio_validation_69", "prediction": "Beijing HostsSummerOlympicsAndParalympicsGames(2008)", "score": -1}
{"id": "folio_validation_69", "prediction": "[Peking Hosts(Peking) & (AugustOlympics(Peking) | Paralympics(Peking))))", "score": -1}
{"id": "folio_validation_69", "prediction": "(SummerOlympics(Beijing) | SummerParalympics(Beijing)))", "score": -1}
{"id": "folio_validation_69", "prediction": "(See also 2008SummerOlympics(Beijing) & See 2008SummerParalympics(Beijing))", "score": -1}
{"id": "folio_validation_70", "prediction": "(both SummerOlympics(peijang) & WinterOlympics(peijang) & (SummerParalympics(peijang) | WinterParalympics(peijang))))", "score": -1}
{"id": "folio_validation_70", "prediction": "all x y z w.((Beijing(x) & SummerOrWinterOlympics(y) & WinterParalympics(z) & SummerParalympics(w)) -> Hosts(x,y,z))", "score": 0}
{"id": "folio_validation_70", "prediction": "all x y.((Beijing(x) & SummerGames(y) & WinterGames(z)) -> (Hosts(x,y) & Hosts(x,z))) & Hosts(x,season,y) & Hosts(x,winter),y) & Hosts(x,winter,winter)))", "score": -1}
{"id": "folio_validation_70", "prediction": "(Hosted(Beijing,Summer,Winter) & Hosted(Beijing,Summer) & Hosted(Beijing,Winter))", "score": 0}
{"id": "folio_validation_70", "prediction": "(HostedSummerOlympics(Beijing) & HostsWinterOlympics(Beijing) & ProvidesParalympics(Beijing))", "score": 0}
{"id": "folio_validation_70", "prediction": "all x y.((Beijing(x) & SummerOlympics(y) & WinterOlympics(y)) -> hosted(x,y))", "score": 0}
{"id": "folio_validation_70", "prediction": "all x y z.((Beijing(x) & SummerOlympics(y) & WinterOlympics(z)) -> (Hosts(x,y) & Hosts(x,z) & Hosts(x,w)))", "score": 0}
{"id": "folio_validation_70", "prediction": "(HostedSummerAndWinterOlympics(Beijing) & HousedSummerAndWinterOlympics(Beijing) & HostedSummerAndWinterParalympics(Beijing))", "score": 0}
{"id": "folio_validation_70", "prediction": "all x.(Peking(x) -> (Hosts(x,Summer) & Hosts(x,Winter)) & Hosts(x,Summer) & Hosts(x,Winter))", "score": 0}
{"id": "folio_validation_70", "prediction": "(HostsSummerAndWinthOlympics(Penguin) & hostsSummerAndWinthOlympics(Penguin) & HostsSummerAndWinthParalympics(Penguin) & HostsWinterParalympics(Penguin))", "score": 0}
{"id": "folio_validation_70", "prediction": "(HostsSummerAndWinterOlympics(Beijing) & HeldSummerAndWinterOlympics(Beijing) & HostsSummerAndWinterParallels(Beijing))", "score": 0}
{"id": "folio_validation_70", "prediction": "all x y.((Beijing(x) & SummerOlympics(y) & WinterOlympics(z)) -> Hosts(x,y,z))", "score": 0}
{"id": "folio_validation_70", "prediction": "all x y z.((Beijing(x) & SummerOlympics(y) & WinterOlympics(z)) -> (Hosts(x,y) & Hosts(x,z)))", "score": 0}
{"id": "folio_validation_70", "prediction": "(HostsSummerAndWinterOlympics(Beijing) & (HostsSummerParalympics(Beijing) | HostsWinterParalympics(Beijing)))", "score": 0}
{"id": "folio_validation_70", "prediction": "(HostsSummerOlympics(Penetian,Summer,Winter) & HostsSummerOlympics(Penetian,Summer) & HostsWeatherOlympics(Penetian,Winter)) & hostsSummerParalympics(Penetian,Summer) & HostsWeatherParalympics(Penetian,Werno).", "score": -1}
{"id": "folio_validation_70", "prediction": "(Beijing(Beijing) & (SummerOlympics(Beijing) | WinterOlympics(Beijing))) -> Hosts(Beijing(Beijing))", "score": 0}
{"id": "folio_validation_71", "prediction": "all x.((University(x) & Beijing(x)) -> (BestMostInAsiaPacific(x) & BestMostInWorld(x)))", "score": 0}
{"id": "folio_validation_71", "prediction": "all x.((University(x) & NumberOfPekingWithPhilips(x,91)) -> (BestAsiaPacific(x) & BestWorldwide(x)))", "score": 0}
{"id": "folio_validation_71", "prediction": "all x.((University(x) & InAsiaPacific(x) & InWorld(x)) -> BestInAsiaPacificAndWorld(x))", "score": 0}
{"id": "folio_validation_71", "prediction": "all x.((University(x) & InAsiaPacific(x) & InWorld(x)) -> RanksAhead(x,y))", "score": 0}
{"id": "folio_validation_71", "prediction": "all x.((University(x) & Beijing(x) & AsiaPacific(x) & World(x)) -> RankingBest(x,y))", "score": 0}
{"id": "folio_validation_71", "prediction": "in Asia-Pacific and WorldLikelyUniversities(Beijing,91)", "score": -1}
{"id": "folio_validation_71", "prediction": "all x.((University(x) & Beijing(x) & 100PercentInAsiaPacific(x)) -> RankAmongBestInWorld(x))", "score": 0}
{"id": "folio_validation_71", "prediction": "the best inAsiaPacificAndWorld(Phenomenon)", "score": -1}
{"id": "folio_validation_71", "prediction": "all x.((University(x) & Beijing(x) & AsiaPacific(x) & World(x)) -> Best(x))", "score": 0}
{"id": "folio_validation_71", "prediction": "all x.((BeijingUniversity(x) & BeijingUniversity(x)) -> (BestAsiaPacific(x) & BestWorldwide(x)))", "score": 0}
{"id": "folio_validation_71", "prediction": "all x y z w.((BeijingUniversity(x) & AsiaPacional(y) & World(z)) -> (BoysAmongBestInAsiaPacific(x,y) & BestInWorld(x,z)))", "score": 0}
{"id": "folio_validation_71", "prediction": "all x.((University(x) & Beijing(x) & ConsistentlyRankBestInAsiaPacificAndWorld(x)) -> 99.(University(x) & BestInasiaPacificAndWorld(x)))", "score": -1}
{"id": "folio_validation_71", "prediction": "all x.((BeijingUniversity(x) & ChineseUniversity(x,91)) -> (BestInAsiaPacificAndWorld(x)))", "score": 0}
{"id": "folio_validation_71", "prediction": "all x y z.((BeijingUniversity(x) & AsiaPacific(y) & World(z)) -> AsbestOrBetter(x,y,z))", "score": 0}
{"id": "folio_validation_71", "prediction": "all x.((University(x) & BestInAsiaPacific(x) & BestInWorld(x)) -> Beijing(x))", "score": 0}
{"id": "folio_validation_71", "prediction": "all x y.((University(x) & University(y) & ConsistentlyBestInAsiaPacificAndWorld(x,y)) -> University(x,y))", "score": 0}
{"id": "folio_validation_72", "prediction": "(2005-08-28) & SummerOlympics(x) & WinterOlympics(x))", "score": -1}
{"id": "folio_validation_72", "prediction": "all x y z.((Beijing(x) & SummerOlympics(y) & WinterOlympics(z)) -> (HostThe82008Olympics(x,y) & HostsWinterOlympics(x,z)))", "score": 0}
{"id": "folio_validation_72", "prediction": "(Olympics(Beijing) & Summer(2008) & Winter(2008))", "score": 0}
{"id": "folio_validation_72", "prediction": "all x.(Beijing(x) -> (HostsSummerOlympics(x,2008) & HostsWinterOlympics(x)))", "score": 0}
{"id": "folio_validation_72", "prediction": "all x.(Beijing(x) -> (HostsElements(x,Events) & SummerOlympics(x,2008) & WinterOlympics(x,2009)))", "score": 0}
{"id": "folio_validation_72", "prediction": "all x y.((Beijing(x) & SummerOlympic(y)) -> (Hosts(x,y) & Hosts(x,y)))", "score": 0}
{"id": "folio_validation_72", "prediction": "all x.(Beijing (x) -> (HostsSummerOlympics(x) & HostsWinterOlympics(x)))", "score": 0}
{"id": "folio_validation_72", "prediction": "all x.((Beijing(x) & SummerOlympics(x,2008) & WinterOlympics(x)) -> Hosted(x,2008))", "score": 0}
{"id": "folio_validation_72", "prediction": "all x.(Peking(x) -> (Hosts(x,2008) & Hosts(x,2010)))", "score": 0}
{"id": "folio_validation_72", "prediction": "all x.((Beijing(x) & 2008SummerOlympics(x) & WinterOlympics(x)) -> Solves(x,y))", "score": 0}
{"id": "folio_validation_72", "prediction": "all x.(Beijing(x) -> (HottedSummerOlympics(x,2008) & HostsWinterOlympics(x,2008)))", "score": 0}
{"id": "folio_validation_72", "prediction": "(HostedSummerOlympics(Peking,2008) & HostsWinterOlympics(Peking,2008))", "score": 0}
{"id": "folio_validation_72", "prediction": "all x.(Beijing(x) -> (HostsEvents(x,y) & Events(y) & (2008SummerOlympics(y) | WinterOlympics(y))))", "score": 0}
{"id": "folio_validation_72", "prediction": "all x.(Beijing(x) -> (HostsSummerOlympics(x) & HasWinterOlympics(x)))", "score": 0}
{"id": "folio_validation_72", "prediction": "all x y.((Beijing(x) & SummerOlympics(y) & WinterOlympics(y)) -> Hosts(x,y))", "score": 0}
{"id": "folio_validation_72", "prediction": "both in Beijing (2008 SummerOlympics(Beijing) & WinterOlympics(Beijing))", "score": -1}
{"id": "folio_validation_73", "prediction": "all x.(Beijing(x) -> LocationInSouthernChina(x))", "score": 0}
{"id": "folio_validation_73", "prediction": "all x.(Beijing(x) -> LocatedInSouthernChina(x))", "score": 0}
{"id": "folio_validation_73", "prediction": "all x.(Beijing(x) -> LocatedInSouthChina(x))", "score": 0}
{"id": "folio_validation_73", "prediction": "exists x.(Beijing(x) & LocatedIn(x,southChina))", "score": 0}
{"id": "folio_validation_73", "prediction": "all x y.((Beijing(x) & SouthernChina(y)) -> LocatedIn(x,y))", "score": 0}
{"id": "folio_validation_73", "prediction": "(LocatedInSouthChina(Beijing) & LocatedInSouth China(Beijing))", "score": -1}
{"id": "folio_validation_73", "prediction": "all x.(Beijing(x) -> SouthernChina(x))", "score": 0}
{"id": "folio_validation_73", "prediction": "all x.((Beijing(x) & SouthernChinese(x)) -> LocatedIn(x,y))", "score": 0}
{"id": "folio_validation_73", "prediction": "all x.(Peking(x) -> LocatedInSouthChina(x))", "score": 0}
{"id": "folio_validation_73", "prediction": "(LocatedInSouthChinese(Beijing))", "score": 0}
{"id": "folio_validation_73", "prediction": "located in southernChina.", "score": -1}
{"id": "folio_validation_73", "prediction": "all x.(Beijing(x) -> SouthernChine(x))", "score": 0}
{"id": "folio_validation_73", "prediction": "all x.(Beijing(x) -> Location(x,SouthChina))", "score": 0}
{"id": "folio_validation_74", "prediction": "Located in Qingdao, Beijing is the second largest Chinese CityByUrbanPopulation(x))", "score": -1}
{"id": "folio_validation_74", "prediction": "all x y.((Beijing(x) & UrbanPopulation(y)) -> SecondGreatest(x,y))", "score": 0}
{"id": "folio_validation_74", "prediction": "the smallest (second largest) ChineseCity(s) & LocatedIn(Penguin,UrbanPopulation)", "score": -1}
{"id": "folio_validation_74", "prediction": "all x.((City(x) & City(x) & UrbanPopulation(x)) -> SecondLargest(x))", "score": 0}
{"id": "folio_validation_74", "prediction": "is a swanky city by urbanPopulation(s)", "score": -1}
{"id": "folio_validation_74", "prediction": "Located in the Western hemisphere, Beijing is also known as the SecondBiggestCityByUrbanPopulation(City,City,HumanPopulation))", "score": -1}
{"id": "folio_validation_74", "prediction": "(Is2LargestChineseCity(Beijing) -> LocatedInState(Beijing))", "score": 0}
{"id": "folio_validation_74", "prediction": "all x.((Beijing(x) & ChineseCity(x) & Metropolis(x)) -> SecondLargestByUrbanPopulation(x))", "score": 0}
{"id": "folio_validation_74", "prediction": "(SecondLargestChineseCity(Beijing) & UrbanPopulation(Peking))", "score": 0}
{"id": "folio_validation_74", "prediction": "Located in Beijing, China, the city has the second-largestUrbanPopulation(x,y)", "score": -1}
{"id": "folio_validation_74", "prediction": "(Division(Beijing) & UrbanPopulation(Beijing))", "score": 0}
{"id": "folio_validation_74", "prediction": "all x.((Beijing(x) & UrbanPopulation(x)) -> SecondLargestCity(x))", "score": 0}
{"id": "folio_validation_74", "prediction": "(DIY.(Beijing) & Cities(x,y)) & ((Beijing(y) | City(y)) & UrbanPopulation(y)) -> SecondLargest(y)))", "score": -1}
{"id": "folio_validation_74", "prediction": "(UrbanPopulation(Peking) & UrbanPopulation(Peking))", "score": 0}
{"id": "folio_validation_74", "prediction": "(SecondLargestCity(x,City) & UrbanPopulationDown(x))", "score": 0}
{"id": "folio_validation_75", "prediction": "all x.(Alien(x) -> Extraterrestrial(x))", "score": 0}
{"id": "folio_validation_75", "prediction": "all x.(Extraterrestrial(x) -> Alien(x))", "score": 0}
{"id": "folio_validation_76", "prediction": "all x.(Alien(x) -> (BetweenMars(x) & FromMars(x)))", "score": 0}
{"id": "folio_validation_76", "prediction": "all x.((Demars(x) & Alien(x)) -> Alien(x))", "score": 0}
{"id": "folio_validation_76", "prediction": "all x.(Mars(x) -> Alien(x))", "score": 0}
{"id": "folio_validation_76", "prediction": "all x.((MriMars(x) & Alien(x)) -> Alien(x))", "score": 0}
{"id": "folio_validation_76", "prediction": "all x.((MarsAlient(x)) -> AlienSolvent(x))", "score": 0}
{"id": "folio_validation_76", "prediction": "all x.((MornTester(x) & MarsTester(x)) -> Alien(x))", "score": 0}
{"id": "folio_validation_76", "prediction": "all x.((Mars(x) & Alien(x)) -> From(x,Mars))", "score": 0}
{"id": "folio_validation_76", "prediction": "all x.((Alien(x) & BornFromMars(x)) -> Aliens(x))", "score": 0}
{"id": "folio_validation_76", "prediction": "all x.((StaysFromMars(x)) -> Alien(x))", "score": 0}
{"id": "folio_validation_76", "prediction": "all x.((OfMars(x) & Alien(x)) -> Alien(x))", "score": 0}
{"id": "folio_validation_76", "prediction": "all x.((Paris(x) & Mars(x)) -> Alien(x))", "score": 0}
{"id": "folio_validation_76", "prediction": "all x.((Exalien(x) & FromMars(x)) -> Alien(x))", "score": 0}
{"id": "folio_validation_76", "prediction": "all x.((Alien(x) & FromMars(x)) -> Alien(x))", "score": 0}
{"id": "folio_validation_76", "prediction": "all x.(((Paris(x) & FromMars(x)) -> Alien(x))", "score": -1}
{"id": "folio_validation_76", "prediction": "all x.(DisruptedByMars(x) -> Alien(x))", "score": 0}
{"id": "folio_validation_77", "prediction": "-HasExtraterrestrial(x)", "score": 5}
{"id": "folio_validation_77", "prediction": "all x.(Extraterrestrial(x) -> Human(x))", "score": 0}
{"id": "folio_validation_77", "prediction": "-exists x.(extraterrestrial(x) & Human(x))", "score": 5}
{"id": "folio_validation_77", "prediction": "-exists x.(Extraterrestrial(x) & Human(x))", "score": 0}
{"id": "folio_validation_77", "prediction": "all x.(Extraterrestrial(x) -> -Human(x))", "score": 0}
{"id": "folio_validation_77", "prediction": "all x.(Exterrestrial(x) -> Human(x))", "score": 0}
{"id": "folio_validation_77", "prediction": "deexists x.(Exterrestrial(x) & Human(x))", "score": -1}
{"id": "folio_validation_78", "prediction": "all x.((Earth(x) & Human(x)) -> FromEarth(x))", "score": 0}
{"id": "folio_validation_78", "prediction": "all x.(Earth(x) -> Human(x))", "score": 0}
{"id": "folio_validation_78", "prediction": "all x.((Earth(x) & Human(x)) -> Human(x))", "score": 0}
{"id": "folio_validation_78", "prediction": "all x.((Earth(x) & Human(x)) -> LivesIn(x))", "score": 0}
{"id": "folio_validation_78", "prediction": "all x.(Human(x) -> FromEarth(x))", "score": 0}
{"id": "folio_validation_78", "prediction": "all x.(Hunt(x) -> Human(x))", "score": 0}
{"id": "folio_validation_78", "prediction": "all x.(Human(x) -> Earth(x))", "score": 0}
{"id": "folio_validation_78", "prediction": "all x.((Earth(x) & Human(x)) -> AllOf(x,Earth))", "score": 0}
{"id": "folio_validation_78", "prediction": "all x.(MenuFromEarth(x) -> Human(x))", "score": 0}
{"id": "folio_validation_79", "prediction": "all x.(Marvin(x) -> (-fromEarth(x) & -FromMars(x)))", "score": 0}
{"id": "folio_validation_79", "prediction": "(-(Marvin(Marst) & From(Marst0)) -> -From(Marst0)))", "score": -1}
{"id": "folio_validation_79", "prediction": "-(Marvin(Marvin) & Earth(Marvin))", "score": 0}
{"id": "folio_validation_79", "prediction": "-(Marvin(Mars) & Earth(Mars))", "score": 0}
{"id": "folio_validation_79", "prediction": "NoStatus(Marvin,Earth,Mars)", "score": 0}
{"id": "folio_validation_79", "prediction": "all x.(Marvin(x) -> (-(FromEarth(x) & FromMars(x))))", "score": 0}
{"id": "folio_validation_79", "prediction": "\"Marvin\" -> (necessaryFromEarth(Mars) & -ExperienceFrom(Mars)))", "score": -1}
{"id": "folio_validation_79", "prediction": "all x.(Marvin(x) -> (-FromEarth(x) & -FromMars(x)))", "score": 0}
{"id": "folio_validation_79", "prediction": "(exists x.(Marvin(x) & Earth(x)) & -exists y.(Mars(x) & Mars(y)))", "score": 0}
{"id": "folio_validation_79", "prediction": "-(Marvin(Marvelon) & Earth(Marvelon))", "score": 0}
{"id": "folio_validation_79", "prediction": "all x.(Marvin(x) -> -(FromEarth(x) & FromMars(x)))", "score": 0}
{"id": "folio_validation_79", "prediction": "[Marvin(Marvin) & -FromEarth(Marvin)]", "score": -1}
{"id": "folio_validation_79", "prediction": "(-(MarvinFromEarth(Mars) & -FromEarth(Mars)))", "score": 0}
{"id": "folio_validation_79", "prediction": "all x y.((Marvin(x) & Earth(y)) -> -((Mars(x,y)) | Mars(x))))", "score": -1}
{"id": "folio_validation_80", "prediction": "All x.((Marvin(x) & -LayoutForEarth(x)) -> Extraterrestrial(x))", "score": -1}
{"id": "folio_validation_80", "prediction": "all x.((Marvin(x) & -Earth(x)) -> Extraterrestrial(x))", "score": 5}
{"id": "folio_validation_80", "prediction": "all x.((Marvin(x) & -FromEarth(x)) -> Extraterrestrial(x))", "score": 0}
{"id": "folio_validation_80", "prediction": "(-MarvinViaEarth(Marvin) & Extraterrestrial(Marvin))", "score": 0}
{"id": "folio_validation_80", "prediction": "all x.(NoFromEarth(x) -> Extraterrestrial(x))", "score": 0}
{"id": "folio_validation_81", "prediction": "Marvin is alien(marvin,x)", "score": -1}
{"id": "folio_validation_81", "prediction": "IsMarvin(marvin)", "score": 0}
{"id": "folio_validation_81", "prediction": "Marvin is alien(Marvin,Savage)", "score": -1}
{"id": "folio_validation_81", "prediction": "Marvin ist Alien(Marvin)", "score": -1}
{"id": "folio_validation_81", "prediction": "Marvin is alien(Marvin)", "score": -1}
{"id": "folio_validation_81", "prediction": "Marvin is alien.", "score": -1}
{"id": "folio_validation_81", "prediction": "Marvin is alien(marv).", "score": -1}
{"id": "folio_validation_81", "prediction": "Marvin is Alien(Marvin)", "score": -1}
{"id": "folio_validation_81", "prediction": "Marvin ist Exotique.", "score": -1}
{"id": "folio_validation_81", "prediction": "ALL x.(Marvin(x) -> Alien(x))", "score": -1}
{"id": "folio_validation_81", "prediction": "Marvin is an alien.", "score": -1}
{"id": "folio_validation_81", "prediction": "-Individual(Marvin)", "score": 0}
{"id": "folio_validation_81", "prediction": "Marvin (alien)", "score": 0}
{"id": "folio_validation_81", "prediction": "-Alien(Marvin)", "score": 0}
{"id": "folio_validation_81", "prediction": "Altered(Marvin)", "score": 0}
{"id": "folio_validation_81", "prediction": "Marvin(Marvin) -> Alien(Marvin))", "score": -1}
{"id": "folio_validation_82", "prediction": "Marvin is -Human(marvin) & -Mars(marvin))", "score": -1}
{"id": "folio_validation_82", "prediction": "Dr. Marvin (Mars,m) -> (-Human(f) & -Mars(f)))", "score": -1}
{"id": "folio_validation_82", "prediction": "Marvin & -(Human(marvin) & -Mars(marvin))", "score": 0}
{"id": "folio_validation_82", "prediction": "Marvin is neither Human(Mars) & -From(Mars))", "score": -1}
{"id": "folio_validation_82", "prediction": "Marvin ne is niHuman(Mara) ni OriginsOfMars(Maria3)).", "score": -1}
{"id": "folio_validation_82", "prediction": "all x.(Marvin(x) -> (-Human(x) & -Mars(x)))", "score": 1}
{"id": "folio_validation_82", "prediction": "Marvin & -Human(Mars) & -Mars(Mars))", "score": -1}
{"id": "folio_validation_82", "prediction": "Marvin is -Human(Mars) & -FromMars(Mars))", "score": -1}
{"id": "folio_validation_82", "prediction": "all x.(Marvin(x) -> (NoHuman(x) & -FromMars(x)))", "score": 0}
{"id": "folio_validation_82", "prediction": "-(Human(Marvin) | Mars(Marin))", "score": 1}
{"id": "folio_validation_82", "prediction": "(Human(Marvin) & -Mars(Marvin))", "score": 1}
{"id": "folio_validation_82", "prediction": "Marvin is neither a Human(mars) & -FromMars(mars))", "score": -1}
{"id": "folio_validation_82", "prediction": "(-Human(Marvin) & -Mars(Marvin))", "score": 1}
{"id": "folio_validation_82", "prediction": "(-Human(Marvin) & -Mars(Marvin,Mars))", "score": 0}
{"id": "folio_validation_82", "prediction": "(marvin,u) & -Human('Mars(s))", "score": -1}
{"id": "folio_validation_82", "prediction": "-(Human(Marvin) | FromMars(Mars))", "score": 1}
{"id": "folio_validation_83", "prediction": "all x.((Marvin(x) & -Mars(x)) -> Human(x))", "score": 0}
{"id": "folio_validation_83", "prediction": "all x.((LikeMarvin(x) & MarvinNuclearToMars(x)) -> Human(x))", "score": 0}
{"id": "folio_validation_83", "prediction": "all x.((Marvin(x) | -Mars(x)) -> Human(x))", "score": 0}
{"id": "folio_validation_83", "prediction": "all x.((Marvin(x) & -FromMars(x)) -> Human(x))", "score": 0}
{"id": "folio_validation_83", "prediction": "all x.((Marvin(x) & -MarsFrom(x)) -> Human(x))", "score": 0}
{"id": "folio_validation_83", "prediction": "all x.(NoMars(x) -> Human(x))", "score": 0}
{"id": "folio_validation_83", "prediction": "all x y.((Marvin(x) & Mars(y)) -> Human(x,y))", "score": 0}
{"id": "folio_validation_84", "prediction": "all x.(Person(x) -> (Grand SlamChampion(x) | OscarnominatedActor(x)))", "score": -1}
{"id": "folio_validation_84", "prediction": "all x.(Person(x) -> (GrandSlamchampion(x) | OscarnominatedActor(x)))", "score": 0}
{"id": "folio_validation_84", "prediction": "all x.(Person(x) -> (GrandSlamChampion(x) | OscarNominatedActor(x)))", "score": 0}
{"id": "folio_validation_84", "prediction": "all x.(Person(x) -> (Person(x) & GrandSlamCommittee(x) | OscarnominatedActor(x)))", "score": 0}
{"id": "folio_validation_84", "prediction": "all x.(Person(x) -> (GrandSlam(x) | OscarnominatedActor(x)))", "score": 0}
{"id": "folio_validation_84", "prediction": "all x.(Person(x) -> (GrandSlamChampions(x) | OscarnominatedActor(x)))", "score": 0}
{"id": "folio_validation_84", "prediction": "exists x.(Person(x) & (SgtSlamChampon(x) | OscarNominatedActor(x)))", "score": 0}
{"id": "folio_validation_84", "prediction": "all x.(Person(x) -> (GrandSlamChampion(x) | OscarnominatedActor(x)))", "score": 0}
{"id": "folio_validation_84", "prediction": "all x.(Problem(x) -> (GrandSlamChampion(x) | OscarnominatedActor(x)))", "score": 0}
{"id": "folio_validation_85", "prediction": "all x.(GrandSlamChampions(x) -> ProfessionalTennisPlayer(x))", "score": 0}
{"id": "folio_validation_85", "prediction": "all x.((Person(x) & GrandSlamChampion(x)) -> ProfessionalTennisPlayer(x))", "score": 0}
{"id": "folio_validation_85", "prediction": "all x.(GrandShullChampion(x) -> ProfessionalTennisPlayer(x))", "score": 0}
{"id": "folio_validation_85", "prediction": "all x.((Person(x) & GrandSlamChampions(x)) -> ProfessionalTennisPlayer(x))", "score": 0}
{"id": "folio_validation_85", "prediction": "all x.(GrandSlamChampion(x) -> ProfessionalTennisPlayer(x))", "score": 0}
{"id": "folio_validation_85", "prediction": "all x.((Person(x) & GrandSlamChampon(x)) -> ProfessionalTennisPlayer(x))", "score": 0}
{"id": "folio_validation_86", "prediction": "all x.(OscarNominatedActor(x) -> Celebrity(x))", "score": 0}
{"id": "folio_validation_86", "prediction": "all x.(OscarnominatedActor(x) -> Celebrity(x))", "score": 0}
{"id": "folio_validation_86", "prediction": "all x.(Oscarnominated(x) -> Celebrity(x))", "score": 0}
{"id": "folio_validation_86", "prediction": "all x.((Actor(x) & Oscarnominated(x)) -> Celebrity(x))", "score": 0}
{"id": "folio_validation_86", "prediction": "all x.(OscarNominated(x) -> Celebrity(x))", "score": 0}
{"id": "folio_validation_87", "prediction": "all x.(ProfessionalTennisPlayer(x) -> Athlete(x))", "score": 0}
{"id": "folio_validation_87", "prediction": "all x.(TennisPlayer(x) -> Athlete(x))", "score": 0}
{"id": "folio_validation_88", "prediction": "all x.((Person(x) & Celebrity(x)) -> WellPayed(x))", "score": 0}
{"id": "folio_validation_88", "prediction": "all x.(Celebrity(x) -> WellPaid(x))", "score": 0}
{"id": "folio_validation_88", "prediction": "all x.(Celebrity(x) -> WellPayed(x))", "score": 0}
{"id": "folio_validation_88", "prediction": "all x y.((Person(x) & Celebrity(x)) -> WellPaid(x))", "score": 0}
{"id": "folio_validation_88", "prediction": "all x.(Celebrities(x) -> WellPaid(x))", "score": 0}
{"id": "folio_validation_88", "prediction": "all x.((Person(x) & Celebrity(x)) -> WellPaid(x))", "score": 0}
{"id": "folio_validation_88", "prediction": "all x.(Celebrate(x) -> WellPaid(x))", "score": 0}
{"id": "folio_validation_89", "prediction": "all x.(Athlete(x) -> Famous(x))", "score": 0}
{"id": "folio_validation_89", "prediction": "all x.((Person(x) & Athlete(x)) -> Famous(x))", "score": 0}
{"id": "folio_validation_90", "prediction": "all x.(WellPayedPerson(x) -> LivesInTaxAward(x))", "score": 0}
{"id": "folio_validation_90", "prediction": "all x.(WellPayed(x) -> LivesInTaxehaven(x))", "score": 0}
{"id": "folio_validation_90", "prediction": "all x.(WellPayed(x) -> LivesInTaxHaven(x))", "score": 0}
{"id": "folio_validation_90", "prediction": "all x.(WellPaid(x) -> LivesInTaxHaven(x))", "score": 0}
{"id": "folio_validation_90", "prediction": "all x.(WellPaid(x) -> LivesInTaxHavens(x))", "score": 0}
{"id": "folio_validation_90", "prediction": "all x.(WellPayed(x) -> LivesInTaxAvens(x))", "score": 0}
{"id": "folio_validation_90", "prediction": "all x.(WellPaidPerson(x) -> LivesInTaxeHaven(x))", "score": 0}
{"id": "folio_validation_90", "prediction": "all x.(WellPayedPeople(x) -> LivesInTaxeHaven(x))", "score": 0}
{"id": "folio_validation_90", "prediction": "all x.(WellPayedPerson(x) -> LivesInTaxeHaven(x))", "score": 0}
{"id": "folio_validation_90", "prediction": "all x.(WellPaidPerson(x) -> LivesInTaxHaven(x))", "score": 0}
{"id": "folio_validation_90", "prediction": "all x.(WellPaid(x) -> LivesInTaxesHavens(x))", "score": 0}
{"id": "folio_validation_90", "prediction": "all x.(WellPayedPerson(x) -> LivesInTaxhaven(x))", "score": 0}
{"id": "folio_validation_91", "prediction": "all x.((Djokovic(x) & Famous(x) & Athlete(x)) -> WellPayed(x))", "score": 0}
{"id": "folio_validation_91", "prediction": "all x.(Famous(x) -> WellPaid(x))", "score": 0}
{"id": "folio_validation_91", "prediction": "all x y.((Djokovic(x) & Famous(x) & Athlete(x)) -> LivesWellPayed(x,y))", "score": 0}
{"id": "folio_validation_91", "prediction": "all x.((Djokovic(x) & Famous(x) & Athlete(x)) -> LivesWellPayed(x))", "score": 0}
{"id": "folio_validation_91", "prediction": "all x.((Famous(x) & Athlete(x)) -> LivesWellPayed(x))", "score": 0}
{"id": "folio_validation_91", "prediction": "all x.((Djokovic(x) & Famous(x) & Athlete(x)) -> LivesGoodlyPayed(x))", "score": 0}
{"id": "folio_validation_91", "prediction": "all x.((Djokovic(x) & Famous(x) & Athlete(x)) -> LivesWellPaid(x))", "score": 0}
{"id": "folio_validation_91", "prediction": "all x.((Djokovic(x) & Famous(x) & Athlete(x)) -> LivesInWellPayed(x))", "score": 0}
{"id": "folio_validation_91", "prediction": "all x.((Djokovic(x) & Famous(x) & Athlete(x)) -> WellPaid(x))", "score": 0}
{"id": "folio_validation_91", "prediction": "all x.((Djokovic(x) & Famous(x) & Athlete(x)) -> WellPayedLife(x))", "score": 0}
{"id": "folio_validation_92", "prediction": "all x.((Djokovic(x) & GrandSlamChampion(x)) -> GrandSlamChampion(x))", "score": 0}
{"id": "folio_validation_92", "prediction": "(GrandSlamChampion(Jokovic) & GrandSlamChampion(Jokovic))", "score": 0}
{"id": "folio_validation_92", "prediction": "is Grand SlamChampion(Djokovic)", "score": -1}
{"id": "folio_validation_92", "prediction": "(grandsslamchampion(Djokovic)", "score": -1}
{"id": "folio_validation_92", "prediction": "(GrandMashupChampion(Djokovic))", "score": 0}
{"id": "folio_validation_92", "prediction": "all x.((Djokovic(x) & GrandSlamChampion(x)) ->.", "score": -1}
{"id": "folio_validation_92", "prediction": "all x.((Djokovic(x) & Grand SlamChampion(x)) -> IsAtHome(x))", "score": -1}
{"id": "folio_validation_92", "prediction": "(MotherOfGrandSlam(Djokovic) & GrandSlamChampion(Djokovic))", "score": 0}
{"id": "folio_validation_92", "prediction": "Djokovic is GrandSlamChampion.", "score": -1}
{"id": "folio_validation_92", "prediction": "all x.(GrandSlamChampions(x) -> Djokovic(x))", "score": 0}
{"id": "folio_validation_92", "prediction": "all x.(Djokovic(x) -> GrandSlamChampionate(x))", "score": 0}
{"id": "folio_validation_92", "prediction": "(GrandSlamChampion(Djokovic) & -Enthused(Djokovic))", "score": 0}
{"id": "folio_validation_92", "prediction": "(GrandSlamChampion(Djokovic)", "score": -1}
{"id": "folio_validation_92", "prediction": "all x.(Djokovic(x) -> Grand SlamChampion(x))", "score": -1}
{"id": "folio_validation_92", "prediction": "all x.(Djokovic(x) -> GrandSlamChampion(x))", "score": 0}
{"id": "folio_validation_92", "prediction": "(GrandSlamChampions(Djokovic) & GrandSlamChampions(Djokovic,Djokovic))", "score": 0}
{"id": "folio_validation_93", "prediction": "all x.(Djokovic(x) -> InvestsInTaxen(x))", "score": 0}
{"id": "folio_validation_93", "prediction": "(LivingInChequen(djokovic))", "score": 0}
{"id": "folio_validation_93", "prediction": "all x.((Jokovic(x) & TaxHaven(x)) -> LivesIn(x))", "score": 0}
{"id": "folio_validation_93", "prediction": "all x.(Djokovic(x) -> residesInTaxen(x))", "score": 0}
{"id": "folio_validation_93", "prediction": "all x.(Dojokovic(x) -> LivesInTaxHaven(x))", "score": 0}
{"id": "folio_validation_93", "prediction": "Djokovic & LivesInTaxHaunt(Djokovic)", "score": 0}
{"id": "folio_validation_93", "prediction": "(LivingInTaxHaven(Djokovic,2003))", "score": 0}
{"id": "folio_validation_93", "prediction": "Djokovic (LivingInTaxHaven)", "score": 0}
{"id": "folio_validation_93", "prediction": "all x y.((Djokovic(x) & TaxHaven(y)) -> LivesIn(x,y))", "score": 0}
{"id": "folio_validation_93", "prediction": "(livesInTaxHaven(Djokovic))", "score": 0}
{"id": "folio_validation_93", "prediction": "all x.(Djokovic(x) -> exists y.(Taxen(y) & exists z.(Taxhaven(z) & LivesIn(x,y)))))", "score": -1}
{"id": "folio_validation_93", "prediction": "all x.(Djokovic(x) -> TaxHaven(x))", "score": 0}
{"id": "folio_validation_93", "prediction": "all x.(Djokovic(x) -> exists y.(TaxHaven(y) & LivesIn(x,y))))", "score": -1}
{"id": "folio_validation_93", "prediction": "Djokovic lives in tax haven.", "score": -1}
{"id": "folio_validation_93", "prediction": "all x.(Dojokovic(x) -> LivesInTaxen(x))", "score": 0}
{"id": "folio_validation_93", "prediction": "all x.(Djokovic(x) -> LivesInTaxen(x))", "score": 0}
{"id": "folio_validation_94", "prediction": "all x.(Djokovic(x) -> -LivingInTaxHaven(x))", "score": 0}
{"id": "folio_validation_94", "prediction": "(-LivingInTaxHaven(Djokovic))", "score": 0}
{"id": "folio_validation_94", "prediction": "all x.(Djokovic(x) -> -IsTaxHaven(x))", "score": 0}
{"id": "folio_validation_94", "prediction": "all x.(Djokovic(x) -> -LivingInTaxen(x))", "score": 0}
{"id": "folio_validation_94", "prediction": "Drokovic - exists x.(TaxHaunt(x) & -LivingIn(x,y)))", "score": -1}
{"id": "folio_validation_94", "prediction": "(-LivesInTaxAven(Djokovic))", "score": 0}
{"id": "folio_validation_94", "prediction": "-(LivesInTaxHaven(Djokovic))", "score": 0}
{"id": "folio_validation_94", "prediction": "Djokovic n'exists x.(TaxHaven(x) -> -LisesIn(x,Djokovic))", "score": -1}
{"id": "folio_validation_94", "prediction": "all x.(Djokovic(x) -> -TaxHaven(x))", "score": 0}
{"id": "folio_validation_94", "prediction": "all x.(Djokovic(x) -> -LivesInTaxHaven(x))", "score": 0}
{"id": "folio_validation_94", "prediction": "Djokovic -LivingInTaxeNear(doesTaxHaven)", "score": -1}
{"id": "folio_validation_94", "prediction": "Djokovic -IsTaxHaven(Djokovic)", "score": -1}
{"id": "folio_validation_94", "prediction": "(-InternalHaven(Djokovic,Taxhaven))", "score": 0}
{"id": "folio_validation_94", "prediction": "(-HasTaxen(Djokovic))", "score": 0}
{"id": "folio_validation_94", "prediction": "all x y.((Djokovic(x) & TaxHaven(y)) -> -VibeIn(x,y))", "score": 0}
{"id": "folio_validation_95", "prediction": "all x y.((DiamondMine(x) & ProfessionalWrestlingStable(y) & FormedInWrestleMania(x,y)) -> In-houseFormation(x,y))", "score": -1}
{"id": "folio_validation_95", "prediction": "(ProfessionalWrestlingStable(diamondmine) & FormedInWrestling(diamondmine,wrestling))", "score": 0}
{"id": "folio_validation_95", "prediction": "All x.(DiamondMine(x) -> (ProfessionalWrestlingStable(x) & FormedInWrestling(x)))", "score": -1}
{"id": "folio_validation_95", "prediction": "all x.(DiamondMine(x) -> (ProfessionalWrestlingStable(x) & FormedInWrestling(x)))", "score": 0}
{"id": "folio_validation_95", "prediction": "all x.((DiamondMine(x) & ProfessionalWrestlingStable(x) & FormedInWrestling(x)) -> FormedIn(x,WrestlingStarz))", "score": 0}
{"id": "folio_validation_95", "prediction": "(ProfessionalWrestlingStable(DiamondMine) & FormedInWrestling(DiamondMountain))", "score": 0}
{"id": "folio_validation_95", "prediction": "All x.(DiamondMine(x) -> (ProfessionalWrestlingStable(x) & FormedInWrestleMexico(x)))", "score": -1}
{"id": "folio_validation_95", "prediction": "all x.((DiamondMine(x) & ProfessionalWrestlingStable(x) & FormedInWrestleMania(x)) -> FormedInWrestleMania(x))", "score": 0}
{"id": "folio_validation_95", "prediction": "(ProfessionalWrestlingStable(diamondmine) & FormedInWrestling(diamondmine))", "score": 0}
{"id": "folio_validation_95", "prediction": "all x.(DiamondMirror(x) -> (ProfessionalWrestlingStable(x) & FormedInWorldWrestling(x)))", "score": 0}
{"id": "folio_validation_95", "prediction": "all x.(CircleMicre(x) -> (ProfessionalWrestlingStable(x) & FormedInWexford(x)))", "score": 0}
{"id": "folio_validation_95", "prediction": "all x.(DiamondMine(x) -> (ProfessionalWrestlingStable(x) & FormedIn(x,Wrestling)))", "score": 0}
{"id": "folio_validation_95", "prediction": "all x.(DiamondMinge(x) -> (WrestlingStable(x) & FormedInWrestleMania(x)))", "score": 0}
{"id": "folio_validation_95", "prediction": "all x.(DiamondMine(x) -> (ProfessionalWrestlingStable(x) & FormedInWWE(x)))", "score": 0}
{"id": "folio_validation_96", "prediction": "Roderick Strong leads Diamond Mine.", "score": -1}
{"id": "folio_validation_96", "prediction": "RoderickStrongleadsDiamondMine(RoderEdge)", "score": 0}
{"id": "folio_validation_96", "prediction": "Roderick Strong leads DiamondMine.", "score": -1}
{"id": "folio_validation_96", "prediction": "All x.(DiamondMine(RoderickStrong) -> Leads(RoderickTrundle))", "score": -1}
{"id": "folio_validation_96", "prediction": "Roderick Strong leadsDiamondMine(Roderick)", "score": -1}
{"id": "folio_validation_96", "prediction": "Roderick Strong leads DiamondMine(roderickstrong).", "score": -1}
{"id": "folio_validation_96", "prediction": "Roderick Strong leadsDiamondMine(R)", "score": -1}
{"id": "folio_validation_96", "prediction": "Roderick Strong leads DiamondMine(Roderick)", "score": -1}
{"id": "folio_validation_96", "prediction": "Roderick Strong leads DiamondMine(roderickstrong)", "score": -1}
{"id": "folio_validation_97", "prediction": "(including CreedBrothers(DiamondMine) & IncludesIvyNile(DiamondMine))", "score": -1}
{"id": "folio_validation_97", "prediction": "all x.(DiamondMine(x) -> (CreedBrothers(x) & IvyNile(x)))", "score": 0}
{"id": "folio_validation_97", "prediction": "all x y z.((DimoxideMiner(x) & CreedBrothers(y) & IvyNile(z)) -> (Includes(x,y) | Includes(x,z)))", "score": 0}
{"id": "folio_validation_97", "prediction": "all x.(DiamondMiner(x) -> (IncludesCreedBrothers(x) & IncludesIvyNile(x)))", "score": 0}
{"id": "folio_validation_97", "prediction": "(CreedBrothers(diamondmine) & IvyNile(diamondmine))", "score": 0}
{"id": "folio_validation_97", "prediction": "(all x y.((DiamondMine(x) & CreedBrothers(y)) -> DiamondMine(x,y)) & all z w.((DiamondMine(z) & IvyNile(w)) -> Ceramic(z)))", "score": 0}
{"id": "folio_validation_97", "prediction": "(IncludesCreedBrothersAndIvyNile(diamondmine))", "score": 0}
{"id": "folio_validation_97", "prediction": "all x.(DiamondMine(x) -> ((CreedBrothers(x) | IvyNile(x))))", "score": 0}
{"id": "folio_validation_97", "prediction": "(IncludesCreedBrothers(DiamondMine) & IncludesIvyNile(DiamondMine))", "score": 0}
{"id": "folio_validation_97", "prediction": "(exists x.(DiamondMine(x) & CreedBrothers(x) & IvyNile(x)))", "score": 0}
{"id": "folio_validation_97", "prediction": "(all x.(DiamondMine(x) -> (CreedBronds(x) | IvyNile(x))))", "score": 0}
{"id": "folio_validation_97", "prediction": "all x y z.((DiamondMiner(x) & CreedBrothers(y) & IvyNile(z)) -> IncludesMiner(x,y,z))", "score": 0}
{"id": "folio_validation_97", "prediction": "(All x y.((DiamondMiner(x) & CreedBrothers(y)) -> IvyNile(y)))", "score": -1}
{"id": "folio_validation_98", "prediction": "all x.(Iperium(x) -> FeudWithDiamondMine(x))", "score": 0}
{"id": "folio_validation_98", "prediction": "DairyMineFudWith(Imperium,DiamondMine)", "score": 0}
{"id": "folio_validation_98", "prediction": "(Feud(Imperium) & DiamondMine(Imperium))", "score": 0}
{"id": "folio_validation_98", "prediction": "(FiedWithDiamondMine(Impederium)", "score": -1}
{"id": "folio_validation_98", "prediction": "(FeudWithDiamondMine(Imperium))", "score": 0}
{"id": "folio_validation_98", "prediction": "(FifdWithDiamondMine(Imperium))", "score": 0}
{"id": "folio_validation_98", "prediction": "(Favor(Imperium) & DiamondMine(imperium))", "score": 0}
{"id": "folio_validation_98", "prediction": "(Fud(Iperium) & DiamondMine(Iperium))", "score": 0}
{"id": "folio_validation_98", "prediction": "all x y.(Flaw(x,y) & DiamondMine(y)) -> Imperium(x))", "score": -1}
{"id": "folio_validation_98", "prediction": "all x.(Imperium(x) -> FeudWithDiamondMine(x))", "score": 0}
{"id": "folio_validation_98", "prediction": "_TheInperium(a) exists x.(Festival(x,DiamondMuse) & HasFind(x,a)))", "score": -1}
{"id": "folio_validation_98", "prediction": "all x.exists y.((Imperium(x) & DiamondMiner(y)) -> Feud(x,y))", "score": 0}
{"id": "folio_validation_99", "prediction": "all x y.((Roderick(x) & ProfessionalWrestlingStable(y)) -> LeadsStrong(x,y))", "score": 0}
{"id": "folio_validation_99", "prediction": "all x.((Roderick(x) & StrongLeadsProfessionalWrestlingStable(x)) -> TakesOver(x))", "score": 0}
{"id": "folio_validation_99", "prediction": "all x.(HeadsProfessionalWrestlingStable(x) -> RoderickStrong(x))", "score": 0}
{"id": "folio_validation_99", "prediction": "Roderick's strong leads professionalWrestlingStable(Roderick,Stable) & ProfessionalWrestling(Roderick,Stable)", "score": -1}
{"id": "folio_validation_99", "prediction": "all x.(RoberickStrongLeadesProfessionallyWrestling(x) -> ProfessionalStable(x))", "score": 0}
{"id": "folio_validation_99", "prediction": "all x.((Roderick(x) & FastLeadsProfessionalWrestling(x)) -> LedsStable(x))", "score": 0}
{"id": "folio_validation_99", "prediction": "all x y.((Roderick(x) & ProfessionalWrestlingStable(y)) -> StrongLeads(x,y))", "score": 0}
{"id": "folio_validation_99", "prediction": "all o.((RoderickStrongLeads(Roderick,professionalWrestlingStable) & HealThan(Roderick,professionalWrestlingStable)) -> StrongLeads(Roderick,professionalWrestlingStable))", "score": 0}
{"id": "folio_validation_99", "prediction": "all x.((Roderick(x) & StrongLeadsProfessionalWrestlingStable(x)) -> Strong(x))", "score": 0}
{"id": "folio_validation_99", "prediction": "all x.((Roderick(x) & Strong(x)) -> ProfessionalWrestlingStable(x))", "score": 0}
{"id": "folio_validation_99", "prediction": "Roderick StrongLeadsProfessionalWrestlingStable(Roderick)", "score": -1}
{"id": "folio_validation_99", "prediction": "Roderick StrongLeadsProfessionalWrestlingStable(roderick)", "score": -1}
{"id": "folio_validation_99", "prediction": "all x.((Roderick(x) & StrongLeadsProfessionalWrestlingStable(x)) -> ProfessionalWrestlingStable(x))", "score": 0}
{"id": "folio_validation_99", "prediction": "Roderick StrongLeadsProfessionalWrestlingStable(roderick,tight)", "score": -1}
{"id": "folio_validation_99", "prediction": "Roderick StrongLeadsProfessionalWrestlingStable(roderick))", "score": -1}
{"id": "folio_validation_100", "prediction": "Roderick StrongLeadsCreedBrothers(roderick,creedbrothers)", "score": -1}
{"id": "folio_validation_100", "prediction": "Roderick StrongLeadsCreedBrothers.", "score": -1}
{"id": "folio_validation_100", "prediction": "Roderick StrongLeadsCreedBrothers(Roderick,CreedBrothers)", "score": -1}
{"id": "folio_validation_100", "prediction": "(StrongLeads(Roderick,CreedBrothers))", "score": 0}
{"id": "folio_validation_100", "prediction": "Roderick StrongLeadsCreedBrothers(roderick,5)", "score": -1}
{"id": "folio_validation_100", "prediction": "Roderick StrongLeadsCreedBrothers(roderick,creed))", "score": -1}
{"id": "folio_validation_100", "prediction": "Roderick StrongLeadsCreedBrothers(Roderick,Francis)", "score": -1}
{"id": "folio_validation_100", "prediction": "Roderick StrongLeadsCreedBrothers(roderick,baptist,doctor/Dr.Anison(roderick) -> CreedBrothers(roderick,baptist,doctor))", "score": -1}
{"id": "folio_validation_100", "prediction": "Roderick leads CreedBrothers.", "score": -1}
{"id": "folio_validation_100", "prediction": "Roderick leads strong the CreedBrothers.", "score": -1}
{"id": "folio_validation_100", "prediction": "Roderick leads the Creed Brothers.", "score": -1}
{"id": "folio_validation_100", "prediction": "Roderick StrongLeadsCreedBrothers(roderick)", "score": -1}
{"id": "folio_validation_101", "prediction": "all x.((Imperium(x) & -FudWithProfessionalWrestlingStable(x) & IncludesIvyNile(x)) -> -FeedWithIvyNile(x))", "score": 0}
{"id": "folio_validation_101", "prediction": "all x.(((Imperium(x) & -FeudWithProProfessionalWrestlingStableIncludesIvyNile(x)) -> -FeudWithIvyNile(x))", "score": -1}
{"id": "folio_validation_101", "prediction": "all x y.((Inpetrium(x) & ProfessionalWrestlingStable(y) & IncludesIvyNile(x,y)) -> -Fight(x,y))", "score": 0}
{"id": "folio_validation_101", "prediction": "(exists x.(Imperium(x) & -FeudWith(x,y) & WWEStable(y) & ContainsIvyNile(x)))", "score": 0}
{"id": "folio_validation_101", "prediction": "-exists x.(Imperium(x) & -exists y.(ProfessionalWrestlingStable(y) & IncludesIvyNile(x)))", "score": 0}
{"id": "folio_validation_101", "prediction": "all x.(Imperium(x) -> -FuedWithProfessionalWrestlingStrong(x))", "score": 0}
{"id": "folio_validation_101", "prediction": "all x.((Imperium(x) & -ProfessionalWrestlingStable(x) & IncludesIvyNile(x)) -> -Fold(x))", "score": 0}
{"id": "folio_validation_101", "prediction": "all x.(Imperium(x) -> -Fued(x,exists y.(ProfessionalWrestlingStable(y) & Includes(x,y))))", "score": 0}
{"id": "folio_validation_101", "prediction": "all x.((Imperium(x) & -FirdWithProfessionalWrestlingStable(x,IvyNile)) -> -Fictitious(x))", "score": 0}
{"id": "folio_validation_101", "prediction": "all x y.((Imperium(x) & ProfessionalWrestling(y)) -> -FafdWith(x,y))", "score": 0}
{"id": "folio_validation_101", "prediction": "all x.(Imperium(x) -> (-FeudWithProfessionalWrestling(x) & IncludesIvyNile(x)))", "score": 0}
{"id": "folio_validation_101", "prediction": "all x.((Imperium(x) & -FeudWithProfessionalWrestlingStable(x) & IncludesIvyNile(x)) -> NotFire(x))", "score": 0}
{"id": "folio_validation_101", "prediction": "all x y z.((Imperium(x) & ProWrestlingStable(y) & IvyNile(z)) -> -HasFud(x,y,z))", "score": 0}
{"id": "folio_validation_101", "prediction": "(-FudWithProfessionalTwoThanIvyNile(e))", "score": 0}
{"id": "folio_validation_101", "prediction": "all x y.((Impederium(x) & ProfessionalWrestlingStable(y) & IvyNile(x,y)) -> -FeudWith(x,y))", "score": 0}
{"id": "folio_validation_101", "prediction": "all x.((Imperium(x) & -FeudWithProfessionalWearingStable(x) & IncludesIvyNile(x)) -> -ProfessionalWrestlingStable(x))", "score": 0}
{"id": "folio_validation_102", "prediction": "Symphony No.9 is MusicPiece(x)", "score": -1}
{"id": "folio_validation_102", "prediction": "(MusicPiece(SymphonyNo.9) & ContainsMusic(Symphony,No.8))", "score": -1}
{"id": "folio_validation_102", "prediction": "all x.(SymphonyNo.9(x) -> MusicPiece(x))", "score": -1}
{"id": "folio_validation_102", "prediction": "all x.(SymphonyNo9(x) -> MusicPiece(x))", "score": 0}
{"id": "folio_validation_102", "prediction": "Symphony No.9 is MusicPiece.", "score": -1}
{"id": "folio_validation_102", "prediction": "Symphony No.9MusicPiece(Symphony)", "score": -1}
{"id": "folio_validation_102", "prediction": "Symphony No.9", "score": -1}
{"id": "folio_validation_102", "prediction": "Symphony No. 9 is musicPiece(Symphony)", "score": -1}
{"id": "folio_validation_102", "prediction": "All x.(SymphonyNo.9(x) -> MusicPiece(x))", "score": -1}
{"id": "folio_validation_102", "prediction": "Symphony No.9 is MusicPiece(Symphony)", "score": -1}
{"id": "folio_validation_102", "prediction": "Symphony No.9MusicPiece(symphony,symphony)", "score": -1}
{"id": "folio_validation_103", "prediction": "all x.(Composer(x) -> WritesMusicPieces(x))", "score": 0}
{"id": "folio_validation_103", "prediction": "all x y.((Composer(x) & MusicPiece(y)) -> Writes(x,y))", "score": 0}
{"id": "folio_validation_103", "prediction": "all x.(Composer(x) -> WritesMusicPart(x))", "score": 0}
{"id": "folio_validation_103", "prediction": "all x y.((Composer(x) & MusicPiece(y)) -> Write(x,y))", "score": 0}
{"id": "folio_validation_103", "prediction": "all x.(Composer(x) -> WritesMusicPiece[x])", "score": 0}
{"id": "folio_validation_103", "prediction": "all x.(Composer(x) -> WritesMusicPiece(x))", "score": 0}
{"id": "folio_validation_104", "prediction": "all x y.(( Beethoven(x) & SymphonyNo.9(y)) -> WrittenBy(x,y))", "score": -1}
{"id": "folio_validation_104", "prediction": "all x y z w.((Bobophren(x) & SymphonyNo(y) & Symphony(z) & No(w)) -> Writes(x,y,z))", "score": 0}
{"id": "folio_validation_104", "prediction": "exists x.(Benedicton(x) & SymphonyNo.9(symphony) & WrittenBy(x,z))", "score": -1}
{"id": "folio_validation_104", "prediction": "Beethoven wrote Symphony No.9(Benedict)", "score": -1}
{"id": "folio_validation_104", "prediction": "all x y z.((Boltz & SymphonyNo.9) & Symphony(y) & SymphonyNo.10) & Symphony(z)) -> CompiledBy(x,y,z))", "score": -1}
{"id": "folio_validation_104", "prediction": "all x.((B Beethoven(x) & SymphonyNo4(x)) -> Writing(x,y))", "score": -1}
{"id": "folio_validation_104", "prediction": "Beethoven wrote Symphony No. 9, also a symphony of Beethoven’s.", "score": -1}
{"id": "folio_validation_104", "prediction": "all x y.((Bénefit(x) & SymphonyNo.9)) -> wroteAnd(x,y))", "score": -1}
{"id": "folio_validation_104", "prediction": "Beethoven wrote Symphony No. 9 (Benedict-Kelly).)", "score": -1}
{"id": "folio_validation_104", "prediction": "Beethoven wrote Symphony No.9(Boboph) & No.9(Boboph))", "score": -1}
{"id": "folio_validation_104", "prediction": "(SymphonyNo.9) -> BeethovenWritten(Beth.1))", "score": -1}
{"id": "folio_validation_104", "prediction": "(-published by Beethoven(Beth.,SymphonyNo.9)))", "score": -1}
{"id": "folio_validation_104", "prediction": "all x y.((Bass(x) & Symphony(y)) -> Writes(x,y))", "score": 0}
{"id": "folio_validation_104", "prediction": "(Benedicts(Bosombus) | Symphony(Bosombus,nounce)))", "score": -1}
{"id": "folio_validation_104", "prediction": "-(BodounteyWritesSymphonyNo9.9))", "score": -1}
{"id": "folio_validation_104", "prediction": "Beethoven wrote Symphony No. 9 (2002).", "score": -1}
{"id": "folio_validation_105", "prediction": "all x.(ViennaMusicStadium(x) -> PremieredSymphonyNo.9(x))", "score": -1}
{"id": "folio_validation_105", "prediction": "VoyagerMusicStadium(ViennaMusicScene) PrimedSymphonyNo.9(von) -> SymphonyNo.9(von))", "score": -1}
{"id": "folio_validation_105", "prediction": "(Vienna MusicSocietyPremieresSymphonyNo9.1))", "score": -1}
{"id": "folio_validation_105", "prediction": "-PremieresMusicSymphonyNo.9.VienneMusicScientificIssue(TMSymphonyNo.9).", "score": -1}
{"id": "folio_validation_105", "prediction": "(ViennaMusicSociety.(ViennaMusicSay) & SymphonyNo.9(ViennaMusicSay))", "score": -1}
{"id": "folio_validation_105", "prediction": "The Vienna MusicStructure premiered SymphonyNo.9 (ViennaMusicSymphonyOrchid)", "score": -1}
{"id": "folio_validation_105", "prediction": "-(ViennaMusicScene(v) & SymphonyNo9.9) – PremieredBy(v,v))", "score": -1}
{"id": "folio_validation_105", "prediction": "Innovators: Symphony No. 9 & FirstComposition(ViennaMusicSaciety)", "score": -1}
{"id": "folio_validation_105", "prediction": "All x y z.((ViennaMusicSaciety(x) & SymphonyNo.9(y) & SymphonyNo.9(z)) -> Premiered(x,y,z))", "score": -1}
{"id": "folio_validation_105", "prediction": "All x y.((ViennaMusicSymphony(x) & SymphonyNo.9) InViennaMusicSymphony(y)) -> Premiered(x,y))", "score": -1}
{"id": "folio_validation_105", "prediction": "the ViennaMusicSymphonySaudience(symphony#9) premieres(symphony#9) & MusicalSymphonyNo.9(symphony2@symphony))", "score": -1}
{"id": "folio_validation_105", "prediction": "Symphony No. 9 premieredByMusicSymphony(WienMusicStadium)", "score": -1}
{"id": "folio_validation_105", "prediction": "(PremieredSymphonyNo.9), WienMusicSociety,2007))", "score": -1}
{"id": "folio_validation_105", "prediction": "(WienMusicSymphonySocietyPremieredSymphonyNo.9).", "score": -1}
{"id": "folio_validation_105", "prediction": "-MuseumViennaMusicSacietyPrimizedSymphonyNo.9(ViennaMusicSaciety)", "score": -1}
{"id": "folio_validation_105", "prediction": "ViviansMusicSafarie(v) – premieredSymphonyNo.9 & SymphonyNo.9(v))", "score": -1}
{"id": "folio_validation_106", "prediction": "All x.(ViennaMusicSociety(x) -> Orchestra(x))", "score": -1}
{"id": "folio_validation_106", "prediction": "Orchestra (ViennaMusicStadium)", "score": 0}
{"id": "folio_validation_106", "prediction": "LocatedInWienMusicSaciety(y,x) & Operation(z) & Orchestra(w))", "score": -1}
{"id": "folio_validation_106", "prediction": "ALL x.((ViennaMusicStadium(x) & Orchestra(x)) -> FoundedIn(x))", "score": -1}
{"id": "folio_validation_106", "prediction": "all x.(ViennaMusicShow(x) -> Orchestra(x))", "score": 0}
{"id": "folio_validation_106", "prediction": "(ViennaMusicSectay(varietnam) & Orchestra(varietnam))", "score": 0}
{"id": "folio_validation_106", "prediction": "All x.(ViennaMusicSymposia(x) -> Orchestra(x))", "score": -1}
{"id": "folio_validation_106", "prediction": "-(ViennaMusicSymposia(Vienna,MusicSymposia))", "score": 0}
{"id": "folio_validation_106", "prediction": "exists x.(ViennaMusicSociety(x) & Orchestra(x))", "score": 0}
{"id": "folio_validation_106", "prediction": "VeronaMusicSystème(WienMusicSsociety)", "score": 0}
{"id": "folio_validation_106", "prediction": "(ViennaMusicSynctet(v) & Orchestra(v))", "score": 0}
{"id": "folio_validation_106", "prediction": "All x.(ViennaMusicStadium(x) -> Orchestra(x))", "score": -1}
{"id": "folio_validation_106", "prediction": "all x.(ViennaMusicStadium(x) -> Orchestra(x))", "score": 0}
{"id": "folio_validation_106", "prediction": "ViennaMusicSociety(Vienna) -> Orchestra(Vienna))", "score": -1}
{"id": "folio_validation_107", "prediction": "Beethoven leads ViennaMusicSystème.", "score": -1}
{"id": "folio_validation_107", "prediction": "Beethoven leads ViennaMusicSectaion((Bond,Vienna))", "score": -1}
{"id": "folio_validation_107", "prediction": "(Leads(Benedict,VienneseMusicSociety) & Beethoven(Bop))", "score": 0}
{"id": "folio_validation_107", "prediction": "Beethoven leads the ViennaMusicSydney((Boboss,Viennese))", "score": -1}
{"id": "folio_validation_107", "prediction": "all x.(Belovin Beethoven(x) -> LeadsViennaMusicSystème(x))", "score": -1}
{"id": "folio_validation_107", "prediction": "-LeadsViennaMusic(Benjamin,WesternMusicScientific)", "score": 0}
{"id": "folio_validation_107", "prediction": "(LeadsViennaMusicStatue(Benjamin) & Mozart(Benjamin))", "score": 0}
{"id": "folio_validation_107", "prediction": "Beethoven leads the ViennaMusicSystème.", "score": -1}
{"id": "folio_validation_107", "prediction": "all x y z.(WienMusicSociety(x) & Beethoven(y) & Leads(y,x))", "score": 0}
{"id": "folio_validation_107", "prediction": "(Leads(Bernstein,ViennaMusic(Benefiz) | Leads(Benefiz,ViennaMusic(Benefiz)))", "score": -1}
{"id": "folio_validation_107", "prediction": "all x.((Benedict(x) & ViennaMusicSociety(x)) -> Leads(x,y))", "score": 0}
{"id": "folio_validation_107", "prediction": "all x.((Bobo Beethoven(x) & ViennaMusicSociety(x)) -> Lends(x,y))", "score": -1}
{"id": "folio_validation_107", "prediction": "(Leads((B Beethoven,ViennaMusicStadium) & Leads(Bochody,ViennaMusicStadium))", "score": -1}
{"id": "folio_validation_107", "prediction": "all x y.((Bonus(x) & ViennaMusicSafari(y)) -> Leads(x,y))", "score": 0}
{"id": "folio_validation_107", "prediction": "all x y.((Bonus(x) & ViennaMusicSociety(y)) -> Lead(x,y))", "score": 0}
{"id": "folio_validation_107", "prediction": "Beethoven leads ViennaMusicShow(below)", "score": -1}
{"id": "folio_validation_108", "prediction": "all x y.((Orchestra(x) & Conductor(y)) -> Leads(x,y))", "score": 0}
{"id": "folio_validation_108", "prediction": "all x y.((Orchestra(x) & Conductor(y)) -> LeadsBy(x,y))", "score": 0}
{"id": "folio_validation_108", "prediction": "all x y z.((Orchestra(x) & Conductor(y) & Conductor(z)) -> Leads(x,y,z))", "score": 0}
{"id": "folio_validation_108", "prediction": "all x.(Orchestra(x) -> LeadsByConductor(x))", "score": 0}
{"id": "folio_validation_108", "prediction": "all x.(Orchestra(x) -> ConductedBy(x))", "score": 0}
{"id": "folio_validation_108", "prediction": "all x.(Orchestra(x) -> exists y.(Conductor(y) & Leads(x,y)))", "score": 0}
{"id": "folio_validation_108", "prediction": "all x.(Orchestra(x) -> LeadByConductor(x))", "score": 0}
{"id": "folio_validation_108", "prediction": "all x y.((Orchestra(x) & Director(y)) -> Lead(x,y))", "score": 0}
{"id": "folio_validation_108", "prediction": "all x.(Orchestra(x) -> LedByConductors(x))", "score": 0}
{"id": "folio_validation_108", "prediction": "all x y.(Orchestra(x) & Conductor(y) & LeadsBy(x,y))", "score": 0}
{"id": "folio_validation_109", "prediction": "Beethoven is a composer.", "score": -1}
{"id": "folio_validation_109", "prediction": "ALL X.(Boboston(x) -> Composer(x))", "score": -1}
{"id": "folio_validation_109", "prediction": "all x.((Bopest(x) & Composer(x)) -> Composer(x))", "score": 0}
{"id": "folio_validation_109", "prediction": "Beethoven is composer.", "score": -1}
{"id": "folio_validation_109", "prediction": "all x.(Bobo Beethoven(x) -> Composer(x))", "score": -1}
{"id": "folio_validation_109", "prediction": "(Composer(Benjamin) & Composer(Benjamin))", "score": 0}
{"id": "folio_validation_109", "prediction": "all x.(Boboston(x) -> Composer(x))", "score": 0}
{"id": "folio_validation_109", "prediction": "all x.(Bounty(x) -> Composer(x))", "score": 0}
{"id": "folio_validation_109", "prediction": "all x.(Composer(x) -> Beethoven(x))", "score": 0}
{"id": "folio_validation_109", "prediction": "all x.(Boboz.((Element(x) & Composite(x)) -> Beethoven(x))", "score": -1}
{"id": "folio_validation_109", "prediction": "all x.((Bobop Beethoven(x) & Composer(x)) -> Comedor(x))", "score": -1}
{"id": "folio_validation_109", "prediction": "all x.((Conductor(x) & Beethoven(x)) -> Composer(x))", "score": 0}
{"id": "folio_validation_109", "prediction": "all x.((Bobopoulos(x) & Composer(x)) -> Composer(x))", "score": 0}
{"id": "folio_validation_109", "prediction": "all x.(Bobo(x) -> Composite(x))", "score": 0}
{"id": "folio_validation_109", "prediction": "(Composer(Benjamin) & Composite(Benjamin))", "score": 0}
{"id": "folio_validation_110", "prediction": "exists x.(Orchestra(x) & PrimedMusicPieces(x))", "score": 0}
{"id": "folio_validation_110", "prediction": "exists x.(Orchestra(x) & PremieredMusicPieces(x))", "score": 0}
{"id": "folio_validation_110", "prediction": "exists x.(Orchestra(x) & PremieredMusicPiece(x))", "score": 0}
{"id": "folio_validation_110", "prediction": "exists x y.(Orchestra(x) & PreeminentMusicPiece(y))", "score": 0}
{"id": "folio_validation_110", "prediction": "exists x.(Orchestra(x) & PremieredMusic(x))", "score": 0}
{"id": "folio_validation_110", "prediction": "exists x.(Orchestra(x) & FirstEventMusicPiece(x))", "score": 0}
{"id": "folio_validation_110", "prediction": "exists x.(Orchestra(x) & PremieresMusicPieces(x))", "score": 0}
{"id": "folio_validation_111", "prediction": "all x.(Conductor(x) -> Beethoven(x))", "score": 0}
{"id": "folio_validation_111", "prediction": "all x.((Boboîte(x) & -Conductor(x)) -> -Conductor(x))", "score": 0}
{"id": "folio_validation_111", "prediction": "(-Conductor(Bobbas(Bobbas(Bobbas))", "score": -1}
{"id": "folio_validation_111", "prediction": "all x.(Bobo Beethoven(x) -> -Conductor(x))", "score": -1}
{"id": "folio_validation_111", "prediction": "all x.(Benedict(x) -> -Conductor(x))", "score": 0}
{"id": "folio_validation_111", "prediction": "all x.(Bonbon(x) -> -Conductor(x))", "score": 0}
{"id": "folio_validation_111", "prediction": "exists x.(Bolt Beethoven(x) & -Conductor(x))", "score": -1}
{"id": "folio_validation_111", "prediction": "Beethoven is notConductor( Beethoven)", "score": -1}
{"id": "folio_validation_111", "prediction": "all x.(Bandit(x) -> -Conductor(x))", "score": 0}
{"id": "folio_validation_111", "prediction": "Marxist(Benedict) & -Conductor(Benedict)", "score": 0}
{"id": "folio_validation_111", "prediction": "all x.((B Beethoven(x) & -Conductor(x)) -> -Conductor(x))", "score": -1}
{"id": "folio_validation_111", "prediction": "all x.(Boboss(x) -> -Conductor(x))", "score": 0}
{"id": "folio_validation_111", "prediction": "Beethoven is not Conductor((Bobo).", "score": -1}
{"id": "folio_validation_111", "prediction": "all x.(Bondhuron(x) -> -Conductor(x))", "score": 0}
{"id": "folio_validation_111", "prediction": "(-Conductor(Benédict)", "score": -1}
{"id": "folio_validation_112", "prediction": "all x.(ZahaHadidDesignStyle(x) -> Timeless(x))", "score": 0}
{"id": "folio_validation_112", "prediction": "all x.(DesignStyle(x) -> Timeless(x))", "score": 1}
{"id": "folio_validation_112", "prediction": "all x y for all z.((DesignStyle(x) & ZahaHadid(y) & DesignStyle(z)) -> Timeless(x))", "score": -1}
{"id": "folio_validation_112", "prediction": "all x.(ZahaHadidDesignStyle(x) -> Relatable(x))", "score": 0}
{"id": "folio_validation_112", "prediction": "all x.(ZahaHadidDesignStyles(x) -> Timeless(x))", "score": 0}
{"id": "folio_validation_112", "prediction": "All x.(ZahaHadid(x) -> Stylish(x))", "score": -1}
{"id": "folio_validation_112", "prediction": "all x.(ZahaHadid(x) -> TimelessDesignStyle(x))", "score": 0}
{"id": "folio_validation_112", "prediction": "all x.((DesignStyle(x) & ZahaHadid(x)) -> Temporary(x))", "score": 0}
{"id": "folio_validation_112", "prediction": "all x y.((DesignStyle(x) & ZahaHadid(y)) -> Timeless(x))", "score": 0}
{"id": "folio_validation_112", "prediction": "all x.(ZahaHadid(x) -> TimelessDesign(x))", "score": 0}
{"id": "folio_validation_112", "prediction": "all x.(ZahaHadidDesignStyle(x) -> Tempting(x))", "score": 0}
{"id": "folio_validation_113", "prediction": "-exists x.(MassProductDesign(x) & Timeless(x))", "score": 1}
{"id": "folio_validation_114", "prediction": "(Solvent(ZahaHadid) | Sequel(KellyWurstler)))", "score": -1}
{"id": "folio_validation_114", "prediction": "(DesignStyle(ZahaHadid) | DesignStyle(KellyWearstler))", "score": 0}
{"id": "folio_validation_114", "prediction": "((ZahaHair(z) | KellyWearstler(z)))", "score": 0}
{"id": "folio_validation_114", "prediction": "exists x.(DesignStyle(x) & (DesignStyle(x) | DesignStyle(x)))", "score": 0}
{"id": "folio_validation_114", "prediction": "exists x.(DesignStyle(x) & (ZahaHadid(x) | KellyWearstler(x)))", "score": 0}
{"id": "folio_validation_114", "prediction": "(exists x.(DesignStyle(x) & IsStyle(x)) & (IsStyle(x) & IsStyle(x)) | (IsStyle(x) & IsStyle(x))))", "score": -1}
{"id": "folio_validation_114", "prediction": "((DesignStyle(z) | KellyWearstlerDesignStyle(z)))", "score": 0}
{"id": "folio_validation_114", "prediction": "(designStyle(z) | DesignStyle(z) | DesignStyle(z)) & ZahaHadid(z) & KellyWeaverstler(x))", "score": -1}
{"id": "folio_validation_114", "prediction": "(exists x.(DesignStyle(x) & ZahaHadid(x)) | exists y.(DesignStyle(y) & KellyWearstler(y))))", "score": -1}
{"id": "folio_validation_114", "prediction": "((ZahaHadidsDesignStyle(Z) | KellyWearstlersDesignStyle(Z)))", "score": 0}
{"id": "folio_validation_114", "prediction": "(exists x.(DesignStyle(x,ZahaHadid) | DesignStyle(x,KellyWearstler)))", "score": 1}
{"id": "folio_validation_114", "prediction": "((ZahaHadid(z) | KellyWearstler(z)))", "score": 0}
{"id": "folio_validation_114", "prediction": "(exists x.(DesignStyle(x) & AvailableIn(x,ZahaHadid)) | exists y.(DesignStyle(y,KellyWearstler))))", "score": -1}
{"id": "folio_validation_114", "prediction": "exists x y.(DesignStyle(x,y) & (DisneyStyle(y) | DesignStyle(y)))", "score": 0}
{"id": "folio_validation_115", "prediction": "all x.(CelebrityWearstler(x) -> EvocativeDesignStyle(x))", "score": 0}
{"id": "folio_validation_115", "prediction": "ALL x.((DesignStyle(x) & ShowsDesign(x)) -> Evocative(x))", "score": -1}
{"id": "folio_validation_115", "prediction": "all x y z.((KristinWearstler(x) & DesignStyle(y) & DesignStyle(z)) -> Evocative(x))", "score": 0}
{"id": "folio_validation_115", "prediction": "all x.(KellyWearstlerDesignStyle(x) -> Evocative(x))", "score": 0}
{"id": "folio_validation_115", "prediction": "all x.((KellyWearstler(x) & DesignStyle(x)) -> Evocative(x))", "score": 0}
{"id": "folio_validation_115", "prediction": "all x.((KristinWearstler(x) & DesignStyle(x)) -> Evocative(x))", "score": 0}
{"id": "folio_validation_115", "prediction": "all x.(KellyWearstler(x) -> EvocativeDesignStyle(x))", "score": 0}
{"id": "folio_validation_115", "prediction": "all x.(KellieWearstler(x) -> EvocativeDesignStyles(x))", "score": 0}
{"id": "folio_validation_115", "prediction": "all x.(WordstlerType(x) -> Evocative(x))", "score": 0}
{"id": "folio_validation_115", "prediction": "all x.((DesignStyles(x) & KellyWearstler(x)) -> Evocative(x))", "score": 0}
{"id": "folio_validation_115", "prediction": "all x.(Wearstler(x) -> Evocative(x))", "score": 0}
{"id": "folio_validation_115", "prediction": "all x.(KellieWearstler(x) -> EvocativeDesignStyle(x))", "score": 0}
{"id": "folio_validation_116", "prediction": "all x y.((DesignStyle(x) & KellyWearstler(y)) -> Dreamy(y))", "score": 0}
{"id": "folio_validation_116", "prediction": "all x.((DesignStyle(x) & KellyWearstler(x)) -> Dreamy(x))", "score": 0}
{"id": "folio_validation_116", "prediction": "all x.(KellieWearstler(x) -> DreamyDesignStyle(x))", "score": 0}
{"id": "folio_validation_116", "prediction": "all x.((KellyWearstlerDesignStyle(x) & Dreamy(x)) -> Dreamy(x))", "score": 1}
{"id": "folio_validation_116", "prediction": "all x.((DesignStyle(x) & KellyWearstler)) -> Dreamy(x))", "score": -1}
{"id": "folio_validation_116", "prediction": "all x.(Fantastic(x) -> Dreamy(x))", "score": 0}
{"id": "folio_validation_116", "prediction": "all x.(KellieWearstlerDesignStyle(x) -> Dreamy(x))", "score": 0}
{"id": "folio_validation_116", "prediction": "all x.(KellyWearstler(x) -> Dreamy(x))", "score": 0}
{"id": "folio_validation_116", "prediction": "all x.(Task(x) -> Dreamy(x))", "score": 0}
{"id": "folio_validation_116", "prediction": "all x.(KellyWearstlerDesignStyle(x) -> Dreamy(x))", "score": 1}
{"id": "folio_validation_116", "prediction": "all x.(WearstlerDesignStyle(x) -> Dreamy(x))", "score": 0}
{"id": "folio_validation_116", "prediction": "all x.(GhostyDesignStyles(x) -> KelliWearstler(x))", "score": 0}
{"id": "folio_validation_116", "prediction": "all x.((KellyWearstler(x) & DesignStyle(y)) -> Dreamy(x))", "score": 0}
{"id": "folio_validation_117", "prediction": "all x.((DesignByMax(x) & Timeless(x)) -> (MassProductDesign(x) & Evocative(x)))", "score": 0}
{"id": "folio_validation_117", "prediction": "all x.((Design(x) & Timeless(x)) -> (MassProductDesign(x) & Evocative(x)))", "score": 0}
{"id": "folio_validation_117", "prediction": "all x.((Design(x) & Momentary(x)) -> (MassProductDesign(x) & Evocative(x)))", "score": 0}
{"id": "folio_validation_117", "prediction": "all x.((DesignByMax(x) & Timeless(x)) -> (MassProductDesign(x) & Empirative(x)))", "score": 0}
{"id": "folio_validation_117", "prediction": "all x.((Design(x) & Timeless(x)) | (Design(x) & MassProductDesign(x) & Evocative(x))))", "score": -1}
{"id": "folio_validation_117", "prediction": "all x.((Design(x) & Simple(x) & MassProductDesign(x) & Evocative(x)) -> Stunning(x))", "score": 0}
{"id": "folio_validation_117", "prediction": "all x.((DesignbyMax(x) & Tranquil(x)) -> (MassProductDesign(x) & Evocative(x)))", "score": 0}
{"id": "folio_validation_118", "prediction": "all x.(Design(x) -> MassProductDesign(x))", "score": 0}
{"id": "folio_validation_118", "prediction": "all x.((Design(x) & Max(x)) -> MassProductDesign(x))", "score": 0}
{"id": "folio_validation_118", "prediction": "all x.((Design(x) & ByMax(x)) -> MassProductDesign(x))", "score": 0}
{"id": "folio_validation_118", "prediction": "all x.(MaxDesign(x) -> MassProductDesign(x))", "score": 0}
{"id": "folio_validation_118", "prediction": "all x y.((Design(x) & Max(y)) -> MassProductDesign(x))", "score": 0}
{"id": "folio_validation_118", "prediction": "all x.(Max(x) -> MassProductDesign(x))", "score": 0}
{"id": "folio_validation_118", "prediction": "all x.((Design(x) & MaxSyntax(x)) -> MassProductDesign(x))", "score": 0}
{"id": "folio_validation_119", "prediction": "all x.((Design(x) & Max(x)) -> EvocativeAndDreamy(x))", "score": 0}
{"id": "folio_validation_119", "prediction": "all x.((Design(x) & Max(x)) -> (Evocative(x) & Dreamy(x)))", "score": 0}
{"id": "folio_validation_119", "prediction": "all x.((Design(x,Max) & Evocative(x) & Dreamy(x)) -> Loves(x,Max))", "score": 0}
{"id": "folio_validation_119", "prediction": "all x.(Design(x) -> (Evocative(x) & Dreamy(x)))", "score": 1}
{"id": "folio_validation_119", "prediction": "all x.(Design(x,Max) -> (Evocative(x) & Dreamy(x)))", "score": 0}
{"id": "folio_validation_119", "prediction": "exists x.(Design(x) & Max(x) & Evocative(x) & Dreamy(x))", "score": 0}
{"id": "folio_validation_120", "prediction": "all x.(Design(x) -> (Evocative(x) | Dreamy(x)))", "score": 0}
{"id": "folio_validation_120", "prediction": "all x.(Design(x) -> ((Evocative(x) | Dreamy(x))))", "score": 0}
{"id": "folio_validation_120", "prediction": "all x.((Design(x) & Max(x)) -> (Evocative(x) | Dreamy(x)))", "score": 0}
{"id": "folio_validation_120", "prediction": "all x.(MindDesign(x) -> (Evocative(x) | Dreamy(x)))", "score": 0}
{"id": "folio_validation_120", "prediction": "all x.((Design(x) & ByMax(x)) -> (Evocative(x) | Dreamy(x)))", "score": 0}
{"id": "folio_validation_121", "prediction": "all x.(HighlyRankedByWearersTennisAssociation(x) -> ActivePlayer(x))", "score": 0}
{"id": "folio_validation_121", "prediction": "all x y.((Player(x) & HighRatedByWomensTennisAssociation(x) & MajorTennis(y)) -> MostActivePlayer(x,y))", "score": 0}
{"id": "folio_validation_121", "prediction": "all x.((Player(x) & HighlyRankedByWomensTennisAssociation(x)) -> ActivePlayer(x))", "score": 0}
{"id": "folio_validation_121", "prediction": "all x y.((Player(x) & HighlyRankedByWomensTennisAssociation(x) & Major Tennis(y)) -> MostActivePlayer(x,y))", "score": -1}
{"id": "folio_validation_121", "prediction": "all x.((Player(x) & RatedHighlyByWomensTennis(x)) -> ActivePlayerInMajorTennis(x))", "score": 0}
{"id": "folio_validation_121", "prediction": "all x.((Player(x) & HighlyRuggedByWomensTennisAssociation(x)) -> ActiveInMainTennis(x))", "score": 0}
{"id": "folio_validation_121", "prediction": "all x.((Player(x) & HighlyRatedByWomensTennisAssociation(x)) -> ActivePlayerMostInMainTennis(x))", "score": 0}
{"id": "folio_validation_121", "prediction": "all x y.((Player(x) & HighlyRankedByWomensTennisAssociation(x) & Major Tennis(y)) -> ActivePlayer(x,y))", "score": -1}
{"id": "folio_validation_121", "prediction": "all x.((Player(x) & HighlyRankedByWomensTennisAssociation(x)) -> MostActivePlayerInMainTennis(x))", "score": 0}
{"id": "folio_validation_121", "prediction": "all x.(WellRanked(x,WomensTennisAssociation) -> ActivePlayerInMajorTennis(x))", "score": 0}
{"id": "folio_validation_121", "prediction": "all x.((Player(x) & HighlyRanked(x) & WomensTennisAssociation(x)) -> ActiveInMajorTennis(x))", "score": 0}
{"id": "folio_validation_121", "prediction": "all x.((Player(x) & HighlyRankedByWomensTennisAssocia(x)) -> ActivePlayerInMajorTenNation(x))", "score": 0}
{"id": "folio_validation_121", "prediction": "all x.((Player(x) & HighlyRankedByWomensTennisAssociation(x)) -> ActiveTennisPlayer(x))", "score": 0}
{"id": "folio_validation_121", "prediction": "all x y.((Player(x) & HighlyRanked(x,y) & WomensTennisAssociation(y)) -> ActiveInMainTennis(x,z))", "score": 0}
{"id": "folio_validation_121", "prediction": "all x.(HighlyRankedByWomensTennisAssociation(x) -> MajorTennisActionPlayer(x))", "score": 0}
{"id": "folio_validation_121", "prediction": "all x.((Player(x) & HighlyRankedByWomensTennisAssociation(x)) -> ActiveMostPlayerInMajorTennis(x))", "score": 0}
{"id": "folio_validation_122", "prediction": "all x.((LostToIgaSwiatek(x)) -> HighlyRankedByWomensTennisAssociation(x))", "score": 0}
{"id": "folio_validation_122", "prediction": "all x.((LoseToIgaSwiatek(x)) -> HighlyRankedByWomensTennisAssociation(x))", "score": 0}
{"id": "folio_validation_122", "prediction": "all x.((LostToIgaSwiatek(x) & WomensTennisAssociation(x)) -> HighlyRanked(x))", "score": 0}
{"id": "folio_validation_122", "prediction": "all x.(LoseToIgaSwiatek(x) -> HighlyRankedByWomansTennisAssociation(x))", "score": 0}
{"id": "folio_validation_122", "prediction": "all x.(((LopedToIgaSwiatek(x) & LostToIgaSwiatek(x)) -> HighlyRankedByWomensTennisAssociation(x))", "score": -1}
{"id": "folio_validation_122", "prediction": "all x.((LivingToIgaSwiatek(x) & HighlyRatedByWomensTennisAssociation(x)) -> LostToIgaSwiatek(x))", "score": 0}
{"id": "folio_validation_122", "prediction": "all x.(LosingToIgaSwiatek(x) -> HighRatedByWomensTennisAssociation(x))", "score": 0}
{"id": "folio_validation_122", "prediction": "all x.((LossToIgaSwiatek(x) & TopRankedByWomensTennisAssociation(x)) ->.", "score": -1}
{"id": "folio_validation_122", "prediction": "all x.(LoadedToIgaSwiatek(x) -> HighlyRankedByWomensTennisAssociation(x))", "score": 0}
{"id": "folio_validation_122", "prediction": "all x.(LoseToIgaSwiatek(x) -> HighlyRatedByYoungTennisAssociation(x))", "score": 0}
{"id": "folio_validation_122", "prediction": "all x.(LosenToIgaSwiatek(x) -> HighlyRatedByWomensTennisAssociation(x))", "score": 0}
{"id": "folio_validation_122", "prediction": "all x.(LostToIgaSwiatek(x) -> HighlyRated(x))", "score": 0}
{"id": "folio_validation_122", "prediction": "all x.(LostToIgaSwiatek(x) -> HighlyRatedByWealthTennisAssociation(x))", "score": 0}
{"id": "folio_validation_122", "prediction": "all x.(((Lose(x,IgaSwiatek) & InWomensTennis(x)) -> HighlyRankedByAssociation(x))", "score": -1}
{"id": "folio_validation_122", "prediction": "all x.((LoseToIgaSwiatek(x) & HighlyRankedByWomensTennisAssocation(x)) -> IgaSwiatek(x))", "score": 0}
{"id": "folio_validation_122", "prediction": "all x.((LittleToIgaSwiatek(x)) -> HighlyRankedByWomensTennisAssociation(x))", "score": 0}
{"id": "folio_validation_123", "prediction": "all x.((FemaleTennisPlayer(x) & AtRottarias2019(x) & LostToIgaSwiatek(x)) -> TennisPlayer(x,Y,x))", "score": 0}
{"id": "folio_validation_123", "prediction": "all x.((FemaleTennisPlayer(x) & RolandGarrosRomaros2022) & LostToIgaSwiatek(x)) -> Won(x,y))", "score": -1}
{"id": "folio_validation_123", "prediction": "all x y.((FemaleTennisPlayer(x) & RolandGarros(y) & AtRonaldGarros(y,x)) -> LostTo(x,y))", "score": 0}
{"id": "folio_validation_123", "prediction": "all x.((FemaleTennisPlayer(x) & RolandGarros2022(x)) -> LosesToIgaSwiatek(x))", "score": 0}
{"id": "folio_validation_123", "prediction": "all x.(FemaleTennisPlayer(x) -> LostToIgaSwiatek(x))", "score": 0}
{"id": "folio_validation_123", "prediction": "all x.((FemaleTennisPlayer(x) & RolandGarros(x) & LostToIgaSwiatek(x)) -> LostToSwiatek(x))", "score": 0}
{"id": "folio_validation_123", "prediction": "all x.((YoungTennisPlayer(x) & RolandGarros22(x)) -> LostTo(x,IgaSwiatek))", "score": 0}
{"id": "folio_validation_123", "prediction": "all x.((FemaleTennisPlayer(x) & RolandGarros(x)) -> LostToIgaSwiatek(x))", "score": 0}
{"id": "folio_validation_123", "prediction": "all x.((FemaleTennisPlayer(x) & RolandGarros(x) & IgaSwiatek(x)) -> Lost(x))", "score": 0}
{"id": "folio_validation_123", "prediction": "all x.((Lefts(x,Iga) & TennisPlayer(x)) -> RolandGarros2022)", "score": 0}
{"id": "folio_validation_123", "prediction": "all x.((FemaleTennisPlayer(x) & RolandGarros2022(x)) -> LostToSwiatek(x))", "score": 0}
{"id": "folio_validation_123", "prediction": "all x.((FemaleTennisPlayer(x) & RolandGarros2022(x)) -> LostToIgaSwiatek(x))", "score": 0}
{"id": "folio_validation_123", "prediction": "all x.((FemaleTennisPlayer(x) & RolandGarros(x) & -Disaster(x)) -> LostToIgaSwiatek(x))", "score": 0}
{"id": "folio_validation_123", "prediction": "all x.((TennisPlayer(x) & RolandGarros1922) & Lost(x)) -> IgaSwiatek(x))", "score": -1}
{"id": "folio_validation_123", "prediction": "all x.((FemaleTennisPlayer(x) & RolandGarros(x) & IgaSwiatek(x)) -> LosesTo(x,9))", "score": 0}
{"id": "folio_validation_124", "prediction": "(Elf(tennisplayer) & RolandGarros(tennis) & RolandGarros(tennisplayer) & RolandGarros(tennisplayer))", "score": 0}
{"id": "folio_validation_124", "prediction": "(exists x.(FemaleTennisPlayer(x) & RolandGarros(x)) | exists y.(FemaleTennisPlayer(y) & RolandGarros(y) & RolandGarros(y))))", "score": -1}
{"id": "folio_validation_124", "prediction": "(exists x.(FemaleTennisPlayer(x) & RolandGarros(x)) | (MaleTennisPlayer(x) & RolandGarros(x))))", "score": -1}
{"id": "folio_validation_124", "prediction": "(exists x.(TennisPlayer(x) & (Female(x) | Male(x))) & RolandGarros(x))", "score": 0}
{"id": "folio_validation_124", "prediction": "(exists x.(FemaleTennisPlayer(x) & RolandGarros2022)) | exists y.(MaleTennisPlayer(y) & RolandGarros-2022)))", "score": -1}
{"id": "folio_validation_124", "prediction": "exists x.((FemaleTennisPlayer(x) & RolandGarros2022(x)) | (FemaleTennisPlayer(x) & RolandGarros2022(x))))", "score": -1}
{"id": "folio_validation_124", "prediction": "(exists x.(EqualPlace(x,Ranford2022) & Female(x)) | exists y.(Männy(y,Ranford2022))))", "score": -1}
{"id": "folio_validation_124", "prediction": "(exists x.(FemaleTennisPlayer(x) & RolandGarros2022)) | exists y.(FemaleTennisPlayer(y) & RolandGarros2022))))", "score": -1}
{"id": "folio_validation_124", "prediction": "(exists x.(Tennisplayer(x) & Female(x) & RolandGarros2022)) | exists y.(Tennisplayer(y) & Male(y))))", "score": -1}
{"id": "folio_validation_124", "prediction": "(Either(femaleTennisPlayer(x) & RolandGarros(x)) | (FemaleTennisPlayer(x) & RolandGarros(x))))", "score": -1}
{"id": "folio_validation_124", "prediction": "(exists x.(Female(x) & TennisPlayer(x)) | exists y.(Male(y) & TennisPlayer(y))))", "score": -1}
{"id": "folio_validation_124", "prediction": "(exists x.(Female(x) & TennisPlayer(x) & RolandGarros(x,202)) | exists y.(Female(y) & TennisPlayer(y,202))))", "score": -1}
{"id": "folio_validation_124", "prediction": "(exists x.(FemaleTennisPlayer(x) & RolandGarros2022)) | exists y.(MaleTennisPlayer(y) & RolandGarros2022))))", "score": -1}
{"id": "folio_validation_124", "prediction": "(exists x.(TennisPlayer(x,RolandGarros) & Female(x)) | exists y.(TennisPlayer(y,RolandGarros) & Male(y))))", "score": -1}
{"id": "folio_validation_124", "prediction": "(exists x.(ThanPension(x) & FemaleTennisPlayer(x) | MaleTennisPlayer(x)) & RolandGarrosPlayer(x))", "score": 0}
{"id": "folio_validation_124", "prediction": "((FemaleTennisPlayer(f) & RolandGarros2022)) | MaleTennisPlayer(f)))", "score": -1}
{"id": "folio_validation_125", "prediction": "all x y.((Male(x) & RolandGarros2022(x) & RafaelNadal(y)) -> LostTo(x,y))", "score": 0}
{"id": "folio_validation_125", "prediction": "all x.((TennisPlayer(x) & RolandGarros2022(x)) -> LostToRafaelNadal(x))", "score": 0}
{"id": "folio_validation_125", "prediction": "all x y.((Male(x) & RolandGarros(y) & RolandGarros(y)) -> LostTo(x,y))", "score": 0}
{"id": "folio_validation_125", "prediction": "all x.((Neal(x) & AtRolandGarros2022(x)) -> LostToRafaelNadal(x))", "score": 0}
{"id": "folio_validation_125", "prediction": "all x.((Position(x) & MaleTennisPlayer(x) & RolandGarros2022 LosesToRafaelNadal(x)) -> LostToRafaelNadal(x))", "score": -1}
{"id": "folio_validation_125", "prediction": "all x y.((Male(x) & RafaelNadal(y)) -> LostTennisPlayer(x,y))", "score": 0}
{"id": "folio_validation_125", "prediction": "all x.((MaleFestive(x) & RolandGarros2022(x)) -> LostToRafalNadal(x))", "score": 0}
{"id": "folio_validation_125", "prediction": "all x y.((MalePace(x) & RolandGarros(y) & RolandGarros(z)) -> LostToRafaelNadal(x,y,z))", "score": 0}
{"id": "folio_validation_125", "prediction": "all x.((Male(x) & RolandGarros(x)) -> LostTo(x,RafaelNadal))", "score": 0}
{"id": "folio_validation_125", "prediction": "all x.((PentanyPlayer(x) & RolandGarros/2022) & LostToRafaelNadal(x)) -> Male(x))", "score": -1}
{"id": "folio_validation_125", "prediction": "all x.((TennisPlayer(x) & Martial(x,RonaldGarros,2022)) -> LostTo(x,RafaelNadal))", "score": 0}
{"id": "folio_validation_125", "prediction": "all x.((MalePosition(x) & RolandGarros2022(x)) -> LosesToRafaelNadal(x))", "score": 0}
{"id": "folio_validation_125", "prediction": "all x.(Pace(x) -> LostToRonaldGarros(x))", "score": 0}
{"id": "folio_validation_125", "prediction": "all x.((Man(x) & RolandGarros(x) & -RuralGarros(x)) -> LostToRafaelNadal(x))", "score": 0}
{"id": "folio_validation_125", "prediction": "all x y.((PaceLeague(x) & TennisPlayer(y) & RolandGarros(y) & RolandGarros(z)) -> Lost(y,r,w))", "score": 0}
{"id": "folio_validation_125", "prediction": "all x.((Male(x) & TennisStar(x,RolandGarros,2022)) -> LostToNadal(x))", "score": 0}
{"id": "folio_validation_126", "prediction": "all x.((Piece(x) & RoledHighlyByWomensTennisAssociation(x) & PlayersLossToRafaelNadal(x)) -> -RotaryGarros2022(x))", "score": 0}
{"id": "folio_validation_126", "prediction": "all x.((Player(x) & (RatedHighly(x) | LostToRafaelNadal(x))) -> -Male(x))", "score": 0}
{"id": "folio_validation_126", "prediction": "all x.((Player(x) & (RankedHighlyByWomensTennisAssociation(x) | LostToRafaele Nadal(x))) -> -PlayerMale(x))", "score": -1}
{"id": "folio_validation_126", "prediction": "all x.((Player(x) & (RatedHighlyBetweenWomenAndTennis(x) | PlayerLostToRafaelNadal(x))) -> -LivingToRonaldGarros(x))", "score": 0}
{"id": "folio_validation_126", "prediction": "all x.((Player(x) & (InRoyal(x) | LostToNadal(x)) & CocoGauff(x)) -> -Male(x))", "score": 0}
{"id": "folio_validation_126", "prediction": "all x.((Player(x) & (RatedHighly(x,WTA) | PlayerLostToRafaelNadal(x))) -> -MaleTennisPlayer(x))", "score": 0}
{"id": "folio_validation_126", "prediction": "all x.((Player(x) & (RankedHighlyByWomensTennisAssociation(x) | LosesToRafaelNadal(x))) -> -MaleTennisPlayer(x))", "score": 0}
{"id": "folio_validation_126", "prediction": "all x.((Player(x) & (RatedHighly(x) | PlayerLossToRafaelNadal(x))) -> -MaleTennisPlayer(x))", "score": 0}
{"id": "folio_validation_126", "prediction": "all x.((Player(x) & (HighRatedByWomensTennisAssociation(x) | LostToRafaelNadal(x))) -> -Male TennisPlayer(x,RonaldGarros2022))", "score": -1}
{"id": "folio_validation_126", "prediction": "all x.((Player(x) & (RatedHighlyByWomensTennisAssociation(x) | WinnerToRafaelNadal(x)) & CocoGauff(x)) -> -MaleTennisPlayer(x))", "score": 0}
{"id": "folio_validation_126", "prediction": "all x.((Player(x) & (RankedHighlyByWomensTennisAssociation(x) | LosedToRafaelNadal(x))) -> -MaleRoyalGarrosPlayer(x))", "score": 0}
{"id": "folio_validation_126", "prediction": "all x.((Player(x) & (RanksHighlyByWomensTennisAssociation(x) | LostToRafaelNadal(x))) -> -ManualTennisplayer(x))", "score": 0}
{"id": "folio_validation_126", "prediction": "all x.(((Player(x) & (RatedHighlyByWCTA(x) | PlayerLostToRafaelNadal(x))) -> -MalePlayer(x))", "score": -1}
{"id": "folio_validation_126", "prediction": "all x.((Player(x) & (RankedHighlyByWomensTennisAgency(x) | LostToRafaelNadal(x))) -> -MaleTennisPlayerAtRo RolandGarros2022(x))", "score": -1}
{"id": "folio_validation_126", "prediction": "all x.((Player(x) & (RoundHighby(x) | LosesToRafaelNadal(x))) -> RolandGarros2022_Follow(x))", "score": 0}
{"id": "folio_validation_126", "prediction": "all x.((CooperGauff(x) & RanksHighlyByWomensTennisAssociation(x) | LostToRafaelNadal(x)) | (-MaleToRalphGarros2022(x))))", "score": -1}
{"id": "folio_validation_127", "prediction": "(MostActivePlayer(CocoonGauff)", "score": -1}
{"id": "folio_validation_127", "prediction": "all x.(CocoaGauff(x) -> ActivePlayer(x))", "score": 0}
{"id": "folio_validation_127", "prediction": "CocoGauff ((MostActivePlayer(x) & MajorTennisPlayer(x)))", "score": 0}
{"id": "folio_validation_127", "prediction": "all x.(Coco-Gauff(x) -> ActivePlayer(x))", "score": -1}
{"id": "folio_validation_127", "prediction": "Coco Gauff is amongstthemImportantPlayersInMainTennis(Coco)", "score": -1}
{"id": "folio_validation_127", "prediction": "(MostActivePlayer(Coco Gauff)", "score": -1}
{"id": "folio_validation_127", "prediction": "(MostActivePlayersInMajorTennis(Coco Gauff))", "score": -1}
{"id": "folio_validation_127", "prediction": "exists x.(CocoGauff(x) & ActiveInTennis(x))", "score": 0}
{"id": "folio_validation_127", "prediction": "CocoGauff is amongstActivePlayersInMinorTennis(coco).", "score": -1}
{"id": "folio_validation_127", "prediction": "all x.(CocoGauff(x) -> (ActivePlayer(x) & MajorTennis(x)))", "score": 0}
{"id": "folio_validation_127", "prediction": "(MostActivePlayer(coco) & MajorTennis(coco))", "score": 0}
{"id": "folio_validation_127", "prediction": "the best-performingPerson(coco)", "score": -1}
{"id": "folio_validation_127", "prediction": "All x.(CocoGauff(x) -> ActivePlayer(x))", "score": -1}
{"id": "folio_validation_127", "prediction": "Coco Gauff is a member of MajorTennisPlayers(Coco)", "score": -1}
{"id": "folio_validation_127", "prediction": "all x.(CooperGauff(x) -> ActivePlayerInMajorSeasons(x))", "score": 0}
{"id": "folio_validation_127", "prediction": "all x.(CocoonGauff(x) -> ActivePlayer(x))", "score": 0}
{"id": "folio_validation_128", "prediction": "(LoseTo(CocoonGauff,Rafael Nadal))", "score": -1}
{"id": "folio_validation_128", "prediction": "(-LoseTo(Coco)Gauff(Coco))", "score": -1}
{"id": "folio_validation_128", "prediction": "(LossTo(CocooGauff) -> LostTo(CocoaGauff))", "score": 0}
{"id": "folio_validation_128", "prediction": "-LoseToRafaeleNadal(Coco.", "score": -1}
{"id": "folio_validation_128", "prediction": "(WasToRaphaelNadal(Gauff) & Coco(Gauff))", "score": 0}
{"id": "folio_validation_128", "prediction": "-LostToCooperGauff(Cocoa)", "score": 0}
{"id": "folio_validation_128", "prediction": "-LoredTo(CocoaGauff(CocoaGauff))", "score": 0}
{"id": "folio_validation_128", "prediction": "(LossTo(CocoonGauff) | LossToRafaelNadal(CocoonGauff))", "score": 0}
{"id": "folio_validation_128", "prediction": "(KocoGauffRecordsNodal(Coco))", "score": 0}
{"id": "folio_validation_128", "prediction": "-DislikedConcoction(CocoaGauff)", "score": 0}
{"id": "folio_validation_128", "prediction": "-LoseCocoaGauffToRafaelNadal(CocoaGauff)", "score": 0}
{"id": "folio_validation_128", "prediction": "In the recent Finals, CocoGauff and RafaelNadal lost.", "score": -1}
{"id": "folio_validation_128", "prediction": "exists x.(CocoonGauff(x) & LostTo(x,AndRafaelNadal))", "score": 0}
{"id": "folio_validation_128", "prediction": "all x.(CocoonGauff(x) -> LostTo(x,RafaelNadal))", "score": 0}
{"id": "folio_validation_128", "prediction": "-Lose(cocoa(cocoa) -> LostTo(cocoa))", "score": -1}
{"id": "folio_validation_128", "prediction": "LoserCoco(coco) & RafaelNadal(coco)", "score": 0}
{"id": "folio_validation_129", "prediction": "(-(ChocolateGauff(Gauff) & LostToIgaSwiatek(Gauff)) & -(MostActivePlayerInMainTennis(Gauff))))", "score": -1}
{"id": "folio_validation_129", "prediction": "(-(Player(cocoap) & LostToIgaSwiatek(cocoap)) | Player(cocoap))", "score": 0}
{"id": "folio_validation_129", "prediction": "all x.(CocoAuff(x) -> (-LostToIgaSwiatek(x) | MultiActivePlayerInMenorTennis(x)))", "score": 0}
{"id": "folio_validation_129", "prediction": "(-(Player(Costo Gauff) & LostToIgaSwiatek(CostoGauff)) | (MostActivePlayerInMoreTennis(CostoCoumb))))", "score": -1}
{"id": "folio_validation_129", "prediction": "all x.(CocoGauff(x) -> (-(Player(x) & Lost(x) & IgaSwiatek(x)) | (MostActivePlayerInMajorTennis(x)))))", "score": -1}
{"id": "folio_validation_129", "prediction": "all x.(CocoGauff(x) -> (-(Player(x) & LostToIgaSwiatek(x) | PlayerTheMostActiveInMajorTennis(x))))", "score": 0}
{"id": "folio_validation_129", "prediction": "(-LostToIgaSwiatek(CocoGauff) & -MostActivePlayer(CocoGauff))", "score": 0}
{"id": "folio_validation_129", "prediction": "(-(Patient(coco) | Player(coco)) & LostToIgaSwiatek(coco)) & -Patient(coco) & -MostActive(coco))", "score": -1}
{"id": "folio_validation_129", "prediction": "all x.(Coco(x) -> (-(Player(x) & LosesToIgaSwiatek(x) | MostActivePlayer(x))))", "score": 0}
{"id": "folio_validation_129", "prediction": "(-WinsToIgaSwiatek(cocoegauff) | PlayerInMajorMajorTennis(cocogauff)))", "score": -1}
{"id": "folio_validation_129", "prediction": "all x.(Coco(x) -> (-(Player(x) & LostToIgaSwiatek(x) & -(Player(x,IgaSwiatek) & ActiveInMajorSeasonTennis)))))", "score": -1}
{"id": "folio_validation_129", "prediction": "(-(Player(Costo Gauff) | AllPlayer(CostoGauff)) & -LostToIgaSwiatek(CostoGoad))", "score": -1}
{"id": "folio_validation_129", "prediction": "all x.((Player(x) & -PositionedTo(x,IgaSwiatek) & ActivePlayerIn(x, MajorTennis)) -> CocoGauff(x))", "score": 0}
{"id": "folio_validation_129", "prediction": "-(CocoaGauff(co) & Player(co) & -(LostToFilmLoverIgaSwiatek(co) | MostActivePlayerInTennis(y))))", "score": -1}
{"id": "folio_validation_129", "prediction": "CocoGauff.(Cake(Gauff) & -(YoungPlayer(Gappet) & LostToIgaSwiatek(Gappet) & FewestActivePlayerInMajorTennis(Gappet)))", "score": -1}
{"id": "folio_validation_129", "prediction": "all x.(CocoGauff(x) -> (-Person(x) & LostToIgaSwiatek(x) & -MostActivePlayer(x)))", "score": 0}
{"id": "folio_validation_130", "prediction": "all x.(Cat(x) -> Mammal(x))", "score": 0}
{"id": "folio_validation_131", "prediction": "exists x.(Pet(x) & -Mammal(x))", "score": 0}
{"id": "folio_validation_132", "prediction": "-exists x.(Pet(x) & Cat(x))", "score": 0}
{"id": "folio_validation_133", "prediction": "-exists x.(FavoriteSeason(x) & FavoriteSeason(x,Summer) & FavoriteSeason(x,Fall))", "score": 0}
{"id": "folio_validation_133", "prediction": "-exists x.(FavoriteSeason(x,y) & LovedSummer(x) & LovedSummer(y) & LovedSummer(x,y) & LovedSummer(x,y))", "score": 0}
{"id": "folio_validation_133", "prediction": "-exists x.(FavoriteSeason(x) & (Summer(x) & Fall(x)))", "score": 0}
{"id": "folio_validation_133", "prediction": "-exists x.(FavoriteSeason(x) & NoFavoriteSeason(x) & Summer(x) & Fall(x))", "score": 0}
{"id": "folio_validation_133", "prediction": "-exists x.(Summer(x) & Fall(x))", "score": 0}
{"id": "folio_validation_133", "prediction": "-exists x.(FavoriteSeason(x) & FavoriteSeason(x) & Summer(x) & Fall(x))", "score": 0}
{"id": "folio_validation_133", "prediction": "-exists x.(FavoriteSeason(x) & InFavoriteSeason(x,Summer & Fall1))", "score": -1}
{"id": "folio_validation_133", "prediction": "-exists x.((Summer(x) & Fall(x)) -> FavoriteSeason(x))", "score": 0}
{"id": "folio_validation_133", "prediction": "-exists x.(FatSeason(x) & FavoriteSeason(x,Summer) & FavoriteSeason(x,Fall))", "score": 0}
{"id": "folio_validation_133", "prediction": "-all x.(((SoilSummer(x) & Fall(x)) -> FavoriteSeason(x))", "score": -1}
{"id": "folio_validation_133", "prediction": "no one (all x.((Summer(x) & Fall(x)) -> FavoriteSeason(x)))", "score": -1}
{"id": "folio_validation_133", "prediction": "-exists x.(Favorite(x) & Favorite(x,Summer) & Favorite(x,Fall))", "score": 0}
{"id": "folio_validation_133", "prediction": "-exists x.(FavoriteSeason(x) & Summer(x) & Fall(x))", "score": 0}
{"id": "folio_validation_133", "prediction": "-exists x.(Person(x) & FavoriteSeason(x,Summer) & FavoriteSeason(x,Fall))", "score": 0}
{"id": "folio_validation_133", "prediction": "-exists x.(FavoriteSeason(x) & LovedSummer(x) & LovedSummer(x) & LovedSummer(x) & LovedSummer(x) & LovedSummer(x))", "score": 0}
{"id": "folio_validation_133", "prediction": "-(Perfect(Person,FavoriteSeason) & FavoriteSeason(Person,Summer) & FavoriteSeason(Person,FavoriteSeason))", "score": 0}
{"id": "folio_validation_134", "prediction": "all x.((Student(x) & LongVacation(x)) -> LovesSummer(x))", "score": 0}
{"id": "folio_validation_134", "prediction": "all x.((Student(x) & WantsLongVacation(x)) -> LoveSummer(x))", "score": 0}
{"id": "folio_validation_134", "prediction": "all x.((Student(x) & WishesLongVacation(x)) -> LovesSummer(x))", "score": 0}
{"id": "folio_validation_134", "prediction": "all x.((Student(x) & WantsLongVacation(x)) -> LovesSummer(x))", "score": 0}
{"id": "folio_validation_134", "prediction": "all x.((Student(x) & WantsLongVacation(x)) -> LovesSummerTheMost(x))", "score": 0}
{"id": "folio_validation_134", "prediction": "all x.((Student(x) & Loves(x,Summer)) -> LongVacation(x))", "score": 0}
{"id": "folio_validation_134", "prediction": "all x.((Student(x) & WantsToHaveLongVacation(x)) -> Loves(x,summer))", "score": 0}
{"id": "folio_validation_134", "prediction": "all x.((Student(x) & LovesSummer(x)) -> LongVacation(x))", "score": 0}
{"id": "folio_validation_134", "prediction": "all x.((Student(x) & LongVacation(x)) -> LovesTooMost(x))", "score": 0}
{"id": "folio_validation_135", "prediction": "Emma's favoriteSpringSummer(Emma)", "score": -1}
{"id": "folio_validation_135", "prediction": "all x.(FavoriteSeason(x) -> Summer(x))", "score": 0}
{"id": "folio_validation_135", "prediction": "(FavoriteSeason(Emma): Summer(Emma))", "score": -1}
{"id": "folio_validation_135", "prediction": "Emma's favoriteSeason(Emma) is(Summer))", "score": -1}
{"id": "folio_validation_135", "prediction": "(LastSeason(Emma) & FavoriteSeason(Emma))", "score": 0}
{"id": "folio_validation_135", "prediction": "all x.((Emma'sFavoriteSeason(x)) -> Summer(x))", "score": 0}
{"id": "folio_validation_135", "prediction": "Emma's favoriteSeason(em) este Summer(em.p.a.cbt).", "score": -1}
{"id": "folio_validation_135", "prediction": "(FavoriteSeason(Emma & Summer(Emma))", "score": -1}
{"id": "folio_validation_135", "prediction": "Emma's favorites(e) (summer) | Summer(e)))", "score": -1}
{"id": "folio_validation_135", "prediction": "Summer, Emma's favoriteSeason,it's(Emma,Season))", "score": -1}
{"id": "folio_validation_135", "prediction": "SeenIn(Emma,Summer)", "score": 0}
{"id": "folio_validation_135", "prediction": "(FavoriteSeason(emma) -> Summer(emma))", "score": 0}
{"id": "folio_validation_135", "prediction": "(FavoriteSeason(Meghan) & Summer(Emma))", "score": 0}
{"id": "folio_validation_135", "prediction": "All x.(FavoriteSeason(x) -> Summer(x))", "score": -1}
{"id": "folio_validation_135", "prediction": "Mimosas & Emma,Summer(e)", "score": -1}
{"id": "folio_validation_135", "prediction": "(FavoriteSeason(Emma) -> Summer(Emma))", "score": 0}
{"id": "folio_validation_136", "prediction": "(FavoriteSeason(Mia,Emma) & -FavoriteSeason(Mia,Emma))", "score": 0}
{"id": "folio_validation_136", "prediction": "(FavoriteSeason(Mia,emily) & -SameSeason(Mia,emily))", "score": 0}
{"id": "folio_validation_136", "prediction": "(FavoriteSeason(Mia, Emma) -FavoriteSeason(Mia, Emma))", "score": -1}
{"id": "folio_validation_136", "prediction": "-SameFavoriteSeason(Mia,Emma)", "score": 0}
{"id": "folio_validation_136", "prediction": "all x y.((Mia(x) & Emma(y)) -> -FavoriteSeason(x,y))", "score": 0}
{"id": "folio_validation_136", "prediction": "-Emma'sFavoriteSeason(Emma,SingleSeason)", "score": 0}
{"id": "folio_validation_136", "prediction": "(FavoriteSeason(Mia) & FavoriteSeason(Mia)) & -SameSeason(Emma))", "score": -1}
{"id": "folio_validation_136", "prediction": "(FavoriteSeason(Mia) & FavoriteSeason(Emma))", "score": 0}
{"id": "folio_validation_136", "prediction": "all x y.((MiaSeason(x) & EmmaSeason(y)) -> -SameSeason(x,y))", "score": 0}
{"id": "folio_validation_136", "prediction": "all x y.((Celebration(x) & Mia(x) & Season(y)) -> -SameSeason(x,y))", "score": 0}
{"id": "folio_validation_136", "prediction": "all x y.((Mia(x) & Emma(y)) -> FavoriteSeason(x,y))", "score": 0}
{"id": "folio_validation_136", "prediction": "Mia's favoriteSeason(Mia,x) & -SameSeason(Mia,ex))", "score": -1}
{"id": "folio_validation_136", "prediction": "-(FavoriteSeason(Mia,) & FavoriteSeason(Mia,))", "score": -1}
{"id": "folio_validation_137", "prediction": "all x.((James(x) & LongVacation(x)) -> WannaHave(x,y))", "score": 0}
{"id": "folio_validation_137", "prediction": "all x.((James(x) & LongVacation(x)) -> WantsToHave(x,x))", "score": 0}
{"id": "folio_validation_137", "prediction": "all x.((James(x) & Enjoys(x,LongVacation)) -> CanBachelor(x))", "score": 0}
{"id": "folio_validation_137", "prediction": "all x.((James(x) & LongVacation(x)) -> Wants(x))", "score": 0}
{"id": "folio_validation_137", "prediction": "all x.((Jamey(x) & LongVacation(x)) -> Wants(x,y))", "score": 0}
{"id": "folio_validation_137", "prediction": "all x.((Jimmy(x) & LongVacation(x)) -> WishesToHave(x,y))", "score": 0}
{"id": "folio_validation_137", "prediction": "all x.((James(x) & LongVacation(x)) -> DesiredBefore(x))", "score": 0}
{"id": "folio_validation_137", "prediction": "all x.((James(x) & LongVacation(x)) -> WantsToHave(x,y))", "score": 0}
{"id": "folio_validation_137", "prediction": "all x.(James(x) -> LongVacation(x))", "score": 0}
{"id": "folio_validation_137", "prediction": "James wishes to have longVacation(James)", "score": -1}
{"id": "folio_validation_137", "prediction": "you can't have a longvacation(James)", "score": -1}
{"id": "folio_validation_137", "prediction": "(HasLongVacation(James,James) & HasLongVacation(James,James))", "score": 0}
{"id": "folio_validation_137", "prediction": "all x.((James(x) & LongVacation(x)) -> AimsFor(x,y))", "score": 0}
{"id": "folio_validation_137", "prediction": "all x.((James(x) & LongVacation(x)) -> Wants(x,y))", "score": 0}
{"id": "folio_validation_138", "prediction": "bestSeason(James) & Summer(James))", "score": -1}
{"id": "folio_validation_138", "prediction": "(FavoriteSeason(James) -> Summer(James))", "score": 0}
{"id": "folio_validation_138", "prediction": "(FavoriteSeason(James,Summer))", "score": 0}
{"id": "folio_validation_138", "prediction": "Summer is James's favoriteSeason(Jim)", "score": -1}
{"id": "folio_validation_138", "prediction": "James'favoriteSeason(july)", "score": 0}
{"id": "folio_validation_138", "prediction": "Summer (FavoriteSeason(James) -> FavoriteSeason(James))", "score": -1}
{"id": "folio_validation_138", "prediction": "James's favoriteSeasonIsSummer(James,Summer)", "score": -1}
{"id": "folio_validation_138", "prediction": "James's favoriteSeason(James) & Summer(James))", "score": -1}
{"id": "folio_validation_138", "prediction": "Sommer, James's favoriteSeason(James)", "score": -1}
{"id": "folio_validation_138", "prediction": "all x.(MotherSeason(x) -> Summer(x))", "score": 0}
{"id": "folio_validation_138", "prediction": "James'favoriteSeason(James,Summer)", "score": 0}
{"id": "folio_validation_138", "prediction": "James's favoriteSeason(James) -> Summer(James))", "score": -1}
{"id": "folio_validation_138", "prediction": "EspeciallyFavoriteSeason(James) & Summer(James))", "score": -1}
{"id": "folio_validation_138", "prediction": ",JamesSummer(James)", "score": -1}
{"id": "folio_validation_139", "prediction": "James's favoriteSeason(MightBeFavorite(MaryJimmy,OfChildren))", "score": -1}
{"id": "folio_validation_139", "prediction": "all x.((FavoriteSeason(x) & James(x)) -> Fall(x))", "score": 0}
{"id": "folio_validation_139", "prediction": "*FavoriteSeason(James,Fall)", "score": 0}
{"id": "folio_validation_139", "prediction": "(FavoriteSeason(James) -> Fall(James))", "score": 0}
{"id": "folio_validation_139", "prediction": "James'favoriteSeason IsFall(i) & -IsFall(x))", "score": -1}
{"id": "folio_validation_139", "prediction": "James's favoriteSeason(James) & Fall(James))", "score": -1}
{"id": "folio_validation_139", "prediction": "all x.((FavoriteSeason(x) & James(x)) -> Autumn(x))", "score": 0}
{"id": "folio_validation_139", "prediction": "is James's favoriteSeason(James,Fruit)", "score": -1}
{"id": "folio_validation_139", "prediction": "James's favoriteSeason(James,Fall)", "score": -1}
{"id": "folio_validation_139", "prediction": "(James(James) & Fall(James))", "score": 0}
{"id": "folio_validation_139", "prediction": "James's favoriteSeason(James) -> Fall(James))", "score": -1}
{"id": "folio_validation_139", "prediction": "(FavoriteSeason(James) & Fall(James))", "score": 0}
{"id": "folio_validation_139", "prediction": "(FavoriteSeason(James): Fall(James))", "score": -1}
{"id": "folio_validation_139", "prediction": "and James'sFavoriteSeason(James) isFall(James)", "score": -1}
{"id": "folio_validation_140", "prediction": "(FavoriteSeason(Mia,spring))", "score": 0}
{"id": "folio_validation_140", "prediction": "(FavoriteSeason(Mia,Fresh) -> Spring(Mia,Fresh))", "score": 0}
{"id": "folio_validation_140", "prediction": "(FavoriteSeason(Mia) & (Spring(Mia) | Spring(Mia)))", "score": 0}
{"id": "folio_validation_140", "prediction": "all x.((Mia(x) & Spring(x)) -> FavoriteSeason(x))", "score": 0}
{"id": "folio_validation_140", "prediction": "all x.(Mia(x) -> FavoriteSeason(x,spring))", "score": 0}
{"id": "folio_validation_140", "prediction": "(FavoriteSeason(Mia) & Spring(Mia))", "score": 0}
{"id": "folio_validation_140", "prediction": "EmotionalSeason(Mia)", "score": 0}
{"id": "folio_validation_140", "prediction": "all x.(FavoriteSeason(x) -> Spring(x))", "score": 0}
{"id": "folio_validation_140", "prediction": "Mia's favoriteSeason(Mia) & Spring(Mia))", "score": -1}
{"id": "folio_validation_140", "prediction": "Mia's favoriteSeason(Mia,Spring)", "score": -1}
{"id": "folio_validation_140", "prediction": "\"FavoriteSeason(Mia,season) -> Spring\"", "score": 0}
{"id": "folio_validation_140", "prediction": "all x.(MiasFavoriteSeason(x) -> Spring(x))", "score": 0}
{"id": "folio_validation_140", "prediction": "all x.(MiaLovesSpring(x) -> Spring(x))", "score": 0}
{"id": "folio_validation_140", "prediction": "Friend(Mia) -> (FavoriteSeason(Mia,Spring)))", "score": -1}
{"id": "folio_validation_140", "prediction": "\"FavoriteSeason(Mia,spring)\"", "score": -1}
{"id": "folio_validation_140", "prediction": "Mimi's favorite season is spring.", "score": -1}
{"id": "folio_validation_141", "prediction": "all x.(DigitalMedia(x) -> -Analog(x))", "score": 0}
{"id": "folio_validation_141", "prediction": "-exists x.(DigitalMedia(x) & Analog(x))", "score": 0}
{"id": "folio_validation_141", "prediction": "-exists x.(DigitalMedium(x) & Analog(x))", "score": 0}
{"id": "folio_validation_141", "prediction": "all x.(DigitalMedium(x) -> -Analog(x))", "score": 0}
{"id": "folio_validation_141", "prediction": "all x.(DigitalMedia(x) -> -AnalogMedia(x))", "score": 0}
{"id": "folio_validation_141", "prediction": "(-Alley(DigitalMedia) -> Analog(DigitalMedia))", "score": 0}
{"id": "folio_validation_142", "prediction": "all x.(PrintedText(x) -> Analog(x))", "score": 0}
{"id": "folio_validation_143", "prediction": "all x.(StreamingService(x) -> Digital(x))", "score": 0}
{"id": "folio_validation_144", "prediction": "all x.(HardcoverBook(x) -> PrintText(x))", "score": 0}
{"id": "folio_validation_144", "prediction": "all x.((HardcoverBook(x) & PrintText(x)) -> PrintText(x))", "score": 0}
{"id": "folio_validation_144", "prediction": "all x.((Object(x) & HardcoverBook(x)) -> PrintText(x))", "score": 0}
{"id": "folio_validation_144", "prediction": "all x.((HardcoverBook(x) -> PrintText(x))", "score": -1}
{"id": "folio_validation_144", "prediction": "all x.(HardcoverBook(x) -> PrintsText(x))", "score": 0}
{"id": "folio_validation_144", "prediction": "all x.((HardcoverBook(x) & ProductType(x)) -> PrintText(x))", "score": 0}
{"id": "folio_validation_144", "prediction": "all x.(ShearcoverBook(x) -> PrintText(x))", "score": 0}
{"id": "folio_validation_144", "prediction": "all x.((Object(x) & HardcoverBook(x)) -> PressedText(x))", "score": 0}
{"id": "folio_validation_144", "prediction": "all x.((Hardcover(x) & Book(x)) -> PrintText(x))", "score": 0}
{"id": "folio_validation_144", "prediction": "all x.((HardcoverBook(x) -> PrintedText(x))", "score": -1}
{"id": "folio_validation_145", "prediction": "all x.((StreamingService(x) & 1984(x)) -> HardcoverBook(x))", "score": 0}
{"id": "folio_validation_145", "prediction": "all x.(StreamingService(x) -> HardcoverBook(x))", "score": 0}
{"id": "folio_validation_146", "prediction": "1984 isPrintedText(x)", "score": -1}
{"id": "folio_validation_146", "prediction": "1984(Structure) & PrintText(Structure)", "score": 0}
{"id": "folio_validation_146", "prediction": "1984 is printedText(84)", "score": -1}
{"id": "folio_validation_146", "prediction": "1984 is printedText(124)", "score": -1}
{"id": "folio_validation_146", "prediction": "1981 - PrintedText(84))", "score": -1}
{"id": "folio_validation_146", "prediction": "All x.(84(x) -> WrittenText(x))", "score": -1}
{"id": "folio_validation_146", "prediction": "All x.((Alberta(x) & InPrint(x)) -> CanGoTo(x,y))", "score": -1}
{"id": "folio_validation_146", "prediction": "1984 is printedText(x)", "score": -1}
{"id": "folio_validation_146", "prediction": "1984PrintedText(84)", "score": 0}
{"id": "folio_validation_146", "prediction": "all x.((1984(x) & PrintText(x)) -> PrintText(x))", "score": 0}
{"id": "folio_validation_146", "prediction": "(PrintedText(84) & PrintedText( 1984))", "score": 0}
{"id": "folio_validation_146", "prediction": "1984 is printedtext.", "score": -1}
{"id": "folio_validation_146", "prediction": "(PrintableText(84) & Date(84))", "score": 0}
{"id": "folio_validation_147", "prediction": "1984 is StreamingService(x) & MadeOf(x,Of) &.", "score": -1}
{"id": "folio_validation_147", "prediction": "1984 is StreamingService(84)", "score": -1}
{"id": "folio_validation_147", "prediction": "1984 is streamingService(x)", "score": -1}
{"id": "folio_validation_147", "prediction": "All x.(1984.(StreamingService(x) -> AutomaticStreaming(x))", "score": -1}
{"id": "folio_validation_147", "prediction": "1984 is streamingService(1984).", "score": -1}
{"id": "folio_validation_147", "prediction": "1984 is StreamingService(x)", "score": -1}
{"id": "folio_validation_147", "prediction": "1984 is streamingService(84)", "score": -1}
{"id": "folio_validation_147", "prediction": "1984 is streamingService(x) -> StreamingService(x))", "score": -1}
{"id": "folio_validation_147", "prediction": "1984 is a streamingService(x)", "score": -1}
{"id": "folio_validation_147", "prediction": "1984 (StreamingService(x) & BasedOn(x,y))", "score": -1}
{"id": "folio_validation_147", "prediction": "1984 is streamingservice(x)", "score": -1}
{"id": "folio_validation_147", "prediction": "all x.((England(x) & StreamingSocial(x)) -> StreamingService(x))", "score": 0}
{"id": "folio_validation_147", "prediction": "(StreamingService(84) -> Online(84))", "score": 0}
{"id": "folio_validation_148", "prediction": "1984 is notStreamingService(84)", "score": -1}
{"id": "folio_validation_148", "prediction": "StreamingService(84)", "score": 0}
{"id": "folio_validation_148", "prediction": "1984 -StreamingService(84))", "score": -1}
{"id": "folio_validation_148", "prediction": "1984 -StreamingService( 1984)", "score": -1}
{"id": "folio_validation_148", "prediction": "1984 ist keine StreamingService(84)", "score": -1}
{"id": "folio_validation_148", "prediction": "1984 has -StreamingService(84)", "score": -1}
{"id": "folio_validation_148", "prediction": "1984 -StreamingService(84)", "score": -1}
{"id": "folio_validation_148", "prediction": "1984 is notStreamingService(84) -> -StreamingService(84))", "score": -1}
{"id": "folio_validation_148", "prediction": "1985 -StreamingService(84))", "score": -1}
{"id": "folio_validation_148", "prediction": "(StreamingService(84) & -StreamingService(84))", "score": 0}
{"id": "folio_validation_149", "prediction": "all x.(RomanceLanguage(x) -> IndoEuropeanLanguage(x))", "score": 0}
{"id": "folio_validation_149", "prediction": "all x.(Romance(x) -> IndoEuropeanLanguages(x))", "score": 0}
{"id": "folio_validation_149", "prediction": "all x y.((RomanceLanguage(x) & IndoEuropeanLanguage(y)) -> IndonesianLanguage(x))", "score": 0}
{"id": "folio_validation_149", "prediction": "all x.(Romance(x) -> IndoEuropeanLanguage(x))", "score": 0}
{"id": "folio_validation_149", "prediction": "all x.(RacialLanguage(x) -> IndoEuropeanLanguage(x))", "score": 0}
{"id": "folio_validation_149", "prediction": "all x.(RomanceLanguage(x) -> IndoEuropean(x))", "score": 0}
{"id": "folio_validation_149", "prediction": "all x.(RadicalLanguage(x) -> IndoEuropeanLanguage(x))", "score": 0}
{"id": "folio_validation_150", "prediction": "all x.(RomanceLanguage(x) -> LanguageFamily(x))", "score": 0}
{"id": "folio_validation_150", "prediction": "all x.(Romance(x) -> LanguageFamily(x))", "score": 0}
{"id": "folio_validation_150", "prediction": "all x y.((RomanceLanguage(x) & LanguageFamily(y)) -> LanguageFamily(x,y))", "score": 0}
{"id": "folio_validation_150", "prediction": "all x y.((RomanceLanguage(x) & LanguageFamily(y)) -> LanguageFamily(x))", "score": 0}
{"id": "folio_validation_150", "prediction": "all x.(Raindrop(x) -> LanguageFamily(x))", "score": 0}
{"id": "folio_validation_151", "prediction": "all x.((Language(x) & WithinLanguageFamily(x)) -> Relationship(x))", "score": 0}
{"id": "folio_validation_151", "prediction": "all x y.((LanguageFamily(x) & LanguageFamily(y)) -> Related(x,y))", "score": 0}
{"id": "folio_validation_151", "prediction": "all x.(Language(x) -> (LanguageFamily(x) & LanguageFamily(x)))", "score": 0}
{"id": "folio_validation_151", "prediction": "all x y z.((Language(x) & LanguageFamily(y) & LanguageFamily(z)) -> Related(x,y,z))", "score": 0}
{"id": "folio_validation_151", "prediction": "all x y.((Language(x) & LanguageFamily(y)) -> Related(x,y))", "score": 0}
{"id": "folio_validation_151", "prediction": "all x y.((Language(x) & LanguageFamily(y)) -> RelatedTo(x,y))", "score": 0}
{"id": "folio_validation_151", "prediction": "all x.(Language(x) -> Relationship(x))", "score": 0}
{"id": "folio_validation_151", "prediction": "all x y.((Language(x) & LanguageFamily(y)) -> RelatedToEachOther(x,y))", "score": 0}
{"id": "folio_validation_151", "prediction": "all x y z.((Language(x) & LanguageFamily(y) & LanguageFamily(z)) -> RelatedTo(x,y,z))", "score": 0}
{"id": "folio_validation_151", "prediction": "all x.((Language(x) & WithinLanguageFamily(x)) -> Related(x))", "score": 0}
{"id": "folio_validation_151", "prediction": "all x y.((Language(x) & LanguageFamily(y)) -> Relationship(x,y))", "score": 0}
{"id": "folio_validation_151", "prediction": "all x y.((LanguageFamily(x) & LanguageFamily(y)) -> Relative(x,y))", "score": 0}
{"id": "folio_validation_152", "prediction": "(Republican(French,Spanish) & RomanceLanguage(French,Spanish))", "score": 0}
{"id": "folio_validation_152", "prediction": "(RomanceLanguage(french) & RomanceLanguage(spanish))", "score": 0}
{"id": "folio_validation_152", "prediction": "(RacingLanguage(french) & RomanceLanguage(fspanish))", "score": 0}
{"id": "folio_validation_152", "prediction": "(Romance(French) & Romance(Spanish))", "score": 0}
{"id": "folio_validation_152", "prediction": "(RomanceLanguage(French) & RomanceLanguage(Spanish))", "score": 0}
{"id": "folio_validation_152", "prediction": "(RasponicLanguage(French) | RomanceLanguage(Spanish))", "score": 0}
{"id": "folio_validation_152", "prediction": "(RomanceLanguage((FrenchLanguage) | RomanceLanguage(SpanishLanguage))", "score": -1}
{"id": "folio_validation_152", "prediction": "All x y.((French(x) & Spanish(y)) -> RomanceLanguage(x))", "score": -1}
{"id": "folio_validation_152", "prediction": "(Language(French) & Language(Spanish))", "score": 0}
{"id": "folio_validation_153", "prediction": "all x.(German(x) -> RelatedToSpanish(x))", "score": 0}
{"id": "folio_validation_153", "prediction": "(German = Spanish(German))", "score": 0}
{"id": "folio_validation_153", "prediction": "all x y.((Deutsch(x) & Spanish(y)) -> Relationship(x,y))", "score": 0}
{"id": "folio_validation_153", "prediction": "(relativeToSpanish(German,Spanish))", "score": 0}
{"id": "folio_validation_153", "prediction": "all x.(Deutsch(x) -> RelatedToSpanish(x))", "score": 0}
{"id": "folio_validation_153", "prediction": "all x y.((German(x) & Spanish(y)) -> Relationship(x,y))", "score": 0}
{"id": "folio_validation_153", "prediction": "all x.(German(x) -> Spanish(x))", "score": 0}
{"id": "folio_validation_153", "prediction": "All x.(German(x) -> RelatedToSpanish(x))", "score": -1}
{"id": "folio_validation_154", "prediction": "all x.(Basque(x) -> -RelatedToLanguage(x))", "score": 0}
{"id": "folio_validation_154", "prediction": "all x.(Basque(x) -> -RelatedToOtherLanguage(x))", "score": 0}
{"id": "folio_validation_154", "prediction": "all x.(Basque(x) -> -RelatedTo(x,OtherLanguage))", "score": 0}
{"id": "folio_validation_154", "prediction": "all x.(Basque(x) -> -RelatedTo(x,y))", "score": 0}
{"id": "folio_validation_154", "prediction": "(LanguageRelatedFactory(Basque) & -RelatedTo(Basque)))", "score": -1}
{"id": "folio_validation_154", "prediction": "all x.(Basque(x) -> -RelatedToAnyLanguage(x))", "score": 0}
{"id": "folio_validation_154", "prediction": "all x.(Basque(x) -> -relatedToAnyOtherLanguage(x))", "score": 0}
{"id": "folio_validation_154", "prediction": "all x.(Basque(x) -> -exists y.(Language(y) & RelatedTo(x,z))))", "score": -1}
{"id": "folio_validation_154", "prediction": "all x y.((Basque(x) & Language(y)) -> -RelatedTo(x,y))", "score": 0}
{"id": "folio_validation_155", "prediction": "all x.(Basque(x) -> RomanceLanguage(x))", "score": 0}
{"id": "folio_validation_155", "prediction": "(RomanceLanguage(basque) & -RomanceLanguage(basque))", "score": 0}
{"id": "folio_validation_155", "prediction": "(RomanceLanguage(Basque) & RomanceLanguage(Basque))", "score": 0}
{"id": "folio_validation_155", "prediction": "Basque (romanticLanguage)", "score": 0}
{"id": "folio_validation_156", "prediction": "all x.(German(x) -> RomanceLanguage(x))", "score": 0}
{"id": "folio_validation_156", "prediction": "All x.(German(x) -> RomanceLanguage(x))", "score": -1}
{"id": "folio_validation_156", "prediction": "all x.(Deutsch(x) -> RomanceLanguage(x))", "score": 0}
{"id": "folio_validation_156", "prediction": "ALL X.(German(x) -> RomanceLanguage(x))", "score": -1}
{"id": "folio_validation_156", "prediction": "all x.(German(x) -> RomanceLegance(x))", "score": 0}
{"id": "folio_validation_156", "prediction": "German (RomanceLanguage)", "score": 0}
{"id": "folio_validation_156", "prediction": "All x y.((German(x) & RomanceLanguage(x)) -> RomanceLanguage(y))", "score": -1}
{"id": "folio_validation_157", "prediction": "all x.(French(x) -> IndoEuropeanLanguage(x))", "score": 0}
{"id": "folio_validation_157", "prediction": "(IndoEuropeanLanguage(French) & IndoEuropeanLanguage(French))", "score": 0}
{"id": "folio_validation_157", "prediction": "(IndoEuropeanLanguage(French) & IndoEuropeanLanguage(French,French))", "score": 0}
{"id": "folio_validation_157", "prediction": "all x.(French(x) -> (IndoEuropeanLanguage(x) & IndoEuropeanLanguage(x)))", "score": 0}
{"id": "folio_validation_157", "prediction": "All x.((French(x) & IndoEuropeanLanguage(x)) -> FrenchLanguage(x))", "score": -1}
{"id": "folio_validation_157", "prediction": "-IndoeEuropeanLanguage(French)", "score": 0}
{"id": "folio_validation_157", "prediction": "L'IndoEuropeanLanguage(French)", "score": 0}
{"id": "folio_validation_157", "prediction": "all x.(French(x) -> IndoEuropean(x))", "score": 0}
{"id": "folio_validation_157", "prediction": "All x.(French(x) -> IndoEuropeanLanguage(x))", "score": -1}
{"id": "folio_validation_158", "prediction": "all x.(Striker(x) -> (RobertLewandowski(x) & Striker(x)))", "score": 0}
{"id": "folio_validation_158", "prediction": "(Stranger(RobertLewandowski))", "score": 0}
{"id": "folio_validation_158", "prediction": "Robert Lewandowski (*) is a Striker(x))", "score": -1}
{"id": "folio_validation_158", "prediction": "Robert Lewandowski (striker)", "score": -1}
{"id": "folio_validation_158", "prediction": "all x.((RobertLewandowski(x) & Striker(x)) -> Striker(x))", "score": 0}
{"id": "folio_validation_158", "prediction": "all x.(Star(x) -> RobertLewandowski(x))", "score": 1}
{"id": "folio_validation_158", "prediction": "Robert Lewandowski is a striker.", "score": -1}
{"id": "folio_validation_158", "prediction": "all x.(RobertLewandowski(x) -> Striker(x))", "score": 0}
{"id": "folio_validation_158", "prediction": "all x.((RobertLewandowski(x) & Striker(x)) -> Hitman(x))", "score": 0}
{"id": "folio_validation_158", "prediction": "((RobertLewandowski(Robert) & Striker(Robert)) -> Striker(Robert))", "score": 0}
{"id": "folio_validation_158", "prediction": "(Striker(RobertLewandowski)", "score": -1}
{"id": "folio_validation_158", "prediction": "all x.(RogerLewandowski(x) -> Striker(x))", "score": 1}
{"id": "folio_validation_159", "prediction": "all x.(Striker(x) -> SoccerPlayer(x))", "score": 0}
{"id": "folio_validation_159", "prediction": "all x.((Striker(x) & SoccerPlayer(x)) -> Striker(x))", "score": 0}
{"id": "folio_validation_159", "prediction": "(All x.(Striker(x) -> SoccerPlayer(x))", "score": -1}
{"id": "folio_validation_159", "prediction": "[BG] (Striker(s) & SoccerPlayer(s))", "score": -1}
{"id": "folio_validation_160", "prediction": "Robert Lewandowski (left)", "score": -1}
{"id": "folio_validation_160", "prediction": "Robert Lewandowski hat Bayern Munchen verlassen.", "score": -1}
{"id": "folio_validation_160", "prediction": "Robert Lewandowski left Bayern Munchen.", "score": -1}
{"id": "folio_validation_160", "prediction": "Robert Lewandowski - BayernMunchen(Red)", "score": -1}
{"id": "folio_validation_160", "prediction": "(All x.(Lewandowski(x) -> BayernMunchen(x)))", "score": -1}
{"id": "folio_validation_160", "prediction": "All x.((RobertLewandowski(x) & BayernMunchen(x)) -> LeftAbsolute(x))", "score": -1}
{"id": "folio_validation_160", "prediction": "Robert Lewandowski has left Bayern Munchen.", "score": -1}
{"id": "folio_validation_160", "prediction": "(Lewandowski(Robert) left Bayern Munchen(Robert))", "score": -1}
{"id": "folio_validation_160", "prediction": "Robert Lewandowski (left Bayern Munchen)", "score": -1}
{"id": "folio_validation_160", "prediction": "Luis Robert Lewandowski (Rosenland(u) & BayernMunchen(e))", "score": -1}
{"id": "folio_validation_161", "prediction": "[BG] ((Player(x) & LeftTeam(x)) | -PlaysForTeam(x)))", "score": -1}
{"id": "folio_validation_161", "prediction": "all x y.((Player(x) & Team(y) & Left(x,y)) -> NoFootball(x,y))", "score": 0}
{"id": "folio_validation_161", "prediction": "all x y.((Player(x) & Team(y) & LeftTeam(x,y)) -> -PlaysFor(x,y))", "score": 0}
{"id": "folio_validation_161", "prediction": "all x y.((Player(x) & Team(y) & Leaves(x,y)) -> -PlayFor(x,y))", "score": 0}
{"id": "folio_validation_161", "prediction": "all x.((PlayerLeavesTeam(x)) -> -PlayForTeam(x))", "score": 0}
{"id": "folio_validation_161", "prediction": "all x y.((Player(x) & Team(y) & Left(x,y)) -> -Play(x,y))", "score": 0}
{"id": "folio_validation_161", "prediction": "all x y.((Player(x) & Team(y) & Leaves(x,y)) -> -PlaysFor(x,y))", "score": 0}
{"id": "folio_validation_161", "prediction": "all x y.((Player(x) & Team(y) & Left(x,y)) -> -PlayFor(x,y))", "score": 0}
{"id": "folio_validation_161", "prediction": "all x y.((Player(x) & Team(y) & Left(x,y)) -> UnnecessarilyPlaysFor(x,y))", "score": 0}
{"id": "folio_validation_161", "prediction": "all x y z.((Player(x) & Team(y) & Team(z) & Leaves(x,y)) -> -Plays(x,z))", "score": 0}
{"id": "folio_validation_161", "prediction": "all x y.((Player(x) & Team(y) & Left(x,y)) -> -PlaysFor(x,y))", "score": 0}
{"id": "folio_validation_161", "prediction": "all x y.((Player(x) & Team(y) & Leaved(x,y)) -> -PlayFor(x,y))", "score": 0}
{"id": "folio_validation_161", "prediction": "all x y.((Player(x) & Team(y) & Leaved(x,y)) -> NoPlayFor(x,y))", "score": 0}
{"id": "folio_validation_161", "prediction": "[BG] – All x.((Player(x) & LeftTeam(x)) -> -PlaysForTeam(x))", "score": -1}
{"id": "folio_validation_161", "prediction": "all x y z.((Player(x) & Team(y) & Teams(z) & Leaved(x,y) & PlaysFor(x,z)) -> -PlaysFor(x,y,z))", "score": 0}
{"id": "folio_validation_162", "prediction": "(SoccerPlayer(RobertLewandowski)", "score": -1}
{"id": "folio_validation_162", "prediction": "(SportsPlayer(RobertLewandowski) & PlaysSoccer(RobertLewandowski,2))", "score": 0}
{"id": "folio_validation_162", "prediction": "RobertLewandowski(x) & SoccerPlayer(x))", "score": -1}
{"id": "folio_validation_162", "prediction": "Robert Lewandowski (SoccerPlayer)", "score": -1}
{"id": "folio_validation_162", "prediction": "all x.(SoccerPlayer(x) -> RobertLewandowski(x))", "score": 0}
{"id": "folio_validation_162", "prediction": "all x.((RobertLewandowski(x) & SoccerPlayer(x)) -> Plays(x,y))", "score": 0}
{"id": "folio_validation_162", "prediction": "All x.((RobertLewandowski(x) & SoccerPlayer(x)) -> Performs(x,y))", "score": -1}
{"id": "folio_validation_162", "prediction": "Robert Lewandowski(RobertLewandowski) is a soccer player.", "score": -1}
{"id": "folio_validation_162", "prediction": "Robert Lewandowski (RedByNathanLowand(R) & SoccerPlayer(R))", "score": -1}
{"id": "folio_validation_162", "prediction": "Robert Lewandowski is a soccer player.", "score": -1}
{"id": "folio_validation_162", "prediction": "exists x.(SoccerPlayer(x) & RobertLewandowski(x))", "score": 0}
{"id": "folio_validation_162", "prediction": "Robert Lewandowski (RobertLewandowski) is a soccer player.", "score": -1}
{"id": "folio_validation_162", "prediction": "all x.((RobertLewandowski(x) & FootballPlayer(x)) -> Plays(x,Soccer))", "score": 0}
{"id": "folio_validation_162", "prediction": "all x.(RobertLewandowski(x) -> SoccerPlayer(x))", "score": 1}
{"id": "folio_validation_162", "prediction": "(SoccerPlayer(RobertLewandowski) & Plays(RobertLewandowski))", "score": 0}
{"id": "folio_validation_163", "prediction": "Robert Lewandowski plays for Bayern Munchen.", "score": -1}
{"id": "folio_validation_163", "prediction": "Robert Lewandowski (PlaysForChamberbalMunchen)", "score": -1}
{"id": "folio_validation_163", "prediction": "(PlaysFor(RobertLewandowski,Bundesliga))", "score": 0}
{"id": "folio_validation_163", "prediction": "all x.(RobertLewandowski(x) -> (PlaysForBayern(x) | PlaysFaith(x)))", "score": 0}
{"id": "folio_validation_163", "prediction": "All x y.((RobertLewandowski(x) & BayernMunchen(y)) -> Plays(x,y))", "score": -1}
{"id": "folio_validation_163", "prediction": "Robert Lewandowski (born on December 16, 1984) & OperatesForBundesligaMunchen(RobertLewandowski))", "score": -1}
{"id": "folio_validation_163", "prediction": "PlaysForBalfourMunchen.", "score": -1}
{"id": "folio_validation_163", "prediction": "Robert Lewandowski (Member(RobertLewandowski) & PlaysPa.BundesligaMunchen(RobertLewandowski))", "score": -1}
{"id": "folio_validation_163", "prediction": "(PlaysFor(RobertLewandowski) & Bayern Munchen(RobertLewandowski))", "score": -1}
{"id": "folio_validation_163", "prediction": "all x.(Lewandowski(x) -> PlaysFor(x,Bundesliga&Munchen))", "score": -1}
{"id": "folio_validation_163", "prediction": "(Plays(RobertLewandowski,BayernMunchen, Bayern))", "score": 0}
{"id": "folio_validation_164", "prediction": "all x.(RobertLowendowski(x) -> Star(x))", "score": 0}
{"id": "folio_validation_164", "prediction": "all x.((RobertLewandowski(x) & Star(x)) -> (Ecstatic(x) | Star(x)))", "score": 0}
{"id": "folio_validation_164", "prediction": "(Star(RobertLewandowski)", "score": -1}
{"id": "folio_validation_164", "prediction": "all x.((RobertLewandowski(x) & Star(x)) -> Star(x))", "score": 0}
{"id": "folio_validation_164", "prediction": "all x.(Star(x) -> (RobertLewandowski(x) & Star(x)))", "score": 0}
{"id": "folio_validation_164", "prediction": "stars.Stern(RobertLewandowski)", "score": -1}
{"id": "folio_validation_164", "prediction": "all x.((RobertLéwandowski(x) & Star(x)) -> Star(x))", "score": 0}
{"id": "folio_validation_164", "prediction": "Robert (Lewandowski) & Star(x))", "score": -1}
{"id": "folio_validation_165", "prediction": "all x.(Billings(x) -> (City(x) & InMontana(x)))", "score": 0}
{"id": "folio_validation_165", "prediction": "(CityInMontana(billings) & CityInMontana(billings,MT))", "score": 0}
{"id": "folio_validation_165", "prediction": "all x.(Billings(x) -> CityInMontana(x))", "score": 0}
{"id": "folio_validation_165", "prediction": "(City(Billings) & Montana(Billings))", "score": 0}
{"id": "folio_validation_165", "prediction": "City(Billings,Merlin)", "score": 0}
{"id": "folio_validation_165", "prediction": "(MadLandstate(Billings) -> City(Billings))", "score": 0}
{"id": "folio_validation_165", "prediction": "(Billings(Billings) | BillingsCity(Billings)))", "score": -1}
{"id": "folio_validation_165", "prediction": "Billings (MountainCity(Billings))", "score": 0}
{"id": "folio_validation_165", "prediction": "all x.(Billings(x) -> MontanaCity(x))", "score": 0}
{"id": "folio_validation_165", "prediction": "((City(Billings) & InMall State(Billings)) | -StaysInMontana(Billings)))", "score": -1}
{"id": "folio_validation_165", "prediction": "(City(Billings) & InMontana(Billings))", "score": 0}
{"id": "folio_validation_165", "prediction": "all x y.((Billings(x) & Montana(y)) -> City(x,y))", "score": 0}
{"id": "folio_validation_165", "prediction": "Billings, Montana (City(billings) & InMalligan(billings))", "score": -1}
{"id": "folio_validation_166", "prediction": "(Mountain(Montana) & Associates(Montana,Butte,Holenia,Missoula))", "score": 0}
{"id": "folio_validation_166", "prediction": "(MazedoniaCity(Mountain) -> (ButteCity(Mountain) | HelenaCity(Mountain) | MissoulaCity(Mountain)))", "score": 0}
{"id": "folio_validation_166", "prediction": "(InBoston( Montana) -> (Butte(Montana) | Helena(Montana) | Missoula(Missoula)))", "score": 0}
{"id": "folio_validation_166", "prediction": "(all x.((Montana(x) & Butte(x)) | (Hella(x) | Missoula(x)))) | ((Butte(x) & Helena(x)) & Missoula(x)))", "score": -1}
{"id": "folio_validation_166", "prediction": "(City(Montana) & Butte(Montana) & Helena(Montana) & Missoula(Montana))", "score": 0}
{"id": "folio_validation_166", "prediction": "all x.((Mountain(x) & Butte(x) & Helena(x) & Missoula(x)) -> Includes(x,y))", "score": 0}
{"id": "folio_validation_166", "prediction": "(InGuamanda(Mountain(Mountain) & (Butte(Mountain) | Helena(Mountain) | Missoula(Mountain)))", "score": -1}
{"id": "folio_validation_166", "prediction": "((Montana(Montana) & Butte(Montana) & Helena(Montana) & Missoula(Montana)) -> Includes(MontanaCity(Montana))", "score": -1}
{"id": "folio_validation_166", "prediction": "(And).(Butte(m) | Helena(m) | Missoula(m)))", "score": -1}
{"id": "folio_validation_166", "prediction": "(Montana(Madrid) & HoweverTe(Mountain) & Helena(Mountain,Mountain))", "score": 0}
{"id": "folio_validation_166", "prediction": "(all x y.((Mountain(x) & City(y)) -> Butte(y)) & ((Mountain(y) & City(y)) -> Helena(y)) & ((Mountain(y) & City(y)) -> Missoula(y)))", "score": 0}
{"id": "folio_validation_166", "prediction": "(InMerlin(Merlin) & ButteChinese(Merlin) & HelenaChinese(Merlin))", "score": 0}
{"id": "folio_validation_166", "prediction": "(InMalo(MTStatement(MTS) -> (Butte(MT) | Helena(MT) | Missoula(MT)))", "score": -1}
{"id": "folio_validation_166", "prediction": "(Stockton(Mountain) -> (Between(Mountain) | (Helena(Mountain) | Missoula(Mountain)))))", "score": -1}
{"id": "folio_validation_166", "prediction": "((Montana(montana) & Butte(montana) & Helena(montana) & Missoula(montana)) -> Includes(montana))", "score": 0}
{"id": "folio_validation_166", "prediction": "((Montana(Montana) & Butte(n) & Helena(n)) & Missoula(n))", "score": 0}
{"id": "folio_validation_167", "prediction": "(SameState(WhiteSulphurSprings) & SameState(Butte))", "score": 0}
{"id": "folio_validation_167", "prediction": "(SameState(WhiteSulphurSprings(Butte) & State(Butte))", "score": -1}
{"id": "folio_validation_167", "prediction": "(SameState(WhiteSulphur Springs) & SameState(Butte))", "score": -1}
{"id": "folio_validation_167", "prediction": "(EqualWeather(WhiteSulphurSprings) & EqualWeather(Butte))", "score": 0}
{"id": "folio_validation_167", "prediction": "(Map(WhiteSulphurSpreads) & Zip(Butte))", "score": 0}
{"id": "folio_validation_167", "prediction": "((WhiteSulphurSprings(White) & Butte(But)) -> CitiesInSameState(WhiteSulphurSprings(White))", "score": -1}
{"id": "folio_validation_167", "prediction": "(City(WhiteSulphurSprings) & City(Butte) & City(WhiteSulphurSprings))", "score": 0}
{"id": "folio_validation_167", "prediction": "WhiteSulphurSprings(x) & Butte(x))", "score": -1}
{"id": "folio_validation_167", "prediction": "(InSameState(WhiteSulphurSprings) & InSameState(Butte))", "score": 0}
{"id": "folio_validation_167", "prediction": "(WhiteSulphurSprings(WoodySulphur(w) & Butte(w))", "score": -1}
{"id": "folio_validation_167", "prediction": "((WhiteSulphurSprings(White) & Butte(Butte)) -> State(White))", "score": 0}
{"id": "folio_validation_167", "prediction": "(Stars(WhiteSulphurSprings) & Stars(Butte))", "score": 0}
{"id": "folio_validation_167", "prediction": "(Boundary(WhiteSulphurSprings) & City(Butte))", "score": 0}
{"id": "folio_validation_168", "prediction": "-Mtn(Landing(Pierre-Montana)", "score": -1}
{"id": "folio_validation_168", "prediction": "-(City(Pierre) & LocatedIn(Pierre,MT))", "score": 0}
{"id": "folio_validation_168", "prediction": "(-Montana(City,Pierre))", "score": 0}
{"id": "folio_validation_168", "prediction": "(-InMontana(CityPress.Page(City,Pierre))", "score": -1}
{"id": "folio_validation_168", "prediction": "(-Mallonet(Pierre))", "score": 0}
{"id": "folio_validation_168", "prediction": "(-Marshall(City(Pierre) & Location-Mexican(Pierre))", "score": -1}
{"id": "folio_validation_168", "prediction": "is located in Montana.", "score": -1}
{"id": "folio_validation_168", "prediction": "(-In(City(Pile) & Montana(Pierre))", "score": -1}
{"id": "folio_validation_168", "prediction": "La Cité-dePrête-Montana(p) & -InMontana(p))", "score": -1}
{"id": "folio_validation_168", "prediction": "-InMontana(Pierre)", "score": 0}
{"id": "folio_validation_168", "prediction": "(-Malison(City) & Pierre(City))", "score": 0}
{"id": "folio_validation_168", "prediction": "La ville de Pierre n'est pas en Montana.", "score": -1}
{"id": "folio_validation_168", "prediction": "The city of Pierre -InMountainStones(Pierre)", "score": -1}
{"id": "folio_validation_168", "prediction": "-(City(Pierre) & Montana(Pierre))", "score": 0}
{"id": "folio_validation_168", "prediction": "(-Malligan(City(City(City) & Pierre.Has(City)))", "score": -1}
{"id": "folio_validation_168", "prediction": "-(City(Pierre) & InMontana(Pierre))", "score": 0}
{"id": "folio_validation_169", "prediction": "all x.((City(x) & Butte(x)) -> -Pierre(x))", "score": 0}
{"id": "folio_validation_169", "prediction": "all x.((City(x) & -InButte(x)) -> -InPierre(x))", "score": 0}
{"id": "folio_validation_169", "prediction": "all x.((City(x) & NoCityInButte(x)) -> -Pierre(x))", "score": 0}
{"id": "folio_validation_169", "prediction": "all x.(City(x) -> CannotBeInPierre(x))", "score": 0}
{"id": "folio_validation_169", "prediction": "all x.(City(x) -> -InPitte(x))", "score": 0}
{"id": "folio_validation_169", "prediction": "all x.((City(x) & InButte(x)) -> -Pierce(x))", "score": 0}
{"id": "folio_validation_169", "prediction": "all x.((City(x) & InButte(x)) -> -InPierre(x))", "score": 0}
{"id": "folio_validation_169", "prediction": "all x.((City(x) & -Pierre(x)) -> Butte(x))", "score": 0}
{"id": "folio_validation_169", "prediction": "all x.((CityInButte(x) & -Pierre(x)) -> NotInButte(x))", "score": 0}
{"id": "folio_validation_169", "prediction": "all x.(City(x) -> -InPierce(x))", "score": 0}
{"id": "folio_validation_169", "prediction": "all x.((City(x) & LocatedInButte(x)) -> -InPitreau(x))", "score": 0}
{"id": "folio_validation_169", "prediction": "all x.(ButteCity(x) -> -Pierre(x))", "score": 0}
{"id": "folio_validation_169", "prediction": "all x.((City(x) & Butte(x)) -> -InPitreau(x))", "score": 0}
{"id": "folio_validation_169", "prediction": "all x.((City(x) & Butte(x)) -> -InPierre(x))", "score": 0}
{"id": "folio_validation_170", "prediction": "(SameState(Butte,City) & SameZone(Pierre,City))", "score": 0}
{"id": "folio_validation_170", "prediction": "in the same state as butte and piercings.", "score": -1}
{"id": "folio_validation_170", "prediction": "Butte & Pierre & StateMajor(s)", "score": 0}
{"id": "folio_validation_170", "prediction": "Butte and Pierre, respectively, live in the same State.", "score": -1}
{"id": "folio_validation_170", "prediction": "Butte and Pierre(Peter) are in SameState(Peter,Pitre,Simulation).", "score": -1}
{"id": "folio_validation_170", "prediction": "Both Castles(,)", "score": -1}
{"id": "folio_validation_170", "prediction": "(Laws.(Butte(H) | Laws(Pierce)))", "score": -1}
{"id": "folio_validation_170", "prediction": "(SameState(MostTide,Butte) & SameState(MostPierce))", "score": 0}
{"id": "folio_validation_170", "prediction": "(SameState(Butte,Pierce) & SameState(Butte,Pierce))", "score": 0}
{"id": "folio_validation_170", "prediction": "(SameState(Butte) & SameState(Pierre))", "score": 0}
{"id": "folio_validation_170", "prediction": "They are both i.e.Tats(i) & State(i) & Butte(i) & Pierre(i))", "score": -1}
{"id": "folio_validation_170", "prediction": "(SameState(Butte,Pierce) & SameState(Pierce,Butte))", "score": 0}
{"id": "folio_validation_170", "prediction": "Butte and Pierre.(State(x))", "score": -1}
{"id": "folio_validation_170", "prediction": "(SameState(Butte,Pierce))", "score": 0}
{"id": "folio_validation_170", "prediction": "(SameState(Butte,1) & SameState(Pierre,2))", "score": 0}
{"id": "folio_validation_171", "prediction": "(SameState(Pierre,Bismarck))", "score": 0}
{"id": "folio_validation_171", "prediction": "(AtSameState(Pierre,BetweenState(Bismarck,Pierre))", "score": -1}
{"id": "folio_validation_171", "prediction": "(SameState(Pierce) & SameState(Bismarck))", "score": 0}
{"id": "folio_validation_171", "prediction": "all x.((Ding(x) & State(x,Y)) -> (Pierre(y) | Bismarck(y)))", "score": 0}
{"id": "folio_validation_171", "prediction": "(SoundState(Pierre,Bismarck))", "score": 0}
{"id": "folio_validation_171", "prediction": "all x.((Pierce(x) | Bismarck(x)) -> SameState(x))", "score": 0}
{"id": "folio_validation_171", "prediction": "(SameState(Pierre,bismarck))", "score": 0}
{"id": "folio_validation_171", "prediction": "(Pierce(Pierre) | Bismarck(Bismarck)))", "score": -1}
{"id": "folio_validation_171", "prediction": "all x.((Pierre(x) | Bismarck(x)) -> SameState(x))", "score": 0}
{"id": "folio_validation_171", "prediction": "-(State(Pierre) & State(Bismarck))", "score": 0}
{"id": "folio_validation_171", "prediction": "(SameState(Pierre) & SameState(Bismarck))", "score": 0}
{"id": "folio_validation_171", "prediction": "(SameState(Pierre,bismarck) & SameState(Pierre,bismarck))", "score": 0}
{"id": "folio_validation_171", "prediction": "(SameState(Pierre,Romeo) & SameState(Bismarck))", "score": 0}
{"id": "folio_validation_171", "prediction": "(SameState(Pierre) & SameState(Bimmarck))", "score": 0}
{"id": "folio_validation_171", "prediction": "(SameState(Pierce,Syracuse) & SameState(Bismarck))", "score": 0}
{"id": "folio_validation_171", "prediction": "(EqualState(Pierre,Bismarck))", "score": 0}
{"id": "folio_validation_172", "prediction": "(all x.(Montana(x) -> HomeToMissoula(x)))", "score": 0}
{"id": "folio_validation_172", "prediction": "(Missoula(Montana) -> HomeTo(Montana))", "score": 0}
{"id": "folio_validation_172", "prediction": "Located in the State(Montana) & Missoula(Missoula)", "score": -1}
{"id": "folio_validation_172", "prediction": "all x.((Montana(x) & City(y)) -> HomeTo(x,y))", "score": 0}
{"id": "folio_validation_172", "prediction": "all x.(Mission(x) y.(Mission(y) & InMontana(x,y)))", "score": -1}
{"id": "folio_validation_172", "prediction": "(HomeToMissoula(Mountain))", "score": 0}
{"id": "folio_validation_172", "prediction": "(StormLandlord(Missoula) & Home(Montana))", "score": 0}
{"id": "folio_validation_172", "prediction": "all x.(Mountain(x) -> HomeTo(x,Missoula))", "score": 0}
{"id": "folio_validation_172", "prediction": "all x.(Montana(x) -> HomeToMisoulaCity(x))", "score": 0}
{"id": "folio_validation_172", "prediction": "all x.((Mountain(x) & City(y) & Missoula(z)) -> HomeTo(x,y,z))", "score": 0}
{"id": "folio_validation_172", "prediction": "(HomeTo(Montana) & Missoula(Montana))", "score": 0}
{"id": "folio_validation_172", "prediction": "(State(Montana) & City(Missoula))", "score": 0}
{"id": "folio_validation_172", "prediction": "all x.(Boat(x) -> City(x,Missoula))", "score": 0}
{"id": "folio_validation_172", "prediction": "(Houses(Montana,Missoula) & LocatedIn(Montana,Mispoula))", "score": 0}
{"id": "folio_validation_172", "prediction": "all x.((Montana(x) & City(y)) -> Missoula(x))", "score": 0}
{"id": "folio_validation_172", "prediction": "all x.(Mountain(x) -> Home(x,Missoula))", "score": 0}
{"id": "folio_validation_173", "prediction": "all x y.((InternationalStudent(x) & InU.S.(x,y)) -> (HasF1Visa(x) | HasJ1Visa(x)))", "score": -1}
{"id": "folio_validation_173", "prediction": "all x.(InternationalStudent(x) -> (HasF1Visa(x) | HasJ1Visa(x)))", "score": 0}
{"id": "folio_validation_173", "prediction": "all x.((InternationalStudent(x) & InUSA(x)) -> (HasF1Via(x) | HasJ1Vasa(x)))", "score": 0}
{"id": "folio_validation_173", "prediction": "all x y.((InternationalStudent(x) & Student(y)) -> (HasF1Visa(x,y) | HasJ1Visa(x,y)))", "score": 0}
{"id": "folio_validation_173", "prediction": "all x.((InternationalStudent(x) & InUS(x)) -> (F1visa(x) | J1visa(x)))", "score": 0}
{"id": "folio_validation_173", "prediction": "all x.((InternationalStudent(x) & InState(x,US) & -F1Visa(x) & -J1Visa(x)) -> InternationalStudentInUS(x))", "score": 0}
{"id": "folio_validation_173", "prediction": "all x.((InternationalStudent(x) & In(x,US)) -> (HasF1Visa(x) | HasJ1Visa(x)))", "score": 0}
{"id": "folio_validation_173", "prediction": "all x.((InternalStudent(x) & InUS(x)) -> (F1Visa(x) | J1Visa(x)))", "score": 0}
{"id": "folio_validation_173", "prediction": "all x.([InternationalStudent(x) & InU.S.(Fone(x) | Jones(x))) -> (HasVisa(x,F1) | HasVisa(x,J1)))", "score": -1}
{"id": "folio_validation_173", "prediction": "all x.((InternationalStudent(x) & InU.S.(x) & (F1Visa(x) | J1Visa(x))) -> Visits(x,))", "score": -1}
{"id": "folio_validation_173", "prediction": "all x.(InternationalStudent(x) -> (Has(x,F1) | Has(x,J1)))", "score": 0}
{"id": "folio_validation_174", "prediction": "all x.((InternationalStudent(x) & InUS(x) & HasF1Visa(x)) -> (ApplicationForCPT(x) | APPForOPT(x)))", "score": 0}
{"id": "folio_validation_174", "prediction": "all x.((InternationalStudent(x) & InU.S.A.(x,f1) & HasF1Visa(x)) -> (ApplicationForCPT(x) | ApplicationForOPT(x)))", "score": -1}
{"id": "folio_validation_174", "prediction": "all x.((InternationalStudent(x) & InUS(x) & HasF1Visa(x)) -> (ApplicationForCPT(x) | ApplicationForOPT(x)))", "score": 0}
{"id": "folio_validation_174", "prediction": "all x y.((InternationalStudent(x) & InternationalStudent(y) & USF1Visa(x) & (CPT/POTA) | OPT(x))) -> WantsToWorkInUS(y))", "score": -1}
{"id": "folio_validation_174", "prediction": "all x.((InternationalStudent(x) & InUS(x) & HasF1Visa(x)) -> (AppliesForCPT(x) | AppliesForOPT(x)))", "score": 0}
{"id": "folio_validation_174", "prediction": "all x y z.((InternationalStudentInU.S.(x) & US(y) & Visa(z) & F1(z) & WorkInU.S.(y))) -> (AppliesForCPT(x,y) | AppliesForOPT(x,z))))", "score": -1}
{"id": "folio_validation_174", "prediction": "all x y.((InternationalStudent(x) & InUS(x,y) & HasF1Visa(x)) -> (ApplicationFor(x,y) & (WorksInUS(x,y) | WorksInUS(x,y))))", "score": 0}
{"id": "folio_validation_174", "prediction": "all x.((InternationalStudent(x) & InTheU.S.WithF1Visa(x) & WantsToWorkIn(x,US)) -> NeedsToApply(x))", "score": -1}
{"id": "folio_validation_174", "prediction": "all x.((InternationalStudent(x) & (F1) Visa(x) | OPT(x)) & (WantsToWorkInUS(x) | WantsToWorkInUS(x))) -> NeedsApplicationFor(x,CPT))", "score": -1}
{"id": "folio_validation_174", "prediction": "all x.((InternationalStudent(x) & USF1Visa(x) & (ApplicationForCPT(x) | ApplicationForOPT(x))) -> WantsToWorkInUS(x))", "score": 0}
{"id": "folio_validation_174", "prediction": "all x.((InternationalStudent(x) & InUS(x) & HasF1Visa(x) & (HasCPT(x) | HasOPT(x))) -> NeedsApplyFor(x,CPT))", "score": 0}
{"id": "folio_validation_174", "prediction": "all x y.((InternalStudent(x) & (President(y) & International(y) & HasF1Visa(x)) & (ProvidesCPT(x,y) | CreatesOPT(x,y))) -> WantsWorkInUS(x))", "score": 0}
{"id": "folio_validation_174", "prediction": "all x.((Student(x) & Internamental(x) & InUS(x) & HasF1Visa(x)) -> (CanApplicationForCPT(x) | CanApplicationForOPT(x)))", "score": 0}
{"id": "folio_validation_174", "prediction": "all x y.((InternationalStudent(x) & InUS(x,y) & HasF1Visa(x)) -> (AppliesForFPT(x,y) | AppliesForOPT(x,y)))", "score": 0}
{"id": "folio_validation_175", "prediction": "all x.((MIke(x) & InternationalStudent(x)) -> Is(x,y))", "score": 0}
{"id": "folio_validation_175", "prediction": "(InternationalStudent(Mike)", "score": -1}
{"id": "folio_validation_175", "prediction": "Mike is InternationalStudent(Mike)", "score": -1}
{"id": "folio_validation_175", "prediction": "Mike is InternationalStudent.", "score": -1}
{"id": "folio_validation_175", "prediction": "ist international student(Mike)", "score": -1}
{"id": "folio_validation_175", "prediction": "Mike is an international student.", "score": -1}
{"id": "folio_validation_175", "prediction": "Mike is international student.", "score": -1}
{"id": "folio_validation_175", "prediction": "MeetsInternationalStudent(Mike)", "score": 0}
{"id": "folio_validation_175", "prediction": "Posted on LinkedIn(Mike,InternationalStudent)", "score": -1}
{"id": "folio_validation_175", "prediction": "is InternationalStudent(Michael)", "score": -1}
{"id": "folio_validation_175", "prediction": "Mike ist internationalstudent(Mike)", "score": -1}
{"id": "folio_validation_175", "prediction": "Mike is internationalstudent.", "score": -1}
{"id": "folio_validation_176", "prediction": "all x.(NeedsApplicationForChapter(x,i,us) -> WantsToWork(x,us))", "score": 0}
{"id": "folio_validation_176", "prediction": "all x.((Mike(x) & WillWorkInUS(x)) -> NeedsForCPT(x))", "score": 0}
{"id": "folio_validation_176", "prediction": "all x.((Mike(x) & WantsToWorkInTheUS(x)) -> NeedsApplyForCPT(x))", "score": 0}
{"id": "folio_validation_176", "prediction": "all x.((CanWorkInUS(x) & AppliesForCPT(x)) -> NeedsToWorkInUS(x))", "score": 0}
{"id": "folio_validation_176", "prediction": "all x.((WorksInTheU.S.A.(Mike) & ApplicationsForCPT(Mike,Pty)) -> NeedsToApply(Mike,Pty))", "score": -1}
{"id": "folio_validation_176", "prediction": "all x.((Mike(x) & WorkInUsers(x)) -> NeedsCPT(x))", "score": 0}
{"id": "folio_validation_176", "prediction": "everything x.(WorksInU.S.((Treaty(x) & MikeWants(x)) -> NeedsCPT(x))", "score": -1}
{"id": "folio_validation_176", "prediction": "all x.((Mike(x) & WonInUS(x)) -> NeedsCPT(x))", "score": 0}
{"id": "folio_validation_176", "prediction": "all x.((Mike(x) & WorkNecessaryForCPT(x) & WantsInU.S.A.(MikeHas(x)) -> NeedsCPT(x)))", "score": -1}
{"id": "folio_validation_176", "prediction": "all x.((Mike(x) & WillWorkInUS(x)) -> NeedsCPTA(x))", "score": 0}
{"id": "folio_validation_176", "prediction": "all x.(WorksIn(x,US) -> NeedsCPT(x))", "score": 0}
{"id": "folio_validation_176", "prediction": "all x.((Kim(x) & WantsToWorkInUS(x)) -> NeedsCPT(x))", "score": 0}
{"id": "folio_validation_176", "prediction": "all x.((WorkingInU.S.A.Mike(x) & CPT(x)) -> NeedsApplication(x))", "score": -1}
{"id": "folio_validation_176", "prediction": "all x.((Mike(x) & WorkIn(x,US)) -> NeedsCPTA(x))", "score": 0}
{"id": "folio_validation_176", "prediction": "all x.((Mike(x) & WantsWorkFor(x,US)) -> NeedsCPT(x))", "score": 0}
{"id": "folio_validation_176", "prediction": "all x.((Mike(x) & WantsWorkInUS(x)) -> NeedsToApplyForCPT(x))", "score": 0}
{"id": "folio_validation_177", "prediction": "(HasVisa(Mike) & Flying(Mike))", "score": 0}
{"id": "folio_validation_177", "prediction": "all x.(Mike(x) -> HasVisa(x,1))", "score": 0}
{"id": "folio_validation_177", "prediction": "Mike is in possession of the visa.", "score": -1}
{"id": "folio_validation_177", "prediction": "Mike has F1Visa(Mike)", "score": -1}
{"id": "folio_validation_177", "prediction": "(HasVisa(Mike,F1))", "score": 0}
{"id": "folio_validation_177", "prediction": "Mike has an F1Visa(Mike,03)", "score": -1}
{"id": "folio_validation_177", "prediction": "is a Registered(Mike) & FR1Visa(Mike))", "score": -1}
{"id": "folio_validation_177", "prediction": "all x.(Mike(x) -> HasF1Visa(x))", "score": 0}
{"id": "folio_validation_177", "prediction": "Mike has a F1Visa(Mike).", "score": -1}
{"id": "folio_validation_177", "prediction": "Mike has an F1Visa(Mike)", "score": -1}
{"id": "folio_validation_177", "prediction": "-HasVisa(Mike,F1)", "score": 0}
{"id": "folio_validation_177", "prediction": "MikeHas(Mike,F1Visa)", "score": 0}
{"id": "folio_validation_177", "prediction": "Exists x.(Mike(x) & HasF1Visa(x))", "score": -1}
{"id": "folio_validation_177", "prediction": "-exists x.(Mike(x) & HasF1Visa(x))", "score": 0}
{"id": "folio_validation_177", "prediction": "(HasVisa(Mike,F1) & CanPay(Mike,F2))", "score": 0}
{"id": "folio_validation_178", "prediction": "(J1Visa(Mike) & -J1Visa(Mike))", "score": 0}
{"id": "folio_validation_178", "prediction": "all x.(Mike(x) -> HasJ1Visa(x))", "score": 0}
{"id": "folio_validation_178", "prediction": "3) Mike (HasJ1Visa(MiCliff))", "score": -1}
{"id": "folio_validation_178", "prediction": "all x.((Mike(x) & Passport(x,1)) -> HasJ1(x))", "score": 0}
{"id": "folio_validation_178", "prediction": "all x.(Mike(x) -> J1Visa(x))", "score": 0}
{"id": "folio_validation_178", "prediction": "(Jet1Visa(Mike) -> Has(Mike,A),D))", "score": -1}
{"id": "folio_validation_178", "prediction": "all x.(HasJ1Visa(x) -> MikeHasJ1Visa(x))", "score": 0}
{"id": "folio_validation_178", "prediction": "all x.(DraftsJ1Visa(x) -> MikeCareers(x))", "score": 0}
{"id": "folio_validation_179", "prediction": "all x.(Cow(x) -> Bovine(x))", "score": 0}
{"id": "folio_validation_179", "prediction": "all x.(King(x) -> Bovine(x))", "score": 0}
{"id": "folio_validation_180", "prediction": "exists x.(Pet(x) & Cow(x))", "score": 0}
{"id": "folio_validation_180", "prediction": "exists x.(Pet(x) & CowPet(x))", "score": 0}
{"id": "folio_validation_181", "prediction": "all x.((Vine(x) & Domesticated(x)) -> Bovine(x))", "score": 0}
{"id": "folio_validation_181", "prediction": "all x.(Bovine(x) -> Domesticated(x))", "score": 0}
{"id": "folio_validation_181", "prediction": "all x.((Bovine(x) & Domesticated(x)) -> Bovine(x))", "score": 0}
{"id": "folio_validation_181", "prediction": "(Bovine(x) -> Domesticated(x))", "score": 0}
{"id": "folio_validation_182", "prediction": "all x.(DomesticatedAnimal(x) -> -Alligator(x))", "score": 0}
{"id": "folio_validation_182", "prediction": "-all x.(DomesticatedAnimal(x) -> Alligator(x))", "score": 0}
{"id": "folio_validation_182", "prediction": "in all x.(DomesticatedAnimal(x) -> -Alligator(x))", "score": -1}
{"id": "folio_validation_182", "prediction": "-exists x.(DomesticatedAnimal(x) & Alligator(x))", "score": 0}
{"id": "folio_validation_182", "prediction": "-exists x.(DomesticatedAnimal(x) & -Alligator(x))", "score": 0}
{"id": "folio_validation_182", "prediction": "-Alligator(x)", "score": 0}
{"id": "folio_validation_182", "prediction": "-all x.(Domesticated(x) -> Alligator(x))", "score": 0}
{"id": "folio_validation_182", "prediction": "all x.(DomesticatedAnimal(x) -> NoAlligator(x))", "score": 0}
{"id": "folio_validation_183", "prediction": "(Aligator(Ted))", "score": 3}
{"id": "folio_validation_183", "prediction": "Ted is an Aligator(Ted)", "score": -1}
{"id": "folio_validation_183", "prediction": "(Aligator(Ted) -> Aligator(Ted))", "score": 0}
{"id": "folio_validation_183", "prediction": "(Alligator(Ted) & Aligator(Ted))", "score": 0}
{"id": "folio_validation_183", "prediction": "Ted (aligator)", "score": 0}
{"id": "folio_validation_183", "prediction": "all x.((Ted(x) & Aligator(x)) -> Biped(x))", "score": 0}
{"id": "folio_validation_183", "prediction": "(Aligator(Ted) & Living(Ted))", "score": 0}
{"id": "folio_validation_183", "prediction": "Ted is Aligator(Ted)", "score": -1}
{"id": "folio_validation_183", "prediction": "& Aligator(Ted)", "score": -1}
{"id": "folio_validation_183", "prediction": "(Aligator(Ted)", "score": -1}
{"id": "folio_validation_183", "prediction": "Ted ist Aligator(tee)", "score": -1}
{"id": "folio_validation_184", "prediction": "(Pet(Ted) & LivesIn(Ted))", "score": 0}
{"id": "folio_validation_184", "prediction": "exists x.(Ted(x) & Pet(x))", "score": 0}
{"id": "folio_validation_184", "prediction": "(Pet(Ted) -> Pet(Ted))", "score": 0}
{"id": "folio_validation_184", "prediction": "(Pet(Ted) & Pet(Ted))", "score": 0}
{"id": "folio_validation_184", "prediction": "(Pet(Ted) | Dog(Ted)))", "score": -1}
{"id": "folio_validation_184", "prediction": "(Pet(Ted) | Pet(Ted)))", "score": -1}
{"id": "folio_validation_184", "prediction": "(Pet(Ted))", "score": 0}
{"id": "folio_validation_184", "prediction": "(Pet(Ted) & Breed(Ted))", "score": 0}
{"id": "folio_validation_184", "prediction": "all x.(Ted(x) -> Pet(x))", "score": 0}
{"id": "folio_validation_184", "prediction": "(Pet(TenDalton) | Pet(TenDalton)))", "score": -1}
{"id": "folio_validation_185", "prediction": "(Pet(Ted) & Cow(Ted))", "score": 0}
{"id": "folio_validation_185", "prediction": "all x.(Ted(x) -> (Pet(x) & Cow(x)))", "score": 0}
{"id": "folio_validation_185", "prediction": "(Ted(Ted) & InResidence(Ted))", "score": 0}
{"id": "folio_validation_185", "prediction": "(Owl(Ted) | Cow(Ted)))", "score": -1}
{"id": "folio_validation_185", "prediction": "((Ted) & Pet(t)) | Cow(t)))", "score": -1}
{"id": "folio_validation_185", "prediction": "all x y z.(((Ted(x) & Cow(y) & Pet(z)) -> (Pet(x) & Cow(y)))", "score": -1}
{"id": "folio_validation_186", "prediction": "all x.(Cow(x) -> -Pet(x))", "score": 1}
{"id": "folio_validation_186", "prediction": "all x.((Ted(x) & Cow(x)) -> -Pet(x))", "score": 1}
{"id": "folio_validation_186", "prediction": "all x.((Cow(x) & Ted(x)) -> -Pet(x))", "score": 1}
{"id": "folio_validation_186", "prediction": "all x.(Boy(x) -> -Pet(x))", "score": 0}
{"id": "folio_validation_186", "prediction": "all x.((Cow(x) & Ted isPet(x)) -> -Pet(x))", "score": -1}
{"id": "folio_validation_187", "prediction": "Badults (BritishSitcomSeries) & StarsCambridgeSitcomScreens(BritishSitcomSeries))", "score": -1}
{"id": "folio_validation_187", "prediction": "all x y.(Badults(x) -> (BritishSitcomSeries(x) & StarsPappySideshow(x,y)))", "score": 0}
{"id": "folio_validation_187", "prediction": "(Badults(BritishSitcomSeries) & StarsPappySitcom's(BritishSitcomSeries))", "score": 0}
{"id": "folio_validation_187", "prediction": "(Badults) & BritishSitcom(y) & StarsPappys(z))", "score": -1}
{"id": "folio_validation_187", "prediction": "all x y.((Badults(x) & BritishSitcomSeries(x) & Member(y) & PappyStories(x)) -> Stars(x,y))", "score": 0}
{"id": "folio_validation_187", "prediction": "(BritishSitcomSeries(Badults) & StarringPappys(Badults))", "score": 0}
{"id": "folio_validation_187", "prediction": "(WrittenByDoubles(b) & BritishSitcomSeries(b) & StarsPappys(c))", "score": 0}
{"id": "folio_validation_187", "prediction": "all x.(Badults(x) -> (BritishSitcom(x) & StarsPappySims(x)))", "score": 0}
{"id": "folio_validation_187", "prediction": "(UK SitcomSeries(Badults) & StarringPappys(Badults))", "score": -1}
{"id": "folio_validation_187", "prediction": "all x.((SitcomSeries(x) & Sitcom(x)) -> Badults(x))", "score": 0}
{"id": "folio_validation_187", "prediction": "all x.((SitcomSeries(x) & StarsPappys(x)) -> Badults(x))", "score": 0}
{"id": "folio_validation_187", "prediction": "Badults (BritishSitcomSeries) & Stars(BritishSitcomSeries))", "score": -1}
{"id": "folio_validation_187", "prediction": "all x.(Badults(x) -> ((BritishSitcomSeries(x) & StarsPappys(x))))", "score": 0}
{"id": "folio_validation_187", "prediction": "(All x y z.(Badult(x) -> BritishSitcom(y) & PostedIn(x,y)) & Stars(x,z) & Pappy(z)))", "score": -1}
{"id": "folio_validation_187", "prediction": "all x.((Badults(x) & BritishSitcomSeries(x) & StarsPappyStaff(x)) -> StarsSixTasks(x))", "score": 0}
{"id": "folio_validation_187", "prediction": "all x.(Badults(x) -> (BritishSitcomSeries(x) & StarsMembersOfPappys(x)))", "score": 0}
{"id": "folio_validation_188", "prediction": "all x.(Badult(x) -> PilotedInJuly2013(x))", "score": 0}
{"id": "folio_validation_188", "prediction": "all x.(Badult(x) -> Piloted(x,July2013))", "score": 0}
{"id": "folio_validation_188", "prediction": "all x.(Badult(x) -> PilotedInJuly2013OnBBCThree(x))", "score": 0}
{"id": "folio_validation_188", "prediction": "all x y.((Badult(x) & BBCThree(y)) -> PilotedOn(x,y))", "score": 0}
{"id": "folio_validation_188", "prediction": "all x y z.((Badult(x) & BBCThree(y) & July2013(z)) -> PilotedOn(x,y,z))", "score": 0}
{"id": "folio_validation_188", "prediction": "all x y z.((Badult(x) & BBCThree(y) & July2013(z)) -> PilotedPerson(x,y,z))", "score": 0}
{"id": "folio_validation_188", "prediction": "all x.(Badult(x) -> PilotedOnBingo(x,CdTwo))", "score": 0}
{"id": "folio_validation_188", "prediction": "all x.(Badult(x) -> PilotedInJuly(x,Broadcast3))", "score": 0}
{"id": "folio_validation_188", "prediction": "all x y.(Badult(x) -> PilotedOnBroadcast(y,z))", "score": 0}
{"id": "folio_validation_188", "prediction": "all x.(Badult(x) -> PilotedOn(x,BroadcastThree))", "score": 0}
{"id": "folio_validation_188", "prediction": "all x.(Badult(x) -> PilotedOnBroadcast(x,y))", "score": 0}
{"id": "folio_validation_189", "prediction": "All x.(WorkingTitle(x) -> \"WorkingDude(x)\")", "score": -1}
{"id": "folio_validation_189", "prediction": "all x.((Treasury(x) & SecretDude(x)) -> (UsedForBadults(x)))", "score": 0}
{"id": "folio_validation_189", "prediction": "-Limit(WorkingTitle,(BadultSecretDude(City) & UsedForBadult(Cyber))", "score": -1}
{"id": "folio_validation_189", "prediction": "all x.(WorkingTitle(x) & SecretDudeScientific(x)) -> UsedForBadults(x))", "score": -1}
{"id": "folio_validation_189", "prediction": "(WorkingTitle(PartII) & SecretDudeSky (Badults))", "score": 0}
{"id": "folio_validation_189", "prediction": "all x.((WorkingTitle(x) & SecretDude(x)) -> UsedForBadults(x))", "score": 0}
{"id": "folio_validation_189", "prediction": "all x.((WorkingTitle(x) & SecretDudeSociety(x)) -> UsedForBadults(x))", "score": 0}
{"id": "folio_validation_189", "prediction": "All x.(WorkingTitleTheSecretDudeSister(x) -> UsedForBadults(x))", "score": -1}
{"id": "folio_validation_189", "prediction": "all x.(WorkingTitle(x) -> UsedFor(x,Badults))", "score": 0}
{"id": "folio_validation_189", "prediction": "(WorkingTitle“TheSecretDudeSonder Society” is used for Badults)", "score": -1}
{"id": "folio_validation_189", "prediction": "(All x.(Badult(x) -> WorkingTitleBetween(x)))", "score": -1}
{"id": "folio_validation_189", "prediction": "(WorkingTitle,Badults) -> UsedForSecretDudeStaff(Badults))", "score": -1}
{"id": "folio_validation_189", "prediction": "the WorkingTitle \"SecretDudeShow\" used for Badults.", "score": -1}
{"id": "folio_validation_189", "prediction": "WorkingTitle(x,Badults) & UsedFor(x,SecretDudeServe,Badults))", "score": -1}
{"id": "folio_validation_190", "prediction": "(ScriptEditorForBadults(AndrewCollins) & AndrewColbins(Andrew Collins))", "score": -1}
{"id": "folio_validation_190", "prediction": "Andrew Collins was the script editor for Badults. (CruisesCupshots(AndrewCollins,(Andrew Collins))", "score": -1}
{"id": "folio_validation_190", "prediction": "Andrew Collins -ScientistForBadults(x))", "score": -1}
{"id": "folio_validation_190", "prediction": "Andrew Collins, aka TheScriptEditorForBadults(x))", "score": -1}
{"id": "folio_validation_190", "prediction": "Andrew Collins was the script editor for Badults.", "score": -1}
{"id": "folio_validation_190", "prediction": "Andrew Collins was scripteditor for Badults.com.", "score": -1}
{"id": "folio_validation_190", "prediction": "Andrew Collins was the scripteditor for Badults. During his time at Badults.com he edited scripts for each of their Badults.com Badults.com.", "score": -1}
{"id": "folio_validation_190", "prediction": "Andrew Collins (actor(Adult((Adults)) & ScriptEditor(Adults))", "score": -1}
{"id": "folio_validation_190", "prediction": "Andrew Collins (AndreasCollins) is scripteditor(x) & Badults(x))", "score": -1}
{"id": "folio_validation_190", "prediction": "All x y z.((AndrewCollins(x) & Badult(y) & Badult(z)) -> SkriptEditor(x,y,z))", "score": -1}
{"id": "folio_validation_190", "prediction": "Andrew Collins was scripteditor for Badults.com (along with Bill Hagar, Clive Henrich, Gary Cox, and John LaRoche, ed. ).", "score": -1}
{"id": "folio_validation_190", "prediction": "Andrew Collins was the scripteditor for Badults ((AndrewCollins) & Badults(Badults)))", "score": -1}
{"id": "folio_validation_190", "prediction": "Andrew Collins, der scripteditor for Badults(x,Badults) & (BelongsToMother(x,Badults) | (BecomesMother(x_Mother) | BelongsToMother(x,Badults)))))", "score": -1}
{"id": "folio_validation_190", "prediction": "Andrew Collins, cvt. (BadultsDJFat(c) & ScriptEditorFor(c,c))", "score": -1}
{"id": "folio_validation_191", "prediction": "all x.((StoryEditor(x) & Serial(x,y) & SecretDudeSky(y)) -> AndrewCollins(x))", "score": 0}
{"id": "folio_validation_191", "prediction": "(WorkingTitle \"SecretDudeStay\") -> ScriptEditor(AndrewCollins))", "score": -1}
{"id": "folio_validation_191", "prediction": "Andrew Collins was the scripteditor for the series \"The SecretDudeScientist\"\"", "score": -1}
{"id": "folio_validation_191", "prediction": "Andrew Collins was scripteditor for \"The SecretDude Society \".", "score": -1}
{"id": "folio_validation_191", "prediction": "(Scientist(AndrewCollins) & WorkingTitleLayoutSecretDude(AndereenCollins))", "score": 0}
{"id": "folio_validation_191", "prediction": "(StoryEditorForSecretDudeSeries(AndrewCollins) | WritingTitleLayers(AndrewCollins)))", "score": -1}
{"id": "folio_validation_191", "prediction": "(WorkingTitle\" - SecretDudeScientific(c,c,c)) -> AndrewCollins(d))", "score": -1}
{"id": "folio_validation_191", "prediction": "(WrittenEditor(AndrewCollins) & WorkerTitleAt(AndrewCollins,TheSecretDudeShow))", "score": 0}
{"id": "folio_validation_191", "prediction": "(WorkingTitle(AndrewCollins) & ScratchEditor(AndrewCollins))", "score": 0}
{"id": "folio_validation_191", "prediction": "(Underwriter(AndrewColumbus) & WorksOnSecretDudeScientific(AndrewColumbus))", "score": 0}
{"id": "folio_validation_191", "prediction": "(WorkingTitle: SecretDudeSky(c) deLucking(d)) -> Editor(k))", "score": -1}
{"id": "folio_validation_191", "prediction": "(WorkingThought(AndrewCollins) -> WriterFor(AndrewCollins(AndrewCollins))", "score": -1}
{"id": "folio_validation_191", "prediction": "(SkripEditor(AndrewCollins) & ScriptedForSecretDude(Andrew Collins,SecretDudeStatus))", "score": -1}
{"id": "folio_validation_191", "prediction": "Andrew Collins was the script editor for a series with the working title \"The SecretDudeSociety\" (Newspaper): 61-37-2011))", "score": -1}
{"id": "folio_validation_191", "prediction": "(ScreenEditor(AndreasCollins) & WorkingTitle'SecretDudeScientific(AndreasCollins))", "score": 0}
{"id": "folio_validation_191", "prediction": "all x.((AndrewCollins(x) & CreatedScript(x)) -> \"SecretDudeSkys\"\")", "score": 0}
{"id": "folio_validation_192", "prediction": "-exists x.(Pappy's(x) & (HasStarted(x,BP2) | HasStarted(x,Bbc3))))", "score": -1}
{"id": "folio_validation_192", "prediction": "-exists x.(PappysMember(x) & (NoStartsForNight(x) | NoStartsForNewerThan(x,1)))", "score": 0}
{"id": "folio_validation_192", "prediction": "(-exists x.(PappySisters(x) & (BroadcastTwo(x) | BBCThree(x))))", "score": 0}
{"id": "folio_validation_192", "prediction": "all x y.((Pappy(x) & -PappyShow(y)) -> (Started(x,y) & -Started(x,y)))", "score": 0}
{"id": "folio_validation_192", "prediction": "all x.((Member(x) & Pappys(x)) -> (NoneStartedForShow(x,Broadchurch2) | NoneStartedForShow(x,Broadchurch3)))", "score": 0}
{"id": "folio_validation_192", "prediction": "-exists x.(PappySistersHasStartedForBroadcast(x,Two) & -exists y.(Series(y) & PilotsOnBroadcast(y) & -StartedForBroadcast(y,Two)))", "score": 0}
{"id": "folio_validation_192", "prediction": "-exists x.((Pappy's(x) & (BroadcastTwo(x) | BroadcastThree(x))))", "score": 0}
{"id": "folio_validation_192", "prediction": "-exists x.(PappySecondary(x) & -StartedShow(x),BroadcastTwo(x) & -StartedShow(x,BroadcastThree(x)))", "score": -1}
{"id": "folio_validation_192", "prediction": "(no member(Pappys(Pappy) & -(starredForPilotsOnBroadcastTwo(P) | StartedForBroadcast(P3))))", "score": -1}
{"id": "folio_validation_192", "prediction": "-exists x.(Pappys(x) & StarredInShow(x,Broadcast2,Broadcast3))", "score": 0}
{"id": "folio_validation_192", "prediction": "all x.((Member(x) & Pappy's\"Damage(x)) -> (StartedForShare(x,BroadcastTwo) | StartedForShare(x,Broadcast3,Broadcast3)))", "score": 0}
{"id": "folio_validation_192", "prediction": "-exists x.(PappySisters(x) & -(starredForShow(x,Broadway2) | StartedForShow(x,Broadway3))))", "score": -1}
{"id": "folio_validation_192", "prediction": "-exists x.(Pappy's(x) & (StartedOnPlayoff(x,Broadcast2] | StartedOnPlayoff(x,Distribution)))", "score": -1}
{"id": "folio_validation_192", "prediction": "-exists x.(MemberOfPappy's(x) & DramaStar(x) & NoMemberOfPappyShow(x) & NoMemberOfPappyShow(x))", "score": 0}
{"id": "folio_validation_192", "prediction": "all x y.((Pappy's) & (AlsoNoPappyBeing(x,y) | -HasCelebratedAirs(x,y))) -> NoPappyShow(y))", "score": -1}
{"id": "folio_validation_192", "prediction": "-exists x.((PappySister(x) & NoMember(x,Pappy,Broadway2)) & -(PappySister(x, BBC2) & NoMember(x,Broadway3))))", "score": -1}
{"id": "folio_validation_193", "prediction": "all x.(GrowthCompany(x) -> VolatileStock(x))", "score": 0}
{"id": "folio_validation_193", "prediction": "all x.(GrowthCompany(x) -> VolatileShare(x))", "score": 0}
{"id": "folio_validation_193", "prediction": "all x.(GrowthCompany(x) -> VolatilStock(x))", "score": 0}
{"id": "folio_validation_193", "prediction": "all x.(GrowthCompany(x) -> VolatileShares(x))", "score": 0}
{"id": "folio_validation_193", "prediction": "all x.((GrowthCompany(x) & GrowthCompany(x)) -> VolatileStock(x))", "score": 0}
{"id": "folio_validation_193", "prediction": "all x.(GrowthCompany(x) -> VolatileStocks(x))", "score": 0}
{"id": "folio_validation_194", "prediction": "all x.(Focus(x) -> -SuitableForRetirementFund(x))", "score": 0}
{"id": "folio_validation_194", "prediction": "all x.((StockPriceVast(x) & RetirementFund(x)) -> -SuitableForFund(x))", "score": 0}
{"id": "folio_validation_194", "prediction": "all x.(FreezingPrice(x) -> -SuitableForRetirementFund(x))", "score": 0}
{"id": "folio_validation_194", "prediction": "all x.((stockprice(x) & Volatile(x)) -> -SuitableForRetirementFund(x))", "score": 0}
{"id": "folio_validation_194", "prediction": "all x.((StockPrice(x) & Volatile(x)) -> -SuitableForRetirementFund(x))", "score": 0}
{"id": "folio_validation_194", "prediction": "all x.(VolatileStockPrice(x) -> -SuitableForRetirementFund(x))", "score": 0}
{"id": "folio_validation_194", "prediction": "all x.((StockPrice(x) & Volatility(x)) -> -SuitableForRetirementFund(x))", "score": 0}
{"id": "folio_validation_195", "prediction": "exists x.(Company(x) & GrowthCompany(x))", "score": 0}
{"id": "folio_validation_195", "prediction": "exists x.(CompanyStock(x) & GrowthCompanyStock(x))", "score": 0}
{"id": "folio_validation_195", "prediction": "exists x.(CompanyStock(x) & GrowthStock(x))", "score": 0}
{"id": "folio_validation_195", "prediction": "exists x.(CompanyShare(x) & GrownCompanyShare(x))", "score": 0}
{"id": "folio_validation_195", "prediction": "exists x.(CompanyStock(x) & GrowthShares(x))", "score": 0}
{"id": "folio_validation_195", "prediction": "exists x.(Company(x) & GrowthFixtures(x))", "score": 0}
{"id": "folio_validation_195", "prediction": "exists x y.(Company(x) & CompanyStock(y) & GrowthStock(y))", "score": 0}
{"id": "folio_validation_196", "prediction": "all x.((MatureCompany(x) & Stock(x)) -> SuitableForRetirementFund(x))", "score": 0}
{"id": "folio_validation_196", "prediction": "all x.(MatureCompanyStories(x) -> SuitableForRetirementFund(x))", "score": 0}
{"id": "folio_validation_196", "prediction": "all x.(MatureCompany(x) -> SuitableForRetirementFund(x))", "score": 0}
{"id": "folio_validation_196", "prediction": "all x.(MatureCompanyStock(x) -> SuitableForRetirementFund(x))", "score": 0}
{"id": "folio_validation_196", "prediction": "all x.((MatureCompany(x) & Stock(y)) -> SuitableForRetirementFund(x))", "score": 0}
{"id": "folio_validation_196", "prediction": "all x.(MaturityCompany(x) -> SuitableForRetirementFund(x))", "score": 0}
{"id": "folio_validation_196", "prediction": "all x.(MatureCompanyStock(x) -> SuitableForRetirement(x))", "score": 0}
{"id": "folio_validation_196", "prediction": "all x.(MatureCompanyShares(x) -> SuitableForRetirementFund(x))", "score": 0}
{"id": "folio_validation_196", "prediction": "all x.((MatureCompany(x) & Stock(y) & RetirementFund(y)) -> SuitableFor(x,y))", "score": 0}
{"id": "folio_validation_196", "prediction": "all x.(MatureCompanyStorage(x) -> SuitableForRetirementFund(x))", "score": 0}
{"id": "folio_validation_197", "prediction": "all x.(MatureCompany(x) -> Stock(x))", "score": 0}
{"id": "folio_validation_197", "prediction": "all x.(Koy(x) -> (MatureStock(x) & MatureCompany(x)))", "score": 0}
{"id": "folio_validation_197", "prediction": "KO is a mature company stock.", "score": -1}
{"id": "folio_validation_197", "prediction": "all x.(Koho(x) -> (MatureCompanyStock(x) & HasStock(x)))", "score": 0}
{"id": "folio_validation_197", "prediction": "(MatureCompany(KO) & Stock(KO))", "score": 0}
{"id": "folio_validation_197", "prediction": "KO was founded to be mature company stock.", "score": -1}
{"id": "folio_validation_197", "prediction": "all x.((MatureCompany(x) & Stock(x)) -> Oko.", "score": -1}
{"id": "folio_validation_197", "prediction": "all x.(Koyo(x) -> (MatureCompanyStock(x) & Stock(x)))", "score": 0}
{"id": "folio_validation_197", "prediction": "all x.(Ko(x) -> Mature(x))", "score": 0}
{"id": "folio_validation_197", "prediction": "all x.(Ko(x) -> MatureCompanyStock(x))", "score": 0}
{"id": "folio_validation_197", "prediction": "all x.((Koyo) & MaturityCompany(x)) -> Stock(x))", "score": -1}
{"id": "folio_validation_197", "prediction": "all x.((Koyo) & MatureCompanyStock(x)) -> Share(x))", "score": -1}
{"id": "folio_validation_197", "prediction": "KO is maturerStock(KO)", "score": -1}
{"id": "folio_validation_197", "prediction": "all x.(Kos(x) -> MatureCompanyStock(x))", "score": 0}
{"id": "folio_validation_197", "prediction": "all x.(KO(x) -> MatureCompanyStock(x))", "score": 0}
{"id": "folio_validation_197", "prediction": "all x.(Ko.(X) -> HasMatureInvestment(x))", "score": -1}
{"id": "folio_validation_198", "prediction": "all x.(Ko(x) -> CompanyStock(x))", "score": 0}
{"id": "folio_validation_198", "prediction": "all x.(KO(x) -> CompanyStock(x))", "score": 0}
{"id": "folio_validation_198", "prediction": "all x.(Kos(x) -> CompanyStock(x))", "score": 0}
{"id": "folio_validation_198", "prediction": "all x.(KO) -> CompanyStock(x))", "score": -1}
{"id": "folio_validation_198", "prediction": "all x.(KO, CompanyStock) -> Stock(x))", "score": -1}
{"id": "folio_validation_198", "prediction": "all x.(Kob(x) -> CompanyStock(x))", "score": 0}
{"id": "folio_validation_198", "prediction": "all x.(Koyal(x) -> CompanyStock(x))", "score": 0}
{"id": "folio_validation_198", "prediction": "all x y.((Kool(x) & CompanyStock(y,x)) -> Stock(y))", "score": 0}
{"id": "folio_validation_198", "prediction": "All x.(KO(x) -> CompanyStock(x))", "score": -1}
{"id": "folio_validation_198", "prediction": "all x.(Ko.(x) -> CompanyStock(x))", "score": -1}
{"id": "folio_validation_198", "prediction": "all x.(Kobo(x) -> CompanyStock(x))", "score": 0}
{"id": "folio_validation_199", "prediction": "all x.(Koyo(x) -> (CompanyStock(x) & GrowthStock(x)))", "score": 0}
{"id": "folio_validation_199", "prediction": "all x y.((KO) & Company(y)) -> (IsChoice(x,y) & IsGrowthChoice(x,y)))", "score": -1}
{"id": "folio_validation_199", "prediction": "all x.(Korea(x) -> (CompanySheet(x) & GrowthSheet(x)))", "score": 0}
{"id": "folio_validation_199", "prediction": "all x.(KO(x) -> (CompanyShare(x) & GrowthCompanyShare(x)))", "score": 0}
{"id": "folio_validation_199", "prediction": "all x.(Kobo(x) -> (Stock(x) & Stock(x) & GrowthStock(x)))", "score": 0}
{"id": "folio_validation_199", "prediction": "all x.(KO(x) -> (Companystock(x) & GrowthCompanyStock(x)))", "score": 0}
{"id": "folio_validation_199", "prediction": "all x y.((Ko) & CompanyStock(x) & GrowthStock(y)) -> Stock(x,y))", "score": -1}
{"id": "folio_validation_199", "prediction": "all x.(Kosher(x) -> (CompanyStock(x) & GrowthShare(x)))", "score": 0}
{"id": "folio_validation_199", "prediction": "all x.(Kos(x) -> (RetailStock(x) & GrowthStock(x)))", "score": 0}
{"id": "folio_validation_199", "prediction": "all x.(KO(x) -> (CompanyStock(x) & GrowthStock(x)))", "score": 0}
{"id": "folio_validation_199", "prediction": "all x.(Koorko(x) -> (CompanyStock(x) & GrowthStock(x)))", "score": 0}
{"id": "folio_validation_199", "prediction": "all x.(Ko (ChoiceStock) & GrowthStock(Ko))", "score": 0}
{"id": "folio_validation_199", "prediction": "all x.((KO) & CompanyStock(x)) -> GrowthStock(x))", "score": -1}
{"id": "folio_validation_200", "prediction": "all x.((KO(x) & (GrowthCompanyStock(x) | VolatilePrice(x))) -> -(CompanyStock(x) | PriceVolatilePrice(x))))", "score": -1}
{"id": "folio_validation_200", "prediction": "all x.((KO(x) & (GarageCompanyStock(x) | VolatilePricing(x))) -> (-InvestmentCompanyStock(x) | VolatilePricing(x)))", "score": 0}
{"id": "folio_validation_200", "prediction": "all x.((Korea(x) & (GrowthCompanyStock(x) | PriceVolatile(x))) -> -(CompanyStock(x) | PriceVolatile(x))))", "score": -1}
{"id": "folio_validation_200", "prediction": "all x.((Korea(x) & GrowthCompanyStock(x) & -(GrowthCompanyStock(x) | PriceVarsitive(x))) -> -(GrowthCompanyStock(x) & PriceVolatile(x)))", "score": 0}
{"id": "folio_validation_200", "prediction": "all x.((Korea(x) & GrowthCompanySheep(x)) | VolatilePrice(x))", "score": 0}
{"id": "folio_validation_200", "prediction": "all x.((Korea(x) & GrowthCompanyStock(x)) | (-GrowthCompanyStock(x) | VolatilePrice(x))))", "score": -1}
{"id": "folio_validation_200", "prediction": "all x.((KO(x) & GrowthCompanysStock(x)) | VolatilePrice(x)) -> -(CompanysStock(x) | VolatilePrice(x)))", "score": -1}
{"id": "folio_validation_200", "prediction": "all x.((Korea(x) & GrowthCompanyStock(x)) | PriceVolatile(x))", "score": 0}
{"id": "folio_validation_200", "prediction": "all x.((Korea(x) & (GrowthCompanyStock(x) | PriceVolatile(x))) -> (-GrowthCompanyStock(x) & -PriceVolatile(x)))", "score": 0}
{"id": "folio_validation_200", "prediction": "all x.((Kobe(x) & GrowthCompanyStock(x)) | Value(x))", "score": 0}
{"id": "folio_validation_200", "prediction": "all x.((Korea(x) & GrowthCompanyStock(x)) | VolatilePrice(x))", "score": 0}
{"id": "folio_validation_200", "prediction": "all x.(((Korea(x) & -GrowthCompanyStock(x) | PriceVolatile(x))) -> -GrowthCompanyStock(x) & -PriceVolatile(x))", "score": 0}
{"id": "folio_validation_200", "prediction": "all x.((GrowthCompanyStock(x) | VolatilePrice(x)) -> (-Stock(x) & -VolatilePrice(x)))", "score": 0}
{"id": "folio_validation_200", "prediction": "all x.((Korea(x) & (GrowthCompanyStock(x) | VolatilePresentation(x))) -> -Korea(x) & -VolatilePrice(x)))", "score": -1}
{"id": "folio_validation_200", "prediction": "all x.((Korea(x) & GrowthCompanyStock(x)) -> ((NeitherStock(x) & -PriceVolatile(x)) & -PriceVolatile(x)))),", "score": -1}
{"id": "folio_validation_200", "prediction": "all x.((Korea(x) & GrowthCompanyStock(x)) | ((Korea(x) & GrowthCompanyStock(x)) & VolatilePrice(x))))", "score": -1}
{"id": "folio_validation_201", "prediction": "all x y.((VehicleRegistrationPlate(x) & Istanbul(y)) -> Number34(y))", "score": 0}
{"id": "folio_validation_201", "prediction": "all x.((VehicleRegistrationPlate(x) & EnteredWithNumber34)) -> InIstanbul(x))", "score": -1}
{"id": "folio_validation_201", "prediction": "all x.(VehicleRegistrationPlate(x,x) -> InIstanbul#34.", "score": -1}
{"id": "folio_validation_201", "prediction": "all x.(VehicleRegistrationPlate(x) -> VehicleRegisterPlateInStephania(x))", "score": 0}
{"id": "folio_validation_201", "prediction": "ALL CYCLINGS.(IVLITAN -> StartWith(x,34))", "score": -1}
{"id": "folio_validation_201", "prediction": "all x.((VehicleRegistrationPlate(x) & InIstanbul(x)) -> Number34(x))", "score": 0}
{"id": "folio_validation_201", "prediction": "all x.(InstanbulVehicleRegistrationPlate(x) -> Number34(x))", "score": 0}
{"id": "folio_validation_201", "prediction": "all x.(VehicleRegistrationPlate(x) -> AllInIstanbul(x))", "score": 0}
{"id": "folio_validation_201", "prediction": "all x.(VehicleRegistrationPlate(x) -> (EndsWithNumber34(x)))", "score": 0}
{"id": "folio_validation_201", "prediction": "all x.(Instanbul(x) -> VehicleRegistrationPlatesStartWith(x,34))", "score": 0}
{"id": "folio_validation_201", "prediction": "all x y.((VehicleRegistrationPlate(x) & InIstanbul(y)) -> StartsWithNumber34(x,y))", "score": 0}
{"id": "folio_validation_202", "prediction": "all x.((Plate(x) & -EndsWith34(x)) -> -Istanbul(x))", "score": 0}
{"id": "folio_validation_202", "prediction": "all x.((Plate(x) & -StartStrangwith34(x)) -> -FromIstanbul(x))", "score": 0}
{"id": "folio_validation_202", "prediction": "all x.((Plate(x) & -EntersWith34(x)) -> -From(x,e,i,i))", "score": 0}
{"id": "folio_validation_202", "prediction": "all x.((Plate(x) & -EnmorrowsWithProv.(x,34)) -> -Istanbul(x))", "score": -1}
{"id": "folio_validation_202", "prediction": "all x.((Plate(x) & -EndsWithNoble34(x)) -> -Istanbul(x))", "score": 0}
{"id": "folio_validation_202", "prediction": "all x.((Plate(x) & -StartWithInitiative(x,34)) -> -FromIstanbul(x))", "score": 0}
{"id": "folio_validation_202", "prediction": "all x.((Plate(x) & -Encodes34(x)) -> -Istanbul(x))", "score": 0}
{"id": "folio_validation_202", "prediction": "all x.((Plate(x) & -(EndsWith(x,34))) -> -FromIstanbul(x))", "score": 0}
{"id": "folio_validation_202", "prediction": "all x.((Plate(x) & -EngageWithProposition34(x)) -> Istanbul-Festive(x))", "score": -1}
{"id": "folio_validation_202", "prediction": "all x.((Plate(x) & -EndsWith34(x)) -> -FromIstanbul(x))", "score": 0}
{"id": "folio_validation_202", "prediction": "all x.((Plate(x) & -EndsWith34(x)) -> -An IstanbulPlate(x))", "score": -1}
{"id": "folio_validation_202", "prediction": "all x.((Plate(x) & NoBetween(x,34)) -> NotFromIstanbul(x))", "score": 0}
{"id": "folio_validation_202", "prediction": "all x.((Plate(x) & -EnclosedWithProv4.34(x)) -> -FromIstanbul(x))", "score": -1}
{"id": "folio_validation_202", "prediction": "all x.((Plate(x) & -BeginsWithProductName34(x)) -> -Islamica(x))", "score": 0}
{"id": "folio_validation_202", "prediction": "all x.((Plate(x) & -PeriodWith34(x)) -> -FromIstanbul(x))", "score": 0}
{"id": "folio_validation_202", "prediction": "all x.((Plate(x) & -EndsWithProvd4.f)) -> -Istanbul(x))", "score": -1}
{"id": "folio_validation_203", "prediction": "(His(Joe) carRegistrationPlate(Joe):Istanbul(Joe))", "score": -1}
{"id": "folio_validation_203", "prediction": "the vehicle registration plate from (Joe(Joe) & From(Joe,Istanbul))", "score": -1}
{"id": "folio_validation_203", "prediction": "All x y.((Joese(x) & VehicleRegistrationPlate(y)) -> Istanbul(x,y))", "score": -1}
{"id": "folio_validation_203", "prediction": "all x.(Joe_VehicleRegistrationPlate(x,Estanbul) -> Has(x,Estanbul))", "score": 0}
{"id": "folio_validation_203", "prediction": "all x y z.((Joe(x) & Vehicle(y) & Plate(z)) -> (From(x,y) & Istanbul(y)))", "score": 0}
{"id": "folio_validation_203", "prediction": "-Istanbul(Joe'sVehicleRegistrationPlates(Joe,y))", "score": 0}
{"id": "folio_validation_203", "prediction": "(VehiclePlaqueFromIstanbul(Joe))", "score": 0}
{"id": "folio_validation_203", "prediction": "(RegisterPlate(Jossey) & From(Burmanistan))", "score": 0}
{"id": "folio_validation_203", "prediction": "(Tube(Joe) & VehicleRegistrationPlate(Joe) & FromIstanbul(Joe))", "score": 0}
{"id": "folio_validation_203", "prediction": "(VehicleRegistrationPlate(Joe) & FromIstanbul(Joe))", "score": 0}
{"id": "folio_validation_203", "prediction": "(VehicleRegistrationPlate(Joe) -> FromIstanbul(Joe))", "score": 0}
{"id": "folio_validation_203", "prediction": "(ModelLockingPlate(Joe) & IsIstanbul(joe))", "score": 0}
{"id": "folio_validation_203", "prediction": "((Joese's VehicleRegistrationPlate(joe) & FromIstanbul(joe)))", "score": -1}
{"id": "folio_validation_203", "prediction": "(RepresentationPlateFromIstanbul(Joe))", "score": 0}
{"id": "folio_validation_203", "prediction": "all x.(JoesVehicle(x) -> A1929(x))", "score": 0}
{"id": "folio_validation_203", "prediction": "All x y z.(((Joe's Vehicle(x) & Plate(y) & Vehicle(z)) -> Turkey(w))", "score": -1}
{"id": "folio_validation_204", "prediction": "all x.((LicensePlate(x) & Tom(x)) -> Number35(x))", "score": 0}
{"id": "folio_validation_204", "prediction": "(Around(ImportantAndCounter) -> TomsLicensePlate(i))", "score": 0}
{"id": "folio_validation_204", "prediction": "(TomsLicensePlate(Tommy,35))", "score": 0}
{"id": "folio_validation_204", "prediction": "all x.(TomLicensePlate(x) -> Number35(x))", "score": 0}
{"id": "folio_validation_204", "prediction": "all x.(Tom(x) & LicensePlate(x,35)) -> StartsWith(x,35))", "score": -1}
{"id": "folio_validation_204", "prediction": "all x.((LicensePlate(x) & Tom(x)) -> StartsWith(x,35))", "score": 0}
{"id": "folio_validation_204", "prediction": "all x.(LayerPlate(x) -> StartsWithNumber35(x))", "score": 0}
{"id": "folio_validation_204", "prediction": "all x.(LicensePlate(x,35) -> TomStartsWith(x,35))", "score": 0}
{"id": "folio_validation_204", "prediction": "All x.(Number35(x) -> TomsLicensePlate(x))", "score": -1}
{"id": "folio_validation_204", "prediction": "all x.(LicensePlate(x) -> EnteredWithNumber35(x))", "score": 0}
{"id": "folio_validation_204", "prediction": "all x.((Tam(x) & LicensePlate(x)) -> Number35(x))", "score": 0}
{"id": "folio_validation_204", "prediction": "(Ladyplate(Tom,35) -> StartsWith(Tom,35))", "score": 0}
{"id": "folio_validation_204", "prediction": "all x.((Tom(x) & LicensePlate(x,35)) -> StartsWith(x,35))", "score": 0}
{"id": "folio_validation_204", "prediction": "Tom'slicensePlateStartsWith(Tom,35))", "score": -1}
{"id": "folio_validation_204", "prediction": "all x.(TumsLicensePlate(x) -> BeginningWith35(x))", "score": 0}
{"id": "folio_validation_205", "prediction": "all x.((LicensePlate(x) & StartsWithNumber35(x)) -> -BeginsWithNumber34(x))", "score": 0}
{"id": "folio_validation_205", "prediction": "all x.((LicensePlate(x) & Number35(x)) -> -Number34(x))", "score": 0}
{"id": "folio_validation_205", "prediction": "all x.((LicensePiece(x) & StartsWith(x,35)) -> -EndesWith(x,34))", "score": 0}
{"id": "folio_validation_205", "prediction": "[BG] (Insurmountable(LicensePlate) -> DoesntEmbrace(LicensePlate,5)))", "score": -1}
{"id": "folio_validation_205", "prediction": "all x.((LicensePlate(x) & StartsWithNumber35(x)) -> -EndsWithNumber34(x))", "score": 0}
{"id": "folio_validation_205", "prediction": "[BG] ((LicensePlate(x) & Number35(x)) & -Count(x,34)))", "score": -1}
{"id": "folio_validation_205", "prediction": "all x.((LicensePlate(x) & BeginsWithNo.35(x)) -> -BeginsWithNo.34(x))", "score": -1}
{"id": "folio_validation_205", "prediction": "all x.((LicensePlate(x) & StartsWith(x,35)) -> -EnginsWith(x,34))", "score": 0}
{"id": "folio_validation_205", "prediction": "all x.((LayerPlate(x) & StartsWithNumber35(x)) -> -EntertainsWithNumber34(x))", "score": 0}
{"id": "folio_validation_205", "prediction": "(FoundWith(LicensePlate(x,35) | BeginningWith(x,34)))", "score": -1}
{"id": "folio_validation_205", "prediction": "all x.((LicensePlot(x) & Number35(x)) -> -OccursWithProvential(x))", "score": 0}
{"id": "folio_validation_205", "prediction": "all x.((LicensePlate(x) & ContainsNumber35(x)) -> -ContainsNumber34(x))", "score": 0}
{"id": "folio_validation_205", "prediction": "all x.((TitlePlate(x) & StartsWithMoreThan(x,35)) -> -EntersWithNumber34(x))", "score": 0}
{"id": "folio_validation_205", "prediction": "all x.((LicensePlate(x) & BeginningWithNumber35(x)) -> -EndsWithNumber34(x))", "score": 0}
{"id": "folio_validation_205", "prediction": "all x.((LicensePlate(x) & BeginningWith(x,37)) -> -Embraces(x,34))", "score": 0}
{"id": "folio_validation_206", "prediction": "(Eats(Joe'sLicensePlaque(Joe) & Number34(Joe))", "score": -1}
{"id": "folio_validation_206", "prediction": "all x y z.((Joel(x) & LicensePlate(y) & LicensePlate(z)) -> (EndsWith(y,34).))", "score": -1}
{"id": "folio_validation_206", "prediction": "all x.(Joe(x) -> LicensePlateStartsWith(x,34))", "score": 0}
{"id": "folio_validation_206", "prediction": "All x.(Joe'sLicensePlate(x) -> Number34(x))", "score": -1}
{"id": "folio_validation_206", "prediction": "Das Lizenzplate(Joe) beginntWith(joe,34)", "score": -1}
{"id": "folio_validation_206", "prediction": "all x.(Joe'sLicensePlate(x) -> Number34(x))", "score": 0}
{"id": "folio_validation_206", "prediction": "all x.(Joe(x) -> NumberPattern(x,34))", "score": 0}
{"id": "folio_validation_206", "prediction": "all x.(KoeJoe'sLicensePlate(x) -> StartsWithNumber(x,34))", "score": 0}
{"id": "folio_validation_206", "prediction": "All x.(Jose(x) -> LicensePlate(x))", "score": -1}
{"id": "folio_validation_206", "prediction": "(EndedsWith(Joe'sLicensedPlate(Joe,34))", "score": -1}
{"id": "folio_validation_206", "prediction": "all x.(Joe'sLicensePlate(x) -> (FromPercent(x,35)))", "score": 0}
{"id": "folio_validation_206", "prediction": "((BobbyLicensePlate(Joe) & Number34(Joe)))", "score": 0}
{"id": "folio_validation_206", "prediction": "is named after joe's (Jones) & Number34(Joe's))", "score": -1}
{"id": "folio_validation_206", "prediction": "in the year 2004 (JoesLicensePlate(Joe,34))", "score": -1}
{"id": "folio_validation_206", "prediction": "-StartWithDouble(Joe'sLicensePlate(joe,34)", "score": -1}
{"id": "folio_validation_206", "prediction": "all x.(Joe(x) -> (PassportPlate(x,34)))", "score": 0}
{"id": "folio_validation_207", "prediction": "-(LicensePlate(Tom) & FromInstanbul(Tom))", "score": 0}
{"id": "folio_validation_207", "prediction": "(LicensePlate(Tom) & From(Tom,Istanbul))", "score": 0}
{"id": "folio_validation_207", "prediction": "Tom's LicensePlateFrom(Tom,Istanbul)", "score": -1}
{"id": "folio_validation_207", "prediction": "Tom's license plate is from Istanbul.", "score": -1}
{"id": "folio_validation_207", "prediction": "Tom's LicensePlateFromIstanbul(x)", "score": -1}
{"id": "folio_validation_207", "prediction": "-(TomsLawnPlate(Tom) & From(TomsIstanbul))", "score": 0}
{"id": "folio_validation_207", "prediction": "all x.(TomTommyLicensePlate(x) -> FromIstanbul(x))", "score": 0}
{"id": "folio_validation_207", "prediction": "Tom's LicensePlateIsFrom(Tom))", "score": -1}
{"id": "folio_validation_207", "prediction": "(From(Tom(Tom) | LicensePlateFrom(Tom,Istanbul)))", "score": -1}
{"id": "folio_validation_207", "prediction": "Tom's LicensePlateFromIstanbul.", "score": -1}
{"id": "folio_validation_207", "prediction": "Tom's LicensePlateFromIslamabad(Tom)", "score": -1}
{"id": "folio_validation_207", "prediction": "Tom's LicensePlateFromInstanbul(Tom)", "score": -1}
{"id": "folio_validation_207", "prediction": "all x y.((Tom(x) & LicensePlate(y)) -> IsFrom(x,Island))", "score": 0}
{"id": "folio_validation_207", "prediction": "(Tom'sLicensePlate(Tom) -> FromIstanbul(Tom))", "score": 0}
{"id": "folio_validation_208", "prediction": "all x.(WorksInStudentJobs(x) -> NeedsToEarnMoney(x))", "score": 0}
{"id": "folio_validation_208", "prediction": "all x.((WorkStudentJobs(x) & CollegeTuition(x)) -> NeedsEarnMonnayToPayForTuition(x))", "score": 0}
{"id": "folio_validation_208", "prediction": "all x y.((Person(x) & WorksInStudentJobs(x) & Campus(y)) -> NeedsUse(x,y))", "score": 0}
{"id": "folio_validation_208", "prediction": "all x.((WorksBetweenStudentJobsOnCampus(x) & CollegeTuition(x)) -> NeedsToEarnMoneyToPay.((StudentTuition(x) & CollegeTuition(x)))", "score": -1}
{"id": "folio_validation_208", "prediction": "all x y.((Person(x) & WorksInStudentJobs(x,y)) -> NeedsToEarnMoney(x))", "score": 0}
{"id": "folio_validation_208", "prediction": "all x y.((Person(x) & Students(y)) -> WorkInStudentJobsOnCampus(x,y))", "score": 0}
{"id": "folio_validation_208", "prediction": "all x.((WorksInStudentJobs(x) & LocatedOnCampus(x)) -> EarnMortgage(x))", "score": 0}
{"id": "folio_validation_208", "prediction": "all x.(WorksInStudentJobsOnCampus(x) -> EarnsMoneyForKnowledge(x))", "score": 0}
{"id": "folio_validation_208", "prediction": "all x.(WorksInStudentJobsOnCampus(x) -> NeedsMoneyToPayTuition(x))", "score": 0}
{"id": "folio_validation_208", "prediction": "all x.(WorkInStudentJobsOnCampus(x) -> NeedsToEarnMoneyToPayForCollegeTuition(x))", "score": 0}
{"id": "folio_validation_208", "prediction": "all x.(WorkInStudentJobs(x) -> NeedsEarnMoney(x))", "score": 0}
{"id": "folio_validation_208", "prediction": "all x.(WorkScholasticOnCampus(x) -> EarnMoneyToPayCollegeTuition(x))", "score": 0}
{"id": "folio_validation_208", "prediction": "all x.(WorksInStudentJobsOnCampus(x) -> NeedsToEarnMoneyToPayForCollegeTuition(x))", "score": 0}
{"id": "folio_validation_208", "prediction": "all x.(WorksInStudentJobsOnCampus(x) -> NeedsEarn(x,y))", "score": 0}
{"id": "folio_validation_208", "prediction": "all x y z.((Person(x) & StudentJobsOnCampus(y) & CollegeTuition(z) & WorksIn(x,y)) -> CollectsMoneyFor(x,z))", "score": 0}
{"id": "folio_validation_208", "prediction": "all x.(WorksInStudentJobsOffCampus(x) -> NeedsMoneyForCollegeTuition(x))", "score": 0}
{"id": "folio_validation_209", "prediction": "all x y.((People(x) & College(y) & OrdersTakeout(x,y)) -> WorkStudentJobs(x,y))", "score": 0}
{"id": "folio_validation_209", "prediction": "all x.((Person(x) & OrdersTakeoutFrequentlyInCollege(x)) -> WorkInStudentJobs(x))", "score": 0}
{"id": "folio_validation_209", "prediction": "all x.((Household(x) & OrdersTakeoutInCollege(x) & UsesStudentJob(x)) -> WorksInCampus(x))", "score": 0}
{"id": "folio_validation_209", "prediction": "all x.((People(x) & OrdersTakeout(x) & OftenInCollege(x)) -> WorkInStudentJobs(x))", "score": 0}
{"id": "folio_validation_209", "prediction": "all x.((Person(x) & OrdersTakeoutFrequently(x) & InCollege(x)) -> WorksInStudentJobs(x))", "score": 0}
{"id": "folio_validation_209", "prediction": "all x.((Orders(x,Takeout) & College(x)) -> WorksInStudentJobs(x))", "score": 0}
{"id": "folio_validation_209", "prediction": "all x.((Person(x) & OrderTakeoutFrequentlyInCollege(x)) -> WorkInStudentJobsOnCampus(x))", "score": 0}
{"id": "folio_validation_209", "prediction": "all x y.((People(x) & College(y) & OrderTakeoutFrequently(x,y)) -> WorkStudentJobs(x,y))", "score": 0}
{"id": "folio_validation_209", "prediction": "all x.((Partner(x) & Order TakeoutFrequently(x)) -> WorkInStudentJobsOnCampus(x))", "score": -1}
{"id": "folio_validation_209", "prediction": "all x.((PopularCollegeOrders(x) & CollegeOrders(x)) -> WorkInStudentJobsOnCampus(x))", "score": 0}
{"id": "folio_validation_209", "prediction": "all x y.((Person(x) & College(y) & OrdersTakeoutFrequently(x,y)) -> WorkInStudentJobsOnCampus(x,y))", "score": 0}
{"id": "folio_validation_209", "prediction": "all x y.((Person(x) & College(y) & OrdersTakeout(x,y)) -> WorkInStudentJobsOnCampus(x,y))", "score": 0}
{"id": "folio_validation_209", "prediction": "all x.((Person(x) & OrdersTakeoutFrequentlyInCollege(x)) -> WorkInStudentJobsOnCampus(x))", "score": 0}
{"id": "folio_validation_209", "prediction": "all x.((Person(x) & OrdersTakeoutFrequentlyInCollege(x)) -> worksInStudentJobsOnCampus(x))", "score": 0}
{"id": "folio_validation_209", "prediction": "all x.((Person(x) & OrdersTakeoutFrequently(x)) -> WorksInStudentJobs(x))", "score": 0}
{"id": "folio_validation_209", "prediction": "all x.((Person(x) & OrdersTakeoutQuickly(x)) -> WorkStudentJobs(x))", "score": 0}
{"id": "folio_validation_210", "prediction": "all x y.((College(x) & College(y)) -> (OrdersTakeoutOften(x,y) | EnjoysDiningHouseMealsAndRecipes(x)))", "score": 0}
{"id": "folio_validation_210", "prediction": "all x y.((Person(x) & College(y)) -> (OrdersTakeoutFrequently(x,y) | EnjoysDiningHallMealsAndRecipes(x,y)))", "score": 0}
{"id": "folio_validation_210", "prediction": "all x y.((Person(x) & College(y)) -> (OrdersFrequentTakeout(x,y) | EnjoysDiningHouseMeals(x,y)))", "score": 0}
{"id": "folio_validation_210", "prediction": "can order TakeoutFrequently(s)(s) | enjoyDiningHallMealsAndRecipes(s))", "score": -1}
{"id": "folio_validation_210", "prediction": "all x.((Person(x) & OrderTakeoutFrequentlyInCollege(x)) | EnjoyDiningHallMealsAndRecipes(x)) -> FrequentlyInCollege(x))", "score": -1}
{"id": "folio_validation_210", "prediction": "all x y.((Person(x) & College(y)) -> (OrdersTakeoutFrequently(x,y) | EnjoysDiningHallMealsAndRecipes(x)))", "score": 0}
{"id": "folio_validation_210", "prediction": "all x.((Person(x) & (OrdersTakeout(x,College) | EnjoysDiningHouseMeals(x))) -> (Frequently(x) | EnjoysRecipes(x))))", "score": -1}
{"id": "folio_validation_210", "prediction": "all x.((Person(x) & (OrdersTakeout(x) | EnjoysDiningHallMeals(x))) -> EatsRecipes(x))", "score": 0}
{"id": "folio_validation_210", "prediction": "all x.(Person(x) -> (OrdersTakeoutFrequently(x) | EnjoysDiningHallMeals(x)))", "score": 0}
{"id": "folio_validation_210", "prediction": "all x.((Person(x) & (OrdersTakeoutFrequentlyInCollege(x) | EnjoysDiningHallMeals(x))) -> (-OrdersTakeoutFrequentlyInCollege(x)) or (ExperiencesCollegeMeals(x) | EnjoysCollegeRecipes(x))))", "score": -1}
{"id": "folio_validation_210", "prediction": "all x y.((Person(x) & College(y)) -> (OrdersTakeout(x,y) | EnjoysDiningHallMealsAndRecipes(x,y)))", "score": 0}
{"id": "folio_validation_210", "prediction": "both.(CellFriends(p) & (OrdersTakeoutFrequently(p) | EnjoysDiningHallMealsAndRecipes(p)))", "score": -1}
{"id": "folio_validation_210", "prediction": "all x.((Person(x) & OrdersTakeout(x,college)) | (EnjoysDiningHouseMeals(x) & EnjoysRecipes(x))))", "score": -1}
{"id": "folio_validation_210", "prediction": "all x.((Man(x) & (OrdersTakeoutFrequently(x) | EnjoysDusthallMeals(x))) -> (ProvidesRecipesInDustroom(x) & EnjoysDiningHallMeals(x)))", "score": 0}
{"id": "folio_validation_210", "prediction": "all x.((Person(x) & (ObstacleTakeoutFrequent(x) | EnjoyDiningHallMealsAndRecipes(x))) -> OrdersFrequently(x))", "score": 0}
{"id": "folio_validation_210", "prediction": "all x y.((People(x) & College(y) & Collegiate(z)) -> (OrdersTakeoutFrequently(x,y) | EnjoysDiningHallMealsAndRecipes(x,z)))", "score": 0}
{"id": "folio_validation_211", "prediction": "all x.(EnjoyDessiningHallMeal(x) & EnjoyRecipes(x)) -> -SpicyEater(x))", "score": -1}
{"id": "folio_validation_211", "prediction": "all x.((Person(x) & EnjoysDiningHallMealsAndRecipes(x)) -> -SpicyEather(x))", "score": 0}
{"id": "folio_validation_211", "prediction": "all x.((EnjoysDiningHouseMeals(x) & EnjoysDiningHouseRecipes(x)) -> -TrickyEather(x))", "score": 0}
{"id": "folio_validation_211", "prediction": "all x.((People(x) & EnjoysDiningHallMealsAndRecipes(x)) -> -CpickyEather(x))", "score": 0}
{"id": "folio_validation_211", "prediction": "all x.(NeverCitizen(x) -> (EnjoysDiningHallMeals(x) & EnjoysRecipes(x)))", "score": 0}
{"id": "folio_validation_211", "prediction": "all x.((People(x) & EnjoyDiningHallMeals(x) & EnjoyDiningHallRecipes(x)) -> -HotTasteyEaters(x))", "score": 0}
{"id": "folio_validation_211", "prediction": "all x.((Person(x) & EnjoysDiningHallMeals(x) & EnjoysRecipes(x)) -> -PickyEaters(x))", "score": 0}
{"id": "folio_validation_211", "prediction": "all x.((Person(x) & EnjoysDiningHouseMeals(x) & EnjoysDiningRoomRecipes(x)) -> -C pickyEater(x))", "score": -1}
{"id": "folio_validation_211", "prediction": "all x.((People(x) & EnjoysDiningHallMeals(x) & EnjoysRises(x)) -> -PickyEather(x))", "score": 0}
{"id": "folio_validation_211", "prediction": "all x.(EnjoysDiningHouseMealsAndRecipes(x) -> -SnootyEaters(x))", "score": 0}
{"id": "folio_validation_211", "prediction": "all x.((Person(x) & EnjoysDiningHallMeals(x) & EnjoysRecipes(x)) -> -PickyEather(x))", "score": 0}
{"id": "folio_validation_211", "prediction": "all x.((Person(x) & EnjoysDiningHouseMeals(x) & EnjoysRecipes(x)) -> -PickyEather(x))", "score": 0}
{"id": "folio_validation_211", "prediction": "all x.(EnjoysDiningHouseMealsAndRecipes(x) -> -PickyEather(x))", "score": 0}
{"id": "folio_validation_211", "prediction": "all x.((People(x) & EnjoysDiningHallMeals(x) & EnjoysRecipes(x)) -> -PickyEather(x))", "score": 0}
{"id": "folio_validation_212", "prediction": "all x y.((DiningHouse(x) & CampusDiningHouse(y)) -> Enjoys(x,meals) & Enjoys(x,recipes))", "score": 0}
{"id": "folio_validation_212", "prediction": "all x.(EnjoysDiningHouseMealsAndRecipes(x) -> SpendsConversation(x))", "score": 0}
{"id": "folio_validation_212", "prediction": "all x.((People(x) & EnjoysDiningHallMealsAndRecipes(x)) -> (SpoilsDeniging(x) | CheatsInCampusDiningHouses(x)))", "score": 0}
{"id": "folio_validation_212", "prediction": "all x y z.((DiningHall(x) & EnjoysMealsAndRecipes(x) & CampusDiningHall(y) & SpendsThan(z)) -> (EatsAndCatchUp(z)))", "score": 0}
{"id": "folio_validation_212", "prediction": "all x.(EnjoysDiningHouseMealsAndRecipes(x) -> SpendsLifeEatingAndCatchingUpWithFriendsInCampusDiningHouses(x))", "score": 0}
{"id": "folio_validation_212", "prediction": "all x.((Person(x) & EnjoysDiningHouseMeals(x) & EnjoysDiningHouseRecipes(x)) -> SpendsLoesThanDepends(x,campusDiningHouses))", "score": 0}
{"id": "folio_validation_212", "prediction": "all x y.((Person(x) & DiningHall(y) & Enjoys(x,y) & DiningHall(y)) -> SpendsAndEatsIn(x,y) & CatchesUpWith(x,y))", "score": 0}
{"id": "folio_validation_212", "prediction": "all x.(EnjoysDiningHallMealsAndRecipes(x) -> (CatchUpWithFriendsInCampusDiningHalls(x) & MuchOfEatingAndFunnyingInCampusDiningHouses(x)))", "score": 0}
{"id": "folio_validation_212", "prediction": "all x.(EnjoysDiningHallMealsAndRecipes(x) -> (AgainstsDiningHallMeals(x) & CatchesUpWithFamilies(x) & InCampusDiningHalls(x)))", "score": 0}
{"id": "folio_validation_212", "prediction": "all x.((People(x) & EnjoydDiningHallMeals(x) & EnjoyedDiningRecipes(x)) -> SpendsLittleOfTimeEatingAndCatchingupInCampusDiningHalls(x))", "score": 0}
{"id": "folio_validation_212", "prediction": "all x.(AmenitiesDiningHallMealsAndRecipes(x) -> (DealsIncampusDiningHalls(x) & SpendsTony(x)))", "score": 0}
{"id": "folio_validation_212", "prediction": "all x.(EnjoysDiningHallMealsAndRecipes(x) -> SpendsAtLeastTimeEatingAndCatchingUpWithFriends(x,campusDiningHalls))", "score": 0}
{"id": "folio_validation_212", "prediction": "all x y.((People(x) & CampusDiningHouse(y) & EnjoysMealsAndRecipes(x,y)) -> SpendsMillionsOfTimeEatingAndCatchingUpWithFriendies(x,y))", "score": 0}
{"id": "folio_validation_212", "prediction": "all x y z.((People(x) & DiningHallMeals(y) & CampusDiningHall(z)) -> (Enjoys(x,y) & Enjoys(x,z)))", "score": 0}
{"id": "folio_validation_212", "prediction": "all x y.((Person(x) & DiningHallMealsAndRecipes(y) & Enjoys(x,y)) -> (EnjoysInDesserts(x,y) & SpendsAtMore(x,y)))", "score": 0}
{"id": "folio_validation_212", "prediction": "all x.((PlaysDiningHouseMeals(x) & EnjoysDiningHouseRecipes(x)) -> SpendsLittleTimeEatingAndCatchingUpWithFriends(x))", "score": 0}
{"id": "folio_validation_213", "prediction": "all x.((Mary(x) & WorksSelfSkillsOnCampus(x) & NeedsEarnMoney(x)) -> (-(Steady(x) | NeedsEarnMoney(x)))))", "score": -1}
{"id": "folio_validation_213", "prediction": "all x.((Mary(x) & WorksInStudentJobsOnCampus(x) & NeedsEarnMoney(x) & PaysCollegeTuition(x)) -> (-Cropy(x) & -NeedsEarnMoneyToPayCollegeTuition(x)))", "score": 0}
{"id": "folio_validation_213", "prediction": "(all x.((Mary(x) & WorksStudentJobs(x) & NeedsEarnMolecules(x)) -> -(Smokey(x) | NeedsEarnMolecules(x))))", "score": 0}
{"id": "folio_validation_213", "prediction": "all x.((Mary(x) & WorksInStudentJobsOnCampus(x) & NeedsMarketing(x) & -Crueous(x) & NeedsMarketing(x)) -> -Crueous(x))", "score": 0}
{"id": "folio_validation_213", "prediction": "all x.((Mary(x) & WorksInStudentJobsOnCampus(x) & NeedsEarnMoney(x) & HelpsPayForCollegeTuition(x)) -> (---NecessaryEarnMoney(x) & -NeedsEarnMoneyForCollegeTuition(x)))", "score": 0}
{"id": "folio_validation_213", "prediction": "all x.((Mary(x) & WorksInStudentJobsOnCampus(x) & NeedsEarnMoneyToPayForCollegeTuition(x)) -> -(Cpicky(x) | NeedsEarnMoneyToPayForCollegeTuition(x)))", "score": 0}
{"id": "folio_validation_213", "prediction": "all x.((Mary(x) & WorksInStudentJobsOnCampus(x) & NeedsEarnMoney(x)) -> (-picky(x) & -NeedsEarnMoneyToPayCollegeTuition(x)))", "score": 0}
{"id": "folio_validation_213", "prediction": "all x.((Mary(x) & WorksStudentJobs(x) & NeedsEarnMoney(x) & CollegeTuition(x)) -> -(Cooky(x) | NeedsEarnMoney(x))))", "score": -1}
{"id": "folio_validation_213", "prediction": "all x.((Mary(x) & WorksStudentJobs(x) & NeedsEarnMoney(x)) -> NoCropy(x) & -NeedsEarnMoneyToPayCollegeTuition(x))", "score": 0}
{"id": "folio_validation_213", "prediction": "all x.((Mary(x) & WorksInStudentJobs(x) & NeedsEarnMoney(x)) -> -(Sheissy(x) | NeedsEarnMoney(x)))", "score": 0}
{"id": "folio_validation_213", "prediction": "all x y.((Mary(x) & StudentsJobs(y) & OnCampus(x) & EarnsMoneyToPay(x)) -> (-Spicky(x) & -NeedsMoneyToPay(x,y)))", "score": 0}
{"id": "folio_validation_213", "prediction": "all x.((Mary(x) & WorksInStudentJobsOnCampus(x) & NeedsEarnMoney(x)) -> (-ZeroNasty(x) & NeedsEarnMoney(x)))", "score": 0}
{"id": "folio_validation_213", "prediction": "all x.((Mary(x) & WorksInStudentJobs(x) & EarnsMoneyToPay(x,CollegeTuition)) -> -(Picky(x) | NeedsMoneyToPay(x,CollegeTuition))))", "score": -1}
{"id": "folio_validation_213", "prediction": "all x.((Mary(x) & WorksStudentJobs(x) & EarnsMoney(x)) -> (-Picky(x) & -NeedsMoney(x)))", "score": 0}
{"id": "folio_validation_213", "prediction": "all x.((Mary(x) & WorksInStudentJobs(x) & NeedsToEarnMoneyToHelpPay(x,CollegeTuition)) -> (NoTicky(x) & -NeedsToEarnMoneyToHelpPay(x,CollegeTuition)))", "score": 0}
{"id": "folio_validation_213", "prediction": "all x.((Mary(x) & WorksStudentJobs(x) & NeedsEarnMothing(x) & PayCollegeTuition(x)) -> (-Picky(x) & -NeedsEarnMoon(x)))", "score": 0}
{"id": "folio_validation_214", "prediction": "all x y.((Maria(x) & CollegeTuition(y)) -> NeedsEarnMortgage(x,y))", "score": 0}
{"id": "folio_validation_214", "prediction": "all x.(Mary(x) -> (NeedsToEarnMoney(x) & HelpsPayTheStudy(x)))", "score": 0}
{"id": "folio_validation_214", "prediction": "all x y.((Mama(x) & CollegeTuition(y)) -> Needs(x,y))", "score": 0}
{"id": "folio_validation_214", "prediction": "all x.((Mary(x) & CollegeTuition(x)) -> NeedsEarnmoney(x))", "score": 0}
{"id": "folio_validation_214", "prediction": "all x.((Mary(x) & CollegeTuition(y)) -> NeedsKnowledge(x,y))", "score": 0}
{"id": "folio_validation_214", "prediction": "all x.((Mary(x) & CollegeTuition(y)) -> NeedsMoney(x,y))", "score": 0}
{"id": "folio_validation_214", "prediction": "all x.(EarnMoney(x) -> (MariaNeedsMoney(x) & CollegeTuition(x)))", "score": 0}
{"id": "folio_validation_214", "prediction": "(CostMyCoupleTuition(Mary,ByTheCollege(Mary)) -> NeedsEarnMoney(Mary,ByTheCollege(Mary))", "score": -1}
{"id": "folio_validation_214", "prediction": "all x.((Mary(x) & CollegeTuition(y)) -> NeedsEarnMoney(x,y))", "score": 0}
{"id": "folio_validation_214", "prediction": "(NeedsMoney(Mary,CollegeTuition) & NeedsMoney(Mary,CollegeTuition))", "score": 0}
{"id": "folio_validation_214", "prediction": "(IsSinceMorning(Mom,CollegeTuition) & NeedsEarnmoney(Mom))", "score": 0}
{"id": "folio_validation_214", "prediction": "(Needs(Mary,Finances) & CollegeTuition(Mary,Co.))", "score": -1}
{"id": "folio_validation_214", "prediction": "all x.((Mary(x) & CollegeTacment(x)) -> NeedsToBeGiven(x,Mary))", "score": 0}
{"id": "folio_validation_214", "prediction": "-(NeedsLearnedMoney(Mary) & CollegeTuition(Mary)))", "score": -1}
{"id": "folio_validation_214", "prediction": "all x.((Mary(x) & NeedsMoney(x)) -> HelpsPayForCollegeTuition(x))", "score": 0}
{"id": "folio_validation_215", "prediction": "all x.((Mary(x) & -PickyEather(x)) -> (MomEats(x) & Grooves(x) & CatchupsWithFavories(x)))", "score": 0}
{"id": "folio_validation_215", "prediction": "(-pickyEater(Mary) & SpendsEatingAndLangingOnCampus(Mary))", "score": 0}
{"id": "folio_validation_215", "prediction": "all x.((Mila(x) & -pickyEater(x)) -> (SpreadsTimeEatingAndCatchingUpWithFriends[x)))", "score": -1}
{"id": "folio_validation_215", "prediction": "all x.((Mary(x) & -pickyEater(x)) -> SpendsTooThan(x))", "score": 0}
{"id": "folio_validation_215", "prediction": "(-pickyEater(Mary) & SpendsAtHomeEatAndChange(Mary,campusDining))", "score": 0}
{"id": "folio_validation_215", "prediction": "all x.((Madam(x) & -pickyEater(x)) -> SpendsLittleTimeEatingAndCompeting(x))", "score": 0}
{"id": "folio_validation_215", "prediction": "(WelcomeToCampus(Maria,May,1997) & -CozyEater(Maria) & SpendsA lotOfTimeEatingAndCatchingUpWithFriends(Mary,Campus))", "score": -1}
{"id": "folio_validation_215", "prediction": "all x.((Holiday(x) & -pickyEather(x)) -> (Spoiling(x) & SpendingAmountOfTimeEating(x) & CatchingUpWithFriends(x)))", "score": 0}
{"id": "folio_validation_215", "prediction": "(-CruelyEater(Mary) & SpendsOfTimeEatingAndCatchingUpWithFriends(Mary,CampusDiningHouses))", "score": 0}
{"id": "folio_validation_215", "prediction": "all x.((Maria(x) & -pickyEater(x)) -> SpendsAtMariaIdleHeadsAndChargingFriends(x))", "score": 0}
{"id": "folio_validation_215", "prediction": "all x.((Mary(x) & -pickyEater(x)) -> (SpendingEats(x) & CatchingUpWithFriendsInDesserts(x)))", "score": 0}
{"id": "folio_validation_215", "prediction": "all x.(Maria(x) / -CpickyEater(x) & SpendsAlotOfTimeEatingAndCatchingUpWithFriends(x))", "score": -1}
{"id": "folio_validation_215", "prediction": "all x.((Mama(x) & -CpickyEather(x)) -> SpendsTooAndEatsInCampusDiningHouses(x))", "score": 0}
{"id": "folio_validation_215", "prediction": "all x.((HasEatingHouse(x) & -CrinklesFriends(x)) -> SpendsByAndInDegrees(x))", "score": 0}
{"id": "folio_validation_215", "prediction": "all x.((Mary(x) & -PoolyEater(x)) -> (SpoilyEatler(x) & SpendsTimeEating(x) & CatchingUp(x)))", "score": 0}
{"id": "folio_validation_215", "prediction": "all x.((Mary(x) & -CpickyEater(x)) -> (SpoilsEating(x) & ClucksUpWithFamilies(x)))", "score": 0}
{"id": "folio_validation_216", "prediction": "all x.((Desert(x) & -PickyEather(x)) | (SpoilsAsToOfIndulgence(x) | SpendsAtEating(x) & CatchingUpWithFriends(x))))", "score": -1}
{"id": "folio_validation_216", "prediction": "all x.((Mama(x) & -CirculousEather(x)) -> (CausingEating(x) & CatchingUpWithFriends(x)))", "score": 0}
{"id": "folio_validation_216", "prediction": "all x.((Mary(x) & -ChicyEater(x)) | (Spoilage(x) & EatsAndCatchupsWithFriends(x))))", "score": -1}
{"id": "folio_validation_216", "prediction": "all x.((Miriam(x) & -pickyEather(x)) | (-pickyEater(x) & SpendsPartOfEatingAndCatchupWith(x,matemate))))", "score": -1}
{"id": "folio_validation_216", "prediction": "all x.((Mary(x) & -pickyEarner(x)) | (EatsAndCatchingUpWithFriends(x) & CampusDining Halls(x))))", "score": -1}
{"id": "folio_validation_216", "prediction": "all x.((Mary(x) &/Or(x)) -> (-pickyEaser(x) | (-CpickyEaser(x) & CampusDining(x)))))", "score": -1}
{"id": "folio_validation_216", "prediction": "all x.((Mary(x) & -pickyEather(x)) | (-pickyEather(x) & SpendsAtWashington(x))))", "score": -1}
{"id": "folio_validation_216", "prediction": "(Whichever(Maria) & -PickyEather(Maria)) | (InDesiresEating(Mary) & CatchingUpWithFriends(Mary))))", "score": -1}
{"id": "folio_validation_216", "prediction": "all x.((Mary(x) & -PickyEather(x)) | (-PickyEater(x) & SpendsLittleTimeEatingInDiningHouses(x))))", "score": -1}
{"id": "folio_validation_216", "prediction": "all x.((Mary(x) & -PickyEater(x)) | (-PickyEater(x) & SpendsLotOfTimeEating(x) & CatchingUpInDesserts(x))))", "score": -1}
{"id": "folio_validation_216", "prediction": "(i.e.,-pickyEather(i) & SpendsLittleTimeEatingInCampusDiningHollows(i))", "score": -1}
{"id": "folio_validation_216", "prediction": "(all x.((Mary(x) & -pickyEater(x)) | (-pickyEater(x) & SpendsLoadsEatingInDiningHouses(x))))", "score": 0}
{"id": "folio_validation_216", "prediction": "all x.((Mary(x) & -pickyEatter(x)) | (-PickyEater(x) & SpendsLoisanceSpendingInCampusDiningHouses(x))))", "score": -1}
{"id": "folio_validation_216", "prediction": "all x.((Mary(x) & -pickyEacher(x)) | (-CatchyEacher(x) | SpendsLittleTimeEatingAndCatchingUpWithFriends(x))))", "score": -1}
{"id": "folio_validation_216", "prediction": "all x.((Mary(x) & -pickyEater(x)) | (-pickyEater(x) & SpendsLotsOfEatInCampusDiningHalls(x))))", "score": -1}
{"id": "folio_validation_216", "prediction": "exists x.(Mama(x) & ((-PickyEater(x) & SpendsAlotOfEating(x) & SpendsMoreThanFriends(x)) -> SpendsTimeInDegrees(x)))", "score": 0}
{"id": "folio_validation_217", "prediction": "-exists x.(Bakery(x) & Spicy(x))", "score": 2}
{"id": "folio_validation_217", "prediction": "inall x.(Bakery(x) -> Spicy(x))", "score": -1}
{"id": "folio_validation_217", "prediction": "KeenBakeryIsSpicy(x)", "score": 0}
{"id": "folio_validation_217", "prediction": "(NoBakeryIsSpicy(bashing))", "score": 0}
{"id": "folio_validation_218", "prediction": "all x.(Cupcake(x) -> Bakeries(x))", "score": 2}
{"id": "folio_validation_218", "prediction": "all x.(Cuppy(x) -> Bakeries(x))", "score": 2}
{"id": "folio_validation_218", "prediction": "all x.(Cupcake(x) -> Bakery(x))", "score": 0}
{"id": "folio_validation_219", "prediction": "all x.(Hotpot(x) -> Spicy(x))", "score": 0}
{"id": "folio_validation_220", "prediction": "all x.((Product(x) & BakedByMelissa(x)) -> Cupcake(x))", "score": 2}
{"id": "folio_validation_220", "prediction": "all x.((BakedByMelanie(x) & Produce(x)) -> Cupcake(x))", "score": 0}
{"id": "folio_validation_220", "prediction": "all x.((BakedByMelissa(x) & BakedByMelissa(x)) -> Cupcake(x))", "score": 0}
{"id": "folio_validation_220", "prediction": "all x.(((Product(x) & BakedByMelissa(x)) -> Cupcake(x))", "score": -1}
{"id": "folio_validation_220", "prediction": "all x.((BakedByMelissa(x) & Product(x)) -> Cupcake(x))", "score": 0}
{"id": "folio_validation_220", "prediction": "all x.(BakedByMelissa(x) -> Cupcake.", "score": -1}
{"id": "folio_validation_221", "prediction": "all x.((DriedThaiChickles(x) & (Spicy(x) | Bakery(x))) -> (Hotpot(x) | Spicy(x)))", "score": 2}
{"id": "folio_validation_221", "prediction": "all x.((DriedThaiChicken(x) & (Spicy(x) | Bakery(x))) -> (Hotpot(x) | Spicy(x)))", "score": 0}
{"id": "folio_validation_221", "prediction": "all x.((DriedThaiChili(x) & (Spicy(x) | Bakery(x))) -> (Hotpot(x) | Spicy(x)))", "score": 0}
{"id": "folio_validation_221", "prediction": "all x.((DryThaiChili(x) & (Spicy(x) | Bakery(x))) -> (Hotpot(x) | Spicy(x)))", "score": 0}
{"id": "folio_validation_222", "prediction": "all x.(DriedThaiChinese(x) -> BakedByMelissa(x))", "score": 0}
{"id": "folio_validation_222", "prediction": "all x y.((DriedThaiChili(x) & BakedByMelissa(y)) -> Product(x,y))", "score": 0}
{"id": "folio_validation_222", "prediction": "all x y.((DriedThaiChili(x) & Melissa(y)) -> Product(y,BakedBy(z))", "score": -1}
{"id": "folio_validation_222", "prediction": "all x.((DriedThaiChili(x) & BakedByMelissa(x)) -> IntegratedProductAndStore(x))", "score": 0}
{"id": "folio_validation_222", "prediction": "all x.((ThaiChili(x) & BakedByMelissa(x)) -> Dried(x))", "score": 0}
{"id": "folio_validation_222", "prediction": "all x.(DriedThaiChili(x) -> BakedByMelissa(x))", "score": 0}
{"id": "folio_validation_222", "prediction": "all x y.((ThaiChiefe(x) & BakedByMelissa(y)) -> ProducedBy(x,y))", "score": 0}
{"id": "folio_validation_222", "prediction": "all x.((DriedThaiChili(x) & BakedByMelissa(x)) -> ProductOfPlainThan(x))", "score": 0}
{"id": "folio_validation_222", "prediction": "all x y.((DriedThaiChili(x) & Melissa(y)) -> Baked(x,y))", "score": 0}
{"id": "folio_validation_222", "prediction": "all x y.((ThaiChili(x) & BakedByMelissa(y)) -> Dried(x,y))", "score": 0}
{"id": "folio_validation_222", "prediction": "all x.((DriedThaiChili(x) & BakedByMelissa(x)) -> Product(x))", "score": 0}
{"id": "folio_validation_222", "prediction": "All x.((ThaiChili(x) & BakedByMelissa(x)) -> Dried(x))", "score": -1}
{"id": "folio_validation_222", "prediction": "the best selling(ThaiChinese) & BakedByMelissa(ThanCheeseByMelissa(t))", "score": -1}
{"id": "folio_validation_223", "prediction": "all x.(DriedThaiChinese(x) -> -(BakedByMelissa(x) | BakedByMelissa(x)))", "score": 0}
{"id": "folio_validation_223", "prediction": "all x.((DriedThaiChinese(x) & -BakedByMelissa(x)) -> -Product(x))", "score": 0}
{"id": "folio_validation_223", "prediction": "all x.((DriedThaiChinese(x) & -BakedByMelissa(x)) -> -BakedByMelissa(x))", "score": 0}
{"id": "folio_validation_223", "prediction": "all x.(DriedThaiChili(x) -> -BakedByMelissa(x))", "score": 1}
{"id": "folio_validation_223", "prediction": "all x y.((ThaiChili(x) & Rice(y)) -> -BakedByMelissa(x,y))", "score": 0}
{"id": "folio_validation_223", "prediction": "(-ProductOfBakedByMelissa(THailandChinese))", "score": 0}
{"id": "folio_validation_223", "prediction": "all x.((DriedThaiChinese(x) & -BakedByMelissa(x)) -> -ProductOf(x,BakedByMelissa))", "score": 0}
{"id": "folio_validation_223", "prediction": "all x.(DriedThaiChinese(x) -> -BakedByMelissa(x))", "score": 0}
{"id": "folio_validation_223", "prediction": "all x.(DriedThaiChili(x) & -BakedByMelissa(x))", "score": 0}
{"id": "folio_validation_223", "prediction": "all x.(DriedThaiChili(x) -> -(BakedByMelissa(x) | BakedByMelissa(x)))", "score": 1}
{"id": "folio_validation_223", "prediction": "all x.((ThaiChinese(x) & BakedByMelissa(x)) -> -ProductOf(x,y))", "score": 0}
{"id": "folio_validation_223", "prediction": "all x.((DriedThaiChili(x) & -BakedByMelissa(x)) -> -ProductOf(x,y))", "score": 0}
{"id": "folio_validation_223", "prediction": "all x.((DriedThaiChicken(x) & -ProductOfBakedByMelissa(x)) -> -BakedByMelissa(x))", "score": 0}
{"id": "folio_validation_223", "prediction": "all x.((DriedThaiChili(x) & -BakedByMelissa(x)) -> -(DriedThaiChili) & BakedByMelissa(x)))", "score": -1}
{"id": "folio_validation_224", "prediction": "all x.(DriedThaiChili(x) -> Hotpot(x))", "score": 0}
{"id": "folio_validation_224", "prediction": "all x.((ThaiChili(x) & Dried(x)) -> Hotpot(x))", "score": 0}
{"id": "folio_validation_224", "prediction": "all x.((DriedThaiChili(x) & Hotpot(x)) -> Chilli(x))", "score": 0}
{"id": "folio_validation_224", "prediction": "all x.((DriedThaiChinese(x) & Hotpot(x)) -> Dry(x))", "score": 0}
{"id": "folio_validation_224", "prediction": "all x.((DriedThaiChili(x) & Hotpot(x)) -> Tried(x))", "score": 0}
{"id": "folio_validation_224", "prediction": "all x.((DriedThaiChili(x) & Hotpot(x)) -> ThaiChili(x))", "score": 0}
{"id": "folio_validation_224", "prediction": "all x.(DriedThaiChinese(x) -> Hotpot(x))", "score": 0}
{"id": "folio_validation_224", "prediction": "all x.((DriedThaiChili(x) & Hotpot(x)) -> DriedThaiChili(x))", "score": 0}
{"id": "folio_validation_224", "prediction": "all x.((DriedThaiChili(x) & Hotpot(x)) -> Hotpot(x))", "score": 0}
{"id": "folio_validation_225", "prediction": "all x.((ThaiChili(x) & BakedByMelissa(x)) -> -(ProductOf(x,BakedByMelissa) | BakedByBakery(x)))", "score": 0}
{"id": "folio_validation_225", "prediction": "(DriedThaiChicken(Thai) & -(BakedByMelissa(Thai) & -Bakery(Thai)))", "score": 0}
{"id": "folio_validation_225", "prediction": "all x.((ThaiChili(x) & BakedByMelissa(x)) -> -(ProductOf(x,BakedByMelissa) | Bakery(x)))", "score": 0}
{"id": "folio_validation_225", "prediction": "all x.((ThaiChicken(x) & BakedByMelissa(x)) -> -(Bakery(x) | Bakery(x)))", "score": 0}
{"id": "folio_validation_225", "prediction": "all x.(DriedThaiChinese(x) -> ((BakedByMelissa(x) & -Bakery(x)) | (-Bakery(x) & BakedByMelissa(x)))))", "score": -1}
{"id": "folio_validation_225", "prediction": "all x.(DriedThaiChili(x) -> ((BakedByMelanie(x) & -Bakery(x))))", "score": 0}
{"id": "folio_validation_225", "prediction": "all x y.((DriedThaiChili(x) & BakedByMelissa(y)) -> (-BakedByMelissa(x) & -Bakery(y)))", "score": 0}
{"id": "folio_validation_225", "prediction": "all x.((ThaiChili(x) & -(BakedByMelissa(x) | Bakery(x))) -> Dried (x)))", "score": -1}
{"id": "folio_validation_225", "prediction": "all x.(DriedThaiChili(x) -> (BakedByMelissa(x) & -Bakery(x)))", "score": 0}
{"id": "folio_validation_225", "prediction": "all x.((ThaiChili(x) & -(BakedByMelissa(x) | Bakery(x))) -> Dried(x))", "score": 0}
{"id": "folio_validation_225", "prediction": "all x.((ThaiChicken(x) & BakedByMelissa(x)) -> -Bakery(x))", "score": 0}
{"id": "folio_validation_225", "prediction": "all x.((ThaiChili(x) & -(BakedByMelissa(x) | Bakery(x))) -> DriedLaos(x))", "score": 0}
{"id": "folio_validation_225", "prediction": "all x.(DoriedThaiChicken(x) -> (NeemProduct(x) & -Product(x) & -Bakery(x)))", "score": 0}
{"id": "folio_validation_225", "prediction": "all x.((ThaiChinese(x) & BakedByMelissa(x) & -Bakery(x)) -> Dried(x))", "score": 0}
{"id": "folio_validation_225", "prediction": "all x.((ThaiChinese(x) & -BakedByMelissa(x)) -> -Bakery(x))", "score": 0}
{"id": "folio_validation_225", "prediction": "all x.(DriedThaiChicken(x) -> (BakedByMelain(x) & -Bakery(x)))", "score": 0}
{"id": "folio_validation_226", "prediction": "all x.(DriedThaiChili(x) -> (Cupcake(x) & BakedByMelissa(x)))", "score": 0}
{"id": "folio_validation_226", "prediction": "all x.(DriedThaiChili(x) -> (Coffees(x) & BakedByMelissa(x)))", "score": 0}
{"id": "folio_validation_226", "prediction": "all x.((ThaiChili(x) & BakingByMelissa(x)) -> (Coffee(x) & ProductOf(x,BakedByMelissa)))", "score": 0}
{"id": "folio_validation_226", "prediction": "all x.(DriedThaiChicken(x) -> (Coffee(x) & ProductOfBakedByMelissa(x)))", "score": 0}
{"id": "folio_validation_226", "prediction": "all x.((ThaiChili(x) & Cupcake(x) & RecipeOfBakedByMelissa(x)) -> Dried(x))", "score": 0}
{"id": "folio_validation_226", "prediction": "all x.(DriedThaiChili(x) -> (Cupcake(x) & ProductOfBakedByMelissa(x)))", "score": 0}
{"id": "folio_validation_226", "prediction": "all x.((ThaiChili(x) & Cake(x)) -> BakedByMelissa(x))", "score": 0}
{"id": "folio_validation_226", "prediction": "all x y.((DriedThaiChilies(x) & Cupcake(y)) -> (Coffee(x) & Product(y) & BakedByMelissa(y)))", "score": 0}
{"id": "folio_validation_226", "prediction": "(Cupcake(ThaiChili) & BakedByMelissa(DriedThaiChili))", "score": 0}
{"id": "folio_validation_226", "prediction": "((DriedThaiChilibes(th) & Cupcake(c) & BakedByMelissa(g)))", "score": 0}
{"id": "folio_validation_226", "prediction": "all x.(DriedThaiChilie(x) -> (Coffee(x) & BakedByMelissa(x)))", "score": 0}
{"id": "folio_validation_226", "prediction": "all x.(DriedThaiChinese(x) -> (Cuisine(x) & ProductOfBakedByMelissa(x)))", "score": 0}
{"id": "folio_validation_227", "prediction": "all x.((Restaurant(x) & ListedInYelpRecommendations(x)) -> -ReceivesNegativeReviews(x))", "score": 0}
{"id": "folio_validation_227", "prediction": "all x.((Restaurant(x) & ListedInYelpRecommendations(x)) -> -ReceivesManyNegativeReviews(x))", "score": 0}
{"id": "folio_validation_227", "prediction": "all x.((Restaurant(x) & YelpRecommendations(x)) -> -ReceivesNegativeReviews(x))", "score": 0}
{"id": "folio_validation_227", "prediction": "all x y.((Restaurant(x) & YelpRecommendations(y)) -> -FullScreeningReviews(x))", "score": 0}
{"id": "folio_validation_227", "prediction": "all x.(ListedInYelpRecommendations(x) -> -ManyNegativeReviews(x))", "score": 0}
{"id": "folio_validation_227", "prediction": "all x.(ListensInYelpRecommendations(x) -> -SeveralNegativeReviews(x))", "score": 0}
{"id": "folio_validation_227", "prediction": "all x.((Restaurant(x) & YelpRecommendations(x)) -> -(ManyNegativeReviews(x) | -ManyNegativeReviews(x))))", "score": -1}
{"id": "folio_validation_227", "prediction": "all x.((Restaurant(x) & YelpRecommendations(x)) -> -NegativeReviews(x))", "score": 0}
{"id": "folio_validation_227", "prediction": "all x.(ListedInYelpsRecommendations(x) -> -ReceivesNegativeReviews(x))", "score": 0}
{"id": "folio_validation_227", "prediction": "all x.((Restaurant(x) & ListedInYelpRecommendations(x)) -> -ManyNegativeReviews(x))", "score": 0}
{"id": "folio_validation_227", "prediction": "all x y.((Restaurant(x) & YelpRecommendations(y)) -> -NegativeReviews(x,y))", "score": 0}
{"id": "folio_validation_227", "prediction": "all x y.((Restaurant(x) & ListedInYelpRecommendations(x,y)) -> -ReceivesNegativeReviews(x))", "score": 0}
{"id": "folio_validation_227", "prediction": "all x.((Restaurant(x) & ListedInYelpRecommendations(x)) -> -MulteNegativeReviews(x))", "score": 0}
{"id": "folio_validation_227", "prediction": "all x.((Restaurant(x) & ListedInYelpRecommendations(x)) -> -(NoNegativeReviews(x) | NegativeReviews(x))))", "score": -1}
{"id": "folio_validation_228", "prediction": "all x.((Restaurant(x) & RatingGreaterThan9(x)) -> List inYelpRecommendations(x))", "score": -1}
{"id": "folio_validation_228", "prediction": "all x.((Restaurant(x) & RatingGreaterThan9(x)) -> ListedInYelpRecommendations(x))", "score": 0}
{"id": "folio_validation_228", "prediction": "all x.((Restaurant(x) & RatingGreaterThan(x,9)) -> AssembledInYelpRecommendations(x))", "score": 0}
{"id": "folio_validation_228", "prediction": "all x.((RatingGreaterThan(x,9)) -> YelpRecommendations(x))", "score": 0}
{"id": "folio_validation_228", "prediction": "all x.((RestaurantRatingGreaterThan9(x)) -> YelpRecommendations(x))", "score": 0}
{"id": "folio_validation_228", "prediction": "all x.((Restaurant(x) & RatingGreaterThan(x,9)) -> ListedInYelpsRecommendations(x))", "score": 0}
{"id": "folio_validation_228", "prediction": "all x.((Restaurant(x) & RatingGreaterThan(x,9)) -> YelpRecommendations(x))", "score": 0}
{"id": "folio_validation_228", "prediction": "all x.((Restaurant(x) & RatingGreaterThan9(x)) -> ListedInYelprecommendations(x))", "score": 0}
{"id": "folio_validation_228", "prediction": "all x.((Restaurant(x,y) & RatingGreaterThan9(y)) -> YelpRecommendation(x,y))", "score": 0}
{"id": "folio_validation_228", "prediction": "all x.((Restaurant(x) & RatingGreaterThan(x,9)) -> ListedInYelpRecommendations(x))", "score": 0}
{"id": "folio_validation_228", "prediction": "all x.((Restaurant(x) & GreaterThan(x,9)) -> ListedInYelpRecommendations(x))", "score": 0}
{"id": "folio_validation_228", "prediction": "all x.((Restaurant(x) & RatingGreaterThan9(x)) -> YelpRecommendations(x))", "score": 0}
{"id": "folio_validation_228", "prediction": "all x.((Restaurant(x) & RatingGreaterThan(x,9)) -> InRecommendations(x))", "score": 0}
{"id": "folio_validation_229", "prediction": "exists x.(Restaurant(x) & -ProvidesTakeOutService(x))", "score": 0}
{"id": "folio_validation_229", "prediction": "exists x.(Restaurant(x) & -ProvidesTakeOutService(x) & ReceivesManyNegativeReviews(x))", "score": 0}
{"id": "folio_validation_229", "prediction": "exists x.(Restaurant(x) & DoesNotProvidesTakeOutService(x)) -> ManyNegativeReviews(x))", "score": -1}
{"id": "folio_validation_229", "prediction": "exists x.(Restaurant(x) & -ProvidesTakeOutService(x) & ReceivesNegativeReviews(x))", "score": 0}
{"id": "folio_validation_229", "prediction": "exists x.(Restaurant(x) & -InsuresTakeOut(x) & ManyNegativeReviews(x))", "score": 0}
{"id": "folio_validation_229", "prediction": "exists x.((Restaurant(x) & -ProvidesTakeOutService(x)) -> ReceivesAvailableNegativeReviews(x))", "score": 0}
{"id": "folio_validation_229", "prediction": "exists x.((Restaurant(x) & -ProvidesTakeOutService(x)) -> ReceivesManyNegativeReviews(x))", "score": 0}
{"id": "folio_validation_229", "prediction": "exists x.(Restaurant(x) & -providesTakeOutService(x))", "score": 0}
{"id": "folio_validation_229", "prediction": "exists x.((Restaurant(x) & -PursuesTakeOutService(x)) -> ManyNegativeReviews(x))", "score": 0}
{"id": "folio_validation_230", "prediction": "all x.((Restaurant(x) & PopularAmongLocalResidents(x)) -> BetterRatingsThanRatings(x,9))", "score": 0}
{"id": "folio_validation_230", "prediction": "all x.((Restaurant(x) & PopularAmongLocalResidents(x) IsGreaterThan(x,9)) -> HasRatingsGreaterThan(x,9))", "score": -1}
{"id": "folio_validation_230", "prediction": "all x.((Restaurant(x) & PopularAmongLocalResidents(x)) -> RatingsGreaterThan(x,9))", "score": 0}
{"id": "folio_validation_230", "prediction": "all x.((Restaurant(x) & PopularAmongLocalResidents(x)) -> RatingGreaterThan(x,9))", "score": 0}
{"id": "folio_validation_230", "prediction": "all x.((Restaurant(x) & PopularAmongLocalResidents(x)) -> HasRatingsGreaterThan(x))", "score": 0}
{"id": "folio_validation_230", "prediction": "all x.((Restaurant(x) & PopularAmongLocalResidents(x)) -> HasRatingsGreaterThan(x,9))", "score": 0}
{"id": "folio_validation_230", "prediction": "all x.((Restaurant(x) & PopularWithLocalResidents(x)) -> RatingsGreaterThanFive(x))", "score": 0}
{"id": "folio_validation_230", "prediction": "all x.((Restaurant(x) & PopularWith(x,y) & LocalResidents(y)) -> RatingGreaterThan9).", "score": -1}
{"id": "folio_validation_230", "prediction": "all x y.((Restaurant(x) & PopularAmongLocalResidents(x) & LocalResidentInland(y)) -> HasRatingsGreaterThan(x,9))", "score": 0}
{"id": "folio_validation_230", "prediction": "all x.((Restaurant(x) & PopularAmongLocalResidents(x)) -> HasRatingsOutper9(x))", "score": 0}
{"id": "folio_validation_230", "prediction": "all x.((Restaurant(x) & PopularWithLocalResidents(x)) -> HasRatingsGreaterThan(x,9))", "score": 0}
{"id": "folio_validation_230", "prediction": "all x.((Restaurant(x) & PopularAmongLocalResidents(x)) -> HasRating(x,Equal(x,9))", "score": -1}
{"id": "folio_validation_231", "prediction": "all x.(Subway(x) -> (GoodRating(x,9) | PopularAmongLocalResidents(x)))", "score": 0}
{"id": "folio_validation_231", "prediction": "all x.(Subway(x) -> (ScreeningGreaterThan9(x) | PopularAmongLocalResidents(x)))", "score": 0}
{"id": "folio_validation_231", "prediction": "all x.(Subway(x) -> (PositiveInLocalResidents(x,9)))", "score": 0}
{"id": "folio_validation_231", "prediction": "all x.(Subway(x) -> (AratingGreaterThan(x,9) | PopularAmongLocalResidents(x,10)))", "score": 0}
{"id": "folio_validation_231", "prediction": "all x.(Subway(x) -> (GreaterThan(x,9) | PopularAmongLocalResidents(x)))", "score": 0}
{"id": "folio_validation_231", "prediction": "all x.(Subway(x) -> (RatingGreaterThan(x,9) oder PopularAmongLocalResidents(x)))", "score": -1}
{"id": "folio_validation_231", "prediction": "all x.(Subway(x) -> (ExistsRating(x,9) | PopularAmongLocalResidents(x,6)))", "score": 0}
{"id": "folio_validation_231", "prediction": "all x.(Subway(x) -> (RatingGreaterThan(x,8) | PopularAmongLocalResidents(x)))", "score": 0}
{"id": "folio_validation_231", "prediction": "all x.(Subway(x) -> (HasRatingGreaterThan(x,9) | PopularAmongLocalResidents(x)))", "score": 0}
{"id": "folio_validation_231", "prediction": "all x.(Subway(x) -> (RatingGreaterThan(x,9) | PopularAmongLastResidents(x,9)))", "score": 0}
{"id": "folio_validation_231", "prediction": "all x.(Subway(x) -> (RatingGreaterThanNine(x) | PopularAmongLocalResidents(x)))", "score": 0}
{"id": "folio_validation_231", "prediction": "all x.(Subway(x) -> (EqualRating(x,2) | PopularAmongLocalResidents(x)))", "score": 0}
{"id": "folio_validation_231", "prediction": "all x.(Subway(x) -> ((RatingGreaterThan9(x) | PopularAmongLocalResidents(x))))", "score": 0}
{"id": "folio_validation_231", "prediction": "all x.(Subway(x) -> (HasRatingGerald(x,9) | PopularAmongLocalResidents(x,10)))", "score": 0}
{"id": "folio_validation_231", "prediction": "all x.(Subway(x) -> (RatingGreaterThan(x,9) | PopularAmongLocalResidents(x)))", "score": 0}
{"id": "folio_validation_232", "prediction": "all x.((Subway(x) & ProvidesTakeOutService(x) & NumerousNegativeReviews(x)) -> (RatingGreaterThan9(x) & -ProvidesTakeOutService(x)))", "score": 0}
{"id": "folio_validation_232", "prediction": "all x.((Subway(x) & TakeOutService(x) & ManyNegativeReviews(x)) -> (RatingGreaterThan9(x) & -PreparesTakeOutService(x)))", "score": 0}
{"id": "folio_validation_232", "prediction": "all x.((Subway(x) & ProvidesTakeOutService(x) & ReceivesManyNegativeReviews(x)) -> (RatingGreaterThan(x,9) & -ProvidesTakeOutService(x)))", "score": 0}
{"id": "folio_validation_232", "prediction": "all x.((Subway(x) & ProvidesTakeOutService(x) & ManyNegativeReviews(x)) -> RatingGreaterThan(x,9))", "score": 0}
{"id": "folio_validation_232", "prediction": "all x.((Subway(x) & ProvidesTakeOutService(x) & ManyNegativeReviews(x)) -> (RatingGreaterThan9(x) & -ProvidingTakeOutService(x)))", "score": 0}
{"id": "folio_validation_232", "prediction": "all x.((Subway(x) & ProvidesTakeOutService(x) & ManyDepressiveReviews(x)) -> (RatingGreaterThan9(x) & -ProvidesTakeOutService(x)))", "score": 0}
{"id": "folio_validation_232", "prediction": "all x.((Subway(x) & ProvidesTakeOutService(x) & ManyNegativeReviews(x)) -> RatingGreaterThan9(x))", "score": 0}
{"id": "folio_validation_232", "prediction": "all x.((Subway(x) & ProvidesTakeOutService(x) & ManyNegativeReviews(x)) -> RatingGreaterThan9AndDoesNotProvidesTakeOutService(x))", "score": 0}
{"id": "folio_validation_232", "prediction": "all x.((Subway(x) & ProvidesTakeOutService(x) & ReceivesManyNegativeReviews(x)) -> (RatingGreaterThan9(x) & -ProvidesTakeOutService(x)))", "score": 0}
{"id": "folio_validation_232", "prediction": "all x.((Subway(x) & ProvidesTakeOutService(x) & ReceivesManyNegativeReviews(x)) -> RatingGreaterThan(x,9) & -ProvidesTakeOutService(x))", "score": 0}
{"id": "folio_validation_232", "prediction": "all x.((Subway(x) & ProvidesTakeOutService(x) & ManyNegativeReviews(x)) -> (PositiveRating(x,9) & -TakeOutService(x)))", "score": 0}
{"id": "folio_validation_232", "prediction": "all x.((Subway(x) & ProvidesTakeOutService(x) & ManyNegativeReviews(x)) -> (RatingGreaterThan9(x) & -ProvidesTakeOutService(x)))", "score": 0}
{"id": "folio_validation_232", "prediction": "all x.((Subway(x) & Takeout(x) & MultipleNegativeReviews(x)) -> (GreaterThan(x,9) & -ProvidesTakeOut(x)))", "score": 0}
{"id": "folio_validation_233", "prediction": "all x.(Subway(x) -> (ProvidesTakeOutService(x) & -ReceivesNegativeReviews(x)))", "score": 0}
{"id": "folio_validation_233", "prediction": "all x.(Subway(x) -> (ProvidesTakeOutService(x) & -ReceivesManyNegativeReviews(x)))", "score": 0}
{"id": "folio_validation_233", "prediction": "exists x.(Subway(x) & ProvidesTakeOutService(x) & -HasNegativeReviews(x))", "score": 0}
{"id": "folio_validation_233", "prediction": "all x.(Subway(x) -> (NegativeReviews(x) & ProvidesTakeOutService(x)))", "score": 0}
{"id": "folio_validation_233", "prediction": "all x.(Subway(x) -> (ProvidesTakeOutService(x) & -ReceivesDesiredReviews(x)))", "score": 0}
{"id": "folio_validation_233", "prediction": "all x y.((Subway(x) & TakeOutService(y) & -NegativeReviews(x)) -> Offers(x,y))", "score": 0}
{"id": "folio_validation_233", "prediction": "(exists x.(Subway(x) & ProvidesTakeOutService(x)) & -exists y.(Subway(y) & ReceivesNegativeReviews(y)))", "score": 0}
{"id": "folio_validation_233", "prediction": "all x.(Subway(x) -> (ProvidesTakeOutService(x) & -GivenNegativeReviews(x)))", "score": 0}
{"id": "folio_validation_233", "prediction": "all x y.((Subway(x) & TakeOutService(y)) -> ProvidesAndNutricalReviews(x))", "score": 0}
{"id": "folio_validation_233", "prediction": "all x.(Subway(x) -> (PrefersTakeoutService(x) & -ReceivesNegativeReviews(x)))", "score": 0}
{"id": "folio_validation_233", "prediction": "all x.((Subway(x) & ProvidesTake-OutService(x)) -> -ReceivesNegativeReviews(x))", "score": -1}
{"id": "folio_validation_233", "prediction": "all x.(Subway(x) -> (ProvidesTakeOutService(x) & -ReceivesVeryNegativeReviews(x)))", "score": 0}
{"id": "folio_validation_233", "prediction": "all x.(Subway(x) -> (exists y.(TakeoutService(y) & Provides(x,y)) & exists z.(NegativeReview(z) & Receives(x,z)))))", "score": -1}
{"id": "folio_validation_234", "prediction": "all x.(Subway(x) -> -PursueRequest(x))", "score": 0}
{"id": "folio_validation_234", "prediction": "-exists x.(Subway(x) & -ProvidesTakeOutService(x))", "score": 0}
{"id": "folio_validation_234", "prediction": "all x.(Subway(x) -> -ProvidesTakeOutService(x))", "score": 0}
{"id": "folio_validation_234", "prediction": "(-providesTakeOutService(subway))", "score": 0}
{"id": "folio_validation_234", "prediction": "-exists x.(Subway(x) & -providesTakeOutService(x))", "score": 0}
{"id": "folio_validation_234", "prediction": "exists x.(Subway(x) & -ExecutesTakeOutService(x))", "score": 0}
{"id": "folio_validation_234", "prediction": "Subway does not provide TakeOutService(Subway)", "score": -1}
{"id": "folio_validation_234", "prediction": "Subway-exists x.(Subway(x) & -BuysOut(x))", "score": -1}
{"id": "folio_validation_234", "prediction": "Subway provides NoTakeOutService(Subway)", "score": -1}
{"id": "folio_validation_234", "prediction": "all x.(Subway(x) -> -TakeOutService(x))", "score": 0}
{"id": "folio_validation_234", "prediction": "Subway is not a TakeOutService(subway)", "score": -1}
{"id": "folio_validation_234", "prediction": "Exists x.(Subway(x) & -Breakout(x))", "score": -1}
{"id": "folio_validation_234", "prediction": "Subway does not Provide TakeOutService(Subway)", "score": -1}
{"id": "folio_validation_234", "prediction": "all x.(Subway(x) -> -ProvidingTakeOutService(x))", "score": 0}
{"id": "folio_validation_235", "prediction": "all x y.((SuperheroMovie(x) & GoodGuy(y)) -> Win(y,x))", "score": 0}
{"id": "folio_validation_235", "prediction": "all x.((SuperheroMovie(x) & GoodGuys(x)) -> Wins(x))", "score": 0}
{"id": "folio_validation_235", "prediction": "(WinsInSuperheroMovies(goodguys))", "score": 0}
{"id": "folio_validation_235", "prediction": "all x.((Superhero(x) & GoodGuy(x)) -> Wins(x))", "score": 0}
{"id": "folio_validation_235", "prediction": "all x y z.((SuperheroMovie(x) & GoodGuy(y) & -GoodGuy(z)) -> Wins(y,z))", "score": 0}
{"id": "folio_validation_235", "prediction": "all x.(InSuptinctionMovie(x) -> (GoodGuysWin(x) & WinInMovie(x)))", "score": 0}
{"id": "folio_validation_235", "prediction": "all x y.((Superhero(x) & Movie(y)) -> IsGivesWin(x,y))", "score": 0}
{"id": "folio_validation_235", "prediction": "all x.((GoodGuy(x) & SuperheroMovie(x)) -> Wins(x))", "score": 0}
{"id": "folio_validation_235", "prediction": "all x.((SuperheroMovie(x) & GoodGiant(x)) -> Wins(x))", "score": 0}
{"id": "folio_validation_235", "prediction": "all x y.((SuperheroMovie(x) & GoodGuy(x)) -> Wins(x,y))", "score": 0}
{"id": "folio_validation_235", "prediction": "all x y.((Superhero(x) & GoodGuy(y)) -> Wins(y))", "score": 0}
{"id": "folio_validation_235", "prediction": "all x.(SexyMovie(x) -> (GoodGuy(x) | Win(x)))", "score": 0}
{"id": "folio_validation_235", "prediction": "all x.(SupermanMovie(x) -> GoodGuysWin(x))", "score": 0}
{"id": "folio_validation_235", "prediction": "all x.(CapsuleMovie(x) -> Wins(x))", "score": 0}
{"id": "folio_validation_235", "prediction": "all x.((SuperheroMovie(x) & GoodBang(x)) -> Wins(x))", "score": 0}
{"id": "folio_validation_235", "prediction": "all x y z.((SuperheroMovie(x) & GoodGuy(y) & Movie(z) & Wins(y,z)) -> Wins(y,z))", "score": 0}
{"id": "folio_validation_236", "prediction": "The SurprisingDeplorablesOfSir DigbyCircleCame(x) -> SuperheroMovie(x))", "score": -1}
{"id": "folio_validation_236", "prediction": "It’s SuperheroVideo(SirIdibbyCoughedaire(SirDibbyChickenCaesar)", "score": -1}
{"id": "folio_validation_236", "prediction": "all x.((SurprisingAdventuresOfSirDigityChickenCecile(x) & SirDigityCoach(x)) -> SupermanMovie(x))", "score": 0}
{"id": "folio_validation_236", "prediction": "All x.((SurprisingAdventuresOfSir DigbyChickenCast(x) & SirDydigby(x)) -> SuperheroMovie(x))", "score": -1}
{"id": "folio_validation_236", "prediction": "The SurprisingAdventuresOfSir DigbyChildrenCaesar(x) -> SuperheroMovie(x))", "score": -1}
{"id": "folio_validation_236", "prediction": "Das SurprisingAdventuresOfSirDigglyChickenCaesar(SirDigerty(x) -> Movie(x))", "score": -1}
{"id": "folio_validation_236", "prediction": "all x.((SurprisingAdventuresOfSirDigitChickenCaesar(x) & SirGenius(x)) -> SuperheroMovie(x))", "score": 0}
{"id": "folio_validation_236", "prediction": "(SuperheroMovie(SirDigityChickenCaesar) & SurprisingAdventures(SirDigityChicken) (SirDivetyRigby(Caesar) | WonderFilm(Cheesar)))", "score": -1}
{"id": "folio_validation_236", "prediction": "(Movie(Target(SirDigglyChild(SirDiggyChen(SirDiggyCheese)) & SuperheroMan(Gloucester))", "score": -1}
{"id": "folio_validation_236", "prediction": "The SurprisingAdventuresOfColonySirDiggly(SirDigglyCupdad) -> SuperheroMovie(x))", "score": -1}
{"id": "folio_validation_236", "prediction": "The SurprisingAdventuresOfSirDigityChildrenCaesarMovie(SirDigity(SirDigity(SirVicky))", "score": -1}
{"id": "folio_validation_236", "prediction": "(The SurprisingAdventuresOfSirDigbyChickenCaesar(SirDigbyChickenCaesar(Siddley) & Movie(Siddly(Cheese))", "score": -1}
{"id": "folio_validation_236", "prediction": "(SuperheroMovie(SirDigglyChucky(Sir DigbyCaesar)) & Episode 1 & 8 Part(s) & Overwhelming(s))", "score": -1}
{"id": "folio_validation_236", "prediction": "The SurprisingAdventuresOfSirDigbyChickneyCecileMovie(x) -> SuperheroMovie(x))", "score": -1}
{"id": "folio_validation_236", "prediction": "Sir DigbyChildrenCaesarCapsules(26) & SurprisingAdventures(22))", "score": -1}
{"id": "folio_validation_236", "prediction": "all x.((SurprisingAdventuresOfSirDigbyChickenCecile(x) & SirDigglyChickenCecile(x)) -> SuperheroMovie(x))", "score": 0}
{"id": "folio_validation_237", "prediction": "all x.(GoodGuys(x) -> (Fight(x,BadGuys) & Vice Versa(x)))", "score": -1}
{"id": "folio_validation_237", "prediction": "all x y.((GoodGuy(x) & BadGuy(y)) -> -GoodGuy(x))", "score": 0}
{"id": "folio_validation_237", "prediction": "all x y.((GoodGirl(x) & BadGirl(y)) -> (Fights(x,y) & Vice-versa)))", "score": -1}
{"id": "folio_validation_237", "prediction": "all x.(GoodGuy(x) -> (Fight(x,badGuy) & Vice Versa).)", "score": -1}
{"id": "folio_validation_237", "prediction": "all x.(GoodGuys(x) -> (Fight(x,badGuys) & -Fight(x,badGuys)))", "score": 0}
{"id": "folio_validation_237", "prediction": "all x y.((GoodGuy(x) & BadGuy(y)) -> (Fights(x,y) & Vice Versa(x)))", "score": -1}
{"id": "folio_validation_237", "prediction": "(all x.(GoodGuy(x) -> (FightsBadGuys(x) & -FightsBadGuys(x)))", "score": -1}
{"id": "folio_validation_237", "prediction": "all x y.((GoodGuy(x) & BadGuy(y)) -> Fights(x,y))", "score": 0}
{"id": "folio_validation_237", "prediction": "all x y.((GoodGuy(x) & BadGuy(y)) -> (Fights(x,y) & Vice Versa).)", "score": -1}
{"id": "folio_validation_237", "prediction": "all x y.((GoodGuy(x) & BadGuy(y)) -> (Fights(x,y) & Via(x,y)))", "score": 0}
{"id": "folio_validation_237", "prediction": "all x y.((GoodGuy(x) & BadGuy(y)) -> (Fights(x,y) | Fighters(x,y)))", "score": 0}
{"id": "folio_validation_237", "prediction": "all x.(GoodJacket(x) -> (FightsBadJacket(x) & Versatile(x)))", "score": 0}
{"id": "folio_validation_237", "prediction": "all x y.((GoodGuy(x) & BadGuy(y)) -> (Fight(x,y) & Vice Versa(x,y)))", "score": -1}
{"id": "folio_validation_237", "prediction": "all x y z.((GoodGuy(x) & BadGuy(y) & GoodGuy(z)) -> (Fight(x,y) & Combat(z,y)))", "score": 0}
{"id": "folio_validation_237", "prediction": "all x.(GoodGuy(x) -> (FightsBadGuys(x) | (FightsBadGuys(x) | (FightsBadGuys(x)))))", "score": 0}
{"id": "folio_validation_238", "prediction": "Sir Digby FellsNemesis(SirDigby)", "score": -1}
{"id": "folio_validation_238", "prediction": "Sir Digby fightsNemesis(sirDigby)", "score": -1}
{"id": "folio_validation_238", "prediction": "fights(SirDiggsNemesis)", "score": 0}
{"id": "folio_validation_238", "prediction": "Sir DigbyFieldsNemesis(sirDigby)", "score": -1}
{"id": "folio_validation_238", "prediction": "All x.(SirDiggly(x) -> FightsNemesis(x))", "score": -1}
{"id": "folio_validation_238", "prediction": "Sir Digby (sir(diggs) -> LupesNemesis(d))", "score": -1}
{"id": "folio_validation_238", "prediction": "Sir Digby fightsnecesis.", "score": -1}
{"id": "folio_validation_238", "prediction": "(FiresNemesis(SirDigby))", "score": 0}
{"id": "folio_validation_238", "prediction": "(FightsNemesis(Sir Digby))", "score": -1}
{"id": "folio_validation_238", "prediction": "Sir Digby fightsnemesis(SirDigby)", "score": -1}
{"id": "folio_validation_238", "prediction": "Sir Digby is a nemesis & fought(sir,y,x))", "score": -1}
{"id": "folio_validation_238", "prediction": "Sir Digby fights Nemesis(sir,x)", "score": -1}
{"id": "folio_validation_238", "prediction": "Sir Digby fights nemesis.", "score": -1}
{"id": "folio_validation_238", "prediction": "all x y.((SirDiggs(x) & Nemesis(y) & Fighting(x,y)) -> Fighting(x,y))", "score": 0}
{"id": "folio_validation_238", "prediction": "Sir Digby fightsneesis(SirDigby)", "score": -1}
{"id": "folio_validation_239", "prediction": "all x.((SuperheroMovie(x) & NamedAfterCharacter(x)) -> GoodMan(x))", "score": 0}
{"id": "folio_validation_239", "prediction": "all x.((SuperheroMovie(x) & NamedAfterCharacter(x)) -> GoodGuy(x))", "score": 0}
{"id": "folio_validation_239", "prediction": "all x y.((SuperheroMovie(x) & Character(y) & NamedAfter(x,y)) -> GoodGuy(y))", "score": 0}
{"id": "folio_validation_239", "prediction": "all x y z.((SuperheroMovie(x) & Character(y) & Character(z) & NamedAfter(x,y,z)) -> GoodGuy(y))", "score": 0}
{"id": "folio_validation_239", "prediction": "all x y z.((Superhero(x) & Character(y) & Character(z) & NamedAfter(x,y,z)) -> GoodGuy(y,z))", "score": 0}
{"id": "folio_validation_239", "prediction": "all x.((SupermanMovie(x) & NamedAfterCharacter(x)) -> GoodGuy(x))", "score": 0}
{"id": "folio_validation_240", "prediction": "(All x.((SurprisingAdventuresOf(x,SIrdigby) & Sheep(x)) -> NamedAfter(x,Sir Digby))", "score": -1}
{"id": "folio_validation_240", "prediction": "All x.(SurprisingAdventuresOfSirDigglyCaesar(x) -> NamedAfterSirDiggy(x))", "score": -1}
{"id": "folio_validation_240", "prediction": "Sir DigbyChickenCaesar(X) -> SurprisingAdventuresOf(x,Sir Digby))", "score": -1}
{"id": "folio_validation_240", "prediction": "All x y.((SurprisingAdventures(x) & SirDiggly(x) & ChickenCecile(y)) -> NamedAfter(x,y))", "score": -1}
{"id": "folio_validation_240", "prediction": "The SurprisingAdventuresOfSirDigbyChickenCervice(x) -> NamedAfterSirDigginOf(x,i,q))", "score": -1}
{"id": "folio_validation_240", "prediction": "All x.((SurprisingAdventuresOfSirDigby(x) & ChickenCaesar(x)) -> NamedAfterSir Digby(x))", "score": -1}
{"id": "folio_validation_240", "prediction": "(SurprisingAdventuresOfSirDigoryChickenCaesar(SirDigory) -> NamedAfter(SirDigory))", "score": 0}
{"id": "folio_validation_240", "prediction": "The SurprisingAdventuresOfSirDigitaryChickenCaesar (SirDigity(Clavonia) & NamedAfter(Clavonia))", "score": -1}
{"id": "folio_validation_240", "prediction": "-NamedAfterSirDigby(IsSurprisingAdventuresOfSirDigbyCreek(Is))", "score": 0}
{"id": "folio_validation_240", "prediction": "All x y.((SurprisingAdventures(x) & ChickenCaesar(x) & SirDimby(y)) -> NamedAfter(x,y))", "score": -1}
{"id": "folio_validation_240", "prediction": "(BySirDigility(Caves,SirDiggin) | SurprisingAdventures(Caves,SirDiggin)))", "score": -1}
{"id": "folio_validation_240", "prediction": "(SurprisingAdventuresOfSirDigidby(ChickenCaesar) & NamedAfterSirDigidby(Chuck))", "score": 0}
{"id": "folio_validation_240", "prediction": "Sir Digby (Crown(a) & SurprisingAdventures(b))", "score": -1}
{"id": "folio_validation_240", "prediction": "The SurprisingAdventuresOfSirDiggbyChowder(SirDiggby)", "score": -1}
{"id": "folio_validation_240", "prediction": "(SurprisingAdventuresOfSirDigbyChildCecile(SirDigby) -> NamedAfterSirDigby(SirDigby))", "score": 0}
{"id": "folio_validation_240", "prediction": "All x.((SurprisingAdventuresOfSirDiggy(x) & ChickenCaesar(x)) -> NamedAfterSirDiggy(x))", "score": -1}
{"id": "folio_validation_241", "prediction": "all x y.((WonFight(x) & Person(y) & Fighting(x,y)) -> Loses(y))", "score": 0}
{"id": "folio_validation_241", "prediction": "all x y.((WinsFight(x) & Person(y) & Fighting(y)) -> Loses(y))", "score": 0}
{"id": "folio_validation_241", "prediction": "all x y z.((Vises(x,y) & Person(z) & Fighting(x,z)) -> Loses(z,x))", "score": 0}
{"id": "folio_validation_241", "prediction": "all x y.((WinsFight(x) & Person(y)) -> LosesFight(y,x))", "score": 0}
{"id": "folio_validation_241", "prediction": "all x y.((Person(x) & WinsFight(x)) -> LosesFight(y,x))", "score": 0}
{"id": "folio_validation_241", "prediction": "all x y.((WinsFight(x) & Person(y)) -> Loses(y))", "score": 0}
{"id": "folio_validation_241", "prediction": "(WonFight(Person(Person) & Fighting(Person)) -> LosesFight(Person))", "score": -1}
{"id": "folio_validation_241", "prediction": "all x y.((WinsFight(x) & Person(y) & Fighting(y)) -> Loses(y,x))", "score": 0}
{"id": "folio_validation_241", "prediction": "all x y.((WinsFight(x) & Person(y)) -> Loses(y,x))", "score": 0}
{"id": "folio_validation_241", "prediction": "all x.(WinsFish(x) -> LosesPerson(x))", "score": 0}
{"id": "folio_validation_241", "prediction": "all x y.((WinsRun(x) & Person(y)) -> Loses(y))", "score": 0}
{"id": "folio_validation_241", "prediction": "all x y.((Person(x) & WinsFight(x) & Person(y) & Fighting(y)) -> LosesFight(x,y))", "score": 0}
{"id": "folio_validation_241", "prediction": "all x y.((WinsFish(x) & Person(y) & Fighting(y)) -> Loses(y))", "score": 0}
{"id": "folio_validation_241", "prediction": "all x y.((Person(x) & WinsFish(x) & Person(y)) -> LosesFight(y))", "score": 0}
{"id": "folio_validation_241", "prediction": "all x y.((WinsFight(x) & Person(y) & Fighting(x,y)) -> LosesFight(y,x))", "score": 0}
{"id": "folio_validation_241", "prediction": "all x.(WinsFight(x) -> LosesPerson(x))", "score": 0}
{"id": "folio_validation_242", "prediction": "losts(SirDiggsNemesis)", "score": 0}
{"id": "folio_validation_242", "prediction": "(LosesWait(Sir Digby'sNemesis))", "score": -1}
{"id": "folio_validation_242", "prediction": "all x y.((SirDigglyBeesis(x) & Nemesis(y)) -> Loses(x,y))", "score": 0}
{"id": "folio_validation_242", "prediction": "-LosesSirDigbysNemesis(sirDigby)", "score": 0}
{"id": "folio_validation_242", "prediction": "losts(SirDigby'sPhenomenon)", "score": 0}
{"id": "folio_validation_242", "prediction": "the NemesisLoses(sirDiggers(s)", "score": -1}
{"id": "folio_validation_242", "prediction": "all x.((SirDiyonsMemesis(x) & Sir Digby(x)) -> Loses(x))", "score": -1}
{"id": "folio_validation_242", "prediction": "SRigbysNemesisLoses(SirDiggy)", "score": 0}
{"id": "folio_validation_242", "prediction": "NemesisLoses(SirDiggs(SirDiggs) : GetsAtWork(SirDiggsLoss(SirDugby))", "score": -1}
{"id": "folio_validation_242", "prediction": "-LosesSirDiggs Nemesis.", "score": -1}
{"id": "folio_validation_242", "prediction": "all x.((SirDiggs(x) & Nemesis(x,Sir Digby)) -> Loses(x))", "score": -1}
{"id": "folio_validation_242", "prediction": "(LossesNemesis(SirDiggly(Sir Digby))", "score": -1}
{"id": "folio_validation_242", "prediction": "all x.((SirDigityNemesis(x) & SirDiggsMemetic(x)) -> Loses(x))", "score": 0}
{"id": "folio_validation_242", "prediction": "(LosesNemesis(Sir Digby) -> NemesisLoses(Sir Digby))", "score": -1}
{"id": "folio_validation_242", "prediction": "-NemesisLoses(SirDigby)", "score": 0}
{"id": "folio_validation_242", "prediction": "SirDiggsNemesisLoses(SirDiggs)", "score": 0}
{"id": "folio_validation_243", "prediction": "[BG] -all x.(Book(x) -> ContainsKnowledge(x))", "score": -1}
{"id": "folio_validation_243", "prediction": "[BG] Book(s) containing tonsOfKnowledge(s))", "score": -1}
{"id": "folio_validation_243", "prediction": "all x.(Board(x) -> ContainsTonsOfKnowledge(x))", "score": 0}
{"id": "folio_validation_243", "prediction": "[BG] All x.(Book(x) -> ContainsKnowledge(x))", "score": -1}
{"id": "folio_validation_243", "prediction": "all x.(Book(x) & TonsOfKnowledge(x))", "score": 0}
{"id": "folio_validation_243", "prediction": "all x.(Book(x) -> (ContainsKnowledge(x) | ContainsKnowledge(x)))", "score": 0}
{"id": "folio_validation_243", "prediction": "all x.((Book(x) & List(x)) -> IsContainingKnowledge(x))", "score": 0}
{"id": "folio_validation_243", "prediction": "ContainsNumbersOfKnowledge(Book(Book)", "score": -1}
{"id": "folio_validation_243", "prediction": "all x.((Book(x) & ContainsTotaleKnowledge(x)) -> [BG])", "score": 0}
{"id": "folio_validation_243", "prediction": "all x.([BG] -> ContainsTonsOfKnowledge(x))", "score": 0}
{"id": "folio_validation_243", "prediction": "[BG] BooksContainTotalKnowledge(Bible)", "score": -1}
{"id": "folio_validation_243", "prediction": "[BG] Books contain tons of knowledge.", "score": -1}
{"id": "folio_validation_243", "prediction": "all x.(Book(x) -> ContainsTooMoreCuriosity(x))", "score": 0}
{"id": "folio_validation_243", "prediction": "all x y.((Book(x) & Knowledge(y)) -> Contains(x,y))", "score": 0}
{"id": "folio_validation_243", "prediction": "(Reads(BG) | TonsOfKnowledge(B))", "score": 0}
{"id": "folio_validation_243", "prediction": "all xxx.(Book(x) -> ContainsTotalKnowledge(x))", "score": -1}
{"id": "folio_validation_244", "prediction": "[BG] (ReadsBook(Person) & GainsKnowledge(Person))", "score": -1}
{"id": "folio_validation_244", "prediction": "all x y.((Person(x) & ReadsBook(x) & PersonGainsKnowledge(x,y)) -> GainsKnowledge(x))", "score": 0}
{"id": "folio_validation_244", "prediction": "all x y.((Person(x) & ReadsBook(x) & Person(y)) -> GainsKnowledge(x))", "score": 0}
{"id": "folio_validation_244", "prediction": "all x.(ReadsBook(x) -> GainsKnowledge(x))", "score": 0}
{"id": "folio_validation_244", "prediction": "all x y.((Person(x) & Book(y) & Reads(x,y)) -> GainsKnowledge(x,y))", "score": 0}
{"id": "folio_validation_244", "prediction": "[BG] simple(ReadsBook(Person))", "score": -1}
{"id": "folio_validation_244", "prediction": "all x y.((ReadsBook(x) & Person(y) & [BG]) -> GainsKnowledge(y))", "score": 0}
{"id": "folio_validation_244", "prediction": "all x y.((Person(x) & ReadsBook(x,y)) -> GainsKnowledge(x))", "score": 0}
{"id": "folio_validation_244", "prediction": "all x y z.((Person(x) & Book(y) & Reading(x,y) & Book(z)) -> GainsKnowledge(x,z))", "score": 0}
{"id": "folio_validation_244", "prediction": "(ReadsBook(Person) -> GainsKnowledge(Person))", "score": 0}
{"id": "folio_validation_244", "prediction": "all x y.((ReadsBook(x,y) & Person(y)) -> GainsKnowledge(y))", "score": 0}
{"id": "folio_validation_244", "prediction": "all x y.((ReadsBook(x) & Person(y)) -> GainsKnowledge(y))", "score": 0}
{"id": "folio_validation_244", "prediction": "all x y.((Person(x) & Book(y)) -> Reads(x,y))", "score": 0}
{"id": "folio_validation_244", "prediction": "all x y z.((Reads(x,z) & Book(y) & Person(z)) -> GainsKnowledge(z,y))", "score": 0}
{"id": "folio_validation_245", "prediction": "all x.(GrowsKnowledge(x) -> Smarter(x))", "score": 0}
{"id": "folio_validation_245", "prediction": "all x.(Gain(x) -> AgivesWithKnowledge(x))", "score": 0}
{"id": "folio_validation_245", "prediction": "all x.(GrantedKnowledge(x) -> Smarter(x))", "score": 0}
{"id": "folio_validation_245", "prediction": "all x.(GainNewKnowledge(x) -> Smarter(x))", "score": 0}
{"id": "folio_validation_245", "prediction": "[BG] -> ItgainsKnowledge(Person))", "score": -1}
{"id": "folio_validation_245", "prediction": "all x.((Person(x) & GainsKnowledge(x)) -> Smarter(x))", "score": 0}
{"id": "folio_validation_245", "prediction": "all x.(GainsKnowledge(x) -> Smarter(x))", "score": 0}
{"id": "folio_validation_245", "prediction": "all x.[(Person(x) & GainsKnowledge(x)) -> Smarter(x))", "score": -1}
{"id": "folio_validation_245", "prediction": "[BG] -> Smarter(Person))", "score": -1}
{"id": "folio_validation_245", "prediction": "[BG] (GrandKnowledge(Person) & GainsKnowledge(Person,Appreciation)))", "score": -1}
{"id": "folio_validation_245", "prediction": "all x.(GainKnowledge(x) -> Smarter(x))", "score": 0}
{"id": "folio_validation_245", "prediction": "all x y.((Person(x) & GainsKnowledge(x)) -> Smarter(x))", "score": 0}
{"id": "folio_validation_246", "prediction": "Henry Thoreau's \"Ebook(Harry) & \"Walden\"(Harry))", "score": -1}
{"id": "folio_validation_246", "prediction": "(Lets(Harry,Walden) & HenryThorneau(Harry,Thoreau))", "score": 0}
{"id": "folio_validation_246", "prediction": "(readsBook(Harry,Henry(Harry,Thorough) & Walden(Harry,Thorough))", "score": -1}
{"id": "folio_validation_246", "prediction": "Harry reads book & is based on the novel \"Walden\" by Henry Thoreau.", "score": -1}
{"id": "folio_validation_246", "prediction": "\"LessWarden(Harry,Henry Thoreau)\"", "score": -1}
{"id": "folio_validation_246", "prediction": "all x y.((Harry(x) & Book(y) & Thoreau(h)) -> Reads(x,y))", "score": 0}
{"id": "folio_validation_246", "prediction": "Harry reads \"Walden\" by Henry Thoreau.", "score": -1}
{"id": "folio_validation_246", "prediction": "Harry reads \"Warden\" by Henry Thoreau.", "score": -1}
{"id": "folio_validation_246", "prediction": "(Reads(Harry Harry,Book) & (Henry Thoreau(Harry) | Thoreau(Harry))))", "score": -1}
{"id": "folio_validation_246", "prediction": "Harry reads the book \"Walden\" by Henry Thoreau.", "score": -1}
{"id": "folio_validation_246", "prediction": "(Read byHolton Thoreau(Harry) & Book(Harry,Walden))", "score": -1}
{"id": "folio_validation_246", "prediction": "Harry reads book \"Walden\" by Henry Thoreau.", "score": -1}
{"id": "folio_validation_246", "prediction": "Harry reads the book by Henry Thoreau, \"Walden\" \"englisch translation\"", "score": -1}
{"id": "folio_validation_246", "prediction": "Harry read the book \"Walden\" by Henry Thoreau.", "score": -1}
{"id": "folio_validation_246", "prediction": "Lord Harry Reads(Harry,weld) by HenryToreau(Harry,Walden))", "score": -1}
{"id": "folio_validation_247", "prediction": "exists x.(Wilden(x) & Knowledge(x))", "score": 0}
{"id": "folio_validation_247", "prediction": "All x.(Wilden(x) -> Knowledge(x))", "score": -1}
{"id": "folio_validation_247", "prediction": "Walden containsKnowledge(w)", "score": -1}
{"id": "folio_validation_247", "prediction": "all x.(Walden(x) -> containsKnowledge(x))", "score": 0}
{"id": "folio_validation_247", "prediction": "Walden containsKnowledge(Wolfen)", "score": -1}
{"id": "folio_validation_247", "prediction": "all x.(Walden(x) -> ContainsKnowledge(x))", "score": 0}
{"id": "folio_validation_247", "prediction": "Walden contains Knowledge(w)", "score": -1}
{"id": "folio_validation_247", "prediction": "(ContainsKnowledge(Wilden) & Knowledge(Wilden))", "score": 0}
{"id": "folio_validation_247", "prediction": "all x.(Wilden(x) -> InclusivesKnowledge(x))", "score": 0}
{"id": "folio_validation_247", "prediction": "Walden containsWissen(w)", "score": -1}
{"id": "folio_validation_247", "prediction": "Walden containsKnowledge(Walden)", "score": -1}
{"id": "folio_validation_247", "prediction": "Walden containsKnowledge(w) & ContainsKnowledge(w))", "score": -1}
{"id": "folio_validation_248", "prediction": "all x.(Jimmy(x) -> SmarterThanBefore(x))", "score": 0}
{"id": "folio_validation_248", "prediction": "Harry is smarter than Before (Harris(Harry) -> Smarter(Harry))", "score": -1}
{"id": "folio_validation_248", "prediction": "Harry is smarter than before.", "score": -1}
{"id": "folio_validation_248", "prediction": "Harry ist smarterAlso(Harry)", "score": -1}
{"id": "folio_validation_248", "prediction": "all x.(Harry(x) -> SmarterThanBefore(x))", "score": 0}
{"id": "folio_validation_248", "prediction": "Harry(Harry) & SmarterThanBefore(Harry))", "score": -1}
{"id": "folio_validation_248", "prediction": "Harry is smarter thanbefore.", "score": -1}
{"id": "folio_validation_248", "prediction": "Harry SmarterThanBefore(Harry)", "score": -1}
{"id": "folio_validation_248", "prediction": "all x.(Harry(x) -> SmarterThing(x))", "score": 0}
{"id": "folio_validation_248", "prediction": "(Smarter(Harry) quipped)", "score": -1}
{"id": "folio_validation_248", "prediction": "(SmarterCase(Harry)", "score": -1}
{"id": "folio_validation_248", "prediction": "All x.(Harry(x) -> StealerThanBefore(x))", "score": -1}
{"id": "folio_validation_248", "prediction": "(SmarterFront(Harry,before))", "score": 0}
{"id": "folio_validation_249", "prediction": "all x.((Person(x) & Smarter(x)) -> GainedKnowledge(x))", "score": 0}
{"id": "folio_validation_249", "prediction": "ALL x.(Smarter(x) -> GainedKnowledge(x))", "score": -1}
{"id": "folio_validation_249", "prediction": "all x.(Smarter(x) -> GainedKnowledge(x))", "score": 0}
{"id": "folio_validation_250", "prediction": "all x.(NaturalLanguageProcessingTask(x) -> (LanguageGrowthTask(x) | LanguageUnderstandingTask(x)))", "score": 0}
{"id": "folio_validation_250", "prediction": "all x.(NaturalLanguageProcessingTask(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))", "score": 0}
{"id": "folio_validation_250", "prediction": "all x y.((NaturalLanguageProcessingTask(x) & LanguageGenerationTask(y)) | LanguageUnderstandingTask(y))", "score": 0}
{"id": "folio_validation_250", "prediction": "all x.(NaturalLanguageProcessing(x) -> (LanguageGenerationTask(x) | LanguageUnderstandingTask(x)))", "score": 0}
{"id": "folio_validation_250", "prediction": "all x.(NaturalLanguageProcessingTask(x) -> ((LanguageGenerationTask(x) | LanguageUnderstandingTask(x))))", "score": 0}
{"id": "folio_validation_250", "prediction": "all x.(ProcessingNaturalLanguage(x) -> (LiteratureGenerationTask(x) | LanguageUnderstandingTask(x)))", "score": 0}
{"id": "folio_validation_251", "prediction": "all x.((OutputOfNaturalLanguageProcessingTask(x) & TextSequence(x)) -> LanguageGenerationTask(x))", "score": 0}
{"id": "folio_validation_251", "prediction": "all x.((Output(x) & NaturalLanguageProcessingTask(x) & TextSequence(x)) -> LanguageGenerationTask(x))", "score": 0}
{"id": "folio_validation_251", "prediction": "all x.((Bread(x) & NaturalLanguageProcessingTask(x) & TextSequence(x)) -> LanguageGenerationTask(x))", "score": 0}
{"id": "folio_validation_251", "prediction": "all x.((Output(x,y) & NaturalLanguageProcessingTask) & TextSequence(x)) -> LanguageGenerationTask(x))", "score": -1}
{"id": "folio_validation_251", "prediction": "all x.((Execut(x) & NaturalLanguageProcessingTask(x) & TextSequence(x)) -> LanguageGenerationTask(x))", "score": 0}
{"id": "folio_validation_251", "prediction": "all x.((Output(x) & NaturalLanguageProcessing(x) & TextSequence(x)) -> LanguageGenerationTask(x))", "score": 0}
{"id": "folio_validation_251", "prediction": "all x.((NaturalLanguageProcessingTask(x) & TextSequenceOutput(x)) -> LanguageGenerationTask(x))", "score": 0}
{"id": "folio_validation_251", "prediction": "all x y.((NaturalLanguageProcessingTask(x) & OutputTextSequence(x)) -> LanguageGenerationTask(y))", "score": 1}
{"id": "folio_validation_251", "prediction": "all x.((Exput(x) & NaturalLanguageProcessingTask(x) & TextSequence(x)) -> LanguageGenerationTask(x))", "score": 0}
{"id": "folio_validation_252", "prediction": "all x y.((MachineTranslation(x) & NaturalLanguageProcessingTask(y)) -> Abstract(x,y))", "score": 0}
{"id": "folio_validation_252", "prediction": "all x.(MachineTranslation(x) -> NaturalLanguageProcessingTask(x))", "score": 1}
{"id": "folio_validation_252", "prediction": "all x y.((MachineTranslation(x) & NaturalLanguageProcessingTask(y)) -> MachineTest(x))", "score": 0}
{"id": "folio_validation_252", "prediction": "all x y.((MachineTranslation(x) & NaturalLanguageProcessingTask(y)) -> MakesFormat(x,y))", "score": 0}
{"id": "folio_validation_252", "prediction": "all x.(MachineTranslation(x) -> NaturalLanguageComputingTask(x))", "score": 0}
{"id": "folio_validation_252", "prediction": "all x y.((MachineTranslation(x) & NaturalLanguageProcessingTask(y)) -> Is(x,y))", "score": 0}
{"id": "folio_validation_252", "prediction": "all x.(MachineTranslation(x) -> NaturalLanguageProcessingTab(x))", "score": 0}
{"id": "folio_validation_252", "prediction": "all x.(MachineTranslation(x) -> NaturalLawPerformance(x))", "score": 0}
{"id": "folio_validation_253", "prediction": "all x.(MachineTranslation(x) -> TextSequence(x))", "score": 0}
{"id": "folio_validation_253", "prediction": "all x.(MachineTranslation(x) -> OutputTextSequence(x))", "score": 1}
{"id": "folio_validation_253", "prediction": "all x y z.((MachineTranslation(x) & Output(y) & TextSequence(z)) -> Write(x,y,z))", "score": 0}
{"id": "folio_validation_253", "prediction": "all x.((MachineTranslation(x) & OutputData(x)) -> TextSequence(x))", "score": 0}
{"id": "folio_validation_253", "prediction": "all x.(Maschine(x) -> InputTextsequence(x))", "score": 0}
{"id": "folio_validation_253", "prediction": "all x.((MachineTraduction(x) & OutputScripts(x)) -> TextSequence(x))", "score": 0}
{"id": "folio_validation_253", "prediction": "all x.((MachineTranslation(x) & Output(x,TextSequence)) -> MachineTranslation(x))", "score": 0}
{"id": "folio_validation_253", "prediction": "all x y.((MachineTranslation(x) & Output(y,x)) -> TextSequence(y))", "score": 0}
{"id": "folio_validation_253", "prediction": "all x.(MethodTranslation(x) -> OutputTextSequence(x))", "score": 0}
{"id": "folio_validation_253", "prediction": "all x.((MaschinenTranslation(x) & TextSequence(y)) -> Output(x,y))", "score": 0}
{"id": "folio_validation_253", "prediction": "all x.((InputFromMachineTranslation(x) & TextSequence(x)) -> MachineTranslationInMachineTranslation(x))", "score": 0}
{"id": "folio_validation_254", "prediction": "all x.(MachineTranslation(x) -> LanguageGenerationTask(x))", "score": 1}
{"id": "folio_validation_254", "prediction": "all x.(MachineTranslation(x) -> LanguageGeneration(x))", "score": 0}
{"id": "folio_validation_254", "prediction": "all x y.((MachineTranslation(x) & LanguageGenerationTask(y)) -> TranslationTask(x,y))", "score": 0}
{"id": "folio_validation_254", "prediction": "all x.(MachineTranslation(x) -> LanguageGenerationDtay(x))", "score": 0}
{"id": "folio_validation_254", "prediction": "all x y z.((MachineTranslation(x) & LanguageGenerationTask(y) & LanguageGeneration(z)) -> TranslationTask(x,y,z))", "score": 0}
{"id": "folio_validation_254", "prediction": "all x.((MachineTranslation(x) & LanguageGenerationTask(x)) -> TextGenerationTask(x))", "score": 0}
{"id": "folio_validation_254", "prediction": "all x y.((MachineTranslation(x) & LanguageGenerationTask(y)) -> Works(x))", "score": 0}
{"id": "folio_validation_255", "prediction": "all x.(MachineTranslation(x) -> LanguageUnderstandingTask(x))", "score": 0}
{"id": "folio_validation_255", "prediction": "all x.(MachineTranslation(x) -> LanguageUnderstanding(x))", "score": 0}
{"id": "folio_validation_255", "prediction": "all x.(MachineTranslation(x) -> LanguageUnderstandingTime(x))", "score": 0}
{"id": "folio_validation_256", "prediction": "all x.(Pet(x) -> AllowedInManagedBuildings(x))", "score": 0}
{"id": "folio_validation_256", "prediction": "exists x.(ManagedBuilding(x) & AllowsPets(x))", "score": 0}
{"id": "folio_validation_256", "prediction": "all x y.((Pet(x) & ManagedBuilding(y)) -> AllowedIn(x,y))", "score": 0}
{"id": "folio_validation_256", "prediction": "exists x y.((Built(x) & ManagedBuilding(y)) -> Allowable(x))", "score": 0}
{"id": "folio_validation_256", "prediction": "exists x.(Manager(x) & AllowsPet(x))", "score": 0}
{"id": "folio_validation_256", "prediction": "all x.((Pet(x) & ManagedBuildings(x)) -> Allowing(x))", "score": 0}
{"id": "folio_validation_256", "prediction": "all x y.((HasManagedBuilding(x) & ManagedBuilding(y)) -> AllowsPets(x,y))", "score": 0}
{"id": "folio_validation_256", "prediction": "exists x.(MostAdministratedBuilding(x) & AllowsPet(x))", "score": 0}
{"id": "folio_validation_256", "prediction": "exists x.(Pet(x) & ManagedBuilding(x))", "score": 0}
{"id": "folio_validation_256", "prediction": "exists x.(ManagedBuilding(x) & AllowsPet(x))", "score": 0}
{"id": "folio_validation_256", "prediction": "exists x.(ManagedBuilding(x) & AllowsPetsIn(x))", "score": 0}
{"id": "folio_validation_257", "prediction": "all x y z.((Apartment(x) & ManagedBuilding(y) & Argus(z)) -> RequiresDeposit(x,y))", "score": 0}
{"id": "folio_validation_257", "prediction": "all x y.((Board(x) & Apartment(y) & ManagedBuilding(y)) -> RequiresDeposit(x))", "score": 0}
{"id": "folio_validation_257", "prediction": "(Borrowing(BG) -> RequiresDeposit(BG))", "score": 0}
{"id": "folio_validation_257", "prediction": "all x y.((Date(x) & Apartment(y)) -> InManagedBuilding(x,y))", "score": 0}
{"id": "folio_validation_257", "prediction": "[BG] -RequiresDeposit(x))", "score": -1}
{"id": "folio_validation_257", "prediction": "all x y.((Apartment(x) & ManagedBuilding(y) & RequiredDeposit(x,y)) -> RentsIn(x,y))", "score": 0}
{"id": "folio_validation_257", "prediction": "all x y.((Apartment(x) & ManagedBuilding(y)) -> RequiresDeposit(x,y))", "score": 0}
{"id": "folio_validation_257", "prediction": "all x.(Deposit(x) -> RentApartment(x))", "score": 0}
{"id": "folio_validation_257", "prediction": "all x.(RentsApartment(x) -> RequiredDeposit(x))", "score": 0}
{"id": "folio_validation_257", "prediction": "all x y.((Apartment(x) & ManagedBuilding(y)) -> DepositRequired(x,y))", "score": 0}
{"id": "folio_validation_257", "prediction": "all x y.((Apartment(x) & ManagedBuilding(y)) -> RequiredDeposit(x,y))", "score": 0}
{"id": "folio_validation_257", "prediction": "all x y z.((Apartment(x) & ManagedBuilding(y) & Deposit(z)) -> RequiredToRent(x,y,z))", "score": 0}
{"id": "folio_validation_258", "prediction": "all x.(SecurityDeposit(x) -> (EqualMonths(x) | MoreMonths(x)))", "score": 0}
{"id": "folio_validation_258", "prediction": "all x.(SecurityDeposit(x) -> (EqualToMonthsRent(x) | MoreMoreMoreMonthsRent(x)))", "score": 0}
{"id": "folio_validation_258", "prediction": "all x.(SecurityDeposit(x) -> (SeparateToMonthOrMore(x)))", "score": 0}
{"id": "folio_validation_258", "prediction": "all x.(SecurityDeposit(x) -> (OneMonthVisit(x) | MoreMonthVisitSizable(x)))", "score": 0}
{"id": "folio_validation_258", "prediction": "all x.((SecurityDeposit(x) & (MonthLend(x) | MonthLend(x))) -> Equal(x,2))", "score": 0}
{"id": "folio_validation_258", "prediction": "all x.(SecurityDeposit(x) -> (EqualToMonthsRent(x) | More(x)))", "score": 0}
{"id": "folio_validation_258", "prediction": "all x.(SecurityDeposit(x) -> (OneMonth(x) | More(x)))", "score": 0}
{"id": "folio_validation_258", "prediction": "all x.(SecurityDeposit(x) -> (EqualToMonthsRent(x) | MoreMonthsRent(x)))", "score": 0}
{"id": "folio_validation_258", "prediction": "all x.(SecurityDeposit(x) -> (EqualOneMonthRent(x) | MoreMonthsRent(x)))", "score": 0}
{"id": "folio_validation_258", "prediction": "all x.(SecurityDeposit(x) -> ((OneMonth(x) & -OneMonth(x)) | (Remote(x,y) & -more(y))))", "score": 0}
{"id": "folio_validation_258", "prediction": "all x.((SecurityDeposit(x) & (OneMonthRent(x) | MoreMonthsRent(x))) -> SecurityDeposit(x))", "score": 0}
{"id": "folio_validation_258", "prediction": "all x.(SecurityDeposit(x,y) -> (SecurityMonthsRent(y) | MoreSecurityMonthsRent(y)))", "score": 0}
{"id": "folio_validation_258", "prediction": "all x.(SecurityDeposit(x) -> (Equal(x,1Mom(x) | More(x,0Mom(x)))", "score": -1}
{"id": "folio_validation_258", "prediction": "all x.(SafetyDeposit(x) -> ((MonthSold(x) | MonthsRent(x))))", "score": 0}
{"id": "folio_validation_258", "prediction": "all x.(SecurityDeposit(x) ->((MonthRent(x) | MonthRent(x))))", "score": 0}
{"id": "folio_validation_259", "prediction": "Fluffy is Tom's Cat(x)", "score": -1}
{"id": "folio_validation_259", "prediction": "(TomCteacher(Fluffy) & Cat(Fluffy))", "score": 0}
{"id": "folio_validation_259", "prediction": "Tom'sCat(Tim)", "score": 0}
{"id": "folio_validation_259", "prediction": "(TamsCat(Fluffy) & -Tomcat(Fluffy))", "score": 0}
{"id": "folio_validation_259", "prediction": "Fluffy is Tom's cat.", "score": -1}
{"id": "folio_validation_259", "prediction": "Alles x.((Fluffy(x) & TomCat(x)) -> Cat(x))", "score": -1}
{"id": "folio_validation_259", "prediction": "Tom's cat.", "score": -1}
{"id": "folio_validation_259", "prediction": "(TamsCat(Fluffy) & Cat(Flucffy))", "score": 0}
{"id": "folio_validation_259", "prediction": "TomsCat(Flaffy)", "score": 0}
{"id": "folio_validation_259", "prediction": "(Cat(Fluffy) & Tom(Fluffy))", "score": 0}
{"id": "folio_validation_259", "prediction": "(AsKit(Fluffy) & Tom(Floffy))", "score": 0}
{"id": "folio_validation_259", "prediction": "Fluffy is Tom'sCat(x)", "score": -1}
{"id": "folio_validation_259", "prediction": "(Nicky(Pete) & Fluffy(Floffy))", "score": 0}
{"id": "folio_validation_259", "prediction": "Toms(Fluffy)", "score": 0}
{"id": "folio_validation_260", "prediction": "all x.(Cat(x) -> Pet(x))", "score": 0}
{"id": "folio_validation_261", "prediction": "All x.(OliveGarden(x) -> ManagedBuilding(x))", "score": -1}
{"id": "folio_validation_261", "prediction": "all x.(OliveGarden(x) -> ManagedBuilding(x))", "score": 0}
{"id": "folio_validation_261", "prediction": "(ManagedBuilding(OliveGarden)", "score": -1}
{"id": "folio_validation_261", "prediction": "The OliveGarden(OliveGarden) -> ManagedBuilding(OliveGarden))", "score": -1}
{"id": "folio_validation_261", "prediction": "Located at 6 ft above the Sea.", "score": -1}
{"id": "folio_validation_261", "prediction": "The OliveGarden(OliveGarden) est une structure à gérer(OliveGarden) -> Management(OliveGarden,OliveGarden))", "score": -1}
{"id": "folio_validation_262", "prediction": "all x.((MonthlyRent(x,250)) -> OliveGarden(x))", "score": 0}
{"id": "folio_validation_262", "prediction": "(MonthlyRent(OliveGarden) -> $2000)", "score": 0}
{"id": "folio_validation_262", "prediction": "all x.(MealRent(x) -> OliveGarden(x,200))", "score": 0}
{"id": "folio_validation_262", "prediction": "all x.(MealPerMonth(x) -> (OpenOrangeGarden(x) & RentStaff(x,22000)))", "score": 0}
{"id": "folio_validation_262", "prediction": "(MonthlyRent(oliveGarden) : $2000)", "score": -1}
{"id": "folio_validation_262", "prediction": "Der monatlicheRentAtOliveGardenisBeautiful(ove) y.((Monthly(y) & $2000(y)) -> HasPurchases(x,y)))", "score": -1}
{"id": "folio_validation_262", "prediction": "all x.(MundialRent(x) -> (MajorRent(x,200) & OliveGarden(x)))", "score": 0}
{"id": "folio_validation_262", "prediction": "all x.(MonthlyRent(x,Y) -> $2000(y))", "score": 0}
{"id": "folio_validation_262", "prediction": "all x.((MonthlyRent(x,y) & OliveGarden(x)) -> 2000(y))", "score": 0}
{"id": "folio_validation_262", "prediction": "Die OliveGardenMonthlyRent(olivegarden) lte à lgp. 2000.N.V.Metro(oliveGarden)", "score": -1}
{"id": "folio_validation_262", "prediction": "all x.((MonthlyRent(x,y) & OliveGarden(z)) -> $3000000(y))", "score": 0}
{"id": "folio_validation_262", "prediction": "all x.(DualMonthlyRent(x,y) -> OliveGarden(y))", "score": 0}
{"id": "folio_validation_262", "prediction": "all x y.((LunarVenue(x) & OliveGarden(y)) -> MinRent(x,y))", "score": 0}
{"id": "folio_validation_262", "prediction": "all x.(LunarRent(x) & OliveGarden(x))", "score": 0}
{"id": "folio_validation_262", "prediction": "all x.((MonthlyRent(x,y) & OliveGarden(y)) -> $2000(x))", "score": 0}
{"id": "folio_validation_262", "prediction": "all x.(MealBenefits(x,y) -> MonthlyRent(y,$250))", "score": 0}
{"id": "folio_validation_263", "prediction": "all x.((Tom(x) & (LimitedLimitsFluffy(x) | SecurityDepositsBelow(x,500))) -> RentsApartment(x,ManagedBuilding))", "score": 0}
{"id": "folio_validation_263", "prediction": "(all x y.((Form(x) & ManagedBuilding(y) & CanMoveInWithFlucky(x) & NoSecurityDepositMoreThan(x,y)) -> VacuumReserved(x,y)))", "score": 0}
{"id": "folio_validation_263", "prediction": "all x.(RentsTomApartmentInManagedBuilding(x) -> (TomApartment(x) & -(TomAttributesMovesInWithFluffy(x) & SecurityDeposit(x,1000))))", "score": 0}
{"id": "folio_validation_263", "prediction": "all x y.((Tom(x) & ManagedBuilding(y) & MovesInWithFluffy(x,y) & SecurityDeposit(x,y)) -> RentsApartment(x,y))", "score": 0}
{"id": "folio_validation_263", "prediction": "all x y.((ApartmentInManagement(x) & TJFluffy(y) & MoveInWithFluffy(y) & SecurityDepositNotMoreThan1500(y)) -> Rents(x,y))", "score": 0}
{"id": "folio_validation_263", "prediction": "all x y.((HasFloffy(x) & Apartment(y) & ManagedBuilding(x) & AgreesToMoveIn(x,y) & SecurityDepositNotMoreThan(x,y)) -> Rents(x,y))", "score": 0}
{"id": "folio_validation_263", "prediction": "all x y.(((Appartment(x) & ManagedBuilding(y) & Rigor(x) & LetsMoveInWithFluffy(x,y) & SecurityDepositPoundNotMoreThan(x,y)) -> WillRent(x,y))", "score": -1}
{"id": "folio_validation_263", "prediction": "all x y.(((Fluffy(x) & Apartment(y) & ManagedBuilding(x) & AllowedToMoveInWith(x,y) & NoSecurityDepositLimit(x,y)) -> RentsIn(x,y))", "score": -1}
{"id": "folio_validation_263", "prediction": "all x y.((FluffyApartment(x) & Apartment(y) & ManagedBuilding(x) & CanMoveInWith(x,y) & -SecurityDeposit(x,y)) -> Rents(x,y))", "score": 0}
{"id": "folio_validation_263", "prediction": "all x y.((Tom(x) & Apartment(y) & ManagedBuilding(x) & -(AlrightToMoveInWithFluffy(x) | SecurityDepositAmount(x,y))) -> Rents(x,y))", "score": 0}
{"id": "folio_validation_263", "prediction": "all x y.((Apartment(x) & ManagedBuilding(y) & MoveInFluffy(x) & SecurityDeposit(x) & NoMoreThan(x,1,500)) -> Rents(x,y))", "score": 0}
{"id": "folio_validation_263", "prediction": "all s t u.((Tom(t) & ManagedBuilding(i) & MovedInWithFluffy(t) & SecurityDepositlessNoMoreThan$1500(t,y)) -> WillRentApartment(t,e,z))", "score": 0}
{"id": "folio_validation_263", "prediction": "all x y z.((Fluffy(x) & Apartment(y) & Building(z) & Rents(x,y,z)) -> (Attendance(y,x) & IsAdmitted(x,y,z) & -MoveredInWith(x,y,z) & SecurityDeposit(x,w)))", "score": 0}
{"id": "folio_validation_263", "prediction": "all x y.((Tom(x) & ManagedBuilding(y) & MovesInWithFluffy(x) & SecurityDepositsNoMoreThan(x,y)) -> RentsApartment(x,y))", "score": 0}
{"id": "folio_validation_263", "prediction": "all x y.((T Tom(x) & ManagedBuilding(y) & MovesWithWithFluffy(x,y) & SecurityDeposit(x,b,x)) -> Rental(x,y))", "score": -1}
{"id": "folio_validation_263", "prediction": "all x y.((Tom(x) & Apartment(y) & ManagedBuilding(x) & Fluffy(x) & MovesInWith(x,y) & SecurityDepositBelow(y,x)) -> Rents(x,y))", "score": 0}
{"id": "folio_validation_264", "prediction": "(1,200$) -> MoreThan1,500(e))", "score": -1}
{"id": "folio_validation_264", "prediction": "1500$(2000))", "score": -1}
{"id": "folio_validation_264", "prediction": "1000$ is more than (1.00000$) | MoreThan(00000)))", "score": -1}
{"id": "folio_validation_264", "prediction": "all x.((2000$(x) & MoreThan(x,1000)) -> MoreThan(x,1000))", "score": 0}
{"id": "folio_validation_264", "prediction": "(plusPrice(2000) -> MoreThan(2000)))", "score": -1}
{"id": "folio_validation_264", "prediction": "Essai(2000$,moreThan5000$)", "score": 0}
{"id": "folio_validation_264", "prediction": "is more than $1500(2000$)", "score": -1}
{"id": "folio_validation_264", "prediction": "(MoreThanPresidential(2000$)", "score": -1}
{"id": "folio_validation_264", "prediction": "(MoreThan(2000$,1000))", "score": 0}
{"id": "folio_validation_264", "prediction": "(ExposureMoreThan(2000$) -> MoreThan(2000$))", "score": 0}
{"id": "folio_validation_264", "prediction": "1000$ ismoreThan(2000))", "score": -1}
{"id": "folio_validation_264", "prediction": "2000$ is more than $1500.", "score": -1}
{"id": "folio_validation_264", "prediction": "2000$ = MoreThan1500(X))", "score": -1}
{"id": "folio_validation_264", "prediction": "((Budget(2000$) & MoreThan(2000$))", "score": -1}
{"id": "folio_validation_264", "prediction": "All x.(2000$(x) -> MoreThan(x,1000))", "score": -1}
{"id": "folio_validation_264", "prediction": "(1.450$ = MoreThan(2000))", "score": -1}
{"id": "folio_validation_265", "prediction": "(RentsApartmentInOliveGarden(Tam))", "score": 0}
{"id": "folio_validation_265", "prediction": "all x y.((Tom(x) & Olive(y)) -> RentsApartment(x,y))", "score": 0}
{"id": "folio_validation_265", "prediction": "(IsTomRentsApartment(Tom) & InOliveGarden(Tom))", "score": 0}
{"id": "folio_validation_265", "prediction": "all x.(RentsApartment(x) -> OliveGarden(x))", "score": 0}
{"id": "folio_validation_265", "prediction": "Tom RentsApartmentInOliveGarden(Tom)", "score": -1}
{"id": "folio_validation_265", "prediction": "(RentsApartmentInOliveGarden(Tom))", "score": 0}
{"id": "folio_validation_265", "prediction": "has been organising the rent of TheOliveGarden (all x.(Tom(x) -> RentsApartment(x)))", "score": -1}
{"id": "folio_validation_265", "prediction": "tom will rentsApartment(tom,OliveGarden)", "score": -1}
{"id": "folio_validation_265", "prediction": "(RentApartment(Tom,OliveGallery) & InTheOliveGarden(Tom,RentApartment))", "score": 0}
{"id": "folio_validation_265", "prediction": "(RentsIn(Tom,Apartment) | In(Tom,OliveGarden)))", "score": -1}
{"id": "folio_validation_265", "prediction": "all x y.((Tom(x) & Apartment(y)) -> RentsInOliveGarden(x,y))", "score": 0}
{"id": "folio_validation_265", "prediction": "all x.((Tom(x) & OliveGarden(y)) -> RentsApartment(x,y))", "score": 0}
{"id": "folio_validation_265", "prediction": "all x y z.((Tom(x) & Apartment(y) & OliveGarden(z)) -> Rents(x,y))", "score": 0}
{"id": "folio_validation_265", "prediction": "-TomZoningApartment(Tom)", "score": 0}
{"id": "folio_validation_265", "prediction": "(All x.(Tom(x) -> RentApartment(x)))", "score": -1}
{"id": "folio_validation_265", "prediction": "Tom wird einen appartment in OliveGarden(Tom) rented in.", "score": -1}
{"id": "folio_validation_266", "prediction": "all x y.((Tom(x) & Apartment(y) & Fluffy(y)) -> MovesIn(x,y))", "score": 0}
{"id": "folio_validation_266", "prediction": "all x y.((Tom(x) & Apartment(y) & Fluffy(z)) -> MovesIn(x,y,z))", "score": 0}
{"id": "folio_validation_266", "prediction": "all x y.((Tom(x) & Apartment(y) & InOliveGarden(x,y)) -> MovesInApartmentWithFluccy(x,y))", "score": 0}
{"id": "folio_validation_266", "prediction": "all x.((Tom(x) & MovesInApartment(x,InFluffyApartment)) -> ByOliveGarden(x))", "score": 0}
{"id": "folio_validation_266", "prediction": "Everything in TheOliveGardenWithFluffy(Tom) -> MovesInApartment(Tom))", "score": -1}
{"id": "folio_validation_266", "prediction": "(AllowedToMoveInApartment(Tom,OliveGarden) & FluffyInApartment(Tom,OliveGarden))", "score": 0}
{"id": "folio_validation_266", "prediction": "(AllowsTomToMoveIn(Tom,OliveGarden) & Fluffy(Tom))", "score": 0}
{"id": "folio_validation_266", "prediction": "all x y.((Tom(x) & Apartment(y) & OliveGarden(y) & Fluffy(z)) -> CanMoveIn(x,y,z))", "score": 0}
{"id": "folio_validation_266", "prediction": "(Apartment(Tom) & MovesIn(Tom,Fluffy))", "score": 0}
{"id": "folio_validation_266", "prediction": "(UsedByFloffyInApartment(Tom) & MovesInOliveGarden(Tom))", "score": 0}
{"id": "folio_validation_266", "prediction": "(AllowsMovement(tom) | Fluffy(tom)))", "score": -1}
{"id": "folio_validation_266", "prediction": "all x y z.((Tommy(x) & Apartment(y) & OliveGarden(z) & Fluffy(x)) -> MoveIn(x,y,z))", "score": 0}
{"id": "folio_validation_266", "prediction": "all x y z.((Apartment(x) & Apartment(y) & OliveGarden(z) & Fluffy(y) & MovesIn(x,y,z)) -> DesignedFor(x,y,x))", "score": 0}
{"id": "folio_validation_266", "prediction": "Tom (AllowedToMoveIn(tom,Fluffy) -> InDelightNation(tom,OliveGarden & With(tom,Fluffy)))", "score": -1}
{"id": "folio_validation_266", "prediction": "all x.(Tom(x) -> ThePrivacyOwner(x))", "score": 0}
{"id": "folio_validation_266", "prediction": "all x y.((Tom(x) & Apartment(y) & OliveGarden(y)) -> MovesWith(x,y))", "score": 0}
{"id": "folio_validation_267", "prediction": "all x.(OliveGarden(x) -> (SecurityDeposit(x,2) & SecurityDeposit(x,2) & SecurityDeposit(x,2)))", "score": 0}
{"id": "folio_validation_267", "prediction": "all x.(OliveGarden(x) -> (SecurityDeposit(x,100) | SecurityDeposit(x,2000)))", "score": 0}
{"id": "folio_validation_267", "prediction": "(SecurityDeposit(OliveGarden) & (ResidesAt(OliveGarden) | MoreStatement(OliveGarden)))", "score": 0}
{"id": "folio_validation_267", "prediction": "all x.((SecurityDeposit(x) & OliveGarden(x)) -> (AmountStandardDeposit(x,MoreThan(x,Y) & $2000(y)))", "score": -1}
{"id": "folio_validation_267", "prediction": "all x.(SecurityDeposit(x) -> ((StaysOwnGarden(x) & (StaysOwnGarden(x) | SightDeposit(x)))))", "score": 0}
{"id": "folio_validation_267", "prediction": "all x.(SecurityDeposit(x) -> (Over $2000) | More(x)))", "score": -1}
{"id": "folio_validation_267", "prediction": "all x y.((SecurityDeposit(x) & OliveGarden(y)) -> ((Entitled(x,y) & For(x,z)) & (Entitled(z,x) & For(x,z)) -> (Entitled(x,z) & For(x,y))))", "score": 0}
{"id": "folio_validation_267", "prediction": "all x.(ServesOliveGarden(x) -> (SecurityDeposit(x,y) & (AmountOf(y,z) | AmountOf(z,x))))", "score": 0}
{"id": "folio_validation_267", "prediction": "all x.((SecurityDeposit(x) & OliveGarden(x)) -> (Worth(x,$2500) | More(x,$2,300)))", "score": 0}
{"id": "folio_validation_267", "prediction": "all x.(Dat(x) -> (SecurityDeposit(x,z) & (2,250) | More(z))))", "score": -1}
{"id": "folio_validation_267", "prediction": "all x.(OliveGarden(x) -> (MoreThan(x,250) | MoreThan(x,2000)))", "score": 0}
{"id": "folio_validation_267", "prediction": "all x.((GlacierGarden(x) & OliveGarden(y) & SecurityDeposit(x,z)) -> (StructureDeposit(z,m) & (-Structure(z,m) | (-Structure(z,w) & $25(z,w))))))", "score": -1}
{"id": "folio_validation_267", "prediction": "all x.(Understood(x,y) -> (SecurityDeposit(y,2) & (SecurityDeposit(x,y) | SecurityDeposit(y,4))))", "score": 0}
{"id": "folio_validation_267", "prediction": "*SecurityDepositAtOliveGarden(x) -> (Budget(x,2000) | Debt(x,250)))", "score": -1}
{"id": "folio_validation_267", "prediction": "all x y.((OliveGarden(x) & SecurityDeposit(y)) -> ((EstablishedAt(x,2500) & HeldAt(x,y))))", "score": 0}
{"id": "folio_validation_267", "prediction": "all x.((SecurityDeposit(x) & OliveGarden(x)) -> (SecondaryDeposit(x,2000) | SecurityDeposit(x,006)))", "score": 0}
{"id": "folio_validation_268", "prediction": "all x.((Animal(x) & FloatedByTourists(x)) -> MaxFavoriteAnimal(x))", "score": 0}
{"id": "folio_validation_268", "prediction": "all x.((Animal(x) & LovedByTourists(x)) -> FavoriteAnimal(x))", "score": 0}
{"id": "folio_validation_268", "prediction": "all x.((Tourist(x) & LovedBy(x,y)) -> FavoriteAnimal(x,x))", "score": 0}
{"id": "folio_validation_268", "prediction": "all x.((Animal(x) & LovedByTourists(x)) -> MaxFavoriteAnimal(x))", "score": 0}
{"id": "folio_validation_268", "prediction": "all x y.((Animal(x) & Tourist(y) & LovedBy(x,y)) -> FavoriteAnimal(x,y))", "score": 0}
{"id": "folio_validation_268", "prediction": "all x y.((Animal(x) & Tourist(y) & LovedBy(x,y)) -> MaxFavorite(x,y))", "score": 0}
{"id": "folio_validation_268", "prediction": "all x.((Anima(x) & LovedByTourists(x)) -> Max’sFavoriteAnimal(x))", "score": 0}
{"id": "folio_validation_269", "prediction": "all x.((Animal(x) & FromAustralia(x)) -> LovedByTourists(x))", "score": 0}
{"id": "folio_validation_269", "prediction": "all x.(AustralianAnimal(x) -> LovedByTourists(x))", "score": 0}
{"id": "folio_validation_269", "prediction": "all x.((Animal(x) & Australian(x)) -> LovedByTourists(x))", "score": 0}
{"id": "folio_validation_269", "prediction": "all x.(All(x) -> LovedByTourists(x))", "score": 0}
{"id": "folio_validation_269", "prediction": "all x.((Animal(x) & fromAustralia(x)) -> LovedByTourists(x))", "score": 0}
{"id": "folio_validation_269", "prediction": "all x.(Attorney(x) -> LikesAllAnimals(x))", "score": 0}
{"id": "folio_validation_269", "prediction": "all x.(Animal(x,y) & FromAustralia(x) -> LovedByTourists(y))", "score": 0}
{"id": "folio_validation_269", "prediction": "all x.((Animal(x) & FromAustralia(x,tourist)) -> LovedBy(x,tourist))", "score": 0}
{"id": "folio_validation_270", "prediction": "all x.(Quokka(x) -> Animal(x))", "score": 0}
{"id": "folio_validation_270", "prediction": "all x.(Quokka(x) -> AnimalFromAustralia(x))", "score": 0}
{"id": "folio_validation_270", "prediction": "all x.(Quokka(x) -> AustraliaStaysIn(x))", "score": 0}
{"id": "folio_validation_271", "prediction": "all x.(FavoriteAnimal(x,Max) -> VeryFluffy(x))", "score": 0}
{"id": "folio_validation_271", "prediction": "all x.(FavoriteAnimal(x) -> VeryFluffy(x))", "score": 0}
{"id": "folio_validation_271", "prediction": "all x.(MatthewFavoriteAnimal(x) -> VeryFluffy(x))", "score": 0}
{"id": "folio_validation_271", "prediction": "all x y.((Matt(x) & Animal(y)) -> (Favorite(x,y) & VeryFluffy(x)))", "score": 0}
{"id": "folio_validation_271", "prediction": "all x.(FavoriteAnimal(x) -> VERYFluffy(x))", "score": 0}
{"id": "folio_validation_271", "prediction": "all x.(MaxFavoriteAnimal(x) -> VeryFluffy(x))", "score": 0}
{"id": "folio_validation_271", "prediction": "(FavoriteAnimal(Max) -> VeryFluffy(Max))", "score": 0}
{"id": "folio_validation_271", "prediction": "all x.(MattFresh(x) -> VeryFluffy(x))", "score": 0}
{"id": "folio_validation_271", "prediction": "all x.(FamousAnimal(x) -> VeryFluffy(x))", "score": 0}
{"id": "folio_validation_272", "prediction": "all x.(FavoriteAnimal(x) -> LovesToSleep(x))", "score": 0}
{"id": "folio_validation_272", "prediction": "all x.(Matten(x) -> LovesToSleep(x))", "score": 0}
{"id": "folio_validation_272", "prediction": "all x.(Favorite(x) -> LovesToSleep(x))", "score": 0}
{"id": "folio_validation_272", "prediction": "all x y.((Animal(x) & Animal(y) & MaxLoves(x,y)) -> Sleeps(y))", "score": 0}
{"id": "folio_validation_272", "prediction": "(MatthewsFavoriteAnimal(Max) -> LovesToSleep(Max))", "score": 0}
{"id": "folio_validation_272", "prediction": "(FavoriteAnimal(Max) & LovesToSleep(Max))", "score": 0}
{"id": "folio_validation_272", "prediction": "all x.(FavoriteAnimal(x) -> Loves(x))", "score": 0}
{"id": "folio_validation_272", "prediction": "all x.(MattFavoriteAnimals(x) -> LovesToSleep(x))", "score": 0}
{"id": "folio_validation_272", "prediction": "all x.(FavoriteAnimal(x) -> LovesSleep(x))", "score": 0}
{"id": "folio_validation_272", "prediction": "all x.(MattFan(x) -> Sleeps(x))", "score": 0}
{"id": "folio_validation_272", "prediction": "(FavoriteAnimal(Max,EnoughToSleep))", "score": 0}
{"id": "folio_validation_272", "prediction": "all x.((Animal(x) & Favorite(x)) -> LovesToSleep(x))", "score": 1}
{"id": "folio_validation_273", "prediction": "all x.(Fluffy(x) -> -Quokka(x))", "score": 0}
{"id": "folio_validation_273", "prediction": "all x.((Koala(x) & Fancy(x)) -> -Quokka(x))", "score": 0}
{"id": "folio_validation_273", "prediction": "all x.((Koala(x) & VeryFluffy(x)) -> -Quokka(x))", "score": 0}
{"id": "folio_validation_273", "prediction": "all x.((Koala(x) & Fuxy(x)) -> -Quokka(x))", "score": 0}
{"id": "folio_validation_273", "prediction": "all x.(Fuffig(x) -> -Quokka(x))", "score": 0}
{"id": "folio_validation_273", "prediction": "all x.((Koala(x) & Fluttery(x)) -> -Quokka(x))", "score": 0}
{"id": "folio_validation_274", "prediction": "all x.(Koala(x) -> LovesToSleep(x))", "score": 0}
{"id": "folio_validation_274", "prediction": "all x.(Koala(x) -> LoveToSleep(x))", "score": 0}
{"id": "folio_validation_274", "prediction": "(Likes(Koala(k) & Sleeps(k))", "score": -1}
{"id": "folio_validation_274", "prediction": "all x.(Koala(x) -> LovesSleep(x))", "score": 0}
{"id": "folio_validation_274", "prediction": "all x.(Koala(x) -> LovesSleeping(x))", "score": 0}
{"id": "folio_validation_274", "prediction": "all x.(Koala(x) -> LoveSleep(x))", "score": 0}
{"id": "folio_validation_275", "prediction": "all x.(Koala(x) -> (LovesToSleep(x) & Quokka(x)))", "score": 0}
{"id": "folio_validation_275", "prediction": "all x.(Koala(x) -> (Liv(x) | Quokka(x)))", "score": 0}
{"id": "folio_validation_275", "prediction": "all x.(Koala(x) -> (Little(x) & Quokka(x)))", "score": 0}
{"id": "folio_validation_275", "prediction": "all x.(Koala(x) -> (LovesSleep(x) & Quokka(x)))", "score": 0}
{"id": "folio_validation_275", "prediction": "all x.(Koala(x) -> (LovesSleeping(x) & Quokka(x)))", "score": 0}
{"id": "folio_validation_275", "prediction": "all x.(Koala(x) -> (LittleToSleep(x) & Quokka(x)))", "score": 0}
{"id": "folio_validation_275", "prediction": "all x.(Koala(x) -> (LivingToSleep(x) & Quokka(x)))", "score": 0}
{"id": "folio_validation_275", "prediction": "all x.(Koala(x) -> (SleepWith(x) & Quokka(x)))", "score": 0}
{"id": "folio_validation_275", "prediction": "all x.(Koala(x) -> (LoveToSleep(x) & Quokka(x)))", "score": 0}
{"id": "folio_validation_275", "prediction": "all x.(Koala(x) -> (LikesToSleep(x) & Quokka(x)))", "score": 0}
{"id": "folio_validation_275", "prediction": "all x.(Koala(x) -> (LoversSound(x) & Quokka(x)))", "score": 0}
{"id": "folio_validation_276", "prediction": "all x.((Koala(x) & Quokka(x)) -> (LovesSleeping(x) | VeryFluffy(x)))", "score": 0}
{"id": "folio_validation_276", "prediction": "all x.(Quokka(x) -> ((Koala(x) & LovesSleeping(x)) | Fancy(x))))", "score": -1}
{"id": "folio_validation_276", "prediction": "all x.(Quokka(x) -> ((Koala(x) & LovesSleeping(x)) | VeryFluffy(x))))", "score": -1}
{"id": "folio_validation_276", "prediction": "all x.(Quokka(x) -> (LisesToSleep(x) | VeryFluffy(x)))", "score": 0}
{"id": "folio_validation_276", "prediction": "all x.((Koala(x) & Quokka(x)) -> ((LisesToSleep(x) | VeryFluffy(x)) & -(LisesToSleep(x) & VeryFluffy(x))))", "score": 0}
{"id": "folio_validation_276", "prediction": "all x.(Quokka(x) -> (Koala(x) & ((LovesSleep(x) & -Whipped(x)) | (-LovesSleep(x) & Fluffy(x))))))", "score": -1}
{"id": "folio_validation_276", "prediction": "all x.((Koala(x) & Quokka(x)) -> (LisesToSleep(x) | Fancy(x)))", "score": 0}
{"id": "folio_validation_276", "prediction": "all x.((Koala(x) & Quokka(x)) -> ((LOVESleeps(x) | VeryFluffy(x)) & -(LovesSleeps(x) & VeryFluffy(x))))", "score": 0}
{"id": "folio_validation_276", "prediction": "all x.((Koala(x) & Quokka(x)) -> (LovesToSleep(x) | -(LovesToSleep(x) & Fuzzy(x))))", "score": 0}
{"id": "folio_validation_276", "prediction": "all x.(Quokka(x) -> (LovesToSleep(x) | -Fluffy(x)))", "score": 1}
{"id": "folio_validation_276", "prediction": "all x.(Quokka(x) -> ((Koala(x) & LovesSleep(x) | VeryFluffy(x)) & -(LikesSleep(x) & LovesSleep(x))))", "score": 0}
{"id": "folio_validation_276", "prediction": "all x.(Quokka(x) -> ((Koala(x) & (LovesSleep(x) | VeryFluffy(x))) & -(LovesSleep(x) & LovesFluffy(x)) & -(LovesSleep(x) & Fluffy(x)) & -(LOVESleep(x) & Fluffy(x)))))", "score": -1}
{"id": "folio_validation_276", "prediction": "all x.(Quokka(x) -> ((Koala(x) | LovelyToSleep(x)) & -(LovesToSleep(x) & Fluffy(x))))", "score": 0}
{"id": "folio_validation_276", "prediction": "all x.(Quokka(x) -> ((LovesToSleep(x) & -Fluffy(x)) | (-LovesToSleep(x) & VeryFluffy(x))))", "score": 0}
{"id": "folio_validation_276", "prediction": "all x.(Quokka(x) -> ((Koala(x) & LovesSleep(x)) | -Fluffy(x))))", "score": -1}
{"id": "folio_validation_276", "prediction": "all x.((Koala(x) & Quokka(x)) -> ((LovesSleep(x) | VeryFluffy(x)) | (-LovesSleep(x) & VeryFlucty(x))))", "score": 0}
{"id": "folio_validation_277", "prediction": "all x.(Man(x) -> (HasGent(x) | HasEvil(x)))", "score": 0}
{"id": "folio_validation_277", "prediction": "all x.(Man(x) -> (Type(x) | Evil(x)))", "score": 0}
{"id": "folio_validation_277", "prediction": "all x.(Man(x) -> (Kind(x) | Evil(x)))", "score": 0}
{"id": "folio_validation_277", "prediction": "all x.(Man(x) -> ((Kind(x) | Evil(x))))", "score": 0}
{"id": "folio_validation_277", "prediction": "all x.(Man(x) -> (Love(x) | Evil(x)))", "score": 0}
{"id": "folio_validation_277", "prediction": "all x.(Man(x) -> (Seek(x) | Evil(x)))", "score": 0}
{"id": "folio_validation_277", "prediction": "all x.(Man(x) -> (Saint(x) | Evil(x)))", "score": 0}
{"id": "folio_validation_277", "prediction": "all x.(Man(x) -> (TieFilm(x) | Evil(x)))", "score": 0}
{"id": "folio_validation_277", "prediction": "all x.(Man(x) -> (Art(x) | Evil(x)))", "score": 0}
{"id": "folio_validation_277", "prediction": "all x.(Man(x) -> (Good(x) | Evil(x)))", "score": 0}
{"id": "folio_validation_277", "prediction": "exists x.(Man(x) & ((Kind(x) & Evil(x)) | Evil(x))))", "score": -1}
{"id": "folio_validation_277", "prediction": "all x.(Man(x) -> (SeedsKind(x) | SeemsEvil(x)))", "score": 0}
{"id": "folio_validation_277", "prediction": "exists x.(Man(x) & ((Tief(x) | Evil(x)))))", "score": -1}
{"id": "folio_validation_278", "prediction": "-exists x.(Ugly(x) & Beautiful(x))", "score": 0}
{"id": "folio_validation_278", "prediction": "all x.(UglyPerson(x) -> NoShabbyPerson(x))", "score": 0}
{"id": "folio_validation_278", "prediction": "-exists x.(UglyPerson(x) & Beautiful(x))", "score": 0}
{"id": "folio_validation_278", "prediction": "-UglyPerson(x)", "score": 0}
{"id": "folio_validation_278", "prediction": "-(UglyPerson(x) & Beautiful(x))", "score": 0}
{"id": "folio_validation_278", "prediction": "-exists x.(Ugly(x) & Nice(x))", "score": 0}
{"id": "folio_validation_278", "prediction": "-exists x.(UglyPerson(x) & Pretty(x))", "score": 0}
{"id": "folio_validation_278", "prediction": "-exists x.(UglyPerson(x) & Rich(x))", "score": 0}
{"id": "folio_validation_278", "prediction": "-exists x.(UglyPerson(x) & Lovely(x))", "score": 0}
{"id": "folio_validation_278", "prediction": "-UglyPerson(s)", "score": 0}
{"id": "folio_validation_278", "prediction": "-(UglyPerson(a) & PrettyInStyle(a))", "score": 0}
{"id": "folio_validation_278", "prediction": "-(UglyPerson(x) & Beauty(x))", "score": 0}
{"id": "folio_validation_278", "prediction": "-exists x.(UglyPerson(x) & Brave(x))", "score": 0}
{"id": "folio_validation_279", "prediction": "all x.(EvilPerson(x) -> Ugly(x))", "score": 0}
{"id": "folio_validation_279", "prediction": "all x.(EvilPeople(x) -> Ugly(x))", "score": 0}
{"id": "folio_validation_279", "prediction": "all x.(Odd(x) -> Urgacious(x))", "score": 0}
{"id": "folio_validation_279", "prediction": "all x.(OddPerson(x) -> Uglier(x))", "score": 0}
{"id": "folio_validation_279", "prediction": "all x.((Evil(x) & Evil(x)) -> Ugly(x))", "score": 0}
{"id": "folio_validation_279", "prediction": "all x.(OddPerson(x) -> Ugly(x))", "score": 0}
{"id": "folio_validation_279", "prediction": "all x.(EvilPerson(x) if _Ugly(x))", "score": -1}
{"id": "folio_validation_279", "prediction": "all x.(OddPeople(x) -> Ugly(x))", "score": 0}
{"id": "folio_validation_280", "prediction": "all x.(Gentlemen(x) -> Pretty(x))", "score": 0}
{"id": "folio_validation_280", "prediction": "all x.(Gentlemen(x) -> Beautiful(x))", "score": 0}
{"id": "folio_validation_280", "prediction": "all x.(Glenny(x) -> Beautiful(x))", "score": 0}
{"id": "folio_validation_280", "prediction": "all x.(Groomer(x) -> Beautiful(x))", "score": 0}
{"id": "folio_validation_280", "prediction": "all x.(Lady(x) -> Nice(x))", "score": 0}
{"id": "folio_validation_280", "prediction": "all x.(Gentleman(x) -> Pretty(x))", "score": 0}
{"id": "folio_validation_280", "prediction": "all x.(Gentleman(x) -> Beautiful(x))", "score": 0}
{"id": "folio_validation_280", "prediction": "all x.(Gentleman(x) -> Nice(x))", "score": 0}
{"id": "folio_validation_280", "prediction": "all x.(Groomed(x) -> Spacious(x))", "score": 0}
{"id": "folio_validation_280", "prediction": "all x.(Pretty(x) -> Gentleman(x))", "score": 0}
{"id": "folio_validation_280", "prediction": "all x.(Gentleman(x) -> Spacious(x))", "score": 0}
{"id": "folio_validation_281", "prediction": "all x.(CEO(x) -> Gentlemen(x))", "score": 0}
{"id": "folio_validation_281", "prediction": "all x.(CEO(x) -> Gentleman(x))", "score": 0}
{"id": "folio_validation_281", "prediction": "all x.(Chair(x) -> Gentleman(x))", "score": 0}
{"id": "folio_validation_281", "prediction": "all x.(Mother(x) -> Gentleman(x))", "score": 0}
{"id": "folio_validation_282", "prediction": "Harry is gentlemanly.", "score": -1}
{"id": "folio_validation_282", "prediction": "-Mentioned(Harry)", "score": 0}
{"id": "folio_validation_282", "prediction": "(Harry(Harry) -> Gentleman(Harry))", "score": 0}
{"id": "folio_validation_282", "prediction": "All x.( Harry(x) -> Gentleman(x))", "score": -1}
{"id": "folio_validation_282", "prediction": "exists x.(Harry(x) & Gentleman(x))", "score": 0}
{"id": "folio_validation_282", "prediction": "all x.(Harry(x) -> Gentleman(x))", "score": 0}
{"id": "folio_validation_282", "prediction": "all x.(Harris(x) -> Gentleman(x))", "score": 0}
{"id": "folio_validation_282", "prediction": "Harry is gentleman.", "score": -1}
{"id": "folio_validation_282", "prediction": "(Gentleman(Harry) & Gentleman(Harry))", "score": 0}
{"id": "folio_validation_282", "prediction": "Harry is Gentleman(Harry)", "score": -1}
{"id": "folio_validation_282", "prediction": "(Man-Dominant(Harry)", "score": -1}
{"id": "folio_validation_283", "prediction": "All x.((Harry(x) & CEO(x)) -> CanWork(x))", "score": -1}
{"id": "folio_validation_283", "prediction": "Harry is CEO.", "score": -1}
{"id": "folio_validation_283", "prediction": "(CEO(Harry) & -Company(Harry))", "score": 0}
{"id": "folio_validation_283", "prediction": "the CEO(Harry)", "score": -1}
{"id": "folio_validation_283", "prediction": "All x.(Harry(x) -> CEO(x))", "score": -1}
{"id": "folio_validation_283", "prediction": "(CEO(Harry) | CEO(Harry)))", "score": -1}
{"id": "folio_validation_283", "prediction": "both x.((Harry(x) & CEO(x)) -> CEO(x))", "score": -1}
{"id": "folio_validation_283", "prediction": "all x.(ChiefOfOrder(x) -> CEO(x))", "score": 0}
{"id": "folio_validation_283", "prediction": "Harry is CEO(Harry)", "score": -1}
{"id": "folio_validation_283", "prediction": "(CEO(Harry) & CEO(Harry))", "score": 0}
{"id": "folio_validation_283", "prediction": "(CEO(Harry,Harris))", "score": 0}
{"id": "folio_validation_283", "prediction": "all x.(ChiefOf(Riley) -> CEO(x))", "score": 0}
{"id": "folio_validation_284", "prediction": "all x.(Harry(x) -> (Name(x) | CEO(x)))", "score": 0}
{"id": "folio_validation_284", "prediction": "All x.(Harry(x) -> (Tast(x) | CEO(x)))", "score": -1}
{"id": "folio_validation_284", "prediction": "all x.(Harry(x) -> ((Kind(x) | CEO(x))))", "score": 0}
{"id": "folio_validation_284", "prediction": "all x.(Harry(x) -> (Kind(x) | CEO(x)))", "score": 0}
{"id": "folio_validation_284", "prediction": "all x.(Harry(x) -> (Nein(x) | CEO(x)))", "score": 0}
{"id": "folio_validation_284", "prediction": "((Harry(Harry) | CEO(Harry)))", "score": 0}
{"id": "folio_validation_284", "prediction": "(kind(Harry) | CEO(Harry)))", "score": -1}
{"id": "folio_validation_284", "prediction": "all x.(Harry(x) -> (Artistic(x) | CEO(x)))", "score": 0}
{"id": "folio_validation_284", "prediction": "all x.(Harry(x) -> (Ninja(x) | CEO(x)))", "score": 0}
{"id": "folio_validation_284", "prediction": "all x.(Harry(x) -> (Art(x) | CEO(x)))", "score": 0}
{"id": "folio_validation_284", "prediction": "all x.(Harry(x) -> (Beyond(x) | CEO(x)))", "score": 0}
{"id": "folio_validation_284", "prediction": "(Harris(Harry) -> (Niece(Harry) | CEO(Harry))))", "score": -1}
{"id": "folio_validation_284", "prediction": "all x.(Harris(x) -> (Amen(x) | CEO(x)))", "score": 0}
{"id": "folio_validation_284", "prediction": "-Copromise(Harry)", "score": 0}
{"id": "folio_validation_285", "prediction": "all x.((Harry(x) & (Evil(x) | Ugly(x)) | (-Evil(x) & Ugly(x)))) -> -CoOwn(x))", "score": -1}
{"id": "folio_validation_285", "prediction": "all x.((Harry(x) & Evil(x) & Ugly(x) & -Evil(x) & -Ugly(x)) -> -Chairman(x))", "score": 0}
{"id": "folio_validation_285", "prediction": "all x.((Harry(x) & Either(x) & Evil(x) & Ugly(x)) | -Evil(x) & Ugly(x))) -> -(Kind(x) | CEO(x)))", "score": -1}
{"id": "folio_validation_285", "prediction": "all x.((EvilAndUgly(x) | -EvilAndUgly(x))) -> -Chairman(x))", "score": -1}
{"id": "folio_validation_285", "prediction": "all x.((Harry(x) & (Evil(x) | Ugly(x))) | -Evil(x) | -Ugly(x)))", "score": -1}
{"id": "folio_validation_285", "prediction": "all x.((Harry(x) & (Evil(x) | Ugly(x))) | -Evil(x) & Ugly(x)))", "score": -1}
{"id": "folio_validation_285", "prediction": "all x.((Harry(x) & Evil(x) & Ugly(x)) | -NeitherEvil(x) & -Ugly(x)))", "score": -1}
{"id": "folio_validation_285", "prediction": "all x.((Harry(x) & (Evil(x) | Ugly(x) | -Evil(x) | Ugly(x))) -> -Kind(x) & -CEO(x))", "score": 0}
{"id": "folio_validation_285", "prediction": "all x.((Harry(x) & (Evil(x) | Ugly(x))) | (-Evil(x) & Ugly(x))))", "score": -1}
{"id": "folio_validation_285", "prediction": "all x.((Harry(x) & (Evil(x) | Ugly(x))) | (-Evil(x) & Ugly(x)))))", "score": -1}
{"id": "folio_validation_285", "prediction": "all x.((Harry(x) & (Evil(x) | Ugly(x))) | -(Evil(x) & Ugly(x)))) -> -(Kind(x) | CEO(x)))", "score": -1}
{"id": "folio_validation_285", "prediction": "all x.((Harry(x) & Elf(x) & Ugly(x)) | (-Elf(x) & Ugly(x))))", "score": -1}
{"id": "folio_validation_285", "prediction": "all x.((Harry(x) & Evil(x) & Ugly(x)) | (-Evil(x) & Ugly(x))))", "score": -1}
{"id": "folio_validation_285", "prediction": "all x.((Harry(x) & (Evil(x) | Ugly(x))) | (-Evil(x) | Ugly(x))))", "score": -1}
{"id": "folio_validation_285", "prediction": "all x.((Harry(x) & (Evil(x) | Ugly(x))) | (-Evil(x) | Ugly(x)))))", "score": -1}
{"id": "folio_validation_286", "prediction": "all x.((Twin(x) | Triplet(x)) -> SpendsLittleTimeHangingOutWithSiblingsAndPlayingWithSiblings(x))", "score": 0}
{"id": "folio_validation_286", "prediction": "all x.((Twin(x) | Triplet(x)) -> SpendsLoesTimeHangingOutWithSiblingsAndPlayingWithSiblings(x))", "score": 0}
{"id": "folio_validation_286", "prediction": "all x.((Twin(x) | Triplet(x)) -> SpendsLittleTimeHangingOutAndPlayingWithSiblings(x))", "score": 0}
{"id": "folio_validation_286", "prediction": "all x.((Twins(x) | Triplets(x)) -> SpendsLittleTimeHangingOutWithAndPlayingWithSisters(x))", "score": 0}
{"id": "folio_validation_286", "prediction": "all x.((Twin(x) | Triplet(x)) -> SpendsAsh(x,h))", "score": 0}
{"id": "folio_validation_286", "prediction": "all x.(Twin(x) | Triplet(x)) -> SpendsLittleTimeHangingOutWithAndPlayingWithSiblings(x))", "score": -1}
{"id": "folio_validation_286", "prediction": "all x.((Twin(x) | Triplet(x)) -> SpendsLittleTimeHangingOutWithAndPlayingWithSiblings(x))", "score": 0}
{"id": "folio_validation_286", "prediction": "all x.((Twin(x) | Triplet(x)) -> SpendsThingAndPlayingWithSiblings(x))", "score": 0}
{"id": "folio_validation_286", "prediction": "all x.(Twin(x) | Triplet(x)) -> SpendsLittleTimeWithSistersAndPlaysWithSisters(x))", "score": -1}
{"id": "folio_validation_286", "prediction": "all x.(Twin(x) | Triplet(x)) -> SpendsLittleTimeHangingOutWithAndPlayingWithSisters(x))", "score": -1}
{"id": "folio_validation_286", "prediction": "all x.(TwinOrTriplet(x) -> SpendsLossOfTimeHangingOutWithAndPlayingWithSiblings(x))", "score": 0}
{"id": "folio_validation_286", "prediction": "all x.(TwinsOrTriplets(x) -> (SittsOutWithSiblings(x) & PlaysWithSiblings(x)))", "score": 0}
{"id": "folio_validation_286", "prediction": "all x.(((Twin(x) | Triplet(x))) -> SpendsLittleTimeHungryAndPlayingWithSiblings(x))", "score": 0}
{"id": "folio_validation_286", "prediction": "all x.(TwinsOrTriplets(x) -> (SpendingTime(x) & HangingOutWithSiblings(x) & PlayingWithSiblings(x)))", "score": 0}
{"id": "folio_validation_287", "prediction": "all x.(Sibling(x) -> (SiblingIsSameAge(x) & (Twins(x) | Triplets(x))))", "score": 0}
{"id": "folio_validation_287", "prediction": "all x.(HasSiblingsSameAge(x) -> (Twins(x) | Triplets(x)))", "score": 0}
{"id": "folio_validation_287", "prediction": "all x.((Sibling(x) & SameAge(x)) -> (Twin(x) | Triplet(x)))", "score": 0}
{"id": "folio_validation_287", "prediction": "all x.((Sibling(x) & SameAge(x)) -> (Twins(x) | Triplets(x)))", "score": 0}
{"id": "folio_validation_287", "prediction": "all x.((SiblingsAarSameAge(x)) -> (Twins(x) | Triplets(x)))", "score": 0}
{"id": "folio_validation_287", "prediction": "(Simulator(e) & SameAge(e))", "score": 0}
{"id": "folio_validation_287", "prediction": "all x.((Siblings(x) & SameAge(x)) -> (Twins(x) | Triplets(x)))", "score": 0}
{"id": "folio_validation_287", "prediction": "all x.(Sibling(x) -> (Twin(x) | Triplet(x)))", "score": 0}
{"id": "folio_validation_287", "prediction": "all x.((Person(x) & SiblingsSameAge(x)) -> (Twins(x) | Triplets(x)))", "score": 0}
{"id": "folio_validation_287", "prediction": "all x.((People(x) & SiblingsSameAge(x)) -> (Twins(x) | Triplets(x)))", "score": 0}
{"id": "folio_validation_287", "prediction": "all x.(SiblingsElseAge(x) -> ((Twin(x) | Triplet(x))))", "score": 0}
{"id": "folio_validation_288", "prediction": "all x.((People(x) & Don’tComplainOften(x) & EnnirvanticSiblings(x)) -> SameAgeSiblings(x))", "score": 0}
{"id": "folio_validation_288", "prediction": "all x.((Person(x) & ComplainsForEnormousSiblings(x)) -> HasSiblingsTheSameAge(x))", "score": 0}
{"id": "folio_validation_288", "prediction": "all x.((Person(x) & ComplainsOftenAboutEnnormousSiblings(x)) -> SiblingsEqualAge(x))", "score": 0}
{"id": "folio_validation_288", "prediction": "all x.((Person(x) & ComplainsOftenAerialAgeSiblings(x)) -> SiblingsEqualAge(x))", "score": 0}
{"id": "folio_validation_288", "prediction": "all x.((People(x) & ComplainsOftenOfEnnobleSibling(x)) -> SiblingsSameAge(x))", "score": 0}
{"id": "folio_validation_288", "prediction": "all x.((Person(x) & complainsOfEnjoyableSiblings(x)) -> SiblingsSameAge(x))", "score": 0}
{"id": "folio_validation_288", "prediction": "all x.((Person(x) & ComplainsOfOddSiblings(x) & SameAgeSiblings(x)) -> SameAgeSiblings(x))", "score": 0}
{"id": "folio_validation_288", "prediction": "all x.((Person(x) & OftenComplainsAboutIrruptiveSiblings(x)) -> SiftsWithSameAge(x))", "score": 0}
{"id": "folio_validation_288", "prediction": "all x.((Person(x) & ComplainsOften(x) & EnnoblingSiblings(x)) -> SiblingsSameAge(x))", "score": 0}
{"id": "folio_validation_288", "prediction": "all x.((People(x) & ComplainsOfEnjoyableSiblings(x)) -> SameAgeSiblings(x))", "score": 0}
{"id": "folio_validation_288", "prediction": "all x.((Person(x) & ComplainsFrequentlyAboutEnormatingSiblings(x)) -> SimilarAgeSiblings(x))", "score": 0}
{"id": "folio_validation_288", "prediction": "all x.((People(x) & ComplainsOfEnormousSiblings(x)) -> ContainsSiblingsSameAge(x))", "score": 0}
{"id": "folio_validation_288", "prediction": "all x.((Person(x) & ComplainsOfEnvyingSisters(x)) -> HasSiblingsSameAge(x))", "score": 0}
{"id": "folio_validation_288", "prediction": "all x.((Person(x) & ComplainAndEnragedSiblings(x)) -> SiblingsEqualAge(x))", "score": 0}
{"id": "folio_validation_288", "prediction": "all x.((Person(x) & PeopleComplainUsuallyAboutEnormousSiblings(x)) -> SameAgeSiblings(x))", "score": 0}
{"id": "folio_validation_288", "prediction": "all x.((People(x) & ComplainsOftenFromEntrancingSiblings(x)) -> SistersSameAge(x))", "score": 0}
{"id": "folio_validation_289", "prediction": "all x y.((Public(x) & -LivesRegularly(x)) -> -DevelopsStrongBonds(x))", "score": 0}
{"id": "folio_validation_289", "prediction": "all x.((Person(x) & -LivesAtHomeRegularly(x)) -> -DevelopsStrongBondsWithFamily(x))", "score": 0}
{"id": "folio_validation_289", "prediction": "all x.((Person(x) & Exists y.(Condor(y) & -LivesAtHomeRegularly(x,y))) -> -DevelopsStrongBonds(x,y)))", "score": -1}
{"id": "folio_validation_289", "prediction": "all x.((Person(x) & -LivesAtHomeRegularly(x)) -> -DevelopsStrongBonds(x))", "score": 0}
{"id": "folio_validation_289", "prediction": "all x.((Person(x) & -LivesAtHomeRegularly(x)) -> -DevelopedStrongBondsWithFamily(x))", "score": 0}
{"id": "folio_validation_289", "prediction": "all x.((Person(x) & LivesAtHomeRegularly(x)) -> -DevelopsStrongBondsWithFamily(x))", "score": 0}
{"id": "folio_validation_289", "prediction": "all x.((Person(x) & -LivesAtHomeRegularly(x)) -> -BuildsStrongBondsWithFamily(x))", "score": 0}
{"id": "folio_validation_289", "prediction": "all x y.((Popular(x) & -LivesAtHomeRegularly(x)) -> -EntretinesStrongBondsWithFamily(y))", "score": 0}
{"id": "folio_validation_289", "prediction": "all x.((Personal(x) & LivesAtHomeRegularly(x)) -> -DevelopedStrongBonds(x))", "score": 0}
{"id": "folio_validation_289", "prediction": "all x y.((Person(x) & -LiveAtHomeRegularly(x)) -> -DevelopsStrongBonds(y))", "score": 0}
{"id": "folio_validation_289", "prediction": "all x.((Person(x) & -LivesAtHomeRegularly(x)) -> -DevelopingStrongBondsWithFamily(x))", "score": 0}
{"id": "folio_validation_289", "prediction": "all x.((Person(x) & -LivesAtHomeRegularly(x)) -> -DevelopsStrongBundles(x))", "score": 0}
{"id": "folio_validation_290", "prediction": "all x.((Person(x) & SpendsSomeTimehangingOut(x) & PlayingWithSiblings(x)) -> -LiveAtHomeRegularly(x))", "score": 0}
{"id": "folio_validation_290", "prediction": "all x.((Person(x) & SpendsSmallTimeHangingOutWithSisters(x) & SpendsLittleTimePlayingWithSisters(x)) -> -LivesAtHomeRegularly(x))", "score": 0}
{"id": "folio_validation_290", "prediction": "all x.((SpendsLongTimeAnglingOut(x) & SpendsLongTimePlayingWithSiblings(x)) -> OftenNotLiveAboutHomeRegularly(x))", "score": 0}
{"id": "folio_validation_290", "prediction": "all x.((Functional(x) & SpendsLoosEngages(x) & SpendsLoosEngages(x) & PlaysWithSiblings(x)) -> -LivingAtHomeRegularly(x))", "score": 0}
{"id": "folio_validation_290", "prediction": "all x y.((Person(x) & Sister(y) & SpendsLotOfTimeHangingOutAndPlaying(x,y)) -> Often-LastLiveAtHome(x,y))", "score": -1}
{"id": "folio_validation_290", "prediction": "all x.((FangOut(x) & PlayingWithSiblings(x)) -> -LiveAtHome(x))", "score": 0}
{"id": "folio_validation_290", "prediction": "all x y.((People(x) & SpendsLostTimeHangingOutWith(x,y) & PlayingWith(x,y)) -> OftenNonLiveAtHomeRegularly(x,y))", "score": 0}
{"id": "folio_validation_290", "prediction": "all x.((SpendsLoyalTime(x) & GluesSiblings(x) & PlaysSiblings(x)) -> OftenLittleAtHomeRegularly(x))", "score": 0}
{"id": "folio_validation_290", "prediction": "all x.((People(x) & Spends(x,HanginExpress,Siblings) & PlaysWith(x,Siblings)) -> Often-LittleAtHome(x))", "score": -1}
{"id": "folio_validation_290", "prediction": "all x.((Person(x) & SpendsLootOfTimeHangingOutWithSiblings(x) & PlayingWithSiblings(x)) -> OftenNotLiveAtHomeRegularly(x))", "score": 0}
{"id": "folio_validation_290", "prediction": "all x.((Person(x) & SpendsLotOfTimeHangingOutWith(x) & PlayingWith(x)) -> Often-LivesAtHomeRegularly(x))", "score": -1}
{"id": "folio_validation_290", "prediction": "all x.((Personal(x) & SpendsLoadOfTimeHungeringWithAndPlayingWithSiblings(x)) -> -LiveAtHomeRegularly(x))", "score": 0}
{"id": "folio_validation_290", "prediction": "all x.((People(x) & SpendsLoosTimeHangingOutWith(x) & PlayingWithSiblings(x)) -> -LiveAtHomeRegularly(x))", "score": 0}
{"id": "folio_validation_290", "prediction": "all x.((People(x) & SpendsAtHomeTimeHangoutWithSiblings(x) & ForSiblings(x)) -> -RegularLiveAtHome(x))", "score": 0}
{"id": "folio_validation_290", "prediction": "all x y.((Person(x) & Sibling(y) & SpendsLossOfTimeHangingOut(x,y) & PlayingWith(x,y)) -> OftenNotLiveAtHomeRegularly(x))", "score": 0}
{"id": "folio_validation_290", "prediction": "all x y.((Person(x) & Sibling(y) & SpendsTogetherWith(x,y) & SpendsTogetherPlayingWith(x,y)) -> -LivesAtHomeRegularly(x))", "score": 0}
{"id": "folio_validation_291", "prediction": "all x.(Luke(x) -> ((Twin(x) | Triplet(x)) & StrongBonds(x)) | (-Twin(x) & Triplet(x)) & NoStrongBonds(x))))", "score": -1}
{"id": "folio_validation_291", "prediction": "exists x.(Luke(x) & (BetweenTwin(x) | BetweenTriplet(x)) & StrongBonds(x)) | (-BetweenTwinAndTriplet(x) & StrongBonds(x))))", "score": -1}
{"id": "folio_validation_291", "prediction": "((Luke(Luke) & (Twin(Luke) | Triplet(Luke))) | (-Twin(Luke) & Triplet(Luke)) | (-Twin(Luke) & Triplet(Luke)))))", "score": -1}
{"id": "folio_validation_291", "prediction": "all x.(Leaf(x) -> ((Twin(x) | Triplet(x)) & DevelopsStrongBondsWithFamily(x)) | (-Twin(x) & Triplet(x)))))", "score": -1}
{"id": "folio_validation_291", "prediction": "all x.(Luke(x) -> (Doppelt(x) | Triplet(x)) & (StrongBonds(x) | -StrongBonds(x))))", "score": -1}
{"id": "folio_validation_291", "prediction": "all x.(Luke(x) -> (((Twin(x) & -Triplet(x)) | (-Twin(x) & Triplet(x)))))", "score": 0}
{"id": "folio_validation_291", "prediction": "all x.(Luke(x) -> (((Twin(x) | Triplet(x)) & StrongBonds(x)) | (-Twin(x) & Triplet(x) & StrongBonds(x))) | (-Twin(x) & StrongBonds(x))))))", "score": -1}
{"id": "folio_validation_291", "prediction": "((SameFamily(SameFamily(SameFamily(SameFamily(SameFamily(SameFamily(SameFamily(SaysFamily(SameFamily(SameFamily(SameFamily(SameFamily(SameFamily(SameFamily(SameFamily(SameFamily(Samami-Samami-Samami)(Samami)(SamamiBamily(Samami))))))", "score": -1}
{"id": "folio_validation_291", "prediction": "all x.(Luke(x) -> (((Twin(x) | Triplet(x)) & StrongBondsWithFamily(x)) | -(Twin(x) | Triplet(x)))))", "score": -1}
{"id": "folio_validation_291", "prediction": "(((Lucky(Lucky) & (Twin(Lucky) | Triplet(Lucky))) | (FromThinToStrongBonds(Lucky) & -Twin(Lucky) & Triplet(Lucky))) | (-Twin(Lucky) & FamiliesUnderbundlings(Lucky(Lucky)))))", "score": -1}
{"id": "folio_validation_291", "prediction": "all x y z.((Luke(x) & (Twin(p) | Triplet(p)) & FamilyMember(y)) -> ((Twin(p) | Triplet(p) & StrongBonds(p)) | (-Twin(p) & StrongBonds(p)))))", "score": -1}
{"id": "folio_validation_291", "prediction": "all x.((Luke(x) & (Twin(x) | Triplet(x)) & StrongBonds(x)) | (-Twin(x) & Triplet(x))))", "score": -1}
{"id": "folio_validation_291", "prediction": "((Luke(Luke) & (Twin(Luke) | Triplet(Luke))) | (-Twin(Luke,Luke) & Triplet(Luke))))", "score": -1}
{"id": "folio_validation_291", "prediction": "all x y.((Luke(x) & Families(y)) -> ((Twin(x) | Triplet(x)) & StrongBondsWith(x,y)) | (-Twin(x) & Families(x) & FamilyBondsWith(x,y))))", "score": -1}
{"id": "folio_validation_291", "prediction": "all x.(Luke(x) -> ((Twin(x) | Triplet(x)) & DevelopsStrongBonds(x)) | (-Twin(x) & Triplet(x) & DevelopsStrongBonds(x)))))", "score": -1}
{"id": "folio_validation_291", "prediction": "((Luke(Luke) & (Twin(Luke) | Triplet(Luke))) | (-Twin(Luke) & Triplet(Luke))) | (-Twin(Luke) & Triplet(Luke)) & StrongBonds(Luke))))", "score": -1}
{"id": "folio_validation_292", "prediction": "all x.(Luke(x) -> (HangsOut(x) & PlaysWithSiblings(x)))", "score": 0}
{"id": "folio_validation_292", "prediction": "all x.(Luke(x) -> SpendsLittleTimeHangingOutAndPlayingWithSisters(x))", "score": 0}
{"id": "folio_validation_292", "prediction": "all x.((Luke(x) & Siblings(y)) -> SpendsTime(x,y))", "score": 0}
{"id": "folio_validation_292", "prediction": "all x.(Luke(x) -> (ShinesWithSiblings(x) & PlaysWithSiblings(x)))", "score": 0}
{"id": "folio_validation_292", "prediction": "all x y.((Lake(x) & Siblings(y)) -> (HanginOut(x,y) & PlayWith(x,y)))", "score": 0}
{"id": "folio_validation_292", "prediction": "all x.(Luke(x) -> SpendsHittingOutAndPlayingWithSiblings(x))", "score": 0}
{"id": "folio_validation_292", "prediction": "all x y.((Luce(x) & Siblings(y)) -> (SitsAndPlays(x,y) & SpendsThanTheMillions(x)))", "score": 0}
{"id": "folio_validation_292", "prediction": "(MonthlyHungout(Luke,Luke and Siblings(Luke))", "score": -1}
{"id": "folio_validation_292", "prediction": "both of Luke's siblings and a lot of playtime.", "score": -1}
{"id": "folio_validation_292", "prediction": "Luke spends a lot of time hanging out and playing with siblings.", "score": -1}
{"id": "folio_validation_292", "prediction": "all x.((Luke(x) & Siblings(y)) -> SpendsTiltAndPlay(x,y))", "score": 0}
{"id": "folio_validation_292", "prediction": "all x y.((Luke(x) & Siblings(y)) -> SpendsLittleTimeHuntingAndPlaying(x,y))", "score": 0}
{"id": "folio_validation_292", "prediction": "all x y.((Sister(x) & Luke(y)) -> (EnjoysHungry(y) & PlaysWith(y,x)))", "score": 0}
{"id": "folio_validation_292", "prediction": "all x.(Luke(x) -> (spendsLight(x) & SpendsLittleTime(x) & HangingOut(x) & PlayingWithSiblings(x)))", "score": 0}
{"id": "folio_validation_293", "prediction": "Luke complains frequently about annoyingssiblings.", "score": -1}
{"id": "folio_validation_293", "prediction": "(Calls(Luke,Y) & EnragedSiblings(Luke))", "score": 0}
{"id": "folio_validation_293", "prediction": "Luke complains a lot about annoyingSiblings.", "score": -1}
{"id": "folio_validation_293", "prediction": "(Sister(Luke,2) & Enneasing(Luke,2))", "score": 0}
{"id": "folio_validation_293", "prediction": "all x.(Luke(x) -> ComplainsOfEnragedSisters(x))", "score": 0}
{"id": "folio_validation_293", "prediction": "all x.((Luke(x) & EnnirdySiblings(x)) -> ComplainsOf(x,y))", "score": 0}
{"id": "folio_validation_293", "prediction": "all x y z.((Luke(x) & Sibling(y) & Sister(z)) -> (ComplainsOf(x,y,z)))", "score": 0}
{"id": "folio_validation_293", "prediction": "Luke complains often about annoyingSiblings(Luke,Radius)", "score": -1}
{"id": "folio_validation_293", "prediction": "all x y.((Luke(x) & Sibling(y)) -> ComplainsOf(x,y))", "score": 0}
{"id": "folio_validation_293", "prediction": "all x y.((Luke(x) & Sister(y)) -> ComplainsOfOften(x,y))", "score": 0}
{"id": "folio_validation_293", "prediction": "Luke complains often about annoyingSiblings.", "score": -1}
{"id": "folio_validation_293", "prediction": "all x.(Sister(y) & ActsOf(x,y)) -> CrashesOften(x,y))", "score": -1}
{"id": "folio_validation_293", "prediction": "Luke complains often about annoyablesSiblings.", "score": -1}
{"id": "folio_validation_293", "prediction": "Luke complains about irritatingssiblings.", "score": -1}
{"id": "folio_validation_293", "prediction": "(Calls(Luke,IntriguingSiblings) & LukeComplains(Luke,Often))", "score": 0}
{"id": "folio_validation_293", "prediction": "all x.(Luke(x) -> (ComplaintsForSiblings(x) & Anannoying(x)))", "score": 0}
{"id": "folio_validation_294", "prediction": "Luke is li-((Twin(l) & -Triplet(l)) | -ComplainsOfEnormousSiblings(l)))", "score": -1}
{"id": "folio_validation_294", "prediction": "(-(Twin(Luke) | Triplet(Luke))) & -(LukePositiveSibling(Luke) | (LukePossibleSibling(Luke)))))", "score": -1}
{"id": "folio_validation_294", "prediction": "(-(Twin(Luke) | Triplet(Luke))) | -(EntriguingSiblings(Luke) | EnnoblingSiblings(Luke))) & -(EnnoblingSiblings(Luke) & EnnoblingSiblings(Luke)))", "score": -1}
{"id": "folio_validation_294", "prediction": "and neither twin,nor triplet,nor complains of EnormousSiblings(Luke)", "score": -1}
{"id": "folio_validation_294", "prediction": "((Lucky(Luck) & -(Twin(Luck) | Triplet(Luck))) | (Complain(Luck,enragements,siblings)))))", "score": -1}
{"id": "folio_validation_294", "prediction": "all x.(Luke(x) -> (-Twin(x) | Triplet(x)) & -ComplainsOfEnormousSiblings(x)))", "score": -1}
{"id": "folio_validation_294", "prediction": "all x.((Luke(x) & -Twin(x) & -Triplet(x)) & -ComplainesOfEnticingSiblings(x)) -> -TripleTwin(x))", "score": -1}
{"id": "folio_validation_294", "prediction": "all x.(Luke(x) -> ((WrongTwin(x) & -Drill(x)) | (-ThreeTwin(x) & Triplet(x))))", "score": 0}
{"id": "folio_validation_294", "prediction": "all x.(Luke(x) -> (-(Twin(x) | Triplet(x))) | (ArragingSiblings(x)))))", "score": -1}
{"id": "folio_validation_294", "prediction": "(-(Twin(Luke) & -Triplet(Luke)) | (ComplainsOfEnnormousSiblings(Luke))))", "score": -1}
{"id": "folio_validation_294", "prediction": "all x.(Luke(x) -> ((NeesTwin(x) | NeesTriplet(x)) & -EnjoysAngrySiblings(x))))", "score": -1}
{"id": "folio_validation_294", "prediction": "all x.(Luke(x) -> (King(x) | SpentThreet(x)) & -(ComplainsOfEnnesettingSiblings(x) | ComplainsOfEncouragingSiblings(x))))", "score": -1}
{"id": "folio_validation_294", "prediction": "is -(Twin(Luke) | Triplet(Luke)) & -(Luke(Luke) & -(Threet(Luke) & EnchantingSiblings(Luke))))", "score": -1}
{"id": "folio_validation_294", "prediction": "Luke is -(Twin(Luke) | Triplet(Luke)) & -ComplainsOftenAboutEngagingSiblings(Luke))", "score": -1}
{"id": "folio_validation_294", "prediction": "-(Twin(Lucky) | Triplet(Lucky)) & -(EnrageingSibling(Lucky) & -EnormousSibling(Lucky)))", "score": -1}
{"id": "folio_validation_294", "prediction": "(Neither Twin(Luke) & NorTriplet(Luke) & -ComplainsFrequentlyOfIntractableSiblings(Luke))", "score": -1}
{"id": "folio_validation_295", "prediction": "all x y.((GRETest(x) & US$205(y)) -> Costs(x,y))", "score": 0}
{"id": "folio_validation_295", "prediction": "all x.((GRETest(x) & Costs(x,US,205))", "score": -1}
{"id": "folio_validation_295", "prediction": "it costs US$205 to take GRE test.", "score": -1}
{"id": "folio_validation_295", "prediction": "it costs US$205 per take.", "score": -1}
{"id": "folio_validation_295", "prediction": "(CostsUS15 to TakeGRE(x))", "score": -1}
{"id": "folio_validation_295", "prediction": "All x.((GRETest(x) & CostsUS205(x)) -> TakesTogether(x))", "score": -1}
{"id": "folio_validation_295", "prediction": "(TestGRE(US) -> Costs(US205))", "score": 0}
{"id": "folio_validation_295", "prediction": "(CostsUse205ForGRETest(USA))", "score": 0}
{"id": "folio_validation_295", "prediction": "all x.((GRETest(x) & CostsUS$2055))", "score": 0}
{"id": "folio_validation_295", "prediction": "(CostToTakeGradeTest(x,US): $205))", "score": -1}
{"id": "folio_validation_295", "prediction": "all x.((GRETest(x) & CostsUS205(x)) -> TakesTest(x))", "score": 0}
{"id": "folio_validation_295", "prediction": "(Cost215$ for GRETest.)", "score": -1}
{"id": "folio_validation_295", "prediction": "(CourseVerySmall(GRETest) $215(GRETest))", "score": -1}
{"id": "folio_validation_295", "prediction": "(UseGRETest(U.S$205))", "score": -1}
{"id": "folio_validation_295", "prediction": "costs US205(GRETest)", "score": -1}
{"id": "folio_validation_295", "prediction": "All x.((GRETest(x) & US$205(x)) -> TakeTogether(x,y))", "score": -1}
{"id": "folio_validation_296", "prediction": "all x.(ETS(x) -> ProvidesFinancialAid(x))", "score": 0}
{"id": "folio_validation_296", "prediction": "all x.((GREApplication(x) & EconomicHardness(x)) -> ProvidesFinancialAid(x))", "score": 0}
{"id": "folio_validation_296", "prediction": "all x.((ETSAttendee(x) & ApplicationsproveBehavior(x,GRE)) -> FinancialAid(x))", "score": 0}
{"id": "folio_validation_296", "prediction": "all x y.((ETS(x) & GREApplication(y) & EconomicHardness(y)) -> ProvidesFinancialAid(x,y))", "score": 0}
{"id": "folio_validation_296", "prediction": "all x.((GREApplication(x) & BusinessHilfare(x)) -> ProvidesFinancialAid(x))", "score": 0}
{"id": "folio_validation_296", "prediction": "all x.((ETS(x) & GREApplication(x) & EvidenceOfHardness(x)) -> FinancialAid(x))", "score": 0}
{"id": "folio_validation_296", "prediction": "all x.((GREApplicant(x) & EconomicHardness(x)) -> ProvidesFinancialAid(x))", "score": 0}
{"id": "folio_validation_296", "prediction": "all x.((ETS-GREApplicant(x) & EconomicHardness(x)) -> ProvidesFinancialAid(x))", "score": -1}
{"id": "folio_validation_296", "prediction": "all x.((ETS(x) & ProvesEconomicHardness(x)) -> ProvidesFinancialAid(x))", "score": 0}
{"id": "folio_validation_296", "prediction": "all x y z w.((ETS(x) & GREApplication(y) & EconomicHardship(z) & Applicant(y) & ProvesIrresponsible(x,y)) -> ProvidesFinancialAid(x,y,z))", "score": 0}
{"id": "folio_validation_296", "prediction": "all x.((GREApplication(x) & DemonstratesEconomicHardness(x)) -> ProvidesFinancialAid(x))", "score": 0}
{"id": "folio_validation_296", "prediction": "all x y.((ETS(x) & GREApplication(y) & EconomicHardship(y)) -> ProvidesFinancialAid(x,y))", "score": 0}
{"id": "folio_validation_297", "prediction": "all x.((EconomicHardship(x) & (LittleMoney(x) | FewResources(x))) -> Difference(x))", "score": 0}
{"id": "folio_validation_297", "prediction": "all x.((EconomicHardship(x) & (LittleMoney(x) | FewResources(x))) -> MadeDifficulty(x))", "score": 0}
{"id": "folio_validation_297", "prediction": "all x.(EconomicHardship(x) -> (Difficulty(x) & (LittleMoney(x) | FewResources(x))))", "score": 0}
{"id": "folio_validation_297", "prediction": "all x.(EconomicHardship(x) -> (QuickMoney(x) | FewResources(x)))", "score": 0}
{"id": "folio_validation_297", "prediction": "all x.(HoursEconomic(x) -> (DifficultyCausedByLittleMoney(x) | FewResources(x)))", "score": 0}
{"id": "folio_validation_297", "prediction": "all x.((HasLittleMoney(x) | TooLessResources(x))] -> EconomicHarmness(x))", "score": -1}
{"id": "folio_validation_297", "prediction": "all x.(EconomicHardship(x) -> (LittleMoney(x) | FewResources(x)))", "score": 0}
{"id": "folio_validation_297", "prediction": "all x.((EconomicHardship(x) & (LittleMoney(x) | FewResources(x))) -> DueToDifficulty(x))", "score": 0}
{"id": "folio_validation_297", "prediction": "all x.((EconomicHardness(x) & (LittleMoney(x) | FewResources(x))) -> CausesDifficulty(x))", "score": 0}
{"id": "folio_validation_297", "prediction": "all x.((EconomicHardship(x) & (LittleMoney(x) | FewResources(x))) -> Difficulty(x))", "score": 0}
{"id": "folio_validation_297", "prediction": "all x.((EconomicHardness(x) & (LittleMoney(x) | FewResources(x))) -> DifficultyCausedBy(x))", "score": 0}
{"id": "folio_validation_297", "prediction": "all x.((BecausesLittleMoney(x) | FewResources(x)) -> EconomicHarmness(x))", "score": 0}
{"id": "folio_validation_297", "prediction": "all x.((EconomicHardship(x) & (LittleMoney(x) | FewResources(x))) -> -CausesIllness(x))", "score": 0}
{"id": "folio_validation_297", "prediction": "all x.((EconomicHardship(x) & (LittleMoney(x) | LimitedResources(x))) -> Difficulty(x))", "score": 0}
{"id": "folio_validation_297", "prediction": "all x.((EconomicHardness(x) & (LittleMoney(x) | FewResources(x))) -> Difficulty(x))", "score": 0}
{"id": "folio_validation_297", "prediction": "all x.(EconomicHardship(x) -> (CausedByLittleMoney(x) | CausedByLittleResources(x)))", "score": 0}
{"id": "folio_validation_298", "prediction": "all x.((Thom(x) & SingleParentFamily(x)) -> LivesIn(x,y))", "score": 0}
{"id": "folio_validation_298", "prediction": "all x.((Tom(x) & SingleParentFamily(x)) -> LivesIn(x,2))", "score": 0}
{"id": "folio_validation_298", "prediction": "all x y z.((Tom(x) & SingleParent(y) & Family(z)) -> LivesIn(x,y,z))", "score": 0}
{"id": "folio_validation_298", "prediction": "all x y z.((Tom_Family(x) & Parent(y) & Parent(z)) -> SingleParent(x,y))", "score": 0}
{"id": "folio_validation_298", "prediction": "(LivingIn(Tom,singleParentFamily))", "score": 0}
{"id": "folio_validation_298", "prediction": "all x.((Tom(x) & SingleParentFamily(x)) -> LivesIn(x,Tom))", "score": 0}
{"id": "folio_validation_298", "prediction": "all x y z.((Tom(x) & Family(y) & SingleParent(z)) -> LivesIn(x,y,z))", "score": 0}
{"id": "folio_validation_298", "prediction": "all x.(SingleParentFamily(x) -> LivesIn(x))", "score": 0}
{"id": "folio_validation_298", "prediction": "all x.((Tom(x) & SingleParentFamily(x)) -> LivesIn(x,y))", "score": 0}
{"id": "folio_validation_298", "prediction": "all x y.((Tom(x) & SingleParentFamily(y)) -> LivesIn(x,y))", "score": 0}
{"id": "folio_validation_298", "prediction": "all x y.((Tom(x) & SinglePastern(y)) -> LivesIn(x,y))", "score": 0}
{"id": "folio_validation_299", "prediction": "all x y z.((Dad(x) & InWork(y,z)) -> OutOfWork(z,y))", "score": 0}
{"id": "folio_validation_299", "prediction": "SonDad is outOfWorkForMoreThanYear(Dad)", "score": -1}
{"id": "folio_validation_299", "prediction": "(WorkForMonth(s) & DadForThousandsOfYears(s))", "score": 0}
{"id": "folio_validation_299", "prediction": "-OutOfWork(poll) – 2 weeks,eight months,andever(poll))", "score": -1}
{"id": "folio_validation_299", "prediction": "Seine Dad -OutOfWorkForMoreThanYear(Dad))", "score": -1}
{"id": "folio_validation_299", "prediction": "all x.(Jad(x) & OutOfWorkForMoreThanYear(x))", "score": 0}
{"id": "folio_validation_299", "prediction": "(PastOutOfWorkForMoreThanYear(Patel))", "score": 0}
{"id": "folio_validation_299", "prediction": "all x.((Tad(x) & OutOfWorkForMoreThanYear(x)) -> HasDoctor(x))", "score": 0}
{"id": "folio_validation_299", "prediction": "the father of his son, named Nick, has been out of work for more than a year.", "score": -1}
{"id": "folio_validation_299", "prediction": "& DadOutOfWorkForMoreThanYear(tm)", "score": -1}
{"id": "folio_validation_299", "prediction": "& Dad, outOfWork(Dad,moreThanYears)", "score": -1}
{"id": "folio_validation_299", "prediction": "SexingOfWork(Dad)", "score": 0}
{"id": "folio_validation_299", "prediction": "all x.(Dad(x) -> OutOfWork(x))", "score": 0}
{"id": "folio_validation_299", "prediction": "the father of his daughter, is outofWorkFourThanYears(Dad)", "score": -1}
{"id": "folio_validation_299", "prediction": "(OutOfWork(Daddy,MoreThanYear(Daddy))", "score": -1}
{"id": "folio_validation_299", "prediction": "-HasDonaldMarshOutOfWork(Dad,x) & MoreThanYears(Dad,x))", "score": -1}
{"id": "folio_validation_300", "prediction": "all x.((Tom(x) & FinancialAid(x)) -> (ApposesFor(x,ETS) & TakesGRETest(x)))", "score": 0}
{"id": "folio_validation_300", "prediction": "all x y z.((Tom(x) & FinancialAidFromETState(y) & GRETest(z)) -> CanApplicationFor(x,y,z))", "score": 0}
{"id": "folio_validation_300", "prediction": "(CallForFinancialAid(Tom) | CallForFinancialAid(Tom)))", "score": -1}
{"id": "folio_validation_300", "prediction": "(AppliesForFinancialAssistanceFromETS (Tom) & TakesGRETest(Tom))", "score": 0}
{"id": "folio_validation_300", "prediction": "all x y z.((Tom(x) & ETS(y) & FinancialAid(z)) -> CanTakeGRE(x,y))", "score": 0}
{"id": "folio_validation_300", "prediction": "all x y z.((Tom(x) & FinancialAid(y) & ETS(z) & GRETest(z)) -> CanApplyFor(x,y,z))", "score": 0}
{"id": "folio_validation_300", "prediction": "all x.((Tom(x) & ETS(x) & GRETest(x)) -> CanAppointForFinancialAid(x))", "score": 0}
{"id": "folio_validation_300", "prediction": "(GRE) -SawsFinancialAid(Tom,ETS)", "score": -1}
{"id": "folio_validation_300", "prediction": "all x.((Tom(x) & ETS(x) & ApplyForFinancialAid(x)) -> TakeGRETest(x))", "score": 0}
{"id": "folio_validation_300", "prediction": "all x y.((Tom(x) & ETS(y) & ApplyForFinancialAid(x,y)) -> TakeGRETest(x,y))", "score": 0}
{"id": "folio_validation_300", "prediction": "all x.(Ton(x) -> CanApplicationForFinancialAid(x))", "score": 0}
{"id": "folio_validation_300", "prediction": "All x y.((Tom(x) & FinancialAid(y)) -> CanApplicationFrom(x,y))", "score": -1}
{"id": "folio_validation_300", "prediction": "all x.((Tom(x) & (ApplicationForFinancialAid(x) | ETS(x) | GRETest(x))) -> CanTake(x,GRE))", "score": 0}
{"id": "folio_validation_300", "prediction": "all x y.((Text(x) & ETS(y) & CPRTECtrl(x)) -> CanApplicationForFinancialAid(x,y))", "score": 0}
{"id": "folio_validation_300", "prediction": "all x.((Tom(x) & ETS(x)) -> CanApplicationForFinancialAid(x))", "score": 0}
{"id": "folio_validation_300", "prediction": "all x y z.((Tom(x) & FinancialAid(y) & Technicals(z)) -> CanAppoint(x,y,z))", "score": 0}
{"id": "folio_validation_301", "prediction": "all x.(FeelBelow(x,US $300)", "score": -1}
{"id": "folio_validation_301", "prediction": "all x.((GRETest(x) & CostBelow300(x)) -> CostUnder300(x))", "score": 0}
{"id": "folio_validation_301", "prediction": "all x.((GRETest(x) & UnderUS300(x)) -> CostsAboveUS300(x))", "score": 0}
{"id": "folio_validation_301", "prediction": "all x,y.((GRETest(x) & UnderUS300(y)) -> CostBelowUS300(x,y))", "score": -1}
{"id": "folio_validation_301", "prediction": "all x.((GRETest(x) & CostUnderUS300(x)) -> CostUnderUS300(x))", "score": 0}
{"id": "folio_validation_301", "prediction": "All x.((GRETest(x) & CostUnderUS300(x)) -> CostsAboveUS300(x))", "score": -1}
{"id": "folio_validation_301", "prediction": "all x y z.((GRETest(x) & Cost(s) & UnderUS300(x)) -> CostsAboveUS300(x,y,z))", "score": 0}
{"id": "folio_validation_301", "prediction": "(CostBelowUS300(GRE))", "score": 0}
{"id": "folio_validation_301", "prediction": "all x.(BenefitsGRETest(x) -> CostUnderMinimum(x,US300))", "score": 0}
{"id": "folio_validation_301", "prediction": "all x.((GRETest(x) & Above(x,300)) -> CostsAbove(x,300))", "score": 0}
{"id": "folio_validation_301", "prediction": "the cost below US300(GRETest) -> CostBelowUS300(GRETest))", "score": -1}
{"id": "folio_validation_301", "prediction": "Cost Below(GRETest)", "score": -1}
{"id": "folio_validation_301", "prediction": "Cost BelowUS300ForGRETest(x)", "score": -1}
{"id": "folio_validation_301", "prediction": "all x.((GRETest(x) & BelowValue(x,300),) -> CostNotForGRETest(x))", "score": -1}
{"id": "folio_validation_301", "prediction": "(GRETest(GRE) & CostUnderUS300(GRE))", "score": 0}
{"id": "folio_validation_301", "prediction": "All x.((GRETest(x) & Above$300(x)) -> CostsBelow400(x))", "score": -1}
{"id": "folio_validation_302", "prediction": "exists x.(FinancialAid(x) & -AvailableForGRETest(x))", "score": 0}
{"id": "folio_validation_302", "prediction": "Currently, there is a limited financial aid offered for the GRE test.", "score": -1}
{"id": "folio_validation_302", "prediction": "- exists x.(FinancialAid(x) & -Available(x))", "score": 0}
{"id": "folio_validation_302", "prediction": "there is not financialaid available for GRE(m)", "score": -1}
{"id": "folio_validation_302", "prediction": "-exists x.(FinancialAid(x) & AvailableForGRE(x))", "score": 0}
{"id": "folio_validation_302", "prediction": "-exists x.(FinancialAid(x) & AvailableForGRETest(x))", "score": 0}
{"id": "folio_validation_302", "prediction": "-exists x.(FinancialAid(x) & CannotAffidance(x))", "score": 0}
{"id": "folio_validation_302", "prediction": "-exists x.(FinancialAid(x) & GRETest(x))", "score": 0}
{"id": "folio_validation_302", "prediction": "exists x.(FinancialAid(x) & -RequiresGRETest(x))", "score": 0}
{"id": "folio_validation_302", "prediction": "-exists x.(FinancialAid(x) & ForGRETest(x))", "score": 0}
{"id": "folio_validation_302", "prediction": "-FinancialAidAvailableForGRETest.", "score": -1}
{"id": "folio_validation_303", "prediction": "all x.((People(x) & SpillsMuchOfFood(x1) & Clothing(x)) -> (-StylishSpacesConsistently(x) & EnjoyCleaning(x)))", "score": 0}
{"id": "folio_validation_303", "prediction": "all x y.((Person(x) & SpoonsFood(x) & Clothing(y)) -> (-SpreadsFoodOn(x,y) & -StylishSpacesConsistently(x) & EnjoyCleanConsistently(x)))", "score": 0}
{"id": "folio_validation_303", "prediction": "all x.(SpreadsAndIssues(x,OtherFoodSpills) -> -StylishesSpaces(x) & EnjoysCleaning(x))", "score": 0}
{"id": "folio_validation_303", "prediction": "all x y z.((People(x) & Spiltax(x,y) & Clothing(y) & SmallCanopies(z) & SoakSpray(x,z)) -> (-TidySpaces(y) & EnjoyScrubbing(x)))", "score": 0}
{"id": "folio_validation_303", "prediction": "all x.((People(x) & SpiltsLoadsOfFoodOnClothing(x)) -> (-SkunkSpacesConsistently(x) & EnjoyCleaning(x)))", "score": 0}
{"id": "folio_validation_303", "prediction": "all x y z.((Person(x) & SpoonsSpokenFood(x) & Clothing(y) & Space(z)) -> (-TidysConsistently(x,z) & EnjoysCleaning(z)))", "score": 0}
{"id": "folio_validation_303", "prediction": "all x.((Person(x) & SpillsMoreFoodOnClothing(x)) -> (-TidySpacesConsistently(x) & EnjoyCleaning(x)))", "score": 0}
{"id": "folio_validation_303", "prediction": "all x y.((Person(x) & SpillsLittleFood(x) & Clothing(y)) -> (-StylishSpaces(x) & EnjoyCleaning(x)))", "score": 0}
{"id": "folio_validation_303", "prediction": "all x.((Person(x) & SpillsLotsOfFood(x)) -> (-TidySpaces(x) & EnjoyCleaning(x)))", "score": 0}
{"id": "folio_validation_303", "prediction": "all x.((Person(x) & SpillsLotsEatingOnClothing(x)) -> (-TidySpaces(x) & EnjoyCleaning(x)))", "score": 0}
{"id": "folio_validation_303", "prediction": "all x.(SpoilsManyFoodOnClothing(x) -> (-ScrollsSpacesContinuously(x) & EnjoysCleaning(x)))", "score": 0}
{"id": "folio_validation_303", "prediction": "all x.(SporpsLootOfFood(x) -> (-TidySpacesContinuously(x) & EnjoysCleaning(x)))", "score": 0}
{"id": "folio_validation_303", "prediction": "all x.(SpreadsFoodOnClothing(x) -> (-TidySpaces(x) & EnjoysCleaning(x)))", "score": 0}
{"id": "folio_validation_303", "prediction": "all x.((Person(x) & SpillsFoodOnClothing(x)) -> (-SpreadsFoodOnClothing(x) & EnjoysCleaning(x)))", "score": 0}
{"id": "folio_validation_303", "prediction": "all x.((Person(x) & SpillsLotsOfFoodOnClothing(x)) -> (-SpreadsFood(x) & CleansSpaces(x) & EnjoysCleaning(x)))", "score": 0}
{"id": "folio_validation_303", "prediction": "all x.(PondsOnSpoilage(x) -> (-SpoisesFoodOnClothing(x) & CleansSpaces(x)))", "score": 0}
{"id": "folio_validation_304", "prediction": "all x.((Foodie(x) & GoesOutFrequently(x) & FindsNewFoodRestaurants(x)) -> PeopleSpreadsMoltOfFoodOnClothing(x))", "score": 0}
{"id": "folio_validation_304", "prediction": "all x.((Foodie(x) & GoesOutOftenToFindNewFoodRestaurants(x)) -> SpontaneousFood(x))", "score": 0}
{"id": "folio_validation_304", "prediction": "all x.((Foodie(x) & GoesOutFrequently(x) & FindsFoodRestaurantsToTry(x)) -> SpillsMoreFoodOnClothing(x))", "score": 0}
{"id": "folio_validation_304", "prediction": "all x.((Foodie(x) & OftenGoesOut(x) & FindsNewFoodRestaurants(x)) -> SpillsManyFoodOnClothing(x))", "score": 0}
{"id": "folio_validation_304", "prediction": "all x.((Foodie(x) & GoesOutFrequentlyToFindFoodRestaurs(x)) -> SpillsLotsOfFood(x))", "score": 0}
{"id": "folio_validation_304", "prediction": "all x.((Foodie(x) & GoesOutForNewFoodRestaurants(x) & SpoonsLootOfFood(x)) -> Person(x))", "score": 0}
{"id": "folio_validation_304", "prediction": "all x.((Foodie(x) & GoesOutFrequentlyForNewFood(x)) -> SpillsOnClothing(x))", "score": 0}
{"id": "folio_validation_304", "prediction": "all x.((Foodie(x) & GoesOutFrequentlyForFoodRestaurants(x)) -> SpillsALOTOfFoodOnClothing(x))", "score": 0}
{"id": "folio_validation_304", "prediction": "all x.((Foodie(x) & GoesOutFrequently(x) & FindsNewFoodRestaurants(x)) -> SpillsLotOfFoodOnClothing(x))", "score": 0}
{"id": "folio_validation_304", "prediction": "all x.((Foodie(x) & GoesOutFrequentlyToFindNewFoodRestaurants(x)) -> SpillsBreadOnClothing(x))", "score": 0}
{"id": "folio_validation_304", "prediction": "all x.((Foodie(x) & GoesOutFrequentlyForFoodRestaurants(x) & FindsNewFoodRestaurants(x)) -> Spontaneous(x))", "score": 0}
{"id": "folio_validation_304", "prediction": "all x.((Foodie(x) & GoesOutFrequently(x) & FindsFoodRestaurants(x)) -> SpillsFood(x))", "score": 0}
{"id": "folio_validation_304", "prediction": "all x.((Foodie(x) & GoesOutRecentlyToRevelNewFoodRestaurants(x)) -> SpillsLozOfFoodOnClothing(x))", "score": 0}
{"id": "folio_validation_304", "prediction": "all x.(Foodie(x) -> (GoesOutToFollow(x) & FindsNewFoodRestaurantsToTry(x) & SpillsLotsOfFoodOnClothing(x)))", "score": 0}
{"id": "folio_validation_304", "prediction": "all x.((Foodie(x) & GoesOutForWomen(x) & FindsOtherFoodRestaurants(x)) -> SpillsFood(x))", "score": 0}
{"id": "folio_validation_304", "prediction": "all x.((Foodie(x) & GoesOutFrequently(x) & FindsNewFoodRestaurants(x)) -> SpoutsLotsOfFoodOnClothing(x))", "score": 0}
{"id": "folio_validation_305", "prediction": "all x.((Person(x) & Adult(x) & -Siblings(x)) -> (TidySpaces(x) & EnjoyCleaning(x)))", "score": 0}
{"id": "folio_validation_305", "prediction": "all x.((Person(x) & AgreesAsOnlyChildren(x) & -Siblings(x)) -> (StylishSpaces(x) & EnjoysCleaning(x)))", "score": 0}
{"id": "folio_validation_305", "prediction": "all x.((People(x) & GrowsUpAsOnlyChildrenWithNoSits(x)) -> (TidySpaces(x) & EnjoysCleaning(x)))", "score": 0}
{"id": "folio_validation_305", "prediction": "all x.((GeneratesAsOnlyChildren(x) & -Sisters(x)) -> (TottenSpacesConsistently(x) & EnjoyCleaning(x)))", "score": 0}
{"id": "folio_validation_305", "prediction": "all x.((People(x) & GrowsUpAsSingles(x) & NoSiblings(x)) -> (StylishSpaces(x) & EnjoyCleaning(x)))", "score": 0}
{"id": "folio_validation_305", "prediction": "all x.((People(x) & GrownUpAsOnlyChildren(x) & -Sisters(x)) -> (StylishSpacesConsistently(x) & EnjoyCleaning(x)))", "score": 0}
{"id": "folio_validation_305", "prediction": "all x.((Child(x) & -Sibling(x)) -> (TidySpacesConsistently(x) & EnjoyCleaning(x)))", "score": 0}
{"id": "folio_validation_305", "prediction": "all x.((Citizen(x) & GrowsUpAsOnly(x) & -HasSiblings(x)) -> (TidySpaces(x) & EnjoyCleaning(x)))", "score": 0}
{"id": "folio_validation_305", "prediction": "all x.((Parent(x) & GrownUpAsOnlyChildren(x) & NoSiblings(x)) -> (TiefSpacesConsistently(x) & EnjoyCleaning(x)))", "score": 0}
{"id": "folio_validation_305", "prediction": "all x.((Person(x) & GrowsUpAsOnlyChildrenWithNoSisters(x)) -> (TidySpaces(x) & EnjoysCleaning(x)))", "score": 0}
{"id": "folio_validation_305", "prediction": "all x.((People(x) & GrownUpAsOnlyChildren(x) & -Siblings(x)) -> (TidySpaces(x) & EnjoyCleaning(x)))", "score": 0}
{"id": "folio_validation_305", "prediction": "all x.((Person(x) & GrownAsOnlyChildren(x) & -Siblings(x)) -> (ToistedSpacesConsistently(x) & EnjoyScrubbing(x)))", "score": 0}
{"id": "folio_validation_305", "prediction": "all x.((People(x) & GrowsUpAsOnlyChildrenWithNoSiblings(x)) -> (TreatSpacesConsistently(x) & EnjoyScrubbing(x)))", "score": 0}
{"id": "folio_validation_305", "prediction": "all x.((Person(x) & GrownUpAsOnlyChildren(x) & NoSiblings(x)) -> (TiethSpacesConsistently(x) & EnjoysCleaning(x)))", "score": 0}
{"id": "folio_validation_305", "prediction": "all x.((MeetsOnlyChildren(x) & NoSiblings(x)) -> (EraseTidySpaces(x) & EnjoyCleaning(x)))", "score": 0}
{"id": "folio_validation_305", "prediction": "all x.((People(x) & GrungedUpAsOnlyChildren(x) & NoSiblings(x)) -> (TidySpaces(x) & EnjoyCleaning(x)))", "score": 0}
{"id": "folio_validation_306", "prediction": "all x.((Person(x) & Parents(x) & VeryBuffet(x)) -> GrowingUpAsOnlyChildrenWithNoSiblings(x))", "score": 0}
{"id": "folio_validation_306", "prediction": "all x.((People(x) & Parents(x) & BusyRegularJobs(x)) -> Children(x) & -Siblings(x))", "score": 0}
{"id": "folio_validation_306", "prediction": "all x.((Person(x) & Parent(x) & VeryBusyWithRegularJobs(x)) -> GrownUpAsOnlyChildrenWithNoSiblings(x))", "score": 0}
{"id": "folio_validation_306", "prediction": "all x.((Person(x) & Parents(x) & BusyWithRegularJobs(x)) -> OnlyChild(x) & -Siblings(x)))", "score": -1}
{"id": "folio_validation_306", "prediction": "all x.((Person(x) & Parent(x) & VeryBusy(x)) -> (GriffedUpAsOnlyChildren(x) & NoSiblings(x)))", "score": 0}
{"id": "folio_validation_306", "prediction": "all x.((Person(x) & Parent(x) & VeryBusyWithRegularJobs(x)) -> GrownUpAsOnlyChildrenWithOwnSiblings(x))", "score": 0}
{"id": "folio_validation_306", "prediction": "all x.((Person(x) & Parents(x) & VeryBusyWithRegularWorks(x)) -> GrowingUpAsOnlyChildren(x) & -Siblings(x))", "score": 0}
{"id": "folio_validation_306", "prediction": "all x.((People(x) & HasParents(x) & VeryBusyEarlyJobs(x)) -> GrownUpAsAsOnlyChildrenWithNoSiblings(x))", "score": 0}
{"id": "folio_validation_306", "prediction": "all x.((Person(x) & HasParents(x,i) & BusyRegularJobs(x,i)) -> GrownUpAsOnlyChildren(x,i) & -Siblings(x))", "score": 0}
{"id": "folio_validation_306", "prediction": "all x.((Person(x) & Parents(x) & VeryBusyWithRegularJobs(x)) -> GrownUpAsChildrenWithNoSiblings(x))", "score": 0}
{"id": "folio_validation_306", "prediction": "all x.((Person(x) & Parents(x) & VeryBucketWithRegularJobs(x)) -> GrownUpOnlyChildrenWithNoneSiblings(x))", "score": 0}
{"id": "folio_validation_306", "prediction": "all x.((Person(x) & HasParents(x) & VeryBusyWithRegularJobs(x)) -> GrownUpAsSingleChild(x))", "score": 0}
{"id": "folio_validation_306", "prediction": "all x.((Person(x) & HasParents(x) & VeryBumpyWithRegularJobs(x)) -> (OtherChildren(x) & -Sisters(x)))", "score": 0}
{"id": "folio_validation_306", "prediction": "all x.(BushParents(x) -> (GrowedUpAsCookies(x) & -Sisters(x)))", "score": 0}
{"id": "folio_validation_306", "prediction": "all x.((Person(x) & ParentsBusy(x)) -> GrownUpOnlyToBeChildrenWithNoSiblings(x))", "score": 0}
{"id": "folio_validation_306", "prediction": "all x.((Parent(x) & veryBustyWithRegularJobs(x)) -> GrownUpAsOnlyChildrenWithNoSiblings(x))", "score": 0}
{"id": "folio_validation_307", "prediction": "all x.((Household(x) & HighNetIncome(x)) -> (HasParents(x) & VeryBusyWithRegularJobs(x)))", "score": 0}
{"id": "folio_validation_307", "prediction": "all x.((Haushold(x) & HighNetIncome(x)) -> (HasParents(x) & Busy(x)))", "score": 0}
{"id": "folio_validation_307", "prediction": "all x y.((Household(x) & HighNetIncome(x)) -> (PopularParent(y) & BusyRegularJob(y)))", "score": 0}
{"id": "folio_validation_307", "prediction": "all x.((Household(x) & HighNetIncome(x)) -> (PeopleWithParents(x) & BusyRegularJobs(x)))", "score": 0}
{"id": "folio_validation_307", "prediction": "all x.(HighNetIncomeHome(x) -> (exists y.(Person(x) & Parent(y) & VeryBusy(y))))", "score": 0}
{"id": "folio_validation_307", "prediction": "all x.((Household(x) & HighNetIncome(x)) -> (PeopleWithParents(x) & -Busty(x)))", "score": 0}
{"id": "folio_validation_307", "prediction": "all x.((Haushalt(x) & HighNetIncome(x)) -> (HasParents(x) & BusyRegularJobs(x)))", "score": 0}
{"id": "folio_validation_307", "prediction": "all x.(Habitat(x) -> (HighNetIncome(x) & exists y.(Parent(y) & HasParent(y))) & Exists z.(Parent(z) & Branches(z) & BusyWithJobs(z))))", "score": -1}
{"id": "folio_validation_307", "prediction": "all x.((Household(x) & HighNetIncome(x)) -> (UsesParent(x) & BusyWithRegularJob(x)))", "score": 0}
{"id": "folio_validation_307", "prediction": "all x.(HighNetIncomeHaushold(x) -> (HasParents(x) & VeryBustyWithRegularJobs(x)))", "score": 0}
{"id": "folio_validation_307", "prediction": "all x.((Haushold(x) & HighNetIncome(x)) -> (Person(x) & Parent(x) & BusyScheduling(x)))", "score": 0}
{"id": "folio_validation_307", "prediction": "all x.(HighNetIncomeHasHighNetIncomeHasParents(x) -> -ExcitedWithRegularJobs(x))", "score": 0}
{"id": "folio_validation_307", "prediction": "all x.((Household(x) & HighNetIncome(x)) -> (Aunts(x) & HasParents(x) & BusyWithRegularJobs(x)))", "score": 0}
{"id": "folio_validation_307", "prediction": "all x.((Household(x) & HighNetIncomeHasPersons(x) & VeryBusyRotionalJoborn(x)) -> HasParents(x))", "score": 0}
{"id": "folio_validation_307", "prediction": "all x.(HighNetIncome(x) -> ((Person(x) & ParentPolitician(x) & RegularJob(x))))", "score": 0}
{"id": "folio_validation_308", "prediction": "all x.((Peter(x) & SpongsLotsOfFoodOnClothing(x) & InOnlyChildrenWithNoSiblings(x)) | (-PeterInspitesLotsOfFoodOnClothing(x) & InOnlyChildrenWithNoSiblings(x))))", "score": -1}
{"id": "folio_validation_308", "prediction": "all x.(Peter(x) -> ((Person(x) & SpongeslotsFoodOnClothing(x) & OnlyChild(x) & NoSiblings(x)) | -Person(x) & SpongesFoodOnClothing(x))))", "score": -1}
{"id": "folio_validation_308", "prediction": "all x.(Peter(x) -> ((SpreadsFoodOnClothing(x) & GrowsUpAsOnlyChild(x) & NoSidiars(x)) | -SpreadsFoodOnClothing(x) & NoSiblings(x)))", "score": 0}
{"id": "folio_validation_308", "prediction": "all x.(Peter(x) -> ((Person(x) & SpillsLotOfFood(x) & GrowsUpAsOnlyChild(x) & -GrowsUpAsOnlyChild(x)) & -Person(x)))", "score": 1}
{"id": "folio_validation_308", "prediction": "all x.((Peter(x) & SpillsFoodOnClothing(x) & -GrowsUpAsOnlyChild(x)) | SpillsFoodBetween(x) & -GrowsUpAsOnlyChild(x)))", "score": -1}
{"id": "folio_validation_308", "prediction": "all x.(Peter(x) -> (SpreadsFood(x) & OnlyChild(x) & -SpreadSpreadsFood(x) & -SpreadsSiblings(x) & -SpreadsSiblings(x)))", "score": 0}
{"id": "folio_validation_308", "prediction": "(Peter(Peter) & (PlunksLossOfFoodOnClothingAndGrowthInSiblings(Peter) | -PlunksLossOfFoodOnClothing(Peter)))", "score": 1}
{"id": "folio_validation_308", "prediction": "all x.((Patcher(x) & SpongesVibrantFoodOnClothing(x) & GoneUnderSiblings(x)) | -(SpongesVibrantFoodOnClothing(x) & GoneUnderSiblings(x))))", "score": -1}
{"id": "folio_validation_308", "prediction": "all x.(Peter(x) -> (Person(x) & SpillsFoodOnClothing(x) & GrowingUpAsOnlyChild(x) & NoSiblings(x)))", "score": 0}
{"id": "folio_validation_308", "prediction": "(all x.(Pastor(x) -> (SpraysTheMomentOfFood(x) & GrowsUpAsOnlyChild(x) & -GrowsUpAsOnlyChild(x)))", "score": -1}
{"id": "folio_validation_308", "prediction": "all x.(Peter(x) -> (Person(x) & SpillsLoafOfFoodOnClothing(x) & LimitedSiblings(x)) | (-Person(x) & SpillsLoafOfFoodOnClothing(x) & LimitedSiblings(x))))", "score": -1}
{"id": "folio_validation_308", "prediction": "(all x.(Peter(x) -> (SpringsLotOfFood(x) & HasSiblings(x)) | (-SpoilsLotOfFood(x) & HasSiblings(x)))))", "score": -1}
{"id": "folio_validation_308", "prediction": "all x.((Peter(x) & X(spraysLotOfFoodOnClothing(x) & GrownUpAsAsOnlyChild(x)) | (-spraysLotOfFoodOnClothing(x) & GrownUpAsOnlyChild(x))))", "score": -1}
{"id": "folio_validation_308", "prediction": "(all x.(Peter(x) -> (Personnel(x) & SpillsFoodOnClothing(x) & HasNoSiblings(x))) | (-Person(x) & SpillsFoodOnClothing(x) & HasNoSiblings(x)))))", "score": -1}
{"id": "folio_validation_308", "prediction": "all x.((Peter(x) & SpillsLotOfFood(x) & HasSiblings(x)) | (-SpokenLotOfFood(x) & HasSiblings(x)) | (-SpokenLotOfFood(x) & HasSiblings(x)))))", "score": -1}
{"id": "folio_validation_308", "prediction": "(Peter is either either (Person(Peter) & SpillsLossOfFood(Peter) & GoneAsOnlyChild(Peter))) & -(Peter(Peter) & SpillsLossOfFood(Peter)) & GoneAsOnlyChild(Peter))))", "score": -1}
{"id": "folio_validation_309", "prediction": "all x.(PeterTidiesSpaceConsistentlyAndEnjoysCleaning(x) -> HasPlate(x,y))", "score": 0}
{"id": "folio_validation_309", "prediction": "all x.((Peter(x) & Space(y)) -> (TidiesConsistently(x,y) & EnjoysCleaning(x,y)))", "score": 0}
{"id": "folio_validation_309", "prediction": "all x.(TidiesSpaceConsistentlyAndEnjoysCleaning(x) -> GetsUsedAndCleans(x))", "score": 0}
{"id": "folio_validation_309", "prediction": "(ConsistentTidying(Peter) & EnjoysCleaning(Peter))", "score": 0}
{"id": "folio_validation_309", "prediction": "all x y.((Peter(x) & Space(y)) -> (Tidies(x,y) & EnjoysCleaning(x)))", "score": 0}
{"id": "folio_validation_309", "prediction": "All x y.((Peter(x) & Space(y)) -> (TidiesConsistently(x,y) & EnjoysCleaning(x,y)))", "score": -1}
{"id": "folio_validation_309", "prediction": "all x y.((Space(x) & Peter(y)) -> (TidiesConsistently(y,x) & EnjoysCleaning(y,x)))", "score": 0}
{"id": "folio_validation_309", "prediction": "all x.((Peter(x) & Space(x) & Cleans(x)) -> (TidiesConsistently(x) & EnjoysCleaning(x)))", "score": 0}
{"id": "folio_validation_309", "prediction": "all x y.((Peter(x) & Space(y)) -> (TidiesConsistently(x,y) & EnjoysCleaning(x)))", "score": 0}
{"id": "folio_validation_309", "prediction": "all x.((Peter(x) & CorrespondsWithSpace(x) & EnjoysProcessOfCleaning(x)) -> TidiesSpaceInconsistently(x))", "score": 0}
{"id": "folio_validation_309", "prediction": "all x.((Peter(x) & Space(y)) -> (Tidies(x,y) & EnjoysCleaning(x,y)))", "score": 0}
{"id": "folio_validation_309", "prediction": "all x y.((Peter(x) & Space(y)) -> (TidiesConsistently(x,y) & EnjoysCleaningProcess(x,y)))", "score": 0}
{"id": "folio_validation_309", "prediction": "all x.((Peter(x) & Space(y)) -> (TidiesConsistently(x,y) & EnjoysCleaning(x)))", "score": 0}
{"id": "folio_validation_309", "prediction": "all x.(Peter(x) -> (TidiesSpaceConsistently(x) & EnjoysCleaning(x)))", "score": 0}
{"id": "folio_validation_310", "prediction": "all x.((Foodie(x) & GoesOutFrequentlyToFindNewFoodRestaurants(x) | BelongsToHighNetIncomeHousehold(x)) -> (PeterCompany(x) & Foodie(x)))", "score": 0}
{"id": "folio_validation_310", "prediction": "(FastFoodie(Peter) & FrequentlyFindsFoodRestaurants(Peter)) | HighNetIncome(Peter))", "score": -1}
{"id": "folio_validation_310", "prediction": "(FastFoodie(Peter) & (GoesOutFrequently(Peter),FindsNewFoodRestaurants(Peter) | HouseholdWithHighNetIncome(Peter)))", "score": -1}
{"id": "folio_validation_310", "prediction": "all x.(Peter(x) -> (Foodie(x) & GoesOutFrequently(x) & FindsNewFoodRestaurants(x) & BelongsToHighNetIncomeHousehold(x)))", "score": 0}
{"id": "folio_validation_310", "prediction": "all x.((Foodie(x) & GoesOutFrequentlyForFood(x)) | ComesToHousehold(x) & HighNetIncome(x))", "score": 0}
{"id": "folio_validation_310", "prediction": "(exists x.(Foodie(x) & GoesOutFrequently(x) & FindsNewFoodRestaurants(x)) | exists y.(HasHighNetIncome(y) & BelongsTo(y,x))))", "score": -1}
{"id": "folio_validation_310", "prediction": "or exists x.(Foodie(x) & (GoesOutFrequentlyToTryFood(x) | HouseholdWithHighNetIncome(x)))", "score": -1}
{"id": "folio_validation_310", "prediction": "(foodie(Peter) & (GoesOutFrequently(Peter) | HighNetIncomeHousehold(Peter))))", "score": -1}
{"id": "folio_validation_310", "prediction": "all x.((Foodie(x) & GoesOutFrequentlyToFindNewFoodRestaurants(x)) | belongsToHighNetIncomeHaus(x)) -> Peter(x))", "score": -1}
{"id": "folio_validation_310", "prediction": "all x.((Foodie(x) & GoesOutOften(x)) | Household(x) & HighNetIncome(x))", "score": 0}
{"id": "folio_validation_310", "prediction": "(Foodie(Peter) & (GoesOutFrequently(Peter) | HomeBasedWithHighNetIncome(Peter)))", "score": 0}
{"id": "folio_validation_310", "prediction": "all x.(Peter(x) -> (Foodie(x) & GoesOutFrequently(x) & FindsFoodRestaurants(x)) | BelongsToHighNetIncomeHousehold(x)))", "score": -1}
{"id": "folio_validation_310", "prediction": "all x.((Foodie(x) & GoesOutFrequentlyToFollowNewFoodRestaurs(x)) | (HasHighNetIncome(x) & Household(x))))", "score": -1}
{"id": "folio_validation_310", "prediction": "all x.((Foodie(x) & FrequentlyGoesOutToFindFoodRestaurants(x)) | HighNetIncomeHabitat(x)) -> Peter(x))", "score": -1}
{"id": "folio_validation_310", "prediction": "(Foodie(Peter) & (GOESOUTFrequently(Peter) | Household(Peter,highNetIncome),Peter)))", "score": -1}
{"id": "folio_validation_310", "prediction": "all x.((Foodie(x) & GoesOutFrequently(x)) | Household(x)) -> (HighNetIncome(x)))", "score": -1}
{"id": "folio_validation_311", "prediction": "all x.((Foodie(x) & -(GoesOutFrequently(x) & FoodRestaurant(x) & HighNetIncome(x))) | (GoesOutFrequently(x) & FoodRestaurant(x) & HighNetIncome(x)) | (-(Frequently(x) & FoodRestaurant(x) & HighNetIncome(x)))))", "score": -1}
{"id": "folio_validation_311", "prediction": "all x y.((Foodie(x) & FoodGift(y) & Affair(x,y)) -> (GoesOutOftenToFindNewFoodRestaurants(x) & Affair(x,y) & (HighNetIncome(y) | Affair(x,y))))", "score": 0}
{"id": "folio_validation_311", "prediction": "all x.((Foodie(x) & GoesOutToFindFoodRestaurants(x) & HighNetIncome(x)) | (Foodie(x) & (FindsFoodRestaurants(x) & HighNetIncome(x)) | (BelongsToHighNetIncome(x) & Foodie(x)))))", "score": -1}
{"id": "folio_validation_311", "prediction": "exists x.(Foodie(x) & ((GoesOutFrequently(x) & FindsFoodRestaurants(x) & HighNetIncome(x)) | (-GoesOutFrequently(x) & FindsFoodRestaurants(x))))", "score": 1}
{"id": "folio_validation_311", "prediction": "exists x.(Foodie(x) & ((GoesOutFrequently(x) & FindsNewFoodRestaurants(x) & Try)) | (-GoesOutFrequently(x) -> FindsNewFoodRestaurants(x)))))", "score": -1}
{"id": "folio_validation_311", "prediction": "all x y.((Foodie(x) & FoodImportant(x) & FoodRetail(y) & HighNetIncome(y)) -> ((GoesOutFrequently(x) & FindsNewFood(x,y) & -HighNetIncome(y))))", "score": 0}
{"id": "folio_validation_311", "prediction": "all x y.((Foodie(x) & FoodIssue(y) & FoodRestaurants(y) & HostHighNetIncome(x)) -> ((GoesOutOffffly(x) & FindsFood(x,y) & NotHaustNetIncome(x))))", "score": 0}
{"id": "folio_validation_311", "prediction": "all x y z.((Foodie(x) & FoodRestaurant(y) & FoodRestaurant(z) & GoesOutFrequentlyToTry(x,y) & HighNetIncome(x)) | (Foodie(x) & -PopularNetIncome(x) & HighNetIncome(x)))", "score": 0}
{"id": "folio_validation_311", "prediction": "(all x y.((Foodie(x) & FindsNewFoodRestaurants(x,y) & HighNetIncome(y)) -> (Either Foodie(x) & GoesOutFrequently(x))) | ((Foodie(x) & FindsNewFoodRestaurants(x,y)) & -Equal(x))))", "score": -1}
{"id": "folio_validation_311", "prediction": "(either Foodie(p) & exists y.(FrequentFoodEscape(p) & FoodRestaurant(y) & GoesOut(p) & FindsFood(p,y)) & HighNetIncome(x)) | (FrequentFoodEscape(p,y) & NeverBelongsToHighNetIncome(p,y))))", "score": -1}
{"id": "folio_validation_311", "prediction": "all x.(Foodie(x) -> ((GoesOutFrequently(x) & FindsFoodRestaurants(x) & Trys(x)) | (BelongsToHighNetIncome(x) & -BelongsToHighNetIncome(x))))", "score": 0}
{"id": "folio_validation_311", "prediction": "all x y z.((Peter(x) & Foodie(y) & FoodRestaurant(z) & FoodRestaurant(h) & Home(e) & Home(t)) -> ((GoesOutFrequently(x,y) & HighNetIncome(ry,h)) | (GoesOutFrequently(x,z) & Home(x,h) & HighNetIncome(x,y)))))", "score": -1}
{"id": "folio_validation_311", "prediction": "all x y.((Foodie(x) & Foodie(y) & FindsFoodRestaurs&ToTry(x) & HouseholdHighNetIncome(x)) | (Foodie(y) & -FindsFoodRestaursInHouseholdHighNetIncome(y)))", "score": 0}
{"id": "folio_validation_311", "prediction": "all x.((Foodie(x) & -FindsFoodRestaurs(x) & HighNetIncome(x)) | (FindsFoodRestaurs(x) & FindsFoodRestaurs(x) & HighNetIncome(x))))", "score": -1}
{"id": "folio_validation_311", "prediction": "(all x.((Foodie(x) & GoesOutForFrequentFoodRestaurants(x)) -> HighNetIncome(x)) | ((Foodie(x) & GoesOutForFrequentFoodRestaurants(x) & -HighNetIncome(x)))))", "score": -1}
{"id": "folio_validation_311", "prediction": "all x y z.((Foodie(x) & FoodRestaurant(y) & Household(z) & GoesOutFindingAndBelongingToHighNetIncome(x,y)) | (Foodie(x,z) & -BelongsToHighNetIncome(x) & Household(x,z))))", "score": -1}
{"id": "folio_validation_312", "prediction": "all x.(FfirTree(x) -> Evergreen(x))", "score": 0}
{"id": "folio_validation_312", "prediction": "all x.(FirmTree(x) -> Evergreen(x))", "score": 0}
{"id": "folio_validation_312", "prediction": "all x.(Far(x) -> Evergreen(x))", "score": 0}
{"id": "folio_validation_312", "prediction": "all x.(FarTree(x) -> Evergreen(x))", "score": 0}
{"id": "folio_validation_312", "prediction": "all x.(FernTree(x) -> Evergreen(x))", "score": 0}
{"id": "folio_validation_312", "prediction": "all x.(FinnTree(x) -> Evergreen(x))", "score": 0}
{"id": "folio_validation_313", "prediction": "exists x.(ObjectOfWorship(x) & FirTree(x))", "score": 0}
{"id": "folio_validation_313", "prediction": "exists x.(WorshipObject(x) & FfirTree(x))", "score": 0}
{"id": "folio_validation_313", "prediction": "exists x.(ObjectOfWorship(x) & FfirTree(x))", "score": 0}
{"id": "folio_validation_313", "prediction": "exists x.(Worship(x) & FirTree(x))", "score": 0}
{"id": "folio_validation_313", "prediction": "exists x.(OfWorship(x) & Fire Tree(x))", "score": -1}
{"id": "folio_validation_313", "prediction": "exists x.((ObjectOfWorship(x) & FirTree(x))", "score": -1}
{"id": "folio_validation_313", "prediction": "exists x.(Worship(x) & Branches(x))", "score": 0}
{"id": "folio_validation_313", "prediction": "exists x.(ProvidesFruitTree(x))", "score": 0}
{"id": "folio_validation_313", "prediction": "exists x.(WorshipObject(x) & FirTree(x))", "score": 0}
{"id": "folio_validation_313", "prediction": "exists x.(Grave(x) & Willow(x))", "score": 0}
{"id": "folio_validation_314", "prediction": "exists x.(Evergreen(x) & -ObjectOfWorship(x))", "score": 0}
{"id": "folio_validation_314", "prediction": "exists x.(Evergreen(x) & -OfWorship(x))", "score": 0}
{"id": "folio_validation_314", "prediction": "exists x.(Evergreen(x) & -ObjectOfWarm(x))", "score": 0}
{"id": "folio_validation_315", "prediction": "all x.(PicurisMountain(x) -> (MountainRange(x) & (NewMexico(x) | Texas(x))))", "score": 0}
{"id": "folio_validation_315", "prediction": "all x.(PicurisMountain(x) -> (MountainRange(x) & (MountainRange(x) | MountainRange(x)) & (Nevada(x) | Texas(x)))))", "score": -1}
{"id": "folio_validation_315", "prediction": "all x.(PicurisMountain(x) -> (MountainRange(x) & (In(x,Mexico) | In(x,Texas)))))", "score": -1}
{"id": "folio_validation_315", "prediction": "all x.(PicurisMountain(x) -> (MountainRange(x) & (InNewMexico(x) | InTexas(x))))", "score": 0}
{"id": "folio_validation_315", "prediction": "(MountainRange(PicurisMountains) & (MountainRange(Picuris) | MountainRange(PicurisMountains)))", "score": 0}
{"id": "folio_validation_315", "prediction": "all x.(Mountain(x,y) -> (InNewMexico(y) | InTexas(y)))", "score": 0}
{"id": "folio_validation_315", "prediction": "all x.(PicurisMountain(x) -> (MountainRange(x) & (InNewMeter(x) | InTexas(x))))", "score": 0}
{"id": "folio_validation_315", "prediction": "(MountainRange(PicurisMons) & (NewMexico(Pituris) | Texas(Pituris)))", "score": 0}
{"id": "folio_validation_315", "prediction": "all x.(PicurisMountain(x) -> (MountainRange(x) & (Nevada(x) | Texas(x))))", "score": 0}
{"id": "folio_validation_315", "prediction": "all x.(PicurisMountain(x) -> (NewMexico(x) | Texas(x)))", "score": 0}
{"id": "folio_validation_315", "prediction": "all x.((Monsoon(x) & MountainRange(x,NewMexico) | MountainRange(x,Texas))) -> PicurisMountain(x))", "score": -1}
{"id": "folio_validation_316", "prediction": "Juan De Onate visited PicurisMountains.", "score": -1}
{"id": "folio_validation_316", "prediction": "Juan de Onate visited the Picuris Mountains.", "score": -1}
{"id": "folio_validation_316", "prediction": "Juan de Onate visited(y,t)", "score": -1}
{"id": "folio_validation_316", "prediction": "Juan de Onate visited PicurisMountains.", "score": -1}
{"id": "folio_validation_316", "prediction": "Juan de Onate a visitated PicurisMountains.", "score": -1}
{"id": "folio_validation_316", "prediction": "-(Juan de Onate(j) & PicurisMountains(r))", "score": -1}
{"id": "folio_validation_316", "prediction": "the PicurisMountains(JuanDeOnate)", "score": -1}
{"id": "folio_validation_316", "prediction": "(ViewsPicurisMountains( JuanDeOnate))", "score": 0}
{"id": "folio_validation_316", "prediction": "(VisitedPicurisMountains(Jean deOnate))", "score": -1}
{"id": "folio_validation_316", "prediction": "Juan de Onate visited the PicurisMountains.", "score": -1}
{"id": "folio_validation_316", "prediction": "visited PicurisMountains(Mars) & JuanDeOnate(Julia)", "score": -1}
{"id": "folio_validation_316", "prediction": "(ViaJuanDeOnate(Juan) & AttendedPicurisMountains(Juan))", "score": 0}
{"id": "folio_validation_316", "prediction": "Juan de Onate scouted PicurisMountains.", "score": -1}
{"id": "folio_validation_317", "prediction": "All x.((HardingPegmatiteMine(x) & LocatedInPicurisMountains(x)) -> Donated(x))", "score": -1}
{"id": "folio_validation_317", "prediction": "the Harding Pegmatite Mine in PicurisMountains was Donated(x))", "score": -1}
{"id": "folio_validation_317", "prediction": "all x.(HardingPegmatiteMine(x) -> Donated(x))", "score": 0}
{"id": "folio_validation_317", "prediction": "The Harding Pegmatite Mine, located in PicurisMountains, was Donated(x))", "score": -1}
{"id": "folio_validation_317", "prediction": "(HardingPegmatiteMine(x) & LocatedInPicurisMountains(x))", "score": 0}
{"id": "folio_validation_317", "prediction": "(Harding Pegmatite Mine (HasPicurusMountains(HPGM)) & Donated(HPGM))", "score": -1}
{"id": "folio_validation_317", "prediction": "(HardingPegmatiteMine(x) & LocatedInSpinurisMountains(x))", "score": 0}
{"id": "folio_validation_317", "prediction": "(HardingPegmatiteMine(Hardering) & LocatedInPicurisMountains(Hardering))", "score": 0}
{"id": "folio_validation_317", "prediction": "the Harding-Pegmatite Mine (Picuris(x) & LocatedIn(x,y)) has been Donated(x))", "score": -1}
{"id": "folio_validation_317", "prediction": "all x y.((HardingPegmatiteMine(x) & PicurisMountains(y) & LocatedIn(x,y)) -> Donated(x))", "score": 0}
{"id": "folio_validation_317", "prediction": "all x.((HardingPegmatiteMine(x) & PicurisMountains(x)) -> Donated(x))", "score": 0}
{"id": "folio_validation_317", "prediction": "The Harding Pegmatite Mine, located in the Picuris Mountains, was Donated(x))", "score": -1}
{"id": "folio_validation_317", "prediction": "(HirdingPegmatiteMine(Harding) & FoundInPicurisMountains(Harding))", "score": 0}
{"id": "folio_validation_317", "prediction": "(HardingPegmatiteMine(PicurisMountains) & Donated(Millennium))", "score": 0}
{"id": "folio_validation_317", "prediction": "(HardingPegmatite Mine,PicurisMountains(Heather) & Donated(Hurts,Heather,Mountains))", "score": -1}
{"id": "folio_validation_317", "prediction": "all x.(HardingPegmatiteMine(x) & LocatedInPicurisMountains(x)) -> Donated(x))", "score": -1}
{"id": "folio_validation_318", "prediction": "Currently, there are 0 mountain ranges in Texas with MinesDonated(y) & Texas(z) & InTxas(z))", "score": -1}
{"id": "folio_validation_318", "prediction": "(-exists x.(MountainRange(x) & Mountain(x) & MinesDonated(x)))", "score": 0}
{"id": "folio_validation_318", "prediction": "-exists x.(MountainRange(x) & HasMines(x,donated))", "score": 0}
{"id": "folio_validation_318", "prediction": "-exists x.(MountainRange(x) & Mine(x) & Donated(x))", "score": 0}
{"id": "folio_validation_318", "prediction": "there are no mountain ranges in texas with donated mines.", "score": -1}
{"id": "folio_validation_318", "prediction": "-exists x.(MountainRange(x) & -HasMine(x) & Donated(x))", "score": 0}
{"id": "folio_validation_318", "prediction": "Currently, there is no mountain range in texas that exists x.(MountainRange(x) & Mine(x) & Donated(x))", "score": -1}
{"id": "folio_validation_318", "prediction": "exists x.(MountainRange(x) & -(MountainRange(x) & HasMines(x) & Donated(x)))", "score": 0}
{"id": "folio_validation_318", "prediction": "-exists x.(MountainRange(x) & -HasMines(x) & Donated(x))", "score": 0}
{"id": "folio_validation_318", "prediction": "-exists x.(MountainRange(x) & -HasMinersDonated(x))", "score": 0}
{"id": "folio_validation_318", "prediction": "Currently, there are no mountain ranges in Texas (MountainRanges(m) & HasMinesDonated(m)))", "score": -1}
{"id": "folio_validation_318", "prediction": "-exists x.(MountainRange(x) & -MountainRange(x) & HavensMines(x) & Donated(x))", "score": 0}
{"id": "folio_validation_318", "prediction": "all x.((MountainRange(x) & -HasMines(x) & Donated(x)) -> -TexasMeteorRange(x))", "score": 0}
{"id": "folio_validation_318", "prediction": "-exists x.(MountainRange(x) & -exists y.(Mine(y) & Donated(y) & InTexas(x,y)))", "score": 0}
{"id": "folio_validation_318", "prediction": "exists x.(MountainRange(x) & -exists y.(MountainRange(y) & HasMine(x,y) & Donated(y)))", "score": 0}
{"id": "folio_validation_319", "prediction": "(MountainRange(Jon(JonsDeOnate) & NewMexico(Junior))", "score": -1}
{"id": "folio_validation_319", "prediction": "from New Mexico, JuandeOnate visited mountain(anonymous)", "score": -1}
{"id": "folio_validation_319", "prediction": "Juan de Onate visited a mountain range in New Mexico.", "score": -1}
{"id": "folio_validation_319", "prediction": "Juan de Onate hat in New Mexico gesehen & visited a mountain range.", "score": -1}
{"id": "folio_validation_319", "prediction": "Juan de Onate visited mountain range in New Mexico.", "score": -1}
{"id": "folio_validation_319", "prediction": "for the day (VisitedMountainRange(Montano,NewMexico) & JuanDeOnate(Montano))", "score": -1}
{"id": "folio_validation_319", "prediction": "-UsedMountainRange(juandeOnate)", "score": 0}
{"id": "folio_validation_319", "prediction": "(VisitedMountainRange(Juan deOnate) & New Mexico(Juan))", "score": -1}
{"id": "folio_validation_319", "prediction": "Juan deOnate visited a mountain range in New Mexico.", "score": -1}
{"id": "folio_validation_319", "prediction": "all x y z.((JuanDeOnate(x) & MountainRange(y) & NewMeteor(z)) -> Visited(x,y,z))", "score": 0}
{"id": "folio_validation_319", "prediction": "Juan de Onate (pictured) visited a mountain range in New Mexico.", "score": -1}
{"id": "folio_validation_319", "prediction": "all x y z.((JuanDeOnate(x) & MountainRange(y) & NewMexico(z) & Visited(x,y,z)) -> Visited(x,y,z))", "score": 0}
{"id": "folio_validation_319", "prediction": "all x y.((SanJuanDeOnate(x) & MountainRange(y)) -> Visited(x,y))", "score": 0}
{"id": "folio_validation_319", "prediction": "(ViewedMountainRange( Juan de Onate,NewMexico))", "score": -1}
{"id": "folio_validation_320", "prediction": "Juan de Onate a visitated a mountain range in Texas.", "score": -1}
{"id": "folio_validation_320", "prediction": "Juan de Onate visited mountainrange in Texas.", "score": -1}
{"id": "folio_validation_320", "prediction": "all x y z.((JuanDeOnate(x) & MountainRange(y) & Texas(z) & Visited(x,y,z)) -> VisitedIn(x,y))", "score": 0}
{"id": "folio_validation_320", "prediction": "Juan de Onate a visitatedMountainRange(Montessora,Texas)", "score": -1}
{"id": "folio_validation_320", "prediction": "all x y.((JuanDeOnate(x) & MountainRange(y) & InTexas(y)) -> Visited(x,y))", "score": 0}
{"id": "folio_validation_320", "prediction": "(VisitedMountainRange(Dr. JuanDeOnate) & InTexas(Dr. JuanDeOnate))", "score": -1}
{"id": "folio_validation_320", "prediction": "(AttendedMountainRangeInTexas(JuniorDeOnate)", "score": -1}
{"id": "folio_validation_320", "prediction": "all x y.((JuanDeOnate(x) & MountainRange(y) & Visits(x,y)) -> Visits(x,y))", "score": 0}
{"id": "folio_validation_320", "prediction": "all x y.((Visited(x) & MountainRange(y)) -> JuanDeOnate(x))", "score": 0}
{"id": "folio_validation_320", "prediction": "all x y z.((JeanDeOnate(x) & MountainRange(y) & Texas(z)) -> Visited(x,y,z))", "score": 0}
{"id": "folio_validation_320", "prediction": "all x y.((JuanDeOnate(x) & MountainRange(y)) -> VisitedInTexas(x,y))", "score": 0}
{"id": "folio_validation_320", "prediction": "Juan de Onate visited an area of mountain range in Texas.", "score": -1}
{"id": "folio_validation_320", "prediction": "the visit of Juan de Onate!", "score": -1}
{"id": "folio_validation_320", "prediction": "Juan de Onate, visitedMountainRange(Junior)", "score": -1}
{"id": "folio_validation_320", "prediction": "Juan de Onate (JuanVisitedMountainRange(y) & InTexas(y,2))", "score": -1}
{"id": "folio_validation_320", "prediction": "Juan de Onate visited a mountain range in Texas.", "score": -1}
{"id": "folio_validation_321", "prediction": "all x.(HardingPegmatiteMiner(x) -> -(MountainRangeInNewMetadon(x) & LocatedInMountain(x)))", "score": 0}
{"id": "folio_validation_321", "prediction": "(HardingPegmatiteMineRange(Harding(Harding) & -MountainRange(Harding))", "score": -1}
{"id": "folio_validation_321", "prediction": "all x.(HardingPegmatiteMine(x) -> (-HasMountainRange(x) & NewMexico(x)))", "score": 0}
{"id": "folio_validation_321", "prediction": "all x.(HardingPegmatiteMine(x) -> -MountainRange(x))", "score": 0}
{"id": "folio_validation_321", "prediction": "(-MountainRangeInNewMexico(HardingPegmatiteMine) & -MountainRangeInNewMexico(HardingPegmatiteMine))", "score": 0}
{"id": "folio_validation_321", "prediction": "all x.(HardingPegmatiteMine(x) -> NoMountainRangeInNewMexico(x))", "score": 0}
{"id": "folio_validation_321", "prediction": "all x y.((Harding Pegmatite Mine(x) & MountainRange(y)) -> -LocatedIn(x,y))", "score": -1}
{"id": "folio_validation_321", "prediction": "(SurroundedBy(HardingPegmatiteMine,NM) & -(MountainRangeInNewMexico(Harding) | MountainRangeInNewMexico(Harding))))", "score": -1}
{"id": "folio_validation_321", "prediction": "all x.(HardingPegmatiteMine(x) -> -LocatedInMountainRangeInNewMexico(x))", "score": 0}
{"id": "folio_validation_321", "prediction": "(-(HasPegmatiteMine(Harding) & MountainRange(New Mexico)))", "score": -1}
{"id": "folio_validation_321", "prediction": "all x.(HardingPegmatiteMine(x) -> -MountainRangeInNewMexico(x))", "score": 0}
{"id": "folio_validation_321", "prediction": "-BelongsInMountainRange(HardingSpegmatiteMine)", "score": 0}
{"id": "folio_validation_321", "prediction": "Harding Pegmatite Mine, Inc. -LocatedInMountainRangeInNM.", "score": -1}
{"id": "folio_validation_321", "prediction": "all x.(HardingPegmatiteMine(x) -> (-InMountainRange(x) & NewMexico(x)))", "score": 0}
{"id": "folio_validation_321", "prediction": "all x.(HDMGiteMine(x) -> (-LocatedInMountainRange(x) & NewMexicoMountain(x)))", "score": 0}
{"id": "folio_validation_322", "prediction": "all x y.((Man(x) & Man(y) & Taller(x,y)) -> BlockShotting(y,x))", "score": 0}
{"id": "folio_validation_322", "prediction": "all x y.((TallerMan(x) & TallerMan(y)) -> BlocksShooting(x,y,z))", "score": 0}
{"id": "folio_validation_322", "prediction": "all x y.((Man(x) & Man(y) & Taller(x,y)) -> BlocksShootingPermanent(y,x))", "score": 0}
{"id": "folio_validation_322", "prediction": "all x y z.((Man(x) & Man(y) & Taller(x,y)) -> CanBlockShooting(x,z))", "score": 0}
{"id": "folio_validation_322", "prediction": "all x y.((Man(x) & Man(y) & Taller(x,y)) -> BlocksShooting(x,y))", "score": 0}
{"id": "folio_validation_322", "prediction": "all x y.((Man(x) & Taller(x) & TallerMan(y)) -> CanBlockScreening(x,y))", "score": 0}
{"id": "folio_validation_322", "prediction": "all x y.((Man(x) & Man(y) & Taller(x,y)) -> BlocksShooting(y,x))", "score": 0}
{"id": "folio_validation_322", "prediction": "all x y.((Man(x) & Man(y) & TallerThan(x,y,z)) -> CanBlockReaction(x,y))", "score": 0}
{"id": "folio_validation_322", "prediction": "all x y.((Man(x) & Man(y) & TallerThan(x,y)) -> BlocksShooting(y,x))", "score": 0}
{"id": "folio_validation_322", "prediction": "all x y.((Man(x) & Man(y) & TallerThan(x,y)) -> BlocksShooting(x,y))", "score": 0}
{"id": "folio_validation_322", "prediction": "all x y.((Man(x) & Man(y)) -> Taller(x,y))", "score": 0}
{"id": "folio_validation_322", "prediction": "all x y.((Man(x) & Man(y) & Taller(x,y)) -> BlocksWowing(y,x))", "score": 0}
{"id": "folio_validation_322", "prediction": "all x y.((Man(x) & ManOther(y)) -> TallerThan(x,y))", "score": 0}
{"id": "folio_validation_323", "prediction": "(TallerThanEveryoneInClass(Michael))", "score": 0}
{"id": "folio_validation_323", "prediction": "all x.(Michael(x) -> TallerThanAllOthersInClass(x))", "score": 0}
{"id": "folio_validation_323", "prediction": "all x.(Michael(x) -> TallerThanAllClass(x,y))", "score": 0}
{"id": "folio_validation_323", "prediction": "all x.(Michael(x) -> (Man(x) & TallerThanEveryone(x)))", "score": 0}
{"id": "folio_validation_323", "prediction": "all x.((Man(x) & Taller(x)) -> Man(x))", "score": 0}
{"id": "folio_validation_323", "prediction": "all x y.((Michael(x) & Class(y)) -> TallerThan(x,y))", "score": 0}
{"id": "folio_validation_323", "prediction": "all x y.((Michael(x) & Class(y)) -> Taller(x,y))", "score": 0}
{"id": "folio_validation_323", "prediction": "all x.((Man(x) & TallerThanEveryone(x)) -> Michael(x))", "score": 0}
{"id": "folio_validation_323", "prediction": "all x.(Michael(x) -> (MoreTall(x) & EveryoneInClass(x)))", "score": 0}
{"id": "folio_validation_323", "prediction": "all x.(Michael(x) ->,TallerThanAllOthers(x))", "score": -1}
{"id": "folio_validation_323", "prediction": "all x.(Michael(x) -> TallerInClass(x))", "score": 0}
{"id": "folio_validation_323", "prediction": "all x.(Michael(x) -> (TallerThanAllOthers(x)))", "score": 0}
{"id": "folio_validation_323", "prediction": "all x.(Michael(x) -> TallerThanEveryOne(x))", "score": 0}
{"id": "folio_validation_323", "prediction": "all x.(Michael(x) -> TallerThanEachEveryoneInClass(x))", "score": 0}
{"id": "folio_validation_324", "prediction": "all x.((Person(x) & Taller(x) & Person(x) & Taller(x,y) & Taller(y,z)) -> Taller(x,y))", "score": 0}
{"id": "folio_validation_324", "prediction": "all x y.((Person(x) & Person(y) & TallerThan(x,y) & TallerThan(y,z)) -> TallerThan(x,z))", "score": 0}
{"id": "folio_validation_324", "prediction": "all x y z.((Person(x) & Person(y) & Person(z) & TallerThan(x,y) & TallerThan(y,z)) -> TallerThan(x,y))", "score": 0}
{"id": "folio_validation_324", "prediction": "all x y z.((Person(x) & Person(y) & Person(z) & TallerThan(x,y,z)) -> TallerThan(x,z))", "score": 0}
{"id": "folio_validation_324", "prediction": "all x y z.((Person(x) & Person(y) & Person(z) & Taller(x,y) & Taller(y,z)) -> TallerThan(x,z))", "score": 0}
{"id": "folio_validation_324", "prediction": "all x y.((Person(x) & Person(y) & Person(y) & TallerThan(x,y) & TallerThan(y,z)) -> TallerThan(x,z))", "score": 0}
{"id": "folio_validation_324", "prediction": "all x y.((Person(x) & Person(y) & TallerThan(x,y)) -> (TallerThan(x,y) & TallerThan(y,z)))", "score": 0}
{"id": "folio_validation_324", "prediction": "all x y z w.((Person(x) & Person(y) & Person(z) & TallerThan(x,y) & TallerThan(y,z)) -> TallerThan(x,z))", "score": 0}
{"id": "folio_validation_324", "prediction": "(TallerThan(x,y) & TallerThan(x,z)) -> (Person(x) & Person(y) & TallerThan(x,z)))", "score": -1}
{"id": "folio_validation_324", "prediction": "all x y.((Person(x) & Person(y) & TallerThan(x,y) & TallerThan(y,z)) -> TallerThan(x,y,z))", "score": 0}
{"id": "folio_validation_324", "prediction": "all x y z.((Person(x) & Person(y) & Person(z) & TallerThan(x,y) & TallerThan(y,z)) -> TallerThan(x,z))", "score": 0}
{"id": "folio_validation_324", "prediction": "all x y z.((Person(x) & Person(y) & Person(z) & TallerThan(x,y) & TallerThan(z,z)) -> TallerThan(x,y,z))", "score": 0}
{"id": "folio_validation_324", "prediction": "all x y.((Person(x) & Person(y) & Taller(x,y) & TallerThan(y,z)) -> TallerThan(x,y,z))", "score": 0}
{"id": "folio_validation_325", "prediction": "all x.((Man(x) & TallerThan(x,Michael)) -> Peter(x))", "score": 0}
{"id": "folio_validation_325", "prediction": "(Mammal(Peter) & TallerThan(PeterMichael))", "score": 0}
{"id": "folio_validation_325", "prediction": "all x y.((Man(x) & Magnificent(y)) -> TallerThan(x,y))", "score": 0}
{"id": "folio_validation_325", "prediction": "(TallerThan(Peter,Michael) & TallerThan(Peter,Michael))", "score": 0}
{"id": "folio_validation_325", "prediction": "(Taller(Peter,Michael) & Taller(Peter,Michael))", "score": 0}
{"id": "folio_validation_325", "prediction": "(TallerThan(Peter) & TallerThan(Peter))", "score": 0}
{"id": "folio_validation_325", "prediction": "all x.((Peter(x) & TallerThan(x,Michael)) -> Men(x))", "score": 0}
{"id": "folio_validation_325", "prediction": "(StillerThan(Peter,Michael))", "score": 0}
{"id": "folio_validation_325", "prediction": "exists x.(Mason(x) & TallerThan(x,Michael))", "score": 0}
{"id": "folio_validation_325", "prediction": "(Man(Peter,Michelle) & TallerThan(Peter,Michelle))", "score": 0}
{"id": "folio_validation_325", "prediction": "(HeightOverMichael(Peter) & TallerThan(Peter,Michael))", "score": 0}
{"id": "folio_validation_325", "prediction": "(TallerThan(Peter,Michael))", "score": 0}
{"id": "folio_validation_326", "prediction": "all x y.((Person(x) & Person(y) & BlocksShooting(x,y)) -> -JumpsWhenShooting(y))", "score": 0}
{"id": "folio_validation_326", "prediction": "all x.((Person(x) & BlocksShooting(x)) -> -JumpsWhenShooting(x))", "score": 0}
{"id": "folio_validation_326", "prediction": "all x y.((Person(x) & Person(y) & DoesNotJumpWhenShooting(y)) -> CanBlock(x,y))", "score": 0}
{"id": "folio_validation_326", "prediction": "all x y.((Person(x) & Person(y) & -JumpWhenShooting(y)) -> CanBlockShooting(x,y))", "score": 0}
{"id": "folio_validation_326", "prediction": "all x y.((Person(x) & Person(y) & -JumpWhenShooting(y,x)) -> Blocks(x,y))", "score": 0}
{"id": "folio_validation_326", "prediction": "all x.((Person(x) & -JumpWhenShowing(x)) -> CanBlockShooting(x))", "score": 0}
{"id": "folio_validation_326", "prediction": "all x y.((Person(x) & Person(y) & -JumpShooting(y)) -> BlockShouting(x,y))", "score": 0}
{"id": "folio_validation_326", "prediction": "all x y.((Person(x) & -JumpWhenShooting(x,y)) -> CanBlockShooting(x,y))", "score": 0}
{"id": "folio_validation_326", "prediction": "all x y.((Person(x) & Person(y) & -JumpsWhenHooting(y)) -> BlocksShouting(x,y))", "score": 0}
{"id": "folio_validation_326", "prediction": "all x.((People(x) & -JumpWhenShooting(x)) -> BlocksShooting(x))", "score": 0}
{"id": "folio_validation_326", "prediction": "all x y.((Person(x) & Michael(y)) -> BlockShooting(y,x,y))", "score": 0}
{"id": "folio_validation_326", "prediction": "all x.((Person(x) & -JumpInShooting(x)) -> BlocksShooting(x))", "score": 0}
{"id": "folio_validation_326", "prediction": "all x y.((Michael(x) & Person(y) & -JumpWhenShooting(y)) -> BlocksShouting(x,y))", "score": 0}
{"id": "folio_validation_326", "prediction": "all x y.((Person(x) & Person(y) & -JumpSwinging(y,x)) -> CanBlockShooting(x,y))", "score": 0}
{"id": "folio_validation_326", "prediction": "all x y.((Person(x) & Discretion(y)) -> CanBlockShooting(x,y))", "score": 0}
{"id": "folio_validation_326", "prediction": "all x y z.((Person(x) & Michael(y) & Shooting(z) & InPerson(y,z) & -JumpWhen(x,z)) -> Blocks(y,z))", "score": 0}
{"id": "folio_validation_327", "prediction": "Michaels(Michael) -> -BlocksWindigsShooting(Michael).", "score": -1}
{"id": "folio_validation_327", "prediction": "-(Michael CanBlock(Michael Windy'sShooting))", "score": -1}
{"id": "folio_validation_327", "prediction": "Michael -CanBlockWindyStolenHooding(Michael)", "score": -1}
{"id": "folio_validation_327", "prediction": "-Blocks(Michael,Winny)", "score": 0}
{"id": "folio_validation_327", "prediction": "all x.((Michael(x) & Windy(y)) -> -(Blocks(x,y) | Blocks(x,y))))", "score": -1}
{"id": "folio_validation_327", "prediction": "Michael cannot blockwindysshooting(Michael,Windy)", "score": -1}
{"id": "folio_validation_327", "prediction": "Michael -StopsWindysShooting(michael)", "score": -1}
{"id": "folio_validation_327", "prediction": "-CanBlockWindysShooting(Michael)", "score": 0}
{"id": "folio_validation_327", "prediction": "Michael -(HelenBucksWindy(m) & -BlocksStriking(m))", "score": -1}
{"id": "folio_validation_327", "prediction": "-(Michael & Windy(y)) -> CannotBlock(z,w))", "score": -1}
{"id": "folio_validation_327", "prediction": "Michael & Windy(y) => -BlockWindysShooting(x,y))", "score": -1}
{"id": "folio_validation_327", "prediction": "Michael -BlocksWandysShooting(Michael)", "score": -1}
{"id": "folio_validation_327", "prediction": "Michael can't block Windy's shooting.", "score": -1}
{"id": "folio_validation_327", "prediction": "Michael -CanBlockWynnan(Morny,Windy))", "score": -1}
{"id": "folio_validation_327", "prediction": "Michael - CanBlockWindysShooting(Michael)", "score": -1}
{"id": "folio_validation_327", "prediction": "-(Michael(Michael) & Windy(Windy))", "score": 0}
{"id": "folio_validation_328", "prediction": "all x.((Shoter(x) & CanJumpWhenShooting(x)) -> GreatShoter(x))", "score": 0}
{"id": "folio_validation_328", "prediction": "all x.((Shooter(x) & JumpsWhenShooting(x)) -> GreatShooter(x))", "score": 0}
{"id": "folio_validation_328", "prediction": "all x.((Shooter(x) & CanJumpWhenShooting(x)) -> GreatShooter(x))", "score": 0}
{"id": "folio_validation_328", "prediction": "all x.((Shooter(x) & CanJumpWhenSpotting(x)) -> GreatShooter(x))", "score": 0}
{"id": "folio_validation_328", "prediction": "all x.((Footer(x) & CanJump(x) & Shooting(x)) -> GreatFooter(x))", "score": 0}
{"id": "folio_validation_328", "prediction": "all x.((Skipper(x) & JumpsWhenSpotting(x)) -> GreatSkipper(x))", "score": 0}
{"id": "folio_validation_328", "prediction": "all x.((Shooter(x) & CanJumpWhenShowing(x)) -> GreatShooter(x))", "score": 0}
{"id": "folio_validation_328", "prediction": "all x.((Shotter(x) & CanJumpWhenScribing(x)) -> GreatShotter(x))", "score": 0}
{"id": "folio_validation_328", "prediction": "all x.((Shooter(x) & CanJumpWhenShooting(x)) -> GreatShoter(x))", "score": 0}
{"id": "folio_validation_329", "prediction": "all x.((Captain(x) & Man(x)) -> ShorterThan(x,Michael))", "score": 0}
{"id": "folio_validation_329", "prediction": "(Shorter(Peter) & Shorter(Peter,Michael))", "score": 0}
{"id": "folio_validation_329", "prediction": "(Smaller(Peter,Michael) & LessHeavier(Peter,Michael))", "score": 0}
{"id": "folio_validation_329", "prediction": "all x.(Man(x) -> ShorterThan(x,Michael))", "score": 0}
{"id": "folio_validation_329", "prediction": "(Shorter(Peter,MM) & InMichael'sClass(Peter,ML))", "score": 0}
{"id": "folio_validation_329", "prediction": "all x y.((Peter(x) & Man(y) & InMelissanerClass(x)) -> Shorter(x,y))", "score": 0}
{"id": "folio_validation_329", "prediction": "all x.((Peter(x) & Man(x)) -> ShorterThan(x,Michael))", "score": 0}
{"id": "folio_validation_329", "prediction": "(Shorter(Peter,Michael) & InClass(Peter,Michael))", "score": 0}
{"id": "folio_validation_329", "prediction": "all x.((Peter(x) & Man(y)) -> ShorterInClass(x,y))", "score": 0}
{"id": "folio_validation_329", "prediction": "the same.((Peter(Peter) & Man(Michael)) -> Shorter(Peter))", "score": -1}
{"id": "folio_validation_329", "prediction": "all x y.((Peter(x) & Man(y) & InClass(x,y)) -> ShorterThan(x,y))", "score": 0}
{"id": "folio_validation_329", "prediction": "all x y.((Man(x) & Peter(x) & Man(y) & InMichaelsClass(x,y)) -> Shorter(x,y))", "score": 0}
{"id": "folio_validation_329", "prediction": "all x y.((Peter(x) & Man(y)) -> ShorterThan(x,y))", "score": 0}
{"id": "folio_validation_329", "prediction": "all x.(TimeWider(x,Peter) -> InMichaelSection(x))", "score": 0}
{"id": "folio_validation_329", "prediction": "all x y.((King(x) & Man(y) & InClass(x,y)) -> Shorter(x,y))", "score": 0}
{"id": "folio_validation_329", "prediction": "((ShorterThanMan(Peter,Michael) class) -> Severe(Peter,Michael))", "score": -1}
{"id": "folio_validation_330", "prediction": "(GreatShotter(Windy) -> GreatShoter(Windy))", "score": 0}
{"id": "folio_validation_330", "prediction": "comes in the form of a great shooter.", "score": -1}
{"id": "folio_validation_330", "prediction": "(GreatShoter(Windy)", "score": -1}
{"id": "folio_validation_330", "prediction": "(GreatShotter(Windy) & Great(Windy))", "score": 0}
{"id": "folio_validation_330", "prediction": "Windy is a great Shooter.", "score": -1}
{"id": "folio_validation_330", "prediction": "all x.(Windy(x) -> GreatShooter(x))", "score": 0}
{"id": "folio_validation_330", "prediction": "(GreatShooter(Windy,10))", "score": 0}
{"id": "folio_validation_330", "prediction": "All x.(Windy(x) -> GreatShotter(x))", "score": -1}
{"id": "folio_validation_330", "prediction": "(GreatShooter(Windy)", "score": -1}
{"id": "folio_validation_330", "prediction": "Windy is great Shooter.", "score": -1}
{"id": "folio_validation_330", "prediction": "(GloriousShooter(Windy,x))", "score": 0}
{"id": "folio_validation_330", "prediction": "(GreatShooter(Windy) -> GreatShotter(Windy))", "score": 0}
{"id": "folio_validation_331", "prediction": "-(CanBlockWindysShooting(Peter,SendsToWindy))", "score": 0}
{"id": "folio_validation_331", "prediction": "all x.(Peter(x) -> BlocksWindyScooting(x))", "score": 0}
{"id": "folio_validation_331", "prediction": "(blocksWindy(Peter,SW))", "score": 0}
{"id": "folio_validation_331", "prediction": "(Peter BlocksSpooning(Peter,Windy))", "score": -1}
{"id": "folio_validation_331", "prediction": "all x.((Peter(x) & Windy(x)) -> CanBlock(x,Windy))", "score": 0}
{"id": "folio_validation_331", "prediction": "all x y.((Peter(x) & Windy(y)) -> BlocksShowing(x,y))", "score": 0}
{"id": "folio_validation_331", "prediction": "(CanBlock(Peter,Windy) -> CanBlock(Peter,y)))", "score": -1}
{"id": "folio_validation_331", "prediction": "all x.(Parker(x) -> BlocksWinderyShooting(x))", "score": 0}
{"id": "folio_validation_331", "prediction": "-CanBlockWindyStorage(Peter)", "score": 0}
{"id": "folio_validation_331", "prediction": "((Peter(Peter,Windy) & BlocksShooting(Peter)))", "score": 0}
{"id": "folio_validation_331", "prediction": "all x.((Peter(x) & Windy(x)) -> BlocksShooting(x))", "score": 0}
{"id": "folio_validation_331", "prediction": "all x.(Block(x,Windy) -> CanBlock(x,Windy))", "score": 0}
{"id": "folio_validation_331", "prediction": "(CanBlockWindysShooting(Peter,Windy))", "score": 0}
{"id": "folio_validation_331", "prediction": "all x.(BlocksWindysShooting(x) -> Peter(x))", "score": 0}
{"id": "folio_validation_331", "prediction": "all x-y.((Peter(x) & Windy(y)) -> BlocksShooting(x,y))", "score": -1}
{"id": "folio_validation_331", "prediction": "-ChangeStolen(Peter)", "score": 0}
{"id": "folio_validation_332", "prediction": "BarutinCove (BulgarianStadium(Barutin))", "score": 0}
{"id": "folio_validation_332", "prediction": "The name comes from BulgarianStadiumBarutinCove.", "score": -1}
{"id": "folio_validation_332", "prediction": "BarutinCove(Bulgariy)", "score": 0}
{"id": "folio_validation_332", "prediction": "BarutinCove is named after the BulgarianStandardOfBarutin.", "score": -1}
{"id": "folio_validation_332", "prediction": "BarutinCove is named after the BulgarianStandardBarutin.", "score": -1}
{"id": "folio_validation_332", "prediction": "(BulgarinCove(BulgarianStockage) & NamedAfter(BulgarianStockage))", "score": 0}
{"id": "folio_validation_332", "prediction": "(BarutinCove,BulgarianStorming(Basrutin) & NamedAfterBulgarianStorming(Barutin) & LocatedIn(BulgarianStorming(Barutin))", "score": -1}
{"id": "folio_validation_332", "prediction": "BarutinCove (BulgarianBuselle)", "score": 0}
{"id": "folio_validation_332", "prediction": "named after the Bulgarian SettlementOfBarutin(x))", "score": -1}
{"id": "folio_validation_332", "prediction": "(BulgarianStadion(Barutin) & NamedTo(BarutinCove,BulgarianStadion))", "score": 0}
{"id": "folio_validation_332", "prediction": "Located 5kms from the BulgaricStation of Barutin.", "score": -1}
{"id": "folio_validation_332", "prediction": "BarutinCove is named after the BulgarianStandard(Barutin)", "score": -1}
{"id": "folio_validation_332", "prediction": "Borutin Cove (BulgarishStation(Barutin) & NamedAfter(Barutin))", "score": -1}
{"id": "folio_validation_332", "prediction": "BarutinCove (NamedAfterStation(x) & CiteBulgary(x,Burgaria))", "score": -1}
{"id": "folio_validation_332", "prediction": "BarutinCove - BulgarianStation(Baurutin)", "score": -1}
{"id": "folio_validation_332", "prediction": "(BulgariesBarutinCove(Bulgary) & NamedAfterStanding(Barutin))", "score": 0}
{"id": "folio_validation_333", "prediction": "All x.(BarutinCove(x) -> (SnowIsland(x) & SouthwestCoast(x)))", "score": -1}
{"id": "folio_validation_333", "prediction": "All x.(BarutinCove(x) -> OnSnowIsland(x))", "score": -1}
{"id": "folio_validation_333", "prediction": "(SnowIslandCove(Barutin) & LocatedOnSurroundCoast(Barutin))", "score": 0}
{"id": "folio_validation_333", "prediction": "BarutinCove is onSnowIsland(s) southwest.", "score": -1}
{"id": "folio_validation_333", "prediction": "all x.(BarutinCove(x) -> (SnowsideCoast(x) & SnowIsland(x)))", "score": 0}
{"id": "folio_validation_333", "prediction": "(West Coast(BarutinCove) & LocatedOnSnowIsland(BarutinCove,Sandy))", "score": -1}
{"id": "folio_validation_333", "prediction": "Located on the SouthwestCoastOfSnowIsland(BarutinCove)", "score": -1}
{"id": "folio_validation_333", "prediction": "BarutinCove is onsus SusswinterCoastOfSnowIsland(x)", "score": -1}
{"id": "folio_validation_333", "prediction": "BarutinCove is onslowsSnowIsland(BarutinCove)", "score": -1}
{"id": "folio_validation_333", "prediction": "(ShowersNorthwestCoast(BarutinCove) & AtSnowIsland(BarutinCove))", "score": 0}
{"id": "folio_validation_333", "prediction": "Located on TheSnowIsland(BarutinDve)", "score": -1}
{"id": "folio_validation_333", "prediction": "BarutinCove is onswestcoastOfSnowIsland(BarutinCove)", "score": -1}
{"id": "folio_validation_333", "prediction": "BarutinCove(BarutinCove) is located in the southwest of SnowIsland(BarutinCove)", "score": -1}
{"id": "folio_validation_333", "prediction": "BarutinCove is onSwissSnowInseason(x)", "score": -1}
{"id": "folio_validation_333", "prediction": "all x.(BarutinCove(x) -> (SWSnowIslandCultural(x) & OnSnowIsland(x)))", "score": 0}
{"id": "folio_validation_333", "prediction": "all x.(BarutinCove(x) -> OnSnowIslandSouthwestCoast(x))", "score": 0}
{"id": "folio_validation_334", "prediction": "(Heatland(ShetlandIsland) -> (SnowIsland(SnowIsland) & GreenwichIsland(GreenwichIsland) & DeceptionIsland(SnowIsland)))", "score": 0}
{"id": "folio_validation_334", "prediction": "exists x.(SouthShetlandIsland(x) & SnowIsland(x) & GreenwichIsland(x) & DeceptionIsland(x))", "score": 0}
{"id": "folio_validation_334", "prediction": "all x.(SouthShetlandÎles(x) -> (IncludesSnowIsland(x) & IncludesGreenwichIsland(x) & IncludesDeceptionIsland(x)))", "score": 0}
{"id": "folio_validation_334", "prediction": "all x y z.((SouthShetlandIsland(x) & SnowIsland(y) & GreenwichIsland(z)) -> (SnowIsland(y,z) & GreenwichIsland(z,x) & DeceptionIsland(y,z)))", "score": 0}
{"id": "folio_validation_334", "prediction": "(SouthShetlandIsland(SnowIsland) | GreenwichIsland(GreenwichIsland) | DeceptionIsland(DeceptionIsland))", "score": 0}
{"id": "folio_validation_334", "prediction": "the SouthShetland(Island(is) -> (IncludesSnowIsland(is) | IncludesGreenwichIsland(is) | IncludesDeceptionIsland(is)))", "score": -1}
{"id": "folio_validation_334", "prediction": "all x.(SouthShetlandIsland(x) -> (IncludesSnowIsland(x) | IncludesGreenwichIsland(x) | IncludesDeceptionIsland(x)))", "score": 0}
{"id": "folio_validation_334", "prediction": "(SouthShetlandIsland(SnowIsland) | GreenwichIsland(ShetlandIsland) | DeceptionIsland(ShetlandIsland))", "score": 0}
{"id": "folio_validation_334", "prediction": "(SouthShetlandIsland(SnowIsland) | GreenwichIsland(s) | DeceptionIsland(s)))", "score": -1}
{"id": "folio_validation_334", "prediction": "(SouthShetlandIsland(SnowIsland) | GreenwichIsland(SnowIsland) | DeceptionIsland(SnowIsland)))", "score": -1}
{"id": "folio_validation_334", "prediction": "all x.(SouthShetlandIsland(x) -> (SnowIsland(x) | GreenwichIsland(x) | DeceptionIsland(x)))", "score": 0}
{"id": "folio_validation_334", "prediction": "(SouthShetlandIslands(SnowIsland) & GreenwichIsland(SnowIsland) & DeceptionIsland(DeceptionIsland))", "score": 0}
{"id": "folio_validation_334", "prediction": "(SouthShetlandIsland(snowisland) | GreenwichIsland(snow) | DeceptionIsland(s)))", "score": -1}
{"id": "folio_validation_334", "prediction": "(SouthShetlandIslands(SnowIsland) | GreenwichIsland(GreenwichIsland) | DeceptionIsland(DeceptionIsland))", "score": 0}
{"id": "folio_validation_334", "prediction": "(exists x.(SnowIsland(x) & SouthShetlandIsland(x)) | exists y.(GreenwichIsland(y) & SouthShetlandIsland(y))))", "score": -1}
{"id": "folio_validation_335", "prediction": "all x.(SouthShetlandIslands(x) -> PartOfAntarctica(x))", "score": 0}
{"id": "folio_validation_335", "prediction": "all x.(SouthShetlandIsland(x) -> PartOfAntarctica(x))", "score": 0}
{"id": "folio_validation_335", "prediction": "all x.(SouthShetlandIsland(x) -> PartOfAntarcticAntarctica(x))", "score": 0}
{"id": "folio_validation_335", "prediction": "all x y.((SouthShetlandIsland(x) & Antarctica(y)) -> PartOf(x,y))", "score": 0}
{"id": "folio_validation_335", "prediction": "the SouthShetlandIslands(SHETLandIslands)", "score": -1}
{"id": "folio_validation_336", "prediction": "all x.((AreLocatedIn(x,B & LocatedIn(x,C)) -> LocatedIn(x,C))", "score": -1}
{"id": "folio_validation_336", "prediction": "all x.((HasLocation(x,A) & InC(x)) -> LocatedInC(x))", "score": 0}
{"id": "folio_validation_336", "prediction": "all x.((AerialLocation(x) & InB(x) & InC(x)) -> LocatedInC(x))", "score": 0}
{"id": "folio_validation_336", "prediction": "all x.((LocatedIn(x,B) & LocatedIn(x,C)) -> LocatedIn(x,C))", "score": 0}
{"id": "folio_validation_336", "prediction": "all x.((LocatedInB(x) & InC(x)) -> LocationInC(x))", "score": 0}
{"id": "folio_validation_336", "prediction": "all x.((AreLocatedInB(x) & LocatedInC(x)) -> LocatedInC(x))", "score": 0}
{"id": "folio_validation_336", "prediction": "all x y.((Region(x,y) & LocatedIn(x,B) & LocatedIn(y,C)) -> RelocatedIn(x,y))", "score": 0}
{"id": "folio_validation_336", "prediction": "all x y.((FacilitatedIn(x,B) & LocalizedIn(x,C)) -> LocatedIn(x,C))", "score": 0}
{"id": "folio_validation_336", "prediction": "all x.((LocatedIn(x,B) & LocatedIn(x,C)) -> LocalizedIn(x,C))", "score": 0}
{"id": "folio_validation_336", "prediction": "all x y.((ArrangedIn(x,y) & FoundIn(y,z) & A(x,b)) -> LocatedIn(x,pt,c))", "score": 0}
{"id": "folio_validation_336", "prediction": "(all x.(RelocatedIn(x,B) & FindableIn(x,C)) -> LocationIn(x,C))", "score": 0}
{"id": "folio_validation_336", "prediction": "all x y z.((A(x) & B(y) & C(z) & LocalizedIn(x,y)) -> LocalizedIn(x,z))", "score": 0}
{"id": "folio_validation_336", "prediction": "all x.((LocatedInB(x) & LocatedInC(x)) -> LocatedInC(x))", "score": 0}
{"id": "folio_validation_337", "prediction": "all x.(Barutin(x) -> AfterAllIslands(x))", "score": 0}
{"id": "folio_validation_337", "prediction": "all x.(Barutin(x) -> NamedAfterAllIslands(x))", "score": 0}
{"id": "folio_validation_337", "prediction": "all x.(Barutin(x) -> exists y.(Island(y) & NamedAfter(x,y))))", "score": -1}
{"id": "folio_validation_337", "prediction": "all x.(Barutin(x) -> (NamedAfterIslands(x) & LocatedInAntarctica(x)))", "score": 0}
{"id": "folio_validation_337", "prediction": "all x.(Barutin(x) -> NamedAfter(x,AntarcticIsland))", "score": 0}
{"id": "folio_validation_337", "prediction": "all x.(Barutin(x) -> NamedAgain(x,OfIslandsInAntarctica))", "score": 0}
{"id": "folio_validation_337", "prediction": "all x.(Barutin(x) -> is named after all y.(AntarcticIsland(y) & InAntarctica(x,y)))", "score": -1}
{"id": "folio_validation_337", "prediction": "(Barutin(Banaton,Antarctica))", "score": 0}
{"id": "folio_validation_337", "prediction": "all x.(Barutin(x) -> (Island(x) & InAntarctica(x)))", "score": 0}
{"id": "folio_validation_337", "prediction": "all x.(Barutin(x) -> exists y.(Island(y) & InAntarctica(x))))", "score": -1}
{"id": "folio_validation_337", "prediction": "all x.(Barutin(x) -> The Island(x))", "score": -1}
{"id": "folio_validation_337", "prediction": "(all x.(Barutin(x) -> FoundedAgain(x,Antarctica)))", "score": 0}
{"id": "folio_validation_337", "prediction": "all x.(Barutin(x) -> IslandName(x))", "score": 0}
{"id": "folio_validation_337", "prediction": "all x.(Barutin(x) -> NamedAfterIslands(x))", "score": 0}
{"id": "folio_validation_337", "prediction": "all x.(Barutin(x) -> NamedAfterIslandsInAntarctica(x))", "score": 0}
{"id": "folio_validation_338", "prediction": "all x y.((Cave(x) & Antarctica(y)) -> NamedAfterCake(x,y))", "score": 0}
{"id": "folio_validation_338", "prediction": "exists x.(Cove(x) & InAntarctica(x,y) & NominatedAfterPlace(y,Bulgaria))", "score": 0}
{"id": "folio_validation_338", "prediction": "exists x.(Cove(x) & LocatedIn(x,Antarctic) & NamedAfterPlaceIn(x,Bulgaria))", "score": 0}
{"id": "folio_validation_338", "prediction": "exists x.(Cove(x) & InAntarctica(x))", "score": 0}
{"id": "folio_validation_338", "prediction": "exists x.(Cove(x) & InAntarctica(x) & NamedAfterPlaceInBulgaria(x))", "score": 0}
{"id": "folio_validation_338", "prediction": "exists x.(Cove(x) & Antarctica(x) & NamedAfter(x,bulbul))", "score": 0}
{"id": "folio_validation_338", "prediction": "exists x.(CoveInAntarctica(x) & NamedAfterPlace(x))", "score": 0}
{"id": "folio_validation_338", "prediction": "exists x.(CoveInAntarctica(x) & namedAfterPlace(x))", "score": 0}
{"id": "folio_validation_338", "prediction": "exists x y.(Cove(x) & Antarctica(y) & NamedAfter(x,y))", "score": 0}
{"id": "folio_validation_338", "prediction": "exists x.(Colve(x) & InAntarctica(x) & InBulgaria(x))", "score": 0}
{"id": "folio_validation_338", "prediction": "exists x.(Cove(x) & InAntarctica(x) & NamedAfterPlace(x,Bulgaria))", "score": 0}
{"id": "folio_validation_338", "prediction": "exists x.(Cove(x) & InAntarctica(x) & FollowingPlace(x))", "score": 0}
{"id": "folio_validation_338", "prediction": "there exists x.(Cove(x) & InAntarctica(x) & NamedAfterPlaceInBulgaria(x))", "score": -1}
{"id": "folio_validation_338", "prediction": "exists x.(Cove(x) & InAntarctica(x) & NamedAfterPeriodInBulgaria(x))", "score": 0}
{"id": "folio_validation_338", "prediction": "exists x.(AntarcticCove(x) & namedAfterPlace(x,bulgaria))", "score": 0}
{"id": "folio_validation_338", "prediction": "exists x.(Cole(x) & InAntarctica(x) & NamedAfterPlaceInBulgarian(x))", "score": 0}
{"id": "folio_validation_339", "prediction": "-(Berutin(Barutin) & LocatedInAntarctica(Barutin,Antarctica))", "score": 0}
{"id": "folio_validation_339", "prediction": "(-BerutinLocatedInAntarctica(Barutin))", "score": 0}
{"id": "folio_validation_339", "prediction": "Lent in Antarctica -Burutin(b)", "score": -1}
{"id": "folio_validation_339", "prediction": "is not locatedIn(Barutin)", "score": -1}
{"id": "folio_validation_339", "prediction": "-LiquidatingInAntarctica(Barutin)", "score": 0}
{"id": "folio_validation_339", "prediction": "Barutin -BelongsToAntarctica(Barutin)", "score": -1}
{"id": "folio_validation_339", "prediction": "Barutin is not located in Antarctica.", "score": -1}
{"id": "folio_validation_339", "prediction": "-LocatedInAntarctica(Barutin)", "score": 0}
{"id": "folio_validation_339", "prediction": "Barutin is not locatedInAntarctica(Barutin)", "score": -1}
{"id": "folio_validation_339", "prediction": "all x.(Barutin(x) -> -LocatedInAntarctica(x))", "score": 0}
{"id": "folio_validation_339", "prediction": "all x.(Barutin(x) -> -LimitsInAntarctica(x))", "score": 0}
{"id": "folio_validation_339", "prediction": "(-ResidenceInAntarctica(Barutin))", "score": 0}
{"id": "folio_validation_339", "prediction": "Barutin -LippedInAntarctica(Barutin)", "score": -1}
{"id": "folio_validation_339", "prediction": "(-LocatedInAntarctica(Barratin))", "score": 0}
{"id": "folio_validation_339", "prediction": "(-exists x.(Barutin(x) & LocatedInAntarctica(x)))", "score": 0}
{"id": "folio_validation_340", "prediction": "exists x.(Affection(x) & Love(x))", "score": 0}
{"id": "folio_validation_340", "prediction": "exists x.(Affliction(x) & Love(x))", "score": 0}
{"id": "folio_validation_340", "prediction": "exists x.(Affection(x) & Liebe(x))", "score": 0}
{"id": "folio_validation_341", "prediction": "exists x.(Love(x) & Positive(x))", "score": 0}
{"id": "folio_validation_341", "prediction": "exists x.(Lite(x) & Positive(x))", "score": 0}
{"id": "folio_validation_341", "prediction": "exists x.(Living(x) & Positive(x))", "score": 0}
{"id": "folio_validation_342", "prediction": "exists x.(Affection(x) & Positive(x))", "score": 0}
{"id": "folio_validation_343", "prediction": "all x.((TransportsMultiplePassengers(x) & -Empty(x)) -> -TransportsMultiplePassengers(x))", "score": 0}
{"id": "folio_validation_343", "prediction": "all x.(TransportMultiplePassengers(x) -> -Empty(x))", "score": 0}
{"id": "folio_validation_343", "prediction": "all x.(TransportsMultiplePassengers(x) -> -Empty(x))", "score": 0}
{"id": "folio_validation_343", "prediction": "all x.((SealableConsumer(x) & TransportsMultiplePassengers(x)) -> -Empty(x))", "score": 0}
{"id": "folio_validation_343", "prediction": "all x.(MobilityTransportation(x) -> -Empty(x))", "score": 0}
{"id": "folio_validation_343", "prediction": "all x.((TransportsMultiplePassengers(x)) -> -Empty(x))", "score": 0}
{"id": "folio_validation_343", "prediction": "all x.((PropelMultiplePassengers(x) & -Empty(x)) -> CanTransportMultiplePassengers(x))", "score": 0}
{"id": "folio_validation_343", "prediction": "all x.((Caveable(x) & MultiplePassengers(x)) -> -Empty(x))", "score": 0}
{"id": "folio_validation_343", "prediction": "all x.((TransportsMultiplePassengers(x)) -> -Impermal(x))", "score": 0}
{"id": "folio_validation_343", "prediction": "all x.((WorksOnTransportMultiplePassengers(x)) -> -Empty(x))", "score": 0}
{"id": "folio_validation_343", "prediction": "all x.((CanTransportMultiplePassengers(x)) -> -Empty(x))", "score": 0}
{"id": "folio_validation_344", "prediction": "all x.(Airline(x) -> TransportMultiplePassengers(x))", "score": 0}
{"id": "folio_validation_344", "prediction": "all x.(Airline(x) -> TransportsMultiplePassengers(x))", "score": 0}
{"id": "folio_validation_344", "prediction": "all x.(Airline(x) -> CanTransportMultiplePassengers(x))", "score": 0}
{"id": "folio_validation_344", "prediction": "all x.(Airline(x) -> CanTransportMorePassengers(x))", "score": 0}
{"id": "folio_validation_344", "prediction": "all x.(Airline(x) -> TransportTransportPerson(x))", "score": 0}
{"id": "folio_validation_345", "prediction": "all x.(Plane(x) -> Empty(x))", "score": 0}
{"id": "folio_validation_345", "prediction": "all x y.((Plane(x) & Jet(y)) -> Empty(x,y))", "score": 0}
{"id": "folio_validation_346", "prediction": "all x.(Boeing707(x) -> Plane(x))", "score": 0}
{"id": "folio_validation_346", "prediction": "all x.(Boeing(x) -> Aircraft(x))", "score": 0}
{"id": "folio_validation_346", "prediction": "all x.(Boeing(x) -> Plane(x))", "score": 0}
{"id": "folio_validation_346", "prediction": "all x.(BoeingBoaton707(x) -> Plane(x))", "score": 0}
{"id": "folio_validation_346", "prediction": "all x.(BoeingJ07(x) -> Plane(x))", "score": 0}
{"id": "folio_validation_346", "prediction": "ALL TEAMSOILS(Boeing 707) -> Plane(Terrain))", "score": -1}
{"id": "folio_validation_346", "prediction": "all x.(BoeingBoarding(x) -> Airplane(x))", "score": 0}
{"id": "folio_validation_346", "prediction": "all x.(Boeing707.(x) -> Plane(x))", "score": -1}
{"id": "folio_validation_346", "prediction": "all x.(Boeing(x) -> Airplane(x))", "score": 0}
{"id": "folio_validation_347", "prediction": "All x.((Greyhound(x) & -Airline(x)) -> -GreyhoundPlanes(x))", "score": -1}
{"id": "folio_validation_347", "prediction": "all x.((Greyhound(x) & -Airline(x)) -> -GreyhoundPlane(x))", "score": 0}
{"id": "folio_validation_347", "prediction": "-Airline(Grayhound)", "score": 0}
{"id": "folio_validation_347", "prediction": "all x.((Fragrance(x) & -Airline(x)) -> -GreyhoundPlanes(x))", "score": 0}
{"id": "folio_validation_347", "prediction": "all x.((Greyhound(x) & -Airline(x)) -> -GreyhoundPlanes(x))", "score": 0}
{"id": "folio_validation_347", "prediction": "all x.(IsGreyhoundAirline(x) -> -GreyhoundPlane(x))", "score": 0}
{"id": "folio_validation_347", "prediction": "all x.(( Greyhound(x) & -Airline(x)) -> -GreyhoundPlane(x))", "score": 0}
{"id": "folio_validation_347", "prediction": "all x y.((Greyhound(x) & -Airline(x)) -> -GreyhoundPlane(y))", "score": 0}
{"id": "folio_validation_348", "prediction": "Greyhound exists x.(Airline(x) & Flying(x))", "score": -1}
{"id": "folio_validation_348", "prediction": "(Airline(Grayhound) & OperatingIn(Grayhound))", "score": 0}
{"id": "folio_validation_348", "prediction": "all x.(Greyhound(x) -> Airlines(x))", "score": 0}
{"id": "folio_validation_348", "prediction": "all x.(BlueHunt(x) -> Airline(x))", "score": 0}
{"id": "folio_validation_348", "prediction": "(Airline(Greyhound)", "score": -1}
{"id": "folio_validation_348", "prediction": "(Airline( Greyhound)", "score": -1}
{"id": "folio_validation_348", "prediction": "(Airline(Grayhound) & Airline(Grayhound))", "score": 0}
{"id": "folio_validation_348", "prediction": "(Airline(Greyhound) & -Airline(Grayhound))", "score": 0}
{"id": "folio_validation_348", "prediction": "all x.(Greyhound(x) -> Airline(x))", "score": 0}
{"id": "folio_validation_348", "prediction": "(Airline(Greyhound) & Flying(Greyhound))", "score": 0}
{"id": "folio_validation_348", "prediction": "exists x.(Greyhound(x) & Airline(x))", "score": 0}
{"id": "folio_validation_348", "prediction": "all x.(Grizzlyhound(x) -> Airline(x))", "score": 0}
{"id": "folio_validation_348", "prediction": "(LimitedAirline(Greyhound)", "score": -1}
{"id": "folio_validation_348", "prediction": "-Airline(greyhound)", "score": 0}
{"id": "folio_validation_349", "prediction": "all x.(Greyhound(x) -> Boeing707(x))", "score": 0}
{"id": "folio_validation_349", "prediction": "all x.(Greyhound(x) -> Boeing707.", "score": -1}
{"id": "folio_validation_349", "prediction": "all x.((Grayhound(x) & Boeing707(x)) -> Boeing707.", "score": -1}
{"id": "folio_validation_349", "prediction": "all x.(Greyhound(x) -> (Boeing707) | Boeing707.V-07)))", "score": -1}
{"id": "folio_validation_349", "prediction": "all x.(Grayhound(x) -> Boeing707(x))", "score": 0}
{"id": "folio_validation_350", "prediction": "all x.(Greyhound(x) -> -Boeing 707(x))", "score": -1}
{"id": "folio_validation_350", "prediction": "all x.(Greyhound(x) -> (-Boeing(x) & Boeing707(x)))", "score": 0}
{"id": "folio_validation_350", "prediction": "all x.(Greyhound(x) -> -Boeing737(x))", "score": 0}
{"id": "folio_validation_350", "prediction": "all x.( Greyhound(x) -> (-Birthday(x) & 707(x)))", "score": 0}
{"id": "folio_validation_350", "prediction": "all x.(Greyhound(x) -> -Boeing-707(x))", "score": -1}
{"id": "folio_validation_350", "prediction": "all x.(Greyhound(x) -> -Boeing(x) & Boeing(x) & -Boeing(x)))", "score": -1}
{"id": "folio_validation_350", "prediction": "all x.(Greyhound(x) -> -Boeing 707 (BlackBucket)))", "score": -1}
{"id": "folio_validation_350", "prediction": "all x.(Greyhound(x) -> -Berkeley707(x))", "score": 0}
{"id": "folio_validation_350", "prediction": "all x.(Rynhound(x) -> -BoeingBoardmaster757(x))", "score": 0}
{"id": "folio_validation_350", "prediction": "all x.(Greyhound(x) -> -Boeing707.(x)))", "score": -1}
{"id": "folio_validation_350", "prediction": "all x.(Greyhound(x) -> -Boeing707.07(x))", "score": -1}
{"id": "folio_validation_350", "prediction": "all x.(Greyhound(x) -> -Boeing777(x))", "score": 0}
{"id": "folio_validation_350", "prediction": "all x.((Greyhound(x) & -Boeing707(x)) -> -Boeing1707(x))", "score": 0}
{"id": "folio_validation_350", "prediction": "all x y.((Greyhound(x) & Boeing707(y)) -> -Boeing(x,y))", "score": 0}
{"id": "folio_validation_350", "prediction": "all x.(Greyhound(x) -> -Boeing707(x))", "score": 0}
{"id": "folio_validation_351", "prediction": "all x.(Mammal(x) -> Animal(x))", "score": 0}
{"id": "folio_validation_352", "prediction": "all x.(Monkey(x) -> Mammal(x))", "score": 0}
{"id": "folio_validation_352", "prediction": "all x.(Mammal(x) -> Monkey(x))", "score": 0}
{"id": "folio_validation_352", "prediction": "(Mammal(Mammal) & -Mammal(Mammal))", "score": 5}
{"id": "folio_validation_352", "prediction": "all x.(Pony(x) -> Mammal(x))", "score": 0}
{"id": "folio_validation_353", "prediction": "all x.(Animal(x) -> (Mammal(x) | Bird(x)))", "score": 0}
{"id": "folio_validation_353", "prediction": "all x.(Animal(x) -> (Monkey(x) | Bird(x)))", "score": 0}
{"id": "folio_validation_353", "prediction": "exists x.(Animal(x) & (Monkey(x) | Bird(x)))", "score": 0}
{"id": "folio_validation_353", "prediction": "all x.(Animal(x) -> ((Monkey(x) | Bird(x))))", "score": 0}
{"id": "folio_validation_354", "prediction": "all x.(Bird(x) -> Flies(x))", "score": 0}
{"id": "folio_validation_354", "prediction": "all x.(Bird(x) -> Fly(x))", "score": 0}
{"id": "folio_validation_354", "prediction": "all x.(Bird(x) -> Floats(x))", "score": 0}
{"id": "folio_validation_354", "prediction": "is a fluttery.", "score": -1}
{"id": "folio_validation_355", "prediction": "all x.(Animal(x) -> Breathes(x))", "score": 0}
{"id": "folio_validation_355", "prediction": "all x.(Animal(x) -> Breathe(x))", "score": 0}
{"id": "folio_validation_355", "prediction": "all x y.((Animal(x) & Breathes(x)) -> Breathes(y))", "score": 0}
{"id": "folio_validation_356", "prediction": "all x.(CanFly(x) -> HasWings(x))", "score": 0}
{"id": "folio_validation_356", "prediction": "all x.((CanFly(x) & HasWings(x)) -> CanFly(x))", "score": 0}
{"id": "folio_validation_356", "prediction": "all x.((CableToFly(x) & HasWings(x)) -> CanFly(x))", "score": 0}
{"id": "folio_validation_356", "prediction": "all x.(Limits(x) -> HasWings(x))", "score": 0}
{"id": "folio_validation_357", "prediction": "all x.((Rock(x) & -Fly(x) & -Bird(x)) -> (-Flies(x) & -Breathes(x)))", "score": 0}
{"id": "folio_validation_357", "prediction": "exists x.(Rock(x) & -Fly(x) & -Bird(x))", "score": 0}
{"id": "folio_validation_357", "prediction": "all x.((Rock(x) & -Fly(x) & -Bird(x)) -> -Flies(x) & -Breathes(x))", "score": 0}
{"id": "folio_validation_357", "prediction": "all x.((Rock(x) & -Fly(x) & -Bird(x)) -> (-Flies(x) | Breathes(x)))", "score": 0}
{"id": "folio_validation_357", "prediction": "all x.((Rock(x) & -Fly(x) | Bird(x)) -> ((Rock(x) & -Flies(x) & -Breathes(x))))", "score": 0}
{"id": "folio_validation_357", "prediction": "all x.((Rock(x) & -Fly(x) | Bird(x)) -> (-Flies(x) & -Breathes(x)))", "score": 0}
{"id": "folio_validation_357", "prediction": "all x.((Rock(x) & -Fly(x) & -Bird(x)) -> (NoFlies(x) | NoBreathes(x)))", "score": 0}
{"id": "folio_validation_358", "prediction": "Rock is monkey.", "score": -1}
{"id": "folio_validation_358", "prediction": "is monkey(Rock)", "score": -1}
{"id": "folio_validation_358", "prediction": "'Rock' is monkey.", "score": -1}
{"id": "folio_validation_358", "prediction": "(Mungo(Rock))", "score": 0}
{"id": "folio_validation_358", "prediction": "all x.(Rock(x) -> Monkey(x))", "score": 0}
{"id": "folio_validation_358", "prediction": "(Pygmy(Rock))", "score": 0}
{"id": "folio_validation_358", "prediction": "-Mutin(Rock)", "score": 0}
{"id": "folio_validation_358", "prediction": "Rock is monkey(Rock)", "score": -1}
{"id": "folio_validation_358", "prediction": "All x.(Rock(x) -> Monkey(x))", "score": -1}
{"id": "folio_validation_359", "prediction": "(exists x.(Rock(x) & HasWings(x)))", "score": 1}
{"id": "folio_validation_359", "prediction": "-HasWings(Rock)", "score": 1}
{"id": "folio_validation_359", "prediction": "(HasWings(Rock))", "score": 1}
{"id": "folio_validation_359", "prediction": "Rock hasWings.", "score": -1}
{"id": "folio_validation_359", "prediction": "Rock exists x.(Rock(x) & HasWings(x))", "score": -1}
{"id": "folio_validation_359", "prediction": "all x.(Rock(x) -> HasWings(x))", "score": 1}
{"id": "folio_validation_359", "prediction": "Rock has Wings.", "score": -1}
{"id": "folio_validation_359", "prediction": "Rock hasWings(Rock)", "score": -1}
{"id": "folio_validation_359", "prediction": "\"Rock\" hatsWings(Rock)", "score": -1}
{"id": "folio_validation_359", "prediction": "All x.(Rock(x) -> HasWings(x))", "score": -1}
{"id": "folio_validation_359", "prediction": "exists x.(Rock(x) & HasWings(x))", "score": 1}
{"id": "folio_validation_359", "prediction": "& RockHasWings(rock)", "score": -1}
{"id": "folio_validation_360", "prediction": "all x.(Rock(x) -> -HasWings(x))", "score": 0}
{"id": "folio_validation_360", "prediction": "hasWings(Rock)", "score": 0}
{"id": "folio_validation_360", "prediction": "exists x.(Rock(x) & -HasWings(x))", "score": 0}
{"id": "folio_validation_360", "prediction": "Rock does not haveWings.", "score": -1}
{"id": "folio_validation_360", "prediction": "Rock DoesNotHaveWings(rock)", "score": -1}
{"id": "folio_validation_360", "prediction": "(-HasWings(Rock))", "score": 0}
{"id": "folio_validation_360", "prediction": "All x.(Rock(x) -> -HasWings(x))", "score": -1}
{"id": "folio_validation_360", "prediction": "-HasWings(Rock)", "score": 0}
{"id": "folio_validation_360", "prediction": "and Rock does not haveWings(x)", "score": -1}
{"id": "folio_validation_360", "prediction": "Rock & -HasWings(Rock)", "score": 0}
{"id": "folio_validation_360", "prediction": "and has no Wings(Rock)", "score": -1}
{"id": "folio_validation_360", "prediction": "Rock -HasWings(Rock)", "score": -1}
{"id": "folio_validation_361", "prediction": "all x.((Person(x) & Wedding(x)) -> HasChild(x))", "score": 0}
{"id": "folio_validation_361", "prediction": "all x.((Person(x) & HasWedding(x)) -> (HasChild(x) | HasChild(x)))", "score": 0}
{"id": "folio_validation_361", "prediction": "all x.((Person(x) & Wedding(x)) -> (HasAtLeastOneChild(x)))", "score": 0}
{"id": "folio_validation_361", "prediction": "all x.((People(x) & HasWedding(x)) -> HasCinder(x))", "score": 0}
{"id": "folio_validation_361", "prediction": "all x.((Person(x) & HasWedding(x)) -> exists y.(Child(y) & HasChild(x,y))))", "score": -1}
{"id": "folio_validation_361", "prediction": "all x.((Person(x) & HasWedding(x)) -> HasAtLeastOneChild(x))", "score": 0}
{"id": "folio_validation_361", "prediction": "all x.(CanWedding(x) -> HasAtLeastOneChild(x))", "score": 0}
{"id": "folio_validation_361", "prediction": "all x.((Person(x) & HasWedding(x)) -> exists y.(Child(y) & HasChild(x,y)))", "score": 0}
{"id": "folio_validation_361", "prediction": "all x.(Celebration(x) -> -Child(x))", "score": 0}
{"id": "folio_validation_361", "prediction": "all x.((Person(x) & HasWedding(x)) -> HasChild(x))", "score": 0}
{"id": "folio_validation_362", "prediction": "all x.(ReisesToParisForHoneymoon(x) -> HaveWedding(x))", "score": 0}
{"id": "folio_validation_362", "prediction": "all x.((Person(x) & TravelsToParis(x) & HoneymoonSonder(x)) -> HasWedding(x))", "score": 0}
{"id": "folio_validation_362", "prediction": "all x.((Person(x) & TravelsToParis(x)) -> HasWedding(x))", "score": 0}
{"id": "folio_validation_362", "prediction": "all x.(TravelsToParisForHoliday(x) -> HasWedding(x))", "score": 0}
{"id": "folio_validation_362", "prediction": "all x y.((Person(x) & TravelsToParis(x) & Honeymoon(y)) -> HasWedding(x,y))", "score": 0}
{"id": "folio_validation_362", "prediction": "all x.((Person(x) & TravelsToParisForHoneymoon(x)) -> HasWedding(x))", "score": 0}
{"id": "folio_validation_362", "prediction": "all x.(TravelsToParis(x) -> Wedding(x))", "score": 0}
{"id": "folio_validation_362", "prediction": "all x.((Person(x) & TravelsToParis(x) & Honeymoon(x)) -> HasWedding(x))", "score": 0}
{"id": "folio_validation_362", "prediction": "all x.((Tourist(x) & TravelsToParis(x)) -> HasWedding(x))", "score": 0}
{"id": "folio_validation_363", "prediction": "all x.((Wedding(x) & OccursInJuly(x)) -> exists y.(PeopleTravelToParis(y) & Onyx(z) & TravelsToParis(w))))", "score": -1}
{"id": "folio_validation_363", "prediction": "all x.((Wedding(x) & OccursInJuly(x)) -> BelongsToParis(x))", "score": 0}
{"id": "folio_validation_363", "prediction": "all x.((Wedding(x) & OccursInJuly(x)) -> TravelToParisForHoneymoon(x))", "score": 0}
{"id": "folio_validation_363", "prediction": "all x.((Wedding(x) & OccursInJuly(x)) -> TravelToPasaisForHoliday(x))", "score": 0}
{"id": "folio_validation_363", "prediction": "all x y.((Wedding(x) & OccursInJuly(x,y)) -> TravelsToParisForHombirthday(y))", "score": 0}
{"id": "folio_validation_363", "prediction": "all x.((Wedding(x) & MayOccur(x)) -> BelongsToThePage(x))", "score": 0}
{"id": "folio_validation_363", "prediction": "all x.((Wedding(x) & OccursInJuly(x)) -> exists y.(Person(y) & TravelsToParis(y)))", "score": 0}
{"id": "folio_validation_363", "prediction": "all x.((Wedding(x) & OccursInJuly(x)) -> BelongsToPeople(x) & TravelsToParis(x))", "score": 0}
{"id": "folio_validation_363", "prediction": "all x.((Wedding(x) & OccursIn(x,July)) -> TravelsToParisForHoneymoon(x))", "score": 0}
{"id": "folio_validation_363", "prediction": "all x.((Wedding(x) & OccursInJuly(x)) -> (TravelToParis(x) & Honeymoon(x)))", "score": 0}
{"id": "folio_validation_363", "prediction": "all x y.((Wedding(x) & OccursInJuly(x,y) & Person(y) & TravelsToParisForHoneymoon(y)) -> KnownOrLike(y,x))", "score": 0}
{"id": "folio_validation_363", "prediction": "all x.((Wedding(x) & OccursInJuly(x)) -> TravelsToParis(x))", "score": 0}
{"id": "folio_validation_363", "prediction": "all x.((Wedding(x) & OccursInJuly(x)) -> TravelRelatedToParis(x))", "score": 0}
{"id": "folio_validation_363", "prediction": "all x.((Wedding(x) & OccursInJuly(x)) -> belongsToPastForHolyweekend(x))", "score": 0}
{"id": "folio_validation_363", "prediction": "all x.((Wedding(x) & OccursInJuly(x)) -> TravelsToParisForHopnoon(x))", "score": 0}
{"id": "folio_validation_364", "prediction": "exists x.(Wedding(x) & InJuly(x) & WellAttended(x))", "score": 0}
{"id": "folio_validation_364", "prediction": "exists x.(Wedding(x) & InJune(x) & WellAttended(x))", "score": 0}
{"id": "folio_validation_364", "prediction": "exists x.(JulyWedding(x) & WellAttended(x))", "score": 0}
{"id": "folio_validation_364", "prediction": "exists x.(July(x) & Wedding(x) & WellAttended(x))", "score": 0}
{"id": "folio_validation_364", "prediction": "exists x.(Wedding(x,July) & WellAttended(x,April))", "score": 0}
{"id": "folio_validation_365", "prediction": "(AtLeastOneChild(John) -> (-TravelToParisForHoneymoon(John) & -Wedding(John)))", "score": 0}
{"id": "folio_validation_365", "prediction": "all x.((John(x) & HasAtLeastOneChild(x)) -> (-TravelToParis(x) & -Wedding(x)))", "score": 0}
{"id": "folio_validation_365", "prediction": "all x.((John(x) & HasChild(x)) -> (-TravelsToParis(x) & -HasWedding(x)))", "score": 0}
{"id": "folio_validation_365", "prediction": "all x.((John(x) & HasChild(x)) -> (-TravelToParis(x) & -HasWedding(x)))", "score": 0}
{"id": "folio_validation_365", "prediction": "all x.((John(x) & Child(x)) -> (-TravelsToParis(x) & -Wedding(x)))", "score": 0}
{"id": "folio_validation_365", "prediction": "all x y.((John(x) & Child(x)) -> (-MomdayToParis(x) & -Wedding(y)))", "score": 0}
{"id": "folio_validation_365", "prediction": "(HasAtLeastOneChild(John) -> (-TravelsToParis(John) & -HasWedding(John)))", "score": 0}
{"id": "folio_validation_365", "prediction": "all x.((HasAtLeastOneChild(x) & John(x)) -> (-TravelsToParisForHoneymoon(x) & -HasWedding(x)))", "score": 0}
{"id": "folio_validation_365", "prediction": "all x.(HasAtLeastOneChild(x) -> (-TravelsToParisForHoneymoon(x) & -HasWedding(x)))", "score": 0}
{"id": "folio_validation_365", "prediction": "all x.((HasHasChild(x) & TravelsToParis(x)) -> -(HasWedding(x) & -HasWedding(x))))", "score": -1}
{"id": "folio_validation_365", "prediction": "(HasAtLeastOneChild(John) & NoToParis(John) & NoWedding(John))", "score": 0}
{"id": "folio_validation_365", "prediction": "all x.((Has(x,1) & Child(x)) -> (-TravelsToParis(x) & -HasWedding(x)))", "score": 0}
{"id": "folio_validation_365", "prediction": "all x.((John(x) & HasChild(x)) -> (-TravelToParis(x) & -Wedding(x)))", "score": 0}
{"id": "folio_validation_365", "prediction": "all x.((John(x) & HasAtLeastOneChild(x)) -> (-TravelToParisForHoneymoon(x) & -HasWedding(x)))", "score": 0}
{"id": "folio_validation_365", "prediction": "all x.((HasChild(x) & HasChild(x)) -> (-TravelsToParis(x) & -Wedding(x)))", "score": 0}
{"id": "folio_validation_366", "prediction": "all x.((John(x) & WellAttendedToed(x)) -> (HasWeddingInJuly(x) | (TravelsToParisForHoneymoons(x) & -HasWeddingInJuly(x)))))", "score": -1}
{"id": "folio_validation_366", "prediction": "(all x.((MrJohn(x) & WellAttended(x)) -> HasWedding(x,July)) | ((MrJohn(x) & -HasWedding(x,July))) -> TravelsToParisForHenny(x)))", "score": -1}
{"id": "folio_validation_366", "prediction": "(all x.(((John,James) & WellAttended(James,July)) -> (Wedding(James) | (John,James) & Paris(j)))))", "score": -1}
{"id": "folio_validation_366", "prediction": "all x.((John(x) & WellAttendedWedding(x)) -> (WeddingInJuly(x) | TravelsToParis(x)))", "score": 0}
{"id": "folio_validation_366", "prediction": "all x y.((John(x) & Wedding(y) & WellAttended(y)) -> (WeddingInJuly(x,y) | (WeddingInJuly(x,y) & (Newborn(x,y) | Newborn(y)))))", "score": 0}
{"id": "folio_validation_366", "prediction": "all x.((John(x) & WellAttendedWedding(x)) -> (WeddingInJuly(x) | (WeddingInJuly(x) & -Wedding(x)))))", "score": -1}
{"id": "folio_validation_366", "prediction": "all x.((John(x) & WellAttendedWedding(x)) -> (WeddingInJuly(x) | -WeddingInParis(x)))", "score": 0}
{"id": "folio_validation_366", "prediction": "all x.((John(x) & WellAttendedWedding(x)) -> (WeddingInJuly(x) | (WeddingToParis(x) | WeddingToParis(x))))", "score": 0}
{"id": "folio_validation_366", "prediction": "all x y.((John(x) & Wedding(y) & WellAttended(y)) -> (JulyWedding(x,y) | (-JulyWedding(x,y) & ParisWedding(x,y))))", "score": 0}
{"id": "folio_validation_366", "prediction": "all x y.((John(x) & Wedding(y) & WellAttended(y)) -> (WeddingInJuly(x,y) | (Meets(x,y) & WellAttended(x,y)))))", "score": -1}
{"id": "folio_validation_366", "prediction": "all x.((John(x) & WellAttendedWedding(x)) -> (WeddingInJuly(x) | WeddingInParis(x)))", "score": 0}
{"id": "folio_validation_366", "prediction": "all x y.(((John(x) & Wedding(y) & WellAttended(y)) -> (WeddingInJuly(x,y) | (TravelsToParis(x) & Honeymoon(y)))))", "score": 0}
{"id": "folio_validation_366", "prediction": "all x.((Wedding(x) & WellAttended(x)) -> (TourismAtJuly(x) | (TourismAtJuly(x) & TravelsToParis(x)))))", "score": -1}
{"id": "folio_validation_366", "prediction": "all x.((Jon(x) & WellAttendedWedding(x)) -> (WeddingInJuly(x) | (TravelsToParis(x) & WeddingInJuly(x))))", "score": 0}
{"id": "folio_validation_367", "prediction": "all x.((John(x) & WellAttendedWedding(x)) -> Has(x,y))", "score": 0}
{"id": "folio_validation_367", "prediction": "all x.((John(x) & Wedding(x)) -> WellAttended(x))", "score": 0}
{"id": "folio_validation_367", "prediction": "all x.((Wedding(x) & WellAttended(x)) -> John(x))", "score": 0}
{"id": "folio_validation_367", "prediction": "all x.((John(x) & WellAttended(x)) -> Wedding(x))", "score": 0}
{"id": "folio_validation_367", "prediction": "(BoyOrganism(John) & WellAttended(John))", "score": 0}
{"id": "folio_validation_367", "prediction": "all x.(John(x) -> WellAttended(x))", "score": 0}
{"id": "folio_validation_367", "prediction": "all x.((John(x) & WellAttendedWedding(x)) -> HasWedding(x))", "score": 0}
{"id": "folio_validation_367", "prediction": "all x.((John(x) & WellAttendedWedding(x)) -> HasYoung(x))", "score": 0}
{"id": "folio_validation_367", "prediction": "all x.((John(x) & WellAttendedWedding(x)) -> WellAttendedWedding(x))", "score": 0}
{"id": "folio_validation_367", "prediction": "all x.((John(x) & WellAttendedWedding(x)) -> (Wedding(x) & Wedding(x)))", "score": 0}
{"id": "folio_validation_367", "prediction": "all x.((John(x) & Wedding(x) & WellAttended(x)) -> Has(x,y))", "score": 0}
{"id": "folio_validation_367", "prediction": "all x.((John(x) & WellAttendedWedding(x)) -> HasBeing(x))", "score": 0}
{"id": "folio_validation_367", "prediction": "all x.((John(x) & WellAttendedWedding(x)) -> WellAttended(x))", "score": 0}
{"id": "folio_validation_367", "prediction": "all x.(HasWedding(x) -> WellAttended(x))", "score": 0}
{"id": "folio_validation_368", "prediction": "all x.((John(x) & -WellAttended(x)) -> -IsWellAttended(x))", "score": 0}
{"id": "folio_validation_368", "prediction": "-Between(John,Wedding) & WellAttended(John,Wedding))", "score": -1}
{"id": "folio_validation_368", "prediction": "(-WellAttendedWedding(John))", "score": 0}
{"id": "folio_validation_368", "prediction": "all x.((John(x) & Wedding(x)) -> -WellAttended(x))", "score": 0}
{"id": "folio_validation_368", "prediction": "-(WellAttendedWedding(John,Jon))", "score": 0}
{"id": "folio_validation_368", "prediction": "-(WellAttendedWedding(John))", "score": 0}
{"id": "folio_validation_368", "prediction": "all x.(John(x) -> -HasWellAttendedWedding(x))", "score": 0}
{"id": "folio_validation_368", "prediction": "John & -wellAttendedWedding(John)", "score": 0}
{"id": "folio_validation_368", "prediction": "-WellAttendedWedding(John)", "score": 0}
{"id": "folio_validation_368", "prediction": "-(John(John) & WellAttendedWedding(John))", "score": 0}
{"id": "folio_validation_368", "prediction": "all x.((John(x) & -WellAttendedWedding(x)) -> -WellAttendedWedding(x))", "score": 1}
{"id": "folio_validation_368", "prediction": "exists x.(John(x) & -WellAttendedWedding(x))", "score": 0}
{"id": "folio_validation_368", "prediction": ", John(John) & -(WellAttendedWedding(John,John)))", "score": -1}
{"id": "folio_validation_368", "prediction": "John & -(WellAttendedWedding(John))", "score": 0}
{"id": "folio_validation_369", "prediction": "John is the only child.", "score": -1}
{"id": "folio_validation_369", "prediction": "all x.(John(x) -> HasChild(x))", "score": 0}
{"id": "folio_validation_369", "prediction": "(HasChild(John) -> AtLeastOneChild(John))).", "score": -1}
{"id": "folio_validation_369", "prediction": "all x.(John(x) -> exists y.(Child(y) & HasChild(x,y)))", "score": 0}
{"id": "folio_validation_369", "prediction": "all x.(John(x) -> exists y.(Child(y) & HasChild(x,y))))", "score": -1}
{"id": "folio_validation_369", "prediction": "John has at least one child.", "score": -1}
{"id": "folio_validation_369", "prediction": "(HasChild(John,John)", "score": -1}
{"id": "folio_validation_369", "prediction": "exists x.(John(x) & Child(y))", "score": 0}
{"id": "folio_validation_369", "prediction": "(Child(John) & OneChild(John))", "score": 0}
{"id": "folio_validation_369", "prediction": "(HasChild(John)", "score": -1}
{"id": "folio_validation_369", "prediction": "John has a child.", "score": -1}
{"id": "folio_validation_369", "prediction": "exists x.(John(x) & Child(x))", "score": 0}
{"id": "folio_validation_370", "prediction": "John has a married(John) & ((NegativeWedding(John) & WellAttended(John)) | (NegativeWedding(John) & TravelsToParis(John))))", "score": -1}
{"id": "folio_validation_370", "prediction": "(-(WellAttendedWedding(John) & -TravelsToParis(John)) | WellAttendedWedding(John))", "score": 1}
{"id": "folio_validation_370", "prediction": "(-(WellAttendedWedding(John) & -FleshedToParis(John)) | (-WellAttendedWedding(John) & FlushToParis(John))))", "score": -1}
{"id": "folio_validation_370", "prediction": "(NoWellAttendedWedding(John) & -(TravelsToParis(John)) -> Honeymoon(John)))", "score": -1}
{"id": "folio_validation_370", "prediction": "(-(WellAttendedWedding(John) & -ParisMomday(John)) | (-WellAttendedWedding(John) & WellAttendedWedding(John))))", "score": -1}
{"id": "folio_validation_370", "prediction": "(-(wellAttendedWedding(John) | TravelsToParis(John)))", "score": 0}
{"id": "folio_validation_370", "prediction": "-(WellAttendedWedding(John) | TravelsToParis(John))", "score": 0}
{"id": "folio_validation_370", "prediction": "(-(WellAttendedWedding(John) & -ToParis(John)) -> Honeymoon(John))", "score": 0}
{"id": "folio_validation_370", "prediction": "all x y.((John(x) & Wedding(y) & WellAttended(y)) -> -(TravelTo(x,y) & GoToParis(x,y)))", "score": 0}
{"id": "folio_validation_370", "prediction": "(-(WellAttendedWedding(John) & -PassesToParis(John)) -> New(John))", "score": 0}
{"id": "folio_validation_370", "prediction": "wedding(John) & -(WellAttendedWedding(John) & TravelsToParis(John)))", "score": -1}
{"id": "folio_validation_370", "prediction": "(-(Wedding(John) & WellAttended(John,John)) | (HondurasToParis(John,John))))", "score": -1}
{"id": "folio_validation_370", "prediction": "(-(WellAttendedWedding(John) & -WellMovement(John)) | (TravelToParis(John) & Moaning(John))))", "score": -1}
{"id": "folio_validation_370", "prediction": "(-wellAttendedWedding(John) & -TravelsToParisForHoliday(John))", "score": 0}
{"id": "folio_validation_370", "prediction": "all x.(John(x) & -(WellAttendedWedding(x) & TravelsToParis(x)))", "score": 0}
{"id": "folio_validation_371", "prediction": "exists x.(Mammal(x) & HasTeeth(x))", "score": 0}
{"id": "folio_validation_371", "prediction": "exists x y.(Mammal(x) & Mammal(y) & HasTeeth(x,y))", "score": 0}
{"id": "folio_validation_371", "prediction": "[BG] -> HasTeeth(movie,Mammal))", "score": -1}
{"id": "folio_validation_372", "prediction": "all x.(Plarkton(x) -> -HasTeeth(x))", "score": 0}
{"id": "folio_validation_372", "prediction": "all x.(Plactid(x) -> NoTeeth(x))", "score": 0}
{"id": "folio_validation_372", "prediction": "all x.(Platypus(x) -> -HasTeeth(x))", "score": 1}
{"id": "folio_validation_372", "prediction": "all x.(Plutospheric(x) -> -HasTeeth(x))", "score": 0}
{"id": "folio_validation_372", "prediction": "all x.(Pluto-tooth(x) -> -HasTeeth(x))", "score": -1}
{"id": "folio_validation_372", "prediction": "all x.(Plasticus(x) -> NoTeeth(x))", "score": 0}
{"id": "folio_validation_372", "prediction": "all x.(Plasticus(x) -> -HasTeeth(x))", "score": 0}
{"id": "folio_validation_372", "prediction": "all x.(Platypus(x) -> ThereAne(x,teeth))", "score": 0}
{"id": "folio_validation_372", "prediction": "all x.(Plastic(x) -> NoTeeth(x))", "score": 0}
{"id": "folio_validation_372", "prediction": "all x.(Plavix(x) -> NoTeeth(x))", "score": 0}
{"id": "folio_validation_372", "prediction": "all x.(Plutypus(x) -> -HasTeeth(x))", "score": 0}
{"id": "folio_validation_372", "prediction": "all x.(Palmatus(x) -> NoTeeth(x))", "score": 0}
{"id": "folio_validation_373", "prediction": "all x.(Platypus(x) -> Mammal(x))", "score": 1}
{"id": "folio_validation_373", "prediction": "all x.(Plavix(x) -> Mammal(x))", "score": 0}
{"id": "folio_validation_373", "prediction": "all x.(Lampylobacter(x) -> Mammal(x))", "score": 0}
{"id": "folio_validation_373", "prediction": "all x.(Plutypus(x) -> Mammal(x))", "score": 0}
{"id": "folio_validation_373", "prediction": "all x.(Plural(x) -> Mammal(x))", "score": 0}
{"id": "folio_validation_373", "prediction": "all x.(Plasticus(x) -> Mammal(x))", "score": 0}
{"id": "folio_validation_373", "prediction": "all x.(Plaza(x) -> Mammal(x))", "score": 0}
{"id": "folio_validation_373", "prediction": "all x.(Pluto(x) -> Mammal(x))", "score": 0}
{"id": "folio_validation_373", "prediction": "all x.(Plactus(x) -> Mammal(x))", "score": 0}
{"id": "folio_validation_373", "prediction": "all x.(Plavis(x) -> Mammal(x))", "score": 0}
{"id": "folio_validation_374", "prediction": "all x.(Human(x) -> HasTeeth(x))", "score": 0}
{"id": "folio_validation_375", "prediction": "all x.(Platypus(x) -> (Mammal(x) & -Teeth(x)))", "score": 0}
{"id": "folio_validation_375", "prediction": "all x.(Platypus(x) -> (Mammal(x) & -Threat(x)))", "score": 0}
{"id": "folio_validation_375", "prediction": "all x.(Plavius(x) -> (Mammal(x) & NoTeeth(x)))", "score": 0}
{"id": "folio_validation_375", "prediction": "all x.(Platypus(x) -> Mammal(x) & -HasTeeth(x))", "score": 1}
{"id": "folio_validation_375", "prediction": "all x.(Plavis(x) -> (Mammal(x) & -Teeth(x)))", "score": 0}
{"id": "folio_validation_375", "prediction": "all x.(Plastic(x) -> (Mammal(x) & -HasTeeth(x)))", "score": 0}
{"id": "folio_validation_375", "prediction": "all x.(Plutospheric(x) -> Mammal(x))", "score": 0}
{"id": "folio_validation_375", "prediction": "all x.(Plavis(x) -> (Mammal(x) & NoTeeth(x)))", "score": 0}
{"id": "folio_validation_375", "prediction": "all x.(Plastic(x) -> Mammal(x))", "score": 0}
{"id": "folio_validation_375", "prediction": "all x.(Laptophorus(x) -> (Mammal(x) & -Teeth(x)))", "score": 0}
{"id": "folio_validation_375", "prediction": "all x.(Platypus(x) -> (Mammal(x) & HasNoTeeth(x)))", "score": 0}
{"id": "folio_validation_375", "prediction": "all x.(Plactus(x) -> (Mammal(x) & HasNoTeeth(x)))", "score": 0}
{"id": "folio_validation_375", "prediction": "all x.(Plavix(x) -> (Mammal(x) & Mammal(x) & -HasTeeth(x)))", "score": 0}
{"id": "folio_validation_375", "prediction": "all x.(Plural(x) -> Mammal(x) & NoTeeth(x))", "score": 0}
{"id": "folio_validation_375", "prediction": "all x.(Plasticus(x) -> MammalWithNoTeeth(x))", "score": 0}
{"id": "folio_validation_376", "prediction": "all x.(Platypus(x) -> Reptile(x))", "score": 0}
{"id": "folio_validation_376", "prediction": "all x.(Pluto(x) -> Reptile(x))", "score": 0}
{"id": "folio_validation_376", "prediction": "all x.(Plasticus(x) -> Reptile(x))", "score": 0}
{"id": "folio_validation_376", "prediction": "all x.(Plarkton(x) -> Reptile(x))", "score": 0}
{"id": "folio_validation_376", "prediction": "all x.(Plactus(x) -> Reptile(x))", "score": 0}
{"id": "folio_validation_376", "prediction": "All x.(Platypus(x) -> Reptile(x))", "score": -1}
{"id": "folio_validation_376", "prediction": "all x.(Plutospheric(x) -> Reptile(x))", "score": 0}
{"id": "folio_validation_377", "prediction": "all x.(Plunger(x) -> Sag(x))", "score": 0}
{"id": "folio_validation_377", "prediction": "all x.(Plunger(x) -> Suck(x))", "score": 0}
{"id": "folio_validation_377", "prediction": "all x.(Plunger(x) -> Sucker(x))", "score": 0}
{"id": "folio_validation_377", "prediction": "all x.(Plunger(x) -> Swuck(x))", "score": 0}
{"id": "folio_validation_377", "prediction": "all x.(Plunger(x) -> Stucks(x))", "score": 0}
{"id": "folio_validation_377", "prediction": "all x.(Plunger(x) -> Saute(x))", "score": 0}
{"id": "folio_validation_377", "prediction": "all x.(Plunger(x) -> Sucks(x))", "score": 0}
{"id": "folio_validation_377", "prediction": "all x.(Plunger(x) -> Sautes(x))", "score": 0}
{"id": "folio_validation_377", "prediction": "all x.(Plunger(x) -> Stuck(x))", "score": 0}
{"id": "folio_validation_378", "prediction": "all x.(Vacuum(x) -> Saute(x))", "score": 0}
{"id": "folio_validation_378", "prediction": "all x.(Vacuum(x) -> Spuck(x))", "score": 0}
{"id": "folio_validation_378", "prediction": "all x.(Vacuum(x) -> Saunt(x))", "score": 0}
{"id": "folio_validation_378", "prediction": "all x.(Vacuum(x) -> Sautes(x))", "score": 1}
{"id": "folio_validation_378", "prediction": "all x.(Vacuum(x) -> Suck(x))", "score": 0}
{"id": "folio_validation_378", "prediction": "all x.(Vakuum(x) -> Suck(x))", "score": 0}
{"id": "folio_validation_378", "prediction": "all x.(Vacuum(x) -> Sags(x))", "score": 0}
{"id": "folio_validation_378", "prediction": "all x.(Vacuum(x) -> Suckle(x))", "score": 1}
{"id": "folio_validation_378", "prediction": "all x.(Vacuum(x) -> Stucks(x))", "score": 1}
{"id": "folio_validation_378", "prediction": "all x.(Vacuum(x) -> Souch(x))", "score": 0}
{"id": "folio_validation_379", "prediction": "all x.(Vampire(x) -> Stuck(x))", "score": 0}
{"id": "folio_validation_379", "prediction": "all x.(Vampire(x) -> Suck(x))", "score": 0}
{"id": "folio_validation_379", "prediction": "all x.(Vampire(x) -> Sakes(x))", "score": 0}
{"id": "folio_validation_379", "prediction": "all x.(Vampire(x) -> (Sucks(x) | Sucks(x)))", "score": 0}
{"id": "folio_validation_379", "prediction": "all x.(Vampire(x) -> Sabotie(x))", "score": 0}
{"id": "folio_validation_379", "prediction": "all x.(Vampire(x) -> Scuck(x))", "score": 0}
{"id": "folio_validation_379", "prediction": "all x.(Vampire(x) -> Spucks(x))", "score": 0}
{"id": "folio_validation_379", "prediction": "all x.(Vampire(x) -> Sucks(x))", "score": 0}
{"id": "folio_validation_379", "prediction": "all x.(Vampire(x) -> Sauck(x))", "score": 0}
{"id": "folio_validation_379", "prediction": "all x.(Vampire(x) -> Swips(x))", "score": 0}
{"id": "folio_validation_380", "prediction": "all x.(Space(x) -> Vacuum(x))", "score": 3}
{"id": "folio_validation_380", "prediction": "all x y.((Space(x) & Vacuum(y)) -> Is(x,y))", "score": 0}
{"id": "folio_validation_381", "prediction": "all x.(Duster(x) -> (HouseholdAppliance(x) & -Sucks(x)))", "score": 0}
{"id": "folio_validation_381", "prediction": "all x.(Duster(x) -> (HausholdAppliance(x) & -Sucks(x)))", "score": 0}
{"id": "folio_validation_381", "prediction": "all x.(Duster(x) -> (HausletAppliance(x) & -Suck(x)))", "score": 0}
{"id": "folio_validation_381", "prediction": "all x.(Duster(x) -> (HaustierAppliance(x) & -Sucks(x)))", "score": 0}
{"id": "folio_validation_381", "prediction": "all x.(Duster(x) -> (HasAppliance(x) & -Sucks(x)))", "score": 0}
{"id": "folio_validation_381", "prediction": "all x.(Duster(x) -> (HausletAppliance(x) & -Sucks(x)))", "score": 0}
{"id": "folio_validation_381", "prediction": "all x.(Duster(x) -> (HomemadeAppliance(x) & -Sucks(x)))", "score": 0}
{"id": "folio_validation_381", "prediction": "all x.(Duster(x) -> -Sucks(x))", "score": 0}
{"id": "folio_validation_381", "prediction": "all x y.((Duster(x) & HouseholdAppliance(y)) -> -Sucks(y))", "score": 0}
{"id": "folio_validation_381", "prediction": "all x.(Duster(x) -> (HausryAppliance(x) & -Sucks(x)))", "score": 0}
{"id": "folio_validation_382", "prediction": "exists x.(Space(x) & Suckle(x))", "score": 0}
{"id": "folio_validation_382", "prediction": "all x.(Space(x) -> Stucks(x))", "score": 1}
{"id": "folio_validation_382", "prediction": "all x.(Space(x) -> Sautes(x))", "score": 1}
{"id": "folio_validation_382", "prediction": "all x.(Space(x) -> Sakes(x))", "score": 0}
{"id": "folio_validation_382", "prediction": "all x.(Space(x) -> Sustains(x))", "score": 0}
{"id": "folio_validation_382", "prediction": "all x.(SpaceSucks(x) -> SpaceResource(x))", "score": 0}
{"id": "folio_validation_382", "prediction": "all x.(Space(x) -> Sutures(x))", "score": 0}
{"id": "folio_validation_382", "prediction": "all x.(Space(x) -> Suits(x))", "score": 0}
{"id": "folio_validation_382", "prediction": "all x.(Space(x) -> Sucks(x))", "score": 0}
{"id": "folio_validation_382", "prediction": "all x.(Space(x) -> Suckle(x))", "score": 1}
{"id": "folio_validation_382", "prediction": "all x.(SpaceSucks(x) -> TheNestToHungry(x))", "score": 0}
{"id": "folio_validation_383", "prediction": "all x.(Space(x) -> Vampiric(x))", "score": 0}
{"id": "folio_validation_383", "prediction": "(Vampire(Space) & Slave(Space))", "score": 0}
{"id": "folio_validation_383", "prediction": "all x.(Space(x) -> Vampirism(x))", "score": 0}
{"id": "folio_validation_383", "prediction": "all x.(Space(x) -> Vampire(x))", "score": 0}
{"id": "folio_validation_383", "prediction": "exists x.(Space(x) & Vampire(x))", "score": 0}
{"id": "folio_validation_383", "prediction": "All x.(Space(x) -> Vampiric(x))", "score": -1}
{"id": "folio_validation_383", "prediction": "Space is vampire(Space)", "score": -1}
{"id": "folio_validation_383", "prediction": "exists x.(Space(x) & Vamp(x))", "score": 0}
{"id": "folio_validation_383", "prediction": "(Vampire(Space))", "score": 0}
{"id": "folio_validation_384", "prediction": "all x.((HausholdAppliance(x) & UsedForShelterAppliance(x)) -> Spucks(x))", "score": 0}
{"id": "folio_validation_384", "prediction": "all x.((HouseholdAppliance(x) & Spucks(x)) -> HouseholdAppliance(x))", "score": 0}
{"id": "folio_validation_384", "prediction": "all x.((HausletAppliance(x) & HouseholdAppliance(x)) -> Sautes(x))", "score": 0}
{"id": "folio_validation_384", "prediction": "all x.(HauslearyAppliance(x) -> Sucks(x))", "score": 0}
{"id": "folio_validation_384", "prediction": "all x.((HausmanAppliance(x) & Sucks(x)) -> HouseholdAppliance(x))", "score": 0}
{"id": "folio_validation_384", "prediction": "all x.((HaustopAppliance(x) & SucksAt(x)) -> HouseholdAppliance(x))", "score": 0}
{"id": "folio_validation_384", "prediction": "all x.((HouseholdAppliance(x)) -> Sucks(x))", "score": 0}
{"id": "folio_validation_384", "prediction": "all x.(HomeownerAppliance(x) -> Stucks(x))", "score": 0}
{"id": "folio_validation_384", "prediction": "all x.((HausmalAppliance(x) & HouseholdAppliance(x)) -> Sucks(x))", "score": 0}
{"id": "folio_validation_384", "prediction": "all x.(HausmalAppliance(x) -> Sags(x))", "score": 0}
{"id": "folio_validation_384", "prediction": "all x.((Appliance(x) & Household(x)) -> Saucks(x))", "score": 0}
{"id": "folio_validation_384", "prediction": "all x.((HausworkAppliance(x) & Appliance(x)) -> Sucks(x))", "score": 0}
{"id": "folio_validation_384", "prediction": "all x.((HomemadeAppliance(x) & CooksIn(x)) -> Sucks(x))", "score": 0}
{"id": "folio_validation_384", "prediction": "all x.((HouseholdAppliance(x)) -> Sails(x))", "score": 0}
{"id": "folio_validation_384", "prediction": "all x.((HouseholdAppliance(x) & Saults(x)) -> KitchenAid(x))", "score": 0}
{"id": "folio_validation_384", "prediction": "all x.((ElectricAppliance(x) & HouseholdAppliance(x)) -> Sucks(x))", "score": 0}
{"id": "folio_validation_385", "prediction": "all x.(MachineLearningAlgorithm(x) -> (SupervisedLearning(x) | UnsupervisedLearning(x) | ReinforcementLearning(x)))", "score": 0}
{"id": "folio_validation_385", "prediction": "all x.((MachineLearningAlgorithm(x) & SupervisedLearning(x)) | UnsupervisedLearning(x) | ReinforcementLearning(x))", "score": 0}
{"id": "folio_validation_385", "prediction": "all x.(MachineLearningAlgorithm(x) -> (OverseeedLearning(x) | UnsupervisedLearning(x) | ReinforcementLearning(x)))", "score": 0}
{"id": "folio_validation_385", "prediction": "all x.(MachineLearningAlgorithm(x) -> (SupervisedLearning(x) | UnsupervisedLearning(x) | ReproducerLearning(x)))", "score": 0}
{"id": "folio_validation_385", "prediction": "all x.(MachineLearningAlgorithm(x) -> (SupervisedLearning(x) | UnsupervisedLearning(x) | ResonantLearning(x)))", "score": 0}
{"id": "folio_validation_385", "prediction": "all x.(MachineLearningAlgorithm(x) -> (SupervisedLearning(x) | UnsupervisedLearning(x) | RerenforcementLearning(x)))", "score": 0}
{"id": "folio_validation_386", "prediction": "all x.(UnsupervisedLearning(x) -> -RequiresLabelledData(x))", "score": 0}
{"id": "folio_validation_386", "prediction": "all x.(UnsupervisedLearning(x) -> -RequireslabelledData(x))", "score": 0}
{"id": "folio_validation_386", "prediction": "all x.(UnsupervisedLinguage(x) -> -RequiresLabelledData(x))", "score": 0}
{"id": "folio_validation_386", "prediction": "all x.((UnsupervisedLearning(x) & -RequiresLeachedData(x)) -> -RequiresLabeledData(x))", "score": 0}
{"id": "folio_validation_386", "prediction": "all x.(UnsupervisedLearning(x) -> -RequiresLabeledData(x))", "score": 0}
{"id": "folio_validation_386", "prediction": "all x.(UnsupervisedLearning(x) -> -RequiresLayeredData(x))", "score": 0}
{"id": "folio_validation_386", "prediction": "all x.(UnsupervisedLearning(x) -> -RequiresTaggedData(x))", "score": 0}
{"id": "folio_validation_387", "prediction": "all x.((StateOfTheArtTextSummarizationModel(x) & BART(x)) -> Summaries(x))", "score": 0}
{"id": "folio_validation_387", "prediction": "all x.((StateOfTheArtTextSummarizationModel(x) & BART(x)) -> ObjectSummarizationModel(x))", "score": 0}
{"id": "folio_validation_387", "prediction": "all x.((StateOfTheArtTextSummarizationModel(x) & BART(x)) -> TextSummarizationModel(x))", "score": 0}
{"id": "folio_validation_387", "prediction": "all x.((TextSummarizationModel(x) & StateOfTheArt(x)) -> BART(x))", "score": 0}
{"id": "folio_validation_387", "prediction": "all x.(BART(x) -> StateOfTheArtTextSummarizationModel(x))", "score": 0}
{"id": "folio_validation_387", "prediction": "all x.(StateOfTheArtTextSummarizationModel(x,BART) -> Submitted(x))", "score": 0}
{"id": "folio_validation_387", "prediction": "all x.(StateOfTheArtTextSummarizationModel(x) -> BART(x))", "score": 0}
{"id": "folio_validation_387", "prediction": "all x.((TextSummarizationModel(x) & BART(x)) -> StateOfTheArt(x))", "score": 0}
{"id": "folio_validation_387", "prediction": "(StateOfTheArtTextSummarizationModel(x) & BART(x))", "score": 0}
{"id": "folio_validation_387", "prediction": "all x.((StateOfTheArtTaskSummaryModel(x) & BART(x)) -> Summarize(x))", "score": 0}
{"id": "folio_validation_387", "prediction": "(StateOfTheArtTextSummarizationModel(x) -> BART(x))", "score": 0}
{"id": "folio_validation_388", "prediction": "all x y.((StateOfTheArtTextSummarizationModel(x) & MachineLearningAlgorithms(y)) -> TrainedWith(x,y))", "score": 0}
{"id": "folio_validation_388", "prediction": "all x.((TextSummarizationModel(x) & StateOfTheArt(x)) -> TrainedWithMachineLearningAlgorithms(x))", "score": 0}
{"id": "folio_validation_388", "prediction": "all x.((TextSummarizationModel(x) & Artificial LearningAlgorithms(x)) -> TrainedWith(x))", "score": -1}
{"id": "folio_validation_388", "prediction": "all x.(StateOfTheArtTextSummarizationModel(x) -> TrainedWithMachineLearningAlgorithms(x))", "score": 0}
{"id": "folio_validation_388", "prediction": "all x.((TextSummarizationModel(x) & ServedWithMachineLearningAlgorithms(x)) -> TrainedWith(x))", "score": 0}
{"id": "folio_validation_388", "prediction": "the state-of-theart text summarizationmodel is trainedwithMachineLearningAlgorithms.", "score": -1}
{"id": "folio_validation_388", "prediction": "all x y.((StateOfTheArtTextSummarizationModel(x) & MachineLearningAlgorithms(y)) -> TrainedUsing(x,y))", "score": 0}
{"id": "folio_validation_388", "prediction": "all x.((StateOfTheArtTextSummarizationModel(x) & TrainedWithMachineLearningAlgorithms(x)) -> TrainedWith(x))", "score": 0}
{"id": "folio_validation_388", "prediction": "all x.((TextSummarizationModel(x) & MachineLearningAlgorithmsTrained(x)) -> HighArtSummarization(x))", "score": 0}
{"id": "folio_validation_388", "prediction": "all x.((TranslationSummarizationModel(x) & MachineLearningAlgorithms(x)) -> TrainedWith(x))", "score": 0}
{"id": "folio_validation_388", "prediction": "all x.((StateOfTheArtTextSummarizationModel(x) & MachineLearningAlgorithms(x)) -> TrainedWith(x,y))", "score": 0}
{"id": "folio_validation_388", "prediction": "all x.((TextSummarizationModel(x) & MachineLearningAlgorithms(x)) -> TrainedWith(x,y))", "score": 0}
{"id": "folio_validation_389", "prediction": "all x.((ReinforcementLearning(x) & -TrainStateOfTheArtTextSummarization(x)) -> -Trained(x))", "score": 0}
{"id": "folio_validation_389", "prediction": "all x.((ReinforcementLearning(x) & -TrainedStateOfTheArtTextSummarizationModel(x)) -> -UsedToTrain(x))", "score": 0}
{"id": "folio_validation_389", "prediction": "all x.((ReinforcementLearning(x) & -StateOfTheArtTextSummarizationModel(x)) -> -Trains(x,TextSummarizationModel,TextSummarizationModel))", "score": 0}
{"id": "folio_validation_389", "prediction": "all x.((ReinforcementLearning(x) & -TrainedstateOfTheArtTextSummarizationModel(x)) -> -RequiredForSummaries(x))", "score": 0}
{"id": "folio_validation_389", "prediction": "all x.((ReinforcementLearning(x) & -TrainStateOfTheArtTextSummarizationModel(x)) -> -TrainTaskToArt(x))", "score": 0}
{"id": "folio_validation_389", "prediction": "all x.((ReinforcementLearning(x) & -UsedToTrainTextSummarizationMode(x)) -> -FormsStateOfTheArtModel(x))", "score": 0}
{"id": "folio_validation_389", "prediction": "all x.((ReinforcementLearning(x) & -StateOfTheArtTextSummarizationModel(x)) -> -TrainingEnhanced(x))", "score": 0}
{"id": "folio_validation_389", "prediction": "all x.((ReinforcementLearning(x) & -TextSummarizationModel(x)) -> -Trains(x,y))", "score": 0}
{"id": "folio_validation_389", "prediction": "all x y.((ReinforcementLearning(x) & TextSummarizationModel(y)) -> -(TrainTheStateOfTheArt(x,y)))", "score": 0}
{"id": "folio_validation_389", "prediction": "all x.((ReinforcementLearning(x) & -TrainedStateOfTheArtTextSummarizationModel(x)) -> -UsedForTextSummarization(x))", "score": 0}
{"id": "folio_validation_389", "prediction": "all x.((ReinforcementLearning(x) & -TrainStateOfTheArtTextSummarization(x)) -> ThermalLearning(x))", "score": 0}
{"id": "folio_validation_389", "prediction": "all x.((ReinforcementLearning(x) & -CultivatesStateOfTheArtTextSummarizationModel(x)) -> -Trains(x))", "score": 0}
{"id": "folio_validation_389", "prediction": "all x.(ReinforcementLearning(x) -> -TrainTextSummarizationModel(x))", "score": 0}
{"id": "folio_validation_389", "prediction": "all x.(RenforcementLearning(x) -> -TrainsStateOfTheArtTextSummarizationModel(x))", "score": 0}
{"id": "folio_validation_389", "prediction": "all x.(RenforcementLearning(x) -> -TrainsStateOfTheArtTextSummarization(x))", "score": 0}
{"id": "folio_validation_389", "prediction": "all x.((ReinforcementLearning(x) & StateOfTheArtTextSummarizationModel(y)) -> -Trains(x,y))", "score": 0}
{"id": "folio_validation_390", "prediction": "all x.((Algorithm(x) & TrainingTextSummarizationModel(x)) -> RequiresLabeledData(x))", "score": 0}
{"id": "folio_validation_390", "prediction": "all x y.((MachineLearningAlgorithm(x) & TrainingTextSummarizationModel(y)) -> RequiresLabeledData(x))", "score": 0}
{"id": "folio_validation_390", "prediction": "all x.((MachineLearningAlgorithm(x) & TrainingTextSummarizationModel(x)) -> RequiresTaggedData(x))", "score": 0}
{"id": "folio_validation_390", "prediction": "all x.((MachineLearningAlgorithm(x) & TrainingTextSummarizationModel(x)) -> RequiresLabeledData(x))", "score": 0}
{"id": "folio_validation_390", "prediction": "all x.((MachineLearningAlgorithm(x) & ForTeachingTextSummarizationModel(x)) -> RequiresLabeledData(x))", "score": 0}
{"id": "folio_validation_390", "prediction": "all x.(MachineLearningAlgorithm(x) -> forTrainingTextSummarizationModel(x))", "score": 0}
{"id": "folio_validation_390", "prediction": "all x.(MachineLearningAlgorithm(x) -> (TrainingTextSummarizationModel(x) & NeedsValidData(x)))", "score": 0}
{"id": "folio_validation_390", "prediction": "all x.(MachineLearningAlgorithmForTumulatingTextSummarization(x) -> RequiresLabeledData(x))", "score": 0}
{"id": "folio_validation_390", "prediction": "all x.((TargetingTextSummarization(x) & MachineLearningAlgorithm(x)) -> RequiresCategoredData(x))", "score": 0}
{"id": "folio_validation_390", "prediction": "all x.((MachineLearningAlgorithm(x) & TrainingTextSummarizationModel(x)) -> NeedslabelledData(x))", "score": 0}
{"id": "folio_validation_390", "prediction": "all x.((MachineLearningAlgorithm(x) & TrainingTextSummarizationModel(x)) -> RequireslabelledData(x))", "score": 0}
{"id": "folio_validation_390", "prediction": "all x.(MachineLearningAlgorithm(x) -> TrainingTextSummarizationModelRequiresStockedData(x))", "score": 0}
{"id": "folio_validation_390", "prediction": "all x.((MachineLearningAlgorithm(x) & TrainingTextSummarizationMachine(x)) -> RequiresTaggedData(x))", "score": 0}
{"id": "folio_validation_390", "prediction": "all x.((MachineLearningAlgorithm(x) & TrainingTextSummarizationModel(x)) -> RequiresLabelledData(x))", "score": 0}
{"id": "folio_validation_391", "prediction": "all x.(SupervisedLearning(x) -> (TrainsStateOfTheArtTextSummarizationModel(x)))", "score": 0}
{"id": "folio_validation_391", "prediction": "all x y.((SupervisedLearning(x) & StateOfTheArtTextSummarizationModel(y)) -> UsedToTrain(x,y))", "score": 0}
{"id": "folio_validation_391", "prediction": "all x y.((SupervisedLearning(x) & TextSummarizationModel(y)) -> Trains(x,y))", "score": 0}
{"id": "folio_validation_391", "prediction": "all x.(SupervisedLearning(x) -> TrainsStateOfTheArtTextSummarization(x))", "score": 0}
{"id": "folio_validation_391", "prediction": "all x.(SupervisedLearning(x) -> TrainsStateOfTheArtTextSummarizationModel(x))", "score": 0}
{"id": "folio_validation_391", "prediction": "all x.(SupervisedLearning(x) -> (TrainStateOfTheArtTextSummarizationModel(x)))", "score": 0}
{"id": "folio_validation_391", "prediction": "all x.(SupervisedLearning(x) -> TrainStateOfTheArtTextSummarizationModel(x))", "score": 0}
{"id": "folio_validation_391", "prediction": "all x y.((SupervisedLearning(x) & TextSummarizationModel(y)) -> Trainer(x,y))", "score": 0}
{"id": "folio_validation_391", "prediction": "all x y z.((SupervisedLearning(x) & TextSummarization(y) & TextSummarizationModel(z)) -> Trains(x,y,z))", "score": 0}
{"id": "folio_validation_391", "prediction": "all x y.((SupervisedLearning(x) & StateOfTheArtTextSummarizationModel(y) & UsedForTraining(x,y)) -> Trains(x,y))", "score": 0}
{"id": "folio_validation_391", "prediction": "all x y.((SupervisedLearning(x) & TextSummarization(y)) -> UsedToTrain(x,y))", "score": 0}
{"id": "folio_validation_391", "prediction": "all x.(SupervisedLearning(x) -> UsedToTrainTextSummarizationModel(x))", "score": 0}
{"id": "folio_validation_392", "prediction": "all x y.((UnsupervisedLearning(x) & StateOfTopArtTextSummarizationModel(y)) -> Trains(x,y))", "score": 0}
{"id": "folio_validation_392", "prediction": "all x.((UnsupervisedLearning(x) & StateOfTheArtTextSummarizationModel(x)) -> Trains(x,StateOfTheArtTextSummarizationModel))", "score": 0}
{"id": "folio_validation_392", "prediction": "all x.((UnsupervisedLearning(x) & StateOfTheArtTextSummarization(x)) -> Trains(x,s,t))", "score": 0}
{"id": "folio_validation_392", "prediction": "all x.(UnsupervisedLearning(x) -> (TrainStateOfTheArtTextSummarizationModel(x)))", "score": 0}
{"id": "folio_validation_392", "prediction": "all x.(UnsupervisedLearning(x) -> Transcribes(x))", "score": 0}
{"id": "folio_validation_392", "prediction": "all x.(UnsupervisedLearning(x) -> UsedForTextSummarization(x))", "score": 0}
{"id": "folio_validation_392", "prediction": "all x y.((UnsupervisedLearning(x) & TextSommarizationModel(y)) -> Trains(x,y))", "score": 0}
{"id": "folio_validation_392", "prediction": "all x y.((UnsupervisedLearning(x) & StateOfTheArtTextSummarizationModel(y)) -> UsedToTrain(x,y))", "score": 0}
{"id": "folio_validation_392", "prediction": "all x.(UnsupervisedLearning(x) -> TrainingStateOfThirdArtTextSummarizationModel(x))", "score": 0}
{"id": "folio_validation_392", "prediction": "all x.(UnsupervisedLinguistics(x) -> TrainsStateOfTheArtTextSommarizationModel(x))", "score": 0}
{"id": "folio_validation_392", "prediction": "all x y.((UnsupervisedLearning(x) & StateOfAtLatestTextSummarizationModel(y)) -> Trains(x,y))", "score": 0}
{"id": "folio_validation_392", "prediction": "all x y z.((StateOfTheArtTextSummarizationModel(z) & UnsupervisedLearning(x)) -> Trains(x,z))", "score": 0}
{"id": "folio_validation_392", "prediction": "all x.(UnsupervisedLearning(x) -> TrainsStateOfTheArtTextSummarizationModel(x))", "score": 0}
{"id": "folio_validation_392", "prediction": "all x.(UnsupervisedLearning(x) -> TrainStateOfTheArtTextSummarizationModel(x))", "score": 0}
{"id": "folio_validation_392", "prediction": "all x.(UnsupervisedLearning(x) -> (TreattheartTextSummarization(x) & TrainsTextSummarizationModel(x)))", "score": 0}
{"id": "folio_validation_392", "prediction": "all x.(UnsupervisedLearning(x) -> HasBeenUsedToTrainTextSummarizationModel(x))", "score": 0}
{"id": "folio_validation_393", "prediction": "all x.((Character(x) & Funny(x)) -> Popular(x))", "score": 0}
{"id": "folio_validation_393", "prediction": "all x.((CartoonCharacter(x) & Funny(x)) -> Popular(x))", "score": 0}
{"id": "folio_validation_393", "prediction": "all x.(FunnyCartoon(x) -> Popular(x))", "score": 0}
{"id": "folio_validation_393", "prediction": "all x.(FunnyCharacter(x) -> Popular(x))", "score": 0}
{"id": "folio_validation_393", "prediction": "all x.(Comic(x) -> Popular(x))", "score": 0}
{"id": "folio_validation_393", "prediction": "all x.(Funny(x) -> PopularCartoonCharacter(x))", "score": 0}
{"id": "folio_validation_394", "prediction": "all x.((CartoonCharacter(x) & Urgly(x)) -> -Popular(x))", "score": 0}
{"id": "folio_validation_394", "prediction": "all x.((CartoonCharacter(x) & Ugly(x)) -> -Popular(x))", "score": 0}
{"id": "folio_validation_394", "prediction": "all x.((Character(x) & Ugly(x)) -> -Popular(x))", "score": 0}
{"id": "folio_validation_394", "prediction": "all x.(UglyCharacter(x) -> -Popular(x))", "score": 0}
{"id": "folio_validation_395", "prediction": "all x.((CartoonCharacter(x) & LovedByChildren(x)) -> Funny(x))", "score": 0}
{"id": "folio_validation_395", "prediction": "all x.((Character(x) & LovedByChildren(x)) -> Funny(x))", "score": 0}
{"id": "folio_validation_395", "prediction": "all x.(LovedByChildren(x) -> FunnyCharacter(x))", "score": 0}
{"id": "folio_validation_396", "prediction": "all x.((CartoonCharacter(x) & Simpsons(x)) -> LovedByChildren(x))", "score": 0}
{"id": "folio_validation_396", "prediction": "all x.((CartoonCharacter(x) & FromSimpsons(x)) -> LovedByChildren(x))", "score": 0}
{"id": "folio_validation_396", "prediction": "all x.((Character(x) & FromTheSpiders(x)) -> LovedByChildren(x))", "score": 0}
{"id": "folio_validation_396", "prediction": "all x.((CartoonCharacter(x) & FromSimpson(x)) -> LovedByChildren(x))", "score": 0}
{"id": "folio_validation_396", "prediction": "all x.((Cardio(x) & FromSimpsons(x)) -> LovedByChildren(x))", "score": 0}
{"id": "folio_validation_396", "prediction": "exists x.(CartoonCharacter(x) & FromSimpsons(x))", "score": 0}
{"id": "folio_validation_396", "prediction": "all x.((Character(x) & Simpsons(x)) -> LovedByChildren(x))", "score": 0}
{"id": "folio_validation_397", "prediction": "all x.((CartoonCharacter(x) & Yellow(x)) -> FromTheSimpsons(x))", "score": 0}
{"id": "folio_validation_397", "prediction": "all x.((CartoonCharacter(x) & Yellow(x)) -> SimpsonsCharacter(x))", "score": 0}
{"id": "folio_validation_397", "prediction": "all x.(Juice(x) -> CartoonCharacterFromSissimmons(x))", "score": 0}
{"id": "folio_validation_397", "prediction": "all x.((CartoonCharacter(x) & Yellow(x)) -> Simpsons(x))", "score": 0}
{"id": "folio_validation_397", "prediction": "all x.((CartoonCharacter(x) & Yellow(x)) -> FromSimpsons(x))", "score": 0}
{"id": "folio_validation_397", "prediction": "all x.((Character(x) & Yellow(x)) -> Simpsons(x))", "score": 0}
{"id": "folio_validation_397", "prediction": "all x.((Cardio(x) & Yellow(x)) -> Simpsons(x))", "score": 0}
{"id": "folio_validation_397", "prediction": "all x.(White(x) -> Simpsons(x))", "score": 0}
{"id": "folio_validation_397", "prediction": "all x.(YellowCartoonCharacter(x) -> Simpsons(x))", "score": 0}
{"id": "folio_validation_398", "prediction": "exists x.(Ben(x) & (Simpsons(x) | Funny(x)))", "score": 0}
{"id": "folio_validation_398", "prediction": "Ben(b) -> (FromSimpsons(b) | Funny(c)))", "score": -1}
{"id": "folio_validation_398", "prediction": "all x.(Ben(x) -> (Simpsons(x) | Funny(x)))", "score": 0}
{"id": "folio_validation_398", "prediction": "Ben (Simpsons(b) | Funny(b)))", "score": -1}
{"id": "folio_validation_398", "prediction": "Ben exists x.(Simpsons(x) | Funny(x))", "score": -1}
{"id": "folio_validation_398", "prediction": "(Either Simpsons(Ben) | Funny(Ben))", "score": -1}
{"id": "folio_validation_398", "prediction": "all x.(Ben(x) -> (FromTheSimpsons(x) | Funny(x)))", "score": 0}
{"id": "folio_validation_398", "prediction": "all x.(Ben(x) -> (FromSims(x) | Funny(x)))", "score": 0}
{"id": "folio_validation_398", "prediction": "all x.((Ben(x) & FromSimpson(x)) | Funny(x))", "score": 0}
{"id": "folio_validation_398", "prediction": "Ben (or Simpsons(n) | Funny(n)))", "score": -1}
{"id": "folio_validation_398", "prediction": "(Sims(Ben) | Funny(Ben))", "score": 0}
{"id": "folio_validation_398", "prediction": "(MuchDisney(Ben) | Funny(Ben),(Ben)))", "score": -1}
{"id": "folio_validation_398", "prediction": "exists x.(Ben(x) & (FromSimpsons(x) | Funny(x)))", "score": 0}
{"id": "folio_validation_398", "prediction": "exists x.(Ben(x) & (TheSimpsons(x) | Funny(x)))", "score": 0}
{"id": "folio_validation_399", "prediction": "all x y.((Ben(x) & Child(y)) -> LovedBy(x,y))", "score": 0}
{"id": "folio_validation_399", "prediction": "exists x.(Ben(x) & LivesIn(x,Children))", "score": 0}
{"id": "folio_validation_399", "prediction": "all x.((Ben(x) & LovedByChildren(x)) -> LovedByChildren(x))", "score": 0}
{"id": "folio_validation_399", "prediction": "Ben is lovedByChildren.", "score": -1}
{"id": "folio_validation_399", "prediction": "all x.(Ben(x) -> LovedByChildren(x))", "score": 0}
{"id": "folio_validation_399", "prediction": "all x.(Ben(x) -> LovedBy(x,Children))", "score": 0}
{"id": "folio_validation_399", "prediction": "(LovedByChildren(Ben)", "score": -1}
{"id": "folio_validation_399", "prediction": "all x.(Ben(x) -> LovedAndLeavedByChildren(x))", "score": 0}
{"id": "folio_validation_400", "prediction": "exists x.(Ben(x) & (Ugly(x) | Yellow(x)))", "score": 0}
{"id": "folio_validation_400", "prediction": "all x.((Ben(x) & (Ugly(x) | Yellow(x))) -> -Ugly(x))", "score": 0}
{"id": "folio_validation_400", "prediction": "exists x.(Ben(x) & Ugly(x) & Yellow(x))", "score": 0}
{"id": "folio_validation_400", "prediction": "(Ugly(Ben) | Yellow(Ben)))", "score": -1}
{"id": "folio_validation_400", "prediction": "all x.(Ben(x) -> (Ugly(x) | Yellow(x)))", "score": 0}
{"id": "folio_validation_400", "prediction": "Ben (Ugly(ben) | Yellow(ben)))", "score": -1}
{"id": "folio_validation_400", "prediction": "exists x.(PoorBen(x) & (Ugly(x) | Yellow(x)))", "score": 0}
{"id": "folio_validation_401", "prediction": "(Yellow(y) & Ugly(y)) | -(Yellow(y) | Ugly(y))))", "score": -1}
{"id": "folio_validation_401", "prediction": "(Yellow(Ben) | (Yellow(Ben) & Ugly(Ben))))", "score": -1}
{"id": "folio_validation_401", "prediction": "(Yellow(Ben) | -Yellow(Ben)?))", "score": -1}
{"id": "folio_validation_401", "prediction": "(Yellow(Ben) | -Yellow(Ben) & -Ugly(Ben)))", "score": -1}
{"id": "folio_validation_401", "prediction": "all x.(Ben(x) -> ((Yellow(x) & Ugly(x)) | (-Yellow(x) & Ugly(x))))", "score": 0}
{"id": "folio_validation_401", "prediction": "all x.(Ben(x) -> (Yellow(x) & Ugly(x) & -Yellow(x) & -Ugly(x)))", "score": 0}
{"id": "folio_validation_401", "prediction": "all x.(Ben(x) -> ((Yellow(x) & Ugly(x)) | -Yellow(x) & -Ugly(x))))", "score": -1}
{"id": "folio_validation_401", "prediction": "all x.(Ben(x) -> ((Yellow(x) & Ugly(x)) | -(Yellow(x) & Ugly(x)))))", "score": -1}
{"id": "folio_validation_401", "prediction": "(EachSignificantStorm(Ben) | (ZeroStorm(Ben) | (-ZeroStorm(Ben) & Yellow(Ben))))", "score": 0}
{"id": "folio_validation_401", "prediction": "all x.(Ben(x) -> (Neety(x) | -Neety(x)))", "score": 0}
{"id": "folio_validation_401", "prediction": "all x.(Ben(x) -> ((Yellow(x) & Ugly(x)) | (-Yellow(x) & Ugly(x)))))", "score": -1}
{"id": "folio_validation_401", "prediction": "(Camel(Ben) -> (Yellow(Ben) | -Yellow(Ben) & -Ugly(Ben)))", "score": 0}
{"id": "folio_validation_401", "prediction": "all x.(Ben(x) -> ((Yellow(x) | Ugly(x)) | (-Yellow(x) | Ugly(x))))", "score": 1}
{"id": "folio_validation_401", "prediction": "all x.(Ben(x) -> (Yellow(x) & Ugly(x)) | -(Yellow(x) & Ugly(x))))", "score": -1}
{"id": "folio_validation_401", "prediction": "Ben exists x.(Yellow(x) | Ugly(x) | -Ugly(x)))", "score": -1}
{"id": "folio_validation_402", "prediction": "all x.(BreedingBack(x) -> (ArtificialSelection(x) & DeliberateSelectiveBreeding(x) & DomesticAnimals(x)))", "score": 0}
{"id": "folio_validation_402", "prediction": "all x.(BreedingBack(x) -> (ArtificialSelection(x) & DeliberateSelectiveBreedingOfDomesticAnimals(x)))", "score": 0}
{"id": "folio_validation_402", "prediction": "all x.(BreedingBack(x) -> (ArtificialSelection(x,y) & DeliberateNobleGrabbing(x,z) & DomesticAnimal(x)))", "score": 0}
{"id": "folio_validation_402", "prediction": "all x.(BreedingBack(x) -> (ArtificialSelection(x) & DeliberateSelectiveBreeding(x) & DomesticAnimal(x)))", "score": 0}
{"id": "folio_validation_402", "prediction": "all x.(BreedingBack(x) -> (ArtificialSelection(x) & DeliberateBreedingOfDomesticAnimals(x)))", "score": 0}
{"id": "folio_validation_402", "prediction": "all x.(BreedingBack(x) -> (Artificial(x) & Deliberate(x) & Selective(x) & BreedingDomesticAnimals(x)))", "score": 0}
{"id": "folio_validation_402", "prediction": "all x y.((BreedingBack(x) & DomesticAnimal(y)) -> (ArtificialSelection(x,y) & DeliberateSelectiveBreeding(x,y)))", "score": 0}
{"id": "folio_validation_402", "prediction": "all x y.((BreedingBack(x) & DomesticAnimal(y)) -> (ArtificialSelection(x) & DeliberateSelectiveBreeding(x,y)))", "score": 0}
{"id": "folio_validation_402", "prediction": "all x.(BedingBack(x) -> (ArtificialSelection(x) & DeliberateSelectiveBreedingOfDomesticAnimals(x)))", "score": 0}
{"id": "folio_validation_402", "prediction": "all x.(BreedingBack(x) -> (ArtificialSelection(x) & DeliberateSelectiveBreeding(x)))", "score": 0}
{"id": "folio_validation_402", "prediction": "all x.(BreedingBack(x) -> (ArtificialSelection(x) & DeliberateSelection(x) & DomesticAnimalsBreeding(x)))", "score": 0}
{"id": "folio_validation_402", "prediction": "all x y.((BreedingBack(x) & DeliberateSelectiveBreeding(y)) -> ArtificialSelection(x,y))", "score": 0}
{"id": "folio_validation_403", "prediction": "all x.(HackCave(x) -> (BredBack(x) & RésemblingAurochs(x)))", "score": 0}
{"id": "folio_validation_403", "prediction": "all x.(Heck(x) -> (BredBack(x,200) & RelatesToArrochs(x)))", "score": 0}
{"id": "folio_validation_403", "prediction": "all x.(HeckChowder(x) -> (BredBackInThe20s(x) & RemindsAuroches(x)))", "score": 0}
{"id": "folio_validation_403", "prediction": "all x.(Heck(x) -> (BredBack(x,202) & RejuvenatedAuroscope(x)))", "score": 0}
{"id": "folio_validation_403", "prediction": "all x.(HeckCalf(x) -> (BredBack(x,Zwanzig) & RequiresArroch(x)))", "score": 0}
{"id": "folio_validation_403", "prediction": "all x y z.((Heck(x) & Cattle(y) & Auroch(z)) -> BredBackIn1920sToRemarque(x,y,z))", "score": 0}
{"id": "folio_validation_403", "prediction": "all x y z.((HahBredBack(x) & Auroch(y) & Carrier(z)) -> BredResembling(x,y,z))", "score": 0}
{"id": "folio_validation_403", "prediction": "all x y.((KhuckCowlet(x) & 1930s(y)) -> BroughtBack(x,y))", "score": 0}
{"id": "folio_validation_403", "prediction": "all x.(HehlCattle(x) -> (BredBack(x) & ReactsToAurochs(x)))", "score": 0}
{"id": "folio_validation_403", "prediction": "all x y z.((HeckCattle(x) & 1920(y) & Aurochs(z) & BredBack(x,y,z)) -> RelativeTo(x,z))", "score": 0}
{"id": "folio_validation_403", "prediction": "all x.(HitCalf(x) -> (BredBack(x) & Reminds(x,aurochs)))", "score": 0}
{"id": "folio_validation_403", "prediction": "all x y.((Heck(x) & Auroch(y)) -> BredBackIn(x,y))", "score": 0}
{"id": "folio_validation_403", "prediction": "all x.(Huck(x) -> (BredBackIn20s(x) & RequiresArctis(x)))", "score": 0}
{"id": "folio_validation_403", "prediction": "all x.((HackCattle(x) & BredBack(x, 1920s)) -> ReresemblesAurophys(x))", "score": 0}
{"id": "folio_validation_403", "prediction": "all x.(Heck(x) -> BrewedBackInWinter1920sToRememberAurochs(x))", "score": 0}
{"id": "folio_validation_403", "prediction": "all x.(HatLivestock(x) -> (BreededBack(x) & RemarquesAurochs(x)))", "score": 0}
{"id": "folio_validation_404", "prediction": "[BG] HeckCattle(x) -> Animal(x))", "score": -1}
{"id": "folio_validation_404", "prediction": "[BG] HeckCattle(z) & Animal(w)", "score": -1}
{"id": "folio_validation_404", "prediction": "[BG] HeckCowboys(x) -> Animal(x))", "score": -1}
{"id": "folio_validation_404", "prediction": "[BG] HeckCowls(x) -> Animal(x))", "score": -1}
{"id": "folio_validation_404", "prediction": "[BG] HeckCattle(x) & Animal(x))", "score": -1}
{"id": "folio_validation_404", "prediction": "[BG] HeckCowboys(x) & Animal(x))", "score": -1}
{"id": "folio_validation_404", "prediction": "[BG] HeckCattle(x) - Animal(x))", "score": -1}
{"id": "folio_validation_404", "prediction": "All x.(HetzCow(x) -> Animal(x))", "score": -1}
{"id": "folio_validation_404", "prediction": "[BG] HeckCowlsAreAnimals(x)", "score": -1}
{"id": "folio_validation_404", "prediction": "[BG] HeckCowl(x) -> Animal(x))", "score": -1}
{"id": "folio_validation_405", "prediction": "all x.(Auroch(x) -> Animal(x))", "score": 0}
{"id": "folio_validation_405", "prediction": "[BG] (Arachos(auroch) & Animal(auroch))", "score": -1}
{"id": "folio_validation_405", "prediction": "[BG] -> Auroch(e))", "score": -1}
{"id": "folio_validation_405", "prediction": "[BG] Aurochs (animal(x))", "score": -1}
{"id": "folio_validation_405", "prediction": "All x.(Auroch(x) -> Animal(x))", "score": -1}
{"id": "folio_validation_405", "prediction": "[BG] Aurochs (animal))", "score": -1}
{"id": "folio_validation_405", "prediction": "all x.(Aurok(x) -> Animal(x))", "score": 0}
{"id": "folio_validation_405", "prediction": "[BG] Aurochs are animals.", "score": -1}
{"id": "folio_validation_405", "prediction": "[BG] (Animal(Aurochs))", "score": 0}
{"id": "folio_validation_405", "prediction": "all x.(Auro(x) -> (Animal(x) | Animal(x)))", "score": 0}
{"id": "folio_validation_405", "prediction": "all x.((Auroch(x) & Animal(x)) -> (Animal(x) & Animal(x)))", "score": 0}
{"id": "folio_validation_406", "prediction": "exists x.(Animal(x) & BredBack(x) & RelativeToExtinctAnimals(x))", "score": 0}
{"id": "folio_validation_406", "prediction": "exists x.(Animal(x) & BredBack(x) & RemindsExtinct(x))", "score": 0}
{"id": "folio_validation_406", "prediction": "exists x.(Animal(x) & BredBack(x) & RevealsExtinct(x))", "score": 0}
{"id": "folio_validation_406", "prediction": "exists x.(Animal(x) & BredBack(x) & ReresemblesExtinctAnimals(x))", "score": 0}
{"id": "folio_validation_406", "prediction": "exists x.(BredBackAnimal(x) & Animal(x) & Extinct(x))", "score": 0}
{"id": "folio_validation_406", "prediction": "exists x.(Animal(x) & BredBoard(x) & resemblesExtinction(x))", "score": 0}
{"id": "folio_validation_406", "prediction": "exists x.(Animal(x) & BredBack(x) & ReresemblesExtinct(x))", "score": 0}
{"id": "folio_validation_406", "prediction": "exists x.(Animal(x) & BredBack(x) & RemindsExtinctAnimals(x))", "score": 0}
{"id": "folio_validation_406", "prediction": "exists x.(Animal(x) & BredBack(x) & ReminiscesExtinct(x))", "score": 0}
{"id": "folio_validation_406", "prediction": "exists x.(Animal(x) & BracedBack(x) & Extinct(x))", "score": 0}
{"id": "folio_validation_406", "prediction": "exists x.(Animal(x) & BruisedBack(x))", "score": 0}
{"id": "folio_validation_406", "prediction": "exists x.(Animal(x) & BredBack(x) & RemarksExtinct(x))", "score": 0}
{"id": "folio_validation_406", "prediction": "exists x.(Animal(x) & BredBack(x) & RelatesToExtinct(x))", "score": 0}
{"id": "folio_validation_407", "prediction": "exists x.(HackerBird(x) & ArtificiallySelected(x))", "score": 0}
{"id": "folio_validation_407", "prediction": "exists x.(HahChowder(x) & ArtificiallySelected(x))", "score": 0}
{"id": "folio_validation_407", "prediction": "exists x.(ShellBreed(x) & ArtificiallySelected(x))", "score": 0}
{"id": "folio_validation_407", "prediction": "exists x.(HackCattle(x) & ArtificiallySelected(x))", "score": 0}
{"id": "folio_validation_407", "prediction": "exists x.(Hell(x) & Cattle(x) & ArtificiallySelected(x))", "score": 0}
{"id": "folio_validation_407", "prediction": "exists x.(HeckCattle(x) & ArtificiallySelected(x))", "score": 0}
{"id": "folio_validation_407", "prediction": "exists x.(Hell(x) & Cow(y) & ArtificiallySelected(x))", "score": 0}
{"id": "folio_validation_407", "prediction": "exists x.(HellCake(x) & ArtificiallySelected(x))", "score": 0}
{"id": "folio_validation_407", "prediction": "exists x.(HauerCattle(x) & ArtificiallySelected(x))", "score": 0}
{"id": "folio_validation_407", "prediction": "exists x.(HeatCattle(x) & ArtificiallySelected(x))", "score": 0}
{"id": "folio_validation_407", "prediction": "exists x.(HachtBean(x) & ArtificiallySelected(x))", "score": 0}
{"id": "folio_validation_407", "prediction": "exists x.(HeckCow(x) & ArtificiallySelected(x))", "score": 0}
{"id": "folio_validation_407", "prediction": "exists x.(HeckBear(x) & ArtificiallySelected(x))", "score": 0}
{"id": "folio_validation_407", "prediction": "exists x.(HeckCowlett(x) & ArtificiallySelected(x))", "score": 0}
{"id": "folio_validation_407", "prediction": "exists x.(HellCattle(x) & ArtificiallySelected(x))", "score": 0}
{"id": "folio_validation_407", "prediction": "exists x.(HackerCattle(x) & ArtificiallySelected(x))", "score": 0}
{"id": "folio_validation_408", "prediction": "all x.(Auroch(x) -> Extinct(x))", "score": 0}
{"id": "folio_validation_408", "prediction": "all x.(Auro(x) -> Extinct(x))", "score": 0}
{"id": "folio_validation_408", "prediction": "all x.(Aurochs(x) -> Extinct(x))", "score": 0}
{"id": "folio_validation_408", "prediction": "all x.(Aurococcus(x) -> Extinct(x))", "score": 0}
{"id": "folio_validation_408", "prediction": "All x.(Auroch(x) -> Extinct(x))", "score": -1}
{"id": "folio_validation_408", "prediction": "all x.(Auchs(x) -> Extinct(x))", "score": 0}
{"id": "folio_validation_408", "prediction": "all x.(Auerophic(x) -> Extinct(x))", "score": 0}
{"id": "folio_validation_409", "prediction": "all x.(Student(x) -> Human(x))", "score": 0}
{"id": "folio_validation_410", "prediction": "all x.(Studies(x) -> Student(x))", "score": 0}
{"id": "folio_validation_411", "prediction": "all x.(Person(x) -> (Studies(x) | Teaches(x)))", "score": 0}
{"id": "folio_validation_411", "prediction": "all x.(Studies(x) | Teaches(x))", "score": 0}
{"id": "folio_validation_411", "prediction": "all x.(Person(x) -> (Studies(x) | teaches(x)))", "score": 0}
{"id": "folio_validation_411", "prediction": "all x.(Studies(x) | Taught(x))", "score": 0}
{"id": "folio_validation_411", "prediction": "exists x y.(Person(x) & Person(y) & (Studies(x) | Teachers(y)))", "score": 0}
{"id": "folio_validation_411", "prediction": "all x.((Person(x) & (Studies(x) | Teaches(x))) -> StudyOrTeaches(x))", "score": 0}
{"id": "folio_validation_411", "prediction": "exists x.(Person(x) & (Studies(x) | Taught(x)))", "score": 0}
{"id": "folio_validation_411", "prediction": "exists x.(Person(x) & (Studies(x) | Teaches(x)))", "score": 0}
{"id": "folio_validation_412", "prediction": "-(YoungPerson(x) & -Teaches(x))", "score": 0}
{"id": "folio_validation_412", "prediction": "-exists x.(Young(x) & Teaches(x))", "score": 0}
{"id": "folio_validation_412", "prediction": "-exists x.(YoungPerson(x) & Teaches(x))", "score": 0}
{"id": "folio_validation_412", "prediction": "-exists x.(YoungPerson(x) & DoesTeaches(x))", "score": 0}
{"id": "folio_validation_412", "prediction": "all x.(YoungPerson(x) -> -Teaches(x))", "score": 0}
{"id": "folio_validation_413", "prediction": "(-Teaches(Jerry) & -Manager(Jerry))", "score": 7}
{"id": "folio_validation_413", "prediction": "/(Jerry(Jerry) & -(Teaches(Jerry) & -Manager(Jerry)))", "score": -1}
{"id": "folio_validation_413", "prediction": "all x.(ZeroTeaches(x) & -Manager(x))", "score": 0}
{"id": "folio_validation_413", "prediction": "none of the above mentioned. Jerry.", "score": -1}
{"id": "folio_validation_413", "prediction": "Jerry -(Teaches(Jerry) | Manager(Jerry)))", "score": -1}
{"id": "folio_validation_413", "prediction": "(-Teaches(Jerry) | Manager(Jerry)))", "score": -1}
{"id": "folio_validation_413", "prediction": "-(Jerry(Jerry) & -Teaches(Jerry))", "score": 7}
{"id": "folio_validation_413", "prediction": "Jerry n(x) & -Tolerates(x) & -Manager(x))", "score": -1}
{"id": "folio_validation_413", "prediction": "Jerry isn’t a Teacher(Jerry) & -(Manager(Jerry) & -Teaches(Jerry)))", "score": -1}
{"id": "folio_validation_413", "prediction": "all x.(Jerry(x) -> (-Teaches(x) | Manager(x)))", "score": 0}
{"id": "folio_validation_413", "prediction": "-(Jerry(Jennifer) & -Still(Jerry))", "score": 0}
{"id": "folio_validation_413", "prediction": "all x.(Jerry(x) & -(Teaches(x) | Manager(x)))", "score": 7}
{"id": "folio_validation_413", "prediction": "(-(Jerry(Jerry) & -Teaches(Jerry)) | -Manager(Jerry)))", "score": -1}
{"id": "folio_validation_413", "prediction": "-(Jerry(Jerry) & -IsManager(Jerry))", "score": 0}
{"id": "folio_validation_414", "prediction": "all x.(Rose(x) -> (Young(x) | Student(x)))", "score": 0}
{"id": "folio_validation_414", "prediction": "(Young(Rose) | Student(Rose))", "score": 0}
{"id": "folio_validation_414", "prediction": "Rose exists x.(Year(x) | Student(x))", "score": -1}
{"id": "folio_validation_414", "prediction": "(Young(Rose) | Student(Rose)))", "score": -1}
{"id": "folio_validation_414", "prediction": "exists x.(Rose(x) & (Young(x) | Student(x)))", "score": 0}
{"id": "folio_validation_414", "prediction": "((Rose(rose) & Young(rose)) | Student(rose))", "score": 0}
{"id": "folio_validation_414", "prediction": "((Rose(Rose) & (Yet(Rose) | Student(Rose))))", "score": 0}
{"id": "folio_validation_414", "prediction": "(Rose(Rose) & (Young(Rose) | Student(Rose)))", "score": 0}
{"id": "folio_validation_414", "prediction": "Rose is (young(Rose) | Student(Rose)))", "score": -1}
{"id": "folio_validation_415", "prediction": "(Young(Jerry) & GrowsIn(Jerry))", "score": 0}
{"id": "folio_validation_415", "prediction": "Jerry is young.", "score": -1}
{"id": "folio_validation_415", "prediction": "Jerry has been spotted a while ago.", "score": -1}
{"id": "folio_validation_415", "prediction": "-(Jerry(Jerry) -> Young(Jerry))", "score": 0}
{"id": "folio_validation_415", "prediction": "all x.(Jerry(x) -> Young(x))", "score": 0}
{"id": "folio_validation_415", "prediction": "exists x.(Jerry(x) & Young(x))", "score": 0}
{"id": "folio_validation_415", "prediction": "(Young(Jerry) & Young(Jerry))", "score": 0}
{"id": "folio_validation_415", "prediction": "(Jerry isYoung(Jerry))", "score": -1}
{"id": "folio_validation_415", "prediction": "Jerry (Jordi) & Young(Jerry))", "score": -1}
{"id": "folio_validation_416", "prediction": "exists x.(Jerry(x) & -Young(x))", "score": 0}
{"id": "folio_validation_416", "prediction": "-Young(Jerry)", "score": 0}
{"id": "folio_validation_416", "prediction": "In his book Jerry does not look young.", "score": -1}
{"id": "folio_validation_416", "prediction": "-YearLike(Jerry)", "score": 0}
{"id": "folio_validation_416", "prediction": "(-Young(Jerry)", "score": -1}
{"id": "folio_validation_416", "prediction": "...IsYear(Jerry)", "score": -1}
{"id": "folio_validation_416", "prediction": "Jerry is notyoung(Jerry)", "score": -1}
{"id": "folio_validation_416", "prediction": "(-Young(Jerry))", "score": 0}
{"id": "folio_validation_416", "prediction": "(-young(Jerry))", "score": 0}
{"id": "folio_validation_416", "prediction": "is young.", "score": -1}
{"id": "folio_validation_416", "prediction": "the reason Jerry (theMother(Jerry) -> -Young(Jeff))", "score": -1}
{"id": "folio_validation_416", "prediction": "-YoungJerry(Jerry)", "score": 0}
{"id": "folio_validation_417", "prediction": "all x.(Rose(x) -> (Human(x) | Manager(x)))", "score": 1}
{"id": "folio_validation_417", "prediction": "exists x.(Rose(x) & (Human(x) | Manager(x)))", "score": 1}
{"id": "folio_validation_417", "prediction": "(Human(Rose) | Manager(Rose)))", "score": -1}
{"id": "folio_validation_417", "prediction": "(Human(Rose) | Manager(Rose))", "score": 1}
{"id": "folio_validation_418", "prediction": "(all x.(Rose(x) -> Human(x)) & all y.(Jerry(y) -> Manager(y)))", "score": 1}
{"id": "folio_validation_418", "prediction": "all x.((Rose(x) -> Human(x)) | Jerry(x) -> Manager(x))", "score": 1}
{"id": "folio_validation_418", "prediction": "(exists x.(Rose(x) & Human(x))) | exists y.(Jerry(y) & Manager(y))))", "score": -1}
{"id": "folio_validation_418", "prediction": "all x y.((Rose(x) & Jerry(y)) -> (Human(x) | Manager(y)))", "score": 1}
{"id": "folio_validation_418", "prediction": "(all x.(Rose(x) -> Human(x)) | All y.(Jerry(y) -> Manager(y))))", "score": -1}
{"id": "folio_validation_418", "prediction": "((Rose(Rose) & Human(Rose)) | Jerry(Jerry)))", "score": -1}
{"id": "folio_validation_418", "prediction": "(all x.(Rose(x) -> Human(x)) | (Jerry(x) -> Manager(x))))", "score": -1}
{"id": "folio_validation_418", "prediction": "((Rose(Rose) & Human(Rose)) | (Jerry(Jerry) & Manager(Jerry))))", "score": -1}
{"id": "folio_validation_418", "prediction": "(Anything(Rose,Human) | Anything(Jerry,Manager)))", "score": -1}
{"id": "folio_validation_418", "prediction": "(all x y.((Rose(x) & Human(x)) | ((Rose(y) & Manager(y)))))", "score": 1}
{"id": "folio_validation_418", "prediction": "(all x y.(Red(x) -> Human(x)) | (Jerry(y) -> Manager(y))))", "score": -1}
{"id": "folio_validation_419", "prediction": "(--> (Student(Rose) & Human(Rose)))", "score": -1}
{"id": "folio_validation_419", "prediction": "all x y.((Rose(x) & Jerry(y)) -> -Student(x) & Human(y))", "score": 0}
{"id": "folio_validation_419", "prediction": "((Solia(rose) & Jerry(jersey)) -> -Student(rose) & Human(jersey))", "score": 0}
{"id": "folio_validation_419", "prediction": "exists x.(Rose(x) & -(Student(x) & Human(x)))", "score": 0}
{"id": "folio_validation_419", "prediction": "-((Rose(Rose) & Jerry(Rose)) & Human(Rose))", "score": 0}
{"id": "folio_validation_419", "prediction": "(Insane(Rose,Student) & Insane(Rose,Human))", "score": 0}
{"id": "folio_validation_419", "prediction": "(-((Rose(rose) & Student(rose)) & -(Jerry(jersey) & Human(z))))", "score": 0}
{"id": "folio_validation_419", "prediction": "(False(Rose) -> Student(Rose) & False(Jeffrey))", "score": 0}
{"id": "folio_validation_419", "prediction": "(-(UseRed(Rose) & UseRed(Jerry)) -> Student(Rose) & UseRoseLikeHuman(Jerry)))", "score": -1}
{"id": "folio_validation_419", "prediction": "(-(Rose(Rose) & Jerry(Rose) & Human(Rose)))", "score": 0}
{"id": "folio_validation_419", "prediction": "all x.((Rose(x) & Jerry(x)) -> -Student(x) & Human(x))", "score": 0}
{"id": "folio_validation_419", "prediction": "all x.((Rose(x) -> Untrue(x) & Human(x))", "score": -1}
{"id": "folio_validation_419", "prediction": "(-(Student(Rose,Rose) & Human(Rose)) -> -Student(Rose))", "score": 0}
{"id": "folio_validation_419", "prediction": "is not true that Rose is a Student and Jerry is Human(Rose).", "score": -1}
{"id": "folio_validation_419", "prediction": "all x y.((Dot(x) & Rose(y) & Jerry(z)) -> (-Student(y) & Human(z)))", "score": 0}
{"id": "folio_validation_420", "prediction": "all x.((PublishingHouse(x) & TranslatesForeignLiterature(x)) -> NewVesselPress(x))", "score": 0}
{"id": "folio_validation_420", "prediction": "all x y.((NewVesselPress(x) & ForeignLiterature(y)) -> (PublishingHouse(x) & TranslatesToEnglish(x,y)))", "score": 0}
{"id": "folio_validation_420", "prediction": "(ResearchEdge(NewVesselPress) & SpecializesInTranslatingFrenchLiteraryIntoEnglish(NewVesselPress))", "score": 0}
{"id": "folio_validation_420", "prediction": "NewVesselPress is a publishinghouse & SpecializedInTranslatingForeignLiteratureIntoEnglish(NewVesselPress))", "score": -1}
{"id": "folio_validation_420", "prediction": "all x y.((NewVesselPress(x) & NewForeignLiterature(y)) -> TranslatesIntoEnglisch(x,y))", "score": 0}
{"id": "folio_validation_420", "prediction": "All x.((NewVesselPress(x) & TranslatesFrenchLiterature(x) & TranslatesEnglishIntoEnglish(x)) -> SpecializesInForeignLiterature(x))", "score": -1}
{"id": "folio_validation_420", "prediction": "all x y z.((NewVesselPress(x) & ForeignLiteracy(y) & EnglishLanguage(z)) -> (PublishingHouse(x) & SpezializesInTranslating(x,y,z)))", "score": 0}
{"id": "folio_validation_420", "prediction": "(NewVesselPress(NewVesselPress) & TranslatesForeignLiteratureIntoEnglish(NewVesselPress))", "score": 0}
{"id": "folio_validation_420", "prediction": "all x.(NewVesselPress(x) -> (PublishingHouse(x) & SpecializesInTranslatingFrenchLiterature(x,English)))", "score": 0}
{"id": "folio_validation_420", "prediction": "All x y.((NewVesselPress(x) & ForeignLiterature(y)) -> (PublishingHouse(x) & SpecializesInTranslatingIntoEnglish(x,y)))", "score": -1}
{"id": "folio_validation_420", "prediction": "all x y z.((NewVesselPress(x) & PublishingHouse(y) & ForeignLiterary(z)) -> TranslatesIntoEnglish(y,z))", "score": 0}
{"id": "folio_validation_420", "prediction": "All x.(NewVesselPress(x) -> (PublishingHouse(x) & SpecializesInTranslatingFrenchLiterary(x)))", "score": -1}
{"id": "folio_validation_420", "prediction": "all x y z.((NewVesselPress(x) & ForeignLanguage(y) & EnglishLocation(z)) -> SpecializesInTranslating(x,y,z))", "score": 0}
{"id": "folio_validation_420", "prediction": "NewVesselPress.com (PublishingHouse(x) & TranslatesFrenchLiteratureIntoEnglish(x))", "score": -1}
{"id": "folio_validation_420", "prediction": "all x.(NewVesselPress(x) -> (PublishingHouse(x) & SpecializesInTranslatingForeignLiterature(x) & SpecializesInEngland(x)))", "score": 0}
{"id": "folio_validation_420", "prediction": "All x.(NewVesselPress(x) -> (PublishingHouse(x) & TranslatesFrenchLiterature(x) & IntoEnglish(x)))", "score": -1}
{"id": "folio_validation_421", "prediction": "all x.(NewVesselPressPublishedBooks(x) -> InEnglish(x))", "score": 0}
{"id": "folio_validation_421", "prediction": "all x.(PublishedBook(x) -> English(x))", "score": 0}
{"id": "folio_validation_421", "prediction": "all x.((NewVesselPress(x) & PublishedBook(x)) -> EnglishIn(x))", "score": 0}
{"id": "folio_validation_421", "prediction": "all x.(PublishedBook(x) -> (NewVesselPressPublishes(x) & InEnglish(x)))", "score": 0}
{"id": "folio_validation_421", "prediction": "all x.(NewVesselPress(x) -> PublishedBooks(x))", "score": 0}
{"id": "folio_validation_421", "prediction": "all x.(PublicNewVesselPress(x) -> -OfferedInAnglish(x))", "score": 0}
{"id": "folio_validation_421", "prediction": "all x.((NewVesselPress(x) & PublishedBook(x)) -> English(x))", "score": 0}
{"id": "folio_validation_421", "prediction": "all x.(PublishedBooks(x) -> (InEnglish(x) | PublishedBooksInEnglish(x)))", "score": 0}
{"id": "folio_validation_421", "prediction": "all x.(PublishedBooks(x) -> NewVesselPress(x))", "score": 0}
{"id": "folio_validation_421", "prediction": "all x.(PublishedBook(x) -> NewVesselPress(x))", "score": 0}
{"id": "folio_validation_421", "prediction": "all x.(NewVesselPress(x) -> PublishedBooksInEnglish(x))", "score": 0}
{"id": "folio_validation_421", "prediction": "all x.(PublishedByNewVesselPress(x) -> InEnglish(x))", "score": 0}
{"id": "folio_validation_421", "prediction": "all x.(NewVesselPress(x) -> BooksInEnglish(x))", "score": 0}
{"id": "folio_validation_421", "prediction": "all x.(publishedByNewVesselPress(x) -> InEnglish(x))", "score": 0}
{"id": "folio_validation_422", "prediction": "all x.(NeapolitanChronicles(x) -> (PublishedByNewVesselPress(x) & IncludesBook(x)))", "score": 0}
{"id": "folio_validation_422", "prediction": "NeapolitanChronicles(NeapolitanPress) & NewVesselPress(NeapolitanPress))", "score": -1}
{"id": "folio_validation_422", "prediction": "all x.(NeapolitanChronicles(x) -> PublishedByNewVesselPress(x))", "score": 0}
{"id": "folio_validation_422", "prediction": "NeapolitanChronicles(n))", "score": -1}
{"id": "folio_validation_422", "prediction": "The NeapolitanChronicles(n) -> PublishedByNewVesselPress(n))", "score": -1}
{"id": "folio_validation_422", "prediction": "NeapolitanChronicles (neapolitan) by NewVesselPress(n))", "score": -1}
{"id": "folio_validation_422", "prediction": "(WelcomeToNewVesselPress(NeapolitanChronicles))", "score": 0}
{"id": "folio_validation_422", "prediction": "NeapolitanChronicles(n) & PublishedByNewVesselPress(w))", "score": -1}
{"id": "folio_validation_422", "prediction": "all x.(NEapolitanChronicles(x) -> PublishedByNewVesselPress(x))", "score": 0}
{"id": "folio_validation_422", "prediction": "(NeapolitanChronicles(n) & NewVesselPress(v) & PublishedBy(n,v))", "score": 0}
{"id": "folio_validation_422", "prediction": "*NeapolitanClosures(NeapolitanHonests) & NewVesselPress(NewVesselPress)", "score": 0}
{"id": "folio_validation_422", "prediction": "all x y.((Book(x) & NewVesselPress(y)) -> NeapolitanChronicles(x))", "score": 0}
{"id": "folio_validation_422", "prediction": "all x.(NeapolitanCreek(x) -> PublishedByNewVesselPress(x))", "score": 0}
{"id": "folio_validation_422", "prediction": "all x.(NeapolitanChronicles(x) -> (BookPublishedByNewVesselPress(x)))", "score": 0}
{"id": "folio_validation_422", "prediction": "thebookNeapolitanChronicles(NeapolitanPuppets) & PublishedByNewVesselPress(NeapolitanPuppets))", "score": -1}
{"id": "folio_validation_423", "prediction": "(English(NeapolitanChronicles) & TranslatedFromItalian(NeapolitanChronicles))", "score": 0}
{"id": "folio_validation_423", "prediction": "(TranslatedFromItalian(NeapolitanChronicles) & TranslatedFromItalian(NeapolitanChronicles))", "score": 0}
{"id": "folio_validation_423", "prediction": "(LatinOfNeapolitanChronicles(Neapolitan) & TranslatedFromItalian(Neapolitan))", "score": 0}
{"id": "folio_validation_423", "prediction": "Originally translated from Italian.", "score": -1}
{"id": "folio_validation_423", "prediction": "[neapolitanChronicles(n) & TranslatedFromItalian(n))", "score": -1}
{"id": "folio_validation_423", "prediction": "(Protocoles(NeapolitanChronicles) & TranslatedFromItalian(NeapolitanChronicles))", "score": 0}
{"id": "folio_validation_423", "prediction": "all x.(NeapolitanChronicles(x) -> TranslatedFromItalian(x))", "score": 0}
{"id": "folio_validation_423", "prediction": "(InitiatedFromItalian(NeapolitanChronicles))", "score": 0}
{"id": "folio_validation_423", "prediction": "Almost all x.(NeapolitanChronicles(x) -> TranslatedFromItalian(x))", "score": -1}
{"id": "folio_validation_423", "prediction": "(NeapolitanChronicles(n) & TranslatedFromItalian(n))", "score": 0}
{"id": "folio_validation_423", "prediction": "(English: NeapolitanChronicle(n) | TranslatedFromItalian(n)))", "score": -1}
{"id": "folio_validation_423", "prediction": "NeapolitanChronicles was translated from Italian.", "score": -1}
{"id": "folio_validation_423", "prediction": "all x y.((NeapolitanChronicle(x) & Italian(y)) -> TranslatedFrom(x,y))", "score": 0}
{"id": "folio_validation_423", "prediction": "(All x.(NeapolitanChronicles(x) -> TranslatedFromItalian(x)))", "score": -1}
{"id": "folio_validation_423", "prediction": "(Newsletter(NeapolitanChronicles) & TranslatedFromItalian(NeapolitanChronicles))", "score": 0}
{"id": "folio_validation_424", "prediction": "all x y.((Book(x) & NewVesselPress(y)) -> PalaceOfFlies(x))", "score": 0}
{"id": "folio_validation_424", "prediction": "all x.(PalaceOfFlies(x) -> PublishedByNewVesselPress(x))", "score": 0}
{"id": "folio_validation_424", "prediction": "All x.(PalaceOfFlies(x) -> PublishedByNewVesselPress(x))", "score": -1}
{"id": "folio_validation_424", "prediction": "all x.(PalastOfFlies(x) -> PublishedByNewVesselPress(x))", "score": 0}
{"id": "folio_validation_424", "prediction": "all x.(OfFlies(x) -> PublishedByNewVesselPress(x))", "score": 0}
{"id": "folio_validation_424", "prediction": "all x.((Book(x) & NewVesselPress(x)) -> PalaceOfFlies(x))", "score": 0}
{"id": "folio_validation_424", "prediction": "the Book published by NewVesselPress(PalaceOfFlies)", "score": -1}
{"id": "folio_validation_424", "prediction": "all x y.((PalaceOfFlies(x) & NewVesselPress(y)) -> PublishedBy(x,y))", "score": 0}
{"id": "folio_validation_424", "prediction": "PalaceOfFlies is a book published by NewVesselPress.", "score": -1}
{"id": "folio_validation_424", "prediction": "All x.((Book(x) & PublishedByNWVesselPress(x)) -> PalaceOfFlies(x))", "score": -1}
{"id": "folio_validation_425", "prediction": "(EnglishBook(NeapolitanChronicles) & Contains(NeapolitanChronicles))", "score": 0}
{"id": "folio_validation_425", "prediction": "(EnglishBook(NeapolitanChronicles) & NeapolitanChronicles(NeapolitanChronicles))", "score": 0}
{"id": "folio_validation_425", "prediction": "all x.(NeapolitanChronicles(x) -> EnglishBook(x))", "score": 0}
{"id": "folio_validation_425", "prediction": "NeapolitanChronicles(x) & EnglishBook(x))", "score": -1}
{"id": "folio_validation_425", "prediction": "NeapolitanChronicles(e) & EnglishBook(e) & Originally WrittenIn(e,Of(d,a,e))", "score": -1}
{"id": "folio_validation_425", "prediction": "NeapolitanChronicles (ENLJH) - EnglishBook(ENLJH))", "score": -1}
{"id": "folio_validation_425", "prediction": "NuevopolitanChronicles(x) -> EnglishBook(x))", "score": -1}
{"id": "folio_validation_425", "prediction": "NeapolitanChronicles.(Book(x) & English(x))", "score": -1}
{"id": "folio_validation_425", "prediction": "NeapolitanChronicles.com is a English Book.", "score": -1}
{"id": "folio_validation_425", "prediction": "NeapolitanChronicles(n) -> EnglishBook(n))", "score": -1}
{"id": "folio_validation_425", "prediction": "The New York Times Book of Culture (NeapolitanChronicles(Neapolitan) & EnglishBook(Neapolitan))", "score": -1}
{"id": "folio_validation_425", "prediction": "(EnglandBook(NeapolitanChronicles) & RequiresEnglish(n))", "score": 0}
{"id": "folio_validation_425", "prediction": "NeapolitanChronicles.isEnglishBook(x) & PublishedInEnglish(x))", "score": -1}
{"id": "folio_validation_426", "prediction": "all x.(HarryPotter(x) -> PublishedByNewVesselPress(x))", "score": 0}
{"id": "folio_validation_426", "prediction": "Harry Potter was published by NewVesselPress.", "score": -1}
{"id": "folio_validation_426", "prediction": "all x y.((HarryPotter(x) & NewVesselPress(y)) -> PublishedBy(x,y))", "score": 0}
{"id": "folio_validation_426", "prediction": "all x.( HarryPotter(x) -> PublishedByNewVesselPress(x))", "score": 0}
{"id": "folio_validation_426", "prediction": "All x.(HarryPotter(x) -> PublishedByNewVesselPress(x))", "score": -1}
{"id": "folio_validation_426", "prediction": "(PublishedByNewVesselPress(HarryPotter))", "score": 0}
{"id": "folio_validation_426", "prediction": "Harry Potter (Harry Potter(Harry)) & PublishedByNewVesselPress(Harry Potter,NewVesselPress))", "score": -1}
{"id": "folio_validation_426", "prediction": "In 2015, Harry Potter was published by NewVesselPress.", "score": -1}
{"id": "folio_validation_426", "prediction": "(PublishedByNewVesselPress(Harry Potter))", "score": -1}
{"id": "folio_validation_427", "prediction": "In italian, PalaceOfFlies (PalaceOfFlies) – TranslatedFromItalian.", "score": -1}
{"id": "folio_validation_427", "prediction": "the PalaceOfFlies was translated from Italian.", "score": -1}
{"id": "folio_validation_427", "prediction": "(TranslatableFromItalian)", "score": 0}
{"id": "folio_validation_427", "prediction": "The PalaceOfFlies was translated from Italian.", "score": -1}
{"id": "folio_validation_427", "prediction": "The translation from Italian for PalaceOfFlies (PalastOfFlies))", "score": -1}
{"id": "folio_validation_427", "prediction": "All x y.((PalastOfFlies(x) & Italian(y)) -> TranslatedFrom(x,y))", "score": -1}
{"id": "folio_validation_427", "prediction": "The PalaceOfFlies was translated to Italian.", "score": -1}
{"id": "folio_validation_427", "prediction": "all x.(PalaceOfFlies(x) -> TranslatedFromItalian(x))", "score": 0}
{"id": "folio_validation_427", "prediction": "PalaceOfFlies (IndonesianEnglishTranslation(PalaceOfFlies))", "score": 0}
{"id": "folio_validation_427", "prediction": "PalazzoOfFlies (PalastOfFlies) & TranslatedFromItalian(PalastOfFlies))", "score": -1}
{"id": "folio_validation_427", "prediction": "All x.(PalaceOfFlies(x) -> TranslatedFromItalian(x))", "score": -1}
{"id": "folio_validation_427", "prediction": "-translatableFromItalian(PalaceOfFlies)", "score": 0}
{"id": "folio_validation_427", "prediction": "The translation from Italian(PalaceOfFlies)", "score": -1}
{"id": "folio_validation_427", "prediction": "(TranslatedFromItalian(PalestineOfFlies))", "score": 0}
{"id": "folio_validation_427", "prediction": "(InitiativeTranslatedFrom(PalaceOfFlies))", "score": 0}
{"id": "folio_validation_427", "prediction": "(PortalOfFlies(Palazzo) -> TranslatedFromItalian(Palazzo))", "score": 0}
{"id": "folio_validation_428", "prediction": "all x.(OwnsLargeDesktopMonitorAtHome(x) -> WorkRegularlyAndOftenAtHome(x))", "score": 0}
{"id": "folio_validation_428", "prediction": "all x.((Person(x) & OwnsLargeDesktopMonitor(x)) -> (WorksRegularly(x) & WorksOfficiouslyAtHome(x)))", "score": 0}
{"id": "folio_validation_428", "prediction": "all x.(OwnsLargeDesktopMonitorAtHome(x) -> WorksRegularlyAndOftenAtHome(x))", "score": 0}
{"id": "folio_validation_428", "prediction": "all x.((Person(x) & LargeDesktopMonitor(x)) -> WorksRegularly(x) & WorksOfficely(x))", "score": 0}
{"id": "folio_validation_428", "prediction": "all x.((Person(x) & OwnsLargeDesktopMonitor(x,home)) -> (WorksRegularly(x) & WorksOftenAtHome(x)))", "score": 0}
{"id": "folio_validation_428", "prediction": "all x.((People(x) & LargeDesktopMonitor(x) & AtHome(x)) -> WorkRegularlyAndOftenAtHome(x))", "score": 0}
{"id": "folio_validation_428", "prediction": "all x y.((Person(x) & SmallDesktopMonitor(x) & Owns(x,y)) -> WorksRenuouslyAndOftenAtHome(x))", "score": 0}
{"id": "folio_validation_428", "prediction": "all x.(HasLargeDesktopMonitor(x) -> (WorksRegularlyAndOftenAtHome(x)))", "score": 0}
{"id": "folio_validation_428", "prediction": "all x.((Homeowner(x) & LargeDesktopMonitor(x)) -> (WorksRegularly(x) & WorksOtherWorthy(x)))", "score": 0}
{"id": "folio_validation_428", "prediction": "all x.((Person(x) & LargeDesktopMonitor(x) & AtHome(x)) -> WorksRegularlyAndOftenAtHome(x))", "score": 0}
{"id": "folio_validation_428", "prediction": "all x.((OwnsLargeDesktopMonitor(x) & Home(x)) -> (WorkRegularly(x) & WorkOftenAtHome(x)))", "score": 0}
{"id": "folio_validation_428", "prediction": "all x.((PeopleOwnLargeDesktopMonitor(x) & AtHome(x)) -> WorkRegularlyAndFrequently(x))", "score": 0}
{"id": "folio_validation_428", "prediction": "all x.((OwnsLargeDesktopMonitor(x) & AtHome(x)) -> WorksRegularlyAndOftenAtHome(x))", "score": 0}
{"id": "folio_validation_428", "prediction": "all x.((Person(x) & LargeDesktopMonitor(x) & Home(x)) -> WorksRegularlyAndOftenAtHome(x))", "score": 0}
{"id": "folio_validation_428", "prediction": "all x.(Owns(x,(LargeDesktopMonitor(x) & Home(x)) -> WorkRegularlyAndFrequently(x))", "score": -1}
{"id": "folio_validation_428", "prediction": "all x.((Person(x) & LargeDesktopMonitor(x)) -> (WorkRegularly(x) & WorkOfOften(x)))", "score": 0}
{"id": "folio_validation_429", "prediction": "all x.((Person(x) & FullyStockedAndImpressiveHomeOffice(x)) -> OwnsLargeDesktopMonitor(x))", "score": 0}
{"id": "folio_validation_429", "prediction": "all x.((Person(x) & FullyStockedHomeOffice(x) & ImpressiveHomeOffice(x)) -> OwnsLargeDesktopMonitor(x))", "score": 0}
{"id": "folio_validation_429", "prediction": "all x.((Person(x) & FullyStampedHomeOffice(x) & ImpressiveHomeOffice(x)) -> OwnsLargeDesktopMonitor(x))", "score": 0}
{"id": "folio_validation_429", "prediction": "all x.((Person(x) & FullyStowedHomeOffice(x) & ImpressiveHomeOffice(x)) -> OwnsLargeDesktopMonitor(x))", "score": 0}
{"id": "folio_validation_429", "prediction": "all x.((Person(x) & FullystockedHomeOffice(x) & ImpressiveHomeOffice(x)) -> HasLargeDesktopMonitor(x))", "score": 0}
{"id": "folio_validation_429", "prediction": "all x.((Person(x) & FullySpilledAndImpressiveHomeOffice(x)) -> HasLargeDesktopMonitor(x))", "score": 0}
{"id": "folio_validation_429", "prediction": "all x.((Person(x) & FullyStokedHomeOffice(x) & ImpressiveHomeOffice(x)) -> OwnsLargeDesktopMonitor(x))", "score": 0}
{"id": "folio_validation_429", "prediction": "all x.((Person(x) & FullyStandardizedAndImpressiveHomeOffice(x)) -> OwnsLargeDesktopMonitor(x))", "score": 0}
{"id": "folio_validation_429", "prediction": "all x.((Person(x) & FullySizedHomeOffice(x) & ImpressiveHomeOffice(x)) -> LivesLargeDesktopMonitor(x))", "score": 0}
{"id": "folio_validation_429", "prediction": "all x.((Person(x) & FullyStandardHomeOffice(x) & ImpressiveHomeOffice(x)) -> OwnsLargeDesktopMonitorAtHome(x))", "score": 0}
{"id": "folio_validation_429", "prediction": "all x.((AsKnew(x) & FullyStampedAndImpressiveHomeOffice(x)) -> (OwnsLargeDesktopMonitor(x)))", "score": 0}
{"id": "folio_validation_429", "prediction": "all x.((Person(x) & FullyStockagedHomeOffice(x) & ImpressiveHomeOffice(x)) -> OwnsLargeDesktopMonitor(x))", "score": 0}
{"id": "folio_validation_429", "prediction": "all x.((Person(x) & FullyStoppedAndImpressiveHomeOffice(x)) -> OwnsLargeDesktopMonitor(x))", "score": 0}
{"id": "folio_validation_429", "prediction": "all x.((Person(x) & FullyStocked(x) & ImpressiveHomeOffice(x)) -> OwnerOfLargeDesktopMonitor(x))", "score": 0}
{"id": "folio_validation_429", "prediction": "all x.((Person(x) & FullyStayedAndImpressiveHomeOffice(x)) -> (HasLargeDesktopMonitor(x) & Owns(x,Home)))", "score": 0}
{"id": "folio_validation_430", "prediction": "all x y.((WorksRegularly(x) & OftenAtHome(y)) -> SpendsFreeTimeTidyingAndOrganizingSpaces(x,y))", "score": 0}
{"id": "folio_validation_430", "prediction": "all x y z.((Person(x) & WorkRegularly(x) & Home(y) & Homeowner(z)) -> (StylishesSpaces(x,y,z) & OrganisesSpaces(x,y,z)))", "score": 0}
{"id": "folio_validation_430", "prediction": "all x.((WorksRegularly(x) & WorkesAtHome(x)) -> SpendsFreeTimeTidyingSpaces(x))", "score": 0}
{"id": "folio_validation_430", "prediction": "all x.((WorksRegularlyAndOftenAtHome(x)) -> SpendsFreeTimeTidyingAndOrganizingSpaces(x))", "score": 0}
{"id": "folio_validation_430", "prediction": "all x y.((WorksRegularly(x) & OftenAtHome(x)) -> (SpoilsFreeTime(x,y) & CleansSpacesInHome(y) & OrganizationsSpaces(y)))", "score": 0}
{"id": "folio_validation_430", "prediction": "all x.((WorksRegularly(x) & OftenAtHome(x)) -> SpendsFreeTimeTidyingAndOrganizingSpaces(x))", "score": 0}
{"id": "folio_validation_430", "prediction": "all x.(WorksRegularlyAndOfOftenAtHome(x) -> SpendsFreeTimeTidyingAndOrganizingSpacesInHome(x))", "score": 0}
{"id": "folio_validation_430", "prediction": "all x.((WorksRegularlyAndAtHome(x) & SpendsFreeTimeTidilyingAndOrganizingSpaces(x)) -> SpendsFreeTimeStructuringAndOrganizingSpaces(x))", "score": 0}
{"id": "folio_validation_430", "prediction": "all x.(WorksRegularlyAndOfOftenAtHome(x) -> SpendsFreeTimeTidyingAndOrganizingSpaces(x))", "score": 0}
{"id": "folio_validation_430", "prediction": "all x.(WorkRegularlyAndOrganizedHome(x) -> SpendFreeTimeTidyingOrOrganizingSpaces(x))", "score": 0}
{"id": "folio_validation_430", "prediction": "all x.((WorksRegularlyAndOftenAtHome(x)) -> SpendsFreeTimeTiefingAndOrganizingSpaces(x))", "score": 0}
{"id": "folio_validation_430", "prediction": "all x.((People(x) & WorkRegularly(x) & SeemsToConduct(x)) -> SpendsFreeTimeTidyingAndOrganizingSpacesInHomes(x))", "score": 0}
{"id": "folio_validation_430", "prediction": "all x.(WorksRegularlyAndOftenAtHome(x) -> SpendsFreeTimeTidyingAndOrganizingSpacesInHomes(x))", "score": 0}
{"id": "folio_validation_430", "prediction": "all x.((WorksRegularly(x) & WorksAtHome(x)) -> SpendsFreeTimeTidyingAndOrganizingSpaces(x))", "score": 0}
{"id": "folio_validation_431", "prediction": "all x.((WorksRegularly(x) & OftenAtHome(x)) -> VisitsOfficeSupplyStoreRegularly(x))", "score": 0}
{"id": "folio_validation_431", "prediction": "all x.((WorksRegularly(x) & WorkesInHome(x)) -> VisitsOfficeSupplyStore(x))", "score": 0}
{"id": "folio_validation_431", "prediction": "all x.((Person(x) & WorkRegularly(x) & WorkOfHome(x)) -> VisitsOfficeSupplyStoreRegularly(x))", "score": 0}
{"id": "folio_validation_431", "prediction": "all x.((WorksRegularly(x) & WorkesAtHome(x)) -> VisitsOfficeSupplyStoreRegularly(x))", "score": 0}
{"id": "folio_validation_431", "prediction": "all x y z.((WorksRegularly(x) & OverDrive(y) & WorkAtHome(z)) -> VisitsOfficeSupplyStoreRegularly(x,y,z))", "score": 0}
{"id": "folio_validation_431", "prediction": "all x y.((WorksRegularly(x) & WorksOfHome(y)) -> VisitsOfficeSupplyStoreRegularly(x))", "score": 0}
{"id": "folio_validation_431", "prediction": "all x.(WorkRapidAndRegular(x) -> VisitsOfficeSupplyStore(x))", "score": 0}
{"id": "folio_validation_431", "prediction": "all x.(WorkRegularlyAndManyAtHome(x) -> VisitsOfficeSupplyStoreRegularly(x))", "score": 0}
{"id": "folio_validation_431", "prediction": "all x.((workedRegularly(x) & OftenAtHome(x)) -> VisitsOfficeSupplyStoreRegularly(x))", "score": 0}
{"id": "folio_validation_431", "prediction": "all x.((WorksRegularly(x) & WorksAtHome(x)) -> VisitsOfficeSupplyStoreRegularly(x))", "score": 0}
{"id": "folio_validation_431", "prediction": "all x.((WorksRegularly(x) & WorksOfHome(x)) -> VisitsOfficeSupplyStoreRegularly(x))", "score": 0}
{"id": "folio_validation_431", "prediction": "all x.((Man(x) & WorksRegularly(x) & OftenAtHome(x)) -> VisitsOfficeSupplyStoreRegularly(x))", "score": 0}
{"id": "folio_validation_432", "prediction": "all x.((Person(x) & SpendsFreeTimeTidyingAndOrganizingSpaces(x)) -> -BreathesLateAndWarmingAfterPaint(x))", "score": 0}
{"id": "folio_validation_432", "prediction": "all x y.((Nature(x) & SpendsFreeTimeTidilyAndOrganizesSpaces(x) & SleepsLate(x) & WakesUpEachDay(x)) -> -TidyAndOrganizesSpaces(x))", "score": 0}
{"id": "folio_validation_432", "prediction": "all x.(TidyAndOrganizeSpaces(x) ->(-FailToGoToBed(x) & WakeUpEveryDayAfterMaintaneousPM(x)))", "score": 0}
{"id": "folio_validation_432", "prediction": "all x.((Person(x) & SpendsFreeTimeTidyingAndOrganizingSpaces(x)) -> (-GoToBedLate(x) & WakeUpEveryDayAfterPaint(x)))", "score": 0}
{"id": "folio_validation_432", "prediction": "all x.((People(x) & SpendsFreeTimeTidyingTheSpaces(x) & OrganizingSpaces(x)) -> -(goesToBabyLater(x) & wakesUpAfterMeal(x)))", "score": 0}
{"id": "folio_validation_432", "prediction": "all x.((People(x) & SpendsFreeTimeTidyingAndOrganizingSpaces(x) & -GoToBedLatEachDayAfterPaint(x)) -> NoWakeUpEachDayAfterPaunch(x))", "score": 0}
{"id": "folio_validation_432", "prediction": "all x.(DecorateAndOrganizeSpaces(x) -> (-IsFreeTimeStructure(x) & IsOrganized(x) & SleepAtLate(x) & WakeUpEveryDayAfterMoon(x)))", "score": 0}
{"id": "folio_validation_432", "prediction": "all x.((Person(x) & SpendsFreeTimeTidyingAndOrganizingSpaces(x)) -> -(GoToBedLater(x) & WakeUpEveryDayAfterPaint(x)))", "score": 0}
{"id": "folio_validation_432", "prediction": "all x.((Person(x) & SpendsFreeTimeTidyingAndOrganizingSpaces(x)) -> -(GoesToBedLast(x) & WakesUpEveryDay(x)))", "score": 0}
{"id": "folio_validation_432", "prediction": "all x y z.((Person(x) & SpendsFreeTimeDeciding(x,y) & Spaces(y) & Decorates(z)) -> -(GoesToBedLate(x) & WakesUpEveryDayAfterAmortization(x)))", "score": 0}
{"id": "folio_validation_432", "prediction": "all x.((Baby(x) & SpendsFreeTimeTidyingAndOrganizingSpaces(x)) -> - (GoToBedLast(x) & WakeUpAfterPaint(x)))", "score": 0}
{"id": "folio_validation_432", "prediction": "all x y.((Person(x) & SpendsFreeTimeTidying(x) & SpendsFreeTimeOrganizingSpaces(x) & InHome(y,x)) -> -(GoesToBedLast(x) & WakesUpAfterMoon(x)))", "score": 0}
{"id": "folio_validation_432", "prediction": "all x y.(TidyInHome(x) & SpendSpendingFreeTime(x) & CleansingSpaces(x,y) & Organization(x,y)) -> (-GoToBedLast(x) & WakeUpAfterMorning(x)))", "score": -1}
{"id": "folio_validation_432", "prediction": "all x.(ConsumesFreeTimeTidyingAndOrganizingSpacesInHome(x) -> (-GoToBedLate(x) & WakeUpEveryDayAfterPaint(x)))", "score": 0}
{"id": "folio_validation_432", "prediction": "all x.((RentsFreeTime(x) & DutiesInHome(x) & OrganizesSpaces(x)) -> - (GoesToBedLater(x) & WakesUpAfterLunch(x))))", "score": -1}
{"id": "folio_validation_432", "prediction": "all x y.((Person(x) & FreeTime(y) & DullsAndOrganizesSpaces(x) & SpendsInHome(x,y)) -> -(GoesToBedLate(x) & WakesUpAfterAutumn(x)))", "score": 0}
{"id": "folio_validation_433", "prediction": "(all x.(Remy(x) -> (GoesToBedLate(x) & WakesUpAfterMorning(x) & SpendsFreeTimeTidyingSpacesInHome(x))) | (-GoesToBedLate(x) & WakesUpAfterMorning(x) & -SpoilsFreeTimeTidyingSpacesAndOrganizingSpacesInHome(x))))", "score": -1}
{"id": "folio_validation_433", "prediction": "(all x y.((Remy(x) & BedLay(x)) -> (GoesToBedLay(x) & WakesUpAfter00:00(x) & SpendsFreeTimeTidyingAndOrganizingSpaces(x))) | (-GoesToBedLay(y) & WakesUpAfter00:00(y) & -SpendsFreeTimeTidyingAndOrganizingSpaces(y) & KeepsTid0Un(y))))", "score": -1}
{"id": "folio_validation_433", "prediction": "(all x.(Remy(x) -> (BothGoesToBedLast(x) & WakesUpAfterMidnight(x) & SpendsFreeTimeTiffiningOrganizingSpaces(x))) | (-(Remy(x) & GoesToBedLast(x) & WakesUpAfterMidnight(x) & SpendsFreeTimeTiffiningOrganizingSpaces(x)))))", "score": -1}
{"id": "folio_validation_433", "prediction": "all x y z.((Remy(x) & BedLate(y) & WakesUpAfter(y,x) & Home(z)) -> (Rom(x) & (GoesToBedLate(x) & WakesUpAfter(x,y,z) & SpendsFreeTimeTidyingAndOrganizingSpaces(x,z)» | -Remy(x,y) & Home(y))))", "score": 0}
{"id": "folio_validation_433", "prediction": "either (Remy(Remy) & (GoesToBedLast(Remy) | WakesUpAfterLayout(Remy)) & SpendsFreeTimeTiffiningAndOrganizingSpaces(Remy)) | (-GosToBedLast(Remy) & WakesUpAfterLayout(Remy) & -SpoilsFreeTimeTiffiningAndOrganizingSpaces(Remy))))", "score": -1}
{"id": "folio_validation_433", "prediction": "all x.(Remy(x) -> ((GoesToBedLast(x) & WakesUpEveryDayAfter(x) & SpendsFreeTimeTidyingAndOrganizingSpacesInHome(x)) | (-GoesToBedLast(x) & WakesUpEveryDayAfter(x) & SpendsFreeTimeTidyingAndOrganizingSpacesInHome(x)))))", "score": -1}
{"id": "folio_validation_433", "prediction": "all x.(Remy(x) -> ((GoesToBedLast(x) & WakesUpAfterMoon(x) & SpendsFreeTimeTidyingSatellites(x)) | (-goToBedLast(x) & WakesUpAfterMoon(x) & SpendsFreeTimeTidyingSatellites(x)))))", "score": -1}
{"id": "folio_validation_433", "prediction": "(all x.(Remy(x) -> (GoesToBedLast(x) & WakesUpAfterPaint(x) & SpendsFreeTimeTiffiningAndOrganizingSpaeces(x))) | (-GoesToBedLast(x) & WakesUpAfterPaint(x) & -SpamsFreeTimeTiffiningAndOrganizingSpaecesInHome(x)))))", "score": -1}
{"id": "folio_validation_433", "prediction": "all x y.((Remy(x) & Bed(y)) -> ((GoesToBedLast(x) & WakesUpAfterPayday(x,y) & SpendsFreeTimeTidyingAndOrganizingSpaces(x,y)) | (-GoesToBedLast(x,y) & WakesUpAfterPayday(x,y) & -SponsorsFreeTimeTidlingAndOrganizingSpaces(x,y)))))", "score": -1}
{"id": "folio_validation_433", "prediction": "((BabyLay(Shutters(Rye): GoesToBedLay(Remy) & WakesUpAfterMoon(Remy)) | (-SticksAfterMoon(Remy) & WakesUpAfterMoon(Remy))))", "score": -1}
{"id": "folio_validation_433", "prediction": "all x.(Regy(x) & ((GoToBedLadies(x) & WakesUpAfterMoon(x) & SpendsFreeTimeTidyingAndOrganizingSpaces(x)) | (-GoToBedLadies(x) & WakeUpAfterMoon(x) & -SponsorsFreeTimeTidyingAndOrganizingSpaces(x)))))", "score": -1}
{"id": "folio_validation_433", "prediction": "((Remy(Remy) & BedLate(Remy) & WakesUpAfterPainting(Remy)) | (-Remy(Remy) & WakesUpAfterPainting(Remy,Painting) & SpendsFreeTimeTidyingSpaces(Remy,PaintingSpaces))))))", "score": -1}
{"id": "folio_validation_433", "prediction": "exists x.(Remy(x) & ((GoesToBedLay(x) & WakesUpAfterMorning(x) & SpendsFreeTimeDiyingAndOrganizingSpaces(x)) | (-GoesToBedLay(x) & WakesUpAfterMorning(x) & SpendsFreeTimeDiyingAndOrganizingSpaces(x)))))", "score": -1}
{"id": "folio_validation_433", "prediction": "(all x y.((Remy(x) & BedLate(y,x)) -> (GoesToBedLay(x) & WakesUpAfterMile(x) & SpendsFreeTimeTidyingAndOrganizingSpaces(x,y))) & ((Remy(x) & BedLate(x) & WakesUpAfterMile(x)) & -(Remy(y) & SpendsFreeTimeTidyingAndOrganizingSpaces(x,y))))))", "score": -1}
{"id": "folio_validation_433", "prediction": "(all x.(Remy(x) -> ((GoesToBedLay(x) & WakesUpAfterMeal(x) & SpendsFreeTimeTidyingSpaces(x)) | (-GoesToBedLay(x) & WakesUpAfterMeal(x) & SpendsFreeTimeTidyingSpaces(x)))))", "score": 0}
{"id": "folio_validation_433", "prediction": "all x.(Remy(x) -> ((GoesToBedLay(x) & WakesUpAftermidnight(x) & SpendsFreeTimeTiffiningAndOrganizingSpaces(x)) | (-GoToBedLay(x) & WakesUpAfterMitterday(x) & -SpoilsFreeTimeTiffiningAndOrganizingSpaces(x))))", "score": 0}
{"id": "folio_validation_434", "prediction": "VisitsOfficeSupplyStoreRegularly(Remy)", "score": 0}
{"id": "folio_validation_434", "prediction": "Remy visits the officesupplyStoreRegularly(Remy)", "score": -1}
{"id": "folio_validation_434", "prediction": "/Remy(Remy) -> VisitsOfficeSupplyStore(Roundly))", "score": -1}
{"id": "folio_validation_434", "prediction": "Remy visitsOfficeSupplyStoreStaff(Remy) & Regularly(remy))", "score": -1}
{"id": "folio_validation_434", "prediction": "Remy visitsOfficeSupplyStoreStandardsRegularly(Remy))", "score": -1}
{"id": "folio_validation_434", "prediction": "Remy visitedsOfficeSupplyStoreRegularly(Remy)", "score": -1}
{"id": "folio_validation_434", "prediction": "(Remy visitsOfficeSupplyStore(Remy,regularly))", "score": -1}
{"id": "folio_validation_434", "prediction": "all x y.((Remy(x) & OfficeSupplyStore(y)) -> VisitsRegularly(x,y))", "score": 0}
{"id": "folio_validation_434", "prediction": "Remy visitsOfficeSupplyStore(Remy)", "score": -1}
{"id": "folio_validation_434", "prediction": "Remy visits OfficeSupplyStore(Mrs.Merry) & Periodically(Mr.René))", "score": -1}
{"id": "folio_validation_434", "prediction": "(VisitsOfficeSupplyStore(Remy) & Regularly(Remy))", "score": 0}
{"id": "folio_validation_434", "prediction": "the officesupplyStore(Remy)", "score": -1}
{"id": "folio_validation_434", "prediction": "Remy visits the officeSupplyStoreRegularly(Remy,Express)", "score": -1}
{"id": "folio_validation_434", "prediction": "\"Tremmy(remy) visitsOfficeSupplyStore(remy))", "score": -1}
{"id": "folio_validation_434", "prediction": "Remy visitsOfficeSupplyStoreRegularly(Remy)", "score": -1}
{"id": "folio_validation_434", "prediction": "(Remy(Remy,OfficeSupplyStore) & VisitsRapidly(Remy,OfficeSupplementStore))", "score": 0}
{"id": "folio_validation_435", "prediction": "(CompletelySatedAndImpressiveHomeOffice(Remy) & VisitsOfficeSupplyStore(Remy))", "score": 0}
{"id": "folio_validation_435", "prediction": "(all x.(Remy(x) -> (FullySstocked(x) & ImpressiveHomeOffice(x) & VisitsOfficeSupplyStore(x))))", "score": 0}
{"id": "folio_validation_435", "prediction": "(RemyHasFullySaturatedHomeOffice(Remy) & ImpressiveHomeOffice(Remy) & VisitsOfficeSupplyStore(Remy))", "score": 0}
{"id": "folio_validation_435", "prediction": "all x.(Remy(x) -> (FullySpaciousMemorialOffice(x) & ImpressiveHomeOffice(x) & VisitsOfficeSupplyStore(x)))", "score": 0}
{"id": "folio_validation_435", "prediction": "all x.(Remy(x) -> (HasFullySuppliedAndIMpressiveHomeOffice(x) & VisitsOfficeSupplyStore(x)))", "score": 0}
{"id": "folio_validation_435", "prediction": "(all x y.((Remy(x) & FullyStall(x,y)) -> ImpressiveHomeOffice(x)) & RegularlyVisitsOfficeSupplyStore(y,z)))", "score": -1}
{"id": "folio_validation_435", "prediction": "all x.(Remy(x) -> (FullyStamped(x) & ImpressiveHomeOffice(x) & VisitsOfficeSupplyStore(x)))", "score": 0}
{"id": "folio_validation_435", "prediction": "all x.(Remy(x) -> (FullyStickledHomeOffice(x) & ImpressiveHomeOffice(x) & VisitsOfficeSupplyStore(x)))", "score": 0}
{"id": "folio_validation_435", "prediction": "all x.(Remy(x) -> (HasFullyStoked&ImpressiveHomeOffice(x) & VisitsOfficeSupplyStore(x)))", "score": 0}
{"id": "folio_validation_435", "prediction": "all x.(Remy(x) -> (FullyStoragedHomeOffice(x) & ImpressiveHomeOffice(x) & VisitsOfficeSupplyStore(x)))", "score": 0}
{"id": "folio_validation_435", "prediction": "((Remy(remy) & FullyStocked(remy) & ImpressiveHomeOffice(remy)) -> VisitsOfficeSupplyStore(remy)))", "score": -1}
{"id": "folio_validation_435", "prediction": "all x.(Remy(x) -> (InspirationalHomeOffice(x) & stocked (x) & RegularOfficeSupplyStore(x))))", "score": -1}
{"id": "folio_validation_435", "prediction": "all x y.((Remy(x) & OfficeSupplyStore(y)) -> (FullyStatched(x) & Impressive(x)) & RegularlyVisiting(x,y)))", "score": -1}
{"id": "folio_validation_435", "prediction": "all x.(Remy(x) -> (FullySaturatedAndImpressiveHomeOffice(x) & VisitsOfficeSupplyStore(x)))", "score": 0}
{"id": "folio_validation_435", "prediction": "((Remy(Remy) | OfficeSupplyStore(Remy)))", "score": 0}
{"id": "folio_validation_435", "prediction": "((Remy(remy) & FullyStashed(remy) & ImpressiveHomeOffice(remy)) & VisitsOfficeSupplyStore(remy))", "score": 0}
{"id": "folio_validation_436", "prediction": "all x.((Remy(x) & (GoesToBedLastAndWarmsAfterMound(x) | VisitsOfficeSupplyStore(x))) -> (-SpoilsFreeTimeTidyingAndOrganizingSpaces(x) & -AccommodatesFullyStoragedAndImpressiveHomeOffice(x)))", "score": 0}
{"id": "folio_validation_436", "prediction": "all x.((Remy(x) & (GoesToBedLast(x) & WakesUpAfterPaint(x)) | VisitsOfficeSupplyStoreRegularly(x))) -> (NecessarilySpaciousHomeOffice(x) & -SpaciousHomeOffice(x)))", "score": -1}
{"id": "folio_validation_436", "prediction": "all x.((Remy(x) & (GoesToBedLast(x) | WakesUpAfterMile(x)) | VisitsOfficeSupplyStore(x))) -> (-FreshStylingSpaces(x) & -FullyStuffedHomeOffice(x) & ImpressiveHomeOffice(x)))", "score": -1}
{"id": "folio_validation_436", "prediction": "all x.((Remy(x) & (GoesToBeedLast(x) | WakesUpAfterMeal(x)) | VisitsOfficeSupplyStore(x))) -> (-SpokenInHome(x) & -FullyStoddenAndImpressiveHomeOffice(x)))", "score": -1}
{"id": "folio_validation_436", "prediction": "all x y.((Remy(x) & (GoesToBedLast(x) | WakesUpAfterMeal(x)) | VisitsOfficeSupplyStore(x))) -> (-SpoisesFreeTime(x,y) & (ImpressiveHomeOffice(x,z) | FullyStockedHomeOffice(z)))))", "score": -1}
{"id": "folio_validation_436", "prediction": "all x.((Remy(x) & (GoesToBabyLast(x) | WakesUpEveryDayAtPawn(x))) | VisitsOfficeSupplyStore(x))) -> (-SpoilsFreeTime(x,y) & -Stylish(y) & ImpressiveHomeOffice(y)))", "score": -1}
{"id": "folio_validation_436", "prediction": "all x y z.((Remy(x) & BedLate(x) & WakesUpAfterMeal(x) & OfficeSupplyStore(y) & OpenOffice(z) & Visits(x,y)) -> (-Tidy(x,y) & FullStockagedHomeOffice(x,z) & ImpressiveHomeOffice(x,z)))", "score": 0}
{"id": "folio_validation_436", "prediction": "all x.((Remy-(BadTime(x) & (GoesToBedLate(x) | WakesUpAfterMoonAfterPM(x))) | VisitsOfficeSupplyStore(x)) -> (-FreeEarlyRotogy(x) & -FullyStocked(x) & -FullyImpressiveHomeOffice(x))))", "score": -1}
{"id": "folio_validation_436", "prediction": "all x.((Remy(x) & (GoesToBedLate(x) & WakesUpAfterMorning(x) | VisitsOfficeSupplyStoreRegularly(x))) -> (-TidysAway(x) & OpenSpaces(x) & -FullySaturatedHomeOffice(x) & ImpressiveHomeOffice(x)))", "score": 0}
{"id": "folio_validation_436", "prediction": "all x y.((Remy(x) & (PausesToBedLate(x,y) | SeeksOfficeSupplyStore(x,y))) -> ((FreeTimeTidying(x) & SpendsSpareTimeOrganizingSpaces(x) & -FullySaturatedHomeOffice(x) | ImpressiveHomeOffice(x))))", "score": 0}
{"id": "folio_validation_436", "prediction": "all x.((Remy(x) & (GoesToBedLate(x) & WakesUpAfterMorning(x) | VisitsOfficeSupplyStoreRegularly(x))) -> (-SpoilsFreeTimeTidyingOrOrganizingSpacesInHome(x) & -FullyStandardAndImpressiveHomeOffice(x)))", "score": 0}
{"id": "folio_validation_436", "prediction": "all x.((Remy(x) & (GoesToBedLast(x) | WakesUpAfterAutumn(x) | VisitsOfficeSupplyStore(x))) -> -((FreshStyling(x) & OrganizingSpaces(x) & FullyStained(x) & ImpressiveHomeOffice(x)))", "score": -1}
{"id": "folio_validation_436", "prediction": "all x.((Remy(x) & (SoaksToBedLast(x) | WakesUpEveryDayAfterNight(x)) | VisitsOfficeSupplyStoreRegularly(x))) -> (-SpoilsFreeTimeTippingAndOrganizingSpaces(x) & -FullySaturatedAndImpressiveHomeOffice(x)))", "score": -1}
{"id": "folio_validation_436", "prediction": "all x.((Rumy(x) & (GoesToBeefLay(x) | WakesUpAfter12(x)) | VisitsOfficeSupplyStore(x))) -> (RemysNoDespairs(x) & NoEnjoymentAndHomeOffice(x)))", "score": -1}
{"id": "folio_validation_436", "prediction": "all x.((Remy(x) & (GoesToBeefLate(x) | WakesUpAfterMoon(x)) | VisitsOfficeSupplyStoreRegularly(x))) -> (NoSpoilage(x) & NoFullyStayableHomeOffice(x)))", "score": -1}
{"id": "folio_validation_436", "prediction": "all x.((Remy(x) & (GoesToBedLater(x) | WakesUpAfterAutumn(x)) | VisitsOfficeSupplyStore(x))) -> (-SpoisesFreeTimeTidyingAndOrganizingSpaces(x) | FullyStandardAndImpressiveHomeOffice(x)))", "score": -1}
{"id": "folio_validation_437", "prediction": "all x.(Human(x) -> Mortal(x))", "score": 0}
{"id": "folio_validation_437", "prediction": "All x.(Human(x) -> Mortal(x))", "score": -1}
{"id": "folio_validation_437", "prediction": "all x.(Hur(x) -> Mortal(x))", "score": 0}
{"id": "folio_validation_438", "prediction": "all x.(Greek(x) -> Human(x))", "score": 0}
{"id": "folio_validation_438", "prediction": "all x.((Greek(x) & Human(x)) -> Human(x))", "score": 0}
{"id": "folio_validation_438", "prediction": "all x.(Grink(x) -> Human(x))", "score": 0}
{"id": "folio_validation_439", "prediction": "exists x.(Greek(x) & Mortal(x))", "score": 0}
{"id": "folio_validation_440", "prediction": "all x y.((Student(x) & Library(y) & WorksIn(x,y)) -> CSC.((ComputerScienceDepartment(y) | ComputerScienceDepartment(y))))", "score": -1}
{"id": "folio_validation_440", "prediction": "-exists x.(Student(x) & WorksInLibrary(x) & -Department(x) & ComputerScienceDepartment(x))", "score": 0}
{"id": "folio_validation_440", "prediction": "all x.((Student(x) & WorksInLibrary(x)) -> -ComputerScienceDepartment(x))", "score": 0}
{"id": "folio_validation_440", "prediction": "the Library.(WorksInLibrary(x) -> -ComputerScienceDepartment(x))", "score": -1}
{"id": "folio_validation_440", "prediction": "Es gibt keinen Student(s) & WorksInLibrary(s) & -(ComputerScienceDepartment(s) & -ComputerScience(s)))", "score": -1}
{"id": "folio_validation_440", "prediction": "all x.((Student(x) & WorksInLibrary(x)) -> ComputerScientificDepartment(x))", "score": 0}
{"id": "folio_validation_440", "prediction": "all x y.((Student(x) & WorksInLibrary(x,y)) -> NoComputerScienceDepartment(x))", "score": 0}
{"id": "folio_validation_440", "prediction": "all x.((Student(x) & WorkInLibrary(x)) -> -ComputerScientificDepartment(x))", "score": 0}
{"id": "folio_validation_440", "prediction": "-exists x.(Student(x) & WorksInLibrary(x) & ComputerScienceDepartment(x))", "score": 0}
{"id": "folio_validation_440", "prediction": "all x.((Student(x) & WorksInLibrary(x)) -> -ProvidesComputerScienceDepartment(x))", "score": 0}
{"id": "folio_validation_440", "prediction": "(-exists x.(Student(x) & WorksInLibrary(x)) & -ComputerScienceDepartment(x))", "score": 7}
{"id": "folio_validation_440", "prediction": "in this library.", "score": -1}
{"id": "folio_validation_440", "prediction": "all x.((Student(x) & WorksInLibrary(x)) -> -InComputerScienceDepartment(x))", "score": 0}
{"id": "folio_validation_441", "prediction": "all x.((Student(x) & PartTimeJob(x) & OccuredByUniversity(x)) -> WorksInLibrary(x))", "score": 0}
{"id": "folio_validation_441", "prediction": "all x.((Student(x) & PartTimeJobsOfferedByUniversity(x)) -> WorkInLibrary(x))", "score": 0}
{"id": "folio_validation_441", "prediction": "all x.((Student(x) & HavePartTimeJob(x) & OfferedByUniversity(x)) -> WorksInLibrary(x))", "score": 0}
{"id": "folio_validation_441", "prediction": "all x.((Student(x) & PartTimeJob(x) & OpenedByUniversity(x)) -> WorkInLibrary(x))", "score": 0}
{"id": "folio_validation_441", "prediction": "all x.((Student(x) & PartTimeJobsOfferedByUniversity(x)) -> WorksInLibrary(x))", "score": 0}
{"id": "folio_validation_441", "prediction": "all x.(Semi-TimeJob(x) -> WorkingInLibrary(x))", "score": -1}
{"id": "folio_validation_441", "prediction": "all x.((Student(x) & PartTimeJob(x) & OfferedByUniversity(x)) -> WorksInLibrary(x))", "score": 0}
{"id": "folio_validation_441", "prediction": "all x.((Student(x) & PartTimeJobOfferedByUniversity(x)) -> WorksInLibrary(x))", "score": 0}
{"id": "folio_validation_441", "prediction": "all x y.((Student(x) & PartTimeJob(y) & PresentedByU.K.U.K.((Student(x) & ServedByU.K.)) -> WorksInBibliotheque(x)))", "score": -1}
{"id": "folio_validation_441", "prediction": "all x.((Student(x) & HalfTimeJob(x) & OfferedByUniversity(x)) -> WorksInLibrary(x))", "score": 0}
{"id": "folio_validation_441", "prediction": "all x.((Student(x) & PartTimeJob(x) & OfferedByUniversity(x)) -> WorkInLibrary(x))", "score": 0}
{"id": "folio_validation_441", "prediction": "all x.((Student(x) & HasPartTimeJobsOffered(x)) -> WorksInLibrary(x))", "score": 0}
{"id": "folio_validation_441", "prediction": "all x.((Student(x) & PartTimeJobOfferedByUniversity(x)) -> WorkInLibrary(x))", "score": 0}
{"id": "folio_validation_441", "prediction": "all x y.((Student(x) & PartTimeJob(y) & OfferableByUniversity(x,y)) -> WorkInLibrary(x,y))", "score": 0}
{"id": "folio_validation_442", "prediction": "all x.(TakesDbossDatabaseCourses(x) -> ComputerScienceDepartment(x))", "score": 0}
{"id": "folio_validation_442", "prediction": "all x.(TakesOnlineDatabaseCourse(x) -> isAtComputerScienceDepartment(x))", "score": 0}
{"id": "folio_validation_442", "prediction": "all x.(TakesDatabaseCourse(x) -> ComputerScientificDepartment(x))", "score": 0}
{"id": "folio_validation_442", "prediction": "all x.(TakesDBCourses(x) -> ComputerScientificDepartment(x))", "score": 0}
{"id": "folio_validation_442", "prediction": "all x.((Student(x) & TakesDatabaseCourses(x)) -> ComputerScienceDepartment(x))", "score": 0}
{"id": "folio_validation_442", "prediction": "all x.(TakesDatabaseCourse(x) -> ComputerScienceDepartment(x))", "score": 7}
{"id": "folio_validation_442", "prediction": "all x.((Student(x) & TakesDatabaseCourSE)) -> ComputerScienceDepartment(x))", "score": -1}
{"id": "folio_validation_442", "prediction": "all x.((Student(x) & TakesDatabaseCourses(x)) -> ComputerScientificDepartment(x))", "score": 0}
{"id": "folio_validation_442", "prediction": "all x.(TakeDatabaseCourses(x) -> ComputerScienceDepartment(x))", "score": 0}
{"id": "folio_validation_442", "prediction": "all x.(TakesDatabaseCourse(x) -> FromComputerScientificDepartment(x))", "score": 0}
{"id": "folio_validation_442", "prediction": "all x.(TakesDbcDaterial(x) -> ComputerScientist(x))", "score": 0}
{"id": "folio_validation_442", "prediction": "all x.(TakesDBA(x) -> ComputerScientificDepartment(x))", "score": 0}
{"id": "folio_validation_442", "prediction": "all x.(TakesDatabaseCoursesAtDepartment(x) -> ComputerScienceDepartment(x))", "score": 0}
{"id": "folio_validation_443", "prediction": "all x.((Student(x) & InstructedByProfessorDavid(x)) -> DatabaseCourse(x))", "score": 0}
{"id": "folio_validation_443", "prediction": "all x.((Student(x) & InstructedByProfessorDavid(x)) -> TakeDatabaseCourse(x))", "score": 0}
{"id": "folio_validation_443", "prediction": "all x.(Instruction(x,y) -> Instructor(y))", "score": 0}
{"id": "folio_validation_443", "prediction": "all x.((Student(x) & InstructedByProfessorDave(x)) -> TakesDatabaseCourse(x))", "score": 0}
{"id": "folio_validation_443", "prediction": "all x.(InstructedByProfessorDavid(x) -> DatabaseCourse(x))", "score": 0}
{"id": "folio_validation_443", "prediction": "all x.(DavidConsultingStudent(x) -> TakesDatabaseCourse(x))", "score": 0}
{"id": "folio_validation_443", "prediction": "all x.(InstructedByProfessorDavid(x) -> DatabaseCourses(x))", "score": 0}
{"id": "folio_validation_443", "prediction": "all x y.((Student(x) & ProfDavid(y) & InstructedBy(x,y)) -> TakesDatabaseCourse(x))", "score": 0}
{"id": "folio_validation_443", "prediction": "all x.((Student(x) & InstructedByProfessorDavid(x)) -> DatabaseCourses(x))", "score": 0}
{"id": "folio_validation_443", "prediction": "all x.((Student(x) & Instruction(x,y) & InstructorDavid(y)) -> DatabaseCourse(x))", "score": 0}
{"id": "folio_validation_443", "prediction": "all x.(Instruction(x,y) -> InDavidsBachelor(y))", "score": 0}
{"id": "folio_validation_443", "prediction": "all x.(InstructedByProfessorDavid(x) -> TakesDatabaseCourse(x))", "score": 7}
{"id": "folio_validation_443", "prediction": "all x.(Student(x) -> InstructedByProfessorDavid(x))", "score": 7}
{"id": "folio_validation_443", "prediction": "all x y.((Student(x) & Professor(y) & InstructedBy(x,y)) -> TakesBaseworkCourse(x,y))", "score": 0}
{"id": "folio_validation_444", "prediction": "all x y.((Student(x) & Lab(y)) -> InsignedByProfessorDavid(x,y))", "score": 0}
{"id": "folio_validation_444", "prediction": "all x.(WorkingInLab(x) -> InstructedByProfessorDavid(x))", "score": 0}
{"id": "folio_validation_444", "prediction": "all x.(Student(x) -> InstructedByProfessorDavid(x))", "score": 0}
{"id": "folio_validation_444", "prediction": "all x.(WorkingInLab(x) -> InstructionPerProfessorDavid(x))", "score": 0}
{"id": "folio_validation_444", "prediction": "all x y.((Student(x) & Lab(y)) -> InstructedByProfessorDavid(x,y))", "score": 0}
{"id": "folio_validation_444", "prediction": "all x.((Student(x) & WorksInLab(x)) -> InstruedByProfessorDavid(x))", "score": 0}
{"id": "folio_validation_444", "prediction": "all x.((Student(x) & WorksInLab(x)) -> InstruredByProfessorDavid(x))", "score": 0}
{"id": "folio_validation_444", "prediction": "all x y.((Student(x) & Lab(y) & WorksIn(x,y)) -> InstruedByProfessorVance(x))", "score": 0}
{"id": "folio_validation_444", "prediction": "all x.((Student(x) & WorkingInLab(x)) -> InstructionByProfessorDavid(x))", "score": 0}
{"id": "folio_validation_444", "prediction": "all x.((Student(x) & WorksInLab(x)) -> InstructedByProfessor(x,David))", "score": 0}
{"id": "folio_validation_444", "prediction": "all x y.((Student(x) & Lab(y)) -> InstructedByProfessor(x,y))", "score": 0}
{"id": "folio_validation_444", "prediction": "all x y.((Student(x) & Lab(y)) -> InstructedByMary(x,y))", "score": 0}
{"id": "folio_validation_444", "prediction": "all x.(Student(x) & WorkInLab(x) -> InstructedByProfessorDavid(x))", "score": 0}
{"id": "folio_validation_444", "prediction": "all x y.((Student(x) & StudyingInLab(x)) -> InstrustedByProfessorDavid(x))", "score": 0}
{"id": "folio_validation_444", "prediction": "all x.(Student(x) -> InsignedByProfessor(x,David))", "score": 0}
{"id": "folio_validation_444", "prediction": "all x.(Student(x) -> Instructions(x,Professor,David))", "score": 0}
{"id": "folio_validation_445", "prediction": "all x.((Student(x) & WorkingInLab(x)) -> James(x))", "score": 0}
{"id": "folio_validation_445", "prediction": "all x.(Jimmy(x) -> Student(x))", "score": 0}
{"id": "folio_validation_445", "prediction": "James is student working in lab.", "score": -1}
{"id": "folio_validation_445", "prediction": "(StudentWorkingInLab(James) & JamesHasScientificWork(James))", "score": 0}
{"id": "folio_validation_445", "prediction": "James is a student working in the lab.", "score": -1}
{"id": "folio_validation_445", "prediction": "is a student working in the lab (James,Material(James) -> StudentWorkingIn(James,Material)))", "score": -1}
{"id": "folio_validation_445", "prediction": "James Smith is a student working in the lab.", "score": -1}
{"id": "folio_validation_445", "prediction": "(Student(James) & WorkingInLab(James))", "score": 7}
{"id": "folio_validation_445", "prediction": "James is a student(Matter(James) & WorksInLab(James))", "score": -1}
{"id": "folio_validation_445", "prediction": "all x.(Student(x) -> WorkingInLab(x))", "score": 0}
{"id": "folio_validation_445", "prediction": "James is student((James) & WorkingInLab(David,David))", "score": -1}
{"id": "folio_validation_445", "prediction": "all x.(Student(x) -> WorksInLab(x))", "score": 0}
{"id": "folio_validation_445", "prediction": "all x.(James(x) -> WorksInLab(x))", "score": 0}
{"id": "folio_validation_445", "prediction": "(StudentWorking(James,Lab) - CurrentlyStudent(James))", "score": -1}
{"id": "folio_validation_445", "prediction": "all x.((Student(x) & WorkingInLab(x)) -> JamesHousehold(x))", "score": 0}
{"id": "folio_validation_446", "prediction": "(-PersonTimeJob(Jack) | WorkedInLab(Jack)))", "score": -1}
{"id": "folio_validation_446", "prediction": "all x.((Jack(x) & -PartTimeJobOfferedByUniversity(x)) | WorksInLab(x))", "score": 0}
{"id": "folio_validation_446", "prediction": "(-PartTimeJob(Jack,University) & -WorksInLab(Jack,Lab))", "score": 0}
{"id": "folio_validation_446", "prediction": "(-PartTimeJob(Jack) & -WorksInLab(Jack))", "score": 0}
{"id": "folio_validation_446", "prediction": "(-exists x.(Jack(x) & PartTimeJobOfferedByUniversity(x)) & -WorksInLab(x))", "score": 0}
{"id": "folio_validation_446", "prediction": "all x.(Jack(x) -> (NecessaryPartTimeJob(x) & -(HasPartTimeJobOfferedByUniversity(x) | WorksInLab(x))))", "score": 0}
{"id": "folio_validation_446", "prediction": "((PartTimeJob(Jack) | WorksInLab(Jack)))", "score": 0}
{"id": "folio_validation_446", "prediction": "(-PartTimeJobOffered(Jack) | WorksInLab(Jack)))", "score": -1}
{"id": "folio_validation_446", "prediction": "(-PartTimeJobOfferedByUniversity(Jack) & -WorksInLab(Jack))", "score": 0}
{"id": "folio_validation_446", "prediction": "-(HasPartTimeJob(Jack) | WorksInLab(Jack)))", "score": -1}
{"id": "folio_validation_446", "prediction": "-(PartTimeJob(Jack) & Offers(Jack,University) | WorksInLab(Jack))", "score": 0}
{"id": "folio_validation_446", "prediction": "all x.((Jack(x) & -PartTimeJobOfferedByUniversity(x) & -Lab(x)) -> -WorksInLab(x))", "score": 0}
{"id": "folio_validation_446", "prediction": "All x y.((Jack(x) & University(y)) -> (-PartTimeJob(x,y) | InLab(x,y)))", "score": -1}
{"id": "folio_validation_446", "prediction": "exists x.(Jack(x) & -PartTimeJobOfferedByUniversity(x) & -WorksInLab(x))", "score": 0}
{"id": "folio_validation_446", "prediction": "-(PartTimeJob(Jack,University) & -WorksInLab(Jack,Lab))", "score": 0}
{"id": "folio_validation_447", "prediction": "all x y.((Job(x) & University(y) & PartTime(x,y)) -> Offers(x,y))", "score": 0}
{"id": "folio_validation_447", "prediction": "all x.(Job(x) -> (OfferedByUniversity(x,y) & PartTime(y)))", "score": 0}
{"id": "folio_validation_447", "prediction": "all x.(JobOfferedByUniversity(x) -> James(x))", "score": 0}
{"id": "folio_validation_447", "prediction": "all x.((Job(x) & Often(x,Recent)) -> James(x))", "score": 0}
{"id": "folio_validation_447", "prediction": "all x.((Job(x) & PartTime(x)) -> OfferedByUniversity(x))", "score": 0}
{"id": "folio_validation_447", "prediction": "all x.(Job(x) -> ProvidedByUniversity(x))", "score": 0}
{"id": "folio_validation_447", "prediction": "all x.((Job(x,James) & OfEdmonton(x)) -> PartTimeOfferedByUniversity(x,James))", "score": 0}
{"id": "folio_validation_447", "prediction": "all x y z.((Marriage(x) & University(y) & James(z)) -> OfferedBy(x,y,z))", "score": 0}
{"id": "folio_validation_447", "prediction": "all x.((Job(x) & James(x)) -> OfferedByUniversity(x))", "score": 0}
{"id": "folio_validation_447", "prediction": "all x.(Job(x) & Offers(x,University))", "score": 0}
{"id": "folio_validation_447", "prediction": "all x y.((Job(x) & University(y)) -> PartTimeOffered(x,y))", "score": 0}
{"id": "folio_validation_447", "prediction": "all x.(Job(x) -> (OfferedByUniversity(x) & PartTime(x)))", "score": 0}
{"id": "folio_validation_447", "prediction": "all x.((Job(x) & PartTimeOfferedByUniversity(x)) -> JamesHas(x,y))", "score": 0}
{"id": "folio_validation_447", "prediction": "exists x.(Job(x) & PartTimeTimeOfferedBy(x,y))", "score": 0}
{"id": "folio_validation_447", "prediction": "(OfferedByUniversity(James) -> PartTimeJob(James))", "score": 0}
{"id": "folio_validation_447", "prediction": "all x y.((Admission(x,y) & James(x)) -> PartTimeJobOffered(x,y))", "score": 0}
{"id": "folio_validation_448", "prediction": "all x.(James(x) & -PartTimeJobOfferedByUniversity(x))", "score": 1}
{"id": "folio_validation_448", "prediction": "all x y.((James(x) & University(y)) -> -PartTimeJob(x,y))", "score": 0}
{"id": "folio_validation_448", "prediction": "all x.((Job(x) & OfferableByUniversity(x)) -> JamesDissored(x))", "score": 0}
{"id": "folio_validation_448", "prediction": "all x.((Jackson(x) & -PartTimeJobOfferedByUniversity(x)) -> James-DoesNoStaff(x))", "score": -1}
{"id": "folio_validation_448", "prediction": "-PartTimeJobOfferedByU.Sanjay(James,University)", "score": -1}
{"id": "folio_validation_448", "prediction": "all x.((Job(x) & James(x)) -> -OfferedByUniversity(x))", "score": 0}
{"id": "folio_validation_448", "prediction": "(-OfferedPartTimeJob(James,UC) & JamesDoesNoThanPartTimeJob(James,UC))", "score": 0}
{"id": "folio_validation_448", "prediction": "-PartTimeJobOfferedByUniversity(James)", "score": 1}
{"id": "folio_validation_448", "prediction": "all x.((James(x) & -PartTimeJobOffered(x)) -> -OfferedByUniversity(x))", "score": 0}
{"id": "folio_validation_448", "prediction": "no part-time job offered by University.", "score": -1}
{"id": "folio_validation_448", "prediction": "all x.(James(x) -> -PartTimeJobOfferedByUniversity(x))", "score": 1}
{"id": "folio_validation_448", "prediction": "(-exists x.(Job(x) & OfferedBy(x)) & JamesDoesNear(x))", "score": 0}
{"id": "folio_validation_448", "prediction": "(-PartTimeJobOffered(James,University))", "score": 0}
{"id": "folio_validation_448", "prediction": "(-part-TimeJob(James) & OfferedByUniversity(James))", "score": -1}
{"id": "folio_validation_448", "prediction": "(-PartTimeJob(James) & OfferedByUniversity(James))", "score": 1}
{"id": "folio_validation_449", "prediction": "all x.((JamesSherbourne(x) & TakesDBD course(x)) | HasPartTimeJobByUniversity(x))", "score": -1}
{"id": "folio_validation_449", "prediction": "all x.((Jay(x) & (TakesBasicsCourses(x) | PartTimeJob(x))) -> ProvidedByUniversity(x))", "score": 0}
{"id": "folio_validation_449", "prediction": "all x.(James(x) -> (TakesDatabaseCourses(x) | HasPartTimeJobOfferedByUniversity(x)))", "score": 1}
{"id": "folio_validation_449", "prediction": "(All x.(James(x) -> TakesDatabaseCourses(x)) & (PartTimeJobOfferedByUniversity(x) | PartTimeJobOfferedByUniversity(x)))", "score": -1}
{"id": "folio_validation_449", "prediction": "all x.((James(x) | (TakesBoardingCourse(x) | PartTimeJobOfferedByUniversity(x))))", "score": 0}
{"id": "folio_validation_449", "prediction": "all x.((James(x) & (TakesDatabaseCourse(x) | HasPartTimeJobOfUniversity(x))) -> Has(x,y))", "score": 0}
{"id": "folio_validation_449", "prediction": "(CoursesDBCourses(James) | PartTimeJobOfferedByUniversity(James)))", "score": -1}
{"id": "folio_validation_449", "prediction": "all x.(James(x) -> (TakesDatabaseCourse(x) | HasPartTimeJob(x)))", "score": 0}
{"id": "folio_validation_449", "prediction": "all x.((James(x) & (TakesDBournCourses(x) | HasPartTimeJob(x))) -> HasUniversityOffered(x))", "score": 0}
{"id": "folio_validation_449", "prediction": "all x.((James(x) & (TakesDatabaseCourse(x) | PartTimeJobOwnedByUniversity(x))) -> Takes(x,y))", "score": 0}
{"id": "folio_validation_449", "prediction": "all x.(James(x) -> (TakesDBCourses(x) | PartTimeJobOfferedByUniversity(x)))", "score": 1}
{"id": "folio_validation_449", "prediction": "all x.((James(x) & DatabaseCourse(x)) | PartTimeJobOfferedByUniversity(x)) -> Takes(x,y))", "score": -1}
{"id": "folio_validation_449", "prediction": "exists x.(James(x) & (TakesDatabaseCourses(x) | PartTimeJobOfferedByUniversity(x)))", "score": 1}
{"id": "folio_validation_449", "prediction": "(Focus(Jamey) | PartTimeJobOfferedByUniversity(Jamey,Jamey)))", "score": -1}
{"id": "folio_validation_449", "prediction": "all x.(James(x) -> (TakesDatabaseCourses(x) | HasPartTimeJob(x)))", "score": 0}
{"id": "folio_validation_449", "prediction": "all x.((James(x) & TakesDBCourses(x)) | HasPartTimeJobOffered(x))", "score": 0}
{"id": "folio_validation_450", "prediction": "Daniel takes databaseClass.", "score": -1}
{"id": "folio_validation_450", "prediction": "(all x.(Jack(x) -> DatabaseCourses(x)))", "score": 0}
{"id": "folio_validation_450", "prediction": "(all x.(Dog(x) -> TakesDatabaseCourse(x)))", "score": 0}
{"id": "folio_validation_450", "prediction": "(TakesDbaCourses(Jack))", "score": 0}
{"id": "folio_validation_450", "prediction": "(All x.(Jack(x) -> DatabaseCourse(x)))", "score": -1}
{"id": "folio_validation_450", "prediction": "Daniel takes DatabaseCourse(Jack)", "score": -1}
{"id": "folio_validation_450", "prediction": "(TakesBankingCourses(Jack) & TakesBankBankingCourses(Jack))", "score": 0}
{"id": "folio_validation_450", "prediction": "(TakesDBA(Jack))", "score": 0}
{"id": "folio_validation_450", "prediction": "Alles x.(Jack(x) -> TakesDatabaseCourse(x))", "score": -1}
{"id": "folio_validation_450", "prediction": "All x.(Jack(x) -> TakesDbss(x))", "score": -1}
{"id": "folio_validation_450", "prediction": "\"TakesCourses(Jack,DailyDatabase)\"", "score": -1}
{"id": "folio_validation_450", "prediction": "Jack takes DatabaseCourses.", "score": -1}
{"id": "folio_validation_450", "prediction": "(TakesDatabaseCourses(Jack))", "score": 0}
{"id": "folio_validation_450", "prediction": "all x.(Jack(x) -> TakesBASEbankCourse(x))", "score": 0}
{"id": "folio_validation_450", "prediction": "(TakesCourses(Jack) & DatabasesWithin(Jack))", "score": 0}
{"id": "folio_validation_450", "prediction": "(TakesDatabaseCourses(Jack) & Access(Jack))", "score": 0}
{"id": "folio_validation_451", "prediction": "all x.((George(x) & LikesMusic(x)) -> WantsToCompose(x))", "score": 2}
{"id": "folio_validation_451", "prediction": "all x.((LovesMusic(x) & Composes(x)) -> LikesMusic(x))", "score": 0}
{"id": "folio_validation_451", "prediction": "all x.((MeetsMusic(x) & LikesMusic(x)) -> WantsCompose(x))", "score": 0}
{"id": "folio_validation_451", "prediction": "(LikesMusic(Greg(Greg) -> WantsCompose(Generic))", "score": -1}
{"id": "folio_validation_451", "prediction": "all x.(LiesMusic(x) -> WantsToCompose(x))", "score": 0}
{"id": "folio_validation_451", "prediction": "all x.((Gorge(x) & LikesMusic(x)) -> WantsComposition(x))", "score": 0}
{"id": "folio_validation_451", "prediction": "all x.((Government(x) & LikesMusic(x)) -> WantsToCompose(x))", "score": 0}
{"id": "folio_validation_451", "prediction": "all x.(LikesMusic(x) -> WantsCompose(x))", "score": 0}
{"id": "folio_validation_451", "prediction": "all x.((George(x) | LikesMusic(x))) -> Writes(x))", "score": -1}
{"id": "folio_validation_451", "prediction": "all x.((George(x) & LikesMusic(x)) -> Composes(x))", "score": 2}
{"id": "folio_validation_451", "prediction": "all x.(MovesMusic(x) -> WantsToCompose(x))", "score": 0}
{"id": "folio_validation_451", "prediction": "all x.((Greg(x) & LikesMusic(x)) -> WantsComposition(x))", "score": 0}
{"id": "folio_validation_451", "prediction": "(LikesMusic(George) & WantsToCompose(George))", "score": 0}
{"id": "folio_validation_451", "prediction": "all x.((George(x) & LikesMusic(x)) -> WantsComposition(x))", "score": 0}
{"id": "folio_validation_452", "prediction": "all x y.(((George(x) & Program(y)) -> CanCompose(x,y))", "score": -1}
{"id": "folio_validation_452", "prediction": "all x.((AccessToProgram(x) & GeorgeToCompose(x)) -> CanCompose(x))", "score": 0}
{"id": "folio_validation_452", "prediction": "all x.((George(x) & AccessToProgram(x)) -> CanCompose(x))", "score": 1}
{"id": "folio_validation_452", "prediction": "all x.((AccessToProgram(x) & GeorgeMore(x,Program)) -> CanCompose(x))", "score": 0}
{"id": "folio_validation_452", "prediction": "all x.(((George(x) & AccessToProgram(x)) -> CanCompose(x))", "score": -1}
{"id": "folio_validation_452", "prediction": "all x.((AccessToProgram(x) & George(x)) -> CanCompose(x))", "score": 0}
{"id": "folio_validation_452", "prediction": "all x y.((George(x) & AccessToProgram(x,y)) -> CanCompose(x,y))", "score": 0}
{"id": "folio_validation_452", "prediction": "all x y.((Development(x) & AccessToProgram(x) & George(y)) -> CanCompose(y))", "score": 0}
{"id": "folio_validation_452", "prediction": "all x.((George(x) & HasAccessToProgram(x)) -> CanCompose(x))", "score": 1}
{"id": "folio_validation_452", "prediction": "all x.((Guest(x) & AccessToProgram(x)) -> CanCompose(x))", "score": 0}
{"id": "folio_validation_452", "prediction": "all x y.(((George(x) & Program(y)) & HasAccess(x,y)) -> CanCompose(x))", "score": 0}
{"id": "folio_validation_452", "prediction": "all x y.((ExitProgram(x) & George(y)) -> CanCompose(y))", "score": 0}
{"id": "folio_validation_452", "prediction": "all x.((Attribute(x) & -AccessToProgram(x)) -> CanCompose(x))", "score": 0}
{"id": "folio_validation_453", "prediction": "all x.((George(x) & CanComposeAndWantsToCompose(x)) -> Compose(x))", "score": 0}
{"id": "folio_validation_453", "prediction": "all x.((George(x) & CanCompose(x) & WantsToCompose(x)) -> Compose(x))", "score": 2}
{"id": "folio_validation_453", "prediction": "all x.((GeorgeCanCompose(x) & WantsToCompose(x)) -> Compose(x))", "score": 0}
{"id": "folio_validation_453", "prediction": "all x.((George(x) & CanCompose(x) & WantsToCompose(x)) -> CanCompose(x))", "score": 0}
{"id": "folio_validation_453", "prediction": "all x.((George(x) & WriteCompose(x)) -> Compose(x))", "score": 0}
{"id": "folio_validation_453", "prediction": "all x.((George(x) & CanCompose(x) & WantsToCompose(x)) -> WillCompose(x))", "score": 0}
{"id": "folio_validation_453", "prediction": "all x.((AlreadyComposed(x) & WantsCompose(x)) -> Composes(x))", "score": 0}
{"id": "folio_validation_453", "prediction": "all x.((GeorgeCanCompose(x) & WantsToCompose(x)) -> WillCompose(x))", "score": 0}
{"id": "folio_validation_453", "prediction": "-(CanCompose(George,1998) & WantsToCompose(George,1998)))", "score": -1}
{"id": "folio_validation_453", "prediction": "all x.((George(x) & CanCompose(x) & WillCompose(x)) -> Composes(x))", "score": 0}
{"id": "folio_validation_453", "prediction": "all x.((George(x) & CanCompose(x) & WillCompose(x)) -> Compose(x))", "score": 0}
{"id": "folio_validation_454", "prediction": "all x.((LikesMusic(x) & AccessToProgram(x)) -> WillCompose(x))", "score": 0}
{"id": "folio_validation_454", "prediction": "all x.((LikesMusic(x) & AccessToProgram(x)) -> Compose(x))", "score": 0}
{"id": "folio_validation_454", "prediction": "all x.((George(x) & LikesMusic(x) & HasAccessToProgram(x)) -> Compose(x))", "score": 1}
{"id": "folio_validation_454", "prediction": "all x.((Gordon(x) & LikesMusic(x) & AccessToProgram(x)) -> Composes(x))", "score": 0}
{"id": "folio_validation_454", "prediction": "all x.((MadeMusic(x) & HasAccessToProgram(x)) -> WillCompose(x))", "score": 0}
{"id": "folio_validation_454", "prediction": "all x.((Gerry(x) & LikesMusic(x) & AccessToProgram(x)) -> Composes(x))", "score": 0}
{"id": "folio_validation_454", "prediction": "all x.((George(x) & LikesMusic(x) & AccessToProgram(x)) -> Compose(x))", "score": 1}
{"id": "folio_validation_454", "prediction": "all x.((Grossy(x) & LikesMusic(x) & AccessToProgram(x)) -> Compose(x))", "score": 0}
{"id": "folio_validation_454", "prediction": "all x.((Gather(x) & LikesMusic(x) & HasAccessToProgram(x)) -> Composes(x))", "score": 0}
{"id": "folio_validation_454", "prediction": "all x.((George(x) & LikesMusic(x) & HasAccessToProgram(x)) -> Composes(x))", "score": 1}
{"id": "folio_validation_454", "prediction": "all x.((GeorgeLikesMusic(x) & AccessToProgram(x)) -> Compose(x))", "score": 0}
{"id": "folio_validation_454", "prediction": "all x.((George(x) & LikesMusic(x) & AccessToProgram(x)) -> Composes(x))", "score": 1}
{"id": "folio_validation_454", "prediction": "all x.((GreatMusic(x) & AccessToProgram(x)) -> Composes(x))", "score": 0}
{"id": "folio_validation_454", "prediction": "all x.((Gabbau(x) & likesMusic(x) & AccessToProgram(x)) -> Composes(x))", "score": 0}
{"id": "folio_validation_454", "prediction": "all x.((George(x) & LikesMusic(x) & AccessToProgram(x)) -> CompleteComposition(x))", "score": 0}
{"id": "folio_validation_455", "prediction": "all x.((George(x) & -Compose(x)) -> -Compose(x))", "score": 0}
{"id": "folio_validation_455", "prediction": "all x.(Greg(x) -> -Compose(x))", "score": 0}
{"id": "folio_validation_455", "prediction": "all x.((George(x) & -Composes(x)) -> -Composes(x))", "score": 0}
{"id": "folio_validation_455", "prediction": "all x y.((George(x) & -Compose(x)) -> -Compose(y))", "score": 0}
{"id": "folio_validation_455", "prediction": "all x.(CannotCompose(x) -> GeorgeWillNotCompose(x))", "score": 0}
{"id": "folio_validation_455", "prediction": "all x.((George(x) & DoesNotCompose(x)) -> -CanCompose(x))", "score": 0}
{"id": "folio_validation_455", "prediction": "all x.((Gary(x) & -Compose(x)) -> CannotCompose(x))", "score": 0}
{"id": "folio_validation_456", "prediction": "all x.(Hawk(x) -> NeverLands(x))", "score": 0}
{"id": "folio_validation_456", "prediction": "all x.(Hawk(x) -> -Lands(x))", "score": 1}
{"id": "folio_validation_456", "prediction": "all x.(Huckle(x) -> -Lands(x))", "score": 0}
{"id": "folio_validation_456", "prediction": "all x.(Hawk(x) -> EverLands(x))", "score": 0}
{"id": "folio_validation_456", "prediction": "all x.(Habit(x) -> -Lands(x))", "score": 0}
{"id": "folio_validation_456", "prediction": "all x.(hawk(x) -> -Lands(x))", "score": 0}
{"id": "folio_validation_456", "prediction": "all x.(hawk(x) -> NeverLands(x))", "score": 0}
{"id": "folio_validation_457", "prediction": "exists x.(Bird(x) & Hawk(x))", "score": 1}
{"id": "folio_validation_458", "prediction": "all x.(Bird(x) -> Lands(x))", "score": 1}
{"id": "folio_validation_458", "prediction": "all x.(Bird(x) -> LandsOn(x,y))", "score": 0}
{"id": "folio_validation_458", "prediction": "all x.(Bird(x) -> LandsOnLand(x))", "score": 0}
{"id": "folio_validation_458", "prediction": "all x.(Bird(x) -> Land(x))", "score": 0}
{"id": "folio_validation_458", "prediction": "all x.(Bird(x) -> LandsAndLands(x))", "score": 0}
{"id": "folio_validation_458", "prediction": "all x.(Bird(x) -> LandsWith(x,y))", "score": 0}
{"id": "folio_validation_458", "prediction": "all x.(Bird(x) -> LandsThere(x))", "score": 0}
{"id": "folio_validation_458", "prediction": "all x y.((Bird(x) & Land(y)) -> Lands(x,y))", "score": 0}
{"id": "folio_validation_458", "prediction": "all x.(Bird(x) -> LandsIn(x))", "score": 0}
{"id": "folio_validation_458", "prediction": "all x y.((Bird(x) & Bird(y)) -> Land(x,y))", "score": 0}
{"id": "folio_validation_459", "prediction": "all x y.((Monday(x) & 8pm(y)) -> GivesOutRose(x,y))", "score": 0}
{"id": "folio_validation_459", "prediction": "all x.((Monday(x) & At8PM(x)) -> GivesRosesOff(x))", "score": 0}
{"id": "folio_validation_459", "prediction": "exists x.(Monday(x) & On(x,8) & Over(x,9)) -> RosesOwned(x))", "score": -1}
{"id": "folio_validation_459", "prediction": "exists x.(Monday(x) & (8pm(x) & AvailableOnTV(x))", "score": -1}
{"id": "folio_validation_459", "prediction": "exists x.(Monday(x) & At8PM(x) & AtLunar(x) & Television(x) & RosePunch(x))", "score": 0}
{"id": "folio_validation_459", "prediction": "exists x.(Monday(x) & AtEndOf(x,8)) -RosesGivenOnTV(x))", "score": -1}
{"id": "folio_validation_459", "prediction": "all x y.((Monday(x) & 8pm(x)) -> (RoseTelevision(y) & GeneratedOn(x,y)))", "score": 0}
{"id": "folio_validation_459", "prediction": "inMounds(Mondays(am & 8pm(um) & -(PurplePiece(am) | TV(am))))", "score": -1}
{"id": "folio_validation_459", "prediction": "all x y.((Monday(x) & 8Pm(y)) -> GivesRose(x,y))", "score": 0}
{"id": "folio_validation_459", "prediction": "all x.((Monday(x) & At8pm(x)) -> ProvidedOnTV(x))", "score": 0}
{"id": "folio_validation_459", "prediction": "(exists x.(Monday(x) & At8Pm(x)) & exists y.(Monday(y) & Thursday(y)) & At(x,y)) & (Monday(y) & At8Pm(x)) | (Monday(y) -> GivenOut(y)))))", "score": -1}
{"id": "folio_validation_459", "prediction": "all x.((Monday(x) & 8PM(x)) -> RosesShownOnTV(x))", "score": 0}
{"id": "folio_validation_459", "prediction": "all x y.((Monday(x) & 8PM(y)) -> GivenOut(x,y))", "score": 0}
{"id": "folio_validation_459", "prediction": "exists x.(Monday(x) & 8pm(x) & Television(x))", "score": 0}
{"id": "folio_validation_459", "prediction": "(exists x.(Monday(x) & 8Pm(x)) & OnMonday(x) & 8Pm(x) & AvailableOnTV(x))", "score": 0}
{"id": "folio_validation_459", "prediction": "all x.((Monday(x) & 8pm(x)) -> RosesGivenOutOnTV(x))", "score": 0}
{"id": "folio_validation_460", "prediction": "all x.((Rose(x) & GivenOutOnTV(x)) -> Bachelor(x))", "score": 0}
{"id": "folio_validation_460", "prediction": "all x.(Rose(x) -> TakenOutOnTV(x))", "score": 0}
{"id": "folio_validation_460", "prediction": "all x.(Rose(x) -> Bachelor(x))", "score": 0}
{"id": "folio_validation_460", "prediction": "all x.(Rose(x) & DoneOffOnTV(x) -> Bachelor(x))", "score": 0}
{"id": "folio_validation_460", "prediction": "all x.(Rose(x) -> (GiftedOutOnTV(x) & Bachelor(x)))", "score": 0}
{"id": "folio_validation_460", "prediction": "every rose given out on Tv (exists x.(Rose(x) & GivenOutOnTV(x)) & Bachelor(x))", "score": -1}
{"id": "folio_validation_460", "prediction": "all x.(Rose(x) & GivenOutOnTV(x)) -> Bachelor(x))", "score": -1}
{"id": "folio_validation_460", "prediction": "all x.(Rose(x) -> OnBachelor(x))", "score": 0}
{"id": "folio_validation_460", "prediction": "all x.(Rose(x) -> GivenOutOnTVOnBachelor(x))", "score": 0}
{"id": "folio_validation_460", "prediction": "all x.((Rose(x) & GivenOutLive(x)) -> Bachelor(x))", "score": 0}
{"id": "folio_validation_461", "prediction": "all x.(Bachelor(x) -> LivesOfRealPeople(x))", "score": 0}
{"id": "folio_validation_461", "prediction": "all x.(Bachelor(x) -> RepelsLivesOfRealPeople(x))", "score": 0}
{"id": "folio_validation_461", "prediction": "all x.(Bachelor(x) -> TheLifeOfLiliesOfRealPeople(x))", "score": 0}
{"id": "folio_validation_461", "prediction": "all x.(Bachelor(x) -> PortraysLifeOfRealPeople(x))", "score": 0}
{"id": "folio_validation_461", "prediction": "all x.(Bachelor(x) -> ProfilesLifeOfRealPeople(x))", "score": 0}
{"id": "folio_validation_461", "prediction": "all x.(Bachelor(x) -> RealPeopleLives(x))", "score": 0}
{"id": "folio_validation_461", "prediction": "all x.(Bachelor(x) -> DescriptionOfLife(x,realPeople)", "score": -1}
{"id": "folio_validation_461", "prediction": "All x y.((Bachelor(x) & Bachelor(y)) -> PortraitsLivesOfRealPeople(x,y))", "score": -1}
{"id": "folio_validation_461", "prediction": "all x.(Bachelor(x) -> PortraitsLivesOfRealPeople(x))", "score": 0}
{"id": "folio_validation_461", "prediction": "(CastlesRealBachelors(Bachelor) & EverythingOnBachelor(Bachelor))", "score": 0}
{"id": "folio_validation_461", "prediction": "all x.(Bachelor(x) -> -DepictsLivesOfRealPeople(x))", "score": 0}
{"id": "folio_validation_461", "prediction": "all x y z.((Bachelor(x) & RealPeople(y) & Bachelor(x)) -> Portrays(x,y,z))", "score": 0}
{"id": "folio_validation_461", "prediction": "all x y.((BachelorAcademy(x) & (RealPeople(y) | RealPeople(y))) -> Portrays(x,y))", "score": 0}
{"id": "folio_validation_461", "prediction": "all x.(Bachelor(x) -> DepictsLife(x,RealPeople))", "score": 0}
{"id": "folio_validation_461", "prediction": "all x.(Bachelor(x) -> PortraysLivesOfRealPeople(x))", "score": 0}
{"id": "folio_validation_461", "prediction": "all x.(Bachelor(x) -> LivesAtRealPeople(x))", "score": 0}
{"id": "folio_validation_462", "prediction": "all x.((Show(x) & RealLife(x)) -> RealityTVShow(x))", "score": 0}
{"id": "folio_validation_462", "prediction": "all x.((Show(x) & LivesRealPeople(x)) -> RealityTVShow(x))", "score": 0}
{"id": "folio_validation_462", "prediction": "all x.((Show(x) & CapturesLivesOfRealPeople(x)) -> RealityTVShow(x))", "score": 0}
{"id": "folio_validation_462", "prediction": "all x.(RealityTVShow(x) -> (PortraysRealLifes(x) & RealPeopleLives(x)))", "score": 0}
{"id": "folio_validation_462", "prediction": "all x.((TvShow(x) & DescribesLivesOfRealPeople(x)) -> RealityTvShow(x))", "score": 0}
{"id": "folio_validation_462", "prediction": "all x.((Show(x) & RealPeopleLives(x)) -> RealityTVShow(x))", "score": 0}
{"id": "folio_validation_462", "prediction": "all x.((Show(x) & Show(x) & Show(x) & RealPeople(x)) -> RealityTVShow(x))", "score": 0}
{"id": "folio_validation_462", "prediction": "all x.((Show(x) & RealPeople(x)) -> RealityTVShow(x))", "score": 0}
{"id": "folio_validation_462", "prediction": "all x.((Show(x) & DisplayingLivesOfRealPeople(x)) -> RealityTVShow(x))", "score": 0}
{"id": "folio_validation_462", "prediction": "all x.(ProtocolWithrealPeople(x) -> RealityTVShow(x))", "score": 0}
{"id": "folio_validation_462", "prediction": "all x.((Show(x) & RealLives(x)) -> RealityTVShow(x))", "score": 0}
{"id": "folio_validation_462", "prediction": "all x.((Show(x) & ExposesLivesOfRealPeople(x)) -> RealityTVShow(x))", "score": 0}
{"id": "folio_validation_462", "prediction": "all x.((Show(x) & RealAlives(x)) -> RealityTVShow(x))", "score": 0}
{"id": "folio_validation_462", "prediction": "all x.((Show(x) & LifeArea(x) & RealPerson(x)) -> RealityTVShow(x))", "score": 0}
{"id": "folio_validation_463", "prediction": "(RealityTVShow(Internship-BreakingBad) & -RealityTVShow(BreakingBad))", "score": -1}
{"id": "folio_validation_463", "prediction": "IsRealityTVShow(i)", "score": 0}
{"id": "folio_validation_463", "prediction": "-RealityTVShow(BreakingBad)", "score": 0}
{"id": "folio_validation_463", "prediction": "the BreakingBad tv show!", "score": -1}
{"id": "folio_validation_463", "prediction": "all x.( BreakingBad(x) -> -RealityTVShow(x))", "score": 0}
{"id": "folio_validation_463", "prediction": "\"BreakingBad\" -RealityTelevisionShow(x))", "score": -1}
{"id": "folio_validation_463", "prediction": "All x.(BreakingBad(x) -> -RealityTVShow(x))", "score": -1}
{"id": "folio_validation_463", "prediction": "BreakingBad.com - RealityTVShow(BreathingBad))", "score": -1}
{"id": "folio_validation_463", "prediction": "-RealityTVShow(BuildingBad)", "score": 0}
{"id": "folio_validation_463", "prediction": "(RealityTVShow(BreakingBad) & -RealityTVShow(BreakingBad))", "score": 0}
{"id": "folio_validation_463", "prediction": "-(RealityTVShow(BreakingBad))", "score": 0}
{"id": "folio_validation_463", "prediction": "BreakingBad (exists x.(RealityTVShow(x) & -RealityTVShow(x)))", "score": 0}
{"id": "folio_validation_463", "prediction": "breakingbad.fm & -RealityTVShow(f) & -RealityShow(a) & -CasualShow(a))", "score": -1}
{"id": "folio_validation_464", "prediction": "BreakingBad(s) -(SaturdayMeals(s) & 8pm(s)))", "score": -1}
{"id": "folio_validation_464", "prediction": "BreakingBadsOnMondayAt8Pm.", "score": -1}
{"id": "folio_validation_464", "prediction": "BreakingBad(x) -(Tuesday(x,8pm) | Monday(x,10)))", "score": -1}
{"id": "folio_validation_464", "prediction": "BreakingBadTuesday@8:00pm.", "score": -1}
{"id": "folio_validation_464", "prediction": "(IsBreakingBad(i) & OpenForMondayAt(i,8))", "score": 0}
{"id": "folio_validation_464", "prediction": "BreakingBad(x) -> MondayAt8:00pm(x))", "score": -1}
{"id": "folio_validation_464", "prediction": "BreakingBadSaturdayAt8PM(b)", "score": 0}
{"id": "folio_validation_464", "prediction": "BreakingBad onMondayAt8PM.", "score": -1}
{"id": "folio_validation_464", "prediction": "(BreakingBad(Lunch,8Pm))", "score": 0}
{"id": "folio_validation_464", "prediction": "BreakingBadAt(BreakthroughBad(BreakthroughBreakthroughMonday(BreakthroughAt(b) & 8PM(b))", "score": -1}
{"id": "folio_validation_464", "prediction": "(BreakingBad(e) -> MondayAt8Pm.))", "score": -1}
{"id": "folio_validation_464", "prediction": "BreakingBad(k) -(Monday(v) & At8pm(y)))", "score": -1}
{"id": "folio_validation_464", "prediction": "BreakingBadStarts(Monday,8pm)", "score": 0}
{"id": "folio_validation_464", "prediction": "BreakingBadCastMonday(b) -> IsOnIn(b))", "score": -1}
{"id": "folio_validation_464", "prediction": "BreakingBadEvent(e) -> OnMondayAt8pm(e))", "score": -1}
{"id": "folio_validation_464", "prediction": "Every Monday, 8pm BreakingBad(x)", "score": -1}
{"id": "folio_validation_465", "prediction": "All x.((TelevisionShow(x) & BreakingBad(x)) -> RosesGivenOutOnMonday(x))", "score": -1}
{"id": "folio_validation_465", "prediction": "All x.((TVShow(x) & Roses(y) & MondayAt(z,e)) -> BreakingBad(x))", "score": -1}
{"id": "folio_validation_465", "prediction": "all x.(BreakingBad(x) -> (TelevisionShow(x) & RosesGivenOutOnMondayAt8PM(x)))", "score": 0}
{"id": "folio_validation_465", "prediction": "all x.(BreakingBad(x) -> (TVShow(x) & Show(x) & RosesPottedOnMonday(x) & LeftThuEven(x)))", "score": 0}
{"id": "folio_validation_465", "prediction": "all x.(BreakingBad(x) -> (TVShow(x) & RosesGivenOutOnMondayAt8pm(x)))", "score": 0}
{"id": "folio_validation_465", "prediction": "all x.(BreakingBad(x) -> (TVShowInProductionOfRoses(x) & TuesdayAt8pmA)))", "score": -1}
{"id": "folio_validation_465", "prediction": "all x y.((TelevisionShow(x) & Valentine(y) & Friday(z) & BreakingBad(x,y)) -> GivenOut(y,z))", "score": 0}
{"id": "folio_validation_465", "prediction": "BreakingBad is a TVShowInWords(ElevatedAndMondaySeason(Elevated(Elevated(Elevated(Elevated(Elevated(Elevated(Elevated(e)))", "score": -1}
{"id": "folio_validation_465", "prediction": "(TVShow(breakingbad) -> TeachesRoses(movie))", "score": 0}
{"id": "folio_validation_465", "prediction": "all x.((TelevisionShow(x) & Show(x) & RosesSpreadOnMondayAt8pm)) -> BreakingBad(x))", "score": -1}
{"id": "folio_validation_465", "prediction": "(BreakingBad(tvshow) -> (RosesGoneOutOnLundayAt8Pm)))", "score": -1}
{"id": "folio_validation_465", "prediction": "all x.(BreakingBad(x) -> (TelevisionShow(x) & InTelevision(x) & RosesTreatment(x,88)))", "score": 0}
{"id": "folio_validation_465", "prediction": "all x y.((TelevisionShow(x) & BreakingBad(y)) -> (RosesGiftedOut(x,y)))", "score": 0}
{"id": "folio_validation_465", "prediction": "all x.(BreakingBad(x) -> (TVShow(x) & RosesGateOutOnMondayAt8PM(x)))", "score": 0}
{"id": "folio_validation_465", "prediction": "BreakingBad is a TVShow in which roses are given out onMondayAt8pm.", "score": -1}
{"id": "folio_validation_465", "prediction": "all x y.((TVShow(x) & Rose(y) & OnMondayAt8PM(x,y)) -> GivesOut(x,y))", "score": 0}
{"id": "folio_validation_466", "prediction": "all x.((Rose(x) & GivenOut(x,BreakingBad)) -> OnMondayAt8pm(x))", "score": 0}
{"id": "folio_validation_466", "prediction": "all x.((Rose(x) & BreakingBad(x)) -> MondayAt8pm(x))", "score": 0}
{"id": "folio_validation_466", "prediction": "all x.(BreakingBad(x) -> (GiveRoseOut(x) | MondayAt8PM(x)))", "score": 0}
{"id": "folio_validation_466", "prediction": "all x.((Roses(x) & ThisBreakingBad(x)) -> MondayAt8pm(x))", "score": 0}
{"id": "folio_validation_466", "prediction": "all x.((Rose(x) & GivenOutInBreakingBad(x)) -> MondayAtEightPM(x))", "score": 0}
{"id": "folio_validation_466", "prediction": "all x.((Roses(x) & GivenOutDuringBreakingBad(x)) -> MondayAt8Pm(x))", "score": 0}
{"id": "folio_validation_466", "prediction": "all x.((Rose(x) & GivenOutWhileBreakingBad(x)) -> MondayAt8pm(x))", "score": 0}
{"id": "folio_validation_466", "prediction": "all x.((Rose(x) & BreakingBad(x)) -> AllThursdayAt8PM(x))", "score": 0}
{"id": "folio_validation_466", "prediction": "all x.((Rose(x) & GivenOut(x) & BreakingBad(x)) -> OnMondayAt8Pm(x))", "score": 0}
{"id": "folio_validation_466", "prediction": "all x.((Rose(x) & BreakingBad(x)) -> SundayAt8pm(x))", "score": 0}
{"id": "folio_validation_466", "prediction": "all x.((Rose(x) & GivenOutDuringBreakingBad(x)) -> MondayAt8pm(x))", "score": 0}
{"id": "folio_validation_466", "prediction": "all x.((Roses(x) & ReceivedOutDuringBreakingBad(x)) -> MondayAt8PM(x))", "score": 0}
{"id": "folio_validation_466", "prediction": "all x.((RosegivenOutDuringBreakingBad(x) & MondayAt-8pm(x)) -> GivenOutOn(x,b,y))", "score": -1}
{"id": "folio_validation_466", "prediction": "all x.((Rose(x) & GivenOutDuringBreathingBad(x)) -> MondayAt8(x))", "score": 0}
{"id": "folio_validation_466", "prediction": "all x y.((Rose(x) & BreakingBad(y)) -> MondayAt8Pm(x))", "score": 0}
{"id": "folio_validation_467", "prediction": "all x.(Scmidt(x) -> NaziPolitician(x))", "score": 0}
{"id": "folio_validation_467", "prediction": "Heinrich Scmidt (nasaldeutschePolitician)", "score": -1}
{"id": "folio_validation_467", "prediction": "Heinrich Scmidt (NaziGermanPolitician)", "score": -1}
{"id": "folio_validation_467", "prediction": "Heinrich Scmidt(hereinafter) was a NaziGermanPolitician(hereinafter)", "score": -1}
{"id": "folio_validation_467", "prediction": "Heinrich Scmidt (narwa-german politician)", "score": -1}
{"id": "folio_validation_467", "prediction": "Heinrich Scmidt (neo-NaziGermanPolitician(n))", "score": -1}
{"id": "folio_validation_467", "prediction": "Heinrich Scmidt (*1909, Düsseldorf, Germany)) war ein NaziGermanPolitician.", "score": -1}
{"id": "folio_validation_467", "prediction": "Heinrich Scmidt (nast-GermanPolitician)", "score": -1}
{"id": "folio_validation_467", "prediction": "Heinrich Scmidt (naziGermanPolitician)", "score": -1}
{"id": "folio_validation_467", "prediction": "Heinrich Scmidt (Deutschland-NaziPolitician)", "score": -1}
{"id": "folio_validation_467", "prediction": "Heinrich Scmidt(*) & NaziGermanPolitician(*)", "score": -1}
{"id": "folio_validation_467", "prediction": "Heinrich Scmidt (nast-deutschePolitician)", "score": -1}
{"id": "folio_validation_467", "prediction": "Heinrich Scmidt (NaziGerman(x) & Politician(x))", "score": -1}
{"id": "folio_validation_468", "prediction": "Heeinrich Scmidt (Chairman(CroatianStateParliament) & Member(CroatianNaziRangestag))", "score": -1}
{"id": "folio_validation_468", "prediction": "(PrussianStateParliament(heeinrich Scmidt) & NaziRangestag(heeinrich Scmidt))", "score": -1}
{"id": "folio_validation_468", "prediction": "-HeeinrichScmidt(x) & ServedAtPrussianStateParliamentAndNaziRangstag(x))", "score": -1}
{"id": "folio_validation_468", "prediction": "Heeinrich Scmidt (*) war a past member of the Prussian StateParliament and of Nazi Reichstag.", "score": -1}
{"id": "folio_validation_468", "prediction": "Heeinrich Scmidt (born August 28, 1938) is a member of the Prussian StateParliament & MemberOfNaziRandstag(x))", "score": -1}
{"id": "folio_validation_468", "prediction": "(Heeinrich Scmidt(Heinrich,Prussia) & MemberOfStateParliament(Heinrich,Nazi) & MemberOfRangestag(Heeinrich,Nazi))", "score": -1}
{"id": "folio_validation_468", "prediction": "Heeinrich Scmidt was a member of both the Prussian StateParliament and the NaziRichstag.", "score": -1}
{"id": "folio_validation_468", "prediction": "(BelongsTo(Heeinrich Scmidt) & PrussianStateParliament(HeeinrichScmidt) & NaziRandstag(HeeinrichScmidt))", "score": -1}
{"id": "folio_validation_468", "prediction": "(MemberOfPrussianStateParliament(HeeinrichScmidt) & MemberOfNaziRangestag(HeeinrichScmidt))", "score": 0}
{"id": "folio_validation_468", "prediction": "((HeeinrichScmidt(in) & PrussianStateParlament(e)) & NaziRangestag(e))", "score": 0}
{"id": "folio_validation_468", "prediction": "all x.((HenryScmidt(x) & PrussianStateParliament(x) & NaziRangestag(x)) -> Member(x))", "score": 0}
{"id": "folio_validation_468", "prediction": "Heeinrich Scmidt lag den Verhältnissen zum Pressus StateParliament und sterreichischen Reichstag.", "score": -1}
{"id": "folio_validation_468", "prediction": "Heeinrich Scmidt (Heinerich Scmidt) was a member of both the Prussian StateParliament and the Nazi Reichstag.", "score": -1}
{"id": "folio_validation_468", "prediction": "Heeinrich Scmidt (inaugurated 2009)) & PrussianStateParlament(i) & NaziRangestag(i))", "score": -1}
{"id": "folio_validation_468", "prediction": "Heeinrich Scmidt was member of other parliamentary bodies including the Prussian StateParliament and Nazi Reichstag.", "score": -1}
{"id": "folio_validation_468", "prediction": "Heeinrich Scmidt (c) & (PrussianStateParliament(c) | NaziRangstag(c)))", "score": -1}
{"id": "folio_validation_469", "prediction": "Heinrich Schmidt (German( Heinrich) | Russian( Heinrich)))", "score": -1}
{"id": "folio_validation_469", "prediction": "Heinrich Schmidt (Hitler(Heldmann) & German(Heldmann) & Russian(Helen(Heldmann))", "score": -1}
{"id": "folio_validation_469", "prediction": "Heinrich Schmidt (Hitler(Heinz) -> (German(Heinz) | Russian(Heinz))))", "score": -1}
{"id": "folio_validation_469", "prediction": "Heinrich Schmidt (DeutscheMutterschaft oder RussischeMutterschaft)", "score": -1}
{"id": "folio_validation_469", "prediction": "Heinrich Schmidt(x) (German(x) | Russian(x)))", "score": -1}
{"id": "folio_validation_469", "prediction": "Heinrich Schmidt war(h) x.(German(h) | Russian(h)))", "score": -1}
{"id": "folio_validation_469", "prediction": "Heinrich Schmidt (German( Heinrich) | Russian( Heinrich))", "score": -1}
{"id": "folio_validation_469", "prediction": "Heinrich Schmidt(h) & (German(h) | Russian(h)))", "score": -1}
{"id": "folio_validation_469", "prediction": "Heinrich Schmidt(hereinafter(e) -> (German(e) | Russian(e)))", "score": -1}
{"id": "folio_validation_469", "prediction": "all x.(Schmidt(x) -> (German(x) | Russian(x)))", "score": 0}
{"id": "folio_validation_469", "prediction": "Heinrich Schmidt (German(h) | Russian(h)))", "score": -1}
{"id": "folio_validation_469", "prediction": "HeinrichSchmidt(h) -> (German(h) | Russian(h)))", "score": -1}
{"id": "folio_validation_469", "prediction": "Heinrich Schmidt (Deutsche(Hrsg.) | Russian(Hrsg.))", "score": -1}
{"id": "folio_validation_469", "prediction": "(German(hereinafter Schmidt) | Russian(heinemannschink))", "score": -1}
{"id": "folio_validation_469", "prediction": "Heinrich Schmidt (German) or Russian( HeinrichSchmidt))", "score": -1}
{"id": "folio_validation_470", "prediction": "all x.(NaziGermanPolitician(x) -> (PartOfPrussianStateParliament(x) & PartOfNaziRangestag(x)))", "score": 0}
{"id": "folio_validation_470", "prediction": "all x.(NaziGermanPolitician(x) -> (PartOf(x,PrussianStateParliament,nationalRegion) & PartOf(x,NaziRangestag)))", "score": 0}
{"id": "folio_validation_470", "prediction": "exists x.(NaziGermanPolitician(x) & PartOf(x,PrussianStateParlament) & PartOf(x,NaziRangstag))", "score": 0}
{"id": "folio_validation_470", "prediction": "all x y.((NaziGermanPolitician(x) & StateParliament(y) & NaziRangestag(x)) -> PartOf(x,y))", "score": 0}
{"id": "folio_validation_470", "prediction": "exists x.(NaziGermanPolitician(x) & PartOf(x,PA,PS) & PartOf(x,Rangestag))", "score": 0}
{"id": "folio_validation_470", "prediction": "exists x y.(NaziGermanPolitician(x) & NaziGovernment(y) & PartOf(x,y))", "score": 0}
{"id": "folio_validation_470", "prediction": "all x.(NaziGermanPolitician(x) -> (PartOfPrussianStateParliament(x) & PartOfNaziRandstag(x)))", "score": 0}
{"id": "folio_validation_470", "prediction": "exists x.(NaziGermanPolitician(x) & PrussianStateParlament(x) & NaziRangestag(x))", "score": 0}
{"id": "folio_validation_470", "prediction": "all x.(NaziGermanPolitician(x) -> (PartOfPrussianStateParliament(x) & PartOfNaziRichstag(x)))", "score": 0}
{"id": "folio_validation_470", "prediction": "exists x.(NaziGermanPolitician(x) & PrussianStateParliament(x) & NaziRangestag(x))", "score": 0}
{"id": "folio_validation_470", "prediction": "-exists x.(NaziGermanPolitician(x) & Politician(x) & ActsOf(x,PrussianStateParliament) & ActsOf(x,NaziRichstag))", "score": 0}
{"id": "folio_validation_470", "prediction": "all x.(NaziGermanPolitician(x) -> (PartOfStateParliament(x) & PartOfRangestag(x)))", "score": 0}
{"id": "folio_validation_470", "prediction": "exists x.(NaziGermanPolitician(x) & PartOfPrussianStateParliament(x) & PartOfNaziRangstag(x))", "score": 0}
{"id": "folio_validation_470", "prediction": "Several NaziGermanPoliticiansFoundToStateParliamentAndRangestag.", "score": -1}
{"id": "folio_validation_471", "prediction": "-exists x.(Politican(x) & NaziRangestag(x))", "score": 0}
{"id": "folio_validation_471", "prediction": "-exists x.(Politican(x) & NaziReichstag(x))", "score": 0}
{"id": "folio_validation_471", "prediction": "-exists x.(Politican(x) & PartOfNaziRangestag(x))", "score": 0}
{"id": "folio_validation_471", "prediction": "All x.(Politican(x) -> -PartOfNaziRangestag(x))", "score": -1}
{"id": "folio_validation_471", "prediction": "(-exists x.(Politician(x) & PartOfRandstag(x,y)))", "score": 0}
{"id": "folio_validation_471", "prediction": "-exists x.(Politican(x) & PartOfNaziReichstag(x))", "score": 0}
{"id": "folio_validation_471", "prediction": "-exists x.(Politican(x) & NaziRangstag(x))", "score": 0}
{"id": "folio_validation_471", "prediction": "(-PartOfNaziReichstag(politican))", "score": 0}
{"id": "folio_validation_471", "prediction": "-exists x.(Politican(x) & PartOfRandstag(x,Saudian))", "score": 0}
{"id": "folio_validation_471", "prediction": "-exists x.(Politician(x) & PartOfNaziRangestag(x))", "score": 0}
{"id": "folio_validation_471", "prediction": "all x.(Politican(x) -> -PartOfNaziRangestag(x))", "score": 0}
{"id": "folio_validation_471", "prediction": "-exists x.(Politician(x) & PartOfNaziRangstag(x))", "score": 0}
{"id": "folio_validation_472", "prediction": "all x.((LethalDisease(x)) -> LowSurvivalRate(x))", "score": 5}
{"id": "folio_validation_472", "prediction": "all x.(LethalDisease(x) -> LowSurvivalRate(x))", "score": 0}
{"id": "folio_validation_472", "prediction": "all x.((DeadlyDisease(x)) -> LowSurvivalRate(x))", "score": 0}
{"id": "folio_validation_472", "prediction": "all x.((Element(x) & LethalDisease(x)) -> LowSurvivalRate(x))", "score": 0}
{"id": "folio_validation_472", "prediction": "all x.((Disease(x) & Lethal(x)) -> LowSurvivalRate(x))", "score": 0}
{"id": "folio_validation_472", "prediction": "all x.(DeadlyDisease(x) -> LowSurvivalRate(x))", "score": 0}
{"id": "folio_validation_472", "prediction": "all x.((DeadlyDisease(x) & LowSurvivalRate(x)) -> LowSurvivalRate(x))", "score": 0}
{"id": "folio_validation_472", "prediction": "all x.((DefiantDisease(x)) -> LowSurvivalRate(x))", "score": 0}
{"id": "folio_validation_473", "prediction": "all x.(SevereCancer(x) -> DeadlyDisease(x))", "score": 0}
{"id": "folio_validation_473", "prediction": "all x.(SevereCancer(x) -> LethalDisease(x))", "score": 5}
{"id": "folio_validation_473", "prediction": "all x.(SevereCancer(x) -> LessTenderDisease(x))", "score": 0}
{"id": "folio_validation_473", "prediction": "all x.(SevereCancer(x) -> DietaryDisease(x))", "score": 0}
{"id": "folio_validation_473", "prediction": "all x.(SevereCancer(x) -> DiedalDisease(x))", "score": 0}
{"id": "folio_validation_473", "prediction": "all x.(SevereCancer(x) -> DeathlyDisease(x))", "score": 0}
{"id": "folio_validation_473", "prediction": "all x.(SevereCancer(x) -> DeathfulDisease(x))", "score": 0}
{"id": "folio_validation_474", "prediction": "all x.(BileDuctCancer(x) -> SevereCancer(x))", "score": 0}
{"id": "folio_validation_474", "prediction": "all x.(BileDupontCancer(x) -> SevereCancer(x))", "score": 0}
{"id": "folio_validation_474", "prediction": "all x.(BuleDuctCancer(x) -> SevereCancer(x))", "score": 0}
{"id": "folio_validation_474", "prediction": "all x.(BuleDuctCancer(x) -> SevereCarcinome(x))", "score": 0}
{"id": "folio_validation_474", "prediction": "all x.(BileDuitCancer(x) -> SevereCancerous(x))", "score": 0}
{"id": "folio_validation_474", "prediction": "all x.(BilleDuctCancer(x) -> SevereCancer(x))", "score": 0}
{"id": "folio_validation_474", "prediction": "(SevereCancer(bileDuctCancer) & Cancer(bileDuctCancer))", "score": 5}
{"id": "folio_validation_475", "prediction": "all x.(Cholangiocarcinoma(x) -> BileDuctCancer(x))", "score": 3}
{"id": "folio_validation_475", "prediction": "all x.(Cholangiocarcinoma(x) -> BileDoubleCancer(x))", "score": 0}
{"id": "folio_validation_475", "prediction": "all x.(Chlolangiocarcinoma(x) -> BileDuctCancer(x))", "score": 0}
{"id": "folio_validation_475", "prediction": "all x.(Clolangiocarcinoma(x) -> BileDuctCancer(x))", "score": 0}
{"id": "folio_validation_476", "prediction": "all x.(MildFlu(x) -> -LowSurvivalRate(x))", "score": 0}
{"id": "folio_validation_476", "prediction": "all x.((MildFlu(x) & NoSurvivalRate(x)) -> -LowSurvival(x))", "score": 0}
{"id": "folio_validation_476", "prediction": "all x.((MildFlu(x) & -LowSurvivalRate(x)) -> -LowSurvivalRate(x))", "score": 0}
{"id": "folio_validation_476", "prediction": "all x.((MildFlu(x) & -LowSurvivalRate(x)) -> -PoorNegativeSurvival(x))", "score": 0}
{"id": "folio_validation_476", "prediction": "exists x.(MildFlu(x) & -LowSurvivalRate(x))", "score": 0}
{"id": "folio_validation_476", "prediction": "all x.(MildFlu(x) -> LowSurvivalRate(x))", "score": 0}
{"id": "folio_validation_476", "prediction": "ALL x.((MildFlu(x) & -LowSurvivalRate(x)) -> -(LowSurvivalRate(x) & -LowSurvival(x)))", "score": -1}
{"id": "folio_validation_476", "prediction": "all x.((MildFlu(x) & -LowSurvivalRate(x)) -> -InFlu(x))", "score": 0}
{"id": "folio_validation_476", "prediction": "all x.((MildFlu(x) & LowSurvivalRate(x)) -> -DailyFlu(x))", "score": 0}
{"id": "folio_validation_476", "prediction": "all x.((MildFluid(x) & -LowSurvivalRate(x)) -> LowSurvival(x))", "score": 0}
{"id": "folio_validation_476", "prediction": "-exists x.((Person(x) & MildFlu(x)) -> LowSurvivalRate(x))", "score": 8}
{"id": "folio_validation_476", "prediction": "-exists x.(MildFlu(x) & LowSurvivalRate(x))", "score": 0}
{"id": "folio_validation_476", "prediction": "all x.((MildFlu(x) & LowSurvivalRate(x)) -> -LayoutRate(x))", "score": 0}
{"id": "folio_validation_476", "prediction": "all x.((MildFlu(x) & -LowSurvivalRate(x)) -> -SurvivalRate(x))", "score": 0}
{"id": "folio_validation_477", "prediction": "all x.((ColoredCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x))", "score": 0}
{"id": "folio_validation_477", "prediction": "all x.((ColoredCancer(x) & BileDuctCancer(x) & SurvivalRateLow(x)) -> -BileDuctCancer(x))", "score": 0}
{"id": "folio_validation_477", "prediction": "all x.((ColoredCancerous(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x))", "score": 0}
{"id": "folio_validation_477", "prediction": "all x.((ColoredCancer(x) & BileDoubleCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x))", "score": 0}
{"id": "folio_validation_477", "prediction": "all x.((ColorectalCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x))", "score": 0}
{"id": "folio_validation_477", "prediction": "all x.((ColoredCancer(x) & BileDutCancer(x) & LowSurvivalRate(x)) -> -BileDutCancer(x))", "score": 0}
{"id": "folio_validation_477", "prediction": "all x.((ColoredCancer(x) & BileDductCancer(x) & LowSurvivalRate(x)) -> -BileDductCancer(x))", "score": 0}
{"id": "folio_validation_477", "prediction": "all x.((ColoredCancer(x) & BileDuckCancer(x) & SurvivalRateLow(x)) -> -BilleDuckCancer(x))", "score": 0}
{"id": "folio_validation_477", "prediction": "all x.((ColonialCancer(x) & BileDuctCancer(x) & LowSurvivalRate(x)) -> -BileDuctCancer(x))", "score": 0}
{"id": "folio_validation_477", "prediction": "all x.((ColorectalCancer(x) & BileDuctCancer(x) & SurvivalRateLow(x)) -> -BileDuctCancer(x))", "score": 0}
{"id": "folio_validation_478", "prediction": "all x.(ColorectalCancer(x) -> (SevereCancer(x) & ThrificialCancer(x) & SevereCancer(x)))", "score": 0}
{"id": "folio_validation_478", "prediction": "all x.(ColoredCancer(x) -> SevereCancer(x))", "score": 0}
{"id": "folio_validation_478", "prediction": "all x.(ColonialCancer(x) -> (SevereCancer(x) & Colorectal(x)))", "score": 0}
{"id": "folio_validation_478", "prediction": "all x.(ColorectalCancer(x) -> (SevereCancer(x) & SevereCancer(x)))", "score": 0}
{"id": "folio_validation_478", "prediction": "all x.(ColorectalCancer(x) -> SevereCancer(x))", "score": 0}
{"id": "folio_validation_478", "prediction": "all x.(ColoredCancer(x) -> (SevereCancer(x) & SevereCancer(x)))", "score": 0}
{"id": "folio_validation_478", "prediction": "all x.(ColorectalCancer(x) -> (SevereCancer(x) & SterileCancer(x) & DetectsCancer(x) & SevereCancer(x)))", "score": 0}
{"id": "folio_validation_478", "prediction": "all x.(ColoredCancer(x) -> (SevereCancer(x) & ColorectalCancer(x)))", "score": 0}
{"id": "folio_validation_478", "prediction": "all x.(ColorectalCancer(x) -> (SevereCancer(x) & SevereCancer(x) & ColoidCancer(x) & SevereCancer(x)))", "score": 0}
{"id": "folio_validation_478", "prediction": "all x.(ColoredCancer(x) -> (SevereCancer(x) & Cholera(x)))", "score": 0}
{"id": "folio_validation_478", "prediction": "all x.((ColorectalCancer(x) & SevereCancer(x)) -> ColorectalCancer(x))", "score": 0}
{"id": "folio_validation_479", "prediction": "all x.((ColoredCancer(x) & (BileDductCancerous(x) | Cholangiocarcinoma(x))) -> (BileDductCancer(x) & MildFlu(x)))", "score": 0}
{"id": "folio_validation_479", "prediction": "all x.((ColonialCancer(x) & (BileDuctCancer(x) | Cholangiocarcinoma(x))) -> (BileDuctCancer(x) & MildFlu(x)))", "score": 1}
{"id": "folio_validation_479", "prediction": "all x.((ColonialCancel(x) & (BileDuctCancer(x) | Cholangiocarcinoma(x))) -> (BileDuctCancer(x) & MildFlu(x)))", "score": 0}
{"id": "folio_validation_479", "prediction": "all x.((ColonialCancer(x) & (BileDuckCancer(x) | Cholangiocarcinoma(x))) -> (BileDuckCancer(x) & MildFlu(x)))", "score": 1}
{"id": "folio_validation_479", "prediction": "all x.((ColorectalCancer(x) & (BileDuctCancer(x) | Cholangiocarcinoma(x))) -> (BileDuctCancer(x) & MildFlu(x)))", "score": 1}
{"id": "folio_validation_479", "prediction": "all x.((ColonialCancer(x) & OrChlorophylla(x)) -> (BileDuitCancer(x) & MildFlu(x)))", "score": 0}
{"id": "folio_validation_479", "prediction": "all x y.((ColonialCancer(x) & BileDuctCancer(x) & Cholangiocarcinoma(x)) -> (BileDuctCancer(y) & MildFlu(y)))", "score": 1}
{"id": "folio_validation_479", "prediction": "all x.((ColonialCancerous(x) & (BileDuctCancer(x) | Cholangiocarcinoma(x))) -> (BileDuctCancer(x) & MildFlu(x)))", "score": 0}
{"id": "folio_validation_479", "prediction": "all x.(Cream(x) -> ((BileDuctCancer(x) | Cholangiocarcinoma(x))) & (BileDuctCancer(x) & MildFlu(x))))", "score": -1}
{"id": "folio_validation_479", "prediction": "all x.((ColonialCancer(x) & (BileDductCancer(x) | Cholangiocarcinoma(x))) -> (BileDductCancer(x) and MildFlu(x)))", "score": 1}
{"id": "folio_validation_479", "prediction": "all x.((ColorectalCancer(x) & (BileDductCancer(x) | Cholangiocarcinoma(x))) -> (BileDductCancer(x) & MildFlu(x)))", "score": 1}
{"id": "folio_validation_479", "prediction": "all x.((ColoredCancer(x) & (BileDuctCancer(x) | Cholangiocarcinoma(x))) -> (BileDuctCancer(x) & MildFlu(x)))", "score": 1}
{"id": "folio_validation_479", "prediction": "all x.((ColoradotalCancer(x) & (BileDductCancerous(x) | Cholangiocarcinoma(x))) -> (BileDductCancer(x) & MildFlu(x)))", "score": 0}
{"id": "folio_validation_479", "prediction": "all x.((CreolectalCancer(x) & (BiliDauctCancer(x) | Cholangiocarcinoma(x))) -> (BiliDauctCancer(x) & MildFlu(x)))", "score": 0}
{"id": "folio_validation_479", "prediction": "all x.((ColonialCancer(x) & (BilleDuctCancer(x) | Cholangiocarcinoma(x))) -> (BileDuctCancer(x) & MildFlu(x)))", "score": 1}
{"id": "folio_validation_480", "prediction": "all x.((ColorectalCancer(x) & -MildFlu(x) & Cholangiocarcinoma(x)) -> (BileDuctCancer(x) | Cholangiocarcinoma(x)))", "score": 0}
{"id": "folio_validation_480", "prediction": "all x.((ColonialCancer(x) & -MildFlu(x) & Cholangiocarcinoma(x)) -> (BileDuctCancer(x) | Cholangiocarcinoma(x)))", "score": 0}
{"id": "folio_validation_480", "prediction": "all x.((ColodentalCancer(x) & -MildFlu(x) & Cholangiocarcinoma(x)) -> (IndividualCancer(x) | IndividualCancer(x)))", "score": 0}
{"id": "folio_validation_480", "prediction": "all x.((ColoredCancer(x) & -MildFlu(x) & Cholangiocarcinoma(x)) -> (BileDuctCancer(x) | Cholangiocarcinoma(x)))", "score": 0}
{"id": "folio_validation_480", "prediction": "all x.((ColorectalCancer(x) & NoMildFlu(x) & Cholangiocarcinoma(x)) -> (BileDuctCancer(x) | Cholangiocarcinoma(x)))", "score": 0}
{"id": "folio_validation_480", "prediction": "all x.((ColorectalCancer(x) & -MildFlu(x) & Cholangiocarcinoma(x)) -> ((BileDuctCancer(x) | Cholangiocarcinoma(x))))", "score": 0}
{"id": "folio_validation_481", "prediction": "all x.(EatsSaladsRegularly(x) -> VeryConsciousOfHealthAndEatingHabits(x))", "score": 0}
{"id": "folio_validation_481", "prediction": "all x.((Person(x) & EatsSaladsRegularly(x)) -> ConsciousOfHealthAndEatingHabits(x))", "score": 0}
{"id": "folio_validation_481", "prediction": "all x.((Person(x) & EatsSaladsRegularly(x)) -> VeryConsciousEstablishmentAboutHealthAndHabits(x))", "score": 0}
{"id": "folio_validation_481", "prediction": "all x.((Person(x) & EatsLadiesRegularly(x)) -> VeryConsciousAboutHealthAndEatingHabits(x))", "score": 0}
{"id": "folio_validation_481", "prediction": "all x.((EatsSalads(x) & ConsciousAbout(x,Health,EatingHabits)) -> Concious(x))", "score": 0}
{"id": "folio_validation_481", "prediction": "all x.((Person(x) & EatsSaladsRegularly(x)) -> (ConcentredOfHealth(x) & ConsciousOfEatingHabits(x)))", "score": 0}
{"id": "folio_validation_481", "prediction": "all x.(EatsSaladsRegularly(x) -> (ConsciousOfHealthAndEatingHabits(x)))", "score": 0}
{"id": "folio_validation_481", "prediction": "all x.((Personal(x) & EatsSaladsRegularly(x)) -> VeryConsciousOfHealthAndEatingHabits(x))", "score": 0}
{"id": "folio_validation_481", "prediction": "all x.(EatsRegularSalads(x) -> ConsciousEatingHabits(x))", "score": 0}
{"id": "folio_validation_481", "prediction": "all x.(EatsSaladsRegularly(x) -> (ConsciousOfHealth(x) & ConsciousOfEatingHabits(x)))", "score": 0}
{"id": "folio_validation_481", "prediction": "all x.((Person(x) & EatsSaladsRegularly(x)) -> ConsciousAboutHealthAndEatingHabits(x))", "score": 0}
{"id": "folio_validation_481", "prediction": "all x.((Person(x) & EatsSaladsRegularly(x)) -> VeryConsciousOverHealthAndEatingHabits(x))", "score": 0}
{"id": "folio_validation_481", "prediction": "all x y.((Person(x) & EatsSalad(x) & Regular(y)) -> VeryConsciousOfHealthAndEatingHabits(x))", "score": 0}
{"id": "folio_validation_481", "prediction": "all x.((Person(x) & EatsSaladsRegularly(x)) -> VeryConsciousAboutHealthAndEatingHouseholds(x))", "score": 0}
{"id": "folio_validation_481", "prediction": "all x.(EatsSaladsRegularly(x) -> VeryConcernedAboutHealthAndEatingHabits(x))", "score": 0}
{"id": "folio_validation_482", "prediction": "all x.((Person(x) & grewUpInHealthConsciousHomes(x)) -> EatsSaladsRegularly(x))", "score": 0}
{"id": "folio_validation_482", "prediction": "all x.((Person(x) & grewUpInHealthConsciousChildbirthHomes(x)) -> EatsSaladsRegularly(x))", "score": 0}
{"id": "folio_validation_482", "prediction": "all x.((Person(x) & GrowingUpInHealthConsciousChildrenHomes(x)) -> HealthyEatsLeafs(x))", "score": 0}
{"id": "folio_validation_482", "prediction": "all x.((Person(x) & GrownUpInHealthConsciousChildrenHouses(x)) -> FrequentlyEatsSalads(x))", "score": 0}
{"id": "folio_validation_482", "prediction": "all x.((Person(x) & GrownUpInHealthConsciousHomes(x) & Healthy(x)) -> EatsSaladsRegularly(x))", "score": 0}
{"id": "folio_validation_482", "prediction": "all x.((Person(x) & GrownUpInHealthConsciousChildren(x)) -> EatsSaladsRegularly(x))", "score": 0}
{"id": "folio_validation_482", "prediction": "all x.((Person(x) & GrownUpInHealthConsciousHarmony(x)) -> ServesDilutionsRegularly(x))", "score": 0}
{"id": "folio_validation_482", "prediction": "all x y.((People(x) & GrowingUpInHealthConsciousHouses(x,y)) -> EatsSaladsRegularly(x))", "score": 0}
{"id": "folio_validation_482", "prediction": "all x.((Person(x) & GrashedInHealthConsciousChildrenHomes(x)) -> EatsSaladsRegularly(x))", "score": 0}
{"id": "folio_validation_482", "prediction": "all x.((Person(x) & GrownUpInHealthConsciousCrownhomes(x)) -> EatsSaladsRegularly(x))", "score": 0}
{"id": "folio_validation_482", "prediction": "all x.((Person(x) & GrowingUpInHealthConsciousChildrenHomes(x)) -> EatsSaladsRegularly(x))", "score": 0}
{"id": "folio_validation_482", "prediction": "all x.((Person(x) & GrownUpInHealthConsciousChildrenHomes(x)) -> EatsSaladsRegularly(x))", "score": 0}
{"id": "folio_validation_482", "prediction": "all x.((People(x) & grewUpInHealthConsciousChildrenHome(x)) -> EatsSaladsRegularly(x))", "score": 0}
{"id": "folio_validation_482", "prediction": "all x.((Person(x) & GrownUpInHealthConsciousHomes(x)) -> EatsSaladsRegularly(x))", "score": 0}
{"id": "folio_validation_483", "prediction": "all x.((Person(x) & FulfillsNutritionalEverydayIntake(x)) -> HealthConcernedHouses(x))", "score": 0}
{"id": "folio_validation_483", "prediction": "all x.((Person(x) & FulfillsNutritionalDailyIntakes(x)) -> GrowsUpInHealthConsciousHouses(x))", "score": 0}
{"id": "folio_validation_483", "prediction": "all x.((Person(x) & FulfillsNutritionalDailyIntakes(x)) -> grewUpInHealthConsciousCrownhome(x))", "score": 0}
{"id": "folio_validation_483", "prediction": "all x.((Person(x) & FulfillsNutritionalDailyIntakes(x)) -> grewUpInHealthConsciousCrownhomes(x))", "score": 0}
{"id": "folio_validation_483", "prediction": "all x.(FullsNutritionalDaylyIntakes(x) -> grewUpInHealthConsciousHomes(x))", "score": 0}
{"id": "folio_validation_483", "prediction": "all x.(FullsNutritionalDaylyIntakes(x) -> GrowsUpInHealthConsciousHomes(x))", "score": 0}
{"id": "folio_validation_483", "prediction": "all x.((Person(x) & FulfillsNutritionalDailyIntakes(x)) -> GrowsUpInHealthConsciousHomes(x))", "score": 0}
{"id": "folio_validation_483", "prediction": "all x y.((Person(x) & FullsNutritionalDailyIntakes(x)) -> GrowingUpInHealthConsciousCrowdingHomes(y))", "score": 0}
{"id": "folio_validation_483", "prediction": "all x.((Person(x) & FulfillsNutritionalDailyIntakes(x)) -> GrownUpInHealthConsciousChildrenHomes(x))", "score": 0}
{"id": "folio_validation_483", "prediction": "all x.((Person(x) & FulfillsNutritionalDailyIntakes(x,y)) -> grewUpInHealthConsciousHouses(x))", "score": 0}
{"id": "folio_validation_483", "prediction": "all x.((PerformsNutritionalDailyIntakes(x) & HealthConsciousHomes(x)) -> GrowsUpIn(x))", "score": 0}
{"id": "folio_validation_483", "prediction": "all x.((Person(x) & FulfillsNationalNutritionalDiaryIntakes(x)) -> GrownUpInHealthConsciousCrowdhomes(x))", "score": 0}
{"id": "folio_validation_483", "prediction": "all x.((Person(x) & FulfillsNutritionalDailyIntakes(x)) -> GrowsInHealthConsciousHomes(x))", "score": 0}
{"id": "folio_validation_483", "prediction": "all x.((Person(x) & FulfillsNutritionalDaylyIntakes(x)) -> HealthConsciousHome(x))", "score": 0}
{"id": "folio_validation_483", "prediction": "all x.(FalledNutritionalPercentage(x) -> HealthConsciousChildrenHome(x))", "score": 0}
{"id": "folio_validation_484", "prediction": "all x y.((Person(x) & Parents(y) & GoodRelationships(x,y)) -> FulfillsNutritionalDailyIntakes(x))", "score": 0}
{"id": "folio_validation_484", "prediction": "all x.((Person(x) & GoodRelationshipsWithParents(x)) -> FulfillsNutritionalDailyIntakes(x))", "score": 0}
{"id": "folio_validation_484", "prediction": "all x.(FullsNutritionalDailyIntakes(x) -> GoodRelationshipsWithParents(x))", "score": 0}
{"id": "folio_validation_484", "prediction": "all x.((People(x) & GoodRelationships(x)) -> FulfillsNutritionalDailyIntakes(x))", "score": 0}
{"id": "folio_validation_484", "prediction": "all x.((Person(x) & GoodRelationshipsToParents(x)) -> FulfillsNutritionalDailyIntakes(x))", "score": 0}
{"id": "folio_validation_484", "prediction": "all x y.((Person(x) & Parent(y) & GoodRelationships(x,y)) -> FulfillsNutritionalDailyIntakes(x))", "score": 0}
{"id": "folio_validation_484", "prediction": "all x y.((Person(x) & RelationshipWithParents(x) & Good(x,y)) -> FulfillsNutritionalDailyIntakes(x))", "score": 0}
{"id": "folio_validation_484", "prediction": "all x.((Person(x) & GoodBelongingsWithParents(x)) -> FulfillsNutritionalDailyIntakes(x))", "score": 0}
{"id": "folio_validation_484", "prediction": "all x.(GoodRelationshipsWithParents(x) -> FulfillsNutritionalDailyIntakes(x))", "score": 0}
{"id": "folio_validation_484", "prediction": "all x.((Person(x) & GoodRelationshipsWithParents(x)) -> FulfillsNutritiveDailyIntakes(x))", "score": 0}
{"id": "folio_validation_484", "prediction": "all x.((Person(x) & GoodRelationships(x)) -> FulfillsNutritionalDailyIntakes(x))", "score": 0}
{"id": "folio_validation_484", "prediction": "all x.(GreatRelationshipsWithParents(x) -> FulfillsNutritionalDailyIntakes(x))", "score": 0}
{"id": "folio_validation_484", "prediction": "all x.((Person(x) & GoodRelationships(x)) -> FulfillNutritionalDaylyIntakes(x))", "score": 0}
{"id": "folio_validation_484", "prediction": "all x.((People(x) & GoodRelationshipsWithParents(x)) -> FulfillsNutritionalDailyIntakes(x))", "score": 0}
{"id": "folio_validation_484", "prediction": "all x.((Person(x) & GoodRelationshipsWithParents(x)) -> FulfillsNutritionalIntakes(x))", "score": 0}
{"id": "folio_validation_485", "prediction": "all x.((Person(x) & GoodRelationships(x)) -> -EatSaladsRegularly(x))", "score": 0}
{"id": "folio_validation_485", "prediction": "all x.((Person(x) & GoodRelationshipsToParents(x)) -> -Eat(x,Salads))", "score": 0}
{"id": "folio_validation_485", "prediction": "all x.((Person(x) & GoodRelationshipsWithParents(x)) -> -EatSaladsRegularly(x))", "score": 0}
{"id": "folio_validation_485", "prediction": "all x.((People(x) & GoodRelationships(x)) -> -EatsSaladsRegularly(x))", "score": 0}
{"id": "folio_validation_485", "prediction": "all x.((Person(x) & GoodRelationshipsWithParents(x)) -> -EatsSaladsRegularly(x))", "score": 0}
{"id": "folio_validation_485", "prediction": "all x.((Person(x) & GoodRelationships(x)) -> -EatsSaladsRegularly(x))", "score": 0}
{"id": "folio_validation_485", "prediction": "all x.(BondRelationshipsWithParents(x) -> -(EatSaladsRegularly(x) & Has(x,Parents)))", "score": 0}
{"id": "folio_validation_485", "prediction": "all x.((Person(x) & GoodParentalRelationships(x)) -> -EatsSaladsRegularly(x))", "score": 0}
{"id": "folio_validation_485", "prediction": "all x.((Considers(x) & HasGoodRelationships(x)) -> -EatSaladsRegularly(x))", "score": 0}
{"id": "folio_validation_485", "prediction": "all x.((Person(x) & GoodRelationshipsWithParents(x)) -> -(EatsSaladsRegularly(x) & Regular(x)))", "score": 0}
{"id": "folio_validation_485", "prediction": "all x.(GoodRelationships(x),Parents(x)) -> -EatSaladsRegularly(x))", "score": -1}
{"id": "folio_validation_485", "prediction": "all x.((Person(x) & GoodRelationships(x) & Parents(x)) -> -EatsSaladsRegularly(x))", "score": 0}
{"id": "folio_validation_486", "prediction": "all x.((Person(x) & VisitsGym(x) & AtLeastOnceADay(x)) -> FulfillsDiaryicalIntakes(x))", "score": 0}
{"id": "folio_validation_486", "prediction": "all x.((Person(x) & VisitMyGym(x) & AtLeastOfDiary(x)) -> FulfillsNutritionalIntakes(x))", "score": 0}
{"id": "folio_validation_486", "prediction": "all x.((Person(x) & VisitsGym(x) & AtLeastOneDay(x)) -> FulfillsDailyNutritionalIntakes(x))", "score": 0}
{"id": "folio_validation_486", "prediction": "all x.((Person(x) & VisitsGym(x,y) & DailyNutritionalIntakes(y,x)) -> Fulfills(x,y))", "score": 0}
{"id": "folio_validation_486", "prediction": "all x.((Person(x) & VisitsGym(x) & AtLeastTimeADay(x)) -> FulfillsNutritionalIntakes(x))", "score": 0}
{"id": "folio_validation_486", "prediction": "all x.((Person(x) & VisitsGym(x) & TwiceADay(x)) -> PerformsNutritionalIntakes(x))", "score": 0}
{"id": "folio_validation_486", "prediction": "all x.((Person(x) & VisitsGym(x) & DailyNutritionalIntakes(x)) -> Fulfills(x,nutritionalIntakes))", "score": 0}
{"id": "folio_validation_486", "prediction": "all x.((Person(x) & VisitsGym(x) & AllOfDaysAtLeast(x)) -> FulfillsDailyNutritionalIntakes(x))", "score": 0}
{"id": "folio_validation_486", "prediction": "all x.((Person(x) & VisitsGym(x,x) & TwiceADay(x)) -> FulfillsNutritionalIntakes(x))", "score": 0}
{"id": "folio_validation_486", "prediction": "all x.((Person(x) & VisitsGym(x,y) & AtLeastOnceADay(x)) -> FulfillsDiaryneticIntake(x))", "score": 0}
{"id": "folio_validation_486", "prediction": "all x y.((Person(x) & VisitsGym(x,y) & AtLeastOnceADay(y) & VisitsGym(x,y)) -> FulfillsNutritionalIntakes(x))", "score": 0}
{"id": "folio_validation_486", "prediction": "all x.((People(x) & VisitsGym(x) & -PartOfDay(x)) -> FulfillsNutritionalIntakes(x))", "score": 0}
{"id": "folio_validation_486", "prediction": "all x.((PerformsDailyNutritionalIntakes(x) & VisitGym(x) & AtLeastOnceADay(x)) -> FulfillsDailyNutritionalIntakes(x))", "score": 0}
{"id": "folio_validation_486", "prediction": "all x.((Person(x) & VisitgymAtLeastOneDay(x)) -> FulfillsDailyNutritionalIntakes(x))", "score": 0}
{"id": "folio_validation_486", "prediction": "all x.((Person(x) & VisitsGym(x) & AtLeastOneDay(x)) -> FulfillsNutritionalIntakes(x))", "score": 0}
{"id": "folio_validation_486", "prediction": "all x.(AtLeastOnceADay(x) -> FulfilldDietaryNutritionalIntakes(x))", "score": 0}
{"id": "folio_validation_487", "prediction": "Taylor eatsSaladsRegularly(Taylor)", "score": -1}
{"id": "folio_validation_487", "prediction": "(EatsSaladsRegularly(Taylor) -> TaylorFood(Taylor))", "score": 0}
{"id": "folio_validation_487", "prediction": "Taylor eatsSaladsRegularly.", "score": -1}
{"id": "folio_validation_487", "prediction": "the y.((Taylor(y) & Salad(y)) -> EatsRegularly(y,x))", "score": -1}
{"id": "folio_validation_487", "prediction": "all x y.((Taylor(x) & Salad(y)) -> EatsRegularly(x,y))", "score": 0}
{"id": "folio_validation_487", "prediction": "(Taylor(Taylor) & Eats(Taylor,Y))", "score": 0}
{"id": "folio_validation_487", "prediction": "-EatsDaily(Taylor)", "score": 0}
{"id": "folio_validation_487", "prediction": "-EatsSaladsRegularly(Taylor)", "score": 0}
{"id": "folio_validation_487", "prediction": "(EatsSaladsRegularly(Taylor))", "score": 0}
{"id": "folio_validation_487", "prediction": "All x.(Taylor(x) -> EatsSaladsRegularly(x))", "score": -1}
{"id": "folio_validation_487", "prediction": "Taylor eatsSaladsRegularly(tartanow)", "score": -1}
{"id": "folio_validation_487", "prediction": "(Eats(Taylor,Salad) & Regularly(Taylor,Salad))", "score": 0}
{"id": "folio_validation_488", "prediction": "all x.(Taylor(x) -> VisitsGym(x))", "score": 0}
{"id": "folio_validation_488", "prediction": "all x y.((Taylor(x) & Gym(y) & Visits(x,y)) -> OnlyonceAtMoment(x))", "score": 0}
{"id": "folio_validation_488", "prediction": "all x y.((Taylor(x) & Gym(y)) -> VisitsAtLeastOneTime(x,y))", "score": 0}
{"id": "folio_validation_488", "prediction": "all x y.((Taylor(x) & Gym(y)) -> Visits(x,y))", "score": 0}
{"id": "folio_validation_488", "prediction": "all x.(Taylor(x) -> exists y.(Gym(y) & Visits(x,y))))", "score": -1}
{"id": "folio_validation_488", "prediction": "all x.(TaylorVisitsGym(x) -> 1Day(x))", "score": 0}
{"id": "folio_validation_488", "prediction": "all x y z.((Taylor(x) & Gym(y) & (Has(z) | Has(z)))) -> Visits(x,y,z))", "score": -1}
{"id": "folio_validation_488", "prediction": "all x.(TaylorVisitsBetween(x,y,z) -> AtLeastOneOfDates(z))", "score": 0}
{"id": "folio_validation_488", "prediction": "all x.(Taylor(x) -> (VisitsGym(x) & AtLeastOneDay(x)))", "score": 0}
{"id": "folio_validation_488", "prediction": "-StacyVisitsYogaSinceOfDay(Taylor))", "score": -1}
{"id": "folio_validation_488", "prediction": "all x.(Taylor(x) & VisitsGym(x,y) & AtLeastOneOfDay(y))", "score": 0}
{"id": "folio_validation_488", "prediction": "all x.((Taylor(x) & VisitsGym(x,x)) -> AtLeastOnlyOnceADay(x))", "score": 0}
{"id": "folio_validation_488", "prediction": "(YearLike(Taylor) -> VisitsGym(Taylor))", "score": 0}
{"id": "folio_validation_488", "prediction": "all x.(Taylor(x) -> (BetweenDays(x) & VisitsGym(x)))", "score": 0}
{"id": "folio_validation_488", "prediction": "all x y.((Taylor(x) & Gym(y)) -> VisitsAtLeastIfOnceADay(x,y))", "score": 0}
{"id": "folio_validation_489", "prediction": "(StaysTaylor(Taylor) & -(GrowsUpInHealthConsciousHome(Taylor) | VisitsGym(Taylor))))", "score": -1}
{"id": "folio_validation_489", "prediction": "neither grew up in a health-conscious childhood home nor visits the gym at least once a day.", "score": -1}
{"id": "folio_validation_489", "prediction": "all x y.((T Taylor(x) & Yogi)) -> (-FungaciesChildren(y) & HealthConscious(y) & -GymOpportunities(y)))", "score": -1}
{"id": "folio_validation_489", "prediction": "all x.(Taylor(x) -> (-grewUpInHealthConsciousHome(x) & -VisitsGym(x) & -(GrowsUpInHealthConsciousHome(x) & SeesGym(x) & SeesGym(x) & VisitsGym(x))))", "score": 0}
{"id": "folio_validation_489", "prediction": "-(GrowthConfidenceInChildren(Taylor) & -(GrowthConfidenceInChildren(Taylor) | VisitsGymAtLeastOneDay(Taylor)))", "score": 0}
{"id": "folio_validation_489", "prediction": "(-(GrowthConscious(Taylor) | VisitsGymAtLeastOneDay(Taylor)))", "score": 0}
{"id": "folio_validation_489", "prediction": "(-(GrowsUpInHealthConsciousCollegeHome(Taylor) & (-GrowthConsciousKindhoodHome(Taylor) | VisitsGymAtLeastOneDay(Taylor))))", "score": 0}
{"id": "folio_validation_489", "prediction": "(LikelyToys(Taylor) & -(GrowsUpHealthConfidenceHome(Taylor) | VisitsGymAtLeastOnlySecondary(Taylor))))", "score": -1}
{"id": "folio_validation_489", "prediction": "(-(GrowthConsciousCrownhome(MatthewTavist) | VisitsTheGymOnlyOnceADay(MatthewTavist)))", "score": 0}
{"id": "folio_validation_489", "prediction": "all x.((Taylor(x) & -(GrowsUpHealthConsciousHome(x) & VisitsGym(x)) | (-GrowsUpHealthConsciousHome(x) & VisitsGym(x))))", "score": 0}
{"id": "folio_validation_489", "prediction": "((ToyTaylor(Taylor) & -(GrimedUpInHealthConsciousCrownHome(Taylor) | VisitsGym(Taylor))))", "score": 0}
{"id": "folio_validation_489", "prediction": "in which Taylor ((HealthConsciousChildhoodHome(t) & -HealthConsciousChildren(t)) -> Visits(t,g)))", "score": -1}
{"id": "folio_validation_489", "prediction": "(-(TaylorGatesUpInHealthConsciousChildhoodHome(Taylor) & -(TaylorGoesToGymAtLeastOneDay(Taylor)) | (TAylorGymAtLeastOneDay(Tom Taylor)))))", "score": -1}
{"id": "folio_validation_489", "prediction": "((Taylor(a) & -GrowsUpInHealthConsciousHome(a)) | (GymTotallyAtLeastOneDay(q) & AtLeastOneDay(q))))", "score": -1}
{"id": "folio_validation_489", "prediction": "(-(HasHealthConsciousInCrownship(Tather) | VisitsGym(Taylor)))", "score": 0}
{"id": "folio_validation_490", "prediction": "[BG] The OlympicGames(x) -> SportingEvent(x))", "score": -1}
{"id": "folio_validation_490", "prediction": "[BG] The OlympicGames is a sportingevent.", "score": -1}
{"id": "folio_validation_490", "prediction": "[BG] [OlympicGames(Olympics) & SportingEvent(Olympics)]", "score": -1}
{"id": "folio_validation_490", "prediction": "[BG] The OlympicGames(x) -> SportsalEvent(x))", "score": -1}
{"id": "folio_validation_490", "prediction": "[BG] The OlympicGames(Olympics) is a sportingEvent(Olympics)", "score": -1}
{"id": "folio_validation_490", "prediction": "[BG] The OlympicGames is a sportingEvent.", "score": -1}
{"id": "folio_validation_490", "prediction": "[BG] The OlympicGamesisSportingEvent(x)", "score": -1}
{"id": "folio_validation_490", "prediction": "all x.(OlympicGames(x) -> SportingEvent(x))", "score": 0}
{"id": "folio_validation_490", "prediction": "[BG] -SportalEvent(Olympics)", "score": -1}
{"id": "folio_validation_490", "prediction": "[BG] (OlympicGames(Olympics) & SportiveEvent(OlympicGames))", "score": -1}
{"id": "folio_validation_490", "prediction": "[BG] [OlympicGames(x) | SportingEvent(x)]", "score": -1}
{"id": "folio_validation_490", "prediction": "all x.(OlympicGame(x) -> SportingEvent(x))", "score": 0}
{"id": "folio_validation_490", "prediction": "(SportingEvent(OlympicGames) & [BG]]", "score": -1}
{"id": "folio_validation_491", "prediction": "Die letzte OlympiadeGames(r) & inTokyo(r))", "score": -1}
{"id": "folio_validation_491", "prediction": "all x.(OlympicGame(x) -> InTokyo(x))", "score": 0}
{"id": "folio_validation_491", "prediction": "(LastOlympicGame(i) & HeldInTokyo(i))", "score": 0}
{"id": "folio_validation_491", "prediction": "All x.(OlympicGames(x) -> InTokyo(x))", "score": -1}
{"id": "folio_validation_491", "prediction": "all x.(OlympicGame(x) & InTokyo(x))", "score": 1}
{"id": "folio_validation_491", "prediction": "Slightly-LastOlympicGames(2004,Tokyo)", "score": -1}
{"id": "folio_validation_491", "prediction": "all x y.((OlympicGames(x) & Tokyo(y)) -> InGames(x,y))", "score": 0}
{"id": "folio_validation_491", "prediction": "UltimatumOlympicGames(2010) & InTokyo(2010))", "score": -1}
{"id": "folio_validation_491", "prediction": "all x.(OlympicGames(x) -> InTokyo(x))", "score": 0}
{"id": "folio_validation_491", "prediction": "(OlympicGallup(x) & InTokyo(x))", "score": 0}
{"id": "folio_validation_491", "prediction": "-OlympicGames(2013) -Tokyo.", "score": -1}
{"id": "folio_validation_491", "prediction": "all x y.((OlympicGames(x) & Tokyo(y)) -> LastInOrbit(x,y))", "score": 0}
{"id": "folio_validation_491", "prediction": "thesuesOlympicGames(Season) & OlympicDisaster(Tokyo))", "score": -1}
{"id": "folio_validation_491", "prediction": "The last OlympicGamesBetweenTokyo and InTokyo.", "score": -1}
{"id": "folio_validation_491", "prediction": "the last olympic games took place in Tokyo.", "score": -1}
{"id": "folio_validation_492", "prediction": "in Tokyo. (UnitedStates(UnitedStates) & MostChambers(UnitedStates))", "score": -1}
{"id": "folio_validation_492", "prediction": "the most medals won in Tokyo.", "score": -1}
{"id": "folio_validation_492", "prediction": "all x y.((UnitedState(x) & Medal(y) & Winner(x,y)) -> InTokyo(x,y))", "score": 0}
{"id": "folio_validation_492", "prediction": "all x.(DonatedMoreMedal(x,Tokyo) -> UnitedStates(x))", "score": 0}
{"id": "folio_validation_492", "prediction": "(MostWon(UnitedStates) & MostWon(UnitedStates) & MostWinned(UnitedStates))", "score": 0}
{"id": "folio_validation_492", "prediction": "all x y z.((UnitedState(x) & Tokyo(y) & Medal(z)) -> WinsMostIn(x,y,z))", "score": 0}
{"id": "folio_validation_492", "prediction": "all x y.((UnitedStates(x) & Tokyo(y)) -> WonMostMedalsIn(x,y))", "score": 0}
{"id": "folio_validation_492", "prediction": "(MostMedalSwiss((UnitedStates(UnitedStates) & InTokyo(UnitedStates))", "score": -1}
{"id": "folio_validation_492", "prediction": "(MostGolden(UnitedStatesE) -> WinsMostMetalsInTokyo(UnitedStates))", "score": 0}
{"id": "folio_validation_492", "prediction": "all x.((UnitedStates(x) & MostMedalWin(x,Tokio)) -> MostMedalsWin(x,Tokio))", "score": 0}
{"id": "folio_validation_492", "prediction": "all x y z.((UnitedState(x) & Tokyo(y) & Medal(z)) -> WonMostIn(x,z))", "score": 0}
{"id": "folio_validation_492", "prediction": "All x.(UnitedStates(x) -> AddedMoreMedals(x,Tokyo))", "score": -1}
{"id": "folio_validation_492", "prediction": "all x y.((UnitedStates(x) & Tokyo (y) & MostMedal(z))) -> WinsIn(x,y,z))", "score": -1}
{"id": "folio_validation_492", "prediction": "all x.((UnitedStates(x) & MostMedalWin(x,Tokyo)) -> Wins(x,Tokyo))", "score": 0}
{"id": "folio_validation_492", "prediction": "all x.((Uniseas(x) & Tokyo(x)) -> wonMostMedals(x))", "score": 0}
{"id": "folio_validation_492", "prediction": "all x.((UnitedStates(x) & MostMedalsWin(x,Tokyo)) -> Win(x,Tokyo))", "score": 0}
{"id": "folio_validation_493", "prediction": "all x.(WorldChampionship(x) -> SportingEvent(x))", "score": 0}
{"id": "folio_validation_493", "prediction": "all x y.((WorldChampionship(x) & SportingEvent(y)) -> Includes(x,y))", "score": 0}
{"id": "folio_validation_493", "prediction": "all x.(WorldChampionship(x) -> SportsingEvent(x))", "score": 0}
{"id": "folio_validation_493", "prediction": "all x.(WorldChampionship(x) -> Sportsmanship(x))", "score": 0}
{"id": "folio_validation_493", "prediction": "all x.(WorldChampionship(x) -> sportingEvent(x))", "score": 0}
{"id": "folio_validation_493", "prediction": "all x.(WorldChampionship(x) -> Sportsicle(x))", "score": 0}
{"id": "folio_validation_493", "prediction": "all x.(WorldChampionship(x) -> SportsyEvent(x))", "score": 0}
{"id": "folio_validation_493", "prediction": "all x.(GlobalChampionship(x) -> SportingEvent(x))", "score": 0}
{"id": "folio_validation_493", "prediction": "all x.(WorldChampionship(x) -> AthleticEvent(x))", "score": 0}
{"id": "folio_validation_493", "prediction": "all x.(WorldChampionship(x) -> (SportiveEvent(x) & Events(x)))", "score": 0}
{"id": "folio_validation_494", "prediction": ", & The last OlympicGamesWereNotInTokyo.", "score": -1}
{"id": "folio_validation_494", "prediction": "all x.(OlympicGame(x) -> -Tokyo(x))", "score": 0}
{"id": "folio_validation_494", "prediction": "all x.(OlympicGame(x) -> (-Tokyo(x)))", "score": 0}
{"id": "folio_validation_494", "prediction": "all x.(OlympicGames(x) -> -Tokyo(x))", "score": 0}
{"id": "folio_validation_494", "prediction": "-(OlympicGames(Olympics))", "score": 0}
{"id": "folio_validation_494", "prediction": "all x y.((OlympicGame(x) & Tokyo(y)) -> -In(x,y))", "score": 0}
{"id": "folio_validation_494", "prediction": "(-OlympicGames(Olympics) & -OlympicGames(Olympics))", "score": 0}
{"id": "folio_validation_494", "prediction": "(all x.(OlympicGames(x) -> -Tokyo(x)))", "score": 0}
{"id": "folio_validation_494", "prediction": "all x y.((OlympicGame(x) & Tokyo(y)) -> -Tokyo(x))", "score": 0}
{"id": "folio_validation_494", "prediction": "-OlympicGamesInTokyo.", "score": -1}
{"id": "folio_validation_494", "prediction": "all x y.((OlympicGame(x) & (-Tokyo(y) | Tokyo(z))) -> -Tokyo(x))", "score": 0}
{"id": "folio_validation_494", "prediction": "the olympic games & -tokyo(olympics)", "score": -1}
{"id": "folio_validation_494", "prediction": "only one OlympicGame(two) & -InTokyo(two)", "score": -1}
{"id": "folio_validation_494", "prediction": "(FourthOlympics(Olympics) & -InTokyo(Olympics))", "score": 0}
{"id": "folio_validation_494", "prediction": "(all x.(OlympicGame(x) -> -InTokyo(x)))", "score": 1}
{"id": "folio_validation_495", "prediction": "all x.((U.S.A.(x) & OlympicGames(x)) -> MostMedalWarm(x,y))", "score": -1}
{"id": "folio_validation_495", "prediction": "all x y.((UnitedStates(x) & OlympicGames(y)) -> WonMostMedals(x,y))", "score": 0}
{"id": "folio_validation_495", "prediction": "all x y.((MostMedalWinner(x,y) & UnitedStates(y)) -> InOlympicGames(x))", "score": 0}
{"id": "folio_validation_495", "prediction": "all x y.((UnitedStates(x) & OlympicGame(y)) -> MostWearMeal(x,y))", "score": 0}
{"id": "folio_validation_495", "prediction": "all x.((US(x) & MostMedals(x)) -> WonInOlympicAeons(x,e))", "score": 0}
{"id": "folio_validation_495", "prediction": "the United States won the most medals in the last Olympic games.", "score": -1}
{"id": "folio_validation_495", "prediction": "all x y.((UnitedStates(x) & OlympicGame(y)) -> WonMostMedals(x,y))", "score": 0}
{"id": "folio_validation_495", "prediction": "all x y.((U.S.(x) & OlympicGame(y)) -> MostMoreMeals(x,y))", "score": -1}
{"id": "folio_validation_495", "prediction": "all x y z.((American(x) & OlympicGames(y) & Medals(z) & MostWon(x,y,z)) -> MostWon(x,y))", "score": 0}
{"id": "folio_validation_495", "prediction": "all x.(UnitedStates(x) -> WonMostMedals(x,OlympicGames))", "score": 0}
{"id": "folio_validation_495", "prediction": "all x y.((US(x) & OlympicGames(y)) -> WinsMostMedal(x,y))", "score": 0}
{"id": "folio_validation_495", "prediction": "all x.((UnitedState(x) & WinsMostMedals(x)) -> OlympicGames(x))", "score": 0}
{"id": "folio_validation_495", "prediction": "all x y.((UnitedState(x) & OlympicGame(y)) -> (WonMostMedals(x,y) | (SpokenMeal(x,y) & -WinnedMostMedals(x,y)))))", "score": -1}
{"id": "folio_validation_495", "prediction": "all x y.((UnitedStates(x) & OlympicGames(y)) -> WonMostMedal(x,y))", "score": 0}
{"id": "folio_validation_495", "prediction": "all x y.((UnitedStates(x) & OlympicGames(y)) -> WinsMostMedals(x,y))", "score": 0}
{"id": "folio_validation_495", "prediction": "all x.((U.S.A.(x) & OlympicGame(y)) -> WinsMostMedalsInGame(x,y))", "score": -1}
{"id": "folio_validation_496", "prediction": "all x.(Horse(x) -> HasHoove(x))", "score": 0}
{"id": "folio_validation_496", "prediction": "all x.(Horse(x) -> HasHooves(x))", "score": 0}
{"id": "folio_validation_496", "prediction": "all x.(Horse(x) -> Hudders(x))", "score": 0}
{"id": "folio_validation_496", "prediction": "all x y.((Horse(x) & Horse(y)) -> HasHooves(x,y))", "score": 0}
{"id": "folio_validation_496", "prediction": "all x.(Horse(x) -> HasHoofs(x))", "score": 0}
{"id": "folio_validation_496", "prediction": "all x.(Horse(x) -> Hooves(x))", "score": 0}
{"id": "folio_validation_497", "prediction": "-exists x.(Human(x) & Hoove(x))", "score": 0}
{"id": "folio_validation_497", "prediction": "-exists x.(Human(x) & HasHooves(x))", "score": 0}
{"id": "folio_validation_497", "prediction": "-exists x.(Human(x) & HOOve(x))", "score": 0}
{"id": "folio_validation_497", "prediction": "-exists x.(Human(x) & HasHoove(x))", "score": 0}
{"id": "folio_validation_497", "prediction": "all x.(HasHooves(x) -> -Human(x))", "score": 0}
{"id": "folio_validation_497", "prediction": "all x.(Human(x) -> -HasHooves(x))", "score": 0}
{"id": "folio_validation_497", "prediction": "all x.(Human(x) -> NoHoove(x))", "score": 0}
{"id": "folio_validation_497", "prediction": "-exists x.(Human(x) & Hoop(x).)", "score": -1}
{"id": "folio_validation_497", "prediction": "– exists x.(Human(x) & Hoove(x))", "score": 0}
{"id": "folio_validation_498", "prediction": "exists x.(Human(x) & Horse(x))", "score": 0}
{"id": "folio_validation_499", "prediction": "all x.((Susan(x) & Airport(x)) -> FliesTo(x,LGA))", "score": 0}
{"id": "folio_validation_499", "prediction": "all x.(Susan(x) -> FliesToLGAAirport(x))", "score": 0}
{"id": "folio_validation_499", "prediction": "all x y.((Susan(x) & Airport(y) & FliesTo(x,y)) -> FlyTo(x,y))", "score": 0}
{"id": "folio_validation_499", "prediction": "Susan flies to LGA Airport.", "score": -1}
{"id": "folio_validation_499", "prediction": "all x.((Susan(x) & FlySons(x)) -> LGAAirport(x))", "score": 0}
{"id": "folio_validation_499", "prediction": "(FliesToLGAAirport)", "score": 0}
{"id": "folio_validation_499", "prediction": "all x.((Susan(x) & FliesTo(x,LGA)) -> FliesTo(x,LGA))", "score": 0}
{"id": "folio_validation_499", "prediction": "all x.(Fly(x,LGA(x)) -> SusanFliesTo(x))", "score": 0}
{"id": "folio_validation_499", "prediction": "all x.((Susan(x) & LGAAirport(x)) -> FliesTo(x,1))", "score": 0}
{"id": "folio_validation_499", "prediction": "all x.(Susan(x) -> FlightsToLGAAirport(x))", "score": 0}
{"id": "folio_validation_499", "prediction": "Susan flies to LGA airport.", "score": -1}
{"id": "folio_validation_499", "prediction": "all x.(Flight(x) -> LGAAirport(x))", "score": 0}
{"id": "folio_validation_499", "prediction": "all x.(FliesTo(x,GLGA) -> Susan(x))", "score": 0}
{"id": "folio_validation_499", "prediction": "all x.(FlyTo(y) -> LGAAirport(x,y))", "score": 0}
{"id": "folio_validation_499", "prediction": "Susan flies to the LGAAeroport(Susan)", "score": -1}
{"id": "folio_validation_500", "prediction": "All x.(Departure(x) & Arrival(x))", "score": -1}
{"id": "folio_validation_500", "prediction": "all x.(Arrival(x) & Don'tRemainTheSameAirport(x))", "score": 0}
{"id": "folio_validation_500", "prediction": "-SameAirport(Departure(Attack) & SameAirport(Attack))", "score": -1}
{"id": "folio_validation_500", "prediction": "all x.((Airport(x) & Airport(y)) -> -(Departure(x,y) & Arrival(x,y)))", "score": 0}
{"id": "folio_validation_500", "prediction": "all x.(SameAirport(x) -> (Departure(x) | Arrival(x)))", "score": 0}
{"id": "folio_validation_500", "prediction": "(MeetsAboveAirport(X) & -MeetsAboveAirport(x))", "score": 0}
{"id": "folio_validation_500", "prediction": "(exists x.(Departure(x) & Arrival(x) & -SameAirport(x)))", "score": 0}
{"id": "folio_validation_500", "prediction": "(-(Departure(x) & Arrival(x)))", "score": 0}
{"id": "folio_validation_500", "prediction": "((Departure(x) & Arrival(x)) -> -SameAeroport(x))", "score": 0}
{"id": "folio_validation_500", "prediction": "all x.((Airport(x) & Airport(x)) -> -(Departure(x) & Arrival(x)))", "score": 0}
{"id": "folio_validation_500", "prediction": "all x.(Departure(x) & Arrival(x))", "score": 0}
{"id": "folio_validation_500", "prediction": "-(ExitAirport(departure) & ArrivalAirport(arrivée))", "score": 0}
{"id": "folio_validation_500", "prediction": "-(Airport(parts) & Airport(parts) & Departure(parts) & Arrival(parts))", "score": 0}
{"id": "folio_validation_500", "prediction": "all x.((Airport(x) & Airport(x)) -> -(Departure(x) & Arrival(x))))", "score": -1}
{"id": "folio_validation_500", "prediction": "all x.((Airport(x) & Airport(x)) -> -(Departure(x) | Arrival(x))))", "score": -1}
{"id": "folio_validation_500", "prediction": "all x.(Airport(x) -> -(Departure(x) & Arrival(x)))", "score": 0}
{"id": "folio_validation_501", "prediction": "John FliesFromLGAAirport(John)", "score": -1}
{"id": "folio_validation_501", "prediction": "John flies from LGA Airport.", "score": -1}
{"id": "folio_validation_501", "prediction": "(FliesFrom(Jeffrey,LGA))", "score": 0}
{"id": "folio_validation_501", "prediction": "(FliesFromLGAAirport(Jeffrey)", "score": -1}
{"id": "folio_validation_501", "prediction": "John flies from LGA airport.", "score": -1}
{"id": "folio_validation_501", "prediction": "(FliesFrom(John) & LocatedAtLGA(John))", "score": 0}
{"id": "folio_validation_501", "prediction": "John FliesFromLGAAeroport(John,LGAAeroport)", "score": -1}
{"id": "folio_validation_501", "prediction": "all x.(Jeff(x) -> FliesFromLGAAirport(x))", "score": 0}
{"id": "folio_validation_501", "prediction": "(Flies(John,LGA))", "score": 0}
{"id": "folio_validation_501", "prediction": "DepartsFromLGAAirport(John)", "score": 0}
{"id": "folio_validation_501", "prediction": "(FliesFromLAGasAeroport(Jeff) & FlyingFromLGAAeroport(Jeff))", "score": 0}
{"id": "folio_validation_502", "prediction": "all x y.((Suzanna(x) & Airport(y) & FliesFrom(x,y)) -> Flight(x,y))", "score": 0}
{"id": "folio_validation_502", "prediction": "(fliesfromLGAA(Susan) & Airport(Susan))", "score": 0}
{"id": "folio_validation_502", "prediction": "all x.((Susan(x) & Airport(y)) -> FliesFrom(x,y))", "score": 0}
{"id": "folio_validation_502", "prediction": "(FliesFromLGAAirport(Susan))", "score": 0}
{"id": "folio_validation_502", "prediction": "Susan flyes from LGA.", "score": -1}
{"id": "folio_validation_502", "prediction": "Susan flies from LGA Airport.", "score": -1}
{"id": "folio_validation_502", "prediction": "(FlyFrom(Susan) | Flight(Susan)))", "score": -1}
{"id": "folio_validation_502", "prediction": "all x.(SusanFliesFrom(x,LGAAirport) -> DoesNotFly(x))", "score": 0}
{"id": "folio_validation_502", "prediction": "(Fly(Susan) & fromLGAAirport(Susan))", "score": 0}
{"id": "folio_validation_502", "prediction": "all x.(FliesFrom(x,LGAAirport) -> SusanFlies(x))", "score": 0}
{"id": "folio_validation_502", "prediction": "all x.(FliesFrom(Susan,LGAAirport) -> Flies(Susan))", "score": 0}
{"id": "folio_validation_503", "prediction": "John flies to LGA airport.", "score": -1}
{"id": "folio_validation_503", "prediction": "has been flies to airport.", "score": -1}
{"id": "folio_validation_503", "prediction": "all x.(Fly(x) -> LGAAirport(x))", "score": 0}
{"id": "folio_validation_503", "prediction": "John flies to LGAAistan.", "score": -1}
{"id": "folio_validation_503", "prediction": "John flies to LGAAirport.", "score": -1}
{"id": "folio_validation_503", "prediction": "all x y.((John(x) & Airport(y)) -> FliesTo(x,y))", "score": 0}
{"id": "folio_validation_503", "prediction": "–FliesToLGAAeroport(John)", "score": 0}
{"id": "folio_validation_503", "prediction": "(FliesToLGAAirport(John)", "score": -1}
{"id": "folio_validation_503", "prediction": "(FliesToAirport(John))", "score": 0}
{"id": "folio_validation_503", "prediction": "(FliesToLGA(John))", "score": 0}
{"id": "folio_validation_503", "prediction": "JohnFliesToLGAAirport(John)", "score": 0}
{"id": "folio_validation_503", "prediction": "all x.(John(x) -> FliesToLGAAirport(x))", "score": 0}
{"id": "folio_validation_503", "prediction": "John flies to airport.", "score": -1}
{"id": "folio_validation_504", "prediction": "all x.(NiceToAnimals(x) -> MeanToAnimals(x))", "score": 4}
{"id": "folio_validation_504", "prediction": "all x.((NiceToAnimals(x) & MeanToAnimals(x)) -> -PleasantToAnimals(x))", "score": 0}
{"id": "folio_validation_504", "prediction": "-exists x.(Nice(x) & Mean(x))", "score": 0}
{"id": "folio_validation_504", "prediction": "-all x.(NiceToAnimals(x) -> MeanToAnimals(x))", "score": 4}
{"id": "folio_validation_504", "prediction": "-exists x.(NiceToAnimals(x) & MeanToAnimals(x))", "score": 0}
{"id": "folio_validation_504", "prediction": "all x.((NiceToAnimals(x) & MeanToAnimals(x)) -> NoAnimalDeaf(x))", "score": 0}
{"id": "folio_validation_504", "prediction": "all x y.((Person(x) & NiceToAnimals(x) & Animal(y)) -> MeanToAnimals(x))", "score": 0}
{"id": "folio_validation_504", "prediction": "all x.((Pony(x) & MeanToAnimals(x)) -> -Ponty(x,Animals))", "score": 0}
{"id": "folio_validation_504", "prediction": "all x.(NiceTwelve(x) -> MeanToAnimals(x))", "score": 0}
{"id": "folio_validation_504", "prediction": "all x.((PleasantToAnimals(x) & MeanToAnimals(x)) -> -NiceToAnimals(x))", "score": 0}
{"id": "folio_validation_504", "prediction": "all x.((NiceToAnimals(x) & MeanToAnimals(x)) -> -NiceToAnimals(x))", "score": 0}
{"id": "folio_validation_505", "prediction": "exists x y.((Hummy(x) & Animal(y) & MeanTo(x,y)) -> GrumpyPeople(x))", "score": 0}
{"id": "folio_validation_505", "prediction": "exists x.(GumpyPerson(x) & MeanToAnimals(x))", "score": 0}
{"id": "folio_validation_505", "prediction": "exists x.(grumpy(x) & MeanToAnimals(x))", "score": 0}
{"id": "folio_validation_505", "prediction": "exists x.(Grumpy(x) & MeanToAnimals(x))", "score": 0}
{"id": "folio_validation_505", "prediction": "exists x.(HumpyPerson(x) & MeanToAnimals(x))", "score": 0}
{"id": "folio_validation_505", "prediction": "exists x.(GrimlyPerson(x) & MeanToAnimals(x))", "score": 0}
{"id": "folio_validation_505", "prediction": "exists x.(Gumpy(x) & MeanToAnimals(x))", "score": 0}
{"id": "folio_validation_505", "prediction": "exists x.(grumpyperson(x) & MeanToAnimals(x))", "score": 0}
{"id": "folio_validation_505", "prediction": "exists x.(MeantoAnimal(x) & GrumpyPerson(x))", "score": 0}
{"id": "folio_validation_505", "prediction": "exists x.(GumpyPeople(x) & MeanToAnimals(x))", "score": 0}
{"id": "folio_validation_505", "prediction": "exists x.(MeanToAnimals(x) & Grumpy(x))", "score": 0}
{"id": "folio_validation_506", "prediction": "all x.(AnimalLover(x) -> NiceToAnimals(x))", "score": 0}
{"id": "folio_validation_506", "prediction": "all x.(AnimalLieb(x) -> NiceToAnimals(x))", "score": 0}
{"id": "folio_validation_506", "prediction": "all x.((AnimalLover(x) & NiceToAnimals(x)) -> AnimalLoverNice(x))", "score": 0}
{"id": "folio_validation_506", "prediction": "all x.(AnimalLieutenant(x) -> NiceToAnimals(x))", "score": 0}
{"id": "folio_validation_506", "prediction": "all x.(AnimalLieutor(x) -> NiceToAnimals(x))", "score": 0}
{"id": "folio_validation_506", "prediction": "all x.(Animal(x) -> NiceToAnimals(x))", "score": 0}
{"id": "folio_validation_506", "prediction": "all x.(AnimalLoving(x) -> NiceToAnimals(x))", "score": 0}
{"id": "folio_validation_507", "prediction": "all x.(BelongsToPet(x) -> LoveAnimals(x))", "score": 0}
{"id": "folio_validation_507", "prediction": "all x.(OwnsPet(x) -> LoveAnimals(x))", "score": 0}
{"id": "folio_validation_507", "prediction": "all x.(OwnsPet(x) -> LovesAnimals(x))", "score": 0}
{"id": "folio_validation_507", "prediction": "all x y.(OwnsPet(x,y) -> LovesAnimals(x))", "score": 0}
{"id": "folio_validation_507", "prediction": "all x.((OwnsPet(x) & LoveAnimals(x)) -> LoveAnimals(x))", "score": 0}
{"id": "folio_validation_507", "prediction": "all x y.((OwnsPet(x) & Pet(y)) -> LovesAnimals(x))", "score": 0}
{"id": "folio_validation_507", "prediction": "all x.((OwnsPet(x) & LoveAnimals(x)) -> OwnsPet(x))", "score": 0}
{"id": "folio_validation_508", "prediction": "all x.(PetOwner(x) -> Tom(x))", "score": 0}
{"id": "folio_validation_508", "prediction": "Tom is petowner(tom)", "score": -1}
{"id": "folio_validation_508", "prediction": "(Pet(Tom) & PetOwner(Tom))", "score": 0}
{"id": "folio_validation_508", "prediction": "Tom is petowner.", "score": -1}
{"id": "folio_validation_508", "prediction": "(PetOwner(Tom)", "score": -1}
{"id": "folio_validation_508", "prediction": "(Pet(Tom) & Owns(Tom))", "score": 0}
{"id": "folio_validation_508", "prediction": "all x.(Pet(x) -> Owner(x))", "score": 0}
{"id": "folio_validation_508", "prediction": "Tom is PetOwner(Tom)", "score": -1}
{"id": "folio_validation_508", "prediction": "(Pet(Tom) & Owner(Tom))", "score": 0}
{"id": "folio_validation_508", "prediction": "Tom is pet owner.", "score": -1}
{"id": "folio_validation_508", "prediction": "(Pet(Tommy) & PetOwner(Tom))", "score": 0}
{"id": "folio_validation_509", "prediction": "all x.(Gumpy(Tom) -> GrumpyPerson(x))", "score": 0}
{"id": "folio_validation_509", "prediction": "all x.(LumpyTom(x) -> Mumpy(x))", "score": 0}
{"id": "folio_validation_509", "prediction": "all x.(Pimpy(x) -> Tom(x))", "score": 0}
{"id": "folio_validation_509", "prediction": "all x.(TheHumpyPerson(x) -> Tom(x))", "score": 0}
{"id": "folio_validation_509", "prediction": "(grumpy(Tam))", "score": 0}
{"id": "folio_validation_509", "prediction": "Tom ist GrumpyPerson(x)", "score": -1}
{"id": "folio_validation_509", "prediction": "all x.((Tom(x) & Grumpy(x)) -> LocatedIn(x))", "score": 0}
{"id": "folio_validation_509", "prediction": "all x.(Rumpy(x) -> Tom(x))", "score": 0}
{"id": "folio_validation_509", "prediction": "all x.((Tom(x) & Grumpy(x)) -> -Person(x))", "score": 0}
{"id": "folio_validation_509", "prediction": "all x.(Ggrumpy(x) -> Tom(x))", "score": 0}
{"id": "folio_validation_509", "prediction": "all x.(Tam(x) -> GrumpyPerson(x))", "score": 0}
{"id": "folio_validation_509", "prediction": "Tom is GrumpyPerson(Tom)", "score": -1}
{"id": "folio_validation_509", "prediction": "all x.(Tom(x) -> GrumpyPerson(x))", "score": 0}
{"id": "folio_validation_509", "prediction": "all x.(GumpyPerson(x) -> Tom(x))", "score": 0}
{"id": "folio_validation_509", "prediction": "all x.(GumpieInDaze(x) -> Tom(x))", "score": 0}
{"id": "folio_validation_509", "prediction": "all x.((Tom(x) & Grumpy(x)) -> Grumpy(x))", "score": 0}
{"id": "folio_validation_510", "prediction": "all x.((Tom(x) & -Gumpy(x) & MeanToAnimals(x)) -> -Gumpy(x))", "score": 1}
{"id": "folio_validation_510", "prediction": "all x.(Tom(x) -> (-GumpyPerson(x) & MeanToAnimals(x)))", "score": 1}
{"id": "folio_validation_510", "prediction": "exists x.(Tom(x) & -GrubbyPerson(x) & MeanToAnimals(x))", "score": 0}
{"id": "folio_validation_510", "prediction": "all x.(Tom(x) -> (-GlimpyPerson(x) & MeanToAnimals(x)))", "score": 0}
{"id": "folio_validation_510", "prediction": "all x.(Gumpy(x) & MeanToAnimals(x))", "score": 1}
{"id": "folio_validation_510", "prediction": "all x.((Tom(x) & -Gumpie(x) & MeanToAnimals(x)) -> -Grimmy(x))", "score": 0}
{"id": "folio_validation_510", "prediction": "all x.((Tom(x) & -Gumpy(x) & MeanToAnimals(x)) -> -Gimpy(x))", "score": 0}
{"id": "folio_validation_510", "prediction": "all x.((Tom(x) & -GimmickyOnIsMeanToAnimals(x)) -> -MeanToAnimals(x))", "score": 0}
{"id": "folio_validation_510", "prediction": "all x.(Tom(x) -> (-GrumpyPerson(x) & MeanToAnimals(x)))", "score": 1}
{"id": "folio_validation_510", "prediction": "all x.((Tom(x) & -Gumpy(x) & MeanToAnimals(x)) -> -GumpyToAnimals(x))", "score": 0}
{"id": "folio_validation_510", "prediction": "all x.((Tom(x) & -GumpyPerson(x) & MeanToAnimals(x)) -> -GumpyPerson(x))", "score": 1}
{"id": "folio_validation_510", "prediction": "all x.(Tom(x) -> (-grumpy(x) & meanToAnimals(x)))", "score": 0}
{"id": "folio_validation_510", "prediction": "—(Ghumpy(Tom) & MeanToAnimals(Tom)))", "score": -1}
{"id": "folio_validation_510", "prediction": "all x.((Tom(x) & -Gumpy(x)) -> MeanToAnimals(x))", "score": 1}
{"id": "folio_validation_510", "prediction": "all x.(Tom(x) -> (-GumpiePerson(x) & MeanToAnimals(x)))", "score": 0}
{"id": "folio_validation_511", "prediction": "all x.((TrompyPerson(x) & MeanToAnimals(x)) -> (-TrompyPerson(x) & -AnimalLover(x)))", "score": 0}
{"id": "folio_validation_511", "prediction": "all x.((Tom(x) & -Gumpy(x) & MeanToAnimals(x)) -> (Crimeless(x) & -AnimalLover(x)))", "score": 0}
{"id": "folio_validation_511", "prediction": "all x.((Mom(x) & -GumpyPerson(x) & MeanToAnimals(x)) -> (-GumpyPerson(x) & -AnimalLover(x)))", "score": 0}
{"id": "folio_validation_511", "prediction": "all x.((Tim(x) & -GumpyPerson(x) & MeanToAnimals(x)) -> (-GumpyPerson(x) & -AnimalLover(x)))", "score": 0}
{"id": "folio_validation_511", "prediction": "all x.((Tam(x) & -Gumpy(x) & MeanToAnimals(x)) -> -Gumpy(x) & -AnimalLover(x))", "score": 0}
{"id": "folio_validation_511", "prediction": "all x.((CrompetyPerson(x) & MeanToAnimals(x)) -> (-CrompetyPerson(x) & -AnimalLover(x)))", "score": 0}
{"id": "folio_validation_511", "prediction": "all x.((MoreOfAnimals(x) & -GumpierPerson(x)) -> (-GumpierPerson(x) & -AnimalLover(x)))", "score": 0}
{"id": "folio_validation_511", "prediction": "all x.((Tom(x) & -Grumpy(x) & MeanToAnimals(x)) -> (-Grumpy(x) & -AnimalLover(x)))", "score": 0}
{"id": "folio_validation_511", "prediction": "all x.((Person(x) & -grumpy(x) & MeanToAnimals(x)) -> (-grumpy(x) & -AnimalLover(x)))", "score": 0}
{"id": "folio_validation_511", "prediction": "all x.((GrupyPerson(x) & MeanToAnimals(x)) -> -AnimalLover(x))", "score": 0}
{"id": "folio_validation_511", "prediction": "all x.(((GrubyPerson(x) & MeanToAnimals(x)) -> (-GrubyPerson(x) & NotAnimalLover(x)))", "score": -1}
{"id": "folio_validation_511", "prediction": "all x.((Tom(x) & -GrimpyPerson(x) & MeanToAnimals(x)) -> (-GrimpyPerson(x) & -AnimalLover(x)))", "score": 0}
{"id": "folio_validation_511", "prediction": "all x.((Tom(x) & -Gumpier(x) & MeanToAnimals(x)) -> (-Gumpier(x) & -AnimalLover(x)))", "score": 0}
{"id": "folio_validation_511", "prediction": "all x.((Tam(x) & -GumpyPerson(x) & MeanToAnimals(x)) -> (-GumpyPerson(x) & -AnimalLover(x)))", "score": 0}
{"id": "folio_validation_511", "prediction": "all x.((Grammy(x) & MeanToAnimals(x)) -> (-Grammy(x) & -AnimalLover(x)))", "score": 0}
{"id": "folio_validation_511", "prediction": "all x.((Tomb(x) & -Grumpy(x) & MeanToAnimals(x)) -> -AnimalLover(x))", "score": 0}
{"id": "folio_validation_512", "prediction": "all x.(Podcast(x) -> -Novel(x))", "score": 0}
{"id": "folio_validation_512", "prediction": "exists x.(Podcast(x) & -Narrative(x))", "score": 0}
{"id": "folio_validation_512", "prediction": "exists x.(Podcast(x) & -Novel(x))", "score": 0}
{"id": "folio_validation_512", "prediction": "(exists x.(Podcast(x) & -Novel(x)))", "score": 0}
{"id": "folio_validation_513", "prediction": "all x.((BirthInAmericanCity(x) & American(x)) -> Birthplace(x))", "score": 0}
{"id": "folio_validation_513", "prediction": "[BG] AfricanCity(b) & BornIn(x,b))", "score": -1}
{"id": "folio_validation_513", "prediction": "all x.((BirthInAmericanCity(x) & BornInAmericanCity(x)) -> American(x))", "score": 0}
{"id": "folio_validation_513", "prediction": "all x.(BornInAmeridianCity(x) -> American(x))", "score": 0}
{"id": "folio_validation_513", "prediction": "all x.((Person(x) & BornInAmericanCity(x)) -> American(x))", "score": 0}
{"id": "folio_validation_513", "prediction": "all x.([BirthInAmericanCity(x)] -> American(x))", "score": -1}
{"id": "folio_validation_513", "prediction": "all x.(KnitInAmericanCity(x) -> American(x))", "score": 0}
{"id": "folio_validation_513", "prediction": "all x y.((Person(x) & BornInAmericanCity(x)) -> American(x))", "score": 0}
{"id": "folio_validation_513", "prediction": "all x.(Bible(x) -> BornInAmericanCity(x))", "score": 0}
{"id": "folio_validation_513", "prediction": "all x.(BirthInAmericanCity(x) -> American(x))", "score": 0}
{"id": "folio_validation_513", "prediction": "all x.(BornInAmericanCity(x) -> American(x))", "score": 0}
{"id": "folio_validation_513", "prediction": "[BG] (BirthInAmericanCity(Person) | BornInAmericanCity(Person)))", "score": -1}
{"id": "folio_validation_514", "prediction": "all x.((Book(x) & Novel(x) & WrittenByPerson(x)) -> NovelWriter(x))", "score": 0}
{"id": "folio_validation_514", "prediction": "all x y z.((Book(x) & Person(y) & Novel(x,y) & WrittenBy(y,z)) -> NovelWriter(z))", "score": 0}
{"id": "folio_validation_514", "prediction": "all x.(Novel(x) -> NovelWriter(x))", "score": 0}
{"id": "folio_validation_514", "prediction": "all x y.((Book(x) & Novel(x) & WrittenBy(x,y)) -> NovelWriter(x))", "score": 0}
{"id": "folio_validation_514", "prediction": "all x.((Book(x) & Novel(x) & WrittenBy(x)) -> NovelWriter(x))", "score": 0}
{"id": "folio_validation_514", "prediction": "all x.((Book(x) & Novel(x) & WrittenBy(x,Person)) -> NovelWriter(x))", "score": 0}
{"id": "folio_validation_514", "prediction": "all x.((Book(x) & Novel(x) & WrittenBy(x,y)) -> NovelWriter(y))", "score": 0}
{"id": "folio_validation_514", "prediction": "all x.(Novel(x) -> (WrittenBy(x) & Person(x)))", "score": 0}
{"id": "folio_validation_514", "prediction": "all x y.((Bug(x) & Person(y) & Novel(x) & WrittenBy(y,x)) -> NovelWriter(y))", "score": 0}
{"id": "folio_validation_514", "prediction": "all x y.((Book(x) & Novel(x) & WrittenBy(y,x)) -> NovelWriter(y))", "score": 0}
{"id": "folio_validation_514", "prediction": "[BG] -> (News(book) & WrittenByPerson(book)))", "score": -1}
{"id": "folio_validation_514", "prediction": "[BG] -> (NovelBook(a) & WrittenBy(a person)))", "score": -1}
{"id": "folio_validation_515", "prediction": "Dani Shapiro (AlaskaWriter&Writer(a)) & Writer(b) & American(c))", "score": -1}
{"id": "folio_validation_515", "prediction": "DaniSharpiro ((AmericanWriter(n) & WritesFor(n)))", "score": 0}
{"id": "folio_validation_515", "prediction": "DaniShapiro is an AmericanWriter, published by NPR in 2007.", "score": -1}
{"id": "folio_validation_515", "prediction": "Dani Shapiro is an AmericanWriter(d)", "score": -1}
{"id": "folio_validation_515", "prediction": "AmericanWriter(dani)", "score": 0}
{"id": "folio_validation_515", "prediction": "Dani Shapiro ist ein AmericanWriter(Daniel)", "score": -1}
{"id": "folio_validation_515", "prediction": "Dani Shapiro is an AmericanWriter.", "score": -1}
{"id": "folio_validation_515", "prediction": "Dani Shapiro is a Writer(x) & American(x))", "score": -1}
{"id": "folio_validation_515", "prediction": "Dani Shapiro (AmericanWriter)", "score": -1}
{"id": "folio_validation_515", "prediction": "Dani Shapiro (or DaniSpiro) is AmericanWriter(x))", "score": -1}
{"id": "folio_validation_515", "prediction": "(AmericanWriter(DaniShapiro) | -AmericanWriter(DaniShapiro))", "score": 0}
{"id": "folio_validation_515", "prediction": "(CanadianWriter(DaniShakero)", "score": -1}
{"id": "folio_validation_515", "prediction": "theAmericanWriter(DaniShapiro)", "score": 0}
{"id": "folio_validation_515", "prediction": "AmericanWriter.", "score": -1}
{"id": "folio_validation_515", "prediction": "DaniShapiro,AmericanWriter.", "score": -1}
{"id": "folio_validation_516", "prediction": "all x.((FamilyHistory(x) & DaniShapiro(x)) -> WrittenBy(x))", "score": 0}
{"id": "folio_validation_516", "prediction": "all x.(FamilyHistory(x) -> WrittenByDaniShapiro(x))", "score": 0}
{"id": "folio_validation_516", "prediction": "FamilialHistorians(* writtenByDaniShakero(x))", "score": -1}
{"id": "folio_validation_516", "prediction": "DevelopedByDaniShakero(FamilyHistory)", "score": 0}
{"id": "folio_validation_516", "prediction": "(WrittenBy(FamilyHistory) & DaniShapero(FamilyHistory))", "score": 0}
{"id": "folio_validation_516", "prediction": "(writtenbyDaniShapiro(FamilyHistory)", "score": -1}
{"id": "folio_validation_516", "prediction": "(WrittenByDaniShapiro(FamilyHistory)", "score": -1}
{"id": "folio_validation_516", "prediction": "all x y.((FamilyHistory(x) & DaniShakero(y)) -> WrittenBy(x,y))", "score": 0}
{"id": "folio_validation_516", "prediction": "(WrittenBy(FamilyHistory) & DaniShakero(FamilyHistory))", "score": 0}
{"id": "folio_validation_516", "prediction": "all x.(FamilyHistory(x) -> WrittenByDaniShakero(x))", "score": 0}
{"id": "folio_validation_516", "prediction": "All x y.((FamilyHistory(x) & DaniShapiro(y)) -> WrittenBy(x,y))", "score": -1}
{"id": "folio_validation_516", "prediction": "All x.(FamilyHistory(x) -> WrittenByDaniShakero(x))", "score": -1}
{"id": "folio_validation_516", "prediction": "All x.(FamilyHistory(x) -> WrittenByDaniShapiro(x))", "score": -1}
{"id": "folio_validation_516", "prediction": "all x.(FamilyHistory(x;DaniShapiro) -> WrittenBy(x,FamilyHistory))", "score": 0}
{"id": "folio_validation_516", "prediction": "FamiliesHistoryWrittenByDaniShakero.", "score": -1}
{"id": "folio_validation_516", "prediction": "-Purposes(FamilyHistory) & DaniSapiro(FamilyHistory)", "score": 0}
{"id": "folio_validation_517", "prediction": "all x.(FamilyHistory(x) -> WrittenIn2003(x))", "score": 0}
{"id": "folio_validation_517", "prediction": "FamilyHistory(FamilyResearch)", "score": 0}
{"id": "folio_validation_517", "prediction": "FamilyHybrid(FamilyHybrid)", "score": 0}
{"id": "folio_validation_517", "prediction": "all x.(FamilyHistory(x) -> WrittenIn(x,2003))", "score": 0}
{"id": "folio_validation_517", "prediction": "All x.(FamilyHistory(x) -> WrittenIn2003(x))", "score": -1}
{"id": "folio_validation_517", "prediction": "all x.(FamilyHouse(x) -> WrittenIn2003(x))", "score": 0}
{"id": "folio_validation_517", "prediction": "is Novel(FamilyHistory) & WrittenIn2003(FamilyHistory)", "score": -1}
{"id": "folio_validation_517", "prediction": "FamilyHistory(f) -> WrittenIn2003(f))", "score": -1}
{"id": "folio_validation_517", "prediction": "theFamilyHistorian is a novel written in 2003.", "score": -1}
{"id": "folio_validation_517", "prediction": "all x.(FamilyHistory(x) -> (NovelWrittenIn2003(x) & -WrittenIn(x,2003)))", "score": 0}
{"id": "folio_validation_517", "prediction": "(Novel(FamilyHistory) & WrittenIn(FamilyHistory) & WrittenIn(FamilyHistory))", "score": 0}
{"id": "folio_validation_517", "prediction": "all x.(FamilyHistoria(x) -> WrittenIn2003(x))", "score": 0}
{"id": "folio_validation_517", "prediction": "the Novel FamilyHistory(FamilyHistory)", "score": -1}
{"id": "folio_validation_517", "prediction": "(Narrative(FamilyHistorical) & WrittenIn2003(FamilyHistory))", "score": 0}
{"id": "folio_validation_518", "prediction": "Dani Shapiro created a podcast called FamilySecrets(d).", "score": -1}
{"id": "folio_validation_518", "prediction": "Dani Shapiro created a podcast called FamilySecrets(DanielShepiro,CreatedBlog.)", "score": -1}
{"id": "folio_validation_518", "prediction": "(createdBlog(DaniShapiro,FamilySecrets) & Created(DaniShapiro))", "score": 0}
{"id": "folio_validation_518", "prediction": "(CreatedBlogFamilySecrets(DaniShapiro)", "score": -1}
{"id": "folio_validation_518", "prediction": "Dani Shapiro created Podcast(DanielShapiro,FamilySecrets)", "score": -1}
{"id": "folio_validation_518", "prediction": "–createdFamilySecrets(x) & DaniShapiro(x))", "score": -1}
{"id": "folio_validation_518", "prediction": "Dani Shapiro created a podcast called FamilySecrets.", "score": -1}
{"id": "folio_validation_518", "prediction": "Dani Shapiro has created a Podcast called FamilySecrets.", "score": -1}
{"id": "folio_validation_518", "prediction": "Dani Shapiro created a Podcast called FamilySecrets.", "score": -1}
{"id": "folio_validation_518", "prediction": "Dani Shapiro created Podcast called FamilySecrets.", "score": -1}
{"id": "folio_validation_518", "prediction": "Dani Shapiro created FamilySecrets.", "score": -1}
{"id": "folio_validation_518", "prediction": "Dani Shapiro created a podcast titled FamilySecrets(DaniShakero)", "score": -1}
{"id": "folio_validation_518", "prediction": "all x.((DaniShapiro(x) & FamilySecrets(x)) -> CreatedPodcast(x))", "score": 0}
{"id": "folio_validation_518", "prediction": "Dani Shapiro has created FamilySecrets(d)", "score": -1}
{"id": "folio_validation_518", "prediction": "Dani Shapiro created a podcast called FamilySecrets(DanielShakero,FamilySecrets))", "score": -1}
{"id": "folio_validation_519", "prediction": "\"[BG] Boston(x)]", "score": -1}
{"id": "folio_validation_519", "prediction": "[BG] Boston (AsianCity))", "score": -1}
{"id": "folio_validation_519", "prediction": "[BG] Boston is AmericanCity(26)", "score": -1}
{"id": "folio_validation_519", "prediction": "[BG] Boston 'City(x) & AmericanCity(x))", "score": -1}
{"id": "folio_validation_519", "prediction": "[BG] Boston is an AmericanCity.", "score": -1}
{"id": "folio_validation_519", "prediction": "[BA] (Boston) & AmericanCity(Boston))", "score": -1}
{"id": "folio_validation_519", "prediction": "[BG], Boston is an AmericanCity.", "score": -1}
{"id": "folio_validation_519", "prediction": "[BG] Boston (AmericanCity))", "score": -1}
{"id": "folio_validation_519", "prediction": "[BG] Boston is AmericanCity.", "score": -1}
{"id": "folio_validation_519", "prediction": "[BG] Boston is a U.S.City(x))", "score": -1}
{"id": "folio_validation_519", "prediction": "[BG] Boston (OfAmerica(x))", "score": -1}
{"id": "folio_validation_519", "prediction": "([BG] Boston (City) & American(c)))", "score": -1}
{"id": "folio_validation_519", "prediction": "[BG] Boston is a (AmericanCity(Boston) & AmericanCity(Boston)))", "score": -1}
{"id": "folio_validation_519", "prediction": "(AmericanCity(Boston) & [Boston_Boston])", "score": 0}
{"id": "folio_validation_520", "prediction": "dannieshapero(s) -> NovelWriter(s))", "score": -1}
{"id": "folio_validation_520", "prediction": "(NovelWriter(DaniShapiro) & NovelWriter(DaniShapiro))", "score": 0}
{"id": "folio_validation_520", "prediction": "\"NovelWriter(DaniShakero,0)", "score": 0}
{"id": "folio_validation_520", "prediction": "Dani Shapiro (narrativeWriter)", "score": -1}
{"id": "folio_validation_520", "prediction": "Dani Shapiro (NarrativeWriter)", "score": -1}
{"id": "folio_validation_520", "prediction": "DaniShapiro is a novel writer.", "score": -1}
{"id": "folio_validation_520", "prediction": "Dani Shapiro (narrativeWriter) & FoundedInWriting(daniscaporo,d))", "score": -1}
{"id": "folio_validation_520", "prediction": "(NovelWriter(ShaniShapiro) & Novel Writer(ShaniHapiro))", "score": -1}
{"id": "folio_validation_520", "prediction": "(NovelWriter(dan) & DariShakpiro(dan))", "score": 0}
{"id": "folio_validation_520", "prediction": "Dani Shapiro is a novel writer.", "score": -1}
{"id": "folio_validation_520", "prediction": "Dani Shapiro,NovelWriter,was born in 1996.", "score": -1}
{"id": "folio_validation_520", "prediction": "(NovelWriter(DaniShakero) & NovelWriter(DaniShapiro))", "score": 0}
{"id": "folio_validation_520", "prediction": "(NovelWriter(DaniShakero) & Novel(DaniShakero))", "score": 0}
{"id": "folio_validation_520", "prediction": "Dani Shapiro (NovelWriter(x) & WritesThemes(x))", "score": -1}
{"id": "folio_validation_520", "prediction": "all x.(LongStar(x) -> Author(x))", "score": 0}
{"id": "folio_validation_520", "prediction": "(NovelWriter(DaniShakero) -> NovelWriter(DaniShapero))", "score": 0}
{"id": "folio_validation_521", "prediction": "all x.(FamilySecrets(x) -> Novel(x))", "score": 0}
{"id": "folio_validation_521", "prediction": "(Narrative(FamilySecrets) & Novel(FamilySecrets))", "score": 0}
{"id": "folio_validation_521", "prediction": "FamilySecrets isNarrative(x) & Novel(x))", "score": -1}
{"id": "folio_validation_521", "prediction": "(Novel(FamilySecrets) & Novel(FamilySecrets(Family))", "score": -1}
{"id": "folio_validation_521", "prediction": "(Novel(FamilySecrets) & Novel(Family(FamilySecrets))", "score": -1}
{"id": "folio_validation_521", "prediction": "(FamilySecrets(x) & Novel(x))", "score": 0}
{"id": "folio_validation_521", "prediction": "All x.(FamilySecrets(x) -> Novel(x))", "score": -1}
{"id": "folio_validation_521", "prediction": "All x.((FamilySecrets(x) & Novel(x)) -> (Awesome(x) & Novel(x)))", "score": -1}
{"id": "folio_validation_521", "prediction": "(Novel(FamilySecrets) & -Novel(FamilySecrets))", "score": 0}
{"id": "folio_validation_521", "prediction": "FamilySecrets(f) & Novel(n) & Contains(n,f,f))", "score": -1}
{"id": "folio_validation_521", "prediction": "(Novel(FamilySecrets) & Novel.", "score": -1}
{"id": "folio_validation_521", "prediction": "is a novel.", "score": -1}
{"id": "folio_validation_521", "prediction": "the FamilySecrets(Family) -> Novel(f))", "score": -1}
{"id": "folio_validation_521", "prediction": "all x.((FamilySecrets(x) & Novel(x)) -> CompletedWith(x))", "score": 0}
{"id": "folio_validation_521", "prediction": "FamilySecrets(f) -> Novel(f))", "score": -1}
{"id": "folio_validation_522", "prediction": "-Birth( DaniShapiro, Boston)", "score": 0}
{"id": "folio_validation_522", "prediction": "Dani Shapiro was born in Boston.", "score": -1}
{"id": "folio_validation_522", "prediction": "Dani Shapiro (Boston, MA) & BornIn(dani.)", "score": -1}
{"id": "folio_validation_522", "prediction": "DaniShapiro wurde in Boston geboren.", "score": -1}
{"id": "folio_validation_522", "prediction": "Dani Shapiro was bornIn(x,Boston)", "score": -1}
{"id": "folio_validation_522", "prediction": "DaniShapero was bornnedInBoston(DaniShakero)", "score": -1}
{"id": "folio_validation_522", "prediction": "Dani Shapiro (bornInBoston)", "score": -1}
{"id": "folio_validation_522", "prediction": "DaniShapiro (bornInBoston)", "score": 0}
{"id": "folio_validation_522", "prediction": "Dani Shapiro (baptized in Boston)", "score": -1}
{"id": "folio_validation_522", "prediction": "DaniShakero was born in Boston.", "score": -1}
{"id": "folio_validation_523", "prediction": "exists x.(BasketballPlayer(x) & -American(x))", "score": 0}
{"id": "folio_validation_523", "prediction": "exists x.(BasketballPlayer(x) & -Amerikan(x))", "score": 0}
{"id": "folio_validation_523", "prediction": "exists x.(BasketballPlayer(x) & -Américain(x))", "score": 0}
{"id": "folio_validation_524", "prediction": "all x.(BasketballPlayer(x) -> Tall(x))", "score": 0}
{"id": "folio_validation_524", "prediction": "all.(BasketballPlayer(x) -> Tall(x))", "score": -1}
{"id": "folio_validation_525", "prediction": "all x.((Tall(x) & TearsLargeShoes(x)) -> Wears(x,y))", "score": 0}
{"id": "folio_validation_525", "prediction": "all x.((Person(x) & Tall(x)) -> WearLargeShoes(x))", "score": 0}
{"id": "folio_validation_525", "prediction": "all x.(Tall(x) -> WearLargeShoes(x))", "score": 0}
{"id": "folio_validation_525", "prediction": "all x.(Tall(x) -> WearsLargeShoes(x))", "score": 0}
{"id": "folio_validation_525", "prediction": "all x.((Tall(x) -> WearsLargeShoes(x))", "score": -1}
{"id": "folio_validation_525", "prediction": "all x.(Tall(x) -> WornLargeShoes(x))", "score": 0}
{"id": "folio_validation_525", "prediction": "all x.((Taller(x) & WearsLargeShoes(x)) -> Tall(x))", "score": 0}
{"id": "folio_validation_526", "prediction": "all x.((WearsLargeShoes(x)) -> WearsLargeSizingClothes(x))", "score": 0}
{"id": "folio_validation_526", "prediction": "all x.((WornsLargeShoes(x) & WearsLargeSizeClothes(x)) -> WearsLargeSizingClothes(x))", "score": 0}
{"id": "folio_validation_526", "prediction": "all x.((WearsLargeShoes(x) & WearsLargeSizedClothes(x)) -> WearsLargeSizedClothes(x))", "score": 0}
{"id": "folio_validation_526", "prediction": "all x.((OtherWornsLargeShoes(x) & WearsLargeSizedClothes(x)) -> Worn(x))", "score": 0}
{"id": "folio_validation_526", "prediction": "all x.((WornsLargeShoes(x)) -> WearsLargeSizedClothes(x))", "score": 0}
{"id": "folio_validation_526", "prediction": "all x.((WorksLargeShoes(x) & WeighsLargeSizedClothes(x)) -> WearsLargeSizedClothes(x))", "score": 0}
{"id": "folio_validation_526", "prediction": "all x.(WearsLargeShoes(x) -> WearsLargeSizedClothes(x))", "score": 0}
{"id": "folio_validation_526", "prediction": "all x.(WornsLargeShoes(x) -> WearsLargeSizedClothes(x))", "score": 0}
{"id": "folio_validation_526", "prediction": "all x.(WearsLargeShoes(x) -> WearsLargeSizeClothes(x))", "score": 0}
{"id": "folio_validation_526", "prediction": "all x.((WearsLargeShoes(x)) -> WearsLargeSizedClothes(x))", "score": 0}
{"id": "folio_validation_526", "prediction": "all x.((WhiresLargeShoes(x) & WearsLargeSizedClothes(x)) -> WearsLargeSizedClothes(x))", "score": 0}
{"id": "folio_validation_526", "prediction": "all x.((WorthsLargeShoes(x) & WearLargeSizedClothes(x)) -> WearLargeSizedClothes(x))", "score": 0}
{"id": "folio_validation_526", "prediction": "all x.(WearsLargeShoes(x) -> WearLargeSizedClothes(x))", "score": 0}
{"id": "folio_validation_526", "prediction": "all x.((WornsLargeShoes(x)) -> WearsLargeSizeClothes(x))", "score": 0}
{"id": "folio_validation_526", "prediction": "all x.((WorthsLargeShoes(x)) -> WearsLargeSizingClothes(x))", "score": 0}
{"id": "folio_validation_527", "prediction": "Yuri -WearsLargeSizeClothes(Yur))", "score": -1}
{"id": "folio_validation_527", "prediction": "Yuri -WearsLargeSizeClothes(Yuri))", "score": -1}
{"id": "folio_validation_527", "prediction": "all x.(Yuri(x) -> -WornLargeSizeClothes(x))", "score": 0}
{"id": "folio_validation_527", "prediction": "all x.(Yuri(x) -> -WearsLargeSizeClothes(x))", "score": 0}
{"id": "folio_validation_527", "prediction": "Yuri does not wearsLargeSizeClothes(y)", "score": -1}
{"id": "folio_validation_527", "prediction": "Yuri -WearsLargeSizeClothes(y)", "score": -1}
{"id": "folio_validation_527", "prediction": "Yuri -WearsLargeSizeClothes(Yuri & -WearsLargeSizeClothes(Yuri))", "score": -1}
{"id": "folio_validation_527", "prediction": "(-WearsLargeSizeClothes(Yuri))", "score": 0}
{"id": "folio_validation_527", "prediction": "Yuri -WearsLargeSizeClothes(Yuri,Y))", "score": -1}
{"id": "folio_validation_527", "prediction": "Yuri -WearLargeSizeClothes(y))", "score": -1}
{"id": "folio_validation_527", "prediction": "Yuri no longerWearsLargeSizeClothes(y))", "score": -1}
{"id": "folio_validation_527", "prediction": "(-WearLargeSizeClothes(Yuri))", "score": 0}
{"id": "folio_validation_527", "prediction": "OBD ((Yuri) & -LargeSizeClothes(y)))", "score": -1}
{"id": "folio_validation_527", "prediction": "Yuri -WearsLargeSizeClothes(y))", "score": -1}
{"id": "folio_validation_528", "prediction": "Yurus,American(y)", "score": -1}
{"id": "folio_validation_528", "prediction": "Yuri is American.", "score": -1}
{"id": "folio_validation_528", "prediction": "(American(Yuri) & American(Yuri))", "score": 0}
{"id": "folio_validation_528", "prediction": "All x.(Yuri(x) -> American(x))", "score": -1}
{"id": "folio_validation_528", "prediction": "Yuri (American(y))", "score": 0}
{"id": "folio_validation_528", "prediction": "Yuri (American(y) & BornIn(y,x))", "score": -1}
{"id": "folio_validation_528", "prediction": "all x.(Yuri(x) -> American(x))", "score": 0}
{"id": "folio_validation_528", "prediction": "Yuri is American(Y)", "score": -1}
{"id": "folio_validation_528", "prediction": "(American(Yuri) & BornIn(y,x))", "score": 0}
{"id": "folio_validation_528", "prediction": "Yuri is a NativeAmerican.", "score": -1}
{"id": "folio_validation_528", "prediction": "MisterYuri(M)", "score": 0}
{"id": "folio_validation_528", "prediction": "Yuri is American(y)", "score": -1}
{"id": "folio_validation_528", "prediction": "Yaire is American(y)", "score": -1}
{"id": "folio_validation_529", "prediction": "Yuri & -AmericanBasketballPlayer(y)", "score": 0}
{"id": "folio_validation_529", "prediction": "Yuri is notAmericanBasketballPlayer(y)", "score": -1}
{"id": "folio_validation_529", "prediction": "(-AmericanBasketballPlayer(Yuri))", "score": 0}
{"id": "folio_validation_529", "prediction": "Yuri ne(y) & AmericanBasketballPlayer(z) & -AmericanBasketballPlayer(y,z))", "score": -1}
{"id": "folio_validation_529", "prediction": "Yuri n'est pas AmericanBasketballPlayer(Yuri)", "score": -1}
{"id": "folio_validation_529", "prediction": "Yuri is notAmericanBasketballPlayer(Yuri)", "score": -1}
{"id": "folio_validation_529", "prediction": "Yuri is -AmericanBasketballPlayer(Yuri)", "score": -1}
{"id": "folio_validation_529", "prediction": "Yuri is -AmericanBasketballPlayer(Yuri,(Y))", "score": -1}
{"id": "folio_validation_529", "prediction": "Yuri -AmericanBasketballPlayer(y)", "score": -1}
{"id": "folio_validation_529", "prediction": "Yuri, -AméricanBasketballPlayer(Y))", "score": -1}
{"id": "folio_validation_529", "prediction": "Yuri is notAsianBasketballPlayer(y)", "score": -1}
{"id": "folio_validation_529", "prediction": "Yuri n'est pasAmericanBasketballPlayer(Yuri)", "score": -1}
{"id": "folio_validation_529", "prediction": "Yuri n'est pas-américainBasketballPlayer.", "score": -1}
{"id": "folio_validation_529", "prediction": "Yuri is nota(y) & AmericanBasketballPlayer(y))", "score": -1}
{"id": "folio_validation_530", "prediction": "Yuri (AmericanBasketballPlayer)", "score": 0}
{"id": "folio_validation_530", "prediction": "All x.(Yuri(x) -> AmericanBasketballPlayer(x))", "score": -1}
{"id": "folio_validation_530", "prediction": "Yuri is AmericanBasketballPlayer(Yuri)", "score": -1}
{"id": "folio_validation_530", "prediction": "(AmericanBasketballPlayer(Yuri))", "score": 0}
{"id": "folio_validation_530", "prediction": "Oskar & Yuriah(Yur)", "score": 0}
{"id": "folio_validation_530", "prediction": "Yuri.(AsianBasketballPlayer(Yuri))", "score": -1}
{"id": "folio_validation_530", "prediction": "Yuri is a BasketballPlayer(y) & American(y))", "score": -1}
{"id": "folio_validation_530", "prediction": "Yuri is AmericanBasketballPlayer(y)", "score": -1}
{"id": "folio_validation_530", "prediction": "(AmericanBasketballPlayer(Yuri) & DesignedBy(Yuri,D))", "score": 0}
{"id": "folio_validation_530", "prediction": "Yuri is anAmericanBasketballPlayer(y)", "score": -1}
{"id": "folio_validation_531", "prediction": "all x.((Yuri(x) & -WearLargeShoes(x)) -> AmericanBasketballPlayer(x))", "score": 0}
{"id": "folio_validation_531", "prediction": "all x.((Yuri(x) & -wearsLargeShoes(x)) -> AmericanBasketballPlayer(x))", "score": 0}
{"id": "folio_validation_531", "prediction": "all x.(OrBucklayPlayer(x) -> -(WearLargeShoes(x) & AmericanShoes(x)))", "score": 0}
{"id": "folio_validation_531", "prediction": "all x.((Yuri(x) & -WearsLargeShoes(x)) -> AmericanBasketballPlayer(x))", "score": 0}
{"id": "folio_validation_531", "prediction": "all x.((Yuri(x) & NorWearsLargeShoes(x)) -> AmericanBasketballPlayer(x))", "score": 0}
{"id": "folio_validation_531", "prediction": "All x.((Yuri(x) & -UsesLargeShoes(x)) -> AmericanBasketballPlayer(x))", "score": -1}
{"id": "folio_validation_531", "prediction": "(all x.(Yuri(x) -> -WearLargeShoes(x)))", "score": 0}
{"id": "folio_validation_531", "prediction": "all x.(BalloonPlayer(x) -> (-WorthLargeShoes(x) & AmericanBalloonPlayer(x)))", "score": 0}
{"id": "folio_validation_532", "prediction": "all x y.((Yuri(x) & -AmericanBasketballPlayer(x)) -> BasketballPlayer(y))", "score": 0}
{"id": "folio_validation_532", "prediction": "all x.((FollowsAmericanBasketballPlayer(x) & -AmericanBasketballPlayer(x)) -> BasketballPlayer(x))", "score": 0}
{"id": "folio_validation_532", "prediction": "all x.((Yur(x) & -AmericanBasketball(x)) -> BasketballPlayer(x))", "score": 0}
{"id": "folio_validation_532", "prediction": "all x.((ArabBasketballPlayer(x) & -AmericanBasketballPlayer(x)) -> BasketballPlayer(x))", "score": 0}
{"id": "folio_validation_532", "prediction": "all x.((Yuri(x) & -AmericanBasketballPlayer(x)) -> BasketballPlayer(x))", "score": 0}
{"id": "folio_validation_532", "prediction": "all x.((Yuri(x) & -AmericanbasketballPlayer(x)) -> BasketballPlayer(x))", "score": 0}
{"id": "folio_validation_532", "prediction": "All x.((Yuri(x) & -AmericanBasketballPlayer(x)) -> BasketballPlayer(x))", "score": -1}
{"id": "folio_validation_532", "prediction": "all x.((YuriNutherAmericanBasketballPlayer(x) & -AmericanBasketballPlayer(x)) -> BasketballPlayer(x))", "score": 0}
{"id": "folio_validation_532", "prediction": "all x.(-AmericanBasketballPlayer(X) -> BasketballPlayer(x))", "score": 0}
{"id": "folio_validation_533", "prediction": "all x y.((Event(x) & Happy(x)) | Sad(y)) -> (Happy(x) | Sad(y)))", "score": -1}
{"id": "folio_validation_533", "prediction": "all x.(Event(x) -> (Happy(x) | Sad(x)))", "score": 0}
{"id": "folio_validation_533", "prediction": "exists x.(Event(x) & (Happy(x) | Sad(x)))", "score": 0}
{"id": "folio_validation_533", "prediction": "all x.(Event(x) -> (Holy(x) | Sad(x)))", "score": 0}
{"id": "folio_validation_533", "prediction": "all x.(Event(x) -> (Hope(x) | Sad(x)))", "score": 0}
{"id": "folio_validation_533", "prediction": "all x y.((Event(x) & Happy(x) | Sad(y)) -> (Fallen(x) | Sad(y)))", "score": 0}
{"id": "folio_validation_534", "prediction": "all x.(Event(x) -> Happy(x))", "score": 0}
{"id": "folio_validation_534", "prediction": "all x.((Event(x) & Happy(x)) -> Happy(x))", "score": 0}
{"id": "folio_validation_534", "prediction": "exists x.(Event(x) & Happy(x))", "score": 0}
{"id": "folio_validation_534", "prediction": "at least one event is happy.", "score": -1}
{"id": "folio_validation_535", "prediction": "all x.(Event(x) -> Sad(x))", "score": 0}
{"id": "folio_validation_535", "prediction": "-all x.(Event(x) -> Sad(x))", "score": 0}
{"id": "folio_validation_536", "prediction": "The winner of the 1992 Du MaurierClassic was Steinhauer.", "score": -1}
{"id": "folio_validation_536", "prediction": "(Winner(x,b) & Du MaurierClassic(x,b)) - Steinhauer.", "score": -1}
{"id": "folio_validation_536", "prediction": "the winner of the 1992 du MaurierClassic was Steinhauer.", "score": -1}
{"id": "folio_validation_536", "prediction": "WinnerOfDuMaurierClassic(92) was Steinhauer(Steinhauer)", "score": -1}
{"id": "folio_validation_536", "prediction": "the winner of 1992 Du MaurierClassic(Steinhauer)", "score": -1}
{"id": "folio_validation_536", "prediction": "Le grand-prize de la du MaurierClassic 1992 a été remporté par Steinhauer.", "score": -1}
{"id": "folio_validation_536", "prediction": "(1992, du MaurierClassic) : Steinhauer & Winner((Standard(Stonehauer))", "score": -1}
{"id": "folio_validation_536", "prediction": "-(Winner(in-Bird-1992,Du MaurierClassic)))", "score": -1}
{"id": "folio_validation_536", "prediction": "Le ronqué de 1992 du MaurierClub (Ruwin) & Steinhauer(Steinhauer)", "score": -1}
{"id": "folio_validation_536", "prediction": "Der SiegerDuMaurierClassic(1992) & Steinhauer(2010))", "score": -1}
{"id": "folio_validation_536", "prediction": "Der Gewinner des DuMaurierClassics(92) & Steinhauer(Steinhauer)", "score": -1}
{"id": "folio_validation_536", "prediction": "Le victu n° 1992 du MaurierClassic a été Steinhauer.", "score": -1}
{"id": "folio_validation_536", "prediction": "Der Gewinner(DebbiesMajority92) & Steinhauer(Steinhauer))", "score": -1}
{"id": "folio_validation_536", "prediction": "(1992 du MaurierClassic) - Steinhauer(Steinhauer))", "score": -1}
{"id": "folio_validation_536", "prediction": "Der GewinnerHofBoboisDemocracy(92) & Du MaurierClassic(91) & Steinhauer(Steinhauer))", "score": -1}
{"id": "folio_validation_536", "prediction": "(1992) Du MaurierClassicWinner(x))", "score": -1}
{"id": "folio_validation_537", "prediction": "Steinhauer participated in the 1992 du MaurierClassic.", "score": -1}
{"id": "folio_validation_537", "prediction": "Steinhauer & Du MaurierClassical(92) & ParticipatedIn(Steinhauer,92))", "score": -1}
{"id": "folio_validation_537", "prediction": "ParticipatedInDuMaurierClassic(Steinhauer,Boys, 1992)", "score": 0}
{"id": "folio_validation_537", "prediction": "(1992, du MaurierClassic) : participated(Steinhauer, 1992))", "score": -1}
{"id": "folio_validation_537", "prediction": "all x.(Steinhauer(x) -> ParticipatedIn(x,02))", "score": 0}
{"id": "folio_validation_537", "prediction": "Steinhauer participated in du MaurierClassic, 1992.", "score": -1}
{"id": "folio_validation_537", "prediction": "1996-1992 Participant(Steinhauer)", "score": -1}
{"id": "folio_validation_537", "prediction": "Steinhauer participated in du MaurierClassic(Salthauer,92)", "score": -1}
{"id": "folio_validation_537", "prediction": "Steinhauer participated in the desMaurierClassique(steinhauer)", "score": -1}
{"id": "folio_validation_537", "prediction": "(Participation(Steinhauer,1992) & Du MaurierClassic(Steinehauer,1992))", "score": -1}
{"id": "folio_validation_537", "prediction": "-(SteirhauerParticipatedInBirthMassage(Steinerhauer,(Steeler,92)))", "score": -1}
{"id": "folio_validation_537", "prediction": "(1992 & Du MaurierClassic(Stonehauer,2))", "score": -1}
{"id": "folio_validation_537", "prediction": "Du MaurierClassic (DuMaurierChampionship(Steinerhauer) & Participated(Steinerhauer,1992))", "score": -1}
{"id": "folio_validation_537", "prediction": "1996-1992DuMaurierClassic(Steinhauer)", "score": -1}
{"id": "folio_validation_537", "prediction": "1993 - ParticipatedInDuMaurierClassic(Steinhauer,Boston)", "score": -1}
{"id": "folio_validation_537", "prediction": "Steinhauer a participated in the 1992 du MaurierClassic.", "score": -1}
{"id": "folio_validation_538", "prediction": "one SixWayTie(x) & one Person(x) -Belgium(x))", "score": -1}
{"id": "folio_validation_538", "prediction": "(We had one six-wayTie(x) & One PersonIn(x,sixwayTie) OriginallyFromBelgium(x))", "score": -1}
{"id": "folio_validation_538", "prediction": "(exists x.(SixWayTie(x)) & Leaderboard(x) & Person(x) & SixWayTie(x) & Belgian(x)))", "score": -1}
{"id": "folio_validation_538", "prediction": "(exists x.(SixWayTie(x) & Leaderboard(x)) & exists y.(SixWayTie(y) & PersonInTie(y,x))))", "score": -1}
{"id": "folio_validation_538", "prediction": "all x.((Ties(x) & SixWay(x)) -> FromBelgium(x))", "score": 0}
{"id": "folio_validation_538", "prediction": "(exists x.(SixWayTie(x) & LeaderboardLeaderboard(x)) & exists y.(FromBelgium(y))))", "score": -1}
{"id": "folio_validation_538", "prediction": "all x.((SixWayTie(x) & Leaderboard(x)) -> (Nihilates(x) & InKindership(x,Belgium)))", "score": 0}
{"id": "folio_validation_538", "prediction": "(there was x y.((SixWayTie(x) & Leaderboard(y))) -> Person(x,y))", "score": -1}
{"id": "folio_validation_538", "prediction": "all x y.((Tie(x) & Person(y) & SixWayTie(x,y)) -> (British(y,x) & MemberOf(y,x)))", "score": 0}
{"id": "folio_validation_538", "prediction": "(all x.(SixWayTie(x) -> LeaderboardFactor (x))) & all y.(SixWayTie(y) -> PersonFromBelgium(y)))", "score": -1}
{"id": "folio_validation_538", "prediction": "all x.(RecentSixWayTie(x) -> (HasTie(x,6) & - ((Belgian(x) & -Belgium(x)) -> HasTrue(x,6))))", "score": 0}
{"id": "folio_validation_538", "prediction": "all x y.((Person(x) & SixWayTie(y) & Leaderboard(y)) -> ((Belgium(x) | Belgium(y))))", "score": 0}
{"id": "folio_validation_538", "prediction": "(exists x.(SixWayTie(x) & Leaderboard(x)) & exists y.(BelgiumPerson(y) & HasSixWayTie(y))))", "score": -1}
{"id": "folio_validation_538", "prediction": "exists x y z.(SixWayTieOnLeaderboard(x,y) & Person(z) & SixWayTie(z,y) & -StillBelgian(z))", "score": 0}
{"id": "folio_validation_538", "prediction": "all x.(Tee(x) & Leaderboard(x,6) & Person(x,62))", "score": 0}
{"id": "folio_validation_538", "prediction": "(exists x.(Tie(x) & inleaderboard(x) & SixWay(x)) & BelgiumInChiefPerson(x))", "score": 0}
{"id": "folio_validation_539", "prediction": "Descampe is from Belgium and LeaderboardOfClassic(e) 1992.", "score": -1}
{"id": "folio_validation_539", "prediction": "Descampe is from Belgium and onLeaderboardOfDumberClassic(Dumber,1922))", "score": -1}
{"id": "folio_validation_539", "prediction": "Descampe is from Belgium and onLeaderboardOfDumarierClassic(doesNotMeanYourself(doesNotMeanYourself(d))", "score": -1}
{"id": "folio_validation_539", "prediction": "-MeetsLeaderboardEfficiently(Dashcampe)", "score": 0}
{"id": "folio_validation_539", "prediction": "Descampe is from Belgium and exists on the Leaderboard(Descampe(Debbie) & 1992DuMaurierClassic(MaurierClassic))", "score": -1}
{"id": "folio_validation_539", "prediction": "Descampe (Belgium) & LeaderboardOfDuMaurierClassic(Moore) 1992.", "score": -1}
{"id": "folio_validation_539", "prediction": "Descampe (Belgium) & LeaderboardOfSolutions(MaurierClosure,92))", "score": -1}
{"id": "folio_validation_539", "prediction": "(Meaning) | DuMaurierClassic(Majority))", "score": -1}
{"id": "folio_validation_539", "prediction": "(Belgium(Descampe) & LeaderboardOf(DaumierClassic(D2) & 1992(Descampe))", "score": -1}
{"id": "folio_validation_539", "prediction": "Dascampe(d) s Brussel and OnLeaderboardOfDuMaurierClassic(d))", "score": -1}
{"id": "folio_validation_539", "prediction": "Descampe is from Belgium and onLeaderboardOfMaurierClassic(Descampe,92))", "score": -1}
{"id": "folio_validation_539", "prediction": "in der Slowakei. Descampe is from Belgium and CurrentlyOnLeaderboard(Descampe,Boston,Birds(Descampe,British))", "score": -1}
{"id": "folio_validation_539", "prediction": "X.(Descampe(x) -> (Belgium(x) & LeaderboardOfClassic(x,Boston1992)))", "score": -1}
{"id": "folio_validation_539", "prediction": "Descampe is Belgian(les) & OnLeaderboardOrMaurierClassic(les) & 1992(les) & LesSquares(les))", "score": -1}
{"id": "folio_validation_539", "prediction": "Descampe is from Belgium and is onLeaderboardOfDumrierClassic(descampe,92))", "score": -1}
{"id": "folio_validation_539", "prediction": "(UndersampleDescampe(descampe) & Belgium(descampe) & LeaderboardBoard(descampe,92))", "score": 0}
{"id": "folio_validation_540", "prediction": "all x y.((People(x) & LeaderboardOf92 du Maurier Classic(x)y)) -> ParticipatedIn(x,y))", "score": -1}
{"id": "folio_validation_540", "prediction": "all x.((Person(x) & Leaderboard(x,92) & DuMaurierClassic(x)) -> ParticipatedIn92DuMaurierClassic(x))", "score": 0}
{"id": "folio_validation_540", "prediction": "all x y z.((Person(x) & Group(y) & Leaderboard(z)) -> ParticipatedIn(x,y,z))", "score": 0}
{"id": "folio_validation_540", "prediction": "all x.((People(x) & Leaderboard(x,92)) -> ParticipatedInConcert(x,1992))", "score": 0}
{"id": "folio_validation_540", "prediction": "all x.(Leaderboard(x,y) -> ParticipatedIn(y,z))", "score": 0}
{"id": "folio_validation_540", "prediction": "all x y.((Person(x) & Leaderboard(x,y) & 1992DuMaurierClassic(y)) -> ParticipatedIn(x,y))", "score": 0}
{"id": "folio_validation_540", "prediction": "all x y.((Person(x) & Leaderboard(y) & DuMaurierClassic(y)) -> ParticipatedInCompetition(x,y))", "score": 0}
{"id": "folio_validation_540", "prediction": "all x y.((Person(x) & Leaderboard(x,y) & DuMaurierClassic(y)) -> ParticipatedIn(x,y))", "score": 0}
{"id": "folio_validation_540", "prediction": "all x y z.((Person(x) & LeaderboardDebbie(y) & Du MaurierClassic(z)) -> ParticipatedIn(x,y,z))", "score": -1}
{"id": "folio_validation_540", "prediction": "all x.((Person(x) & Leaderboard(x,92)) -> ParticipatedInFestival(x,92))", "score": 0}
{"id": "folio_validation_540", "prediction": "all x.((People(x) & Leaderboard(x,z) & 1992DuMaurierClassic(y)) -> ParticipatedIn(x,z))", "score": 0}
{"id": "folio_validation_540", "prediction": "all x.((People(x) & LeaderboardOfTheBobbies(x,y) & DuMaurerClassic(y)) -> Participated(x,y))", "score": 0}
{"id": "folio_validation_540", "prediction": "all x.(Leaderboard(x,2) -> Participated(x))", "score": 0}
{"id": "folio_validation_540", "prediction": "all x.(Leaderboard(x,2) -> ParticipatedInDumrierClassic(x))", "score": 0}
{"id": "folio_validation_540", "prediction": "all x.((People(x) & LeaderboardOfDuMaurierClassic(x)) -> ParticipatedInDuMaurierClassic(x, 1992))", "score": 0}
{"id": "folio_validation_540", "prediction": "all x y.((Leaderboard(x,y) & 1992DuMaurierClassic(y)) -> ParticipatedIn(x,y))", "score": 0}
{"id": "folio_validation_541", "prediction": "(-WinnerFromMaurierClassic(Steinhauer) & 1992(Steinerhauer,2))", "score": 0}
{"id": "folio_validation_541", "prediction": "(-WinnerOfTheDuMaurierClassic(steinhauer) & -(SiegerOfClassical(steinhauer) & (DumerMonaurierClassic(stein) & 1992))))", "score": -1}
{"id": "folio_validation_541", "prediction": "-(Higger wasCelebrityWinner(Steinerhauer,Boss) & du MaurierClassic(Steinermauer,Boss2)))", "score": -1}
{"id": "folio_validation_541", "prediction": "Steinhauer was -winner of du MaurierClassic(92))", "score": -1}
{"id": "folio_validation_541", "prediction": "(-Winner(Steinhauer,DuMaurierCycle))", "score": 0}
{"id": "folio_validation_541", "prediction": "(-WinnerOfDuMaurierClassic, 1992))", "score": -1}
{"id": "folio_validation_541", "prediction": "-(Steinhauer(Steinhauer) & DuMaurierClassic(BoyenBoyen(Steinhauer, 1992))", "score": -1}
{"id": "folio_validation_541", "prediction": "-(Steinhauer wonCongress(Steinhauer,92))", "score": -1}
{"id": "folio_validation_541", "prediction": "–(Stonehauer(s) & 1992 Du MaurierClassic(s)))", "score": -1}
{"id": "folio_validation_541", "prediction": "1992 du Maurier Classicist(Steinhauer)", "score": -1}
{"id": "folio_validation_541", "prediction": "(-Winner(Steinhauer,92) & Du MaurierClassic(Steinerhauer,92))", "score": -1}
{"id": "folio_validation_541", "prediction": "Steinhauer -CloserOfMaurerierClassic2(Steinhauer,1992))", "score": -1}
{"id": "folio_validation_541", "prediction": "-(Steinhauer(s) & Du-MaurierClassic(b) & ComptedOf(s,b)))", "score": -1}
{"id": "folio_validation_541", "prediction": "-Brexit(Steinhauer,Bromage)", "score": 0}
{"id": "folio_validation_541", "prediction": "((Steinhauer(Steinhauer) & -BobsMaurierClassic(Steinhauer,92)) -> -Winner(Steinhauer,92))", "score": 0}
{"id": "folio_validation_541", "prediction": "(-WinnerOfDuMaurierClassic(Steinhauer))", "score": 0}
{"id": "folio_validation_542", "prediction": "Descampe is inseparableToSixWayTieForClassics(descampe,92) & LeaderboardLimitedTo(descampe,1992))", "score": -1}
{"id": "folio_validation_542", "prediction": "(Leaderboard(Descampe,92) & SixWayTie(Descampe))", "score": 0}
{"id": "folio_validation_542", "prediction": "Descampe is in SixWayTie(Descampe) -> Leaderboard(Descampe,92))", "score": -1}
{"id": "folio_validation_542", "prediction": "Decampe is in the sixwayTie in the LeaderboardOfBirth ofDuMaurierClassic(2B)", "score": -1}
{"id": "folio_validation_542", "prediction": "Lescampe is in the SixWayTie of 1992 Du MaurierClassic.", "score": -1}
{"id": "folio_validation_542", "prediction": "Descampe is inSixWayTieBetweenLeaderboard(DormantClassic,92)", "score": -1}
{"id": "folio_validation_542", "prediction": "DuMaurierClassic (92) & SixWayTie(Descampe))", "score": -1}
{"id": "folio_validation_542", "prediction": "Lexmark/RedShapeTie(x) -> InLeaderboard(x,1992))", "score": -1}
{"id": "folio_validation_542", "prediction": "(SixWayTieInLeaderboardOfDuMaurierClassic(Descampe,Bodie) & ComposedByOfHorseBoard(Descampe))", "score": 0}
{"id": "folio_validation_542", "prediction": "(Tie(Déscampe,42) | SixWayTie(Dashback(DumrierClassic,92)))", "score": 0}
{"id": "folio_validation_542", "prediction": "(SixWayTie(Dashcampe) & Leaderboard(DunMaurierClassic(DumrierClassic) & 1992)", "score": -1}
{"id": "folio_validation_542", "prediction": "Descampe is in the SixWayTieInLeaderboardOfDuMaurierClassic(Descampe)", "score": -1}
{"id": "folio_validation_542", "prediction": "Descampe is in the SixWayTied(x) & LeaderboardOfBicentBoyDuMaurierClassic(x))", "score": -1}
{"id": "folio_validation_542", "prediction": "all x.(Descampe(x) -> SixWayTie(x,BeverageOfMaurierClass(x))", "score": -1}
{"id": "folio_validation_542", "prediction": "(SixWayTie(s) & LeaderboardOf(s,y) & DuMaurierClassic(x,y))", "score": 0}
{"id": "folio_validation_542", "prediction": "(SixWayTie(Descampe) & Leaderboard(Descampe,Crossman) & 1992DuMaurierClassic(Descampe,Closman))", "score": 0}
{"id": "folio_validation_543", "prediction": "all x.((Animal(x) & Barks(x)) -> JaneDoesNotLike(x))", "score": 0}
{"id": "folio_validation_543", "prediction": "all x.(Barks(x) -> JaneDislikes(x))", "score": 0}
{"id": "folio_validation_543", "prediction": "all x.(Barks(x) -> -(Jane(x) & Barks(x)))", "score": 2}
{"id": "folio_validation_543", "prediction": "all x.((Animal(x) & Barks(x)) -> -Meets(x,z))", "score": 0}
{"id": "folio_validation_543", "prediction": "all x.((Animal(x) & Barks(x)) -> DoesntLove(x,Y))", "score": 0}
{"id": "folio_validation_543", "prediction": "all x y.((Animal(x) & Barks(x)) -> JaneDoesNotLike(x,y))", "score": 0}
{"id": "folio_validation_543", "prediction": "all x.(Barks(x) -> JaneDoesNotLike(x))", "score": 0}
{"id": "folio_validation_543", "prediction": "all x.((Animal(x) & Barks(x)) -> JaneDoesNotMeander(x))", "score": 0}
{"id": "folio_validation_543", "prediction": "all x.(Barks(x) -> JaneNotLikes(x))", "score": 0}
{"id": "folio_validation_543", "prediction": "all x.(Barks(x) -> JaneDamneDamne.", "score": -1}
{"id": "folio_validation_543", "prediction": "all x.((Animal(x) & Barks(x)) -> WeaklyLikes(x,Jean))", "score": 0}
{"id": "folio_validation_543", "prediction": "all x.((Animal(x) & Barks(x)) -> JaneDon’tMeets(x,y))", "score": 0}
{"id": "folio_validation_543", "prediction": "all x.(Barks(x) -> IsNotJane(x))", "score": 0}
{"id": "folio_validation_543", "prediction": "all x.(Barks(x) -> JaneDoesNotHave(x))", "score": 0}
{"id": "folio_validation_543", "prediction": "all x.(Barks(x) -> Jane-likes(x))", "score": -1}
{"id": "folio_validation_544", "prediction": "all x.(Dog(x) -> Barks(x))", "score": 0}
{"id": "folio_validation_544", "prediction": "all x.(Dog(x) -> Barker(x))", "score": 0}
{"id": "folio_validation_544", "prediction": "all x.(Dog(x) -> (Animal(x) & Barks(x)))", "score": 2}
{"id": "folio_validation_544", "prediction": "all x.(Dog(x) -> Bark(y))", "score": 0}
{"id": "folio_validation_544", "prediction": "all x.(Dog(x) -> Barking(x))", "score": 0}
{"id": "folio_validation_544", "prediction": "all x.(Dog(x) -> Bark(x))", "score": 0}
{"id": "folio_validation_544", "prediction": "all x.(Dog(x) -> Animal(x) & Bark(x))", "score": 0}
{"id": "folio_validation_545", "prediction": "all x.(Jump(x) -> Likeas(x,y))", "score": 0}
{"id": "folio_validation_545", "prediction": "all x.(Jumps(x) -> Likes(x,Jane))", "score": 0}
{"id": "folio_validation_545", "prediction": "all x.(Jump(x) -> Likes(x,jaw))", "score": 0}
{"id": "folio_validation_545", "prediction": "all x.((Animal(x) & Jumps(x)) -> Likes(x,Janet))", "score": 0}
{"id": "folio_validation_545", "prediction": "all x.((Animal(x) & Jumps(x)) -> Likes(x,y))", "score": 0}
{"id": "folio_validation_545", "prediction": "all x.((Animal(x) & Jumps(x)) -> Like(x,y))", "score": 0}
{"id": "folio_validation_545", "prediction": "all x.((Animal(x) & Jumps(x)) -> Jane(x))", "score": 2}
{"id": "folio_validation_545", "prediction": "all x.(Jumps(x) -> Likes(x,y))", "score": 0}
{"id": "folio_validation_545", "prediction": "all x.(HasAnimals(x) -> Likes(x,Jet))", "score": 0}
{"id": "folio_validation_545", "prediction": "all x.((Animal(x) & Jumps(x)) -> Likes(x,Jane))", "score": 0}
{"id": "folio_validation_545", "prediction": "all x.(JumpsAtAnimal(x) -> Likes(x,Jane))", "score": 0}
{"id": "folio_validation_545", "prediction": "all x y.((Animal(x) & Animal(y) & Jumps(x)) -> Likes(y,x))", "score": 0}
{"id": "folio_validation_545", "prediction": "all x.(Jump(x) -> Likes(x,y))", "score": 0}
{"id": "folio_validation_546", "prediction": "all x.((Animal(x) & HasLegs(x)) -> Jumps(x))", "score": 2}
{"id": "folio_validation_546", "prediction": "all x.(HasLegs(x) -> Jumps(x))", "score": 0}
{"id": "folio_validation_546", "prediction": "all x.exists y.((Animal(x) & HasLegs(x)) -> Jumps(x))", "score": 0}
{"id": "folio_validation_547", "prediction": "all x.(Terricolous(x) -> HasLegs(x))", "score": 2}
{"id": "folio_validation_547", "prediction": "all x.((Animal(x) & Terrirocolous(x)) -> HasLegs(x))", "score": 0}
{"id": "folio_validation_547", "prediction": "all x.((Animal(x) & Terriricolous(x)) -> HasLegs(x))", "score": 0}
{"id": "folio_validation_547", "prediction": "all x.((Animal(x) & Territorious(x)) -> HasLegs(x))", "score": 0}
{"id": "folio_validation_547", "prediction": "all x.((Animal(x) & Terrocous(x)) -> HasLegs(x))", "score": 0}
{"id": "folio_validation_547", "prediction": "all x.((Animal(x) & Terrocole(x)) -> HasLegs(x))", "score": 0}
{"id": "folio_validation_547", "prediction": "all x.((Animal(x) & Terroconous(x)) -> HasLegs(x))", "score": 0}
{"id": "folio_validation_548", "prediction": "all x.((KiKi(x) & (-Jumps(x) | HasLegs(x))) -> (Terricolous(x) | HasLegs(x)))", "score": 0}
{"id": "folio_validation_548", "prediction": "all x.((KiKi(x) & -Jumps(x) & -HasLegs(x)) -> (Terricolous(x) | HasLegs(x)))", "score": 0}
{"id": "folio_validation_548", "prediction": "all x.((KiKi(x) & -Jumps(x) & NoLegs(x)) -> (Terricolous(x) | HasLegs(x)))", "score": 0}
{"id": "folio_validation_548", "prediction": "all x.((KiKi(x) & -(Jumps(x) | HasLegs(x))) -> (Terricolous(x) | HasLegs(x)))", "score": 0}
{"id": "folio_validation_548", "prediction": "all x.((KiKi(x) & -Jumpers(x) & -HasLegs(x)) -> (Terricolous(x) | HasLegs(x)))", "score": 0}
{"id": "folio_validation_548", "prediction": "all x.(Terricolous(x) | HasLegs(x))", "score": 2}
{"id": "folio_validation_548", "prediction": "all x.((KiKi) & -Jump(x) & -HasLegs(x)) -> (Terricolous(x) | HasLegs(x)))", "score": -1}
{"id": "folio_validation_548", "prediction": "all x.((KiKi(x) & -Jumps(x) & HasLegs(x)) -> (Terricolous(x) | HasLegs(x)))", "score": 0}
{"id": "folio_validation_549", "prediction": "KiKi isTerricolous.", "score": -1}
{"id": "folio_validation_549", "prediction": "KiKi is Terroconous.", "score": -1}
{"id": "folio_validation_549", "prediction": "KiKi isTerricolous(ki)", "score": -1}
{"id": "folio_validation_549", "prediction": "KiKi (Terricolous)", "score": 0}
{"id": "folio_validation_549", "prediction": "KiKi(ki) -> Terricolous(ki))", "score": -1}
{"id": "folio_validation_549", "prediction": "KiKi is terricolous.", "score": -1}
{"id": "folio_validation_549", "prediction": "KiKi: TerritorialOx.", "score": -1}
{"id": "folio_validation_549", "prediction": "all x.(KiKi(x) -> Tericolous(x))", "score": 0}
{"id": "folio_validation_549", "prediction": "KiKi isterricolous.", "score": -1}
{"id": "folio_validation_549", "prediction": "(Terricolous(KiKi))", "score": 0}
{"id": "folio_validation_549", "prediction": "KiKi(ki) -> Territoricolous(ki))", "score": -1}
{"id": "folio_validation_549", "prediction": "KiKi is TerritorialColonial(KiKi)", "score": -1}
{"id": "folio_validation_549", "prediction": "(Terricolous(kiKi) -> Terricolous(ki))", "score": 0}
{"id": "folio_validation_549", "prediction": "KiKi is Terricolous.", "score": -1}
{"id": "folio_validation_550", "prediction": "all x.(KiKi(x) -> (Barks(x) & Dog(x)))", "score": 0}
{"id": "folio_validation_550", "prediction": "all x.(KiKi(x) -> (Bares(x) & Dog(x)))", "score": 0}
{"id": "folio_validation_550", "prediction": "(Barks(KiKi) & CanDog(KiKi))", "score": 0}
{"id": "folio_validation_550", "prediction": "all x.(KiKi(x) -> BarksAndDog(x))", "score": 0}
{"id": "folio_validation_550", "prediction": "all x.(HasBarks(x) -> Dog(x))", "score": 0}
{"id": "folio_validation_550", "prediction": "(Barks(KiKi) & Dog(KiKi))", "score": 1}
{"id": "folio_validation_550", "prediction": "all x.(KiKiti(x) -> (Barks(x) & Dog(x)))", "score": 0}
{"id": "folio_validation_550", "prediction": "exists x.(KiKi(x) & Barks(x) & Dog(x))", "score": 1}
{"id": "folio_validation_550", "prediction": "all x.(KiKi,BarksAndDog(x))", "score": -1}
{"id": "folio_validation_551", "prediction": "(-Barks(KiKi) & -Dog(KiKi))", "score": 0}
{"id": "folio_validation_551", "prediction": "((KiKi) & -Barks(KiKi)) | Dog(KiKi)))", "score": -1}
{"id": "folio_validation_551", "prediction": "the only dog(KiKi) -> (-Barks(KiKi) & -Dog(KiKi)))", "score": -1}
{"id": "folio_validation_551", "prediction": "-(Barks(KiKi,i) | Dog(KiKi)))", "score": -1}
{"id": "folio_validation_551", "prediction": "all x.(KiKi(x) -> (NoBarks(x) & -Dog(x)))", "score": 0}
{"id": "folio_validation_551", "prediction": "(All x.(KiKi) -> -Barks(x) | Dog(x)))", "score": -1}
{"id": "folio_validation_551", "prediction": "-(Barks(KiKi) & -Dog(KiKi))", "score": 0}
{"id": "folio_validation_551", "prediction": "(-Barks(Kiki) & Dog(KiKi))", "score": 0}
{"id": "folio_validation_551", "prediction": "(-Barks(KiKi) | Dog(KiKi)))", "score": -1}
{"id": "folio_validation_551", "prediction": "(-Barks(KiKI) & -Dog(KiKi))", "score": 0}
{"id": "folio_validation_551", "prediction": "all x.(KiKi(x) -> (-Barks(x) | Dog(x)))", "score": 0}
{"id": "folio_validation_551", "prediction": "| Dog())", "score": -1}
{"id": "folio_validation_551", "prediction": "(-(Barks(kiKi) & -Dog(ki)))", "score": 0}
{"id": "folio_validation_551", "prediction": "is a dog(KiKi)", "score": -1}
{"id": "folio_validation_552", "prediction": "Ailton Silva (bornIn95) and CommonlyKnownAsAilton(x))", "score": -1}
{"id": "folio_validation_552", "prediction": "AiltonSilveira, (BornIn95) & KnownAs(Silvedge))", "score": -1}
{"id": "folio_validation_552", "prediction": "(BirthIn(AiltonSilvio,1996) & BirthedIn(Ailton,1998))", "score": 0}
{"id": "folio_validation_552", "prediction": "AiltonS Silva (bornIn95) & CommonlyKnownAsAilton(e))", "score": -1}
{"id": "folio_validation_552", "prediction": "Ailton Silva (bornIn95) is CommonlyKnownAsAilton(Ailton)", "score": -1}
{"id": "folio_validation_552", "prediction": "All x y.((AiltonSilva(x) & BornIn 1995(x) & BornIn(y,x)) -> Ailton(x))", "score": -1}
{"id": "folio_validation_552", "prediction": "Ailton Silva (BirthIn95) & CommonlyKnownAsAilton(a))", "score": -1}
{"id": "folio_validation_552", "prediction": "(English) & BornIn(ailton Silva,ailton.com) & OriginallyKnownAs(ailton))", "score": -1}
{"id": "folio_validation_552", "prediction": "Ailton Silva (bornIn95) (CurrentlyKnownAsAilton(f) & BornIn1995,f)))", "score": -1}
{"id": "folio_validation_552", "prediction": "Ailton Silva (bornIn95) & CommonlyKnownAsAilton(i))", "score": -1}
{"id": "folio_validation_552", "prediction": "all x.((RecordedIn(x,1995) & AiltonSilva(x)) -> AcquaintedWith(x,Ailton))", "score": 0}
{"id": "folio_validation_552", "prediction": "Ivy & AiltonSilva (bornIn95) & CommonlyKnownAsAilton(v))", "score": -1}
{"id": "folio_validation_552", "prediction": "AiltonSilva(bornIn(necessity(neither,1997) & KnownAsAilton(ne))", "score": -1}
{"id": "folio_validation_552", "prediction": "(BirthIn95(AiltonSilver) -> CommonlyKnownAs(Ailton))", "score": 0}
{"id": "folio_validation_552", "prediction": "All x.((Ailton(x) & BornInCommonDegree(x,1996)) -> CommonlyKnownAsAilton(x))", "score": -1}
{"id": "folio_validation_552", "prediction": "AiltonSilva (bornIn95) & SwornBy (Ailton(a) & BornIn95)))", "score": -1}
{"id": "folio_validation_553", "prediction": "Ailton is a football player who was loanedOuttoBraga.", "score": -1}
{"id": "folio_validation_553", "prediction": "Ailton is a football player who has been loaned out to Braga.", "score": -1}
{"id": "folio_validation_553", "prediction": "all x.((FootballPlayer(x) & LoanedOutWithBraga(x)) -> Ailton(x))", "score": 0}
{"id": "folio_validation_553", "prediction": "Ailton is a football player and LicensedToBraga(Ailton)", "score": -1}
{"id": "folio_validation_553", "prediction": "Ailton is a football player who was loaned out to Braga.", "score": -1}
{"id": "folio_validation_553", "prediction": "Ailton ((FCLoanedOut(Ailton) & Ailton(Briga)))", "score": 0}
{"id": "folio_validation_553", "prediction": "All x y z.((Ailton(x) & Braga(y) & FootballPlayer(z)) -> LoanedOut(x,z))", "score": -1}
{"id": "folio_validation_553", "prediction": "Ailton is a football player and FootballPlayer(a) & LoanedOutToBraga(w))", "score": -1}
{"id": "folio_validation_553", "prediction": "all x.((FootballPlayer(x) & BorrowedOutToBraga(x)) -> Ailton(x))", "score": 0}
{"id": "folio_validation_553", "prediction": "Ailton (footballplayer(a) & LoanedOutToBraga(b))", "score": -1}
{"id": "folio_validation_553", "prediction": "Ailton is football player who loaned-out to Braga.", "score": -1}
{"id": "folio_validation_553", "prediction": "the lions man of the world. Ailton(Ailton) is football player & loanedouttoBriga(Ailton,Briga))", "score": -1}
{"id": "folio_validation_553", "prediction": "(FLFAFootballPlayer(Ailton) & LoanedOutToBraga(Ailton))", "score": 0}
{"id": "folio_validation_553", "prediction": "(FootballPlayer(Ailton) & LoanedOutToBrega(Ailton))", "score": 0}
{"id": "folio_validation_553", "prediction": "(FootballPlayer(Ailton,LoanedOut): Braga(Ailton,Braga))", "score": -1}
{"id": "folio_validation_553", "prediction": "All x.((FootballPlayer(x) & LaraveledOutToBraga(x)) -> Ailton(x))", "score": -1}
{"id": "folio_validation_554", "prediction": "AiltonSilva (BrasilianFootballer(n) & PlaysForNautico(n))", "score": -1}
{"id": "folio_validation_554", "prediction": "Ailton Silva (BritishFootballer(Ailton) & PlaysForNautico(Ailton))", "score": -1}
{"id": "folio_validation_554", "prediction": "AiltonSilva(a) -> (BrazilianFootballer(b) & PlaysForNautico(c) & BrasilianFootballer(b)))", "score": -1}
{"id": "folio_validation_554", "prediction": "Ailton Silva (BritishFootballer(s) & Nautico(o) & PlaysFor(s,o))", "score": -1}
{"id": "folio_validation_554", "prediction": "AiltonSilva (BrazillianFootballer(a) & PlaysForNautico(b))", "score": -1}
{"id": "folio_validation_554", "prediction": "AiltonSilva(a) is a Brazillian footballer/JacksonGirl(s) & PlaysForNautico(a))", "score": -1}
{"id": "folio_validation_554", "prediction": "AiltonSilva(a) is a Brazilianfootballer(x) & PlaysForNautico(a))", "score": -1}
{"id": "folio_validation_554", "prediction": "all x.((Footballer(x) & Brazillian(x) & PlaysForNautico(x)) -> AiltonSilva(x))", "score": 0}
{"id": "folio_validation_554", "prediction": "(PlaysForNautico(AiltonSilva,BrasilianFootball) & Brazilian(AiltonSilva))", "score": 0}
{"id": "folio_validation_554", "prediction": "All x.(AiltonSilva(x) -> (BrasilianFootballer(x) & PlaysForNautico(x)))", "score": -1}
{"id": "folio_validation_554", "prediction": "Ailton Silva (BrazillianFootballer(a) & PlaysForNautico(a))", "score": -1}
{"id": "folio_validation_554", "prediction": "AiltonSilva(br) & BrazillianFootballer(br) & PlaysForNautico(br))", "score": -1}
{"id": "folio_validation_554", "prediction": "AiltonSilva (BrasilianFootballer(a) & PlaysForNautico(b))", "score": -1}
{"id": "folio_validation_554", "prediction": "AiltonSilva(a) (BrazillianFootballer(-PlaysForNautico(a)))", "score": 0}
{"id": "folio_validation_554", "prediction": "(BrasilianFootballer(AiltonS Silva) & PlaysForNautico(AiltonSilva))", "score": -1}
{"id": "folio_validation_554", "prediction": "AiltonSilveira (Footballer(brevial) & PlayesForNautico(b))", "score": -1}
{"id": "folio_validation_555", "prediction": "all x.(Nautico(x) -> (FootballClub(x) & Braga(x)))", "score": 0}
{"id": "folio_validation_555", "prediction": "Nautico(n) -> (FootballClub(n) & Braga(n) & -Braga(n)))", "score": -1}
{"id": "folio_validation_555", "prediction": "(FootballClub(Nautico,Braga) & FootballClub(Nautico))", "score": 0}
{"id": "folio_validation_555", "prediction": "All x.(Nautico(x) -> (FootballClub(x) & Braga(x)))", "score": -1}
{"id": "folio_validation_555", "prediction": "Nautico(n) s w.(footballClub(n) & Braga(w)))", "score": -1}
{"id": "folio_validation_555", "prediction": "Nautico is a football club along with Braga.", "score": -1}
{"id": "folio_validation_555", "prediction": "Nautico (FootballClub, Braga)", "score": 0}
{"id": "folio_validation_555", "prediction": "All x!(Nautico(x) -> (FootballClub(x) & Braga(x)))", "score": -1}
{"id": "folio_validation_555", "prediction": "(FootballClub(Nautico) & Braga(Nautico))", "score": 0}
{"id": "folio_validation_555", "prediction": "(FootballClub(Nautico) & Braga(Bava))", "score": 0}
{"id": "folio_validation_555", "prediction": "Nautico ist ein FußballClub(x) & AssociatedWithBraga(x))", "score": -1}
{"id": "folio_validation_555", "prediction": "Nautico is a footballclub along with Braga.", "score": -1}
{"id": "folio_validation_555", "prediction": "all x.(Nautico(x) -> (FriendshipClub(x) & Braga(x)))", "score": 0}
{"id": "folio_validation_555", "prediction": "all x y.((FootballClub(x) & Braga(y)) -> Nautico(x))", "score": 0}
{"id": "folio_validation_556", "prediction": "all x.(Fluminense(x) -> FootballClub(x))", "score": 0}
{"id": "folio_validation_556", "prediction": "exists x.(Fluminense(x) & FootballClub(x))", "score": 0}
{"id": "folio_validation_556", "prediction": "(Flutenense(fllumen) & FootballClub(fllumen))", "score": 0}
{"id": "folio_validation_556", "prediction": "(Fluminense(f) & FootballClub(f))", "score": 0}
{"id": "folio_validation_556", "prediction": "(Fluminense(Fluentinense) & FootballClub(Fluentinense))", "score": 0}
{"id": "folio_validation_556", "prediction": "Fluminense (FootballClub)", "score": 0}
{"id": "folio_validation_556", "prediction": "Fluminense is a footballclub.", "score": -1}
{"id": "folio_validation_556", "prediction": "(Flminense(Fluminia) & FootballClub(Fluminia))", "score": 0}
{"id": "folio_validation_556", "prediction": "Fluminense is FootballClub(x)", "score": -1}
{"id": "folio_validation_556", "prediction": "Fluminense FootballClub(x) & FoundedIn(x,FootballClub)", "score": -1}
{"id": "folio_validation_556", "prediction": "Flutenense, aka FootballClub(x))", "score": -1}
{"id": "folio_validation_557", "prediction": "-exists x.(PlayingTheNautico(x) & Brazilian(x))", "score": 0}
{"id": "folio_validation_557", "prediction": "-exists x.(PlayingForNautico(x) & Brazilian(x))", "score": 0}
{"id": "folio_validation_557", "prediction": "has BrazilianIndividual(Nautico)", "score": -1}
{"id": "folio_validation_557", "prediction": "-exists x.(PlayingNautico(x) & Brazilian(x))", "score": 0}
{"id": "folio_validation_557", "prediction": "all x.(PlayingForNautico(x) -> Brazilian(x))", "score": 0}
{"id": "folio_validation_557", "prediction": "exists x.(Player(x,Nautico) & Brazilian(x))", "score": 0}
{"id": "folio_validation_557", "prediction": "-exists x.(Playing(x,Nautico) & Brazilian(x))", "score": 0}
{"id": "folio_validation_557", "prediction": "-exists x.(Player(x) & Nautico(x))", "score": 0}
{"id": "folio_validation_557", "prediction": "-exists x.(PlayingFor(x,Nautico) & Brazilian(x))", "score": 0}
{"id": "folio_validation_558", "prediction": "all x.(Silvia(x) -> -PlaysForSport(x))", "score": 0}
{"id": "folio_validation_558", "prediction": "all x.(Valley(x) -> -PlayForFootballClub(x))", "score": 0}
{"id": "folio_validation_558", "prediction": "all x.(AiltonSilva(x) -> -PlaysForFootballClub(x))", "score": 0}
{"id": "folio_validation_558", "prediction": "all x.((AiltonSilvio(x) & -Foe(x)) -> -FootballClub(x))", "score": 0}
{"id": "folio_validation_558", "prediction": "all x.(Field(x) -> -AiltonSilver(x))", "score": 0}
{"id": "folio_validation_558", "prediction": "all x.(AiltonSilvy(x) -> -PlaysForFootballClub(x))", "score": 0}
{"id": "folio_validation_558", "prediction": "all x.((AiltonSilva(x) & FootballClub(y)) -> -PlaysFor(x,y))", "score": 0}
{"id": "folio_validation_558", "prediction": "All x.(Ailton SilvaFoe(x) -> -PlaysForFootballClub(x))", "score": -1}
{"id": "folio_validation_558", "prediction": "all x.(IltonSilva(x) -> -PlaysForFootballClub(x))", "score": 0}
{"id": "folio_validation_558", "prediction": "all x.((Foe(x) & AiltonSilva(x)) -> -PlaysForFootballClub(x))", "score": 0}
{"id": "folio_validation_558", "prediction": "all x.(AiltonSilvio(x) -> -PlaysForFootballClub(x))", "score": 0}
{"id": "folio_validation_558", "prediction": "all x.((AiltonSilva(x) & Foe(x)) -> -PlaysForFootballClub(x))", "score": 0}
{"id": "folio_validation_558", "prediction": "all x.((AiltonSilva(x) & FootballClub(x)) -> -PlaysFor(x,foes,n,y))", "score": 0}
{"id": "folio_validation_559", "prediction": "exists x.(Ailton(x) & -LedOutTo(x,footballClub))", "score": 0}
{"id": "folio_validation_559", "prediction": "Ailton's loanedouts to football clubs are atypical.", "score": -1}
{"id": "folio_validation_559", "prediction": "Ailton was not loaned out to a football club.", "score": -1}
{"id": "folio_validation_559", "prediction": "all x.(Ailton(x) -> -LoanedToFootballClub(x))", "score": 0}
{"id": "folio_validation_559", "prediction": "Ailton was not loaned out to football club.", "score": -1}
{"id": "folio_validation_559", "prediction": "Ailton neloyed to football club.", "score": -1}
{"id": "folio_validation_559", "prediction": "all x.((Ailton(x) & FootballClub(x)) -> -LoanedOutTo(x,FooterClub))", "score": 0}
{"id": "folio_validation_559", "prediction": "Ailton was not loaned to football club.", "score": -1}
{"id": "folio_validation_559", "prediction": "Ailton was not loaned out to FootballClubs.", "score": -1}
{"id": "folio_validation_559", "prediction": "Ailton's loan-out to football club - was not made.", "score": -1}
{"id": "folio_validation_559", "prediction": "Ailton, however, was -LoanedOutToFootballClub(Ailton)", "score": -1}
{"id": "folio_validation_559", "prediction": "(-LoanedTo(Ailton) -> FootballClub(Ailton))", "score": 0}
{"id": "folio_validation_559", "prediction": "Ailton nellowedOutTo(Ailton,FootballClub)", "score": -1}
{"id": "folio_validation_559", "prediction": "(-LoanedOutToFootballClub(Ailton))", "score": 0}
{"id": "folio_validation_559", "prediction": "all x.(Ailton(x) -> -LoanedOutToFootballClub(x))", "score": 0}
{"id": "folio_validation_560", "prediction": "AiltonSilva playedforFluminense(AiltonSilva)", "score": -1}
{"id": "folio_validation_560", "prediction": "AiltonS Silva played for Fluminense.", "score": -1}
{"id": "folio_validation_560", "prediction": "AiltonSilveiraPlayedForFluminense(AiltonSilveira)", "score": 0}
{"id": "folio_validation_560", "prediction": "AiltonSilva playedFor Fluminense.", "score": -1}
{"id": "folio_validation_560", "prediction": "AiltonSilva played for Fluminense.", "score": -1}
{"id": "folio_validation_560", "prediction": "AiltonSilva PlayedFluminense(a)", "score": -1}
{"id": "folio_validation_560", "prediction": "(PlayedFor(AiltonSilva,Fluminense) -> PlayedFor(AiltonSilva,Fluminense))", "score": 0}
{"id": "folio_validation_560", "prediction": "Ailton Silva played for Fluminense.", "score": -1}
{"id": "folio_validation_560", "prediction": "Alvin Silva played for Fluminense.", "score": -1}
{"id": "folio_validation_560", "prediction": "AiltonSilva Played(AiltonLilly,Flominense)", "score": -1}
{"id": "folio_validation_560", "prediction": "AiltonSilvaPosition(a) -> PlayedForFluminense(a))", "score": -1}
{"id": "folio_validation_560", "prediction": "AiltonSilva playedForFluminense.", "score": -1}
{"id": "folio_validation_560", "prediction": "AiltonSilva(Ailton,Fluminense)", "score": 0}
{"id": "folio_validation_560", "prediction": "AiltonSilvaPlayedForFluminense(a)", "score": 0}
{"id": "folio_validation_561", "prediction": "all x.((AiltonSilva(x) & FootballClub(y)) -> LoanedOutTo(x,y))", "score": 0}
{"id": "folio_validation_561", "prediction": "all x y.((AiltonSilva(x) & FootballClub(y)) -> Loaned(x,y))", "score": 0}
{"id": "folio_validation_561", "prediction": "all x y z.((AiltonSilva(x) & FootballClub(y) & FootballClub(z)) -> LoanedOut(x,y,z))", "score": 0}
{"id": "folio_validation_561", "prediction": "all x y.((AiltonSilvey(x) & FootballClub(y)) -> LoanedOutTo(x,y))", "score": 0}
{"id": "folio_validation_561", "prediction": "Ailton Silva was loaned out to football club.", "score": -1}
{"id": "folio_validation_561", "prediction": "Ailton Silva was loaned out to a football club.", "score": -1}
{"id": "folio_validation_561", "prediction": "all x y.((AiltonSilver(x) & FootballClub(y)) -> LoanedOut(x,y))", "score": 0}
{"id": "folio_validation_561", "prediction": "all x y.((Loan(x) & FootballClub(y)) -> AiltonSilva(x,y))", "score": 0}
{"id": "folio_validation_561", "prediction": "all x y.((Silvador(x) & FootballClub(y)) -> LoanedOutTo(x,y))", "score": 0}
{"id": "folio_validation_561", "prediction": "all x y.((AiltonSilva(x) & FootballClub(y)) -> LoanedOutTo(x,y))", "score": 0}
{"id": "folio_validation_561", "prediction": "(LoanedOut(AiltonSierra,FootballClub))", "score": 0}
{"id": "folio_validation_561", "prediction": "all x y z.((FootballClub(x) & AiltonSilva(y) & FootballClub(z)) -> Funded(x,y))", "score": 0}
{"id": "folio_validation_561", "prediction": "all x y z.((AiltonSilva(x) & FootballClub(y) & Club(z)) -> LoanedOut(x))", "score": 0}
{"id": "folio_validation_561", "prediction": "all x.(Loan(x) -> AiltonSierra(x))", "score": 0}
{"id": "folio_validation_561", "prediction": "all x y.((AiltonSilva(x) & FootballClub(y)) -> LoanedOut(x,y))", "score": 0}
